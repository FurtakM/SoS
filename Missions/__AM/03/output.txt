// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3454 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2668 0 0
// PrepareWesternBase ;
  41: CALL 2897 0 0
// Action ;
  45: CALL 5785 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty , vcount , tmpv ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
// uc_side := 4 ;
1157: LD_ADDR_OWVAR 20
1161: PUSH
1162: LD_INT 4
1164: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1165: LD_ADDR_EXP 46
1169: PUSH
1170: LD_STRING Powell
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: LD_STRING 
1178: PPUSH
1179: CALL 39237 0 3
1183: ST_TO_ADDR
// uc_side := 1 ;
1184: LD_ADDR_OWVAR 20
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// uc_nation := 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// if debug then
1200: LD_EXP 1
1204: IFFALSE 1550
// begin for i = 1 to 4 do
1206: LD_ADDR_VAR 0 2
1210: PUSH
1211: DOUBLE
1212: LD_INT 1
1214: DEC
1215: ST_TO_ADDR
1216: LD_INT 4
1218: PUSH
1219: FOR_TO
1220: IFFALSE 1271
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL_OW 380
// un := CreateHuman ;
1243: LD_ADDR_VAR 0 3
1247: PUSH
1248: CALL_OW 44
1252: ST_TO_ADDR
// others := others ^ un ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_VAR 0 5
1262: PUSH
1263: LD_VAR 0 3
1267: ADD
1268: ST_TO_ADDR
// end ;
1269: GO 1219
1271: POP
1272: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1273: LD_ADDR_VAR 0 6
1277: PUSH
1278: LD_INT 21
1280: PUSH
1281: LD_INT 1
1283: PUSH
1284: LD_INT 1
1286: PUSH
1287: LD_INT 42
1289: PUSH
1290: LD_INT 0
1292: PUSH
1293: LD_INT 750
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 21
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 42
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 750
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_INT 21
1332: PUSH
1333: LD_INT 1
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: LD_INT 42
1341: PUSH
1342: LD_INT 0
1344: PUSH
1345: LD_INT 750
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 42
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 750
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 21
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 44
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: LD_INT 750
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: LD_INT 43
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 750
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 21
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: LD_INT 43
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 750
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 21
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 43
1471: PUSH
1472: LD_INT 0
1474: PUSH
1475: LD_INT 750
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 21
1488: PUSH
1489: LD_INT 1
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 90
1500: PUSH
1501: LD_INT 504
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 51
1523: PUSH
1524: LD_INT 80
1526: PUSH
1527: LD_INT 750
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1550: LD_ADDR_EXP 37
1554: PUSH
1555: LD_STRING JMM
1557: PPUSH
1558: LD_EXP 1
1562: NOT
1563: PPUSH
1564: LD_EXP 3
1568: PPUSH
1569: CALL 39237 0 3
1573: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1574: LD_ADDR_EXP 38
1578: PUSH
1579: LD_STRING Bobby
1581: PPUSH
1582: LD_EXP 1
1586: NOT
1587: PPUSH
1588: LD_EXP 3
1592: PPUSH
1593: CALL 39237 0 3
1597: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1598: LD_ADDR_EXP 39
1602: PUSH
1603: LD_STRING Cyrus
1605: PPUSH
1606: LD_EXP 1
1610: NOT
1611: PPUSH
1612: LD_EXP 3
1616: PPUSH
1617: CALL 39237 0 3
1621: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1622: LD_ADDR_EXP 40
1626: PUSH
1627: LD_STRING Lisa
1629: PPUSH
1630: LD_EXP 1
1634: NOT
1635: PPUSH
1636: LD_EXP 3
1640: PPUSH
1641: CALL 39237 0 3
1645: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1646: LD_ADDR_EXP 41
1650: PUSH
1651: LD_STRING Khatam
1653: PPUSH
1654: LD_EXP 1
1658: NOT
1659: PPUSH
1660: LD_EXP 3
1664: PPUSH
1665: CALL 39237 0 3
1669: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1670: LD_ADDR_EXP 42
1674: PUSH
1675: LD_STRING Brian
1677: PPUSH
1678: LD_EXP 1
1682: NOT
1683: PPUSH
1684: LD_EXP 3
1688: PPUSH
1689: CALL 39237 0 3
1693: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1694: LD_ADDR_EXP 43
1698: PUSH
1699: LD_STRING Jerry
1701: PPUSH
1702: LD_EXP 1
1706: NOT
1707: PPUSH
1708: LD_EXP 3
1712: PPUSH
1713: CALL 39237 0 3
1717: ST_TO_ADDR
// if Bobby then
1718: LD_EXP 38
1722: IFFALSE 1753
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1724: LD_ADDR_VAR 0 4
1728: PUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: LD_VAR 0 4
1738: PUSH
1739: LD_INT 1
1741: PLUS
1742: PPUSH
1743: LD_EXP 38
1747: PPUSH
1748: CALL_OW 2
1752: ST_TO_ADDR
// if Cyrus then
1753: LD_EXP 39
1757: IFFALSE 1788
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_VAR 0 4
1773: PUSH
1774: LD_INT 1
1776: PLUS
1777: PPUSH
1778: LD_EXP 39
1782: PPUSH
1783: CALL_OW 2
1787: ST_TO_ADDR
// if Lisa then
1788: LD_EXP 40
1792: IFFALSE 1823
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: LD_VAR 0 4
1808: PUSH
1809: LD_INT 1
1811: PLUS
1812: PPUSH
1813: LD_EXP 40
1817: PPUSH
1818: CALL_OW 2
1822: ST_TO_ADDR
// if Khatam then
1823: LD_EXP 41
1827: IFFALSE 1858
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: LD_VAR 0 4
1843: PUSH
1844: LD_INT 1
1846: PLUS
1847: PPUSH
1848: LD_EXP 41
1852: PPUSH
1853: CALL_OW 2
1857: ST_TO_ADDR
// if Brian then
1858: LD_EXP 42
1862: IFFALSE 1893
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1864: LD_ADDR_VAR 0 4
1868: PUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_VAR 0 4
1878: PUSH
1879: LD_INT 1
1881: PLUS
1882: PPUSH
1883: LD_EXP 42
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// if Jerry then
1893: LD_EXP 43
1897: IFFALSE 1928
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: PLUS
1917: PPUSH
1918: LD_EXP 43
1922: PPUSH
1923: CALL_OW 2
1927: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1928: LD_STRING 02_other_survivors
1930: PPUSH
1931: CALL_OW 28
1935: IFFALSE 1950
// others := CreateCharacterSet ( 02_other_survivors ) ;
1937: LD_ADDR_VAR 0 5
1941: PUSH
1942: LD_STRING 02_other_survivors
1944: PPUSH
1945: CALL_OW 31
1949: ST_TO_ADDR
// if others then
1950: LD_VAR 0 5
1954: IFFALSE 1979
// begin tmp := tmp ^ others ;
1956: LD_ADDR_VAR 0 4
1960: PUSH
1961: LD_VAR 0 4
1965: PUSH
1966: LD_VAR 0 5
1970: ADD
1971: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1972: LD_STRING 02_other_survivors
1974: PPUSH
1975: CALL_OW 40
// end ; jmm_units := tmp diff 0 ;
1979: LD_ADDR_EXP 4
1983: PUSH
1984: LD_VAR 0 4
1988: PUSH
1989: LD_INT 0
1991: DIFF
1992: ST_TO_ADDR
// if not vehicles then
1993: LD_VAR 0 6
1997: NOT
1998: IFFALSE 2015
// vehicles := LoadVariable ( 02_tanks_1 , [ ] ) ;
2000: LD_ADDR_VAR 0 6
2004: PUSH
2005: LD_STRING 02_tanks_1
2007: PPUSH
2008: EMPTY
2009: PPUSH
2010: CALL_OW 30
2014: ST_TO_ADDR
// if vehicles then
2015: LD_VAR 0 6
2019: IFFALSE 2387
// begin got_mech := false ;
2021: LD_ADDR_VAR 0 7
2025: PUSH
2026: LD_INT 0
2028: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 72
2048: IFFALSE 2058
// got_mech := true ;
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// vcount := Count ( vehicles ) ;
2058: LD_ADDR_VAR 0 9
2062: PUSH
2063: LD_VAR 0 6
2067: PPUSH
2068: CALL 41339 0 1
2072: ST_TO_ADDR
// if vcount > 1 then
2073: LD_VAR 0 9
2077: PUSH
2078: LD_INT 1
2080: GREATER
2081: IFFALSE 2184
// begin for i := 2 to vcount do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 2
2091: DEC
2092: ST_TO_ADDR
2093: LD_VAR 0 9
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2182
// if vehicles [ i ] [ 4 ] = ru_cargo_bay then
2101: LD_VAR 0 6
2105: PUSH
2106: LD_VAR 0 2
2110: ARRAY
2111: PUSH
2112: LD_INT 4
2114: ARRAY
2115: PUSH
2116: LD_INT 51
2118: EQUAL
2119: IFFALSE 2180
// begin tmpv := vehicles [ i ] ;
2121: LD_ADDR_VAR 0 10
2125: PUSH
2126: LD_VAR 0 6
2130: PUSH
2131: LD_VAR 0 2
2135: ARRAY
2136: ST_TO_ADDR
// vehicles := Delete ( vehicles , i ) ;
2137: LD_ADDR_VAR 0 6
2141: PUSH
2142: LD_VAR 0 6
2146: PPUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 3
2156: ST_TO_ADDR
// vehicles := Insert ( vehicles , 1 , tmpv ) ;
2157: LD_ADDR_VAR 0 6
2161: PUSH
2162: LD_VAR 0 6
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_VAR 0 10
2174: PPUSH
2175: CALL_OW 2
2179: ST_TO_ADDR
// end ;
2180: GO 2098
2182: POP
2183: POP
// end ; if vcount > 6 then
2184: LD_VAR 0 9
2188: PUSH
2189: LD_INT 6
2191: GREATER
2192: IFFALSE 2202
// vcount := 6 ;
2194: LD_ADDR_VAR 0 9
2198: PUSH
2199: LD_INT 6
2201: ST_TO_ADDR
// if jmm_units + 1 < vcount then
2202: LD_EXP 4
2206: PUSH
2207: LD_INT 1
2209: PLUS
2210: PUSH
2211: LD_VAR 0 9
2215: LESS
2216: IFFALSE 2232
// vcount := jmm_units + 1 ;
2218: LD_ADDR_VAR 0 9
2222: PUSH
2223: LD_EXP 4
2227: PUSH
2228: LD_INT 1
2230: PLUS
2231: ST_TO_ADDR
// for i := 1 to vcount do
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: DOUBLE
2238: LD_INT 1
2240: DEC
2241: ST_TO_ADDR
2242: LD_VAR 0 9
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2385
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 3
2260: PPUSH
2261: LD_VAR 0 6
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: LD_VAR 0 6
2280: PUSH
2281: LD_VAR 0 2
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 6
2295: PUSH
2296: LD_VAR 0 2
2300: ARRAY
2301: PUSH
2302: LD_INT 3
2304: ARRAY
2305: PPUSH
2306: LD_VAR 0 6
2310: PUSH
2311: LD_VAR 0 2
2315: ARRAY
2316: PUSH
2317: LD_INT 4
2319: ARRAY
2320: PPUSH
2321: LD_INT 40
2323: PPUSH
2324: CALL 497 0 7
2328: ST_TO_ADDR
// if not got_mech then
2329: LD_VAR 0 7
2333: NOT
2334: IFFALSE 2360
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_VAR 0 6
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_INT 6
2354: ARRAY
2355: PPUSH
2356: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_VAR 0 3
2377: PPUSH
2378: CALL_OW 2
2382: ST_TO_ADDR
// end ;
2383: GO 2247
2385: POP
2386: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
2387: LD_EXP 37
2391: PPUSH
2392: LD_INT 194
2394: PPUSH
2395: LD_INT 119
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 48
// if tmp then
2405: LD_VAR 0 4
2409: IFFALSE 2597
// begin for i in tmp do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_VAR 0 4
2420: PUSH
2421: FOR_IN
2422: IFFALSE 2595
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL_OW 257
2433: PUSH
2434: LD_INT 1
2436: NONEQUAL
2437: PUSH
2438: LD_VAR 0 2
2442: PUSH
2443: LD_EXP 41
2447: NONEQUAL
2448: AND
2449: IFFALSE 2463
// SetClass ( i , 1 ) ;
2451: LD_VAR 0 2
2455: PPUSH
2456: LD_INT 1
2458: PPUSH
2459: CALL_OW 336
// if i = Khatam then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_EXP 41
2472: EQUAL
2473: IFFALSE 2487
// SetClass ( i , 4 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 4
2482: PPUSH
2483: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2487: LD_ADDR_VAR 0 8
2491: PUSH
2492: LD_INT 22
2494: PUSH
2495: LD_INT 1
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 21
2504: PUSH
2505: LD_INT 2
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 58
2514: PUSH
2515: EMPTY
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2528: LD_VAR 0 2
2532: PPUSH
2533: CALL_OW 247
2537: PUSH
2538: LD_INT 1
2540: EQUAL
2541: PUSH
2542: LD_VAR 0 8
2546: AND
2547: IFFALSE 2569
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2549: LD_VAR 0 2
2553: PPUSH
2554: LD_VAR 0 8
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PPUSH
2563: CALL_OW 52
2567: GO 2584
// PlaceUnitArea ( i , startArea , false ) ;
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 0
2579: PPUSH
2580: CALL_OW 49
// ComHold ( i ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: CALL_OW 140
// end ;
2593: GO 2421
2595: POP
2596: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2597: LD_ADDR_EXP 7
2601: PUSH
2602: LD_STRING 02_mikhailStatus_1
2604: PPUSH
2605: LD_INT 0
2607: PPUSH
2608: CALL_OW 30
2612: ST_TO_ADDR
// if not bierezov_exist and not debug then
2613: LD_EXP 7
2617: NOT
2618: PUSH
2619: LD_EXP 1
2623: NOT
2624: AND
2625: IFFALSE 2629
// exit ;
2627: GO 2663
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2629: LD_ADDR_EXP 45
2633: PUSH
2634: LD_STRING Mikhail
2636: PPUSH
2637: LD_INT 0
2639: PPUSH
2640: LD_STRING 
2642: PPUSH
2643: CALL 39237 0 3
2647: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2648: LD_EXP 45
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 49
// end ;
2663: LD_VAR 0 1
2667: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
2673: PPUSH
// uc_side := 4 ;
2674: LD_ADDR_OWVAR 20
2678: PUSH
2679: LD_INT 4
2681: ST_TO_ADDR
// uc_nation := 1 ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 1
2689: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2690: LD_ADDR_EXP 44
2694: PUSH
2695: LD_STRING Cornell
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: LD_STRING 
2703: PPUSH
2704: CALL 39237 0 3
2708: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2709: LD_ADDR_EXP 6
2713: PUSH
2714: LD_INT 9
2716: PUSH
2717: LD_EXP 4
2721: MINUS
2722: ST_TO_ADDR
// tmp := [ ] ;
2723: LD_ADDR_VAR 0 2
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// if cornel_units < 4 then
2730: LD_EXP 6
2734: PUSH
2735: LD_INT 4
2737: LESS
2738: IFFALSE 2748
// cornel_units := 4 ;
2740: LD_ADDR_EXP 6
2744: PUSH
2745: LD_INT 4
2747: ST_TO_ADDR
// for i = 1 to cornel_units do
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: DOUBLE
2754: LD_INT 1
2756: DEC
2757: ST_TO_ADDR
2758: LD_EXP 6
2762: PUSH
2763: FOR_TO
2764: IFFALSE 2862
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2766: LD_INT 0
2768: PPUSH
2769: LD_INT 1
2771: PUSH
2772: LD_INT 1
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: LD_INT 4
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: PUSH
2791: LD_VAR 0 4
2795: PUSH
2796: LD_INT 5
2798: MOD
2799: PUSH
2800: LD_INT 1
2802: PLUS
2803: ARRAY
2804: PPUSH
2805: LD_INT 2
2807: PPUSH
2808: CALL_OW 380
// un := CreateHuman ;
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: CALL_OW 44
2821: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2822: LD_ADDR_VAR 0 2
2826: PUSH
2827: LD_VAR 0 2
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: LD_VAR 0 3
2839: PPUSH
2840: CALL_OW 2
2844: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2845: LD_VAR 0 3
2849: PPUSH
2850: LD_INT 2
2852: PPUSH
2853: LD_INT 0
2855: PPUSH
2856: CALL_OW 49
// end ;
2860: GO 2763
2862: POP
2863: POP
// cornel_units := tmp ;
2864: LD_ADDR_EXP 6
2868: PUSH
2869: LD_VAR 0 2
2873: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2874: LD_EXP 44
2878: PPUSH
2879: LD_INT 191
2881: PPUSH
2882: LD_INT 106
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 48
// end ;
2892: LD_VAR 0 1
2896: RET
// export function PrepareWesternBase ; var i ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
// uc_side := 8 ;
2901: LD_ADDR_OWVAR 20
2905: PUSH
2906: LD_INT 8
2908: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2909: LD_ADDR_EXP 47
2913: PUSH
2914: LD_STRING Lynch
2916: PPUSH
2917: LD_INT 0
2919: PPUSH
2920: LD_STRING 
2922: PPUSH
2923: CALL 39237 0 3
2927: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2928: LD_ADDR_EXP 48
2932: PUSH
2933: LD_STRING Walker
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: LD_STRING 
2941: PPUSH
2942: CALL 39237 0 3
2946: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2947: LD_ADDR_EXP 49
2951: PUSH
2952: LD_STRING Turner
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: LD_STRING 
2960: PPUSH
2961: CALL 39237 0 3
2965: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2966: LD_ADDR_EXP 50
2970: PUSH
2971: LD_STRING Jillian
2973: PPUSH
2974: LD_INT 0
2976: PPUSH
2977: LD_STRING 
2979: PPUSH
2980: CALL 39237 0 3
2984: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: LD_EXP 47
2994: PUSH
2995: LD_EXP 48
2999: PUSH
3000: LD_EXP 49
3004: PUSH
3005: LD_EXP 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: FOR_IN
3017: IFFALSE 3045
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 3
3026: PPUSH
3027: LD_INT 0
3029: PPUSH
3030: CALL_OW 49
// ComHold ( i ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 140
// end ;
3043: GO 3016
3045: POP
3046: POP
// end ;
3047: LD_VAR 0 1
3051: RET
// export function SelectGroup ; var units , selected , i ; begin
3052: LD_INT 0
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
3058: LD_ADDR_VAR 0 2
3062: PUSH
3063: LD_EXP 37
3067: PUSH
3068: LD_INT -3
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: LD_EXP 4
3079: ADD
3080: PUSH
3081: LD_INT -2
3083: PUSH
3084: LD_INT -4
3086: PUSH
3087: LD_EXP 44
3091: PUSH
3092: LD_EXP 45
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: ADD
3103: PUSH
3104: LD_INT -3
3106: PUSH
3107: EMPTY
3108: LIST
3109: ADD
3110: PUSH
3111: LD_EXP 6
3115: ADD
3116: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
3117: LD_ADDR_VAR 0 3
3121: PUSH
3122: LD_EXP 37
3126: PUSH
3127: LD_STRING Select four characters to go with you
3129: PPUSH
3130: LD_INT 4
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: LD_VAR 0 2
3140: PPUSH
3141: EMPTY
3142: PPUSH
3143: CALL_OW 42
3147: ADD
3148: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
3149: LD_ADDR_EXP 6
3153: PUSH
3154: LD_EXP 4
3158: PUSH
3159: LD_EXP 6
3163: UNION
3164: PUSH
3165: LD_VAR 0 3
3169: DIFF
3170: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
3171: LD_ADDR_VAR 0 4
3175: PUSH
3176: LD_EXP 6
3180: PUSH
3181: LD_EXP 45
3185: ADD
3186: PUSH
3187: FOR_IN
3188: IFFALSE 3219
// if GetSide ( i ) = 1 then
3190: LD_VAR 0 4
3194: PPUSH
3195: CALL_OW 255
3199: PUSH
3200: LD_INT 1
3202: EQUAL
3203: IFFALSE 3217
// SetSide ( i , 4 ) ;
3205: LD_VAR 0 4
3209: PPUSH
3210: LD_INT 4
3212: PPUSH
3213: CALL_OW 235
3217: GO 3187
3219: POP
3220: POP
// for i in selected do
3221: LD_ADDR_VAR 0 4
3225: PUSH
3226: LD_VAR 0 3
3230: PUSH
3231: FOR_IN
3232: IFFALSE 3263
// if GetSide ( i ) = 4 then
3234: LD_VAR 0 4
3238: PPUSH
3239: CALL_OW 255
3243: PUSH
3244: LD_INT 4
3246: EQUAL
3247: IFFALSE 3261
// SetSide ( i , 1 ) ;
3249: LD_VAR 0 4
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: CALL_OW 235
3261: GO 3231
3263: POP
3264: POP
// jmm_units := jmm_units diff cornel_units ;
3265: LD_ADDR_EXP 4
3269: PUSH
3270: LD_EXP 4
3274: PUSH
3275: LD_EXP 6
3279: DIFF
3280: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
3281: LD_EXP 38
3285: PPUSH
3286: CALL_OW 255
3290: PUSH
3291: LD_INT 4
3293: EQUAL
3294: IFFALSE 3309
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
3296: LD_EXP 3
3300: PUSH
3301: LD_STRING Bobby
3303: STR
3304: PPUSH
3305: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
3309: LD_EXP 39
3313: PPUSH
3314: CALL_OW 255
3318: PUSH
3319: LD_INT 4
3321: EQUAL
3322: IFFALSE 3337
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
3324: LD_EXP 3
3328: PUSH
3329: LD_STRING Cyrus
3331: STR
3332: PPUSH
3333: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
3337: LD_EXP 40
3341: PPUSH
3342: CALL_OW 255
3346: PUSH
3347: LD_INT 4
3349: EQUAL
3350: IFFALSE 3365
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
3352: LD_EXP 3
3356: PUSH
3357: LD_STRING Lisa
3359: STR
3360: PPUSH
3361: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
3365: LD_EXP 41
3369: PPUSH
3370: CALL_OW 255
3374: PUSH
3375: LD_INT 4
3377: EQUAL
3378: IFFALSE 3393
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
3380: LD_EXP 3
3384: PUSH
3385: LD_STRING Khatam
3387: STR
3388: PPUSH
3389: CALL_OW 40
// if GetSide ( Brian ) = 4 then
3393: LD_EXP 42
3397: PPUSH
3398: CALL_OW 255
3402: PUSH
3403: LD_INT 4
3405: EQUAL
3406: IFFALSE 3421
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3408: LD_EXP 3
3412: PUSH
3413: LD_STRING Brian
3415: STR
3416: PPUSH
3417: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3421: LD_EXP 43
3425: PPUSH
3426: CALL_OW 255
3430: PUSH
3431: LD_INT 4
3433: EQUAL
3434: IFFALSE 3449
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3436: LD_EXP 3
3440: PUSH
3441: LD_STRING Jerry
3443: STR
3444: PPUSH
3445: CALL_OW 40
// end ; end_of_file
3449: LD_VAR 0 1
3453: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3454: LD_INT 0
3456: PPUSH
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
// ru_alert := false ;
3469: LD_ADDR_EXP 60
3473: PUSH
3474: LD_INT 0
3476: ST_TO_ADDR
// ru_produce_list := [ ] ;
3477: LD_ADDR_EXP 57
3481: PUSH
3482: EMPTY
3483: ST_TO_ADDR
// if Difficulty > 1 then
3484: LD_OWVAR 67
3488: PUSH
3489: LD_INT 1
3491: GREATER
3492: IFFALSE 3616
// begin uc_side := 3 ;
3494: LD_ADDR_OWVAR 20
3498: PUSH
3499: LD_INT 3
3501: ST_TO_ADDR
// uc_nation := 3 ;
3502: LD_ADDR_OWVAR 21
3506: PUSH
3507: LD_INT 3
3509: ST_TO_ADDR
// bc_type := b_breastwork ;
3510: LD_ADDR_OWVAR 42
3514: PUSH
3515: LD_INT 31
3517: ST_TO_ADDR
// bc_level := Difficulty ;
3518: LD_ADDR_OWVAR 43
3522: PUSH
3523: LD_OWVAR 67
3527: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3528: LD_INT 22
3530: PPUSH
3531: LD_INT 14
3533: PPUSH
3534: LD_INT 0
3536: PPUSH
3537: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3541: LD_INT 48
3543: PPUSH
3544: LD_INT 46
3546: PPUSH
3547: LD_INT 0
3549: PPUSH
3550: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3554: LD_INT 86
3556: PPUSH
3557: LD_INT 65
3559: PPUSH
3560: LD_INT 5
3562: PPUSH
3563: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3567: LD_INT 165
3569: PPUSH
3570: LD_INT 73
3572: PPUSH
3573: LD_INT 5
3575: PPUSH
3576: CALL_OW 47
// if Difficulty > 2 then
3580: LD_OWVAR 67
3584: PUSH
3585: LD_INT 2
3587: GREATER
3588: IFFALSE 3616
// begin CreateAndPlaceBuildingXYD ( 152 , 114 , 4 ) ;
3590: LD_INT 152
3592: PPUSH
3593: LD_INT 114
3595: PPUSH
3596: LD_INT 4
3598: PPUSH
3599: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 157 , 97 , 4 ) ;
3603: LD_INT 157
3605: PPUSH
3606: LD_INT 97
3608: PPUSH
3609: LD_INT 4
3611: PPUSH
3612: CALL_OW 47
// end ; end ; if Difficulty >= 3 then
3616: LD_OWVAR 67
3620: PUSH
3621: LD_INT 3
3623: GREATEREQUAL
3624: IFFALSE 3639
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3626: LD_INT 51
3628: PPUSH
3629: LD_INT 3
3631: PPUSH
3632: LD_INT 2
3634: PPUSH
3635: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3639: LD_ADDR_VAR 0 7
3643: PUSH
3644: LD_INT 22
3646: PUSH
3647: LD_INT 3
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 2
3656: PUSH
3657: LD_INT 30
3659: PUSH
3660: LD_INT 31
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PUSH
3667: LD_INT 30
3669: PUSH
3670: LD_INT 32
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3691: LD_ADDR_VAR 0 8
3695: PUSH
3696: LD_INT 22
3698: PUSH
3699: LD_INT 3
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: LD_INT 30
3708: PUSH
3709: LD_INT 4
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PPUSH
3720: CALL_OW 69
3724: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3725: LD_ADDR_VAR 0 10
3729: PUSH
3730: LD_INT 22
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PUSH
3740: LD_INT 30
3742: PUSH
3743: LD_INT 3
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: PPUSH
3754: CALL_OW 69
3758: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3759: LD_ADDR_VAR 0 9
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 3
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 30
3776: PUSH
3777: LD_INT 6
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PPUSH
3788: CALL_OW 69
3792: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3793: LD_ADDR_VAR 0 2
3797: PUSH
3798: LD_INT 22
3800: PUSH
3801: LD_INT 3
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: LD_INT 30
3810: PUSH
3811: LD_INT 1
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PPUSH
3822: CALL_OW 69
3826: PUSH
3827: FOR_IN
3828: IFFALSE 3872
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3830: LD_VAR 0 2
3834: PPUSH
3835: CALL_OW 274
3839: PPUSH
3840: LD_INT 1
3842: PPUSH
3843: LD_INT 1000
3845: PPUSH
3846: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3850: LD_VAR 0 2
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 2
3862: PPUSH
3863: LD_INT 300
3865: PPUSH
3866: CALL_OW 277
// end ;
3870: GO 3827
3872: POP
3873: POP
// uc_side := 3 ;
3874: LD_ADDR_OWVAR 20
3878: PUSH
3879: LD_INT 3
3881: ST_TO_ADDR
// uc_nation := 3 ;
3882: LD_ADDR_OWVAR 21
3886: PUSH
3887: LD_INT 3
3889: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3890: LD_ADDR_VAR 0 11
3894: PUSH
3895: LD_INT 2
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: LD_INT 4
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: PUSH
3913: LD_OWVAR 67
3917: ARRAY
3918: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3919: LD_ADDR_EXP 52
3923: PUSH
3924: LD_STRING Pokryshkin
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: LD_STRING 
3932: PPUSH
3933: CALL 39237 0 3
3937: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3938: LD_EXP 52
3942: PPUSH
3943: LD_INT 63
3945: PPUSH
3946: LD_INT 21
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3956: LD_EXP 52
3960: PPUSH
3961: CALL_OW 140
// InitHc ;
3965: CALL_OW 19
// for i in fac do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: LD_VAR 0 10
3978: PUSH
3979: FOR_IN
3980: IFFALSE 4033
// begin for j = 1 to 6 do
3982: LD_ADDR_VAR 0 3
3986: PUSH
3987: DOUBLE
3988: LD_INT 1
3990: DEC
3991: ST_TO_ADDR
3992: LD_INT 6
3994: PUSH
3995: FOR_TO
3996: IFFALSE 4029
// begin PrepareHuman ( false , 3 , skill ) ;
3998: LD_INT 0
4000: PPUSH
4001: LD_INT 3
4003: PPUSH
4004: LD_VAR 0 11
4008: PPUSH
4009: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4013: CALL_OW 44
4017: PPUSH
4018: LD_VAR 0 2
4022: PPUSH
4023: CALL_OW 52
// end ;
4027: GO 3995
4029: POP
4030: POP
// end ;
4031: GO 3979
4033: POP
4034: POP
// for i in lab do
4035: LD_ADDR_VAR 0 2
4039: PUSH
4040: LD_VAR 0 9
4044: PUSH
4045: FOR_IN
4046: IFFALSE 4079
// begin PrepareHuman ( false , 4 , skill ) ;
4048: LD_INT 0
4050: PPUSH
4051: LD_INT 4
4053: PPUSH
4054: LD_VAR 0 11
4058: PPUSH
4059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4063: CALL_OW 44
4067: PPUSH
4068: LD_VAR 0 2
4072: PPUSH
4073: CALL_OW 52
// end ;
4077: GO 4045
4079: POP
4080: POP
// for i in tw do
4081: LD_ADDR_VAR 0 2
4085: PUSH
4086: LD_VAR 0 7
4090: PUSH
4091: FOR_IN
4092: IFFALSE 4141
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
4094: LD_VAR 0 2
4098: PPUSH
4099: LD_INT 42
4101: PUSH
4102: LD_INT 43
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 1
4111: PPUSH
4112: LD_INT 2
4114: PPUSH
4115: CALL_OW 12
4119: ARRAY
4120: PPUSH
4121: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
4125: LD_VAR 0 11
4129: PPUSH
4130: LD_VAR 0 2
4134: PPUSH
4135: CALL 775 0 2
// end ;
4139: GO 4091
4141: POP
4142: POP
// for i in bar do
4143: LD_ADDR_VAR 0 2
4147: PUSH
4148: LD_VAR 0 8
4152: PUSH
4153: FOR_IN
4154: IFFALSE 4187
// begin PrepareHuman ( false , 1 , skill ) ;
4156: LD_INT 0
4158: PPUSH
4159: LD_INT 1
4161: PPUSH
4162: LD_VAR 0 11
4166: PPUSH
4167: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4171: CALL_OW 44
4175: PPUSH
4176: LD_VAR 0 2
4180: PPUSH
4181: CALL_OW 52
// end ;
4185: GO 4153
4187: POP
4188: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
4189: LD_ADDR_VAR 0 13
4193: PUSH
4194: LD_INT 100
4196: PUSH
4197: LD_INT 9
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 135
4206: PUSH
4207: LD_INT 60
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: LD_INT 41
4216: PUSH
4217: LD_INT 6
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: LD_INT 22
4226: PUSH
4227: LD_INT 9
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 84
4236: PUSH
4237: LD_INT 14
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: ST_TO_ADDR
// vehicles := [ ] ;
4251: LD_ADDR_VAR 0 12
4255: PUSH
4256: EMPTY
4257: ST_TO_ADDR
// for i in spot_xy do
4258: LD_ADDR_VAR 0 2
4262: PUSH
4263: LD_VAR 0 13
4267: PUSH
4268: FOR_IN
4269: IFFALSE 4427
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
4271: LD_ADDR_VAR 0 6
4275: PUSH
4276: LD_INT 3
4278: PPUSH
4279: LD_INT 3
4281: PPUSH
4282: LD_INT 22
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 1
4290: PPUSH
4291: LD_INT 42
4293: PUSH
4294: LD_INT 43
4296: PUSH
4297: LD_INT 44
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 3
4310: PPUSH
4311: CALL_OW 12
4315: ARRAY
4316: PPUSH
4317: LD_INT 100
4319: PPUSH
4320: CALL 497 0 7
4324: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
4325: LD_ADDR_VAR 0 12
4329: PUSH
4330: LD_VAR 0 12
4334: PPUSH
4335: LD_VAR 0 12
4339: PUSH
4340: LD_INT 1
4342: PLUS
4343: PPUSH
4344: LD_VAR 0 6
4348: PPUSH
4349: CALL_OW 2
4353: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4354: LD_VAR 0 6
4358: PPUSH
4359: LD_INT 3
4361: PPUSH
4362: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
4366: LD_VAR 0 6
4370: PPUSH
4371: LD_VAR 0 2
4375: PUSH
4376: LD_INT 1
4378: ARRAY
4379: PPUSH
4380: LD_VAR 0 2
4384: PUSH
4385: LD_INT 2
4387: ARRAY
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
4396: LD_INT 0
4398: PPUSH
4399: LD_INT 3
4401: PPUSH
4402: LD_VAR 0 11
4406: PPUSH
4407: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4411: CALL_OW 44
4415: PPUSH
4416: LD_VAR 0 6
4420: PPUSH
4421: CALL_OW 52
// end ;
4425: GO 4268
4427: POP
4428: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_INT 5
4441: PUSH
4442: LD_INT 7
4444: PUSH
4445: LD_INT 8
4447: PUSH
4448: LD_INT 9
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PUSH
4463: FOR_TO
4464: IFFALSE 4524
// begin PrepareHuman ( false , 1 , skill ) ;
4466: LD_INT 0
4468: PPUSH
4469: LD_INT 1
4471: PPUSH
4472: LD_VAR 0 11
4476: PPUSH
4477: CALL_OW 380
// un := CreateHuman ;
4481: LD_ADDR_VAR 0 5
4485: PUSH
4486: CALL_OW 44
4490: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4491: LD_VAR 0 5
4495: PPUSH
4496: LD_INT 11
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4506: LD_ADDR_EXP 55
4510: PUSH
4511: LD_EXP 55
4515: PUSH
4516: LD_VAR 0 5
4520: ADD
4521: ST_TO_ADDR
// end ;
4522: GO 4463
4524: POP
4525: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 2
4538: PUSH
4539: LD_INT 3
4541: PUSH
4542: LD_INT 4
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PUSH
4554: LD_OWVAR 67
4558: ARRAY
4559: PUSH
4560: FOR_TO
4561: IFFALSE 4621
// begin PrepareHuman ( false , 1 , skill ) ;
4563: LD_INT 0
4565: PPUSH
4566: LD_INT 1
4568: PPUSH
4569: LD_VAR 0 11
4573: PPUSH
4574: CALL_OW 380
// un := CreateHuman ;
4578: LD_ADDR_VAR 0 5
4582: PUSH
4583: CALL_OW 44
4587: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4588: LD_VAR 0 5
4592: PPUSH
4593: LD_INT 12
4595: PPUSH
4596: LD_INT 0
4598: PPUSH
4599: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4603: LD_ADDR_EXP 53
4607: PUSH
4608: LD_EXP 53
4612: PUSH
4613: LD_VAR 0 5
4617: ADD
4618: ST_TO_ADDR
// end ;
4619: GO 4560
4621: POP
4622: POP
// for i = 1 to 2 do
4623: LD_ADDR_VAR 0 2
4627: PUSH
4628: DOUBLE
4629: LD_INT 1
4631: DEC
4632: ST_TO_ADDR
4633: LD_INT 2
4635: PUSH
4636: FOR_TO
4637: IFFALSE 4730
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4639: LD_INT 1
4641: PPUSH
4642: LD_INT 1
4644: PPUSH
4645: LD_VAR 0 11
4649: PPUSH
4650: CALL_OW 380
// hc_attr := [ 8 + Difficulty , 8 + Difficulty ] ;
4654: LD_ADDR_OWVAR 29
4658: PUSH
4659: LD_INT 8
4661: PUSH
4662: LD_OWVAR 67
4666: PLUS
4667: PUSH
4668: LD_INT 8
4670: PUSH
4671: LD_OWVAR 67
4675: PLUS
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: ST_TO_ADDR
// un := CreateHuman ;
4681: LD_ADDR_VAR 0 5
4685: PUSH
4686: CALL_OW 44
4690: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4691: LD_VAR 0 5
4695: PPUSH
4696: LD_INT 39
4698: PPUSH
4699: LD_INT 12
4701: PPUSH
4702: LD_INT 3
4704: PPUSH
4705: LD_INT 0
4707: PPUSH
4708: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4712: LD_ADDR_EXP 54
4716: PUSH
4717: LD_EXP 54
4721: PUSH
4722: LD_VAR 0 5
4726: ADD
4727: ST_TO_ADDR
// end ;
4728: GO 4636
4730: POP
4731: POP
// InitHc ;
4732: CALL_OW 19
// for i = 1 to 3 do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_INT 3
4748: PUSH
4749: FOR_TO
4750: IFFALSE 4816
// begin PrepareHuman ( false , 1 , skill ) ;
4752: LD_INT 0
4754: PPUSH
4755: LD_INT 1
4757: PPUSH
4758: LD_VAR 0 11
4762: PPUSH
4763: CALL_OW 380
// un := CreateHuman ;
4767: LD_ADDR_VAR 0 5
4771: PUSH
4772: CALL_OW 44
4776: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4777: LD_VAR 0 5
4781: PPUSH
4782: LD_INT 180
4784: PPUSH
4785: LD_INT 11
4787: PPUSH
4788: LD_INT 4
4790: PPUSH
4791: LD_INT 0
4793: PPUSH
4794: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4798: LD_ADDR_EXP 58
4802: PUSH
4803: LD_EXP 58
4807: PUSH
4808: LD_VAR 0 5
4812: ADD
4813: ST_TO_ADDR
// end ;
4814: GO 4749
4816: POP
4817: POP
// ru_vehicles := vehicles ;
4818: LD_ADDR_EXP 56
4822: PUSH
4823: LD_VAR 0 12
4827: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4828: LD_ADDR_EXP 59
4832: PUSH
4833: LD_INT 131
4835: PUSH
4836: LD_INT 121
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 113
4845: PUSH
4846: LD_INT 90
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 93
4855: PUSH
4856: LD_INT 62
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 106
4870: PUSH
4871: LD_INT 54
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: LD_INT 120
4880: PUSH
4881: LD_INT 80
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 143
4890: PUSH
4891: LD_INT 120
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: PUSH
4903: LD_INT 154
4905: PUSH
4906: LD_INT 116
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: LD_INT 140
4915: PUSH
4916: LD_INT 93
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: LD_INT 130
4925: PUSH
4926: LD_INT 58
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: PUSH
4938: LD_INT 105
4940: PUSH
4941: LD_INT 106
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 134
4950: PUSH
4951: LD_INT 98
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 159
4960: PUSH
4961: LD_INT 113
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: ST_TO_ADDR
// if Difficulty = 1 then
4979: LD_OWVAR 67
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: IFFALSE 4991
// exit ;
4989: GO 5046
// for i = 1 to Difficulty - 1 do
4991: LD_ADDR_VAR 0 2
4995: PUSH
4996: DOUBLE
4997: LD_INT 1
4999: DEC
5000: ST_TO_ADDR
5001: LD_OWVAR 67
5005: PUSH
5006: LD_INT 1
5008: MINUS
5009: PUSH
5010: FOR_TO
5011: IFFALSE 5044
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
5013: LD_ADDR_EXP 57
5017: PUSH
5018: LD_EXP 57
5022: PUSH
5023: LD_INT 22
5025: PUSH
5026: LD_INT 1
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: LD_INT 43
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: ADD
5041: ST_TO_ADDR
5042: GO 5010
5044: POP
5045: POP
// end ;
5046: LD_VAR 0 1
5050: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
5051: LD_INT 22
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 21
5063: PUSH
5064: LD_INT 2
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PPUSH
5075: CALL_OW 69
5079: IFFALSE 5173
5081: GO 5083
5083: DISABLE
5084: LD_INT 0
5086: PPUSH
5087: PPUSH
// begin enable ;
5088: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
5089: LD_ADDR_VAR 0 2
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_INT 3
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 2
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PPUSH
5118: CALL_OW 69
5122: ST_TO_ADDR
// if filter then
5123: LD_VAR 0 2
5127: IFFALSE 5173
// for i in filter do
5129: LD_ADDR_VAR 0 1
5133: PUSH
5134: LD_VAR 0 2
5138: PUSH
5139: FOR_IN
5140: IFFALSE 5171
// if GetFuel ( i ) < 20 then
5142: LD_VAR 0 1
5146: PPUSH
5147: CALL_OW 261
5151: PUSH
5152: LD_INT 20
5154: LESS
5155: IFFALSE 5169
// SetFuel ( i , 20 ) ;
5157: LD_VAR 0 1
5161: PPUSH
5162: LD_INT 20
5164: PPUSH
5165: CALL_OW 240
5169: GO 5139
5171: POP
5172: POP
// end ;
5173: PPOPN 2
5175: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
5176: LD_EXP 57
5180: IFFALSE 5399
5182: GO 5184
5184: DISABLE
5185: LD_INT 0
5187: PPUSH
5188: PPUSH
5189: PPUSH
// begin enable ;
5190: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
5191: LD_ADDR_VAR 0 2
5195: PUSH
5196: LD_INT 22
5198: PUSH
5199: LD_INT 3
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 30
5208: PUSH
5209: LD_INT 3
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PPUSH
5220: CALL_OW 69
5224: ST_TO_ADDR
// can_produce := [ ] ;
5225: LD_ADDR_VAR 0 3
5229: PUSH
5230: EMPTY
5231: ST_TO_ADDR
// if not fac then
5232: LD_VAR 0 2
5236: NOT
5237: IFFALSE 5242
// begin disable ;
5239: DISABLE
// exit ;
5240: GO 5399
// end ; for i in fac do
5242: LD_ADDR_VAR 0 1
5246: PUSH
5247: LD_VAR 0 2
5251: PUSH
5252: FOR_IN
5253: IFFALSE 5291
// if UnitsInside ( i ) then
5255: LD_VAR 0 1
5259: PPUSH
5260: CALL_OW 313
5264: IFFALSE 5289
// can_produce := Insert ( can_produce , 1 , i ) ;
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_VAR 0 3
5275: PPUSH
5276: LD_INT 1
5278: PPUSH
5279: LD_VAR 0 1
5283: PPUSH
5284: CALL_OW 2
5288: ST_TO_ADDR
5289: GO 5252
5291: POP
5292: POP
// if not can_produce then
5293: LD_VAR 0 3
5297: NOT
5298: IFFALSE 5302
// exit ;
5300: GO 5399
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
5302: LD_VAR 0 3
5306: PUSH
5307: LD_INT 1
5309: PPUSH
5310: LD_VAR 0 3
5314: PPUSH
5315: CALL_OW 12
5319: ARRAY
5320: PPUSH
5321: LD_EXP 57
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: LD_EXP 57
5334: PUSH
5335: LD_INT 2
5337: ARRAY
5338: PPUSH
5339: LD_EXP 57
5343: PUSH
5344: LD_INT 3
5346: ARRAY
5347: PPUSH
5348: LD_EXP 57
5352: PUSH
5353: LD_INT 4
5355: ARRAY
5356: PPUSH
5357: CALL_OW 125
// for i = 1 to 4 do
5361: LD_ADDR_VAR 0 1
5365: PUSH
5366: DOUBLE
5367: LD_INT 1
5369: DEC
5370: ST_TO_ADDR
5371: LD_INT 4
5373: PUSH
5374: FOR_TO
5375: IFFALSE 5397
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
5377: LD_ADDR_EXP 57
5381: PUSH
5382: LD_EXP 57
5386: PPUSH
5387: LD_INT 1
5389: PPUSH
5390: CALL_OW 3
5394: ST_TO_ADDR
5395: GO 5374
5397: POP
5398: POP
// end ;
5399: PPOPN 3
5401: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
5402: LD_INT 0
5404: PPUSH
5405: PPUSH
5406: PPUSH
// for i = 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
5407: LD_ADDR_VAR 0 2
5411: PUSH
5412: DOUBLE
5413: LD_INT 1
5415: DEC
5416: ST_TO_ADDR
5417: LD_INT 2
5419: PUSH
5420: LD_INT 3
5422: PUSH
5423: LD_INT 3
5425: PUSH
5426: LD_INT 3
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: LD_OWVAR 67
5439: ARRAY
5440: PUSH
5441: FOR_TO
5442: IFFALSE 5591
// begin PrepareHuman ( false , 3 , 3 ) ;
5444: LD_INT 0
5446: PPUSH
5447: LD_INT 3
5449: PPUSH
5450: LD_INT 3
5452: PPUSH
5453: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
5457: LD_ADDR_VAR 0 3
5461: PUSH
5462: LD_INT 3
5464: PPUSH
5465: LD_INT 3
5467: PPUSH
5468: LD_INT 22
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: LD_INT 1
5476: PPUSH
5477: LD_INT 43
5479: PUSH
5480: LD_INT 42
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 1
5489: PPUSH
5490: LD_INT 2
5492: PPUSH
5493: CALL_OW 12
5497: ARRAY
5498: PPUSH
5499: LD_INT 70
5501: PPUSH
5502: CALL 497 0 7
5506: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5507: LD_VAR 0 3
5511: PPUSH
5512: LD_INT 4
5514: PPUSH
5515: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5519: LD_VAR 0 3
5523: PPUSH
5524: LD_INT 229
5526: PPUSH
5527: LD_INT 44
5529: PPUSH
5530: LD_INT 0
5532: PPUSH
5533: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5537: CALL_OW 44
5541: PPUSH
5542: LD_VAR 0 3
5546: PPUSH
5547: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5551: LD_ADDR_EXP 56
5555: PUSH
5556: LD_EXP 56
5560: PUSH
5561: LD_VAR 0 3
5565: ADD
5566: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5567: LD_VAR 0 3
5571: PPUSH
5572: LD_INT 191
5574: PPUSH
5575: LD_INT 32
5577: PPUSH
5578: CALL_OW 111
// Wait ( 0 0$02 ) ;
5582: LD_INT 70
5584: PPUSH
5585: CALL_OW 67
// end ;
5589: GO 5441
5591: POP
5592: POP
// end ;
5593: LD_VAR 0 1
5597: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5598: LD_EXP 31
5602: PUSH
5603: LD_EXP 56
5607: AND
5608: IFFALSE 5782
5610: GO 5612
5612: DISABLE
5613: LD_INT 0
5615: PPUSH
5616: PPUSH
5617: PPUSH
// begin wait ( 0 0$50 ) ;
5618: LD_INT 1750
5620: PPUSH
5621: CALL_OW 67
// tmp := ru_vehicles ;
5625: LD_ADDR_VAR 0 3
5629: PUSH
5630: LD_EXP 56
5634: ST_TO_ADDR
// if not tmp then
5635: LD_VAR 0 3
5639: NOT
5640: IFFALSE 5644
// exit ;
5642: GO 5782
// repeat wait ( 0 0$1 ) ;
5644: LD_INT 35
5646: PPUSH
5647: CALL_OW 67
// for i in tmp do
5651: LD_ADDR_VAR 0 1
5655: PUSH
5656: LD_VAR 0 3
5660: PUSH
5661: FOR_IN
5662: IFFALSE 5773
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5664: LD_ADDR_VAR 0 2
5668: PUSH
5669: LD_INT 22
5671: PUSH
5672: LD_INT 1
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: LD_VAR 0 1
5683: PPUSH
5684: CALL_OW 74
5688: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5689: LD_VAR 0 1
5693: PPUSH
5694: LD_VAR 0 2
5698: PPUSH
5699: CALL_OW 296
5703: PUSH
5704: LD_INT 10
5706: GREATER
5707: IFFALSE 5726
// ComAgressiveMove ( i , 69 , 101 ) else
5709: LD_VAR 0 1
5713: PPUSH
5714: LD_INT 69
5716: PPUSH
5717: LD_INT 101
5719: PPUSH
5720: CALL_OW 114
5724: GO 5740
// ComAttackUnit ( i , enemy ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: CALL_OW 115
// if GetLives ( i ) < 250 then
5740: LD_VAR 0 1
5744: PPUSH
5745: CALL_OW 256
5749: PUSH
5750: LD_INT 250
5752: LESS
5753: IFFALSE 5771
// tmp := tmp diff i ;
5755: LD_ADDR_VAR 0 3
5759: PUSH
5760: LD_VAR 0 3
5764: PUSH
5765: LD_VAR 0 1
5769: DIFF
5770: ST_TO_ADDR
// end ;
5771: GO 5661
5773: POP
5774: POP
// until not tmp ;
5775: LD_VAR 0 3
5779: NOT
5780: IFFALSE 5644
// end ; end_of_file
5782: PPOPN 3
5784: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
// InGameOn ;
5794: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5798: LD_EXP 37
5802: PPUSH
5803: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5807: LD_EXP 37
5811: PPUSH
5812: LD_EXP 44
5816: PPUSH
5817: CALL_OW 119
// if Bierezov then
5821: LD_EXP 45
5825: IFFALSE 5841
// ComTurnUnit ( Bierezov , Cornel ) ;
5827: LD_EXP 45
5831: PPUSH
5832: LD_EXP 44
5836: PPUSH
5837: CALL_OW 119
// for i in jmm_units do
5841: LD_ADDR_VAR 0 2
5845: PUSH
5846: LD_EXP 4
5850: PUSH
5851: FOR_IN
5852: IFFALSE 5870
// ComTurnUnit ( i , Cornel ) ;
5854: LD_VAR 0 2
5858: PPUSH
5859: LD_EXP 44
5863: PPUSH
5864: CALL_OW 119
5868: GO 5851
5870: POP
5871: POP
// units := cornel_units union Cornel ;
5872: LD_ADDR_VAR 0 3
5876: PUSH
5877: LD_EXP 6
5881: PUSH
5882: LD_EXP 44
5886: UNION
5887: ST_TO_ADDR
// repeat wait ( 1 ) ;
5888: LD_INT 1
5890: PPUSH
5891: CALL_OW 67
// for i in units do
5895: LD_ADDR_VAR 0 2
5899: PUSH
5900: LD_VAR 0 3
5904: PUSH
5905: FOR_IN
5906: IFFALSE 5939
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5908: LD_VAR 0 2
5912: PPUSH
5913: LD_EXP 37
5917: PPUSH
5918: CALL_OW 250
5922: PPUSH
5923: LD_EXP 37
5927: PPUSH
5928: CALL_OW 251
5932: PPUSH
5933: CALL_OW 111
5937: GO 5905
5939: POP
5940: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5941: LD_VAR 0 3
5945: PPUSH
5946: LD_INT 92
5948: PUSH
5949: LD_EXP 37
5953: PPUSH
5954: CALL_OW 250
5958: PUSH
5959: LD_EXP 37
5963: PPUSH
5964: CALL_OW 251
5968: PUSH
5969: LD_INT 10
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PPUSH
5978: CALL_OW 72
5982: PUSH
5983: LD_VAR 0 3
5987: EQUAL
5988: IFFALSE 5888
// for i in units do
5990: LD_ADDR_VAR 0 2
5994: PUSH
5995: LD_VAR 0 3
5999: PUSH
6000: FOR_IN
6001: IFFALSE 6019
// ComTurnUnit ( i , JMM ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_EXP 37
6012: PPUSH
6013: CALL_OW 119
6017: GO 6000
6019: POP
6020: POP
// ComTurnUnit ( Cornel , JMM ) ;
6021: LD_EXP 44
6025: PPUSH
6026: LD_EXP 37
6030: PPUSH
6031: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
6035: LD_EXP 37
6039: PPUSH
6040: LD_STRING D1-JMM-1
6042: PPUSH
6043: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
6047: LD_EXP 44
6051: PPUSH
6052: LD_STRING D1-Corn-1
6054: PPUSH
6055: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
6059: LD_EXP 37
6063: PPUSH
6064: LD_EXP 44
6068: PPUSH
6069: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
6073: LD_EXP 44
6077: PPUSH
6078: LD_EXP 37
6082: PPUSH
6083: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
6087: LD_INT 35
6089: PPUSH
6090: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
6094: LD_EXP 37
6098: PPUSH
6099: LD_EXP 44
6103: PPUSH
6104: CALL_OW 296
6108: PUSH
6109: LD_INT 6
6111: LESS
6112: IFFALSE 6087
// ChangeSideFog ( 4 , 1 ) ;
6114: LD_INT 4
6116: PPUSH
6117: LD_INT 1
6119: PPUSH
6120: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
6124: LD_EXP 37
6128: PPUSH
6129: LD_EXP 44
6133: PPUSH
6134: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6138: LD_EXP 44
6142: PPUSH
6143: LD_EXP 37
6147: PPUSH
6148: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
6152: LD_EXP 37
6156: PPUSH
6157: LD_STRING D1-JMM-2
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
6164: LD_EXP 37
6168: PPUSH
6169: LD_STRING D1-JMM-2a
6171: PPUSH
6172: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
6176: LD_EXP 44
6180: PPUSH
6181: LD_STRING D1-Corn-2
6183: PPUSH
6184: CALL_OW 88
// if bierezov_exist or debug then
6188: LD_EXP 7
6192: PUSH
6193: LD_EXP 1
6197: OR
6198: IFFALSE 6439
// begin ComTurnUnit ( Cornel , Bierezov ) ;
6200: LD_EXP 44
6204: PPUSH
6205: LD_EXP 45
6209: PPUSH
6210: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
6214: LD_INT 10
6216: PPUSH
6217: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
6221: LD_EXP 44
6225: PPUSH
6226: LD_STRING D1a-Corn-1
6228: PPUSH
6229: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
6233: LD_EXP 37
6237: PPUSH
6238: LD_EXP 45
6242: PPUSH
6243: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
6247: LD_EXP 45
6251: PPUSH
6252: LD_EXP 37
6256: PPUSH
6257: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
6261: LD_EXP 37
6265: PPUSH
6266: LD_STRING D1a-JMM-1
6268: PPUSH
6269: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
6273: LD_EXP 37
6277: PPUSH
6278: LD_EXP 44
6282: PPUSH
6283: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6287: LD_EXP 44
6291: PPUSH
6292: LD_EXP 37
6296: PPUSH
6297: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
6301: LD_EXP 44
6305: PPUSH
6306: LD_STRING D1a-Corn-2
6308: PPUSH
6309: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
6313: LD_EXP 37
6317: PPUSH
6318: LD_STRING D1a-JMM-2
6320: PPUSH
6321: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
6325: LD_EXP 44
6329: PPUSH
6330: LD_STRING D1a-Corn-3
6332: PPUSH
6333: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
6337: LD_EXP 37
6341: PPUSH
6342: LD_STRING D1a-JMM-3
6344: PPUSH
6345: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
6349: LD_EXP 44
6353: PPUSH
6354: LD_STRING D1a-Corn-4
6356: PPUSH
6357: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
6361: LD_EXP 37
6365: PPUSH
6366: LD_STRING D1a-JMM-4
6368: PPUSH
6369: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
6373: LD_EXP 44
6377: PPUSH
6378: LD_STRING D1a-Corn-5
6380: PPUSH
6381: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
6385: LD_EXP 45
6389: PPUSH
6390: LD_EXP 44
6394: PPUSH
6395: CALL_OW 250
6399: PPUSH
6400: LD_EXP 44
6404: PPUSH
6405: CALL_OW 251
6409: PUSH
6410: LD_INT 2
6412: MINUS
6413: PPUSH
6414: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
6418: LD_EXP 45
6422: PPUSH
6423: LD_EXP 44
6427: PPUSH
6428: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
6432: LD_INT 10
6434: PPUSH
6435: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
6439: LD_EXP 37
6443: PPUSH
6444: LD_STRING D1b-JMM-1
6446: PPUSH
6447: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
6451: LD_EXP 44
6455: PPUSH
6456: LD_STRING D1b-Corn-1
6458: PPUSH
6459: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6463: LD_EXP 37
6467: PPUSH
6468: LD_STRING D1b-JMM-2
6470: PPUSH
6471: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6475: LD_EXP 44
6479: PPUSH
6480: LD_STRING D1b-Corn-2
6482: PPUSH
6483: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6487: LD_EXP 37
6491: PPUSH
6492: LD_STRING D1b-JMM-3
6494: PPUSH
6495: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6499: LD_INT 10
6501: PPUSH
6502: CALL_OW 67
// SayRadioNoFace ( Powell , D1b-Pow-3 ) ;
6506: LD_EXP 46
6510: PPUSH
6511: LD_STRING D1b-Pow-3
6513: PPUSH
6514: CALL_OW 586
// Say ( JMM , D1b-JMM-4 ) ;
6518: LD_EXP 37
6522: PPUSH
6523: LD_STRING D1b-JMM-4
6525: PPUSH
6526: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6530: LD_EXP 44
6534: PPUSH
6535: LD_STRING D1b-Corn-4
6537: PPUSH
6538: CALL_OW 88
// if Khatam then
6542: LD_EXP 41
6546: IFFALSE 6562
// Say ( Khatam , D1b-Khat-4 ) else
6548: LD_EXP 41
6552: PPUSH
6553: LD_STRING D1b-Khat-4
6555: PPUSH
6556: CALL_OW 88
6560: GO 6598
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6562: LD_EXP 6
6566: PPUSH
6567: LD_INT 26
6569: PUSH
6570: LD_INT 1
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PPUSH
6577: CALL_OW 72
6581: PUSH
6582: LD_EXP 44
6586: PUSH
6587: EMPTY
6588: LIST
6589: DIFF
6590: PPUSH
6591: LD_STRING D1b-Sol1-4
6593: PPUSH
6594: CALL 585 0 2
// if Cyrus then
6598: LD_EXP 39
6602: IFFALSE 6616
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6604: LD_EXP 39
6608: PPUSH
6609: LD_STRING D1b-Cyrus-4
6611: PPUSH
6612: CALL_OW 88
// if Lisa then
6616: LD_EXP 40
6620: IFFALSE 6678
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6622: LD_EXP 40
6626: PPUSH
6627: LD_STRING D1b-Lisa-4
6629: PPUSH
6630: CALL_OW 88
// if Cyrus then
6634: LD_EXP 39
6638: IFFALSE 6678
// begin if not IsInUnit ( Cyrus ) then
6640: LD_EXP 39
6644: PPUSH
6645: CALL_OW 310
6649: NOT
6650: IFFALSE 6666
// ComTurnUnit ( Cyrus , Lisa ) ;
6652: LD_EXP 39
6656: PPUSH
6657: LD_EXP 40
6661: PPUSH
6662: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6666: LD_EXP 39
6670: PPUSH
6671: LD_STRING D1b-Cyrus-5
6673: PPUSH
6674: CALL_OW 88
// end ; end ; SelectGroup ;
6678: CALL 3052 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6682: LD_EXP 37
6686: PPUSH
6687: LD_STRING D1d-JMM-1
6689: PPUSH
6690: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6694: LD_EXP 44
6698: PPUSH
6699: LD_STRING D1d-Corn-1
6701: PPUSH
6702: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6706: LD_ADDR_VAR 0 2
6710: PUSH
6711: LD_EXP 4
6715: PUSH
6716: LD_EXP 6
6720: ADD
6721: PUSH
6722: LD_EXP 37
6726: ADD
6727: PUSH
6728: FOR_IN
6729: IFFALSE 6742
// ComHold ( i ) ;
6731: LD_VAR 0 2
6735: PPUSH
6736: CALL_OW 140
6740: GO 6728
6742: POP
6743: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6744: LD_ADDR_VAR 0 4
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 1
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 21
6761: PUSH
6762: LD_INT 2
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PPUSH
6773: CALL_OW 69
6777: ST_TO_ADDR
// if vehicles then
6778: LD_VAR 0 4
6782: IFFALSE 7120
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6784: LD_EXP 6
6788: PPUSH
6789: LD_INT 55
6791: PUSH
6792: EMPTY
6793: LIST
6794: PPUSH
6795: CALL_OW 72
6799: IFFALSE 6838
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6801: LD_ADDR_VAR 0 2
6805: PUSH
6806: LD_EXP 6
6810: PPUSH
6811: LD_INT 55
6813: PUSH
6814: EMPTY
6815: LIST
6816: PPUSH
6817: CALL_OW 72
6821: PUSH
6822: FOR_IN
6823: IFFALSE 6836
// ComExitVehicle ( i ) ;
6825: LD_VAR 0 2
6829: PPUSH
6830: CALL_OW 121
6834: GO 6822
6836: POP
6837: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6838: LD_ADDR_VAR 0 5
6842: PUSH
6843: LD_VAR 0 4
6847: PPUSH
6848: LD_INT 34
6850: PUSH
6851: LD_INT 51
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 72
6862: ST_TO_ADDR
// if cargos then
6863: LD_VAR 0 5
6867: IFFALSE 7050
// begin vehicles := cargos ;
6869: LD_ADDR_VAR 0 4
6873: PUSH
6874: LD_VAR 0 5
6878: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6879: LD_ADDR_VAR 0 6
6883: PUSH
6884: LD_STRING 02_resources_4
6886: PPUSH
6887: LD_INT 0
6889: PPUSH
6890: CALL_OW 30
6894: ST_TO_ADDR
// if debug and not resources then
6895: LD_EXP 1
6899: PUSH
6900: LD_VAR 0 6
6904: NOT
6905: AND
6906: IFFALSE 6916
// resources := 160 ;
6908: LD_ADDR_VAR 0 6
6912: PUSH
6913: LD_INT 160
6915: ST_TO_ADDR
// if resources mod 10 then
6916: LD_VAR 0 6
6920: PUSH
6921: LD_INT 10
6923: MOD
6924: IFFALSE 6946
// resources := resources - resources mod 10 ;
6926: LD_ADDR_VAR 0 6
6930: PUSH
6931: LD_VAR 0 6
6935: PUSH
6936: LD_VAR 0 6
6940: PUSH
6941: LD_INT 10
6943: MOD
6944: MINUS
6945: ST_TO_ADDR
// if resources then
6946: LD_VAR 0 6
6950: IFFALSE 7050
// for i in cargos do
6952: LD_ADDR_VAR 0 2
6956: PUSH
6957: LD_VAR 0 5
6961: PUSH
6962: FOR_IN
6963: IFFALSE 7048
// begin if resources < 100 then
6965: LD_VAR 0 6
6969: PUSH
6970: LD_INT 100
6972: LESS
6973: IFFALSE 6995
// begin cargo := resources ;
6975: LD_ADDR_VAR 0 7
6979: PUSH
6980: LD_VAR 0 6
6984: ST_TO_ADDR
// resources := 0 ;
6985: LD_ADDR_VAR 0 6
6989: PUSH
6990: LD_INT 0
6992: ST_TO_ADDR
// end else
6993: GO 7017
// begin cargo := 100 ;
6995: LD_ADDR_VAR 0 7
6999: PUSH
7000: LD_INT 100
7002: ST_TO_ADDR
// resources := resources - 100 ;
7003: LD_ADDR_VAR 0 6
7007: PUSH
7008: LD_VAR 0 6
7012: PUSH
7013: LD_INT 100
7015: MINUS
7016: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
7017: LD_VAR 0 2
7021: PPUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_VAR 0 7
7029: PPUSH
7030: CALL_OW 290
// if resources = 0 then
7034: LD_VAR 0 6
7038: PUSH
7039: LD_INT 0
7041: EQUAL
7042: IFFALSE 7046
// break ;
7044: GO 7048
// end ;
7046: GO 6962
7048: POP
7049: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
7050: LD_VAR 0 4
7054: PUSH
7055: LD_INT 1
7057: ARRAY
7058: PPUSH
7059: CALL_OW 311
7063: PPUSH
7064: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
7068: LD_VAR 0 4
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: LD_INT 4
7079: PPUSH
7080: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
7084: LD_EXP 44
7088: PPUSH
7089: LD_VAR 0 4
7093: PUSH
7094: LD_INT 1
7096: ARRAY
7097: PPUSH
7098: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
7102: LD_INT 35
7104: PPUSH
7105: CALL_OW 67
// until IsInUnit ( Cornel ) ;
7109: LD_EXP 44
7113: PPUSH
7114: CALL_OW 310
7118: IFFALSE 7102
// end ; InGameOff ;
7120: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
7124: LD_STRING M1
7126: PPUSH
7127: CALL_OW 337
// SaveForQuickRestart ;
7131: CALL_OW 22
// cornel_active := true ;
7135: LD_ADDR_EXP 8
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// end ;
7143: LD_VAR 0 1
7147: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
7148: LD_EXP 37
7152: PPUSH
7153: LD_EXP 47
7157: PPUSH
7158: CALL_OW 296
7162: PUSH
7163: LD_INT 10
7165: LESS
7166: IFFALSE 8549
7168: GO 7170
7170: DISABLE
7171: LD_INT 0
7173: PPUSH
7174: PPUSH
7175: PPUSH
7176: PPUSH
7177: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
7178: LD_ADDR_VAR 0 2
7182: PUSH
7183: LD_INT 89
7185: PUSH
7186: LD_INT 34
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 138
7195: PUSH
7196: LD_INT 63
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 196
7205: PUSH
7206: LD_INT 84
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 135
7215: PUSH
7216: LD_INT 52
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 103
7225: PUSH
7226: LD_INT 39
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: LD_INT 58
7235: PUSH
7236: LD_INT 30
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 38
7245: PUSH
7246: LD_INT 51
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: ST_TO_ADDR
// Video ( true ) ;
7262: LD_INT 1
7264: PPUSH
7265: CALL 76677 0 1
// if jmm_units then
7269: LD_EXP 4
7273: IFFALSE 7349
// for i in jmm_units do
7275: LD_ADDR_VAR 0 1
7279: PUSH
7280: LD_EXP 4
7284: PUSH
7285: FOR_IN
7286: IFFALSE 7347
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_EXP 37
7297: PPUSH
7298: CALL_OW 296
7302: PUSH
7303: LD_INT 10
7305: LESS
7306: PUSH
7307: LD_VAR 0 1
7311: PPUSH
7312: CALL_OW 310
7316: NOT
7317: AND
7318: IFFALSE 7336
// ComTurnUnit ( i , JMM ) else
7320: LD_VAR 0 1
7324: PPUSH
7325: LD_EXP 37
7329: PPUSH
7330: CALL_OW 119
7334: GO 7345
// ComHold ( i ) ;
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 140
// end ;
7345: GO 7285
7347: POP
7348: POP
// if IsInUnit ( JMM ) then
7349: LD_EXP 37
7353: PPUSH
7354: CALL_OW 310
7358: IFFALSE 7383
// begin ComExitVehicle ( JMM ) ;
7360: LD_EXP 37
7364: PPUSH
7365: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
7369: LD_EXP 37
7373: PPUSH
7374: LD_EXP 47
7378: PPUSH
7379: CALL_OW 172
// end ; Wait ( 10 ) ;
7383: LD_INT 10
7385: PPUSH
7386: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
7390: LD_EXP 37
7394: PPUSH
7395: LD_EXP 47
7399: PPUSH
7400: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
7404: LD_INT 35
7406: PPUSH
7407: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
7411: LD_EXP 37
7415: PPUSH
7416: LD_EXP 47
7420: PPUSH
7421: CALL_OW 296
7425: PUSH
7426: LD_INT 6
7428: LESS
7429: IFFALSE 7404
// ComTurnUnit ( JMM , Lynch ) ;
7431: LD_EXP 37
7435: PPUSH
7436: LD_EXP 47
7440: PPUSH
7441: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
7445: LD_ADDR_VAR 0 1
7449: PUSH
7450: LD_EXP 47
7454: PUSH
7455: LD_EXP 48
7459: PUSH
7460: LD_EXP 49
7464: PUSH
7465: LD_EXP 50
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: PUSH
7476: FOR_IN
7477: IFFALSE 7495
// ComTurnUnit ( i , JMM ) ;
7479: LD_VAR 0 1
7483: PPUSH
7484: LD_EXP 37
7488: PPUSH
7489: CALL_OW 119
7493: GO 7476
7495: POP
7496: POP
// Wait ( 0 0$0.3 ) ;
7497: LD_INT 10
7499: PPUSH
7500: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7504: LD_EXP 37
7508: PPUSH
7509: LD_STRING D2-JMM-1
7511: PPUSH
7512: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7516: LD_EXP 47
7520: PPUSH
7521: LD_STRING D2-Sol1-1
7523: PPUSH
7524: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7528: LD_EXP 37
7532: PPUSH
7533: LD_STRING D2-JMM-2
7535: PPUSH
7536: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7540: LD_EXP 47
7544: PPUSH
7545: LD_STRING D2-Sol1-2
7547: PPUSH
7548: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7552: LD_EXP 37
7556: PPUSH
7557: LD_STRING D2-JMM-3
7559: PPUSH
7560: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7564: LD_EXP 47
7568: PPUSH
7569: LD_STRING D2-Sol1-3
7571: PPUSH
7572: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_INT 22
7583: PUSH
7584: LD_INT 8
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PPUSH
7591: CALL_OW 69
7595: PUSH
7596: FOR_IN
7597: IFFALSE 7613
// SetSide ( i , 1 ) ;
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_INT 1
7606: PPUSH
7607: CALL_OW 235
7611: GO 7596
7613: POP
7614: POP
// Say ( JMM , D2-JMM-4 ) ;
7615: LD_EXP 37
7619: PPUSH
7620: LD_STRING D2-JMM-4
7622: PPUSH
7623: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7627: LD_INT 1
7629: PPUSH
7630: LD_INT 5
7632: PPUSH
7633: CALL_OW 332
// for i = 1 to points do
7637: LD_ADDR_VAR 0 1
7641: PUSH
7642: DOUBLE
7643: LD_INT 1
7645: DEC
7646: ST_TO_ADDR
7647: LD_VAR 0 2
7651: PUSH
7652: FOR_TO
7653: IFFALSE 7828
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7655: LD_VAR 0 2
7659: PUSH
7660: LD_VAR 0 1
7664: ARRAY
7665: PUSH
7666: LD_INT 1
7668: ARRAY
7669: PPUSH
7670: LD_VAR 0 2
7674: PUSH
7675: LD_VAR 0 1
7679: ARRAY
7680: PUSH
7681: LD_INT 2
7683: ARRAY
7684: PPUSH
7685: CALL_OW 84
// if i = 1 then
7689: LD_VAR 0 1
7693: PUSH
7694: LD_INT 1
7696: EQUAL
7697: IFFALSE 7711
// Say ( Lynch , D2-Sol1-4 ) ;
7699: LD_EXP 47
7703: PPUSH
7704: LD_STRING D2-Sol1-4
7706: PPUSH
7707: CALL_OW 88
// if i = 2 then
7711: LD_VAR 0 1
7715: PUSH
7716: LD_INT 2
7718: EQUAL
7719: IFFALSE 7733
// Say ( JMM , D2-JMM-5 ) ;
7721: LD_EXP 37
7725: PPUSH
7726: LD_STRING D2-JMM-5
7728: PPUSH
7729: CALL_OW 88
// if i = 4 then
7733: LD_VAR 0 1
7737: PUSH
7738: LD_INT 4
7740: EQUAL
7741: IFFALSE 7765
// begin RevealFogArea ( 1 , troopsArea ) ;
7743: LD_INT 1
7745: PPUSH
7746: LD_INT 6
7748: PPUSH
7749: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7753: LD_EXP 47
7757: PPUSH
7758: LD_STRING D2-Sol1-5
7760: PPUSH
7761: CALL_OW 88
// end ; if i = 5 then
7765: LD_VAR 0 1
7769: PUSH
7770: LD_INT 5
7772: EQUAL
7773: IFFALSE 7787
// Say ( JMM , D2-JMM-6 ) ;
7775: LD_EXP 37
7779: PPUSH
7780: LD_STRING D2-JMM-6
7782: PPUSH
7783: CALL_OW 88
// if i = 7 then
7787: LD_VAR 0 1
7791: PUSH
7792: LD_INT 7
7794: EQUAL
7795: IFFALSE 7819
// begin RevealFogArea ( 1 , forestArea ) ;
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 7
7802: PPUSH
7803: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7807: LD_EXP 47
7811: PPUSH
7812: LD_STRING D2-Sol1-6
7814: PPUSH
7815: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7819: LD_INT 46
7821: PPUSH
7822: CALL_OW 67
// end ;
7826: GO 7652
7828: POP
7829: POP
// CenterNowOnUnits ( JMM ) ;
7830: LD_EXP 37
7834: PPUSH
7835: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7839: LD_EXP 37
7843: PPUSH
7844: LD_STRING D2-JMM-7
7846: PPUSH
7847: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7851: LD_EXP 47
7855: PPUSH
7856: LD_STRING D2-Sol1-7
7858: PPUSH
7859: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7863: LD_EXP 37
7867: PPUSH
7868: LD_STRING D2-JMM-8
7870: PPUSH
7871: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7875: LD_ADDR_VAR 0 4
7879: PUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 30
7892: PUSH
7893: LD_INT 31
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 69
7908: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7909: LD_EXP 47
7913: PPUSH
7914: LD_VAR 0 4
7918: PUSH
7919: LD_INT 1
7921: ARRAY
7922: PPUSH
7923: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7927: LD_INT 65
7929: PPUSH
7930: LD_INT 101
7932: PPUSH
7933: CALL_OW 428
7937: IFFALSE 7960
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7939: LD_INT 65
7941: PPUSH
7942: LD_INT 101
7944: PPUSH
7945: CALL_OW 428
7949: PPUSH
7950: LD_INT 75
7952: PPUSH
7953: LD_INT 100
7955: PPUSH
7956: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7960: LD_INT 66
7962: PPUSH
7963: LD_INT 103
7965: PPUSH
7966: CALL_OW 428
7970: IFFALSE 7993
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7972: LD_INT 66
7974: PPUSH
7975: LD_INT 103
7977: PPUSH
7978: CALL_OW 428
7982: PPUSH
7983: LD_INT 75
7985: PPUSH
7986: LD_INT 100
7988: PPUSH
7989: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7993: LD_ADDR_VAR 0 5
7997: PUSH
7998: LD_INT 22
8000: PUSH
8001: LD_INT 1
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 21
8010: PUSH
8011: LD_INT 2
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: LD_INT 91
8020: PUSH
8021: LD_EXP 37
8025: PUSH
8026: LD_INT 7
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: PPUSH
8039: CALL_OW 69
8043: ST_TO_ADDR
// if tmp then
8044: LD_VAR 0 5
8048: IFFALSE 8065
// ComMoveXY ( tmp , 75 , 100 ) ;
8050: LD_VAR 0 5
8054: PPUSH
8055: LD_INT 75
8057: PPUSH
8058: LD_INT 100
8060: PPUSH
8061: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: LD_EXP 4
8074: PPUSH
8075: LD_INT 25
8077: PUSH
8078: LD_INT 1
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PPUSH
8085: CALL_OW 72
8089: PPUSH
8090: LD_EXP 37
8094: PPUSH
8095: CALL_OW 74
8099: ST_TO_ADDR
// if sol then
8100: LD_VAR 0 3
8104: IFFALSE 8164
// if GetDistUnits ( JMM , sol ) < 10 then
8106: LD_EXP 37
8110: PPUSH
8111: LD_VAR 0 3
8115: PPUSH
8116: CALL_OW 296
8120: PUSH
8121: LD_INT 10
8123: LESS
8124: IFFALSE 8164
// begin if IsInUnit ( sol ) then
8126: LD_VAR 0 3
8130: PPUSH
8131: CALL_OW 310
8135: IFFALSE 8146
// ComExitVehicle ( sol ) ;
8137: LD_VAR 0 3
8141: PPUSH
8142: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
8146: LD_VAR 0 3
8150: PPUSH
8151: LD_VAR 0 4
8155: PUSH
8156: LD_INT 2
8158: ARRAY
8159: PPUSH
8160: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
8164: LD_INT 10
8166: PPUSH
8167: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
8171: LD_EXP 37
8175: PPUSH
8176: LD_INT 65
8178: PPUSH
8179: LD_INT 101
8181: PPUSH
8182: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
8186: LD_EXP 37
8190: PPUSH
8191: LD_INT 63
8193: PPUSH
8194: LD_INT 100
8196: PPUSH
8197: CALL_OW 178
// tmp := 0 0$0 ;
8201: LD_ADDR_VAR 0 5
8205: PUSH
8206: LD_INT 0
8208: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8209: LD_INT 35
8211: PPUSH
8212: CALL_OW 67
// tmp := tmp + 0 0$1 ;
8216: LD_ADDR_VAR 0 5
8220: PUSH
8221: LD_VAR 0 5
8225: PUSH
8226: LD_INT 35
8228: PLUS
8229: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
8230: LD_EXP 37
8234: PPUSH
8235: LD_INT 65
8237: PPUSH
8238: LD_INT 101
8240: PPUSH
8241: CALL_OW 307
8245: PUSH
8246: LD_VAR 0 5
8250: PUSH
8251: LD_INT 175
8253: GREATER
8254: OR
8255: IFFALSE 8209
// Say ( JMM , D2a-JMM-1 ) ;
8257: LD_EXP 37
8261: PPUSH
8262: LD_STRING D2a-JMM-1
8264: PPUSH
8265: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
8269: LD_EXP 48
8273: PPUSH
8274: LD_INT 66
8276: PPUSH
8277: LD_INT 103
8279: PPUSH
8280: CALL_OW 111
// tmp := 0 0$0 ;
8284: LD_ADDR_VAR 0 5
8288: PUSH
8289: LD_INT 0
8291: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8292: LD_INT 35
8294: PPUSH
8295: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
8299: LD_EXP 48
8303: PPUSH
8304: LD_INT 66
8306: PPUSH
8307: LD_INT 103
8309: PPUSH
8310: CALL_OW 307
8314: PUSH
8315: LD_VAR 0 5
8319: PUSH
8320: LD_INT 175
8322: GREATER
8323: OR
8324: IFFALSE 8292
// ComTurnUnit ( Walker , JMM ) ;
8326: LD_EXP 48
8330: PPUSH
8331: LD_EXP 37
8335: PPUSH
8336: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
8340: LD_EXP 48
8344: PPUSH
8345: LD_STRING D2a-Sci1-1
8347: PPUSH
8348: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
8352: LD_EXP 37
8356: PPUSH
8357: LD_EXP 48
8361: PPUSH
8362: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
8366: LD_EXP 37
8370: PPUSH
8371: LD_STRING D2a-JMM-2
8373: PPUSH
8374: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
8378: LD_EXP 48
8382: PPUSH
8383: LD_STRING D2a-Sci1-2
8385: PPUSH
8386: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
8390: LD_EXP 37
8394: PPUSH
8395: LD_STRING D2a-JMM-3
8397: PPUSH
8398: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
8402: LD_EXP 48
8406: PPUSH
8407: LD_STRING D2a-Sci1-3
8409: PPUSH
8410: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
8414: LD_ADDR_EXP 4
8418: PUSH
8419: LD_EXP 4
8423: PUSH
8424: LD_EXP 47
8428: PUSH
8429: LD_EXP 48
8433: PUSH
8434: LD_EXP 49
8438: PUSH
8439: LD_EXP 50
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: ADD
8450: ST_TO_ADDR
// for i in jmm_units do
8451: LD_ADDR_VAR 0 1
8455: PUSH
8456: LD_EXP 4
8460: PUSH
8461: FOR_IN
8462: IFFALSE 8487
// if not IsInUnit ( i ) then
8464: LD_VAR 0 1
8468: PPUSH
8469: CALL_OW 310
8473: NOT
8474: IFFALSE 8485
// ComFree ( i ) ;
8476: LD_VAR 0 1
8480: PPUSH
8481: CALL_OW 139
8485: GO 8461
8487: POP
8488: POP
// Video ( false ) ;
8489: LD_INT 0
8491: PPUSH
8492: CALL 76677 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8496: LD_STRING MSolar1
8498: PPUSH
8499: CALL_OW 337
// jmm_on_west := true ;
8503: LD_ADDR_EXP 5
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8511: LD_INT 1050
8513: PPUSH
8514: CALL_OW 67
// frank_can_return := true ;
8518: LD_ADDR_EXP 12
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8526: LD_INT 6300
8528: PPUSH
8529: LD_INT 8400
8531: PPUSH
8532: CALL_OW 12
8536: PPUSH
8537: CALL_OW 67
// send_spec_patrol := true ;
8541: LD_ADDR_EXP 30
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// end ;
8549: PPOPN 5
8551: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8552: LD_INT 22
8554: PUSH
8555: LD_INT 1
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 34
8564: PUSH
8565: LD_INT 51
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 92
8574: PUSH
8575: LD_INT 63
8577: PUSH
8578: LD_INT 100
8580: PUSH
8581: LD_INT 5
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: PPUSH
8598: CALL_OW 69
8602: PUSH
8603: LD_EXP 5
8607: NOT
8608: AND
8609: IFFALSE 8722
8611: GO 8613
8613: DISABLE
8614: LD_INT 0
8616: PPUSH
8617: PPUSH
// begin enable ;
8618: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8619: LD_ADDR_VAR 0 2
8623: PUSH
8624: LD_INT 22
8626: PUSH
8627: LD_INT 1
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 34
8636: PUSH
8637: LD_INT 51
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 92
8646: PUSH
8647: LD_INT 63
8649: PUSH
8650: LD_INT 100
8652: PUSH
8653: LD_INT 5
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: LIST
8666: PUSH
8667: EMPTY
8668: LIST
8669: PPUSH
8670: CALL_OW 69
8674: ST_TO_ADDR
// if not filter then
8675: LD_VAR 0 2
8679: NOT
8680: IFFALSE 8684
// exit ;
8682: GO 8722
// for i in filter do
8684: LD_ADDR_VAR 0 1
8688: PUSH
8689: LD_VAR 0 2
8693: PUSH
8694: FOR_IN
8695: IFFALSE 8720
// begin SetFuel ( i , 0 ) ;
8697: LD_VAR 0 1
8701: PPUSH
8702: LD_INT 0
8704: PPUSH
8705: CALL_OW 240
// ComStop ( i ) ;
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 141
// end ;
8718: GO 8694
8720: POP
8721: POP
// end ;
8722: PPOPN 2
8724: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8725: LD_EXP 30
8729: IFFALSE 9784
8731: GO 8733
8733: DISABLE
8734: LD_INT 0
8736: PPUSH
8737: PPUSH
8738: PPUSH
8739: PPUSH
8740: PPUSH
8741: PPUSH
8742: PPUSH
// begin if not ru_spec_patrol then
8743: LD_EXP 54
8747: NOT
8748: IFFALSE 8752
// exit ;
8750: GO 9784
// dead1 := false ;
8752: LD_ADDR_VAR 0 1
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// dead2 := false ;
8760: LD_ADDR_VAR 0 2
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// inarea1 := false ;
8768: LD_ADDR_VAR 0 3
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// inarea2 := false ;
8776: LD_ADDR_VAR 0 4
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// tmp := [ ] ;
8784: LD_ADDR_VAR 0 6
8788: PUSH
8789: EMPTY
8790: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8791: LD_EXP 54
8795: PPUSH
8796: LD_INT 75
8798: PPUSH
8799: LD_INT 101
8801: PPUSH
8802: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8806: LD_INT 35
8808: PPUSH
8809: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8813: LD_INT 1
8815: PPUSH
8816: LD_EXP 54
8820: PUSH
8821: LD_INT 1
8823: ARRAY
8824: PPUSH
8825: CALL_OW 292
8829: PUSH
8830: LD_EXP 54
8834: PPUSH
8835: LD_INT 92
8837: PUSH
8838: LD_INT 75
8840: PUSH
8841: LD_INT 101
8843: PUSH
8844: LD_INT 4
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 72
8857: OR
8858: IFFALSE 8806
// ComStop ( ru_spec_patrol ) ;
8860: LD_EXP 54
8864: PPUSH
8865: CALL_OW 141
// Wait ( 0 0$02 ) ;
8869: LD_INT 70
8871: PPUSH
8872: CALL_OW 67
// DialogueOn ;
8876: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8880: LD_EXP 54
8884: PUSH
8885: LD_INT 1
8887: ARRAY
8888: PPUSH
8889: LD_STRING D8-Rus1-1
8891: PPUSH
8892: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8896: LD_EXP 37
8900: PPUSH
8901: LD_STRING D8-JMM-1
8903: PPUSH
8904: CALL_OW 88
// DialogueOff ;
8908: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8912: LD_EXP 54
8916: PPUSH
8917: LD_INT 13
8919: PPUSH
8920: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8924: LD_INT 35
8926: PPUSH
8927: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8931: LD_VAR 0 1
8935: NOT
8936: PUSH
8937: LD_EXP 54
8941: PUSH
8942: LD_INT 1
8944: ARRAY
8945: PPUSH
8946: CALL_OW 301
8950: AND
8951: IFFALSE 8961
// dead1 := true ;
8953: LD_ADDR_VAR 0 1
8957: PUSH
8958: LD_INT 1
8960: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8961: LD_VAR 0 2
8965: NOT
8966: PUSH
8967: LD_EXP 54
8971: PUSH
8972: LD_INT 2
8974: ARRAY
8975: PPUSH
8976: CALL_OW 301
8980: AND
8981: IFFALSE 8991
// dead2 := true ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 1
8990: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8991: LD_VAR 0 3
8995: NOT
8996: PUSH
8997: LD_EXP 54
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: LD_INT 14
9008: PPUSH
9009: CALL_OW 308
9013: AND
9014: IFFALSE 9024
// inarea1 := true ;
9016: LD_ADDR_VAR 0 3
9020: PUSH
9021: LD_INT 1
9023: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
9024: LD_VAR 0 4
9028: NOT
9029: PUSH
9030: LD_EXP 54
9034: PUSH
9035: LD_INT 2
9037: ARRAY
9038: PPUSH
9039: LD_INT 14
9041: PPUSH
9042: CALL_OW 308
9046: AND
9047: IFFALSE 9057
// inarea2 := true ;
9049: LD_ADDR_VAR 0 4
9053: PUSH
9054: LD_INT 1
9056: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
9057: LD_VAR 0 1
9061: PUSH
9062: LD_VAR 0 2
9066: AND
9067: PUSH
9068: LD_VAR 0 1
9072: PUSH
9073: LD_VAR 0 4
9077: AND
9078: OR
9079: PUSH
9080: LD_VAR 0 2
9084: PUSH
9085: LD_VAR 0 3
9089: AND
9090: OR
9091: PUSH
9092: LD_VAR 0 3
9096: PUSH
9097: LD_VAR 0 4
9101: AND
9102: OR
9103: IFFALSE 8924
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
9105: LD_VAR 0 3
9109: PUSH
9110: LD_VAR 0 4
9114: AND
9115: PUSH
9116: LD_VAR 0 1
9120: PUSH
9121: LD_VAR 0 4
9125: AND
9126: OR
9127: PUSH
9128: LD_VAR 0 2
9132: PUSH
9133: LD_VAR 0 3
9137: AND
9138: OR
9139: IFFALSE 9764
// begin prepare_siege := true ;
9141: LD_ADDR_EXP 31
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// DialogueOn ;
9149: CALL_OW 6
// if ( inarea1 and inarea2 ) then
9153: LD_VAR 0 3
9157: PUSH
9158: LD_VAR 0 4
9162: AND
9163: IFFALSE 9179
// Say ( JMM , D8b-JMM-1a ) else
9165: LD_EXP 37
9169: PPUSH
9170: LD_STRING D8b-JMM-1a
9172: PPUSH
9173: CALL_OW 88
9177: GO 9191
// Say ( JMM , D8b-JMM-1 ) ;
9179: LD_EXP 37
9183: PPUSH
9184: LD_STRING D8b-JMM-1
9186: PPUSH
9187: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
9191: LD_EXP 4
9195: PPUSH
9196: LD_INT 26
9198: PUSH
9199: LD_INT 1
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PPUSH
9206: CALL_OW 72
9210: PUSH
9211: LD_EXP 38
9215: PUSH
9216: LD_EXP 39
9220: PUSH
9221: LD_EXP 48
9225: PUSH
9226: LD_EXP 51
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: DIFF
9237: PPUSH
9238: LD_STRING D8b-Sol1-1
9240: PPUSH
9241: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
9245: LD_EXP 39
9249: PUSH
9250: LD_EXP 39
9254: PUSH
9255: LD_EXP 4
9259: IN
9260: AND
9261: IFFALSE 9277
// Say ( Cyrus , D8b-Cyrus-1 ) else
9263: LD_EXP 39
9267: PPUSH
9268: LD_STRING D8b-Cyrus-1
9270: PPUSH
9271: CALL_OW 88
9275: GO 9289
// Say ( JMM , D8b-JMM-1a ) ;
9277: LD_EXP 37
9281: PPUSH
9282: LD_STRING D8b-JMM-1a
9284: PPUSH
9285: CALL_OW 88
// if Lisa and Lisa in jmm_units then
9289: LD_EXP 40
9293: PUSH
9294: LD_EXP 40
9298: PUSH
9299: LD_EXP 4
9303: IN
9304: AND
9305: IFFALSE 9319
// Say ( Lisa , D8b-Lisa-2 ) ;
9307: LD_EXP 40
9311: PPUSH
9312: LD_STRING D8b-Lisa-2
9314: PPUSH
9315: CALL_OW 88
// if Bobby and Bobby in jmm_units then
9319: LD_EXP 38
9323: PUSH
9324: LD_EXP 38
9328: PUSH
9329: LD_EXP 4
9333: IN
9334: AND
9335: IFFALSE 9351
// Say ( Bobby , D8b-Bobby-1 ) else
9337: LD_EXP 38
9341: PPUSH
9342: LD_STRING D8b-Bobby-1
9344: PPUSH
9345: CALL_OW 88
9349: GO 9411
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
9351: LD_ADDR_VAR 0 5
9355: PUSH
9356: LD_EXP 4
9360: PPUSH
9361: LD_INT 26
9363: PUSH
9364: LD_INT 1
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PPUSH
9371: CALL_OW 72
9375: PUSH
9376: LD_EXP 38
9380: PUSH
9381: LD_EXP 39
9385: PUSH
9386: LD_EXP 48
9390: PUSH
9391: LD_EXP 51
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: DIFF
9402: PPUSH
9403: LD_STRING D8b-Sol2-1
9405: PPUSH
9406: CALL 585 0 2
9410: ST_TO_ADDR
// DialogueOff ;
9411: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
9415: LD_EXP 39
9419: PUSH
9420: LD_EXP 39
9424: PUSH
9425: LD_EXP 4
9429: IN
9430: AND
9431: IFFALSE 9456
// tmp := Insert ( tmp , 1 , Cyrus ) ;
9433: LD_ADDR_VAR 0 6
9437: PUSH
9438: LD_VAR 0 6
9442: PPUSH
9443: LD_INT 1
9445: PPUSH
9446: LD_EXP 39
9450: PPUSH
9451: CALL_OW 2
9455: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
9456: LD_EXP 38
9460: PUSH
9461: LD_EXP 38
9465: PUSH
9466: LD_EXP 4
9470: IN
9471: AND
9472: IFFALSE 9497
// tmp := Insert ( tmp , 1 , Bobby ) ;
9474: LD_ADDR_VAR 0 6
9478: PUSH
9479: LD_VAR 0 6
9483: PPUSH
9484: LD_INT 1
9486: PPUSH
9487: LD_EXP 38
9491: PPUSH
9492: CALL_OW 2
9496: ST_TO_ADDR
// if sol then
9497: LD_VAR 0 5
9501: IFFALSE 9526
// tmp := Insert ( tmp , 1 , sol ) ;
9503: LD_ADDR_VAR 0 6
9507: PUSH
9508: LD_VAR 0 6
9512: PPUSH
9513: LD_INT 1
9515: PPUSH
9516: LD_VAR 0 5
9520: PPUSH
9521: CALL_OW 2
9525: ST_TO_ADDR
// if tmp then
9526: LD_VAR 0 6
9530: IFFALSE 9723
// begin SetSide ( tmp , 8 ) ;
9532: LD_VAR 0 6
9536: PPUSH
9537: LD_INT 8
9539: PPUSH
9540: CALL_OW 235
// for i in tmp do
9544: LD_ADDR_VAR 0 7
9548: PUSH
9549: LD_VAR 0 6
9553: PUSH
9554: FOR_IN
9555: IFFALSE 9568
// ComExit ( i ) ;
9557: LD_VAR 0 7
9561: PPUSH
9562: CALL 77103 0 1
9566: GO 9554
9568: POP
9569: POP
// wait ( 0 0$0.3 ) ;
9570: LD_INT 10
9572: PPUSH
9573: CALL_OW 67
// ComFree ( tmp ) ;
9577: LD_VAR 0 6
9581: PPUSH
9582: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9586: LD_VAR 0 6
9590: PPUSH
9591: LD_INT 15
9593: PPUSH
9594: CALL_OW 173
// AddComHold ( tmp ) ;
9598: LD_VAR 0 6
9602: PPUSH
9603: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9607: LD_INT 35
9609: PPUSH
9610: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9614: LD_VAR 0 6
9618: PUSH
9619: LD_INT 1
9621: ARRAY
9622: PPUSH
9623: CALL_OW 314
9627: NOT
9628: IFFALSE 9642
// ComMoveToArea ( tmp , cyrusEscape ) ;
9630: LD_VAR 0 6
9634: PPUSH
9635: LD_INT 15
9637: PPUSH
9638: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9642: LD_VAR 0 6
9646: PUSH
9647: LD_INT 1
9649: ARRAY
9650: PPUSH
9651: LD_INT 15
9653: PPUSH
9654: CALL_OW 308
9658: IFFALSE 9713
// begin RemoveUnit ( tmp [ 1 ] ) ;
9660: LD_VAR 0 6
9664: PUSH
9665: LD_INT 1
9667: ARRAY
9668: PPUSH
9669: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9673: LD_ADDR_EXP 4
9677: PUSH
9678: LD_EXP 4
9682: PUSH
9683: LD_VAR 0 6
9687: PUSH
9688: LD_INT 1
9690: ARRAY
9691: DIFF
9692: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9693: LD_ADDR_VAR 0 6
9697: PUSH
9698: LD_VAR 0 6
9702: PUSH
9703: LD_VAR 0 6
9707: PUSH
9708: LD_INT 1
9710: ARRAY
9711: DIFF
9712: ST_TO_ADDR
// end ; until tmp = 0 ;
9713: LD_VAR 0 6
9717: PUSH
9718: LD_INT 0
9720: EQUAL
9721: IFFALSE 9607
// end ; wait ( 0 0$30 ) ;
9723: LD_INT 1050
9725: PPUSH
9726: CALL_OW 67
// if ru_spec_patrol then
9730: LD_EXP 54
9734: IFFALSE 9762
// for i in ru_spec_patrol do
9736: LD_ADDR_VAR 0 7
9740: PUSH
9741: LD_EXP 54
9745: PUSH
9746: FOR_IN
9747: IFFALSE 9760
// RemoveUnit ( i ) ;
9749: LD_VAR 0 7
9753: PPUSH
9754: CALL_OW 64
9758: GO 9746
9760: POP
9761: POP
// end else
9762: GO 9784
// begin prepare_siege := false ;
9764: LD_ADDR_EXP 31
9768: PUSH
9769: LD_INT 0
9771: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9772: LD_EXP 37
9776: PPUSH
9777: LD_STRING D8a-JMM-1
9779: PPUSH
9780: CALL_OW 88
// end ; end ;
9784: PPOPN 7
9786: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9787: LD_EXP 12
9791: IFFALSE 11059
9793: GO 9795
9795: DISABLE
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
9800: PPUSH
// begin uc_side := 8 ;
9801: LD_ADDR_OWVAR 20
9805: PUSH
9806: LD_INT 8
9808: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9809: LD_ADDR_VAR 0 3
9813: PUSH
9814: LD_INT 59
9816: PUSH
9817: LD_INT 71
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 122
9826: PUSH
9827: LD_INT 117
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9838: LD_ADDR_EXP 51
9842: PUSH
9843: LD_STRING Frank
9845: PPUSH
9846: LD_INT 0
9848: PPUSH
9849: LD_STRING 
9851: PPUSH
9852: CALL 39237 0 3
9856: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9857: LD_ADDR_VAR 0 1
9861: PUSH
9862: LD_INT 1
9864: PPUSH
9865: LD_INT 2
9867: PPUSH
9868: CALL_OW 12
9872: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9873: LD_EXP 51
9877: PPUSH
9878: LD_VAR 0 3
9882: PUSH
9883: LD_VAR 0 1
9887: ARRAY
9888: PUSH
9889: LD_INT 1
9891: ARRAY
9892: PPUSH
9893: LD_VAR 0 3
9897: PUSH
9898: LD_VAR 0 1
9902: ARRAY
9903: PUSH
9904: LD_INT 2
9906: ARRAY
9907: PPUSH
9908: LD_INT 0
9910: PPUSH
9911: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9915: LD_EXP 51
9919: PPUSH
9920: LD_INT 1
9922: PPUSH
9923: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9927: LD_INT 35
9929: PPUSH
9930: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9934: LD_EXP 51
9938: PPUSH
9939: LD_EXP 37
9943: PPUSH
9944: CALL_OW 296
9948: PUSH
9949: LD_INT 8
9951: LESS
9952: PUSH
9953: LD_EXP 51
9957: PPUSH
9958: CALL_OW 256
9962: PUSH
9963: LD_INT 250
9965: GREATER
9966: AND
9967: IFFALSE 9927
// Video ( true ) ;
9969: LD_INT 1
9971: PPUSH
9972: CALL 76677 0 1
// CenterOnUnits ( JMM ) ;
9976: LD_EXP 37
9980: PPUSH
9981: CALL_OW 85
// if IsInUnit ( JMM ) then
9985: LD_EXP 37
9989: PPUSH
9990: CALL_OW 310
9994: IFFALSE 10005
// ComFree ( JMM ) ;
9996: LD_EXP 37
10000: PPUSH
10001: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
10005: LD_EXP 37
10009: PPUSH
10010: LD_EXP 51
10014: PPUSH
10015: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
10019: LD_EXP 51
10023: PPUSH
10024: LD_EXP 37
10028: PPUSH
10029: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
10033: LD_EXP 37
10037: PPUSH
10038: LD_STRING D6-JMM-1
10040: PPUSH
10041: CALL_OW 88
// p := 0 ;
10045: LD_ADDR_VAR 0 2
10049: PUSH
10050: LD_INT 0
10052: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10053: LD_INT 35
10055: PPUSH
10056: CALL_OW 67
// p := p + 1 ;
10060: LD_ADDR_VAR 0 2
10064: PUSH
10065: LD_VAR 0 2
10069: PUSH
10070: LD_INT 1
10072: PLUS
10073: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
10074: LD_EXP 37
10078: PPUSH
10079: LD_EXP 51
10083: PPUSH
10084: CALL_OW 296
10088: PUSH
10089: LD_INT 8
10091: LESS
10092: PUSH
10093: LD_VAR 0 2
10097: PUSH
10098: LD_INT 7
10100: GREATER
10101: OR
10102: IFFALSE 10053
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
10104: LD_EXP 40
10108: PUSH
10109: LD_EXP 40
10113: PPUSH
10114: LD_EXP 51
10118: PPUSH
10119: CALL_OW 296
10123: PUSH
10124: LD_INT 20
10126: LESS
10127: AND
10128: PUSH
10129: LD_EXP 40
10133: PUSH
10134: LD_EXP 4
10138: IN
10139: AND
10140: IFFALSE 10165
// begin ComFree ( Lisa ) ;
10142: LD_EXP 40
10146: PPUSH
10147: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
10151: LD_EXP 40
10155: PPUSH
10156: LD_EXP 51
10160: PPUSH
10161: CALL_OW 172
// end ; if Lynch then
10165: LD_EXP 47
10169: IFFALSE 10194
// begin ComFree ( Lynch ) ;
10171: LD_EXP 47
10175: PPUSH
10176: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
10180: LD_EXP 47
10184: PPUSH
10185: LD_EXP 51
10189: PPUSH
10190: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
10194: LD_EXP 37
10198: PPUSH
10199: LD_EXP 51
10203: PPUSH
10204: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10208: LD_EXP 51
10212: PPUSH
10213: LD_EXP 37
10217: PPUSH
10218: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
10222: LD_EXP 51
10226: PPUSH
10227: LD_STRING D6-Frank-1
10229: PPUSH
10230: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
10234: LD_INT 69
10236: PPUSH
10237: LD_INT 20
10239: PPUSH
10240: LD_INT 1
10242: PPUSH
10243: LD_INT 20
10245: NEG
10246: PPUSH
10247: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
10251: LD_INT 69
10253: PPUSH
10254: LD_INT 20
10256: PPUSH
10257: LD_INT 1
10259: PPUSH
10260: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
10264: LD_INT 190
10266: PPUSH
10267: LD_INT 31
10269: PPUSH
10270: LD_INT 1
10272: PPUSH
10273: LD_INT 20
10275: NEG
10276: PPUSH
10277: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
10281: LD_INT 190
10283: PPUSH
10284: LD_INT 31
10286: PPUSH
10287: LD_INT 1
10289: PPUSH
10290: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
10294: LD_INT 69
10296: PPUSH
10297: LD_INT 20
10299: PPUSH
10300: CALL_OW 84
// Wait ( 0 0$02 ) ;
10304: LD_INT 70
10306: PPUSH
10307: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
10311: LD_EXP 37
10315: PPUSH
10316: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
10320: LD_EXP 40
10324: PUSH
10325: LD_EXP 40
10329: PPUSH
10330: LD_EXP 51
10334: PPUSH
10335: CALL_OW 296
10339: PUSH
10340: LD_INT 20
10342: LESS
10343: AND
10344: PUSH
10345: LD_EXP 40
10349: PPUSH
10350: CALL_OW 302
10354: AND
10355: PUSH
10356: LD_EXP 40
10360: PUSH
10361: LD_EXP 4
10365: IN
10366: AND
10367: IFFALSE 10489
// begin ComFree ( Lisa ) ;
10369: LD_EXP 40
10373: PPUSH
10374: CALL_OW 139
// p := 0 ;
10378: LD_ADDR_VAR 0 2
10382: PUSH
10383: LD_INT 0
10385: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10386: LD_INT 35
10388: PPUSH
10389: CALL_OW 67
// p := p + 1 ;
10393: LD_ADDR_VAR 0 2
10397: PUSH
10398: LD_VAR 0 2
10402: PUSH
10403: LD_INT 1
10405: PLUS
10406: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10407: LD_EXP 40
10411: PPUSH
10412: LD_EXP 51
10416: PPUSH
10417: CALL_OW 296
10421: PUSH
10422: LD_INT 7
10424: LESS
10425: PUSH
10426: LD_VAR 0 2
10430: PUSH
10431: LD_INT 7
10433: GREATER
10434: OR
10435: IFFALSE 10386
// Say ( Lisa , D6-Lisa-1 ) ;
10437: LD_EXP 40
10441: PPUSH
10442: LD_STRING D6-Lisa-1
10444: PPUSH
10445: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10449: LD_EXP 40
10453: PPUSH
10454: LD_EXP 51
10458: PPUSH
10459: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10463: LD_EXP 51
10467: PPUSH
10468: LD_EXP 40
10472: PPUSH
10473: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10477: LD_EXP 51
10481: PPUSH
10482: LD_STRING D6-Frank-2
10484: PPUSH
10485: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10489: LD_EXP 47
10493: PUSH
10494: LD_EXP 47
10498: PPUSH
10499: LD_EXP 51
10503: PPUSH
10504: CALL_OW 296
10508: PUSH
10509: LD_INT 20
10511: LESS
10512: AND
10513: PUSH
10514: LD_EXP 47
10518: PPUSH
10519: CALL_OW 302
10523: AND
10524: IFFALSE 10717
// begin ComTurnUnit ( Lynch , JMM ) ;
10526: LD_EXP 47
10530: PPUSH
10531: LD_EXP 37
10535: PPUSH
10536: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10540: LD_EXP 51
10544: PPUSH
10545: LD_EXP 37
10549: PPUSH
10550: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10554: LD_EXP 47
10558: PPUSH
10559: LD_STRING D6-Sol1-2
10561: PPUSH
10562: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10566: LD_EXP 37
10570: PPUSH
10571: LD_STRING D6-JMM-2
10573: PPUSH
10574: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10578: LD_EXP 51
10582: PPUSH
10583: LD_STRING D6-Frank-3
10585: PPUSH
10586: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10590: LD_EXP 37
10594: PPUSH
10595: LD_STRING D6-JMM-3
10597: PPUSH
10598: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10602: LD_EXP 51
10606: PPUSH
10607: LD_STRING D6-Frank-4
10609: PPUSH
10610: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10614: LD_EXP 51
10618: PPUSH
10619: LD_STRING D6-Frank-4a
10621: PPUSH
10622: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10626: LD_EXP 37
10630: PPUSH
10631: LD_STRING D6-JMM-4
10633: PPUSH
10634: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10638: LD_EXP 51
10642: PPUSH
10643: LD_STRING D6-Frank-5
10645: PPUSH
10646: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10650: LD_EXP 40
10654: PUSH
10655: LD_EXP 40
10659: PPUSH
10660: CALL_OW 302
10664: AND
10665: PUSH
10666: LD_EXP 40
10670: PUSH
10671: LD_EXP 4
10675: IN
10676: AND
10677: IFFALSE 10691
// Say ( Lisa , D6-Lisa-5 ) ;
10679: LD_EXP 40
10683: PPUSH
10684: LD_STRING D6-Lisa-5
10686: PPUSH
10687: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10691: LD_EXP 51
10695: PPUSH
10696: LD_STRING D6-Frank-6
10698: PPUSH
10699: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10703: LD_EXP 37
10707: PPUSH
10708: LD_STRING D6-JMM-6
10710: PPUSH
10711: CALL_OW 88
// end else
10715: GO 10844
// begin ComTurnUnit ( Frank , JMM ) ;
10717: LD_EXP 51
10721: PPUSH
10722: LD_EXP 37
10726: PPUSH
10727: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10731: LD_EXP 51
10735: PPUSH
10736: LD_STRING D6-Frank-4
10738: PPUSH
10739: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10743: LD_EXP 51
10747: PPUSH
10748: LD_STRING D6-Frank-4a
10750: PPUSH
10751: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10755: LD_EXP 37
10759: PPUSH
10760: LD_STRING D6-JMM-4
10762: PPUSH
10763: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10767: LD_EXP 51
10771: PPUSH
10772: LD_STRING D6-Frank-5
10774: PPUSH
10775: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10779: LD_EXP 40
10783: PUSH
10784: LD_EXP 40
10788: PPUSH
10789: CALL_OW 302
10793: AND
10794: PUSH
10795: LD_EXP 40
10799: PUSH
10800: LD_EXP 4
10804: IN
10805: AND
10806: IFFALSE 10820
// Say ( Lisa , D6-Lisa-5 ) ;
10808: LD_EXP 40
10812: PPUSH
10813: LD_STRING D6-Lisa-5
10815: PPUSH
10816: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10820: LD_EXP 51
10824: PPUSH
10825: LD_STRING D6-Frank-6
10827: PPUSH
10828: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10832: LD_EXP 37
10836: PPUSH
10837: LD_STRING D6-JMM-6
10839: PPUSH
10840: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10844: LD_STRING Q1
10846: PPUSH
10847: CALL_OW 97
10851: PUSH
10852: LD_INT 1
10854: DOUBLE
10855: EQUAL
10856: IFTRUE 10860
10858: GO 10871
10860: POP
// frank_send_to_scout := true ; 2 :
10861: LD_ADDR_EXP 15
10865: PUSH
10866: LD_INT 1
10868: ST_TO_ADDR
10869: GO 10891
10871: LD_INT 2
10873: DOUBLE
10874: EQUAL
10875: IFTRUE 10879
10877: GO 10890
10879: POP
// frank_send_to_scout := false ; end ;
10880: LD_ADDR_EXP 15
10884: PUSH
10885: LD_INT 0
10887: ST_TO_ADDR
10888: GO 10891
10890: POP
// Video ( false ) ;
10891: LD_INT 0
10893: PPUSH
10894: CALL 76677 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10898: LD_EXP 37
10902: PUSH
10903: LD_EXP 40
10907: PUSH
10908: LD_EXP 47
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: LIST
10917: PPUSH
10918: CALL_OW 139
// if frank_send_to_scout then
10922: LD_EXP 15
10926: IFFALSE 10980
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10928: LD_EXP 51
10932: PPUSH
10933: LD_INT 15
10935: PPUSH
10936: CALL_OW 113
// wait ( 0 0$01 ) ;
10940: LD_INT 35
10942: PPUSH
10943: CALL_OW 67
// until not See ( 1 , Frank ) ;
10947: LD_INT 1
10949: PPUSH
10950: LD_EXP 51
10954: PPUSH
10955: CALL_OW 292
10959: NOT
10960: IFFALSE 10928
// wait ( 0 0$02 ) ;
10962: LD_INT 70
10964: PPUSH
10965: CALL_OW 67
// RemoveUnit ( Frank ) ;
10969: LD_EXP 51
10973: PPUSH
10974: CALL_OW 64
// end else
10978: GO 10992
// SetSide ( Frank , 1 ) ;
10980: LD_EXP 51
10984: PPUSH
10985: LD_INT 1
10987: PPUSH
10988: CALL_OW 235
// send_attack_on_cornel_base := true ;
10992: LD_ADDR_EXP 26
10996: PUSH
10997: LD_INT 1
10999: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11000: LD_INT 35
11002: PPUSH
11003: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
11007: LD_ADDR_EXP 29
11011: PUSH
11012: LD_EXP 29
11016: PPUSH
11017: LD_STRING -
11019: PPUSH
11020: CALL 1077 0 2
11024: ST_TO_ADDR
// if debug then
11025: LD_EXP 1
11029: IFFALSE 11041
// debug_strings := time_to_prepare ;
11031: LD_ADDR_OWVAR 48
11035: PUSH
11036: LD_EXP 29
11040: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
11041: LD_EXP 29
11045: PUSH
11046: LD_INT 0
11048: EQUAL
11049: IFFALSE 11000
// cornel_prepared := true ;
11051: LD_ADDR_EXP 11
11055: PUSH
11056: LD_INT 1
11058: ST_TO_ADDR
// end ;
11059: PPOPN 3
11061: END
// every 0 0$01 trigger cornel_prepared do
11062: LD_EXP 11
11066: IFFALSE 11374
11068: GO 11070
11070: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
11071: LD_EXP 44
11075: PPUSH
11076: LD_STRING D3-Corn-1
11078: PPUSH
11079: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
11083: LD_STRING MOutWait
11085: PPUSH
11086: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
11090: LD_INT 35
11092: PPUSH
11093: CALL_OW 67
// until cornel_counter = 0 ;
11097: LD_EXP 10
11101: PUSH
11102: LD_INT 0
11104: EQUAL
11105: IFFALSE 11090
// SayRadio ( Cornel , D3a-Corn-1 ) ;
11107: LD_EXP 44
11111: PPUSH
11112: LD_STRING D3a-Corn-1
11114: PPUSH
11115: CALL_OW 94
// if IsOk ( Cornel ) then
11119: LD_EXP 44
11123: PPUSH
11124: CALL_OW 302
11128: IFFALSE 11142
// Say ( JMM , D3a-JMM-1 ) ;
11130: LD_EXP 37
11134: PPUSH
11135: LD_STRING D3a-JMM-1
11137: PPUSH
11138: CALL_OW 88
// end_mission_allowed := true ;
11142: LD_ADDR_EXP 21
11146: PUSH
11147: LD_INT 1
11149: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11150: LD_STRING M2
11152: PPUSH
11153: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
11157: LD_INT 9
11159: PPUSH
11160: LD_INT 1
11162: PPUSH
11163: CALL_OW 424
// Wait ( 0 0$05 ) ;
11167: LD_INT 175
11169: PPUSH
11170: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
11174: LD_EXP 44
11178: PPUSH
11179: LD_STRING D3a-Corn-2
11181: PPUSH
11182: CALL_OW 94
// cornel_attack := true ;
11186: LD_ADDR_EXP 9
11190: PUSH
11191: LD_INT 1
11193: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
11194: LD_INT 105
11196: PPUSH
11197: CALL_OW 67
// AddMoreTanks ( ) ;
11201: CALL 5402 0 0
// if frank_send_to_scout then
11205: LD_EXP 15
11209: IFFALSE 11374
// begin InitHc ;
11211: CALL_OW 19
// InitUc ;
11215: CALL_OW 18
// uc_side := 8 ;
11219: LD_ADDR_OWVAR 20
11223: PUSH
11224: LD_INT 8
11226: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
11227: LD_ADDR_EXP 51
11231: PUSH
11232: LD_STRING Frank
11234: PPUSH
11235: LD_INT 0
11237: PPUSH
11238: LD_STRING 
11240: PPUSH
11241: CALL 39237 0 3
11245: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
11246: LD_EXP 51
11250: PPUSH
11251: LD_INT 6
11253: PPUSH
11254: LD_INT 9
11256: PPUSH
11257: LD_INT 0
11259: PPUSH
11260: CALL_OW 48
// ComCrawl ( Frank ) ;
11264: LD_EXP 51
11268: PPUSH
11269: CALL_OW 137
// repeat wait ( 10 ) ;
11273: LD_INT 10
11275: PPUSH
11276: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11280: LD_EXP 37
11284: PPUSH
11285: LD_EXP 51
11289: PPUSH
11290: CALL_OW 296
11294: PUSH
11295: LD_INT 9
11297: LESS
11298: PUSH
11299: LD_INT 9
11301: PPUSH
11302: LD_INT 22
11304: PUSH
11305: LD_INT 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PPUSH
11312: CALL_OW 70
11316: OR
11317: IFFALSE 11273
// if IsDead ( Frank ) then
11319: LD_EXP 51
11323: PPUSH
11324: CALL_OW 301
11328: IFFALSE 11332
// exit ;
11330: GO 11374
// CenterOnUnits ( Frank ) ;
11332: LD_EXP 51
11336: PPUSH
11337: CALL_OW 85
// SetSide ( Frank , 1 ) ;
11341: LD_EXP 51
11345: PPUSH
11346: LD_INT 1
11348: PPUSH
11349: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
11353: LD_EXP 51
11357: PPUSH
11358: LD_STRING D6a-Frank-1
11360: PPUSH
11361: CALL_OW 88
// ComWalk ( Frank ) ;
11365: LD_EXP 51
11369: PPUSH
11370: CALL_OW 138
// end ; end ;
11374: END
// every 0 0$01 trigger solar_builded do
11375: LD_EXP 14
11379: IFFALSE 11483
11381: GO 11383
11383: DISABLE
// begin Wait ( 0 0$02 ) ;
11384: LD_INT 70
11386: PPUSH
11387: CALL_OW 67
// DialogueOn ;
11391: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11395: LD_EXP 37
11399: PPUSH
11400: LD_STRING D2b-JMM-1
11402: PPUSH
11403: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11407: LD_EXP 48
11411: PUSH
11412: LD_EXP 48
11416: PPUSH
11417: CALL_OW 302
11421: AND
11422: IFFALSE 11472
// begin Say ( Walker , D2b-Sci1-1 ) ;
11424: LD_EXP 48
11428: PPUSH
11429: LD_STRING D2b-Sci1-1
11431: PPUSH
11432: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11436: LD_EXP 37
11440: PPUSH
11441: LD_STRING D2b-JMM-2
11443: PPUSH
11444: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11448: LD_EXP 48
11452: PPUSH
11453: LD_STRING D2b-Sci1-2
11455: PPUSH
11456: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11460: LD_EXP 37
11464: PPUSH
11465: LD_STRING D2b-JMM-3
11467: PPUSH
11468: CALL_OW 88
// end ; DialogueOff ;
11472: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11476: LD_STRING MOutSol
11478: PPUSH
11479: CALL_OW 337
// end ;
11483: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11484: LD_EXP 14
11488: PUSH
11489: LD_EXP 37
11493: PPUSH
11494: CALL_OW 302
11498: AND
11499: PUSH
11500: LD_EXP 37
11504: PPUSH
11505: CALL 911 0 1
11509: AND
11510: PUSH
11511: LD_EXP 16
11515: NOT
11516: AND
11517: IFFALSE 11588
11519: GO 11521
11521: DISABLE
11522: LD_INT 0
11524: PPUSH
// begin jmm_in_veh := true ;
11525: LD_ADDR_EXP 16
11529: PUSH
11530: LD_INT 1
11532: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11533: LD_ADDR_VAR 0 1
11537: PUSH
11538: LD_INT 0
11540: PPUSH
11541: LD_INT 1
11543: PPUSH
11544: CALL_OW 12
11548: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11549: LD_INT 70
11551: PPUSH
11552: CALL_OW 67
// if i then
11556: LD_VAR 0 1
11560: IFFALSE 11576
// Say ( JMM , D2c-JMM-1 ) else
11562: LD_EXP 37
11566: PPUSH
11567: LD_STRING D2c-JMM-1
11569: PPUSH
11570: CALL_OW 88
11574: GO 11588
// Say ( JMM , D2c-JMM-1a ) ;
11576: LD_EXP 37
11580: PPUSH
11581: LD_STRING D2c-JMM-1a
11583: PPUSH
11584: CALL_OW 88
// end ;
11588: PPOPN 1
11590: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11591: LD_EXP 14
11595: PUSH
11596: LD_EXP 38
11600: PPUSH
11601: CALL_OW 302
11605: AND
11606: PUSH
11607: LD_EXP 38
11611: PPUSH
11612: CALL 911 0 1
11616: AND
11617: PUSH
11618: LD_EXP 17
11622: NOT
11623: AND
11624: IFFALSE 11656
11626: GO 11628
11628: DISABLE
// begin bobby_in_veh := true ;
11629: LD_ADDR_EXP 17
11633: PUSH
11634: LD_INT 1
11636: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11637: LD_INT 70
11639: PPUSH
11640: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11644: LD_EXP 38
11648: PPUSH
11649: LD_STRING D2c-Bobby-1
11651: PPUSH
11652: CALL_OW 88
11656: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11657: LD_EXP 14
11661: PUSH
11662: LD_EXP 40
11666: PPUSH
11667: CALL_OW 302
11671: AND
11672: PUSH
11673: LD_EXP 40
11677: PPUSH
11678: CALL 911 0 1
11682: AND
11683: PUSH
11684: LD_EXP 19
11688: NOT
11689: AND
11690: IFFALSE 11722
11692: GO 11694
11694: DISABLE
// begin lisa_in_veh := true ;
11695: LD_ADDR_EXP 19
11699: PUSH
11700: LD_INT 1
11702: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11703: LD_INT 70
11705: PPUSH
11706: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11710: LD_EXP 40
11714: PPUSH
11715: LD_STRING D2c-Lisa-1
11717: PPUSH
11718: CALL_OW 88
11722: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11723: LD_EXP 14
11727: PUSH
11728: LD_EXP 39
11732: PPUSH
11733: CALL_OW 302
11737: AND
11738: PUSH
11739: LD_EXP 39
11743: PPUSH
11744: CALL 911 0 1
11748: AND
11749: PUSH
11750: LD_EXP 18
11754: NOT
11755: AND
11756: IFFALSE 11827
11758: GO 11760
11760: DISABLE
11761: LD_INT 0
11763: PPUSH
// begin cyrus_in_veh := true ;
11764: LD_ADDR_EXP 18
11768: PUSH
11769: LD_INT 1
11771: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_INT 0
11779: PPUSH
11780: LD_INT 1
11782: PPUSH
11783: CALL_OW 12
11787: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11788: LD_INT 70
11790: PPUSH
11791: CALL_OW 67
// if i then
11795: LD_VAR 0 1
11799: IFFALSE 11815
// Say ( Cyrus , D2c-Cyrus-1 ) else
11801: LD_EXP 39
11805: PPUSH
11806: LD_STRING D2c-Cyrus-1
11808: PPUSH
11809: CALL_OW 88
11813: GO 11827
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11815: LD_EXP 39
11819: PPUSH
11820: LD_STRING D2c-Cyrus-1a
11822: PPUSH
11823: CALL_OW 88
// end ;
11827: PPOPN 1
11829: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11830: LD_EXP 44
11834: PPUSH
11835: LD_INT 16
11837: PPUSH
11838: CALL_OW 308
11842: IFFALSE 12123
11844: GO 11846
11846: DISABLE
11847: LD_INT 0
11849: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11850: LD_INT 3
11852: PPUSH
11853: LD_EXP 44
11857: PPUSH
11858: CALL_OW 471
// send_attack_on_cornel := true ;
11862: LD_ADDR_EXP 32
11866: PUSH
11867: LD_INT 1
11869: ST_TO_ADDR
// if ru_vehicles then
11870: LD_EXP 56
11874: IFFALSE 11908
// for i in ru_vehicles do
11876: LD_ADDR_VAR 0 1
11880: PUSH
11881: LD_EXP 56
11885: PUSH
11886: FOR_IN
11887: IFFALSE 11906
// ComAgressiveMove ( i , 215 , 69 ) ;
11889: LD_VAR 0 1
11893: PPUSH
11894: LD_INT 215
11896: PPUSH
11897: LD_INT 69
11899: PPUSH
11900: CALL_OW 114
11904: GO 11886
11906: POP
11907: POP
// if ru_patrol then
11908: LD_EXP 53
11912: IFFALSE 11946
// for i in ru_patrol do
11914: LD_ADDR_VAR 0 1
11918: PUSH
11919: LD_EXP 53
11923: PUSH
11924: FOR_IN
11925: IFFALSE 11944
// ComAgressiveMove ( i , 215 , 69 ) ;
11927: LD_VAR 0 1
11931: PPUSH
11932: LD_INT 215
11934: PPUSH
11935: LD_INT 69
11937: PPUSH
11938: CALL_OW 114
11942: GO 11924
11944: POP
11945: POP
// if frank_send_to_scout then
11946: LD_EXP 15
11950: IFFALSE 11964
// SayRadio ( Frank , D3b-Frank-1 ) ;
11952: LD_EXP 51
11956: PPUSH
11957: LD_STRING D3b-Frank-1
11959: PPUSH
11960: CALL_OW 94
// wait ( 0 0$03 ) ;
11964: LD_INT 105
11966: PPUSH
11967: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11971: LD_EXP 44
11975: PPUSH
11976: LD_STRING D4-Corn-1
11978: PPUSH
11979: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11983: LD_INT 35
11985: PPUSH
11986: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11990: LD_INT 22
11992: PUSH
11993: LD_INT 4
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 21
12002: PUSH
12003: LD_INT 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 3
12012: PUSH
12013: LD_INT 24
12015: PUSH
12016: LD_INT 1000
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: PPUSH
12032: CALL_OW 69
12036: PUSH
12037: LD_INT 6
12039: LESS
12040: IFFALSE 11983
// if Cornel then
12042: LD_EXP 44
12046: IFFALSE 12086
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
12048: LD_EXP 44
12052: PPUSH
12053: LD_STRING D5-Corn-1
12055: PPUSH
12056: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
12060: LD_EXP 44
12064: PPUSH
12065: LD_EXP 2
12069: PUSH
12070: LD_STRING Cornel
12072: STR
12073: PPUSH
12074: CALL_OW 38
// cornel_saved := true ;
12078: LD_ADDR_EXP 27
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
12086: LD_INT 4
12088: PPUSH
12089: LD_INT 8
12091: PPUSH
12092: CALL_OW 343
// wait ( 0 0$01 ) ;
12096: LD_INT 35
12098: PPUSH
12099: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
12103: LD_INT 3
12105: PPUSH
12106: LD_EXP 44
12110: PPUSH
12111: CALL_OW 472
// send_attack_on_cornel := false ;
12115: LD_ADDR_EXP 32
12119: PUSH
12120: LD_INT 0
12122: ST_TO_ADDR
// end ;
12123: PPOPN 1
12125: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
12126: LD_INT 9
12128: PPUSH
12129: LD_INT 22
12131: PUSH
12132: LD_INT 1
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PPUSH
12139: CALL_OW 70
12143: PUSH
12144: LD_EXP 33
12148: OR
12149: IFFALSE 12370
12151: GO 12153
12153: DISABLE
12154: LD_INT 0
12156: PPUSH
12157: PPUSH
// begin enable ;
12158: ENABLE
// if not jmm_on_west then
12159: LD_EXP 5
12163: NOT
12164: IFFALSE 12175
// begin YouLost ( 4 ) ;
12166: LD_STRING 4
12168: PPUSH
12169: CALL_OW 104
// exit ;
12173: GO 12370
// end ; if not game_end then
12175: LD_EXP 33
12179: NOT
12180: IFFALSE 12190
// game_end := true ;
12182: LD_ADDR_EXP 33
12186: PUSH
12187: LD_INT 1
12189: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
12190: LD_ADDR_VAR 0 2
12194: PUSH
12195: LD_INT 9
12197: PPUSH
12198: LD_INT 22
12200: PUSH
12201: LD_INT 1
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PPUSH
12208: CALL_OW 70
12212: ST_TO_ADDR
// if not filter then
12213: LD_VAR 0 2
12217: NOT
12218: IFFALSE 12222
// exit ;
12220: GO 12370
// for i in filter do
12222: LD_ADDR_VAR 0 1
12226: PUSH
12227: LD_VAR 0 2
12231: PUSH
12232: FOR_IN
12233: IFFALSE 12368
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
12235: LD_VAR 0 1
12239: PPUSH
12240: CALL_OW 302
12244: PUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 247
12254: PUSH
12255: LD_INT 2
12257: EQUAL
12258: AND
12259: IFFALSE 12331
// begin if i = JMM and save_group < 4 then
12261: LD_VAR 0 1
12265: PUSH
12266: LD_EXP 37
12270: EQUAL
12271: PUSH
12272: LD_EXP 23
12276: PUSH
12277: LD_INT 4
12279: LESS
12280: AND
12281: IFFALSE 12285
// continue ;
12283: GO 12232
// if GetNation ( i ) = nation_american then
12285: LD_VAR 0 1
12289: PPUSH
12290: CALL_OW 248
12294: PUSH
12295: LD_INT 1
12297: EQUAL
12298: IFFALSE 12308
// veh_on_meta := true ;
12300: LD_ADDR_EXP 28
12304: PUSH
12305: LD_INT 1
12307: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
12308: LD_VAR 0 1
12312: PPUSH
12313: CALL_OW 311
12317: PPUSH
12318: CALL 12373 0 1
// RemoveUnit ( i ) ;
12322: LD_VAR 0 1
12326: PPUSH
12327: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
12331: LD_VAR 0 1
12335: PPUSH
12336: CALL_OW 302
12340: PUSH
12341: LD_VAR 0 1
12345: PPUSH
12346: CALL_OW 247
12350: PUSH
12351: LD_INT 1
12353: EQUAL
12354: AND
12355: IFFALSE 12366
// Save ( i ) ;
12357: LD_VAR 0 1
12361: PPUSH
12362: CALL 12373 0 1
// end ;
12366: GO 12232
12368: POP
12369: POP
// end ;
12370: PPOPN 2
12372: END
// export function Save ( i ) ; begin
12373: LD_INT 0
12375: PPUSH
// if i = JMM and save_counter >= 4 then
12376: LD_VAR 0 1
12380: PUSH
12381: LD_EXP 37
12385: EQUAL
12386: PUSH
12387: LD_EXP 36
12391: PUSH
12392: LD_INT 4
12394: GREATEREQUAL
12395: AND
12396: IFFALSE 12532
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12398: LD_EXP 24
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_INT 1
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 21
12415: PUSH
12416: LD_INT 1
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 69
12431: PUSH
12432: LD_INT 1
12434: GREATER
12435: AND
12436: IFFALSE 12493
// begin show_query := false ;
12438: LD_ADDR_EXP 24
12442: PUSH
12443: LD_INT 0
12445: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12446: LD_STRING Q2
12448: PPUSH
12449: CALL_OW 97
12453: PUSH
12454: LD_INT 1
12456: DOUBLE
12457: EQUAL
12458: IFTRUE 12462
12460: GO 12473
12462: POP
// wait_for_them := true ; 2 :
12463: LD_ADDR_EXP 25
12467: PUSH
12468: LD_INT 1
12470: ST_TO_ADDR
12471: GO 12493
12473: LD_INT 2
12475: DOUBLE
12476: EQUAL
12477: IFTRUE 12481
12479: GO 12492
12481: POP
// wait_for_them := false ; end ;
12482: LD_ADDR_EXP 25
12486: PUSH
12487: LD_INT 0
12489: ST_TO_ADDR
12490: GO 12493
12492: POP
// end ; save_counter := save_counter + 1 ;
12493: LD_ADDR_EXP 36
12497: PUSH
12498: LD_EXP 36
12502: PUSH
12503: LD_INT 1
12505: PLUS
12506: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12507: LD_ADDR_EXP 23
12511: PUSH
12512: LD_EXP 23
12516: PUSH
12517: LD_EXP 37
12521: ADD
12522: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12523: LD_EXP 37
12527: PPUSH
12528: CALL_OW 64
// end ; if i = Lisa then
12532: LD_VAR 0 1
12536: PUSH
12537: LD_EXP 40
12541: EQUAL
12542: IFFALSE 12583
// begin save_counter := save_counter + 1 ;
12544: LD_ADDR_EXP 36
12548: PUSH
12549: LD_EXP 36
12553: PUSH
12554: LD_INT 1
12556: PLUS
12557: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12558: LD_ADDR_EXP 23
12562: PUSH
12563: LD_EXP 23
12567: PUSH
12568: LD_EXP 40
12572: ADD
12573: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12574: LD_EXP 40
12578: PPUSH
12579: CALL_OW 64
// end ; if i = Bobby then
12583: LD_VAR 0 1
12587: PUSH
12588: LD_EXP 38
12592: EQUAL
12593: IFFALSE 12634
// begin save_counter := save_counter + 1 ;
12595: LD_ADDR_EXP 36
12599: PUSH
12600: LD_EXP 36
12604: PUSH
12605: LD_INT 1
12607: PLUS
12608: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12609: LD_ADDR_EXP 23
12613: PUSH
12614: LD_EXP 23
12618: PUSH
12619: LD_EXP 38
12623: ADD
12624: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12625: LD_EXP 38
12629: PPUSH
12630: CALL_OW 64
// end ; if i = Cyrus then
12634: LD_VAR 0 1
12638: PUSH
12639: LD_EXP 39
12643: EQUAL
12644: IFFALSE 12685
// begin save_counter := save_counter + 1 ;
12646: LD_ADDR_EXP 36
12650: PUSH
12651: LD_EXP 36
12655: PUSH
12656: LD_INT 1
12658: PLUS
12659: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12660: LD_ADDR_EXP 23
12664: PUSH
12665: LD_EXP 23
12669: PUSH
12670: LD_EXP 39
12674: ADD
12675: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12676: LD_EXP 39
12680: PPUSH
12681: CALL_OW 64
// end ; if i = Khatam then
12685: LD_VAR 0 1
12689: PUSH
12690: LD_EXP 41
12694: EQUAL
12695: IFFALSE 12736
// begin save_counter := save_counter + 1 ;
12697: LD_ADDR_EXP 36
12701: PUSH
12702: LD_EXP 36
12706: PUSH
12707: LD_INT 1
12709: PLUS
12710: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12711: LD_ADDR_EXP 23
12715: PUSH
12716: LD_EXP 23
12720: PUSH
12721: LD_EXP 41
12725: ADD
12726: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12727: LD_EXP 41
12731: PPUSH
12732: CALL_OW 64
// end ; if i = Frank then
12736: LD_VAR 0 1
12740: PUSH
12741: LD_EXP 51
12745: EQUAL
12746: IFFALSE 12787
// begin save_counter := save_counter + 1 ;
12748: LD_ADDR_EXP 36
12752: PUSH
12753: LD_EXP 36
12757: PUSH
12758: LD_INT 1
12760: PLUS
12761: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12762: LD_ADDR_EXP 23
12766: PUSH
12767: LD_EXP 23
12771: PUSH
12772: LD_EXP 51
12776: ADD
12777: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12778: LD_EXP 51
12782: PPUSH
12783: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12787: LD_VAR 0 1
12791: PUSH
12792: LD_EXP 37
12796: NONEQUAL
12797: PUSH
12798: LD_VAR 0 1
12802: PPUSH
12803: CALL_OW 302
12807: AND
12808: PUSH
12809: LD_VAR 0 1
12813: PPUSH
12814: CALL_OW 247
12818: PUSH
12819: LD_INT 1
12821: EQUAL
12822: AND
12823: PUSH
12824: LD_VAR 0 1
12828: PUSH
12829: LD_EXP 23
12833: IN
12834: NOT
12835: AND
12836: IFFALSE 12877
// begin save_counter := save_counter + 1 ;
12838: LD_ADDR_EXP 36
12842: PUSH
12843: LD_EXP 36
12847: PUSH
12848: LD_INT 1
12850: PLUS
12851: ST_TO_ADDR
// save_others := save_others ^ i ;
12852: LD_ADDR_EXP 22
12856: PUSH
12857: LD_EXP 22
12861: PUSH
12862: LD_VAR 0 1
12866: ADD
12867: ST_TO_ADDR
// RemoveUnit ( i ) ;
12868: LD_VAR 0 1
12872: PPUSH
12873: CALL_OW 64
// end ; end ;
12877: LD_VAR 0 2
12881: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12882: LD_EXP 24
12886: NOT
12887: PUSH
12888: LD_EXP 25
12892: NOT
12893: AND
12894: PUSH
12895: LD_INT 22
12897: PUSH
12898: LD_INT 1
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 21
12907: PUSH
12908: LD_INT 1
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PPUSH
12919: CALL_OW 69
12923: PUSH
12924: LD_INT 0
12926: EQUAL
12927: OR
12928: IFFALSE 12937
12930: GO 12932
12932: DISABLE
// EndMission ;
12933: CALL 12938 0 0
12937: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12938: LD_INT 0
12940: PPUSH
12941: PPUSH
12942: PPUSH
12943: PPUSH
12944: PPUSH
// wait ( 0 0$01 ) ;
12945: LD_INT 35
12947: PPUSH
12948: CALL_OW 67
// if tick <= 12 12$00 then
12952: LD_OWVAR 1
12956: PUSH
12957: LD_INT 25200
12959: LESSEQUAL
12960: IFFALSE 12969
// SetAchievement ( ACH_ASPEED_3 ) ;
12962: LD_STRING ACH_ASPEED_3
12964: PPUSH
12965: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12969: LD_EXP 23
12973: PUSH
12974: LD_EXP 22
12978: ADD
12979: PPUSH
12980: LD_INT 25
12982: PUSH
12983: LD_INT 4
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PPUSH
12990: CALL_OW 72
12994: PUSH
12995: LD_INT 0
12997: EQUAL
12998: IFFALSE 13014
// begin wait ( 3 ) ;
13000: LD_INT 3
13002: PPUSH
13003: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
13007: LD_STRING ACH_NOSCI
13009: PPUSH
13010: CALL_OW 543
// end ; m1 := solar_builded ;
13014: LD_ADDR_VAR 0 3
13018: PUSH
13019: LD_EXP 14
13023: ST_TO_ADDR
// m2 := veh_on_meta ;
13024: LD_ADDR_VAR 0 4
13028: PUSH
13029: LD_EXP 28
13033: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
13034: LD_ADDR_VAR 0 5
13038: PUSH
13039: LD_EXP 34
13043: PUSH
13044: LD_INT 0
13046: EQUAL
13047: ST_TO_ADDR
// if solar_builded then
13048: LD_EXP 14
13052: IFFALSE 13066
// AddMedal ( Solar1 , 1 ) else
13054: LD_STRING Solar1
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 101
13064: GO 13077
// AddMedal ( Solar1 , - 1 ) ;
13066: LD_STRING Solar1
13068: PPUSH
13069: LD_INT 1
13071: NEG
13072: PPUSH
13073: CALL_OW 101
// if veh_on_meta then
13077: LD_EXP 28
13081: IFFALSE 13095
// AddMedal ( Solar2 , 1 ) else
13083: LD_STRING Solar2
13085: PPUSH
13086: LD_INT 1
13088: PPUSH
13089: CALL_OW 101
13093: GO 13125
// if solar_builded then
13095: LD_EXP 14
13099: IFFALSE 13114
// AddMedal ( Solar2 , - 1 ) else
13101: LD_STRING Solar2
13103: PPUSH
13104: LD_INT 1
13106: NEG
13107: PPUSH
13108: CALL_OW 101
13112: GO 13125
// AddMedal ( Solar2 , - 2 ) ;
13114: LD_STRING Solar2
13116: PPUSH
13117: LD_INT 2
13119: NEG
13120: PPUSH
13121: CALL_OW 101
// if lose_counter = 0 then
13125: LD_EXP 34
13129: PUSH
13130: LD_INT 0
13132: EQUAL
13133: IFFALSE 13147
// AddMedal ( No , 1 ) else
13135: LD_STRING No
13137: PPUSH
13138: LD_INT 1
13140: PPUSH
13141: CALL_OW 101
13145: GO 13191
// if lose_counter > 0 and lose_counter < 4 then
13147: LD_EXP 34
13151: PUSH
13152: LD_INT 0
13154: GREATER
13155: PUSH
13156: LD_EXP 34
13160: PUSH
13161: LD_INT 4
13163: LESS
13164: AND
13165: IFFALSE 13180
// AddMedal ( No , - 1 ) else
13167: LD_STRING No
13169: PPUSH
13170: LD_INT 1
13172: NEG
13173: PPUSH
13174: CALL_OW 101
13178: GO 13191
// AddMedal ( UpTo4 , - 1 ) ;
13180: LD_STRING UpTo4
13182: PPUSH
13183: LD_INT 1
13185: NEG
13186: PPUSH
13187: CALL_OW 101
// GiveMedals ( MAIN ) ;
13191: LD_STRING MAIN
13193: PPUSH
13194: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
13198: LD_OWVAR 67
13202: PUSH
13203: LD_INT 3
13205: GREATEREQUAL
13206: PUSH
13207: LD_VAR 0 3
13211: AND
13212: PUSH
13213: LD_VAR 0 4
13217: AND
13218: PUSH
13219: LD_VAR 0 5
13223: AND
13224: IFFALSE 13236
// SetAchievementEX ( ACH_AMER , 3 ) ;
13226: LD_STRING ACH_AMER
13228: PPUSH
13229: LD_INT 3
13231: PPUSH
13232: CALL_OW 564
// if IsDead ( Pokryshkin ) then
13236: LD_EXP 52
13240: PPUSH
13241: CALL_OW 301
13245: IFFALSE 13301
// begin stop_talking := true ;
13247: LD_ADDR_OWVAR 56
13251: PUSH
13252: LD_INT 1
13254: ST_TO_ADDR
// for i in save_group union save_others do
13255: LD_ADDR_VAR 0 2
13259: PUSH
13260: LD_EXP 23
13264: PUSH
13265: LD_EXP 22
13269: UNION
13270: PUSH
13271: FOR_IN
13272: IFFALSE 13291
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
13274: LD_VAR 0 2
13278: PPUSH
13279: LD_INT 1
13281: PPUSH
13282: LD_INT 1500
13284: PPUSH
13285: CALL_OW 591
13289: GO 13271
13291: POP
13292: POP
// stop_talking := false ;
13293: LD_ADDR_OWVAR 56
13297: PUSH
13298: LD_INT 0
13300: ST_TO_ADDR
// end ; RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_american ] ] ) ) ;
13301: LD_INT 22
13303: PUSH
13304: LD_INT 1
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PUSH
13311: LD_INT 23
13313: PUSH
13314: LD_INT 1
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PPUSH
13325: CALL_OW 69
13329: PPUSH
13330: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
13334: LD_EXP 37
13338: PPUSH
13339: LD_EXP 2
13343: PUSH
13344: LD_STRING JMM
13346: STR
13347: PPUSH
13348: CALL_OW 38
// if Bobby in save_group then
13352: LD_EXP 38
13356: PUSH
13357: LD_EXP 23
13361: IN
13362: IFFALSE 13382
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
13364: LD_EXP 38
13368: PPUSH
13369: LD_EXP 2
13373: PUSH
13374: LD_STRING Bobby
13376: STR
13377: PPUSH
13378: CALL_OW 38
// if Cyrus in save_group then
13382: LD_EXP 39
13386: PUSH
13387: LD_EXP 23
13391: IN
13392: IFFALSE 13412
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
13394: LD_EXP 39
13398: PPUSH
13399: LD_EXP 2
13403: PUSH
13404: LD_STRING Cyrus
13406: STR
13407: PPUSH
13408: CALL_OW 38
// if Lisa in save_group then
13412: LD_EXP 40
13416: PUSH
13417: LD_EXP 23
13421: IN
13422: IFFALSE 13442
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13424: LD_EXP 40
13428: PPUSH
13429: LD_EXP 2
13433: PUSH
13434: LD_STRING Lisa
13436: STR
13437: PPUSH
13438: CALL_OW 38
// if Frank in save_group then
13442: LD_EXP 51
13446: PUSH
13447: LD_EXP 23
13451: IN
13452: IFFALSE 13472
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13454: LD_EXP 51
13458: PPUSH
13459: LD_EXP 2
13463: PUSH
13464: LD_STRING Frank
13466: STR
13467: PPUSH
13468: CALL_OW 38
// if Khatam in save_group then
13472: LD_EXP 41
13476: PUSH
13477: LD_EXP 23
13481: IN
13482: IFFALSE 13502
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13484: LD_EXP 41
13488: PPUSH
13489: LD_EXP 2
13493: PUSH
13494: LD_STRING Khatam
13496: STR
13497: PPUSH
13498: CALL_OW 38
// if save_others then
13502: LD_EXP 22
13506: IFFALSE 13520
// SaveCharacters ( save_others , 03_others ) ;
13508: LD_EXP 22
13512: PPUSH
13513: LD_STRING 03_others
13515: PPUSH
13516: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13520: LD_EXP 45
13524: PUSH
13525: LD_EXP 45
13529: PPUSH
13530: CALL_OW 302
13534: AND
13535: PUSH
13536: LD_EXP 27
13540: AND
13541: IFFALSE 13553
// begin ResetFog ;
13543: CALL_OW 335
// DisplayEndingScene ;
13547: CALL 13575 0 0
// end else
13551: GO 13566
// DeleteCharacters ( mission_prefix & Cornel ) ;
13553: LD_EXP 2
13557: PUSH
13558: LD_STRING Cornel
13560: STR
13561: PPUSH
13562: CALL_OW 40
// YouWin ;
13566: CALL_OW 103
// end ;
13570: LD_VAR 0 1
13574: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13575: LD_INT 0
13577: PPUSH
13578: PPUSH
13579: PPUSH
13580: PPUSH
13581: PPUSH
13582: PPUSH
// InGameOn ;
13583: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13587: LD_INT 208
13589: PPUSH
13590: LD_INT 62
13592: PPUSH
13593: LD_INT 1
13595: PPUSH
13596: LD_INT 10
13598: NEG
13599: PPUSH
13600: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13604: LD_INT 208
13606: PPUSH
13607: LD_INT 62
13609: PPUSH
13610: LD_INT 1
13612: PPUSH
13613: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13617: LD_ADDR_VAR 0 3
13621: PUSH
13622: LD_INT 22
13624: PUSH
13625: LD_INT 3
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PUSH
13632: LD_INT 2
13634: PUSH
13635: LD_INT 21
13637: PUSH
13638: LD_INT 2
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: PUSH
13645: LD_INT 21
13647: PUSH
13648: LD_INT 1
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: LIST
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PPUSH
13664: CALL_OW 69
13668: ST_TO_ADDR
// if filter then
13669: LD_VAR 0 3
13673: IFFALSE 13701
// for i in filter do
13675: LD_ADDR_VAR 0 2
13679: PUSH
13680: LD_VAR 0 3
13684: PUSH
13685: FOR_IN
13686: IFFALSE 13699
// RemoveUnit ( i ) ;
13688: LD_VAR 0 2
13692: PPUSH
13693: CALL_OW 64
13697: GO 13685
13699: POP
13700: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13701: LD_ADDR_VAR 0 3
13705: PUSH
13706: LD_INT 22
13708: PUSH
13709: LD_INT 4
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 21
13718: PUSH
13719: LD_INT 1
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PPUSH
13730: CALL_OW 69
13734: ST_TO_ADDR
// if filter then
13735: LD_VAR 0 3
13739: IFFALSE 13770
// for i in filter do
13741: LD_ADDR_VAR 0 2
13745: PUSH
13746: LD_VAR 0 3
13750: PUSH
13751: FOR_IN
13752: IFFALSE 13768
// SetLives ( i , 0 ) ;
13754: LD_VAR 0 2
13758: PPUSH
13759: LD_INT 0
13761: PPUSH
13762: CALL_OW 234
13766: GO 13751
13768: POP
13769: POP
// uc_side := 4 ;
13770: LD_ADDR_OWVAR 20
13774: PUSH
13775: LD_INT 4
13777: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13778: LD_ADDR_VAR 0 4
13782: PUSH
13783: LD_STRING Cornell
13785: PPUSH
13786: LD_INT 0
13788: PPUSH
13789: LD_STRING 
13791: PPUSH
13792: CALL 39237 0 3
13796: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13797: LD_VAR 0 4
13801: PPUSH
13802: LD_INT 208
13804: PPUSH
13805: LD_INT 62
13807: PPUSH
13808: LD_INT 0
13810: PPUSH
13811: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13815: LD_VAR 0 4
13819: PPUSH
13820: LD_INT 100
13822: PPUSH
13823: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13827: LD_INT 3
13829: PPUSH
13830: LD_VAR 0 4
13834: PPUSH
13835: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13839: LD_INT 4
13841: PPUSH
13842: LD_INT 3
13844: PPUSH
13845: LD_INT 1
13847: PPUSH
13848: LD_INT 1
13850: PPUSH
13851: CALL_OW 80
// uc_side := 3 ;
13855: LD_ADDR_OWVAR 20
13859: PUSH
13860: LD_INT 3
13862: ST_TO_ADDR
// uc_nation := 3 ;
13863: LD_ADDR_OWVAR 21
13867: PUSH
13868: LD_INT 3
13870: ST_TO_ADDR
// InitHc ;
13871: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13875: LD_ADDR_VAR 0 5
13879: PUSH
13880: LD_STRING Mikhail
13882: PPUSH
13883: LD_INT 0
13885: PPUSH
13886: LD_STRING 
13888: PPUSH
13889: CALL 39237 0 3
13893: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13894: LD_INT 1
13896: PPUSH
13897: LD_INT 1
13899: PPUSH
13900: LD_INT 0
13902: PPUSH
13903: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13907: LD_ADDR_VAR 0 6
13911: PUSH
13912: LD_VAR 0 6
13916: PUSH
13917: CALL_OW 44
13921: ADD
13922: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13923: LD_ADDR_VAR 0 6
13927: PUSH
13928: LD_VAR 0 6
13932: PUSH
13933: CALL_OW 44
13937: ADD
13938: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13939: LD_INT 2
13941: PPUSH
13942: LD_INT 4
13944: PPUSH
13945: LD_INT 0
13947: PPUSH
13948: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13952: LD_ADDR_VAR 0 6
13956: PUSH
13957: LD_VAR 0 6
13961: PUSH
13962: CALL_OW 44
13966: ADD
13967: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13968: LD_VAR 0 5
13972: PPUSH
13973: LD_INT 17
13975: PPUSH
13976: LD_INT 0
13978: PPUSH
13979: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13983: LD_VAR 0 5
13987: PPUSH
13988: LD_INT 210
13990: PPUSH
13991: LD_INT 63
13993: PPUSH
13994: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
13998: LD_VAR 0 5
14002: PPUSH
14003: LD_INT 208
14005: PPUSH
14006: LD_INT 62
14008: PPUSH
14009: CALL_OW 178
// for i in fake_russians do
14013: LD_ADDR_VAR 0 2
14017: PUSH
14018: LD_VAR 0 6
14022: PUSH
14023: FOR_IN
14024: IFFALSE 14102
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
14026: LD_VAR 0 2
14030: PPUSH
14031: LD_INT 17
14033: PPUSH
14034: LD_INT 0
14036: PPUSH
14037: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
14041: LD_VAR 0 2
14045: PPUSH
14046: LD_INT 215
14048: PPUSH
14049: LD_INT 67
14051: PPUSH
14052: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
14056: LD_VAR 0 2
14060: PPUSH
14061: LD_INT 208
14063: PPUSH
14064: LD_INT 62
14066: PPUSH
14067: CALL_OW 178
// if GetClass ( i ) = 4 then
14071: LD_VAR 0 2
14075: PPUSH
14076: CALL_OW 257
14080: PUSH
14081: LD_INT 4
14083: EQUAL
14084: IFFALSE 14100
// ComHeal ( i , fake_cornel ) ;
14086: LD_VAR 0 2
14090: PPUSH
14091: LD_VAR 0 4
14095: PPUSH
14096: CALL_OW 128
// end ;
14100: GO 14023
14102: POP
14103: POP
// Wait ( 0 0$01 ) ;
14104: LD_INT 35
14106: PPUSH
14107: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
14111: LD_INT 208
14113: PPUSH
14114: LD_INT 62
14116: PPUSH
14117: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
14121: LD_INT 208
14123: PPUSH
14124: LD_INT 62
14126: PPUSH
14127: LD_INT 1
14129: PPUSH
14130: LD_INT 10
14132: NEG
14133: PPUSH
14134: CALL_OW 330
// Wait ( 0 0$15 ) ;
14138: LD_INT 525
14140: PPUSH
14141: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
14145: LD_INT 208
14147: PPUSH
14148: LD_INT 62
14150: PPUSH
14151: LD_INT 1
14153: PPUSH
14154: CALL_OW 331
// ResetFog ;
14158: CALL_OW 335
// InGameOff ;
14162: CALL_OW 9
// end ;
14166: LD_VAR 0 1
14170: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
14171: LD_INT 10
14173: PPUSH
14174: LD_INT 22
14176: PUSH
14177: LD_INT 1
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PPUSH
14184: CALL_OW 70
14188: PUSH
14189: LD_EXP 44
14193: PPUSH
14194: CALL_OW 302
14198: AND
14199: PUSH
14200: LD_INT 22
14202: PUSH
14203: LD_INT 1
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PPUSH
14210: CALL_OW 69
14214: PPUSH
14215: LD_EXP 44
14219: PPUSH
14220: CALL_OW 74
14224: PPUSH
14225: LD_EXP 44
14229: PPUSH
14230: CALL_OW 296
14234: PUSH
14235: LD_INT 30
14237: LESS
14238: OR
14239: IFFALSE 14290
14241: GO 14243
14243: DISABLE
// begin enable ;
14244: ENABLE
// powell_warn := powell_warn + 1 ;
14245: LD_ADDR_EXP 35
14249: PUSH
14250: LD_EXP 35
14254: PUSH
14255: LD_INT 1
14257: PLUS
14258: ST_TO_ADDR
// if powell_warn = 3 then
14259: LD_EXP 35
14263: PUSH
14264: LD_INT 3
14266: EQUAL
14267: IFFALSE 14278
// begin YouLost ( 5 ) ;
14269: LD_STRING 5
14271: PPUSH
14272: CALL_OW 104
// exit ;
14276: GO 14290
// end ; SayRadioNoFace ( Powell , DWarn-Pow-1 ) ;
14278: LD_EXP 46
14282: PPUSH
14283: LD_STRING DWarn-Pow-1
14285: PPUSH
14286: CALL_OW 586
// end ; end_of_file
14290: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
14291: LD_EXP 8
14295: IFFALSE 16132
14297: GO 14299
14299: DISABLE
14300: LD_INT 0
14302: PPUSH
14303: PPUSH
14304: PPUSH
14305: PPUSH
14306: PPUSH
14307: PPUSH
14308: PPUSH
14309: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
14310: LD_EXP 44
14314: PUSH
14315: LD_EXP 45
14319: ADD
14320: PUSH
14321: LD_EXP 6
14325: ADD
14326: PPUSH
14327: LD_INT 250
14329: PPUSH
14330: LD_INT 120
14332: PPUSH
14333: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
14337: LD_ADDR_VAR 0 2
14341: PUSH
14342: LD_EXP 6
14346: PPUSH
14347: LD_INT 25
14349: PUSH
14350: LD_INT 2
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PPUSH
14357: CALL_OW 72
14361: PUSH
14362: LD_EXP 45
14366: DIFF
14367: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
14368: LD_ADDR_VAR 0 3
14372: PUSH
14373: LD_EXP 6
14377: PPUSH
14378: LD_INT 21
14380: PUSH
14381: LD_INT 1
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PPUSH
14388: CALL_OW 72
14392: PUSH
14393: LD_VAR 0 2
14397: DIFF
14398: ST_TO_ADDR
// if not has_eng then
14399: LD_VAR 0 2
14403: NOT
14404: IFFALSE 14487
// begin uc_side := 4 ;
14406: LD_ADDR_OWVAR 20
14410: PUSH
14411: LD_INT 4
14413: ST_TO_ADDR
// uc_nation := 1 ;
14414: LD_ADDR_OWVAR 21
14418: PUSH
14419: LD_INT 1
14421: ST_TO_ADDR
// bc_type := b_depot ;
14422: LD_ADDR_OWVAR 42
14426: PUSH
14427: LD_INT 0
14429: ST_TO_ADDR
// bc_level := 2 ;
14430: LD_ADDR_OWVAR 43
14434: PUSH
14435: LD_INT 2
14437: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14438: LD_ADDR_VAR 0 4
14442: PUSH
14443: LD_INT 264
14445: PPUSH
14446: LD_INT 120
14448: PPUSH
14449: LD_INT 4
14451: PPUSH
14452: CALL_OW 47
14456: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14457: LD_INT 264
14459: PPUSH
14460: LD_INT 120
14462: PPUSH
14463: LD_INT 4
14465: PPUSH
14466: LD_INT 10
14468: NEG
14469: PPUSH
14470: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14474: LD_INT 264
14476: PPUSH
14477: LD_INT 120
14479: PPUSH
14480: LD_INT 4
14482: PPUSH
14483: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14487: LD_INT 35
14489: PPUSH
14490: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14494: LD_EXP 44
14498: PPUSH
14499: LD_INT 10
14501: PPUSH
14502: CALL_OW 308
14506: PUSH
14507: LD_EXP 44
14511: PPUSH
14512: CALL_OW 310
14516: PPUSH
14517: LD_INT 10
14519: PPUSH
14520: CALL_OW 308
14524: OR
14525: IFFALSE 14487
// if has_eng and not dep then
14527: LD_VAR 0 2
14531: PUSH
14532: LD_VAR 0 4
14536: NOT
14537: AND
14538: IFFALSE 14688
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14540: LD_VAR 0 2
14544: PPUSH
14545: LD_INT 0
14547: PPUSH
14548: LD_INT 264
14550: PPUSH
14551: LD_INT 120
14553: PPUSH
14554: LD_INT 4
14556: PPUSH
14557: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14561: LD_INT 35
14563: PPUSH
14564: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14568: LD_INT 22
14570: PUSH
14571: LD_INT 4
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PUSH
14578: LD_INT 30
14580: PUSH
14581: LD_INT 0
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PPUSH
14592: CALL_OW 69
14596: IFFALSE 14561
// ComMoveXY ( filter , 264 , 120 ) ;
14598: LD_VAR 0 3
14602: PPUSH
14603: LD_INT 264
14605: PPUSH
14606: LD_INT 120
14608: PPUSH
14609: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14613: LD_INT 35
14615: PPUSH
14616: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14620: LD_INT 22
14622: PUSH
14623: LD_INT 4
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: LD_INT 30
14632: PUSH
14633: LD_INT 0
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: LD_INT 3
14642: PUSH
14643: LD_INT 57
14645: PUSH
14646: EMPTY
14647: LIST
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: LIST
14657: PPUSH
14658: CALL_OW 69
14662: IFFALSE 14613
// ComMoveXY ( filter , 247 , 113 ) ;
14664: LD_VAR 0 3
14668: PPUSH
14669: LD_INT 247
14671: PPUSH
14672: LD_INT 113
14674: PPUSH
14675: CALL_OW 111
// Wait ( 0 0$2 ) ;
14679: LD_INT 70
14681: PPUSH
14682: CALL_OW 67
// end else
14686: GO 14700
// begin SetSide ( dep , 4 ) ;
14688: LD_VAR 0 4
14692: PPUSH
14693: LD_INT 4
14695: PPUSH
14696: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14700: LD_ADDR_VAR 0 4
14704: PUSH
14705: LD_INT 22
14707: PUSH
14708: LD_INT 4
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 30
14717: PUSH
14718: LD_INT 0
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PPUSH
14729: CALL_OW 69
14733: PUSH
14734: LD_INT 1
14736: ARRAY
14737: ST_TO_ADDR
// if not has_eng then
14738: LD_VAR 0 2
14742: NOT
14743: IFFALSE 14830
// for i = 1 to 2 do
14745: LD_ADDR_VAR 0 1
14749: PUSH
14750: DOUBLE
14751: LD_INT 1
14753: DEC
14754: ST_TO_ADDR
14755: LD_INT 2
14757: PUSH
14758: FOR_TO
14759: IFFALSE 14828
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14761: LD_VAR 0 3
14765: PUSH
14766: LD_INT 1
14768: ARRAY
14769: PPUSH
14770: LD_VAR 0 4
14774: PPUSH
14775: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14779: LD_VAR 0 3
14783: PUSH
14784: LD_INT 1
14786: ARRAY
14787: PPUSH
14788: LD_INT 2
14790: PPUSH
14791: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14795: LD_VAR 0 3
14799: PUSH
14800: LD_INT 1
14802: ARRAY
14803: PPUSH
14804: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14808: LD_ADDR_VAR 0 3
14812: PUSH
14813: LD_VAR 0 3
14817: PPUSH
14818: LD_INT 1
14820: PPUSH
14821: CALL_OW 3
14825: ST_TO_ADDR
// end ;
14826: GO 14758
14828: POP
14829: POP
// if IsInUnit ( Cornel ) then
14830: LD_EXP 44
14834: PPUSH
14835: CALL_OW 310
14839: IFFALSE 14917
// begin cargo := IsInUnit ( Cornel ) ;
14841: LD_ADDR_VAR 0 7
14845: PUSH
14846: LD_EXP 44
14850: PPUSH
14851: CALL_OW 310
14855: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14856: LD_VAR 0 7
14860: PPUSH
14861: LD_INT 1
14863: PPUSH
14864: CALL_OW 289
14868: IFFALSE 14879
// ComUnload ( cargo ) ;
14870: LD_VAR 0 7
14874: PPUSH
14875: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14879: LD_EXP 44
14883: PPUSH
14884: LD_INT 235
14886: PPUSH
14887: LD_INT 122
14889: PPUSH
14890: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14894: LD_EXP 44
14898: PPUSH
14899: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14903: LD_EXP 44
14907: PPUSH
14908: LD_VAR 0 4
14912: PPUSH
14913: CALL_OW 180
// end ; if Bierezov then
14917: LD_EXP 45
14921: IFFALSE 14969
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14923: LD_EXP 45
14927: PPUSH
14928: LD_INT 260
14930: PPUSH
14931: LD_INT 120
14933: PPUSH
14934: CALL_OW 111
// if dep then
14938: LD_VAR 0 4
14942: IFFALSE 14960
// AddComEnterUnit ( Bierezov , dep ) else
14944: LD_EXP 45
14948: PPUSH
14949: LD_VAR 0 4
14953: PPUSH
14954: CALL_OW 180
14958: GO 14969
// AddComHold ( Bierezov ) ;
14960: LD_EXP 45
14964: PPUSH
14965: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14969: LD_INT 525
14971: PPUSH
14972: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14976: LD_ADDR_VAR 0 2
14980: PUSH
14981: LD_INT 22
14983: PUSH
14984: LD_INT 4
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: LD_INT 25
14993: PUSH
14994: LD_INT 2
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PPUSH
15005: CALL_OW 69
15009: PUSH
15010: LD_EXP 45
15014: DIFF
15015: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15016: LD_INT 35
15018: PPUSH
15019: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
15023: LD_ADDR_VAR 0 6
15027: PUSH
15028: LD_INT 10
15030: PPUSH
15031: CALL_OW 435
15035: ST_TO_ADDR
// if crates then
15036: LD_VAR 0 6
15040: IFFALSE 15069
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
15042: LD_VAR 0 2
15046: PPUSH
15047: LD_VAR 0 6
15051: PUSH
15052: LD_INT 1
15054: ARRAY
15055: PPUSH
15056: LD_VAR 0 6
15060: PUSH
15061: LD_INT 2
15063: ARRAY
15064: PPUSH
15065: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
15069: LD_VAR 0 4
15073: PPUSH
15074: CALL_OW 274
15078: PPUSH
15079: LD_INT 1
15081: PPUSH
15082: CALL_OW 275
15086: PUSH
15087: LD_INT 40
15089: GREATEREQUAL
15090: IFFALSE 15016
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
15092: LD_ADDR_VAR 0 5
15096: PUSH
15097: LD_INT 4
15099: PUSH
15100: LD_INT 256
15102: PUSH
15103: LD_INT 111
15105: PUSH
15106: LD_INT 2
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: PUSH
15115: LD_INT 31
15117: PUSH
15118: LD_INT 243
15120: PUSH
15121: LD_INT 112
15123: PUSH
15124: LD_INT 2
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 31
15135: PUSH
15136: LD_INT 254
15138: PUSH
15139: LD_INT 114
15141: PUSH
15142: LD_INT 2
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: LIST
15155: ST_TO_ADDR
// for i in blist do
15156: LD_ADDR_VAR 0 1
15160: PUSH
15161: LD_VAR 0 5
15165: PUSH
15166: FOR_IN
15167: IFFALSE 15216
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
15169: LD_VAR 0 2
15173: PPUSH
15174: LD_VAR 0 1
15178: PUSH
15179: LD_INT 1
15181: ARRAY
15182: PPUSH
15183: LD_VAR 0 1
15187: PUSH
15188: LD_INT 2
15190: ARRAY
15191: PPUSH
15192: LD_VAR 0 1
15196: PUSH
15197: LD_INT 3
15199: ARRAY
15200: PPUSH
15201: LD_VAR 0 1
15205: PUSH
15206: LD_INT 4
15208: ARRAY
15209: PPUSH
15210: CALL_OW 205
15214: GO 15166
15216: POP
15217: POP
// repeat wait ( 0 0$01 ) ;
15218: LD_INT 35
15220: PPUSH
15221: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
15225: LD_INT 22
15227: PUSH
15228: LD_INT 4
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PUSH
15235: LD_INT 30
15237: PUSH
15238: LD_INT 4
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PUSH
15245: LD_INT 3
15247: PUSH
15248: LD_INT 57
15250: PUSH
15251: EMPTY
15252: LIST
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: LIST
15262: PPUSH
15263: CALL_OW 69
15267: IFFALSE 15218
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15269: LD_VAR 0 3
15273: PPUSH
15274: LD_INT 22
15276: PUSH
15277: LD_INT 4
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 30
15286: PUSH
15287: LD_INT 4
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PPUSH
15298: CALL_OW 69
15302: PUSH
15303: LD_INT 1
15305: ARRAY
15306: PPUSH
15307: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
15311: LD_VAR 0 3
15315: PPUSH
15316: LD_INT 1
15318: PPUSH
15319: CALL_OW 183
// if has_eng > 1 then
15323: LD_VAR 0 2
15327: PUSH
15328: LD_INT 1
15330: GREATER
15331: IFFALSE 15473
// for i = has_eng downto 2 do
15333: LD_ADDR_VAR 0 1
15337: PUSH
15338: DOUBLE
15339: LD_VAR 0 2
15343: INC
15344: ST_TO_ADDR
15345: LD_INT 2
15347: PUSH
15348: FOR_DOWNTO
15349: IFFALSE 15471
// begin if IsInUnit ( has_eng [ i ] ) then
15351: LD_VAR 0 2
15355: PUSH
15356: LD_VAR 0 1
15360: ARRAY
15361: PPUSH
15362: CALL_OW 310
15366: IFFALSE 15383
// ComExitBuilding ( has_eng [ i ] ) ;
15368: LD_VAR 0 2
15372: PUSH
15373: LD_VAR 0 1
15377: ARRAY
15378: PPUSH
15379: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15383: LD_VAR 0 2
15387: PUSH
15388: LD_VAR 0 1
15392: ARRAY
15393: PPUSH
15394: LD_INT 22
15396: PUSH
15397: LD_INT 4
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: LD_INT 30
15406: PUSH
15407: LD_INT 4
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PPUSH
15418: CALL_OW 69
15422: PUSH
15423: LD_INT 1
15425: ARRAY
15426: PPUSH
15427: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15431: LD_VAR 0 2
15435: PUSH
15436: LD_VAR 0 1
15440: ARRAY
15441: PPUSH
15442: LD_INT 1
15444: PPUSH
15445: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15449: LD_ADDR_VAR 0 2
15453: PUSH
15454: LD_VAR 0 2
15458: PPUSH
15459: LD_VAR 0 1
15463: PPUSH
15464: CALL_OW 3
15468: ST_TO_ADDR
// end ;
15469: GO 15348
15471: POP
15472: POP
// repeat wait ( 0 0$01 ) ;
15473: LD_INT 35
15475: PPUSH
15476: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15480: LD_INT 22
15482: PUSH
15483: LD_INT 4
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: LD_INT 30
15492: PUSH
15493: LD_INT 31
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: LD_INT 3
15502: PUSH
15503: LD_INT 57
15505: PUSH
15506: EMPTY
15507: LIST
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: LIST
15517: PPUSH
15518: CALL_OW 69
15522: PUSH
15523: LD_INT 1
15525: GREATER
15526: IFFALSE 15473
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15528: LD_ADDR_VAR 0 8
15532: PUSH
15533: LD_EXP 6
15537: PPUSH
15538: LD_INT 25
15540: PUSH
15541: LD_INT 1
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PPUSH
15548: CALL_OW 72
15552: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15553: LD_ADDR_VAR 0 1
15557: PUSH
15558: DOUBLE
15559: LD_INT 1
15561: DEC
15562: ST_TO_ADDR
15563: LD_INT 22
15565: PUSH
15566: LD_INT 4
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PUSH
15573: LD_INT 30
15575: PUSH
15576: LD_INT 31
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 3
15585: PUSH
15586: LD_INT 57
15588: PUSH
15589: EMPTY
15590: LIST
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: LIST
15600: PPUSH
15601: CALL_OW 69
15605: PUSH
15606: FOR_TO
15607: IFFALSE 15691
// begin if not sol [ i ] then
15609: LD_VAR 0 8
15613: PUSH
15614: LD_VAR 0 1
15618: ARRAY
15619: NOT
15620: IFFALSE 15624
// break ;
15622: GO 15691
// ComExitBuilding ( sol [ i ] ) ;
15624: LD_VAR 0 8
15628: PUSH
15629: LD_VAR 0 1
15633: ARRAY
15634: PPUSH
15635: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15639: LD_VAR 0 8
15643: PUSH
15644: LD_VAR 0 1
15648: ARRAY
15649: PPUSH
15650: LD_INT 22
15652: PUSH
15653: LD_INT 4
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: LD_INT 30
15662: PUSH
15663: LD_INT 31
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PPUSH
15674: CALL_OW 69
15678: PUSH
15679: LD_VAR 0 1
15683: ARRAY
15684: PPUSH
15685: CALL_OW 180
// end ;
15689: GO 15606
15691: POP
15692: POP
// if sol > 3 then
15693: LD_VAR 0 8
15697: PUSH
15698: LD_INT 3
15700: GREATER
15701: IFFALSE 15818
// begin ComExitBuilding ( sol [ 3 ] ) ;
15703: LD_VAR 0 8
15707: PUSH
15708: LD_INT 3
15710: ARRAY
15711: PPUSH
15712: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15716: LD_VAR 0 8
15720: PUSH
15721: LD_INT 3
15723: ARRAY
15724: PPUSH
15725: LD_INT 246
15727: PPUSH
15728: LD_INT 94
15730: PPUSH
15731: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15735: LD_VAR 0 8
15739: PUSH
15740: LD_INT 3
15742: ARRAY
15743: PPUSH
15744: LD_INT 175
15746: PPUSH
15747: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15751: LD_VAR 0 8
15755: PUSH
15756: LD_INT 3
15758: ARRAY
15759: PPUSH
15760: LD_INT 224
15762: PPUSH
15763: LD_INT 90
15765: PPUSH
15766: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15770: LD_VAR 0 8
15774: PUSH
15775: LD_INT 3
15777: ARRAY
15778: PPUSH
15779: LD_INT 245
15781: PPUSH
15782: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15786: LD_VAR 0 8
15790: PUSH
15791: LD_INT 3
15793: ARRAY
15794: PPUSH
15795: LD_INT 223
15797: PPUSH
15798: LD_INT 110
15800: PPUSH
15801: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15805: LD_VAR 0 8
15809: PUSH
15810: LD_INT 3
15812: ARRAY
15813: PPUSH
15814: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15818: LD_VAR 0 2
15822: PPUSH
15823: LD_VAR 0 4
15827: PPUSH
15828: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15832: LD_INT 22
15834: PUSH
15835: LD_INT 4
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: LD_INT 30
15844: PUSH
15845: LD_INT 4
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PPUSH
15856: CALL_OW 69
15860: PUSH
15861: LD_INT 1
15863: ARRAY
15864: PPUSH
15865: CALL_OW 313
15869: PUSH
15870: LD_INT 6
15872: LESS
15873: IFFALSE 15937
// begin if IsInUnit ( Cornel ) then
15875: LD_EXP 44
15879: PPUSH
15880: CALL_OW 310
15884: IFFALSE 15895
// ComExitBuilding ( Cornel ) ;
15886: LD_EXP 44
15890: PPUSH
15891: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15895: LD_EXP 44
15899: PPUSH
15900: LD_INT 22
15902: PUSH
15903: LD_INT 4
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 30
15912: PUSH
15913: LD_INT 4
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PPUSH
15924: CALL_OW 69
15928: PUSH
15929: LD_INT 1
15931: ARRAY
15932: PPUSH
15933: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15937: LD_INT 35
15939: PPUSH
15940: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15944: LD_ADDR_VAR 0 3
15948: PUSH
15949: LD_INT 22
15951: PUSH
15952: LD_INT 4
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 21
15961: PUSH
15962: LD_INT 3
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: LD_INT 3
15971: PUSH
15972: LD_INT 24
15974: PUSH
15975: LD_INT 1000
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: LIST
15990: PPUSH
15991: CALL_OW 69
15995: ST_TO_ADDR
// if filter and has_eng then
15996: LD_VAR 0 3
16000: PUSH
16001: LD_VAR 0 2
16005: AND
16006: IFFALSE 16072
// begin for i in has_eng do
16008: LD_ADDR_VAR 0 1
16012: PUSH
16013: LD_VAR 0 2
16017: PUSH
16018: FOR_IN
16019: IFFALSE 16068
// begin if IsInUnit ( i ) then
16021: LD_VAR 0 1
16025: PPUSH
16026: CALL_OW 310
16030: IFFALSE 16041
// ComExitBuilding ( i ) ;
16032: LD_VAR 0 1
16036: PPUSH
16037: CALL_OW 122
// Wait ( 3 ) ;
16041: LD_INT 3
16043: PPUSH
16044: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
16048: LD_VAR 0 1
16052: PPUSH
16053: LD_VAR 0 3
16057: PUSH
16058: LD_INT 1
16060: ARRAY
16061: PPUSH
16062: CALL_OW 130
// end ;
16066: GO 16018
16068: POP
16069: POP
// end else
16070: GO 16126
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
16072: LD_VAR 0 2
16076: PUSH
16077: LD_VAR 0 2
16081: PPUSH
16082: LD_INT 56
16084: PUSH
16085: EMPTY
16086: LIST
16087: PPUSH
16088: CALL_OW 72
16092: AND
16093: IFFALSE 16126
// for i in has_eng do
16095: LD_ADDR_VAR 0 1
16099: PUSH
16100: LD_VAR 0 2
16104: PUSH
16105: FOR_IN
16106: IFFALSE 16124
// ComEnterUnit ( i , dep ) ;
16108: LD_VAR 0 1
16112: PPUSH
16113: LD_VAR 0 4
16117: PPUSH
16118: CALL_OW 120
16122: GO 16105
16124: POP
16125: POP
// until cornel_prepared ;
16126: LD_EXP 11
16130: IFFALSE 15937
// end ;
16132: PPOPN 8
16134: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
16135: LD_EXP 11
16139: IFFALSE 16575
16141: GO 16143
16143: DISABLE
16144: LD_INT 0
16146: PPUSH
16147: PPUSH
16148: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
16149: LD_ADDR_VAR 0 2
16153: PUSH
16154: LD_INT 22
16156: PUSH
16157: LD_INT 4
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 30
16166: PUSH
16167: LD_INT 4
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PPUSH
16178: CALL_OW 69
16182: PUSH
16183: LD_INT 1
16185: ARRAY
16186: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
16187: LD_EXP 6
16191: PPUSH
16192: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
16196: LD_EXP 45
16200: PUSH
16201: LD_EXP 45
16205: PPUSH
16206: CALL_OW 310
16210: AND
16211: IFFALSE 16222
// ComExitBuilding ( Bierezov ) ;
16213: LD_EXP 45
16217: PPUSH
16218: CALL_OW 122
// Wait ( 0 0$03 ) ;
16222: LD_INT 105
16224: PPUSH
16225: CALL_OW 67
// for i in cornel_units do
16229: LD_ADDR_VAR 0 1
16233: PUSH
16234: LD_EXP 6
16238: PUSH
16239: FOR_IN
16240: IFFALSE 16316
// begin if GetClass ( i ) in [ 2 , 3 ] then
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 257
16251: PUSH
16252: LD_INT 2
16254: PUSH
16255: LD_INT 3
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: IN
16262: IFFALSE 16299
// begin ComEnterUnit ( i , arm ) ;
16264: LD_VAR 0 1
16268: PPUSH
16269: LD_VAR 0 2
16273: PPUSH
16274: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
16278: LD_VAR 0 1
16282: PPUSH
16283: LD_INT 1
16285: PPUSH
16286: CALL_OW 183
// AddComExitBuilding ( i ) ;
16290: LD_VAR 0 1
16294: PPUSH
16295: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
16299: LD_VAR 0 1
16303: PPUSH
16304: LD_INT 257
16306: PPUSH
16307: LD_INT 121
16309: PPUSH
16310: CALL_OW 171
// end ;
16314: GO 16239
16316: POP
16317: POP
// Wait ( 1 1$00 ) ;
16318: LD_INT 2100
16320: PPUSH
16321: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
16325: LD_ADDR_VAR 0 3
16329: PUSH
16330: LD_EXP 44
16334: PUSH
16335: LD_EXP 45
16339: ADD
16340: PUSH
16341: LD_EXP 6
16345: ADD
16346: PUSH
16347: LD_EXP 6
16351: PPUSH
16352: LD_INT 21
16354: PUSH
16355: LD_INT 2
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PPUSH
16362: CALL_OW 72
16366: DIFF
16367: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
16368: LD_VAR 0 3
16372: PPUSH
16373: LD_INT 248
16375: PPUSH
16376: LD_INT 85
16378: PPUSH
16379: CALL_OW 111
// AddComHold ( filter ) ;
16383: LD_VAR 0 3
16387: PPUSH
16388: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
16392: LD_INT 35
16394: PPUSH
16395: CALL_OW 67
// until cornel_attack ;
16399: LD_EXP 9
16403: IFFALSE 16392
// ComAgressiveMove ( filter , 209 , 63 ) ;
16405: LD_VAR 0 3
16409: PPUSH
16410: LD_INT 209
16412: PPUSH
16413: LD_INT 63
16415: PPUSH
16416: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16420: LD_EXP 44
16424: PPUSH
16425: LD_INT 208
16427: PPUSH
16428: LD_INT 62
16430: PPUSH
16431: CALL_OW 114
// AddComHold ( Cornel ) ;
16435: LD_EXP 44
16439: PPUSH
16440: CALL_OW 200
// if Bierezov then
16444: LD_EXP 45
16448: IFFALSE 16538
// begin filter := filter diff Bierezov ;
16450: LD_ADDR_VAR 0 3
16454: PUSH
16455: LD_VAR 0 3
16459: PUSH
16460: LD_EXP 45
16464: DIFF
16465: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16466: LD_EXP 45
16470: PPUSH
16471: LD_INT 6
16473: PPUSH
16474: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16478: LD_EXP 45
16482: PPUSH
16483: LD_INT 235
16485: PPUSH
16486: LD_INT 60
16488: PPUSH
16489: CALL_OW 111
// AddComHold ( Bierezov ) ;
16493: LD_EXP 45
16497: PPUSH
16498: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16502: LD_EXP 45
16506: PPUSH
16507: LD_INT 350
16509: PPUSH
16510: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16514: LD_EXP 45
16518: PPUSH
16519: LD_INT 198
16521: PPUSH
16522: LD_INT 28
16524: PPUSH
16525: CALL_OW 171
// AddComHold ( Bierezov ) ;
16529: LD_EXP 45
16533: PPUSH
16534: CALL_OW 200
// end ; repeat wait ( 0 0$2 ) ;
16538: LD_INT 70
16540: PPUSH
16541: CALL_OW 67
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16545: LD_EXP 44
16549: PPUSH
16550: LD_INT 208
16552: PPUSH
16553: LD_INT 62
16555: PPUSH
16556: CALL_OW 114
// until not IsInArea ( Cornel , cornelKappaArea ) ;
16560: LD_EXP 44
16564: PPUSH
16565: LD_INT 16
16567: PPUSH
16568: CALL_OW 308
16572: NOT
16573: IFFALSE 16538
// end ; end_of_file
16575: PPOPN 3
16577: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16578: LD_EXP 53
16582: PUSH
16583: LD_EXP 31
16587: NOT
16588: AND
16589: PUSH
16590: LD_EXP 32
16594: NOT
16595: AND
16596: IFFALSE 17046
16598: GO 16600
16600: DISABLE
16601: LD_INT 0
16603: PPUSH
16604: PPUSH
16605: PPUSH
16606: PPUSH
// begin enable ;
16607: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16608: LD_ADDR_VAR 0 4
16612: PUSH
16613: LD_INT 81
16615: PUSH
16616: LD_INT 3
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PPUSH
16623: CALL_OW 69
16627: ST_TO_ADDR
// for i = 1 to ru_patrol do
16628: LD_ADDR_VAR 0 2
16632: PUSH
16633: DOUBLE
16634: LD_INT 1
16636: DEC
16637: ST_TO_ADDR
16638: LD_EXP 53
16642: PUSH
16643: FOR_TO
16644: IFFALSE 17044
// begin un := ru_patrol [ i ] ;
16646: LD_ADDR_VAR 0 1
16650: PUSH
16651: LD_EXP 53
16655: PUSH
16656: LD_VAR 0 2
16660: ARRAY
16661: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16662: LD_VAR 0 1
16666: PPUSH
16667: LD_INT 13
16669: PPUSH
16670: CALL_OW 308
16674: IFFALSE 16779
// begin if not ru_alert then
16676: LD_EXP 60
16680: NOT
16681: IFFALSE 16691
// ru_alert := true ;
16683: LD_ADDR_EXP 60
16687: PUSH
16688: LD_INT 1
16690: ST_TO_ADDR
// if not See ( 1 , un ) then
16691: LD_INT 1
16693: PPUSH
16694: LD_VAR 0 1
16698: PPUSH
16699: CALL_OW 292
16703: NOT
16704: IFFALSE 16718
// SetLives ( un , 1000 ) ;
16706: LD_VAR 0 1
16710: PPUSH
16711: LD_INT 1000
16713: PPUSH
16714: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16718: LD_ADDR_EXP 53
16722: PUSH
16723: LD_EXP 53
16727: PUSH
16728: LD_VAR 0 1
16732: DIFF
16733: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16734: LD_VAR 0 1
16738: PPUSH
16739: LD_INT 22
16741: PUSH
16742: LD_INT 3
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: LD_INT 30
16751: PUSH
16752: LD_INT 4
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PPUSH
16763: CALL_OW 69
16767: PPUSH
16768: CALL 1007 0 1
16772: PPUSH
16773: CALL_OW 120
// continue ;
16777: GO 16643
// end ; if IsOk ( un ) and not HasTask ( un ) then
16779: LD_VAR 0 1
16783: PPUSH
16784: CALL_OW 302
16788: PUSH
16789: LD_VAR 0 1
16793: PPUSH
16794: CALL_OW 314
16798: NOT
16799: AND
16800: IFFALSE 16893
// begin for j = 1 to ru_firepoints_south [ i ] do
16802: LD_ADDR_VAR 0 3
16806: PUSH
16807: DOUBLE
16808: LD_INT 1
16810: DEC
16811: ST_TO_ADDR
16812: LD_EXP 59
16816: PUSH
16817: LD_VAR 0 2
16821: ARRAY
16822: PUSH
16823: FOR_TO
16824: IFFALSE 16891
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16826: LD_VAR 0 1
16830: PPUSH
16831: LD_EXP 59
16835: PUSH
16836: LD_VAR 0 2
16840: ARRAY
16841: PUSH
16842: LD_VAR 0 3
16846: ARRAY
16847: PUSH
16848: LD_INT 1
16850: ARRAY
16851: PPUSH
16852: LD_EXP 59
16856: PUSH
16857: LD_VAR 0 2
16861: ARRAY
16862: PUSH
16863: LD_VAR 0 3
16867: ARRAY
16868: PUSH
16869: LD_INT 2
16871: ARRAY
16872: PPUSH
16873: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16877: LD_VAR 0 1
16881: PPUSH
16882: LD_INT 70
16884: PPUSH
16885: CALL_OW 202
// end ;
16889: GO 16823
16891: POP
16892: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16893: LD_VAR 0 1
16897: PPUSH
16898: CALL_OW 256
16902: PUSH
16903: LD_INT 700
16905: LESS
16906: PUSH
16907: LD_VAR 0 1
16911: PPUSH
16912: LD_INT 13
16914: PPUSH
16915: CALL_OW 308
16919: NOT
16920: AND
16921: IFFALSE 16973
// begin ComMoveToArea ( un , retreatArea ) ;
16923: LD_VAR 0 1
16927: PPUSH
16928: LD_INT 13
16930: PPUSH
16931: CALL_OW 113
// if not ru_alert_xy then
16935: LD_EXP 61
16939: NOT
16940: IFFALSE 16971
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16942: LD_ADDR_EXP 61
16946: PUSH
16947: LD_VAR 0 1
16951: PPUSH
16952: CALL_OW 250
16956: PUSH
16957: LD_VAR 0 1
16961: PPUSH
16962: CALL_OW 251
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: ST_TO_ADDR
// end else
16971: GO 17042
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16973: LD_VAR 0 1
16977: PPUSH
16978: LD_VAR 0 4
16982: PPUSH
16983: LD_VAR 0 1
16987: PPUSH
16988: CALL_OW 74
16992: PPUSH
16993: CALL_OW 296
16997: PUSH
16998: LD_INT 9
17000: LESS
17001: PUSH
17002: LD_VAR 0 1
17006: PPUSH
17007: CALL_OW 256
17011: PUSH
17012: LD_INT 500
17014: GREATER
17015: AND
17016: IFFALSE 17042
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17018: LD_VAR 0 1
17022: PPUSH
17023: LD_VAR 0 4
17027: PPUSH
17028: LD_VAR 0 1
17032: PPUSH
17033: CALL_OW 74
17037: PPUSH
17038: CALL_OW 115
// end ;
17042: GO 16643
17044: POP
17045: POP
// end ;
17046: PPOPN 4
17048: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
17049: LD_EXP 60
17053: PUSH
17054: LD_EXP 61
17058: AND
17059: PUSH
17060: LD_EXP 31
17064: NOT
17065: AND
17066: PUSH
17067: LD_EXP 32
17071: NOT
17072: AND
17073: IFFALSE 17283
17075: GO 17077
17077: DISABLE
17078: LD_INT 0
17080: PPUSH
17081: PPUSH
// begin enable ;
17082: ENABLE
// if not ru_vehicles then
17083: LD_EXP 56
17087: NOT
17088: IFFALSE 17092
// exit ;
17090: GO 17283
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17092: LD_ADDR_VAR 0 2
17096: PUSH
17097: LD_INT 81
17099: PUSH
17100: LD_INT 3
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PPUSH
17107: CALL_OW 69
17111: ST_TO_ADDR
// if ru_vehicles then
17112: LD_EXP 56
17116: IFFALSE 17283
// begin for i in ru_vehicles do
17118: LD_ADDR_VAR 0 1
17122: PUSH
17123: LD_EXP 56
17127: PUSH
17128: FOR_IN
17129: IFFALSE 17281
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
17131: LD_VAR 0 1
17135: PPUSH
17136: CALL_OW 302
17140: PUSH
17141: LD_VAR 0 1
17145: PPUSH
17146: LD_VAR 0 2
17150: PPUSH
17151: LD_VAR 0 1
17155: PPUSH
17156: CALL_OW 74
17160: PPUSH
17161: CALL_OW 296
17165: PUSH
17166: LD_INT 9
17168: LESS
17169: AND
17170: IFFALSE 17196
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17172: LD_VAR 0 1
17176: PPUSH
17177: LD_VAR 0 2
17181: PPUSH
17182: LD_VAR 0 1
17186: PPUSH
17187: CALL_OW 74
17191: PPUSH
17192: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
17196: LD_VAR 0 1
17200: PPUSH
17201: CALL_OW 314
17205: NOT
17206: PUSH
17207: LD_VAR 0 1
17211: PPUSH
17212: CALL_OW 302
17216: AND
17217: PUSH
17218: LD_VAR 0 1
17222: PPUSH
17223: LD_EXP 61
17227: PUSH
17228: LD_INT 1
17230: ARRAY
17231: PPUSH
17232: LD_EXP 61
17236: PUSH
17237: LD_INT 2
17239: ARRAY
17240: PPUSH
17241: CALL_OW 297
17245: PUSH
17246: LD_INT 10
17248: GREATER
17249: AND
17250: IFFALSE 17279
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
17252: LD_VAR 0 1
17256: PPUSH
17257: LD_EXP 61
17261: PUSH
17262: LD_INT 1
17264: ARRAY
17265: PPUSH
17266: LD_EXP 61
17270: PUSH
17271: LD_INT 2
17273: ARRAY
17274: PPUSH
17275: CALL_OW 114
// end ;
17279: GO 17128
17281: POP
17282: POP
// end ; end ;
17283: PPOPN 2
17285: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
17286: LD_EXP 61
17290: PUSH
17291: LD_EXP 60
17295: AND
17296: PUSH
17297: LD_INT 3
17299: PPUSH
17300: CALL_OW 463
17304: NOT
17305: AND
17306: PUSH
17307: LD_EXP 31
17311: NOT
17312: AND
17313: PUSH
17314: LD_EXP 32
17318: NOT
17319: AND
17320: IFFALSE 17415
17322: GO 17324
17324: DISABLE
17325: LD_INT 0
17327: PPUSH
// begin enable ;
17328: ENABLE
// ru_alert_xy := false ;
17329: LD_ADDR_EXP 61
17333: PUSH
17334: LD_INT 0
17336: ST_TO_ADDR
// ru_alert := false ;
17337: LD_ADDR_EXP 60
17341: PUSH
17342: LD_INT 0
17344: ST_TO_ADDR
// if ru_vehicles then
17345: LD_EXP 56
17349: IFFALSE 17415
// for i in ru_vehicles do
17351: LD_ADDR_VAR 0 1
17355: PUSH
17356: LD_EXP 56
17360: PUSH
17361: FOR_IN
17362: IFFALSE 17413
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
17364: LD_VAR 0 1
17368: PPUSH
17369: CALL_OW 302
17373: PUSH
17374: LD_VAR 0 1
17378: PPUSH
17379: LD_INT 89
17381: PPUSH
17382: LD_INT 36
17384: PPUSH
17385: CALL_OW 297
17389: PUSH
17390: LD_INT 10
17392: GREATER
17393: AND
17394: IFFALSE 17411
// ComMoveXY ( i , 89 , 36 ) ;
17396: LD_VAR 0 1
17400: PPUSH
17401: LD_INT 89
17403: PPUSH
17404: LD_INT 36
17406: PPUSH
17407: CALL_OW 111
17411: GO 17361
17413: POP
17414: POP
// end ;
17415: PPOPN 1
17417: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
17418: LD_EXP 55
17422: PUSH
17423: LD_EXP 31
17427: NOT
17428: AND
17429: PUSH
17430: LD_EXP 32
17434: NOT
17435: AND
17436: IFFALSE 17720
17438: GO 17440
17440: DISABLE
17441: LD_INT 0
17443: PPUSH
17444: PPUSH
17445: PPUSH
// begin enable ;
17446: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17447: LD_ADDR_VAR 0 3
17451: PUSH
17452: LD_INT 81
17454: PUSH
17455: LD_INT 3
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PPUSH
17462: CALL_OW 69
17466: ST_TO_ADDR
// for i = 1 to ru_forest do
17467: LD_ADDR_VAR 0 1
17471: PUSH
17472: DOUBLE
17473: LD_INT 1
17475: DEC
17476: ST_TO_ADDR
17477: LD_EXP 55
17481: PUSH
17482: FOR_TO
17483: IFFALSE 17718
// begin un := ru_forest [ i ] ;
17485: LD_ADDR_VAR 0 2
17489: PUSH
17490: LD_EXP 55
17494: PUSH
17495: LD_VAR 0 1
17499: ARRAY
17500: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17501: LD_VAR 0 2
17505: PPUSH
17506: LD_INT 13
17508: PPUSH
17509: CALL_OW 308
17513: IFFALSE 17603
// begin if not See ( 1 , un ) then
17515: LD_INT 1
17517: PPUSH
17518: LD_VAR 0 2
17522: PPUSH
17523: CALL_OW 292
17527: NOT
17528: IFFALSE 17542
// SetLives ( un , 1000 ) ;
17530: LD_VAR 0 2
17534: PPUSH
17535: LD_INT 1000
17537: PPUSH
17538: CALL_OW 234
// ru_forest := ru_forest diff un ;
17542: LD_ADDR_EXP 55
17546: PUSH
17547: LD_EXP 55
17551: PUSH
17552: LD_VAR 0 2
17556: DIFF
17557: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17558: LD_VAR 0 2
17562: PPUSH
17563: LD_INT 22
17565: PUSH
17566: LD_INT 3
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 30
17575: PUSH
17576: LD_INT 4
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PPUSH
17587: CALL_OW 69
17591: PPUSH
17592: CALL 1007 0 1
17596: PPUSH
17597: CALL_OW 120
// continue ;
17601: GO 17482
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17603: LD_VAR 0 2
17607: PPUSH
17608: CALL_OW 256
17612: PUSH
17613: LD_INT 700
17615: LESS
17616: PUSH
17617: LD_VAR 0 2
17621: PPUSH
17622: LD_INT 13
17624: PPUSH
17625: CALL_OW 308
17629: NOT
17630: AND
17631: IFFALSE 17647
// ComMoveToArea ( un , retreatArea ) else
17633: LD_VAR 0 2
17637: PPUSH
17638: LD_INT 13
17640: PPUSH
17641: CALL_OW 113
17645: GO 17716
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17647: LD_VAR 0 2
17651: PPUSH
17652: LD_VAR 0 3
17656: PPUSH
17657: LD_VAR 0 2
17661: PPUSH
17662: CALL_OW 74
17666: PPUSH
17667: CALL_OW 296
17671: PUSH
17672: LD_INT 9
17674: LESS
17675: PUSH
17676: LD_VAR 0 2
17680: PPUSH
17681: CALL_OW 256
17685: PUSH
17686: LD_INT 500
17688: GREATER
17689: AND
17690: IFFALSE 17716
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17692: LD_VAR 0 2
17696: PPUSH
17697: LD_VAR 0 3
17701: PPUSH
17702: LD_VAR 0 2
17706: PPUSH
17707: CALL_OW 74
17711: PPUSH
17712: CALL_OW 115
// end ;
17716: GO 17482
17718: POP
17719: POP
// end ;
17720: PPOPN 3
17722: END
// every 0 0$10 trigger not send_attack_on_cornel or IsDead ( Cornel ) do var i , filter ;
17723: LD_EXP 32
17727: NOT
17728: PUSH
17729: LD_EXP 44
17733: PPUSH
17734: CALL_OW 301
17738: OR
17739: IFFALSE 17900
17741: GO 17743
17743: DISABLE
17744: LD_INT 0
17746: PPUSH
17747: PPUSH
// begin enable ;
17748: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_inarea , ignoreBuildingsArea ] ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 990 ] ] ] ) ;
17749: LD_ADDR_VAR 0 2
17753: PUSH
17754: LD_INT 22
17756: PUSH
17757: LD_INT 3
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 3
17766: PUSH
17767: LD_INT 95
17769: PUSH
17770: LD_INT 18
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 21
17783: PUSH
17784: LD_INT 3
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 3
17793: PUSH
17794: LD_INT 24
17796: PUSH
17797: LD_INT 990
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: PPUSH
17814: CALL_OW 69
17818: ST_TO_ADDR
// if filter then
17819: LD_VAR 0 2
17823: IFFALSE 17900
// for i in filter do
17825: LD_ADDR_VAR 0 1
17829: PUSH
17830: LD_VAR 0 2
17834: PUSH
17835: FOR_IN
17836: IFFALSE 17898
// if GetY ( i ) > 70 then
17838: LD_VAR 0 1
17842: PPUSH
17843: CALL_OW 251
17847: PUSH
17848: LD_INT 70
17850: GREATER
17851: IFFALSE 17857
// continue else
17853: GO 17835
17855: GO 17896
// begin ru_alert := true ;
17857: LD_ADDR_EXP 60
17861: PUSH
17862: LD_INT 1
17864: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17865: LD_ADDR_EXP 61
17869: PUSH
17870: LD_VAR 0 1
17874: PPUSH
17875: CALL_OW 250
17879: PUSH
17880: LD_VAR 0 1
17884: PPUSH
17885: CALL_OW 251
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: ST_TO_ADDR
// break ;
17894: GO 17898
// end ;
17896: GO 17835
17898: POP
17899: POP
// end ;
17900: PPOPN 2
17902: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17903: LD_EXP 31
17907: IFFALSE 18056
17909: GO 17911
17911: DISABLE
17912: LD_INT 0
17914: PPUSH
17915: PPUSH
17916: PPUSH
17917: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17918: LD_ADDR_VAR 0 4
17922: PUSH
17923: LD_EXP 56
17927: PUSH
17928: LD_EXP 55
17932: ADD
17933: PUSH
17934: LD_EXP 53
17938: ADD
17939: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17940: LD_ADDR_VAR 0 3
17944: PUSH
17945: LD_INT 3
17947: PPUSH
17948: LD_INT 81
17950: PUSH
17951: LD_INT 3
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PPUSH
17958: CALL_OW 70
17962: ST_TO_ADDR
// if filter and enemy then
17963: LD_VAR 0 4
17967: PUSH
17968: LD_VAR 0 3
17972: AND
17973: IFFALSE 18056
// repeat wait ( 0 0$01 ) ;
17975: LD_INT 35
17977: PPUSH
17978: CALL_OW 67
// for i in filter do
17982: LD_ADDR_VAR 0 1
17986: PUSH
17987: LD_VAR 0 4
17991: PUSH
17992: FOR_IN
17993: IFFALSE 18021
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17995: LD_VAR 0 1
17999: PPUSH
18000: LD_VAR 0 3
18004: PPUSH
18005: LD_VAR 0 1
18009: PPUSH
18010: CALL_OW 74
18014: PPUSH
18015: CALL_OW 115
// end ;
18019: GO 17992
18021: POP
18022: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
18023: LD_INT 3
18025: PPUSH
18026: LD_INT 81
18028: PUSH
18029: LD_INT 3
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PPUSH
18036: CALL_OW 70
18040: PUSH
18041: LD_INT 0
18043: EQUAL
18044: PUSH
18045: LD_VAR 0 4
18049: PUSH
18050: LD_INT 0
18052: EQUAL
18053: OR
18054: IFFALSE 17975
// end ;
18056: PPOPN 4
18058: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
18059: LD_EXP 26
18063: PUSH
18064: LD_INT 22
18066: PUSH
18067: LD_INT 4
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 30
18076: PUSH
18077: LD_INT 4
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 3
18086: PUSH
18087: LD_INT 57
18089: PUSH
18090: EMPTY
18091: LIST
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: LIST
18101: PPUSH
18102: CALL_OW 69
18106: AND
18107: IFFALSE 18156
18109: GO 18111
18111: DISABLE
18112: LD_INT 0
18114: PPUSH
// begin if not ru_cornel_attack then
18115: LD_EXP 58
18119: NOT
18120: IFFALSE 18124
// exit ;
18122: GO 18156
// for i in ru_cornel_attack do
18124: LD_ADDR_VAR 0 1
18128: PUSH
18129: LD_EXP 58
18133: PUSH
18134: FOR_IN
18135: IFFALSE 18154
// ComAgressiveMove ( i , 258 , 119 ) ;
18137: LD_VAR 0 1
18141: PPUSH
18142: LD_INT 258
18144: PPUSH
18145: LD_INT 119
18147: PPUSH
18148: CALL_OW 114
18152: GO 18134
18154: POP
18155: POP
// end ; end_of_file
18156: PPOPN 1
18158: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
18159: LD_EXP 5
18163: PUSH
18164: LD_EXP 9
18168: NOT
18169: AND
18170: PUSH
18171: LD_EXP 20
18175: AND
18176: IFFALSE 18288
18178: GO 18180
18180: DISABLE
18181: LD_INT 0
18183: PPUSH
// begin enable ;
18184: ENABLE
// crates_counter := crates_counter - 50 ;
18185: LD_ADDR_EXP 20
18189: PUSH
18190: LD_EXP 20
18194: PUSH
18195: LD_INT 50
18197: MINUS
18198: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
18199: LD_INT 8
18201: PPUSH
18202: LD_INT 2
18204: PPUSH
18205: LD_INT 5
18207: PPUSH
18208: CALL_OW 12
18212: PPUSH
18213: LD_INT 1
18215: PPUSH
18216: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
18220: LD_INT 1785
18222: PPUSH
18223: LD_INT 2345
18225: PPUSH
18226: CALL_OW 12
18230: PPUSH
18231: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
18235: LD_ADDR_VAR 0 1
18239: PUSH
18240: LD_INT 1
18242: PPUSH
18243: LD_OWVAR 67
18247: PUSH
18248: LD_INT 2
18250: PLUS
18251: PPUSH
18252: CALL_OW 12
18256: ST_TO_ADDR
// if r < 3 then
18257: LD_VAR 0 1
18261: PUSH
18262: LD_INT 3
18264: LESS
18265: IFFALSE 18288
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
18267: LD_INT 4
18269: PPUSH
18270: LD_INT 1
18272: PPUSH
18273: LD_INT 5
18275: PPUSH
18276: CALL_OW 12
18280: PPUSH
18281: LD_INT 1
18283: PPUSH
18284: CALL_OW 55
// end ;
18288: PPOPN 1
18290: END
// every 0 0$01 trigger cornel_active do
18291: LD_EXP 8
18295: IFFALSE 18384
18297: GO 18299
18299: DISABLE
// begin Wait ( 0 0$03 ) ;
18300: LD_INT 105
18302: PPUSH
18303: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18307: LD_INT 2
18309: PPUSH
18310: LD_INT 5
18312: PPUSH
18313: CALL_OW 12
18317: PPUSH
18318: LD_INT 10
18320: PPUSH
18321: LD_INT 1
18323: PPUSH
18324: CALL_OW 55
// Wait ( 0 0$13 ) ;
18328: LD_INT 455
18330: PPUSH
18331: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18335: LD_INT 2
18337: PPUSH
18338: LD_INT 5
18340: PPUSH
18341: CALL_OW 12
18345: PPUSH
18346: LD_INT 10
18348: PPUSH
18349: LD_INT 1
18351: PPUSH
18352: CALL_OW 55
// Wait ( 0 0$16 ) ;
18356: LD_INT 560
18358: PPUSH
18359: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18363: LD_INT 2
18365: PPUSH
18366: LD_INT 5
18368: PPUSH
18369: CALL_OW 12
18373: PPUSH
18374: LD_INT 10
18376: PPUSH
18377: LD_INT 1
18379: PPUSH
18380: CALL_OW 55
// end ; end_of_file
18384: END
// every 0 0$01 trigger cornel_prepared do
18385: LD_EXP 11
18389: IFFALSE 18448
18391: GO 18393
18393: DISABLE
// begin enable ;
18394: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
18395: LD_ADDR_OWVAR 47
18399: PUSH
18400: LD_STRING #Am03-1
18402: PUSH
18403: LD_EXP 10
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
18412: LD_ADDR_EXP 10
18416: PUSH
18417: LD_EXP 10
18421: PPUSH
18422: LD_STRING -
18424: PPUSH
18425: CALL 1077 0 2
18429: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
18430: LD_EXP 10
18434: PUSH
18435: LD_INT 0
18437: EQUAL
18438: IFFALSE 18448
// begin Display_Strings := [ ] ;
18440: LD_ADDR_OWVAR 47
18444: PUSH
18445: EMPTY
18446: ST_TO_ADDR
// disable ;
18447: DISABLE
// end ; end ;
18448: END
// every 0 0$01 trigger debug and debug_strings do
18449: LD_EXP 1
18453: PUSH
18454: LD_OWVAR 48
18458: AND
18459: IFFALSE 18475
18461: GO 18463
18463: DISABLE
// begin enable ;
18464: ENABLE
// Display_Strings := debug_strings ;
18465: LD_ADDR_OWVAR 47
18469: PUSH
18470: LD_OWVAR 48
18474: ST_TO_ADDR
// end ; end_of_file
18475: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
18476: LD_VAR 0 1
18480: PPUSH
18481: LD_VAR 0 2
18485: PPUSH
18486: CALL 35068 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
18490: LD_VAR 0 1
18494: PPUSH
18495: CALL_OW 255
18499: PUSH
18500: LD_INT 1
18502: EQUAL
18503: PUSH
18504: LD_EXP 14
18508: NOT
18509: AND
18510: IFFALSE 18520
// solar_builded := true ;
18512: LD_ADDR_EXP 14
18516: PUSH
18517: LD_INT 1
18519: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18520: LD_VAR 0 1
18524: PPUSH
18525: CALL_OW 255
18529: PUSH
18530: LD_INT 1
18532: EQUAL
18533: PUSH
18534: LD_EXP 29
18538: AND
18539: IFFALSE 18576
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18541: LD_ADDR_EXP 29
18545: PUSH
18546: LD_EXP 29
18550: PUSH
18551: LD_INT 1750
18553: PUSH
18554: LD_INT 1400
18556: PUSH
18557: LD_INT 1225
18559: PUSH
18560: LD_INT 1050
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: PUSH
18569: LD_OWVAR 67
18573: ARRAY
18574: PLUS
18575: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18576: LD_VAR 0 1
18580: PPUSH
18581: CALL_OW 255
18585: PUSH
18586: LD_INT 3
18588: EQUAL
18589: IFFALSE 18607
// ru_vehicles := ru_vehicles ^ veh ;
18591: LD_ADDR_EXP 56
18595: PUSH
18596: LD_EXP 56
18600: PUSH
18601: LD_VAR 0 1
18605: ADD
18606: ST_TO_ADDR
// end ;
18607: PPOPN 2
18609: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18610: LD_VAR 0 1
18614: PPUSH
18615: CALL 34948 0 1
// if un in ru_patrol then
18619: LD_VAR 0 1
18623: PUSH
18624: LD_EXP 53
18628: IN
18629: IFFALSE 18647
// ru_patrol := ru_patrol diff un ;
18631: LD_ADDR_EXP 53
18635: PUSH
18636: LD_EXP 53
18640: PUSH
18641: LD_VAR 0 1
18645: DIFF
18646: ST_TO_ADDR
// if un in ru_forest then
18647: LD_VAR 0 1
18651: PUSH
18652: LD_EXP 55
18656: IN
18657: IFFALSE 18675
// ru_forest := ru_forest diff un ;
18659: LD_ADDR_EXP 55
18663: PUSH
18664: LD_EXP 55
18668: PUSH
18669: LD_VAR 0 1
18673: DIFF
18674: ST_TO_ADDR
// if un in ru_vehicles then
18675: LD_VAR 0 1
18679: PUSH
18680: LD_EXP 56
18684: IN
18685: IFFALSE 18791
// begin ru_vehicles := ru_vehicles diff un ;
18687: LD_ADDR_EXP 56
18691: PUSH
18692: LD_EXP 56
18696: PUSH
18697: LD_VAR 0 1
18701: DIFF
18702: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18703: LD_ADDR_EXP 57
18707: PUSH
18708: LD_EXP 57
18712: PUSH
18713: LD_VAR 0 1
18717: PPUSH
18718: CALL_OW 265
18722: PUSH
18723: LD_VAR 0 1
18727: PPUSH
18728: CALL_OW 262
18732: PUSH
18733: LD_VAR 0 1
18737: PPUSH
18738: CALL_OW 263
18742: PUSH
18743: LD_VAR 0 1
18747: PPUSH
18748: CALL_OW 264
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: ADD
18759: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18760: LD_ADDR_EXP 13
18764: PUSH
18765: LD_EXP 13
18769: PUSH
18770: LD_INT 1
18772: PLUS
18773: ST_TO_ADDR
// if ach_counter = 10 then
18774: LD_EXP 13
18778: PUSH
18779: LD_INT 10
18781: EQUAL
18782: IFFALSE 18791
// SetAchievement ( ACH_FAUST ) ;
18784: LD_STRING ACH_FAUST
18786: PPUSH
18787: CALL_OW 543
// end ; if un = Pokryshkin then
18791: LD_VAR 0 1
18795: PUSH
18796: LD_EXP 52
18800: EQUAL
18801: IFFALSE 18810
// SetAchievement ( ACH_POKR ) ;
18803: LD_STRING ACH_POKR
18805: PPUSH
18806: CALL_OW 543
// if un = JMM then
18810: LD_VAR 0 1
18814: PUSH
18815: LD_EXP 37
18819: EQUAL
18820: IFFALSE 18829
// YouLost ( 0 ) ;
18822: LD_STRING 0
18824: PPUSH
18825: CALL_OW 104
// if un = us_dep_west then
18829: LD_VAR 0 1
18833: PUSH
18834: LD_INT 1
18836: EQUAL
18837: IFFALSE 18846
// YouLost ( 2 ) ;
18839: LD_STRING 2
18841: PPUSH
18842: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18846: LD_VAR 0 1
18850: PPUSH
18851: CALL_OW 255
18855: PUSH
18856: LD_INT 8
18858: EQUAL
18859: PUSH
18860: LD_EXP 5
18864: NOT
18865: AND
18866: IFFALSE 18875
// YouLost ( 4 ) ;
18868: LD_STRING 4
18870: PPUSH
18871: CALL_OW 104
// if un in jmm_units then
18875: LD_VAR 0 1
18879: PUSH
18880: LD_EXP 4
18884: IN
18885: IFFALSE 18901
// lose_counter := lose_counter + 1 ;
18887: LD_ADDR_EXP 34
18891: PUSH
18892: LD_EXP 34
18896: PUSH
18897: LD_INT 1
18899: PLUS
18900: ST_TO_ADDR
// end ;
18901: PPOPN 1
18903: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18904: LD_INT 0
18906: PPUSH
18907: PPUSH
// begin if GetSide ( driver ) = 3 then
18908: LD_VAR 0 1
18912: PPUSH
18913: CALL_OW 255
18917: PUSH
18918: LD_INT 3
18920: EQUAL
18921: IFFALSE 18999
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18923: LD_ADDR_VAR 0 6
18927: PUSH
18928: LD_INT 22
18930: PUSH
18931: LD_INT 3
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 30
18940: PUSH
18941: LD_INT 3
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PPUSH
18952: CALL_OW 69
18956: PPUSH
18957: CALL 1007 0 1
18961: ST_TO_ADDR
// if place then
18962: LD_VAR 0 6
18966: IFFALSE 18984
// ComEnterUnit ( driver , place ) else
18968: LD_VAR 0 1
18972: PPUSH
18973: LD_VAR 0 6
18977: PPUSH
18978: CALL_OW 120
18982: GO 18999
// ComMoveXY ( driver , 70 , 22 ) ;
18984: LD_VAR 0 1
18988: PPUSH
18989: LD_INT 70
18991: PPUSH
18992: LD_INT 22
18994: PPUSH
18995: CALL_OW 111
// end ; end ;
18999: PPOPN 6
19001: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
19002: LD_VAR 0 1
19006: PUSH
19007: LD_INT 1
19009: EQUAL
19010: PUSH
19011: LD_VAR 0 2
19015: PUSH
19016: LD_INT 4
19018: EQUAL
19019: PUSH
19020: LD_VAR 0 2
19024: PUSH
19025: LD_INT 8
19027: EQUAL
19028: PUSH
19029: LD_EXP 5
19033: NOT
19034: AND
19035: OR
19036: AND
19037: IFFALSE 19046
// YouLost ( 5 ) ;
19039: LD_STRING 5
19041: PPUSH
19042: CALL_OW 104
// end ;
19046: PPOPN 2
19048: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
19049: LD_EXP 36
19053: PUSH
19054: LD_INT 22
19056: PUSH
19057: LD_INT 1
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: LD_INT 21
19066: PUSH
19067: LD_INT 1
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PPUSH
19078: CALL_OW 69
19082: PUSH
19083: LD_INT 22
19085: PUSH
19086: LD_INT 8
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 21
19095: PUSH
19096: LD_INT 1
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PPUSH
19107: CALL_OW 69
19111: ADD
19112: PLUS
19113: PUSH
19114: LD_INT 5
19116: LESS
19117: IFFALSE 19129
19119: GO 19121
19121: DISABLE
// YouLost ( 1 ) ;
19122: LD_STRING 1
19124: PPUSH
19125: CALL_OW 104
19129: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
19130: LD_INT 1
19132: PPUSH
19133: CALL_OW 255
19137: PUSH
19138: LD_INT 3
19140: EQUAL
19141: IFFALSE 19153
19143: GO 19145
19145: DISABLE
// YouLost ( 3 ) ; end_of_file end_of_file
19146: LD_STRING 3
19148: PPUSH
19149: CALL_OW 104
19153: END
// export globalGameSaveCounter ; every 0 0$1 do
19154: GO 19156
19156: DISABLE
// begin enable ;
19157: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19158: LD_STRING updateTimer(
19160: PUSH
19161: LD_OWVAR 1
19165: STR
19166: PUSH
19167: LD_STRING );
19169: STR
19170: PPUSH
19171: CALL_OW 559
// end ;
19175: END
// every 0 0$1 do
19176: GO 19178
19178: DISABLE
// begin globalGameSaveCounter := 0 ;
19179: LD_ADDR_EXP 62
19183: PUSH
19184: LD_INT 0
19186: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19187: LD_STRING setGameSaveCounter(0)
19189: PPUSH
19190: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19194: LD_STRING initStreamRollete();
19196: PPUSH
19197: CALL_OW 559
// InitStreamMode ;
19201: CALL 20527 0 0
// DefineStreamItems ( false ) ;
19205: LD_INT 0
19207: PPUSH
19208: CALL 20991 0 1
// end ;
19212: END
// export function SOS_MapStart ( ) ; begin
19213: LD_INT 0
19215: PPUSH
// if streamModeActive then
19216: LD_EXP 63
19220: IFFALSE 19229
// DefineStreamItems ( true ) ;
19222: LD_INT 1
19224: PPUSH
19225: CALL 20991 0 1
// UpdateLuaVariables ( ) ;
19229: CALL 19246 0 0
// UpdateFactoryWaypoints ( ) ;
19233: CALL 33852 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19237: CALL 34109 0 0
// end ;
19241: LD_VAR 0 1
19245: RET
// function UpdateLuaVariables ( ) ; begin
19246: LD_INT 0
19248: PPUSH
// if globalGameSaveCounter then
19249: LD_EXP 62
19253: IFFALSE 19287
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19255: LD_ADDR_EXP 62
19259: PUSH
19260: LD_EXP 62
19264: PPUSH
19265: CALL 78066 0 1
19269: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19270: LD_STRING setGameSaveCounter(
19272: PUSH
19273: LD_EXP 62
19277: STR
19278: PUSH
19279: LD_STRING )
19281: STR
19282: PPUSH
19283: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19287: LD_STRING setGameDifficulty(
19289: PUSH
19290: LD_OWVAR 67
19294: STR
19295: PUSH
19296: LD_STRING )
19298: STR
19299: PPUSH
19300: CALL_OW 559
// end ;
19304: LD_VAR 0 1
19308: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19309: LD_INT 0
19311: PPUSH
// if p2 = stream_mode then
19312: LD_VAR 0 2
19316: PUSH
19317: LD_INT 100
19319: EQUAL
19320: IFFALSE 20323
// begin if not StreamModeActive then
19322: LD_EXP 63
19326: NOT
19327: IFFALSE 19337
// StreamModeActive := true ;
19329: LD_ADDR_EXP 63
19333: PUSH
19334: LD_INT 1
19336: ST_TO_ADDR
// if p3 = 0 then
19337: LD_VAR 0 3
19341: PUSH
19342: LD_INT 0
19344: EQUAL
19345: IFFALSE 19351
// InitStreamMode ;
19347: CALL 20527 0 0
// if p3 = 1 then
19351: LD_VAR 0 3
19355: PUSH
19356: LD_INT 1
19358: EQUAL
19359: IFFALSE 19369
// sRocket := true ;
19361: LD_ADDR_EXP 68
19365: PUSH
19366: LD_INT 1
19368: ST_TO_ADDR
// if p3 = 2 then
19369: LD_VAR 0 3
19373: PUSH
19374: LD_INT 2
19376: EQUAL
19377: IFFALSE 19387
// sSpeed := true ;
19379: LD_ADDR_EXP 67
19383: PUSH
19384: LD_INT 1
19386: ST_TO_ADDR
// if p3 = 3 then
19387: LD_VAR 0 3
19391: PUSH
19392: LD_INT 3
19394: EQUAL
19395: IFFALSE 19405
// sEngine := true ;
19397: LD_ADDR_EXP 69
19401: PUSH
19402: LD_INT 1
19404: ST_TO_ADDR
// if p3 = 4 then
19405: LD_VAR 0 3
19409: PUSH
19410: LD_INT 4
19412: EQUAL
19413: IFFALSE 19423
// sSpec := true ;
19415: LD_ADDR_EXP 66
19419: PUSH
19420: LD_INT 1
19422: ST_TO_ADDR
// if p3 = 5 then
19423: LD_VAR 0 3
19427: PUSH
19428: LD_INT 5
19430: EQUAL
19431: IFFALSE 19441
// sLevel := true ;
19433: LD_ADDR_EXP 70
19437: PUSH
19438: LD_INT 1
19440: ST_TO_ADDR
// if p3 = 6 then
19441: LD_VAR 0 3
19445: PUSH
19446: LD_INT 6
19448: EQUAL
19449: IFFALSE 19459
// sArmoury := true ;
19451: LD_ADDR_EXP 71
19455: PUSH
19456: LD_INT 1
19458: ST_TO_ADDR
// if p3 = 7 then
19459: LD_VAR 0 3
19463: PUSH
19464: LD_INT 7
19466: EQUAL
19467: IFFALSE 19477
// sRadar := true ;
19469: LD_ADDR_EXP 72
19473: PUSH
19474: LD_INT 1
19476: ST_TO_ADDR
// if p3 = 8 then
19477: LD_VAR 0 3
19481: PUSH
19482: LD_INT 8
19484: EQUAL
19485: IFFALSE 19495
// sBunker := true ;
19487: LD_ADDR_EXP 73
19491: PUSH
19492: LD_INT 1
19494: ST_TO_ADDR
// if p3 = 9 then
19495: LD_VAR 0 3
19499: PUSH
19500: LD_INT 9
19502: EQUAL
19503: IFFALSE 19513
// sHack := true ;
19505: LD_ADDR_EXP 74
19509: PUSH
19510: LD_INT 1
19512: ST_TO_ADDR
// if p3 = 10 then
19513: LD_VAR 0 3
19517: PUSH
19518: LD_INT 10
19520: EQUAL
19521: IFFALSE 19531
// sFire := true ;
19523: LD_ADDR_EXP 75
19527: PUSH
19528: LD_INT 1
19530: ST_TO_ADDR
// if p3 = 11 then
19531: LD_VAR 0 3
19535: PUSH
19536: LD_INT 11
19538: EQUAL
19539: IFFALSE 19549
// sRefresh := true ;
19541: LD_ADDR_EXP 76
19545: PUSH
19546: LD_INT 1
19548: ST_TO_ADDR
// if p3 = 12 then
19549: LD_VAR 0 3
19553: PUSH
19554: LD_INT 12
19556: EQUAL
19557: IFFALSE 19567
// sExp := true ;
19559: LD_ADDR_EXP 77
19563: PUSH
19564: LD_INT 1
19566: ST_TO_ADDR
// if p3 = 13 then
19567: LD_VAR 0 3
19571: PUSH
19572: LD_INT 13
19574: EQUAL
19575: IFFALSE 19585
// sDepot := true ;
19577: LD_ADDR_EXP 78
19581: PUSH
19582: LD_INT 1
19584: ST_TO_ADDR
// if p3 = 14 then
19585: LD_VAR 0 3
19589: PUSH
19590: LD_INT 14
19592: EQUAL
19593: IFFALSE 19603
// sFlag := true ;
19595: LD_ADDR_EXP 79
19599: PUSH
19600: LD_INT 1
19602: ST_TO_ADDR
// if p3 = 15 then
19603: LD_VAR 0 3
19607: PUSH
19608: LD_INT 15
19610: EQUAL
19611: IFFALSE 19621
// sKamikadze := true ;
19613: LD_ADDR_EXP 87
19617: PUSH
19618: LD_INT 1
19620: ST_TO_ADDR
// if p3 = 16 then
19621: LD_VAR 0 3
19625: PUSH
19626: LD_INT 16
19628: EQUAL
19629: IFFALSE 19639
// sTroll := true ;
19631: LD_ADDR_EXP 88
19635: PUSH
19636: LD_INT 1
19638: ST_TO_ADDR
// if p3 = 17 then
19639: LD_VAR 0 3
19643: PUSH
19644: LD_INT 17
19646: EQUAL
19647: IFFALSE 19657
// sSlow := true ;
19649: LD_ADDR_EXP 89
19653: PUSH
19654: LD_INT 1
19656: ST_TO_ADDR
// if p3 = 18 then
19657: LD_VAR 0 3
19661: PUSH
19662: LD_INT 18
19664: EQUAL
19665: IFFALSE 19675
// sLack := true ;
19667: LD_ADDR_EXP 90
19671: PUSH
19672: LD_INT 1
19674: ST_TO_ADDR
// if p3 = 19 then
19675: LD_VAR 0 3
19679: PUSH
19680: LD_INT 19
19682: EQUAL
19683: IFFALSE 19693
// sTank := true ;
19685: LD_ADDR_EXP 92
19689: PUSH
19690: LD_INT 1
19692: ST_TO_ADDR
// if p3 = 20 then
19693: LD_VAR 0 3
19697: PUSH
19698: LD_INT 20
19700: EQUAL
19701: IFFALSE 19711
// sRemote := true ;
19703: LD_ADDR_EXP 93
19707: PUSH
19708: LD_INT 1
19710: ST_TO_ADDR
// if p3 = 21 then
19711: LD_VAR 0 3
19715: PUSH
19716: LD_INT 21
19718: EQUAL
19719: IFFALSE 19729
// sPowell := true ;
19721: LD_ADDR_EXP 94
19725: PUSH
19726: LD_INT 1
19728: ST_TO_ADDR
// if p3 = 22 then
19729: LD_VAR 0 3
19733: PUSH
19734: LD_INT 22
19736: EQUAL
19737: IFFALSE 19747
// sTeleport := true ;
19739: LD_ADDR_EXP 97
19743: PUSH
19744: LD_INT 1
19746: ST_TO_ADDR
// if p3 = 23 then
19747: LD_VAR 0 3
19751: PUSH
19752: LD_INT 23
19754: EQUAL
19755: IFFALSE 19765
// sOilTower := true ;
19757: LD_ADDR_EXP 99
19761: PUSH
19762: LD_INT 1
19764: ST_TO_ADDR
// if p3 = 24 then
19765: LD_VAR 0 3
19769: PUSH
19770: LD_INT 24
19772: EQUAL
19773: IFFALSE 19783
// sShovel := true ;
19775: LD_ADDR_EXP 100
19779: PUSH
19780: LD_INT 1
19782: ST_TO_ADDR
// if p3 = 25 then
19783: LD_VAR 0 3
19787: PUSH
19788: LD_INT 25
19790: EQUAL
19791: IFFALSE 19801
// sSheik := true ;
19793: LD_ADDR_EXP 101
19797: PUSH
19798: LD_INT 1
19800: ST_TO_ADDR
// if p3 = 26 then
19801: LD_VAR 0 3
19805: PUSH
19806: LD_INT 26
19808: EQUAL
19809: IFFALSE 19819
// sEarthquake := true ;
19811: LD_ADDR_EXP 103
19815: PUSH
19816: LD_INT 1
19818: ST_TO_ADDR
// if p3 = 27 then
19819: LD_VAR 0 3
19823: PUSH
19824: LD_INT 27
19826: EQUAL
19827: IFFALSE 19837
// sAI := true ;
19829: LD_ADDR_EXP 104
19833: PUSH
19834: LD_INT 1
19836: ST_TO_ADDR
// if p3 = 28 then
19837: LD_VAR 0 3
19841: PUSH
19842: LD_INT 28
19844: EQUAL
19845: IFFALSE 19855
// sCargo := true ;
19847: LD_ADDR_EXP 107
19851: PUSH
19852: LD_INT 1
19854: ST_TO_ADDR
// if p3 = 29 then
19855: LD_VAR 0 3
19859: PUSH
19860: LD_INT 29
19862: EQUAL
19863: IFFALSE 19873
// sDLaser := true ;
19865: LD_ADDR_EXP 108
19869: PUSH
19870: LD_INT 1
19872: ST_TO_ADDR
// if p3 = 30 then
19873: LD_VAR 0 3
19877: PUSH
19878: LD_INT 30
19880: EQUAL
19881: IFFALSE 19891
// sExchange := true ;
19883: LD_ADDR_EXP 109
19887: PUSH
19888: LD_INT 1
19890: ST_TO_ADDR
// if p3 = 31 then
19891: LD_VAR 0 3
19895: PUSH
19896: LD_INT 31
19898: EQUAL
19899: IFFALSE 19909
// sFac := true ;
19901: LD_ADDR_EXP 110
19905: PUSH
19906: LD_INT 1
19908: ST_TO_ADDR
// if p3 = 32 then
19909: LD_VAR 0 3
19913: PUSH
19914: LD_INT 32
19916: EQUAL
19917: IFFALSE 19927
// sPower := true ;
19919: LD_ADDR_EXP 111
19923: PUSH
19924: LD_INT 1
19926: ST_TO_ADDR
// if p3 = 33 then
19927: LD_VAR 0 3
19931: PUSH
19932: LD_INT 33
19934: EQUAL
19935: IFFALSE 19945
// sRandom := true ;
19937: LD_ADDR_EXP 112
19941: PUSH
19942: LD_INT 1
19944: ST_TO_ADDR
// if p3 = 34 then
19945: LD_VAR 0 3
19949: PUSH
19950: LD_INT 34
19952: EQUAL
19953: IFFALSE 19963
// sShield := true ;
19955: LD_ADDR_EXP 113
19959: PUSH
19960: LD_INT 1
19962: ST_TO_ADDR
// if p3 = 35 then
19963: LD_VAR 0 3
19967: PUSH
19968: LD_INT 35
19970: EQUAL
19971: IFFALSE 19981
// sTime := true ;
19973: LD_ADDR_EXP 114
19977: PUSH
19978: LD_INT 1
19980: ST_TO_ADDR
// if p3 = 36 then
19981: LD_VAR 0 3
19985: PUSH
19986: LD_INT 36
19988: EQUAL
19989: IFFALSE 19999
// sTools := true ;
19991: LD_ADDR_EXP 115
19995: PUSH
19996: LD_INT 1
19998: ST_TO_ADDR
// if p3 = 101 then
19999: LD_VAR 0 3
20003: PUSH
20004: LD_INT 101
20006: EQUAL
20007: IFFALSE 20017
// sSold := true ;
20009: LD_ADDR_EXP 80
20013: PUSH
20014: LD_INT 1
20016: ST_TO_ADDR
// if p3 = 102 then
20017: LD_VAR 0 3
20021: PUSH
20022: LD_INT 102
20024: EQUAL
20025: IFFALSE 20035
// sDiff := true ;
20027: LD_ADDR_EXP 81
20031: PUSH
20032: LD_INT 1
20034: ST_TO_ADDR
// if p3 = 103 then
20035: LD_VAR 0 3
20039: PUSH
20040: LD_INT 103
20042: EQUAL
20043: IFFALSE 20053
// sFog := true ;
20045: LD_ADDR_EXP 84
20049: PUSH
20050: LD_INT 1
20052: ST_TO_ADDR
// if p3 = 104 then
20053: LD_VAR 0 3
20057: PUSH
20058: LD_INT 104
20060: EQUAL
20061: IFFALSE 20071
// sReset := true ;
20063: LD_ADDR_EXP 85
20067: PUSH
20068: LD_INT 1
20070: ST_TO_ADDR
// if p3 = 105 then
20071: LD_VAR 0 3
20075: PUSH
20076: LD_INT 105
20078: EQUAL
20079: IFFALSE 20089
// sSun := true ;
20081: LD_ADDR_EXP 86
20085: PUSH
20086: LD_INT 1
20088: ST_TO_ADDR
// if p3 = 106 then
20089: LD_VAR 0 3
20093: PUSH
20094: LD_INT 106
20096: EQUAL
20097: IFFALSE 20107
// sTiger := true ;
20099: LD_ADDR_EXP 82
20103: PUSH
20104: LD_INT 1
20106: ST_TO_ADDR
// if p3 = 107 then
20107: LD_VAR 0 3
20111: PUSH
20112: LD_INT 107
20114: EQUAL
20115: IFFALSE 20125
// sBomb := true ;
20117: LD_ADDR_EXP 83
20121: PUSH
20122: LD_INT 1
20124: ST_TO_ADDR
// if p3 = 108 then
20125: LD_VAR 0 3
20129: PUSH
20130: LD_INT 108
20132: EQUAL
20133: IFFALSE 20143
// sWound := true ;
20135: LD_ADDR_EXP 91
20139: PUSH
20140: LD_INT 1
20142: ST_TO_ADDR
// if p3 = 109 then
20143: LD_VAR 0 3
20147: PUSH
20148: LD_INT 109
20150: EQUAL
20151: IFFALSE 20161
// sBetray := true ;
20153: LD_ADDR_EXP 95
20157: PUSH
20158: LD_INT 1
20160: ST_TO_ADDR
// if p3 = 110 then
20161: LD_VAR 0 3
20165: PUSH
20166: LD_INT 110
20168: EQUAL
20169: IFFALSE 20179
// sContamin := true ;
20171: LD_ADDR_EXP 96
20175: PUSH
20176: LD_INT 1
20178: ST_TO_ADDR
// if p3 = 111 then
20179: LD_VAR 0 3
20183: PUSH
20184: LD_INT 111
20186: EQUAL
20187: IFFALSE 20197
// sOil := true ;
20189: LD_ADDR_EXP 98
20193: PUSH
20194: LD_INT 1
20196: ST_TO_ADDR
// if p3 = 112 then
20197: LD_VAR 0 3
20201: PUSH
20202: LD_INT 112
20204: EQUAL
20205: IFFALSE 20215
// sStu := true ;
20207: LD_ADDR_EXP 102
20211: PUSH
20212: LD_INT 1
20214: ST_TO_ADDR
// if p3 = 113 then
20215: LD_VAR 0 3
20219: PUSH
20220: LD_INT 113
20222: EQUAL
20223: IFFALSE 20233
// sBazooka := true ;
20225: LD_ADDR_EXP 105
20229: PUSH
20230: LD_INT 1
20232: ST_TO_ADDR
// if p3 = 114 then
20233: LD_VAR 0 3
20237: PUSH
20238: LD_INT 114
20240: EQUAL
20241: IFFALSE 20251
// sMortar := true ;
20243: LD_ADDR_EXP 106
20247: PUSH
20248: LD_INT 1
20250: ST_TO_ADDR
// if p3 = 115 then
20251: LD_VAR 0 3
20255: PUSH
20256: LD_INT 115
20258: EQUAL
20259: IFFALSE 20269
// sRanger := true ;
20261: LD_ADDR_EXP 116
20265: PUSH
20266: LD_INT 1
20268: ST_TO_ADDR
// if p3 = 116 then
20269: LD_VAR 0 3
20273: PUSH
20274: LD_INT 116
20276: EQUAL
20277: IFFALSE 20287
// sComputer := true ;
20279: LD_ADDR_EXP 117
20283: PUSH
20284: LD_INT 1
20286: ST_TO_ADDR
// if p3 = 117 then
20287: LD_VAR 0 3
20291: PUSH
20292: LD_INT 117
20294: EQUAL
20295: IFFALSE 20305
// s30 := true ;
20297: LD_ADDR_EXP 118
20301: PUSH
20302: LD_INT 1
20304: ST_TO_ADDR
// if p3 = 118 then
20305: LD_VAR 0 3
20309: PUSH
20310: LD_INT 118
20312: EQUAL
20313: IFFALSE 20323
// s60 := true ;
20315: LD_ADDR_EXP 119
20319: PUSH
20320: LD_INT 1
20322: ST_TO_ADDR
// end ; if p2 = hack_mode then
20323: LD_VAR 0 2
20327: PUSH
20328: LD_INT 101
20330: EQUAL
20331: IFFALSE 20459
// begin case p3 of 1 :
20333: LD_VAR 0 3
20337: PUSH
20338: LD_INT 1
20340: DOUBLE
20341: EQUAL
20342: IFTRUE 20346
20344: GO 20353
20346: POP
// hHackUnlimitedResources ; 2 :
20347: CALL 32598 0 0
20351: GO 20459
20353: LD_INT 2
20355: DOUBLE
20356: EQUAL
20357: IFTRUE 20361
20359: GO 20368
20361: POP
// hHackSetLevel10 ; 3 :
20362: CALL 32731 0 0
20366: GO 20459
20368: LD_INT 3
20370: DOUBLE
20371: EQUAL
20372: IFTRUE 20376
20374: GO 20383
20376: POP
// hHackSetLevel10YourUnits ; 4 :
20377: CALL 32816 0 0
20381: GO 20459
20383: LD_INT 4
20385: DOUBLE
20386: EQUAL
20387: IFTRUE 20391
20389: GO 20398
20391: POP
// hHackInvincible ; 5 :
20392: CALL 33264 0 0
20396: GO 20459
20398: LD_INT 5
20400: DOUBLE
20401: EQUAL
20402: IFTRUE 20406
20404: GO 20413
20406: POP
// hHackInvisible ; 6 :
20407: CALL 33375 0 0
20411: GO 20459
20413: LD_INT 6
20415: DOUBLE
20416: EQUAL
20417: IFTRUE 20421
20419: GO 20428
20421: POP
// hHackChangeYourSide ; 7 :
20422: CALL 33432 0 0
20426: GO 20459
20428: LD_INT 7
20430: DOUBLE
20431: EQUAL
20432: IFTRUE 20436
20434: GO 20443
20436: POP
// hHackChangeUnitSide ; 8 :
20437: CALL 33474 0 0
20441: GO 20459
20443: LD_INT 8
20445: DOUBLE
20446: EQUAL
20447: IFTRUE 20451
20449: GO 20458
20451: POP
// hHackFog ; end ;
20452: CALL 33575 0 0
20456: GO 20459
20458: POP
// end ; if p2 = game_save_mode then
20459: LD_VAR 0 2
20463: PUSH
20464: LD_INT 102
20466: EQUAL
20467: IFFALSE 20522
// begin if p3 = 1 then
20469: LD_VAR 0 3
20473: PUSH
20474: LD_INT 1
20476: EQUAL
20477: IFFALSE 20489
// globalGameSaveCounter := p4 ;
20479: LD_ADDR_EXP 62
20483: PUSH
20484: LD_VAR 0 4
20488: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20489: LD_VAR 0 3
20493: PUSH
20494: LD_INT 2
20496: EQUAL
20497: PUSH
20498: LD_EXP 62
20502: AND
20503: IFFALSE 20522
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20505: LD_STRING setGameSaveCounter(
20507: PUSH
20508: LD_EXP 62
20512: STR
20513: PUSH
20514: LD_STRING )
20516: STR
20517: PPUSH
20518: CALL_OW 559
// end ; end ;
20522: LD_VAR 0 7
20526: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20527: LD_INT 0
20529: PPUSH
// streamModeActive := false ;
20530: LD_ADDR_EXP 63
20534: PUSH
20535: LD_INT 0
20537: ST_TO_ADDR
// normalCounter := 36 ;
20538: LD_ADDR_EXP 64
20542: PUSH
20543: LD_INT 36
20545: ST_TO_ADDR
// hardcoreCounter := 18 ;
20546: LD_ADDR_EXP 65
20550: PUSH
20551: LD_INT 18
20553: ST_TO_ADDR
// sRocket := false ;
20554: LD_ADDR_EXP 68
20558: PUSH
20559: LD_INT 0
20561: ST_TO_ADDR
// sSpeed := false ;
20562: LD_ADDR_EXP 67
20566: PUSH
20567: LD_INT 0
20569: ST_TO_ADDR
// sEngine := false ;
20570: LD_ADDR_EXP 69
20574: PUSH
20575: LD_INT 0
20577: ST_TO_ADDR
// sSpec := false ;
20578: LD_ADDR_EXP 66
20582: PUSH
20583: LD_INT 0
20585: ST_TO_ADDR
// sLevel := false ;
20586: LD_ADDR_EXP 70
20590: PUSH
20591: LD_INT 0
20593: ST_TO_ADDR
// sArmoury := false ;
20594: LD_ADDR_EXP 71
20598: PUSH
20599: LD_INT 0
20601: ST_TO_ADDR
// sRadar := false ;
20602: LD_ADDR_EXP 72
20606: PUSH
20607: LD_INT 0
20609: ST_TO_ADDR
// sBunker := false ;
20610: LD_ADDR_EXP 73
20614: PUSH
20615: LD_INT 0
20617: ST_TO_ADDR
// sHack := false ;
20618: LD_ADDR_EXP 74
20622: PUSH
20623: LD_INT 0
20625: ST_TO_ADDR
// sFire := false ;
20626: LD_ADDR_EXP 75
20630: PUSH
20631: LD_INT 0
20633: ST_TO_ADDR
// sRefresh := false ;
20634: LD_ADDR_EXP 76
20638: PUSH
20639: LD_INT 0
20641: ST_TO_ADDR
// sExp := false ;
20642: LD_ADDR_EXP 77
20646: PUSH
20647: LD_INT 0
20649: ST_TO_ADDR
// sDepot := false ;
20650: LD_ADDR_EXP 78
20654: PUSH
20655: LD_INT 0
20657: ST_TO_ADDR
// sFlag := false ;
20658: LD_ADDR_EXP 79
20662: PUSH
20663: LD_INT 0
20665: ST_TO_ADDR
// sKamikadze := false ;
20666: LD_ADDR_EXP 87
20670: PUSH
20671: LD_INT 0
20673: ST_TO_ADDR
// sTroll := false ;
20674: LD_ADDR_EXP 88
20678: PUSH
20679: LD_INT 0
20681: ST_TO_ADDR
// sSlow := false ;
20682: LD_ADDR_EXP 89
20686: PUSH
20687: LD_INT 0
20689: ST_TO_ADDR
// sLack := false ;
20690: LD_ADDR_EXP 90
20694: PUSH
20695: LD_INT 0
20697: ST_TO_ADDR
// sTank := false ;
20698: LD_ADDR_EXP 92
20702: PUSH
20703: LD_INT 0
20705: ST_TO_ADDR
// sRemote := false ;
20706: LD_ADDR_EXP 93
20710: PUSH
20711: LD_INT 0
20713: ST_TO_ADDR
// sPowell := false ;
20714: LD_ADDR_EXP 94
20718: PUSH
20719: LD_INT 0
20721: ST_TO_ADDR
// sTeleport := false ;
20722: LD_ADDR_EXP 97
20726: PUSH
20727: LD_INT 0
20729: ST_TO_ADDR
// sOilTower := false ;
20730: LD_ADDR_EXP 99
20734: PUSH
20735: LD_INT 0
20737: ST_TO_ADDR
// sShovel := false ;
20738: LD_ADDR_EXP 100
20742: PUSH
20743: LD_INT 0
20745: ST_TO_ADDR
// sSheik := false ;
20746: LD_ADDR_EXP 101
20750: PUSH
20751: LD_INT 0
20753: ST_TO_ADDR
// sEarthquake := false ;
20754: LD_ADDR_EXP 103
20758: PUSH
20759: LD_INT 0
20761: ST_TO_ADDR
// sAI := false ;
20762: LD_ADDR_EXP 104
20766: PUSH
20767: LD_INT 0
20769: ST_TO_ADDR
// sCargo := false ;
20770: LD_ADDR_EXP 107
20774: PUSH
20775: LD_INT 0
20777: ST_TO_ADDR
// sDLaser := false ;
20778: LD_ADDR_EXP 108
20782: PUSH
20783: LD_INT 0
20785: ST_TO_ADDR
// sExchange := false ;
20786: LD_ADDR_EXP 109
20790: PUSH
20791: LD_INT 0
20793: ST_TO_ADDR
// sFac := false ;
20794: LD_ADDR_EXP 110
20798: PUSH
20799: LD_INT 0
20801: ST_TO_ADDR
// sPower := false ;
20802: LD_ADDR_EXP 111
20806: PUSH
20807: LD_INT 0
20809: ST_TO_ADDR
// sRandom := false ;
20810: LD_ADDR_EXP 112
20814: PUSH
20815: LD_INT 0
20817: ST_TO_ADDR
// sShield := false ;
20818: LD_ADDR_EXP 113
20822: PUSH
20823: LD_INT 0
20825: ST_TO_ADDR
// sTime := false ;
20826: LD_ADDR_EXP 114
20830: PUSH
20831: LD_INT 0
20833: ST_TO_ADDR
// sTools := false ;
20834: LD_ADDR_EXP 115
20838: PUSH
20839: LD_INT 0
20841: ST_TO_ADDR
// sSold := false ;
20842: LD_ADDR_EXP 80
20846: PUSH
20847: LD_INT 0
20849: ST_TO_ADDR
// sDiff := false ;
20850: LD_ADDR_EXP 81
20854: PUSH
20855: LD_INT 0
20857: ST_TO_ADDR
// sFog := false ;
20858: LD_ADDR_EXP 84
20862: PUSH
20863: LD_INT 0
20865: ST_TO_ADDR
// sReset := false ;
20866: LD_ADDR_EXP 85
20870: PUSH
20871: LD_INT 0
20873: ST_TO_ADDR
// sSun := false ;
20874: LD_ADDR_EXP 86
20878: PUSH
20879: LD_INT 0
20881: ST_TO_ADDR
// sTiger := false ;
20882: LD_ADDR_EXP 82
20886: PUSH
20887: LD_INT 0
20889: ST_TO_ADDR
// sBomb := false ;
20890: LD_ADDR_EXP 83
20894: PUSH
20895: LD_INT 0
20897: ST_TO_ADDR
// sWound := false ;
20898: LD_ADDR_EXP 91
20902: PUSH
20903: LD_INT 0
20905: ST_TO_ADDR
// sBetray := false ;
20906: LD_ADDR_EXP 95
20910: PUSH
20911: LD_INT 0
20913: ST_TO_ADDR
// sContamin := false ;
20914: LD_ADDR_EXP 96
20918: PUSH
20919: LD_INT 0
20921: ST_TO_ADDR
// sOil := false ;
20922: LD_ADDR_EXP 98
20926: PUSH
20927: LD_INT 0
20929: ST_TO_ADDR
// sStu := false ;
20930: LD_ADDR_EXP 102
20934: PUSH
20935: LD_INT 0
20937: ST_TO_ADDR
// sBazooka := false ;
20938: LD_ADDR_EXP 105
20942: PUSH
20943: LD_INT 0
20945: ST_TO_ADDR
// sMortar := false ;
20946: LD_ADDR_EXP 106
20950: PUSH
20951: LD_INT 0
20953: ST_TO_ADDR
// sRanger := false ;
20954: LD_ADDR_EXP 116
20958: PUSH
20959: LD_INT 0
20961: ST_TO_ADDR
// sComputer := false ;
20962: LD_ADDR_EXP 117
20966: PUSH
20967: LD_INT 0
20969: ST_TO_ADDR
// s30 := false ;
20970: LD_ADDR_EXP 118
20974: PUSH
20975: LD_INT 0
20977: ST_TO_ADDR
// s60 := false ;
20978: LD_ADDR_EXP 119
20982: PUSH
20983: LD_INT 0
20985: ST_TO_ADDR
// end ;
20986: LD_VAR 0 1
20990: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20991: LD_INT 0
20993: PPUSH
20994: PPUSH
20995: PPUSH
20996: PPUSH
20997: PPUSH
20998: PPUSH
20999: PPUSH
// result := [ ] ;
21000: LD_ADDR_VAR 0 2
21004: PUSH
21005: EMPTY
21006: ST_TO_ADDR
// if campaign_id = 1 then
21007: LD_OWVAR 69
21011: PUSH
21012: LD_INT 1
21014: EQUAL
21015: IFFALSE 24181
// begin case mission_number of 1 :
21017: LD_OWVAR 70
21021: PUSH
21022: LD_INT 1
21024: DOUBLE
21025: EQUAL
21026: IFTRUE 21030
21028: GO 21106
21030: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21031: LD_ADDR_VAR 0 2
21035: PUSH
21036: LD_INT 2
21038: PUSH
21039: LD_INT 4
21041: PUSH
21042: LD_INT 11
21044: PUSH
21045: LD_INT 12
21047: PUSH
21048: LD_INT 15
21050: PUSH
21051: LD_INT 16
21053: PUSH
21054: LD_INT 22
21056: PUSH
21057: LD_INT 23
21059: PUSH
21060: LD_INT 26
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 101
21076: PUSH
21077: LD_INT 102
21079: PUSH
21080: LD_INT 106
21082: PUSH
21083: LD_INT 116
21085: PUSH
21086: LD_INT 117
21088: PUSH
21089: LD_INT 118
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: ST_TO_ADDR
21104: GO 24179
21106: LD_INT 2
21108: DOUBLE
21109: EQUAL
21110: IFTRUE 21114
21112: GO 21198
21114: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21115: LD_ADDR_VAR 0 2
21119: PUSH
21120: LD_INT 2
21122: PUSH
21123: LD_INT 4
21125: PUSH
21126: LD_INT 11
21128: PUSH
21129: LD_INT 12
21131: PUSH
21132: LD_INT 15
21134: PUSH
21135: LD_INT 16
21137: PUSH
21138: LD_INT 22
21140: PUSH
21141: LD_INT 23
21143: PUSH
21144: LD_INT 26
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 101
21160: PUSH
21161: LD_INT 102
21163: PUSH
21164: LD_INT 105
21166: PUSH
21167: LD_INT 106
21169: PUSH
21170: LD_INT 108
21172: PUSH
21173: LD_INT 116
21175: PUSH
21176: LD_INT 117
21178: PUSH
21179: LD_INT 118
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: ST_TO_ADDR
21196: GO 24179
21198: LD_INT 3
21200: DOUBLE
21201: EQUAL
21202: IFTRUE 21206
21204: GO 21294
21206: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21207: LD_ADDR_VAR 0 2
21211: PUSH
21212: LD_INT 2
21214: PUSH
21215: LD_INT 4
21217: PUSH
21218: LD_INT 5
21220: PUSH
21221: LD_INT 11
21223: PUSH
21224: LD_INT 12
21226: PUSH
21227: LD_INT 15
21229: PUSH
21230: LD_INT 16
21232: PUSH
21233: LD_INT 22
21235: PUSH
21236: LD_INT 26
21238: PUSH
21239: LD_INT 36
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 101
21256: PUSH
21257: LD_INT 102
21259: PUSH
21260: LD_INT 105
21262: PUSH
21263: LD_INT 106
21265: PUSH
21266: LD_INT 108
21268: PUSH
21269: LD_INT 116
21271: PUSH
21272: LD_INT 117
21274: PUSH
21275: LD_INT 118
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: ST_TO_ADDR
21292: GO 24179
21294: LD_INT 4
21296: DOUBLE
21297: EQUAL
21298: IFTRUE 21302
21300: GO 21398
21302: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21303: LD_ADDR_VAR 0 2
21307: PUSH
21308: LD_INT 2
21310: PUSH
21311: LD_INT 4
21313: PUSH
21314: LD_INT 5
21316: PUSH
21317: LD_INT 8
21319: PUSH
21320: LD_INT 11
21322: PUSH
21323: LD_INT 12
21325: PUSH
21326: LD_INT 15
21328: PUSH
21329: LD_INT 16
21331: PUSH
21332: LD_INT 22
21334: PUSH
21335: LD_INT 23
21337: PUSH
21338: LD_INT 26
21340: PUSH
21341: LD_INT 36
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 101
21360: PUSH
21361: LD_INT 102
21363: PUSH
21364: LD_INT 105
21366: PUSH
21367: LD_INT 106
21369: PUSH
21370: LD_INT 108
21372: PUSH
21373: LD_INT 116
21375: PUSH
21376: LD_INT 117
21378: PUSH
21379: LD_INT 118
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: ST_TO_ADDR
21396: GO 24179
21398: LD_INT 5
21400: DOUBLE
21401: EQUAL
21402: IFTRUE 21406
21404: GO 21518
21406: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21407: LD_ADDR_VAR 0 2
21411: PUSH
21412: LD_INT 2
21414: PUSH
21415: LD_INT 4
21417: PUSH
21418: LD_INT 5
21420: PUSH
21421: LD_INT 6
21423: PUSH
21424: LD_INT 8
21426: PUSH
21427: LD_INT 11
21429: PUSH
21430: LD_INT 12
21432: PUSH
21433: LD_INT 15
21435: PUSH
21436: LD_INT 16
21438: PUSH
21439: LD_INT 22
21441: PUSH
21442: LD_INT 23
21444: PUSH
21445: LD_INT 25
21447: PUSH
21448: LD_INT 26
21450: PUSH
21451: LD_INT 36
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 101
21472: PUSH
21473: LD_INT 102
21475: PUSH
21476: LD_INT 105
21478: PUSH
21479: LD_INT 106
21481: PUSH
21482: LD_INT 108
21484: PUSH
21485: LD_INT 109
21487: PUSH
21488: LD_INT 112
21490: PUSH
21491: LD_INT 116
21493: PUSH
21494: LD_INT 117
21496: PUSH
21497: LD_INT 118
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: ST_TO_ADDR
21516: GO 24179
21518: LD_INT 6
21520: DOUBLE
21521: EQUAL
21522: IFTRUE 21526
21524: GO 21658
21526: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21527: LD_ADDR_VAR 0 2
21531: PUSH
21532: LD_INT 2
21534: PUSH
21535: LD_INT 4
21537: PUSH
21538: LD_INT 5
21540: PUSH
21541: LD_INT 6
21543: PUSH
21544: LD_INT 8
21546: PUSH
21547: LD_INT 11
21549: PUSH
21550: LD_INT 12
21552: PUSH
21553: LD_INT 15
21555: PUSH
21556: LD_INT 16
21558: PUSH
21559: LD_INT 20
21561: PUSH
21562: LD_INT 21
21564: PUSH
21565: LD_INT 22
21567: PUSH
21568: LD_INT 23
21570: PUSH
21571: LD_INT 25
21573: PUSH
21574: LD_INT 26
21576: PUSH
21577: LD_INT 30
21579: PUSH
21580: LD_INT 31
21582: PUSH
21583: LD_INT 32
21585: PUSH
21586: LD_INT 36
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 101
21612: PUSH
21613: LD_INT 102
21615: PUSH
21616: LD_INT 105
21618: PUSH
21619: LD_INT 106
21621: PUSH
21622: LD_INT 108
21624: PUSH
21625: LD_INT 109
21627: PUSH
21628: LD_INT 112
21630: PUSH
21631: LD_INT 116
21633: PUSH
21634: LD_INT 117
21636: PUSH
21637: LD_INT 118
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: ST_TO_ADDR
21656: GO 24179
21658: LD_INT 7
21660: DOUBLE
21661: EQUAL
21662: IFTRUE 21666
21664: GO 21778
21666: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21667: LD_ADDR_VAR 0 2
21671: PUSH
21672: LD_INT 2
21674: PUSH
21675: LD_INT 4
21677: PUSH
21678: LD_INT 5
21680: PUSH
21681: LD_INT 7
21683: PUSH
21684: LD_INT 11
21686: PUSH
21687: LD_INT 12
21689: PUSH
21690: LD_INT 15
21692: PUSH
21693: LD_INT 16
21695: PUSH
21696: LD_INT 20
21698: PUSH
21699: LD_INT 21
21701: PUSH
21702: LD_INT 22
21704: PUSH
21705: LD_INT 23
21707: PUSH
21708: LD_INT 25
21710: PUSH
21711: LD_INT 26
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 101
21732: PUSH
21733: LD_INT 102
21735: PUSH
21736: LD_INT 103
21738: PUSH
21739: LD_INT 105
21741: PUSH
21742: LD_INT 106
21744: PUSH
21745: LD_INT 108
21747: PUSH
21748: LD_INT 112
21750: PUSH
21751: LD_INT 116
21753: PUSH
21754: LD_INT 117
21756: PUSH
21757: LD_INT 118
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: ST_TO_ADDR
21776: GO 24179
21778: LD_INT 8
21780: DOUBLE
21781: EQUAL
21782: IFTRUE 21786
21784: GO 21926
21786: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21787: LD_ADDR_VAR 0 2
21791: PUSH
21792: LD_INT 2
21794: PUSH
21795: LD_INT 4
21797: PUSH
21798: LD_INT 5
21800: PUSH
21801: LD_INT 6
21803: PUSH
21804: LD_INT 7
21806: PUSH
21807: LD_INT 8
21809: PUSH
21810: LD_INT 11
21812: PUSH
21813: LD_INT 12
21815: PUSH
21816: LD_INT 15
21818: PUSH
21819: LD_INT 16
21821: PUSH
21822: LD_INT 20
21824: PUSH
21825: LD_INT 21
21827: PUSH
21828: LD_INT 22
21830: PUSH
21831: LD_INT 23
21833: PUSH
21834: LD_INT 25
21836: PUSH
21837: LD_INT 26
21839: PUSH
21840: LD_INT 30
21842: PUSH
21843: LD_INT 31
21845: PUSH
21846: LD_INT 32
21848: PUSH
21849: LD_INT 36
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 101
21876: PUSH
21877: LD_INT 102
21879: PUSH
21880: LD_INT 103
21882: PUSH
21883: LD_INT 105
21885: PUSH
21886: LD_INT 106
21888: PUSH
21889: LD_INT 108
21891: PUSH
21892: LD_INT 109
21894: PUSH
21895: LD_INT 112
21897: PUSH
21898: LD_INT 116
21900: PUSH
21901: LD_INT 117
21903: PUSH
21904: LD_INT 118
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: ST_TO_ADDR
21924: GO 24179
21926: LD_INT 9
21928: DOUBLE
21929: EQUAL
21930: IFTRUE 21934
21932: GO 22082
21934: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21935: LD_ADDR_VAR 0 2
21939: PUSH
21940: LD_INT 2
21942: PUSH
21943: LD_INT 4
21945: PUSH
21946: LD_INT 5
21948: PUSH
21949: LD_INT 6
21951: PUSH
21952: LD_INT 7
21954: PUSH
21955: LD_INT 8
21957: PUSH
21958: LD_INT 11
21960: PUSH
21961: LD_INT 12
21963: PUSH
21964: LD_INT 15
21966: PUSH
21967: LD_INT 16
21969: PUSH
21970: LD_INT 20
21972: PUSH
21973: LD_INT 21
21975: PUSH
21976: LD_INT 22
21978: PUSH
21979: LD_INT 23
21981: PUSH
21982: LD_INT 25
21984: PUSH
21985: LD_INT 26
21987: PUSH
21988: LD_INT 28
21990: PUSH
21991: LD_INT 30
21993: PUSH
21994: LD_INT 31
21996: PUSH
21997: LD_INT 32
21999: PUSH
22000: LD_INT 36
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 101
22028: PUSH
22029: LD_INT 102
22031: PUSH
22032: LD_INT 103
22034: PUSH
22035: LD_INT 105
22037: PUSH
22038: LD_INT 106
22040: PUSH
22041: LD_INT 108
22043: PUSH
22044: LD_INT 109
22046: PUSH
22047: LD_INT 112
22049: PUSH
22050: LD_INT 114
22052: PUSH
22053: LD_INT 116
22055: PUSH
22056: LD_INT 117
22058: PUSH
22059: LD_INT 118
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: ST_TO_ADDR
22080: GO 24179
22082: LD_INT 10
22084: DOUBLE
22085: EQUAL
22086: IFTRUE 22090
22088: GO 22286
22090: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22091: LD_ADDR_VAR 0 2
22095: PUSH
22096: LD_INT 2
22098: PUSH
22099: LD_INT 4
22101: PUSH
22102: LD_INT 5
22104: PUSH
22105: LD_INT 6
22107: PUSH
22108: LD_INT 7
22110: PUSH
22111: LD_INT 8
22113: PUSH
22114: LD_INT 9
22116: PUSH
22117: LD_INT 10
22119: PUSH
22120: LD_INT 11
22122: PUSH
22123: LD_INT 12
22125: PUSH
22126: LD_INT 13
22128: PUSH
22129: LD_INT 14
22131: PUSH
22132: LD_INT 15
22134: PUSH
22135: LD_INT 16
22137: PUSH
22138: LD_INT 17
22140: PUSH
22141: LD_INT 18
22143: PUSH
22144: LD_INT 19
22146: PUSH
22147: LD_INT 20
22149: PUSH
22150: LD_INT 21
22152: PUSH
22153: LD_INT 22
22155: PUSH
22156: LD_INT 23
22158: PUSH
22159: LD_INT 24
22161: PUSH
22162: LD_INT 25
22164: PUSH
22165: LD_INT 26
22167: PUSH
22168: LD_INT 28
22170: PUSH
22171: LD_INT 30
22173: PUSH
22174: LD_INT 31
22176: PUSH
22177: LD_INT 32
22179: PUSH
22180: LD_INT 36
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 101
22216: PUSH
22217: LD_INT 102
22219: PUSH
22220: LD_INT 103
22222: PUSH
22223: LD_INT 104
22225: PUSH
22226: LD_INT 105
22228: PUSH
22229: LD_INT 106
22231: PUSH
22232: LD_INT 107
22234: PUSH
22235: LD_INT 108
22237: PUSH
22238: LD_INT 109
22240: PUSH
22241: LD_INT 110
22243: PUSH
22244: LD_INT 111
22246: PUSH
22247: LD_INT 112
22249: PUSH
22250: LD_INT 114
22252: PUSH
22253: LD_INT 116
22255: PUSH
22256: LD_INT 117
22258: PUSH
22259: LD_INT 118
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: ST_TO_ADDR
22284: GO 24179
22286: LD_INT 11
22288: DOUBLE
22289: EQUAL
22290: IFTRUE 22294
22292: GO 22498
22294: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22295: LD_ADDR_VAR 0 2
22299: PUSH
22300: LD_INT 2
22302: PUSH
22303: LD_INT 3
22305: PUSH
22306: LD_INT 4
22308: PUSH
22309: LD_INT 5
22311: PUSH
22312: LD_INT 6
22314: PUSH
22315: LD_INT 7
22317: PUSH
22318: LD_INT 8
22320: PUSH
22321: LD_INT 9
22323: PUSH
22324: LD_INT 10
22326: PUSH
22327: LD_INT 11
22329: PUSH
22330: LD_INT 12
22332: PUSH
22333: LD_INT 13
22335: PUSH
22336: LD_INT 14
22338: PUSH
22339: LD_INT 15
22341: PUSH
22342: LD_INT 16
22344: PUSH
22345: LD_INT 17
22347: PUSH
22348: LD_INT 18
22350: PUSH
22351: LD_INT 19
22353: PUSH
22354: LD_INT 20
22356: PUSH
22357: LD_INT 21
22359: PUSH
22360: LD_INT 22
22362: PUSH
22363: LD_INT 23
22365: PUSH
22366: LD_INT 24
22368: PUSH
22369: LD_INT 25
22371: PUSH
22372: LD_INT 26
22374: PUSH
22375: LD_INT 28
22377: PUSH
22378: LD_INT 30
22380: PUSH
22381: LD_INT 31
22383: PUSH
22384: LD_INT 32
22386: PUSH
22387: LD_INT 34
22389: PUSH
22390: LD_INT 36
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 101
22428: PUSH
22429: LD_INT 102
22431: PUSH
22432: LD_INT 103
22434: PUSH
22435: LD_INT 104
22437: PUSH
22438: LD_INT 105
22440: PUSH
22441: LD_INT 106
22443: PUSH
22444: LD_INT 107
22446: PUSH
22447: LD_INT 108
22449: PUSH
22450: LD_INT 109
22452: PUSH
22453: LD_INT 110
22455: PUSH
22456: LD_INT 111
22458: PUSH
22459: LD_INT 112
22461: PUSH
22462: LD_INT 114
22464: PUSH
22465: LD_INT 116
22467: PUSH
22468: LD_INT 117
22470: PUSH
22471: LD_INT 118
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: ST_TO_ADDR
22496: GO 24179
22498: LD_INT 12
22500: DOUBLE
22501: EQUAL
22502: IFTRUE 22506
22504: GO 22726
22506: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22507: LD_ADDR_VAR 0 2
22511: PUSH
22512: LD_INT 1
22514: PUSH
22515: LD_INT 2
22517: PUSH
22518: LD_INT 3
22520: PUSH
22521: LD_INT 4
22523: PUSH
22524: LD_INT 5
22526: PUSH
22527: LD_INT 6
22529: PUSH
22530: LD_INT 7
22532: PUSH
22533: LD_INT 8
22535: PUSH
22536: LD_INT 9
22538: PUSH
22539: LD_INT 10
22541: PUSH
22542: LD_INT 11
22544: PUSH
22545: LD_INT 12
22547: PUSH
22548: LD_INT 13
22550: PUSH
22551: LD_INT 14
22553: PUSH
22554: LD_INT 15
22556: PUSH
22557: LD_INT 16
22559: PUSH
22560: LD_INT 17
22562: PUSH
22563: LD_INT 18
22565: PUSH
22566: LD_INT 19
22568: PUSH
22569: LD_INT 20
22571: PUSH
22572: LD_INT 21
22574: PUSH
22575: LD_INT 22
22577: PUSH
22578: LD_INT 23
22580: PUSH
22581: LD_INT 24
22583: PUSH
22584: LD_INT 25
22586: PUSH
22587: LD_INT 26
22589: PUSH
22590: LD_INT 27
22592: PUSH
22593: LD_INT 28
22595: PUSH
22596: LD_INT 30
22598: PUSH
22599: LD_INT 31
22601: PUSH
22602: LD_INT 32
22604: PUSH
22605: LD_INT 33
22607: PUSH
22608: LD_INT 34
22610: PUSH
22611: LD_INT 36
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 101
22652: PUSH
22653: LD_INT 102
22655: PUSH
22656: LD_INT 103
22658: PUSH
22659: LD_INT 104
22661: PUSH
22662: LD_INT 105
22664: PUSH
22665: LD_INT 106
22667: PUSH
22668: LD_INT 107
22670: PUSH
22671: LD_INT 108
22673: PUSH
22674: LD_INT 109
22676: PUSH
22677: LD_INT 110
22679: PUSH
22680: LD_INT 111
22682: PUSH
22683: LD_INT 112
22685: PUSH
22686: LD_INT 113
22688: PUSH
22689: LD_INT 114
22691: PUSH
22692: LD_INT 116
22694: PUSH
22695: LD_INT 117
22697: PUSH
22698: LD_INT 118
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: ST_TO_ADDR
22724: GO 24179
22726: LD_INT 13
22728: DOUBLE
22729: EQUAL
22730: IFTRUE 22734
22732: GO 22942
22734: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22735: LD_ADDR_VAR 0 2
22739: PUSH
22740: LD_INT 1
22742: PUSH
22743: LD_INT 2
22745: PUSH
22746: LD_INT 3
22748: PUSH
22749: LD_INT 4
22751: PUSH
22752: LD_INT 5
22754: PUSH
22755: LD_INT 8
22757: PUSH
22758: LD_INT 9
22760: PUSH
22761: LD_INT 10
22763: PUSH
22764: LD_INT 11
22766: PUSH
22767: LD_INT 12
22769: PUSH
22770: LD_INT 14
22772: PUSH
22773: LD_INT 15
22775: PUSH
22776: LD_INT 16
22778: PUSH
22779: LD_INT 17
22781: PUSH
22782: LD_INT 18
22784: PUSH
22785: LD_INT 19
22787: PUSH
22788: LD_INT 20
22790: PUSH
22791: LD_INT 21
22793: PUSH
22794: LD_INT 22
22796: PUSH
22797: LD_INT 23
22799: PUSH
22800: LD_INT 24
22802: PUSH
22803: LD_INT 25
22805: PUSH
22806: LD_INT 26
22808: PUSH
22809: LD_INT 27
22811: PUSH
22812: LD_INT 28
22814: PUSH
22815: LD_INT 30
22817: PUSH
22818: LD_INT 31
22820: PUSH
22821: LD_INT 32
22823: PUSH
22824: LD_INT 33
22826: PUSH
22827: LD_INT 34
22829: PUSH
22830: LD_INT 36
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 101
22868: PUSH
22869: LD_INT 102
22871: PUSH
22872: LD_INT 103
22874: PUSH
22875: LD_INT 104
22877: PUSH
22878: LD_INT 105
22880: PUSH
22881: LD_INT 106
22883: PUSH
22884: LD_INT 107
22886: PUSH
22887: LD_INT 108
22889: PUSH
22890: LD_INT 109
22892: PUSH
22893: LD_INT 110
22895: PUSH
22896: LD_INT 111
22898: PUSH
22899: LD_INT 112
22901: PUSH
22902: LD_INT 113
22904: PUSH
22905: LD_INT 114
22907: PUSH
22908: LD_INT 116
22910: PUSH
22911: LD_INT 117
22913: PUSH
22914: LD_INT 118
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: ST_TO_ADDR
22940: GO 24179
22942: LD_INT 14
22944: DOUBLE
22945: EQUAL
22946: IFTRUE 22950
22948: GO 23174
22950: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22951: LD_ADDR_VAR 0 2
22955: PUSH
22956: LD_INT 1
22958: PUSH
22959: LD_INT 2
22961: PUSH
22962: LD_INT 3
22964: PUSH
22965: LD_INT 4
22967: PUSH
22968: LD_INT 5
22970: PUSH
22971: LD_INT 6
22973: PUSH
22974: LD_INT 7
22976: PUSH
22977: LD_INT 8
22979: PUSH
22980: LD_INT 9
22982: PUSH
22983: LD_INT 10
22985: PUSH
22986: LD_INT 11
22988: PUSH
22989: LD_INT 12
22991: PUSH
22992: LD_INT 13
22994: PUSH
22995: LD_INT 14
22997: PUSH
22998: LD_INT 15
23000: PUSH
23001: LD_INT 16
23003: PUSH
23004: LD_INT 17
23006: PUSH
23007: LD_INT 18
23009: PUSH
23010: LD_INT 19
23012: PUSH
23013: LD_INT 20
23015: PUSH
23016: LD_INT 21
23018: PUSH
23019: LD_INT 22
23021: PUSH
23022: LD_INT 23
23024: PUSH
23025: LD_INT 24
23027: PUSH
23028: LD_INT 25
23030: PUSH
23031: LD_INT 26
23033: PUSH
23034: LD_INT 27
23036: PUSH
23037: LD_INT 28
23039: PUSH
23040: LD_INT 29
23042: PUSH
23043: LD_INT 30
23045: PUSH
23046: LD_INT 31
23048: PUSH
23049: LD_INT 32
23051: PUSH
23052: LD_INT 33
23054: PUSH
23055: LD_INT 34
23057: PUSH
23058: LD_INT 36
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 101
23100: PUSH
23101: LD_INT 102
23103: PUSH
23104: LD_INT 103
23106: PUSH
23107: LD_INT 104
23109: PUSH
23110: LD_INT 105
23112: PUSH
23113: LD_INT 106
23115: PUSH
23116: LD_INT 107
23118: PUSH
23119: LD_INT 108
23121: PUSH
23122: LD_INT 109
23124: PUSH
23125: LD_INT 110
23127: PUSH
23128: LD_INT 111
23130: PUSH
23131: LD_INT 112
23133: PUSH
23134: LD_INT 113
23136: PUSH
23137: LD_INT 114
23139: PUSH
23140: LD_INT 116
23142: PUSH
23143: LD_INT 117
23145: PUSH
23146: LD_INT 118
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: ST_TO_ADDR
23172: GO 24179
23174: LD_INT 15
23176: DOUBLE
23177: EQUAL
23178: IFTRUE 23182
23180: GO 23406
23182: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23183: LD_ADDR_VAR 0 2
23187: PUSH
23188: LD_INT 1
23190: PUSH
23191: LD_INT 2
23193: PUSH
23194: LD_INT 3
23196: PUSH
23197: LD_INT 4
23199: PUSH
23200: LD_INT 5
23202: PUSH
23203: LD_INT 6
23205: PUSH
23206: LD_INT 7
23208: PUSH
23209: LD_INT 8
23211: PUSH
23212: LD_INT 9
23214: PUSH
23215: LD_INT 10
23217: PUSH
23218: LD_INT 11
23220: PUSH
23221: LD_INT 12
23223: PUSH
23224: LD_INT 13
23226: PUSH
23227: LD_INT 14
23229: PUSH
23230: LD_INT 15
23232: PUSH
23233: LD_INT 16
23235: PUSH
23236: LD_INT 17
23238: PUSH
23239: LD_INT 18
23241: PUSH
23242: LD_INT 19
23244: PUSH
23245: LD_INT 20
23247: PUSH
23248: LD_INT 21
23250: PUSH
23251: LD_INT 22
23253: PUSH
23254: LD_INT 23
23256: PUSH
23257: LD_INT 24
23259: PUSH
23260: LD_INT 25
23262: PUSH
23263: LD_INT 26
23265: PUSH
23266: LD_INT 27
23268: PUSH
23269: LD_INT 28
23271: PUSH
23272: LD_INT 29
23274: PUSH
23275: LD_INT 30
23277: PUSH
23278: LD_INT 31
23280: PUSH
23281: LD_INT 32
23283: PUSH
23284: LD_INT 33
23286: PUSH
23287: LD_INT 34
23289: PUSH
23290: LD_INT 36
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 101
23332: PUSH
23333: LD_INT 102
23335: PUSH
23336: LD_INT 103
23338: PUSH
23339: LD_INT 104
23341: PUSH
23342: LD_INT 105
23344: PUSH
23345: LD_INT 106
23347: PUSH
23348: LD_INT 107
23350: PUSH
23351: LD_INT 108
23353: PUSH
23354: LD_INT 109
23356: PUSH
23357: LD_INT 110
23359: PUSH
23360: LD_INT 111
23362: PUSH
23363: LD_INT 112
23365: PUSH
23366: LD_INT 113
23368: PUSH
23369: LD_INT 114
23371: PUSH
23372: LD_INT 116
23374: PUSH
23375: LD_INT 117
23377: PUSH
23378: LD_INT 118
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: ST_TO_ADDR
23404: GO 24179
23406: LD_INT 16
23408: DOUBLE
23409: EQUAL
23410: IFTRUE 23414
23412: GO 23550
23414: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23415: LD_ADDR_VAR 0 2
23419: PUSH
23420: LD_INT 2
23422: PUSH
23423: LD_INT 4
23425: PUSH
23426: LD_INT 5
23428: PUSH
23429: LD_INT 7
23431: PUSH
23432: LD_INT 11
23434: PUSH
23435: LD_INT 12
23437: PUSH
23438: LD_INT 15
23440: PUSH
23441: LD_INT 16
23443: PUSH
23444: LD_INT 20
23446: PUSH
23447: LD_INT 21
23449: PUSH
23450: LD_INT 22
23452: PUSH
23453: LD_INT 23
23455: PUSH
23456: LD_INT 25
23458: PUSH
23459: LD_INT 26
23461: PUSH
23462: LD_INT 30
23464: PUSH
23465: LD_INT 31
23467: PUSH
23468: LD_INT 32
23470: PUSH
23471: LD_INT 33
23473: PUSH
23474: LD_INT 34
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 101
23500: PUSH
23501: LD_INT 102
23503: PUSH
23504: LD_INT 103
23506: PUSH
23507: LD_INT 106
23509: PUSH
23510: LD_INT 108
23512: PUSH
23513: LD_INT 112
23515: PUSH
23516: LD_INT 113
23518: PUSH
23519: LD_INT 114
23521: PUSH
23522: LD_INT 116
23524: PUSH
23525: LD_INT 117
23527: PUSH
23528: LD_INT 118
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: ST_TO_ADDR
23548: GO 24179
23550: LD_INT 17
23552: DOUBLE
23553: EQUAL
23554: IFTRUE 23558
23556: GO 23782
23558: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23559: LD_ADDR_VAR 0 2
23563: PUSH
23564: LD_INT 1
23566: PUSH
23567: LD_INT 2
23569: PUSH
23570: LD_INT 3
23572: PUSH
23573: LD_INT 4
23575: PUSH
23576: LD_INT 5
23578: PUSH
23579: LD_INT 6
23581: PUSH
23582: LD_INT 7
23584: PUSH
23585: LD_INT 8
23587: PUSH
23588: LD_INT 9
23590: PUSH
23591: LD_INT 10
23593: PUSH
23594: LD_INT 11
23596: PUSH
23597: LD_INT 12
23599: PUSH
23600: LD_INT 13
23602: PUSH
23603: LD_INT 14
23605: PUSH
23606: LD_INT 15
23608: PUSH
23609: LD_INT 16
23611: PUSH
23612: LD_INT 17
23614: PUSH
23615: LD_INT 18
23617: PUSH
23618: LD_INT 19
23620: PUSH
23621: LD_INT 20
23623: PUSH
23624: LD_INT 21
23626: PUSH
23627: LD_INT 22
23629: PUSH
23630: LD_INT 23
23632: PUSH
23633: LD_INT 24
23635: PUSH
23636: LD_INT 25
23638: PUSH
23639: LD_INT 26
23641: PUSH
23642: LD_INT 27
23644: PUSH
23645: LD_INT 28
23647: PUSH
23648: LD_INT 29
23650: PUSH
23651: LD_INT 30
23653: PUSH
23654: LD_INT 31
23656: PUSH
23657: LD_INT 32
23659: PUSH
23660: LD_INT 33
23662: PUSH
23663: LD_INT 34
23665: PUSH
23666: LD_INT 36
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 101
23708: PUSH
23709: LD_INT 102
23711: PUSH
23712: LD_INT 103
23714: PUSH
23715: LD_INT 104
23717: PUSH
23718: LD_INT 105
23720: PUSH
23721: LD_INT 106
23723: PUSH
23724: LD_INT 107
23726: PUSH
23727: LD_INT 108
23729: PUSH
23730: LD_INT 109
23732: PUSH
23733: LD_INT 110
23735: PUSH
23736: LD_INT 111
23738: PUSH
23739: LD_INT 112
23741: PUSH
23742: LD_INT 113
23744: PUSH
23745: LD_INT 114
23747: PUSH
23748: LD_INT 116
23750: PUSH
23751: LD_INT 117
23753: PUSH
23754: LD_INT 118
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: ST_TO_ADDR
23780: GO 24179
23782: LD_INT 18
23784: DOUBLE
23785: EQUAL
23786: IFTRUE 23790
23788: GO 23938
23790: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23791: LD_ADDR_VAR 0 2
23795: PUSH
23796: LD_INT 2
23798: PUSH
23799: LD_INT 4
23801: PUSH
23802: LD_INT 5
23804: PUSH
23805: LD_INT 7
23807: PUSH
23808: LD_INT 11
23810: PUSH
23811: LD_INT 12
23813: PUSH
23814: LD_INT 15
23816: PUSH
23817: LD_INT 16
23819: PUSH
23820: LD_INT 20
23822: PUSH
23823: LD_INT 21
23825: PUSH
23826: LD_INT 22
23828: PUSH
23829: LD_INT 23
23831: PUSH
23832: LD_INT 25
23834: PUSH
23835: LD_INT 26
23837: PUSH
23838: LD_INT 30
23840: PUSH
23841: LD_INT 31
23843: PUSH
23844: LD_INT 32
23846: PUSH
23847: LD_INT 33
23849: PUSH
23850: LD_INT 34
23852: PUSH
23853: LD_INT 35
23855: PUSH
23856: LD_INT 36
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 101
23884: PUSH
23885: LD_INT 102
23887: PUSH
23888: LD_INT 103
23890: PUSH
23891: LD_INT 106
23893: PUSH
23894: LD_INT 108
23896: PUSH
23897: LD_INT 112
23899: PUSH
23900: LD_INT 113
23902: PUSH
23903: LD_INT 114
23905: PUSH
23906: LD_INT 115
23908: PUSH
23909: LD_INT 116
23911: PUSH
23912: LD_INT 117
23914: PUSH
23915: LD_INT 118
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: ST_TO_ADDR
23936: GO 24179
23938: LD_INT 19
23940: DOUBLE
23941: EQUAL
23942: IFTRUE 23946
23944: GO 24178
23946: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23947: LD_ADDR_VAR 0 2
23951: PUSH
23952: LD_INT 1
23954: PUSH
23955: LD_INT 2
23957: PUSH
23958: LD_INT 3
23960: PUSH
23961: LD_INT 4
23963: PUSH
23964: LD_INT 5
23966: PUSH
23967: LD_INT 6
23969: PUSH
23970: LD_INT 7
23972: PUSH
23973: LD_INT 8
23975: PUSH
23976: LD_INT 9
23978: PUSH
23979: LD_INT 10
23981: PUSH
23982: LD_INT 11
23984: PUSH
23985: LD_INT 12
23987: PUSH
23988: LD_INT 13
23990: PUSH
23991: LD_INT 14
23993: PUSH
23994: LD_INT 15
23996: PUSH
23997: LD_INT 16
23999: PUSH
24000: LD_INT 17
24002: PUSH
24003: LD_INT 18
24005: PUSH
24006: LD_INT 19
24008: PUSH
24009: LD_INT 20
24011: PUSH
24012: LD_INT 21
24014: PUSH
24015: LD_INT 22
24017: PUSH
24018: LD_INT 23
24020: PUSH
24021: LD_INT 24
24023: PUSH
24024: LD_INT 25
24026: PUSH
24027: LD_INT 26
24029: PUSH
24030: LD_INT 27
24032: PUSH
24033: LD_INT 28
24035: PUSH
24036: LD_INT 29
24038: PUSH
24039: LD_INT 30
24041: PUSH
24042: LD_INT 31
24044: PUSH
24045: LD_INT 32
24047: PUSH
24048: LD_INT 33
24050: PUSH
24051: LD_INT 34
24053: PUSH
24054: LD_INT 35
24056: PUSH
24057: LD_INT 36
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 101
24100: PUSH
24101: LD_INT 102
24103: PUSH
24104: LD_INT 103
24106: PUSH
24107: LD_INT 104
24109: PUSH
24110: LD_INT 105
24112: PUSH
24113: LD_INT 106
24115: PUSH
24116: LD_INT 107
24118: PUSH
24119: LD_INT 108
24121: PUSH
24122: LD_INT 109
24124: PUSH
24125: LD_INT 110
24127: PUSH
24128: LD_INT 111
24130: PUSH
24131: LD_INT 112
24133: PUSH
24134: LD_INT 113
24136: PUSH
24137: LD_INT 114
24139: PUSH
24140: LD_INT 115
24142: PUSH
24143: LD_INT 116
24145: PUSH
24146: LD_INT 117
24148: PUSH
24149: LD_INT 118
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: ST_TO_ADDR
24176: GO 24179
24178: POP
// end else
24179: GO 24410
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24181: LD_ADDR_VAR 0 2
24185: PUSH
24186: LD_INT 1
24188: PUSH
24189: LD_INT 2
24191: PUSH
24192: LD_INT 3
24194: PUSH
24195: LD_INT 4
24197: PUSH
24198: LD_INT 5
24200: PUSH
24201: LD_INT 6
24203: PUSH
24204: LD_INT 7
24206: PUSH
24207: LD_INT 8
24209: PUSH
24210: LD_INT 9
24212: PUSH
24213: LD_INT 10
24215: PUSH
24216: LD_INT 11
24218: PUSH
24219: LD_INT 12
24221: PUSH
24222: LD_INT 13
24224: PUSH
24225: LD_INT 14
24227: PUSH
24228: LD_INT 15
24230: PUSH
24231: LD_INT 16
24233: PUSH
24234: LD_INT 17
24236: PUSH
24237: LD_INT 18
24239: PUSH
24240: LD_INT 19
24242: PUSH
24243: LD_INT 20
24245: PUSH
24246: LD_INT 21
24248: PUSH
24249: LD_INT 22
24251: PUSH
24252: LD_INT 23
24254: PUSH
24255: LD_INT 24
24257: PUSH
24258: LD_INT 25
24260: PUSH
24261: LD_INT 26
24263: PUSH
24264: LD_INT 27
24266: PUSH
24267: LD_INT 28
24269: PUSH
24270: LD_INT 29
24272: PUSH
24273: LD_INT 30
24275: PUSH
24276: LD_INT 31
24278: PUSH
24279: LD_INT 32
24281: PUSH
24282: LD_INT 33
24284: PUSH
24285: LD_INT 34
24287: PUSH
24288: LD_INT 35
24290: PUSH
24291: LD_INT 36
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 101
24334: PUSH
24335: LD_INT 102
24337: PUSH
24338: LD_INT 103
24340: PUSH
24341: LD_INT 104
24343: PUSH
24344: LD_INT 105
24346: PUSH
24347: LD_INT 106
24349: PUSH
24350: LD_INT 107
24352: PUSH
24353: LD_INT 108
24355: PUSH
24356: LD_INT 109
24358: PUSH
24359: LD_INT 110
24361: PUSH
24362: LD_INT 111
24364: PUSH
24365: LD_INT 112
24367: PUSH
24368: LD_INT 113
24370: PUSH
24371: LD_INT 114
24373: PUSH
24374: LD_INT 115
24376: PUSH
24377: LD_INT 116
24379: PUSH
24380: LD_INT 117
24382: PUSH
24383: LD_INT 118
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: ST_TO_ADDR
// if result then
24410: LD_VAR 0 2
24414: IFFALSE 25200
// begin normal :=  ;
24416: LD_ADDR_VAR 0 5
24420: PUSH
24421: LD_STRING 
24423: ST_TO_ADDR
// hardcore :=  ;
24424: LD_ADDR_VAR 0 6
24428: PUSH
24429: LD_STRING 
24431: ST_TO_ADDR
// active :=  ;
24432: LD_ADDR_VAR 0 7
24436: PUSH
24437: LD_STRING 
24439: ST_TO_ADDR
// for i = 1 to normalCounter do
24440: LD_ADDR_VAR 0 8
24444: PUSH
24445: DOUBLE
24446: LD_INT 1
24448: DEC
24449: ST_TO_ADDR
24450: LD_EXP 64
24454: PUSH
24455: FOR_TO
24456: IFFALSE 24557
// begin tmp := 0 ;
24458: LD_ADDR_VAR 0 3
24462: PUSH
24463: LD_STRING 0
24465: ST_TO_ADDR
// if result [ 1 ] then
24466: LD_VAR 0 2
24470: PUSH
24471: LD_INT 1
24473: ARRAY
24474: IFFALSE 24539
// if result [ 1 ] [ 1 ] = i then
24476: LD_VAR 0 2
24480: PUSH
24481: LD_INT 1
24483: ARRAY
24484: PUSH
24485: LD_INT 1
24487: ARRAY
24488: PUSH
24489: LD_VAR 0 8
24493: EQUAL
24494: IFFALSE 24539
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24496: LD_ADDR_VAR 0 2
24500: PUSH
24501: LD_VAR 0 2
24505: PPUSH
24506: LD_INT 1
24508: PPUSH
24509: LD_VAR 0 2
24513: PUSH
24514: LD_INT 1
24516: ARRAY
24517: PPUSH
24518: LD_INT 1
24520: PPUSH
24521: CALL_OW 3
24525: PPUSH
24526: CALL_OW 1
24530: ST_TO_ADDR
// tmp := 1 ;
24531: LD_ADDR_VAR 0 3
24535: PUSH
24536: LD_STRING 1
24538: ST_TO_ADDR
// end ; normal := normal & tmp ;
24539: LD_ADDR_VAR 0 5
24543: PUSH
24544: LD_VAR 0 5
24548: PUSH
24549: LD_VAR 0 3
24553: STR
24554: ST_TO_ADDR
// end ;
24555: GO 24455
24557: POP
24558: POP
// for i = 1 to hardcoreCounter do
24559: LD_ADDR_VAR 0 8
24563: PUSH
24564: DOUBLE
24565: LD_INT 1
24567: DEC
24568: ST_TO_ADDR
24569: LD_EXP 65
24573: PUSH
24574: FOR_TO
24575: IFFALSE 24680
// begin tmp := 0 ;
24577: LD_ADDR_VAR 0 3
24581: PUSH
24582: LD_STRING 0
24584: ST_TO_ADDR
// if result [ 2 ] then
24585: LD_VAR 0 2
24589: PUSH
24590: LD_INT 2
24592: ARRAY
24593: IFFALSE 24662
// if result [ 2 ] [ 1 ] = 100 + i then
24595: LD_VAR 0 2
24599: PUSH
24600: LD_INT 2
24602: ARRAY
24603: PUSH
24604: LD_INT 1
24606: ARRAY
24607: PUSH
24608: LD_INT 100
24610: PUSH
24611: LD_VAR 0 8
24615: PLUS
24616: EQUAL
24617: IFFALSE 24662
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24619: LD_ADDR_VAR 0 2
24623: PUSH
24624: LD_VAR 0 2
24628: PPUSH
24629: LD_INT 2
24631: PPUSH
24632: LD_VAR 0 2
24636: PUSH
24637: LD_INT 2
24639: ARRAY
24640: PPUSH
24641: LD_INT 1
24643: PPUSH
24644: CALL_OW 3
24648: PPUSH
24649: CALL_OW 1
24653: ST_TO_ADDR
// tmp := 1 ;
24654: LD_ADDR_VAR 0 3
24658: PUSH
24659: LD_STRING 1
24661: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24662: LD_ADDR_VAR 0 6
24666: PUSH
24667: LD_VAR 0 6
24671: PUSH
24672: LD_VAR 0 3
24676: STR
24677: ST_TO_ADDR
// end ;
24678: GO 24574
24680: POP
24681: POP
// if isGameLoad then
24682: LD_VAR 0 1
24686: IFFALSE 25161
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24688: LD_ADDR_VAR 0 4
24692: PUSH
24693: LD_EXP 68
24697: PUSH
24698: LD_EXP 67
24702: PUSH
24703: LD_EXP 69
24707: PUSH
24708: LD_EXP 66
24712: PUSH
24713: LD_EXP 70
24717: PUSH
24718: LD_EXP 71
24722: PUSH
24723: LD_EXP 72
24727: PUSH
24728: LD_EXP 73
24732: PUSH
24733: LD_EXP 74
24737: PUSH
24738: LD_EXP 75
24742: PUSH
24743: LD_EXP 76
24747: PUSH
24748: LD_EXP 77
24752: PUSH
24753: LD_EXP 78
24757: PUSH
24758: LD_EXP 79
24762: PUSH
24763: LD_EXP 87
24767: PUSH
24768: LD_EXP 88
24772: PUSH
24773: LD_EXP 89
24777: PUSH
24778: LD_EXP 90
24782: PUSH
24783: LD_EXP 92
24787: PUSH
24788: LD_EXP 93
24792: PUSH
24793: LD_EXP 94
24797: PUSH
24798: LD_EXP 97
24802: PUSH
24803: LD_EXP 99
24807: PUSH
24808: LD_EXP 100
24812: PUSH
24813: LD_EXP 101
24817: PUSH
24818: LD_EXP 103
24822: PUSH
24823: LD_EXP 104
24827: PUSH
24828: LD_EXP 107
24832: PUSH
24833: LD_EXP 108
24837: PUSH
24838: LD_EXP 109
24842: PUSH
24843: LD_EXP 110
24847: PUSH
24848: LD_EXP 111
24852: PUSH
24853: LD_EXP 112
24857: PUSH
24858: LD_EXP 113
24862: PUSH
24863: LD_EXP 114
24867: PUSH
24868: LD_EXP 115
24872: PUSH
24873: LD_EXP 80
24877: PUSH
24878: LD_EXP 81
24882: PUSH
24883: LD_EXP 84
24887: PUSH
24888: LD_EXP 85
24892: PUSH
24893: LD_EXP 86
24897: PUSH
24898: LD_EXP 82
24902: PUSH
24903: LD_EXP 83
24907: PUSH
24908: LD_EXP 91
24912: PUSH
24913: LD_EXP 95
24917: PUSH
24918: LD_EXP 96
24922: PUSH
24923: LD_EXP 98
24927: PUSH
24928: LD_EXP 102
24932: PUSH
24933: LD_EXP 105
24937: PUSH
24938: LD_EXP 106
24942: PUSH
24943: LD_EXP 116
24947: PUSH
24948: LD_EXP 117
24952: PUSH
24953: LD_EXP 118
24957: PUSH
24958: LD_EXP 119
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: ST_TO_ADDR
// tmp :=  ;
25019: LD_ADDR_VAR 0 3
25023: PUSH
25024: LD_STRING 
25026: ST_TO_ADDR
// for i = 1 to normalCounter do
25027: LD_ADDR_VAR 0 8
25031: PUSH
25032: DOUBLE
25033: LD_INT 1
25035: DEC
25036: ST_TO_ADDR
25037: LD_EXP 64
25041: PUSH
25042: FOR_TO
25043: IFFALSE 25079
// begin if flags [ i ] then
25045: LD_VAR 0 4
25049: PUSH
25050: LD_VAR 0 8
25054: ARRAY
25055: IFFALSE 25077
// tmp := tmp & i & ; ;
25057: LD_ADDR_VAR 0 3
25061: PUSH
25062: LD_VAR 0 3
25066: PUSH
25067: LD_VAR 0 8
25071: STR
25072: PUSH
25073: LD_STRING ;
25075: STR
25076: ST_TO_ADDR
// end ;
25077: GO 25042
25079: POP
25080: POP
// for i = 1 to hardcoreCounter do
25081: LD_ADDR_VAR 0 8
25085: PUSH
25086: DOUBLE
25087: LD_INT 1
25089: DEC
25090: ST_TO_ADDR
25091: LD_EXP 65
25095: PUSH
25096: FOR_TO
25097: IFFALSE 25143
// begin if flags [ normalCounter + i ] then
25099: LD_VAR 0 4
25103: PUSH
25104: LD_EXP 64
25108: PUSH
25109: LD_VAR 0 8
25113: PLUS
25114: ARRAY
25115: IFFALSE 25141
// tmp := tmp & ( 100 + i ) & ; ;
25117: LD_ADDR_VAR 0 3
25121: PUSH
25122: LD_VAR 0 3
25126: PUSH
25127: LD_INT 100
25129: PUSH
25130: LD_VAR 0 8
25134: PLUS
25135: STR
25136: PUSH
25137: LD_STRING ;
25139: STR
25140: ST_TO_ADDR
// end ;
25141: GO 25096
25143: POP
25144: POP
// if tmp then
25145: LD_VAR 0 3
25149: IFFALSE 25161
// active := tmp ;
25151: LD_ADDR_VAR 0 7
25155: PUSH
25156: LD_VAR 0 3
25160: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25161: LD_STRING getStreamItemsFromMission("
25163: PUSH
25164: LD_VAR 0 5
25168: STR
25169: PUSH
25170: LD_STRING ","
25172: STR
25173: PUSH
25174: LD_VAR 0 6
25178: STR
25179: PUSH
25180: LD_STRING ","
25182: STR
25183: PUSH
25184: LD_VAR 0 7
25188: STR
25189: PUSH
25190: LD_STRING ")
25192: STR
25193: PPUSH
25194: CALL_OW 559
// end else
25198: GO 25207
// ToLua ( getStreamItemsFromMission("","","") ) ;
25200: LD_STRING getStreamItemsFromMission("","","")
25202: PPUSH
25203: CALL_OW 559
// end ;
25207: LD_VAR 0 2
25211: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25212: LD_EXP 63
25216: PUSH
25217: LD_EXP 68
25221: AND
25222: IFFALSE 25346
25224: GO 25226
25226: DISABLE
25227: LD_INT 0
25229: PPUSH
25230: PPUSH
// begin enable ;
25231: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25232: LD_ADDR_VAR 0 2
25236: PUSH
25237: LD_INT 22
25239: PUSH
25240: LD_OWVAR 2
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 2
25251: PUSH
25252: LD_INT 34
25254: PUSH
25255: LD_INT 7
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 34
25264: PUSH
25265: LD_INT 45
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 34
25274: PUSH
25275: LD_INT 28
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 34
25284: PUSH
25285: LD_INT 47
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PPUSH
25303: CALL_OW 69
25307: ST_TO_ADDR
// if not tmp then
25308: LD_VAR 0 2
25312: NOT
25313: IFFALSE 25317
// exit ;
25315: GO 25346
// for i in tmp do
25317: LD_ADDR_VAR 0 1
25321: PUSH
25322: LD_VAR 0 2
25326: PUSH
25327: FOR_IN
25328: IFFALSE 25344
// begin SetLives ( i , 0 ) ;
25330: LD_VAR 0 1
25334: PPUSH
25335: LD_INT 0
25337: PPUSH
25338: CALL_OW 234
// end ;
25342: GO 25327
25344: POP
25345: POP
// end ;
25346: PPOPN 2
25348: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25349: LD_EXP 63
25353: PUSH
25354: LD_EXP 69
25358: AND
25359: IFFALSE 25443
25361: GO 25363
25363: DISABLE
25364: LD_INT 0
25366: PPUSH
25367: PPUSH
// begin enable ;
25368: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25369: LD_ADDR_VAR 0 2
25373: PUSH
25374: LD_INT 22
25376: PUSH
25377: LD_OWVAR 2
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 32
25388: PUSH
25389: LD_INT 3
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PPUSH
25400: CALL_OW 69
25404: ST_TO_ADDR
// if not tmp then
25405: LD_VAR 0 2
25409: NOT
25410: IFFALSE 25414
// exit ;
25412: GO 25443
// for i in tmp do
25414: LD_ADDR_VAR 0 1
25418: PUSH
25419: LD_VAR 0 2
25423: PUSH
25424: FOR_IN
25425: IFFALSE 25441
// begin SetLives ( i , 0 ) ;
25427: LD_VAR 0 1
25431: PPUSH
25432: LD_INT 0
25434: PPUSH
25435: CALL_OW 234
// end ;
25439: GO 25424
25441: POP
25442: POP
// end ;
25443: PPOPN 2
25445: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25446: LD_EXP 63
25450: PUSH
25451: LD_EXP 66
25455: AND
25456: IFFALSE 25549
25458: GO 25460
25460: DISABLE
25461: LD_INT 0
25463: PPUSH
// begin enable ;
25464: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25465: LD_ADDR_VAR 0 1
25469: PUSH
25470: LD_INT 22
25472: PUSH
25473: LD_OWVAR 2
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 2
25484: PUSH
25485: LD_INT 25
25487: PUSH
25488: LD_INT 5
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 25
25497: PUSH
25498: LD_INT 9
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 25
25507: PUSH
25508: LD_INT 8
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PPUSH
25525: CALL_OW 69
25529: PUSH
25530: FOR_IN
25531: IFFALSE 25547
// begin SetClass ( i , 1 ) ;
25533: LD_VAR 0 1
25537: PPUSH
25538: LD_INT 1
25540: PPUSH
25541: CALL_OW 336
// end ;
25545: GO 25530
25547: POP
25548: POP
// end ;
25549: PPOPN 1
25551: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25552: LD_EXP 63
25556: PUSH
25557: LD_EXP 67
25561: AND
25562: PUSH
25563: LD_OWVAR 65
25567: PUSH
25568: LD_INT 7
25570: LESS
25571: AND
25572: IFFALSE 25586
25574: GO 25576
25576: DISABLE
// begin enable ;
25577: ENABLE
// game_speed := 7 ;
25578: LD_ADDR_OWVAR 65
25582: PUSH
25583: LD_INT 7
25585: ST_TO_ADDR
// end ;
25586: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25587: LD_EXP 63
25591: PUSH
25592: LD_EXP 70
25596: AND
25597: IFFALSE 25799
25599: GO 25601
25601: DISABLE
25602: LD_INT 0
25604: PPUSH
25605: PPUSH
25606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25607: LD_ADDR_VAR 0 3
25611: PUSH
25612: LD_INT 81
25614: PUSH
25615: LD_OWVAR 2
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: LD_INT 21
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PPUSH
25638: CALL_OW 69
25642: ST_TO_ADDR
// if not tmp then
25643: LD_VAR 0 3
25647: NOT
25648: IFFALSE 25652
// exit ;
25650: GO 25799
// if tmp > 5 then
25652: LD_VAR 0 3
25656: PUSH
25657: LD_INT 5
25659: GREATER
25660: IFFALSE 25672
// k := 5 else
25662: LD_ADDR_VAR 0 2
25666: PUSH
25667: LD_INT 5
25669: ST_TO_ADDR
25670: GO 25682
// k := tmp ;
25672: LD_ADDR_VAR 0 2
25676: PUSH
25677: LD_VAR 0 3
25681: ST_TO_ADDR
// for i := 1 to k do
25682: LD_ADDR_VAR 0 1
25686: PUSH
25687: DOUBLE
25688: LD_INT 1
25690: DEC
25691: ST_TO_ADDR
25692: LD_VAR 0 2
25696: PUSH
25697: FOR_TO
25698: IFFALSE 25797
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25700: LD_VAR 0 3
25704: PUSH
25705: LD_VAR 0 1
25709: ARRAY
25710: PPUSH
25711: LD_VAR 0 1
25715: PUSH
25716: LD_INT 4
25718: MOD
25719: PUSH
25720: LD_INT 1
25722: PLUS
25723: PPUSH
25724: CALL_OW 259
25728: PUSH
25729: LD_INT 10
25731: LESS
25732: IFFALSE 25795
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25734: LD_VAR 0 3
25738: PUSH
25739: LD_VAR 0 1
25743: ARRAY
25744: PPUSH
25745: LD_VAR 0 1
25749: PUSH
25750: LD_INT 4
25752: MOD
25753: PUSH
25754: LD_INT 1
25756: PLUS
25757: PPUSH
25758: LD_VAR 0 3
25762: PUSH
25763: LD_VAR 0 1
25767: ARRAY
25768: PPUSH
25769: LD_VAR 0 1
25773: PUSH
25774: LD_INT 4
25776: MOD
25777: PUSH
25778: LD_INT 1
25780: PLUS
25781: PPUSH
25782: CALL_OW 259
25786: PUSH
25787: LD_INT 1
25789: PLUS
25790: PPUSH
25791: CALL_OW 237
25795: GO 25697
25797: POP
25798: POP
// end ;
25799: PPOPN 3
25801: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25802: LD_EXP 63
25806: PUSH
25807: LD_EXP 71
25811: AND
25812: IFFALSE 25832
25814: GO 25816
25816: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25817: LD_INT 4
25819: PPUSH
25820: LD_OWVAR 2
25824: PPUSH
25825: LD_INT 0
25827: PPUSH
25828: CALL_OW 324
25832: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25833: LD_EXP 63
25837: PUSH
25838: LD_EXP 100
25842: AND
25843: IFFALSE 25863
25845: GO 25847
25847: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25848: LD_INT 19
25850: PPUSH
25851: LD_OWVAR 2
25855: PPUSH
25856: LD_INT 0
25858: PPUSH
25859: CALL_OW 324
25863: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25864: LD_EXP 63
25868: PUSH
25869: LD_EXP 72
25873: AND
25874: IFFALSE 25976
25876: GO 25878
25878: DISABLE
25879: LD_INT 0
25881: PPUSH
25882: PPUSH
// begin enable ;
25883: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25884: LD_ADDR_VAR 0 2
25888: PUSH
25889: LD_INT 22
25891: PUSH
25892: LD_OWVAR 2
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 2
25903: PUSH
25904: LD_INT 34
25906: PUSH
25907: LD_INT 11
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 34
25916: PUSH
25917: LD_INT 30
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: LIST
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PPUSH
25933: CALL_OW 69
25937: ST_TO_ADDR
// if not tmp then
25938: LD_VAR 0 2
25942: NOT
25943: IFFALSE 25947
// exit ;
25945: GO 25976
// for i in tmp do
25947: LD_ADDR_VAR 0 1
25951: PUSH
25952: LD_VAR 0 2
25956: PUSH
25957: FOR_IN
25958: IFFALSE 25974
// begin SetLives ( i , 0 ) ;
25960: LD_VAR 0 1
25964: PPUSH
25965: LD_INT 0
25967: PPUSH
25968: CALL_OW 234
// end ;
25972: GO 25957
25974: POP
25975: POP
// end ;
25976: PPOPN 2
25978: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25979: LD_EXP 63
25983: PUSH
25984: LD_EXP 73
25988: AND
25989: IFFALSE 26009
25991: GO 25993
25993: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25994: LD_INT 32
25996: PPUSH
25997: LD_OWVAR 2
26001: PPUSH
26002: LD_INT 0
26004: PPUSH
26005: CALL_OW 324
26009: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26010: LD_EXP 63
26014: PUSH
26015: LD_EXP 74
26019: AND
26020: IFFALSE 26201
26022: GO 26024
26024: DISABLE
26025: LD_INT 0
26027: PPUSH
26028: PPUSH
26029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26030: LD_ADDR_VAR 0 2
26034: PUSH
26035: LD_INT 22
26037: PUSH
26038: LD_OWVAR 2
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 33
26049: PUSH
26050: LD_INT 3
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PPUSH
26061: CALL_OW 69
26065: ST_TO_ADDR
// if not tmp then
26066: LD_VAR 0 2
26070: NOT
26071: IFFALSE 26075
// exit ;
26073: GO 26201
// side := 0 ;
26075: LD_ADDR_VAR 0 3
26079: PUSH
26080: LD_INT 0
26082: ST_TO_ADDR
// for i := 1 to 8 do
26083: LD_ADDR_VAR 0 1
26087: PUSH
26088: DOUBLE
26089: LD_INT 1
26091: DEC
26092: ST_TO_ADDR
26093: LD_INT 8
26095: PUSH
26096: FOR_TO
26097: IFFALSE 26145
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26099: LD_OWVAR 2
26103: PUSH
26104: LD_VAR 0 1
26108: NONEQUAL
26109: PUSH
26110: LD_OWVAR 2
26114: PPUSH
26115: LD_VAR 0 1
26119: PPUSH
26120: CALL_OW 81
26124: PUSH
26125: LD_INT 2
26127: EQUAL
26128: AND
26129: IFFALSE 26143
// begin side := i ;
26131: LD_ADDR_VAR 0 3
26135: PUSH
26136: LD_VAR 0 1
26140: ST_TO_ADDR
// break ;
26141: GO 26145
// end ;
26143: GO 26096
26145: POP
26146: POP
// if not side then
26147: LD_VAR 0 3
26151: NOT
26152: IFFALSE 26156
// exit ;
26154: GO 26201
// for i := 1 to tmp do
26156: LD_ADDR_VAR 0 1
26160: PUSH
26161: DOUBLE
26162: LD_INT 1
26164: DEC
26165: ST_TO_ADDR
26166: LD_VAR 0 2
26170: PUSH
26171: FOR_TO
26172: IFFALSE 26199
// if Prob ( 60 ) then
26174: LD_INT 60
26176: PPUSH
26177: CALL_OW 13
26181: IFFALSE 26197
// SetSide ( i , side ) ;
26183: LD_VAR 0 1
26187: PPUSH
26188: LD_VAR 0 3
26192: PPUSH
26193: CALL_OW 235
26197: GO 26171
26199: POP
26200: POP
// end ;
26201: PPOPN 3
26203: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26204: LD_EXP 63
26208: PUSH
26209: LD_EXP 76
26213: AND
26214: IFFALSE 26333
26216: GO 26218
26218: DISABLE
26219: LD_INT 0
26221: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26222: LD_ADDR_VAR 0 1
26226: PUSH
26227: LD_INT 22
26229: PUSH
26230: LD_OWVAR 2
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 21
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 3
26251: PUSH
26252: LD_INT 23
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: LIST
26270: PPUSH
26271: CALL_OW 69
26275: PUSH
26276: FOR_IN
26277: IFFALSE 26331
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26279: LD_VAR 0 1
26283: PPUSH
26284: CALL_OW 257
26288: PUSH
26289: LD_INT 1
26291: PUSH
26292: LD_INT 2
26294: PUSH
26295: LD_INT 3
26297: PUSH
26298: LD_INT 4
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: IN
26307: IFFALSE 26329
// SetClass ( un , rand ( 1 , 4 ) ) ;
26309: LD_VAR 0 1
26313: PPUSH
26314: LD_INT 1
26316: PPUSH
26317: LD_INT 4
26319: PPUSH
26320: CALL_OW 12
26324: PPUSH
26325: CALL_OW 336
26329: GO 26276
26331: POP
26332: POP
// end ;
26333: PPOPN 1
26335: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26336: LD_EXP 63
26340: PUSH
26341: LD_EXP 75
26345: AND
26346: IFFALSE 26425
26348: GO 26350
26350: DISABLE
26351: LD_INT 0
26353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26354: LD_ADDR_VAR 0 1
26358: PUSH
26359: LD_INT 22
26361: PUSH
26362: LD_OWVAR 2
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 21
26373: PUSH
26374: LD_INT 3
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PPUSH
26385: CALL_OW 69
26389: ST_TO_ADDR
// if not tmp then
26390: LD_VAR 0 1
26394: NOT
26395: IFFALSE 26399
// exit ;
26397: GO 26425
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26399: LD_VAR 0 1
26403: PUSH
26404: LD_INT 1
26406: PPUSH
26407: LD_VAR 0 1
26411: PPUSH
26412: CALL_OW 12
26416: ARRAY
26417: PPUSH
26418: LD_INT 100
26420: PPUSH
26421: CALL_OW 234
// end ;
26425: PPOPN 1
26427: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26428: LD_EXP 63
26432: PUSH
26433: LD_EXP 77
26437: AND
26438: IFFALSE 26536
26440: GO 26442
26442: DISABLE
26443: LD_INT 0
26445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26446: LD_ADDR_VAR 0 1
26450: PUSH
26451: LD_INT 22
26453: PUSH
26454: LD_OWVAR 2
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 21
26465: PUSH
26466: LD_INT 1
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PPUSH
26477: CALL_OW 69
26481: ST_TO_ADDR
// if not tmp then
26482: LD_VAR 0 1
26486: NOT
26487: IFFALSE 26491
// exit ;
26489: GO 26536
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26491: LD_VAR 0 1
26495: PUSH
26496: LD_INT 1
26498: PPUSH
26499: LD_VAR 0 1
26503: PPUSH
26504: CALL_OW 12
26508: ARRAY
26509: PPUSH
26510: LD_INT 1
26512: PPUSH
26513: LD_INT 4
26515: PPUSH
26516: CALL_OW 12
26520: PPUSH
26521: LD_INT 3000
26523: PPUSH
26524: LD_INT 9000
26526: PPUSH
26527: CALL_OW 12
26531: PPUSH
26532: CALL_OW 492
// end ;
26536: PPOPN 1
26538: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26539: LD_EXP 63
26543: PUSH
26544: LD_EXP 78
26548: AND
26549: IFFALSE 26569
26551: GO 26553
26553: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26554: LD_INT 1
26556: PPUSH
26557: LD_OWVAR 2
26561: PPUSH
26562: LD_INT 0
26564: PPUSH
26565: CALL_OW 324
26569: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26570: LD_EXP 63
26574: PUSH
26575: LD_EXP 79
26579: AND
26580: IFFALSE 26663
26582: GO 26584
26584: DISABLE
26585: LD_INT 0
26587: PPUSH
26588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26589: LD_ADDR_VAR 0 2
26593: PUSH
26594: LD_INT 22
26596: PUSH
26597: LD_OWVAR 2
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 21
26608: PUSH
26609: LD_INT 3
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PPUSH
26620: CALL_OW 69
26624: ST_TO_ADDR
// if not tmp then
26625: LD_VAR 0 2
26629: NOT
26630: IFFALSE 26634
// exit ;
26632: GO 26663
// for i in tmp do
26634: LD_ADDR_VAR 0 1
26638: PUSH
26639: LD_VAR 0 2
26643: PUSH
26644: FOR_IN
26645: IFFALSE 26661
// SetBLevel ( i , 10 ) ;
26647: LD_VAR 0 1
26651: PPUSH
26652: LD_INT 10
26654: PPUSH
26655: CALL_OW 241
26659: GO 26644
26661: POP
26662: POP
// end ;
26663: PPOPN 2
26665: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26666: LD_EXP 63
26670: PUSH
26671: LD_EXP 80
26675: AND
26676: IFFALSE 26787
26678: GO 26680
26680: DISABLE
26681: LD_INT 0
26683: PPUSH
26684: PPUSH
26685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26686: LD_ADDR_VAR 0 3
26690: PUSH
26691: LD_INT 22
26693: PUSH
26694: LD_OWVAR 2
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 25
26705: PUSH
26706: LD_INT 1
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PPUSH
26717: CALL_OW 69
26721: ST_TO_ADDR
// if not tmp then
26722: LD_VAR 0 3
26726: NOT
26727: IFFALSE 26731
// exit ;
26729: GO 26787
// un := tmp [ rand ( 1 , tmp ) ] ;
26731: LD_ADDR_VAR 0 2
26735: PUSH
26736: LD_VAR 0 3
26740: PUSH
26741: LD_INT 1
26743: PPUSH
26744: LD_VAR 0 3
26748: PPUSH
26749: CALL_OW 12
26753: ARRAY
26754: ST_TO_ADDR
// if Crawls ( un ) then
26755: LD_VAR 0 2
26759: PPUSH
26760: CALL_OW 318
26764: IFFALSE 26775
// ComWalk ( un ) ;
26766: LD_VAR 0 2
26770: PPUSH
26771: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26775: LD_VAR 0 2
26779: PPUSH
26780: LD_INT 5
26782: PPUSH
26783: CALL_OW 336
// end ;
26787: PPOPN 3
26789: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26790: LD_EXP 63
26794: PUSH
26795: LD_EXP 81
26799: AND
26800: PUSH
26801: LD_OWVAR 67
26805: PUSH
26806: LD_INT 4
26808: LESS
26809: AND
26810: IFFALSE 26829
26812: GO 26814
26814: DISABLE
// begin Difficulty := Difficulty + 1 ;
26815: LD_ADDR_OWVAR 67
26819: PUSH
26820: LD_OWVAR 67
26824: PUSH
26825: LD_INT 1
26827: PLUS
26828: ST_TO_ADDR
// end ;
26829: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26830: LD_EXP 63
26834: PUSH
26835: LD_EXP 82
26839: AND
26840: IFFALSE 26943
26842: GO 26844
26844: DISABLE
26845: LD_INT 0
26847: PPUSH
// begin for i := 1 to 5 do
26848: LD_ADDR_VAR 0 1
26852: PUSH
26853: DOUBLE
26854: LD_INT 1
26856: DEC
26857: ST_TO_ADDR
26858: LD_INT 5
26860: PUSH
26861: FOR_TO
26862: IFFALSE 26941
// begin uc_nation := nation_nature ;
26864: LD_ADDR_OWVAR 21
26868: PUSH
26869: LD_INT 0
26871: ST_TO_ADDR
// uc_side := 0 ;
26872: LD_ADDR_OWVAR 20
26876: PUSH
26877: LD_INT 0
26879: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26880: LD_ADDR_OWVAR 29
26884: PUSH
26885: LD_INT 12
26887: PUSH
26888: LD_INT 12
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: ST_TO_ADDR
// hc_agressivity := 20 ;
26895: LD_ADDR_OWVAR 35
26899: PUSH
26900: LD_INT 20
26902: ST_TO_ADDR
// hc_class := class_tiger ;
26903: LD_ADDR_OWVAR 28
26907: PUSH
26908: LD_INT 14
26910: ST_TO_ADDR
// hc_gallery :=  ;
26911: LD_ADDR_OWVAR 33
26915: PUSH
26916: LD_STRING 
26918: ST_TO_ADDR
// hc_name :=  ;
26919: LD_ADDR_OWVAR 26
26923: PUSH
26924: LD_STRING 
26926: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26927: CALL_OW 44
26931: PPUSH
26932: LD_INT 0
26934: PPUSH
26935: CALL_OW 51
// end ;
26939: GO 26861
26941: POP
26942: POP
// end ;
26943: PPOPN 1
26945: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26946: LD_EXP 63
26950: PUSH
26951: LD_EXP 83
26955: AND
26956: IFFALSE 26965
26958: GO 26960
26960: DISABLE
// StreamSibBomb ;
26961: CALL 26966 0 0
26965: END
// export function StreamSibBomb ; var i , x , y ; begin
26966: LD_INT 0
26968: PPUSH
26969: PPUSH
26970: PPUSH
26971: PPUSH
// result := false ;
26972: LD_ADDR_VAR 0 1
26976: PUSH
26977: LD_INT 0
26979: ST_TO_ADDR
// for i := 1 to 16 do
26980: LD_ADDR_VAR 0 2
26984: PUSH
26985: DOUBLE
26986: LD_INT 1
26988: DEC
26989: ST_TO_ADDR
26990: LD_INT 16
26992: PUSH
26993: FOR_TO
26994: IFFALSE 27193
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26996: LD_ADDR_VAR 0 3
27000: PUSH
27001: LD_INT 10
27003: PUSH
27004: LD_INT 20
27006: PUSH
27007: LD_INT 30
27009: PUSH
27010: LD_INT 40
27012: PUSH
27013: LD_INT 50
27015: PUSH
27016: LD_INT 60
27018: PUSH
27019: LD_INT 70
27021: PUSH
27022: LD_INT 80
27024: PUSH
27025: LD_INT 90
27027: PUSH
27028: LD_INT 100
27030: PUSH
27031: LD_INT 110
27033: PUSH
27034: LD_INT 120
27036: PUSH
27037: LD_INT 130
27039: PUSH
27040: LD_INT 140
27042: PUSH
27043: LD_INT 150
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 1
27065: PPUSH
27066: LD_INT 15
27068: PPUSH
27069: CALL_OW 12
27073: ARRAY
27074: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27075: LD_ADDR_VAR 0 4
27079: PUSH
27080: LD_INT 10
27082: PUSH
27083: LD_INT 20
27085: PUSH
27086: LD_INT 30
27088: PUSH
27089: LD_INT 40
27091: PUSH
27092: LD_INT 50
27094: PUSH
27095: LD_INT 60
27097: PUSH
27098: LD_INT 70
27100: PUSH
27101: LD_INT 80
27103: PUSH
27104: LD_INT 90
27106: PUSH
27107: LD_INT 100
27109: PUSH
27110: LD_INT 110
27112: PUSH
27113: LD_INT 120
27115: PUSH
27116: LD_INT 130
27118: PUSH
27119: LD_INT 140
27121: PUSH
27122: LD_INT 150
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 1
27144: PPUSH
27145: LD_INT 15
27147: PPUSH
27148: CALL_OW 12
27152: ARRAY
27153: ST_TO_ADDR
// if ValidHex ( x , y ) then
27154: LD_VAR 0 3
27158: PPUSH
27159: LD_VAR 0 4
27163: PPUSH
27164: CALL_OW 488
27168: IFFALSE 27191
// begin result := [ x , y ] ;
27170: LD_ADDR_VAR 0 1
27174: PUSH
27175: LD_VAR 0 3
27179: PUSH
27180: LD_VAR 0 4
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: ST_TO_ADDR
// break ;
27189: GO 27193
// end ; end ;
27191: GO 26993
27193: POP
27194: POP
// if result then
27195: LD_VAR 0 1
27199: IFFALSE 27259
// begin ToLua ( playSibBomb() ) ;
27201: LD_STRING playSibBomb()
27203: PPUSH
27204: CALL_OW 559
// wait ( 0 0$14 ) ;
27208: LD_INT 490
27210: PPUSH
27211: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27215: LD_VAR 0 1
27219: PUSH
27220: LD_INT 1
27222: ARRAY
27223: PPUSH
27224: LD_VAR 0 1
27228: PUSH
27229: LD_INT 2
27231: ARRAY
27232: PPUSH
27233: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27237: LD_VAR 0 1
27241: PUSH
27242: LD_INT 1
27244: ARRAY
27245: PPUSH
27246: LD_VAR 0 1
27250: PUSH
27251: LD_INT 2
27253: ARRAY
27254: PPUSH
27255: CALL_OW 429
// end ; end ;
27259: LD_VAR 0 1
27263: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27264: LD_EXP 63
27268: PUSH
27269: LD_EXP 85
27273: AND
27274: IFFALSE 27286
27276: GO 27278
27278: DISABLE
// YouLost (  ) ;
27279: LD_STRING 
27281: PPUSH
27282: CALL_OW 104
27286: END
// every 0 0$1 trigger StreamModeActive and sFog do
27287: LD_EXP 63
27291: PUSH
27292: LD_EXP 84
27296: AND
27297: IFFALSE 27311
27299: GO 27301
27301: DISABLE
// FogOff ( your_side ) ;
27302: LD_OWVAR 2
27306: PPUSH
27307: CALL_OW 344
27311: END
// every 0 0$1 trigger StreamModeActive and sSun do
27312: LD_EXP 63
27316: PUSH
27317: LD_EXP 86
27321: AND
27322: IFFALSE 27350
27324: GO 27326
27326: DISABLE
// begin solar_recharge_percent := 0 ;
27327: LD_ADDR_OWVAR 79
27331: PUSH
27332: LD_INT 0
27334: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27335: LD_INT 10500
27337: PPUSH
27338: CALL_OW 67
// solar_recharge_percent := 100 ;
27342: LD_ADDR_OWVAR 79
27346: PUSH
27347: LD_INT 100
27349: ST_TO_ADDR
// end ;
27350: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27351: LD_EXP 63
27355: PUSH
27356: LD_EXP 87
27360: AND
27361: IFFALSE 27600
27363: GO 27365
27365: DISABLE
27366: LD_INT 0
27368: PPUSH
27369: PPUSH
27370: PPUSH
// begin tmp := [ ] ;
27371: LD_ADDR_VAR 0 3
27375: PUSH
27376: EMPTY
27377: ST_TO_ADDR
// for i := 1 to 6 do
27378: LD_ADDR_VAR 0 1
27382: PUSH
27383: DOUBLE
27384: LD_INT 1
27386: DEC
27387: ST_TO_ADDR
27388: LD_INT 6
27390: PUSH
27391: FOR_TO
27392: IFFALSE 27497
// begin uc_nation := nation_nature ;
27394: LD_ADDR_OWVAR 21
27398: PUSH
27399: LD_INT 0
27401: ST_TO_ADDR
// uc_side := 0 ;
27402: LD_ADDR_OWVAR 20
27406: PUSH
27407: LD_INT 0
27409: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27410: LD_ADDR_OWVAR 29
27414: PUSH
27415: LD_INT 12
27417: PUSH
27418: LD_INT 12
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: ST_TO_ADDR
// hc_agressivity := 20 ;
27425: LD_ADDR_OWVAR 35
27429: PUSH
27430: LD_INT 20
27432: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27433: LD_ADDR_OWVAR 28
27437: PUSH
27438: LD_INT 17
27440: ST_TO_ADDR
// hc_gallery :=  ;
27441: LD_ADDR_OWVAR 33
27445: PUSH
27446: LD_STRING 
27448: ST_TO_ADDR
// hc_name :=  ;
27449: LD_ADDR_OWVAR 26
27453: PUSH
27454: LD_STRING 
27456: ST_TO_ADDR
// un := CreateHuman ;
27457: LD_ADDR_VAR 0 2
27461: PUSH
27462: CALL_OW 44
27466: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27467: LD_VAR 0 2
27471: PPUSH
27472: LD_INT 1
27474: PPUSH
27475: CALL_OW 51
// tmp := tmp ^ un ;
27479: LD_ADDR_VAR 0 3
27483: PUSH
27484: LD_VAR 0 3
27488: PUSH
27489: LD_VAR 0 2
27493: ADD
27494: ST_TO_ADDR
// end ;
27495: GO 27391
27497: POP
27498: POP
// repeat wait ( 0 0$1 ) ;
27499: LD_INT 35
27501: PPUSH
27502: CALL_OW 67
// for un in tmp do
27506: LD_ADDR_VAR 0 2
27510: PUSH
27511: LD_VAR 0 3
27515: PUSH
27516: FOR_IN
27517: IFFALSE 27591
// begin if IsDead ( un ) then
27519: LD_VAR 0 2
27523: PPUSH
27524: CALL_OW 301
27528: IFFALSE 27548
// begin tmp := tmp diff un ;
27530: LD_ADDR_VAR 0 3
27534: PUSH
27535: LD_VAR 0 3
27539: PUSH
27540: LD_VAR 0 2
27544: DIFF
27545: ST_TO_ADDR
// continue ;
27546: GO 27516
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27548: LD_VAR 0 2
27552: PPUSH
27553: LD_INT 3
27555: PUSH
27556: LD_INT 22
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PPUSH
27570: CALL_OW 69
27574: PPUSH
27575: LD_VAR 0 2
27579: PPUSH
27580: CALL_OW 74
27584: PPUSH
27585: CALL_OW 115
// end ;
27589: GO 27516
27591: POP
27592: POP
// until not tmp ;
27593: LD_VAR 0 3
27597: NOT
27598: IFFALSE 27499
// end ;
27600: PPOPN 3
27602: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27603: LD_EXP 63
27607: PUSH
27608: LD_EXP 88
27612: AND
27613: IFFALSE 27667
27615: GO 27617
27617: DISABLE
// begin ToLua ( displayTroll(); ) ;
27618: LD_STRING displayTroll();
27620: PPUSH
27621: CALL_OW 559
// wait ( 3 3$00 ) ;
27625: LD_INT 6300
27627: PPUSH
27628: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27632: LD_STRING hideTroll();
27634: PPUSH
27635: CALL_OW 559
// wait ( 1 1$00 ) ;
27639: LD_INT 2100
27641: PPUSH
27642: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27646: LD_STRING displayTroll();
27648: PPUSH
27649: CALL_OW 559
// wait ( 1 1$00 ) ;
27653: LD_INT 2100
27655: PPUSH
27656: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27660: LD_STRING hideTroll();
27662: PPUSH
27663: CALL_OW 559
// end ;
27667: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27668: LD_EXP 63
27672: PUSH
27673: LD_EXP 89
27677: AND
27678: IFFALSE 27741
27680: GO 27682
27682: DISABLE
27683: LD_INT 0
27685: PPUSH
// begin p := 0 ;
27686: LD_ADDR_VAR 0 1
27690: PUSH
27691: LD_INT 0
27693: ST_TO_ADDR
// repeat game_speed := 1 ;
27694: LD_ADDR_OWVAR 65
27698: PUSH
27699: LD_INT 1
27701: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27702: LD_INT 35
27704: PPUSH
27705: CALL_OW 67
// p := p + 1 ;
27709: LD_ADDR_VAR 0 1
27713: PUSH
27714: LD_VAR 0 1
27718: PUSH
27719: LD_INT 1
27721: PLUS
27722: ST_TO_ADDR
// until p >= 60 ;
27723: LD_VAR 0 1
27727: PUSH
27728: LD_INT 60
27730: GREATEREQUAL
27731: IFFALSE 27694
// game_speed := 4 ;
27733: LD_ADDR_OWVAR 65
27737: PUSH
27738: LD_INT 4
27740: ST_TO_ADDR
// end ;
27741: PPOPN 1
27743: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27744: LD_EXP 63
27748: PUSH
27749: LD_EXP 90
27753: AND
27754: IFFALSE 27900
27756: GO 27758
27758: DISABLE
27759: LD_INT 0
27761: PPUSH
27762: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27763: LD_ADDR_VAR 0 1
27767: PUSH
27768: LD_INT 22
27770: PUSH
27771: LD_OWVAR 2
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 2
27782: PUSH
27783: LD_INT 30
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 30
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: LIST
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PPUSH
27812: CALL_OW 69
27816: ST_TO_ADDR
// if not depot then
27817: LD_VAR 0 1
27821: NOT
27822: IFFALSE 27826
// exit ;
27824: GO 27900
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27826: LD_ADDR_VAR 0 2
27830: PUSH
27831: LD_VAR 0 1
27835: PUSH
27836: LD_INT 1
27838: PPUSH
27839: LD_VAR 0 1
27843: PPUSH
27844: CALL_OW 12
27848: ARRAY
27849: PPUSH
27850: CALL_OW 274
27854: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27855: LD_VAR 0 2
27859: PPUSH
27860: LD_INT 1
27862: PPUSH
27863: LD_INT 0
27865: PPUSH
27866: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27870: LD_VAR 0 2
27874: PPUSH
27875: LD_INT 2
27877: PPUSH
27878: LD_INT 0
27880: PPUSH
27881: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27885: LD_VAR 0 2
27889: PPUSH
27890: LD_INT 3
27892: PPUSH
27893: LD_INT 0
27895: PPUSH
27896: CALL_OW 277
// end ;
27900: PPOPN 2
27902: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27903: LD_EXP 63
27907: PUSH
27908: LD_EXP 91
27912: AND
27913: IFFALSE 28010
27915: GO 27917
27917: DISABLE
27918: LD_INT 0
27920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27921: LD_ADDR_VAR 0 1
27925: PUSH
27926: LD_INT 22
27928: PUSH
27929: LD_OWVAR 2
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 21
27940: PUSH
27941: LD_INT 1
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 3
27950: PUSH
27951: LD_INT 23
27953: PUSH
27954: LD_INT 0
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: LIST
27969: PPUSH
27970: CALL_OW 69
27974: ST_TO_ADDR
// if not tmp then
27975: LD_VAR 0 1
27979: NOT
27980: IFFALSE 27984
// exit ;
27982: GO 28010
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27984: LD_VAR 0 1
27988: PUSH
27989: LD_INT 1
27991: PPUSH
27992: LD_VAR 0 1
27996: PPUSH
27997: CALL_OW 12
28001: ARRAY
28002: PPUSH
28003: LD_INT 200
28005: PPUSH
28006: CALL_OW 234
// end ;
28010: PPOPN 1
28012: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28013: LD_EXP 63
28017: PUSH
28018: LD_EXP 92
28022: AND
28023: IFFALSE 28102
28025: GO 28027
28027: DISABLE
28028: LD_INT 0
28030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28031: LD_ADDR_VAR 0 1
28035: PUSH
28036: LD_INT 22
28038: PUSH
28039: LD_OWVAR 2
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 21
28050: PUSH
28051: LD_INT 2
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PPUSH
28062: CALL_OW 69
28066: ST_TO_ADDR
// if not tmp then
28067: LD_VAR 0 1
28071: NOT
28072: IFFALSE 28076
// exit ;
28074: GO 28102
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28076: LD_VAR 0 1
28080: PUSH
28081: LD_INT 1
28083: PPUSH
28084: LD_VAR 0 1
28088: PPUSH
28089: CALL_OW 12
28093: ARRAY
28094: PPUSH
28095: LD_INT 60
28097: PPUSH
28098: CALL_OW 234
// end ;
28102: PPOPN 1
28104: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28105: LD_EXP 63
28109: PUSH
28110: LD_EXP 93
28114: AND
28115: IFFALSE 28214
28117: GO 28119
28119: DISABLE
28120: LD_INT 0
28122: PPUSH
28123: PPUSH
// begin enable ;
28124: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28125: LD_ADDR_VAR 0 1
28129: PUSH
28130: LD_INT 22
28132: PUSH
28133: LD_OWVAR 2
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 61
28144: PUSH
28145: EMPTY
28146: LIST
28147: PUSH
28148: LD_INT 33
28150: PUSH
28151: LD_INT 2
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: LIST
28162: PPUSH
28163: CALL_OW 69
28167: ST_TO_ADDR
// if not tmp then
28168: LD_VAR 0 1
28172: NOT
28173: IFFALSE 28177
// exit ;
28175: GO 28214
// for i in tmp do
28177: LD_ADDR_VAR 0 2
28181: PUSH
28182: LD_VAR 0 1
28186: PUSH
28187: FOR_IN
28188: IFFALSE 28212
// if IsControledBy ( i ) then
28190: LD_VAR 0 2
28194: PPUSH
28195: CALL_OW 312
28199: IFFALSE 28210
// ComUnlink ( i ) ;
28201: LD_VAR 0 2
28205: PPUSH
28206: CALL_OW 136
28210: GO 28187
28212: POP
28213: POP
// end ;
28214: PPOPN 2
28216: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28217: LD_EXP 63
28221: PUSH
28222: LD_EXP 94
28226: AND
28227: IFFALSE 28367
28229: GO 28231
28231: DISABLE
28232: LD_INT 0
28234: PPUSH
28235: PPUSH
// begin ToLua ( displayPowell(); ) ;
28236: LD_STRING displayPowell();
28238: PPUSH
28239: CALL_OW 559
// uc_side := 0 ;
28243: LD_ADDR_OWVAR 20
28247: PUSH
28248: LD_INT 0
28250: ST_TO_ADDR
// uc_nation := 2 ;
28251: LD_ADDR_OWVAR 21
28255: PUSH
28256: LD_INT 2
28258: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28259: LD_ADDR_OWVAR 37
28263: PUSH
28264: LD_INT 14
28266: ST_TO_ADDR
// vc_engine := engine_siberite ;
28267: LD_ADDR_OWVAR 39
28271: PUSH
28272: LD_INT 3
28274: ST_TO_ADDR
// vc_control := control_apeman ;
28275: LD_ADDR_OWVAR 38
28279: PUSH
28280: LD_INT 5
28282: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28283: LD_ADDR_OWVAR 40
28287: PUSH
28288: LD_INT 29
28290: ST_TO_ADDR
// un := CreateVehicle ;
28291: LD_ADDR_VAR 0 2
28295: PUSH
28296: CALL_OW 45
28300: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28301: LD_VAR 0 2
28305: PPUSH
28306: LD_INT 1
28308: PPUSH
28309: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28313: LD_INT 35
28315: PPUSH
28316: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28320: LD_VAR 0 2
28324: PPUSH
28325: LD_INT 22
28327: PUSH
28328: LD_OWVAR 2
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PPUSH
28337: CALL_OW 69
28341: PPUSH
28342: LD_VAR 0 2
28346: PPUSH
28347: CALL_OW 74
28351: PPUSH
28352: CALL_OW 115
// until IsDead ( un ) ;
28356: LD_VAR 0 2
28360: PPUSH
28361: CALL_OW 301
28365: IFFALSE 28313
// end ;
28367: PPOPN 2
28369: END
// every 0 0$1 trigger StreamModeActive and sStu do
28370: LD_EXP 63
28374: PUSH
28375: LD_EXP 102
28379: AND
28380: IFFALSE 28396
28382: GO 28384
28384: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28385: LD_STRING displayStucuk();
28387: PPUSH
28388: CALL_OW 559
// ResetFog ;
28392: CALL_OW 335
// end ;
28396: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28397: LD_EXP 63
28401: PUSH
28402: LD_EXP 95
28406: AND
28407: IFFALSE 28548
28409: GO 28411
28411: DISABLE
28412: LD_INT 0
28414: PPUSH
28415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28416: LD_ADDR_VAR 0 2
28420: PUSH
28421: LD_INT 22
28423: PUSH
28424: LD_OWVAR 2
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 21
28435: PUSH
28436: LD_INT 1
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PPUSH
28447: CALL_OW 69
28451: ST_TO_ADDR
// if not tmp then
28452: LD_VAR 0 2
28456: NOT
28457: IFFALSE 28461
// exit ;
28459: GO 28548
// un := tmp [ rand ( 1 , tmp ) ] ;
28461: LD_ADDR_VAR 0 1
28465: PUSH
28466: LD_VAR 0 2
28470: PUSH
28471: LD_INT 1
28473: PPUSH
28474: LD_VAR 0 2
28478: PPUSH
28479: CALL_OW 12
28483: ARRAY
28484: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28485: LD_VAR 0 1
28489: PPUSH
28490: LD_INT 0
28492: PPUSH
28493: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28497: LD_VAR 0 1
28501: PPUSH
28502: LD_OWVAR 3
28506: PUSH
28507: LD_VAR 0 1
28511: DIFF
28512: PPUSH
28513: LD_VAR 0 1
28517: PPUSH
28518: CALL_OW 74
28522: PPUSH
28523: CALL_OW 115
// wait ( 0 0$20 ) ;
28527: LD_INT 700
28529: PPUSH
28530: CALL_OW 67
// SetSide ( un , your_side ) ;
28534: LD_VAR 0 1
28538: PPUSH
28539: LD_OWVAR 2
28543: PPUSH
28544: CALL_OW 235
// end ;
28548: PPOPN 2
28550: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28551: LD_EXP 63
28555: PUSH
28556: LD_EXP 96
28560: AND
28561: IFFALSE 28667
28563: GO 28565
28565: DISABLE
28566: LD_INT 0
28568: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28569: LD_ADDR_VAR 0 1
28573: PUSH
28574: LD_INT 22
28576: PUSH
28577: LD_OWVAR 2
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 2
28588: PUSH
28589: LD_INT 30
28591: PUSH
28592: LD_INT 0
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 30
28601: PUSH
28602: LD_INT 1
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: LIST
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PPUSH
28618: CALL_OW 69
28622: ST_TO_ADDR
// if not depot then
28623: LD_VAR 0 1
28627: NOT
28628: IFFALSE 28632
// exit ;
28630: GO 28667
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28632: LD_VAR 0 1
28636: PUSH
28637: LD_INT 1
28639: ARRAY
28640: PPUSH
28641: CALL_OW 250
28645: PPUSH
28646: LD_VAR 0 1
28650: PUSH
28651: LD_INT 1
28653: ARRAY
28654: PPUSH
28655: CALL_OW 251
28659: PPUSH
28660: LD_INT 70
28662: PPUSH
28663: CALL_OW 495
// end ;
28667: PPOPN 1
28669: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28670: LD_EXP 63
28674: PUSH
28675: LD_EXP 97
28679: AND
28680: IFFALSE 28891
28682: GO 28684
28684: DISABLE
28685: LD_INT 0
28687: PPUSH
28688: PPUSH
28689: PPUSH
28690: PPUSH
28691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28692: LD_ADDR_VAR 0 5
28696: PUSH
28697: LD_INT 22
28699: PUSH
28700: LD_OWVAR 2
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 21
28711: PUSH
28712: LD_INT 1
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PPUSH
28723: CALL_OW 69
28727: ST_TO_ADDR
// if not tmp then
28728: LD_VAR 0 5
28732: NOT
28733: IFFALSE 28737
// exit ;
28735: GO 28891
// for i in tmp do
28737: LD_ADDR_VAR 0 1
28741: PUSH
28742: LD_VAR 0 5
28746: PUSH
28747: FOR_IN
28748: IFFALSE 28889
// begin d := rand ( 0 , 5 ) ;
28750: LD_ADDR_VAR 0 4
28754: PUSH
28755: LD_INT 0
28757: PPUSH
28758: LD_INT 5
28760: PPUSH
28761: CALL_OW 12
28765: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28766: LD_ADDR_VAR 0 2
28770: PUSH
28771: LD_VAR 0 1
28775: PPUSH
28776: CALL_OW 250
28780: PPUSH
28781: LD_VAR 0 4
28785: PPUSH
28786: LD_INT 3
28788: PPUSH
28789: LD_INT 12
28791: PPUSH
28792: CALL_OW 12
28796: PPUSH
28797: CALL_OW 272
28801: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28802: LD_ADDR_VAR 0 3
28806: PUSH
28807: LD_VAR 0 1
28811: PPUSH
28812: CALL_OW 251
28816: PPUSH
28817: LD_VAR 0 4
28821: PPUSH
28822: LD_INT 3
28824: PPUSH
28825: LD_INT 12
28827: PPUSH
28828: CALL_OW 12
28832: PPUSH
28833: CALL_OW 273
28837: ST_TO_ADDR
// if ValidHex ( x , y ) then
28838: LD_VAR 0 2
28842: PPUSH
28843: LD_VAR 0 3
28847: PPUSH
28848: CALL_OW 488
28852: IFFALSE 28887
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28854: LD_VAR 0 1
28858: PPUSH
28859: LD_VAR 0 2
28863: PPUSH
28864: LD_VAR 0 3
28868: PPUSH
28869: LD_INT 3
28871: PPUSH
28872: LD_INT 6
28874: PPUSH
28875: CALL_OW 12
28879: PPUSH
28880: LD_INT 1
28882: PPUSH
28883: CALL_OW 483
// end ;
28887: GO 28747
28889: POP
28890: POP
// end ;
28891: PPOPN 5
28893: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28894: LD_EXP 63
28898: PUSH
28899: LD_EXP 98
28903: AND
28904: IFFALSE 28998
28906: GO 28908
28908: DISABLE
28909: LD_INT 0
28911: PPUSH
28912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28913: LD_ADDR_VAR 0 2
28917: PUSH
28918: LD_INT 22
28920: PUSH
28921: LD_OWVAR 2
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 32
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 21
28942: PUSH
28943: LD_INT 2
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: LIST
28954: PPUSH
28955: CALL_OW 69
28959: ST_TO_ADDR
// if not tmp then
28960: LD_VAR 0 2
28964: NOT
28965: IFFALSE 28969
// exit ;
28967: GO 28998
// for i in tmp do
28969: LD_ADDR_VAR 0 1
28973: PUSH
28974: LD_VAR 0 2
28978: PUSH
28979: FOR_IN
28980: IFFALSE 28996
// SetFuel ( i , 0 ) ;
28982: LD_VAR 0 1
28986: PPUSH
28987: LD_INT 0
28989: PPUSH
28990: CALL_OW 240
28994: GO 28979
28996: POP
28997: POP
// end ;
28998: PPOPN 2
29000: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29001: LD_EXP 63
29005: PUSH
29006: LD_EXP 99
29010: AND
29011: IFFALSE 29077
29013: GO 29015
29015: DISABLE
29016: LD_INT 0
29018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29019: LD_ADDR_VAR 0 1
29023: PUSH
29024: LD_INT 22
29026: PUSH
29027: LD_OWVAR 2
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 30
29038: PUSH
29039: LD_INT 29
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PPUSH
29050: CALL_OW 69
29054: ST_TO_ADDR
// if not tmp then
29055: LD_VAR 0 1
29059: NOT
29060: IFFALSE 29064
// exit ;
29062: GO 29077
// DestroyUnit ( tmp [ 1 ] ) ;
29064: LD_VAR 0 1
29068: PUSH
29069: LD_INT 1
29071: ARRAY
29072: PPUSH
29073: CALL_OW 65
// end ;
29077: PPOPN 1
29079: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29080: LD_EXP 63
29084: PUSH
29085: LD_EXP 101
29089: AND
29090: IFFALSE 29219
29092: GO 29094
29094: DISABLE
29095: LD_INT 0
29097: PPUSH
// begin uc_side := 0 ;
29098: LD_ADDR_OWVAR 20
29102: PUSH
29103: LD_INT 0
29105: ST_TO_ADDR
// uc_nation := nation_arabian ;
29106: LD_ADDR_OWVAR 21
29110: PUSH
29111: LD_INT 2
29113: ST_TO_ADDR
// hc_gallery :=  ;
29114: LD_ADDR_OWVAR 33
29118: PUSH
29119: LD_STRING 
29121: ST_TO_ADDR
// hc_name :=  ;
29122: LD_ADDR_OWVAR 26
29126: PUSH
29127: LD_STRING 
29129: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29130: LD_INT 1
29132: PPUSH
29133: LD_INT 11
29135: PPUSH
29136: LD_INT 10
29138: PPUSH
29139: CALL_OW 380
// un := CreateHuman ;
29143: LD_ADDR_VAR 0 1
29147: PUSH
29148: CALL_OW 44
29152: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29153: LD_VAR 0 1
29157: PPUSH
29158: LD_INT 1
29160: PPUSH
29161: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29165: LD_INT 35
29167: PPUSH
29168: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29172: LD_VAR 0 1
29176: PPUSH
29177: LD_INT 22
29179: PUSH
29180: LD_OWVAR 2
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PPUSH
29189: CALL_OW 69
29193: PPUSH
29194: LD_VAR 0 1
29198: PPUSH
29199: CALL_OW 74
29203: PPUSH
29204: CALL_OW 115
// until IsDead ( un ) ;
29208: LD_VAR 0 1
29212: PPUSH
29213: CALL_OW 301
29217: IFFALSE 29165
// end ;
29219: PPOPN 1
29221: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29222: LD_EXP 63
29226: PUSH
29227: LD_EXP 103
29231: AND
29232: IFFALSE 29244
29234: GO 29236
29236: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29237: LD_STRING earthquake(getX(game), 0, 32)
29239: PPUSH
29240: CALL_OW 559
29244: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29245: LD_EXP 63
29249: PUSH
29250: LD_EXP 104
29254: AND
29255: IFFALSE 29346
29257: GO 29259
29259: DISABLE
29260: LD_INT 0
29262: PPUSH
// begin enable ;
29263: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29264: LD_ADDR_VAR 0 1
29268: PUSH
29269: LD_INT 22
29271: PUSH
29272: LD_OWVAR 2
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 21
29283: PUSH
29284: LD_INT 2
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 33
29293: PUSH
29294: LD_INT 3
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: LIST
29305: PPUSH
29306: CALL_OW 69
29310: ST_TO_ADDR
// if not tmp then
29311: LD_VAR 0 1
29315: NOT
29316: IFFALSE 29320
// exit ;
29318: GO 29346
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29320: LD_VAR 0 1
29324: PUSH
29325: LD_INT 1
29327: PPUSH
29328: LD_VAR 0 1
29332: PPUSH
29333: CALL_OW 12
29337: ARRAY
29338: PPUSH
29339: LD_INT 1
29341: PPUSH
29342: CALL_OW 234
// end ;
29346: PPOPN 1
29348: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29349: LD_EXP 63
29353: PUSH
29354: LD_EXP 105
29358: AND
29359: IFFALSE 29500
29361: GO 29363
29363: DISABLE
29364: LD_INT 0
29366: PPUSH
29367: PPUSH
29368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29369: LD_ADDR_VAR 0 3
29373: PUSH
29374: LD_INT 22
29376: PUSH
29377: LD_OWVAR 2
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 25
29388: PUSH
29389: LD_INT 1
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PPUSH
29400: CALL_OW 69
29404: ST_TO_ADDR
// if not tmp then
29405: LD_VAR 0 3
29409: NOT
29410: IFFALSE 29414
// exit ;
29412: GO 29500
// un := tmp [ rand ( 1 , tmp ) ] ;
29414: LD_ADDR_VAR 0 2
29418: PUSH
29419: LD_VAR 0 3
29423: PUSH
29424: LD_INT 1
29426: PPUSH
29427: LD_VAR 0 3
29431: PPUSH
29432: CALL_OW 12
29436: ARRAY
29437: ST_TO_ADDR
// if Crawls ( un ) then
29438: LD_VAR 0 2
29442: PPUSH
29443: CALL_OW 318
29447: IFFALSE 29458
// ComWalk ( un ) ;
29449: LD_VAR 0 2
29453: PPUSH
29454: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29458: LD_VAR 0 2
29462: PPUSH
29463: LD_INT 9
29465: PPUSH
29466: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29470: LD_INT 28
29472: PPUSH
29473: LD_OWVAR 2
29477: PPUSH
29478: LD_INT 2
29480: PPUSH
29481: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29485: LD_INT 29
29487: PPUSH
29488: LD_OWVAR 2
29492: PPUSH
29493: LD_INT 2
29495: PPUSH
29496: CALL_OW 322
// end ;
29500: PPOPN 3
29502: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29503: LD_EXP 63
29507: PUSH
29508: LD_EXP 106
29512: AND
29513: IFFALSE 29624
29515: GO 29517
29517: DISABLE
29518: LD_INT 0
29520: PPUSH
29521: PPUSH
29522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29523: LD_ADDR_VAR 0 3
29527: PUSH
29528: LD_INT 22
29530: PUSH
29531: LD_OWVAR 2
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 25
29542: PUSH
29543: LD_INT 1
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PPUSH
29554: CALL_OW 69
29558: ST_TO_ADDR
// if not tmp then
29559: LD_VAR 0 3
29563: NOT
29564: IFFALSE 29568
// exit ;
29566: GO 29624
// un := tmp [ rand ( 1 , tmp ) ] ;
29568: LD_ADDR_VAR 0 2
29572: PUSH
29573: LD_VAR 0 3
29577: PUSH
29578: LD_INT 1
29580: PPUSH
29581: LD_VAR 0 3
29585: PPUSH
29586: CALL_OW 12
29590: ARRAY
29591: ST_TO_ADDR
// if Crawls ( un ) then
29592: LD_VAR 0 2
29596: PPUSH
29597: CALL_OW 318
29601: IFFALSE 29612
// ComWalk ( un ) ;
29603: LD_VAR 0 2
29607: PPUSH
29608: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29612: LD_VAR 0 2
29616: PPUSH
29617: LD_INT 8
29619: PPUSH
29620: CALL_OW 336
// end ;
29624: PPOPN 3
29626: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29627: LD_EXP 63
29631: PUSH
29632: LD_EXP 107
29636: AND
29637: IFFALSE 29781
29639: GO 29641
29641: DISABLE
29642: LD_INT 0
29644: PPUSH
29645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29646: LD_ADDR_VAR 0 2
29650: PUSH
29651: LD_INT 22
29653: PUSH
29654: LD_OWVAR 2
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 21
29665: PUSH
29666: LD_INT 2
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 2
29675: PUSH
29676: LD_INT 34
29678: PUSH
29679: LD_INT 12
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 34
29688: PUSH
29689: LD_INT 51
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 34
29698: PUSH
29699: LD_INT 32
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: LIST
29716: PPUSH
29717: CALL_OW 69
29721: ST_TO_ADDR
// if not tmp then
29722: LD_VAR 0 2
29726: NOT
29727: IFFALSE 29731
// exit ;
29729: GO 29781
// for i in tmp do
29731: LD_ADDR_VAR 0 1
29735: PUSH
29736: LD_VAR 0 2
29740: PUSH
29741: FOR_IN
29742: IFFALSE 29779
// if GetCargo ( i , mat_artifact ) = 0 then
29744: LD_VAR 0 1
29748: PPUSH
29749: LD_INT 4
29751: PPUSH
29752: CALL_OW 289
29756: PUSH
29757: LD_INT 0
29759: EQUAL
29760: IFFALSE 29777
// SetCargo ( i , mat_siberit , 100 ) ;
29762: LD_VAR 0 1
29766: PPUSH
29767: LD_INT 3
29769: PPUSH
29770: LD_INT 100
29772: PPUSH
29773: CALL_OW 290
29777: GO 29741
29779: POP
29780: POP
// end ;
29781: PPOPN 2
29783: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29784: LD_EXP 63
29788: PUSH
29789: LD_EXP 108
29793: AND
29794: IFFALSE 29977
29796: GO 29798
29798: DISABLE
29799: LD_INT 0
29801: PPUSH
29802: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29803: LD_ADDR_VAR 0 2
29807: PUSH
29808: LD_INT 22
29810: PUSH
29811: LD_OWVAR 2
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PPUSH
29820: CALL_OW 69
29824: ST_TO_ADDR
// if not tmp then
29825: LD_VAR 0 2
29829: NOT
29830: IFFALSE 29834
// exit ;
29832: GO 29977
// for i := 1 to 2 do
29834: LD_ADDR_VAR 0 1
29838: PUSH
29839: DOUBLE
29840: LD_INT 1
29842: DEC
29843: ST_TO_ADDR
29844: LD_INT 2
29846: PUSH
29847: FOR_TO
29848: IFFALSE 29975
// begin uc_side := your_side ;
29850: LD_ADDR_OWVAR 20
29854: PUSH
29855: LD_OWVAR 2
29859: ST_TO_ADDR
// uc_nation := nation_american ;
29860: LD_ADDR_OWVAR 21
29864: PUSH
29865: LD_INT 1
29867: ST_TO_ADDR
// vc_chassis := us_morphling ;
29868: LD_ADDR_OWVAR 37
29872: PUSH
29873: LD_INT 5
29875: ST_TO_ADDR
// vc_engine := engine_siberite ;
29876: LD_ADDR_OWVAR 39
29880: PUSH
29881: LD_INT 3
29883: ST_TO_ADDR
// vc_control := control_computer ;
29884: LD_ADDR_OWVAR 38
29888: PUSH
29889: LD_INT 3
29891: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29892: LD_ADDR_OWVAR 40
29896: PUSH
29897: LD_INT 10
29899: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29900: LD_VAR 0 2
29904: PUSH
29905: LD_INT 1
29907: ARRAY
29908: PPUSH
29909: CALL_OW 310
29913: NOT
29914: IFFALSE 29961
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29916: CALL_OW 45
29920: PPUSH
29921: LD_VAR 0 2
29925: PUSH
29926: LD_INT 1
29928: ARRAY
29929: PPUSH
29930: CALL_OW 250
29934: PPUSH
29935: LD_VAR 0 2
29939: PUSH
29940: LD_INT 1
29942: ARRAY
29943: PPUSH
29944: CALL_OW 251
29948: PPUSH
29949: LD_INT 12
29951: PPUSH
29952: LD_INT 1
29954: PPUSH
29955: CALL_OW 50
29959: GO 29973
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29961: CALL_OW 45
29965: PPUSH
29966: LD_INT 1
29968: PPUSH
29969: CALL_OW 51
// end ;
29973: GO 29847
29975: POP
29976: POP
// end ;
29977: PPOPN 2
29979: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29980: LD_EXP 63
29984: PUSH
29985: LD_EXP 109
29989: AND
29990: IFFALSE 30212
29992: GO 29994
29994: DISABLE
29995: LD_INT 0
29997: PPUSH
29998: PPUSH
29999: PPUSH
30000: PPUSH
30001: PPUSH
30002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30003: LD_ADDR_VAR 0 6
30007: PUSH
30008: LD_INT 22
30010: PUSH
30011: LD_OWVAR 2
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 21
30022: PUSH
30023: LD_INT 1
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 3
30032: PUSH
30033: LD_INT 23
30035: PUSH
30036: LD_INT 0
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: LIST
30051: PPUSH
30052: CALL_OW 69
30056: ST_TO_ADDR
// if not tmp then
30057: LD_VAR 0 6
30061: NOT
30062: IFFALSE 30066
// exit ;
30064: GO 30212
// s1 := rand ( 1 , 4 ) ;
30066: LD_ADDR_VAR 0 2
30070: PUSH
30071: LD_INT 1
30073: PPUSH
30074: LD_INT 4
30076: PPUSH
30077: CALL_OW 12
30081: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30082: LD_ADDR_VAR 0 4
30086: PUSH
30087: LD_VAR 0 6
30091: PUSH
30092: LD_INT 1
30094: ARRAY
30095: PPUSH
30096: LD_VAR 0 2
30100: PPUSH
30101: CALL_OW 259
30105: ST_TO_ADDR
// if s1 = 1 then
30106: LD_VAR 0 2
30110: PUSH
30111: LD_INT 1
30113: EQUAL
30114: IFFALSE 30134
// s2 := rand ( 2 , 4 ) else
30116: LD_ADDR_VAR 0 3
30120: PUSH
30121: LD_INT 2
30123: PPUSH
30124: LD_INT 4
30126: PPUSH
30127: CALL_OW 12
30131: ST_TO_ADDR
30132: GO 30142
// s2 := 1 ;
30134: LD_ADDR_VAR 0 3
30138: PUSH
30139: LD_INT 1
30141: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30142: LD_ADDR_VAR 0 5
30146: PUSH
30147: LD_VAR 0 6
30151: PUSH
30152: LD_INT 1
30154: ARRAY
30155: PPUSH
30156: LD_VAR 0 3
30160: PPUSH
30161: CALL_OW 259
30165: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30166: LD_VAR 0 6
30170: PUSH
30171: LD_INT 1
30173: ARRAY
30174: PPUSH
30175: LD_VAR 0 2
30179: PPUSH
30180: LD_VAR 0 5
30184: PPUSH
30185: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30189: LD_VAR 0 6
30193: PUSH
30194: LD_INT 1
30196: ARRAY
30197: PPUSH
30198: LD_VAR 0 3
30202: PPUSH
30203: LD_VAR 0 4
30207: PPUSH
30208: CALL_OW 237
// end ;
30212: PPOPN 6
30214: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30215: LD_EXP 63
30219: PUSH
30220: LD_EXP 110
30224: AND
30225: IFFALSE 30304
30227: GO 30229
30229: DISABLE
30230: LD_INT 0
30232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30233: LD_ADDR_VAR 0 1
30237: PUSH
30238: LD_INT 22
30240: PUSH
30241: LD_OWVAR 2
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 30
30252: PUSH
30253: LD_INT 3
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PPUSH
30264: CALL_OW 69
30268: ST_TO_ADDR
// if not tmp then
30269: LD_VAR 0 1
30273: NOT
30274: IFFALSE 30278
// exit ;
30276: GO 30304
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30278: LD_VAR 0 1
30282: PUSH
30283: LD_INT 1
30285: PPUSH
30286: LD_VAR 0 1
30290: PPUSH
30291: CALL_OW 12
30295: ARRAY
30296: PPUSH
30297: LD_INT 1
30299: PPUSH
30300: CALL_OW 234
// end ;
30304: PPOPN 1
30306: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30307: LD_EXP 63
30311: PUSH
30312: LD_EXP 111
30316: AND
30317: IFFALSE 30429
30319: GO 30321
30321: DISABLE
30322: LD_INT 0
30324: PPUSH
30325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30326: LD_ADDR_VAR 0 2
30330: PUSH
30331: LD_INT 22
30333: PUSH
30334: LD_OWVAR 2
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 2
30345: PUSH
30346: LD_INT 30
30348: PUSH
30349: LD_INT 27
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 30
30358: PUSH
30359: LD_INT 26
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 30
30368: PUSH
30369: LD_INT 28
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PPUSH
30386: CALL_OW 69
30390: ST_TO_ADDR
// if not tmp then
30391: LD_VAR 0 2
30395: NOT
30396: IFFALSE 30400
// exit ;
30398: GO 30429
// for i in tmp do
30400: LD_ADDR_VAR 0 1
30404: PUSH
30405: LD_VAR 0 2
30409: PUSH
30410: FOR_IN
30411: IFFALSE 30427
// SetLives ( i , 1 ) ;
30413: LD_VAR 0 1
30417: PPUSH
30418: LD_INT 1
30420: PPUSH
30421: CALL_OW 234
30425: GO 30410
30427: POP
30428: POP
// end ;
30429: PPOPN 2
30431: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30432: LD_EXP 63
30436: PUSH
30437: LD_EXP 112
30441: AND
30442: IFFALSE 30729
30444: GO 30446
30446: DISABLE
30447: LD_INT 0
30449: PPUSH
30450: PPUSH
30451: PPUSH
// begin i := rand ( 1 , 7 ) ;
30452: LD_ADDR_VAR 0 1
30456: PUSH
30457: LD_INT 1
30459: PPUSH
30460: LD_INT 7
30462: PPUSH
30463: CALL_OW 12
30467: ST_TO_ADDR
// case i of 1 :
30468: LD_VAR 0 1
30472: PUSH
30473: LD_INT 1
30475: DOUBLE
30476: EQUAL
30477: IFTRUE 30481
30479: GO 30491
30481: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30482: LD_STRING earthquake(getX(game), 0, 32)
30484: PPUSH
30485: CALL_OW 559
30489: GO 30729
30491: LD_INT 2
30493: DOUBLE
30494: EQUAL
30495: IFTRUE 30499
30497: GO 30513
30499: POP
// begin ToLua ( displayStucuk(); ) ;
30500: LD_STRING displayStucuk();
30502: PPUSH
30503: CALL_OW 559
// ResetFog ;
30507: CALL_OW 335
// end ; 3 :
30511: GO 30729
30513: LD_INT 3
30515: DOUBLE
30516: EQUAL
30517: IFTRUE 30521
30519: GO 30625
30521: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30522: LD_ADDR_VAR 0 2
30526: PUSH
30527: LD_INT 22
30529: PUSH
30530: LD_OWVAR 2
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 25
30541: PUSH
30542: LD_INT 1
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PPUSH
30553: CALL_OW 69
30557: ST_TO_ADDR
// if not tmp then
30558: LD_VAR 0 2
30562: NOT
30563: IFFALSE 30567
// exit ;
30565: GO 30729
// un := tmp [ rand ( 1 , tmp ) ] ;
30567: LD_ADDR_VAR 0 3
30571: PUSH
30572: LD_VAR 0 2
30576: PUSH
30577: LD_INT 1
30579: PPUSH
30580: LD_VAR 0 2
30584: PPUSH
30585: CALL_OW 12
30589: ARRAY
30590: ST_TO_ADDR
// if Crawls ( un ) then
30591: LD_VAR 0 3
30595: PPUSH
30596: CALL_OW 318
30600: IFFALSE 30611
// ComWalk ( un ) ;
30602: LD_VAR 0 3
30606: PPUSH
30607: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30611: LD_VAR 0 3
30615: PPUSH
30616: LD_INT 8
30618: PPUSH
30619: CALL_OW 336
// end ; 4 :
30623: GO 30729
30625: LD_INT 4
30627: DOUBLE
30628: EQUAL
30629: IFTRUE 30633
30631: GO 30707
30633: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30634: LD_ADDR_VAR 0 2
30638: PUSH
30639: LD_INT 22
30641: PUSH
30642: LD_OWVAR 2
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 30
30653: PUSH
30654: LD_INT 29
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PPUSH
30665: CALL_OW 69
30669: ST_TO_ADDR
// if not tmp then
30670: LD_VAR 0 2
30674: NOT
30675: IFFALSE 30679
// exit ;
30677: GO 30729
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30679: LD_VAR 0 2
30683: PUSH
30684: LD_INT 1
30686: ARRAY
30687: PPUSH
30688: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30692: LD_VAR 0 2
30696: PUSH
30697: LD_INT 1
30699: ARRAY
30700: PPUSH
30701: CALL_OW 65
// end ; 5 .. 7 :
30705: GO 30729
30707: LD_INT 5
30709: DOUBLE
30710: GREATEREQUAL
30711: IFFALSE 30719
30713: LD_INT 7
30715: DOUBLE
30716: LESSEQUAL
30717: IFTRUE 30721
30719: GO 30728
30721: POP
// StreamSibBomb ; end ;
30722: CALL 26966 0 0
30726: GO 30729
30728: POP
// end ;
30729: PPOPN 3
30731: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30732: LD_EXP 63
30736: PUSH
30737: LD_EXP 113
30741: AND
30742: IFFALSE 30898
30744: GO 30746
30746: DISABLE
30747: LD_INT 0
30749: PPUSH
30750: PPUSH
30751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30752: LD_ADDR_VAR 0 2
30756: PUSH
30757: LD_INT 81
30759: PUSH
30760: LD_OWVAR 2
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 2
30771: PUSH
30772: LD_INT 21
30774: PUSH
30775: LD_INT 1
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 21
30784: PUSH
30785: LD_INT 2
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: LIST
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PPUSH
30801: CALL_OW 69
30805: ST_TO_ADDR
// if not tmp then
30806: LD_VAR 0 2
30810: NOT
30811: IFFALSE 30815
// exit ;
30813: GO 30898
// p := 0 ;
30815: LD_ADDR_VAR 0 3
30819: PUSH
30820: LD_INT 0
30822: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30823: LD_INT 35
30825: PPUSH
30826: CALL_OW 67
// p := p + 1 ;
30830: LD_ADDR_VAR 0 3
30834: PUSH
30835: LD_VAR 0 3
30839: PUSH
30840: LD_INT 1
30842: PLUS
30843: ST_TO_ADDR
// for i in tmp do
30844: LD_ADDR_VAR 0 1
30848: PUSH
30849: LD_VAR 0 2
30853: PUSH
30854: FOR_IN
30855: IFFALSE 30886
// if GetLives ( i ) < 1000 then
30857: LD_VAR 0 1
30861: PPUSH
30862: CALL_OW 256
30866: PUSH
30867: LD_INT 1000
30869: LESS
30870: IFFALSE 30884
// SetLives ( i , 1000 ) ;
30872: LD_VAR 0 1
30876: PPUSH
30877: LD_INT 1000
30879: PPUSH
30880: CALL_OW 234
30884: GO 30854
30886: POP
30887: POP
// until p > 20 ;
30888: LD_VAR 0 3
30892: PUSH
30893: LD_INT 20
30895: GREATER
30896: IFFALSE 30823
// end ;
30898: PPOPN 3
30900: END
// every 0 0$1 trigger StreamModeActive and sTime do
30901: LD_EXP 63
30905: PUSH
30906: LD_EXP 114
30910: AND
30911: IFFALSE 30946
30913: GO 30915
30915: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30916: LD_INT 28
30918: PPUSH
30919: LD_OWVAR 2
30923: PPUSH
30924: LD_INT 2
30926: PPUSH
30927: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30931: LD_INT 30
30933: PPUSH
30934: LD_OWVAR 2
30938: PPUSH
30939: LD_INT 2
30941: PPUSH
30942: CALL_OW 322
// end ;
30946: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30947: LD_EXP 63
30951: PUSH
30952: LD_EXP 115
30956: AND
30957: IFFALSE 31078
30959: GO 30961
30961: DISABLE
30962: LD_INT 0
30964: PPUSH
30965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30966: LD_ADDR_VAR 0 2
30970: PUSH
30971: LD_INT 22
30973: PUSH
30974: LD_OWVAR 2
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 21
30985: PUSH
30986: LD_INT 1
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 3
30995: PUSH
30996: LD_INT 23
30998: PUSH
30999: LD_INT 0
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: LIST
31014: PPUSH
31015: CALL_OW 69
31019: ST_TO_ADDR
// if not tmp then
31020: LD_VAR 0 2
31024: NOT
31025: IFFALSE 31029
// exit ;
31027: GO 31078
// for i in tmp do
31029: LD_ADDR_VAR 0 1
31033: PUSH
31034: LD_VAR 0 2
31038: PUSH
31039: FOR_IN
31040: IFFALSE 31076
// begin if Crawls ( i ) then
31042: LD_VAR 0 1
31046: PPUSH
31047: CALL_OW 318
31051: IFFALSE 31062
// ComWalk ( i ) ;
31053: LD_VAR 0 1
31057: PPUSH
31058: CALL_OW 138
// SetClass ( i , 2 ) ;
31062: LD_VAR 0 1
31066: PPUSH
31067: LD_INT 2
31069: PPUSH
31070: CALL_OW 336
// end ;
31074: GO 31039
31076: POP
31077: POP
// end ;
31078: PPOPN 2
31080: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31081: LD_EXP 63
31085: PUSH
31086: LD_EXP 116
31090: AND
31091: IFFALSE 31379
31093: GO 31095
31095: DISABLE
31096: LD_INT 0
31098: PPUSH
31099: PPUSH
31100: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31101: LD_OWVAR 2
31105: PPUSH
31106: LD_INT 9
31108: PPUSH
31109: LD_INT 1
31111: PPUSH
31112: LD_INT 1
31114: PPUSH
31115: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31119: LD_INT 9
31121: PPUSH
31122: LD_OWVAR 2
31126: PPUSH
31127: CALL_OW 343
// uc_side := 9 ;
31131: LD_ADDR_OWVAR 20
31135: PUSH
31136: LD_INT 9
31138: ST_TO_ADDR
// uc_nation := 2 ;
31139: LD_ADDR_OWVAR 21
31143: PUSH
31144: LD_INT 2
31146: ST_TO_ADDR
// hc_name := Dark Warrior ;
31147: LD_ADDR_OWVAR 26
31151: PUSH
31152: LD_STRING Dark Warrior
31154: ST_TO_ADDR
// hc_gallery :=  ;
31155: LD_ADDR_OWVAR 33
31159: PUSH
31160: LD_STRING 
31162: ST_TO_ADDR
// hc_noskilllimit := true ;
31163: LD_ADDR_OWVAR 76
31167: PUSH
31168: LD_INT 1
31170: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31171: LD_ADDR_OWVAR 31
31175: PUSH
31176: LD_INT 30
31178: PUSH
31179: LD_INT 30
31181: PUSH
31182: LD_INT 30
31184: PUSH
31185: LD_INT 30
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: ST_TO_ADDR
// un := CreateHuman ;
31194: LD_ADDR_VAR 0 3
31198: PUSH
31199: CALL_OW 44
31203: ST_TO_ADDR
// hc_noskilllimit := false ;
31204: LD_ADDR_OWVAR 76
31208: PUSH
31209: LD_INT 0
31211: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31212: LD_VAR 0 3
31216: PPUSH
31217: LD_INT 1
31219: PPUSH
31220: CALL_OW 51
// ToLua ( playRanger() ) ;
31224: LD_STRING playRanger()
31226: PPUSH
31227: CALL_OW 559
// p := 0 ;
31231: LD_ADDR_VAR 0 2
31235: PUSH
31236: LD_INT 0
31238: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31239: LD_INT 35
31241: PPUSH
31242: CALL_OW 67
// p := p + 1 ;
31246: LD_ADDR_VAR 0 2
31250: PUSH
31251: LD_VAR 0 2
31255: PUSH
31256: LD_INT 1
31258: PLUS
31259: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31260: LD_VAR 0 3
31264: PPUSH
31265: CALL_OW 256
31269: PUSH
31270: LD_INT 1000
31272: LESS
31273: IFFALSE 31287
// SetLives ( un , 1000 ) ;
31275: LD_VAR 0 3
31279: PPUSH
31280: LD_INT 1000
31282: PPUSH
31283: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31287: LD_VAR 0 3
31291: PPUSH
31292: LD_INT 81
31294: PUSH
31295: LD_OWVAR 2
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 91
31306: PUSH
31307: LD_VAR 0 3
31311: PUSH
31312: LD_INT 30
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: LIST
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PPUSH
31324: CALL_OW 69
31328: PPUSH
31329: LD_VAR 0 3
31333: PPUSH
31334: CALL_OW 74
31338: PPUSH
31339: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31343: LD_VAR 0 2
31347: PUSH
31348: LD_INT 80
31350: GREATER
31351: PUSH
31352: LD_VAR 0 3
31356: PPUSH
31357: CALL_OW 301
31361: OR
31362: IFFALSE 31239
// if un then
31364: LD_VAR 0 3
31368: IFFALSE 31379
// RemoveUnit ( un ) ;
31370: LD_VAR 0 3
31374: PPUSH
31375: CALL_OW 64
// end ;
31379: PPOPN 3
31381: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31382: LD_EXP 117
31386: IFFALSE 31502
31388: GO 31390
31390: DISABLE
31391: LD_INT 0
31393: PPUSH
31394: PPUSH
31395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31396: LD_ADDR_VAR 0 2
31400: PUSH
31401: LD_INT 81
31403: PUSH
31404: LD_OWVAR 2
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 21
31415: PUSH
31416: LD_INT 1
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PPUSH
31427: CALL_OW 69
31431: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31432: LD_STRING playComputer()
31434: PPUSH
31435: CALL_OW 559
// if not tmp then
31439: LD_VAR 0 2
31443: NOT
31444: IFFALSE 31448
// exit ;
31446: GO 31502
// for i in tmp do
31448: LD_ADDR_VAR 0 1
31452: PUSH
31453: LD_VAR 0 2
31457: PUSH
31458: FOR_IN
31459: IFFALSE 31500
// for j := 1 to 4 do
31461: LD_ADDR_VAR 0 3
31465: PUSH
31466: DOUBLE
31467: LD_INT 1
31469: DEC
31470: ST_TO_ADDR
31471: LD_INT 4
31473: PUSH
31474: FOR_TO
31475: IFFALSE 31496
// SetSkill ( i , j , 10 ) ;
31477: LD_VAR 0 1
31481: PPUSH
31482: LD_VAR 0 3
31486: PPUSH
31487: LD_INT 10
31489: PPUSH
31490: CALL_OW 237
31494: GO 31474
31496: POP
31497: POP
31498: GO 31458
31500: POP
31501: POP
// end ;
31502: PPOPN 3
31504: END
// every 0 0$1 trigger s30 do var i , tmp ;
31505: LD_EXP 118
31509: IFFALSE 31578
31511: GO 31513
31513: DISABLE
31514: LD_INT 0
31516: PPUSH
31517: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31518: LD_ADDR_VAR 0 2
31522: PUSH
31523: LD_INT 22
31525: PUSH
31526: LD_OWVAR 2
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PPUSH
31535: CALL_OW 69
31539: ST_TO_ADDR
// if not tmp then
31540: LD_VAR 0 2
31544: NOT
31545: IFFALSE 31549
// exit ;
31547: GO 31578
// for i in tmp do
31549: LD_ADDR_VAR 0 1
31553: PUSH
31554: LD_VAR 0 2
31558: PUSH
31559: FOR_IN
31560: IFFALSE 31576
// SetLives ( i , 300 ) ;
31562: LD_VAR 0 1
31566: PPUSH
31567: LD_INT 300
31569: PPUSH
31570: CALL_OW 234
31574: GO 31559
31576: POP
31577: POP
// end ;
31578: PPOPN 2
31580: END
// every 0 0$1 trigger s60 do var i , tmp ;
31581: LD_EXP 119
31585: IFFALSE 31654
31587: GO 31589
31589: DISABLE
31590: LD_INT 0
31592: PPUSH
31593: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31594: LD_ADDR_VAR 0 2
31598: PUSH
31599: LD_INT 22
31601: PUSH
31602: LD_OWVAR 2
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PPUSH
31611: CALL_OW 69
31615: ST_TO_ADDR
// if not tmp then
31616: LD_VAR 0 2
31620: NOT
31621: IFFALSE 31625
// exit ;
31623: GO 31654
// for i in tmp do
31625: LD_ADDR_VAR 0 1
31629: PUSH
31630: LD_VAR 0 2
31634: PUSH
31635: FOR_IN
31636: IFFALSE 31652
// SetLives ( i , 600 ) ;
31638: LD_VAR 0 1
31642: PPUSH
31643: LD_INT 600
31645: PPUSH
31646: CALL_OW 234
31650: GO 31635
31652: POP
31653: POP
// end ;
31654: PPOPN 2
31656: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31657: LD_INT 0
31659: PPUSH
// case cmd of 301 :
31660: LD_VAR 0 1
31664: PUSH
31665: LD_INT 301
31667: DOUBLE
31668: EQUAL
31669: IFTRUE 31673
31671: GO 31705
31673: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31674: LD_VAR 0 6
31678: PPUSH
31679: LD_VAR 0 7
31683: PPUSH
31684: LD_VAR 0 8
31688: PPUSH
31689: LD_VAR 0 4
31693: PPUSH
31694: LD_VAR 0 5
31698: PPUSH
31699: CALL 32906 0 5
31703: GO 31826
31705: LD_INT 302
31707: DOUBLE
31708: EQUAL
31709: IFTRUE 31713
31711: GO 31750
31713: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31714: LD_VAR 0 6
31718: PPUSH
31719: LD_VAR 0 7
31723: PPUSH
31724: LD_VAR 0 8
31728: PPUSH
31729: LD_VAR 0 9
31733: PPUSH
31734: LD_VAR 0 4
31738: PPUSH
31739: LD_VAR 0 5
31743: PPUSH
31744: CALL 32997 0 6
31748: GO 31826
31750: LD_INT 303
31752: DOUBLE
31753: EQUAL
31754: IFTRUE 31758
31756: GO 31795
31758: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31759: LD_VAR 0 6
31763: PPUSH
31764: LD_VAR 0 7
31768: PPUSH
31769: LD_VAR 0 8
31773: PPUSH
31774: LD_VAR 0 9
31778: PPUSH
31779: LD_VAR 0 4
31783: PPUSH
31784: LD_VAR 0 5
31788: PPUSH
31789: CALL 31831 0 6
31793: GO 31826
31795: LD_INT 304
31797: DOUBLE
31798: EQUAL
31799: IFTRUE 31803
31801: GO 31825
31803: POP
// hHackTeleport ( unit , x , y ) ; end ;
31804: LD_VAR 0 2
31808: PPUSH
31809: LD_VAR 0 4
31813: PPUSH
31814: LD_VAR 0 5
31818: PPUSH
31819: CALL 33590 0 3
31823: GO 31826
31825: POP
// end ;
31826: LD_VAR 0 12
31830: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31831: LD_INT 0
31833: PPUSH
31834: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31835: LD_VAR 0 1
31839: PUSH
31840: LD_INT 1
31842: LESS
31843: PUSH
31844: LD_VAR 0 1
31848: PUSH
31849: LD_INT 3
31851: GREATER
31852: OR
31853: PUSH
31854: LD_VAR 0 5
31858: PPUSH
31859: LD_VAR 0 6
31863: PPUSH
31864: CALL_OW 428
31868: OR
31869: IFFALSE 31873
// exit ;
31871: GO 32593
// uc_side := your_side ;
31873: LD_ADDR_OWVAR 20
31877: PUSH
31878: LD_OWVAR 2
31882: ST_TO_ADDR
// uc_nation := nation ;
31883: LD_ADDR_OWVAR 21
31887: PUSH
31888: LD_VAR 0 1
31892: ST_TO_ADDR
// bc_level = 1 ;
31893: LD_ADDR_OWVAR 43
31897: PUSH
31898: LD_INT 1
31900: ST_TO_ADDR
// case btype of 1 :
31901: LD_VAR 0 2
31905: PUSH
31906: LD_INT 1
31908: DOUBLE
31909: EQUAL
31910: IFTRUE 31914
31912: GO 31925
31914: POP
// bc_type := b_depot ; 2 :
31915: LD_ADDR_OWVAR 42
31919: PUSH
31920: LD_INT 0
31922: ST_TO_ADDR
31923: GO 32537
31925: LD_INT 2
31927: DOUBLE
31928: EQUAL
31929: IFTRUE 31933
31931: GO 31944
31933: POP
// bc_type := b_warehouse ; 3 :
31934: LD_ADDR_OWVAR 42
31938: PUSH
31939: LD_INT 1
31941: ST_TO_ADDR
31942: GO 32537
31944: LD_INT 3
31946: DOUBLE
31947: EQUAL
31948: IFTRUE 31952
31950: GO 31963
31952: POP
// bc_type := b_lab ; 4 .. 9 :
31953: LD_ADDR_OWVAR 42
31957: PUSH
31958: LD_INT 6
31960: ST_TO_ADDR
31961: GO 32537
31963: LD_INT 4
31965: DOUBLE
31966: GREATEREQUAL
31967: IFFALSE 31975
31969: LD_INT 9
31971: DOUBLE
31972: LESSEQUAL
31973: IFTRUE 31977
31975: GO 32029
31977: POP
// begin bc_type := b_lab_half ;
31978: LD_ADDR_OWVAR 42
31982: PUSH
31983: LD_INT 7
31985: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31986: LD_ADDR_OWVAR 44
31990: PUSH
31991: LD_INT 10
31993: PUSH
31994: LD_INT 11
31996: PUSH
31997: LD_INT 12
31999: PUSH
32000: LD_INT 15
32002: PUSH
32003: LD_INT 14
32005: PUSH
32006: LD_INT 13
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: PUSH
32017: LD_VAR 0 2
32021: PUSH
32022: LD_INT 3
32024: MINUS
32025: ARRAY
32026: ST_TO_ADDR
// end ; 10 .. 13 :
32027: GO 32537
32029: LD_INT 10
32031: DOUBLE
32032: GREATEREQUAL
32033: IFFALSE 32041
32035: LD_INT 13
32037: DOUBLE
32038: LESSEQUAL
32039: IFTRUE 32043
32041: GO 32120
32043: POP
// begin bc_type := b_lab_full ;
32044: LD_ADDR_OWVAR 42
32048: PUSH
32049: LD_INT 8
32051: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32052: LD_ADDR_OWVAR 44
32056: PUSH
32057: LD_INT 10
32059: PUSH
32060: LD_INT 12
32062: PUSH
32063: LD_INT 14
32065: PUSH
32066: LD_INT 13
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: PUSH
32075: LD_VAR 0 2
32079: PUSH
32080: LD_INT 9
32082: MINUS
32083: ARRAY
32084: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32085: LD_ADDR_OWVAR 45
32089: PUSH
32090: LD_INT 11
32092: PUSH
32093: LD_INT 15
32095: PUSH
32096: LD_INT 12
32098: PUSH
32099: LD_INT 15
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: PUSH
32108: LD_VAR 0 2
32112: PUSH
32113: LD_INT 9
32115: MINUS
32116: ARRAY
32117: ST_TO_ADDR
// end ; 14 :
32118: GO 32537
32120: LD_INT 14
32122: DOUBLE
32123: EQUAL
32124: IFTRUE 32128
32126: GO 32139
32128: POP
// bc_type := b_workshop ; 15 :
32129: LD_ADDR_OWVAR 42
32133: PUSH
32134: LD_INT 2
32136: ST_TO_ADDR
32137: GO 32537
32139: LD_INT 15
32141: DOUBLE
32142: EQUAL
32143: IFTRUE 32147
32145: GO 32158
32147: POP
// bc_type := b_factory ; 16 :
32148: LD_ADDR_OWVAR 42
32152: PUSH
32153: LD_INT 3
32155: ST_TO_ADDR
32156: GO 32537
32158: LD_INT 16
32160: DOUBLE
32161: EQUAL
32162: IFTRUE 32166
32164: GO 32177
32166: POP
// bc_type := b_ext_gun ; 17 :
32167: LD_ADDR_OWVAR 42
32171: PUSH
32172: LD_INT 17
32174: ST_TO_ADDR
32175: GO 32537
32177: LD_INT 17
32179: DOUBLE
32180: EQUAL
32181: IFTRUE 32185
32183: GO 32213
32185: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32186: LD_ADDR_OWVAR 42
32190: PUSH
32191: LD_INT 19
32193: PUSH
32194: LD_INT 23
32196: PUSH
32197: LD_INT 19
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: LIST
32204: PUSH
32205: LD_VAR 0 1
32209: ARRAY
32210: ST_TO_ADDR
32211: GO 32537
32213: LD_INT 18
32215: DOUBLE
32216: EQUAL
32217: IFTRUE 32221
32219: GO 32232
32221: POP
// bc_type := b_ext_radar ; 19 :
32222: LD_ADDR_OWVAR 42
32226: PUSH
32227: LD_INT 20
32229: ST_TO_ADDR
32230: GO 32537
32232: LD_INT 19
32234: DOUBLE
32235: EQUAL
32236: IFTRUE 32240
32238: GO 32251
32240: POP
// bc_type := b_ext_radio ; 20 :
32241: LD_ADDR_OWVAR 42
32245: PUSH
32246: LD_INT 22
32248: ST_TO_ADDR
32249: GO 32537
32251: LD_INT 20
32253: DOUBLE
32254: EQUAL
32255: IFTRUE 32259
32257: GO 32270
32259: POP
// bc_type := b_ext_siberium ; 21 :
32260: LD_ADDR_OWVAR 42
32264: PUSH
32265: LD_INT 21
32267: ST_TO_ADDR
32268: GO 32537
32270: LD_INT 21
32272: DOUBLE
32273: EQUAL
32274: IFTRUE 32278
32276: GO 32289
32278: POP
// bc_type := b_ext_computer ; 22 :
32279: LD_ADDR_OWVAR 42
32283: PUSH
32284: LD_INT 24
32286: ST_TO_ADDR
32287: GO 32537
32289: LD_INT 22
32291: DOUBLE
32292: EQUAL
32293: IFTRUE 32297
32295: GO 32308
32297: POP
// bc_type := b_ext_track ; 23 :
32298: LD_ADDR_OWVAR 42
32302: PUSH
32303: LD_INT 16
32305: ST_TO_ADDR
32306: GO 32537
32308: LD_INT 23
32310: DOUBLE
32311: EQUAL
32312: IFTRUE 32316
32314: GO 32327
32316: POP
// bc_type := b_ext_laser ; 24 :
32317: LD_ADDR_OWVAR 42
32321: PUSH
32322: LD_INT 25
32324: ST_TO_ADDR
32325: GO 32537
32327: LD_INT 24
32329: DOUBLE
32330: EQUAL
32331: IFTRUE 32335
32333: GO 32346
32335: POP
// bc_type := b_control_tower ; 25 :
32336: LD_ADDR_OWVAR 42
32340: PUSH
32341: LD_INT 36
32343: ST_TO_ADDR
32344: GO 32537
32346: LD_INT 25
32348: DOUBLE
32349: EQUAL
32350: IFTRUE 32354
32352: GO 32365
32354: POP
// bc_type := b_breastwork ; 26 :
32355: LD_ADDR_OWVAR 42
32359: PUSH
32360: LD_INT 31
32362: ST_TO_ADDR
32363: GO 32537
32365: LD_INT 26
32367: DOUBLE
32368: EQUAL
32369: IFTRUE 32373
32371: GO 32384
32373: POP
// bc_type := b_bunker ; 27 :
32374: LD_ADDR_OWVAR 42
32378: PUSH
32379: LD_INT 32
32381: ST_TO_ADDR
32382: GO 32537
32384: LD_INT 27
32386: DOUBLE
32387: EQUAL
32388: IFTRUE 32392
32390: GO 32403
32392: POP
// bc_type := b_turret ; 28 :
32393: LD_ADDR_OWVAR 42
32397: PUSH
32398: LD_INT 33
32400: ST_TO_ADDR
32401: GO 32537
32403: LD_INT 28
32405: DOUBLE
32406: EQUAL
32407: IFTRUE 32411
32409: GO 32422
32411: POP
// bc_type := b_armoury ; 29 :
32412: LD_ADDR_OWVAR 42
32416: PUSH
32417: LD_INT 4
32419: ST_TO_ADDR
32420: GO 32537
32422: LD_INT 29
32424: DOUBLE
32425: EQUAL
32426: IFTRUE 32430
32428: GO 32441
32430: POP
// bc_type := b_barracks ; 30 :
32431: LD_ADDR_OWVAR 42
32435: PUSH
32436: LD_INT 5
32438: ST_TO_ADDR
32439: GO 32537
32441: LD_INT 30
32443: DOUBLE
32444: EQUAL
32445: IFTRUE 32449
32447: GO 32460
32449: POP
// bc_type := b_solar_power ; 31 :
32450: LD_ADDR_OWVAR 42
32454: PUSH
32455: LD_INT 27
32457: ST_TO_ADDR
32458: GO 32537
32460: LD_INT 31
32462: DOUBLE
32463: EQUAL
32464: IFTRUE 32468
32466: GO 32479
32468: POP
// bc_type := b_oil_power ; 32 :
32469: LD_ADDR_OWVAR 42
32473: PUSH
32474: LD_INT 26
32476: ST_TO_ADDR
32477: GO 32537
32479: LD_INT 32
32481: DOUBLE
32482: EQUAL
32483: IFTRUE 32487
32485: GO 32498
32487: POP
// bc_type := b_siberite_power ; 33 :
32488: LD_ADDR_OWVAR 42
32492: PUSH
32493: LD_INT 28
32495: ST_TO_ADDR
32496: GO 32537
32498: LD_INT 33
32500: DOUBLE
32501: EQUAL
32502: IFTRUE 32506
32504: GO 32517
32506: POP
// bc_type := b_oil_mine ; 34 :
32507: LD_ADDR_OWVAR 42
32511: PUSH
32512: LD_INT 29
32514: ST_TO_ADDR
32515: GO 32537
32517: LD_INT 34
32519: DOUBLE
32520: EQUAL
32521: IFTRUE 32525
32523: GO 32536
32525: POP
// bc_type := b_siberite_mine ; end ;
32526: LD_ADDR_OWVAR 42
32530: PUSH
32531: LD_INT 30
32533: ST_TO_ADDR
32534: GO 32537
32536: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32537: LD_ADDR_VAR 0 8
32541: PUSH
32542: LD_VAR 0 5
32546: PPUSH
32547: LD_VAR 0 6
32551: PPUSH
32552: LD_VAR 0 3
32556: PPUSH
32557: CALL_OW 47
32561: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32562: LD_OWVAR 42
32566: PUSH
32567: LD_INT 32
32569: PUSH
32570: LD_INT 33
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: IN
32577: IFFALSE 32593
// PlaceWeaponTurret ( b , weapon ) ;
32579: LD_VAR 0 8
32583: PPUSH
32584: LD_VAR 0 4
32588: PPUSH
32589: CALL_OW 431
// end ;
32593: LD_VAR 0 7
32597: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32598: LD_INT 0
32600: PPUSH
32601: PPUSH
32602: PPUSH
32603: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32604: LD_ADDR_VAR 0 4
32608: PUSH
32609: LD_INT 22
32611: PUSH
32612: LD_OWVAR 2
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 2
32623: PUSH
32624: LD_INT 30
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 30
32636: PUSH
32637: LD_INT 1
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: LIST
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PPUSH
32653: CALL_OW 69
32657: ST_TO_ADDR
// if not tmp then
32658: LD_VAR 0 4
32662: NOT
32663: IFFALSE 32667
// exit ;
32665: GO 32726
// for i in tmp do
32667: LD_ADDR_VAR 0 2
32671: PUSH
32672: LD_VAR 0 4
32676: PUSH
32677: FOR_IN
32678: IFFALSE 32724
// for j = 1 to 3 do
32680: LD_ADDR_VAR 0 3
32684: PUSH
32685: DOUBLE
32686: LD_INT 1
32688: DEC
32689: ST_TO_ADDR
32690: LD_INT 3
32692: PUSH
32693: FOR_TO
32694: IFFALSE 32720
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32696: LD_VAR 0 2
32700: PPUSH
32701: CALL_OW 274
32705: PPUSH
32706: LD_VAR 0 3
32710: PPUSH
32711: LD_INT 99999
32713: PPUSH
32714: CALL_OW 277
32718: GO 32693
32720: POP
32721: POP
32722: GO 32677
32724: POP
32725: POP
// end ;
32726: LD_VAR 0 1
32730: RET
// export function hHackSetLevel10 ; var i , j ; begin
32731: LD_INT 0
32733: PPUSH
32734: PPUSH
32735: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32736: LD_ADDR_VAR 0 2
32740: PUSH
32741: LD_INT 21
32743: PUSH
32744: LD_INT 1
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PPUSH
32751: CALL_OW 69
32755: PUSH
32756: FOR_IN
32757: IFFALSE 32809
// if IsSelected ( i ) then
32759: LD_VAR 0 2
32763: PPUSH
32764: CALL_OW 306
32768: IFFALSE 32807
// begin for j := 1 to 4 do
32770: LD_ADDR_VAR 0 3
32774: PUSH
32775: DOUBLE
32776: LD_INT 1
32778: DEC
32779: ST_TO_ADDR
32780: LD_INT 4
32782: PUSH
32783: FOR_TO
32784: IFFALSE 32805
// SetSkill ( i , j , 10 ) ;
32786: LD_VAR 0 2
32790: PPUSH
32791: LD_VAR 0 3
32795: PPUSH
32796: LD_INT 10
32798: PPUSH
32799: CALL_OW 237
32803: GO 32783
32805: POP
32806: POP
// end ;
32807: GO 32756
32809: POP
32810: POP
// end ;
32811: LD_VAR 0 1
32815: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32816: LD_INT 0
32818: PPUSH
32819: PPUSH
32820: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32821: LD_ADDR_VAR 0 2
32825: PUSH
32826: LD_INT 22
32828: PUSH
32829: LD_OWVAR 2
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 21
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PPUSH
32852: CALL_OW 69
32856: PUSH
32857: FOR_IN
32858: IFFALSE 32899
// begin for j := 1 to 4 do
32860: LD_ADDR_VAR 0 3
32864: PUSH
32865: DOUBLE
32866: LD_INT 1
32868: DEC
32869: ST_TO_ADDR
32870: LD_INT 4
32872: PUSH
32873: FOR_TO
32874: IFFALSE 32895
// SetSkill ( i , j , 10 ) ;
32876: LD_VAR 0 2
32880: PPUSH
32881: LD_VAR 0 3
32885: PPUSH
32886: LD_INT 10
32888: PPUSH
32889: CALL_OW 237
32893: GO 32873
32895: POP
32896: POP
// end ;
32897: GO 32857
32899: POP
32900: POP
// end ;
32901: LD_VAR 0 1
32905: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32906: LD_INT 0
32908: PPUSH
// uc_side := your_side ;
32909: LD_ADDR_OWVAR 20
32913: PUSH
32914: LD_OWVAR 2
32918: ST_TO_ADDR
// uc_nation := nation ;
32919: LD_ADDR_OWVAR 21
32923: PUSH
32924: LD_VAR 0 1
32928: ST_TO_ADDR
// InitHc ;
32929: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32933: LD_INT 0
32935: PPUSH
32936: LD_VAR 0 2
32940: PPUSH
32941: LD_VAR 0 3
32945: PPUSH
32946: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32950: LD_VAR 0 4
32954: PPUSH
32955: LD_VAR 0 5
32959: PPUSH
32960: CALL_OW 428
32964: PUSH
32965: LD_INT 0
32967: EQUAL
32968: IFFALSE 32992
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32970: CALL_OW 44
32974: PPUSH
32975: LD_VAR 0 4
32979: PPUSH
32980: LD_VAR 0 5
32984: PPUSH
32985: LD_INT 1
32987: PPUSH
32988: CALL_OW 48
// end ;
32992: LD_VAR 0 6
32996: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32997: LD_INT 0
32999: PPUSH
33000: PPUSH
// uc_side := your_side ;
33001: LD_ADDR_OWVAR 20
33005: PUSH
33006: LD_OWVAR 2
33010: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33011: LD_VAR 0 1
33015: PUSH
33016: LD_INT 1
33018: PUSH
33019: LD_INT 2
33021: PUSH
33022: LD_INT 3
33024: PUSH
33025: LD_INT 4
33027: PUSH
33028: LD_INT 5
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: IN
33038: IFFALSE 33050
// uc_nation := nation_american else
33040: LD_ADDR_OWVAR 21
33044: PUSH
33045: LD_INT 1
33047: ST_TO_ADDR
33048: GO 33093
// if chassis in [ 11 , 12 , 13 , 14 ] then
33050: LD_VAR 0 1
33054: PUSH
33055: LD_INT 11
33057: PUSH
33058: LD_INT 12
33060: PUSH
33061: LD_INT 13
33063: PUSH
33064: LD_INT 14
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: IN
33073: IFFALSE 33085
// uc_nation := nation_arabian else
33075: LD_ADDR_OWVAR 21
33079: PUSH
33080: LD_INT 2
33082: ST_TO_ADDR
33083: GO 33093
// uc_nation := nation_russian ;
33085: LD_ADDR_OWVAR 21
33089: PUSH
33090: LD_INT 3
33092: ST_TO_ADDR
// vc_chassis := chassis ;
33093: LD_ADDR_OWVAR 37
33097: PUSH
33098: LD_VAR 0 1
33102: ST_TO_ADDR
// vc_engine := engine ;
33103: LD_ADDR_OWVAR 39
33107: PUSH
33108: LD_VAR 0 2
33112: ST_TO_ADDR
// vc_control := control ;
33113: LD_ADDR_OWVAR 38
33117: PUSH
33118: LD_VAR 0 3
33122: ST_TO_ADDR
// vc_weapon := weapon ;
33123: LD_ADDR_OWVAR 40
33127: PUSH
33128: LD_VAR 0 4
33132: ST_TO_ADDR
// un := CreateVehicle ;
33133: LD_ADDR_VAR 0 8
33137: PUSH
33138: CALL_OW 45
33142: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33143: LD_VAR 0 8
33147: PPUSH
33148: LD_INT 0
33150: PPUSH
33151: LD_INT 5
33153: PPUSH
33154: CALL_OW 12
33158: PPUSH
33159: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33163: LD_VAR 0 8
33167: PPUSH
33168: LD_VAR 0 5
33172: PPUSH
33173: LD_VAR 0 6
33177: PPUSH
33178: LD_INT 1
33180: PPUSH
33181: CALL_OW 48
// end ;
33185: LD_VAR 0 7
33189: RET
// export hInvincible ; every 1 do
33190: GO 33192
33192: DISABLE
// hInvincible := [ ] ;
33193: LD_ADDR_EXP 120
33197: PUSH
33198: EMPTY
33199: ST_TO_ADDR
33200: END
// every 10 do var i ;
33201: GO 33203
33203: DISABLE
33204: LD_INT 0
33206: PPUSH
// begin enable ;
33207: ENABLE
// if not hInvincible then
33208: LD_EXP 120
33212: NOT
33213: IFFALSE 33217
// exit ;
33215: GO 33261
// for i in hInvincible do
33217: LD_ADDR_VAR 0 1
33221: PUSH
33222: LD_EXP 120
33226: PUSH
33227: FOR_IN
33228: IFFALSE 33259
// if GetLives ( i ) < 1000 then
33230: LD_VAR 0 1
33234: PPUSH
33235: CALL_OW 256
33239: PUSH
33240: LD_INT 1000
33242: LESS
33243: IFFALSE 33257
// SetLives ( i , 1000 ) ;
33245: LD_VAR 0 1
33249: PPUSH
33250: LD_INT 1000
33252: PPUSH
33253: CALL_OW 234
33257: GO 33227
33259: POP
33260: POP
// end ;
33261: PPOPN 1
33263: END
// export function hHackInvincible ; var i ; begin
33264: LD_INT 0
33266: PPUSH
33267: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33268: LD_ADDR_VAR 0 2
33272: PUSH
33273: LD_INT 2
33275: PUSH
33276: LD_INT 21
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 21
33288: PUSH
33289: LD_INT 2
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: LIST
33300: PPUSH
33301: CALL_OW 69
33305: PUSH
33306: FOR_IN
33307: IFFALSE 33368
// if IsSelected ( i ) then
33309: LD_VAR 0 2
33313: PPUSH
33314: CALL_OW 306
33318: IFFALSE 33366
// begin if i in hInvincible then
33320: LD_VAR 0 2
33324: PUSH
33325: LD_EXP 120
33329: IN
33330: IFFALSE 33350
// hInvincible := hInvincible diff i else
33332: LD_ADDR_EXP 120
33336: PUSH
33337: LD_EXP 120
33341: PUSH
33342: LD_VAR 0 2
33346: DIFF
33347: ST_TO_ADDR
33348: GO 33366
// hInvincible := hInvincible union i ;
33350: LD_ADDR_EXP 120
33354: PUSH
33355: LD_EXP 120
33359: PUSH
33360: LD_VAR 0 2
33364: UNION
33365: ST_TO_ADDR
// end ;
33366: GO 33306
33368: POP
33369: POP
// end ;
33370: LD_VAR 0 1
33374: RET
// export function hHackInvisible ; var i , j ; begin
33375: LD_INT 0
33377: PPUSH
33378: PPUSH
33379: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33380: LD_ADDR_VAR 0 2
33384: PUSH
33385: LD_INT 21
33387: PUSH
33388: LD_INT 1
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PPUSH
33395: CALL_OW 69
33399: PUSH
33400: FOR_IN
33401: IFFALSE 33425
// if IsSelected ( i ) then
33403: LD_VAR 0 2
33407: PPUSH
33408: CALL_OW 306
33412: IFFALSE 33423
// ComForceInvisible ( i ) ;
33414: LD_VAR 0 2
33418: PPUSH
33419: CALL_OW 496
33423: GO 33400
33425: POP
33426: POP
// end ;
33427: LD_VAR 0 1
33431: RET
// export function hHackChangeYourSide ; begin
33432: LD_INT 0
33434: PPUSH
// if your_side = 8 then
33435: LD_OWVAR 2
33439: PUSH
33440: LD_INT 8
33442: EQUAL
33443: IFFALSE 33455
// your_side := 0 else
33445: LD_ADDR_OWVAR 2
33449: PUSH
33450: LD_INT 0
33452: ST_TO_ADDR
33453: GO 33469
// your_side := your_side + 1 ;
33455: LD_ADDR_OWVAR 2
33459: PUSH
33460: LD_OWVAR 2
33464: PUSH
33465: LD_INT 1
33467: PLUS
33468: ST_TO_ADDR
// end ;
33469: LD_VAR 0 1
33473: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33474: LD_INT 0
33476: PPUSH
33477: PPUSH
33478: PPUSH
// for i in all_units do
33479: LD_ADDR_VAR 0 2
33483: PUSH
33484: LD_OWVAR 3
33488: PUSH
33489: FOR_IN
33490: IFFALSE 33568
// if IsSelected ( i ) then
33492: LD_VAR 0 2
33496: PPUSH
33497: CALL_OW 306
33501: IFFALSE 33566
// begin j := GetSide ( i ) ;
33503: LD_ADDR_VAR 0 3
33507: PUSH
33508: LD_VAR 0 2
33512: PPUSH
33513: CALL_OW 255
33517: ST_TO_ADDR
// if j = 8 then
33518: LD_VAR 0 3
33522: PUSH
33523: LD_INT 8
33525: EQUAL
33526: IFFALSE 33538
// j := 0 else
33528: LD_ADDR_VAR 0 3
33532: PUSH
33533: LD_INT 0
33535: ST_TO_ADDR
33536: GO 33552
// j := j + 1 ;
33538: LD_ADDR_VAR 0 3
33542: PUSH
33543: LD_VAR 0 3
33547: PUSH
33548: LD_INT 1
33550: PLUS
33551: ST_TO_ADDR
// SetSide ( i , j ) ;
33552: LD_VAR 0 2
33556: PPUSH
33557: LD_VAR 0 3
33561: PPUSH
33562: CALL_OW 235
// end ;
33566: GO 33489
33568: POP
33569: POP
// end ;
33570: LD_VAR 0 1
33574: RET
// export function hHackFog ; begin
33575: LD_INT 0
33577: PPUSH
// FogOff ( true ) ;
33578: LD_INT 1
33580: PPUSH
33581: CALL_OW 344
// end ;
33585: LD_VAR 0 1
33589: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33590: LD_INT 0
33592: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33593: LD_VAR 0 1
33597: PPUSH
33598: LD_VAR 0 2
33602: PPUSH
33603: LD_VAR 0 3
33607: PPUSH
33608: LD_INT 1
33610: PPUSH
33611: LD_INT 1
33613: PPUSH
33614: CALL_OW 483
// CenterOnXY ( x , y ) ;
33618: LD_VAR 0 2
33622: PPUSH
33623: LD_VAR 0 3
33627: PPUSH
33628: CALL_OW 84
// end ;
33632: LD_VAR 0 4
33636: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33637: LD_INT 0
33639: PPUSH
33640: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33641: LD_VAR 0 1
33645: NOT
33646: PUSH
33647: LD_VAR 0 2
33651: PPUSH
33652: LD_VAR 0 3
33656: PPUSH
33657: CALL_OW 488
33661: NOT
33662: OR
33663: PUSH
33664: LD_VAR 0 1
33668: PPUSH
33669: CALL_OW 266
33673: PUSH
33674: LD_INT 3
33676: NONEQUAL
33677: PUSH
33678: LD_VAR 0 1
33682: PPUSH
33683: CALL_OW 247
33687: PUSH
33688: LD_INT 1
33690: EQUAL
33691: NOT
33692: AND
33693: OR
33694: IFFALSE 33698
// exit ;
33696: GO 33847
// if GetType ( factory ) = unit_human then
33698: LD_VAR 0 1
33702: PPUSH
33703: CALL_OW 247
33707: PUSH
33708: LD_INT 1
33710: EQUAL
33711: IFFALSE 33728
// factory := IsInUnit ( factory ) ;
33713: LD_ADDR_VAR 0 1
33717: PUSH
33718: LD_VAR 0 1
33722: PPUSH
33723: CALL_OW 310
33727: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33728: LD_VAR 0 1
33732: PPUSH
33733: CALL_OW 266
33737: PUSH
33738: LD_INT 3
33740: NONEQUAL
33741: IFFALSE 33745
// exit ;
33743: GO 33847
// if HexInfo ( x , y ) = factory then
33745: LD_VAR 0 2
33749: PPUSH
33750: LD_VAR 0 3
33754: PPUSH
33755: CALL_OW 428
33759: PUSH
33760: LD_VAR 0 1
33764: EQUAL
33765: IFFALSE 33792
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33767: LD_ADDR_EXP 121
33771: PUSH
33772: LD_EXP 121
33776: PPUSH
33777: LD_VAR 0 1
33781: PPUSH
33782: LD_INT 0
33784: PPUSH
33785: CALL_OW 1
33789: ST_TO_ADDR
33790: GO 33843
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33792: LD_ADDR_EXP 121
33796: PUSH
33797: LD_EXP 121
33801: PPUSH
33802: LD_VAR 0 1
33806: PPUSH
33807: LD_VAR 0 1
33811: PPUSH
33812: CALL_OW 255
33816: PUSH
33817: LD_VAR 0 1
33821: PUSH
33822: LD_VAR 0 2
33826: PUSH
33827: LD_VAR 0 3
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: PPUSH
33838: CALL_OW 1
33842: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33843: CALL 33852 0 0
// end ;
33847: LD_VAR 0 4
33851: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33852: LD_INT 0
33854: PPUSH
33855: PPUSH
33856: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33857: LD_STRING resetFactoryWaypoint();
33859: PPUSH
33860: CALL_OW 559
// if factoryWaypoints then
33864: LD_EXP 121
33868: IFFALSE 33994
// begin list := PrepareArray ( factoryWaypoints ) ;
33870: LD_ADDR_VAR 0 3
33874: PUSH
33875: LD_EXP 121
33879: PPUSH
33880: CALL 80463 0 1
33884: ST_TO_ADDR
// for i := 1 to list do
33885: LD_ADDR_VAR 0 2
33889: PUSH
33890: DOUBLE
33891: LD_INT 1
33893: DEC
33894: ST_TO_ADDR
33895: LD_VAR 0 3
33899: PUSH
33900: FOR_TO
33901: IFFALSE 33992
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33903: LD_STRING setFactoryWaypointXY(
33905: PUSH
33906: LD_VAR 0 3
33910: PUSH
33911: LD_VAR 0 2
33915: ARRAY
33916: PUSH
33917: LD_INT 1
33919: ARRAY
33920: STR
33921: PUSH
33922: LD_STRING ,
33924: STR
33925: PUSH
33926: LD_VAR 0 3
33930: PUSH
33931: LD_VAR 0 2
33935: ARRAY
33936: PUSH
33937: LD_INT 2
33939: ARRAY
33940: STR
33941: PUSH
33942: LD_STRING ,
33944: STR
33945: PUSH
33946: LD_VAR 0 3
33950: PUSH
33951: LD_VAR 0 2
33955: ARRAY
33956: PUSH
33957: LD_INT 3
33959: ARRAY
33960: STR
33961: PUSH
33962: LD_STRING ,
33964: STR
33965: PUSH
33966: LD_VAR 0 3
33970: PUSH
33971: LD_VAR 0 2
33975: ARRAY
33976: PUSH
33977: LD_INT 4
33979: ARRAY
33980: STR
33981: PUSH
33982: LD_STRING )
33984: STR
33985: PPUSH
33986: CALL_OW 559
33990: GO 33900
33992: POP
33993: POP
// end ; end ;
33994: LD_VAR 0 1
33998: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33999: LD_INT 0
34001: PPUSH
// if HexInfo ( x , y ) = warehouse then
34002: LD_VAR 0 2
34006: PPUSH
34007: LD_VAR 0 3
34011: PPUSH
34012: CALL_OW 428
34016: PUSH
34017: LD_VAR 0 1
34021: EQUAL
34022: IFFALSE 34049
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34024: LD_ADDR_EXP 122
34028: PUSH
34029: LD_EXP 122
34033: PPUSH
34034: LD_VAR 0 1
34038: PPUSH
34039: LD_INT 0
34041: PPUSH
34042: CALL_OW 1
34046: ST_TO_ADDR
34047: GO 34100
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34049: LD_ADDR_EXP 122
34053: PUSH
34054: LD_EXP 122
34058: PPUSH
34059: LD_VAR 0 1
34063: PPUSH
34064: LD_VAR 0 1
34068: PPUSH
34069: CALL_OW 255
34073: PUSH
34074: LD_VAR 0 1
34078: PUSH
34079: LD_VAR 0 2
34083: PUSH
34084: LD_VAR 0 3
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: PPUSH
34095: CALL_OW 1
34099: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34100: CALL 34109 0 0
// end ;
34104: LD_VAR 0 4
34108: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34109: LD_INT 0
34111: PPUSH
34112: PPUSH
34113: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34114: LD_STRING resetWarehouseGatheringPoints();
34116: PPUSH
34117: CALL_OW 559
// if warehouseGatheringPoints then
34121: LD_EXP 122
34125: IFFALSE 34251
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34127: LD_ADDR_VAR 0 3
34131: PUSH
34132: LD_EXP 122
34136: PPUSH
34137: CALL 80463 0 1
34141: ST_TO_ADDR
// for i := 1 to list do
34142: LD_ADDR_VAR 0 2
34146: PUSH
34147: DOUBLE
34148: LD_INT 1
34150: DEC
34151: ST_TO_ADDR
34152: LD_VAR 0 3
34156: PUSH
34157: FOR_TO
34158: IFFALSE 34249
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34160: LD_STRING setWarehouseGatheringPointXY(
34162: PUSH
34163: LD_VAR 0 3
34167: PUSH
34168: LD_VAR 0 2
34172: ARRAY
34173: PUSH
34174: LD_INT 1
34176: ARRAY
34177: STR
34178: PUSH
34179: LD_STRING ,
34181: STR
34182: PUSH
34183: LD_VAR 0 3
34187: PUSH
34188: LD_VAR 0 2
34192: ARRAY
34193: PUSH
34194: LD_INT 2
34196: ARRAY
34197: STR
34198: PUSH
34199: LD_STRING ,
34201: STR
34202: PUSH
34203: LD_VAR 0 3
34207: PUSH
34208: LD_VAR 0 2
34212: ARRAY
34213: PUSH
34214: LD_INT 3
34216: ARRAY
34217: STR
34218: PUSH
34219: LD_STRING ,
34221: STR
34222: PUSH
34223: LD_VAR 0 3
34227: PUSH
34228: LD_VAR 0 2
34232: ARRAY
34233: PUSH
34234: LD_INT 4
34236: ARRAY
34237: STR
34238: PUSH
34239: LD_STRING )
34241: STR
34242: PPUSH
34243: CALL_OW 559
34247: GO 34157
34249: POP
34250: POP
// end ; end ;
34251: LD_VAR 0 1
34255: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34256: LD_EXP 122
34260: IFFALSE 34945
34262: GO 34264
34264: DISABLE
34265: LD_INT 0
34267: PPUSH
34268: PPUSH
34269: PPUSH
34270: PPUSH
34271: PPUSH
34272: PPUSH
34273: PPUSH
34274: PPUSH
34275: PPUSH
// begin enable ;
34276: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34277: LD_ADDR_VAR 0 3
34281: PUSH
34282: LD_EXP 122
34286: PPUSH
34287: CALL 80463 0 1
34291: ST_TO_ADDR
// if not list then
34292: LD_VAR 0 3
34296: NOT
34297: IFFALSE 34301
// exit ;
34299: GO 34945
// for i := 1 to list do
34301: LD_ADDR_VAR 0 1
34305: PUSH
34306: DOUBLE
34307: LD_INT 1
34309: DEC
34310: ST_TO_ADDR
34311: LD_VAR 0 3
34315: PUSH
34316: FOR_TO
34317: IFFALSE 34943
// begin depot := list [ i ] [ 2 ] ;
34319: LD_ADDR_VAR 0 8
34323: PUSH
34324: LD_VAR 0 3
34328: PUSH
34329: LD_VAR 0 1
34333: ARRAY
34334: PUSH
34335: LD_INT 2
34337: ARRAY
34338: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34339: LD_ADDR_VAR 0 5
34343: PUSH
34344: LD_VAR 0 3
34348: PUSH
34349: LD_VAR 0 1
34353: ARRAY
34354: PUSH
34355: LD_INT 1
34357: ARRAY
34358: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34359: LD_VAR 0 8
34363: PPUSH
34364: CALL_OW 301
34368: PUSH
34369: LD_VAR 0 5
34373: PUSH
34374: LD_VAR 0 8
34378: PPUSH
34379: CALL_OW 255
34383: NONEQUAL
34384: OR
34385: IFFALSE 34414
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34387: LD_ADDR_EXP 122
34391: PUSH
34392: LD_EXP 122
34396: PPUSH
34397: LD_VAR 0 8
34401: PPUSH
34402: LD_INT 0
34404: PPUSH
34405: CALL_OW 1
34409: ST_TO_ADDR
// exit ;
34410: POP
34411: POP
34412: GO 34945
// end ; x := list [ i ] [ 3 ] ;
34414: LD_ADDR_VAR 0 6
34418: PUSH
34419: LD_VAR 0 3
34423: PUSH
34424: LD_VAR 0 1
34428: ARRAY
34429: PUSH
34430: LD_INT 3
34432: ARRAY
34433: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34434: LD_ADDR_VAR 0 7
34438: PUSH
34439: LD_VAR 0 3
34443: PUSH
34444: LD_VAR 0 1
34448: ARRAY
34449: PUSH
34450: LD_INT 4
34452: ARRAY
34453: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34454: LD_ADDR_VAR 0 9
34458: PUSH
34459: LD_VAR 0 6
34463: PPUSH
34464: LD_VAR 0 7
34468: PPUSH
34469: LD_INT 16
34471: PPUSH
34472: CALL 79051 0 3
34476: ST_TO_ADDR
// if not cratesNearbyPoint then
34477: LD_VAR 0 9
34481: NOT
34482: IFFALSE 34488
// exit ;
34484: POP
34485: POP
34486: GO 34945
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34488: LD_ADDR_VAR 0 4
34492: PUSH
34493: LD_INT 22
34495: PUSH
34496: LD_VAR 0 5
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 3
34507: PUSH
34508: LD_INT 60
34510: PUSH
34511: EMPTY
34512: LIST
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 91
34520: PUSH
34521: LD_VAR 0 8
34525: PUSH
34526: LD_INT 6
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 2
34536: PUSH
34537: LD_INT 25
34539: PUSH
34540: LD_INT 2
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 25
34549: PUSH
34550: LD_INT 16
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: LIST
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: PPUSH
34568: CALL_OW 69
34572: PUSH
34573: LD_VAR 0 8
34577: PPUSH
34578: CALL_OW 313
34582: PPUSH
34583: LD_INT 3
34585: PUSH
34586: LD_INT 60
34588: PUSH
34589: EMPTY
34590: LIST
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 2
34598: PUSH
34599: LD_INT 25
34601: PUSH
34602: LD_INT 2
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 25
34611: PUSH
34612: LD_INT 16
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: LIST
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PPUSH
34628: CALL_OW 72
34632: UNION
34633: ST_TO_ADDR
// if tmp then
34634: LD_VAR 0 4
34638: IFFALSE 34718
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34640: LD_ADDR_VAR 0 4
34644: PUSH
34645: LD_VAR 0 4
34649: PPUSH
34650: LD_INT 3
34652: PPUSH
34653: CALL 77020 0 2
34657: ST_TO_ADDR
// for j in tmp do
34658: LD_ADDR_VAR 0 2
34662: PUSH
34663: LD_VAR 0 4
34667: PUSH
34668: FOR_IN
34669: IFFALSE 34712
// begin if IsInUnit ( j ) then
34671: LD_VAR 0 2
34675: PPUSH
34676: CALL_OW 310
34680: IFFALSE 34691
// ComExit ( j ) ;
34682: LD_VAR 0 2
34686: PPUSH
34687: CALL 77103 0 1
// AddComCollect ( j , x , y ) ;
34691: LD_VAR 0 2
34695: PPUSH
34696: LD_VAR 0 6
34700: PPUSH
34701: LD_VAR 0 7
34705: PPUSH
34706: CALL_OW 177
// end ;
34710: GO 34668
34712: POP
34713: POP
// exit ;
34714: POP
34715: POP
34716: GO 34945
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34718: LD_ADDR_VAR 0 4
34722: PUSH
34723: LD_INT 22
34725: PUSH
34726: LD_VAR 0 5
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 91
34737: PUSH
34738: LD_VAR 0 8
34742: PUSH
34743: LD_INT 8
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 2
34753: PUSH
34754: LD_INT 34
34756: PUSH
34757: LD_INT 12
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 34
34766: PUSH
34767: LD_INT 51
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 34
34776: PUSH
34777: LD_INT 32
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 34
34786: PUSH
34787: LD_INT 89
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: LIST
34805: PPUSH
34806: CALL_OW 69
34810: ST_TO_ADDR
// if tmp then
34811: LD_VAR 0 4
34815: IFFALSE 34941
// begin for j in tmp do
34817: LD_ADDR_VAR 0 2
34821: PUSH
34822: LD_VAR 0 4
34826: PUSH
34827: FOR_IN
34828: IFFALSE 34939
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34830: LD_VAR 0 2
34834: PPUSH
34835: CALL_OW 262
34839: PUSH
34840: LD_INT 3
34842: EQUAL
34843: PUSH
34844: LD_VAR 0 2
34848: PPUSH
34849: CALL_OW 261
34853: PUSH
34854: LD_INT 20
34856: GREATER
34857: OR
34858: PUSH
34859: LD_VAR 0 2
34863: PPUSH
34864: CALL_OW 314
34868: NOT
34869: AND
34870: PUSH
34871: LD_VAR 0 2
34875: PPUSH
34876: CALL_OW 263
34880: PUSH
34881: LD_INT 1
34883: NONEQUAL
34884: PUSH
34885: LD_VAR 0 2
34889: PPUSH
34890: CALL_OW 311
34894: OR
34895: AND
34896: IFFALSE 34937
// begin ComCollect ( j , x , y ) ;
34898: LD_VAR 0 2
34902: PPUSH
34903: LD_VAR 0 6
34907: PPUSH
34908: LD_VAR 0 7
34912: PPUSH
34913: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34917: LD_VAR 0 2
34921: PPUSH
34922: LD_VAR 0 8
34926: PPUSH
34927: CALL_OW 172
// exit ;
34931: POP
34932: POP
34933: POP
34934: POP
34935: GO 34945
// end ;
34937: GO 34827
34939: POP
34940: POP
// end ; end ;
34941: GO 34316
34943: POP
34944: POP
// end ; end_of_file
34945: PPOPN 9
34947: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34948: LD_INT 0
34950: PPUSH
34951: PPUSH
34952: PPUSH
34953: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34954: LD_VAR 0 1
34958: PPUSH
34959: CALL_OW 264
34963: PUSH
34964: LD_INT 91
34966: EQUAL
34967: IFFALSE 35039
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34969: LD_INT 68
34971: PPUSH
34972: LD_VAR 0 1
34976: PPUSH
34977: CALL_OW 255
34981: PPUSH
34982: CALL_OW 321
34986: PUSH
34987: LD_INT 2
34989: EQUAL
34990: IFFALSE 35002
// eff := 70 else
34992: LD_ADDR_VAR 0 4
34996: PUSH
34997: LD_INT 70
34999: ST_TO_ADDR
35000: GO 35010
// eff := 30 ;
35002: LD_ADDR_VAR 0 4
35006: PUSH
35007: LD_INT 30
35009: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35010: LD_VAR 0 1
35014: PPUSH
35015: CALL_OW 250
35019: PPUSH
35020: LD_VAR 0 1
35024: PPUSH
35025: CALL_OW 251
35029: PPUSH
35030: LD_VAR 0 4
35034: PPUSH
35035: CALL_OW 495
// end ; end ;
35039: LD_VAR 0 2
35043: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35044: LD_INT 0
35046: PPUSH
// end ;
35047: LD_VAR 0 4
35051: RET
// export function SOS_Command ( cmd ) ; begin
35052: LD_INT 0
35054: PPUSH
// end ;
35055: LD_VAR 0 2
35059: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35060: LD_INT 0
35062: PPUSH
// end ;
35063: LD_VAR 0 6
35067: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35068: LD_INT 0
35070: PPUSH
35071: PPUSH
// if not vehicle or not factory then
35072: LD_VAR 0 1
35076: NOT
35077: PUSH
35078: LD_VAR 0 2
35082: NOT
35083: OR
35084: IFFALSE 35088
// exit ;
35086: GO 35319
// if factoryWaypoints >= factory then
35088: LD_EXP 121
35092: PUSH
35093: LD_VAR 0 2
35097: GREATEREQUAL
35098: IFFALSE 35319
// if factoryWaypoints [ factory ] then
35100: LD_EXP 121
35104: PUSH
35105: LD_VAR 0 2
35109: ARRAY
35110: IFFALSE 35319
// begin if GetControl ( vehicle ) = control_manual then
35112: LD_VAR 0 1
35116: PPUSH
35117: CALL_OW 263
35121: PUSH
35122: LD_INT 1
35124: EQUAL
35125: IFFALSE 35206
// begin driver := IsDrivenBy ( vehicle ) ;
35127: LD_ADDR_VAR 0 4
35131: PUSH
35132: LD_VAR 0 1
35136: PPUSH
35137: CALL_OW 311
35141: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35142: LD_VAR 0 4
35146: PPUSH
35147: LD_EXP 121
35151: PUSH
35152: LD_VAR 0 2
35156: ARRAY
35157: PUSH
35158: LD_INT 3
35160: ARRAY
35161: PPUSH
35162: LD_EXP 121
35166: PUSH
35167: LD_VAR 0 2
35171: ARRAY
35172: PUSH
35173: LD_INT 4
35175: ARRAY
35176: PPUSH
35177: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35181: LD_VAR 0 4
35185: PPUSH
35186: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35190: LD_VAR 0 4
35194: PPUSH
35195: LD_VAR 0 2
35199: PPUSH
35200: CALL_OW 180
// end else
35204: GO 35319
// if GetControl ( vehicle ) = control_remote then
35206: LD_VAR 0 1
35210: PPUSH
35211: CALL_OW 263
35215: PUSH
35216: LD_INT 2
35218: EQUAL
35219: IFFALSE 35280
// begin wait ( 0 0$2 ) ;
35221: LD_INT 70
35223: PPUSH
35224: CALL_OW 67
// if Connect ( vehicle ) then
35228: LD_VAR 0 1
35232: PPUSH
35233: CALL 47343 0 1
35237: IFFALSE 35278
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35239: LD_VAR 0 1
35243: PPUSH
35244: LD_EXP 121
35248: PUSH
35249: LD_VAR 0 2
35253: ARRAY
35254: PUSH
35255: LD_INT 3
35257: ARRAY
35258: PPUSH
35259: LD_EXP 121
35263: PUSH
35264: LD_VAR 0 2
35268: ARRAY
35269: PUSH
35270: LD_INT 4
35272: ARRAY
35273: PPUSH
35274: CALL_OW 171
// end else
35278: GO 35319
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35280: LD_VAR 0 1
35284: PPUSH
35285: LD_EXP 121
35289: PUSH
35290: LD_VAR 0 2
35294: ARRAY
35295: PUSH
35296: LD_INT 3
35298: ARRAY
35299: PPUSH
35300: LD_EXP 121
35304: PUSH
35305: LD_VAR 0 2
35309: ARRAY
35310: PUSH
35311: LD_INT 4
35313: ARRAY
35314: PPUSH
35315: CALL_OW 171
// end ; end ;
35319: LD_VAR 0 3
35323: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35324: LD_INT 0
35326: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35327: LD_VAR 0 1
35331: PUSH
35332: LD_INT 250
35334: EQUAL
35335: PUSH
35336: LD_VAR 0 2
35340: PPUSH
35341: CALL_OW 264
35345: PUSH
35346: LD_INT 81
35348: EQUAL
35349: AND
35350: IFFALSE 35371
// MinerPlaceMine ( unit , x , y ) ;
35352: LD_VAR 0 2
35356: PPUSH
35357: LD_VAR 0 4
35361: PPUSH
35362: LD_VAR 0 5
35366: PPUSH
35367: CALL 37756 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35371: LD_VAR 0 1
35375: PUSH
35376: LD_INT 251
35378: EQUAL
35379: PUSH
35380: LD_VAR 0 2
35384: PPUSH
35385: CALL_OW 264
35389: PUSH
35390: LD_INT 81
35392: EQUAL
35393: AND
35394: IFFALSE 35415
// MinerDetonateMine ( unit , x , y ) ;
35396: LD_VAR 0 2
35400: PPUSH
35401: LD_VAR 0 4
35405: PPUSH
35406: LD_VAR 0 5
35410: PPUSH
35411: CALL 38031 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35415: LD_VAR 0 1
35419: PUSH
35420: LD_INT 252
35422: EQUAL
35423: PUSH
35424: LD_VAR 0 2
35428: PPUSH
35429: CALL_OW 264
35433: PUSH
35434: LD_INT 81
35436: EQUAL
35437: AND
35438: IFFALSE 35459
// MinerCreateMinefield ( unit , x , y ) ;
35440: LD_VAR 0 2
35444: PPUSH
35445: LD_VAR 0 4
35449: PPUSH
35450: LD_VAR 0 5
35454: PPUSH
35455: CALL 38448 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35459: LD_VAR 0 1
35463: PUSH
35464: LD_INT 253
35466: EQUAL
35467: PUSH
35468: LD_VAR 0 2
35472: PPUSH
35473: CALL_OW 257
35477: PUSH
35478: LD_INT 5
35480: EQUAL
35481: AND
35482: IFFALSE 35503
// ComBinocular ( unit , x , y ) ;
35484: LD_VAR 0 2
35488: PPUSH
35489: LD_VAR 0 4
35493: PPUSH
35494: LD_VAR 0 5
35498: PPUSH
35499: CALL 38817 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35503: LD_VAR 0 1
35507: PUSH
35508: LD_INT 254
35510: EQUAL
35511: PUSH
35512: LD_VAR 0 2
35516: PPUSH
35517: CALL_OW 264
35521: PUSH
35522: LD_INT 99
35524: EQUAL
35525: AND
35526: PUSH
35527: LD_VAR 0 3
35531: PPUSH
35532: CALL_OW 263
35536: PUSH
35537: LD_INT 3
35539: EQUAL
35540: AND
35541: IFFALSE 35557
// HackDestroyVehicle ( unit , selectedUnit ) ;
35543: LD_VAR 0 2
35547: PPUSH
35548: LD_VAR 0 3
35552: PPUSH
35553: CALL 37120 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35557: LD_VAR 0 1
35561: PUSH
35562: LD_INT 255
35564: EQUAL
35565: PUSH
35566: LD_VAR 0 2
35570: PPUSH
35571: CALL_OW 264
35575: PUSH
35576: LD_INT 14
35578: PUSH
35579: LD_INT 53
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: IN
35586: AND
35587: PUSH
35588: LD_VAR 0 4
35592: PPUSH
35593: LD_VAR 0 5
35597: PPUSH
35598: CALL_OW 488
35602: AND
35603: IFFALSE 35627
// CutTreeXYR ( unit , x , y , 12 ) ;
35605: LD_VAR 0 2
35609: PPUSH
35610: LD_VAR 0 4
35614: PPUSH
35615: LD_VAR 0 5
35619: PPUSH
35620: LD_INT 12
35622: PPUSH
35623: CALL 35690 0 4
// if cmd = 256 then
35627: LD_VAR 0 1
35631: PUSH
35632: LD_INT 256
35634: EQUAL
35635: IFFALSE 35656
// SetFactoryWaypoint ( unit , x , y ) ;
35637: LD_VAR 0 2
35641: PPUSH
35642: LD_VAR 0 4
35646: PPUSH
35647: LD_VAR 0 5
35651: PPUSH
35652: CALL 33637 0 3
// if cmd = 257 then
35656: LD_VAR 0 1
35660: PUSH
35661: LD_INT 257
35663: EQUAL
35664: IFFALSE 35685
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35666: LD_VAR 0 2
35670: PPUSH
35671: LD_VAR 0 4
35675: PPUSH
35676: LD_VAR 0 5
35680: PPUSH
35681: CALL 33999 0 3
// end ;
35685: LD_VAR 0 6
35689: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35690: LD_INT 0
35692: PPUSH
35693: PPUSH
35694: PPUSH
35695: PPUSH
35696: PPUSH
35697: PPUSH
35698: PPUSH
35699: PPUSH
35700: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35701: LD_VAR 0 1
35705: NOT
35706: PUSH
35707: LD_VAR 0 2
35711: PPUSH
35712: LD_VAR 0 3
35716: PPUSH
35717: CALL_OW 488
35721: NOT
35722: OR
35723: PUSH
35724: LD_VAR 0 4
35728: NOT
35729: OR
35730: IFFALSE 35734
// exit ;
35732: GO 36074
// list := [ ] ;
35734: LD_ADDR_VAR 0 13
35738: PUSH
35739: EMPTY
35740: ST_TO_ADDR
// if x - r < 0 then
35741: LD_VAR 0 2
35745: PUSH
35746: LD_VAR 0 4
35750: MINUS
35751: PUSH
35752: LD_INT 0
35754: LESS
35755: IFFALSE 35767
// min_x := 0 else
35757: LD_ADDR_VAR 0 7
35761: PUSH
35762: LD_INT 0
35764: ST_TO_ADDR
35765: GO 35783
// min_x := x - r ;
35767: LD_ADDR_VAR 0 7
35771: PUSH
35772: LD_VAR 0 2
35776: PUSH
35777: LD_VAR 0 4
35781: MINUS
35782: ST_TO_ADDR
// if y - r < 0 then
35783: LD_VAR 0 3
35787: PUSH
35788: LD_VAR 0 4
35792: MINUS
35793: PUSH
35794: LD_INT 0
35796: LESS
35797: IFFALSE 35809
// min_y := 0 else
35799: LD_ADDR_VAR 0 8
35803: PUSH
35804: LD_INT 0
35806: ST_TO_ADDR
35807: GO 35825
// min_y := y - r ;
35809: LD_ADDR_VAR 0 8
35813: PUSH
35814: LD_VAR 0 3
35818: PUSH
35819: LD_VAR 0 4
35823: MINUS
35824: ST_TO_ADDR
// max_x := x + r ;
35825: LD_ADDR_VAR 0 9
35829: PUSH
35830: LD_VAR 0 2
35834: PUSH
35835: LD_VAR 0 4
35839: PLUS
35840: ST_TO_ADDR
// max_y := y + r ;
35841: LD_ADDR_VAR 0 10
35845: PUSH
35846: LD_VAR 0 3
35850: PUSH
35851: LD_VAR 0 4
35855: PLUS
35856: ST_TO_ADDR
// for _x = min_x to max_x do
35857: LD_ADDR_VAR 0 11
35861: PUSH
35862: DOUBLE
35863: LD_VAR 0 7
35867: DEC
35868: ST_TO_ADDR
35869: LD_VAR 0 9
35873: PUSH
35874: FOR_TO
35875: IFFALSE 35992
// for _y = min_y to max_y do
35877: LD_ADDR_VAR 0 12
35881: PUSH
35882: DOUBLE
35883: LD_VAR 0 8
35887: DEC
35888: ST_TO_ADDR
35889: LD_VAR 0 10
35893: PUSH
35894: FOR_TO
35895: IFFALSE 35988
// begin if not ValidHex ( _x , _y ) then
35897: LD_VAR 0 11
35901: PPUSH
35902: LD_VAR 0 12
35906: PPUSH
35907: CALL_OW 488
35911: NOT
35912: IFFALSE 35916
// continue ;
35914: GO 35894
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35916: LD_VAR 0 11
35920: PPUSH
35921: LD_VAR 0 12
35925: PPUSH
35926: CALL_OW 351
35930: PUSH
35931: LD_VAR 0 11
35935: PPUSH
35936: LD_VAR 0 12
35940: PPUSH
35941: CALL_OW 554
35945: AND
35946: IFFALSE 35986
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35948: LD_ADDR_VAR 0 13
35952: PUSH
35953: LD_VAR 0 13
35957: PPUSH
35958: LD_VAR 0 13
35962: PUSH
35963: LD_INT 1
35965: PLUS
35966: PPUSH
35967: LD_VAR 0 11
35971: PUSH
35972: LD_VAR 0 12
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PPUSH
35981: CALL_OW 2
35985: ST_TO_ADDR
// end ;
35986: GO 35894
35988: POP
35989: POP
35990: GO 35874
35992: POP
35993: POP
// if not list then
35994: LD_VAR 0 13
35998: NOT
35999: IFFALSE 36003
// exit ;
36001: GO 36074
// for i in list do
36003: LD_ADDR_VAR 0 6
36007: PUSH
36008: LD_VAR 0 13
36012: PUSH
36013: FOR_IN
36014: IFFALSE 36072
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36016: LD_VAR 0 1
36020: PPUSH
36021: LD_STRING M
36023: PUSH
36024: LD_VAR 0 6
36028: PUSH
36029: LD_INT 1
36031: ARRAY
36032: PUSH
36033: LD_VAR 0 6
36037: PUSH
36038: LD_INT 2
36040: ARRAY
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: LD_INT 0
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: PUSH
36063: EMPTY
36064: LIST
36065: PPUSH
36066: CALL_OW 447
36070: GO 36013
36072: POP
36073: POP
// end ;
36074: LD_VAR 0 5
36078: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36079: LD_EXP 124
36083: NOT
36084: IFFALSE 36134
36086: GO 36088
36088: DISABLE
// begin initHack := true ;
36089: LD_ADDR_EXP 124
36093: PUSH
36094: LD_INT 1
36096: ST_TO_ADDR
// hackTanks := [ ] ;
36097: LD_ADDR_EXP 125
36101: PUSH
36102: EMPTY
36103: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36104: LD_ADDR_EXP 126
36108: PUSH
36109: EMPTY
36110: ST_TO_ADDR
// hackLimit := 3 ;
36111: LD_ADDR_EXP 127
36115: PUSH
36116: LD_INT 3
36118: ST_TO_ADDR
// hackDist := 12 ;
36119: LD_ADDR_EXP 128
36123: PUSH
36124: LD_INT 12
36126: ST_TO_ADDR
// hackCounter := [ ] ;
36127: LD_ADDR_EXP 129
36131: PUSH
36132: EMPTY
36133: ST_TO_ADDR
// end ;
36134: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36135: LD_EXP 124
36139: PUSH
36140: LD_INT 34
36142: PUSH
36143: LD_INT 99
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PPUSH
36150: CALL_OW 69
36154: AND
36155: IFFALSE 36408
36157: GO 36159
36159: DISABLE
36160: LD_INT 0
36162: PPUSH
36163: PPUSH
// begin enable ;
36164: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36165: LD_ADDR_VAR 0 1
36169: PUSH
36170: LD_INT 34
36172: PUSH
36173: LD_INT 99
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PPUSH
36180: CALL_OW 69
36184: PUSH
36185: FOR_IN
36186: IFFALSE 36406
// begin if not i in hackTanks then
36188: LD_VAR 0 1
36192: PUSH
36193: LD_EXP 125
36197: IN
36198: NOT
36199: IFFALSE 36282
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36201: LD_ADDR_EXP 125
36205: PUSH
36206: LD_EXP 125
36210: PPUSH
36211: LD_EXP 125
36215: PUSH
36216: LD_INT 1
36218: PLUS
36219: PPUSH
36220: LD_VAR 0 1
36224: PPUSH
36225: CALL_OW 1
36229: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36230: LD_ADDR_EXP 126
36234: PUSH
36235: LD_EXP 126
36239: PPUSH
36240: LD_EXP 126
36244: PUSH
36245: LD_INT 1
36247: PLUS
36248: PPUSH
36249: EMPTY
36250: PPUSH
36251: CALL_OW 1
36255: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36256: LD_ADDR_EXP 129
36260: PUSH
36261: LD_EXP 129
36265: PPUSH
36266: LD_EXP 129
36270: PUSH
36271: LD_INT 1
36273: PLUS
36274: PPUSH
36275: EMPTY
36276: PPUSH
36277: CALL_OW 1
36281: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36282: LD_VAR 0 1
36286: PPUSH
36287: CALL_OW 302
36291: NOT
36292: IFFALSE 36305
// begin HackUnlinkAll ( i ) ;
36294: LD_VAR 0 1
36298: PPUSH
36299: CALL 36411 0 1
// continue ;
36303: GO 36185
// end ; HackCheckCapturedStatus ( i ) ;
36305: LD_VAR 0 1
36309: PPUSH
36310: CALL 36854 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36314: LD_ADDR_VAR 0 2
36318: PUSH
36319: LD_INT 81
36321: PUSH
36322: LD_VAR 0 1
36326: PPUSH
36327: CALL_OW 255
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 33
36338: PUSH
36339: LD_INT 3
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 91
36348: PUSH
36349: LD_VAR 0 1
36353: PUSH
36354: LD_EXP 128
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 50
36366: PUSH
36367: EMPTY
36368: LIST
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: PPUSH
36376: CALL_OW 69
36380: ST_TO_ADDR
// if not tmp then
36381: LD_VAR 0 2
36385: NOT
36386: IFFALSE 36390
// continue ;
36388: GO 36185
// HackLink ( i , tmp ) ;
36390: LD_VAR 0 1
36394: PPUSH
36395: LD_VAR 0 2
36399: PPUSH
36400: CALL 36547 0 2
// end ;
36404: GO 36185
36406: POP
36407: POP
// end ;
36408: PPOPN 2
36410: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36411: LD_INT 0
36413: PPUSH
36414: PPUSH
36415: PPUSH
// if not hack in hackTanks then
36416: LD_VAR 0 1
36420: PUSH
36421: LD_EXP 125
36425: IN
36426: NOT
36427: IFFALSE 36431
// exit ;
36429: GO 36542
// index := GetElementIndex ( hackTanks , hack ) ;
36431: LD_ADDR_VAR 0 4
36435: PUSH
36436: LD_EXP 125
36440: PPUSH
36441: LD_VAR 0 1
36445: PPUSH
36446: CALL 44159 0 2
36450: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36451: LD_EXP 126
36455: PUSH
36456: LD_VAR 0 4
36460: ARRAY
36461: IFFALSE 36542
// begin for i in hackTanksCaptured [ index ] do
36463: LD_ADDR_VAR 0 3
36467: PUSH
36468: LD_EXP 126
36472: PUSH
36473: LD_VAR 0 4
36477: ARRAY
36478: PUSH
36479: FOR_IN
36480: IFFALSE 36506
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36482: LD_VAR 0 3
36486: PUSH
36487: LD_INT 1
36489: ARRAY
36490: PPUSH
36491: LD_VAR 0 3
36495: PUSH
36496: LD_INT 2
36498: ARRAY
36499: PPUSH
36500: CALL_OW 235
36504: GO 36479
36506: POP
36507: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36508: LD_ADDR_EXP 126
36512: PUSH
36513: LD_EXP 126
36517: PPUSH
36518: LD_VAR 0 4
36522: PPUSH
36523: EMPTY
36524: PPUSH
36525: CALL_OW 1
36529: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36530: LD_VAR 0 1
36534: PPUSH
36535: LD_INT 0
36537: PPUSH
36538: CALL_OW 505
// end ; end ;
36542: LD_VAR 0 2
36546: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36547: LD_INT 0
36549: PPUSH
36550: PPUSH
36551: PPUSH
// if not hack in hackTanks or not vehicles then
36552: LD_VAR 0 1
36556: PUSH
36557: LD_EXP 125
36561: IN
36562: NOT
36563: PUSH
36564: LD_VAR 0 2
36568: NOT
36569: OR
36570: IFFALSE 36574
// exit ;
36572: GO 36849
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36574: LD_ADDR_VAR 0 2
36578: PUSH
36579: LD_VAR 0 1
36583: PPUSH
36584: LD_VAR 0 2
36588: PPUSH
36589: LD_INT 1
36591: PPUSH
36592: LD_INT 1
36594: PPUSH
36595: CALL 44809 0 4
36599: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36600: LD_ADDR_VAR 0 5
36604: PUSH
36605: LD_EXP 125
36609: PPUSH
36610: LD_VAR 0 1
36614: PPUSH
36615: CALL 44159 0 2
36619: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36620: LD_EXP 126
36624: PUSH
36625: LD_VAR 0 5
36629: ARRAY
36630: PUSH
36631: LD_EXP 127
36635: LESS
36636: IFFALSE 36825
// begin for i := 1 to vehicles do
36638: LD_ADDR_VAR 0 4
36642: PUSH
36643: DOUBLE
36644: LD_INT 1
36646: DEC
36647: ST_TO_ADDR
36648: LD_VAR 0 2
36652: PUSH
36653: FOR_TO
36654: IFFALSE 36823
// begin if hackTanksCaptured [ index ] = hackLimit then
36656: LD_EXP 126
36660: PUSH
36661: LD_VAR 0 5
36665: ARRAY
36666: PUSH
36667: LD_EXP 127
36671: EQUAL
36672: IFFALSE 36676
// break ;
36674: GO 36823
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36676: LD_ADDR_EXP 129
36680: PUSH
36681: LD_EXP 129
36685: PPUSH
36686: LD_VAR 0 5
36690: PPUSH
36691: LD_EXP 129
36695: PUSH
36696: LD_VAR 0 5
36700: ARRAY
36701: PUSH
36702: LD_INT 1
36704: PLUS
36705: PPUSH
36706: CALL_OW 1
36710: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36711: LD_ADDR_EXP 126
36715: PUSH
36716: LD_EXP 126
36720: PPUSH
36721: LD_VAR 0 5
36725: PUSH
36726: LD_EXP 126
36730: PUSH
36731: LD_VAR 0 5
36735: ARRAY
36736: PUSH
36737: LD_INT 1
36739: PLUS
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PPUSH
36745: LD_VAR 0 2
36749: PUSH
36750: LD_VAR 0 4
36754: ARRAY
36755: PUSH
36756: LD_VAR 0 2
36760: PUSH
36761: LD_VAR 0 4
36765: ARRAY
36766: PPUSH
36767: CALL_OW 255
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PPUSH
36776: CALL 44374 0 3
36780: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36781: LD_VAR 0 2
36785: PUSH
36786: LD_VAR 0 4
36790: ARRAY
36791: PPUSH
36792: LD_VAR 0 1
36796: PPUSH
36797: CALL_OW 255
36801: PPUSH
36802: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36806: LD_VAR 0 2
36810: PUSH
36811: LD_VAR 0 4
36815: ARRAY
36816: PPUSH
36817: CALL_OW 141
// end ;
36821: GO 36653
36823: POP
36824: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36825: LD_VAR 0 1
36829: PPUSH
36830: LD_EXP 126
36834: PUSH
36835: LD_VAR 0 5
36839: ARRAY
36840: PUSH
36841: LD_INT 0
36843: PLUS
36844: PPUSH
36845: CALL_OW 505
// end ;
36849: LD_VAR 0 3
36853: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36854: LD_INT 0
36856: PPUSH
36857: PPUSH
36858: PPUSH
36859: PPUSH
// if not hack in hackTanks then
36860: LD_VAR 0 1
36864: PUSH
36865: LD_EXP 125
36869: IN
36870: NOT
36871: IFFALSE 36875
// exit ;
36873: GO 37115
// index := GetElementIndex ( hackTanks , hack ) ;
36875: LD_ADDR_VAR 0 4
36879: PUSH
36880: LD_EXP 125
36884: PPUSH
36885: LD_VAR 0 1
36889: PPUSH
36890: CALL 44159 0 2
36894: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36895: LD_ADDR_VAR 0 3
36899: PUSH
36900: DOUBLE
36901: LD_EXP 126
36905: PUSH
36906: LD_VAR 0 4
36910: ARRAY
36911: INC
36912: ST_TO_ADDR
36913: LD_INT 1
36915: PUSH
36916: FOR_DOWNTO
36917: IFFALSE 37089
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36919: LD_ADDR_VAR 0 5
36923: PUSH
36924: LD_EXP 126
36928: PUSH
36929: LD_VAR 0 4
36933: ARRAY
36934: PUSH
36935: LD_VAR 0 3
36939: ARRAY
36940: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36941: LD_VAR 0 5
36945: PUSH
36946: LD_INT 1
36948: ARRAY
36949: PPUSH
36950: CALL_OW 302
36954: NOT
36955: PUSH
36956: LD_VAR 0 5
36960: PUSH
36961: LD_INT 1
36963: ARRAY
36964: PPUSH
36965: CALL_OW 255
36969: PUSH
36970: LD_VAR 0 1
36974: PPUSH
36975: CALL_OW 255
36979: NONEQUAL
36980: OR
36981: IFFALSE 37087
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36983: LD_VAR 0 5
36987: PUSH
36988: LD_INT 1
36990: ARRAY
36991: PPUSH
36992: CALL_OW 305
36996: PUSH
36997: LD_VAR 0 5
37001: PUSH
37002: LD_INT 1
37004: ARRAY
37005: PPUSH
37006: CALL_OW 255
37010: PUSH
37011: LD_VAR 0 1
37015: PPUSH
37016: CALL_OW 255
37020: EQUAL
37021: AND
37022: IFFALSE 37046
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37024: LD_VAR 0 5
37028: PUSH
37029: LD_INT 1
37031: ARRAY
37032: PPUSH
37033: LD_VAR 0 5
37037: PUSH
37038: LD_INT 2
37040: ARRAY
37041: PPUSH
37042: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37046: LD_ADDR_EXP 126
37050: PUSH
37051: LD_EXP 126
37055: PPUSH
37056: LD_VAR 0 4
37060: PPUSH
37061: LD_EXP 126
37065: PUSH
37066: LD_VAR 0 4
37070: ARRAY
37071: PPUSH
37072: LD_VAR 0 3
37076: PPUSH
37077: CALL_OW 3
37081: PPUSH
37082: CALL_OW 1
37086: ST_TO_ADDR
// end ; end ;
37087: GO 36916
37089: POP
37090: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37091: LD_VAR 0 1
37095: PPUSH
37096: LD_EXP 126
37100: PUSH
37101: LD_VAR 0 4
37105: ARRAY
37106: PUSH
37107: LD_INT 0
37109: PLUS
37110: PPUSH
37111: CALL_OW 505
// end ;
37115: LD_VAR 0 2
37119: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37120: LD_INT 0
37122: PPUSH
37123: PPUSH
37124: PPUSH
37125: PPUSH
// if not hack in hackTanks then
37126: LD_VAR 0 1
37130: PUSH
37131: LD_EXP 125
37135: IN
37136: NOT
37137: IFFALSE 37141
// exit ;
37139: GO 37226
// index := GetElementIndex ( hackTanks , hack ) ;
37141: LD_ADDR_VAR 0 5
37145: PUSH
37146: LD_EXP 125
37150: PPUSH
37151: LD_VAR 0 1
37155: PPUSH
37156: CALL 44159 0 2
37160: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37161: LD_ADDR_VAR 0 4
37165: PUSH
37166: DOUBLE
37167: LD_INT 1
37169: DEC
37170: ST_TO_ADDR
37171: LD_EXP 126
37175: PUSH
37176: LD_VAR 0 5
37180: ARRAY
37181: PUSH
37182: FOR_TO
37183: IFFALSE 37224
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37185: LD_EXP 126
37189: PUSH
37190: LD_VAR 0 5
37194: ARRAY
37195: PUSH
37196: LD_VAR 0 4
37200: ARRAY
37201: PUSH
37202: LD_INT 1
37204: ARRAY
37205: PUSH
37206: LD_VAR 0 2
37210: EQUAL
37211: IFFALSE 37222
// KillUnit ( vehicle ) ;
37213: LD_VAR 0 2
37217: PPUSH
37218: CALL_OW 66
37222: GO 37182
37224: POP
37225: POP
// end ;
37226: LD_VAR 0 3
37230: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37231: LD_EXP 130
37235: NOT
37236: IFFALSE 37271
37238: GO 37240
37240: DISABLE
// begin initMiner := true ;
37241: LD_ADDR_EXP 130
37245: PUSH
37246: LD_INT 1
37248: ST_TO_ADDR
// minersList := [ ] ;
37249: LD_ADDR_EXP 131
37253: PUSH
37254: EMPTY
37255: ST_TO_ADDR
// minerMinesList := [ ] ;
37256: LD_ADDR_EXP 132
37260: PUSH
37261: EMPTY
37262: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37263: LD_ADDR_EXP 133
37267: PUSH
37268: LD_INT 5
37270: ST_TO_ADDR
// end ;
37271: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37272: LD_EXP 130
37276: PUSH
37277: LD_INT 34
37279: PUSH
37280: LD_INT 81
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PPUSH
37287: CALL_OW 69
37291: AND
37292: IFFALSE 37753
37294: GO 37296
37296: DISABLE
37297: LD_INT 0
37299: PPUSH
37300: PPUSH
37301: PPUSH
37302: PPUSH
// begin enable ;
37303: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37304: LD_ADDR_VAR 0 1
37308: PUSH
37309: LD_INT 34
37311: PUSH
37312: LD_INT 81
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PPUSH
37319: CALL_OW 69
37323: PUSH
37324: FOR_IN
37325: IFFALSE 37397
// begin if not i in minersList then
37327: LD_VAR 0 1
37331: PUSH
37332: LD_EXP 131
37336: IN
37337: NOT
37338: IFFALSE 37395
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37340: LD_ADDR_EXP 131
37344: PUSH
37345: LD_EXP 131
37349: PPUSH
37350: LD_EXP 131
37354: PUSH
37355: LD_INT 1
37357: PLUS
37358: PPUSH
37359: LD_VAR 0 1
37363: PPUSH
37364: CALL_OW 1
37368: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37369: LD_ADDR_EXP 132
37373: PUSH
37374: LD_EXP 132
37378: PPUSH
37379: LD_EXP 132
37383: PUSH
37384: LD_INT 1
37386: PLUS
37387: PPUSH
37388: EMPTY
37389: PPUSH
37390: CALL_OW 1
37394: ST_TO_ADDR
// end end ;
37395: GO 37324
37397: POP
37398: POP
// for i := minerMinesList downto 1 do
37399: LD_ADDR_VAR 0 1
37403: PUSH
37404: DOUBLE
37405: LD_EXP 132
37409: INC
37410: ST_TO_ADDR
37411: LD_INT 1
37413: PUSH
37414: FOR_DOWNTO
37415: IFFALSE 37751
// begin if IsLive ( minersList [ i ] ) then
37417: LD_EXP 131
37421: PUSH
37422: LD_VAR 0 1
37426: ARRAY
37427: PPUSH
37428: CALL_OW 300
37432: IFFALSE 37460
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37434: LD_EXP 131
37438: PUSH
37439: LD_VAR 0 1
37443: ARRAY
37444: PPUSH
37445: LD_EXP 132
37449: PUSH
37450: LD_VAR 0 1
37454: ARRAY
37455: PPUSH
37456: CALL_OW 505
// if not minerMinesList [ i ] then
37460: LD_EXP 132
37464: PUSH
37465: LD_VAR 0 1
37469: ARRAY
37470: NOT
37471: IFFALSE 37475
// continue ;
37473: GO 37414
// for j := minerMinesList [ i ] downto 1 do
37475: LD_ADDR_VAR 0 2
37479: PUSH
37480: DOUBLE
37481: LD_EXP 132
37485: PUSH
37486: LD_VAR 0 1
37490: ARRAY
37491: INC
37492: ST_TO_ADDR
37493: LD_INT 1
37495: PUSH
37496: FOR_DOWNTO
37497: IFFALSE 37747
// begin side := GetSide ( minersList [ i ] ) ;
37499: LD_ADDR_VAR 0 3
37503: PUSH
37504: LD_EXP 131
37508: PUSH
37509: LD_VAR 0 1
37513: ARRAY
37514: PPUSH
37515: CALL_OW 255
37519: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37520: LD_ADDR_VAR 0 4
37524: PUSH
37525: LD_EXP 132
37529: PUSH
37530: LD_VAR 0 1
37534: ARRAY
37535: PUSH
37536: LD_VAR 0 2
37540: ARRAY
37541: PUSH
37542: LD_INT 1
37544: ARRAY
37545: PPUSH
37546: LD_EXP 132
37550: PUSH
37551: LD_VAR 0 1
37555: ARRAY
37556: PUSH
37557: LD_VAR 0 2
37561: ARRAY
37562: PUSH
37563: LD_INT 2
37565: ARRAY
37566: PPUSH
37567: CALL_OW 428
37571: ST_TO_ADDR
// if not tmp then
37572: LD_VAR 0 4
37576: NOT
37577: IFFALSE 37581
// continue ;
37579: GO 37496
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37581: LD_VAR 0 4
37585: PUSH
37586: LD_INT 81
37588: PUSH
37589: LD_VAR 0 3
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PPUSH
37598: CALL_OW 69
37602: IN
37603: PUSH
37604: LD_EXP 132
37608: PUSH
37609: LD_VAR 0 1
37613: ARRAY
37614: PUSH
37615: LD_VAR 0 2
37619: ARRAY
37620: PUSH
37621: LD_INT 1
37623: ARRAY
37624: PPUSH
37625: LD_EXP 132
37629: PUSH
37630: LD_VAR 0 1
37634: ARRAY
37635: PUSH
37636: LD_VAR 0 2
37640: ARRAY
37641: PUSH
37642: LD_INT 2
37644: ARRAY
37645: PPUSH
37646: CALL_OW 458
37650: AND
37651: IFFALSE 37745
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37653: LD_EXP 132
37657: PUSH
37658: LD_VAR 0 1
37662: ARRAY
37663: PUSH
37664: LD_VAR 0 2
37668: ARRAY
37669: PUSH
37670: LD_INT 1
37672: ARRAY
37673: PPUSH
37674: LD_EXP 132
37678: PUSH
37679: LD_VAR 0 1
37683: ARRAY
37684: PUSH
37685: LD_VAR 0 2
37689: ARRAY
37690: PUSH
37691: LD_INT 2
37693: ARRAY
37694: PPUSH
37695: LD_VAR 0 3
37699: PPUSH
37700: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37704: LD_ADDR_EXP 132
37708: PUSH
37709: LD_EXP 132
37713: PPUSH
37714: LD_VAR 0 1
37718: PPUSH
37719: LD_EXP 132
37723: PUSH
37724: LD_VAR 0 1
37728: ARRAY
37729: PPUSH
37730: LD_VAR 0 2
37734: PPUSH
37735: CALL_OW 3
37739: PPUSH
37740: CALL_OW 1
37744: ST_TO_ADDR
// end ; end ;
37745: GO 37496
37747: POP
37748: POP
// end ;
37749: GO 37414
37751: POP
37752: POP
// end ;
37753: PPOPN 4
37755: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37756: LD_INT 0
37758: PPUSH
37759: PPUSH
// result := false ;
37760: LD_ADDR_VAR 0 4
37764: PUSH
37765: LD_INT 0
37767: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37768: LD_VAR 0 1
37772: PPUSH
37773: CALL_OW 264
37777: PUSH
37778: LD_INT 81
37780: EQUAL
37781: NOT
37782: IFFALSE 37786
// exit ;
37784: GO 38026
// index := GetElementIndex ( minersList , unit ) ;
37786: LD_ADDR_VAR 0 5
37790: PUSH
37791: LD_EXP 131
37795: PPUSH
37796: LD_VAR 0 1
37800: PPUSH
37801: CALL 44159 0 2
37805: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37806: LD_EXP 132
37810: PUSH
37811: LD_VAR 0 5
37815: ARRAY
37816: PUSH
37817: LD_EXP 133
37821: GREATEREQUAL
37822: IFFALSE 37826
// exit ;
37824: GO 38026
// ComMoveXY ( unit , x , y ) ;
37826: LD_VAR 0 1
37830: PPUSH
37831: LD_VAR 0 2
37835: PPUSH
37836: LD_VAR 0 3
37840: PPUSH
37841: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37845: LD_INT 35
37847: PPUSH
37848: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37852: LD_VAR 0 1
37856: PPUSH
37857: LD_VAR 0 2
37861: PPUSH
37862: LD_VAR 0 3
37866: PPUSH
37867: CALL 75514 0 3
37871: NOT
37872: PUSH
37873: LD_VAR 0 1
37877: PPUSH
37878: CALL_OW 314
37882: AND
37883: IFFALSE 37887
// exit ;
37885: GO 38026
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37887: LD_VAR 0 2
37891: PPUSH
37892: LD_VAR 0 3
37896: PPUSH
37897: CALL_OW 428
37901: PUSH
37902: LD_VAR 0 1
37906: EQUAL
37907: PUSH
37908: LD_VAR 0 1
37912: PPUSH
37913: CALL_OW 314
37917: NOT
37918: AND
37919: IFFALSE 37845
// PlaySoundXY ( x , y , PlantMine ) ;
37921: LD_VAR 0 2
37925: PPUSH
37926: LD_VAR 0 3
37930: PPUSH
37931: LD_STRING PlantMine
37933: PPUSH
37934: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37938: LD_VAR 0 2
37942: PPUSH
37943: LD_VAR 0 3
37947: PPUSH
37948: LD_VAR 0 1
37952: PPUSH
37953: CALL_OW 255
37957: PPUSH
37958: LD_INT 0
37960: PPUSH
37961: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37965: LD_ADDR_EXP 132
37969: PUSH
37970: LD_EXP 132
37974: PPUSH
37975: LD_VAR 0 5
37979: PUSH
37980: LD_EXP 132
37984: PUSH
37985: LD_VAR 0 5
37989: ARRAY
37990: PUSH
37991: LD_INT 1
37993: PLUS
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PPUSH
37999: LD_VAR 0 2
38003: PUSH
38004: LD_VAR 0 3
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PPUSH
38013: CALL 44374 0 3
38017: ST_TO_ADDR
// result := true ;
38018: LD_ADDR_VAR 0 4
38022: PUSH
38023: LD_INT 1
38025: ST_TO_ADDR
// end ;
38026: LD_VAR 0 4
38030: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38031: LD_INT 0
38033: PPUSH
38034: PPUSH
38035: PPUSH
// if not unit in minersList then
38036: LD_VAR 0 1
38040: PUSH
38041: LD_EXP 131
38045: IN
38046: NOT
38047: IFFALSE 38051
// exit ;
38049: GO 38443
// index := GetElementIndex ( minersList , unit ) ;
38051: LD_ADDR_VAR 0 6
38055: PUSH
38056: LD_EXP 131
38060: PPUSH
38061: LD_VAR 0 1
38065: PPUSH
38066: CALL 44159 0 2
38070: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38071: LD_ADDR_VAR 0 5
38075: PUSH
38076: DOUBLE
38077: LD_EXP 132
38081: PUSH
38082: LD_VAR 0 6
38086: ARRAY
38087: INC
38088: ST_TO_ADDR
38089: LD_INT 1
38091: PUSH
38092: FOR_DOWNTO
38093: IFFALSE 38254
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38095: LD_EXP 132
38099: PUSH
38100: LD_VAR 0 6
38104: ARRAY
38105: PUSH
38106: LD_VAR 0 5
38110: ARRAY
38111: PUSH
38112: LD_INT 1
38114: ARRAY
38115: PUSH
38116: LD_VAR 0 2
38120: EQUAL
38121: PUSH
38122: LD_EXP 132
38126: PUSH
38127: LD_VAR 0 6
38131: ARRAY
38132: PUSH
38133: LD_VAR 0 5
38137: ARRAY
38138: PUSH
38139: LD_INT 2
38141: ARRAY
38142: PUSH
38143: LD_VAR 0 3
38147: EQUAL
38148: AND
38149: IFFALSE 38252
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38151: LD_EXP 132
38155: PUSH
38156: LD_VAR 0 6
38160: ARRAY
38161: PUSH
38162: LD_VAR 0 5
38166: ARRAY
38167: PUSH
38168: LD_INT 1
38170: ARRAY
38171: PPUSH
38172: LD_EXP 132
38176: PUSH
38177: LD_VAR 0 6
38181: ARRAY
38182: PUSH
38183: LD_VAR 0 5
38187: ARRAY
38188: PUSH
38189: LD_INT 2
38191: ARRAY
38192: PPUSH
38193: LD_VAR 0 1
38197: PPUSH
38198: CALL_OW 255
38202: PPUSH
38203: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38207: LD_ADDR_EXP 132
38211: PUSH
38212: LD_EXP 132
38216: PPUSH
38217: LD_VAR 0 6
38221: PPUSH
38222: LD_EXP 132
38226: PUSH
38227: LD_VAR 0 6
38231: ARRAY
38232: PPUSH
38233: LD_VAR 0 5
38237: PPUSH
38238: CALL_OW 3
38242: PPUSH
38243: CALL_OW 1
38247: ST_TO_ADDR
// exit ;
38248: POP
38249: POP
38250: GO 38443
// end ; end ;
38252: GO 38092
38254: POP
38255: POP
// for i := minerMinesList [ index ] downto 1 do
38256: LD_ADDR_VAR 0 5
38260: PUSH
38261: DOUBLE
38262: LD_EXP 132
38266: PUSH
38267: LD_VAR 0 6
38271: ARRAY
38272: INC
38273: ST_TO_ADDR
38274: LD_INT 1
38276: PUSH
38277: FOR_DOWNTO
38278: IFFALSE 38441
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38280: LD_EXP 132
38284: PUSH
38285: LD_VAR 0 6
38289: ARRAY
38290: PUSH
38291: LD_VAR 0 5
38295: ARRAY
38296: PUSH
38297: LD_INT 1
38299: ARRAY
38300: PPUSH
38301: LD_EXP 132
38305: PUSH
38306: LD_VAR 0 6
38310: ARRAY
38311: PUSH
38312: LD_VAR 0 5
38316: ARRAY
38317: PUSH
38318: LD_INT 2
38320: ARRAY
38321: PPUSH
38322: LD_VAR 0 2
38326: PPUSH
38327: LD_VAR 0 3
38331: PPUSH
38332: CALL_OW 298
38336: PUSH
38337: LD_INT 6
38339: LESS
38340: IFFALSE 38439
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38342: LD_EXP 132
38346: PUSH
38347: LD_VAR 0 6
38351: ARRAY
38352: PUSH
38353: LD_VAR 0 5
38357: ARRAY
38358: PUSH
38359: LD_INT 1
38361: ARRAY
38362: PPUSH
38363: LD_EXP 132
38367: PUSH
38368: LD_VAR 0 6
38372: ARRAY
38373: PUSH
38374: LD_VAR 0 5
38378: ARRAY
38379: PUSH
38380: LD_INT 2
38382: ARRAY
38383: PPUSH
38384: LD_VAR 0 1
38388: PPUSH
38389: CALL_OW 255
38393: PPUSH
38394: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38398: LD_ADDR_EXP 132
38402: PUSH
38403: LD_EXP 132
38407: PPUSH
38408: LD_VAR 0 6
38412: PPUSH
38413: LD_EXP 132
38417: PUSH
38418: LD_VAR 0 6
38422: ARRAY
38423: PPUSH
38424: LD_VAR 0 5
38428: PPUSH
38429: CALL_OW 3
38433: PPUSH
38434: CALL_OW 1
38438: ST_TO_ADDR
// end ; end ;
38439: GO 38277
38441: POP
38442: POP
// end ;
38443: LD_VAR 0 4
38447: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38448: LD_INT 0
38450: PPUSH
38451: PPUSH
38452: PPUSH
38453: PPUSH
38454: PPUSH
38455: PPUSH
38456: PPUSH
38457: PPUSH
38458: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38459: LD_VAR 0 1
38463: PPUSH
38464: CALL_OW 264
38468: PUSH
38469: LD_INT 81
38471: EQUAL
38472: NOT
38473: PUSH
38474: LD_VAR 0 1
38478: PUSH
38479: LD_EXP 131
38483: IN
38484: NOT
38485: OR
38486: IFFALSE 38490
// exit ;
38488: GO 38812
// index := GetElementIndex ( minersList , unit ) ;
38490: LD_ADDR_VAR 0 6
38494: PUSH
38495: LD_EXP 131
38499: PPUSH
38500: LD_VAR 0 1
38504: PPUSH
38505: CALL 44159 0 2
38509: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38510: LD_ADDR_VAR 0 8
38514: PUSH
38515: LD_EXP 133
38519: PUSH
38520: LD_EXP 132
38524: PUSH
38525: LD_VAR 0 6
38529: ARRAY
38530: MINUS
38531: ST_TO_ADDR
// if not minesFreeAmount then
38532: LD_VAR 0 8
38536: NOT
38537: IFFALSE 38541
// exit ;
38539: GO 38812
// tmp := [ ] ;
38541: LD_ADDR_VAR 0 7
38545: PUSH
38546: EMPTY
38547: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38548: LD_ADDR_VAR 0 5
38552: PUSH
38553: DOUBLE
38554: LD_INT 1
38556: DEC
38557: ST_TO_ADDR
38558: LD_VAR 0 8
38562: PUSH
38563: FOR_TO
38564: IFFALSE 38759
// begin _d := rand ( 0 , 5 ) ;
38566: LD_ADDR_VAR 0 11
38570: PUSH
38571: LD_INT 0
38573: PPUSH
38574: LD_INT 5
38576: PPUSH
38577: CALL_OW 12
38581: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38582: LD_ADDR_VAR 0 12
38586: PUSH
38587: LD_INT 2
38589: PPUSH
38590: LD_INT 6
38592: PPUSH
38593: CALL_OW 12
38597: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38598: LD_ADDR_VAR 0 9
38602: PUSH
38603: LD_VAR 0 2
38607: PPUSH
38608: LD_VAR 0 11
38612: PPUSH
38613: LD_VAR 0 12
38617: PPUSH
38618: CALL_OW 272
38622: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38623: LD_ADDR_VAR 0 10
38627: PUSH
38628: LD_VAR 0 3
38632: PPUSH
38633: LD_VAR 0 11
38637: PPUSH
38638: LD_VAR 0 12
38642: PPUSH
38643: CALL_OW 273
38647: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38648: LD_VAR 0 9
38652: PPUSH
38653: LD_VAR 0 10
38657: PPUSH
38658: CALL_OW 488
38662: PUSH
38663: LD_VAR 0 9
38667: PUSH
38668: LD_VAR 0 10
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_VAR 0 7
38681: IN
38682: NOT
38683: AND
38684: PUSH
38685: LD_VAR 0 9
38689: PPUSH
38690: LD_VAR 0 10
38694: PPUSH
38695: CALL_OW 458
38699: NOT
38700: AND
38701: IFFALSE 38743
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38703: LD_ADDR_VAR 0 7
38707: PUSH
38708: LD_VAR 0 7
38712: PPUSH
38713: LD_VAR 0 7
38717: PUSH
38718: LD_INT 1
38720: PLUS
38721: PPUSH
38722: LD_VAR 0 9
38726: PUSH
38727: LD_VAR 0 10
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PPUSH
38736: CALL_OW 1
38740: ST_TO_ADDR
38741: GO 38757
// i := i - 1 ;
38743: LD_ADDR_VAR 0 5
38747: PUSH
38748: LD_VAR 0 5
38752: PUSH
38753: LD_INT 1
38755: MINUS
38756: ST_TO_ADDR
// end ;
38757: GO 38563
38759: POP
38760: POP
// for i in tmp do
38761: LD_ADDR_VAR 0 5
38765: PUSH
38766: LD_VAR 0 7
38770: PUSH
38771: FOR_IN
38772: IFFALSE 38810
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38774: LD_VAR 0 1
38778: PPUSH
38779: LD_VAR 0 5
38783: PUSH
38784: LD_INT 1
38786: ARRAY
38787: PPUSH
38788: LD_VAR 0 5
38792: PUSH
38793: LD_INT 2
38795: ARRAY
38796: PPUSH
38797: CALL 37756 0 3
38801: NOT
38802: IFFALSE 38808
// exit ;
38804: POP
38805: POP
38806: GO 38812
38808: GO 38771
38810: POP
38811: POP
// end ;
38812: LD_VAR 0 4
38816: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38817: LD_INT 0
38819: PPUSH
38820: PPUSH
38821: PPUSH
38822: PPUSH
38823: PPUSH
38824: PPUSH
38825: PPUSH
// if not GetClass ( unit ) = class_sniper then
38826: LD_VAR 0 1
38830: PPUSH
38831: CALL_OW 257
38835: PUSH
38836: LD_INT 5
38838: EQUAL
38839: NOT
38840: IFFALSE 38844
// exit ;
38842: GO 39232
// dist := 8 ;
38844: LD_ADDR_VAR 0 5
38848: PUSH
38849: LD_INT 8
38851: ST_TO_ADDR
// viewRange := 12 ;
38852: LD_ADDR_VAR 0 7
38856: PUSH
38857: LD_INT 12
38859: ST_TO_ADDR
// side := GetSide ( unit ) ;
38860: LD_ADDR_VAR 0 6
38864: PUSH
38865: LD_VAR 0 1
38869: PPUSH
38870: CALL_OW 255
38874: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38875: LD_INT 61
38877: PPUSH
38878: LD_VAR 0 6
38882: PPUSH
38883: CALL_OW 321
38887: PUSH
38888: LD_INT 2
38890: EQUAL
38891: IFFALSE 38901
// viewRange := 16 ;
38893: LD_ADDR_VAR 0 7
38897: PUSH
38898: LD_INT 16
38900: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38901: LD_VAR 0 1
38905: PPUSH
38906: LD_VAR 0 2
38910: PPUSH
38911: LD_VAR 0 3
38915: PPUSH
38916: CALL_OW 297
38920: PUSH
38921: LD_VAR 0 5
38925: GREATER
38926: IFFALSE 39005
// begin ComMoveXY ( unit , x , y ) ;
38928: LD_VAR 0 1
38932: PPUSH
38933: LD_VAR 0 2
38937: PPUSH
38938: LD_VAR 0 3
38942: PPUSH
38943: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38947: LD_INT 35
38949: PPUSH
38950: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38954: LD_VAR 0 1
38958: PPUSH
38959: LD_VAR 0 2
38963: PPUSH
38964: LD_VAR 0 3
38968: PPUSH
38969: CALL 75514 0 3
38973: NOT
38974: IFFALSE 38978
// exit ;
38976: GO 39232
// until GetDistUnitXY ( unit , x , y ) < dist ;
38978: LD_VAR 0 1
38982: PPUSH
38983: LD_VAR 0 2
38987: PPUSH
38988: LD_VAR 0 3
38992: PPUSH
38993: CALL_OW 297
38997: PUSH
38998: LD_VAR 0 5
39002: LESS
39003: IFFALSE 38947
// end ; ComTurnXY ( unit , x , y ) ;
39005: LD_VAR 0 1
39009: PPUSH
39010: LD_VAR 0 2
39014: PPUSH
39015: LD_VAR 0 3
39019: PPUSH
39020: CALL_OW 118
// wait ( 5 ) ;
39024: LD_INT 5
39026: PPUSH
39027: CALL_OW 67
// _d := GetDir ( unit ) ;
39031: LD_ADDR_VAR 0 10
39035: PUSH
39036: LD_VAR 0 1
39040: PPUSH
39041: CALL_OW 254
39045: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39046: LD_ADDR_VAR 0 8
39050: PUSH
39051: LD_VAR 0 1
39055: PPUSH
39056: CALL_OW 250
39060: PPUSH
39061: LD_VAR 0 10
39065: PPUSH
39066: LD_VAR 0 5
39070: PPUSH
39071: CALL_OW 272
39075: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39076: LD_ADDR_VAR 0 9
39080: PUSH
39081: LD_VAR 0 1
39085: PPUSH
39086: CALL_OW 251
39090: PPUSH
39091: LD_VAR 0 10
39095: PPUSH
39096: LD_VAR 0 5
39100: PPUSH
39101: CALL_OW 273
39105: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39106: LD_VAR 0 8
39110: PPUSH
39111: LD_VAR 0 9
39115: PPUSH
39116: CALL_OW 488
39120: NOT
39121: IFFALSE 39125
// exit ;
39123: GO 39232
// ComAnimCustom ( unit , 1 ) ;
39125: LD_VAR 0 1
39129: PPUSH
39130: LD_INT 1
39132: PPUSH
39133: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39137: LD_VAR 0 8
39141: PPUSH
39142: LD_VAR 0 9
39146: PPUSH
39147: LD_VAR 0 6
39151: PPUSH
39152: LD_VAR 0 7
39156: PPUSH
39157: CALL_OW 330
// repeat wait ( 1 ) ;
39161: LD_INT 1
39163: PPUSH
39164: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39168: LD_VAR 0 1
39172: PPUSH
39173: CALL_OW 316
39177: PUSH
39178: LD_VAR 0 1
39182: PPUSH
39183: CALL_OW 314
39187: OR
39188: PUSH
39189: LD_VAR 0 1
39193: PPUSH
39194: CALL_OW 302
39198: NOT
39199: OR
39200: PUSH
39201: LD_VAR 0 1
39205: PPUSH
39206: CALL_OW 301
39210: OR
39211: IFFALSE 39161
// RemoveSeeing ( _x , _y , side ) ;
39213: LD_VAR 0 8
39217: PPUSH
39218: LD_VAR 0 9
39222: PPUSH
39223: LD_VAR 0 6
39227: PPUSH
39228: CALL_OW 331
// end ; end_of_file
39232: LD_VAR 0 4
39236: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39237: LD_INT 0
39239: PPUSH
39240: PPUSH
// if exist_mode then
39241: LD_VAR 0 2
39245: IFFALSE 39270
// unit := CreateCharacter ( prefix & ident ) else
39247: LD_ADDR_VAR 0 5
39251: PUSH
39252: LD_VAR 0 3
39256: PUSH
39257: LD_VAR 0 1
39261: STR
39262: PPUSH
39263: CALL_OW 34
39267: ST_TO_ADDR
39268: GO 39285
// unit := NewCharacter ( ident ) ;
39270: LD_ADDR_VAR 0 5
39274: PUSH
39275: LD_VAR 0 1
39279: PPUSH
39280: CALL_OW 25
39284: ST_TO_ADDR
// result := unit ;
39285: LD_ADDR_VAR 0 4
39289: PUSH
39290: LD_VAR 0 5
39294: ST_TO_ADDR
// end ;
39295: LD_VAR 0 4
39299: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39300: LD_INT 0
39302: PPUSH
39303: PPUSH
// if not side or not nation then
39304: LD_VAR 0 1
39308: NOT
39309: PUSH
39310: LD_VAR 0 2
39314: NOT
39315: OR
39316: IFFALSE 39320
// exit ;
39318: GO 40088
// case nation of nation_american :
39320: LD_VAR 0 2
39324: PUSH
39325: LD_INT 1
39327: DOUBLE
39328: EQUAL
39329: IFTRUE 39333
39331: GO 39547
39333: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39334: LD_ADDR_VAR 0 4
39338: PUSH
39339: LD_INT 35
39341: PUSH
39342: LD_INT 45
39344: PUSH
39345: LD_INT 46
39347: PUSH
39348: LD_INT 47
39350: PUSH
39351: LD_INT 82
39353: PUSH
39354: LD_INT 83
39356: PUSH
39357: LD_INT 84
39359: PUSH
39360: LD_INT 85
39362: PUSH
39363: LD_INT 86
39365: PUSH
39366: LD_INT 1
39368: PUSH
39369: LD_INT 2
39371: PUSH
39372: LD_INT 6
39374: PUSH
39375: LD_INT 15
39377: PUSH
39378: LD_INT 16
39380: PUSH
39381: LD_INT 7
39383: PUSH
39384: LD_INT 12
39386: PUSH
39387: LD_INT 13
39389: PUSH
39390: LD_INT 10
39392: PUSH
39393: LD_INT 14
39395: PUSH
39396: LD_INT 20
39398: PUSH
39399: LD_INT 21
39401: PUSH
39402: LD_INT 22
39404: PUSH
39405: LD_INT 25
39407: PUSH
39408: LD_INT 32
39410: PUSH
39411: LD_INT 27
39413: PUSH
39414: LD_INT 36
39416: PUSH
39417: LD_INT 69
39419: PUSH
39420: LD_INT 39
39422: PUSH
39423: LD_INT 34
39425: PUSH
39426: LD_INT 40
39428: PUSH
39429: LD_INT 48
39431: PUSH
39432: LD_INT 49
39434: PUSH
39435: LD_INT 50
39437: PUSH
39438: LD_INT 51
39440: PUSH
39441: LD_INT 52
39443: PUSH
39444: LD_INT 53
39446: PUSH
39447: LD_INT 54
39449: PUSH
39450: LD_INT 55
39452: PUSH
39453: LD_INT 56
39455: PUSH
39456: LD_INT 57
39458: PUSH
39459: LD_INT 58
39461: PUSH
39462: LD_INT 59
39464: PUSH
39465: LD_INT 60
39467: PUSH
39468: LD_INT 61
39470: PUSH
39471: LD_INT 62
39473: PUSH
39474: LD_INT 80
39476: PUSH
39477: LD_INT 82
39479: PUSH
39480: LD_INT 83
39482: PUSH
39483: LD_INT 84
39485: PUSH
39486: LD_INT 85
39488: PUSH
39489: LD_INT 86
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: ST_TO_ADDR
39545: GO 40012
39547: LD_INT 2
39549: DOUBLE
39550: EQUAL
39551: IFTRUE 39555
39553: GO 39781
39555: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39556: LD_ADDR_VAR 0 4
39560: PUSH
39561: LD_INT 35
39563: PUSH
39564: LD_INT 45
39566: PUSH
39567: LD_INT 46
39569: PUSH
39570: LD_INT 47
39572: PUSH
39573: LD_INT 82
39575: PUSH
39576: LD_INT 83
39578: PUSH
39579: LD_INT 84
39581: PUSH
39582: LD_INT 85
39584: PUSH
39585: LD_INT 87
39587: PUSH
39588: LD_INT 70
39590: PUSH
39591: LD_INT 1
39593: PUSH
39594: LD_INT 11
39596: PUSH
39597: LD_INT 3
39599: PUSH
39600: LD_INT 4
39602: PUSH
39603: LD_INT 5
39605: PUSH
39606: LD_INT 6
39608: PUSH
39609: LD_INT 15
39611: PUSH
39612: LD_INT 18
39614: PUSH
39615: LD_INT 7
39617: PUSH
39618: LD_INT 17
39620: PUSH
39621: LD_INT 8
39623: PUSH
39624: LD_INT 20
39626: PUSH
39627: LD_INT 21
39629: PUSH
39630: LD_INT 22
39632: PUSH
39633: LD_INT 72
39635: PUSH
39636: LD_INT 26
39638: PUSH
39639: LD_INT 69
39641: PUSH
39642: LD_INT 39
39644: PUSH
39645: LD_INT 40
39647: PUSH
39648: LD_INT 41
39650: PUSH
39651: LD_INT 42
39653: PUSH
39654: LD_INT 43
39656: PUSH
39657: LD_INT 48
39659: PUSH
39660: LD_INT 49
39662: PUSH
39663: LD_INT 50
39665: PUSH
39666: LD_INT 51
39668: PUSH
39669: LD_INT 52
39671: PUSH
39672: LD_INT 53
39674: PUSH
39675: LD_INT 54
39677: PUSH
39678: LD_INT 55
39680: PUSH
39681: LD_INT 56
39683: PUSH
39684: LD_INT 60
39686: PUSH
39687: LD_INT 61
39689: PUSH
39690: LD_INT 62
39692: PUSH
39693: LD_INT 66
39695: PUSH
39696: LD_INT 67
39698: PUSH
39699: LD_INT 68
39701: PUSH
39702: LD_INT 81
39704: PUSH
39705: LD_INT 82
39707: PUSH
39708: LD_INT 83
39710: PUSH
39711: LD_INT 84
39713: PUSH
39714: LD_INT 85
39716: PUSH
39717: LD_INT 87
39719: PUSH
39720: LD_INT 88
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: ST_TO_ADDR
39779: GO 40012
39781: LD_INT 3
39783: DOUBLE
39784: EQUAL
39785: IFTRUE 39789
39787: GO 40011
39789: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39790: LD_ADDR_VAR 0 4
39794: PUSH
39795: LD_INT 46
39797: PUSH
39798: LD_INT 47
39800: PUSH
39801: LD_INT 1
39803: PUSH
39804: LD_INT 2
39806: PUSH
39807: LD_INT 82
39809: PUSH
39810: LD_INT 83
39812: PUSH
39813: LD_INT 84
39815: PUSH
39816: LD_INT 85
39818: PUSH
39819: LD_INT 86
39821: PUSH
39822: LD_INT 11
39824: PUSH
39825: LD_INT 9
39827: PUSH
39828: LD_INT 20
39830: PUSH
39831: LD_INT 19
39833: PUSH
39834: LD_INT 21
39836: PUSH
39837: LD_INT 24
39839: PUSH
39840: LD_INT 22
39842: PUSH
39843: LD_INT 25
39845: PUSH
39846: LD_INT 28
39848: PUSH
39849: LD_INT 29
39851: PUSH
39852: LD_INT 30
39854: PUSH
39855: LD_INT 31
39857: PUSH
39858: LD_INT 37
39860: PUSH
39861: LD_INT 38
39863: PUSH
39864: LD_INT 32
39866: PUSH
39867: LD_INT 27
39869: PUSH
39870: LD_INT 33
39872: PUSH
39873: LD_INT 69
39875: PUSH
39876: LD_INT 39
39878: PUSH
39879: LD_INT 34
39881: PUSH
39882: LD_INT 40
39884: PUSH
39885: LD_INT 71
39887: PUSH
39888: LD_INT 23
39890: PUSH
39891: LD_INT 44
39893: PUSH
39894: LD_INT 48
39896: PUSH
39897: LD_INT 49
39899: PUSH
39900: LD_INT 50
39902: PUSH
39903: LD_INT 51
39905: PUSH
39906: LD_INT 52
39908: PUSH
39909: LD_INT 53
39911: PUSH
39912: LD_INT 54
39914: PUSH
39915: LD_INT 55
39917: PUSH
39918: LD_INT 56
39920: PUSH
39921: LD_INT 57
39923: PUSH
39924: LD_INT 58
39926: PUSH
39927: LD_INT 59
39929: PUSH
39930: LD_INT 63
39932: PUSH
39933: LD_INT 64
39935: PUSH
39936: LD_INT 65
39938: PUSH
39939: LD_INT 82
39941: PUSH
39942: LD_INT 83
39944: PUSH
39945: LD_INT 84
39947: PUSH
39948: LD_INT 85
39950: PUSH
39951: LD_INT 86
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: ST_TO_ADDR
40009: GO 40012
40011: POP
// if state > - 1 and state < 3 then
40012: LD_VAR 0 3
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: GREATER
40021: PUSH
40022: LD_VAR 0 3
40026: PUSH
40027: LD_INT 3
40029: LESS
40030: AND
40031: IFFALSE 40088
// for i in result do
40033: LD_ADDR_VAR 0 5
40037: PUSH
40038: LD_VAR 0 4
40042: PUSH
40043: FOR_IN
40044: IFFALSE 40086
// if GetTech ( i , side ) <> state then
40046: LD_VAR 0 5
40050: PPUSH
40051: LD_VAR 0 1
40055: PPUSH
40056: CALL_OW 321
40060: PUSH
40061: LD_VAR 0 3
40065: NONEQUAL
40066: IFFALSE 40084
// result := result diff i ;
40068: LD_ADDR_VAR 0 4
40072: PUSH
40073: LD_VAR 0 4
40077: PUSH
40078: LD_VAR 0 5
40082: DIFF
40083: ST_TO_ADDR
40084: GO 40043
40086: POP
40087: POP
// end ;
40088: LD_VAR 0 4
40092: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40093: LD_INT 0
40095: PPUSH
40096: PPUSH
40097: PPUSH
// result := true ;
40098: LD_ADDR_VAR 0 3
40102: PUSH
40103: LD_INT 1
40105: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40106: LD_ADDR_VAR 0 5
40110: PUSH
40111: LD_VAR 0 2
40115: PPUSH
40116: CALL_OW 480
40120: ST_TO_ADDR
// if not tmp then
40121: LD_VAR 0 5
40125: NOT
40126: IFFALSE 40130
// exit ;
40128: GO 40179
// for i in tmp do
40130: LD_ADDR_VAR 0 4
40134: PUSH
40135: LD_VAR 0 5
40139: PUSH
40140: FOR_IN
40141: IFFALSE 40177
// if GetTech ( i , side ) <> state_researched then
40143: LD_VAR 0 4
40147: PPUSH
40148: LD_VAR 0 1
40152: PPUSH
40153: CALL_OW 321
40157: PUSH
40158: LD_INT 2
40160: NONEQUAL
40161: IFFALSE 40175
// begin result := false ;
40163: LD_ADDR_VAR 0 3
40167: PUSH
40168: LD_INT 0
40170: ST_TO_ADDR
// exit ;
40171: POP
40172: POP
40173: GO 40179
// end ;
40175: GO 40140
40177: POP
40178: POP
// end ;
40179: LD_VAR 0 3
40183: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40184: LD_INT 0
40186: PPUSH
40187: PPUSH
40188: PPUSH
40189: PPUSH
40190: PPUSH
40191: PPUSH
40192: PPUSH
40193: PPUSH
40194: PPUSH
40195: PPUSH
40196: PPUSH
40197: PPUSH
40198: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40199: LD_VAR 0 1
40203: NOT
40204: PUSH
40205: LD_VAR 0 1
40209: PPUSH
40210: CALL_OW 257
40214: PUSH
40215: LD_INT 9
40217: NONEQUAL
40218: OR
40219: IFFALSE 40223
// exit ;
40221: GO 40796
// side := GetSide ( unit ) ;
40223: LD_ADDR_VAR 0 9
40227: PUSH
40228: LD_VAR 0 1
40232: PPUSH
40233: CALL_OW 255
40237: ST_TO_ADDR
// tech_space := tech_spacanom ;
40238: LD_ADDR_VAR 0 12
40242: PUSH
40243: LD_INT 29
40245: ST_TO_ADDR
// tech_time := tech_taurad ;
40246: LD_ADDR_VAR 0 13
40250: PUSH
40251: LD_INT 28
40253: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40254: LD_ADDR_VAR 0 11
40258: PUSH
40259: LD_VAR 0 1
40263: PPUSH
40264: CALL_OW 310
40268: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40269: LD_VAR 0 11
40273: PPUSH
40274: CALL_OW 247
40278: PUSH
40279: LD_INT 2
40281: EQUAL
40282: IFFALSE 40286
// exit ;
40284: GO 40796
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40286: LD_ADDR_VAR 0 8
40290: PUSH
40291: LD_INT 81
40293: PUSH
40294: LD_VAR 0 9
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 3
40305: PUSH
40306: LD_INT 21
40308: PUSH
40309: LD_INT 3
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PPUSH
40324: CALL_OW 69
40328: ST_TO_ADDR
// if not tmp then
40329: LD_VAR 0 8
40333: NOT
40334: IFFALSE 40338
// exit ;
40336: GO 40796
// if in_unit then
40338: LD_VAR 0 11
40342: IFFALSE 40366
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40344: LD_ADDR_VAR 0 10
40348: PUSH
40349: LD_VAR 0 8
40353: PPUSH
40354: LD_VAR 0 11
40358: PPUSH
40359: CALL_OW 74
40363: ST_TO_ADDR
40364: GO 40386
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40366: LD_ADDR_VAR 0 10
40370: PUSH
40371: LD_VAR 0 8
40375: PPUSH
40376: LD_VAR 0 1
40380: PPUSH
40381: CALL_OW 74
40385: ST_TO_ADDR
// if not enemy then
40386: LD_VAR 0 10
40390: NOT
40391: IFFALSE 40395
// exit ;
40393: GO 40796
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40395: LD_VAR 0 11
40399: PUSH
40400: LD_VAR 0 11
40404: PPUSH
40405: LD_VAR 0 10
40409: PPUSH
40410: CALL_OW 296
40414: PUSH
40415: LD_INT 13
40417: GREATER
40418: AND
40419: PUSH
40420: LD_VAR 0 1
40424: PPUSH
40425: LD_VAR 0 10
40429: PPUSH
40430: CALL_OW 296
40434: PUSH
40435: LD_INT 12
40437: GREATER
40438: OR
40439: IFFALSE 40443
// exit ;
40441: GO 40796
// missile := [ 1 ] ;
40443: LD_ADDR_VAR 0 14
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: EMPTY
40452: LIST
40453: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40454: LD_VAR 0 9
40458: PPUSH
40459: LD_VAR 0 12
40463: PPUSH
40464: CALL_OW 325
40468: IFFALSE 40497
// missile := Replace ( missile , missile + 1 , 2 ) ;
40470: LD_ADDR_VAR 0 14
40474: PUSH
40475: LD_VAR 0 14
40479: PPUSH
40480: LD_VAR 0 14
40484: PUSH
40485: LD_INT 1
40487: PLUS
40488: PPUSH
40489: LD_INT 2
40491: PPUSH
40492: CALL_OW 1
40496: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40497: LD_VAR 0 9
40501: PPUSH
40502: LD_VAR 0 13
40506: PPUSH
40507: CALL_OW 325
40511: PUSH
40512: LD_VAR 0 10
40516: PPUSH
40517: CALL_OW 255
40521: PPUSH
40522: LD_VAR 0 13
40526: PPUSH
40527: CALL_OW 325
40531: NOT
40532: AND
40533: IFFALSE 40562
// missile := Replace ( missile , missile + 1 , 3 ) ;
40535: LD_ADDR_VAR 0 14
40539: PUSH
40540: LD_VAR 0 14
40544: PPUSH
40545: LD_VAR 0 14
40549: PUSH
40550: LD_INT 1
40552: PLUS
40553: PPUSH
40554: LD_INT 3
40556: PPUSH
40557: CALL_OW 1
40561: ST_TO_ADDR
// if missile < 2 then
40562: LD_VAR 0 14
40566: PUSH
40567: LD_INT 2
40569: LESS
40570: IFFALSE 40574
// exit ;
40572: GO 40796
// x := GetX ( enemy ) ;
40574: LD_ADDR_VAR 0 4
40578: PUSH
40579: LD_VAR 0 10
40583: PPUSH
40584: CALL_OW 250
40588: ST_TO_ADDR
// y := GetY ( enemy ) ;
40589: LD_ADDR_VAR 0 5
40593: PUSH
40594: LD_VAR 0 10
40598: PPUSH
40599: CALL_OW 251
40603: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40604: LD_ADDR_VAR 0 6
40608: PUSH
40609: LD_VAR 0 4
40613: PUSH
40614: LD_INT 1
40616: NEG
40617: PPUSH
40618: LD_INT 1
40620: PPUSH
40621: CALL_OW 12
40625: PLUS
40626: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40627: LD_ADDR_VAR 0 7
40631: PUSH
40632: LD_VAR 0 5
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PPUSH
40641: LD_INT 1
40643: PPUSH
40644: CALL_OW 12
40648: PLUS
40649: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40650: LD_VAR 0 6
40654: PPUSH
40655: LD_VAR 0 7
40659: PPUSH
40660: CALL_OW 488
40664: NOT
40665: IFFALSE 40687
// begin _x := x ;
40667: LD_ADDR_VAR 0 6
40671: PUSH
40672: LD_VAR 0 4
40676: ST_TO_ADDR
// _y := y ;
40677: LD_ADDR_VAR 0 7
40681: PUSH
40682: LD_VAR 0 5
40686: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40687: LD_ADDR_VAR 0 3
40691: PUSH
40692: LD_INT 1
40694: PPUSH
40695: LD_VAR 0 14
40699: PPUSH
40700: CALL_OW 12
40704: ST_TO_ADDR
// case i of 1 :
40705: LD_VAR 0 3
40709: PUSH
40710: LD_INT 1
40712: DOUBLE
40713: EQUAL
40714: IFTRUE 40718
40716: GO 40735
40718: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40719: LD_VAR 0 1
40723: PPUSH
40724: LD_VAR 0 10
40728: PPUSH
40729: CALL_OW 115
40733: GO 40796
40735: LD_INT 2
40737: DOUBLE
40738: EQUAL
40739: IFTRUE 40743
40741: GO 40765
40743: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40744: LD_VAR 0 1
40748: PPUSH
40749: LD_VAR 0 6
40753: PPUSH
40754: LD_VAR 0 7
40758: PPUSH
40759: CALL_OW 153
40763: GO 40796
40765: LD_INT 3
40767: DOUBLE
40768: EQUAL
40769: IFTRUE 40773
40771: GO 40795
40773: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40774: LD_VAR 0 1
40778: PPUSH
40779: LD_VAR 0 6
40783: PPUSH
40784: LD_VAR 0 7
40788: PPUSH
40789: CALL_OW 154
40793: GO 40796
40795: POP
// end ;
40796: LD_VAR 0 2
40800: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40801: LD_INT 0
40803: PPUSH
40804: PPUSH
40805: PPUSH
40806: PPUSH
40807: PPUSH
40808: PPUSH
// if not unit or not building then
40809: LD_VAR 0 1
40813: NOT
40814: PUSH
40815: LD_VAR 0 2
40819: NOT
40820: OR
40821: IFFALSE 40825
// exit ;
40823: GO 40983
// x := GetX ( building ) ;
40825: LD_ADDR_VAR 0 5
40829: PUSH
40830: LD_VAR 0 2
40834: PPUSH
40835: CALL_OW 250
40839: ST_TO_ADDR
// y := GetY ( building ) ;
40840: LD_ADDR_VAR 0 6
40844: PUSH
40845: LD_VAR 0 2
40849: PPUSH
40850: CALL_OW 251
40854: ST_TO_ADDR
// for i = 0 to 5 do
40855: LD_ADDR_VAR 0 4
40859: PUSH
40860: DOUBLE
40861: LD_INT 0
40863: DEC
40864: ST_TO_ADDR
40865: LD_INT 5
40867: PUSH
40868: FOR_TO
40869: IFFALSE 40981
// begin _x := ShiftX ( x , i , 3 ) ;
40871: LD_ADDR_VAR 0 7
40875: PUSH
40876: LD_VAR 0 5
40880: PPUSH
40881: LD_VAR 0 4
40885: PPUSH
40886: LD_INT 3
40888: PPUSH
40889: CALL_OW 272
40893: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40894: LD_ADDR_VAR 0 8
40898: PUSH
40899: LD_VAR 0 6
40903: PPUSH
40904: LD_VAR 0 4
40908: PPUSH
40909: LD_INT 3
40911: PPUSH
40912: CALL_OW 273
40916: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40917: LD_VAR 0 7
40921: PPUSH
40922: LD_VAR 0 8
40926: PPUSH
40927: CALL_OW 488
40931: NOT
40932: IFFALSE 40936
// continue ;
40934: GO 40868
// if HexInfo ( _x , _y ) = 0 then
40936: LD_VAR 0 7
40940: PPUSH
40941: LD_VAR 0 8
40945: PPUSH
40946: CALL_OW 428
40950: PUSH
40951: LD_INT 0
40953: EQUAL
40954: IFFALSE 40979
// begin ComMoveXY ( unit , _x , _y ) ;
40956: LD_VAR 0 1
40960: PPUSH
40961: LD_VAR 0 7
40965: PPUSH
40966: LD_VAR 0 8
40970: PPUSH
40971: CALL_OW 111
// exit ;
40975: POP
40976: POP
40977: GO 40983
// end ; end ;
40979: GO 40868
40981: POP
40982: POP
// end ;
40983: LD_VAR 0 3
40987: RET
// export function ScanBase ( side , base_area ) ; begin
40988: LD_INT 0
40990: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40991: LD_ADDR_VAR 0 3
40995: PUSH
40996: LD_VAR 0 2
41000: PPUSH
41001: LD_INT 81
41003: PUSH
41004: LD_VAR 0 1
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PPUSH
41013: CALL_OW 70
41017: ST_TO_ADDR
// end ;
41018: LD_VAR 0 3
41022: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41023: LD_INT 0
41025: PPUSH
41026: PPUSH
41027: PPUSH
41028: PPUSH
// result := false ;
41029: LD_ADDR_VAR 0 2
41033: PUSH
41034: LD_INT 0
41036: ST_TO_ADDR
// side := GetSide ( unit ) ;
41037: LD_ADDR_VAR 0 3
41041: PUSH
41042: LD_VAR 0 1
41046: PPUSH
41047: CALL_OW 255
41051: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41052: LD_ADDR_VAR 0 4
41056: PUSH
41057: LD_VAR 0 1
41061: PPUSH
41062: CALL_OW 248
41066: ST_TO_ADDR
// case nat of 1 :
41067: LD_VAR 0 4
41071: PUSH
41072: LD_INT 1
41074: DOUBLE
41075: EQUAL
41076: IFTRUE 41080
41078: GO 41091
41080: POP
// tech := tech_lassight ; 2 :
41081: LD_ADDR_VAR 0 5
41085: PUSH
41086: LD_INT 12
41088: ST_TO_ADDR
41089: GO 41130
41091: LD_INT 2
41093: DOUBLE
41094: EQUAL
41095: IFTRUE 41099
41097: GO 41110
41099: POP
// tech := tech_mortar ; 3 :
41100: LD_ADDR_VAR 0 5
41104: PUSH
41105: LD_INT 41
41107: ST_TO_ADDR
41108: GO 41130
41110: LD_INT 3
41112: DOUBLE
41113: EQUAL
41114: IFTRUE 41118
41116: GO 41129
41118: POP
// tech := tech_bazooka ; end ;
41119: LD_ADDR_VAR 0 5
41123: PUSH
41124: LD_INT 44
41126: ST_TO_ADDR
41127: GO 41130
41129: POP
// if Researched ( side , tech ) then
41130: LD_VAR 0 3
41134: PPUSH
41135: LD_VAR 0 5
41139: PPUSH
41140: CALL_OW 325
41144: IFFALSE 41171
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41146: LD_ADDR_VAR 0 2
41150: PUSH
41151: LD_INT 5
41153: PUSH
41154: LD_INT 8
41156: PUSH
41157: LD_INT 9
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: LIST
41164: PUSH
41165: LD_VAR 0 4
41169: ARRAY
41170: ST_TO_ADDR
// end ;
41171: LD_VAR 0 2
41175: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41176: LD_INT 0
41178: PPUSH
41179: PPUSH
41180: PPUSH
// if not mines then
41181: LD_VAR 0 2
41185: NOT
41186: IFFALSE 41190
// exit ;
41188: GO 41334
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41190: LD_ADDR_VAR 0 5
41194: PUSH
41195: LD_INT 81
41197: PUSH
41198: LD_VAR 0 1
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 3
41209: PUSH
41210: LD_INT 21
41212: PUSH
41213: LD_INT 3
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PPUSH
41228: CALL_OW 69
41232: ST_TO_ADDR
// for i in mines do
41233: LD_ADDR_VAR 0 4
41237: PUSH
41238: LD_VAR 0 2
41242: PUSH
41243: FOR_IN
41244: IFFALSE 41332
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41246: LD_VAR 0 4
41250: PUSH
41251: LD_INT 1
41253: ARRAY
41254: PPUSH
41255: LD_VAR 0 4
41259: PUSH
41260: LD_INT 2
41262: ARRAY
41263: PPUSH
41264: CALL_OW 458
41268: NOT
41269: IFFALSE 41273
// continue ;
41271: GO 41243
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41273: LD_VAR 0 4
41277: PUSH
41278: LD_INT 1
41280: ARRAY
41281: PPUSH
41282: LD_VAR 0 4
41286: PUSH
41287: LD_INT 2
41289: ARRAY
41290: PPUSH
41291: CALL_OW 428
41295: PUSH
41296: LD_VAR 0 5
41300: IN
41301: IFFALSE 41330
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41303: LD_VAR 0 4
41307: PUSH
41308: LD_INT 1
41310: ARRAY
41311: PPUSH
41312: LD_VAR 0 4
41316: PUSH
41317: LD_INT 2
41319: ARRAY
41320: PPUSH
41321: LD_VAR 0 1
41325: PPUSH
41326: CALL_OW 456
// end ;
41330: GO 41243
41332: POP
41333: POP
// end ;
41334: LD_VAR 0 3
41338: RET
// export function Count ( array ) ; var i ; begin
41339: LD_INT 0
41341: PPUSH
41342: PPUSH
// result := 0 ;
41343: LD_ADDR_VAR 0 2
41347: PUSH
41348: LD_INT 0
41350: ST_TO_ADDR
// for i in array do
41351: LD_ADDR_VAR 0 3
41355: PUSH
41356: LD_VAR 0 1
41360: PUSH
41361: FOR_IN
41362: IFFALSE 41386
// if i then
41364: LD_VAR 0 3
41368: IFFALSE 41384
// result := result + 1 ;
41370: LD_ADDR_VAR 0 2
41374: PUSH
41375: LD_VAR 0 2
41379: PUSH
41380: LD_INT 1
41382: PLUS
41383: ST_TO_ADDR
41384: GO 41361
41386: POP
41387: POP
// end ;
41388: LD_VAR 0 2
41392: RET
// export function IsEmpty ( building ) ; begin
41393: LD_INT 0
41395: PPUSH
// if not building then
41396: LD_VAR 0 1
41400: NOT
41401: IFFALSE 41405
// exit ;
41403: GO 41448
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41405: LD_ADDR_VAR 0 2
41409: PUSH
41410: LD_VAR 0 1
41414: PUSH
41415: LD_INT 22
41417: PUSH
41418: LD_VAR 0 1
41422: PPUSH
41423: CALL_OW 255
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 58
41434: PUSH
41435: EMPTY
41436: LIST
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PPUSH
41442: CALL_OW 69
41446: IN
41447: ST_TO_ADDR
// end ;
41448: LD_VAR 0 2
41452: RET
// export function IsNotFull ( building ) ; var places ; begin
41453: LD_INT 0
41455: PPUSH
41456: PPUSH
// if not building then
41457: LD_VAR 0 1
41461: NOT
41462: IFFALSE 41466
// exit ;
41464: GO 41637
// result := false ;
41466: LD_ADDR_VAR 0 2
41470: PUSH
41471: LD_INT 0
41473: ST_TO_ADDR
// places := 0 ;
41474: LD_ADDR_VAR 0 3
41478: PUSH
41479: LD_INT 0
41481: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41482: LD_VAR 0 1
41486: PPUSH
41487: CALL_OW 266
41491: PUSH
41492: LD_INT 0
41494: DOUBLE
41495: EQUAL
41496: IFTRUE 41554
41498: LD_INT 1
41500: DOUBLE
41501: EQUAL
41502: IFTRUE 41554
41504: LD_INT 6
41506: DOUBLE
41507: EQUAL
41508: IFTRUE 41554
41510: LD_INT 7
41512: DOUBLE
41513: EQUAL
41514: IFTRUE 41554
41516: LD_INT 8
41518: DOUBLE
41519: EQUAL
41520: IFTRUE 41554
41522: LD_INT 4
41524: DOUBLE
41525: EQUAL
41526: IFTRUE 41554
41528: LD_INT 5
41530: DOUBLE
41531: EQUAL
41532: IFTRUE 41554
41534: LD_INT 2
41536: DOUBLE
41537: EQUAL
41538: IFTRUE 41554
41540: LD_INT 3
41542: DOUBLE
41543: EQUAL
41544: IFTRUE 41554
41546: LD_INT 35
41548: DOUBLE
41549: EQUAL
41550: IFTRUE 41554
41552: GO 41565
41554: POP
// places := 6 ; b_bunker , b_breastwork :
41555: LD_ADDR_VAR 0 3
41559: PUSH
41560: LD_INT 6
41562: ST_TO_ADDR
41563: GO 41610
41565: LD_INT 32
41567: DOUBLE
41568: EQUAL
41569: IFTRUE 41579
41571: LD_INT 31
41573: DOUBLE
41574: EQUAL
41575: IFTRUE 41579
41577: GO 41590
41579: POP
// places := 1 ; b_control_tower :
41580: LD_ADDR_VAR 0 3
41584: PUSH
41585: LD_INT 1
41587: ST_TO_ADDR
41588: GO 41610
41590: LD_INT 36
41592: DOUBLE
41593: EQUAL
41594: IFTRUE 41598
41596: GO 41609
41598: POP
// places := 3 ; end ;
41599: LD_ADDR_VAR 0 3
41603: PUSH
41604: LD_INT 3
41606: ST_TO_ADDR
41607: GO 41610
41609: POP
// if places then
41610: LD_VAR 0 3
41614: IFFALSE 41637
// result := UnitsInside ( building ) < places ;
41616: LD_ADDR_VAR 0 2
41620: PUSH
41621: LD_VAR 0 1
41625: PPUSH
41626: CALL_OW 313
41630: PUSH
41631: LD_VAR 0 3
41635: LESS
41636: ST_TO_ADDR
// end ;
41637: LD_VAR 0 2
41641: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41642: LD_INT 0
41644: PPUSH
41645: PPUSH
41646: PPUSH
41647: PPUSH
// tmp := [ ] ;
41648: LD_ADDR_VAR 0 3
41652: PUSH
41653: EMPTY
41654: ST_TO_ADDR
// list := [ ] ;
41655: LD_ADDR_VAR 0 5
41659: PUSH
41660: EMPTY
41661: ST_TO_ADDR
// for i = 16 to 25 do
41662: LD_ADDR_VAR 0 4
41666: PUSH
41667: DOUBLE
41668: LD_INT 16
41670: DEC
41671: ST_TO_ADDR
41672: LD_INT 25
41674: PUSH
41675: FOR_TO
41676: IFFALSE 41749
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41678: LD_ADDR_VAR 0 3
41682: PUSH
41683: LD_VAR 0 3
41687: PUSH
41688: LD_INT 22
41690: PUSH
41691: LD_VAR 0 1
41695: PPUSH
41696: CALL_OW 255
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 91
41707: PUSH
41708: LD_VAR 0 1
41712: PUSH
41713: LD_INT 6
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 30
41723: PUSH
41724: LD_VAR 0 4
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: LIST
41737: PUSH
41738: EMPTY
41739: LIST
41740: PPUSH
41741: CALL_OW 69
41745: ADD
41746: ST_TO_ADDR
41747: GO 41675
41749: POP
41750: POP
// for i = 1 to tmp do
41751: LD_ADDR_VAR 0 4
41755: PUSH
41756: DOUBLE
41757: LD_INT 1
41759: DEC
41760: ST_TO_ADDR
41761: LD_VAR 0 3
41765: PUSH
41766: FOR_TO
41767: IFFALSE 41855
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41769: LD_ADDR_VAR 0 5
41773: PUSH
41774: LD_VAR 0 5
41778: PUSH
41779: LD_VAR 0 3
41783: PUSH
41784: LD_VAR 0 4
41788: ARRAY
41789: PPUSH
41790: CALL_OW 266
41794: PUSH
41795: LD_VAR 0 3
41799: PUSH
41800: LD_VAR 0 4
41804: ARRAY
41805: PPUSH
41806: CALL_OW 250
41810: PUSH
41811: LD_VAR 0 3
41815: PUSH
41816: LD_VAR 0 4
41820: ARRAY
41821: PPUSH
41822: CALL_OW 251
41826: PUSH
41827: LD_VAR 0 3
41831: PUSH
41832: LD_VAR 0 4
41836: ARRAY
41837: PPUSH
41838: CALL_OW 254
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: PUSH
41849: EMPTY
41850: LIST
41851: ADD
41852: ST_TO_ADDR
41853: GO 41766
41855: POP
41856: POP
// result := list ;
41857: LD_ADDR_VAR 0 2
41861: PUSH
41862: LD_VAR 0 5
41866: ST_TO_ADDR
// end ;
41867: LD_VAR 0 2
41871: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41872: LD_INT 0
41874: PPUSH
41875: PPUSH
41876: PPUSH
41877: PPUSH
41878: PPUSH
41879: PPUSH
41880: PPUSH
// if not factory then
41881: LD_VAR 0 1
41885: NOT
41886: IFFALSE 41890
// exit ;
41888: GO 42483
// if control = control_apeman then
41890: LD_VAR 0 4
41894: PUSH
41895: LD_INT 5
41897: EQUAL
41898: IFFALSE 42007
// begin tmp := UnitsInside ( factory ) ;
41900: LD_ADDR_VAR 0 8
41904: PUSH
41905: LD_VAR 0 1
41909: PPUSH
41910: CALL_OW 313
41914: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41915: LD_VAR 0 8
41919: PPUSH
41920: LD_INT 25
41922: PUSH
41923: LD_INT 12
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PPUSH
41930: CALL_OW 72
41934: NOT
41935: IFFALSE 41945
// control := control_manual ;
41937: LD_ADDR_VAR 0 4
41941: PUSH
41942: LD_INT 1
41944: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41945: LD_ADDR_VAR 0 8
41949: PUSH
41950: LD_VAR 0 1
41954: PPUSH
41955: CALL 41642 0 1
41959: ST_TO_ADDR
// if tmp then
41960: LD_VAR 0 8
41964: IFFALSE 42007
// begin for i in tmp do
41966: LD_ADDR_VAR 0 7
41970: PUSH
41971: LD_VAR 0 8
41975: PUSH
41976: FOR_IN
41977: IFFALSE 42005
// if i [ 1 ] = b_ext_radio then
41979: LD_VAR 0 7
41983: PUSH
41984: LD_INT 1
41986: ARRAY
41987: PUSH
41988: LD_INT 22
41990: EQUAL
41991: IFFALSE 42003
// begin control := control_remote ;
41993: LD_ADDR_VAR 0 4
41997: PUSH
41998: LD_INT 2
42000: ST_TO_ADDR
// break ;
42001: GO 42005
// end ;
42003: GO 41976
42005: POP
42006: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42007: LD_VAR 0 1
42011: PPUSH
42012: LD_VAR 0 2
42016: PPUSH
42017: LD_VAR 0 3
42021: PPUSH
42022: LD_VAR 0 4
42026: PPUSH
42027: LD_VAR 0 5
42031: PPUSH
42032: CALL_OW 448
42036: IFFALSE 42071
// begin result := [ chassis , engine , control , weapon ] ;
42038: LD_ADDR_VAR 0 6
42042: PUSH
42043: LD_VAR 0 2
42047: PUSH
42048: LD_VAR 0 3
42052: PUSH
42053: LD_VAR 0 4
42057: PUSH
42058: LD_VAR 0 5
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: ST_TO_ADDR
// exit ;
42069: GO 42483
// end ; _chassis := AvailableChassisList ( factory ) ;
42071: LD_ADDR_VAR 0 9
42075: PUSH
42076: LD_VAR 0 1
42080: PPUSH
42081: CALL_OW 475
42085: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42086: LD_ADDR_VAR 0 11
42090: PUSH
42091: LD_VAR 0 1
42095: PPUSH
42096: CALL_OW 476
42100: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42101: LD_ADDR_VAR 0 12
42105: PUSH
42106: LD_VAR 0 1
42110: PPUSH
42111: CALL_OW 477
42115: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42116: LD_ADDR_VAR 0 10
42120: PUSH
42121: LD_VAR 0 1
42125: PPUSH
42126: CALL_OW 478
42130: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42131: LD_VAR 0 9
42135: NOT
42136: PUSH
42137: LD_VAR 0 11
42141: NOT
42142: OR
42143: PUSH
42144: LD_VAR 0 12
42148: NOT
42149: OR
42150: PUSH
42151: LD_VAR 0 10
42155: NOT
42156: OR
42157: IFFALSE 42192
// begin result := [ chassis , engine , control , weapon ] ;
42159: LD_ADDR_VAR 0 6
42163: PUSH
42164: LD_VAR 0 2
42168: PUSH
42169: LD_VAR 0 3
42173: PUSH
42174: LD_VAR 0 4
42178: PUSH
42179: LD_VAR 0 5
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: ST_TO_ADDR
// exit ;
42190: GO 42483
// end ; if not chassis in _chassis then
42192: LD_VAR 0 2
42196: PUSH
42197: LD_VAR 0 9
42201: IN
42202: NOT
42203: IFFALSE 42229
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42205: LD_ADDR_VAR 0 2
42209: PUSH
42210: LD_VAR 0 9
42214: PUSH
42215: LD_INT 1
42217: PPUSH
42218: LD_VAR 0 9
42222: PPUSH
42223: CALL_OW 12
42227: ARRAY
42228: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42229: LD_VAR 0 2
42233: PPUSH
42234: LD_VAR 0 3
42238: PPUSH
42239: CALL 42488 0 2
42243: NOT
42244: IFFALSE 42303
// repeat engine := _engine [ 1 ] ;
42246: LD_ADDR_VAR 0 3
42250: PUSH
42251: LD_VAR 0 11
42255: PUSH
42256: LD_INT 1
42258: ARRAY
42259: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42260: LD_ADDR_VAR 0 11
42264: PUSH
42265: LD_VAR 0 11
42269: PPUSH
42270: LD_INT 1
42272: PPUSH
42273: CALL_OW 3
42277: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42278: LD_VAR 0 2
42282: PPUSH
42283: LD_VAR 0 3
42287: PPUSH
42288: CALL 42488 0 2
42292: PUSH
42293: LD_VAR 0 11
42297: PUSH
42298: EMPTY
42299: EQUAL
42300: OR
42301: IFFALSE 42246
// if not control in _control then
42303: LD_VAR 0 4
42307: PUSH
42308: LD_VAR 0 12
42312: IN
42313: NOT
42314: IFFALSE 42340
// control := _control [ rand ( 1 , _control ) ] ;
42316: LD_ADDR_VAR 0 4
42320: PUSH
42321: LD_VAR 0 12
42325: PUSH
42326: LD_INT 1
42328: PPUSH
42329: LD_VAR 0 12
42333: PPUSH
42334: CALL_OW 12
42338: ARRAY
42339: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42340: LD_VAR 0 2
42344: PPUSH
42345: LD_VAR 0 5
42349: PPUSH
42350: CALL 42708 0 2
42354: NOT
42355: IFFALSE 42414
// repeat weapon := _weapon [ 1 ] ;
42357: LD_ADDR_VAR 0 5
42361: PUSH
42362: LD_VAR 0 10
42366: PUSH
42367: LD_INT 1
42369: ARRAY
42370: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42371: LD_ADDR_VAR 0 10
42375: PUSH
42376: LD_VAR 0 10
42380: PPUSH
42381: LD_INT 1
42383: PPUSH
42384: CALL_OW 3
42388: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42389: LD_VAR 0 2
42393: PPUSH
42394: LD_VAR 0 5
42398: PPUSH
42399: CALL 42708 0 2
42403: PUSH
42404: LD_VAR 0 10
42408: PUSH
42409: EMPTY
42410: EQUAL
42411: OR
42412: IFFALSE 42357
// result := [ ] ;
42414: LD_ADDR_VAR 0 6
42418: PUSH
42419: EMPTY
42420: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42421: LD_VAR 0 1
42425: PPUSH
42426: LD_VAR 0 2
42430: PPUSH
42431: LD_VAR 0 3
42435: PPUSH
42436: LD_VAR 0 4
42440: PPUSH
42441: LD_VAR 0 5
42445: PPUSH
42446: CALL_OW 448
42450: IFFALSE 42483
// result := [ chassis , engine , control , weapon ] ;
42452: LD_ADDR_VAR 0 6
42456: PUSH
42457: LD_VAR 0 2
42461: PUSH
42462: LD_VAR 0 3
42466: PUSH
42467: LD_VAR 0 4
42471: PUSH
42472: LD_VAR 0 5
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: ST_TO_ADDR
// end ;
42483: LD_VAR 0 6
42487: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42488: LD_INT 0
42490: PPUSH
// if not chassis or not engine then
42491: LD_VAR 0 1
42495: NOT
42496: PUSH
42497: LD_VAR 0 2
42501: NOT
42502: OR
42503: IFFALSE 42507
// exit ;
42505: GO 42703
// case engine of engine_solar :
42507: LD_VAR 0 2
42511: PUSH
42512: LD_INT 2
42514: DOUBLE
42515: EQUAL
42516: IFTRUE 42520
42518: GO 42558
42520: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42521: LD_ADDR_VAR 0 3
42525: PUSH
42526: LD_INT 11
42528: PUSH
42529: LD_INT 12
42531: PUSH
42532: LD_INT 13
42534: PUSH
42535: LD_INT 14
42537: PUSH
42538: LD_INT 1
42540: PUSH
42541: LD_INT 2
42543: PUSH
42544: LD_INT 3
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: ST_TO_ADDR
42556: GO 42687
42558: LD_INT 1
42560: DOUBLE
42561: EQUAL
42562: IFTRUE 42566
42564: GO 42628
42566: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42567: LD_ADDR_VAR 0 3
42571: PUSH
42572: LD_INT 11
42574: PUSH
42575: LD_INT 12
42577: PUSH
42578: LD_INT 13
42580: PUSH
42581: LD_INT 14
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: LD_INT 2
42589: PUSH
42590: LD_INT 3
42592: PUSH
42593: LD_INT 4
42595: PUSH
42596: LD_INT 5
42598: PUSH
42599: LD_INT 21
42601: PUSH
42602: LD_INT 23
42604: PUSH
42605: LD_INT 22
42607: PUSH
42608: LD_INT 24
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: ST_TO_ADDR
42626: GO 42687
42628: LD_INT 3
42630: DOUBLE
42631: EQUAL
42632: IFTRUE 42636
42634: GO 42686
42636: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42637: LD_ADDR_VAR 0 3
42641: PUSH
42642: LD_INT 13
42644: PUSH
42645: LD_INT 14
42647: PUSH
42648: LD_INT 2
42650: PUSH
42651: LD_INT 3
42653: PUSH
42654: LD_INT 4
42656: PUSH
42657: LD_INT 5
42659: PUSH
42660: LD_INT 21
42662: PUSH
42663: LD_INT 22
42665: PUSH
42666: LD_INT 23
42668: PUSH
42669: LD_INT 24
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: ST_TO_ADDR
42684: GO 42687
42686: POP
// result := ( chassis in result ) ;
42687: LD_ADDR_VAR 0 3
42691: PUSH
42692: LD_VAR 0 1
42696: PUSH
42697: LD_VAR 0 3
42701: IN
42702: ST_TO_ADDR
// end ;
42703: LD_VAR 0 3
42707: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42708: LD_INT 0
42710: PPUSH
// if not chassis or not weapon then
42711: LD_VAR 0 1
42715: NOT
42716: PUSH
42717: LD_VAR 0 2
42721: NOT
42722: OR
42723: IFFALSE 42727
// exit ;
42725: GO 43787
// case weapon of us_machine_gun :
42727: LD_VAR 0 2
42731: PUSH
42732: LD_INT 2
42734: DOUBLE
42735: EQUAL
42736: IFTRUE 42740
42738: GO 42770
42740: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42741: LD_ADDR_VAR 0 3
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: LD_INT 2
42751: PUSH
42752: LD_INT 3
42754: PUSH
42755: LD_INT 4
42757: PUSH
42758: LD_INT 5
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: ST_TO_ADDR
42768: GO 43771
42770: LD_INT 3
42772: DOUBLE
42773: EQUAL
42774: IFTRUE 42778
42776: GO 42808
42778: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42779: LD_ADDR_VAR 0 3
42783: PUSH
42784: LD_INT 1
42786: PUSH
42787: LD_INT 2
42789: PUSH
42790: LD_INT 3
42792: PUSH
42793: LD_INT 4
42795: PUSH
42796: LD_INT 5
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: ST_TO_ADDR
42806: GO 43771
42808: LD_INT 11
42810: DOUBLE
42811: EQUAL
42812: IFTRUE 42816
42814: GO 42846
42816: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42817: LD_ADDR_VAR 0 3
42821: PUSH
42822: LD_INT 1
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: LD_INT 3
42830: PUSH
42831: LD_INT 4
42833: PUSH
42834: LD_INT 5
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: ST_TO_ADDR
42844: GO 43771
42846: LD_INT 4
42848: DOUBLE
42849: EQUAL
42850: IFTRUE 42854
42852: GO 42880
42854: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42855: LD_ADDR_VAR 0 3
42859: PUSH
42860: LD_INT 2
42862: PUSH
42863: LD_INT 3
42865: PUSH
42866: LD_INT 4
42868: PUSH
42869: LD_INT 5
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: ST_TO_ADDR
42878: GO 43771
42880: LD_INT 5
42882: DOUBLE
42883: EQUAL
42884: IFTRUE 42888
42886: GO 42914
42888: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42889: LD_ADDR_VAR 0 3
42893: PUSH
42894: LD_INT 2
42896: PUSH
42897: LD_INT 3
42899: PUSH
42900: LD_INT 4
42902: PUSH
42903: LD_INT 5
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: ST_TO_ADDR
42912: GO 43771
42914: LD_INT 9
42916: DOUBLE
42917: EQUAL
42918: IFTRUE 42922
42920: GO 42948
42922: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42923: LD_ADDR_VAR 0 3
42927: PUSH
42928: LD_INT 2
42930: PUSH
42931: LD_INT 3
42933: PUSH
42934: LD_INT 4
42936: PUSH
42937: LD_INT 5
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: ST_TO_ADDR
42946: GO 43771
42948: LD_INT 7
42950: DOUBLE
42951: EQUAL
42952: IFTRUE 42956
42954: GO 42982
42956: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42957: LD_ADDR_VAR 0 3
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: LD_INT 3
42967: PUSH
42968: LD_INT 4
42970: PUSH
42971: LD_INT 5
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: ST_TO_ADDR
42980: GO 43771
42982: LD_INT 12
42984: DOUBLE
42985: EQUAL
42986: IFTRUE 42990
42988: GO 43016
42990: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42991: LD_ADDR_VAR 0 3
42995: PUSH
42996: LD_INT 2
42998: PUSH
42999: LD_INT 3
43001: PUSH
43002: LD_INT 4
43004: PUSH
43005: LD_INT 5
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: ST_TO_ADDR
43014: GO 43771
43016: LD_INT 13
43018: DOUBLE
43019: EQUAL
43020: IFTRUE 43024
43022: GO 43050
43024: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43025: LD_ADDR_VAR 0 3
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: LD_INT 3
43035: PUSH
43036: LD_INT 4
43038: PUSH
43039: LD_INT 5
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: ST_TO_ADDR
43048: GO 43771
43050: LD_INT 14
43052: DOUBLE
43053: EQUAL
43054: IFTRUE 43058
43056: GO 43076
43058: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43059: LD_ADDR_VAR 0 3
43063: PUSH
43064: LD_INT 4
43066: PUSH
43067: LD_INT 5
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: ST_TO_ADDR
43074: GO 43771
43076: LD_INT 6
43078: DOUBLE
43079: EQUAL
43080: IFTRUE 43084
43082: GO 43102
43084: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43085: LD_ADDR_VAR 0 3
43089: PUSH
43090: LD_INT 4
43092: PUSH
43093: LD_INT 5
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: ST_TO_ADDR
43100: GO 43771
43102: LD_INT 10
43104: DOUBLE
43105: EQUAL
43106: IFTRUE 43110
43108: GO 43128
43110: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43111: LD_ADDR_VAR 0 3
43115: PUSH
43116: LD_INT 4
43118: PUSH
43119: LD_INT 5
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: ST_TO_ADDR
43126: GO 43771
43128: LD_INT 22
43130: DOUBLE
43131: EQUAL
43132: IFTRUE 43136
43134: GO 43162
43136: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43137: LD_ADDR_VAR 0 3
43141: PUSH
43142: LD_INT 11
43144: PUSH
43145: LD_INT 12
43147: PUSH
43148: LD_INT 13
43150: PUSH
43151: LD_INT 14
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: ST_TO_ADDR
43160: GO 43771
43162: LD_INT 23
43164: DOUBLE
43165: EQUAL
43166: IFTRUE 43170
43168: GO 43196
43170: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43171: LD_ADDR_VAR 0 3
43175: PUSH
43176: LD_INT 11
43178: PUSH
43179: LD_INT 12
43181: PUSH
43182: LD_INT 13
43184: PUSH
43185: LD_INT 14
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: ST_TO_ADDR
43194: GO 43771
43196: LD_INT 24
43198: DOUBLE
43199: EQUAL
43200: IFTRUE 43204
43202: GO 43230
43204: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43205: LD_ADDR_VAR 0 3
43209: PUSH
43210: LD_INT 11
43212: PUSH
43213: LD_INT 12
43215: PUSH
43216: LD_INT 13
43218: PUSH
43219: LD_INT 14
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: ST_TO_ADDR
43228: GO 43771
43230: LD_INT 30
43232: DOUBLE
43233: EQUAL
43234: IFTRUE 43238
43236: GO 43264
43238: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43239: LD_ADDR_VAR 0 3
43243: PUSH
43244: LD_INT 11
43246: PUSH
43247: LD_INT 12
43249: PUSH
43250: LD_INT 13
43252: PUSH
43253: LD_INT 14
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: ST_TO_ADDR
43262: GO 43771
43264: LD_INT 25
43266: DOUBLE
43267: EQUAL
43268: IFTRUE 43272
43270: GO 43290
43272: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43273: LD_ADDR_VAR 0 3
43277: PUSH
43278: LD_INT 13
43280: PUSH
43281: LD_INT 14
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: ST_TO_ADDR
43288: GO 43771
43290: LD_INT 27
43292: DOUBLE
43293: EQUAL
43294: IFTRUE 43298
43296: GO 43316
43298: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43299: LD_ADDR_VAR 0 3
43303: PUSH
43304: LD_INT 13
43306: PUSH
43307: LD_INT 14
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: ST_TO_ADDR
43314: GO 43771
43316: LD_INT 92
43318: DOUBLE
43319: EQUAL
43320: IFTRUE 43324
43322: GO 43350
43324: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43325: LD_ADDR_VAR 0 3
43329: PUSH
43330: LD_INT 11
43332: PUSH
43333: LD_INT 12
43335: PUSH
43336: LD_INT 13
43338: PUSH
43339: LD_INT 14
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: ST_TO_ADDR
43348: GO 43771
43350: LD_INT 28
43352: DOUBLE
43353: EQUAL
43354: IFTRUE 43358
43356: GO 43376
43358: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43359: LD_ADDR_VAR 0 3
43363: PUSH
43364: LD_INT 13
43366: PUSH
43367: LD_INT 14
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: ST_TO_ADDR
43374: GO 43771
43376: LD_INT 29
43378: DOUBLE
43379: EQUAL
43380: IFTRUE 43384
43382: GO 43402
43384: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43385: LD_ADDR_VAR 0 3
43389: PUSH
43390: LD_INT 13
43392: PUSH
43393: LD_INT 14
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: ST_TO_ADDR
43400: GO 43771
43402: LD_INT 31
43404: DOUBLE
43405: EQUAL
43406: IFTRUE 43410
43408: GO 43428
43410: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43411: LD_ADDR_VAR 0 3
43415: PUSH
43416: LD_INT 13
43418: PUSH
43419: LD_INT 14
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: ST_TO_ADDR
43426: GO 43771
43428: LD_INT 26
43430: DOUBLE
43431: EQUAL
43432: IFTRUE 43436
43434: GO 43454
43436: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43437: LD_ADDR_VAR 0 3
43441: PUSH
43442: LD_INT 13
43444: PUSH
43445: LD_INT 14
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: ST_TO_ADDR
43452: GO 43771
43454: LD_INT 42
43456: DOUBLE
43457: EQUAL
43458: IFTRUE 43462
43460: GO 43488
43462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43463: LD_ADDR_VAR 0 3
43467: PUSH
43468: LD_INT 21
43470: PUSH
43471: LD_INT 22
43473: PUSH
43474: LD_INT 23
43476: PUSH
43477: LD_INT 24
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: ST_TO_ADDR
43486: GO 43771
43488: LD_INT 43
43490: DOUBLE
43491: EQUAL
43492: IFTRUE 43496
43494: GO 43522
43496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43497: LD_ADDR_VAR 0 3
43501: PUSH
43502: LD_INT 21
43504: PUSH
43505: LD_INT 22
43507: PUSH
43508: LD_INT 23
43510: PUSH
43511: LD_INT 24
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: ST_TO_ADDR
43520: GO 43771
43522: LD_INT 44
43524: DOUBLE
43525: EQUAL
43526: IFTRUE 43530
43528: GO 43556
43530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43531: LD_ADDR_VAR 0 3
43535: PUSH
43536: LD_INT 21
43538: PUSH
43539: LD_INT 22
43541: PUSH
43542: LD_INT 23
43544: PUSH
43545: LD_INT 24
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: ST_TO_ADDR
43554: GO 43771
43556: LD_INT 45
43558: DOUBLE
43559: EQUAL
43560: IFTRUE 43564
43562: GO 43590
43564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43565: LD_ADDR_VAR 0 3
43569: PUSH
43570: LD_INT 21
43572: PUSH
43573: LD_INT 22
43575: PUSH
43576: LD_INT 23
43578: PUSH
43579: LD_INT 24
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: ST_TO_ADDR
43588: GO 43771
43590: LD_INT 49
43592: DOUBLE
43593: EQUAL
43594: IFTRUE 43598
43596: GO 43624
43598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43599: LD_ADDR_VAR 0 3
43603: PUSH
43604: LD_INT 21
43606: PUSH
43607: LD_INT 22
43609: PUSH
43610: LD_INT 23
43612: PUSH
43613: LD_INT 24
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: ST_TO_ADDR
43622: GO 43771
43624: LD_INT 51
43626: DOUBLE
43627: EQUAL
43628: IFTRUE 43632
43630: GO 43658
43632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43633: LD_ADDR_VAR 0 3
43637: PUSH
43638: LD_INT 21
43640: PUSH
43641: LD_INT 22
43643: PUSH
43644: LD_INT 23
43646: PUSH
43647: LD_INT 24
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: ST_TO_ADDR
43656: GO 43771
43658: LD_INT 52
43660: DOUBLE
43661: EQUAL
43662: IFTRUE 43666
43664: GO 43692
43666: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43667: LD_ADDR_VAR 0 3
43671: PUSH
43672: LD_INT 21
43674: PUSH
43675: LD_INT 22
43677: PUSH
43678: LD_INT 23
43680: PUSH
43681: LD_INT 24
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: ST_TO_ADDR
43690: GO 43771
43692: LD_INT 53
43694: DOUBLE
43695: EQUAL
43696: IFTRUE 43700
43698: GO 43718
43700: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43701: LD_ADDR_VAR 0 3
43705: PUSH
43706: LD_INT 23
43708: PUSH
43709: LD_INT 24
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: ST_TO_ADDR
43716: GO 43771
43718: LD_INT 46
43720: DOUBLE
43721: EQUAL
43722: IFTRUE 43726
43724: GO 43744
43726: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43727: LD_ADDR_VAR 0 3
43731: PUSH
43732: LD_INT 23
43734: PUSH
43735: LD_INT 24
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: ST_TO_ADDR
43742: GO 43771
43744: LD_INT 47
43746: DOUBLE
43747: EQUAL
43748: IFTRUE 43752
43750: GO 43770
43752: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43753: LD_ADDR_VAR 0 3
43757: PUSH
43758: LD_INT 23
43760: PUSH
43761: LD_INT 24
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: ST_TO_ADDR
43768: GO 43771
43770: POP
// result := ( chassis in result ) ;
43771: LD_ADDR_VAR 0 3
43775: PUSH
43776: LD_VAR 0 1
43780: PUSH
43781: LD_VAR 0 3
43785: IN
43786: ST_TO_ADDR
// end ;
43787: LD_VAR 0 3
43791: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43792: LD_INT 0
43794: PPUSH
43795: PPUSH
43796: PPUSH
43797: PPUSH
43798: PPUSH
43799: PPUSH
43800: PPUSH
// result := array ;
43801: LD_ADDR_VAR 0 5
43805: PUSH
43806: LD_VAR 0 1
43810: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43811: LD_VAR 0 1
43815: NOT
43816: PUSH
43817: LD_VAR 0 2
43821: NOT
43822: OR
43823: PUSH
43824: LD_VAR 0 3
43828: NOT
43829: OR
43830: PUSH
43831: LD_VAR 0 2
43835: PUSH
43836: LD_VAR 0 1
43840: GREATER
43841: OR
43842: PUSH
43843: LD_VAR 0 3
43847: PUSH
43848: LD_VAR 0 1
43852: GREATER
43853: OR
43854: IFFALSE 43858
// exit ;
43856: GO 44154
// if direction then
43858: LD_VAR 0 4
43862: IFFALSE 43926
// begin d := 1 ;
43864: LD_ADDR_VAR 0 9
43868: PUSH
43869: LD_INT 1
43871: ST_TO_ADDR
// if i_from > i_to then
43872: LD_VAR 0 2
43876: PUSH
43877: LD_VAR 0 3
43881: GREATER
43882: IFFALSE 43908
// length := ( array - i_from ) + i_to else
43884: LD_ADDR_VAR 0 11
43888: PUSH
43889: LD_VAR 0 1
43893: PUSH
43894: LD_VAR 0 2
43898: MINUS
43899: PUSH
43900: LD_VAR 0 3
43904: PLUS
43905: ST_TO_ADDR
43906: GO 43924
// length := i_to - i_from ;
43908: LD_ADDR_VAR 0 11
43912: PUSH
43913: LD_VAR 0 3
43917: PUSH
43918: LD_VAR 0 2
43922: MINUS
43923: ST_TO_ADDR
// end else
43924: GO 43987
// begin d := - 1 ;
43926: LD_ADDR_VAR 0 9
43930: PUSH
43931: LD_INT 1
43933: NEG
43934: ST_TO_ADDR
// if i_from > i_to then
43935: LD_VAR 0 2
43939: PUSH
43940: LD_VAR 0 3
43944: GREATER
43945: IFFALSE 43965
// length := i_from - i_to else
43947: LD_ADDR_VAR 0 11
43951: PUSH
43952: LD_VAR 0 2
43956: PUSH
43957: LD_VAR 0 3
43961: MINUS
43962: ST_TO_ADDR
43963: GO 43987
// length := ( array - i_to ) + i_from ;
43965: LD_ADDR_VAR 0 11
43969: PUSH
43970: LD_VAR 0 1
43974: PUSH
43975: LD_VAR 0 3
43979: MINUS
43980: PUSH
43981: LD_VAR 0 2
43985: PLUS
43986: ST_TO_ADDR
// end ; if not length then
43987: LD_VAR 0 11
43991: NOT
43992: IFFALSE 43996
// exit ;
43994: GO 44154
// tmp := array ;
43996: LD_ADDR_VAR 0 10
44000: PUSH
44001: LD_VAR 0 1
44005: ST_TO_ADDR
// for i = 1 to length do
44006: LD_ADDR_VAR 0 6
44010: PUSH
44011: DOUBLE
44012: LD_INT 1
44014: DEC
44015: ST_TO_ADDR
44016: LD_VAR 0 11
44020: PUSH
44021: FOR_TO
44022: IFFALSE 44142
// begin for j = 1 to array do
44024: LD_ADDR_VAR 0 7
44028: PUSH
44029: DOUBLE
44030: LD_INT 1
44032: DEC
44033: ST_TO_ADDR
44034: LD_VAR 0 1
44038: PUSH
44039: FOR_TO
44040: IFFALSE 44128
// begin k := j + d ;
44042: LD_ADDR_VAR 0 8
44046: PUSH
44047: LD_VAR 0 7
44051: PUSH
44052: LD_VAR 0 9
44056: PLUS
44057: ST_TO_ADDR
// if k > array then
44058: LD_VAR 0 8
44062: PUSH
44063: LD_VAR 0 1
44067: GREATER
44068: IFFALSE 44078
// k := 1 ;
44070: LD_ADDR_VAR 0 8
44074: PUSH
44075: LD_INT 1
44077: ST_TO_ADDR
// if not k then
44078: LD_VAR 0 8
44082: NOT
44083: IFFALSE 44095
// k := array ;
44085: LD_ADDR_VAR 0 8
44089: PUSH
44090: LD_VAR 0 1
44094: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44095: LD_ADDR_VAR 0 10
44099: PUSH
44100: LD_VAR 0 10
44104: PPUSH
44105: LD_VAR 0 8
44109: PPUSH
44110: LD_VAR 0 1
44114: PUSH
44115: LD_VAR 0 7
44119: ARRAY
44120: PPUSH
44121: CALL_OW 1
44125: ST_TO_ADDR
// end ;
44126: GO 44039
44128: POP
44129: POP
// array := tmp ;
44130: LD_ADDR_VAR 0 1
44134: PUSH
44135: LD_VAR 0 10
44139: ST_TO_ADDR
// end ;
44140: GO 44021
44142: POP
44143: POP
// result := array ;
44144: LD_ADDR_VAR 0 5
44148: PUSH
44149: LD_VAR 0 1
44153: ST_TO_ADDR
// end ;
44154: LD_VAR 0 5
44158: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44159: LD_INT 0
44161: PPUSH
44162: PPUSH
// result := 0 ;
44163: LD_ADDR_VAR 0 3
44167: PUSH
44168: LD_INT 0
44170: ST_TO_ADDR
// if not array or not value in array then
44171: LD_VAR 0 1
44175: NOT
44176: PUSH
44177: LD_VAR 0 2
44181: PUSH
44182: LD_VAR 0 1
44186: IN
44187: NOT
44188: OR
44189: IFFALSE 44193
// exit ;
44191: GO 44247
// for i = 1 to array do
44193: LD_ADDR_VAR 0 4
44197: PUSH
44198: DOUBLE
44199: LD_INT 1
44201: DEC
44202: ST_TO_ADDR
44203: LD_VAR 0 1
44207: PUSH
44208: FOR_TO
44209: IFFALSE 44245
// if value = array [ i ] then
44211: LD_VAR 0 2
44215: PUSH
44216: LD_VAR 0 1
44220: PUSH
44221: LD_VAR 0 4
44225: ARRAY
44226: EQUAL
44227: IFFALSE 44243
// begin result := i ;
44229: LD_ADDR_VAR 0 3
44233: PUSH
44234: LD_VAR 0 4
44238: ST_TO_ADDR
// exit ;
44239: POP
44240: POP
44241: GO 44247
// end ;
44243: GO 44208
44245: POP
44246: POP
// end ;
44247: LD_VAR 0 3
44251: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44252: LD_INT 0
44254: PPUSH
// vc_chassis := chassis ;
44255: LD_ADDR_OWVAR 37
44259: PUSH
44260: LD_VAR 0 1
44264: ST_TO_ADDR
// vc_engine := engine ;
44265: LD_ADDR_OWVAR 39
44269: PUSH
44270: LD_VAR 0 2
44274: ST_TO_ADDR
// vc_control := control ;
44275: LD_ADDR_OWVAR 38
44279: PUSH
44280: LD_VAR 0 3
44284: ST_TO_ADDR
// vc_weapon := weapon ;
44285: LD_ADDR_OWVAR 40
44289: PUSH
44290: LD_VAR 0 4
44294: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44295: LD_ADDR_OWVAR 41
44299: PUSH
44300: LD_VAR 0 5
44304: ST_TO_ADDR
// end ;
44305: LD_VAR 0 6
44309: RET
// export function WantPlant ( unit ) ; var task ; begin
44310: LD_INT 0
44312: PPUSH
44313: PPUSH
// result := false ;
44314: LD_ADDR_VAR 0 2
44318: PUSH
44319: LD_INT 0
44321: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44322: LD_ADDR_VAR 0 3
44326: PUSH
44327: LD_VAR 0 1
44331: PPUSH
44332: CALL_OW 437
44336: ST_TO_ADDR
// if task then
44337: LD_VAR 0 3
44341: IFFALSE 44369
// if task [ 1 ] [ 1 ] = p then
44343: LD_VAR 0 3
44347: PUSH
44348: LD_INT 1
44350: ARRAY
44351: PUSH
44352: LD_INT 1
44354: ARRAY
44355: PUSH
44356: LD_STRING p
44358: EQUAL
44359: IFFALSE 44369
// result := true ;
44361: LD_ADDR_VAR 0 2
44365: PUSH
44366: LD_INT 1
44368: ST_TO_ADDR
// end ;
44369: LD_VAR 0 2
44373: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44374: LD_INT 0
44376: PPUSH
44377: PPUSH
44378: PPUSH
44379: PPUSH
// if pos < 1 then
44380: LD_VAR 0 2
44384: PUSH
44385: LD_INT 1
44387: LESS
44388: IFFALSE 44392
// exit ;
44390: GO 44695
// if pos = 1 then
44392: LD_VAR 0 2
44396: PUSH
44397: LD_INT 1
44399: EQUAL
44400: IFFALSE 44433
// result := Replace ( arr , pos [ 1 ] , value ) else
44402: LD_ADDR_VAR 0 4
44406: PUSH
44407: LD_VAR 0 1
44411: PPUSH
44412: LD_VAR 0 2
44416: PUSH
44417: LD_INT 1
44419: ARRAY
44420: PPUSH
44421: LD_VAR 0 3
44425: PPUSH
44426: CALL_OW 1
44430: ST_TO_ADDR
44431: GO 44695
// begin tmp := arr ;
44433: LD_ADDR_VAR 0 6
44437: PUSH
44438: LD_VAR 0 1
44442: ST_TO_ADDR
// s_arr := [ tmp ] ;
44443: LD_ADDR_VAR 0 7
44447: PUSH
44448: LD_VAR 0 6
44452: PUSH
44453: EMPTY
44454: LIST
44455: ST_TO_ADDR
// for i = 1 to pos - 1 do
44456: LD_ADDR_VAR 0 5
44460: PUSH
44461: DOUBLE
44462: LD_INT 1
44464: DEC
44465: ST_TO_ADDR
44466: LD_VAR 0 2
44470: PUSH
44471: LD_INT 1
44473: MINUS
44474: PUSH
44475: FOR_TO
44476: IFFALSE 44521
// begin tmp := tmp [ pos [ i ] ] ;
44478: LD_ADDR_VAR 0 6
44482: PUSH
44483: LD_VAR 0 6
44487: PUSH
44488: LD_VAR 0 2
44492: PUSH
44493: LD_VAR 0 5
44497: ARRAY
44498: ARRAY
44499: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44500: LD_ADDR_VAR 0 7
44504: PUSH
44505: LD_VAR 0 7
44509: PUSH
44510: LD_VAR 0 6
44514: PUSH
44515: EMPTY
44516: LIST
44517: ADD
44518: ST_TO_ADDR
// end ;
44519: GO 44475
44521: POP
44522: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44523: LD_ADDR_VAR 0 6
44527: PUSH
44528: LD_VAR 0 6
44532: PPUSH
44533: LD_VAR 0 2
44537: PUSH
44538: LD_VAR 0 2
44542: ARRAY
44543: PPUSH
44544: LD_VAR 0 3
44548: PPUSH
44549: CALL_OW 1
44553: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44554: LD_ADDR_VAR 0 7
44558: PUSH
44559: LD_VAR 0 7
44563: PPUSH
44564: LD_VAR 0 7
44568: PPUSH
44569: LD_VAR 0 6
44573: PPUSH
44574: CALL_OW 1
44578: ST_TO_ADDR
// for i = s_arr downto 2 do
44579: LD_ADDR_VAR 0 5
44583: PUSH
44584: DOUBLE
44585: LD_VAR 0 7
44589: INC
44590: ST_TO_ADDR
44591: LD_INT 2
44593: PUSH
44594: FOR_DOWNTO
44595: IFFALSE 44679
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44597: LD_ADDR_VAR 0 6
44601: PUSH
44602: LD_VAR 0 7
44606: PUSH
44607: LD_VAR 0 5
44611: PUSH
44612: LD_INT 1
44614: MINUS
44615: ARRAY
44616: PPUSH
44617: LD_VAR 0 2
44621: PUSH
44622: LD_VAR 0 5
44626: PUSH
44627: LD_INT 1
44629: MINUS
44630: ARRAY
44631: PPUSH
44632: LD_VAR 0 7
44636: PUSH
44637: LD_VAR 0 5
44641: ARRAY
44642: PPUSH
44643: CALL_OW 1
44647: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44648: LD_ADDR_VAR 0 7
44652: PUSH
44653: LD_VAR 0 7
44657: PPUSH
44658: LD_VAR 0 5
44662: PUSH
44663: LD_INT 1
44665: MINUS
44666: PPUSH
44667: LD_VAR 0 6
44671: PPUSH
44672: CALL_OW 1
44676: ST_TO_ADDR
// end ;
44677: GO 44594
44679: POP
44680: POP
// result := s_arr [ 1 ] ;
44681: LD_ADDR_VAR 0 4
44685: PUSH
44686: LD_VAR 0 7
44690: PUSH
44691: LD_INT 1
44693: ARRAY
44694: ST_TO_ADDR
// end ; end ;
44695: LD_VAR 0 4
44699: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44700: LD_INT 0
44702: PPUSH
44703: PPUSH
// if not list then
44704: LD_VAR 0 1
44708: NOT
44709: IFFALSE 44713
// exit ;
44711: GO 44804
// i := list [ pos1 ] ;
44713: LD_ADDR_VAR 0 5
44717: PUSH
44718: LD_VAR 0 1
44722: PUSH
44723: LD_VAR 0 2
44727: ARRAY
44728: ST_TO_ADDR
// if not i then
44729: LD_VAR 0 5
44733: NOT
44734: IFFALSE 44738
// exit ;
44736: GO 44804
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44738: LD_ADDR_VAR 0 1
44742: PUSH
44743: LD_VAR 0 1
44747: PPUSH
44748: LD_VAR 0 2
44752: PPUSH
44753: LD_VAR 0 1
44757: PUSH
44758: LD_VAR 0 3
44762: ARRAY
44763: PPUSH
44764: CALL_OW 1
44768: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44769: LD_ADDR_VAR 0 1
44773: PUSH
44774: LD_VAR 0 1
44778: PPUSH
44779: LD_VAR 0 3
44783: PPUSH
44784: LD_VAR 0 5
44788: PPUSH
44789: CALL_OW 1
44793: ST_TO_ADDR
// result := list ;
44794: LD_ADDR_VAR 0 4
44798: PUSH
44799: LD_VAR 0 1
44803: ST_TO_ADDR
// end ;
44804: LD_VAR 0 4
44808: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44809: LD_INT 0
44811: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44812: LD_ADDR_VAR 0 5
44816: PUSH
44817: LD_VAR 0 1
44821: PPUSH
44822: CALL_OW 250
44826: PPUSH
44827: LD_VAR 0 1
44831: PPUSH
44832: CALL_OW 251
44836: PPUSH
44837: LD_VAR 0 2
44841: PPUSH
44842: LD_VAR 0 3
44846: PPUSH
44847: LD_VAR 0 4
44851: PPUSH
44852: CALL 44862 0 5
44856: ST_TO_ADDR
// end ;
44857: LD_VAR 0 5
44861: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44862: LD_INT 0
44864: PPUSH
44865: PPUSH
44866: PPUSH
44867: PPUSH
// if not list then
44868: LD_VAR 0 3
44872: NOT
44873: IFFALSE 44877
// exit ;
44875: GO 45265
// result := [ ] ;
44877: LD_ADDR_VAR 0 6
44881: PUSH
44882: EMPTY
44883: ST_TO_ADDR
// for i in list do
44884: LD_ADDR_VAR 0 7
44888: PUSH
44889: LD_VAR 0 3
44893: PUSH
44894: FOR_IN
44895: IFFALSE 45097
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44897: LD_ADDR_VAR 0 9
44901: PUSH
44902: LD_VAR 0 7
44906: PPUSH
44907: LD_VAR 0 1
44911: PPUSH
44912: LD_VAR 0 2
44916: PPUSH
44917: CALL_OW 297
44921: ST_TO_ADDR
// if not result then
44922: LD_VAR 0 6
44926: NOT
44927: IFFALSE 44953
// result := [ [ i , tmp ] ] else
44929: LD_ADDR_VAR 0 6
44933: PUSH
44934: LD_VAR 0 7
44938: PUSH
44939: LD_VAR 0 9
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: EMPTY
44949: LIST
44950: ST_TO_ADDR
44951: GO 45095
// begin if result [ result ] [ 2 ] < tmp then
44953: LD_VAR 0 6
44957: PUSH
44958: LD_VAR 0 6
44962: ARRAY
44963: PUSH
44964: LD_INT 2
44966: ARRAY
44967: PUSH
44968: LD_VAR 0 9
44972: LESS
44973: IFFALSE 45015
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44975: LD_ADDR_VAR 0 6
44979: PUSH
44980: LD_VAR 0 6
44984: PPUSH
44985: LD_VAR 0 6
44989: PUSH
44990: LD_INT 1
44992: PLUS
44993: PPUSH
44994: LD_VAR 0 7
44998: PUSH
44999: LD_VAR 0 9
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PPUSH
45008: CALL_OW 2
45012: ST_TO_ADDR
45013: GO 45095
// for j = 1 to result do
45015: LD_ADDR_VAR 0 8
45019: PUSH
45020: DOUBLE
45021: LD_INT 1
45023: DEC
45024: ST_TO_ADDR
45025: LD_VAR 0 6
45029: PUSH
45030: FOR_TO
45031: IFFALSE 45093
// begin if tmp < result [ j ] [ 2 ] then
45033: LD_VAR 0 9
45037: PUSH
45038: LD_VAR 0 6
45042: PUSH
45043: LD_VAR 0 8
45047: ARRAY
45048: PUSH
45049: LD_INT 2
45051: ARRAY
45052: LESS
45053: IFFALSE 45091
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45055: LD_ADDR_VAR 0 6
45059: PUSH
45060: LD_VAR 0 6
45064: PPUSH
45065: LD_VAR 0 8
45069: PPUSH
45070: LD_VAR 0 7
45074: PUSH
45075: LD_VAR 0 9
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PPUSH
45084: CALL_OW 2
45088: ST_TO_ADDR
// break ;
45089: GO 45093
// end ; end ;
45091: GO 45030
45093: POP
45094: POP
// end ; end ;
45095: GO 44894
45097: POP
45098: POP
// if result and not asc then
45099: LD_VAR 0 6
45103: PUSH
45104: LD_VAR 0 4
45108: NOT
45109: AND
45110: IFFALSE 45185
// begin tmp := result ;
45112: LD_ADDR_VAR 0 9
45116: PUSH
45117: LD_VAR 0 6
45121: ST_TO_ADDR
// for i = tmp downto 1 do
45122: LD_ADDR_VAR 0 7
45126: PUSH
45127: DOUBLE
45128: LD_VAR 0 9
45132: INC
45133: ST_TO_ADDR
45134: LD_INT 1
45136: PUSH
45137: FOR_DOWNTO
45138: IFFALSE 45183
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45140: LD_ADDR_VAR 0 6
45144: PUSH
45145: LD_VAR 0 6
45149: PPUSH
45150: LD_VAR 0 9
45154: PUSH
45155: LD_VAR 0 7
45159: MINUS
45160: PUSH
45161: LD_INT 1
45163: PLUS
45164: PPUSH
45165: LD_VAR 0 9
45169: PUSH
45170: LD_VAR 0 7
45174: ARRAY
45175: PPUSH
45176: CALL_OW 1
45180: ST_TO_ADDR
45181: GO 45137
45183: POP
45184: POP
// end ; tmp := [ ] ;
45185: LD_ADDR_VAR 0 9
45189: PUSH
45190: EMPTY
45191: ST_TO_ADDR
// if mode then
45192: LD_VAR 0 5
45196: IFFALSE 45265
// begin for i = 1 to result do
45198: LD_ADDR_VAR 0 7
45202: PUSH
45203: DOUBLE
45204: LD_INT 1
45206: DEC
45207: ST_TO_ADDR
45208: LD_VAR 0 6
45212: PUSH
45213: FOR_TO
45214: IFFALSE 45253
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45216: LD_ADDR_VAR 0 9
45220: PUSH
45221: LD_VAR 0 9
45225: PPUSH
45226: LD_VAR 0 7
45230: PPUSH
45231: LD_VAR 0 6
45235: PUSH
45236: LD_VAR 0 7
45240: ARRAY
45241: PUSH
45242: LD_INT 1
45244: ARRAY
45245: PPUSH
45246: CALL_OW 1
45250: ST_TO_ADDR
45251: GO 45213
45253: POP
45254: POP
// result := tmp ;
45255: LD_ADDR_VAR 0 6
45259: PUSH
45260: LD_VAR 0 9
45264: ST_TO_ADDR
// end ; end ;
45265: LD_VAR 0 6
45269: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45270: LD_INT 0
45272: PPUSH
45273: PPUSH
45274: PPUSH
45275: PPUSH
45276: PPUSH
45277: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45278: LD_ADDR_VAR 0 5
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: EMPTY
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: ST_TO_ADDR
// if not x or not y then
45300: LD_VAR 0 2
45304: NOT
45305: PUSH
45306: LD_VAR 0 3
45310: NOT
45311: OR
45312: IFFALSE 45316
// exit ;
45314: GO 46966
// if not range then
45316: LD_VAR 0 4
45320: NOT
45321: IFFALSE 45331
// range := 10 ;
45323: LD_ADDR_VAR 0 4
45327: PUSH
45328: LD_INT 10
45330: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45331: LD_ADDR_VAR 0 8
45335: PUSH
45336: LD_INT 81
45338: PUSH
45339: LD_VAR 0 1
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 92
45350: PUSH
45351: LD_VAR 0 2
45355: PUSH
45356: LD_VAR 0 3
45360: PUSH
45361: LD_VAR 0 4
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 3
45374: PUSH
45375: LD_INT 21
45377: PUSH
45378: LD_INT 3
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: LIST
45393: PPUSH
45394: CALL_OW 69
45398: ST_TO_ADDR
// if not tmp then
45399: LD_VAR 0 8
45403: NOT
45404: IFFALSE 45408
// exit ;
45406: GO 46966
// for i in tmp do
45408: LD_ADDR_VAR 0 6
45412: PUSH
45413: LD_VAR 0 8
45417: PUSH
45418: FOR_IN
45419: IFFALSE 46941
// begin points := [ 0 , 0 , 0 ] ;
45421: LD_ADDR_VAR 0 9
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: LIST
45439: ST_TO_ADDR
// bpoints := 1 ;
45440: LD_ADDR_VAR 0 10
45444: PUSH
45445: LD_INT 1
45447: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45448: LD_VAR 0 6
45452: PPUSH
45453: CALL_OW 247
45457: PUSH
45458: LD_INT 1
45460: DOUBLE
45461: EQUAL
45462: IFTRUE 45466
45464: GO 46044
45466: POP
// begin if GetClass ( i ) = 1 then
45467: LD_VAR 0 6
45471: PPUSH
45472: CALL_OW 257
45476: PUSH
45477: LD_INT 1
45479: EQUAL
45480: IFFALSE 45501
// points := [ 10 , 5 , 3 ] ;
45482: LD_ADDR_VAR 0 9
45486: PUSH
45487: LD_INT 10
45489: PUSH
45490: LD_INT 5
45492: PUSH
45493: LD_INT 3
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: LIST
45500: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45501: LD_VAR 0 6
45505: PPUSH
45506: CALL_OW 257
45510: PUSH
45511: LD_INT 2
45513: PUSH
45514: LD_INT 3
45516: PUSH
45517: LD_INT 4
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: LIST
45524: IN
45525: IFFALSE 45546
// points := [ 3 , 2 , 1 ] ;
45527: LD_ADDR_VAR 0 9
45531: PUSH
45532: LD_INT 3
45534: PUSH
45535: LD_INT 2
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: LIST
45545: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45546: LD_VAR 0 6
45550: PPUSH
45551: CALL_OW 257
45555: PUSH
45556: LD_INT 5
45558: EQUAL
45559: IFFALSE 45580
// points := [ 130 , 5 , 2 ] ;
45561: LD_ADDR_VAR 0 9
45565: PUSH
45566: LD_INT 130
45568: PUSH
45569: LD_INT 5
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: LIST
45579: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45580: LD_VAR 0 6
45584: PPUSH
45585: CALL_OW 257
45589: PUSH
45590: LD_INT 8
45592: EQUAL
45593: IFFALSE 45614
// points := [ 35 , 35 , 30 ] ;
45595: LD_ADDR_VAR 0 9
45599: PUSH
45600: LD_INT 35
45602: PUSH
45603: LD_INT 35
45605: PUSH
45606: LD_INT 30
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: LIST
45613: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45614: LD_VAR 0 6
45618: PPUSH
45619: CALL_OW 257
45623: PUSH
45624: LD_INT 9
45626: EQUAL
45627: IFFALSE 45648
// points := [ 20 , 55 , 40 ] ;
45629: LD_ADDR_VAR 0 9
45633: PUSH
45634: LD_INT 20
45636: PUSH
45637: LD_INT 55
45639: PUSH
45640: LD_INT 40
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: LIST
45647: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45648: LD_VAR 0 6
45652: PPUSH
45653: CALL_OW 257
45657: PUSH
45658: LD_INT 12
45660: PUSH
45661: LD_INT 16
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: IN
45668: IFFALSE 45689
// points := [ 5 , 3 , 2 ] ;
45670: LD_ADDR_VAR 0 9
45674: PUSH
45675: LD_INT 5
45677: PUSH
45678: LD_INT 3
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: LIST
45688: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45689: LD_VAR 0 6
45693: PPUSH
45694: CALL_OW 257
45698: PUSH
45699: LD_INT 17
45701: EQUAL
45702: IFFALSE 45723
// points := [ 100 , 50 , 75 ] ;
45704: LD_ADDR_VAR 0 9
45708: PUSH
45709: LD_INT 100
45711: PUSH
45712: LD_INT 50
45714: PUSH
45715: LD_INT 75
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: LIST
45722: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45723: LD_VAR 0 6
45727: PPUSH
45728: CALL_OW 257
45732: PUSH
45733: LD_INT 15
45735: EQUAL
45736: IFFALSE 45757
// points := [ 10 , 5 , 3 ] ;
45738: LD_ADDR_VAR 0 9
45742: PUSH
45743: LD_INT 10
45745: PUSH
45746: LD_INT 5
45748: PUSH
45749: LD_INT 3
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: LIST
45756: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45757: LD_VAR 0 6
45761: PPUSH
45762: CALL_OW 257
45766: PUSH
45767: LD_INT 14
45769: EQUAL
45770: IFFALSE 45791
// points := [ 10 , 0 , 0 ] ;
45772: LD_ADDR_VAR 0 9
45776: PUSH
45777: LD_INT 10
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: LIST
45790: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45791: LD_VAR 0 6
45795: PPUSH
45796: CALL_OW 257
45800: PUSH
45801: LD_INT 11
45803: EQUAL
45804: IFFALSE 45825
// points := [ 30 , 10 , 5 ] ;
45806: LD_ADDR_VAR 0 9
45810: PUSH
45811: LD_INT 30
45813: PUSH
45814: LD_INT 10
45816: PUSH
45817: LD_INT 5
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: LIST
45824: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45825: LD_VAR 0 1
45829: PPUSH
45830: LD_INT 5
45832: PPUSH
45833: CALL_OW 321
45837: PUSH
45838: LD_INT 2
45840: EQUAL
45841: IFFALSE 45858
// bpoints := bpoints * 1.8 ;
45843: LD_ADDR_VAR 0 10
45847: PUSH
45848: LD_VAR 0 10
45852: PUSH
45853: LD_REAL  1.80000000000000E+0000
45856: MUL
45857: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45858: LD_VAR 0 6
45862: PPUSH
45863: CALL_OW 257
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: LD_INT 2
45873: PUSH
45874: LD_INT 3
45876: PUSH
45877: LD_INT 4
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: IN
45886: PUSH
45887: LD_VAR 0 1
45891: PPUSH
45892: LD_INT 51
45894: PPUSH
45895: CALL_OW 321
45899: PUSH
45900: LD_INT 2
45902: EQUAL
45903: AND
45904: IFFALSE 45921
// bpoints := bpoints * 1.2 ;
45906: LD_ADDR_VAR 0 10
45910: PUSH
45911: LD_VAR 0 10
45915: PUSH
45916: LD_REAL  1.20000000000000E+0000
45919: MUL
45920: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45921: LD_VAR 0 6
45925: PPUSH
45926: CALL_OW 257
45930: PUSH
45931: LD_INT 5
45933: PUSH
45934: LD_INT 7
45936: PUSH
45937: LD_INT 9
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: LIST
45944: IN
45945: PUSH
45946: LD_VAR 0 1
45950: PPUSH
45951: LD_INT 52
45953: PPUSH
45954: CALL_OW 321
45958: PUSH
45959: LD_INT 2
45961: EQUAL
45962: AND
45963: IFFALSE 45980
// bpoints := bpoints * 1.5 ;
45965: LD_ADDR_VAR 0 10
45969: PUSH
45970: LD_VAR 0 10
45974: PUSH
45975: LD_REAL  1.50000000000000E+0000
45978: MUL
45979: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45980: LD_VAR 0 1
45984: PPUSH
45985: LD_INT 66
45987: PPUSH
45988: CALL_OW 321
45992: PUSH
45993: LD_INT 2
45995: EQUAL
45996: IFFALSE 46013
// bpoints := bpoints * 1.1 ;
45998: LD_ADDR_VAR 0 10
46002: PUSH
46003: LD_VAR 0 10
46007: PUSH
46008: LD_REAL  1.10000000000000E+0000
46011: MUL
46012: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46013: LD_ADDR_VAR 0 10
46017: PUSH
46018: LD_VAR 0 10
46022: PUSH
46023: LD_VAR 0 6
46027: PPUSH
46028: LD_INT 1
46030: PPUSH
46031: CALL_OW 259
46035: PUSH
46036: LD_REAL  1.15000000000000E+0000
46039: MUL
46040: MUL
46041: ST_TO_ADDR
// end ; unit_vehicle :
46042: GO 46870
46044: LD_INT 2
46046: DOUBLE
46047: EQUAL
46048: IFTRUE 46052
46050: GO 46858
46052: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46053: LD_VAR 0 6
46057: PPUSH
46058: CALL_OW 264
46062: PUSH
46063: LD_INT 2
46065: PUSH
46066: LD_INT 42
46068: PUSH
46069: LD_INT 24
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: LIST
46076: IN
46077: IFFALSE 46098
// points := [ 25 , 5 , 3 ] ;
46079: LD_ADDR_VAR 0 9
46083: PUSH
46084: LD_INT 25
46086: PUSH
46087: LD_INT 5
46089: PUSH
46090: LD_INT 3
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: LIST
46097: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46098: LD_VAR 0 6
46102: PPUSH
46103: CALL_OW 264
46107: PUSH
46108: LD_INT 4
46110: PUSH
46111: LD_INT 43
46113: PUSH
46114: LD_INT 25
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: LIST
46121: IN
46122: IFFALSE 46143
// points := [ 40 , 15 , 5 ] ;
46124: LD_ADDR_VAR 0 9
46128: PUSH
46129: LD_INT 40
46131: PUSH
46132: LD_INT 15
46134: PUSH
46135: LD_INT 5
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: LIST
46142: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46143: LD_VAR 0 6
46147: PPUSH
46148: CALL_OW 264
46152: PUSH
46153: LD_INT 3
46155: PUSH
46156: LD_INT 23
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: IN
46163: IFFALSE 46184
// points := [ 7 , 25 , 8 ] ;
46165: LD_ADDR_VAR 0 9
46169: PUSH
46170: LD_INT 7
46172: PUSH
46173: LD_INT 25
46175: PUSH
46176: LD_INT 8
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: LIST
46183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46184: LD_VAR 0 6
46188: PPUSH
46189: CALL_OW 264
46193: PUSH
46194: LD_INT 5
46196: PUSH
46197: LD_INT 27
46199: PUSH
46200: LD_INT 44
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: LIST
46207: IN
46208: IFFALSE 46229
// points := [ 14 , 50 , 16 ] ;
46210: LD_ADDR_VAR 0 9
46214: PUSH
46215: LD_INT 14
46217: PUSH
46218: LD_INT 50
46220: PUSH
46221: LD_INT 16
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: LIST
46228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46229: LD_VAR 0 6
46233: PPUSH
46234: CALL_OW 264
46238: PUSH
46239: LD_INT 6
46241: PUSH
46242: LD_INT 46
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: IN
46249: IFFALSE 46270
// points := [ 32 , 120 , 70 ] ;
46251: LD_ADDR_VAR 0 9
46255: PUSH
46256: LD_INT 32
46258: PUSH
46259: LD_INT 120
46261: PUSH
46262: LD_INT 70
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: LIST
46269: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46270: LD_VAR 0 6
46274: PPUSH
46275: CALL_OW 264
46279: PUSH
46280: LD_INT 7
46282: PUSH
46283: LD_INT 28
46285: PUSH
46286: LD_INT 45
46288: PUSH
46289: LD_INT 92
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: IN
46298: IFFALSE 46319
// points := [ 35 , 20 , 45 ] ;
46300: LD_ADDR_VAR 0 9
46304: PUSH
46305: LD_INT 35
46307: PUSH
46308: LD_INT 20
46310: PUSH
46311: LD_INT 45
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: LIST
46318: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46319: LD_VAR 0 6
46323: PPUSH
46324: CALL_OW 264
46328: PUSH
46329: LD_INT 47
46331: PUSH
46332: EMPTY
46333: LIST
46334: IN
46335: IFFALSE 46356
// points := [ 67 , 45 , 75 ] ;
46337: LD_ADDR_VAR 0 9
46341: PUSH
46342: LD_INT 67
46344: PUSH
46345: LD_INT 45
46347: PUSH
46348: LD_INT 75
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: LIST
46355: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46356: LD_VAR 0 6
46360: PPUSH
46361: CALL_OW 264
46365: PUSH
46366: LD_INT 26
46368: PUSH
46369: EMPTY
46370: LIST
46371: IN
46372: IFFALSE 46393
// points := [ 120 , 30 , 80 ] ;
46374: LD_ADDR_VAR 0 9
46378: PUSH
46379: LD_INT 120
46381: PUSH
46382: LD_INT 30
46384: PUSH
46385: LD_INT 80
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: LIST
46392: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46393: LD_VAR 0 6
46397: PPUSH
46398: CALL_OW 264
46402: PUSH
46403: LD_INT 22
46405: PUSH
46406: EMPTY
46407: LIST
46408: IN
46409: IFFALSE 46430
// points := [ 40 , 1 , 1 ] ;
46411: LD_ADDR_VAR 0 9
46415: PUSH
46416: LD_INT 40
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: LIST
46429: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46430: LD_VAR 0 6
46434: PPUSH
46435: CALL_OW 264
46439: PUSH
46440: LD_INT 29
46442: PUSH
46443: EMPTY
46444: LIST
46445: IN
46446: IFFALSE 46467
// points := [ 70 , 200 , 400 ] ;
46448: LD_ADDR_VAR 0 9
46452: PUSH
46453: LD_INT 70
46455: PUSH
46456: LD_INT 200
46458: PUSH
46459: LD_INT 400
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: LIST
46466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46467: LD_VAR 0 6
46471: PPUSH
46472: CALL_OW 264
46476: PUSH
46477: LD_INT 14
46479: PUSH
46480: LD_INT 53
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: IN
46487: IFFALSE 46508
// points := [ 40 , 10 , 20 ] ;
46489: LD_ADDR_VAR 0 9
46493: PUSH
46494: LD_INT 40
46496: PUSH
46497: LD_INT 10
46499: PUSH
46500: LD_INT 20
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: LIST
46507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46508: LD_VAR 0 6
46512: PPUSH
46513: CALL_OW 264
46517: PUSH
46518: LD_INT 9
46520: PUSH
46521: EMPTY
46522: LIST
46523: IN
46524: IFFALSE 46545
// points := [ 5 , 70 , 20 ] ;
46526: LD_ADDR_VAR 0 9
46530: PUSH
46531: LD_INT 5
46533: PUSH
46534: LD_INT 70
46536: PUSH
46537: LD_INT 20
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: LIST
46544: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46545: LD_VAR 0 6
46549: PPUSH
46550: CALL_OW 264
46554: PUSH
46555: LD_INT 10
46557: PUSH
46558: EMPTY
46559: LIST
46560: IN
46561: IFFALSE 46582
// points := [ 35 , 110 , 70 ] ;
46563: LD_ADDR_VAR 0 9
46567: PUSH
46568: LD_INT 35
46570: PUSH
46571: LD_INT 110
46573: PUSH
46574: LD_INT 70
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: LIST
46581: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46582: LD_VAR 0 6
46586: PPUSH
46587: CALL_OW 265
46591: PUSH
46592: LD_INT 25
46594: EQUAL
46595: IFFALSE 46616
// points := [ 80 , 65 , 100 ] ;
46597: LD_ADDR_VAR 0 9
46601: PUSH
46602: LD_INT 80
46604: PUSH
46605: LD_INT 65
46607: PUSH
46608: LD_INT 100
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: LIST
46615: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46616: LD_VAR 0 6
46620: PPUSH
46621: CALL_OW 263
46625: PUSH
46626: LD_INT 1
46628: EQUAL
46629: IFFALSE 46664
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46631: LD_ADDR_VAR 0 10
46635: PUSH
46636: LD_VAR 0 10
46640: PUSH
46641: LD_VAR 0 6
46645: PPUSH
46646: CALL_OW 311
46650: PPUSH
46651: LD_INT 3
46653: PPUSH
46654: CALL_OW 259
46658: PUSH
46659: LD_INT 4
46661: MUL
46662: MUL
46663: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46664: LD_VAR 0 6
46668: PPUSH
46669: CALL_OW 263
46673: PUSH
46674: LD_INT 2
46676: EQUAL
46677: IFFALSE 46728
// begin j := IsControledBy ( i ) ;
46679: LD_ADDR_VAR 0 7
46683: PUSH
46684: LD_VAR 0 6
46688: PPUSH
46689: CALL_OW 312
46693: ST_TO_ADDR
// if j then
46694: LD_VAR 0 7
46698: IFFALSE 46728
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46700: LD_ADDR_VAR 0 10
46704: PUSH
46705: LD_VAR 0 10
46709: PUSH
46710: LD_VAR 0 7
46714: PPUSH
46715: LD_INT 3
46717: PPUSH
46718: CALL_OW 259
46722: PUSH
46723: LD_INT 3
46725: MUL
46726: MUL
46727: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46728: LD_VAR 0 6
46732: PPUSH
46733: CALL_OW 264
46737: PUSH
46738: LD_INT 5
46740: PUSH
46741: LD_INT 6
46743: PUSH
46744: LD_INT 46
46746: PUSH
46747: LD_INT 44
46749: PUSH
46750: LD_INT 47
46752: PUSH
46753: LD_INT 45
46755: PUSH
46756: LD_INT 28
46758: PUSH
46759: LD_INT 7
46761: PUSH
46762: LD_INT 27
46764: PUSH
46765: LD_INT 29
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: IN
46780: PUSH
46781: LD_VAR 0 1
46785: PPUSH
46786: LD_INT 52
46788: PPUSH
46789: CALL_OW 321
46793: PUSH
46794: LD_INT 2
46796: EQUAL
46797: AND
46798: IFFALSE 46815
// bpoints := bpoints * 1.2 ;
46800: LD_ADDR_VAR 0 10
46804: PUSH
46805: LD_VAR 0 10
46809: PUSH
46810: LD_REAL  1.20000000000000E+0000
46813: MUL
46814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46815: LD_VAR 0 6
46819: PPUSH
46820: CALL_OW 264
46824: PUSH
46825: LD_INT 6
46827: PUSH
46828: LD_INT 46
46830: PUSH
46831: LD_INT 47
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: LIST
46838: IN
46839: IFFALSE 46856
// bpoints := bpoints * 1.2 ;
46841: LD_ADDR_VAR 0 10
46845: PUSH
46846: LD_VAR 0 10
46850: PUSH
46851: LD_REAL  1.20000000000000E+0000
46854: MUL
46855: ST_TO_ADDR
// end ; unit_building :
46856: GO 46870
46858: LD_INT 3
46860: DOUBLE
46861: EQUAL
46862: IFTRUE 46866
46864: GO 46869
46866: POP
// ; end ;
46867: GO 46870
46869: POP
// for j = 1 to 3 do
46870: LD_ADDR_VAR 0 7
46874: PUSH
46875: DOUBLE
46876: LD_INT 1
46878: DEC
46879: ST_TO_ADDR
46880: LD_INT 3
46882: PUSH
46883: FOR_TO
46884: IFFALSE 46937
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46886: LD_ADDR_VAR 0 5
46890: PUSH
46891: LD_VAR 0 5
46895: PPUSH
46896: LD_VAR 0 7
46900: PPUSH
46901: LD_VAR 0 5
46905: PUSH
46906: LD_VAR 0 7
46910: ARRAY
46911: PUSH
46912: LD_VAR 0 9
46916: PUSH
46917: LD_VAR 0 7
46921: ARRAY
46922: PUSH
46923: LD_VAR 0 10
46927: MUL
46928: PLUS
46929: PPUSH
46930: CALL_OW 1
46934: ST_TO_ADDR
46935: GO 46883
46937: POP
46938: POP
// end ;
46939: GO 45418
46941: POP
46942: POP
// result := Replace ( result , 4 , tmp ) ;
46943: LD_ADDR_VAR 0 5
46947: PUSH
46948: LD_VAR 0 5
46952: PPUSH
46953: LD_INT 4
46955: PPUSH
46956: LD_VAR 0 8
46960: PPUSH
46961: CALL_OW 1
46965: ST_TO_ADDR
// end ;
46966: LD_VAR 0 5
46970: RET
// export function DangerAtRange ( unit , range ) ; begin
46971: LD_INT 0
46973: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46974: LD_ADDR_VAR 0 3
46978: PUSH
46979: LD_VAR 0 1
46983: PPUSH
46984: CALL_OW 255
46988: PPUSH
46989: LD_VAR 0 1
46993: PPUSH
46994: CALL_OW 250
46998: PPUSH
46999: LD_VAR 0 1
47003: PPUSH
47004: CALL_OW 251
47008: PPUSH
47009: LD_VAR 0 2
47013: PPUSH
47014: CALL 45270 0 4
47018: ST_TO_ADDR
// end ;
47019: LD_VAR 0 3
47023: RET
// export function DangerInArea ( side , area ) ; begin
47024: LD_INT 0
47026: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47027: LD_ADDR_VAR 0 3
47031: PUSH
47032: LD_VAR 0 2
47036: PPUSH
47037: LD_INT 81
47039: PUSH
47040: LD_VAR 0 1
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PPUSH
47049: CALL_OW 70
47053: ST_TO_ADDR
// end ;
47054: LD_VAR 0 3
47058: RET
// export function IsExtension ( b ) ; begin
47059: LD_INT 0
47061: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47062: LD_ADDR_VAR 0 2
47066: PUSH
47067: LD_VAR 0 1
47071: PUSH
47072: LD_INT 23
47074: PUSH
47075: LD_INT 20
47077: PUSH
47078: LD_INT 22
47080: PUSH
47081: LD_INT 17
47083: PUSH
47084: LD_INT 24
47086: PUSH
47087: LD_INT 21
47089: PUSH
47090: LD_INT 19
47092: PUSH
47093: LD_INT 16
47095: PUSH
47096: LD_INT 25
47098: PUSH
47099: LD_INT 18
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: IN
47114: ST_TO_ADDR
// end ;
47115: LD_VAR 0 2
47119: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47120: LD_INT 0
47122: PPUSH
47123: PPUSH
47124: PPUSH
// result := [ ] ;
47125: LD_ADDR_VAR 0 4
47129: PUSH
47130: EMPTY
47131: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47132: LD_ADDR_VAR 0 5
47136: PUSH
47137: LD_VAR 0 2
47141: PPUSH
47142: LD_INT 21
47144: PUSH
47145: LD_INT 3
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PPUSH
47152: CALL_OW 70
47156: ST_TO_ADDR
// if not tmp then
47157: LD_VAR 0 5
47161: NOT
47162: IFFALSE 47166
// exit ;
47164: GO 47230
// if checkLink then
47166: LD_VAR 0 3
47170: IFFALSE 47220
// begin for i in tmp do
47172: LD_ADDR_VAR 0 6
47176: PUSH
47177: LD_VAR 0 5
47181: PUSH
47182: FOR_IN
47183: IFFALSE 47218
// if GetBase ( i ) <> base then
47185: LD_VAR 0 6
47189: PPUSH
47190: CALL_OW 274
47194: PUSH
47195: LD_VAR 0 1
47199: NONEQUAL
47200: IFFALSE 47216
// ComLinkToBase ( base , i ) ;
47202: LD_VAR 0 1
47206: PPUSH
47207: LD_VAR 0 6
47211: PPUSH
47212: CALL_OW 169
47216: GO 47182
47218: POP
47219: POP
// end ; result := tmp ;
47220: LD_ADDR_VAR 0 4
47224: PUSH
47225: LD_VAR 0 5
47229: ST_TO_ADDR
// end ;
47230: LD_VAR 0 4
47234: RET
// export function ComComplete ( units , b ) ; var i ; begin
47235: LD_INT 0
47237: PPUSH
47238: PPUSH
// if not units then
47239: LD_VAR 0 1
47243: NOT
47244: IFFALSE 47248
// exit ;
47246: GO 47338
// for i in units do
47248: LD_ADDR_VAR 0 4
47252: PUSH
47253: LD_VAR 0 1
47257: PUSH
47258: FOR_IN
47259: IFFALSE 47336
// if BuildingStatus ( b ) = bs_build then
47261: LD_VAR 0 2
47265: PPUSH
47266: CALL_OW 461
47270: PUSH
47271: LD_INT 1
47273: EQUAL
47274: IFFALSE 47334
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47276: LD_VAR 0 4
47280: PPUSH
47281: LD_STRING h
47283: PUSH
47284: LD_VAR 0 2
47288: PPUSH
47289: CALL_OW 250
47293: PUSH
47294: LD_VAR 0 2
47298: PPUSH
47299: CALL_OW 251
47303: PUSH
47304: LD_VAR 0 2
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: PUSH
47327: EMPTY
47328: LIST
47329: PPUSH
47330: CALL_OW 446
47334: GO 47258
47336: POP
47337: POP
// end ;
47338: LD_VAR 0 3
47342: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47343: LD_INT 0
47345: PPUSH
47346: PPUSH
47347: PPUSH
47348: PPUSH
47349: PPUSH
47350: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47351: LD_VAR 0 1
47355: NOT
47356: PUSH
47357: LD_VAR 0 1
47361: PPUSH
47362: CALL_OW 263
47366: PUSH
47367: LD_INT 2
47369: NONEQUAL
47370: OR
47371: IFFALSE 47375
// exit ;
47373: GO 47691
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47375: LD_ADDR_VAR 0 6
47379: PUSH
47380: LD_INT 22
47382: PUSH
47383: LD_VAR 0 1
47387: PPUSH
47388: CALL_OW 255
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 2
47399: PUSH
47400: LD_INT 30
47402: PUSH
47403: LD_INT 36
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 34
47412: PUSH
47413: LD_INT 31
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: LIST
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PPUSH
47429: CALL_OW 69
47433: ST_TO_ADDR
// if not tmp then
47434: LD_VAR 0 6
47438: NOT
47439: IFFALSE 47443
// exit ;
47441: GO 47691
// result := [ ] ;
47443: LD_ADDR_VAR 0 2
47447: PUSH
47448: EMPTY
47449: ST_TO_ADDR
// for i in tmp do
47450: LD_ADDR_VAR 0 3
47454: PUSH
47455: LD_VAR 0 6
47459: PUSH
47460: FOR_IN
47461: IFFALSE 47532
// begin t := UnitsInside ( i ) ;
47463: LD_ADDR_VAR 0 4
47467: PUSH
47468: LD_VAR 0 3
47472: PPUSH
47473: CALL_OW 313
47477: ST_TO_ADDR
// if t then
47478: LD_VAR 0 4
47482: IFFALSE 47530
// for j in t do
47484: LD_ADDR_VAR 0 7
47488: PUSH
47489: LD_VAR 0 4
47493: PUSH
47494: FOR_IN
47495: IFFALSE 47528
// result := Replace ( result , result + 1 , j ) ;
47497: LD_ADDR_VAR 0 2
47501: PUSH
47502: LD_VAR 0 2
47506: PPUSH
47507: LD_VAR 0 2
47511: PUSH
47512: LD_INT 1
47514: PLUS
47515: PPUSH
47516: LD_VAR 0 7
47520: PPUSH
47521: CALL_OW 1
47525: ST_TO_ADDR
47526: GO 47494
47528: POP
47529: POP
// end ;
47530: GO 47460
47532: POP
47533: POP
// if not result then
47534: LD_VAR 0 2
47538: NOT
47539: IFFALSE 47543
// exit ;
47541: GO 47691
// mech := result [ 1 ] ;
47543: LD_ADDR_VAR 0 5
47547: PUSH
47548: LD_VAR 0 2
47552: PUSH
47553: LD_INT 1
47555: ARRAY
47556: ST_TO_ADDR
// if result > 1 then
47557: LD_VAR 0 2
47561: PUSH
47562: LD_INT 1
47564: GREATER
47565: IFFALSE 47677
// begin for i = 2 to result do
47567: LD_ADDR_VAR 0 3
47571: PUSH
47572: DOUBLE
47573: LD_INT 2
47575: DEC
47576: ST_TO_ADDR
47577: LD_VAR 0 2
47581: PUSH
47582: FOR_TO
47583: IFFALSE 47675
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47585: LD_ADDR_VAR 0 4
47589: PUSH
47590: LD_VAR 0 2
47594: PUSH
47595: LD_VAR 0 3
47599: ARRAY
47600: PPUSH
47601: LD_INT 3
47603: PPUSH
47604: CALL_OW 259
47608: PUSH
47609: LD_VAR 0 2
47613: PUSH
47614: LD_VAR 0 3
47618: ARRAY
47619: PPUSH
47620: CALL_OW 432
47624: MINUS
47625: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47626: LD_VAR 0 4
47630: PUSH
47631: LD_VAR 0 5
47635: PPUSH
47636: LD_INT 3
47638: PPUSH
47639: CALL_OW 259
47643: PUSH
47644: LD_VAR 0 5
47648: PPUSH
47649: CALL_OW 432
47653: MINUS
47654: GREATEREQUAL
47655: IFFALSE 47673
// mech := result [ i ] ;
47657: LD_ADDR_VAR 0 5
47661: PUSH
47662: LD_VAR 0 2
47666: PUSH
47667: LD_VAR 0 3
47671: ARRAY
47672: ST_TO_ADDR
// end ;
47673: GO 47582
47675: POP
47676: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47677: LD_VAR 0 1
47681: PPUSH
47682: LD_VAR 0 5
47686: PPUSH
47687: CALL_OW 135
// end ;
47691: LD_VAR 0 2
47695: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47696: LD_INT 0
47698: PPUSH
47699: PPUSH
47700: PPUSH
47701: PPUSH
47702: PPUSH
47703: PPUSH
47704: PPUSH
47705: PPUSH
47706: PPUSH
47707: PPUSH
47708: PPUSH
47709: PPUSH
47710: PPUSH
// result := [ ] ;
47711: LD_ADDR_VAR 0 7
47715: PUSH
47716: EMPTY
47717: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47718: LD_VAR 0 1
47722: PPUSH
47723: CALL_OW 266
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: LD_INT 1
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: IN
47738: NOT
47739: IFFALSE 47743
// exit ;
47741: GO 49377
// if name then
47743: LD_VAR 0 3
47747: IFFALSE 47763
// SetBName ( base_dep , name ) ;
47749: LD_VAR 0 1
47753: PPUSH
47754: LD_VAR 0 3
47758: PPUSH
47759: CALL_OW 500
// base := GetBase ( base_dep ) ;
47763: LD_ADDR_VAR 0 15
47767: PUSH
47768: LD_VAR 0 1
47772: PPUSH
47773: CALL_OW 274
47777: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47778: LD_ADDR_VAR 0 16
47782: PUSH
47783: LD_VAR 0 1
47787: PPUSH
47788: CALL_OW 255
47792: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47793: LD_ADDR_VAR 0 17
47797: PUSH
47798: LD_VAR 0 1
47802: PPUSH
47803: CALL_OW 248
47807: ST_TO_ADDR
// if sources then
47808: LD_VAR 0 5
47812: IFFALSE 47859
// for i = 1 to 3 do
47814: LD_ADDR_VAR 0 8
47818: PUSH
47819: DOUBLE
47820: LD_INT 1
47822: DEC
47823: ST_TO_ADDR
47824: LD_INT 3
47826: PUSH
47827: FOR_TO
47828: IFFALSE 47857
// AddResourceType ( base , i , sources [ i ] ) ;
47830: LD_VAR 0 15
47834: PPUSH
47835: LD_VAR 0 8
47839: PPUSH
47840: LD_VAR 0 5
47844: PUSH
47845: LD_VAR 0 8
47849: ARRAY
47850: PPUSH
47851: CALL_OW 276
47855: GO 47827
47857: POP
47858: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47859: LD_ADDR_VAR 0 18
47863: PUSH
47864: LD_VAR 0 15
47868: PPUSH
47869: LD_VAR 0 2
47873: PPUSH
47874: LD_INT 1
47876: PPUSH
47877: CALL 47120 0 3
47881: ST_TO_ADDR
// InitHc ;
47882: CALL_OW 19
// InitUc ;
47886: CALL_OW 18
// uc_side := side ;
47890: LD_ADDR_OWVAR 20
47894: PUSH
47895: LD_VAR 0 16
47899: ST_TO_ADDR
// uc_nation := nation ;
47900: LD_ADDR_OWVAR 21
47904: PUSH
47905: LD_VAR 0 17
47909: ST_TO_ADDR
// if buildings then
47910: LD_VAR 0 18
47914: IFFALSE 49236
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47916: LD_ADDR_VAR 0 19
47920: PUSH
47921: LD_VAR 0 18
47925: PPUSH
47926: LD_INT 2
47928: PUSH
47929: LD_INT 30
47931: PUSH
47932: LD_INT 29
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 30
47941: PUSH
47942: LD_INT 30
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: LIST
47953: PPUSH
47954: CALL_OW 72
47958: ST_TO_ADDR
// if tmp then
47959: LD_VAR 0 19
47963: IFFALSE 48011
// for i in tmp do
47965: LD_ADDR_VAR 0 8
47969: PUSH
47970: LD_VAR 0 19
47974: PUSH
47975: FOR_IN
47976: IFFALSE 48009
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47978: LD_VAR 0 8
47982: PPUSH
47983: CALL_OW 250
47987: PPUSH
47988: LD_VAR 0 8
47992: PPUSH
47993: CALL_OW 251
47997: PPUSH
47998: LD_VAR 0 16
48002: PPUSH
48003: CALL_OW 441
48007: GO 47975
48009: POP
48010: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48011: LD_VAR 0 18
48015: PPUSH
48016: LD_INT 2
48018: PUSH
48019: LD_INT 30
48021: PUSH
48022: LD_INT 32
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 30
48031: PUSH
48032: LD_INT 33
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: LIST
48043: PPUSH
48044: CALL_OW 72
48048: IFFALSE 48136
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48050: LD_ADDR_VAR 0 8
48054: PUSH
48055: LD_VAR 0 18
48059: PPUSH
48060: LD_INT 2
48062: PUSH
48063: LD_INT 30
48065: PUSH
48066: LD_INT 32
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 30
48075: PUSH
48076: LD_INT 33
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: LIST
48087: PPUSH
48088: CALL_OW 72
48092: PUSH
48093: FOR_IN
48094: IFFALSE 48134
// begin if not GetBWeapon ( i ) then
48096: LD_VAR 0 8
48100: PPUSH
48101: CALL_OW 269
48105: NOT
48106: IFFALSE 48132
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48108: LD_VAR 0 8
48112: PPUSH
48113: LD_VAR 0 8
48117: PPUSH
48118: LD_VAR 0 2
48122: PPUSH
48123: CALL 49382 0 2
48127: PPUSH
48128: CALL_OW 431
// end ;
48132: GO 48093
48134: POP
48135: POP
// end ; for i = 1 to personel do
48136: LD_ADDR_VAR 0 8
48140: PUSH
48141: DOUBLE
48142: LD_INT 1
48144: DEC
48145: ST_TO_ADDR
48146: LD_VAR 0 6
48150: PUSH
48151: FOR_TO
48152: IFFALSE 49216
// begin if i > 4 then
48154: LD_VAR 0 8
48158: PUSH
48159: LD_INT 4
48161: GREATER
48162: IFFALSE 48166
// break ;
48164: GO 49216
// case i of 1 :
48166: LD_VAR 0 8
48170: PUSH
48171: LD_INT 1
48173: DOUBLE
48174: EQUAL
48175: IFTRUE 48179
48177: GO 48259
48179: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48180: LD_ADDR_VAR 0 12
48184: PUSH
48185: LD_VAR 0 18
48189: PPUSH
48190: LD_INT 22
48192: PUSH
48193: LD_VAR 0 16
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 58
48204: PUSH
48205: EMPTY
48206: LIST
48207: PUSH
48208: LD_INT 2
48210: PUSH
48211: LD_INT 30
48213: PUSH
48214: LD_INT 32
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 30
48223: PUSH
48224: LD_INT 4
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 30
48233: PUSH
48234: LD_INT 5
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: LIST
48251: PPUSH
48252: CALL_OW 72
48256: ST_TO_ADDR
48257: GO 48481
48259: LD_INT 2
48261: DOUBLE
48262: EQUAL
48263: IFTRUE 48267
48265: GO 48329
48267: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48268: LD_ADDR_VAR 0 12
48272: PUSH
48273: LD_VAR 0 18
48277: PPUSH
48278: LD_INT 22
48280: PUSH
48281: LD_VAR 0 16
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 2
48292: PUSH
48293: LD_INT 30
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 30
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: LIST
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PPUSH
48322: CALL_OW 72
48326: ST_TO_ADDR
48327: GO 48481
48329: LD_INT 3
48331: DOUBLE
48332: EQUAL
48333: IFTRUE 48337
48335: GO 48399
48337: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48338: LD_ADDR_VAR 0 12
48342: PUSH
48343: LD_VAR 0 18
48347: PPUSH
48348: LD_INT 22
48350: PUSH
48351: LD_VAR 0 16
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: LD_INT 30
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 30
48375: PUSH
48376: LD_INT 3
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: LIST
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PPUSH
48392: CALL_OW 72
48396: ST_TO_ADDR
48397: GO 48481
48399: LD_INT 4
48401: DOUBLE
48402: EQUAL
48403: IFTRUE 48407
48405: GO 48480
48407: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48408: LD_ADDR_VAR 0 12
48412: PUSH
48413: LD_VAR 0 18
48417: PPUSH
48418: LD_INT 22
48420: PUSH
48421: LD_VAR 0 16
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: LD_INT 30
48435: PUSH
48436: LD_INT 6
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 30
48445: PUSH
48446: LD_INT 7
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 30
48455: PUSH
48456: LD_INT 8
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PPUSH
48473: CALL_OW 72
48477: ST_TO_ADDR
48478: GO 48481
48480: POP
// if i = 1 then
48481: LD_VAR 0 8
48485: PUSH
48486: LD_INT 1
48488: EQUAL
48489: IFFALSE 48600
// begin tmp := [ ] ;
48491: LD_ADDR_VAR 0 19
48495: PUSH
48496: EMPTY
48497: ST_TO_ADDR
// for j in f do
48498: LD_ADDR_VAR 0 9
48502: PUSH
48503: LD_VAR 0 12
48507: PUSH
48508: FOR_IN
48509: IFFALSE 48582
// if GetBType ( j ) = b_bunker then
48511: LD_VAR 0 9
48515: PPUSH
48516: CALL_OW 266
48520: PUSH
48521: LD_INT 32
48523: EQUAL
48524: IFFALSE 48551
// tmp := Insert ( tmp , 1 , j ) else
48526: LD_ADDR_VAR 0 19
48530: PUSH
48531: LD_VAR 0 19
48535: PPUSH
48536: LD_INT 1
48538: PPUSH
48539: LD_VAR 0 9
48543: PPUSH
48544: CALL_OW 2
48548: ST_TO_ADDR
48549: GO 48580
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48551: LD_ADDR_VAR 0 19
48555: PUSH
48556: LD_VAR 0 19
48560: PPUSH
48561: LD_VAR 0 19
48565: PUSH
48566: LD_INT 1
48568: PLUS
48569: PPUSH
48570: LD_VAR 0 9
48574: PPUSH
48575: CALL_OW 2
48579: ST_TO_ADDR
48580: GO 48508
48582: POP
48583: POP
// if tmp then
48584: LD_VAR 0 19
48588: IFFALSE 48600
// f := tmp ;
48590: LD_ADDR_VAR 0 12
48594: PUSH
48595: LD_VAR 0 19
48599: ST_TO_ADDR
// end ; x := personel [ i ] ;
48600: LD_ADDR_VAR 0 13
48604: PUSH
48605: LD_VAR 0 6
48609: PUSH
48610: LD_VAR 0 8
48614: ARRAY
48615: ST_TO_ADDR
// if x = - 1 then
48616: LD_VAR 0 13
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: EQUAL
48625: IFFALSE 48834
// begin for j in f do
48627: LD_ADDR_VAR 0 9
48631: PUSH
48632: LD_VAR 0 12
48636: PUSH
48637: FOR_IN
48638: IFFALSE 48830
// repeat InitHc ;
48640: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48644: LD_VAR 0 9
48648: PPUSH
48649: CALL_OW 266
48653: PUSH
48654: LD_INT 5
48656: EQUAL
48657: IFFALSE 48727
// begin if UnitsInside ( j ) < 3 then
48659: LD_VAR 0 9
48663: PPUSH
48664: CALL_OW 313
48668: PUSH
48669: LD_INT 3
48671: LESS
48672: IFFALSE 48708
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48674: LD_INT 0
48676: PPUSH
48677: LD_INT 5
48679: PUSH
48680: LD_INT 8
48682: PUSH
48683: LD_INT 9
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: LIST
48690: PUSH
48691: LD_VAR 0 17
48695: ARRAY
48696: PPUSH
48697: LD_VAR 0 4
48701: PPUSH
48702: CALL_OW 380
48706: GO 48725
// PrepareHuman ( false , i , skill ) ;
48708: LD_INT 0
48710: PPUSH
48711: LD_VAR 0 8
48715: PPUSH
48716: LD_VAR 0 4
48720: PPUSH
48721: CALL_OW 380
// end else
48725: GO 48744
// PrepareHuman ( false , i , skill ) ;
48727: LD_INT 0
48729: PPUSH
48730: LD_VAR 0 8
48734: PPUSH
48735: LD_VAR 0 4
48739: PPUSH
48740: CALL_OW 380
// un := CreateHuman ;
48744: LD_ADDR_VAR 0 14
48748: PUSH
48749: CALL_OW 44
48753: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48754: LD_ADDR_VAR 0 7
48758: PUSH
48759: LD_VAR 0 7
48763: PPUSH
48764: LD_INT 1
48766: PPUSH
48767: LD_VAR 0 14
48771: PPUSH
48772: CALL_OW 2
48776: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48777: LD_VAR 0 14
48781: PPUSH
48782: LD_VAR 0 9
48786: PPUSH
48787: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48791: LD_VAR 0 9
48795: PPUSH
48796: CALL_OW 313
48800: PUSH
48801: LD_INT 6
48803: EQUAL
48804: PUSH
48805: LD_VAR 0 9
48809: PPUSH
48810: CALL_OW 266
48814: PUSH
48815: LD_INT 32
48817: PUSH
48818: LD_INT 31
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: IN
48825: OR
48826: IFFALSE 48640
48828: GO 48637
48830: POP
48831: POP
// end else
48832: GO 49214
// for j = 1 to x do
48834: LD_ADDR_VAR 0 9
48838: PUSH
48839: DOUBLE
48840: LD_INT 1
48842: DEC
48843: ST_TO_ADDR
48844: LD_VAR 0 13
48848: PUSH
48849: FOR_TO
48850: IFFALSE 49212
// begin InitHc ;
48852: CALL_OW 19
// if not f then
48856: LD_VAR 0 12
48860: NOT
48861: IFFALSE 48950
// begin PrepareHuman ( false , i , skill ) ;
48863: LD_INT 0
48865: PPUSH
48866: LD_VAR 0 8
48870: PPUSH
48871: LD_VAR 0 4
48875: PPUSH
48876: CALL_OW 380
// un := CreateHuman ;
48880: LD_ADDR_VAR 0 14
48884: PUSH
48885: CALL_OW 44
48889: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48890: LD_ADDR_VAR 0 7
48894: PUSH
48895: LD_VAR 0 7
48899: PPUSH
48900: LD_INT 1
48902: PPUSH
48903: LD_VAR 0 14
48907: PPUSH
48908: CALL_OW 2
48912: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48913: LD_VAR 0 14
48917: PPUSH
48918: LD_VAR 0 1
48922: PPUSH
48923: CALL_OW 250
48927: PPUSH
48928: LD_VAR 0 1
48932: PPUSH
48933: CALL_OW 251
48937: PPUSH
48938: LD_INT 10
48940: PPUSH
48941: LD_INT 0
48943: PPUSH
48944: CALL_OW 50
// continue ;
48948: GO 48849
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48950: LD_VAR 0 12
48954: PUSH
48955: LD_INT 1
48957: ARRAY
48958: PPUSH
48959: CALL_OW 313
48963: PUSH
48964: LD_VAR 0 12
48968: PUSH
48969: LD_INT 1
48971: ARRAY
48972: PPUSH
48973: CALL_OW 266
48977: PUSH
48978: LD_INT 32
48980: PUSH
48981: LD_INT 31
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: IN
48988: AND
48989: PUSH
48990: LD_VAR 0 12
48994: PUSH
48995: LD_INT 1
48997: ARRAY
48998: PPUSH
48999: CALL_OW 313
49003: PUSH
49004: LD_INT 6
49006: EQUAL
49007: OR
49008: IFFALSE 49028
// f := Delete ( f , 1 ) ;
49010: LD_ADDR_VAR 0 12
49014: PUSH
49015: LD_VAR 0 12
49019: PPUSH
49020: LD_INT 1
49022: PPUSH
49023: CALL_OW 3
49027: ST_TO_ADDR
// if not f then
49028: LD_VAR 0 12
49032: NOT
49033: IFFALSE 49051
// begin x := x + 2 ;
49035: LD_ADDR_VAR 0 13
49039: PUSH
49040: LD_VAR 0 13
49044: PUSH
49045: LD_INT 2
49047: PLUS
49048: ST_TO_ADDR
// continue ;
49049: GO 48849
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49051: LD_VAR 0 12
49055: PUSH
49056: LD_INT 1
49058: ARRAY
49059: PPUSH
49060: CALL_OW 266
49064: PUSH
49065: LD_INT 5
49067: EQUAL
49068: IFFALSE 49142
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49070: LD_VAR 0 12
49074: PUSH
49075: LD_INT 1
49077: ARRAY
49078: PPUSH
49079: CALL_OW 313
49083: PUSH
49084: LD_INT 3
49086: LESS
49087: IFFALSE 49123
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49089: LD_INT 0
49091: PPUSH
49092: LD_INT 5
49094: PUSH
49095: LD_INT 8
49097: PUSH
49098: LD_INT 9
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: LIST
49105: PUSH
49106: LD_VAR 0 17
49110: ARRAY
49111: PPUSH
49112: LD_VAR 0 4
49116: PPUSH
49117: CALL_OW 380
49121: GO 49140
// PrepareHuman ( false , i , skill ) ;
49123: LD_INT 0
49125: PPUSH
49126: LD_VAR 0 8
49130: PPUSH
49131: LD_VAR 0 4
49135: PPUSH
49136: CALL_OW 380
// end else
49140: GO 49159
// PrepareHuman ( false , i , skill ) ;
49142: LD_INT 0
49144: PPUSH
49145: LD_VAR 0 8
49149: PPUSH
49150: LD_VAR 0 4
49154: PPUSH
49155: CALL_OW 380
// un := CreateHuman ;
49159: LD_ADDR_VAR 0 14
49163: PUSH
49164: CALL_OW 44
49168: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49169: LD_ADDR_VAR 0 7
49173: PUSH
49174: LD_VAR 0 7
49178: PPUSH
49179: LD_INT 1
49181: PPUSH
49182: LD_VAR 0 14
49186: PPUSH
49187: CALL_OW 2
49191: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49192: LD_VAR 0 14
49196: PPUSH
49197: LD_VAR 0 12
49201: PUSH
49202: LD_INT 1
49204: ARRAY
49205: PPUSH
49206: CALL_OW 52
// end ;
49210: GO 48849
49212: POP
49213: POP
// end ;
49214: GO 48151
49216: POP
49217: POP
// result := result ^ buildings ;
49218: LD_ADDR_VAR 0 7
49222: PUSH
49223: LD_VAR 0 7
49227: PUSH
49228: LD_VAR 0 18
49232: ADD
49233: ST_TO_ADDR
// end else
49234: GO 49377
// begin for i = 1 to personel do
49236: LD_ADDR_VAR 0 8
49240: PUSH
49241: DOUBLE
49242: LD_INT 1
49244: DEC
49245: ST_TO_ADDR
49246: LD_VAR 0 6
49250: PUSH
49251: FOR_TO
49252: IFFALSE 49375
// begin if i > 4 then
49254: LD_VAR 0 8
49258: PUSH
49259: LD_INT 4
49261: GREATER
49262: IFFALSE 49266
// break ;
49264: GO 49375
// x := personel [ i ] ;
49266: LD_ADDR_VAR 0 13
49270: PUSH
49271: LD_VAR 0 6
49275: PUSH
49276: LD_VAR 0 8
49280: ARRAY
49281: ST_TO_ADDR
// if x = - 1 then
49282: LD_VAR 0 13
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: EQUAL
49291: IFFALSE 49295
// continue ;
49293: GO 49251
// PrepareHuman ( false , i , skill ) ;
49295: LD_INT 0
49297: PPUSH
49298: LD_VAR 0 8
49302: PPUSH
49303: LD_VAR 0 4
49307: PPUSH
49308: CALL_OW 380
// un := CreateHuman ;
49312: LD_ADDR_VAR 0 14
49316: PUSH
49317: CALL_OW 44
49321: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49322: LD_VAR 0 14
49326: PPUSH
49327: LD_VAR 0 1
49331: PPUSH
49332: CALL_OW 250
49336: PPUSH
49337: LD_VAR 0 1
49341: PPUSH
49342: CALL_OW 251
49346: PPUSH
49347: LD_INT 10
49349: PPUSH
49350: LD_INT 0
49352: PPUSH
49353: CALL_OW 50
// result := result ^ un ;
49357: LD_ADDR_VAR 0 7
49361: PUSH
49362: LD_VAR 0 7
49366: PUSH
49367: LD_VAR 0 14
49371: ADD
49372: ST_TO_ADDR
// end ;
49373: GO 49251
49375: POP
49376: POP
// end ; end ;
49377: LD_VAR 0 7
49381: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49382: LD_INT 0
49384: PPUSH
49385: PPUSH
49386: PPUSH
49387: PPUSH
49388: PPUSH
49389: PPUSH
49390: PPUSH
49391: PPUSH
49392: PPUSH
49393: PPUSH
49394: PPUSH
49395: PPUSH
49396: PPUSH
49397: PPUSH
49398: PPUSH
49399: PPUSH
// result := false ;
49400: LD_ADDR_VAR 0 3
49404: PUSH
49405: LD_INT 0
49407: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49408: LD_VAR 0 1
49412: NOT
49413: PUSH
49414: LD_VAR 0 1
49418: PPUSH
49419: CALL_OW 266
49423: PUSH
49424: LD_INT 32
49426: PUSH
49427: LD_INT 33
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: IN
49434: NOT
49435: OR
49436: IFFALSE 49440
// exit ;
49438: GO 50549
// nat := GetNation ( tower ) ;
49440: LD_ADDR_VAR 0 12
49444: PUSH
49445: LD_VAR 0 1
49449: PPUSH
49450: CALL_OW 248
49454: ST_TO_ADDR
// side := GetSide ( tower ) ;
49455: LD_ADDR_VAR 0 16
49459: PUSH
49460: LD_VAR 0 1
49464: PPUSH
49465: CALL_OW 255
49469: ST_TO_ADDR
// x := GetX ( tower ) ;
49470: LD_ADDR_VAR 0 10
49474: PUSH
49475: LD_VAR 0 1
49479: PPUSH
49480: CALL_OW 250
49484: ST_TO_ADDR
// y := GetY ( tower ) ;
49485: LD_ADDR_VAR 0 11
49489: PUSH
49490: LD_VAR 0 1
49494: PPUSH
49495: CALL_OW 251
49499: ST_TO_ADDR
// if not x or not y then
49500: LD_VAR 0 10
49504: NOT
49505: PUSH
49506: LD_VAR 0 11
49510: NOT
49511: OR
49512: IFFALSE 49516
// exit ;
49514: GO 50549
// weapon := 0 ;
49516: LD_ADDR_VAR 0 18
49520: PUSH
49521: LD_INT 0
49523: ST_TO_ADDR
// fac_list := [ ] ;
49524: LD_ADDR_VAR 0 17
49528: PUSH
49529: EMPTY
49530: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49531: LD_ADDR_VAR 0 6
49535: PUSH
49536: LD_VAR 0 1
49540: PPUSH
49541: CALL_OW 274
49545: PPUSH
49546: LD_VAR 0 2
49550: PPUSH
49551: LD_INT 0
49553: PPUSH
49554: CALL 47120 0 3
49558: PPUSH
49559: LD_INT 30
49561: PUSH
49562: LD_INT 3
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PPUSH
49569: CALL_OW 72
49573: ST_TO_ADDR
// if not factories then
49574: LD_VAR 0 6
49578: NOT
49579: IFFALSE 49583
// exit ;
49581: GO 50549
// for i in factories do
49583: LD_ADDR_VAR 0 8
49587: PUSH
49588: LD_VAR 0 6
49592: PUSH
49593: FOR_IN
49594: IFFALSE 49619
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49596: LD_ADDR_VAR 0 17
49600: PUSH
49601: LD_VAR 0 17
49605: PUSH
49606: LD_VAR 0 8
49610: PPUSH
49611: CALL_OW 478
49615: UNION
49616: ST_TO_ADDR
49617: GO 49593
49619: POP
49620: POP
// if not fac_list then
49621: LD_VAR 0 17
49625: NOT
49626: IFFALSE 49630
// exit ;
49628: GO 50549
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49630: LD_ADDR_VAR 0 5
49634: PUSH
49635: LD_INT 4
49637: PUSH
49638: LD_INT 5
49640: PUSH
49641: LD_INT 9
49643: PUSH
49644: LD_INT 10
49646: PUSH
49647: LD_INT 6
49649: PUSH
49650: LD_INT 7
49652: PUSH
49653: LD_INT 11
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 27
49667: PUSH
49668: LD_INT 28
49670: PUSH
49671: LD_INT 26
49673: PUSH
49674: LD_INT 30
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 43
49685: PUSH
49686: LD_INT 44
49688: PUSH
49689: LD_INT 46
49691: PUSH
49692: LD_INT 45
49694: PUSH
49695: LD_INT 47
49697: PUSH
49698: LD_INT 49
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: LIST
49713: PUSH
49714: LD_VAR 0 12
49718: ARRAY
49719: ST_TO_ADDR
// list := list isect fac_list ;
49720: LD_ADDR_VAR 0 5
49724: PUSH
49725: LD_VAR 0 5
49729: PUSH
49730: LD_VAR 0 17
49734: ISECT
49735: ST_TO_ADDR
// if not list then
49736: LD_VAR 0 5
49740: NOT
49741: IFFALSE 49745
// exit ;
49743: GO 50549
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49745: LD_VAR 0 12
49749: PUSH
49750: LD_INT 3
49752: EQUAL
49753: PUSH
49754: LD_INT 49
49756: PUSH
49757: LD_VAR 0 5
49761: IN
49762: AND
49763: PUSH
49764: LD_INT 31
49766: PPUSH
49767: LD_VAR 0 16
49771: PPUSH
49772: CALL_OW 321
49776: PUSH
49777: LD_INT 2
49779: EQUAL
49780: AND
49781: IFFALSE 49841
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49783: LD_INT 22
49785: PUSH
49786: LD_VAR 0 16
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 35
49797: PUSH
49798: LD_INT 49
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 91
49807: PUSH
49808: LD_VAR 0 1
49812: PUSH
49813: LD_INT 10
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: LIST
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: LIST
49825: PPUSH
49826: CALL_OW 69
49830: NOT
49831: IFFALSE 49841
// weapon := ru_time_lapser ;
49833: LD_ADDR_VAR 0 18
49837: PUSH
49838: LD_INT 49
49840: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49841: LD_VAR 0 12
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: IN
49856: PUSH
49857: LD_INT 11
49859: PUSH
49860: LD_VAR 0 5
49864: IN
49865: PUSH
49866: LD_INT 30
49868: PUSH
49869: LD_VAR 0 5
49873: IN
49874: OR
49875: AND
49876: PUSH
49877: LD_INT 6
49879: PPUSH
49880: LD_VAR 0 16
49884: PPUSH
49885: CALL_OW 321
49889: PUSH
49890: LD_INT 2
49892: EQUAL
49893: AND
49894: IFFALSE 50059
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49896: LD_INT 22
49898: PUSH
49899: LD_VAR 0 16
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: LD_INT 35
49913: PUSH
49914: LD_INT 11
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 35
49923: PUSH
49924: LD_INT 30
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 91
49938: PUSH
49939: LD_VAR 0 1
49943: PUSH
49944: LD_INT 18
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: LIST
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: LIST
49956: PPUSH
49957: CALL_OW 69
49961: NOT
49962: PUSH
49963: LD_INT 22
49965: PUSH
49966: LD_VAR 0 16
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 2
49977: PUSH
49978: LD_INT 30
49980: PUSH
49981: LD_INT 32
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 30
49990: PUSH
49991: LD_INT 33
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 91
50005: PUSH
50006: LD_VAR 0 1
50010: PUSH
50011: LD_INT 12
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: LIST
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: LIST
50023: PUSH
50024: EMPTY
50025: LIST
50026: PPUSH
50027: CALL_OW 69
50031: PUSH
50032: LD_INT 2
50034: GREATER
50035: AND
50036: IFFALSE 50059
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50038: LD_ADDR_VAR 0 18
50042: PUSH
50043: LD_INT 11
50045: PUSH
50046: LD_INT 30
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_VAR 0 12
50057: ARRAY
50058: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50059: LD_VAR 0 18
50063: NOT
50064: PUSH
50065: LD_INT 40
50067: PPUSH
50068: LD_VAR 0 16
50072: PPUSH
50073: CALL_OW 321
50077: PUSH
50078: LD_INT 2
50080: EQUAL
50081: AND
50082: PUSH
50083: LD_INT 7
50085: PUSH
50086: LD_VAR 0 5
50090: IN
50091: PUSH
50092: LD_INT 28
50094: PUSH
50095: LD_VAR 0 5
50099: IN
50100: OR
50101: PUSH
50102: LD_INT 45
50104: PUSH
50105: LD_VAR 0 5
50109: IN
50110: OR
50111: AND
50112: IFFALSE 50366
// begin hex := GetHexInfo ( x , y ) ;
50114: LD_ADDR_VAR 0 4
50118: PUSH
50119: LD_VAR 0 10
50123: PPUSH
50124: LD_VAR 0 11
50128: PPUSH
50129: CALL_OW 546
50133: ST_TO_ADDR
// if hex [ 1 ] then
50134: LD_VAR 0 4
50138: PUSH
50139: LD_INT 1
50141: ARRAY
50142: IFFALSE 50146
// exit ;
50144: GO 50549
// height := hex [ 2 ] ;
50146: LD_ADDR_VAR 0 15
50150: PUSH
50151: LD_VAR 0 4
50155: PUSH
50156: LD_INT 2
50158: ARRAY
50159: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50160: LD_ADDR_VAR 0 14
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: LD_INT 3
50173: PUSH
50174: LD_INT 5
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: ST_TO_ADDR
// for i in tmp do
50183: LD_ADDR_VAR 0 8
50187: PUSH
50188: LD_VAR 0 14
50192: PUSH
50193: FOR_IN
50194: IFFALSE 50364
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50196: LD_ADDR_VAR 0 9
50200: PUSH
50201: LD_VAR 0 10
50205: PPUSH
50206: LD_VAR 0 8
50210: PPUSH
50211: LD_INT 5
50213: PPUSH
50214: CALL_OW 272
50218: PUSH
50219: LD_VAR 0 11
50223: PPUSH
50224: LD_VAR 0 8
50228: PPUSH
50229: LD_INT 5
50231: PPUSH
50232: CALL_OW 273
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50241: LD_VAR 0 9
50245: PUSH
50246: LD_INT 1
50248: ARRAY
50249: PPUSH
50250: LD_VAR 0 9
50254: PUSH
50255: LD_INT 2
50257: ARRAY
50258: PPUSH
50259: CALL_OW 488
50263: IFFALSE 50362
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50265: LD_ADDR_VAR 0 4
50269: PUSH
50270: LD_VAR 0 9
50274: PUSH
50275: LD_INT 1
50277: ARRAY
50278: PPUSH
50279: LD_VAR 0 9
50283: PUSH
50284: LD_INT 2
50286: ARRAY
50287: PPUSH
50288: CALL_OW 546
50292: ST_TO_ADDR
// if hex [ 1 ] then
50293: LD_VAR 0 4
50297: PUSH
50298: LD_INT 1
50300: ARRAY
50301: IFFALSE 50305
// continue ;
50303: GO 50193
// h := hex [ 2 ] ;
50305: LD_ADDR_VAR 0 13
50309: PUSH
50310: LD_VAR 0 4
50314: PUSH
50315: LD_INT 2
50317: ARRAY
50318: ST_TO_ADDR
// if h + 7 < height then
50319: LD_VAR 0 13
50323: PUSH
50324: LD_INT 7
50326: PLUS
50327: PUSH
50328: LD_VAR 0 15
50332: LESS
50333: IFFALSE 50362
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50335: LD_ADDR_VAR 0 18
50339: PUSH
50340: LD_INT 7
50342: PUSH
50343: LD_INT 28
50345: PUSH
50346: LD_INT 45
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: LIST
50353: PUSH
50354: LD_VAR 0 12
50358: ARRAY
50359: ST_TO_ADDR
// break ;
50360: GO 50364
// end ; end ; end ;
50362: GO 50193
50364: POP
50365: POP
// end ; if not weapon then
50366: LD_VAR 0 18
50370: NOT
50371: IFFALSE 50431
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50373: LD_ADDR_VAR 0 5
50377: PUSH
50378: LD_VAR 0 5
50382: PUSH
50383: LD_INT 11
50385: PUSH
50386: LD_INT 30
50388: PUSH
50389: LD_INT 49
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: LIST
50396: DIFF
50397: ST_TO_ADDR
// if not list then
50398: LD_VAR 0 5
50402: NOT
50403: IFFALSE 50407
// exit ;
50405: GO 50549
// weapon := list [ rand ( 1 , list ) ] ;
50407: LD_ADDR_VAR 0 18
50411: PUSH
50412: LD_VAR 0 5
50416: PUSH
50417: LD_INT 1
50419: PPUSH
50420: LD_VAR 0 5
50424: PPUSH
50425: CALL_OW 12
50429: ARRAY
50430: ST_TO_ADDR
// end ; if weapon then
50431: LD_VAR 0 18
50435: IFFALSE 50549
// begin tmp := CostOfWeapon ( weapon ) ;
50437: LD_ADDR_VAR 0 14
50441: PUSH
50442: LD_VAR 0 18
50446: PPUSH
50447: CALL_OW 451
50451: ST_TO_ADDR
// j := GetBase ( tower ) ;
50452: LD_ADDR_VAR 0 9
50456: PUSH
50457: LD_VAR 0 1
50461: PPUSH
50462: CALL_OW 274
50466: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50467: LD_VAR 0 9
50471: PPUSH
50472: LD_INT 1
50474: PPUSH
50475: CALL_OW 275
50479: PUSH
50480: LD_VAR 0 14
50484: PUSH
50485: LD_INT 1
50487: ARRAY
50488: GREATEREQUAL
50489: PUSH
50490: LD_VAR 0 9
50494: PPUSH
50495: LD_INT 2
50497: PPUSH
50498: CALL_OW 275
50502: PUSH
50503: LD_VAR 0 14
50507: PUSH
50508: LD_INT 2
50510: ARRAY
50511: GREATEREQUAL
50512: AND
50513: PUSH
50514: LD_VAR 0 9
50518: PPUSH
50519: LD_INT 3
50521: PPUSH
50522: CALL_OW 275
50526: PUSH
50527: LD_VAR 0 14
50531: PUSH
50532: LD_INT 3
50534: ARRAY
50535: GREATEREQUAL
50536: AND
50537: IFFALSE 50549
// result := weapon ;
50539: LD_ADDR_VAR 0 3
50543: PUSH
50544: LD_VAR 0 18
50548: ST_TO_ADDR
// end ; end ;
50549: LD_VAR 0 3
50553: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50554: LD_INT 0
50556: PPUSH
50557: PPUSH
// result := true ;
50558: LD_ADDR_VAR 0 3
50562: PUSH
50563: LD_INT 1
50565: ST_TO_ADDR
// if array1 = array2 then
50566: LD_VAR 0 1
50570: PUSH
50571: LD_VAR 0 2
50575: EQUAL
50576: IFFALSE 50636
// begin for i = 1 to array1 do
50578: LD_ADDR_VAR 0 4
50582: PUSH
50583: DOUBLE
50584: LD_INT 1
50586: DEC
50587: ST_TO_ADDR
50588: LD_VAR 0 1
50592: PUSH
50593: FOR_TO
50594: IFFALSE 50632
// if array1 [ i ] <> array2 [ i ] then
50596: LD_VAR 0 1
50600: PUSH
50601: LD_VAR 0 4
50605: ARRAY
50606: PUSH
50607: LD_VAR 0 2
50611: PUSH
50612: LD_VAR 0 4
50616: ARRAY
50617: NONEQUAL
50618: IFFALSE 50630
// begin result := false ;
50620: LD_ADDR_VAR 0 3
50624: PUSH
50625: LD_INT 0
50627: ST_TO_ADDR
// break ;
50628: GO 50632
// end ;
50630: GO 50593
50632: POP
50633: POP
// end else
50634: GO 50644
// result := false ;
50636: LD_ADDR_VAR 0 3
50640: PUSH
50641: LD_INT 0
50643: ST_TO_ADDR
// end ;
50644: LD_VAR 0 3
50648: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50649: LD_INT 0
50651: PPUSH
50652: PPUSH
// if not array1 or not array2 then
50653: LD_VAR 0 1
50657: NOT
50658: PUSH
50659: LD_VAR 0 2
50663: NOT
50664: OR
50665: IFFALSE 50669
// exit ;
50667: GO 50733
// result := true ;
50669: LD_ADDR_VAR 0 3
50673: PUSH
50674: LD_INT 1
50676: ST_TO_ADDR
// for i = 1 to array1 do
50677: LD_ADDR_VAR 0 4
50681: PUSH
50682: DOUBLE
50683: LD_INT 1
50685: DEC
50686: ST_TO_ADDR
50687: LD_VAR 0 1
50691: PUSH
50692: FOR_TO
50693: IFFALSE 50731
// if array1 [ i ] <> array2 [ i ] then
50695: LD_VAR 0 1
50699: PUSH
50700: LD_VAR 0 4
50704: ARRAY
50705: PUSH
50706: LD_VAR 0 2
50710: PUSH
50711: LD_VAR 0 4
50715: ARRAY
50716: NONEQUAL
50717: IFFALSE 50729
// begin result := false ;
50719: LD_ADDR_VAR 0 3
50723: PUSH
50724: LD_INT 0
50726: ST_TO_ADDR
// break ;
50727: GO 50731
// end ;
50729: GO 50692
50731: POP
50732: POP
// end ;
50733: LD_VAR 0 3
50737: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50738: LD_INT 0
50740: PPUSH
50741: PPUSH
50742: PPUSH
// pom := GetBase ( fac ) ;
50743: LD_ADDR_VAR 0 5
50747: PUSH
50748: LD_VAR 0 1
50752: PPUSH
50753: CALL_OW 274
50757: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50758: LD_ADDR_VAR 0 4
50762: PUSH
50763: LD_VAR 0 2
50767: PUSH
50768: LD_INT 1
50770: ARRAY
50771: PPUSH
50772: LD_VAR 0 2
50776: PUSH
50777: LD_INT 2
50779: ARRAY
50780: PPUSH
50781: LD_VAR 0 2
50785: PUSH
50786: LD_INT 3
50788: ARRAY
50789: PPUSH
50790: LD_VAR 0 2
50794: PUSH
50795: LD_INT 4
50797: ARRAY
50798: PPUSH
50799: CALL_OW 449
50803: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50804: LD_ADDR_VAR 0 3
50808: PUSH
50809: LD_VAR 0 5
50813: PPUSH
50814: LD_INT 1
50816: PPUSH
50817: CALL_OW 275
50821: PUSH
50822: LD_VAR 0 4
50826: PUSH
50827: LD_INT 1
50829: ARRAY
50830: GREATEREQUAL
50831: PUSH
50832: LD_VAR 0 5
50836: PPUSH
50837: LD_INT 2
50839: PPUSH
50840: CALL_OW 275
50844: PUSH
50845: LD_VAR 0 4
50849: PUSH
50850: LD_INT 2
50852: ARRAY
50853: GREATEREQUAL
50854: AND
50855: PUSH
50856: LD_VAR 0 5
50860: PPUSH
50861: LD_INT 3
50863: PPUSH
50864: CALL_OW 275
50868: PUSH
50869: LD_VAR 0 4
50873: PUSH
50874: LD_INT 3
50876: ARRAY
50877: GREATEREQUAL
50878: AND
50879: ST_TO_ADDR
// end ;
50880: LD_VAR 0 3
50884: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50885: LD_INT 0
50887: PPUSH
50888: PPUSH
50889: PPUSH
50890: PPUSH
// pom := GetBase ( building ) ;
50891: LD_ADDR_VAR 0 3
50895: PUSH
50896: LD_VAR 0 1
50900: PPUSH
50901: CALL_OW 274
50905: ST_TO_ADDR
// if not pom then
50906: LD_VAR 0 3
50910: NOT
50911: IFFALSE 50915
// exit ;
50913: GO 51085
// btype := GetBType ( building ) ;
50915: LD_ADDR_VAR 0 5
50919: PUSH
50920: LD_VAR 0 1
50924: PPUSH
50925: CALL_OW 266
50929: ST_TO_ADDR
// if btype = b_armoury then
50930: LD_VAR 0 5
50934: PUSH
50935: LD_INT 4
50937: EQUAL
50938: IFFALSE 50948
// btype := b_barracks ;
50940: LD_ADDR_VAR 0 5
50944: PUSH
50945: LD_INT 5
50947: ST_TO_ADDR
// if btype = b_depot then
50948: LD_VAR 0 5
50952: PUSH
50953: LD_INT 0
50955: EQUAL
50956: IFFALSE 50966
// btype := b_warehouse ;
50958: LD_ADDR_VAR 0 5
50962: PUSH
50963: LD_INT 1
50965: ST_TO_ADDR
// if btype = b_workshop then
50966: LD_VAR 0 5
50970: PUSH
50971: LD_INT 2
50973: EQUAL
50974: IFFALSE 50984
// btype := b_factory ;
50976: LD_ADDR_VAR 0 5
50980: PUSH
50981: LD_INT 3
50983: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50984: LD_ADDR_VAR 0 4
50988: PUSH
50989: LD_VAR 0 5
50993: PPUSH
50994: LD_VAR 0 1
50998: PPUSH
50999: CALL_OW 248
51003: PPUSH
51004: CALL_OW 450
51008: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51009: LD_ADDR_VAR 0 2
51013: PUSH
51014: LD_VAR 0 3
51018: PPUSH
51019: LD_INT 1
51021: PPUSH
51022: CALL_OW 275
51026: PUSH
51027: LD_VAR 0 4
51031: PUSH
51032: LD_INT 1
51034: ARRAY
51035: GREATEREQUAL
51036: PUSH
51037: LD_VAR 0 3
51041: PPUSH
51042: LD_INT 2
51044: PPUSH
51045: CALL_OW 275
51049: PUSH
51050: LD_VAR 0 4
51054: PUSH
51055: LD_INT 2
51057: ARRAY
51058: GREATEREQUAL
51059: AND
51060: PUSH
51061: LD_VAR 0 3
51065: PPUSH
51066: LD_INT 3
51068: PPUSH
51069: CALL_OW 275
51073: PUSH
51074: LD_VAR 0 4
51078: PUSH
51079: LD_INT 3
51081: ARRAY
51082: GREATEREQUAL
51083: AND
51084: ST_TO_ADDR
// end ;
51085: LD_VAR 0 2
51089: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51090: LD_INT 0
51092: PPUSH
51093: PPUSH
51094: PPUSH
// pom := GetBase ( building ) ;
51095: LD_ADDR_VAR 0 4
51099: PUSH
51100: LD_VAR 0 1
51104: PPUSH
51105: CALL_OW 274
51109: ST_TO_ADDR
// if not pom then
51110: LD_VAR 0 4
51114: NOT
51115: IFFALSE 51119
// exit ;
51117: GO 51220
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51119: LD_ADDR_VAR 0 5
51123: PUSH
51124: LD_VAR 0 2
51128: PPUSH
51129: LD_VAR 0 1
51133: PPUSH
51134: CALL_OW 248
51138: PPUSH
51139: CALL_OW 450
51143: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51144: LD_ADDR_VAR 0 3
51148: PUSH
51149: LD_VAR 0 4
51153: PPUSH
51154: LD_INT 1
51156: PPUSH
51157: CALL_OW 275
51161: PUSH
51162: LD_VAR 0 5
51166: PUSH
51167: LD_INT 1
51169: ARRAY
51170: GREATEREQUAL
51171: PUSH
51172: LD_VAR 0 4
51176: PPUSH
51177: LD_INT 2
51179: PPUSH
51180: CALL_OW 275
51184: PUSH
51185: LD_VAR 0 5
51189: PUSH
51190: LD_INT 2
51192: ARRAY
51193: GREATEREQUAL
51194: AND
51195: PUSH
51196: LD_VAR 0 4
51200: PPUSH
51201: LD_INT 3
51203: PPUSH
51204: CALL_OW 275
51208: PUSH
51209: LD_VAR 0 5
51213: PUSH
51214: LD_INT 3
51216: ARRAY
51217: GREATEREQUAL
51218: AND
51219: ST_TO_ADDR
// end ;
51220: LD_VAR 0 3
51224: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51225: LD_INT 0
51227: PPUSH
51228: PPUSH
51229: PPUSH
51230: PPUSH
51231: PPUSH
51232: PPUSH
51233: PPUSH
51234: PPUSH
51235: PPUSH
51236: PPUSH
51237: PPUSH
// result := false ;
51238: LD_ADDR_VAR 0 8
51242: PUSH
51243: LD_INT 0
51245: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51246: LD_VAR 0 5
51250: NOT
51251: PUSH
51252: LD_VAR 0 1
51256: NOT
51257: OR
51258: PUSH
51259: LD_VAR 0 2
51263: NOT
51264: OR
51265: PUSH
51266: LD_VAR 0 3
51270: NOT
51271: OR
51272: IFFALSE 51276
// exit ;
51274: GO 52090
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51276: LD_ADDR_VAR 0 14
51280: PUSH
51281: LD_VAR 0 1
51285: PPUSH
51286: LD_VAR 0 2
51290: PPUSH
51291: LD_VAR 0 3
51295: PPUSH
51296: LD_VAR 0 4
51300: PPUSH
51301: LD_VAR 0 5
51305: PUSH
51306: LD_INT 1
51308: ARRAY
51309: PPUSH
51310: CALL_OW 248
51314: PPUSH
51315: LD_INT 0
51317: PPUSH
51318: CALL 53323 0 6
51322: ST_TO_ADDR
// if not hexes then
51323: LD_VAR 0 14
51327: NOT
51328: IFFALSE 51332
// exit ;
51330: GO 52090
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51332: LD_ADDR_VAR 0 17
51336: PUSH
51337: LD_VAR 0 5
51341: PPUSH
51342: LD_INT 22
51344: PUSH
51345: LD_VAR 0 13
51349: PPUSH
51350: CALL_OW 255
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 2
51361: PUSH
51362: LD_INT 30
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 30
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: LIST
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PPUSH
51391: CALL_OW 72
51395: ST_TO_ADDR
// for i = 1 to hexes do
51396: LD_ADDR_VAR 0 9
51400: PUSH
51401: DOUBLE
51402: LD_INT 1
51404: DEC
51405: ST_TO_ADDR
51406: LD_VAR 0 14
51410: PUSH
51411: FOR_TO
51412: IFFALSE 52088
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51414: LD_ADDR_VAR 0 13
51418: PUSH
51419: LD_VAR 0 14
51423: PUSH
51424: LD_VAR 0 9
51428: ARRAY
51429: PUSH
51430: LD_INT 1
51432: ARRAY
51433: PPUSH
51434: LD_VAR 0 14
51438: PUSH
51439: LD_VAR 0 9
51443: ARRAY
51444: PUSH
51445: LD_INT 2
51447: ARRAY
51448: PPUSH
51449: CALL_OW 428
51453: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51454: LD_VAR 0 14
51458: PUSH
51459: LD_VAR 0 9
51463: ARRAY
51464: PUSH
51465: LD_INT 1
51467: ARRAY
51468: PPUSH
51469: LD_VAR 0 14
51473: PUSH
51474: LD_VAR 0 9
51478: ARRAY
51479: PUSH
51480: LD_INT 2
51482: ARRAY
51483: PPUSH
51484: CALL_OW 351
51488: PUSH
51489: LD_VAR 0 14
51493: PUSH
51494: LD_VAR 0 9
51498: ARRAY
51499: PUSH
51500: LD_INT 1
51502: ARRAY
51503: PPUSH
51504: LD_VAR 0 14
51508: PUSH
51509: LD_VAR 0 9
51513: ARRAY
51514: PUSH
51515: LD_INT 2
51517: ARRAY
51518: PPUSH
51519: CALL_OW 488
51523: NOT
51524: OR
51525: PUSH
51526: LD_VAR 0 13
51530: PPUSH
51531: CALL_OW 247
51535: PUSH
51536: LD_INT 3
51538: EQUAL
51539: OR
51540: IFFALSE 51546
// exit ;
51542: POP
51543: POP
51544: GO 52090
// if not tmp then
51546: LD_VAR 0 13
51550: NOT
51551: IFFALSE 51555
// continue ;
51553: GO 51411
// result := true ;
51555: LD_ADDR_VAR 0 8
51559: PUSH
51560: LD_INT 1
51562: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51563: LD_VAR 0 6
51567: PUSH
51568: LD_VAR 0 13
51572: PPUSH
51573: CALL_OW 247
51577: PUSH
51578: LD_INT 2
51580: EQUAL
51581: AND
51582: PUSH
51583: LD_VAR 0 13
51587: PPUSH
51588: CALL_OW 263
51592: PUSH
51593: LD_INT 1
51595: EQUAL
51596: AND
51597: IFFALSE 51761
// begin if IsDrivenBy ( tmp ) then
51599: LD_VAR 0 13
51603: PPUSH
51604: CALL_OW 311
51608: IFFALSE 51612
// continue ;
51610: GO 51411
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51612: LD_VAR 0 6
51616: PPUSH
51617: LD_INT 3
51619: PUSH
51620: LD_INT 60
51622: PUSH
51623: EMPTY
51624: LIST
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 3
51632: PUSH
51633: LD_INT 55
51635: PUSH
51636: EMPTY
51637: LIST
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PPUSH
51647: CALL_OW 72
51651: IFFALSE 51759
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51653: LD_ADDR_VAR 0 18
51657: PUSH
51658: LD_VAR 0 6
51662: PPUSH
51663: LD_INT 3
51665: PUSH
51666: LD_INT 60
51668: PUSH
51669: EMPTY
51670: LIST
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 3
51678: PUSH
51679: LD_INT 55
51681: PUSH
51682: EMPTY
51683: LIST
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PPUSH
51693: CALL_OW 72
51697: PUSH
51698: LD_INT 1
51700: ARRAY
51701: ST_TO_ADDR
// if IsInUnit ( driver ) then
51702: LD_VAR 0 18
51706: PPUSH
51707: CALL_OW 310
51711: IFFALSE 51722
// ComExit ( driver ) ;
51713: LD_VAR 0 18
51717: PPUSH
51718: CALL 77103 0 1
// AddComEnterUnit ( driver , tmp ) ;
51722: LD_VAR 0 18
51726: PPUSH
51727: LD_VAR 0 13
51731: PPUSH
51732: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51736: LD_VAR 0 18
51740: PPUSH
51741: LD_VAR 0 7
51745: PPUSH
51746: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51750: LD_VAR 0 18
51754: PPUSH
51755: CALL_OW 181
// end ; continue ;
51759: GO 51411
// end ; if not cleaners or not tmp in cleaners then
51761: LD_VAR 0 6
51765: NOT
51766: PUSH
51767: LD_VAR 0 13
51771: PUSH
51772: LD_VAR 0 6
51776: IN
51777: NOT
51778: OR
51779: IFFALSE 52086
// begin if dep then
51781: LD_VAR 0 17
51785: IFFALSE 51921
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51787: LD_ADDR_VAR 0 16
51791: PUSH
51792: LD_VAR 0 17
51796: PUSH
51797: LD_INT 1
51799: ARRAY
51800: PPUSH
51801: CALL_OW 250
51805: PPUSH
51806: LD_VAR 0 17
51810: PUSH
51811: LD_INT 1
51813: ARRAY
51814: PPUSH
51815: CALL_OW 254
51819: PPUSH
51820: LD_INT 5
51822: PPUSH
51823: CALL_OW 272
51827: PUSH
51828: LD_VAR 0 17
51832: PUSH
51833: LD_INT 1
51835: ARRAY
51836: PPUSH
51837: CALL_OW 251
51841: PPUSH
51842: LD_VAR 0 17
51846: PUSH
51847: LD_INT 1
51849: ARRAY
51850: PPUSH
51851: CALL_OW 254
51855: PPUSH
51856: LD_INT 5
51858: PPUSH
51859: CALL_OW 273
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51868: LD_VAR 0 16
51872: PUSH
51873: LD_INT 1
51875: ARRAY
51876: PPUSH
51877: LD_VAR 0 16
51881: PUSH
51882: LD_INT 2
51884: ARRAY
51885: PPUSH
51886: CALL_OW 488
51890: IFFALSE 51921
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51892: LD_VAR 0 13
51896: PPUSH
51897: LD_VAR 0 16
51901: PUSH
51902: LD_INT 1
51904: ARRAY
51905: PPUSH
51906: LD_VAR 0 16
51910: PUSH
51911: LD_INT 2
51913: ARRAY
51914: PPUSH
51915: CALL_OW 111
// continue ;
51919: GO 51411
// end ; end ; r := GetDir ( tmp ) ;
51921: LD_ADDR_VAR 0 15
51925: PUSH
51926: LD_VAR 0 13
51930: PPUSH
51931: CALL_OW 254
51935: ST_TO_ADDR
// if r = 5 then
51936: LD_VAR 0 15
51940: PUSH
51941: LD_INT 5
51943: EQUAL
51944: IFFALSE 51954
// r := 0 ;
51946: LD_ADDR_VAR 0 15
51950: PUSH
51951: LD_INT 0
51953: ST_TO_ADDR
// for j = r to 5 do
51954: LD_ADDR_VAR 0 10
51958: PUSH
51959: DOUBLE
51960: LD_VAR 0 15
51964: DEC
51965: ST_TO_ADDR
51966: LD_INT 5
51968: PUSH
51969: FOR_TO
51970: IFFALSE 52084
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51972: LD_ADDR_VAR 0 11
51976: PUSH
51977: LD_VAR 0 13
51981: PPUSH
51982: CALL_OW 250
51986: PPUSH
51987: LD_VAR 0 10
51991: PPUSH
51992: LD_INT 2
51994: PPUSH
51995: CALL_OW 272
51999: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52000: LD_ADDR_VAR 0 12
52004: PUSH
52005: LD_VAR 0 13
52009: PPUSH
52010: CALL_OW 251
52014: PPUSH
52015: LD_VAR 0 10
52019: PPUSH
52020: LD_INT 2
52022: PPUSH
52023: CALL_OW 273
52027: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52028: LD_VAR 0 11
52032: PPUSH
52033: LD_VAR 0 12
52037: PPUSH
52038: CALL_OW 488
52042: PUSH
52043: LD_VAR 0 11
52047: PPUSH
52048: LD_VAR 0 12
52052: PPUSH
52053: CALL_OW 428
52057: NOT
52058: AND
52059: IFFALSE 52082
// begin ComMoveXY ( tmp , _x , _y ) ;
52061: LD_VAR 0 13
52065: PPUSH
52066: LD_VAR 0 11
52070: PPUSH
52071: LD_VAR 0 12
52075: PPUSH
52076: CALL_OW 111
// break ;
52080: GO 52084
// end ; end ;
52082: GO 51969
52084: POP
52085: POP
// end ; end ;
52086: GO 51411
52088: POP
52089: POP
// end ;
52090: LD_VAR 0 8
52094: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52095: LD_INT 0
52097: PPUSH
// result := true ;
52098: LD_ADDR_VAR 0 3
52102: PUSH
52103: LD_INT 1
52105: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52106: LD_VAR 0 2
52110: PUSH
52111: LD_INT 24
52113: DOUBLE
52114: EQUAL
52115: IFTRUE 52125
52117: LD_INT 33
52119: DOUBLE
52120: EQUAL
52121: IFTRUE 52125
52123: GO 52150
52125: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52126: LD_ADDR_VAR 0 3
52130: PUSH
52131: LD_INT 32
52133: PPUSH
52134: LD_VAR 0 1
52138: PPUSH
52139: CALL_OW 321
52143: PUSH
52144: LD_INT 2
52146: EQUAL
52147: ST_TO_ADDR
52148: GO 52466
52150: LD_INT 20
52152: DOUBLE
52153: EQUAL
52154: IFTRUE 52158
52156: GO 52183
52158: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52159: LD_ADDR_VAR 0 3
52163: PUSH
52164: LD_INT 6
52166: PPUSH
52167: LD_VAR 0 1
52171: PPUSH
52172: CALL_OW 321
52176: PUSH
52177: LD_INT 2
52179: EQUAL
52180: ST_TO_ADDR
52181: GO 52466
52183: LD_INT 22
52185: DOUBLE
52186: EQUAL
52187: IFTRUE 52197
52189: LD_INT 36
52191: DOUBLE
52192: EQUAL
52193: IFTRUE 52197
52195: GO 52222
52197: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52198: LD_ADDR_VAR 0 3
52202: PUSH
52203: LD_INT 15
52205: PPUSH
52206: LD_VAR 0 1
52210: PPUSH
52211: CALL_OW 321
52215: PUSH
52216: LD_INT 2
52218: EQUAL
52219: ST_TO_ADDR
52220: GO 52466
52222: LD_INT 30
52224: DOUBLE
52225: EQUAL
52226: IFTRUE 52230
52228: GO 52255
52230: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52231: LD_ADDR_VAR 0 3
52235: PUSH
52236: LD_INT 20
52238: PPUSH
52239: LD_VAR 0 1
52243: PPUSH
52244: CALL_OW 321
52248: PUSH
52249: LD_INT 2
52251: EQUAL
52252: ST_TO_ADDR
52253: GO 52466
52255: LD_INT 28
52257: DOUBLE
52258: EQUAL
52259: IFTRUE 52269
52261: LD_INT 21
52263: DOUBLE
52264: EQUAL
52265: IFTRUE 52269
52267: GO 52294
52269: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52270: LD_ADDR_VAR 0 3
52274: PUSH
52275: LD_INT 21
52277: PPUSH
52278: LD_VAR 0 1
52282: PPUSH
52283: CALL_OW 321
52287: PUSH
52288: LD_INT 2
52290: EQUAL
52291: ST_TO_ADDR
52292: GO 52466
52294: LD_INT 16
52296: DOUBLE
52297: EQUAL
52298: IFTRUE 52302
52300: GO 52327
52302: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52303: LD_ADDR_VAR 0 3
52307: PUSH
52308: LD_INT 84
52310: PPUSH
52311: LD_VAR 0 1
52315: PPUSH
52316: CALL_OW 321
52320: PUSH
52321: LD_INT 2
52323: EQUAL
52324: ST_TO_ADDR
52325: GO 52466
52327: LD_INT 19
52329: DOUBLE
52330: EQUAL
52331: IFTRUE 52341
52333: LD_INT 23
52335: DOUBLE
52336: EQUAL
52337: IFTRUE 52341
52339: GO 52366
52341: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52342: LD_ADDR_VAR 0 3
52346: PUSH
52347: LD_INT 83
52349: PPUSH
52350: LD_VAR 0 1
52354: PPUSH
52355: CALL_OW 321
52359: PUSH
52360: LD_INT 2
52362: EQUAL
52363: ST_TO_ADDR
52364: GO 52466
52366: LD_INT 17
52368: DOUBLE
52369: EQUAL
52370: IFTRUE 52374
52372: GO 52399
52374: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52375: LD_ADDR_VAR 0 3
52379: PUSH
52380: LD_INT 39
52382: PPUSH
52383: LD_VAR 0 1
52387: PPUSH
52388: CALL_OW 321
52392: PUSH
52393: LD_INT 2
52395: EQUAL
52396: ST_TO_ADDR
52397: GO 52466
52399: LD_INT 18
52401: DOUBLE
52402: EQUAL
52403: IFTRUE 52407
52405: GO 52432
52407: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52408: LD_ADDR_VAR 0 3
52412: PUSH
52413: LD_INT 40
52415: PPUSH
52416: LD_VAR 0 1
52420: PPUSH
52421: CALL_OW 321
52425: PUSH
52426: LD_INT 2
52428: EQUAL
52429: ST_TO_ADDR
52430: GO 52466
52432: LD_INT 27
52434: DOUBLE
52435: EQUAL
52436: IFTRUE 52440
52438: GO 52465
52440: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52441: LD_ADDR_VAR 0 3
52445: PUSH
52446: LD_INT 35
52448: PPUSH
52449: LD_VAR 0 1
52453: PPUSH
52454: CALL_OW 321
52458: PUSH
52459: LD_INT 2
52461: EQUAL
52462: ST_TO_ADDR
52463: GO 52466
52465: POP
// end ;
52466: LD_VAR 0 3
52470: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52471: LD_INT 0
52473: PPUSH
52474: PPUSH
52475: PPUSH
52476: PPUSH
52477: PPUSH
52478: PPUSH
52479: PPUSH
52480: PPUSH
52481: PPUSH
52482: PPUSH
52483: PPUSH
// result := false ;
52484: LD_ADDR_VAR 0 6
52488: PUSH
52489: LD_INT 0
52491: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52492: LD_VAR 0 1
52496: NOT
52497: PUSH
52498: LD_VAR 0 1
52502: PPUSH
52503: CALL_OW 266
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: IN
52518: NOT
52519: OR
52520: PUSH
52521: LD_VAR 0 2
52525: NOT
52526: OR
52527: PUSH
52528: LD_VAR 0 5
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: LD_INT 2
52541: PUSH
52542: LD_INT 3
52544: PUSH
52545: LD_INT 4
52547: PUSH
52548: LD_INT 5
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: IN
52559: NOT
52560: OR
52561: PUSH
52562: LD_VAR 0 3
52566: PPUSH
52567: LD_VAR 0 4
52571: PPUSH
52572: CALL_OW 488
52576: NOT
52577: OR
52578: IFFALSE 52582
// exit ;
52580: GO 53318
// side := GetSide ( depot ) ;
52582: LD_ADDR_VAR 0 9
52586: PUSH
52587: LD_VAR 0 1
52591: PPUSH
52592: CALL_OW 255
52596: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52597: LD_VAR 0 9
52601: PPUSH
52602: LD_VAR 0 2
52606: PPUSH
52607: CALL 52095 0 2
52611: NOT
52612: IFFALSE 52616
// exit ;
52614: GO 53318
// pom := GetBase ( depot ) ;
52616: LD_ADDR_VAR 0 10
52620: PUSH
52621: LD_VAR 0 1
52625: PPUSH
52626: CALL_OW 274
52630: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52631: LD_ADDR_VAR 0 11
52635: PUSH
52636: LD_VAR 0 2
52640: PPUSH
52641: LD_VAR 0 1
52645: PPUSH
52646: CALL_OW 248
52650: PPUSH
52651: CALL_OW 450
52655: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52656: LD_VAR 0 10
52660: PPUSH
52661: LD_INT 1
52663: PPUSH
52664: CALL_OW 275
52668: PUSH
52669: LD_VAR 0 11
52673: PUSH
52674: LD_INT 1
52676: ARRAY
52677: GREATEREQUAL
52678: PUSH
52679: LD_VAR 0 10
52683: PPUSH
52684: LD_INT 2
52686: PPUSH
52687: CALL_OW 275
52691: PUSH
52692: LD_VAR 0 11
52696: PUSH
52697: LD_INT 2
52699: ARRAY
52700: GREATEREQUAL
52701: AND
52702: PUSH
52703: LD_VAR 0 10
52707: PPUSH
52708: LD_INT 3
52710: PPUSH
52711: CALL_OW 275
52715: PUSH
52716: LD_VAR 0 11
52720: PUSH
52721: LD_INT 3
52723: ARRAY
52724: GREATEREQUAL
52725: AND
52726: NOT
52727: IFFALSE 52731
// exit ;
52729: GO 53318
// if GetBType ( depot ) = b_depot then
52731: LD_VAR 0 1
52735: PPUSH
52736: CALL_OW 266
52740: PUSH
52741: LD_INT 0
52743: EQUAL
52744: IFFALSE 52756
// dist := 28 else
52746: LD_ADDR_VAR 0 14
52750: PUSH
52751: LD_INT 28
52753: ST_TO_ADDR
52754: GO 52764
// dist := 36 ;
52756: LD_ADDR_VAR 0 14
52760: PUSH
52761: LD_INT 36
52763: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52764: LD_VAR 0 1
52768: PPUSH
52769: LD_VAR 0 3
52773: PPUSH
52774: LD_VAR 0 4
52778: PPUSH
52779: CALL_OW 297
52783: PUSH
52784: LD_VAR 0 14
52788: GREATER
52789: IFFALSE 52793
// exit ;
52791: GO 53318
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52793: LD_ADDR_VAR 0 12
52797: PUSH
52798: LD_VAR 0 2
52802: PPUSH
52803: LD_VAR 0 3
52807: PPUSH
52808: LD_VAR 0 4
52812: PPUSH
52813: LD_VAR 0 5
52817: PPUSH
52818: LD_VAR 0 1
52822: PPUSH
52823: CALL_OW 248
52827: PPUSH
52828: LD_INT 0
52830: PPUSH
52831: CALL 53323 0 6
52835: ST_TO_ADDR
// if not hexes then
52836: LD_VAR 0 12
52840: NOT
52841: IFFALSE 52845
// exit ;
52843: GO 53318
// hex := GetHexInfo ( x , y ) ;
52845: LD_ADDR_VAR 0 15
52849: PUSH
52850: LD_VAR 0 3
52854: PPUSH
52855: LD_VAR 0 4
52859: PPUSH
52860: CALL_OW 546
52864: ST_TO_ADDR
// if hex [ 1 ] then
52865: LD_VAR 0 15
52869: PUSH
52870: LD_INT 1
52872: ARRAY
52873: IFFALSE 52877
// exit ;
52875: GO 53318
// height := hex [ 2 ] ;
52877: LD_ADDR_VAR 0 13
52881: PUSH
52882: LD_VAR 0 15
52886: PUSH
52887: LD_INT 2
52889: ARRAY
52890: ST_TO_ADDR
// for i = 1 to hexes do
52891: LD_ADDR_VAR 0 7
52895: PUSH
52896: DOUBLE
52897: LD_INT 1
52899: DEC
52900: ST_TO_ADDR
52901: LD_VAR 0 12
52905: PUSH
52906: FOR_TO
52907: IFFALSE 53237
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52909: LD_VAR 0 12
52913: PUSH
52914: LD_VAR 0 7
52918: ARRAY
52919: PUSH
52920: LD_INT 1
52922: ARRAY
52923: PPUSH
52924: LD_VAR 0 12
52928: PUSH
52929: LD_VAR 0 7
52933: ARRAY
52934: PUSH
52935: LD_INT 2
52937: ARRAY
52938: PPUSH
52939: CALL_OW 488
52943: NOT
52944: PUSH
52945: LD_VAR 0 12
52949: PUSH
52950: LD_VAR 0 7
52954: ARRAY
52955: PUSH
52956: LD_INT 1
52958: ARRAY
52959: PPUSH
52960: LD_VAR 0 12
52964: PUSH
52965: LD_VAR 0 7
52969: ARRAY
52970: PUSH
52971: LD_INT 2
52973: ARRAY
52974: PPUSH
52975: CALL_OW 428
52979: PUSH
52980: LD_INT 0
52982: GREATER
52983: OR
52984: PUSH
52985: LD_VAR 0 12
52989: PUSH
52990: LD_VAR 0 7
52994: ARRAY
52995: PUSH
52996: LD_INT 1
52998: ARRAY
52999: PPUSH
53000: LD_VAR 0 12
53004: PUSH
53005: LD_VAR 0 7
53009: ARRAY
53010: PUSH
53011: LD_INT 2
53013: ARRAY
53014: PPUSH
53015: CALL_OW 351
53019: OR
53020: IFFALSE 53026
// exit ;
53022: POP
53023: POP
53024: GO 53318
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53026: LD_ADDR_VAR 0 8
53030: PUSH
53031: LD_VAR 0 12
53035: PUSH
53036: LD_VAR 0 7
53040: ARRAY
53041: PUSH
53042: LD_INT 1
53044: ARRAY
53045: PPUSH
53046: LD_VAR 0 12
53050: PUSH
53051: LD_VAR 0 7
53055: ARRAY
53056: PUSH
53057: LD_INT 2
53059: ARRAY
53060: PPUSH
53061: CALL_OW 546
53065: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53066: LD_VAR 0 8
53070: PUSH
53071: LD_INT 1
53073: ARRAY
53074: PUSH
53075: LD_VAR 0 8
53079: PUSH
53080: LD_INT 2
53082: ARRAY
53083: PUSH
53084: LD_VAR 0 13
53088: PUSH
53089: LD_INT 2
53091: PLUS
53092: GREATER
53093: OR
53094: PUSH
53095: LD_VAR 0 8
53099: PUSH
53100: LD_INT 2
53102: ARRAY
53103: PUSH
53104: LD_VAR 0 13
53108: PUSH
53109: LD_INT 2
53111: MINUS
53112: LESS
53113: OR
53114: PUSH
53115: LD_VAR 0 8
53119: PUSH
53120: LD_INT 3
53122: ARRAY
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: LD_INT 8
53129: PUSH
53130: LD_INT 9
53132: PUSH
53133: LD_INT 10
53135: PUSH
53136: LD_INT 11
53138: PUSH
53139: LD_INT 12
53141: PUSH
53142: LD_INT 13
53144: PUSH
53145: LD_INT 16
53147: PUSH
53148: LD_INT 17
53150: PUSH
53151: LD_INT 18
53153: PUSH
53154: LD_INT 19
53156: PUSH
53157: LD_INT 20
53159: PUSH
53160: LD_INT 21
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: IN
53178: NOT
53179: OR
53180: PUSH
53181: LD_VAR 0 8
53185: PUSH
53186: LD_INT 5
53188: ARRAY
53189: NOT
53190: OR
53191: PUSH
53192: LD_VAR 0 8
53196: PUSH
53197: LD_INT 6
53199: ARRAY
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: LD_INT 7
53209: PUSH
53210: LD_INT 9
53212: PUSH
53213: LD_INT 10
53215: PUSH
53216: LD_INT 11
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: IN
53227: NOT
53228: OR
53229: IFFALSE 53235
// exit ;
53231: POP
53232: POP
53233: GO 53318
// end ;
53235: GO 52906
53237: POP
53238: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53239: LD_VAR 0 9
53243: PPUSH
53244: LD_VAR 0 3
53248: PPUSH
53249: LD_VAR 0 4
53253: PPUSH
53254: LD_INT 20
53256: PPUSH
53257: CALL 45270 0 4
53261: PUSH
53262: LD_INT 4
53264: ARRAY
53265: IFFALSE 53269
// exit ;
53267: GO 53318
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53269: LD_VAR 0 2
53273: PUSH
53274: LD_INT 29
53276: PUSH
53277: LD_INT 30
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: IN
53284: PUSH
53285: LD_VAR 0 3
53289: PPUSH
53290: LD_VAR 0 4
53294: PPUSH
53295: LD_VAR 0 9
53299: PPUSH
53300: CALL_OW 440
53304: NOT
53305: AND
53306: IFFALSE 53310
// exit ;
53308: GO 53318
// result := true ;
53310: LD_ADDR_VAR 0 6
53314: PUSH
53315: LD_INT 1
53317: ST_TO_ADDR
// end ;
53318: LD_VAR 0 6
53322: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53323: LD_INT 0
53325: PPUSH
53326: PPUSH
53327: PPUSH
53328: PPUSH
53329: PPUSH
53330: PPUSH
53331: PPUSH
53332: PPUSH
53333: PPUSH
53334: PPUSH
53335: PPUSH
53336: PPUSH
53337: PPUSH
53338: PPUSH
53339: PPUSH
53340: PPUSH
53341: PPUSH
53342: PPUSH
53343: PPUSH
53344: PPUSH
53345: PPUSH
53346: PPUSH
53347: PPUSH
53348: PPUSH
53349: PPUSH
53350: PPUSH
53351: PPUSH
53352: PPUSH
53353: PPUSH
53354: PPUSH
53355: PPUSH
53356: PPUSH
53357: PPUSH
53358: PPUSH
53359: PPUSH
53360: PPUSH
53361: PPUSH
53362: PPUSH
53363: PPUSH
53364: PPUSH
53365: PPUSH
53366: PPUSH
53367: PPUSH
53368: PPUSH
53369: PPUSH
53370: PPUSH
53371: PPUSH
53372: PPUSH
53373: PPUSH
53374: PPUSH
53375: PPUSH
53376: PPUSH
53377: PPUSH
53378: PPUSH
53379: PPUSH
53380: PPUSH
53381: PPUSH
53382: PPUSH
// result = [ ] ;
53383: LD_ADDR_VAR 0 7
53387: PUSH
53388: EMPTY
53389: ST_TO_ADDR
// temp_list = [ ] ;
53390: LD_ADDR_VAR 0 9
53394: PUSH
53395: EMPTY
53396: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53397: LD_VAR 0 4
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: LD_INT 3
53413: PUSH
53414: LD_INT 4
53416: PUSH
53417: LD_INT 5
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: IN
53428: NOT
53429: PUSH
53430: LD_VAR 0 1
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: IN
53445: PUSH
53446: LD_VAR 0 5
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: LD_INT 2
53456: PUSH
53457: LD_INT 3
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: LIST
53464: IN
53465: NOT
53466: AND
53467: OR
53468: IFFALSE 53472
// exit ;
53470: GO 71863
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53472: LD_VAR 0 1
53476: PUSH
53477: LD_INT 6
53479: PUSH
53480: LD_INT 7
53482: PUSH
53483: LD_INT 8
53485: PUSH
53486: LD_INT 13
53488: PUSH
53489: LD_INT 12
53491: PUSH
53492: LD_INT 15
53494: PUSH
53495: LD_INT 11
53497: PUSH
53498: LD_INT 14
53500: PUSH
53501: LD_INT 10
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: IN
53515: IFFALSE 53525
// btype = b_lab ;
53517: LD_ADDR_VAR 0 1
53521: PUSH
53522: LD_INT 6
53524: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53525: LD_VAR 0 6
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: LD_INT 1
53535: PUSH
53536: LD_INT 2
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: LIST
53543: IN
53544: NOT
53545: PUSH
53546: LD_VAR 0 1
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: LD_INT 2
53559: PUSH
53560: LD_INT 3
53562: PUSH
53563: LD_INT 6
53565: PUSH
53566: LD_INT 36
53568: PUSH
53569: LD_INT 4
53571: PUSH
53572: LD_INT 5
53574: PUSH
53575: LD_INT 31
53577: PUSH
53578: LD_INT 32
53580: PUSH
53581: LD_INT 33
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: IN
53597: NOT
53598: PUSH
53599: LD_VAR 0 6
53603: PUSH
53604: LD_INT 1
53606: EQUAL
53607: AND
53608: OR
53609: PUSH
53610: LD_VAR 0 1
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: LD_INT 3
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: IN
53625: NOT
53626: PUSH
53627: LD_VAR 0 6
53631: PUSH
53632: LD_INT 2
53634: EQUAL
53635: AND
53636: OR
53637: IFFALSE 53647
// mode = 0 ;
53639: LD_ADDR_VAR 0 6
53643: PUSH
53644: LD_INT 0
53646: ST_TO_ADDR
// case mode of 0 :
53647: LD_VAR 0 6
53651: PUSH
53652: LD_INT 0
53654: DOUBLE
53655: EQUAL
53656: IFTRUE 53660
53658: GO 65113
53660: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53661: LD_ADDR_VAR 0 11
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: LD_INT 1
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: LD_INT 2
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: LD_INT 2
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: LD_INT 2
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: LD_INT 2
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: LD_INT 3
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: LD_INT 3
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53854: LD_ADDR_VAR 0 12
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 2
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 2
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 3
54011: NEG
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 3
54022: NEG
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54050: LD_ADDR_VAR 0 13
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: LD_INT 2
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 2
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 2
54153: PUSH
54154: LD_INT 2
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: NEG
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 2
54185: NEG
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: LD_INT 3
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 3
54209: NEG
54210: PUSH
54211: LD_INT 2
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 3
54221: NEG
54222: PUSH
54223: LD_INT 3
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54249: LD_ADDR_VAR 0 14
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: LD_INT 2
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 2
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: LD_INT 2
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 2
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: LD_INT 3
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: LD_INT 3
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: LD_INT 2
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54445: LD_ADDR_VAR 0 15
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 2
54568: NEG
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 2
54579: NEG
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 2
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 3
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 3
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54638: LD_ADDR_VAR 0 16
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: LD_INT 2
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 2
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 2
54741: PUSH
54742: LD_INT 2
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: LD_INT 2
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 2
54773: NEG
54774: PUSH
54775: LD_INT 2
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 3
54785: PUSH
54786: LD_INT 2
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 3
54795: PUSH
54796: LD_INT 3
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 2
54805: PUSH
54806: LD_INT 3
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54831: LD_ADDR_VAR 0 17
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: LD_INT 2
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: LD_INT 2
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: LD_INT 1
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 2
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 2
54966: PUSH
54967: LD_INT 2
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: LD_INT 2
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: LD_INT 2
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 2
55018: NEG
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 2
55030: NEG
55031: PUSH
55032: LD_INT 2
55034: NEG
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55061: LD_ADDR_VAR 0 18
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: NEG
55131: PUSH
55132: LD_INT 1
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: LD_INT 2
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: LD_INT 2
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 2
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 2
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 2
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: LD_INT 2
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 2
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: NEG
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 2
55248: NEG
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 2
55260: NEG
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55291: LD_ADDR_VAR 0 19
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: LD_INT 2
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 2
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 2
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: LD_INT 2
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: LD_INT 2
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 2
55478: NEG
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 2
55490: NEG
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55521: LD_ADDR_VAR 0 20
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 1
55590: NEG
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 2
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 2
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 2
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: LD_INT 2
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: NEG
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 2
55708: NEG
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 2
55720: NEG
55721: PUSH
55722: LD_INT 2
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55751: LD_ADDR_VAR 0 21
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: LD_INT 2
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 2
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 2
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 2
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 2
55927: NEG
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 2
55938: NEG
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 2
55950: NEG
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55981: LD_ADDR_VAR 0 22
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: LD_INT 2
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 2
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: LD_INT 2
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 2
56157: NEG
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 2
56168: NEG
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 2
56180: NEG
56181: PUSH
56182: LD_INT 2
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56211: LD_ADDR_VAR 0 23
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: LD_INT 2
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 2
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 2
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 2
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 2
56346: PUSH
56347: LD_INT 2
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: LD_INT 2
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: LD_INT 1
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 2
56387: NEG
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 2
56398: NEG
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 2
56410: NEG
56411: PUSH
56412: LD_INT 2
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: NEG
56423: PUSH
56424: LD_INT 3
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: LD_INT 3
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: LD_INT 2
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 2
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56491: LD_ADDR_VAR 0 24
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: LD_INT 1
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: LD_INT 0
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: LD_INT 2
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 2
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 2
56626: PUSH
56627: LD_INT 2
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: LD_INT 2
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 2
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 1
56656: NEG
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 2
56667: NEG
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 2
56690: NEG
56691: PUSH
56692: LD_INT 2
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 2
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 3
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 3
56734: PUSH
56735: LD_INT 2
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56767: LD_ADDR_VAR 0 25
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 0
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: LD_INT 1
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 2
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 2
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: LD_INT 2
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: LD_INT 2
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 2
56943: NEG
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: LD_INT 1
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: LD_INT 2
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 3
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 3
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: LD_INT 3
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: LD_INT 3
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57041: LD_ADDR_VAR 0 26
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: LD_INT 2
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: LD_INT 2
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 2
57166: PUSH
57167: LD_INT 1
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 2
57217: NEG
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 2
57240: NEG
57241: PUSH
57242: LD_INT 2
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 2
57252: PUSH
57253: LD_INT 3
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: LD_INT 3
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: LD_INT 2
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 2
57283: NEG
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57317: LD_ADDR_VAR 0 27
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: LD_INT 2
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 2
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 2
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 2
57452: PUSH
57453: LD_INT 2
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 1
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: LD_INT 2
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 2
57493: NEG
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 2
57504: NEG
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 2
57516: NEG
57517: PUSH
57518: LD_INT 2
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 3
57550: NEG
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 3
57562: NEG
57563: PUSH
57564: LD_INT 2
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57597: LD_ADDR_VAR 0 28
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: LD_INT 1
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: LD_INT 1
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: LD_INT 2
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: LD_INT 2
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 2
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: NEG
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: LD_INT 2
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 2
57808: NEG
57809: PUSH
57810: LD_INT 3
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: LD_INT 3
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 3
57832: NEG
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 3
57844: NEG
57845: PUSH
57846: LD_INT 2
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57879: LD_ADDR_VAR 0 29
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: NEG
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_INT 2
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 2
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 2
58045: NEG
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 2
58057: NEG
58058: PUSH
58059: LD_INT 2
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: LD_INT 3
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 2
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 3
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: LD_INT 3
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 3
58123: NEG
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58158: LD_ADDR_VAR 0 30
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: NEG
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: NEG
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 2
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 2
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 2
58293: PUSH
58294: LD_INT 2
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: NEG
58314: PUSH
58315: LD_INT 1
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 2
58324: NEG
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 2
58335: NEG
58336: PUSH
58337: LD_INT 1
58339: NEG
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: LD_INT 3
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: LD_INT 2
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 3
58370: PUSH
58371: LD_INT 2
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 2
58380: PUSH
58381: LD_INT 3
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 2
58390: NEG
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 3
58401: NEG
58402: PUSH
58403: LD_INT 1
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58436: LD_ADDR_VAR 0 31
58440: PUSH
58441: LD_INT 0
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: LD_INT 1
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 1
58505: NEG
58506: PUSH
58507: LD_INT 1
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: LD_INT 2
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 2
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 2
58560: PUSH
58561: LD_INT 2
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: LD_INT 2
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 0
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 2
58601: NEG
58602: PUSH
58603: LD_INT 1
58605: NEG
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 2
58613: NEG
58614: PUSH
58615: LD_INT 2
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 2
58625: NEG
58626: PUSH
58627: LD_INT 3
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 2
58637: PUSH
58638: LD_INT 1
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 3
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: LD_INT 3
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: LD_INT 2
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 3
58679: NEG
58680: PUSH
58681: LD_INT 2
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58714: LD_ADDR_VAR 0 32
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: LD_INT 2
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: LD_INT 2
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: PUSH
58819: LD_INT 1
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 2
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 2
58839: PUSH
58840: LD_INT 2
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 2
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: NEG
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 2
58880: NEG
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 2
58891: NEG
58892: PUSH
58893: LD_INT 1
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: LD_INT 3
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: LD_INT 2
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 3
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: LD_INT 3
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: NEG
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 3
58957: NEG
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58992: LD_ADDR_VAR 0 33
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 0
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 1
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 0
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: NEG
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: LD_INT 2
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 2
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: LD_INT 2
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: LD_INT 2
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: NEG
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 2
59147: NEG
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 2
59158: NEG
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 2
59170: NEG
59171: PUSH
59172: LD_INT 2
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 2
59182: NEG
59183: PUSH
59184: LD_INT 3
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 2
59194: PUSH
59195: LD_INT 1
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 3
59205: PUSH
59206: LD_INT 1
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: LD_INT 3
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: LD_INT 2
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 3
59236: NEG
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59271: LD_ADDR_VAR 0 34
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: LD_INT 1
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 1
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 1
59329: NEG
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: LD_INT 2
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: LD_INT 2
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 2
59386: PUSH
59387: LD_INT 1
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 2
59396: PUSH
59397: LD_INT 2
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: LD_INT 2
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 2
59427: NEG
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 2
59438: NEG
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 2
59450: NEG
59451: PUSH
59452: LD_INT 2
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: LD_INT 3
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 1
59474: PUSH
59475: LD_INT 2
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 3
59485: PUSH
59486: LD_INT 2
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 2
59495: PUSH
59496: LD_INT 3
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 2
59505: NEG
59506: PUSH
59507: LD_INT 1
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 3
59516: NEG
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59551: LD_ADDR_VAR 0 35
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 1
59589: PUSH
59590: LD_INT 1
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: LD_INT 1
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 2
59632: PUSH
59633: LD_INT 1
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 2
59642: NEG
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59663: LD_ADDR_VAR 0 36
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: LD_INT 1
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 1
59701: PUSH
59702: LD_INT 1
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 0
59711: PUSH
59712: LD_INT 1
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 1
59721: NEG
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 1
59732: NEG
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: LD_INT 2
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 1
59756: PUSH
59757: LD_INT 2
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59775: LD_ADDR_VAR 0 37
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: LD_INT 0
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: LD_INT 1
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: LD_INT 1
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 1
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 1
59867: NEG
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59887: LD_ADDR_VAR 0 38
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 2
59968: PUSH
59969: LD_INT 1
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 2
59978: NEG
59979: PUSH
59980: LD_INT 1
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59999: LD_ADDR_VAR 0 39
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: LD_INT 1
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: NEG
60081: PUSH
60082: LD_INT 2
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: LD_INT 2
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60111: LD_ADDR_VAR 0 40
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: LD_INT 1
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 1
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: LD_INT 1
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: LD_INT 0
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: LD_INT 1
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60223: LD_ADDR_VAR 0 41
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 1
60261: PUSH
60262: LD_INT 1
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 0
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 1
60281: NEG
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: NEG
60305: PUSH
60306: LD_INT 2
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 1
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 2
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 2
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 2
60347: PUSH
60348: LD_INT 2
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: LD_INT 2
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 2
60378: NEG
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 2
60389: NEG
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 2
60401: NEG
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 2
60413: NEG
60414: PUSH
60415: LD_INT 3
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 2
60425: PUSH
60426: LD_INT 1
60428: NEG
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 3
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 3
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 3
60456: PUSH
60457: LD_INT 2
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 3
60466: PUSH
60467: LD_INT 3
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 2
60476: PUSH
60477: LD_INT 3
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 2
60486: NEG
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 3
60497: NEG
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 3
60508: NEG
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 3
60520: NEG
60521: PUSH
60522: LD_INT 2
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 3
60532: NEG
60533: PUSH
60534: LD_INT 3
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60573: LD_ADDR_VAR 0 42
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: LD_INT 1
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 1
60631: NEG
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 1
60642: NEG
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: LD_INT 2
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 2
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 2
60688: PUSH
60689: LD_INT 1
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 2
60698: PUSH
60699: LD_INT 2
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: PUSH
60709: LD_INT 2
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 0
60718: PUSH
60719: LD_INT 2
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 1
60728: NEG
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 2
60739: NEG
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 2
60751: NEG
60752: PUSH
60753: LD_INT 2
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 2
60763: NEG
60764: PUSH
60765: LD_INT 3
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: LD_INT 3
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: LD_INT 3
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: LD_INT 2
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 3
60809: PUSH
60810: LD_INT 2
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 3
60819: PUSH
60820: LD_INT 3
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 2
60829: PUSH
60830: LD_INT 3
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 1
60839: PUSH
60840: LD_INT 3
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: LD_INT 3
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: LD_INT 2
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 3
60870: NEG
60871: PUSH
60872: LD_INT 2
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 3
60882: NEG
60883: PUSH
60884: LD_INT 3
60886: NEG
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60923: LD_ADDR_VAR 0 43
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 1
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 1
60961: PUSH
60962: LD_INT 1
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 0
60971: PUSH
60972: LD_INT 1
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 1
60981: NEG
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: NEG
60993: PUSH
60994: LD_INT 1
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 1
61004: NEG
61005: PUSH
61006: LD_INT 2
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: LD_INT 2
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 2
61038: PUSH
61039: LD_INT 0
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 2
61048: PUSH
61049: LD_INT 1
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 1
61058: PUSH
61059: LD_INT 2
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: LD_INT 2
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 1
61078: NEG
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 2
61089: NEG
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 2
61100: NEG
61101: PUSH
61102: LD_INT 1
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 1
61112: NEG
61113: PUSH
61114: LD_INT 3
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: LD_INT 3
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: PUSH
61136: LD_INT 2
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 2
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 3
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 3
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 1
61177: PUSH
61178: LD_INT 3
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: LD_INT 3
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 1
61197: NEG
61198: PUSH
61199: LD_INT 2
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 2
61208: NEG
61209: PUSH
61210: LD_INT 1
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 3
61219: NEG
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 3
61230: NEG
61231: PUSH
61232: LD_INT 1
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61271: LD_ADDR_VAR 0 44
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 1
61309: PUSH
61310: LD_INT 1
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: LD_INT 2
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 1
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 2
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 2
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 2
61395: PUSH
61396: LD_INT 2
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: LD_INT 2
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: LD_INT 1
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 2
61426: NEG
61427: PUSH
61428: LD_INT 0
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 2
61437: NEG
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 2
61449: NEG
61450: PUSH
61451: LD_INT 2
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 2
61461: NEG
61462: PUSH
61463: LD_INT 3
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 2
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 3
61484: PUSH
61485: LD_INT 0
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 3
61494: PUSH
61495: LD_INT 1
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 3
61504: PUSH
61505: LD_INT 2
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 3
61514: PUSH
61515: LD_INT 3
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 2
61524: PUSH
61525: LD_INT 3
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 2
61534: NEG
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 3
61545: NEG
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 3
61556: NEG
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 3
61568: NEG
61569: PUSH
61570: LD_INT 2
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 3
61580: NEG
61581: PUSH
61582: LD_INT 3
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61621: LD_ADDR_VAR 0 45
61625: PUSH
61626: LD_INT 0
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: LD_INT 1
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 0
61669: PUSH
61670: LD_INT 1
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 1
61690: NEG
61691: PUSH
61692: LD_INT 1
61694: NEG
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: NEG
61703: PUSH
61704: LD_INT 2
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 0
61714: PUSH
61715: LD_INT 2
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 1
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 2
61736: PUSH
61737: LD_INT 1
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 2
61746: PUSH
61747: LD_INT 2
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: LD_INT 2
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: LD_INT 2
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 2
61787: NEG
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 2
61799: NEG
61800: PUSH
61801: LD_INT 2
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 2
61811: NEG
61812: PUSH
61813: LD_INT 3
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: LD_INT 3
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: LD_INT 3
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 1
61846: PUSH
61847: LD_INT 2
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 3
61857: PUSH
61858: LD_INT 2
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 3
61867: PUSH
61868: LD_INT 3
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 2
61877: PUSH
61878: LD_INT 3
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 1
61887: PUSH
61888: LD_INT 3
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: LD_INT 3
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: LD_INT 2
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 3
61918: NEG
61919: PUSH
61920: LD_INT 2
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 3
61930: NEG
61931: PUSH
61932: LD_INT 3
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61971: LD_ADDR_VAR 0 46
61975: PUSH
61976: LD_INT 0
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 1
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: LD_INT 1
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: LD_INT 1
62044: NEG
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 1
62052: NEG
62053: PUSH
62054: LD_INT 2
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 0
62064: PUSH
62065: LD_INT 2
62067: NEG
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 2
62086: PUSH
62087: LD_INT 0
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 2
62096: PUSH
62097: LD_INT 1
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: LD_INT 2
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: LD_INT 2
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: LD_INT 1
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 2
62137: NEG
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 2
62148: NEG
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 1
62160: NEG
62161: PUSH
62162: LD_INT 3
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: LD_INT 3
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: PUSH
62184: LD_INT 2
62186: NEG
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 2
62194: PUSH
62195: LD_INT 1
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 3
62205: PUSH
62206: LD_INT 0
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 3
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: LD_INT 3
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 0
62235: PUSH
62236: LD_INT 3
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: NEG
62246: PUSH
62247: LD_INT 2
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 2
62256: NEG
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 3
62267: NEG
62268: PUSH
62269: LD_INT 0
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 3
62278: NEG
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62319: LD_ADDR_VAR 0 47
62323: PUSH
62324: LD_INT 0
62326: PUSH
62327: LD_INT 0
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 1
62347: PUSH
62348: LD_INT 0
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 1
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: LD_INT 1
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 1
62377: NEG
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 1
62388: NEG
62389: PUSH
62390: LD_INT 1
62392: NEG
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 1
62400: NEG
62401: PUSH
62402: LD_INT 2
62404: NEG
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 0
62412: PUSH
62413: LD_INT 2
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 1
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 2
62434: NEG
62435: PUSH
62436: LD_INT 1
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: NEG
62447: PUSH
62448: LD_INT 2
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62470: LD_ADDR_VAR 0 48
62474: PUSH
62475: LD_INT 0
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: LD_INT 1
62490: NEG
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 1
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: LD_INT 1
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 0
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: NEG
62529: PUSH
62530: LD_INT 0
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 1
62539: NEG
62540: PUSH
62541: LD_INT 1
62543: NEG
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 1
62551: NEG
62552: PUSH
62553: LD_INT 2
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 0
62563: PUSH
62564: LD_INT 2
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 1
62574: PUSH
62575: LD_INT 1
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 2
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 2
62595: PUSH
62596: LD_INT 1
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62617: LD_ADDR_VAR 0 49
62621: PUSH
62622: LD_INT 0
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 1
62655: PUSH
62656: LD_INT 1
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 0
62665: PUSH
62666: LD_INT 1
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 1
62675: NEG
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: NEG
62687: PUSH
62688: LD_INT 1
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 1
62698: PUSH
62699: LD_INT 1
62701: NEG
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 2
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 2
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 2
62729: PUSH
62730: LD_INT 2
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 1
62739: PUSH
62740: LD_INT 2
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62761: LD_ADDR_VAR 0 50
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: LD_INT 0
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: LD_INT 1
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 1
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 1
62799: PUSH
62800: LD_INT 1
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: LD_INT 1
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 1
62819: NEG
62820: PUSH
62821: LD_INT 0
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 1
62830: NEG
62831: PUSH
62832: LD_INT 1
62834: NEG
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 2
62842: PUSH
62843: LD_INT 1
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 2
62852: PUSH
62853: LD_INT 2
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 1
62862: PUSH
62863: LD_INT 2
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 0
62872: PUSH
62873: LD_INT 2
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 1
62882: NEG
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62905: LD_ADDR_VAR 0 51
62909: PUSH
62910: LD_INT 0
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: LD_INT 1
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 1
62933: PUSH
62934: LD_INT 0
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: LD_INT 1
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: LD_INT 1
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 1
62963: NEG
62964: PUSH
62965: LD_INT 0
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 1
62974: NEG
62975: PUSH
62976: LD_INT 1
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: LD_INT 2
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 0
62996: PUSH
62997: LD_INT 2
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: LD_INT 1
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 2
63017: NEG
63018: PUSH
63019: LD_INT 0
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 2
63028: NEG
63029: PUSH
63030: LD_INT 1
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63052: LD_ADDR_VAR 0 52
63056: PUSH
63057: LD_INT 0
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: LD_INT 1
63072: NEG
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 1
63090: PUSH
63091: LD_INT 1
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 0
63100: PUSH
63101: LD_INT 1
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 1
63110: NEG
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 1
63121: NEG
63122: PUSH
63123: LD_INT 1
63125: NEG
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 1
63133: NEG
63134: PUSH
63135: LD_INT 2
63137: NEG
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 1
63145: NEG
63146: PUSH
63147: LD_INT 1
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 2
63156: NEG
63157: PUSH
63158: LD_INT 0
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 2
63167: NEG
63168: PUSH
63169: LD_INT 1
63171: NEG
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 2
63179: NEG
63180: PUSH
63181: LD_INT 2
63183: NEG
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63203: LD_ADDR_VAR 0 53
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 0
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 1
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 0
63251: PUSH
63252: LD_INT 1
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: NEG
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 1
63272: NEG
63273: PUSH
63274: LD_INT 1
63276: NEG
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 1
63284: NEG
63285: PUSH
63286: LD_INT 2
63288: NEG
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: LD_INT 2
63299: NEG
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 2
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 2
63328: PUSH
63329: LD_INT 1
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 2
63338: PUSH
63339: LD_INT 2
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 1
63348: PUSH
63349: LD_INT 2
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: LD_INT 2
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: LD_INT 1
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 2
63379: NEG
63380: PUSH
63381: LD_INT 0
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 2
63390: NEG
63391: PUSH
63392: LD_INT 1
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 2
63402: NEG
63403: PUSH
63404: LD_INT 2
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63433: LD_ADDR_VAR 0 54
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 1
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 1
63471: PUSH
63472: LD_INT 1
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 1
63491: NEG
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 1
63502: NEG
63503: PUSH
63504: LD_INT 1
63506: NEG
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 1
63514: NEG
63515: PUSH
63516: LD_INT 2
63518: NEG
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 0
63526: PUSH
63527: LD_INT 2
63529: NEG
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 1
63537: PUSH
63538: LD_INT 1
63540: NEG
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 2
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 2
63568: PUSH
63569: LD_INT 2
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 1
63578: PUSH
63579: LD_INT 2
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: LD_INT 2
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 1
63598: NEG
63599: PUSH
63600: LD_INT 1
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 2
63609: NEG
63610: PUSH
63611: LD_INT 0
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 2
63620: NEG
63621: PUSH
63622: LD_INT 1
63624: NEG
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 2
63632: NEG
63633: PUSH
63634: LD_INT 2
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63663: LD_ADDR_VAR 0 55
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 1
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 1
63701: PUSH
63702: LD_INT 1
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 0
63711: PUSH
63712: LD_INT 1
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 1
63721: NEG
63722: PUSH
63723: LD_INT 0
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 1
63732: NEG
63733: PUSH
63734: LD_INT 1
63736: NEG
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 1
63744: NEG
63745: PUSH
63746: LD_INT 2
63748: NEG
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: LD_INT 2
63759: NEG
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 1
63767: PUSH
63768: LD_INT 1
63770: NEG
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 2
63778: PUSH
63779: LD_INT 0
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 2
63788: PUSH
63789: LD_INT 1
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 2
63798: PUSH
63799: LD_INT 2
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 1
63808: PUSH
63809: LD_INT 2
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 0
63818: PUSH
63819: LD_INT 2
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: LD_INT 1
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 2
63839: NEG
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 2
63850: NEG
63851: PUSH
63852: LD_INT 1
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 2
63862: NEG
63863: PUSH
63864: LD_INT 2
63866: NEG
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63893: LD_ADDR_VAR 0 56
63897: PUSH
63898: LD_INT 0
63900: PUSH
63901: LD_INT 0
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 0
63910: PUSH
63911: LD_INT 1
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 1
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 1
63931: PUSH
63932: LD_INT 1
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: LD_INT 1
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 1
63951: NEG
63952: PUSH
63953: LD_INT 0
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 1
63962: NEG
63963: PUSH
63964: LD_INT 1
63966: NEG
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 1
63974: NEG
63975: PUSH
63976: LD_INT 2
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: LD_INT 2
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 1
63997: PUSH
63998: LD_INT 1
64000: NEG
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 2
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 2
64018: PUSH
64019: LD_INT 1
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 2
64028: PUSH
64029: LD_INT 2
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 1
64038: PUSH
64039: LD_INT 2
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: LD_INT 2
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: LD_INT 1
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 2
64069: NEG
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 2
64080: NEG
64081: PUSH
64082: LD_INT 1
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 2
64092: NEG
64093: PUSH
64094: LD_INT 2
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64123: LD_ADDR_VAR 0 57
64127: PUSH
64128: LD_INT 0
64130: PUSH
64131: LD_INT 0
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 0
64140: PUSH
64141: LD_INT 1
64143: NEG
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 1
64151: PUSH
64152: LD_INT 0
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 1
64161: PUSH
64162: LD_INT 1
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 0
64171: PUSH
64172: LD_INT 1
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 1
64181: NEG
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 1
64192: NEG
64193: PUSH
64194: LD_INT 1
64196: NEG
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 1
64204: NEG
64205: PUSH
64206: LD_INT 2
64208: NEG
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: LD_INT 2
64219: NEG
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 1
64227: PUSH
64228: LD_INT 1
64230: NEG
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 2
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 2
64248: PUSH
64249: LD_INT 1
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 2
64258: PUSH
64259: LD_INT 2
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 1
64268: PUSH
64269: LD_INT 2
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 0
64278: PUSH
64279: LD_INT 2
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 1
64288: NEG
64289: PUSH
64290: LD_INT 1
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 2
64299: NEG
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 2
64310: NEG
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 2
64322: NEG
64323: PUSH
64324: LD_INT 2
64326: NEG
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64353: LD_ADDR_VAR 0 58
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: LD_INT 0
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 0
64370: PUSH
64371: LD_INT 1
64373: NEG
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 1
64381: PUSH
64382: LD_INT 0
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 1
64391: PUSH
64392: LD_INT 1
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: LD_INT 1
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 1
64411: NEG
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 1
64422: NEG
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 1
64434: NEG
64435: PUSH
64436: LD_INT 2
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: LD_INT 2
64449: NEG
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 1
64457: PUSH
64458: LD_INT 1
64460: NEG
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 2
64468: PUSH
64469: LD_INT 0
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 2
64478: PUSH
64479: LD_INT 1
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 2
64488: PUSH
64489: LD_INT 2
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 1
64498: PUSH
64499: LD_INT 2
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 0
64508: PUSH
64509: LD_INT 2
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 1
64518: NEG
64519: PUSH
64520: LD_INT 1
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 2
64529: NEG
64530: PUSH
64531: LD_INT 0
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 2
64540: NEG
64541: PUSH
64542: LD_INT 1
64544: NEG
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 2
64552: NEG
64553: PUSH
64554: LD_INT 2
64556: NEG
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64583: LD_ADDR_VAR 0 59
64587: PUSH
64588: LD_INT 0
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 0
64600: PUSH
64601: LD_INT 1
64603: NEG
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 1
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 1
64621: PUSH
64622: LD_INT 1
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 0
64631: PUSH
64632: LD_INT 1
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 1
64641: NEG
64642: PUSH
64643: LD_INT 0
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 1
64652: NEG
64653: PUSH
64654: LD_INT 1
64656: NEG
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64671: LD_ADDR_VAR 0 60
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: LD_INT 1
64691: NEG
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 1
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 1
64709: PUSH
64710: LD_INT 1
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 0
64719: PUSH
64720: LD_INT 1
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 1
64729: NEG
64730: PUSH
64731: LD_INT 0
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 1
64740: NEG
64741: PUSH
64742: LD_INT 1
64744: NEG
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64759: LD_ADDR_VAR 0 61
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 0
64776: PUSH
64777: LD_INT 1
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 1
64787: PUSH
64788: LD_INT 0
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 1
64797: PUSH
64798: LD_INT 1
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 0
64807: PUSH
64808: LD_INT 1
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 1
64817: NEG
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 1
64828: NEG
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64847: LD_ADDR_VAR 0 62
64851: PUSH
64852: LD_INT 0
64854: PUSH
64855: LD_INT 0
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: LD_INT 1
64867: NEG
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 1
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 1
64885: PUSH
64886: LD_INT 1
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 0
64895: PUSH
64896: LD_INT 1
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 1
64905: NEG
64906: PUSH
64907: LD_INT 0
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 1
64916: NEG
64917: PUSH
64918: LD_INT 1
64920: NEG
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64935: LD_ADDR_VAR 0 63
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: LD_INT 0
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 0
64952: PUSH
64953: LD_INT 1
64955: NEG
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 1
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 1
64973: PUSH
64974: LD_INT 1
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 0
64983: PUSH
64984: LD_INT 1
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 1
64993: NEG
64994: PUSH
64995: LD_INT 0
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 1
65004: NEG
65005: PUSH
65006: LD_INT 1
65008: NEG
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65023: LD_ADDR_VAR 0 64
65027: PUSH
65028: LD_INT 0
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 0
65040: PUSH
65041: LD_INT 1
65043: NEG
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 1
65051: PUSH
65052: LD_INT 0
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 1
65061: PUSH
65062: LD_INT 1
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: LD_INT 1
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 1
65081: NEG
65082: PUSH
65083: LD_INT 0
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 1
65092: NEG
65093: PUSH
65094: LD_INT 1
65096: NEG
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: ST_TO_ADDR
// end ; 1 :
65111: GO 71008
65113: LD_INT 1
65115: DOUBLE
65116: EQUAL
65117: IFTRUE 65121
65119: GO 67744
65121: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65122: LD_ADDR_VAR 0 11
65126: PUSH
65127: LD_INT 1
65129: NEG
65130: PUSH
65131: LD_INT 3
65133: NEG
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 0
65141: PUSH
65142: LD_INT 3
65144: NEG
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: LD_INT 2
65155: NEG
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: LIST
65165: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65166: LD_ADDR_VAR 0 12
65170: PUSH
65171: LD_INT 2
65173: PUSH
65174: LD_INT 1
65176: NEG
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 3
65184: PUSH
65185: LD_INT 0
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 3
65194: PUSH
65195: LD_INT 1
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: LIST
65206: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65207: LD_ADDR_VAR 0 13
65211: PUSH
65212: LD_INT 3
65214: PUSH
65215: LD_INT 2
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 3
65224: PUSH
65225: LD_INT 3
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 2
65234: PUSH
65235: LD_INT 3
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: LIST
65246: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65247: LD_ADDR_VAR 0 14
65251: PUSH
65252: LD_INT 1
65254: PUSH
65255: LD_INT 3
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 0
65264: PUSH
65265: LD_INT 3
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 1
65274: NEG
65275: PUSH
65276: LD_INT 2
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: LIST
65287: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65288: LD_ADDR_VAR 0 15
65292: PUSH
65293: LD_INT 2
65295: NEG
65296: PUSH
65297: LD_INT 1
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 3
65306: NEG
65307: PUSH
65308: LD_INT 0
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 3
65317: NEG
65318: PUSH
65319: LD_INT 1
65321: NEG
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: LIST
65331: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65332: LD_ADDR_VAR 0 16
65336: PUSH
65337: LD_INT 2
65339: NEG
65340: PUSH
65341: LD_INT 3
65343: NEG
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 3
65351: NEG
65352: PUSH
65353: LD_INT 2
65355: NEG
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 3
65363: NEG
65364: PUSH
65365: LD_INT 3
65367: NEG
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: LIST
65377: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65378: LD_ADDR_VAR 0 17
65382: PUSH
65383: LD_INT 1
65385: NEG
65386: PUSH
65387: LD_INT 3
65389: NEG
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 0
65397: PUSH
65398: LD_INT 3
65400: NEG
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 1
65408: PUSH
65409: LD_INT 2
65411: NEG
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: LIST
65421: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65422: LD_ADDR_VAR 0 18
65426: PUSH
65427: LD_INT 2
65429: PUSH
65430: LD_INT 1
65432: NEG
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 3
65440: PUSH
65441: LD_INT 0
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 3
65450: PUSH
65451: LD_INT 1
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: LIST
65462: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65463: LD_ADDR_VAR 0 19
65467: PUSH
65468: LD_INT 3
65470: PUSH
65471: LD_INT 2
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 3
65480: PUSH
65481: LD_INT 3
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 2
65490: PUSH
65491: LD_INT 3
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: LIST
65502: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65503: LD_ADDR_VAR 0 20
65507: PUSH
65508: LD_INT 1
65510: PUSH
65511: LD_INT 3
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 0
65520: PUSH
65521: LD_INT 3
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 1
65530: NEG
65531: PUSH
65532: LD_INT 2
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: LIST
65543: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65544: LD_ADDR_VAR 0 21
65548: PUSH
65549: LD_INT 2
65551: NEG
65552: PUSH
65553: LD_INT 1
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 3
65562: NEG
65563: PUSH
65564: LD_INT 0
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 3
65573: NEG
65574: PUSH
65575: LD_INT 1
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: LIST
65587: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65588: LD_ADDR_VAR 0 22
65592: PUSH
65593: LD_INT 2
65595: NEG
65596: PUSH
65597: LD_INT 3
65599: NEG
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 3
65607: NEG
65608: PUSH
65609: LD_INT 2
65611: NEG
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 3
65619: NEG
65620: PUSH
65621: LD_INT 3
65623: NEG
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: LIST
65633: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65634: LD_ADDR_VAR 0 23
65638: PUSH
65639: LD_INT 0
65641: PUSH
65642: LD_INT 3
65644: NEG
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 1
65652: NEG
65653: PUSH
65654: LD_INT 4
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 1
65664: PUSH
65665: LD_INT 3
65667: NEG
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: LIST
65677: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65678: LD_ADDR_VAR 0 24
65682: PUSH
65683: LD_INT 3
65685: PUSH
65686: LD_INT 0
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 3
65695: PUSH
65696: LD_INT 1
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 4
65706: PUSH
65707: LD_INT 1
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: LIST
65718: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65719: LD_ADDR_VAR 0 25
65723: PUSH
65724: LD_INT 3
65726: PUSH
65727: LD_INT 3
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 4
65736: PUSH
65737: LD_INT 3
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 3
65746: PUSH
65747: LD_INT 4
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: LIST
65758: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65759: LD_ADDR_VAR 0 26
65763: PUSH
65764: LD_INT 0
65766: PUSH
65767: LD_INT 3
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 1
65776: PUSH
65777: LD_INT 4
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 1
65786: NEG
65787: PUSH
65788: LD_INT 3
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: LIST
65799: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65800: LD_ADDR_VAR 0 27
65804: PUSH
65805: LD_INT 3
65807: NEG
65808: PUSH
65809: LD_INT 0
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 3
65818: NEG
65819: PUSH
65820: LD_INT 1
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 4
65829: NEG
65830: PUSH
65831: LD_INT 1
65833: NEG
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: LIST
65843: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65844: LD_ADDR_VAR 0 28
65848: PUSH
65849: LD_INT 3
65851: NEG
65852: PUSH
65853: LD_INT 3
65855: NEG
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 3
65863: NEG
65864: PUSH
65865: LD_INT 4
65867: NEG
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 4
65875: NEG
65876: PUSH
65877: LD_INT 3
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: LIST
65889: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65890: LD_ADDR_VAR 0 29
65894: PUSH
65895: LD_INT 1
65897: NEG
65898: PUSH
65899: LD_INT 3
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 0
65909: PUSH
65910: LD_INT 3
65912: NEG
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 1
65920: PUSH
65921: LD_INT 2
65923: NEG
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 1
65931: NEG
65932: PUSH
65933: LD_INT 4
65935: NEG
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 0
65943: PUSH
65944: LD_INT 4
65946: NEG
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 1
65954: PUSH
65955: LD_INT 3
65957: NEG
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 1
65965: NEG
65966: PUSH
65967: LD_INT 5
65969: NEG
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 0
65977: PUSH
65978: LD_INT 5
65980: NEG
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 1
65988: PUSH
65989: LD_INT 4
65991: NEG
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 1
65999: NEG
66000: PUSH
66001: LD_INT 6
66003: NEG
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 0
66011: PUSH
66012: LD_INT 6
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 1
66022: PUSH
66023: LD_INT 5
66025: NEG
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66045: LD_ADDR_VAR 0 30
66049: PUSH
66050: LD_INT 2
66052: PUSH
66053: LD_INT 1
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 3
66063: PUSH
66064: LD_INT 0
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 3
66073: PUSH
66074: LD_INT 1
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 3
66083: PUSH
66084: LD_INT 1
66086: NEG
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 4
66094: PUSH
66095: LD_INT 0
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 4
66104: PUSH
66105: LD_INT 1
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 4
66114: PUSH
66115: LD_INT 1
66117: NEG
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 5
66125: PUSH
66126: LD_INT 0
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 5
66135: PUSH
66136: LD_INT 1
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 5
66145: PUSH
66146: LD_INT 1
66148: NEG
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 6
66156: PUSH
66157: LD_INT 0
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 6
66166: PUSH
66167: LD_INT 1
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66188: LD_ADDR_VAR 0 31
66192: PUSH
66193: LD_INT 3
66195: PUSH
66196: LD_INT 2
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 3
66205: PUSH
66206: LD_INT 3
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 2
66215: PUSH
66216: LD_INT 3
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 4
66225: PUSH
66226: LD_INT 3
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 4
66235: PUSH
66236: LD_INT 4
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 3
66245: PUSH
66246: LD_INT 4
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 5
66255: PUSH
66256: LD_INT 4
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 5
66265: PUSH
66266: LD_INT 5
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 4
66275: PUSH
66276: LD_INT 5
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 6
66285: PUSH
66286: LD_INT 5
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 6
66295: PUSH
66296: LD_INT 6
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 5
66305: PUSH
66306: LD_INT 6
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66327: LD_ADDR_VAR 0 32
66331: PUSH
66332: LD_INT 1
66334: PUSH
66335: LD_INT 3
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 0
66344: PUSH
66345: LD_INT 3
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 1
66354: NEG
66355: PUSH
66356: LD_INT 2
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 1
66365: PUSH
66366: LD_INT 4
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 0
66375: PUSH
66376: LD_INT 4
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 1
66385: NEG
66386: PUSH
66387: LD_INT 3
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 1
66396: PUSH
66397: LD_INT 5
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 0
66406: PUSH
66407: LD_INT 5
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 1
66416: NEG
66417: PUSH
66418: LD_INT 4
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 1
66427: PUSH
66428: LD_INT 6
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 0
66437: PUSH
66438: LD_INT 6
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 1
66447: NEG
66448: PUSH
66449: LD_INT 5
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66470: LD_ADDR_VAR 0 33
66474: PUSH
66475: LD_INT 2
66477: NEG
66478: PUSH
66479: LD_INT 1
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 3
66488: NEG
66489: PUSH
66490: LD_INT 0
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 3
66499: NEG
66500: PUSH
66501: LD_INT 1
66503: NEG
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 3
66511: NEG
66512: PUSH
66513: LD_INT 1
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 4
66522: NEG
66523: PUSH
66524: LD_INT 0
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 4
66533: NEG
66534: PUSH
66535: LD_INT 1
66537: NEG
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 4
66545: NEG
66546: PUSH
66547: LD_INT 1
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 5
66556: NEG
66557: PUSH
66558: LD_INT 0
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 5
66567: NEG
66568: PUSH
66569: LD_INT 1
66571: NEG
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 5
66579: NEG
66580: PUSH
66581: LD_INT 1
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 6
66590: NEG
66591: PUSH
66592: LD_INT 0
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 6
66601: NEG
66602: PUSH
66603: LD_INT 1
66605: NEG
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66625: LD_ADDR_VAR 0 34
66629: PUSH
66630: LD_INT 2
66632: NEG
66633: PUSH
66634: LD_INT 3
66636: NEG
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 3
66644: NEG
66645: PUSH
66646: LD_INT 2
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 3
66656: NEG
66657: PUSH
66658: LD_INT 3
66660: NEG
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 3
66668: NEG
66669: PUSH
66670: LD_INT 4
66672: NEG
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 4
66680: NEG
66681: PUSH
66682: LD_INT 3
66684: NEG
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 4
66692: NEG
66693: PUSH
66694: LD_INT 4
66696: NEG
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 4
66704: NEG
66705: PUSH
66706: LD_INT 5
66708: NEG
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 5
66716: NEG
66717: PUSH
66718: LD_INT 4
66720: NEG
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 5
66728: NEG
66729: PUSH
66730: LD_INT 5
66732: NEG
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 5
66740: NEG
66741: PUSH
66742: LD_INT 6
66744: NEG
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 6
66752: NEG
66753: PUSH
66754: LD_INT 5
66756: NEG
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 6
66764: NEG
66765: PUSH
66766: LD_INT 6
66768: NEG
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66788: LD_ADDR_VAR 0 41
66792: PUSH
66793: LD_INT 0
66795: PUSH
66796: LD_INT 2
66798: NEG
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 1
66806: NEG
66807: PUSH
66808: LD_INT 3
66810: NEG
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 1
66818: PUSH
66819: LD_INT 2
66821: NEG
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: LIST
66831: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66832: LD_ADDR_VAR 0 42
66836: PUSH
66837: LD_INT 2
66839: PUSH
66840: LD_INT 0
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 2
66849: PUSH
66850: LD_INT 1
66852: NEG
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 3
66860: PUSH
66861: LD_INT 1
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: LIST
66872: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66873: LD_ADDR_VAR 0 43
66877: PUSH
66878: LD_INT 2
66880: PUSH
66881: LD_INT 2
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 3
66890: PUSH
66891: LD_INT 2
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 2
66900: PUSH
66901: LD_INT 3
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: LIST
66912: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66913: LD_ADDR_VAR 0 44
66917: PUSH
66918: LD_INT 0
66920: PUSH
66921: LD_INT 2
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 1
66930: PUSH
66931: LD_INT 3
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 1
66940: NEG
66941: PUSH
66942: LD_INT 2
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: LIST
66953: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66954: LD_ADDR_VAR 0 45
66958: PUSH
66959: LD_INT 2
66961: NEG
66962: PUSH
66963: LD_INT 0
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 2
66972: NEG
66973: PUSH
66974: LD_INT 1
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 3
66983: NEG
66984: PUSH
66985: LD_INT 1
66987: NEG
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: LIST
66997: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66998: LD_ADDR_VAR 0 46
67002: PUSH
67003: LD_INT 2
67005: NEG
67006: PUSH
67007: LD_INT 2
67009: NEG
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 2
67017: NEG
67018: PUSH
67019: LD_INT 3
67021: NEG
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 3
67029: NEG
67030: PUSH
67031: LD_INT 2
67033: NEG
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: LIST
67043: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67044: LD_ADDR_VAR 0 47
67048: PUSH
67049: LD_INT 2
67051: NEG
67052: PUSH
67053: LD_INT 3
67055: NEG
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 1
67063: NEG
67064: PUSH
67065: LD_INT 3
67067: NEG
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67077: LD_ADDR_VAR 0 48
67081: PUSH
67082: LD_INT 1
67084: PUSH
67085: LD_INT 2
67087: NEG
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 2
67095: PUSH
67096: LD_INT 1
67098: NEG
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67108: LD_ADDR_VAR 0 49
67112: PUSH
67113: LD_INT 3
67115: PUSH
67116: LD_INT 1
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 3
67125: PUSH
67126: LD_INT 2
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67137: LD_ADDR_VAR 0 50
67141: PUSH
67142: LD_INT 2
67144: PUSH
67145: LD_INT 3
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 1
67154: PUSH
67155: LD_INT 3
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67166: LD_ADDR_VAR 0 51
67170: PUSH
67171: LD_INT 1
67173: NEG
67174: PUSH
67175: LD_INT 2
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 2
67184: NEG
67185: PUSH
67186: LD_INT 1
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67197: LD_ADDR_VAR 0 52
67201: PUSH
67202: LD_INT 3
67204: NEG
67205: PUSH
67206: LD_INT 1
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 3
67216: NEG
67217: PUSH
67218: LD_INT 2
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67230: LD_ADDR_VAR 0 53
67234: PUSH
67235: LD_INT 1
67237: NEG
67238: PUSH
67239: LD_INT 3
67241: NEG
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 0
67249: PUSH
67250: LD_INT 3
67252: NEG
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 1
67260: PUSH
67261: LD_INT 2
67263: NEG
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: LIST
67273: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67274: LD_ADDR_VAR 0 54
67278: PUSH
67279: LD_INT 2
67281: PUSH
67282: LD_INT 1
67284: NEG
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: LD_INT 3
67292: PUSH
67293: LD_INT 0
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 3
67302: PUSH
67303: LD_INT 1
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: LIST
67314: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67315: LD_ADDR_VAR 0 55
67319: PUSH
67320: LD_INT 3
67322: PUSH
67323: LD_INT 2
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 3
67332: PUSH
67333: LD_INT 3
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 2
67342: PUSH
67343: LD_INT 3
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: LIST
67354: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67355: LD_ADDR_VAR 0 56
67359: PUSH
67360: LD_INT 1
67362: PUSH
67363: LD_INT 3
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 0
67372: PUSH
67373: LD_INT 3
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 1
67382: NEG
67383: PUSH
67384: LD_INT 2
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: LIST
67395: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67396: LD_ADDR_VAR 0 57
67400: PUSH
67401: LD_INT 2
67403: NEG
67404: PUSH
67405: LD_INT 1
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 3
67414: NEG
67415: PUSH
67416: LD_INT 0
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 3
67425: NEG
67426: PUSH
67427: LD_INT 1
67429: NEG
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: LIST
67439: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67440: LD_ADDR_VAR 0 58
67444: PUSH
67445: LD_INT 2
67447: NEG
67448: PUSH
67449: LD_INT 3
67451: NEG
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 3
67459: NEG
67460: PUSH
67461: LD_INT 2
67463: NEG
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 3
67471: NEG
67472: PUSH
67473: LD_INT 3
67475: NEG
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: LIST
67485: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67486: LD_ADDR_VAR 0 59
67490: PUSH
67491: LD_INT 1
67493: NEG
67494: PUSH
67495: LD_INT 2
67497: NEG
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 0
67505: PUSH
67506: LD_INT 2
67508: NEG
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 1
67516: PUSH
67517: LD_INT 1
67519: NEG
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: LIST
67529: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67530: LD_ADDR_VAR 0 60
67534: PUSH
67535: LD_INT 1
67537: PUSH
67538: LD_INT 1
67540: NEG
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 2
67548: PUSH
67549: LD_INT 0
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 2
67558: PUSH
67559: LD_INT 1
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: LIST
67570: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67571: LD_ADDR_VAR 0 61
67575: PUSH
67576: LD_INT 2
67578: PUSH
67579: LD_INT 1
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 2
67588: PUSH
67589: LD_INT 2
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 1
67598: PUSH
67599: LD_INT 2
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: LIST
67610: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67611: LD_ADDR_VAR 0 62
67615: PUSH
67616: LD_INT 1
67618: PUSH
67619: LD_INT 2
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 0
67628: PUSH
67629: LD_INT 2
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 1
67638: NEG
67639: PUSH
67640: LD_INT 1
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: LIST
67651: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67652: LD_ADDR_VAR 0 63
67656: PUSH
67657: LD_INT 1
67659: NEG
67660: PUSH
67661: LD_INT 1
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 2
67670: NEG
67671: PUSH
67672: LD_INT 0
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 2
67681: NEG
67682: PUSH
67683: LD_INT 1
67685: NEG
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: LIST
67695: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67696: LD_ADDR_VAR 0 64
67700: PUSH
67701: LD_INT 1
67703: NEG
67704: PUSH
67705: LD_INT 2
67707: NEG
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 2
67715: NEG
67716: PUSH
67717: LD_INT 1
67719: NEG
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 2
67727: NEG
67728: PUSH
67729: LD_INT 2
67731: NEG
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: LIST
67741: ST_TO_ADDR
// end ; 2 :
67742: GO 71008
67744: LD_INT 2
67746: DOUBLE
67747: EQUAL
67748: IFTRUE 67752
67750: GO 71007
67752: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67753: LD_ADDR_VAR 0 29
67757: PUSH
67758: LD_INT 4
67760: PUSH
67761: LD_INT 0
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 4
67770: PUSH
67771: LD_INT 1
67773: NEG
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 5
67781: PUSH
67782: LD_INT 0
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 5
67791: PUSH
67792: LD_INT 1
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 4
67801: PUSH
67802: LD_INT 1
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 3
67811: PUSH
67812: LD_INT 0
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 3
67821: PUSH
67822: LD_INT 1
67824: NEG
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 3
67832: PUSH
67833: LD_INT 2
67835: NEG
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 5
67843: PUSH
67844: LD_INT 2
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 3
67853: PUSH
67854: LD_INT 3
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 3
67863: PUSH
67864: LD_INT 2
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: LD_INT 4
67873: PUSH
67874: LD_INT 3
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 4
67883: PUSH
67884: LD_INT 4
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 3
67893: PUSH
67894: LD_INT 4
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 2
67903: PUSH
67904: LD_INT 3
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 2
67913: PUSH
67914: LD_INT 2
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 4
67923: PUSH
67924: LD_INT 2
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 2
67933: PUSH
67934: LD_INT 4
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 0
67943: PUSH
67944: LD_INT 4
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 0
67953: PUSH
67954: LD_INT 3
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 1
67963: PUSH
67964: LD_INT 4
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 1
67973: PUSH
67974: LD_INT 5
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 0
67983: PUSH
67984: LD_INT 5
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 1
67993: NEG
67994: PUSH
67995: LD_INT 4
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 1
68004: NEG
68005: PUSH
68006: LD_INT 3
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 2
68015: PUSH
68016: LD_INT 5
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 2
68025: NEG
68026: PUSH
68027: LD_INT 3
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 3
68036: NEG
68037: PUSH
68038: LD_INT 0
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 3
68047: NEG
68048: PUSH
68049: LD_INT 1
68051: NEG
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 2
68059: NEG
68060: PUSH
68061: LD_INT 0
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 2
68070: NEG
68071: PUSH
68072: LD_INT 1
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 3
68081: NEG
68082: PUSH
68083: LD_INT 1
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 4
68092: NEG
68093: PUSH
68094: LD_INT 0
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 4
68103: NEG
68104: PUSH
68105: LD_INT 1
68107: NEG
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 4
68115: NEG
68116: PUSH
68117: LD_INT 2
68119: NEG
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 2
68127: NEG
68128: PUSH
68129: LD_INT 2
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 4
68138: NEG
68139: PUSH
68140: LD_INT 4
68142: NEG
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 4
68150: NEG
68151: PUSH
68152: LD_INT 5
68154: NEG
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 3
68162: NEG
68163: PUSH
68164: LD_INT 4
68166: NEG
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 3
68174: NEG
68175: PUSH
68176: LD_INT 3
68178: NEG
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 4
68186: NEG
68187: PUSH
68188: LD_INT 3
68190: NEG
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 5
68198: NEG
68199: PUSH
68200: LD_INT 4
68202: NEG
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 5
68210: NEG
68211: PUSH
68212: LD_INT 5
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 3
68222: NEG
68223: PUSH
68224: LD_INT 5
68226: NEG
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 5
68234: NEG
68235: PUSH
68236: LD_INT 3
68238: NEG
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68291: LD_ADDR_VAR 0 30
68295: PUSH
68296: LD_INT 4
68298: PUSH
68299: LD_INT 4
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 4
68308: PUSH
68309: LD_INT 3
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 5
68318: PUSH
68319: LD_INT 4
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 5
68328: PUSH
68329: LD_INT 5
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 4
68338: PUSH
68339: LD_INT 5
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 3
68348: PUSH
68349: LD_INT 4
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 3
68358: PUSH
68359: LD_INT 3
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 5
68368: PUSH
68369: LD_INT 3
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 3
68378: PUSH
68379: LD_INT 5
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 0
68388: PUSH
68389: LD_INT 3
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 0
68398: PUSH
68399: LD_INT 2
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 1
68408: PUSH
68409: LD_INT 3
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 1
68418: PUSH
68419: LD_INT 4
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 0
68428: PUSH
68429: LD_INT 4
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 1
68438: NEG
68439: PUSH
68440: LD_INT 3
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 1
68449: NEG
68450: PUSH
68451: LD_INT 2
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 2
68460: PUSH
68461: LD_INT 4
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 2
68470: NEG
68471: PUSH
68472: LD_INT 2
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 4
68481: NEG
68482: PUSH
68483: LD_INT 0
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 4
68492: NEG
68493: PUSH
68494: LD_INT 1
68496: NEG
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 3
68504: NEG
68505: PUSH
68506: LD_INT 0
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 3
68515: NEG
68516: PUSH
68517: LD_INT 1
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 4
68526: NEG
68527: PUSH
68528: LD_INT 1
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 5
68537: NEG
68538: PUSH
68539: LD_INT 0
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 5
68548: NEG
68549: PUSH
68550: LD_INT 1
68552: NEG
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 5
68560: NEG
68561: PUSH
68562: LD_INT 2
68564: NEG
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 3
68572: NEG
68573: PUSH
68574: LD_INT 2
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 3
68583: NEG
68584: PUSH
68585: LD_INT 3
68587: NEG
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 3
68595: NEG
68596: PUSH
68597: LD_INT 4
68599: NEG
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: LD_INT 2
68607: NEG
68608: PUSH
68609: LD_INT 3
68611: NEG
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 2
68619: NEG
68620: PUSH
68621: LD_INT 2
68623: NEG
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 3
68631: NEG
68632: PUSH
68633: LD_INT 2
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 4
68643: NEG
68644: PUSH
68645: LD_INT 3
68647: NEG
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 4
68655: NEG
68656: PUSH
68657: LD_INT 4
68659: NEG
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 2
68667: NEG
68668: PUSH
68669: LD_INT 4
68671: NEG
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 4
68679: NEG
68680: PUSH
68681: LD_INT 2
68683: NEG
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 0
68691: PUSH
68692: LD_INT 4
68694: NEG
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 0
68702: PUSH
68703: LD_INT 5
68705: NEG
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 1
68713: PUSH
68714: LD_INT 4
68716: NEG
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 1
68724: PUSH
68725: LD_INT 3
68727: NEG
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 0
68735: PUSH
68736: LD_INT 3
68738: NEG
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 1
68746: NEG
68747: PUSH
68748: LD_INT 4
68750: NEG
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 1
68758: NEG
68759: PUSH
68760: LD_INT 5
68762: NEG
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 2
68770: PUSH
68771: LD_INT 3
68773: NEG
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 2
68781: NEG
68782: PUSH
68783: LD_INT 5
68785: NEG
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68838: LD_ADDR_VAR 0 31
68842: PUSH
68843: LD_INT 0
68845: PUSH
68846: LD_INT 4
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 0
68855: PUSH
68856: LD_INT 3
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 1
68865: PUSH
68866: LD_INT 4
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 1
68875: PUSH
68876: LD_INT 5
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 0
68885: PUSH
68886: LD_INT 5
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 1
68895: NEG
68896: PUSH
68897: LD_INT 4
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 1
68906: NEG
68907: PUSH
68908: LD_INT 3
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 2
68917: PUSH
68918: LD_INT 5
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 2
68927: NEG
68928: PUSH
68929: LD_INT 3
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 3
68938: NEG
68939: PUSH
68940: LD_INT 0
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 3
68949: NEG
68950: PUSH
68951: LD_INT 1
68953: NEG
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 2
68961: NEG
68962: PUSH
68963: LD_INT 0
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 2
68972: NEG
68973: PUSH
68974: LD_INT 1
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 3
68983: NEG
68984: PUSH
68985: LD_INT 1
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 4
68994: NEG
68995: PUSH
68996: LD_INT 0
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 4
69005: NEG
69006: PUSH
69007: LD_INT 1
69009: NEG
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 4
69017: NEG
69018: PUSH
69019: LD_INT 2
69021: NEG
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 2
69029: NEG
69030: PUSH
69031: LD_INT 2
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 4
69040: NEG
69041: PUSH
69042: LD_INT 4
69044: NEG
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 4
69052: NEG
69053: PUSH
69054: LD_INT 5
69056: NEG
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 3
69064: NEG
69065: PUSH
69066: LD_INT 4
69068: NEG
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 3
69076: NEG
69077: PUSH
69078: LD_INT 3
69080: NEG
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 4
69088: NEG
69089: PUSH
69090: LD_INT 3
69092: NEG
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 5
69100: NEG
69101: PUSH
69102: LD_INT 4
69104: NEG
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 5
69112: NEG
69113: PUSH
69114: LD_INT 5
69116: NEG
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 3
69124: NEG
69125: PUSH
69126: LD_INT 5
69128: NEG
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 5
69136: NEG
69137: PUSH
69138: LD_INT 3
69140: NEG
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 0
69148: PUSH
69149: LD_INT 3
69151: NEG
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 0
69159: PUSH
69160: LD_INT 4
69162: NEG
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 1
69170: PUSH
69171: LD_INT 3
69173: NEG
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 1
69181: PUSH
69182: LD_INT 2
69184: NEG
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 0
69192: PUSH
69193: LD_INT 2
69195: NEG
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 1
69203: NEG
69204: PUSH
69205: LD_INT 3
69207: NEG
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 1
69215: NEG
69216: PUSH
69217: LD_INT 4
69219: NEG
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 2
69227: PUSH
69228: LD_INT 2
69230: NEG
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 2
69238: NEG
69239: PUSH
69240: LD_INT 4
69242: NEG
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 4
69250: PUSH
69251: LD_INT 0
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: LD_INT 4
69260: PUSH
69261: LD_INT 1
69263: NEG
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 5
69271: PUSH
69272: LD_INT 0
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 5
69281: PUSH
69282: LD_INT 1
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 4
69291: PUSH
69292: LD_INT 1
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 3
69301: PUSH
69302: LD_INT 0
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 3
69311: PUSH
69312: LD_INT 1
69314: NEG
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 3
69322: PUSH
69323: LD_INT 2
69325: NEG
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 5
69333: PUSH
69334: LD_INT 2
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69388: LD_ADDR_VAR 0 32
69392: PUSH
69393: LD_INT 4
69395: NEG
69396: PUSH
69397: LD_INT 0
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 4
69406: NEG
69407: PUSH
69408: LD_INT 1
69410: NEG
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 3
69418: NEG
69419: PUSH
69420: LD_INT 0
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 3
69429: NEG
69430: PUSH
69431: LD_INT 1
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 4
69440: NEG
69441: PUSH
69442: LD_INT 1
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 5
69451: NEG
69452: PUSH
69453: LD_INT 0
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 5
69462: NEG
69463: PUSH
69464: LD_INT 1
69466: NEG
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 5
69474: NEG
69475: PUSH
69476: LD_INT 2
69478: NEG
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 3
69486: NEG
69487: PUSH
69488: LD_INT 2
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 3
69497: NEG
69498: PUSH
69499: LD_INT 3
69501: NEG
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 3
69509: NEG
69510: PUSH
69511: LD_INT 4
69513: NEG
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_INT 2
69521: NEG
69522: PUSH
69523: LD_INT 3
69525: NEG
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 2
69533: NEG
69534: PUSH
69535: LD_INT 2
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 3
69545: NEG
69546: PUSH
69547: LD_INT 2
69549: NEG
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 4
69557: NEG
69558: PUSH
69559: LD_INT 3
69561: NEG
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 4
69569: NEG
69570: PUSH
69571: LD_INT 4
69573: NEG
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 2
69581: NEG
69582: PUSH
69583: LD_INT 4
69585: NEG
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: PUSH
69591: LD_INT 4
69593: NEG
69594: PUSH
69595: LD_INT 2
69597: NEG
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 0
69605: PUSH
69606: LD_INT 4
69608: NEG
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 0
69616: PUSH
69617: LD_INT 5
69619: NEG
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 1
69627: PUSH
69628: LD_INT 4
69630: NEG
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 1
69638: PUSH
69639: LD_INT 3
69641: NEG
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 0
69649: PUSH
69650: LD_INT 3
69652: NEG
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 1
69660: NEG
69661: PUSH
69662: LD_INT 4
69664: NEG
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 1
69672: NEG
69673: PUSH
69674: LD_INT 5
69676: NEG
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 2
69684: PUSH
69685: LD_INT 3
69687: NEG
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 2
69695: NEG
69696: PUSH
69697: LD_INT 5
69699: NEG
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: LD_INT 3
69707: PUSH
69708: LD_INT 0
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 3
69717: PUSH
69718: LD_INT 1
69720: NEG
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 4
69728: PUSH
69729: LD_INT 0
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 4
69738: PUSH
69739: LD_INT 1
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 3
69748: PUSH
69749: LD_INT 1
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 2
69758: PUSH
69759: LD_INT 0
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 2
69768: PUSH
69769: LD_INT 1
69771: NEG
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 2
69779: PUSH
69780: LD_INT 2
69782: NEG
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 4
69790: PUSH
69791: LD_INT 2
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 4
69800: PUSH
69801: LD_INT 4
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 4
69810: PUSH
69811: LD_INT 3
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 5
69820: PUSH
69821: LD_INT 4
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: PUSH
69828: LD_INT 5
69830: PUSH
69831: LD_INT 5
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 4
69840: PUSH
69841: LD_INT 5
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PUSH
69848: LD_INT 3
69850: PUSH
69851: LD_INT 4
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 3
69860: PUSH
69861: LD_INT 3
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 5
69870: PUSH
69871: LD_INT 3
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 3
69880: PUSH
69881: LD_INT 5
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: LIST
69892: LIST
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69935: LD_ADDR_VAR 0 33
69939: PUSH
69940: LD_INT 4
69942: NEG
69943: PUSH
69944: LD_INT 4
69946: NEG
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 4
69954: NEG
69955: PUSH
69956: LD_INT 5
69958: NEG
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 3
69966: NEG
69967: PUSH
69968: LD_INT 4
69970: NEG
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 3
69978: NEG
69979: PUSH
69980: LD_INT 3
69982: NEG
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 4
69990: NEG
69991: PUSH
69992: LD_INT 3
69994: NEG
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 5
70002: NEG
70003: PUSH
70004: LD_INT 4
70006: NEG
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 5
70014: NEG
70015: PUSH
70016: LD_INT 5
70018: NEG
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 3
70026: NEG
70027: PUSH
70028: LD_INT 5
70030: NEG
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: LD_INT 5
70038: NEG
70039: PUSH
70040: LD_INT 3
70042: NEG
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 0
70050: PUSH
70051: LD_INT 3
70053: NEG
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 0
70061: PUSH
70062: LD_INT 4
70064: NEG
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 1
70072: PUSH
70073: LD_INT 3
70075: NEG
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: LD_INT 1
70083: PUSH
70084: LD_INT 2
70086: NEG
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 0
70094: PUSH
70095: LD_INT 2
70097: NEG
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 1
70105: NEG
70106: PUSH
70107: LD_INT 3
70109: NEG
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 1
70117: NEG
70118: PUSH
70119: LD_INT 4
70121: NEG
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 2
70129: PUSH
70130: LD_INT 2
70132: NEG
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PUSH
70138: LD_INT 2
70140: NEG
70141: PUSH
70142: LD_INT 4
70144: NEG
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 4
70152: PUSH
70153: LD_INT 0
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 4
70162: PUSH
70163: LD_INT 1
70165: NEG
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 5
70173: PUSH
70174: LD_INT 0
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 5
70183: PUSH
70184: LD_INT 1
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 4
70193: PUSH
70194: LD_INT 1
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 3
70203: PUSH
70204: LD_INT 0
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 3
70213: PUSH
70214: LD_INT 1
70216: NEG
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 3
70224: PUSH
70225: LD_INT 2
70227: NEG
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 5
70235: PUSH
70236: LD_INT 2
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 3
70245: PUSH
70246: LD_INT 3
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 3
70255: PUSH
70256: LD_INT 2
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 4
70265: PUSH
70266: LD_INT 3
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 4
70275: PUSH
70276: LD_INT 4
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 3
70285: PUSH
70286: LD_INT 4
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 2
70295: PUSH
70296: LD_INT 3
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 2
70305: PUSH
70306: LD_INT 2
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: LD_INT 4
70315: PUSH
70316: LD_INT 2
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: LD_INT 2
70325: PUSH
70326: LD_INT 4
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: LD_INT 0
70335: PUSH
70336: LD_INT 4
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 0
70345: PUSH
70346: LD_INT 3
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 1
70355: PUSH
70356: LD_INT 4
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 1
70365: PUSH
70366: LD_INT 5
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 0
70375: PUSH
70376: LD_INT 5
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 1
70385: NEG
70386: PUSH
70387: LD_INT 4
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: PUSH
70394: LD_INT 1
70396: NEG
70397: PUSH
70398: LD_INT 3
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PUSH
70405: LD_INT 2
70407: PUSH
70408: LD_INT 5
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 2
70417: NEG
70418: PUSH
70419: LD_INT 3
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70473: LD_ADDR_VAR 0 34
70477: PUSH
70478: LD_INT 0
70480: PUSH
70481: LD_INT 4
70483: NEG
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PUSH
70489: LD_INT 0
70491: PUSH
70492: LD_INT 5
70494: NEG
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 1
70502: PUSH
70503: LD_INT 4
70505: NEG
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 1
70513: PUSH
70514: LD_INT 3
70516: NEG
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 0
70524: PUSH
70525: LD_INT 3
70527: NEG
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 1
70535: NEG
70536: PUSH
70537: LD_INT 4
70539: NEG
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 1
70547: NEG
70548: PUSH
70549: LD_INT 5
70551: NEG
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PUSH
70557: LD_INT 2
70559: PUSH
70560: LD_INT 3
70562: NEG
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: LD_INT 2
70570: NEG
70571: PUSH
70572: LD_INT 5
70574: NEG
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 3
70582: PUSH
70583: LD_INT 0
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: LD_INT 3
70592: PUSH
70593: LD_INT 1
70595: NEG
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 4
70603: PUSH
70604: LD_INT 0
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PUSH
70611: LD_INT 4
70613: PUSH
70614: LD_INT 1
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 3
70623: PUSH
70624: LD_INT 1
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 2
70633: PUSH
70634: LD_INT 0
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 2
70643: PUSH
70644: LD_INT 1
70646: NEG
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 2
70654: PUSH
70655: LD_INT 2
70657: NEG
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 4
70665: PUSH
70666: LD_INT 2
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: PUSH
70673: LD_INT 4
70675: PUSH
70676: LD_INT 4
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: LD_INT 4
70685: PUSH
70686: LD_INT 3
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_INT 5
70695: PUSH
70696: LD_INT 4
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 5
70705: PUSH
70706: LD_INT 5
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 4
70715: PUSH
70716: LD_INT 5
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: PUSH
70723: LD_INT 3
70725: PUSH
70726: LD_INT 4
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: PUSH
70733: LD_INT 3
70735: PUSH
70736: LD_INT 3
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: LD_INT 5
70745: PUSH
70746: LD_INT 3
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 3
70755: PUSH
70756: LD_INT 5
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: LD_INT 0
70765: PUSH
70766: LD_INT 3
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 0
70775: PUSH
70776: LD_INT 2
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: PUSH
70783: LD_INT 1
70785: PUSH
70786: LD_INT 3
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: LD_INT 1
70795: PUSH
70796: LD_INT 4
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 0
70805: PUSH
70806: LD_INT 4
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 1
70815: NEG
70816: PUSH
70817: LD_INT 3
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 1
70826: NEG
70827: PUSH
70828: LD_INT 2
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_INT 2
70837: PUSH
70838: LD_INT 4
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: LD_INT 2
70847: NEG
70848: PUSH
70849: LD_INT 2
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 4
70858: NEG
70859: PUSH
70860: LD_INT 0
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 4
70869: NEG
70870: PUSH
70871: LD_INT 1
70873: NEG
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: PUSH
70879: LD_INT 3
70881: NEG
70882: PUSH
70883: LD_INT 0
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 3
70892: NEG
70893: PUSH
70894: LD_INT 1
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 4
70903: NEG
70904: PUSH
70905: LD_INT 1
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 5
70914: NEG
70915: PUSH
70916: LD_INT 0
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 5
70925: NEG
70926: PUSH
70927: LD_INT 1
70929: NEG
70930: PUSH
70931: EMPTY
70932: LIST
70933: LIST
70934: PUSH
70935: LD_INT 5
70937: NEG
70938: PUSH
70939: LD_INT 2
70941: NEG
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 3
70949: NEG
70950: PUSH
70951: LD_INT 2
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: ST_TO_ADDR
// end ; end ;
71005: GO 71008
71007: POP
// case btype of b_depot , b_warehouse :
71008: LD_VAR 0 1
71012: PUSH
71013: LD_INT 0
71015: DOUBLE
71016: EQUAL
71017: IFTRUE 71027
71019: LD_INT 1
71021: DOUBLE
71022: EQUAL
71023: IFTRUE 71027
71025: GO 71228
71027: POP
// case nation of nation_american :
71028: LD_VAR 0 5
71032: PUSH
71033: LD_INT 1
71035: DOUBLE
71036: EQUAL
71037: IFTRUE 71041
71039: GO 71097
71041: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71042: LD_ADDR_VAR 0 9
71046: PUSH
71047: LD_VAR 0 11
71051: PUSH
71052: LD_VAR 0 12
71056: PUSH
71057: LD_VAR 0 13
71061: PUSH
71062: LD_VAR 0 14
71066: PUSH
71067: LD_VAR 0 15
71071: PUSH
71072: LD_VAR 0 16
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: PUSH
71085: LD_VAR 0 4
71089: PUSH
71090: LD_INT 1
71092: PLUS
71093: ARRAY
71094: ST_TO_ADDR
71095: GO 71226
71097: LD_INT 2
71099: DOUBLE
71100: EQUAL
71101: IFTRUE 71105
71103: GO 71161
71105: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71106: LD_ADDR_VAR 0 9
71110: PUSH
71111: LD_VAR 0 17
71115: PUSH
71116: LD_VAR 0 18
71120: PUSH
71121: LD_VAR 0 19
71125: PUSH
71126: LD_VAR 0 20
71130: PUSH
71131: LD_VAR 0 21
71135: PUSH
71136: LD_VAR 0 22
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: PUSH
71149: LD_VAR 0 4
71153: PUSH
71154: LD_INT 1
71156: PLUS
71157: ARRAY
71158: ST_TO_ADDR
71159: GO 71226
71161: LD_INT 3
71163: DOUBLE
71164: EQUAL
71165: IFTRUE 71169
71167: GO 71225
71169: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71170: LD_ADDR_VAR 0 9
71174: PUSH
71175: LD_VAR 0 23
71179: PUSH
71180: LD_VAR 0 24
71184: PUSH
71185: LD_VAR 0 25
71189: PUSH
71190: LD_VAR 0 26
71194: PUSH
71195: LD_VAR 0 27
71199: PUSH
71200: LD_VAR 0 28
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: PUSH
71213: LD_VAR 0 4
71217: PUSH
71218: LD_INT 1
71220: PLUS
71221: ARRAY
71222: ST_TO_ADDR
71223: GO 71226
71225: POP
71226: GO 71781
71228: LD_INT 2
71230: DOUBLE
71231: EQUAL
71232: IFTRUE 71242
71234: LD_INT 3
71236: DOUBLE
71237: EQUAL
71238: IFTRUE 71242
71240: GO 71298
71242: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71243: LD_ADDR_VAR 0 9
71247: PUSH
71248: LD_VAR 0 29
71252: PUSH
71253: LD_VAR 0 30
71257: PUSH
71258: LD_VAR 0 31
71262: PUSH
71263: LD_VAR 0 32
71267: PUSH
71268: LD_VAR 0 33
71272: PUSH
71273: LD_VAR 0 34
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: PUSH
71286: LD_VAR 0 4
71290: PUSH
71291: LD_INT 1
71293: PLUS
71294: ARRAY
71295: ST_TO_ADDR
71296: GO 71781
71298: LD_INT 16
71300: DOUBLE
71301: EQUAL
71302: IFTRUE 71360
71304: LD_INT 17
71306: DOUBLE
71307: EQUAL
71308: IFTRUE 71360
71310: LD_INT 18
71312: DOUBLE
71313: EQUAL
71314: IFTRUE 71360
71316: LD_INT 19
71318: DOUBLE
71319: EQUAL
71320: IFTRUE 71360
71322: LD_INT 22
71324: DOUBLE
71325: EQUAL
71326: IFTRUE 71360
71328: LD_INT 20
71330: DOUBLE
71331: EQUAL
71332: IFTRUE 71360
71334: LD_INT 21
71336: DOUBLE
71337: EQUAL
71338: IFTRUE 71360
71340: LD_INT 23
71342: DOUBLE
71343: EQUAL
71344: IFTRUE 71360
71346: LD_INT 24
71348: DOUBLE
71349: EQUAL
71350: IFTRUE 71360
71352: LD_INT 25
71354: DOUBLE
71355: EQUAL
71356: IFTRUE 71360
71358: GO 71416
71360: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71361: LD_ADDR_VAR 0 9
71365: PUSH
71366: LD_VAR 0 35
71370: PUSH
71371: LD_VAR 0 36
71375: PUSH
71376: LD_VAR 0 37
71380: PUSH
71381: LD_VAR 0 38
71385: PUSH
71386: LD_VAR 0 39
71390: PUSH
71391: LD_VAR 0 40
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: PUSH
71404: LD_VAR 0 4
71408: PUSH
71409: LD_INT 1
71411: PLUS
71412: ARRAY
71413: ST_TO_ADDR
71414: GO 71781
71416: LD_INT 6
71418: DOUBLE
71419: EQUAL
71420: IFTRUE 71472
71422: LD_INT 7
71424: DOUBLE
71425: EQUAL
71426: IFTRUE 71472
71428: LD_INT 8
71430: DOUBLE
71431: EQUAL
71432: IFTRUE 71472
71434: LD_INT 13
71436: DOUBLE
71437: EQUAL
71438: IFTRUE 71472
71440: LD_INT 12
71442: DOUBLE
71443: EQUAL
71444: IFTRUE 71472
71446: LD_INT 15
71448: DOUBLE
71449: EQUAL
71450: IFTRUE 71472
71452: LD_INT 11
71454: DOUBLE
71455: EQUAL
71456: IFTRUE 71472
71458: LD_INT 14
71460: DOUBLE
71461: EQUAL
71462: IFTRUE 71472
71464: LD_INT 10
71466: DOUBLE
71467: EQUAL
71468: IFTRUE 71472
71470: GO 71528
71472: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71473: LD_ADDR_VAR 0 9
71477: PUSH
71478: LD_VAR 0 41
71482: PUSH
71483: LD_VAR 0 42
71487: PUSH
71488: LD_VAR 0 43
71492: PUSH
71493: LD_VAR 0 44
71497: PUSH
71498: LD_VAR 0 45
71502: PUSH
71503: LD_VAR 0 46
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: PUSH
71516: LD_VAR 0 4
71520: PUSH
71521: LD_INT 1
71523: PLUS
71524: ARRAY
71525: ST_TO_ADDR
71526: GO 71781
71528: LD_INT 36
71530: DOUBLE
71531: EQUAL
71532: IFTRUE 71536
71534: GO 71592
71536: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71537: LD_ADDR_VAR 0 9
71541: PUSH
71542: LD_VAR 0 47
71546: PUSH
71547: LD_VAR 0 48
71551: PUSH
71552: LD_VAR 0 49
71556: PUSH
71557: LD_VAR 0 50
71561: PUSH
71562: LD_VAR 0 51
71566: PUSH
71567: LD_VAR 0 52
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: PUSH
71580: LD_VAR 0 4
71584: PUSH
71585: LD_INT 1
71587: PLUS
71588: ARRAY
71589: ST_TO_ADDR
71590: GO 71781
71592: LD_INT 4
71594: DOUBLE
71595: EQUAL
71596: IFTRUE 71618
71598: LD_INT 5
71600: DOUBLE
71601: EQUAL
71602: IFTRUE 71618
71604: LD_INT 34
71606: DOUBLE
71607: EQUAL
71608: IFTRUE 71618
71610: LD_INT 37
71612: DOUBLE
71613: EQUAL
71614: IFTRUE 71618
71616: GO 71674
71618: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71619: LD_ADDR_VAR 0 9
71623: PUSH
71624: LD_VAR 0 53
71628: PUSH
71629: LD_VAR 0 54
71633: PUSH
71634: LD_VAR 0 55
71638: PUSH
71639: LD_VAR 0 56
71643: PUSH
71644: LD_VAR 0 57
71648: PUSH
71649: LD_VAR 0 58
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: PUSH
71662: LD_VAR 0 4
71666: PUSH
71667: LD_INT 1
71669: PLUS
71670: ARRAY
71671: ST_TO_ADDR
71672: GO 71781
71674: LD_INT 31
71676: DOUBLE
71677: EQUAL
71678: IFTRUE 71724
71680: LD_INT 32
71682: DOUBLE
71683: EQUAL
71684: IFTRUE 71724
71686: LD_INT 33
71688: DOUBLE
71689: EQUAL
71690: IFTRUE 71724
71692: LD_INT 27
71694: DOUBLE
71695: EQUAL
71696: IFTRUE 71724
71698: LD_INT 26
71700: DOUBLE
71701: EQUAL
71702: IFTRUE 71724
71704: LD_INT 28
71706: DOUBLE
71707: EQUAL
71708: IFTRUE 71724
71710: LD_INT 29
71712: DOUBLE
71713: EQUAL
71714: IFTRUE 71724
71716: LD_INT 30
71718: DOUBLE
71719: EQUAL
71720: IFTRUE 71724
71722: GO 71780
71724: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71725: LD_ADDR_VAR 0 9
71729: PUSH
71730: LD_VAR 0 59
71734: PUSH
71735: LD_VAR 0 60
71739: PUSH
71740: LD_VAR 0 61
71744: PUSH
71745: LD_VAR 0 62
71749: PUSH
71750: LD_VAR 0 63
71754: PUSH
71755: LD_VAR 0 64
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: LIST
71764: LIST
71765: LIST
71766: LIST
71767: PUSH
71768: LD_VAR 0 4
71772: PUSH
71773: LD_INT 1
71775: PLUS
71776: ARRAY
71777: ST_TO_ADDR
71778: GO 71781
71780: POP
// temp_list2 = [ ] ;
71781: LD_ADDR_VAR 0 10
71785: PUSH
71786: EMPTY
71787: ST_TO_ADDR
// for i in temp_list do
71788: LD_ADDR_VAR 0 8
71792: PUSH
71793: LD_VAR 0 9
71797: PUSH
71798: FOR_IN
71799: IFFALSE 71851
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71801: LD_ADDR_VAR 0 10
71805: PUSH
71806: LD_VAR 0 10
71810: PUSH
71811: LD_VAR 0 8
71815: PUSH
71816: LD_INT 1
71818: ARRAY
71819: PUSH
71820: LD_VAR 0 2
71824: PLUS
71825: PUSH
71826: LD_VAR 0 8
71830: PUSH
71831: LD_INT 2
71833: ARRAY
71834: PUSH
71835: LD_VAR 0 3
71839: PLUS
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: PUSH
71845: EMPTY
71846: LIST
71847: ADD
71848: ST_TO_ADDR
71849: GO 71798
71851: POP
71852: POP
// result = temp_list2 ;
71853: LD_ADDR_VAR 0 7
71857: PUSH
71858: LD_VAR 0 10
71862: ST_TO_ADDR
// end ;
71863: LD_VAR 0 7
71867: RET
// export function EnemyInRange ( unit , dist ) ; begin
71868: LD_INT 0
71870: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71871: LD_ADDR_VAR 0 3
71875: PUSH
71876: LD_VAR 0 1
71880: PPUSH
71881: CALL_OW 255
71885: PPUSH
71886: LD_VAR 0 1
71890: PPUSH
71891: CALL_OW 250
71895: PPUSH
71896: LD_VAR 0 1
71900: PPUSH
71901: CALL_OW 251
71905: PPUSH
71906: LD_VAR 0 2
71910: PPUSH
71911: CALL 45270 0 4
71915: PUSH
71916: LD_INT 4
71918: ARRAY
71919: ST_TO_ADDR
// end ;
71920: LD_VAR 0 3
71924: RET
// export function PlayerSeeMe ( unit ) ; begin
71925: LD_INT 0
71927: PPUSH
// result := See ( your_side , unit ) ;
71928: LD_ADDR_VAR 0 2
71932: PUSH
71933: LD_OWVAR 2
71937: PPUSH
71938: LD_VAR 0 1
71942: PPUSH
71943: CALL_OW 292
71947: ST_TO_ADDR
// end ;
71948: LD_VAR 0 2
71952: RET
// export function ReverseDir ( unit ) ; begin
71953: LD_INT 0
71955: PPUSH
// if not unit then
71956: LD_VAR 0 1
71960: NOT
71961: IFFALSE 71965
// exit ;
71963: GO 71988
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71965: LD_ADDR_VAR 0 2
71969: PUSH
71970: LD_VAR 0 1
71974: PPUSH
71975: CALL_OW 254
71979: PUSH
71980: LD_INT 3
71982: PLUS
71983: PUSH
71984: LD_INT 6
71986: MOD
71987: ST_TO_ADDR
// end ;
71988: LD_VAR 0 2
71992: RET
// export function ReverseArray ( array ) ; var i ; begin
71993: LD_INT 0
71995: PPUSH
71996: PPUSH
// if not array then
71997: LD_VAR 0 1
72001: NOT
72002: IFFALSE 72006
// exit ;
72004: GO 72061
// result := [ ] ;
72006: LD_ADDR_VAR 0 2
72010: PUSH
72011: EMPTY
72012: ST_TO_ADDR
// for i := array downto 1 do
72013: LD_ADDR_VAR 0 3
72017: PUSH
72018: DOUBLE
72019: LD_VAR 0 1
72023: INC
72024: ST_TO_ADDR
72025: LD_INT 1
72027: PUSH
72028: FOR_DOWNTO
72029: IFFALSE 72059
// result := Join ( result , array [ i ] ) ;
72031: LD_ADDR_VAR 0 2
72035: PUSH
72036: LD_VAR 0 2
72040: PPUSH
72041: LD_VAR 0 1
72045: PUSH
72046: LD_VAR 0 3
72050: ARRAY
72051: PPUSH
72052: CALL 76705 0 2
72056: ST_TO_ADDR
72057: GO 72028
72059: POP
72060: POP
// end ;
72061: LD_VAR 0 2
72065: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72066: LD_INT 0
72068: PPUSH
72069: PPUSH
72070: PPUSH
72071: PPUSH
72072: PPUSH
72073: PPUSH
// if not unit or not hexes then
72074: LD_VAR 0 1
72078: NOT
72079: PUSH
72080: LD_VAR 0 2
72084: NOT
72085: OR
72086: IFFALSE 72090
// exit ;
72088: GO 72213
// dist := 9999 ;
72090: LD_ADDR_VAR 0 5
72094: PUSH
72095: LD_INT 9999
72097: ST_TO_ADDR
// for i = 1 to hexes do
72098: LD_ADDR_VAR 0 4
72102: PUSH
72103: DOUBLE
72104: LD_INT 1
72106: DEC
72107: ST_TO_ADDR
72108: LD_VAR 0 2
72112: PUSH
72113: FOR_TO
72114: IFFALSE 72201
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72116: LD_ADDR_VAR 0 6
72120: PUSH
72121: LD_VAR 0 1
72125: PPUSH
72126: LD_VAR 0 2
72130: PUSH
72131: LD_VAR 0 4
72135: ARRAY
72136: PUSH
72137: LD_INT 1
72139: ARRAY
72140: PPUSH
72141: LD_VAR 0 2
72145: PUSH
72146: LD_VAR 0 4
72150: ARRAY
72151: PUSH
72152: LD_INT 2
72154: ARRAY
72155: PPUSH
72156: CALL_OW 297
72160: ST_TO_ADDR
// if tdist < dist then
72161: LD_VAR 0 6
72165: PUSH
72166: LD_VAR 0 5
72170: LESS
72171: IFFALSE 72199
// begin hex := hexes [ i ] ;
72173: LD_ADDR_VAR 0 8
72177: PUSH
72178: LD_VAR 0 2
72182: PUSH
72183: LD_VAR 0 4
72187: ARRAY
72188: ST_TO_ADDR
// dist := tdist ;
72189: LD_ADDR_VAR 0 5
72193: PUSH
72194: LD_VAR 0 6
72198: ST_TO_ADDR
// end ; end ;
72199: GO 72113
72201: POP
72202: POP
// result := hex ;
72203: LD_ADDR_VAR 0 3
72207: PUSH
72208: LD_VAR 0 8
72212: ST_TO_ADDR
// end ;
72213: LD_VAR 0 3
72217: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72218: LD_INT 0
72220: PPUSH
72221: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72222: LD_VAR 0 1
72226: NOT
72227: PUSH
72228: LD_VAR 0 1
72232: PUSH
72233: LD_INT 21
72235: PUSH
72236: LD_INT 2
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_INT 23
72245: PUSH
72246: LD_INT 2
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PPUSH
72257: CALL_OW 69
72261: IN
72262: NOT
72263: OR
72264: IFFALSE 72268
// exit ;
72266: GO 72315
// for i = 1 to 3 do
72268: LD_ADDR_VAR 0 3
72272: PUSH
72273: DOUBLE
72274: LD_INT 1
72276: DEC
72277: ST_TO_ADDR
72278: LD_INT 3
72280: PUSH
72281: FOR_TO
72282: IFFALSE 72313
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72284: LD_VAR 0 1
72288: PPUSH
72289: CALL_OW 250
72293: PPUSH
72294: LD_VAR 0 1
72298: PPUSH
72299: CALL_OW 251
72303: PPUSH
72304: LD_INT 1
72306: PPUSH
72307: CALL_OW 453
72311: GO 72281
72313: POP
72314: POP
// end ;
72315: LD_VAR 0 2
72319: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72320: LD_INT 0
72322: PPUSH
72323: PPUSH
72324: PPUSH
72325: PPUSH
72326: PPUSH
72327: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72328: LD_VAR 0 1
72332: NOT
72333: PUSH
72334: LD_VAR 0 2
72338: NOT
72339: OR
72340: PUSH
72341: LD_VAR 0 1
72345: PPUSH
72346: CALL_OW 314
72350: OR
72351: IFFALSE 72355
// exit ;
72353: GO 72822
// if GetLives ( i ) < 250 then
72355: LD_VAR 0 4
72359: PPUSH
72360: CALL_OW 256
72364: PUSH
72365: LD_INT 250
72367: LESS
72368: IFFALSE 72381
// begin ComAutodestruct ( i ) ;
72370: LD_VAR 0 4
72374: PPUSH
72375: CALL 72218 0 1
// exit ;
72379: GO 72822
// end ; x := GetX ( enemy_unit ) ;
72381: LD_ADDR_VAR 0 7
72385: PUSH
72386: LD_VAR 0 2
72390: PPUSH
72391: CALL_OW 250
72395: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72396: LD_ADDR_VAR 0 8
72400: PUSH
72401: LD_VAR 0 2
72405: PPUSH
72406: CALL_OW 251
72410: ST_TO_ADDR
// if not x or not y then
72411: LD_VAR 0 7
72415: NOT
72416: PUSH
72417: LD_VAR 0 8
72421: NOT
72422: OR
72423: IFFALSE 72427
// exit ;
72425: GO 72822
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72427: LD_ADDR_VAR 0 6
72431: PUSH
72432: LD_VAR 0 7
72436: PPUSH
72437: LD_INT 0
72439: PPUSH
72440: LD_INT 4
72442: PPUSH
72443: CALL_OW 272
72447: PUSH
72448: LD_VAR 0 8
72452: PPUSH
72453: LD_INT 0
72455: PPUSH
72456: LD_INT 4
72458: PPUSH
72459: CALL_OW 273
72463: PUSH
72464: EMPTY
72465: LIST
72466: LIST
72467: PUSH
72468: LD_VAR 0 7
72472: PPUSH
72473: LD_INT 1
72475: PPUSH
72476: LD_INT 4
72478: PPUSH
72479: CALL_OW 272
72483: PUSH
72484: LD_VAR 0 8
72488: PPUSH
72489: LD_INT 1
72491: PPUSH
72492: LD_INT 4
72494: PPUSH
72495: CALL_OW 273
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: PUSH
72504: LD_VAR 0 7
72508: PPUSH
72509: LD_INT 2
72511: PPUSH
72512: LD_INT 4
72514: PPUSH
72515: CALL_OW 272
72519: PUSH
72520: LD_VAR 0 8
72524: PPUSH
72525: LD_INT 2
72527: PPUSH
72528: LD_INT 4
72530: PPUSH
72531: CALL_OW 273
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_VAR 0 7
72544: PPUSH
72545: LD_INT 3
72547: PPUSH
72548: LD_INT 4
72550: PPUSH
72551: CALL_OW 272
72555: PUSH
72556: LD_VAR 0 8
72560: PPUSH
72561: LD_INT 3
72563: PPUSH
72564: LD_INT 4
72566: PPUSH
72567: CALL_OW 273
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_VAR 0 7
72580: PPUSH
72581: LD_INT 4
72583: PPUSH
72584: LD_INT 4
72586: PPUSH
72587: CALL_OW 272
72591: PUSH
72592: LD_VAR 0 8
72596: PPUSH
72597: LD_INT 4
72599: PPUSH
72600: LD_INT 4
72602: PPUSH
72603: CALL_OW 273
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: PUSH
72612: LD_VAR 0 7
72616: PPUSH
72617: LD_INT 5
72619: PPUSH
72620: LD_INT 4
72622: PPUSH
72623: CALL_OW 272
72627: PUSH
72628: LD_VAR 0 8
72632: PPUSH
72633: LD_INT 5
72635: PPUSH
72636: LD_INT 4
72638: PPUSH
72639: CALL_OW 273
72643: PUSH
72644: EMPTY
72645: LIST
72646: LIST
72647: PUSH
72648: EMPTY
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: ST_TO_ADDR
// for i = tmp downto 1 do
72656: LD_ADDR_VAR 0 4
72660: PUSH
72661: DOUBLE
72662: LD_VAR 0 6
72666: INC
72667: ST_TO_ADDR
72668: LD_INT 1
72670: PUSH
72671: FOR_DOWNTO
72672: IFFALSE 72773
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72674: LD_VAR 0 6
72678: PUSH
72679: LD_VAR 0 4
72683: ARRAY
72684: PUSH
72685: LD_INT 1
72687: ARRAY
72688: PPUSH
72689: LD_VAR 0 6
72693: PUSH
72694: LD_VAR 0 4
72698: ARRAY
72699: PUSH
72700: LD_INT 2
72702: ARRAY
72703: PPUSH
72704: CALL_OW 488
72708: NOT
72709: PUSH
72710: LD_VAR 0 6
72714: PUSH
72715: LD_VAR 0 4
72719: ARRAY
72720: PUSH
72721: LD_INT 1
72723: ARRAY
72724: PPUSH
72725: LD_VAR 0 6
72729: PUSH
72730: LD_VAR 0 4
72734: ARRAY
72735: PUSH
72736: LD_INT 2
72738: ARRAY
72739: PPUSH
72740: CALL_OW 428
72744: PUSH
72745: LD_INT 0
72747: NONEQUAL
72748: OR
72749: IFFALSE 72771
// tmp := Delete ( tmp , i ) ;
72751: LD_ADDR_VAR 0 6
72755: PUSH
72756: LD_VAR 0 6
72760: PPUSH
72761: LD_VAR 0 4
72765: PPUSH
72766: CALL_OW 3
72770: ST_TO_ADDR
72771: GO 72671
72773: POP
72774: POP
// j := GetClosestHex ( unit , tmp ) ;
72775: LD_ADDR_VAR 0 5
72779: PUSH
72780: LD_VAR 0 1
72784: PPUSH
72785: LD_VAR 0 6
72789: PPUSH
72790: CALL 72066 0 2
72794: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72795: LD_VAR 0 1
72799: PPUSH
72800: LD_VAR 0 5
72804: PUSH
72805: LD_INT 1
72807: ARRAY
72808: PPUSH
72809: LD_VAR 0 5
72813: PUSH
72814: LD_INT 2
72816: ARRAY
72817: PPUSH
72818: CALL_OW 111
// end ;
72822: LD_VAR 0 3
72826: RET
// export function PrepareApemanSoldier ( ) ; begin
72827: LD_INT 0
72829: PPUSH
// uc_nation := 0 ;
72830: LD_ADDR_OWVAR 21
72834: PUSH
72835: LD_INT 0
72837: ST_TO_ADDR
// hc_sex := sex_male ;
72838: LD_ADDR_OWVAR 27
72842: PUSH
72843: LD_INT 1
72845: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72846: LD_ADDR_OWVAR 28
72850: PUSH
72851: LD_INT 15
72853: ST_TO_ADDR
// hc_gallery :=  ;
72854: LD_ADDR_OWVAR 33
72858: PUSH
72859: LD_STRING 
72861: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72862: LD_ADDR_OWVAR 31
72866: PUSH
72867: LD_INT 0
72869: PPUSH
72870: LD_INT 3
72872: PPUSH
72873: CALL_OW 12
72877: PUSH
72878: LD_INT 0
72880: PPUSH
72881: LD_INT 3
72883: PPUSH
72884: CALL_OW 12
72888: PUSH
72889: LD_INT 0
72891: PUSH
72892: LD_INT 0
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: ST_TO_ADDR
// end ;
72901: LD_VAR 0 1
72905: RET
// export function PrepareApemanEngineer ( ) ; begin
72906: LD_INT 0
72908: PPUSH
// uc_nation := 0 ;
72909: LD_ADDR_OWVAR 21
72913: PUSH
72914: LD_INT 0
72916: ST_TO_ADDR
// hc_sex := sex_male ;
72917: LD_ADDR_OWVAR 27
72921: PUSH
72922: LD_INT 1
72924: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72925: LD_ADDR_OWVAR 28
72929: PUSH
72930: LD_INT 16
72932: ST_TO_ADDR
// hc_gallery :=  ;
72933: LD_ADDR_OWVAR 33
72937: PUSH
72938: LD_STRING 
72940: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72941: LD_ADDR_OWVAR 31
72945: PUSH
72946: LD_INT 0
72948: PPUSH
72949: LD_INT 3
72951: PPUSH
72952: CALL_OW 12
72956: PUSH
72957: LD_INT 0
72959: PPUSH
72960: LD_INT 3
72962: PPUSH
72963: CALL_OW 12
72967: PUSH
72968: LD_INT 0
72970: PUSH
72971: LD_INT 0
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: LIST
72978: LIST
72979: ST_TO_ADDR
// end ;
72980: LD_VAR 0 1
72984: RET
// export function PrepareApeman ( agressivity ) ; begin
72985: LD_INT 0
72987: PPUSH
// uc_side := 0 ;
72988: LD_ADDR_OWVAR 20
72992: PUSH
72993: LD_INT 0
72995: ST_TO_ADDR
// uc_nation := 0 ;
72996: LD_ADDR_OWVAR 21
73000: PUSH
73001: LD_INT 0
73003: ST_TO_ADDR
// hc_sex := sex_male ;
73004: LD_ADDR_OWVAR 27
73008: PUSH
73009: LD_INT 1
73011: ST_TO_ADDR
// hc_class := class_apeman ;
73012: LD_ADDR_OWVAR 28
73016: PUSH
73017: LD_INT 12
73019: ST_TO_ADDR
// hc_gallery :=  ;
73020: LD_ADDR_OWVAR 33
73024: PUSH
73025: LD_STRING 
73027: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73028: LD_ADDR_OWVAR 35
73032: PUSH
73033: LD_VAR 0 1
73037: NEG
73038: PPUSH
73039: LD_VAR 0 1
73043: PPUSH
73044: CALL_OW 12
73048: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73049: LD_ADDR_OWVAR 31
73053: PUSH
73054: LD_INT 0
73056: PPUSH
73057: LD_INT 3
73059: PPUSH
73060: CALL_OW 12
73064: PUSH
73065: LD_INT 0
73067: PPUSH
73068: LD_INT 3
73070: PPUSH
73071: CALL_OW 12
73075: PUSH
73076: LD_INT 0
73078: PUSH
73079: LD_INT 0
73081: PUSH
73082: EMPTY
73083: LIST
73084: LIST
73085: LIST
73086: LIST
73087: ST_TO_ADDR
// end ;
73088: LD_VAR 0 2
73092: RET
// export function PrepareTiger ( agressivity ) ; begin
73093: LD_INT 0
73095: PPUSH
// uc_side := 0 ;
73096: LD_ADDR_OWVAR 20
73100: PUSH
73101: LD_INT 0
73103: ST_TO_ADDR
// uc_nation := 0 ;
73104: LD_ADDR_OWVAR 21
73108: PUSH
73109: LD_INT 0
73111: ST_TO_ADDR
// hc_class := class_tiger ;
73112: LD_ADDR_OWVAR 28
73116: PUSH
73117: LD_INT 14
73119: ST_TO_ADDR
// hc_gallery :=  ;
73120: LD_ADDR_OWVAR 33
73124: PUSH
73125: LD_STRING 
73127: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73128: LD_ADDR_OWVAR 35
73132: PUSH
73133: LD_VAR 0 1
73137: NEG
73138: PPUSH
73139: LD_VAR 0 1
73143: PPUSH
73144: CALL_OW 12
73148: ST_TO_ADDR
// end ;
73149: LD_VAR 0 2
73153: RET
// export function PrepareEnchidna ( ) ; begin
73154: LD_INT 0
73156: PPUSH
// uc_side := 0 ;
73157: LD_ADDR_OWVAR 20
73161: PUSH
73162: LD_INT 0
73164: ST_TO_ADDR
// uc_nation := 0 ;
73165: LD_ADDR_OWVAR 21
73169: PUSH
73170: LD_INT 0
73172: ST_TO_ADDR
// hc_class := class_baggie ;
73173: LD_ADDR_OWVAR 28
73177: PUSH
73178: LD_INT 13
73180: ST_TO_ADDR
// hc_gallery :=  ;
73181: LD_ADDR_OWVAR 33
73185: PUSH
73186: LD_STRING 
73188: ST_TO_ADDR
// end ;
73189: LD_VAR 0 1
73193: RET
// export function PrepareFrog ( ) ; begin
73194: LD_INT 0
73196: PPUSH
// uc_side := 0 ;
73197: LD_ADDR_OWVAR 20
73201: PUSH
73202: LD_INT 0
73204: ST_TO_ADDR
// uc_nation := 0 ;
73205: LD_ADDR_OWVAR 21
73209: PUSH
73210: LD_INT 0
73212: ST_TO_ADDR
// hc_class := class_frog ;
73213: LD_ADDR_OWVAR 28
73217: PUSH
73218: LD_INT 19
73220: ST_TO_ADDR
// hc_gallery :=  ;
73221: LD_ADDR_OWVAR 33
73225: PUSH
73226: LD_STRING 
73228: ST_TO_ADDR
// end ;
73229: LD_VAR 0 1
73233: RET
// export function PrepareFish ( ) ; begin
73234: LD_INT 0
73236: PPUSH
// uc_side := 0 ;
73237: LD_ADDR_OWVAR 20
73241: PUSH
73242: LD_INT 0
73244: ST_TO_ADDR
// uc_nation := 0 ;
73245: LD_ADDR_OWVAR 21
73249: PUSH
73250: LD_INT 0
73252: ST_TO_ADDR
// hc_class := class_fish ;
73253: LD_ADDR_OWVAR 28
73257: PUSH
73258: LD_INT 20
73260: ST_TO_ADDR
// hc_gallery :=  ;
73261: LD_ADDR_OWVAR 33
73265: PUSH
73266: LD_STRING 
73268: ST_TO_ADDR
// end ;
73269: LD_VAR 0 1
73273: RET
// export function PrepareBird ( ) ; begin
73274: LD_INT 0
73276: PPUSH
// uc_side := 0 ;
73277: LD_ADDR_OWVAR 20
73281: PUSH
73282: LD_INT 0
73284: ST_TO_ADDR
// uc_nation := 0 ;
73285: LD_ADDR_OWVAR 21
73289: PUSH
73290: LD_INT 0
73292: ST_TO_ADDR
// hc_class := class_phororhacos ;
73293: LD_ADDR_OWVAR 28
73297: PUSH
73298: LD_INT 18
73300: ST_TO_ADDR
// hc_gallery :=  ;
73301: LD_ADDR_OWVAR 33
73305: PUSH
73306: LD_STRING 
73308: ST_TO_ADDR
// end ;
73309: LD_VAR 0 1
73313: RET
// export function PrepareHorse ( ) ; begin
73314: LD_INT 0
73316: PPUSH
// uc_side := 0 ;
73317: LD_ADDR_OWVAR 20
73321: PUSH
73322: LD_INT 0
73324: ST_TO_ADDR
// uc_nation := 0 ;
73325: LD_ADDR_OWVAR 21
73329: PUSH
73330: LD_INT 0
73332: ST_TO_ADDR
// hc_class := class_horse ;
73333: LD_ADDR_OWVAR 28
73337: PUSH
73338: LD_INT 21
73340: ST_TO_ADDR
// hc_gallery :=  ;
73341: LD_ADDR_OWVAR 33
73345: PUSH
73346: LD_STRING 
73348: ST_TO_ADDR
// end ;
73349: LD_VAR 0 1
73353: RET
// export function PrepareMastodont ( ) ; begin
73354: LD_INT 0
73356: PPUSH
// uc_side := 0 ;
73357: LD_ADDR_OWVAR 20
73361: PUSH
73362: LD_INT 0
73364: ST_TO_ADDR
// uc_nation := 0 ;
73365: LD_ADDR_OWVAR 21
73369: PUSH
73370: LD_INT 0
73372: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73373: LD_ADDR_OWVAR 37
73377: PUSH
73378: LD_INT 31
73380: ST_TO_ADDR
// vc_control := control_rider ;
73381: LD_ADDR_OWVAR 38
73385: PUSH
73386: LD_INT 4
73388: ST_TO_ADDR
// end ;
73389: LD_VAR 0 1
73393: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73394: LD_INT 0
73396: PPUSH
73397: PPUSH
73398: PPUSH
// uc_side = 0 ;
73399: LD_ADDR_OWVAR 20
73403: PUSH
73404: LD_INT 0
73406: ST_TO_ADDR
// uc_nation = 0 ;
73407: LD_ADDR_OWVAR 21
73411: PUSH
73412: LD_INT 0
73414: ST_TO_ADDR
// InitHc_All ( ) ;
73415: CALL_OW 584
// InitVc ;
73419: CALL_OW 20
// if mastodonts then
73423: LD_VAR 0 6
73427: IFFALSE 73494
// for i = 1 to mastodonts do
73429: LD_ADDR_VAR 0 11
73433: PUSH
73434: DOUBLE
73435: LD_INT 1
73437: DEC
73438: ST_TO_ADDR
73439: LD_VAR 0 6
73443: PUSH
73444: FOR_TO
73445: IFFALSE 73492
// begin vc_chassis := 31 ;
73447: LD_ADDR_OWVAR 37
73451: PUSH
73452: LD_INT 31
73454: ST_TO_ADDR
// vc_control := control_rider ;
73455: LD_ADDR_OWVAR 38
73459: PUSH
73460: LD_INT 4
73462: ST_TO_ADDR
// animal := CreateVehicle ;
73463: LD_ADDR_VAR 0 12
73467: PUSH
73468: CALL_OW 45
73472: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73473: LD_VAR 0 12
73477: PPUSH
73478: LD_VAR 0 8
73482: PPUSH
73483: LD_INT 0
73485: PPUSH
73486: CALL 75622 0 3
// end ;
73490: GO 73444
73492: POP
73493: POP
// if horses then
73494: LD_VAR 0 5
73498: IFFALSE 73565
// for i = 1 to horses do
73500: LD_ADDR_VAR 0 11
73504: PUSH
73505: DOUBLE
73506: LD_INT 1
73508: DEC
73509: ST_TO_ADDR
73510: LD_VAR 0 5
73514: PUSH
73515: FOR_TO
73516: IFFALSE 73563
// begin hc_class := 21 ;
73518: LD_ADDR_OWVAR 28
73522: PUSH
73523: LD_INT 21
73525: ST_TO_ADDR
// hc_gallery :=  ;
73526: LD_ADDR_OWVAR 33
73530: PUSH
73531: LD_STRING 
73533: ST_TO_ADDR
// animal := CreateHuman ;
73534: LD_ADDR_VAR 0 12
73538: PUSH
73539: CALL_OW 44
73543: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73544: LD_VAR 0 12
73548: PPUSH
73549: LD_VAR 0 8
73553: PPUSH
73554: LD_INT 0
73556: PPUSH
73557: CALL 75622 0 3
// end ;
73561: GO 73515
73563: POP
73564: POP
// if birds then
73565: LD_VAR 0 1
73569: IFFALSE 73636
// for i = 1 to birds do
73571: LD_ADDR_VAR 0 11
73575: PUSH
73576: DOUBLE
73577: LD_INT 1
73579: DEC
73580: ST_TO_ADDR
73581: LD_VAR 0 1
73585: PUSH
73586: FOR_TO
73587: IFFALSE 73634
// begin hc_class = 18 ;
73589: LD_ADDR_OWVAR 28
73593: PUSH
73594: LD_INT 18
73596: ST_TO_ADDR
// hc_gallery =  ;
73597: LD_ADDR_OWVAR 33
73601: PUSH
73602: LD_STRING 
73604: ST_TO_ADDR
// animal := CreateHuman ;
73605: LD_ADDR_VAR 0 12
73609: PUSH
73610: CALL_OW 44
73614: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73615: LD_VAR 0 12
73619: PPUSH
73620: LD_VAR 0 8
73624: PPUSH
73625: LD_INT 0
73627: PPUSH
73628: CALL 75622 0 3
// end ;
73632: GO 73586
73634: POP
73635: POP
// if tigers then
73636: LD_VAR 0 2
73640: IFFALSE 73724
// for i = 1 to tigers do
73642: LD_ADDR_VAR 0 11
73646: PUSH
73647: DOUBLE
73648: LD_INT 1
73650: DEC
73651: ST_TO_ADDR
73652: LD_VAR 0 2
73656: PUSH
73657: FOR_TO
73658: IFFALSE 73722
// begin hc_class = class_tiger ;
73660: LD_ADDR_OWVAR 28
73664: PUSH
73665: LD_INT 14
73667: ST_TO_ADDR
// hc_gallery =  ;
73668: LD_ADDR_OWVAR 33
73672: PUSH
73673: LD_STRING 
73675: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73676: LD_ADDR_OWVAR 35
73680: PUSH
73681: LD_INT 7
73683: NEG
73684: PPUSH
73685: LD_INT 7
73687: PPUSH
73688: CALL_OW 12
73692: ST_TO_ADDR
// animal := CreateHuman ;
73693: LD_ADDR_VAR 0 12
73697: PUSH
73698: CALL_OW 44
73702: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73703: LD_VAR 0 12
73707: PPUSH
73708: LD_VAR 0 8
73712: PPUSH
73713: LD_INT 0
73715: PPUSH
73716: CALL 75622 0 3
// end ;
73720: GO 73657
73722: POP
73723: POP
// if apemans then
73724: LD_VAR 0 3
73728: IFFALSE 73851
// for i = 1 to apemans do
73730: LD_ADDR_VAR 0 11
73734: PUSH
73735: DOUBLE
73736: LD_INT 1
73738: DEC
73739: ST_TO_ADDR
73740: LD_VAR 0 3
73744: PUSH
73745: FOR_TO
73746: IFFALSE 73849
// begin hc_class = class_apeman ;
73748: LD_ADDR_OWVAR 28
73752: PUSH
73753: LD_INT 12
73755: ST_TO_ADDR
// hc_gallery =  ;
73756: LD_ADDR_OWVAR 33
73760: PUSH
73761: LD_STRING 
73763: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73764: LD_ADDR_OWVAR 35
73768: PUSH
73769: LD_INT 2
73771: NEG
73772: PPUSH
73773: LD_INT 2
73775: PPUSH
73776: CALL_OW 12
73780: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73781: LD_ADDR_OWVAR 31
73785: PUSH
73786: LD_INT 1
73788: PPUSH
73789: LD_INT 3
73791: PPUSH
73792: CALL_OW 12
73796: PUSH
73797: LD_INT 1
73799: PPUSH
73800: LD_INT 3
73802: PPUSH
73803: CALL_OW 12
73807: PUSH
73808: LD_INT 0
73810: PUSH
73811: LD_INT 0
73813: PUSH
73814: EMPTY
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: ST_TO_ADDR
// animal := CreateHuman ;
73820: LD_ADDR_VAR 0 12
73824: PUSH
73825: CALL_OW 44
73829: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73830: LD_VAR 0 12
73834: PPUSH
73835: LD_VAR 0 8
73839: PPUSH
73840: LD_INT 0
73842: PPUSH
73843: CALL 75622 0 3
// end ;
73847: GO 73745
73849: POP
73850: POP
// if enchidnas then
73851: LD_VAR 0 4
73855: IFFALSE 73922
// for i = 1 to enchidnas do
73857: LD_ADDR_VAR 0 11
73861: PUSH
73862: DOUBLE
73863: LD_INT 1
73865: DEC
73866: ST_TO_ADDR
73867: LD_VAR 0 4
73871: PUSH
73872: FOR_TO
73873: IFFALSE 73920
// begin hc_class = 13 ;
73875: LD_ADDR_OWVAR 28
73879: PUSH
73880: LD_INT 13
73882: ST_TO_ADDR
// hc_gallery =  ;
73883: LD_ADDR_OWVAR 33
73887: PUSH
73888: LD_STRING 
73890: ST_TO_ADDR
// animal := CreateHuman ;
73891: LD_ADDR_VAR 0 12
73895: PUSH
73896: CALL_OW 44
73900: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73901: LD_VAR 0 12
73905: PPUSH
73906: LD_VAR 0 8
73910: PPUSH
73911: LD_INT 0
73913: PPUSH
73914: CALL 75622 0 3
// end ;
73918: GO 73872
73920: POP
73921: POP
// if fishes then
73922: LD_VAR 0 7
73926: IFFALSE 73993
// for i = 1 to fishes do
73928: LD_ADDR_VAR 0 11
73932: PUSH
73933: DOUBLE
73934: LD_INT 1
73936: DEC
73937: ST_TO_ADDR
73938: LD_VAR 0 7
73942: PUSH
73943: FOR_TO
73944: IFFALSE 73991
// begin hc_class = 20 ;
73946: LD_ADDR_OWVAR 28
73950: PUSH
73951: LD_INT 20
73953: ST_TO_ADDR
// hc_gallery =  ;
73954: LD_ADDR_OWVAR 33
73958: PUSH
73959: LD_STRING 
73961: ST_TO_ADDR
// animal := CreateHuman ;
73962: LD_ADDR_VAR 0 12
73966: PUSH
73967: CALL_OW 44
73971: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73972: LD_VAR 0 12
73976: PPUSH
73977: LD_VAR 0 9
73981: PPUSH
73982: LD_INT 0
73984: PPUSH
73985: CALL 75622 0 3
// end ;
73989: GO 73943
73991: POP
73992: POP
// end ;
73993: LD_VAR 0 10
73997: RET
// export function WantHeal ( sci , unit ) ; begin
73998: LD_INT 0
74000: PPUSH
// if GetTaskList ( sci ) > 0 then
74001: LD_VAR 0 1
74005: PPUSH
74006: CALL_OW 437
74010: PUSH
74011: LD_INT 0
74013: GREATER
74014: IFFALSE 74084
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74016: LD_VAR 0 1
74020: PPUSH
74021: CALL_OW 437
74025: PUSH
74026: LD_INT 1
74028: ARRAY
74029: PUSH
74030: LD_INT 1
74032: ARRAY
74033: PUSH
74034: LD_STRING l
74036: EQUAL
74037: PUSH
74038: LD_VAR 0 1
74042: PPUSH
74043: CALL_OW 437
74047: PUSH
74048: LD_INT 1
74050: ARRAY
74051: PUSH
74052: LD_INT 4
74054: ARRAY
74055: PUSH
74056: LD_VAR 0 2
74060: EQUAL
74061: AND
74062: IFFALSE 74074
// result := true else
74064: LD_ADDR_VAR 0 3
74068: PUSH
74069: LD_INT 1
74071: ST_TO_ADDR
74072: GO 74082
// result := false ;
74074: LD_ADDR_VAR 0 3
74078: PUSH
74079: LD_INT 0
74081: ST_TO_ADDR
// end else
74082: GO 74092
// result := false ;
74084: LD_ADDR_VAR 0 3
74088: PUSH
74089: LD_INT 0
74091: ST_TO_ADDR
// end ;
74092: LD_VAR 0 3
74096: RET
// export function HealTarget ( sci ) ; begin
74097: LD_INT 0
74099: PPUSH
// if not sci then
74100: LD_VAR 0 1
74104: NOT
74105: IFFALSE 74109
// exit ;
74107: GO 74174
// result := 0 ;
74109: LD_ADDR_VAR 0 2
74113: PUSH
74114: LD_INT 0
74116: ST_TO_ADDR
// if GetTaskList ( sci ) then
74117: LD_VAR 0 1
74121: PPUSH
74122: CALL_OW 437
74126: IFFALSE 74174
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74128: LD_VAR 0 1
74132: PPUSH
74133: CALL_OW 437
74137: PUSH
74138: LD_INT 1
74140: ARRAY
74141: PUSH
74142: LD_INT 1
74144: ARRAY
74145: PUSH
74146: LD_STRING l
74148: EQUAL
74149: IFFALSE 74174
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74151: LD_ADDR_VAR 0 2
74155: PUSH
74156: LD_VAR 0 1
74160: PPUSH
74161: CALL_OW 437
74165: PUSH
74166: LD_INT 1
74168: ARRAY
74169: PUSH
74170: LD_INT 4
74172: ARRAY
74173: ST_TO_ADDR
// end ;
74174: LD_VAR 0 2
74178: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74179: LD_INT 0
74181: PPUSH
74182: PPUSH
74183: PPUSH
74184: PPUSH
// if not base_units then
74185: LD_VAR 0 1
74189: NOT
74190: IFFALSE 74194
// exit ;
74192: GO 74281
// result := false ;
74194: LD_ADDR_VAR 0 2
74198: PUSH
74199: LD_INT 0
74201: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74202: LD_ADDR_VAR 0 5
74206: PUSH
74207: LD_VAR 0 1
74211: PPUSH
74212: LD_INT 21
74214: PUSH
74215: LD_INT 3
74217: PUSH
74218: EMPTY
74219: LIST
74220: LIST
74221: PPUSH
74222: CALL_OW 72
74226: ST_TO_ADDR
// if not tmp then
74227: LD_VAR 0 5
74231: NOT
74232: IFFALSE 74236
// exit ;
74234: GO 74281
// for i in tmp do
74236: LD_ADDR_VAR 0 3
74240: PUSH
74241: LD_VAR 0 5
74245: PUSH
74246: FOR_IN
74247: IFFALSE 74279
// begin result := EnemyInRange ( i , 22 ) ;
74249: LD_ADDR_VAR 0 2
74253: PUSH
74254: LD_VAR 0 3
74258: PPUSH
74259: LD_INT 22
74261: PPUSH
74262: CALL 71868 0 2
74266: ST_TO_ADDR
// if result then
74267: LD_VAR 0 2
74271: IFFALSE 74277
// exit ;
74273: POP
74274: POP
74275: GO 74281
// end ;
74277: GO 74246
74279: POP
74280: POP
// end ;
74281: LD_VAR 0 2
74285: RET
// export function FilterByTag ( units , tag ) ; begin
74286: LD_INT 0
74288: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74289: LD_ADDR_VAR 0 3
74293: PUSH
74294: LD_VAR 0 1
74298: PPUSH
74299: LD_INT 120
74301: PUSH
74302: LD_VAR 0 2
74306: PUSH
74307: EMPTY
74308: LIST
74309: LIST
74310: PPUSH
74311: CALL_OW 72
74315: ST_TO_ADDR
// end ;
74316: LD_VAR 0 3
74320: RET
// export function IsDriver ( un ) ; begin
74321: LD_INT 0
74323: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74324: LD_ADDR_VAR 0 2
74328: PUSH
74329: LD_VAR 0 1
74333: PUSH
74334: LD_INT 55
74336: PUSH
74337: EMPTY
74338: LIST
74339: PPUSH
74340: CALL_OW 69
74344: IN
74345: ST_TO_ADDR
// end ;
74346: LD_VAR 0 2
74350: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74351: LD_INT 0
74353: PPUSH
74354: PPUSH
// list := [ ] ;
74355: LD_ADDR_VAR 0 5
74359: PUSH
74360: EMPTY
74361: ST_TO_ADDR
// case d of 0 :
74362: LD_VAR 0 3
74366: PUSH
74367: LD_INT 0
74369: DOUBLE
74370: EQUAL
74371: IFTRUE 74375
74373: GO 74508
74375: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74376: LD_ADDR_VAR 0 5
74380: PUSH
74381: LD_VAR 0 1
74385: PUSH
74386: LD_INT 4
74388: MINUS
74389: PUSH
74390: LD_VAR 0 2
74394: PUSH
74395: LD_INT 4
74397: MINUS
74398: PUSH
74399: LD_INT 2
74401: PUSH
74402: EMPTY
74403: LIST
74404: LIST
74405: LIST
74406: PUSH
74407: LD_VAR 0 1
74411: PUSH
74412: LD_INT 3
74414: MINUS
74415: PUSH
74416: LD_VAR 0 2
74420: PUSH
74421: LD_INT 1
74423: PUSH
74424: EMPTY
74425: LIST
74426: LIST
74427: LIST
74428: PUSH
74429: LD_VAR 0 1
74433: PUSH
74434: LD_INT 4
74436: PLUS
74437: PUSH
74438: LD_VAR 0 2
74442: PUSH
74443: LD_INT 4
74445: PUSH
74446: EMPTY
74447: LIST
74448: LIST
74449: LIST
74450: PUSH
74451: LD_VAR 0 1
74455: PUSH
74456: LD_INT 3
74458: PLUS
74459: PUSH
74460: LD_VAR 0 2
74464: PUSH
74465: LD_INT 3
74467: PLUS
74468: PUSH
74469: LD_INT 5
74471: PUSH
74472: EMPTY
74473: LIST
74474: LIST
74475: LIST
74476: PUSH
74477: LD_VAR 0 1
74481: PUSH
74482: LD_VAR 0 2
74486: PUSH
74487: LD_INT 4
74489: PLUS
74490: PUSH
74491: LD_INT 0
74493: PUSH
74494: EMPTY
74495: LIST
74496: LIST
74497: LIST
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: LIST
74503: LIST
74504: LIST
74505: ST_TO_ADDR
// end ; 1 :
74506: GO 75206
74508: LD_INT 1
74510: DOUBLE
74511: EQUAL
74512: IFTRUE 74516
74514: GO 74649
74516: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74517: LD_ADDR_VAR 0 5
74521: PUSH
74522: LD_VAR 0 1
74526: PUSH
74527: LD_VAR 0 2
74531: PUSH
74532: LD_INT 4
74534: MINUS
74535: PUSH
74536: LD_INT 3
74538: PUSH
74539: EMPTY
74540: LIST
74541: LIST
74542: LIST
74543: PUSH
74544: LD_VAR 0 1
74548: PUSH
74549: LD_INT 3
74551: MINUS
74552: PUSH
74553: LD_VAR 0 2
74557: PUSH
74558: LD_INT 3
74560: MINUS
74561: PUSH
74562: LD_INT 2
74564: PUSH
74565: EMPTY
74566: LIST
74567: LIST
74568: LIST
74569: PUSH
74570: LD_VAR 0 1
74574: PUSH
74575: LD_INT 4
74577: MINUS
74578: PUSH
74579: LD_VAR 0 2
74583: PUSH
74584: LD_INT 1
74586: PUSH
74587: EMPTY
74588: LIST
74589: LIST
74590: LIST
74591: PUSH
74592: LD_VAR 0 1
74596: PUSH
74597: LD_VAR 0 2
74601: PUSH
74602: LD_INT 3
74604: PLUS
74605: PUSH
74606: LD_INT 0
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: LIST
74613: PUSH
74614: LD_VAR 0 1
74618: PUSH
74619: LD_INT 4
74621: PLUS
74622: PUSH
74623: LD_VAR 0 2
74627: PUSH
74628: LD_INT 4
74630: PLUS
74631: PUSH
74632: LD_INT 5
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: LIST
74639: PUSH
74640: EMPTY
74641: LIST
74642: LIST
74643: LIST
74644: LIST
74645: LIST
74646: ST_TO_ADDR
// end ; 2 :
74647: GO 75206
74649: LD_INT 2
74651: DOUBLE
74652: EQUAL
74653: IFTRUE 74657
74655: GO 74786
74657: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74658: LD_ADDR_VAR 0 5
74662: PUSH
74663: LD_VAR 0 1
74667: PUSH
74668: LD_VAR 0 2
74672: PUSH
74673: LD_INT 3
74675: MINUS
74676: PUSH
74677: LD_INT 3
74679: PUSH
74680: EMPTY
74681: LIST
74682: LIST
74683: LIST
74684: PUSH
74685: LD_VAR 0 1
74689: PUSH
74690: LD_INT 4
74692: PLUS
74693: PUSH
74694: LD_VAR 0 2
74698: PUSH
74699: LD_INT 4
74701: PUSH
74702: EMPTY
74703: LIST
74704: LIST
74705: LIST
74706: PUSH
74707: LD_VAR 0 1
74711: PUSH
74712: LD_VAR 0 2
74716: PUSH
74717: LD_INT 4
74719: PLUS
74720: PUSH
74721: LD_INT 0
74723: PUSH
74724: EMPTY
74725: LIST
74726: LIST
74727: LIST
74728: PUSH
74729: LD_VAR 0 1
74733: PUSH
74734: LD_INT 3
74736: MINUS
74737: PUSH
74738: LD_VAR 0 2
74742: PUSH
74743: LD_INT 1
74745: PUSH
74746: EMPTY
74747: LIST
74748: LIST
74749: LIST
74750: PUSH
74751: LD_VAR 0 1
74755: PUSH
74756: LD_INT 4
74758: MINUS
74759: PUSH
74760: LD_VAR 0 2
74764: PUSH
74765: LD_INT 4
74767: MINUS
74768: PUSH
74769: LD_INT 2
74771: PUSH
74772: EMPTY
74773: LIST
74774: LIST
74775: LIST
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: LIST
74781: LIST
74782: LIST
74783: ST_TO_ADDR
// end ; 3 :
74784: GO 75206
74786: LD_INT 3
74788: DOUBLE
74789: EQUAL
74790: IFTRUE 74794
74792: GO 74927
74794: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74795: LD_ADDR_VAR 0 5
74799: PUSH
74800: LD_VAR 0 1
74804: PUSH
74805: LD_INT 3
74807: PLUS
74808: PUSH
74809: LD_VAR 0 2
74813: PUSH
74814: LD_INT 4
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: LIST
74821: PUSH
74822: LD_VAR 0 1
74826: PUSH
74827: LD_INT 4
74829: PLUS
74830: PUSH
74831: LD_VAR 0 2
74835: PUSH
74836: LD_INT 4
74838: PLUS
74839: PUSH
74840: LD_INT 5
74842: PUSH
74843: EMPTY
74844: LIST
74845: LIST
74846: LIST
74847: PUSH
74848: LD_VAR 0 1
74852: PUSH
74853: LD_INT 4
74855: MINUS
74856: PUSH
74857: LD_VAR 0 2
74861: PUSH
74862: LD_INT 1
74864: PUSH
74865: EMPTY
74866: LIST
74867: LIST
74868: LIST
74869: PUSH
74870: LD_VAR 0 1
74874: PUSH
74875: LD_VAR 0 2
74879: PUSH
74880: LD_INT 4
74882: MINUS
74883: PUSH
74884: LD_INT 3
74886: PUSH
74887: EMPTY
74888: LIST
74889: LIST
74890: LIST
74891: PUSH
74892: LD_VAR 0 1
74896: PUSH
74897: LD_INT 3
74899: MINUS
74900: PUSH
74901: LD_VAR 0 2
74905: PUSH
74906: LD_INT 3
74908: MINUS
74909: PUSH
74910: LD_INT 2
74912: PUSH
74913: EMPTY
74914: LIST
74915: LIST
74916: LIST
74917: PUSH
74918: EMPTY
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: ST_TO_ADDR
// end ; 4 :
74925: GO 75206
74927: LD_INT 4
74929: DOUBLE
74930: EQUAL
74931: IFTRUE 74935
74933: GO 75068
74935: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74936: LD_ADDR_VAR 0 5
74940: PUSH
74941: LD_VAR 0 1
74945: PUSH
74946: LD_VAR 0 2
74950: PUSH
74951: LD_INT 4
74953: PLUS
74954: PUSH
74955: LD_INT 0
74957: PUSH
74958: EMPTY
74959: LIST
74960: LIST
74961: LIST
74962: PUSH
74963: LD_VAR 0 1
74967: PUSH
74968: LD_INT 3
74970: PLUS
74971: PUSH
74972: LD_VAR 0 2
74976: PUSH
74977: LD_INT 3
74979: PLUS
74980: PUSH
74981: LD_INT 5
74983: PUSH
74984: EMPTY
74985: LIST
74986: LIST
74987: LIST
74988: PUSH
74989: LD_VAR 0 1
74993: PUSH
74994: LD_INT 4
74996: PLUS
74997: PUSH
74998: LD_VAR 0 2
75002: PUSH
75003: LD_INT 4
75005: PUSH
75006: EMPTY
75007: LIST
75008: LIST
75009: LIST
75010: PUSH
75011: LD_VAR 0 1
75015: PUSH
75016: LD_VAR 0 2
75020: PUSH
75021: LD_INT 3
75023: MINUS
75024: PUSH
75025: LD_INT 3
75027: PUSH
75028: EMPTY
75029: LIST
75030: LIST
75031: LIST
75032: PUSH
75033: LD_VAR 0 1
75037: PUSH
75038: LD_INT 4
75040: MINUS
75041: PUSH
75042: LD_VAR 0 2
75046: PUSH
75047: LD_INT 4
75049: MINUS
75050: PUSH
75051: LD_INT 2
75053: PUSH
75054: EMPTY
75055: LIST
75056: LIST
75057: LIST
75058: PUSH
75059: EMPTY
75060: LIST
75061: LIST
75062: LIST
75063: LIST
75064: LIST
75065: ST_TO_ADDR
// end ; 5 :
75066: GO 75206
75068: LD_INT 5
75070: DOUBLE
75071: EQUAL
75072: IFTRUE 75076
75074: GO 75205
75076: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75077: LD_ADDR_VAR 0 5
75081: PUSH
75082: LD_VAR 0 1
75086: PUSH
75087: LD_INT 4
75089: MINUS
75090: PUSH
75091: LD_VAR 0 2
75095: PUSH
75096: LD_INT 1
75098: PUSH
75099: EMPTY
75100: LIST
75101: LIST
75102: LIST
75103: PUSH
75104: LD_VAR 0 1
75108: PUSH
75109: LD_VAR 0 2
75113: PUSH
75114: LD_INT 4
75116: MINUS
75117: PUSH
75118: LD_INT 3
75120: PUSH
75121: EMPTY
75122: LIST
75123: LIST
75124: LIST
75125: PUSH
75126: LD_VAR 0 1
75130: PUSH
75131: LD_INT 4
75133: PLUS
75134: PUSH
75135: LD_VAR 0 2
75139: PUSH
75140: LD_INT 4
75142: PLUS
75143: PUSH
75144: LD_INT 5
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: LIST
75151: PUSH
75152: LD_VAR 0 1
75156: PUSH
75157: LD_INT 3
75159: PLUS
75160: PUSH
75161: LD_VAR 0 2
75165: PUSH
75166: LD_INT 4
75168: PUSH
75169: EMPTY
75170: LIST
75171: LIST
75172: LIST
75173: PUSH
75174: LD_VAR 0 1
75178: PUSH
75179: LD_VAR 0 2
75183: PUSH
75184: LD_INT 3
75186: PLUS
75187: PUSH
75188: LD_INT 0
75190: PUSH
75191: EMPTY
75192: LIST
75193: LIST
75194: LIST
75195: PUSH
75196: EMPTY
75197: LIST
75198: LIST
75199: LIST
75200: LIST
75201: LIST
75202: ST_TO_ADDR
// end ; end ;
75203: GO 75206
75205: POP
// result := list ;
75206: LD_ADDR_VAR 0 4
75210: PUSH
75211: LD_VAR 0 5
75215: ST_TO_ADDR
// end ;
75216: LD_VAR 0 4
75220: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75221: LD_INT 0
75223: PPUSH
75224: PPUSH
75225: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75226: LD_VAR 0 1
75230: NOT
75231: PUSH
75232: LD_VAR 0 2
75236: PUSH
75237: LD_INT 1
75239: PUSH
75240: LD_INT 2
75242: PUSH
75243: LD_INT 3
75245: PUSH
75246: LD_INT 4
75248: PUSH
75249: EMPTY
75250: LIST
75251: LIST
75252: LIST
75253: LIST
75254: IN
75255: NOT
75256: OR
75257: IFFALSE 75261
// exit ;
75259: GO 75344
// tmp := [ ] ;
75261: LD_ADDR_VAR 0 5
75265: PUSH
75266: EMPTY
75267: ST_TO_ADDR
// for i in units do
75268: LD_ADDR_VAR 0 4
75272: PUSH
75273: LD_VAR 0 1
75277: PUSH
75278: FOR_IN
75279: IFFALSE 75313
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75281: LD_ADDR_VAR 0 5
75285: PUSH
75286: LD_VAR 0 5
75290: PPUSH
75291: LD_VAR 0 4
75295: PPUSH
75296: LD_VAR 0 2
75300: PPUSH
75301: CALL_OW 259
75305: PPUSH
75306: CALL 76705 0 2
75310: ST_TO_ADDR
75311: GO 75278
75313: POP
75314: POP
// if not tmp then
75315: LD_VAR 0 5
75319: NOT
75320: IFFALSE 75324
// exit ;
75322: GO 75344
// result := SortListByListDesc ( units , tmp ) ;
75324: LD_ADDR_VAR 0 3
75328: PUSH
75329: LD_VAR 0 1
75333: PPUSH
75334: LD_VAR 0 5
75338: PPUSH
75339: CALL_OW 77
75343: ST_TO_ADDR
// end ;
75344: LD_VAR 0 3
75348: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75349: LD_INT 0
75351: PPUSH
75352: PPUSH
75353: PPUSH
// result := false ;
75354: LD_ADDR_VAR 0 3
75358: PUSH
75359: LD_INT 0
75361: ST_TO_ADDR
// if not building then
75362: LD_VAR 0 2
75366: NOT
75367: IFFALSE 75371
// exit ;
75369: GO 75509
// x := GetX ( building ) ;
75371: LD_ADDR_VAR 0 4
75375: PUSH
75376: LD_VAR 0 2
75380: PPUSH
75381: CALL_OW 250
75385: ST_TO_ADDR
// y := GetY ( building ) ;
75386: LD_ADDR_VAR 0 5
75390: PUSH
75391: LD_VAR 0 2
75395: PPUSH
75396: CALL_OW 251
75400: ST_TO_ADDR
// if not x or not y then
75401: LD_VAR 0 4
75405: NOT
75406: PUSH
75407: LD_VAR 0 5
75411: NOT
75412: OR
75413: IFFALSE 75417
// exit ;
75415: GO 75509
// if GetTaskList ( unit ) then
75417: LD_VAR 0 1
75421: PPUSH
75422: CALL_OW 437
75426: IFFALSE 75509
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75428: LD_STRING e
75430: PUSH
75431: LD_VAR 0 1
75435: PPUSH
75436: CALL_OW 437
75440: PUSH
75441: LD_INT 1
75443: ARRAY
75444: PUSH
75445: LD_INT 1
75447: ARRAY
75448: EQUAL
75449: PUSH
75450: LD_VAR 0 4
75454: PUSH
75455: LD_VAR 0 1
75459: PPUSH
75460: CALL_OW 437
75464: PUSH
75465: LD_INT 1
75467: ARRAY
75468: PUSH
75469: LD_INT 2
75471: ARRAY
75472: EQUAL
75473: AND
75474: PUSH
75475: LD_VAR 0 5
75479: PUSH
75480: LD_VAR 0 1
75484: PPUSH
75485: CALL_OW 437
75489: PUSH
75490: LD_INT 1
75492: ARRAY
75493: PUSH
75494: LD_INT 3
75496: ARRAY
75497: EQUAL
75498: AND
75499: IFFALSE 75509
// result := true end ;
75501: LD_ADDR_VAR 0 3
75505: PUSH
75506: LD_INT 1
75508: ST_TO_ADDR
// end ;
75509: LD_VAR 0 3
75513: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75514: LD_INT 0
75516: PPUSH
// result := false ;
75517: LD_ADDR_VAR 0 4
75521: PUSH
75522: LD_INT 0
75524: ST_TO_ADDR
// if GetTaskList ( unit ) then
75525: LD_VAR 0 1
75529: PPUSH
75530: CALL_OW 437
75534: IFFALSE 75617
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75536: LD_STRING M
75538: PUSH
75539: LD_VAR 0 1
75543: PPUSH
75544: CALL_OW 437
75548: PUSH
75549: LD_INT 1
75551: ARRAY
75552: PUSH
75553: LD_INT 1
75555: ARRAY
75556: EQUAL
75557: PUSH
75558: LD_VAR 0 2
75562: PUSH
75563: LD_VAR 0 1
75567: PPUSH
75568: CALL_OW 437
75572: PUSH
75573: LD_INT 1
75575: ARRAY
75576: PUSH
75577: LD_INT 2
75579: ARRAY
75580: EQUAL
75581: AND
75582: PUSH
75583: LD_VAR 0 3
75587: PUSH
75588: LD_VAR 0 1
75592: PPUSH
75593: CALL_OW 437
75597: PUSH
75598: LD_INT 1
75600: ARRAY
75601: PUSH
75602: LD_INT 3
75604: ARRAY
75605: EQUAL
75606: AND
75607: IFFALSE 75617
// result := true ;
75609: LD_ADDR_VAR 0 4
75613: PUSH
75614: LD_INT 1
75616: ST_TO_ADDR
// end ; end ;
75617: LD_VAR 0 4
75621: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75622: LD_INT 0
75624: PPUSH
75625: PPUSH
75626: PPUSH
75627: PPUSH
// if not unit or not area then
75628: LD_VAR 0 1
75632: NOT
75633: PUSH
75634: LD_VAR 0 2
75638: NOT
75639: OR
75640: IFFALSE 75644
// exit ;
75642: GO 75808
// tmp := AreaToList ( area , i ) ;
75644: LD_ADDR_VAR 0 6
75648: PUSH
75649: LD_VAR 0 2
75653: PPUSH
75654: LD_VAR 0 5
75658: PPUSH
75659: CALL_OW 517
75663: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75664: LD_ADDR_VAR 0 5
75668: PUSH
75669: DOUBLE
75670: LD_INT 1
75672: DEC
75673: ST_TO_ADDR
75674: LD_VAR 0 6
75678: PUSH
75679: LD_INT 1
75681: ARRAY
75682: PUSH
75683: FOR_TO
75684: IFFALSE 75806
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75686: LD_ADDR_VAR 0 7
75690: PUSH
75691: LD_VAR 0 6
75695: PUSH
75696: LD_INT 1
75698: ARRAY
75699: PUSH
75700: LD_VAR 0 5
75704: ARRAY
75705: PUSH
75706: LD_VAR 0 6
75710: PUSH
75711: LD_INT 2
75713: ARRAY
75714: PUSH
75715: LD_VAR 0 5
75719: ARRAY
75720: PUSH
75721: EMPTY
75722: LIST
75723: LIST
75724: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75725: LD_VAR 0 7
75729: PUSH
75730: LD_INT 1
75732: ARRAY
75733: PPUSH
75734: LD_VAR 0 7
75738: PUSH
75739: LD_INT 2
75741: ARRAY
75742: PPUSH
75743: CALL_OW 428
75747: PUSH
75748: LD_INT 0
75750: EQUAL
75751: IFFALSE 75804
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75753: LD_VAR 0 1
75757: PPUSH
75758: LD_VAR 0 7
75762: PUSH
75763: LD_INT 1
75765: ARRAY
75766: PPUSH
75767: LD_VAR 0 7
75771: PUSH
75772: LD_INT 2
75774: ARRAY
75775: PPUSH
75776: LD_VAR 0 3
75780: PPUSH
75781: CALL_OW 48
// result := IsPlaced ( unit ) ;
75785: LD_ADDR_VAR 0 4
75789: PUSH
75790: LD_VAR 0 1
75794: PPUSH
75795: CALL_OW 305
75799: ST_TO_ADDR
// exit ;
75800: POP
75801: POP
75802: GO 75808
// end ; end ;
75804: GO 75683
75806: POP
75807: POP
// end ;
75808: LD_VAR 0 4
75812: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75813: LD_INT 0
75815: PPUSH
75816: PPUSH
75817: PPUSH
// if not side or side > 8 then
75818: LD_VAR 0 1
75822: NOT
75823: PUSH
75824: LD_VAR 0 1
75828: PUSH
75829: LD_INT 8
75831: GREATER
75832: OR
75833: IFFALSE 75837
// exit ;
75835: GO 76024
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75837: LD_ADDR_VAR 0 4
75841: PUSH
75842: LD_INT 22
75844: PUSH
75845: LD_VAR 0 1
75849: PUSH
75850: EMPTY
75851: LIST
75852: LIST
75853: PUSH
75854: LD_INT 21
75856: PUSH
75857: LD_INT 3
75859: PUSH
75860: EMPTY
75861: LIST
75862: LIST
75863: PUSH
75864: EMPTY
75865: LIST
75866: LIST
75867: PPUSH
75868: CALL_OW 69
75872: ST_TO_ADDR
// if not tmp then
75873: LD_VAR 0 4
75877: NOT
75878: IFFALSE 75882
// exit ;
75880: GO 76024
// enable_addtolog := true ;
75882: LD_ADDR_OWVAR 81
75886: PUSH
75887: LD_INT 1
75889: ST_TO_ADDR
// AddToLog ( [ ) ;
75890: LD_STRING [
75892: PPUSH
75893: CALL_OW 561
// for i in tmp do
75897: LD_ADDR_VAR 0 3
75901: PUSH
75902: LD_VAR 0 4
75906: PUSH
75907: FOR_IN
75908: IFFALSE 76015
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75910: LD_STRING [
75912: PUSH
75913: LD_VAR 0 3
75917: PPUSH
75918: CALL_OW 266
75922: STR
75923: PUSH
75924: LD_STRING , 
75926: STR
75927: PUSH
75928: LD_VAR 0 3
75932: PPUSH
75933: CALL_OW 250
75937: STR
75938: PUSH
75939: LD_STRING , 
75941: STR
75942: PUSH
75943: LD_VAR 0 3
75947: PPUSH
75948: CALL_OW 251
75952: STR
75953: PUSH
75954: LD_STRING , 
75956: STR
75957: PUSH
75958: LD_VAR 0 3
75962: PPUSH
75963: CALL_OW 254
75967: STR
75968: PUSH
75969: LD_STRING , 
75971: STR
75972: PUSH
75973: LD_VAR 0 3
75977: PPUSH
75978: LD_INT 1
75980: PPUSH
75981: CALL_OW 268
75985: STR
75986: PUSH
75987: LD_STRING , 
75989: STR
75990: PUSH
75991: LD_VAR 0 3
75995: PPUSH
75996: LD_INT 2
75998: PPUSH
75999: CALL_OW 268
76003: STR
76004: PUSH
76005: LD_STRING ],
76007: STR
76008: PPUSH
76009: CALL_OW 561
// end ;
76013: GO 75907
76015: POP
76016: POP
// AddToLog ( ]; ) ;
76017: LD_STRING ];
76019: PPUSH
76020: CALL_OW 561
// end ;
76024: LD_VAR 0 2
76028: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76029: LD_INT 0
76031: PPUSH
76032: PPUSH
76033: PPUSH
76034: PPUSH
76035: PPUSH
// if not area or not rate or not max then
76036: LD_VAR 0 1
76040: NOT
76041: PUSH
76042: LD_VAR 0 2
76046: NOT
76047: OR
76048: PUSH
76049: LD_VAR 0 4
76053: NOT
76054: OR
76055: IFFALSE 76059
// exit ;
76057: GO 76248
// while 1 do
76059: LD_INT 1
76061: IFFALSE 76248
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76063: LD_ADDR_VAR 0 9
76067: PUSH
76068: LD_VAR 0 1
76072: PPUSH
76073: LD_INT 1
76075: PPUSH
76076: CALL_OW 287
76080: PUSH
76081: LD_INT 10
76083: MUL
76084: ST_TO_ADDR
// r := rate / 10 ;
76085: LD_ADDR_VAR 0 7
76089: PUSH
76090: LD_VAR 0 2
76094: PUSH
76095: LD_INT 10
76097: DIVREAL
76098: ST_TO_ADDR
// time := 1 1$00 ;
76099: LD_ADDR_VAR 0 8
76103: PUSH
76104: LD_INT 2100
76106: ST_TO_ADDR
// if amount < min then
76107: LD_VAR 0 9
76111: PUSH
76112: LD_VAR 0 3
76116: LESS
76117: IFFALSE 76135
// r := r * 2 else
76119: LD_ADDR_VAR 0 7
76123: PUSH
76124: LD_VAR 0 7
76128: PUSH
76129: LD_INT 2
76131: MUL
76132: ST_TO_ADDR
76133: GO 76161
// if amount > max then
76135: LD_VAR 0 9
76139: PUSH
76140: LD_VAR 0 4
76144: GREATER
76145: IFFALSE 76161
// r := r / 2 ;
76147: LD_ADDR_VAR 0 7
76151: PUSH
76152: LD_VAR 0 7
76156: PUSH
76157: LD_INT 2
76159: DIVREAL
76160: ST_TO_ADDR
// time := time / r ;
76161: LD_ADDR_VAR 0 8
76165: PUSH
76166: LD_VAR 0 8
76170: PUSH
76171: LD_VAR 0 7
76175: DIVREAL
76176: ST_TO_ADDR
// if time < 0 then
76177: LD_VAR 0 8
76181: PUSH
76182: LD_INT 0
76184: LESS
76185: IFFALSE 76202
// time := time * - 1 ;
76187: LD_ADDR_VAR 0 8
76191: PUSH
76192: LD_VAR 0 8
76196: PUSH
76197: LD_INT 1
76199: NEG
76200: MUL
76201: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76202: LD_VAR 0 8
76206: PUSH
76207: LD_INT 35
76209: PPUSH
76210: LD_INT 875
76212: PPUSH
76213: CALL_OW 12
76217: PLUS
76218: PPUSH
76219: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76223: LD_INT 1
76225: PPUSH
76226: LD_INT 5
76228: PPUSH
76229: CALL_OW 12
76233: PPUSH
76234: LD_VAR 0 1
76238: PPUSH
76239: LD_INT 1
76241: PPUSH
76242: CALL_OW 55
// end ;
76246: GO 76059
// end ;
76248: LD_VAR 0 5
76252: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76253: LD_INT 0
76255: PPUSH
76256: PPUSH
76257: PPUSH
76258: PPUSH
76259: PPUSH
76260: PPUSH
76261: PPUSH
76262: PPUSH
// if not turrets or not factories then
76263: LD_VAR 0 1
76267: NOT
76268: PUSH
76269: LD_VAR 0 2
76273: NOT
76274: OR
76275: IFFALSE 76279
// exit ;
76277: GO 76586
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76279: LD_ADDR_VAR 0 10
76283: PUSH
76284: LD_INT 5
76286: PUSH
76287: LD_INT 6
76289: PUSH
76290: EMPTY
76291: LIST
76292: LIST
76293: PUSH
76294: LD_INT 2
76296: PUSH
76297: LD_INT 4
76299: PUSH
76300: EMPTY
76301: LIST
76302: LIST
76303: PUSH
76304: LD_INT 3
76306: PUSH
76307: LD_INT 5
76309: PUSH
76310: EMPTY
76311: LIST
76312: LIST
76313: PUSH
76314: EMPTY
76315: LIST
76316: LIST
76317: LIST
76318: PUSH
76319: LD_INT 24
76321: PUSH
76322: LD_INT 25
76324: PUSH
76325: EMPTY
76326: LIST
76327: LIST
76328: PUSH
76329: LD_INT 23
76331: PUSH
76332: LD_INT 27
76334: PUSH
76335: EMPTY
76336: LIST
76337: LIST
76338: PUSH
76339: EMPTY
76340: LIST
76341: LIST
76342: PUSH
76343: LD_INT 42
76345: PUSH
76346: LD_INT 43
76348: PUSH
76349: EMPTY
76350: LIST
76351: LIST
76352: PUSH
76353: LD_INT 44
76355: PUSH
76356: LD_INT 46
76358: PUSH
76359: EMPTY
76360: LIST
76361: LIST
76362: PUSH
76363: LD_INT 45
76365: PUSH
76366: LD_INT 47
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: PUSH
76373: EMPTY
76374: LIST
76375: LIST
76376: LIST
76377: PUSH
76378: EMPTY
76379: LIST
76380: LIST
76381: LIST
76382: ST_TO_ADDR
// result := [ ] ;
76383: LD_ADDR_VAR 0 3
76387: PUSH
76388: EMPTY
76389: ST_TO_ADDR
// for i in turrets do
76390: LD_ADDR_VAR 0 4
76394: PUSH
76395: LD_VAR 0 1
76399: PUSH
76400: FOR_IN
76401: IFFALSE 76584
// begin nat := GetNation ( i ) ;
76403: LD_ADDR_VAR 0 7
76407: PUSH
76408: LD_VAR 0 4
76412: PPUSH
76413: CALL_OW 248
76417: ST_TO_ADDR
// weapon := 0 ;
76418: LD_ADDR_VAR 0 8
76422: PUSH
76423: LD_INT 0
76425: ST_TO_ADDR
// if not nat then
76426: LD_VAR 0 7
76430: NOT
76431: IFFALSE 76435
// continue ;
76433: GO 76400
// for j in list [ nat ] do
76435: LD_ADDR_VAR 0 5
76439: PUSH
76440: LD_VAR 0 10
76444: PUSH
76445: LD_VAR 0 7
76449: ARRAY
76450: PUSH
76451: FOR_IN
76452: IFFALSE 76493
// if GetBWeapon ( i ) = j [ 1 ] then
76454: LD_VAR 0 4
76458: PPUSH
76459: CALL_OW 269
76463: PUSH
76464: LD_VAR 0 5
76468: PUSH
76469: LD_INT 1
76471: ARRAY
76472: EQUAL
76473: IFFALSE 76491
// begin weapon := j [ 2 ] ;
76475: LD_ADDR_VAR 0 8
76479: PUSH
76480: LD_VAR 0 5
76484: PUSH
76485: LD_INT 2
76487: ARRAY
76488: ST_TO_ADDR
// break ;
76489: GO 76493
// end ;
76491: GO 76451
76493: POP
76494: POP
// if not weapon then
76495: LD_VAR 0 8
76499: NOT
76500: IFFALSE 76504
// continue ;
76502: GO 76400
// for k in factories do
76504: LD_ADDR_VAR 0 6
76508: PUSH
76509: LD_VAR 0 2
76513: PUSH
76514: FOR_IN
76515: IFFALSE 76580
// begin weapons := AvailableWeaponList ( k ) ;
76517: LD_ADDR_VAR 0 9
76521: PUSH
76522: LD_VAR 0 6
76526: PPUSH
76527: CALL_OW 478
76531: ST_TO_ADDR
// if not weapons then
76532: LD_VAR 0 9
76536: NOT
76537: IFFALSE 76541
// continue ;
76539: GO 76514
// if weapon in weapons then
76541: LD_VAR 0 8
76545: PUSH
76546: LD_VAR 0 9
76550: IN
76551: IFFALSE 76578
// begin result := [ i , weapon ] ;
76553: LD_ADDR_VAR 0 3
76557: PUSH
76558: LD_VAR 0 4
76562: PUSH
76563: LD_VAR 0 8
76567: PUSH
76568: EMPTY
76569: LIST
76570: LIST
76571: ST_TO_ADDR
// exit ;
76572: POP
76573: POP
76574: POP
76575: POP
76576: GO 76586
// end ; end ;
76578: GO 76514
76580: POP
76581: POP
// end ;
76582: GO 76400
76584: POP
76585: POP
// end ;
76586: LD_VAR 0 3
76590: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76591: LD_INT 0
76593: PPUSH
// if not side or side > 8 then
76594: LD_VAR 0 3
76598: NOT
76599: PUSH
76600: LD_VAR 0 3
76604: PUSH
76605: LD_INT 8
76607: GREATER
76608: OR
76609: IFFALSE 76613
// exit ;
76611: GO 76672
// if not range then
76613: LD_VAR 0 4
76617: NOT
76618: IFFALSE 76629
// range := - 12 ;
76620: LD_ADDR_VAR 0 4
76624: PUSH
76625: LD_INT 12
76627: NEG
76628: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76629: LD_VAR 0 1
76633: PPUSH
76634: LD_VAR 0 2
76638: PPUSH
76639: LD_VAR 0 3
76643: PPUSH
76644: LD_VAR 0 4
76648: PPUSH
76649: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76653: LD_VAR 0 1
76657: PPUSH
76658: LD_VAR 0 2
76662: PPUSH
76663: LD_VAR 0 3
76667: PPUSH
76668: CALL_OW 331
// end ;
76672: LD_VAR 0 5
76676: RET
// export function Video ( mode ) ; begin
76677: LD_INT 0
76679: PPUSH
// ingame_video = mode ;
76680: LD_ADDR_OWVAR 52
76684: PUSH
76685: LD_VAR 0 1
76689: ST_TO_ADDR
// interface_hidden = mode ;
76690: LD_ADDR_OWVAR 54
76694: PUSH
76695: LD_VAR 0 1
76699: ST_TO_ADDR
// end ;
76700: LD_VAR 0 2
76704: RET
// export function Join ( array , element ) ; begin
76705: LD_INT 0
76707: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76708: LD_ADDR_VAR 0 3
76712: PUSH
76713: LD_VAR 0 1
76717: PPUSH
76718: LD_VAR 0 1
76722: PUSH
76723: LD_INT 1
76725: PLUS
76726: PPUSH
76727: LD_VAR 0 2
76731: PPUSH
76732: CALL_OW 1
76736: ST_TO_ADDR
// end ;
76737: LD_VAR 0 3
76741: RET
// export function JoinUnion ( array , element ) ; begin
76742: LD_INT 0
76744: PPUSH
// result := array union element ;
76745: LD_ADDR_VAR 0 3
76749: PUSH
76750: LD_VAR 0 1
76754: PUSH
76755: LD_VAR 0 2
76759: UNION
76760: ST_TO_ADDR
// end ;
76761: LD_VAR 0 3
76765: RET
// export function GetBehemoths ( side ) ; begin
76766: LD_INT 0
76768: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76769: LD_ADDR_VAR 0 2
76773: PUSH
76774: LD_INT 22
76776: PUSH
76777: LD_VAR 0 1
76781: PUSH
76782: EMPTY
76783: LIST
76784: LIST
76785: PUSH
76786: LD_INT 31
76788: PUSH
76789: LD_INT 25
76791: PUSH
76792: EMPTY
76793: LIST
76794: LIST
76795: PUSH
76796: EMPTY
76797: LIST
76798: LIST
76799: PPUSH
76800: CALL_OW 69
76804: ST_TO_ADDR
// end ;
76805: LD_VAR 0 2
76809: RET
// export function Shuffle ( array ) ; var i , index ; begin
76810: LD_INT 0
76812: PPUSH
76813: PPUSH
76814: PPUSH
// result := [ ] ;
76815: LD_ADDR_VAR 0 2
76819: PUSH
76820: EMPTY
76821: ST_TO_ADDR
// if not array then
76822: LD_VAR 0 1
76826: NOT
76827: IFFALSE 76831
// exit ;
76829: GO 76930
// Randomize ;
76831: CALL_OW 10
// for i = array downto 1 do
76835: LD_ADDR_VAR 0 3
76839: PUSH
76840: DOUBLE
76841: LD_VAR 0 1
76845: INC
76846: ST_TO_ADDR
76847: LD_INT 1
76849: PUSH
76850: FOR_DOWNTO
76851: IFFALSE 76928
// begin index := rand ( 1 , array ) ;
76853: LD_ADDR_VAR 0 4
76857: PUSH
76858: LD_INT 1
76860: PPUSH
76861: LD_VAR 0 1
76865: PPUSH
76866: CALL_OW 12
76870: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76871: LD_ADDR_VAR 0 2
76875: PUSH
76876: LD_VAR 0 2
76880: PPUSH
76881: LD_VAR 0 2
76885: PUSH
76886: LD_INT 1
76888: PLUS
76889: PPUSH
76890: LD_VAR 0 1
76894: PUSH
76895: LD_VAR 0 4
76899: ARRAY
76900: PPUSH
76901: CALL_OW 2
76905: ST_TO_ADDR
// array := Delete ( array , index ) ;
76906: LD_ADDR_VAR 0 1
76910: PUSH
76911: LD_VAR 0 1
76915: PPUSH
76916: LD_VAR 0 4
76920: PPUSH
76921: CALL_OW 3
76925: ST_TO_ADDR
// end ;
76926: GO 76850
76928: POP
76929: POP
// end ;
76930: LD_VAR 0 2
76934: RET
// export function GetBaseMaterials ( base ) ; begin
76935: LD_INT 0
76937: PPUSH
// result := [ 0 , 0 , 0 ] ;
76938: LD_ADDR_VAR 0 2
76942: PUSH
76943: LD_INT 0
76945: PUSH
76946: LD_INT 0
76948: PUSH
76949: LD_INT 0
76951: PUSH
76952: EMPTY
76953: LIST
76954: LIST
76955: LIST
76956: ST_TO_ADDR
// if not base then
76957: LD_VAR 0 1
76961: NOT
76962: IFFALSE 76966
// exit ;
76964: GO 77015
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76966: LD_ADDR_VAR 0 2
76970: PUSH
76971: LD_VAR 0 1
76975: PPUSH
76976: LD_INT 1
76978: PPUSH
76979: CALL_OW 275
76983: PUSH
76984: LD_VAR 0 1
76988: PPUSH
76989: LD_INT 2
76991: PPUSH
76992: CALL_OW 275
76996: PUSH
76997: LD_VAR 0 1
77001: PPUSH
77002: LD_INT 3
77004: PPUSH
77005: CALL_OW 275
77009: PUSH
77010: EMPTY
77011: LIST
77012: LIST
77013: LIST
77014: ST_TO_ADDR
// end ;
77015: LD_VAR 0 2
77019: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77020: LD_INT 0
77022: PPUSH
77023: PPUSH
// result := array ;
77024: LD_ADDR_VAR 0 3
77028: PUSH
77029: LD_VAR 0 1
77033: ST_TO_ADDR
// if size >= result then
77034: LD_VAR 0 2
77038: PUSH
77039: LD_VAR 0 3
77043: GREATEREQUAL
77044: IFFALSE 77048
// exit ;
77046: GO 77098
// if size then
77048: LD_VAR 0 2
77052: IFFALSE 77098
// for i := array downto size do
77054: LD_ADDR_VAR 0 4
77058: PUSH
77059: DOUBLE
77060: LD_VAR 0 1
77064: INC
77065: ST_TO_ADDR
77066: LD_VAR 0 2
77070: PUSH
77071: FOR_DOWNTO
77072: IFFALSE 77096
// result := Delete ( result , result ) ;
77074: LD_ADDR_VAR 0 3
77078: PUSH
77079: LD_VAR 0 3
77083: PPUSH
77084: LD_VAR 0 3
77088: PPUSH
77089: CALL_OW 3
77093: ST_TO_ADDR
77094: GO 77071
77096: POP
77097: POP
// end ;
77098: LD_VAR 0 3
77102: RET
// export function ComExit ( unit ) ; var tmp ; begin
77103: LD_INT 0
77105: PPUSH
77106: PPUSH
// if not IsInUnit ( unit ) then
77107: LD_VAR 0 1
77111: PPUSH
77112: CALL_OW 310
77116: NOT
77117: IFFALSE 77121
// exit ;
77119: GO 77181
// tmp := IsInUnit ( unit ) ;
77121: LD_ADDR_VAR 0 3
77125: PUSH
77126: LD_VAR 0 1
77130: PPUSH
77131: CALL_OW 310
77135: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77136: LD_VAR 0 3
77140: PPUSH
77141: CALL_OW 247
77145: PUSH
77146: LD_INT 2
77148: EQUAL
77149: IFFALSE 77162
// ComExitVehicle ( unit ) else
77151: LD_VAR 0 1
77155: PPUSH
77156: CALL_OW 121
77160: GO 77171
// ComExitBuilding ( unit ) ;
77162: LD_VAR 0 1
77166: PPUSH
77167: CALL_OW 122
// result := tmp ;
77171: LD_ADDR_VAR 0 2
77175: PUSH
77176: LD_VAR 0 3
77180: ST_TO_ADDR
// end ;
77181: LD_VAR 0 2
77185: RET
// export function ComExitAll ( units ) ; var i ; begin
77186: LD_INT 0
77188: PPUSH
77189: PPUSH
// if not units then
77190: LD_VAR 0 1
77194: NOT
77195: IFFALSE 77199
// exit ;
77197: GO 77225
// for i in units do
77199: LD_ADDR_VAR 0 3
77203: PUSH
77204: LD_VAR 0 1
77208: PUSH
77209: FOR_IN
77210: IFFALSE 77223
// ComExit ( i ) ;
77212: LD_VAR 0 3
77216: PPUSH
77217: CALL 77103 0 1
77221: GO 77209
77223: POP
77224: POP
// end ;
77225: LD_VAR 0 2
77229: RET
// export function ResetHc ; begin
77230: LD_INT 0
77232: PPUSH
// InitHc ;
77233: CALL_OW 19
// hc_importance := 0 ;
77237: LD_ADDR_OWVAR 32
77241: PUSH
77242: LD_INT 0
77244: ST_TO_ADDR
// end ;
77245: LD_VAR 0 1
77249: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77250: LD_INT 0
77252: PPUSH
77253: PPUSH
77254: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77255: LD_ADDR_VAR 0 6
77259: PUSH
77260: LD_VAR 0 1
77264: PUSH
77265: LD_VAR 0 3
77269: PLUS
77270: PUSH
77271: LD_INT 2
77273: DIV
77274: ST_TO_ADDR
// if _x < 0 then
77275: LD_VAR 0 6
77279: PUSH
77280: LD_INT 0
77282: LESS
77283: IFFALSE 77300
// _x := _x * - 1 ;
77285: LD_ADDR_VAR 0 6
77289: PUSH
77290: LD_VAR 0 6
77294: PUSH
77295: LD_INT 1
77297: NEG
77298: MUL
77299: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77300: LD_ADDR_VAR 0 7
77304: PUSH
77305: LD_VAR 0 2
77309: PUSH
77310: LD_VAR 0 4
77314: PLUS
77315: PUSH
77316: LD_INT 2
77318: DIV
77319: ST_TO_ADDR
// if _y < 0 then
77320: LD_VAR 0 7
77324: PUSH
77325: LD_INT 0
77327: LESS
77328: IFFALSE 77345
// _y := _y * - 1 ;
77330: LD_ADDR_VAR 0 7
77334: PUSH
77335: LD_VAR 0 7
77339: PUSH
77340: LD_INT 1
77342: NEG
77343: MUL
77344: ST_TO_ADDR
// result := [ _x , _y ] ;
77345: LD_ADDR_VAR 0 5
77349: PUSH
77350: LD_VAR 0 6
77354: PUSH
77355: LD_VAR 0 7
77359: PUSH
77360: EMPTY
77361: LIST
77362: LIST
77363: ST_TO_ADDR
// end ;
77364: LD_VAR 0 5
77368: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77369: LD_INT 0
77371: PPUSH
77372: PPUSH
77373: PPUSH
77374: PPUSH
// task := GetTaskList ( unit ) ;
77375: LD_ADDR_VAR 0 7
77379: PUSH
77380: LD_VAR 0 1
77384: PPUSH
77385: CALL_OW 437
77389: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77390: LD_VAR 0 7
77394: NOT
77395: PUSH
77396: LD_VAR 0 1
77400: PPUSH
77401: LD_VAR 0 2
77405: PPUSH
77406: CALL_OW 308
77410: NOT
77411: AND
77412: IFFALSE 77416
// exit ;
77414: GO 77534
// if IsInArea ( unit , area ) then
77416: LD_VAR 0 1
77420: PPUSH
77421: LD_VAR 0 2
77425: PPUSH
77426: CALL_OW 308
77430: IFFALSE 77448
// begin ComMoveToArea ( unit , goAway ) ;
77432: LD_VAR 0 1
77436: PPUSH
77437: LD_VAR 0 3
77441: PPUSH
77442: CALL_OW 113
// exit ;
77446: GO 77534
// end ; if task [ 1 ] [ 1 ] <> M then
77448: LD_VAR 0 7
77452: PUSH
77453: LD_INT 1
77455: ARRAY
77456: PUSH
77457: LD_INT 1
77459: ARRAY
77460: PUSH
77461: LD_STRING M
77463: NONEQUAL
77464: IFFALSE 77468
// exit ;
77466: GO 77534
// x := task [ 1 ] [ 2 ] ;
77468: LD_ADDR_VAR 0 5
77472: PUSH
77473: LD_VAR 0 7
77477: PUSH
77478: LD_INT 1
77480: ARRAY
77481: PUSH
77482: LD_INT 2
77484: ARRAY
77485: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77486: LD_ADDR_VAR 0 6
77490: PUSH
77491: LD_VAR 0 7
77495: PUSH
77496: LD_INT 1
77498: ARRAY
77499: PUSH
77500: LD_INT 3
77502: ARRAY
77503: ST_TO_ADDR
// if InArea ( x , y , area ) then
77504: LD_VAR 0 5
77508: PPUSH
77509: LD_VAR 0 6
77513: PPUSH
77514: LD_VAR 0 2
77518: PPUSH
77519: CALL_OW 309
77523: IFFALSE 77534
// ComStop ( unit ) ;
77525: LD_VAR 0 1
77529: PPUSH
77530: CALL_OW 141
// end ;
77534: LD_VAR 0 4
77538: RET
// export function Abs ( value ) ; begin
77539: LD_INT 0
77541: PPUSH
// result := value ;
77542: LD_ADDR_VAR 0 2
77546: PUSH
77547: LD_VAR 0 1
77551: ST_TO_ADDR
// if value < 0 then
77552: LD_VAR 0 1
77556: PUSH
77557: LD_INT 0
77559: LESS
77560: IFFALSE 77577
// result := value * - 1 ;
77562: LD_ADDR_VAR 0 2
77566: PUSH
77567: LD_VAR 0 1
77571: PUSH
77572: LD_INT 1
77574: NEG
77575: MUL
77576: ST_TO_ADDR
// end ;
77577: LD_VAR 0 2
77581: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77582: LD_INT 0
77584: PPUSH
77585: PPUSH
77586: PPUSH
77587: PPUSH
77588: PPUSH
77589: PPUSH
77590: PPUSH
77591: PPUSH
// if not unit or not building then
77592: LD_VAR 0 1
77596: NOT
77597: PUSH
77598: LD_VAR 0 2
77602: NOT
77603: OR
77604: IFFALSE 77608
// exit ;
77606: GO 77834
// x := GetX ( building ) ;
77608: LD_ADDR_VAR 0 4
77612: PUSH
77613: LD_VAR 0 2
77617: PPUSH
77618: CALL_OW 250
77622: ST_TO_ADDR
// y := GetY ( building ) ;
77623: LD_ADDR_VAR 0 6
77627: PUSH
77628: LD_VAR 0 2
77632: PPUSH
77633: CALL_OW 251
77637: ST_TO_ADDR
// d := GetDir ( building ) ;
77638: LD_ADDR_VAR 0 8
77642: PUSH
77643: LD_VAR 0 2
77647: PPUSH
77648: CALL_OW 254
77652: ST_TO_ADDR
// r := 4 ;
77653: LD_ADDR_VAR 0 9
77657: PUSH
77658: LD_INT 4
77660: ST_TO_ADDR
// for i := 1 to 5 do
77661: LD_ADDR_VAR 0 10
77665: PUSH
77666: DOUBLE
77667: LD_INT 1
77669: DEC
77670: ST_TO_ADDR
77671: LD_INT 5
77673: PUSH
77674: FOR_TO
77675: IFFALSE 77832
// begin _x := ShiftX ( x , d , r + i ) ;
77677: LD_ADDR_VAR 0 5
77681: PUSH
77682: LD_VAR 0 4
77686: PPUSH
77687: LD_VAR 0 8
77691: PPUSH
77692: LD_VAR 0 9
77696: PUSH
77697: LD_VAR 0 10
77701: PLUS
77702: PPUSH
77703: CALL_OW 272
77707: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77708: LD_ADDR_VAR 0 7
77712: PUSH
77713: LD_VAR 0 6
77717: PPUSH
77718: LD_VAR 0 8
77722: PPUSH
77723: LD_VAR 0 9
77727: PUSH
77728: LD_VAR 0 10
77732: PLUS
77733: PPUSH
77734: CALL_OW 273
77738: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77739: LD_VAR 0 5
77743: PPUSH
77744: LD_VAR 0 7
77748: PPUSH
77749: CALL_OW 488
77753: PUSH
77754: LD_VAR 0 5
77758: PPUSH
77759: LD_VAR 0 7
77763: PPUSH
77764: CALL_OW 428
77768: PPUSH
77769: CALL_OW 247
77773: PUSH
77774: LD_INT 3
77776: PUSH
77777: LD_INT 2
77779: PUSH
77780: EMPTY
77781: LIST
77782: LIST
77783: IN
77784: NOT
77785: AND
77786: IFFALSE 77830
// begin ComMoveXY ( unit , _x , _y ) ;
77788: LD_VAR 0 1
77792: PPUSH
77793: LD_VAR 0 5
77797: PPUSH
77798: LD_VAR 0 7
77802: PPUSH
77803: CALL_OW 111
// result := [ _x , _y ] ;
77807: LD_ADDR_VAR 0 3
77811: PUSH
77812: LD_VAR 0 5
77816: PUSH
77817: LD_VAR 0 7
77821: PUSH
77822: EMPTY
77823: LIST
77824: LIST
77825: ST_TO_ADDR
// exit ;
77826: POP
77827: POP
77828: GO 77834
// end ; end ;
77830: GO 77674
77832: POP
77833: POP
// end ;
77834: LD_VAR 0 3
77838: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77839: LD_INT 0
77841: PPUSH
77842: PPUSH
77843: PPUSH
// result := 0 ;
77844: LD_ADDR_VAR 0 3
77848: PUSH
77849: LD_INT 0
77851: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77852: LD_VAR 0 1
77856: PUSH
77857: LD_INT 0
77859: LESS
77860: PUSH
77861: LD_VAR 0 1
77865: PUSH
77866: LD_INT 8
77868: GREATER
77869: OR
77870: PUSH
77871: LD_VAR 0 2
77875: PUSH
77876: LD_INT 0
77878: LESS
77879: OR
77880: PUSH
77881: LD_VAR 0 2
77885: PUSH
77886: LD_INT 8
77888: GREATER
77889: OR
77890: IFFALSE 77894
// exit ;
77892: GO 77969
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77894: LD_ADDR_VAR 0 4
77898: PUSH
77899: LD_INT 22
77901: PUSH
77902: LD_VAR 0 2
77906: PUSH
77907: EMPTY
77908: LIST
77909: LIST
77910: PPUSH
77911: CALL_OW 69
77915: PUSH
77916: FOR_IN
77917: IFFALSE 77967
// begin un := UnitShoot ( i ) ;
77919: LD_ADDR_VAR 0 5
77923: PUSH
77924: LD_VAR 0 4
77928: PPUSH
77929: CALL_OW 504
77933: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77934: LD_VAR 0 5
77938: PPUSH
77939: CALL_OW 255
77943: PUSH
77944: LD_VAR 0 1
77948: EQUAL
77949: IFFALSE 77965
// begin result := un ;
77951: LD_ADDR_VAR 0 3
77955: PUSH
77956: LD_VAR 0 5
77960: ST_TO_ADDR
// exit ;
77961: POP
77962: POP
77963: GO 77969
// end ; end ;
77965: GO 77916
77967: POP
77968: POP
// end ;
77969: LD_VAR 0 3
77973: RET
// export function GetCargoBay ( units ) ; begin
77974: LD_INT 0
77976: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77977: LD_ADDR_VAR 0 2
77981: PUSH
77982: LD_VAR 0 1
77986: PPUSH
77987: LD_INT 2
77989: PUSH
77990: LD_INT 34
77992: PUSH
77993: LD_INT 12
77995: PUSH
77996: EMPTY
77997: LIST
77998: LIST
77999: PUSH
78000: LD_INT 34
78002: PUSH
78003: LD_INT 51
78005: PUSH
78006: EMPTY
78007: LIST
78008: LIST
78009: PUSH
78010: LD_INT 34
78012: PUSH
78013: LD_INT 32
78015: PUSH
78016: EMPTY
78017: LIST
78018: LIST
78019: PUSH
78020: LD_INT 34
78022: PUSH
78023: LD_INT 89
78025: PUSH
78026: EMPTY
78027: LIST
78028: LIST
78029: PUSH
78030: EMPTY
78031: LIST
78032: LIST
78033: LIST
78034: LIST
78035: LIST
78036: PPUSH
78037: CALL_OW 72
78041: ST_TO_ADDR
// end ;
78042: LD_VAR 0 2
78046: RET
// export function Negate ( value ) ; begin
78047: LD_INT 0
78049: PPUSH
// result := not value ;
78050: LD_ADDR_VAR 0 2
78054: PUSH
78055: LD_VAR 0 1
78059: NOT
78060: ST_TO_ADDR
// end ;
78061: LD_VAR 0 2
78065: RET
// export function Inc ( value ) ; begin
78066: LD_INT 0
78068: PPUSH
// result := value + 1 ;
78069: LD_ADDR_VAR 0 2
78073: PUSH
78074: LD_VAR 0 1
78078: PUSH
78079: LD_INT 1
78081: PLUS
78082: ST_TO_ADDR
// end ;
78083: LD_VAR 0 2
78087: RET
// export function Dec ( value ) ; begin
78088: LD_INT 0
78090: PPUSH
// result := value - 1 ;
78091: LD_ADDR_VAR 0 2
78095: PUSH
78096: LD_VAR 0 1
78100: PUSH
78101: LD_INT 1
78103: MINUS
78104: ST_TO_ADDR
// end ;
78105: LD_VAR 0 2
78109: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78110: LD_INT 0
78112: PPUSH
78113: PPUSH
78114: PPUSH
78115: PPUSH
78116: PPUSH
78117: PPUSH
78118: PPUSH
78119: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78120: LD_VAR 0 1
78124: PPUSH
78125: LD_VAR 0 2
78129: PPUSH
78130: CALL_OW 488
78134: NOT
78135: PUSH
78136: LD_VAR 0 3
78140: PPUSH
78141: LD_VAR 0 4
78145: PPUSH
78146: CALL_OW 488
78150: NOT
78151: OR
78152: IFFALSE 78165
// begin result := - 1 ;
78154: LD_ADDR_VAR 0 5
78158: PUSH
78159: LD_INT 1
78161: NEG
78162: ST_TO_ADDR
// exit ;
78163: GO 78400
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78165: LD_ADDR_VAR 0 12
78169: PUSH
78170: LD_VAR 0 1
78174: PPUSH
78175: LD_VAR 0 2
78179: PPUSH
78180: LD_VAR 0 3
78184: PPUSH
78185: LD_VAR 0 4
78189: PPUSH
78190: CALL 77250 0 4
78194: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78195: LD_ADDR_VAR 0 11
78199: PUSH
78200: LD_VAR 0 1
78204: PPUSH
78205: LD_VAR 0 2
78209: PPUSH
78210: LD_VAR 0 12
78214: PUSH
78215: LD_INT 1
78217: ARRAY
78218: PPUSH
78219: LD_VAR 0 12
78223: PUSH
78224: LD_INT 2
78226: ARRAY
78227: PPUSH
78228: CALL_OW 298
78232: ST_TO_ADDR
// distance := 9999 ;
78233: LD_ADDR_VAR 0 10
78237: PUSH
78238: LD_INT 9999
78240: ST_TO_ADDR
// for i := 0 to 5 do
78241: LD_ADDR_VAR 0 6
78245: PUSH
78246: DOUBLE
78247: LD_INT 0
78249: DEC
78250: ST_TO_ADDR
78251: LD_INT 5
78253: PUSH
78254: FOR_TO
78255: IFFALSE 78398
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78257: LD_ADDR_VAR 0 7
78261: PUSH
78262: LD_VAR 0 1
78266: PPUSH
78267: LD_VAR 0 6
78271: PPUSH
78272: LD_VAR 0 11
78276: PPUSH
78277: CALL_OW 272
78281: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78282: LD_ADDR_VAR 0 8
78286: PUSH
78287: LD_VAR 0 2
78291: PPUSH
78292: LD_VAR 0 6
78296: PPUSH
78297: LD_VAR 0 11
78301: PPUSH
78302: CALL_OW 273
78306: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78307: LD_VAR 0 7
78311: PPUSH
78312: LD_VAR 0 8
78316: PPUSH
78317: CALL_OW 488
78321: NOT
78322: IFFALSE 78326
// continue ;
78324: GO 78254
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78326: LD_ADDR_VAR 0 9
78330: PUSH
78331: LD_VAR 0 12
78335: PUSH
78336: LD_INT 1
78338: ARRAY
78339: PPUSH
78340: LD_VAR 0 12
78344: PUSH
78345: LD_INT 2
78347: ARRAY
78348: PPUSH
78349: LD_VAR 0 7
78353: PPUSH
78354: LD_VAR 0 8
78358: PPUSH
78359: CALL_OW 298
78363: ST_TO_ADDR
// if tmp < distance then
78364: LD_VAR 0 9
78368: PUSH
78369: LD_VAR 0 10
78373: LESS
78374: IFFALSE 78396
// begin result := i ;
78376: LD_ADDR_VAR 0 5
78380: PUSH
78381: LD_VAR 0 6
78385: ST_TO_ADDR
// distance := tmp ;
78386: LD_ADDR_VAR 0 10
78390: PUSH
78391: LD_VAR 0 9
78395: ST_TO_ADDR
// end ; end ;
78396: GO 78254
78398: POP
78399: POP
// end ;
78400: LD_VAR 0 5
78404: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78405: LD_INT 0
78407: PPUSH
78408: PPUSH
// if not driver or not IsInUnit ( driver ) then
78409: LD_VAR 0 1
78413: NOT
78414: PUSH
78415: LD_VAR 0 1
78419: PPUSH
78420: CALL_OW 310
78424: NOT
78425: OR
78426: IFFALSE 78430
// exit ;
78428: GO 78520
// vehicle := IsInUnit ( driver ) ;
78430: LD_ADDR_VAR 0 3
78434: PUSH
78435: LD_VAR 0 1
78439: PPUSH
78440: CALL_OW 310
78444: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78445: LD_VAR 0 1
78449: PPUSH
78450: LD_STRING \
78452: PUSH
78453: LD_INT 0
78455: PUSH
78456: LD_INT 0
78458: PUSH
78459: LD_INT 0
78461: PUSH
78462: LD_INT 0
78464: PUSH
78465: LD_INT 0
78467: PUSH
78468: LD_INT 0
78470: PUSH
78471: EMPTY
78472: LIST
78473: LIST
78474: LIST
78475: LIST
78476: LIST
78477: LIST
78478: LIST
78479: PUSH
78480: LD_STRING E
78482: PUSH
78483: LD_INT 0
78485: PUSH
78486: LD_INT 0
78488: PUSH
78489: LD_VAR 0 3
78493: PUSH
78494: LD_INT 0
78496: PUSH
78497: LD_INT 0
78499: PUSH
78500: LD_INT 0
78502: PUSH
78503: EMPTY
78504: LIST
78505: LIST
78506: LIST
78507: LIST
78508: LIST
78509: LIST
78510: LIST
78511: PUSH
78512: EMPTY
78513: LIST
78514: LIST
78515: PPUSH
78516: CALL_OW 446
// end ;
78520: LD_VAR 0 2
78524: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78525: LD_INT 0
78527: PPUSH
78528: PPUSH
// if not driver or not IsInUnit ( driver ) then
78529: LD_VAR 0 1
78533: NOT
78534: PUSH
78535: LD_VAR 0 1
78539: PPUSH
78540: CALL_OW 310
78544: NOT
78545: OR
78546: IFFALSE 78550
// exit ;
78548: GO 78640
// vehicle := IsInUnit ( driver ) ;
78550: LD_ADDR_VAR 0 3
78554: PUSH
78555: LD_VAR 0 1
78559: PPUSH
78560: CALL_OW 310
78564: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78565: LD_VAR 0 1
78569: PPUSH
78570: LD_STRING \
78572: PUSH
78573: LD_INT 0
78575: PUSH
78576: LD_INT 0
78578: PUSH
78579: LD_INT 0
78581: PUSH
78582: LD_INT 0
78584: PUSH
78585: LD_INT 0
78587: PUSH
78588: LD_INT 0
78590: PUSH
78591: EMPTY
78592: LIST
78593: LIST
78594: LIST
78595: LIST
78596: LIST
78597: LIST
78598: LIST
78599: PUSH
78600: LD_STRING E
78602: PUSH
78603: LD_INT 0
78605: PUSH
78606: LD_INT 0
78608: PUSH
78609: LD_VAR 0 3
78613: PUSH
78614: LD_INT 0
78616: PUSH
78617: LD_INT 0
78619: PUSH
78620: LD_INT 0
78622: PUSH
78623: EMPTY
78624: LIST
78625: LIST
78626: LIST
78627: LIST
78628: LIST
78629: LIST
78630: LIST
78631: PUSH
78632: EMPTY
78633: LIST
78634: LIST
78635: PPUSH
78636: CALL_OW 447
// end ;
78640: LD_VAR 0 2
78644: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78645: LD_INT 0
78647: PPUSH
78648: PPUSH
78649: PPUSH
// tmp := [ ] ;
78650: LD_ADDR_VAR 0 5
78654: PUSH
78655: EMPTY
78656: ST_TO_ADDR
// for i in units do
78657: LD_ADDR_VAR 0 4
78661: PUSH
78662: LD_VAR 0 1
78666: PUSH
78667: FOR_IN
78668: IFFALSE 78706
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78670: LD_ADDR_VAR 0 5
78674: PUSH
78675: LD_VAR 0 5
78679: PPUSH
78680: LD_VAR 0 5
78684: PUSH
78685: LD_INT 1
78687: PLUS
78688: PPUSH
78689: LD_VAR 0 4
78693: PPUSH
78694: CALL_OW 256
78698: PPUSH
78699: CALL_OW 2
78703: ST_TO_ADDR
78704: GO 78667
78706: POP
78707: POP
// if not tmp then
78708: LD_VAR 0 5
78712: NOT
78713: IFFALSE 78717
// exit ;
78715: GO 78765
// if asc then
78717: LD_VAR 0 2
78721: IFFALSE 78745
// result := SortListByListAsc ( units , tmp ) else
78723: LD_ADDR_VAR 0 3
78727: PUSH
78728: LD_VAR 0 1
78732: PPUSH
78733: LD_VAR 0 5
78737: PPUSH
78738: CALL_OW 76
78742: ST_TO_ADDR
78743: GO 78765
// result := SortListByListDesc ( units , tmp ) ;
78745: LD_ADDR_VAR 0 3
78749: PUSH
78750: LD_VAR 0 1
78754: PPUSH
78755: LD_VAR 0 5
78759: PPUSH
78760: CALL_OW 77
78764: ST_TO_ADDR
// end ;
78765: LD_VAR 0 3
78769: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78770: LD_INT 0
78772: PPUSH
78773: PPUSH
// task := GetTaskList ( mech ) ;
78774: LD_ADDR_VAR 0 4
78778: PUSH
78779: LD_VAR 0 1
78783: PPUSH
78784: CALL_OW 437
78788: ST_TO_ADDR
// if not task then
78789: LD_VAR 0 4
78793: NOT
78794: IFFALSE 78798
// exit ;
78796: GO 78840
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78798: LD_ADDR_VAR 0 3
78802: PUSH
78803: LD_VAR 0 4
78807: PUSH
78808: LD_INT 1
78810: ARRAY
78811: PUSH
78812: LD_INT 1
78814: ARRAY
78815: PUSH
78816: LD_STRING r
78818: EQUAL
78819: PUSH
78820: LD_VAR 0 4
78824: PUSH
78825: LD_INT 1
78827: ARRAY
78828: PUSH
78829: LD_INT 4
78831: ARRAY
78832: PUSH
78833: LD_VAR 0 2
78837: EQUAL
78838: AND
78839: ST_TO_ADDR
// end ;
78840: LD_VAR 0 3
78844: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78845: LD_INT 0
78847: PPUSH
// SetDir ( unit , d ) ;
78848: LD_VAR 0 1
78852: PPUSH
78853: LD_VAR 0 4
78857: PPUSH
78858: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78862: LD_VAR 0 1
78866: PPUSH
78867: LD_VAR 0 2
78871: PPUSH
78872: LD_VAR 0 3
78876: PPUSH
78877: LD_VAR 0 5
78881: PPUSH
78882: CALL_OW 48
// end ;
78886: LD_VAR 0 6
78890: RET
// export function ToNaturalNumber ( number ) ; begin
78891: LD_INT 0
78893: PPUSH
// result := number div 1 ;
78894: LD_ADDR_VAR 0 2
78898: PUSH
78899: LD_VAR 0 1
78903: PUSH
78904: LD_INT 1
78906: DIV
78907: ST_TO_ADDR
// if number < 0 then
78908: LD_VAR 0 1
78912: PUSH
78913: LD_INT 0
78915: LESS
78916: IFFALSE 78926
// result := 0 ;
78918: LD_ADDR_VAR 0 2
78922: PUSH
78923: LD_INT 0
78925: ST_TO_ADDR
// end ;
78926: LD_VAR 0 2
78930: RET
// export function SortByClass ( units , class ) ; var un ; begin
78931: LD_INT 0
78933: PPUSH
78934: PPUSH
// if not units or not class then
78935: LD_VAR 0 1
78939: NOT
78940: PUSH
78941: LD_VAR 0 2
78945: NOT
78946: OR
78947: IFFALSE 78951
// exit ;
78949: GO 79046
// result := [ ] ;
78951: LD_ADDR_VAR 0 3
78955: PUSH
78956: EMPTY
78957: ST_TO_ADDR
// for un in units do
78958: LD_ADDR_VAR 0 4
78962: PUSH
78963: LD_VAR 0 1
78967: PUSH
78968: FOR_IN
78969: IFFALSE 79044
// if GetClass ( un ) = class then
78971: LD_VAR 0 4
78975: PPUSH
78976: CALL_OW 257
78980: PUSH
78981: LD_VAR 0 2
78985: EQUAL
78986: IFFALSE 79013
// result := Insert ( result , 1 , un ) else
78988: LD_ADDR_VAR 0 3
78992: PUSH
78993: LD_VAR 0 3
78997: PPUSH
78998: LD_INT 1
79000: PPUSH
79001: LD_VAR 0 4
79005: PPUSH
79006: CALL_OW 2
79010: ST_TO_ADDR
79011: GO 79042
// result := Replace ( result , result + 1 , un ) ;
79013: LD_ADDR_VAR 0 3
79017: PUSH
79018: LD_VAR 0 3
79022: PPUSH
79023: LD_VAR 0 3
79027: PUSH
79028: LD_INT 1
79030: PLUS
79031: PPUSH
79032: LD_VAR 0 4
79036: PPUSH
79037: CALL_OW 1
79041: ST_TO_ADDR
79042: GO 78968
79044: POP
79045: POP
// end ;
79046: LD_VAR 0 3
79050: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79051: LD_INT 0
79053: PPUSH
79054: PPUSH
79055: PPUSH
79056: PPUSH
79057: PPUSH
79058: PPUSH
79059: PPUSH
// result := [ ] ;
79060: LD_ADDR_VAR 0 4
79064: PUSH
79065: EMPTY
79066: ST_TO_ADDR
// if x - r < 0 then
79067: LD_VAR 0 1
79071: PUSH
79072: LD_VAR 0 3
79076: MINUS
79077: PUSH
79078: LD_INT 0
79080: LESS
79081: IFFALSE 79093
// min_x := 0 else
79083: LD_ADDR_VAR 0 8
79087: PUSH
79088: LD_INT 0
79090: ST_TO_ADDR
79091: GO 79109
// min_x := x - r ;
79093: LD_ADDR_VAR 0 8
79097: PUSH
79098: LD_VAR 0 1
79102: PUSH
79103: LD_VAR 0 3
79107: MINUS
79108: ST_TO_ADDR
// if y - r < 0 then
79109: LD_VAR 0 2
79113: PUSH
79114: LD_VAR 0 3
79118: MINUS
79119: PUSH
79120: LD_INT 0
79122: LESS
79123: IFFALSE 79135
// min_y := 0 else
79125: LD_ADDR_VAR 0 7
79129: PUSH
79130: LD_INT 0
79132: ST_TO_ADDR
79133: GO 79151
// min_y := y - r ;
79135: LD_ADDR_VAR 0 7
79139: PUSH
79140: LD_VAR 0 2
79144: PUSH
79145: LD_VAR 0 3
79149: MINUS
79150: ST_TO_ADDR
// max_x := x + r ;
79151: LD_ADDR_VAR 0 9
79155: PUSH
79156: LD_VAR 0 1
79160: PUSH
79161: LD_VAR 0 3
79165: PLUS
79166: ST_TO_ADDR
// max_y := y + r ;
79167: LD_ADDR_VAR 0 10
79171: PUSH
79172: LD_VAR 0 2
79176: PUSH
79177: LD_VAR 0 3
79181: PLUS
79182: ST_TO_ADDR
// for _x = min_x to max_x do
79183: LD_ADDR_VAR 0 5
79187: PUSH
79188: DOUBLE
79189: LD_VAR 0 8
79193: DEC
79194: ST_TO_ADDR
79195: LD_VAR 0 9
79199: PUSH
79200: FOR_TO
79201: IFFALSE 79302
// for _y = min_y to max_y do
79203: LD_ADDR_VAR 0 6
79207: PUSH
79208: DOUBLE
79209: LD_VAR 0 7
79213: DEC
79214: ST_TO_ADDR
79215: LD_VAR 0 10
79219: PUSH
79220: FOR_TO
79221: IFFALSE 79298
// begin if not ValidHex ( _x , _y ) then
79223: LD_VAR 0 5
79227: PPUSH
79228: LD_VAR 0 6
79232: PPUSH
79233: CALL_OW 488
79237: NOT
79238: IFFALSE 79242
// continue ;
79240: GO 79220
// if GetResourceTypeXY ( _x , _y ) then
79242: LD_VAR 0 5
79246: PPUSH
79247: LD_VAR 0 6
79251: PPUSH
79252: CALL_OW 283
79256: IFFALSE 79296
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79258: LD_ADDR_VAR 0 4
79262: PUSH
79263: LD_VAR 0 4
79267: PPUSH
79268: LD_VAR 0 4
79272: PUSH
79273: LD_INT 1
79275: PLUS
79276: PPUSH
79277: LD_VAR 0 5
79281: PUSH
79282: LD_VAR 0 6
79286: PUSH
79287: EMPTY
79288: LIST
79289: LIST
79290: PPUSH
79291: CALL_OW 1
79295: ST_TO_ADDR
// end ;
79296: GO 79220
79298: POP
79299: POP
79300: GO 79200
79302: POP
79303: POP
// end ;
79304: LD_VAR 0 4
79308: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79309: LD_INT 0
79311: PPUSH
79312: PPUSH
79313: PPUSH
79314: PPUSH
79315: PPUSH
79316: PPUSH
79317: PPUSH
79318: PPUSH
// if not units then
79319: LD_VAR 0 1
79323: NOT
79324: IFFALSE 79328
// exit ;
79326: GO 79852
// result := UnitFilter ( units , [ f_ok ] ) ;
79328: LD_ADDR_VAR 0 3
79332: PUSH
79333: LD_VAR 0 1
79337: PPUSH
79338: LD_INT 50
79340: PUSH
79341: EMPTY
79342: LIST
79343: PPUSH
79344: CALL_OW 72
79348: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79349: LD_ADDR_VAR 0 8
79353: PUSH
79354: LD_VAR 0 1
79358: PUSH
79359: LD_INT 1
79361: ARRAY
79362: PPUSH
79363: CALL_OW 255
79367: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79368: LD_ADDR_VAR 0 10
79372: PUSH
79373: LD_INT 29
79375: PUSH
79376: LD_INT 91
79378: PUSH
79379: LD_INT 49
79381: PUSH
79382: EMPTY
79383: LIST
79384: LIST
79385: LIST
79386: ST_TO_ADDR
// if not result then
79387: LD_VAR 0 3
79391: NOT
79392: IFFALSE 79396
// exit ;
79394: GO 79852
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79396: LD_ADDR_VAR 0 5
79400: PUSH
79401: LD_INT 81
79403: PUSH
79404: LD_VAR 0 8
79408: PUSH
79409: EMPTY
79410: LIST
79411: LIST
79412: PPUSH
79413: CALL_OW 69
79417: ST_TO_ADDR
// for i in result do
79418: LD_ADDR_VAR 0 4
79422: PUSH
79423: LD_VAR 0 3
79427: PUSH
79428: FOR_IN
79429: IFFALSE 79850
// begin tag := GetTag ( i ) + 1 ;
79431: LD_ADDR_VAR 0 9
79435: PUSH
79436: LD_VAR 0 4
79440: PPUSH
79441: CALL_OW 110
79445: PUSH
79446: LD_INT 1
79448: PLUS
79449: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79450: LD_ADDR_VAR 0 7
79454: PUSH
79455: LD_VAR 0 4
79459: PPUSH
79460: CALL_OW 250
79464: PPUSH
79465: LD_VAR 0 4
79469: PPUSH
79470: CALL_OW 251
79474: PPUSH
79475: LD_INT 6
79477: PPUSH
79478: CALL 79051 0 3
79482: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79483: LD_VAR 0 4
79487: PPUSH
79488: CALL_OW 247
79492: PUSH
79493: LD_INT 2
79495: EQUAL
79496: PUSH
79497: LD_VAR 0 7
79501: AND
79502: PUSH
79503: LD_VAR 0 4
79507: PPUSH
79508: CALL_OW 264
79512: PUSH
79513: LD_VAR 0 10
79517: IN
79518: NOT
79519: AND
79520: IFFALSE 79559
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79522: LD_VAR 0 4
79526: PPUSH
79527: LD_VAR 0 7
79531: PUSH
79532: LD_INT 1
79534: ARRAY
79535: PUSH
79536: LD_INT 1
79538: ARRAY
79539: PPUSH
79540: LD_VAR 0 7
79544: PUSH
79545: LD_INT 1
79547: ARRAY
79548: PUSH
79549: LD_INT 2
79551: ARRAY
79552: PPUSH
79553: CALL_OW 116
79557: GO 79848
// if path > tag then
79559: LD_VAR 0 2
79563: PUSH
79564: LD_VAR 0 9
79568: GREATER
79569: IFFALSE 79777
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79571: LD_ADDR_VAR 0 6
79575: PUSH
79576: LD_VAR 0 5
79580: PPUSH
79581: LD_INT 91
79583: PUSH
79584: LD_VAR 0 4
79588: PUSH
79589: LD_INT 8
79591: PUSH
79592: EMPTY
79593: LIST
79594: LIST
79595: LIST
79596: PPUSH
79597: CALL_OW 72
79601: ST_TO_ADDR
// if nearEnemy then
79602: LD_VAR 0 6
79606: IFFALSE 79675
// begin if GetWeapon ( i ) = ru_time_lapser then
79608: LD_VAR 0 4
79612: PPUSH
79613: CALL_OW 264
79617: PUSH
79618: LD_INT 49
79620: EQUAL
79621: IFFALSE 79649
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79623: LD_VAR 0 4
79627: PPUSH
79628: LD_VAR 0 6
79632: PPUSH
79633: LD_VAR 0 4
79637: PPUSH
79638: CALL_OW 74
79642: PPUSH
79643: CALL_OW 112
79647: GO 79673
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79649: LD_VAR 0 4
79653: PPUSH
79654: LD_VAR 0 6
79658: PPUSH
79659: LD_VAR 0 4
79663: PPUSH
79664: CALL_OW 74
79668: PPUSH
79669: CALL_OW 115
// end else
79673: GO 79775
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79675: LD_VAR 0 4
79679: PPUSH
79680: LD_VAR 0 2
79684: PUSH
79685: LD_VAR 0 9
79689: ARRAY
79690: PUSH
79691: LD_INT 1
79693: ARRAY
79694: PPUSH
79695: LD_VAR 0 2
79699: PUSH
79700: LD_VAR 0 9
79704: ARRAY
79705: PUSH
79706: LD_INT 2
79708: ARRAY
79709: PPUSH
79710: CALL_OW 297
79714: PUSH
79715: LD_INT 6
79717: GREATER
79718: IFFALSE 79761
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79720: LD_VAR 0 4
79724: PPUSH
79725: LD_VAR 0 2
79729: PUSH
79730: LD_VAR 0 9
79734: ARRAY
79735: PUSH
79736: LD_INT 1
79738: ARRAY
79739: PPUSH
79740: LD_VAR 0 2
79744: PUSH
79745: LD_VAR 0 9
79749: ARRAY
79750: PUSH
79751: LD_INT 2
79753: ARRAY
79754: PPUSH
79755: CALL_OW 114
79759: GO 79775
// SetTag ( i , tag ) ;
79761: LD_VAR 0 4
79765: PPUSH
79766: LD_VAR 0 9
79770: PPUSH
79771: CALL_OW 109
// end else
79775: GO 79848
// if enemy then
79777: LD_VAR 0 5
79781: IFFALSE 79848
// begin if GetWeapon ( i ) = ru_time_lapser then
79783: LD_VAR 0 4
79787: PPUSH
79788: CALL_OW 264
79792: PUSH
79793: LD_INT 49
79795: EQUAL
79796: IFFALSE 79824
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79798: LD_VAR 0 4
79802: PPUSH
79803: LD_VAR 0 5
79807: PPUSH
79808: LD_VAR 0 4
79812: PPUSH
79813: CALL_OW 74
79817: PPUSH
79818: CALL_OW 112
79822: GO 79848
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79824: LD_VAR 0 4
79828: PPUSH
79829: LD_VAR 0 5
79833: PPUSH
79834: LD_VAR 0 4
79838: PPUSH
79839: CALL_OW 74
79843: PPUSH
79844: CALL_OW 115
// end ; end ;
79848: GO 79428
79850: POP
79851: POP
// end ;
79852: LD_VAR 0 3
79856: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79857: LD_INT 0
79859: PPUSH
79860: PPUSH
79861: PPUSH
// if not unit or IsInUnit ( unit ) then
79862: LD_VAR 0 1
79866: NOT
79867: PUSH
79868: LD_VAR 0 1
79872: PPUSH
79873: CALL_OW 310
79877: OR
79878: IFFALSE 79882
// exit ;
79880: GO 79973
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79882: LD_ADDR_VAR 0 4
79886: PUSH
79887: LD_VAR 0 1
79891: PPUSH
79892: CALL_OW 250
79896: PPUSH
79897: LD_VAR 0 2
79901: PPUSH
79902: LD_INT 1
79904: PPUSH
79905: CALL_OW 272
79909: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79910: LD_ADDR_VAR 0 5
79914: PUSH
79915: LD_VAR 0 1
79919: PPUSH
79920: CALL_OW 251
79924: PPUSH
79925: LD_VAR 0 2
79929: PPUSH
79930: LD_INT 1
79932: PPUSH
79933: CALL_OW 273
79937: ST_TO_ADDR
// if ValidHex ( x , y ) then
79938: LD_VAR 0 4
79942: PPUSH
79943: LD_VAR 0 5
79947: PPUSH
79948: CALL_OW 488
79952: IFFALSE 79973
// ComTurnXY ( unit , x , y ) ;
79954: LD_VAR 0 1
79958: PPUSH
79959: LD_VAR 0 4
79963: PPUSH
79964: LD_VAR 0 5
79968: PPUSH
79969: CALL_OW 118
// end ;
79973: LD_VAR 0 3
79977: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79978: LD_INT 0
79980: PPUSH
79981: PPUSH
// result := false ;
79982: LD_ADDR_VAR 0 3
79986: PUSH
79987: LD_INT 0
79989: ST_TO_ADDR
// if not units then
79990: LD_VAR 0 2
79994: NOT
79995: IFFALSE 79999
// exit ;
79997: GO 80044
// for i in units do
79999: LD_ADDR_VAR 0 4
80003: PUSH
80004: LD_VAR 0 2
80008: PUSH
80009: FOR_IN
80010: IFFALSE 80042
// if See ( side , i ) then
80012: LD_VAR 0 1
80016: PPUSH
80017: LD_VAR 0 4
80021: PPUSH
80022: CALL_OW 292
80026: IFFALSE 80040
// begin result := true ;
80028: LD_ADDR_VAR 0 3
80032: PUSH
80033: LD_INT 1
80035: ST_TO_ADDR
// exit ;
80036: POP
80037: POP
80038: GO 80044
// end ;
80040: GO 80009
80042: POP
80043: POP
// end ;
80044: LD_VAR 0 3
80048: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80049: LD_INT 0
80051: PPUSH
80052: PPUSH
80053: PPUSH
80054: PPUSH
// if not unit or not points then
80055: LD_VAR 0 1
80059: NOT
80060: PUSH
80061: LD_VAR 0 2
80065: NOT
80066: OR
80067: IFFALSE 80071
// exit ;
80069: GO 80161
// dist := 99999 ;
80071: LD_ADDR_VAR 0 5
80075: PUSH
80076: LD_INT 99999
80078: ST_TO_ADDR
// for i in points do
80079: LD_ADDR_VAR 0 4
80083: PUSH
80084: LD_VAR 0 2
80088: PUSH
80089: FOR_IN
80090: IFFALSE 80159
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80092: LD_ADDR_VAR 0 6
80096: PUSH
80097: LD_VAR 0 1
80101: PPUSH
80102: LD_VAR 0 4
80106: PUSH
80107: LD_INT 1
80109: ARRAY
80110: PPUSH
80111: LD_VAR 0 4
80115: PUSH
80116: LD_INT 2
80118: ARRAY
80119: PPUSH
80120: CALL_OW 297
80124: ST_TO_ADDR
// if tmpDist < dist then
80125: LD_VAR 0 6
80129: PUSH
80130: LD_VAR 0 5
80134: LESS
80135: IFFALSE 80157
// begin result := i ;
80137: LD_ADDR_VAR 0 3
80141: PUSH
80142: LD_VAR 0 4
80146: ST_TO_ADDR
// dist := tmpDist ;
80147: LD_ADDR_VAR 0 5
80151: PUSH
80152: LD_VAR 0 6
80156: ST_TO_ADDR
// end ; end ;
80157: GO 80089
80159: POP
80160: POP
// end ;
80161: LD_VAR 0 3
80165: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80166: LD_INT 0
80168: PPUSH
// uc_side := side ;
80169: LD_ADDR_OWVAR 20
80173: PUSH
80174: LD_VAR 0 1
80178: ST_TO_ADDR
// uc_nation := 3 ;
80179: LD_ADDR_OWVAR 21
80183: PUSH
80184: LD_INT 3
80186: ST_TO_ADDR
// vc_chassis := 25 ;
80187: LD_ADDR_OWVAR 37
80191: PUSH
80192: LD_INT 25
80194: ST_TO_ADDR
// vc_engine := engine_siberite ;
80195: LD_ADDR_OWVAR 39
80199: PUSH
80200: LD_INT 3
80202: ST_TO_ADDR
// vc_control := control_computer ;
80203: LD_ADDR_OWVAR 38
80207: PUSH
80208: LD_INT 3
80210: ST_TO_ADDR
// vc_weapon := 59 ;
80211: LD_ADDR_OWVAR 40
80215: PUSH
80216: LD_INT 59
80218: ST_TO_ADDR
// result := CreateVehicle ;
80219: LD_ADDR_VAR 0 5
80223: PUSH
80224: CALL_OW 45
80228: ST_TO_ADDR
// SetDir ( result , d ) ;
80229: LD_VAR 0 5
80233: PPUSH
80234: LD_VAR 0 4
80238: PPUSH
80239: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80243: LD_VAR 0 5
80247: PPUSH
80248: LD_VAR 0 2
80252: PPUSH
80253: LD_VAR 0 3
80257: PPUSH
80258: LD_INT 0
80260: PPUSH
80261: CALL_OW 48
// end ;
80265: LD_VAR 0 5
80269: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80270: LD_INT 0
80272: PPUSH
80273: PPUSH
80274: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80275: LD_ADDR_VAR 0 2
80279: PUSH
80280: LD_INT 0
80282: PUSH
80283: LD_INT 0
80285: PUSH
80286: LD_INT 0
80288: PUSH
80289: LD_INT 0
80291: PUSH
80292: EMPTY
80293: LIST
80294: LIST
80295: LIST
80296: LIST
80297: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80298: LD_VAR 0 1
80302: NOT
80303: PUSH
80304: LD_VAR 0 1
80308: PPUSH
80309: CALL_OW 264
80313: PUSH
80314: LD_INT 12
80316: PUSH
80317: LD_INT 51
80319: PUSH
80320: LD_INT 32
80322: PUSH
80323: LD_INT 89
80325: PUSH
80326: EMPTY
80327: LIST
80328: LIST
80329: LIST
80330: LIST
80331: IN
80332: NOT
80333: OR
80334: IFFALSE 80338
// exit ;
80336: GO 80436
// for i := 1 to 3 do
80338: LD_ADDR_VAR 0 3
80342: PUSH
80343: DOUBLE
80344: LD_INT 1
80346: DEC
80347: ST_TO_ADDR
80348: LD_INT 3
80350: PUSH
80351: FOR_TO
80352: IFFALSE 80434
// begin tmp := GetCargo ( cargo , i ) ;
80354: LD_ADDR_VAR 0 4
80358: PUSH
80359: LD_VAR 0 1
80363: PPUSH
80364: LD_VAR 0 3
80368: PPUSH
80369: CALL_OW 289
80373: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80374: LD_ADDR_VAR 0 2
80378: PUSH
80379: LD_VAR 0 2
80383: PPUSH
80384: LD_VAR 0 3
80388: PPUSH
80389: LD_VAR 0 4
80393: PPUSH
80394: CALL_OW 1
80398: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80399: LD_ADDR_VAR 0 2
80403: PUSH
80404: LD_VAR 0 2
80408: PPUSH
80409: LD_INT 4
80411: PPUSH
80412: LD_VAR 0 2
80416: PUSH
80417: LD_INT 4
80419: ARRAY
80420: PUSH
80421: LD_VAR 0 4
80425: PLUS
80426: PPUSH
80427: CALL_OW 1
80431: ST_TO_ADDR
// end ;
80432: GO 80351
80434: POP
80435: POP
// end ;
80436: LD_VAR 0 2
80440: RET
// export function Length ( array ) ; begin
80441: LD_INT 0
80443: PPUSH
// result := array + 0 ;
80444: LD_ADDR_VAR 0 2
80448: PUSH
80449: LD_VAR 0 1
80453: PUSH
80454: LD_INT 0
80456: PLUS
80457: ST_TO_ADDR
// end ;
80458: LD_VAR 0 2
80462: RET
// export function PrepareArray ( array ) ; begin
80463: LD_INT 0
80465: PPUSH
// result := array diff 0 ;
80466: LD_ADDR_VAR 0 2
80470: PUSH
80471: LD_VAR 0 1
80475: PUSH
80476: LD_INT 0
80478: DIFF
80479: ST_TO_ADDR
// if not result [ 1 ] then
80480: LD_VAR 0 2
80484: PUSH
80485: LD_INT 1
80487: ARRAY
80488: NOT
80489: IFFALSE 80509
// result := Delete ( result , 1 ) ;
80491: LD_ADDR_VAR 0 2
80495: PUSH
80496: LD_VAR 0 2
80500: PPUSH
80501: LD_INT 1
80503: PPUSH
80504: CALL_OW 3
80508: ST_TO_ADDR
// end ;
80509: LD_VAR 0 2
80513: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80514: LD_INT 0
80516: PPUSH
80517: PPUSH
80518: PPUSH
80519: PPUSH
// sibRocketRange := 25 ;
80520: LD_ADDR_VAR 0 6
80524: PUSH
80525: LD_INT 25
80527: ST_TO_ADDR
// result := false ;
80528: LD_ADDR_VAR 0 4
80532: PUSH
80533: LD_INT 0
80535: ST_TO_ADDR
// for i := 0 to 5 do
80536: LD_ADDR_VAR 0 5
80540: PUSH
80541: DOUBLE
80542: LD_INT 0
80544: DEC
80545: ST_TO_ADDR
80546: LD_INT 5
80548: PUSH
80549: FOR_TO
80550: IFFALSE 80617
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80552: LD_VAR 0 1
80556: PPUSH
80557: LD_VAR 0 5
80561: PPUSH
80562: LD_VAR 0 6
80566: PPUSH
80567: CALL_OW 272
80571: PPUSH
80572: LD_VAR 0 2
80576: PPUSH
80577: LD_VAR 0 5
80581: PPUSH
80582: LD_VAR 0 6
80586: PPUSH
80587: CALL_OW 273
80591: PPUSH
80592: LD_VAR 0 3
80596: PPUSH
80597: CALL_OW 309
80601: IFFALSE 80615
// begin result := true ;
80603: LD_ADDR_VAR 0 4
80607: PUSH
80608: LD_INT 1
80610: ST_TO_ADDR
// exit ;
80611: POP
80612: POP
80613: GO 80619
// end ;
80615: GO 80549
80617: POP
80618: POP
// end ;
80619: LD_VAR 0 4
80623: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80624: LD_INT 0
80626: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80627: LD_VAR 0 1
80631: PPUSH
80632: LD_VAR 0 2
80636: PPUSH
80637: LD_INT 0
80639: PPUSH
80640: LD_INT 0
80642: PPUSH
80643: LD_INT 1
80645: PPUSH
80646: LD_INT 0
80648: PPUSH
80649: CALL_OW 587
// end ; end_of_file
80653: LD_VAR 0 3
80657: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80658: LD_VAR 0 1
80662: PUSH
80663: LD_INT 200
80665: DOUBLE
80666: GREATEREQUAL
80667: IFFALSE 80675
80669: LD_INT 299
80671: DOUBLE
80672: LESSEQUAL
80673: IFTRUE 80677
80675: GO 80709
80677: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80678: LD_VAR 0 1
80682: PPUSH
80683: LD_VAR 0 2
80687: PPUSH
80688: LD_VAR 0 3
80692: PPUSH
80693: LD_VAR 0 4
80697: PPUSH
80698: LD_VAR 0 5
80702: PPUSH
80703: CALL 35324 0 5
80707: GO 80786
80709: LD_INT 300
80711: DOUBLE
80712: GREATEREQUAL
80713: IFFALSE 80721
80715: LD_INT 399
80717: DOUBLE
80718: LESSEQUAL
80719: IFTRUE 80723
80721: GO 80785
80723: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80724: LD_VAR 0 1
80728: PPUSH
80729: LD_VAR 0 2
80733: PPUSH
80734: LD_VAR 0 3
80738: PPUSH
80739: LD_VAR 0 4
80743: PPUSH
80744: LD_VAR 0 5
80748: PPUSH
80749: LD_VAR 0 6
80753: PPUSH
80754: LD_VAR 0 7
80758: PPUSH
80759: LD_VAR 0 8
80763: PPUSH
80764: LD_VAR 0 9
80768: PPUSH
80769: LD_VAR 0 10
80773: PPUSH
80774: LD_VAR 0 11
80778: PPUSH
80779: CALL 31657 0 11
80783: GO 80786
80785: POP
// end ;
80786: PPOPN 11
80788: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80789: LD_VAR 0 1
80793: PPUSH
80794: LD_VAR 0 2
80798: PPUSH
80799: LD_VAR 0 3
80803: PPUSH
80804: LD_VAR 0 4
80808: PPUSH
80809: LD_VAR 0 5
80813: PPUSH
80814: CALL 35060 0 5
// end ; end_of_file
80818: PPOPN 5
80820: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80821: LD_VAR 0 1
80825: PPUSH
80826: LD_VAR 0 2
80830: PPUSH
80831: LD_VAR 0 3
80835: PPUSH
80836: LD_VAR 0 4
80840: PPUSH
80841: LD_VAR 0 5
80845: PPUSH
80846: LD_VAR 0 6
80850: PPUSH
80851: CALL 19309 0 6
// end ;
80855: PPOPN 6
80857: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80858: LD_INT 0
80860: PPUSH
// begin if not units then
80861: LD_VAR 0 1
80865: NOT
80866: IFFALSE 80870
// exit ;
80868: GO 80870
// end ;
80870: PPOPN 7
80872: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80873: CALL 19213 0 0
// end ;
80877: PPOPN 1
80879: END
