// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3460 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2674 0 0
// PrepareWesternBase ;
  41: CALL 2903 0 0
// Action ;
  45: CALL 5793 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 500 , 450 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 500
 233: PUSH
 234: LD_INT 450
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty , vcount , tmpv ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
// uc_side := 4 ;
1157: LD_ADDR_OWVAR 20
1161: PUSH
1162: LD_INT 4
1164: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1165: LD_ADDR_EXP 46
1169: PUSH
1170: LD_STRING Powell
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: LD_STRING 
1178: PPUSH
1179: CALL 41051 0 3
1183: ST_TO_ADDR
// uc_side := 1 ;
1184: LD_ADDR_OWVAR 20
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// uc_nation := 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// if debug then
1200: LD_EXP 1
1204: IFFALSE 1550
// begin for i = 1 to 4 do
1206: LD_ADDR_VAR 0 2
1210: PUSH
1211: DOUBLE
1212: LD_INT 1
1214: DEC
1215: ST_TO_ADDR
1216: LD_INT 4
1218: PUSH
1219: FOR_TO
1220: IFFALSE 1271
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL_OW 380
// un := CreateHuman ;
1243: LD_ADDR_VAR 0 3
1247: PUSH
1248: CALL_OW 44
1252: ST_TO_ADDR
// others := others ^ un ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_VAR 0 5
1262: PUSH
1263: LD_VAR 0 3
1267: ADD
1268: ST_TO_ADDR
// end ;
1269: GO 1219
1271: POP
1272: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1273: LD_ADDR_VAR 0 6
1277: PUSH
1278: LD_INT 21
1280: PUSH
1281: LD_INT 1
1283: PUSH
1284: LD_INT 1
1286: PUSH
1287: LD_INT 42
1289: PUSH
1290: LD_INT 0
1292: PUSH
1293: LD_INT 750
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 21
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 42
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 750
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_INT 21
1332: PUSH
1333: LD_INT 1
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: LD_INT 42
1341: PUSH
1342: LD_INT 0
1344: PUSH
1345: LD_INT 750
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 42
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 750
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 21
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 44
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: LD_INT 750
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: LD_INT 43
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 750
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 21
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: LD_INT 43
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 750
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 21
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 43
1471: PUSH
1472: LD_INT 0
1474: PUSH
1475: LD_INT 750
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 21
1488: PUSH
1489: LD_INT 1
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 90
1500: PUSH
1501: LD_INT 504
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 51
1523: PUSH
1524: LD_INT 80
1526: PUSH
1527: LD_INT 750
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1550: LD_ADDR_EXP 37
1554: PUSH
1555: LD_STRING JMM
1557: PPUSH
1558: LD_EXP 1
1562: NOT
1563: PPUSH
1564: LD_EXP 3
1568: PPUSH
1569: CALL 41051 0 3
1573: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1574: LD_ADDR_EXP 38
1578: PUSH
1579: LD_STRING Bobby
1581: PPUSH
1582: LD_EXP 1
1586: NOT
1587: PPUSH
1588: LD_EXP 3
1592: PPUSH
1593: CALL 41051 0 3
1597: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1598: LD_ADDR_EXP 39
1602: PUSH
1603: LD_STRING Cyrus
1605: PPUSH
1606: LD_EXP 1
1610: NOT
1611: PPUSH
1612: LD_EXP 3
1616: PPUSH
1617: CALL 41051 0 3
1621: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1622: LD_ADDR_EXP 40
1626: PUSH
1627: LD_STRING Lisa
1629: PPUSH
1630: LD_EXP 1
1634: NOT
1635: PPUSH
1636: LD_EXP 3
1640: PPUSH
1641: CALL 41051 0 3
1645: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1646: LD_ADDR_EXP 41
1650: PUSH
1651: LD_STRING Khatam
1653: PPUSH
1654: LD_EXP 1
1658: NOT
1659: PPUSH
1660: LD_EXP 3
1664: PPUSH
1665: CALL 41051 0 3
1669: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1670: LD_ADDR_EXP 42
1674: PUSH
1675: LD_STRING Brian
1677: PPUSH
1678: LD_EXP 1
1682: NOT
1683: PPUSH
1684: LD_EXP 3
1688: PPUSH
1689: CALL 41051 0 3
1693: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1694: LD_ADDR_EXP 43
1698: PUSH
1699: LD_STRING Jerry
1701: PPUSH
1702: LD_EXP 1
1706: NOT
1707: PPUSH
1708: LD_EXP 3
1712: PPUSH
1713: CALL 41051 0 3
1717: ST_TO_ADDR
// if Bobby then
1718: LD_EXP 38
1722: IFFALSE 1753
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1724: LD_ADDR_VAR 0 4
1728: PUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: LD_VAR 0 4
1738: PUSH
1739: LD_INT 1
1741: PLUS
1742: PPUSH
1743: LD_EXP 38
1747: PPUSH
1748: CALL_OW 2
1752: ST_TO_ADDR
// if Cyrus then
1753: LD_EXP 39
1757: IFFALSE 1788
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_VAR 0 4
1773: PUSH
1774: LD_INT 1
1776: PLUS
1777: PPUSH
1778: LD_EXP 39
1782: PPUSH
1783: CALL_OW 2
1787: ST_TO_ADDR
// if Lisa then
1788: LD_EXP 40
1792: IFFALSE 1823
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: LD_VAR 0 4
1808: PUSH
1809: LD_INT 1
1811: PLUS
1812: PPUSH
1813: LD_EXP 40
1817: PPUSH
1818: CALL_OW 2
1822: ST_TO_ADDR
// if Khatam then
1823: LD_EXP 41
1827: IFFALSE 1858
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: LD_VAR 0 4
1843: PUSH
1844: LD_INT 1
1846: PLUS
1847: PPUSH
1848: LD_EXP 41
1852: PPUSH
1853: CALL_OW 2
1857: ST_TO_ADDR
// if Brian then
1858: LD_EXP 42
1862: IFFALSE 1893
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1864: LD_ADDR_VAR 0 4
1868: PUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_VAR 0 4
1878: PUSH
1879: LD_INT 1
1881: PLUS
1882: PPUSH
1883: LD_EXP 42
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// if Jerry then
1893: LD_EXP 43
1897: IFFALSE 1928
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: PLUS
1917: PPUSH
1918: LD_EXP 43
1922: PPUSH
1923: CALL_OW 2
1927: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1928: LD_STRING 02_other_survivors
1930: PPUSH
1931: CALL_OW 28
1935: IFFALSE 1950
// others := CreateCharacterSet ( 02_other_survivors ) ;
1937: LD_ADDR_VAR 0 5
1941: PUSH
1942: LD_STRING 02_other_survivors
1944: PPUSH
1945: CALL_OW 31
1949: ST_TO_ADDR
// if others then
1950: LD_VAR 0 5
1954: IFFALSE 1979
// begin tmp := tmp ^ others ;
1956: LD_ADDR_VAR 0 4
1960: PUSH
1961: LD_VAR 0 4
1965: PUSH
1966: LD_VAR 0 5
1970: ADD
1971: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1972: LD_STRING 02_other_survivors
1974: PPUSH
1975: CALL_OW 40
// end ; jmm_units := tmp diff 0 ;
1979: LD_ADDR_EXP 4
1983: PUSH
1984: LD_VAR 0 4
1988: PUSH
1989: LD_INT 0
1991: DIFF
1992: ST_TO_ADDR
// if not vehicles then
1993: LD_VAR 0 6
1997: NOT
1998: IFFALSE 2015
// vehicles := LoadVariable ( 02_tanks_1 , [ ] ) ;
2000: LD_ADDR_VAR 0 6
2004: PUSH
2005: LD_STRING 02_tanks_1
2007: PPUSH
2008: EMPTY
2009: PPUSH
2010: CALL_OW 30
2014: ST_TO_ADDR
// if vehicles then
2015: LD_VAR 0 6
2019: IFFALSE 2387
// begin got_mech := false ;
2021: LD_ADDR_VAR 0 7
2025: PUSH
2026: LD_INT 0
2028: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 72
2048: IFFALSE 2058
// got_mech := true ;
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// vcount := Count ( vehicles ) ;
2058: LD_ADDR_VAR 0 9
2062: PUSH
2063: LD_VAR 0 6
2067: PPUSH
2068: CALL 43251 0 1
2072: ST_TO_ADDR
// if vcount > 1 then
2073: LD_VAR 0 9
2077: PUSH
2078: LD_INT 1
2080: GREATER
2081: IFFALSE 2184
// begin for i := 2 to vcount do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 2
2091: DEC
2092: ST_TO_ADDR
2093: LD_VAR 0 9
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2182
// if vehicles [ i ] [ 4 ] = ru_cargo_bay then
2101: LD_VAR 0 6
2105: PUSH
2106: LD_VAR 0 2
2110: ARRAY
2111: PUSH
2112: LD_INT 4
2114: ARRAY
2115: PUSH
2116: LD_INT 51
2118: EQUAL
2119: IFFALSE 2180
// begin tmpv := vehicles [ i ] ;
2121: LD_ADDR_VAR 0 10
2125: PUSH
2126: LD_VAR 0 6
2130: PUSH
2131: LD_VAR 0 2
2135: ARRAY
2136: ST_TO_ADDR
// vehicles := Delete ( vehicles , i ) ;
2137: LD_ADDR_VAR 0 6
2141: PUSH
2142: LD_VAR 0 6
2146: PPUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 3
2156: ST_TO_ADDR
// vehicles := Insert ( vehicles , 1 , tmpv ) ;
2157: LD_ADDR_VAR 0 6
2161: PUSH
2162: LD_VAR 0 6
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_VAR 0 10
2174: PPUSH
2175: CALL_OW 2
2179: ST_TO_ADDR
// end ;
2180: GO 2098
2182: POP
2183: POP
// end ; if vcount > 6 then
2184: LD_VAR 0 9
2188: PUSH
2189: LD_INT 6
2191: GREATER
2192: IFFALSE 2202
// vcount := 6 ;
2194: LD_ADDR_VAR 0 9
2198: PUSH
2199: LD_INT 6
2201: ST_TO_ADDR
// if jmm_units + 1 < vcount then
2202: LD_EXP 4
2206: PUSH
2207: LD_INT 1
2209: PLUS
2210: PUSH
2211: LD_VAR 0 9
2215: LESS
2216: IFFALSE 2232
// vcount := jmm_units + 1 ;
2218: LD_ADDR_VAR 0 9
2222: PUSH
2223: LD_EXP 4
2227: PUSH
2228: LD_INT 1
2230: PLUS
2231: ST_TO_ADDR
// for i := 1 to vcount do
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: DOUBLE
2238: LD_INT 1
2240: DEC
2241: ST_TO_ADDR
2242: LD_VAR 0 9
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2385
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 3
2260: PPUSH
2261: LD_VAR 0 6
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: LD_VAR 0 6
2280: PUSH
2281: LD_VAR 0 2
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 6
2295: PUSH
2296: LD_VAR 0 2
2300: ARRAY
2301: PUSH
2302: LD_INT 3
2304: ARRAY
2305: PPUSH
2306: LD_VAR 0 6
2310: PUSH
2311: LD_VAR 0 2
2315: ARRAY
2316: PUSH
2317: LD_INT 4
2319: ARRAY
2320: PPUSH
2321: LD_INT 40
2323: PPUSH
2324: CALL 497 0 7
2328: ST_TO_ADDR
// if not got_mech then
2329: LD_VAR 0 7
2333: NOT
2334: IFFALSE 2360
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_VAR 0 6
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_INT 6
2354: ARRAY
2355: PPUSH
2356: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_VAR 0 3
2377: PPUSH
2378: CALL_OW 2
2382: ST_TO_ADDR
// end ;
2383: GO 2247
2385: POP
2386: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
2387: LD_EXP 37
2391: PPUSH
2392: LD_INT 194
2394: PPUSH
2395: LD_INT 119
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 48
// if tmp then
2405: LD_VAR 0 4
2409: IFFALSE 2601
// begin for i in tmp do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_VAR 0 4
2420: PUSH
2421: FOR_IN
2422: IFFALSE 2599
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL_OW 257
2433: PUSH
2434: LD_INT 1
2436: NONEQUAL
2437: IFFALSE 2451
2439: PUSH
2440: LD_VAR 0 2
2444: PUSH
2445: LD_EXP 41
2449: NONEQUAL
2450: AND
2451: IFFALSE 2465
// SetClass ( i , 1 ) ;
2453: LD_VAR 0 2
2457: PPUSH
2458: LD_INT 1
2460: PPUSH
2461: CALL_OW 336
// if i = Khatam then
2465: LD_VAR 0 2
2469: PUSH
2470: LD_EXP 41
2474: EQUAL
2475: IFFALSE 2489
// SetClass ( i , 4 ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: LD_INT 4
2484: PPUSH
2485: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2489: LD_ADDR_VAR 0 8
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 21
2506: PUSH
2507: LD_INT 2
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 58
2516: PUSH
2517: EMPTY
2518: LIST
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: LIST
2524: PPUSH
2525: CALL_OW 69
2529: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2530: LD_VAR 0 2
2534: PPUSH
2535: CALL_OW 247
2539: PUSH
2540: LD_INT 1
2542: EQUAL
2543: IFFALSE 2551
2545: PUSH
2546: LD_VAR 0 8
2550: AND
2551: IFFALSE 2573
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2553: LD_VAR 0 2
2557: PPUSH
2558: LD_VAR 0 8
2562: PUSH
2563: LD_INT 1
2565: ARRAY
2566: PPUSH
2567: CALL_OW 52
2571: GO 2588
// PlaceUnitArea ( i , startArea , false ) ;
2573: LD_VAR 0 2
2577: PPUSH
2578: LD_INT 1
2580: PPUSH
2581: LD_INT 0
2583: PPUSH
2584: CALL_OW 49
// ComHold ( i ) ;
2588: LD_VAR 0 2
2592: PPUSH
2593: CALL_OW 140
// end ;
2597: GO 2421
2599: POP
2600: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2601: LD_ADDR_EXP 7
2605: PUSH
2606: LD_STRING 02_mikhailStatus_1
2608: PPUSH
2609: LD_INT 0
2611: PPUSH
2612: CALL_OW 30
2616: ST_TO_ADDR
// if not bierezov_exist and not debug then
2617: LD_EXP 7
2621: NOT
2622: IFFALSE 2631
2624: PUSH
2625: LD_EXP 1
2629: NOT
2630: AND
2631: IFFALSE 2635
// exit ;
2633: GO 2669
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2635: LD_ADDR_EXP 45
2639: PUSH
2640: LD_STRING Mikhail
2642: PPUSH
2643: LD_INT 0
2645: PPUSH
2646: LD_STRING 
2648: PPUSH
2649: CALL 41051 0 3
2653: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2654: LD_EXP 45
2658: PPUSH
2659: LD_INT 1
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: CALL_OW 49
// end ;
2669: LD_VAR 0 1
2673: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2674: LD_INT 0
2676: PPUSH
2677: PPUSH
2678: PPUSH
2679: PPUSH
// uc_side := 4 ;
2680: LD_ADDR_OWVAR 20
2684: PUSH
2685: LD_INT 4
2687: ST_TO_ADDR
// uc_nation := 1 ;
2688: LD_ADDR_OWVAR 21
2692: PUSH
2693: LD_INT 1
2695: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2696: LD_ADDR_EXP 44
2700: PUSH
2701: LD_STRING Cornell
2703: PPUSH
2704: LD_INT 0
2706: PPUSH
2707: LD_STRING 
2709: PPUSH
2710: CALL 41051 0 3
2714: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2715: LD_ADDR_EXP 6
2719: PUSH
2720: LD_INT 9
2722: PUSH
2723: LD_EXP 4
2727: MINUS
2728: ST_TO_ADDR
// tmp := [ ] ;
2729: LD_ADDR_VAR 0 2
2733: PUSH
2734: EMPTY
2735: ST_TO_ADDR
// if cornel_units < 4 then
2736: LD_EXP 6
2740: PUSH
2741: LD_INT 4
2743: LESS
2744: IFFALSE 2754
// cornel_units := 4 ;
2746: LD_ADDR_EXP 6
2750: PUSH
2751: LD_INT 4
2753: ST_TO_ADDR
// for i = 1 to cornel_units do
2754: LD_ADDR_VAR 0 4
2758: PUSH
2759: DOUBLE
2760: LD_INT 1
2762: DEC
2763: ST_TO_ADDR
2764: LD_EXP 6
2768: PUSH
2769: FOR_TO
2770: IFFALSE 2868
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2772: LD_INT 0
2774: PPUSH
2775: LD_INT 1
2777: PUSH
2778: LD_INT 1
2780: PUSH
2781: LD_INT 1
2783: PUSH
2784: LD_INT 2
2786: PUSH
2787: LD_INT 4
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: LIST
2794: LIST
2795: LIST
2796: PUSH
2797: LD_VAR 0 4
2801: PUSH
2802: LD_INT 5
2804: MOD
2805: PUSH
2806: LD_INT 1
2808: PLUS
2809: ARRAY
2810: PPUSH
2811: LD_INT 2
2813: PPUSH
2814: CALL_OW 380
// un := CreateHuman ;
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: CALL_OW 44
2827: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2828: LD_ADDR_VAR 0 2
2832: PUSH
2833: LD_VAR 0 2
2837: PPUSH
2838: LD_INT 1
2840: PPUSH
2841: LD_VAR 0 3
2845: PPUSH
2846: CALL_OW 2
2850: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2851: LD_VAR 0 3
2855: PPUSH
2856: LD_INT 2
2858: PPUSH
2859: LD_INT 0
2861: PPUSH
2862: CALL_OW 49
// end ;
2866: GO 2769
2868: POP
2869: POP
// cornel_units := tmp ;
2870: LD_ADDR_EXP 6
2874: PUSH
2875: LD_VAR 0 2
2879: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2880: LD_EXP 44
2884: PPUSH
2885: LD_INT 191
2887: PPUSH
2888: LD_INT 106
2890: PPUSH
2891: LD_INT 0
2893: PPUSH
2894: CALL_OW 48
// end ;
2898: LD_VAR 0 1
2902: RET
// export function PrepareWesternBase ; var i ; begin
2903: LD_INT 0
2905: PPUSH
2906: PPUSH
// uc_side := 8 ;
2907: LD_ADDR_OWVAR 20
2911: PUSH
2912: LD_INT 8
2914: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2915: LD_ADDR_EXP 47
2919: PUSH
2920: LD_STRING Lynch
2922: PPUSH
2923: LD_INT 0
2925: PPUSH
2926: LD_STRING 
2928: PPUSH
2929: CALL 41051 0 3
2933: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2934: LD_ADDR_EXP 48
2938: PUSH
2939: LD_STRING Walker
2941: PPUSH
2942: LD_INT 0
2944: PPUSH
2945: LD_STRING 
2947: PPUSH
2948: CALL 41051 0 3
2952: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2953: LD_ADDR_EXP 49
2957: PUSH
2958: LD_STRING Turner
2960: PPUSH
2961: LD_INT 0
2963: PPUSH
2964: LD_STRING 
2966: PPUSH
2967: CALL 41051 0 3
2971: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2972: LD_ADDR_EXP 50
2976: PUSH
2977: LD_STRING Jillian
2979: PPUSH
2980: LD_INT 0
2982: PPUSH
2983: LD_STRING 
2985: PPUSH
2986: CALL 41051 0 3
2990: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2991: LD_ADDR_VAR 0 2
2995: PUSH
2996: LD_EXP 47
3000: PUSH
3001: LD_EXP 48
3005: PUSH
3006: LD_EXP 49
3010: PUSH
3011: LD_EXP 50
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: PUSH
3022: FOR_IN
3023: IFFALSE 3051
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
3025: LD_VAR 0 2
3029: PPUSH
3030: LD_INT 3
3032: PPUSH
3033: LD_INT 0
3035: PPUSH
3036: CALL_OW 49
// ComHold ( i ) ;
3040: LD_VAR 0 2
3044: PPUSH
3045: CALL_OW 140
// end ;
3049: GO 3022
3051: POP
3052: POP
// end ;
3053: LD_VAR 0 1
3057: RET
// export function SelectGroup ; var units , selected , i ; begin
3058: LD_INT 0
3060: PPUSH
3061: PPUSH
3062: PPUSH
3063: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
3064: LD_ADDR_VAR 0 2
3068: PUSH
3069: LD_EXP 37
3073: PUSH
3074: LD_INT -3
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: PUSH
3081: LD_EXP 4
3085: ADD
3086: PUSH
3087: LD_INT -2
3089: PUSH
3090: LD_INT -4
3092: PUSH
3093: LD_EXP 44
3097: PUSH
3098: LD_EXP 45
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: LIST
3107: LIST
3108: ADD
3109: PUSH
3110: LD_INT -3
3112: PUSH
3113: EMPTY
3114: LIST
3115: ADD
3116: PUSH
3117: LD_EXP 6
3121: ADD
3122: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
3123: LD_ADDR_VAR 0 3
3127: PUSH
3128: LD_EXP 37
3132: PUSH
3133: LD_STRING Select four characters to go with you
3135: PPUSH
3136: LD_INT 4
3138: PPUSH
3139: LD_INT 4
3141: PPUSH
3142: LD_VAR 0 2
3146: PPUSH
3147: EMPTY
3148: PPUSH
3149: CALL_OW 42
3153: ADD
3154: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
3155: LD_ADDR_EXP 6
3159: PUSH
3160: LD_EXP 4
3164: PUSH
3165: LD_EXP 6
3169: UNION
3170: PUSH
3171: LD_VAR 0 3
3175: DIFF
3176: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
3177: LD_ADDR_VAR 0 4
3181: PUSH
3182: LD_EXP 6
3186: PUSH
3187: LD_EXP 45
3191: ADD
3192: PUSH
3193: FOR_IN
3194: IFFALSE 3225
// if GetSide ( i ) = 1 then
3196: LD_VAR 0 4
3200: PPUSH
3201: CALL_OW 255
3205: PUSH
3206: LD_INT 1
3208: EQUAL
3209: IFFALSE 3223
// SetSide ( i , 4 ) ;
3211: LD_VAR 0 4
3215: PPUSH
3216: LD_INT 4
3218: PPUSH
3219: CALL_OW 235
3223: GO 3193
3225: POP
3226: POP
// for i in selected do
3227: LD_ADDR_VAR 0 4
3231: PUSH
3232: LD_VAR 0 3
3236: PUSH
3237: FOR_IN
3238: IFFALSE 3269
// if GetSide ( i ) = 4 then
3240: LD_VAR 0 4
3244: PPUSH
3245: CALL_OW 255
3249: PUSH
3250: LD_INT 4
3252: EQUAL
3253: IFFALSE 3267
// SetSide ( i , 1 ) ;
3255: LD_VAR 0 4
3259: PPUSH
3260: LD_INT 1
3262: PPUSH
3263: CALL_OW 235
3267: GO 3237
3269: POP
3270: POP
// jmm_units := jmm_units diff cornel_units ;
3271: LD_ADDR_EXP 4
3275: PUSH
3276: LD_EXP 4
3280: PUSH
3281: LD_EXP 6
3285: DIFF
3286: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
3287: LD_EXP 38
3291: PPUSH
3292: CALL_OW 255
3296: PUSH
3297: LD_INT 4
3299: EQUAL
3300: IFFALSE 3315
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
3302: LD_EXP 3
3306: PUSH
3307: LD_STRING Bobby
3309: STR
3310: PPUSH
3311: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
3315: LD_EXP 39
3319: PPUSH
3320: CALL_OW 255
3324: PUSH
3325: LD_INT 4
3327: EQUAL
3328: IFFALSE 3343
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
3330: LD_EXP 3
3334: PUSH
3335: LD_STRING Cyrus
3337: STR
3338: PPUSH
3339: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
3343: LD_EXP 40
3347: PPUSH
3348: CALL_OW 255
3352: PUSH
3353: LD_INT 4
3355: EQUAL
3356: IFFALSE 3371
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
3358: LD_EXP 3
3362: PUSH
3363: LD_STRING Lisa
3365: STR
3366: PPUSH
3367: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
3371: LD_EXP 41
3375: PPUSH
3376: CALL_OW 255
3380: PUSH
3381: LD_INT 4
3383: EQUAL
3384: IFFALSE 3399
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
3386: LD_EXP 3
3390: PUSH
3391: LD_STRING Khatam
3393: STR
3394: PPUSH
3395: CALL_OW 40
// if GetSide ( Brian ) = 4 then
3399: LD_EXP 42
3403: PPUSH
3404: CALL_OW 255
3408: PUSH
3409: LD_INT 4
3411: EQUAL
3412: IFFALSE 3427
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3414: LD_EXP 3
3418: PUSH
3419: LD_STRING Brian
3421: STR
3422: PPUSH
3423: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3427: LD_EXP 43
3431: PPUSH
3432: CALL_OW 255
3436: PUSH
3437: LD_INT 4
3439: EQUAL
3440: IFFALSE 3455
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3442: LD_EXP 3
3446: PUSH
3447: LD_STRING Jerry
3449: STR
3450: PPUSH
3451: CALL_OW 40
// end ; end_of_file
3455: LD_VAR 0 1
3459: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3460: LD_INT 0
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
3469: PPUSH
3470: PPUSH
3471: PPUSH
3472: PPUSH
3473: PPUSH
3474: PPUSH
// ru_alert := false ;
3475: LD_ADDR_EXP 60
3479: PUSH
3480: LD_INT 0
3482: ST_TO_ADDR
// ru_produce_list := [ ] ;
3483: LD_ADDR_EXP 57
3487: PUSH
3488: EMPTY
3489: ST_TO_ADDR
// if Difficulty > 1 then
3490: LD_OWVAR 67
3494: PUSH
3495: LD_INT 1
3497: GREATER
3498: IFFALSE 3622
// begin uc_side := 3 ;
3500: LD_ADDR_OWVAR 20
3504: PUSH
3505: LD_INT 3
3507: ST_TO_ADDR
// uc_nation := 3 ;
3508: LD_ADDR_OWVAR 21
3512: PUSH
3513: LD_INT 3
3515: ST_TO_ADDR
// bc_type := b_breastwork ;
3516: LD_ADDR_OWVAR 42
3520: PUSH
3521: LD_INT 31
3523: ST_TO_ADDR
// bc_level := Difficulty ;
3524: LD_ADDR_OWVAR 43
3528: PUSH
3529: LD_OWVAR 67
3533: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3534: LD_INT 22
3536: PPUSH
3537: LD_INT 14
3539: PPUSH
3540: LD_INT 0
3542: PPUSH
3543: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3547: LD_INT 48
3549: PPUSH
3550: LD_INT 46
3552: PPUSH
3553: LD_INT 0
3555: PPUSH
3556: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3560: LD_INT 86
3562: PPUSH
3563: LD_INT 65
3565: PPUSH
3566: LD_INT 5
3568: PPUSH
3569: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3573: LD_INT 165
3575: PPUSH
3576: LD_INT 73
3578: PPUSH
3579: LD_INT 5
3581: PPUSH
3582: CALL_OW 47
// if Difficulty > 2 then
3586: LD_OWVAR 67
3590: PUSH
3591: LD_INT 2
3593: GREATER
3594: IFFALSE 3622
// begin CreateAndPlaceBuildingXYD ( 152 , 114 , 4 ) ;
3596: LD_INT 152
3598: PPUSH
3599: LD_INT 114
3601: PPUSH
3602: LD_INT 4
3604: PPUSH
3605: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 157 , 97 , 4 ) ;
3609: LD_INT 157
3611: PPUSH
3612: LD_INT 97
3614: PPUSH
3615: LD_INT 4
3617: PPUSH
3618: CALL_OW 47
// end ; end ; if Difficulty >= 3 then
3622: LD_OWVAR 67
3626: PUSH
3627: LD_INT 3
3629: GREATEREQUAL
3630: IFFALSE 3645
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3632: LD_INT 51
3634: PPUSH
3635: LD_INT 3
3637: PPUSH
3638: LD_INT 2
3640: PPUSH
3641: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3645: LD_ADDR_VAR 0 7
3649: PUSH
3650: LD_INT 22
3652: PUSH
3653: LD_INT 3
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: LD_INT 2
3662: PUSH
3663: LD_INT 30
3665: PUSH
3666: LD_INT 31
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: PUSH
3673: LD_INT 30
3675: PUSH
3676: LD_INT 32
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PPUSH
3692: CALL_OW 69
3696: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3697: LD_ADDR_VAR 0 8
3701: PUSH
3702: LD_INT 22
3704: PUSH
3705: LD_INT 3
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PUSH
3712: LD_INT 30
3714: PUSH
3715: LD_INT 4
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: PPUSH
3726: CALL_OW 69
3730: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3731: LD_ADDR_VAR 0 10
3735: PUSH
3736: LD_INT 22
3738: PUSH
3739: LD_INT 3
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: PUSH
3746: LD_INT 30
3748: PUSH
3749: LD_INT 3
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PPUSH
3760: CALL_OW 69
3764: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3765: LD_ADDR_VAR 0 9
3769: PUSH
3770: LD_INT 22
3772: PUSH
3773: LD_INT 3
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: PUSH
3780: LD_INT 30
3782: PUSH
3783: LD_INT 6
3785: PUSH
3786: EMPTY
3787: LIST
3788: LIST
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PPUSH
3794: CALL_OW 69
3798: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3799: LD_ADDR_VAR 0 2
3803: PUSH
3804: LD_INT 22
3806: PUSH
3807: LD_INT 3
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: PUSH
3814: LD_INT 30
3816: PUSH
3817: LD_INT 1
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: PPUSH
3828: CALL_OW 69
3832: PUSH
3833: FOR_IN
3834: IFFALSE 3878
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3836: LD_VAR 0 2
3840: PPUSH
3841: CALL_OW 274
3845: PPUSH
3846: LD_INT 1
3848: PPUSH
3849: LD_INT 1000
3851: PPUSH
3852: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3856: LD_VAR 0 2
3860: PPUSH
3861: CALL_OW 274
3865: PPUSH
3866: LD_INT 2
3868: PPUSH
3869: LD_INT 300
3871: PPUSH
3872: CALL_OW 277
// end ;
3876: GO 3833
3878: POP
3879: POP
// uc_side := 3 ;
3880: LD_ADDR_OWVAR 20
3884: PUSH
3885: LD_INT 3
3887: ST_TO_ADDR
// uc_nation := 3 ;
3888: LD_ADDR_OWVAR 21
3892: PUSH
3893: LD_INT 3
3895: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3896: LD_ADDR_VAR 0 11
3900: PUSH
3901: LD_INT 2
3903: PUSH
3904: LD_INT 3
3906: PUSH
3907: LD_INT 4
3909: PUSH
3910: LD_INT 4
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: PUSH
3919: LD_OWVAR 67
3923: ARRAY
3924: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3925: LD_ADDR_EXP 52
3929: PUSH
3930: LD_STRING Pokryshkin
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: LD_STRING 
3938: PPUSH
3939: CALL 41051 0 3
3943: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3944: LD_EXP 52
3948: PPUSH
3949: LD_INT 63
3951: PPUSH
3952: LD_INT 21
3954: PPUSH
3955: LD_INT 0
3957: PPUSH
3958: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3962: LD_EXP 52
3966: PPUSH
3967: CALL_OW 140
// InitHc ;
3971: CALL_OW 19
// for i in fac do
3975: LD_ADDR_VAR 0 2
3979: PUSH
3980: LD_VAR 0 10
3984: PUSH
3985: FOR_IN
3986: IFFALSE 4039
// begin for j = 1 to 6 do
3988: LD_ADDR_VAR 0 3
3992: PUSH
3993: DOUBLE
3994: LD_INT 1
3996: DEC
3997: ST_TO_ADDR
3998: LD_INT 6
4000: PUSH
4001: FOR_TO
4002: IFFALSE 4035
// begin PrepareHuman ( false , 3 , skill ) ;
4004: LD_INT 0
4006: PPUSH
4007: LD_INT 3
4009: PPUSH
4010: LD_VAR 0 11
4014: PPUSH
4015: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4019: CALL_OW 44
4023: PPUSH
4024: LD_VAR 0 2
4028: PPUSH
4029: CALL_OW 52
// end ;
4033: GO 4001
4035: POP
4036: POP
// end ;
4037: GO 3985
4039: POP
4040: POP
// for i in lab do
4041: LD_ADDR_VAR 0 2
4045: PUSH
4046: LD_VAR 0 9
4050: PUSH
4051: FOR_IN
4052: IFFALSE 4085
// begin PrepareHuman ( false , 4 , skill ) ;
4054: LD_INT 0
4056: PPUSH
4057: LD_INT 4
4059: PPUSH
4060: LD_VAR 0 11
4064: PPUSH
4065: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4069: CALL_OW 44
4073: PPUSH
4074: LD_VAR 0 2
4078: PPUSH
4079: CALL_OW 52
// end ;
4083: GO 4051
4085: POP
4086: POP
// for i in tw do
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: LD_VAR 0 7
4096: PUSH
4097: FOR_IN
4098: IFFALSE 4147
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
4100: LD_VAR 0 2
4104: PPUSH
4105: LD_INT 42
4107: PUSH
4108: LD_INT 43
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PUSH
4115: LD_INT 1
4117: PPUSH
4118: LD_INT 2
4120: PPUSH
4121: CALL_OW 12
4125: ARRAY
4126: PPUSH
4127: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
4131: LD_VAR 0 11
4135: PPUSH
4136: LD_VAR 0 2
4140: PPUSH
4141: CALL 775 0 2
// end ;
4145: GO 4097
4147: POP
4148: POP
// for i in bar do
4149: LD_ADDR_VAR 0 2
4153: PUSH
4154: LD_VAR 0 8
4158: PUSH
4159: FOR_IN
4160: IFFALSE 4193
// begin PrepareHuman ( false , 1 , skill ) ;
4162: LD_INT 0
4164: PPUSH
4165: LD_INT 1
4167: PPUSH
4168: LD_VAR 0 11
4172: PPUSH
4173: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4177: CALL_OW 44
4181: PPUSH
4182: LD_VAR 0 2
4186: PPUSH
4187: CALL_OW 52
// end ;
4191: GO 4159
4193: POP
4194: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
4195: LD_ADDR_VAR 0 13
4199: PUSH
4200: LD_INT 100
4202: PUSH
4203: LD_INT 9
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PUSH
4210: LD_INT 135
4212: PUSH
4213: LD_INT 60
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: LD_INT 41
4222: PUSH
4223: LD_INT 6
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: LD_INT 22
4232: PUSH
4233: LD_INT 9
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_INT 84
4242: PUSH
4243: LD_INT 14
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: ST_TO_ADDR
// vehicles := [ ] ;
4257: LD_ADDR_VAR 0 12
4261: PUSH
4262: EMPTY
4263: ST_TO_ADDR
// for i in spot_xy do
4264: LD_ADDR_VAR 0 2
4268: PUSH
4269: LD_VAR 0 13
4273: PUSH
4274: FOR_IN
4275: IFFALSE 4433
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
4277: LD_ADDR_VAR 0 6
4281: PUSH
4282: LD_INT 3
4284: PPUSH
4285: LD_INT 3
4287: PPUSH
4288: LD_INT 22
4290: PPUSH
4291: LD_INT 1
4293: PPUSH
4294: LD_INT 1
4296: PPUSH
4297: LD_INT 42
4299: PUSH
4300: LD_INT 43
4302: PUSH
4303: LD_INT 44
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 1
4313: PPUSH
4314: LD_INT 3
4316: PPUSH
4317: CALL_OW 12
4321: ARRAY
4322: PPUSH
4323: LD_INT 100
4325: PPUSH
4326: CALL 497 0 7
4330: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
4331: LD_ADDR_VAR 0 12
4335: PUSH
4336: LD_VAR 0 12
4340: PPUSH
4341: LD_VAR 0 12
4345: PUSH
4346: LD_INT 1
4348: PLUS
4349: PPUSH
4350: LD_VAR 0 6
4354: PPUSH
4355: CALL_OW 2
4359: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4360: LD_VAR 0 6
4364: PPUSH
4365: LD_INT 3
4367: PPUSH
4368: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
4372: LD_VAR 0 6
4376: PPUSH
4377: LD_VAR 0 2
4381: PUSH
4382: LD_INT 1
4384: ARRAY
4385: PPUSH
4386: LD_VAR 0 2
4390: PUSH
4391: LD_INT 2
4393: ARRAY
4394: PPUSH
4395: LD_INT 0
4397: PPUSH
4398: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
4402: LD_INT 0
4404: PPUSH
4405: LD_INT 3
4407: PPUSH
4408: LD_VAR 0 11
4412: PPUSH
4413: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4417: CALL_OW 44
4421: PPUSH
4422: LD_VAR 0 6
4426: PPUSH
4427: CALL_OW 52
// end ;
4431: GO 4274
4433: POP
4434: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
4435: LD_ADDR_VAR 0 2
4439: PUSH
4440: DOUBLE
4441: LD_INT 1
4443: DEC
4444: ST_TO_ADDR
4445: LD_INT 5
4447: PUSH
4448: LD_INT 7
4450: PUSH
4451: LD_INT 8
4453: PUSH
4454: LD_INT 9
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: LIST
4462: PUSH
4463: LD_OWVAR 67
4467: ARRAY
4468: PUSH
4469: FOR_TO
4470: IFFALSE 4530
// begin PrepareHuman ( false , 1 , skill ) ;
4472: LD_INT 0
4474: PPUSH
4475: LD_INT 1
4477: PPUSH
4478: LD_VAR 0 11
4482: PPUSH
4483: CALL_OW 380
// un := CreateHuman ;
4487: LD_ADDR_VAR 0 5
4491: PUSH
4492: CALL_OW 44
4496: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4497: LD_VAR 0 5
4501: PPUSH
4502: LD_INT 11
4504: PPUSH
4505: LD_INT 0
4507: PPUSH
4508: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4512: LD_ADDR_EXP 55
4516: PUSH
4517: LD_EXP 55
4521: PUSH
4522: LD_VAR 0 5
4526: ADD
4527: ST_TO_ADDR
// end ;
4528: GO 4469
4530: POP
4531: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4532: LD_ADDR_VAR 0 2
4536: PUSH
4537: DOUBLE
4538: LD_INT 1
4540: DEC
4541: ST_TO_ADDR
4542: LD_INT 2
4544: PUSH
4545: LD_INT 3
4547: PUSH
4548: LD_INT 4
4550: PUSH
4551: LD_INT 5
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: PUSH
4560: LD_OWVAR 67
4564: ARRAY
4565: PUSH
4566: FOR_TO
4567: IFFALSE 4627
// begin PrepareHuman ( false , 1 , skill ) ;
4569: LD_INT 0
4571: PPUSH
4572: LD_INT 1
4574: PPUSH
4575: LD_VAR 0 11
4579: PPUSH
4580: CALL_OW 380
// un := CreateHuman ;
4584: LD_ADDR_VAR 0 5
4588: PUSH
4589: CALL_OW 44
4593: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4594: LD_VAR 0 5
4598: PPUSH
4599: LD_INT 12
4601: PPUSH
4602: LD_INT 0
4604: PPUSH
4605: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4609: LD_ADDR_EXP 53
4613: PUSH
4614: LD_EXP 53
4618: PUSH
4619: LD_VAR 0 5
4623: ADD
4624: ST_TO_ADDR
// end ;
4625: GO 4566
4627: POP
4628: POP
// for i = 1 to 2 do
4629: LD_ADDR_VAR 0 2
4633: PUSH
4634: DOUBLE
4635: LD_INT 1
4637: DEC
4638: ST_TO_ADDR
4639: LD_INT 2
4641: PUSH
4642: FOR_TO
4643: IFFALSE 4736
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4645: LD_INT 1
4647: PPUSH
4648: LD_INT 1
4650: PPUSH
4651: LD_VAR 0 11
4655: PPUSH
4656: CALL_OW 380
// hc_attr := [ 8 + Difficulty , 8 + Difficulty ] ;
4660: LD_ADDR_OWVAR 29
4664: PUSH
4665: LD_INT 8
4667: PUSH
4668: LD_OWVAR 67
4672: PLUS
4673: PUSH
4674: LD_INT 8
4676: PUSH
4677: LD_OWVAR 67
4681: PLUS
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: ST_TO_ADDR
// un := CreateHuman ;
4687: LD_ADDR_VAR 0 5
4691: PUSH
4692: CALL_OW 44
4696: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4697: LD_VAR 0 5
4701: PPUSH
4702: LD_INT 39
4704: PPUSH
4705: LD_INT 12
4707: PPUSH
4708: LD_INT 3
4710: PPUSH
4711: LD_INT 0
4713: PPUSH
4714: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4718: LD_ADDR_EXP 54
4722: PUSH
4723: LD_EXP 54
4727: PUSH
4728: LD_VAR 0 5
4732: ADD
4733: ST_TO_ADDR
// end ;
4734: GO 4642
4736: POP
4737: POP
// InitHc ;
4738: CALL_OW 19
// for i = 1 to 3 do
4742: LD_ADDR_VAR 0 2
4746: PUSH
4747: DOUBLE
4748: LD_INT 1
4750: DEC
4751: ST_TO_ADDR
4752: LD_INT 3
4754: PUSH
4755: FOR_TO
4756: IFFALSE 4822
// begin PrepareHuman ( false , 1 , skill ) ;
4758: LD_INT 0
4760: PPUSH
4761: LD_INT 1
4763: PPUSH
4764: LD_VAR 0 11
4768: PPUSH
4769: CALL_OW 380
// un := CreateHuman ;
4773: LD_ADDR_VAR 0 5
4777: PUSH
4778: CALL_OW 44
4782: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4783: LD_VAR 0 5
4787: PPUSH
4788: LD_INT 180
4790: PPUSH
4791: LD_INT 11
4793: PPUSH
4794: LD_INT 4
4796: PPUSH
4797: LD_INT 0
4799: PPUSH
4800: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4804: LD_ADDR_EXP 58
4808: PUSH
4809: LD_EXP 58
4813: PUSH
4814: LD_VAR 0 5
4818: ADD
4819: ST_TO_ADDR
// end ;
4820: GO 4755
4822: POP
4823: POP
// ru_vehicles := vehicles ;
4824: LD_ADDR_EXP 56
4828: PUSH
4829: LD_VAR 0 12
4833: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4834: LD_ADDR_EXP 59
4838: PUSH
4839: LD_INT 131
4841: PUSH
4842: LD_INT 121
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 113
4851: PUSH
4852: LD_INT 90
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 93
4861: PUSH
4862: LD_INT 62
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 106
4876: PUSH
4877: LD_INT 54
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 120
4886: PUSH
4887: LD_INT 80
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: LD_INT 143
4896: PUSH
4897: LD_INT 120
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 154
4911: PUSH
4912: LD_INT 116
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: LD_INT 140
4921: PUSH
4922: LD_INT 93
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: PUSH
4929: LD_INT 130
4931: PUSH
4932: LD_INT 58
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: LD_INT 105
4946: PUSH
4947: LD_INT 106
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 134
4956: PUSH
4957: LD_INT 98
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: LD_INT 159
4966: PUSH
4967: LD_INT 113
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: LIST
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: ST_TO_ADDR
// if Difficulty = 1 then
4985: LD_OWVAR 67
4989: PUSH
4990: LD_INT 1
4992: EQUAL
4993: IFFALSE 4997
// exit ;
4995: GO 5052
// for i = 1 to Difficulty - 1 do
4997: LD_ADDR_VAR 0 2
5001: PUSH
5002: DOUBLE
5003: LD_INT 1
5005: DEC
5006: ST_TO_ADDR
5007: LD_OWVAR 67
5011: PUSH
5012: LD_INT 1
5014: MINUS
5015: PUSH
5016: FOR_TO
5017: IFFALSE 5050
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
5019: LD_ADDR_EXP 57
5023: PUSH
5024: LD_EXP 57
5028: PUSH
5029: LD_INT 22
5031: PUSH
5032: LD_INT 1
5034: PUSH
5035: LD_INT 1
5037: PUSH
5038: LD_INT 43
5040: PUSH
5041: EMPTY
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: ADD
5047: ST_TO_ADDR
5048: GO 5016
5050: POP
5051: POP
// end ;
5052: LD_VAR 0 1
5056: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
5057: LD_INT 22
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: LD_INT 21
5069: PUSH
5070: LD_INT 2
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PPUSH
5081: CALL_OW 69
5085: IFFALSE 5179
5087: GO 5089
5089: DISABLE
5090: LD_INT 0
5092: PPUSH
5093: PPUSH
// begin enable ;
5094: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
5095: LD_ADDR_VAR 0 2
5099: PUSH
5100: LD_INT 22
5102: PUSH
5103: LD_INT 3
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 21
5112: PUSH
5113: LD_INT 2
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: PPUSH
5124: CALL_OW 69
5128: ST_TO_ADDR
// if filter then
5129: LD_VAR 0 2
5133: IFFALSE 5179
// for i in filter do
5135: LD_ADDR_VAR 0 1
5139: PUSH
5140: LD_VAR 0 2
5144: PUSH
5145: FOR_IN
5146: IFFALSE 5177
// if GetFuel ( i ) < 20 then
5148: LD_VAR 0 1
5152: PPUSH
5153: CALL_OW 261
5157: PUSH
5158: LD_INT 20
5160: LESS
5161: IFFALSE 5175
// SetFuel ( i , 20 ) ;
5163: LD_VAR 0 1
5167: PPUSH
5168: LD_INT 20
5170: PPUSH
5171: CALL_OW 240
5175: GO 5145
5177: POP
5178: POP
// end ;
5179: PPOPN 2
5181: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
5182: LD_EXP 57
5186: IFFALSE 5405
5188: GO 5190
5190: DISABLE
5191: LD_INT 0
5193: PPUSH
5194: PPUSH
5195: PPUSH
// begin enable ;
5196: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
5197: LD_ADDR_VAR 0 2
5201: PUSH
5202: LD_INT 22
5204: PUSH
5205: LD_INT 3
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PUSH
5212: LD_INT 30
5214: PUSH
5215: LD_INT 3
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PPUSH
5226: CALL_OW 69
5230: ST_TO_ADDR
// can_produce := [ ] ;
5231: LD_ADDR_VAR 0 3
5235: PUSH
5236: EMPTY
5237: ST_TO_ADDR
// if not fac then
5238: LD_VAR 0 2
5242: NOT
5243: IFFALSE 5248
// begin disable ;
5245: DISABLE
// exit ;
5246: GO 5405
// end ; for i in fac do
5248: LD_ADDR_VAR 0 1
5252: PUSH
5253: LD_VAR 0 2
5257: PUSH
5258: FOR_IN
5259: IFFALSE 5297
// if UnitsInside ( i ) then
5261: LD_VAR 0 1
5265: PPUSH
5266: CALL_OW 313
5270: IFFALSE 5295
// can_produce := Insert ( can_produce , 1 , i ) ;
5272: LD_ADDR_VAR 0 3
5276: PUSH
5277: LD_VAR 0 3
5281: PPUSH
5282: LD_INT 1
5284: PPUSH
5285: LD_VAR 0 1
5289: PPUSH
5290: CALL_OW 2
5294: ST_TO_ADDR
5295: GO 5258
5297: POP
5298: POP
// if not can_produce then
5299: LD_VAR 0 3
5303: NOT
5304: IFFALSE 5308
// exit ;
5306: GO 5405
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
5308: LD_VAR 0 3
5312: PUSH
5313: LD_INT 1
5315: PPUSH
5316: LD_VAR 0 3
5320: PPUSH
5321: CALL_OW 12
5325: ARRAY
5326: PPUSH
5327: LD_EXP 57
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: PPUSH
5336: LD_EXP 57
5340: PUSH
5341: LD_INT 2
5343: ARRAY
5344: PPUSH
5345: LD_EXP 57
5349: PUSH
5350: LD_INT 3
5352: ARRAY
5353: PPUSH
5354: LD_EXP 57
5358: PUSH
5359: LD_INT 4
5361: ARRAY
5362: PPUSH
5363: CALL_OW 125
// for i = 1 to 4 do
5367: LD_ADDR_VAR 0 1
5371: PUSH
5372: DOUBLE
5373: LD_INT 1
5375: DEC
5376: ST_TO_ADDR
5377: LD_INT 4
5379: PUSH
5380: FOR_TO
5381: IFFALSE 5403
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
5383: LD_ADDR_EXP 57
5387: PUSH
5388: LD_EXP 57
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: CALL_OW 3
5400: ST_TO_ADDR
5401: GO 5380
5403: POP
5404: POP
// end ;
5405: PPOPN 3
5407: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
5408: LD_INT 0
5410: PPUSH
5411: PPUSH
5412: PPUSH
// for i = 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
5413: LD_ADDR_VAR 0 2
5417: PUSH
5418: DOUBLE
5419: LD_INT 1
5421: DEC
5422: ST_TO_ADDR
5423: LD_INT 2
5425: PUSH
5426: LD_INT 3
5428: PUSH
5429: LD_INT 3
5431: PUSH
5432: LD_INT 3
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: PUSH
5441: LD_OWVAR 67
5445: ARRAY
5446: PUSH
5447: FOR_TO
5448: IFFALSE 5597
// begin PrepareHuman ( false , 3 , 3 ) ;
5450: LD_INT 0
5452: PPUSH
5453: LD_INT 3
5455: PPUSH
5456: LD_INT 3
5458: PPUSH
5459: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
5463: LD_ADDR_VAR 0 3
5467: PUSH
5468: LD_INT 3
5470: PPUSH
5471: LD_INT 3
5473: PPUSH
5474: LD_INT 22
5476: PPUSH
5477: LD_INT 1
5479: PPUSH
5480: LD_INT 1
5482: PPUSH
5483: LD_INT 43
5485: PUSH
5486: LD_INT 42
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PUSH
5493: LD_INT 1
5495: PPUSH
5496: LD_INT 2
5498: PPUSH
5499: CALL_OW 12
5503: ARRAY
5504: PPUSH
5505: LD_INT 70
5507: PPUSH
5508: CALL 497 0 7
5512: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5513: LD_VAR 0 3
5517: PPUSH
5518: LD_INT 4
5520: PPUSH
5521: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5525: LD_VAR 0 3
5529: PPUSH
5530: LD_INT 229
5532: PPUSH
5533: LD_INT 44
5535: PPUSH
5536: LD_INT 0
5538: PPUSH
5539: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5543: CALL_OW 44
5547: PPUSH
5548: LD_VAR 0 3
5552: PPUSH
5553: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5557: LD_ADDR_EXP 56
5561: PUSH
5562: LD_EXP 56
5566: PUSH
5567: LD_VAR 0 3
5571: ADD
5572: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5573: LD_VAR 0 3
5577: PPUSH
5578: LD_INT 191
5580: PPUSH
5581: LD_INT 32
5583: PPUSH
5584: CALL_OW 111
// Wait ( 0 0$02 ) ;
5588: LD_INT 70
5590: PPUSH
5591: CALL_OW 67
// end ;
5595: GO 5447
5597: POP
5598: POP
// end ;
5599: LD_VAR 0 1
5603: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5604: LD_EXP 31
5608: IFFALSE 5616
5610: PUSH
5611: LD_EXP 56
5615: AND
5616: IFFALSE 5790
5618: GO 5620
5620: DISABLE
5621: LD_INT 0
5623: PPUSH
5624: PPUSH
5625: PPUSH
// begin wait ( 0 0$50 ) ;
5626: LD_INT 1750
5628: PPUSH
5629: CALL_OW 67
// tmp := ru_vehicles ;
5633: LD_ADDR_VAR 0 3
5637: PUSH
5638: LD_EXP 56
5642: ST_TO_ADDR
// if not tmp then
5643: LD_VAR 0 3
5647: NOT
5648: IFFALSE 5652
// exit ;
5650: GO 5790
// repeat wait ( 0 0$1 ) ;
5652: LD_INT 35
5654: PPUSH
5655: CALL_OW 67
// for i in tmp do
5659: LD_ADDR_VAR 0 1
5663: PUSH
5664: LD_VAR 0 3
5668: PUSH
5669: FOR_IN
5670: IFFALSE 5781
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5672: LD_ADDR_VAR 0 2
5676: PUSH
5677: LD_INT 22
5679: PUSH
5680: LD_INT 1
5682: PUSH
5683: EMPTY
5684: LIST
5685: LIST
5686: PPUSH
5687: LD_VAR 0 1
5691: PPUSH
5692: CALL_OW 74
5696: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5697: LD_VAR 0 1
5701: PPUSH
5702: LD_VAR 0 2
5706: PPUSH
5707: CALL_OW 296
5711: PUSH
5712: LD_INT 10
5714: GREATER
5715: IFFALSE 5734
// ComAgressiveMove ( i , 69 , 101 ) else
5717: LD_VAR 0 1
5721: PPUSH
5722: LD_INT 69
5724: PPUSH
5725: LD_INT 101
5727: PPUSH
5728: CALL_OW 114
5732: GO 5748
// ComAttackUnit ( i , enemy ) ;
5734: LD_VAR 0 1
5738: PPUSH
5739: LD_VAR 0 2
5743: PPUSH
5744: CALL_OW 115
// if GetLives ( i ) < 250 then
5748: LD_VAR 0 1
5752: PPUSH
5753: CALL_OW 256
5757: PUSH
5758: LD_INT 250
5760: LESS
5761: IFFALSE 5779
// tmp := tmp diff i ;
5763: LD_ADDR_VAR 0 3
5767: PUSH
5768: LD_VAR 0 3
5772: PUSH
5773: LD_VAR 0 1
5777: DIFF
5778: ST_TO_ADDR
// end ;
5779: GO 5669
5781: POP
5782: POP
// until not tmp ;
5783: LD_VAR 0 3
5787: NOT
5788: IFFALSE 5652
// end ; end_of_file
5790: PPOPN 3
5792: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5793: LD_INT 0
5795: PPUSH
5796: PPUSH
5797: PPUSH
5798: PPUSH
5799: PPUSH
5800: PPUSH
5801: PPUSH
// InGameOn ;
5802: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5806: LD_EXP 37
5810: PPUSH
5811: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5815: LD_EXP 37
5819: PPUSH
5820: LD_EXP 44
5824: PPUSH
5825: CALL_OW 119
// if Bierezov then
5829: LD_EXP 45
5833: IFFALSE 5849
// ComTurnUnit ( Bierezov , Cornel ) ;
5835: LD_EXP 45
5839: PPUSH
5840: LD_EXP 44
5844: PPUSH
5845: CALL_OW 119
// for i in jmm_units do
5849: LD_ADDR_VAR 0 2
5853: PUSH
5854: LD_EXP 4
5858: PUSH
5859: FOR_IN
5860: IFFALSE 5878
// ComTurnUnit ( i , Cornel ) ;
5862: LD_VAR 0 2
5866: PPUSH
5867: LD_EXP 44
5871: PPUSH
5872: CALL_OW 119
5876: GO 5859
5878: POP
5879: POP
// units := cornel_units union Cornel ;
5880: LD_ADDR_VAR 0 3
5884: PUSH
5885: LD_EXP 6
5889: PUSH
5890: LD_EXP 44
5894: UNION
5895: ST_TO_ADDR
// repeat wait ( 1 ) ;
5896: LD_INT 1
5898: PPUSH
5899: CALL_OW 67
// for i in units do
5903: LD_ADDR_VAR 0 2
5907: PUSH
5908: LD_VAR 0 3
5912: PUSH
5913: FOR_IN
5914: IFFALSE 5947
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5916: LD_VAR 0 2
5920: PPUSH
5921: LD_EXP 37
5925: PPUSH
5926: CALL_OW 250
5930: PPUSH
5931: LD_EXP 37
5935: PPUSH
5936: CALL_OW 251
5940: PPUSH
5941: CALL_OW 111
5945: GO 5913
5947: POP
5948: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5949: LD_VAR 0 3
5953: PPUSH
5954: LD_INT 92
5956: PUSH
5957: LD_EXP 37
5961: PPUSH
5962: CALL_OW 250
5966: PUSH
5967: LD_EXP 37
5971: PPUSH
5972: CALL_OW 251
5976: PUSH
5977: LD_INT 10
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: PPUSH
5986: CALL_OW 72
5990: PUSH
5991: LD_VAR 0 3
5995: EQUAL
5996: IFFALSE 5896
// for i in units do
5998: LD_ADDR_VAR 0 2
6002: PUSH
6003: LD_VAR 0 3
6007: PUSH
6008: FOR_IN
6009: IFFALSE 6027
// ComTurnUnit ( i , JMM ) ;
6011: LD_VAR 0 2
6015: PPUSH
6016: LD_EXP 37
6020: PPUSH
6021: CALL_OW 119
6025: GO 6008
6027: POP
6028: POP
// ComTurnUnit ( Cornel , JMM ) ;
6029: LD_EXP 44
6033: PPUSH
6034: LD_EXP 37
6038: PPUSH
6039: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
6043: LD_EXP 37
6047: PPUSH
6048: LD_STRING D1-JMM-1
6050: PPUSH
6051: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
6055: LD_EXP 44
6059: PPUSH
6060: LD_STRING D1-Corn-1
6062: PPUSH
6063: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
6067: LD_EXP 37
6071: PPUSH
6072: LD_EXP 44
6076: PPUSH
6077: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
6081: LD_EXP 44
6085: PPUSH
6086: LD_EXP 37
6090: PPUSH
6091: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
6095: LD_INT 35
6097: PPUSH
6098: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
6102: LD_EXP 37
6106: PPUSH
6107: LD_EXP 44
6111: PPUSH
6112: CALL_OW 296
6116: PUSH
6117: LD_INT 6
6119: LESS
6120: IFFALSE 6095
// ChangeSideFog ( 4 , 1 ) ;
6122: LD_INT 4
6124: PPUSH
6125: LD_INT 1
6127: PPUSH
6128: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
6132: LD_EXP 37
6136: PPUSH
6137: LD_EXP 44
6141: PPUSH
6142: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6146: LD_EXP 44
6150: PPUSH
6151: LD_EXP 37
6155: PPUSH
6156: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
6160: LD_EXP 37
6164: PPUSH
6165: LD_STRING D1-JMM-2
6167: PPUSH
6168: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
6172: LD_EXP 37
6176: PPUSH
6177: LD_STRING D1-JMM-2a
6179: PPUSH
6180: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
6184: LD_EXP 44
6188: PPUSH
6189: LD_STRING D1-Corn-2
6191: PPUSH
6192: CALL_OW 88
// if bierezov_exist or debug then
6196: LD_EXP 7
6200: IFTRUE 6208
6202: PUSH
6203: LD_EXP 1
6207: OR
6208: IFFALSE 6449
// begin ComTurnUnit ( Cornel , Bierezov ) ;
6210: LD_EXP 44
6214: PPUSH
6215: LD_EXP 45
6219: PPUSH
6220: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
6224: LD_INT 10
6226: PPUSH
6227: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
6231: LD_EXP 44
6235: PPUSH
6236: LD_STRING D1a-Corn-1
6238: PPUSH
6239: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
6243: LD_EXP 37
6247: PPUSH
6248: LD_EXP 45
6252: PPUSH
6253: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
6257: LD_EXP 45
6261: PPUSH
6262: LD_EXP 37
6266: PPUSH
6267: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
6271: LD_EXP 37
6275: PPUSH
6276: LD_STRING D1a-JMM-1
6278: PPUSH
6279: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
6283: LD_EXP 37
6287: PPUSH
6288: LD_EXP 44
6292: PPUSH
6293: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6297: LD_EXP 44
6301: PPUSH
6302: LD_EXP 37
6306: PPUSH
6307: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
6311: LD_EXP 44
6315: PPUSH
6316: LD_STRING D1a-Corn-2
6318: PPUSH
6319: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
6323: LD_EXP 37
6327: PPUSH
6328: LD_STRING D1a-JMM-2
6330: PPUSH
6331: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
6335: LD_EXP 44
6339: PPUSH
6340: LD_STRING D1a-Corn-3
6342: PPUSH
6343: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
6347: LD_EXP 37
6351: PPUSH
6352: LD_STRING D1a-JMM-3
6354: PPUSH
6355: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
6359: LD_EXP 44
6363: PPUSH
6364: LD_STRING D1a-Corn-4
6366: PPUSH
6367: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
6371: LD_EXP 37
6375: PPUSH
6376: LD_STRING D1a-JMM-4
6378: PPUSH
6379: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
6383: LD_EXP 44
6387: PPUSH
6388: LD_STRING D1a-Corn-5
6390: PPUSH
6391: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
6395: LD_EXP 45
6399: PPUSH
6400: LD_EXP 44
6404: PPUSH
6405: CALL_OW 250
6409: PPUSH
6410: LD_EXP 44
6414: PPUSH
6415: CALL_OW 251
6419: PUSH
6420: LD_INT 2
6422: MINUS
6423: PPUSH
6424: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
6428: LD_EXP 45
6432: PPUSH
6433: LD_EXP 44
6437: PPUSH
6438: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
6442: LD_INT 10
6444: PPUSH
6445: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
6449: LD_EXP 37
6453: PPUSH
6454: LD_STRING D1b-JMM-1
6456: PPUSH
6457: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
6461: LD_EXP 44
6465: PPUSH
6466: LD_STRING D1b-Corn-1
6468: PPUSH
6469: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6473: LD_EXP 37
6477: PPUSH
6478: LD_STRING D1b-JMM-2
6480: PPUSH
6481: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6485: LD_EXP 44
6489: PPUSH
6490: LD_STRING D1b-Corn-2
6492: PPUSH
6493: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6497: LD_EXP 37
6501: PPUSH
6502: LD_STRING D1b-JMM-3
6504: PPUSH
6505: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6509: LD_INT 10
6511: PPUSH
6512: CALL_OW 67
// SayRadioNoFace ( Powell , D1b-Pow-3 ) ;
6516: LD_EXP 46
6520: PPUSH
6521: LD_STRING D1b-Pow-3
6523: PPUSH
6524: CALL_OW 586
// Say ( JMM , D1b-JMM-4 ) ;
6528: LD_EXP 37
6532: PPUSH
6533: LD_STRING D1b-JMM-4
6535: PPUSH
6536: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6540: LD_EXP 44
6544: PPUSH
6545: LD_STRING D1b-Corn-4
6547: PPUSH
6548: CALL_OW 88
// if Khatam then
6552: LD_EXP 41
6556: IFFALSE 6572
// Say ( Khatam , D1b-Khat-4 ) else
6558: LD_EXP 41
6562: PPUSH
6563: LD_STRING D1b-Khat-4
6565: PPUSH
6566: CALL_OW 88
6570: GO 6608
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6572: LD_EXP 6
6576: PPUSH
6577: LD_INT 26
6579: PUSH
6580: LD_INT 1
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PPUSH
6587: CALL_OW 72
6591: PUSH
6592: LD_EXP 44
6596: PUSH
6597: EMPTY
6598: LIST
6599: DIFF
6600: PPUSH
6601: LD_STRING D1b-Sol1-4
6603: PPUSH
6604: CALL 585 0 2
// if Cyrus then
6608: LD_EXP 39
6612: IFFALSE 6626
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6614: LD_EXP 39
6618: PPUSH
6619: LD_STRING D1b-Cyrus-4
6621: PPUSH
6622: CALL_OW 88
// if Lisa then
6626: LD_EXP 40
6630: IFFALSE 6688
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6632: LD_EXP 40
6636: PPUSH
6637: LD_STRING D1b-Lisa-4
6639: PPUSH
6640: CALL_OW 88
// if Cyrus then
6644: LD_EXP 39
6648: IFFALSE 6688
// begin if not IsInUnit ( Cyrus ) then
6650: LD_EXP 39
6654: PPUSH
6655: CALL_OW 310
6659: NOT
6660: IFFALSE 6676
// ComTurnUnit ( Cyrus , Lisa ) ;
6662: LD_EXP 39
6666: PPUSH
6667: LD_EXP 40
6671: PPUSH
6672: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6676: LD_EXP 39
6680: PPUSH
6681: LD_STRING D1b-Cyrus-5
6683: PPUSH
6684: CALL_OW 88
// end ; end ; SelectGroup ;
6688: CALL 3058 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6692: LD_EXP 37
6696: PPUSH
6697: LD_STRING D1d-JMM-1
6699: PPUSH
6700: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6704: LD_EXP 44
6708: PPUSH
6709: LD_STRING D1d-Corn-1
6711: PPUSH
6712: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6716: LD_ADDR_VAR 0 2
6720: PUSH
6721: LD_EXP 4
6725: PUSH
6726: LD_EXP 6
6730: ADD
6731: PUSH
6732: LD_EXP 37
6736: ADD
6737: PUSH
6738: FOR_IN
6739: IFFALSE 6752
// ComHold ( i ) ;
6741: LD_VAR 0 2
6745: PPUSH
6746: CALL_OW 140
6750: GO 6738
6752: POP
6753: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6754: LD_ADDR_VAR 0 4
6758: PUSH
6759: LD_INT 22
6761: PUSH
6762: LD_INT 1
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: LD_INT 21
6771: PUSH
6772: LD_INT 2
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: PPUSH
6783: CALL_OW 69
6787: ST_TO_ADDR
// if vehicles then
6788: LD_VAR 0 4
6792: IFFALSE 7132
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6794: LD_EXP 6
6798: PPUSH
6799: LD_INT 55
6801: PUSH
6802: EMPTY
6803: LIST
6804: PPUSH
6805: CALL_OW 72
6809: IFFALSE 6848
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6811: LD_ADDR_VAR 0 2
6815: PUSH
6816: LD_EXP 6
6820: PPUSH
6821: LD_INT 55
6823: PUSH
6824: EMPTY
6825: LIST
6826: PPUSH
6827: CALL_OW 72
6831: PUSH
6832: FOR_IN
6833: IFFALSE 6846
// ComExitVehicle ( i ) ;
6835: LD_VAR 0 2
6839: PPUSH
6840: CALL_OW 121
6844: GO 6832
6846: POP
6847: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6848: LD_ADDR_VAR 0 5
6852: PUSH
6853: LD_VAR 0 4
6857: PPUSH
6858: LD_INT 34
6860: PUSH
6861: LD_INT 51
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PPUSH
6868: CALL_OW 72
6872: ST_TO_ADDR
// if cargos then
6873: LD_VAR 0 5
6877: IFFALSE 7062
// begin vehicles := cargos ;
6879: LD_ADDR_VAR 0 4
6883: PUSH
6884: LD_VAR 0 5
6888: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6889: LD_ADDR_VAR 0 6
6893: PUSH
6894: LD_STRING 02_resources_4
6896: PPUSH
6897: LD_INT 0
6899: PPUSH
6900: CALL_OW 30
6904: ST_TO_ADDR
// if debug and not resources then
6905: LD_EXP 1
6909: IFFALSE 6918
6911: PUSH
6912: LD_VAR 0 6
6916: NOT
6917: AND
6918: IFFALSE 6928
// resources := 160 ;
6920: LD_ADDR_VAR 0 6
6924: PUSH
6925: LD_INT 160
6927: ST_TO_ADDR
// if resources mod 10 then
6928: LD_VAR 0 6
6932: PUSH
6933: LD_INT 10
6935: MOD
6936: IFFALSE 6958
// resources := resources - resources mod 10 ;
6938: LD_ADDR_VAR 0 6
6942: PUSH
6943: LD_VAR 0 6
6947: PUSH
6948: LD_VAR 0 6
6952: PUSH
6953: LD_INT 10
6955: MOD
6956: MINUS
6957: ST_TO_ADDR
// if resources then
6958: LD_VAR 0 6
6962: IFFALSE 7062
// for i in cargos do
6964: LD_ADDR_VAR 0 2
6968: PUSH
6969: LD_VAR 0 5
6973: PUSH
6974: FOR_IN
6975: IFFALSE 7060
// begin if resources < 100 then
6977: LD_VAR 0 6
6981: PUSH
6982: LD_INT 100
6984: LESS
6985: IFFALSE 7007
// begin cargo := resources ;
6987: LD_ADDR_VAR 0 7
6991: PUSH
6992: LD_VAR 0 6
6996: ST_TO_ADDR
// resources := 0 ;
6997: LD_ADDR_VAR 0 6
7001: PUSH
7002: LD_INT 0
7004: ST_TO_ADDR
// end else
7005: GO 7029
// begin cargo := 100 ;
7007: LD_ADDR_VAR 0 7
7011: PUSH
7012: LD_INT 100
7014: ST_TO_ADDR
// resources := resources - 100 ;
7015: LD_ADDR_VAR 0 6
7019: PUSH
7020: LD_VAR 0 6
7024: PUSH
7025: LD_INT 100
7027: MINUS
7028: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_INT 1
7036: PPUSH
7037: LD_VAR 0 7
7041: PPUSH
7042: CALL_OW 290
// if resources = 0 then
7046: LD_VAR 0 6
7050: PUSH
7051: LD_INT 0
7053: EQUAL
7054: IFFALSE 7058
// break ;
7056: GO 7060
// end ;
7058: GO 6974
7060: POP
7061: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
7062: LD_VAR 0 4
7066: PUSH
7067: LD_INT 1
7069: ARRAY
7070: PPUSH
7071: CALL_OW 311
7075: PPUSH
7076: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
7080: LD_VAR 0 4
7084: PUSH
7085: LD_INT 1
7087: ARRAY
7088: PPUSH
7089: LD_INT 4
7091: PPUSH
7092: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
7096: LD_EXP 44
7100: PPUSH
7101: LD_VAR 0 4
7105: PUSH
7106: LD_INT 1
7108: ARRAY
7109: PPUSH
7110: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
7114: LD_INT 35
7116: PPUSH
7117: CALL_OW 67
// until IsInUnit ( Cornel ) ;
7121: LD_EXP 44
7125: PPUSH
7126: CALL_OW 310
7130: IFFALSE 7114
// end ; InGameOff ;
7132: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
7136: LD_STRING M1
7138: PPUSH
7139: CALL_OW 337
// SaveForQuickRestart ;
7143: CALL_OW 22
// cornel_active := true ;
7147: LD_ADDR_EXP 8
7151: PUSH
7152: LD_INT 1
7154: ST_TO_ADDR
// end ;
7155: LD_VAR 0 1
7159: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
7160: LD_EXP 37
7164: PPUSH
7165: LD_EXP 47
7169: PPUSH
7170: CALL_OW 296
7174: PUSH
7175: LD_INT 10
7177: LESS
7178: IFFALSE 8567
7180: GO 7182
7182: DISABLE
7183: LD_INT 0
7185: PPUSH
7186: PPUSH
7187: PPUSH
7188: PPUSH
7189: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
7190: LD_ADDR_VAR 0 2
7194: PUSH
7195: LD_INT 89
7197: PUSH
7198: LD_INT 34
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 138
7207: PUSH
7208: LD_INT 63
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 196
7217: PUSH
7218: LD_INT 84
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 135
7227: PUSH
7228: LD_INT 52
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 103
7237: PUSH
7238: LD_INT 39
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 58
7247: PUSH
7248: LD_INT 30
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 38
7257: PUSH
7258: LD_INT 51
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: ST_TO_ADDR
// Video ( true ) ;
7274: LD_INT 1
7276: PPUSH
7277: CALL 79155 0 1
// if jmm_units then
7281: LD_EXP 4
7285: IFFALSE 7363
// for i in jmm_units do
7287: LD_ADDR_VAR 0 1
7291: PUSH
7292: LD_EXP 4
7296: PUSH
7297: FOR_IN
7298: IFFALSE 7361
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
7300: LD_VAR 0 1
7304: PPUSH
7305: LD_EXP 37
7309: PPUSH
7310: CALL_OW 296
7314: PUSH
7315: LD_INT 10
7317: LESS
7318: IFFALSE 7332
7320: PUSH
7321: LD_VAR 0 1
7325: PPUSH
7326: CALL_OW 310
7330: NOT
7331: AND
7332: IFFALSE 7350
// ComTurnUnit ( i , JMM ) else
7334: LD_VAR 0 1
7338: PPUSH
7339: LD_EXP 37
7343: PPUSH
7344: CALL_OW 119
7348: GO 7359
// ComHold ( i ) ;
7350: LD_VAR 0 1
7354: PPUSH
7355: CALL_OW 140
// end ;
7359: GO 7297
7361: POP
7362: POP
// if IsInUnit ( JMM ) then
7363: LD_EXP 37
7367: PPUSH
7368: CALL_OW 310
7372: IFFALSE 7397
// begin ComExitVehicle ( JMM ) ;
7374: LD_EXP 37
7378: PPUSH
7379: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
7383: LD_EXP 37
7387: PPUSH
7388: LD_EXP 47
7392: PPUSH
7393: CALL_OW 172
// end ; Wait ( 10 ) ;
7397: LD_INT 10
7399: PPUSH
7400: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
7404: LD_EXP 37
7408: PPUSH
7409: LD_EXP 47
7413: PPUSH
7414: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
7418: LD_INT 35
7420: PPUSH
7421: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
7425: LD_EXP 37
7429: PPUSH
7430: LD_EXP 47
7434: PPUSH
7435: CALL_OW 296
7439: PUSH
7440: LD_INT 6
7442: LESS
7443: IFFALSE 7418
// ComTurnUnit ( JMM , Lynch ) ;
7445: LD_EXP 37
7449: PPUSH
7450: LD_EXP 47
7454: PPUSH
7455: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
7459: LD_ADDR_VAR 0 1
7463: PUSH
7464: LD_EXP 47
7468: PUSH
7469: LD_EXP 48
7473: PUSH
7474: LD_EXP 49
7478: PUSH
7479: LD_EXP 50
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: PUSH
7490: FOR_IN
7491: IFFALSE 7509
// ComTurnUnit ( i , JMM ) ;
7493: LD_VAR 0 1
7497: PPUSH
7498: LD_EXP 37
7502: PPUSH
7503: CALL_OW 119
7507: GO 7490
7509: POP
7510: POP
// Wait ( 0 0$0.3 ) ;
7511: LD_INT 10
7513: PPUSH
7514: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7518: LD_EXP 37
7522: PPUSH
7523: LD_STRING D2-JMM-1
7525: PPUSH
7526: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7530: LD_EXP 47
7534: PPUSH
7535: LD_STRING D2-Sol1-1
7537: PPUSH
7538: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7542: LD_EXP 37
7546: PPUSH
7547: LD_STRING D2-JMM-2
7549: PPUSH
7550: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7554: LD_EXP 47
7558: PPUSH
7559: LD_STRING D2-Sol1-2
7561: PPUSH
7562: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7566: LD_EXP 37
7570: PPUSH
7571: LD_STRING D2-JMM-3
7573: PPUSH
7574: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7578: LD_EXP 47
7582: PPUSH
7583: LD_STRING D2-Sol1-3
7585: PPUSH
7586: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7590: LD_ADDR_VAR 0 1
7594: PUSH
7595: LD_INT 22
7597: PUSH
7598: LD_INT 8
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 69
7609: PUSH
7610: FOR_IN
7611: IFFALSE 7627
// SetSide ( i , 1 ) ;
7613: LD_VAR 0 1
7617: PPUSH
7618: LD_INT 1
7620: PPUSH
7621: CALL_OW 235
7625: GO 7610
7627: POP
7628: POP
// Say ( JMM , D2-JMM-4 ) ;
7629: LD_EXP 37
7633: PPUSH
7634: LD_STRING D2-JMM-4
7636: PPUSH
7637: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7641: LD_INT 1
7643: PPUSH
7644: LD_INT 5
7646: PPUSH
7647: CALL_OW 332
// for i = 1 to points do
7651: LD_ADDR_VAR 0 1
7655: PUSH
7656: DOUBLE
7657: LD_INT 1
7659: DEC
7660: ST_TO_ADDR
7661: LD_VAR 0 2
7665: PUSH
7666: FOR_TO
7667: IFFALSE 7842
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7669: LD_VAR 0 2
7673: PUSH
7674: LD_VAR 0 1
7678: ARRAY
7679: PUSH
7680: LD_INT 1
7682: ARRAY
7683: PPUSH
7684: LD_VAR 0 2
7688: PUSH
7689: LD_VAR 0 1
7693: ARRAY
7694: PUSH
7695: LD_INT 2
7697: ARRAY
7698: PPUSH
7699: CALL_OW 84
// if i = 1 then
7703: LD_VAR 0 1
7707: PUSH
7708: LD_INT 1
7710: EQUAL
7711: IFFALSE 7725
// Say ( Lynch , D2-Sol1-4 ) ;
7713: LD_EXP 47
7717: PPUSH
7718: LD_STRING D2-Sol1-4
7720: PPUSH
7721: CALL_OW 88
// if i = 2 then
7725: LD_VAR 0 1
7729: PUSH
7730: LD_INT 2
7732: EQUAL
7733: IFFALSE 7747
// Say ( JMM , D2-JMM-5 ) ;
7735: LD_EXP 37
7739: PPUSH
7740: LD_STRING D2-JMM-5
7742: PPUSH
7743: CALL_OW 88
// if i = 4 then
7747: LD_VAR 0 1
7751: PUSH
7752: LD_INT 4
7754: EQUAL
7755: IFFALSE 7779
// begin RevealFogArea ( 1 , troopsArea ) ;
7757: LD_INT 1
7759: PPUSH
7760: LD_INT 6
7762: PPUSH
7763: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7767: LD_EXP 47
7771: PPUSH
7772: LD_STRING D2-Sol1-5
7774: PPUSH
7775: CALL_OW 88
// end ; if i = 5 then
7779: LD_VAR 0 1
7783: PUSH
7784: LD_INT 5
7786: EQUAL
7787: IFFALSE 7801
// Say ( JMM , D2-JMM-6 ) ;
7789: LD_EXP 37
7793: PPUSH
7794: LD_STRING D2-JMM-6
7796: PPUSH
7797: CALL_OW 88
// if i = 7 then
7801: LD_VAR 0 1
7805: PUSH
7806: LD_INT 7
7808: EQUAL
7809: IFFALSE 7833
// begin RevealFogArea ( 1 , forestArea ) ;
7811: LD_INT 1
7813: PPUSH
7814: LD_INT 7
7816: PPUSH
7817: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7821: LD_EXP 47
7825: PPUSH
7826: LD_STRING D2-Sol1-6
7828: PPUSH
7829: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7833: LD_INT 46
7835: PPUSH
7836: CALL_OW 67
// end ;
7840: GO 7666
7842: POP
7843: POP
// CenterNowOnUnits ( JMM ) ;
7844: LD_EXP 37
7848: PPUSH
7849: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7853: LD_EXP 37
7857: PPUSH
7858: LD_STRING D2-JMM-7
7860: PPUSH
7861: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7865: LD_EXP 47
7869: PPUSH
7870: LD_STRING D2-Sol1-7
7872: PPUSH
7873: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7877: LD_EXP 37
7881: PPUSH
7882: LD_STRING D2-JMM-8
7884: PPUSH
7885: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7889: LD_ADDR_VAR 0 4
7893: PUSH
7894: LD_INT 22
7896: PUSH
7897: LD_INT 1
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 30
7906: PUSH
7907: LD_INT 31
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PPUSH
7918: CALL_OW 69
7922: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7923: LD_EXP 47
7927: PPUSH
7928: LD_VAR 0 4
7932: PUSH
7933: LD_INT 1
7935: ARRAY
7936: PPUSH
7937: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7941: LD_INT 65
7943: PPUSH
7944: LD_INT 101
7946: PPUSH
7947: CALL_OW 428
7951: IFFALSE 7974
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7953: LD_INT 65
7955: PPUSH
7956: LD_INT 101
7958: PPUSH
7959: CALL_OW 428
7963: PPUSH
7964: LD_INT 75
7966: PPUSH
7967: LD_INT 100
7969: PPUSH
7970: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7974: LD_INT 66
7976: PPUSH
7977: LD_INT 103
7979: PPUSH
7980: CALL_OW 428
7984: IFFALSE 8007
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7986: LD_INT 66
7988: PPUSH
7989: LD_INT 103
7991: PPUSH
7992: CALL_OW 428
7996: PPUSH
7997: LD_INT 75
7999: PPUSH
8000: LD_INT 100
8002: PPUSH
8003: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
8007: LD_ADDR_VAR 0 5
8011: PUSH
8012: LD_INT 22
8014: PUSH
8015: LD_INT 1
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: PUSH
8022: LD_INT 21
8024: PUSH
8025: LD_INT 2
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: PUSH
8032: LD_INT 91
8034: PUSH
8035: LD_EXP 37
8039: PUSH
8040: LD_INT 7
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: LIST
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: LIST
8052: PPUSH
8053: CALL_OW 69
8057: ST_TO_ADDR
// if tmp then
8058: LD_VAR 0 5
8062: IFFALSE 8079
// ComMoveXY ( tmp , 75 , 100 ) ;
8064: LD_VAR 0 5
8068: PPUSH
8069: LD_INT 75
8071: PPUSH
8072: LD_INT 100
8074: PPUSH
8075: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
8079: LD_ADDR_VAR 0 3
8083: PUSH
8084: LD_EXP 4
8088: PPUSH
8089: LD_INT 25
8091: PUSH
8092: LD_INT 1
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PPUSH
8099: CALL_OW 72
8103: PPUSH
8104: LD_EXP 37
8108: PPUSH
8109: CALL_OW 74
8113: ST_TO_ADDR
// if sol then
8114: LD_VAR 0 3
8118: IFFALSE 8178
// if GetDistUnits ( JMM , sol ) < 10 then
8120: LD_EXP 37
8124: PPUSH
8125: LD_VAR 0 3
8129: PPUSH
8130: CALL_OW 296
8134: PUSH
8135: LD_INT 10
8137: LESS
8138: IFFALSE 8178
// begin if IsInUnit ( sol ) then
8140: LD_VAR 0 3
8144: PPUSH
8145: CALL_OW 310
8149: IFFALSE 8160
// ComExitVehicle ( sol ) ;
8151: LD_VAR 0 3
8155: PPUSH
8156: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
8160: LD_VAR 0 3
8164: PPUSH
8165: LD_VAR 0 4
8169: PUSH
8170: LD_INT 2
8172: ARRAY
8173: PPUSH
8174: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
8178: LD_INT 10
8180: PPUSH
8181: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
8185: LD_EXP 37
8189: PPUSH
8190: LD_INT 65
8192: PPUSH
8193: LD_INT 101
8195: PPUSH
8196: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
8200: LD_EXP 37
8204: PPUSH
8205: LD_INT 63
8207: PPUSH
8208: LD_INT 100
8210: PPUSH
8211: CALL_OW 178
// tmp := 0 0$0 ;
8215: LD_ADDR_VAR 0 5
8219: PUSH
8220: LD_INT 0
8222: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8223: LD_INT 35
8225: PPUSH
8226: CALL_OW 67
// tmp := tmp + 0 0$1 ;
8230: LD_ADDR_VAR 0 5
8234: PUSH
8235: LD_VAR 0 5
8239: PUSH
8240: LD_INT 35
8242: PLUS
8243: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
8244: LD_EXP 37
8248: PPUSH
8249: LD_INT 65
8251: PPUSH
8252: LD_INT 101
8254: PPUSH
8255: CALL_OW 307
8259: IFTRUE 8271
8261: PUSH
8262: LD_VAR 0 5
8266: PUSH
8267: LD_INT 175
8269: GREATER
8270: OR
8271: IFFALSE 8223
// Say ( JMM , D2a-JMM-1 ) ;
8273: LD_EXP 37
8277: PPUSH
8278: LD_STRING D2a-JMM-1
8280: PPUSH
8281: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
8285: LD_EXP 48
8289: PPUSH
8290: LD_INT 66
8292: PPUSH
8293: LD_INT 103
8295: PPUSH
8296: CALL_OW 111
// tmp := 0 0$0 ;
8300: LD_ADDR_VAR 0 5
8304: PUSH
8305: LD_INT 0
8307: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8308: LD_INT 35
8310: PPUSH
8311: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
8315: LD_EXP 48
8319: PPUSH
8320: LD_INT 66
8322: PPUSH
8323: LD_INT 103
8325: PPUSH
8326: CALL_OW 307
8330: IFTRUE 8342
8332: PUSH
8333: LD_VAR 0 5
8337: PUSH
8338: LD_INT 175
8340: GREATER
8341: OR
8342: IFFALSE 8308
// ComTurnUnit ( Walker , JMM ) ;
8344: LD_EXP 48
8348: PPUSH
8349: LD_EXP 37
8353: PPUSH
8354: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
8358: LD_EXP 48
8362: PPUSH
8363: LD_STRING D2a-Sci1-1
8365: PPUSH
8366: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
8370: LD_EXP 37
8374: PPUSH
8375: LD_EXP 48
8379: PPUSH
8380: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
8384: LD_EXP 37
8388: PPUSH
8389: LD_STRING D2a-JMM-2
8391: PPUSH
8392: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
8396: LD_EXP 48
8400: PPUSH
8401: LD_STRING D2a-Sci1-2
8403: PPUSH
8404: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
8408: LD_EXP 37
8412: PPUSH
8413: LD_STRING D2a-JMM-3
8415: PPUSH
8416: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
8420: LD_EXP 48
8424: PPUSH
8425: LD_STRING D2a-Sci1-3
8427: PPUSH
8428: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
8432: LD_ADDR_EXP 4
8436: PUSH
8437: LD_EXP 4
8441: PUSH
8442: LD_EXP 47
8446: PUSH
8447: LD_EXP 48
8451: PUSH
8452: LD_EXP 49
8456: PUSH
8457: LD_EXP 50
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: ADD
8468: ST_TO_ADDR
// for i in jmm_units do
8469: LD_ADDR_VAR 0 1
8473: PUSH
8474: LD_EXP 4
8478: PUSH
8479: FOR_IN
8480: IFFALSE 8505
// if not IsInUnit ( i ) then
8482: LD_VAR 0 1
8486: PPUSH
8487: CALL_OW 310
8491: NOT
8492: IFFALSE 8503
// ComFree ( i ) ;
8494: LD_VAR 0 1
8498: PPUSH
8499: CALL_OW 139
8503: GO 8479
8505: POP
8506: POP
// Video ( false ) ;
8507: LD_INT 0
8509: PPUSH
8510: CALL 79155 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8514: LD_STRING MSolar1
8516: PPUSH
8517: CALL_OW 337
// jmm_on_west := true ;
8521: LD_ADDR_EXP 5
8525: PUSH
8526: LD_INT 1
8528: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8529: LD_INT 1050
8531: PPUSH
8532: CALL_OW 67
// frank_can_return := true ;
8536: LD_ADDR_EXP 12
8540: PUSH
8541: LD_INT 1
8543: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8544: LD_INT 6300
8546: PPUSH
8547: LD_INT 8400
8549: PPUSH
8550: CALL_OW 12
8554: PPUSH
8555: CALL_OW 67
// send_spec_patrol := true ;
8559: LD_ADDR_EXP 30
8563: PUSH
8564: LD_INT 1
8566: ST_TO_ADDR
// end ;
8567: PPOPN 5
8569: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8570: LD_INT 22
8572: PUSH
8573: LD_INT 1
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_INT 34
8582: PUSH
8583: LD_INT 51
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: LD_INT 92
8592: PUSH
8593: LD_INT 63
8595: PUSH
8596: LD_INT 100
8598: PUSH
8599: LD_INT 5
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: LIST
8612: PUSH
8613: EMPTY
8614: LIST
8615: PPUSH
8616: CALL_OW 69
8620: IFFALSE 8629
8622: PUSH
8623: LD_EXP 5
8627: NOT
8628: AND
8629: IFFALSE 8742
8631: GO 8633
8633: DISABLE
8634: LD_INT 0
8636: PPUSH
8637: PPUSH
// begin enable ;
8638: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8639: LD_ADDR_VAR 0 2
8643: PUSH
8644: LD_INT 22
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 34
8656: PUSH
8657: LD_INT 51
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 92
8666: PUSH
8667: LD_INT 63
8669: PUSH
8670: LD_INT 100
8672: PUSH
8673: LD_INT 5
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: LIST
8686: PUSH
8687: EMPTY
8688: LIST
8689: PPUSH
8690: CALL_OW 69
8694: ST_TO_ADDR
// if not filter then
8695: LD_VAR 0 2
8699: NOT
8700: IFFALSE 8704
// exit ;
8702: GO 8742
// for i in filter do
8704: LD_ADDR_VAR 0 1
8708: PUSH
8709: LD_VAR 0 2
8713: PUSH
8714: FOR_IN
8715: IFFALSE 8740
// begin SetFuel ( i , 0 ) ;
8717: LD_VAR 0 1
8721: PPUSH
8722: LD_INT 0
8724: PPUSH
8725: CALL_OW 240
// ComStop ( i ) ;
8729: LD_VAR 0 1
8733: PPUSH
8734: CALL_OW 141
// end ;
8738: GO 8714
8740: POP
8741: POP
// end ;
8742: PPOPN 2
8744: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8745: LD_EXP 30
8749: IFFALSE 9850
8751: GO 8753
8753: DISABLE
8754: LD_INT 0
8756: PPUSH
8757: PPUSH
8758: PPUSH
8759: PPUSH
8760: PPUSH
8761: PPUSH
8762: PPUSH
// begin if not ru_spec_patrol then
8763: LD_EXP 54
8767: NOT
8768: IFFALSE 8772
// exit ;
8770: GO 9850
// dead1 := false ;
8772: LD_ADDR_VAR 0 1
8776: PUSH
8777: LD_INT 0
8779: ST_TO_ADDR
// dead2 := false ;
8780: LD_ADDR_VAR 0 2
8784: PUSH
8785: LD_INT 0
8787: ST_TO_ADDR
// inarea1 := false ;
8788: LD_ADDR_VAR 0 3
8792: PUSH
8793: LD_INT 0
8795: ST_TO_ADDR
// inarea2 := false ;
8796: LD_ADDR_VAR 0 4
8800: PUSH
8801: LD_INT 0
8803: ST_TO_ADDR
// tmp := [ ] ;
8804: LD_ADDR_VAR 0 6
8808: PUSH
8809: EMPTY
8810: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8811: LD_EXP 54
8815: PPUSH
8816: LD_INT 75
8818: PPUSH
8819: LD_INT 101
8821: PPUSH
8822: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8826: LD_INT 35
8828: PPUSH
8829: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8833: LD_INT 1
8835: PPUSH
8836: LD_EXP 54
8840: PUSH
8841: LD_INT 1
8843: ARRAY
8844: PPUSH
8845: CALL_OW 292
8849: IFTRUE 8880
8851: PUSH
8852: LD_EXP 54
8856: PPUSH
8857: LD_INT 92
8859: PUSH
8860: LD_INT 75
8862: PUSH
8863: LD_INT 101
8865: PUSH
8866: LD_INT 4
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 72
8879: OR
8880: IFFALSE 8826
// ComStop ( ru_spec_patrol ) ;
8882: LD_EXP 54
8886: PPUSH
8887: CALL_OW 141
// Wait ( 0 0$02 ) ;
8891: LD_INT 70
8893: PPUSH
8894: CALL_OW 67
// DialogueOn ;
8898: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8902: LD_EXP 54
8906: PUSH
8907: LD_INT 1
8909: ARRAY
8910: PPUSH
8911: LD_STRING D8-Rus1-1
8913: PPUSH
8914: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8918: LD_EXP 37
8922: PPUSH
8923: LD_STRING D8-JMM-1
8925: PPUSH
8926: CALL_OW 88
// DialogueOff ;
8930: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8934: LD_EXP 54
8938: PPUSH
8939: LD_INT 13
8941: PPUSH
8942: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8946: LD_INT 35
8948: PPUSH
8949: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8953: LD_VAR 0 1
8957: NOT
8958: IFFALSE 8975
8960: PUSH
8961: LD_EXP 54
8965: PUSH
8966: LD_INT 1
8968: ARRAY
8969: PPUSH
8970: CALL_OW 301
8974: AND
8975: IFFALSE 8985
// dead1 := true ;
8977: LD_ADDR_VAR 0 1
8981: PUSH
8982: LD_INT 1
8984: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8985: LD_VAR 0 2
8989: NOT
8990: IFFALSE 9007
8992: PUSH
8993: LD_EXP 54
8997: PUSH
8998: LD_INT 2
9000: ARRAY
9001: PPUSH
9002: CALL_OW 301
9006: AND
9007: IFFALSE 9017
// dead2 := true ;
9009: LD_ADDR_VAR 0 2
9013: PUSH
9014: LD_INT 1
9016: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
9017: LD_VAR 0 3
9021: NOT
9022: IFFALSE 9042
9024: PUSH
9025: LD_EXP 54
9029: PUSH
9030: LD_INT 1
9032: ARRAY
9033: PPUSH
9034: LD_INT 14
9036: PPUSH
9037: CALL_OW 308
9041: AND
9042: IFFALSE 9052
// inarea1 := true ;
9044: LD_ADDR_VAR 0 3
9048: PUSH
9049: LD_INT 1
9051: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
9052: LD_VAR 0 4
9056: NOT
9057: IFFALSE 9077
9059: PUSH
9060: LD_EXP 54
9064: PUSH
9065: LD_INT 2
9067: ARRAY
9068: PPUSH
9069: LD_INT 14
9071: PPUSH
9072: CALL_OW 308
9076: AND
9077: IFFALSE 9087
// inarea2 := true ;
9079: LD_ADDR_VAR 0 4
9083: PUSH
9084: LD_INT 1
9086: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
9087: LD_VAR 0 1
9091: IFFALSE 9099
9093: PUSH
9094: LD_VAR 0 2
9098: AND
9099: IFTRUE 9115
9101: PUSH
9102: LD_VAR 0 1
9106: IFFALSE 9114
9108: PUSH
9109: LD_VAR 0 4
9113: AND
9114: OR
9115: IFTRUE 9131
9117: PUSH
9118: LD_VAR 0 2
9122: IFFALSE 9130
9124: PUSH
9125: LD_VAR 0 3
9129: AND
9130: OR
9131: IFTRUE 9147
9133: PUSH
9134: LD_VAR 0 3
9138: IFFALSE 9146
9140: PUSH
9141: LD_VAR 0 4
9145: AND
9146: OR
9147: IFFALSE 8946
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
9149: LD_VAR 0 3
9153: IFFALSE 9161
9155: PUSH
9156: LD_VAR 0 4
9160: AND
9161: IFTRUE 9177
9163: PUSH
9164: LD_VAR 0 1
9168: IFFALSE 9176
9170: PUSH
9171: LD_VAR 0 4
9175: AND
9176: OR
9177: IFTRUE 9193
9179: PUSH
9180: LD_VAR 0 2
9184: IFFALSE 9192
9186: PUSH
9187: LD_VAR 0 3
9191: AND
9192: OR
9193: IFFALSE 9830
// begin prepare_siege := true ;
9195: LD_ADDR_EXP 31
9199: PUSH
9200: LD_INT 1
9202: ST_TO_ADDR
// DialogueOn ;
9203: CALL_OW 6
// if ( inarea1 and inarea2 ) then
9207: LD_VAR 0 3
9211: IFFALSE 9219
9213: PUSH
9214: LD_VAR 0 4
9218: AND
9219: IFFALSE 9235
// Say ( JMM , D8b-JMM-1a ) else
9221: LD_EXP 37
9225: PPUSH
9226: LD_STRING D8b-JMM-1a
9228: PPUSH
9229: CALL_OW 88
9233: GO 9247
// Say ( JMM , D8b-JMM-1 ) ;
9235: LD_EXP 37
9239: PPUSH
9240: LD_STRING D8b-JMM-1
9242: PPUSH
9243: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
9247: LD_EXP 4
9251: PPUSH
9252: LD_INT 26
9254: PUSH
9255: LD_INT 1
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PPUSH
9262: CALL_OW 72
9266: PUSH
9267: LD_EXP 38
9271: PUSH
9272: LD_EXP 39
9276: PUSH
9277: LD_EXP 48
9281: PUSH
9282: LD_EXP 51
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: DIFF
9293: PPUSH
9294: LD_STRING D8b-Sol1-1
9296: PPUSH
9297: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
9301: LD_EXP 39
9305: IFFALSE 9319
9307: PUSH
9308: LD_EXP 39
9312: PUSH
9313: LD_EXP 4
9317: IN
9318: AND
9319: IFFALSE 9335
// Say ( Cyrus , D8b-Cyrus-1 ) else
9321: LD_EXP 39
9325: PPUSH
9326: LD_STRING D8b-Cyrus-1
9328: PPUSH
9329: CALL_OW 88
9333: GO 9347
// Say ( JMM , D8b-JMM-1a ) ;
9335: LD_EXP 37
9339: PPUSH
9340: LD_STRING D8b-JMM-1a
9342: PPUSH
9343: CALL_OW 88
// if Lisa and Lisa in jmm_units then
9347: LD_EXP 40
9351: IFFALSE 9365
9353: PUSH
9354: LD_EXP 40
9358: PUSH
9359: LD_EXP 4
9363: IN
9364: AND
9365: IFFALSE 9379
// Say ( Lisa , D8b-Lisa-2 ) ;
9367: LD_EXP 40
9371: PPUSH
9372: LD_STRING D8b-Lisa-2
9374: PPUSH
9375: CALL_OW 88
// if Bobby and Bobby in jmm_units then
9379: LD_EXP 38
9383: IFFALSE 9397
9385: PUSH
9386: LD_EXP 38
9390: PUSH
9391: LD_EXP 4
9395: IN
9396: AND
9397: IFFALSE 9413
// Say ( Bobby , D8b-Bobby-1 ) else
9399: LD_EXP 38
9403: PPUSH
9404: LD_STRING D8b-Bobby-1
9406: PPUSH
9407: CALL_OW 88
9411: GO 9473
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
9413: LD_ADDR_VAR 0 5
9417: PUSH
9418: LD_EXP 4
9422: PPUSH
9423: LD_INT 26
9425: PUSH
9426: LD_INT 1
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PPUSH
9433: CALL_OW 72
9437: PUSH
9438: LD_EXP 38
9442: PUSH
9443: LD_EXP 39
9447: PUSH
9448: LD_EXP 48
9452: PUSH
9453: LD_EXP 51
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: DIFF
9464: PPUSH
9465: LD_STRING D8b-Sol2-1
9467: PPUSH
9468: CALL 585 0 2
9472: ST_TO_ADDR
// DialogueOff ;
9473: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
9477: LD_EXP 39
9481: IFFALSE 9495
9483: PUSH
9484: LD_EXP 39
9488: PUSH
9489: LD_EXP 4
9493: IN
9494: AND
9495: IFFALSE 9520
// tmp := Insert ( tmp , 1 , Cyrus ) ;
9497: LD_ADDR_VAR 0 6
9501: PUSH
9502: LD_VAR 0 6
9506: PPUSH
9507: LD_INT 1
9509: PPUSH
9510: LD_EXP 39
9514: PPUSH
9515: CALL_OW 2
9519: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
9520: LD_EXP 38
9524: IFFALSE 9538
9526: PUSH
9527: LD_EXP 38
9531: PUSH
9532: LD_EXP 4
9536: IN
9537: AND
9538: IFFALSE 9563
// tmp := Insert ( tmp , 1 , Bobby ) ;
9540: LD_ADDR_VAR 0 6
9544: PUSH
9545: LD_VAR 0 6
9549: PPUSH
9550: LD_INT 1
9552: PPUSH
9553: LD_EXP 38
9557: PPUSH
9558: CALL_OW 2
9562: ST_TO_ADDR
// if sol then
9563: LD_VAR 0 5
9567: IFFALSE 9592
// tmp := Insert ( tmp , 1 , sol ) ;
9569: LD_ADDR_VAR 0 6
9573: PUSH
9574: LD_VAR 0 6
9578: PPUSH
9579: LD_INT 1
9581: PPUSH
9582: LD_VAR 0 5
9586: PPUSH
9587: CALL_OW 2
9591: ST_TO_ADDR
// if tmp then
9592: LD_VAR 0 6
9596: IFFALSE 9789
// begin SetSide ( tmp , 8 ) ;
9598: LD_VAR 0 6
9602: PPUSH
9603: LD_INT 8
9605: PPUSH
9606: CALL_OW 235
// for i in tmp do
9610: LD_ADDR_VAR 0 7
9614: PUSH
9615: LD_VAR 0 6
9619: PUSH
9620: FOR_IN
9621: IFFALSE 9634
// ComExit ( i ) ;
9623: LD_VAR 0 7
9627: PPUSH
9628: CALL 79581 0 1
9632: GO 9620
9634: POP
9635: POP
// wait ( 0 0$0.3 ) ;
9636: LD_INT 10
9638: PPUSH
9639: CALL_OW 67
// ComFree ( tmp ) ;
9643: LD_VAR 0 6
9647: PPUSH
9648: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9652: LD_VAR 0 6
9656: PPUSH
9657: LD_INT 15
9659: PPUSH
9660: CALL_OW 173
// AddComHold ( tmp ) ;
9664: LD_VAR 0 6
9668: PPUSH
9669: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9673: LD_INT 35
9675: PPUSH
9676: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9680: LD_VAR 0 6
9684: PUSH
9685: LD_INT 1
9687: ARRAY
9688: PPUSH
9689: CALL_OW 314
9693: NOT
9694: IFFALSE 9708
// ComMoveToArea ( tmp , cyrusEscape ) ;
9696: LD_VAR 0 6
9700: PPUSH
9701: LD_INT 15
9703: PPUSH
9704: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9708: LD_VAR 0 6
9712: PUSH
9713: LD_INT 1
9715: ARRAY
9716: PPUSH
9717: LD_INT 15
9719: PPUSH
9720: CALL_OW 308
9724: IFFALSE 9779
// begin RemoveUnit ( tmp [ 1 ] ) ;
9726: LD_VAR 0 6
9730: PUSH
9731: LD_INT 1
9733: ARRAY
9734: PPUSH
9735: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9739: LD_ADDR_EXP 4
9743: PUSH
9744: LD_EXP 4
9748: PUSH
9749: LD_VAR 0 6
9753: PUSH
9754: LD_INT 1
9756: ARRAY
9757: DIFF
9758: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9759: LD_ADDR_VAR 0 6
9763: PUSH
9764: LD_VAR 0 6
9768: PUSH
9769: LD_VAR 0 6
9773: PUSH
9774: LD_INT 1
9776: ARRAY
9777: DIFF
9778: ST_TO_ADDR
// end ; until tmp = 0 ;
9779: LD_VAR 0 6
9783: PUSH
9784: LD_INT 0
9786: EQUAL
9787: IFFALSE 9673
// end ; wait ( 0 0$30 ) ;
9789: LD_INT 1050
9791: PPUSH
9792: CALL_OW 67
// if ru_spec_patrol then
9796: LD_EXP 54
9800: IFFALSE 9828
// for i in ru_spec_patrol do
9802: LD_ADDR_VAR 0 7
9806: PUSH
9807: LD_EXP 54
9811: PUSH
9812: FOR_IN
9813: IFFALSE 9826
// RemoveUnit ( i ) ;
9815: LD_VAR 0 7
9819: PPUSH
9820: CALL_OW 64
9824: GO 9812
9826: POP
9827: POP
// end else
9828: GO 9850
// begin prepare_siege := false ;
9830: LD_ADDR_EXP 31
9834: PUSH
9835: LD_INT 0
9837: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9838: LD_EXP 37
9842: PPUSH
9843: LD_STRING D8a-JMM-1
9845: PPUSH
9846: CALL_OW 88
// end ; end ;
9850: PPOPN 7
9852: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9853: LD_EXP 12
9857: IFFALSE 11153
9859: GO 9861
9861: DISABLE
9862: LD_INT 0
9864: PPUSH
9865: PPUSH
9866: PPUSH
// begin uc_side := 8 ;
9867: LD_ADDR_OWVAR 20
9871: PUSH
9872: LD_INT 8
9874: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9875: LD_ADDR_VAR 0 3
9879: PUSH
9880: LD_INT 59
9882: PUSH
9883: LD_INT 71
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 122
9892: PUSH
9893: LD_INT 117
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9904: LD_ADDR_EXP 51
9908: PUSH
9909: LD_STRING Frank
9911: PPUSH
9912: LD_INT 0
9914: PPUSH
9915: LD_STRING 
9917: PPUSH
9918: CALL 41051 0 3
9922: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9923: LD_ADDR_VAR 0 1
9927: PUSH
9928: LD_INT 1
9930: PPUSH
9931: LD_INT 2
9933: PPUSH
9934: CALL_OW 12
9938: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9939: LD_EXP 51
9943: PPUSH
9944: LD_VAR 0 3
9948: PUSH
9949: LD_VAR 0 1
9953: ARRAY
9954: PUSH
9955: LD_INT 1
9957: ARRAY
9958: PPUSH
9959: LD_VAR 0 3
9963: PUSH
9964: LD_VAR 0 1
9968: ARRAY
9969: PUSH
9970: LD_INT 2
9972: ARRAY
9973: PPUSH
9974: LD_INT 0
9976: PPUSH
9977: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9981: LD_EXP 51
9985: PPUSH
9986: LD_INT 1
9988: PPUSH
9989: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9993: LD_INT 35
9995: PPUSH
9996: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
10000: LD_EXP 51
10004: PPUSH
10005: LD_EXP 37
10009: PPUSH
10010: CALL_OW 296
10014: PUSH
10015: LD_INT 8
10017: LESS
10018: IFFALSE 10035
10020: PUSH
10021: LD_EXP 51
10025: PPUSH
10026: CALL_OW 256
10030: PUSH
10031: LD_INT 250
10033: GREATER
10034: AND
10035: IFFALSE 9993
// Video ( true ) ;
10037: LD_INT 1
10039: PPUSH
10040: CALL 79155 0 1
// CenterOnUnits ( JMM ) ;
10044: LD_EXP 37
10048: PPUSH
10049: CALL_OW 85
// if IsInUnit ( JMM ) then
10053: LD_EXP 37
10057: PPUSH
10058: CALL_OW 310
10062: IFFALSE 10073
// ComFree ( JMM ) ;
10064: LD_EXP 37
10068: PPUSH
10069: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
10073: LD_EXP 37
10077: PPUSH
10078: LD_EXP 51
10082: PPUSH
10083: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
10087: LD_EXP 51
10091: PPUSH
10092: LD_EXP 37
10096: PPUSH
10097: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
10101: LD_EXP 37
10105: PPUSH
10106: LD_STRING D6-JMM-1
10108: PPUSH
10109: CALL_OW 88
// p := 0 ;
10113: LD_ADDR_VAR 0 2
10117: PUSH
10118: LD_INT 0
10120: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10121: LD_INT 35
10123: PPUSH
10124: CALL_OW 67
// p := p + 1 ;
10128: LD_ADDR_VAR 0 2
10132: PUSH
10133: LD_VAR 0 2
10137: PUSH
10138: LD_INT 1
10140: PLUS
10141: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
10142: LD_EXP 37
10146: PPUSH
10147: LD_EXP 51
10151: PPUSH
10152: CALL_OW 296
10156: PUSH
10157: LD_INT 8
10159: LESS
10160: IFTRUE 10172
10162: PUSH
10163: LD_VAR 0 2
10167: PUSH
10168: LD_INT 7
10170: GREATER
10171: OR
10172: IFFALSE 10121
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
10174: LD_EXP 40
10178: IFFALSE 10200
10180: PUSH
10181: LD_EXP 40
10185: PPUSH
10186: LD_EXP 51
10190: PPUSH
10191: CALL_OW 296
10195: PUSH
10196: LD_INT 20
10198: LESS
10199: AND
10200: IFFALSE 10214
10202: PUSH
10203: LD_EXP 40
10207: PUSH
10208: LD_EXP 4
10212: IN
10213: AND
10214: IFFALSE 10239
// begin ComFree ( Lisa ) ;
10216: LD_EXP 40
10220: PPUSH
10221: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
10225: LD_EXP 40
10229: PPUSH
10230: LD_EXP 51
10234: PPUSH
10235: CALL_OW 172
// end ; if Lynch then
10239: LD_EXP 47
10243: IFFALSE 10268
// begin ComFree ( Lynch ) ;
10245: LD_EXP 47
10249: PPUSH
10250: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
10254: LD_EXP 47
10258: PPUSH
10259: LD_EXP 51
10263: PPUSH
10264: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
10268: LD_EXP 37
10272: PPUSH
10273: LD_EXP 51
10277: PPUSH
10278: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10282: LD_EXP 51
10286: PPUSH
10287: LD_EXP 37
10291: PPUSH
10292: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
10296: LD_EXP 51
10300: PPUSH
10301: LD_STRING D6-Frank-1
10303: PPUSH
10304: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
10308: LD_INT 69
10310: PPUSH
10311: LD_INT 20
10313: PPUSH
10314: LD_INT 1
10316: PPUSH
10317: LD_INT 20
10319: NEG
10320: PPUSH
10321: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
10325: LD_INT 69
10327: PPUSH
10328: LD_INT 20
10330: PPUSH
10331: LD_INT 1
10333: PPUSH
10334: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
10338: LD_INT 190
10340: PPUSH
10341: LD_INT 31
10343: PPUSH
10344: LD_INT 1
10346: PPUSH
10347: LD_INT 20
10349: NEG
10350: PPUSH
10351: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
10355: LD_INT 190
10357: PPUSH
10358: LD_INT 31
10360: PPUSH
10361: LD_INT 1
10363: PPUSH
10364: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
10368: LD_INT 69
10370: PPUSH
10371: LD_INT 20
10373: PPUSH
10374: CALL_OW 84
// Wait ( 0 0$02 ) ;
10378: LD_INT 70
10380: PPUSH
10381: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
10385: LD_EXP 37
10389: PPUSH
10390: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
10394: LD_EXP 40
10398: IFFALSE 10420
10400: PUSH
10401: LD_EXP 40
10405: PPUSH
10406: LD_EXP 51
10410: PPUSH
10411: CALL_OW 296
10415: PUSH
10416: LD_INT 20
10418: LESS
10419: AND
10420: IFFALSE 10433
10422: PUSH
10423: LD_EXP 40
10427: PPUSH
10428: CALL_OW 302
10432: AND
10433: IFFALSE 10447
10435: PUSH
10436: LD_EXP 40
10440: PUSH
10441: LD_EXP 4
10445: IN
10446: AND
10447: IFFALSE 10571
// begin ComFree ( Lisa ) ;
10449: LD_EXP 40
10453: PPUSH
10454: CALL_OW 139
// p := 0 ;
10458: LD_ADDR_VAR 0 2
10462: PUSH
10463: LD_INT 0
10465: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10466: LD_INT 35
10468: PPUSH
10469: CALL_OW 67
// p := p + 1 ;
10473: LD_ADDR_VAR 0 2
10477: PUSH
10478: LD_VAR 0 2
10482: PUSH
10483: LD_INT 1
10485: PLUS
10486: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10487: LD_EXP 40
10491: PPUSH
10492: LD_EXP 51
10496: PPUSH
10497: CALL_OW 296
10501: PUSH
10502: LD_INT 7
10504: LESS
10505: IFTRUE 10517
10507: PUSH
10508: LD_VAR 0 2
10512: PUSH
10513: LD_INT 7
10515: GREATER
10516: OR
10517: IFFALSE 10466
// Say ( Lisa , D6-Lisa-1 ) ;
10519: LD_EXP 40
10523: PPUSH
10524: LD_STRING D6-Lisa-1
10526: PPUSH
10527: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10531: LD_EXP 40
10535: PPUSH
10536: LD_EXP 51
10540: PPUSH
10541: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10545: LD_EXP 51
10549: PPUSH
10550: LD_EXP 40
10554: PPUSH
10555: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10559: LD_EXP 51
10563: PPUSH
10564: LD_STRING D6-Frank-2
10566: PPUSH
10567: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10571: LD_EXP 47
10575: IFFALSE 10597
10577: PUSH
10578: LD_EXP 47
10582: PPUSH
10583: LD_EXP 51
10587: PPUSH
10588: CALL_OW 296
10592: PUSH
10593: LD_INT 20
10595: LESS
10596: AND
10597: IFFALSE 10610
10599: PUSH
10600: LD_EXP 47
10604: PPUSH
10605: CALL_OW 302
10609: AND
10610: IFFALSE 10807
// begin ComTurnUnit ( Lynch , JMM ) ;
10612: LD_EXP 47
10616: PPUSH
10617: LD_EXP 37
10621: PPUSH
10622: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10626: LD_EXP 51
10630: PPUSH
10631: LD_EXP 37
10635: PPUSH
10636: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10640: LD_EXP 47
10644: PPUSH
10645: LD_STRING D6-Sol1-2
10647: PPUSH
10648: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10652: LD_EXP 37
10656: PPUSH
10657: LD_STRING D6-JMM-2
10659: PPUSH
10660: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10664: LD_EXP 51
10668: PPUSH
10669: LD_STRING D6-Frank-3
10671: PPUSH
10672: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10676: LD_EXP 37
10680: PPUSH
10681: LD_STRING D6-JMM-3
10683: PPUSH
10684: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10688: LD_EXP 51
10692: PPUSH
10693: LD_STRING D6-Frank-4
10695: PPUSH
10696: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10700: LD_EXP 51
10704: PPUSH
10705: LD_STRING D6-Frank-4a
10707: PPUSH
10708: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10712: LD_EXP 37
10716: PPUSH
10717: LD_STRING D6-JMM-4
10719: PPUSH
10720: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10724: LD_EXP 51
10728: PPUSH
10729: LD_STRING D6-Frank-5
10731: PPUSH
10732: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10736: LD_EXP 40
10740: IFFALSE 10753
10742: PUSH
10743: LD_EXP 40
10747: PPUSH
10748: CALL_OW 302
10752: AND
10753: IFFALSE 10767
10755: PUSH
10756: LD_EXP 40
10760: PUSH
10761: LD_EXP 4
10765: IN
10766: AND
10767: IFFALSE 10781
// Say ( Lisa , D6-Lisa-5 ) ;
10769: LD_EXP 40
10773: PPUSH
10774: LD_STRING D6-Lisa-5
10776: PPUSH
10777: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10781: LD_EXP 51
10785: PPUSH
10786: LD_STRING D6-Frank-6
10788: PPUSH
10789: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10793: LD_EXP 37
10797: PPUSH
10798: LD_STRING D6-JMM-6
10800: PPUSH
10801: CALL_OW 88
// end else
10805: GO 10938
// begin ComTurnUnit ( Frank , JMM ) ;
10807: LD_EXP 51
10811: PPUSH
10812: LD_EXP 37
10816: PPUSH
10817: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10821: LD_EXP 51
10825: PPUSH
10826: LD_STRING D6-Frank-4
10828: PPUSH
10829: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10833: LD_EXP 51
10837: PPUSH
10838: LD_STRING D6-Frank-4a
10840: PPUSH
10841: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10845: LD_EXP 37
10849: PPUSH
10850: LD_STRING D6-JMM-4
10852: PPUSH
10853: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10857: LD_EXP 51
10861: PPUSH
10862: LD_STRING D6-Frank-5
10864: PPUSH
10865: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10869: LD_EXP 40
10873: IFFALSE 10886
10875: PUSH
10876: LD_EXP 40
10880: PPUSH
10881: CALL_OW 302
10885: AND
10886: IFFALSE 10900
10888: PUSH
10889: LD_EXP 40
10893: PUSH
10894: LD_EXP 4
10898: IN
10899: AND
10900: IFFALSE 10914
// Say ( Lisa , D6-Lisa-5 ) ;
10902: LD_EXP 40
10906: PPUSH
10907: LD_STRING D6-Lisa-5
10909: PPUSH
10910: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10914: LD_EXP 51
10918: PPUSH
10919: LD_STRING D6-Frank-6
10921: PPUSH
10922: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10926: LD_EXP 37
10930: PPUSH
10931: LD_STRING D6-JMM-6
10933: PPUSH
10934: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10938: LD_STRING Q1
10940: PPUSH
10941: CALL_OW 97
10945: PUSH
10946: LD_INT 1
10948: DOUBLE
10949: EQUAL
10950: IFTRUE 10954
10952: GO 10965
10954: POP
// frank_send_to_scout := true ; 2 :
10955: LD_ADDR_EXP 15
10959: PUSH
10960: LD_INT 1
10962: ST_TO_ADDR
10963: GO 10985
10965: LD_INT 2
10967: DOUBLE
10968: EQUAL
10969: IFTRUE 10973
10971: GO 10984
10973: POP
// frank_send_to_scout := false ; end ;
10974: LD_ADDR_EXP 15
10978: PUSH
10979: LD_INT 0
10981: ST_TO_ADDR
10982: GO 10985
10984: POP
// Video ( false ) ;
10985: LD_INT 0
10987: PPUSH
10988: CALL 79155 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10992: LD_EXP 37
10996: PUSH
10997: LD_EXP 40
11001: PUSH
11002: LD_EXP 47
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: LIST
11011: PPUSH
11012: CALL_OW 139
// if frank_send_to_scout then
11016: LD_EXP 15
11020: IFFALSE 11074
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
11022: LD_EXP 51
11026: PPUSH
11027: LD_INT 15
11029: PPUSH
11030: CALL_OW 113
// wait ( 0 0$01 ) ;
11034: LD_INT 35
11036: PPUSH
11037: CALL_OW 67
// until not See ( 1 , Frank ) ;
11041: LD_INT 1
11043: PPUSH
11044: LD_EXP 51
11048: PPUSH
11049: CALL_OW 292
11053: NOT
11054: IFFALSE 11022
// wait ( 0 0$02 ) ;
11056: LD_INT 70
11058: PPUSH
11059: CALL_OW 67
// RemoveUnit ( Frank ) ;
11063: LD_EXP 51
11067: PPUSH
11068: CALL_OW 64
// end else
11072: GO 11086
// SetSide ( Frank , 1 ) ;
11074: LD_EXP 51
11078: PPUSH
11079: LD_INT 1
11081: PPUSH
11082: CALL_OW 235
// send_attack_on_cornel_base := true ;
11086: LD_ADDR_EXP 26
11090: PUSH
11091: LD_INT 1
11093: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11094: LD_INT 35
11096: PPUSH
11097: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
11101: LD_ADDR_EXP 29
11105: PUSH
11106: LD_EXP 29
11110: PPUSH
11111: LD_STRING -
11113: PPUSH
11114: CALL 1077 0 2
11118: ST_TO_ADDR
// if debug then
11119: LD_EXP 1
11123: IFFALSE 11135
// debug_strings := time_to_prepare ;
11125: LD_ADDR_OWVAR 48
11129: PUSH
11130: LD_EXP 29
11134: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
11135: LD_EXP 29
11139: PUSH
11140: LD_INT 0
11142: EQUAL
11143: IFFALSE 11094
// cornel_prepared := true ;
11145: LD_ADDR_EXP 11
11149: PUSH
11150: LD_INT 1
11152: ST_TO_ADDR
// end ;
11153: PPOPN 3
11155: END
// every 0 0$01 trigger cornel_prepared do
11156: LD_EXP 11
11160: IFFALSE 11470
11162: GO 11164
11164: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
11165: LD_EXP 44
11169: PPUSH
11170: LD_STRING D3-Corn-1
11172: PPUSH
11173: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
11177: LD_STRING MOutWait
11179: PPUSH
11180: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
11184: LD_INT 35
11186: PPUSH
11187: CALL_OW 67
// until cornel_counter = 0 ;
11191: LD_EXP 10
11195: PUSH
11196: LD_INT 0
11198: EQUAL
11199: IFFALSE 11184
// SayRadio ( Cornel , D3a-Corn-1 ) ;
11201: LD_EXP 44
11205: PPUSH
11206: LD_STRING D3a-Corn-1
11208: PPUSH
11209: CALL_OW 94
// if IsOk ( Cornel ) then
11213: LD_EXP 44
11217: PPUSH
11218: CALL_OW 302
11222: IFFALSE 11236
// Say ( JMM , D3a-JMM-1 ) ;
11224: LD_EXP 37
11228: PPUSH
11229: LD_STRING D3a-JMM-1
11231: PPUSH
11232: CALL_OW 88
// end_mission_allowed := true ;
11236: LD_ADDR_EXP 21
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11244: LD_STRING M2
11246: PPUSH
11247: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
11251: LD_INT 9
11253: PPUSH
11254: LD_INT 1
11256: PPUSH
11257: CALL_OW 424
// Wait ( 0 0$05 ) ;
11261: LD_INT 175
11263: PPUSH
11264: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
11268: LD_EXP 44
11272: PPUSH
11273: LD_STRING D3a-Corn-2
11275: PPUSH
11276: CALL_OW 94
// cornel_attack := true ;
11280: LD_ADDR_EXP 9
11284: PUSH
11285: LD_INT 1
11287: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
11288: LD_INT 105
11290: PPUSH
11291: CALL_OW 67
// AddMoreTanks ( ) ;
11295: CALL 5408 0 0
// if frank_send_to_scout then
11299: LD_EXP 15
11303: IFFALSE 11470
// begin InitHc ;
11305: CALL_OW 19
// InitUc ;
11309: CALL_OW 18
// uc_side := 8 ;
11313: LD_ADDR_OWVAR 20
11317: PUSH
11318: LD_INT 8
11320: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
11321: LD_ADDR_EXP 51
11325: PUSH
11326: LD_STRING Frank
11328: PPUSH
11329: LD_INT 0
11331: PPUSH
11332: LD_STRING 
11334: PPUSH
11335: CALL 41051 0 3
11339: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
11340: LD_EXP 51
11344: PPUSH
11345: LD_INT 6
11347: PPUSH
11348: LD_INT 9
11350: PPUSH
11351: LD_INT 0
11353: PPUSH
11354: CALL_OW 48
// ComCrawl ( Frank ) ;
11358: LD_EXP 51
11362: PPUSH
11363: CALL_OW 137
// repeat wait ( 10 ) ;
11367: LD_INT 10
11369: PPUSH
11370: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11374: LD_EXP 37
11378: PPUSH
11379: LD_EXP 51
11383: PPUSH
11384: CALL_OW 296
11388: PUSH
11389: LD_INT 9
11391: LESS
11392: IFTRUE 11413
11394: PUSH
11395: LD_INT 9
11397: PPUSH
11398: LD_INT 22
11400: PUSH
11401: LD_INT 1
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PPUSH
11408: CALL_OW 70
11412: OR
11413: IFFALSE 11367
// if IsDead ( Frank ) then
11415: LD_EXP 51
11419: PPUSH
11420: CALL_OW 301
11424: IFFALSE 11428
// exit ;
11426: GO 11470
// CenterOnUnits ( Frank ) ;
11428: LD_EXP 51
11432: PPUSH
11433: CALL_OW 85
// SetSide ( Frank , 1 ) ;
11437: LD_EXP 51
11441: PPUSH
11442: LD_INT 1
11444: PPUSH
11445: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
11449: LD_EXP 51
11453: PPUSH
11454: LD_STRING D6a-Frank-1
11456: PPUSH
11457: CALL_OW 88
// ComWalk ( Frank ) ;
11461: LD_EXP 51
11465: PPUSH
11466: CALL_OW 138
// end ; end ;
11470: END
// every 0 0$01 trigger solar_builded do
11471: LD_EXP 14
11475: IFFALSE 11581
11477: GO 11479
11479: DISABLE
// begin Wait ( 0 0$02 ) ;
11480: LD_INT 70
11482: PPUSH
11483: CALL_OW 67
// DialogueOn ;
11487: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11491: LD_EXP 37
11495: PPUSH
11496: LD_STRING D2b-JMM-1
11498: PPUSH
11499: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11503: LD_EXP 48
11507: IFFALSE 11520
11509: PUSH
11510: LD_EXP 48
11514: PPUSH
11515: CALL_OW 302
11519: AND
11520: IFFALSE 11570
// begin Say ( Walker , D2b-Sci1-1 ) ;
11522: LD_EXP 48
11526: PPUSH
11527: LD_STRING D2b-Sci1-1
11529: PPUSH
11530: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11534: LD_EXP 37
11538: PPUSH
11539: LD_STRING D2b-JMM-2
11541: PPUSH
11542: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11546: LD_EXP 48
11550: PPUSH
11551: LD_STRING D2b-Sci1-2
11553: PPUSH
11554: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11558: LD_EXP 37
11562: PPUSH
11563: LD_STRING D2b-JMM-3
11565: PPUSH
11566: CALL_OW 88
// end ; DialogueOff ;
11570: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11574: LD_STRING MOutSol
11576: PPUSH
11577: CALL_OW 337
// end ;
11581: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11582: LD_EXP 14
11586: IFFALSE 11599
11588: PUSH
11589: LD_EXP 37
11593: PPUSH
11594: CALL_OW 302
11598: AND
11599: IFFALSE 11612
11601: PUSH
11602: LD_EXP 37
11606: PPUSH
11607: CALL 911 0 1
11611: AND
11612: IFFALSE 11621
11614: PUSH
11615: LD_EXP 16
11619: NOT
11620: AND
11621: IFFALSE 11692
11623: GO 11625
11625: DISABLE
11626: LD_INT 0
11628: PPUSH
// begin jmm_in_veh := true ;
11629: LD_ADDR_EXP 16
11633: PUSH
11634: LD_INT 1
11636: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11637: LD_ADDR_VAR 0 1
11641: PUSH
11642: LD_INT 0
11644: PPUSH
11645: LD_INT 1
11647: PPUSH
11648: CALL_OW 12
11652: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11653: LD_INT 70
11655: PPUSH
11656: CALL_OW 67
// if i then
11660: LD_VAR 0 1
11664: IFFALSE 11680
// Say ( JMM , D2c-JMM-1 ) else
11666: LD_EXP 37
11670: PPUSH
11671: LD_STRING D2c-JMM-1
11673: PPUSH
11674: CALL_OW 88
11678: GO 11692
// Say ( JMM , D2c-JMM-1a ) ;
11680: LD_EXP 37
11684: PPUSH
11685: LD_STRING D2c-JMM-1a
11687: PPUSH
11688: CALL_OW 88
// end ;
11692: PPOPN 1
11694: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11695: LD_EXP 14
11699: IFFALSE 11712
11701: PUSH
11702: LD_EXP 38
11706: PPUSH
11707: CALL_OW 302
11711: AND
11712: IFFALSE 11725
11714: PUSH
11715: LD_EXP 38
11719: PPUSH
11720: CALL 911 0 1
11724: AND
11725: IFFALSE 11734
11727: PUSH
11728: LD_EXP 17
11732: NOT
11733: AND
11734: IFFALSE 11766
11736: GO 11738
11738: DISABLE
// begin bobby_in_veh := true ;
11739: LD_ADDR_EXP 17
11743: PUSH
11744: LD_INT 1
11746: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11747: LD_INT 70
11749: PPUSH
11750: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11754: LD_EXP 38
11758: PPUSH
11759: LD_STRING D2c-Bobby-1
11761: PPUSH
11762: CALL_OW 88
11766: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11767: LD_EXP 14
11771: IFFALSE 11784
11773: PUSH
11774: LD_EXP 40
11778: PPUSH
11779: CALL_OW 302
11783: AND
11784: IFFALSE 11797
11786: PUSH
11787: LD_EXP 40
11791: PPUSH
11792: CALL 911 0 1
11796: AND
11797: IFFALSE 11806
11799: PUSH
11800: LD_EXP 19
11804: NOT
11805: AND
11806: IFFALSE 11838
11808: GO 11810
11810: DISABLE
// begin lisa_in_veh := true ;
11811: LD_ADDR_EXP 19
11815: PUSH
11816: LD_INT 1
11818: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11819: LD_INT 70
11821: PPUSH
11822: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11826: LD_EXP 40
11830: PPUSH
11831: LD_STRING D2c-Lisa-1
11833: PPUSH
11834: CALL_OW 88
11838: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11839: LD_EXP 14
11843: IFFALSE 11856
11845: PUSH
11846: LD_EXP 39
11850: PPUSH
11851: CALL_OW 302
11855: AND
11856: IFFALSE 11869
11858: PUSH
11859: LD_EXP 39
11863: PPUSH
11864: CALL 911 0 1
11868: AND
11869: IFFALSE 11878
11871: PUSH
11872: LD_EXP 18
11876: NOT
11877: AND
11878: IFFALSE 11949
11880: GO 11882
11882: DISABLE
11883: LD_INT 0
11885: PPUSH
// begin cyrus_in_veh := true ;
11886: LD_ADDR_EXP 18
11890: PUSH
11891: LD_INT 1
11893: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11894: LD_ADDR_VAR 0 1
11898: PUSH
11899: LD_INT 0
11901: PPUSH
11902: LD_INT 1
11904: PPUSH
11905: CALL_OW 12
11909: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11910: LD_INT 70
11912: PPUSH
11913: CALL_OW 67
// if i then
11917: LD_VAR 0 1
11921: IFFALSE 11937
// Say ( Cyrus , D2c-Cyrus-1 ) else
11923: LD_EXP 39
11927: PPUSH
11928: LD_STRING D2c-Cyrus-1
11930: PPUSH
11931: CALL_OW 88
11935: GO 11949
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11937: LD_EXP 39
11941: PPUSH
11942: LD_STRING D2c-Cyrus-1a
11944: PPUSH
11945: CALL_OW 88
// end ;
11949: PPOPN 1
11951: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11952: LD_EXP 44
11956: PPUSH
11957: LD_INT 16
11959: PPUSH
11960: CALL_OW 308
11964: IFFALSE 12245
11966: GO 11968
11968: DISABLE
11969: LD_INT 0
11971: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11972: LD_INT 3
11974: PPUSH
11975: LD_EXP 44
11979: PPUSH
11980: CALL_OW 471
// send_attack_on_cornel := true ;
11984: LD_ADDR_EXP 32
11988: PUSH
11989: LD_INT 1
11991: ST_TO_ADDR
// if ru_vehicles then
11992: LD_EXP 56
11996: IFFALSE 12030
// for i in ru_vehicles do
11998: LD_ADDR_VAR 0 1
12002: PUSH
12003: LD_EXP 56
12007: PUSH
12008: FOR_IN
12009: IFFALSE 12028
// ComAgressiveMove ( i , 215 , 69 ) ;
12011: LD_VAR 0 1
12015: PPUSH
12016: LD_INT 215
12018: PPUSH
12019: LD_INT 69
12021: PPUSH
12022: CALL_OW 114
12026: GO 12008
12028: POP
12029: POP
// if ru_patrol then
12030: LD_EXP 53
12034: IFFALSE 12068
// for i in ru_patrol do
12036: LD_ADDR_VAR 0 1
12040: PUSH
12041: LD_EXP 53
12045: PUSH
12046: FOR_IN
12047: IFFALSE 12066
// ComAgressiveMove ( i , 215 , 69 ) ;
12049: LD_VAR 0 1
12053: PPUSH
12054: LD_INT 215
12056: PPUSH
12057: LD_INT 69
12059: PPUSH
12060: CALL_OW 114
12064: GO 12046
12066: POP
12067: POP
// if frank_send_to_scout then
12068: LD_EXP 15
12072: IFFALSE 12086
// SayRadio ( Frank , D3b-Frank-1 ) ;
12074: LD_EXP 51
12078: PPUSH
12079: LD_STRING D3b-Frank-1
12081: PPUSH
12082: CALL_OW 94
// wait ( 0 0$03 ) ;
12086: LD_INT 105
12088: PPUSH
12089: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
12093: LD_EXP 44
12097: PPUSH
12098: LD_STRING D4-Corn-1
12100: PPUSH
12101: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
12105: LD_INT 35
12107: PPUSH
12108: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
12112: LD_INT 22
12114: PUSH
12115: LD_INT 4
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 21
12124: PUSH
12125: LD_INT 1
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 3
12134: PUSH
12135: LD_INT 24
12137: PUSH
12138: LD_INT 1000
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: LIST
12153: PPUSH
12154: CALL_OW 69
12158: PUSH
12159: LD_INT 6
12161: LESS
12162: IFFALSE 12105
// if Cornel then
12164: LD_EXP 44
12168: IFFALSE 12208
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
12170: LD_EXP 44
12174: PPUSH
12175: LD_STRING D5-Corn-1
12177: PPUSH
12178: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
12182: LD_EXP 44
12186: PPUSH
12187: LD_EXP 2
12191: PUSH
12192: LD_STRING Cornel
12194: STR
12195: PPUSH
12196: CALL_OW 38
// cornel_saved := true ;
12200: LD_ADDR_EXP 27
12204: PUSH
12205: LD_INT 1
12207: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
12208: LD_INT 4
12210: PPUSH
12211: LD_INT 8
12213: PPUSH
12214: CALL_OW 343
// wait ( 0 0$01 ) ;
12218: LD_INT 35
12220: PPUSH
12221: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
12225: LD_INT 3
12227: PPUSH
12228: LD_EXP 44
12232: PPUSH
12233: CALL_OW 472
// send_attack_on_cornel := false ;
12237: LD_ADDR_EXP 32
12241: PUSH
12242: LD_INT 0
12244: ST_TO_ADDR
// end ;
12245: PPOPN 1
12247: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
12248: LD_INT 9
12250: PPUSH
12251: LD_INT 22
12253: PUSH
12254: LD_INT 1
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PPUSH
12261: CALL_OW 70
12265: IFTRUE 12273
12267: PUSH
12268: LD_EXP 33
12272: OR
12273: IFFALSE 12530
12275: GO 12277
12277: DISABLE
12278: LD_INT 0
12280: PPUSH
12281: PPUSH
// begin enable ;
12282: ENABLE
// if not jmm_on_west then
12283: LD_EXP 5
12287: NOT
12288: IFFALSE 12299
// begin YouLost ( 4 ) ;
12290: LD_STRING 4
12292: PPUSH
12293: CALL_OW 104
// exit ;
12297: GO 12530
// end ; if not game_end then
12299: LD_EXP 33
12303: NOT
12304: IFFALSE 12314
// game_end := true ;
12306: LD_ADDR_EXP 33
12310: PUSH
12311: LD_INT 1
12313: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
12314: LD_ADDR_VAR 0 2
12318: PUSH
12319: LD_INT 9
12321: PPUSH
12322: LD_INT 22
12324: PUSH
12325: LD_INT 1
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PPUSH
12332: CALL_OW 70
12336: ST_TO_ADDR
// if not filter then
12337: LD_VAR 0 2
12341: NOT
12342: IFFALSE 12346
// exit ;
12344: GO 12530
// for i in filter do
12346: LD_ADDR_VAR 0 1
12350: PUSH
12351: LD_VAR 0 2
12355: PUSH
12356: FOR_IN
12357: IFFALSE 12528
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle and IsDrivenBy ( i ) and GetFuel ( i ) > 0 then
12359: LD_VAR 0 1
12363: PPUSH
12364: CALL_OW 302
12368: IFFALSE 12385
12370: PUSH
12371: LD_VAR 0 1
12375: PPUSH
12376: CALL_OW 247
12380: PUSH
12381: LD_INT 2
12383: EQUAL
12384: AND
12385: IFFALSE 12398
12387: PUSH
12388: LD_VAR 0 1
12392: PPUSH
12393: CALL_OW 311
12397: AND
12398: IFFALSE 12415
12400: PUSH
12401: LD_VAR 0 1
12405: PPUSH
12406: CALL_OW 261
12410: PUSH
12411: LD_INT 0
12413: GREATER
12414: AND
12415: IFFALSE 12489
// begin if i = JMM and save_group < 4 then
12417: LD_VAR 0 1
12421: PUSH
12422: LD_EXP 37
12426: EQUAL
12427: IFFALSE 12439
12429: PUSH
12430: LD_EXP 23
12434: PUSH
12435: LD_INT 4
12437: LESS
12438: AND
12439: IFFALSE 12443
// continue ;
12441: GO 12356
// if GetNation ( i ) = nation_american then
12443: LD_VAR 0 1
12447: PPUSH
12448: CALL_OW 248
12452: PUSH
12453: LD_INT 1
12455: EQUAL
12456: IFFALSE 12466
// veh_on_meta := true ;
12458: LD_ADDR_EXP 28
12462: PUSH
12463: LD_INT 1
12465: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
12466: LD_VAR 0 1
12470: PPUSH
12471: CALL_OW 311
12475: PPUSH
12476: CALL 12533 0 1
// RemoveUnit ( i ) ;
12480: LD_VAR 0 1
12484: PPUSH
12485: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
12489: LD_VAR 0 1
12493: PPUSH
12494: CALL_OW 302
12498: IFFALSE 12515
12500: PUSH
12501: LD_VAR 0 1
12505: PPUSH
12506: CALL_OW 247
12510: PUSH
12511: LD_INT 1
12513: EQUAL
12514: AND
12515: IFFALSE 12526
// Save ( i ) ;
12517: LD_VAR 0 1
12521: PPUSH
12522: CALL 12533 0 1
// end ;
12526: GO 12356
12528: POP
12529: POP
// end ;
12530: PPOPN 2
12532: END
// export function Save ( i ) ; begin
12533: LD_INT 0
12535: PPUSH
// if i = JMM and save_counter >= 4 then
12536: LD_VAR 0 1
12540: PUSH
12541: LD_EXP 37
12545: EQUAL
12546: IFFALSE 12558
12548: PUSH
12549: LD_EXP 36
12553: PUSH
12554: LD_INT 4
12556: GREATEREQUAL
12557: AND
12558: IFFALSE 12696
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12560: LD_EXP 24
12564: IFFALSE 12600
12566: PUSH
12567: LD_INT 22
12569: PUSH
12570: LD_INT 1
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 21
12579: PUSH
12580: LD_INT 1
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PPUSH
12591: CALL_OW 69
12595: PUSH
12596: LD_INT 1
12598: GREATER
12599: AND
12600: IFFALSE 12657
// begin show_query := false ;
12602: LD_ADDR_EXP 24
12606: PUSH
12607: LD_INT 0
12609: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12610: LD_STRING Q2
12612: PPUSH
12613: CALL_OW 97
12617: PUSH
12618: LD_INT 1
12620: DOUBLE
12621: EQUAL
12622: IFTRUE 12626
12624: GO 12637
12626: POP
// wait_for_them := true ; 2 :
12627: LD_ADDR_EXP 25
12631: PUSH
12632: LD_INT 1
12634: ST_TO_ADDR
12635: GO 12657
12637: LD_INT 2
12639: DOUBLE
12640: EQUAL
12641: IFTRUE 12645
12643: GO 12656
12645: POP
// wait_for_them := false ; end ;
12646: LD_ADDR_EXP 25
12650: PUSH
12651: LD_INT 0
12653: ST_TO_ADDR
12654: GO 12657
12656: POP
// end ; save_counter := save_counter + 1 ;
12657: LD_ADDR_EXP 36
12661: PUSH
12662: LD_EXP 36
12666: PUSH
12667: LD_INT 1
12669: PLUS
12670: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12671: LD_ADDR_EXP 23
12675: PUSH
12676: LD_EXP 23
12680: PUSH
12681: LD_EXP 37
12685: ADD
12686: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12687: LD_EXP 37
12691: PPUSH
12692: CALL_OW 64
// end ; if i = Lisa then
12696: LD_VAR 0 1
12700: PUSH
12701: LD_EXP 40
12705: EQUAL
12706: IFFALSE 12747
// begin save_counter := save_counter + 1 ;
12708: LD_ADDR_EXP 36
12712: PUSH
12713: LD_EXP 36
12717: PUSH
12718: LD_INT 1
12720: PLUS
12721: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12722: LD_ADDR_EXP 23
12726: PUSH
12727: LD_EXP 23
12731: PUSH
12732: LD_EXP 40
12736: ADD
12737: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12738: LD_EXP 40
12742: PPUSH
12743: CALL_OW 64
// end ; if i = Bobby then
12747: LD_VAR 0 1
12751: PUSH
12752: LD_EXP 38
12756: EQUAL
12757: IFFALSE 12798
// begin save_counter := save_counter + 1 ;
12759: LD_ADDR_EXP 36
12763: PUSH
12764: LD_EXP 36
12768: PUSH
12769: LD_INT 1
12771: PLUS
12772: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12773: LD_ADDR_EXP 23
12777: PUSH
12778: LD_EXP 23
12782: PUSH
12783: LD_EXP 38
12787: ADD
12788: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12789: LD_EXP 38
12793: PPUSH
12794: CALL_OW 64
// end ; if i = Cyrus then
12798: LD_VAR 0 1
12802: PUSH
12803: LD_EXP 39
12807: EQUAL
12808: IFFALSE 12849
// begin save_counter := save_counter + 1 ;
12810: LD_ADDR_EXP 36
12814: PUSH
12815: LD_EXP 36
12819: PUSH
12820: LD_INT 1
12822: PLUS
12823: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12824: LD_ADDR_EXP 23
12828: PUSH
12829: LD_EXP 23
12833: PUSH
12834: LD_EXP 39
12838: ADD
12839: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12840: LD_EXP 39
12844: PPUSH
12845: CALL_OW 64
// end ; if i = Khatam then
12849: LD_VAR 0 1
12853: PUSH
12854: LD_EXP 41
12858: EQUAL
12859: IFFALSE 12900
// begin save_counter := save_counter + 1 ;
12861: LD_ADDR_EXP 36
12865: PUSH
12866: LD_EXP 36
12870: PUSH
12871: LD_INT 1
12873: PLUS
12874: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12875: LD_ADDR_EXP 23
12879: PUSH
12880: LD_EXP 23
12884: PUSH
12885: LD_EXP 41
12889: ADD
12890: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12891: LD_EXP 41
12895: PPUSH
12896: CALL_OW 64
// end ; if i = Frank then
12900: LD_VAR 0 1
12904: PUSH
12905: LD_EXP 51
12909: EQUAL
12910: IFFALSE 12951
// begin save_counter := save_counter + 1 ;
12912: LD_ADDR_EXP 36
12916: PUSH
12917: LD_EXP 36
12921: PUSH
12922: LD_INT 1
12924: PLUS
12925: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12926: LD_ADDR_EXP 23
12930: PUSH
12931: LD_EXP 23
12935: PUSH
12936: LD_EXP 51
12940: ADD
12941: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12942: LD_EXP 51
12946: PPUSH
12947: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12951: LD_VAR 0 1
12955: PUSH
12956: LD_EXP 37
12960: NONEQUAL
12961: IFFALSE 12974
12963: PUSH
12964: LD_VAR 0 1
12968: PPUSH
12969: CALL_OW 302
12973: AND
12974: IFFALSE 12991
12976: PUSH
12977: LD_VAR 0 1
12981: PPUSH
12982: CALL_OW 247
12986: PUSH
12987: LD_INT 1
12989: EQUAL
12990: AND
12991: IFFALSE 13006
12993: PUSH
12994: LD_VAR 0 1
12998: PUSH
12999: LD_EXP 23
13003: IN
13004: NOT
13005: AND
13006: IFFALSE 13047
// begin save_counter := save_counter + 1 ;
13008: LD_ADDR_EXP 36
13012: PUSH
13013: LD_EXP 36
13017: PUSH
13018: LD_INT 1
13020: PLUS
13021: ST_TO_ADDR
// save_others := save_others ^ i ;
13022: LD_ADDR_EXP 22
13026: PUSH
13027: LD_EXP 22
13031: PUSH
13032: LD_VAR 0 1
13036: ADD
13037: ST_TO_ADDR
// RemoveUnit ( i ) ;
13038: LD_VAR 0 1
13042: PPUSH
13043: CALL_OW 64
// end ; end ;
13047: LD_VAR 0 2
13051: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
13052: LD_EXP 24
13056: NOT
13057: IFFALSE 13066
13059: PUSH
13060: LD_EXP 25
13064: NOT
13065: AND
13066: IFTRUE 13102
13068: PUSH
13069: LD_INT 22
13071: PUSH
13072: LD_INT 1
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: LD_INT 21
13081: PUSH
13082: LD_INT 1
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PPUSH
13093: CALL_OW 69
13097: PUSH
13098: LD_INT 0
13100: EQUAL
13101: OR
13102: IFFALSE 13111
13104: GO 13106
13106: DISABLE
// EndMission ;
13107: CALL 13112 0 0
13111: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
13112: LD_INT 0
13114: PPUSH
13115: PPUSH
13116: PPUSH
13117: PPUSH
13118: PPUSH
// wait ( 0 0$01 ) ;
13119: LD_INT 35
13121: PPUSH
13122: CALL_OW 67
// if tick <= 12 12$00 then
13126: LD_OWVAR 1
13130: PUSH
13131: LD_INT 25200
13133: LESSEQUAL
13134: IFFALSE 13143
// SetAchievement ( ACH_ASPEED_3 ) ;
13136: LD_STRING ACH_ASPEED_3
13138: PPUSH
13139: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
13143: LD_EXP 23
13147: PUSH
13148: LD_EXP 22
13152: ADD
13153: PPUSH
13154: LD_INT 25
13156: PUSH
13157: LD_INT 4
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: PPUSH
13164: CALL_OW 72
13168: PUSH
13169: LD_INT 0
13171: EQUAL
13172: IFFALSE 13188
// begin wait ( 3 ) ;
13174: LD_INT 3
13176: PPUSH
13177: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
13181: LD_STRING ACH_NOSCI
13183: PPUSH
13184: CALL_OW 543
// end ; m1 := solar_builded ;
13188: LD_ADDR_VAR 0 3
13192: PUSH
13193: LD_EXP 14
13197: ST_TO_ADDR
// m2 := veh_on_meta ;
13198: LD_ADDR_VAR 0 4
13202: PUSH
13203: LD_EXP 28
13207: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
13208: LD_ADDR_VAR 0 5
13212: PUSH
13213: LD_EXP 34
13217: PUSH
13218: LD_INT 0
13220: EQUAL
13221: ST_TO_ADDR
// if solar_builded then
13222: LD_EXP 14
13226: IFFALSE 13240
// AddMedal ( Solar1 , 1 ) else
13228: LD_STRING Solar1
13230: PPUSH
13231: LD_INT 1
13233: PPUSH
13234: CALL_OW 101
13238: GO 13251
// AddMedal ( Solar1 , - 1 ) ;
13240: LD_STRING Solar1
13242: PPUSH
13243: LD_INT 1
13245: NEG
13246: PPUSH
13247: CALL_OW 101
// if veh_on_meta then
13251: LD_EXP 28
13255: IFFALSE 13269
// AddMedal ( Solar2 , 1 ) else
13257: LD_STRING Solar2
13259: PPUSH
13260: LD_INT 1
13262: PPUSH
13263: CALL_OW 101
13267: GO 13299
// if solar_builded then
13269: LD_EXP 14
13273: IFFALSE 13288
// AddMedal ( Solar2 , - 1 ) else
13275: LD_STRING Solar2
13277: PPUSH
13278: LD_INT 1
13280: NEG
13281: PPUSH
13282: CALL_OW 101
13286: GO 13299
// AddMedal ( Solar2 , - 2 ) ;
13288: LD_STRING Solar2
13290: PPUSH
13291: LD_INT 2
13293: NEG
13294: PPUSH
13295: CALL_OW 101
// if lose_counter = 0 then
13299: LD_EXP 34
13303: PUSH
13304: LD_INT 0
13306: EQUAL
13307: IFFALSE 13321
// AddMedal ( No , 1 ) else
13309: LD_STRING No
13311: PPUSH
13312: LD_INT 1
13314: PPUSH
13315: CALL_OW 101
13319: GO 13367
// if lose_counter > 0 and lose_counter < 5 then
13321: LD_EXP 34
13325: PUSH
13326: LD_INT 0
13328: GREATER
13329: IFFALSE 13341
13331: PUSH
13332: LD_EXP 34
13336: PUSH
13337: LD_INT 5
13339: LESS
13340: AND
13341: IFFALSE 13356
// AddMedal ( No , - 1 ) else
13343: LD_STRING No
13345: PPUSH
13346: LD_INT 1
13348: NEG
13349: PPUSH
13350: CALL_OW 101
13354: GO 13367
// AddMedal ( UpTo4 , - 1 ) ;
13356: LD_STRING UpTo4
13358: PPUSH
13359: LD_INT 1
13361: NEG
13362: PPUSH
13363: CALL_OW 101
// GiveMedals ( MAIN ) ;
13367: LD_STRING MAIN
13369: PPUSH
13370: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
13374: LD_OWVAR 67
13378: PUSH
13379: LD_INT 3
13381: GREATEREQUAL
13382: IFFALSE 13390
13384: PUSH
13385: LD_VAR 0 3
13389: AND
13390: IFFALSE 13398
13392: PUSH
13393: LD_VAR 0 4
13397: AND
13398: IFFALSE 13406
13400: PUSH
13401: LD_VAR 0 5
13405: AND
13406: IFFALSE 13418
// SetAchievementEX ( ACH_AMER , 3 ) ;
13408: LD_STRING ACH_AMER
13410: PPUSH
13411: LD_INT 3
13413: PPUSH
13414: CALL_OW 564
// if IsDead ( Pokryshkin ) then
13418: LD_EXP 52
13422: PPUSH
13423: CALL_OW 301
13427: IFFALSE 13483
// begin stop_talking := true ;
13429: LD_ADDR_OWVAR 56
13433: PUSH
13434: LD_INT 1
13436: ST_TO_ADDR
// for i in save_group union save_others do
13437: LD_ADDR_VAR 0 2
13441: PUSH
13442: LD_EXP 23
13446: PUSH
13447: LD_EXP 22
13451: UNION
13452: PUSH
13453: FOR_IN
13454: IFFALSE 13473
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
13456: LD_VAR 0 2
13460: PPUSH
13461: LD_INT 1
13463: PPUSH
13464: LD_INT 1500
13466: PPUSH
13467: CALL_OW 591
13471: GO 13453
13473: POP
13474: POP
// stop_talking := false ;
13475: LD_ADDR_OWVAR 56
13479: PUSH
13480: LD_INT 0
13482: ST_TO_ADDR
// end ; RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_american ] ] ) ) ;
13483: LD_INT 22
13485: PUSH
13486: LD_INT 1
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: LD_INT 23
13495: PUSH
13496: LD_INT 1
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PPUSH
13507: CALL_OW 69
13511: PPUSH
13512: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
13516: LD_EXP 37
13520: PPUSH
13521: LD_EXP 2
13525: PUSH
13526: LD_STRING JMM
13528: STR
13529: PPUSH
13530: CALL_OW 38
// if Bobby in save_group then
13534: LD_EXP 38
13538: PUSH
13539: LD_EXP 23
13543: IN
13544: IFFALSE 13564
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
13546: LD_EXP 38
13550: PPUSH
13551: LD_EXP 2
13555: PUSH
13556: LD_STRING Bobby
13558: STR
13559: PPUSH
13560: CALL_OW 38
// if Cyrus in save_group then
13564: LD_EXP 39
13568: PUSH
13569: LD_EXP 23
13573: IN
13574: IFFALSE 13594
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
13576: LD_EXP 39
13580: PPUSH
13581: LD_EXP 2
13585: PUSH
13586: LD_STRING Cyrus
13588: STR
13589: PPUSH
13590: CALL_OW 38
// if Lisa in save_group then
13594: LD_EXP 40
13598: PUSH
13599: LD_EXP 23
13603: IN
13604: IFFALSE 13624
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13606: LD_EXP 40
13610: PPUSH
13611: LD_EXP 2
13615: PUSH
13616: LD_STRING Lisa
13618: STR
13619: PPUSH
13620: CALL_OW 38
// if Frank in save_group then
13624: LD_EXP 51
13628: PUSH
13629: LD_EXP 23
13633: IN
13634: IFFALSE 13661
// begin ToLua ( enableBioCharacter(BIO_FRANK) ) ;
13636: LD_STRING enableBioCharacter(BIO_FRANK)
13638: PPUSH
13639: CALL_OW 559
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13643: LD_EXP 51
13647: PPUSH
13648: LD_EXP 2
13652: PUSH
13653: LD_STRING Frank
13655: STR
13656: PPUSH
13657: CALL_OW 38
// end ; if Khatam in save_group then
13661: LD_EXP 41
13665: PUSH
13666: LD_EXP 23
13670: IN
13671: IFFALSE 13691
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13673: LD_EXP 41
13677: PPUSH
13678: LD_EXP 2
13682: PUSH
13683: LD_STRING Khatam
13685: STR
13686: PPUSH
13687: CALL_OW 38
// if save_others then
13691: LD_EXP 22
13695: IFFALSE 13709
// SaveCharacters ( save_others , 03_others ) ;
13697: LD_EXP 22
13701: PPUSH
13702: LD_STRING 03_others
13704: PPUSH
13705: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ANDY) ) ;
13709: LD_STRING enableBioCharacter(BIO_ANDY)
13711: PPUSH
13712: CALL_OW 559
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13716: LD_EXP 45
13720: IFFALSE 13733
13722: PUSH
13723: LD_EXP 45
13727: PPUSH
13728: CALL_OW 302
13732: AND
13733: IFFALSE 13741
13735: PUSH
13736: LD_EXP 27
13740: AND
13741: IFFALSE 13753
// begin ResetFog ;
13743: CALL_OW 335
// DisplayEndingScene ;
13747: CALL 13775 0 0
// end else
13751: GO 13766
// DeleteCharacters ( mission_prefix & Cornel ) ;
13753: LD_EXP 2
13757: PUSH
13758: LD_STRING Cornel
13760: STR
13761: PPUSH
13762: CALL_OW 40
// YouWin ;
13766: CALL_OW 103
// end ;
13770: LD_VAR 0 1
13774: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13775: LD_INT 0
13777: PPUSH
13778: PPUSH
13779: PPUSH
13780: PPUSH
13781: PPUSH
13782: PPUSH
// InGameOn ;
13783: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13787: LD_INT 208
13789: PPUSH
13790: LD_INT 62
13792: PPUSH
13793: LD_INT 1
13795: PPUSH
13796: LD_INT 10
13798: NEG
13799: PPUSH
13800: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13804: LD_INT 208
13806: PPUSH
13807: LD_INT 62
13809: PPUSH
13810: LD_INT 1
13812: PPUSH
13813: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13817: LD_ADDR_VAR 0 3
13821: PUSH
13822: LD_INT 22
13824: PUSH
13825: LD_INT 3
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: PUSH
13832: LD_INT 2
13834: PUSH
13835: LD_INT 21
13837: PUSH
13838: LD_INT 2
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 21
13847: PUSH
13848: LD_INT 1
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: LIST
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PPUSH
13864: CALL_OW 69
13868: ST_TO_ADDR
// if filter then
13869: LD_VAR 0 3
13873: IFFALSE 13901
// for i in filter do
13875: LD_ADDR_VAR 0 2
13879: PUSH
13880: LD_VAR 0 3
13884: PUSH
13885: FOR_IN
13886: IFFALSE 13899
// RemoveUnit ( i ) ;
13888: LD_VAR 0 2
13892: PPUSH
13893: CALL_OW 64
13897: GO 13885
13899: POP
13900: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13901: LD_ADDR_VAR 0 3
13905: PUSH
13906: LD_INT 22
13908: PUSH
13909: LD_INT 4
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: LD_INT 21
13918: PUSH
13919: LD_INT 1
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PPUSH
13930: CALL_OW 69
13934: ST_TO_ADDR
// if filter then
13935: LD_VAR 0 3
13939: IFFALSE 13970
// for i in filter do
13941: LD_ADDR_VAR 0 2
13945: PUSH
13946: LD_VAR 0 3
13950: PUSH
13951: FOR_IN
13952: IFFALSE 13968
// SetLives ( i , 0 ) ;
13954: LD_VAR 0 2
13958: PPUSH
13959: LD_INT 0
13961: PPUSH
13962: CALL_OW 234
13966: GO 13951
13968: POP
13969: POP
// uc_side := 4 ;
13970: LD_ADDR_OWVAR 20
13974: PUSH
13975: LD_INT 4
13977: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13978: LD_ADDR_VAR 0 4
13982: PUSH
13983: LD_STRING Cornell
13985: PPUSH
13986: LD_INT 0
13988: PPUSH
13989: LD_STRING 
13991: PPUSH
13992: CALL 41051 0 3
13996: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13997: LD_VAR 0 4
14001: PPUSH
14002: LD_INT 208
14004: PPUSH
14005: LD_INT 62
14007: PPUSH
14008: LD_INT 0
14010: PPUSH
14011: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
14015: LD_VAR 0 4
14019: PPUSH
14020: LD_INT 100
14022: PPUSH
14023: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
14027: LD_INT 3
14029: PPUSH
14030: LD_VAR 0 4
14034: PPUSH
14035: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
14039: LD_INT 4
14041: PPUSH
14042: LD_INT 3
14044: PPUSH
14045: LD_INT 1
14047: PPUSH
14048: LD_INT 1
14050: PPUSH
14051: CALL_OW 80
// uc_side := 3 ;
14055: LD_ADDR_OWVAR 20
14059: PUSH
14060: LD_INT 3
14062: ST_TO_ADDR
// uc_nation := 3 ;
14063: LD_ADDR_OWVAR 21
14067: PUSH
14068: LD_INT 3
14070: ST_TO_ADDR
// InitHc ;
14071: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
14075: LD_ADDR_VAR 0 5
14079: PUSH
14080: LD_STRING Mikhail
14082: PPUSH
14083: LD_INT 0
14085: PPUSH
14086: LD_STRING 
14088: PPUSH
14089: CALL 41051 0 3
14093: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
14094: LD_INT 1
14096: PPUSH
14097: LD_INT 1
14099: PPUSH
14100: LD_INT 0
14102: PPUSH
14103: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
14107: LD_ADDR_VAR 0 6
14111: PUSH
14112: LD_VAR 0 6
14116: PUSH
14117: CALL_OW 44
14121: ADD
14122: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
14123: LD_ADDR_VAR 0 6
14127: PUSH
14128: LD_VAR 0 6
14132: PUSH
14133: CALL_OW 44
14137: ADD
14138: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
14139: LD_INT 2
14141: PPUSH
14142: LD_INT 4
14144: PPUSH
14145: LD_INT 0
14147: PPUSH
14148: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
14152: LD_ADDR_VAR 0 6
14156: PUSH
14157: LD_VAR 0 6
14161: PUSH
14162: CALL_OW 44
14166: ADD
14167: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
14168: LD_VAR 0 5
14172: PPUSH
14173: LD_INT 17
14175: PPUSH
14176: LD_INT 0
14178: PPUSH
14179: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
14183: LD_VAR 0 5
14187: PPUSH
14188: LD_INT 210
14190: PPUSH
14191: LD_INT 63
14193: PPUSH
14194: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
14198: LD_VAR 0 5
14202: PPUSH
14203: LD_INT 208
14205: PPUSH
14206: LD_INT 62
14208: PPUSH
14209: CALL_OW 178
// for i in fake_russians do
14213: LD_ADDR_VAR 0 2
14217: PUSH
14218: LD_VAR 0 6
14222: PUSH
14223: FOR_IN
14224: IFFALSE 14302
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
14226: LD_VAR 0 2
14230: PPUSH
14231: LD_INT 17
14233: PPUSH
14234: LD_INT 0
14236: PPUSH
14237: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
14241: LD_VAR 0 2
14245: PPUSH
14246: LD_INT 215
14248: PPUSH
14249: LD_INT 67
14251: PPUSH
14252: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
14256: LD_VAR 0 2
14260: PPUSH
14261: LD_INT 208
14263: PPUSH
14264: LD_INT 62
14266: PPUSH
14267: CALL_OW 178
// if GetClass ( i ) = 4 then
14271: LD_VAR 0 2
14275: PPUSH
14276: CALL_OW 257
14280: PUSH
14281: LD_INT 4
14283: EQUAL
14284: IFFALSE 14300
// ComHeal ( i , fake_cornel ) ;
14286: LD_VAR 0 2
14290: PPUSH
14291: LD_VAR 0 4
14295: PPUSH
14296: CALL_OW 128
// end ;
14300: GO 14223
14302: POP
14303: POP
// Wait ( 0 0$01 ) ;
14304: LD_INT 35
14306: PPUSH
14307: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
14311: LD_INT 208
14313: PPUSH
14314: LD_INT 62
14316: PPUSH
14317: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
14321: LD_INT 208
14323: PPUSH
14324: LD_INT 62
14326: PPUSH
14327: LD_INT 1
14329: PPUSH
14330: LD_INT 10
14332: NEG
14333: PPUSH
14334: CALL_OW 330
// Wait ( 0 0$15 ) ;
14338: LD_INT 525
14340: PPUSH
14341: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
14345: LD_INT 208
14347: PPUSH
14348: LD_INT 62
14350: PPUSH
14351: LD_INT 1
14353: PPUSH
14354: CALL_OW 331
// ResetFog ;
14358: CALL_OW 335
// InGameOff ;
14362: CALL_OW 9
// end ;
14366: LD_VAR 0 1
14370: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
14371: LD_INT 10
14373: PPUSH
14374: LD_INT 22
14376: PUSH
14377: LD_INT 1
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PPUSH
14384: CALL_OW 70
14388: IFFALSE 14401
14390: PUSH
14391: LD_EXP 44
14395: PPUSH
14396: CALL_OW 302
14400: AND
14401: IFTRUE 14443
14403: PUSH
14404: LD_INT 22
14406: PUSH
14407: LD_INT 1
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PPUSH
14414: CALL_OW 69
14418: PPUSH
14419: LD_EXP 44
14423: PPUSH
14424: CALL_OW 74
14428: PPUSH
14429: LD_EXP 44
14433: PPUSH
14434: CALL_OW 296
14438: PUSH
14439: LD_INT 30
14441: LESS
14442: OR
14443: IFFALSE 14494
14445: GO 14447
14447: DISABLE
// begin enable ;
14448: ENABLE
// powell_warn := powell_warn + 1 ;
14449: LD_ADDR_EXP 35
14453: PUSH
14454: LD_EXP 35
14458: PUSH
14459: LD_INT 1
14461: PLUS
14462: ST_TO_ADDR
// if powell_warn = 3 then
14463: LD_EXP 35
14467: PUSH
14468: LD_INT 3
14470: EQUAL
14471: IFFALSE 14482
// begin YouLost ( 5 ) ;
14473: LD_STRING 5
14475: PPUSH
14476: CALL_OW 104
// exit ;
14480: GO 14494
// end ; SayRadioNoFace ( Powell , DWarn-Pow-1 ) ;
14482: LD_EXP 46
14486: PPUSH
14487: LD_STRING DWarn-Pow-1
14489: PPUSH
14490: CALL_OW 586
// end ; end_of_file
14494: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
14495: LD_EXP 8
14499: IFFALSE 16344
14501: GO 14503
14503: DISABLE
14504: LD_INT 0
14506: PPUSH
14507: PPUSH
14508: PPUSH
14509: PPUSH
14510: PPUSH
14511: PPUSH
14512: PPUSH
14513: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
14514: LD_EXP 44
14518: PUSH
14519: LD_EXP 45
14523: ADD
14524: PUSH
14525: LD_EXP 6
14529: ADD
14530: PPUSH
14531: LD_INT 250
14533: PPUSH
14534: LD_INT 120
14536: PPUSH
14537: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
14541: LD_ADDR_VAR 0 2
14545: PUSH
14546: LD_EXP 6
14550: PPUSH
14551: LD_INT 25
14553: PUSH
14554: LD_INT 2
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PPUSH
14561: CALL_OW 72
14565: PUSH
14566: LD_EXP 45
14570: DIFF
14571: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
14572: LD_ADDR_VAR 0 3
14576: PUSH
14577: LD_EXP 6
14581: PPUSH
14582: LD_INT 21
14584: PUSH
14585: LD_INT 1
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PPUSH
14592: CALL_OW 72
14596: PUSH
14597: LD_VAR 0 2
14601: DIFF
14602: ST_TO_ADDR
// if not has_eng then
14603: LD_VAR 0 2
14607: NOT
14608: IFFALSE 14691
// begin uc_side := 4 ;
14610: LD_ADDR_OWVAR 20
14614: PUSH
14615: LD_INT 4
14617: ST_TO_ADDR
// uc_nation := 1 ;
14618: LD_ADDR_OWVAR 21
14622: PUSH
14623: LD_INT 1
14625: ST_TO_ADDR
// bc_type := b_depot ;
14626: LD_ADDR_OWVAR 42
14630: PUSH
14631: LD_INT 0
14633: ST_TO_ADDR
// bc_level := 2 ;
14634: LD_ADDR_OWVAR 43
14638: PUSH
14639: LD_INT 2
14641: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14642: LD_ADDR_VAR 0 4
14646: PUSH
14647: LD_INT 264
14649: PPUSH
14650: LD_INT 120
14652: PPUSH
14653: LD_INT 4
14655: PPUSH
14656: CALL_OW 47
14660: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14661: LD_INT 264
14663: PPUSH
14664: LD_INT 120
14666: PPUSH
14667: LD_INT 4
14669: PPUSH
14670: LD_INT 10
14672: NEG
14673: PPUSH
14674: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14678: LD_INT 264
14680: PPUSH
14681: LD_INT 120
14683: PPUSH
14684: LD_INT 4
14686: PPUSH
14687: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14691: LD_INT 35
14693: PPUSH
14694: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14698: LD_EXP 44
14702: PPUSH
14703: LD_INT 10
14705: PPUSH
14706: CALL_OW 308
14710: IFTRUE 14731
14712: PUSH
14713: LD_EXP 44
14717: PPUSH
14718: CALL_OW 310
14722: PPUSH
14723: LD_INT 10
14725: PPUSH
14726: CALL_OW 308
14730: OR
14731: IFFALSE 14691
// if has_eng and not dep then
14733: LD_VAR 0 2
14737: IFFALSE 14746
14739: PUSH
14740: LD_VAR 0 4
14744: NOT
14745: AND
14746: IFFALSE 14896
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14748: LD_VAR 0 2
14752: PPUSH
14753: LD_INT 0
14755: PPUSH
14756: LD_INT 264
14758: PPUSH
14759: LD_INT 120
14761: PPUSH
14762: LD_INT 4
14764: PPUSH
14765: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14769: LD_INT 35
14771: PPUSH
14772: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14776: LD_INT 22
14778: PUSH
14779: LD_INT 4
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 30
14788: PUSH
14789: LD_INT 0
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PPUSH
14800: CALL_OW 69
14804: IFFALSE 14769
// ComMoveXY ( filter , 264 , 120 ) ;
14806: LD_VAR 0 3
14810: PPUSH
14811: LD_INT 264
14813: PPUSH
14814: LD_INT 120
14816: PPUSH
14817: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14821: LD_INT 35
14823: PPUSH
14824: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14828: LD_INT 22
14830: PUSH
14831: LD_INT 4
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PUSH
14838: LD_INT 30
14840: PUSH
14841: LD_INT 0
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PUSH
14848: LD_INT 3
14850: PUSH
14851: LD_INT 57
14853: PUSH
14854: EMPTY
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: LIST
14865: PPUSH
14866: CALL_OW 69
14870: IFFALSE 14821
// ComMoveXY ( filter , 247 , 113 ) ;
14872: LD_VAR 0 3
14876: PPUSH
14877: LD_INT 247
14879: PPUSH
14880: LD_INT 113
14882: PPUSH
14883: CALL_OW 111
// Wait ( 0 0$2 ) ;
14887: LD_INT 70
14889: PPUSH
14890: CALL_OW 67
// end else
14894: GO 14908
// begin SetSide ( dep , 4 ) ;
14896: LD_VAR 0 4
14900: PPUSH
14901: LD_INT 4
14903: PPUSH
14904: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14908: LD_ADDR_VAR 0 4
14912: PUSH
14913: LD_INT 22
14915: PUSH
14916: LD_INT 4
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 30
14925: PUSH
14926: LD_INT 0
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PPUSH
14937: CALL_OW 69
14941: PUSH
14942: LD_INT 1
14944: ARRAY
14945: ST_TO_ADDR
// if not has_eng then
14946: LD_VAR 0 2
14950: NOT
14951: IFFALSE 15038
// for i = 1 to 2 do
14953: LD_ADDR_VAR 0 1
14957: PUSH
14958: DOUBLE
14959: LD_INT 1
14961: DEC
14962: ST_TO_ADDR
14963: LD_INT 2
14965: PUSH
14966: FOR_TO
14967: IFFALSE 15036
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14969: LD_VAR 0 3
14973: PUSH
14974: LD_INT 1
14976: ARRAY
14977: PPUSH
14978: LD_VAR 0 4
14982: PPUSH
14983: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14987: LD_VAR 0 3
14991: PUSH
14992: LD_INT 1
14994: ARRAY
14995: PPUSH
14996: LD_INT 2
14998: PPUSH
14999: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
15003: LD_VAR 0 3
15007: PUSH
15008: LD_INT 1
15010: ARRAY
15011: PPUSH
15012: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
15016: LD_ADDR_VAR 0 3
15020: PUSH
15021: LD_VAR 0 3
15025: PPUSH
15026: LD_INT 1
15028: PPUSH
15029: CALL_OW 3
15033: ST_TO_ADDR
// end ;
15034: GO 14966
15036: POP
15037: POP
// if IsInUnit ( Cornel ) then
15038: LD_EXP 44
15042: PPUSH
15043: CALL_OW 310
15047: IFFALSE 15125
// begin cargo := IsInUnit ( Cornel ) ;
15049: LD_ADDR_VAR 0 7
15053: PUSH
15054: LD_EXP 44
15058: PPUSH
15059: CALL_OW 310
15063: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
15064: LD_VAR 0 7
15068: PPUSH
15069: LD_INT 1
15071: PPUSH
15072: CALL_OW 289
15076: IFFALSE 15087
// ComUnload ( cargo ) ;
15078: LD_VAR 0 7
15082: PPUSH
15083: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
15087: LD_EXP 44
15091: PPUSH
15092: LD_INT 235
15094: PPUSH
15095: LD_INT 122
15097: PPUSH
15098: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
15102: LD_EXP 44
15106: PPUSH
15107: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
15111: LD_EXP 44
15115: PPUSH
15116: LD_VAR 0 4
15120: PPUSH
15121: CALL_OW 180
// end ; if Bierezov then
15125: LD_EXP 45
15129: IFFALSE 15177
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
15131: LD_EXP 45
15135: PPUSH
15136: LD_INT 260
15138: PPUSH
15139: LD_INT 120
15141: PPUSH
15142: CALL_OW 111
// if dep then
15146: LD_VAR 0 4
15150: IFFALSE 15168
// AddComEnterUnit ( Bierezov , dep ) else
15152: LD_EXP 45
15156: PPUSH
15157: LD_VAR 0 4
15161: PPUSH
15162: CALL_OW 180
15166: GO 15177
// AddComHold ( Bierezov ) ;
15168: LD_EXP 45
15172: PPUSH
15173: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
15177: LD_INT 525
15179: PPUSH
15180: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
15184: LD_ADDR_VAR 0 2
15188: PUSH
15189: LD_INT 22
15191: PUSH
15192: LD_INT 4
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: LD_INT 25
15201: PUSH
15202: LD_INT 2
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PPUSH
15213: CALL_OW 69
15217: PUSH
15218: LD_EXP 45
15222: DIFF
15223: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15224: LD_INT 35
15226: PPUSH
15227: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
15231: LD_ADDR_VAR 0 6
15235: PUSH
15236: LD_INT 10
15238: PPUSH
15239: CALL_OW 435
15243: ST_TO_ADDR
// if crates then
15244: LD_VAR 0 6
15248: IFFALSE 15277
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
15250: LD_VAR 0 2
15254: PPUSH
15255: LD_VAR 0 6
15259: PUSH
15260: LD_INT 1
15262: ARRAY
15263: PPUSH
15264: LD_VAR 0 6
15268: PUSH
15269: LD_INT 2
15271: ARRAY
15272: PPUSH
15273: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
15277: LD_VAR 0 4
15281: PPUSH
15282: CALL_OW 274
15286: PPUSH
15287: LD_INT 1
15289: PPUSH
15290: CALL_OW 275
15294: PUSH
15295: LD_INT 40
15297: GREATEREQUAL
15298: IFFALSE 15224
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
15300: LD_ADDR_VAR 0 5
15304: PUSH
15305: LD_INT 4
15307: PUSH
15308: LD_INT 256
15310: PUSH
15311: LD_INT 111
15313: PUSH
15314: LD_INT 2
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 31
15325: PUSH
15326: LD_INT 243
15328: PUSH
15329: LD_INT 112
15331: PUSH
15332: LD_INT 2
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 31
15343: PUSH
15344: LD_INT 254
15346: PUSH
15347: LD_INT 114
15349: PUSH
15350: LD_INT 2
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: LIST
15363: ST_TO_ADDR
// for i in blist do
15364: LD_ADDR_VAR 0 1
15368: PUSH
15369: LD_VAR 0 5
15373: PUSH
15374: FOR_IN
15375: IFFALSE 15424
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
15377: LD_VAR 0 2
15381: PPUSH
15382: LD_VAR 0 1
15386: PUSH
15387: LD_INT 1
15389: ARRAY
15390: PPUSH
15391: LD_VAR 0 1
15395: PUSH
15396: LD_INT 2
15398: ARRAY
15399: PPUSH
15400: LD_VAR 0 1
15404: PUSH
15405: LD_INT 3
15407: ARRAY
15408: PPUSH
15409: LD_VAR 0 1
15413: PUSH
15414: LD_INT 4
15416: ARRAY
15417: PPUSH
15418: CALL_OW 205
15422: GO 15374
15424: POP
15425: POP
// repeat wait ( 0 0$01 ) ;
15426: LD_INT 35
15428: PPUSH
15429: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
15433: LD_INT 22
15435: PUSH
15436: LD_INT 4
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 30
15445: PUSH
15446: LD_INT 4
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 3
15455: PUSH
15456: LD_INT 57
15458: PUSH
15459: EMPTY
15460: LIST
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: LIST
15470: PPUSH
15471: CALL_OW 69
15475: IFFALSE 15426
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15477: LD_VAR 0 3
15481: PPUSH
15482: LD_INT 22
15484: PUSH
15485: LD_INT 4
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: LD_INT 30
15494: PUSH
15495: LD_INT 4
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PPUSH
15506: CALL_OW 69
15510: PUSH
15511: LD_INT 1
15513: ARRAY
15514: PPUSH
15515: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
15519: LD_VAR 0 3
15523: PPUSH
15524: LD_INT 1
15526: PPUSH
15527: CALL_OW 183
// if has_eng > 1 then
15531: LD_VAR 0 2
15535: PUSH
15536: LD_INT 1
15538: GREATER
15539: IFFALSE 15681
// for i = has_eng downto 2 do
15541: LD_ADDR_VAR 0 1
15545: PUSH
15546: DOUBLE
15547: LD_VAR 0 2
15551: INC
15552: ST_TO_ADDR
15553: LD_INT 2
15555: PUSH
15556: FOR_DOWNTO
15557: IFFALSE 15679
// begin if IsInUnit ( has_eng [ i ] ) then
15559: LD_VAR 0 2
15563: PUSH
15564: LD_VAR 0 1
15568: ARRAY
15569: PPUSH
15570: CALL_OW 310
15574: IFFALSE 15591
// ComExitBuilding ( has_eng [ i ] ) ;
15576: LD_VAR 0 2
15580: PUSH
15581: LD_VAR 0 1
15585: ARRAY
15586: PPUSH
15587: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15591: LD_VAR 0 2
15595: PUSH
15596: LD_VAR 0 1
15600: ARRAY
15601: PPUSH
15602: LD_INT 22
15604: PUSH
15605: LD_INT 4
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 30
15614: PUSH
15615: LD_INT 4
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PPUSH
15626: CALL_OW 69
15630: PUSH
15631: LD_INT 1
15633: ARRAY
15634: PPUSH
15635: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15639: LD_VAR 0 2
15643: PUSH
15644: LD_VAR 0 1
15648: ARRAY
15649: PPUSH
15650: LD_INT 1
15652: PPUSH
15653: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15657: LD_ADDR_VAR 0 2
15661: PUSH
15662: LD_VAR 0 2
15666: PPUSH
15667: LD_VAR 0 1
15671: PPUSH
15672: CALL_OW 3
15676: ST_TO_ADDR
// end ;
15677: GO 15556
15679: POP
15680: POP
// repeat wait ( 0 0$01 ) ;
15681: LD_INT 35
15683: PPUSH
15684: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15688: LD_INT 22
15690: PUSH
15691: LD_INT 4
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 30
15700: PUSH
15701: LD_INT 31
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 3
15710: PUSH
15711: LD_INT 57
15713: PUSH
15714: EMPTY
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: LIST
15725: PPUSH
15726: CALL_OW 69
15730: PUSH
15731: LD_INT 1
15733: GREATER
15734: IFFALSE 15681
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15736: LD_ADDR_VAR 0 8
15740: PUSH
15741: LD_EXP 6
15745: PPUSH
15746: LD_INT 25
15748: PUSH
15749: LD_INT 1
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PPUSH
15756: CALL_OW 72
15760: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15761: LD_ADDR_VAR 0 1
15765: PUSH
15766: DOUBLE
15767: LD_INT 1
15769: DEC
15770: ST_TO_ADDR
15771: LD_INT 22
15773: PUSH
15774: LD_INT 4
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 30
15783: PUSH
15784: LD_INT 31
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 3
15793: PUSH
15794: LD_INT 57
15796: PUSH
15797: EMPTY
15798: LIST
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: LIST
15808: PPUSH
15809: CALL_OW 69
15813: PUSH
15814: FOR_TO
15815: IFFALSE 15899
// begin if not sol [ i ] then
15817: LD_VAR 0 8
15821: PUSH
15822: LD_VAR 0 1
15826: ARRAY
15827: NOT
15828: IFFALSE 15832
// break ;
15830: GO 15899
// ComExitBuilding ( sol [ i ] ) ;
15832: LD_VAR 0 8
15836: PUSH
15837: LD_VAR 0 1
15841: ARRAY
15842: PPUSH
15843: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15847: LD_VAR 0 8
15851: PUSH
15852: LD_VAR 0 1
15856: ARRAY
15857: PPUSH
15858: LD_INT 22
15860: PUSH
15861: LD_INT 4
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: LD_INT 30
15870: PUSH
15871: LD_INT 31
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PPUSH
15882: CALL_OW 69
15886: PUSH
15887: LD_VAR 0 1
15891: ARRAY
15892: PPUSH
15893: CALL_OW 180
// end ;
15897: GO 15814
15899: POP
15900: POP
// if sol > 3 then
15901: LD_VAR 0 8
15905: PUSH
15906: LD_INT 3
15908: GREATER
15909: IFFALSE 16026
// begin ComExitBuilding ( sol [ 3 ] ) ;
15911: LD_VAR 0 8
15915: PUSH
15916: LD_INT 3
15918: ARRAY
15919: PPUSH
15920: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15924: LD_VAR 0 8
15928: PUSH
15929: LD_INT 3
15931: ARRAY
15932: PPUSH
15933: LD_INT 246
15935: PPUSH
15936: LD_INT 94
15938: PPUSH
15939: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15943: LD_VAR 0 8
15947: PUSH
15948: LD_INT 3
15950: ARRAY
15951: PPUSH
15952: LD_INT 175
15954: PPUSH
15955: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15959: LD_VAR 0 8
15963: PUSH
15964: LD_INT 3
15966: ARRAY
15967: PPUSH
15968: LD_INT 224
15970: PPUSH
15971: LD_INT 90
15973: PPUSH
15974: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15978: LD_VAR 0 8
15982: PUSH
15983: LD_INT 3
15985: ARRAY
15986: PPUSH
15987: LD_INT 245
15989: PPUSH
15990: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15994: LD_VAR 0 8
15998: PUSH
15999: LD_INT 3
16001: ARRAY
16002: PPUSH
16003: LD_INT 223
16005: PPUSH
16006: LD_INT 110
16008: PPUSH
16009: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
16013: LD_VAR 0 8
16017: PUSH
16018: LD_INT 3
16020: ARRAY
16021: PPUSH
16022: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
16026: LD_VAR 0 2
16030: PPUSH
16031: LD_VAR 0 4
16035: PPUSH
16036: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
16040: LD_INT 22
16042: PUSH
16043: LD_INT 4
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: LD_INT 30
16052: PUSH
16053: LD_INT 4
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PPUSH
16064: CALL_OW 69
16068: PUSH
16069: LD_INT 1
16071: ARRAY
16072: PPUSH
16073: CALL_OW 313
16077: PUSH
16078: LD_INT 6
16080: LESS
16081: IFFALSE 16145
// begin if IsInUnit ( Cornel ) then
16083: LD_EXP 44
16087: PPUSH
16088: CALL_OW 310
16092: IFFALSE 16103
// ComExitBuilding ( Cornel ) ;
16094: LD_EXP 44
16098: PPUSH
16099: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
16103: LD_EXP 44
16107: PPUSH
16108: LD_INT 22
16110: PUSH
16111: LD_INT 4
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 30
16120: PUSH
16121: LD_INT 4
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PPUSH
16132: CALL_OW 69
16136: PUSH
16137: LD_INT 1
16139: ARRAY
16140: PPUSH
16141: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
16145: LD_INT 35
16147: PPUSH
16148: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16152: LD_ADDR_VAR 0 3
16156: PUSH
16157: LD_INT 22
16159: PUSH
16160: LD_INT 4
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 21
16169: PUSH
16170: LD_INT 3
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: LD_INT 3
16179: PUSH
16180: LD_INT 24
16182: PUSH
16183: LD_INT 1000
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: PPUSH
16199: CALL_OW 69
16203: ST_TO_ADDR
// if filter and has_eng then
16204: LD_VAR 0 3
16208: IFFALSE 16216
16210: PUSH
16211: LD_VAR 0 2
16215: AND
16216: IFFALSE 16282
// begin for i in has_eng do
16218: LD_ADDR_VAR 0 1
16222: PUSH
16223: LD_VAR 0 2
16227: PUSH
16228: FOR_IN
16229: IFFALSE 16278
// begin if IsInUnit ( i ) then
16231: LD_VAR 0 1
16235: PPUSH
16236: CALL_OW 310
16240: IFFALSE 16251
// ComExitBuilding ( i ) ;
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 122
// Wait ( 3 ) ;
16251: LD_INT 3
16253: PPUSH
16254: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
16258: LD_VAR 0 1
16262: PPUSH
16263: LD_VAR 0 3
16267: PUSH
16268: LD_INT 1
16270: ARRAY
16271: PPUSH
16272: CALL_OW 130
// end ;
16276: GO 16228
16278: POP
16279: POP
// end else
16280: GO 16338
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
16282: LD_VAR 0 2
16286: IFFALSE 16305
16288: PUSH
16289: LD_VAR 0 2
16293: PPUSH
16294: LD_INT 56
16296: PUSH
16297: EMPTY
16298: LIST
16299: PPUSH
16300: CALL_OW 72
16304: AND
16305: IFFALSE 16338
// for i in has_eng do
16307: LD_ADDR_VAR 0 1
16311: PUSH
16312: LD_VAR 0 2
16316: PUSH
16317: FOR_IN
16318: IFFALSE 16336
// ComEnterUnit ( i , dep ) ;
16320: LD_VAR 0 1
16324: PPUSH
16325: LD_VAR 0 4
16329: PPUSH
16330: CALL_OW 120
16334: GO 16317
16336: POP
16337: POP
// until cornel_prepared ;
16338: LD_EXP 11
16342: IFFALSE 16145
// end ;
16344: PPOPN 8
16346: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
16347: LD_EXP 11
16351: IFFALSE 16888
16353: GO 16355
16355: DISABLE
16356: LD_INT 0
16358: PPUSH
16359: PPUSH
16360: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
16361: LD_ADDR_VAR 0 2
16365: PUSH
16366: LD_INT 22
16368: PUSH
16369: LD_INT 4
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 30
16378: PUSH
16379: LD_INT 4
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PPUSH
16390: CALL_OW 69
16394: PUSH
16395: LD_INT 1
16397: ARRAY
16398: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
16399: LD_EXP 6
16403: PPUSH
16404: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
16408: LD_EXP 45
16412: IFFALSE 16425
16414: PUSH
16415: LD_EXP 45
16419: PPUSH
16420: CALL_OW 310
16424: AND
16425: IFFALSE 16436
// ComExitBuilding ( Bierezov ) ;
16427: LD_EXP 45
16431: PPUSH
16432: CALL_OW 122
// Wait ( 0 0$03 ) ;
16436: LD_INT 105
16438: PPUSH
16439: CALL_OW 67
// for i in cornel_units do
16443: LD_ADDR_VAR 0 1
16447: PUSH
16448: LD_EXP 6
16452: PUSH
16453: FOR_IN
16454: IFFALSE 16530
// begin if GetClass ( i ) in [ 2 , 3 ] then
16456: LD_VAR 0 1
16460: PPUSH
16461: CALL_OW 257
16465: PUSH
16466: LD_INT 2
16468: PUSH
16469: LD_INT 3
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: IN
16476: IFFALSE 16513
// begin ComEnterUnit ( i , arm ) ;
16478: LD_VAR 0 1
16482: PPUSH
16483: LD_VAR 0 2
16487: PPUSH
16488: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
16492: LD_VAR 0 1
16496: PPUSH
16497: LD_INT 1
16499: PPUSH
16500: CALL_OW 183
// AddComExitBuilding ( i ) ;
16504: LD_VAR 0 1
16508: PPUSH
16509: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
16513: LD_VAR 0 1
16517: PPUSH
16518: LD_INT 257
16520: PPUSH
16521: LD_INT 121
16523: PPUSH
16524: CALL_OW 171
// end ;
16528: GO 16453
16530: POP
16531: POP
// Wait ( 1 1$00 ) ;
16532: LD_INT 2100
16534: PPUSH
16535: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
16539: LD_ADDR_VAR 0 3
16543: PUSH
16544: LD_EXP 44
16548: PUSH
16549: LD_EXP 45
16553: ADD
16554: PUSH
16555: LD_EXP 6
16559: ADD
16560: PUSH
16561: LD_EXP 6
16565: PPUSH
16566: LD_INT 21
16568: PUSH
16569: LD_INT 2
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PPUSH
16576: CALL_OW 72
16580: DIFF
16581: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
16582: LD_VAR 0 3
16586: PPUSH
16587: LD_INT 248
16589: PPUSH
16590: LD_INT 85
16592: PPUSH
16593: CALL_OW 111
// AddComHold ( filter ) ;
16597: LD_VAR 0 3
16601: PPUSH
16602: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
16606: LD_INT 35
16608: PPUSH
16609: CALL_OW 67
// until cornel_attack ;
16613: LD_EXP 9
16617: IFFALSE 16606
// ComAgressiveMove ( filter , 209 , 63 ) ;
16619: LD_VAR 0 3
16623: PPUSH
16624: LD_INT 209
16626: PPUSH
16627: LD_INT 63
16629: PPUSH
16630: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16634: LD_EXP 44
16638: PPUSH
16639: LD_INT 208
16641: PPUSH
16642: LD_INT 62
16644: PPUSH
16645: CALL_OW 114
// AddComHold ( Cornel ) ;
16649: LD_EXP 44
16653: PPUSH
16654: CALL_OW 200
// if Bierezov then
16658: LD_EXP 45
16662: IFFALSE 16752
// begin filter := filter diff Bierezov ;
16664: LD_ADDR_VAR 0 3
16668: PUSH
16669: LD_VAR 0 3
16673: PUSH
16674: LD_EXP 45
16678: DIFF
16679: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16680: LD_EXP 45
16684: PPUSH
16685: LD_INT 6
16687: PPUSH
16688: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16692: LD_EXP 45
16696: PPUSH
16697: LD_INT 235
16699: PPUSH
16700: LD_INT 60
16702: PPUSH
16703: CALL_OW 111
// AddComHold ( Bierezov ) ;
16707: LD_EXP 45
16711: PPUSH
16712: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16716: LD_EXP 45
16720: PPUSH
16721: LD_INT 350
16723: PPUSH
16724: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16728: LD_EXP 45
16732: PPUSH
16733: LD_INT 198
16735: PPUSH
16736: LD_INT 28
16738: PPUSH
16739: CALL_OW 171
// AddComHold ( Bierezov ) ;
16743: LD_EXP 45
16747: PPUSH
16748: CALL_OW 200
// end ; filter := filter diff Cornel ;
16752: LD_ADDR_VAR 0 3
16756: PUSH
16757: LD_VAR 0 3
16761: PUSH
16762: LD_EXP 44
16766: DIFF
16767: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16768: LD_INT 70
16770: PPUSH
16771: CALL_OW 67
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16775: LD_EXP 44
16779: PPUSH
16780: LD_INT 208
16782: PPUSH
16783: LD_INT 62
16785: PPUSH
16786: CALL_OW 114
// until not IsInArea ( Cornel , cornelKappaArea ) ;
16790: LD_EXP 44
16794: PPUSH
16795: LD_INT 16
16797: PPUSH
16798: CALL_OW 308
16802: NOT
16803: IFFALSE 16768
// wait ( 0 0$2 ) ;
16805: LD_INT 70
16807: PPUSH
16808: CALL_OW 67
// ComMoveXY ( filter [ 1 ] , 195 , 57 ) ;
16812: LD_VAR 0 3
16816: PUSH
16817: LD_INT 1
16819: ARRAY
16820: PPUSH
16821: LD_INT 195
16823: PPUSH
16824: LD_INT 57
16826: PPUSH
16827: CALL_OW 111
// ComMoveXY ( filter [ 2 ] , 217 , 53 ) ;
16831: LD_VAR 0 3
16835: PUSH
16836: LD_INT 2
16838: ARRAY
16839: PPUSH
16840: LD_INT 217
16842: PPUSH
16843: LD_INT 53
16845: PPUSH
16846: CALL_OW 111
// ComMoveXY ( filter [ 3 ] , 199 , 48 ) ;
16850: LD_VAR 0 3
16854: PUSH
16855: LD_INT 3
16857: ARRAY
16858: PPUSH
16859: LD_INT 199
16861: PPUSH
16862: LD_INT 48
16864: PPUSH
16865: CALL_OW 111
// ComMoveXY ( filter [ 4 ] , 179 , 48 ) ;
16869: LD_VAR 0 3
16873: PUSH
16874: LD_INT 4
16876: ARRAY
16877: PPUSH
16878: LD_INT 179
16880: PPUSH
16881: LD_INT 48
16883: PPUSH
16884: CALL_OW 111
// end ; end_of_file
16888: PPOPN 3
16890: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16891: LD_EXP 53
16895: IFFALSE 16904
16897: PUSH
16898: LD_EXP 31
16902: NOT
16903: AND
16904: IFFALSE 16913
16906: PUSH
16907: LD_EXP 32
16911: NOT
16912: AND
16913: IFFALSE 17369
16915: GO 16917
16917: DISABLE
16918: LD_INT 0
16920: PPUSH
16921: PPUSH
16922: PPUSH
16923: PPUSH
// begin enable ;
16924: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16925: LD_ADDR_VAR 0 4
16929: PUSH
16930: LD_INT 81
16932: PUSH
16933: LD_INT 3
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PPUSH
16940: CALL_OW 69
16944: ST_TO_ADDR
// for i = 1 to ru_patrol do
16945: LD_ADDR_VAR 0 2
16949: PUSH
16950: DOUBLE
16951: LD_INT 1
16953: DEC
16954: ST_TO_ADDR
16955: LD_EXP 53
16959: PUSH
16960: FOR_TO
16961: IFFALSE 17367
// begin un := ru_patrol [ i ] ;
16963: LD_ADDR_VAR 0 1
16967: PUSH
16968: LD_EXP 53
16972: PUSH
16973: LD_VAR 0 2
16977: ARRAY
16978: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16979: LD_VAR 0 1
16983: PPUSH
16984: LD_INT 13
16986: PPUSH
16987: CALL_OW 308
16991: IFFALSE 17096
// begin if not ru_alert then
16993: LD_EXP 60
16997: NOT
16998: IFFALSE 17008
// ru_alert := true ;
17000: LD_ADDR_EXP 60
17004: PUSH
17005: LD_INT 1
17007: ST_TO_ADDR
// if not See ( 1 , un ) then
17008: LD_INT 1
17010: PPUSH
17011: LD_VAR 0 1
17015: PPUSH
17016: CALL_OW 292
17020: NOT
17021: IFFALSE 17035
// SetLives ( un , 1000 ) ;
17023: LD_VAR 0 1
17027: PPUSH
17028: LD_INT 1000
17030: PPUSH
17031: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
17035: LD_ADDR_EXP 53
17039: PUSH
17040: LD_EXP 53
17044: PUSH
17045: LD_VAR 0 1
17049: DIFF
17050: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17051: LD_VAR 0 1
17055: PPUSH
17056: LD_INT 22
17058: PUSH
17059: LD_INT 3
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 30
17068: PUSH
17069: LD_INT 4
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PPUSH
17080: CALL_OW 69
17084: PPUSH
17085: CALL 1007 0 1
17089: PPUSH
17090: CALL_OW 120
// continue ;
17094: GO 16960
// end ; if IsOk ( un ) and not HasTask ( un ) then
17096: LD_VAR 0 1
17100: PPUSH
17101: CALL_OW 302
17105: IFFALSE 17119
17107: PUSH
17108: LD_VAR 0 1
17112: PPUSH
17113: CALL_OW 314
17117: NOT
17118: AND
17119: IFFALSE 17212
// begin for j = 1 to ru_firepoints_south [ i ] do
17121: LD_ADDR_VAR 0 3
17125: PUSH
17126: DOUBLE
17127: LD_INT 1
17129: DEC
17130: ST_TO_ADDR
17131: LD_EXP 59
17135: PUSH
17136: LD_VAR 0 2
17140: ARRAY
17141: PUSH
17142: FOR_TO
17143: IFFALSE 17210
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
17145: LD_VAR 0 1
17149: PPUSH
17150: LD_EXP 59
17154: PUSH
17155: LD_VAR 0 2
17159: ARRAY
17160: PUSH
17161: LD_VAR 0 3
17165: ARRAY
17166: PUSH
17167: LD_INT 1
17169: ARRAY
17170: PPUSH
17171: LD_EXP 59
17175: PUSH
17176: LD_VAR 0 2
17180: ARRAY
17181: PUSH
17182: LD_VAR 0 3
17186: ARRAY
17187: PUSH
17188: LD_INT 2
17190: ARRAY
17191: PPUSH
17192: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
17196: LD_VAR 0 1
17200: PPUSH
17201: LD_INT 70
17203: PPUSH
17204: CALL_OW 202
// end ;
17208: GO 17142
17210: POP
17211: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17212: LD_VAR 0 1
17216: PPUSH
17217: CALL_OW 256
17221: PUSH
17222: LD_INT 700
17224: LESS
17225: IFFALSE 17242
17227: PUSH
17228: LD_VAR 0 1
17232: PPUSH
17233: LD_INT 13
17235: PPUSH
17236: CALL_OW 308
17240: NOT
17241: AND
17242: IFFALSE 17294
// begin ComMoveToArea ( un , retreatArea ) ;
17244: LD_VAR 0 1
17248: PPUSH
17249: LD_INT 13
17251: PPUSH
17252: CALL_OW 113
// if not ru_alert_xy then
17256: LD_EXP 61
17260: NOT
17261: IFFALSE 17292
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
17263: LD_ADDR_EXP 61
17267: PUSH
17268: LD_VAR 0 1
17272: PPUSH
17273: CALL_OW 250
17277: PUSH
17278: LD_VAR 0 1
17282: PPUSH
17283: CALL_OW 251
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: ST_TO_ADDR
// end else
17292: GO 17365
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17294: LD_VAR 0 1
17298: PPUSH
17299: LD_VAR 0 4
17303: PPUSH
17304: LD_VAR 0 1
17308: PPUSH
17309: CALL_OW 74
17313: PPUSH
17314: CALL_OW 296
17318: PUSH
17319: LD_INT 9
17321: LESS
17322: IFFALSE 17339
17324: PUSH
17325: LD_VAR 0 1
17329: PPUSH
17330: CALL_OW 256
17334: PUSH
17335: LD_INT 500
17337: GREATER
17338: AND
17339: IFFALSE 17365
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17341: LD_VAR 0 1
17345: PPUSH
17346: LD_VAR 0 4
17350: PPUSH
17351: LD_VAR 0 1
17355: PPUSH
17356: CALL_OW 74
17360: PPUSH
17361: CALL_OW 115
// end ;
17365: GO 16960
17367: POP
17368: POP
// end ;
17369: PPOPN 4
17371: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
17372: LD_EXP 60
17376: IFFALSE 17384
17378: PUSH
17379: LD_EXP 61
17383: AND
17384: IFFALSE 17393
17386: PUSH
17387: LD_EXP 31
17391: NOT
17392: AND
17393: IFFALSE 17402
17395: PUSH
17396: LD_EXP 32
17400: NOT
17401: AND
17402: IFFALSE 17618
17404: GO 17406
17406: DISABLE
17407: LD_INT 0
17409: PPUSH
17410: PPUSH
// begin enable ;
17411: ENABLE
// if not ru_vehicles then
17412: LD_EXP 56
17416: NOT
17417: IFFALSE 17421
// exit ;
17419: GO 17618
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17421: LD_ADDR_VAR 0 2
17425: PUSH
17426: LD_INT 81
17428: PUSH
17429: LD_INT 3
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PPUSH
17436: CALL_OW 69
17440: ST_TO_ADDR
// if ru_vehicles then
17441: LD_EXP 56
17445: IFFALSE 17618
// begin for i in ru_vehicles do
17447: LD_ADDR_VAR 0 1
17451: PUSH
17452: LD_EXP 56
17456: PUSH
17457: FOR_IN
17458: IFFALSE 17616
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
17460: LD_VAR 0 1
17464: PPUSH
17465: CALL_OW 302
17469: IFFALSE 17501
17471: PUSH
17472: LD_VAR 0 1
17476: PPUSH
17477: LD_VAR 0 2
17481: PPUSH
17482: LD_VAR 0 1
17486: PPUSH
17487: CALL_OW 74
17491: PPUSH
17492: CALL_OW 296
17496: PUSH
17497: LD_INT 9
17499: LESS
17500: AND
17501: IFFALSE 17527
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17503: LD_VAR 0 1
17507: PPUSH
17508: LD_VAR 0 2
17512: PPUSH
17513: LD_VAR 0 1
17517: PPUSH
17518: CALL_OW 74
17522: PPUSH
17523: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
17527: LD_VAR 0 1
17531: PPUSH
17532: CALL_OW 314
17536: NOT
17537: IFFALSE 17550
17539: PUSH
17540: LD_VAR 0 1
17544: PPUSH
17545: CALL_OW 302
17549: AND
17550: IFFALSE 17585
17552: PUSH
17553: LD_VAR 0 1
17557: PPUSH
17558: LD_EXP 61
17562: PUSH
17563: LD_INT 1
17565: ARRAY
17566: PPUSH
17567: LD_EXP 61
17571: PUSH
17572: LD_INT 2
17574: ARRAY
17575: PPUSH
17576: CALL_OW 297
17580: PUSH
17581: LD_INT 10
17583: GREATER
17584: AND
17585: IFFALSE 17614
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
17587: LD_VAR 0 1
17591: PPUSH
17592: LD_EXP 61
17596: PUSH
17597: LD_INT 1
17599: ARRAY
17600: PPUSH
17601: LD_EXP 61
17605: PUSH
17606: LD_INT 2
17608: ARRAY
17609: PPUSH
17610: CALL_OW 114
// end ;
17614: GO 17457
17616: POP
17617: POP
// end ; end ;
17618: PPOPN 2
17620: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
17621: LD_EXP 61
17625: IFFALSE 17633
17627: PUSH
17628: LD_EXP 60
17632: AND
17633: IFFALSE 17645
17635: PUSH
17636: LD_INT 3
17638: PPUSH
17639: CALL_OW 463
17643: NOT
17644: AND
17645: IFFALSE 17654
17647: PUSH
17648: LD_EXP 31
17652: NOT
17653: AND
17654: IFFALSE 17663
17656: PUSH
17657: LD_EXP 32
17661: NOT
17662: AND
17663: IFFALSE 17760
17665: GO 17667
17667: DISABLE
17668: LD_INT 0
17670: PPUSH
// begin enable ;
17671: ENABLE
// ru_alert_xy := false ;
17672: LD_ADDR_EXP 61
17676: PUSH
17677: LD_INT 0
17679: ST_TO_ADDR
// ru_alert := false ;
17680: LD_ADDR_EXP 60
17684: PUSH
17685: LD_INT 0
17687: ST_TO_ADDR
// if ru_vehicles then
17688: LD_EXP 56
17692: IFFALSE 17760
// for i in ru_vehicles do
17694: LD_ADDR_VAR 0 1
17698: PUSH
17699: LD_EXP 56
17703: PUSH
17704: FOR_IN
17705: IFFALSE 17758
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
17707: LD_VAR 0 1
17711: PPUSH
17712: CALL_OW 302
17716: IFFALSE 17739
17718: PUSH
17719: LD_VAR 0 1
17723: PPUSH
17724: LD_INT 89
17726: PPUSH
17727: LD_INT 36
17729: PPUSH
17730: CALL_OW 297
17734: PUSH
17735: LD_INT 10
17737: GREATER
17738: AND
17739: IFFALSE 17756
// ComMoveXY ( i , 89 , 36 ) ;
17741: LD_VAR 0 1
17745: PPUSH
17746: LD_INT 89
17748: PPUSH
17749: LD_INT 36
17751: PPUSH
17752: CALL_OW 111
17756: GO 17704
17758: POP
17759: POP
// end ;
17760: PPOPN 1
17762: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
17763: LD_EXP 55
17767: IFFALSE 17776
17769: PUSH
17770: LD_EXP 31
17774: NOT
17775: AND
17776: IFFALSE 17785
17778: PUSH
17779: LD_EXP 32
17783: NOT
17784: AND
17785: IFFALSE 18073
17787: GO 17789
17789: DISABLE
17790: LD_INT 0
17792: PPUSH
17793: PPUSH
17794: PPUSH
// begin enable ;
17795: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17796: LD_ADDR_VAR 0 3
17800: PUSH
17801: LD_INT 81
17803: PUSH
17804: LD_INT 3
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PPUSH
17811: CALL_OW 69
17815: ST_TO_ADDR
// for i = 1 to ru_forest do
17816: LD_ADDR_VAR 0 1
17820: PUSH
17821: DOUBLE
17822: LD_INT 1
17824: DEC
17825: ST_TO_ADDR
17826: LD_EXP 55
17830: PUSH
17831: FOR_TO
17832: IFFALSE 18071
// begin un := ru_forest [ i ] ;
17834: LD_ADDR_VAR 0 2
17838: PUSH
17839: LD_EXP 55
17843: PUSH
17844: LD_VAR 0 1
17848: ARRAY
17849: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17850: LD_VAR 0 2
17854: PPUSH
17855: LD_INT 13
17857: PPUSH
17858: CALL_OW 308
17862: IFFALSE 17952
// begin if not See ( 1 , un ) then
17864: LD_INT 1
17866: PPUSH
17867: LD_VAR 0 2
17871: PPUSH
17872: CALL_OW 292
17876: NOT
17877: IFFALSE 17891
// SetLives ( un , 1000 ) ;
17879: LD_VAR 0 2
17883: PPUSH
17884: LD_INT 1000
17886: PPUSH
17887: CALL_OW 234
// ru_forest := ru_forest diff un ;
17891: LD_ADDR_EXP 55
17895: PUSH
17896: LD_EXP 55
17900: PUSH
17901: LD_VAR 0 2
17905: DIFF
17906: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17907: LD_VAR 0 2
17911: PPUSH
17912: LD_INT 22
17914: PUSH
17915: LD_INT 3
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 30
17924: PUSH
17925: LD_INT 4
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PPUSH
17936: CALL_OW 69
17940: PPUSH
17941: CALL 1007 0 1
17945: PPUSH
17946: CALL_OW 120
// continue ;
17950: GO 17831
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17952: LD_VAR 0 2
17956: PPUSH
17957: CALL_OW 256
17961: PUSH
17962: LD_INT 700
17964: LESS
17965: IFFALSE 17982
17967: PUSH
17968: LD_VAR 0 2
17972: PPUSH
17973: LD_INT 13
17975: PPUSH
17976: CALL_OW 308
17980: NOT
17981: AND
17982: IFFALSE 17998
// ComMoveToArea ( un , retreatArea ) else
17984: LD_VAR 0 2
17988: PPUSH
17989: LD_INT 13
17991: PPUSH
17992: CALL_OW 113
17996: GO 18069
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17998: LD_VAR 0 2
18002: PPUSH
18003: LD_VAR 0 3
18007: PPUSH
18008: LD_VAR 0 2
18012: PPUSH
18013: CALL_OW 74
18017: PPUSH
18018: CALL_OW 296
18022: PUSH
18023: LD_INT 9
18025: LESS
18026: IFFALSE 18043
18028: PUSH
18029: LD_VAR 0 2
18033: PPUSH
18034: CALL_OW 256
18038: PUSH
18039: LD_INT 500
18041: GREATER
18042: AND
18043: IFFALSE 18069
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
18045: LD_VAR 0 2
18049: PPUSH
18050: LD_VAR 0 3
18054: PPUSH
18055: LD_VAR 0 2
18059: PPUSH
18060: CALL_OW 74
18064: PPUSH
18065: CALL_OW 115
// end ;
18069: GO 17831
18071: POP
18072: POP
// end ;
18073: PPOPN 3
18075: END
// every 0 0$10 trigger not send_attack_on_cornel or IsDead ( Cornel ) do var i , filter ;
18076: LD_EXP 32
18080: NOT
18081: IFTRUE 18094
18083: PUSH
18084: LD_EXP 44
18088: PPUSH
18089: CALL_OW 301
18093: OR
18094: IFFALSE 18255
18096: GO 18098
18098: DISABLE
18099: LD_INT 0
18101: PPUSH
18102: PPUSH
// begin enable ;
18103: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_inarea , ignoreBuildingsArea ] ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 990 ] ] ] ) ;
18104: LD_ADDR_VAR 0 2
18108: PUSH
18109: LD_INT 22
18111: PUSH
18112: LD_INT 3
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 3
18121: PUSH
18122: LD_INT 95
18124: PUSH
18125: LD_INT 18
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 21
18138: PUSH
18139: LD_INT 3
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 3
18148: PUSH
18149: LD_INT 24
18151: PUSH
18152: LD_INT 990
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: PPUSH
18169: CALL_OW 69
18173: ST_TO_ADDR
// if filter then
18174: LD_VAR 0 2
18178: IFFALSE 18255
// for i in filter do
18180: LD_ADDR_VAR 0 1
18184: PUSH
18185: LD_VAR 0 2
18189: PUSH
18190: FOR_IN
18191: IFFALSE 18253
// if GetY ( i ) > 70 then
18193: LD_VAR 0 1
18197: PPUSH
18198: CALL_OW 251
18202: PUSH
18203: LD_INT 70
18205: GREATER
18206: IFFALSE 18212
// continue else
18208: GO 18190
18210: GO 18251
// begin ru_alert := true ;
18212: LD_ADDR_EXP 60
18216: PUSH
18217: LD_INT 1
18219: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
18220: LD_ADDR_EXP 61
18224: PUSH
18225: LD_VAR 0 1
18229: PPUSH
18230: CALL_OW 250
18234: PUSH
18235: LD_VAR 0 1
18239: PPUSH
18240: CALL_OW 251
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: ST_TO_ADDR
// break ;
18249: GO 18253
// end ;
18251: GO 18190
18253: POP
18254: POP
// end ;
18255: PPOPN 2
18257: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
18258: LD_EXP 31
18262: IFFALSE 18415
18264: GO 18266
18266: DISABLE
18267: LD_INT 0
18269: PPUSH
18270: PPUSH
18271: PPUSH
18272: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
18273: LD_ADDR_VAR 0 4
18277: PUSH
18278: LD_EXP 56
18282: PUSH
18283: LD_EXP 55
18287: ADD
18288: PUSH
18289: LD_EXP 53
18293: ADD
18294: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
18295: LD_ADDR_VAR 0 3
18299: PUSH
18300: LD_INT 3
18302: PPUSH
18303: LD_INT 81
18305: PUSH
18306: LD_INT 3
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PPUSH
18313: CALL_OW 70
18317: ST_TO_ADDR
// if filter and enemy then
18318: LD_VAR 0 4
18322: IFFALSE 18330
18324: PUSH
18325: LD_VAR 0 3
18329: AND
18330: IFFALSE 18415
// repeat wait ( 0 0$01 ) ;
18332: LD_INT 35
18334: PPUSH
18335: CALL_OW 67
// for i in filter do
18339: LD_ADDR_VAR 0 1
18343: PUSH
18344: LD_VAR 0 4
18348: PUSH
18349: FOR_IN
18350: IFFALSE 18378
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
18352: LD_VAR 0 1
18356: PPUSH
18357: LD_VAR 0 3
18361: PPUSH
18362: LD_VAR 0 1
18366: PPUSH
18367: CALL_OW 74
18371: PPUSH
18372: CALL_OW 115
// end ;
18376: GO 18349
18378: POP
18379: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
18380: LD_INT 3
18382: PPUSH
18383: LD_INT 81
18385: PUSH
18386: LD_INT 3
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PPUSH
18393: CALL_OW 70
18397: PUSH
18398: LD_INT 0
18400: EQUAL
18401: IFTRUE 18413
18403: PUSH
18404: LD_VAR 0 4
18408: PUSH
18409: LD_INT 0
18411: EQUAL
18412: OR
18413: IFFALSE 18332
// end ;
18415: PPOPN 4
18417: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
18418: LD_EXP 26
18422: IFFALSE 18468
18424: PUSH
18425: LD_INT 22
18427: PUSH
18428: LD_INT 4
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 30
18437: PUSH
18438: LD_INT 4
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 3
18447: PUSH
18448: LD_INT 57
18450: PUSH
18451: EMPTY
18452: LIST
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: LIST
18462: PPUSH
18463: CALL_OW 69
18467: AND
18468: IFFALSE 18517
18470: GO 18472
18472: DISABLE
18473: LD_INT 0
18475: PPUSH
// begin if not ru_cornel_attack then
18476: LD_EXP 58
18480: NOT
18481: IFFALSE 18485
// exit ;
18483: GO 18517
// for i in ru_cornel_attack do
18485: LD_ADDR_VAR 0 1
18489: PUSH
18490: LD_EXP 58
18494: PUSH
18495: FOR_IN
18496: IFFALSE 18515
// ComAgressiveMove ( i , 258 , 119 ) ;
18498: LD_VAR 0 1
18502: PPUSH
18503: LD_INT 258
18505: PPUSH
18506: LD_INT 119
18508: PPUSH
18509: CALL_OW 114
18513: GO 18495
18515: POP
18516: POP
// end ; end_of_file
18517: PPOPN 1
18519: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r , x ;
18520: LD_EXP 5
18524: IFFALSE 18533
18526: PUSH
18527: LD_EXP 9
18531: NOT
18532: AND
18533: IFFALSE 18541
18535: PUSH
18536: LD_EXP 20
18540: AND
18541: IFFALSE 18666
18543: GO 18545
18545: DISABLE
18546: LD_INT 0
18548: PPUSH
18549: PPUSH
// begin enable ;
18550: ENABLE
// x := rand ( 2 , 5 ) ;
18551: LD_ADDR_VAR 0 2
18555: PUSH
18556: LD_INT 2
18558: PPUSH
18559: LD_INT 5
18561: PPUSH
18562: CALL_OW 12
18566: ST_TO_ADDR
// crates_counter := crates_counter - ( x * 10 ) ;
18567: LD_ADDR_EXP 20
18571: PUSH
18572: LD_EXP 20
18576: PUSH
18577: LD_VAR 0 2
18581: PUSH
18582: LD_INT 10
18584: MUL
18585: MINUS
18586: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , x , true ) ;
18587: LD_INT 8
18589: PPUSH
18590: LD_VAR 0 2
18594: PPUSH
18595: LD_INT 1
18597: PPUSH
18598: CALL_OW 55
// wait ( rand ( 0 0$41 , 0 0$57 ) ) ;
18602: LD_INT 1435
18604: PPUSH
18605: LD_INT 1995
18607: PPUSH
18608: CALL_OW 12
18612: PPUSH
18613: CALL_OW 67
// r := rand ( 1 , Difficulty ) ;
18617: LD_ADDR_VAR 0 1
18621: PUSH
18622: LD_INT 1
18624: PPUSH
18625: LD_OWVAR 67
18629: PPUSH
18630: CALL_OW 12
18634: ST_TO_ADDR
// if r < 3 then
18635: LD_VAR 0 1
18639: PUSH
18640: LD_INT 3
18642: LESS
18643: IFFALSE 18666
// CreateCratesArea ( westBaseSpot , rand ( 1 , 5 ) , true ) ;
18645: LD_INT 4
18647: PPUSH
18648: LD_INT 1
18650: PPUSH
18651: LD_INT 5
18653: PPUSH
18654: CALL_OW 12
18658: PPUSH
18659: LD_INT 1
18661: PPUSH
18662: CALL_OW 55
// end ;
18666: PPOPN 2
18668: END
// every 0 0$01 trigger cornel_active do
18669: LD_EXP 8
18673: IFFALSE 18762
18675: GO 18677
18677: DISABLE
// begin Wait ( 0 0$03 ) ;
18678: LD_INT 105
18680: PPUSH
18681: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18685: LD_INT 2
18687: PPUSH
18688: LD_INT 5
18690: PPUSH
18691: CALL_OW 12
18695: PPUSH
18696: LD_INT 10
18698: PPUSH
18699: LD_INT 1
18701: PPUSH
18702: CALL_OW 55
// Wait ( 0 0$13 ) ;
18706: LD_INT 455
18708: PPUSH
18709: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18713: LD_INT 2
18715: PPUSH
18716: LD_INT 5
18718: PPUSH
18719: CALL_OW 12
18723: PPUSH
18724: LD_INT 10
18726: PPUSH
18727: LD_INT 1
18729: PPUSH
18730: CALL_OW 55
// Wait ( 0 0$16 ) ;
18734: LD_INT 560
18736: PPUSH
18737: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18741: LD_INT 2
18743: PPUSH
18744: LD_INT 5
18746: PPUSH
18747: CALL_OW 12
18751: PPUSH
18752: LD_INT 10
18754: PPUSH
18755: LD_INT 1
18757: PPUSH
18758: CALL_OW 55
// end ; end_of_file
18762: END
// every 0 0$01 trigger cornel_prepared do
18763: LD_EXP 11
18767: IFFALSE 18826
18769: GO 18771
18771: DISABLE
// begin enable ;
18772: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
18773: LD_ADDR_OWVAR 47
18777: PUSH
18778: LD_STRING #Am03-1
18780: PUSH
18781: LD_EXP 10
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
18790: LD_ADDR_EXP 10
18794: PUSH
18795: LD_EXP 10
18799: PPUSH
18800: LD_STRING -
18802: PPUSH
18803: CALL 1077 0 2
18807: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
18808: LD_EXP 10
18812: PUSH
18813: LD_INT 0
18815: EQUAL
18816: IFFALSE 18826
// begin Display_Strings := [ ] ;
18818: LD_ADDR_OWVAR 47
18822: PUSH
18823: EMPTY
18824: ST_TO_ADDR
// disable ;
18825: DISABLE
// end ; end ;
18826: END
// every 0 0$01 trigger debug and debug_strings do
18827: LD_EXP 1
18831: IFFALSE 18839
18833: PUSH
18834: LD_OWVAR 48
18838: AND
18839: IFFALSE 18855
18841: GO 18843
18843: DISABLE
// begin enable ;
18844: ENABLE
// Display_Strings := debug_strings ;
18845: LD_ADDR_OWVAR 47
18849: PUSH
18850: LD_OWVAR 48
18854: ST_TO_ADDR
// end ; end_of_file
18855: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
18856: LD_VAR 0 1
18860: PPUSH
18861: LD_VAR 0 2
18865: PPUSH
18866: CALL 35683 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
18870: LD_VAR 0 1
18874: PPUSH
18875: CALL_OW 255
18879: PUSH
18880: LD_INT 1
18882: EQUAL
18883: IFFALSE 18892
18885: PUSH
18886: LD_EXP 14
18890: NOT
18891: AND
18892: IFFALSE 18902
// solar_builded := true ;
18894: LD_ADDR_EXP 14
18898: PUSH
18899: LD_INT 1
18901: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18902: LD_VAR 0 1
18906: PPUSH
18907: CALL_OW 255
18911: PUSH
18912: LD_INT 1
18914: EQUAL
18915: IFFALSE 18923
18917: PUSH
18918: LD_EXP 29
18922: AND
18923: IFFALSE 18960
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18925: LD_ADDR_EXP 29
18929: PUSH
18930: LD_EXP 29
18934: PUSH
18935: LD_INT 1750
18937: PUSH
18938: LD_INT 1400
18940: PUSH
18941: LD_INT 1225
18943: PUSH
18944: LD_INT 1050
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: PUSH
18953: LD_OWVAR 67
18957: ARRAY
18958: PLUS
18959: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18960: LD_VAR 0 1
18964: PPUSH
18965: CALL_OW 255
18969: PUSH
18970: LD_INT 3
18972: EQUAL
18973: IFFALSE 18991
// ru_vehicles := ru_vehicles ^ veh ;
18975: LD_ADDR_EXP 56
18979: PUSH
18980: LD_EXP 56
18984: PUSH
18985: LD_VAR 0 1
18989: ADD
18990: ST_TO_ADDR
// end ;
18991: PPOPN 2
18993: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18994: LD_VAR 0 1
18998: PPUSH
18999: CALL 35625 0 1
// if un in ru_patrol then
19003: LD_VAR 0 1
19007: PUSH
19008: LD_EXP 53
19012: IN
19013: IFFALSE 19031
// ru_patrol := ru_patrol diff un ;
19015: LD_ADDR_EXP 53
19019: PUSH
19020: LD_EXP 53
19024: PUSH
19025: LD_VAR 0 1
19029: DIFF
19030: ST_TO_ADDR
// if un in ru_forest then
19031: LD_VAR 0 1
19035: PUSH
19036: LD_EXP 55
19040: IN
19041: IFFALSE 19059
// ru_forest := ru_forest diff un ;
19043: LD_ADDR_EXP 55
19047: PUSH
19048: LD_EXP 55
19052: PUSH
19053: LD_VAR 0 1
19057: DIFF
19058: ST_TO_ADDR
// if un in ru_vehicles then
19059: LD_VAR 0 1
19063: PUSH
19064: LD_EXP 56
19068: IN
19069: IFFALSE 19175
// begin ru_vehicles := ru_vehicles diff un ;
19071: LD_ADDR_EXP 56
19075: PUSH
19076: LD_EXP 56
19080: PUSH
19081: LD_VAR 0 1
19085: DIFF
19086: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
19087: LD_ADDR_EXP 57
19091: PUSH
19092: LD_EXP 57
19096: PUSH
19097: LD_VAR 0 1
19101: PPUSH
19102: CALL_OW 265
19106: PUSH
19107: LD_VAR 0 1
19111: PPUSH
19112: CALL_OW 262
19116: PUSH
19117: LD_VAR 0 1
19121: PPUSH
19122: CALL_OW 263
19126: PUSH
19127: LD_VAR 0 1
19131: PPUSH
19132: CALL_OW 264
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: ADD
19143: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
19144: LD_ADDR_EXP 13
19148: PUSH
19149: LD_EXP 13
19153: PUSH
19154: LD_INT 1
19156: PLUS
19157: ST_TO_ADDR
// if ach_counter = 10 then
19158: LD_EXP 13
19162: PUSH
19163: LD_INT 10
19165: EQUAL
19166: IFFALSE 19175
// SetAchievement ( ACH_FAUST ) ;
19168: LD_STRING ACH_FAUST
19170: PPUSH
19171: CALL_OW 543
// end ; if un = Pokryshkin then
19175: LD_VAR 0 1
19179: PUSH
19180: LD_EXP 52
19184: EQUAL
19185: IFFALSE 19194
// SetAchievement ( ACH_POKR ) ;
19187: LD_STRING ACH_POKR
19189: PPUSH
19190: CALL_OW 543
// if un = JMM then
19194: LD_VAR 0 1
19198: PUSH
19199: LD_EXP 37
19203: EQUAL
19204: IFFALSE 19213
// YouLost ( 0 ) ;
19206: LD_STRING 0
19208: PPUSH
19209: CALL_OW 104
// if un = us_dep_west then
19213: LD_VAR 0 1
19217: PUSH
19218: LD_INT 1
19220: EQUAL
19221: IFFALSE 19230
// YouLost ( 2 ) ;
19223: LD_STRING 2
19225: PPUSH
19226: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
19230: LD_VAR 0 1
19234: PPUSH
19235: CALL_OW 255
19239: PUSH
19240: LD_INT 8
19242: EQUAL
19243: IFFALSE 19252
19245: PUSH
19246: LD_EXP 5
19250: NOT
19251: AND
19252: IFFALSE 19261
// YouLost ( 4 ) ;
19254: LD_STRING 4
19256: PPUSH
19257: CALL_OW 104
// if un in jmm_units then
19261: LD_VAR 0 1
19265: PUSH
19266: LD_EXP 4
19270: IN
19271: IFFALSE 19287
// lose_counter := lose_counter + 1 ;
19273: LD_ADDR_EXP 34
19277: PUSH
19278: LD_EXP 34
19282: PUSH
19283: LD_INT 1
19285: PLUS
19286: ST_TO_ADDR
// end ;
19287: PPOPN 1
19289: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
19290: LD_INT 0
19292: PPUSH
19293: PPUSH
// begin if GetSide ( driver ) = 3 then
19294: LD_VAR 0 1
19298: PPUSH
19299: CALL_OW 255
19303: PUSH
19304: LD_INT 3
19306: EQUAL
19307: IFFALSE 19385
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
19309: LD_ADDR_VAR 0 6
19313: PUSH
19314: LD_INT 22
19316: PUSH
19317: LD_INT 3
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 30
19326: PUSH
19327: LD_INT 3
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PPUSH
19338: CALL_OW 69
19342: PPUSH
19343: CALL 1007 0 1
19347: ST_TO_ADDR
// if place then
19348: LD_VAR 0 6
19352: IFFALSE 19370
// ComEnterUnit ( driver , place ) else
19354: LD_VAR 0 1
19358: PPUSH
19359: LD_VAR 0 6
19363: PPUSH
19364: CALL_OW 120
19368: GO 19385
// ComMoveXY ( driver , 70 , 22 ) ;
19370: LD_VAR 0 1
19374: PPUSH
19375: LD_INT 70
19377: PPUSH
19378: LD_INT 22
19380: PPUSH
19381: CALL_OW 111
// end ; end ;
19385: PPOPN 6
19387: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
19388: LD_VAR 0 1
19392: PUSH
19393: LD_INT 1
19395: EQUAL
19396: IFFALSE 19429
19398: PUSH
19399: LD_VAR 0 2
19403: PUSH
19404: LD_INT 4
19406: EQUAL
19407: IFTRUE 19428
19409: PUSH
19410: LD_VAR 0 2
19414: PUSH
19415: LD_INT 8
19417: EQUAL
19418: IFFALSE 19427
19420: PUSH
19421: LD_EXP 5
19425: NOT
19426: AND
19427: OR
19428: AND
19429: IFFALSE 19438
// YouLost ( 5 ) ;
19431: LD_STRING 5
19433: PPUSH
19434: CALL_OW 104
// end ;
19438: PPOPN 2
19440: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
19441: LD_EXP 36
19445: PUSH
19446: LD_INT 22
19448: PUSH
19449: LD_INT 1
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 21
19458: PUSH
19459: LD_INT 1
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PPUSH
19470: CALL_OW 69
19474: PUSH
19475: LD_INT 22
19477: PUSH
19478: LD_INT 8
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 21
19487: PUSH
19488: LD_INT 1
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PPUSH
19499: CALL_OW 69
19503: ADD
19504: PLUS
19505: PUSH
19506: LD_INT 5
19508: LESS
19509: IFFALSE 19521
19511: GO 19513
19513: DISABLE
// YouLost ( 1 ) ;
19514: LD_STRING 1
19516: PPUSH
19517: CALL_OW 104
19521: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
19522: LD_INT 1
19524: PPUSH
19525: CALL_OW 255
19529: PUSH
19530: LD_INT 3
19532: EQUAL
19533: IFFALSE 19545
19535: GO 19537
19537: DISABLE
// YouLost ( 3 ) ; end_of_file end_of_file
19538: LD_STRING 3
19540: PPUSH
19541: CALL_OW 104
19545: END
// export globalGameSaveCounter ; every 0 0$1 do
19546: GO 19548
19548: DISABLE
// begin enable ;
19549: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19550: LD_STRING updateTimer(
19552: PUSH
19553: LD_OWVAR 1
19557: STR
19558: PUSH
19559: LD_STRING );
19561: STR
19562: PPUSH
19563: CALL_OW 559
// end ;
19567: END
// every 0 0$1 do
19568: GO 19570
19570: DISABLE
// begin globalGameSaveCounter := 0 ;
19571: LD_ADDR_EXP 62
19575: PUSH
19576: LD_INT 0
19578: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19579: LD_STRING setGameSaveCounter(0)
19581: PPUSH
19582: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19586: LD_STRING initStreamRollete();
19588: PPUSH
19589: CALL_OW 559
// InitStreamMode ;
19593: CALL 20938 0 0
// DefineStreamItems ( false ) ;
19597: LD_INT 0
19599: PPUSH
19600: CALL 21402 0 1
// end ;
19604: END
// export function SOS_MapStart ( ) ; begin
19605: LD_INT 0
19607: PPUSH
// if streamModeActive then
19608: LD_EXP 63
19612: IFFALSE 19621
// DefineStreamItems ( true ) ;
19614: LD_INT 1
19616: PPUSH
19617: CALL 21402 0 1
// UpdateLuaVariables ( ) ;
19621: CALL 19638 0 0
// UpdateFactoryWaypoints ( ) ;
19625: CALL 34524 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19629: CALL 34776 0 0
// end ;
19633: LD_VAR 0 1
19637: RET
// function UpdateLuaVariables ( ) ; begin
19638: LD_INT 0
19640: PPUSH
// if globalGameSaveCounter then
19641: LD_EXP 62
19645: IFFALSE 19679
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19647: LD_ADDR_EXP 62
19651: PUSH
19652: LD_EXP 62
19656: PPUSH
19657: CALL 80556 0 1
19661: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19662: LD_STRING setGameSaveCounter(
19664: PUSH
19665: LD_EXP 62
19669: STR
19670: PUSH
19671: LD_STRING )
19673: STR
19674: PPUSH
19675: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19679: LD_STRING setGameDifficulty(
19681: PUSH
19682: LD_OWVAR 67
19686: STR
19687: PUSH
19688: LD_STRING )
19690: STR
19691: PPUSH
19692: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19696: LD_STRING displayDifficulty(
19698: PUSH
19699: LD_OWVAR 67
19703: STR
19704: PUSH
19705: LD_STRING )
19707: STR
19708: PPUSH
19709: CALL_OW 559
// end ;
19713: LD_VAR 0 1
19717: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19718: LD_INT 0
19720: PPUSH
// if p2 = stream_mode then
19721: LD_VAR 0 2
19725: PUSH
19726: LD_INT 100
19728: EQUAL
19729: IFFALSE 20732
// begin if not StreamModeActive then
19731: LD_EXP 63
19735: NOT
19736: IFFALSE 19746
// StreamModeActive := true ;
19738: LD_ADDR_EXP 63
19742: PUSH
19743: LD_INT 1
19745: ST_TO_ADDR
// if p3 = 0 then
19746: LD_VAR 0 3
19750: PUSH
19751: LD_INT 0
19753: EQUAL
19754: IFFALSE 19760
// InitStreamMode ;
19756: CALL 20938 0 0
// if p3 = 1 then
19760: LD_VAR 0 3
19764: PUSH
19765: LD_INT 1
19767: EQUAL
19768: IFFALSE 19778
// sRocket := true ;
19770: LD_ADDR_EXP 68
19774: PUSH
19775: LD_INT 1
19777: ST_TO_ADDR
// if p3 = 2 then
19778: LD_VAR 0 3
19782: PUSH
19783: LD_INT 2
19785: EQUAL
19786: IFFALSE 19796
// sSpeed := true ;
19788: LD_ADDR_EXP 67
19792: PUSH
19793: LD_INT 1
19795: ST_TO_ADDR
// if p3 = 3 then
19796: LD_VAR 0 3
19800: PUSH
19801: LD_INT 3
19803: EQUAL
19804: IFFALSE 19814
// sEngine := true ;
19806: LD_ADDR_EXP 69
19810: PUSH
19811: LD_INT 1
19813: ST_TO_ADDR
// if p3 = 4 then
19814: LD_VAR 0 3
19818: PUSH
19819: LD_INT 4
19821: EQUAL
19822: IFFALSE 19832
// sSpec := true ;
19824: LD_ADDR_EXP 66
19828: PUSH
19829: LD_INT 1
19831: ST_TO_ADDR
// if p3 = 5 then
19832: LD_VAR 0 3
19836: PUSH
19837: LD_INT 5
19839: EQUAL
19840: IFFALSE 19850
// sLevel := true ;
19842: LD_ADDR_EXP 70
19846: PUSH
19847: LD_INT 1
19849: ST_TO_ADDR
// if p3 = 6 then
19850: LD_VAR 0 3
19854: PUSH
19855: LD_INT 6
19857: EQUAL
19858: IFFALSE 19868
// sArmoury := true ;
19860: LD_ADDR_EXP 71
19864: PUSH
19865: LD_INT 1
19867: ST_TO_ADDR
// if p3 = 7 then
19868: LD_VAR 0 3
19872: PUSH
19873: LD_INT 7
19875: EQUAL
19876: IFFALSE 19886
// sRadar := true ;
19878: LD_ADDR_EXP 72
19882: PUSH
19883: LD_INT 1
19885: ST_TO_ADDR
// if p3 = 8 then
19886: LD_VAR 0 3
19890: PUSH
19891: LD_INT 8
19893: EQUAL
19894: IFFALSE 19904
// sBunker := true ;
19896: LD_ADDR_EXP 73
19900: PUSH
19901: LD_INT 1
19903: ST_TO_ADDR
// if p3 = 9 then
19904: LD_VAR 0 3
19908: PUSH
19909: LD_INT 9
19911: EQUAL
19912: IFFALSE 19922
// sHack := true ;
19914: LD_ADDR_EXP 74
19918: PUSH
19919: LD_INT 1
19921: ST_TO_ADDR
// if p3 = 10 then
19922: LD_VAR 0 3
19926: PUSH
19927: LD_INT 10
19929: EQUAL
19930: IFFALSE 19940
// sFire := true ;
19932: LD_ADDR_EXP 75
19936: PUSH
19937: LD_INT 1
19939: ST_TO_ADDR
// if p3 = 11 then
19940: LD_VAR 0 3
19944: PUSH
19945: LD_INT 11
19947: EQUAL
19948: IFFALSE 19958
// sRefresh := true ;
19950: LD_ADDR_EXP 76
19954: PUSH
19955: LD_INT 1
19957: ST_TO_ADDR
// if p3 = 12 then
19958: LD_VAR 0 3
19962: PUSH
19963: LD_INT 12
19965: EQUAL
19966: IFFALSE 19976
// sExp := true ;
19968: LD_ADDR_EXP 77
19972: PUSH
19973: LD_INT 1
19975: ST_TO_ADDR
// if p3 = 13 then
19976: LD_VAR 0 3
19980: PUSH
19981: LD_INT 13
19983: EQUAL
19984: IFFALSE 19994
// sDepot := true ;
19986: LD_ADDR_EXP 78
19990: PUSH
19991: LD_INT 1
19993: ST_TO_ADDR
// if p3 = 14 then
19994: LD_VAR 0 3
19998: PUSH
19999: LD_INT 14
20001: EQUAL
20002: IFFALSE 20012
// sFlag := true ;
20004: LD_ADDR_EXP 79
20008: PUSH
20009: LD_INT 1
20011: ST_TO_ADDR
// if p3 = 15 then
20012: LD_VAR 0 3
20016: PUSH
20017: LD_INT 15
20019: EQUAL
20020: IFFALSE 20030
// sKamikadze := true ;
20022: LD_ADDR_EXP 87
20026: PUSH
20027: LD_INT 1
20029: ST_TO_ADDR
// if p3 = 16 then
20030: LD_VAR 0 3
20034: PUSH
20035: LD_INT 16
20037: EQUAL
20038: IFFALSE 20048
// sTroll := true ;
20040: LD_ADDR_EXP 88
20044: PUSH
20045: LD_INT 1
20047: ST_TO_ADDR
// if p3 = 17 then
20048: LD_VAR 0 3
20052: PUSH
20053: LD_INT 17
20055: EQUAL
20056: IFFALSE 20066
// sSlow := true ;
20058: LD_ADDR_EXP 89
20062: PUSH
20063: LD_INT 1
20065: ST_TO_ADDR
// if p3 = 18 then
20066: LD_VAR 0 3
20070: PUSH
20071: LD_INT 18
20073: EQUAL
20074: IFFALSE 20084
// sLack := true ;
20076: LD_ADDR_EXP 90
20080: PUSH
20081: LD_INT 1
20083: ST_TO_ADDR
// if p3 = 19 then
20084: LD_VAR 0 3
20088: PUSH
20089: LD_INT 19
20091: EQUAL
20092: IFFALSE 20102
// sTank := true ;
20094: LD_ADDR_EXP 92
20098: PUSH
20099: LD_INT 1
20101: ST_TO_ADDR
// if p3 = 20 then
20102: LD_VAR 0 3
20106: PUSH
20107: LD_INT 20
20109: EQUAL
20110: IFFALSE 20120
// sRemote := true ;
20112: LD_ADDR_EXP 93
20116: PUSH
20117: LD_INT 1
20119: ST_TO_ADDR
// if p3 = 21 then
20120: LD_VAR 0 3
20124: PUSH
20125: LD_INT 21
20127: EQUAL
20128: IFFALSE 20138
// sPowell := true ;
20130: LD_ADDR_EXP 94
20134: PUSH
20135: LD_INT 1
20137: ST_TO_ADDR
// if p3 = 22 then
20138: LD_VAR 0 3
20142: PUSH
20143: LD_INT 22
20145: EQUAL
20146: IFFALSE 20156
// sTeleport := true ;
20148: LD_ADDR_EXP 97
20152: PUSH
20153: LD_INT 1
20155: ST_TO_ADDR
// if p3 = 23 then
20156: LD_VAR 0 3
20160: PUSH
20161: LD_INT 23
20163: EQUAL
20164: IFFALSE 20174
// sOilTower := true ;
20166: LD_ADDR_EXP 99
20170: PUSH
20171: LD_INT 1
20173: ST_TO_ADDR
// if p3 = 24 then
20174: LD_VAR 0 3
20178: PUSH
20179: LD_INT 24
20181: EQUAL
20182: IFFALSE 20192
// sShovel := true ;
20184: LD_ADDR_EXP 100
20188: PUSH
20189: LD_INT 1
20191: ST_TO_ADDR
// if p3 = 25 then
20192: LD_VAR 0 3
20196: PUSH
20197: LD_INT 25
20199: EQUAL
20200: IFFALSE 20210
// sSheik := true ;
20202: LD_ADDR_EXP 101
20206: PUSH
20207: LD_INT 1
20209: ST_TO_ADDR
// if p3 = 26 then
20210: LD_VAR 0 3
20214: PUSH
20215: LD_INT 26
20217: EQUAL
20218: IFFALSE 20228
// sEarthquake := true ;
20220: LD_ADDR_EXP 103
20224: PUSH
20225: LD_INT 1
20227: ST_TO_ADDR
// if p3 = 27 then
20228: LD_VAR 0 3
20232: PUSH
20233: LD_INT 27
20235: EQUAL
20236: IFFALSE 20246
// sAI := true ;
20238: LD_ADDR_EXP 104
20242: PUSH
20243: LD_INT 1
20245: ST_TO_ADDR
// if p3 = 28 then
20246: LD_VAR 0 3
20250: PUSH
20251: LD_INT 28
20253: EQUAL
20254: IFFALSE 20264
// sCargo := true ;
20256: LD_ADDR_EXP 107
20260: PUSH
20261: LD_INT 1
20263: ST_TO_ADDR
// if p3 = 29 then
20264: LD_VAR 0 3
20268: PUSH
20269: LD_INT 29
20271: EQUAL
20272: IFFALSE 20282
// sDLaser := true ;
20274: LD_ADDR_EXP 108
20278: PUSH
20279: LD_INT 1
20281: ST_TO_ADDR
// if p3 = 30 then
20282: LD_VAR 0 3
20286: PUSH
20287: LD_INT 30
20289: EQUAL
20290: IFFALSE 20300
// sExchange := true ;
20292: LD_ADDR_EXP 109
20296: PUSH
20297: LD_INT 1
20299: ST_TO_ADDR
// if p3 = 31 then
20300: LD_VAR 0 3
20304: PUSH
20305: LD_INT 31
20307: EQUAL
20308: IFFALSE 20318
// sFac := true ;
20310: LD_ADDR_EXP 110
20314: PUSH
20315: LD_INT 1
20317: ST_TO_ADDR
// if p3 = 32 then
20318: LD_VAR 0 3
20322: PUSH
20323: LD_INT 32
20325: EQUAL
20326: IFFALSE 20336
// sPower := true ;
20328: LD_ADDR_EXP 111
20332: PUSH
20333: LD_INT 1
20335: ST_TO_ADDR
// if p3 = 33 then
20336: LD_VAR 0 3
20340: PUSH
20341: LD_INT 33
20343: EQUAL
20344: IFFALSE 20354
// sRandom := true ;
20346: LD_ADDR_EXP 112
20350: PUSH
20351: LD_INT 1
20353: ST_TO_ADDR
// if p3 = 34 then
20354: LD_VAR 0 3
20358: PUSH
20359: LD_INT 34
20361: EQUAL
20362: IFFALSE 20372
// sShield := true ;
20364: LD_ADDR_EXP 113
20368: PUSH
20369: LD_INT 1
20371: ST_TO_ADDR
// if p3 = 35 then
20372: LD_VAR 0 3
20376: PUSH
20377: LD_INT 35
20379: EQUAL
20380: IFFALSE 20390
// sTime := true ;
20382: LD_ADDR_EXP 114
20386: PUSH
20387: LD_INT 1
20389: ST_TO_ADDR
// if p3 = 36 then
20390: LD_VAR 0 3
20394: PUSH
20395: LD_INT 36
20397: EQUAL
20398: IFFALSE 20408
// sTools := true ;
20400: LD_ADDR_EXP 115
20404: PUSH
20405: LD_INT 1
20407: ST_TO_ADDR
// if p3 = 101 then
20408: LD_VAR 0 3
20412: PUSH
20413: LD_INT 101
20415: EQUAL
20416: IFFALSE 20426
// sSold := true ;
20418: LD_ADDR_EXP 80
20422: PUSH
20423: LD_INT 1
20425: ST_TO_ADDR
// if p3 = 102 then
20426: LD_VAR 0 3
20430: PUSH
20431: LD_INT 102
20433: EQUAL
20434: IFFALSE 20444
// sDiff := true ;
20436: LD_ADDR_EXP 81
20440: PUSH
20441: LD_INT 1
20443: ST_TO_ADDR
// if p3 = 103 then
20444: LD_VAR 0 3
20448: PUSH
20449: LD_INT 103
20451: EQUAL
20452: IFFALSE 20462
// sFog := true ;
20454: LD_ADDR_EXP 84
20458: PUSH
20459: LD_INT 1
20461: ST_TO_ADDR
// if p3 = 104 then
20462: LD_VAR 0 3
20466: PUSH
20467: LD_INT 104
20469: EQUAL
20470: IFFALSE 20480
// sReset := true ;
20472: LD_ADDR_EXP 85
20476: PUSH
20477: LD_INT 1
20479: ST_TO_ADDR
// if p3 = 105 then
20480: LD_VAR 0 3
20484: PUSH
20485: LD_INT 105
20487: EQUAL
20488: IFFALSE 20498
// sSun := true ;
20490: LD_ADDR_EXP 86
20494: PUSH
20495: LD_INT 1
20497: ST_TO_ADDR
// if p3 = 106 then
20498: LD_VAR 0 3
20502: PUSH
20503: LD_INT 106
20505: EQUAL
20506: IFFALSE 20516
// sTiger := true ;
20508: LD_ADDR_EXP 82
20512: PUSH
20513: LD_INT 1
20515: ST_TO_ADDR
// if p3 = 107 then
20516: LD_VAR 0 3
20520: PUSH
20521: LD_INT 107
20523: EQUAL
20524: IFFALSE 20534
// sBomb := true ;
20526: LD_ADDR_EXP 83
20530: PUSH
20531: LD_INT 1
20533: ST_TO_ADDR
// if p3 = 108 then
20534: LD_VAR 0 3
20538: PUSH
20539: LD_INT 108
20541: EQUAL
20542: IFFALSE 20552
// sWound := true ;
20544: LD_ADDR_EXP 91
20548: PUSH
20549: LD_INT 1
20551: ST_TO_ADDR
// if p3 = 109 then
20552: LD_VAR 0 3
20556: PUSH
20557: LD_INT 109
20559: EQUAL
20560: IFFALSE 20570
// sBetray := true ;
20562: LD_ADDR_EXP 95
20566: PUSH
20567: LD_INT 1
20569: ST_TO_ADDR
// if p3 = 110 then
20570: LD_VAR 0 3
20574: PUSH
20575: LD_INT 110
20577: EQUAL
20578: IFFALSE 20588
// sContamin := true ;
20580: LD_ADDR_EXP 96
20584: PUSH
20585: LD_INT 1
20587: ST_TO_ADDR
// if p3 = 111 then
20588: LD_VAR 0 3
20592: PUSH
20593: LD_INT 111
20595: EQUAL
20596: IFFALSE 20606
// sOil := true ;
20598: LD_ADDR_EXP 98
20602: PUSH
20603: LD_INT 1
20605: ST_TO_ADDR
// if p3 = 112 then
20606: LD_VAR 0 3
20610: PUSH
20611: LD_INT 112
20613: EQUAL
20614: IFFALSE 20624
// sStu := true ;
20616: LD_ADDR_EXP 102
20620: PUSH
20621: LD_INT 1
20623: ST_TO_ADDR
// if p3 = 113 then
20624: LD_VAR 0 3
20628: PUSH
20629: LD_INT 113
20631: EQUAL
20632: IFFALSE 20642
// sBazooka := true ;
20634: LD_ADDR_EXP 105
20638: PUSH
20639: LD_INT 1
20641: ST_TO_ADDR
// if p3 = 114 then
20642: LD_VAR 0 3
20646: PUSH
20647: LD_INT 114
20649: EQUAL
20650: IFFALSE 20660
// sMortar := true ;
20652: LD_ADDR_EXP 106
20656: PUSH
20657: LD_INT 1
20659: ST_TO_ADDR
// if p3 = 115 then
20660: LD_VAR 0 3
20664: PUSH
20665: LD_INT 115
20667: EQUAL
20668: IFFALSE 20678
// sRanger := true ;
20670: LD_ADDR_EXP 116
20674: PUSH
20675: LD_INT 1
20677: ST_TO_ADDR
// if p3 = 116 then
20678: LD_VAR 0 3
20682: PUSH
20683: LD_INT 116
20685: EQUAL
20686: IFFALSE 20696
// sComputer := true ;
20688: LD_ADDR_EXP 117
20692: PUSH
20693: LD_INT 1
20695: ST_TO_ADDR
// if p3 = 117 then
20696: LD_VAR 0 3
20700: PUSH
20701: LD_INT 117
20703: EQUAL
20704: IFFALSE 20714
// s30 := true ;
20706: LD_ADDR_EXP 118
20710: PUSH
20711: LD_INT 1
20713: ST_TO_ADDR
// if p3 = 118 then
20714: LD_VAR 0 3
20718: PUSH
20719: LD_INT 118
20721: EQUAL
20722: IFFALSE 20732
// s60 := true ;
20724: LD_ADDR_EXP 119
20728: PUSH
20729: LD_INT 1
20731: ST_TO_ADDR
// end ; if p2 = hack_mode then
20732: LD_VAR 0 2
20736: PUSH
20737: LD_INT 101
20739: EQUAL
20740: IFFALSE 20868
// begin case p3 of 1 :
20742: LD_VAR 0 3
20746: PUSH
20747: LD_INT 1
20749: DOUBLE
20750: EQUAL
20751: IFTRUE 20755
20753: GO 20762
20755: POP
// hHackUnlimitedResources ; 2 :
20756: CALL 33131 0 0
20760: GO 20868
20762: LD_INT 2
20764: DOUBLE
20765: EQUAL
20766: IFTRUE 20770
20768: GO 20777
20770: POP
// hHackSetLevel10 ; 3 :
20771: CALL 33264 0 0
20775: GO 20868
20777: LD_INT 3
20779: DOUBLE
20780: EQUAL
20781: IFTRUE 20785
20783: GO 20792
20785: POP
// hHackSetLevel10YourUnits ; 4 :
20786: CALL 33349 0 0
20790: GO 20868
20792: LD_INT 4
20794: DOUBLE
20795: EQUAL
20796: IFTRUE 20800
20798: GO 20807
20800: POP
// hHackInvincible ; 5 :
20801: CALL 33797 0 0
20805: GO 20868
20807: LD_INT 5
20809: DOUBLE
20810: EQUAL
20811: IFTRUE 20815
20813: GO 20822
20815: POP
// hHackInvisible ; 6 :
20816: CALL 33908 0 0
20820: GO 20868
20822: LD_INT 6
20824: DOUBLE
20825: EQUAL
20826: IFTRUE 20830
20828: GO 20837
20830: POP
// hHackChangeYourSide ; 7 :
20831: CALL 33965 0 0
20835: GO 20868
20837: LD_INT 7
20839: DOUBLE
20840: EQUAL
20841: IFTRUE 20845
20843: GO 20852
20845: POP
// hHackChangeUnitSide ; 8 :
20846: CALL 34007 0 0
20850: GO 20868
20852: LD_INT 8
20854: DOUBLE
20855: EQUAL
20856: IFTRUE 20860
20858: GO 20867
20860: POP
// hHackFog ; end ;
20861: CALL 34108 0 0
20865: GO 20868
20867: POP
// end ; if p2 = game_save_mode then
20868: LD_VAR 0 2
20872: PUSH
20873: LD_INT 102
20875: EQUAL
20876: IFFALSE 20933
// begin if p3 = 1 then
20878: LD_VAR 0 3
20882: PUSH
20883: LD_INT 1
20885: EQUAL
20886: IFFALSE 20898
// globalGameSaveCounter := p4 ;
20888: LD_ADDR_EXP 62
20892: PUSH
20893: LD_VAR 0 4
20897: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20898: LD_VAR 0 3
20902: PUSH
20903: LD_INT 2
20905: EQUAL
20906: IFFALSE 20914
20908: PUSH
20909: LD_EXP 62
20913: AND
20914: IFFALSE 20933
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20916: LD_STRING setGameSaveCounter(
20918: PUSH
20919: LD_EXP 62
20923: STR
20924: PUSH
20925: LD_STRING )
20927: STR
20928: PPUSH
20929: CALL_OW 559
// end ; end ;
20933: LD_VAR 0 7
20937: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20938: LD_INT 0
20940: PPUSH
// streamModeActive := false ;
20941: LD_ADDR_EXP 63
20945: PUSH
20946: LD_INT 0
20948: ST_TO_ADDR
// normalCounter := 36 ;
20949: LD_ADDR_EXP 64
20953: PUSH
20954: LD_INT 36
20956: ST_TO_ADDR
// hardcoreCounter := 18 ;
20957: LD_ADDR_EXP 65
20961: PUSH
20962: LD_INT 18
20964: ST_TO_ADDR
// sRocket := false ;
20965: LD_ADDR_EXP 68
20969: PUSH
20970: LD_INT 0
20972: ST_TO_ADDR
// sSpeed := false ;
20973: LD_ADDR_EXP 67
20977: PUSH
20978: LD_INT 0
20980: ST_TO_ADDR
// sEngine := false ;
20981: LD_ADDR_EXP 69
20985: PUSH
20986: LD_INT 0
20988: ST_TO_ADDR
// sSpec := false ;
20989: LD_ADDR_EXP 66
20993: PUSH
20994: LD_INT 0
20996: ST_TO_ADDR
// sLevel := false ;
20997: LD_ADDR_EXP 70
21001: PUSH
21002: LD_INT 0
21004: ST_TO_ADDR
// sArmoury := false ;
21005: LD_ADDR_EXP 71
21009: PUSH
21010: LD_INT 0
21012: ST_TO_ADDR
// sRadar := false ;
21013: LD_ADDR_EXP 72
21017: PUSH
21018: LD_INT 0
21020: ST_TO_ADDR
// sBunker := false ;
21021: LD_ADDR_EXP 73
21025: PUSH
21026: LD_INT 0
21028: ST_TO_ADDR
// sHack := false ;
21029: LD_ADDR_EXP 74
21033: PUSH
21034: LD_INT 0
21036: ST_TO_ADDR
// sFire := false ;
21037: LD_ADDR_EXP 75
21041: PUSH
21042: LD_INT 0
21044: ST_TO_ADDR
// sRefresh := false ;
21045: LD_ADDR_EXP 76
21049: PUSH
21050: LD_INT 0
21052: ST_TO_ADDR
// sExp := false ;
21053: LD_ADDR_EXP 77
21057: PUSH
21058: LD_INT 0
21060: ST_TO_ADDR
// sDepot := false ;
21061: LD_ADDR_EXP 78
21065: PUSH
21066: LD_INT 0
21068: ST_TO_ADDR
// sFlag := false ;
21069: LD_ADDR_EXP 79
21073: PUSH
21074: LD_INT 0
21076: ST_TO_ADDR
// sKamikadze := false ;
21077: LD_ADDR_EXP 87
21081: PUSH
21082: LD_INT 0
21084: ST_TO_ADDR
// sTroll := false ;
21085: LD_ADDR_EXP 88
21089: PUSH
21090: LD_INT 0
21092: ST_TO_ADDR
// sSlow := false ;
21093: LD_ADDR_EXP 89
21097: PUSH
21098: LD_INT 0
21100: ST_TO_ADDR
// sLack := false ;
21101: LD_ADDR_EXP 90
21105: PUSH
21106: LD_INT 0
21108: ST_TO_ADDR
// sTank := false ;
21109: LD_ADDR_EXP 92
21113: PUSH
21114: LD_INT 0
21116: ST_TO_ADDR
// sRemote := false ;
21117: LD_ADDR_EXP 93
21121: PUSH
21122: LD_INT 0
21124: ST_TO_ADDR
// sPowell := false ;
21125: LD_ADDR_EXP 94
21129: PUSH
21130: LD_INT 0
21132: ST_TO_ADDR
// sTeleport := false ;
21133: LD_ADDR_EXP 97
21137: PUSH
21138: LD_INT 0
21140: ST_TO_ADDR
// sOilTower := false ;
21141: LD_ADDR_EXP 99
21145: PUSH
21146: LD_INT 0
21148: ST_TO_ADDR
// sShovel := false ;
21149: LD_ADDR_EXP 100
21153: PUSH
21154: LD_INT 0
21156: ST_TO_ADDR
// sSheik := false ;
21157: LD_ADDR_EXP 101
21161: PUSH
21162: LD_INT 0
21164: ST_TO_ADDR
// sEarthquake := false ;
21165: LD_ADDR_EXP 103
21169: PUSH
21170: LD_INT 0
21172: ST_TO_ADDR
// sAI := false ;
21173: LD_ADDR_EXP 104
21177: PUSH
21178: LD_INT 0
21180: ST_TO_ADDR
// sCargo := false ;
21181: LD_ADDR_EXP 107
21185: PUSH
21186: LD_INT 0
21188: ST_TO_ADDR
// sDLaser := false ;
21189: LD_ADDR_EXP 108
21193: PUSH
21194: LD_INT 0
21196: ST_TO_ADDR
// sExchange := false ;
21197: LD_ADDR_EXP 109
21201: PUSH
21202: LD_INT 0
21204: ST_TO_ADDR
// sFac := false ;
21205: LD_ADDR_EXP 110
21209: PUSH
21210: LD_INT 0
21212: ST_TO_ADDR
// sPower := false ;
21213: LD_ADDR_EXP 111
21217: PUSH
21218: LD_INT 0
21220: ST_TO_ADDR
// sRandom := false ;
21221: LD_ADDR_EXP 112
21225: PUSH
21226: LD_INT 0
21228: ST_TO_ADDR
// sShield := false ;
21229: LD_ADDR_EXP 113
21233: PUSH
21234: LD_INT 0
21236: ST_TO_ADDR
// sTime := false ;
21237: LD_ADDR_EXP 114
21241: PUSH
21242: LD_INT 0
21244: ST_TO_ADDR
// sTools := false ;
21245: LD_ADDR_EXP 115
21249: PUSH
21250: LD_INT 0
21252: ST_TO_ADDR
// sSold := false ;
21253: LD_ADDR_EXP 80
21257: PUSH
21258: LD_INT 0
21260: ST_TO_ADDR
// sDiff := false ;
21261: LD_ADDR_EXP 81
21265: PUSH
21266: LD_INT 0
21268: ST_TO_ADDR
// sFog := false ;
21269: LD_ADDR_EXP 84
21273: PUSH
21274: LD_INT 0
21276: ST_TO_ADDR
// sReset := false ;
21277: LD_ADDR_EXP 85
21281: PUSH
21282: LD_INT 0
21284: ST_TO_ADDR
// sSun := false ;
21285: LD_ADDR_EXP 86
21289: PUSH
21290: LD_INT 0
21292: ST_TO_ADDR
// sTiger := false ;
21293: LD_ADDR_EXP 82
21297: PUSH
21298: LD_INT 0
21300: ST_TO_ADDR
// sBomb := false ;
21301: LD_ADDR_EXP 83
21305: PUSH
21306: LD_INT 0
21308: ST_TO_ADDR
// sWound := false ;
21309: LD_ADDR_EXP 91
21313: PUSH
21314: LD_INT 0
21316: ST_TO_ADDR
// sBetray := false ;
21317: LD_ADDR_EXP 95
21321: PUSH
21322: LD_INT 0
21324: ST_TO_ADDR
// sContamin := false ;
21325: LD_ADDR_EXP 96
21329: PUSH
21330: LD_INT 0
21332: ST_TO_ADDR
// sOil := false ;
21333: LD_ADDR_EXP 98
21337: PUSH
21338: LD_INT 0
21340: ST_TO_ADDR
// sStu := false ;
21341: LD_ADDR_EXP 102
21345: PUSH
21346: LD_INT 0
21348: ST_TO_ADDR
// sBazooka := false ;
21349: LD_ADDR_EXP 105
21353: PUSH
21354: LD_INT 0
21356: ST_TO_ADDR
// sMortar := false ;
21357: LD_ADDR_EXP 106
21361: PUSH
21362: LD_INT 0
21364: ST_TO_ADDR
// sRanger := false ;
21365: LD_ADDR_EXP 116
21369: PUSH
21370: LD_INT 0
21372: ST_TO_ADDR
// sComputer := false ;
21373: LD_ADDR_EXP 117
21377: PUSH
21378: LD_INT 0
21380: ST_TO_ADDR
// s30 := false ;
21381: LD_ADDR_EXP 118
21385: PUSH
21386: LD_INT 0
21388: ST_TO_ADDR
// s60 := false ;
21389: LD_ADDR_EXP 119
21393: PUSH
21394: LD_INT 0
21396: ST_TO_ADDR
// end ;
21397: LD_VAR 0 1
21401: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21402: LD_INT 0
21404: PPUSH
21405: PPUSH
21406: PPUSH
21407: PPUSH
21408: PPUSH
21409: PPUSH
21410: PPUSH
// result := [ ] ;
21411: LD_ADDR_VAR 0 2
21415: PUSH
21416: EMPTY
21417: ST_TO_ADDR
// if campaign_id = 1 then
21418: LD_OWVAR 69
21422: PUSH
21423: LD_INT 1
21425: EQUAL
21426: IFFALSE 24592
// begin case mission_number of 1 :
21428: LD_OWVAR 70
21432: PUSH
21433: LD_INT 1
21435: DOUBLE
21436: EQUAL
21437: IFTRUE 21441
21439: GO 21517
21441: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21442: LD_ADDR_VAR 0 2
21446: PUSH
21447: LD_INT 2
21449: PUSH
21450: LD_INT 4
21452: PUSH
21453: LD_INT 11
21455: PUSH
21456: LD_INT 12
21458: PUSH
21459: LD_INT 15
21461: PUSH
21462: LD_INT 16
21464: PUSH
21465: LD_INT 22
21467: PUSH
21468: LD_INT 23
21470: PUSH
21471: LD_INT 26
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 101
21487: PUSH
21488: LD_INT 102
21490: PUSH
21491: LD_INT 106
21493: PUSH
21494: LD_INT 116
21496: PUSH
21497: LD_INT 117
21499: PUSH
21500: LD_INT 118
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: ST_TO_ADDR
21515: GO 24590
21517: LD_INT 2
21519: DOUBLE
21520: EQUAL
21521: IFTRUE 21525
21523: GO 21609
21525: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21526: LD_ADDR_VAR 0 2
21530: PUSH
21531: LD_INT 2
21533: PUSH
21534: LD_INT 4
21536: PUSH
21537: LD_INT 11
21539: PUSH
21540: LD_INT 12
21542: PUSH
21543: LD_INT 15
21545: PUSH
21546: LD_INT 16
21548: PUSH
21549: LD_INT 22
21551: PUSH
21552: LD_INT 23
21554: PUSH
21555: LD_INT 26
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 101
21571: PUSH
21572: LD_INT 102
21574: PUSH
21575: LD_INT 105
21577: PUSH
21578: LD_INT 106
21580: PUSH
21581: LD_INT 108
21583: PUSH
21584: LD_INT 116
21586: PUSH
21587: LD_INT 117
21589: PUSH
21590: LD_INT 118
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: ST_TO_ADDR
21607: GO 24590
21609: LD_INT 3
21611: DOUBLE
21612: EQUAL
21613: IFTRUE 21617
21615: GO 21705
21617: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21618: LD_ADDR_VAR 0 2
21622: PUSH
21623: LD_INT 2
21625: PUSH
21626: LD_INT 4
21628: PUSH
21629: LD_INT 5
21631: PUSH
21632: LD_INT 11
21634: PUSH
21635: LD_INT 12
21637: PUSH
21638: LD_INT 15
21640: PUSH
21641: LD_INT 16
21643: PUSH
21644: LD_INT 22
21646: PUSH
21647: LD_INT 26
21649: PUSH
21650: LD_INT 36
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 101
21667: PUSH
21668: LD_INT 102
21670: PUSH
21671: LD_INT 105
21673: PUSH
21674: LD_INT 106
21676: PUSH
21677: LD_INT 108
21679: PUSH
21680: LD_INT 116
21682: PUSH
21683: LD_INT 117
21685: PUSH
21686: LD_INT 118
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: ST_TO_ADDR
21703: GO 24590
21705: LD_INT 4
21707: DOUBLE
21708: EQUAL
21709: IFTRUE 21713
21711: GO 21809
21713: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21714: LD_ADDR_VAR 0 2
21718: PUSH
21719: LD_INT 2
21721: PUSH
21722: LD_INT 4
21724: PUSH
21725: LD_INT 5
21727: PUSH
21728: LD_INT 8
21730: PUSH
21731: LD_INT 11
21733: PUSH
21734: LD_INT 12
21736: PUSH
21737: LD_INT 15
21739: PUSH
21740: LD_INT 16
21742: PUSH
21743: LD_INT 22
21745: PUSH
21746: LD_INT 23
21748: PUSH
21749: LD_INT 26
21751: PUSH
21752: LD_INT 36
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 101
21771: PUSH
21772: LD_INT 102
21774: PUSH
21775: LD_INT 105
21777: PUSH
21778: LD_INT 106
21780: PUSH
21781: LD_INT 108
21783: PUSH
21784: LD_INT 116
21786: PUSH
21787: LD_INT 117
21789: PUSH
21790: LD_INT 118
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: ST_TO_ADDR
21807: GO 24590
21809: LD_INT 5
21811: DOUBLE
21812: EQUAL
21813: IFTRUE 21817
21815: GO 21929
21817: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21818: LD_ADDR_VAR 0 2
21822: PUSH
21823: LD_INT 2
21825: PUSH
21826: LD_INT 4
21828: PUSH
21829: LD_INT 5
21831: PUSH
21832: LD_INT 6
21834: PUSH
21835: LD_INT 8
21837: PUSH
21838: LD_INT 11
21840: PUSH
21841: LD_INT 12
21843: PUSH
21844: LD_INT 15
21846: PUSH
21847: LD_INT 16
21849: PUSH
21850: LD_INT 22
21852: PUSH
21853: LD_INT 23
21855: PUSH
21856: LD_INT 25
21858: PUSH
21859: LD_INT 26
21861: PUSH
21862: LD_INT 36
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 101
21883: PUSH
21884: LD_INT 102
21886: PUSH
21887: LD_INT 105
21889: PUSH
21890: LD_INT 106
21892: PUSH
21893: LD_INT 108
21895: PUSH
21896: LD_INT 109
21898: PUSH
21899: LD_INT 112
21901: PUSH
21902: LD_INT 116
21904: PUSH
21905: LD_INT 117
21907: PUSH
21908: LD_INT 118
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: ST_TO_ADDR
21927: GO 24590
21929: LD_INT 6
21931: DOUBLE
21932: EQUAL
21933: IFTRUE 21937
21935: GO 22069
21937: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21938: LD_ADDR_VAR 0 2
21942: PUSH
21943: LD_INT 2
21945: PUSH
21946: LD_INT 4
21948: PUSH
21949: LD_INT 5
21951: PUSH
21952: LD_INT 6
21954: PUSH
21955: LD_INT 8
21957: PUSH
21958: LD_INT 11
21960: PUSH
21961: LD_INT 12
21963: PUSH
21964: LD_INT 15
21966: PUSH
21967: LD_INT 16
21969: PUSH
21970: LD_INT 20
21972: PUSH
21973: LD_INT 21
21975: PUSH
21976: LD_INT 22
21978: PUSH
21979: LD_INT 23
21981: PUSH
21982: LD_INT 25
21984: PUSH
21985: LD_INT 26
21987: PUSH
21988: LD_INT 30
21990: PUSH
21991: LD_INT 31
21993: PUSH
21994: LD_INT 32
21996: PUSH
21997: LD_INT 36
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 101
22023: PUSH
22024: LD_INT 102
22026: PUSH
22027: LD_INT 105
22029: PUSH
22030: LD_INT 106
22032: PUSH
22033: LD_INT 108
22035: PUSH
22036: LD_INT 109
22038: PUSH
22039: LD_INT 112
22041: PUSH
22042: LD_INT 116
22044: PUSH
22045: LD_INT 117
22047: PUSH
22048: LD_INT 118
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: ST_TO_ADDR
22067: GO 24590
22069: LD_INT 7
22071: DOUBLE
22072: EQUAL
22073: IFTRUE 22077
22075: GO 22189
22077: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22078: LD_ADDR_VAR 0 2
22082: PUSH
22083: LD_INT 2
22085: PUSH
22086: LD_INT 4
22088: PUSH
22089: LD_INT 5
22091: PUSH
22092: LD_INT 7
22094: PUSH
22095: LD_INT 11
22097: PUSH
22098: LD_INT 12
22100: PUSH
22101: LD_INT 15
22103: PUSH
22104: LD_INT 16
22106: PUSH
22107: LD_INT 20
22109: PUSH
22110: LD_INT 21
22112: PUSH
22113: LD_INT 22
22115: PUSH
22116: LD_INT 23
22118: PUSH
22119: LD_INT 25
22121: PUSH
22122: LD_INT 26
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 101
22143: PUSH
22144: LD_INT 102
22146: PUSH
22147: LD_INT 103
22149: PUSH
22150: LD_INT 105
22152: PUSH
22153: LD_INT 106
22155: PUSH
22156: LD_INT 108
22158: PUSH
22159: LD_INT 112
22161: PUSH
22162: LD_INT 116
22164: PUSH
22165: LD_INT 117
22167: PUSH
22168: LD_INT 118
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: ST_TO_ADDR
22187: GO 24590
22189: LD_INT 8
22191: DOUBLE
22192: EQUAL
22193: IFTRUE 22197
22195: GO 22337
22197: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22198: LD_ADDR_VAR 0 2
22202: PUSH
22203: LD_INT 2
22205: PUSH
22206: LD_INT 4
22208: PUSH
22209: LD_INT 5
22211: PUSH
22212: LD_INT 6
22214: PUSH
22215: LD_INT 7
22217: PUSH
22218: LD_INT 8
22220: PUSH
22221: LD_INT 11
22223: PUSH
22224: LD_INT 12
22226: PUSH
22227: LD_INT 15
22229: PUSH
22230: LD_INT 16
22232: PUSH
22233: LD_INT 20
22235: PUSH
22236: LD_INT 21
22238: PUSH
22239: LD_INT 22
22241: PUSH
22242: LD_INT 23
22244: PUSH
22245: LD_INT 25
22247: PUSH
22248: LD_INT 26
22250: PUSH
22251: LD_INT 30
22253: PUSH
22254: LD_INT 31
22256: PUSH
22257: LD_INT 32
22259: PUSH
22260: LD_INT 36
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 101
22287: PUSH
22288: LD_INT 102
22290: PUSH
22291: LD_INT 103
22293: PUSH
22294: LD_INT 105
22296: PUSH
22297: LD_INT 106
22299: PUSH
22300: LD_INT 108
22302: PUSH
22303: LD_INT 109
22305: PUSH
22306: LD_INT 112
22308: PUSH
22309: LD_INT 116
22311: PUSH
22312: LD_INT 117
22314: PUSH
22315: LD_INT 118
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: ST_TO_ADDR
22335: GO 24590
22337: LD_INT 9
22339: DOUBLE
22340: EQUAL
22341: IFTRUE 22345
22343: GO 22493
22345: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22346: LD_ADDR_VAR 0 2
22350: PUSH
22351: LD_INT 2
22353: PUSH
22354: LD_INT 4
22356: PUSH
22357: LD_INT 5
22359: PUSH
22360: LD_INT 6
22362: PUSH
22363: LD_INT 7
22365: PUSH
22366: LD_INT 8
22368: PUSH
22369: LD_INT 11
22371: PUSH
22372: LD_INT 12
22374: PUSH
22375: LD_INT 15
22377: PUSH
22378: LD_INT 16
22380: PUSH
22381: LD_INT 20
22383: PUSH
22384: LD_INT 21
22386: PUSH
22387: LD_INT 22
22389: PUSH
22390: LD_INT 23
22392: PUSH
22393: LD_INT 25
22395: PUSH
22396: LD_INT 26
22398: PUSH
22399: LD_INT 28
22401: PUSH
22402: LD_INT 30
22404: PUSH
22405: LD_INT 31
22407: PUSH
22408: LD_INT 32
22410: PUSH
22411: LD_INT 36
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 101
22439: PUSH
22440: LD_INT 102
22442: PUSH
22443: LD_INT 103
22445: PUSH
22446: LD_INT 105
22448: PUSH
22449: LD_INT 106
22451: PUSH
22452: LD_INT 108
22454: PUSH
22455: LD_INT 109
22457: PUSH
22458: LD_INT 112
22460: PUSH
22461: LD_INT 114
22463: PUSH
22464: LD_INT 116
22466: PUSH
22467: LD_INT 117
22469: PUSH
22470: LD_INT 118
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: ST_TO_ADDR
22491: GO 24590
22493: LD_INT 10
22495: DOUBLE
22496: EQUAL
22497: IFTRUE 22501
22499: GO 22697
22501: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22502: LD_ADDR_VAR 0 2
22506: PUSH
22507: LD_INT 2
22509: PUSH
22510: LD_INT 4
22512: PUSH
22513: LD_INT 5
22515: PUSH
22516: LD_INT 6
22518: PUSH
22519: LD_INT 7
22521: PUSH
22522: LD_INT 8
22524: PUSH
22525: LD_INT 9
22527: PUSH
22528: LD_INT 10
22530: PUSH
22531: LD_INT 11
22533: PUSH
22534: LD_INT 12
22536: PUSH
22537: LD_INT 13
22539: PUSH
22540: LD_INT 14
22542: PUSH
22543: LD_INT 15
22545: PUSH
22546: LD_INT 16
22548: PUSH
22549: LD_INT 17
22551: PUSH
22552: LD_INT 18
22554: PUSH
22555: LD_INT 19
22557: PUSH
22558: LD_INT 20
22560: PUSH
22561: LD_INT 21
22563: PUSH
22564: LD_INT 22
22566: PUSH
22567: LD_INT 23
22569: PUSH
22570: LD_INT 24
22572: PUSH
22573: LD_INT 25
22575: PUSH
22576: LD_INT 26
22578: PUSH
22579: LD_INT 28
22581: PUSH
22582: LD_INT 30
22584: PUSH
22585: LD_INT 31
22587: PUSH
22588: LD_INT 32
22590: PUSH
22591: LD_INT 36
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 101
22627: PUSH
22628: LD_INT 102
22630: PUSH
22631: LD_INT 103
22633: PUSH
22634: LD_INT 104
22636: PUSH
22637: LD_INT 105
22639: PUSH
22640: LD_INT 106
22642: PUSH
22643: LD_INT 107
22645: PUSH
22646: LD_INT 108
22648: PUSH
22649: LD_INT 109
22651: PUSH
22652: LD_INT 110
22654: PUSH
22655: LD_INT 111
22657: PUSH
22658: LD_INT 112
22660: PUSH
22661: LD_INT 114
22663: PUSH
22664: LD_INT 116
22666: PUSH
22667: LD_INT 117
22669: PUSH
22670: LD_INT 118
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: ST_TO_ADDR
22695: GO 24590
22697: LD_INT 11
22699: DOUBLE
22700: EQUAL
22701: IFTRUE 22705
22703: GO 22909
22705: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22706: LD_ADDR_VAR 0 2
22710: PUSH
22711: LD_INT 2
22713: PUSH
22714: LD_INT 3
22716: PUSH
22717: LD_INT 4
22719: PUSH
22720: LD_INT 5
22722: PUSH
22723: LD_INT 6
22725: PUSH
22726: LD_INT 7
22728: PUSH
22729: LD_INT 8
22731: PUSH
22732: LD_INT 9
22734: PUSH
22735: LD_INT 10
22737: PUSH
22738: LD_INT 11
22740: PUSH
22741: LD_INT 12
22743: PUSH
22744: LD_INT 13
22746: PUSH
22747: LD_INT 14
22749: PUSH
22750: LD_INT 15
22752: PUSH
22753: LD_INT 16
22755: PUSH
22756: LD_INT 17
22758: PUSH
22759: LD_INT 18
22761: PUSH
22762: LD_INT 19
22764: PUSH
22765: LD_INT 20
22767: PUSH
22768: LD_INT 21
22770: PUSH
22771: LD_INT 22
22773: PUSH
22774: LD_INT 23
22776: PUSH
22777: LD_INT 24
22779: PUSH
22780: LD_INT 25
22782: PUSH
22783: LD_INT 26
22785: PUSH
22786: LD_INT 28
22788: PUSH
22789: LD_INT 30
22791: PUSH
22792: LD_INT 31
22794: PUSH
22795: LD_INT 32
22797: PUSH
22798: LD_INT 34
22800: PUSH
22801: LD_INT 36
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 101
22839: PUSH
22840: LD_INT 102
22842: PUSH
22843: LD_INT 103
22845: PUSH
22846: LD_INT 104
22848: PUSH
22849: LD_INT 105
22851: PUSH
22852: LD_INT 106
22854: PUSH
22855: LD_INT 107
22857: PUSH
22858: LD_INT 108
22860: PUSH
22861: LD_INT 109
22863: PUSH
22864: LD_INT 110
22866: PUSH
22867: LD_INT 111
22869: PUSH
22870: LD_INT 112
22872: PUSH
22873: LD_INT 114
22875: PUSH
22876: LD_INT 116
22878: PUSH
22879: LD_INT 117
22881: PUSH
22882: LD_INT 118
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: ST_TO_ADDR
22907: GO 24590
22909: LD_INT 12
22911: DOUBLE
22912: EQUAL
22913: IFTRUE 22917
22915: GO 23137
22917: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22918: LD_ADDR_VAR 0 2
22922: PUSH
22923: LD_INT 1
22925: PUSH
22926: LD_INT 2
22928: PUSH
22929: LD_INT 3
22931: PUSH
22932: LD_INT 4
22934: PUSH
22935: LD_INT 5
22937: PUSH
22938: LD_INT 6
22940: PUSH
22941: LD_INT 7
22943: PUSH
22944: LD_INT 8
22946: PUSH
22947: LD_INT 9
22949: PUSH
22950: LD_INT 10
22952: PUSH
22953: LD_INT 11
22955: PUSH
22956: LD_INT 12
22958: PUSH
22959: LD_INT 13
22961: PUSH
22962: LD_INT 14
22964: PUSH
22965: LD_INT 15
22967: PUSH
22968: LD_INT 16
22970: PUSH
22971: LD_INT 17
22973: PUSH
22974: LD_INT 18
22976: PUSH
22977: LD_INT 19
22979: PUSH
22980: LD_INT 20
22982: PUSH
22983: LD_INT 21
22985: PUSH
22986: LD_INT 22
22988: PUSH
22989: LD_INT 23
22991: PUSH
22992: LD_INT 24
22994: PUSH
22995: LD_INT 25
22997: PUSH
22998: LD_INT 26
23000: PUSH
23001: LD_INT 27
23003: PUSH
23004: LD_INT 28
23006: PUSH
23007: LD_INT 30
23009: PUSH
23010: LD_INT 31
23012: PUSH
23013: LD_INT 32
23015: PUSH
23016: LD_INT 33
23018: PUSH
23019: LD_INT 34
23021: PUSH
23022: LD_INT 36
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 101
23063: PUSH
23064: LD_INT 102
23066: PUSH
23067: LD_INT 103
23069: PUSH
23070: LD_INT 104
23072: PUSH
23073: LD_INT 105
23075: PUSH
23076: LD_INT 106
23078: PUSH
23079: LD_INT 107
23081: PUSH
23082: LD_INT 108
23084: PUSH
23085: LD_INT 109
23087: PUSH
23088: LD_INT 110
23090: PUSH
23091: LD_INT 111
23093: PUSH
23094: LD_INT 112
23096: PUSH
23097: LD_INT 113
23099: PUSH
23100: LD_INT 114
23102: PUSH
23103: LD_INT 116
23105: PUSH
23106: LD_INT 117
23108: PUSH
23109: LD_INT 118
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: ST_TO_ADDR
23135: GO 24590
23137: LD_INT 13
23139: DOUBLE
23140: EQUAL
23141: IFTRUE 23145
23143: GO 23353
23145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23146: LD_ADDR_VAR 0 2
23150: PUSH
23151: LD_INT 1
23153: PUSH
23154: LD_INT 2
23156: PUSH
23157: LD_INT 3
23159: PUSH
23160: LD_INT 4
23162: PUSH
23163: LD_INT 5
23165: PUSH
23166: LD_INT 8
23168: PUSH
23169: LD_INT 9
23171: PUSH
23172: LD_INT 10
23174: PUSH
23175: LD_INT 11
23177: PUSH
23178: LD_INT 12
23180: PUSH
23181: LD_INT 14
23183: PUSH
23184: LD_INT 15
23186: PUSH
23187: LD_INT 16
23189: PUSH
23190: LD_INT 17
23192: PUSH
23193: LD_INT 18
23195: PUSH
23196: LD_INT 19
23198: PUSH
23199: LD_INT 20
23201: PUSH
23202: LD_INT 21
23204: PUSH
23205: LD_INT 22
23207: PUSH
23208: LD_INT 23
23210: PUSH
23211: LD_INT 24
23213: PUSH
23214: LD_INT 25
23216: PUSH
23217: LD_INT 26
23219: PUSH
23220: LD_INT 27
23222: PUSH
23223: LD_INT 28
23225: PUSH
23226: LD_INT 30
23228: PUSH
23229: LD_INT 31
23231: PUSH
23232: LD_INT 32
23234: PUSH
23235: LD_INT 33
23237: PUSH
23238: LD_INT 34
23240: PUSH
23241: LD_INT 36
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 101
23279: PUSH
23280: LD_INT 102
23282: PUSH
23283: LD_INT 103
23285: PUSH
23286: LD_INT 104
23288: PUSH
23289: LD_INT 105
23291: PUSH
23292: LD_INT 106
23294: PUSH
23295: LD_INT 107
23297: PUSH
23298: LD_INT 108
23300: PUSH
23301: LD_INT 109
23303: PUSH
23304: LD_INT 110
23306: PUSH
23307: LD_INT 111
23309: PUSH
23310: LD_INT 112
23312: PUSH
23313: LD_INT 113
23315: PUSH
23316: LD_INT 114
23318: PUSH
23319: LD_INT 116
23321: PUSH
23322: LD_INT 117
23324: PUSH
23325: LD_INT 118
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: ST_TO_ADDR
23351: GO 24590
23353: LD_INT 14
23355: DOUBLE
23356: EQUAL
23357: IFTRUE 23361
23359: GO 23585
23361: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23362: LD_ADDR_VAR 0 2
23366: PUSH
23367: LD_INT 1
23369: PUSH
23370: LD_INT 2
23372: PUSH
23373: LD_INT 3
23375: PUSH
23376: LD_INT 4
23378: PUSH
23379: LD_INT 5
23381: PUSH
23382: LD_INT 6
23384: PUSH
23385: LD_INT 7
23387: PUSH
23388: LD_INT 8
23390: PUSH
23391: LD_INT 9
23393: PUSH
23394: LD_INT 10
23396: PUSH
23397: LD_INT 11
23399: PUSH
23400: LD_INT 12
23402: PUSH
23403: LD_INT 13
23405: PUSH
23406: LD_INT 14
23408: PUSH
23409: LD_INT 15
23411: PUSH
23412: LD_INT 16
23414: PUSH
23415: LD_INT 17
23417: PUSH
23418: LD_INT 18
23420: PUSH
23421: LD_INT 19
23423: PUSH
23424: LD_INT 20
23426: PUSH
23427: LD_INT 21
23429: PUSH
23430: LD_INT 22
23432: PUSH
23433: LD_INT 23
23435: PUSH
23436: LD_INT 24
23438: PUSH
23439: LD_INT 25
23441: PUSH
23442: LD_INT 26
23444: PUSH
23445: LD_INT 27
23447: PUSH
23448: LD_INT 28
23450: PUSH
23451: LD_INT 29
23453: PUSH
23454: LD_INT 30
23456: PUSH
23457: LD_INT 31
23459: PUSH
23460: LD_INT 32
23462: PUSH
23463: LD_INT 33
23465: PUSH
23466: LD_INT 34
23468: PUSH
23469: LD_INT 36
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 101
23511: PUSH
23512: LD_INT 102
23514: PUSH
23515: LD_INT 103
23517: PUSH
23518: LD_INT 104
23520: PUSH
23521: LD_INT 105
23523: PUSH
23524: LD_INT 106
23526: PUSH
23527: LD_INT 107
23529: PUSH
23530: LD_INT 108
23532: PUSH
23533: LD_INT 109
23535: PUSH
23536: LD_INT 110
23538: PUSH
23539: LD_INT 111
23541: PUSH
23542: LD_INT 112
23544: PUSH
23545: LD_INT 113
23547: PUSH
23548: LD_INT 114
23550: PUSH
23551: LD_INT 116
23553: PUSH
23554: LD_INT 117
23556: PUSH
23557: LD_INT 118
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: ST_TO_ADDR
23583: GO 24590
23585: LD_INT 15
23587: DOUBLE
23588: EQUAL
23589: IFTRUE 23593
23591: GO 23817
23593: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23594: LD_ADDR_VAR 0 2
23598: PUSH
23599: LD_INT 1
23601: PUSH
23602: LD_INT 2
23604: PUSH
23605: LD_INT 3
23607: PUSH
23608: LD_INT 4
23610: PUSH
23611: LD_INT 5
23613: PUSH
23614: LD_INT 6
23616: PUSH
23617: LD_INT 7
23619: PUSH
23620: LD_INT 8
23622: PUSH
23623: LD_INT 9
23625: PUSH
23626: LD_INT 10
23628: PUSH
23629: LD_INT 11
23631: PUSH
23632: LD_INT 12
23634: PUSH
23635: LD_INT 13
23637: PUSH
23638: LD_INT 14
23640: PUSH
23641: LD_INT 15
23643: PUSH
23644: LD_INT 16
23646: PUSH
23647: LD_INT 17
23649: PUSH
23650: LD_INT 18
23652: PUSH
23653: LD_INT 19
23655: PUSH
23656: LD_INT 20
23658: PUSH
23659: LD_INT 21
23661: PUSH
23662: LD_INT 22
23664: PUSH
23665: LD_INT 23
23667: PUSH
23668: LD_INT 24
23670: PUSH
23671: LD_INT 25
23673: PUSH
23674: LD_INT 26
23676: PUSH
23677: LD_INT 27
23679: PUSH
23680: LD_INT 28
23682: PUSH
23683: LD_INT 29
23685: PUSH
23686: LD_INT 30
23688: PUSH
23689: LD_INT 31
23691: PUSH
23692: LD_INT 32
23694: PUSH
23695: LD_INT 33
23697: PUSH
23698: LD_INT 34
23700: PUSH
23701: LD_INT 36
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 101
23743: PUSH
23744: LD_INT 102
23746: PUSH
23747: LD_INT 103
23749: PUSH
23750: LD_INT 104
23752: PUSH
23753: LD_INT 105
23755: PUSH
23756: LD_INT 106
23758: PUSH
23759: LD_INT 107
23761: PUSH
23762: LD_INT 108
23764: PUSH
23765: LD_INT 109
23767: PUSH
23768: LD_INT 110
23770: PUSH
23771: LD_INT 111
23773: PUSH
23774: LD_INT 112
23776: PUSH
23777: LD_INT 113
23779: PUSH
23780: LD_INT 114
23782: PUSH
23783: LD_INT 116
23785: PUSH
23786: LD_INT 117
23788: PUSH
23789: LD_INT 118
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: ST_TO_ADDR
23815: GO 24590
23817: LD_INT 16
23819: DOUBLE
23820: EQUAL
23821: IFTRUE 23825
23823: GO 23961
23825: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23826: LD_ADDR_VAR 0 2
23830: PUSH
23831: LD_INT 2
23833: PUSH
23834: LD_INT 4
23836: PUSH
23837: LD_INT 5
23839: PUSH
23840: LD_INT 7
23842: PUSH
23843: LD_INT 11
23845: PUSH
23846: LD_INT 12
23848: PUSH
23849: LD_INT 15
23851: PUSH
23852: LD_INT 16
23854: PUSH
23855: LD_INT 20
23857: PUSH
23858: LD_INT 21
23860: PUSH
23861: LD_INT 22
23863: PUSH
23864: LD_INT 23
23866: PUSH
23867: LD_INT 25
23869: PUSH
23870: LD_INT 26
23872: PUSH
23873: LD_INT 30
23875: PUSH
23876: LD_INT 31
23878: PUSH
23879: LD_INT 32
23881: PUSH
23882: LD_INT 33
23884: PUSH
23885: LD_INT 34
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 101
23911: PUSH
23912: LD_INT 102
23914: PUSH
23915: LD_INT 103
23917: PUSH
23918: LD_INT 106
23920: PUSH
23921: LD_INT 108
23923: PUSH
23924: LD_INT 112
23926: PUSH
23927: LD_INT 113
23929: PUSH
23930: LD_INT 114
23932: PUSH
23933: LD_INT 116
23935: PUSH
23936: LD_INT 117
23938: PUSH
23939: LD_INT 118
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: ST_TO_ADDR
23959: GO 24590
23961: LD_INT 17
23963: DOUBLE
23964: EQUAL
23965: IFTRUE 23969
23967: GO 24193
23969: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23970: LD_ADDR_VAR 0 2
23974: PUSH
23975: LD_INT 1
23977: PUSH
23978: LD_INT 2
23980: PUSH
23981: LD_INT 3
23983: PUSH
23984: LD_INT 4
23986: PUSH
23987: LD_INT 5
23989: PUSH
23990: LD_INT 6
23992: PUSH
23993: LD_INT 7
23995: PUSH
23996: LD_INT 8
23998: PUSH
23999: LD_INT 9
24001: PUSH
24002: LD_INT 10
24004: PUSH
24005: LD_INT 11
24007: PUSH
24008: LD_INT 12
24010: PUSH
24011: LD_INT 13
24013: PUSH
24014: LD_INT 14
24016: PUSH
24017: LD_INT 15
24019: PUSH
24020: LD_INT 16
24022: PUSH
24023: LD_INT 17
24025: PUSH
24026: LD_INT 18
24028: PUSH
24029: LD_INT 19
24031: PUSH
24032: LD_INT 20
24034: PUSH
24035: LD_INT 21
24037: PUSH
24038: LD_INT 22
24040: PUSH
24041: LD_INT 23
24043: PUSH
24044: LD_INT 24
24046: PUSH
24047: LD_INT 25
24049: PUSH
24050: LD_INT 26
24052: PUSH
24053: LD_INT 27
24055: PUSH
24056: LD_INT 28
24058: PUSH
24059: LD_INT 29
24061: PUSH
24062: LD_INT 30
24064: PUSH
24065: LD_INT 31
24067: PUSH
24068: LD_INT 32
24070: PUSH
24071: LD_INT 33
24073: PUSH
24074: LD_INT 34
24076: PUSH
24077: LD_INT 36
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 101
24119: PUSH
24120: LD_INT 102
24122: PUSH
24123: LD_INT 103
24125: PUSH
24126: LD_INT 104
24128: PUSH
24129: LD_INT 105
24131: PUSH
24132: LD_INT 106
24134: PUSH
24135: LD_INT 107
24137: PUSH
24138: LD_INT 108
24140: PUSH
24141: LD_INT 109
24143: PUSH
24144: LD_INT 110
24146: PUSH
24147: LD_INT 111
24149: PUSH
24150: LD_INT 112
24152: PUSH
24153: LD_INT 113
24155: PUSH
24156: LD_INT 114
24158: PUSH
24159: LD_INT 116
24161: PUSH
24162: LD_INT 117
24164: PUSH
24165: LD_INT 118
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: ST_TO_ADDR
24191: GO 24590
24193: LD_INT 18
24195: DOUBLE
24196: EQUAL
24197: IFTRUE 24201
24199: GO 24349
24201: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24202: LD_ADDR_VAR 0 2
24206: PUSH
24207: LD_INT 2
24209: PUSH
24210: LD_INT 4
24212: PUSH
24213: LD_INT 5
24215: PUSH
24216: LD_INT 7
24218: PUSH
24219: LD_INT 11
24221: PUSH
24222: LD_INT 12
24224: PUSH
24225: LD_INT 15
24227: PUSH
24228: LD_INT 16
24230: PUSH
24231: LD_INT 20
24233: PUSH
24234: LD_INT 21
24236: PUSH
24237: LD_INT 22
24239: PUSH
24240: LD_INT 23
24242: PUSH
24243: LD_INT 25
24245: PUSH
24246: LD_INT 26
24248: PUSH
24249: LD_INT 30
24251: PUSH
24252: LD_INT 31
24254: PUSH
24255: LD_INT 32
24257: PUSH
24258: LD_INT 33
24260: PUSH
24261: LD_INT 34
24263: PUSH
24264: LD_INT 35
24266: PUSH
24267: LD_INT 36
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 101
24295: PUSH
24296: LD_INT 102
24298: PUSH
24299: LD_INT 103
24301: PUSH
24302: LD_INT 106
24304: PUSH
24305: LD_INT 108
24307: PUSH
24308: LD_INT 112
24310: PUSH
24311: LD_INT 113
24313: PUSH
24314: LD_INT 114
24316: PUSH
24317: LD_INT 115
24319: PUSH
24320: LD_INT 116
24322: PUSH
24323: LD_INT 117
24325: PUSH
24326: LD_INT 118
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: ST_TO_ADDR
24347: GO 24590
24349: LD_INT 19
24351: DOUBLE
24352: EQUAL
24353: IFTRUE 24357
24355: GO 24589
24357: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24358: LD_ADDR_VAR 0 2
24362: PUSH
24363: LD_INT 1
24365: PUSH
24366: LD_INT 2
24368: PUSH
24369: LD_INT 3
24371: PUSH
24372: LD_INT 4
24374: PUSH
24375: LD_INT 5
24377: PUSH
24378: LD_INT 6
24380: PUSH
24381: LD_INT 7
24383: PUSH
24384: LD_INT 8
24386: PUSH
24387: LD_INT 9
24389: PUSH
24390: LD_INT 10
24392: PUSH
24393: LD_INT 11
24395: PUSH
24396: LD_INT 12
24398: PUSH
24399: LD_INT 13
24401: PUSH
24402: LD_INT 14
24404: PUSH
24405: LD_INT 15
24407: PUSH
24408: LD_INT 16
24410: PUSH
24411: LD_INT 17
24413: PUSH
24414: LD_INT 18
24416: PUSH
24417: LD_INT 19
24419: PUSH
24420: LD_INT 20
24422: PUSH
24423: LD_INT 21
24425: PUSH
24426: LD_INT 22
24428: PUSH
24429: LD_INT 23
24431: PUSH
24432: LD_INT 24
24434: PUSH
24435: LD_INT 25
24437: PUSH
24438: LD_INT 26
24440: PUSH
24441: LD_INT 27
24443: PUSH
24444: LD_INT 28
24446: PUSH
24447: LD_INT 29
24449: PUSH
24450: LD_INT 30
24452: PUSH
24453: LD_INT 31
24455: PUSH
24456: LD_INT 32
24458: PUSH
24459: LD_INT 33
24461: PUSH
24462: LD_INT 34
24464: PUSH
24465: LD_INT 35
24467: PUSH
24468: LD_INT 36
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 101
24511: PUSH
24512: LD_INT 102
24514: PUSH
24515: LD_INT 103
24517: PUSH
24518: LD_INT 104
24520: PUSH
24521: LD_INT 105
24523: PUSH
24524: LD_INT 106
24526: PUSH
24527: LD_INT 107
24529: PUSH
24530: LD_INT 108
24532: PUSH
24533: LD_INT 109
24535: PUSH
24536: LD_INT 110
24538: PUSH
24539: LD_INT 111
24541: PUSH
24542: LD_INT 112
24544: PUSH
24545: LD_INT 113
24547: PUSH
24548: LD_INT 114
24550: PUSH
24551: LD_INT 115
24553: PUSH
24554: LD_INT 116
24556: PUSH
24557: LD_INT 117
24559: PUSH
24560: LD_INT 118
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: ST_TO_ADDR
24587: GO 24590
24589: POP
// end else
24590: GO 24821
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24592: LD_ADDR_VAR 0 2
24596: PUSH
24597: LD_INT 1
24599: PUSH
24600: LD_INT 2
24602: PUSH
24603: LD_INT 3
24605: PUSH
24606: LD_INT 4
24608: PUSH
24609: LD_INT 5
24611: PUSH
24612: LD_INT 6
24614: PUSH
24615: LD_INT 7
24617: PUSH
24618: LD_INT 8
24620: PUSH
24621: LD_INT 9
24623: PUSH
24624: LD_INT 10
24626: PUSH
24627: LD_INT 11
24629: PUSH
24630: LD_INT 12
24632: PUSH
24633: LD_INT 13
24635: PUSH
24636: LD_INT 14
24638: PUSH
24639: LD_INT 15
24641: PUSH
24642: LD_INT 16
24644: PUSH
24645: LD_INT 17
24647: PUSH
24648: LD_INT 18
24650: PUSH
24651: LD_INT 19
24653: PUSH
24654: LD_INT 20
24656: PUSH
24657: LD_INT 21
24659: PUSH
24660: LD_INT 22
24662: PUSH
24663: LD_INT 23
24665: PUSH
24666: LD_INT 24
24668: PUSH
24669: LD_INT 25
24671: PUSH
24672: LD_INT 26
24674: PUSH
24675: LD_INT 27
24677: PUSH
24678: LD_INT 28
24680: PUSH
24681: LD_INT 29
24683: PUSH
24684: LD_INT 30
24686: PUSH
24687: LD_INT 31
24689: PUSH
24690: LD_INT 32
24692: PUSH
24693: LD_INT 33
24695: PUSH
24696: LD_INT 34
24698: PUSH
24699: LD_INT 35
24701: PUSH
24702: LD_INT 36
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 101
24745: PUSH
24746: LD_INT 102
24748: PUSH
24749: LD_INT 103
24751: PUSH
24752: LD_INT 104
24754: PUSH
24755: LD_INT 105
24757: PUSH
24758: LD_INT 106
24760: PUSH
24761: LD_INT 107
24763: PUSH
24764: LD_INT 108
24766: PUSH
24767: LD_INT 109
24769: PUSH
24770: LD_INT 110
24772: PUSH
24773: LD_INT 111
24775: PUSH
24776: LD_INT 112
24778: PUSH
24779: LD_INT 113
24781: PUSH
24782: LD_INT 114
24784: PUSH
24785: LD_INT 115
24787: PUSH
24788: LD_INT 116
24790: PUSH
24791: LD_INT 117
24793: PUSH
24794: LD_INT 118
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: ST_TO_ADDR
// if result then
24821: LD_VAR 0 2
24825: IFFALSE 25611
// begin normal :=  ;
24827: LD_ADDR_VAR 0 5
24831: PUSH
24832: LD_STRING 
24834: ST_TO_ADDR
// hardcore :=  ;
24835: LD_ADDR_VAR 0 6
24839: PUSH
24840: LD_STRING 
24842: ST_TO_ADDR
// active :=  ;
24843: LD_ADDR_VAR 0 7
24847: PUSH
24848: LD_STRING 
24850: ST_TO_ADDR
// for i = 1 to normalCounter do
24851: LD_ADDR_VAR 0 8
24855: PUSH
24856: DOUBLE
24857: LD_INT 1
24859: DEC
24860: ST_TO_ADDR
24861: LD_EXP 64
24865: PUSH
24866: FOR_TO
24867: IFFALSE 24968
// begin tmp := 0 ;
24869: LD_ADDR_VAR 0 3
24873: PUSH
24874: LD_STRING 0
24876: ST_TO_ADDR
// if result [ 1 ] then
24877: LD_VAR 0 2
24881: PUSH
24882: LD_INT 1
24884: ARRAY
24885: IFFALSE 24950
// if result [ 1 ] [ 1 ] = i then
24887: LD_VAR 0 2
24891: PUSH
24892: LD_INT 1
24894: ARRAY
24895: PUSH
24896: LD_INT 1
24898: ARRAY
24899: PUSH
24900: LD_VAR 0 8
24904: EQUAL
24905: IFFALSE 24950
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24907: LD_ADDR_VAR 0 2
24911: PUSH
24912: LD_VAR 0 2
24916: PPUSH
24917: LD_INT 1
24919: PPUSH
24920: LD_VAR 0 2
24924: PUSH
24925: LD_INT 1
24927: ARRAY
24928: PPUSH
24929: LD_INT 1
24931: PPUSH
24932: CALL_OW 3
24936: PPUSH
24937: CALL_OW 1
24941: ST_TO_ADDR
// tmp := 1 ;
24942: LD_ADDR_VAR 0 3
24946: PUSH
24947: LD_STRING 1
24949: ST_TO_ADDR
// end ; normal := normal & tmp ;
24950: LD_ADDR_VAR 0 5
24954: PUSH
24955: LD_VAR 0 5
24959: PUSH
24960: LD_VAR 0 3
24964: STR
24965: ST_TO_ADDR
// end ;
24966: GO 24866
24968: POP
24969: POP
// for i = 1 to hardcoreCounter do
24970: LD_ADDR_VAR 0 8
24974: PUSH
24975: DOUBLE
24976: LD_INT 1
24978: DEC
24979: ST_TO_ADDR
24980: LD_EXP 65
24984: PUSH
24985: FOR_TO
24986: IFFALSE 25091
// begin tmp := 0 ;
24988: LD_ADDR_VAR 0 3
24992: PUSH
24993: LD_STRING 0
24995: ST_TO_ADDR
// if result [ 2 ] then
24996: LD_VAR 0 2
25000: PUSH
25001: LD_INT 2
25003: ARRAY
25004: IFFALSE 25073
// if result [ 2 ] [ 1 ] = 100 + i then
25006: LD_VAR 0 2
25010: PUSH
25011: LD_INT 2
25013: ARRAY
25014: PUSH
25015: LD_INT 1
25017: ARRAY
25018: PUSH
25019: LD_INT 100
25021: PUSH
25022: LD_VAR 0 8
25026: PLUS
25027: EQUAL
25028: IFFALSE 25073
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25030: LD_ADDR_VAR 0 2
25034: PUSH
25035: LD_VAR 0 2
25039: PPUSH
25040: LD_INT 2
25042: PPUSH
25043: LD_VAR 0 2
25047: PUSH
25048: LD_INT 2
25050: ARRAY
25051: PPUSH
25052: LD_INT 1
25054: PPUSH
25055: CALL_OW 3
25059: PPUSH
25060: CALL_OW 1
25064: ST_TO_ADDR
// tmp := 1 ;
25065: LD_ADDR_VAR 0 3
25069: PUSH
25070: LD_STRING 1
25072: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25073: LD_ADDR_VAR 0 6
25077: PUSH
25078: LD_VAR 0 6
25082: PUSH
25083: LD_VAR 0 3
25087: STR
25088: ST_TO_ADDR
// end ;
25089: GO 24985
25091: POP
25092: POP
// if isGameLoad then
25093: LD_VAR 0 1
25097: IFFALSE 25572
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25099: LD_ADDR_VAR 0 4
25103: PUSH
25104: LD_EXP 68
25108: PUSH
25109: LD_EXP 67
25113: PUSH
25114: LD_EXP 69
25118: PUSH
25119: LD_EXP 66
25123: PUSH
25124: LD_EXP 70
25128: PUSH
25129: LD_EXP 71
25133: PUSH
25134: LD_EXP 72
25138: PUSH
25139: LD_EXP 73
25143: PUSH
25144: LD_EXP 74
25148: PUSH
25149: LD_EXP 75
25153: PUSH
25154: LD_EXP 76
25158: PUSH
25159: LD_EXP 77
25163: PUSH
25164: LD_EXP 78
25168: PUSH
25169: LD_EXP 79
25173: PUSH
25174: LD_EXP 87
25178: PUSH
25179: LD_EXP 88
25183: PUSH
25184: LD_EXP 89
25188: PUSH
25189: LD_EXP 90
25193: PUSH
25194: LD_EXP 92
25198: PUSH
25199: LD_EXP 93
25203: PUSH
25204: LD_EXP 94
25208: PUSH
25209: LD_EXP 97
25213: PUSH
25214: LD_EXP 99
25218: PUSH
25219: LD_EXP 100
25223: PUSH
25224: LD_EXP 101
25228: PUSH
25229: LD_EXP 103
25233: PUSH
25234: LD_EXP 104
25238: PUSH
25239: LD_EXP 107
25243: PUSH
25244: LD_EXP 108
25248: PUSH
25249: LD_EXP 109
25253: PUSH
25254: LD_EXP 110
25258: PUSH
25259: LD_EXP 111
25263: PUSH
25264: LD_EXP 112
25268: PUSH
25269: LD_EXP 113
25273: PUSH
25274: LD_EXP 114
25278: PUSH
25279: LD_EXP 115
25283: PUSH
25284: LD_EXP 80
25288: PUSH
25289: LD_EXP 81
25293: PUSH
25294: LD_EXP 84
25298: PUSH
25299: LD_EXP 85
25303: PUSH
25304: LD_EXP 86
25308: PUSH
25309: LD_EXP 82
25313: PUSH
25314: LD_EXP 83
25318: PUSH
25319: LD_EXP 91
25323: PUSH
25324: LD_EXP 95
25328: PUSH
25329: LD_EXP 96
25333: PUSH
25334: LD_EXP 98
25338: PUSH
25339: LD_EXP 102
25343: PUSH
25344: LD_EXP 105
25348: PUSH
25349: LD_EXP 106
25353: PUSH
25354: LD_EXP 116
25358: PUSH
25359: LD_EXP 117
25363: PUSH
25364: LD_EXP 118
25368: PUSH
25369: LD_EXP 119
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: ST_TO_ADDR
// tmp :=  ;
25430: LD_ADDR_VAR 0 3
25434: PUSH
25435: LD_STRING 
25437: ST_TO_ADDR
// for i = 1 to normalCounter do
25438: LD_ADDR_VAR 0 8
25442: PUSH
25443: DOUBLE
25444: LD_INT 1
25446: DEC
25447: ST_TO_ADDR
25448: LD_EXP 64
25452: PUSH
25453: FOR_TO
25454: IFFALSE 25490
// begin if flags [ i ] then
25456: LD_VAR 0 4
25460: PUSH
25461: LD_VAR 0 8
25465: ARRAY
25466: IFFALSE 25488
// tmp := tmp & i & ; ;
25468: LD_ADDR_VAR 0 3
25472: PUSH
25473: LD_VAR 0 3
25477: PUSH
25478: LD_VAR 0 8
25482: STR
25483: PUSH
25484: LD_STRING ;
25486: STR
25487: ST_TO_ADDR
// end ;
25488: GO 25453
25490: POP
25491: POP
// for i = 1 to hardcoreCounter do
25492: LD_ADDR_VAR 0 8
25496: PUSH
25497: DOUBLE
25498: LD_INT 1
25500: DEC
25501: ST_TO_ADDR
25502: LD_EXP 65
25506: PUSH
25507: FOR_TO
25508: IFFALSE 25554
// begin if flags [ normalCounter + i ] then
25510: LD_VAR 0 4
25514: PUSH
25515: LD_EXP 64
25519: PUSH
25520: LD_VAR 0 8
25524: PLUS
25525: ARRAY
25526: IFFALSE 25552
// tmp := tmp & ( 100 + i ) & ; ;
25528: LD_ADDR_VAR 0 3
25532: PUSH
25533: LD_VAR 0 3
25537: PUSH
25538: LD_INT 100
25540: PUSH
25541: LD_VAR 0 8
25545: PLUS
25546: STR
25547: PUSH
25548: LD_STRING ;
25550: STR
25551: ST_TO_ADDR
// end ;
25552: GO 25507
25554: POP
25555: POP
// if tmp then
25556: LD_VAR 0 3
25560: IFFALSE 25572
// active := tmp ;
25562: LD_ADDR_VAR 0 7
25566: PUSH
25567: LD_VAR 0 3
25571: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25572: LD_STRING getStreamItemsFromMission("
25574: PUSH
25575: LD_VAR 0 5
25579: STR
25580: PUSH
25581: LD_STRING ","
25583: STR
25584: PUSH
25585: LD_VAR 0 6
25589: STR
25590: PUSH
25591: LD_STRING ","
25593: STR
25594: PUSH
25595: LD_VAR 0 7
25599: STR
25600: PUSH
25601: LD_STRING ")
25603: STR
25604: PPUSH
25605: CALL_OW 559
// end else
25609: GO 25618
// ToLua ( getStreamItemsFromMission("","","") ) ;
25611: LD_STRING getStreamItemsFromMission("","","")
25613: PPUSH
25614: CALL_OW 559
// end ;
25618: LD_VAR 0 2
25622: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25623: LD_EXP 63
25627: IFFALSE 25635
25629: PUSH
25630: LD_EXP 68
25634: AND
25635: IFFALSE 25759
25637: GO 25639
25639: DISABLE
25640: LD_INT 0
25642: PPUSH
25643: PPUSH
// begin enable ;
25644: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25645: LD_ADDR_VAR 0 2
25649: PUSH
25650: LD_INT 22
25652: PUSH
25653: LD_OWVAR 2
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 2
25664: PUSH
25665: LD_INT 34
25667: PUSH
25668: LD_INT 7
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 34
25677: PUSH
25678: LD_INT 45
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 34
25687: PUSH
25688: LD_INT 28
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 34
25697: PUSH
25698: LD_INT 47
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PPUSH
25716: CALL_OW 69
25720: ST_TO_ADDR
// if not tmp then
25721: LD_VAR 0 2
25725: NOT
25726: IFFALSE 25730
// exit ;
25728: GO 25759
// for i in tmp do
25730: LD_ADDR_VAR 0 1
25734: PUSH
25735: LD_VAR 0 2
25739: PUSH
25740: FOR_IN
25741: IFFALSE 25757
// begin SetLives ( i , 0 ) ;
25743: LD_VAR 0 1
25747: PPUSH
25748: LD_INT 0
25750: PPUSH
25751: CALL_OW 234
// end ;
25755: GO 25740
25757: POP
25758: POP
// end ;
25759: PPOPN 2
25761: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25762: LD_EXP 63
25766: IFFALSE 25774
25768: PUSH
25769: LD_EXP 69
25773: AND
25774: IFFALSE 25858
25776: GO 25778
25778: DISABLE
25779: LD_INT 0
25781: PPUSH
25782: PPUSH
// begin enable ;
25783: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25784: LD_ADDR_VAR 0 2
25788: PUSH
25789: LD_INT 22
25791: PUSH
25792: LD_OWVAR 2
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 32
25803: PUSH
25804: LD_INT 3
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PPUSH
25815: CALL_OW 69
25819: ST_TO_ADDR
// if not tmp then
25820: LD_VAR 0 2
25824: NOT
25825: IFFALSE 25829
// exit ;
25827: GO 25858
// for i in tmp do
25829: LD_ADDR_VAR 0 1
25833: PUSH
25834: LD_VAR 0 2
25838: PUSH
25839: FOR_IN
25840: IFFALSE 25856
// begin SetLives ( i , 0 ) ;
25842: LD_VAR 0 1
25846: PPUSH
25847: LD_INT 0
25849: PPUSH
25850: CALL_OW 234
// end ;
25854: GO 25839
25856: POP
25857: POP
// end ;
25858: PPOPN 2
25860: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25861: LD_EXP 63
25865: IFFALSE 25873
25867: PUSH
25868: LD_EXP 66
25872: AND
25873: IFFALSE 25966
25875: GO 25877
25877: DISABLE
25878: LD_INT 0
25880: PPUSH
// begin enable ;
25881: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25882: LD_ADDR_VAR 0 1
25886: PUSH
25887: LD_INT 22
25889: PUSH
25890: LD_OWVAR 2
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 2
25901: PUSH
25902: LD_INT 25
25904: PUSH
25905: LD_INT 5
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 25
25914: PUSH
25915: LD_INT 9
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 25
25924: PUSH
25925: LD_INT 8
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PPUSH
25942: CALL_OW 69
25946: PUSH
25947: FOR_IN
25948: IFFALSE 25964
// begin SetClass ( i , 1 ) ;
25950: LD_VAR 0 1
25954: PPUSH
25955: LD_INT 1
25957: PPUSH
25958: CALL_OW 336
// end ;
25962: GO 25947
25964: POP
25965: POP
// end ;
25966: PPOPN 1
25968: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25969: LD_EXP 63
25973: IFFALSE 25981
25975: PUSH
25976: LD_EXP 67
25980: AND
25981: IFFALSE 25993
25983: PUSH
25984: LD_OWVAR 65
25988: PUSH
25989: LD_INT 7
25991: LESS
25992: AND
25993: IFFALSE 26007
25995: GO 25997
25997: DISABLE
// begin enable ;
25998: ENABLE
// game_speed := 7 ;
25999: LD_ADDR_OWVAR 65
26003: PUSH
26004: LD_INT 7
26006: ST_TO_ADDR
// end ;
26007: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26008: LD_EXP 63
26012: IFFALSE 26020
26014: PUSH
26015: LD_EXP 70
26019: AND
26020: IFFALSE 26222
26022: GO 26024
26024: DISABLE
26025: LD_INT 0
26027: PPUSH
26028: PPUSH
26029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26030: LD_ADDR_VAR 0 3
26034: PUSH
26035: LD_INT 81
26037: PUSH
26038: LD_OWVAR 2
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 21
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PPUSH
26061: CALL_OW 69
26065: ST_TO_ADDR
// if not tmp then
26066: LD_VAR 0 3
26070: NOT
26071: IFFALSE 26075
// exit ;
26073: GO 26222
// if tmp > 5 then
26075: LD_VAR 0 3
26079: PUSH
26080: LD_INT 5
26082: GREATER
26083: IFFALSE 26095
// k := 5 else
26085: LD_ADDR_VAR 0 2
26089: PUSH
26090: LD_INT 5
26092: ST_TO_ADDR
26093: GO 26105
// k := tmp ;
26095: LD_ADDR_VAR 0 2
26099: PUSH
26100: LD_VAR 0 3
26104: ST_TO_ADDR
// for i := 1 to k do
26105: LD_ADDR_VAR 0 1
26109: PUSH
26110: DOUBLE
26111: LD_INT 1
26113: DEC
26114: ST_TO_ADDR
26115: LD_VAR 0 2
26119: PUSH
26120: FOR_TO
26121: IFFALSE 26220
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26123: LD_VAR 0 3
26127: PUSH
26128: LD_VAR 0 1
26132: ARRAY
26133: PPUSH
26134: LD_VAR 0 1
26138: PUSH
26139: LD_INT 4
26141: MOD
26142: PUSH
26143: LD_INT 1
26145: PLUS
26146: PPUSH
26147: CALL_OW 259
26151: PUSH
26152: LD_INT 10
26154: LESS
26155: IFFALSE 26218
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26157: LD_VAR 0 3
26161: PUSH
26162: LD_VAR 0 1
26166: ARRAY
26167: PPUSH
26168: LD_VAR 0 1
26172: PUSH
26173: LD_INT 4
26175: MOD
26176: PUSH
26177: LD_INT 1
26179: PLUS
26180: PPUSH
26181: LD_VAR 0 3
26185: PUSH
26186: LD_VAR 0 1
26190: ARRAY
26191: PPUSH
26192: LD_VAR 0 1
26196: PUSH
26197: LD_INT 4
26199: MOD
26200: PUSH
26201: LD_INT 1
26203: PLUS
26204: PPUSH
26205: CALL_OW 259
26209: PUSH
26210: LD_INT 1
26212: PLUS
26213: PPUSH
26214: CALL_OW 237
26218: GO 26120
26220: POP
26221: POP
// end ;
26222: PPOPN 3
26224: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26225: LD_EXP 63
26229: IFFALSE 26237
26231: PUSH
26232: LD_EXP 71
26236: AND
26237: IFFALSE 26257
26239: GO 26241
26241: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26242: LD_INT 4
26244: PPUSH
26245: LD_OWVAR 2
26249: PPUSH
26250: LD_INT 0
26252: PPUSH
26253: CALL_OW 324
26257: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26258: LD_EXP 63
26262: IFFALSE 26270
26264: PUSH
26265: LD_EXP 100
26269: AND
26270: IFFALSE 26290
26272: GO 26274
26274: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26275: LD_INT 19
26277: PPUSH
26278: LD_OWVAR 2
26282: PPUSH
26283: LD_INT 0
26285: PPUSH
26286: CALL_OW 324
26290: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26291: LD_EXP 63
26295: IFFALSE 26303
26297: PUSH
26298: LD_EXP 72
26302: AND
26303: IFFALSE 26405
26305: GO 26307
26307: DISABLE
26308: LD_INT 0
26310: PPUSH
26311: PPUSH
// begin enable ;
26312: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26313: LD_ADDR_VAR 0 2
26317: PUSH
26318: LD_INT 22
26320: PUSH
26321: LD_OWVAR 2
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 2
26332: PUSH
26333: LD_INT 34
26335: PUSH
26336: LD_INT 11
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 34
26345: PUSH
26346: LD_INT 30
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: LIST
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PPUSH
26362: CALL_OW 69
26366: ST_TO_ADDR
// if not tmp then
26367: LD_VAR 0 2
26371: NOT
26372: IFFALSE 26376
// exit ;
26374: GO 26405
// for i in tmp do
26376: LD_ADDR_VAR 0 1
26380: PUSH
26381: LD_VAR 0 2
26385: PUSH
26386: FOR_IN
26387: IFFALSE 26403
// begin SetLives ( i , 0 ) ;
26389: LD_VAR 0 1
26393: PPUSH
26394: LD_INT 0
26396: PPUSH
26397: CALL_OW 234
// end ;
26401: GO 26386
26403: POP
26404: POP
// end ;
26405: PPOPN 2
26407: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26408: LD_EXP 63
26412: IFFALSE 26420
26414: PUSH
26415: LD_EXP 73
26419: AND
26420: IFFALSE 26440
26422: GO 26424
26424: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26425: LD_INT 32
26427: PPUSH
26428: LD_OWVAR 2
26432: PPUSH
26433: LD_INT 0
26435: PPUSH
26436: CALL_OW 324
26440: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26441: LD_EXP 63
26445: IFFALSE 26453
26447: PUSH
26448: LD_EXP 74
26452: AND
26453: IFFALSE 26636
26455: GO 26457
26457: DISABLE
26458: LD_INT 0
26460: PPUSH
26461: PPUSH
26462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26463: LD_ADDR_VAR 0 2
26467: PUSH
26468: LD_INT 22
26470: PUSH
26471: LD_OWVAR 2
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 33
26482: PUSH
26483: LD_INT 3
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PPUSH
26494: CALL_OW 69
26498: ST_TO_ADDR
// if not tmp then
26499: LD_VAR 0 2
26503: NOT
26504: IFFALSE 26508
// exit ;
26506: GO 26636
// side := 0 ;
26508: LD_ADDR_VAR 0 3
26512: PUSH
26513: LD_INT 0
26515: ST_TO_ADDR
// for i := 1 to 8 do
26516: LD_ADDR_VAR 0 1
26520: PUSH
26521: DOUBLE
26522: LD_INT 1
26524: DEC
26525: ST_TO_ADDR
26526: LD_INT 8
26528: PUSH
26529: FOR_TO
26530: IFFALSE 26580
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26532: LD_OWVAR 2
26536: PUSH
26537: LD_VAR 0 1
26541: NONEQUAL
26542: IFFALSE 26564
26544: PUSH
26545: LD_OWVAR 2
26549: PPUSH
26550: LD_VAR 0 1
26554: PPUSH
26555: CALL_OW 81
26559: PUSH
26560: LD_INT 2
26562: EQUAL
26563: AND
26564: IFFALSE 26578
// begin side := i ;
26566: LD_ADDR_VAR 0 3
26570: PUSH
26571: LD_VAR 0 1
26575: ST_TO_ADDR
// break ;
26576: GO 26580
// end ;
26578: GO 26529
26580: POP
26581: POP
// if not side then
26582: LD_VAR 0 3
26586: NOT
26587: IFFALSE 26591
// exit ;
26589: GO 26636
// for i := 1 to tmp do
26591: LD_ADDR_VAR 0 1
26595: PUSH
26596: DOUBLE
26597: LD_INT 1
26599: DEC
26600: ST_TO_ADDR
26601: LD_VAR 0 2
26605: PUSH
26606: FOR_TO
26607: IFFALSE 26634
// if Prob ( 60 ) then
26609: LD_INT 60
26611: PPUSH
26612: CALL_OW 13
26616: IFFALSE 26632
// SetSide ( i , side ) ;
26618: LD_VAR 0 1
26622: PPUSH
26623: LD_VAR 0 3
26627: PPUSH
26628: CALL_OW 235
26632: GO 26606
26634: POP
26635: POP
// end ;
26636: PPOPN 3
26638: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26639: LD_EXP 63
26643: IFFALSE 26651
26645: PUSH
26646: LD_EXP 76
26650: AND
26651: IFFALSE 26770
26653: GO 26655
26655: DISABLE
26656: LD_INT 0
26658: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26659: LD_ADDR_VAR 0 1
26663: PUSH
26664: LD_INT 22
26666: PUSH
26667: LD_OWVAR 2
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 21
26678: PUSH
26679: LD_INT 1
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 3
26688: PUSH
26689: LD_INT 23
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: LIST
26707: PPUSH
26708: CALL_OW 69
26712: PUSH
26713: FOR_IN
26714: IFFALSE 26768
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26716: LD_VAR 0 1
26720: PPUSH
26721: CALL_OW 257
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: LD_INT 2
26731: PUSH
26732: LD_INT 3
26734: PUSH
26735: LD_INT 4
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: IN
26744: IFFALSE 26766
// SetClass ( un , rand ( 1 , 4 ) ) ;
26746: LD_VAR 0 1
26750: PPUSH
26751: LD_INT 1
26753: PPUSH
26754: LD_INT 4
26756: PPUSH
26757: CALL_OW 12
26761: PPUSH
26762: CALL_OW 336
26766: GO 26713
26768: POP
26769: POP
// end ;
26770: PPOPN 1
26772: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26773: LD_EXP 63
26777: IFFALSE 26785
26779: PUSH
26780: LD_EXP 75
26784: AND
26785: IFFALSE 26864
26787: GO 26789
26789: DISABLE
26790: LD_INT 0
26792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26793: LD_ADDR_VAR 0 1
26797: PUSH
26798: LD_INT 22
26800: PUSH
26801: LD_OWVAR 2
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 21
26812: PUSH
26813: LD_INT 3
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PPUSH
26824: CALL_OW 69
26828: ST_TO_ADDR
// if not tmp then
26829: LD_VAR 0 1
26833: NOT
26834: IFFALSE 26838
// exit ;
26836: GO 26864
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26838: LD_VAR 0 1
26842: PUSH
26843: LD_INT 1
26845: PPUSH
26846: LD_VAR 0 1
26850: PPUSH
26851: CALL_OW 12
26855: ARRAY
26856: PPUSH
26857: LD_INT 100
26859: PPUSH
26860: CALL_OW 234
// end ;
26864: PPOPN 1
26866: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26867: LD_EXP 63
26871: IFFALSE 26879
26873: PUSH
26874: LD_EXP 77
26878: AND
26879: IFFALSE 26977
26881: GO 26883
26883: DISABLE
26884: LD_INT 0
26886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26887: LD_ADDR_VAR 0 1
26891: PUSH
26892: LD_INT 22
26894: PUSH
26895: LD_OWVAR 2
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 21
26906: PUSH
26907: LD_INT 1
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PPUSH
26918: CALL_OW 69
26922: ST_TO_ADDR
// if not tmp then
26923: LD_VAR 0 1
26927: NOT
26928: IFFALSE 26932
// exit ;
26930: GO 26977
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26932: LD_VAR 0 1
26936: PUSH
26937: LD_INT 1
26939: PPUSH
26940: LD_VAR 0 1
26944: PPUSH
26945: CALL_OW 12
26949: ARRAY
26950: PPUSH
26951: LD_INT 1
26953: PPUSH
26954: LD_INT 4
26956: PPUSH
26957: CALL_OW 12
26961: PPUSH
26962: LD_INT 3000
26964: PPUSH
26965: LD_INT 9000
26967: PPUSH
26968: CALL_OW 12
26972: PPUSH
26973: CALL_OW 492
// end ;
26977: PPOPN 1
26979: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26980: LD_EXP 63
26984: IFFALSE 26992
26986: PUSH
26987: LD_EXP 78
26991: AND
26992: IFFALSE 27012
26994: GO 26996
26996: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26997: LD_INT 1
26999: PPUSH
27000: LD_OWVAR 2
27004: PPUSH
27005: LD_INT 0
27007: PPUSH
27008: CALL_OW 324
27012: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27013: LD_EXP 63
27017: IFFALSE 27025
27019: PUSH
27020: LD_EXP 79
27024: AND
27025: IFFALSE 27108
27027: GO 27029
27029: DISABLE
27030: LD_INT 0
27032: PPUSH
27033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27034: LD_ADDR_VAR 0 2
27038: PUSH
27039: LD_INT 22
27041: PUSH
27042: LD_OWVAR 2
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 21
27053: PUSH
27054: LD_INT 3
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PPUSH
27065: CALL_OW 69
27069: ST_TO_ADDR
// if not tmp then
27070: LD_VAR 0 2
27074: NOT
27075: IFFALSE 27079
// exit ;
27077: GO 27108
// for i in tmp do
27079: LD_ADDR_VAR 0 1
27083: PUSH
27084: LD_VAR 0 2
27088: PUSH
27089: FOR_IN
27090: IFFALSE 27106
// SetBLevel ( i , 10 ) ;
27092: LD_VAR 0 1
27096: PPUSH
27097: LD_INT 10
27099: PPUSH
27100: CALL_OW 241
27104: GO 27089
27106: POP
27107: POP
// end ;
27108: PPOPN 2
27110: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27111: LD_EXP 63
27115: IFFALSE 27123
27117: PUSH
27118: LD_EXP 80
27122: AND
27123: IFFALSE 27234
27125: GO 27127
27127: DISABLE
27128: LD_INT 0
27130: PPUSH
27131: PPUSH
27132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27133: LD_ADDR_VAR 0 3
27137: PUSH
27138: LD_INT 22
27140: PUSH
27141: LD_OWVAR 2
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 25
27152: PUSH
27153: LD_INT 1
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PPUSH
27164: CALL_OW 69
27168: ST_TO_ADDR
// if not tmp then
27169: LD_VAR 0 3
27173: NOT
27174: IFFALSE 27178
// exit ;
27176: GO 27234
// un := tmp [ rand ( 1 , tmp ) ] ;
27178: LD_ADDR_VAR 0 2
27182: PUSH
27183: LD_VAR 0 3
27187: PUSH
27188: LD_INT 1
27190: PPUSH
27191: LD_VAR 0 3
27195: PPUSH
27196: CALL_OW 12
27200: ARRAY
27201: ST_TO_ADDR
// if Crawls ( un ) then
27202: LD_VAR 0 2
27206: PPUSH
27207: CALL_OW 318
27211: IFFALSE 27222
// ComWalk ( un ) ;
27213: LD_VAR 0 2
27217: PPUSH
27218: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27222: LD_VAR 0 2
27226: PPUSH
27227: LD_INT 5
27229: PPUSH
27230: CALL_OW 336
// end ;
27234: PPOPN 3
27236: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27237: LD_EXP 63
27241: IFFALSE 27249
27243: PUSH
27244: LD_EXP 81
27248: AND
27249: IFFALSE 27261
27251: PUSH
27252: LD_OWVAR 67
27256: PUSH
27257: LD_INT 4
27259: LESS
27260: AND
27261: IFFALSE 27280
27263: GO 27265
27265: DISABLE
// begin Difficulty := Difficulty + 1 ;
27266: LD_ADDR_OWVAR 67
27270: PUSH
27271: LD_OWVAR 67
27275: PUSH
27276: LD_INT 1
27278: PLUS
27279: ST_TO_ADDR
// end ;
27280: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27281: LD_EXP 63
27285: IFFALSE 27293
27287: PUSH
27288: LD_EXP 82
27292: AND
27293: IFFALSE 27396
27295: GO 27297
27297: DISABLE
27298: LD_INT 0
27300: PPUSH
// begin for i := 1 to 5 do
27301: LD_ADDR_VAR 0 1
27305: PUSH
27306: DOUBLE
27307: LD_INT 1
27309: DEC
27310: ST_TO_ADDR
27311: LD_INT 5
27313: PUSH
27314: FOR_TO
27315: IFFALSE 27394
// begin uc_nation := nation_nature ;
27317: LD_ADDR_OWVAR 21
27321: PUSH
27322: LD_INT 0
27324: ST_TO_ADDR
// uc_side := 0 ;
27325: LD_ADDR_OWVAR 20
27329: PUSH
27330: LD_INT 0
27332: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27333: LD_ADDR_OWVAR 29
27337: PUSH
27338: LD_INT 12
27340: PUSH
27341: LD_INT 12
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: ST_TO_ADDR
// hc_agressivity := 20 ;
27348: LD_ADDR_OWVAR 35
27352: PUSH
27353: LD_INT 20
27355: ST_TO_ADDR
// hc_class := class_tiger ;
27356: LD_ADDR_OWVAR 28
27360: PUSH
27361: LD_INT 14
27363: ST_TO_ADDR
// hc_gallery :=  ;
27364: LD_ADDR_OWVAR 33
27368: PUSH
27369: LD_STRING 
27371: ST_TO_ADDR
// hc_name :=  ;
27372: LD_ADDR_OWVAR 26
27376: PUSH
27377: LD_STRING 
27379: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27380: CALL_OW 44
27384: PPUSH
27385: LD_INT 0
27387: PPUSH
27388: CALL_OW 51
// end ;
27392: GO 27314
27394: POP
27395: POP
// end ;
27396: PPOPN 1
27398: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27399: LD_EXP 63
27403: IFFALSE 27411
27405: PUSH
27406: LD_EXP 83
27410: AND
27411: IFFALSE 27420
27413: GO 27415
27415: DISABLE
// StreamSibBomb ;
27416: CALL 27421 0 0
27420: END
// export function StreamSibBomb ; var i , x , y ; begin
27421: LD_INT 0
27423: PPUSH
27424: PPUSH
27425: PPUSH
27426: PPUSH
// result := false ;
27427: LD_ADDR_VAR 0 1
27431: PUSH
27432: LD_INT 0
27434: ST_TO_ADDR
// for i := 1 to 16 do
27435: LD_ADDR_VAR 0 2
27439: PUSH
27440: DOUBLE
27441: LD_INT 1
27443: DEC
27444: ST_TO_ADDR
27445: LD_INT 16
27447: PUSH
27448: FOR_TO
27449: IFFALSE 27648
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27451: LD_ADDR_VAR 0 3
27455: PUSH
27456: LD_INT 10
27458: PUSH
27459: LD_INT 20
27461: PUSH
27462: LD_INT 30
27464: PUSH
27465: LD_INT 40
27467: PUSH
27468: LD_INT 50
27470: PUSH
27471: LD_INT 60
27473: PUSH
27474: LD_INT 70
27476: PUSH
27477: LD_INT 80
27479: PUSH
27480: LD_INT 90
27482: PUSH
27483: LD_INT 100
27485: PUSH
27486: LD_INT 110
27488: PUSH
27489: LD_INT 120
27491: PUSH
27492: LD_INT 130
27494: PUSH
27495: LD_INT 140
27497: PUSH
27498: LD_INT 150
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 1
27520: PPUSH
27521: LD_INT 15
27523: PPUSH
27524: CALL_OW 12
27528: ARRAY
27529: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27530: LD_ADDR_VAR 0 4
27534: PUSH
27535: LD_INT 10
27537: PUSH
27538: LD_INT 20
27540: PUSH
27541: LD_INT 30
27543: PUSH
27544: LD_INT 40
27546: PUSH
27547: LD_INT 50
27549: PUSH
27550: LD_INT 60
27552: PUSH
27553: LD_INT 70
27555: PUSH
27556: LD_INT 80
27558: PUSH
27559: LD_INT 90
27561: PUSH
27562: LD_INT 100
27564: PUSH
27565: LD_INT 110
27567: PUSH
27568: LD_INT 120
27570: PUSH
27571: LD_INT 130
27573: PUSH
27574: LD_INT 140
27576: PUSH
27577: LD_INT 150
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 1
27599: PPUSH
27600: LD_INT 15
27602: PPUSH
27603: CALL_OW 12
27607: ARRAY
27608: ST_TO_ADDR
// if ValidHex ( x , y ) then
27609: LD_VAR 0 3
27613: PPUSH
27614: LD_VAR 0 4
27618: PPUSH
27619: CALL_OW 488
27623: IFFALSE 27646
// begin result := [ x , y ] ;
27625: LD_ADDR_VAR 0 1
27629: PUSH
27630: LD_VAR 0 3
27634: PUSH
27635: LD_VAR 0 4
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: ST_TO_ADDR
// break ;
27644: GO 27648
// end ; end ;
27646: GO 27448
27648: POP
27649: POP
// if result then
27650: LD_VAR 0 1
27654: IFFALSE 27714
// begin ToLua ( playSibBomb() ) ;
27656: LD_STRING playSibBomb()
27658: PPUSH
27659: CALL_OW 559
// wait ( 0 0$14 ) ;
27663: LD_INT 490
27665: PPUSH
27666: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27670: LD_VAR 0 1
27674: PUSH
27675: LD_INT 1
27677: ARRAY
27678: PPUSH
27679: LD_VAR 0 1
27683: PUSH
27684: LD_INT 2
27686: ARRAY
27687: PPUSH
27688: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27692: LD_VAR 0 1
27696: PUSH
27697: LD_INT 1
27699: ARRAY
27700: PPUSH
27701: LD_VAR 0 1
27705: PUSH
27706: LD_INT 2
27708: ARRAY
27709: PPUSH
27710: CALL_OW 429
// end ; end ;
27714: LD_VAR 0 1
27718: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27719: LD_EXP 63
27723: IFFALSE 27731
27725: PUSH
27726: LD_EXP 85
27730: AND
27731: IFFALSE 27743
27733: GO 27735
27735: DISABLE
// YouLost (  ) ;
27736: LD_STRING 
27738: PPUSH
27739: CALL_OW 104
27743: END
// every 0 0$1 trigger StreamModeActive and sFog do
27744: LD_EXP 63
27748: IFFALSE 27756
27750: PUSH
27751: LD_EXP 84
27755: AND
27756: IFFALSE 27770
27758: GO 27760
27760: DISABLE
// FogOff ( your_side ) ;
27761: LD_OWVAR 2
27765: PPUSH
27766: CALL_OW 344
27770: END
// every 0 0$1 trigger StreamModeActive and sSun do
27771: LD_EXP 63
27775: IFFALSE 27783
27777: PUSH
27778: LD_EXP 86
27782: AND
27783: IFFALSE 27811
27785: GO 27787
27787: DISABLE
// begin solar_recharge_percent := 0 ;
27788: LD_ADDR_OWVAR 79
27792: PUSH
27793: LD_INT 0
27795: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27796: LD_INT 10500
27798: PPUSH
27799: CALL_OW 67
// solar_recharge_percent := 100 ;
27803: LD_ADDR_OWVAR 79
27807: PUSH
27808: LD_INT 100
27810: ST_TO_ADDR
// end ;
27811: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27812: LD_EXP 63
27816: IFFALSE 27824
27818: PUSH
27819: LD_EXP 87
27823: AND
27824: IFFALSE 28063
27826: GO 27828
27828: DISABLE
27829: LD_INT 0
27831: PPUSH
27832: PPUSH
27833: PPUSH
// begin tmp := [ ] ;
27834: LD_ADDR_VAR 0 3
27838: PUSH
27839: EMPTY
27840: ST_TO_ADDR
// for i := 1 to 6 do
27841: LD_ADDR_VAR 0 1
27845: PUSH
27846: DOUBLE
27847: LD_INT 1
27849: DEC
27850: ST_TO_ADDR
27851: LD_INT 6
27853: PUSH
27854: FOR_TO
27855: IFFALSE 27960
// begin uc_nation := nation_nature ;
27857: LD_ADDR_OWVAR 21
27861: PUSH
27862: LD_INT 0
27864: ST_TO_ADDR
// uc_side := 0 ;
27865: LD_ADDR_OWVAR 20
27869: PUSH
27870: LD_INT 0
27872: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27873: LD_ADDR_OWVAR 29
27877: PUSH
27878: LD_INT 12
27880: PUSH
27881: LD_INT 12
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: ST_TO_ADDR
// hc_agressivity := 20 ;
27888: LD_ADDR_OWVAR 35
27892: PUSH
27893: LD_INT 20
27895: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27896: LD_ADDR_OWVAR 28
27900: PUSH
27901: LD_INT 17
27903: ST_TO_ADDR
// hc_gallery :=  ;
27904: LD_ADDR_OWVAR 33
27908: PUSH
27909: LD_STRING 
27911: ST_TO_ADDR
// hc_name :=  ;
27912: LD_ADDR_OWVAR 26
27916: PUSH
27917: LD_STRING 
27919: ST_TO_ADDR
// un := CreateHuman ;
27920: LD_ADDR_VAR 0 2
27924: PUSH
27925: CALL_OW 44
27929: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27930: LD_VAR 0 2
27934: PPUSH
27935: LD_INT 1
27937: PPUSH
27938: CALL_OW 51
// tmp := tmp ^ un ;
27942: LD_ADDR_VAR 0 3
27946: PUSH
27947: LD_VAR 0 3
27951: PUSH
27952: LD_VAR 0 2
27956: ADD
27957: ST_TO_ADDR
// end ;
27958: GO 27854
27960: POP
27961: POP
// repeat wait ( 0 0$1 ) ;
27962: LD_INT 35
27964: PPUSH
27965: CALL_OW 67
// for un in tmp do
27969: LD_ADDR_VAR 0 2
27973: PUSH
27974: LD_VAR 0 3
27978: PUSH
27979: FOR_IN
27980: IFFALSE 28054
// begin if IsDead ( un ) then
27982: LD_VAR 0 2
27986: PPUSH
27987: CALL_OW 301
27991: IFFALSE 28011
// begin tmp := tmp diff un ;
27993: LD_ADDR_VAR 0 3
27997: PUSH
27998: LD_VAR 0 3
28002: PUSH
28003: LD_VAR 0 2
28007: DIFF
28008: ST_TO_ADDR
// continue ;
28009: GO 27979
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28011: LD_VAR 0 2
28015: PPUSH
28016: LD_INT 3
28018: PUSH
28019: LD_INT 22
28021: PUSH
28022: LD_INT 0
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PPUSH
28033: CALL_OW 69
28037: PPUSH
28038: LD_VAR 0 2
28042: PPUSH
28043: CALL_OW 74
28047: PPUSH
28048: CALL_OW 115
// end ;
28052: GO 27979
28054: POP
28055: POP
// until not tmp ;
28056: LD_VAR 0 3
28060: NOT
28061: IFFALSE 27962
// end ;
28063: PPOPN 3
28065: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28066: LD_EXP 63
28070: IFFALSE 28078
28072: PUSH
28073: LD_EXP 88
28077: AND
28078: IFFALSE 28132
28080: GO 28082
28082: DISABLE
// begin ToLua ( displayTroll(); ) ;
28083: LD_STRING displayTroll();
28085: PPUSH
28086: CALL_OW 559
// wait ( 3 3$00 ) ;
28090: LD_INT 6300
28092: PPUSH
28093: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28097: LD_STRING hideTroll();
28099: PPUSH
28100: CALL_OW 559
// wait ( 1 1$00 ) ;
28104: LD_INT 2100
28106: PPUSH
28107: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28111: LD_STRING displayTroll();
28113: PPUSH
28114: CALL_OW 559
// wait ( 1 1$00 ) ;
28118: LD_INT 2100
28120: PPUSH
28121: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28125: LD_STRING hideTroll();
28127: PPUSH
28128: CALL_OW 559
// end ;
28132: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28133: LD_EXP 63
28137: IFFALSE 28145
28139: PUSH
28140: LD_EXP 89
28144: AND
28145: IFFALSE 28208
28147: GO 28149
28149: DISABLE
28150: LD_INT 0
28152: PPUSH
// begin p := 0 ;
28153: LD_ADDR_VAR 0 1
28157: PUSH
28158: LD_INT 0
28160: ST_TO_ADDR
// repeat game_speed := 1 ;
28161: LD_ADDR_OWVAR 65
28165: PUSH
28166: LD_INT 1
28168: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28169: LD_INT 35
28171: PPUSH
28172: CALL_OW 67
// p := p + 1 ;
28176: LD_ADDR_VAR 0 1
28180: PUSH
28181: LD_VAR 0 1
28185: PUSH
28186: LD_INT 1
28188: PLUS
28189: ST_TO_ADDR
// until p >= 60 ;
28190: LD_VAR 0 1
28194: PUSH
28195: LD_INT 60
28197: GREATEREQUAL
28198: IFFALSE 28161
// game_speed := 4 ;
28200: LD_ADDR_OWVAR 65
28204: PUSH
28205: LD_INT 4
28207: ST_TO_ADDR
// end ;
28208: PPOPN 1
28210: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28211: LD_EXP 63
28215: IFFALSE 28223
28217: PUSH
28218: LD_EXP 90
28222: AND
28223: IFFALSE 28369
28225: GO 28227
28227: DISABLE
28228: LD_INT 0
28230: PPUSH
28231: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28232: LD_ADDR_VAR 0 1
28236: PUSH
28237: LD_INT 22
28239: PUSH
28240: LD_OWVAR 2
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 2
28251: PUSH
28252: LD_INT 30
28254: PUSH
28255: LD_INT 0
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 30
28264: PUSH
28265: LD_INT 1
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: LIST
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PPUSH
28281: CALL_OW 69
28285: ST_TO_ADDR
// if not depot then
28286: LD_VAR 0 1
28290: NOT
28291: IFFALSE 28295
// exit ;
28293: GO 28369
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28295: LD_ADDR_VAR 0 2
28299: PUSH
28300: LD_VAR 0 1
28304: PUSH
28305: LD_INT 1
28307: PPUSH
28308: LD_VAR 0 1
28312: PPUSH
28313: CALL_OW 12
28317: ARRAY
28318: PPUSH
28319: CALL_OW 274
28323: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28324: LD_VAR 0 2
28328: PPUSH
28329: LD_INT 1
28331: PPUSH
28332: LD_INT 0
28334: PPUSH
28335: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28339: LD_VAR 0 2
28343: PPUSH
28344: LD_INT 2
28346: PPUSH
28347: LD_INT 0
28349: PPUSH
28350: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28354: LD_VAR 0 2
28358: PPUSH
28359: LD_INT 3
28361: PPUSH
28362: LD_INT 0
28364: PPUSH
28365: CALL_OW 277
// end ;
28369: PPOPN 2
28371: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28372: LD_EXP 63
28376: IFFALSE 28384
28378: PUSH
28379: LD_EXP 91
28383: AND
28384: IFFALSE 28481
28386: GO 28388
28388: DISABLE
28389: LD_INT 0
28391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28392: LD_ADDR_VAR 0 1
28396: PUSH
28397: LD_INT 22
28399: PUSH
28400: LD_OWVAR 2
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 21
28411: PUSH
28412: LD_INT 1
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 3
28421: PUSH
28422: LD_INT 23
28424: PUSH
28425: LD_INT 0
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: LIST
28440: PPUSH
28441: CALL_OW 69
28445: ST_TO_ADDR
// if not tmp then
28446: LD_VAR 0 1
28450: NOT
28451: IFFALSE 28455
// exit ;
28453: GO 28481
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28455: LD_VAR 0 1
28459: PUSH
28460: LD_INT 1
28462: PPUSH
28463: LD_VAR 0 1
28467: PPUSH
28468: CALL_OW 12
28472: ARRAY
28473: PPUSH
28474: LD_INT 200
28476: PPUSH
28477: CALL_OW 234
// end ;
28481: PPOPN 1
28483: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28484: LD_EXP 63
28488: IFFALSE 28496
28490: PUSH
28491: LD_EXP 92
28495: AND
28496: IFFALSE 28575
28498: GO 28500
28500: DISABLE
28501: LD_INT 0
28503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28504: LD_ADDR_VAR 0 1
28508: PUSH
28509: LD_INT 22
28511: PUSH
28512: LD_OWVAR 2
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 21
28523: PUSH
28524: LD_INT 2
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PPUSH
28535: CALL_OW 69
28539: ST_TO_ADDR
// if not tmp then
28540: LD_VAR 0 1
28544: NOT
28545: IFFALSE 28549
// exit ;
28547: GO 28575
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28549: LD_VAR 0 1
28553: PUSH
28554: LD_INT 1
28556: PPUSH
28557: LD_VAR 0 1
28561: PPUSH
28562: CALL_OW 12
28566: ARRAY
28567: PPUSH
28568: LD_INT 60
28570: PPUSH
28571: CALL_OW 234
// end ;
28575: PPOPN 1
28577: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28578: LD_EXP 63
28582: IFFALSE 28590
28584: PUSH
28585: LD_EXP 93
28589: AND
28590: IFFALSE 28689
28592: GO 28594
28594: DISABLE
28595: LD_INT 0
28597: PPUSH
28598: PPUSH
// begin enable ;
28599: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28600: LD_ADDR_VAR 0 1
28604: PUSH
28605: LD_INT 22
28607: PUSH
28608: LD_OWVAR 2
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 61
28619: PUSH
28620: EMPTY
28621: LIST
28622: PUSH
28623: LD_INT 33
28625: PUSH
28626: LD_INT 2
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: LIST
28637: PPUSH
28638: CALL_OW 69
28642: ST_TO_ADDR
// if not tmp then
28643: LD_VAR 0 1
28647: NOT
28648: IFFALSE 28652
// exit ;
28650: GO 28689
// for i in tmp do
28652: LD_ADDR_VAR 0 2
28656: PUSH
28657: LD_VAR 0 1
28661: PUSH
28662: FOR_IN
28663: IFFALSE 28687
// if IsControledBy ( i ) then
28665: LD_VAR 0 2
28669: PPUSH
28670: CALL_OW 312
28674: IFFALSE 28685
// ComUnlink ( i ) ;
28676: LD_VAR 0 2
28680: PPUSH
28681: CALL_OW 136
28685: GO 28662
28687: POP
28688: POP
// end ;
28689: PPOPN 2
28691: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28692: LD_EXP 63
28696: IFFALSE 28704
28698: PUSH
28699: LD_EXP 94
28703: AND
28704: IFFALSE 28844
28706: GO 28708
28708: DISABLE
28709: LD_INT 0
28711: PPUSH
28712: PPUSH
// begin ToLua ( displayPowell(); ) ;
28713: LD_STRING displayPowell();
28715: PPUSH
28716: CALL_OW 559
// uc_side := 0 ;
28720: LD_ADDR_OWVAR 20
28724: PUSH
28725: LD_INT 0
28727: ST_TO_ADDR
// uc_nation := 2 ;
28728: LD_ADDR_OWVAR 21
28732: PUSH
28733: LD_INT 2
28735: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28736: LD_ADDR_OWVAR 37
28740: PUSH
28741: LD_INT 14
28743: ST_TO_ADDR
// vc_engine := engine_siberite ;
28744: LD_ADDR_OWVAR 39
28748: PUSH
28749: LD_INT 3
28751: ST_TO_ADDR
// vc_control := control_apeman ;
28752: LD_ADDR_OWVAR 38
28756: PUSH
28757: LD_INT 5
28759: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28760: LD_ADDR_OWVAR 40
28764: PUSH
28765: LD_INT 29
28767: ST_TO_ADDR
// un := CreateVehicle ;
28768: LD_ADDR_VAR 0 2
28772: PUSH
28773: CALL_OW 45
28777: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28778: LD_VAR 0 2
28782: PPUSH
28783: LD_INT 1
28785: PPUSH
28786: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28790: LD_INT 35
28792: PPUSH
28793: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28797: LD_VAR 0 2
28801: PPUSH
28802: LD_INT 22
28804: PUSH
28805: LD_OWVAR 2
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PPUSH
28814: CALL_OW 69
28818: PPUSH
28819: LD_VAR 0 2
28823: PPUSH
28824: CALL_OW 74
28828: PPUSH
28829: CALL_OW 115
// until IsDead ( un ) ;
28833: LD_VAR 0 2
28837: PPUSH
28838: CALL_OW 301
28842: IFFALSE 28790
// end ;
28844: PPOPN 2
28846: END
// every 0 0$1 trigger StreamModeActive and sStu do
28847: LD_EXP 63
28851: IFFALSE 28859
28853: PUSH
28854: LD_EXP 102
28858: AND
28859: IFFALSE 28875
28861: GO 28863
28863: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28864: LD_STRING displayStucuk();
28866: PPUSH
28867: CALL_OW 559
// ResetFog ;
28871: CALL_OW 335
// end ;
28875: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28876: LD_EXP 63
28880: IFFALSE 28888
28882: PUSH
28883: LD_EXP 95
28887: AND
28888: IFFALSE 29029
28890: GO 28892
28892: DISABLE
28893: LD_INT 0
28895: PPUSH
28896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28897: LD_ADDR_VAR 0 2
28901: PUSH
28902: LD_INT 22
28904: PUSH
28905: LD_OWVAR 2
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 21
28916: PUSH
28917: LD_INT 1
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PPUSH
28928: CALL_OW 69
28932: ST_TO_ADDR
// if not tmp then
28933: LD_VAR 0 2
28937: NOT
28938: IFFALSE 28942
// exit ;
28940: GO 29029
// un := tmp [ rand ( 1 , tmp ) ] ;
28942: LD_ADDR_VAR 0 1
28946: PUSH
28947: LD_VAR 0 2
28951: PUSH
28952: LD_INT 1
28954: PPUSH
28955: LD_VAR 0 2
28959: PPUSH
28960: CALL_OW 12
28964: ARRAY
28965: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28966: LD_VAR 0 1
28970: PPUSH
28971: LD_INT 0
28973: PPUSH
28974: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28978: LD_VAR 0 1
28982: PPUSH
28983: LD_OWVAR 3
28987: PUSH
28988: LD_VAR 0 1
28992: DIFF
28993: PPUSH
28994: LD_VAR 0 1
28998: PPUSH
28999: CALL_OW 74
29003: PPUSH
29004: CALL_OW 115
// wait ( 0 0$20 ) ;
29008: LD_INT 700
29010: PPUSH
29011: CALL_OW 67
// SetSide ( un , your_side ) ;
29015: LD_VAR 0 1
29019: PPUSH
29020: LD_OWVAR 2
29024: PPUSH
29025: CALL_OW 235
// end ;
29029: PPOPN 2
29031: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29032: LD_EXP 63
29036: IFFALSE 29044
29038: PUSH
29039: LD_EXP 96
29043: AND
29044: IFFALSE 29150
29046: GO 29048
29048: DISABLE
29049: LD_INT 0
29051: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29052: LD_ADDR_VAR 0 1
29056: PUSH
29057: LD_INT 22
29059: PUSH
29060: LD_OWVAR 2
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 2
29071: PUSH
29072: LD_INT 30
29074: PUSH
29075: LD_INT 0
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 30
29084: PUSH
29085: LD_INT 1
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: LIST
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PPUSH
29101: CALL_OW 69
29105: ST_TO_ADDR
// if not depot then
29106: LD_VAR 0 1
29110: NOT
29111: IFFALSE 29115
// exit ;
29113: GO 29150
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29115: LD_VAR 0 1
29119: PUSH
29120: LD_INT 1
29122: ARRAY
29123: PPUSH
29124: CALL_OW 250
29128: PPUSH
29129: LD_VAR 0 1
29133: PUSH
29134: LD_INT 1
29136: ARRAY
29137: PPUSH
29138: CALL_OW 251
29142: PPUSH
29143: LD_INT 70
29145: PPUSH
29146: CALL_OW 495
// end ;
29150: PPOPN 1
29152: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29153: LD_EXP 63
29157: IFFALSE 29165
29159: PUSH
29160: LD_EXP 97
29164: AND
29165: IFFALSE 29376
29167: GO 29169
29169: DISABLE
29170: LD_INT 0
29172: PPUSH
29173: PPUSH
29174: PPUSH
29175: PPUSH
29176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29177: LD_ADDR_VAR 0 5
29181: PUSH
29182: LD_INT 22
29184: PUSH
29185: LD_OWVAR 2
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 21
29196: PUSH
29197: LD_INT 1
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PPUSH
29208: CALL_OW 69
29212: ST_TO_ADDR
// if not tmp then
29213: LD_VAR 0 5
29217: NOT
29218: IFFALSE 29222
// exit ;
29220: GO 29376
// for i in tmp do
29222: LD_ADDR_VAR 0 1
29226: PUSH
29227: LD_VAR 0 5
29231: PUSH
29232: FOR_IN
29233: IFFALSE 29374
// begin d := rand ( 0 , 5 ) ;
29235: LD_ADDR_VAR 0 4
29239: PUSH
29240: LD_INT 0
29242: PPUSH
29243: LD_INT 5
29245: PPUSH
29246: CALL_OW 12
29250: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29251: LD_ADDR_VAR 0 2
29255: PUSH
29256: LD_VAR 0 1
29260: PPUSH
29261: CALL_OW 250
29265: PPUSH
29266: LD_VAR 0 4
29270: PPUSH
29271: LD_INT 3
29273: PPUSH
29274: LD_INT 12
29276: PPUSH
29277: CALL_OW 12
29281: PPUSH
29282: CALL_OW 272
29286: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29287: LD_ADDR_VAR 0 3
29291: PUSH
29292: LD_VAR 0 1
29296: PPUSH
29297: CALL_OW 251
29301: PPUSH
29302: LD_VAR 0 4
29306: PPUSH
29307: LD_INT 3
29309: PPUSH
29310: LD_INT 12
29312: PPUSH
29313: CALL_OW 12
29317: PPUSH
29318: CALL_OW 273
29322: ST_TO_ADDR
// if ValidHex ( x , y ) then
29323: LD_VAR 0 2
29327: PPUSH
29328: LD_VAR 0 3
29332: PPUSH
29333: CALL_OW 488
29337: IFFALSE 29372
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29339: LD_VAR 0 1
29343: PPUSH
29344: LD_VAR 0 2
29348: PPUSH
29349: LD_VAR 0 3
29353: PPUSH
29354: LD_INT 3
29356: PPUSH
29357: LD_INT 6
29359: PPUSH
29360: CALL_OW 12
29364: PPUSH
29365: LD_INT 1
29367: PPUSH
29368: CALL_OW 483
// end ;
29372: GO 29232
29374: POP
29375: POP
// end ;
29376: PPOPN 5
29378: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29379: LD_EXP 63
29383: IFFALSE 29391
29385: PUSH
29386: LD_EXP 98
29390: AND
29391: IFFALSE 29485
29393: GO 29395
29395: DISABLE
29396: LD_INT 0
29398: PPUSH
29399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29400: LD_ADDR_VAR 0 2
29404: PUSH
29405: LD_INT 22
29407: PUSH
29408: LD_OWVAR 2
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 32
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 21
29429: PUSH
29430: LD_INT 2
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: LIST
29441: PPUSH
29442: CALL_OW 69
29446: ST_TO_ADDR
// if not tmp then
29447: LD_VAR 0 2
29451: NOT
29452: IFFALSE 29456
// exit ;
29454: GO 29485
// for i in tmp do
29456: LD_ADDR_VAR 0 1
29460: PUSH
29461: LD_VAR 0 2
29465: PUSH
29466: FOR_IN
29467: IFFALSE 29483
// SetFuel ( i , 0 ) ;
29469: LD_VAR 0 1
29473: PPUSH
29474: LD_INT 0
29476: PPUSH
29477: CALL_OW 240
29481: GO 29466
29483: POP
29484: POP
// end ;
29485: PPOPN 2
29487: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29488: LD_EXP 63
29492: IFFALSE 29500
29494: PUSH
29495: LD_EXP 99
29499: AND
29500: IFFALSE 29566
29502: GO 29504
29504: DISABLE
29505: LD_INT 0
29507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29508: LD_ADDR_VAR 0 1
29512: PUSH
29513: LD_INT 22
29515: PUSH
29516: LD_OWVAR 2
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 30
29527: PUSH
29528: LD_INT 29
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PPUSH
29539: CALL_OW 69
29543: ST_TO_ADDR
// if not tmp then
29544: LD_VAR 0 1
29548: NOT
29549: IFFALSE 29553
// exit ;
29551: GO 29566
// DestroyUnit ( tmp [ 1 ] ) ;
29553: LD_VAR 0 1
29557: PUSH
29558: LD_INT 1
29560: ARRAY
29561: PPUSH
29562: CALL_OW 65
// end ;
29566: PPOPN 1
29568: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29569: LD_EXP 63
29573: IFFALSE 29581
29575: PUSH
29576: LD_EXP 101
29580: AND
29581: IFFALSE 29710
29583: GO 29585
29585: DISABLE
29586: LD_INT 0
29588: PPUSH
// begin uc_side := 0 ;
29589: LD_ADDR_OWVAR 20
29593: PUSH
29594: LD_INT 0
29596: ST_TO_ADDR
// uc_nation := nation_arabian ;
29597: LD_ADDR_OWVAR 21
29601: PUSH
29602: LD_INT 2
29604: ST_TO_ADDR
// hc_gallery :=  ;
29605: LD_ADDR_OWVAR 33
29609: PUSH
29610: LD_STRING 
29612: ST_TO_ADDR
// hc_name :=  ;
29613: LD_ADDR_OWVAR 26
29617: PUSH
29618: LD_STRING 
29620: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29621: LD_INT 1
29623: PPUSH
29624: LD_INT 11
29626: PPUSH
29627: LD_INT 10
29629: PPUSH
29630: CALL_OW 380
// un := CreateHuman ;
29634: LD_ADDR_VAR 0 1
29638: PUSH
29639: CALL_OW 44
29643: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29644: LD_VAR 0 1
29648: PPUSH
29649: LD_INT 1
29651: PPUSH
29652: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29656: LD_INT 35
29658: PPUSH
29659: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29663: LD_VAR 0 1
29667: PPUSH
29668: LD_INT 22
29670: PUSH
29671: LD_OWVAR 2
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PPUSH
29680: CALL_OW 69
29684: PPUSH
29685: LD_VAR 0 1
29689: PPUSH
29690: CALL_OW 74
29694: PPUSH
29695: CALL_OW 115
// until IsDead ( un ) ;
29699: LD_VAR 0 1
29703: PPUSH
29704: CALL_OW 301
29708: IFFALSE 29656
// end ;
29710: PPOPN 1
29712: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29713: LD_EXP 63
29717: IFFALSE 29725
29719: PUSH
29720: LD_EXP 103
29724: AND
29725: IFFALSE 29737
29727: GO 29729
29729: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29730: LD_STRING earthquake(getX(game), 0, 32)
29732: PPUSH
29733: CALL_OW 559
29737: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29738: LD_EXP 63
29742: IFFALSE 29750
29744: PUSH
29745: LD_EXP 104
29749: AND
29750: IFFALSE 29841
29752: GO 29754
29754: DISABLE
29755: LD_INT 0
29757: PPUSH
// begin enable ;
29758: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29759: LD_ADDR_VAR 0 1
29763: PUSH
29764: LD_INT 22
29766: PUSH
29767: LD_OWVAR 2
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 21
29778: PUSH
29779: LD_INT 2
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 33
29788: PUSH
29789: LD_INT 3
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: LIST
29800: PPUSH
29801: CALL_OW 69
29805: ST_TO_ADDR
// if not tmp then
29806: LD_VAR 0 1
29810: NOT
29811: IFFALSE 29815
// exit ;
29813: GO 29841
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29815: LD_VAR 0 1
29819: PUSH
29820: LD_INT 1
29822: PPUSH
29823: LD_VAR 0 1
29827: PPUSH
29828: CALL_OW 12
29832: ARRAY
29833: PPUSH
29834: LD_INT 1
29836: PPUSH
29837: CALL_OW 234
// end ;
29841: PPOPN 1
29843: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29844: LD_EXP 63
29848: IFFALSE 29856
29850: PUSH
29851: LD_EXP 105
29855: AND
29856: IFFALSE 29997
29858: GO 29860
29860: DISABLE
29861: LD_INT 0
29863: PPUSH
29864: PPUSH
29865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29866: LD_ADDR_VAR 0 3
29870: PUSH
29871: LD_INT 22
29873: PUSH
29874: LD_OWVAR 2
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 25
29885: PUSH
29886: LD_INT 1
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PPUSH
29897: CALL_OW 69
29901: ST_TO_ADDR
// if not tmp then
29902: LD_VAR 0 3
29906: NOT
29907: IFFALSE 29911
// exit ;
29909: GO 29997
// un := tmp [ rand ( 1 , tmp ) ] ;
29911: LD_ADDR_VAR 0 2
29915: PUSH
29916: LD_VAR 0 3
29920: PUSH
29921: LD_INT 1
29923: PPUSH
29924: LD_VAR 0 3
29928: PPUSH
29929: CALL_OW 12
29933: ARRAY
29934: ST_TO_ADDR
// if Crawls ( un ) then
29935: LD_VAR 0 2
29939: PPUSH
29940: CALL_OW 318
29944: IFFALSE 29955
// ComWalk ( un ) ;
29946: LD_VAR 0 2
29950: PPUSH
29951: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29955: LD_VAR 0 2
29959: PPUSH
29960: LD_INT 9
29962: PPUSH
29963: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29967: LD_INT 28
29969: PPUSH
29970: LD_OWVAR 2
29974: PPUSH
29975: LD_INT 2
29977: PPUSH
29978: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29982: LD_INT 29
29984: PPUSH
29985: LD_OWVAR 2
29989: PPUSH
29990: LD_INT 2
29992: PPUSH
29993: CALL_OW 322
// end ;
29997: PPOPN 3
29999: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30000: LD_EXP 63
30004: IFFALSE 30012
30006: PUSH
30007: LD_EXP 106
30011: AND
30012: IFFALSE 30123
30014: GO 30016
30016: DISABLE
30017: LD_INT 0
30019: PPUSH
30020: PPUSH
30021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30022: LD_ADDR_VAR 0 3
30026: PUSH
30027: LD_INT 22
30029: PUSH
30030: LD_OWVAR 2
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 25
30041: PUSH
30042: LD_INT 1
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PPUSH
30053: CALL_OW 69
30057: ST_TO_ADDR
// if not tmp then
30058: LD_VAR 0 3
30062: NOT
30063: IFFALSE 30067
// exit ;
30065: GO 30123
// un := tmp [ rand ( 1 , tmp ) ] ;
30067: LD_ADDR_VAR 0 2
30071: PUSH
30072: LD_VAR 0 3
30076: PUSH
30077: LD_INT 1
30079: PPUSH
30080: LD_VAR 0 3
30084: PPUSH
30085: CALL_OW 12
30089: ARRAY
30090: ST_TO_ADDR
// if Crawls ( un ) then
30091: LD_VAR 0 2
30095: PPUSH
30096: CALL_OW 318
30100: IFFALSE 30111
// ComWalk ( un ) ;
30102: LD_VAR 0 2
30106: PPUSH
30107: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30111: LD_VAR 0 2
30115: PPUSH
30116: LD_INT 8
30118: PPUSH
30119: CALL_OW 336
// end ;
30123: PPOPN 3
30125: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30126: LD_EXP 63
30130: IFFALSE 30138
30132: PUSH
30133: LD_EXP 107
30137: AND
30138: IFFALSE 30282
30140: GO 30142
30142: DISABLE
30143: LD_INT 0
30145: PPUSH
30146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30147: LD_ADDR_VAR 0 2
30151: PUSH
30152: LD_INT 22
30154: PUSH
30155: LD_OWVAR 2
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 21
30166: PUSH
30167: LD_INT 2
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 2
30176: PUSH
30177: LD_INT 34
30179: PUSH
30180: LD_INT 12
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 34
30189: PUSH
30190: LD_INT 51
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 34
30199: PUSH
30200: LD_INT 32
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: LIST
30217: PPUSH
30218: CALL_OW 69
30222: ST_TO_ADDR
// if not tmp then
30223: LD_VAR 0 2
30227: NOT
30228: IFFALSE 30232
// exit ;
30230: GO 30282
// for i in tmp do
30232: LD_ADDR_VAR 0 1
30236: PUSH
30237: LD_VAR 0 2
30241: PUSH
30242: FOR_IN
30243: IFFALSE 30280
// if GetCargo ( i , mat_artifact ) = 0 then
30245: LD_VAR 0 1
30249: PPUSH
30250: LD_INT 4
30252: PPUSH
30253: CALL_OW 289
30257: PUSH
30258: LD_INT 0
30260: EQUAL
30261: IFFALSE 30278
// SetCargo ( i , mat_siberit , 100 ) ;
30263: LD_VAR 0 1
30267: PPUSH
30268: LD_INT 3
30270: PPUSH
30271: LD_INT 100
30273: PPUSH
30274: CALL_OW 290
30278: GO 30242
30280: POP
30281: POP
// end ;
30282: PPOPN 2
30284: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30285: LD_EXP 63
30289: IFFALSE 30297
30291: PUSH
30292: LD_EXP 108
30296: AND
30297: IFFALSE 30480
30299: GO 30301
30301: DISABLE
30302: LD_INT 0
30304: PPUSH
30305: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30306: LD_ADDR_VAR 0 2
30310: PUSH
30311: LD_INT 22
30313: PUSH
30314: LD_OWVAR 2
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PPUSH
30323: CALL_OW 69
30327: ST_TO_ADDR
// if not tmp then
30328: LD_VAR 0 2
30332: NOT
30333: IFFALSE 30337
// exit ;
30335: GO 30480
// for i := 1 to 2 do
30337: LD_ADDR_VAR 0 1
30341: PUSH
30342: DOUBLE
30343: LD_INT 1
30345: DEC
30346: ST_TO_ADDR
30347: LD_INT 2
30349: PUSH
30350: FOR_TO
30351: IFFALSE 30478
// begin uc_side := your_side ;
30353: LD_ADDR_OWVAR 20
30357: PUSH
30358: LD_OWVAR 2
30362: ST_TO_ADDR
// uc_nation := nation_american ;
30363: LD_ADDR_OWVAR 21
30367: PUSH
30368: LD_INT 1
30370: ST_TO_ADDR
// vc_chassis := us_morphling ;
30371: LD_ADDR_OWVAR 37
30375: PUSH
30376: LD_INT 5
30378: ST_TO_ADDR
// vc_engine := engine_siberite ;
30379: LD_ADDR_OWVAR 39
30383: PUSH
30384: LD_INT 3
30386: ST_TO_ADDR
// vc_control := control_computer ;
30387: LD_ADDR_OWVAR 38
30391: PUSH
30392: LD_INT 3
30394: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30395: LD_ADDR_OWVAR 40
30399: PUSH
30400: LD_INT 10
30402: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30403: LD_VAR 0 2
30407: PUSH
30408: LD_INT 1
30410: ARRAY
30411: PPUSH
30412: CALL_OW 310
30416: NOT
30417: IFFALSE 30464
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30419: CALL_OW 45
30423: PPUSH
30424: LD_VAR 0 2
30428: PUSH
30429: LD_INT 1
30431: ARRAY
30432: PPUSH
30433: CALL_OW 250
30437: PPUSH
30438: LD_VAR 0 2
30442: PUSH
30443: LD_INT 1
30445: ARRAY
30446: PPUSH
30447: CALL_OW 251
30451: PPUSH
30452: LD_INT 12
30454: PPUSH
30455: LD_INT 1
30457: PPUSH
30458: CALL_OW 50
30462: GO 30476
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30464: CALL_OW 45
30468: PPUSH
30469: LD_INT 1
30471: PPUSH
30472: CALL_OW 51
// end ;
30476: GO 30350
30478: POP
30479: POP
// end ;
30480: PPOPN 2
30482: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30483: LD_EXP 63
30487: IFFALSE 30495
30489: PUSH
30490: LD_EXP 109
30494: AND
30495: IFFALSE 30717
30497: GO 30499
30499: DISABLE
30500: LD_INT 0
30502: PPUSH
30503: PPUSH
30504: PPUSH
30505: PPUSH
30506: PPUSH
30507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30508: LD_ADDR_VAR 0 6
30512: PUSH
30513: LD_INT 22
30515: PUSH
30516: LD_OWVAR 2
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 21
30527: PUSH
30528: LD_INT 1
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 3
30537: PUSH
30538: LD_INT 23
30540: PUSH
30541: LD_INT 0
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: LIST
30556: PPUSH
30557: CALL_OW 69
30561: ST_TO_ADDR
// if not tmp then
30562: LD_VAR 0 6
30566: NOT
30567: IFFALSE 30571
// exit ;
30569: GO 30717
// s1 := rand ( 1 , 4 ) ;
30571: LD_ADDR_VAR 0 2
30575: PUSH
30576: LD_INT 1
30578: PPUSH
30579: LD_INT 4
30581: PPUSH
30582: CALL_OW 12
30586: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30587: LD_ADDR_VAR 0 4
30591: PUSH
30592: LD_VAR 0 6
30596: PUSH
30597: LD_INT 1
30599: ARRAY
30600: PPUSH
30601: LD_VAR 0 2
30605: PPUSH
30606: CALL_OW 259
30610: ST_TO_ADDR
// if s1 = 1 then
30611: LD_VAR 0 2
30615: PUSH
30616: LD_INT 1
30618: EQUAL
30619: IFFALSE 30639
// s2 := rand ( 2 , 4 ) else
30621: LD_ADDR_VAR 0 3
30625: PUSH
30626: LD_INT 2
30628: PPUSH
30629: LD_INT 4
30631: PPUSH
30632: CALL_OW 12
30636: ST_TO_ADDR
30637: GO 30647
// s2 := 1 ;
30639: LD_ADDR_VAR 0 3
30643: PUSH
30644: LD_INT 1
30646: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30647: LD_ADDR_VAR 0 5
30651: PUSH
30652: LD_VAR 0 6
30656: PUSH
30657: LD_INT 1
30659: ARRAY
30660: PPUSH
30661: LD_VAR 0 3
30665: PPUSH
30666: CALL_OW 259
30670: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30671: LD_VAR 0 6
30675: PUSH
30676: LD_INT 1
30678: ARRAY
30679: PPUSH
30680: LD_VAR 0 2
30684: PPUSH
30685: LD_VAR 0 5
30689: PPUSH
30690: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30694: LD_VAR 0 6
30698: PUSH
30699: LD_INT 1
30701: ARRAY
30702: PPUSH
30703: LD_VAR 0 3
30707: PPUSH
30708: LD_VAR 0 4
30712: PPUSH
30713: CALL_OW 237
// end ;
30717: PPOPN 6
30719: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30720: LD_EXP 63
30724: IFFALSE 30732
30726: PUSH
30727: LD_EXP 110
30731: AND
30732: IFFALSE 30811
30734: GO 30736
30736: DISABLE
30737: LD_INT 0
30739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30740: LD_ADDR_VAR 0 1
30744: PUSH
30745: LD_INT 22
30747: PUSH
30748: LD_OWVAR 2
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 30
30759: PUSH
30760: LD_INT 3
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PPUSH
30771: CALL_OW 69
30775: ST_TO_ADDR
// if not tmp then
30776: LD_VAR 0 1
30780: NOT
30781: IFFALSE 30785
// exit ;
30783: GO 30811
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30785: LD_VAR 0 1
30789: PUSH
30790: LD_INT 1
30792: PPUSH
30793: LD_VAR 0 1
30797: PPUSH
30798: CALL_OW 12
30802: ARRAY
30803: PPUSH
30804: LD_INT 1
30806: PPUSH
30807: CALL_OW 234
// end ;
30811: PPOPN 1
30813: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30814: LD_EXP 63
30818: IFFALSE 30826
30820: PUSH
30821: LD_EXP 111
30825: AND
30826: IFFALSE 30938
30828: GO 30830
30830: DISABLE
30831: LD_INT 0
30833: PPUSH
30834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30835: LD_ADDR_VAR 0 2
30839: PUSH
30840: LD_INT 22
30842: PUSH
30843: LD_OWVAR 2
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 2
30854: PUSH
30855: LD_INT 30
30857: PUSH
30858: LD_INT 27
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 30
30867: PUSH
30868: LD_INT 26
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 30
30877: PUSH
30878: LD_INT 28
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PPUSH
30895: CALL_OW 69
30899: ST_TO_ADDR
// if not tmp then
30900: LD_VAR 0 2
30904: NOT
30905: IFFALSE 30909
// exit ;
30907: GO 30938
// for i in tmp do
30909: LD_ADDR_VAR 0 1
30913: PUSH
30914: LD_VAR 0 2
30918: PUSH
30919: FOR_IN
30920: IFFALSE 30936
// SetLives ( i , 1 ) ;
30922: LD_VAR 0 1
30926: PPUSH
30927: LD_INT 1
30929: PPUSH
30930: CALL_OW 234
30934: GO 30919
30936: POP
30937: POP
// end ;
30938: PPOPN 2
30940: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30941: LD_EXP 63
30945: IFFALSE 30953
30947: PUSH
30948: LD_EXP 112
30952: AND
30953: IFFALSE 31240
30955: GO 30957
30957: DISABLE
30958: LD_INT 0
30960: PPUSH
30961: PPUSH
30962: PPUSH
// begin i := rand ( 1 , 7 ) ;
30963: LD_ADDR_VAR 0 1
30967: PUSH
30968: LD_INT 1
30970: PPUSH
30971: LD_INT 7
30973: PPUSH
30974: CALL_OW 12
30978: ST_TO_ADDR
// case i of 1 :
30979: LD_VAR 0 1
30983: PUSH
30984: LD_INT 1
30986: DOUBLE
30987: EQUAL
30988: IFTRUE 30992
30990: GO 31002
30992: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30993: LD_STRING earthquake(getX(game), 0, 32)
30995: PPUSH
30996: CALL_OW 559
31000: GO 31240
31002: LD_INT 2
31004: DOUBLE
31005: EQUAL
31006: IFTRUE 31010
31008: GO 31024
31010: POP
// begin ToLua ( displayStucuk(); ) ;
31011: LD_STRING displayStucuk();
31013: PPUSH
31014: CALL_OW 559
// ResetFog ;
31018: CALL_OW 335
// end ; 3 :
31022: GO 31240
31024: LD_INT 3
31026: DOUBLE
31027: EQUAL
31028: IFTRUE 31032
31030: GO 31136
31032: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31033: LD_ADDR_VAR 0 2
31037: PUSH
31038: LD_INT 22
31040: PUSH
31041: LD_OWVAR 2
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 25
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PPUSH
31064: CALL_OW 69
31068: ST_TO_ADDR
// if not tmp then
31069: LD_VAR 0 2
31073: NOT
31074: IFFALSE 31078
// exit ;
31076: GO 31240
// un := tmp [ rand ( 1 , tmp ) ] ;
31078: LD_ADDR_VAR 0 3
31082: PUSH
31083: LD_VAR 0 2
31087: PUSH
31088: LD_INT 1
31090: PPUSH
31091: LD_VAR 0 2
31095: PPUSH
31096: CALL_OW 12
31100: ARRAY
31101: ST_TO_ADDR
// if Crawls ( un ) then
31102: LD_VAR 0 3
31106: PPUSH
31107: CALL_OW 318
31111: IFFALSE 31122
// ComWalk ( un ) ;
31113: LD_VAR 0 3
31117: PPUSH
31118: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31122: LD_VAR 0 3
31126: PPUSH
31127: LD_INT 8
31129: PPUSH
31130: CALL_OW 336
// end ; 4 :
31134: GO 31240
31136: LD_INT 4
31138: DOUBLE
31139: EQUAL
31140: IFTRUE 31144
31142: GO 31218
31144: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31145: LD_ADDR_VAR 0 2
31149: PUSH
31150: LD_INT 22
31152: PUSH
31153: LD_OWVAR 2
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 30
31164: PUSH
31165: LD_INT 29
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PPUSH
31176: CALL_OW 69
31180: ST_TO_ADDR
// if not tmp then
31181: LD_VAR 0 2
31185: NOT
31186: IFFALSE 31190
// exit ;
31188: GO 31240
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31190: LD_VAR 0 2
31194: PUSH
31195: LD_INT 1
31197: ARRAY
31198: PPUSH
31199: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31203: LD_VAR 0 2
31207: PUSH
31208: LD_INT 1
31210: ARRAY
31211: PPUSH
31212: CALL_OW 65
// end ; 5 .. 7 :
31216: GO 31240
31218: LD_INT 5
31220: DOUBLE
31221: GREATEREQUAL
31222: IFFALSE 31230
31224: LD_INT 7
31226: DOUBLE
31227: LESSEQUAL
31228: IFTRUE 31232
31230: GO 31239
31232: POP
// StreamSibBomb ; end ;
31233: CALL 27421 0 0
31237: GO 31240
31239: POP
// end ;
31240: PPOPN 3
31242: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31243: LD_EXP 63
31247: IFFALSE 31255
31249: PUSH
31250: LD_EXP 113
31254: AND
31255: IFFALSE 31411
31257: GO 31259
31259: DISABLE
31260: LD_INT 0
31262: PPUSH
31263: PPUSH
31264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31265: LD_ADDR_VAR 0 2
31269: PUSH
31270: LD_INT 81
31272: PUSH
31273: LD_OWVAR 2
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 2
31284: PUSH
31285: LD_INT 21
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 21
31297: PUSH
31298: LD_INT 2
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: LIST
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PPUSH
31314: CALL_OW 69
31318: ST_TO_ADDR
// if not tmp then
31319: LD_VAR 0 2
31323: NOT
31324: IFFALSE 31328
// exit ;
31326: GO 31411
// p := 0 ;
31328: LD_ADDR_VAR 0 3
31332: PUSH
31333: LD_INT 0
31335: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31336: LD_INT 35
31338: PPUSH
31339: CALL_OW 67
// p := p + 1 ;
31343: LD_ADDR_VAR 0 3
31347: PUSH
31348: LD_VAR 0 3
31352: PUSH
31353: LD_INT 1
31355: PLUS
31356: ST_TO_ADDR
// for i in tmp do
31357: LD_ADDR_VAR 0 1
31361: PUSH
31362: LD_VAR 0 2
31366: PUSH
31367: FOR_IN
31368: IFFALSE 31399
// if GetLives ( i ) < 1000 then
31370: LD_VAR 0 1
31374: PPUSH
31375: CALL_OW 256
31379: PUSH
31380: LD_INT 1000
31382: LESS
31383: IFFALSE 31397
// SetLives ( i , 1000 ) ;
31385: LD_VAR 0 1
31389: PPUSH
31390: LD_INT 1000
31392: PPUSH
31393: CALL_OW 234
31397: GO 31367
31399: POP
31400: POP
// until p > 20 ;
31401: LD_VAR 0 3
31405: PUSH
31406: LD_INT 20
31408: GREATER
31409: IFFALSE 31336
// end ;
31411: PPOPN 3
31413: END
// every 0 0$1 trigger StreamModeActive and sTime do
31414: LD_EXP 63
31418: IFFALSE 31426
31420: PUSH
31421: LD_EXP 114
31425: AND
31426: IFFALSE 31461
31428: GO 31430
31430: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31431: LD_INT 28
31433: PPUSH
31434: LD_OWVAR 2
31438: PPUSH
31439: LD_INT 2
31441: PPUSH
31442: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31446: LD_INT 30
31448: PPUSH
31449: LD_OWVAR 2
31453: PPUSH
31454: LD_INT 2
31456: PPUSH
31457: CALL_OW 322
// end ;
31461: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31462: LD_EXP 63
31466: IFFALSE 31474
31468: PUSH
31469: LD_EXP 115
31473: AND
31474: IFFALSE 31595
31476: GO 31478
31478: DISABLE
31479: LD_INT 0
31481: PPUSH
31482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31483: LD_ADDR_VAR 0 2
31487: PUSH
31488: LD_INT 22
31490: PUSH
31491: LD_OWVAR 2
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 21
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 3
31512: PUSH
31513: LD_INT 23
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: LIST
31531: PPUSH
31532: CALL_OW 69
31536: ST_TO_ADDR
// if not tmp then
31537: LD_VAR 0 2
31541: NOT
31542: IFFALSE 31546
// exit ;
31544: GO 31595
// for i in tmp do
31546: LD_ADDR_VAR 0 1
31550: PUSH
31551: LD_VAR 0 2
31555: PUSH
31556: FOR_IN
31557: IFFALSE 31593
// begin if Crawls ( i ) then
31559: LD_VAR 0 1
31563: PPUSH
31564: CALL_OW 318
31568: IFFALSE 31579
// ComWalk ( i ) ;
31570: LD_VAR 0 1
31574: PPUSH
31575: CALL_OW 138
// SetClass ( i , 2 ) ;
31579: LD_VAR 0 1
31583: PPUSH
31584: LD_INT 2
31586: PPUSH
31587: CALL_OW 336
// end ;
31591: GO 31556
31593: POP
31594: POP
// end ;
31595: PPOPN 2
31597: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31598: LD_EXP 63
31602: IFFALSE 31610
31604: PUSH
31605: LD_EXP 116
31609: AND
31610: IFFALSE 31900
31612: GO 31614
31614: DISABLE
31615: LD_INT 0
31617: PPUSH
31618: PPUSH
31619: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31620: LD_OWVAR 2
31624: PPUSH
31625: LD_INT 9
31627: PPUSH
31628: LD_INT 1
31630: PPUSH
31631: LD_INT 1
31633: PPUSH
31634: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31638: LD_INT 9
31640: PPUSH
31641: LD_OWVAR 2
31645: PPUSH
31646: CALL_OW 343
// uc_side := 9 ;
31650: LD_ADDR_OWVAR 20
31654: PUSH
31655: LD_INT 9
31657: ST_TO_ADDR
// uc_nation := 2 ;
31658: LD_ADDR_OWVAR 21
31662: PUSH
31663: LD_INT 2
31665: ST_TO_ADDR
// hc_name := Dark Warrior ;
31666: LD_ADDR_OWVAR 26
31670: PUSH
31671: LD_STRING Dark Warrior
31673: ST_TO_ADDR
// hc_gallery :=  ;
31674: LD_ADDR_OWVAR 33
31678: PUSH
31679: LD_STRING 
31681: ST_TO_ADDR
// hc_noskilllimit := true ;
31682: LD_ADDR_OWVAR 76
31686: PUSH
31687: LD_INT 1
31689: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31690: LD_ADDR_OWVAR 31
31694: PUSH
31695: LD_INT 30
31697: PUSH
31698: LD_INT 30
31700: PUSH
31701: LD_INT 30
31703: PUSH
31704: LD_INT 30
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: ST_TO_ADDR
// un := CreateHuman ;
31713: LD_ADDR_VAR 0 3
31717: PUSH
31718: CALL_OW 44
31722: ST_TO_ADDR
// hc_noskilllimit := false ;
31723: LD_ADDR_OWVAR 76
31727: PUSH
31728: LD_INT 0
31730: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31731: LD_VAR 0 3
31735: PPUSH
31736: LD_INT 1
31738: PPUSH
31739: CALL_OW 51
// ToLua ( playRanger() ) ;
31743: LD_STRING playRanger()
31745: PPUSH
31746: CALL_OW 559
// p := 0 ;
31750: LD_ADDR_VAR 0 2
31754: PUSH
31755: LD_INT 0
31757: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31758: LD_INT 35
31760: PPUSH
31761: CALL_OW 67
// p := p + 1 ;
31765: LD_ADDR_VAR 0 2
31769: PUSH
31770: LD_VAR 0 2
31774: PUSH
31775: LD_INT 1
31777: PLUS
31778: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31779: LD_VAR 0 3
31783: PPUSH
31784: CALL_OW 256
31788: PUSH
31789: LD_INT 1000
31791: LESS
31792: IFFALSE 31806
// SetLives ( un , 1000 ) ;
31794: LD_VAR 0 3
31798: PPUSH
31799: LD_INT 1000
31801: PPUSH
31802: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31806: LD_VAR 0 3
31810: PPUSH
31811: LD_INT 81
31813: PUSH
31814: LD_OWVAR 2
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 91
31825: PUSH
31826: LD_VAR 0 3
31830: PUSH
31831: LD_INT 30
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: LIST
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PPUSH
31843: CALL_OW 69
31847: PPUSH
31848: LD_VAR 0 3
31852: PPUSH
31853: CALL_OW 74
31857: PPUSH
31858: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31862: LD_VAR 0 2
31866: PUSH
31867: LD_INT 80
31869: GREATER
31870: IFTRUE 31883
31872: PUSH
31873: LD_VAR 0 3
31877: PPUSH
31878: CALL_OW 301
31882: OR
31883: IFFALSE 31758
// if un then
31885: LD_VAR 0 3
31889: IFFALSE 31900
// RemoveUnit ( un ) ;
31891: LD_VAR 0 3
31895: PPUSH
31896: CALL_OW 64
// end ;
31900: PPOPN 3
31902: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31903: LD_EXP 117
31907: IFFALSE 32023
31909: GO 31911
31911: DISABLE
31912: LD_INT 0
31914: PPUSH
31915: PPUSH
31916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31917: LD_ADDR_VAR 0 2
31921: PUSH
31922: LD_INT 81
31924: PUSH
31925: LD_OWVAR 2
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 21
31936: PUSH
31937: LD_INT 1
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PPUSH
31948: CALL_OW 69
31952: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31953: LD_STRING playComputer()
31955: PPUSH
31956: CALL_OW 559
// if not tmp then
31960: LD_VAR 0 2
31964: NOT
31965: IFFALSE 31969
// exit ;
31967: GO 32023
// for i in tmp do
31969: LD_ADDR_VAR 0 1
31973: PUSH
31974: LD_VAR 0 2
31978: PUSH
31979: FOR_IN
31980: IFFALSE 32021
// for j := 1 to 4 do
31982: LD_ADDR_VAR 0 3
31986: PUSH
31987: DOUBLE
31988: LD_INT 1
31990: DEC
31991: ST_TO_ADDR
31992: LD_INT 4
31994: PUSH
31995: FOR_TO
31996: IFFALSE 32017
// SetSkill ( i , j , 10 ) ;
31998: LD_VAR 0 1
32002: PPUSH
32003: LD_VAR 0 3
32007: PPUSH
32008: LD_INT 10
32010: PPUSH
32011: CALL_OW 237
32015: GO 31995
32017: POP
32018: POP
32019: GO 31979
32021: POP
32022: POP
// end ;
32023: PPOPN 3
32025: END
// every 0 0$1 trigger s30 do var i , tmp ;
32026: LD_EXP 118
32030: IFFALSE 32099
32032: GO 32034
32034: DISABLE
32035: LD_INT 0
32037: PPUSH
32038: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32039: LD_ADDR_VAR 0 2
32043: PUSH
32044: LD_INT 22
32046: PUSH
32047: LD_OWVAR 2
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PPUSH
32056: CALL_OW 69
32060: ST_TO_ADDR
// if not tmp then
32061: LD_VAR 0 2
32065: NOT
32066: IFFALSE 32070
// exit ;
32068: GO 32099
// for i in tmp do
32070: LD_ADDR_VAR 0 1
32074: PUSH
32075: LD_VAR 0 2
32079: PUSH
32080: FOR_IN
32081: IFFALSE 32097
// SetLives ( i , 300 ) ;
32083: LD_VAR 0 1
32087: PPUSH
32088: LD_INT 300
32090: PPUSH
32091: CALL_OW 234
32095: GO 32080
32097: POP
32098: POP
// end ;
32099: PPOPN 2
32101: END
// every 0 0$1 trigger s60 do var i , tmp ;
32102: LD_EXP 119
32106: IFFALSE 32175
32108: GO 32110
32110: DISABLE
32111: LD_INT 0
32113: PPUSH
32114: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32115: LD_ADDR_VAR 0 2
32119: PUSH
32120: LD_INT 22
32122: PUSH
32123: LD_OWVAR 2
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PPUSH
32132: CALL_OW 69
32136: ST_TO_ADDR
// if not tmp then
32137: LD_VAR 0 2
32141: NOT
32142: IFFALSE 32146
// exit ;
32144: GO 32175
// for i in tmp do
32146: LD_ADDR_VAR 0 1
32150: PUSH
32151: LD_VAR 0 2
32155: PUSH
32156: FOR_IN
32157: IFFALSE 32173
// SetLives ( i , 600 ) ;
32159: LD_VAR 0 1
32163: PPUSH
32164: LD_INT 600
32166: PPUSH
32167: CALL_OW 234
32171: GO 32156
32173: POP
32174: POP
// end ;
32175: PPOPN 2
32177: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32178: LD_INT 0
32180: PPUSH
// case cmd of 301 :
32181: LD_VAR 0 1
32185: PUSH
32186: LD_INT 301
32188: DOUBLE
32189: EQUAL
32190: IFTRUE 32194
32192: GO 32226
32194: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32195: LD_VAR 0 6
32199: PPUSH
32200: LD_VAR 0 7
32204: PPUSH
32205: LD_VAR 0 8
32209: PPUSH
32210: LD_VAR 0 4
32214: PPUSH
32215: LD_VAR 0 5
32219: PPUSH
32220: CALL 33439 0 5
32224: GO 32347
32226: LD_INT 302
32228: DOUBLE
32229: EQUAL
32230: IFTRUE 32234
32232: GO 32271
32234: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32235: LD_VAR 0 6
32239: PPUSH
32240: LD_VAR 0 7
32244: PPUSH
32245: LD_VAR 0 8
32249: PPUSH
32250: LD_VAR 0 9
32254: PPUSH
32255: LD_VAR 0 4
32259: PPUSH
32260: LD_VAR 0 5
32264: PPUSH
32265: CALL 33530 0 6
32269: GO 32347
32271: LD_INT 303
32273: DOUBLE
32274: EQUAL
32275: IFTRUE 32279
32277: GO 32316
32279: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32280: LD_VAR 0 6
32284: PPUSH
32285: LD_VAR 0 7
32289: PPUSH
32290: LD_VAR 0 8
32294: PPUSH
32295: LD_VAR 0 9
32299: PPUSH
32300: LD_VAR 0 4
32304: PPUSH
32305: LD_VAR 0 5
32309: PPUSH
32310: CALL 32352 0 6
32314: GO 32347
32316: LD_INT 304
32318: DOUBLE
32319: EQUAL
32320: IFTRUE 32324
32322: GO 32346
32324: POP
// hHackTeleport ( unit , x , y ) ; end ;
32325: LD_VAR 0 2
32329: PPUSH
32330: LD_VAR 0 4
32334: PPUSH
32335: LD_VAR 0 5
32339: PPUSH
32340: CALL 34123 0 3
32344: GO 32347
32346: POP
// end ;
32347: LD_VAR 0 12
32351: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32352: LD_INT 0
32354: PPUSH
32355: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32356: LD_VAR 0 1
32360: PUSH
32361: LD_INT 1
32363: LESS
32364: IFTRUE 32376
32366: PUSH
32367: LD_VAR 0 1
32371: PUSH
32372: LD_INT 3
32374: GREATER
32375: OR
32376: IFTRUE 32394
32378: PUSH
32379: LD_VAR 0 5
32383: PPUSH
32384: LD_VAR 0 6
32388: PPUSH
32389: CALL_OW 428
32393: OR
32394: IFFALSE 32398
// exit ;
32396: GO 33126
// uc_side := your_side ;
32398: LD_ADDR_OWVAR 20
32402: PUSH
32403: LD_OWVAR 2
32407: ST_TO_ADDR
// uc_nation := nation ;
32408: LD_ADDR_OWVAR 21
32412: PUSH
32413: LD_VAR 0 1
32417: ST_TO_ADDR
// bc_level = 1 ;
32418: LD_ADDR_OWVAR 43
32422: PUSH
32423: LD_INT 1
32425: ST_TO_ADDR
// case btype of 1 :
32426: LD_VAR 0 2
32430: PUSH
32431: LD_INT 1
32433: DOUBLE
32434: EQUAL
32435: IFTRUE 32439
32437: GO 32450
32439: POP
// bc_type := b_depot ; 2 :
32440: LD_ADDR_OWVAR 42
32444: PUSH
32445: LD_INT 0
32447: ST_TO_ADDR
32448: GO 33070
32450: LD_INT 2
32452: DOUBLE
32453: EQUAL
32454: IFTRUE 32458
32456: GO 32469
32458: POP
// bc_type := b_warehouse ; 3 :
32459: LD_ADDR_OWVAR 42
32463: PUSH
32464: LD_INT 1
32466: ST_TO_ADDR
32467: GO 33070
32469: LD_INT 3
32471: DOUBLE
32472: EQUAL
32473: IFTRUE 32477
32475: GO 32488
32477: POP
// bc_type := b_lab ; 4 .. 9 :
32478: LD_ADDR_OWVAR 42
32482: PUSH
32483: LD_INT 6
32485: ST_TO_ADDR
32486: GO 33070
32488: LD_INT 4
32490: DOUBLE
32491: GREATEREQUAL
32492: IFFALSE 32500
32494: LD_INT 9
32496: DOUBLE
32497: LESSEQUAL
32498: IFTRUE 32502
32500: GO 32562
32502: POP
// begin bc_type := b_lab_half ;
32503: LD_ADDR_OWVAR 42
32507: PUSH
32508: LD_INT 7
32510: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32511: LD_ADDR_OWVAR 44
32515: PUSH
32516: LD_INT 10
32518: PUSH
32519: LD_INT 11
32521: PUSH
32522: LD_INT 12
32524: PUSH
32525: LD_INT 15
32527: PUSH
32528: LD_INT 14
32530: PUSH
32531: LD_INT 13
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: PUSH
32542: LD_VAR 0 2
32546: PUSH
32547: LD_INT 3
32549: MINUS
32550: ARRAY
32551: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32552: LD_ADDR_OWVAR 45
32556: PUSH
32557: LD_INT 9
32559: ST_TO_ADDR
// end ; 10 .. 13 :
32560: GO 33070
32562: LD_INT 10
32564: DOUBLE
32565: GREATEREQUAL
32566: IFFALSE 32574
32568: LD_INT 13
32570: DOUBLE
32571: LESSEQUAL
32572: IFTRUE 32576
32574: GO 32653
32576: POP
// begin bc_type := b_lab_full ;
32577: LD_ADDR_OWVAR 42
32581: PUSH
32582: LD_INT 8
32584: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32585: LD_ADDR_OWVAR 44
32589: PUSH
32590: LD_INT 10
32592: PUSH
32593: LD_INT 12
32595: PUSH
32596: LD_INT 14
32598: PUSH
32599: LD_INT 13
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: PUSH
32608: LD_VAR 0 2
32612: PUSH
32613: LD_INT 9
32615: MINUS
32616: ARRAY
32617: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32618: LD_ADDR_OWVAR 45
32622: PUSH
32623: LD_INT 11
32625: PUSH
32626: LD_INT 15
32628: PUSH
32629: LD_INT 12
32631: PUSH
32632: LD_INT 15
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: PUSH
32641: LD_VAR 0 2
32645: PUSH
32646: LD_INT 9
32648: MINUS
32649: ARRAY
32650: ST_TO_ADDR
// end ; 14 :
32651: GO 33070
32653: LD_INT 14
32655: DOUBLE
32656: EQUAL
32657: IFTRUE 32661
32659: GO 32672
32661: POP
// bc_type := b_workshop ; 15 :
32662: LD_ADDR_OWVAR 42
32666: PUSH
32667: LD_INT 2
32669: ST_TO_ADDR
32670: GO 33070
32672: LD_INT 15
32674: DOUBLE
32675: EQUAL
32676: IFTRUE 32680
32678: GO 32691
32680: POP
// bc_type := b_factory ; 16 :
32681: LD_ADDR_OWVAR 42
32685: PUSH
32686: LD_INT 3
32688: ST_TO_ADDR
32689: GO 33070
32691: LD_INT 16
32693: DOUBLE
32694: EQUAL
32695: IFTRUE 32699
32697: GO 32710
32699: POP
// bc_type := b_ext_gun ; 17 :
32700: LD_ADDR_OWVAR 42
32704: PUSH
32705: LD_INT 17
32707: ST_TO_ADDR
32708: GO 33070
32710: LD_INT 17
32712: DOUBLE
32713: EQUAL
32714: IFTRUE 32718
32716: GO 32746
32718: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32719: LD_ADDR_OWVAR 42
32723: PUSH
32724: LD_INT 19
32726: PUSH
32727: LD_INT 23
32729: PUSH
32730: LD_INT 19
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: LIST
32737: PUSH
32738: LD_VAR 0 1
32742: ARRAY
32743: ST_TO_ADDR
32744: GO 33070
32746: LD_INT 18
32748: DOUBLE
32749: EQUAL
32750: IFTRUE 32754
32752: GO 32765
32754: POP
// bc_type := b_ext_radar ; 19 :
32755: LD_ADDR_OWVAR 42
32759: PUSH
32760: LD_INT 20
32762: ST_TO_ADDR
32763: GO 33070
32765: LD_INT 19
32767: DOUBLE
32768: EQUAL
32769: IFTRUE 32773
32771: GO 32784
32773: POP
// bc_type := b_ext_radio ; 20 :
32774: LD_ADDR_OWVAR 42
32778: PUSH
32779: LD_INT 22
32781: ST_TO_ADDR
32782: GO 33070
32784: LD_INT 20
32786: DOUBLE
32787: EQUAL
32788: IFTRUE 32792
32790: GO 32803
32792: POP
// bc_type := b_ext_siberium ; 21 :
32793: LD_ADDR_OWVAR 42
32797: PUSH
32798: LD_INT 21
32800: ST_TO_ADDR
32801: GO 33070
32803: LD_INT 21
32805: DOUBLE
32806: EQUAL
32807: IFTRUE 32811
32809: GO 32822
32811: POP
// bc_type := b_ext_computer ; 22 :
32812: LD_ADDR_OWVAR 42
32816: PUSH
32817: LD_INT 24
32819: ST_TO_ADDR
32820: GO 33070
32822: LD_INT 22
32824: DOUBLE
32825: EQUAL
32826: IFTRUE 32830
32828: GO 32841
32830: POP
// bc_type := b_ext_track ; 23 :
32831: LD_ADDR_OWVAR 42
32835: PUSH
32836: LD_INT 16
32838: ST_TO_ADDR
32839: GO 33070
32841: LD_INT 23
32843: DOUBLE
32844: EQUAL
32845: IFTRUE 32849
32847: GO 32860
32849: POP
// bc_type := b_ext_laser ; 24 :
32850: LD_ADDR_OWVAR 42
32854: PUSH
32855: LD_INT 25
32857: ST_TO_ADDR
32858: GO 33070
32860: LD_INT 24
32862: DOUBLE
32863: EQUAL
32864: IFTRUE 32868
32866: GO 32879
32868: POP
// bc_type := b_control_tower ; 25 :
32869: LD_ADDR_OWVAR 42
32873: PUSH
32874: LD_INT 36
32876: ST_TO_ADDR
32877: GO 33070
32879: LD_INT 25
32881: DOUBLE
32882: EQUAL
32883: IFTRUE 32887
32885: GO 32898
32887: POP
// bc_type := b_breastwork ; 26 :
32888: LD_ADDR_OWVAR 42
32892: PUSH
32893: LD_INT 31
32895: ST_TO_ADDR
32896: GO 33070
32898: LD_INT 26
32900: DOUBLE
32901: EQUAL
32902: IFTRUE 32906
32904: GO 32917
32906: POP
// bc_type := b_bunker ; 27 :
32907: LD_ADDR_OWVAR 42
32911: PUSH
32912: LD_INT 32
32914: ST_TO_ADDR
32915: GO 33070
32917: LD_INT 27
32919: DOUBLE
32920: EQUAL
32921: IFTRUE 32925
32923: GO 32936
32925: POP
// bc_type := b_turret ; 28 :
32926: LD_ADDR_OWVAR 42
32930: PUSH
32931: LD_INT 33
32933: ST_TO_ADDR
32934: GO 33070
32936: LD_INT 28
32938: DOUBLE
32939: EQUAL
32940: IFTRUE 32944
32942: GO 32955
32944: POP
// bc_type := b_armoury ; 29 :
32945: LD_ADDR_OWVAR 42
32949: PUSH
32950: LD_INT 4
32952: ST_TO_ADDR
32953: GO 33070
32955: LD_INT 29
32957: DOUBLE
32958: EQUAL
32959: IFTRUE 32963
32961: GO 32974
32963: POP
// bc_type := b_barracks ; 30 :
32964: LD_ADDR_OWVAR 42
32968: PUSH
32969: LD_INT 5
32971: ST_TO_ADDR
32972: GO 33070
32974: LD_INT 30
32976: DOUBLE
32977: EQUAL
32978: IFTRUE 32982
32980: GO 32993
32982: POP
// bc_type := b_solar_power ; 31 :
32983: LD_ADDR_OWVAR 42
32987: PUSH
32988: LD_INT 27
32990: ST_TO_ADDR
32991: GO 33070
32993: LD_INT 31
32995: DOUBLE
32996: EQUAL
32997: IFTRUE 33001
32999: GO 33012
33001: POP
// bc_type := b_oil_power ; 32 :
33002: LD_ADDR_OWVAR 42
33006: PUSH
33007: LD_INT 26
33009: ST_TO_ADDR
33010: GO 33070
33012: LD_INT 32
33014: DOUBLE
33015: EQUAL
33016: IFTRUE 33020
33018: GO 33031
33020: POP
// bc_type := b_siberite_power ; 33 :
33021: LD_ADDR_OWVAR 42
33025: PUSH
33026: LD_INT 28
33028: ST_TO_ADDR
33029: GO 33070
33031: LD_INT 33
33033: DOUBLE
33034: EQUAL
33035: IFTRUE 33039
33037: GO 33050
33039: POP
// bc_type := b_oil_mine ; 34 :
33040: LD_ADDR_OWVAR 42
33044: PUSH
33045: LD_INT 29
33047: ST_TO_ADDR
33048: GO 33070
33050: LD_INT 34
33052: DOUBLE
33053: EQUAL
33054: IFTRUE 33058
33056: GO 33069
33058: POP
// bc_type := b_siberite_mine ; end ;
33059: LD_ADDR_OWVAR 42
33063: PUSH
33064: LD_INT 30
33066: ST_TO_ADDR
33067: GO 33070
33069: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33070: LD_ADDR_VAR 0 8
33074: PUSH
33075: LD_VAR 0 5
33079: PPUSH
33080: LD_VAR 0 6
33084: PPUSH
33085: LD_VAR 0 3
33089: PPUSH
33090: CALL_OW 47
33094: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33095: LD_OWVAR 42
33099: PUSH
33100: LD_INT 32
33102: PUSH
33103: LD_INT 33
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: IN
33110: IFFALSE 33126
// PlaceWeaponTurret ( b , weapon ) ;
33112: LD_VAR 0 8
33116: PPUSH
33117: LD_VAR 0 4
33121: PPUSH
33122: CALL_OW 431
// end ;
33126: LD_VAR 0 7
33130: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33131: LD_INT 0
33133: PPUSH
33134: PPUSH
33135: PPUSH
33136: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33137: LD_ADDR_VAR 0 4
33141: PUSH
33142: LD_INT 22
33144: PUSH
33145: LD_OWVAR 2
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 2
33156: PUSH
33157: LD_INT 30
33159: PUSH
33160: LD_INT 0
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 30
33169: PUSH
33170: LD_INT 1
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: LIST
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PPUSH
33186: CALL_OW 69
33190: ST_TO_ADDR
// if not tmp then
33191: LD_VAR 0 4
33195: NOT
33196: IFFALSE 33200
// exit ;
33198: GO 33259
// for i in tmp do
33200: LD_ADDR_VAR 0 2
33204: PUSH
33205: LD_VAR 0 4
33209: PUSH
33210: FOR_IN
33211: IFFALSE 33257
// for j = 1 to 3 do
33213: LD_ADDR_VAR 0 3
33217: PUSH
33218: DOUBLE
33219: LD_INT 1
33221: DEC
33222: ST_TO_ADDR
33223: LD_INT 3
33225: PUSH
33226: FOR_TO
33227: IFFALSE 33253
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33229: LD_VAR 0 2
33233: PPUSH
33234: CALL_OW 274
33238: PPUSH
33239: LD_VAR 0 3
33243: PPUSH
33244: LD_INT 99999
33246: PPUSH
33247: CALL_OW 277
33251: GO 33226
33253: POP
33254: POP
33255: GO 33210
33257: POP
33258: POP
// end ;
33259: LD_VAR 0 1
33263: RET
// export function hHackSetLevel10 ; var i , j ; begin
33264: LD_INT 0
33266: PPUSH
33267: PPUSH
33268: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33269: LD_ADDR_VAR 0 2
33273: PUSH
33274: LD_INT 21
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PPUSH
33284: CALL_OW 69
33288: PUSH
33289: FOR_IN
33290: IFFALSE 33342
// if IsSelected ( i ) then
33292: LD_VAR 0 2
33296: PPUSH
33297: CALL_OW 306
33301: IFFALSE 33340
// begin for j := 1 to 4 do
33303: LD_ADDR_VAR 0 3
33307: PUSH
33308: DOUBLE
33309: LD_INT 1
33311: DEC
33312: ST_TO_ADDR
33313: LD_INT 4
33315: PUSH
33316: FOR_TO
33317: IFFALSE 33338
// SetSkill ( i , j , 10 ) ;
33319: LD_VAR 0 2
33323: PPUSH
33324: LD_VAR 0 3
33328: PPUSH
33329: LD_INT 10
33331: PPUSH
33332: CALL_OW 237
33336: GO 33316
33338: POP
33339: POP
// end ;
33340: GO 33289
33342: POP
33343: POP
// end ;
33344: LD_VAR 0 1
33348: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33349: LD_INT 0
33351: PPUSH
33352: PPUSH
33353: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33354: LD_ADDR_VAR 0 2
33358: PUSH
33359: LD_INT 22
33361: PUSH
33362: LD_OWVAR 2
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 21
33373: PUSH
33374: LD_INT 1
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PPUSH
33385: CALL_OW 69
33389: PUSH
33390: FOR_IN
33391: IFFALSE 33432
// begin for j := 1 to 4 do
33393: LD_ADDR_VAR 0 3
33397: PUSH
33398: DOUBLE
33399: LD_INT 1
33401: DEC
33402: ST_TO_ADDR
33403: LD_INT 4
33405: PUSH
33406: FOR_TO
33407: IFFALSE 33428
// SetSkill ( i , j , 10 ) ;
33409: LD_VAR 0 2
33413: PPUSH
33414: LD_VAR 0 3
33418: PPUSH
33419: LD_INT 10
33421: PPUSH
33422: CALL_OW 237
33426: GO 33406
33428: POP
33429: POP
// end ;
33430: GO 33390
33432: POP
33433: POP
// end ;
33434: LD_VAR 0 1
33438: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33439: LD_INT 0
33441: PPUSH
// uc_side := your_side ;
33442: LD_ADDR_OWVAR 20
33446: PUSH
33447: LD_OWVAR 2
33451: ST_TO_ADDR
// uc_nation := nation ;
33452: LD_ADDR_OWVAR 21
33456: PUSH
33457: LD_VAR 0 1
33461: ST_TO_ADDR
// InitHc ;
33462: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33466: LD_INT 0
33468: PPUSH
33469: LD_VAR 0 2
33473: PPUSH
33474: LD_VAR 0 3
33478: PPUSH
33479: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33483: LD_VAR 0 4
33487: PPUSH
33488: LD_VAR 0 5
33492: PPUSH
33493: CALL_OW 428
33497: PUSH
33498: LD_INT 0
33500: EQUAL
33501: IFFALSE 33525
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33503: CALL_OW 44
33507: PPUSH
33508: LD_VAR 0 4
33512: PPUSH
33513: LD_VAR 0 5
33517: PPUSH
33518: LD_INT 1
33520: PPUSH
33521: CALL_OW 48
// end ;
33525: LD_VAR 0 6
33529: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33530: LD_INT 0
33532: PPUSH
33533: PPUSH
// uc_side := your_side ;
33534: LD_ADDR_OWVAR 20
33538: PUSH
33539: LD_OWVAR 2
33543: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33544: LD_VAR 0 1
33548: PUSH
33549: LD_INT 1
33551: PUSH
33552: LD_INT 2
33554: PUSH
33555: LD_INT 3
33557: PUSH
33558: LD_INT 4
33560: PUSH
33561: LD_INT 5
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: IN
33571: IFFALSE 33583
// uc_nation := nation_american else
33573: LD_ADDR_OWVAR 21
33577: PUSH
33578: LD_INT 1
33580: ST_TO_ADDR
33581: GO 33626
// if chassis in [ 11 , 12 , 13 , 14 ] then
33583: LD_VAR 0 1
33587: PUSH
33588: LD_INT 11
33590: PUSH
33591: LD_INT 12
33593: PUSH
33594: LD_INT 13
33596: PUSH
33597: LD_INT 14
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: IN
33606: IFFALSE 33618
// uc_nation := nation_arabian else
33608: LD_ADDR_OWVAR 21
33612: PUSH
33613: LD_INT 2
33615: ST_TO_ADDR
33616: GO 33626
// uc_nation := nation_russian ;
33618: LD_ADDR_OWVAR 21
33622: PUSH
33623: LD_INT 3
33625: ST_TO_ADDR
// vc_chassis := chassis ;
33626: LD_ADDR_OWVAR 37
33630: PUSH
33631: LD_VAR 0 1
33635: ST_TO_ADDR
// vc_engine := engine ;
33636: LD_ADDR_OWVAR 39
33640: PUSH
33641: LD_VAR 0 2
33645: ST_TO_ADDR
// vc_control := control ;
33646: LD_ADDR_OWVAR 38
33650: PUSH
33651: LD_VAR 0 3
33655: ST_TO_ADDR
// vc_weapon := weapon ;
33656: LD_ADDR_OWVAR 40
33660: PUSH
33661: LD_VAR 0 4
33665: ST_TO_ADDR
// un := CreateVehicle ;
33666: LD_ADDR_VAR 0 8
33670: PUSH
33671: CALL_OW 45
33675: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33676: LD_VAR 0 8
33680: PPUSH
33681: LD_INT 0
33683: PPUSH
33684: LD_INT 5
33686: PPUSH
33687: CALL_OW 12
33691: PPUSH
33692: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33696: LD_VAR 0 8
33700: PPUSH
33701: LD_VAR 0 5
33705: PPUSH
33706: LD_VAR 0 6
33710: PPUSH
33711: LD_INT 1
33713: PPUSH
33714: CALL_OW 48
// end ;
33718: LD_VAR 0 7
33722: RET
// export hInvincible ; every 1 do
33723: GO 33725
33725: DISABLE
// hInvincible := [ ] ;
33726: LD_ADDR_EXP 120
33730: PUSH
33731: EMPTY
33732: ST_TO_ADDR
33733: END
// every 10 do var i ;
33734: GO 33736
33736: DISABLE
33737: LD_INT 0
33739: PPUSH
// begin enable ;
33740: ENABLE
// if not hInvincible then
33741: LD_EXP 120
33745: NOT
33746: IFFALSE 33750
// exit ;
33748: GO 33794
// for i in hInvincible do
33750: LD_ADDR_VAR 0 1
33754: PUSH
33755: LD_EXP 120
33759: PUSH
33760: FOR_IN
33761: IFFALSE 33792
// if GetLives ( i ) < 1000 then
33763: LD_VAR 0 1
33767: PPUSH
33768: CALL_OW 256
33772: PUSH
33773: LD_INT 1000
33775: LESS
33776: IFFALSE 33790
// SetLives ( i , 1000 ) ;
33778: LD_VAR 0 1
33782: PPUSH
33783: LD_INT 1000
33785: PPUSH
33786: CALL_OW 234
33790: GO 33760
33792: POP
33793: POP
// end ;
33794: PPOPN 1
33796: END
// export function hHackInvincible ; var i ; begin
33797: LD_INT 0
33799: PPUSH
33800: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33801: LD_ADDR_VAR 0 2
33805: PUSH
33806: LD_INT 2
33808: PUSH
33809: LD_INT 21
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 21
33821: PUSH
33822: LD_INT 2
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: LIST
33833: PPUSH
33834: CALL_OW 69
33838: PUSH
33839: FOR_IN
33840: IFFALSE 33901
// if IsSelected ( i ) then
33842: LD_VAR 0 2
33846: PPUSH
33847: CALL_OW 306
33851: IFFALSE 33899
// begin if i in hInvincible then
33853: LD_VAR 0 2
33857: PUSH
33858: LD_EXP 120
33862: IN
33863: IFFALSE 33883
// hInvincible := hInvincible diff i else
33865: LD_ADDR_EXP 120
33869: PUSH
33870: LD_EXP 120
33874: PUSH
33875: LD_VAR 0 2
33879: DIFF
33880: ST_TO_ADDR
33881: GO 33899
// hInvincible := hInvincible union i ;
33883: LD_ADDR_EXP 120
33887: PUSH
33888: LD_EXP 120
33892: PUSH
33893: LD_VAR 0 2
33897: UNION
33898: ST_TO_ADDR
// end ;
33899: GO 33839
33901: POP
33902: POP
// end ;
33903: LD_VAR 0 1
33907: RET
// export function hHackInvisible ; var i , j ; begin
33908: LD_INT 0
33910: PPUSH
33911: PPUSH
33912: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33913: LD_ADDR_VAR 0 2
33917: PUSH
33918: LD_INT 21
33920: PUSH
33921: LD_INT 1
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PPUSH
33928: CALL_OW 69
33932: PUSH
33933: FOR_IN
33934: IFFALSE 33958
// if IsSelected ( i ) then
33936: LD_VAR 0 2
33940: PPUSH
33941: CALL_OW 306
33945: IFFALSE 33956
// ComForceInvisible ( i ) ;
33947: LD_VAR 0 2
33951: PPUSH
33952: CALL_OW 496
33956: GO 33933
33958: POP
33959: POP
// end ;
33960: LD_VAR 0 1
33964: RET
// export function hHackChangeYourSide ; begin
33965: LD_INT 0
33967: PPUSH
// if your_side = 8 then
33968: LD_OWVAR 2
33972: PUSH
33973: LD_INT 8
33975: EQUAL
33976: IFFALSE 33988
// your_side := 0 else
33978: LD_ADDR_OWVAR 2
33982: PUSH
33983: LD_INT 0
33985: ST_TO_ADDR
33986: GO 34002
// your_side := your_side + 1 ;
33988: LD_ADDR_OWVAR 2
33992: PUSH
33993: LD_OWVAR 2
33997: PUSH
33998: LD_INT 1
34000: PLUS
34001: ST_TO_ADDR
// end ;
34002: LD_VAR 0 1
34006: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34007: LD_INT 0
34009: PPUSH
34010: PPUSH
34011: PPUSH
// for i in all_units do
34012: LD_ADDR_VAR 0 2
34016: PUSH
34017: LD_OWVAR 3
34021: PUSH
34022: FOR_IN
34023: IFFALSE 34101
// if IsSelected ( i ) then
34025: LD_VAR 0 2
34029: PPUSH
34030: CALL_OW 306
34034: IFFALSE 34099
// begin j := GetSide ( i ) ;
34036: LD_ADDR_VAR 0 3
34040: PUSH
34041: LD_VAR 0 2
34045: PPUSH
34046: CALL_OW 255
34050: ST_TO_ADDR
// if j = 8 then
34051: LD_VAR 0 3
34055: PUSH
34056: LD_INT 8
34058: EQUAL
34059: IFFALSE 34071
// j := 0 else
34061: LD_ADDR_VAR 0 3
34065: PUSH
34066: LD_INT 0
34068: ST_TO_ADDR
34069: GO 34085
// j := j + 1 ;
34071: LD_ADDR_VAR 0 3
34075: PUSH
34076: LD_VAR 0 3
34080: PUSH
34081: LD_INT 1
34083: PLUS
34084: ST_TO_ADDR
// SetSide ( i , j ) ;
34085: LD_VAR 0 2
34089: PPUSH
34090: LD_VAR 0 3
34094: PPUSH
34095: CALL_OW 235
// end ;
34099: GO 34022
34101: POP
34102: POP
// end ;
34103: LD_VAR 0 1
34107: RET
// export function hHackFog ; begin
34108: LD_INT 0
34110: PPUSH
// FogOff ( true ) ;
34111: LD_INT 1
34113: PPUSH
34114: CALL_OW 344
// end ;
34118: LD_VAR 0 1
34122: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34123: LD_INT 0
34125: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34126: LD_VAR 0 1
34130: PPUSH
34131: LD_VAR 0 2
34135: PPUSH
34136: LD_VAR 0 3
34140: PPUSH
34141: LD_INT 1
34143: PPUSH
34144: LD_INT 1
34146: PPUSH
34147: CALL_OW 483
// CenterOnXY ( x , y ) ;
34151: LD_VAR 0 2
34155: PPUSH
34156: LD_VAR 0 3
34160: PPUSH
34161: CALL_OW 84
// end ;
34165: LD_VAR 0 4
34169: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34170: LD_INT 0
34172: PPUSH
34173: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34174: LD_VAR 0 1
34178: NOT
34179: IFTRUE 34198
34181: PUSH
34182: LD_VAR 0 2
34186: PPUSH
34187: LD_VAR 0 3
34191: PPUSH
34192: CALL_OW 488
34196: NOT
34197: OR
34198: IFTRUE 34233
34200: PUSH
34201: LD_VAR 0 1
34205: PPUSH
34206: CALL_OW 266
34210: PUSH
34211: LD_INT 3
34213: NONEQUAL
34214: IFFALSE 34232
34216: PUSH
34217: LD_VAR 0 1
34221: PPUSH
34222: CALL_OW 247
34226: PUSH
34227: LD_INT 1
34229: EQUAL
34230: NOT
34231: AND
34232: OR
34233: IFFALSE 34237
// exit ;
34235: GO 34519
// if GetType ( factory ) = unit_human then
34237: LD_VAR 0 1
34241: PPUSH
34242: CALL_OW 247
34246: PUSH
34247: LD_INT 1
34249: EQUAL
34250: IFFALSE 34267
// factory := IsInUnit ( factory ) ;
34252: LD_ADDR_VAR 0 1
34256: PUSH
34257: LD_VAR 0 1
34261: PPUSH
34262: CALL_OW 310
34266: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34267: LD_VAR 0 1
34271: PPUSH
34272: CALL_OW 266
34276: PUSH
34277: LD_INT 3
34279: NONEQUAL
34280: IFFALSE 34284
// exit ;
34282: GO 34519
// for i := 1 to Count ( factoryWaypoints ) do
34284: LD_ADDR_VAR 0 5
34288: PUSH
34289: DOUBLE
34290: LD_INT 1
34292: DEC
34293: ST_TO_ADDR
34294: LD_EXP 121
34298: PPUSH
34299: CALL 43251 0 1
34303: PUSH
34304: FOR_TO
34305: IFFALSE 34467
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34307: LD_VAR 0 2
34311: PPUSH
34312: LD_VAR 0 3
34316: PPUSH
34317: CALL_OW 428
34321: PUSH
34322: LD_EXP 121
34326: PUSH
34327: LD_VAR 0 5
34331: ARRAY
34332: PUSH
34333: LD_INT 2
34335: ARRAY
34336: EQUAL
34337: IFFALSE 34369
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34339: LD_ADDR_EXP 121
34343: PUSH
34344: LD_EXP 121
34348: PPUSH
34349: LD_VAR 0 5
34353: PPUSH
34354: CALL_OW 3
34358: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34359: CALL 34524 0 0
// exit ;
34363: POP
34364: POP
34365: GO 34519
// end else
34367: GO 34465
// if factory = factoryWaypoints [ i ] [ 2 ] then
34369: LD_VAR 0 1
34373: PUSH
34374: LD_EXP 121
34378: PUSH
34379: LD_VAR 0 5
34383: ARRAY
34384: PUSH
34385: LD_INT 2
34387: ARRAY
34388: EQUAL
34389: IFFALSE 34465
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34391: LD_ADDR_EXP 121
34395: PUSH
34396: LD_EXP 121
34400: PPUSH
34401: LD_VAR 0 5
34405: PPUSH
34406: CALL_OW 3
34410: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34411: LD_ADDR_EXP 121
34415: PUSH
34416: LD_EXP 121
34420: PPUSH
34421: LD_VAR 0 1
34425: PPUSH
34426: CALL_OW 255
34430: PUSH
34431: LD_VAR 0 1
34435: PUSH
34436: LD_VAR 0 2
34440: PUSH
34441: LD_VAR 0 3
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: PPUSH
34452: CALL 79183 0 2
34456: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34457: CALL 34524 0 0
// exit ;
34461: POP
34462: POP
34463: GO 34519
// end ; end ;
34465: GO 34304
34467: POP
34468: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34469: LD_ADDR_EXP 121
34473: PUSH
34474: LD_EXP 121
34478: PPUSH
34479: LD_VAR 0 1
34483: PPUSH
34484: CALL_OW 255
34488: PUSH
34489: LD_VAR 0 1
34493: PUSH
34494: LD_VAR 0 2
34498: PUSH
34499: LD_VAR 0 3
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: PPUSH
34510: CALL 79183 0 2
34514: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34515: CALL 34524 0 0
// end ;
34519: LD_VAR 0 4
34523: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34524: LD_INT 0
34526: PPUSH
34527: PPUSH
34528: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34529: LD_STRING resetFactoryWaypoint();
34531: PPUSH
34532: CALL_OW 559
// if factoryWaypoints then
34536: LD_EXP 121
34540: IFFALSE 34661
// begin list := factoryWaypoints ;
34542: LD_ADDR_VAR 0 3
34546: PUSH
34547: LD_EXP 121
34551: ST_TO_ADDR
// for i := 1 to list do
34552: LD_ADDR_VAR 0 2
34556: PUSH
34557: DOUBLE
34558: LD_INT 1
34560: DEC
34561: ST_TO_ADDR
34562: LD_VAR 0 3
34566: PUSH
34567: FOR_TO
34568: IFFALSE 34659
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34570: LD_STRING setFactoryWaypointXY(
34572: PUSH
34573: LD_VAR 0 3
34577: PUSH
34578: LD_VAR 0 2
34582: ARRAY
34583: PUSH
34584: LD_INT 1
34586: ARRAY
34587: STR
34588: PUSH
34589: LD_STRING ,
34591: STR
34592: PUSH
34593: LD_VAR 0 3
34597: PUSH
34598: LD_VAR 0 2
34602: ARRAY
34603: PUSH
34604: LD_INT 2
34606: ARRAY
34607: STR
34608: PUSH
34609: LD_STRING ,
34611: STR
34612: PUSH
34613: LD_VAR 0 3
34617: PUSH
34618: LD_VAR 0 2
34622: ARRAY
34623: PUSH
34624: LD_INT 3
34626: ARRAY
34627: STR
34628: PUSH
34629: LD_STRING ,
34631: STR
34632: PUSH
34633: LD_VAR 0 3
34637: PUSH
34638: LD_VAR 0 2
34642: ARRAY
34643: PUSH
34644: LD_INT 4
34646: ARRAY
34647: STR
34648: PUSH
34649: LD_STRING )
34651: STR
34652: PPUSH
34653: CALL_OW 559
34657: GO 34567
34659: POP
34660: POP
// end ; end ;
34661: LD_VAR 0 1
34665: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34666: LD_INT 0
34668: PPUSH
// if HexInfo ( x , y ) = warehouse then
34669: LD_VAR 0 2
34673: PPUSH
34674: LD_VAR 0 3
34678: PPUSH
34679: CALL_OW 428
34683: PUSH
34684: LD_VAR 0 1
34688: EQUAL
34689: IFFALSE 34716
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34691: LD_ADDR_EXP 123
34695: PUSH
34696: LD_EXP 123
34700: PPUSH
34701: LD_VAR 0 1
34705: PPUSH
34706: LD_INT 0
34708: PPUSH
34709: CALL_OW 1
34713: ST_TO_ADDR
34714: GO 34767
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34716: LD_ADDR_EXP 123
34720: PUSH
34721: LD_EXP 123
34725: PPUSH
34726: LD_VAR 0 1
34730: PPUSH
34731: LD_VAR 0 1
34735: PPUSH
34736: CALL_OW 255
34740: PUSH
34741: LD_VAR 0 1
34745: PUSH
34746: LD_VAR 0 2
34750: PUSH
34751: LD_VAR 0 3
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: PPUSH
34762: CALL_OW 1
34766: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34767: CALL 34776 0 0
// end ;
34771: LD_VAR 0 4
34775: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34776: LD_INT 0
34778: PPUSH
34779: PPUSH
34780: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34781: LD_STRING resetWarehouseGatheringPoints();
34783: PPUSH
34784: CALL_OW 559
// if warehouseGatheringPoints then
34788: LD_EXP 123
34792: IFFALSE 34918
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34794: LD_ADDR_VAR 0 3
34798: PUSH
34799: LD_EXP 123
34803: PPUSH
34804: CALL 83117 0 1
34808: ST_TO_ADDR
// for i := 1 to list do
34809: LD_ADDR_VAR 0 2
34813: PUSH
34814: DOUBLE
34815: LD_INT 1
34817: DEC
34818: ST_TO_ADDR
34819: LD_VAR 0 3
34823: PUSH
34824: FOR_TO
34825: IFFALSE 34916
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34827: LD_STRING setWarehouseGatheringPointXY(
34829: PUSH
34830: LD_VAR 0 3
34834: PUSH
34835: LD_VAR 0 2
34839: ARRAY
34840: PUSH
34841: LD_INT 1
34843: ARRAY
34844: STR
34845: PUSH
34846: LD_STRING ,
34848: STR
34849: PUSH
34850: LD_VAR 0 3
34854: PUSH
34855: LD_VAR 0 2
34859: ARRAY
34860: PUSH
34861: LD_INT 2
34863: ARRAY
34864: STR
34865: PUSH
34866: LD_STRING ,
34868: STR
34869: PUSH
34870: LD_VAR 0 3
34874: PUSH
34875: LD_VAR 0 2
34879: ARRAY
34880: PUSH
34881: LD_INT 3
34883: ARRAY
34884: STR
34885: PUSH
34886: LD_STRING ,
34888: STR
34889: PUSH
34890: LD_VAR 0 3
34894: PUSH
34895: LD_VAR 0 2
34899: ARRAY
34900: PUSH
34901: LD_INT 4
34903: ARRAY
34904: STR
34905: PUSH
34906: LD_STRING )
34908: STR
34909: PPUSH
34910: CALL_OW 559
34914: GO 34824
34916: POP
34917: POP
// end ; end ;
34918: LD_VAR 0 1
34922: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34923: LD_EXP 123
34927: IFFALSE 35622
34929: GO 34931
34931: DISABLE
34932: LD_INT 0
34934: PPUSH
34935: PPUSH
34936: PPUSH
34937: PPUSH
34938: PPUSH
34939: PPUSH
34940: PPUSH
34941: PPUSH
34942: PPUSH
// begin enable ;
34943: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34944: LD_ADDR_VAR 0 3
34948: PUSH
34949: LD_EXP 123
34953: PPUSH
34954: CALL 83117 0 1
34958: ST_TO_ADDR
// if not list then
34959: LD_VAR 0 3
34963: NOT
34964: IFFALSE 34968
// exit ;
34966: GO 35622
// for i := 1 to list do
34968: LD_ADDR_VAR 0 1
34972: PUSH
34973: DOUBLE
34974: LD_INT 1
34976: DEC
34977: ST_TO_ADDR
34978: LD_VAR 0 3
34982: PUSH
34983: FOR_TO
34984: IFFALSE 35620
// begin depot := list [ i ] [ 2 ] ;
34986: LD_ADDR_VAR 0 8
34990: PUSH
34991: LD_VAR 0 3
34995: PUSH
34996: LD_VAR 0 1
35000: ARRAY
35001: PUSH
35002: LD_INT 2
35004: ARRAY
35005: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35006: LD_ADDR_VAR 0 5
35010: PUSH
35011: LD_VAR 0 3
35015: PUSH
35016: LD_VAR 0 1
35020: ARRAY
35021: PUSH
35022: LD_INT 1
35024: ARRAY
35025: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35026: LD_VAR 0 8
35030: PPUSH
35031: CALL_OW 301
35035: IFTRUE 35054
35037: PUSH
35038: LD_VAR 0 5
35042: PUSH
35043: LD_VAR 0 8
35047: PPUSH
35048: CALL_OW 255
35052: NONEQUAL
35053: OR
35054: IFFALSE 35083
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35056: LD_ADDR_EXP 123
35060: PUSH
35061: LD_EXP 123
35065: PPUSH
35066: LD_VAR 0 8
35070: PPUSH
35071: LD_INT 0
35073: PPUSH
35074: CALL_OW 1
35078: ST_TO_ADDR
// exit ;
35079: POP
35080: POP
35081: GO 35622
// end ; x := list [ i ] [ 3 ] ;
35083: LD_ADDR_VAR 0 6
35087: PUSH
35088: LD_VAR 0 3
35092: PUSH
35093: LD_VAR 0 1
35097: ARRAY
35098: PUSH
35099: LD_INT 3
35101: ARRAY
35102: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35103: LD_ADDR_VAR 0 7
35107: PUSH
35108: LD_VAR 0 3
35112: PUSH
35113: LD_VAR 0 1
35117: ARRAY
35118: PUSH
35119: LD_INT 4
35121: ARRAY
35122: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35123: LD_ADDR_VAR 0 9
35127: PUSH
35128: LD_VAR 0 6
35132: PPUSH
35133: LD_VAR 0 7
35137: PPUSH
35138: LD_INT 16
35140: PPUSH
35141: CALL 81691 0 3
35145: ST_TO_ADDR
// if not cratesNearbyPoint then
35146: LD_VAR 0 9
35150: NOT
35151: IFFALSE 35157
// exit ;
35153: POP
35154: POP
35155: GO 35622
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35157: LD_ADDR_VAR 0 4
35161: PUSH
35162: LD_INT 22
35164: PUSH
35165: LD_VAR 0 5
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 3
35176: PUSH
35177: LD_INT 60
35179: PUSH
35180: EMPTY
35181: LIST
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 91
35189: PUSH
35190: LD_VAR 0 8
35194: PUSH
35195: LD_INT 6
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 2
35205: PUSH
35206: LD_INT 25
35208: PUSH
35209: LD_INT 2
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 25
35218: PUSH
35219: LD_INT 16
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: LIST
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: PPUSH
35237: CALL_OW 69
35241: PUSH
35242: LD_VAR 0 8
35246: PPUSH
35247: CALL_OW 313
35251: PPUSH
35252: LD_INT 3
35254: PUSH
35255: LD_INT 60
35257: PUSH
35258: EMPTY
35259: LIST
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 2
35267: PUSH
35268: LD_INT 25
35270: PUSH
35271: LD_INT 2
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 25
35280: PUSH
35281: LD_INT 16
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: LIST
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PPUSH
35297: CALL_OW 72
35301: UNION
35302: ST_TO_ADDR
// if tmp then
35303: LD_VAR 0 4
35307: IFFALSE 35387
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35309: LD_ADDR_VAR 0 4
35313: PUSH
35314: LD_VAR 0 4
35318: PPUSH
35319: LD_INT 3
35321: PPUSH
35322: CALL 79498 0 2
35326: ST_TO_ADDR
// for j in tmp do
35327: LD_ADDR_VAR 0 2
35331: PUSH
35332: LD_VAR 0 4
35336: PUSH
35337: FOR_IN
35338: IFFALSE 35381
// begin if IsInUnit ( j ) then
35340: LD_VAR 0 2
35344: PPUSH
35345: CALL_OW 310
35349: IFFALSE 35360
// ComExit ( j ) ;
35351: LD_VAR 0 2
35355: PPUSH
35356: CALL 79581 0 1
// AddComCollect ( j , x , y ) ;
35360: LD_VAR 0 2
35364: PPUSH
35365: LD_VAR 0 6
35369: PPUSH
35370: LD_VAR 0 7
35374: PPUSH
35375: CALL_OW 177
// end ;
35379: GO 35337
35381: POP
35382: POP
// exit ;
35383: POP
35384: POP
35385: GO 35622
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35387: LD_ADDR_VAR 0 4
35391: PUSH
35392: LD_INT 22
35394: PUSH
35395: LD_VAR 0 5
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 91
35406: PUSH
35407: LD_VAR 0 8
35411: PUSH
35412: LD_INT 8
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 2
35422: PUSH
35423: LD_INT 34
35425: PUSH
35426: LD_INT 12
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 34
35435: PUSH
35436: LD_INT 51
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 34
35445: PUSH
35446: LD_INT 32
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 34
35455: PUSH
35456: LD_INT 89
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: LIST
35474: PPUSH
35475: CALL_OW 69
35479: ST_TO_ADDR
// if tmp then
35480: LD_VAR 0 4
35484: IFFALSE 35618
// begin for j in tmp do
35486: LD_ADDR_VAR 0 2
35490: PUSH
35491: LD_VAR 0 4
35495: PUSH
35496: FOR_IN
35497: IFFALSE 35616
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35499: LD_VAR 0 2
35503: PPUSH
35504: CALL_OW 262
35508: PUSH
35509: LD_INT 3
35511: EQUAL
35512: IFTRUE 35529
35514: PUSH
35515: LD_VAR 0 2
35519: PPUSH
35520: CALL_OW 261
35524: PUSH
35525: LD_INT 20
35527: GREATER
35528: OR
35529: IFFALSE 35543
35531: PUSH
35532: LD_VAR 0 2
35536: PPUSH
35537: CALL_OW 314
35541: NOT
35542: AND
35543: IFFALSE 35573
35545: PUSH
35546: LD_VAR 0 2
35550: PPUSH
35551: CALL_OW 263
35555: PUSH
35556: LD_INT 1
35558: NONEQUAL
35559: IFTRUE 35572
35561: PUSH
35562: LD_VAR 0 2
35566: PPUSH
35567: CALL_OW 311
35571: OR
35572: AND
35573: IFFALSE 35614
// begin ComCollect ( j , x , y ) ;
35575: LD_VAR 0 2
35579: PPUSH
35580: LD_VAR 0 6
35584: PPUSH
35585: LD_VAR 0 7
35589: PPUSH
35590: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35594: LD_VAR 0 2
35598: PPUSH
35599: LD_VAR 0 8
35603: PPUSH
35604: CALL_OW 172
// exit ;
35608: POP
35609: POP
35610: POP
35611: POP
35612: GO 35622
// end ;
35614: GO 35496
35616: POP
35617: POP
// end ; end ;
35618: GO 34983
35620: POP
35621: POP
// end ; end_of_file
35622: PPOPN 9
35624: END
// export function SOS_UnitDestroyed ( un ) ; begin
35625: LD_INT 0
35627: PPUSH
// ComRadiation ( un ) ;
35628: LD_VAR 0 1
35632: PPUSH
35633: CALL 36714 0 1
// end ;
35637: LD_VAR 0 2
35641: RET
// export function SOS_UnitKamikazed ( un ) ; begin
35642: LD_INT 0
35644: PPUSH
// ComRadiation ( un ) ;
35645: LD_VAR 0 1
35649: PPUSH
35650: CALL 36714 0 1
// end ;
35654: LD_VAR 0 2
35658: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35659: LD_INT 0
35661: PPUSH
// end ;
35662: LD_VAR 0 4
35666: RET
// export function SOS_Command ( cmd ) ; begin
35667: LD_INT 0
35669: PPUSH
// end ;
35670: LD_VAR 0 2
35674: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35675: LD_INT 0
35677: PPUSH
// end ;
35678: LD_VAR 0 6
35682: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
35683: LD_INT 0
35685: PPUSH
35686: PPUSH
35687: PPUSH
35688: PPUSH
// if not vehicle or not factory then
35689: LD_VAR 0 1
35693: NOT
35694: IFTRUE 35703
35696: PUSH
35697: LD_VAR 0 2
35701: NOT
35702: OR
35703: IFFALSE 35707
// exit ;
35705: GO 36289
// if not factoryWaypoints then
35707: LD_EXP 121
35711: NOT
35712: IFFALSE 35716
// exit ;
35714: GO 36289
// for i := 1 to Count ( factoryWaypoints ) do
35716: LD_ADDR_VAR 0 4
35720: PUSH
35721: DOUBLE
35722: LD_INT 1
35724: DEC
35725: ST_TO_ADDR
35726: LD_EXP 121
35730: PPUSH
35731: CALL 43251 0 1
35735: PUSH
35736: FOR_TO
35737: IFFALSE 36287
// if factoryWaypoints [ i ] [ 2 ] = factory then
35739: LD_EXP 121
35743: PUSH
35744: LD_VAR 0 4
35748: ARRAY
35749: PUSH
35750: LD_INT 2
35752: ARRAY
35753: PUSH
35754: LD_VAR 0 2
35758: EQUAL
35759: IFFALSE 36285
// begin if GetControl ( vehicle ) = control_manual then
35761: LD_VAR 0 1
35765: PPUSH
35766: CALL_OW 263
35770: PUSH
35771: LD_INT 1
35773: EQUAL
35774: IFFALSE 36138
// begin driver := IsDrivenBy ( vehicle ) ;
35776: LD_ADDR_VAR 0 5
35780: PUSH
35781: LD_VAR 0 1
35785: PPUSH
35786: CALL_OW 311
35790: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
35791: LD_VAR 0 5
35795: PUSH
35796: LD_EXP 122
35800: IN
35801: IFTRUE 35815
35803: PUSH
35804: LD_VAR 0 1
35808: PUSH
35809: LD_EXP 122
35813: IN
35814: OR
35815: IFFALSE 35821
// exit ;
35817: POP
35818: POP
35819: GO 36289
// if not HasTask ( driver ) then
35821: LD_VAR 0 5
35825: PPUSH
35826: CALL_OW 314
35830: NOT
35831: IFFALSE 36136
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
35833: LD_ADDR_EXP 122
35837: PUSH
35838: LD_EXP 122
35842: PPUSH
35843: LD_VAR 0 5
35847: PPUSH
35848: CALL 79183 0 2
35852: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
35853: LD_ADDR_EXP 122
35857: PUSH
35858: LD_EXP 122
35862: PPUSH
35863: LD_VAR 0 1
35867: PPUSH
35868: CALL 79183 0 2
35872: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35873: LD_ADDR_VAR 0 6
35877: PUSH
35878: LD_EXP 121
35882: PUSH
35883: LD_VAR 0 4
35887: ARRAY
35888: PUSH
35889: LD_INT 3
35891: ARRAY
35892: PPUSH
35893: LD_EXP 121
35897: PUSH
35898: LD_VAR 0 4
35902: ARRAY
35903: PUSH
35904: LD_INT 4
35906: ARRAY
35907: PPUSH
35908: CALL_OW 428
35912: ST_TO_ADDR
// if hex then
35913: LD_VAR 0 6
35917: IFFALSE 35935
// ComMoveUnit ( driver , hex ) else
35919: LD_VAR 0 5
35923: PPUSH
35924: LD_VAR 0 6
35928: PPUSH
35929: CALL_OW 112
35933: GO 36019
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
35935: LD_VAR 0 1
35939: PPUSH
35940: LD_EXP 121
35944: PUSH
35945: LD_VAR 0 4
35949: ARRAY
35950: PUSH
35951: LD_INT 3
35953: ARRAY
35954: PPUSH
35955: LD_EXP 121
35959: PUSH
35960: LD_VAR 0 4
35964: ARRAY
35965: PUSH
35966: LD_INT 4
35968: ARRAY
35969: PPUSH
35970: CALL_OW 297
35974: PUSH
35975: LD_INT 0
35977: GREATER
35978: IFFALSE 36019
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35980: LD_VAR 0 5
35984: PPUSH
35985: LD_EXP 121
35989: PUSH
35990: LD_VAR 0 4
35994: ARRAY
35995: PUSH
35996: LD_INT 3
35998: ARRAY
35999: PPUSH
36000: LD_EXP 121
36004: PUSH
36005: LD_VAR 0 4
36009: ARRAY
36010: PUSH
36011: LD_INT 4
36013: ARRAY
36014: PPUSH
36015: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36019: LD_VAR 0 5
36023: PPUSH
36024: CALL_OW 181
// if Multiplayer then
36028: LD_OWVAR 4
36032: IFFALSE 36081
// begin repeat wait ( 10 ) ;
36034: LD_INT 10
36036: PPUSH
36037: CALL_OW 67
// until not IsInUnit ( driver ) ;
36041: LD_VAR 0 5
36045: PPUSH
36046: CALL_OW 310
36050: NOT
36051: IFFALSE 36034
// if not HasTask ( driver ) then
36053: LD_VAR 0 5
36057: PPUSH
36058: CALL_OW 314
36062: NOT
36063: IFFALSE 36079
// ComEnterUnit ( driver , factory ) ;
36065: LD_VAR 0 5
36069: PPUSH
36070: LD_VAR 0 2
36074: PPUSH
36075: CALL_OW 120
// end else
36079: GO 36095
// AddComEnterUnit ( driver , factory ) ;
36081: LD_VAR 0 5
36085: PPUSH
36086: LD_VAR 0 2
36090: PPUSH
36091: CALL_OW 180
// wait ( 0 0$1 ) ;
36095: LD_INT 35
36097: PPUSH
36098: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
36102: LD_ADDR_EXP 122
36106: PUSH
36107: LD_EXP 122
36111: PUSH
36112: LD_VAR 0 5
36116: DIFF
36117: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
36118: LD_ADDR_EXP 122
36122: PUSH
36123: LD_EXP 122
36127: PUSH
36128: LD_VAR 0 1
36132: DIFF
36133: ST_TO_ADDR
// break ;
36134: GO 36287
// end ; end else
36136: GO 36285
// if GetControl ( vehicle ) = control_remote then
36138: LD_VAR 0 1
36142: PPUSH
36143: CALL_OW 263
36147: PUSH
36148: LD_INT 2
36150: EQUAL
36151: IFFALSE 36237
// begin wait ( 0 0$2 ) ;
36153: LD_INT 70
36155: PPUSH
36156: CALL_OW 67
// repeat wait ( 10 ) ;
36160: LD_INT 10
36162: PPUSH
36163: CALL_OW 67
// Connect ( vehicle ) ;
36167: LD_VAR 0 1
36171: PPUSH
36172: CALL 49495 0 1
// until IsControledBy ( vehicle ) ;
36176: LD_VAR 0 1
36180: PPUSH
36181: CALL_OW 312
36185: IFFALSE 36160
// wait ( 10 ) ;
36187: LD_INT 10
36189: PPUSH
36190: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36194: LD_VAR 0 1
36198: PPUSH
36199: LD_EXP 121
36203: PUSH
36204: LD_VAR 0 4
36208: ARRAY
36209: PUSH
36210: LD_INT 3
36212: ARRAY
36213: PPUSH
36214: LD_EXP 121
36218: PUSH
36219: LD_VAR 0 4
36223: ARRAY
36224: PUSH
36225: LD_INT 4
36227: ARRAY
36228: PPUSH
36229: CALL_OW 111
// break ;
36233: GO 36287
// end else
36235: GO 36285
// begin wait ( 0 0$3 ) ;
36237: LD_INT 105
36239: PPUSH
36240: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36244: LD_VAR 0 1
36248: PPUSH
36249: LD_EXP 121
36253: PUSH
36254: LD_VAR 0 4
36258: ARRAY
36259: PUSH
36260: LD_INT 3
36262: ARRAY
36263: PPUSH
36264: LD_EXP 121
36268: PUSH
36269: LD_VAR 0 4
36273: ARRAY
36274: PUSH
36275: LD_INT 4
36277: ARRAY
36278: PPUSH
36279: CALL_OW 111
// break ;
36283: GO 36287
// end ; end ;
36285: GO 35736
36287: POP
36288: POP
// end ;
36289: LD_VAR 0 3
36293: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36294: LD_INT 0
36296: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36297: LD_VAR 0 1
36301: PUSH
36302: LD_INT 250
36304: EQUAL
36305: IFFALSE 36322
36307: PUSH
36308: LD_VAR 0 2
36312: PPUSH
36313: CALL_OW 264
36317: PUSH
36318: LD_INT 81
36320: EQUAL
36321: AND
36322: IFFALSE 36343
// MinerPlaceMine ( unit , x , y ) ;
36324: LD_VAR 0 2
36328: PPUSH
36329: LD_VAR 0 4
36333: PPUSH
36334: LD_VAR 0 5
36338: PPUSH
36339: CALL 39475 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36343: LD_VAR 0 1
36347: PUSH
36348: LD_INT 251
36350: EQUAL
36351: IFFALSE 36368
36353: PUSH
36354: LD_VAR 0 2
36358: PPUSH
36359: CALL_OW 264
36363: PUSH
36364: LD_INT 81
36366: EQUAL
36367: AND
36368: IFFALSE 36389
// MinerDetonateMine ( unit , x , y ) ;
36370: LD_VAR 0 2
36374: PPUSH
36375: LD_VAR 0 4
36379: PPUSH
36380: LD_VAR 0 5
36384: PPUSH
36385: CALL 39754 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36389: LD_VAR 0 1
36393: PUSH
36394: LD_INT 252
36396: EQUAL
36397: IFFALSE 36414
36399: PUSH
36400: LD_VAR 0 2
36404: PPUSH
36405: CALL_OW 264
36409: PUSH
36410: LD_INT 81
36412: EQUAL
36413: AND
36414: IFFALSE 36435
// MinerCreateMinefield ( unit , x , y ) ;
36416: LD_VAR 0 2
36420: PPUSH
36421: LD_VAR 0 4
36425: PPUSH
36426: LD_VAR 0 5
36430: PPUSH
36431: CALL 40173 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36435: LD_VAR 0 1
36439: PUSH
36440: LD_INT 253
36442: EQUAL
36443: IFFALSE 36460
36445: PUSH
36446: LD_VAR 0 2
36450: PPUSH
36451: CALL_OW 257
36455: PUSH
36456: LD_INT 5
36458: EQUAL
36459: AND
36460: IFFALSE 36481
// ComBinocular ( unit , x , y ) ;
36462: LD_VAR 0 2
36466: PPUSH
36467: LD_VAR 0 4
36471: PPUSH
36472: LD_VAR 0 5
36476: PPUSH
36477: CALL 40548 0 3
// if selectedUnit then
36481: LD_VAR 0 3
36485: IFFALSE 36545
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36487: LD_VAR 0 1
36491: PUSH
36492: LD_INT 254
36494: EQUAL
36495: IFFALSE 36512
36497: PUSH
36498: LD_VAR 0 2
36502: PPUSH
36503: CALL_OW 264
36507: PUSH
36508: LD_INT 99
36510: EQUAL
36511: AND
36512: IFFALSE 36529
36514: PUSH
36515: LD_VAR 0 3
36519: PPUSH
36520: CALL_OW 263
36524: PUSH
36525: LD_INT 3
36527: EQUAL
36528: AND
36529: IFFALSE 36545
// HackDestroyVehicle ( unit , selectedUnit ) ;
36531: LD_VAR 0 2
36535: PPUSH
36536: LD_VAR 0 3
36540: PPUSH
36541: CALL 38835 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36545: LD_VAR 0 1
36549: PUSH
36550: LD_INT 255
36552: EQUAL
36553: IFFALSE 36577
36555: PUSH
36556: LD_VAR 0 2
36560: PPUSH
36561: CALL_OW 264
36565: PUSH
36566: LD_INT 14
36568: PUSH
36569: LD_INT 53
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: IN
36576: AND
36577: IFFALSE 36595
36579: PUSH
36580: LD_VAR 0 4
36584: PPUSH
36585: LD_VAR 0 5
36589: PPUSH
36590: CALL_OW 488
36594: AND
36595: IFFALSE 36619
// CutTreeXYR ( unit , x , y , 12 ) ;
36597: LD_VAR 0 2
36601: PPUSH
36602: LD_VAR 0 4
36606: PPUSH
36607: LD_VAR 0 5
36611: PPUSH
36612: LD_INT 12
36614: PPUSH
36615: CALL 36810 0 4
// if cmd = 256 then
36619: LD_VAR 0 1
36623: PUSH
36624: LD_INT 256
36626: EQUAL
36627: IFFALSE 36648
// SetFactoryWaypoint ( unit , x , y ) ;
36629: LD_VAR 0 2
36633: PPUSH
36634: LD_VAR 0 4
36638: PPUSH
36639: LD_VAR 0 5
36643: PPUSH
36644: CALL 34170 0 3
// if cmd = 257 then
36648: LD_VAR 0 1
36652: PUSH
36653: LD_INT 257
36655: EQUAL
36656: IFFALSE 36677
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36658: LD_VAR 0 2
36662: PPUSH
36663: LD_VAR 0 4
36667: PPUSH
36668: LD_VAR 0 5
36672: PPUSH
36673: CALL 34666 0 3
// if cmd = 258 then
36677: LD_VAR 0 1
36681: PUSH
36682: LD_INT 258
36684: EQUAL
36685: IFFALSE 36709
// BurnTreeXYR ( unit , x , y , 8 ) ;
36687: LD_VAR 0 2
36691: PPUSH
36692: LD_VAR 0 4
36696: PPUSH
36697: LD_VAR 0 5
36701: PPUSH
36702: LD_INT 8
36704: PPUSH
36705: CALL 37210 0 4
// end ;
36709: LD_VAR 0 6
36713: RET
// export function ComRadiation ( un ) ; var eff ; begin
36714: LD_INT 0
36716: PPUSH
36717: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
36718: LD_VAR 0 1
36722: PPUSH
36723: CALL_OW 264
36727: PUSH
36728: LD_INT 91
36730: NONEQUAL
36731: IFFALSE 36735
// exit ;
36733: GO 36805
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36735: LD_INT 68
36737: PPUSH
36738: LD_VAR 0 1
36742: PPUSH
36743: CALL_OW 255
36747: PPUSH
36748: CALL_OW 321
36752: PUSH
36753: LD_INT 2
36755: EQUAL
36756: IFFALSE 36768
// eff := 50 else
36758: LD_ADDR_VAR 0 3
36762: PUSH
36763: LD_INT 50
36765: ST_TO_ADDR
36766: GO 36776
// eff := 25 ;
36768: LD_ADDR_VAR 0 3
36772: PUSH
36773: LD_INT 25
36775: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36776: LD_VAR 0 1
36780: PPUSH
36781: CALL_OW 250
36785: PPUSH
36786: LD_VAR 0 1
36790: PPUSH
36791: CALL_OW 251
36795: PPUSH
36796: LD_VAR 0 3
36800: PPUSH
36801: CALL_OW 495
// end ;
36805: LD_VAR 0 2
36809: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36810: LD_INT 0
36812: PPUSH
36813: PPUSH
36814: PPUSH
36815: PPUSH
36816: PPUSH
36817: PPUSH
36818: PPUSH
36819: PPUSH
36820: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36821: LD_VAR 0 1
36825: PPUSH
36826: CALL_OW 302
36830: NOT
36831: IFTRUE 36850
36833: PUSH
36834: LD_VAR 0 2
36838: PPUSH
36839: LD_VAR 0 3
36843: PPUSH
36844: CALL_OW 488
36848: NOT
36849: OR
36850: IFTRUE 36859
36852: PUSH
36853: LD_VAR 0 4
36857: NOT
36858: OR
36859: IFFALSE 36863
// exit ;
36861: GO 37205
// list := [ ] ;
36863: LD_ADDR_VAR 0 13
36867: PUSH
36868: EMPTY
36869: ST_TO_ADDR
// if x - r < 0 then
36870: LD_VAR 0 2
36874: PUSH
36875: LD_VAR 0 4
36879: MINUS
36880: PUSH
36881: LD_INT 0
36883: LESS
36884: IFFALSE 36896
// min_x := 0 else
36886: LD_ADDR_VAR 0 7
36890: PUSH
36891: LD_INT 0
36893: ST_TO_ADDR
36894: GO 36912
// min_x := x - r ;
36896: LD_ADDR_VAR 0 7
36900: PUSH
36901: LD_VAR 0 2
36905: PUSH
36906: LD_VAR 0 4
36910: MINUS
36911: ST_TO_ADDR
// if y - r < 0 then
36912: LD_VAR 0 3
36916: PUSH
36917: LD_VAR 0 4
36921: MINUS
36922: PUSH
36923: LD_INT 0
36925: LESS
36926: IFFALSE 36938
// min_y := 0 else
36928: LD_ADDR_VAR 0 8
36932: PUSH
36933: LD_INT 0
36935: ST_TO_ADDR
36936: GO 36954
// min_y := y - r ;
36938: LD_ADDR_VAR 0 8
36942: PUSH
36943: LD_VAR 0 3
36947: PUSH
36948: LD_VAR 0 4
36952: MINUS
36953: ST_TO_ADDR
// max_x := x + r ;
36954: LD_ADDR_VAR 0 9
36958: PUSH
36959: LD_VAR 0 2
36963: PUSH
36964: LD_VAR 0 4
36968: PLUS
36969: ST_TO_ADDR
// max_y := y + r ;
36970: LD_ADDR_VAR 0 10
36974: PUSH
36975: LD_VAR 0 3
36979: PUSH
36980: LD_VAR 0 4
36984: PLUS
36985: ST_TO_ADDR
// for _x = min_x to max_x do
36986: LD_ADDR_VAR 0 11
36990: PUSH
36991: DOUBLE
36992: LD_VAR 0 7
36996: DEC
36997: ST_TO_ADDR
36998: LD_VAR 0 9
37002: PUSH
37003: FOR_TO
37004: IFFALSE 37123
// for _y = min_y to max_y do
37006: LD_ADDR_VAR 0 12
37010: PUSH
37011: DOUBLE
37012: LD_VAR 0 8
37016: DEC
37017: ST_TO_ADDR
37018: LD_VAR 0 10
37022: PUSH
37023: FOR_TO
37024: IFFALSE 37119
// begin if not ValidHex ( _x , _y ) then
37026: LD_VAR 0 11
37030: PPUSH
37031: LD_VAR 0 12
37035: PPUSH
37036: CALL_OW 488
37040: NOT
37041: IFFALSE 37045
// continue ;
37043: GO 37023
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37045: LD_VAR 0 11
37049: PPUSH
37050: LD_VAR 0 12
37054: PPUSH
37055: CALL_OW 351
37059: IFFALSE 37077
37061: PUSH
37062: LD_VAR 0 11
37066: PPUSH
37067: LD_VAR 0 12
37071: PPUSH
37072: CALL_OW 554
37076: AND
37077: IFFALSE 37117
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37079: LD_ADDR_VAR 0 13
37083: PUSH
37084: LD_VAR 0 13
37088: PPUSH
37089: LD_VAR 0 13
37093: PUSH
37094: LD_INT 1
37096: PLUS
37097: PPUSH
37098: LD_VAR 0 11
37102: PUSH
37103: LD_VAR 0 12
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PPUSH
37112: CALL_OW 2
37116: ST_TO_ADDR
// end ;
37117: GO 37023
37119: POP
37120: POP
37121: GO 37003
37123: POP
37124: POP
// if not list then
37125: LD_VAR 0 13
37129: NOT
37130: IFFALSE 37134
// exit ;
37132: GO 37205
// for i in list do
37134: LD_ADDR_VAR 0 6
37138: PUSH
37139: LD_VAR 0 13
37143: PUSH
37144: FOR_IN
37145: IFFALSE 37203
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37147: LD_VAR 0 1
37151: PPUSH
37152: LD_STRING M
37154: PUSH
37155: LD_VAR 0 6
37159: PUSH
37160: LD_INT 1
37162: ARRAY
37163: PUSH
37164: LD_VAR 0 6
37168: PUSH
37169: LD_INT 2
37171: ARRAY
37172: PUSH
37173: LD_INT 0
37175: PUSH
37176: LD_INT 0
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: PUSH
37194: EMPTY
37195: LIST
37196: PPUSH
37197: CALL_OW 447
37201: GO 37144
37203: POP
37204: POP
// end ;
37205: LD_VAR 0 5
37209: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37210: LD_INT 0
37212: PPUSH
37213: PPUSH
37214: PPUSH
37215: PPUSH
37216: PPUSH
37217: PPUSH
37218: PPUSH
37219: PPUSH
37220: PPUSH
37221: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37222: LD_VAR 0 1
37226: PPUSH
37227: CALL_OW 302
37231: NOT
37232: IFTRUE 37251
37234: PUSH
37235: LD_VAR 0 2
37239: PPUSH
37240: LD_VAR 0 3
37244: PPUSH
37245: CALL_OW 488
37249: NOT
37250: OR
37251: IFTRUE 37260
37253: PUSH
37254: LD_VAR 0 4
37258: NOT
37259: OR
37260: IFFALSE 37264
// exit ;
37262: GO 37781
// list := [ ] ;
37264: LD_ADDR_VAR 0 13
37268: PUSH
37269: EMPTY
37270: ST_TO_ADDR
// if x - r < 0 then
37271: LD_VAR 0 2
37275: PUSH
37276: LD_VAR 0 4
37280: MINUS
37281: PUSH
37282: LD_INT 0
37284: LESS
37285: IFFALSE 37297
// min_x := 0 else
37287: LD_ADDR_VAR 0 7
37291: PUSH
37292: LD_INT 0
37294: ST_TO_ADDR
37295: GO 37313
// min_x := x - r ;
37297: LD_ADDR_VAR 0 7
37301: PUSH
37302: LD_VAR 0 2
37306: PUSH
37307: LD_VAR 0 4
37311: MINUS
37312: ST_TO_ADDR
// if y - r < 0 then
37313: LD_VAR 0 3
37317: PUSH
37318: LD_VAR 0 4
37322: MINUS
37323: PUSH
37324: LD_INT 0
37326: LESS
37327: IFFALSE 37339
// min_y := 0 else
37329: LD_ADDR_VAR 0 8
37333: PUSH
37334: LD_INT 0
37336: ST_TO_ADDR
37337: GO 37355
// min_y := y - r ;
37339: LD_ADDR_VAR 0 8
37343: PUSH
37344: LD_VAR 0 3
37348: PUSH
37349: LD_VAR 0 4
37353: MINUS
37354: ST_TO_ADDR
// max_x := x + r ;
37355: LD_ADDR_VAR 0 9
37359: PUSH
37360: LD_VAR 0 2
37364: PUSH
37365: LD_VAR 0 4
37369: PLUS
37370: ST_TO_ADDR
// max_y := y + r ;
37371: LD_ADDR_VAR 0 10
37375: PUSH
37376: LD_VAR 0 3
37380: PUSH
37381: LD_VAR 0 4
37385: PLUS
37386: ST_TO_ADDR
// for _x = min_x to max_x do
37387: LD_ADDR_VAR 0 11
37391: PUSH
37392: DOUBLE
37393: LD_VAR 0 7
37397: DEC
37398: ST_TO_ADDR
37399: LD_VAR 0 9
37403: PUSH
37404: FOR_TO
37405: IFFALSE 37524
// for _y = min_y to max_y do
37407: LD_ADDR_VAR 0 12
37411: PUSH
37412: DOUBLE
37413: LD_VAR 0 8
37417: DEC
37418: ST_TO_ADDR
37419: LD_VAR 0 10
37423: PUSH
37424: FOR_TO
37425: IFFALSE 37520
// begin if not ValidHex ( _x , _y ) then
37427: LD_VAR 0 11
37431: PPUSH
37432: LD_VAR 0 12
37436: PPUSH
37437: CALL_OW 488
37441: NOT
37442: IFFALSE 37446
// continue ;
37444: GO 37424
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37446: LD_VAR 0 11
37450: PPUSH
37451: LD_VAR 0 12
37455: PPUSH
37456: CALL_OW 351
37460: IFFALSE 37478
37462: PUSH
37463: LD_VAR 0 11
37467: PPUSH
37468: LD_VAR 0 12
37472: PPUSH
37473: CALL_OW 554
37477: AND
37478: IFFALSE 37518
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37480: LD_ADDR_VAR 0 13
37484: PUSH
37485: LD_VAR 0 13
37489: PPUSH
37490: LD_VAR 0 13
37494: PUSH
37495: LD_INT 1
37497: PLUS
37498: PPUSH
37499: LD_VAR 0 11
37503: PUSH
37504: LD_VAR 0 12
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PPUSH
37513: CALL_OW 2
37517: ST_TO_ADDR
// end ;
37518: GO 37424
37520: POP
37521: POP
37522: GO 37404
37524: POP
37525: POP
// if not list then
37526: LD_VAR 0 13
37530: NOT
37531: IFFALSE 37535
// exit ;
37533: GO 37781
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37535: LD_ADDR_VAR 0 13
37539: PUSH
37540: LD_VAR 0 1
37544: PPUSH
37545: LD_VAR 0 13
37549: PPUSH
37550: LD_INT 1
37552: PPUSH
37553: LD_INT 1
37555: PPUSH
37556: CALL 46623 0 4
37560: ST_TO_ADDR
// ComStop ( flame ) ;
37561: LD_VAR 0 1
37565: PPUSH
37566: CALL_OW 141
// for i in list do
37570: LD_ADDR_VAR 0 6
37574: PUSH
37575: LD_VAR 0 13
37579: PUSH
37580: FOR_IN
37581: IFFALSE 37612
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37583: LD_VAR 0 1
37587: PPUSH
37588: LD_VAR 0 6
37592: PUSH
37593: LD_INT 1
37595: ARRAY
37596: PPUSH
37597: LD_VAR 0 6
37601: PUSH
37602: LD_INT 2
37604: ARRAY
37605: PPUSH
37606: CALL_OW 176
37610: GO 37580
37612: POP
37613: POP
// repeat wait ( 0 0$1 ) ;
37614: LD_INT 35
37616: PPUSH
37617: CALL_OW 67
// task := GetTaskList ( flame ) ;
37621: LD_ADDR_VAR 0 14
37625: PUSH
37626: LD_VAR 0 1
37630: PPUSH
37631: CALL_OW 437
37635: ST_TO_ADDR
// if not task then
37636: LD_VAR 0 14
37640: NOT
37641: IFFALSE 37645
// exit ;
37643: GO 37781
// if task [ 1 ] [ 1 ] <> | then
37645: LD_VAR 0 14
37649: PUSH
37650: LD_INT 1
37652: ARRAY
37653: PUSH
37654: LD_INT 1
37656: ARRAY
37657: PUSH
37658: LD_STRING |
37660: NONEQUAL
37661: IFFALSE 37665
// exit ;
37663: GO 37781
// _x := task [ 1 ] [ 2 ] ;
37665: LD_ADDR_VAR 0 11
37669: PUSH
37670: LD_VAR 0 14
37674: PUSH
37675: LD_INT 1
37677: ARRAY
37678: PUSH
37679: LD_INT 2
37681: ARRAY
37682: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37683: LD_ADDR_VAR 0 12
37687: PUSH
37688: LD_VAR 0 14
37692: PUSH
37693: LD_INT 1
37695: ARRAY
37696: PUSH
37697: LD_INT 3
37699: ARRAY
37700: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37701: LD_VAR 0 11
37705: PPUSH
37706: LD_VAR 0 12
37710: PPUSH
37711: CALL_OW 351
37715: NOT
37716: IFTRUE 37735
37718: PUSH
37719: LD_VAR 0 11
37723: PPUSH
37724: LD_VAR 0 12
37728: PPUSH
37729: CALL_OW 554
37733: NOT
37734: OR
37735: IFFALSE 37769
// begin task := Delete ( task , 1 ) ;
37737: LD_ADDR_VAR 0 14
37741: PUSH
37742: LD_VAR 0 14
37746: PPUSH
37747: LD_INT 1
37749: PPUSH
37750: CALL_OW 3
37754: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37755: LD_VAR 0 1
37759: PPUSH
37760: LD_VAR 0 14
37764: PPUSH
37765: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37769: LD_VAR 0 1
37773: PPUSH
37774: CALL_OW 314
37778: NOT
37779: IFFALSE 37614
// end ;
37781: LD_VAR 0 5
37785: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37786: LD_EXP 125
37790: NOT
37791: IFFALSE 37841
37793: GO 37795
37795: DISABLE
// begin initHack := true ;
37796: LD_ADDR_EXP 125
37800: PUSH
37801: LD_INT 1
37803: ST_TO_ADDR
// hackTanks := [ ] ;
37804: LD_ADDR_EXP 126
37808: PUSH
37809: EMPTY
37810: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37811: LD_ADDR_EXP 127
37815: PUSH
37816: EMPTY
37817: ST_TO_ADDR
// hackLimit := 3 ;
37818: LD_ADDR_EXP 128
37822: PUSH
37823: LD_INT 3
37825: ST_TO_ADDR
// hackDist := 12 ;
37826: LD_ADDR_EXP 129
37830: PUSH
37831: LD_INT 12
37833: ST_TO_ADDR
// hackCounter := [ ] ;
37834: LD_ADDR_EXP 130
37838: PUSH
37839: EMPTY
37840: ST_TO_ADDR
// end ;
37841: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37842: LD_EXP 125
37846: IFFALSE 37864
37848: PUSH
37849: LD_INT 34
37851: PUSH
37852: LD_INT 99
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PPUSH
37859: CALL_OW 69
37863: AND
37864: IFFALSE 38117
37866: GO 37868
37868: DISABLE
37869: LD_INT 0
37871: PPUSH
37872: PPUSH
// begin enable ;
37873: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37874: LD_ADDR_VAR 0 1
37878: PUSH
37879: LD_INT 34
37881: PUSH
37882: LD_INT 99
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PPUSH
37889: CALL_OW 69
37893: PUSH
37894: FOR_IN
37895: IFFALSE 38115
// begin if not i in hackTanks then
37897: LD_VAR 0 1
37901: PUSH
37902: LD_EXP 126
37906: IN
37907: NOT
37908: IFFALSE 37991
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37910: LD_ADDR_EXP 126
37914: PUSH
37915: LD_EXP 126
37919: PPUSH
37920: LD_EXP 126
37924: PUSH
37925: LD_INT 1
37927: PLUS
37928: PPUSH
37929: LD_VAR 0 1
37933: PPUSH
37934: CALL_OW 1
37938: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37939: LD_ADDR_EXP 127
37943: PUSH
37944: LD_EXP 127
37948: PPUSH
37949: LD_EXP 127
37953: PUSH
37954: LD_INT 1
37956: PLUS
37957: PPUSH
37958: EMPTY
37959: PPUSH
37960: CALL_OW 1
37964: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37965: LD_ADDR_EXP 130
37969: PUSH
37970: LD_EXP 130
37974: PPUSH
37975: LD_EXP 130
37979: PUSH
37980: LD_INT 1
37982: PLUS
37983: PPUSH
37984: EMPTY
37985: PPUSH
37986: CALL_OW 1
37990: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37991: LD_VAR 0 1
37995: PPUSH
37996: CALL_OW 302
38000: NOT
38001: IFFALSE 38014
// begin HackUnlinkAll ( i ) ;
38003: LD_VAR 0 1
38007: PPUSH
38008: CALL 38120 0 1
// continue ;
38012: GO 37894
// end ; HackCheckCapturedStatus ( i ) ;
38014: LD_VAR 0 1
38018: PPUSH
38019: CALL 38565 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38023: LD_ADDR_VAR 0 2
38027: PUSH
38028: LD_INT 81
38030: PUSH
38031: LD_VAR 0 1
38035: PPUSH
38036: CALL_OW 255
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 33
38047: PUSH
38048: LD_INT 3
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 91
38057: PUSH
38058: LD_VAR 0 1
38062: PUSH
38063: LD_EXP 129
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 50
38075: PUSH
38076: EMPTY
38077: LIST
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: PPUSH
38085: CALL_OW 69
38089: ST_TO_ADDR
// if not tmp then
38090: LD_VAR 0 2
38094: NOT
38095: IFFALSE 38099
// continue ;
38097: GO 37894
// HackLink ( i , tmp ) ;
38099: LD_VAR 0 1
38103: PPUSH
38104: LD_VAR 0 2
38108: PPUSH
38109: CALL 38256 0 2
// end ;
38113: GO 37894
38115: POP
38116: POP
// end ;
38117: PPOPN 2
38119: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38120: LD_INT 0
38122: PPUSH
38123: PPUSH
38124: PPUSH
// if not hack in hackTanks then
38125: LD_VAR 0 1
38129: PUSH
38130: LD_EXP 126
38134: IN
38135: NOT
38136: IFFALSE 38140
// exit ;
38138: GO 38251
// index := GetElementIndex ( hackTanks , hack ) ;
38140: LD_ADDR_VAR 0 4
38144: PUSH
38145: LD_EXP 126
38149: PPUSH
38150: LD_VAR 0 1
38154: PPUSH
38155: CALL 45918 0 2
38159: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38160: LD_EXP 127
38164: PUSH
38165: LD_VAR 0 4
38169: ARRAY
38170: IFFALSE 38251
// begin for i in hackTanksCaptured [ index ] do
38172: LD_ADDR_VAR 0 3
38176: PUSH
38177: LD_EXP 127
38181: PUSH
38182: LD_VAR 0 4
38186: ARRAY
38187: PUSH
38188: FOR_IN
38189: IFFALSE 38215
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38191: LD_VAR 0 3
38195: PUSH
38196: LD_INT 1
38198: ARRAY
38199: PPUSH
38200: LD_VAR 0 3
38204: PUSH
38205: LD_INT 2
38207: ARRAY
38208: PPUSH
38209: CALL_OW 235
38213: GO 38188
38215: POP
38216: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38217: LD_ADDR_EXP 127
38221: PUSH
38222: LD_EXP 127
38226: PPUSH
38227: LD_VAR 0 4
38231: PPUSH
38232: EMPTY
38233: PPUSH
38234: CALL_OW 1
38238: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38239: LD_VAR 0 1
38243: PPUSH
38244: LD_INT 0
38246: PPUSH
38247: CALL_OW 505
// end ; end ;
38251: LD_VAR 0 2
38255: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38256: LD_INT 0
38258: PPUSH
38259: PPUSH
38260: PPUSH
// if not hack in hackTanks or not vehicles then
38261: LD_VAR 0 1
38265: PUSH
38266: LD_EXP 126
38270: IN
38271: NOT
38272: IFTRUE 38281
38274: PUSH
38275: LD_VAR 0 2
38279: NOT
38280: OR
38281: IFFALSE 38285
// exit ;
38283: GO 38560
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38285: LD_ADDR_VAR 0 2
38289: PUSH
38290: LD_VAR 0 1
38294: PPUSH
38295: LD_VAR 0 2
38299: PPUSH
38300: LD_INT 1
38302: PPUSH
38303: LD_INT 1
38305: PPUSH
38306: CALL 46570 0 4
38310: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38311: LD_ADDR_VAR 0 5
38315: PUSH
38316: LD_EXP 126
38320: PPUSH
38321: LD_VAR 0 1
38325: PPUSH
38326: CALL 45918 0 2
38330: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38331: LD_EXP 127
38335: PUSH
38336: LD_VAR 0 5
38340: ARRAY
38341: PUSH
38342: LD_EXP 128
38346: LESS
38347: IFFALSE 38536
// begin for i := 1 to vehicles do
38349: LD_ADDR_VAR 0 4
38353: PUSH
38354: DOUBLE
38355: LD_INT 1
38357: DEC
38358: ST_TO_ADDR
38359: LD_VAR 0 2
38363: PUSH
38364: FOR_TO
38365: IFFALSE 38534
// begin if hackTanksCaptured [ index ] = hackLimit then
38367: LD_EXP 127
38371: PUSH
38372: LD_VAR 0 5
38376: ARRAY
38377: PUSH
38378: LD_EXP 128
38382: EQUAL
38383: IFFALSE 38387
// break ;
38385: GO 38534
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38387: LD_ADDR_EXP 130
38391: PUSH
38392: LD_EXP 130
38396: PPUSH
38397: LD_VAR 0 5
38401: PPUSH
38402: LD_EXP 130
38406: PUSH
38407: LD_VAR 0 5
38411: ARRAY
38412: PUSH
38413: LD_INT 1
38415: PLUS
38416: PPUSH
38417: CALL_OW 1
38421: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38422: LD_ADDR_EXP 127
38426: PUSH
38427: LD_EXP 127
38431: PPUSH
38432: LD_VAR 0 5
38436: PUSH
38437: LD_EXP 127
38441: PUSH
38442: LD_VAR 0 5
38446: ARRAY
38447: PUSH
38448: LD_INT 1
38450: PLUS
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PPUSH
38456: LD_VAR 0 2
38460: PUSH
38461: LD_VAR 0 4
38465: ARRAY
38466: PUSH
38467: LD_VAR 0 2
38471: PUSH
38472: LD_VAR 0 4
38476: ARRAY
38477: PPUSH
38478: CALL_OW 255
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PPUSH
38487: CALL 46135 0 3
38491: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38492: LD_VAR 0 2
38496: PUSH
38497: LD_VAR 0 4
38501: ARRAY
38502: PPUSH
38503: LD_VAR 0 1
38507: PPUSH
38508: CALL_OW 255
38512: PPUSH
38513: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38517: LD_VAR 0 2
38521: PUSH
38522: LD_VAR 0 4
38526: ARRAY
38527: PPUSH
38528: CALL_OW 141
// end ;
38532: GO 38364
38534: POP
38535: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38536: LD_VAR 0 1
38540: PPUSH
38541: LD_EXP 127
38545: PUSH
38546: LD_VAR 0 5
38550: ARRAY
38551: PUSH
38552: LD_INT 0
38554: PLUS
38555: PPUSH
38556: CALL_OW 505
// end ;
38560: LD_VAR 0 3
38564: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38565: LD_INT 0
38567: PPUSH
38568: PPUSH
38569: PPUSH
38570: PPUSH
// if not hack in hackTanks then
38571: LD_VAR 0 1
38575: PUSH
38576: LD_EXP 126
38580: IN
38581: NOT
38582: IFFALSE 38586
// exit ;
38584: GO 38830
// index := GetElementIndex ( hackTanks , hack ) ;
38586: LD_ADDR_VAR 0 4
38590: PUSH
38591: LD_EXP 126
38595: PPUSH
38596: LD_VAR 0 1
38600: PPUSH
38601: CALL 45918 0 2
38605: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38606: LD_ADDR_VAR 0 3
38610: PUSH
38611: DOUBLE
38612: LD_EXP 127
38616: PUSH
38617: LD_VAR 0 4
38621: ARRAY
38622: INC
38623: ST_TO_ADDR
38624: LD_INT 1
38626: PUSH
38627: FOR_DOWNTO
38628: IFFALSE 38804
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38630: LD_ADDR_VAR 0 5
38634: PUSH
38635: LD_EXP 127
38639: PUSH
38640: LD_VAR 0 4
38644: ARRAY
38645: PUSH
38646: LD_VAR 0 3
38650: ARRAY
38651: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38652: LD_VAR 0 5
38656: PUSH
38657: LD_INT 1
38659: ARRAY
38660: PPUSH
38661: CALL_OW 302
38665: NOT
38666: IFTRUE 38694
38668: PUSH
38669: LD_VAR 0 5
38673: PUSH
38674: LD_INT 1
38676: ARRAY
38677: PPUSH
38678: CALL_OW 255
38682: PUSH
38683: LD_VAR 0 1
38687: PPUSH
38688: CALL_OW 255
38692: NONEQUAL
38693: OR
38694: IFFALSE 38802
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38696: LD_VAR 0 5
38700: PUSH
38701: LD_INT 1
38703: ARRAY
38704: PPUSH
38705: CALL_OW 305
38709: IFFALSE 38737
38711: PUSH
38712: LD_VAR 0 5
38716: PUSH
38717: LD_INT 1
38719: ARRAY
38720: PPUSH
38721: CALL_OW 255
38725: PUSH
38726: LD_VAR 0 1
38730: PPUSH
38731: CALL_OW 255
38735: EQUAL
38736: AND
38737: IFFALSE 38761
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38739: LD_VAR 0 5
38743: PUSH
38744: LD_INT 1
38746: ARRAY
38747: PPUSH
38748: LD_VAR 0 5
38752: PUSH
38753: LD_INT 2
38755: ARRAY
38756: PPUSH
38757: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38761: LD_ADDR_EXP 127
38765: PUSH
38766: LD_EXP 127
38770: PPUSH
38771: LD_VAR 0 4
38775: PPUSH
38776: LD_EXP 127
38780: PUSH
38781: LD_VAR 0 4
38785: ARRAY
38786: PPUSH
38787: LD_VAR 0 3
38791: PPUSH
38792: CALL_OW 3
38796: PPUSH
38797: CALL_OW 1
38801: ST_TO_ADDR
// end ; end ;
38802: GO 38627
38804: POP
38805: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38806: LD_VAR 0 1
38810: PPUSH
38811: LD_EXP 127
38815: PUSH
38816: LD_VAR 0 4
38820: ARRAY
38821: PUSH
38822: LD_INT 0
38824: PLUS
38825: PPUSH
38826: CALL_OW 505
// end ;
38830: LD_VAR 0 2
38834: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38835: LD_INT 0
38837: PPUSH
38838: PPUSH
38839: PPUSH
38840: PPUSH
// if not hack in hackTanks then
38841: LD_VAR 0 1
38845: PUSH
38846: LD_EXP 126
38850: IN
38851: NOT
38852: IFFALSE 38856
// exit ;
38854: GO 38941
// index := GetElementIndex ( hackTanks , hack ) ;
38856: LD_ADDR_VAR 0 5
38860: PUSH
38861: LD_EXP 126
38865: PPUSH
38866: LD_VAR 0 1
38870: PPUSH
38871: CALL 45918 0 2
38875: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38876: LD_ADDR_VAR 0 4
38880: PUSH
38881: DOUBLE
38882: LD_INT 1
38884: DEC
38885: ST_TO_ADDR
38886: LD_EXP 127
38890: PUSH
38891: LD_VAR 0 5
38895: ARRAY
38896: PUSH
38897: FOR_TO
38898: IFFALSE 38939
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38900: LD_EXP 127
38904: PUSH
38905: LD_VAR 0 5
38909: ARRAY
38910: PUSH
38911: LD_VAR 0 4
38915: ARRAY
38916: PUSH
38917: LD_INT 1
38919: ARRAY
38920: PUSH
38921: LD_VAR 0 2
38925: EQUAL
38926: IFFALSE 38937
// KillUnit ( vehicle ) ;
38928: LD_VAR 0 2
38932: PPUSH
38933: CALL_OW 66
38937: GO 38897
38939: POP
38940: POP
// end ;
38941: LD_VAR 0 3
38945: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38946: LD_EXP 131
38950: NOT
38951: IFFALSE 38986
38953: GO 38955
38955: DISABLE
// begin initMiner := true ;
38956: LD_ADDR_EXP 131
38960: PUSH
38961: LD_INT 1
38963: ST_TO_ADDR
// minersList := [ ] ;
38964: LD_ADDR_EXP 132
38968: PUSH
38969: EMPTY
38970: ST_TO_ADDR
// minerMinesList := [ ] ;
38971: LD_ADDR_EXP 133
38975: PUSH
38976: EMPTY
38977: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38978: LD_ADDR_EXP 134
38982: PUSH
38983: LD_INT 5
38985: ST_TO_ADDR
// end ;
38986: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38987: LD_EXP 131
38991: IFFALSE 39009
38993: PUSH
38994: LD_INT 34
38996: PUSH
38997: LD_INT 81
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PPUSH
39004: CALL_OW 69
39008: AND
39009: IFFALSE 39472
39011: GO 39013
39013: DISABLE
39014: LD_INT 0
39016: PPUSH
39017: PPUSH
39018: PPUSH
39019: PPUSH
// begin enable ;
39020: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39021: LD_ADDR_VAR 0 1
39025: PUSH
39026: LD_INT 34
39028: PUSH
39029: LD_INT 81
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PPUSH
39036: CALL_OW 69
39040: PUSH
39041: FOR_IN
39042: IFFALSE 39114
// begin if not i in minersList then
39044: LD_VAR 0 1
39048: PUSH
39049: LD_EXP 132
39053: IN
39054: NOT
39055: IFFALSE 39112
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39057: LD_ADDR_EXP 132
39061: PUSH
39062: LD_EXP 132
39066: PPUSH
39067: LD_EXP 132
39071: PUSH
39072: LD_INT 1
39074: PLUS
39075: PPUSH
39076: LD_VAR 0 1
39080: PPUSH
39081: CALL_OW 1
39085: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39086: LD_ADDR_EXP 133
39090: PUSH
39091: LD_EXP 133
39095: PPUSH
39096: LD_EXP 133
39100: PUSH
39101: LD_INT 1
39103: PLUS
39104: PPUSH
39105: EMPTY
39106: PPUSH
39107: CALL_OW 1
39111: ST_TO_ADDR
// end end ;
39112: GO 39041
39114: POP
39115: POP
// for i := minerMinesList downto 1 do
39116: LD_ADDR_VAR 0 1
39120: PUSH
39121: DOUBLE
39122: LD_EXP 133
39126: INC
39127: ST_TO_ADDR
39128: LD_INT 1
39130: PUSH
39131: FOR_DOWNTO
39132: IFFALSE 39470
// begin if IsLive ( minersList [ i ] ) then
39134: LD_EXP 132
39138: PUSH
39139: LD_VAR 0 1
39143: ARRAY
39144: PPUSH
39145: CALL_OW 300
39149: IFFALSE 39177
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39151: LD_EXP 132
39155: PUSH
39156: LD_VAR 0 1
39160: ARRAY
39161: PPUSH
39162: LD_EXP 133
39166: PUSH
39167: LD_VAR 0 1
39171: ARRAY
39172: PPUSH
39173: CALL_OW 505
// if not minerMinesList [ i ] then
39177: LD_EXP 133
39181: PUSH
39182: LD_VAR 0 1
39186: ARRAY
39187: NOT
39188: IFFALSE 39192
// continue ;
39190: GO 39131
// for j := minerMinesList [ i ] downto 1 do
39192: LD_ADDR_VAR 0 2
39196: PUSH
39197: DOUBLE
39198: LD_EXP 133
39202: PUSH
39203: LD_VAR 0 1
39207: ARRAY
39208: INC
39209: ST_TO_ADDR
39210: LD_INT 1
39212: PUSH
39213: FOR_DOWNTO
39214: IFFALSE 39466
// begin side := GetSide ( minersList [ i ] ) ;
39216: LD_ADDR_VAR 0 3
39220: PUSH
39221: LD_EXP 132
39225: PUSH
39226: LD_VAR 0 1
39230: ARRAY
39231: PPUSH
39232: CALL_OW 255
39236: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39237: LD_ADDR_VAR 0 4
39241: PUSH
39242: LD_EXP 133
39246: PUSH
39247: LD_VAR 0 1
39251: ARRAY
39252: PUSH
39253: LD_VAR 0 2
39257: ARRAY
39258: PUSH
39259: LD_INT 1
39261: ARRAY
39262: PPUSH
39263: LD_EXP 133
39267: PUSH
39268: LD_VAR 0 1
39272: ARRAY
39273: PUSH
39274: LD_VAR 0 2
39278: ARRAY
39279: PUSH
39280: LD_INT 2
39282: ARRAY
39283: PPUSH
39284: CALL_OW 428
39288: ST_TO_ADDR
// if not tmp then
39289: LD_VAR 0 4
39293: NOT
39294: IFFALSE 39298
// continue ;
39296: GO 39213
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39298: LD_VAR 0 4
39302: PUSH
39303: LD_INT 81
39305: PUSH
39306: LD_VAR 0 3
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PPUSH
39315: CALL_OW 69
39319: IN
39320: IFFALSE 39370
39322: PUSH
39323: LD_EXP 133
39327: PUSH
39328: LD_VAR 0 1
39332: ARRAY
39333: PUSH
39334: LD_VAR 0 2
39338: ARRAY
39339: PUSH
39340: LD_INT 1
39342: ARRAY
39343: PPUSH
39344: LD_EXP 133
39348: PUSH
39349: LD_VAR 0 1
39353: ARRAY
39354: PUSH
39355: LD_VAR 0 2
39359: ARRAY
39360: PUSH
39361: LD_INT 2
39363: ARRAY
39364: PPUSH
39365: CALL_OW 458
39369: AND
39370: IFFALSE 39464
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39372: LD_EXP 133
39376: PUSH
39377: LD_VAR 0 1
39381: ARRAY
39382: PUSH
39383: LD_VAR 0 2
39387: ARRAY
39388: PUSH
39389: LD_INT 1
39391: ARRAY
39392: PPUSH
39393: LD_EXP 133
39397: PUSH
39398: LD_VAR 0 1
39402: ARRAY
39403: PUSH
39404: LD_VAR 0 2
39408: ARRAY
39409: PUSH
39410: LD_INT 2
39412: ARRAY
39413: PPUSH
39414: LD_VAR 0 3
39418: PPUSH
39419: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39423: LD_ADDR_EXP 133
39427: PUSH
39428: LD_EXP 133
39432: PPUSH
39433: LD_VAR 0 1
39437: PPUSH
39438: LD_EXP 133
39442: PUSH
39443: LD_VAR 0 1
39447: ARRAY
39448: PPUSH
39449: LD_VAR 0 2
39453: PPUSH
39454: CALL_OW 3
39458: PPUSH
39459: CALL_OW 1
39463: ST_TO_ADDR
// end ; end ;
39464: GO 39213
39466: POP
39467: POP
// end ;
39468: GO 39131
39470: POP
39471: POP
// end ;
39472: PPOPN 4
39474: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39475: LD_INT 0
39477: PPUSH
39478: PPUSH
// result := false ;
39479: LD_ADDR_VAR 0 4
39483: PUSH
39484: LD_INT 0
39486: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39487: LD_VAR 0 1
39491: PPUSH
39492: CALL_OW 264
39496: PUSH
39497: LD_INT 81
39499: EQUAL
39500: NOT
39501: IFFALSE 39505
// exit ;
39503: GO 39749
// index := GetElementIndex ( minersList , unit ) ;
39505: LD_ADDR_VAR 0 5
39509: PUSH
39510: LD_EXP 132
39514: PPUSH
39515: LD_VAR 0 1
39519: PPUSH
39520: CALL 45918 0 2
39524: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39525: LD_EXP 133
39529: PUSH
39530: LD_VAR 0 5
39534: ARRAY
39535: PUSH
39536: LD_EXP 134
39540: GREATEREQUAL
39541: IFFALSE 39545
// exit ;
39543: GO 39749
// ComMoveXY ( unit , x , y ) ;
39545: LD_VAR 0 1
39549: PPUSH
39550: LD_VAR 0 2
39554: PPUSH
39555: LD_VAR 0 3
39559: PPUSH
39560: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39564: LD_INT 35
39566: PPUSH
39567: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39571: LD_VAR 0 1
39575: PPUSH
39576: LD_VAR 0 2
39580: PPUSH
39581: LD_VAR 0 3
39585: PPUSH
39586: CALL 77964 0 3
39590: NOT
39591: IFFALSE 39604
39593: PUSH
39594: LD_VAR 0 1
39598: PPUSH
39599: CALL_OW 314
39603: AND
39604: IFFALSE 39608
// exit ;
39606: GO 39749
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39608: LD_VAR 0 2
39612: PPUSH
39613: LD_VAR 0 3
39617: PPUSH
39618: CALL_OW 428
39622: PUSH
39623: LD_VAR 0 1
39627: EQUAL
39628: IFFALSE 39642
39630: PUSH
39631: LD_VAR 0 1
39635: PPUSH
39636: CALL_OW 314
39640: NOT
39641: AND
39642: IFFALSE 39564
// PlaySoundXY ( x , y , PlantMine ) ;
39644: LD_VAR 0 2
39648: PPUSH
39649: LD_VAR 0 3
39653: PPUSH
39654: LD_STRING PlantMine
39656: PPUSH
39657: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39661: LD_VAR 0 2
39665: PPUSH
39666: LD_VAR 0 3
39670: PPUSH
39671: LD_VAR 0 1
39675: PPUSH
39676: CALL_OW 255
39680: PPUSH
39681: LD_INT 0
39683: PPUSH
39684: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39688: LD_ADDR_EXP 133
39692: PUSH
39693: LD_EXP 133
39697: PPUSH
39698: LD_VAR 0 5
39702: PUSH
39703: LD_EXP 133
39707: PUSH
39708: LD_VAR 0 5
39712: ARRAY
39713: PUSH
39714: LD_INT 1
39716: PLUS
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PPUSH
39722: LD_VAR 0 2
39726: PUSH
39727: LD_VAR 0 3
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PPUSH
39736: CALL 46135 0 3
39740: ST_TO_ADDR
// result := true ;
39741: LD_ADDR_VAR 0 4
39745: PUSH
39746: LD_INT 1
39748: ST_TO_ADDR
// end ;
39749: LD_VAR 0 4
39753: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39754: LD_INT 0
39756: PPUSH
39757: PPUSH
39758: PPUSH
// if not unit in minersList then
39759: LD_VAR 0 1
39763: PUSH
39764: LD_EXP 132
39768: IN
39769: NOT
39770: IFFALSE 39774
// exit ;
39772: GO 40168
// index := GetElementIndex ( minersList , unit ) ;
39774: LD_ADDR_VAR 0 6
39778: PUSH
39779: LD_EXP 132
39783: PPUSH
39784: LD_VAR 0 1
39788: PPUSH
39789: CALL 45918 0 2
39793: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39794: LD_ADDR_VAR 0 5
39798: PUSH
39799: DOUBLE
39800: LD_EXP 133
39804: PUSH
39805: LD_VAR 0 6
39809: ARRAY
39810: INC
39811: ST_TO_ADDR
39812: LD_INT 1
39814: PUSH
39815: FOR_DOWNTO
39816: IFFALSE 39979
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39818: LD_EXP 133
39822: PUSH
39823: LD_VAR 0 6
39827: ARRAY
39828: PUSH
39829: LD_VAR 0 5
39833: ARRAY
39834: PUSH
39835: LD_INT 1
39837: ARRAY
39838: PUSH
39839: LD_VAR 0 2
39843: EQUAL
39844: IFFALSE 39874
39846: PUSH
39847: LD_EXP 133
39851: PUSH
39852: LD_VAR 0 6
39856: ARRAY
39857: PUSH
39858: LD_VAR 0 5
39862: ARRAY
39863: PUSH
39864: LD_INT 2
39866: ARRAY
39867: PUSH
39868: LD_VAR 0 3
39872: EQUAL
39873: AND
39874: IFFALSE 39977
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39876: LD_EXP 133
39880: PUSH
39881: LD_VAR 0 6
39885: ARRAY
39886: PUSH
39887: LD_VAR 0 5
39891: ARRAY
39892: PUSH
39893: LD_INT 1
39895: ARRAY
39896: PPUSH
39897: LD_EXP 133
39901: PUSH
39902: LD_VAR 0 6
39906: ARRAY
39907: PUSH
39908: LD_VAR 0 5
39912: ARRAY
39913: PUSH
39914: LD_INT 2
39916: ARRAY
39917: PPUSH
39918: LD_VAR 0 1
39922: PPUSH
39923: CALL_OW 255
39927: PPUSH
39928: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39932: LD_ADDR_EXP 133
39936: PUSH
39937: LD_EXP 133
39941: PPUSH
39942: LD_VAR 0 6
39946: PPUSH
39947: LD_EXP 133
39951: PUSH
39952: LD_VAR 0 6
39956: ARRAY
39957: PPUSH
39958: LD_VAR 0 5
39962: PPUSH
39963: CALL_OW 3
39967: PPUSH
39968: CALL_OW 1
39972: ST_TO_ADDR
// exit ;
39973: POP
39974: POP
39975: GO 40168
// end ; end ;
39977: GO 39815
39979: POP
39980: POP
// for i := minerMinesList [ index ] downto 1 do
39981: LD_ADDR_VAR 0 5
39985: PUSH
39986: DOUBLE
39987: LD_EXP 133
39991: PUSH
39992: LD_VAR 0 6
39996: ARRAY
39997: INC
39998: ST_TO_ADDR
39999: LD_INT 1
40001: PUSH
40002: FOR_DOWNTO
40003: IFFALSE 40166
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40005: LD_EXP 133
40009: PUSH
40010: LD_VAR 0 6
40014: ARRAY
40015: PUSH
40016: LD_VAR 0 5
40020: ARRAY
40021: PUSH
40022: LD_INT 1
40024: ARRAY
40025: PPUSH
40026: LD_EXP 133
40030: PUSH
40031: LD_VAR 0 6
40035: ARRAY
40036: PUSH
40037: LD_VAR 0 5
40041: ARRAY
40042: PUSH
40043: LD_INT 2
40045: ARRAY
40046: PPUSH
40047: LD_VAR 0 2
40051: PPUSH
40052: LD_VAR 0 3
40056: PPUSH
40057: CALL_OW 298
40061: PUSH
40062: LD_INT 6
40064: LESS
40065: IFFALSE 40164
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40067: LD_EXP 133
40071: PUSH
40072: LD_VAR 0 6
40076: ARRAY
40077: PUSH
40078: LD_VAR 0 5
40082: ARRAY
40083: PUSH
40084: LD_INT 1
40086: ARRAY
40087: PPUSH
40088: LD_EXP 133
40092: PUSH
40093: LD_VAR 0 6
40097: ARRAY
40098: PUSH
40099: LD_VAR 0 5
40103: ARRAY
40104: PUSH
40105: LD_INT 2
40107: ARRAY
40108: PPUSH
40109: LD_VAR 0 1
40113: PPUSH
40114: CALL_OW 255
40118: PPUSH
40119: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40123: LD_ADDR_EXP 133
40127: PUSH
40128: LD_EXP 133
40132: PPUSH
40133: LD_VAR 0 6
40137: PPUSH
40138: LD_EXP 133
40142: PUSH
40143: LD_VAR 0 6
40147: ARRAY
40148: PPUSH
40149: LD_VAR 0 5
40153: PPUSH
40154: CALL_OW 3
40158: PPUSH
40159: CALL_OW 1
40163: ST_TO_ADDR
// end ; end ;
40164: GO 40002
40166: POP
40167: POP
// end ;
40168: LD_VAR 0 4
40172: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40173: LD_INT 0
40175: PPUSH
40176: PPUSH
40177: PPUSH
40178: PPUSH
40179: PPUSH
40180: PPUSH
40181: PPUSH
40182: PPUSH
40183: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40184: LD_VAR 0 1
40188: PPUSH
40189: CALL_OW 264
40193: PUSH
40194: LD_INT 81
40196: EQUAL
40197: NOT
40198: IFTRUE 40213
40200: PUSH
40201: LD_VAR 0 1
40205: PUSH
40206: LD_EXP 132
40210: IN
40211: NOT
40212: OR
40213: IFFALSE 40217
// exit ;
40215: GO 40543
// index := GetElementIndex ( minersList , unit ) ;
40217: LD_ADDR_VAR 0 6
40221: PUSH
40222: LD_EXP 132
40226: PPUSH
40227: LD_VAR 0 1
40231: PPUSH
40232: CALL 45918 0 2
40236: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40237: LD_ADDR_VAR 0 8
40241: PUSH
40242: LD_EXP 134
40246: PUSH
40247: LD_EXP 133
40251: PUSH
40252: LD_VAR 0 6
40256: ARRAY
40257: MINUS
40258: ST_TO_ADDR
// if not minesFreeAmount then
40259: LD_VAR 0 8
40263: NOT
40264: IFFALSE 40268
// exit ;
40266: GO 40543
// tmp := [ ] ;
40268: LD_ADDR_VAR 0 7
40272: PUSH
40273: EMPTY
40274: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40275: LD_ADDR_VAR 0 5
40279: PUSH
40280: DOUBLE
40281: LD_INT 1
40283: DEC
40284: ST_TO_ADDR
40285: LD_VAR 0 8
40289: PUSH
40290: FOR_TO
40291: IFFALSE 40490
// begin _d := rand ( 0 , 5 ) ;
40293: LD_ADDR_VAR 0 11
40297: PUSH
40298: LD_INT 0
40300: PPUSH
40301: LD_INT 5
40303: PPUSH
40304: CALL_OW 12
40308: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40309: LD_ADDR_VAR 0 12
40313: PUSH
40314: LD_INT 2
40316: PPUSH
40317: LD_INT 6
40319: PPUSH
40320: CALL_OW 12
40324: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40325: LD_ADDR_VAR 0 9
40329: PUSH
40330: LD_VAR 0 2
40334: PPUSH
40335: LD_VAR 0 11
40339: PPUSH
40340: LD_VAR 0 12
40344: PPUSH
40345: CALL_OW 272
40349: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40350: LD_ADDR_VAR 0 10
40354: PUSH
40355: LD_VAR 0 3
40359: PPUSH
40360: LD_VAR 0 11
40364: PPUSH
40365: LD_VAR 0 12
40369: PPUSH
40370: CALL_OW 273
40374: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40375: LD_VAR 0 9
40379: PPUSH
40380: LD_VAR 0 10
40384: PPUSH
40385: CALL_OW 488
40389: IFFALSE 40413
40391: PUSH
40392: LD_VAR 0 9
40396: PUSH
40397: LD_VAR 0 10
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_VAR 0 7
40410: IN
40411: NOT
40412: AND
40413: IFFALSE 40432
40415: PUSH
40416: LD_VAR 0 9
40420: PPUSH
40421: LD_VAR 0 10
40425: PPUSH
40426: CALL_OW 458
40430: NOT
40431: AND
40432: IFFALSE 40474
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40434: LD_ADDR_VAR 0 7
40438: PUSH
40439: LD_VAR 0 7
40443: PPUSH
40444: LD_VAR 0 7
40448: PUSH
40449: LD_INT 1
40451: PLUS
40452: PPUSH
40453: LD_VAR 0 9
40457: PUSH
40458: LD_VAR 0 10
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PPUSH
40467: CALL_OW 1
40471: ST_TO_ADDR
40472: GO 40488
// i := i - 1 ;
40474: LD_ADDR_VAR 0 5
40478: PUSH
40479: LD_VAR 0 5
40483: PUSH
40484: LD_INT 1
40486: MINUS
40487: ST_TO_ADDR
// end ;
40488: GO 40290
40490: POP
40491: POP
// for i in tmp do
40492: LD_ADDR_VAR 0 5
40496: PUSH
40497: LD_VAR 0 7
40501: PUSH
40502: FOR_IN
40503: IFFALSE 40541
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40505: LD_VAR 0 1
40509: PPUSH
40510: LD_VAR 0 5
40514: PUSH
40515: LD_INT 1
40517: ARRAY
40518: PPUSH
40519: LD_VAR 0 5
40523: PUSH
40524: LD_INT 2
40526: ARRAY
40527: PPUSH
40528: CALL 39475 0 3
40532: NOT
40533: IFFALSE 40539
// exit ;
40535: POP
40536: POP
40537: GO 40543
40539: GO 40502
40541: POP
40542: POP
// end ;
40543: LD_VAR 0 4
40547: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40548: LD_INT 0
40550: PPUSH
40551: PPUSH
40552: PPUSH
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
40557: PPUSH
40558: PPUSH
// if GetClass ( unit ) <> class_sniper then
40559: LD_VAR 0 1
40563: PPUSH
40564: CALL_OW 257
40568: PUSH
40569: LD_INT 5
40571: NONEQUAL
40572: IFFALSE 40576
// exit ;
40574: GO 41046
// dist := 8 ;
40576: LD_ADDR_VAR 0 5
40580: PUSH
40581: LD_INT 8
40583: ST_TO_ADDR
// viewRange := 12 ;
40584: LD_ADDR_VAR 0 8
40588: PUSH
40589: LD_INT 12
40591: ST_TO_ADDR
// side := GetSide ( unit ) ;
40592: LD_ADDR_VAR 0 6
40596: PUSH
40597: LD_VAR 0 1
40601: PPUSH
40602: CALL_OW 255
40606: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40607: LD_INT 61
40609: PPUSH
40610: LD_VAR 0 6
40614: PPUSH
40615: CALL_OW 321
40619: PUSH
40620: LD_INT 2
40622: EQUAL
40623: IFFALSE 40633
// viewRange := 16 ;
40625: LD_ADDR_VAR 0 8
40629: PUSH
40630: LD_INT 16
40632: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40633: LD_VAR 0 1
40637: PPUSH
40638: LD_VAR 0 2
40642: PPUSH
40643: LD_VAR 0 3
40647: PPUSH
40648: CALL_OW 297
40652: PUSH
40653: LD_VAR 0 5
40657: GREATER
40658: IFFALSE 40737
// begin ComMoveXY ( unit , x , y ) ;
40660: LD_VAR 0 1
40664: PPUSH
40665: LD_VAR 0 2
40669: PPUSH
40670: LD_VAR 0 3
40674: PPUSH
40675: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40679: LD_INT 35
40681: PPUSH
40682: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40686: LD_VAR 0 1
40690: PPUSH
40691: LD_VAR 0 2
40695: PPUSH
40696: LD_VAR 0 3
40700: PPUSH
40701: CALL 77964 0 3
40705: NOT
40706: IFFALSE 40710
// exit ;
40708: GO 41046
// until GetDistUnitXY ( unit , x , y ) < dist ;
40710: LD_VAR 0 1
40714: PPUSH
40715: LD_VAR 0 2
40719: PPUSH
40720: LD_VAR 0 3
40724: PPUSH
40725: CALL_OW 297
40729: PUSH
40730: LD_VAR 0 5
40734: LESS
40735: IFFALSE 40679
// end ; ComTurnXY ( unit , x , y ) ;
40737: LD_VAR 0 1
40741: PPUSH
40742: LD_VAR 0 2
40746: PPUSH
40747: LD_VAR 0 3
40751: PPUSH
40752: CALL_OW 118
// repeat if Multiplayer then
40756: LD_OWVAR 4
40760: IFFALSE 40771
// wait ( 35 ) else
40762: LD_INT 35
40764: PPUSH
40765: CALL_OW 67
40769: GO 40778
// wait ( 5 ) ;
40771: LD_INT 5
40773: PPUSH
40774: CALL_OW 67
// _d := GetDir ( unit ) ;
40778: LD_ADDR_VAR 0 11
40782: PUSH
40783: LD_VAR 0 1
40787: PPUSH
40788: CALL_OW 254
40792: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
40793: LD_ADDR_VAR 0 7
40797: PUSH
40798: LD_VAR 0 1
40802: PPUSH
40803: CALL_OW 250
40807: PPUSH
40808: LD_VAR 0 1
40812: PPUSH
40813: CALL_OW 251
40817: PPUSH
40818: LD_VAR 0 2
40822: PPUSH
40823: LD_VAR 0 3
40827: PPUSH
40828: CALL 80600 0 4
40832: ST_TO_ADDR
// until dir = _d ;
40833: LD_VAR 0 7
40837: PUSH
40838: LD_VAR 0 11
40842: EQUAL
40843: IFFALSE 40756
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
40845: LD_ADDR_VAR 0 9
40849: PUSH
40850: LD_VAR 0 1
40854: PPUSH
40855: CALL_OW 250
40859: PPUSH
40860: LD_VAR 0 7
40864: PPUSH
40865: LD_VAR 0 5
40869: PPUSH
40870: CALL_OW 272
40874: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
40875: LD_ADDR_VAR 0 10
40879: PUSH
40880: LD_VAR 0 1
40884: PPUSH
40885: CALL_OW 251
40889: PPUSH
40890: LD_VAR 0 7
40894: PPUSH
40895: LD_VAR 0 5
40899: PPUSH
40900: CALL_OW 273
40904: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40905: LD_VAR 0 9
40909: PPUSH
40910: LD_VAR 0 10
40914: PPUSH
40915: CALL_OW 488
40919: NOT
40920: IFFALSE 40924
// exit ;
40922: GO 41046
// ComAnimCustom ( unit , 1 ) ;
40924: LD_VAR 0 1
40928: PPUSH
40929: LD_INT 1
40931: PPUSH
40932: CALL_OW 592
// p := 0 ;
40936: LD_ADDR_VAR 0 12
40940: PUSH
40941: LD_INT 0
40943: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40944: LD_VAR 0 9
40948: PPUSH
40949: LD_VAR 0 10
40953: PPUSH
40954: LD_VAR 0 6
40958: PPUSH
40959: LD_VAR 0 8
40963: PPUSH
40964: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
40968: LD_INT 35
40970: PPUSH
40971: CALL_OW 67
// p := Inc ( p ) ;
40975: LD_ADDR_VAR 0 12
40979: PUSH
40980: LD_VAR 0 12
40984: PPUSH
40985: CALL 80556 0 1
40989: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
40990: LD_VAR 0 12
40994: PUSH
40995: LD_INT 3
40997: EQUAL
40998: IFTRUE 41012
41000: PUSH
41001: LD_VAR 0 1
41005: PPUSH
41006: CALL_OW 302
41010: NOT
41011: OR
41012: IFTRUE 41025
41014: PUSH
41015: LD_VAR 0 1
41019: PPUSH
41020: CALL_OW 301
41024: OR
41025: IFFALSE 40968
// RemoveSeeing ( _x , _y , side ) ;
41027: LD_VAR 0 9
41031: PPUSH
41032: LD_VAR 0 10
41036: PPUSH
41037: LD_VAR 0 6
41041: PPUSH
41042: CALL_OW 331
// end ; end_of_file
41046: LD_VAR 0 4
41050: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41051: LD_INT 0
41053: PPUSH
41054: PPUSH
// if exist_mode then
41055: LD_VAR 0 2
41059: IFFALSE 41105
// begin unit := CreateCharacter ( prefix & ident ) ;
41061: LD_ADDR_VAR 0 5
41065: PUSH
41066: LD_VAR 0 3
41070: PUSH
41071: LD_VAR 0 1
41075: STR
41076: PPUSH
41077: CALL_OW 34
41081: ST_TO_ADDR
// if unit then
41082: LD_VAR 0 5
41086: IFFALSE 41103
// DeleteCharacters ( prefix & ident ) ;
41088: LD_VAR 0 3
41092: PUSH
41093: LD_VAR 0 1
41097: STR
41098: PPUSH
41099: CALL_OW 40
// end else
41103: GO 41120
// unit := NewCharacter ( ident ) ;
41105: LD_ADDR_VAR 0 5
41109: PUSH
41110: LD_VAR 0 1
41114: PPUSH
41115: CALL_OW 25
41119: ST_TO_ADDR
// result := unit ;
41120: LD_ADDR_VAR 0 4
41124: PUSH
41125: LD_VAR 0 5
41129: ST_TO_ADDR
// end ;
41130: LD_VAR 0 4
41134: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
41135: LD_INT 0
41137: PPUSH
41138: PPUSH
// if exist_mode then
41139: LD_VAR 0 2
41143: IFFALSE 41168
// unit := CreateCharacter ( prefix & ident ) else
41145: LD_ADDR_VAR 0 5
41149: PUSH
41150: LD_VAR 0 3
41154: PUSH
41155: LD_VAR 0 1
41159: STR
41160: PPUSH
41161: CALL_OW 34
41165: ST_TO_ADDR
41166: GO 41183
// unit := NewCharacter ( ident ) ;
41168: LD_ADDR_VAR 0 5
41172: PUSH
41173: LD_VAR 0 1
41177: PPUSH
41178: CALL_OW 25
41182: ST_TO_ADDR
// result := unit ;
41183: LD_ADDR_VAR 0 4
41187: PUSH
41188: LD_VAR 0 5
41192: ST_TO_ADDR
// end ;
41193: LD_VAR 0 4
41197: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41198: LD_INT 0
41200: PPUSH
41201: PPUSH
// if not side or not nation then
41202: LD_VAR 0 1
41206: NOT
41207: IFTRUE 41216
41209: PUSH
41210: LD_VAR 0 2
41214: NOT
41215: OR
41216: IFFALSE 41220
// exit ;
41218: GO 41990
// case nation of nation_american :
41220: LD_VAR 0 2
41224: PUSH
41225: LD_INT 1
41227: DOUBLE
41228: EQUAL
41229: IFTRUE 41233
41231: GO 41447
41233: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41234: LD_ADDR_VAR 0 4
41238: PUSH
41239: LD_INT 35
41241: PUSH
41242: LD_INT 45
41244: PUSH
41245: LD_INT 46
41247: PUSH
41248: LD_INT 47
41250: PUSH
41251: LD_INT 82
41253: PUSH
41254: LD_INT 83
41256: PUSH
41257: LD_INT 84
41259: PUSH
41260: LD_INT 85
41262: PUSH
41263: LD_INT 86
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: LD_INT 2
41271: PUSH
41272: LD_INT 6
41274: PUSH
41275: LD_INT 15
41277: PUSH
41278: LD_INT 16
41280: PUSH
41281: LD_INT 7
41283: PUSH
41284: LD_INT 12
41286: PUSH
41287: LD_INT 13
41289: PUSH
41290: LD_INT 10
41292: PUSH
41293: LD_INT 14
41295: PUSH
41296: LD_INT 20
41298: PUSH
41299: LD_INT 21
41301: PUSH
41302: LD_INT 22
41304: PUSH
41305: LD_INT 25
41307: PUSH
41308: LD_INT 32
41310: PUSH
41311: LD_INT 27
41313: PUSH
41314: LD_INT 36
41316: PUSH
41317: LD_INT 69
41319: PUSH
41320: LD_INT 39
41322: PUSH
41323: LD_INT 34
41325: PUSH
41326: LD_INT 40
41328: PUSH
41329: LD_INT 48
41331: PUSH
41332: LD_INT 49
41334: PUSH
41335: LD_INT 50
41337: PUSH
41338: LD_INT 51
41340: PUSH
41341: LD_INT 52
41343: PUSH
41344: LD_INT 53
41346: PUSH
41347: LD_INT 54
41349: PUSH
41350: LD_INT 55
41352: PUSH
41353: LD_INT 56
41355: PUSH
41356: LD_INT 57
41358: PUSH
41359: LD_INT 58
41361: PUSH
41362: LD_INT 59
41364: PUSH
41365: LD_INT 60
41367: PUSH
41368: LD_INT 61
41370: PUSH
41371: LD_INT 62
41373: PUSH
41374: LD_INT 80
41376: PUSH
41377: LD_INT 82
41379: PUSH
41380: LD_INT 83
41382: PUSH
41383: LD_INT 84
41385: PUSH
41386: LD_INT 85
41388: PUSH
41389: LD_INT 86
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: ST_TO_ADDR
41445: GO 41912
41447: LD_INT 2
41449: DOUBLE
41450: EQUAL
41451: IFTRUE 41455
41453: GO 41681
41455: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41456: LD_ADDR_VAR 0 4
41460: PUSH
41461: LD_INT 35
41463: PUSH
41464: LD_INT 45
41466: PUSH
41467: LD_INT 46
41469: PUSH
41470: LD_INT 47
41472: PUSH
41473: LD_INT 82
41475: PUSH
41476: LD_INT 83
41478: PUSH
41479: LD_INT 84
41481: PUSH
41482: LD_INT 85
41484: PUSH
41485: LD_INT 87
41487: PUSH
41488: LD_INT 70
41490: PUSH
41491: LD_INT 1
41493: PUSH
41494: LD_INT 11
41496: PUSH
41497: LD_INT 3
41499: PUSH
41500: LD_INT 4
41502: PUSH
41503: LD_INT 5
41505: PUSH
41506: LD_INT 6
41508: PUSH
41509: LD_INT 15
41511: PUSH
41512: LD_INT 18
41514: PUSH
41515: LD_INT 7
41517: PUSH
41518: LD_INT 17
41520: PUSH
41521: LD_INT 8
41523: PUSH
41524: LD_INT 20
41526: PUSH
41527: LD_INT 21
41529: PUSH
41530: LD_INT 22
41532: PUSH
41533: LD_INT 72
41535: PUSH
41536: LD_INT 26
41538: PUSH
41539: LD_INT 69
41541: PUSH
41542: LD_INT 39
41544: PUSH
41545: LD_INT 40
41547: PUSH
41548: LD_INT 41
41550: PUSH
41551: LD_INT 42
41553: PUSH
41554: LD_INT 43
41556: PUSH
41557: LD_INT 48
41559: PUSH
41560: LD_INT 49
41562: PUSH
41563: LD_INT 50
41565: PUSH
41566: LD_INT 51
41568: PUSH
41569: LD_INT 52
41571: PUSH
41572: LD_INT 53
41574: PUSH
41575: LD_INT 54
41577: PUSH
41578: LD_INT 55
41580: PUSH
41581: LD_INT 56
41583: PUSH
41584: LD_INT 60
41586: PUSH
41587: LD_INT 61
41589: PUSH
41590: LD_INT 62
41592: PUSH
41593: LD_INT 66
41595: PUSH
41596: LD_INT 67
41598: PUSH
41599: LD_INT 68
41601: PUSH
41602: LD_INT 81
41604: PUSH
41605: LD_INT 82
41607: PUSH
41608: LD_INT 83
41610: PUSH
41611: LD_INT 84
41613: PUSH
41614: LD_INT 85
41616: PUSH
41617: LD_INT 87
41619: PUSH
41620: LD_INT 88
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: ST_TO_ADDR
41679: GO 41912
41681: LD_INT 3
41683: DOUBLE
41684: EQUAL
41685: IFTRUE 41689
41687: GO 41911
41689: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41690: LD_ADDR_VAR 0 4
41694: PUSH
41695: LD_INT 46
41697: PUSH
41698: LD_INT 47
41700: PUSH
41701: LD_INT 1
41703: PUSH
41704: LD_INT 2
41706: PUSH
41707: LD_INT 82
41709: PUSH
41710: LD_INT 83
41712: PUSH
41713: LD_INT 84
41715: PUSH
41716: LD_INT 85
41718: PUSH
41719: LD_INT 86
41721: PUSH
41722: LD_INT 11
41724: PUSH
41725: LD_INT 9
41727: PUSH
41728: LD_INT 20
41730: PUSH
41731: LD_INT 19
41733: PUSH
41734: LD_INT 21
41736: PUSH
41737: LD_INT 24
41739: PUSH
41740: LD_INT 22
41742: PUSH
41743: LD_INT 25
41745: PUSH
41746: LD_INT 28
41748: PUSH
41749: LD_INT 29
41751: PUSH
41752: LD_INT 30
41754: PUSH
41755: LD_INT 31
41757: PUSH
41758: LD_INT 37
41760: PUSH
41761: LD_INT 38
41763: PUSH
41764: LD_INT 32
41766: PUSH
41767: LD_INT 27
41769: PUSH
41770: LD_INT 33
41772: PUSH
41773: LD_INT 69
41775: PUSH
41776: LD_INT 39
41778: PUSH
41779: LD_INT 34
41781: PUSH
41782: LD_INT 40
41784: PUSH
41785: LD_INT 71
41787: PUSH
41788: LD_INT 23
41790: PUSH
41791: LD_INT 44
41793: PUSH
41794: LD_INT 48
41796: PUSH
41797: LD_INT 49
41799: PUSH
41800: LD_INT 50
41802: PUSH
41803: LD_INT 51
41805: PUSH
41806: LD_INT 52
41808: PUSH
41809: LD_INT 53
41811: PUSH
41812: LD_INT 54
41814: PUSH
41815: LD_INT 55
41817: PUSH
41818: LD_INT 56
41820: PUSH
41821: LD_INT 57
41823: PUSH
41824: LD_INT 58
41826: PUSH
41827: LD_INT 59
41829: PUSH
41830: LD_INT 63
41832: PUSH
41833: LD_INT 64
41835: PUSH
41836: LD_INT 65
41838: PUSH
41839: LD_INT 82
41841: PUSH
41842: LD_INT 83
41844: PUSH
41845: LD_INT 84
41847: PUSH
41848: LD_INT 85
41850: PUSH
41851: LD_INT 86
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: ST_TO_ADDR
41909: GO 41912
41911: POP
// if state > - 1 and state < 3 then
41912: LD_VAR 0 3
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: GREATER
41921: IFFALSE 41933
41923: PUSH
41924: LD_VAR 0 3
41928: PUSH
41929: LD_INT 3
41931: LESS
41932: AND
41933: IFFALSE 41990
// for i in result do
41935: LD_ADDR_VAR 0 5
41939: PUSH
41940: LD_VAR 0 4
41944: PUSH
41945: FOR_IN
41946: IFFALSE 41988
// if GetTech ( i , side ) <> state then
41948: LD_VAR 0 5
41952: PPUSH
41953: LD_VAR 0 1
41957: PPUSH
41958: CALL_OW 321
41962: PUSH
41963: LD_VAR 0 3
41967: NONEQUAL
41968: IFFALSE 41986
// result := result diff i ;
41970: LD_ADDR_VAR 0 4
41974: PUSH
41975: LD_VAR 0 4
41979: PUSH
41980: LD_VAR 0 5
41984: DIFF
41985: ST_TO_ADDR
41986: GO 41945
41988: POP
41989: POP
// end ;
41990: LD_VAR 0 4
41994: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41995: LD_INT 0
41997: PPUSH
41998: PPUSH
41999: PPUSH
// result := true ;
42000: LD_ADDR_VAR 0 3
42004: PUSH
42005: LD_INT 1
42007: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42008: LD_ADDR_VAR 0 5
42012: PUSH
42013: LD_VAR 0 2
42017: PPUSH
42018: CALL_OW 480
42022: ST_TO_ADDR
// if not tmp then
42023: LD_VAR 0 5
42027: NOT
42028: IFFALSE 42032
// exit ;
42030: GO 42081
// for i in tmp do
42032: LD_ADDR_VAR 0 4
42036: PUSH
42037: LD_VAR 0 5
42041: PUSH
42042: FOR_IN
42043: IFFALSE 42079
// if GetTech ( i , side ) <> state_researched then
42045: LD_VAR 0 4
42049: PPUSH
42050: LD_VAR 0 1
42054: PPUSH
42055: CALL_OW 321
42059: PUSH
42060: LD_INT 2
42062: NONEQUAL
42063: IFFALSE 42077
// begin result := false ;
42065: LD_ADDR_VAR 0 3
42069: PUSH
42070: LD_INT 0
42072: ST_TO_ADDR
// exit ;
42073: POP
42074: POP
42075: GO 42081
// end ;
42077: GO 42042
42079: POP
42080: POP
// end ;
42081: LD_VAR 0 3
42085: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42086: LD_INT 0
42088: PPUSH
42089: PPUSH
42090: PPUSH
42091: PPUSH
42092: PPUSH
42093: PPUSH
42094: PPUSH
42095: PPUSH
42096: PPUSH
42097: PPUSH
42098: PPUSH
42099: PPUSH
42100: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42101: LD_VAR 0 1
42105: NOT
42106: IFTRUE 42123
42108: PUSH
42109: LD_VAR 0 1
42113: PPUSH
42114: CALL_OW 257
42118: PUSH
42119: LD_INT 9
42121: NONEQUAL
42122: OR
42123: IFFALSE 42127
// exit ;
42125: GO 42706
// side := GetSide ( unit ) ;
42127: LD_ADDR_VAR 0 9
42131: PUSH
42132: LD_VAR 0 1
42136: PPUSH
42137: CALL_OW 255
42141: ST_TO_ADDR
// tech_space := tech_spacanom ;
42142: LD_ADDR_VAR 0 12
42146: PUSH
42147: LD_INT 29
42149: ST_TO_ADDR
// tech_time := tech_taurad ;
42150: LD_ADDR_VAR 0 13
42154: PUSH
42155: LD_INT 28
42157: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42158: LD_ADDR_VAR 0 11
42162: PUSH
42163: LD_VAR 0 1
42167: PPUSH
42168: CALL_OW 310
42172: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42173: LD_VAR 0 11
42177: PPUSH
42178: CALL_OW 247
42182: PUSH
42183: LD_INT 2
42185: EQUAL
42186: IFFALSE 42190
// exit ;
42188: GO 42706
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42190: LD_ADDR_VAR 0 8
42194: PUSH
42195: LD_INT 81
42197: PUSH
42198: LD_VAR 0 9
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 3
42209: PUSH
42210: LD_INT 21
42212: PUSH
42213: LD_INT 3
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PPUSH
42228: CALL_OW 69
42232: ST_TO_ADDR
// if not tmp then
42233: LD_VAR 0 8
42237: NOT
42238: IFFALSE 42242
// exit ;
42240: GO 42706
// if in_unit then
42242: LD_VAR 0 11
42246: IFFALSE 42270
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42248: LD_ADDR_VAR 0 10
42252: PUSH
42253: LD_VAR 0 8
42257: PPUSH
42258: LD_VAR 0 11
42262: PPUSH
42263: CALL_OW 74
42267: ST_TO_ADDR
42268: GO 42290
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42270: LD_ADDR_VAR 0 10
42274: PUSH
42275: LD_VAR 0 8
42279: PPUSH
42280: LD_VAR 0 1
42284: PPUSH
42285: CALL_OW 74
42289: ST_TO_ADDR
// if not enemy then
42290: LD_VAR 0 10
42294: NOT
42295: IFFALSE 42299
// exit ;
42297: GO 42706
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42299: LD_VAR 0 11
42303: IFFALSE 42325
42305: PUSH
42306: LD_VAR 0 11
42310: PPUSH
42311: LD_VAR 0 10
42315: PPUSH
42316: CALL_OW 296
42320: PUSH
42321: LD_INT 13
42323: GREATER
42324: AND
42325: IFTRUE 42347
42327: PUSH
42328: LD_VAR 0 1
42332: PPUSH
42333: LD_VAR 0 10
42337: PPUSH
42338: CALL_OW 296
42342: PUSH
42343: LD_INT 12
42345: GREATER
42346: OR
42347: IFFALSE 42351
// exit ;
42349: GO 42706
// missile := [ 1 ] ;
42351: LD_ADDR_VAR 0 14
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: EMPTY
42360: LIST
42361: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42362: LD_VAR 0 9
42366: PPUSH
42367: LD_VAR 0 12
42371: PPUSH
42372: CALL_OW 325
42376: IFFALSE 42405
// missile := Replace ( missile , missile + 1 , 2 ) ;
42378: LD_ADDR_VAR 0 14
42382: PUSH
42383: LD_VAR 0 14
42387: PPUSH
42388: LD_VAR 0 14
42392: PUSH
42393: LD_INT 1
42395: PLUS
42396: PPUSH
42397: LD_INT 2
42399: PPUSH
42400: CALL_OW 1
42404: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42405: LD_VAR 0 9
42409: PPUSH
42410: LD_VAR 0 13
42414: PPUSH
42415: CALL_OW 325
42419: IFFALSE 42443
42421: PUSH
42422: LD_VAR 0 10
42426: PPUSH
42427: CALL_OW 255
42431: PPUSH
42432: LD_VAR 0 13
42436: PPUSH
42437: CALL_OW 325
42441: NOT
42442: AND
42443: IFFALSE 42472
// missile := Replace ( missile , missile + 1 , 3 ) ;
42445: LD_ADDR_VAR 0 14
42449: PUSH
42450: LD_VAR 0 14
42454: PPUSH
42455: LD_VAR 0 14
42459: PUSH
42460: LD_INT 1
42462: PLUS
42463: PPUSH
42464: LD_INT 3
42466: PPUSH
42467: CALL_OW 1
42471: ST_TO_ADDR
// if missile < 2 then
42472: LD_VAR 0 14
42476: PUSH
42477: LD_INT 2
42479: LESS
42480: IFFALSE 42484
// exit ;
42482: GO 42706
// x := GetX ( enemy ) ;
42484: LD_ADDR_VAR 0 4
42488: PUSH
42489: LD_VAR 0 10
42493: PPUSH
42494: CALL_OW 250
42498: ST_TO_ADDR
// y := GetY ( enemy ) ;
42499: LD_ADDR_VAR 0 5
42503: PUSH
42504: LD_VAR 0 10
42508: PPUSH
42509: CALL_OW 251
42513: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42514: LD_ADDR_VAR 0 6
42518: PUSH
42519: LD_VAR 0 4
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PPUSH
42528: LD_INT 1
42530: PPUSH
42531: CALL_OW 12
42535: PLUS
42536: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42537: LD_ADDR_VAR 0 7
42541: PUSH
42542: LD_VAR 0 5
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PPUSH
42551: LD_INT 1
42553: PPUSH
42554: CALL_OW 12
42558: PLUS
42559: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42560: LD_VAR 0 6
42564: PPUSH
42565: LD_VAR 0 7
42569: PPUSH
42570: CALL_OW 488
42574: NOT
42575: IFFALSE 42597
// begin _x := x ;
42577: LD_ADDR_VAR 0 6
42581: PUSH
42582: LD_VAR 0 4
42586: ST_TO_ADDR
// _y := y ;
42587: LD_ADDR_VAR 0 7
42591: PUSH
42592: LD_VAR 0 5
42596: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42597: LD_ADDR_VAR 0 3
42601: PUSH
42602: LD_INT 1
42604: PPUSH
42605: LD_VAR 0 14
42609: PPUSH
42610: CALL_OW 12
42614: ST_TO_ADDR
// case i of 1 :
42615: LD_VAR 0 3
42619: PUSH
42620: LD_INT 1
42622: DOUBLE
42623: EQUAL
42624: IFTRUE 42628
42626: GO 42645
42628: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42629: LD_VAR 0 1
42633: PPUSH
42634: LD_VAR 0 10
42638: PPUSH
42639: CALL_OW 115
42643: GO 42706
42645: LD_INT 2
42647: DOUBLE
42648: EQUAL
42649: IFTRUE 42653
42651: GO 42675
42653: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42654: LD_VAR 0 1
42658: PPUSH
42659: LD_VAR 0 6
42663: PPUSH
42664: LD_VAR 0 7
42668: PPUSH
42669: CALL_OW 153
42673: GO 42706
42675: LD_INT 3
42677: DOUBLE
42678: EQUAL
42679: IFTRUE 42683
42681: GO 42705
42683: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42684: LD_VAR 0 1
42688: PPUSH
42689: LD_VAR 0 6
42693: PPUSH
42694: LD_VAR 0 7
42698: PPUSH
42699: CALL_OW 154
42703: GO 42706
42705: POP
// end ;
42706: LD_VAR 0 2
42710: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42711: LD_INT 0
42713: PPUSH
42714: PPUSH
42715: PPUSH
42716: PPUSH
42717: PPUSH
42718: PPUSH
// if not unit or not building then
42719: LD_VAR 0 1
42723: NOT
42724: IFTRUE 42733
42726: PUSH
42727: LD_VAR 0 2
42731: NOT
42732: OR
42733: IFFALSE 42737
// exit ;
42735: GO 42895
// x := GetX ( building ) ;
42737: LD_ADDR_VAR 0 5
42741: PUSH
42742: LD_VAR 0 2
42746: PPUSH
42747: CALL_OW 250
42751: ST_TO_ADDR
// y := GetY ( building ) ;
42752: LD_ADDR_VAR 0 6
42756: PUSH
42757: LD_VAR 0 2
42761: PPUSH
42762: CALL_OW 251
42766: ST_TO_ADDR
// for i := 0 to 5 do
42767: LD_ADDR_VAR 0 4
42771: PUSH
42772: DOUBLE
42773: LD_INT 0
42775: DEC
42776: ST_TO_ADDR
42777: LD_INT 5
42779: PUSH
42780: FOR_TO
42781: IFFALSE 42893
// begin _x := ShiftX ( x , i , 3 ) ;
42783: LD_ADDR_VAR 0 7
42787: PUSH
42788: LD_VAR 0 5
42792: PPUSH
42793: LD_VAR 0 4
42797: PPUSH
42798: LD_INT 3
42800: PPUSH
42801: CALL_OW 272
42805: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42806: LD_ADDR_VAR 0 8
42810: PUSH
42811: LD_VAR 0 6
42815: PPUSH
42816: LD_VAR 0 4
42820: PPUSH
42821: LD_INT 3
42823: PPUSH
42824: CALL_OW 273
42828: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42829: LD_VAR 0 7
42833: PPUSH
42834: LD_VAR 0 8
42838: PPUSH
42839: CALL_OW 488
42843: NOT
42844: IFFALSE 42848
// continue ;
42846: GO 42780
// if HexInfo ( _x , _y ) = 0 then
42848: LD_VAR 0 7
42852: PPUSH
42853: LD_VAR 0 8
42857: PPUSH
42858: CALL_OW 428
42862: PUSH
42863: LD_INT 0
42865: EQUAL
42866: IFFALSE 42891
// begin ComMoveXY ( unit , _x , _y ) ;
42868: LD_VAR 0 1
42872: PPUSH
42873: LD_VAR 0 7
42877: PPUSH
42878: LD_VAR 0 8
42882: PPUSH
42883: CALL_OW 111
// exit ;
42887: POP
42888: POP
42889: GO 42895
// end ; end ;
42891: GO 42780
42893: POP
42894: POP
// end ;
42895: LD_VAR 0 3
42899: RET
// export function ScanBase ( side , base_area ) ; begin
42900: LD_INT 0
42902: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42903: LD_ADDR_VAR 0 3
42907: PUSH
42908: LD_VAR 0 2
42912: PPUSH
42913: LD_INT 81
42915: PUSH
42916: LD_VAR 0 1
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PPUSH
42925: CALL_OW 70
42929: ST_TO_ADDR
// end ;
42930: LD_VAR 0 3
42934: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42935: LD_INT 0
42937: PPUSH
42938: PPUSH
42939: PPUSH
42940: PPUSH
// result := false ;
42941: LD_ADDR_VAR 0 2
42945: PUSH
42946: LD_INT 0
42948: ST_TO_ADDR
// side := GetSide ( unit ) ;
42949: LD_ADDR_VAR 0 3
42953: PUSH
42954: LD_VAR 0 1
42958: PPUSH
42959: CALL_OW 255
42963: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42964: LD_ADDR_VAR 0 4
42968: PUSH
42969: LD_VAR 0 1
42973: PPUSH
42974: CALL_OW 248
42978: ST_TO_ADDR
// case nat of 1 :
42979: LD_VAR 0 4
42983: PUSH
42984: LD_INT 1
42986: DOUBLE
42987: EQUAL
42988: IFTRUE 42992
42990: GO 43003
42992: POP
// tech := tech_lassight ; 2 :
42993: LD_ADDR_VAR 0 5
42997: PUSH
42998: LD_INT 12
43000: ST_TO_ADDR
43001: GO 43042
43003: LD_INT 2
43005: DOUBLE
43006: EQUAL
43007: IFTRUE 43011
43009: GO 43022
43011: POP
// tech := tech_mortar ; 3 :
43012: LD_ADDR_VAR 0 5
43016: PUSH
43017: LD_INT 41
43019: ST_TO_ADDR
43020: GO 43042
43022: LD_INT 3
43024: DOUBLE
43025: EQUAL
43026: IFTRUE 43030
43028: GO 43041
43030: POP
// tech := tech_bazooka ; end ;
43031: LD_ADDR_VAR 0 5
43035: PUSH
43036: LD_INT 44
43038: ST_TO_ADDR
43039: GO 43042
43041: POP
// if Researched ( side , tech ) then
43042: LD_VAR 0 3
43046: PPUSH
43047: LD_VAR 0 5
43051: PPUSH
43052: CALL_OW 325
43056: IFFALSE 43083
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43058: LD_ADDR_VAR 0 2
43062: PUSH
43063: LD_INT 5
43065: PUSH
43066: LD_INT 8
43068: PUSH
43069: LD_INT 9
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: LIST
43076: PUSH
43077: LD_VAR 0 4
43081: ARRAY
43082: ST_TO_ADDR
// end ;
43083: LD_VAR 0 2
43087: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43088: LD_INT 0
43090: PPUSH
43091: PPUSH
43092: PPUSH
// if not mines then
43093: LD_VAR 0 2
43097: NOT
43098: IFFALSE 43102
// exit ;
43100: GO 43246
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43102: LD_ADDR_VAR 0 5
43106: PUSH
43107: LD_INT 81
43109: PUSH
43110: LD_VAR 0 1
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 3
43121: PUSH
43122: LD_INT 21
43124: PUSH
43125: LD_INT 3
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PPUSH
43140: CALL_OW 69
43144: ST_TO_ADDR
// for i in mines do
43145: LD_ADDR_VAR 0 4
43149: PUSH
43150: LD_VAR 0 2
43154: PUSH
43155: FOR_IN
43156: IFFALSE 43244
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43158: LD_VAR 0 4
43162: PUSH
43163: LD_INT 1
43165: ARRAY
43166: PPUSH
43167: LD_VAR 0 4
43171: PUSH
43172: LD_INT 2
43174: ARRAY
43175: PPUSH
43176: CALL_OW 458
43180: NOT
43181: IFFALSE 43185
// continue ;
43183: GO 43155
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43185: LD_VAR 0 4
43189: PUSH
43190: LD_INT 1
43192: ARRAY
43193: PPUSH
43194: LD_VAR 0 4
43198: PUSH
43199: LD_INT 2
43201: ARRAY
43202: PPUSH
43203: CALL_OW 428
43207: PUSH
43208: LD_VAR 0 5
43212: IN
43213: IFFALSE 43242
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43215: LD_VAR 0 4
43219: PUSH
43220: LD_INT 1
43222: ARRAY
43223: PPUSH
43224: LD_VAR 0 4
43228: PUSH
43229: LD_INT 2
43231: ARRAY
43232: PPUSH
43233: LD_VAR 0 1
43237: PPUSH
43238: CALL_OW 456
// end ;
43242: GO 43155
43244: POP
43245: POP
// end ;
43246: LD_VAR 0 3
43250: RET
// export function Count ( array ) ; begin
43251: LD_INT 0
43253: PPUSH
// result := array + 0 ;
43254: LD_ADDR_VAR 0 2
43258: PUSH
43259: LD_VAR 0 1
43263: PUSH
43264: LD_INT 0
43266: PLUS
43267: ST_TO_ADDR
// end ;
43268: LD_VAR 0 2
43272: RET
// export function IsEmpty ( building ) ; begin
43273: LD_INT 0
43275: PPUSH
// if not building then
43276: LD_VAR 0 1
43280: NOT
43281: IFFALSE 43285
// exit ;
43283: GO 43328
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43285: LD_ADDR_VAR 0 2
43289: PUSH
43290: LD_VAR 0 1
43294: PUSH
43295: LD_INT 22
43297: PUSH
43298: LD_VAR 0 1
43302: PPUSH
43303: CALL_OW 255
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 58
43314: PUSH
43315: EMPTY
43316: LIST
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PPUSH
43322: CALL_OW 69
43326: IN
43327: ST_TO_ADDR
// end ;
43328: LD_VAR 0 2
43332: RET
// export function IsNotFull ( building ) ; var places ; begin
43333: LD_INT 0
43335: PPUSH
43336: PPUSH
// if not building then
43337: LD_VAR 0 1
43341: NOT
43342: IFFALSE 43346
// exit ;
43344: GO 43374
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43346: LD_ADDR_VAR 0 2
43350: PUSH
43351: LD_VAR 0 1
43355: PPUSH
43356: LD_INT 3
43358: PUSH
43359: LD_INT 62
43361: PUSH
43362: EMPTY
43363: LIST
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PPUSH
43369: CALL_OW 72
43373: ST_TO_ADDR
// end ;
43374: LD_VAR 0 2
43378: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43379: LD_INT 0
43381: PPUSH
43382: PPUSH
43383: PPUSH
43384: PPUSH
// tmp := [ ] ;
43385: LD_ADDR_VAR 0 3
43389: PUSH
43390: EMPTY
43391: ST_TO_ADDR
// list := [ ] ;
43392: LD_ADDR_VAR 0 5
43396: PUSH
43397: EMPTY
43398: ST_TO_ADDR
// for i = 16 to 25 do
43399: LD_ADDR_VAR 0 4
43403: PUSH
43404: DOUBLE
43405: LD_INT 16
43407: DEC
43408: ST_TO_ADDR
43409: LD_INT 25
43411: PUSH
43412: FOR_TO
43413: IFFALSE 43486
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43415: LD_ADDR_VAR 0 3
43419: PUSH
43420: LD_VAR 0 3
43424: PUSH
43425: LD_INT 22
43427: PUSH
43428: LD_VAR 0 1
43432: PPUSH
43433: CALL_OW 255
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 91
43444: PUSH
43445: LD_VAR 0 1
43449: PUSH
43450: LD_INT 6
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 30
43460: PUSH
43461: LD_VAR 0 4
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: LIST
43474: PUSH
43475: EMPTY
43476: LIST
43477: PPUSH
43478: CALL_OW 69
43482: ADD
43483: ST_TO_ADDR
43484: GO 43412
43486: POP
43487: POP
// for i = 1 to tmp do
43488: LD_ADDR_VAR 0 4
43492: PUSH
43493: DOUBLE
43494: LD_INT 1
43496: DEC
43497: ST_TO_ADDR
43498: LD_VAR 0 3
43502: PUSH
43503: FOR_TO
43504: IFFALSE 43592
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43506: LD_ADDR_VAR 0 5
43510: PUSH
43511: LD_VAR 0 5
43515: PUSH
43516: LD_VAR 0 3
43520: PUSH
43521: LD_VAR 0 4
43525: ARRAY
43526: PPUSH
43527: CALL_OW 266
43531: PUSH
43532: LD_VAR 0 3
43536: PUSH
43537: LD_VAR 0 4
43541: ARRAY
43542: PPUSH
43543: CALL_OW 250
43547: PUSH
43548: LD_VAR 0 3
43552: PUSH
43553: LD_VAR 0 4
43557: ARRAY
43558: PPUSH
43559: CALL_OW 251
43563: PUSH
43564: LD_VAR 0 3
43568: PUSH
43569: LD_VAR 0 4
43573: ARRAY
43574: PPUSH
43575: CALL_OW 254
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: PUSH
43586: EMPTY
43587: LIST
43588: ADD
43589: ST_TO_ADDR
43590: GO 43503
43592: POP
43593: POP
// result := list ;
43594: LD_ADDR_VAR 0 2
43598: PUSH
43599: LD_VAR 0 5
43603: ST_TO_ADDR
// end ;
43604: LD_VAR 0 2
43608: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43609: LD_INT 0
43611: PPUSH
43612: PPUSH
43613: PPUSH
43614: PPUSH
43615: PPUSH
43616: PPUSH
43617: PPUSH
// if not factory then
43618: LD_VAR 0 1
43622: NOT
43623: IFFALSE 43627
// exit ;
43625: GO 44230
// if control = control_apeman then
43627: LD_VAR 0 4
43631: PUSH
43632: LD_INT 5
43634: EQUAL
43635: IFFALSE 43744
// begin tmp := UnitsInside ( factory ) ;
43637: LD_ADDR_VAR 0 8
43641: PUSH
43642: LD_VAR 0 1
43646: PPUSH
43647: CALL_OW 313
43651: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43652: LD_VAR 0 8
43656: PPUSH
43657: LD_INT 25
43659: PUSH
43660: LD_INT 12
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PPUSH
43667: CALL_OW 72
43671: NOT
43672: IFFALSE 43682
// control := control_manual ;
43674: LD_ADDR_VAR 0 4
43678: PUSH
43679: LD_INT 1
43681: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43682: LD_ADDR_VAR 0 8
43686: PUSH
43687: LD_VAR 0 1
43691: PPUSH
43692: CALL 43379 0 1
43696: ST_TO_ADDR
// if tmp then
43697: LD_VAR 0 8
43701: IFFALSE 43744
// begin for i in tmp do
43703: LD_ADDR_VAR 0 7
43707: PUSH
43708: LD_VAR 0 8
43712: PUSH
43713: FOR_IN
43714: IFFALSE 43742
// if i [ 1 ] = b_ext_radio then
43716: LD_VAR 0 7
43720: PUSH
43721: LD_INT 1
43723: ARRAY
43724: PUSH
43725: LD_INT 22
43727: EQUAL
43728: IFFALSE 43740
// begin control := control_remote ;
43730: LD_ADDR_VAR 0 4
43734: PUSH
43735: LD_INT 2
43737: ST_TO_ADDR
// break ;
43738: GO 43742
// end ;
43740: GO 43713
43742: POP
43743: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43744: LD_VAR 0 1
43748: PPUSH
43749: LD_VAR 0 2
43753: PPUSH
43754: LD_VAR 0 3
43758: PPUSH
43759: LD_VAR 0 4
43763: PPUSH
43764: LD_VAR 0 5
43768: PPUSH
43769: CALL_OW 448
43773: IFFALSE 43808
// begin result := [ chassis , engine , control , weapon ] ;
43775: LD_ADDR_VAR 0 6
43779: PUSH
43780: LD_VAR 0 2
43784: PUSH
43785: LD_VAR 0 3
43789: PUSH
43790: LD_VAR 0 4
43794: PUSH
43795: LD_VAR 0 5
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: ST_TO_ADDR
// exit ;
43806: GO 44230
// end ; _chassis := AvailableChassisList ( factory ) ;
43808: LD_ADDR_VAR 0 9
43812: PUSH
43813: LD_VAR 0 1
43817: PPUSH
43818: CALL_OW 475
43822: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43823: LD_ADDR_VAR 0 11
43827: PUSH
43828: LD_VAR 0 1
43832: PPUSH
43833: CALL_OW 476
43837: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43838: LD_ADDR_VAR 0 12
43842: PUSH
43843: LD_VAR 0 1
43847: PPUSH
43848: CALL_OW 477
43852: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43853: LD_ADDR_VAR 0 10
43857: PUSH
43858: LD_VAR 0 1
43862: PPUSH
43863: CALL_OW 478
43867: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43868: LD_VAR 0 9
43872: NOT
43873: IFTRUE 43882
43875: PUSH
43876: LD_VAR 0 11
43880: NOT
43881: OR
43882: IFTRUE 43891
43884: PUSH
43885: LD_VAR 0 12
43889: NOT
43890: OR
43891: IFTRUE 43900
43893: PUSH
43894: LD_VAR 0 10
43898: NOT
43899: OR
43900: IFFALSE 43935
// begin result := [ chassis , engine , control , weapon ] ;
43902: LD_ADDR_VAR 0 6
43906: PUSH
43907: LD_VAR 0 2
43911: PUSH
43912: LD_VAR 0 3
43916: PUSH
43917: LD_VAR 0 4
43921: PUSH
43922: LD_VAR 0 5
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: ST_TO_ADDR
// exit ;
43933: GO 44230
// end ; if not chassis in _chassis then
43935: LD_VAR 0 2
43939: PUSH
43940: LD_VAR 0 9
43944: IN
43945: NOT
43946: IFFALSE 43972
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43948: LD_ADDR_VAR 0 2
43952: PUSH
43953: LD_VAR 0 9
43957: PUSH
43958: LD_INT 1
43960: PPUSH
43961: LD_VAR 0 9
43965: PPUSH
43966: CALL_OW 12
43970: ARRAY
43971: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43972: LD_VAR 0 2
43976: PPUSH
43977: LD_VAR 0 3
43981: PPUSH
43982: CALL 44235 0 2
43986: NOT
43987: IFFALSE 44048
// repeat engine := _engine [ 1 ] ;
43989: LD_ADDR_VAR 0 3
43993: PUSH
43994: LD_VAR 0 11
43998: PUSH
43999: LD_INT 1
44001: ARRAY
44002: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44003: LD_ADDR_VAR 0 11
44007: PUSH
44008: LD_VAR 0 11
44012: PPUSH
44013: LD_INT 1
44015: PPUSH
44016: CALL_OW 3
44020: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44021: LD_VAR 0 2
44025: PPUSH
44026: LD_VAR 0 3
44030: PPUSH
44031: CALL 44235 0 2
44035: IFTRUE 44046
44037: PUSH
44038: LD_VAR 0 11
44042: PUSH
44043: EMPTY
44044: EQUAL
44045: OR
44046: IFFALSE 43989
// if not control in _control then
44048: LD_VAR 0 4
44052: PUSH
44053: LD_VAR 0 12
44057: IN
44058: NOT
44059: IFFALSE 44085
// control := _control [ rand ( 1 , _control ) ] ;
44061: LD_ADDR_VAR 0 4
44065: PUSH
44066: LD_VAR 0 12
44070: PUSH
44071: LD_INT 1
44073: PPUSH
44074: LD_VAR 0 12
44078: PPUSH
44079: CALL_OW 12
44083: ARRAY
44084: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44085: LD_VAR 0 2
44089: PPUSH
44090: LD_VAR 0 5
44094: PPUSH
44095: CALL 44457 0 2
44099: NOT
44100: IFFALSE 44161
// repeat weapon := _weapon [ 1 ] ;
44102: LD_ADDR_VAR 0 5
44106: PUSH
44107: LD_VAR 0 10
44111: PUSH
44112: LD_INT 1
44114: ARRAY
44115: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44116: LD_ADDR_VAR 0 10
44120: PUSH
44121: LD_VAR 0 10
44125: PPUSH
44126: LD_INT 1
44128: PPUSH
44129: CALL_OW 3
44133: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44134: LD_VAR 0 2
44138: PPUSH
44139: LD_VAR 0 5
44143: PPUSH
44144: CALL 44457 0 2
44148: IFTRUE 44159
44150: PUSH
44151: LD_VAR 0 10
44155: PUSH
44156: EMPTY
44157: EQUAL
44158: OR
44159: IFFALSE 44102
// result := [ ] ;
44161: LD_ADDR_VAR 0 6
44165: PUSH
44166: EMPTY
44167: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44168: LD_VAR 0 1
44172: PPUSH
44173: LD_VAR 0 2
44177: PPUSH
44178: LD_VAR 0 3
44182: PPUSH
44183: LD_VAR 0 4
44187: PPUSH
44188: LD_VAR 0 5
44192: PPUSH
44193: CALL_OW 448
44197: IFFALSE 44230
// result := [ chassis , engine , control , weapon ] ;
44199: LD_ADDR_VAR 0 6
44203: PUSH
44204: LD_VAR 0 2
44208: PUSH
44209: LD_VAR 0 3
44213: PUSH
44214: LD_VAR 0 4
44218: PUSH
44219: LD_VAR 0 5
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: ST_TO_ADDR
// end ;
44230: LD_VAR 0 6
44234: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44235: LD_INT 0
44237: PPUSH
// if not chassis or not engine then
44238: LD_VAR 0 1
44242: NOT
44243: IFTRUE 44252
44245: PUSH
44246: LD_VAR 0 2
44250: NOT
44251: OR
44252: IFFALSE 44256
// exit ;
44254: GO 44452
// case engine of engine_solar :
44256: LD_VAR 0 2
44260: PUSH
44261: LD_INT 2
44263: DOUBLE
44264: EQUAL
44265: IFTRUE 44269
44267: GO 44307
44269: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44270: LD_ADDR_VAR 0 3
44274: PUSH
44275: LD_INT 11
44277: PUSH
44278: LD_INT 12
44280: PUSH
44281: LD_INT 13
44283: PUSH
44284: LD_INT 14
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: LD_INT 2
44292: PUSH
44293: LD_INT 3
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: ST_TO_ADDR
44305: GO 44436
44307: LD_INT 1
44309: DOUBLE
44310: EQUAL
44311: IFTRUE 44315
44313: GO 44377
44315: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44316: LD_ADDR_VAR 0 3
44320: PUSH
44321: LD_INT 11
44323: PUSH
44324: LD_INT 12
44326: PUSH
44327: LD_INT 13
44329: PUSH
44330: LD_INT 14
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: LD_INT 2
44338: PUSH
44339: LD_INT 3
44341: PUSH
44342: LD_INT 4
44344: PUSH
44345: LD_INT 5
44347: PUSH
44348: LD_INT 21
44350: PUSH
44351: LD_INT 23
44353: PUSH
44354: LD_INT 22
44356: PUSH
44357: LD_INT 24
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: ST_TO_ADDR
44375: GO 44436
44377: LD_INT 3
44379: DOUBLE
44380: EQUAL
44381: IFTRUE 44385
44383: GO 44435
44385: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44386: LD_ADDR_VAR 0 3
44390: PUSH
44391: LD_INT 13
44393: PUSH
44394: LD_INT 14
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: LD_INT 3
44402: PUSH
44403: LD_INT 4
44405: PUSH
44406: LD_INT 5
44408: PUSH
44409: LD_INT 21
44411: PUSH
44412: LD_INT 22
44414: PUSH
44415: LD_INT 23
44417: PUSH
44418: LD_INT 24
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: ST_TO_ADDR
44433: GO 44436
44435: POP
// result := ( chassis in result ) ;
44436: LD_ADDR_VAR 0 3
44440: PUSH
44441: LD_VAR 0 1
44445: PUSH
44446: LD_VAR 0 3
44450: IN
44451: ST_TO_ADDR
// end ;
44452: LD_VAR 0 3
44456: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44457: LD_INT 0
44459: PPUSH
// if not chassis or not weapon then
44460: LD_VAR 0 1
44464: NOT
44465: IFTRUE 44474
44467: PUSH
44468: LD_VAR 0 2
44472: NOT
44473: OR
44474: IFFALSE 44478
// exit ;
44476: GO 45538
// case weapon of us_machine_gun :
44478: LD_VAR 0 2
44482: PUSH
44483: LD_INT 2
44485: DOUBLE
44486: EQUAL
44487: IFTRUE 44491
44489: GO 44521
44491: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44492: LD_ADDR_VAR 0 3
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: LD_INT 2
44502: PUSH
44503: LD_INT 3
44505: PUSH
44506: LD_INT 4
44508: PUSH
44509: LD_INT 5
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: ST_TO_ADDR
44519: GO 45522
44521: LD_INT 3
44523: DOUBLE
44524: EQUAL
44525: IFTRUE 44529
44527: GO 44559
44529: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44530: LD_ADDR_VAR 0 3
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: LD_INT 2
44540: PUSH
44541: LD_INT 3
44543: PUSH
44544: LD_INT 4
44546: PUSH
44547: LD_INT 5
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: ST_TO_ADDR
44557: GO 45522
44559: LD_INT 11
44561: DOUBLE
44562: EQUAL
44563: IFTRUE 44567
44565: GO 44597
44567: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44568: LD_ADDR_VAR 0 3
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: LD_INT 3
44581: PUSH
44582: LD_INT 4
44584: PUSH
44585: LD_INT 5
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: ST_TO_ADDR
44595: GO 45522
44597: LD_INT 4
44599: DOUBLE
44600: EQUAL
44601: IFTRUE 44605
44603: GO 44631
44605: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44606: LD_ADDR_VAR 0 3
44610: PUSH
44611: LD_INT 2
44613: PUSH
44614: LD_INT 3
44616: PUSH
44617: LD_INT 4
44619: PUSH
44620: LD_INT 5
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: ST_TO_ADDR
44629: GO 45522
44631: LD_INT 5
44633: DOUBLE
44634: EQUAL
44635: IFTRUE 44639
44637: GO 44665
44639: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44640: LD_ADDR_VAR 0 3
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: LD_INT 3
44650: PUSH
44651: LD_INT 4
44653: PUSH
44654: LD_INT 5
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: ST_TO_ADDR
44663: GO 45522
44665: LD_INT 9
44667: DOUBLE
44668: EQUAL
44669: IFTRUE 44673
44671: GO 44699
44673: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44674: LD_ADDR_VAR 0 3
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: LD_INT 3
44684: PUSH
44685: LD_INT 4
44687: PUSH
44688: LD_INT 5
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: ST_TO_ADDR
44697: GO 45522
44699: LD_INT 7
44701: DOUBLE
44702: EQUAL
44703: IFTRUE 44707
44705: GO 44733
44707: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44708: LD_ADDR_VAR 0 3
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: LD_INT 3
44718: PUSH
44719: LD_INT 4
44721: PUSH
44722: LD_INT 5
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: ST_TO_ADDR
44731: GO 45522
44733: LD_INT 12
44735: DOUBLE
44736: EQUAL
44737: IFTRUE 44741
44739: GO 44767
44741: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44742: LD_ADDR_VAR 0 3
44746: PUSH
44747: LD_INT 2
44749: PUSH
44750: LD_INT 3
44752: PUSH
44753: LD_INT 4
44755: PUSH
44756: LD_INT 5
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: ST_TO_ADDR
44765: GO 45522
44767: LD_INT 13
44769: DOUBLE
44770: EQUAL
44771: IFTRUE 44775
44773: GO 44801
44775: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44776: LD_ADDR_VAR 0 3
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: LD_INT 3
44786: PUSH
44787: LD_INT 4
44789: PUSH
44790: LD_INT 5
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: ST_TO_ADDR
44799: GO 45522
44801: LD_INT 14
44803: DOUBLE
44804: EQUAL
44805: IFTRUE 44809
44807: GO 44827
44809: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44810: LD_ADDR_VAR 0 3
44814: PUSH
44815: LD_INT 4
44817: PUSH
44818: LD_INT 5
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: ST_TO_ADDR
44825: GO 45522
44827: LD_INT 6
44829: DOUBLE
44830: EQUAL
44831: IFTRUE 44835
44833: GO 44853
44835: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44836: LD_ADDR_VAR 0 3
44840: PUSH
44841: LD_INT 4
44843: PUSH
44844: LD_INT 5
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: ST_TO_ADDR
44851: GO 45522
44853: LD_INT 10
44855: DOUBLE
44856: EQUAL
44857: IFTRUE 44861
44859: GO 44879
44861: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44862: LD_ADDR_VAR 0 3
44866: PUSH
44867: LD_INT 4
44869: PUSH
44870: LD_INT 5
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: ST_TO_ADDR
44877: GO 45522
44879: LD_INT 22
44881: DOUBLE
44882: EQUAL
44883: IFTRUE 44887
44885: GO 44913
44887: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44888: LD_ADDR_VAR 0 3
44892: PUSH
44893: LD_INT 11
44895: PUSH
44896: LD_INT 12
44898: PUSH
44899: LD_INT 13
44901: PUSH
44902: LD_INT 14
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: ST_TO_ADDR
44911: GO 45522
44913: LD_INT 23
44915: DOUBLE
44916: EQUAL
44917: IFTRUE 44921
44919: GO 44947
44921: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44922: LD_ADDR_VAR 0 3
44926: PUSH
44927: LD_INT 11
44929: PUSH
44930: LD_INT 12
44932: PUSH
44933: LD_INT 13
44935: PUSH
44936: LD_INT 14
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: ST_TO_ADDR
44945: GO 45522
44947: LD_INT 24
44949: DOUBLE
44950: EQUAL
44951: IFTRUE 44955
44953: GO 44981
44955: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44956: LD_ADDR_VAR 0 3
44960: PUSH
44961: LD_INT 11
44963: PUSH
44964: LD_INT 12
44966: PUSH
44967: LD_INT 13
44969: PUSH
44970: LD_INT 14
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: ST_TO_ADDR
44979: GO 45522
44981: LD_INT 30
44983: DOUBLE
44984: EQUAL
44985: IFTRUE 44989
44987: GO 45015
44989: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44990: LD_ADDR_VAR 0 3
44994: PUSH
44995: LD_INT 11
44997: PUSH
44998: LD_INT 12
45000: PUSH
45001: LD_INT 13
45003: PUSH
45004: LD_INT 14
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: ST_TO_ADDR
45013: GO 45522
45015: LD_INT 25
45017: DOUBLE
45018: EQUAL
45019: IFTRUE 45023
45021: GO 45041
45023: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45024: LD_ADDR_VAR 0 3
45028: PUSH
45029: LD_INT 13
45031: PUSH
45032: LD_INT 14
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: ST_TO_ADDR
45039: GO 45522
45041: LD_INT 27
45043: DOUBLE
45044: EQUAL
45045: IFTRUE 45049
45047: GO 45067
45049: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45050: LD_ADDR_VAR 0 3
45054: PUSH
45055: LD_INT 13
45057: PUSH
45058: LD_INT 14
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: ST_TO_ADDR
45065: GO 45522
45067: LD_INT 92
45069: DOUBLE
45070: EQUAL
45071: IFTRUE 45075
45073: GO 45101
45075: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45076: LD_ADDR_VAR 0 3
45080: PUSH
45081: LD_INT 11
45083: PUSH
45084: LD_INT 12
45086: PUSH
45087: LD_INT 13
45089: PUSH
45090: LD_INT 14
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: ST_TO_ADDR
45099: GO 45522
45101: LD_INT 28
45103: DOUBLE
45104: EQUAL
45105: IFTRUE 45109
45107: GO 45127
45109: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45110: LD_ADDR_VAR 0 3
45114: PUSH
45115: LD_INT 13
45117: PUSH
45118: LD_INT 14
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: ST_TO_ADDR
45125: GO 45522
45127: LD_INT 29
45129: DOUBLE
45130: EQUAL
45131: IFTRUE 45135
45133: GO 45153
45135: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45136: LD_ADDR_VAR 0 3
45140: PUSH
45141: LD_INT 13
45143: PUSH
45144: LD_INT 14
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: ST_TO_ADDR
45151: GO 45522
45153: LD_INT 31
45155: DOUBLE
45156: EQUAL
45157: IFTRUE 45161
45159: GO 45179
45161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45162: LD_ADDR_VAR 0 3
45166: PUSH
45167: LD_INT 13
45169: PUSH
45170: LD_INT 14
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: ST_TO_ADDR
45177: GO 45522
45179: LD_INT 26
45181: DOUBLE
45182: EQUAL
45183: IFTRUE 45187
45185: GO 45205
45187: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45188: LD_ADDR_VAR 0 3
45192: PUSH
45193: LD_INT 13
45195: PUSH
45196: LD_INT 14
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: ST_TO_ADDR
45203: GO 45522
45205: LD_INT 42
45207: DOUBLE
45208: EQUAL
45209: IFTRUE 45213
45211: GO 45239
45213: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45214: LD_ADDR_VAR 0 3
45218: PUSH
45219: LD_INT 21
45221: PUSH
45222: LD_INT 22
45224: PUSH
45225: LD_INT 23
45227: PUSH
45228: LD_INT 24
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: ST_TO_ADDR
45237: GO 45522
45239: LD_INT 43
45241: DOUBLE
45242: EQUAL
45243: IFTRUE 45247
45245: GO 45273
45247: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45248: LD_ADDR_VAR 0 3
45252: PUSH
45253: LD_INT 21
45255: PUSH
45256: LD_INT 22
45258: PUSH
45259: LD_INT 23
45261: PUSH
45262: LD_INT 24
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: ST_TO_ADDR
45271: GO 45522
45273: LD_INT 44
45275: DOUBLE
45276: EQUAL
45277: IFTRUE 45281
45279: GO 45307
45281: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45282: LD_ADDR_VAR 0 3
45286: PUSH
45287: LD_INT 21
45289: PUSH
45290: LD_INT 22
45292: PUSH
45293: LD_INT 23
45295: PUSH
45296: LD_INT 24
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: ST_TO_ADDR
45305: GO 45522
45307: LD_INT 45
45309: DOUBLE
45310: EQUAL
45311: IFTRUE 45315
45313: GO 45341
45315: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45316: LD_ADDR_VAR 0 3
45320: PUSH
45321: LD_INT 21
45323: PUSH
45324: LD_INT 22
45326: PUSH
45327: LD_INT 23
45329: PUSH
45330: LD_INT 24
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: ST_TO_ADDR
45339: GO 45522
45341: LD_INT 49
45343: DOUBLE
45344: EQUAL
45345: IFTRUE 45349
45347: GO 45375
45349: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45350: LD_ADDR_VAR 0 3
45354: PUSH
45355: LD_INT 21
45357: PUSH
45358: LD_INT 22
45360: PUSH
45361: LD_INT 23
45363: PUSH
45364: LD_INT 24
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: ST_TO_ADDR
45373: GO 45522
45375: LD_INT 51
45377: DOUBLE
45378: EQUAL
45379: IFTRUE 45383
45381: GO 45409
45383: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45384: LD_ADDR_VAR 0 3
45388: PUSH
45389: LD_INT 21
45391: PUSH
45392: LD_INT 22
45394: PUSH
45395: LD_INT 23
45397: PUSH
45398: LD_INT 24
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: ST_TO_ADDR
45407: GO 45522
45409: LD_INT 52
45411: DOUBLE
45412: EQUAL
45413: IFTRUE 45417
45415: GO 45443
45417: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45418: LD_ADDR_VAR 0 3
45422: PUSH
45423: LD_INT 21
45425: PUSH
45426: LD_INT 22
45428: PUSH
45429: LD_INT 23
45431: PUSH
45432: LD_INT 24
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: ST_TO_ADDR
45441: GO 45522
45443: LD_INT 53
45445: DOUBLE
45446: EQUAL
45447: IFTRUE 45451
45449: GO 45469
45451: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45452: LD_ADDR_VAR 0 3
45456: PUSH
45457: LD_INT 23
45459: PUSH
45460: LD_INT 24
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: ST_TO_ADDR
45467: GO 45522
45469: LD_INT 46
45471: DOUBLE
45472: EQUAL
45473: IFTRUE 45477
45475: GO 45495
45477: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45478: LD_ADDR_VAR 0 3
45482: PUSH
45483: LD_INT 23
45485: PUSH
45486: LD_INT 24
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: ST_TO_ADDR
45493: GO 45522
45495: LD_INT 47
45497: DOUBLE
45498: EQUAL
45499: IFTRUE 45503
45501: GO 45521
45503: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45504: LD_ADDR_VAR 0 3
45508: PUSH
45509: LD_INT 23
45511: PUSH
45512: LD_INT 24
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: ST_TO_ADDR
45519: GO 45522
45521: POP
// result := ( chassis in result ) ;
45522: LD_ADDR_VAR 0 3
45526: PUSH
45527: LD_VAR 0 1
45531: PUSH
45532: LD_VAR 0 3
45536: IN
45537: ST_TO_ADDR
// end ;
45538: LD_VAR 0 3
45542: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45543: LD_INT 0
45545: PPUSH
45546: PPUSH
45547: PPUSH
45548: PPUSH
45549: PPUSH
45550: PPUSH
45551: PPUSH
// result := array ;
45552: LD_ADDR_VAR 0 5
45556: PUSH
45557: LD_VAR 0 1
45561: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45562: LD_VAR 0 1
45566: NOT
45567: IFTRUE 45576
45569: PUSH
45570: LD_VAR 0 2
45574: NOT
45575: OR
45576: IFTRUE 45585
45578: PUSH
45579: LD_VAR 0 3
45583: NOT
45584: OR
45585: IFTRUE 45599
45587: PUSH
45588: LD_VAR 0 2
45592: PUSH
45593: LD_VAR 0 1
45597: GREATER
45598: OR
45599: IFTRUE 45613
45601: PUSH
45602: LD_VAR 0 3
45606: PUSH
45607: LD_VAR 0 1
45611: GREATER
45612: OR
45613: IFFALSE 45617
// exit ;
45615: GO 45913
// if direction then
45617: LD_VAR 0 4
45621: IFFALSE 45685
// begin d := 1 ;
45623: LD_ADDR_VAR 0 9
45627: PUSH
45628: LD_INT 1
45630: ST_TO_ADDR
// if i_from > i_to then
45631: LD_VAR 0 2
45635: PUSH
45636: LD_VAR 0 3
45640: GREATER
45641: IFFALSE 45667
// length := ( array - i_from ) + i_to else
45643: LD_ADDR_VAR 0 11
45647: PUSH
45648: LD_VAR 0 1
45652: PUSH
45653: LD_VAR 0 2
45657: MINUS
45658: PUSH
45659: LD_VAR 0 3
45663: PLUS
45664: ST_TO_ADDR
45665: GO 45683
// length := i_to - i_from ;
45667: LD_ADDR_VAR 0 11
45671: PUSH
45672: LD_VAR 0 3
45676: PUSH
45677: LD_VAR 0 2
45681: MINUS
45682: ST_TO_ADDR
// end else
45683: GO 45746
// begin d := - 1 ;
45685: LD_ADDR_VAR 0 9
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: ST_TO_ADDR
// if i_from > i_to then
45694: LD_VAR 0 2
45698: PUSH
45699: LD_VAR 0 3
45703: GREATER
45704: IFFALSE 45724
// length := i_from - i_to else
45706: LD_ADDR_VAR 0 11
45710: PUSH
45711: LD_VAR 0 2
45715: PUSH
45716: LD_VAR 0 3
45720: MINUS
45721: ST_TO_ADDR
45722: GO 45746
// length := ( array - i_to ) + i_from ;
45724: LD_ADDR_VAR 0 11
45728: PUSH
45729: LD_VAR 0 1
45733: PUSH
45734: LD_VAR 0 3
45738: MINUS
45739: PUSH
45740: LD_VAR 0 2
45744: PLUS
45745: ST_TO_ADDR
// end ; if not length then
45746: LD_VAR 0 11
45750: NOT
45751: IFFALSE 45755
// exit ;
45753: GO 45913
// tmp := array ;
45755: LD_ADDR_VAR 0 10
45759: PUSH
45760: LD_VAR 0 1
45764: ST_TO_ADDR
// for i = 1 to length do
45765: LD_ADDR_VAR 0 6
45769: PUSH
45770: DOUBLE
45771: LD_INT 1
45773: DEC
45774: ST_TO_ADDR
45775: LD_VAR 0 11
45779: PUSH
45780: FOR_TO
45781: IFFALSE 45901
// begin for j = 1 to array do
45783: LD_ADDR_VAR 0 7
45787: PUSH
45788: DOUBLE
45789: LD_INT 1
45791: DEC
45792: ST_TO_ADDR
45793: LD_VAR 0 1
45797: PUSH
45798: FOR_TO
45799: IFFALSE 45887
// begin k := j + d ;
45801: LD_ADDR_VAR 0 8
45805: PUSH
45806: LD_VAR 0 7
45810: PUSH
45811: LD_VAR 0 9
45815: PLUS
45816: ST_TO_ADDR
// if k > array then
45817: LD_VAR 0 8
45821: PUSH
45822: LD_VAR 0 1
45826: GREATER
45827: IFFALSE 45837
// k := 1 ;
45829: LD_ADDR_VAR 0 8
45833: PUSH
45834: LD_INT 1
45836: ST_TO_ADDR
// if not k then
45837: LD_VAR 0 8
45841: NOT
45842: IFFALSE 45854
// k := array ;
45844: LD_ADDR_VAR 0 8
45848: PUSH
45849: LD_VAR 0 1
45853: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45854: LD_ADDR_VAR 0 10
45858: PUSH
45859: LD_VAR 0 10
45863: PPUSH
45864: LD_VAR 0 8
45868: PPUSH
45869: LD_VAR 0 1
45873: PUSH
45874: LD_VAR 0 7
45878: ARRAY
45879: PPUSH
45880: CALL_OW 1
45884: ST_TO_ADDR
// end ;
45885: GO 45798
45887: POP
45888: POP
// array := tmp ;
45889: LD_ADDR_VAR 0 1
45893: PUSH
45894: LD_VAR 0 10
45898: ST_TO_ADDR
// end ;
45899: GO 45780
45901: POP
45902: POP
// result := array ;
45903: LD_ADDR_VAR 0 5
45907: PUSH
45908: LD_VAR 0 1
45912: ST_TO_ADDR
// end ;
45913: LD_VAR 0 5
45917: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45918: LD_INT 0
45920: PPUSH
45921: PPUSH
// result := 0 ;
45922: LD_ADDR_VAR 0 3
45926: PUSH
45927: LD_INT 0
45929: ST_TO_ADDR
// if not array or not value in array then
45930: LD_VAR 0 1
45934: NOT
45935: IFTRUE 45950
45937: PUSH
45938: LD_VAR 0 2
45942: PUSH
45943: LD_VAR 0 1
45947: IN
45948: NOT
45949: OR
45950: IFFALSE 45954
// exit ;
45952: GO 46008
// for i = 1 to array do
45954: LD_ADDR_VAR 0 4
45958: PUSH
45959: DOUBLE
45960: LD_INT 1
45962: DEC
45963: ST_TO_ADDR
45964: LD_VAR 0 1
45968: PUSH
45969: FOR_TO
45970: IFFALSE 46006
// if value = array [ i ] then
45972: LD_VAR 0 2
45976: PUSH
45977: LD_VAR 0 1
45981: PUSH
45982: LD_VAR 0 4
45986: ARRAY
45987: EQUAL
45988: IFFALSE 46004
// begin result := i ;
45990: LD_ADDR_VAR 0 3
45994: PUSH
45995: LD_VAR 0 4
45999: ST_TO_ADDR
// exit ;
46000: POP
46001: POP
46002: GO 46008
// end ;
46004: GO 45969
46006: POP
46007: POP
// end ;
46008: LD_VAR 0 3
46012: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46013: LD_INT 0
46015: PPUSH
// vc_chassis := chassis ;
46016: LD_ADDR_OWVAR 37
46020: PUSH
46021: LD_VAR 0 1
46025: ST_TO_ADDR
// vc_engine := engine ;
46026: LD_ADDR_OWVAR 39
46030: PUSH
46031: LD_VAR 0 2
46035: ST_TO_ADDR
// vc_control := control ;
46036: LD_ADDR_OWVAR 38
46040: PUSH
46041: LD_VAR 0 3
46045: ST_TO_ADDR
// vc_weapon := weapon ;
46046: LD_ADDR_OWVAR 40
46050: PUSH
46051: LD_VAR 0 4
46055: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46056: LD_ADDR_OWVAR 41
46060: PUSH
46061: LD_VAR 0 5
46065: ST_TO_ADDR
// end ;
46066: LD_VAR 0 6
46070: RET
// export function WantPlant ( unit ) ; var task ; begin
46071: LD_INT 0
46073: PPUSH
46074: PPUSH
// result := false ;
46075: LD_ADDR_VAR 0 2
46079: PUSH
46080: LD_INT 0
46082: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46083: LD_ADDR_VAR 0 3
46087: PUSH
46088: LD_VAR 0 1
46092: PPUSH
46093: CALL_OW 437
46097: ST_TO_ADDR
// if task then
46098: LD_VAR 0 3
46102: IFFALSE 46130
// if task [ 1 ] [ 1 ] = p then
46104: LD_VAR 0 3
46108: PUSH
46109: LD_INT 1
46111: ARRAY
46112: PUSH
46113: LD_INT 1
46115: ARRAY
46116: PUSH
46117: LD_STRING p
46119: EQUAL
46120: IFFALSE 46130
// result := true ;
46122: LD_ADDR_VAR 0 2
46126: PUSH
46127: LD_INT 1
46129: ST_TO_ADDR
// end ;
46130: LD_VAR 0 2
46134: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46135: LD_INT 0
46137: PPUSH
46138: PPUSH
46139: PPUSH
46140: PPUSH
// if pos < 1 then
46141: LD_VAR 0 2
46145: PUSH
46146: LD_INT 1
46148: LESS
46149: IFFALSE 46153
// exit ;
46151: GO 46456
// if pos = 1 then
46153: LD_VAR 0 2
46157: PUSH
46158: LD_INT 1
46160: EQUAL
46161: IFFALSE 46194
// result := Replace ( arr , pos [ 1 ] , value ) else
46163: LD_ADDR_VAR 0 4
46167: PUSH
46168: LD_VAR 0 1
46172: PPUSH
46173: LD_VAR 0 2
46177: PUSH
46178: LD_INT 1
46180: ARRAY
46181: PPUSH
46182: LD_VAR 0 3
46186: PPUSH
46187: CALL_OW 1
46191: ST_TO_ADDR
46192: GO 46456
// begin tmp := arr ;
46194: LD_ADDR_VAR 0 6
46198: PUSH
46199: LD_VAR 0 1
46203: ST_TO_ADDR
// s_arr := [ tmp ] ;
46204: LD_ADDR_VAR 0 7
46208: PUSH
46209: LD_VAR 0 6
46213: PUSH
46214: EMPTY
46215: LIST
46216: ST_TO_ADDR
// for i = 1 to pos - 1 do
46217: LD_ADDR_VAR 0 5
46221: PUSH
46222: DOUBLE
46223: LD_INT 1
46225: DEC
46226: ST_TO_ADDR
46227: LD_VAR 0 2
46231: PUSH
46232: LD_INT 1
46234: MINUS
46235: PUSH
46236: FOR_TO
46237: IFFALSE 46282
// begin tmp := tmp [ pos [ i ] ] ;
46239: LD_ADDR_VAR 0 6
46243: PUSH
46244: LD_VAR 0 6
46248: PUSH
46249: LD_VAR 0 2
46253: PUSH
46254: LD_VAR 0 5
46258: ARRAY
46259: ARRAY
46260: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46261: LD_ADDR_VAR 0 7
46265: PUSH
46266: LD_VAR 0 7
46270: PUSH
46271: LD_VAR 0 6
46275: PUSH
46276: EMPTY
46277: LIST
46278: ADD
46279: ST_TO_ADDR
// end ;
46280: GO 46236
46282: POP
46283: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46284: LD_ADDR_VAR 0 6
46288: PUSH
46289: LD_VAR 0 6
46293: PPUSH
46294: LD_VAR 0 2
46298: PUSH
46299: LD_VAR 0 2
46303: ARRAY
46304: PPUSH
46305: LD_VAR 0 3
46309: PPUSH
46310: CALL_OW 1
46314: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46315: LD_ADDR_VAR 0 7
46319: PUSH
46320: LD_VAR 0 7
46324: PPUSH
46325: LD_VAR 0 7
46329: PPUSH
46330: LD_VAR 0 6
46334: PPUSH
46335: CALL_OW 1
46339: ST_TO_ADDR
// for i = s_arr downto 2 do
46340: LD_ADDR_VAR 0 5
46344: PUSH
46345: DOUBLE
46346: LD_VAR 0 7
46350: INC
46351: ST_TO_ADDR
46352: LD_INT 2
46354: PUSH
46355: FOR_DOWNTO
46356: IFFALSE 46440
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46358: LD_ADDR_VAR 0 6
46362: PUSH
46363: LD_VAR 0 7
46367: PUSH
46368: LD_VAR 0 5
46372: PUSH
46373: LD_INT 1
46375: MINUS
46376: ARRAY
46377: PPUSH
46378: LD_VAR 0 2
46382: PUSH
46383: LD_VAR 0 5
46387: PUSH
46388: LD_INT 1
46390: MINUS
46391: ARRAY
46392: PPUSH
46393: LD_VAR 0 7
46397: PUSH
46398: LD_VAR 0 5
46402: ARRAY
46403: PPUSH
46404: CALL_OW 1
46408: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46409: LD_ADDR_VAR 0 7
46413: PUSH
46414: LD_VAR 0 7
46418: PPUSH
46419: LD_VAR 0 5
46423: PUSH
46424: LD_INT 1
46426: MINUS
46427: PPUSH
46428: LD_VAR 0 6
46432: PPUSH
46433: CALL_OW 1
46437: ST_TO_ADDR
// end ;
46438: GO 46355
46440: POP
46441: POP
// result := s_arr [ 1 ] ;
46442: LD_ADDR_VAR 0 4
46446: PUSH
46447: LD_VAR 0 7
46451: PUSH
46452: LD_INT 1
46454: ARRAY
46455: ST_TO_ADDR
// end ; end ;
46456: LD_VAR 0 4
46460: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46461: LD_INT 0
46463: PPUSH
46464: PPUSH
// if not list then
46465: LD_VAR 0 1
46469: NOT
46470: IFFALSE 46474
// exit ;
46472: GO 46565
// i := list [ pos1 ] ;
46474: LD_ADDR_VAR 0 5
46478: PUSH
46479: LD_VAR 0 1
46483: PUSH
46484: LD_VAR 0 2
46488: ARRAY
46489: ST_TO_ADDR
// if not i then
46490: LD_VAR 0 5
46494: NOT
46495: IFFALSE 46499
// exit ;
46497: GO 46565
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46499: LD_ADDR_VAR 0 1
46503: PUSH
46504: LD_VAR 0 1
46508: PPUSH
46509: LD_VAR 0 2
46513: PPUSH
46514: LD_VAR 0 1
46518: PUSH
46519: LD_VAR 0 3
46523: ARRAY
46524: PPUSH
46525: CALL_OW 1
46529: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46530: LD_ADDR_VAR 0 1
46534: PUSH
46535: LD_VAR 0 1
46539: PPUSH
46540: LD_VAR 0 3
46544: PPUSH
46545: LD_VAR 0 5
46549: PPUSH
46550: CALL_OW 1
46554: ST_TO_ADDR
// result := list ;
46555: LD_ADDR_VAR 0 4
46559: PUSH
46560: LD_VAR 0 1
46564: ST_TO_ADDR
// end ;
46565: LD_VAR 0 4
46569: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46570: LD_INT 0
46572: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46573: LD_ADDR_VAR 0 5
46577: PUSH
46578: LD_VAR 0 1
46582: PPUSH
46583: CALL_OW 250
46587: PPUSH
46588: LD_VAR 0 1
46592: PPUSH
46593: CALL_OW 251
46597: PPUSH
46598: LD_VAR 0 2
46602: PPUSH
46603: LD_VAR 0 3
46607: PPUSH
46608: LD_VAR 0 4
46612: PPUSH
46613: CALL 46995 0 5
46617: ST_TO_ADDR
// end ;
46618: LD_VAR 0 5
46622: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46623: LD_INT 0
46625: PPUSH
46626: PPUSH
46627: PPUSH
46628: PPUSH
// if not list or not unit then
46629: LD_VAR 0 2
46633: NOT
46634: IFTRUE 46643
46636: PUSH
46637: LD_VAR 0 1
46641: NOT
46642: OR
46643: IFFALSE 46647
// exit ;
46645: GO 46990
// result := [ ] ;
46647: LD_ADDR_VAR 0 5
46651: PUSH
46652: EMPTY
46653: ST_TO_ADDR
// for i in list do
46654: LD_ADDR_VAR 0 6
46658: PUSH
46659: LD_VAR 0 2
46663: PUSH
46664: FOR_IN
46665: IFFALSE 46883
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46667: LD_ADDR_VAR 0 8
46671: PUSH
46672: LD_VAR 0 1
46676: PPUSH
46677: LD_VAR 0 6
46681: PUSH
46682: LD_INT 1
46684: ARRAY
46685: PPUSH
46686: LD_VAR 0 6
46690: PUSH
46691: LD_INT 2
46693: ARRAY
46694: PPUSH
46695: CALL_OW 297
46699: ST_TO_ADDR
// if not Count ( result ) then
46700: LD_VAR 0 5
46704: PPUSH
46705: CALL 43251 0 1
46709: NOT
46710: IFFALSE 46743
// begin result := Join ( result , [ i , tmp ] ) ;
46712: LD_ADDR_VAR 0 5
46716: PUSH
46717: LD_VAR 0 5
46721: PPUSH
46722: LD_VAR 0 6
46726: PUSH
46727: LD_VAR 0 8
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PPUSH
46736: CALL 79183 0 2
46740: ST_TO_ADDR
// continue ;
46741: GO 46664
// end ; if result [ result ] [ 2 ] <= tmp then
46743: LD_VAR 0 5
46747: PUSH
46748: LD_VAR 0 5
46752: ARRAY
46753: PUSH
46754: LD_INT 2
46756: ARRAY
46757: PUSH
46758: LD_VAR 0 8
46762: LESSEQUAL
46763: IFFALSE 46796
// result := Join ( result , [ i , tmp ] ) else
46765: LD_ADDR_VAR 0 5
46769: PUSH
46770: LD_VAR 0 5
46774: PPUSH
46775: LD_VAR 0 6
46779: PUSH
46780: LD_VAR 0 8
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PPUSH
46789: CALL 79183 0 2
46793: ST_TO_ADDR
46794: GO 46881
// begin for j := 1 to Count ( result ) do
46796: LD_ADDR_VAR 0 7
46800: PUSH
46801: DOUBLE
46802: LD_INT 1
46804: DEC
46805: ST_TO_ADDR
46806: LD_VAR 0 5
46810: PPUSH
46811: CALL 43251 0 1
46815: PUSH
46816: FOR_TO
46817: IFFALSE 46879
// begin if tmp < result [ j ] [ 2 ] then
46819: LD_VAR 0 8
46823: PUSH
46824: LD_VAR 0 5
46828: PUSH
46829: LD_VAR 0 7
46833: ARRAY
46834: PUSH
46835: LD_INT 2
46837: ARRAY
46838: LESS
46839: IFFALSE 46877
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46841: LD_ADDR_VAR 0 5
46845: PUSH
46846: LD_VAR 0 5
46850: PPUSH
46851: LD_VAR 0 7
46855: PPUSH
46856: LD_VAR 0 6
46860: PUSH
46861: LD_VAR 0 8
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PPUSH
46870: CALL_OW 2
46874: ST_TO_ADDR
// break ;
46875: GO 46879
// end ; end ;
46877: GO 46816
46879: POP
46880: POP
// end ; end ;
46881: GO 46664
46883: POP
46884: POP
// if result and not asc then
46885: LD_VAR 0 5
46889: IFFALSE 46898
46891: PUSH
46892: LD_VAR 0 3
46896: NOT
46897: AND
46898: IFFALSE 46915
// result := ReverseArray ( result ) ;
46900: LD_ADDR_VAR 0 5
46904: PUSH
46905: LD_VAR 0 5
46909: PPUSH
46910: CALL 74273 0 1
46914: ST_TO_ADDR
// tmp := [ ] ;
46915: LD_ADDR_VAR 0 8
46919: PUSH
46920: EMPTY
46921: ST_TO_ADDR
// if mode then
46922: LD_VAR 0 4
46926: IFFALSE 46990
// begin for i := 1 to result do
46928: LD_ADDR_VAR 0 6
46932: PUSH
46933: DOUBLE
46934: LD_INT 1
46936: DEC
46937: ST_TO_ADDR
46938: LD_VAR 0 5
46942: PUSH
46943: FOR_TO
46944: IFFALSE 46978
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46946: LD_ADDR_VAR 0 8
46950: PUSH
46951: LD_VAR 0 8
46955: PPUSH
46956: LD_VAR 0 5
46960: PUSH
46961: LD_VAR 0 6
46965: ARRAY
46966: PUSH
46967: LD_INT 1
46969: ARRAY
46970: PPUSH
46971: CALL 79183 0 2
46975: ST_TO_ADDR
46976: GO 46943
46978: POP
46979: POP
// result := tmp ;
46980: LD_ADDR_VAR 0 5
46984: PUSH
46985: LD_VAR 0 8
46989: ST_TO_ADDR
// end ; end ;
46990: LD_VAR 0 5
46994: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46995: LD_INT 0
46997: PPUSH
46998: PPUSH
46999: PPUSH
47000: PPUSH
// if not list then
47001: LD_VAR 0 3
47005: NOT
47006: IFFALSE 47010
// exit ;
47008: GO 47400
// result := [ ] ;
47010: LD_ADDR_VAR 0 6
47014: PUSH
47015: EMPTY
47016: ST_TO_ADDR
// for i in list do
47017: LD_ADDR_VAR 0 7
47021: PUSH
47022: LD_VAR 0 3
47026: PUSH
47027: FOR_IN
47028: IFFALSE 47230
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47030: LD_ADDR_VAR 0 9
47034: PUSH
47035: LD_VAR 0 7
47039: PPUSH
47040: LD_VAR 0 1
47044: PPUSH
47045: LD_VAR 0 2
47049: PPUSH
47050: CALL_OW 297
47054: ST_TO_ADDR
// if not result then
47055: LD_VAR 0 6
47059: NOT
47060: IFFALSE 47086
// result := [ [ i , tmp ] ] else
47062: LD_ADDR_VAR 0 6
47066: PUSH
47067: LD_VAR 0 7
47071: PUSH
47072: LD_VAR 0 9
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: EMPTY
47082: LIST
47083: ST_TO_ADDR
47084: GO 47228
// begin if result [ result ] [ 2 ] <= tmp then
47086: LD_VAR 0 6
47090: PUSH
47091: LD_VAR 0 6
47095: ARRAY
47096: PUSH
47097: LD_INT 2
47099: ARRAY
47100: PUSH
47101: LD_VAR 0 9
47105: LESSEQUAL
47106: IFFALSE 47148
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47108: LD_ADDR_VAR 0 6
47112: PUSH
47113: LD_VAR 0 6
47117: PPUSH
47118: LD_VAR 0 6
47122: PUSH
47123: LD_INT 1
47125: PLUS
47126: PPUSH
47127: LD_VAR 0 7
47131: PUSH
47132: LD_VAR 0 9
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PPUSH
47141: CALL_OW 2
47145: ST_TO_ADDR
47146: GO 47228
// for j := 1 to result do
47148: LD_ADDR_VAR 0 8
47152: PUSH
47153: DOUBLE
47154: LD_INT 1
47156: DEC
47157: ST_TO_ADDR
47158: LD_VAR 0 6
47162: PUSH
47163: FOR_TO
47164: IFFALSE 47226
// begin if tmp < result [ j ] [ 2 ] then
47166: LD_VAR 0 9
47170: PUSH
47171: LD_VAR 0 6
47175: PUSH
47176: LD_VAR 0 8
47180: ARRAY
47181: PUSH
47182: LD_INT 2
47184: ARRAY
47185: LESS
47186: IFFALSE 47224
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47188: LD_ADDR_VAR 0 6
47192: PUSH
47193: LD_VAR 0 6
47197: PPUSH
47198: LD_VAR 0 8
47202: PPUSH
47203: LD_VAR 0 7
47207: PUSH
47208: LD_VAR 0 9
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PPUSH
47217: CALL_OW 2
47221: ST_TO_ADDR
// break ;
47222: GO 47226
// end ; end ;
47224: GO 47163
47226: POP
47227: POP
// end ; end ;
47228: GO 47027
47230: POP
47231: POP
// if result and not asc then
47232: LD_VAR 0 6
47236: IFFALSE 47245
47238: PUSH
47239: LD_VAR 0 4
47243: NOT
47244: AND
47245: IFFALSE 47320
// begin tmp := result ;
47247: LD_ADDR_VAR 0 9
47251: PUSH
47252: LD_VAR 0 6
47256: ST_TO_ADDR
// for i = tmp downto 1 do
47257: LD_ADDR_VAR 0 7
47261: PUSH
47262: DOUBLE
47263: LD_VAR 0 9
47267: INC
47268: ST_TO_ADDR
47269: LD_INT 1
47271: PUSH
47272: FOR_DOWNTO
47273: IFFALSE 47318
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47275: LD_ADDR_VAR 0 6
47279: PUSH
47280: LD_VAR 0 6
47284: PPUSH
47285: LD_VAR 0 9
47289: PUSH
47290: LD_VAR 0 7
47294: MINUS
47295: PUSH
47296: LD_INT 1
47298: PLUS
47299: PPUSH
47300: LD_VAR 0 9
47304: PUSH
47305: LD_VAR 0 7
47309: ARRAY
47310: PPUSH
47311: CALL_OW 1
47315: ST_TO_ADDR
47316: GO 47272
47318: POP
47319: POP
// end ; tmp := [ ] ;
47320: LD_ADDR_VAR 0 9
47324: PUSH
47325: EMPTY
47326: ST_TO_ADDR
// if mode then
47327: LD_VAR 0 5
47331: IFFALSE 47400
// begin for i = 1 to result do
47333: LD_ADDR_VAR 0 7
47337: PUSH
47338: DOUBLE
47339: LD_INT 1
47341: DEC
47342: ST_TO_ADDR
47343: LD_VAR 0 6
47347: PUSH
47348: FOR_TO
47349: IFFALSE 47388
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47351: LD_ADDR_VAR 0 9
47355: PUSH
47356: LD_VAR 0 9
47360: PPUSH
47361: LD_VAR 0 7
47365: PPUSH
47366: LD_VAR 0 6
47370: PUSH
47371: LD_VAR 0 7
47375: ARRAY
47376: PUSH
47377: LD_INT 1
47379: ARRAY
47380: PPUSH
47381: CALL_OW 1
47385: ST_TO_ADDR
47386: GO 47348
47388: POP
47389: POP
// result := tmp ;
47390: LD_ADDR_VAR 0 6
47394: PUSH
47395: LD_VAR 0 9
47399: ST_TO_ADDR
// end ; end ;
47400: LD_VAR 0 6
47404: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47405: LD_INT 0
47407: PPUSH
47408: PPUSH
47409: PPUSH
47410: PPUSH
47411: PPUSH
47412: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47413: LD_ADDR_VAR 0 5
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: EMPTY
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: ST_TO_ADDR
// if not x or not y then
47435: LD_VAR 0 2
47439: NOT
47440: IFTRUE 47449
47442: PUSH
47443: LD_VAR 0 3
47447: NOT
47448: OR
47449: IFFALSE 47453
// exit ;
47451: GO 49109
// if not range then
47453: LD_VAR 0 4
47457: NOT
47458: IFFALSE 47468
// range := 10 ;
47460: LD_ADDR_VAR 0 4
47464: PUSH
47465: LD_INT 10
47467: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47468: LD_ADDR_VAR 0 8
47472: PUSH
47473: LD_INT 81
47475: PUSH
47476: LD_VAR 0 1
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 92
47487: PUSH
47488: LD_VAR 0 2
47492: PUSH
47493: LD_VAR 0 3
47497: PUSH
47498: LD_VAR 0 4
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 3
47511: PUSH
47512: LD_INT 21
47514: PUSH
47515: LD_INT 3
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: LIST
47530: PPUSH
47531: CALL_OW 69
47535: ST_TO_ADDR
// if not tmp then
47536: LD_VAR 0 8
47540: NOT
47541: IFFALSE 47545
// exit ;
47543: GO 49109
// for i in tmp do
47545: LD_ADDR_VAR 0 6
47549: PUSH
47550: LD_VAR 0 8
47554: PUSH
47555: FOR_IN
47556: IFFALSE 49084
// begin points := [ 0 , 0 , 0 ] ;
47558: LD_ADDR_VAR 0 9
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: LIST
47576: ST_TO_ADDR
// bpoints := 1 ;
47577: LD_ADDR_VAR 0 10
47581: PUSH
47582: LD_INT 1
47584: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47585: LD_VAR 0 6
47589: PPUSH
47590: CALL_OW 247
47594: PUSH
47595: LD_INT 1
47597: DOUBLE
47598: EQUAL
47599: IFTRUE 47603
47601: GO 48185
47603: POP
// begin if GetClass ( i ) = 1 then
47604: LD_VAR 0 6
47608: PPUSH
47609: CALL_OW 257
47613: PUSH
47614: LD_INT 1
47616: EQUAL
47617: IFFALSE 47638
// points := [ 10 , 5 , 3 ] ;
47619: LD_ADDR_VAR 0 9
47623: PUSH
47624: LD_INT 10
47626: PUSH
47627: LD_INT 5
47629: PUSH
47630: LD_INT 3
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: LIST
47637: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47638: LD_VAR 0 6
47642: PPUSH
47643: CALL_OW 257
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: LD_INT 3
47653: PUSH
47654: LD_INT 4
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: LIST
47661: IN
47662: IFFALSE 47683
// points := [ 3 , 2 , 1 ] ;
47664: LD_ADDR_VAR 0 9
47668: PUSH
47669: LD_INT 3
47671: PUSH
47672: LD_INT 2
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: LIST
47682: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47683: LD_VAR 0 6
47687: PPUSH
47688: CALL_OW 257
47692: PUSH
47693: LD_INT 5
47695: EQUAL
47696: IFFALSE 47717
// points := [ 130 , 5 , 2 ] ;
47698: LD_ADDR_VAR 0 9
47702: PUSH
47703: LD_INT 130
47705: PUSH
47706: LD_INT 5
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: LIST
47716: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47717: LD_VAR 0 6
47721: PPUSH
47722: CALL_OW 257
47726: PUSH
47727: LD_INT 8
47729: EQUAL
47730: IFFALSE 47751
// points := [ 35 , 35 , 30 ] ;
47732: LD_ADDR_VAR 0 9
47736: PUSH
47737: LD_INT 35
47739: PUSH
47740: LD_INT 35
47742: PUSH
47743: LD_INT 30
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: LIST
47750: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47751: LD_VAR 0 6
47755: PPUSH
47756: CALL_OW 257
47760: PUSH
47761: LD_INT 9
47763: EQUAL
47764: IFFALSE 47785
// points := [ 20 , 55 , 40 ] ;
47766: LD_ADDR_VAR 0 9
47770: PUSH
47771: LD_INT 20
47773: PUSH
47774: LD_INT 55
47776: PUSH
47777: LD_INT 40
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: LIST
47784: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47785: LD_VAR 0 6
47789: PPUSH
47790: CALL_OW 257
47794: PUSH
47795: LD_INT 12
47797: PUSH
47798: LD_INT 16
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: IN
47805: IFFALSE 47826
// points := [ 5 , 3 , 2 ] ;
47807: LD_ADDR_VAR 0 9
47811: PUSH
47812: LD_INT 5
47814: PUSH
47815: LD_INT 3
47817: PUSH
47818: LD_INT 2
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: LIST
47825: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47826: LD_VAR 0 6
47830: PPUSH
47831: CALL_OW 257
47835: PUSH
47836: LD_INT 17
47838: EQUAL
47839: IFFALSE 47860
// points := [ 100 , 50 , 75 ] ;
47841: LD_ADDR_VAR 0 9
47845: PUSH
47846: LD_INT 100
47848: PUSH
47849: LD_INT 50
47851: PUSH
47852: LD_INT 75
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: LIST
47859: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47860: LD_VAR 0 6
47864: PPUSH
47865: CALL_OW 257
47869: PUSH
47870: LD_INT 15
47872: EQUAL
47873: IFFALSE 47894
// points := [ 10 , 5 , 3 ] ;
47875: LD_ADDR_VAR 0 9
47879: PUSH
47880: LD_INT 10
47882: PUSH
47883: LD_INT 5
47885: PUSH
47886: LD_INT 3
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: LIST
47893: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47894: LD_VAR 0 6
47898: PPUSH
47899: CALL_OW 257
47903: PUSH
47904: LD_INT 14
47906: EQUAL
47907: IFFALSE 47928
// points := [ 10 , 0 , 0 ] ;
47909: LD_ADDR_VAR 0 9
47913: PUSH
47914: LD_INT 10
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: LIST
47927: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47928: LD_VAR 0 6
47932: PPUSH
47933: CALL_OW 257
47937: PUSH
47938: LD_INT 11
47940: EQUAL
47941: IFFALSE 47962
// points := [ 30 , 10 , 5 ] ;
47943: LD_ADDR_VAR 0 9
47947: PUSH
47948: LD_INT 30
47950: PUSH
47951: LD_INT 10
47953: PUSH
47954: LD_INT 5
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: LIST
47961: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47962: LD_VAR 0 1
47966: PPUSH
47967: LD_INT 5
47969: PPUSH
47970: CALL_OW 321
47974: PUSH
47975: LD_INT 2
47977: EQUAL
47978: IFFALSE 47995
// bpoints := bpoints * 1.8 ;
47980: LD_ADDR_VAR 0 10
47984: PUSH
47985: LD_VAR 0 10
47989: PUSH
47990: LD_REAL  1.80000000000000E+0000
47993: MUL
47994: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47995: LD_VAR 0 6
47999: PPUSH
48000: CALL_OW 257
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: LD_INT 3
48013: PUSH
48014: LD_INT 4
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: IN
48023: IFFALSE 48043
48025: PUSH
48026: LD_VAR 0 1
48030: PPUSH
48031: LD_INT 51
48033: PPUSH
48034: CALL_OW 321
48038: PUSH
48039: LD_INT 2
48041: EQUAL
48042: AND
48043: IFFALSE 48060
// bpoints := bpoints * 1.2 ;
48045: LD_ADDR_VAR 0 10
48049: PUSH
48050: LD_VAR 0 10
48054: PUSH
48055: LD_REAL  1.20000000000000E+0000
48058: MUL
48059: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48060: LD_VAR 0 6
48064: PPUSH
48065: CALL_OW 257
48069: PUSH
48070: LD_INT 5
48072: PUSH
48073: LD_INT 7
48075: PUSH
48076: LD_INT 9
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: LIST
48083: IN
48084: IFFALSE 48104
48086: PUSH
48087: LD_VAR 0 1
48091: PPUSH
48092: LD_INT 52
48094: PPUSH
48095: CALL_OW 321
48099: PUSH
48100: LD_INT 2
48102: EQUAL
48103: AND
48104: IFFALSE 48121
// bpoints := bpoints * 1.5 ;
48106: LD_ADDR_VAR 0 10
48110: PUSH
48111: LD_VAR 0 10
48115: PUSH
48116: LD_REAL  1.50000000000000E+0000
48119: MUL
48120: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48121: LD_VAR 0 1
48125: PPUSH
48126: LD_INT 66
48128: PPUSH
48129: CALL_OW 321
48133: PUSH
48134: LD_INT 2
48136: EQUAL
48137: IFFALSE 48154
// bpoints := bpoints * 1.1 ;
48139: LD_ADDR_VAR 0 10
48143: PUSH
48144: LD_VAR 0 10
48148: PUSH
48149: LD_REAL  1.10000000000000E+0000
48152: MUL
48153: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48154: LD_ADDR_VAR 0 10
48158: PUSH
48159: LD_VAR 0 10
48163: PUSH
48164: LD_VAR 0 6
48168: PPUSH
48169: LD_INT 1
48171: PPUSH
48172: CALL_OW 259
48176: PUSH
48177: LD_REAL  1.15000000000000E+0000
48180: MUL
48181: MUL
48182: ST_TO_ADDR
// end ; unit_vehicle :
48183: GO 49013
48185: LD_INT 2
48187: DOUBLE
48188: EQUAL
48189: IFTRUE 48193
48191: GO 49001
48193: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48194: LD_VAR 0 6
48198: PPUSH
48199: CALL_OW 264
48203: PUSH
48204: LD_INT 2
48206: PUSH
48207: LD_INT 42
48209: PUSH
48210: LD_INT 24
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: LIST
48217: IN
48218: IFFALSE 48239
// points := [ 25 , 5 , 3 ] ;
48220: LD_ADDR_VAR 0 9
48224: PUSH
48225: LD_INT 25
48227: PUSH
48228: LD_INT 5
48230: PUSH
48231: LD_INT 3
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: LIST
48238: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48239: LD_VAR 0 6
48243: PPUSH
48244: CALL_OW 264
48248: PUSH
48249: LD_INT 4
48251: PUSH
48252: LD_INT 43
48254: PUSH
48255: LD_INT 25
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: LIST
48262: IN
48263: IFFALSE 48284
// points := [ 40 , 15 , 5 ] ;
48265: LD_ADDR_VAR 0 9
48269: PUSH
48270: LD_INT 40
48272: PUSH
48273: LD_INT 15
48275: PUSH
48276: LD_INT 5
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: LIST
48283: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48284: LD_VAR 0 6
48288: PPUSH
48289: CALL_OW 264
48293: PUSH
48294: LD_INT 3
48296: PUSH
48297: LD_INT 23
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: IN
48304: IFFALSE 48325
// points := [ 7 , 25 , 8 ] ;
48306: LD_ADDR_VAR 0 9
48310: PUSH
48311: LD_INT 7
48313: PUSH
48314: LD_INT 25
48316: PUSH
48317: LD_INT 8
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: LIST
48324: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48325: LD_VAR 0 6
48329: PPUSH
48330: CALL_OW 264
48334: PUSH
48335: LD_INT 5
48337: PUSH
48338: LD_INT 27
48340: PUSH
48341: LD_INT 44
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: LIST
48348: IN
48349: IFFALSE 48370
// points := [ 14 , 50 , 16 ] ;
48351: LD_ADDR_VAR 0 9
48355: PUSH
48356: LD_INT 14
48358: PUSH
48359: LD_INT 50
48361: PUSH
48362: LD_INT 16
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: LIST
48369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48370: LD_VAR 0 6
48374: PPUSH
48375: CALL_OW 264
48379: PUSH
48380: LD_INT 6
48382: PUSH
48383: LD_INT 46
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: IN
48390: IFFALSE 48411
// points := [ 32 , 120 , 70 ] ;
48392: LD_ADDR_VAR 0 9
48396: PUSH
48397: LD_INT 32
48399: PUSH
48400: LD_INT 120
48402: PUSH
48403: LD_INT 70
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: LIST
48410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48411: LD_VAR 0 6
48415: PPUSH
48416: CALL_OW 264
48420: PUSH
48421: LD_INT 7
48423: PUSH
48424: LD_INT 28
48426: PUSH
48427: LD_INT 45
48429: PUSH
48430: LD_INT 92
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: IN
48439: IFFALSE 48460
// points := [ 35 , 20 , 45 ] ;
48441: LD_ADDR_VAR 0 9
48445: PUSH
48446: LD_INT 35
48448: PUSH
48449: LD_INT 20
48451: PUSH
48452: LD_INT 45
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: LIST
48459: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48460: LD_VAR 0 6
48464: PPUSH
48465: CALL_OW 264
48469: PUSH
48470: LD_INT 47
48472: PUSH
48473: EMPTY
48474: LIST
48475: IN
48476: IFFALSE 48497
// points := [ 67 , 45 , 75 ] ;
48478: LD_ADDR_VAR 0 9
48482: PUSH
48483: LD_INT 67
48485: PUSH
48486: LD_INT 45
48488: PUSH
48489: LD_INT 75
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: LIST
48496: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48497: LD_VAR 0 6
48501: PPUSH
48502: CALL_OW 264
48506: PUSH
48507: LD_INT 26
48509: PUSH
48510: EMPTY
48511: LIST
48512: IN
48513: IFFALSE 48534
// points := [ 120 , 30 , 80 ] ;
48515: LD_ADDR_VAR 0 9
48519: PUSH
48520: LD_INT 120
48522: PUSH
48523: LD_INT 30
48525: PUSH
48526: LD_INT 80
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: LIST
48533: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48534: LD_VAR 0 6
48538: PPUSH
48539: CALL_OW 264
48543: PUSH
48544: LD_INT 22
48546: PUSH
48547: EMPTY
48548: LIST
48549: IN
48550: IFFALSE 48571
// points := [ 40 , 1 , 1 ] ;
48552: LD_ADDR_VAR 0 9
48556: PUSH
48557: LD_INT 40
48559: PUSH
48560: LD_INT 1
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: LIST
48570: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48571: LD_VAR 0 6
48575: PPUSH
48576: CALL_OW 264
48580: PUSH
48581: LD_INT 29
48583: PUSH
48584: EMPTY
48585: LIST
48586: IN
48587: IFFALSE 48608
// points := [ 70 , 200 , 400 ] ;
48589: LD_ADDR_VAR 0 9
48593: PUSH
48594: LD_INT 70
48596: PUSH
48597: LD_INT 200
48599: PUSH
48600: LD_INT 400
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: LIST
48607: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48608: LD_VAR 0 6
48612: PPUSH
48613: CALL_OW 264
48617: PUSH
48618: LD_INT 14
48620: PUSH
48621: LD_INT 53
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: IN
48628: IFFALSE 48649
// points := [ 40 , 10 , 20 ] ;
48630: LD_ADDR_VAR 0 9
48634: PUSH
48635: LD_INT 40
48637: PUSH
48638: LD_INT 10
48640: PUSH
48641: LD_INT 20
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: LIST
48648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48649: LD_VAR 0 6
48653: PPUSH
48654: CALL_OW 264
48658: PUSH
48659: LD_INT 9
48661: PUSH
48662: EMPTY
48663: LIST
48664: IN
48665: IFFALSE 48686
// points := [ 5 , 70 , 20 ] ;
48667: LD_ADDR_VAR 0 9
48671: PUSH
48672: LD_INT 5
48674: PUSH
48675: LD_INT 70
48677: PUSH
48678: LD_INT 20
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: LIST
48685: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48686: LD_VAR 0 6
48690: PPUSH
48691: CALL_OW 264
48695: PUSH
48696: LD_INT 10
48698: PUSH
48699: EMPTY
48700: LIST
48701: IN
48702: IFFALSE 48723
// points := [ 35 , 110 , 70 ] ;
48704: LD_ADDR_VAR 0 9
48708: PUSH
48709: LD_INT 35
48711: PUSH
48712: LD_INT 110
48714: PUSH
48715: LD_INT 70
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: LIST
48722: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48723: LD_VAR 0 6
48727: PPUSH
48728: CALL_OW 265
48732: PUSH
48733: LD_INT 25
48735: EQUAL
48736: IFFALSE 48757
// points := [ 80 , 65 , 100 ] ;
48738: LD_ADDR_VAR 0 9
48742: PUSH
48743: LD_INT 80
48745: PUSH
48746: LD_INT 65
48748: PUSH
48749: LD_INT 100
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: LIST
48756: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48757: LD_VAR 0 6
48761: PPUSH
48762: CALL_OW 263
48766: PUSH
48767: LD_INT 1
48769: EQUAL
48770: IFFALSE 48805
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48772: LD_ADDR_VAR 0 10
48776: PUSH
48777: LD_VAR 0 10
48781: PUSH
48782: LD_VAR 0 6
48786: PPUSH
48787: CALL_OW 311
48791: PPUSH
48792: LD_INT 3
48794: PPUSH
48795: CALL_OW 259
48799: PUSH
48800: LD_INT 4
48802: MUL
48803: MUL
48804: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48805: LD_VAR 0 6
48809: PPUSH
48810: CALL_OW 263
48814: PUSH
48815: LD_INT 2
48817: EQUAL
48818: IFFALSE 48869
// begin j := IsControledBy ( i ) ;
48820: LD_ADDR_VAR 0 7
48824: PUSH
48825: LD_VAR 0 6
48829: PPUSH
48830: CALL_OW 312
48834: ST_TO_ADDR
// if j then
48835: LD_VAR 0 7
48839: IFFALSE 48869
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48841: LD_ADDR_VAR 0 10
48845: PUSH
48846: LD_VAR 0 10
48850: PUSH
48851: LD_VAR 0 7
48855: PPUSH
48856: LD_INT 3
48858: PPUSH
48859: CALL_OW 259
48863: PUSH
48864: LD_INT 3
48866: MUL
48867: MUL
48868: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48869: LD_VAR 0 6
48873: PPUSH
48874: CALL_OW 264
48878: PUSH
48879: LD_INT 5
48881: PUSH
48882: LD_INT 6
48884: PUSH
48885: LD_INT 46
48887: PUSH
48888: LD_INT 44
48890: PUSH
48891: LD_INT 47
48893: PUSH
48894: LD_INT 45
48896: PUSH
48897: LD_INT 28
48899: PUSH
48900: LD_INT 7
48902: PUSH
48903: LD_INT 27
48905: PUSH
48906: LD_INT 29
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: IN
48921: IFFALSE 48941
48923: PUSH
48924: LD_VAR 0 1
48928: PPUSH
48929: LD_INT 52
48931: PPUSH
48932: CALL_OW 321
48936: PUSH
48937: LD_INT 2
48939: EQUAL
48940: AND
48941: IFFALSE 48958
// bpoints := bpoints * 1.2 ;
48943: LD_ADDR_VAR 0 10
48947: PUSH
48948: LD_VAR 0 10
48952: PUSH
48953: LD_REAL  1.20000000000000E+0000
48956: MUL
48957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48958: LD_VAR 0 6
48962: PPUSH
48963: CALL_OW 264
48967: PUSH
48968: LD_INT 6
48970: PUSH
48971: LD_INT 46
48973: PUSH
48974: LD_INT 47
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: LIST
48981: IN
48982: IFFALSE 48999
// bpoints := bpoints * 1.2 ;
48984: LD_ADDR_VAR 0 10
48988: PUSH
48989: LD_VAR 0 10
48993: PUSH
48994: LD_REAL  1.20000000000000E+0000
48997: MUL
48998: ST_TO_ADDR
// end ; unit_building :
48999: GO 49013
49001: LD_INT 3
49003: DOUBLE
49004: EQUAL
49005: IFTRUE 49009
49007: GO 49012
49009: POP
// ; end ;
49010: GO 49013
49012: POP
// for j = 1 to 3 do
49013: LD_ADDR_VAR 0 7
49017: PUSH
49018: DOUBLE
49019: LD_INT 1
49021: DEC
49022: ST_TO_ADDR
49023: LD_INT 3
49025: PUSH
49026: FOR_TO
49027: IFFALSE 49080
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49029: LD_ADDR_VAR 0 5
49033: PUSH
49034: LD_VAR 0 5
49038: PPUSH
49039: LD_VAR 0 7
49043: PPUSH
49044: LD_VAR 0 5
49048: PUSH
49049: LD_VAR 0 7
49053: ARRAY
49054: PUSH
49055: LD_VAR 0 9
49059: PUSH
49060: LD_VAR 0 7
49064: ARRAY
49065: PUSH
49066: LD_VAR 0 10
49070: MUL
49071: PLUS
49072: PPUSH
49073: CALL_OW 1
49077: ST_TO_ADDR
49078: GO 49026
49080: POP
49081: POP
// end ;
49082: GO 47555
49084: POP
49085: POP
// result := Replace ( result , 4 , tmp ) ;
49086: LD_ADDR_VAR 0 5
49090: PUSH
49091: LD_VAR 0 5
49095: PPUSH
49096: LD_INT 4
49098: PPUSH
49099: LD_VAR 0 8
49103: PPUSH
49104: CALL_OW 1
49108: ST_TO_ADDR
// end ;
49109: LD_VAR 0 5
49113: RET
// export function DangerAtRange ( unit , range ) ; begin
49114: LD_INT 0
49116: PPUSH
// if not unit then
49117: LD_VAR 0 1
49121: NOT
49122: IFFALSE 49126
// exit ;
49124: GO 49171
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49126: LD_ADDR_VAR 0 3
49130: PUSH
49131: LD_VAR 0 1
49135: PPUSH
49136: CALL_OW 255
49140: PPUSH
49141: LD_VAR 0 1
49145: PPUSH
49146: CALL_OW 250
49150: PPUSH
49151: LD_VAR 0 1
49155: PPUSH
49156: CALL_OW 251
49160: PPUSH
49161: LD_VAR 0 2
49165: PPUSH
49166: CALL 47405 0 4
49170: ST_TO_ADDR
// end ;
49171: LD_VAR 0 3
49175: RET
// export function DangerInArea ( side , area ) ; begin
49176: LD_INT 0
49178: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49179: LD_ADDR_VAR 0 3
49183: PUSH
49184: LD_VAR 0 2
49188: PPUSH
49189: LD_INT 81
49191: PUSH
49192: LD_VAR 0 1
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PPUSH
49201: CALL_OW 70
49205: ST_TO_ADDR
// end ;
49206: LD_VAR 0 3
49210: RET
// export function IsExtension ( b ) ; begin
49211: LD_INT 0
49213: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49214: LD_ADDR_VAR 0 2
49218: PUSH
49219: LD_VAR 0 1
49223: PUSH
49224: LD_INT 23
49226: PUSH
49227: LD_INT 20
49229: PUSH
49230: LD_INT 22
49232: PUSH
49233: LD_INT 17
49235: PUSH
49236: LD_INT 24
49238: PUSH
49239: LD_INT 21
49241: PUSH
49242: LD_INT 19
49244: PUSH
49245: LD_INT 16
49247: PUSH
49248: LD_INT 25
49250: PUSH
49251: LD_INT 18
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: IN
49266: ST_TO_ADDR
// end ;
49267: LD_VAR 0 2
49271: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49272: LD_INT 0
49274: PPUSH
49275: PPUSH
49276: PPUSH
// result := [ ] ;
49277: LD_ADDR_VAR 0 4
49281: PUSH
49282: EMPTY
49283: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49284: LD_ADDR_VAR 0 5
49288: PUSH
49289: LD_VAR 0 2
49293: PPUSH
49294: LD_INT 21
49296: PUSH
49297: LD_INT 3
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PPUSH
49304: CALL_OW 70
49308: ST_TO_ADDR
// if not tmp then
49309: LD_VAR 0 5
49313: NOT
49314: IFFALSE 49318
// exit ;
49316: GO 49382
// if checkLink then
49318: LD_VAR 0 3
49322: IFFALSE 49372
// begin for i in tmp do
49324: LD_ADDR_VAR 0 6
49328: PUSH
49329: LD_VAR 0 5
49333: PUSH
49334: FOR_IN
49335: IFFALSE 49370
// if GetBase ( i ) <> base then
49337: LD_VAR 0 6
49341: PPUSH
49342: CALL_OW 274
49346: PUSH
49347: LD_VAR 0 1
49351: NONEQUAL
49352: IFFALSE 49368
// ComLinkToBase ( base , i ) ;
49354: LD_VAR 0 1
49358: PPUSH
49359: LD_VAR 0 6
49363: PPUSH
49364: CALL_OW 169
49368: GO 49334
49370: POP
49371: POP
// end ; result := tmp ;
49372: LD_ADDR_VAR 0 4
49376: PUSH
49377: LD_VAR 0 5
49381: ST_TO_ADDR
// end ;
49382: LD_VAR 0 4
49386: RET
// export function ComComplete ( units , b ) ; var i ; begin
49387: LD_INT 0
49389: PPUSH
49390: PPUSH
// if not units then
49391: LD_VAR 0 1
49395: NOT
49396: IFFALSE 49400
// exit ;
49398: GO 49490
// for i in units do
49400: LD_ADDR_VAR 0 4
49404: PUSH
49405: LD_VAR 0 1
49409: PUSH
49410: FOR_IN
49411: IFFALSE 49488
// if BuildingStatus ( b ) = bs_build then
49413: LD_VAR 0 2
49417: PPUSH
49418: CALL_OW 461
49422: PUSH
49423: LD_INT 1
49425: EQUAL
49426: IFFALSE 49486
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49428: LD_VAR 0 4
49432: PPUSH
49433: LD_STRING h
49435: PUSH
49436: LD_VAR 0 2
49440: PPUSH
49441: CALL_OW 250
49445: PUSH
49446: LD_VAR 0 2
49450: PPUSH
49451: CALL_OW 251
49455: PUSH
49456: LD_VAR 0 2
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: PUSH
49479: EMPTY
49480: LIST
49481: PPUSH
49482: CALL_OW 446
49486: GO 49410
49488: POP
49489: POP
// end ;
49490: LD_VAR 0 3
49494: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49495: LD_INT 0
49497: PPUSH
49498: PPUSH
49499: PPUSH
49500: PPUSH
49501: PPUSH
49502: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49503: LD_VAR 0 1
49507: NOT
49508: IFTRUE 49525
49510: PUSH
49511: LD_VAR 0 1
49515: PPUSH
49516: CALL_OW 263
49520: PUSH
49521: LD_INT 2
49523: NONEQUAL
49524: OR
49525: IFFALSE 49529
// exit ;
49527: GO 49845
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49529: LD_ADDR_VAR 0 6
49533: PUSH
49534: LD_INT 22
49536: PUSH
49537: LD_VAR 0 1
49541: PPUSH
49542: CALL_OW 255
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: LD_INT 30
49556: PUSH
49557: LD_INT 36
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 34
49566: PUSH
49567: LD_INT 31
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: LIST
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PPUSH
49583: CALL_OW 69
49587: ST_TO_ADDR
// if not tmp then
49588: LD_VAR 0 6
49592: NOT
49593: IFFALSE 49597
// exit ;
49595: GO 49845
// result := [ ] ;
49597: LD_ADDR_VAR 0 2
49601: PUSH
49602: EMPTY
49603: ST_TO_ADDR
// for i in tmp do
49604: LD_ADDR_VAR 0 3
49608: PUSH
49609: LD_VAR 0 6
49613: PUSH
49614: FOR_IN
49615: IFFALSE 49686
// begin t := UnitsInside ( i ) ;
49617: LD_ADDR_VAR 0 4
49621: PUSH
49622: LD_VAR 0 3
49626: PPUSH
49627: CALL_OW 313
49631: ST_TO_ADDR
// if t then
49632: LD_VAR 0 4
49636: IFFALSE 49684
// for j in t do
49638: LD_ADDR_VAR 0 7
49642: PUSH
49643: LD_VAR 0 4
49647: PUSH
49648: FOR_IN
49649: IFFALSE 49682
// result := Replace ( result , result + 1 , j ) ;
49651: LD_ADDR_VAR 0 2
49655: PUSH
49656: LD_VAR 0 2
49660: PPUSH
49661: LD_VAR 0 2
49665: PUSH
49666: LD_INT 1
49668: PLUS
49669: PPUSH
49670: LD_VAR 0 7
49674: PPUSH
49675: CALL_OW 1
49679: ST_TO_ADDR
49680: GO 49648
49682: POP
49683: POP
// end ;
49684: GO 49614
49686: POP
49687: POP
// if not result then
49688: LD_VAR 0 2
49692: NOT
49693: IFFALSE 49697
// exit ;
49695: GO 49845
// mech := result [ 1 ] ;
49697: LD_ADDR_VAR 0 5
49701: PUSH
49702: LD_VAR 0 2
49706: PUSH
49707: LD_INT 1
49709: ARRAY
49710: ST_TO_ADDR
// if result > 1 then
49711: LD_VAR 0 2
49715: PUSH
49716: LD_INT 1
49718: GREATER
49719: IFFALSE 49831
// begin for i = 2 to result do
49721: LD_ADDR_VAR 0 3
49725: PUSH
49726: DOUBLE
49727: LD_INT 2
49729: DEC
49730: ST_TO_ADDR
49731: LD_VAR 0 2
49735: PUSH
49736: FOR_TO
49737: IFFALSE 49829
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49739: LD_ADDR_VAR 0 4
49743: PUSH
49744: LD_VAR 0 2
49748: PUSH
49749: LD_VAR 0 3
49753: ARRAY
49754: PPUSH
49755: LD_INT 3
49757: PPUSH
49758: CALL_OW 259
49762: PUSH
49763: LD_VAR 0 2
49767: PUSH
49768: LD_VAR 0 3
49772: ARRAY
49773: PPUSH
49774: CALL_OW 432
49778: MINUS
49779: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49780: LD_VAR 0 4
49784: PUSH
49785: LD_VAR 0 5
49789: PPUSH
49790: LD_INT 3
49792: PPUSH
49793: CALL_OW 259
49797: PUSH
49798: LD_VAR 0 5
49802: PPUSH
49803: CALL_OW 432
49807: MINUS
49808: GREATEREQUAL
49809: IFFALSE 49827
// mech := result [ i ] ;
49811: LD_ADDR_VAR 0 5
49815: PUSH
49816: LD_VAR 0 2
49820: PUSH
49821: LD_VAR 0 3
49825: ARRAY
49826: ST_TO_ADDR
// end ;
49827: GO 49736
49829: POP
49830: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49831: LD_VAR 0 1
49835: PPUSH
49836: LD_VAR 0 5
49840: PPUSH
49841: CALL_OW 135
// end ;
49845: LD_VAR 0 2
49849: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49850: LD_INT 0
49852: PPUSH
49853: PPUSH
49854: PPUSH
49855: PPUSH
49856: PPUSH
49857: PPUSH
49858: PPUSH
49859: PPUSH
49860: PPUSH
49861: PPUSH
49862: PPUSH
49863: PPUSH
49864: PPUSH
// result := [ ] ;
49865: LD_ADDR_VAR 0 7
49869: PUSH
49870: EMPTY
49871: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49872: LD_VAR 0 1
49876: PPUSH
49877: CALL_OW 266
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: IN
49892: NOT
49893: IFFALSE 49897
// exit ;
49895: GO 51537
// if name then
49897: LD_VAR 0 3
49901: IFFALSE 49917
// SetBName ( base_dep , name ) ;
49903: LD_VAR 0 1
49907: PPUSH
49908: LD_VAR 0 3
49912: PPUSH
49913: CALL_OW 500
// base := GetBase ( base_dep ) ;
49917: LD_ADDR_VAR 0 15
49921: PUSH
49922: LD_VAR 0 1
49926: PPUSH
49927: CALL_OW 274
49931: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49932: LD_ADDR_VAR 0 16
49936: PUSH
49937: LD_VAR 0 1
49941: PPUSH
49942: CALL_OW 255
49946: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49947: LD_ADDR_VAR 0 17
49951: PUSH
49952: LD_VAR 0 1
49956: PPUSH
49957: CALL_OW 248
49961: ST_TO_ADDR
// if sources then
49962: LD_VAR 0 5
49966: IFFALSE 50013
// for i = 1 to 3 do
49968: LD_ADDR_VAR 0 8
49972: PUSH
49973: DOUBLE
49974: LD_INT 1
49976: DEC
49977: ST_TO_ADDR
49978: LD_INT 3
49980: PUSH
49981: FOR_TO
49982: IFFALSE 50011
// AddResourceType ( base , i , sources [ i ] ) ;
49984: LD_VAR 0 15
49988: PPUSH
49989: LD_VAR 0 8
49993: PPUSH
49994: LD_VAR 0 5
49998: PUSH
49999: LD_VAR 0 8
50003: ARRAY
50004: PPUSH
50005: CALL_OW 276
50009: GO 49981
50011: POP
50012: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50013: LD_ADDR_VAR 0 18
50017: PUSH
50018: LD_VAR 0 15
50022: PPUSH
50023: LD_VAR 0 2
50027: PPUSH
50028: LD_INT 1
50030: PPUSH
50031: CALL 49272 0 3
50035: ST_TO_ADDR
// InitHc ;
50036: CALL_OW 19
// InitUc ;
50040: CALL_OW 18
// uc_side := side ;
50044: LD_ADDR_OWVAR 20
50048: PUSH
50049: LD_VAR 0 16
50053: ST_TO_ADDR
// uc_nation := nation ;
50054: LD_ADDR_OWVAR 21
50058: PUSH
50059: LD_VAR 0 17
50063: ST_TO_ADDR
// if buildings then
50064: LD_VAR 0 18
50068: IFFALSE 51396
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50070: LD_ADDR_VAR 0 19
50074: PUSH
50075: LD_VAR 0 18
50079: PPUSH
50080: LD_INT 2
50082: PUSH
50083: LD_INT 30
50085: PUSH
50086: LD_INT 29
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 30
50095: PUSH
50096: LD_INT 30
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: LIST
50107: PPUSH
50108: CALL_OW 72
50112: ST_TO_ADDR
// if tmp then
50113: LD_VAR 0 19
50117: IFFALSE 50165
// for i in tmp do
50119: LD_ADDR_VAR 0 8
50123: PUSH
50124: LD_VAR 0 19
50128: PUSH
50129: FOR_IN
50130: IFFALSE 50163
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50132: LD_VAR 0 8
50136: PPUSH
50137: CALL_OW 250
50141: PPUSH
50142: LD_VAR 0 8
50146: PPUSH
50147: CALL_OW 251
50151: PPUSH
50152: LD_VAR 0 16
50156: PPUSH
50157: CALL_OW 441
50161: GO 50129
50163: POP
50164: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50165: LD_VAR 0 18
50169: PPUSH
50170: LD_INT 2
50172: PUSH
50173: LD_INT 30
50175: PUSH
50176: LD_INT 32
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 30
50185: PUSH
50186: LD_INT 33
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: LIST
50197: PPUSH
50198: CALL_OW 72
50202: IFFALSE 50290
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50204: LD_ADDR_VAR 0 8
50208: PUSH
50209: LD_VAR 0 18
50213: PPUSH
50214: LD_INT 2
50216: PUSH
50217: LD_INT 30
50219: PUSH
50220: LD_INT 32
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 30
50229: PUSH
50230: LD_INT 33
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: LIST
50241: PPUSH
50242: CALL_OW 72
50246: PUSH
50247: FOR_IN
50248: IFFALSE 50288
// begin if not GetBWeapon ( i ) then
50250: LD_VAR 0 8
50254: PPUSH
50255: CALL_OW 269
50259: NOT
50260: IFFALSE 50286
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50262: LD_VAR 0 8
50266: PPUSH
50267: LD_VAR 0 8
50271: PPUSH
50272: LD_VAR 0 2
50276: PPUSH
50277: CALL 51542 0 2
50281: PPUSH
50282: CALL_OW 431
// end ;
50286: GO 50247
50288: POP
50289: POP
// end ; for i = 1 to personel do
50290: LD_ADDR_VAR 0 8
50294: PUSH
50295: DOUBLE
50296: LD_INT 1
50298: DEC
50299: ST_TO_ADDR
50300: LD_VAR 0 6
50304: PUSH
50305: FOR_TO
50306: IFFALSE 51376
// begin if i > 4 then
50308: LD_VAR 0 8
50312: PUSH
50313: LD_INT 4
50315: GREATER
50316: IFFALSE 50320
// break ;
50318: GO 51376
// case i of 1 :
50320: LD_VAR 0 8
50324: PUSH
50325: LD_INT 1
50327: DOUBLE
50328: EQUAL
50329: IFTRUE 50333
50331: GO 50413
50333: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50334: LD_ADDR_VAR 0 12
50338: PUSH
50339: LD_VAR 0 18
50343: PPUSH
50344: LD_INT 22
50346: PUSH
50347: LD_VAR 0 16
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 58
50358: PUSH
50359: EMPTY
50360: LIST
50361: PUSH
50362: LD_INT 2
50364: PUSH
50365: LD_INT 30
50367: PUSH
50368: LD_INT 32
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 30
50377: PUSH
50378: LD_INT 4
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 30
50387: PUSH
50388: LD_INT 5
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: LIST
50405: PPUSH
50406: CALL_OW 72
50410: ST_TO_ADDR
50411: GO 50635
50413: LD_INT 2
50415: DOUBLE
50416: EQUAL
50417: IFTRUE 50421
50419: GO 50483
50421: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50422: LD_ADDR_VAR 0 12
50426: PUSH
50427: LD_VAR 0 18
50431: PPUSH
50432: LD_INT 22
50434: PUSH
50435: LD_VAR 0 16
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: LD_INT 30
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 30
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: LIST
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PPUSH
50476: CALL_OW 72
50480: ST_TO_ADDR
50481: GO 50635
50483: LD_INT 3
50485: DOUBLE
50486: EQUAL
50487: IFTRUE 50491
50489: GO 50553
50491: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50492: LD_ADDR_VAR 0 12
50496: PUSH
50497: LD_VAR 0 18
50501: PPUSH
50502: LD_INT 22
50504: PUSH
50505: LD_VAR 0 16
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 2
50516: PUSH
50517: LD_INT 30
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 30
50529: PUSH
50530: LD_INT 3
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: LIST
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PPUSH
50546: CALL_OW 72
50550: ST_TO_ADDR
50551: GO 50635
50553: LD_INT 4
50555: DOUBLE
50556: EQUAL
50557: IFTRUE 50561
50559: GO 50634
50561: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50562: LD_ADDR_VAR 0 12
50566: PUSH
50567: LD_VAR 0 18
50571: PPUSH
50572: LD_INT 22
50574: PUSH
50575: LD_VAR 0 16
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 2
50586: PUSH
50587: LD_INT 30
50589: PUSH
50590: LD_INT 6
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 30
50599: PUSH
50600: LD_INT 7
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 30
50609: PUSH
50610: LD_INT 8
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PPUSH
50627: CALL_OW 72
50631: ST_TO_ADDR
50632: GO 50635
50634: POP
// if i = 1 then
50635: LD_VAR 0 8
50639: PUSH
50640: LD_INT 1
50642: EQUAL
50643: IFFALSE 50754
// begin tmp := [ ] ;
50645: LD_ADDR_VAR 0 19
50649: PUSH
50650: EMPTY
50651: ST_TO_ADDR
// for j in f do
50652: LD_ADDR_VAR 0 9
50656: PUSH
50657: LD_VAR 0 12
50661: PUSH
50662: FOR_IN
50663: IFFALSE 50736
// if GetBType ( j ) = b_bunker then
50665: LD_VAR 0 9
50669: PPUSH
50670: CALL_OW 266
50674: PUSH
50675: LD_INT 32
50677: EQUAL
50678: IFFALSE 50705
// tmp := Insert ( tmp , 1 , j ) else
50680: LD_ADDR_VAR 0 19
50684: PUSH
50685: LD_VAR 0 19
50689: PPUSH
50690: LD_INT 1
50692: PPUSH
50693: LD_VAR 0 9
50697: PPUSH
50698: CALL_OW 2
50702: ST_TO_ADDR
50703: GO 50734
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50705: LD_ADDR_VAR 0 19
50709: PUSH
50710: LD_VAR 0 19
50714: PPUSH
50715: LD_VAR 0 19
50719: PUSH
50720: LD_INT 1
50722: PLUS
50723: PPUSH
50724: LD_VAR 0 9
50728: PPUSH
50729: CALL_OW 2
50733: ST_TO_ADDR
50734: GO 50662
50736: POP
50737: POP
// if tmp then
50738: LD_VAR 0 19
50742: IFFALSE 50754
// f := tmp ;
50744: LD_ADDR_VAR 0 12
50748: PUSH
50749: LD_VAR 0 19
50753: ST_TO_ADDR
// end ; x := personel [ i ] ;
50754: LD_ADDR_VAR 0 13
50758: PUSH
50759: LD_VAR 0 6
50763: PUSH
50764: LD_VAR 0 8
50768: ARRAY
50769: ST_TO_ADDR
// if x = - 1 then
50770: LD_VAR 0 13
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: EQUAL
50779: IFFALSE 50990
// begin for j in f do
50781: LD_ADDR_VAR 0 9
50785: PUSH
50786: LD_VAR 0 12
50790: PUSH
50791: FOR_IN
50792: IFFALSE 50986
// repeat InitHc ;
50794: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50798: LD_VAR 0 9
50802: PPUSH
50803: CALL_OW 266
50807: PUSH
50808: LD_INT 5
50810: EQUAL
50811: IFFALSE 50881
// begin if UnitsInside ( j ) < 3 then
50813: LD_VAR 0 9
50817: PPUSH
50818: CALL_OW 313
50822: PUSH
50823: LD_INT 3
50825: LESS
50826: IFFALSE 50862
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50828: LD_INT 0
50830: PPUSH
50831: LD_INT 5
50833: PUSH
50834: LD_INT 8
50836: PUSH
50837: LD_INT 9
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: LIST
50844: PUSH
50845: LD_VAR 0 17
50849: ARRAY
50850: PPUSH
50851: LD_VAR 0 4
50855: PPUSH
50856: CALL_OW 380
50860: GO 50879
// PrepareHuman ( false , i , skill ) ;
50862: LD_INT 0
50864: PPUSH
50865: LD_VAR 0 8
50869: PPUSH
50870: LD_VAR 0 4
50874: PPUSH
50875: CALL_OW 380
// end else
50879: GO 50898
// PrepareHuman ( false , i , skill ) ;
50881: LD_INT 0
50883: PPUSH
50884: LD_VAR 0 8
50888: PPUSH
50889: LD_VAR 0 4
50893: PPUSH
50894: CALL_OW 380
// un := CreateHuman ;
50898: LD_ADDR_VAR 0 14
50902: PUSH
50903: CALL_OW 44
50907: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50908: LD_ADDR_VAR 0 7
50912: PUSH
50913: LD_VAR 0 7
50917: PPUSH
50918: LD_INT 1
50920: PPUSH
50921: LD_VAR 0 14
50925: PPUSH
50926: CALL_OW 2
50930: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50931: LD_VAR 0 14
50935: PPUSH
50936: LD_VAR 0 9
50940: PPUSH
50941: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50945: LD_VAR 0 9
50949: PPUSH
50950: CALL_OW 313
50954: PUSH
50955: LD_INT 6
50957: EQUAL
50958: IFTRUE 50982
50960: PUSH
50961: LD_VAR 0 9
50965: PPUSH
50966: CALL_OW 266
50970: PUSH
50971: LD_INT 32
50973: PUSH
50974: LD_INT 31
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: IN
50981: OR
50982: IFFALSE 50794
50984: GO 50791
50986: POP
50987: POP
// end else
50988: GO 51374
// for j = 1 to x do
50990: LD_ADDR_VAR 0 9
50994: PUSH
50995: DOUBLE
50996: LD_INT 1
50998: DEC
50999: ST_TO_ADDR
51000: LD_VAR 0 13
51004: PUSH
51005: FOR_TO
51006: IFFALSE 51372
// begin InitHc ;
51008: CALL_OW 19
// if not f then
51012: LD_VAR 0 12
51016: NOT
51017: IFFALSE 51106
// begin PrepareHuman ( false , i , skill ) ;
51019: LD_INT 0
51021: PPUSH
51022: LD_VAR 0 8
51026: PPUSH
51027: LD_VAR 0 4
51031: PPUSH
51032: CALL_OW 380
// un := CreateHuman ;
51036: LD_ADDR_VAR 0 14
51040: PUSH
51041: CALL_OW 44
51045: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51046: LD_ADDR_VAR 0 7
51050: PUSH
51051: LD_VAR 0 7
51055: PPUSH
51056: LD_INT 1
51058: PPUSH
51059: LD_VAR 0 14
51063: PPUSH
51064: CALL_OW 2
51068: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51069: LD_VAR 0 14
51073: PPUSH
51074: LD_VAR 0 1
51078: PPUSH
51079: CALL_OW 250
51083: PPUSH
51084: LD_VAR 0 1
51088: PPUSH
51089: CALL_OW 251
51093: PPUSH
51094: LD_INT 10
51096: PPUSH
51097: LD_INT 0
51099: PPUSH
51100: CALL_OW 50
// continue ;
51104: GO 51005
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51106: LD_VAR 0 12
51110: PUSH
51111: LD_INT 1
51113: ARRAY
51114: PPUSH
51115: CALL_OW 313
51119: IFFALSE 51147
51121: PUSH
51122: LD_VAR 0 12
51126: PUSH
51127: LD_INT 1
51129: ARRAY
51130: PPUSH
51131: CALL_OW 266
51135: PUSH
51136: LD_INT 32
51138: PUSH
51139: LD_INT 31
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: IN
51146: AND
51147: IFTRUE 51168
51149: PUSH
51150: LD_VAR 0 12
51154: PUSH
51155: LD_INT 1
51157: ARRAY
51158: PPUSH
51159: CALL_OW 313
51163: PUSH
51164: LD_INT 6
51166: EQUAL
51167: OR
51168: IFFALSE 51188
// f := Delete ( f , 1 ) ;
51170: LD_ADDR_VAR 0 12
51174: PUSH
51175: LD_VAR 0 12
51179: PPUSH
51180: LD_INT 1
51182: PPUSH
51183: CALL_OW 3
51187: ST_TO_ADDR
// if not f then
51188: LD_VAR 0 12
51192: NOT
51193: IFFALSE 51211
// begin x := x + 2 ;
51195: LD_ADDR_VAR 0 13
51199: PUSH
51200: LD_VAR 0 13
51204: PUSH
51205: LD_INT 2
51207: PLUS
51208: ST_TO_ADDR
// continue ;
51209: GO 51005
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51211: LD_VAR 0 12
51215: PUSH
51216: LD_INT 1
51218: ARRAY
51219: PPUSH
51220: CALL_OW 266
51224: PUSH
51225: LD_INT 5
51227: EQUAL
51228: IFFALSE 51302
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51230: LD_VAR 0 12
51234: PUSH
51235: LD_INT 1
51237: ARRAY
51238: PPUSH
51239: CALL_OW 313
51243: PUSH
51244: LD_INT 3
51246: LESS
51247: IFFALSE 51283
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51249: LD_INT 0
51251: PPUSH
51252: LD_INT 5
51254: PUSH
51255: LD_INT 8
51257: PUSH
51258: LD_INT 9
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: LIST
51265: PUSH
51266: LD_VAR 0 17
51270: ARRAY
51271: PPUSH
51272: LD_VAR 0 4
51276: PPUSH
51277: CALL_OW 380
51281: GO 51300
// PrepareHuman ( false , i , skill ) ;
51283: LD_INT 0
51285: PPUSH
51286: LD_VAR 0 8
51290: PPUSH
51291: LD_VAR 0 4
51295: PPUSH
51296: CALL_OW 380
// end else
51300: GO 51319
// PrepareHuman ( false , i , skill ) ;
51302: LD_INT 0
51304: PPUSH
51305: LD_VAR 0 8
51309: PPUSH
51310: LD_VAR 0 4
51314: PPUSH
51315: CALL_OW 380
// un := CreateHuman ;
51319: LD_ADDR_VAR 0 14
51323: PUSH
51324: CALL_OW 44
51328: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51329: LD_ADDR_VAR 0 7
51333: PUSH
51334: LD_VAR 0 7
51338: PPUSH
51339: LD_INT 1
51341: PPUSH
51342: LD_VAR 0 14
51346: PPUSH
51347: CALL_OW 2
51351: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51352: LD_VAR 0 14
51356: PPUSH
51357: LD_VAR 0 12
51361: PUSH
51362: LD_INT 1
51364: ARRAY
51365: PPUSH
51366: CALL_OW 52
// end ;
51370: GO 51005
51372: POP
51373: POP
// end ;
51374: GO 50305
51376: POP
51377: POP
// result := result ^ buildings ;
51378: LD_ADDR_VAR 0 7
51382: PUSH
51383: LD_VAR 0 7
51387: PUSH
51388: LD_VAR 0 18
51392: ADD
51393: ST_TO_ADDR
// end else
51394: GO 51537
// begin for i = 1 to personel do
51396: LD_ADDR_VAR 0 8
51400: PUSH
51401: DOUBLE
51402: LD_INT 1
51404: DEC
51405: ST_TO_ADDR
51406: LD_VAR 0 6
51410: PUSH
51411: FOR_TO
51412: IFFALSE 51535
// begin if i > 4 then
51414: LD_VAR 0 8
51418: PUSH
51419: LD_INT 4
51421: GREATER
51422: IFFALSE 51426
// break ;
51424: GO 51535
// x := personel [ i ] ;
51426: LD_ADDR_VAR 0 13
51430: PUSH
51431: LD_VAR 0 6
51435: PUSH
51436: LD_VAR 0 8
51440: ARRAY
51441: ST_TO_ADDR
// if x = - 1 then
51442: LD_VAR 0 13
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: EQUAL
51451: IFFALSE 51455
// continue ;
51453: GO 51411
// PrepareHuman ( false , i , skill ) ;
51455: LD_INT 0
51457: PPUSH
51458: LD_VAR 0 8
51462: PPUSH
51463: LD_VAR 0 4
51467: PPUSH
51468: CALL_OW 380
// un := CreateHuman ;
51472: LD_ADDR_VAR 0 14
51476: PUSH
51477: CALL_OW 44
51481: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51482: LD_VAR 0 14
51486: PPUSH
51487: LD_VAR 0 1
51491: PPUSH
51492: CALL_OW 250
51496: PPUSH
51497: LD_VAR 0 1
51501: PPUSH
51502: CALL_OW 251
51506: PPUSH
51507: LD_INT 10
51509: PPUSH
51510: LD_INT 0
51512: PPUSH
51513: CALL_OW 50
// result := result ^ un ;
51517: LD_ADDR_VAR 0 7
51521: PUSH
51522: LD_VAR 0 7
51526: PUSH
51527: LD_VAR 0 14
51531: ADD
51532: ST_TO_ADDR
// end ;
51533: GO 51411
51535: POP
51536: POP
// end ; end ;
51537: LD_VAR 0 7
51541: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51542: LD_INT 0
51544: PPUSH
51545: PPUSH
51546: PPUSH
51547: PPUSH
51548: PPUSH
51549: PPUSH
51550: PPUSH
51551: PPUSH
51552: PPUSH
51553: PPUSH
51554: PPUSH
51555: PPUSH
51556: PPUSH
51557: PPUSH
51558: PPUSH
51559: PPUSH
// result := false ;
51560: LD_ADDR_VAR 0 3
51564: PUSH
51565: LD_INT 0
51567: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51568: LD_VAR 0 1
51572: NOT
51573: IFTRUE 51598
51575: PUSH
51576: LD_VAR 0 1
51580: PPUSH
51581: CALL_OW 266
51585: PUSH
51586: LD_INT 32
51588: PUSH
51589: LD_INT 33
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: IN
51596: NOT
51597: OR
51598: IFFALSE 51602
// exit ;
51600: GO 52737
// nat := GetNation ( tower ) ;
51602: LD_ADDR_VAR 0 12
51606: PUSH
51607: LD_VAR 0 1
51611: PPUSH
51612: CALL_OW 248
51616: ST_TO_ADDR
// side := GetSide ( tower ) ;
51617: LD_ADDR_VAR 0 16
51621: PUSH
51622: LD_VAR 0 1
51626: PPUSH
51627: CALL_OW 255
51631: ST_TO_ADDR
// x := GetX ( tower ) ;
51632: LD_ADDR_VAR 0 10
51636: PUSH
51637: LD_VAR 0 1
51641: PPUSH
51642: CALL_OW 250
51646: ST_TO_ADDR
// y := GetY ( tower ) ;
51647: LD_ADDR_VAR 0 11
51651: PUSH
51652: LD_VAR 0 1
51656: PPUSH
51657: CALL_OW 251
51661: ST_TO_ADDR
// if not x or not y then
51662: LD_VAR 0 10
51666: NOT
51667: IFTRUE 51676
51669: PUSH
51670: LD_VAR 0 11
51674: NOT
51675: OR
51676: IFFALSE 51680
// exit ;
51678: GO 52737
// weapon := 0 ;
51680: LD_ADDR_VAR 0 18
51684: PUSH
51685: LD_INT 0
51687: ST_TO_ADDR
// fac_list := [ ] ;
51688: LD_ADDR_VAR 0 17
51692: PUSH
51693: EMPTY
51694: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51695: LD_ADDR_VAR 0 6
51699: PUSH
51700: LD_VAR 0 1
51704: PPUSH
51705: CALL_OW 274
51709: PPUSH
51710: LD_VAR 0 2
51714: PPUSH
51715: LD_INT 0
51717: PPUSH
51718: CALL 49272 0 3
51722: PPUSH
51723: LD_INT 30
51725: PUSH
51726: LD_INT 3
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PPUSH
51733: CALL_OW 72
51737: ST_TO_ADDR
// if not factories then
51738: LD_VAR 0 6
51742: NOT
51743: IFFALSE 51747
// exit ;
51745: GO 52737
// for i in factories do
51747: LD_ADDR_VAR 0 8
51751: PUSH
51752: LD_VAR 0 6
51756: PUSH
51757: FOR_IN
51758: IFFALSE 51783
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51760: LD_ADDR_VAR 0 17
51764: PUSH
51765: LD_VAR 0 17
51769: PUSH
51770: LD_VAR 0 8
51774: PPUSH
51775: CALL_OW 478
51779: UNION
51780: ST_TO_ADDR
51781: GO 51757
51783: POP
51784: POP
// if not fac_list then
51785: LD_VAR 0 17
51789: NOT
51790: IFFALSE 51794
// exit ;
51792: GO 52737
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51794: LD_ADDR_VAR 0 5
51798: PUSH
51799: LD_INT 4
51801: PUSH
51802: LD_INT 5
51804: PUSH
51805: LD_INT 9
51807: PUSH
51808: LD_INT 10
51810: PUSH
51811: LD_INT 6
51813: PUSH
51814: LD_INT 7
51816: PUSH
51817: LD_INT 11
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 27
51831: PUSH
51832: LD_INT 28
51834: PUSH
51835: LD_INT 26
51837: PUSH
51838: LD_INT 30
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 43
51849: PUSH
51850: LD_INT 44
51852: PUSH
51853: LD_INT 46
51855: PUSH
51856: LD_INT 45
51858: PUSH
51859: LD_INT 47
51861: PUSH
51862: LD_INT 49
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: LIST
51877: PUSH
51878: LD_VAR 0 12
51882: ARRAY
51883: ST_TO_ADDR
// list := list isect fac_list ;
51884: LD_ADDR_VAR 0 5
51888: PUSH
51889: LD_VAR 0 5
51893: PUSH
51894: LD_VAR 0 17
51898: ISECT
51899: ST_TO_ADDR
// if not list then
51900: LD_VAR 0 5
51904: NOT
51905: IFFALSE 51909
// exit ;
51907: GO 52737
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51909: LD_VAR 0 12
51913: PUSH
51914: LD_INT 3
51916: EQUAL
51917: IFFALSE 51929
51919: PUSH
51920: LD_INT 49
51922: PUSH
51923: LD_VAR 0 5
51927: IN
51928: AND
51929: IFFALSE 51949
51931: PUSH
51932: LD_INT 31
51934: PPUSH
51935: LD_VAR 0 16
51939: PPUSH
51940: CALL_OW 321
51944: PUSH
51945: LD_INT 2
51947: EQUAL
51948: AND
51949: IFFALSE 52009
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51951: LD_INT 22
51953: PUSH
51954: LD_VAR 0 16
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 35
51965: PUSH
51966: LD_INT 49
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 91
51975: PUSH
51976: LD_VAR 0 1
51980: PUSH
51981: LD_INT 10
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: LIST
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: LIST
51993: PPUSH
51994: CALL_OW 69
51998: NOT
51999: IFFALSE 52009
// weapon := ru_time_lapser ;
52001: LD_ADDR_VAR 0 18
52005: PUSH
52006: LD_INT 49
52008: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52009: LD_VAR 0 12
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: LD_INT 2
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: IN
52024: IFFALSE 52048
52026: PUSH
52027: LD_INT 11
52029: PUSH
52030: LD_VAR 0 5
52034: IN
52035: IFTRUE 52047
52037: PUSH
52038: LD_INT 30
52040: PUSH
52041: LD_VAR 0 5
52045: IN
52046: OR
52047: AND
52048: IFFALSE 52068
52050: PUSH
52051: LD_INT 6
52053: PPUSH
52054: LD_VAR 0 16
52058: PPUSH
52059: CALL_OW 321
52063: PUSH
52064: LD_INT 2
52066: EQUAL
52067: AND
52068: IFFALSE 52235
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52070: LD_INT 22
52072: PUSH
52073: LD_VAR 0 16
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 2
52084: PUSH
52085: LD_INT 35
52087: PUSH
52088: LD_INT 11
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 35
52097: PUSH
52098: LD_INT 30
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 91
52112: PUSH
52113: LD_VAR 0 1
52117: PUSH
52118: LD_INT 18
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: LIST
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: LIST
52130: PPUSH
52131: CALL_OW 69
52135: NOT
52136: IFFALSE 52212
52138: PUSH
52139: LD_INT 22
52141: PUSH
52142: LD_VAR 0 16
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 2
52153: PUSH
52154: LD_INT 30
52156: PUSH
52157: LD_INT 32
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 30
52166: PUSH
52167: LD_INT 33
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 91
52181: PUSH
52182: LD_VAR 0 1
52186: PUSH
52187: LD_INT 12
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: LIST
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: LIST
52199: PUSH
52200: EMPTY
52201: LIST
52202: PPUSH
52203: CALL_OW 69
52207: PUSH
52208: LD_INT 2
52210: GREATER
52211: AND
52212: IFFALSE 52235
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52214: LD_ADDR_VAR 0 18
52218: PUSH
52219: LD_INT 11
52221: PUSH
52222: LD_INT 30
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_VAR 0 12
52233: ARRAY
52234: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52235: LD_VAR 0 18
52239: NOT
52240: IFFALSE 52260
52242: PUSH
52243: LD_INT 40
52245: PPUSH
52246: LD_VAR 0 16
52250: PPUSH
52251: CALL_OW 321
52255: PUSH
52256: LD_INT 2
52258: EQUAL
52259: AND
52260: IFFALSE 52296
52262: PUSH
52263: LD_INT 7
52265: PUSH
52266: LD_VAR 0 5
52270: IN
52271: IFTRUE 52283
52273: PUSH
52274: LD_INT 28
52276: PUSH
52277: LD_VAR 0 5
52281: IN
52282: OR
52283: IFTRUE 52295
52285: PUSH
52286: LD_INT 45
52288: PUSH
52289: LD_VAR 0 5
52293: IN
52294: OR
52295: AND
52296: IFFALSE 52550
// begin hex := GetHexInfo ( x , y ) ;
52298: LD_ADDR_VAR 0 4
52302: PUSH
52303: LD_VAR 0 10
52307: PPUSH
52308: LD_VAR 0 11
52312: PPUSH
52313: CALL_OW 546
52317: ST_TO_ADDR
// if hex [ 1 ] then
52318: LD_VAR 0 4
52322: PUSH
52323: LD_INT 1
52325: ARRAY
52326: IFFALSE 52330
// exit ;
52328: GO 52737
// height := hex [ 2 ] ;
52330: LD_ADDR_VAR 0 15
52334: PUSH
52335: LD_VAR 0 4
52339: PUSH
52340: LD_INT 2
52342: ARRAY
52343: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52344: LD_ADDR_VAR 0 14
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: LD_INT 2
52354: PUSH
52355: LD_INT 3
52357: PUSH
52358: LD_INT 5
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: ST_TO_ADDR
// for i in tmp do
52367: LD_ADDR_VAR 0 8
52371: PUSH
52372: LD_VAR 0 14
52376: PUSH
52377: FOR_IN
52378: IFFALSE 52548
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52380: LD_ADDR_VAR 0 9
52384: PUSH
52385: LD_VAR 0 10
52389: PPUSH
52390: LD_VAR 0 8
52394: PPUSH
52395: LD_INT 5
52397: PPUSH
52398: CALL_OW 272
52402: PUSH
52403: LD_VAR 0 11
52407: PPUSH
52408: LD_VAR 0 8
52412: PPUSH
52413: LD_INT 5
52415: PPUSH
52416: CALL_OW 273
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52425: LD_VAR 0 9
52429: PUSH
52430: LD_INT 1
52432: ARRAY
52433: PPUSH
52434: LD_VAR 0 9
52438: PUSH
52439: LD_INT 2
52441: ARRAY
52442: PPUSH
52443: CALL_OW 488
52447: IFFALSE 52546
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52449: LD_ADDR_VAR 0 4
52453: PUSH
52454: LD_VAR 0 9
52458: PUSH
52459: LD_INT 1
52461: ARRAY
52462: PPUSH
52463: LD_VAR 0 9
52467: PUSH
52468: LD_INT 2
52470: ARRAY
52471: PPUSH
52472: CALL_OW 546
52476: ST_TO_ADDR
// if hex [ 1 ] then
52477: LD_VAR 0 4
52481: PUSH
52482: LD_INT 1
52484: ARRAY
52485: IFFALSE 52489
// continue ;
52487: GO 52377
// h := hex [ 2 ] ;
52489: LD_ADDR_VAR 0 13
52493: PUSH
52494: LD_VAR 0 4
52498: PUSH
52499: LD_INT 2
52501: ARRAY
52502: ST_TO_ADDR
// if h + 7 < height then
52503: LD_VAR 0 13
52507: PUSH
52508: LD_INT 7
52510: PLUS
52511: PUSH
52512: LD_VAR 0 15
52516: LESS
52517: IFFALSE 52546
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52519: LD_ADDR_VAR 0 18
52523: PUSH
52524: LD_INT 7
52526: PUSH
52527: LD_INT 28
52529: PUSH
52530: LD_INT 45
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: LIST
52537: PUSH
52538: LD_VAR 0 12
52542: ARRAY
52543: ST_TO_ADDR
// break ;
52544: GO 52548
// end ; end ; end ;
52546: GO 52377
52548: POP
52549: POP
// end ; if not weapon then
52550: LD_VAR 0 18
52554: NOT
52555: IFFALSE 52615
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52557: LD_ADDR_VAR 0 5
52561: PUSH
52562: LD_VAR 0 5
52566: PUSH
52567: LD_INT 11
52569: PUSH
52570: LD_INT 30
52572: PUSH
52573: LD_INT 49
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: LIST
52580: DIFF
52581: ST_TO_ADDR
// if not list then
52582: LD_VAR 0 5
52586: NOT
52587: IFFALSE 52591
// exit ;
52589: GO 52737
// weapon := list [ rand ( 1 , list ) ] ;
52591: LD_ADDR_VAR 0 18
52595: PUSH
52596: LD_VAR 0 5
52600: PUSH
52601: LD_INT 1
52603: PPUSH
52604: LD_VAR 0 5
52608: PPUSH
52609: CALL_OW 12
52613: ARRAY
52614: ST_TO_ADDR
// end ; if weapon then
52615: LD_VAR 0 18
52619: IFFALSE 52737
// begin tmp := CostOfWeapon ( weapon ) ;
52621: LD_ADDR_VAR 0 14
52625: PUSH
52626: LD_VAR 0 18
52630: PPUSH
52631: CALL_OW 451
52635: ST_TO_ADDR
// j := GetBase ( tower ) ;
52636: LD_ADDR_VAR 0 9
52640: PUSH
52641: LD_VAR 0 1
52645: PPUSH
52646: CALL_OW 274
52650: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52651: LD_VAR 0 9
52655: PPUSH
52656: LD_INT 1
52658: PPUSH
52659: CALL_OW 275
52663: PUSH
52664: LD_VAR 0 14
52668: PUSH
52669: LD_INT 1
52671: ARRAY
52672: GREATEREQUAL
52673: IFFALSE 52699
52675: PUSH
52676: LD_VAR 0 9
52680: PPUSH
52681: LD_INT 2
52683: PPUSH
52684: CALL_OW 275
52688: PUSH
52689: LD_VAR 0 14
52693: PUSH
52694: LD_INT 2
52696: ARRAY
52697: GREATEREQUAL
52698: AND
52699: IFFALSE 52725
52701: PUSH
52702: LD_VAR 0 9
52706: PPUSH
52707: LD_INT 3
52709: PPUSH
52710: CALL_OW 275
52714: PUSH
52715: LD_VAR 0 14
52719: PUSH
52720: LD_INT 3
52722: ARRAY
52723: GREATEREQUAL
52724: AND
52725: IFFALSE 52737
// result := weapon ;
52727: LD_ADDR_VAR 0 3
52731: PUSH
52732: LD_VAR 0 18
52736: ST_TO_ADDR
// end ; end ;
52737: LD_VAR 0 3
52741: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52742: LD_INT 0
52744: PPUSH
52745: PPUSH
// result := true ;
52746: LD_ADDR_VAR 0 3
52750: PUSH
52751: LD_INT 1
52753: ST_TO_ADDR
// if array1 = array2 then
52754: LD_VAR 0 1
52758: PUSH
52759: LD_VAR 0 2
52763: EQUAL
52764: IFFALSE 52824
// begin for i = 1 to array1 do
52766: LD_ADDR_VAR 0 4
52770: PUSH
52771: DOUBLE
52772: LD_INT 1
52774: DEC
52775: ST_TO_ADDR
52776: LD_VAR 0 1
52780: PUSH
52781: FOR_TO
52782: IFFALSE 52820
// if array1 [ i ] <> array2 [ i ] then
52784: LD_VAR 0 1
52788: PUSH
52789: LD_VAR 0 4
52793: ARRAY
52794: PUSH
52795: LD_VAR 0 2
52799: PUSH
52800: LD_VAR 0 4
52804: ARRAY
52805: NONEQUAL
52806: IFFALSE 52818
// begin result := false ;
52808: LD_ADDR_VAR 0 3
52812: PUSH
52813: LD_INT 0
52815: ST_TO_ADDR
// break ;
52816: GO 52820
// end ;
52818: GO 52781
52820: POP
52821: POP
// end else
52822: GO 52832
// result := false ;
52824: LD_ADDR_VAR 0 3
52828: PUSH
52829: LD_INT 0
52831: ST_TO_ADDR
// end ;
52832: LD_VAR 0 3
52836: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52837: LD_INT 0
52839: PPUSH
52840: PPUSH
// if not array1 or not array2 then
52841: LD_VAR 0 1
52845: NOT
52846: IFTRUE 52855
52848: PUSH
52849: LD_VAR 0 2
52853: NOT
52854: OR
52855: IFFALSE 52859
// exit ;
52857: GO 52923
// result := true ;
52859: LD_ADDR_VAR 0 3
52863: PUSH
52864: LD_INT 1
52866: ST_TO_ADDR
// for i = 1 to array1 do
52867: LD_ADDR_VAR 0 4
52871: PUSH
52872: DOUBLE
52873: LD_INT 1
52875: DEC
52876: ST_TO_ADDR
52877: LD_VAR 0 1
52881: PUSH
52882: FOR_TO
52883: IFFALSE 52921
// if array1 [ i ] <> array2 [ i ] then
52885: LD_VAR 0 1
52889: PUSH
52890: LD_VAR 0 4
52894: ARRAY
52895: PUSH
52896: LD_VAR 0 2
52900: PUSH
52901: LD_VAR 0 4
52905: ARRAY
52906: NONEQUAL
52907: IFFALSE 52919
// begin result := false ;
52909: LD_ADDR_VAR 0 3
52913: PUSH
52914: LD_INT 0
52916: ST_TO_ADDR
// break ;
52917: GO 52921
// end ;
52919: GO 52882
52921: POP
52922: POP
// end ;
52923: LD_VAR 0 3
52927: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52928: LD_INT 0
52930: PPUSH
52931: PPUSH
52932: PPUSH
// pom := GetBase ( fac ) ;
52933: LD_ADDR_VAR 0 5
52937: PUSH
52938: LD_VAR 0 1
52942: PPUSH
52943: CALL_OW 274
52947: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52948: LD_ADDR_VAR 0 4
52952: PUSH
52953: LD_VAR 0 2
52957: PUSH
52958: LD_INT 1
52960: ARRAY
52961: PPUSH
52962: LD_VAR 0 2
52966: PUSH
52967: LD_INT 2
52969: ARRAY
52970: PPUSH
52971: LD_VAR 0 2
52975: PUSH
52976: LD_INT 3
52978: ARRAY
52979: PPUSH
52980: LD_VAR 0 2
52984: PUSH
52985: LD_INT 4
52987: ARRAY
52988: PPUSH
52989: CALL_OW 449
52993: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52994: LD_ADDR_VAR 0 3
52998: PUSH
52999: LD_VAR 0 5
53003: PPUSH
53004: LD_INT 1
53006: PPUSH
53007: CALL_OW 275
53011: PUSH
53012: LD_VAR 0 4
53016: PUSH
53017: LD_INT 1
53019: ARRAY
53020: GREATEREQUAL
53021: IFFALSE 53047
53023: PUSH
53024: LD_VAR 0 5
53028: PPUSH
53029: LD_INT 2
53031: PPUSH
53032: CALL_OW 275
53036: PUSH
53037: LD_VAR 0 4
53041: PUSH
53042: LD_INT 2
53044: ARRAY
53045: GREATEREQUAL
53046: AND
53047: IFFALSE 53073
53049: PUSH
53050: LD_VAR 0 5
53054: PPUSH
53055: LD_INT 3
53057: PPUSH
53058: CALL_OW 275
53062: PUSH
53063: LD_VAR 0 4
53067: PUSH
53068: LD_INT 3
53070: ARRAY
53071: GREATEREQUAL
53072: AND
53073: ST_TO_ADDR
// end ;
53074: LD_VAR 0 3
53078: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53079: LD_INT 0
53081: PPUSH
53082: PPUSH
53083: PPUSH
53084: PPUSH
// pom := GetBase ( building ) ;
53085: LD_ADDR_VAR 0 3
53089: PUSH
53090: LD_VAR 0 1
53094: PPUSH
53095: CALL_OW 274
53099: ST_TO_ADDR
// if not pom then
53100: LD_VAR 0 3
53104: NOT
53105: IFFALSE 53109
// exit ;
53107: GO 53283
// btype := GetBType ( building ) ;
53109: LD_ADDR_VAR 0 5
53113: PUSH
53114: LD_VAR 0 1
53118: PPUSH
53119: CALL_OW 266
53123: ST_TO_ADDR
// if btype = b_armoury then
53124: LD_VAR 0 5
53128: PUSH
53129: LD_INT 4
53131: EQUAL
53132: IFFALSE 53142
// btype := b_barracks ;
53134: LD_ADDR_VAR 0 5
53138: PUSH
53139: LD_INT 5
53141: ST_TO_ADDR
// if btype = b_depot then
53142: LD_VAR 0 5
53146: PUSH
53147: LD_INT 0
53149: EQUAL
53150: IFFALSE 53160
// btype := b_warehouse ;
53152: LD_ADDR_VAR 0 5
53156: PUSH
53157: LD_INT 1
53159: ST_TO_ADDR
// if btype = b_workshop then
53160: LD_VAR 0 5
53164: PUSH
53165: LD_INT 2
53167: EQUAL
53168: IFFALSE 53178
// btype := b_factory ;
53170: LD_ADDR_VAR 0 5
53174: PUSH
53175: LD_INT 3
53177: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53178: LD_ADDR_VAR 0 4
53182: PUSH
53183: LD_VAR 0 5
53187: PPUSH
53188: LD_VAR 0 1
53192: PPUSH
53193: CALL_OW 248
53197: PPUSH
53198: CALL_OW 450
53202: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53203: LD_ADDR_VAR 0 2
53207: PUSH
53208: LD_VAR 0 3
53212: PPUSH
53213: LD_INT 1
53215: PPUSH
53216: CALL_OW 275
53220: PUSH
53221: LD_VAR 0 4
53225: PUSH
53226: LD_INT 1
53228: ARRAY
53229: GREATEREQUAL
53230: IFFALSE 53256
53232: PUSH
53233: LD_VAR 0 3
53237: PPUSH
53238: LD_INT 2
53240: PPUSH
53241: CALL_OW 275
53245: PUSH
53246: LD_VAR 0 4
53250: PUSH
53251: LD_INT 2
53253: ARRAY
53254: GREATEREQUAL
53255: AND
53256: IFFALSE 53282
53258: PUSH
53259: LD_VAR 0 3
53263: PPUSH
53264: LD_INT 3
53266: PPUSH
53267: CALL_OW 275
53271: PUSH
53272: LD_VAR 0 4
53276: PUSH
53277: LD_INT 3
53279: ARRAY
53280: GREATEREQUAL
53281: AND
53282: ST_TO_ADDR
// end ;
53283: LD_VAR 0 2
53287: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53288: LD_INT 0
53290: PPUSH
53291: PPUSH
53292: PPUSH
// pom := GetBase ( building ) ;
53293: LD_ADDR_VAR 0 4
53297: PUSH
53298: LD_VAR 0 1
53302: PPUSH
53303: CALL_OW 274
53307: ST_TO_ADDR
// if not pom then
53308: LD_VAR 0 4
53312: NOT
53313: IFFALSE 53317
// exit ;
53315: GO 53422
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53317: LD_ADDR_VAR 0 5
53321: PUSH
53322: LD_VAR 0 2
53326: PPUSH
53327: LD_VAR 0 1
53331: PPUSH
53332: CALL_OW 248
53336: PPUSH
53337: CALL_OW 450
53341: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53342: LD_ADDR_VAR 0 3
53346: PUSH
53347: LD_VAR 0 4
53351: PPUSH
53352: LD_INT 1
53354: PPUSH
53355: CALL_OW 275
53359: PUSH
53360: LD_VAR 0 5
53364: PUSH
53365: LD_INT 1
53367: ARRAY
53368: GREATEREQUAL
53369: IFFALSE 53395
53371: PUSH
53372: LD_VAR 0 4
53376: PPUSH
53377: LD_INT 2
53379: PPUSH
53380: CALL_OW 275
53384: PUSH
53385: LD_VAR 0 5
53389: PUSH
53390: LD_INT 2
53392: ARRAY
53393: GREATEREQUAL
53394: AND
53395: IFFALSE 53421
53397: PUSH
53398: LD_VAR 0 4
53402: PPUSH
53403: LD_INT 3
53405: PPUSH
53406: CALL_OW 275
53410: PUSH
53411: LD_VAR 0 5
53415: PUSH
53416: LD_INT 3
53418: ARRAY
53419: GREATEREQUAL
53420: AND
53421: ST_TO_ADDR
// end ;
53422: LD_VAR 0 3
53426: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53427: LD_INT 0
53429: PPUSH
53430: PPUSH
53431: PPUSH
53432: PPUSH
53433: PPUSH
53434: PPUSH
53435: PPUSH
53436: PPUSH
53437: PPUSH
53438: PPUSH
53439: PPUSH
// result := false ;
53440: LD_ADDR_VAR 0 8
53444: PUSH
53445: LD_INT 0
53447: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53448: LD_VAR 0 5
53452: NOT
53453: IFTRUE 53462
53455: PUSH
53456: LD_VAR 0 1
53460: NOT
53461: OR
53462: IFTRUE 53471
53464: PUSH
53465: LD_VAR 0 2
53469: NOT
53470: OR
53471: IFTRUE 53480
53473: PUSH
53474: LD_VAR 0 3
53478: NOT
53479: OR
53480: IFFALSE 53484
// exit ;
53482: GO 54310
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53484: LD_ADDR_VAR 0 14
53488: PUSH
53489: LD_VAR 0 1
53493: PPUSH
53494: LD_VAR 0 2
53498: PPUSH
53499: LD_VAR 0 3
53503: PPUSH
53504: LD_VAR 0 4
53508: PPUSH
53509: LD_VAR 0 5
53513: PUSH
53514: LD_INT 1
53516: ARRAY
53517: PPUSH
53518: CALL_OW 248
53522: PPUSH
53523: LD_INT 0
53525: PPUSH
53526: CALL 55591 0 6
53530: ST_TO_ADDR
// if not hexes then
53531: LD_VAR 0 14
53535: NOT
53536: IFFALSE 53540
// exit ;
53538: GO 54310
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53540: LD_ADDR_VAR 0 17
53544: PUSH
53545: LD_VAR 0 5
53549: PPUSH
53550: LD_INT 22
53552: PUSH
53553: LD_VAR 0 13
53557: PPUSH
53558: CALL_OW 255
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 2
53569: PUSH
53570: LD_INT 30
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 30
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: LIST
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PPUSH
53599: CALL_OW 72
53603: ST_TO_ADDR
// for i = 1 to hexes do
53604: LD_ADDR_VAR 0 9
53608: PUSH
53609: DOUBLE
53610: LD_INT 1
53612: DEC
53613: ST_TO_ADDR
53614: LD_VAR 0 14
53618: PUSH
53619: FOR_TO
53620: IFFALSE 54308
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53622: LD_ADDR_VAR 0 13
53626: PUSH
53627: LD_VAR 0 14
53631: PUSH
53632: LD_VAR 0 9
53636: ARRAY
53637: PUSH
53638: LD_INT 1
53640: ARRAY
53641: PPUSH
53642: LD_VAR 0 14
53646: PUSH
53647: LD_VAR 0 9
53651: ARRAY
53652: PUSH
53653: LD_INT 2
53655: ARRAY
53656: PPUSH
53657: CALL_OW 428
53661: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53662: LD_VAR 0 14
53666: PUSH
53667: LD_VAR 0 9
53671: ARRAY
53672: PUSH
53673: LD_INT 1
53675: ARRAY
53676: PPUSH
53677: LD_VAR 0 14
53681: PUSH
53682: LD_VAR 0 9
53686: ARRAY
53687: PUSH
53688: LD_INT 2
53690: ARRAY
53691: PPUSH
53692: CALL_OW 351
53696: IFTRUE 53735
53698: PUSH
53699: LD_VAR 0 14
53703: PUSH
53704: LD_VAR 0 9
53708: ARRAY
53709: PUSH
53710: LD_INT 1
53712: ARRAY
53713: PPUSH
53714: LD_VAR 0 14
53718: PUSH
53719: LD_VAR 0 9
53723: ARRAY
53724: PUSH
53725: LD_INT 2
53727: ARRAY
53728: PPUSH
53729: CALL_OW 488
53733: NOT
53734: OR
53735: IFTRUE 53752
53737: PUSH
53738: LD_VAR 0 13
53742: PPUSH
53743: CALL_OW 247
53747: PUSH
53748: LD_INT 3
53750: EQUAL
53751: OR
53752: IFFALSE 53758
// exit ;
53754: POP
53755: POP
53756: GO 54310
// if not tmp then
53758: LD_VAR 0 13
53762: NOT
53763: IFFALSE 53767
// continue ;
53765: GO 53619
// result := true ;
53767: LD_ADDR_VAR 0 8
53771: PUSH
53772: LD_INT 1
53774: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53775: LD_VAR 0 6
53779: IFFALSE 53796
53781: PUSH
53782: LD_VAR 0 13
53786: PPUSH
53787: CALL_OW 247
53791: PUSH
53792: LD_INT 2
53794: EQUAL
53795: AND
53796: IFFALSE 53813
53798: PUSH
53799: LD_VAR 0 13
53803: PPUSH
53804: CALL_OW 263
53808: PUSH
53809: LD_INT 1
53811: EQUAL
53812: AND
53813: IFFALSE 53977
// begin if IsDrivenBy ( tmp ) then
53815: LD_VAR 0 13
53819: PPUSH
53820: CALL_OW 311
53824: IFFALSE 53828
// continue ;
53826: GO 53619
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53828: LD_VAR 0 6
53832: PPUSH
53833: LD_INT 3
53835: PUSH
53836: LD_INT 60
53838: PUSH
53839: EMPTY
53840: LIST
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 3
53848: PUSH
53849: LD_INT 55
53851: PUSH
53852: EMPTY
53853: LIST
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PPUSH
53863: CALL_OW 72
53867: IFFALSE 53975
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53869: LD_ADDR_VAR 0 18
53873: PUSH
53874: LD_VAR 0 6
53878: PPUSH
53879: LD_INT 3
53881: PUSH
53882: LD_INT 60
53884: PUSH
53885: EMPTY
53886: LIST
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 3
53894: PUSH
53895: LD_INT 55
53897: PUSH
53898: EMPTY
53899: LIST
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PPUSH
53909: CALL_OW 72
53913: PUSH
53914: LD_INT 1
53916: ARRAY
53917: ST_TO_ADDR
// if IsInUnit ( driver ) then
53918: LD_VAR 0 18
53922: PPUSH
53923: CALL_OW 310
53927: IFFALSE 53938
// ComExit ( driver ) ;
53929: LD_VAR 0 18
53933: PPUSH
53934: CALL 79581 0 1
// AddComEnterUnit ( driver , tmp ) ;
53938: LD_VAR 0 18
53942: PPUSH
53943: LD_VAR 0 13
53947: PPUSH
53948: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53952: LD_VAR 0 18
53956: PPUSH
53957: LD_VAR 0 7
53961: PPUSH
53962: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53966: LD_VAR 0 18
53970: PPUSH
53971: CALL_OW 181
// end ; continue ;
53975: GO 53619
// end ; if not cleaners or not tmp in cleaners then
53977: LD_VAR 0 6
53981: NOT
53982: IFTRUE 53997
53984: PUSH
53985: LD_VAR 0 13
53989: PUSH
53990: LD_VAR 0 6
53994: IN
53995: NOT
53996: OR
53997: IFFALSE 54306
// begin if dep then
53999: LD_VAR 0 17
54003: IFFALSE 54139
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54005: LD_ADDR_VAR 0 16
54009: PUSH
54010: LD_VAR 0 17
54014: PUSH
54015: LD_INT 1
54017: ARRAY
54018: PPUSH
54019: CALL_OW 250
54023: PPUSH
54024: LD_VAR 0 17
54028: PUSH
54029: LD_INT 1
54031: ARRAY
54032: PPUSH
54033: CALL_OW 254
54037: PPUSH
54038: LD_INT 5
54040: PPUSH
54041: CALL_OW 272
54045: PUSH
54046: LD_VAR 0 17
54050: PUSH
54051: LD_INT 1
54053: ARRAY
54054: PPUSH
54055: CALL_OW 251
54059: PPUSH
54060: LD_VAR 0 17
54064: PUSH
54065: LD_INT 1
54067: ARRAY
54068: PPUSH
54069: CALL_OW 254
54073: PPUSH
54074: LD_INT 5
54076: PPUSH
54077: CALL_OW 273
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54086: LD_VAR 0 16
54090: PUSH
54091: LD_INT 1
54093: ARRAY
54094: PPUSH
54095: LD_VAR 0 16
54099: PUSH
54100: LD_INT 2
54102: ARRAY
54103: PPUSH
54104: CALL_OW 488
54108: IFFALSE 54139
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54110: LD_VAR 0 13
54114: PPUSH
54115: LD_VAR 0 16
54119: PUSH
54120: LD_INT 1
54122: ARRAY
54123: PPUSH
54124: LD_VAR 0 16
54128: PUSH
54129: LD_INT 2
54131: ARRAY
54132: PPUSH
54133: CALL_OW 111
// continue ;
54137: GO 53619
// end ; end ; r := GetDir ( tmp ) ;
54139: LD_ADDR_VAR 0 15
54143: PUSH
54144: LD_VAR 0 13
54148: PPUSH
54149: CALL_OW 254
54153: ST_TO_ADDR
// if r = 5 then
54154: LD_VAR 0 15
54158: PUSH
54159: LD_INT 5
54161: EQUAL
54162: IFFALSE 54172
// r := 0 ;
54164: LD_ADDR_VAR 0 15
54168: PUSH
54169: LD_INT 0
54171: ST_TO_ADDR
// for j = r to 5 do
54172: LD_ADDR_VAR 0 10
54176: PUSH
54177: DOUBLE
54178: LD_VAR 0 15
54182: DEC
54183: ST_TO_ADDR
54184: LD_INT 5
54186: PUSH
54187: FOR_TO
54188: IFFALSE 54304
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54190: LD_ADDR_VAR 0 11
54194: PUSH
54195: LD_VAR 0 13
54199: PPUSH
54200: CALL_OW 250
54204: PPUSH
54205: LD_VAR 0 10
54209: PPUSH
54210: LD_INT 2
54212: PPUSH
54213: CALL_OW 272
54217: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54218: LD_ADDR_VAR 0 12
54222: PUSH
54223: LD_VAR 0 13
54227: PPUSH
54228: CALL_OW 251
54232: PPUSH
54233: LD_VAR 0 10
54237: PPUSH
54238: LD_INT 2
54240: PPUSH
54241: CALL_OW 273
54245: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54246: LD_VAR 0 11
54250: PPUSH
54251: LD_VAR 0 12
54255: PPUSH
54256: CALL_OW 488
54260: IFFALSE 54279
54262: PUSH
54263: LD_VAR 0 11
54267: PPUSH
54268: LD_VAR 0 12
54272: PPUSH
54273: CALL_OW 428
54277: NOT
54278: AND
54279: IFFALSE 54302
// begin ComMoveXY ( tmp , _x , _y ) ;
54281: LD_VAR 0 13
54285: PPUSH
54286: LD_VAR 0 11
54290: PPUSH
54291: LD_VAR 0 12
54295: PPUSH
54296: CALL_OW 111
// break ;
54300: GO 54304
// end ; end ;
54302: GO 54187
54304: POP
54305: POP
// end ; end ;
54306: GO 53619
54308: POP
54309: POP
// end ;
54310: LD_VAR 0 8
54314: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54315: LD_INT 0
54317: PPUSH
// result := true ;
54318: LD_ADDR_VAR 0 3
54322: PUSH
54323: LD_INT 1
54325: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54326: LD_VAR 0 2
54330: PUSH
54331: LD_INT 24
54333: DOUBLE
54334: EQUAL
54335: IFTRUE 54345
54337: LD_INT 33
54339: DOUBLE
54340: EQUAL
54341: IFTRUE 54345
54343: GO 54370
54345: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54346: LD_ADDR_VAR 0 3
54350: PUSH
54351: LD_INT 32
54353: PPUSH
54354: LD_VAR 0 1
54358: PPUSH
54359: CALL_OW 321
54363: PUSH
54364: LD_INT 2
54366: EQUAL
54367: ST_TO_ADDR
54368: GO 54686
54370: LD_INT 20
54372: DOUBLE
54373: EQUAL
54374: IFTRUE 54378
54376: GO 54403
54378: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54379: LD_ADDR_VAR 0 3
54383: PUSH
54384: LD_INT 6
54386: PPUSH
54387: LD_VAR 0 1
54391: PPUSH
54392: CALL_OW 321
54396: PUSH
54397: LD_INT 2
54399: EQUAL
54400: ST_TO_ADDR
54401: GO 54686
54403: LD_INT 22
54405: DOUBLE
54406: EQUAL
54407: IFTRUE 54417
54409: LD_INT 36
54411: DOUBLE
54412: EQUAL
54413: IFTRUE 54417
54415: GO 54442
54417: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54418: LD_ADDR_VAR 0 3
54422: PUSH
54423: LD_INT 15
54425: PPUSH
54426: LD_VAR 0 1
54430: PPUSH
54431: CALL_OW 321
54435: PUSH
54436: LD_INT 2
54438: EQUAL
54439: ST_TO_ADDR
54440: GO 54686
54442: LD_INT 30
54444: DOUBLE
54445: EQUAL
54446: IFTRUE 54450
54448: GO 54475
54450: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54451: LD_ADDR_VAR 0 3
54455: PUSH
54456: LD_INT 20
54458: PPUSH
54459: LD_VAR 0 1
54463: PPUSH
54464: CALL_OW 321
54468: PUSH
54469: LD_INT 2
54471: EQUAL
54472: ST_TO_ADDR
54473: GO 54686
54475: LD_INT 28
54477: DOUBLE
54478: EQUAL
54479: IFTRUE 54489
54481: LD_INT 21
54483: DOUBLE
54484: EQUAL
54485: IFTRUE 54489
54487: GO 54514
54489: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54490: LD_ADDR_VAR 0 3
54494: PUSH
54495: LD_INT 21
54497: PPUSH
54498: LD_VAR 0 1
54502: PPUSH
54503: CALL_OW 321
54507: PUSH
54508: LD_INT 2
54510: EQUAL
54511: ST_TO_ADDR
54512: GO 54686
54514: LD_INT 16
54516: DOUBLE
54517: EQUAL
54518: IFTRUE 54522
54520: GO 54547
54522: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54523: LD_ADDR_VAR 0 3
54527: PUSH
54528: LD_INT 84
54530: PPUSH
54531: LD_VAR 0 1
54535: PPUSH
54536: CALL_OW 321
54540: PUSH
54541: LD_INT 2
54543: EQUAL
54544: ST_TO_ADDR
54545: GO 54686
54547: LD_INT 19
54549: DOUBLE
54550: EQUAL
54551: IFTRUE 54561
54553: LD_INT 23
54555: DOUBLE
54556: EQUAL
54557: IFTRUE 54561
54559: GO 54586
54561: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54562: LD_ADDR_VAR 0 3
54566: PUSH
54567: LD_INT 83
54569: PPUSH
54570: LD_VAR 0 1
54574: PPUSH
54575: CALL_OW 321
54579: PUSH
54580: LD_INT 2
54582: EQUAL
54583: ST_TO_ADDR
54584: GO 54686
54586: LD_INT 17
54588: DOUBLE
54589: EQUAL
54590: IFTRUE 54594
54592: GO 54619
54594: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54595: LD_ADDR_VAR 0 3
54599: PUSH
54600: LD_INT 39
54602: PPUSH
54603: LD_VAR 0 1
54607: PPUSH
54608: CALL_OW 321
54612: PUSH
54613: LD_INT 2
54615: EQUAL
54616: ST_TO_ADDR
54617: GO 54686
54619: LD_INT 18
54621: DOUBLE
54622: EQUAL
54623: IFTRUE 54627
54625: GO 54652
54627: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54628: LD_ADDR_VAR 0 3
54632: PUSH
54633: LD_INT 40
54635: PPUSH
54636: LD_VAR 0 1
54640: PPUSH
54641: CALL_OW 321
54645: PUSH
54646: LD_INT 2
54648: EQUAL
54649: ST_TO_ADDR
54650: GO 54686
54652: LD_INT 27
54654: DOUBLE
54655: EQUAL
54656: IFTRUE 54660
54658: GO 54685
54660: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54661: LD_ADDR_VAR 0 3
54665: PUSH
54666: LD_INT 35
54668: PPUSH
54669: LD_VAR 0 1
54673: PPUSH
54674: CALL_OW 321
54678: PUSH
54679: LD_INT 2
54681: EQUAL
54682: ST_TO_ADDR
54683: GO 54686
54685: POP
// end ;
54686: LD_VAR 0 3
54690: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54691: LD_INT 0
54693: PPUSH
54694: PPUSH
54695: PPUSH
54696: PPUSH
54697: PPUSH
54698: PPUSH
54699: PPUSH
54700: PPUSH
54701: PPUSH
54702: PPUSH
54703: PPUSH
// result := false ;
54704: LD_ADDR_VAR 0 6
54708: PUSH
54709: LD_INT 0
54711: ST_TO_ADDR
// if btype = b_depot then
54712: LD_VAR 0 2
54716: PUSH
54717: LD_INT 0
54719: EQUAL
54720: IFFALSE 54732
// begin result := true ;
54722: LD_ADDR_VAR 0 6
54726: PUSH
54727: LD_INT 1
54729: ST_TO_ADDR
// exit ;
54730: GO 55586
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54732: LD_VAR 0 1
54736: NOT
54737: IFTRUE 54762
54739: PUSH
54740: LD_VAR 0 1
54744: PPUSH
54745: CALL_OW 266
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: IN
54760: NOT
54761: OR
54762: IFTRUE 54771
54764: PUSH
54765: LD_VAR 0 2
54769: NOT
54770: OR
54771: IFTRUE 54807
54773: PUSH
54774: LD_VAR 0 5
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: LD_INT 2
54787: PUSH
54788: LD_INT 3
54790: PUSH
54791: LD_INT 4
54793: PUSH
54794: LD_INT 5
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: IN
54805: NOT
54806: OR
54807: IFTRUE 54826
54809: PUSH
54810: LD_VAR 0 3
54814: PPUSH
54815: LD_VAR 0 4
54819: PPUSH
54820: CALL_OW 488
54824: NOT
54825: OR
54826: IFFALSE 54830
// exit ;
54828: GO 55586
// side := GetSide ( depot ) ;
54830: LD_ADDR_VAR 0 9
54834: PUSH
54835: LD_VAR 0 1
54839: PPUSH
54840: CALL_OW 255
54844: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54845: LD_VAR 0 9
54849: PPUSH
54850: LD_VAR 0 2
54854: PPUSH
54855: CALL 54315 0 2
54859: NOT
54860: IFFALSE 54864
// exit ;
54862: GO 55586
// pom := GetBase ( depot ) ;
54864: LD_ADDR_VAR 0 10
54868: PUSH
54869: LD_VAR 0 1
54873: PPUSH
54874: CALL_OW 274
54878: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54879: LD_ADDR_VAR 0 11
54883: PUSH
54884: LD_VAR 0 2
54888: PPUSH
54889: LD_VAR 0 1
54893: PPUSH
54894: CALL_OW 248
54898: PPUSH
54899: CALL_OW 450
54903: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54904: LD_VAR 0 10
54908: PPUSH
54909: LD_INT 1
54911: PPUSH
54912: CALL_OW 275
54916: PUSH
54917: LD_VAR 0 11
54921: PUSH
54922: LD_INT 1
54924: ARRAY
54925: GREATEREQUAL
54926: IFFALSE 54952
54928: PUSH
54929: LD_VAR 0 10
54933: PPUSH
54934: LD_INT 2
54936: PPUSH
54937: CALL_OW 275
54941: PUSH
54942: LD_VAR 0 11
54946: PUSH
54947: LD_INT 2
54949: ARRAY
54950: GREATEREQUAL
54951: AND
54952: IFFALSE 54978
54954: PUSH
54955: LD_VAR 0 10
54959: PPUSH
54960: LD_INT 3
54962: PPUSH
54963: CALL_OW 275
54967: PUSH
54968: LD_VAR 0 11
54972: PUSH
54973: LD_INT 3
54975: ARRAY
54976: GREATEREQUAL
54977: AND
54978: NOT
54979: IFFALSE 54983
// exit ;
54981: GO 55586
// if GetBType ( depot ) = b_depot then
54983: LD_VAR 0 1
54987: PPUSH
54988: CALL_OW 266
54992: PUSH
54993: LD_INT 0
54995: EQUAL
54996: IFFALSE 55008
// dist := 28 else
54998: LD_ADDR_VAR 0 14
55002: PUSH
55003: LD_INT 28
55005: ST_TO_ADDR
55006: GO 55016
// dist := 36 ;
55008: LD_ADDR_VAR 0 14
55012: PUSH
55013: LD_INT 36
55015: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55016: LD_VAR 0 1
55020: PPUSH
55021: LD_VAR 0 3
55025: PPUSH
55026: LD_VAR 0 4
55030: PPUSH
55031: CALL_OW 297
55035: PUSH
55036: LD_VAR 0 14
55040: GREATER
55041: IFFALSE 55045
// exit ;
55043: GO 55586
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55045: LD_ADDR_VAR 0 12
55049: PUSH
55050: LD_VAR 0 2
55054: PPUSH
55055: LD_VAR 0 3
55059: PPUSH
55060: LD_VAR 0 4
55064: PPUSH
55065: LD_VAR 0 5
55069: PPUSH
55070: LD_VAR 0 1
55074: PPUSH
55075: CALL_OW 248
55079: PPUSH
55080: LD_INT 0
55082: PPUSH
55083: CALL 55591 0 6
55087: ST_TO_ADDR
// if not hexes then
55088: LD_VAR 0 12
55092: NOT
55093: IFFALSE 55097
// exit ;
55095: GO 55586
// hex := GetHexInfo ( x , y ) ;
55097: LD_ADDR_VAR 0 15
55101: PUSH
55102: LD_VAR 0 3
55106: PPUSH
55107: LD_VAR 0 4
55111: PPUSH
55112: CALL_OW 546
55116: ST_TO_ADDR
// if hex [ 1 ] then
55117: LD_VAR 0 15
55121: PUSH
55122: LD_INT 1
55124: ARRAY
55125: IFFALSE 55129
// exit ;
55127: GO 55586
// height := hex [ 2 ] ;
55129: LD_ADDR_VAR 0 13
55133: PUSH
55134: LD_VAR 0 15
55138: PUSH
55139: LD_INT 2
55141: ARRAY
55142: ST_TO_ADDR
// for i = 1 to hexes do
55143: LD_ADDR_VAR 0 7
55147: PUSH
55148: DOUBLE
55149: LD_INT 1
55151: DEC
55152: ST_TO_ADDR
55153: LD_VAR 0 12
55157: PUSH
55158: FOR_TO
55159: IFFALSE 55503
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55161: LD_VAR 0 12
55165: PUSH
55166: LD_VAR 0 7
55170: ARRAY
55171: PUSH
55172: LD_INT 1
55174: ARRAY
55175: PPUSH
55176: LD_VAR 0 12
55180: PUSH
55181: LD_VAR 0 7
55185: ARRAY
55186: PUSH
55187: LD_INT 2
55189: ARRAY
55190: PPUSH
55191: CALL_OW 488
55195: NOT
55196: IFTRUE 55238
55198: PUSH
55199: LD_VAR 0 12
55203: PUSH
55204: LD_VAR 0 7
55208: ARRAY
55209: PUSH
55210: LD_INT 1
55212: ARRAY
55213: PPUSH
55214: LD_VAR 0 12
55218: PUSH
55219: LD_VAR 0 7
55223: ARRAY
55224: PUSH
55225: LD_INT 2
55227: ARRAY
55228: PPUSH
55229: CALL_OW 428
55233: PUSH
55234: LD_INT 0
55236: GREATER
55237: OR
55238: IFTRUE 55276
55240: PUSH
55241: LD_VAR 0 12
55245: PUSH
55246: LD_VAR 0 7
55250: ARRAY
55251: PUSH
55252: LD_INT 1
55254: ARRAY
55255: PPUSH
55256: LD_VAR 0 12
55260: PUSH
55261: LD_VAR 0 7
55265: ARRAY
55266: PUSH
55267: LD_INT 2
55269: ARRAY
55270: PPUSH
55271: CALL_OW 351
55275: OR
55276: IFFALSE 55282
// exit ;
55278: POP
55279: POP
55280: GO 55586
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55282: LD_ADDR_VAR 0 8
55286: PUSH
55287: LD_VAR 0 12
55291: PUSH
55292: LD_VAR 0 7
55296: ARRAY
55297: PUSH
55298: LD_INT 1
55300: ARRAY
55301: PPUSH
55302: LD_VAR 0 12
55306: PUSH
55307: LD_VAR 0 7
55311: ARRAY
55312: PUSH
55313: LD_INT 2
55315: ARRAY
55316: PPUSH
55317: CALL_OW 546
55321: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55322: LD_VAR 0 8
55326: PUSH
55327: LD_INT 1
55329: ARRAY
55330: IFTRUE 55352
55332: PUSH
55333: LD_VAR 0 8
55337: PUSH
55338: LD_INT 2
55340: ARRAY
55341: PUSH
55342: LD_VAR 0 13
55346: PUSH
55347: LD_INT 2
55349: PLUS
55350: GREATER
55351: OR
55352: IFTRUE 55374
55354: PUSH
55355: LD_VAR 0 8
55359: PUSH
55360: LD_INT 2
55362: ARRAY
55363: PUSH
55364: LD_VAR 0 13
55368: PUSH
55369: LD_INT 2
55371: MINUS
55372: LESS
55373: OR
55374: IFTRUE 55442
55376: PUSH
55377: LD_VAR 0 8
55381: PUSH
55382: LD_INT 3
55384: ARRAY
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: LD_INT 8
55391: PUSH
55392: LD_INT 9
55394: PUSH
55395: LD_INT 10
55397: PUSH
55398: LD_INT 11
55400: PUSH
55401: LD_INT 12
55403: PUSH
55404: LD_INT 13
55406: PUSH
55407: LD_INT 16
55409: PUSH
55410: LD_INT 17
55412: PUSH
55413: LD_INT 18
55415: PUSH
55416: LD_INT 19
55418: PUSH
55419: LD_INT 20
55421: PUSH
55422: LD_INT 21
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: IN
55440: NOT
55441: OR
55442: IFTRUE 55455
55444: PUSH
55445: LD_VAR 0 8
55449: PUSH
55450: LD_INT 5
55452: ARRAY
55453: NOT
55454: OR
55455: IFTRUE 55495
55457: PUSH
55458: LD_VAR 0 8
55462: PUSH
55463: LD_INT 6
55465: ARRAY
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: LD_INT 7
55475: PUSH
55476: LD_INT 9
55478: PUSH
55479: LD_INT 10
55481: PUSH
55482: LD_INT 11
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: IN
55493: NOT
55494: OR
55495: IFFALSE 55501
// exit ;
55497: POP
55498: POP
55499: GO 55586
// end ;
55501: GO 55158
55503: POP
55504: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55505: LD_VAR 0 9
55509: PPUSH
55510: LD_VAR 0 3
55514: PPUSH
55515: LD_VAR 0 4
55519: PPUSH
55520: LD_INT 20
55522: PPUSH
55523: CALL 47405 0 4
55527: PUSH
55528: LD_INT 4
55530: ARRAY
55531: IFFALSE 55535
// exit ;
55533: GO 55586
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55535: LD_VAR 0 2
55539: PUSH
55540: LD_INT 29
55542: PUSH
55543: LD_INT 30
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: IN
55550: IFFALSE 55574
55552: PUSH
55553: LD_VAR 0 3
55557: PPUSH
55558: LD_VAR 0 4
55562: PPUSH
55563: LD_VAR 0 9
55567: PPUSH
55568: CALL_OW 440
55572: NOT
55573: AND
55574: IFFALSE 55578
// exit ;
55576: GO 55586
// result := true ;
55578: LD_ADDR_VAR 0 6
55582: PUSH
55583: LD_INT 1
55585: ST_TO_ADDR
// end ;
55586: LD_VAR 0 6
55590: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55591: LD_INT 0
55593: PPUSH
55594: PPUSH
55595: PPUSH
55596: PPUSH
55597: PPUSH
55598: PPUSH
55599: PPUSH
55600: PPUSH
55601: PPUSH
55602: PPUSH
55603: PPUSH
55604: PPUSH
55605: PPUSH
55606: PPUSH
55607: PPUSH
55608: PPUSH
55609: PPUSH
55610: PPUSH
55611: PPUSH
55612: PPUSH
55613: PPUSH
55614: PPUSH
55615: PPUSH
55616: PPUSH
55617: PPUSH
55618: PPUSH
55619: PPUSH
55620: PPUSH
55621: PPUSH
55622: PPUSH
55623: PPUSH
55624: PPUSH
55625: PPUSH
55626: PPUSH
55627: PPUSH
55628: PPUSH
55629: PPUSH
55630: PPUSH
55631: PPUSH
55632: PPUSH
55633: PPUSH
55634: PPUSH
55635: PPUSH
55636: PPUSH
55637: PPUSH
55638: PPUSH
55639: PPUSH
55640: PPUSH
55641: PPUSH
55642: PPUSH
55643: PPUSH
55644: PPUSH
55645: PPUSH
55646: PPUSH
55647: PPUSH
55648: PPUSH
55649: PPUSH
55650: PPUSH
// result = [ ] ;
55651: LD_ADDR_VAR 0 7
55655: PUSH
55656: EMPTY
55657: ST_TO_ADDR
// temp_list = [ ] ;
55658: LD_ADDR_VAR 0 9
55662: PUSH
55663: EMPTY
55664: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55665: LD_VAR 0 4
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: LD_INT 2
55678: PUSH
55679: LD_INT 3
55681: PUSH
55682: LD_INT 4
55684: PUSH
55685: LD_INT 5
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: IN
55696: NOT
55697: IFTRUE 55740
55699: PUSH
55700: LD_VAR 0 1
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: IN
55715: IFFALSE 55739
55717: PUSH
55718: LD_VAR 0 5
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: LD_INT 3
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: LIST
55736: IN
55737: NOT
55738: AND
55739: OR
55740: IFFALSE 55744
// exit ;
55742: GO 74143
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55744: LD_VAR 0 1
55748: PUSH
55749: LD_INT 6
55751: PUSH
55752: LD_INT 7
55754: PUSH
55755: LD_INT 8
55757: PUSH
55758: LD_INT 13
55760: PUSH
55761: LD_INT 12
55763: PUSH
55764: LD_INT 15
55766: PUSH
55767: LD_INT 11
55769: PUSH
55770: LD_INT 14
55772: PUSH
55773: LD_INT 10
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: IN
55787: IFFALSE 55797
// btype = b_lab ;
55789: LD_ADDR_VAR 0 1
55793: PUSH
55794: LD_INT 6
55796: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55797: LD_VAR 0 6
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: LD_INT 2
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: LIST
55815: IN
55816: NOT
55817: IFTRUE 55885
55819: PUSH
55820: LD_VAR 0 1
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: LD_INT 3
55836: PUSH
55837: LD_INT 6
55839: PUSH
55840: LD_INT 36
55842: PUSH
55843: LD_INT 4
55845: PUSH
55846: LD_INT 5
55848: PUSH
55849: LD_INT 31
55851: PUSH
55852: LD_INT 32
55854: PUSH
55855: LD_INT 33
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: IN
55871: NOT
55872: IFFALSE 55884
55874: PUSH
55875: LD_VAR 0 6
55879: PUSH
55880: LD_INT 1
55882: EQUAL
55883: AND
55884: OR
55885: IFTRUE 55917
55887: PUSH
55888: LD_VAR 0 1
55892: PUSH
55893: LD_INT 2
55895: PUSH
55896: LD_INT 3
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: IN
55903: NOT
55904: IFFALSE 55916
55906: PUSH
55907: LD_VAR 0 6
55911: PUSH
55912: LD_INT 2
55914: EQUAL
55915: AND
55916: OR
55917: IFFALSE 55927
// mode = 0 ;
55919: LD_ADDR_VAR 0 6
55923: PUSH
55924: LD_INT 0
55926: ST_TO_ADDR
// case mode of 0 :
55927: LD_VAR 0 6
55931: PUSH
55932: LD_INT 0
55934: DOUBLE
55935: EQUAL
55936: IFTRUE 55940
55938: GO 67393
55940: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55941: LD_ADDR_VAR 0 11
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: LD_INT 2
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: LD_INT 2
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: LD_INT 3
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: LD_INT 3
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: LD_INT 2
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56134: LD_ADDR_VAR 0 12
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: LD_INT 1
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 2
56280: NEG
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 3
56291: NEG
56292: PUSH
56293: LD_INT 0
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 3
56302: NEG
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56330: LD_ADDR_VAR 0 13
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: LD_INT 1
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: LD_INT 2
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: LD_INT 2
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 2
56465: NEG
56466: PUSH
56467: LD_INT 2
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 2
56477: NEG
56478: PUSH
56479: LD_INT 3
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 3
56489: NEG
56490: PUSH
56491: LD_INT 2
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 3
56501: NEG
56502: PUSH
56503: LD_INT 3
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56529: LD_ADDR_VAR 0 14
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: LD_INT 2
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 2
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: LD_INT 3
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 3
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: LD_INT 2
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56725: LD_ADDR_VAR 0 15
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 2
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 2
56848: NEG
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 2
56871: PUSH
56872: LD_INT 1
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 3
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 3
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56918: LD_ADDR_VAR 0 16
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: LD_INT 2
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 2
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: LD_INT 2
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: LD_INT 2
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 2
57041: NEG
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 2
57053: NEG
57054: PUSH
57055: LD_INT 2
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 3
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 3
57075: PUSH
57076: LD_INT 3
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 2
57085: PUSH
57086: LD_INT 3
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57111: LD_ADDR_VAR 0 17
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: LD_INT 1
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: LD_INT 2
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: LD_INT 2
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 2
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 2
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 2
57246: PUSH
57247: LD_INT 2
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: LD_INT 2
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: LD_INT 2
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: LD_INT 1
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: LD_INT 0
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 2
57298: NEG
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 2
57310: NEG
57311: PUSH
57312: LD_INT 2
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57341: LD_ADDR_VAR 0 18
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 1
57369: PUSH
57370: LD_INT 0
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 1
57422: NEG
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: LD_INT 2
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: LD_INT 1
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 2
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 2
57466: PUSH
57467: LD_INT 1
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: LD_INT 2
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: LD_INT 2
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: LD_INT 2
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 2
57517: NEG
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 2
57528: NEG
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 2
57540: NEG
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57571: LD_ADDR_VAR 0 19
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: LD_INT 0
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: LD_INT 2
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: LD_INT 2
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 2
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 2
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: LD_INT 2
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: LD_INT 2
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: LD_INT 2
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: LD_INT 1
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 2
57747: NEG
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 2
57758: NEG
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: LD_INT 2
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57801: LD_ADDR_VAR 0 20
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 1
57870: NEG
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: LD_INT 2
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: LD_INT 2
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: LD_INT 1
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 2
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 2
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 2
57936: PUSH
57937: LD_INT 2
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: LD_INT 2
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: LD_INT 2
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 2
57977: NEG
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 2
57988: NEG
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 2
58000: NEG
58001: PUSH
58002: LD_INT 2
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58031: LD_ADDR_VAR 0 21
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: LD_INT 1
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: LD_INT 1
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 1
58089: NEG
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: LD_INT 1
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: LD_INT 2
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 2
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 2
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: LD_INT 2
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: LD_INT 1
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 2
58207: NEG
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 2
58218: NEG
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 2
58230: NEG
58231: PUSH
58232: LD_INT 2
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58261: LD_ADDR_VAR 0 22
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: NEG
58343: PUSH
58344: LD_INT 2
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: LD_INT 2
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 2
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 2
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: LD_INT 2
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: LD_INT 2
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: LD_INT 1
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 2
58437: NEG
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 2
58460: NEG
58461: PUSH
58462: LD_INT 2
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58491: LD_ADDR_VAR 0 23
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 1
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: NEG
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: LD_INT 2
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: LD_INT 2
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 2
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 2
58626: PUSH
58627: LD_INT 2
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 1
58636: PUSH
58637: LD_INT 2
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: LD_INT 2
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: LD_INT 1
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 2
58667: NEG
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: LD_INT 1
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 2
58690: NEG
58691: PUSH
58692: LD_INT 2
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 2
58702: NEG
58703: PUSH
58704: LD_INT 3
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: LD_INT 3
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: LD_INT 2
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 2
58737: PUSH
58738: LD_INT 1
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58771: LD_ADDR_VAR 0 24
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: LD_INT 0
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: NEG
58853: PUSH
58854: LD_INT 2
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: LD_INT 2
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 1
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 2
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 2
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 2
58906: PUSH
58907: LD_INT 2
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: PUSH
58917: LD_INT 2
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: LD_INT 1
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 2
58947: NEG
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: NEG
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 2
58970: NEG
58971: PUSH
58972: LD_INT 2
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: LD_INT 2
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 3
59004: PUSH
59005: LD_INT 1
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 3
59014: PUSH
59015: LD_INT 2
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59047: LD_ADDR_VAR 0 25
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: LD_INT 1
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: LD_INT 1
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: LD_INT 2
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: LD_INT 2
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 2
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 2
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: LD_INT 2
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: LD_INT 2
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 2
59223: NEG
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 2
59234: NEG
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 2
59246: NEG
59247: PUSH
59248: LD_INT 2
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 3
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 3
59268: PUSH
59269: LD_INT 2
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 2
59278: PUSH
59279: LD_INT 3
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: PUSH
59289: LD_INT 3
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59321: LD_ADDR_VAR 0 26
59325: PUSH
59326: LD_INT 0
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 1
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: NEG
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 1
59402: NEG
59403: PUSH
59404: LD_INT 2
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: LD_INT 2
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 2
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 2
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 2
59456: PUSH
59457: LD_INT 2
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: LD_INT 2
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: LD_INT 2
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 2
59497: NEG
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 2
59508: NEG
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 2
59520: NEG
59521: PUSH
59522: LD_INT 2
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 2
59532: PUSH
59533: LD_INT 3
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: LD_INT 3
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: LD_INT 2
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 2
59563: NEG
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59597: LD_ADDR_VAR 0 27
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 1
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: NEG
59679: PUSH
59680: LD_INT 2
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: LD_INT 2
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 1
59701: PUSH
59702: LD_INT 1
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 2
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 2
59722: PUSH
59723: LD_INT 1
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 2
59732: PUSH
59733: LD_INT 2
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: LD_INT 2
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 0
59752: PUSH
59753: LD_INT 2
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 1
59762: NEG
59763: PUSH
59764: LD_INT 1
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 2
59773: NEG
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 2
59784: NEG
59785: PUSH
59786: LD_INT 1
59788: NEG
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 2
59796: NEG
59797: PUSH
59798: LD_INT 2
59800: NEG
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: LD_INT 2
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 2
59819: NEG
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 3
59830: NEG
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 3
59842: NEG
59843: PUSH
59844: LD_INT 2
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59877: LD_ADDR_VAR 0 28
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 1
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: LD_INT 1
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 0
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 1
59935: NEG
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: LD_INT 2
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 0
59970: PUSH
59971: LD_INT 2
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 1
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 2
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 2
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: LD_INT 2
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 1
60022: PUSH
60023: LD_INT 2
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 0
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: NEG
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 2
60053: NEG
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 2
60064: NEG
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 2
60076: NEG
60077: PUSH
60078: LD_INT 2
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 2
60088: NEG
60089: PUSH
60090: LD_INT 3
60092: NEG
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 1
60100: NEG
60101: PUSH
60102: LD_INT 3
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 3
60112: NEG
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 3
60124: NEG
60125: PUSH
60126: LD_INT 2
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60159: LD_ADDR_VAR 0 29
60163: PUSH
60164: LD_INT 0
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: LD_INT 1
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: LD_INT 2
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: LD_INT 2
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 1
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 2
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 2
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: LD_INT 2
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: NEG
60315: PUSH
60316: LD_INT 1
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 2
60325: NEG
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 2
60337: NEG
60338: PUSH
60339: LD_INT 2
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 2
60349: NEG
60350: PUSH
60351: LD_INT 3
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: LD_INT 1
60364: NEG
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 3
60372: PUSH
60373: LD_INT 1
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 1
60382: PUSH
60383: LD_INT 3
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 1
60392: NEG
60393: PUSH
60394: LD_INT 2
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 3
60403: NEG
60404: PUSH
60405: LD_INT 2
60407: NEG
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60438: LD_ADDR_VAR 0 30
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: LD_INT 1
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 1
60496: NEG
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 1
60507: NEG
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 1
60519: NEG
60520: PUSH
60521: LD_INT 2
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 2
60534: NEG
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: LD_INT 1
60545: NEG
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 2
60553: PUSH
60554: LD_INT 0
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 2
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: PUSH
60574: LD_INT 2
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: PUSH
60584: LD_INT 2
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: LD_INT 1
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 2
60604: NEG
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: LD_INT 3
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 1
60639: PUSH
60640: LD_INT 2
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 3
60650: PUSH
60651: LD_INT 2
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 2
60660: PUSH
60661: LD_INT 3
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 2
60670: NEG
60671: PUSH
60672: LD_INT 1
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 3
60681: NEG
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60716: LD_ADDR_VAR 0 31
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: LD_INT 1
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 1
60774: NEG
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: LD_INT 1
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: LD_INT 2
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: PUSH
60810: LD_INT 1
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 2
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 2
60830: PUSH
60831: LD_INT 1
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 2
60840: PUSH
60841: LD_INT 2
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: LD_INT 2
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: LD_INT 2
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 1
60870: NEG
60871: PUSH
60872: LD_INT 1
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 2
60881: NEG
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 2
60893: NEG
60894: PUSH
60895: LD_INT 2
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 2
60905: NEG
60906: PUSH
60907: LD_INT 3
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 2
60917: PUSH
60918: LD_INT 1
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 3
60928: PUSH
60929: LD_INT 1
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: PUSH
60939: LD_INT 3
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: LD_INT 2
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 3
60959: NEG
60960: PUSH
60961: LD_INT 2
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60994: LD_ADDR_VAR 0 32
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: LD_INT 1
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: LD_INT 1
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: LD_INT 2
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: LD_INT 1
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: PUSH
61120: LD_INT 2
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: PUSH
61130: LD_INT 2
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: LD_INT 2
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 2
61160: NEG
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 2
61171: NEG
61172: PUSH
61173: LD_INT 1
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: LD_INT 3
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: LD_INT 2
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 3
61206: PUSH
61207: LD_INT 2
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 2
61216: PUSH
61217: LD_INT 3
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 2
61226: NEG
61227: PUSH
61228: LD_INT 1
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 3
61237: NEG
61238: PUSH
61239: LD_INT 1
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61272: LD_ADDR_VAR 0 33
61276: PUSH
61277: LD_INT 0
61279: PUSH
61280: LD_INT 0
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: LD_INT 1
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 1
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 0
61320: PUSH
61321: LD_INT 1
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 1
61330: NEG
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 1
61341: NEG
61342: PUSH
61343: LD_INT 1
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 1
61353: NEG
61354: PUSH
61355: LD_INT 2
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 1
61365: PUSH
61366: LD_INT 1
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 2
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 2
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 1
61396: PUSH
61397: LD_INT 2
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: LD_INT 2
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 1
61416: NEG
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 2
61427: NEG
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 2
61438: NEG
61439: PUSH
61440: LD_INT 1
61442: NEG
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 2
61450: NEG
61451: PUSH
61452: LD_INT 2
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 2
61462: NEG
61463: PUSH
61464: LD_INT 3
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 2
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 3
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: LD_INT 3
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 1
61505: NEG
61506: PUSH
61507: LD_INT 2
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 3
61516: NEG
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61551: LD_ADDR_VAR 0 34
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: LD_INT 0
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 0
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: LD_INT 1
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: NEG
61621: PUSH
61622: LD_INT 1
61624: NEG
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 1
61632: NEG
61633: PUSH
61634: LD_INT 2
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: LD_INT 2
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 1
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: LD_INT 2
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: LD_INT 2
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: LD_INT 1
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 2
61707: NEG
61708: PUSH
61709: LD_INT 0
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 2
61718: NEG
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 2
61730: NEG
61731: PUSH
61732: LD_INT 2
61734: NEG
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: LD_INT 3
61746: NEG
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 1
61754: PUSH
61755: LD_INT 2
61757: NEG
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 3
61765: PUSH
61766: LD_INT 2
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 2
61775: PUSH
61776: LD_INT 3
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 2
61785: NEG
61786: PUSH
61787: LD_INT 1
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 3
61796: NEG
61797: PUSH
61798: LD_INT 1
61800: NEG
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61831: LD_ADDR_VAR 0 35
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 0
61848: PUSH
61849: LD_INT 1
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 1
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: LD_INT 1
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 1
61889: NEG
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: NEG
61901: PUSH
61902: LD_INT 1
61904: NEG
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 2
61912: PUSH
61913: LD_INT 1
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 2
61922: NEG
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61943: LD_ADDR_VAR 0 36
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: LD_INT 1
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 1
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: LD_INT 1
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: NEG
62013: PUSH
62014: LD_INT 1
62016: NEG
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 1
62024: NEG
62025: PUSH
62026: LD_INT 2
62028: NEG
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 1
62036: PUSH
62037: LD_INT 2
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62055: LD_ADDR_VAR 0 37
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 0
62072: PUSH
62073: LD_INT 1
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 1
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 1
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 0
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: NEG
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: NEG
62148: PUSH
62149: LD_INT 1
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62167: LD_ADDR_VAR 0 38
62171: PUSH
62172: LD_INT 0
62174: PUSH
62175: LD_INT 0
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 1
62205: PUSH
62206: LD_INT 1
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: LD_INT 1
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 2
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 2
62258: NEG
62259: PUSH
62260: LD_INT 1
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62279: LD_ADDR_VAR 0 39
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: LD_INT 0
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: LD_INT 1
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 1
62307: PUSH
62308: LD_INT 0
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: PUSH
62318: LD_INT 1
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: LD_INT 1
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: NEG
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 1
62348: NEG
62349: PUSH
62350: LD_INT 1
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: LD_INT 2
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 1
62372: PUSH
62373: LD_INT 2
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62391: LD_ADDR_VAR 0 40
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 0
62408: PUSH
62409: LD_INT 1
62411: NEG
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: LD_INT 0
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 1
62429: PUSH
62430: LD_INT 1
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: LD_INT 1
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 1
62449: NEG
62450: PUSH
62451: LD_INT 0
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: LD_INT 1
62464: NEG
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 1
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62503: LD_ADDR_VAR 0 41
62507: PUSH
62508: LD_INT 0
62510: PUSH
62511: LD_INT 0
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: LD_INT 1
62523: NEG
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 1
62531: PUSH
62532: LD_INT 0
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: LD_INT 1
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 0
62551: PUSH
62552: LD_INT 1
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: LD_INT 0
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 1
62572: NEG
62573: PUSH
62574: LD_INT 1
62576: NEG
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 1
62584: NEG
62585: PUSH
62586: LD_INT 2
62588: NEG
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: LD_INT 1
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 2
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 2
62617: PUSH
62618: LD_INT 1
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 2
62627: PUSH
62628: LD_INT 2
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: LD_INT 2
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 1
62647: NEG
62648: PUSH
62649: LD_INT 1
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 2
62658: NEG
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 2
62669: NEG
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 2
62681: NEG
62682: PUSH
62683: LD_INT 2
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 2
62693: NEG
62694: PUSH
62695: LD_INT 3
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 2
62705: PUSH
62706: LD_INT 1
62708: NEG
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 3
62716: PUSH
62717: LD_INT 0
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 3
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 3
62736: PUSH
62737: LD_INT 2
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 3
62746: PUSH
62747: LD_INT 3
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 2
62756: PUSH
62757: LD_INT 3
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 2
62766: NEG
62767: PUSH
62768: LD_INT 1
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 3
62777: NEG
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 3
62788: NEG
62789: PUSH
62790: LD_INT 1
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 3
62800: NEG
62801: PUSH
62802: LD_INT 2
62804: NEG
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 3
62812: NEG
62813: PUSH
62814: LD_INT 3
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62853: LD_ADDR_VAR 0 42
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 0
62870: PUSH
62871: LD_INT 1
62873: NEG
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: PUSH
62882: LD_INT 0
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 1
62891: PUSH
62892: LD_INT 1
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 1
62911: NEG
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 1
62922: NEG
62923: PUSH
62924: LD_INT 1
62926: NEG
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 1
62934: NEG
62935: PUSH
62936: LD_INT 2
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: LD_INT 2
62949: NEG
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 1
62957: PUSH
62958: LD_INT 1
62960: NEG
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 2
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 2
62978: PUSH
62979: LD_INT 2
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 1
62988: PUSH
62989: LD_INT 2
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 0
62998: PUSH
62999: LD_INT 2
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: LD_INT 1
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 2
63019: NEG
63020: PUSH
63021: LD_INT 1
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 2
63031: NEG
63032: PUSH
63033: LD_INT 2
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 2
63043: NEG
63044: PUSH
63045: LD_INT 3
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 1
63055: NEG
63056: PUSH
63057: LD_INT 3
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: LD_INT 3
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: LD_INT 2
63081: NEG
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 3
63089: PUSH
63090: LD_INT 2
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 3
63099: PUSH
63100: LD_INT 3
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 2
63109: PUSH
63110: LD_INT 3
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 1
63119: PUSH
63120: LD_INT 3
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 0
63129: PUSH
63130: LD_INT 3
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 1
63139: NEG
63140: PUSH
63141: LD_INT 2
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 3
63150: NEG
63151: PUSH
63152: LD_INT 2
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 3
63162: NEG
63163: PUSH
63164: LD_INT 3
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63203: LD_ADDR_VAR 0 43
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 0
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 1
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 0
63251: PUSH
63252: LD_INT 1
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: NEG
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 1
63272: NEG
63273: PUSH
63274: LD_INT 1
63276: NEG
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 1
63284: NEG
63285: PUSH
63286: LD_INT 2
63288: NEG
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: LD_INT 2
63299: NEG
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 2
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 2
63328: PUSH
63329: LD_INT 1
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 1
63338: PUSH
63339: LD_INT 2
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 0
63348: PUSH
63349: LD_INT 2
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: LD_INT 1
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 2
63369: NEG
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 2
63380: NEG
63381: PUSH
63382: LD_INT 1
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: PUSH
63394: LD_INT 3
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 0
63404: PUSH
63405: LD_INT 3
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 1
63415: PUSH
63416: LD_INT 2
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 2
63426: PUSH
63427: LD_INT 1
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 3
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 3
63447: PUSH
63448: LD_INT 1
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: LD_INT 3
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: LD_INT 3
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: LD_INT 2
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 2
63488: NEG
63489: PUSH
63490: LD_INT 1
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 3
63499: NEG
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 3
63510: NEG
63511: PUSH
63512: LD_INT 1
63514: NEG
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63551: LD_ADDR_VAR 0 44
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 0
63568: PUSH
63569: LD_INT 1
63571: NEG
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 1
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: LD_INT 1
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 0
63599: PUSH
63600: LD_INT 1
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 1
63609: NEG
63610: PUSH
63611: LD_INT 0
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 1
63620: NEG
63621: PUSH
63622: LD_INT 1
63624: NEG
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 1
63632: NEG
63633: PUSH
63634: LD_INT 2
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 1
63644: PUSH
63645: LD_INT 1
63647: NEG
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 2
63655: PUSH
63656: LD_INT 0
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 2
63665: PUSH
63666: LD_INT 1
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 2
63675: PUSH
63676: LD_INT 2
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 1
63685: PUSH
63686: LD_INT 2
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 2
63706: NEG
63707: PUSH
63708: LD_INT 0
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 2
63717: NEG
63718: PUSH
63719: LD_INT 1
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 2
63729: NEG
63730: PUSH
63731: LD_INT 2
63733: NEG
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 2
63741: NEG
63742: PUSH
63743: LD_INT 3
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 2
63753: PUSH
63754: LD_INT 1
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 3
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 3
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 3
63784: PUSH
63785: LD_INT 2
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 3
63794: PUSH
63795: LD_INT 3
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 2
63804: PUSH
63805: LD_INT 3
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 2
63814: NEG
63815: PUSH
63816: LD_INT 1
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 3
63825: NEG
63826: PUSH
63827: LD_INT 0
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 3
63836: NEG
63837: PUSH
63838: LD_INT 1
63840: NEG
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 3
63848: NEG
63849: PUSH
63850: LD_INT 2
63852: NEG
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 3
63860: NEG
63861: PUSH
63862: LD_INT 3
63864: NEG
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63901: LD_ADDR_VAR 0 45
63905: PUSH
63906: LD_INT 0
63908: PUSH
63909: LD_INT 0
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 0
63918: PUSH
63919: LD_INT 1
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 1
63929: PUSH
63930: LD_INT 0
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 1
63939: PUSH
63940: LD_INT 1
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 0
63949: PUSH
63950: LD_INT 1
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 1
63959: NEG
63960: PUSH
63961: LD_INT 0
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 1
63970: NEG
63971: PUSH
63972: LD_INT 1
63974: NEG
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 1
63982: NEG
63983: PUSH
63984: LD_INT 2
63986: NEG
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 0
63994: PUSH
63995: LD_INT 2
63997: NEG
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 1
64005: PUSH
64006: LD_INT 1
64008: NEG
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 2
64016: PUSH
64017: LD_INT 1
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 2
64026: PUSH
64027: LD_INT 2
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 1
64036: PUSH
64037: LD_INT 2
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: LD_INT 2
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: LD_INT 1
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 2
64067: NEG
64068: PUSH
64069: LD_INT 1
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 2
64079: NEG
64080: PUSH
64081: LD_INT 2
64083: NEG
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 2
64091: NEG
64092: PUSH
64093: LD_INT 3
64095: NEG
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 1
64103: NEG
64104: PUSH
64105: LD_INT 3
64107: NEG
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: LD_INT 3
64118: NEG
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 1
64126: PUSH
64127: LD_INT 2
64129: NEG
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 3
64137: PUSH
64138: LD_INT 2
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 3
64147: PUSH
64148: LD_INT 3
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 2
64157: PUSH
64158: LD_INT 3
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 1
64167: PUSH
64168: LD_INT 3
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 0
64177: PUSH
64178: LD_INT 3
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 1
64187: NEG
64188: PUSH
64189: LD_INT 2
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 3
64198: NEG
64199: PUSH
64200: LD_INT 2
64202: NEG
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 3
64210: NEG
64211: PUSH
64212: LD_INT 3
64214: NEG
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64251: LD_ADDR_VAR 0 46
64255: PUSH
64256: LD_INT 0
64258: PUSH
64259: LD_INT 0
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: LD_INT 1
64271: NEG
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: LD_INT 0
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 1
64289: PUSH
64290: LD_INT 1
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 0
64299: PUSH
64300: LD_INT 1
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 1
64309: NEG
64310: PUSH
64311: LD_INT 0
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 1
64320: NEG
64321: PUSH
64322: LD_INT 1
64324: NEG
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 1
64332: NEG
64333: PUSH
64334: LD_INT 2
64336: NEG
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 0
64344: PUSH
64345: LD_INT 2
64347: NEG
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 1
64355: PUSH
64356: LD_INT 1
64358: NEG
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 2
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 2
64376: PUSH
64377: LD_INT 1
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 1
64386: PUSH
64387: LD_INT 2
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 0
64396: PUSH
64397: LD_INT 2
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 1
64406: NEG
64407: PUSH
64408: LD_INT 1
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 2
64417: NEG
64418: PUSH
64419: LD_INT 0
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 2
64428: NEG
64429: PUSH
64430: LD_INT 1
64432: NEG
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 1
64440: NEG
64441: PUSH
64442: LD_INT 3
64444: NEG
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 0
64452: PUSH
64453: LD_INT 3
64455: NEG
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 1
64463: PUSH
64464: LD_INT 2
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 2
64474: PUSH
64475: LD_INT 1
64477: NEG
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 3
64485: PUSH
64486: LD_INT 0
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 3
64495: PUSH
64496: LD_INT 1
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 1
64505: PUSH
64506: LD_INT 3
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: LD_INT 3
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 1
64525: NEG
64526: PUSH
64527: LD_INT 2
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 2
64536: NEG
64537: PUSH
64538: LD_INT 1
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 3
64547: NEG
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 3
64558: NEG
64559: PUSH
64560: LD_INT 1
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64599: LD_ADDR_VAR 0 47
64603: PUSH
64604: LD_INT 0
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 0
64616: PUSH
64617: LD_INT 1
64619: NEG
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 1
64627: PUSH
64628: LD_INT 0
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 1
64637: PUSH
64638: LD_INT 1
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 1
64657: NEG
64658: PUSH
64659: LD_INT 0
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 1
64668: NEG
64669: PUSH
64670: LD_INT 1
64672: NEG
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 1
64680: NEG
64681: PUSH
64682: LD_INT 2
64684: NEG
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: LD_INT 2
64695: NEG
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 1
64703: PUSH
64704: LD_INT 1
64706: NEG
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 2
64714: NEG
64715: PUSH
64716: LD_INT 1
64718: NEG
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 2
64726: NEG
64727: PUSH
64728: LD_INT 2
64730: NEG
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64750: LD_ADDR_VAR 0 48
64754: PUSH
64755: LD_INT 0
64757: PUSH
64758: LD_INT 0
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: LD_INT 1
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 1
64778: PUSH
64779: LD_INT 0
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: LD_INT 1
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: LD_INT 1
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 1
64808: NEG
64809: PUSH
64810: LD_INT 0
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 1
64819: NEG
64820: PUSH
64821: LD_INT 1
64823: NEG
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 1
64831: NEG
64832: PUSH
64833: LD_INT 2
64835: NEG
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 0
64843: PUSH
64844: LD_INT 2
64846: NEG
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 1
64854: PUSH
64855: LD_INT 1
64857: NEG
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 2
64865: PUSH
64866: LD_INT 0
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 2
64875: PUSH
64876: LD_INT 1
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64897: LD_ADDR_VAR 0 49
64901: PUSH
64902: LD_INT 0
64904: PUSH
64905: LD_INT 0
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 0
64914: PUSH
64915: LD_INT 1
64917: NEG
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 1
64925: PUSH
64926: LD_INT 0
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 1
64935: PUSH
64936: LD_INT 1
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 0
64945: PUSH
64946: LD_INT 1
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 1
64955: NEG
64956: PUSH
64957: LD_INT 0
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 1
64966: NEG
64967: PUSH
64968: LD_INT 1
64970: NEG
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: LD_INT 1
64981: NEG
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 2
64989: PUSH
64990: LD_INT 0
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 2
64999: PUSH
65000: LD_INT 1
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 2
65009: PUSH
65010: LD_INT 2
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 1
65019: PUSH
65020: LD_INT 2
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65041: LD_ADDR_VAR 0 50
65045: PUSH
65046: LD_INT 0
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 0
65058: PUSH
65059: LD_INT 1
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 1
65069: PUSH
65070: LD_INT 0
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 1
65079: PUSH
65080: LD_INT 1
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 0
65089: PUSH
65090: LD_INT 1
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 1
65099: NEG
65100: PUSH
65101: LD_INT 0
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 1
65110: NEG
65111: PUSH
65112: LD_INT 1
65114: NEG
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 2
65122: PUSH
65123: LD_INT 1
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 2
65132: PUSH
65133: LD_INT 2
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 1
65142: PUSH
65143: LD_INT 2
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 0
65152: PUSH
65153: LD_INT 2
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 1
65162: NEG
65163: PUSH
65164: LD_INT 1
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65185: LD_ADDR_VAR 0 51
65189: PUSH
65190: LD_INT 0
65192: PUSH
65193: LD_INT 0
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 0
65202: PUSH
65203: LD_INT 1
65205: NEG
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 1
65213: PUSH
65214: LD_INT 0
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 1
65223: PUSH
65224: LD_INT 1
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 0
65233: PUSH
65234: LD_INT 1
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 1
65243: NEG
65244: PUSH
65245: LD_INT 0
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 1
65254: NEG
65255: PUSH
65256: LD_INT 1
65258: NEG
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 1
65266: PUSH
65267: LD_INT 2
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 0
65276: PUSH
65277: LD_INT 2
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 1
65286: NEG
65287: PUSH
65288: LD_INT 1
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 2
65297: NEG
65298: PUSH
65299: LD_INT 0
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 2
65308: NEG
65309: PUSH
65310: LD_INT 1
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65332: LD_ADDR_VAR 0 52
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: LD_INT 0
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 0
65349: PUSH
65350: LD_INT 1
65352: NEG
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 1
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 1
65370: PUSH
65371: LD_INT 1
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 0
65380: PUSH
65381: LD_INT 1
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 1
65390: NEG
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 1
65401: NEG
65402: PUSH
65403: LD_INT 1
65405: NEG
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 1
65413: NEG
65414: PUSH
65415: LD_INT 2
65417: NEG
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 1
65425: NEG
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 2
65436: NEG
65437: PUSH
65438: LD_INT 0
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 2
65447: NEG
65448: PUSH
65449: LD_INT 1
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 2
65459: NEG
65460: PUSH
65461: LD_INT 2
65463: NEG
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65483: LD_ADDR_VAR 0 53
65487: PUSH
65488: LD_INT 0
65490: PUSH
65491: LD_INT 0
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 0
65500: PUSH
65501: LD_INT 1
65503: NEG
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 1
65511: PUSH
65512: LD_INT 0
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 1
65521: PUSH
65522: LD_INT 1
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 0
65531: PUSH
65532: LD_INT 1
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 1
65541: NEG
65542: PUSH
65543: LD_INT 0
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 1
65552: NEG
65553: PUSH
65554: LD_INT 1
65556: NEG
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 1
65564: NEG
65565: PUSH
65566: LD_INT 2
65568: NEG
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 0
65576: PUSH
65577: LD_INT 2
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 1
65587: PUSH
65588: LD_INT 1
65590: NEG
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 2
65598: PUSH
65599: LD_INT 0
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 2
65608: PUSH
65609: LD_INT 1
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 2
65618: PUSH
65619: LD_INT 2
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 1
65628: PUSH
65629: LD_INT 2
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 0
65638: PUSH
65639: LD_INT 2
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: PUSH
65650: LD_INT 1
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 2
65659: NEG
65660: PUSH
65661: LD_INT 0
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 2
65670: NEG
65671: PUSH
65672: LD_INT 1
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 2
65682: NEG
65683: PUSH
65684: LD_INT 2
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65713: LD_ADDR_VAR 0 54
65717: PUSH
65718: LD_INT 0
65720: PUSH
65721: LD_INT 0
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 0
65730: PUSH
65731: LD_INT 1
65733: NEG
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 1
65741: PUSH
65742: LD_INT 0
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 1
65751: PUSH
65752: LD_INT 1
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 0
65761: PUSH
65762: LD_INT 1
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 1
65771: NEG
65772: PUSH
65773: LD_INT 0
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 1
65782: NEG
65783: PUSH
65784: LD_INT 1
65786: NEG
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 1
65794: NEG
65795: PUSH
65796: LD_INT 2
65798: NEG
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 0
65806: PUSH
65807: LD_INT 2
65809: NEG
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 1
65817: PUSH
65818: LD_INT 1
65820: NEG
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 2
65828: PUSH
65829: LD_INT 0
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 2
65838: PUSH
65839: LD_INT 1
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 2
65848: PUSH
65849: LD_INT 2
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 1
65858: PUSH
65859: LD_INT 2
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: LD_INT 2
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 1
65878: NEG
65879: PUSH
65880: LD_INT 1
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 2
65889: NEG
65890: PUSH
65891: LD_INT 0
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 2
65900: NEG
65901: PUSH
65902: LD_INT 1
65904: NEG
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 2
65912: NEG
65913: PUSH
65914: LD_INT 2
65916: NEG
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65943: LD_ADDR_VAR 0 55
65947: PUSH
65948: LD_INT 0
65950: PUSH
65951: LD_INT 0
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 0
65960: PUSH
65961: LD_INT 1
65963: NEG
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 1
65971: PUSH
65972: LD_INT 0
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 1
65981: PUSH
65982: LD_INT 1
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 0
65991: PUSH
65992: LD_INT 1
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 1
66001: NEG
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 1
66012: NEG
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 1
66024: NEG
66025: PUSH
66026: LD_INT 2
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 0
66036: PUSH
66037: LD_INT 2
66039: NEG
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 1
66047: PUSH
66048: LD_INT 1
66050: NEG
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 2
66058: PUSH
66059: LD_INT 0
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 2
66068: PUSH
66069: LD_INT 1
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 2
66078: PUSH
66079: LD_INT 2
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 1
66088: PUSH
66089: LD_INT 2
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 0
66098: PUSH
66099: LD_INT 2
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 1
66108: NEG
66109: PUSH
66110: LD_INT 1
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 2
66119: NEG
66120: PUSH
66121: LD_INT 0
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 2
66130: NEG
66131: PUSH
66132: LD_INT 1
66134: NEG
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 2
66142: NEG
66143: PUSH
66144: LD_INT 2
66146: NEG
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66173: LD_ADDR_VAR 0 56
66177: PUSH
66178: LD_INT 0
66180: PUSH
66181: LD_INT 0
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: LD_INT 1
66193: NEG
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 1
66201: PUSH
66202: LD_INT 0
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 1
66211: PUSH
66212: LD_INT 1
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 0
66221: PUSH
66222: LD_INT 1
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 1
66231: NEG
66232: PUSH
66233: LD_INT 0
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 1
66242: NEG
66243: PUSH
66244: LD_INT 1
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 1
66254: NEG
66255: PUSH
66256: LD_INT 2
66258: NEG
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 0
66266: PUSH
66267: LD_INT 2
66269: NEG
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 1
66277: PUSH
66278: LD_INT 1
66280: NEG
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 2
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 2
66298: PUSH
66299: LD_INT 1
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 2
66308: PUSH
66309: LD_INT 2
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 1
66318: PUSH
66319: LD_INT 2
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 0
66328: PUSH
66329: LD_INT 2
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 1
66338: NEG
66339: PUSH
66340: LD_INT 1
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 2
66349: NEG
66350: PUSH
66351: LD_INT 0
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 2
66360: NEG
66361: PUSH
66362: LD_INT 1
66364: NEG
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 2
66372: NEG
66373: PUSH
66374: LD_INT 2
66376: NEG
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66403: LD_ADDR_VAR 0 57
66407: PUSH
66408: LD_INT 0
66410: PUSH
66411: LD_INT 0
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 0
66420: PUSH
66421: LD_INT 1
66423: NEG
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 1
66431: PUSH
66432: LD_INT 0
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 1
66441: PUSH
66442: LD_INT 1
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 0
66451: PUSH
66452: LD_INT 1
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 1
66461: NEG
66462: PUSH
66463: LD_INT 0
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 1
66472: NEG
66473: PUSH
66474: LD_INT 1
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 1
66484: NEG
66485: PUSH
66486: LD_INT 2
66488: NEG
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 0
66496: PUSH
66497: LD_INT 2
66499: NEG
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 1
66507: PUSH
66508: LD_INT 1
66510: NEG
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 2
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 2
66528: PUSH
66529: LD_INT 1
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 2
66538: PUSH
66539: LD_INT 2
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 1
66548: PUSH
66549: LD_INT 2
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 0
66558: PUSH
66559: LD_INT 2
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 1
66568: NEG
66569: PUSH
66570: LD_INT 1
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 2
66579: NEG
66580: PUSH
66581: LD_INT 0
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 2
66590: NEG
66591: PUSH
66592: LD_INT 1
66594: NEG
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 2
66602: NEG
66603: PUSH
66604: LD_INT 2
66606: NEG
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66633: LD_ADDR_VAR 0 58
66637: PUSH
66638: LD_INT 0
66640: PUSH
66641: LD_INT 0
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 0
66650: PUSH
66651: LD_INT 1
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 1
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 1
66671: PUSH
66672: LD_INT 1
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 0
66681: PUSH
66682: LD_INT 1
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 1
66691: NEG
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 1
66702: NEG
66703: PUSH
66704: LD_INT 1
66706: NEG
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 1
66714: NEG
66715: PUSH
66716: LD_INT 2
66718: NEG
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: LD_INT 2
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 1
66737: PUSH
66738: LD_INT 1
66740: NEG
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 2
66748: PUSH
66749: LD_INT 0
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 2
66758: PUSH
66759: LD_INT 1
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 2
66768: PUSH
66769: LD_INT 2
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 1
66778: PUSH
66779: LD_INT 2
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 0
66788: PUSH
66789: LD_INT 2
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 1
66798: NEG
66799: PUSH
66800: LD_INT 1
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 2
66809: NEG
66810: PUSH
66811: LD_INT 0
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 2
66820: NEG
66821: PUSH
66822: LD_INT 1
66824: NEG
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 2
66832: NEG
66833: PUSH
66834: LD_INT 2
66836: NEG
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66863: LD_ADDR_VAR 0 59
66867: PUSH
66868: LD_INT 0
66870: PUSH
66871: LD_INT 0
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 0
66880: PUSH
66881: LD_INT 1
66883: NEG
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 1
66891: PUSH
66892: LD_INT 0
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 1
66901: PUSH
66902: LD_INT 1
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 0
66911: PUSH
66912: LD_INT 1
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 1
66921: NEG
66922: PUSH
66923: LD_INT 0
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 1
66932: NEG
66933: PUSH
66934: LD_INT 1
66936: NEG
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66951: LD_ADDR_VAR 0 60
66955: PUSH
66956: LD_INT 0
66958: PUSH
66959: LD_INT 0
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 0
66968: PUSH
66969: LD_INT 1
66971: NEG
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 1
66979: PUSH
66980: LD_INT 0
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 1
66989: PUSH
66990: LD_INT 1
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 0
66999: PUSH
67000: LD_INT 1
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 1
67009: NEG
67010: PUSH
67011: LD_INT 0
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 1
67020: NEG
67021: PUSH
67022: LD_INT 1
67024: NEG
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67039: LD_ADDR_VAR 0 61
67043: PUSH
67044: LD_INT 0
67046: PUSH
67047: LD_INT 0
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 0
67056: PUSH
67057: LD_INT 1
67059: NEG
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 1
67067: PUSH
67068: LD_INT 0
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 1
67077: PUSH
67078: LD_INT 1
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 0
67087: PUSH
67088: LD_INT 1
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 1
67097: NEG
67098: PUSH
67099: LD_INT 0
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 1
67108: NEG
67109: PUSH
67110: LD_INT 1
67112: NEG
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67127: LD_ADDR_VAR 0 62
67131: PUSH
67132: LD_INT 0
67134: PUSH
67135: LD_INT 0
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 0
67144: PUSH
67145: LD_INT 1
67147: NEG
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 1
67155: PUSH
67156: LD_INT 0
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 1
67165: PUSH
67166: LD_INT 1
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 0
67175: PUSH
67176: LD_INT 1
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 1
67185: NEG
67186: PUSH
67187: LD_INT 0
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 1
67196: NEG
67197: PUSH
67198: LD_INT 1
67200: NEG
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67215: LD_ADDR_VAR 0 63
67219: PUSH
67220: LD_INT 0
67222: PUSH
67223: LD_INT 0
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 0
67232: PUSH
67233: LD_INT 1
67235: NEG
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 1
67243: PUSH
67244: LD_INT 0
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 1
67253: PUSH
67254: LD_INT 1
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 0
67263: PUSH
67264: LD_INT 1
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 1
67273: NEG
67274: PUSH
67275: LD_INT 0
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 1
67284: NEG
67285: PUSH
67286: LD_INT 1
67288: NEG
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67303: LD_ADDR_VAR 0 64
67307: PUSH
67308: LD_INT 0
67310: PUSH
67311: LD_INT 0
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 0
67320: PUSH
67321: LD_INT 1
67323: NEG
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 1
67331: PUSH
67332: LD_INT 0
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 1
67341: PUSH
67342: LD_INT 1
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 0
67351: PUSH
67352: LD_INT 1
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 1
67361: NEG
67362: PUSH
67363: LD_INT 0
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 1
67372: NEG
67373: PUSH
67374: LD_INT 1
67376: NEG
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: ST_TO_ADDR
// end ; 1 :
67391: GO 73288
67393: LD_INT 1
67395: DOUBLE
67396: EQUAL
67397: IFTRUE 67401
67399: GO 70024
67401: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67402: LD_ADDR_VAR 0 11
67406: PUSH
67407: LD_INT 1
67409: NEG
67410: PUSH
67411: LD_INT 3
67413: NEG
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 0
67421: PUSH
67422: LD_INT 3
67424: NEG
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 1
67432: PUSH
67433: LD_INT 2
67435: NEG
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: LIST
67445: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67446: LD_ADDR_VAR 0 12
67450: PUSH
67451: LD_INT 2
67453: PUSH
67454: LD_INT 1
67456: NEG
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 3
67464: PUSH
67465: LD_INT 0
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 3
67474: PUSH
67475: LD_INT 1
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: LIST
67486: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67487: LD_ADDR_VAR 0 13
67491: PUSH
67492: LD_INT 3
67494: PUSH
67495: LD_INT 2
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 3
67504: PUSH
67505: LD_INT 3
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 2
67514: PUSH
67515: LD_INT 3
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: LIST
67526: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67527: LD_ADDR_VAR 0 14
67531: PUSH
67532: LD_INT 1
67534: PUSH
67535: LD_INT 3
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 0
67544: PUSH
67545: LD_INT 3
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 1
67554: NEG
67555: PUSH
67556: LD_INT 2
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: LIST
67567: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67568: LD_ADDR_VAR 0 15
67572: PUSH
67573: LD_INT 2
67575: NEG
67576: PUSH
67577: LD_INT 1
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 3
67586: NEG
67587: PUSH
67588: LD_INT 0
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 3
67597: NEG
67598: PUSH
67599: LD_INT 1
67601: NEG
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: LIST
67611: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67612: LD_ADDR_VAR 0 16
67616: PUSH
67617: LD_INT 2
67619: NEG
67620: PUSH
67621: LD_INT 3
67623: NEG
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 3
67631: NEG
67632: PUSH
67633: LD_INT 2
67635: NEG
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 3
67643: NEG
67644: PUSH
67645: LD_INT 3
67647: NEG
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: LIST
67657: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67658: LD_ADDR_VAR 0 17
67662: PUSH
67663: LD_INT 1
67665: NEG
67666: PUSH
67667: LD_INT 3
67669: NEG
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 0
67677: PUSH
67678: LD_INT 3
67680: NEG
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 1
67688: PUSH
67689: LD_INT 2
67691: NEG
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: LIST
67701: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67702: LD_ADDR_VAR 0 18
67706: PUSH
67707: LD_INT 2
67709: PUSH
67710: LD_INT 1
67712: NEG
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 3
67720: PUSH
67721: LD_INT 0
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 3
67730: PUSH
67731: LD_INT 1
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: LIST
67742: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67743: LD_ADDR_VAR 0 19
67747: PUSH
67748: LD_INT 3
67750: PUSH
67751: LD_INT 2
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 3
67760: PUSH
67761: LD_INT 3
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 2
67770: PUSH
67771: LD_INT 3
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: LIST
67782: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67783: LD_ADDR_VAR 0 20
67787: PUSH
67788: LD_INT 1
67790: PUSH
67791: LD_INT 3
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 0
67800: PUSH
67801: LD_INT 3
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 1
67810: NEG
67811: PUSH
67812: LD_INT 2
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: LIST
67823: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67824: LD_ADDR_VAR 0 21
67828: PUSH
67829: LD_INT 2
67831: NEG
67832: PUSH
67833: LD_INT 1
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 3
67842: NEG
67843: PUSH
67844: LD_INT 0
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 3
67853: NEG
67854: PUSH
67855: LD_INT 1
67857: NEG
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: LIST
67867: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67868: LD_ADDR_VAR 0 22
67872: PUSH
67873: LD_INT 2
67875: NEG
67876: PUSH
67877: LD_INT 3
67879: NEG
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 3
67887: NEG
67888: PUSH
67889: LD_INT 2
67891: NEG
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 3
67899: NEG
67900: PUSH
67901: LD_INT 3
67903: NEG
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: LIST
67913: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67914: LD_ADDR_VAR 0 23
67918: PUSH
67919: LD_INT 0
67921: PUSH
67922: LD_INT 3
67924: NEG
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 1
67932: NEG
67933: PUSH
67934: LD_INT 4
67936: NEG
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 1
67944: PUSH
67945: LD_INT 3
67947: NEG
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: LIST
67957: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67958: LD_ADDR_VAR 0 24
67962: PUSH
67963: LD_INT 3
67965: PUSH
67966: LD_INT 0
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 3
67975: PUSH
67976: LD_INT 1
67978: NEG
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 4
67986: PUSH
67987: LD_INT 1
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: LIST
67998: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67999: LD_ADDR_VAR 0 25
68003: PUSH
68004: LD_INT 3
68006: PUSH
68007: LD_INT 3
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 4
68016: PUSH
68017: LD_INT 3
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 3
68026: PUSH
68027: LD_INT 4
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: LIST
68038: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68039: LD_ADDR_VAR 0 26
68043: PUSH
68044: LD_INT 0
68046: PUSH
68047: LD_INT 3
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 1
68056: PUSH
68057: LD_INT 4
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 1
68066: NEG
68067: PUSH
68068: LD_INT 3
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: LIST
68079: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68080: LD_ADDR_VAR 0 27
68084: PUSH
68085: LD_INT 3
68087: NEG
68088: PUSH
68089: LD_INT 0
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 3
68098: NEG
68099: PUSH
68100: LD_INT 1
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 4
68109: NEG
68110: PUSH
68111: LD_INT 1
68113: NEG
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: LIST
68123: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68124: LD_ADDR_VAR 0 28
68128: PUSH
68129: LD_INT 3
68131: NEG
68132: PUSH
68133: LD_INT 3
68135: NEG
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 3
68143: NEG
68144: PUSH
68145: LD_INT 4
68147: NEG
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 4
68155: NEG
68156: PUSH
68157: LD_INT 3
68159: NEG
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: LIST
68169: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68170: LD_ADDR_VAR 0 29
68174: PUSH
68175: LD_INT 1
68177: NEG
68178: PUSH
68179: LD_INT 3
68181: NEG
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 0
68189: PUSH
68190: LD_INT 3
68192: NEG
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 1
68200: PUSH
68201: LD_INT 2
68203: NEG
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 1
68211: NEG
68212: PUSH
68213: LD_INT 4
68215: NEG
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 0
68223: PUSH
68224: LD_INT 4
68226: NEG
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 1
68234: PUSH
68235: LD_INT 3
68237: NEG
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 1
68245: NEG
68246: PUSH
68247: LD_INT 5
68249: NEG
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 0
68257: PUSH
68258: LD_INT 5
68260: NEG
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 1
68268: PUSH
68269: LD_INT 4
68271: NEG
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 1
68279: NEG
68280: PUSH
68281: LD_INT 6
68283: NEG
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 0
68291: PUSH
68292: LD_INT 6
68294: NEG
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 1
68302: PUSH
68303: LD_INT 5
68305: NEG
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68325: LD_ADDR_VAR 0 30
68329: PUSH
68330: LD_INT 2
68332: PUSH
68333: LD_INT 1
68335: NEG
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 3
68343: PUSH
68344: LD_INT 0
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 3
68353: PUSH
68354: LD_INT 1
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 3
68363: PUSH
68364: LD_INT 1
68366: NEG
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 4
68374: PUSH
68375: LD_INT 0
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 4
68384: PUSH
68385: LD_INT 1
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 4
68394: PUSH
68395: LD_INT 1
68397: NEG
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 5
68405: PUSH
68406: LD_INT 0
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 5
68415: PUSH
68416: LD_INT 1
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 5
68425: PUSH
68426: LD_INT 1
68428: NEG
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 6
68436: PUSH
68437: LD_INT 0
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 6
68446: PUSH
68447: LD_INT 1
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68468: LD_ADDR_VAR 0 31
68472: PUSH
68473: LD_INT 3
68475: PUSH
68476: LD_INT 2
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 3
68485: PUSH
68486: LD_INT 3
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: LD_INT 2
68495: PUSH
68496: LD_INT 3
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 4
68505: PUSH
68506: LD_INT 3
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 4
68515: PUSH
68516: LD_INT 4
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 3
68525: PUSH
68526: LD_INT 4
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 5
68535: PUSH
68536: LD_INT 4
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: LD_INT 5
68545: PUSH
68546: LD_INT 5
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: LD_INT 4
68555: PUSH
68556: LD_INT 5
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 6
68565: PUSH
68566: LD_INT 5
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 6
68575: PUSH
68576: LD_INT 6
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 5
68585: PUSH
68586: LD_INT 6
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68607: LD_ADDR_VAR 0 32
68611: PUSH
68612: LD_INT 1
68614: PUSH
68615: LD_INT 3
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: LD_INT 0
68624: PUSH
68625: LD_INT 3
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 1
68634: NEG
68635: PUSH
68636: LD_INT 2
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 1
68645: PUSH
68646: LD_INT 4
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 0
68655: PUSH
68656: LD_INT 4
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 1
68665: NEG
68666: PUSH
68667: LD_INT 3
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 1
68676: PUSH
68677: LD_INT 5
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 0
68686: PUSH
68687: LD_INT 5
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 1
68696: NEG
68697: PUSH
68698: LD_INT 4
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 1
68707: PUSH
68708: LD_INT 6
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 0
68717: PUSH
68718: LD_INT 6
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 1
68727: NEG
68728: PUSH
68729: LD_INT 5
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68750: LD_ADDR_VAR 0 33
68754: PUSH
68755: LD_INT 2
68757: NEG
68758: PUSH
68759: LD_INT 1
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 3
68768: NEG
68769: PUSH
68770: LD_INT 0
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 3
68779: NEG
68780: PUSH
68781: LD_INT 1
68783: NEG
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 3
68791: NEG
68792: PUSH
68793: LD_INT 1
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 4
68802: NEG
68803: PUSH
68804: LD_INT 0
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 4
68813: NEG
68814: PUSH
68815: LD_INT 1
68817: NEG
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: LD_INT 4
68825: NEG
68826: PUSH
68827: LD_INT 1
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 5
68836: NEG
68837: PUSH
68838: LD_INT 0
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 5
68847: NEG
68848: PUSH
68849: LD_INT 1
68851: NEG
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 5
68859: NEG
68860: PUSH
68861: LD_INT 1
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 6
68870: NEG
68871: PUSH
68872: LD_INT 0
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 6
68881: NEG
68882: PUSH
68883: LD_INT 1
68885: NEG
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68905: LD_ADDR_VAR 0 34
68909: PUSH
68910: LD_INT 2
68912: NEG
68913: PUSH
68914: LD_INT 3
68916: NEG
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 3
68924: NEG
68925: PUSH
68926: LD_INT 2
68928: NEG
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 3
68936: NEG
68937: PUSH
68938: LD_INT 3
68940: NEG
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 3
68948: NEG
68949: PUSH
68950: LD_INT 4
68952: NEG
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 4
68960: NEG
68961: PUSH
68962: LD_INT 3
68964: NEG
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 4
68972: NEG
68973: PUSH
68974: LD_INT 4
68976: NEG
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 4
68984: NEG
68985: PUSH
68986: LD_INT 5
68988: NEG
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 5
68996: NEG
68997: PUSH
68998: LD_INT 4
69000: NEG
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 5
69008: NEG
69009: PUSH
69010: LD_INT 5
69012: NEG
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 5
69020: NEG
69021: PUSH
69022: LD_INT 6
69024: NEG
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 6
69032: NEG
69033: PUSH
69034: LD_INT 5
69036: NEG
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 6
69044: NEG
69045: PUSH
69046: LD_INT 6
69048: NEG
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69068: LD_ADDR_VAR 0 41
69072: PUSH
69073: LD_INT 0
69075: PUSH
69076: LD_INT 2
69078: NEG
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 1
69086: NEG
69087: PUSH
69088: LD_INT 3
69090: NEG
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 1
69098: PUSH
69099: LD_INT 2
69101: NEG
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: LIST
69111: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69112: LD_ADDR_VAR 0 42
69116: PUSH
69117: LD_INT 2
69119: PUSH
69120: LD_INT 0
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 2
69129: PUSH
69130: LD_INT 1
69132: NEG
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 3
69140: PUSH
69141: LD_INT 1
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: LIST
69152: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69153: LD_ADDR_VAR 0 43
69157: PUSH
69158: LD_INT 2
69160: PUSH
69161: LD_INT 2
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 3
69170: PUSH
69171: LD_INT 2
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 2
69180: PUSH
69181: LD_INT 3
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: LIST
69192: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69193: LD_ADDR_VAR 0 44
69197: PUSH
69198: LD_INT 0
69200: PUSH
69201: LD_INT 2
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 1
69210: PUSH
69211: LD_INT 3
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 1
69220: NEG
69221: PUSH
69222: LD_INT 2
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: LIST
69233: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69234: LD_ADDR_VAR 0 45
69238: PUSH
69239: LD_INT 2
69241: NEG
69242: PUSH
69243: LD_INT 0
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 2
69252: NEG
69253: PUSH
69254: LD_INT 1
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 3
69263: NEG
69264: PUSH
69265: LD_INT 1
69267: NEG
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: LIST
69277: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69278: LD_ADDR_VAR 0 46
69282: PUSH
69283: LD_INT 2
69285: NEG
69286: PUSH
69287: LD_INT 2
69289: NEG
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 2
69297: NEG
69298: PUSH
69299: LD_INT 3
69301: NEG
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 3
69309: NEG
69310: PUSH
69311: LD_INT 2
69313: NEG
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: LIST
69323: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69324: LD_ADDR_VAR 0 47
69328: PUSH
69329: LD_INT 2
69331: NEG
69332: PUSH
69333: LD_INT 3
69335: NEG
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 1
69343: NEG
69344: PUSH
69345: LD_INT 3
69347: NEG
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69357: LD_ADDR_VAR 0 48
69361: PUSH
69362: LD_INT 1
69364: PUSH
69365: LD_INT 2
69367: NEG
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 2
69375: PUSH
69376: LD_INT 1
69378: NEG
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69388: LD_ADDR_VAR 0 49
69392: PUSH
69393: LD_INT 3
69395: PUSH
69396: LD_INT 1
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 3
69405: PUSH
69406: LD_INT 2
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69417: LD_ADDR_VAR 0 50
69421: PUSH
69422: LD_INT 2
69424: PUSH
69425: LD_INT 3
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: LD_INT 1
69434: PUSH
69435: LD_INT 3
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69446: LD_ADDR_VAR 0 51
69450: PUSH
69451: LD_INT 1
69453: NEG
69454: PUSH
69455: LD_INT 2
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 2
69464: NEG
69465: PUSH
69466: LD_INT 1
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69477: LD_ADDR_VAR 0 52
69481: PUSH
69482: LD_INT 3
69484: NEG
69485: PUSH
69486: LD_INT 1
69488: NEG
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 3
69496: NEG
69497: PUSH
69498: LD_INT 2
69500: NEG
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69510: LD_ADDR_VAR 0 53
69514: PUSH
69515: LD_INT 1
69517: NEG
69518: PUSH
69519: LD_INT 3
69521: NEG
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 0
69529: PUSH
69530: LD_INT 3
69532: NEG
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 1
69540: PUSH
69541: LD_INT 2
69543: NEG
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: LIST
69553: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69554: LD_ADDR_VAR 0 54
69558: PUSH
69559: LD_INT 2
69561: PUSH
69562: LD_INT 1
69564: NEG
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 3
69572: PUSH
69573: LD_INT 0
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 3
69582: PUSH
69583: LD_INT 1
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: LIST
69594: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69595: LD_ADDR_VAR 0 55
69599: PUSH
69600: LD_INT 3
69602: PUSH
69603: LD_INT 2
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 3
69612: PUSH
69613: LD_INT 3
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 2
69622: PUSH
69623: LD_INT 3
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: LIST
69634: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69635: LD_ADDR_VAR 0 56
69639: PUSH
69640: LD_INT 1
69642: PUSH
69643: LD_INT 3
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 0
69652: PUSH
69653: LD_INT 3
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: LD_INT 1
69662: NEG
69663: PUSH
69664: LD_INT 2
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: LIST
69675: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69676: LD_ADDR_VAR 0 57
69680: PUSH
69681: LD_INT 2
69683: NEG
69684: PUSH
69685: LD_INT 1
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 3
69694: NEG
69695: PUSH
69696: LD_INT 0
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_INT 3
69705: NEG
69706: PUSH
69707: LD_INT 1
69709: NEG
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: LIST
69719: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69720: LD_ADDR_VAR 0 58
69724: PUSH
69725: LD_INT 2
69727: NEG
69728: PUSH
69729: LD_INT 3
69731: NEG
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 3
69739: NEG
69740: PUSH
69741: LD_INT 2
69743: NEG
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 3
69751: NEG
69752: PUSH
69753: LD_INT 3
69755: NEG
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: LIST
69765: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69766: LD_ADDR_VAR 0 59
69770: PUSH
69771: LD_INT 1
69773: NEG
69774: PUSH
69775: LD_INT 2
69777: NEG
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 0
69785: PUSH
69786: LD_INT 2
69788: NEG
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 1
69796: PUSH
69797: LD_INT 1
69799: NEG
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: LIST
69809: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69810: LD_ADDR_VAR 0 60
69814: PUSH
69815: LD_INT 1
69817: PUSH
69818: LD_INT 1
69820: NEG
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 2
69828: PUSH
69829: LD_INT 0
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 2
69838: PUSH
69839: LD_INT 1
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: LIST
69850: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69851: LD_ADDR_VAR 0 61
69855: PUSH
69856: LD_INT 2
69858: PUSH
69859: LD_INT 1
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 2
69868: PUSH
69869: LD_INT 2
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 1
69878: PUSH
69879: LD_INT 2
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: LIST
69890: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69891: LD_ADDR_VAR 0 62
69895: PUSH
69896: LD_INT 1
69898: PUSH
69899: LD_INT 2
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 0
69908: PUSH
69909: LD_INT 2
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 1
69918: NEG
69919: PUSH
69920: LD_INT 1
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: LIST
69931: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69932: LD_ADDR_VAR 0 63
69936: PUSH
69937: LD_INT 1
69939: NEG
69940: PUSH
69941: LD_INT 1
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: LD_INT 2
69950: NEG
69951: PUSH
69952: LD_INT 0
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 2
69961: NEG
69962: PUSH
69963: LD_INT 1
69965: NEG
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: LIST
69975: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69976: LD_ADDR_VAR 0 64
69980: PUSH
69981: LD_INT 1
69983: NEG
69984: PUSH
69985: LD_INT 2
69987: NEG
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 2
69995: NEG
69996: PUSH
69997: LD_INT 1
69999: NEG
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 2
70007: NEG
70008: PUSH
70009: LD_INT 2
70011: NEG
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: LIST
70021: ST_TO_ADDR
// end ; 2 :
70022: GO 73288
70024: LD_INT 2
70026: DOUBLE
70027: EQUAL
70028: IFTRUE 70032
70030: GO 73287
70032: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70033: LD_ADDR_VAR 0 29
70037: PUSH
70038: LD_INT 4
70040: PUSH
70041: LD_INT 0
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 4
70050: PUSH
70051: LD_INT 1
70053: NEG
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 5
70061: PUSH
70062: LD_INT 0
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 5
70071: PUSH
70072: LD_INT 1
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 4
70081: PUSH
70082: LD_INT 1
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 3
70091: PUSH
70092: LD_INT 0
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 3
70101: PUSH
70102: LD_INT 1
70104: NEG
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 3
70112: PUSH
70113: LD_INT 2
70115: NEG
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 5
70123: PUSH
70124: LD_INT 2
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 3
70133: PUSH
70134: LD_INT 3
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 3
70143: PUSH
70144: LD_INT 2
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 4
70153: PUSH
70154: LD_INT 3
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 4
70163: PUSH
70164: LD_INT 4
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 3
70173: PUSH
70174: LD_INT 4
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 2
70183: PUSH
70184: LD_INT 3
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 2
70193: PUSH
70194: LD_INT 2
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 4
70203: PUSH
70204: LD_INT 2
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 2
70213: PUSH
70214: LD_INT 4
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 0
70223: PUSH
70224: LD_INT 4
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 0
70233: PUSH
70234: LD_INT 3
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 1
70243: PUSH
70244: LD_INT 4
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 1
70253: PUSH
70254: LD_INT 5
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 0
70263: PUSH
70264: LD_INT 5
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: LD_INT 1
70273: NEG
70274: PUSH
70275: LD_INT 4
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 1
70284: NEG
70285: PUSH
70286: LD_INT 3
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 2
70295: PUSH
70296: LD_INT 5
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 2
70305: NEG
70306: PUSH
70307: LD_INT 3
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 3
70316: NEG
70317: PUSH
70318: LD_INT 0
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: LD_INT 3
70327: NEG
70328: PUSH
70329: LD_INT 1
70331: NEG
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: LD_INT 2
70339: NEG
70340: PUSH
70341: LD_INT 0
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 2
70350: NEG
70351: PUSH
70352: LD_INT 1
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 3
70361: NEG
70362: PUSH
70363: LD_INT 1
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 4
70372: NEG
70373: PUSH
70374: LD_INT 0
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 4
70383: NEG
70384: PUSH
70385: LD_INT 1
70387: NEG
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 4
70395: NEG
70396: PUSH
70397: LD_INT 2
70399: NEG
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PUSH
70405: LD_INT 2
70407: NEG
70408: PUSH
70409: LD_INT 2
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: PUSH
70416: LD_INT 4
70418: NEG
70419: PUSH
70420: LD_INT 4
70422: NEG
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 4
70430: NEG
70431: PUSH
70432: LD_INT 5
70434: NEG
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 3
70442: NEG
70443: PUSH
70444: LD_INT 4
70446: NEG
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 3
70454: NEG
70455: PUSH
70456: LD_INT 3
70458: NEG
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 4
70466: NEG
70467: PUSH
70468: LD_INT 3
70470: NEG
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: LD_INT 5
70478: NEG
70479: PUSH
70480: LD_INT 4
70482: NEG
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 5
70490: NEG
70491: PUSH
70492: LD_INT 5
70494: NEG
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 3
70502: NEG
70503: PUSH
70504: LD_INT 5
70506: NEG
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 5
70514: NEG
70515: PUSH
70516: LD_INT 3
70518: NEG
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70571: LD_ADDR_VAR 0 30
70575: PUSH
70576: LD_INT 4
70578: PUSH
70579: LD_INT 4
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: LD_INT 4
70588: PUSH
70589: LD_INT 3
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 5
70598: PUSH
70599: LD_INT 4
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 5
70608: PUSH
70609: LD_INT 5
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: PUSH
70616: LD_INT 4
70618: PUSH
70619: LD_INT 5
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PUSH
70626: LD_INT 3
70628: PUSH
70629: LD_INT 4
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: PUSH
70636: LD_INT 3
70638: PUSH
70639: LD_INT 3
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: LD_INT 5
70648: PUSH
70649: LD_INT 3
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 3
70658: PUSH
70659: LD_INT 5
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 0
70668: PUSH
70669: LD_INT 3
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PUSH
70676: LD_INT 0
70678: PUSH
70679: LD_INT 2
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 1
70688: PUSH
70689: LD_INT 3
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 1
70698: PUSH
70699: LD_INT 4
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: LD_INT 0
70708: PUSH
70709: LD_INT 4
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: PUSH
70716: LD_INT 1
70718: NEG
70719: PUSH
70720: LD_INT 3
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 1
70729: NEG
70730: PUSH
70731: LD_INT 2
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 2
70740: PUSH
70741: LD_INT 4
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PUSH
70748: LD_INT 2
70750: NEG
70751: PUSH
70752: LD_INT 2
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: LD_INT 4
70761: NEG
70762: PUSH
70763: LD_INT 0
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: PUSH
70770: LD_INT 4
70772: NEG
70773: PUSH
70774: LD_INT 1
70776: NEG
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 3
70784: NEG
70785: PUSH
70786: LD_INT 0
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: LD_INT 3
70795: NEG
70796: PUSH
70797: LD_INT 1
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: LD_INT 4
70806: NEG
70807: PUSH
70808: LD_INT 1
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: LD_INT 5
70817: NEG
70818: PUSH
70819: LD_INT 0
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PUSH
70826: LD_INT 5
70828: NEG
70829: PUSH
70830: LD_INT 1
70832: NEG
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: LD_INT 5
70840: NEG
70841: PUSH
70842: LD_INT 2
70844: NEG
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 3
70852: NEG
70853: PUSH
70854: LD_INT 2
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 3
70863: NEG
70864: PUSH
70865: LD_INT 3
70867: NEG
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 3
70875: NEG
70876: PUSH
70877: LD_INT 4
70879: NEG
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 2
70887: NEG
70888: PUSH
70889: LD_INT 3
70891: NEG
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 2
70899: NEG
70900: PUSH
70901: LD_INT 2
70903: NEG
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 3
70911: NEG
70912: PUSH
70913: LD_INT 2
70915: NEG
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 4
70923: NEG
70924: PUSH
70925: LD_INT 3
70927: NEG
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 4
70935: NEG
70936: PUSH
70937: LD_INT 4
70939: NEG
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: PUSH
70945: LD_INT 2
70947: NEG
70948: PUSH
70949: LD_INT 4
70951: NEG
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 4
70959: NEG
70960: PUSH
70961: LD_INT 2
70963: NEG
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: PUSH
70969: LD_INT 0
70971: PUSH
70972: LD_INT 4
70974: NEG
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: PUSH
70980: LD_INT 0
70982: PUSH
70983: LD_INT 5
70985: NEG
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: LD_INT 1
70993: PUSH
70994: LD_INT 4
70996: NEG
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: PUSH
71002: LD_INT 1
71004: PUSH
71005: LD_INT 3
71007: NEG
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 0
71015: PUSH
71016: LD_INT 3
71018: NEG
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 1
71026: NEG
71027: PUSH
71028: LD_INT 4
71030: NEG
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 1
71038: NEG
71039: PUSH
71040: LD_INT 5
71042: NEG
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: LD_INT 2
71050: PUSH
71051: LD_INT 3
71053: NEG
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: PUSH
71059: LD_INT 2
71061: NEG
71062: PUSH
71063: LD_INT 5
71065: NEG
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: LIST
71095: LIST
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71118: LD_ADDR_VAR 0 31
71122: PUSH
71123: LD_INT 0
71125: PUSH
71126: LD_INT 4
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 0
71135: PUSH
71136: LD_INT 3
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: LD_INT 1
71145: PUSH
71146: LD_INT 4
71148: PUSH
71149: EMPTY
71150: LIST
71151: LIST
71152: PUSH
71153: LD_INT 1
71155: PUSH
71156: LD_INT 5
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: LD_INT 0
71165: PUSH
71166: LD_INT 5
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: PUSH
71173: LD_INT 1
71175: NEG
71176: PUSH
71177: LD_INT 4
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 1
71186: NEG
71187: PUSH
71188: LD_INT 3
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: PUSH
71195: LD_INT 2
71197: PUSH
71198: LD_INT 5
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: LD_INT 2
71207: NEG
71208: PUSH
71209: LD_INT 3
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: LD_INT 3
71218: NEG
71219: PUSH
71220: LD_INT 0
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: LD_INT 3
71229: NEG
71230: PUSH
71231: LD_INT 1
71233: NEG
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 2
71241: NEG
71242: PUSH
71243: LD_INT 0
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 2
71252: NEG
71253: PUSH
71254: LD_INT 1
71256: PUSH
71257: EMPTY
71258: LIST
71259: LIST
71260: PUSH
71261: LD_INT 3
71263: NEG
71264: PUSH
71265: LD_INT 1
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 4
71274: NEG
71275: PUSH
71276: LD_INT 0
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: LD_INT 4
71285: NEG
71286: PUSH
71287: LD_INT 1
71289: NEG
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 4
71297: NEG
71298: PUSH
71299: LD_INT 2
71301: NEG
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 2
71309: NEG
71310: PUSH
71311: LD_INT 2
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 4
71320: NEG
71321: PUSH
71322: LD_INT 4
71324: NEG
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 4
71332: NEG
71333: PUSH
71334: LD_INT 5
71336: NEG
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 3
71344: NEG
71345: PUSH
71346: LD_INT 4
71348: NEG
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: LD_INT 3
71356: NEG
71357: PUSH
71358: LD_INT 3
71360: NEG
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 4
71368: NEG
71369: PUSH
71370: LD_INT 3
71372: NEG
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 5
71380: NEG
71381: PUSH
71382: LD_INT 4
71384: NEG
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: PUSH
71390: LD_INT 5
71392: NEG
71393: PUSH
71394: LD_INT 5
71396: NEG
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: LD_INT 3
71404: NEG
71405: PUSH
71406: LD_INT 5
71408: NEG
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: PUSH
71414: LD_INT 5
71416: NEG
71417: PUSH
71418: LD_INT 3
71420: NEG
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: PUSH
71426: LD_INT 0
71428: PUSH
71429: LD_INT 3
71431: NEG
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: PUSH
71437: LD_INT 0
71439: PUSH
71440: LD_INT 4
71442: NEG
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 1
71450: PUSH
71451: LD_INT 3
71453: NEG
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: LD_INT 1
71461: PUSH
71462: LD_INT 2
71464: NEG
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 0
71472: PUSH
71473: LD_INT 2
71475: NEG
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 1
71483: NEG
71484: PUSH
71485: LD_INT 3
71487: NEG
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 1
71495: NEG
71496: PUSH
71497: LD_INT 4
71499: NEG
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 2
71507: PUSH
71508: LD_INT 2
71510: NEG
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 2
71518: NEG
71519: PUSH
71520: LD_INT 4
71522: NEG
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 4
71530: PUSH
71531: LD_INT 0
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: PUSH
71538: LD_INT 4
71540: PUSH
71541: LD_INT 1
71543: NEG
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 5
71551: PUSH
71552: LD_INT 0
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: LD_INT 5
71561: PUSH
71562: LD_INT 1
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: PUSH
71569: LD_INT 4
71571: PUSH
71572: LD_INT 1
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: PUSH
71579: LD_INT 3
71581: PUSH
71582: LD_INT 0
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: LD_INT 3
71591: PUSH
71592: LD_INT 1
71594: NEG
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: PUSH
71600: LD_INT 3
71602: PUSH
71603: LD_INT 2
71605: NEG
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 5
71613: PUSH
71614: LD_INT 2
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: LIST
71634: LIST
71635: LIST
71636: LIST
71637: LIST
71638: LIST
71639: LIST
71640: LIST
71641: LIST
71642: LIST
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71668: LD_ADDR_VAR 0 32
71672: PUSH
71673: LD_INT 4
71675: NEG
71676: PUSH
71677: LD_INT 0
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: LD_INT 4
71686: NEG
71687: PUSH
71688: LD_INT 1
71690: NEG
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 3
71698: NEG
71699: PUSH
71700: LD_INT 0
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: PUSH
71707: LD_INT 3
71709: NEG
71710: PUSH
71711: LD_INT 1
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PUSH
71718: LD_INT 4
71720: NEG
71721: PUSH
71722: LD_INT 1
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PUSH
71729: LD_INT 5
71731: NEG
71732: PUSH
71733: LD_INT 0
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 5
71742: NEG
71743: PUSH
71744: LD_INT 1
71746: NEG
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 5
71754: NEG
71755: PUSH
71756: LD_INT 2
71758: NEG
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: PUSH
71764: LD_INT 3
71766: NEG
71767: PUSH
71768: LD_INT 2
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PUSH
71775: LD_INT 3
71777: NEG
71778: PUSH
71779: LD_INT 3
71781: NEG
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 3
71789: NEG
71790: PUSH
71791: LD_INT 4
71793: NEG
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: PUSH
71799: LD_INT 2
71801: NEG
71802: PUSH
71803: LD_INT 3
71805: NEG
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: PUSH
71811: LD_INT 2
71813: NEG
71814: PUSH
71815: LD_INT 2
71817: NEG
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: PUSH
71823: LD_INT 3
71825: NEG
71826: PUSH
71827: LD_INT 2
71829: NEG
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: LD_INT 4
71837: NEG
71838: PUSH
71839: LD_INT 3
71841: NEG
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: LD_INT 4
71849: NEG
71850: PUSH
71851: LD_INT 4
71853: NEG
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: LD_INT 2
71861: NEG
71862: PUSH
71863: LD_INT 4
71865: NEG
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: PUSH
71871: LD_INT 4
71873: NEG
71874: PUSH
71875: LD_INT 2
71877: NEG
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: LD_INT 0
71885: PUSH
71886: LD_INT 4
71888: NEG
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PUSH
71894: LD_INT 0
71896: PUSH
71897: LD_INT 5
71899: NEG
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: LD_INT 1
71907: PUSH
71908: LD_INT 4
71910: NEG
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: LD_INT 1
71918: PUSH
71919: LD_INT 3
71921: NEG
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 0
71929: PUSH
71930: LD_INT 3
71932: NEG
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: PUSH
71938: LD_INT 1
71940: NEG
71941: PUSH
71942: LD_INT 4
71944: NEG
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: LD_INT 1
71952: NEG
71953: PUSH
71954: LD_INT 5
71956: NEG
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: PUSH
71962: LD_INT 2
71964: PUSH
71965: LD_INT 3
71967: NEG
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PUSH
71973: LD_INT 2
71975: NEG
71976: PUSH
71977: LD_INT 5
71979: NEG
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: PUSH
71985: LD_INT 3
71987: PUSH
71988: LD_INT 0
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: PUSH
71995: LD_INT 3
71997: PUSH
71998: LD_INT 1
72000: NEG
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: PUSH
72006: LD_INT 4
72008: PUSH
72009: LD_INT 0
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PUSH
72016: LD_INT 4
72018: PUSH
72019: LD_INT 1
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: PUSH
72026: LD_INT 3
72028: PUSH
72029: LD_INT 1
72031: PUSH
72032: EMPTY
72033: LIST
72034: LIST
72035: PUSH
72036: LD_INT 2
72038: PUSH
72039: LD_INT 0
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: PUSH
72046: LD_INT 2
72048: PUSH
72049: LD_INT 1
72051: NEG
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: PUSH
72057: LD_INT 2
72059: PUSH
72060: LD_INT 2
72062: NEG
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: PUSH
72068: LD_INT 4
72070: PUSH
72071: LD_INT 2
72073: PUSH
72074: EMPTY
72075: LIST
72076: LIST
72077: PUSH
72078: LD_INT 4
72080: PUSH
72081: LD_INT 4
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: PUSH
72088: LD_INT 4
72090: PUSH
72091: LD_INT 3
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: PUSH
72098: LD_INT 5
72100: PUSH
72101: LD_INT 4
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: PUSH
72108: LD_INT 5
72110: PUSH
72111: LD_INT 5
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: PUSH
72118: LD_INT 4
72120: PUSH
72121: LD_INT 5
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: LD_INT 3
72130: PUSH
72131: LD_INT 4
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PUSH
72138: LD_INT 3
72140: PUSH
72141: LD_INT 3
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: PUSH
72148: LD_INT 5
72150: PUSH
72151: LD_INT 3
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: PUSH
72158: LD_INT 3
72160: PUSH
72161: LD_INT 5
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: LIST
72182: LIST
72183: LIST
72184: LIST
72185: LIST
72186: LIST
72187: LIST
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: LIST
72211: LIST
72212: LIST
72213: LIST
72214: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72215: LD_ADDR_VAR 0 33
72219: PUSH
72220: LD_INT 4
72222: NEG
72223: PUSH
72224: LD_INT 4
72226: NEG
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_INT 4
72234: NEG
72235: PUSH
72236: LD_INT 5
72238: NEG
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: LD_INT 3
72246: NEG
72247: PUSH
72248: LD_INT 4
72250: NEG
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: PUSH
72256: LD_INT 3
72258: NEG
72259: PUSH
72260: LD_INT 3
72262: NEG
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: PUSH
72268: LD_INT 4
72270: NEG
72271: PUSH
72272: LD_INT 3
72274: NEG
72275: PUSH
72276: EMPTY
72277: LIST
72278: LIST
72279: PUSH
72280: LD_INT 5
72282: NEG
72283: PUSH
72284: LD_INT 4
72286: NEG
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: PUSH
72292: LD_INT 5
72294: NEG
72295: PUSH
72296: LD_INT 5
72298: NEG
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PUSH
72304: LD_INT 3
72306: NEG
72307: PUSH
72308: LD_INT 5
72310: NEG
72311: PUSH
72312: EMPTY
72313: LIST
72314: LIST
72315: PUSH
72316: LD_INT 5
72318: NEG
72319: PUSH
72320: LD_INT 3
72322: NEG
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: LD_INT 0
72330: PUSH
72331: LD_INT 3
72333: NEG
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: LD_INT 0
72341: PUSH
72342: LD_INT 4
72344: NEG
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: LD_INT 1
72352: PUSH
72353: LD_INT 3
72355: NEG
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: LD_INT 1
72363: PUSH
72364: LD_INT 2
72366: NEG
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: PUSH
72372: LD_INT 0
72374: PUSH
72375: LD_INT 2
72377: NEG
72378: PUSH
72379: EMPTY
72380: LIST
72381: LIST
72382: PUSH
72383: LD_INT 1
72385: NEG
72386: PUSH
72387: LD_INT 3
72389: NEG
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: LD_INT 1
72397: NEG
72398: PUSH
72399: LD_INT 4
72401: NEG
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: LD_INT 2
72409: PUSH
72410: LD_INT 2
72412: NEG
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PUSH
72418: LD_INT 2
72420: NEG
72421: PUSH
72422: LD_INT 4
72424: NEG
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PUSH
72430: LD_INT 4
72432: PUSH
72433: LD_INT 0
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: PUSH
72440: LD_INT 4
72442: PUSH
72443: LD_INT 1
72445: NEG
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: PUSH
72451: LD_INT 5
72453: PUSH
72454: LD_INT 0
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 5
72463: PUSH
72464: LD_INT 1
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: PUSH
72471: LD_INT 4
72473: PUSH
72474: LD_INT 1
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: PUSH
72481: LD_INT 3
72483: PUSH
72484: LD_INT 0
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PUSH
72491: LD_INT 3
72493: PUSH
72494: LD_INT 1
72496: NEG
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PUSH
72502: LD_INT 3
72504: PUSH
72505: LD_INT 2
72507: NEG
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 5
72515: PUSH
72516: LD_INT 2
72518: PUSH
72519: EMPTY
72520: LIST
72521: LIST
72522: PUSH
72523: LD_INT 3
72525: PUSH
72526: LD_INT 3
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: PUSH
72533: LD_INT 3
72535: PUSH
72536: LD_INT 2
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: PUSH
72543: LD_INT 4
72545: PUSH
72546: LD_INT 3
72548: PUSH
72549: EMPTY
72550: LIST
72551: LIST
72552: PUSH
72553: LD_INT 4
72555: PUSH
72556: LD_INT 4
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: PUSH
72563: LD_INT 3
72565: PUSH
72566: LD_INT 4
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: PUSH
72573: LD_INT 2
72575: PUSH
72576: LD_INT 3
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PUSH
72583: LD_INT 2
72585: PUSH
72586: LD_INT 2
72588: PUSH
72589: EMPTY
72590: LIST
72591: LIST
72592: PUSH
72593: LD_INT 4
72595: PUSH
72596: LD_INT 2
72598: PUSH
72599: EMPTY
72600: LIST
72601: LIST
72602: PUSH
72603: LD_INT 2
72605: PUSH
72606: LD_INT 4
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: LD_INT 0
72615: PUSH
72616: LD_INT 4
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: LD_INT 0
72625: PUSH
72626: LD_INT 3
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 1
72635: PUSH
72636: LD_INT 4
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: PUSH
72643: LD_INT 1
72645: PUSH
72646: LD_INT 5
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: PUSH
72653: LD_INT 0
72655: PUSH
72656: LD_INT 5
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: PUSH
72663: LD_INT 1
72665: NEG
72666: PUSH
72667: LD_INT 4
72669: PUSH
72670: EMPTY
72671: LIST
72672: LIST
72673: PUSH
72674: LD_INT 1
72676: NEG
72677: PUSH
72678: LD_INT 3
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: LD_INT 2
72687: PUSH
72688: LD_INT 5
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PUSH
72695: LD_INT 2
72697: NEG
72698: PUSH
72699: LD_INT 3
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: PUSH
72706: EMPTY
72707: LIST
72708: LIST
72709: LIST
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: LIST
72727: LIST
72728: LIST
72729: LIST
72730: LIST
72731: LIST
72732: LIST
72733: LIST
72734: LIST
72735: LIST
72736: LIST
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: LIST
72752: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72753: LD_ADDR_VAR 0 34
72757: PUSH
72758: LD_INT 0
72760: PUSH
72761: LD_INT 4
72763: NEG
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 0
72771: PUSH
72772: LD_INT 5
72774: NEG
72775: PUSH
72776: EMPTY
72777: LIST
72778: LIST
72779: PUSH
72780: LD_INT 1
72782: PUSH
72783: LD_INT 4
72785: NEG
72786: PUSH
72787: EMPTY
72788: LIST
72789: LIST
72790: PUSH
72791: LD_INT 1
72793: PUSH
72794: LD_INT 3
72796: NEG
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: PUSH
72802: LD_INT 0
72804: PUSH
72805: LD_INT 3
72807: NEG
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: PUSH
72813: LD_INT 1
72815: NEG
72816: PUSH
72817: LD_INT 4
72819: NEG
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: PUSH
72825: LD_INT 1
72827: NEG
72828: PUSH
72829: LD_INT 5
72831: NEG
72832: PUSH
72833: EMPTY
72834: LIST
72835: LIST
72836: PUSH
72837: LD_INT 2
72839: PUSH
72840: LD_INT 3
72842: NEG
72843: PUSH
72844: EMPTY
72845: LIST
72846: LIST
72847: PUSH
72848: LD_INT 2
72850: NEG
72851: PUSH
72852: LD_INT 5
72854: NEG
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: PUSH
72860: LD_INT 3
72862: PUSH
72863: LD_INT 0
72865: PUSH
72866: EMPTY
72867: LIST
72868: LIST
72869: PUSH
72870: LD_INT 3
72872: PUSH
72873: LD_INT 1
72875: NEG
72876: PUSH
72877: EMPTY
72878: LIST
72879: LIST
72880: PUSH
72881: LD_INT 4
72883: PUSH
72884: LD_INT 0
72886: PUSH
72887: EMPTY
72888: LIST
72889: LIST
72890: PUSH
72891: LD_INT 4
72893: PUSH
72894: LD_INT 1
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: PUSH
72901: LD_INT 3
72903: PUSH
72904: LD_INT 1
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: LD_INT 2
72913: PUSH
72914: LD_INT 0
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PUSH
72921: LD_INT 2
72923: PUSH
72924: LD_INT 1
72926: NEG
72927: PUSH
72928: EMPTY
72929: LIST
72930: LIST
72931: PUSH
72932: LD_INT 2
72934: PUSH
72935: LD_INT 2
72937: NEG
72938: PUSH
72939: EMPTY
72940: LIST
72941: LIST
72942: PUSH
72943: LD_INT 4
72945: PUSH
72946: LD_INT 2
72948: PUSH
72949: EMPTY
72950: LIST
72951: LIST
72952: PUSH
72953: LD_INT 4
72955: PUSH
72956: LD_INT 4
72958: PUSH
72959: EMPTY
72960: LIST
72961: LIST
72962: PUSH
72963: LD_INT 4
72965: PUSH
72966: LD_INT 3
72968: PUSH
72969: EMPTY
72970: LIST
72971: LIST
72972: PUSH
72973: LD_INT 5
72975: PUSH
72976: LD_INT 4
72978: PUSH
72979: EMPTY
72980: LIST
72981: LIST
72982: PUSH
72983: LD_INT 5
72985: PUSH
72986: LD_INT 5
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: PUSH
72993: LD_INT 4
72995: PUSH
72996: LD_INT 5
72998: PUSH
72999: EMPTY
73000: LIST
73001: LIST
73002: PUSH
73003: LD_INT 3
73005: PUSH
73006: LD_INT 4
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: PUSH
73013: LD_INT 3
73015: PUSH
73016: LD_INT 3
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: PUSH
73023: LD_INT 5
73025: PUSH
73026: LD_INT 3
73028: PUSH
73029: EMPTY
73030: LIST
73031: LIST
73032: PUSH
73033: LD_INT 3
73035: PUSH
73036: LD_INT 5
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: PUSH
73043: LD_INT 0
73045: PUSH
73046: LD_INT 3
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: PUSH
73053: LD_INT 0
73055: PUSH
73056: LD_INT 2
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: PUSH
73063: LD_INT 1
73065: PUSH
73066: LD_INT 3
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: PUSH
73073: LD_INT 1
73075: PUSH
73076: LD_INT 4
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: PUSH
73083: LD_INT 0
73085: PUSH
73086: LD_INT 4
73088: PUSH
73089: EMPTY
73090: LIST
73091: LIST
73092: PUSH
73093: LD_INT 1
73095: NEG
73096: PUSH
73097: LD_INT 3
73099: PUSH
73100: EMPTY
73101: LIST
73102: LIST
73103: PUSH
73104: LD_INT 1
73106: NEG
73107: PUSH
73108: LD_INT 2
73110: PUSH
73111: EMPTY
73112: LIST
73113: LIST
73114: PUSH
73115: LD_INT 2
73117: PUSH
73118: LD_INT 4
73120: PUSH
73121: EMPTY
73122: LIST
73123: LIST
73124: PUSH
73125: LD_INT 2
73127: NEG
73128: PUSH
73129: LD_INT 2
73131: PUSH
73132: EMPTY
73133: LIST
73134: LIST
73135: PUSH
73136: LD_INT 4
73138: NEG
73139: PUSH
73140: LD_INT 0
73142: PUSH
73143: EMPTY
73144: LIST
73145: LIST
73146: PUSH
73147: LD_INT 4
73149: NEG
73150: PUSH
73151: LD_INT 1
73153: NEG
73154: PUSH
73155: EMPTY
73156: LIST
73157: LIST
73158: PUSH
73159: LD_INT 3
73161: NEG
73162: PUSH
73163: LD_INT 0
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: PUSH
73170: LD_INT 3
73172: NEG
73173: PUSH
73174: LD_INT 1
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: PUSH
73181: LD_INT 4
73183: NEG
73184: PUSH
73185: LD_INT 1
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: LD_INT 5
73194: NEG
73195: PUSH
73196: LD_INT 0
73198: PUSH
73199: EMPTY
73200: LIST
73201: LIST
73202: PUSH
73203: LD_INT 5
73205: NEG
73206: PUSH
73207: LD_INT 1
73209: NEG
73210: PUSH
73211: EMPTY
73212: LIST
73213: LIST
73214: PUSH
73215: LD_INT 5
73217: NEG
73218: PUSH
73219: LD_INT 2
73221: NEG
73222: PUSH
73223: EMPTY
73224: LIST
73225: LIST
73226: PUSH
73227: LD_INT 3
73229: NEG
73230: PUSH
73231: LD_INT 2
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: PUSH
73238: EMPTY
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: LIST
73247: LIST
73248: LIST
73249: LIST
73250: LIST
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: LIST
73256: LIST
73257: LIST
73258: LIST
73259: LIST
73260: LIST
73261: LIST
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: LIST
73269: LIST
73270: LIST
73271: LIST
73272: LIST
73273: LIST
73274: LIST
73275: LIST
73276: LIST
73277: LIST
73278: LIST
73279: LIST
73280: LIST
73281: LIST
73282: LIST
73283: LIST
73284: ST_TO_ADDR
// end ; end ;
73285: GO 73288
73287: POP
// case btype of b_depot , b_warehouse :
73288: LD_VAR 0 1
73292: PUSH
73293: LD_INT 0
73295: DOUBLE
73296: EQUAL
73297: IFTRUE 73307
73299: LD_INT 1
73301: DOUBLE
73302: EQUAL
73303: IFTRUE 73307
73305: GO 73508
73307: POP
// case nation of nation_american :
73308: LD_VAR 0 5
73312: PUSH
73313: LD_INT 1
73315: DOUBLE
73316: EQUAL
73317: IFTRUE 73321
73319: GO 73377
73321: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73322: LD_ADDR_VAR 0 9
73326: PUSH
73327: LD_VAR 0 11
73331: PUSH
73332: LD_VAR 0 12
73336: PUSH
73337: LD_VAR 0 13
73341: PUSH
73342: LD_VAR 0 14
73346: PUSH
73347: LD_VAR 0 15
73351: PUSH
73352: LD_VAR 0 16
73356: PUSH
73357: EMPTY
73358: LIST
73359: LIST
73360: LIST
73361: LIST
73362: LIST
73363: LIST
73364: PUSH
73365: LD_VAR 0 4
73369: PUSH
73370: LD_INT 1
73372: PLUS
73373: ARRAY
73374: ST_TO_ADDR
73375: GO 73506
73377: LD_INT 2
73379: DOUBLE
73380: EQUAL
73381: IFTRUE 73385
73383: GO 73441
73385: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73386: LD_ADDR_VAR 0 9
73390: PUSH
73391: LD_VAR 0 17
73395: PUSH
73396: LD_VAR 0 18
73400: PUSH
73401: LD_VAR 0 19
73405: PUSH
73406: LD_VAR 0 20
73410: PUSH
73411: LD_VAR 0 21
73415: PUSH
73416: LD_VAR 0 22
73420: PUSH
73421: EMPTY
73422: LIST
73423: LIST
73424: LIST
73425: LIST
73426: LIST
73427: LIST
73428: PUSH
73429: LD_VAR 0 4
73433: PUSH
73434: LD_INT 1
73436: PLUS
73437: ARRAY
73438: ST_TO_ADDR
73439: GO 73506
73441: LD_INT 3
73443: DOUBLE
73444: EQUAL
73445: IFTRUE 73449
73447: GO 73505
73449: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73450: LD_ADDR_VAR 0 9
73454: PUSH
73455: LD_VAR 0 23
73459: PUSH
73460: LD_VAR 0 24
73464: PUSH
73465: LD_VAR 0 25
73469: PUSH
73470: LD_VAR 0 26
73474: PUSH
73475: LD_VAR 0 27
73479: PUSH
73480: LD_VAR 0 28
73484: PUSH
73485: EMPTY
73486: LIST
73487: LIST
73488: LIST
73489: LIST
73490: LIST
73491: LIST
73492: PUSH
73493: LD_VAR 0 4
73497: PUSH
73498: LD_INT 1
73500: PLUS
73501: ARRAY
73502: ST_TO_ADDR
73503: GO 73506
73505: POP
73506: GO 74061
73508: LD_INT 2
73510: DOUBLE
73511: EQUAL
73512: IFTRUE 73522
73514: LD_INT 3
73516: DOUBLE
73517: EQUAL
73518: IFTRUE 73522
73520: GO 73578
73522: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73523: LD_ADDR_VAR 0 9
73527: PUSH
73528: LD_VAR 0 29
73532: PUSH
73533: LD_VAR 0 30
73537: PUSH
73538: LD_VAR 0 31
73542: PUSH
73543: LD_VAR 0 32
73547: PUSH
73548: LD_VAR 0 33
73552: PUSH
73553: LD_VAR 0 34
73557: PUSH
73558: EMPTY
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: PUSH
73566: LD_VAR 0 4
73570: PUSH
73571: LD_INT 1
73573: PLUS
73574: ARRAY
73575: ST_TO_ADDR
73576: GO 74061
73578: LD_INT 16
73580: DOUBLE
73581: EQUAL
73582: IFTRUE 73640
73584: LD_INT 17
73586: DOUBLE
73587: EQUAL
73588: IFTRUE 73640
73590: LD_INT 18
73592: DOUBLE
73593: EQUAL
73594: IFTRUE 73640
73596: LD_INT 19
73598: DOUBLE
73599: EQUAL
73600: IFTRUE 73640
73602: LD_INT 22
73604: DOUBLE
73605: EQUAL
73606: IFTRUE 73640
73608: LD_INT 20
73610: DOUBLE
73611: EQUAL
73612: IFTRUE 73640
73614: LD_INT 21
73616: DOUBLE
73617: EQUAL
73618: IFTRUE 73640
73620: LD_INT 23
73622: DOUBLE
73623: EQUAL
73624: IFTRUE 73640
73626: LD_INT 24
73628: DOUBLE
73629: EQUAL
73630: IFTRUE 73640
73632: LD_INT 25
73634: DOUBLE
73635: EQUAL
73636: IFTRUE 73640
73638: GO 73696
73640: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73641: LD_ADDR_VAR 0 9
73645: PUSH
73646: LD_VAR 0 35
73650: PUSH
73651: LD_VAR 0 36
73655: PUSH
73656: LD_VAR 0 37
73660: PUSH
73661: LD_VAR 0 38
73665: PUSH
73666: LD_VAR 0 39
73670: PUSH
73671: LD_VAR 0 40
73675: PUSH
73676: EMPTY
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: PUSH
73684: LD_VAR 0 4
73688: PUSH
73689: LD_INT 1
73691: PLUS
73692: ARRAY
73693: ST_TO_ADDR
73694: GO 74061
73696: LD_INT 6
73698: DOUBLE
73699: EQUAL
73700: IFTRUE 73752
73702: LD_INT 7
73704: DOUBLE
73705: EQUAL
73706: IFTRUE 73752
73708: LD_INT 8
73710: DOUBLE
73711: EQUAL
73712: IFTRUE 73752
73714: LD_INT 13
73716: DOUBLE
73717: EQUAL
73718: IFTRUE 73752
73720: LD_INT 12
73722: DOUBLE
73723: EQUAL
73724: IFTRUE 73752
73726: LD_INT 15
73728: DOUBLE
73729: EQUAL
73730: IFTRUE 73752
73732: LD_INT 11
73734: DOUBLE
73735: EQUAL
73736: IFTRUE 73752
73738: LD_INT 14
73740: DOUBLE
73741: EQUAL
73742: IFTRUE 73752
73744: LD_INT 10
73746: DOUBLE
73747: EQUAL
73748: IFTRUE 73752
73750: GO 73808
73752: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73753: LD_ADDR_VAR 0 9
73757: PUSH
73758: LD_VAR 0 41
73762: PUSH
73763: LD_VAR 0 42
73767: PUSH
73768: LD_VAR 0 43
73772: PUSH
73773: LD_VAR 0 44
73777: PUSH
73778: LD_VAR 0 45
73782: PUSH
73783: LD_VAR 0 46
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: LIST
73795: PUSH
73796: LD_VAR 0 4
73800: PUSH
73801: LD_INT 1
73803: PLUS
73804: ARRAY
73805: ST_TO_ADDR
73806: GO 74061
73808: LD_INT 36
73810: DOUBLE
73811: EQUAL
73812: IFTRUE 73816
73814: GO 73872
73816: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73817: LD_ADDR_VAR 0 9
73821: PUSH
73822: LD_VAR 0 47
73826: PUSH
73827: LD_VAR 0 48
73831: PUSH
73832: LD_VAR 0 49
73836: PUSH
73837: LD_VAR 0 50
73841: PUSH
73842: LD_VAR 0 51
73846: PUSH
73847: LD_VAR 0 52
73851: PUSH
73852: EMPTY
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: PUSH
73860: LD_VAR 0 4
73864: PUSH
73865: LD_INT 1
73867: PLUS
73868: ARRAY
73869: ST_TO_ADDR
73870: GO 74061
73872: LD_INT 4
73874: DOUBLE
73875: EQUAL
73876: IFTRUE 73898
73878: LD_INT 5
73880: DOUBLE
73881: EQUAL
73882: IFTRUE 73898
73884: LD_INT 34
73886: DOUBLE
73887: EQUAL
73888: IFTRUE 73898
73890: LD_INT 37
73892: DOUBLE
73893: EQUAL
73894: IFTRUE 73898
73896: GO 73954
73898: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73899: LD_ADDR_VAR 0 9
73903: PUSH
73904: LD_VAR 0 53
73908: PUSH
73909: LD_VAR 0 54
73913: PUSH
73914: LD_VAR 0 55
73918: PUSH
73919: LD_VAR 0 56
73923: PUSH
73924: LD_VAR 0 57
73928: PUSH
73929: LD_VAR 0 58
73933: PUSH
73934: EMPTY
73935: LIST
73936: LIST
73937: LIST
73938: LIST
73939: LIST
73940: LIST
73941: PUSH
73942: LD_VAR 0 4
73946: PUSH
73947: LD_INT 1
73949: PLUS
73950: ARRAY
73951: ST_TO_ADDR
73952: GO 74061
73954: LD_INT 31
73956: DOUBLE
73957: EQUAL
73958: IFTRUE 74004
73960: LD_INT 32
73962: DOUBLE
73963: EQUAL
73964: IFTRUE 74004
73966: LD_INT 33
73968: DOUBLE
73969: EQUAL
73970: IFTRUE 74004
73972: LD_INT 27
73974: DOUBLE
73975: EQUAL
73976: IFTRUE 74004
73978: LD_INT 26
73980: DOUBLE
73981: EQUAL
73982: IFTRUE 74004
73984: LD_INT 28
73986: DOUBLE
73987: EQUAL
73988: IFTRUE 74004
73990: LD_INT 29
73992: DOUBLE
73993: EQUAL
73994: IFTRUE 74004
73996: LD_INT 30
73998: DOUBLE
73999: EQUAL
74000: IFTRUE 74004
74002: GO 74060
74004: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74005: LD_ADDR_VAR 0 9
74009: PUSH
74010: LD_VAR 0 59
74014: PUSH
74015: LD_VAR 0 60
74019: PUSH
74020: LD_VAR 0 61
74024: PUSH
74025: LD_VAR 0 62
74029: PUSH
74030: LD_VAR 0 63
74034: PUSH
74035: LD_VAR 0 64
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: LIST
74044: LIST
74045: LIST
74046: LIST
74047: PUSH
74048: LD_VAR 0 4
74052: PUSH
74053: LD_INT 1
74055: PLUS
74056: ARRAY
74057: ST_TO_ADDR
74058: GO 74061
74060: POP
// temp_list2 = [ ] ;
74061: LD_ADDR_VAR 0 10
74065: PUSH
74066: EMPTY
74067: ST_TO_ADDR
// for i in temp_list do
74068: LD_ADDR_VAR 0 8
74072: PUSH
74073: LD_VAR 0 9
74077: PUSH
74078: FOR_IN
74079: IFFALSE 74131
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74081: LD_ADDR_VAR 0 10
74085: PUSH
74086: LD_VAR 0 10
74090: PUSH
74091: LD_VAR 0 8
74095: PUSH
74096: LD_INT 1
74098: ARRAY
74099: PUSH
74100: LD_VAR 0 2
74104: PLUS
74105: PUSH
74106: LD_VAR 0 8
74110: PUSH
74111: LD_INT 2
74113: ARRAY
74114: PUSH
74115: LD_VAR 0 3
74119: PLUS
74120: PUSH
74121: EMPTY
74122: LIST
74123: LIST
74124: PUSH
74125: EMPTY
74126: LIST
74127: ADD
74128: ST_TO_ADDR
74129: GO 74078
74131: POP
74132: POP
// result = temp_list2 ;
74133: LD_ADDR_VAR 0 7
74137: PUSH
74138: LD_VAR 0 10
74142: ST_TO_ADDR
// end ;
74143: LD_VAR 0 7
74147: RET
// export function EnemyInRange ( unit , dist ) ; begin
74148: LD_INT 0
74150: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74151: LD_ADDR_VAR 0 3
74155: PUSH
74156: LD_VAR 0 1
74160: PPUSH
74161: CALL_OW 255
74165: PPUSH
74166: LD_VAR 0 1
74170: PPUSH
74171: CALL_OW 250
74175: PPUSH
74176: LD_VAR 0 1
74180: PPUSH
74181: CALL_OW 251
74185: PPUSH
74186: LD_VAR 0 2
74190: PPUSH
74191: CALL 47405 0 4
74195: PUSH
74196: LD_INT 4
74198: ARRAY
74199: ST_TO_ADDR
// end ;
74200: LD_VAR 0 3
74204: RET
// export function PlayerSeeMe ( unit ) ; begin
74205: LD_INT 0
74207: PPUSH
// result := See ( your_side , unit ) ;
74208: LD_ADDR_VAR 0 2
74212: PUSH
74213: LD_OWVAR 2
74217: PPUSH
74218: LD_VAR 0 1
74222: PPUSH
74223: CALL_OW 292
74227: ST_TO_ADDR
// end ;
74228: LD_VAR 0 2
74232: RET
// export function ReverseDir ( unit ) ; begin
74233: LD_INT 0
74235: PPUSH
// if not unit then
74236: LD_VAR 0 1
74240: NOT
74241: IFFALSE 74245
// exit ;
74243: GO 74268
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74245: LD_ADDR_VAR 0 2
74249: PUSH
74250: LD_VAR 0 1
74254: PPUSH
74255: CALL_OW 254
74259: PUSH
74260: LD_INT 3
74262: PLUS
74263: PUSH
74264: LD_INT 6
74266: MOD
74267: ST_TO_ADDR
// end ;
74268: LD_VAR 0 2
74272: RET
// export function ReverseArray ( array ) ; var i ; begin
74273: LD_INT 0
74275: PPUSH
74276: PPUSH
// if not array then
74277: LD_VAR 0 1
74281: NOT
74282: IFFALSE 74286
// exit ;
74284: GO 74341
// result := [ ] ;
74286: LD_ADDR_VAR 0 2
74290: PUSH
74291: EMPTY
74292: ST_TO_ADDR
// for i := array downto 1 do
74293: LD_ADDR_VAR 0 3
74297: PUSH
74298: DOUBLE
74299: LD_VAR 0 1
74303: INC
74304: ST_TO_ADDR
74305: LD_INT 1
74307: PUSH
74308: FOR_DOWNTO
74309: IFFALSE 74339
// result := Join ( result , array [ i ] ) ;
74311: LD_ADDR_VAR 0 2
74315: PUSH
74316: LD_VAR 0 2
74320: PPUSH
74321: LD_VAR 0 1
74325: PUSH
74326: LD_VAR 0 3
74330: ARRAY
74331: PPUSH
74332: CALL 79183 0 2
74336: ST_TO_ADDR
74337: GO 74308
74339: POP
74340: POP
// end ;
74341: LD_VAR 0 2
74345: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74346: LD_INT 0
74348: PPUSH
74349: PPUSH
74350: PPUSH
74351: PPUSH
74352: PPUSH
74353: PPUSH
// if not unit or not hexes then
74354: LD_VAR 0 1
74358: NOT
74359: IFTRUE 74368
74361: PUSH
74362: LD_VAR 0 2
74366: NOT
74367: OR
74368: IFFALSE 74372
// exit ;
74370: GO 74495
// dist := 9999 ;
74372: LD_ADDR_VAR 0 5
74376: PUSH
74377: LD_INT 9999
74379: ST_TO_ADDR
// for i = 1 to hexes do
74380: LD_ADDR_VAR 0 4
74384: PUSH
74385: DOUBLE
74386: LD_INT 1
74388: DEC
74389: ST_TO_ADDR
74390: LD_VAR 0 2
74394: PUSH
74395: FOR_TO
74396: IFFALSE 74483
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74398: LD_ADDR_VAR 0 6
74402: PUSH
74403: LD_VAR 0 1
74407: PPUSH
74408: LD_VAR 0 2
74412: PUSH
74413: LD_VAR 0 4
74417: ARRAY
74418: PUSH
74419: LD_INT 1
74421: ARRAY
74422: PPUSH
74423: LD_VAR 0 2
74427: PUSH
74428: LD_VAR 0 4
74432: ARRAY
74433: PUSH
74434: LD_INT 2
74436: ARRAY
74437: PPUSH
74438: CALL_OW 297
74442: ST_TO_ADDR
// if tdist < dist then
74443: LD_VAR 0 6
74447: PUSH
74448: LD_VAR 0 5
74452: LESS
74453: IFFALSE 74481
// begin hex := hexes [ i ] ;
74455: LD_ADDR_VAR 0 8
74459: PUSH
74460: LD_VAR 0 2
74464: PUSH
74465: LD_VAR 0 4
74469: ARRAY
74470: ST_TO_ADDR
// dist := tdist ;
74471: LD_ADDR_VAR 0 5
74475: PUSH
74476: LD_VAR 0 6
74480: ST_TO_ADDR
// end ; end ;
74481: GO 74395
74483: POP
74484: POP
// result := hex ;
74485: LD_ADDR_VAR 0 3
74489: PUSH
74490: LD_VAR 0 8
74494: ST_TO_ADDR
// end ;
74495: LD_VAR 0 3
74499: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74500: LD_INT 0
74502: PPUSH
74503: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74504: LD_VAR 0 1
74508: NOT
74509: IFTRUE 74548
74511: PUSH
74512: LD_VAR 0 1
74516: PUSH
74517: LD_INT 21
74519: PUSH
74520: LD_INT 2
74522: PUSH
74523: EMPTY
74524: LIST
74525: LIST
74526: PUSH
74527: LD_INT 23
74529: PUSH
74530: LD_INT 2
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: PPUSH
74541: CALL_OW 69
74545: IN
74546: NOT
74547: OR
74548: IFFALSE 74552
// exit ;
74550: GO 74599
// for i = 1 to 3 do
74552: LD_ADDR_VAR 0 3
74556: PUSH
74557: DOUBLE
74558: LD_INT 1
74560: DEC
74561: ST_TO_ADDR
74562: LD_INT 3
74564: PUSH
74565: FOR_TO
74566: IFFALSE 74597
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74568: LD_VAR 0 1
74572: PPUSH
74573: CALL_OW 250
74577: PPUSH
74578: LD_VAR 0 1
74582: PPUSH
74583: CALL_OW 251
74587: PPUSH
74588: LD_INT 1
74590: PPUSH
74591: CALL_OW 453
74595: GO 74565
74597: POP
74598: POP
// end ;
74599: LD_VAR 0 2
74603: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74604: LD_INT 0
74606: PPUSH
74607: PPUSH
74608: PPUSH
74609: PPUSH
74610: PPUSH
74611: PPUSH
// if not unit or not enemy_unit then
74612: LD_VAR 0 1
74616: NOT
74617: IFTRUE 74626
74619: PUSH
74620: LD_VAR 0 2
74624: NOT
74625: OR
74626: IFFALSE 74630
// exit ;
74628: GO 75101
// if GetLives ( i ) < 250 then
74630: LD_VAR 0 4
74634: PPUSH
74635: CALL_OW 256
74639: PUSH
74640: LD_INT 250
74642: LESS
74643: IFFALSE 74656
// begin ComAutodestruct ( i ) ;
74645: LD_VAR 0 4
74649: PPUSH
74650: CALL 74500 0 1
// exit ;
74654: GO 75101
// end ; x := GetX ( enemy_unit ) ;
74656: LD_ADDR_VAR 0 7
74660: PUSH
74661: LD_VAR 0 2
74665: PPUSH
74666: CALL_OW 250
74670: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74671: LD_ADDR_VAR 0 8
74675: PUSH
74676: LD_VAR 0 2
74680: PPUSH
74681: CALL_OW 251
74685: ST_TO_ADDR
// if not x or not y then
74686: LD_VAR 0 7
74690: NOT
74691: IFTRUE 74700
74693: PUSH
74694: LD_VAR 0 8
74698: NOT
74699: OR
74700: IFFALSE 74704
// exit ;
74702: GO 75101
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74704: LD_ADDR_VAR 0 6
74708: PUSH
74709: LD_VAR 0 7
74713: PPUSH
74714: LD_INT 0
74716: PPUSH
74717: LD_INT 4
74719: PPUSH
74720: CALL_OW 272
74724: PUSH
74725: LD_VAR 0 8
74729: PPUSH
74730: LD_INT 0
74732: PPUSH
74733: LD_INT 4
74735: PPUSH
74736: CALL_OW 273
74740: PUSH
74741: EMPTY
74742: LIST
74743: LIST
74744: PUSH
74745: LD_VAR 0 7
74749: PPUSH
74750: LD_INT 1
74752: PPUSH
74753: LD_INT 4
74755: PPUSH
74756: CALL_OW 272
74760: PUSH
74761: LD_VAR 0 8
74765: PPUSH
74766: LD_INT 1
74768: PPUSH
74769: LD_INT 4
74771: PPUSH
74772: CALL_OW 273
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PUSH
74781: LD_VAR 0 7
74785: PPUSH
74786: LD_INT 2
74788: PPUSH
74789: LD_INT 4
74791: PPUSH
74792: CALL_OW 272
74796: PUSH
74797: LD_VAR 0 8
74801: PPUSH
74802: LD_INT 2
74804: PPUSH
74805: LD_INT 4
74807: PPUSH
74808: CALL_OW 273
74812: PUSH
74813: EMPTY
74814: LIST
74815: LIST
74816: PUSH
74817: LD_VAR 0 7
74821: PPUSH
74822: LD_INT 3
74824: PPUSH
74825: LD_INT 4
74827: PPUSH
74828: CALL_OW 272
74832: PUSH
74833: LD_VAR 0 8
74837: PPUSH
74838: LD_INT 3
74840: PPUSH
74841: LD_INT 4
74843: PPUSH
74844: CALL_OW 273
74848: PUSH
74849: EMPTY
74850: LIST
74851: LIST
74852: PUSH
74853: LD_VAR 0 7
74857: PPUSH
74858: LD_INT 4
74860: PPUSH
74861: LD_INT 4
74863: PPUSH
74864: CALL_OW 272
74868: PUSH
74869: LD_VAR 0 8
74873: PPUSH
74874: LD_INT 4
74876: PPUSH
74877: LD_INT 4
74879: PPUSH
74880: CALL_OW 273
74884: PUSH
74885: EMPTY
74886: LIST
74887: LIST
74888: PUSH
74889: LD_VAR 0 7
74893: PPUSH
74894: LD_INT 5
74896: PPUSH
74897: LD_INT 4
74899: PPUSH
74900: CALL_OW 272
74904: PUSH
74905: LD_VAR 0 8
74909: PPUSH
74910: LD_INT 5
74912: PPUSH
74913: LD_INT 4
74915: PPUSH
74916: CALL_OW 273
74920: PUSH
74921: EMPTY
74922: LIST
74923: LIST
74924: PUSH
74925: EMPTY
74926: LIST
74927: LIST
74928: LIST
74929: LIST
74930: LIST
74931: LIST
74932: ST_TO_ADDR
// for i = tmp downto 1 do
74933: LD_ADDR_VAR 0 4
74937: PUSH
74938: DOUBLE
74939: LD_VAR 0 6
74943: INC
74944: ST_TO_ADDR
74945: LD_INT 1
74947: PUSH
74948: FOR_DOWNTO
74949: IFFALSE 75052
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74951: LD_VAR 0 6
74955: PUSH
74956: LD_VAR 0 4
74960: ARRAY
74961: PUSH
74962: LD_INT 1
74964: ARRAY
74965: PPUSH
74966: LD_VAR 0 6
74970: PUSH
74971: LD_VAR 0 4
74975: ARRAY
74976: PUSH
74977: LD_INT 2
74979: ARRAY
74980: PPUSH
74981: CALL_OW 488
74985: NOT
74986: IFTRUE 75028
74988: PUSH
74989: LD_VAR 0 6
74993: PUSH
74994: LD_VAR 0 4
74998: ARRAY
74999: PUSH
75000: LD_INT 1
75002: ARRAY
75003: PPUSH
75004: LD_VAR 0 6
75008: PUSH
75009: LD_VAR 0 4
75013: ARRAY
75014: PUSH
75015: LD_INT 2
75017: ARRAY
75018: PPUSH
75019: CALL_OW 428
75023: PUSH
75024: LD_INT 0
75026: NONEQUAL
75027: OR
75028: IFFALSE 75050
// tmp := Delete ( tmp , i ) ;
75030: LD_ADDR_VAR 0 6
75034: PUSH
75035: LD_VAR 0 6
75039: PPUSH
75040: LD_VAR 0 4
75044: PPUSH
75045: CALL_OW 3
75049: ST_TO_ADDR
75050: GO 74948
75052: POP
75053: POP
// j := GetClosestHex ( unit , tmp ) ;
75054: LD_ADDR_VAR 0 5
75058: PUSH
75059: LD_VAR 0 1
75063: PPUSH
75064: LD_VAR 0 6
75068: PPUSH
75069: CALL 74346 0 2
75073: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75074: LD_VAR 0 1
75078: PPUSH
75079: LD_VAR 0 5
75083: PUSH
75084: LD_INT 1
75086: ARRAY
75087: PPUSH
75088: LD_VAR 0 5
75092: PUSH
75093: LD_INT 2
75095: ARRAY
75096: PPUSH
75097: CALL_OW 111
// end ;
75101: LD_VAR 0 3
75105: RET
// export function PrepareApemanSoldier ( ) ; begin
75106: LD_INT 0
75108: PPUSH
// uc_nation := 0 ;
75109: LD_ADDR_OWVAR 21
75113: PUSH
75114: LD_INT 0
75116: ST_TO_ADDR
// hc_sex := sex_male ;
75117: LD_ADDR_OWVAR 27
75121: PUSH
75122: LD_INT 1
75124: ST_TO_ADDR
// hc_name :=  ;
75125: LD_ADDR_OWVAR 26
75129: PUSH
75130: LD_STRING 
75132: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75133: LD_ADDR_OWVAR 28
75137: PUSH
75138: LD_INT 15
75140: ST_TO_ADDR
// hc_gallery :=  ;
75141: LD_ADDR_OWVAR 33
75145: PUSH
75146: LD_STRING 
75148: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75149: LD_ADDR_OWVAR 31
75153: PUSH
75154: LD_INT 0
75156: PPUSH
75157: LD_INT 3
75159: PPUSH
75160: CALL_OW 12
75164: PUSH
75165: LD_INT 0
75167: PPUSH
75168: LD_INT 3
75170: PPUSH
75171: CALL_OW 12
75175: PUSH
75176: LD_INT 0
75178: PUSH
75179: LD_INT 0
75181: PUSH
75182: EMPTY
75183: LIST
75184: LIST
75185: LIST
75186: LIST
75187: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75188: LD_ADDR_OWVAR 29
75192: PUSH
75193: LD_INT 12
75195: PUSH
75196: LD_INT 12
75198: PUSH
75199: EMPTY
75200: LIST
75201: LIST
75202: ST_TO_ADDR
// end ;
75203: LD_VAR 0 1
75207: RET
// export function PrepareApemanEngineer ( ) ; begin
75208: LD_INT 0
75210: PPUSH
// uc_nation := 0 ;
75211: LD_ADDR_OWVAR 21
75215: PUSH
75216: LD_INT 0
75218: ST_TO_ADDR
// hc_sex := sex_male ;
75219: LD_ADDR_OWVAR 27
75223: PUSH
75224: LD_INT 1
75226: ST_TO_ADDR
// hc_name :=  ;
75227: LD_ADDR_OWVAR 26
75231: PUSH
75232: LD_STRING 
75234: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75235: LD_ADDR_OWVAR 28
75239: PUSH
75240: LD_INT 16
75242: ST_TO_ADDR
// hc_gallery :=  ;
75243: LD_ADDR_OWVAR 33
75247: PUSH
75248: LD_STRING 
75250: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75251: LD_ADDR_OWVAR 31
75255: PUSH
75256: LD_INT 0
75258: PPUSH
75259: LD_INT 3
75261: PPUSH
75262: CALL_OW 12
75266: PUSH
75267: LD_INT 0
75269: PPUSH
75270: LD_INT 3
75272: PPUSH
75273: CALL_OW 12
75277: PUSH
75278: LD_INT 0
75280: PUSH
75281: LD_INT 0
75283: PUSH
75284: EMPTY
75285: LIST
75286: LIST
75287: LIST
75288: LIST
75289: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75290: LD_ADDR_OWVAR 29
75294: PUSH
75295: LD_INT 12
75297: PUSH
75298: LD_INT 12
75300: PUSH
75301: EMPTY
75302: LIST
75303: LIST
75304: ST_TO_ADDR
// end ;
75305: LD_VAR 0 1
75309: RET
// export function PrepareApeman ( agressivity ) ; begin
75310: LD_INT 0
75312: PPUSH
// uc_side := 0 ;
75313: LD_ADDR_OWVAR 20
75317: PUSH
75318: LD_INT 0
75320: ST_TO_ADDR
// uc_nation := 0 ;
75321: LD_ADDR_OWVAR 21
75325: PUSH
75326: LD_INT 0
75328: ST_TO_ADDR
// hc_sex := sex_male ;
75329: LD_ADDR_OWVAR 27
75333: PUSH
75334: LD_INT 1
75336: ST_TO_ADDR
// hc_class := class_apeman ;
75337: LD_ADDR_OWVAR 28
75341: PUSH
75342: LD_INT 12
75344: ST_TO_ADDR
// hc_gallery :=  ;
75345: LD_ADDR_OWVAR 33
75349: PUSH
75350: LD_STRING 
75352: ST_TO_ADDR
// hc_name :=  ;
75353: LD_ADDR_OWVAR 26
75357: PUSH
75358: LD_STRING 
75360: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75361: LD_ADDR_OWVAR 29
75365: PUSH
75366: LD_INT 12
75368: PUSH
75369: LD_INT 12
75371: PUSH
75372: EMPTY
75373: LIST
75374: LIST
75375: ST_TO_ADDR
// if agressivity = 0 then
75376: LD_VAR 0 1
75380: PUSH
75381: LD_INT 0
75383: EQUAL
75384: IFFALSE 75396
// hc_agressivity := 0 else
75386: LD_ADDR_OWVAR 35
75390: PUSH
75391: LD_INT 0
75393: ST_TO_ADDR
75394: GO 75417
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75396: LD_ADDR_OWVAR 35
75400: PUSH
75401: LD_VAR 0 1
75405: NEG
75406: PPUSH
75407: LD_VAR 0 1
75411: PPUSH
75412: CALL_OW 12
75416: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75417: LD_ADDR_OWVAR 31
75421: PUSH
75422: LD_INT 0
75424: PPUSH
75425: LD_INT 3
75427: PPUSH
75428: CALL_OW 12
75432: PUSH
75433: LD_INT 0
75435: PPUSH
75436: LD_INT 3
75438: PPUSH
75439: CALL_OW 12
75443: PUSH
75444: LD_INT 0
75446: PUSH
75447: LD_INT 0
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: ST_TO_ADDR
// end ;
75456: LD_VAR 0 2
75460: RET
// export function PrepareTiger ( agressivity ) ; begin
75461: LD_INT 0
75463: PPUSH
// uc_side := 0 ;
75464: LD_ADDR_OWVAR 20
75468: PUSH
75469: LD_INT 0
75471: ST_TO_ADDR
// uc_nation := 0 ;
75472: LD_ADDR_OWVAR 21
75476: PUSH
75477: LD_INT 0
75479: ST_TO_ADDR
// InitHc ;
75480: CALL_OW 19
// hc_class := class_tiger ;
75484: LD_ADDR_OWVAR 28
75488: PUSH
75489: LD_INT 14
75491: ST_TO_ADDR
// hc_gallery :=  ;
75492: LD_ADDR_OWVAR 33
75496: PUSH
75497: LD_STRING 
75499: ST_TO_ADDR
// hc_name :=  ;
75500: LD_ADDR_OWVAR 26
75504: PUSH
75505: LD_STRING 
75507: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75508: LD_ADDR_OWVAR 35
75512: PUSH
75513: LD_VAR 0 1
75517: NEG
75518: PPUSH
75519: LD_VAR 0 1
75523: PPUSH
75524: CALL_OW 12
75528: ST_TO_ADDR
// end ;
75529: LD_VAR 0 2
75533: RET
// export function PrepareEnchidna ( ) ; begin
75534: LD_INT 0
75536: PPUSH
// uc_side := 0 ;
75537: LD_ADDR_OWVAR 20
75541: PUSH
75542: LD_INT 0
75544: ST_TO_ADDR
// uc_nation := 0 ;
75545: LD_ADDR_OWVAR 21
75549: PUSH
75550: LD_INT 0
75552: ST_TO_ADDR
// InitHc ;
75553: CALL_OW 19
// hc_class := class_baggie ;
75557: LD_ADDR_OWVAR 28
75561: PUSH
75562: LD_INT 13
75564: ST_TO_ADDR
// hc_gallery :=  ;
75565: LD_ADDR_OWVAR 33
75569: PUSH
75570: LD_STRING 
75572: ST_TO_ADDR
// hc_name :=  ;
75573: LD_ADDR_OWVAR 26
75577: PUSH
75578: LD_STRING 
75580: ST_TO_ADDR
// end ;
75581: LD_VAR 0 1
75585: RET
// export function PrepareFrog ( ) ; begin
75586: LD_INT 0
75588: PPUSH
// uc_side := 0 ;
75589: LD_ADDR_OWVAR 20
75593: PUSH
75594: LD_INT 0
75596: ST_TO_ADDR
// uc_nation := 0 ;
75597: LD_ADDR_OWVAR 21
75601: PUSH
75602: LD_INT 0
75604: ST_TO_ADDR
// InitHc ;
75605: CALL_OW 19
// hc_class := class_frog ;
75609: LD_ADDR_OWVAR 28
75613: PUSH
75614: LD_INT 19
75616: ST_TO_ADDR
// hc_gallery :=  ;
75617: LD_ADDR_OWVAR 33
75621: PUSH
75622: LD_STRING 
75624: ST_TO_ADDR
// hc_name :=  ;
75625: LD_ADDR_OWVAR 26
75629: PUSH
75630: LD_STRING 
75632: ST_TO_ADDR
// end ;
75633: LD_VAR 0 1
75637: RET
// export function PrepareFish ( ) ; begin
75638: LD_INT 0
75640: PPUSH
// uc_side := 0 ;
75641: LD_ADDR_OWVAR 20
75645: PUSH
75646: LD_INT 0
75648: ST_TO_ADDR
// uc_nation := 0 ;
75649: LD_ADDR_OWVAR 21
75653: PUSH
75654: LD_INT 0
75656: ST_TO_ADDR
// InitHc ;
75657: CALL_OW 19
// hc_class := class_fish ;
75661: LD_ADDR_OWVAR 28
75665: PUSH
75666: LD_INT 20
75668: ST_TO_ADDR
// hc_gallery :=  ;
75669: LD_ADDR_OWVAR 33
75673: PUSH
75674: LD_STRING 
75676: ST_TO_ADDR
// hc_name :=  ;
75677: LD_ADDR_OWVAR 26
75681: PUSH
75682: LD_STRING 
75684: ST_TO_ADDR
// end ;
75685: LD_VAR 0 1
75689: RET
// export function PrepareBird ( ) ; begin
75690: LD_INT 0
75692: PPUSH
// uc_side := 0 ;
75693: LD_ADDR_OWVAR 20
75697: PUSH
75698: LD_INT 0
75700: ST_TO_ADDR
// uc_nation := 0 ;
75701: LD_ADDR_OWVAR 21
75705: PUSH
75706: LD_INT 0
75708: ST_TO_ADDR
// InitHc ;
75709: CALL_OW 19
// hc_class := class_phororhacos ;
75713: LD_ADDR_OWVAR 28
75717: PUSH
75718: LD_INT 18
75720: ST_TO_ADDR
// hc_gallery :=  ;
75721: LD_ADDR_OWVAR 33
75725: PUSH
75726: LD_STRING 
75728: ST_TO_ADDR
// hc_name :=  ;
75729: LD_ADDR_OWVAR 26
75733: PUSH
75734: LD_STRING 
75736: ST_TO_ADDR
// end ;
75737: LD_VAR 0 1
75741: RET
// export function PrepareHorse ( ) ; begin
75742: LD_INT 0
75744: PPUSH
// uc_side := 0 ;
75745: LD_ADDR_OWVAR 20
75749: PUSH
75750: LD_INT 0
75752: ST_TO_ADDR
// uc_nation := 0 ;
75753: LD_ADDR_OWVAR 21
75757: PUSH
75758: LD_INT 0
75760: ST_TO_ADDR
// InitHc ;
75761: CALL_OW 19
// hc_class := class_horse ;
75765: LD_ADDR_OWVAR 28
75769: PUSH
75770: LD_INT 21
75772: ST_TO_ADDR
// hc_gallery :=  ;
75773: LD_ADDR_OWVAR 33
75777: PUSH
75778: LD_STRING 
75780: ST_TO_ADDR
// hc_name :=  ;
75781: LD_ADDR_OWVAR 26
75785: PUSH
75786: LD_STRING 
75788: ST_TO_ADDR
// end ;
75789: LD_VAR 0 1
75793: RET
// export function PrepareMastodont ( ) ; begin
75794: LD_INT 0
75796: PPUSH
// uc_side := 0 ;
75797: LD_ADDR_OWVAR 20
75801: PUSH
75802: LD_INT 0
75804: ST_TO_ADDR
// uc_nation := 0 ;
75805: LD_ADDR_OWVAR 21
75809: PUSH
75810: LD_INT 0
75812: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75813: LD_ADDR_OWVAR 37
75817: PUSH
75818: LD_INT 31
75820: ST_TO_ADDR
// vc_control := control_rider ;
75821: LD_ADDR_OWVAR 38
75825: PUSH
75826: LD_INT 4
75828: ST_TO_ADDR
// end ;
75829: LD_VAR 0 1
75833: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75834: LD_INT 0
75836: PPUSH
75837: PPUSH
75838: PPUSH
// uc_side = 0 ;
75839: LD_ADDR_OWVAR 20
75843: PUSH
75844: LD_INT 0
75846: ST_TO_ADDR
// uc_nation = 0 ;
75847: LD_ADDR_OWVAR 21
75851: PUSH
75852: LD_INT 0
75854: ST_TO_ADDR
// InitHc_All ( ) ;
75855: CALL_OW 584
// InitVc ;
75859: CALL_OW 20
// if mastodonts then
75863: LD_VAR 0 6
75867: IFFALSE 75934
// for i = 1 to mastodonts do
75869: LD_ADDR_VAR 0 11
75873: PUSH
75874: DOUBLE
75875: LD_INT 1
75877: DEC
75878: ST_TO_ADDR
75879: LD_VAR 0 6
75883: PUSH
75884: FOR_TO
75885: IFFALSE 75932
// begin vc_chassis := 31 ;
75887: LD_ADDR_OWVAR 37
75891: PUSH
75892: LD_INT 31
75894: ST_TO_ADDR
// vc_control := control_rider ;
75895: LD_ADDR_OWVAR 38
75899: PUSH
75900: LD_INT 4
75902: ST_TO_ADDR
// animal := CreateVehicle ;
75903: LD_ADDR_VAR 0 12
75907: PUSH
75908: CALL_OW 45
75912: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75913: LD_VAR 0 12
75917: PPUSH
75918: LD_VAR 0 8
75922: PPUSH
75923: LD_INT 0
75925: PPUSH
75926: CALL 78076 0 3
// end ;
75930: GO 75884
75932: POP
75933: POP
// if horses then
75934: LD_VAR 0 5
75938: IFFALSE 76005
// for i = 1 to horses do
75940: LD_ADDR_VAR 0 11
75944: PUSH
75945: DOUBLE
75946: LD_INT 1
75948: DEC
75949: ST_TO_ADDR
75950: LD_VAR 0 5
75954: PUSH
75955: FOR_TO
75956: IFFALSE 76003
// begin hc_class := 21 ;
75958: LD_ADDR_OWVAR 28
75962: PUSH
75963: LD_INT 21
75965: ST_TO_ADDR
// hc_gallery :=  ;
75966: LD_ADDR_OWVAR 33
75970: PUSH
75971: LD_STRING 
75973: ST_TO_ADDR
// animal := CreateHuman ;
75974: LD_ADDR_VAR 0 12
75978: PUSH
75979: CALL_OW 44
75983: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75984: LD_VAR 0 12
75988: PPUSH
75989: LD_VAR 0 8
75993: PPUSH
75994: LD_INT 0
75996: PPUSH
75997: CALL 78076 0 3
// end ;
76001: GO 75955
76003: POP
76004: POP
// if birds then
76005: LD_VAR 0 1
76009: IFFALSE 76076
// for i = 1 to birds do
76011: LD_ADDR_VAR 0 11
76015: PUSH
76016: DOUBLE
76017: LD_INT 1
76019: DEC
76020: ST_TO_ADDR
76021: LD_VAR 0 1
76025: PUSH
76026: FOR_TO
76027: IFFALSE 76074
// begin hc_class := 18 ;
76029: LD_ADDR_OWVAR 28
76033: PUSH
76034: LD_INT 18
76036: ST_TO_ADDR
// hc_gallery =  ;
76037: LD_ADDR_OWVAR 33
76041: PUSH
76042: LD_STRING 
76044: ST_TO_ADDR
// animal := CreateHuman ;
76045: LD_ADDR_VAR 0 12
76049: PUSH
76050: CALL_OW 44
76054: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76055: LD_VAR 0 12
76059: PPUSH
76060: LD_VAR 0 8
76064: PPUSH
76065: LD_INT 0
76067: PPUSH
76068: CALL 78076 0 3
// end ;
76072: GO 76026
76074: POP
76075: POP
// if tigers then
76076: LD_VAR 0 2
76080: IFFALSE 76164
// for i = 1 to tigers do
76082: LD_ADDR_VAR 0 11
76086: PUSH
76087: DOUBLE
76088: LD_INT 1
76090: DEC
76091: ST_TO_ADDR
76092: LD_VAR 0 2
76096: PUSH
76097: FOR_TO
76098: IFFALSE 76162
// begin hc_class = class_tiger ;
76100: LD_ADDR_OWVAR 28
76104: PUSH
76105: LD_INT 14
76107: ST_TO_ADDR
// hc_gallery =  ;
76108: LD_ADDR_OWVAR 33
76112: PUSH
76113: LD_STRING 
76115: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76116: LD_ADDR_OWVAR 35
76120: PUSH
76121: LD_INT 7
76123: NEG
76124: PPUSH
76125: LD_INT 7
76127: PPUSH
76128: CALL_OW 12
76132: ST_TO_ADDR
// animal := CreateHuman ;
76133: LD_ADDR_VAR 0 12
76137: PUSH
76138: CALL_OW 44
76142: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76143: LD_VAR 0 12
76147: PPUSH
76148: LD_VAR 0 8
76152: PPUSH
76153: LD_INT 0
76155: PPUSH
76156: CALL 78076 0 3
// end ;
76160: GO 76097
76162: POP
76163: POP
// if apemans then
76164: LD_VAR 0 3
76168: IFFALSE 76291
// for i = 1 to apemans do
76170: LD_ADDR_VAR 0 11
76174: PUSH
76175: DOUBLE
76176: LD_INT 1
76178: DEC
76179: ST_TO_ADDR
76180: LD_VAR 0 3
76184: PUSH
76185: FOR_TO
76186: IFFALSE 76289
// begin hc_class = class_apeman ;
76188: LD_ADDR_OWVAR 28
76192: PUSH
76193: LD_INT 12
76195: ST_TO_ADDR
// hc_gallery =  ;
76196: LD_ADDR_OWVAR 33
76200: PUSH
76201: LD_STRING 
76203: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76204: LD_ADDR_OWVAR 35
76208: PUSH
76209: LD_INT 2
76211: NEG
76212: PPUSH
76213: LD_INT 2
76215: PPUSH
76216: CALL_OW 12
76220: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76221: LD_ADDR_OWVAR 31
76225: PUSH
76226: LD_INT 1
76228: PPUSH
76229: LD_INT 3
76231: PPUSH
76232: CALL_OW 12
76236: PUSH
76237: LD_INT 1
76239: PPUSH
76240: LD_INT 3
76242: PPUSH
76243: CALL_OW 12
76247: PUSH
76248: LD_INT 0
76250: PUSH
76251: LD_INT 0
76253: PUSH
76254: EMPTY
76255: LIST
76256: LIST
76257: LIST
76258: LIST
76259: ST_TO_ADDR
// animal := CreateHuman ;
76260: LD_ADDR_VAR 0 12
76264: PUSH
76265: CALL_OW 44
76269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76270: LD_VAR 0 12
76274: PPUSH
76275: LD_VAR 0 8
76279: PPUSH
76280: LD_INT 0
76282: PPUSH
76283: CALL 78076 0 3
// end ;
76287: GO 76185
76289: POP
76290: POP
// if enchidnas then
76291: LD_VAR 0 4
76295: IFFALSE 76362
// for i = 1 to enchidnas do
76297: LD_ADDR_VAR 0 11
76301: PUSH
76302: DOUBLE
76303: LD_INT 1
76305: DEC
76306: ST_TO_ADDR
76307: LD_VAR 0 4
76311: PUSH
76312: FOR_TO
76313: IFFALSE 76360
// begin hc_class = 13 ;
76315: LD_ADDR_OWVAR 28
76319: PUSH
76320: LD_INT 13
76322: ST_TO_ADDR
// hc_gallery =  ;
76323: LD_ADDR_OWVAR 33
76327: PUSH
76328: LD_STRING 
76330: ST_TO_ADDR
// animal := CreateHuman ;
76331: LD_ADDR_VAR 0 12
76335: PUSH
76336: CALL_OW 44
76340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76341: LD_VAR 0 12
76345: PPUSH
76346: LD_VAR 0 8
76350: PPUSH
76351: LD_INT 0
76353: PPUSH
76354: CALL 78076 0 3
// end ;
76358: GO 76312
76360: POP
76361: POP
// if fishes then
76362: LD_VAR 0 7
76366: IFFALSE 76433
// for i = 1 to fishes do
76368: LD_ADDR_VAR 0 11
76372: PUSH
76373: DOUBLE
76374: LD_INT 1
76376: DEC
76377: ST_TO_ADDR
76378: LD_VAR 0 7
76382: PUSH
76383: FOR_TO
76384: IFFALSE 76431
// begin hc_class = 20 ;
76386: LD_ADDR_OWVAR 28
76390: PUSH
76391: LD_INT 20
76393: ST_TO_ADDR
// hc_gallery =  ;
76394: LD_ADDR_OWVAR 33
76398: PUSH
76399: LD_STRING 
76401: ST_TO_ADDR
// animal := CreateHuman ;
76402: LD_ADDR_VAR 0 12
76406: PUSH
76407: CALL_OW 44
76411: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76412: LD_VAR 0 12
76416: PPUSH
76417: LD_VAR 0 9
76421: PPUSH
76422: LD_INT 0
76424: PPUSH
76425: CALL 78076 0 3
// end ;
76429: GO 76383
76431: POP
76432: POP
// end ;
76433: LD_VAR 0 10
76437: RET
// export function WantHeal ( sci , unit ) ; begin
76438: LD_INT 0
76440: PPUSH
// if GetTaskList ( sci ) > 0 then
76441: LD_VAR 0 1
76445: PPUSH
76446: CALL_OW 437
76450: PUSH
76451: LD_INT 0
76453: GREATER
76454: IFFALSE 76526
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76456: LD_VAR 0 1
76460: PPUSH
76461: CALL_OW 437
76465: PUSH
76466: LD_INT 1
76468: ARRAY
76469: PUSH
76470: LD_INT 1
76472: ARRAY
76473: PUSH
76474: LD_STRING l
76476: EQUAL
76477: IFFALSE 76504
76479: PUSH
76480: LD_VAR 0 1
76484: PPUSH
76485: CALL_OW 437
76489: PUSH
76490: LD_INT 1
76492: ARRAY
76493: PUSH
76494: LD_INT 4
76496: ARRAY
76497: PUSH
76498: LD_VAR 0 2
76502: EQUAL
76503: AND
76504: IFFALSE 76516
// result := true else
76506: LD_ADDR_VAR 0 3
76510: PUSH
76511: LD_INT 1
76513: ST_TO_ADDR
76514: GO 76524
// result := false ;
76516: LD_ADDR_VAR 0 3
76520: PUSH
76521: LD_INT 0
76523: ST_TO_ADDR
// end else
76524: GO 76534
// result := false ;
76526: LD_ADDR_VAR 0 3
76530: PUSH
76531: LD_INT 0
76533: ST_TO_ADDR
// end ;
76534: LD_VAR 0 3
76538: RET
// export function HealTarget ( sci ) ; begin
76539: LD_INT 0
76541: PPUSH
// if not sci then
76542: LD_VAR 0 1
76546: NOT
76547: IFFALSE 76551
// exit ;
76549: GO 76616
// result := 0 ;
76551: LD_ADDR_VAR 0 2
76555: PUSH
76556: LD_INT 0
76558: ST_TO_ADDR
// if GetTaskList ( sci ) then
76559: LD_VAR 0 1
76563: PPUSH
76564: CALL_OW 437
76568: IFFALSE 76616
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76570: LD_VAR 0 1
76574: PPUSH
76575: CALL_OW 437
76579: PUSH
76580: LD_INT 1
76582: ARRAY
76583: PUSH
76584: LD_INT 1
76586: ARRAY
76587: PUSH
76588: LD_STRING l
76590: EQUAL
76591: IFFALSE 76616
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76593: LD_ADDR_VAR 0 2
76597: PUSH
76598: LD_VAR 0 1
76602: PPUSH
76603: CALL_OW 437
76607: PUSH
76608: LD_INT 1
76610: ARRAY
76611: PUSH
76612: LD_INT 4
76614: ARRAY
76615: ST_TO_ADDR
// end ;
76616: LD_VAR 0 2
76620: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76621: LD_INT 0
76623: PPUSH
76624: PPUSH
76625: PPUSH
76626: PPUSH
// if not base_units then
76627: LD_VAR 0 1
76631: NOT
76632: IFFALSE 76636
// exit ;
76634: GO 76723
// result := false ;
76636: LD_ADDR_VAR 0 2
76640: PUSH
76641: LD_INT 0
76643: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76644: LD_ADDR_VAR 0 5
76648: PUSH
76649: LD_VAR 0 1
76653: PPUSH
76654: LD_INT 21
76656: PUSH
76657: LD_INT 3
76659: PUSH
76660: EMPTY
76661: LIST
76662: LIST
76663: PPUSH
76664: CALL_OW 72
76668: ST_TO_ADDR
// if not tmp then
76669: LD_VAR 0 5
76673: NOT
76674: IFFALSE 76678
// exit ;
76676: GO 76723
// for i in tmp do
76678: LD_ADDR_VAR 0 3
76682: PUSH
76683: LD_VAR 0 5
76687: PUSH
76688: FOR_IN
76689: IFFALSE 76721
// begin result := EnemyInRange ( i , 22 ) ;
76691: LD_ADDR_VAR 0 2
76695: PUSH
76696: LD_VAR 0 3
76700: PPUSH
76701: LD_INT 22
76703: PPUSH
76704: CALL 74148 0 2
76708: ST_TO_ADDR
// if result then
76709: LD_VAR 0 2
76713: IFFALSE 76719
// exit ;
76715: POP
76716: POP
76717: GO 76723
// end ;
76719: GO 76688
76721: POP
76722: POP
// end ;
76723: LD_VAR 0 2
76727: RET
// export function FilterByTag ( units , tag ) ; begin
76728: LD_INT 0
76730: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76731: LD_ADDR_VAR 0 3
76735: PUSH
76736: LD_VAR 0 1
76740: PPUSH
76741: LD_INT 120
76743: PUSH
76744: LD_VAR 0 2
76748: PUSH
76749: EMPTY
76750: LIST
76751: LIST
76752: PPUSH
76753: CALL_OW 72
76757: ST_TO_ADDR
// end ;
76758: LD_VAR 0 3
76762: RET
// export function IsDriver ( un ) ; begin
76763: LD_INT 0
76765: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76766: LD_ADDR_VAR 0 2
76770: PUSH
76771: LD_VAR 0 1
76775: PUSH
76776: LD_INT 55
76778: PUSH
76779: EMPTY
76780: LIST
76781: PPUSH
76782: CALL_OW 69
76786: IN
76787: ST_TO_ADDR
// end ;
76788: LD_VAR 0 2
76792: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76793: LD_INT 0
76795: PPUSH
76796: PPUSH
// list := [ ] ;
76797: LD_ADDR_VAR 0 5
76801: PUSH
76802: EMPTY
76803: ST_TO_ADDR
// case d of 0 :
76804: LD_VAR 0 3
76808: PUSH
76809: LD_INT 0
76811: DOUBLE
76812: EQUAL
76813: IFTRUE 76817
76815: GO 76950
76817: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76818: LD_ADDR_VAR 0 5
76822: PUSH
76823: LD_VAR 0 1
76827: PUSH
76828: LD_INT 4
76830: MINUS
76831: PUSH
76832: LD_VAR 0 2
76836: PUSH
76837: LD_INT 4
76839: MINUS
76840: PUSH
76841: LD_INT 2
76843: PUSH
76844: EMPTY
76845: LIST
76846: LIST
76847: LIST
76848: PUSH
76849: LD_VAR 0 1
76853: PUSH
76854: LD_INT 3
76856: MINUS
76857: PUSH
76858: LD_VAR 0 2
76862: PUSH
76863: LD_INT 1
76865: PUSH
76866: EMPTY
76867: LIST
76868: LIST
76869: LIST
76870: PUSH
76871: LD_VAR 0 1
76875: PUSH
76876: LD_INT 4
76878: PLUS
76879: PUSH
76880: LD_VAR 0 2
76884: PUSH
76885: LD_INT 4
76887: PUSH
76888: EMPTY
76889: LIST
76890: LIST
76891: LIST
76892: PUSH
76893: LD_VAR 0 1
76897: PUSH
76898: LD_INT 3
76900: PLUS
76901: PUSH
76902: LD_VAR 0 2
76906: PUSH
76907: LD_INT 3
76909: PLUS
76910: PUSH
76911: LD_INT 5
76913: PUSH
76914: EMPTY
76915: LIST
76916: LIST
76917: LIST
76918: PUSH
76919: LD_VAR 0 1
76923: PUSH
76924: LD_VAR 0 2
76928: PUSH
76929: LD_INT 4
76931: PLUS
76932: PUSH
76933: LD_INT 0
76935: PUSH
76936: EMPTY
76937: LIST
76938: LIST
76939: LIST
76940: PUSH
76941: EMPTY
76942: LIST
76943: LIST
76944: LIST
76945: LIST
76946: LIST
76947: ST_TO_ADDR
// end ; 1 :
76948: GO 77648
76950: LD_INT 1
76952: DOUBLE
76953: EQUAL
76954: IFTRUE 76958
76956: GO 77091
76958: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76959: LD_ADDR_VAR 0 5
76963: PUSH
76964: LD_VAR 0 1
76968: PUSH
76969: LD_VAR 0 2
76973: PUSH
76974: LD_INT 4
76976: MINUS
76977: PUSH
76978: LD_INT 3
76980: PUSH
76981: EMPTY
76982: LIST
76983: LIST
76984: LIST
76985: PUSH
76986: LD_VAR 0 1
76990: PUSH
76991: LD_INT 3
76993: MINUS
76994: PUSH
76995: LD_VAR 0 2
76999: PUSH
77000: LD_INT 3
77002: MINUS
77003: PUSH
77004: LD_INT 2
77006: PUSH
77007: EMPTY
77008: LIST
77009: LIST
77010: LIST
77011: PUSH
77012: LD_VAR 0 1
77016: PUSH
77017: LD_INT 4
77019: MINUS
77020: PUSH
77021: LD_VAR 0 2
77025: PUSH
77026: LD_INT 1
77028: PUSH
77029: EMPTY
77030: LIST
77031: LIST
77032: LIST
77033: PUSH
77034: LD_VAR 0 1
77038: PUSH
77039: LD_VAR 0 2
77043: PUSH
77044: LD_INT 3
77046: PLUS
77047: PUSH
77048: LD_INT 0
77050: PUSH
77051: EMPTY
77052: LIST
77053: LIST
77054: LIST
77055: PUSH
77056: LD_VAR 0 1
77060: PUSH
77061: LD_INT 4
77063: PLUS
77064: PUSH
77065: LD_VAR 0 2
77069: PUSH
77070: LD_INT 4
77072: PLUS
77073: PUSH
77074: LD_INT 5
77076: PUSH
77077: EMPTY
77078: LIST
77079: LIST
77080: LIST
77081: PUSH
77082: EMPTY
77083: LIST
77084: LIST
77085: LIST
77086: LIST
77087: LIST
77088: ST_TO_ADDR
// end ; 2 :
77089: GO 77648
77091: LD_INT 2
77093: DOUBLE
77094: EQUAL
77095: IFTRUE 77099
77097: GO 77228
77099: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77100: LD_ADDR_VAR 0 5
77104: PUSH
77105: LD_VAR 0 1
77109: PUSH
77110: LD_VAR 0 2
77114: PUSH
77115: LD_INT 3
77117: MINUS
77118: PUSH
77119: LD_INT 3
77121: PUSH
77122: EMPTY
77123: LIST
77124: LIST
77125: LIST
77126: PUSH
77127: LD_VAR 0 1
77131: PUSH
77132: LD_INT 4
77134: PLUS
77135: PUSH
77136: LD_VAR 0 2
77140: PUSH
77141: LD_INT 4
77143: PUSH
77144: EMPTY
77145: LIST
77146: LIST
77147: LIST
77148: PUSH
77149: LD_VAR 0 1
77153: PUSH
77154: LD_VAR 0 2
77158: PUSH
77159: LD_INT 4
77161: PLUS
77162: PUSH
77163: LD_INT 0
77165: PUSH
77166: EMPTY
77167: LIST
77168: LIST
77169: LIST
77170: PUSH
77171: LD_VAR 0 1
77175: PUSH
77176: LD_INT 3
77178: MINUS
77179: PUSH
77180: LD_VAR 0 2
77184: PUSH
77185: LD_INT 1
77187: PUSH
77188: EMPTY
77189: LIST
77190: LIST
77191: LIST
77192: PUSH
77193: LD_VAR 0 1
77197: PUSH
77198: LD_INT 4
77200: MINUS
77201: PUSH
77202: LD_VAR 0 2
77206: PUSH
77207: LD_INT 4
77209: MINUS
77210: PUSH
77211: LD_INT 2
77213: PUSH
77214: EMPTY
77215: LIST
77216: LIST
77217: LIST
77218: PUSH
77219: EMPTY
77220: LIST
77221: LIST
77222: LIST
77223: LIST
77224: LIST
77225: ST_TO_ADDR
// end ; 3 :
77226: GO 77648
77228: LD_INT 3
77230: DOUBLE
77231: EQUAL
77232: IFTRUE 77236
77234: GO 77369
77236: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77237: LD_ADDR_VAR 0 5
77241: PUSH
77242: LD_VAR 0 1
77246: PUSH
77247: LD_INT 3
77249: PLUS
77250: PUSH
77251: LD_VAR 0 2
77255: PUSH
77256: LD_INT 4
77258: PUSH
77259: EMPTY
77260: LIST
77261: LIST
77262: LIST
77263: PUSH
77264: LD_VAR 0 1
77268: PUSH
77269: LD_INT 4
77271: PLUS
77272: PUSH
77273: LD_VAR 0 2
77277: PUSH
77278: LD_INT 4
77280: PLUS
77281: PUSH
77282: LD_INT 5
77284: PUSH
77285: EMPTY
77286: LIST
77287: LIST
77288: LIST
77289: PUSH
77290: LD_VAR 0 1
77294: PUSH
77295: LD_INT 4
77297: MINUS
77298: PUSH
77299: LD_VAR 0 2
77303: PUSH
77304: LD_INT 1
77306: PUSH
77307: EMPTY
77308: LIST
77309: LIST
77310: LIST
77311: PUSH
77312: LD_VAR 0 1
77316: PUSH
77317: LD_VAR 0 2
77321: PUSH
77322: LD_INT 4
77324: MINUS
77325: PUSH
77326: LD_INT 3
77328: PUSH
77329: EMPTY
77330: LIST
77331: LIST
77332: LIST
77333: PUSH
77334: LD_VAR 0 1
77338: PUSH
77339: LD_INT 3
77341: MINUS
77342: PUSH
77343: LD_VAR 0 2
77347: PUSH
77348: LD_INT 3
77350: MINUS
77351: PUSH
77352: LD_INT 2
77354: PUSH
77355: EMPTY
77356: LIST
77357: LIST
77358: LIST
77359: PUSH
77360: EMPTY
77361: LIST
77362: LIST
77363: LIST
77364: LIST
77365: LIST
77366: ST_TO_ADDR
// end ; 4 :
77367: GO 77648
77369: LD_INT 4
77371: DOUBLE
77372: EQUAL
77373: IFTRUE 77377
77375: GO 77510
77377: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77378: LD_ADDR_VAR 0 5
77382: PUSH
77383: LD_VAR 0 1
77387: PUSH
77388: LD_VAR 0 2
77392: PUSH
77393: LD_INT 4
77395: PLUS
77396: PUSH
77397: LD_INT 0
77399: PUSH
77400: EMPTY
77401: LIST
77402: LIST
77403: LIST
77404: PUSH
77405: LD_VAR 0 1
77409: PUSH
77410: LD_INT 3
77412: PLUS
77413: PUSH
77414: LD_VAR 0 2
77418: PUSH
77419: LD_INT 3
77421: PLUS
77422: PUSH
77423: LD_INT 5
77425: PUSH
77426: EMPTY
77427: LIST
77428: LIST
77429: LIST
77430: PUSH
77431: LD_VAR 0 1
77435: PUSH
77436: LD_INT 4
77438: PLUS
77439: PUSH
77440: LD_VAR 0 2
77444: PUSH
77445: LD_INT 4
77447: PUSH
77448: EMPTY
77449: LIST
77450: LIST
77451: LIST
77452: PUSH
77453: LD_VAR 0 1
77457: PUSH
77458: LD_VAR 0 2
77462: PUSH
77463: LD_INT 3
77465: MINUS
77466: PUSH
77467: LD_INT 3
77469: PUSH
77470: EMPTY
77471: LIST
77472: LIST
77473: LIST
77474: PUSH
77475: LD_VAR 0 1
77479: PUSH
77480: LD_INT 4
77482: MINUS
77483: PUSH
77484: LD_VAR 0 2
77488: PUSH
77489: LD_INT 4
77491: MINUS
77492: PUSH
77493: LD_INT 2
77495: PUSH
77496: EMPTY
77497: LIST
77498: LIST
77499: LIST
77500: PUSH
77501: EMPTY
77502: LIST
77503: LIST
77504: LIST
77505: LIST
77506: LIST
77507: ST_TO_ADDR
// end ; 5 :
77508: GO 77648
77510: LD_INT 5
77512: DOUBLE
77513: EQUAL
77514: IFTRUE 77518
77516: GO 77647
77518: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77519: LD_ADDR_VAR 0 5
77523: PUSH
77524: LD_VAR 0 1
77528: PUSH
77529: LD_INT 4
77531: MINUS
77532: PUSH
77533: LD_VAR 0 2
77537: PUSH
77538: LD_INT 1
77540: PUSH
77541: EMPTY
77542: LIST
77543: LIST
77544: LIST
77545: PUSH
77546: LD_VAR 0 1
77550: PUSH
77551: LD_VAR 0 2
77555: PUSH
77556: LD_INT 4
77558: MINUS
77559: PUSH
77560: LD_INT 3
77562: PUSH
77563: EMPTY
77564: LIST
77565: LIST
77566: LIST
77567: PUSH
77568: LD_VAR 0 1
77572: PUSH
77573: LD_INT 4
77575: PLUS
77576: PUSH
77577: LD_VAR 0 2
77581: PUSH
77582: LD_INT 4
77584: PLUS
77585: PUSH
77586: LD_INT 5
77588: PUSH
77589: EMPTY
77590: LIST
77591: LIST
77592: LIST
77593: PUSH
77594: LD_VAR 0 1
77598: PUSH
77599: LD_INT 3
77601: PLUS
77602: PUSH
77603: LD_VAR 0 2
77607: PUSH
77608: LD_INT 4
77610: PUSH
77611: EMPTY
77612: LIST
77613: LIST
77614: LIST
77615: PUSH
77616: LD_VAR 0 1
77620: PUSH
77621: LD_VAR 0 2
77625: PUSH
77626: LD_INT 3
77628: PLUS
77629: PUSH
77630: LD_INT 0
77632: PUSH
77633: EMPTY
77634: LIST
77635: LIST
77636: LIST
77637: PUSH
77638: EMPTY
77639: LIST
77640: LIST
77641: LIST
77642: LIST
77643: LIST
77644: ST_TO_ADDR
// end ; end ;
77645: GO 77648
77647: POP
// result := list ;
77648: LD_ADDR_VAR 0 4
77652: PUSH
77653: LD_VAR 0 5
77657: ST_TO_ADDR
// end ;
77658: LD_VAR 0 4
77662: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77663: LD_INT 0
77665: PPUSH
77666: PPUSH
77667: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77668: LD_VAR 0 1
77672: NOT
77673: IFTRUE 77701
77675: PUSH
77676: LD_VAR 0 2
77680: PUSH
77681: LD_INT 1
77683: PUSH
77684: LD_INT 2
77686: PUSH
77687: LD_INT 3
77689: PUSH
77690: LD_INT 4
77692: PUSH
77693: EMPTY
77694: LIST
77695: LIST
77696: LIST
77697: LIST
77698: IN
77699: NOT
77700: OR
77701: IFFALSE 77705
// exit ;
77703: GO 77788
// tmp := [ ] ;
77705: LD_ADDR_VAR 0 5
77709: PUSH
77710: EMPTY
77711: ST_TO_ADDR
// for i in units do
77712: LD_ADDR_VAR 0 4
77716: PUSH
77717: LD_VAR 0 1
77721: PUSH
77722: FOR_IN
77723: IFFALSE 77757
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77725: LD_ADDR_VAR 0 5
77729: PUSH
77730: LD_VAR 0 5
77734: PPUSH
77735: LD_VAR 0 4
77739: PPUSH
77740: LD_VAR 0 2
77744: PPUSH
77745: CALL_OW 259
77749: PPUSH
77750: CALL 79183 0 2
77754: ST_TO_ADDR
77755: GO 77722
77757: POP
77758: POP
// if not tmp then
77759: LD_VAR 0 5
77763: NOT
77764: IFFALSE 77768
// exit ;
77766: GO 77788
// result := SortListByListDesc ( units , tmp ) ;
77768: LD_ADDR_VAR 0 3
77772: PUSH
77773: LD_VAR 0 1
77777: PPUSH
77778: LD_VAR 0 5
77782: PPUSH
77783: CALL_OW 77
77787: ST_TO_ADDR
// end ;
77788: LD_VAR 0 3
77792: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77793: LD_INT 0
77795: PPUSH
77796: PPUSH
77797: PPUSH
// result := false ;
77798: LD_ADDR_VAR 0 3
77802: PUSH
77803: LD_INT 0
77805: ST_TO_ADDR
// if not building then
77806: LD_VAR 0 2
77810: NOT
77811: IFFALSE 77815
// exit ;
77813: GO 77959
// x := GetX ( building ) ;
77815: LD_ADDR_VAR 0 4
77819: PUSH
77820: LD_VAR 0 2
77824: PPUSH
77825: CALL_OW 250
77829: ST_TO_ADDR
// y := GetY ( building ) ;
77830: LD_ADDR_VAR 0 5
77834: PUSH
77835: LD_VAR 0 2
77839: PPUSH
77840: CALL_OW 251
77844: ST_TO_ADDR
// if not x or not y then
77845: LD_VAR 0 4
77849: NOT
77850: IFTRUE 77859
77852: PUSH
77853: LD_VAR 0 5
77857: NOT
77858: OR
77859: IFFALSE 77863
// exit ;
77861: GO 77959
// if GetTaskList ( unit ) then
77863: LD_VAR 0 1
77867: PPUSH
77868: CALL_OW 437
77872: IFFALSE 77959
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77874: LD_STRING e
77876: PUSH
77877: LD_VAR 0 1
77881: PPUSH
77882: CALL_OW 437
77886: PUSH
77887: LD_INT 1
77889: ARRAY
77890: PUSH
77891: LD_INT 1
77893: ARRAY
77894: EQUAL
77895: IFFALSE 77922
77897: PUSH
77898: LD_VAR 0 4
77902: PUSH
77903: LD_VAR 0 1
77907: PPUSH
77908: CALL_OW 437
77912: PUSH
77913: LD_INT 1
77915: ARRAY
77916: PUSH
77917: LD_INT 2
77919: ARRAY
77920: EQUAL
77921: AND
77922: IFFALSE 77949
77924: PUSH
77925: LD_VAR 0 5
77929: PUSH
77930: LD_VAR 0 1
77934: PPUSH
77935: CALL_OW 437
77939: PUSH
77940: LD_INT 1
77942: ARRAY
77943: PUSH
77944: LD_INT 3
77946: ARRAY
77947: EQUAL
77948: AND
77949: IFFALSE 77959
// result := true end ;
77951: LD_ADDR_VAR 0 3
77955: PUSH
77956: LD_INT 1
77958: ST_TO_ADDR
// end ;
77959: LD_VAR 0 3
77963: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77964: LD_INT 0
77966: PPUSH
// result := false ;
77967: LD_ADDR_VAR 0 4
77971: PUSH
77972: LD_INT 0
77974: ST_TO_ADDR
// if GetTaskList ( unit ) then
77975: LD_VAR 0 1
77979: PPUSH
77980: CALL_OW 437
77984: IFFALSE 78071
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77986: LD_STRING M
77988: PUSH
77989: LD_VAR 0 1
77993: PPUSH
77994: CALL_OW 437
77998: PUSH
77999: LD_INT 1
78001: ARRAY
78002: PUSH
78003: LD_INT 1
78005: ARRAY
78006: EQUAL
78007: IFFALSE 78034
78009: PUSH
78010: LD_VAR 0 2
78014: PUSH
78015: LD_VAR 0 1
78019: PPUSH
78020: CALL_OW 437
78024: PUSH
78025: LD_INT 1
78027: ARRAY
78028: PUSH
78029: LD_INT 2
78031: ARRAY
78032: EQUAL
78033: AND
78034: IFFALSE 78061
78036: PUSH
78037: LD_VAR 0 3
78041: PUSH
78042: LD_VAR 0 1
78046: PPUSH
78047: CALL_OW 437
78051: PUSH
78052: LD_INT 1
78054: ARRAY
78055: PUSH
78056: LD_INT 3
78058: ARRAY
78059: EQUAL
78060: AND
78061: IFFALSE 78071
// result := true ;
78063: LD_ADDR_VAR 0 4
78067: PUSH
78068: LD_INT 1
78070: ST_TO_ADDR
// end ; end ;
78071: LD_VAR 0 4
78075: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78076: LD_INT 0
78078: PPUSH
78079: PPUSH
78080: PPUSH
78081: PPUSH
// if not unit or not area then
78082: LD_VAR 0 1
78086: NOT
78087: IFTRUE 78096
78089: PUSH
78090: LD_VAR 0 2
78094: NOT
78095: OR
78096: IFFALSE 78100
// exit ;
78098: GO 78276
// tmp := AreaToList ( area , i ) ;
78100: LD_ADDR_VAR 0 6
78104: PUSH
78105: LD_VAR 0 2
78109: PPUSH
78110: LD_VAR 0 5
78114: PPUSH
78115: CALL_OW 517
78119: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78120: LD_ADDR_VAR 0 5
78124: PUSH
78125: DOUBLE
78126: LD_INT 1
78128: DEC
78129: ST_TO_ADDR
78130: LD_VAR 0 6
78134: PUSH
78135: LD_INT 1
78137: ARRAY
78138: PUSH
78139: FOR_TO
78140: IFFALSE 78274
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78142: LD_ADDR_VAR 0 7
78146: PUSH
78147: LD_VAR 0 6
78151: PUSH
78152: LD_INT 1
78154: ARRAY
78155: PUSH
78156: LD_VAR 0 5
78160: ARRAY
78161: PUSH
78162: LD_VAR 0 6
78166: PUSH
78167: LD_INT 2
78169: ARRAY
78170: PUSH
78171: LD_VAR 0 5
78175: ARRAY
78176: PUSH
78177: EMPTY
78178: LIST
78179: LIST
78180: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78181: LD_INT 92
78183: PUSH
78184: LD_VAR 0 7
78188: PUSH
78189: LD_INT 1
78191: ARRAY
78192: PUSH
78193: LD_VAR 0 7
78197: PUSH
78198: LD_INT 2
78200: ARRAY
78201: PUSH
78202: LD_INT 2
78204: PUSH
78205: EMPTY
78206: LIST
78207: LIST
78208: LIST
78209: LIST
78210: PPUSH
78211: CALL_OW 69
78215: PUSH
78216: LD_INT 0
78218: EQUAL
78219: IFFALSE 78272
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78221: LD_VAR 0 1
78225: PPUSH
78226: LD_VAR 0 7
78230: PUSH
78231: LD_INT 1
78233: ARRAY
78234: PPUSH
78235: LD_VAR 0 7
78239: PUSH
78240: LD_INT 2
78242: ARRAY
78243: PPUSH
78244: LD_VAR 0 3
78248: PPUSH
78249: CALL_OW 48
// result := IsPlaced ( unit ) ;
78253: LD_ADDR_VAR 0 4
78257: PUSH
78258: LD_VAR 0 1
78262: PPUSH
78263: CALL_OW 305
78267: ST_TO_ADDR
// exit ;
78268: POP
78269: POP
78270: GO 78276
// end ; end ;
78272: GO 78139
78274: POP
78275: POP
// end ;
78276: LD_VAR 0 4
78280: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78281: LD_INT 0
78283: PPUSH
78284: PPUSH
78285: PPUSH
// if not side or side > 8 then
78286: LD_VAR 0 1
78290: NOT
78291: IFTRUE 78303
78293: PUSH
78294: LD_VAR 0 1
78298: PUSH
78299: LD_INT 8
78301: GREATER
78302: OR
78303: IFFALSE 78307
// exit ;
78305: GO 78494
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78307: LD_ADDR_VAR 0 4
78311: PUSH
78312: LD_INT 22
78314: PUSH
78315: LD_VAR 0 1
78319: PUSH
78320: EMPTY
78321: LIST
78322: LIST
78323: PUSH
78324: LD_INT 21
78326: PUSH
78327: LD_INT 3
78329: PUSH
78330: EMPTY
78331: LIST
78332: LIST
78333: PUSH
78334: EMPTY
78335: LIST
78336: LIST
78337: PPUSH
78338: CALL_OW 69
78342: ST_TO_ADDR
// if not tmp then
78343: LD_VAR 0 4
78347: NOT
78348: IFFALSE 78352
// exit ;
78350: GO 78494
// enable_addtolog := true ;
78352: LD_ADDR_OWVAR 81
78356: PUSH
78357: LD_INT 1
78359: ST_TO_ADDR
// AddToLog ( [ ) ;
78360: LD_STRING [
78362: PPUSH
78363: CALL_OW 561
// for i in tmp do
78367: LD_ADDR_VAR 0 3
78371: PUSH
78372: LD_VAR 0 4
78376: PUSH
78377: FOR_IN
78378: IFFALSE 78485
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78380: LD_STRING [
78382: PUSH
78383: LD_VAR 0 3
78387: PPUSH
78388: CALL_OW 266
78392: STR
78393: PUSH
78394: LD_STRING , 
78396: STR
78397: PUSH
78398: LD_VAR 0 3
78402: PPUSH
78403: CALL_OW 250
78407: STR
78408: PUSH
78409: LD_STRING , 
78411: STR
78412: PUSH
78413: LD_VAR 0 3
78417: PPUSH
78418: CALL_OW 251
78422: STR
78423: PUSH
78424: LD_STRING , 
78426: STR
78427: PUSH
78428: LD_VAR 0 3
78432: PPUSH
78433: CALL_OW 254
78437: STR
78438: PUSH
78439: LD_STRING , 
78441: STR
78442: PUSH
78443: LD_VAR 0 3
78447: PPUSH
78448: LD_INT 1
78450: PPUSH
78451: CALL_OW 268
78455: STR
78456: PUSH
78457: LD_STRING , 
78459: STR
78460: PUSH
78461: LD_VAR 0 3
78465: PPUSH
78466: LD_INT 2
78468: PPUSH
78469: CALL_OW 268
78473: STR
78474: PUSH
78475: LD_STRING ],
78477: STR
78478: PPUSH
78479: CALL_OW 561
// end ;
78483: GO 78377
78485: POP
78486: POP
// AddToLog ( ]; ) ;
78487: LD_STRING ];
78489: PPUSH
78490: CALL_OW 561
// end ;
78494: LD_VAR 0 2
78498: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78499: LD_INT 0
78501: PPUSH
78502: PPUSH
78503: PPUSH
78504: PPUSH
78505: PPUSH
// if not area or not rate or not max then
78506: LD_VAR 0 1
78510: NOT
78511: IFTRUE 78520
78513: PUSH
78514: LD_VAR 0 2
78518: NOT
78519: OR
78520: IFTRUE 78529
78522: PUSH
78523: LD_VAR 0 4
78527: NOT
78528: OR
78529: IFFALSE 78533
// exit ;
78531: GO 78722
// while 1 do
78533: LD_INT 1
78535: IFFALSE 78722
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78537: LD_ADDR_VAR 0 9
78541: PUSH
78542: LD_VAR 0 1
78546: PPUSH
78547: LD_INT 1
78549: PPUSH
78550: CALL_OW 287
78554: PUSH
78555: LD_INT 10
78557: MUL
78558: ST_TO_ADDR
// r := rate / 10 ;
78559: LD_ADDR_VAR 0 7
78563: PUSH
78564: LD_VAR 0 2
78568: PUSH
78569: LD_INT 10
78571: DIVREAL
78572: ST_TO_ADDR
// time := 1 1$00 ;
78573: LD_ADDR_VAR 0 8
78577: PUSH
78578: LD_INT 2100
78580: ST_TO_ADDR
// if amount < min then
78581: LD_VAR 0 9
78585: PUSH
78586: LD_VAR 0 3
78590: LESS
78591: IFFALSE 78609
// r := r * 2 else
78593: LD_ADDR_VAR 0 7
78597: PUSH
78598: LD_VAR 0 7
78602: PUSH
78603: LD_INT 2
78605: MUL
78606: ST_TO_ADDR
78607: GO 78635
// if amount > max then
78609: LD_VAR 0 9
78613: PUSH
78614: LD_VAR 0 4
78618: GREATER
78619: IFFALSE 78635
// r := r / 2 ;
78621: LD_ADDR_VAR 0 7
78625: PUSH
78626: LD_VAR 0 7
78630: PUSH
78631: LD_INT 2
78633: DIVREAL
78634: ST_TO_ADDR
// time := time / r ;
78635: LD_ADDR_VAR 0 8
78639: PUSH
78640: LD_VAR 0 8
78644: PUSH
78645: LD_VAR 0 7
78649: DIVREAL
78650: ST_TO_ADDR
// if time < 0 then
78651: LD_VAR 0 8
78655: PUSH
78656: LD_INT 0
78658: LESS
78659: IFFALSE 78676
// time := time * - 1 ;
78661: LD_ADDR_VAR 0 8
78665: PUSH
78666: LD_VAR 0 8
78670: PUSH
78671: LD_INT 1
78673: NEG
78674: MUL
78675: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78676: LD_VAR 0 8
78680: PUSH
78681: LD_INT 35
78683: PPUSH
78684: LD_INT 875
78686: PPUSH
78687: CALL_OW 12
78691: PLUS
78692: PPUSH
78693: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78697: LD_INT 1
78699: PPUSH
78700: LD_INT 5
78702: PPUSH
78703: CALL_OW 12
78707: PPUSH
78708: LD_VAR 0 1
78712: PPUSH
78713: LD_INT 1
78715: PPUSH
78716: CALL_OW 55
// end ;
78720: GO 78533
// end ;
78722: LD_VAR 0 5
78726: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78727: LD_INT 0
78729: PPUSH
78730: PPUSH
78731: PPUSH
78732: PPUSH
78733: PPUSH
78734: PPUSH
78735: PPUSH
78736: PPUSH
// if not turrets or not factories then
78737: LD_VAR 0 1
78741: NOT
78742: IFTRUE 78751
78744: PUSH
78745: LD_VAR 0 2
78749: NOT
78750: OR
78751: IFFALSE 78755
// exit ;
78753: GO 79062
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78755: LD_ADDR_VAR 0 10
78759: PUSH
78760: LD_INT 5
78762: PUSH
78763: LD_INT 6
78765: PUSH
78766: EMPTY
78767: LIST
78768: LIST
78769: PUSH
78770: LD_INT 2
78772: PUSH
78773: LD_INT 4
78775: PUSH
78776: EMPTY
78777: LIST
78778: LIST
78779: PUSH
78780: LD_INT 3
78782: PUSH
78783: LD_INT 5
78785: PUSH
78786: EMPTY
78787: LIST
78788: LIST
78789: PUSH
78790: EMPTY
78791: LIST
78792: LIST
78793: LIST
78794: PUSH
78795: LD_INT 24
78797: PUSH
78798: LD_INT 25
78800: PUSH
78801: EMPTY
78802: LIST
78803: LIST
78804: PUSH
78805: LD_INT 23
78807: PUSH
78808: LD_INT 27
78810: PUSH
78811: EMPTY
78812: LIST
78813: LIST
78814: PUSH
78815: EMPTY
78816: LIST
78817: LIST
78818: PUSH
78819: LD_INT 42
78821: PUSH
78822: LD_INT 43
78824: PUSH
78825: EMPTY
78826: LIST
78827: LIST
78828: PUSH
78829: LD_INT 44
78831: PUSH
78832: LD_INT 46
78834: PUSH
78835: EMPTY
78836: LIST
78837: LIST
78838: PUSH
78839: LD_INT 45
78841: PUSH
78842: LD_INT 47
78844: PUSH
78845: EMPTY
78846: LIST
78847: LIST
78848: PUSH
78849: EMPTY
78850: LIST
78851: LIST
78852: LIST
78853: PUSH
78854: EMPTY
78855: LIST
78856: LIST
78857: LIST
78858: ST_TO_ADDR
// result := [ ] ;
78859: LD_ADDR_VAR 0 3
78863: PUSH
78864: EMPTY
78865: ST_TO_ADDR
// for i in turrets do
78866: LD_ADDR_VAR 0 4
78870: PUSH
78871: LD_VAR 0 1
78875: PUSH
78876: FOR_IN
78877: IFFALSE 79060
// begin nat := GetNation ( i ) ;
78879: LD_ADDR_VAR 0 7
78883: PUSH
78884: LD_VAR 0 4
78888: PPUSH
78889: CALL_OW 248
78893: ST_TO_ADDR
// weapon := 0 ;
78894: LD_ADDR_VAR 0 8
78898: PUSH
78899: LD_INT 0
78901: ST_TO_ADDR
// if not nat then
78902: LD_VAR 0 7
78906: NOT
78907: IFFALSE 78911
// continue ;
78909: GO 78876
// for j in list [ nat ] do
78911: LD_ADDR_VAR 0 5
78915: PUSH
78916: LD_VAR 0 10
78920: PUSH
78921: LD_VAR 0 7
78925: ARRAY
78926: PUSH
78927: FOR_IN
78928: IFFALSE 78969
// if GetBWeapon ( i ) = j [ 1 ] then
78930: LD_VAR 0 4
78934: PPUSH
78935: CALL_OW 269
78939: PUSH
78940: LD_VAR 0 5
78944: PUSH
78945: LD_INT 1
78947: ARRAY
78948: EQUAL
78949: IFFALSE 78967
// begin weapon := j [ 2 ] ;
78951: LD_ADDR_VAR 0 8
78955: PUSH
78956: LD_VAR 0 5
78960: PUSH
78961: LD_INT 2
78963: ARRAY
78964: ST_TO_ADDR
// break ;
78965: GO 78969
// end ;
78967: GO 78927
78969: POP
78970: POP
// if not weapon then
78971: LD_VAR 0 8
78975: NOT
78976: IFFALSE 78980
// continue ;
78978: GO 78876
// for k in factories do
78980: LD_ADDR_VAR 0 6
78984: PUSH
78985: LD_VAR 0 2
78989: PUSH
78990: FOR_IN
78991: IFFALSE 79056
// begin weapons := AvailableWeaponList ( k ) ;
78993: LD_ADDR_VAR 0 9
78997: PUSH
78998: LD_VAR 0 6
79002: PPUSH
79003: CALL_OW 478
79007: ST_TO_ADDR
// if not weapons then
79008: LD_VAR 0 9
79012: NOT
79013: IFFALSE 79017
// continue ;
79015: GO 78990
// if weapon in weapons then
79017: LD_VAR 0 8
79021: PUSH
79022: LD_VAR 0 9
79026: IN
79027: IFFALSE 79054
// begin result := [ i , weapon ] ;
79029: LD_ADDR_VAR 0 3
79033: PUSH
79034: LD_VAR 0 4
79038: PUSH
79039: LD_VAR 0 8
79043: PUSH
79044: EMPTY
79045: LIST
79046: LIST
79047: ST_TO_ADDR
// exit ;
79048: POP
79049: POP
79050: POP
79051: POP
79052: GO 79062
// end ; end ;
79054: GO 78990
79056: POP
79057: POP
// end ;
79058: GO 78876
79060: POP
79061: POP
// end ;
79062: LD_VAR 0 3
79066: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79067: LD_INT 0
79069: PPUSH
// if not side or side > 8 then
79070: LD_VAR 0 3
79074: NOT
79075: IFTRUE 79087
79077: PUSH
79078: LD_VAR 0 3
79082: PUSH
79083: LD_INT 8
79085: GREATER
79086: OR
79087: IFFALSE 79091
// exit ;
79089: GO 79150
// if not range then
79091: LD_VAR 0 4
79095: NOT
79096: IFFALSE 79107
// range := - 12 ;
79098: LD_ADDR_VAR 0 4
79102: PUSH
79103: LD_INT 12
79105: NEG
79106: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79107: LD_VAR 0 1
79111: PPUSH
79112: LD_VAR 0 2
79116: PPUSH
79117: LD_VAR 0 3
79121: PPUSH
79122: LD_VAR 0 4
79126: PPUSH
79127: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79131: LD_VAR 0 1
79135: PPUSH
79136: LD_VAR 0 2
79140: PPUSH
79141: LD_VAR 0 3
79145: PPUSH
79146: CALL_OW 331
// end ;
79150: LD_VAR 0 5
79154: RET
// export function Video ( mode ) ; begin
79155: LD_INT 0
79157: PPUSH
// ingame_video = mode ;
79158: LD_ADDR_OWVAR 52
79162: PUSH
79163: LD_VAR 0 1
79167: ST_TO_ADDR
// interface_hidden = mode ;
79168: LD_ADDR_OWVAR 54
79172: PUSH
79173: LD_VAR 0 1
79177: ST_TO_ADDR
// end ;
79178: LD_VAR 0 2
79182: RET
// export function Join ( array , element ) ; begin
79183: LD_INT 0
79185: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79186: LD_ADDR_VAR 0 3
79190: PUSH
79191: LD_VAR 0 1
79195: PPUSH
79196: LD_VAR 0 1
79200: PUSH
79201: LD_INT 1
79203: PLUS
79204: PPUSH
79205: LD_VAR 0 2
79209: PPUSH
79210: CALL_OW 1
79214: ST_TO_ADDR
// end ;
79215: LD_VAR 0 3
79219: RET
// export function JoinUnion ( array , element ) ; begin
79220: LD_INT 0
79222: PPUSH
// result := array union element ;
79223: LD_ADDR_VAR 0 3
79227: PUSH
79228: LD_VAR 0 1
79232: PUSH
79233: LD_VAR 0 2
79237: UNION
79238: ST_TO_ADDR
// end ;
79239: LD_VAR 0 3
79243: RET
// export function GetBehemoths ( side ) ; begin
79244: LD_INT 0
79246: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79247: LD_ADDR_VAR 0 2
79251: PUSH
79252: LD_INT 22
79254: PUSH
79255: LD_VAR 0 1
79259: PUSH
79260: EMPTY
79261: LIST
79262: LIST
79263: PUSH
79264: LD_INT 31
79266: PUSH
79267: LD_INT 25
79269: PUSH
79270: EMPTY
79271: LIST
79272: LIST
79273: PUSH
79274: EMPTY
79275: LIST
79276: LIST
79277: PPUSH
79278: CALL_OW 69
79282: ST_TO_ADDR
// end ;
79283: LD_VAR 0 2
79287: RET
// export function Shuffle ( array ) ; var i , index ; begin
79288: LD_INT 0
79290: PPUSH
79291: PPUSH
79292: PPUSH
// result := [ ] ;
79293: LD_ADDR_VAR 0 2
79297: PUSH
79298: EMPTY
79299: ST_TO_ADDR
// if not array then
79300: LD_VAR 0 1
79304: NOT
79305: IFFALSE 79309
// exit ;
79307: GO 79408
// Randomize ;
79309: CALL_OW 10
// for i = array downto 1 do
79313: LD_ADDR_VAR 0 3
79317: PUSH
79318: DOUBLE
79319: LD_VAR 0 1
79323: INC
79324: ST_TO_ADDR
79325: LD_INT 1
79327: PUSH
79328: FOR_DOWNTO
79329: IFFALSE 79406
// begin index := rand ( 1 , array ) ;
79331: LD_ADDR_VAR 0 4
79335: PUSH
79336: LD_INT 1
79338: PPUSH
79339: LD_VAR 0 1
79343: PPUSH
79344: CALL_OW 12
79348: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79349: LD_ADDR_VAR 0 2
79353: PUSH
79354: LD_VAR 0 2
79358: PPUSH
79359: LD_VAR 0 2
79363: PUSH
79364: LD_INT 1
79366: PLUS
79367: PPUSH
79368: LD_VAR 0 1
79372: PUSH
79373: LD_VAR 0 4
79377: ARRAY
79378: PPUSH
79379: CALL_OW 2
79383: ST_TO_ADDR
// array := Delete ( array , index ) ;
79384: LD_ADDR_VAR 0 1
79388: PUSH
79389: LD_VAR 0 1
79393: PPUSH
79394: LD_VAR 0 4
79398: PPUSH
79399: CALL_OW 3
79403: ST_TO_ADDR
// end ;
79404: GO 79328
79406: POP
79407: POP
// end ;
79408: LD_VAR 0 2
79412: RET
// export function GetBaseMaterials ( base ) ; begin
79413: LD_INT 0
79415: PPUSH
// result := [ 0 , 0 , 0 ] ;
79416: LD_ADDR_VAR 0 2
79420: PUSH
79421: LD_INT 0
79423: PUSH
79424: LD_INT 0
79426: PUSH
79427: LD_INT 0
79429: PUSH
79430: EMPTY
79431: LIST
79432: LIST
79433: LIST
79434: ST_TO_ADDR
// if not base then
79435: LD_VAR 0 1
79439: NOT
79440: IFFALSE 79444
// exit ;
79442: GO 79493
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79444: LD_ADDR_VAR 0 2
79448: PUSH
79449: LD_VAR 0 1
79453: PPUSH
79454: LD_INT 1
79456: PPUSH
79457: CALL_OW 275
79461: PUSH
79462: LD_VAR 0 1
79466: PPUSH
79467: LD_INT 2
79469: PPUSH
79470: CALL_OW 275
79474: PUSH
79475: LD_VAR 0 1
79479: PPUSH
79480: LD_INT 3
79482: PPUSH
79483: CALL_OW 275
79487: PUSH
79488: EMPTY
79489: LIST
79490: LIST
79491: LIST
79492: ST_TO_ADDR
// end ;
79493: LD_VAR 0 2
79497: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79498: LD_INT 0
79500: PPUSH
79501: PPUSH
// result := array ;
79502: LD_ADDR_VAR 0 3
79506: PUSH
79507: LD_VAR 0 1
79511: ST_TO_ADDR
// if size >= result then
79512: LD_VAR 0 2
79516: PUSH
79517: LD_VAR 0 3
79521: GREATEREQUAL
79522: IFFALSE 79526
// exit ;
79524: GO 79576
// if size then
79526: LD_VAR 0 2
79530: IFFALSE 79576
// for i := array downto size do
79532: LD_ADDR_VAR 0 4
79536: PUSH
79537: DOUBLE
79538: LD_VAR 0 1
79542: INC
79543: ST_TO_ADDR
79544: LD_VAR 0 2
79548: PUSH
79549: FOR_DOWNTO
79550: IFFALSE 79574
// result := Delete ( result , result ) ;
79552: LD_ADDR_VAR 0 3
79556: PUSH
79557: LD_VAR 0 3
79561: PPUSH
79562: LD_VAR 0 3
79566: PPUSH
79567: CALL_OW 3
79571: ST_TO_ADDR
79572: GO 79549
79574: POP
79575: POP
// end ;
79576: LD_VAR 0 3
79580: RET
// export function ComExit ( unit ) ; var tmp ; begin
79581: LD_INT 0
79583: PPUSH
79584: PPUSH
// if not IsInUnit ( unit ) then
79585: LD_VAR 0 1
79589: PPUSH
79590: CALL_OW 310
79594: NOT
79595: IFFALSE 79599
// exit ;
79597: GO 79659
// tmp := IsInUnit ( unit ) ;
79599: LD_ADDR_VAR 0 3
79603: PUSH
79604: LD_VAR 0 1
79608: PPUSH
79609: CALL_OW 310
79613: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79614: LD_VAR 0 3
79618: PPUSH
79619: CALL_OW 247
79623: PUSH
79624: LD_INT 2
79626: EQUAL
79627: IFFALSE 79640
// ComExitVehicle ( unit ) else
79629: LD_VAR 0 1
79633: PPUSH
79634: CALL_OW 121
79638: GO 79649
// ComExitBuilding ( unit ) ;
79640: LD_VAR 0 1
79644: PPUSH
79645: CALL_OW 122
// result := tmp ;
79649: LD_ADDR_VAR 0 2
79653: PUSH
79654: LD_VAR 0 3
79658: ST_TO_ADDR
// end ;
79659: LD_VAR 0 2
79663: RET
// export function ComExitAll ( units ) ; var i ; begin
79664: LD_INT 0
79666: PPUSH
79667: PPUSH
// if not units then
79668: LD_VAR 0 1
79672: NOT
79673: IFFALSE 79677
// exit ;
79675: GO 79703
// for i in units do
79677: LD_ADDR_VAR 0 3
79681: PUSH
79682: LD_VAR 0 1
79686: PUSH
79687: FOR_IN
79688: IFFALSE 79701
// ComExit ( i ) ;
79690: LD_VAR 0 3
79694: PPUSH
79695: CALL 79581 0 1
79699: GO 79687
79701: POP
79702: POP
// end ;
79703: LD_VAR 0 2
79707: RET
// export function ResetHc ; begin
79708: LD_INT 0
79710: PPUSH
// InitHc ;
79711: CALL_OW 19
// hc_importance := 0 ;
79715: LD_ADDR_OWVAR 32
79719: PUSH
79720: LD_INT 0
79722: ST_TO_ADDR
// end ;
79723: LD_VAR 0 1
79727: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79728: LD_INT 0
79730: PPUSH
79731: PPUSH
79732: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79733: LD_ADDR_VAR 0 6
79737: PUSH
79738: LD_VAR 0 1
79742: PUSH
79743: LD_VAR 0 3
79747: PLUS
79748: PUSH
79749: LD_INT 2
79751: DIV
79752: ST_TO_ADDR
// if _x < 0 then
79753: LD_VAR 0 6
79757: PUSH
79758: LD_INT 0
79760: LESS
79761: IFFALSE 79778
// _x := _x * - 1 ;
79763: LD_ADDR_VAR 0 6
79767: PUSH
79768: LD_VAR 0 6
79772: PUSH
79773: LD_INT 1
79775: NEG
79776: MUL
79777: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79778: LD_ADDR_VAR 0 7
79782: PUSH
79783: LD_VAR 0 2
79787: PUSH
79788: LD_VAR 0 4
79792: PLUS
79793: PUSH
79794: LD_INT 2
79796: DIV
79797: ST_TO_ADDR
// if _y < 0 then
79798: LD_VAR 0 7
79802: PUSH
79803: LD_INT 0
79805: LESS
79806: IFFALSE 79823
// _y := _y * - 1 ;
79808: LD_ADDR_VAR 0 7
79812: PUSH
79813: LD_VAR 0 7
79817: PUSH
79818: LD_INT 1
79820: NEG
79821: MUL
79822: ST_TO_ADDR
// result := [ _x , _y ] ;
79823: LD_ADDR_VAR 0 5
79827: PUSH
79828: LD_VAR 0 6
79832: PUSH
79833: LD_VAR 0 7
79837: PUSH
79838: EMPTY
79839: LIST
79840: LIST
79841: ST_TO_ADDR
// end ;
79842: LD_VAR 0 5
79846: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79847: LD_INT 0
79849: PPUSH
79850: PPUSH
79851: PPUSH
79852: PPUSH
// task := GetTaskList ( unit ) ;
79853: LD_ADDR_VAR 0 7
79857: PUSH
79858: LD_VAR 0 1
79862: PPUSH
79863: CALL_OW 437
79867: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79868: LD_VAR 0 7
79872: NOT
79873: IFFALSE 79892
79875: PUSH
79876: LD_VAR 0 1
79880: PPUSH
79881: LD_VAR 0 2
79885: PPUSH
79886: CALL_OW 308
79890: NOT
79891: AND
79892: IFFALSE 79896
// exit ;
79894: GO 80014
// if IsInArea ( unit , area ) then
79896: LD_VAR 0 1
79900: PPUSH
79901: LD_VAR 0 2
79905: PPUSH
79906: CALL_OW 308
79910: IFFALSE 79928
// begin ComMoveToArea ( unit , goAway ) ;
79912: LD_VAR 0 1
79916: PPUSH
79917: LD_VAR 0 3
79921: PPUSH
79922: CALL_OW 113
// exit ;
79926: GO 80014
// end ; if task [ 1 ] [ 1 ] <> M then
79928: LD_VAR 0 7
79932: PUSH
79933: LD_INT 1
79935: ARRAY
79936: PUSH
79937: LD_INT 1
79939: ARRAY
79940: PUSH
79941: LD_STRING M
79943: NONEQUAL
79944: IFFALSE 79948
// exit ;
79946: GO 80014
// x := task [ 1 ] [ 2 ] ;
79948: LD_ADDR_VAR 0 5
79952: PUSH
79953: LD_VAR 0 7
79957: PUSH
79958: LD_INT 1
79960: ARRAY
79961: PUSH
79962: LD_INT 2
79964: ARRAY
79965: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79966: LD_ADDR_VAR 0 6
79970: PUSH
79971: LD_VAR 0 7
79975: PUSH
79976: LD_INT 1
79978: ARRAY
79979: PUSH
79980: LD_INT 3
79982: ARRAY
79983: ST_TO_ADDR
// if InArea ( x , y , area ) then
79984: LD_VAR 0 5
79988: PPUSH
79989: LD_VAR 0 6
79993: PPUSH
79994: LD_VAR 0 2
79998: PPUSH
79999: CALL_OW 309
80003: IFFALSE 80014
// ComStop ( unit ) ;
80005: LD_VAR 0 1
80009: PPUSH
80010: CALL_OW 141
// end ;
80014: LD_VAR 0 4
80018: RET
// export function Abs ( value ) ; begin
80019: LD_INT 0
80021: PPUSH
// result := value ;
80022: LD_ADDR_VAR 0 2
80026: PUSH
80027: LD_VAR 0 1
80031: ST_TO_ADDR
// if value < 0 then
80032: LD_VAR 0 1
80036: PUSH
80037: LD_INT 0
80039: LESS
80040: IFFALSE 80057
// result := value * - 1 ;
80042: LD_ADDR_VAR 0 2
80046: PUSH
80047: LD_VAR 0 1
80051: PUSH
80052: LD_INT 1
80054: NEG
80055: MUL
80056: ST_TO_ADDR
// end ;
80057: LD_VAR 0 2
80061: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80062: LD_INT 0
80064: PPUSH
80065: PPUSH
80066: PPUSH
80067: PPUSH
80068: PPUSH
80069: PPUSH
80070: PPUSH
80071: PPUSH
// if not unit or not building then
80072: LD_VAR 0 1
80076: NOT
80077: IFTRUE 80086
80079: PUSH
80080: LD_VAR 0 2
80084: NOT
80085: OR
80086: IFFALSE 80090
// exit ;
80088: GO 80318
// x := GetX ( building ) ;
80090: LD_ADDR_VAR 0 4
80094: PUSH
80095: LD_VAR 0 2
80099: PPUSH
80100: CALL_OW 250
80104: ST_TO_ADDR
// y := GetY ( building ) ;
80105: LD_ADDR_VAR 0 6
80109: PUSH
80110: LD_VAR 0 2
80114: PPUSH
80115: CALL_OW 251
80119: ST_TO_ADDR
// d := GetDir ( building ) ;
80120: LD_ADDR_VAR 0 8
80124: PUSH
80125: LD_VAR 0 2
80129: PPUSH
80130: CALL_OW 254
80134: ST_TO_ADDR
// r := 4 ;
80135: LD_ADDR_VAR 0 9
80139: PUSH
80140: LD_INT 4
80142: ST_TO_ADDR
// for i := 1 to 5 do
80143: LD_ADDR_VAR 0 10
80147: PUSH
80148: DOUBLE
80149: LD_INT 1
80151: DEC
80152: ST_TO_ADDR
80153: LD_INT 5
80155: PUSH
80156: FOR_TO
80157: IFFALSE 80316
// begin _x := ShiftX ( x , d , r + i ) ;
80159: LD_ADDR_VAR 0 5
80163: PUSH
80164: LD_VAR 0 4
80168: PPUSH
80169: LD_VAR 0 8
80173: PPUSH
80174: LD_VAR 0 9
80178: PUSH
80179: LD_VAR 0 10
80183: PLUS
80184: PPUSH
80185: CALL_OW 272
80189: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80190: LD_ADDR_VAR 0 7
80194: PUSH
80195: LD_VAR 0 6
80199: PPUSH
80200: LD_VAR 0 8
80204: PPUSH
80205: LD_VAR 0 9
80209: PUSH
80210: LD_VAR 0 10
80214: PLUS
80215: PPUSH
80216: CALL_OW 273
80220: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80221: LD_VAR 0 5
80225: PPUSH
80226: LD_VAR 0 7
80230: PPUSH
80231: CALL_OW 488
80235: IFFALSE 80270
80237: PUSH
80238: LD_VAR 0 5
80242: PPUSH
80243: LD_VAR 0 7
80247: PPUSH
80248: CALL_OW 428
80252: PPUSH
80253: CALL_OW 247
80257: PUSH
80258: LD_INT 3
80260: PUSH
80261: LD_INT 2
80263: PUSH
80264: EMPTY
80265: LIST
80266: LIST
80267: IN
80268: NOT
80269: AND
80270: IFFALSE 80314
// begin ComMoveXY ( unit , _x , _y ) ;
80272: LD_VAR 0 1
80276: PPUSH
80277: LD_VAR 0 5
80281: PPUSH
80282: LD_VAR 0 7
80286: PPUSH
80287: CALL_OW 111
// result := [ _x , _y ] ;
80291: LD_ADDR_VAR 0 3
80295: PUSH
80296: LD_VAR 0 5
80300: PUSH
80301: LD_VAR 0 7
80305: PUSH
80306: EMPTY
80307: LIST
80308: LIST
80309: ST_TO_ADDR
// exit ;
80310: POP
80311: POP
80312: GO 80318
// end ; end ;
80314: GO 80156
80316: POP
80317: POP
// end ;
80318: LD_VAR 0 3
80322: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80323: LD_INT 0
80325: PPUSH
80326: PPUSH
80327: PPUSH
// result := 0 ;
80328: LD_ADDR_VAR 0 3
80332: PUSH
80333: LD_INT 0
80335: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80336: LD_VAR 0 1
80340: PUSH
80341: LD_INT 0
80343: LESS
80344: IFTRUE 80356
80346: PUSH
80347: LD_VAR 0 1
80351: PUSH
80352: LD_INT 8
80354: GREATER
80355: OR
80356: IFTRUE 80368
80358: PUSH
80359: LD_VAR 0 2
80363: PUSH
80364: LD_INT 0
80366: LESS
80367: OR
80368: IFTRUE 80380
80370: PUSH
80371: LD_VAR 0 2
80375: PUSH
80376: LD_INT 8
80378: GREATER
80379: OR
80380: IFFALSE 80384
// exit ;
80382: GO 80459
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80384: LD_ADDR_VAR 0 4
80388: PUSH
80389: LD_INT 22
80391: PUSH
80392: LD_VAR 0 2
80396: PUSH
80397: EMPTY
80398: LIST
80399: LIST
80400: PPUSH
80401: CALL_OW 69
80405: PUSH
80406: FOR_IN
80407: IFFALSE 80457
// begin un := UnitShoot ( i ) ;
80409: LD_ADDR_VAR 0 5
80413: PUSH
80414: LD_VAR 0 4
80418: PPUSH
80419: CALL_OW 504
80423: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80424: LD_VAR 0 5
80428: PPUSH
80429: CALL_OW 255
80433: PUSH
80434: LD_VAR 0 1
80438: EQUAL
80439: IFFALSE 80455
// begin result := un ;
80441: LD_ADDR_VAR 0 3
80445: PUSH
80446: LD_VAR 0 5
80450: ST_TO_ADDR
// exit ;
80451: POP
80452: POP
80453: GO 80459
// end ; end ;
80455: GO 80406
80457: POP
80458: POP
// end ;
80459: LD_VAR 0 3
80463: RET
// export function GetCargoBay ( units ) ; begin
80464: LD_INT 0
80466: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80467: LD_ADDR_VAR 0 2
80471: PUSH
80472: LD_VAR 0 1
80476: PPUSH
80477: LD_INT 2
80479: PUSH
80480: LD_INT 34
80482: PUSH
80483: LD_INT 12
80485: PUSH
80486: EMPTY
80487: LIST
80488: LIST
80489: PUSH
80490: LD_INT 34
80492: PUSH
80493: LD_INT 51
80495: PUSH
80496: EMPTY
80497: LIST
80498: LIST
80499: PUSH
80500: LD_INT 34
80502: PUSH
80503: LD_INT 32
80505: PUSH
80506: EMPTY
80507: LIST
80508: LIST
80509: PUSH
80510: LD_INT 34
80512: PUSH
80513: LD_INT 89
80515: PUSH
80516: EMPTY
80517: LIST
80518: LIST
80519: PUSH
80520: EMPTY
80521: LIST
80522: LIST
80523: LIST
80524: LIST
80525: LIST
80526: PPUSH
80527: CALL_OW 72
80531: ST_TO_ADDR
// end ;
80532: LD_VAR 0 2
80536: RET
// export function Negate ( value ) ; begin
80537: LD_INT 0
80539: PPUSH
// result := not value ;
80540: LD_ADDR_VAR 0 2
80544: PUSH
80545: LD_VAR 0 1
80549: NOT
80550: ST_TO_ADDR
// end ;
80551: LD_VAR 0 2
80555: RET
// export function Inc ( value ) ; begin
80556: LD_INT 0
80558: PPUSH
// result := value + 1 ;
80559: LD_ADDR_VAR 0 2
80563: PUSH
80564: LD_VAR 0 1
80568: PUSH
80569: LD_INT 1
80571: PLUS
80572: ST_TO_ADDR
// end ;
80573: LD_VAR 0 2
80577: RET
// export function Dec ( value ) ; begin
80578: LD_INT 0
80580: PPUSH
// result := value - 1 ;
80581: LD_ADDR_VAR 0 2
80585: PUSH
80586: LD_VAR 0 1
80590: PUSH
80591: LD_INT 1
80593: MINUS
80594: ST_TO_ADDR
// end ;
80595: LD_VAR 0 2
80599: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80600: LD_INT 0
80602: PPUSH
80603: PPUSH
80604: PPUSH
80605: PPUSH
80606: PPUSH
80607: PPUSH
80608: PPUSH
80609: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80610: LD_VAR 0 1
80614: PPUSH
80615: LD_VAR 0 2
80619: PPUSH
80620: CALL_OW 488
80624: NOT
80625: IFTRUE 80644
80627: PUSH
80628: LD_VAR 0 3
80632: PPUSH
80633: LD_VAR 0 4
80637: PPUSH
80638: CALL_OW 488
80642: NOT
80643: OR
80644: IFFALSE 80657
// begin result := - 1 ;
80646: LD_ADDR_VAR 0 5
80650: PUSH
80651: LD_INT 1
80653: NEG
80654: ST_TO_ADDR
// exit ;
80655: GO 80892
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80657: LD_ADDR_VAR 0 12
80661: PUSH
80662: LD_VAR 0 1
80666: PPUSH
80667: LD_VAR 0 2
80671: PPUSH
80672: LD_VAR 0 3
80676: PPUSH
80677: LD_VAR 0 4
80681: PPUSH
80682: CALL 79728 0 4
80686: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80687: LD_ADDR_VAR 0 11
80691: PUSH
80692: LD_VAR 0 1
80696: PPUSH
80697: LD_VAR 0 2
80701: PPUSH
80702: LD_VAR 0 12
80706: PUSH
80707: LD_INT 1
80709: ARRAY
80710: PPUSH
80711: LD_VAR 0 12
80715: PUSH
80716: LD_INT 2
80718: ARRAY
80719: PPUSH
80720: CALL_OW 298
80724: ST_TO_ADDR
// distance := 9999 ;
80725: LD_ADDR_VAR 0 10
80729: PUSH
80730: LD_INT 9999
80732: ST_TO_ADDR
// for i := 0 to 5 do
80733: LD_ADDR_VAR 0 6
80737: PUSH
80738: DOUBLE
80739: LD_INT 0
80741: DEC
80742: ST_TO_ADDR
80743: LD_INT 5
80745: PUSH
80746: FOR_TO
80747: IFFALSE 80890
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80749: LD_ADDR_VAR 0 7
80753: PUSH
80754: LD_VAR 0 1
80758: PPUSH
80759: LD_VAR 0 6
80763: PPUSH
80764: LD_VAR 0 11
80768: PPUSH
80769: CALL_OW 272
80773: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80774: LD_ADDR_VAR 0 8
80778: PUSH
80779: LD_VAR 0 2
80783: PPUSH
80784: LD_VAR 0 6
80788: PPUSH
80789: LD_VAR 0 11
80793: PPUSH
80794: CALL_OW 273
80798: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80799: LD_VAR 0 7
80803: PPUSH
80804: LD_VAR 0 8
80808: PPUSH
80809: CALL_OW 488
80813: NOT
80814: IFFALSE 80818
// continue ;
80816: GO 80746
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80818: LD_ADDR_VAR 0 9
80822: PUSH
80823: LD_VAR 0 12
80827: PUSH
80828: LD_INT 1
80830: ARRAY
80831: PPUSH
80832: LD_VAR 0 12
80836: PUSH
80837: LD_INT 2
80839: ARRAY
80840: PPUSH
80841: LD_VAR 0 7
80845: PPUSH
80846: LD_VAR 0 8
80850: PPUSH
80851: CALL_OW 298
80855: ST_TO_ADDR
// if tmp < distance then
80856: LD_VAR 0 9
80860: PUSH
80861: LD_VAR 0 10
80865: LESS
80866: IFFALSE 80888
// begin result := i ;
80868: LD_ADDR_VAR 0 5
80872: PUSH
80873: LD_VAR 0 6
80877: ST_TO_ADDR
// distance := tmp ;
80878: LD_ADDR_VAR 0 10
80882: PUSH
80883: LD_VAR 0 9
80887: ST_TO_ADDR
// end ; end ;
80888: GO 80746
80890: POP
80891: POP
// end ;
80892: LD_VAR 0 5
80896: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80897: LD_INT 0
80899: PPUSH
80900: PPUSH
// if not driver or not IsInUnit ( driver ) then
80901: LD_VAR 0 1
80905: NOT
80906: IFTRUE 80920
80908: PUSH
80909: LD_VAR 0 1
80913: PPUSH
80914: CALL_OW 310
80918: NOT
80919: OR
80920: IFFALSE 80924
// exit ;
80922: GO 81014
// vehicle := IsInUnit ( driver ) ;
80924: LD_ADDR_VAR 0 3
80928: PUSH
80929: LD_VAR 0 1
80933: PPUSH
80934: CALL_OW 310
80938: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80939: LD_VAR 0 1
80943: PPUSH
80944: LD_STRING \
80946: PUSH
80947: LD_INT 0
80949: PUSH
80950: LD_INT 0
80952: PUSH
80953: LD_INT 0
80955: PUSH
80956: LD_INT 0
80958: PUSH
80959: LD_INT 0
80961: PUSH
80962: LD_INT 0
80964: PUSH
80965: EMPTY
80966: LIST
80967: LIST
80968: LIST
80969: LIST
80970: LIST
80971: LIST
80972: LIST
80973: PUSH
80974: LD_STRING E
80976: PUSH
80977: LD_INT 0
80979: PUSH
80980: LD_INT 0
80982: PUSH
80983: LD_VAR 0 3
80987: PUSH
80988: LD_INT 0
80990: PUSH
80991: LD_INT 0
80993: PUSH
80994: LD_INT 0
80996: PUSH
80997: EMPTY
80998: LIST
80999: LIST
81000: LIST
81001: LIST
81002: LIST
81003: LIST
81004: LIST
81005: PUSH
81006: EMPTY
81007: LIST
81008: LIST
81009: PPUSH
81010: CALL_OW 446
// end ;
81014: LD_VAR 0 2
81018: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81019: LD_INT 0
81021: PPUSH
81022: PPUSH
// if not driver or not IsInUnit ( driver ) then
81023: LD_VAR 0 1
81027: NOT
81028: IFTRUE 81042
81030: PUSH
81031: LD_VAR 0 1
81035: PPUSH
81036: CALL_OW 310
81040: NOT
81041: OR
81042: IFFALSE 81046
// exit ;
81044: GO 81136
// vehicle := IsInUnit ( driver ) ;
81046: LD_ADDR_VAR 0 3
81050: PUSH
81051: LD_VAR 0 1
81055: PPUSH
81056: CALL_OW 310
81060: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81061: LD_VAR 0 1
81065: PPUSH
81066: LD_STRING \
81068: PUSH
81069: LD_INT 0
81071: PUSH
81072: LD_INT 0
81074: PUSH
81075: LD_INT 0
81077: PUSH
81078: LD_INT 0
81080: PUSH
81081: LD_INT 0
81083: PUSH
81084: LD_INT 0
81086: PUSH
81087: EMPTY
81088: LIST
81089: LIST
81090: LIST
81091: LIST
81092: LIST
81093: LIST
81094: LIST
81095: PUSH
81096: LD_STRING E
81098: PUSH
81099: LD_INT 0
81101: PUSH
81102: LD_INT 0
81104: PUSH
81105: LD_VAR 0 3
81109: PUSH
81110: LD_INT 0
81112: PUSH
81113: LD_INT 0
81115: PUSH
81116: LD_INT 0
81118: PUSH
81119: EMPTY
81120: LIST
81121: LIST
81122: LIST
81123: LIST
81124: LIST
81125: LIST
81126: LIST
81127: PUSH
81128: EMPTY
81129: LIST
81130: LIST
81131: PPUSH
81132: CALL_OW 447
// end ;
81136: LD_VAR 0 2
81140: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81141: LD_INT 0
81143: PPUSH
81144: PPUSH
81145: PPUSH
// tmp := [ ] ;
81146: LD_ADDR_VAR 0 5
81150: PUSH
81151: EMPTY
81152: ST_TO_ADDR
// for i in units do
81153: LD_ADDR_VAR 0 4
81157: PUSH
81158: LD_VAR 0 1
81162: PUSH
81163: FOR_IN
81164: IFFALSE 81202
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81166: LD_ADDR_VAR 0 5
81170: PUSH
81171: LD_VAR 0 5
81175: PPUSH
81176: LD_VAR 0 5
81180: PUSH
81181: LD_INT 1
81183: PLUS
81184: PPUSH
81185: LD_VAR 0 4
81189: PPUSH
81190: CALL_OW 256
81194: PPUSH
81195: CALL_OW 2
81199: ST_TO_ADDR
81200: GO 81163
81202: POP
81203: POP
// if not tmp then
81204: LD_VAR 0 5
81208: NOT
81209: IFFALSE 81213
// exit ;
81211: GO 81261
// if asc then
81213: LD_VAR 0 2
81217: IFFALSE 81241
// result := SortListByListAsc ( units , tmp ) else
81219: LD_ADDR_VAR 0 3
81223: PUSH
81224: LD_VAR 0 1
81228: PPUSH
81229: LD_VAR 0 5
81233: PPUSH
81234: CALL_OW 76
81238: ST_TO_ADDR
81239: GO 81261
// result := SortListByListDesc ( units , tmp ) ;
81241: LD_ADDR_VAR 0 3
81245: PUSH
81246: LD_VAR 0 1
81250: PPUSH
81251: LD_VAR 0 5
81255: PPUSH
81256: CALL_OW 77
81260: ST_TO_ADDR
// end ;
81261: LD_VAR 0 3
81265: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81266: LD_INT 0
81268: PPUSH
81269: PPUSH
// task := GetTaskList ( mech ) ;
81270: LD_ADDR_VAR 0 4
81274: PUSH
81275: LD_VAR 0 1
81279: PPUSH
81280: CALL_OW 437
81284: ST_TO_ADDR
// if not task then
81285: LD_VAR 0 4
81289: NOT
81290: IFFALSE 81294
// exit ;
81292: GO 81338
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81294: LD_ADDR_VAR 0 3
81298: PUSH
81299: LD_VAR 0 4
81303: PUSH
81304: LD_INT 1
81306: ARRAY
81307: PUSH
81308: LD_INT 1
81310: ARRAY
81311: PUSH
81312: LD_STRING r
81314: EQUAL
81315: IFFALSE 81337
81317: PUSH
81318: LD_VAR 0 4
81322: PUSH
81323: LD_INT 1
81325: ARRAY
81326: PUSH
81327: LD_INT 4
81329: ARRAY
81330: PUSH
81331: LD_VAR 0 2
81335: EQUAL
81336: AND
81337: ST_TO_ADDR
// end ;
81338: LD_VAR 0 3
81342: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81343: LD_INT 0
81345: PPUSH
// SetDir ( unit , d ) ;
81346: LD_VAR 0 1
81350: PPUSH
81351: LD_VAR 0 4
81355: PPUSH
81356: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
81360: LD_ADDR_VAR 0 6
81364: PUSH
81365: LD_VAR 0 1
81369: PPUSH
81370: LD_VAR 0 2
81374: PPUSH
81375: LD_VAR 0 3
81379: PPUSH
81380: LD_VAR 0 5
81384: PPUSH
81385: CALL_OW 48
81389: ST_TO_ADDR
// end ;
81390: LD_VAR 0 6
81394: RET
// export function ToNaturalNumber ( number ) ; begin
81395: LD_INT 0
81397: PPUSH
// result := number div 1 ;
81398: LD_ADDR_VAR 0 2
81402: PUSH
81403: LD_VAR 0 1
81407: PUSH
81408: LD_INT 1
81410: DIV
81411: ST_TO_ADDR
// if number < 0 then
81412: LD_VAR 0 1
81416: PUSH
81417: LD_INT 0
81419: LESS
81420: IFFALSE 81430
// result := 0 ;
81422: LD_ADDR_VAR 0 2
81426: PUSH
81427: LD_INT 0
81429: ST_TO_ADDR
// end ;
81430: LD_VAR 0 2
81434: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
81435: LD_INT 0
81437: PPUSH
81438: PPUSH
81439: PPUSH
// if not buildings then
81440: LD_VAR 0 1
81444: NOT
81445: IFFALSE 81449
// exit ;
81447: GO 81564
// tmp := [ ] ;
81449: LD_ADDR_VAR 0 5
81453: PUSH
81454: EMPTY
81455: ST_TO_ADDR
// for b in buildings do
81456: LD_ADDR_VAR 0 4
81460: PUSH
81461: LD_VAR 0 1
81465: PUSH
81466: FOR_IN
81467: IFFALSE 81505
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
81469: LD_ADDR_VAR 0 5
81473: PUSH
81474: LD_VAR 0 5
81478: PPUSH
81479: LD_VAR 0 5
81483: PUSH
81484: LD_INT 1
81486: PLUS
81487: PPUSH
81488: LD_VAR 0 4
81492: PPUSH
81493: CALL_OW 266
81497: PPUSH
81498: CALL_OW 1
81502: ST_TO_ADDR
81503: GO 81466
81505: POP
81506: POP
// if not tmp then
81507: LD_VAR 0 5
81511: NOT
81512: IFFALSE 81516
// exit ;
81514: GO 81564
// if asc then
81516: LD_VAR 0 2
81520: IFFALSE 81544
// result := SortListByListAsc ( buildings , tmp ) else
81522: LD_ADDR_VAR 0 3
81526: PUSH
81527: LD_VAR 0 1
81531: PPUSH
81532: LD_VAR 0 5
81536: PPUSH
81537: CALL_OW 76
81541: ST_TO_ADDR
81542: GO 81564
// result := SortListByListDesc ( buildings , tmp ) ;
81544: LD_ADDR_VAR 0 3
81548: PUSH
81549: LD_VAR 0 1
81553: PPUSH
81554: LD_VAR 0 5
81558: PPUSH
81559: CALL_OW 77
81563: ST_TO_ADDR
// end ;
81564: LD_VAR 0 3
81568: RET
// export function SortByClass ( units , class ) ; var un ; begin
81569: LD_INT 0
81571: PPUSH
81572: PPUSH
// if not units or not class then
81573: LD_VAR 0 1
81577: NOT
81578: IFTRUE 81587
81580: PUSH
81581: LD_VAR 0 2
81585: NOT
81586: OR
81587: IFFALSE 81591
// exit ;
81589: GO 81686
// result := [ ] ;
81591: LD_ADDR_VAR 0 3
81595: PUSH
81596: EMPTY
81597: ST_TO_ADDR
// for un in units do
81598: LD_ADDR_VAR 0 4
81602: PUSH
81603: LD_VAR 0 1
81607: PUSH
81608: FOR_IN
81609: IFFALSE 81684
// if GetClass ( un ) = class then
81611: LD_VAR 0 4
81615: PPUSH
81616: CALL_OW 257
81620: PUSH
81621: LD_VAR 0 2
81625: EQUAL
81626: IFFALSE 81653
// result := Insert ( result , 1 , un ) else
81628: LD_ADDR_VAR 0 3
81632: PUSH
81633: LD_VAR 0 3
81637: PPUSH
81638: LD_INT 1
81640: PPUSH
81641: LD_VAR 0 4
81645: PPUSH
81646: CALL_OW 2
81650: ST_TO_ADDR
81651: GO 81682
// result := Replace ( result , result + 1 , un ) ;
81653: LD_ADDR_VAR 0 3
81657: PUSH
81658: LD_VAR 0 3
81662: PPUSH
81663: LD_VAR 0 3
81667: PUSH
81668: LD_INT 1
81670: PLUS
81671: PPUSH
81672: LD_VAR 0 4
81676: PPUSH
81677: CALL_OW 1
81681: ST_TO_ADDR
81682: GO 81608
81684: POP
81685: POP
// end ;
81686: LD_VAR 0 3
81690: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81691: LD_INT 0
81693: PPUSH
81694: PPUSH
81695: PPUSH
81696: PPUSH
81697: PPUSH
81698: PPUSH
81699: PPUSH
// result := [ ] ;
81700: LD_ADDR_VAR 0 4
81704: PUSH
81705: EMPTY
81706: ST_TO_ADDR
// if x - r < 0 then
81707: LD_VAR 0 1
81711: PUSH
81712: LD_VAR 0 3
81716: MINUS
81717: PUSH
81718: LD_INT 0
81720: LESS
81721: IFFALSE 81733
// min_x := 0 else
81723: LD_ADDR_VAR 0 8
81727: PUSH
81728: LD_INT 0
81730: ST_TO_ADDR
81731: GO 81749
// min_x := x - r ;
81733: LD_ADDR_VAR 0 8
81737: PUSH
81738: LD_VAR 0 1
81742: PUSH
81743: LD_VAR 0 3
81747: MINUS
81748: ST_TO_ADDR
// if y - r < 0 then
81749: LD_VAR 0 2
81753: PUSH
81754: LD_VAR 0 3
81758: MINUS
81759: PUSH
81760: LD_INT 0
81762: LESS
81763: IFFALSE 81775
// min_y := 0 else
81765: LD_ADDR_VAR 0 7
81769: PUSH
81770: LD_INT 0
81772: ST_TO_ADDR
81773: GO 81791
// min_y := y - r ;
81775: LD_ADDR_VAR 0 7
81779: PUSH
81780: LD_VAR 0 2
81784: PUSH
81785: LD_VAR 0 3
81789: MINUS
81790: ST_TO_ADDR
// max_x := x + r ;
81791: LD_ADDR_VAR 0 9
81795: PUSH
81796: LD_VAR 0 1
81800: PUSH
81801: LD_VAR 0 3
81805: PLUS
81806: ST_TO_ADDR
// max_y := y + r ;
81807: LD_ADDR_VAR 0 10
81811: PUSH
81812: LD_VAR 0 2
81816: PUSH
81817: LD_VAR 0 3
81821: PLUS
81822: ST_TO_ADDR
// for _x = min_x to max_x do
81823: LD_ADDR_VAR 0 5
81827: PUSH
81828: DOUBLE
81829: LD_VAR 0 8
81833: DEC
81834: ST_TO_ADDR
81835: LD_VAR 0 9
81839: PUSH
81840: FOR_TO
81841: IFFALSE 81942
// for _y = min_y to max_y do
81843: LD_ADDR_VAR 0 6
81847: PUSH
81848: DOUBLE
81849: LD_VAR 0 7
81853: DEC
81854: ST_TO_ADDR
81855: LD_VAR 0 10
81859: PUSH
81860: FOR_TO
81861: IFFALSE 81938
// begin if not ValidHex ( _x , _y ) then
81863: LD_VAR 0 5
81867: PPUSH
81868: LD_VAR 0 6
81872: PPUSH
81873: CALL_OW 488
81877: NOT
81878: IFFALSE 81882
// continue ;
81880: GO 81860
// if GetResourceTypeXY ( _x , _y ) then
81882: LD_VAR 0 5
81886: PPUSH
81887: LD_VAR 0 6
81891: PPUSH
81892: CALL_OW 283
81896: IFFALSE 81936
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81898: LD_ADDR_VAR 0 4
81902: PUSH
81903: LD_VAR 0 4
81907: PPUSH
81908: LD_VAR 0 4
81912: PUSH
81913: LD_INT 1
81915: PLUS
81916: PPUSH
81917: LD_VAR 0 5
81921: PUSH
81922: LD_VAR 0 6
81926: PUSH
81927: EMPTY
81928: LIST
81929: LIST
81930: PPUSH
81931: CALL_OW 1
81935: ST_TO_ADDR
// end ;
81936: GO 81860
81938: POP
81939: POP
81940: GO 81840
81942: POP
81943: POP
// end ;
81944: LD_VAR 0 4
81948: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81949: LD_INT 0
81951: PPUSH
81952: PPUSH
81953: PPUSH
81954: PPUSH
81955: PPUSH
81956: PPUSH
81957: PPUSH
81958: PPUSH
// if not units then
81959: LD_VAR 0 1
81963: NOT
81964: IFFALSE 81968
// exit ;
81966: GO 82500
// result := UnitFilter ( units , [ f_ok ] ) ;
81968: LD_ADDR_VAR 0 3
81972: PUSH
81973: LD_VAR 0 1
81977: PPUSH
81978: LD_INT 50
81980: PUSH
81981: EMPTY
81982: LIST
81983: PPUSH
81984: CALL_OW 72
81988: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81989: LD_ADDR_VAR 0 8
81993: PUSH
81994: LD_VAR 0 1
81998: PUSH
81999: LD_INT 1
82001: ARRAY
82002: PPUSH
82003: CALL_OW 255
82007: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
82008: LD_ADDR_VAR 0 10
82012: PUSH
82013: LD_INT 29
82015: PUSH
82016: LD_INT 91
82018: PUSH
82019: LD_INT 49
82021: PUSH
82022: EMPTY
82023: LIST
82024: LIST
82025: LIST
82026: ST_TO_ADDR
// if not result then
82027: LD_VAR 0 3
82031: NOT
82032: IFFALSE 82036
// exit ;
82034: GO 82500
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82036: LD_ADDR_VAR 0 5
82040: PUSH
82041: LD_INT 81
82043: PUSH
82044: LD_VAR 0 8
82048: PUSH
82049: EMPTY
82050: LIST
82051: LIST
82052: PPUSH
82053: CALL_OW 69
82057: ST_TO_ADDR
// for i in result do
82058: LD_ADDR_VAR 0 4
82062: PUSH
82063: LD_VAR 0 3
82067: PUSH
82068: FOR_IN
82069: IFFALSE 82498
// begin tag := GetTag ( i ) + 1 ;
82071: LD_ADDR_VAR 0 9
82075: PUSH
82076: LD_VAR 0 4
82080: PPUSH
82081: CALL_OW 110
82085: PUSH
82086: LD_INT 1
82088: PLUS
82089: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
82090: LD_ADDR_VAR 0 7
82094: PUSH
82095: LD_VAR 0 4
82099: PPUSH
82100: CALL_OW 250
82104: PPUSH
82105: LD_VAR 0 4
82109: PPUSH
82110: CALL_OW 251
82114: PPUSH
82115: LD_INT 4
82117: PPUSH
82118: CALL 81691 0 3
82122: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
82123: LD_VAR 0 4
82127: PPUSH
82128: CALL_OW 247
82132: PUSH
82133: LD_INT 2
82135: EQUAL
82136: IFFALSE 82148
82138: PUSH
82139: LD_VAR 0 7
82143: PUSH
82144: LD_INT 2
82146: GREATER
82147: AND
82148: IFFALSE 82168
82150: PUSH
82151: LD_VAR 0 4
82155: PPUSH
82156: CALL_OW 264
82160: PUSH
82161: LD_VAR 0 10
82165: IN
82166: NOT
82167: AND
82168: IFFALSE 82207
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82170: LD_VAR 0 4
82174: PPUSH
82175: LD_VAR 0 7
82179: PUSH
82180: LD_INT 1
82182: ARRAY
82183: PUSH
82184: LD_INT 1
82186: ARRAY
82187: PPUSH
82188: LD_VAR 0 7
82192: PUSH
82193: LD_INT 1
82195: ARRAY
82196: PUSH
82197: LD_INT 2
82199: ARRAY
82200: PPUSH
82201: CALL_OW 116
82205: GO 82496
// if path > tag then
82207: LD_VAR 0 2
82211: PUSH
82212: LD_VAR 0 9
82216: GREATER
82217: IFFALSE 82425
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82219: LD_ADDR_VAR 0 6
82223: PUSH
82224: LD_VAR 0 5
82228: PPUSH
82229: LD_INT 91
82231: PUSH
82232: LD_VAR 0 4
82236: PUSH
82237: LD_INT 8
82239: PUSH
82240: EMPTY
82241: LIST
82242: LIST
82243: LIST
82244: PPUSH
82245: CALL_OW 72
82249: ST_TO_ADDR
// if nearEnemy then
82250: LD_VAR 0 6
82254: IFFALSE 82323
// begin if GetWeapon ( i ) = ru_time_lapser then
82256: LD_VAR 0 4
82260: PPUSH
82261: CALL_OW 264
82265: PUSH
82266: LD_INT 49
82268: EQUAL
82269: IFFALSE 82297
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82271: LD_VAR 0 4
82275: PPUSH
82276: LD_VAR 0 6
82280: PPUSH
82281: LD_VAR 0 4
82285: PPUSH
82286: CALL_OW 74
82290: PPUSH
82291: CALL_OW 112
82295: GO 82321
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82297: LD_VAR 0 4
82301: PPUSH
82302: LD_VAR 0 6
82306: PPUSH
82307: LD_VAR 0 4
82311: PPUSH
82312: CALL_OW 74
82316: PPUSH
82317: CALL 83581 0 2
// end else
82321: GO 82423
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82323: LD_VAR 0 4
82327: PPUSH
82328: LD_VAR 0 2
82332: PUSH
82333: LD_VAR 0 9
82337: ARRAY
82338: PUSH
82339: LD_INT 1
82341: ARRAY
82342: PPUSH
82343: LD_VAR 0 2
82347: PUSH
82348: LD_VAR 0 9
82352: ARRAY
82353: PUSH
82354: LD_INT 2
82356: ARRAY
82357: PPUSH
82358: CALL_OW 297
82362: PUSH
82363: LD_INT 6
82365: GREATER
82366: IFFALSE 82409
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82368: LD_VAR 0 4
82372: PPUSH
82373: LD_VAR 0 2
82377: PUSH
82378: LD_VAR 0 9
82382: ARRAY
82383: PUSH
82384: LD_INT 1
82386: ARRAY
82387: PPUSH
82388: LD_VAR 0 2
82392: PUSH
82393: LD_VAR 0 9
82397: ARRAY
82398: PUSH
82399: LD_INT 2
82401: ARRAY
82402: PPUSH
82403: CALL_OW 114
82407: GO 82423
// SetTag ( i , tag ) ;
82409: LD_VAR 0 4
82413: PPUSH
82414: LD_VAR 0 9
82418: PPUSH
82419: CALL_OW 109
// end else
82423: GO 82496
// if enemy then
82425: LD_VAR 0 5
82429: IFFALSE 82496
// begin if GetWeapon ( i ) = ru_time_lapser then
82431: LD_VAR 0 4
82435: PPUSH
82436: CALL_OW 264
82440: PUSH
82441: LD_INT 49
82443: EQUAL
82444: IFFALSE 82472
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82446: LD_VAR 0 4
82450: PPUSH
82451: LD_VAR 0 5
82455: PPUSH
82456: LD_VAR 0 4
82460: PPUSH
82461: CALL_OW 74
82465: PPUSH
82466: CALL_OW 112
82470: GO 82496
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82472: LD_VAR 0 4
82476: PPUSH
82477: LD_VAR 0 5
82481: PPUSH
82482: LD_VAR 0 4
82486: PPUSH
82487: CALL_OW 74
82491: PPUSH
82492: CALL 83581 0 2
// end ; end ;
82496: GO 82068
82498: POP
82499: POP
// end ;
82500: LD_VAR 0 3
82504: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82505: LD_INT 0
82507: PPUSH
82508: PPUSH
82509: PPUSH
// if not unit or IsInUnit ( unit ) then
82510: LD_VAR 0 1
82514: NOT
82515: IFTRUE 82528
82517: PUSH
82518: LD_VAR 0 1
82522: PPUSH
82523: CALL_OW 310
82527: OR
82528: IFFALSE 82532
// exit ;
82530: GO 82623
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82532: LD_ADDR_VAR 0 4
82536: PUSH
82537: LD_VAR 0 1
82541: PPUSH
82542: CALL_OW 250
82546: PPUSH
82547: LD_VAR 0 2
82551: PPUSH
82552: LD_INT 1
82554: PPUSH
82555: CALL_OW 272
82559: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82560: LD_ADDR_VAR 0 5
82564: PUSH
82565: LD_VAR 0 1
82569: PPUSH
82570: CALL_OW 251
82574: PPUSH
82575: LD_VAR 0 2
82579: PPUSH
82580: LD_INT 1
82582: PPUSH
82583: CALL_OW 273
82587: ST_TO_ADDR
// if ValidHex ( x , y ) then
82588: LD_VAR 0 4
82592: PPUSH
82593: LD_VAR 0 5
82597: PPUSH
82598: CALL_OW 488
82602: IFFALSE 82623
// ComTurnXY ( unit , x , y ) ;
82604: LD_VAR 0 1
82608: PPUSH
82609: LD_VAR 0 4
82613: PPUSH
82614: LD_VAR 0 5
82618: PPUSH
82619: CALL_OW 118
// end ;
82623: LD_VAR 0 3
82627: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82628: LD_INT 0
82630: PPUSH
82631: PPUSH
// result := false ;
82632: LD_ADDR_VAR 0 3
82636: PUSH
82637: LD_INT 0
82639: ST_TO_ADDR
// if not units then
82640: LD_VAR 0 2
82644: NOT
82645: IFFALSE 82649
// exit ;
82647: GO 82694
// for i in units do
82649: LD_ADDR_VAR 0 4
82653: PUSH
82654: LD_VAR 0 2
82658: PUSH
82659: FOR_IN
82660: IFFALSE 82692
// if See ( side , i ) then
82662: LD_VAR 0 1
82666: PPUSH
82667: LD_VAR 0 4
82671: PPUSH
82672: CALL_OW 292
82676: IFFALSE 82690
// begin result := true ;
82678: LD_ADDR_VAR 0 3
82682: PUSH
82683: LD_INT 1
82685: ST_TO_ADDR
// exit ;
82686: POP
82687: POP
82688: GO 82694
// end ;
82690: GO 82659
82692: POP
82693: POP
// end ;
82694: LD_VAR 0 3
82698: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82699: LD_INT 0
82701: PPUSH
82702: PPUSH
82703: PPUSH
82704: PPUSH
// if not unit or not points then
82705: LD_VAR 0 1
82709: NOT
82710: IFTRUE 82719
82712: PUSH
82713: LD_VAR 0 2
82717: NOT
82718: OR
82719: IFFALSE 82723
// exit ;
82721: GO 82813
// dist := 99999 ;
82723: LD_ADDR_VAR 0 5
82727: PUSH
82728: LD_INT 99999
82730: ST_TO_ADDR
// for i in points do
82731: LD_ADDR_VAR 0 4
82735: PUSH
82736: LD_VAR 0 2
82740: PUSH
82741: FOR_IN
82742: IFFALSE 82811
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82744: LD_ADDR_VAR 0 6
82748: PUSH
82749: LD_VAR 0 1
82753: PPUSH
82754: LD_VAR 0 4
82758: PUSH
82759: LD_INT 1
82761: ARRAY
82762: PPUSH
82763: LD_VAR 0 4
82767: PUSH
82768: LD_INT 2
82770: ARRAY
82771: PPUSH
82772: CALL_OW 297
82776: ST_TO_ADDR
// if tmpDist < dist then
82777: LD_VAR 0 6
82781: PUSH
82782: LD_VAR 0 5
82786: LESS
82787: IFFALSE 82809
// begin result := i ;
82789: LD_ADDR_VAR 0 3
82793: PUSH
82794: LD_VAR 0 4
82798: ST_TO_ADDR
// dist := tmpDist ;
82799: LD_ADDR_VAR 0 5
82803: PUSH
82804: LD_VAR 0 6
82808: ST_TO_ADDR
// end ; end ;
82809: GO 82741
82811: POP
82812: POP
// end ;
82813: LD_VAR 0 3
82817: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82818: LD_INT 0
82820: PPUSH
// uc_side := side ;
82821: LD_ADDR_OWVAR 20
82825: PUSH
82826: LD_VAR 0 1
82830: ST_TO_ADDR
// uc_nation := 3 ;
82831: LD_ADDR_OWVAR 21
82835: PUSH
82836: LD_INT 3
82838: ST_TO_ADDR
// vc_chassis := 25 ;
82839: LD_ADDR_OWVAR 37
82843: PUSH
82844: LD_INT 25
82846: ST_TO_ADDR
// vc_engine := engine_siberite ;
82847: LD_ADDR_OWVAR 39
82851: PUSH
82852: LD_INT 3
82854: ST_TO_ADDR
// vc_control := control_computer ;
82855: LD_ADDR_OWVAR 38
82859: PUSH
82860: LD_INT 3
82862: ST_TO_ADDR
// vc_weapon := 59 ;
82863: LD_ADDR_OWVAR 40
82867: PUSH
82868: LD_INT 59
82870: ST_TO_ADDR
// result := CreateVehicle ;
82871: LD_ADDR_VAR 0 5
82875: PUSH
82876: CALL_OW 45
82880: ST_TO_ADDR
// SetDir ( result , d ) ;
82881: LD_VAR 0 5
82885: PPUSH
82886: LD_VAR 0 4
82890: PPUSH
82891: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82895: LD_VAR 0 5
82899: PPUSH
82900: LD_VAR 0 2
82904: PPUSH
82905: LD_VAR 0 3
82909: PPUSH
82910: LD_INT 0
82912: PPUSH
82913: CALL_OW 48
// end ;
82917: LD_VAR 0 5
82921: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82922: LD_INT 0
82924: PPUSH
82925: PPUSH
82926: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82927: LD_ADDR_VAR 0 2
82931: PUSH
82932: LD_INT 0
82934: PUSH
82935: LD_INT 0
82937: PUSH
82938: LD_INT 0
82940: PUSH
82941: LD_INT 0
82943: PUSH
82944: EMPTY
82945: LIST
82946: LIST
82947: LIST
82948: LIST
82949: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82950: LD_VAR 0 1
82954: NOT
82955: IFTRUE 82988
82957: PUSH
82958: LD_VAR 0 1
82962: PPUSH
82963: CALL_OW 264
82967: PUSH
82968: LD_INT 12
82970: PUSH
82971: LD_INT 51
82973: PUSH
82974: LD_INT 32
82976: PUSH
82977: LD_INT 89
82979: PUSH
82980: EMPTY
82981: LIST
82982: LIST
82983: LIST
82984: LIST
82985: IN
82986: NOT
82987: OR
82988: IFFALSE 82992
// exit ;
82990: GO 83090
// for i := 1 to 3 do
82992: LD_ADDR_VAR 0 3
82996: PUSH
82997: DOUBLE
82998: LD_INT 1
83000: DEC
83001: ST_TO_ADDR
83002: LD_INT 3
83004: PUSH
83005: FOR_TO
83006: IFFALSE 83088
// begin tmp := GetCargo ( cargo , i ) ;
83008: LD_ADDR_VAR 0 4
83012: PUSH
83013: LD_VAR 0 1
83017: PPUSH
83018: LD_VAR 0 3
83022: PPUSH
83023: CALL_OW 289
83027: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83028: LD_ADDR_VAR 0 2
83032: PUSH
83033: LD_VAR 0 2
83037: PPUSH
83038: LD_VAR 0 3
83042: PPUSH
83043: LD_VAR 0 4
83047: PPUSH
83048: CALL_OW 1
83052: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
83053: LD_ADDR_VAR 0 2
83057: PUSH
83058: LD_VAR 0 2
83062: PPUSH
83063: LD_INT 4
83065: PPUSH
83066: LD_VAR 0 2
83070: PUSH
83071: LD_INT 4
83073: ARRAY
83074: PUSH
83075: LD_VAR 0 4
83079: PLUS
83080: PPUSH
83081: CALL_OW 1
83085: ST_TO_ADDR
// end ;
83086: GO 83005
83088: POP
83089: POP
// end ;
83090: LD_VAR 0 2
83094: RET
// export function Length ( array ) ; begin
83095: LD_INT 0
83097: PPUSH
// result := array + 0 ;
83098: LD_ADDR_VAR 0 2
83102: PUSH
83103: LD_VAR 0 1
83107: PUSH
83108: LD_INT 0
83110: PLUS
83111: ST_TO_ADDR
// end ;
83112: LD_VAR 0 2
83116: RET
// export function PrepareArray ( array ) ; begin
83117: LD_INT 0
83119: PPUSH
// result := array diff 0 ;
83120: LD_ADDR_VAR 0 2
83124: PUSH
83125: LD_VAR 0 1
83129: PUSH
83130: LD_INT 0
83132: DIFF
83133: ST_TO_ADDR
// if not result [ 1 ] then
83134: LD_VAR 0 2
83138: PUSH
83139: LD_INT 1
83141: ARRAY
83142: NOT
83143: IFFALSE 83163
// result := Delete ( result , 1 ) ;
83145: LD_ADDR_VAR 0 2
83149: PUSH
83150: LD_VAR 0 2
83154: PPUSH
83155: LD_INT 1
83157: PPUSH
83158: CALL_OW 3
83162: ST_TO_ADDR
// end ;
83163: LD_VAR 0 2
83167: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
83168: LD_INT 0
83170: PPUSH
83171: PPUSH
83172: PPUSH
83173: PPUSH
// sibRocketRange := 25 ;
83174: LD_ADDR_VAR 0 6
83178: PUSH
83179: LD_INT 25
83181: ST_TO_ADDR
// result := false ;
83182: LD_ADDR_VAR 0 4
83186: PUSH
83187: LD_INT 0
83189: ST_TO_ADDR
// for i := 0 to 5 do
83190: LD_ADDR_VAR 0 5
83194: PUSH
83195: DOUBLE
83196: LD_INT 0
83198: DEC
83199: ST_TO_ADDR
83200: LD_INT 5
83202: PUSH
83203: FOR_TO
83204: IFFALSE 83271
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83206: LD_VAR 0 1
83210: PPUSH
83211: LD_VAR 0 5
83215: PPUSH
83216: LD_VAR 0 6
83220: PPUSH
83221: CALL_OW 272
83225: PPUSH
83226: LD_VAR 0 2
83230: PPUSH
83231: LD_VAR 0 5
83235: PPUSH
83236: LD_VAR 0 6
83240: PPUSH
83241: CALL_OW 273
83245: PPUSH
83246: LD_VAR 0 3
83250: PPUSH
83251: CALL_OW 309
83255: IFFALSE 83269
// begin result := true ;
83257: LD_ADDR_VAR 0 4
83261: PUSH
83262: LD_INT 1
83264: ST_TO_ADDR
// exit ;
83265: POP
83266: POP
83267: GO 83273
// end ;
83269: GO 83203
83271: POP
83272: POP
// end ;
83273: LD_VAR 0 4
83277: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83278: LD_INT 0
83280: PPUSH
83281: PPUSH
83282: PPUSH
// if btype = b_depot then
83283: LD_VAR 0 2
83287: PUSH
83288: LD_INT 0
83290: EQUAL
83291: IFFALSE 83303
// begin result := true ;
83293: LD_ADDR_VAR 0 3
83297: PUSH
83298: LD_INT 1
83300: ST_TO_ADDR
// exit ;
83301: GO 83423
// end ; pom := GetBase ( depot ) ;
83303: LD_ADDR_VAR 0 4
83307: PUSH
83308: LD_VAR 0 1
83312: PPUSH
83313: CALL_OW 274
83317: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83318: LD_ADDR_VAR 0 5
83322: PUSH
83323: LD_VAR 0 2
83327: PPUSH
83328: LD_VAR 0 1
83332: PPUSH
83333: CALL_OW 248
83337: PPUSH
83338: CALL_OW 450
83342: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83343: LD_ADDR_VAR 0 3
83347: PUSH
83348: LD_VAR 0 4
83352: PPUSH
83353: LD_INT 1
83355: PPUSH
83356: CALL_OW 275
83360: PUSH
83361: LD_VAR 0 5
83365: PUSH
83366: LD_INT 1
83368: ARRAY
83369: GREATEREQUAL
83370: IFFALSE 83396
83372: PUSH
83373: LD_VAR 0 4
83377: PPUSH
83378: LD_INT 2
83380: PPUSH
83381: CALL_OW 275
83385: PUSH
83386: LD_VAR 0 5
83390: PUSH
83391: LD_INT 2
83393: ARRAY
83394: GREATEREQUAL
83395: AND
83396: IFFALSE 83422
83398: PUSH
83399: LD_VAR 0 4
83403: PPUSH
83404: LD_INT 3
83406: PPUSH
83407: CALL_OW 275
83411: PUSH
83412: LD_VAR 0 5
83416: PUSH
83417: LD_INT 3
83419: ARRAY
83420: GREATEREQUAL
83421: AND
83422: ST_TO_ADDR
// end ;
83423: LD_VAR 0 3
83427: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83428: LD_INT 0
83430: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83431: LD_VAR 0 1
83435: PPUSH
83436: LD_VAR 0 2
83440: PPUSH
83441: LD_INT 0
83443: PPUSH
83444: LD_INT 0
83446: PPUSH
83447: LD_INT 1
83449: PPUSH
83450: LD_INT 0
83452: PPUSH
83453: CALL_OW 587
// end ;
83457: LD_VAR 0 3
83461: RET
// export function CenterOnNow ( unit ) ; begin
83462: LD_INT 0
83464: PPUSH
// result := IsInUnit ( unit ) ;
83465: LD_ADDR_VAR 0 2
83469: PUSH
83470: LD_VAR 0 1
83474: PPUSH
83475: CALL_OW 310
83479: ST_TO_ADDR
// if not result then
83480: LD_VAR 0 2
83484: NOT
83485: IFFALSE 83497
// result := unit ;
83487: LD_ADDR_VAR 0 2
83491: PUSH
83492: LD_VAR 0 1
83496: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83497: LD_VAR 0 1
83501: PPUSH
83502: CALL_OW 87
// end ;
83506: LD_VAR 0 2
83510: RET
// export function ComMoveHex ( unit , hex ) ; begin
83511: LD_INT 0
83513: PPUSH
// if not hex then
83514: LD_VAR 0 2
83518: NOT
83519: IFFALSE 83523
// exit ;
83521: GO 83576
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83523: LD_VAR 0 2
83527: PUSH
83528: LD_INT 1
83530: ARRAY
83531: PPUSH
83532: LD_VAR 0 2
83536: PUSH
83537: LD_INT 2
83539: ARRAY
83540: PPUSH
83541: CALL_OW 428
83545: IFFALSE 83549
// exit ;
83547: GO 83576
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83549: LD_VAR 0 1
83553: PPUSH
83554: LD_VAR 0 2
83558: PUSH
83559: LD_INT 1
83561: ARRAY
83562: PPUSH
83563: LD_VAR 0 2
83567: PUSH
83568: LD_INT 2
83570: ARRAY
83571: PPUSH
83572: CALL_OW 111
// end ;
83576: LD_VAR 0 3
83580: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83581: LD_INT 0
83583: PPUSH
83584: PPUSH
83585: PPUSH
// if not unit or not enemy then
83586: LD_VAR 0 1
83590: NOT
83591: IFTRUE 83600
83593: PUSH
83594: LD_VAR 0 2
83598: NOT
83599: OR
83600: IFFALSE 83604
// exit ;
83602: GO 83730
// x := GetX ( enemy ) ;
83604: LD_ADDR_VAR 0 4
83608: PUSH
83609: LD_VAR 0 2
83613: PPUSH
83614: CALL_OW 250
83618: ST_TO_ADDR
// y := GetY ( enemy ) ;
83619: LD_ADDR_VAR 0 5
83623: PUSH
83624: LD_VAR 0 2
83628: PPUSH
83629: CALL_OW 251
83633: ST_TO_ADDR
// if ValidHex ( x , y ) then
83634: LD_VAR 0 4
83638: PPUSH
83639: LD_VAR 0 5
83643: PPUSH
83644: CALL_OW 488
83648: IFFALSE 83730
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83650: LD_VAR 0 2
83654: PPUSH
83655: CALL_OW 247
83659: PUSH
83660: LD_INT 3
83662: PUSH
83663: LD_INT 2
83665: PUSH
83666: EMPTY
83667: LIST
83668: LIST
83669: IN
83670: IFTRUE 83693
83672: PUSH
83673: LD_VAR 0 1
83677: PPUSH
83678: CALL_OW 255
83682: PPUSH
83683: LD_VAR 0 2
83687: PPUSH
83688: CALL_OW 292
83692: OR
83693: IFFALSE 83711
// ComAttackUnit ( unit , enemy ) else
83695: LD_VAR 0 1
83699: PPUSH
83700: LD_VAR 0 2
83704: PPUSH
83705: CALL_OW 115
83709: GO 83730
// ComAgressiveMove ( unit , x , y ) ;
83711: LD_VAR 0 1
83715: PPUSH
83716: LD_VAR 0 4
83720: PPUSH
83721: LD_VAR 0 5
83725: PPUSH
83726: CALL_OW 114
// end ;
83730: LD_VAR 0 3
83734: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
83735: LD_INT 0
83737: PPUSH
83738: PPUSH
83739: PPUSH
// list := AreaToList ( area , 0 ) ;
83740: LD_ADDR_VAR 0 5
83744: PUSH
83745: LD_VAR 0 1
83749: PPUSH
83750: LD_INT 0
83752: PPUSH
83753: CALL_OW 517
83757: ST_TO_ADDR
// if not list then
83758: LD_VAR 0 5
83762: NOT
83763: IFFALSE 83767
// exit ;
83765: GO 83897
// if all then
83767: LD_VAR 0 2
83771: IFFALSE 83859
// begin for i := 1 to list [ 1 ] do
83773: LD_ADDR_VAR 0 4
83777: PUSH
83778: DOUBLE
83779: LD_INT 1
83781: DEC
83782: ST_TO_ADDR
83783: LD_VAR 0 5
83787: PUSH
83788: LD_INT 1
83790: ARRAY
83791: PUSH
83792: FOR_TO
83793: IFFALSE 83855
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83795: LD_ADDR_VAR 0 3
83799: PUSH
83800: LD_VAR 0 3
83804: PPUSH
83805: LD_VAR 0 3
83809: PUSH
83810: LD_INT 1
83812: PLUS
83813: PPUSH
83814: LD_VAR 0 5
83818: PUSH
83819: LD_INT 1
83821: ARRAY
83822: PUSH
83823: LD_VAR 0 4
83827: ARRAY
83828: PUSH
83829: LD_VAR 0 5
83833: PUSH
83834: LD_INT 2
83836: ARRAY
83837: PUSH
83838: LD_VAR 0 4
83842: ARRAY
83843: PUSH
83844: EMPTY
83845: LIST
83846: LIST
83847: PPUSH
83848: CALL_OW 1
83852: ST_TO_ADDR
83853: GO 83792
83855: POP
83856: POP
// exit ;
83857: GO 83897
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83859: LD_ADDR_VAR 0 3
83863: PUSH
83864: LD_VAR 0 5
83868: PUSH
83869: LD_INT 1
83871: ARRAY
83872: PUSH
83873: LD_INT 1
83875: ARRAY
83876: PUSH
83877: LD_VAR 0 5
83881: PUSH
83882: LD_INT 2
83884: ARRAY
83885: PUSH
83886: LD_INT 1
83888: ARRAY
83889: PUSH
83890: EMPTY
83891: LIST
83892: LIST
83893: PUSH
83894: EMPTY
83895: LIST
83896: ST_TO_ADDR
// end ;
83897: LD_VAR 0 3
83901: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
83902: LD_INT 0
83904: PPUSH
83905: PPUSH
// list := AreaToList ( area , 0 ) ;
83906: LD_ADDR_VAR 0 4
83910: PUSH
83911: LD_VAR 0 1
83915: PPUSH
83916: LD_INT 0
83918: PPUSH
83919: CALL_OW 517
83923: ST_TO_ADDR
// if not list then
83924: LD_VAR 0 4
83928: NOT
83929: IFFALSE 83933
// exit ;
83931: GO 83974
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
83933: LD_ADDR_VAR 0 3
83937: PUSH
83938: LD_VAR 0 4
83942: PUSH
83943: LD_INT 1
83945: ARRAY
83946: PUSH
83947: LD_INT 1
83949: ARRAY
83950: PUSH
83951: LD_VAR 0 4
83955: PUSH
83956: LD_INT 2
83958: ARRAY
83959: PUSH
83960: LD_INT 1
83962: ARRAY
83963: PUSH
83964: LD_VAR 0 2
83968: PUSH
83969: EMPTY
83970: LIST
83971: LIST
83972: LIST
83973: ST_TO_ADDR
// end ;
83974: LD_VAR 0 3
83978: RET
// export function First ( array ) ; begin
83979: LD_INT 0
83981: PPUSH
// if not array then
83982: LD_VAR 0 1
83986: NOT
83987: IFFALSE 83991
// exit ;
83989: GO 84005
// result := array [ 1 ] ;
83991: LD_ADDR_VAR 0 2
83995: PUSH
83996: LD_VAR 0 1
84000: PUSH
84001: LD_INT 1
84003: ARRAY
84004: ST_TO_ADDR
// end ;
84005: LD_VAR 0 2
84009: RET
// export function Last ( array ) ; begin
84010: LD_INT 0
84012: PPUSH
// if not array then
84013: LD_VAR 0 1
84017: NOT
84018: IFFALSE 84022
// exit ;
84020: GO 84038
// result := array [ array ] ;
84022: LD_ADDR_VAR 0 2
84026: PUSH
84027: LD_VAR 0 1
84031: PUSH
84032: LD_VAR 0 1
84036: ARRAY
84037: ST_TO_ADDR
// end ;
84038: LD_VAR 0 2
84042: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
84043: LD_INT 0
84045: PPUSH
84046: PPUSH
// result := [ ] ;
84047: LD_ADDR_VAR 0 5
84051: PUSH
84052: EMPTY
84053: ST_TO_ADDR
// if not array then
84054: LD_VAR 0 1
84058: NOT
84059: IFFALSE 84063
// exit ;
84061: GO 84175
// for i := 1 to array do
84063: LD_ADDR_VAR 0 6
84067: PUSH
84068: DOUBLE
84069: LD_INT 1
84071: DEC
84072: ST_TO_ADDR
84073: LD_VAR 0 1
84077: PUSH
84078: FOR_TO
84079: IFFALSE 84173
// if array [ i ] [ index ] = value then
84081: LD_VAR 0 1
84085: PUSH
84086: LD_VAR 0 6
84090: ARRAY
84091: PUSH
84092: LD_VAR 0 2
84096: ARRAY
84097: PUSH
84098: LD_VAR 0 3
84102: EQUAL
84103: IFFALSE 84171
// begin if indexColumn then
84105: LD_VAR 0 4
84109: IFFALSE 84145
// result := Join ( result , array [ i ] [ indexColumn ] ) else
84111: LD_ADDR_VAR 0 5
84115: PUSH
84116: LD_VAR 0 5
84120: PPUSH
84121: LD_VAR 0 1
84125: PUSH
84126: LD_VAR 0 6
84130: ARRAY
84131: PUSH
84132: LD_VAR 0 4
84136: ARRAY
84137: PPUSH
84138: CALL 79183 0 2
84142: ST_TO_ADDR
84143: GO 84171
// result := Join ( result , array [ i ] ) ;
84145: LD_ADDR_VAR 0 5
84149: PUSH
84150: LD_VAR 0 5
84154: PPUSH
84155: LD_VAR 0 1
84159: PUSH
84160: LD_VAR 0 6
84164: ARRAY
84165: PPUSH
84166: CALL 79183 0 2
84170: ST_TO_ADDR
// end ;
84171: GO 84078
84173: POP
84174: POP
// end ;
84175: LD_VAR 0 5
84179: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
84180: LD_INT 0
84182: PPUSH
// if not vehicles or not parkingPoint then
84183: LD_VAR 0 1
84187: NOT
84188: IFTRUE 84197
84190: PUSH
84191: LD_VAR 0 2
84195: NOT
84196: OR
84197: IFFALSE 84201
// exit ;
84199: GO 84299
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
84201: LD_ADDR_VAR 0 1
84205: PUSH
84206: LD_VAR 0 1
84210: PPUSH
84211: LD_INT 50
84213: PUSH
84214: EMPTY
84215: LIST
84216: PUSH
84217: LD_INT 3
84219: PUSH
84220: LD_INT 92
84222: PUSH
84223: LD_VAR 0 2
84227: PUSH
84228: LD_INT 1
84230: ARRAY
84231: PUSH
84232: LD_VAR 0 2
84236: PUSH
84237: LD_INT 2
84239: ARRAY
84240: PUSH
84241: LD_INT 8
84243: PUSH
84244: EMPTY
84245: LIST
84246: LIST
84247: LIST
84248: LIST
84249: PUSH
84250: EMPTY
84251: LIST
84252: LIST
84253: PUSH
84254: EMPTY
84255: LIST
84256: LIST
84257: PPUSH
84258: CALL_OW 72
84262: ST_TO_ADDR
// if not vehicles then
84263: LD_VAR 0 1
84267: NOT
84268: IFFALSE 84272
// exit ;
84270: GO 84299
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
84272: LD_VAR 0 1
84276: PPUSH
84277: LD_VAR 0 2
84281: PUSH
84282: LD_INT 1
84284: ARRAY
84285: PPUSH
84286: LD_VAR 0 2
84290: PUSH
84291: LD_INT 2
84293: ARRAY
84294: PPUSH
84295: CALL_OW 111
// end ;
84299: LD_VAR 0 3
84303: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
84304: LD_INT 0
84306: PPUSH
84307: PPUSH
84308: PPUSH
// if not side or not area then
84309: LD_VAR 0 1
84313: NOT
84314: IFTRUE 84323
84316: PUSH
84317: LD_VAR 0 2
84321: NOT
84322: OR
84323: IFFALSE 84327
// exit ;
84325: GO 84446
// tmp := AreaToList ( area , 0 ) ;
84327: LD_ADDR_VAR 0 5
84331: PUSH
84332: LD_VAR 0 2
84336: PPUSH
84337: LD_INT 0
84339: PPUSH
84340: CALL_OW 517
84344: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
84345: LD_ADDR_VAR 0 4
84349: PUSH
84350: DOUBLE
84351: LD_INT 1
84353: DEC
84354: ST_TO_ADDR
84355: LD_VAR 0 5
84359: PUSH
84360: LD_INT 1
84362: ARRAY
84363: PUSH
84364: FOR_TO
84365: IFFALSE 84444
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
84367: LD_VAR 0 5
84371: PUSH
84372: LD_INT 1
84374: ARRAY
84375: PUSH
84376: LD_VAR 0 4
84380: ARRAY
84381: PPUSH
84382: LD_VAR 0 5
84386: PUSH
84387: LD_INT 2
84389: ARRAY
84390: PUSH
84391: LD_VAR 0 4
84395: ARRAY
84396: PPUSH
84397: CALL_OW 351
84401: IFFALSE 84442
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84403: LD_VAR 0 5
84407: PUSH
84408: LD_INT 1
84410: ARRAY
84411: PUSH
84412: LD_VAR 0 4
84416: ARRAY
84417: PPUSH
84418: LD_VAR 0 5
84422: PUSH
84423: LD_INT 2
84425: ARRAY
84426: PUSH
84427: LD_VAR 0 4
84431: ARRAY
84432: PPUSH
84433: LD_VAR 0 1
84437: PPUSH
84438: CALL_OW 244
// end ;
84442: GO 84364
84444: POP
84445: POP
// end ;
84446: LD_VAR 0 3
84450: RET
// export function UniqueArray ( array ) ; var i ; begin
84451: LD_INT 0
84453: PPUSH
84454: PPUSH
// result := [ ] ;
84455: LD_ADDR_VAR 0 2
84459: PUSH
84460: EMPTY
84461: ST_TO_ADDR
// if not array then
84462: LD_VAR 0 1
84466: NOT
84467: IFFALSE 84471
// exit ;
84469: GO 84532
// for i := 1 to array do
84471: LD_ADDR_VAR 0 3
84475: PUSH
84476: DOUBLE
84477: LD_INT 1
84479: DEC
84480: ST_TO_ADDR
84481: LD_VAR 0 1
84485: PUSH
84486: FOR_TO
84487: IFFALSE 84530
// if not array [ i ] in result then
84489: LD_VAR 0 1
84493: PUSH
84494: LD_VAR 0 3
84498: ARRAY
84499: PUSH
84500: LD_VAR 0 2
84504: IN
84505: NOT
84506: IFFALSE 84528
// result := Join ( result , i ) ;
84508: LD_ADDR_VAR 0 2
84512: PUSH
84513: LD_VAR 0 2
84517: PPUSH
84518: LD_VAR 0 3
84522: PPUSH
84523: CALL 79183 0 2
84527: ST_TO_ADDR
84528: GO 84486
84530: POP
84531: POP
// end ; end_of_file
84532: LD_VAR 0 2
84536: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84537: LD_VAR 0 1
84541: PUSH
84542: LD_INT 200
84544: DOUBLE
84545: GREATEREQUAL
84546: IFFALSE 84554
84548: LD_INT 299
84550: DOUBLE
84551: LESSEQUAL
84552: IFTRUE 84556
84554: GO 84588
84556: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84557: LD_VAR 0 1
84561: PPUSH
84562: LD_VAR 0 2
84566: PPUSH
84567: LD_VAR 0 3
84571: PPUSH
84572: LD_VAR 0 4
84576: PPUSH
84577: LD_VAR 0 5
84581: PPUSH
84582: CALL 36294 0 5
84586: GO 84665
84588: LD_INT 300
84590: DOUBLE
84591: GREATEREQUAL
84592: IFFALSE 84600
84594: LD_INT 399
84596: DOUBLE
84597: LESSEQUAL
84598: IFTRUE 84602
84600: GO 84664
84602: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84603: LD_VAR 0 1
84607: PPUSH
84608: LD_VAR 0 2
84612: PPUSH
84613: LD_VAR 0 3
84617: PPUSH
84618: LD_VAR 0 4
84622: PPUSH
84623: LD_VAR 0 5
84627: PPUSH
84628: LD_VAR 0 6
84632: PPUSH
84633: LD_VAR 0 7
84637: PPUSH
84638: LD_VAR 0 8
84642: PPUSH
84643: LD_VAR 0 9
84647: PPUSH
84648: LD_VAR 0 10
84652: PPUSH
84653: LD_VAR 0 11
84657: PPUSH
84658: CALL 32178 0 11
84662: GO 84665
84664: POP
// end ;
84665: PPOPN 11
84667: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84668: LD_VAR 0 1
84672: PPUSH
84673: LD_VAR 0 2
84677: PPUSH
84678: LD_VAR 0 3
84682: PPUSH
84683: LD_VAR 0 4
84687: PPUSH
84688: LD_VAR 0 5
84692: PPUSH
84693: CALL 35675 0 5
// end ; end_of_file
84697: PPOPN 5
84699: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84700: LD_VAR 0 1
84704: PPUSH
84705: LD_VAR 0 2
84709: PPUSH
84710: LD_VAR 0 3
84714: PPUSH
84715: LD_VAR 0 4
84719: PPUSH
84720: LD_VAR 0 5
84724: PPUSH
84725: LD_VAR 0 6
84729: PPUSH
84730: CALL 19718 0 6
// end ;
84734: PPOPN 6
84736: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84737: LD_INT 0
84739: PPUSH
// begin if not units then
84740: LD_VAR 0 1
84744: NOT
84745: IFFALSE 84749
// exit ;
84747: GO 84749
// end ;
84749: PPOPN 7
84751: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84752: CALL 19605 0 0
// end ;
84756: PPOPN 1
84758: END
