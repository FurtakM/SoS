// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3454 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2668 0 0
// PrepareWesternBase ;
  41: CALL 2897 0 0
// Action ;
  45: CALL 5785 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty , vcount , tmpv ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
// uc_side := 4 ;
1157: LD_ADDR_OWVAR 20
1161: PUSH
1162: LD_INT 4
1164: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1165: LD_ADDR_EXP 46
1169: PUSH
1170: LD_STRING Powell
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: LD_STRING 
1178: PPUSH
1179: CALL 39308 0 3
1183: ST_TO_ADDR
// uc_side := 1 ;
1184: LD_ADDR_OWVAR 20
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// uc_nation := 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// if debug then
1200: LD_EXP 1
1204: IFFALSE 1550
// begin for i = 1 to 4 do
1206: LD_ADDR_VAR 0 2
1210: PUSH
1211: DOUBLE
1212: LD_INT 1
1214: DEC
1215: ST_TO_ADDR
1216: LD_INT 4
1218: PUSH
1219: FOR_TO
1220: IFFALSE 1271
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL_OW 380
// un := CreateHuman ;
1243: LD_ADDR_VAR 0 3
1247: PUSH
1248: CALL_OW 44
1252: ST_TO_ADDR
// others := others ^ un ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_VAR 0 5
1262: PUSH
1263: LD_VAR 0 3
1267: ADD
1268: ST_TO_ADDR
// end ;
1269: GO 1219
1271: POP
1272: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1273: LD_ADDR_VAR 0 6
1277: PUSH
1278: LD_INT 21
1280: PUSH
1281: LD_INT 1
1283: PUSH
1284: LD_INT 1
1286: PUSH
1287: LD_INT 42
1289: PUSH
1290: LD_INT 0
1292: PUSH
1293: LD_INT 750
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 21
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 42
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 750
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_INT 21
1332: PUSH
1333: LD_INT 1
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: LD_INT 42
1341: PUSH
1342: LD_INT 0
1344: PUSH
1345: LD_INT 750
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 42
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 750
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 21
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 44
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: LD_INT 750
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: LD_INT 43
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 750
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 21
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: LD_INT 43
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 750
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 21
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 43
1471: PUSH
1472: LD_INT 0
1474: PUSH
1475: LD_INT 750
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 21
1488: PUSH
1489: LD_INT 1
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 90
1500: PUSH
1501: LD_INT 504
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 51
1523: PUSH
1524: LD_INT 80
1526: PUSH
1527: LD_INT 750
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1550: LD_ADDR_EXP 37
1554: PUSH
1555: LD_STRING JMM
1557: PPUSH
1558: LD_EXP 1
1562: NOT
1563: PPUSH
1564: LD_EXP 3
1568: PPUSH
1569: CALL 39308 0 3
1573: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1574: LD_ADDR_EXP 38
1578: PUSH
1579: LD_STRING Bobby
1581: PPUSH
1582: LD_EXP 1
1586: NOT
1587: PPUSH
1588: LD_EXP 3
1592: PPUSH
1593: CALL 39308 0 3
1597: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1598: LD_ADDR_EXP 39
1602: PUSH
1603: LD_STRING Cyrus
1605: PPUSH
1606: LD_EXP 1
1610: NOT
1611: PPUSH
1612: LD_EXP 3
1616: PPUSH
1617: CALL 39308 0 3
1621: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1622: LD_ADDR_EXP 40
1626: PUSH
1627: LD_STRING Lisa
1629: PPUSH
1630: LD_EXP 1
1634: NOT
1635: PPUSH
1636: LD_EXP 3
1640: PPUSH
1641: CALL 39308 0 3
1645: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1646: LD_ADDR_EXP 41
1650: PUSH
1651: LD_STRING Khatam
1653: PPUSH
1654: LD_EXP 1
1658: NOT
1659: PPUSH
1660: LD_EXP 3
1664: PPUSH
1665: CALL 39308 0 3
1669: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1670: LD_ADDR_EXP 42
1674: PUSH
1675: LD_STRING Brian
1677: PPUSH
1678: LD_EXP 1
1682: NOT
1683: PPUSH
1684: LD_EXP 3
1688: PPUSH
1689: CALL 39308 0 3
1693: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1694: LD_ADDR_EXP 43
1698: PUSH
1699: LD_STRING Jerry
1701: PPUSH
1702: LD_EXP 1
1706: NOT
1707: PPUSH
1708: LD_EXP 3
1712: PPUSH
1713: CALL 39308 0 3
1717: ST_TO_ADDR
// if Bobby then
1718: LD_EXP 38
1722: IFFALSE 1753
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1724: LD_ADDR_VAR 0 4
1728: PUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: LD_VAR 0 4
1738: PUSH
1739: LD_INT 1
1741: PLUS
1742: PPUSH
1743: LD_EXP 38
1747: PPUSH
1748: CALL_OW 2
1752: ST_TO_ADDR
// if Cyrus then
1753: LD_EXP 39
1757: IFFALSE 1788
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_VAR 0 4
1773: PUSH
1774: LD_INT 1
1776: PLUS
1777: PPUSH
1778: LD_EXP 39
1782: PPUSH
1783: CALL_OW 2
1787: ST_TO_ADDR
// if Lisa then
1788: LD_EXP 40
1792: IFFALSE 1823
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: LD_VAR 0 4
1808: PUSH
1809: LD_INT 1
1811: PLUS
1812: PPUSH
1813: LD_EXP 40
1817: PPUSH
1818: CALL_OW 2
1822: ST_TO_ADDR
// if Khatam then
1823: LD_EXP 41
1827: IFFALSE 1858
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: LD_VAR 0 4
1843: PUSH
1844: LD_INT 1
1846: PLUS
1847: PPUSH
1848: LD_EXP 41
1852: PPUSH
1853: CALL_OW 2
1857: ST_TO_ADDR
// if Brian then
1858: LD_EXP 42
1862: IFFALSE 1893
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1864: LD_ADDR_VAR 0 4
1868: PUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_VAR 0 4
1878: PUSH
1879: LD_INT 1
1881: PLUS
1882: PPUSH
1883: LD_EXP 42
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// if Jerry then
1893: LD_EXP 43
1897: IFFALSE 1928
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: PLUS
1917: PPUSH
1918: LD_EXP 43
1922: PPUSH
1923: CALL_OW 2
1927: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1928: LD_STRING 02_other_survivors
1930: PPUSH
1931: CALL_OW 28
1935: IFFALSE 1950
// others := CreateCharacterSet ( 02_other_survivors ) ;
1937: LD_ADDR_VAR 0 5
1941: PUSH
1942: LD_STRING 02_other_survivors
1944: PPUSH
1945: CALL_OW 31
1949: ST_TO_ADDR
// if others then
1950: LD_VAR 0 5
1954: IFFALSE 1979
// begin tmp := tmp ^ others ;
1956: LD_ADDR_VAR 0 4
1960: PUSH
1961: LD_VAR 0 4
1965: PUSH
1966: LD_VAR 0 5
1970: ADD
1971: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1972: LD_STRING 02_other_survivors
1974: PPUSH
1975: CALL_OW 40
// end ; jmm_units := tmp diff 0 ;
1979: LD_ADDR_EXP 4
1983: PUSH
1984: LD_VAR 0 4
1988: PUSH
1989: LD_INT 0
1991: DIFF
1992: ST_TO_ADDR
// if not vehicles then
1993: LD_VAR 0 6
1997: NOT
1998: IFFALSE 2015
// vehicles := LoadVariable ( 02_tanks_1 , [ ] ) ;
2000: LD_ADDR_VAR 0 6
2004: PUSH
2005: LD_STRING 02_tanks_1
2007: PPUSH
2008: EMPTY
2009: PPUSH
2010: CALL_OW 30
2014: ST_TO_ADDR
// if vehicles then
2015: LD_VAR 0 6
2019: IFFALSE 2387
// begin got_mech := false ;
2021: LD_ADDR_VAR 0 7
2025: PUSH
2026: LD_INT 0
2028: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 72
2048: IFFALSE 2058
// got_mech := true ;
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// vcount := Count ( vehicles ) ;
2058: LD_ADDR_VAR 0 9
2062: PUSH
2063: LD_VAR 0 6
2067: PPUSH
2068: CALL 41410 0 1
2072: ST_TO_ADDR
// if vcount > 1 then
2073: LD_VAR 0 9
2077: PUSH
2078: LD_INT 1
2080: GREATER
2081: IFFALSE 2184
// begin for i := 2 to vcount do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 2
2091: DEC
2092: ST_TO_ADDR
2093: LD_VAR 0 9
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2182
// if vehicles [ i ] [ 4 ] = ru_cargo_bay then
2101: LD_VAR 0 6
2105: PUSH
2106: LD_VAR 0 2
2110: ARRAY
2111: PUSH
2112: LD_INT 4
2114: ARRAY
2115: PUSH
2116: LD_INT 51
2118: EQUAL
2119: IFFALSE 2180
// begin tmpv := vehicles [ i ] ;
2121: LD_ADDR_VAR 0 10
2125: PUSH
2126: LD_VAR 0 6
2130: PUSH
2131: LD_VAR 0 2
2135: ARRAY
2136: ST_TO_ADDR
// vehicles := Delete ( vehicles , i ) ;
2137: LD_ADDR_VAR 0 6
2141: PUSH
2142: LD_VAR 0 6
2146: PPUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 3
2156: ST_TO_ADDR
// vehicles := Insert ( vehicles , 1 , tmpv ) ;
2157: LD_ADDR_VAR 0 6
2161: PUSH
2162: LD_VAR 0 6
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_VAR 0 10
2174: PPUSH
2175: CALL_OW 2
2179: ST_TO_ADDR
// end ;
2180: GO 2098
2182: POP
2183: POP
// end ; if vcount > 6 then
2184: LD_VAR 0 9
2188: PUSH
2189: LD_INT 6
2191: GREATER
2192: IFFALSE 2202
// vcount := 6 ;
2194: LD_ADDR_VAR 0 9
2198: PUSH
2199: LD_INT 6
2201: ST_TO_ADDR
// if jmm_units + 1 < vcount then
2202: LD_EXP 4
2206: PUSH
2207: LD_INT 1
2209: PLUS
2210: PUSH
2211: LD_VAR 0 9
2215: LESS
2216: IFFALSE 2232
// vcount := jmm_units + 1 ;
2218: LD_ADDR_VAR 0 9
2222: PUSH
2223: LD_EXP 4
2227: PUSH
2228: LD_INT 1
2230: PLUS
2231: ST_TO_ADDR
// for i := 1 to vcount do
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: DOUBLE
2238: LD_INT 1
2240: DEC
2241: ST_TO_ADDR
2242: LD_VAR 0 9
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2385
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 3
2260: PPUSH
2261: LD_VAR 0 6
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: LD_VAR 0 6
2280: PUSH
2281: LD_VAR 0 2
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 6
2295: PUSH
2296: LD_VAR 0 2
2300: ARRAY
2301: PUSH
2302: LD_INT 3
2304: ARRAY
2305: PPUSH
2306: LD_VAR 0 6
2310: PUSH
2311: LD_VAR 0 2
2315: ARRAY
2316: PUSH
2317: LD_INT 4
2319: ARRAY
2320: PPUSH
2321: LD_INT 40
2323: PPUSH
2324: CALL 497 0 7
2328: ST_TO_ADDR
// if not got_mech then
2329: LD_VAR 0 7
2333: NOT
2334: IFFALSE 2360
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_VAR 0 6
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_INT 6
2354: ARRAY
2355: PPUSH
2356: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_VAR 0 3
2377: PPUSH
2378: CALL_OW 2
2382: ST_TO_ADDR
// end ;
2383: GO 2247
2385: POP
2386: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
2387: LD_EXP 37
2391: PPUSH
2392: LD_INT 194
2394: PPUSH
2395: LD_INT 119
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 48
// if tmp then
2405: LD_VAR 0 4
2409: IFFALSE 2597
// begin for i in tmp do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_VAR 0 4
2420: PUSH
2421: FOR_IN
2422: IFFALSE 2595
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL_OW 257
2433: PUSH
2434: LD_INT 1
2436: NONEQUAL
2437: PUSH
2438: LD_VAR 0 2
2442: PUSH
2443: LD_EXP 41
2447: NONEQUAL
2448: AND
2449: IFFALSE 2463
// SetClass ( i , 1 ) ;
2451: LD_VAR 0 2
2455: PPUSH
2456: LD_INT 1
2458: PPUSH
2459: CALL_OW 336
// if i = Khatam then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_EXP 41
2472: EQUAL
2473: IFFALSE 2487
// SetClass ( i , 4 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 4
2482: PPUSH
2483: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2487: LD_ADDR_VAR 0 8
2491: PUSH
2492: LD_INT 22
2494: PUSH
2495: LD_INT 1
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 21
2504: PUSH
2505: LD_INT 2
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 58
2514: PUSH
2515: EMPTY
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2528: LD_VAR 0 2
2532: PPUSH
2533: CALL_OW 247
2537: PUSH
2538: LD_INT 1
2540: EQUAL
2541: PUSH
2542: LD_VAR 0 8
2546: AND
2547: IFFALSE 2569
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2549: LD_VAR 0 2
2553: PPUSH
2554: LD_VAR 0 8
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PPUSH
2563: CALL_OW 52
2567: GO 2584
// PlaceUnitArea ( i , startArea , false ) ;
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 0
2579: PPUSH
2580: CALL_OW 49
// ComHold ( i ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: CALL_OW 140
// end ;
2593: GO 2421
2595: POP
2596: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2597: LD_ADDR_EXP 7
2601: PUSH
2602: LD_STRING 02_mikhailStatus_1
2604: PPUSH
2605: LD_INT 0
2607: PPUSH
2608: CALL_OW 30
2612: ST_TO_ADDR
// if not bierezov_exist and not debug then
2613: LD_EXP 7
2617: NOT
2618: PUSH
2619: LD_EXP 1
2623: NOT
2624: AND
2625: IFFALSE 2629
// exit ;
2627: GO 2663
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2629: LD_ADDR_EXP 45
2633: PUSH
2634: LD_STRING Mikhail
2636: PPUSH
2637: LD_INT 0
2639: PPUSH
2640: LD_STRING 
2642: PPUSH
2643: CALL 39308 0 3
2647: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2648: LD_EXP 45
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 49
// end ;
2663: LD_VAR 0 1
2667: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
2673: PPUSH
// uc_side := 4 ;
2674: LD_ADDR_OWVAR 20
2678: PUSH
2679: LD_INT 4
2681: ST_TO_ADDR
// uc_nation := 1 ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 1
2689: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2690: LD_ADDR_EXP 44
2694: PUSH
2695: LD_STRING Cornell
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: LD_STRING 
2703: PPUSH
2704: CALL 39308 0 3
2708: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2709: LD_ADDR_EXP 6
2713: PUSH
2714: LD_INT 9
2716: PUSH
2717: LD_EXP 4
2721: MINUS
2722: ST_TO_ADDR
// tmp := [ ] ;
2723: LD_ADDR_VAR 0 2
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// if cornel_units < 4 then
2730: LD_EXP 6
2734: PUSH
2735: LD_INT 4
2737: LESS
2738: IFFALSE 2748
// cornel_units := 4 ;
2740: LD_ADDR_EXP 6
2744: PUSH
2745: LD_INT 4
2747: ST_TO_ADDR
// for i = 1 to cornel_units do
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: DOUBLE
2754: LD_INT 1
2756: DEC
2757: ST_TO_ADDR
2758: LD_EXP 6
2762: PUSH
2763: FOR_TO
2764: IFFALSE 2862
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2766: LD_INT 0
2768: PPUSH
2769: LD_INT 1
2771: PUSH
2772: LD_INT 1
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: LD_INT 4
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: PUSH
2791: LD_VAR 0 4
2795: PUSH
2796: LD_INT 5
2798: MOD
2799: PUSH
2800: LD_INT 1
2802: PLUS
2803: ARRAY
2804: PPUSH
2805: LD_INT 2
2807: PPUSH
2808: CALL_OW 380
// un := CreateHuman ;
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: CALL_OW 44
2821: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2822: LD_ADDR_VAR 0 2
2826: PUSH
2827: LD_VAR 0 2
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: LD_VAR 0 3
2839: PPUSH
2840: CALL_OW 2
2844: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2845: LD_VAR 0 3
2849: PPUSH
2850: LD_INT 2
2852: PPUSH
2853: LD_INT 0
2855: PPUSH
2856: CALL_OW 49
// end ;
2860: GO 2763
2862: POP
2863: POP
// cornel_units := tmp ;
2864: LD_ADDR_EXP 6
2868: PUSH
2869: LD_VAR 0 2
2873: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2874: LD_EXP 44
2878: PPUSH
2879: LD_INT 191
2881: PPUSH
2882: LD_INT 106
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 48
// end ;
2892: LD_VAR 0 1
2896: RET
// export function PrepareWesternBase ; var i ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
// uc_side := 8 ;
2901: LD_ADDR_OWVAR 20
2905: PUSH
2906: LD_INT 8
2908: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2909: LD_ADDR_EXP 47
2913: PUSH
2914: LD_STRING Lynch
2916: PPUSH
2917: LD_INT 0
2919: PPUSH
2920: LD_STRING 
2922: PPUSH
2923: CALL 39308 0 3
2927: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2928: LD_ADDR_EXP 48
2932: PUSH
2933: LD_STRING Walker
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: LD_STRING 
2941: PPUSH
2942: CALL 39308 0 3
2946: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2947: LD_ADDR_EXP 49
2951: PUSH
2952: LD_STRING Turner
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: LD_STRING 
2960: PPUSH
2961: CALL 39308 0 3
2965: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2966: LD_ADDR_EXP 50
2970: PUSH
2971: LD_STRING Jillian
2973: PPUSH
2974: LD_INT 0
2976: PPUSH
2977: LD_STRING 
2979: PPUSH
2980: CALL 39308 0 3
2984: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: LD_EXP 47
2994: PUSH
2995: LD_EXP 48
2999: PUSH
3000: LD_EXP 49
3004: PUSH
3005: LD_EXP 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: FOR_IN
3017: IFFALSE 3045
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 3
3026: PPUSH
3027: LD_INT 0
3029: PPUSH
3030: CALL_OW 49
// ComHold ( i ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 140
// end ;
3043: GO 3016
3045: POP
3046: POP
// end ;
3047: LD_VAR 0 1
3051: RET
// export function SelectGroup ; var units , selected , i ; begin
3052: LD_INT 0
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
3058: LD_ADDR_VAR 0 2
3062: PUSH
3063: LD_EXP 37
3067: PUSH
3068: LD_INT -3
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: LD_EXP 4
3079: ADD
3080: PUSH
3081: LD_INT -2
3083: PUSH
3084: LD_INT -4
3086: PUSH
3087: LD_EXP 44
3091: PUSH
3092: LD_EXP 45
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: ADD
3103: PUSH
3104: LD_INT -3
3106: PUSH
3107: EMPTY
3108: LIST
3109: ADD
3110: PUSH
3111: LD_EXP 6
3115: ADD
3116: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
3117: LD_ADDR_VAR 0 3
3121: PUSH
3122: LD_EXP 37
3126: PUSH
3127: LD_STRING Select four characters to go with you
3129: PPUSH
3130: LD_INT 4
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: LD_VAR 0 2
3140: PPUSH
3141: EMPTY
3142: PPUSH
3143: CALL_OW 42
3147: ADD
3148: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
3149: LD_ADDR_EXP 6
3153: PUSH
3154: LD_EXP 4
3158: PUSH
3159: LD_EXP 6
3163: UNION
3164: PUSH
3165: LD_VAR 0 3
3169: DIFF
3170: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
3171: LD_ADDR_VAR 0 4
3175: PUSH
3176: LD_EXP 6
3180: PUSH
3181: LD_EXP 45
3185: ADD
3186: PUSH
3187: FOR_IN
3188: IFFALSE 3219
// if GetSide ( i ) = 1 then
3190: LD_VAR 0 4
3194: PPUSH
3195: CALL_OW 255
3199: PUSH
3200: LD_INT 1
3202: EQUAL
3203: IFFALSE 3217
// SetSide ( i , 4 ) ;
3205: LD_VAR 0 4
3209: PPUSH
3210: LD_INT 4
3212: PPUSH
3213: CALL_OW 235
3217: GO 3187
3219: POP
3220: POP
// for i in selected do
3221: LD_ADDR_VAR 0 4
3225: PUSH
3226: LD_VAR 0 3
3230: PUSH
3231: FOR_IN
3232: IFFALSE 3263
// if GetSide ( i ) = 4 then
3234: LD_VAR 0 4
3238: PPUSH
3239: CALL_OW 255
3243: PUSH
3244: LD_INT 4
3246: EQUAL
3247: IFFALSE 3261
// SetSide ( i , 1 ) ;
3249: LD_VAR 0 4
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: CALL_OW 235
3261: GO 3231
3263: POP
3264: POP
// jmm_units := jmm_units diff cornel_units ;
3265: LD_ADDR_EXP 4
3269: PUSH
3270: LD_EXP 4
3274: PUSH
3275: LD_EXP 6
3279: DIFF
3280: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
3281: LD_EXP 38
3285: PPUSH
3286: CALL_OW 255
3290: PUSH
3291: LD_INT 4
3293: EQUAL
3294: IFFALSE 3309
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
3296: LD_EXP 3
3300: PUSH
3301: LD_STRING Bobby
3303: STR
3304: PPUSH
3305: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
3309: LD_EXP 39
3313: PPUSH
3314: CALL_OW 255
3318: PUSH
3319: LD_INT 4
3321: EQUAL
3322: IFFALSE 3337
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
3324: LD_EXP 3
3328: PUSH
3329: LD_STRING Cyrus
3331: STR
3332: PPUSH
3333: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
3337: LD_EXP 40
3341: PPUSH
3342: CALL_OW 255
3346: PUSH
3347: LD_INT 4
3349: EQUAL
3350: IFFALSE 3365
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
3352: LD_EXP 3
3356: PUSH
3357: LD_STRING Lisa
3359: STR
3360: PPUSH
3361: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
3365: LD_EXP 41
3369: PPUSH
3370: CALL_OW 255
3374: PUSH
3375: LD_INT 4
3377: EQUAL
3378: IFFALSE 3393
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
3380: LD_EXP 3
3384: PUSH
3385: LD_STRING Khatam
3387: STR
3388: PPUSH
3389: CALL_OW 40
// if GetSide ( Brian ) = 4 then
3393: LD_EXP 42
3397: PPUSH
3398: CALL_OW 255
3402: PUSH
3403: LD_INT 4
3405: EQUAL
3406: IFFALSE 3421
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3408: LD_EXP 3
3412: PUSH
3413: LD_STRING Brian
3415: STR
3416: PPUSH
3417: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3421: LD_EXP 43
3425: PPUSH
3426: CALL_OW 255
3430: PUSH
3431: LD_INT 4
3433: EQUAL
3434: IFFALSE 3449
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3436: LD_EXP 3
3440: PUSH
3441: LD_STRING Jerry
3443: STR
3444: PPUSH
3445: CALL_OW 40
// end ; end_of_file
3449: LD_VAR 0 1
3453: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3454: LD_INT 0
3456: PPUSH
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
// ru_alert := false ;
3469: LD_ADDR_EXP 60
3473: PUSH
3474: LD_INT 0
3476: ST_TO_ADDR
// ru_produce_list := [ ] ;
3477: LD_ADDR_EXP 57
3481: PUSH
3482: EMPTY
3483: ST_TO_ADDR
// if Difficulty > 1 then
3484: LD_OWVAR 67
3488: PUSH
3489: LD_INT 1
3491: GREATER
3492: IFFALSE 3616
// begin uc_side := 3 ;
3494: LD_ADDR_OWVAR 20
3498: PUSH
3499: LD_INT 3
3501: ST_TO_ADDR
// uc_nation := 3 ;
3502: LD_ADDR_OWVAR 21
3506: PUSH
3507: LD_INT 3
3509: ST_TO_ADDR
// bc_type := b_breastwork ;
3510: LD_ADDR_OWVAR 42
3514: PUSH
3515: LD_INT 31
3517: ST_TO_ADDR
// bc_level := Difficulty ;
3518: LD_ADDR_OWVAR 43
3522: PUSH
3523: LD_OWVAR 67
3527: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3528: LD_INT 22
3530: PPUSH
3531: LD_INT 14
3533: PPUSH
3534: LD_INT 0
3536: PPUSH
3537: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3541: LD_INT 48
3543: PPUSH
3544: LD_INT 46
3546: PPUSH
3547: LD_INT 0
3549: PPUSH
3550: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3554: LD_INT 86
3556: PPUSH
3557: LD_INT 65
3559: PPUSH
3560: LD_INT 5
3562: PPUSH
3563: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3567: LD_INT 165
3569: PPUSH
3570: LD_INT 73
3572: PPUSH
3573: LD_INT 5
3575: PPUSH
3576: CALL_OW 47
// if Difficulty > 2 then
3580: LD_OWVAR 67
3584: PUSH
3585: LD_INT 2
3587: GREATER
3588: IFFALSE 3616
// begin CreateAndPlaceBuildingXYD ( 152 , 114 , 4 ) ;
3590: LD_INT 152
3592: PPUSH
3593: LD_INT 114
3595: PPUSH
3596: LD_INT 4
3598: PPUSH
3599: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 157 , 97 , 4 ) ;
3603: LD_INT 157
3605: PPUSH
3606: LD_INT 97
3608: PPUSH
3609: LD_INT 4
3611: PPUSH
3612: CALL_OW 47
// end ; end ; if Difficulty >= 3 then
3616: LD_OWVAR 67
3620: PUSH
3621: LD_INT 3
3623: GREATEREQUAL
3624: IFFALSE 3639
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3626: LD_INT 51
3628: PPUSH
3629: LD_INT 3
3631: PPUSH
3632: LD_INT 2
3634: PPUSH
3635: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3639: LD_ADDR_VAR 0 7
3643: PUSH
3644: LD_INT 22
3646: PUSH
3647: LD_INT 3
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 2
3656: PUSH
3657: LD_INT 30
3659: PUSH
3660: LD_INT 31
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PUSH
3667: LD_INT 30
3669: PUSH
3670: LD_INT 32
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3691: LD_ADDR_VAR 0 8
3695: PUSH
3696: LD_INT 22
3698: PUSH
3699: LD_INT 3
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: LD_INT 30
3708: PUSH
3709: LD_INT 4
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PPUSH
3720: CALL_OW 69
3724: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3725: LD_ADDR_VAR 0 10
3729: PUSH
3730: LD_INT 22
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PUSH
3740: LD_INT 30
3742: PUSH
3743: LD_INT 3
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: PPUSH
3754: CALL_OW 69
3758: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3759: LD_ADDR_VAR 0 9
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 3
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 30
3776: PUSH
3777: LD_INT 6
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PPUSH
3788: CALL_OW 69
3792: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3793: LD_ADDR_VAR 0 2
3797: PUSH
3798: LD_INT 22
3800: PUSH
3801: LD_INT 3
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: LD_INT 30
3810: PUSH
3811: LD_INT 1
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PPUSH
3822: CALL_OW 69
3826: PUSH
3827: FOR_IN
3828: IFFALSE 3872
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3830: LD_VAR 0 2
3834: PPUSH
3835: CALL_OW 274
3839: PPUSH
3840: LD_INT 1
3842: PPUSH
3843: LD_INT 1000
3845: PPUSH
3846: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3850: LD_VAR 0 2
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 2
3862: PPUSH
3863: LD_INT 300
3865: PPUSH
3866: CALL_OW 277
// end ;
3870: GO 3827
3872: POP
3873: POP
// uc_side := 3 ;
3874: LD_ADDR_OWVAR 20
3878: PUSH
3879: LD_INT 3
3881: ST_TO_ADDR
// uc_nation := 3 ;
3882: LD_ADDR_OWVAR 21
3886: PUSH
3887: LD_INT 3
3889: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3890: LD_ADDR_VAR 0 11
3894: PUSH
3895: LD_INT 2
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: LD_INT 4
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: PUSH
3913: LD_OWVAR 67
3917: ARRAY
3918: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3919: LD_ADDR_EXP 52
3923: PUSH
3924: LD_STRING Pokryshkin
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: LD_STRING 
3932: PPUSH
3933: CALL 39308 0 3
3937: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3938: LD_EXP 52
3942: PPUSH
3943: LD_INT 63
3945: PPUSH
3946: LD_INT 21
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3956: LD_EXP 52
3960: PPUSH
3961: CALL_OW 140
// InitHc ;
3965: CALL_OW 19
// for i in fac do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: LD_VAR 0 10
3978: PUSH
3979: FOR_IN
3980: IFFALSE 4033
// begin for j = 1 to 6 do
3982: LD_ADDR_VAR 0 3
3986: PUSH
3987: DOUBLE
3988: LD_INT 1
3990: DEC
3991: ST_TO_ADDR
3992: LD_INT 6
3994: PUSH
3995: FOR_TO
3996: IFFALSE 4029
// begin PrepareHuman ( false , 3 , skill ) ;
3998: LD_INT 0
4000: PPUSH
4001: LD_INT 3
4003: PPUSH
4004: LD_VAR 0 11
4008: PPUSH
4009: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4013: CALL_OW 44
4017: PPUSH
4018: LD_VAR 0 2
4022: PPUSH
4023: CALL_OW 52
// end ;
4027: GO 3995
4029: POP
4030: POP
// end ;
4031: GO 3979
4033: POP
4034: POP
// for i in lab do
4035: LD_ADDR_VAR 0 2
4039: PUSH
4040: LD_VAR 0 9
4044: PUSH
4045: FOR_IN
4046: IFFALSE 4079
// begin PrepareHuman ( false , 4 , skill ) ;
4048: LD_INT 0
4050: PPUSH
4051: LD_INT 4
4053: PPUSH
4054: LD_VAR 0 11
4058: PPUSH
4059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4063: CALL_OW 44
4067: PPUSH
4068: LD_VAR 0 2
4072: PPUSH
4073: CALL_OW 52
// end ;
4077: GO 4045
4079: POP
4080: POP
// for i in tw do
4081: LD_ADDR_VAR 0 2
4085: PUSH
4086: LD_VAR 0 7
4090: PUSH
4091: FOR_IN
4092: IFFALSE 4141
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
4094: LD_VAR 0 2
4098: PPUSH
4099: LD_INT 42
4101: PUSH
4102: LD_INT 43
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 1
4111: PPUSH
4112: LD_INT 2
4114: PPUSH
4115: CALL_OW 12
4119: ARRAY
4120: PPUSH
4121: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
4125: LD_VAR 0 11
4129: PPUSH
4130: LD_VAR 0 2
4134: PPUSH
4135: CALL 775 0 2
// end ;
4139: GO 4091
4141: POP
4142: POP
// for i in bar do
4143: LD_ADDR_VAR 0 2
4147: PUSH
4148: LD_VAR 0 8
4152: PUSH
4153: FOR_IN
4154: IFFALSE 4187
// begin PrepareHuman ( false , 1 , skill ) ;
4156: LD_INT 0
4158: PPUSH
4159: LD_INT 1
4161: PPUSH
4162: LD_VAR 0 11
4166: PPUSH
4167: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4171: CALL_OW 44
4175: PPUSH
4176: LD_VAR 0 2
4180: PPUSH
4181: CALL_OW 52
// end ;
4185: GO 4153
4187: POP
4188: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
4189: LD_ADDR_VAR 0 13
4193: PUSH
4194: LD_INT 100
4196: PUSH
4197: LD_INT 9
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 135
4206: PUSH
4207: LD_INT 60
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: LD_INT 41
4216: PUSH
4217: LD_INT 6
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: LD_INT 22
4226: PUSH
4227: LD_INT 9
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 84
4236: PUSH
4237: LD_INT 14
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: ST_TO_ADDR
// vehicles := [ ] ;
4251: LD_ADDR_VAR 0 12
4255: PUSH
4256: EMPTY
4257: ST_TO_ADDR
// for i in spot_xy do
4258: LD_ADDR_VAR 0 2
4262: PUSH
4263: LD_VAR 0 13
4267: PUSH
4268: FOR_IN
4269: IFFALSE 4427
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
4271: LD_ADDR_VAR 0 6
4275: PUSH
4276: LD_INT 3
4278: PPUSH
4279: LD_INT 3
4281: PPUSH
4282: LD_INT 22
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 1
4290: PPUSH
4291: LD_INT 42
4293: PUSH
4294: LD_INT 43
4296: PUSH
4297: LD_INT 44
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 3
4310: PPUSH
4311: CALL_OW 12
4315: ARRAY
4316: PPUSH
4317: LD_INT 100
4319: PPUSH
4320: CALL 497 0 7
4324: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
4325: LD_ADDR_VAR 0 12
4329: PUSH
4330: LD_VAR 0 12
4334: PPUSH
4335: LD_VAR 0 12
4339: PUSH
4340: LD_INT 1
4342: PLUS
4343: PPUSH
4344: LD_VAR 0 6
4348: PPUSH
4349: CALL_OW 2
4353: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4354: LD_VAR 0 6
4358: PPUSH
4359: LD_INT 3
4361: PPUSH
4362: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
4366: LD_VAR 0 6
4370: PPUSH
4371: LD_VAR 0 2
4375: PUSH
4376: LD_INT 1
4378: ARRAY
4379: PPUSH
4380: LD_VAR 0 2
4384: PUSH
4385: LD_INT 2
4387: ARRAY
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
4396: LD_INT 0
4398: PPUSH
4399: LD_INT 3
4401: PPUSH
4402: LD_VAR 0 11
4406: PPUSH
4407: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4411: CALL_OW 44
4415: PPUSH
4416: LD_VAR 0 6
4420: PPUSH
4421: CALL_OW 52
// end ;
4425: GO 4268
4427: POP
4428: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_INT 5
4441: PUSH
4442: LD_INT 7
4444: PUSH
4445: LD_INT 8
4447: PUSH
4448: LD_INT 9
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PUSH
4463: FOR_TO
4464: IFFALSE 4524
// begin PrepareHuman ( false , 1 , skill ) ;
4466: LD_INT 0
4468: PPUSH
4469: LD_INT 1
4471: PPUSH
4472: LD_VAR 0 11
4476: PPUSH
4477: CALL_OW 380
// un := CreateHuman ;
4481: LD_ADDR_VAR 0 5
4485: PUSH
4486: CALL_OW 44
4490: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4491: LD_VAR 0 5
4495: PPUSH
4496: LD_INT 11
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4506: LD_ADDR_EXP 55
4510: PUSH
4511: LD_EXP 55
4515: PUSH
4516: LD_VAR 0 5
4520: ADD
4521: ST_TO_ADDR
// end ;
4522: GO 4463
4524: POP
4525: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 2
4538: PUSH
4539: LD_INT 3
4541: PUSH
4542: LD_INT 4
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PUSH
4554: LD_OWVAR 67
4558: ARRAY
4559: PUSH
4560: FOR_TO
4561: IFFALSE 4621
// begin PrepareHuman ( false , 1 , skill ) ;
4563: LD_INT 0
4565: PPUSH
4566: LD_INT 1
4568: PPUSH
4569: LD_VAR 0 11
4573: PPUSH
4574: CALL_OW 380
// un := CreateHuman ;
4578: LD_ADDR_VAR 0 5
4582: PUSH
4583: CALL_OW 44
4587: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4588: LD_VAR 0 5
4592: PPUSH
4593: LD_INT 12
4595: PPUSH
4596: LD_INT 0
4598: PPUSH
4599: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4603: LD_ADDR_EXP 53
4607: PUSH
4608: LD_EXP 53
4612: PUSH
4613: LD_VAR 0 5
4617: ADD
4618: ST_TO_ADDR
// end ;
4619: GO 4560
4621: POP
4622: POP
// for i = 1 to 2 do
4623: LD_ADDR_VAR 0 2
4627: PUSH
4628: DOUBLE
4629: LD_INT 1
4631: DEC
4632: ST_TO_ADDR
4633: LD_INT 2
4635: PUSH
4636: FOR_TO
4637: IFFALSE 4730
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4639: LD_INT 1
4641: PPUSH
4642: LD_INT 1
4644: PPUSH
4645: LD_VAR 0 11
4649: PPUSH
4650: CALL_OW 380
// hc_attr := [ 8 + Difficulty , 8 + Difficulty ] ;
4654: LD_ADDR_OWVAR 29
4658: PUSH
4659: LD_INT 8
4661: PUSH
4662: LD_OWVAR 67
4666: PLUS
4667: PUSH
4668: LD_INT 8
4670: PUSH
4671: LD_OWVAR 67
4675: PLUS
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: ST_TO_ADDR
// un := CreateHuman ;
4681: LD_ADDR_VAR 0 5
4685: PUSH
4686: CALL_OW 44
4690: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4691: LD_VAR 0 5
4695: PPUSH
4696: LD_INT 39
4698: PPUSH
4699: LD_INT 12
4701: PPUSH
4702: LD_INT 3
4704: PPUSH
4705: LD_INT 0
4707: PPUSH
4708: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4712: LD_ADDR_EXP 54
4716: PUSH
4717: LD_EXP 54
4721: PUSH
4722: LD_VAR 0 5
4726: ADD
4727: ST_TO_ADDR
// end ;
4728: GO 4636
4730: POP
4731: POP
// InitHc ;
4732: CALL_OW 19
// for i = 1 to 3 do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_INT 3
4748: PUSH
4749: FOR_TO
4750: IFFALSE 4816
// begin PrepareHuman ( false , 1 , skill ) ;
4752: LD_INT 0
4754: PPUSH
4755: LD_INT 1
4757: PPUSH
4758: LD_VAR 0 11
4762: PPUSH
4763: CALL_OW 380
// un := CreateHuman ;
4767: LD_ADDR_VAR 0 5
4771: PUSH
4772: CALL_OW 44
4776: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4777: LD_VAR 0 5
4781: PPUSH
4782: LD_INT 180
4784: PPUSH
4785: LD_INT 11
4787: PPUSH
4788: LD_INT 4
4790: PPUSH
4791: LD_INT 0
4793: PPUSH
4794: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4798: LD_ADDR_EXP 58
4802: PUSH
4803: LD_EXP 58
4807: PUSH
4808: LD_VAR 0 5
4812: ADD
4813: ST_TO_ADDR
// end ;
4814: GO 4749
4816: POP
4817: POP
// ru_vehicles := vehicles ;
4818: LD_ADDR_EXP 56
4822: PUSH
4823: LD_VAR 0 12
4827: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4828: LD_ADDR_EXP 59
4832: PUSH
4833: LD_INT 131
4835: PUSH
4836: LD_INT 121
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 113
4845: PUSH
4846: LD_INT 90
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 93
4855: PUSH
4856: LD_INT 62
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 106
4870: PUSH
4871: LD_INT 54
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: LD_INT 120
4880: PUSH
4881: LD_INT 80
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 143
4890: PUSH
4891: LD_INT 120
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: PUSH
4903: LD_INT 154
4905: PUSH
4906: LD_INT 116
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: LD_INT 140
4915: PUSH
4916: LD_INT 93
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: LD_INT 130
4925: PUSH
4926: LD_INT 58
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: PUSH
4938: LD_INT 105
4940: PUSH
4941: LD_INT 106
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 134
4950: PUSH
4951: LD_INT 98
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 159
4960: PUSH
4961: LD_INT 113
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: ST_TO_ADDR
// if Difficulty = 1 then
4979: LD_OWVAR 67
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: IFFALSE 4991
// exit ;
4989: GO 5046
// for i = 1 to Difficulty - 1 do
4991: LD_ADDR_VAR 0 2
4995: PUSH
4996: DOUBLE
4997: LD_INT 1
4999: DEC
5000: ST_TO_ADDR
5001: LD_OWVAR 67
5005: PUSH
5006: LD_INT 1
5008: MINUS
5009: PUSH
5010: FOR_TO
5011: IFFALSE 5044
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
5013: LD_ADDR_EXP 57
5017: PUSH
5018: LD_EXP 57
5022: PUSH
5023: LD_INT 22
5025: PUSH
5026: LD_INT 1
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: LD_INT 43
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: ADD
5041: ST_TO_ADDR
5042: GO 5010
5044: POP
5045: POP
// end ;
5046: LD_VAR 0 1
5050: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
5051: LD_INT 22
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 21
5063: PUSH
5064: LD_INT 2
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PPUSH
5075: CALL_OW 69
5079: IFFALSE 5173
5081: GO 5083
5083: DISABLE
5084: LD_INT 0
5086: PPUSH
5087: PPUSH
// begin enable ;
5088: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
5089: LD_ADDR_VAR 0 2
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_INT 3
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 2
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PPUSH
5118: CALL_OW 69
5122: ST_TO_ADDR
// if filter then
5123: LD_VAR 0 2
5127: IFFALSE 5173
// for i in filter do
5129: LD_ADDR_VAR 0 1
5133: PUSH
5134: LD_VAR 0 2
5138: PUSH
5139: FOR_IN
5140: IFFALSE 5171
// if GetFuel ( i ) < 20 then
5142: LD_VAR 0 1
5146: PPUSH
5147: CALL_OW 261
5151: PUSH
5152: LD_INT 20
5154: LESS
5155: IFFALSE 5169
// SetFuel ( i , 20 ) ;
5157: LD_VAR 0 1
5161: PPUSH
5162: LD_INT 20
5164: PPUSH
5165: CALL_OW 240
5169: GO 5139
5171: POP
5172: POP
// end ;
5173: PPOPN 2
5175: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
5176: LD_EXP 57
5180: IFFALSE 5399
5182: GO 5184
5184: DISABLE
5185: LD_INT 0
5187: PPUSH
5188: PPUSH
5189: PPUSH
// begin enable ;
5190: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
5191: LD_ADDR_VAR 0 2
5195: PUSH
5196: LD_INT 22
5198: PUSH
5199: LD_INT 3
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 30
5208: PUSH
5209: LD_INT 3
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PPUSH
5220: CALL_OW 69
5224: ST_TO_ADDR
// can_produce := [ ] ;
5225: LD_ADDR_VAR 0 3
5229: PUSH
5230: EMPTY
5231: ST_TO_ADDR
// if not fac then
5232: LD_VAR 0 2
5236: NOT
5237: IFFALSE 5242
// begin disable ;
5239: DISABLE
// exit ;
5240: GO 5399
// end ; for i in fac do
5242: LD_ADDR_VAR 0 1
5246: PUSH
5247: LD_VAR 0 2
5251: PUSH
5252: FOR_IN
5253: IFFALSE 5291
// if UnitsInside ( i ) then
5255: LD_VAR 0 1
5259: PPUSH
5260: CALL_OW 313
5264: IFFALSE 5289
// can_produce := Insert ( can_produce , 1 , i ) ;
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_VAR 0 3
5275: PPUSH
5276: LD_INT 1
5278: PPUSH
5279: LD_VAR 0 1
5283: PPUSH
5284: CALL_OW 2
5288: ST_TO_ADDR
5289: GO 5252
5291: POP
5292: POP
// if not can_produce then
5293: LD_VAR 0 3
5297: NOT
5298: IFFALSE 5302
// exit ;
5300: GO 5399
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
5302: LD_VAR 0 3
5306: PUSH
5307: LD_INT 1
5309: PPUSH
5310: LD_VAR 0 3
5314: PPUSH
5315: CALL_OW 12
5319: ARRAY
5320: PPUSH
5321: LD_EXP 57
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: LD_EXP 57
5334: PUSH
5335: LD_INT 2
5337: ARRAY
5338: PPUSH
5339: LD_EXP 57
5343: PUSH
5344: LD_INT 3
5346: ARRAY
5347: PPUSH
5348: LD_EXP 57
5352: PUSH
5353: LD_INT 4
5355: ARRAY
5356: PPUSH
5357: CALL_OW 125
// for i = 1 to 4 do
5361: LD_ADDR_VAR 0 1
5365: PUSH
5366: DOUBLE
5367: LD_INT 1
5369: DEC
5370: ST_TO_ADDR
5371: LD_INT 4
5373: PUSH
5374: FOR_TO
5375: IFFALSE 5397
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
5377: LD_ADDR_EXP 57
5381: PUSH
5382: LD_EXP 57
5386: PPUSH
5387: LD_INT 1
5389: PPUSH
5390: CALL_OW 3
5394: ST_TO_ADDR
5395: GO 5374
5397: POP
5398: POP
// end ;
5399: PPOPN 3
5401: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
5402: LD_INT 0
5404: PPUSH
5405: PPUSH
5406: PPUSH
// for i = 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
5407: LD_ADDR_VAR 0 2
5411: PUSH
5412: DOUBLE
5413: LD_INT 1
5415: DEC
5416: ST_TO_ADDR
5417: LD_INT 2
5419: PUSH
5420: LD_INT 3
5422: PUSH
5423: LD_INT 3
5425: PUSH
5426: LD_INT 3
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: LD_OWVAR 67
5439: ARRAY
5440: PUSH
5441: FOR_TO
5442: IFFALSE 5591
// begin PrepareHuman ( false , 3 , 3 ) ;
5444: LD_INT 0
5446: PPUSH
5447: LD_INT 3
5449: PPUSH
5450: LD_INT 3
5452: PPUSH
5453: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
5457: LD_ADDR_VAR 0 3
5461: PUSH
5462: LD_INT 3
5464: PPUSH
5465: LD_INT 3
5467: PPUSH
5468: LD_INT 22
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: LD_INT 1
5476: PPUSH
5477: LD_INT 43
5479: PUSH
5480: LD_INT 42
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 1
5489: PPUSH
5490: LD_INT 2
5492: PPUSH
5493: CALL_OW 12
5497: ARRAY
5498: PPUSH
5499: LD_INT 70
5501: PPUSH
5502: CALL 497 0 7
5506: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5507: LD_VAR 0 3
5511: PPUSH
5512: LD_INT 4
5514: PPUSH
5515: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5519: LD_VAR 0 3
5523: PPUSH
5524: LD_INT 229
5526: PPUSH
5527: LD_INT 44
5529: PPUSH
5530: LD_INT 0
5532: PPUSH
5533: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5537: CALL_OW 44
5541: PPUSH
5542: LD_VAR 0 3
5546: PPUSH
5547: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5551: LD_ADDR_EXP 56
5555: PUSH
5556: LD_EXP 56
5560: PUSH
5561: LD_VAR 0 3
5565: ADD
5566: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5567: LD_VAR 0 3
5571: PPUSH
5572: LD_INT 191
5574: PPUSH
5575: LD_INT 32
5577: PPUSH
5578: CALL_OW 111
// Wait ( 0 0$02 ) ;
5582: LD_INT 70
5584: PPUSH
5585: CALL_OW 67
// end ;
5589: GO 5441
5591: POP
5592: POP
// end ;
5593: LD_VAR 0 1
5597: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5598: LD_EXP 31
5602: PUSH
5603: LD_EXP 56
5607: AND
5608: IFFALSE 5782
5610: GO 5612
5612: DISABLE
5613: LD_INT 0
5615: PPUSH
5616: PPUSH
5617: PPUSH
// begin wait ( 0 0$50 ) ;
5618: LD_INT 1750
5620: PPUSH
5621: CALL_OW 67
// tmp := ru_vehicles ;
5625: LD_ADDR_VAR 0 3
5629: PUSH
5630: LD_EXP 56
5634: ST_TO_ADDR
// if not tmp then
5635: LD_VAR 0 3
5639: NOT
5640: IFFALSE 5644
// exit ;
5642: GO 5782
// repeat wait ( 0 0$1 ) ;
5644: LD_INT 35
5646: PPUSH
5647: CALL_OW 67
// for i in tmp do
5651: LD_ADDR_VAR 0 1
5655: PUSH
5656: LD_VAR 0 3
5660: PUSH
5661: FOR_IN
5662: IFFALSE 5773
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5664: LD_ADDR_VAR 0 2
5668: PUSH
5669: LD_INT 22
5671: PUSH
5672: LD_INT 1
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: LD_VAR 0 1
5683: PPUSH
5684: CALL_OW 74
5688: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5689: LD_VAR 0 1
5693: PPUSH
5694: LD_VAR 0 2
5698: PPUSH
5699: CALL_OW 296
5703: PUSH
5704: LD_INT 10
5706: GREATER
5707: IFFALSE 5726
// ComAgressiveMove ( i , 69 , 101 ) else
5709: LD_VAR 0 1
5713: PPUSH
5714: LD_INT 69
5716: PPUSH
5717: LD_INT 101
5719: PPUSH
5720: CALL_OW 114
5724: GO 5740
// ComAttackUnit ( i , enemy ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: CALL_OW 115
// if GetLives ( i ) < 250 then
5740: LD_VAR 0 1
5744: PPUSH
5745: CALL_OW 256
5749: PUSH
5750: LD_INT 250
5752: LESS
5753: IFFALSE 5771
// tmp := tmp diff i ;
5755: LD_ADDR_VAR 0 3
5759: PUSH
5760: LD_VAR 0 3
5764: PUSH
5765: LD_VAR 0 1
5769: DIFF
5770: ST_TO_ADDR
// end ;
5771: GO 5661
5773: POP
5774: POP
// until not tmp ;
5775: LD_VAR 0 3
5779: NOT
5780: IFFALSE 5644
// end ; end_of_file
5782: PPOPN 3
5784: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
// InGameOn ;
5794: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5798: LD_EXP 37
5802: PPUSH
5803: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5807: LD_EXP 37
5811: PPUSH
5812: LD_EXP 44
5816: PPUSH
5817: CALL_OW 119
// if Bierezov then
5821: LD_EXP 45
5825: IFFALSE 5841
// ComTurnUnit ( Bierezov , Cornel ) ;
5827: LD_EXP 45
5831: PPUSH
5832: LD_EXP 44
5836: PPUSH
5837: CALL_OW 119
// for i in jmm_units do
5841: LD_ADDR_VAR 0 2
5845: PUSH
5846: LD_EXP 4
5850: PUSH
5851: FOR_IN
5852: IFFALSE 5870
// ComTurnUnit ( i , Cornel ) ;
5854: LD_VAR 0 2
5858: PPUSH
5859: LD_EXP 44
5863: PPUSH
5864: CALL_OW 119
5868: GO 5851
5870: POP
5871: POP
// units := cornel_units union Cornel ;
5872: LD_ADDR_VAR 0 3
5876: PUSH
5877: LD_EXP 6
5881: PUSH
5882: LD_EXP 44
5886: UNION
5887: ST_TO_ADDR
// repeat wait ( 1 ) ;
5888: LD_INT 1
5890: PPUSH
5891: CALL_OW 67
// for i in units do
5895: LD_ADDR_VAR 0 2
5899: PUSH
5900: LD_VAR 0 3
5904: PUSH
5905: FOR_IN
5906: IFFALSE 5939
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5908: LD_VAR 0 2
5912: PPUSH
5913: LD_EXP 37
5917: PPUSH
5918: CALL_OW 250
5922: PPUSH
5923: LD_EXP 37
5927: PPUSH
5928: CALL_OW 251
5932: PPUSH
5933: CALL_OW 111
5937: GO 5905
5939: POP
5940: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5941: LD_VAR 0 3
5945: PPUSH
5946: LD_INT 92
5948: PUSH
5949: LD_EXP 37
5953: PPUSH
5954: CALL_OW 250
5958: PUSH
5959: LD_EXP 37
5963: PPUSH
5964: CALL_OW 251
5968: PUSH
5969: LD_INT 10
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PPUSH
5978: CALL_OW 72
5982: PUSH
5983: LD_VAR 0 3
5987: EQUAL
5988: IFFALSE 5888
// for i in units do
5990: LD_ADDR_VAR 0 2
5994: PUSH
5995: LD_VAR 0 3
5999: PUSH
6000: FOR_IN
6001: IFFALSE 6019
// ComTurnUnit ( i , JMM ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_EXP 37
6012: PPUSH
6013: CALL_OW 119
6017: GO 6000
6019: POP
6020: POP
// ComTurnUnit ( Cornel , JMM ) ;
6021: LD_EXP 44
6025: PPUSH
6026: LD_EXP 37
6030: PPUSH
6031: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
6035: LD_EXP 37
6039: PPUSH
6040: LD_STRING D1-JMM-1
6042: PPUSH
6043: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
6047: LD_EXP 44
6051: PPUSH
6052: LD_STRING D1-Corn-1
6054: PPUSH
6055: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
6059: LD_EXP 37
6063: PPUSH
6064: LD_EXP 44
6068: PPUSH
6069: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
6073: LD_EXP 44
6077: PPUSH
6078: LD_EXP 37
6082: PPUSH
6083: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
6087: LD_INT 35
6089: PPUSH
6090: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
6094: LD_EXP 37
6098: PPUSH
6099: LD_EXP 44
6103: PPUSH
6104: CALL_OW 296
6108: PUSH
6109: LD_INT 6
6111: LESS
6112: IFFALSE 6087
// ChangeSideFog ( 4 , 1 ) ;
6114: LD_INT 4
6116: PPUSH
6117: LD_INT 1
6119: PPUSH
6120: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
6124: LD_EXP 37
6128: PPUSH
6129: LD_EXP 44
6133: PPUSH
6134: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6138: LD_EXP 44
6142: PPUSH
6143: LD_EXP 37
6147: PPUSH
6148: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
6152: LD_EXP 37
6156: PPUSH
6157: LD_STRING D1-JMM-2
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
6164: LD_EXP 37
6168: PPUSH
6169: LD_STRING D1-JMM-2a
6171: PPUSH
6172: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
6176: LD_EXP 44
6180: PPUSH
6181: LD_STRING D1-Corn-2
6183: PPUSH
6184: CALL_OW 88
// if bierezov_exist or debug then
6188: LD_EXP 7
6192: PUSH
6193: LD_EXP 1
6197: OR
6198: IFFALSE 6439
// begin ComTurnUnit ( Cornel , Bierezov ) ;
6200: LD_EXP 44
6204: PPUSH
6205: LD_EXP 45
6209: PPUSH
6210: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
6214: LD_INT 10
6216: PPUSH
6217: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
6221: LD_EXP 44
6225: PPUSH
6226: LD_STRING D1a-Corn-1
6228: PPUSH
6229: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
6233: LD_EXP 37
6237: PPUSH
6238: LD_EXP 45
6242: PPUSH
6243: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
6247: LD_EXP 45
6251: PPUSH
6252: LD_EXP 37
6256: PPUSH
6257: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
6261: LD_EXP 37
6265: PPUSH
6266: LD_STRING D1a-JMM-1
6268: PPUSH
6269: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
6273: LD_EXP 37
6277: PPUSH
6278: LD_EXP 44
6282: PPUSH
6283: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6287: LD_EXP 44
6291: PPUSH
6292: LD_EXP 37
6296: PPUSH
6297: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
6301: LD_EXP 44
6305: PPUSH
6306: LD_STRING D1a-Corn-2
6308: PPUSH
6309: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
6313: LD_EXP 37
6317: PPUSH
6318: LD_STRING D1a-JMM-2
6320: PPUSH
6321: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
6325: LD_EXP 44
6329: PPUSH
6330: LD_STRING D1a-Corn-3
6332: PPUSH
6333: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
6337: LD_EXP 37
6341: PPUSH
6342: LD_STRING D1a-JMM-3
6344: PPUSH
6345: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
6349: LD_EXP 44
6353: PPUSH
6354: LD_STRING D1a-Corn-4
6356: PPUSH
6357: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
6361: LD_EXP 37
6365: PPUSH
6366: LD_STRING D1a-JMM-4
6368: PPUSH
6369: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
6373: LD_EXP 44
6377: PPUSH
6378: LD_STRING D1a-Corn-5
6380: PPUSH
6381: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
6385: LD_EXP 45
6389: PPUSH
6390: LD_EXP 44
6394: PPUSH
6395: CALL_OW 250
6399: PPUSH
6400: LD_EXP 44
6404: PPUSH
6405: CALL_OW 251
6409: PUSH
6410: LD_INT 2
6412: MINUS
6413: PPUSH
6414: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
6418: LD_EXP 45
6422: PPUSH
6423: LD_EXP 44
6427: PPUSH
6428: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
6432: LD_INT 10
6434: PPUSH
6435: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
6439: LD_EXP 37
6443: PPUSH
6444: LD_STRING D1b-JMM-1
6446: PPUSH
6447: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
6451: LD_EXP 44
6455: PPUSH
6456: LD_STRING D1b-Corn-1
6458: PPUSH
6459: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6463: LD_EXP 37
6467: PPUSH
6468: LD_STRING D1b-JMM-2
6470: PPUSH
6471: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6475: LD_EXP 44
6479: PPUSH
6480: LD_STRING D1b-Corn-2
6482: PPUSH
6483: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6487: LD_EXP 37
6491: PPUSH
6492: LD_STRING D1b-JMM-3
6494: PPUSH
6495: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6499: LD_INT 10
6501: PPUSH
6502: CALL_OW 67
// SayRadioNoFace ( Powell , D1b-Pow-3 ) ;
6506: LD_EXP 46
6510: PPUSH
6511: LD_STRING D1b-Pow-3
6513: PPUSH
6514: CALL_OW 586
// Say ( JMM , D1b-JMM-4 ) ;
6518: LD_EXP 37
6522: PPUSH
6523: LD_STRING D1b-JMM-4
6525: PPUSH
6526: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6530: LD_EXP 44
6534: PPUSH
6535: LD_STRING D1b-Corn-4
6537: PPUSH
6538: CALL_OW 88
// if Khatam then
6542: LD_EXP 41
6546: IFFALSE 6562
// Say ( Khatam , D1b-Khat-4 ) else
6548: LD_EXP 41
6552: PPUSH
6553: LD_STRING D1b-Khat-4
6555: PPUSH
6556: CALL_OW 88
6560: GO 6598
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6562: LD_EXP 6
6566: PPUSH
6567: LD_INT 26
6569: PUSH
6570: LD_INT 1
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PPUSH
6577: CALL_OW 72
6581: PUSH
6582: LD_EXP 44
6586: PUSH
6587: EMPTY
6588: LIST
6589: DIFF
6590: PPUSH
6591: LD_STRING D1b-Sol1-4
6593: PPUSH
6594: CALL 585 0 2
// if Cyrus then
6598: LD_EXP 39
6602: IFFALSE 6616
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6604: LD_EXP 39
6608: PPUSH
6609: LD_STRING D1b-Cyrus-4
6611: PPUSH
6612: CALL_OW 88
// if Lisa then
6616: LD_EXP 40
6620: IFFALSE 6678
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6622: LD_EXP 40
6626: PPUSH
6627: LD_STRING D1b-Lisa-4
6629: PPUSH
6630: CALL_OW 88
// if Cyrus then
6634: LD_EXP 39
6638: IFFALSE 6678
// begin if not IsInUnit ( Cyrus ) then
6640: LD_EXP 39
6644: PPUSH
6645: CALL_OW 310
6649: NOT
6650: IFFALSE 6666
// ComTurnUnit ( Cyrus , Lisa ) ;
6652: LD_EXP 39
6656: PPUSH
6657: LD_EXP 40
6661: PPUSH
6662: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6666: LD_EXP 39
6670: PPUSH
6671: LD_STRING D1b-Cyrus-5
6673: PPUSH
6674: CALL_OW 88
// end ; end ; SelectGroup ;
6678: CALL 3052 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6682: LD_EXP 37
6686: PPUSH
6687: LD_STRING D1d-JMM-1
6689: PPUSH
6690: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6694: LD_EXP 44
6698: PPUSH
6699: LD_STRING D1d-Corn-1
6701: PPUSH
6702: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6706: LD_ADDR_VAR 0 2
6710: PUSH
6711: LD_EXP 4
6715: PUSH
6716: LD_EXP 6
6720: ADD
6721: PUSH
6722: LD_EXP 37
6726: ADD
6727: PUSH
6728: FOR_IN
6729: IFFALSE 6742
// ComHold ( i ) ;
6731: LD_VAR 0 2
6735: PPUSH
6736: CALL_OW 140
6740: GO 6728
6742: POP
6743: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6744: LD_ADDR_VAR 0 4
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 1
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 21
6761: PUSH
6762: LD_INT 2
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PPUSH
6773: CALL_OW 69
6777: ST_TO_ADDR
// if vehicles then
6778: LD_VAR 0 4
6782: IFFALSE 7120
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6784: LD_EXP 6
6788: PPUSH
6789: LD_INT 55
6791: PUSH
6792: EMPTY
6793: LIST
6794: PPUSH
6795: CALL_OW 72
6799: IFFALSE 6838
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6801: LD_ADDR_VAR 0 2
6805: PUSH
6806: LD_EXP 6
6810: PPUSH
6811: LD_INT 55
6813: PUSH
6814: EMPTY
6815: LIST
6816: PPUSH
6817: CALL_OW 72
6821: PUSH
6822: FOR_IN
6823: IFFALSE 6836
// ComExitVehicle ( i ) ;
6825: LD_VAR 0 2
6829: PPUSH
6830: CALL_OW 121
6834: GO 6822
6836: POP
6837: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6838: LD_ADDR_VAR 0 5
6842: PUSH
6843: LD_VAR 0 4
6847: PPUSH
6848: LD_INT 34
6850: PUSH
6851: LD_INT 51
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 72
6862: ST_TO_ADDR
// if cargos then
6863: LD_VAR 0 5
6867: IFFALSE 7050
// begin vehicles := cargos ;
6869: LD_ADDR_VAR 0 4
6873: PUSH
6874: LD_VAR 0 5
6878: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6879: LD_ADDR_VAR 0 6
6883: PUSH
6884: LD_STRING 02_resources_4
6886: PPUSH
6887: LD_INT 0
6889: PPUSH
6890: CALL_OW 30
6894: ST_TO_ADDR
// if debug and not resources then
6895: LD_EXP 1
6899: PUSH
6900: LD_VAR 0 6
6904: NOT
6905: AND
6906: IFFALSE 6916
// resources := 160 ;
6908: LD_ADDR_VAR 0 6
6912: PUSH
6913: LD_INT 160
6915: ST_TO_ADDR
// if resources mod 10 then
6916: LD_VAR 0 6
6920: PUSH
6921: LD_INT 10
6923: MOD
6924: IFFALSE 6946
// resources := resources - resources mod 10 ;
6926: LD_ADDR_VAR 0 6
6930: PUSH
6931: LD_VAR 0 6
6935: PUSH
6936: LD_VAR 0 6
6940: PUSH
6941: LD_INT 10
6943: MOD
6944: MINUS
6945: ST_TO_ADDR
// if resources then
6946: LD_VAR 0 6
6950: IFFALSE 7050
// for i in cargos do
6952: LD_ADDR_VAR 0 2
6956: PUSH
6957: LD_VAR 0 5
6961: PUSH
6962: FOR_IN
6963: IFFALSE 7048
// begin if resources < 100 then
6965: LD_VAR 0 6
6969: PUSH
6970: LD_INT 100
6972: LESS
6973: IFFALSE 6995
// begin cargo := resources ;
6975: LD_ADDR_VAR 0 7
6979: PUSH
6980: LD_VAR 0 6
6984: ST_TO_ADDR
// resources := 0 ;
6985: LD_ADDR_VAR 0 6
6989: PUSH
6990: LD_INT 0
6992: ST_TO_ADDR
// end else
6993: GO 7017
// begin cargo := 100 ;
6995: LD_ADDR_VAR 0 7
6999: PUSH
7000: LD_INT 100
7002: ST_TO_ADDR
// resources := resources - 100 ;
7003: LD_ADDR_VAR 0 6
7007: PUSH
7008: LD_VAR 0 6
7012: PUSH
7013: LD_INT 100
7015: MINUS
7016: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
7017: LD_VAR 0 2
7021: PPUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_VAR 0 7
7029: PPUSH
7030: CALL_OW 290
// if resources = 0 then
7034: LD_VAR 0 6
7038: PUSH
7039: LD_INT 0
7041: EQUAL
7042: IFFALSE 7046
// break ;
7044: GO 7048
// end ;
7046: GO 6962
7048: POP
7049: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
7050: LD_VAR 0 4
7054: PUSH
7055: LD_INT 1
7057: ARRAY
7058: PPUSH
7059: CALL_OW 311
7063: PPUSH
7064: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
7068: LD_VAR 0 4
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: LD_INT 4
7079: PPUSH
7080: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
7084: LD_EXP 44
7088: PPUSH
7089: LD_VAR 0 4
7093: PUSH
7094: LD_INT 1
7096: ARRAY
7097: PPUSH
7098: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
7102: LD_INT 35
7104: PPUSH
7105: CALL_OW 67
// until IsInUnit ( Cornel ) ;
7109: LD_EXP 44
7113: PPUSH
7114: CALL_OW 310
7118: IFFALSE 7102
// end ; InGameOff ;
7120: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
7124: LD_STRING M1
7126: PPUSH
7127: CALL_OW 337
// SaveForQuickRestart ;
7131: CALL_OW 22
// cornel_active := true ;
7135: LD_ADDR_EXP 8
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// end ;
7143: LD_VAR 0 1
7147: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
7148: LD_EXP 37
7152: PPUSH
7153: LD_EXP 47
7157: PPUSH
7158: CALL_OW 296
7162: PUSH
7163: LD_INT 10
7165: LESS
7166: IFFALSE 8549
7168: GO 7170
7170: DISABLE
7171: LD_INT 0
7173: PPUSH
7174: PPUSH
7175: PPUSH
7176: PPUSH
7177: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
7178: LD_ADDR_VAR 0 2
7182: PUSH
7183: LD_INT 89
7185: PUSH
7186: LD_INT 34
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 138
7195: PUSH
7196: LD_INT 63
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 196
7205: PUSH
7206: LD_INT 84
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 135
7215: PUSH
7216: LD_INT 52
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 103
7225: PUSH
7226: LD_INT 39
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: LD_INT 58
7235: PUSH
7236: LD_INT 30
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 38
7245: PUSH
7246: LD_INT 51
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: ST_TO_ADDR
// Video ( true ) ;
7262: LD_INT 1
7264: PPUSH
7265: CALL 76748 0 1
// if jmm_units then
7269: LD_EXP 4
7273: IFFALSE 7349
// for i in jmm_units do
7275: LD_ADDR_VAR 0 1
7279: PUSH
7280: LD_EXP 4
7284: PUSH
7285: FOR_IN
7286: IFFALSE 7347
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_EXP 37
7297: PPUSH
7298: CALL_OW 296
7302: PUSH
7303: LD_INT 10
7305: LESS
7306: PUSH
7307: LD_VAR 0 1
7311: PPUSH
7312: CALL_OW 310
7316: NOT
7317: AND
7318: IFFALSE 7336
// ComTurnUnit ( i , JMM ) else
7320: LD_VAR 0 1
7324: PPUSH
7325: LD_EXP 37
7329: PPUSH
7330: CALL_OW 119
7334: GO 7345
// ComHold ( i ) ;
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 140
// end ;
7345: GO 7285
7347: POP
7348: POP
// if IsInUnit ( JMM ) then
7349: LD_EXP 37
7353: PPUSH
7354: CALL_OW 310
7358: IFFALSE 7383
// begin ComExitVehicle ( JMM ) ;
7360: LD_EXP 37
7364: PPUSH
7365: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
7369: LD_EXP 37
7373: PPUSH
7374: LD_EXP 47
7378: PPUSH
7379: CALL_OW 172
// end ; Wait ( 10 ) ;
7383: LD_INT 10
7385: PPUSH
7386: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
7390: LD_EXP 37
7394: PPUSH
7395: LD_EXP 47
7399: PPUSH
7400: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
7404: LD_INT 35
7406: PPUSH
7407: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
7411: LD_EXP 37
7415: PPUSH
7416: LD_EXP 47
7420: PPUSH
7421: CALL_OW 296
7425: PUSH
7426: LD_INT 6
7428: LESS
7429: IFFALSE 7404
// ComTurnUnit ( JMM , Lynch ) ;
7431: LD_EXP 37
7435: PPUSH
7436: LD_EXP 47
7440: PPUSH
7441: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
7445: LD_ADDR_VAR 0 1
7449: PUSH
7450: LD_EXP 47
7454: PUSH
7455: LD_EXP 48
7459: PUSH
7460: LD_EXP 49
7464: PUSH
7465: LD_EXP 50
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: PUSH
7476: FOR_IN
7477: IFFALSE 7495
// ComTurnUnit ( i , JMM ) ;
7479: LD_VAR 0 1
7483: PPUSH
7484: LD_EXP 37
7488: PPUSH
7489: CALL_OW 119
7493: GO 7476
7495: POP
7496: POP
// Wait ( 0 0$0.3 ) ;
7497: LD_INT 10
7499: PPUSH
7500: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7504: LD_EXP 37
7508: PPUSH
7509: LD_STRING D2-JMM-1
7511: PPUSH
7512: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7516: LD_EXP 47
7520: PPUSH
7521: LD_STRING D2-Sol1-1
7523: PPUSH
7524: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7528: LD_EXP 37
7532: PPUSH
7533: LD_STRING D2-JMM-2
7535: PPUSH
7536: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7540: LD_EXP 47
7544: PPUSH
7545: LD_STRING D2-Sol1-2
7547: PPUSH
7548: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7552: LD_EXP 37
7556: PPUSH
7557: LD_STRING D2-JMM-3
7559: PPUSH
7560: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7564: LD_EXP 47
7568: PPUSH
7569: LD_STRING D2-Sol1-3
7571: PPUSH
7572: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_INT 22
7583: PUSH
7584: LD_INT 8
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PPUSH
7591: CALL_OW 69
7595: PUSH
7596: FOR_IN
7597: IFFALSE 7613
// SetSide ( i , 1 ) ;
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_INT 1
7606: PPUSH
7607: CALL_OW 235
7611: GO 7596
7613: POP
7614: POP
// Say ( JMM , D2-JMM-4 ) ;
7615: LD_EXP 37
7619: PPUSH
7620: LD_STRING D2-JMM-4
7622: PPUSH
7623: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7627: LD_INT 1
7629: PPUSH
7630: LD_INT 5
7632: PPUSH
7633: CALL_OW 332
// for i = 1 to points do
7637: LD_ADDR_VAR 0 1
7641: PUSH
7642: DOUBLE
7643: LD_INT 1
7645: DEC
7646: ST_TO_ADDR
7647: LD_VAR 0 2
7651: PUSH
7652: FOR_TO
7653: IFFALSE 7828
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7655: LD_VAR 0 2
7659: PUSH
7660: LD_VAR 0 1
7664: ARRAY
7665: PUSH
7666: LD_INT 1
7668: ARRAY
7669: PPUSH
7670: LD_VAR 0 2
7674: PUSH
7675: LD_VAR 0 1
7679: ARRAY
7680: PUSH
7681: LD_INT 2
7683: ARRAY
7684: PPUSH
7685: CALL_OW 84
// if i = 1 then
7689: LD_VAR 0 1
7693: PUSH
7694: LD_INT 1
7696: EQUAL
7697: IFFALSE 7711
// Say ( Lynch , D2-Sol1-4 ) ;
7699: LD_EXP 47
7703: PPUSH
7704: LD_STRING D2-Sol1-4
7706: PPUSH
7707: CALL_OW 88
// if i = 2 then
7711: LD_VAR 0 1
7715: PUSH
7716: LD_INT 2
7718: EQUAL
7719: IFFALSE 7733
// Say ( JMM , D2-JMM-5 ) ;
7721: LD_EXP 37
7725: PPUSH
7726: LD_STRING D2-JMM-5
7728: PPUSH
7729: CALL_OW 88
// if i = 4 then
7733: LD_VAR 0 1
7737: PUSH
7738: LD_INT 4
7740: EQUAL
7741: IFFALSE 7765
// begin RevealFogArea ( 1 , troopsArea ) ;
7743: LD_INT 1
7745: PPUSH
7746: LD_INT 6
7748: PPUSH
7749: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7753: LD_EXP 47
7757: PPUSH
7758: LD_STRING D2-Sol1-5
7760: PPUSH
7761: CALL_OW 88
// end ; if i = 5 then
7765: LD_VAR 0 1
7769: PUSH
7770: LD_INT 5
7772: EQUAL
7773: IFFALSE 7787
// Say ( JMM , D2-JMM-6 ) ;
7775: LD_EXP 37
7779: PPUSH
7780: LD_STRING D2-JMM-6
7782: PPUSH
7783: CALL_OW 88
// if i = 7 then
7787: LD_VAR 0 1
7791: PUSH
7792: LD_INT 7
7794: EQUAL
7795: IFFALSE 7819
// begin RevealFogArea ( 1 , forestArea ) ;
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 7
7802: PPUSH
7803: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7807: LD_EXP 47
7811: PPUSH
7812: LD_STRING D2-Sol1-6
7814: PPUSH
7815: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7819: LD_INT 46
7821: PPUSH
7822: CALL_OW 67
// end ;
7826: GO 7652
7828: POP
7829: POP
// CenterNowOnUnits ( JMM ) ;
7830: LD_EXP 37
7834: PPUSH
7835: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7839: LD_EXP 37
7843: PPUSH
7844: LD_STRING D2-JMM-7
7846: PPUSH
7847: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7851: LD_EXP 47
7855: PPUSH
7856: LD_STRING D2-Sol1-7
7858: PPUSH
7859: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7863: LD_EXP 37
7867: PPUSH
7868: LD_STRING D2-JMM-8
7870: PPUSH
7871: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7875: LD_ADDR_VAR 0 4
7879: PUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 30
7892: PUSH
7893: LD_INT 31
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 69
7908: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7909: LD_EXP 47
7913: PPUSH
7914: LD_VAR 0 4
7918: PUSH
7919: LD_INT 1
7921: ARRAY
7922: PPUSH
7923: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7927: LD_INT 65
7929: PPUSH
7930: LD_INT 101
7932: PPUSH
7933: CALL_OW 428
7937: IFFALSE 7960
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7939: LD_INT 65
7941: PPUSH
7942: LD_INT 101
7944: PPUSH
7945: CALL_OW 428
7949: PPUSH
7950: LD_INT 75
7952: PPUSH
7953: LD_INT 100
7955: PPUSH
7956: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7960: LD_INT 66
7962: PPUSH
7963: LD_INT 103
7965: PPUSH
7966: CALL_OW 428
7970: IFFALSE 7993
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7972: LD_INT 66
7974: PPUSH
7975: LD_INT 103
7977: PPUSH
7978: CALL_OW 428
7982: PPUSH
7983: LD_INT 75
7985: PPUSH
7986: LD_INT 100
7988: PPUSH
7989: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7993: LD_ADDR_VAR 0 5
7997: PUSH
7998: LD_INT 22
8000: PUSH
8001: LD_INT 1
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 21
8010: PUSH
8011: LD_INT 2
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: LD_INT 91
8020: PUSH
8021: LD_EXP 37
8025: PUSH
8026: LD_INT 7
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: PPUSH
8039: CALL_OW 69
8043: ST_TO_ADDR
// if tmp then
8044: LD_VAR 0 5
8048: IFFALSE 8065
// ComMoveXY ( tmp , 75 , 100 ) ;
8050: LD_VAR 0 5
8054: PPUSH
8055: LD_INT 75
8057: PPUSH
8058: LD_INT 100
8060: PPUSH
8061: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: LD_EXP 4
8074: PPUSH
8075: LD_INT 25
8077: PUSH
8078: LD_INT 1
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PPUSH
8085: CALL_OW 72
8089: PPUSH
8090: LD_EXP 37
8094: PPUSH
8095: CALL_OW 74
8099: ST_TO_ADDR
// if sol then
8100: LD_VAR 0 3
8104: IFFALSE 8164
// if GetDistUnits ( JMM , sol ) < 10 then
8106: LD_EXP 37
8110: PPUSH
8111: LD_VAR 0 3
8115: PPUSH
8116: CALL_OW 296
8120: PUSH
8121: LD_INT 10
8123: LESS
8124: IFFALSE 8164
// begin if IsInUnit ( sol ) then
8126: LD_VAR 0 3
8130: PPUSH
8131: CALL_OW 310
8135: IFFALSE 8146
// ComExitVehicle ( sol ) ;
8137: LD_VAR 0 3
8141: PPUSH
8142: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
8146: LD_VAR 0 3
8150: PPUSH
8151: LD_VAR 0 4
8155: PUSH
8156: LD_INT 2
8158: ARRAY
8159: PPUSH
8160: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
8164: LD_INT 10
8166: PPUSH
8167: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
8171: LD_EXP 37
8175: PPUSH
8176: LD_INT 65
8178: PPUSH
8179: LD_INT 101
8181: PPUSH
8182: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
8186: LD_EXP 37
8190: PPUSH
8191: LD_INT 63
8193: PPUSH
8194: LD_INT 100
8196: PPUSH
8197: CALL_OW 178
// tmp := 0 0$0 ;
8201: LD_ADDR_VAR 0 5
8205: PUSH
8206: LD_INT 0
8208: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8209: LD_INT 35
8211: PPUSH
8212: CALL_OW 67
// tmp := tmp + 0 0$1 ;
8216: LD_ADDR_VAR 0 5
8220: PUSH
8221: LD_VAR 0 5
8225: PUSH
8226: LD_INT 35
8228: PLUS
8229: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
8230: LD_EXP 37
8234: PPUSH
8235: LD_INT 65
8237: PPUSH
8238: LD_INT 101
8240: PPUSH
8241: CALL_OW 307
8245: PUSH
8246: LD_VAR 0 5
8250: PUSH
8251: LD_INT 175
8253: GREATER
8254: OR
8255: IFFALSE 8209
// Say ( JMM , D2a-JMM-1 ) ;
8257: LD_EXP 37
8261: PPUSH
8262: LD_STRING D2a-JMM-1
8264: PPUSH
8265: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
8269: LD_EXP 48
8273: PPUSH
8274: LD_INT 66
8276: PPUSH
8277: LD_INT 103
8279: PPUSH
8280: CALL_OW 111
// tmp := 0 0$0 ;
8284: LD_ADDR_VAR 0 5
8288: PUSH
8289: LD_INT 0
8291: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8292: LD_INT 35
8294: PPUSH
8295: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
8299: LD_EXP 48
8303: PPUSH
8304: LD_INT 66
8306: PPUSH
8307: LD_INT 103
8309: PPUSH
8310: CALL_OW 307
8314: PUSH
8315: LD_VAR 0 5
8319: PUSH
8320: LD_INT 175
8322: GREATER
8323: OR
8324: IFFALSE 8292
// ComTurnUnit ( Walker , JMM ) ;
8326: LD_EXP 48
8330: PPUSH
8331: LD_EXP 37
8335: PPUSH
8336: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
8340: LD_EXP 48
8344: PPUSH
8345: LD_STRING D2a-Sci1-1
8347: PPUSH
8348: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
8352: LD_EXP 37
8356: PPUSH
8357: LD_EXP 48
8361: PPUSH
8362: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
8366: LD_EXP 37
8370: PPUSH
8371: LD_STRING D2a-JMM-2
8373: PPUSH
8374: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
8378: LD_EXP 48
8382: PPUSH
8383: LD_STRING D2a-Sci1-2
8385: PPUSH
8386: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
8390: LD_EXP 37
8394: PPUSH
8395: LD_STRING D2a-JMM-3
8397: PPUSH
8398: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
8402: LD_EXP 48
8406: PPUSH
8407: LD_STRING D2a-Sci1-3
8409: PPUSH
8410: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
8414: LD_ADDR_EXP 4
8418: PUSH
8419: LD_EXP 4
8423: PUSH
8424: LD_EXP 47
8428: PUSH
8429: LD_EXP 48
8433: PUSH
8434: LD_EXP 49
8438: PUSH
8439: LD_EXP 50
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: ADD
8450: ST_TO_ADDR
// for i in jmm_units do
8451: LD_ADDR_VAR 0 1
8455: PUSH
8456: LD_EXP 4
8460: PUSH
8461: FOR_IN
8462: IFFALSE 8487
// if not IsInUnit ( i ) then
8464: LD_VAR 0 1
8468: PPUSH
8469: CALL_OW 310
8473: NOT
8474: IFFALSE 8485
// ComFree ( i ) ;
8476: LD_VAR 0 1
8480: PPUSH
8481: CALL_OW 139
8485: GO 8461
8487: POP
8488: POP
// Video ( false ) ;
8489: LD_INT 0
8491: PPUSH
8492: CALL 76748 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8496: LD_STRING MSolar1
8498: PPUSH
8499: CALL_OW 337
// jmm_on_west := true ;
8503: LD_ADDR_EXP 5
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8511: LD_INT 1050
8513: PPUSH
8514: CALL_OW 67
// frank_can_return := true ;
8518: LD_ADDR_EXP 12
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8526: LD_INT 6300
8528: PPUSH
8529: LD_INT 8400
8531: PPUSH
8532: CALL_OW 12
8536: PPUSH
8537: CALL_OW 67
// send_spec_patrol := true ;
8541: LD_ADDR_EXP 30
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// end ;
8549: PPOPN 5
8551: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8552: LD_INT 22
8554: PUSH
8555: LD_INT 1
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 34
8564: PUSH
8565: LD_INT 51
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 92
8574: PUSH
8575: LD_INT 63
8577: PUSH
8578: LD_INT 100
8580: PUSH
8581: LD_INT 5
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: PPUSH
8598: CALL_OW 69
8602: PUSH
8603: LD_EXP 5
8607: NOT
8608: AND
8609: IFFALSE 8722
8611: GO 8613
8613: DISABLE
8614: LD_INT 0
8616: PPUSH
8617: PPUSH
// begin enable ;
8618: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8619: LD_ADDR_VAR 0 2
8623: PUSH
8624: LD_INT 22
8626: PUSH
8627: LD_INT 1
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 34
8636: PUSH
8637: LD_INT 51
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 92
8646: PUSH
8647: LD_INT 63
8649: PUSH
8650: LD_INT 100
8652: PUSH
8653: LD_INT 5
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: LIST
8666: PUSH
8667: EMPTY
8668: LIST
8669: PPUSH
8670: CALL_OW 69
8674: ST_TO_ADDR
// if not filter then
8675: LD_VAR 0 2
8679: NOT
8680: IFFALSE 8684
// exit ;
8682: GO 8722
// for i in filter do
8684: LD_ADDR_VAR 0 1
8688: PUSH
8689: LD_VAR 0 2
8693: PUSH
8694: FOR_IN
8695: IFFALSE 8720
// begin SetFuel ( i , 0 ) ;
8697: LD_VAR 0 1
8701: PPUSH
8702: LD_INT 0
8704: PPUSH
8705: CALL_OW 240
// ComStop ( i ) ;
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 141
// end ;
8718: GO 8694
8720: POP
8721: POP
// end ;
8722: PPOPN 2
8724: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8725: LD_EXP 30
8729: IFFALSE 9855
8731: GO 8733
8733: DISABLE
8734: LD_INT 0
8736: PPUSH
8737: PPUSH
8738: PPUSH
8739: PPUSH
8740: PPUSH
8741: PPUSH
8742: PPUSH
// begin if not ru_spec_patrol then
8743: LD_EXP 54
8747: NOT
8748: IFFALSE 8752
// exit ;
8750: GO 9855
// dead1 := false ;
8752: LD_ADDR_VAR 0 1
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// dead2 := false ;
8760: LD_ADDR_VAR 0 2
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// inarea1 := false ;
8768: LD_ADDR_VAR 0 3
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// inarea2 := false ;
8776: LD_ADDR_VAR 0 4
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// tmp := [ ] ;
8784: LD_ADDR_VAR 0 6
8788: PUSH
8789: EMPTY
8790: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8791: LD_EXP 54
8795: PPUSH
8796: LD_INT 75
8798: PPUSH
8799: LD_INT 101
8801: PPUSH
8802: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8806: LD_INT 35
8808: PPUSH
8809: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8813: LD_INT 1
8815: PPUSH
8816: LD_EXP 54
8820: PUSH
8821: LD_INT 1
8823: ARRAY
8824: PPUSH
8825: CALL_OW 292
8829: PUSH
8830: LD_EXP 54
8834: PPUSH
8835: LD_INT 92
8837: PUSH
8838: LD_INT 75
8840: PUSH
8841: LD_INT 101
8843: PUSH
8844: LD_INT 4
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 72
8857: OR
8858: IFFALSE 8806
// ComStop ( ru_spec_patrol ) ;
8860: LD_EXP 54
8864: PPUSH
8865: CALL_OW 141
// Wait ( 0 0$02 ) ;
8869: LD_INT 70
8871: PPUSH
8872: CALL_OW 67
// DialogueOn ;
8876: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8880: LD_EXP 54
8884: PUSH
8885: LD_INT 1
8887: ARRAY
8888: PPUSH
8889: LD_STRING D8-Rus1-1
8891: PPUSH
8892: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8896: LD_EXP 37
8900: PPUSH
8901: LD_STRING D8-JMM-1
8903: PPUSH
8904: CALL_OW 88
// DialogueOff ;
8908: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8912: LD_EXP 54
8916: PPUSH
8917: LD_INT 13
8919: PPUSH
8920: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8924: LD_INT 35
8926: PPUSH
8927: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8931: LD_VAR 0 1
8935: NOT
8936: PUSH
8937: LD_EXP 54
8941: PUSH
8942: LD_INT 1
8944: ARRAY
8945: PPUSH
8946: CALL_OW 301
8950: AND
8951: IFFALSE 8961
// dead1 := true ;
8953: LD_ADDR_VAR 0 1
8957: PUSH
8958: LD_INT 1
8960: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8961: LD_VAR 0 2
8965: NOT
8966: PUSH
8967: LD_EXP 54
8971: PUSH
8972: LD_INT 2
8974: ARRAY
8975: PPUSH
8976: CALL_OW 301
8980: AND
8981: IFFALSE 8991
// dead2 := true ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 1
8990: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8991: LD_VAR 0 3
8995: NOT
8996: PUSH
8997: LD_EXP 54
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: LD_INT 14
9008: PPUSH
9009: CALL_OW 308
9013: AND
9014: IFFALSE 9024
// inarea1 := true ;
9016: LD_ADDR_VAR 0 3
9020: PUSH
9021: LD_INT 1
9023: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
9024: LD_VAR 0 4
9028: NOT
9029: PUSH
9030: LD_EXP 54
9034: PUSH
9035: LD_INT 2
9037: ARRAY
9038: PPUSH
9039: LD_INT 14
9041: PPUSH
9042: CALL_OW 308
9046: AND
9047: IFFALSE 9057
// inarea2 := true ;
9049: LD_ADDR_VAR 0 4
9053: PUSH
9054: LD_INT 1
9056: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
9057: LD_VAR 0 1
9061: PUSH
9062: LD_VAR 0 2
9066: AND
9067: PUSH
9068: LD_VAR 0 1
9072: PUSH
9073: LD_VAR 0 4
9077: AND
9078: OR
9079: PUSH
9080: LD_VAR 0 2
9084: PUSH
9085: LD_VAR 0 3
9089: AND
9090: OR
9091: PUSH
9092: LD_VAR 0 3
9096: PUSH
9097: LD_VAR 0 4
9101: AND
9102: OR
9103: IFFALSE 8924
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
9105: LD_VAR 0 3
9109: PUSH
9110: LD_VAR 0 4
9114: AND
9115: PUSH
9116: LD_VAR 0 1
9120: PUSH
9121: LD_VAR 0 4
9125: AND
9126: OR
9127: PUSH
9128: LD_VAR 0 2
9132: PUSH
9133: LD_VAR 0 3
9137: AND
9138: OR
9139: IFFALSE 9835
// begin prepare_siege := true ;
9141: LD_ADDR_EXP 31
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// DialogueOn ;
9149: CALL_OW 6
// if ( inarea1 and inarea2 ) then
9153: LD_VAR 0 3
9157: PUSH
9158: LD_VAR 0 4
9162: AND
9163: IFFALSE 9179
// Say ( JMM , D8b-JMM-1a ) else
9165: LD_EXP 37
9169: PPUSH
9170: LD_STRING D8b-JMM-1a
9172: PPUSH
9173: CALL_OW 88
9177: GO 9191
// Say ( JMM , D8b-JMM-1 ) ;
9179: LD_EXP 37
9183: PPUSH
9184: LD_STRING D8b-JMM-1
9186: PPUSH
9187: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
9191: LD_EXP 4
9195: PPUSH
9196: LD_INT 26
9198: PUSH
9199: LD_INT 1
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PPUSH
9206: CALL_OW 72
9210: PUSH
9211: LD_EXP 38
9215: PUSH
9216: LD_EXP 39
9220: PUSH
9221: LD_EXP 48
9225: PUSH
9226: LD_EXP 51
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: DIFF
9237: PPUSH
9238: LD_STRING D8b-Sol1-1
9240: PPUSH
9241: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
9245: LD_EXP 39
9249: PUSH
9250: LD_EXP 39
9254: PUSH
9255: LD_EXP 4
9259: IN
9260: AND
9261: IFFALSE 9277
// Say ( Cyrus , D8b-Cyrus-1 ) else
9263: LD_EXP 39
9267: PPUSH
9268: LD_STRING D8b-Cyrus-1
9270: PPUSH
9271: CALL_OW 88
9275: GO 9289
// Say ( JMM , D8b-JMM-1a ) ;
9277: LD_EXP 37
9281: PPUSH
9282: LD_STRING D8b-JMM-1a
9284: PPUSH
9285: CALL_OW 88
// if Lisa and Lisa in jmm_units then
9289: LD_EXP 40
9293: PUSH
9294: LD_EXP 40
9298: PUSH
9299: LD_EXP 4
9303: IN
9304: AND
9305: IFFALSE 9319
// Say ( Lisa , D8b-Lisa-2 ) ;
9307: LD_EXP 40
9311: PPUSH
9312: LD_STRING D8b-Lisa-2
9314: PPUSH
9315: CALL_OW 88
// if Bobby and Bobby in jmm_units then
9319: LD_EXP 38
9323: PUSH
9324: LD_EXP 38
9328: PUSH
9329: LD_EXP 4
9333: IN
9334: AND
9335: IFFALSE 9351
// Say ( Bobby , D8b-Bobby-1 ) else
9337: LD_EXP 38
9341: PPUSH
9342: LD_STRING D8b-Bobby-1
9344: PPUSH
9345: CALL_OW 88
9349: GO 9411
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
9351: LD_ADDR_VAR 0 5
9355: PUSH
9356: LD_EXP 4
9360: PPUSH
9361: LD_INT 26
9363: PUSH
9364: LD_INT 1
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PPUSH
9371: CALL_OW 72
9375: PUSH
9376: LD_EXP 38
9380: PUSH
9381: LD_EXP 39
9385: PUSH
9386: LD_EXP 48
9390: PUSH
9391: LD_EXP 51
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: DIFF
9402: PPUSH
9403: LD_STRING D8b-Sol2-1
9405: PPUSH
9406: CALL 585 0 2
9410: ST_TO_ADDR
// DialogueOff ;
9411: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
9415: LD_EXP 39
9419: PUSH
9420: LD_EXP 39
9424: PUSH
9425: LD_EXP 4
9429: IN
9430: AND
9431: IFFALSE 9456
// tmp := Insert ( tmp , 1 , Cyrus ) ;
9433: LD_ADDR_VAR 0 6
9437: PUSH
9438: LD_VAR 0 6
9442: PPUSH
9443: LD_INT 1
9445: PPUSH
9446: LD_EXP 39
9450: PPUSH
9451: CALL_OW 2
9455: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
9456: LD_EXP 38
9460: PUSH
9461: LD_EXP 38
9465: PUSH
9466: LD_EXP 4
9470: IN
9471: AND
9472: IFFALSE 9497
// tmp := Insert ( tmp , 1 , Bobby ) ;
9474: LD_ADDR_VAR 0 6
9478: PUSH
9479: LD_VAR 0 6
9483: PPUSH
9484: LD_INT 1
9486: PPUSH
9487: LD_EXP 38
9491: PPUSH
9492: CALL_OW 2
9496: ST_TO_ADDR
// if sol then
9497: LD_VAR 0 5
9501: IFFALSE 9526
// tmp := Insert ( tmp , 1 , sol ) ;
9503: LD_ADDR_VAR 0 6
9507: PUSH
9508: LD_VAR 0 6
9512: PPUSH
9513: LD_INT 1
9515: PPUSH
9516: LD_VAR 0 5
9520: PPUSH
9521: CALL_OW 2
9525: ST_TO_ADDR
// if tmp then
9526: LD_VAR 0 6
9530: IFFALSE 9794
// begin SetSide ( tmp , 8 ) ;
9532: LD_VAR 0 6
9536: PPUSH
9537: LD_INT 8
9539: PPUSH
9540: CALL_OW 235
// for i in tmp do
9544: LD_ADDR_VAR 0 7
9548: PUSH
9549: LD_VAR 0 6
9553: PUSH
9554: FOR_IN
9555: IFFALSE 9646
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9557: LD_VAR 0 7
9561: PPUSH
9562: CALL_OW 310
9566: PUSH
9567: LD_VAR 0 7
9571: PPUSH
9572: CALL_OW 310
9576: PPUSH
9577: CALL_OW 266
9581: PUSH
9582: LD_INT 3
9584: EQUAL
9585: AND
9586: IFFALSE 9597
// ComExitBuilding ( i ) ;
9588: LD_VAR 0 7
9592: PPUSH
9593: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9597: LD_VAR 0 7
9601: PPUSH
9602: CALL_OW 310
9606: PUSH
9607: LD_VAR 0 7
9611: PPUSH
9612: CALL_OW 310
9616: PPUSH
9617: CALL_OW 266
9621: PUSH
9622: LD_INT 2
9624: EQUAL
9625: AND
9626: IFFALSE 9637
// ComExitVehicle ( i ) ;
9628: LD_VAR 0 7
9632: PPUSH
9633: CALL_OW 121
// wait ( 0 0$1 ) ;
9637: LD_INT 35
9639: PPUSH
9640: CALL_OW 67
// end ;
9644: GO 9554
9646: POP
9647: POP
// ComFree ( tmp ) ;
9648: LD_VAR 0 6
9652: PPUSH
9653: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9657: LD_VAR 0 6
9661: PPUSH
9662: LD_INT 15
9664: PPUSH
9665: CALL_OW 173
// AddComHold ( tmp ) ;
9669: LD_VAR 0 6
9673: PPUSH
9674: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9678: LD_INT 35
9680: PPUSH
9681: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9685: LD_VAR 0 6
9689: PUSH
9690: LD_INT 1
9692: ARRAY
9693: PPUSH
9694: CALL_OW 314
9698: NOT
9699: IFFALSE 9713
// ComMoveToArea ( tmp , cyrusEscape ) ;
9701: LD_VAR 0 6
9705: PPUSH
9706: LD_INT 15
9708: PPUSH
9709: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9713: LD_VAR 0 6
9717: PUSH
9718: LD_INT 1
9720: ARRAY
9721: PPUSH
9722: LD_INT 15
9724: PPUSH
9725: CALL_OW 308
9729: IFFALSE 9784
// begin RemoveUnit ( tmp [ 1 ] ) ;
9731: LD_VAR 0 6
9735: PUSH
9736: LD_INT 1
9738: ARRAY
9739: PPUSH
9740: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9744: LD_ADDR_EXP 4
9748: PUSH
9749: LD_EXP 4
9753: PUSH
9754: LD_VAR 0 6
9758: PUSH
9759: LD_INT 1
9761: ARRAY
9762: DIFF
9763: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9764: LD_ADDR_VAR 0 6
9768: PUSH
9769: LD_VAR 0 6
9773: PUSH
9774: LD_VAR 0 6
9778: PUSH
9779: LD_INT 1
9781: ARRAY
9782: DIFF
9783: ST_TO_ADDR
// end ; until tmp = 0 ;
9784: LD_VAR 0 6
9788: PUSH
9789: LD_INT 0
9791: EQUAL
9792: IFFALSE 9678
// end ; wait ( 0 0$30 ) ;
9794: LD_INT 1050
9796: PPUSH
9797: CALL_OW 67
// if ru_spec_patrol then
9801: LD_EXP 54
9805: IFFALSE 9833
// for i in ru_spec_patrol do
9807: LD_ADDR_VAR 0 7
9811: PUSH
9812: LD_EXP 54
9816: PUSH
9817: FOR_IN
9818: IFFALSE 9831
// RemoveUnit ( i ) ;
9820: LD_VAR 0 7
9824: PPUSH
9825: CALL_OW 64
9829: GO 9817
9831: POP
9832: POP
// end else
9833: GO 9855
// begin prepare_siege := false ;
9835: LD_ADDR_EXP 31
9839: PUSH
9840: LD_INT 0
9842: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9843: LD_EXP 37
9847: PPUSH
9848: LD_STRING D8a-JMM-1
9850: PPUSH
9851: CALL_OW 88
// end ; end ;
9855: PPOPN 7
9857: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9858: LD_EXP 12
9862: IFFALSE 11130
9864: GO 9866
9866: DISABLE
9867: LD_INT 0
9869: PPUSH
9870: PPUSH
9871: PPUSH
// begin uc_side := 8 ;
9872: LD_ADDR_OWVAR 20
9876: PUSH
9877: LD_INT 8
9879: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9880: LD_ADDR_VAR 0 3
9884: PUSH
9885: LD_INT 59
9887: PUSH
9888: LD_INT 71
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 122
9897: PUSH
9898: LD_INT 117
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9909: LD_ADDR_EXP 51
9913: PUSH
9914: LD_STRING Frank
9916: PPUSH
9917: LD_INT 0
9919: PPUSH
9920: LD_STRING 
9922: PPUSH
9923: CALL 39308 0 3
9927: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9928: LD_ADDR_VAR 0 1
9932: PUSH
9933: LD_INT 1
9935: PPUSH
9936: LD_INT 2
9938: PPUSH
9939: CALL_OW 12
9943: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9944: LD_EXP 51
9948: PPUSH
9949: LD_VAR 0 3
9953: PUSH
9954: LD_VAR 0 1
9958: ARRAY
9959: PUSH
9960: LD_INT 1
9962: ARRAY
9963: PPUSH
9964: LD_VAR 0 3
9968: PUSH
9969: LD_VAR 0 1
9973: ARRAY
9974: PUSH
9975: LD_INT 2
9977: ARRAY
9978: PPUSH
9979: LD_INT 0
9981: PPUSH
9982: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9986: LD_EXP 51
9990: PPUSH
9991: LD_INT 1
9993: PPUSH
9994: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9998: LD_INT 35
10000: PPUSH
10001: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
10005: LD_EXP 51
10009: PPUSH
10010: LD_EXP 37
10014: PPUSH
10015: CALL_OW 296
10019: PUSH
10020: LD_INT 8
10022: LESS
10023: PUSH
10024: LD_EXP 51
10028: PPUSH
10029: CALL_OW 256
10033: PUSH
10034: LD_INT 250
10036: GREATER
10037: AND
10038: IFFALSE 9998
// Video ( true ) ;
10040: LD_INT 1
10042: PPUSH
10043: CALL 76748 0 1
// CenterOnUnits ( JMM ) ;
10047: LD_EXP 37
10051: PPUSH
10052: CALL_OW 85
// if IsInUnit ( JMM ) then
10056: LD_EXP 37
10060: PPUSH
10061: CALL_OW 310
10065: IFFALSE 10076
// ComFree ( JMM ) ;
10067: LD_EXP 37
10071: PPUSH
10072: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
10076: LD_EXP 37
10080: PPUSH
10081: LD_EXP 51
10085: PPUSH
10086: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
10090: LD_EXP 51
10094: PPUSH
10095: LD_EXP 37
10099: PPUSH
10100: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
10104: LD_EXP 37
10108: PPUSH
10109: LD_STRING D6-JMM-1
10111: PPUSH
10112: CALL_OW 88
// p := 0 ;
10116: LD_ADDR_VAR 0 2
10120: PUSH
10121: LD_INT 0
10123: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10124: LD_INT 35
10126: PPUSH
10127: CALL_OW 67
// p := p + 1 ;
10131: LD_ADDR_VAR 0 2
10135: PUSH
10136: LD_VAR 0 2
10140: PUSH
10141: LD_INT 1
10143: PLUS
10144: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
10145: LD_EXP 37
10149: PPUSH
10150: LD_EXP 51
10154: PPUSH
10155: CALL_OW 296
10159: PUSH
10160: LD_INT 8
10162: LESS
10163: PUSH
10164: LD_VAR 0 2
10168: PUSH
10169: LD_INT 7
10171: GREATER
10172: OR
10173: IFFALSE 10124
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
10175: LD_EXP 40
10179: PUSH
10180: LD_EXP 40
10184: PPUSH
10185: LD_EXP 51
10189: PPUSH
10190: CALL_OW 296
10194: PUSH
10195: LD_INT 20
10197: LESS
10198: AND
10199: PUSH
10200: LD_EXP 40
10204: PUSH
10205: LD_EXP 4
10209: IN
10210: AND
10211: IFFALSE 10236
// begin ComFree ( Lisa ) ;
10213: LD_EXP 40
10217: PPUSH
10218: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
10222: LD_EXP 40
10226: PPUSH
10227: LD_EXP 51
10231: PPUSH
10232: CALL_OW 172
// end ; if Lynch then
10236: LD_EXP 47
10240: IFFALSE 10265
// begin ComFree ( Lynch ) ;
10242: LD_EXP 47
10246: PPUSH
10247: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
10251: LD_EXP 47
10255: PPUSH
10256: LD_EXP 51
10260: PPUSH
10261: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
10265: LD_EXP 37
10269: PPUSH
10270: LD_EXP 51
10274: PPUSH
10275: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10279: LD_EXP 51
10283: PPUSH
10284: LD_EXP 37
10288: PPUSH
10289: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
10293: LD_EXP 51
10297: PPUSH
10298: LD_STRING D6-Frank-1
10300: PPUSH
10301: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
10305: LD_INT 69
10307: PPUSH
10308: LD_INT 20
10310: PPUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_INT 20
10316: NEG
10317: PPUSH
10318: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
10322: LD_INT 69
10324: PPUSH
10325: LD_INT 20
10327: PPUSH
10328: LD_INT 1
10330: PPUSH
10331: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
10335: LD_INT 190
10337: PPUSH
10338: LD_INT 31
10340: PPUSH
10341: LD_INT 1
10343: PPUSH
10344: LD_INT 20
10346: NEG
10347: PPUSH
10348: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
10352: LD_INT 190
10354: PPUSH
10355: LD_INT 31
10357: PPUSH
10358: LD_INT 1
10360: PPUSH
10361: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
10365: LD_INT 69
10367: PPUSH
10368: LD_INT 20
10370: PPUSH
10371: CALL_OW 84
// Wait ( 0 0$02 ) ;
10375: LD_INT 70
10377: PPUSH
10378: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
10382: LD_EXP 37
10386: PPUSH
10387: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
10391: LD_EXP 40
10395: PUSH
10396: LD_EXP 40
10400: PPUSH
10401: LD_EXP 51
10405: PPUSH
10406: CALL_OW 296
10410: PUSH
10411: LD_INT 20
10413: LESS
10414: AND
10415: PUSH
10416: LD_EXP 40
10420: PPUSH
10421: CALL_OW 302
10425: AND
10426: PUSH
10427: LD_EXP 40
10431: PUSH
10432: LD_EXP 4
10436: IN
10437: AND
10438: IFFALSE 10560
// begin ComFree ( Lisa ) ;
10440: LD_EXP 40
10444: PPUSH
10445: CALL_OW 139
// p := 0 ;
10449: LD_ADDR_VAR 0 2
10453: PUSH
10454: LD_INT 0
10456: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10457: LD_INT 35
10459: PPUSH
10460: CALL_OW 67
// p := p + 1 ;
10464: LD_ADDR_VAR 0 2
10468: PUSH
10469: LD_VAR 0 2
10473: PUSH
10474: LD_INT 1
10476: PLUS
10477: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10478: LD_EXP 40
10482: PPUSH
10483: LD_EXP 51
10487: PPUSH
10488: CALL_OW 296
10492: PUSH
10493: LD_INT 7
10495: LESS
10496: PUSH
10497: LD_VAR 0 2
10501: PUSH
10502: LD_INT 7
10504: GREATER
10505: OR
10506: IFFALSE 10457
// Say ( Lisa , D6-Lisa-1 ) ;
10508: LD_EXP 40
10512: PPUSH
10513: LD_STRING D6-Lisa-1
10515: PPUSH
10516: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10520: LD_EXP 40
10524: PPUSH
10525: LD_EXP 51
10529: PPUSH
10530: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10534: LD_EXP 51
10538: PPUSH
10539: LD_EXP 40
10543: PPUSH
10544: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10548: LD_EXP 51
10552: PPUSH
10553: LD_STRING D6-Frank-2
10555: PPUSH
10556: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10560: LD_EXP 47
10564: PUSH
10565: LD_EXP 47
10569: PPUSH
10570: LD_EXP 51
10574: PPUSH
10575: CALL_OW 296
10579: PUSH
10580: LD_INT 20
10582: LESS
10583: AND
10584: PUSH
10585: LD_EXP 47
10589: PPUSH
10590: CALL_OW 302
10594: AND
10595: IFFALSE 10788
// begin ComTurnUnit ( Lynch , JMM ) ;
10597: LD_EXP 47
10601: PPUSH
10602: LD_EXP 37
10606: PPUSH
10607: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10611: LD_EXP 51
10615: PPUSH
10616: LD_EXP 37
10620: PPUSH
10621: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10625: LD_EXP 47
10629: PPUSH
10630: LD_STRING D6-Sol1-2
10632: PPUSH
10633: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10637: LD_EXP 37
10641: PPUSH
10642: LD_STRING D6-JMM-2
10644: PPUSH
10645: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10649: LD_EXP 51
10653: PPUSH
10654: LD_STRING D6-Frank-3
10656: PPUSH
10657: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10661: LD_EXP 37
10665: PPUSH
10666: LD_STRING D6-JMM-3
10668: PPUSH
10669: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10673: LD_EXP 51
10677: PPUSH
10678: LD_STRING D6-Frank-4
10680: PPUSH
10681: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10685: LD_EXP 51
10689: PPUSH
10690: LD_STRING D6-Frank-4a
10692: PPUSH
10693: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10697: LD_EXP 37
10701: PPUSH
10702: LD_STRING D6-JMM-4
10704: PPUSH
10705: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10709: LD_EXP 51
10713: PPUSH
10714: LD_STRING D6-Frank-5
10716: PPUSH
10717: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10721: LD_EXP 40
10725: PUSH
10726: LD_EXP 40
10730: PPUSH
10731: CALL_OW 302
10735: AND
10736: PUSH
10737: LD_EXP 40
10741: PUSH
10742: LD_EXP 4
10746: IN
10747: AND
10748: IFFALSE 10762
// Say ( Lisa , D6-Lisa-5 ) ;
10750: LD_EXP 40
10754: PPUSH
10755: LD_STRING D6-Lisa-5
10757: PPUSH
10758: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10762: LD_EXP 51
10766: PPUSH
10767: LD_STRING D6-Frank-6
10769: PPUSH
10770: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10774: LD_EXP 37
10778: PPUSH
10779: LD_STRING D6-JMM-6
10781: PPUSH
10782: CALL_OW 88
// end else
10786: GO 10915
// begin ComTurnUnit ( Frank , JMM ) ;
10788: LD_EXP 51
10792: PPUSH
10793: LD_EXP 37
10797: PPUSH
10798: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10802: LD_EXP 51
10806: PPUSH
10807: LD_STRING D6-Frank-4
10809: PPUSH
10810: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10814: LD_EXP 51
10818: PPUSH
10819: LD_STRING D6-Frank-4a
10821: PPUSH
10822: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10826: LD_EXP 37
10830: PPUSH
10831: LD_STRING D6-JMM-4
10833: PPUSH
10834: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10838: LD_EXP 51
10842: PPUSH
10843: LD_STRING D6-Frank-5
10845: PPUSH
10846: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10850: LD_EXP 40
10854: PUSH
10855: LD_EXP 40
10859: PPUSH
10860: CALL_OW 302
10864: AND
10865: PUSH
10866: LD_EXP 40
10870: PUSH
10871: LD_EXP 4
10875: IN
10876: AND
10877: IFFALSE 10891
// Say ( Lisa , D6-Lisa-5 ) ;
10879: LD_EXP 40
10883: PPUSH
10884: LD_STRING D6-Lisa-5
10886: PPUSH
10887: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10891: LD_EXP 51
10895: PPUSH
10896: LD_STRING D6-Frank-6
10898: PPUSH
10899: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10903: LD_EXP 37
10907: PPUSH
10908: LD_STRING D6-JMM-6
10910: PPUSH
10911: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10915: LD_STRING Q1
10917: PPUSH
10918: CALL_OW 97
10922: PUSH
10923: LD_INT 1
10925: DOUBLE
10926: EQUAL
10927: IFTRUE 10931
10929: GO 10942
10931: POP
// frank_send_to_scout := true ; 2 :
10932: LD_ADDR_EXP 15
10936: PUSH
10937: LD_INT 1
10939: ST_TO_ADDR
10940: GO 10962
10942: LD_INT 2
10944: DOUBLE
10945: EQUAL
10946: IFTRUE 10950
10948: GO 10961
10950: POP
// frank_send_to_scout := false ; end ;
10951: LD_ADDR_EXP 15
10955: PUSH
10956: LD_INT 0
10958: ST_TO_ADDR
10959: GO 10962
10961: POP
// Video ( false ) ;
10962: LD_INT 0
10964: PPUSH
10965: CALL 76748 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10969: LD_EXP 37
10973: PUSH
10974: LD_EXP 40
10978: PUSH
10979: LD_EXP 47
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: PPUSH
10989: CALL_OW 139
// if frank_send_to_scout then
10993: LD_EXP 15
10997: IFFALSE 11051
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10999: LD_EXP 51
11003: PPUSH
11004: LD_INT 15
11006: PPUSH
11007: CALL_OW 113
// wait ( 0 0$01 ) ;
11011: LD_INT 35
11013: PPUSH
11014: CALL_OW 67
// until not See ( 1 , Frank ) ;
11018: LD_INT 1
11020: PPUSH
11021: LD_EXP 51
11025: PPUSH
11026: CALL_OW 292
11030: NOT
11031: IFFALSE 10999
// wait ( 0 0$02 ) ;
11033: LD_INT 70
11035: PPUSH
11036: CALL_OW 67
// RemoveUnit ( Frank ) ;
11040: LD_EXP 51
11044: PPUSH
11045: CALL_OW 64
// end else
11049: GO 11063
// SetSide ( Frank , 1 ) ;
11051: LD_EXP 51
11055: PPUSH
11056: LD_INT 1
11058: PPUSH
11059: CALL_OW 235
// send_attack_on_cornel_base := true ;
11063: LD_ADDR_EXP 26
11067: PUSH
11068: LD_INT 1
11070: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11071: LD_INT 35
11073: PPUSH
11074: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
11078: LD_ADDR_EXP 29
11082: PUSH
11083: LD_EXP 29
11087: PPUSH
11088: LD_STRING -
11090: PPUSH
11091: CALL 1077 0 2
11095: ST_TO_ADDR
// if debug then
11096: LD_EXP 1
11100: IFFALSE 11112
// debug_strings := time_to_prepare ;
11102: LD_ADDR_OWVAR 48
11106: PUSH
11107: LD_EXP 29
11111: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
11112: LD_EXP 29
11116: PUSH
11117: LD_INT 0
11119: EQUAL
11120: IFFALSE 11071
// cornel_prepared := true ;
11122: LD_ADDR_EXP 11
11126: PUSH
11127: LD_INT 1
11129: ST_TO_ADDR
// end ;
11130: PPOPN 3
11132: END
// every 0 0$01 trigger cornel_prepared do
11133: LD_EXP 11
11137: IFFALSE 11445
11139: GO 11141
11141: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
11142: LD_EXP 44
11146: PPUSH
11147: LD_STRING D3-Corn-1
11149: PPUSH
11150: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
11154: LD_STRING MOutWait
11156: PPUSH
11157: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
11161: LD_INT 35
11163: PPUSH
11164: CALL_OW 67
// until cornel_counter = 0 ;
11168: LD_EXP 10
11172: PUSH
11173: LD_INT 0
11175: EQUAL
11176: IFFALSE 11161
// SayRadio ( Cornel , D3a-Corn-1 ) ;
11178: LD_EXP 44
11182: PPUSH
11183: LD_STRING D3a-Corn-1
11185: PPUSH
11186: CALL_OW 94
// if IsOk ( Cornel ) then
11190: LD_EXP 44
11194: PPUSH
11195: CALL_OW 302
11199: IFFALSE 11213
// Say ( JMM , D3a-JMM-1 ) ;
11201: LD_EXP 37
11205: PPUSH
11206: LD_STRING D3a-JMM-1
11208: PPUSH
11209: CALL_OW 88
// end_mission_allowed := true ;
11213: LD_ADDR_EXP 21
11217: PUSH
11218: LD_INT 1
11220: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11221: LD_STRING M2
11223: PPUSH
11224: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
11228: LD_INT 9
11230: PPUSH
11231: LD_INT 1
11233: PPUSH
11234: CALL_OW 424
// Wait ( 0 0$05 ) ;
11238: LD_INT 175
11240: PPUSH
11241: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
11245: LD_EXP 44
11249: PPUSH
11250: LD_STRING D3a-Corn-2
11252: PPUSH
11253: CALL_OW 94
// cornel_attack := true ;
11257: LD_ADDR_EXP 9
11261: PUSH
11262: LD_INT 1
11264: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
11265: LD_INT 105
11267: PPUSH
11268: CALL_OW 67
// AddMoreTanks ( ) ;
11272: CALL 5402 0 0
// if frank_send_to_scout then
11276: LD_EXP 15
11280: IFFALSE 11445
// begin InitHc ;
11282: CALL_OW 19
// InitUc ;
11286: CALL_OW 18
// uc_side := 8 ;
11290: LD_ADDR_OWVAR 20
11294: PUSH
11295: LD_INT 8
11297: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
11298: LD_ADDR_EXP 51
11302: PUSH
11303: LD_STRING Frank
11305: PPUSH
11306: LD_INT 0
11308: PPUSH
11309: LD_STRING 
11311: PPUSH
11312: CALL 39308 0 3
11316: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
11317: LD_EXP 51
11321: PPUSH
11322: LD_INT 6
11324: PPUSH
11325: LD_INT 9
11327: PPUSH
11328: LD_INT 0
11330: PPUSH
11331: CALL_OW 48
// ComCrawl ( Frank ) ;
11335: LD_EXP 51
11339: PPUSH
11340: CALL_OW 137
// repeat wait ( 10 ) ;
11344: LD_INT 10
11346: PPUSH
11347: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11351: LD_EXP 37
11355: PPUSH
11356: LD_EXP 51
11360: PPUSH
11361: CALL_OW 296
11365: PUSH
11366: LD_INT 9
11368: LESS
11369: PUSH
11370: LD_INT 9
11372: PPUSH
11373: LD_INT 22
11375: PUSH
11376: LD_INT 1
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PPUSH
11383: CALL_OW 70
11387: OR
11388: IFFALSE 11344
// if IsDead ( Frank ) then
11390: LD_EXP 51
11394: PPUSH
11395: CALL_OW 301
11399: IFFALSE 11403
// exit ;
11401: GO 11445
// CenterOnUnits ( Frank ) ;
11403: LD_EXP 51
11407: PPUSH
11408: CALL_OW 85
// SetSide ( Frank , 1 ) ;
11412: LD_EXP 51
11416: PPUSH
11417: LD_INT 1
11419: PPUSH
11420: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
11424: LD_EXP 51
11428: PPUSH
11429: LD_STRING D6a-Frank-1
11431: PPUSH
11432: CALL_OW 88
// ComWalk ( Frank ) ;
11436: LD_EXP 51
11440: PPUSH
11441: CALL_OW 138
// end ; end ;
11445: END
// every 0 0$01 trigger solar_builded do
11446: LD_EXP 14
11450: IFFALSE 11554
11452: GO 11454
11454: DISABLE
// begin Wait ( 0 0$02 ) ;
11455: LD_INT 70
11457: PPUSH
11458: CALL_OW 67
// DialogueOn ;
11462: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11466: LD_EXP 37
11470: PPUSH
11471: LD_STRING D2b-JMM-1
11473: PPUSH
11474: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11478: LD_EXP 48
11482: PUSH
11483: LD_EXP 48
11487: PPUSH
11488: CALL_OW 302
11492: AND
11493: IFFALSE 11543
// begin Say ( Walker , D2b-Sci1-1 ) ;
11495: LD_EXP 48
11499: PPUSH
11500: LD_STRING D2b-Sci1-1
11502: PPUSH
11503: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11507: LD_EXP 37
11511: PPUSH
11512: LD_STRING D2b-JMM-2
11514: PPUSH
11515: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11519: LD_EXP 48
11523: PPUSH
11524: LD_STRING D2b-Sci1-2
11526: PPUSH
11527: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11531: LD_EXP 37
11535: PPUSH
11536: LD_STRING D2b-JMM-3
11538: PPUSH
11539: CALL_OW 88
// end ; DialogueOff ;
11543: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11547: LD_STRING MOutSol
11549: PPUSH
11550: CALL_OW 337
// end ;
11554: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11555: LD_EXP 14
11559: PUSH
11560: LD_EXP 37
11564: PPUSH
11565: CALL_OW 302
11569: AND
11570: PUSH
11571: LD_EXP 37
11575: PPUSH
11576: CALL 911 0 1
11580: AND
11581: PUSH
11582: LD_EXP 16
11586: NOT
11587: AND
11588: IFFALSE 11659
11590: GO 11592
11592: DISABLE
11593: LD_INT 0
11595: PPUSH
// begin jmm_in_veh := true ;
11596: LD_ADDR_EXP 16
11600: PUSH
11601: LD_INT 1
11603: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11604: LD_ADDR_VAR 0 1
11608: PUSH
11609: LD_INT 0
11611: PPUSH
11612: LD_INT 1
11614: PPUSH
11615: CALL_OW 12
11619: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11620: LD_INT 70
11622: PPUSH
11623: CALL_OW 67
// if i then
11627: LD_VAR 0 1
11631: IFFALSE 11647
// Say ( JMM , D2c-JMM-1 ) else
11633: LD_EXP 37
11637: PPUSH
11638: LD_STRING D2c-JMM-1
11640: PPUSH
11641: CALL_OW 88
11645: GO 11659
// Say ( JMM , D2c-JMM-1a ) ;
11647: LD_EXP 37
11651: PPUSH
11652: LD_STRING D2c-JMM-1a
11654: PPUSH
11655: CALL_OW 88
// end ;
11659: PPOPN 1
11661: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11662: LD_EXP 14
11666: PUSH
11667: LD_EXP 38
11671: PPUSH
11672: CALL_OW 302
11676: AND
11677: PUSH
11678: LD_EXP 38
11682: PPUSH
11683: CALL 911 0 1
11687: AND
11688: PUSH
11689: LD_EXP 17
11693: NOT
11694: AND
11695: IFFALSE 11727
11697: GO 11699
11699: DISABLE
// begin bobby_in_veh := true ;
11700: LD_ADDR_EXP 17
11704: PUSH
11705: LD_INT 1
11707: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11708: LD_INT 70
11710: PPUSH
11711: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11715: LD_EXP 38
11719: PPUSH
11720: LD_STRING D2c-Bobby-1
11722: PPUSH
11723: CALL_OW 88
11727: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11728: LD_EXP 14
11732: PUSH
11733: LD_EXP 40
11737: PPUSH
11738: CALL_OW 302
11742: AND
11743: PUSH
11744: LD_EXP 40
11748: PPUSH
11749: CALL 911 0 1
11753: AND
11754: PUSH
11755: LD_EXP 19
11759: NOT
11760: AND
11761: IFFALSE 11793
11763: GO 11765
11765: DISABLE
// begin lisa_in_veh := true ;
11766: LD_ADDR_EXP 19
11770: PUSH
11771: LD_INT 1
11773: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11774: LD_INT 70
11776: PPUSH
11777: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11781: LD_EXP 40
11785: PPUSH
11786: LD_STRING D2c-Lisa-1
11788: PPUSH
11789: CALL_OW 88
11793: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11794: LD_EXP 14
11798: PUSH
11799: LD_EXP 39
11803: PPUSH
11804: CALL_OW 302
11808: AND
11809: PUSH
11810: LD_EXP 39
11814: PPUSH
11815: CALL 911 0 1
11819: AND
11820: PUSH
11821: LD_EXP 18
11825: NOT
11826: AND
11827: IFFALSE 11898
11829: GO 11831
11831: DISABLE
11832: LD_INT 0
11834: PPUSH
// begin cyrus_in_veh := true ;
11835: LD_ADDR_EXP 18
11839: PUSH
11840: LD_INT 1
11842: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11843: LD_ADDR_VAR 0 1
11847: PUSH
11848: LD_INT 0
11850: PPUSH
11851: LD_INT 1
11853: PPUSH
11854: CALL_OW 12
11858: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11859: LD_INT 70
11861: PPUSH
11862: CALL_OW 67
// if i then
11866: LD_VAR 0 1
11870: IFFALSE 11886
// Say ( Cyrus , D2c-Cyrus-1 ) else
11872: LD_EXP 39
11876: PPUSH
11877: LD_STRING D2c-Cyrus-1
11879: PPUSH
11880: CALL_OW 88
11884: GO 11898
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11886: LD_EXP 39
11890: PPUSH
11891: LD_STRING D2c-Cyrus-1a
11893: PPUSH
11894: CALL_OW 88
// end ;
11898: PPOPN 1
11900: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11901: LD_EXP 44
11905: PPUSH
11906: LD_INT 16
11908: PPUSH
11909: CALL_OW 308
11913: IFFALSE 12194
11915: GO 11917
11917: DISABLE
11918: LD_INT 0
11920: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11921: LD_INT 3
11923: PPUSH
11924: LD_EXP 44
11928: PPUSH
11929: CALL_OW 471
// send_attack_on_cornel := true ;
11933: LD_ADDR_EXP 32
11937: PUSH
11938: LD_INT 1
11940: ST_TO_ADDR
// if ru_vehicles then
11941: LD_EXP 56
11945: IFFALSE 11979
// for i in ru_vehicles do
11947: LD_ADDR_VAR 0 1
11951: PUSH
11952: LD_EXP 56
11956: PUSH
11957: FOR_IN
11958: IFFALSE 11977
// ComAgressiveMove ( i , 215 , 69 ) ;
11960: LD_VAR 0 1
11964: PPUSH
11965: LD_INT 215
11967: PPUSH
11968: LD_INT 69
11970: PPUSH
11971: CALL_OW 114
11975: GO 11957
11977: POP
11978: POP
// if ru_patrol then
11979: LD_EXP 53
11983: IFFALSE 12017
// for i in ru_patrol do
11985: LD_ADDR_VAR 0 1
11989: PUSH
11990: LD_EXP 53
11994: PUSH
11995: FOR_IN
11996: IFFALSE 12015
// ComAgressiveMove ( i , 215 , 69 ) ;
11998: LD_VAR 0 1
12002: PPUSH
12003: LD_INT 215
12005: PPUSH
12006: LD_INT 69
12008: PPUSH
12009: CALL_OW 114
12013: GO 11995
12015: POP
12016: POP
// if frank_send_to_scout then
12017: LD_EXP 15
12021: IFFALSE 12035
// SayRadio ( Frank , D3b-Frank-1 ) ;
12023: LD_EXP 51
12027: PPUSH
12028: LD_STRING D3b-Frank-1
12030: PPUSH
12031: CALL_OW 94
// wait ( 0 0$03 ) ;
12035: LD_INT 105
12037: PPUSH
12038: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
12042: LD_EXP 44
12046: PPUSH
12047: LD_STRING D4-Corn-1
12049: PPUSH
12050: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
12054: LD_INT 35
12056: PPUSH
12057: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
12061: LD_INT 22
12063: PUSH
12064: LD_INT 4
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 21
12073: PUSH
12074: LD_INT 1
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 3
12083: PUSH
12084: LD_INT 24
12086: PUSH
12087: LD_INT 1000
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: LIST
12102: PPUSH
12103: CALL_OW 69
12107: PUSH
12108: LD_INT 6
12110: LESS
12111: IFFALSE 12054
// if Cornel then
12113: LD_EXP 44
12117: IFFALSE 12157
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
12119: LD_EXP 44
12123: PPUSH
12124: LD_STRING D5-Corn-1
12126: PPUSH
12127: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
12131: LD_EXP 44
12135: PPUSH
12136: LD_EXP 2
12140: PUSH
12141: LD_STRING Cornel
12143: STR
12144: PPUSH
12145: CALL_OW 38
// cornel_saved := true ;
12149: LD_ADDR_EXP 27
12153: PUSH
12154: LD_INT 1
12156: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
12157: LD_INT 4
12159: PPUSH
12160: LD_INT 8
12162: PPUSH
12163: CALL_OW 343
// wait ( 0 0$01 ) ;
12167: LD_INT 35
12169: PPUSH
12170: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
12174: LD_INT 3
12176: PPUSH
12177: LD_EXP 44
12181: PPUSH
12182: CALL_OW 472
// send_attack_on_cornel := false ;
12186: LD_ADDR_EXP 32
12190: PUSH
12191: LD_INT 0
12193: ST_TO_ADDR
// end ;
12194: PPOPN 1
12196: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
12197: LD_INT 9
12199: PPUSH
12200: LD_INT 22
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PPUSH
12210: CALL_OW 70
12214: PUSH
12215: LD_EXP 33
12219: OR
12220: IFFALSE 12441
12222: GO 12224
12224: DISABLE
12225: LD_INT 0
12227: PPUSH
12228: PPUSH
// begin enable ;
12229: ENABLE
// if not jmm_on_west then
12230: LD_EXP 5
12234: NOT
12235: IFFALSE 12246
// begin YouLost ( 4 ) ;
12237: LD_STRING 4
12239: PPUSH
12240: CALL_OW 104
// exit ;
12244: GO 12441
// end ; if not game_end then
12246: LD_EXP 33
12250: NOT
12251: IFFALSE 12261
// game_end := true ;
12253: LD_ADDR_EXP 33
12257: PUSH
12258: LD_INT 1
12260: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
12261: LD_ADDR_VAR 0 2
12265: PUSH
12266: LD_INT 9
12268: PPUSH
12269: LD_INT 22
12271: PUSH
12272: LD_INT 1
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PPUSH
12279: CALL_OW 70
12283: ST_TO_ADDR
// if not filter then
12284: LD_VAR 0 2
12288: NOT
12289: IFFALSE 12293
// exit ;
12291: GO 12441
// for i in filter do
12293: LD_ADDR_VAR 0 1
12297: PUSH
12298: LD_VAR 0 2
12302: PUSH
12303: FOR_IN
12304: IFFALSE 12439
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
12306: LD_VAR 0 1
12310: PPUSH
12311: CALL_OW 302
12315: PUSH
12316: LD_VAR 0 1
12320: PPUSH
12321: CALL_OW 247
12325: PUSH
12326: LD_INT 2
12328: EQUAL
12329: AND
12330: IFFALSE 12402
// begin if i = JMM and save_group < 4 then
12332: LD_VAR 0 1
12336: PUSH
12337: LD_EXP 37
12341: EQUAL
12342: PUSH
12343: LD_EXP 23
12347: PUSH
12348: LD_INT 4
12350: LESS
12351: AND
12352: IFFALSE 12356
// continue ;
12354: GO 12303
// if GetNation ( i ) = nation_american then
12356: LD_VAR 0 1
12360: PPUSH
12361: CALL_OW 248
12365: PUSH
12366: LD_INT 1
12368: EQUAL
12369: IFFALSE 12379
// veh_on_meta := true ;
12371: LD_ADDR_EXP 28
12375: PUSH
12376: LD_INT 1
12378: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
12379: LD_VAR 0 1
12383: PPUSH
12384: CALL_OW 311
12388: PPUSH
12389: CALL 12444 0 1
// RemoveUnit ( i ) ;
12393: LD_VAR 0 1
12397: PPUSH
12398: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
12402: LD_VAR 0 1
12406: PPUSH
12407: CALL_OW 302
12411: PUSH
12412: LD_VAR 0 1
12416: PPUSH
12417: CALL_OW 247
12421: PUSH
12422: LD_INT 1
12424: EQUAL
12425: AND
12426: IFFALSE 12437
// Save ( i ) ;
12428: LD_VAR 0 1
12432: PPUSH
12433: CALL 12444 0 1
// end ;
12437: GO 12303
12439: POP
12440: POP
// end ;
12441: PPOPN 2
12443: END
// export function Save ( i ) ; begin
12444: LD_INT 0
12446: PPUSH
// if i = JMM and save_counter >= 4 then
12447: LD_VAR 0 1
12451: PUSH
12452: LD_EXP 37
12456: EQUAL
12457: PUSH
12458: LD_EXP 36
12462: PUSH
12463: LD_INT 4
12465: GREATEREQUAL
12466: AND
12467: IFFALSE 12603
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12469: LD_EXP 24
12473: PUSH
12474: LD_INT 22
12476: PUSH
12477: LD_INT 1
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 21
12486: PUSH
12487: LD_INT 1
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PPUSH
12498: CALL_OW 69
12502: PUSH
12503: LD_INT 1
12505: GREATER
12506: AND
12507: IFFALSE 12564
// begin show_query := false ;
12509: LD_ADDR_EXP 24
12513: PUSH
12514: LD_INT 0
12516: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12517: LD_STRING Q2
12519: PPUSH
12520: CALL_OW 97
12524: PUSH
12525: LD_INT 1
12527: DOUBLE
12528: EQUAL
12529: IFTRUE 12533
12531: GO 12544
12533: POP
// wait_for_them := true ; 2 :
12534: LD_ADDR_EXP 25
12538: PUSH
12539: LD_INT 1
12541: ST_TO_ADDR
12542: GO 12564
12544: LD_INT 2
12546: DOUBLE
12547: EQUAL
12548: IFTRUE 12552
12550: GO 12563
12552: POP
// wait_for_them := false ; end ;
12553: LD_ADDR_EXP 25
12557: PUSH
12558: LD_INT 0
12560: ST_TO_ADDR
12561: GO 12564
12563: POP
// end ; save_counter := save_counter + 1 ;
12564: LD_ADDR_EXP 36
12568: PUSH
12569: LD_EXP 36
12573: PUSH
12574: LD_INT 1
12576: PLUS
12577: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12578: LD_ADDR_EXP 23
12582: PUSH
12583: LD_EXP 23
12587: PUSH
12588: LD_EXP 37
12592: ADD
12593: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12594: LD_EXP 37
12598: PPUSH
12599: CALL_OW 64
// end ; if i = Lisa then
12603: LD_VAR 0 1
12607: PUSH
12608: LD_EXP 40
12612: EQUAL
12613: IFFALSE 12654
// begin save_counter := save_counter + 1 ;
12615: LD_ADDR_EXP 36
12619: PUSH
12620: LD_EXP 36
12624: PUSH
12625: LD_INT 1
12627: PLUS
12628: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12629: LD_ADDR_EXP 23
12633: PUSH
12634: LD_EXP 23
12638: PUSH
12639: LD_EXP 40
12643: ADD
12644: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12645: LD_EXP 40
12649: PPUSH
12650: CALL_OW 64
// end ; if i = Bobby then
12654: LD_VAR 0 1
12658: PUSH
12659: LD_EXP 38
12663: EQUAL
12664: IFFALSE 12705
// begin save_counter := save_counter + 1 ;
12666: LD_ADDR_EXP 36
12670: PUSH
12671: LD_EXP 36
12675: PUSH
12676: LD_INT 1
12678: PLUS
12679: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12680: LD_ADDR_EXP 23
12684: PUSH
12685: LD_EXP 23
12689: PUSH
12690: LD_EXP 38
12694: ADD
12695: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12696: LD_EXP 38
12700: PPUSH
12701: CALL_OW 64
// end ; if i = Cyrus then
12705: LD_VAR 0 1
12709: PUSH
12710: LD_EXP 39
12714: EQUAL
12715: IFFALSE 12756
// begin save_counter := save_counter + 1 ;
12717: LD_ADDR_EXP 36
12721: PUSH
12722: LD_EXP 36
12726: PUSH
12727: LD_INT 1
12729: PLUS
12730: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12731: LD_ADDR_EXP 23
12735: PUSH
12736: LD_EXP 23
12740: PUSH
12741: LD_EXP 39
12745: ADD
12746: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12747: LD_EXP 39
12751: PPUSH
12752: CALL_OW 64
// end ; if i = Khatam then
12756: LD_VAR 0 1
12760: PUSH
12761: LD_EXP 41
12765: EQUAL
12766: IFFALSE 12807
// begin save_counter := save_counter + 1 ;
12768: LD_ADDR_EXP 36
12772: PUSH
12773: LD_EXP 36
12777: PUSH
12778: LD_INT 1
12780: PLUS
12781: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12782: LD_ADDR_EXP 23
12786: PUSH
12787: LD_EXP 23
12791: PUSH
12792: LD_EXP 41
12796: ADD
12797: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12798: LD_EXP 41
12802: PPUSH
12803: CALL_OW 64
// end ; if i = Frank then
12807: LD_VAR 0 1
12811: PUSH
12812: LD_EXP 51
12816: EQUAL
12817: IFFALSE 12858
// begin save_counter := save_counter + 1 ;
12819: LD_ADDR_EXP 36
12823: PUSH
12824: LD_EXP 36
12828: PUSH
12829: LD_INT 1
12831: PLUS
12832: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12833: LD_ADDR_EXP 23
12837: PUSH
12838: LD_EXP 23
12842: PUSH
12843: LD_EXP 51
12847: ADD
12848: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12849: LD_EXP 51
12853: PPUSH
12854: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12858: LD_VAR 0 1
12862: PUSH
12863: LD_EXP 37
12867: NONEQUAL
12868: PUSH
12869: LD_VAR 0 1
12873: PPUSH
12874: CALL_OW 302
12878: AND
12879: PUSH
12880: LD_VAR 0 1
12884: PPUSH
12885: CALL_OW 247
12889: PUSH
12890: LD_INT 1
12892: EQUAL
12893: AND
12894: PUSH
12895: LD_VAR 0 1
12899: PUSH
12900: LD_EXP 23
12904: IN
12905: NOT
12906: AND
12907: IFFALSE 12948
// begin save_counter := save_counter + 1 ;
12909: LD_ADDR_EXP 36
12913: PUSH
12914: LD_EXP 36
12918: PUSH
12919: LD_INT 1
12921: PLUS
12922: ST_TO_ADDR
// save_others := save_others ^ i ;
12923: LD_ADDR_EXP 22
12927: PUSH
12928: LD_EXP 22
12932: PUSH
12933: LD_VAR 0 1
12937: ADD
12938: ST_TO_ADDR
// RemoveUnit ( i ) ;
12939: LD_VAR 0 1
12943: PPUSH
12944: CALL_OW 64
// end ; end ;
12948: LD_VAR 0 2
12952: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12953: LD_EXP 24
12957: NOT
12958: PUSH
12959: LD_EXP 25
12963: NOT
12964: AND
12965: PUSH
12966: LD_INT 22
12968: PUSH
12969: LD_INT 1
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 21
12978: PUSH
12979: LD_INT 1
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PPUSH
12990: CALL_OW 69
12994: PUSH
12995: LD_INT 0
12997: EQUAL
12998: OR
12999: IFFALSE 13008
13001: GO 13003
13003: DISABLE
// EndMission ;
13004: CALL 13009 0 0
13008: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
13009: LD_INT 0
13011: PPUSH
13012: PPUSH
13013: PPUSH
13014: PPUSH
13015: PPUSH
// wait ( 0 0$01 ) ;
13016: LD_INT 35
13018: PPUSH
13019: CALL_OW 67
// if tick <= 12 12$00 then
13023: LD_OWVAR 1
13027: PUSH
13028: LD_INT 25200
13030: LESSEQUAL
13031: IFFALSE 13040
// SetAchievement ( ACH_ASPEED_3 ) ;
13033: LD_STRING ACH_ASPEED_3
13035: PPUSH
13036: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
13040: LD_EXP 23
13044: PUSH
13045: LD_EXP 22
13049: ADD
13050: PPUSH
13051: LD_INT 25
13053: PUSH
13054: LD_INT 4
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PPUSH
13061: CALL_OW 72
13065: PUSH
13066: LD_INT 0
13068: EQUAL
13069: IFFALSE 13085
// begin wait ( 3 ) ;
13071: LD_INT 3
13073: PPUSH
13074: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
13078: LD_STRING ACH_NOSCI
13080: PPUSH
13081: CALL_OW 543
// end ; m1 := solar_builded ;
13085: LD_ADDR_VAR 0 3
13089: PUSH
13090: LD_EXP 14
13094: ST_TO_ADDR
// m2 := veh_on_meta ;
13095: LD_ADDR_VAR 0 4
13099: PUSH
13100: LD_EXP 28
13104: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
13105: LD_ADDR_VAR 0 5
13109: PUSH
13110: LD_EXP 34
13114: PUSH
13115: LD_INT 0
13117: EQUAL
13118: ST_TO_ADDR
// if solar_builded then
13119: LD_EXP 14
13123: IFFALSE 13137
// AddMedal ( Solar1 , 1 ) else
13125: LD_STRING Solar1
13127: PPUSH
13128: LD_INT 1
13130: PPUSH
13131: CALL_OW 101
13135: GO 13148
// AddMedal ( Solar1 , - 1 ) ;
13137: LD_STRING Solar1
13139: PPUSH
13140: LD_INT 1
13142: NEG
13143: PPUSH
13144: CALL_OW 101
// if veh_on_meta then
13148: LD_EXP 28
13152: IFFALSE 13166
// AddMedal ( Solar2 , 1 ) else
13154: LD_STRING Solar2
13156: PPUSH
13157: LD_INT 1
13159: PPUSH
13160: CALL_OW 101
13164: GO 13196
// if solar_builded then
13166: LD_EXP 14
13170: IFFALSE 13185
// AddMedal ( Solar2 , - 1 ) else
13172: LD_STRING Solar2
13174: PPUSH
13175: LD_INT 1
13177: NEG
13178: PPUSH
13179: CALL_OW 101
13183: GO 13196
// AddMedal ( Solar2 , - 2 ) ;
13185: LD_STRING Solar2
13187: PPUSH
13188: LD_INT 2
13190: NEG
13191: PPUSH
13192: CALL_OW 101
// if lose_counter = 0 then
13196: LD_EXP 34
13200: PUSH
13201: LD_INT 0
13203: EQUAL
13204: IFFALSE 13218
// AddMedal ( No , 1 ) else
13206: LD_STRING No
13208: PPUSH
13209: LD_INT 1
13211: PPUSH
13212: CALL_OW 101
13216: GO 13262
// if lose_counter > 0 and lose_counter < 4 then
13218: LD_EXP 34
13222: PUSH
13223: LD_INT 0
13225: GREATER
13226: PUSH
13227: LD_EXP 34
13231: PUSH
13232: LD_INT 4
13234: LESS
13235: AND
13236: IFFALSE 13251
// AddMedal ( No , - 1 ) else
13238: LD_STRING No
13240: PPUSH
13241: LD_INT 1
13243: NEG
13244: PPUSH
13245: CALL_OW 101
13249: GO 13262
// AddMedal ( UpTo4 , - 1 ) ;
13251: LD_STRING UpTo4
13253: PPUSH
13254: LD_INT 1
13256: NEG
13257: PPUSH
13258: CALL_OW 101
// GiveMedals ( MAIN ) ;
13262: LD_STRING MAIN
13264: PPUSH
13265: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
13269: LD_OWVAR 67
13273: PUSH
13274: LD_INT 3
13276: GREATEREQUAL
13277: PUSH
13278: LD_VAR 0 3
13282: AND
13283: PUSH
13284: LD_VAR 0 4
13288: AND
13289: PUSH
13290: LD_VAR 0 5
13294: AND
13295: IFFALSE 13307
// SetAchievementEX ( ACH_AMER , 3 ) ;
13297: LD_STRING ACH_AMER
13299: PPUSH
13300: LD_INT 3
13302: PPUSH
13303: CALL_OW 564
// if IsDead ( Pokryshkin ) then
13307: LD_EXP 52
13311: PPUSH
13312: CALL_OW 301
13316: IFFALSE 13372
// begin stop_talking := true ;
13318: LD_ADDR_OWVAR 56
13322: PUSH
13323: LD_INT 1
13325: ST_TO_ADDR
// for i in save_group union save_others do
13326: LD_ADDR_VAR 0 2
13330: PUSH
13331: LD_EXP 23
13335: PUSH
13336: LD_EXP 22
13340: UNION
13341: PUSH
13342: FOR_IN
13343: IFFALSE 13362
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
13345: LD_VAR 0 2
13349: PPUSH
13350: LD_INT 1
13352: PPUSH
13353: LD_INT 1500
13355: PPUSH
13356: CALL_OW 591
13360: GO 13342
13362: POP
13363: POP
// stop_talking := false ;
13364: LD_ADDR_OWVAR 56
13368: PUSH
13369: LD_INT 0
13371: ST_TO_ADDR
// end ; RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_american ] ] ) ) ;
13372: LD_INT 22
13374: PUSH
13375: LD_INT 1
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: LD_INT 23
13384: PUSH
13385: LD_INT 1
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PPUSH
13396: CALL_OW 69
13400: PPUSH
13401: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
13405: LD_EXP 37
13409: PPUSH
13410: LD_EXP 2
13414: PUSH
13415: LD_STRING JMM
13417: STR
13418: PPUSH
13419: CALL_OW 38
// if Bobby in save_group then
13423: LD_EXP 38
13427: PUSH
13428: LD_EXP 23
13432: IN
13433: IFFALSE 13453
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
13435: LD_EXP 38
13439: PPUSH
13440: LD_EXP 2
13444: PUSH
13445: LD_STRING Bobby
13447: STR
13448: PPUSH
13449: CALL_OW 38
// if Cyrus in save_group then
13453: LD_EXP 39
13457: PUSH
13458: LD_EXP 23
13462: IN
13463: IFFALSE 13483
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
13465: LD_EXP 39
13469: PPUSH
13470: LD_EXP 2
13474: PUSH
13475: LD_STRING Cyrus
13477: STR
13478: PPUSH
13479: CALL_OW 38
// if Lisa in save_group then
13483: LD_EXP 40
13487: PUSH
13488: LD_EXP 23
13492: IN
13493: IFFALSE 13513
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13495: LD_EXP 40
13499: PPUSH
13500: LD_EXP 2
13504: PUSH
13505: LD_STRING Lisa
13507: STR
13508: PPUSH
13509: CALL_OW 38
// if Frank in save_group then
13513: LD_EXP 51
13517: PUSH
13518: LD_EXP 23
13522: IN
13523: IFFALSE 13543
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13525: LD_EXP 51
13529: PPUSH
13530: LD_EXP 2
13534: PUSH
13535: LD_STRING Frank
13537: STR
13538: PPUSH
13539: CALL_OW 38
// if Khatam in save_group then
13543: LD_EXP 41
13547: PUSH
13548: LD_EXP 23
13552: IN
13553: IFFALSE 13573
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13555: LD_EXP 41
13559: PPUSH
13560: LD_EXP 2
13564: PUSH
13565: LD_STRING Khatam
13567: STR
13568: PPUSH
13569: CALL_OW 38
// if save_others then
13573: LD_EXP 22
13577: IFFALSE 13591
// SaveCharacters ( save_others , 03_others ) ;
13579: LD_EXP 22
13583: PPUSH
13584: LD_STRING 03_others
13586: PPUSH
13587: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13591: LD_EXP 45
13595: PUSH
13596: LD_EXP 45
13600: PPUSH
13601: CALL_OW 302
13605: AND
13606: PUSH
13607: LD_EXP 27
13611: AND
13612: IFFALSE 13624
// begin ResetFog ;
13614: CALL_OW 335
// DisplayEndingScene ;
13618: CALL 13646 0 0
// end else
13622: GO 13637
// DeleteCharacters ( mission_prefix & Cornel ) ;
13624: LD_EXP 2
13628: PUSH
13629: LD_STRING Cornel
13631: STR
13632: PPUSH
13633: CALL_OW 40
// YouWin ;
13637: CALL_OW 103
// end ;
13641: LD_VAR 0 1
13645: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13646: LD_INT 0
13648: PPUSH
13649: PPUSH
13650: PPUSH
13651: PPUSH
13652: PPUSH
13653: PPUSH
// InGameOn ;
13654: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13658: LD_INT 208
13660: PPUSH
13661: LD_INT 62
13663: PPUSH
13664: LD_INT 1
13666: PPUSH
13667: LD_INT 10
13669: NEG
13670: PPUSH
13671: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13675: LD_INT 208
13677: PPUSH
13678: LD_INT 62
13680: PPUSH
13681: LD_INT 1
13683: PPUSH
13684: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13688: LD_ADDR_VAR 0 3
13692: PUSH
13693: LD_INT 22
13695: PUSH
13696: LD_INT 3
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: LD_INT 21
13708: PUSH
13709: LD_INT 2
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 21
13718: PUSH
13719: LD_INT 1
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PPUSH
13735: CALL_OW 69
13739: ST_TO_ADDR
// if filter then
13740: LD_VAR 0 3
13744: IFFALSE 13772
// for i in filter do
13746: LD_ADDR_VAR 0 2
13750: PUSH
13751: LD_VAR 0 3
13755: PUSH
13756: FOR_IN
13757: IFFALSE 13770
// RemoveUnit ( i ) ;
13759: LD_VAR 0 2
13763: PPUSH
13764: CALL_OW 64
13768: GO 13756
13770: POP
13771: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13772: LD_ADDR_VAR 0 3
13776: PUSH
13777: LD_INT 22
13779: PUSH
13780: LD_INT 4
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 21
13789: PUSH
13790: LD_INT 1
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PPUSH
13801: CALL_OW 69
13805: ST_TO_ADDR
// if filter then
13806: LD_VAR 0 3
13810: IFFALSE 13841
// for i in filter do
13812: LD_ADDR_VAR 0 2
13816: PUSH
13817: LD_VAR 0 3
13821: PUSH
13822: FOR_IN
13823: IFFALSE 13839
// SetLives ( i , 0 ) ;
13825: LD_VAR 0 2
13829: PPUSH
13830: LD_INT 0
13832: PPUSH
13833: CALL_OW 234
13837: GO 13822
13839: POP
13840: POP
// uc_side := 4 ;
13841: LD_ADDR_OWVAR 20
13845: PUSH
13846: LD_INT 4
13848: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13849: LD_ADDR_VAR 0 4
13853: PUSH
13854: LD_STRING Cornell
13856: PPUSH
13857: LD_INT 0
13859: PPUSH
13860: LD_STRING 
13862: PPUSH
13863: CALL 39308 0 3
13867: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13868: LD_VAR 0 4
13872: PPUSH
13873: LD_INT 208
13875: PPUSH
13876: LD_INT 62
13878: PPUSH
13879: LD_INT 0
13881: PPUSH
13882: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13886: LD_VAR 0 4
13890: PPUSH
13891: LD_INT 100
13893: PPUSH
13894: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13898: LD_INT 3
13900: PPUSH
13901: LD_VAR 0 4
13905: PPUSH
13906: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13910: LD_INT 4
13912: PPUSH
13913: LD_INT 3
13915: PPUSH
13916: LD_INT 1
13918: PPUSH
13919: LD_INT 1
13921: PPUSH
13922: CALL_OW 80
// uc_side := 3 ;
13926: LD_ADDR_OWVAR 20
13930: PUSH
13931: LD_INT 3
13933: ST_TO_ADDR
// uc_nation := 3 ;
13934: LD_ADDR_OWVAR 21
13938: PUSH
13939: LD_INT 3
13941: ST_TO_ADDR
// InitHc ;
13942: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13946: LD_ADDR_VAR 0 5
13950: PUSH
13951: LD_STRING Mikhail
13953: PPUSH
13954: LD_INT 0
13956: PPUSH
13957: LD_STRING 
13959: PPUSH
13960: CALL 39308 0 3
13964: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13965: LD_INT 1
13967: PPUSH
13968: LD_INT 1
13970: PPUSH
13971: LD_INT 0
13973: PPUSH
13974: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13978: LD_ADDR_VAR 0 6
13982: PUSH
13983: LD_VAR 0 6
13987: PUSH
13988: CALL_OW 44
13992: ADD
13993: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13994: LD_ADDR_VAR 0 6
13998: PUSH
13999: LD_VAR 0 6
14003: PUSH
14004: CALL_OW 44
14008: ADD
14009: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
14010: LD_INT 2
14012: PPUSH
14013: LD_INT 4
14015: PPUSH
14016: LD_INT 0
14018: PPUSH
14019: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
14023: LD_ADDR_VAR 0 6
14027: PUSH
14028: LD_VAR 0 6
14032: PUSH
14033: CALL_OW 44
14037: ADD
14038: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
14039: LD_VAR 0 5
14043: PPUSH
14044: LD_INT 17
14046: PPUSH
14047: LD_INT 0
14049: PPUSH
14050: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
14054: LD_VAR 0 5
14058: PPUSH
14059: LD_INT 210
14061: PPUSH
14062: LD_INT 63
14064: PPUSH
14065: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
14069: LD_VAR 0 5
14073: PPUSH
14074: LD_INT 208
14076: PPUSH
14077: LD_INT 62
14079: PPUSH
14080: CALL_OW 178
// for i in fake_russians do
14084: LD_ADDR_VAR 0 2
14088: PUSH
14089: LD_VAR 0 6
14093: PUSH
14094: FOR_IN
14095: IFFALSE 14173
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
14097: LD_VAR 0 2
14101: PPUSH
14102: LD_INT 17
14104: PPUSH
14105: LD_INT 0
14107: PPUSH
14108: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
14112: LD_VAR 0 2
14116: PPUSH
14117: LD_INT 215
14119: PPUSH
14120: LD_INT 67
14122: PPUSH
14123: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
14127: LD_VAR 0 2
14131: PPUSH
14132: LD_INT 208
14134: PPUSH
14135: LD_INT 62
14137: PPUSH
14138: CALL_OW 178
// if GetClass ( i ) = 4 then
14142: LD_VAR 0 2
14146: PPUSH
14147: CALL_OW 257
14151: PUSH
14152: LD_INT 4
14154: EQUAL
14155: IFFALSE 14171
// ComHeal ( i , fake_cornel ) ;
14157: LD_VAR 0 2
14161: PPUSH
14162: LD_VAR 0 4
14166: PPUSH
14167: CALL_OW 128
// end ;
14171: GO 14094
14173: POP
14174: POP
// Wait ( 0 0$01 ) ;
14175: LD_INT 35
14177: PPUSH
14178: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
14182: LD_INT 208
14184: PPUSH
14185: LD_INT 62
14187: PPUSH
14188: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
14192: LD_INT 208
14194: PPUSH
14195: LD_INT 62
14197: PPUSH
14198: LD_INT 1
14200: PPUSH
14201: LD_INT 10
14203: NEG
14204: PPUSH
14205: CALL_OW 330
// Wait ( 0 0$15 ) ;
14209: LD_INT 525
14211: PPUSH
14212: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
14216: LD_INT 208
14218: PPUSH
14219: LD_INT 62
14221: PPUSH
14222: LD_INT 1
14224: PPUSH
14225: CALL_OW 331
// ResetFog ;
14229: CALL_OW 335
// InGameOff ;
14233: CALL_OW 9
// end ;
14237: LD_VAR 0 1
14241: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
14242: LD_INT 10
14244: PPUSH
14245: LD_INT 22
14247: PUSH
14248: LD_INT 1
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PPUSH
14255: CALL_OW 70
14259: PUSH
14260: LD_EXP 44
14264: PPUSH
14265: CALL_OW 302
14269: AND
14270: PUSH
14271: LD_INT 22
14273: PUSH
14274: LD_INT 1
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: PPUSH
14281: CALL_OW 69
14285: PPUSH
14286: LD_EXP 44
14290: PPUSH
14291: CALL_OW 74
14295: PPUSH
14296: LD_EXP 44
14300: PPUSH
14301: CALL_OW 296
14305: PUSH
14306: LD_INT 30
14308: LESS
14309: OR
14310: IFFALSE 14361
14312: GO 14314
14314: DISABLE
// begin enable ;
14315: ENABLE
// powell_warn := powell_warn + 1 ;
14316: LD_ADDR_EXP 35
14320: PUSH
14321: LD_EXP 35
14325: PUSH
14326: LD_INT 1
14328: PLUS
14329: ST_TO_ADDR
// if powell_warn = 3 then
14330: LD_EXP 35
14334: PUSH
14335: LD_INT 3
14337: EQUAL
14338: IFFALSE 14349
// begin YouLost ( 5 ) ;
14340: LD_STRING 5
14342: PPUSH
14343: CALL_OW 104
// exit ;
14347: GO 14361
// end ; SayRadioNoFace ( Powell , DWarn-Pow-1 ) ;
14349: LD_EXP 46
14353: PPUSH
14354: LD_STRING DWarn-Pow-1
14356: PPUSH
14357: CALL_OW 586
// end ; end_of_file
14361: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
14362: LD_EXP 8
14366: IFFALSE 16203
14368: GO 14370
14370: DISABLE
14371: LD_INT 0
14373: PPUSH
14374: PPUSH
14375: PPUSH
14376: PPUSH
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
14381: LD_EXP 44
14385: PUSH
14386: LD_EXP 45
14390: ADD
14391: PUSH
14392: LD_EXP 6
14396: ADD
14397: PPUSH
14398: LD_INT 250
14400: PPUSH
14401: LD_INT 120
14403: PPUSH
14404: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
14408: LD_ADDR_VAR 0 2
14412: PUSH
14413: LD_EXP 6
14417: PPUSH
14418: LD_INT 25
14420: PUSH
14421: LD_INT 2
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PPUSH
14428: CALL_OW 72
14432: PUSH
14433: LD_EXP 45
14437: DIFF
14438: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
14439: LD_ADDR_VAR 0 3
14443: PUSH
14444: LD_EXP 6
14448: PPUSH
14449: LD_INT 21
14451: PUSH
14452: LD_INT 1
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PPUSH
14459: CALL_OW 72
14463: PUSH
14464: LD_VAR 0 2
14468: DIFF
14469: ST_TO_ADDR
// if not has_eng then
14470: LD_VAR 0 2
14474: NOT
14475: IFFALSE 14558
// begin uc_side := 4 ;
14477: LD_ADDR_OWVAR 20
14481: PUSH
14482: LD_INT 4
14484: ST_TO_ADDR
// uc_nation := 1 ;
14485: LD_ADDR_OWVAR 21
14489: PUSH
14490: LD_INT 1
14492: ST_TO_ADDR
// bc_type := b_depot ;
14493: LD_ADDR_OWVAR 42
14497: PUSH
14498: LD_INT 0
14500: ST_TO_ADDR
// bc_level := 2 ;
14501: LD_ADDR_OWVAR 43
14505: PUSH
14506: LD_INT 2
14508: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14509: LD_ADDR_VAR 0 4
14513: PUSH
14514: LD_INT 264
14516: PPUSH
14517: LD_INT 120
14519: PPUSH
14520: LD_INT 4
14522: PPUSH
14523: CALL_OW 47
14527: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14528: LD_INT 264
14530: PPUSH
14531: LD_INT 120
14533: PPUSH
14534: LD_INT 4
14536: PPUSH
14537: LD_INT 10
14539: NEG
14540: PPUSH
14541: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14545: LD_INT 264
14547: PPUSH
14548: LD_INT 120
14550: PPUSH
14551: LD_INT 4
14553: PPUSH
14554: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14558: LD_INT 35
14560: PPUSH
14561: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14565: LD_EXP 44
14569: PPUSH
14570: LD_INT 10
14572: PPUSH
14573: CALL_OW 308
14577: PUSH
14578: LD_EXP 44
14582: PPUSH
14583: CALL_OW 310
14587: PPUSH
14588: LD_INT 10
14590: PPUSH
14591: CALL_OW 308
14595: OR
14596: IFFALSE 14558
// if has_eng and not dep then
14598: LD_VAR 0 2
14602: PUSH
14603: LD_VAR 0 4
14607: NOT
14608: AND
14609: IFFALSE 14759
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14611: LD_VAR 0 2
14615: PPUSH
14616: LD_INT 0
14618: PPUSH
14619: LD_INT 264
14621: PPUSH
14622: LD_INT 120
14624: PPUSH
14625: LD_INT 4
14627: PPUSH
14628: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14632: LD_INT 35
14634: PPUSH
14635: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14639: LD_INT 22
14641: PUSH
14642: LD_INT 4
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PUSH
14649: LD_INT 30
14651: PUSH
14652: LD_INT 0
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PPUSH
14663: CALL_OW 69
14667: IFFALSE 14632
// ComMoveXY ( filter , 264 , 120 ) ;
14669: LD_VAR 0 3
14673: PPUSH
14674: LD_INT 264
14676: PPUSH
14677: LD_INT 120
14679: PPUSH
14680: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14684: LD_INT 35
14686: PPUSH
14687: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14691: LD_INT 22
14693: PUSH
14694: LD_INT 4
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 30
14703: PUSH
14704: LD_INT 0
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: LD_INT 3
14713: PUSH
14714: LD_INT 57
14716: PUSH
14717: EMPTY
14718: LIST
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: LIST
14728: PPUSH
14729: CALL_OW 69
14733: IFFALSE 14684
// ComMoveXY ( filter , 247 , 113 ) ;
14735: LD_VAR 0 3
14739: PPUSH
14740: LD_INT 247
14742: PPUSH
14743: LD_INT 113
14745: PPUSH
14746: CALL_OW 111
// Wait ( 0 0$2 ) ;
14750: LD_INT 70
14752: PPUSH
14753: CALL_OW 67
// end else
14757: GO 14771
// begin SetSide ( dep , 4 ) ;
14759: LD_VAR 0 4
14763: PPUSH
14764: LD_INT 4
14766: PPUSH
14767: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14771: LD_ADDR_VAR 0 4
14775: PUSH
14776: LD_INT 22
14778: PUSH
14779: LD_INT 4
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 30
14788: PUSH
14789: LD_INT 0
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PPUSH
14800: CALL_OW 69
14804: PUSH
14805: LD_INT 1
14807: ARRAY
14808: ST_TO_ADDR
// if not has_eng then
14809: LD_VAR 0 2
14813: NOT
14814: IFFALSE 14901
// for i = 1 to 2 do
14816: LD_ADDR_VAR 0 1
14820: PUSH
14821: DOUBLE
14822: LD_INT 1
14824: DEC
14825: ST_TO_ADDR
14826: LD_INT 2
14828: PUSH
14829: FOR_TO
14830: IFFALSE 14899
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14832: LD_VAR 0 3
14836: PUSH
14837: LD_INT 1
14839: ARRAY
14840: PPUSH
14841: LD_VAR 0 4
14845: PPUSH
14846: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14850: LD_VAR 0 3
14854: PUSH
14855: LD_INT 1
14857: ARRAY
14858: PPUSH
14859: LD_INT 2
14861: PPUSH
14862: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14866: LD_VAR 0 3
14870: PUSH
14871: LD_INT 1
14873: ARRAY
14874: PPUSH
14875: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14879: LD_ADDR_VAR 0 3
14883: PUSH
14884: LD_VAR 0 3
14888: PPUSH
14889: LD_INT 1
14891: PPUSH
14892: CALL_OW 3
14896: ST_TO_ADDR
// end ;
14897: GO 14829
14899: POP
14900: POP
// if IsInUnit ( Cornel ) then
14901: LD_EXP 44
14905: PPUSH
14906: CALL_OW 310
14910: IFFALSE 14988
// begin cargo := IsInUnit ( Cornel ) ;
14912: LD_ADDR_VAR 0 7
14916: PUSH
14917: LD_EXP 44
14921: PPUSH
14922: CALL_OW 310
14926: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14927: LD_VAR 0 7
14931: PPUSH
14932: LD_INT 1
14934: PPUSH
14935: CALL_OW 289
14939: IFFALSE 14950
// ComUnload ( cargo ) ;
14941: LD_VAR 0 7
14945: PPUSH
14946: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14950: LD_EXP 44
14954: PPUSH
14955: LD_INT 235
14957: PPUSH
14958: LD_INT 122
14960: PPUSH
14961: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14965: LD_EXP 44
14969: PPUSH
14970: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14974: LD_EXP 44
14978: PPUSH
14979: LD_VAR 0 4
14983: PPUSH
14984: CALL_OW 180
// end ; if Bierezov then
14988: LD_EXP 45
14992: IFFALSE 15040
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14994: LD_EXP 45
14998: PPUSH
14999: LD_INT 260
15001: PPUSH
15002: LD_INT 120
15004: PPUSH
15005: CALL_OW 111
// if dep then
15009: LD_VAR 0 4
15013: IFFALSE 15031
// AddComEnterUnit ( Bierezov , dep ) else
15015: LD_EXP 45
15019: PPUSH
15020: LD_VAR 0 4
15024: PPUSH
15025: CALL_OW 180
15029: GO 15040
// AddComHold ( Bierezov ) ;
15031: LD_EXP 45
15035: PPUSH
15036: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
15040: LD_INT 525
15042: PPUSH
15043: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
15047: LD_ADDR_VAR 0 2
15051: PUSH
15052: LD_INT 22
15054: PUSH
15055: LD_INT 4
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PUSH
15062: LD_INT 25
15064: PUSH
15065: LD_INT 2
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PPUSH
15076: CALL_OW 69
15080: PUSH
15081: LD_EXP 45
15085: DIFF
15086: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15087: LD_INT 35
15089: PPUSH
15090: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
15094: LD_ADDR_VAR 0 6
15098: PUSH
15099: LD_INT 10
15101: PPUSH
15102: CALL_OW 435
15106: ST_TO_ADDR
// if crates then
15107: LD_VAR 0 6
15111: IFFALSE 15140
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
15113: LD_VAR 0 2
15117: PPUSH
15118: LD_VAR 0 6
15122: PUSH
15123: LD_INT 1
15125: ARRAY
15126: PPUSH
15127: LD_VAR 0 6
15131: PUSH
15132: LD_INT 2
15134: ARRAY
15135: PPUSH
15136: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
15140: LD_VAR 0 4
15144: PPUSH
15145: CALL_OW 274
15149: PPUSH
15150: LD_INT 1
15152: PPUSH
15153: CALL_OW 275
15157: PUSH
15158: LD_INT 40
15160: GREATEREQUAL
15161: IFFALSE 15087
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
15163: LD_ADDR_VAR 0 5
15167: PUSH
15168: LD_INT 4
15170: PUSH
15171: LD_INT 256
15173: PUSH
15174: LD_INT 111
15176: PUSH
15177: LD_INT 2
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: PUSH
15186: LD_INT 31
15188: PUSH
15189: LD_INT 243
15191: PUSH
15192: LD_INT 112
15194: PUSH
15195: LD_INT 2
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 31
15206: PUSH
15207: LD_INT 254
15209: PUSH
15210: LD_INT 114
15212: PUSH
15213: LD_INT 2
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: LIST
15226: ST_TO_ADDR
// for i in blist do
15227: LD_ADDR_VAR 0 1
15231: PUSH
15232: LD_VAR 0 5
15236: PUSH
15237: FOR_IN
15238: IFFALSE 15287
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
15240: LD_VAR 0 2
15244: PPUSH
15245: LD_VAR 0 1
15249: PUSH
15250: LD_INT 1
15252: ARRAY
15253: PPUSH
15254: LD_VAR 0 1
15258: PUSH
15259: LD_INT 2
15261: ARRAY
15262: PPUSH
15263: LD_VAR 0 1
15267: PUSH
15268: LD_INT 3
15270: ARRAY
15271: PPUSH
15272: LD_VAR 0 1
15276: PUSH
15277: LD_INT 4
15279: ARRAY
15280: PPUSH
15281: CALL_OW 205
15285: GO 15237
15287: POP
15288: POP
// repeat wait ( 0 0$01 ) ;
15289: LD_INT 35
15291: PPUSH
15292: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
15296: LD_INT 22
15298: PUSH
15299: LD_INT 4
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 30
15308: PUSH
15309: LD_INT 4
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 3
15318: PUSH
15319: LD_INT 57
15321: PUSH
15322: EMPTY
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: LIST
15333: PPUSH
15334: CALL_OW 69
15338: IFFALSE 15289
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15340: LD_VAR 0 3
15344: PPUSH
15345: LD_INT 22
15347: PUSH
15348: LD_INT 4
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: LD_INT 30
15357: PUSH
15358: LD_INT 4
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PPUSH
15369: CALL_OW 69
15373: PUSH
15374: LD_INT 1
15376: ARRAY
15377: PPUSH
15378: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
15382: LD_VAR 0 3
15386: PPUSH
15387: LD_INT 1
15389: PPUSH
15390: CALL_OW 183
// if has_eng > 1 then
15394: LD_VAR 0 2
15398: PUSH
15399: LD_INT 1
15401: GREATER
15402: IFFALSE 15544
// for i = has_eng downto 2 do
15404: LD_ADDR_VAR 0 1
15408: PUSH
15409: DOUBLE
15410: LD_VAR 0 2
15414: INC
15415: ST_TO_ADDR
15416: LD_INT 2
15418: PUSH
15419: FOR_DOWNTO
15420: IFFALSE 15542
// begin if IsInUnit ( has_eng [ i ] ) then
15422: LD_VAR 0 2
15426: PUSH
15427: LD_VAR 0 1
15431: ARRAY
15432: PPUSH
15433: CALL_OW 310
15437: IFFALSE 15454
// ComExitBuilding ( has_eng [ i ] ) ;
15439: LD_VAR 0 2
15443: PUSH
15444: LD_VAR 0 1
15448: ARRAY
15449: PPUSH
15450: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15454: LD_VAR 0 2
15458: PUSH
15459: LD_VAR 0 1
15463: ARRAY
15464: PPUSH
15465: LD_INT 22
15467: PUSH
15468: LD_INT 4
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 30
15477: PUSH
15478: LD_INT 4
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PPUSH
15489: CALL_OW 69
15493: PUSH
15494: LD_INT 1
15496: ARRAY
15497: PPUSH
15498: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15502: LD_VAR 0 2
15506: PUSH
15507: LD_VAR 0 1
15511: ARRAY
15512: PPUSH
15513: LD_INT 1
15515: PPUSH
15516: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15520: LD_ADDR_VAR 0 2
15524: PUSH
15525: LD_VAR 0 2
15529: PPUSH
15530: LD_VAR 0 1
15534: PPUSH
15535: CALL_OW 3
15539: ST_TO_ADDR
// end ;
15540: GO 15419
15542: POP
15543: POP
// repeat wait ( 0 0$01 ) ;
15544: LD_INT 35
15546: PPUSH
15547: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15551: LD_INT 22
15553: PUSH
15554: LD_INT 4
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_INT 30
15563: PUSH
15564: LD_INT 31
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: LD_INT 3
15573: PUSH
15574: LD_INT 57
15576: PUSH
15577: EMPTY
15578: LIST
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: LIST
15588: PPUSH
15589: CALL_OW 69
15593: PUSH
15594: LD_INT 1
15596: GREATER
15597: IFFALSE 15544
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15599: LD_ADDR_VAR 0 8
15603: PUSH
15604: LD_EXP 6
15608: PPUSH
15609: LD_INT 25
15611: PUSH
15612: LD_INT 1
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PPUSH
15619: CALL_OW 72
15623: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15624: LD_ADDR_VAR 0 1
15628: PUSH
15629: DOUBLE
15630: LD_INT 1
15632: DEC
15633: ST_TO_ADDR
15634: LD_INT 22
15636: PUSH
15637: LD_INT 4
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PUSH
15644: LD_INT 30
15646: PUSH
15647: LD_INT 31
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 3
15656: PUSH
15657: LD_INT 57
15659: PUSH
15660: EMPTY
15661: LIST
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: LIST
15671: PPUSH
15672: CALL_OW 69
15676: PUSH
15677: FOR_TO
15678: IFFALSE 15762
// begin if not sol [ i ] then
15680: LD_VAR 0 8
15684: PUSH
15685: LD_VAR 0 1
15689: ARRAY
15690: NOT
15691: IFFALSE 15695
// break ;
15693: GO 15762
// ComExitBuilding ( sol [ i ] ) ;
15695: LD_VAR 0 8
15699: PUSH
15700: LD_VAR 0 1
15704: ARRAY
15705: PPUSH
15706: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15710: LD_VAR 0 8
15714: PUSH
15715: LD_VAR 0 1
15719: ARRAY
15720: PPUSH
15721: LD_INT 22
15723: PUSH
15724: LD_INT 4
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 30
15733: PUSH
15734: LD_INT 31
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PPUSH
15745: CALL_OW 69
15749: PUSH
15750: LD_VAR 0 1
15754: ARRAY
15755: PPUSH
15756: CALL_OW 180
// end ;
15760: GO 15677
15762: POP
15763: POP
// if sol > 3 then
15764: LD_VAR 0 8
15768: PUSH
15769: LD_INT 3
15771: GREATER
15772: IFFALSE 15889
// begin ComExitBuilding ( sol [ 3 ] ) ;
15774: LD_VAR 0 8
15778: PUSH
15779: LD_INT 3
15781: ARRAY
15782: PPUSH
15783: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15787: LD_VAR 0 8
15791: PUSH
15792: LD_INT 3
15794: ARRAY
15795: PPUSH
15796: LD_INT 246
15798: PPUSH
15799: LD_INT 94
15801: PPUSH
15802: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15806: LD_VAR 0 8
15810: PUSH
15811: LD_INT 3
15813: ARRAY
15814: PPUSH
15815: LD_INT 175
15817: PPUSH
15818: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15822: LD_VAR 0 8
15826: PUSH
15827: LD_INT 3
15829: ARRAY
15830: PPUSH
15831: LD_INT 224
15833: PPUSH
15834: LD_INT 90
15836: PPUSH
15837: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15841: LD_VAR 0 8
15845: PUSH
15846: LD_INT 3
15848: ARRAY
15849: PPUSH
15850: LD_INT 245
15852: PPUSH
15853: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15857: LD_VAR 0 8
15861: PUSH
15862: LD_INT 3
15864: ARRAY
15865: PPUSH
15866: LD_INT 223
15868: PPUSH
15869: LD_INT 110
15871: PPUSH
15872: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15876: LD_VAR 0 8
15880: PUSH
15881: LD_INT 3
15883: ARRAY
15884: PPUSH
15885: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15889: LD_VAR 0 2
15893: PPUSH
15894: LD_VAR 0 4
15898: PPUSH
15899: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15903: LD_INT 22
15905: PUSH
15906: LD_INT 4
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: PUSH
15913: LD_INT 30
15915: PUSH
15916: LD_INT 4
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PPUSH
15927: CALL_OW 69
15931: PUSH
15932: LD_INT 1
15934: ARRAY
15935: PPUSH
15936: CALL_OW 313
15940: PUSH
15941: LD_INT 6
15943: LESS
15944: IFFALSE 16008
// begin if IsInUnit ( Cornel ) then
15946: LD_EXP 44
15950: PPUSH
15951: CALL_OW 310
15955: IFFALSE 15966
// ComExitBuilding ( Cornel ) ;
15957: LD_EXP 44
15961: PPUSH
15962: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15966: LD_EXP 44
15970: PPUSH
15971: LD_INT 22
15973: PUSH
15974: LD_INT 4
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 30
15983: PUSH
15984: LD_INT 4
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PPUSH
15995: CALL_OW 69
15999: PUSH
16000: LD_INT 1
16002: ARRAY
16003: PPUSH
16004: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
16008: LD_INT 35
16010: PPUSH
16011: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16015: LD_ADDR_VAR 0 3
16019: PUSH
16020: LD_INT 22
16022: PUSH
16023: LD_INT 4
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: LD_INT 21
16032: PUSH
16033: LD_INT 3
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PUSH
16040: LD_INT 3
16042: PUSH
16043: LD_INT 24
16045: PUSH
16046: LD_INT 1000
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: LIST
16061: PPUSH
16062: CALL_OW 69
16066: ST_TO_ADDR
// if filter and has_eng then
16067: LD_VAR 0 3
16071: PUSH
16072: LD_VAR 0 2
16076: AND
16077: IFFALSE 16143
// begin for i in has_eng do
16079: LD_ADDR_VAR 0 1
16083: PUSH
16084: LD_VAR 0 2
16088: PUSH
16089: FOR_IN
16090: IFFALSE 16139
// begin if IsInUnit ( i ) then
16092: LD_VAR 0 1
16096: PPUSH
16097: CALL_OW 310
16101: IFFALSE 16112
// ComExitBuilding ( i ) ;
16103: LD_VAR 0 1
16107: PPUSH
16108: CALL_OW 122
// Wait ( 3 ) ;
16112: LD_INT 3
16114: PPUSH
16115: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
16119: LD_VAR 0 1
16123: PPUSH
16124: LD_VAR 0 3
16128: PUSH
16129: LD_INT 1
16131: ARRAY
16132: PPUSH
16133: CALL_OW 130
// end ;
16137: GO 16089
16139: POP
16140: POP
// end else
16141: GO 16197
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
16143: LD_VAR 0 2
16147: PUSH
16148: LD_VAR 0 2
16152: PPUSH
16153: LD_INT 56
16155: PUSH
16156: EMPTY
16157: LIST
16158: PPUSH
16159: CALL_OW 72
16163: AND
16164: IFFALSE 16197
// for i in has_eng do
16166: LD_ADDR_VAR 0 1
16170: PUSH
16171: LD_VAR 0 2
16175: PUSH
16176: FOR_IN
16177: IFFALSE 16195
// ComEnterUnit ( i , dep ) ;
16179: LD_VAR 0 1
16183: PPUSH
16184: LD_VAR 0 4
16188: PPUSH
16189: CALL_OW 120
16193: GO 16176
16195: POP
16196: POP
// until cornel_prepared ;
16197: LD_EXP 11
16201: IFFALSE 16008
// end ;
16203: PPOPN 8
16205: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
16206: LD_EXP 11
16210: IFFALSE 16646
16212: GO 16214
16214: DISABLE
16215: LD_INT 0
16217: PPUSH
16218: PPUSH
16219: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
16220: LD_ADDR_VAR 0 2
16224: PUSH
16225: LD_INT 22
16227: PUSH
16228: LD_INT 4
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PUSH
16235: LD_INT 30
16237: PUSH
16238: LD_INT 4
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PPUSH
16249: CALL_OW 69
16253: PUSH
16254: LD_INT 1
16256: ARRAY
16257: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
16258: LD_EXP 6
16262: PPUSH
16263: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
16267: LD_EXP 45
16271: PUSH
16272: LD_EXP 45
16276: PPUSH
16277: CALL_OW 310
16281: AND
16282: IFFALSE 16293
// ComExitBuilding ( Bierezov ) ;
16284: LD_EXP 45
16288: PPUSH
16289: CALL_OW 122
// Wait ( 0 0$03 ) ;
16293: LD_INT 105
16295: PPUSH
16296: CALL_OW 67
// for i in cornel_units do
16300: LD_ADDR_VAR 0 1
16304: PUSH
16305: LD_EXP 6
16309: PUSH
16310: FOR_IN
16311: IFFALSE 16387
// begin if GetClass ( i ) in [ 2 , 3 ] then
16313: LD_VAR 0 1
16317: PPUSH
16318: CALL_OW 257
16322: PUSH
16323: LD_INT 2
16325: PUSH
16326: LD_INT 3
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: IN
16333: IFFALSE 16370
// begin ComEnterUnit ( i , arm ) ;
16335: LD_VAR 0 1
16339: PPUSH
16340: LD_VAR 0 2
16344: PPUSH
16345: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
16349: LD_VAR 0 1
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: CALL_OW 183
// AddComExitBuilding ( i ) ;
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
16370: LD_VAR 0 1
16374: PPUSH
16375: LD_INT 257
16377: PPUSH
16378: LD_INT 121
16380: PPUSH
16381: CALL_OW 171
// end ;
16385: GO 16310
16387: POP
16388: POP
// Wait ( 1 1$00 ) ;
16389: LD_INT 2100
16391: PPUSH
16392: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
16396: LD_ADDR_VAR 0 3
16400: PUSH
16401: LD_EXP 44
16405: PUSH
16406: LD_EXP 45
16410: ADD
16411: PUSH
16412: LD_EXP 6
16416: ADD
16417: PUSH
16418: LD_EXP 6
16422: PPUSH
16423: LD_INT 21
16425: PUSH
16426: LD_INT 2
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PPUSH
16433: CALL_OW 72
16437: DIFF
16438: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
16439: LD_VAR 0 3
16443: PPUSH
16444: LD_INT 248
16446: PPUSH
16447: LD_INT 85
16449: PPUSH
16450: CALL_OW 111
// AddComHold ( filter ) ;
16454: LD_VAR 0 3
16458: PPUSH
16459: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
16463: LD_INT 35
16465: PPUSH
16466: CALL_OW 67
// until cornel_attack ;
16470: LD_EXP 9
16474: IFFALSE 16463
// ComAgressiveMove ( filter , 209 , 63 ) ;
16476: LD_VAR 0 3
16480: PPUSH
16481: LD_INT 209
16483: PPUSH
16484: LD_INT 63
16486: PPUSH
16487: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16491: LD_EXP 44
16495: PPUSH
16496: LD_INT 208
16498: PPUSH
16499: LD_INT 62
16501: PPUSH
16502: CALL_OW 114
// AddComHold ( Cornel ) ;
16506: LD_EXP 44
16510: PPUSH
16511: CALL_OW 200
// if Bierezov then
16515: LD_EXP 45
16519: IFFALSE 16609
// begin filter := filter diff Bierezov ;
16521: LD_ADDR_VAR 0 3
16525: PUSH
16526: LD_VAR 0 3
16530: PUSH
16531: LD_EXP 45
16535: DIFF
16536: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16537: LD_EXP 45
16541: PPUSH
16542: LD_INT 6
16544: PPUSH
16545: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16549: LD_EXP 45
16553: PPUSH
16554: LD_INT 235
16556: PPUSH
16557: LD_INT 60
16559: PPUSH
16560: CALL_OW 111
// AddComHold ( Bierezov ) ;
16564: LD_EXP 45
16568: PPUSH
16569: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16573: LD_EXP 45
16577: PPUSH
16578: LD_INT 350
16580: PPUSH
16581: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16585: LD_EXP 45
16589: PPUSH
16590: LD_INT 198
16592: PPUSH
16593: LD_INT 28
16595: PPUSH
16596: CALL_OW 171
// AddComHold ( Bierezov ) ;
16600: LD_EXP 45
16604: PPUSH
16605: CALL_OW 200
// end ; repeat wait ( 0 0$2 ) ;
16609: LD_INT 70
16611: PPUSH
16612: CALL_OW 67
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16616: LD_EXP 44
16620: PPUSH
16621: LD_INT 208
16623: PPUSH
16624: LD_INT 62
16626: PPUSH
16627: CALL_OW 114
// until not IsInArea ( Cornel , cornelKappaArea ) ;
16631: LD_EXP 44
16635: PPUSH
16636: LD_INT 16
16638: PPUSH
16639: CALL_OW 308
16643: NOT
16644: IFFALSE 16609
// end ; end_of_file
16646: PPOPN 3
16648: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16649: LD_EXP 53
16653: PUSH
16654: LD_EXP 31
16658: NOT
16659: AND
16660: PUSH
16661: LD_EXP 32
16665: NOT
16666: AND
16667: IFFALSE 17117
16669: GO 16671
16671: DISABLE
16672: LD_INT 0
16674: PPUSH
16675: PPUSH
16676: PPUSH
16677: PPUSH
// begin enable ;
16678: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16679: LD_ADDR_VAR 0 4
16683: PUSH
16684: LD_INT 81
16686: PUSH
16687: LD_INT 3
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PPUSH
16694: CALL_OW 69
16698: ST_TO_ADDR
// for i = 1 to ru_patrol do
16699: LD_ADDR_VAR 0 2
16703: PUSH
16704: DOUBLE
16705: LD_INT 1
16707: DEC
16708: ST_TO_ADDR
16709: LD_EXP 53
16713: PUSH
16714: FOR_TO
16715: IFFALSE 17115
// begin un := ru_patrol [ i ] ;
16717: LD_ADDR_VAR 0 1
16721: PUSH
16722: LD_EXP 53
16726: PUSH
16727: LD_VAR 0 2
16731: ARRAY
16732: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16733: LD_VAR 0 1
16737: PPUSH
16738: LD_INT 13
16740: PPUSH
16741: CALL_OW 308
16745: IFFALSE 16850
// begin if not ru_alert then
16747: LD_EXP 60
16751: NOT
16752: IFFALSE 16762
// ru_alert := true ;
16754: LD_ADDR_EXP 60
16758: PUSH
16759: LD_INT 1
16761: ST_TO_ADDR
// if not See ( 1 , un ) then
16762: LD_INT 1
16764: PPUSH
16765: LD_VAR 0 1
16769: PPUSH
16770: CALL_OW 292
16774: NOT
16775: IFFALSE 16789
// SetLives ( un , 1000 ) ;
16777: LD_VAR 0 1
16781: PPUSH
16782: LD_INT 1000
16784: PPUSH
16785: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16789: LD_ADDR_EXP 53
16793: PUSH
16794: LD_EXP 53
16798: PUSH
16799: LD_VAR 0 1
16803: DIFF
16804: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16805: LD_VAR 0 1
16809: PPUSH
16810: LD_INT 22
16812: PUSH
16813: LD_INT 3
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 30
16822: PUSH
16823: LD_INT 4
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PPUSH
16834: CALL_OW 69
16838: PPUSH
16839: CALL 1007 0 1
16843: PPUSH
16844: CALL_OW 120
// continue ;
16848: GO 16714
// end ; if IsOk ( un ) and not HasTask ( un ) then
16850: LD_VAR 0 1
16854: PPUSH
16855: CALL_OW 302
16859: PUSH
16860: LD_VAR 0 1
16864: PPUSH
16865: CALL_OW 314
16869: NOT
16870: AND
16871: IFFALSE 16964
// begin for j = 1 to ru_firepoints_south [ i ] do
16873: LD_ADDR_VAR 0 3
16877: PUSH
16878: DOUBLE
16879: LD_INT 1
16881: DEC
16882: ST_TO_ADDR
16883: LD_EXP 59
16887: PUSH
16888: LD_VAR 0 2
16892: ARRAY
16893: PUSH
16894: FOR_TO
16895: IFFALSE 16962
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16897: LD_VAR 0 1
16901: PPUSH
16902: LD_EXP 59
16906: PUSH
16907: LD_VAR 0 2
16911: ARRAY
16912: PUSH
16913: LD_VAR 0 3
16917: ARRAY
16918: PUSH
16919: LD_INT 1
16921: ARRAY
16922: PPUSH
16923: LD_EXP 59
16927: PUSH
16928: LD_VAR 0 2
16932: ARRAY
16933: PUSH
16934: LD_VAR 0 3
16938: ARRAY
16939: PUSH
16940: LD_INT 2
16942: ARRAY
16943: PPUSH
16944: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16948: LD_VAR 0 1
16952: PPUSH
16953: LD_INT 70
16955: PPUSH
16956: CALL_OW 202
// end ;
16960: GO 16894
16962: POP
16963: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16964: LD_VAR 0 1
16968: PPUSH
16969: CALL_OW 256
16973: PUSH
16974: LD_INT 700
16976: LESS
16977: PUSH
16978: LD_VAR 0 1
16982: PPUSH
16983: LD_INT 13
16985: PPUSH
16986: CALL_OW 308
16990: NOT
16991: AND
16992: IFFALSE 17044
// begin ComMoveToArea ( un , retreatArea ) ;
16994: LD_VAR 0 1
16998: PPUSH
16999: LD_INT 13
17001: PPUSH
17002: CALL_OW 113
// if not ru_alert_xy then
17006: LD_EXP 61
17010: NOT
17011: IFFALSE 17042
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
17013: LD_ADDR_EXP 61
17017: PUSH
17018: LD_VAR 0 1
17022: PPUSH
17023: CALL_OW 250
17027: PUSH
17028: LD_VAR 0 1
17032: PPUSH
17033: CALL_OW 251
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: ST_TO_ADDR
// end else
17042: GO 17113
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17044: LD_VAR 0 1
17048: PPUSH
17049: LD_VAR 0 4
17053: PPUSH
17054: LD_VAR 0 1
17058: PPUSH
17059: CALL_OW 74
17063: PPUSH
17064: CALL_OW 296
17068: PUSH
17069: LD_INT 9
17071: LESS
17072: PUSH
17073: LD_VAR 0 1
17077: PPUSH
17078: CALL_OW 256
17082: PUSH
17083: LD_INT 500
17085: GREATER
17086: AND
17087: IFFALSE 17113
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17089: LD_VAR 0 1
17093: PPUSH
17094: LD_VAR 0 4
17098: PPUSH
17099: LD_VAR 0 1
17103: PPUSH
17104: CALL_OW 74
17108: PPUSH
17109: CALL_OW 115
// end ;
17113: GO 16714
17115: POP
17116: POP
// end ;
17117: PPOPN 4
17119: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
17120: LD_EXP 60
17124: PUSH
17125: LD_EXP 61
17129: AND
17130: PUSH
17131: LD_EXP 31
17135: NOT
17136: AND
17137: PUSH
17138: LD_EXP 32
17142: NOT
17143: AND
17144: IFFALSE 17354
17146: GO 17148
17148: DISABLE
17149: LD_INT 0
17151: PPUSH
17152: PPUSH
// begin enable ;
17153: ENABLE
// if not ru_vehicles then
17154: LD_EXP 56
17158: NOT
17159: IFFALSE 17163
// exit ;
17161: GO 17354
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17163: LD_ADDR_VAR 0 2
17167: PUSH
17168: LD_INT 81
17170: PUSH
17171: LD_INT 3
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PPUSH
17178: CALL_OW 69
17182: ST_TO_ADDR
// if ru_vehicles then
17183: LD_EXP 56
17187: IFFALSE 17354
// begin for i in ru_vehicles do
17189: LD_ADDR_VAR 0 1
17193: PUSH
17194: LD_EXP 56
17198: PUSH
17199: FOR_IN
17200: IFFALSE 17352
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
17202: LD_VAR 0 1
17206: PPUSH
17207: CALL_OW 302
17211: PUSH
17212: LD_VAR 0 1
17216: PPUSH
17217: LD_VAR 0 2
17221: PPUSH
17222: LD_VAR 0 1
17226: PPUSH
17227: CALL_OW 74
17231: PPUSH
17232: CALL_OW 296
17236: PUSH
17237: LD_INT 9
17239: LESS
17240: AND
17241: IFFALSE 17267
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17243: LD_VAR 0 1
17247: PPUSH
17248: LD_VAR 0 2
17252: PPUSH
17253: LD_VAR 0 1
17257: PPUSH
17258: CALL_OW 74
17262: PPUSH
17263: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
17267: LD_VAR 0 1
17271: PPUSH
17272: CALL_OW 314
17276: NOT
17277: PUSH
17278: LD_VAR 0 1
17282: PPUSH
17283: CALL_OW 302
17287: AND
17288: PUSH
17289: LD_VAR 0 1
17293: PPUSH
17294: LD_EXP 61
17298: PUSH
17299: LD_INT 1
17301: ARRAY
17302: PPUSH
17303: LD_EXP 61
17307: PUSH
17308: LD_INT 2
17310: ARRAY
17311: PPUSH
17312: CALL_OW 297
17316: PUSH
17317: LD_INT 10
17319: GREATER
17320: AND
17321: IFFALSE 17350
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
17323: LD_VAR 0 1
17327: PPUSH
17328: LD_EXP 61
17332: PUSH
17333: LD_INT 1
17335: ARRAY
17336: PPUSH
17337: LD_EXP 61
17341: PUSH
17342: LD_INT 2
17344: ARRAY
17345: PPUSH
17346: CALL_OW 114
// end ;
17350: GO 17199
17352: POP
17353: POP
// end ; end ;
17354: PPOPN 2
17356: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
17357: LD_EXP 61
17361: PUSH
17362: LD_EXP 60
17366: AND
17367: PUSH
17368: LD_INT 3
17370: PPUSH
17371: CALL_OW 463
17375: NOT
17376: AND
17377: PUSH
17378: LD_EXP 31
17382: NOT
17383: AND
17384: PUSH
17385: LD_EXP 32
17389: NOT
17390: AND
17391: IFFALSE 17486
17393: GO 17395
17395: DISABLE
17396: LD_INT 0
17398: PPUSH
// begin enable ;
17399: ENABLE
// ru_alert_xy := false ;
17400: LD_ADDR_EXP 61
17404: PUSH
17405: LD_INT 0
17407: ST_TO_ADDR
// ru_alert := false ;
17408: LD_ADDR_EXP 60
17412: PUSH
17413: LD_INT 0
17415: ST_TO_ADDR
// if ru_vehicles then
17416: LD_EXP 56
17420: IFFALSE 17486
// for i in ru_vehicles do
17422: LD_ADDR_VAR 0 1
17426: PUSH
17427: LD_EXP 56
17431: PUSH
17432: FOR_IN
17433: IFFALSE 17484
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
17435: LD_VAR 0 1
17439: PPUSH
17440: CALL_OW 302
17444: PUSH
17445: LD_VAR 0 1
17449: PPUSH
17450: LD_INT 89
17452: PPUSH
17453: LD_INT 36
17455: PPUSH
17456: CALL_OW 297
17460: PUSH
17461: LD_INT 10
17463: GREATER
17464: AND
17465: IFFALSE 17482
// ComMoveXY ( i , 89 , 36 ) ;
17467: LD_VAR 0 1
17471: PPUSH
17472: LD_INT 89
17474: PPUSH
17475: LD_INT 36
17477: PPUSH
17478: CALL_OW 111
17482: GO 17432
17484: POP
17485: POP
// end ;
17486: PPOPN 1
17488: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
17489: LD_EXP 55
17493: PUSH
17494: LD_EXP 31
17498: NOT
17499: AND
17500: PUSH
17501: LD_EXP 32
17505: NOT
17506: AND
17507: IFFALSE 17791
17509: GO 17511
17511: DISABLE
17512: LD_INT 0
17514: PPUSH
17515: PPUSH
17516: PPUSH
// begin enable ;
17517: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17518: LD_ADDR_VAR 0 3
17522: PUSH
17523: LD_INT 81
17525: PUSH
17526: LD_INT 3
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PPUSH
17533: CALL_OW 69
17537: ST_TO_ADDR
// for i = 1 to ru_forest do
17538: LD_ADDR_VAR 0 1
17542: PUSH
17543: DOUBLE
17544: LD_INT 1
17546: DEC
17547: ST_TO_ADDR
17548: LD_EXP 55
17552: PUSH
17553: FOR_TO
17554: IFFALSE 17789
// begin un := ru_forest [ i ] ;
17556: LD_ADDR_VAR 0 2
17560: PUSH
17561: LD_EXP 55
17565: PUSH
17566: LD_VAR 0 1
17570: ARRAY
17571: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17572: LD_VAR 0 2
17576: PPUSH
17577: LD_INT 13
17579: PPUSH
17580: CALL_OW 308
17584: IFFALSE 17674
// begin if not See ( 1 , un ) then
17586: LD_INT 1
17588: PPUSH
17589: LD_VAR 0 2
17593: PPUSH
17594: CALL_OW 292
17598: NOT
17599: IFFALSE 17613
// SetLives ( un , 1000 ) ;
17601: LD_VAR 0 2
17605: PPUSH
17606: LD_INT 1000
17608: PPUSH
17609: CALL_OW 234
// ru_forest := ru_forest diff un ;
17613: LD_ADDR_EXP 55
17617: PUSH
17618: LD_EXP 55
17622: PUSH
17623: LD_VAR 0 2
17627: DIFF
17628: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17629: LD_VAR 0 2
17633: PPUSH
17634: LD_INT 22
17636: PUSH
17637: LD_INT 3
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 30
17646: PUSH
17647: LD_INT 4
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PPUSH
17658: CALL_OW 69
17662: PPUSH
17663: CALL 1007 0 1
17667: PPUSH
17668: CALL_OW 120
// continue ;
17672: GO 17553
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17674: LD_VAR 0 2
17678: PPUSH
17679: CALL_OW 256
17683: PUSH
17684: LD_INT 700
17686: LESS
17687: PUSH
17688: LD_VAR 0 2
17692: PPUSH
17693: LD_INT 13
17695: PPUSH
17696: CALL_OW 308
17700: NOT
17701: AND
17702: IFFALSE 17718
// ComMoveToArea ( un , retreatArea ) else
17704: LD_VAR 0 2
17708: PPUSH
17709: LD_INT 13
17711: PPUSH
17712: CALL_OW 113
17716: GO 17787
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17718: LD_VAR 0 2
17722: PPUSH
17723: LD_VAR 0 3
17727: PPUSH
17728: LD_VAR 0 2
17732: PPUSH
17733: CALL_OW 74
17737: PPUSH
17738: CALL_OW 296
17742: PUSH
17743: LD_INT 9
17745: LESS
17746: PUSH
17747: LD_VAR 0 2
17751: PPUSH
17752: CALL_OW 256
17756: PUSH
17757: LD_INT 500
17759: GREATER
17760: AND
17761: IFFALSE 17787
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17763: LD_VAR 0 2
17767: PPUSH
17768: LD_VAR 0 3
17772: PPUSH
17773: LD_VAR 0 2
17777: PPUSH
17778: CALL_OW 74
17782: PPUSH
17783: CALL_OW 115
// end ;
17787: GO 17553
17789: POP
17790: POP
// end ;
17791: PPOPN 3
17793: END
// every 0 0$10 trigger not send_attack_on_cornel or IsDead ( Cornel ) do var i , filter ;
17794: LD_EXP 32
17798: NOT
17799: PUSH
17800: LD_EXP 44
17804: PPUSH
17805: CALL_OW 301
17809: OR
17810: IFFALSE 17971
17812: GO 17814
17814: DISABLE
17815: LD_INT 0
17817: PPUSH
17818: PPUSH
// begin enable ;
17819: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_inarea , ignoreBuildingsArea ] ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 990 ] ] ] ) ;
17820: LD_ADDR_VAR 0 2
17824: PUSH
17825: LD_INT 22
17827: PUSH
17828: LD_INT 3
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 3
17837: PUSH
17838: LD_INT 95
17840: PUSH
17841: LD_INT 18
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 21
17854: PUSH
17855: LD_INT 3
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 3
17864: PUSH
17865: LD_INT 24
17867: PUSH
17868: LD_INT 990
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: PPUSH
17885: CALL_OW 69
17889: ST_TO_ADDR
// if filter then
17890: LD_VAR 0 2
17894: IFFALSE 17971
// for i in filter do
17896: LD_ADDR_VAR 0 1
17900: PUSH
17901: LD_VAR 0 2
17905: PUSH
17906: FOR_IN
17907: IFFALSE 17969
// if GetY ( i ) > 70 then
17909: LD_VAR 0 1
17913: PPUSH
17914: CALL_OW 251
17918: PUSH
17919: LD_INT 70
17921: GREATER
17922: IFFALSE 17928
// continue else
17924: GO 17906
17926: GO 17967
// begin ru_alert := true ;
17928: LD_ADDR_EXP 60
17932: PUSH
17933: LD_INT 1
17935: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17936: LD_ADDR_EXP 61
17940: PUSH
17941: LD_VAR 0 1
17945: PPUSH
17946: CALL_OW 250
17950: PUSH
17951: LD_VAR 0 1
17955: PPUSH
17956: CALL_OW 251
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: ST_TO_ADDR
// break ;
17965: GO 17969
// end ;
17967: GO 17906
17969: POP
17970: POP
// end ;
17971: PPOPN 2
17973: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17974: LD_EXP 31
17978: IFFALSE 18127
17980: GO 17982
17982: DISABLE
17983: LD_INT 0
17985: PPUSH
17986: PPUSH
17987: PPUSH
17988: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17989: LD_ADDR_VAR 0 4
17993: PUSH
17994: LD_EXP 56
17998: PUSH
17999: LD_EXP 55
18003: ADD
18004: PUSH
18005: LD_EXP 53
18009: ADD
18010: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
18011: LD_ADDR_VAR 0 3
18015: PUSH
18016: LD_INT 3
18018: PPUSH
18019: LD_INT 81
18021: PUSH
18022: LD_INT 3
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PPUSH
18029: CALL_OW 70
18033: ST_TO_ADDR
// if filter and enemy then
18034: LD_VAR 0 4
18038: PUSH
18039: LD_VAR 0 3
18043: AND
18044: IFFALSE 18127
// repeat wait ( 0 0$01 ) ;
18046: LD_INT 35
18048: PPUSH
18049: CALL_OW 67
// for i in filter do
18053: LD_ADDR_VAR 0 1
18057: PUSH
18058: LD_VAR 0 4
18062: PUSH
18063: FOR_IN
18064: IFFALSE 18092
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
18066: LD_VAR 0 1
18070: PPUSH
18071: LD_VAR 0 3
18075: PPUSH
18076: LD_VAR 0 1
18080: PPUSH
18081: CALL_OW 74
18085: PPUSH
18086: CALL_OW 115
// end ;
18090: GO 18063
18092: POP
18093: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
18094: LD_INT 3
18096: PPUSH
18097: LD_INT 81
18099: PUSH
18100: LD_INT 3
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PPUSH
18107: CALL_OW 70
18111: PUSH
18112: LD_INT 0
18114: EQUAL
18115: PUSH
18116: LD_VAR 0 4
18120: PUSH
18121: LD_INT 0
18123: EQUAL
18124: OR
18125: IFFALSE 18046
// end ;
18127: PPOPN 4
18129: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
18130: LD_EXP 26
18134: PUSH
18135: LD_INT 22
18137: PUSH
18138: LD_INT 4
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 30
18147: PUSH
18148: LD_INT 4
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 3
18157: PUSH
18158: LD_INT 57
18160: PUSH
18161: EMPTY
18162: LIST
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: LIST
18172: PPUSH
18173: CALL_OW 69
18177: AND
18178: IFFALSE 18227
18180: GO 18182
18182: DISABLE
18183: LD_INT 0
18185: PPUSH
// begin if not ru_cornel_attack then
18186: LD_EXP 58
18190: NOT
18191: IFFALSE 18195
// exit ;
18193: GO 18227
// for i in ru_cornel_attack do
18195: LD_ADDR_VAR 0 1
18199: PUSH
18200: LD_EXP 58
18204: PUSH
18205: FOR_IN
18206: IFFALSE 18225
// ComAgressiveMove ( i , 258 , 119 ) ;
18208: LD_VAR 0 1
18212: PPUSH
18213: LD_INT 258
18215: PPUSH
18216: LD_INT 119
18218: PPUSH
18219: CALL_OW 114
18223: GO 18205
18225: POP
18226: POP
// end ; end_of_file
18227: PPOPN 1
18229: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
18230: LD_EXP 5
18234: PUSH
18235: LD_EXP 9
18239: NOT
18240: AND
18241: PUSH
18242: LD_EXP 20
18246: AND
18247: IFFALSE 18359
18249: GO 18251
18251: DISABLE
18252: LD_INT 0
18254: PPUSH
// begin enable ;
18255: ENABLE
// crates_counter := crates_counter - 50 ;
18256: LD_ADDR_EXP 20
18260: PUSH
18261: LD_EXP 20
18265: PUSH
18266: LD_INT 50
18268: MINUS
18269: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
18270: LD_INT 8
18272: PPUSH
18273: LD_INT 2
18275: PPUSH
18276: LD_INT 5
18278: PPUSH
18279: CALL_OW 12
18283: PPUSH
18284: LD_INT 1
18286: PPUSH
18287: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
18291: LD_INT 1785
18293: PPUSH
18294: LD_INT 2345
18296: PPUSH
18297: CALL_OW 12
18301: PPUSH
18302: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
18306: LD_ADDR_VAR 0 1
18310: PUSH
18311: LD_INT 1
18313: PPUSH
18314: LD_OWVAR 67
18318: PUSH
18319: LD_INT 2
18321: PLUS
18322: PPUSH
18323: CALL_OW 12
18327: ST_TO_ADDR
// if r < 3 then
18328: LD_VAR 0 1
18332: PUSH
18333: LD_INT 3
18335: LESS
18336: IFFALSE 18359
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
18338: LD_INT 4
18340: PPUSH
18341: LD_INT 1
18343: PPUSH
18344: LD_INT 5
18346: PPUSH
18347: CALL_OW 12
18351: PPUSH
18352: LD_INT 1
18354: PPUSH
18355: CALL_OW 55
// end ;
18359: PPOPN 1
18361: END
// every 0 0$01 trigger cornel_active do
18362: LD_EXP 8
18366: IFFALSE 18455
18368: GO 18370
18370: DISABLE
// begin Wait ( 0 0$03 ) ;
18371: LD_INT 105
18373: PPUSH
18374: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18378: LD_INT 2
18380: PPUSH
18381: LD_INT 5
18383: PPUSH
18384: CALL_OW 12
18388: PPUSH
18389: LD_INT 10
18391: PPUSH
18392: LD_INT 1
18394: PPUSH
18395: CALL_OW 55
// Wait ( 0 0$13 ) ;
18399: LD_INT 455
18401: PPUSH
18402: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18406: LD_INT 2
18408: PPUSH
18409: LD_INT 5
18411: PPUSH
18412: CALL_OW 12
18416: PPUSH
18417: LD_INT 10
18419: PPUSH
18420: LD_INT 1
18422: PPUSH
18423: CALL_OW 55
// Wait ( 0 0$16 ) ;
18427: LD_INT 560
18429: PPUSH
18430: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18434: LD_INT 2
18436: PPUSH
18437: LD_INT 5
18439: PPUSH
18440: CALL_OW 12
18444: PPUSH
18445: LD_INT 10
18447: PPUSH
18448: LD_INT 1
18450: PPUSH
18451: CALL_OW 55
// end ; end_of_file
18455: END
// every 0 0$01 trigger cornel_prepared do
18456: LD_EXP 11
18460: IFFALSE 18519
18462: GO 18464
18464: DISABLE
// begin enable ;
18465: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
18466: LD_ADDR_OWVAR 47
18470: PUSH
18471: LD_STRING #Am03-1
18473: PUSH
18474: LD_EXP 10
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
18483: LD_ADDR_EXP 10
18487: PUSH
18488: LD_EXP 10
18492: PPUSH
18493: LD_STRING -
18495: PPUSH
18496: CALL 1077 0 2
18500: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
18501: LD_EXP 10
18505: PUSH
18506: LD_INT 0
18508: EQUAL
18509: IFFALSE 18519
// begin Display_Strings := [ ] ;
18511: LD_ADDR_OWVAR 47
18515: PUSH
18516: EMPTY
18517: ST_TO_ADDR
// disable ;
18518: DISABLE
// end ; end ;
18519: END
// every 0 0$01 trigger debug and debug_strings do
18520: LD_EXP 1
18524: PUSH
18525: LD_OWVAR 48
18529: AND
18530: IFFALSE 18546
18532: GO 18534
18534: DISABLE
// begin enable ;
18535: ENABLE
// Display_Strings := debug_strings ;
18536: LD_ADDR_OWVAR 47
18540: PUSH
18541: LD_OWVAR 48
18545: ST_TO_ADDR
// end ; end_of_file
18546: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
18547: LD_VAR 0 1
18551: PPUSH
18552: LD_VAR 0 2
18556: PPUSH
18557: CALL 35139 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
18561: LD_VAR 0 1
18565: PPUSH
18566: CALL_OW 255
18570: PUSH
18571: LD_INT 1
18573: EQUAL
18574: PUSH
18575: LD_EXP 14
18579: NOT
18580: AND
18581: IFFALSE 18591
// solar_builded := true ;
18583: LD_ADDR_EXP 14
18587: PUSH
18588: LD_INT 1
18590: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18591: LD_VAR 0 1
18595: PPUSH
18596: CALL_OW 255
18600: PUSH
18601: LD_INT 1
18603: EQUAL
18604: PUSH
18605: LD_EXP 29
18609: AND
18610: IFFALSE 18647
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18612: LD_ADDR_EXP 29
18616: PUSH
18617: LD_EXP 29
18621: PUSH
18622: LD_INT 1750
18624: PUSH
18625: LD_INT 1400
18627: PUSH
18628: LD_INT 1225
18630: PUSH
18631: LD_INT 1050
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: PUSH
18640: LD_OWVAR 67
18644: ARRAY
18645: PLUS
18646: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18647: LD_VAR 0 1
18651: PPUSH
18652: CALL_OW 255
18656: PUSH
18657: LD_INT 3
18659: EQUAL
18660: IFFALSE 18678
// ru_vehicles := ru_vehicles ^ veh ;
18662: LD_ADDR_EXP 56
18666: PUSH
18667: LD_EXP 56
18671: PUSH
18672: LD_VAR 0 1
18676: ADD
18677: ST_TO_ADDR
// end ;
18678: PPOPN 2
18680: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18681: LD_VAR 0 1
18685: PPUSH
18686: CALL 35019 0 1
// if un in ru_patrol then
18690: LD_VAR 0 1
18694: PUSH
18695: LD_EXP 53
18699: IN
18700: IFFALSE 18718
// ru_patrol := ru_patrol diff un ;
18702: LD_ADDR_EXP 53
18706: PUSH
18707: LD_EXP 53
18711: PUSH
18712: LD_VAR 0 1
18716: DIFF
18717: ST_TO_ADDR
// if un in ru_forest then
18718: LD_VAR 0 1
18722: PUSH
18723: LD_EXP 55
18727: IN
18728: IFFALSE 18746
// ru_forest := ru_forest diff un ;
18730: LD_ADDR_EXP 55
18734: PUSH
18735: LD_EXP 55
18739: PUSH
18740: LD_VAR 0 1
18744: DIFF
18745: ST_TO_ADDR
// if un in ru_vehicles then
18746: LD_VAR 0 1
18750: PUSH
18751: LD_EXP 56
18755: IN
18756: IFFALSE 18862
// begin ru_vehicles := ru_vehicles diff un ;
18758: LD_ADDR_EXP 56
18762: PUSH
18763: LD_EXP 56
18767: PUSH
18768: LD_VAR 0 1
18772: DIFF
18773: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18774: LD_ADDR_EXP 57
18778: PUSH
18779: LD_EXP 57
18783: PUSH
18784: LD_VAR 0 1
18788: PPUSH
18789: CALL_OW 265
18793: PUSH
18794: LD_VAR 0 1
18798: PPUSH
18799: CALL_OW 262
18803: PUSH
18804: LD_VAR 0 1
18808: PPUSH
18809: CALL_OW 263
18813: PUSH
18814: LD_VAR 0 1
18818: PPUSH
18819: CALL_OW 264
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: ADD
18830: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18831: LD_ADDR_EXP 13
18835: PUSH
18836: LD_EXP 13
18840: PUSH
18841: LD_INT 1
18843: PLUS
18844: ST_TO_ADDR
// if ach_counter = 10 then
18845: LD_EXP 13
18849: PUSH
18850: LD_INT 10
18852: EQUAL
18853: IFFALSE 18862
// SetAchievement ( ACH_FAUST ) ;
18855: LD_STRING ACH_FAUST
18857: PPUSH
18858: CALL_OW 543
// end ; if un = Pokryshkin then
18862: LD_VAR 0 1
18866: PUSH
18867: LD_EXP 52
18871: EQUAL
18872: IFFALSE 18881
// SetAchievement ( ACH_POKR ) ;
18874: LD_STRING ACH_POKR
18876: PPUSH
18877: CALL_OW 543
// if un = JMM then
18881: LD_VAR 0 1
18885: PUSH
18886: LD_EXP 37
18890: EQUAL
18891: IFFALSE 18900
// YouLost ( 0 ) ;
18893: LD_STRING 0
18895: PPUSH
18896: CALL_OW 104
// if un = us_dep_west then
18900: LD_VAR 0 1
18904: PUSH
18905: LD_INT 1
18907: EQUAL
18908: IFFALSE 18917
// YouLost ( 2 ) ;
18910: LD_STRING 2
18912: PPUSH
18913: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18917: LD_VAR 0 1
18921: PPUSH
18922: CALL_OW 255
18926: PUSH
18927: LD_INT 8
18929: EQUAL
18930: PUSH
18931: LD_EXP 5
18935: NOT
18936: AND
18937: IFFALSE 18946
// YouLost ( 4 ) ;
18939: LD_STRING 4
18941: PPUSH
18942: CALL_OW 104
// if un in jmm_units then
18946: LD_VAR 0 1
18950: PUSH
18951: LD_EXP 4
18955: IN
18956: IFFALSE 18972
// lose_counter := lose_counter + 1 ;
18958: LD_ADDR_EXP 34
18962: PUSH
18963: LD_EXP 34
18967: PUSH
18968: LD_INT 1
18970: PLUS
18971: ST_TO_ADDR
// end ;
18972: PPOPN 1
18974: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18975: LD_INT 0
18977: PPUSH
18978: PPUSH
// begin if GetSide ( driver ) = 3 then
18979: LD_VAR 0 1
18983: PPUSH
18984: CALL_OW 255
18988: PUSH
18989: LD_INT 3
18991: EQUAL
18992: IFFALSE 19070
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18994: LD_ADDR_VAR 0 6
18998: PUSH
18999: LD_INT 22
19001: PUSH
19002: LD_INT 3
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 30
19011: PUSH
19012: LD_INT 3
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PPUSH
19023: CALL_OW 69
19027: PPUSH
19028: CALL 1007 0 1
19032: ST_TO_ADDR
// if place then
19033: LD_VAR 0 6
19037: IFFALSE 19055
// ComEnterUnit ( driver , place ) else
19039: LD_VAR 0 1
19043: PPUSH
19044: LD_VAR 0 6
19048: PPUSH
19049: CALL_OW 120
19053: GO 19070
// ComMoveXY ( driver , 70 , 22 ) ;
19055: LD_VAR 0 1
19059: PPUSH
19060: LD_INT 70
19062: PPUSH
19063: LD_INT 22
19065: PPUSH
19066: CALL_OW 111
// end ; end ;
19070: PPOPN 6
19072: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
19073: LD_VAR 0 1
19077: PUSH
19078: LD_INT 1
19080: EQUAL
19081: PUSH
19082: LD_VAR 0 2
19086: PUSH
19087: LD_INT 4
19089: EQUAL
19090: PUSH
19091: LD_VAR 0 2
19095: PUSH
19096: LD_INT 8
19098: EQUAL
19099: PUSH
19100: LD_EXP 5
19104: NOT
19105: AND
19106: OR
19107: AND
19108: IFFALSE 19117
// YouLost ( 5 ) ;
19110: LD_STRING 5
19112: PPUSH
19113: CALL_OW 104
// end ;
19117: PPOPN 2
19119: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
19120: LD_EXP 36
19124: PUSH
19125: LD_INT 22
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 21
19137: PUSH
19138: LD_INT 1
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PPUSH
19149: CALL_OW 69
19153: PUSH
19154: LD_INT 22
19156: PUSH
19157: LD_INT 8
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 21
19166: PUSH
19167: LD_INT 1
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PPUSH
19178: CALL_OW 69
19182: ADD
19183: PLUS
19184: PUSH
19185: LD_INT 5
19187: LESS
19188: IFFALSE 19200
19190: GO 19192
19192: DISABLE
// YouLost ( 1 ) ;
19193: LD_STRING 1
19195: PPUSH
19196: CALL_OW 104
19200: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
19201: LD_INT 1
19203: PPUSH
19204: CALL_OW 255
19208: PUSH
19209: LD_INT 3
19211: EQUAL
19212: IFFALSE 19224
19214: GO 19216
19216: DISABLE
// YouLost ( 3 ) ; end_of_file end_of_file
19217: LD_STRING 3
19219: PPUSH
19220: CALL_OW 104
19224: END
// export globalGameSaveCounter ; every 0 0$1 do
19225: GO 19227
19227: DISABLE
// begin enable ;
19228: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19229: LD_STRING updateTimer(
19231: PUSH
19232: LD_OWVAR 1
19236: STR
19237: PUSH
19238: LD_STRING );
19240: STR
19241: PPUSH
19242: CALL_OW 559
// end ;
19246: END
// every 0 0$1 do
19247: GO 19249
19249: DISABLE
// begin globalGameSaveCounter := 0 ;
19250: LD_ADDR_EXP 62
19254: PUSH
19255: LD_INT 0
19257: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19258: LD_STRING setGameSaveCounter(0)
19260: PPUSH
19261: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19265: LD_STRING initStreamRollete();
19267: PPUSH
19268: CALL_OW 559
// InitStreamMode ;
19272: CALL 20598 0 0
// DefineStreamItems ( false ) ;
19276: LD_INT 0
19278: PPUSH
19279: CALL 21062 0 1
// end ;
19283: END
// export function SOS_MapStart ( ) ; begin
19284: LD_INT 0
19286: PPUSH
// if streamModeActive then
19287: LD_EXP 63
19291: IFFALSE 19300
// DefineStreamItems ( true ) ;
19293: LD_INT 1
19295: PPUSH
19296: CALL 21062 0 1
// UpdateLuaVariables ( ) ;
19300: CALL 19317 0 0
// UpdateFactoryWaypoints ( ) ;
19304: CALL 33923 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19308: CALL 34180 0 0
// end ;
19312: LD_VAR 0 1
19316: RET
// function UpdateLuaVariables ( ) ; begin
19317: LD_INT 0
19319: PPUSH
// if globalGameSaveCounter then
19320: LD_EXP 62
19324: IFFALSE 19358
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19326: LD_ADDR_EXP 62
19330: PUSH
19331: LD_EXP 62
19335: PPUSH
19336: CALL 78137 0 1
19340: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19341: LD_STRING setGameSaveCounter(
19343: PUSH
19344: LD_EXP 62
19348: STR
19349: PUSH
19350: LD_STRING )
19352: STR
19353: PPUSH
19354: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19358: LD_STRING setGameDifficulty(
19360: PUSH
19361: LD_OWVAR 67
19365: STR
19366: PUSH
19367: LD_STRING )
19369: STR
19370: PPUSH
19371: CALL_OW 559
// end ;
19375: LD_VAR 0 1
19379: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19380: LD_INT 0
19382: PPUSH
// if p2 = stream_mode then
19383: LD_VAR 0 2
19387: PUSH
19388: LD_INT 100
19390: EQUAL
19391: IFFALSE 20394
// begin if not StreamModeActive then
19393: LD_EXP 63
19397: NOT
19398: IFFALSE 19408
// StreamModeActive := true ;
19400: LD_ADDR_EXP 63
19404: PUSH
19405: LD_INT 1
19407: ST_TO_ADDR
// if p3 = 0 then
19408: LD_VAR 0 3
19412: PUSH
19413: LD_INT 0
19415: EQUAL
19416: IFFALSE 19422
// InitStreamMode ;
19418: CALL 20598 0 0
// if p3 = 1 then
19422: LD_VAR 0 3
19426: PUSH
19427: LD_INT 1
19429: EQUAL
19430: IFFALSE 19440
// sRocket := true ;
19432: LD_ADDR_EXP 68
19436: PUSH
19437: LD_INT 1
19439: ST_TO_ADDR
// if p3 = 2 then
19440: LD_VAR 0 3
19444: PUSH
19445: LD_INT 2
19447: EQUAL
19448: IFFALSE 19458
// sSpeed := true ;
19450: LD_ADDR_EXP 67
19454: PUSH
19455: LD_INT 1
19457: ST_TO_ADDR
// if p3 = 3 then
19458: LD_VAR 0 3
19462: PUSH
19463: LD_INT 3
19465: EQUAL
19466: IFFALSE 19476
// sEngine := true ;
19468: LD_ADDR_EXP 69
19472: PUSH
19473: LD_INT 1
19475: ST_TO_ADDR
// if p3 = 4 then
19476: LD_VAR 0 3
19480: PUSH
19481: LD_INT 4
19483: EQUAL
19484: IFFALSE 19494
// sSpec := true ;
19486: LD_ADDR_EXP 66
19490: PUSH
19491: LD_INT 1
19493: ST_TO_ADDR
// if p3 = 5 then
19494: LD_VAR 0 3
19498: PUSH
19499: LD_INT 5
19501: EQUAL
19502: IFFALSE 19512
// sLevel := true ;
19504: LD_ADDR_EXP 70
19508: PUSH
19509: LD_INT 1
19511: ST_TO_ADDR
// if p3 = 6 then
19512: LD_VAR 0 3
19516: PUSH
19517: LD_INT 6
19519: EQUAL
19520: IFFALSE 19530
// sArmoury := true ;
19522: LD_ADDR_EXP 71
19526: PUSH
19527: LD_INT 1
19529: ST_TO_ADDR
// if p3 = 7 then
19530: LD_VAR 0 3
19534: PUSH
19535: LD_INT 7
19537: EQUAL
19538: IFFALSE 19548
// sRadar := true ;
19540: LD_ADDR_EXP 72
19544: PUSH
19545: LD_INT 1
19547: ST_TO_ADDR
// if p3 = 8 then
19548: LD_VAR 0 3
19552: PUSH
19553: LD_INT 8
19555: EQUAL
19556: IFFALSE 19566
// sBunker := true ;
19558: LD_ADDR_EXP 73
19562: PUSH
19563: LD_INT 1
19565: ST_TO_ADDR
// if p3 = 9 then
19566: LD_VAR 0 3
19570: PUSH
19571: LD_INT 9
19573: EQUAL
19574: IFFALSE 19584
// sHack := true ;
19576: LD_ADDR_EXP 74
19580: PUSH
19581: LD_INT 1
19583: ST_TO_ADDR
// if p3 = 10 then
19584: LD_VAR 0 3
19588: PUSH
19589: LD_INT 10
19591: EQUAL
19592: IFFALSE 19602
// sFire := true ;
19594: LD_ADDR_EXP 75
19598: PUSH
19599: LD_INT 1
19601: ST_TO_ADDR
// if p3 = 11 then
19602: LD_VAR 0 3
19606: PUSH
19607: LD_INT 11
19609: EQUAL
19610: IFFALSE 19620
// sRefresh := true ;
19612: LD_ADDR_EXP 76
19616: PUSH
19617: LD_INT 1
19619: ST_TO_ADDR
// if p3 = 12 then
19620: LD_VAR 0 3
19624: PUSH
19625: LD_INT 12
19627: EQUAL
19628: IFFALSE 19638
// sExp := true ;
19630: LD_ADDR_EXP 77
19634: PUSH
19635: LD_INT 1
19637: ST_TO_ADDR
// if p3 = 13 then
19638: LD_VAR 0 3
19642: PUSH
19643: LD_INT 13
19645: EQUAL
19646: IFFALSE 19656
// sDepot := true ;
19648: LD_ADDR_EXP 78
19652: PUSH
19653: LD_INT 1
19655: ST_TO_ADDR
// if p3 = 14 then
19656: LD_VAR 0 3
19660: PUSH
19661: LD_INT 14
19663: EQUAL
19664: IFFALSE 19674
// sFlag := true ;
19666: LD_ADDR_EXP 79
19670: PUSH
19671: LD_INT 1
19673: ST_TO_ADDR
// if p3 = 15 then
19674: LD_VAR 0 3
19678: PUSH
19679: LD_INT 15
19681: EQUAL
19682: IFFALSE 19692
// sKamikadze := true ;
19684: LD_ADDR_EXP 87
19688: PUSH
19689: LD_INT 1
19691: ST_TO_ADDR
// if p3 = 16 then
19692: LD_VAR 0 3
19696: PUSH
19697: LD_INT 16
19699: EQUAL
19700: IFFALSE 19710
// sTroll := true ;
19702: LD_ADDR_EXP 88
19706: PUSH
19707: LD_INT 1
19709: ST_TO_ADDR
// if p3 = 17 then
19710: LD_VAR 0 3
19714: PUSH
19715: LD_INT 17
19717: EQUAL
19718: IFFALSE 19728
// sSlow := true ;
19720: LD_ADDR_EXP 89
19724: PUSH
19725: LD_INT 1
19727: ST_TO_ADDR
// if p3 = 18 then
19728: LD_VAR 0 3
19732: PUSH
19733: LD_INT 18
19735: EQUAL
19736: IFFALSE 19746
// sLack := true ;
19738: LD_ADDR_EXP 90
19742: PUSH
19743: LD_INT 1
19745: ST_TO_ADDR
// if p3 = 19 then
19746: LD_VAR 0 3
19750: PUSH
19751: LD_INT 19
19753: EQUAL
19754: IFFALSE 19764
// sTank := true ;
19756: LD_ADDR_EXP 92
19760: PUSH
19761: LD_INT 1
19763: ST_TO_ADDR
// if p3 = 20 then
19764: LD_VAR 0 3
19768: PUSH
19769: LD_INT 20
19771: EQUAL
19772: IFFALSE 19782
// sRemote := true ;
19774: LD_ADDR_EXP 93
19778: PUSH
19779: LD_INT 1
19781: ST_TO_ADDR
// if p3 = 21 then
19782: LD_VAR 0 3
19786: PUSH
19787: LD_INT 21
19789: EQUAL
19790: IFFALSE 19800
// sPowell := true ;
19792: LD_ADDR_EXP 94
19796: PUSH
19797: LD_INT 1
19799: ST_TO_ADDR
// if p3 = 22 then
19800: LD_VAR 0 3
19804: PUSH
19805: LD_INT 22
19807: EQUAL
19808: IFFALSE 19818
// sTeleport := true ;
19810: LD_ADDR_EXP 97
19814: PUSH
19815: LD_INT 1
19817: ST_TO_ADDR
// if p3 = 23 then
19818: LD_VAR 0 3
19822: PUSH
19823: LD_INT 23
19825: EQUAL
19826: IFFALSE 19836
// sOilTower := true ;
19828: LD_ADDR_EXP 99
19832: PUSH
19833: LD_INT 1
19835: ST_TO_ADDR
// if p3 = 24 then
19836: LD_VAR 0 3
19840: PUSH
19841: LD_INT 24
19843: EQUAL
19844: IFFALSE 19854
// sShovel := true ;
19846: LD_ADDR_EXP 100
19850: PUSH
19851: LD_INT 1
19853: ST_TO_ADDR
// if p3 = 25 then
19854: LD_VAR 0 3
19858: PUSH
19859: LD_INT 25
19861: EQUAL
19862: IFFALSE 19872
// sSheik := true ;
19864: LD_ADDR_EXP 101
19868: PUSH
19869: LD_INT 1
19871: ST_TO_ADDR
// if p3 = 26 then
19872: LD_VAR 0 3
19876: PUSH
19877: LD_INT 26
19879: EQUAL
19880: IFFALSE 19890
// sEarthquake := true ;
19882: LD_ADDR_EXP 103
19886: PUSH
19887: LD_INT 1
19889: ST_TO_ADDR
// if p3 = 27 then
19890: LD_VAR 0 3
19894: PUSH
19895: LD_INT 27
19897: EQUAL
19898: IFFALSE 19908
// sAI := true ;
19900: LD_ADDR_EXP 104
19904: PUSH
19905: LD_INT 1
19907: ST_TO_ADDR
// if p3 = 28 then
19908: LD_VAR 0 3
19912: PUSH
19913: LD_INT 28
19915: EQUAL
19916: IFFALSE 19926
// sCargo := true ;
19918: LD_ADDR_EXP 107
19922: PUSH
19923: LD_INT 1
19925: ST_TO_ADDR
// if p3 = 29 then
19926: LD_VAR 0 3
19930: PUSH
19931: LD_INT 29
19933: EQUAL
19934: IFFALSE 19944
// sDLaser := true ;
19936: LD_ADDR_EXP 108
19940: PUSH
19941: LD_INT 1
19943: ST_TO_ADDR
// if p3 = 30 then
19944: LD_VAR 0 3
19948: PUSH
19949: LD_INT 30
19951: EQUAL
19952: IFFALSE 19962
// sExchange := true ;
19954: LD_ADDR_EXP 109
19958: PUSH
19959: LD_INT 1
19961: ST_TO_ADDR
// if p3 = 31 then
19962: LD_VAR 0 3
19966: PUSH
19967: LD_INT 31
19969: EQUAL
19970: IFFALSE 19980
// sFac := true ;
19972: LD_ADDR_EXP 110
19976: PUSH
19977: LD_INT 1
19979: ST_TO_ADDR
// if p3 = 32 then
19980: LD_VAR 0 3
19984: PUSH
19985: LD_INT 32
19987: EQUAL
19988: IFFALSE 19998
// sPower := true ;
19990: LD_ADDR_EXP 111
19994: PUSH
19995: LD_INT 1
19997: ST_TO_ADDR
// if p3 = 33 then
19998: LD_VAR 0 3
20002: PUSH
20003: LD_INT 33
20005: EQUAL
20006: IFFALSE 20016
// sRandom := true ;
20008: LD_ADDR_EXP 112
20012: PUSH
20013: LD_INT 1
20015: ST_TO_ADDR
// if p3 = 34 then
20016: LD_VAR 0 3
20020: PUSH
20021: LD_INT 34
20023: EQUAL
20024: IFFALSE 20034
// sShield := true ;
20026: LD_ADDR_EXP 113
20030: PUSH
20031: LD_INT 1
20033: ST_TO_ADDR
// if p3 = 35 then
20034: LD_VAR 0 3
20038: PUSH
20039: LD_INT 35
20041: EQUAL
20042: IFFALSE 20052
// sTime := true ;
20044: LD_ADDR_EXP 114
20048: PUSH
20049: LD_INT 1
20051: ST_TO_ADDR
// if p3 = 36 then
20052: LD_VAR 0 3
20056: PUSH
20057: LD_INT 36
20059: EQUAL
20060: IFFALSE 20070
// sTools := true ;
20062: LD_ADDR_EXP 115
20066: PUSH
20067: LD_INT 1
20069: ST_TO_ADDR
// if p3 = 101 then
20070: LD_VAR 0 3
20074: PUSH
20075: LD_INT 101
20077: EQUAL
20078: IFFALSE 20088
// sSold := true ;
20080: LD_ADDR_EXP 80
20084: PUSH
20085: LD_INT 1
20087: ST_TO_ADDR
// if p3 = 102 then
20088: LD_VAR 0 3
20092: PUSH
20093: LD_INT 102
20095: EQUAL
20096: IFFALSE 20106
// sDiff := true ;
20098: LD_ADDR_EXP 81
20102: PUSH
20103: LD_INT 1
20105: ST_TO_ADDR
// if p3 = 103 then
20106: LD_VAR 0 3
20110: PUSH
20111: LD_INT 103
20113: EQUAL
20114: IFFALSE 20124
// sFog := true ;
20116: LD_ADDR_EXP 84
20120: PUSH
20121: LD_INT 1
20123: ST_TO_ADDR
// if p3 = 104 then
20124: LD_VAR 0 3
20128: PUSH
20129: LD_INT 104
20131: EQUAL
20132: IFFALSE 20142
// sReset := true ;
20134: LD_ADDR_EXP 85
20138: PUSH
20139: LD_INT 1
20141: ST_TO_ADDR
// if p3 = 105 then
20142: LD_VAR 0 3
20146: PUSH
20147: LD_INT 105
20149: EQUAL
20150: IFFALSE 20160
// sSun := true ;
20152: LD_ADDR_EXP 86
20156: PUSH
20157: LD_INT 1
20159: ST_TO_ADDR
// if p3 = 106 then
20160: LD_VAR 0 3
20164: PUSH
20165: LD_INT 106
20167: EQUAL
20168: IFFALSE 20178
// sTiger := true ;
20170: LD_ADDR_EXP 82
20174: PUSH
20175: LD_INT 1
20177: ST_TO_ADDR
// if p3 = 107 then
20178: LD_VAR 0 3
20182: PUSH
20183: LD_INT 107
20185: EQUAL
20186: IFFALSE 20196
// sBomb := true ;
20188: LD_ADDR_EXP 83
20192: PUSH
20193: LD_INT 1
20195: ST_TO_ADDR
// if p3 = 108 then
20196: LD_VAR 0 3
20200: PUSH
20201: LD_INT 108
20203: EQUAL
20204: IFFALSE 20214
// sWound := true ;
20206: LD_ADDR_EXP 91
20210: PUSH
20211: LD_INT 1
20213: ST_TO_ADDR
// if p3 = 109 then
20214: LD_VAR 0 3
20218: PUSH
20219: LD_INT 109
20221: EQUAL
20222: IFFALSE 20232
// sBetray := true ;
20224: LD_ADDR_EXP 95
20228: PUSH
20229: LD_INT 1
20231: ST_TO_ADDR
// if p3 = 110 then
20232: LD_VAR 0 3
20236: PUSH
20237: LD_INT 110
20239: EQUAL
20240: IFFALSE 20250
// sContamin := true ;
20242: LD_ADDR_EXP 96
20246: PUSH
20247: LD_INT 1
20249: ST_TO_ADDR
// if p3 = 111 then
20250: LD_VAR 0 3
20254: PUSH
20255: LD_INT 111
20257: EQUAL
20258: IFFALSE 20268
// sOil := true ;
20260: LD_ADDR_EXP 98
20264: PUSH
20265: LD_INT 1
20267: ST_TO_ADDR
// if p3 = 112 then
20268: LD_VAR 0 3
20272: PUSH
20273: LD_INT 112
20275: EQUAL
20276: IFFALSE 20286
// sStu := true ;
20278: LD_ADDR_EXP 102
20282: PUSH
20283: LD_INT 1
20285: ST_TO_ADDR
// if p3 = 113 then
20286: LD_VAR 0 3
20290: PUSH
20291: LD_INT 113
20293: EQUAL
20294: IFFALSE 20304
// sBazooka := true ;
20296: LD_ADDR_EXP 105
20300: PUSH
20301: LD_INT 1
20303: ST_TO_ADDR
// if p3 = 114 then
20304: LD_VAR 0 3
20308: PUSH
20309: LD_INT 114
20311: EQUAL
20312: IFFALSE 20322
// sMortar := true ;
20314: LD_ADDR_EXP 106
20318: PUSH
20319: LD_INT 1
20321: ST_TO_ADDR
// if p3 = 115 then
20322: LD_VAR 0 3
20326: PUSH
20327: LD_INT 115
20329: EQUAL
20330: IFFALSE 20340
// sRanger := true ;
20332: LD_ADDR_EXP 116
20336: PUSH
20337: LD_INT 1
20339: ST_TO_ADDR
// if p3 = 116 then
20340: LD_VAR 0 3
20344: PUSH
20345: LD_INT 116
20347: EQUAL
20348: IFFALSE 20358
// sComputer := true ;
20350: LD_ADDR_EXP 117
20354: PUSH
20355: LD_INT 1
20357: ST_TO_ADDR
// if p3 = 117 then
20358: LD_VAR 0 3
20362: PUSH
20363: LD_INT 117
20365: EQUAL
20366: IFFALSE 20376
// s30 := true ;
20368: LD_ADDR_EXP 118
20372: PUSH
20373: LD_INT 1
20375: ST_TO_ADDR
// if p3 = 118 then
20376: LD_VAR 0 3
20380: PUSH
20381: LD_INT 118
20383: EQUAL
20384: IFFALSE 20394
// s60 := true ;
20386: LD_ADDR_EXP 119
20390: PUSH
20391: LD_INT 1
20393: ST_TO_ADDR
// end ; if p2 = hack_mode then
20394: LD_VAR 0 2
20398: PUSH
20399: LD_INT 101
20401: EQUAL
20402: IFFALSE 20530
// begin case p3 of 1 :
20404: LD_VAR 0 3
20408: PUSH
20409: LD_INT 1
20411: DOUBLE
20412: EQUAL
20413: IFTRUE 20417
20415: GO 20424
20417: POP
// hHackUnlimitedResources ; 2 :
20418: CALL 32669 0 0
20422: GO 20530
20424: LD_INT 2
20426: DOUBLE
20427: EQUAL
20428: IFTRUE 20432
20430: GO 20439
20432: POP
// hHackSetLevel10 ; 3 :
20433: CALL 32802 0 0
20437: GO 20530
20439: LD_INT 3
20441: DOUBLE
20442: EQUAL
20443: IFTRUE 20447
20445: GO 20454
20447: POP
// hHackSetLevel10YourUnits ; 4 :
20448: CALL 32887 0 0
20452: GO 20530
20454: LD_INT 4
20456: DOUBLE
20457: EQUAL
20458: IFTRUE 20462
20460: GO 20469
20462: POP
// hHackInvincible ; 5 :
20463: CALL 33335 0 0
20467: GO 20530
20469: LD_INT 5
20471: DOUBLE
20472: EQUAL
20473: IFTRUE 20477
20475: GO 20484
20477: POP
// hHackInvisible ; 6 :
20478: CALL 33446 0 0
20482: GO 20530
20484: LD_INT 6
20486: DOUBLE
20487: EQUAL
20488: IFTRUE 20492
20490: GO 20499
20492: POP
// hHackChangeYourSide ; 7 :
20493: CALL 33503 0 0
20497: GO 20530
20499: LD_INT 7
20501: DOUBLE
20502: EQUAL
20503: IFTRUE 20507
20505: GO 20514
20507: POP
// hHackChangeUnitSide ; 8 :
20508: CALL 33545 0 0
20512: GO 20530
20514: LD_INT 8
20516: DOUBLE
20517: EQUAL
20518: IFTRUE 20522
20520: GO 20529
20522: POP
// hHackFog ; end ;
20523: CALL 33646 0 0
20527: GO 20530
20529: POP
// end ; if p2 = game_save_mode then
20530: LD_VAR 0 2
20534: PUSH
20535: LD_INT 102
20537: EQUAL
20538: IFFALSE 20593
// begin if p3 = 1 then
20540: LD_VAR 0 3
20544: PUSH
20545: LD_INT 1
20547: EQUAL
20548: IFFALSE 20560
// globalGameSaveCounter := p4 ;
20550: LD_ADDR_EXP 62
20554: PUSH
20555: LD_VAR 0 4
20559: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20560: LD_VAR 0 3
20564: PUSH
20565: LD_INT 2
20567: EQUAL
20568: PUSH
20569: LD_EXP 62
20573: AND
20574: IFFALSE 20593
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20576: LD_STRING setGameSaveCounter(
20578: PUSH
20579: LD_EXP 62
20583: STR
20584: PUSH
20585: LD_STRING )
20587: STR
20588: PPUSH
20589: CALL_OW 559
// end ; end ;
20593: LD_VAR 0 7
20597: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20598: LD_INT 0
20600: PPUSH
// streamModeActive := false ;
20601: LD_ADDR_EXP 63
20605: PUSH
20606: LD_INT 0
20608: ST_TO_ADDR
// normalCounter := 36 ;
20609: LD_ADDR_EXP 64
20613: PUSH
20614: LD_INT 36
20616: ST_TO_ADDR
// hardcoreCounter := 18 ;
20617: LD_ADDR_EXP 65
20621: PUSH
20622: LD_INT 18
20624: ST_TO_ADDR
// sRocket := false ;
20625: LD_ADDR_EXP 68
20629: PUSH
20630: LD_INT 0
20632: ST_TO_ADDR
// sSpeed := false ;
20633: LD_ADDR_EXP 67
20637: PUSH
20638: LD_INT 0
20640: ST_TO_ADDR
// sEngine := false ;
20641: LD_ADDR_EXP 69
20645: PUSH
20646: LD_INT 0
20648: ST_TO_ADDR
// sSpec := false ;
20649: LD_ADDR_EXP 66
20653: PUSH
20654: LD_INT 0
20656: ST_TO_ADDR
// sLevel := false ;
20657: LD_ADDR_EXP 70
20661: PUSH
20662: LD_INT 0
20664: ST_TO_ADDR
// sArmoury := false ;
20665: LD_ADDR_EXP 71
20669: PUSH
20670: LD_INT 0
20672: ST_TO_ADDR
// sRadar := false ;
20673: LD_ADDR_EXP 72
20677: PUSH
20678: LD_INT 0
20680: ST_TO_ADDR
// sBunker := false ;
20681: LD_ADDR_EXP 73
20685: PUSH
20686: LD_INT 0
20688: ST_TO_ADDR
// sHack := false ;
20689: LD_ADDR_EXP 74
20693: PUSH
20694: LD_INT 0
20696: ST_TO_ADDR
// sFire := false ;
20697: LD_ADDR_EXP 75
20701: PUSH
20702: LD_INT 0
20704: ST_TO_ADDR
// sRefresh := false ;
20705: LD_ADDR_EXP 76
20709: PUSH
20710: LD_INT 0
20712: ST_TO_ADDR
// sExp := false ;
20713: LD_ADDR_EXP 77
20717: PUSH
20718: LD_INT 0
20720: ST_TO_ADDR
// sDepot := false ;
20721: LD_ADDR_EXP 78
20725: PUSH
20726: LD_INT 0
20728: ST_TO_ADDR
// sFlag := false ;
20729: LD_ADDR_EXP 79
20733: PUSH
20734: LD_INT 0
20736: ST_TO_ADDR
// sKamikadze := false ;
20737: LD_ADDR_EXP 87
20741: PUSH
20742: LD_INT 0
20744: ST_TO_ADDR
// sTroll := false ;
20745: LD_ADDR_EXP 88
20749: PUSH
20750: LD_INT 0
20752: ST_TO_ADDR
// sSlow := false ;
20753: LD_ADDR_EXP 89
20757: PUSH
20758: LD_INT 0
20760: ST_TO_ADDR
// sLack := false ;
20761: LD_ADDR_EXP 90
20765: PUSH
20766: LD_INT 0
20768: ST_TO_ADDR
// sTank := false ;
20769: LD_ADDR_EXP 92
20773: PUSH
20774: LD_INT 0
20776: ST_TO_ADDR
// sRemote := false ;
20777: LD_ADDR_EXP 93
20781: PUSH
20782: LD_INT 0
20784: ST_TO_ADDR
// sPowell := false ;
20785: LD_ADDR_EXP 94
20789: PUSH
20790: LD_INT 0
20792: ST_TO_ADDR
// sTeleport := false ;
20793: LD_ADDR_EXP 97
20797: PUSH
20798: LD_INT 0
20800: ST_TO_ADDR
// sOilTower := false ;
20801: LD_ADDR_EXP 99
20805: PUSH
20806: LD_INT 0
20808: ST_TO_ADDR
// sShovel := false ;
20809: LD_ADDR_EXP 100
20813: PUSH
20814: LD_INT 0
20816: ST_TO_ADDR
// sSheik := false ;
20817: LD_ADDR_EXP 101
20821: PUSH
20822: LD_INT 0
20824: ST_TO_ADDR
// sEarthquake := false ;
20825: LD_ADDR_EXP 103
20829: PUSH
20830: LD_INT 0
20832: ST_TO_ADDR
// sAI := false ;
20833: LD_ADDR_EXP 104
20837: PUSH
20838: LD_INT 0
20840: ST_TO_ADDR
// sCargo := false ;
20841: LD_ADDR_EXP 107
20845: PUSH
20846: LD_INT 0
20848: ST_TO_ADDR
// sDLaser := false ;
20849: LD_ADDR_EXP 108
20853: PUSH
20854: LD_INT 0
20856: ST_TO_ADDR
// sExchange := false ;
20857: LD_ADDR_EXP 109
20861: PUSH
20862: LD_INT 0
20864: ST_TO_ADDR
// sFac := false ;
20865: LD_ADDR_EXP 110
20869: PUSH
20870: LD_INT 0
20872: ST_TO_ADDR
// sPower := false ;
20873: LD_ADDR_EXP 111
20877: PUSH
20878: LD_INT 0
20880: ST_TO_ADDR
// sRandom := false ;
20881: LD_ADDR_EXP 112
20885: PUSH
20886: LD_INT 0
20888: ST_TO_ADDR
// sShield := false ;
20889: LD_ADDR_EXP 113
20893: PUSH
20894: LD_INT 0
20896: ST_TO_ADDR
// sTime := false ;
20897: LD_ADDR_EXP 114
20901: PUSH
20902: LD_INT 0
20904: ST_TO_ADDR
// sTools := false ;
20905: LD_ADDR_EXP 115
20909: PUSH
20910: LD_INT 0
20912: ST_TO_ADDR
// sSold := false ;
20913: LD_ADDR_EXP 80
20917: PUSH
20918: LD_INT 0
20920: ST_TO_ADDR
// sDiff := false ;
20921: LD_ADDR_EXP 81
20925: PUSH
20926: LD_INT 0
20928: ST_TO_ADDR
// sFog := false ;
20929: LD_ADDR_EXP 84
20933: PUSH
20934: LD_INT 0
20936: ST_TO_ADDR
// sReset := false ;
20937: LD_ADDR_EXP 85
20941: PUSH
20942: LD_INT 0
20944: ST_TO_ADDR
// sSun := false ;
20945: LD_ADDR_EXP 86
20949: PUSH
20950: LD_INT 0
20952: ST_TO_ADDR
// sTiger := false ;
20953: LD_ADDR_EXP 82
20957: PUSH
20958: LD_INT 0
20960: ST_TO_ADDR
// sBomb := false ;
20961: LD_ADDR_EXP 83
20965: PUSH
20966: LD_INT 0
20968: ST_TO_ADDR
// sWound := false ;
20969: LD_ADDR_EXP 91
20973: PUSH
20974: LD_INT 0
20976: ST_TO_ADDR
// sBetray := false ;
20977: LD_ADDR_EXP 95
20981: PUSH
20982: LD_INT 0
20984: ST_TO_ADDR
// sContamin := false ;
20985: LD_ADDR_EXP 96
20989: PUSH
20990: LD_INT 0
20992: ST_TO_ADDR
// sOil := false ;
20993: LD_ADDR_EXP 98
20997: PUSH
20998: LD_INT 0
21000: ST_TO_ADDR
// sStu := false ;
21001: LD_ADDR_EXP 102
21005: PUSH
21006: LD_INT 0
21008: ST_TO_ADDR
// sBazooka := false ;
21009: LD_ADDR_EXP 105
21013: PUSH
21014: LD_INT 0
21016: ST_TO_ADDR
// sMortar := false ;
21017: LD_ADDR_EXP 106
21021: PUSH
21022: LD_INT 0
21024: ST_TO_ADDR
// sRanger := false ;
21025: LD_ADDR_EXP 116
21029: PUSH
21030: LD_INT 0
21032: ST_TO_ADDR
// sComputer := false ;
21033: LD_ADDR_EXP 117
21037: PUSH
21038: LD_INT 0
21040: ST_TO_ADDR
// s30 := false ;
21041: LD_ADDR_EXP 118
21045: PUSH
21046: LD_INT 0
21048: ST_TO_ADDR
// s60 := false ;
21049: LD_ADDR_EXP 119
21053: PUSH
21054: LD_INT 0
21056: ST_TO_ADDR
// end ;
21057: LD_VAR 0 1
21061: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21062: LD_INT 0
21064: PPUSH
21065: PPUSH
21066: PPUSH
21067: PPUSH
21068: PPUSH
21069: PPUSH
21070: PPUSH
// result := [ ] ;
21071: LD_ADDR_VAR 0 2
21075: PUSH
21076: EMPTY
21077: ST_TO_ADDR
// if campaign_id = 1 then
21078: LD_OWVAR 69
21082: PUSH
21083: LD_INT 1
21085: EQUAL
21086: IFFALSE 24252
// begin case mission_number of 1 :
21088: LD_OWVAR 70
21092: PUSH
21093: LD_INT 1
21095: DOUBLE
21096: EQUAL
21097: IFTRUE 21101
21099: GO 21177
21101: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21102: LD_ADDR_VAR 0 2
21106: PUSH
21107: LD_INT 2
21109: PUSH
21110: LD_INT 4
21112: PUSH
21113: LD_INT 11
21115: PUSH
21116: LD_INT 12
21118: PUSH
21119: LD_INT 15
21121: PUSH
21122: LD_INT 16
21124: PUSH
21125: LD_INT 22
21127: PUSH
21128: LD_INT 23
21130: PUSH
21131: LD_INT 26
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 101
21147: PUSH
21148: LD_INT 102
21150: PUSH
21151: LD_INT 106
21153: PUSH
21154: LD_INT 116
21156: PUSH
21157: LD_INT 117
21159: PUSH
21160: LD_INT 118
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: ST_TO_ADDR
21175: GO 24250
21177: LD_INT 2
21179: DOUBLE
21180: EQUAL
21181: IFTRUE 21185
21183: GO 21269
21185: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21186: LD_ADDR_VAR 0 2
21190: PUSH
21191: LD_INT 2
21193: PUSH
21194: LD_INT 4
21196: PUSH
21197: LD_INT 11
21199: PUSH
21200: LD_INT 12
21202: PUSH
21203: LD_INT 15
21205: PUSH
21206: LD_INT 16
21208: PUSH
21209: LD_INT 22
21211: PUSH
21212: LD_INT 23
21214: PUSH
21215: LD_INT 26
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 101
21231: PUSH
21232: LD_INT 102
21234: PUSH
21235: LD_INT 105
21237: PUSH
21238: LD_INT 106
21240: PUSH
21241: LD_INT 108
21243: PUSH
21244: LD_INT 116
21246: PUSH
21247: LD_INT 117
21249: PUSH
21250: LD_INT 118
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: ST_TO_ADDR
21267: GO 24250
21269: LD_INT 3
21271: DOUBLE
21272: EQUAL
21273: IFTRUE 21277
21275: GO 21365
21277: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21278: LD_ADDR_VAR 0 2
21282: PUSH
21283: LD_INT 2
21285: PUSH
21286: LD_INT 4
21288: PUSH
21289: LD_INT 5
21291: PUSH
21292: LD_INT 11
21294: PUSH
21295: LD_INT 12
21297: PUSH
21298: LD_INT 15
21300: PUSH
21301: LD_INT 16
21303: PUSH
21304: LD_INT 22
21306: PUSH
21307: LD_INT 26
21309: PUSH
21310: LD_INT 36
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 101
21327: PUSH
21328: LD_INT 102
21330: PUSH
21331: LD_INT 105
21333: PUSH
21334: LD_INT 106
21336: PUSH
21337: LD_INT 108
21339: PUSH
21340: LD_INT 116
21342: PUSH
21343: LD_INT 117
21345: PUSH
21346: LD_INT 118
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: ST_TO_ADDR
21363: GO 24250
21365: LD_INT 4
21367: DOUBLE
21368: EQUAL
21369: IFTRUE 21373
21371: GO 21469
21373: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21374: LD_ADDR_VAR 0 2
21378: PUSH
21379: LD_INT 2
21381: PUSH
21382: LD_INT 4
21384: PUSH
21385: LD_INT 5
21387: PUSH
21388: LD_INT 8
21390: PUSH
21391: LD_INT 11
21393: PUSH
21394: LD_INT 12
21396: PUSH
21397: LD_INT 15
21399: PUSH
21400: LD_INT 16
21402: PUSH
21403: LD_INT 22
21405: PUSH
21406: LD_INT 23
21408: PUSH
21409: LD_INT 26
21411: PUSH
21412: LD_INT 36
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 101
21431: PUSH
21432: LD_INT 102
21434: PUSH
21435: LD_INT 105
21437: PUSH
21438: LD_INT 106
21440: PUSH
21441: LD_INT 108
21443: PUSH
21444: LD_INT 116
21446: PUSH
21447: LD_INT 117
21449: PUSH
21450: LD_INT 118
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: ST_TO_ADDR
21467: GO 24250
21469: LD_INT 5
21471: DOUBLE
21472: EQUAL
21473: IFTRUE 21477
21475: GO 21589
21477: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21478: LD_ADDR_VAR 0 2
21482: PUSH
21483: LD_INT 2
21485: PUSH
21486: LD_INT 4
21488: PUSH
21489: LD_INT 5
21491: PUSH
21492: LD_INT 6
21494: PUSH
21495: LD_INT 8
21497: PUSH
21498: LD_INT 11
21500: PUSH
21501: LD_INT 12
21503: PUSH
21504: LD_INT 15
21506: PUSH
21507: LD_INT 16
21509: PUSH
21510: LD_INT 22
21512: PUSH
21513: LD_INT 23
21515: PUSH
21516: LD_INT 25
21518: PUSH
21519: LD_INT 26
21521: PUSH
21522: LD_INT 36
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 101
21543: PUSH
21544: LD_INT 102
21546: PUSH
21547: LD_INT 105
21549: PUSH
21550: LD_INT 106
21552: PUSH
21553: LD_INT 108
21555: PUSH
21556: LD_INT 109
21558: PUSH
21559: LD_INT 112
21561: PUSH
21562: LD_INT 116
21564: PUSH
21565: LD_INT 117
21567: PUSH
21568: LD_INT 118
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: ST_TO_ADDR
21587: GO 24250
21589: LD_INT 6
21591: DOUBLE
21592: EQUAL
21593: IFTRUE 21597
21595: GO 21729
21597: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21598: LD_ADDR_VAR 0 2
21602: PUSH
21603: LD_INT 2
21605: PUSH
21606: LD_INT 4
21608: PUSH
21609: LD_INT 5
21611: PUSH
21612: LD_INT 6
21614: PUSH
21615: LD_INT 8
21617: PUSH
21618: LD_INT 11
21620: PUSH
21621: LD_INT 12
21623: PUSH
21624: LD_INT 15
21626: PUSH
21627: LD_INT 16
21629: PUSH
21630: LD_INT 20
21632: PUSH
21633: LD_INT 21
21635: PUSH
21636: LD_INT 22
21638: PUSH
21639: LD_INT 23
21641: PUSH
21642: LD_INT 25
21644: PUSH
21645: LD_INT 26
21647: PUSH
21648: LD_INT 30
21650: PUSH
21651: LD_INT 31
21653: PUSH
21654: LD_INT 32
21656: PUSH
21657: LD_INT 36
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 101
21683: PUSH
21684: LD_INT 102
21686: PUSH
21687: LD_INT 105
21689: PUSH
21690: LD_INT 106
21692: PUSH
21693: LD_INT 108
21695: PUSH
21696: LD_INT 109
21698: PUSH
21699: LD_INT 112
21701: PUSH
21702: LD_INT 116
21704: PUSH
21705: LD_INT 117
21707: PUSH
21708: LD_INT 118
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: ST_TO_ADDR
21727: GO 24250
21729: LD_INT 7
21731: DOUBLE
21732: EQUAL
21733: IFTRUE 21737
21735: GO 21849
21737: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21738: LD_ADDR_VAR 0 2
21742: PUSH
21743: LD_INT 2
21745: PUSH
21746: LD_INT 4
21748: PUSH
21749: LD_INT 5
21751: PUSH
21752: LD_INT 7
21754: PUSH
21755: LD_INT 11
21757: PUSH
21758: LD_INT 12
21760: PUSH
21761: LD_INT 15
21763: PUSH
21764: LD_INT 16
21766: PUSH
21767: LD_INT 20
21769: PUSH
21770: LD_INT 21
21772: PUSH
21773: LD_INT 22
21775: PUSH
21776: LD_INT 23
21778: PUSH
21779: LD_INT 25
21781: PUSH
21782: LD_INT 26
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 101
21803: PUSH
21804: LD_INT 102
21806: PUSH
21807: LD_INT 103
21809: PUSH
21810: LD_INT 105
21812: PUSH
21813: LD_INT 106
21815: PUSH
21816: LD_INT 108
21818: PUSH
21819: LD_INT 112
21821: PUSH
21822: LD_INT 116
21824: PUSH
21825: LD_INT 117
21827: PUSH
21828: LD_INT 118
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: ST_TO_ADDR
21847: GO 24250
21849: LD_INT 8
21851: DOUBLE
21852: EQUAL
21853: IFTRUE 21857
21855: GO 21997
21857: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21858: LD_ADDR_VAR 0 2
21862: PUSH
21863: LD_INT 2
21865: PUSH
21866: LD_INT 4
21868: PUSH
21869: LD_INT 5
21871: PUSH
21872: LD_INT 6
21874: PUSH
21875: LD_INT 7
21877: PUSH
21878: LD_INT 8
21880: PUSH
21881: LD_INT 11
21883: PUSH
21884: LD_INT 12
21886: PUSH
21887: LD_INT 15
21889: PUSH
21890: LD_INT 16
21892: PUSH
21893: LD_INT 20
21895: PUSH
21896: LD_INT 21
21898: PUSH
21899: LD_INT 22
21901: PUSH
21902: LD_INT 23
21904: PUSH
21905: LD_INT 25
21907: PUSH
21908: LD_INT 26
21910: PUSH
21911: LD_INT 30
21913: PUSH
21914: LD_INT 31
21916: PUSH
21917: LD_INT 32
21919: PUSH
21920: LD_INT 36
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 101
21947: PUSH
21948: LD_INT 102
21950: PUSH
21951: LD_INT 103
21953: PUSH
21954: LD_INT 105
21956: PUSH
21957: LD_INT 106
21959: PUSH
21960: LD_INT 108
21962: PUSH
21963: LD_INT 109
21965: PUSH
21966: LD_INT 112
21968: PUSH
21969: LD_INT 116
21971: PUSH
21972: LD_INT 117
21974: PUSH
21975: LD_INT 118
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: ST_TO_ADDR
21995: GO 24250
21997: LD_INT 9
21999: DOUBLE
22000: EQUAL
22001: IFTRUE 22005
22003: GO 22153
22005: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22006: LD_ADDR_VAR 0 2
22010: PUSH
22011: LD_INT 2
22013: PUSH
22014: LD_INT 4
22016: PUSH
22017: LD_INT 5
22019: PUSH
22020: LD_INT 6
22022: PUSH
22023: LD_INT 7
22025: PUSH
22026: LD_INT 8
22028: PUSH
22029: LD_INT 11
22031: PUSH
22032: LD_INT 12
22034: PUSH
22035: LD_INT 15
22037: PUSH
22038: LD_INT 16
22040: PUSH
22041: LD_INT 20
22043: PUSH
22044: LD_INT 21
22046: PUSH
22047: LD_INT 22
22049: PUSH
22050: LD_INT 23
22052: PUSH
22053: LD_INT 25
22055: PUSH
22056: LD_INT 26
22058: PUSH
22059: LD_INT 28
22061: PUSH
22062: LD_INT 30
22064: PUSH
22065: LD_INT 31
22067: PUSH
22068: LD_INT 32
22070: PUSH
22071: LD_INT 36
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 101
22099: PUSH
22100: LD_INT 102
22102: PUSH
22103: LD_INT 103
22105: PUSH
22106: LD_INT 105
22108: PUSH
22109: LD_INT 106
22111: PUSH
22112: LD_INT 108
22114: PUSH
22115: LD_INT 109
22117: PUSH
22118: LD_INT 112
22120: PUSH
22121: LD_INT 114
22123: PUSH
22124: LD_INT 116
22126: PUSH
22127: LD_INT 117
22129: PUSH
22130: LD_INT 118
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: ST_TO_ADDR
22151: GO 24250
22153: LD_INT 10
22155: DOUBLE
22156: EQUAL
22157: IFTRUE 22161
22159: GO 22357
22161: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22162: LD_ADDR_VAR 0 2
22166: PUSH
22167: LD_INT 2
22169: PUSH
22170: LD_INT 4
22172: PUSH
22173: LD_INT 5
22175: PUSH
22176: LD_INT 6
22178: PUSH
22179: LD_INT 7
22181: PUSH
22182: LD_INT 8
22184: PUSH
22185: LD_INT 9
22187: PUSH
22188: LD_INT 10
22190: PUSH
22191: LD_INT 11
22193: PUSH
22194: LD_INT 12
22196: PUSH
22197: LD_INT 13
22199: PUSH
22200: LD_INT 14
22202: PUSH
22203: LD_INT 15
22205: PUSH
22206: LD_INT 16
22208: PUSH
22209: LD_INT 17
22211: PUSH
22212: LD_INT 18
22214: PUSH
22215: LD_INT 19
22217: PUSH
22218: LD_INT 20
22220: PUSH
22221: LD_INT 21
22223: PUSH
22224: LD_INT 22
22226: PUSH
22227: LD_INT 23
22229: PUSH
22230: LD_INT 24
22232: PUSH
22233: LD_INT 25
22235: PUSH
22236: LD_INT 26
22238: PUSH
22239: LD_INT 28
22241: PUSH
22242: LD_INT 30
22244: PUSH
22245: LD_INT 31
22247: PUSH
22248: LD_INT 32
22250: PUSH
22251: LD_INT 36
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 101
22287: PUSH
22288: LD_INT 102
22290: PUSH
22291: LD_INT 103
22293: PUSH
22294: LD_INT 104
22296: PUSH
22297: LD_INT 105
22299: PUSH
22300: LD_INT 106
22302: PUSH
22303: LD_INT 107
22305: PUSH
22306: LD_INT 108
22308: PUSH
22309: LD_INT 109
22311: PUSH
22312: LD_INT 110
22314: PUSH
22315: LD_INT 111
22317: PUSH
22318: LD_INT 112
22320: PUSH
22321: LD_INT 114
22323: PUSH
22324: LD_INT 116
22326: PUSH
22327: LD_INT 117
22329: PUSH
22330: LD_INT 118
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: ST_TO_ADDR
22355: GO 24250
22357: LD_INT 11
22359: DOUBLE
22360: EQUAL
22361: IFTRUE 22365
22363: GO 22569
22365: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22366: LD_ADDR_VAR 0 2
22370: PUSH
22371: LD_INT 2
22373: PUSH
22374: LD_INT 3
22376: PUSH
22377: LD_INT 4
22379: PUSH
22380: LD_INT 5
22382: PUSH
22383: LD_INT 6
22385: PUSH
22386: LD_INT 7
22388: PUSH
22389: LD_INT 8
22391: PUSH
22392: LD_INT 9
22394: PUSH
22395: LD_INT 10
22397: PUSH
22398: LD_INT 11
22400: PUSH
22401: LD_INT 12
22403: PUSH
22404: LD_INT 13
22406: PUSH
22407: LD_INT 14
22409: PUSH
22410: LD_INT 15
22412: PUSH
22413: LD_INT 16
22415: PUSH
22416: LD_INT 17
22418: PUSH
22419: LD_INT 18
22421: PUSH
22422: LD_INT 19
22424: PUSH
22425: LD_INT 20
22427: PUSH
22428: LD_INT 21
22430: PUSH
22431: LD_INT 22
22433: PUSH
22434: LD_INT 23
22436: PUSH
22437: LD_INT 24
22439: PUSH
22440: LD_INT 25
22442: PUSH
22443: LD_INT 26
22445: PUSH
22446: LD_INT 28
22448: PUSH
22449: LD_INT 30
22451: PUSH
22452: LD_INT 31
22454: PUSH
22455: LD_INT 32
22457: PUSH
22458: LD_INT 34
22460: PUSH
22461: LD_INT 36
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 101
22499: PUSH
22500: LD_INT 102
22502: PUSH
22503: LD_INT 103
22505: PUSH
22506: LD_INT 104
22508: PUSH
22509: LD_INT 105
22511: PUSH
22512: LD_INT 106
22514: PUSH
22515: LD_INT 107
22517: PUSH
22518: LD_INT 108
22520: PUSH
22521: LD_INT 109
22523: PUSH
22524: LD_INT 110
22526: PUSH
22527: LD_INT 111
22529: PUSH
22530: LD_INT 112
22532: PUSH
22533: LD_INT 114
22535: PUSH
22536: LD_INT 116
22538: PUSH
22539: LD_INT 117
22541: PUSH
22542: LD_INT 118
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: ST_TO_ADDR
22567: GO 24250
22569: LD_INT 12
22571: DOUBLE
22572: EQUAL
22573: IFTRUE 22577
22575: GO 22797
22577: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22578: LD_ADDR_VAR 0 2
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: LD_INT 2
22588: PUSH
22589: LD_INT 3
22591: PUSH
22592: LD_INT 4
22594: PUSH
22595: LD_INT 5
22597: PUSH
22598: LD_INT 6
22600: PUSH
22601: LD_INT 7
22603: PUSH
22604: LD_INT 8
22606: PUSH
22607: LD_INT 9
22609: PUSH
22610: LD_INT 10
22612: PUSH
22613: LD_INT 11
22615: PUSH
22616: LD_INT 12
22618: PUSH
22619: LD_INT 13
22621: PUSH
22622: LD_INT 14
22624: PUSH
22625: LD_INT 15
22627: PUSH
22628: LD_INT 16
22630: PUSH
22631: LD_INT 17
22633: PUSH
22634: LD_INT 18
22636: PUSH
22637: LD_INT 19
22639: PUSH
22640: LD_INT 20
22642: PUSH
22643: LD_INT 21
22645: PUSH
22646: LD_INT 22
22648: PUSH
22649: LD_INT 23
22651: PUSH
22652: LD_INT 24
22654: PUSH
22655: LD_INT 25
22657: PUSH
22658: LD_INT 26
22660: PUSH
22661: LD_INT 27
22663: PUSH
22664: LD_INT 28
22666: PUSH
22667: LD_INT 30
22669: PUSH
22670: LD_INT 31
22672: PUSH
22673: LD_INT 32
22675: PUSH
22676: LD_INT 33
22678: PUSH
22679: LD_INT 34
22681: PUSH
22682: LD_INT 36
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 101
22723: PUSH
22724: LD_INT 102
22726: PUSH
22727: LD_INT 103
22729: PUSH
22730: LD_INT 104
22732: PUSH
22733: LD_INT 105
22735: PUSH
22736: LD_INT 106
22738: PUSH
22739: LD_INT 107
22741: PUSH
22742: LD_INT 108
22744: PUSH
22745: LD_INT 109
22747: PUSH
22748: LD_INT 110
22750: PUSH
22751: LD_INT 111
22753: PUSH
22754: LD_INT 112
22756: PUSH
22757: LD_INT 113
22759: PUSH
22760: LD_INT 114
22762: PUSH
22763: LD_INT 116
22765: PUSH
22766: LD_INT 117
22768: PUSH
22769: LD_INT 118
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: ST_TO_ADDR
22795: GO 24250
22797: LD_INT 13
22799: DOUBLE
22800: EQUAL
22801: IFTRUE 22805
22803: GO 23013
22805: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22806: LD_ADDR_VAR 0 2
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: LD_INT 2
22816: PUSH
22817: LD_INT 3
22819: PUSH
22820: LD_INT 4
22822: PUSH
22823: LD_INT 5
22825: PUSH
22826: LD_INT 8
22828: PUSH
22829: LD_INT 9
22831: PUSH
22832: LD_INT 10
22834: PUSH
22835: LD_INT 11
22837: PUSH
22838: LD_INT 12
22840: PUSH
22841: LD_INT 14
22843: PUSH
22844: LD_INT 15
22846: PUSH
22847: LD_INT 16
22849: PUSH
22850: LD_INT 17
22852: PUSH
22853: LD_INT 18
22855: PUSH
22856: LD_INT 19
22858: PUSH
22859: LD_INT 20
22861: PUSH
22862: LD_INT 21
22864: PUSH
22865: LD_INT 22
22867: PUSH
22868: LD_INT 23
22870: PUSH
22871: LD_INT 24
22873: PUSH
22874: LD_INT 25
22876: PUSH
22877: LD_INT 26
22879: PUSH
22880: LD_INT 27
22882: PUSH
22883: LD_INT 28
22885: PUSH
22886: LD_INT 30
22888: PUSH
22889: LD_INT 31
22891: PUSH
22892: LD_INT 32
22894: PUSH
22895: LD_INT 33
22897: PUSH
22898: LD_INT 34
22900: PUSH
22901: LD_INT 36
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 101
22939: PUSH
22940: LD_INT 102
22942: PUSH
22943: LD_INT 103
22945: PUSH
22946: LD_INT 104
22948: PUSH
22949: LD_INT 105
22951: PUSH
22952: LD_INT 106
22954: PUSH
22955: LD_INT 107
22957: PUSH
22958: LD_INT 108
22960: PUSH
22961: LD_INT 109
22963: PUSH
22964: LD_INT 110
22966: PUSH
22967: LD_INT 111
22969: PUSH
22970: LD_INT 112
22972: PUSH
22973: LD_INT 113
22975: PUSH
22976: LD_INT 114
22978: PUSH
22979: LD_INT 116
22981: PUSH
22982: LD_INT 117
22984: PUSH
22985: LD_INT 118
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: ST_TO_ADDR
23011: GO 24250
23013: LD_INT 14
23015: DOUBLE
23016: EQUAL
23017: IFTRUE 23021
23019: GO 23245
23021: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23022: LD_ADDR_VAR 0 2
23026: PUSH
23027: LD_INT 1
23029: PUSH
23030: LD_INT 2
23032: PUSH
23033: LD_INT 3
23035: PUSH
23036: LD_INT 4
23038: PUSH
23039: LD_INT 5
23041: PUSH
23042: LD_INT 6
23044: PUSH
23045: LD_INT 7
23047: PUSH
23048: LD_INT 8
23050: PUSH
23051: LD_INT 9
23053: PUSH
23054: LD_INT 10
23056: PUSH
23057: LD_INT 11
23059: PUSH
23060: LD_INT 12
23062: PUSH
23063: LD_INT 13
23065: PUSH
23066: LD_INT 14
23068: PUSH
23069: LD_INT 15
23071: PUSH
23072: LD_INT 16
23074: PUSH
23075: LD_INT 17
23077: PUSH
23078: LD_INT 18
23080: PUSH
23081: LD_INT 19
23083: PUSH
23084: LD_INT 20
23086: PUSH
23087: LD_INT 21
23089: PUSH
23090: LD_INT 22
23092: PUSH
23093: LD_INT 23
23095: PUSH
23096: LD_INT 24
23098: PUSH
23099: LD_INT 25
23101: PUSH
23102: LD_INT 26
23104: PUSH
23105: LD_INT 27
23107: PUSH
23108: LD_INT 28
23110: PUSH
23111: LD_INT 29
23113: PUSH
23114: LD_INT 30
23116: PUSH
23117: LD_INT 31
23119: PUSH
23120: LD_INT 32
23122: PUSH
23123: LD_INT 33
23125: PUSH
23126: LD_INT 34
23128: PUSH
23129: LD_INT 36
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 101
23171: PUSH
23172: LD_INT 102
23174: PUSH
23175: LD_INT 103
23177: PUSH
23178: LD_INT 104
23180: PUSH
23181: LD_INT 105
23183: PUSH
23184: LD_INT 106
23186: PUSH
23187: LD_INT 107
23189: PUSH
23190: LD_INT 108
23192: PUSH
23193: LD_INT 109
23195: PUSH
23196: LD_INT 110
23198: PUSH
23199: LD_INT 111
23201: PUSH
23202: LD_INT 112
23204: PUSH
23205: LD_INT 113
23207: PUSH
23208: LD_INT 114
23210: PUSH
23211: LD_INT 116
23213: PUSH
23214: LD_INT 117
23216: PUSH
23217: LD_INT 118
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: ST_TO_ADDR
23243: GO 24250
23245: LD_INT 15
23247: DOUBLE
23248: EQUAL
23249: IFTRUE 23253
23251: GO 23477
23253: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23254: LD_ADDR_VAR 0 2
23258: PUSH
23259: LD_INT 1
23261: PUSH
23262: LD_INT 2
23264: PUSH
23265: LD_INT 3
23267: PUSH
23268: LD_INT 4
23270: PUSH
23271: LD_INT 5
23273: PUSH
23274: LD_INT 6
23276: PUSH
23277: LD_INT 7
23279: PUSH
23280: LD_INT 8
23282: PUSH
23283: LD_INT 9
23285: PUSH
23286: LD_INT 10
23288: PUSH
23289: LD_INT 11
23291: PUSH
23292: LD_INT 12
23294: PUSH
23295: LD_INT 13
23297: PUSH
23298: LD_INT 14
23300: PUSH
23301: LD_INT 15
23303: PUSH
23304: LD_INT 16
23306: PUSH
23307: LD_INT 17
23309: PUSH
23310: LD_INT 18
23312: PUSH
23313: LD_INT 19
23315: PUSH
23316: LD_INT 20
23318: PUSH
23319: LD_INT 21
23321: PUSH
23322: LD_INT 22
23324: PUSH
23325: LD_INT 23
23327: PUSH
23328: LD_INT 24
23330: PUSH
23331: LD_INT 25
23333: PUSH
23334: LD_INT 26
23336: PUSH
23337: LD_INT 27
23339: PUSH
23340: LD_INT 28
23342: PUSH
23343: LD_INT 29
23345: PUSH
23346: LD_INT 30
23348: PUSH
23349: LD_INT 31
23351: PUSH
23352: LD_INT 32
23354: PUSH
23355: LD_INT 33
23357: PUSH
23358: LD_INT 34
23360: PUSH
23361: LD_INT 36
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 101
23403: PUSH
23404: LD_INT 102
23406: PUSH
23407: LD_INT 103
23409: PUSH
23410: LD_INT 104
23412: PUSH
23413: LD_INT 105
23415: PUSH
23416: LD_INT 106
23418: PUSH
23419: LD_INT 107
23421: PUSH
23422: LD_INT 108
23424: PUSH
23425: LD_INT 109
23427: PUSH
23428: LD_INT 110
23430: PUSH
23431: LD_INT 111
23433: PUSH
23434: LD_INT 112
23436: PUSH
23437: LD_INT 113
23439: PUSH
23440: LD_INT 114
23442: PUSH
23443: LD_INT 116
23445: PUSH
23446: LD_INT 117
23448: PUSH
23449: LD_INT 118
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: ST_TO_ADDR
23475: GO 24250
23477: LD_INT 16
23479: DOUBLE
23480: EQUAL
23481: IFTRUE 23485
23483: GO 23621
23485: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23486: LD_ADDR_VAR 0 2
23490: PUSH
23491: LD_INT 2
23493: PUSH
23494: LD_INT 4
23496: PUSH
23497: LD_INT 5
23499: PUSH
23500: LD_INT 7
23502: PUSH
23503: LD_INT 11
23505: PUSH
23506: LD_INT 12
23508: PUSH
23509: LD_INT 15
23511: PUSH
23512: LD_INT 16
23514: PUSH
23515: LD_INT 20
23517: PUSH
23518: LD_INT 21
23520: PUSH
23521: LD_INT 22
23523: PUSH
23524: LD_INT 23
23526: PUSH
23527: LD_INT 25
23529: PUSH
23530: LD_INT 26
23532: PUSH
23533: LD_INT 30
23535: PUSH
23536: LD_INT 31
23538: PUSH
23539: LD_INT 32
23541: PUSH
23542: LD_INT 33
23544: PUSH
23545: LD_INT 34
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 101
23571: PUSH
23572: LD_INT 102
23574: PUSH
23575: LD_INT 103
23577: PUSH
23578: LD_INT 106
23580: PUSH
23581: LD_INT 108
23583: PUSH
23584: LD_INT 112
23586: PUSH
23587: LD_INT 113
23589: PUSH
23590: LD_INT 114
23592: PUSH
23593: LD_INT 116
23595: PUSH
23596: LD_INT 117
23598: PUSH
23599: LD_INT 118
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: ST_TO_ADDR
23619: GO 24250
23621: LD_INT 17
23623: DOUBLE
23624: EQUAL
23625: IFTRUE 23629
23627: GO 23853
23629: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23630: LD_ADDR_VAR 0 2
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: LD_INT 2
23640: PUSH
23641: LD_INT 3
23643: PUSH
23644: LD_INT 4
23646: PUSH
23647: LD_INT 5
23649: PUSH
23650: LD_INT 6
23652: PUSH
23653: LD_INT 7
23655: PUSH
23656: LD_INT 8
23658: PUSH
23659: LD_INT 9
23661: PUSH
23662: LD_INT 10
23664: PUSH
23665: LD_INT 11
23667: PUSH
23668: LD_INT 12
23670: PUSH
23671: LD_INT 13
23673: PUSH
23674: LD_INT 14
23676: PUSH
23677: LD_INT 15
23679: PUSH
23680: LD_INT 16
23682: PUSH
23683: LD_INT 17
23685: PUSH
23686: LD_INT 18
23688: PUSH
23689: LD_INT 19
23691: PUSH
23692: LD_INT 20
23694: PUSH
23695: LD_INT 21
23697: PUSH
23698: LD_INT 22
23700: PUSH
23701: LD_INT 23
23703: PUSH
23704: LD_INT 24
23706: PUSH
23707: LD_INT 25
23709: PUSH
23710: LD_INT 26
23712: PUSH
23713: LD_INT 27
23715: PUSH
23716: LD_INT 28
23718: PUSH
23719: LD_INT 29
23721: PUSH
23722: LD_INT 30
23724: PUSH
23725: LD_INT 31
23727: PUSH
23728: LD_INT 32
23730: PUSH
23731: LD_INT 33
23733: PUSH
23734: LD_INT 34
23736: PUSH
23737: LD_INT 36
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 101
23779: PUSH
23780: LD_INT 102
23782: PUSH
23783: LD_INT 103
23785: PUSH
23786: LD_INT 104
23788: PUSH
23789: LD_INT 105
23791: PUSH
23792: LD_INT 106
23794: PUSH
23795: LD_INT 107
23797: PUSH
23798: LD_INT 108
23800: PUSH
23801: LD_INT 109
23803: PUSH
23804: LD_INT 110
23806: PUSH
23807: LD_INT 111
23809: PUSH
23810: LD_INT 112
23812: PUSH
23813: LD_INT 113
23815: PUSH
23816: LD_INT 114
23818: PUSH
23819: LD_INT 116
23821: PUSH
23822: LD_INT 117
23824: PUSH
23825: LD_INT 118
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: ST_TO_ADDR
23851: GO 24250
23853: LD_INT 18
23855: DOUBLE
23856: EQUAL
23857: IFTRUE 23861
23859: GO 24009
23861: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23862: LD_ADDR_VAR 0 2
23866: PUSH
23867: LD_INT 2
23869: PUSH
23870: LD_INT 4
23872: PUSH
23873: LD_INT 5
23875: PUSH
23876: LD_INT 7
23878: PUSH
23879: LD_INT 11
23881: PUSH
23882: LD_INT 12
23884: PUSH
23885: LD_INT 15
23887: PUSH
23888: LD_INT 16
23890: PUSH
23891: LD_INT 20
23893: PUSH
23894: LD_INT 21
23896: PUSH
23897: LD_INT 22
23899: PUSH
23900: LD_INT 23
23902: PUSH
23903: LD_INT 25
23905: PUSH
23906: LD_INT 26
23908: PUSH
23909: LD_INT 30
23911: PUSH
23912: LD_INT 31
23914: PUSH
23915: LD_INT 32
23917: PUSH
23918: LD_INT 33
23920: PUSH
23921: LD_INT 34
23923: PUSH
23924: LD_INT 35
23926: PUSH
23927: LD_INT 36
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 101
23955: PUSH
23956: LD_INT 102
23958: PUSH
23959: LD_INT 103
23961: PUSH
23962: LD_INT 106
23964: PUSH
23965: LD_INT 108
23967: PUSH
23968: LD_INT 112
23970: PUSH
23971: LD_INT 113
23973: PUSH
23974: LD_INT 114
23976: PUSH
23977: LD_INT 115
23979: PUSH
23980: LD_INT 116
23982: PUSH
23983: LD_INT 117
23985: PUSH
23986: LD_INT 118
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: ST_TO_ADDR
24007: GO 24250
24009: LD_INT 19
24011: DOUBLE
24012: EQUAL
24013: IFTRUE 24017
24015: GO 24249
24017: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24018: LD_ADDR_VAR 0 2
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: LD_INT 2
24028: PUSH
24029: LD_INT 3
24031: PUSH
24032: LD_INT 4
24034: PUSH
24035: LD_INT 5
24037: PUSH
24038: LD_INT 6
24040: PUSH
24041: LD_INT 7
24043: PUSH
24044: LD_INT 8
24046: PUSH
24047: LD_INT 9
24049: PUSH
24050: LD_INT 10
24052: PUSH
24053: LD_INT 11
24055: PUSH
24056: LD_INT 12
24058: PUSH
24059: LD_INT 13
24061: PUSH
24062: LD_INT 14
24064: PUSH
24065: LD_INT 15
24067: PUSH
24068: LD_INT 16
24070: PUSH
24071: LD_INT 17
24073: PUSH
24074: LD_INT 18
24076: PUSH
24077: LD_INT 19
24079: PUSH
24080: LD_INT 20
24082: PUSH
24083: LD_INT 21
24085: PUSH
24086: LD_INT 22
24088: PUSH
24089: LD_INT 23
24091: PUSH
24092: LD_INT 24
24094: PUSH
24095: LD_INT 25
24097: PUSH
24098: LD_INT 26
24100: PUSH
24101: LD_INT 27
24103: PUSH
24104: LD_INT 28
24106: PUSH
24107: LD_INT 29
24109: PUSH
24110: LD_INT 30
24112: PUSH
24113: LD_INT 31
24115: PUSH
24116: LD_INT 32
24118: PUSH
24119: LD_INT 33
24121: PUSH
24122: LD_INT 34
24124: PUSH
24125: LD_INT 35
24127: PUSH
24128: LD_INT 36
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 101
24171: PUSH
24172: LD_INT 102
24174: PUSH
24175: LD_INT 103
24177: PUSH
24178: LD_INT 104
24180: PUSH
24181: LD_INT 105
24183: PUSH
24184: LD_INT 106
24186: PUSH
24187: LD_INT 107
24189: PUSH
24190: LD_INT 108
24192: PUSH
24193: LD_INT 109
24195: PUSH
24196: LD_INT 110
24198: PUSH
24199: LD_INT 111
24201: PUSH
24202: LD_INT 112
24204: PUSH
24205: LD_INT 113
24207: PUSH
24208: LD_INT 114
24210: PUSH
24211: LD_INT 115
24213: PUSH
24214: LD_INT 116
24216: PUSH
24217: LD_INT 117
24219: PUSH
24220: LD_INT 118
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: ST_TO_ADDR
24247: GO 24250
24249: POP
// end else
24250: GO 24481
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24252: LD_ADDR_VAR 0 2
24256: PUSH
24257: LD_INT 1
24259: PUSH
24260: LD_INT 2
24262: PUSH
24263: LD_INT 3
24265: PUSH
24266: LD_INT 4
24268: PUSH
24269: LD_INT 5
24271: PUSH
24272: LD_INT 6
24274: PUSH
24275: LD_INT 7
24277: PUSH
24278: LD_INT 8
24280: PUSH
24281: LD_INT 9
24283: PUSH
24284: LD_INT 10
24286: PUSH
24287: LD_INT 11
24289: PUSH
24290: LD_INT 12
24292: PUSH
24293: LD_INT 13
24295: PUSH
24296: LD_INT 14
24298: PUSH
24299: LD_INT 15
24301: PUSH
24302: LD_INT 16
24304: PUSH
24305: LD_INT 17
24307: PUSH
24308: LD_INT 18
24310: PUSH
24311: LD_INT 19
24313: PUSH
24314: LD_INT 20
24316: PUSH
24317: LD_INT 21
24319: PUSH
24320: LD_INT 22
24322: PUSH
24323: LD_INT 23
24325: PUSH
24326: LD_INT 24
24328: PUSH
24329: LD_INT 25
24331: PUSH
24332: LD_INT 26
24334: PUSH
24335: LD_INT 27
24337: PUSH
24338: LD_INT 28
24340: PUSH
24341: LD_INT 29
24343: PUSH
24344: LD_INT 30
24346: PUSH
24347: LD_INT 31
24349: PUSH
24350: LD_INT 32
24352: PUSH
24353: LD_INT 33
24355: PUSH
24356: LD_INT 34
24358: PUSH
24359: LD_INT 35
24361: PUSH
24362: LD_INT 36
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 101
24405: PUSH
24406: LD_INT 102
24408: PUSH
24409: LD_INT 103
24411: PUSH
24412: LD_INT 104
24414: PUSH
24415: LD_INT 105
24417: PUSH
24418: LD_INT 106
24420: PUSH
24421: LD_INT 107
24423: PUSH
24424: LD_INT 108
24426: PUSH
24427: LD_INT 109
24429: PUSH
24430: LD_INT 110
24432: PUSH
24433: LD_INT 111
24435: PUSH
24436: LD_INT 112
24438: PUSH
24439: LD_INT 113
24441: PUSH
24442: LD_INT 114
24444: PUSH
24445: LD_INT 115
24447: PUSH
24448: LD_INT 116
24450: PUSH
24451: LD_INT 117
24453: PUSH
24454: LD_INT 118
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: ST_TO_ADDR
// if result then
24481: LD_VAR 0 2
24485: IFFALSE 25271
// begin normal :=  ;
24487: LD_ADDR_VAR 0 5
24491: PUSH
24492: LD_STRING 
24494: ST_TO_ADDR
// hardcore :=  ;
24495: LD_ADDR_VAR 0 6
24499: PUSH
24500: LD_STRING 
24502: ST_TO_ADDR
// active :=  ;
24503: LD_ADDR_VAR 0 7
24507: PUSH
24508: LD_STRING 
24510: ST_TO_ADDR
// for i = 1 to normalCounter do
24511: LD_ADDR_VAR 0 8
24515: PUSH
24516: DOUBLE
24517: LD_INT 1
24519: DEC
24520: ST_TO_ADDR
24521: LD_EXP 64
24525: PUSH
24526: FOR_TO
24527: IFFALSE 24628
// begin tmp := 0 ;
24529: LD_ADDR_VAR 0 3
24533: PUSH
24534: LD_STRING 0
24536: ST_TO_ADDR
// if result [ 1 ] then
24537: LD_VAR 0 2
24541: PUSH
24542: LD_INT 1
24544: ARRAY
24545: IFFALSE 24610
// if result [ 1 ] [ 1 ] = i then
24547: LD_VAR 0 2
24551: PUSH
24552: LD_INT 1
24554: ARRAY
24555: PUSH
24556: LD_INT 1
24558: ARRAY
24559: PUSH
24560: LD_VAR 0 8
24564: EQUAL
24565: IFFALSE 24610
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24567: LD_ADDR_VAR 0 2
24571: PUSH
24572: LD_VAR 0 2
24576: PPUSH
24577: LD_INT 1
24579: PPUSH
24580: LD_VAR 0 2
24584: PUSH
24585: LD_INT 1
24587: ARRAY
24588: PPUSH
24589: LD_INT 1
24591: PPUSH
24592: CALL_OW 3
24596: PPUSH
24597: CALL_OW 1
24601: ST_TO_ADDR
// tmp := 1 ;
24602: LD_ADDR_VAR 0 3
24606: PUSH
24607: LD_STRING 1
24609: ST_TO_ADDR
// end ; normal := normal & tmp ;
24610: LD_ADDR_VAR 0 5
24614: PUSH
24615: LD_VAR 0 5
24619: PUSH
24620: LD_VAR 0 3
24624: STR
24625: ST_TO_ADDR
// end ;
24626: GO 24526
24628: POP
24629: POP
// for i = 1 to hardcoreCounter do
24630: LD_ADDR_VAR 0 8
24634: PUSH
24635: DOUBLE
24636: LD_INT 1
24638: DEC
24639: ST_TO_ADDR
24640: LD_EXP 65
24644: PUSH
24645: FOR_TO
24646: IFFALSE 24751
// begin tmp := 0 ;
24648: LD_ADDR_VAR 0 3
24652: PUSH
24653: LD_STRING 0
24655: ST_TO_ADDR
// if result [ 2 ] then
24656: LD_VAR 0 2
24660: PUSH
24661: LD_INT 2
24663: ARRAY
24664: IFFALSE 24733
// if result [ 2 ] [ 1 ] = 100 + i then
24666: LD_VAR 0 2
24670: PUSH
24671: LD_INT 2
24673: ARRAY
24674: PUSH
24675: LD_INT 1
24677: ARRAY
24678: PUSH
24679: LD_INT 100
24681: PUSH
24682: LD_VAR 0 8
24686: PLUS
24687: EQUAL
24688: IFFALSE 24733
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24690: LD_ADDR_VAR 0 2
24694: PUSH
24695: LD_VAR 0 2
24699: PPUSH
24700: LD_INT 2
24702: PPUSH
24703: LD_VAR 0 2
24707: PUSH
24708: LD_INT 2
24710: ARRAY
24711: PPUSH
24712: LD_INT 1
24714: PPUSH
24715: CALL_OW 3
24719: PPUSH
24720: CALL_OW 1
24724: ST_TO_ADDR
// tmp := 1 ;
24725: LD_ADDR_VAR 0 3
24729: PUSH
24730: LD_STRING 1
24732: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24733: LD_ADDR_VAR 0 6
24737: PUSH
24738: LD_VAR 0 6
24742: PUSH
24743: LD_VAR 0 3
24747: STR
24748: ST_TO_ADDR
// end ;
24749: GO 24645
24751: POP
24752: POP
// if isGameLoad then
24753: LD_VAR 0 1
24757: IFFALSE 25232
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24759: LD_ADDR_VAR 0 4
24763: PUSH
24764: LD_EXP 68
24768: PUSH
24769: LD_EXP 67
24773: PUSH
24774: LD_EXP 69
24778: PUSH
24779: LD_EXP 66
24783: PUSH
24784: LD_EXP 70
24788: PUSH
24789: LD_EXP 71
24793: PUSH
24794: LD_EXP 72
24798: PUSH
24799: LD_EXP 73
24803: PUSH
24804: LD_EXP 74
24808: PUSH
24809: LD_EXP 75
24813: PUSH
24814: LD_EXP 76
24818: PUSH
24819: LD_EXP 77
24823: PUSH
24824: LD_EXP 78
24828: PUSH
24829: LD_EXP 79
24833: PUSH
24834: LD_EXP 87
24838: PUSH
24839: LD_EXP 88
24843: PUSH
24844: LD_EXP 89
24848: PUSH
24849: LD_EXP 90
24853: PUSH
24854: LD_EXP 92
24858: PUSH
24859: LD_EXP 93
24863: PUSH
24864: LD_EXP 94
24868: PUSH
24869: LD_EXP 97
24873: PUSH
24874: LD_EXP 99
24878: PUSH
24879: LD_EXP 100
24883: PUSH
24884: LD_EXP 101
24888: PUSH
24889: LD_EXP 103
24893: PUSH
24894: LD_EXP 104
24898: PUSH
24899: LD_EXP 107
24903: PUSH
24904: LD_EXP 108
24908: PUSH
24909: LD_EXP 109
24913: PUSH
24914: LD_EXP 110
24918: PUSH
24919: LD_EXP 111
24923: PUSH
24924: LD_EXP 112
24928: PUSH
24929: LD_EXP 113
24933: PUSH
24934: LD_EXP 114
24938: PUSH
24939: LD_EXP 115
24943: PUSH
24944: LD_EXP 80
24948: PUSH
24949: LD_EXP 81
24953: PUSH
24954: LD_EXP 84
24958: PUSH
24959: LD_EXP 85
24963: PUSH
24964: LD_EXP 86
24968: PUSH
24969: LD_EXP 82
24973: PUSH
24974: LD_EXP 83
24978: PUSH
24979: LD_EXP 91
24983: PUSH
24984: LD_EXP 95
24988: PUSH
24989: LD_EXP 96
24993: PUSH
24994: LD_EXP 98
24998: PUSH
24999: LD_EXP 102
25003: PUSH
25004: LD_EXP 105
25008: PUSH
25009: LD_EXP 106
25013: PUSH
25014: LD_EXP 116
25018: PUSH
25019: LD_EXP 117
25023: PUSH
25024: LD_EXP 118
25028: PUSH
25029: LD_EXP 119
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: ST_TO_ADDR
// tmp :=  ;
25090: LD_ADDR_VAR 0 3
25094: PUSH
25095: LD_STRING 
25097: ST_TO_ADDR
// for i = 1 to normalCounter do
25098: LD_ADDR_VAR 0 8
25102: PUSH
25103: DOUBLE
25104: LD_INT 1
25106: DEC
25107: ST_TO_ADDR
25108: LD_EXP 64
25112: PUSH
25113: FOR_TO
25114: IFFALSE 25150
// begin if flags [ i ] then
25116: LD_VAR 0 4
25120: PUSH
25121: LD_VAR 0 8
25125: ARRAY
25126: IFFALSE 25148
// tmp := tmp & i & ; ;
25128: LD_ADDR_VAR 0 3
25132: PUSH
25133: LD_VAR 0 3
25137: PUSH
25138: LD_VAR 0 8
25142: STR
25143: PUSH
25144: LD_STRING ;
25146: STR
25147: ST_TO_ADDR
// end ;
25148: GO 25113
25150: POP
25151: POP
// for i = 1 to hardcoreCounter do
25152: LD_ADDR_VAR 0 8
25156: PUSH
25157: DOUBLE
25158: LD_INT 1
25160: DEC
25161: ST_TO_ADDR
25162: LD_EXP 65
25166: PUSH
25167: FOR_TO
25168: IFFALSE 25214
// begin if flags [ normalCounter + i ] then
25170: LD_VAR 0 4
25174: PUSH
25175: LD_EXP 64
25179: PUSH
25180: LD_VAR 0 8
25184: PLUS
25185: ARRAY
25186: IFFALSE 25212
// tmp := tmp & ( 100 + i ) & ; ;
25188: LD_ADDR_VAR 0 3
25192: PUSH
25193: LD_VAR 0 3
25197: PUSH
25198: LD_INT 100
25200: PUSH
25201: LD_VAR 0 8
25205: PLUS
25206: STR
25207: PUSH
25208: LD_STRING ;
25210: STR
25211: ST_TO_ADDR
// end ;
25212: GO 25167
25214: POP
25215: POP
// if tmp then
25216: LD_VAR 0 3
25220: IFFALSE 25232
// active := tmp ;
25222: LD_ADDR_VAR 0 7
25226: PUSH
25227: LD_VAR 0 3
25231: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25232: LD_STRING getStreamItemsFromMission("
25234: PUSH
25235: LD_VAR 0 5
25239: STR
25240: PUSH
25241: LD_STRING ","
25243: STR
25244: PUSH
25245: LD_VAR 0 6
25249: STR
25250: PUSH
25251: LD_STRING ","
25253: STR
25254: PUSH
25255: LD_VAR 0 7
25259: STR
25260: PUSH
25261: LD_STRING ")
25263: STR
25264: PPUSH
25265: CALL_OW 559
// end else
25269: GO 25278
// ToLua ( getStreamItemsFromMission("","","") ) ;
25271: LD_STRING getStreamItemsFromMission("","","")
25273: PPUSH
25274: CALL_OW 559
// end ;
25278: LD_VAR 0 2
25282: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25283: LD_EXP 63
25287: PUSH
25288: LD_EXP 68
25292: AND
25293: IFFALSE 25417
25295: GO 25297
25297: DISABLE
25298: LD_INT 0
25300: PPUSH
25301: PPUSH
// begin enable ;
25302: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25303: LD_ADDR_VAR 0 2
25307: PUSH
25308: LD_INT 22
25310: PUSH
25311: LD_OWVAR 2
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 2
25322: PUSH
25323: LD_INT 34
25325: PUSH
25326: LD_INT 7
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 34
25335: PUSH
25336: LD_INT 45
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 34
25345: PUSH
25346: LD_INT 28
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 34
25355: PUSH
25356: LD_INT 47
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PPUSH
25374: CALL_OW 69
25378: ST_TO_ADDR
// if not tmp then
25379: LD_VAR 0 2
25383: NOT
25384: IFFALSE 25388
// exit ;
25386: GO 25417
// for i in tmp do
25388: LD_ADDR_VAR 0 1
25392: PUSH
25393: LD_VAR 0 2
25397: PUSH
25398: FOR_IN
25399: IFFALSE 25415
// begin SetLives ( i , 0 ) ;
25401: LD_VAR 0 1
25405: PPUSH
25406: LD_INT 0
25408: PPUSH
25409: CALL_OW 234
// end ;
25413: GO 25398
25415: POP
25416: POP
// end ;
25417: PPOPN 2
25419: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25420: LD_EXP 63
25424: PUSH
25425: LD_EXP 69
25429: AND
25430: IFFALSE 25514
25432: GO 25434
25434: DISABLE
25435: LD_INT 0
25437: PPUSH
25438: PPUSH
// begin enable ;
25439: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25440: LD_ADDR_VAR 0 2
25444: PUSH
25445: LD_INT 22
25447: PUSH
25448: LD_OWVAR 2
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 32
25459: PUSH
25460: LD_INT 3
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PPUSH
25471: CALL_OW 69
25475: ST_TO_ADDR
// if not tmp then
25476: LD_VAR 0 2
25480: NOT
25481: IFFALSE 25485
// exit ;
25483: GO 25514
// for i in tmp do
25485: LD_ADDR_VAR 0 1
25489: PUSH
25490: LD_VAR 0 2
25494: PUSH
25495: FOR_IN
25496: IFFALSE 25512
// begin SetLives ( i , 0 ) ;
25498: LD_VAR 0 1
25502: PPUSH
25503: LD_INT 0
25505: PPUSH
25506: CALL_OW 234
// end ;
25510: GO 25495
25512: POP
25513: POP
// end ;
25514: PPOPN 2
25516: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25517: LD_EXP 63
25521: PUSH
25522: LD_EXP 66
25526: AND
25527: IFFALSE 25620
25529: GO 25531
25531: DISABLE
25532: LD_INT 0
25534: PPUSH
// begin enable ;
25535: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25536: LD_ADDR_VAR 0 1
25540: PUSH
25541: LD_INT 22
25543: PUSH
25544: LD_OWVAR 2
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 2
25555: PUSH
25556: LD_INT 25
25558: PUSH
25559: LD_INT 5
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 25
25568: PUSH
25569: LD_INT 9
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 25
25578: PUSH
25579: LD_INT 8
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PPUSH
25596: CALL_OW 69
25600: PUSH
25601: FOR_IN
25602: IFFALSE 25618
// begin SetClass ( i , 1 ) ;
25604: LD_VAR 0 1
25608: PPUSH
25609: LD_INT 1
25611: PPUSH
25612: CALL_OW 336
// end ;
25616: GO 25601
25618: POP
25619: POP
// end ;
25620: PPOPN 1
25622: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25623: LD_EXP 63
25627: PUSH
25628: LD_EXP 67
25632: AND
25633: PUSH
25634: LD_OWVAR 65
25638: PUSH
25639: LD_INT 7
25641: LESS
25642: AND
25643: IFFALSE 25657
25645: GO 25647
25647: DISABLE
// begin enable ;
25648: ENABLE
// game_speed := 7 ;
25649: LD_ADDR_OWVAR 65
25653: PUSH
25654: LD_INT 7
25656: ST_TO_ADDR
// end ;
25657: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25658: LD_EXP 63
25662: PUSH
25663: LD_EXP 70
25667: AND
25668: IFFALSE 25870
25670: GO 25672
25672: DISABLE
25673: LD_INT 0
25675: PPUSH
25676: PPUSH
25677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25678: LD_ADDR_VAR 0 3
25682: PUSH
25683: LD_INT 81
25685: PUSH
25686: LD_OWVAR 2
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 21
25697: PUSH
25698: LD_INT 1
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PPUSH
25709: CALL_OW 69
25713: ST_TO_ADDR
// if not tmp then
25714: LD_VAR 0 3
25718: NOT
25719: IFFALSE 25723
// exit ;
25721: GO 25870
// if tmp > 5 then
25723: LD_VAR 0 3
25727: PUSH
25728: LD_INT 5
25730: GREATER
25731: IFFALSE 25743
// k := 5 else
25733: LD_ADDR_VAR 0 2
25737: PUSH
25738: LD_INT 5
25740: ST_TO_ADDR
25741: GO 25753
// k := tmp ;
25743: LD_ADDR_VAR 0 2
25747: PUSH
25748: LD_VAR 0 3
25752: ST_TO_ADDR
// for i := 1 to k do
25753: LD_ADDR_VAR 0 1
25757: PUSH
25758: DOUBLE
25759: LD_INT 1
25761: DEC
25762: ST_TO_ADDR
25763: LD_VAR 0 2
25767: PUSH
25768: FOR_TO
25769: IFFALSE 25868
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25771: LD_VAR 0 3
25775: PUSH
25776: LD_VAR 0 1
25780: ARRAY
25781: PPUSH
25782: LD_VAR 0 1
25786: PUSH
25787: LD_INT 4
25789: MOD
25790: PUSH
25791: LD_INT 1
25793: PLUS
25794: PPUSH
25795: CALL_OW 259
25799: PUSH
25800: LD_INT 10
25802: LESS
25803: IFFALSE 25866
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25805: LD_VAR 0 3
25809: PUSH
25810: LD_VAR 0 1
25814: ARRAY
25815: PPUSH
25816: LD_VAR 0 1
25820: PUSH
25821: LD_INT 4
25823: MOD
25824: PUSH
25825: LD_INT 1
25827: PLUS
25828: PPUSH
25829: LD_VAR 0 3
25833: PUSH
25834: LD_VAR 0 1
25838: ARRAY
25839: PPUSH
25840: LD_VAR 0 1
25844: PUSH
25845: LD_INT 4
25847: MOD
25848: PUSH
25849: LD_INT 1
25851: PLUS
25852: PPUSH
25853: CALL_OW 259
25857: PUSH
25858: LD_INT 1
25860: PLUS
25861: PPUSH
25862: CALL_OW 237
25866: GO 25768
25868: POP
25869: POP
// end ;
25870: PPOPN 3
25872: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25873: LD_EXP 63
25877: PUSH
25878: LD_EXP 71
25882: AND
25883: IFFALSE 25903
25885: GO 25887
25887: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25888: LD_INT 4
25890: PPUSH
25891: LD_OWVAR 2
25895: PPUSH
25896: LD_INT 0
25898: PPUSH
25899: CALL_OW 324
25903: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25904: LD_EXP 63
25908: PUSH
25909: LD_EXP 100
25913: AND
25914: IFFALSE 25934
25916: GO 25918
25918: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25919: LD_INT 19
25921: PPUSH
25922: LD_OWVAR 2
25926: PPUSH
25927: LD_INT 0
25929: PPUSH
25930: CALL_OW 324
25934: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25935: LD_EXP 63
25939: PUSH
25940: LD_EXP 72
25944: AND
25945: IFFALSE 26047
25947: GO 25949
25949: DISABLE
25950: LD_INT 0
25952: PPUSH
25953: PPUSH
// begin enable ;
25954: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25955: LD_ADDR_VAR 0 2
25959: PUSH
25960: LD_INT 22
25962: PUSH
25963: LD_OWVAR 2
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: LD_INT 34
25977: PUSH
25978: LD_INT 11
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 34
25987: PUSH
25988: LD_INT 30
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: LIST
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PPUSH
26004: CALL_OW 69
26008: ST_TO_ADDR
// if not tmp then
26009: LD_VAR 0 2
26013: NOT
26014: IFFALSE 26018
// exit ;
26016: GO 26047
// for i in tmp do
26018: LD_ADDR_VAR 0 1
26022: PUSH
26023: LD_VAR 0 2
26027: PUSH
26028: FOR_IN
26029: IFFALSE 26045
// begin SetLives ( i , 0 ) ;
26031: LD_VAR 0 1
26035: PPUSH
26036: LD_INT 0
26038: PPUSH
26039: CALL_OW 234
// end ;
26043: GO 26028
26045: POP
26046: POP
// end ;
26047: PPOPN 2
26049: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26050: LD_EXP 63
26054: PUSH
26055: LD_EXP 73
26059: AND
26060: IFFALSE 26080
26062: GO 26064
26064: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26065: LD_INT 32
26067: PPUSH
26068: LD_OWVAR 2
26072: PPUSH
26073: LD_INT 0
26075: PPUSH
26076: CALL_OW 324
26080: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26081: LD_EXP 63
26085: PUSH
26086: LD_EXP 74
26090: AND
26091: IFFALSE 26272
26093: GO 26095
26095: DISABLE
26096: LD_INT 0
26098: PPUSH
26099: PPUSH
26100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26101: LD_ADDR_VAR 0 2
26105: PUSH
26106: LD_INT 22
26108: PUSH
26109: LD_OWVAR 2
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 33
26120: PUSH
26121: LD_INT 3
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PPUSH
26132: CALL_OW 69
26136: ST_TO_ADDR
// if not tmp then
26137: LD_VAR 0 2
26141: NOT
26142: IFFALSE 26146
// exit ;
26144: GO 26272
// side := 0 ;
26146: LD_ADDR_VAR 0 3
26150: PUSH
26151: LD_INT 0
26153: ST_TO_ADDR
// for i := 1 to 8 do
26154: LD_ADDR_VAR 0 1
26158: PUSH
26159: DOUBLE
26160: LD_INT 1
26162: DEC
26163: ST_TO_ADDR
26164: LD_INT 8
26166: PUSH
26167: FOR_TO
26168: IFFALSE 26216
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26170: LD_OWVAR 2
26174: PUSH
26175: LD_VAR 0 1
26179: NONEQUAL
26180: PUSH
26181: LD_OWVAR 2
26185: PPUSH
26186: LD_VAR 0 1
26190: PPUSH
26191: CALL_OW 81
26195: PUSH
26196: LD_INT 2
26198: EQUAL
26199: AND
26200: IFFALSE 26214
// begin side := i ;
26202: LD_ADDR_VAR 0 3
26206: PUSH
26207: LD_VAR 0 1
26211: ST_TO_ADDR
// break ;
26212: GO 26216
// end ;
26214: GO 26167
26216: POP
26217: POP
// if not side then
26218: LD_VAR 0 3
26222: NOT
26223: IFFALSE 26227
// exit ;
26225: GO 26272
// for i := 1 to tmp do
26227: LD_ADDR_VAR 0 1
26231: PUSH
26232: DOUBLE
26233: LD_INT 1
26235: DEC
26236: ST_TO_ADDR
26237: LD_VAR 0 2
26241: PUSH
26242: FOR_TO
26243: IFFALSE 26270
// if Prob ( 60 ) then
26245: LD_INT 60
26247: PPUSH
26248: CALL_OW 13
26252: IFFALSE 26268
// SetSide ( i , side ) ;
26254: LD_VAR 0 1
26258: PPUSH
26259: LD_VAR 0 3
26263: PPUSH
26264: CALL_OW 235
26268: GO 26242
26270: POP
26271: POP
// end ;
26272: PPOPN 3
26274: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26275: LD_EXP 63
26279: PUSH
26280: LD_EXP 76
26284: AND
26285: IFFALSE 26404
26287: GO 26289
26289: DISABLE
26290: LD_INT 0
26292: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26293: LD_ADDR_VAR 0 1
26297: PUSH
26298: LD_INT 22
26300: PUSH
26301: LD_OWVAR 2
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 21
26312: PUSH
26313: LD_INT 1
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 3
26322: PUSH
26323: LD_INT 23
26325: PUSH
26326: LD_INT 0
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: LIST
26341: PPUSH
26342: CALL_OW 69
26346: PUSH
26347: FOR_IN
26348: IFFALSE 26402
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26350: LD_VAR 0 1
26354: PPUSH
26355: CALL_OW 257
26359: PUSH
26360: LD_INT 1
26362: PUSH
26363: LD_INT 2
26365: PUSH
26366: LD_INT 3
26368: PUSH
26369: LD_INT 4
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: IN
26378: IFFALSE 26400
// SetClass ( un , rand ( 1 , 4 ) ) ;
26380: LD_VAR 0 1
26384: PPUSH
26385: LD_INT 1
26387: PPUSH
26388: LD_INT 4
26390: PPUSH
26391: CALL_OW 12
26395: PPUSH
26396: CALL_OW 336
26400: GO 26347
26402: POP
26403: POP
// end ;
26404: PPOPN 1
26406: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26407: LD_EXP 63
26411: PUSH
26412: LD_EXP 75
26416: AND
26417: IFFALSE 26496
26419: GO 26421
26421: DISABLE
26422: LD_INT 0
26424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26425: LD_ADDR_VAR 0 1
26429: PUSH
26430: LD_INT 22
26432: PUSH
26433: LD_OWVAR 2
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 21
26444: PUSH
26445: LD_INT 3
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PPUSH
26456: CALL_OW 69
26460: ST_TO_ADDR
// if not tmp then
26461: LD_VAR 0 1
26465: NOT
26466: IFFALSE 26470
// exit ;
26468: GO 26496
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26470: LD_VAR 0 1
26474: PUSH
26475: LD_INT 1
26477: PPUSH
26478: LD_VAR 0 1
26482: PPUSH
26483: CALL_OW 12
26487: ARRAY
26488: PPUSH
26489: LD_INT 100
26491: PPUSH
26492: CALL_OW 234
// end ;
26496: PPOPN 1
26498: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26499: LD_EXP 63
26503: PUSH
26504: LD_EXP 77
26508: AND
26509: IFFALSE 26607
26511: GO 26513
26513: DISABLE
26514: LD_INT 0
26516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26517: LD_ADDR_VAR 0 1
26521: PUSH
26522: LD_INT 22
26524: PUSH
26525: LD_OWVAR 2
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 21
26536: PUSH
26537: LD_INT 1
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PPUSH
26548: CALL_OW 69
26552: ST_TO_ADDR
// if not tmp then
26553: LD_VAR 0 1
26557: NOT
26558: IFFALSE 26562
// exit ;
26560: GO 26607
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26562: LD_VAR 0 1
26566: PUSH
26567: LD_INT 1
26569: PPUSH
26570: LD_VAR 0 1
26574: PPUSH
26575: CALL_OW 12
26579: ARRAY
26580: PPUSH
26581: LD_INT 1
26583: PPUSH
26584: LD_INT 4
26586: PPUSH
26587: CALL_OW 12
26591: PPUSH
26592: LD_INT 3000
26594: PPUSH
26595: LD_INT 9000
26597: PPUSH
26598: CALL_OW 12
26602: PPUSH
26603: CALL_OW 492
// end ;
26607: PPOPN 1
26609: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26610: LD_EXP 63
26614: PUSH
26615: LD_EXP 78
26619: AND
26620: IFFALSE 26640
26622: GO 26624
26624: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26625: LD_INT 1
26627: PPUSH
26628: LD_OWVAR 2
26632: PPUSH
26633: LD_INT 0
26635: PPUSH
26636: CALL_OW 324
26640: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26641: LD_EXP 63
26645: PUSH
26646: LD_EXP 79
26650: AND
26651: IFFALSE 26734
26653: GO 26655
26655: DISABLE
26656: LD_INT 0
26658: PPUSH
26659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26660: LD_ADDR_VAR 0 2
26664: PUSH
26665: LD_INT 22
26667: PUSH
26668: LD_OWVAR 2
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 21
26679: PUSH
26680: LD_INT 3
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PPUSH
26691: CALL_OW 69
26695: ST_TO_ADDR
// if not tmp then
26696: LD_VAR 0 2
26700: NOT
26701: IFFALSE 26705
// exit ;
26703: GO 26734
// for i in tmp do
26705: LD_ADDR_VAR 0 1
26709: PUSH
26710: LD_VAR 0 2
26714: PUSH
26715: FOR_IN
26716: IFFALSE 26732
// SetBLevel ( i , 10 ) ;
26718: LD_VAR 0 1
26722: PPUSH
26723: LD_INT 10
26725: PPUSH
26726: CALL_OW 241
26730: GO 26715
26732: POP
26733: POP
// end ;
26734: PPOPN 2
26736: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26737: LD_EXP 63
26741: PUSH
26742: LD_EXP 80
26746: AND
26747: IFFALSE 26858
26749: GO 26751
26751: DISABLE
26752: LD_INT 0
26754: PPUSH
26755: PPUSH
26756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26757: LD_ADDR_VAR 0 3
26761: PUSH
26762: LD_INT 22
26764: PUSH
26765: LD_OWVAR 2
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 25
26776: PUSH
26777: LD_INT 1
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PPUSH
26788: CALL_OW 69
26792: ST_TO_ADDR
// if not tmp then
26793: LD_VAR 0 3
26797: NOT
26798: IFFALSE 26802
// exit ;
26800: GO 26858
// un := tmp [ rand ( 1 , tmp ) ] ;
26802: LD_ADDR_VAR 0 2
26806: PUSH
26807: LD_VAR 0 3
26811: PUSH
26812: LD_INT 1
26814: PPUSH
26815: LD_VAR 0 3
26819: PPUSH
26820: CALL_OW 12
26824: ARRAY
26825: ST_TO_ADDR
// if Crawls ( un ) then
26826: LD_VAR 0 2
26830: PPUSH
26831: CALL_OW 318
26835: IFFALSE 26846
// ComWalk ( un ) ;
26837: LD_VAR 0 2
26841: PPUSH
26842: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26846: LD_VAR 0 2
26850: PPUSH
26851: LD_INT 5
26853: PPUSH
26854: CALL_OW 336
// end ;
26858: PPOPN 3
26860: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26861: LD_EXP 63
26865: PUSH
26866: LD_EXP 81
26870: AND
26871: PUSH
26872: LD_OWVAR 67
26876: PUSH
26877: LD_INT 4
26879: LESS
26880: AND
26881: IFFALSE 26900
26883: GO 26885
26885: DISABLE
// begin Difficulty := Difficulty + 1 ;
26886: LD_ADDR_OWVAR 67
26890: PUSH
26891: LD_OWVAR 67
26895: PUSH
26896: LD_INT 1
26898: PLUS
26899: ST_TO_ADDR
// end ;
26900: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26901: LD_EXP 63
26905: PUSH
26906: LD_EXP 82
26910: AND
26911: IFFALSE 27014
26913: GO 26915
26915: DISABLE
26916: LD_INT 0
26918: PPUSH
// begin for i := 1 to 5 do
26919: LD_ADDR_VAR 0 1
26923: PUSH
26924: DOUBLE
26925: LD_INT 1
26927: DEC
26928: ST_TO_ADDR
26929: LD_INT 5
26931: PUSH
26932: FOR_TO
26933: IFFALSE 27012
// begin uc_nation := nation_nature ;
26935: LD_ADDR_OWVAR 21
26939: PUSH
26940: LD_INT 0
26942: ST_TO_ADDR
// uc_side := 0 ;
26943: LD_ADDR_OWVAR 20
26947: PUSH
26948: LD_INT 0
26950: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26951: LD_ADDR_OWVAR 29
26955: PUSH
26956: LD_INT 12
26958: PUSH
26959: LD_INT 12
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: ST_TO_ADDR
// hc_agressivity := 20 ;
26966: LD_ADDR_OWVAR 35
26970: PUSH
26971: LD_INT 20
26973: ST_TO_ADDR
// hc_class := class_tiger ;
26974: LD_ADDR_OWVAR 28
26978: PUSH
26979: LD_INT 14
26981: ST_TO_ADDR
// hc_gallery :=  ;
26982: LD_ADDR_OWVAR 33
26986: PUSH
26987: LD_STRING 
26989: ST_TO_ADDR
// hc_name :=  ;
26990: LD_ADDR_OWVAR 26
26994: PUSH
26995: LD_STRING 
26997: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26998: CALL_OW 44
27002: PPUSH
27003: LD_INT 0
27005: PPUSH
27006: CALL_OW 51
// end ;
27010: GO 26932
27012: POP
27013: POP
// end ;
27014: PPOPN 1
27016: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27017: LD_EXP 63
27021: PUSH
27022: LD_EXP 83
27026: AND
27027: IFFALSE 27036
27029: GO 27031
27031: DISABLE
// StreamSibBomb ;
27032: CALL 27037 0 0
27036: END
// export function StreamSibBomb ; var i , x , y ; begin
27037: LD_INT 0
27039: PPUSH
27040: PPUSH
27041: PPUSH
27042: PPUSH
// result := false ;
27043: LD_ADDR_VAR 0 1
27047: PUSH
27048: LD_INT 0
27050: ST_TO_ADDR
// for i := 1 to 16 do
27051: LD_ADDR_VAR 0 2
27055: PUSH
27056: DOUBLE
27057: LD_INT 1
27059: DEC
27060: ST_TO_ADDR
27061: LD_INT 16
27063: PUSH
27064: FOR_TO
27065: IFFALSE 27264
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27067: LD_ADDR_VAR 0 3
27071: PUSH
27072: LD_INT 10
27074: PUSH
27075: LD_INT 20
27077: PUSH
27078: LD_INT 30
27080: PUSH
27081: LD_INT 40
27083: PUSH
27084: LD_INT 50
27086: PUSH
27087: LD_INT 60
27089: PUSH
27090: LD_INT 70
27092: PUSH
27093: LD_INT 80
27095: PUSH
27096: LD_INT 90
27098: PUSH
27099: LD_INT 100
27101: PUSH
27102: LD_INT 110
27104: PUSH
27105: LD_INT 120
27107: PUSH
27108: LD_INT 130
27110: PUSH
27111: LD_INT 140
27113: PUSH
27114: LD_INT 150
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 1
27136: PPUSH
27137: LD_INT 15
27139: PPUSH
27140: CALL_OW 12
27144: ARRAY
27145: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27146: LD_ADDR_VAR 0 4
27150: PUSH
27151: LD_INT 10
27153: PUSH
27154: LD_INT 20
27156: PUSH
27157: LD_INT 30
27159: PUSH
27160: LD_INT 40
27162: PUSH
27163: LD_INT 50
27165: PUSH
27166: LD_INT 60
27168: PUSH
27169: LD_INT 70
27171: PUSH
27172: LD_INT 80
27174: PUSH
27175: LD_INT 90
27177: PUSH
27178: LD_INT 100
27180: PUSH
27181: LD_INT 110
27183: PUSH
27184: LD_INT 120
27186: PUSH
27187: LD_INT 130
27189: PUSH
27190: LD_INT 140
27192: PUSH
27193: LD_INT 150
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 1
27215: PPUSH
27216: LD_INT 15
27218: PPUSH
27219: CALL_OW 12
27223: ARRAY
27224: ST_TO_ADDR
// if ValidHex ( x , y ) then
27225: LD_VAR 0 3
27229: PPUSH
27230: LD_VAR 0 4
27234: PPUSH
27235: CALL_OW 488
27239: IFFALSE 27262
// begin result := [ x , y ] ;
27241: LD_ADDR_VAR 0 1
27245: PUSH
27246: LD_VAR 0 3
27250: PUSH
27251: LD_VAR 0 4
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: ST_TO_ADDR
// break ;
27260: GO 27264
// end ; end ;
27262: GO 27064
27264: POP
27265: POP
// if result then
27266: LD_VAR 0 1
27270: IFFALSE 27330
// begin ToLua ( playSibBomb() ) ;
27272: LD_STRING playSibBomb()
27274: PPUSH
27275: CALL_OW 559
// wait ( 0 0$14 ) ;
27279: LD_INT 490
27281: PPUSH
27282: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27286: LD_VAR 0 1
27290: PUSH
27291: LD_INT 1
27293: ARRAY
27294: PPUSH
27295: LD_VAR 0 1
27299: PUSH
27300: LD_INT 2
27302: ARRAY
27303: PPUSH
27304: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27308: LD_VAR 0 1
27312: PUSH
27313: LD_INT 1
27315: ARRAY
27316: PPUSH
27317: LD_VAR 0 1
27321: PUSH
27322: LD_INT 2
27324: ARRAY
27325: PPUSH
27326: CALL_OW 429
// end ; end ;
27330: LD_VAR 0 1
27334: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27335: LD_EXP 63
27339: PUSH
27340: LD_EXP 85
27344: AND
27345: IFFALSE 27357
27347: GO 27349
27349: DISABLE
// YouLost (  ) ;
27350: LD_STRING 
27352: PPUSH
27353: CALL_OW 104
27357: END
// every 0 0$1 trigger StreamModeActive and sFog do
27358: LD_EXP 63
27362: PUSH
27363: LD_EXP 84
27367: AND
27368: IFFALSE 27382
27370: GO 27372
27372: DISABLE
// FogOff ( your_side ) ;
27373: LD_OWVAR 2
27377: PPUSH
27378: CALL_OW 344
27382: END
// every 0 0$1 trigger StreamModeActive and sSun do
27383: LD_EXP 63
27387: PUSH
27388: LD_EXP 86
27392: AND
27393: IFFALSE 27421
27395: GO 27397
27397: DISABLE
// begin solar_recharge_percent := 0 ;
27398: LD_ADDR_OWVAR 79
27402: PUSH
27403: LD_INT 0
27405: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27406: LD_INT 10500
27408: PPUSH
27409: CALL_OW 67
// solar_recharge_percent := 100 ;
27413: LD_ADDR_OWVAR 79
27417: PUSH
27418: LD_INT 100
27420: ST_TO_ADDR
// end ;
27421: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27422: LD_EXP 63
27426: PUSH
27427: LD_EXP 87
27431: AND
27432: IFFALSE 27671
27434: GO 27436
27436: DISABLE
27437: LD_INT 0
27439: PPUSH
27440: PPUSH
27441: PPUSH
// begin tmp := [ ] ;
27442: LD_ADDR_VAR 0 3
27446: PUSH
27447: EMPTY
27448: ST_TO_ADDR
// for i := 1 to 6 do
27449: LD_ADDR_VAR 0 1
27453: PUSH
27454: DOUBLE
27455: LD_INT 1
27457: DEC
27458: ST_TO_ADDR
27459: LD_INT 6
27461: PUSH
27462: FOR_TO
27463: IFFALSE 27568
// begin uc_nation := nation_nature ;
27465: LD_ADDR_OWVAR 21
27469: PUSH
27470: LD_INT 0
27472: ST_TO_ADDR
// uc_side := 0 ;
27473: LD_ADDR_OWVAR 20
27477: PUSH
27478: LD_INT 0
27480: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27481: LD_ADDR_OWVAR 29
27485: PUSH
27486: LD_INT 12
27488: PUSH
27489: LD_INT 12
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: ST_TO_ADDR
// hc_agressivity := 20 ;
27496: LD_ADDR_OWVAR 35
27500: PUSH
27501: LD_INT 20
27503: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27504: LD_ADDR_OWVAR 28
27508: PUSH
27509: LD_INT 17
27511: ST_TO_ADDR
// hc_gallery :=  ;
27512: LD_ADDR_OWVAR 33
27516: PUSH
27517: LD_STRING 
27519: ST_TO_ADDR
// hc_name :=  ;
27520: LD_ADDR_OWVAR 26
27524: PUSH
27525: LD_STRING 
27527: ST_TO_ADDR
// un := CreateHuman ;
27528: LD_ADDR_VAR 0 2
27532: PUSH
27533: CALL_OW 44
27537: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27538: LD_VAR 0 2
27542: PPUSH
27543: LD_INT 1
27545: PPUSH
27546: CALL_OW 51
// tmp := tmp ^ un ;
27550: LD_ADDR_VAR 0 3
27554: PUSH
27555: LD_VAR 0 3
27559: PUSH
27560: LD_VAR 0 2
27564: ADD
27565: ST_TO_ADDR
// end ;
27566: GO 27462
27568: POP
27569: POP
// repeat wait ( 0 0$1 ) ;
27570: LD_INT 35
27572: PPUSH
27573: CALL_OW 67
// for un in tmp do
27577: LD_ADDR_VAR 0 2
27581: PUSH
27582: LD_VAR 0 3
27586: PUSH
27587: FOR_IN
27588: IFFALSE 27662
// begin if IsDead ( un ) then
27590: LD_VAR 0 2
27594: PPUSH
27595: CALL_OW 301
27599: IFFALSE 27619
// begin tmp := tmp diff un ;
27601: LD_ADDR_VAR 0 3
27605: PUSH
27606: LD_VAR 0 3
27610: PUSH
27611: LD_VAR 0 2
27615: DIFF
27616: ST_TO_ADDR
// continue ;
27617: GO 27587
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27619: LD_VAR 0 2
27623: PPUSH
27624: LD_INT 3
27626: PUSH
27627: LD_INT 22
27629: PUSH
27630: LD_INT 0
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PPUSH
27641: CALL_OW 69
27645: PPUSH
27646: LD_VAR 0 2
27650: PPUSH
27651: CALL_OW 74
27655: PPUSH
27656: CALL_OW 115
// end ;
27660: GO 27587
27662: POP
27663: POP
// until not tmp ;
27664: LD_VAR 0 3
27668: NOT
27669: IFFALSE 27570
// end ;
27671: PPOPN 3
27673: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27674: LD_EXP 63
27678: PUSH
27679: LD_EXP 88
27683: AND
27684: IFFALSE 27738
27686: GO 27688
27688: DISABLE
// begin ToLua ( displayTroll(); ) ;
27689: LD_STRING displayTroll();
27691: PPUSH
27692: CALL_OW 559
// wait ( 3 3$00 ) ;
27696: LD_INT 6300
27698: PPUSH
27699: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27703: LD_STRING hideTroll();
27705: PPUSH
27706: CALL_OW 559
// wait ( 1 1$00 ) ;
27710: LD_INT 2100
27712: PPUSH
27713: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27717: LD_STRING displayTroll();
27719: PPUSH
27720: CALL_OW 559
// wait ( 1 1$00 ) ;
27724: LD_INT 2100
27726: PPUSH
27727: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27731: LD_STRING hideTroll();
27733: PPUSH
27734: CALL_OW 559
// end ;
27738: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27739: LD_EXP 63
27743: PUSH
27744: LD_EXP 89
27748: AND
27749: IFFALSE 27812
27751: GO 27753
27753: DISABLE
27754: LD_INT 0
27756: PPUSH
// begin p := 0 ;
27757: LD_ADDR_VAR 0 1
27761: PUSH
27762: LD_INT 0
27764: ST_TO_ADDR
// repeat game_speed := 1 ;
27765: LD_ADDR_OWVAR 65
27769: PUSH
27770: LD_INT 1
27772: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27773: LD_INT 35
27775: PPUSH
27776: CALL_OW 67
// p := p + 1 ;
27780: LD_ADDR_VAR 0 1
27784: PUSH
27785: LD_VAR 0 1
27789: PUSH
27790: LD_INT 1
27792: PLUS
27793: ST_TO_ADDR
// until p >= 60 ;
27794: LD_VAR 0 1
27798: PUSH
27799: LD_INT 60
27801: GREATEREQUAL
27802: IFFALSE 27765
// game_speed := 4 ;
27804: LD_ADDR_OWVAR 65
27808: PUSH
27809: LD_INT 4
27811: ST_TO_ADDR
// end ;
27812: PPOPN 1
27814: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27815: LD_EXP 63
27819: PUSH
27820: LD_EXP 90
27824: AND
27825: IFFALSE 27971
27827: GO 27829
27829: DISABLE
27830: LD_INT 0
27832: PPUSH
27833: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27834: LD_ADDR_VAR 0 1
27838: PUSH
27839: LD_INT 22
27841: PUSH
27842: LD_OWVAR 2
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 2
27853: PUSH
27854: LD_INT 30
27856: PUSH
27857: LD_INT 0
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 30
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: LIST
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PPUSH
27883: CALL_OW 69
27887: ST_TO_ADDR
// if not depot then
27888: LD_VAR 0 1
27892: NOT
27893: IFFALSE 27897
// exit ;
27895: GO 27971
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27897: LD_ADDR_VAR 0 2
27901: PUSH
27902: LD_VAR 0 1
27906: PUSH
27907: LD_INT 1
27909: PPUSH
27910: LD_VAR 0 1
27914: PPUSH
27915: CALL_OW 12
27919: ARRAY
27920: PPUSH
27921: CALL_OW 274
27925: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27926: LD_VAR 0 2
27930: PPUSH
27931: LD_INT 1
27933: PPUSH
27934: LD_INT 0
27936: PPUSH
27937: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27941: LD_VAR 0 2
27945: PPUSH
27946: LD_INT 2
27948: PPUSH
27949: LD_INT 0
27951: PPUSH
27952: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27956: LD_VAR 0 2
27960: PPUSH
27961: LD_INT 3
27963: PPUSH
27964: LD_INT 0
27966: PPUSH
27967: CALL_OW 277
// end ;
27971: PPOPN 2
27973: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27974: LD_EXP 63
27978: PUSH
27979: LD_EXP 91
27983: AND
27984: IFFALSE 28081
27986: GO 27988
27988: DISABLE
27989: LD_INT 0
27991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27992: LD_ADDR_VAR 0 1
27996: PUSH
27997: LD_INT 22
27999: PUSH
28000: LD_OWVAR 2
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 21
28011: PUSH
28012: LD_INT 1
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 3
28021: PUSH
28022: LD_INT 23
28024: PUSH
28025: LD_INT 0
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: LIST
28040: PPUSH
28041: CALL_OW 69
28045: ST_TO_ADDR
// if not tmp then
28046: LD_VAR 0 1
28050: NOT
28051: IFFALSE 28055
// exit ;
28053: GO 28081
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28055: LD_VAR 0 1
28059: PUSH
28060: LD_INT 1
28062: PPUSH
28063: LD_VAR 0 1
28067: PPUSH
28068: CALL_OW 12
28072: ARRAY
28073: PPUSH
28074: LD_INT 200
28076: PPUSH
28077: CALL_OW 234
// end ;
28081: PPOPN 1
28083: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28084: LD_EXP 63
28088: PUSH
28089: LD_EXP 92
28093: AND
28094: IFFALSE 28173
28096: GO 28098
28098: DISABLE
28099: LD_INT 0
28101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28102: LD_ADDR_VAR 0 1
28106: PUSH
28107: LD_INT 22
28109: PUSH
28110: LD_OWVAR 2
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 21
28121: PUSH
28122: LD_INT 2
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PPUSH
28133: CALL_OW 69
28137: ST_TO_ADDR
// if not tmp then
28138: LD_VAR 0 1
28142: NOT
28143: IFFALSE 28147
// exit ;
28145: GO 28173
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28147: LD_VAR 0 1
28151: PUSH
28152: LD_INT 1
28154: PPUSH
28155: LD_VAR 0 1
28159: PPUSH
28160: CALL_OW 12
28164: ARRAY
28165: PPUSH
28166: LD_INT 60
28168: PPUSH
28169: CALL_OW 234
// end ;
28173: PPOPN 1
28175: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28176: LD_EXP 63
28180: PUSH
28181: LD_EXP 93
28185: AND
28186: IFFALSE 28285
28188: GO 28190
28190: DISABLE
28191: LD_INT 0
28193: PPUSH
28194: PPUSH
// begin enable ;
28195: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28196: LD_ADDR_VAR 0 1
28200: PUSH
28201: LD_INT 22
28203: PUSH
28204: LD_OWVAR 2
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 61
28215: PUSH
28216: EMPTY
28217: LIST
28218: PUSH
28219: LD_INT 33
28221: PUSH
28222: LD_INT 2
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: LIST
28233: PPUSH
28234: CALL_OW 69
28238: ST_TO_ADDR
// if not tmp then
28239: LD_VAR 0 1
28243: NOT
28244: IFFALSE 28248
// exit ;
28246: GO 28285
// for i in tmp do
28248: LD_ADDR_VAR 0 2
28252: PUSH
28253: LD_VAR 0 1
28257: PUSH
28258: FOR_IN
28259: IFFALSE 28283
// if IsControledBy ( i ) then
28261: LD_VAR 0 2
28265: PPUSH
28266: CALL_OW 312
28270: IFFALSE 28281
// ComUnlink ( i ) ;
28272: LD_VAR 0 2
28276: PPUSH
28277: CALL_OW 136
28281: GO 28258
28283: POP
28284: POP
// end ;
28285: PPOPN 2
28287: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28288: LD_EXP 63
28292: PUSH
28293: LD_EXP 94
28297: AND
28298: IFFALSE 28438
28300: GO 28302
28302: DISABLE
28303: LD_INT 0
28305: PPUSH
28306: PPUSH
// begin ToLua ( displayPowell(); ) ;
28307: LD_STRING displayPowell();
28309: PPUSH
28310: CALL_OW 559
// uc_side := 0 ;
28314: LD_ADDR_OWVAR 20
28318: PUSH
28319: LD_INT 0
28321: ST_TO_ADDR
// uc_nation := 2 ;
28322: LD_ADDR_OWVAR 21
28326: PUSH
28327: LD_INT 2
28329: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28330: LD_ADDR_OWVAR 37
28334: PUSH
28335: LD_INT 14
28337: ST_TO_ADDR
// vc_engine := engine_siberite ;
28338: LD_ADDR_OWVAR 39
28342: PUSH
28343: LD_INT 3
28345: ST_TO_ADDR
// vc_control := control_apeman ;
28346: LD_ADDR_OWVAR 38
28350: PUSH
28351: LD_INT 5
28353: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28354: LD_ADDR_OWVAR 40
28358: PUSH
28359: LD_INT 29
28361: ST_TO_ADDR
// un := CreateVehicle ;
28362: LD_ADDR_VAR 0 2
28366: PUSH
28367: CALL_OW 45
28371: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28372: LD_VAR 0 2
28376: PPUSH
28377: LD_INT 1
28379: PPUSH
28380: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28384: LD_INT 35
28386: PPUSH
28387: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28391: LD_VAR 0 2
28395: PPUSH
28396: LD_INT 22
28398: PUSH
28399: LD_OWVAR 2
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PPUSH
28408: CALL_OW 69
28412: PPUSH
28413: LD_VAR 0 2
28417: PPUSH
28418: CALL_OW 74
28422: PPUSH
28423: CALL_OW 115
// until IsDead ( un ) ;
28427: LD_VAR 0 2
28431: PPUSH
28432: CALL_OW 301
28436: IFFALSE 28384
// end ;
28438: PPOPN 2
28440: END
// every 0 0$1 trigger StreamModeActive and sStu do
28441: LD_EXP 63
28445: PUSH
28446: LD_EXP 102
28450: AND
28451: IFFALSE 28467
28453: GO 28455
28455: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28456: LD_STRING displayStucuk();
28458: PPUSH
28459: CALL_OW 559
// ResetFog ;
28463: CALL_OW 335
// end ;
28467: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28468: LD_EXP 63
28472: PUSH
28473: LD_EXP 95
28477: AND
28478: IFFALSE 28619
28480: GO 28482
28482: DISABLE
28483: LD_INT 0
28485: PPUSH
28486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28487: LD_ADDR_VAR 0 2
28491: PUSH
28492: LD_INT 22
28494: PUSH
28495: LD_OWVAR 2
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 21
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PPUSH
28518: CALL_OW 69
28522: ST_TO_ADDR
// if not tmp then
28523: LD_VAR 0 2
28527: NOT
28528: IFFALSE 28532
// exit ;
28530: GO 28619
// un := tmp [ rand ( 1 , tmp ) ] ;
28532: LD_ADDR_VAR 0 1
28536: PUSH
28537: LD_VAR 0 2
28541: PUSH
28542: LD_INT 1
28544: PPUSH
28545: LD_VAR 0 2
28549: PPUSH
28550: CALL_OW 12
28554: ARRAY
28555: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28556: LD_VAR 0 1
28560: PPUSH
28561: LD_INT 0
28563: PPUSH
28564: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28568: LD_VAR 0 1
28572: PPUSH
28573: LD_OWVAR 3
28577: PUSH
28578: LD_VAR 0 1
28582: DIFF
28583: PPUSH
28584: LD_VAR 0 1
28588: PPUSH
28589: CALL_OW 74
28593: PPUSH
28594: CALL_OW 115
// wait ( 0 0$20 ) ;
28598: LD_INT 700
28600: PPUSH
28601: CALL_OW 67
// SetSide ( un , your_side ) ;
28605: LD_VAR 0 1
28609: PPUSH
28610: LD_OWVAR 2
28614: PPUSH
28615: CALL_OW 235
// end ;
28619: PPOPN 2
28621: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28622: LD_EXP 63
28626: PUSH
28627: LD_EXP 96
28631: AND
28632: IFFALSE 28738
28634: GO 28636
28636: DISABLE
28637: LD_INT 0
28639: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28640: LD_ADDR_VAR 0 1
28644: PUSH
28645: LD_INT 22
28647: PUSH
28648: LD_OWVAR 2
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 2
28659: PUSH
28660: LD_INT 30
28662: PUSH
28663: LD_INT 0
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 30
28672: PUSH
28673: LD_INT 1
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: LIST
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PPUSH
28689: CALL_OW 69
28693: ST_TO_ADDR
// if not depot then
28694: LD_VAR 0 1
28698: NOT
28699: IFFALSE 28703
// exit ;
28701: GO 28738
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28703: LD_VAR 0 1
28707: PUSH
28708: LD_INT 1
28710: ARRAY
28711: PPUSH
28712: CALL_OW 250
28716: PPUSH
28717: LD_VAR 0 1
28721: PUSH
28722: LD_INT 1
28724: ARRAY
28725: PPUSH
28726: CALL_OW 251
28730: PPUSH
28731: LD_INT 70
28733: PPUSH
28734: CALL_OW 495
// end ;
28738: PPOPN 1
28740: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28741: LD_EXP 63
28745: PUSH
28746: LD_EXP 97
28750: AND
28751: IFFALSE 28962
28753: GO 28755
28755: DISABLE
28756: LD_INT 0
28758: PPUSH
28759: PPUSH
28760: PPUSH
28761: PPUSH
28762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28763: LD_ADDR_VAR 0 5
28767: PUSH
28768: LD_INT 22
28770: PUSH
28771: LD_OWVAR 2
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 21
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PPUSH
28794: CALL_OW 69
28798: ST_TO_ADDR
// if not tmp then
28799: LD_VAR 0 5
28803: NOT
28804: IFFALSE 28808
// exit ;
28806: GO 28962
// for i in tmp do
28808: LD_ADDR_VAR 0 1
28812: PUSH
28813: LD_VAR 0 5
28817: PUSH
28818: FOR_IN
28819: IFFALSE 28960
// begin d := rand ( 0 , 5 ) ;
28821: LD_ADDR_VAR 0 4
28825: PUSH
28826: LD_INT 0
28828: PPUSH
28829: LD_INT 5
28831: PPUSH
28832: CALL_OW 12
28836: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28837: LD_ADDR_VAR 0 2
28841: PUSH
28842: LD_VAR 0 1
28846: PPUSH
28847: CALL_OW 250
28851: PPUSH
28852: LD_VAR 0 4
28856: PPUSH
28857: LD_INT 3
28859: PPUSH
28860: LD_INT 12
28862: PPUSH
28863: CALL_OW 12
28867: PPUSH
28868: CALL_OW 272
28872: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28873: LD_ADDR_VAR 0 3
28877: PUSH
28878: LD_VAR 0 1
28882: PPUSH
28883: CALL_OW 251
28887: PPUSH
28888: LD_VAR 0 4
28892: PPUSH
28893: LD_INT 3
28895: PPUSH
28896: LD_INT 12
28898: PPUSH
28899: CALL_OW 12
28903: PPUSH
28904: CALL_OW 273
28908: ST_TO_ADDR
// if ValidHex ( x , y ) then
28909: LD_VAR 0 2
28913: PPUSH
28914: LD_VAR 0 3
28918: PPUSH
28919: CALL_OW 488
28923: IFFALSE 28958
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28925: LD_VAR 0 1
28929: PPUSH
28930: LD_VAR 0 2
28934: PPUSH
28935: LD_VAR 0 3
28939: PPUSH
28940: LD_INT 3
28942: PPUSH
28943: LD_INT 6
28945: PPUSH
28946: CALL_OW 12
28950: PPUSH
28951: LD_INT 1
28953: PPUSH
28954: CALL_OW 483
// end ;
28958: GO 28818
28960: POP
28961: POP
// end ;
28962: PPOPN 5
28964: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28965: LD_EXP 63
28969: PUSH
28970: LD_EXP 98
28974: AND
28975: IFFALSE 29069
28977: GO 28979
28979: DISABLE
28980: LD_INT 0
28982: PPUSH
28983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28984: LD_ADDR_VAR 0 2
28988: PUSH
28989: LD_INT 22
28991: PUSH
28992: LD_OWVAR 2
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 32
29003: PUSH
29004: LD_INT 1
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 21
29013: PUSH
29014: LD_INT 2
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: LIST
29025: PPUSH
29026: CALL_OW 69
29030: ST_TO_ADDR
// if not tmp then
29031: LD_VAR 0 2
29035: NOT
29036: IFFALSE 29040
// exit ;
29038: GO 29069
// for i in tmp do
29040: LD_ADDR_VAR 0 1
29044: PUSH
29045: LD_VAR 0 2
29049: PUSH
29050: FOR_IN
29051: IFFALSE 29067
// SetFuel ( i , 0 ) ;
29053: LD_VAR 0 1
29057: PPUSH
29058: LD_INT 0
29060: PPUSH
29061: CALL_OW 240
29065: GO 29050
29067: POP
29068: POP
// end ;
29069: PPOPN 2
29071: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29072: LD_EXP 63
29076: PUSH
29077: LD_EXP 99
29081: AND
29082: IFFALSE 29148
29084: GO 29086
29086: DISABLE
29087: LD_INT 0
29089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29090: LD_ADDR_VAR 0 1
29094: PUSH
29095: LD_INT 22
29097: PUSH
29098: LD_OWVAR 2
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 30
29109: PUSH
29110: LD_INT 29
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PPUSH
29121: CALL_OW 69
29125: ST_TO_ADDR
// if not tmp then
29126: LD_VAR 0 1
29130: NOT
29131: IFFALSE 29135
// exit ;
29133: GO 29148
// DestroyUnit ( tmp [ 1 ] ) ;
29135: LD_VAR 0 1
29139: PUSH
29140: LD_INT 1
29142: ARRAY
29143: PPUSH
29144: CALL_OW 65
// end ;
29148: PPOPN 1
29150: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29151: LD_EXP 63
29155: PUSH
29156: LD_EXP 101
29160: AND
29161: IFFALSE 29290
29163: GO 29165
29165: DISABLE
29166: LD_INT 0
29168: PPUSH
// begin uc_side := 0 ;
29169: LD_ADDR_OWVAR 20
29173: PUSH
29174: LD_INT 0
29176: ST_TO_ADDR
// uc_nation := nation_arabian ;
29177: LD_ADDR_OWVAR 21
29181: PUSH
29182: LD_INT 2
29184: ST_TO_ADDR
// hc_gallery :=  ;
29185: LD_ADDR_OWVAR 33
29189: PUSH
29190: LD_STRING 
29192: ST_TO_ADDR
// hc_name :=  ;
29193: LD_ADDR_OWVAR 26
29197: PUSH
29198: LD_STRING 
29200: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29201: LD_INT 1
29203: PPUSH
29204: LD_INT 11
29206: PPUSH
29207: LD_INT 10
29209: PPUSH
29210: CALL_OW 380
// un := CreateHuman ;
29214: LD_ADDR_VAR 0 1
29218: PUSH
29219: CALL_OW 44
29223: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29224: LD_VAR 0 1
29228: PPUSH
29229: LD_INT 1
29231: PPUSH
29232: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29236: LD_INT 35
29238: PPUSH
29239: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29243: LD_VAR 0 1
29247: PPUSH
29248: LD_INT 22
29250: PUSH
29251: LD_OWVAR 2
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PPUSH
29260: CALL_OW 69
29264: PPUSH
29265: LD_VAR 0 1
29269: PPUSH
29270: CALL_OW 74
29274: PPUSH
29275: CALL_OW 115
// until IsDead ( un ) ;
29279: LD_VAR 0 1
29283: PPUSH
29284: CALL_OW 301
29288: IFFALSE 29236
// end ;
29290: PPOPN 1
29292: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29293: LD_EXP 63
29297: PUSH
29298: LD_EXP 103
29302: AND
29303: IFFALSE 29315
29305: GO 29307
29307: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29308: LD_STRING earthquake(getX(game), 0, 32)
29310: PPUSH
29311: CALL_OW 559
29315: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29316: LD_EXP 63
29320: PUSH
29321: LD_EXP 104
29325: AND
29326: IFFALSE 29417
29328: GO 29330
29330: DISABLE
29331: LD_INT 0
29333: PPUSH
// begin enable ;
29334: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29335: LD_ADDR_VAR 0 1
29339: PUSH
29340: LD_INT 22
29342: PUSH
29343: LD_OWVAR 2
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 21
29354: PUSH
29355: LD_INT 2
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 33
29364: PUSH
29365: LD_INT 3
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: LIST
29376: PPUSH
29377: CALL_OW 69
29381: ST_TO_ADDR
// if not tmp then
29382: LD_VAR 0 1
29386: NOT
29387: IFFALSE 29391
// exit ;
29389: GO 29417
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29391: LD_VAR 0 1
29395: PUSH
29396: LD_INT 1
29398: PPUSH
29399: LD_VAR 0 1
29403: PPUSH
29404: CALL_OW 12
29408: ARRAY
29409: PPUSH
29410: LD_INT 1
29412: PPUSH
29413: CALL_OW 234
// end ;
29417: PPOPN 1
29419: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29420: LD_EXP 63
29424: PUSH
29425: LD_EXP 105
29429: AND
29430: IFFALSE 29571
29432: GO 29434
29434: DISABLE
29435: LD_INT 0
29437: PPUSH
29438: PPUSH
29439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29440: LD_ADDR_VAR 0 3
29444: PUSH
29445: LD_INT 22
29447: PUSH
29448: LD_OWVAR 2
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 25
29459: PUSH
29460: LD_INT 1
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PPUSH
29471: CALL_OW 69
29475: ST_TO_ADDR
// if not tmp then
29476: LD_VAR 0 3
29480: NOT
29481: IFFALSE 29485
// exit ;
29483: GO 29571
// un := tmp [ rand ( 1 , tmp ) ] ;
29485: LD_ADDR_VAR 0 2
29489: PUSH
29490: LD_VAR 0 3
29494: PUSH
29495: LD_INT 1
29497: PPUSH
29498: LD_VAR 0 3
29502: PPUSH
29503: CALL_OW 12
29507: ARRAY
29508: ST_TO_ADDR
// if Crawls ( un ) then
29509: LD_VAR 0 2
29513: PPUSH
29514: CALL_OW 318
29518: IFFALSE 29529
// ComWalk ( un ) ;
29520: LD_VAR 0 2
29524: PPUSH
29525: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29529: LD_VAR 0 2
29533: PPUSH
29534: LD_INT 9
29536: PPUSH
29537: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29541: LD_INT 28
29543: PPUSH
29544: LD_OWVAR 2
29548: PPUSH
29549: LD_INT 2
29551: PPUSH
29552: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29556: LD_INT 29
29558: PPUSH
29559: LD_OWVAR 2
29563: PPUSH
29564: LD_INT 2
29566: PPUSH
29567: CALL_OW 322
// end ;
29571: PPOPN 3
29573: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29574: LD_EXP 63
29578: PUSH
29579: LD_EXP 106
29583: AND
29584: IFFALSE 29695
29586: GO 29588
29588: DISABLE
29589: LD_INT 0
29591: PPUSH
29592: PPUSH
29593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29594: LD_ADDR_VAR 0 3
29598: PUSH
29599: LD_INT 22
29601: PUSH
29602: LD_OWVAR 2
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 25
29613: PUSH
29614: LD_INT 1
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PPUSH
29625: CALL_OW 69
29629: ST_TO_ADDR
// if not tmp then
29630: LD_VAR 0 3
29634: NOT
29635: IFFALSE 29639
// exit ;
29637: GO 29695
// un := tmp [ rand ( 1 , tmp ) ] ;
29639: LD_ADDR_VAR 0 2
29643: PUSH
29644: LD_VAR 0 3
29648: PUSH
29649: LD_INT 1
29651: PPUSH
29652: LD_VAR 0 3
29656: PPUSH
29657: CALL_OW 12
29661: ARRAY
29662: ST_TO_ADDR
// if Crawls ( un ) then
29663: LD_VAR 0 2
29667: PPUSH
29668: CALL_OW 318
29672: IFFALSE 29683
// ComWalk ( un ) ;
29674: LD_VAR 0 2
29678: PPUSH
29679: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29683: LD_VAR 0 2
29687: PPUSH
29688: LD_INT 8
29690: PPUSH
29691: CALL_OW 336
// end ;
29695: PPOPN 3
29697: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29698: LD_EXP 63
29702: PUSH
29703: LD_EXP 107
29707: AND
29708: IFFALSE 29852
29710: GO 29712
29712: DISABLE
29713: LD_INT 0
29715: PPUSH
29716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29717: LD_ADDR_VAR 0 2
29721: PUSH
29722: LD_INT 22
29724: PUSH
29725: LD_OWVAR 2
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 21
29736: PUSH
29737: LD_INT 2
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: LD_INT 34
29749: PUSH
29750: LD_INT 12
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 34
29759: PUSH
29760: LD_INT 51
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 34
29769: PUSH
29770: LD_INT 32
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: LIST
29787: PPUSH
29788: CALL_OW 69
29792: ST_TO_ADDR
// if not tmp then
29793: LD_VAR 0 2
29797: NOT
29798: IFFALSE 29802
// exit ;
29800: GO 29852
// for i in tmp do
29802: LD_ADDR_VAR 0 1
29806: PUSH
29807: LD_VAR 0 2
29811: PUSH
29812: FOR_IN
29813: IFFALSE 29850
// if GetCargo ( i , mat_artifact ) = 0 then
29815: LD_VAR 0 1
29819: PPUSH
29820: LD_INT 4
29822: PPUSH
29823: CALL_OW 289
29827: PUSH
29828: LD_INT 0
29830: EQUAL
29831: IFFALSE 29848
// SetCargo ( i , mat_siberit , 100 ) ;
29833: LD_VAR 0 1
29837: PPUSH
29838: LD_INT 3
29840: PPUSH
29841: LD_INT 100
29843: PPUSH
29844: CALL_OW 290
29848: GO 29812
29850: POP
29851: POP
// end ;
29852: PPOPN 2
29854: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29855: LD_EXP 63
29859: PUSH
29860: LD_EXP 108
29864: AND
29865: IFFALSE 30048
29867: GO 29869
29869: DISABLE
29870: LD_INT 0
29872: PPUSH
29873: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29874: LD_ADDR_VAR 0 2
29878: PUSH
29879: LD_INT 22
29881: PUSH
29882: LD_OWVAR 2
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PPUSH
29891: CALL_OW 69
29895: ST_TO_ADDR
// if not tmp then
29896: LD_VAR 0 2
29900: NOT
29901: IFFALSE 29905
// exit ;
29903: GO 30048
// for i := 1 to 2 do
29905: LD_ADDR_VAR 0 1
29909: PUSH
29910: DOUBLE
29911: LD_INT 1
29913: DEC
29914: ST_TO_ADDR
29915: LD_INT 2
29917: PUSH
29918: FOR_TO
29919: IFFALSE 30046
// begin uc_side := your_side ;
29921: LD_ADDR_OWVAR 20
29925: PUSH
29926: LD_OWVAR 2
29930: ST_TO_ADDR
// uc_nation := nation_american ;
29931: LD_ADDR_OWVAR 21
29935: PUSH
29936: LD_INT 1
29938: ST_TO_ADDR
// vc_chassis := us_morphling ;
29939: LD_ADDR_OWVAR 37
29943: PUSH
29944: LD_INT 5
29946: ST_TO_ADDR
// vc_engine := engine_siberite ;
29947: LD_ADDR_OWVAR 39
29951: PUSH
29952: LD_INT 3
29954: ST_TO_ADDR
// vc_control := control_computer ;
29955: LD_ADDR_OWVAR 38
29959: PUSH
29960: LD_INT 3
29962: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29963: LD_ADDR_OWVAR 40
29967: PUSH
29968: LD_INT 10
29970: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29971: LD_VAR 0 2
29975: PUSH
29976: LD_INT 1
29978: ARRAY
29979: PPUSH
29980: CALL_OW 310
29984: NOT
29985: IFFALSE 30032
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29987: CALL_OW 45
29991: PPUSH
29992: LD_VAR 0 2
29996: PUSH
29997: LD_INT 1
29999: ARRAY
30000: PPUSH
30001: CALL_OW 250
30005: PPUSH
30006: LD_VAR 0 2
30010: PUSH
30011: LD_INT 1
30013: ARRAY
30014: PPUSH
30015: CALL_OW 251
30019: PPUSH
30020: LD_INT 12
30022: PPUSH
30023: LD_INT 1
30025: PPUSH
30026: CALL_OW 50
30030: GO 30044
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30032: CALL_OW 45
30036: PPUSH
30037: LD_INT 1
30039: PPUSH
30040: CALL_OW 51
// end ;
30044: GO 29918
30046: POP
30047: POP
// end ;
30048: PPOPN 2
30050: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30051: LD_EXP 63
30055: PUSH
30056: LD_EXP 109
30060: AND
30061: IFFALSE 30283
30063: GO 30065
30065: DISABLE
30066: LD_INT 0
30068: PPUSH
30069: PPUSH
30070: PPUSH
30071: PPUSH
30072: PPUSH
30073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30074: LD_ADDR_VAR 0 6
30078: PUSH
30079: LD_INT 22
30081: PUSH
30082: LD_OWVAR 2
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 21
30093: PUSH
30094: LD_INT 1
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 3
30103: PUSH
30104: LD_INT 23
30106: PUSH
30107: LD_INT 0
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: LIST
30122: PPUSH
30123: CALL_OW 69
30127: ST_TO_ADDR
// if not tmp then
30128: LD_VAR 0 6
30132: NOT
30133: IFFALSE 30137
// exit ;
30135: GO 30283
// s1 := rand ( 1 , 4 ) ;
30137: LD_ADDR_VAR 0 2
30141: PUSH
30142: LD_INT 1
30144: PPUSH
30145: LD_INT 4
30147: PPUSH
30148: CALL_OW 12
30152: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30153: LD_ADDR_VAR 0 4
30157: PUSH
30158: LD_VAR 0 6
30162: PUSH
30163: LD_INT 1
30165: ARRAY
30166: PPUSH
30167: LD_VAR 0 2
30171: PPUSH
30172: CALL_OW 259
30176: ST_TO_ADDR
// if s1 = 1 then
30177: LD_VAR 0 2
30181: PUSH
30182: LD_INT 1
30184: EQUAL
30185: IFFALSE 30205
// s2 := rand ( 2 , 4 ) else
30187: LD_ADDR_VAR 0 3
30191: PUSH
30192: LD_INT 2
30194: PPUSH
30195: LD_INT 4
30197: PPUSH
30198: CALL_OW 12
30202: ST_TO_ADDR
30203: GO 30213
// s2 := 1 ;
30205: LD_ADDR_VAR 0 3
30209: PUSH
30210: LD_INT 1
30212: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30213: LD_ADDR_VAR 0 5
30217: PUSH
30218: LD_VAR 0 6
30222: PUSH
30223: LD_INT 1
30225: ARRAY
30226: PPUSH
30227: LD_VAR 0 3
30231: PPUSH
30232: CALL_OW 259
30236: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30237: LD_VAR 0 6
30241: PUSH
30242: LD_INT 1
30244: ARRAY
30245: PPUSH
30246: LD_VAR 0 2
30250: PPUSH
30251: LD_VAR 0 5
30255: PPUSH
30256: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30260: LD_VAR 0 6
30264: PUSH
30265: LD_INT 1
30267: ARRAY
30268: PPUSH
30269: LD_VAR 0 3
30273: PPUSH
30274: LD_VAR 0 4
30278: PPUSH
30279: CALL_OW 237
// end ;
30283: PPOPN 6
30285: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30286: LD_EXP 63
30290: PUSH
30291: LD_EXP 110
30295: AND
30296: IFFALSE 30375
30298: GO 30300
30300: DISABLE
30301: LD_INT 0
30303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30304: LD_ADDR_VAR 0 1
30308: PUSH
30309: LD_INT 22
30311: PUSH
30312: LD_OWVAR 2
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 30
30323: PUSH
30324: LD_INT 3
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PPUSH
30335: CALL_OW 69
30339: ST_TO_ADDR
// if not tmp then
30340: LD_VAR 0 1
30344: NOT
30345: IFFALSE 30349
// exit ;
30347: GO 30375
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30349: LD_VAR 0 1
30353: PUSH
30354: LD_INT 1
30356: PPUSH
30357: LD_VAR 0 1
30361: PPUSH
30362: CALL_OW 12
30366: ARRAY
30367: PPUSH
30368: LD_INT 1
30370: PPUSH
30371: CALL_OW 234
// end ;
30375: PPOPN 1
30377: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30378: LD_EXP 63
30382: PUSH
30383: LD_EXP 111
30387: AND
30388: IFFALSE 30500
30390: GO 30392
30392: DISABLE
30393: LD_INT 0
30395: PPUSH
30396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30397: LD_ADDR_VAR 0 2
30401: PUSH
30402: LD_INT 22
30404: PUSH
30405: LD_OWVAR 2
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 2
30416: PUSH
30417: LD_INT 30
30419: PUSH
30420: LD_INT 27
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 30
30429: PUSH
30430: LD_INT 26
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 30
30439: PUSH
30440: LD_INT 28
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PPUSH
30457: CALL_OW 69
30461: ST_TO_ADDR
// if not tmp then
30462: LD_VAR 0 2
30466: NOT
30467: IFFALSE 30471
// exit ;
30469: GO 30500
// for i in tmp do
30471: LD_ADDR_VAR 0 1
30475: PUSH
30476: LD_VAR 0 2
30480: PUSH
30481: FOR_IN
30482: IFFALSE 30498
// SetLives ( i , 1 ) ;
30484: LD_VAR 0 1
30488: PPUSH
30489: LD_INT 1
30491: PPUSH
30492: CALL_OW 234
30496: GO 30481
30498: POP
30499: POP
// end ;
30500: PPOPN 2
30502: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30503: LD_EXP 63
30507: PUSH
30508: LD_EXP 112
30512: AND
30513: IFFALSE 30800
30515: GO 30517
30517: DISABLE
30518: LD_INT 0
30520: PPUSH
30521: PPUSH
30522: PPUSH
// begin i := rand ( 1 , 7 ) ;
30523: LD_ADDR_VAR 0 1
30527: PUSH
30528: LD_INT 1
30530: PPUSH
30531: LD_INT 7
30533: PPUSH
30534: CALL_OW 12
30538: ST_TO_ADDR
// case i of 1 :
30539: LD_VAR 0 1
30543: PUSH
30544: LD_INT 1
30546: DOUBLE
30547: EQUAL
30548: IFTRUE 30552
30550: GO 30562
30552: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30553: LD_STRING earthquake(getX(game), 0, 32)
30555: PPUSH
30556: CALL_OW 559
30560: GO 30800
30562: LD_INT 2
30564: DOUBLE
30565: EQUAL
30566: IFTRUE 30570
30568: GO 30584
30570: POP
// begin ToLua ( displayStucuk(); ) ;
30571: LD_STRING displayStucuk();
30573: PPUSH
30574: CALL_OW 559
// ResetFog ;
30578: CALL_OW 335
// end ; 3 :
30582: GO 30800
30584: LD_INT 3
30586: DOUBLE
30587: EQUAL
30588: IFTRUE 30592
30590: GO 30696
30592: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30593: LD_ADDR_VAR 0 2
30597: PUSH
30598: LD_INT 22
30600: PUSH
30601: LD_OWVAR 2
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 25
30612: PUSH
30613: LD_INT 1
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PPUSH
30624: CALL_OW 69
30628: ST_TO_ADDR
// if not tmp then
30629: LD_VAR 0 2
30633: NOT
30634: IFFALSE 30638
// exit ;
30636: GO 30800
// un := tmp [ rand ( 1 , tmp ) ] ;
30638: LD_ADDR_VAR 0 3
30642: PUSH
30643: LD_VAR 0 2
30647: PUSH
30648: LD_INT 1
30650: PPUSH
30651: LD_VAR 0 2
30655: PPUSH
30656: CALL_OW 12
30660: ARRAY
30661: ST_TO_ADDR
// if Crawls ( un ) then
30662: LD_VAR 0 3
30666: PPUSH
30667: CALL_OW 318
30671: IFFALSE 30682
// ComWalk ( un ) ;
30673: LD_VAR 0 3
30677: PPUSH
30678: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30682: LD_VAR 0 3
30686: PPUSH
30687: LD_INT 8
30689: PPUSH
30690: CALL_OW 336
// end ; 4 :
30694: GO 30800
30696: LD_INT 4
30698: DOUBLE
30699: EQUAL
30700: IFTRUE 30704
30702: GO 30778
30704: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30705: LD_ADDR_VAR 0 2
30709: PUSH
30710: LD_INT 22
30712: PUSH
30713: LD_OWVAR 2
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 30
30724: PUSH
30725: LD_INT 29
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PPUSH
30736: CALL_OW 69
30740: ST_TO_ADDR
// if not tmp then
30741: LD_VAR 0 2
30745: NOT
30746: IFFALSE 30750
// exit ;
30748: GO 30800
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30750: LD_VAR 0 2
30754: PUSH
30755: LD_INT 1
30757: ARRAY
30758: PPUSH
30759: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30763: LD_VAR 0 2
30767: PUSH
30768: LD_INT 1
30770: ARRAY
30771: PPUSH
30772: CALL_OW 65
// end ; 5 .. 7 :
30776: GO 30800
30778: LD_INT 5
30780: DOUBLE
30781: GREATEREQUAL
30782: IFFALSE 30790
30784: LD_INT 7
30786: DOUBLE
30787: LESSEQUAL
30788: IFTRUE 30792
30790: GO 30799
30792: POP
// StreamSibBomb ; end ;
30793: CALL 27037 0 0
30797: GO 30800
30799: POP
// end ;
30800: PPOPN 3
30802: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30803: LD_EXP 63
30807: PUSH
30808: LD_EXP 113
30812: AND
30813: IFFALSE 30969
30815: GO 30817
30817: DISABLE
30818: LD_INT 0
30820: PPUSH
30821: PPUSH
30822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30823: LD_ADDR_VAR 0 2
30827: PUSH
30828: LD_INT 81
30830: PUSH
30831: LD_OWVAR 2
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 2
30842: PUSH
30843: LD_INT 21
30845: PUSH
30846: LD_INT 1
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 21
30855: PUSH
30856: LD_INT 2
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: LIST
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PPUSH
30872: CALL_OW 69
30876: ST_TO_ADDR
// if not tmp then
30877: LD_VAR 0 2
30881: NOT
30882: IFFALSE 30886
// exit ;
30884: GO 30969
// p := 0 ;
30886: LD_ADDR_VAR 0 3
30890: PUSH
30891: LD_INT 0
30893: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30894: LD_INT 35
30896: PPUSH
30897: CALL_OW 67
// p := p + 1 ;
30901: LD_ADDR_VAR 0 3
30905: PUSH
30906: LD_VAR 0 3
30910: PUSH
30911: LD_INT 1
30913: PLUS
30914: ST_TO_ADDR
// for i in tmp do
30915: LD_ADDR_VAR 0 1
30919: PUSH
30920: LD_VAR 0 2
30924: PUSH
30925: FOR_IN
30926: IFFALSE 30957
// if GetLives ( i ) < 1000 then
30928: LD_VAR 0 1
30932: PPUSH
30933: CALL_OW 256
30937: PUSH
30938: LD_INT 1000
30940: LESS
30941: IFFALSE 30955
// SetLives ( i , 1000 ) ;
30943: LD_VAR 0 1
30947: PPUSH
30948: LD_INT 1000
30950: PPUSH
30951: CALL_OW 234
30955: GO 30925
30957: POP
30958: POP
// until p > 20 ;
30959: LD_VAR 0 3
30963: PUSH
30964: LD_INT 20
30966: GREATER
30967: IFFALSE 30894
// end ;
30969: PPOPN 3
30971: END
// every 0 0$1 trigger StreamModeActive and sTime do
30972: LD_EXP 63
30976: PUSH
30977: LD_EXP 114
30981: AND
30982: IFFALSE 31017
30984: GO 30986
30986: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30987: LD_INT 28
30989: PPUSH
30990: LD_OWVAR 2
30994: PPUSH
30995: LD_INT 2
30997: PPUSH
30998: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31002: LD_INT 30
31004: PPUSH
31005: LD_OWVAR 2
31009: PPUSH
31010: LD_INT 2
31012: PPUSH
31013: CALL_OW 322
// end ;
31017: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31018: LD_EXP 63
31022: PUSH
31023: LD_EXP 115
31027: AND
31028: IFFALSE 31149
31030: GO 31032
31032: DISABLE
31033: LD_INT 0
31035: PPUSH
31036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31037: LD_ADDR_VAR 0 2
31041: PUSH
31042: LD_INT 22
31044: PUSH
31045: LD_OWVAR 2
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 21
31056: PUSH
31057: LD_INT 1
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 3
31066: PUSH
31067: LD_INT 23
31069: PUSH
31070: LD_INT 0
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: LIST
31085: PPUSH
31086: CALL_OW 69
31090: ST_TO_ADDR
// if not tmp then
31091: LD_VAR 0 2
31095: NOT
31096: IFFALSE 31100
// exit ;
31098: GO 31149
// for i in tmp do
31100: LD_ADDR_VAR 0 1
31104: PUSH
31105: LD_VAR 0 2
31109: PUSH
31110: FOR_IN
31111: IFFALSE 31147
// begin if Crawls ( i ) then
31113: LD_VAR 0 1
31117: PPUSH
31118: CALL_OW 318
31122: IFFALSE 31133
// ComWalk ( i ) ;
31124: LD_VAR 0 1
31128: PPUSH
31129: CALL_OW 138
// SetClass ( i , 2 ) ;
31133: LD_VAR 0 1
31137: PPUSH
31138: LD_INT 2
31140: PPUSH
31141: CALL_OW 336
// end ;
31145: GO 31110
31147: POP
31148: POP
// end ;
31149: PPOPN 2
31151: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31152: LD_EXP 63
31156: PUSH
31157: LD_EXP 116
31161: AND
31162: IFFALSE 31450
31164: GO 31166
31166: DISABLE
31167: LD_INT 0
31169: PPUSH
31170: PPUSH
31171: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31172: LD_OWVAR 2
31176: PPUSH
31177: LD_INT 9
31179: PPUSH
31180: LD_INT 1
31182: PPUSH
31183: LD_INT 1
31185: PPUSH
31186: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31190: LD_INT 9
31192: PPUSH
31193: LD_OWVAR 2
31197: PPUSH
31198: CALL_OW 343
// uc_side := 9 ;
31202: LD_ADDR_OWVAR 20
31206: PUSH
31207: LD_INT 9
31209: ST_TO_ADDR
// uc_nation := 2 ;
31210: LD_ADDR_OWVAR 21
31214: PUSH
31215: LD_INT 2
31217: ST_TO_ADDR
// hc_name := Dark Warrior ;
31218: LD_ADDR_OWVAR 26
31222: PUSH
31223: LD_STRING Dark Warrior
31225: ST_TO_ADDR
// hc_gallery :=  ;
31226: LD_ADDR_OWVAR 33
31230: PUSH
31231: LD_STRING 
31233: ST_TO_ADDR
// hc_noskilllimit := true ;
31234: LD_ADDR_OWVAR 76
31238: PUSH
31239: LD_INT 1
31241: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31242: LD_ADDR_OWVAR 31
31246: PUSH
31247: LD_INT 30
31249: PUSH
31250: LD_INT 30
31252: PUSH
31253: LD_INT 30
31255: PUSH
31256: LD_INT 30
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: ST_TO_ADDR
// un := CreateHuman ;
31265: LD_ADDR_VAR 0 3
31269: PUSH
31270: CALL_OW 44
31274: ST_TO_ADDR
// hc_noskilllimit := false ;
31275: LD_ADDR_OWVAR 76
31279: PUSH
31280: LD_INT 0
31282: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31283: LD_VAR 0 3
31287: PPUSH
31288: LD_INT 1
31290: PPUSH
31291: CALL_OW 51
// ToLua ( playRanger() ) ;
31295: LD_STRING playRanger()
31297: PPUSH
31298: CALL_OW 559
// p := 0 ;
31302: LD_ADDR_VAR 0 2
31306: PUSH
31307: LD_INT 0
31309: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31310: LD_INT 35
31312: PPUSH
31313: CALL_OW 67
// p := p + 1 ;
31317: LD_ADDR_VAR 0 2
31321: PUSH
31322: LD_VAR 0 2
31326: PUSH
31327: LD_INT 1
31329: PLUS
31330: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31331: LD_VAR 0 3
31335: PPUSH
31336: CALL_OW 256
31340: PUSH
31341: LD_INT 1000
31343: LESS
31344: IFFALSE 31358
// SetLives ( un , 1000 ) ;
31346: LD_VAR 0 3
31350: PPUSH
31351: LD_INT 1000
31353: PPUSH
31354: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31358: LD_VAR 0 3
31362: PPUSH
31363: LD_INT 81
31365: PUSH
31366: LD_OWVAR 2
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 91
31377: PUSH
31378: LD_VAR 0 3
31382: PUSH
31383: LD_INT 30
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: LIST
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PPUSH
31395: CALL_OW 69
31399: PPUSH
31400: LD_VAR 0 3
31404: PPUSH
31405: CALL_OW 74
31409: PPUSH
31410: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31414: LD_VAR 0 2
31418: PUSH
31419: LD_INT 80
31421: GREATER
31422: PUSH
31423: LD_VAR 0 3
31427: PPUSH
31428: CALL_OW 301
31432: OR
31433: IFFALSE 31310
// if un then
31435: LD_VAR 0 3
31439: IFFALSE 31450
// RemoveUnit ( un ) ;
31441: LD_VAR 0 3
31445: PPUSH
31446: CALL_OW 64
// end ;
31450: PPOPN 3
31452: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31453: LD_EXP 117
31457: IFFALSE 31573
31459: GO 31461
31461: DISABLE
31462: LD_INT 0
31464: PPUSH
31465: PPUSH
31466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31467: LD_ADDR_VAR 0 2
31471: PUSH
31472: LD_INT 81
31474: PUSH
31475: LD_OWVAR 2
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 21
31486: PUSH
31487: LD_INT 1
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PPUSH
31498: CALL_OW 69
31502: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31503: LD_STRING playComputer()
31505: PPUSH
31506: CALL_OW 559
// if not tmp then
31510: LD_VAR 0 2
31514: NOT
31515: IFFALSE 31519
// exit ;
31517: GO 31573
// for i in tmp do
31519: LD_ADDR_VAR 0 1
31523: PUSH
31524: LD_VAR 0 2
31528: PUSH
31529: FOR_IN
31530: IFFALSE 31571
// for j := 1 to 4 do
31532: LD_ADDR_VAR 0 3
31536: PUSH
31537: DOUBLE
31538: LD_INT 1
31540: DEC
31541: ST_TO_ADDR
31542: LD_INT 4
31544: PUSH
31545: FOR_TO
31546: IFFALSE 31567
// SetSkill ( i , j , 10 ) ;
31548: LD_VAR 0 1
31552: PPUSH
31553: LD_VAR 0 3
31557: PPUSH
31558: LD_INT 10
31560: PPUSH
31561: CALL_OW 237
31565: GO 31545
31567: POP
31568: POP
31569: GO 31529
31571: POP
31572: POP
// end ;
31573: PPOPN 3
31575: END
// every 0 0$1 trigger s30 do var i , tmp ;
31576: LD_EXP 118
31580: IFFALSE 31649
31582: GO 31584
31584: DISABLE
31585: LD_INT 0
31587: PPUSH
31588: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31589: LD_ADDR_VAR 0 2
31593: PUSH
31594: LD_INT 22
31596: PUSH
31597: LD_OWVAR 2
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PPUSH
31606: CALL_OW 69
31610: ST_TO_ADDR
// if not tmp then
31611: LD_VAR 0 2
31615: NOT
31616: IFFALSE 31620
// exit ;
31618: GO 31649
// for i in tmp do
31620: LD_ADDR_VAR 0 1
31624: PUSH
31625: LD_VAR 0 2
31629: PUSH
31630: FOR_IN
31631: IFFALSE 31647
// SetLives ( i , 300 ) ;
31633: LD_VAR 0 1
31637: PPUSH
31638: LD_INT 300
31640: PPUSH
31641: CALL_OW 234
31645: GO 31630
31647: POP
31648: POP
// end ;
31649: PPOPN 2
31651: END
// every 0 0$1 trigger s60 do var i , tmp ;
31652: LD_EXP 119
31656: IFFALSE 31725
31658: GO 31660
31660: DISABLE
31661: LD_INT 0
31663: PPUSH
31664: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31665: LD_ADDR_VAR 0 2
31669: PUSH
31670: LD_INT 22
31672: PUSH
31673: LD_OWVAR 2
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PPUSH
31682: CALL_OW 69
31686: ST_TO_ADDR
// if not tmp then
31687: LD_VAR 0 2
31691: NOT
31692: IFFALSE 31696
// exit ;
31694: GO 31725
// for i in tmp do
31696: LD_ADDR_VAR 0 1
31700: PUSH
31701: LD_VAR 0 2
31705: PUSH
31706: FOR_IN
31707: IFFALSE 31723
// SetLives ( i , 600 ) ;
31709: LD_VAR 0 1
31713: PPUSH
31714: LD_INT 600
31716: PPUSH
31717: CALL_OW 234
31721: GO 31706
31723: POP
31724: POP
// end ;
31725: PPOPN 2
31727: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31728: LD_INT 0
31730: PPUSH
// case cmd of 301 :
31731: LD_VAR 0 1
31735: PUSH
31736: LD_INT 301
31738: DOUBLE
31739: EQUAL
31740: IFTRUE 31744
31742: GO 31776
31744: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31745: LD_VAR 0 6
31749: PPUSH
31750: LD_VAR 0 7
31754: PPUSH
31755: LD_VAR 0 8
31759: PPUSH
31760: LD_VAR 0 4
31764: PPUSH
31765: LD_VAR 0 5
31769: PPUSH
31770: CALL 32977 0 5
31774: GO 31897
31776: LD_INT 302
31778: DOUBLE
31779: EQUAL
31780: IFTRUE 31784
31782: GO 31821
31784: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31785: LD_VAR 0 6
31789: PPUSH
31790: LD_VAR 0 7
31794: PPUSH
31795: LD_VAR 0 8
31799: PPUSH
31800: LD_VAR 0 9
31804: PPUSH
31805: LD_VAR 0 4
31809: PPUSH
31810: LD_VAR 0 5
31814: PPUSH
31815: CALL 33068 0 6
31819: GO 31897
31821: LD_INT 303
31823: DOUBLE
31824: EQUAL
31825: IFTRUE 31829
31827: GO 31866
31829: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31830: LD_VAR 0 6
31834: PPUSH
31835: LD_VAR 0 7
31839: PPUSH
31840: LD_VAR 0 8
31844: PPUSH
31845: LD_VAR 0 9
31849: PPUSH
31850: LD_VAR 0 4
31854: PPUSH
31855: LD_VAR 0 5
31859: PPUSH
31860: CALL 31902 0 6
31864: GO 31897
31866: LD_INT 304
31868: DOUBLE
31869: EQUAL
31870: IFTRUE 31874
31872: GO 31896
31874: POP
// hHackTeleport ( unit , x , y ) ; end ;
31875: LD_VAR 0 2
31879: PPUSH
31880: LD_VAR 0 4
31884: PPUSH
31885: LD_VAR 0 5
31889: PPUSH
31890: CALL 33661 0 3
31894: GO 31897
31896: POP
// end ;
31897: LD_VAR 0 12
31901: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31902: LD_INT 0
31904: PPUSH
31905: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31906: LD_VAR 0 1
31910: PUSH
31911: LD_INT 1
31913: LESS
31914: PUSH
31915: LD_VAR 0 1
31919: PUSH
31920: LD_INT 3
31922: GREATER
31923: OR
31924: PUSH
31925: LD_VAR 0 5
31929: PPUSH
31930: LD_VAR 0 6
31934: PPUSH
31935: CALL_OW 428
31939: OR
31940: IFFALSE 31944
// exit ;
31942: GO 32664
// uc_side := your_side ;
31944: LD_ADDR_OWVAR 20
31948: PUSH
31949: LD_OWVAR 2
31953: ST_TO_ADDR
// uc_nation := nation ;
31954: LD_ADDR_OWVAR 21
31958: PUSH
31959: LD_VAR 0 1
31963: ST_TO_ADDR
// bc_level = 1 ;
31964: LD_ADDR_OWVAR 43
31968: PUSH
31969: LD_INT 1
31971: ST_TO_ADDR
// case btype of 1 :
31972: LD_VAR 0 2
31976: PUSH
31977: LD_INT 1
31979: DOUBLE
31980: EQUAL
31981: IFTRUE 31985
31983: GO 31996
31985: POP
// bc_type := b_depot ; 2 :
31986: LD_ADDR_OWVAR 42
31990: PUSH
31991: LD_INT 0
31993: ST_TO_ADDR
31994: GO 32608
31996: LD_INT 2
31998: DOUBLE
31999: EQUAL
32000: IFTRUE 32004
32002: GO 32015
32004: POP
// bc_type := b_warehouse ; 3 :
32005: LD_ADDR_OWVAR 42
32009: PUSH
32010: LD_INT 1
32012: ST_TO_ADDR
32013: GO 32608
32015: LD_INT 3
32017: DOUBLE
32018: EQUAL
32019: IFTRUE 32023
32021: GO 32034
32023: POP
// bc_type := b_lab ; 4 .. 9 :
32024: LD_ADDR_OWVAR 42
32028: PUSH
32029: LD_INT 6
32031: ST_TO_ADDR
32032: GO 32608
32034: LD_INT 4
32036: DOUBLE
32037: GREATEREQUAL
32038: IFFALSE 32046
32040: LD_INT 9
32042: DOUBLE
32043: LESSEQUAL
32044: IFTRUE 32048
32046: GO 32100
32048: POP
// begin bc_type := b_lab_half ;
32049: LD_ADDR_OWVAR 42
32053: PUSH
32054: LD_INT 7
32056: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32057: LD_ADDR_OWVAR 44
32061: PUSH
32062: LD_INT 10
32064: PUSH
32065: LD_INT 11
32067: PUSH
32068: LD_INT 12
32070: PUSH
32071: LD_INT 15
32073: PUSH
32074: LD_INT 14
32076: PUSH
32077: LD_INT 13
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: PUSH
32088: LD_VAR 0 2
32092: PUSH
32093: LD_INT 3
32095: MINUS
32096: ARRAY
32097: ST_TO_ADDR
// end ; 10 .. 13 :
32098: GO 32608
32100: LD_INT 10
32102: DOUBLE
32103: GREATEREQUAL
32104: IFFALSE 32112
32106: LD_INT 13
32108: DOUBLE
32109: LESSEQUAL
32110: IFTRUE 32114
32112: GO 32191
32114: POP
// begin bc_type := b_lab_full ;
32115: LD_ADDR_OWVAR 42
32119: PUSH
32120: LD_INT 8
32122: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32123: LD_ADDR_OWVAR 44
32127: PUSH
32128: LD_INT 10
32130: PUSH
32131: LD_INT 12
32133: PUSH
32134: LD_INT 14
32136: PUSH
32137: LD_INT 13
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: PUSH
32146: LD_VAR 0 2
32150: PUSH
32151: LD_INT 9
32153: MINUS
32154: ARRAY
32155: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32156: LD_ADDR_OWVAR 45
32160: PUSH
32161: LD_INT 11
32163: PUSH
32164: LD_INT 15
32166: PUSH
32167: LD_INT 12
32169: PUSH
32170: LD_INT 15
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: PUSH
32179: LD_VAR 0 2
32183: PUSH
32184: LD_INT 9
32186: MINUS
32187: ARRAY
32188: ST_TO_ADDR
// end ; 14 :
32189: GO 32608
32191: LD_INT 14
32193: DOUBLE
32194: EQUAL
32195: IFTRUE 32199
32197: GO 32210
32199: POP
// bc_type := b_workshop ; 15 :
32200: LD_ADDR_OWVAR 42
32204: PUSH
32205: LD_INT 2
32207: ST_TO_ADDR
32208: GO 32608
32210: LD_INT 15
32212: DOUBLE
32213: EQUAL
32214: IFTRUE 32218
32216: GO 32229
32218: POP
// bc_type := b_factory ; 16 :
32219: LD_ADDR_OWVAR 42
32223: PUSH
32224: LD_INT 3
32226: ST_TO_ADDR
32227: GO 32608
32229: LD_INT 16
32231: DOUBLE
32232: EQUAL
32233: IFTRUE 32237
32235: GO 32248
32237: POP
// bc_type := b_ext_gun ; 17 :
32238: LD_ADDR_OWVAR 42
32242: PUSH
32243: LD_INT 17
32245: ST_TO_ADDR
32246: GO 32608
32248: LD_INT 17
32250: DOUBLE
32251: EQUAL
32252: IFTRUE 32256
32254: GO 32284
32256: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32257: LD_ADDR_OWVAR 42
32261: PUSH
32262: LD_INT 19
32264: PUSH
32265: LD_INT 23
32267: PUSH
32268: LD_INT 19
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: LIST
32275: PUSH
32276: LD_VAR 0 1
32280: ARRAY
32281: ST_TO_ADDR
32282: GO 32608
32284: LD_INT 18
32286: DOUBLE
32287: EQUAL
32288: IFTRUE 32292
32290: GO 32303
32292: POP
// bc_type := b_ext_radar ; 19 :
32293: LD_ADDR_OWVAR 42
32297: PUSH
32298: LD_INT 20
32300: ST_TO_ADDR
32301: GO 32608
32303: LD_INT 19
32305: DOUBLE
32306: EQUAL
32307: IFTRUE 32311
32309: GO 32322
32311: POP
// bc_type := b_ext_radio ; 20 :
32312: LD_ADDR_OWVAR 42
32316: PUSH
32317: LD_INT 22
32319: ST_TO_ADDR
32320: GO 32608
32322: LD_INT 20
32324: DOUBLE
32325: EQUAL
32326: IFTRUE 32330
32328: GO 32341
32330: POP
// bc_type := b_ext_siberium ; 21 :
32331: LD_ADDR_OWVAR 42
32335: PUSH
32336: LD_INT 21
32338: ST_TO_ADDR
32339: GO 32608
32341: LD_INT 21
32343: DOUBLE
32344: EQUAL
32345: IFTRUE 32349
32347: GO 32360
32349: POP
// bc_type := b_ext_computer ; 22 :
32350: LD_ADDR_OWVAR 42
32354: PUSH
32355: LD_INT 24
32357: ST_TO_ADDR
32358: GO 32608
32360: LD_INT 22
32362: DOUBLE
32363: EQUAL
32364: IFTRUE 32368
32366: GO 32379
32368: POP
// bc_type := b_ext_track ; 23 :
32369: LD_ADDR_OWVAR 42
32373: PUSH
32374: LD_INT 16
32376: ST_TO_ADDR
32377: GO 32608
32379: LD_INT 23
32381: DOUBLE
32382: EQUAL
32383: IFTRUE 32387
32385: GO 32398
32387: POP
// bc_type := b_ext_laser ; 24 :
32388: LD_ADDR_OWVAR 42
32392: PUSH
32393: LD_INT 25
32395: ST_TO_ADDR
32396: GO 32608
32398: LD_INT 24
32400: DOUBLE
32401: EQUAL
32402: IFTRUE 32406
32404: GO 32417
32406: POP
// bc_type := b_control_tower ; 25 :
32407: LD_ADDR_OWVAR 42
32411: PUSH
32412: LD_INT 36
32414: ST_TO_ADDR
32415: GO 32608
32417: LD_INT 25
32419: DOUBLE
32420: EQUAL
32421: IFTRUE 32425
32423: GO 32436
32425: POP
// bc_type := b_breastwork ; 26 :
32426: LD_ADDR_OWVAR 42
32430: PUSH
32431: LD_INT 31
32433: ST_TO_ADDR
32434: GO 32608
32436: LD_INT 26
32438: DOUBLE
32439: EQUAL
32440: IFTRUE 32444
32442: GO 32455
32444: POP
// bc_type := b_bunker ; 27 :
32445: LD_ADDR_OWVAR 42
32449: PUSH
32450: LD_INT 32
32452: ST_TO_ADDR
32453: GO 32608
32455: LD_INT 27
32457: DOUBLE
32458: EQUAL
32459: IFTRUE 32463
32461: GO 32474
32463: POP
// bc_type := b_turret ; 28 :
32464: LD_ADDR_OWVAR 42
32468: PUSH
32469: LD_INT 33
32471: ST_TO_ADDR
32472: GO 32608
32474: LD_INT 28
32476: DOUBLE
32477: EQUAL
32478: IFTRUE 32482
32480: GO 32493
32482: POP
// bc_type := b_armoury ; 29 :
32483: LD_ADDR_OWVAR 42
32487: PUSH
32488: LD_INT 4
32490: ST_TO_ADDR
32491: GO 32608
32493: LD_INT 29
32495: DOUBLE
32496: EQUAL
32497: IFTRUE 32501
32499: GO 32512
32501: POP
// bc_type := b_barracks ; 30 :
32502: LD_ADDR_OWVAR 42
32506: PUSH
32507: LD_INT 5
32509: ST_TO_ADDR
32510: GO 32608
32512: LD_INT 30
32514: DOUBLE
32515: EQUAL
32516: IFTRUE 32520
32518: GO 32531
32520: POP
// bc_type := b_solar_power ; 31 :
32521: LD_ADDR_OWVAR 42
32525: PUSH
32526: LD_INT 27
32528: ST_TO_ADDR
32529: GO 32608
32531: LD_INT 31
32533: DOUBLE
32534: EQUAL
32535: IFTRUE 32539
32537: GO 32550
32539: POP
// bc_type := b_oil_power ; 32 :
32540: LD_ADDR_OWVAR 42
32544: PUSH
32545: LD_INT 26
32547: ST_TO_ADDR
32548: GO 32608
32550: LD_INT 32
32552: DOUBLE
32553: EQUAL
32554: IFTRUE 32558
32556: GO 32569
32558: POP
// bc_type := b_siberite_power ; 33 :
32559: LD_ADDR_OWVAR 42
32563: PUSH
32564: LD_INT 28
32566: ST_TO_ADDR
32567: GO 32608
32569: LD_INT 33
32571: DOUBLE
32572: EQUAL
32573: IFTRUE 32577
32575: GO 32588
32577: POP
// bc_type := b_oil_mine ; 34 :
32578: LD_ADDR_OWVAR 42
32582: PUSH
32583: LD_INT 29
32585: ST_TO_ADDR
32586: GO 32608
32588: LD_INT 34
32590: DOUBLE
32591: EQUAL
32592: IFTRUE 32596
32594: GO 32607
32596: POP
// bc_type := b_siberite_mine ; end ;
32597: LD_ADDR_OWVAR 42
32601: PUSH
32602: LD_INT 30
32604: ST_TO_ADDR
32605: GO 32608
32607: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32608: LD_ADDR_VAR 0 8
32612: PUSH
32613: LD_VAR 0 5
32617: PPUSH
32618: LD_VAR 0 6
32622: PPUSH
32623: LD_VAR 0 3
32627: PPUSH
32628: CALL_OW 47
32632: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32633: LD_OWVAR 42
32637: PUSH
32638: LD_INT 32
32640: PUSH
32641: LD_INT 33
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: IN
32648: IFFALSE 32664
// PlaceWeaponTurret ( b , weapon ) ;
32650: LD_VAR 0 8
32654: PPUSH
32655: LD_VAR 0 4
32659: PPUSH
32660: CALL_OW 431
// end ;
32664: LD_VAR 0 7
32668: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32669: LD_INT 0
32671: PPUSH
32672: PPUSH
32673: PPUSH
32674: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32675: LD_ADDR_VAR 0 4
32679: PUSH
32680: LD_INT 22
32682: PUSH
32683: LD_OWVAR 2
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 2
32694: PUSH
32695: LD_INT 30
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 30
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: LIST
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PPUSH
32724: CALL_OW 69
32728: ST_TO_ADDR
// if not tmp then
32729: LD_VAR 0 4
32733: NOT
32734: IFFALSE 32738
// exit ;
32736: GO 32797
// for i in tmp do
32738: LD_ADDR_VAR 0 2
32742: PUSH
32743: LD_VAR 0 4
32747: PUSH
32748: FOR_IN
32749: IFFALSE 32795
// for j = 1 to 3 do
32751: LD_ADDR_VAR 0 3
32755: PUSH
32756: DOUBLE
32757: LD_INT 1
32759: DEC
32760: ST_TO_ADDR
32761: LD_INT 3
32763: PUSH
32764: FOR_TO
32765: IFFALSE 32791
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32767: LD_VAR 0 2
32771: PPUSH
32772: CALL_OW 274
32776: PPUSH
32777: LD_VAR 0 3
32781: PPUSH
32782: LD_INT 99999
32784: PPUSH
32785: CALL_OW 277
32789: GO 32764
32791: POP
32792: POP
32793: GO 32748
32795: POP
32796: POP
// end ;
32797: LD_VAR 0 1
32801: RET
// export function hHackSetLevel10 ; var i , j ; begin
32802: LD_INT 0
32804: PPUSH
32805: PPUSH
32806: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32807: LD_ADDR_VAR 0 2
32811: PUSH
32812: LD_INT 21
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PPUSH
32822: CALL_OW 69
32826: PUSH
32827: FOR_IN
32828: IFFALSE 32880
// if IsSelected ( i ) then
32830: LD_VAR 0 2
32834: PPUSH
32835: CALL_OW 306
32839: IFFALSE 32878
// begin for j := 1 to 4 do
32841: LD_ADDR_VAR 0 3
32845: PUSH
32846: DOUBLE
32847: LD_INT 1
32849: DEC
32850: ST_TO_ADDR
32851: LD_INT 4
32853: PUSH
32854: FOR_TO
32855: IFFALSE 32876
// SetSkill ( i , j , 10 ) ;
32857: LD_VAR 0 2
32861: PPUSH
32862: LD_VAR 0 3
32866: PPUSH
32867: LD_INT 10
32869: PPUSH
32870: CALL_OW 237
32874: GO 32854
32876: POP
32877: POP
// end ;
32878: GO 32827
32880: POP
32881: POP
// end ;
32882: LD_VAR 0 1
32886: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32887: LD_INT 0
32889: PPUSH
32890: PPUSH
32891: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32892: LD_ADDR_VAR 0 2
32896: PUSH
32897: LD_INT 22
32899: PUSH
32900: LD_OWVAR 2
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 21
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PPUSH
32923: CALL_OW 69
32927: PUSH
32928: FOR_IN
32929: IFFALSE 32970
// begin for j := 1 to 4 do
32931: LD_ADDR_VAR 0 3
32935: PUSH
32936: DOUBLE
32937: LD_INT 1
32939: DEC
32940: ST_TO_ADDR
32941: LD_INT 4
32943: PUSH
32944: FOR_TO
32945: IFFALSE 32966
// SetSkill ( i , j , 10 ) ;
32947: LD_VAR 0 2
32951: PPUSH
32952: LD_VAR 0 3
32956: PPUSH
32957: LD_INT 10
32959: PPUSH
32960: CALL_OW 237
32964: GO 32944
32966: POP
32967: POP
// end ;
32968: GO 32928
32970: POP
32971: POP
// end ;
32972: LD_VAR 0 1
32976: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32977: LD_INT 0
32979: PPUSH
// uc_side := your_side ;
32980: LD_ADDR_OWVAR 20
32984: PUSH
32985: LD_OWVAR 2
32989: ST_TO_ADDR
// uc_nation := nation ;
32990: LD_ADDR_OWVAR 21
32994: PUSH
32995: LD_VAR 0 1
32999: ST_TO_ADDR
// InitHc ;
33000: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33004: LD_INT 0
33006: PPUSH
33007: LD_VAR 0 2
33011: PPUSH
33012: LD_VAR 0 3
33016: PPUSH
33017: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33021: LD_VAR 0 4
33025: PPUSH
33026: LD_VAR 0 5
33030: PPUSH
33031: CALL_OW 428
33035: PUSH
33036: LD_INT 0
33038: EQUAL
33039: IFFALSE 33063
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33041: CALL_OW 44
33045: PPUSH
33046: LD_VAR 0 4
33050: PPUSH
33051: LD_VAR 0 5
33055: PPUSH
33056: LD_INT 1
33058: PPUSH
33059: CALL_OW 48
// end ;
33063: LD_VAR 0 6
33067: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33068: LD_INT 0
33070: PPUSH
33071: PPUSH
// uc_side := your_side ;
33072: LD_ADDR_OWVAR 20
33076: PUSH
33077: LD_OWVAR 2
33081: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33082: LD_VAR 0 1
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: LD_INT 2
33092: PUSH
33093: LD_INT 3
33095: PUSH
33096: LD_INT 4
33098: PUSH
33099: LD_INT 5
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: IN
33109: IFFALSE 33121
// uc_nation := nation_american else
33111: LD_ADDR_OWVAR 21
33115: PUSH
33116: LD_INT 1
33118: ST_TO_ADDR
33119: GO 33164
// if chassis in [ 11 , 12 , 13 , 14 ] then
33121: LD_VAR 0 1
33125: PUSH
33126: LD_INT 11
33128: PUSH
33129: LD_INT 12
33131: PUSH
33132: LD_INT 13
33134: PUSH
33135: LD_INT 14
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: IN
33144: IFFALSE 33156
// uc_nation := nation_arabian else
33146: LD_ADDR_OWVAR 21
33150: PUSH
33151: LD_INT 2
33153: ST_TO_ADDR
33154: GO 33164
// uc_nation := nation_russian ;
33156: LD_ADDR_OWVAR 21
33160: PUSH
33161: LD_INT 3
33163: ST_TO_ADDR
// vc_chassis := chassis ;
33164: LD_ADDR_OWVAR 37
33168: PUSH
33169: LD_VAR 0 1
33173: ST_TO_ADDR
// vc_engine := engine ;
33174: LD_ADDR_OWVAR 39
33178: PUSH
33179: LD_VAR 0 2
33183: ST_TO_ADDR
// vc_control := control ;
33184: LD_ADDR_OWVAR 38
33188: PUSH
33189: LD_VAR 0 3
33193: ST_TO_ADDR
// vc_weapon := weapon ;
33194: LD_ADDR_OWVAR 40
33198: PUSH
33199: LD_VAR 0 4
33203: ST_TO_ADDR
// un := CreateVehicle ;
33204: LD_ADDR_VAR 0 8
33208: PUSH
33209: CALL_OW 45
33213: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33214: LD_VAR 0 8
33218: PPUSH
33219: LD_INT 0
33221: PPUSH
33222: LD_INT 5
33224: PPUSH
33225: CALL_OW 12
33229: PPUSH
33230: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33234: LD_VAR 0 8
33238: PPUSH
33239: LD_VAR 0 5
33243: PPUSH
33244: LD_VAR 0 6
33248: PPUSH
33249: LD_INT 1
33251: PPUSH
33252: CALL_OW 48
// end ;
33256: LD_VAR 0 7
33260: RET
// export hInvincible ; every 1 do
33261: GO 33263
33263: DISABLE
// hInvincible := [ ] ;
33264: LD_ADDR_EXP 120
33268: PUSH
33269: EMPTY
33270: ST_TO_ADDR
33271: END
// every 10 do var i ;
33272: GO 33274
33274: DISABLE
33275: LD_INT 0
33277: PPUSH
// begin enable ;
33278: ENABLE
// if not hInvincible then
33279: LD_EXP 120
33283: NOT
33284: IFFALSE 33288
// exit ;
33286: GO 33332
// for i in hInvincible do
33288: LD_ADDR_VAR 0 1
33292: PUSH
33293: LD_EXP 120
33297: PUSH
33298: FOR_IN
33299: IFFALSE 33330
// if GetLives ( i ) < 1000 then
33301: LD_VAR 0 1
33305: PPUSH
33306: CALL_OW 256
33310: PUSH
33311: LD_INT 1000
33313: LESS
33314: IFFALSE 33328
// SetLives ( i , 1000 ) ;
33316: LD_VAR 0 1
33320: PPUSH
33321: LD_INT 1000
33323: PPUSH
33324: CALL_OW 234
33328: GO 33298
33330: POP
33331: POP
// end ;
33332: PPOPN 1
33334: END
// export function hHackInvincible ; var i ; begin
33335: LD_INT 0
33337: PPUSH
33338: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33339: LD_ADDR_VAR 0 2
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: LD_INT 21
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 21
33359: PUSH
33360: LD_INT 2
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: LIST
33371: PPUSH
33372: CALL_OW 69
33376: PUSH
33377: FOR_IN
33378: IFFALSE 33439
// if IsSelected ( i ) then
33380: LD_VAR 0 2
33384: PPUSH
33385: CALL_OW 306
33389: IFFALSE 33437
// begin if i in hInvincible then
33391: LD_VAR 0 2
33395: PUSH
33396: LD_EXP 120
33400: IN
33401: IFFALSE 33421
// hInvincible := hInvincible diff i else
33403: LD_ADDR_EXP 120
33407: PUSH
33408: LD_EXP 120
33412: PUSH
33413: LD_VAR 0 2
33417: DIFF
33418: ST_TO_ADDR
33419: GO 33437
// hInvincible := hInvincible union i ;
33421: LD_ADDR_EXP 120
33425: PUSH
33426: LD_EXP 120
33430: PUSH
33431: LD_VAR 0 2
33435: UNION
33436: ST_TO_ADDR
// end ;
33437: GO 33377
33439: POP
33440: POP
// end ;
33441: LD_VAR 0 1
33445: RET
// export function hHackInvisible ; var i , j ; begin
33446: LD_INT 0
33448: PPUSH
33449: PPUSH
33450: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33451: LD_ADDR_VAR 0 2
33455: PUSH
33456: LD_INT 21
33458: PUSH
33459: LD_INT 1
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PPUSH
33466: CALL_OW 69
33470: PUSH
33471: FOR_IN
33472: IFFALSE 33496
// if IsSelected ( i ) then
33474: LD_VAR 0 2
33478: PPUSH
33479: CALL_OW 306
33483: IFFALSE 33494
// ComForceInvisible ( i ) ;
33485: LD_VAR 0 2
33489: PPUSH
33490: CALL_OW 496
33494: GO 33471
33496: POP
33497: POP
// end ;
33498: LD_VAR 0 1
33502: RET
// export function hHackChangeYourSide ; begin
33503: LD_INT 0
33505: PPUSH
// if your_side = 8 then
33506: LD_OWVAR 2
33510: PUSH
33511: LD_INT 8
33513: EQUAL
33514: IFFALSE 33526
// your_side := 0 else
33516: LD_ADDR_OWVAR 2
33520: PUSH
33521: LD_INT 0
33523: ST_TO_ADDR
33524: GO 33540
// your_side := your_side + 1 ;
33526: LD_ADDR_OWVAR 2
33530: PUSH
33531: LD_OWVAR 2
33535: PUSH
33536: LD_INT 1
33538: PLUS
33539: ST_TO_ADDR
// end ;
33540: LD_VAR 0 1
33544: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33545: LD_INT 0
33547: PPUSH
33548: PPUSH
33549: PPUSH
// for i in all_units do
33550: LD_ADDR_VAR 0 2
33554: PUSH
33555: LD_OWVAR 3
33559: PUSH
33560: FOR_IN
33561: IFFALSE 33639
// if IsSelected ( i ) then
33563: LD_VAR 0 2
33567: PPUSH
33568: CALL_OW 306
33572: IFFALSE 33637
// begin j := GetSide ( i ) ;
33574: LD_ADDR_VAR 0 3
33578: PUSH
33579: LD_VAR 0 2
33583: PPUSH
33584: CALL_OW 255
33588: ST_TO_ADDR
// if j = 8 then
33589: LD_VAR 0 3
33593: PUSH
33594: LD_INT 8
33596: EQUAL
33597: IFFALSE 33609
// j := 0 else
33599: LD_ADDR_VAR 0 3
33603: PUSH
33604: LD_INT 0
33606: ST_TO_ADDR
33607: GO 33623
// j := j + 1 ;
33609: LD_ADDR_VAR 0 3
33613: PUSH
33614: LD_VAR 0 3
33618: PUSH
33619: LD_INT 1
33621: PLUS
33622: ST_TO_ADDR
// SetSide ( i , j ) ;
33623: LD_VAR 0 2
33627: PPUSH
33628: LD_VAR 0 3
33632: PPUSH
33633: CALL_OW 235
// end ;
33637: GO 33560
33639: POP
33640: POP
// end ;
33641: LD_VAR 0 1
33645: RET
// export function hHackFog ; begin
33646: LD_INT 0
33648: PPUSH
// FogOff ( true ) ;
33649: LD_INT 1
33651: PPUSH
33652: CALL_OW 344
// end ;
33656: LD_VAR 0 1
33660: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33661: LD_INT 0
33663: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33664: LD_VAR 0 1
33668: PPUSH
33669: LD_VAR 0 2
33673: PPUSH
33674: LD_VAR 0 3
33678: PPUSH
33679: LD_INT 1
33681: PPUSH
33682: LD_INT 1
33684: PPUSH
33685: CALL_OW 483
// CenterOnXY ( x , y ) ;
33689: LD_VAR 0 2
33693: PPUSH
33694: LD_VAR 0 3
33698: PPUSH
33699: CALL_OW 84
// end ;
33703: LD_VAR 0 4
33707: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33708: LD_INT 0
33710: PPUSH
33711: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33712: LD_VAR 0 1
33716: NOT
33717: PUSH
33718: LD_VAR 0 2
33722: PPUSH
33723: LD_VAR 0 3
33727: PPUSH
33728: CALL_OW 488
33732: NOT
33733: OR
33734: PUSH
33735: LD_VAR 0 1
33739: PPUSH
33740: CALL_OW 266
33744: PUSH
33745: LD_INT 3
33747: NONEQUAL
33748: PUSH
33749: LD_VAR 0 1
33753: PPUSH
33754: CALL_OW 247
33758: PUSH
33759: LD_INT 1
33761: EQUAL
33762: NOT
33763: AND
33764: OR
33765: IFFALSE 33769
// exit ;
33767: GO 33918
// if GetType ( factory ) = unit_human then
33769: LD_VAR 0 1
33773: PPUSH
33774: CALL_OW 247
33778: PUSH
33779: LD_INT 1
33781: EQUAL
33782: IFFALSE 33799
// factory := IsInUnit ( factory ) ;
33784: LD_ADDR_VAR 0 1
33788: PUSH
33789: LD_VAR 0 1
33793: PPUSH
33794: CALL_OW 310
33798: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33799: LD_VAR 0 1
33803: PPUSH
33804: CALL_OW 266
33808: PUSH
33809: LD_INT 3
33811: NONEQUAL
33812: IFFALSE 33816
// exit ;
33814: GO 33918
// if HexInfo ( x , y ) = factory then
33816: LD_VAR 0 2
33820: PPUSH
33821: LD_VAR 0 3
33825: PPUSH
33826: CALL_OW 428
33830: PUSH
33831: LD_VAR 0 1
33835: EQUAL
33836: IFFALSE 33863
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33838: LD_ADDR_EXP 121
33842: PUSH
33843: LD_EXP 121
33847: PPUSH
33848: LD_VAR 0 1
33852: PPUSH
33853: LD_INT 0
33855: PPUSH
33856: CALL_OW 1
33860: ST_TO_ADDR
33861: GO 33914
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33863: LD_ADDR_EXP 121
33867: PUSH
33868: LD_EXP 121
33872: PPUSH
33873: LD_VAR 0 1
33877: PPUSH
33878: LD_VAR 0 1
33882: PPUSH
33883: CALL_OW 255
33887: PUSH
33888: LD_VAR 0 1
33892: PUSH
33893: LD_VAR 0 2
33897: PUSH
33898: LD_VAR 0 3
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: PPUSH
33909: CALL_OW 1
33913: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33914: CALL 33923 0 0
// end ;
33918: LD_VAR 0 4
33922: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33923: LD_INT 0
33925: PPUSH
33926: PPUSH
33927: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33928: LD_STRING resetFactoryWaypoint();
33930: PPUSH
33931: CALL_OW 559
// if factoryWaypoints then
33935: LD_EXP 121
33939: IFFALSE 34065
// begin list := PrepareArray ( factoryWaypoints ) ;
33941: LD_ADDR_VAR 0 3
33945: PUSH
33946: LD_EXP 121
33950: PPUSH
33951: CALL 80534 0 1
33955: ST_TO_ADDR
// for i := 1 to list do
33956: LD_ADDR_VAR 0 2
33960: PUSH
33961: DOUBLE
33962: LD_INT 1
33964: DEC
33965: ST_TO_ADDR
33966: LD_VAR 0 3
33970: PUSH
33971: FOR_TO
33972: IFFALSE 34063
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33974: LD_STRING setFactoryWaypointXY(
33976: PUSH
33977: LD_VAR 0 3
33981: PUSH
33982: LD_VAR 0 2
33986: ARRAY
33987: PUSH
33988: LD_INT 1
33990: ARRAY
33991: STR
33992: PUSH
33993: LD_STRING ,
33995: STR
33996: PUSH
33997: LD_VAR 0 3
34001: PUSH
34002: LD_VAR 0 2
34006: ARRAY
34007: PUSH
34008: LD_INT 2
34010: ARRAY
34011: STR
34012: PUSH
34013: LD_STRING ,
34015: STR
34016: PUSH
34017: LD_VAR 0 3
34021: PUSH
34022: LD_VAR 0 2
34026: ARRAY
34027: PUSH
34028: LD_INT 3
34030: ARRAY
34031: STR
34032: PUSH
34033: LD_STRING ,
34035: STR
34036: PUSH
34037: LD_VAR 0 3
34041: PUSH
34042: LD_VAR 0 2
34046: ARRAY
34047: PUSH
34048: LD_INT 4
34050: ARRAY
34051: STR
34052: PUSH
34053: LD_STRING )
34055: STR
34056: PPUSH
34057: CALL_OW 559
34061: GO 33971
34063: POP
34064: POP
// end ; end ;
34065: LD_VAR 0 1
34069: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34070: LD_INT 0
34072: PPUSH
// if HexInfo ( x , y ) = warehouse then
34073: LD_VAR 0 2
34077: PPUSH
34078: LD_VAR 0 3
34082: PPUSH
34083: CALL_OW 428
34087: PUSH
34088: LD_VAR 0 1
34092: EQUAL
34093: IFFALSE 34120
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34095: LD_ADDR_EXP 122
34099: PUSH
34100: LD_EXP 122
34104: PPUSH
34105: LD_VAR 0 1
34109: PPUSH
34110: LD_INT 0
34112: PPUSH
34113: CALL_OW 1
34117: ST_TO_ADDR
34118: GO 34171
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34120: LD_ADDR_EXP 122
34124: PUSH
34125: LD_EXP 122
34129: PPUSH
34130: LD_VAR 0 1
34134: PPUSH
34135: LD_VAR 0 1
34139: PPUSH
34140: CALL_OW 255
34144: PUSH
34145: LD_VAR 0 1
34149: PUSH
34150: LD_VAR 0 2
34154: PUSH
34155: LD_VAR 0 3
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: PPUSH
34166: CALL_OW 1
34170: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34171: CALL 34180 0 0
// end ;
34175: LD_VAR 0 4
34179: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34180: LD_INT 0
34182: PPUSH
34183: PPUSH
34184: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34185: LD_STRING resetWarehouseGatheringPoints();
34187: PPUSH
34188: CALL_OW 559
// if warehouseGatheringPoints then
34192: LD_EXP 122
34196: IFFALSE 34322
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34198: LD_ADDR_VAR 0 3
34202: PUSH
34203: LD_EXP 122
34207: PPUSH
34208: CALL 80534 0 1
34212: ST_TO_ADDR
// for i := 1 to list do
34213: LD_ADDR_VAR 0 2
34217: PUSH
34218: DOUBLE
34219: LD_INT 1
34221: DEC
34222: ST_TO_ADDR
34223: LD_VAR 0 3
34227: PUSH
34228: FOR_TO
34229: IFFALSE 34320
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34231: LD_STRING setWarehouseGatheringPointXY(
34233: PUSH
34234: LD_VAR 0 3
34238: PUSH
34239: LD_VAR 0 2
34243: ARRAY
34244: PUSH
34245: LD_INT 1
34247: ARRAY
34248: STR
34249: PUSH
34250: LD_STRING ,
34252: STR
34253: PUSH
34254: LD_VAR 0 3
34258: PUSH
34259: LD_VAR 0 2
34263: ARRAY
34264: PUSH
34265: LD_INT 2
34267: ARRAY
34268: STR
34269: PUSH
34270: LD_STRING ,
34272: STR
34273: PUSH
34274: LD_VAR 0 3
34278: PUSH
34279: LD_VAR 0 2
34283: ARRAY
34284: PUSH
34285: LD_INT 3
34287: ARRAY
34288: STR
34289: PUSH
34290: LD_STRING ,
34292: STR
34293: PUSH
34294: LD_VAR 0 3
34298: PUSH
34299: LD_VAR 0 2
34303: ARRAY
34304: PUSH
34305: LD_INT 4
34307: ARRAY
34308: STR
34309: PUSH
34310: LD_STRING )
34312: STR
34313: PPUSH
34314: CALL_OW 559
34318: GO 34228
34320: POP
34321: POP
// end ; end ;
34322: LD_VAR 0 1
34326: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34327: LD_EXP 122
34331: IFFALSE 35016
34333: GO 34335
34335: DISABLE
34336: LD_INT 0
34338: PPUSH
34339: PPUSH
34340: PPUSH
34341: PPUSH
34342: PPUSH
34343: PPUSH
34344: PPUSH
34345: PPUSH
34346: PPUSH
// begin enable ;
34347: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34348: LD_ADDR_VAR 0 3
34352: PUSH
34353: LD_EXP 122
34357: PPUSH
34358: CALL 80534 0 1
34362: ST_TO_ADDR
// if not list then
34363: LD_VAR 0 3
34367: NOT
34368: IFFALSE 34372
// exit ;
34370: GO 35016
// for i := 1 to list do
34372: LD_ADDR_VAR 0 1
34376: PUSH
34377: DOUBLE
34378: LD_INT 1
34380: DEC
34381: ST_TO_ADDR
34382: LD_VAR 0 3
34386: PUSH
34387: FOR_TO
34388: IFFALSE 35014
// begin depot := list [ i ] [ 2 ] ;
34390: LD_ADDR_VAR 0 8
34394: PUSH
34395: LD_VAR 0 3
34399: PUSH
34400: LD_VAR 0 1
34404: ARRAY
34405: PUSH
34406: LD_INT 2
34408: ARRAY
34409: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34410: LD_ADDR_VAR 0 5
34414: PUSH
34415: LD_VAR 0 3
34419: PUSH
34420: LD_VAR 0 1
34424: ARRAY
34425: PUSH
34426: LD_INT 1
34428: ARRAY
34429: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34430: LD_VAR 0 8
34434: PPUSH
34435: CALL_OW 301
34439: PUSH
34440: LD_VAR 0 5
34444: PUSH
34445: LD_VAR 0 8
34449: PPUSH
34450: CALL_OW 255
34454: NONEQUAL
34455: OR
34456: IFFALSE 34485
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34458: LD_ADDR_EXP 122
34462: PUSH
34463: LD_EXP 122
34467: PPUSH
34468: LD_VAR 0 8
34472: PPUSH
34473: LD_INT 0
34475: PPUSH
34476: CALL_OW 1
34480: ST_TO_ADDR
// exit ;
34481: POP
34482: POP
34483: GO 35016
// end ; x := list [ i ] [ 3 ] ;
34485: LD_ADDR_VAR 0 6
34489: PUSH
34490: LD_VAR 0 3
34494: PUSH
34495: LD_VAR 0 1
34499: ARRAY
34500: PUSH
34501: LD_INT 3
34503: ARRAY
34504: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34505: LD_ADDR_VAR 0 7
34509: PUSH
34510: LD_VAR 0 3
34514: PUSH
34515: LD_VAR 0 1
34519: ARRAY
34520: PUSH
34521: LD_INT 4
34523: ARRAY
34524: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34525: LD_ADDR_VAR 0 9
34529: PUSH
34530: LD_VAR 0 6
34534: PPUSH
34535: LD_VAR 0 7
34539: PPUSH
34540: LD_INT 16
34542: PPUSH
34543: CALL 79122 0 3
34547: ST_TO_ADDR
// if not cratesNearbyPoint then
34548: LD_VAR 0 9
34552: NOT
34553: IFFALSE 34559
// exit ;
34555: POP
34556: POP
34557: GO 35016
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34559: LD_ADDR_VAR 0 4
34563: PUSH
34564: LD_INT 22
34566: PUSH
34567: LD_VAR 0 5
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 3
34578: PUSH
34579: LD_INT 60
34581: PUSH
34582: EMPTY
34583: LIST
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 91
34591: PUSH
34592: LD_VAR 0 8
34596: PUSH
34597: LD_INT 6
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 2
34607: PUSH
34608: LD_INT 25
34610: PUSH
34611: LD_INT 2
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 25
34620: PUSH
34621: LD_INT 16
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: LIST
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: PPUSH
34639: CALL_OW 69
34643: PUSH
34644: LD_VAR 0 8
34648: PPUSH
34649: CALL_OW 313
34653: PPUSH
34654: LD_INT 3
34656: PUSH
34657: LD_INT 60
34659: PUSH
34660: EMPTY
34661: LIST
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 2
34669: PUSH
34670: LD_INT 25
34672: PUSH
34673: LD_INT 2
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 25
34682: PUSH
34683: LD_INT 16
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: LIST
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PPUSH
34699: CALL_OW 72
34703: UNION
34704: ST_TO_ADDR
// if tmp then
34705: LD_VAR 0 4
34709: IFFALSE 34789
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34711: LD_ADDR_VAR 0 4
34715: PUSH
34716: LD_VAR 0 4
34720: PPUSH
34721: LD_INT 3
34723: PPUSH
34724: CALL 77091 0 2
34728: ST_TO_ADDR
// for j in tmp do
34729: LD_ADDR_VAR 0 2
34733: PUSH
34734: LD_VAR 0 4
34738: PUSH
34739: FOR_IN
34740: IFFALSE 34783
// begin if IsInUnit ( j ) then
34742: LD_VAR 0 2
34746: PPUSH
34747: CALL_OW 310
34751: IFFALSE 34762
// ComExit ( j ) ;
34753: LD_VAR 0 2
34757: PPUSH
34758: CALL 77174 0 1
// AddComCollect ( j , x , y ) ;
34762: LD_VAR 0 2
34766: PPUSH
34767: LD_VAR 0 6
34771: PPUSH
34772: LD_VAR 0 7
34776: PPUSH
34777: CALL_OW 177
// end ;
34781: GO 34739
34783: POP
34784: POP
// exit ;
34785: POP
34786: POP
34787: GO 35016
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34789: LD_ADDR_VAR 0 4
34793: PUSH
34794: LD_INT 22
34796: PUSH
34797: LD_VAR 0 5
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 91
34808: PUSH
34809: LD_VAR 0 8
34813: PUSH
34814: LD_INT 8
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 2
34824: PUSH
34825: LD_INT 34
34827: PUSH
34828: LD_INT 12
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 34
34837: PUSH
34838: LD_INT 51
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 34
34847: PUSH
34848: LD_INT 32
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 34
34857: PUSH
34858: LD_INT 89
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: LIST
34876: PPUSH
34877: CALL_OW 69
34881: ST_TO_ADDR
// if tmp then
34882: LD_VAR 0 4
34886: IFFALSE 35012
// begin for j in tmp do
34888: LD_ADDR_VAR 0 2
34892: PUSH
34893: LD_VAR 0 4
34897: PUSH
34898: FOR_IN
34899: IFFALSE 35010
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34901: LD_VAR 0 2
34905: PPUSH
34906: CALL_OW 262
34910: PUSH
34911: LD_INT 3
34913: EQUAL
34914: PUSH
34915: LD_VAR 0 2
34919: PPUSH
34920: CALL_OW 261
34924: PUSH
34925: LD_INT 20
34927: GREATER
34928: OR
34929: PUSH
34930: LD_VAR 0 2
34934: PPUSH
34935: CALL_OW 314
34939: NOT
34940: AND
34941: PUSH
34942: LD_VAR 0 2
34946: PPUSH
34947: CALL_OW 263
34951: PUSH
34952: LD_INT 1
34954: NONEQUAL
34955: PUSH
34956: LD_VAR 0 2
34960: PPUSH
34961: CALL_OW 311
34965: OR
34966: AND
34967: IFFALSE 35008
// begin ComCollect ( j , x , y ) ;
34969: LD_VAR 0 2
34973: PPUSH
34974: LD_VAR 0 6
34978: PPUSH
34979: LD_VAR 0 7
34983: PPUSH
34984: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34988: LD_VAR 0 2
34992: PPUSH
34993: LD_VAR 0 8
34997: PPUSH
34998: CALL_OW 172
// exit ;
35002: POP
35003: POP
35004: POP
35005: POP
35006: GO 35016
// end ;
35008: GO 34898
35010: POP
35011: POP
// end ; end ;
35012: GO 34387
35014: POP
35015: POP
// end ; end_of_file
35016: PPOPN 9
35018: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35019: LD_INT 0
35021: PPUSH
35022: PPUSH
35023: PPUSH
35024: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35025: LD_VAR 0 1
35029: PPUSH
35030: CALL_OW 264
35034: PUSH
35035: LD_INT 91
35037: EQUAL
35038: IFFALSE 35110
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35040: LD_INT 68
35042: PPUSH
35043: LD_VAR 0 1
35047: PPUSH
35048: CALL_OW 255
35052: PPUSH
35053: CALL_OW 321
35057: PUSH
35058: LD_INT 2
35060: EQUAL
35061: IFFALSE 35073
// eff := 70 else
35063: LD_ADDR_VAR 0 4
35067: PUSH
35068: LD_INT 70
35070: ST_TO_ADDR
35071: GO 35081
// eff := 30 ;
35073: LD_ADDR_VAR 0 4
35077: PUSH
35078: LD_INT 30
35080: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35081: LD_VAR 0 1
35085: PPUSH
35086: CALL_OW 250
35090: PPUSH
35091: LD_VAR 0 1
35095: PPUSH
35096: CALL_OW 251
35100: PPUSH
35101: LD_VAR 0 4
35105: PPUSH
35106: CALL_OW 495
// end ; end ;
35110: LD_VAR 0 2
35114: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35115: LD_INT 0
35117: PPUSH
// end ;
35118: LD_VAR 0 4
35122: RET
// export function SOS_Command ( cmd ) ; begin
35123: LD_INT 0
35125: PPUSH
// end ;
35126: LD_VAR 0 2
35130: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35131: LD_INT 0
35133: PPUSH
// end ;
35134: LD_VAR 0 6
35138: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35139: LD_INT 0
35141: PPUSH
35142: PPUSH
// if not vehicle or not factory then
35143: LD_VAR 0 1
35147: NOT
35148: PUSH
35149: LD_VAR 0 2
35153: NOT
35154: OR
35155: IFFALSE 35159
// exit ;
35157: GO 35390
// if factoryWaypoints >= factory then
35159: LD_EXP 121
35163: PUSH
35164: LD_VAR 0 2
35168: GREATEREQUAL
35169: IFFALSE 35390
// if factoryWaypoints [ factory ] then
35171: LD_EXP 121
35175: PUSH
35176: LD_VAR 0 2
35180: ARRAY
35181: IFFALSE 35390
// begin if GetControl ( vehicle ) = control_manual then
35183: LD_VAR 0 1
35187: PPUSH
35188: CALL_OW 263
35192: PUSH
35193: LD_INT 1
35195: EQUAL
35196: IFFALSE 35277
// begin driver := IsDrivenBy ( vehicle ) ;
35198: LD_ADDR_VAR 0 4
35202: PUSH
35203: LD_VAR 0 1
35207: PPUSH
35208: CALL_OW 311
35212: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35213: LD_VAR 0 4
35217: PPUSH
35218: LD_EXP 121
35222: PUSH
35223: LD_VAR 0 2
35227: ARRAY
35228: PUSH
35229: LD_INT 3
35231: ARRAY
35232: PPUSH
35233: LD_EXP 121
35237: PUSH
35238: LD_VAR 0 2
35242: ARRAY
35243: PUSH
35244: LD_INT 4
35246: ARRAY
35247: PPUSH
35248: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35252: LD_VAR 0 4
35256: PPUSH
35257: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35261: LD_VAR 0 4
35265: PPUSH
35266: LD_VAR 0 2
35270: PPUSH
35271: CALL_OW 180
// end else
35275: GO 35390
// if GetControl ( vehicle ) = control_remote then
35277: LD_VAR 0 1
35281: PPUSH
35282: CALL_OW 263
35286: PUSH
35287: LD_INT 2
35289: EQUAL
35290: IFFALSE 35351
// begin wait ( 0 0$2 ) ;
35292: LD_INT 70
35294: PPUSH
35295: CALL_OW 67
// if Connect ( vehicle ) then
35299: LD_VAR 0 1
35303: PPUSH
35304: CALL 47414 0 1
35308: IFFALSE 35349
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35310: LD_VAR 0 1
35314: PPUSH
35315: LD_EXP 121
35319: PUSH
35320: LD_VAR 0 2
35324: ARRAY
35325: PUSH
35326: LD_INT 3
35328: ARRAY
35329: PPUSH
35330: LD_EXP 121
35334: PUSH
35335: LD_VAR 0 2
35339: ARRAY
35340: PUSH
35341: LD_INT 4
35343: ARRAY
35344: PPUSH
35345: CALL_OW 171
// end else
35349: GO 35390
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35351: LD_VAR 0 1
35355: PPUSH
35356: LD_EXP 121
35360: PUSH
35361: LD_VAR 0 2
35365: ARRAY
35366: PUSH
35367: LD_INT 3
35369: ARRAY
35370: PPUSH
35371: LD_EXP 121
35375: PUSH
35376: LD_VAR 0 2
35380: ARRAY
35381: PUSH
35382: LD_INT 4
35384: ARRAY
35385: PPUSH
35386: CALL_OW 171
// end ; end ;
35390: LD_VAR 0 3
35394: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35395: LD_INT 0
35397: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35398: LD_VAR 0 1
35402: PUSH
35403: LD_INT 250
35405: EQUAL
35406: PUSH
35407: LD_VAR 0 2
35411: PPUSH
35412: CALL_OW 264
35416: PUSH
35417: LD_INT 81
35419: EQUAL
35420: AND
35421: IFFALSE 35442
// MinerPlaceMine ( unit , x , y ) ;
35423: LD_VAR 0 2
35427: PPUSH
35428: LD_VAR 0 4
35432: PPUSH
35433: LD_VAR 0 5
35437: PPUSH
35438: CALL 37827 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35442: LD_VAR 0 1
35446: PUSH
35447: LD_INT 251
35449: EQUAL
35450: PUSH
35451: LD_VAR 0 2
35455: PPUSH
35456: CALL_OW 264
35460: PUSH
35461: LD_INT 81
35463: EQUAL
35464: AND
35465: IFFALSE 35486
// MinerDetonateMine ( unit , x , y ) ;
35467: LD_VAR 0 2
35471: PPUSH
35472: LD_VAR 0 4
35476: PPUSH
35477: LD_VAR 0 5
35481: PPUSH
35482: CALL 38102 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35486: LD_VAR 0 1
35490: PUSH
35491: LD_INT 252
35493: EQUAL
35494: PUSH
35495: LD_VAR 0 2
35499: PPUSH
35500: CALL_OW 264
35504: PUSH
35505: LD_INT 81
35507: EQUAL
35508: AND
35509: IFFALSE 35530
// MinerCreateMinefield ( unit , x , y ) ;
35511: LD_VAR 0 2
35515: PPUSH
35516: LD_VAR 0 4
35520: PPUSH
35521: LD_VAR 0 5
35525: PPUSH
35526: CALL 38519 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35530: LD_VAR 0 1
35534: PUSH
35535: LD_INT 253
35537: EQUAL
35538: PUSH
35539: LD_VAR 0 2
35543: PPUSH
35544: CALL_OW 257
35548: PUSH
35549: LD_INT 5
35551: EQUAL
35552: AND
35553: IFFALSE 35574
// ComBinocular ( unit , x , y ) ;
35555: LD_VAR 0 2
35559: PPUSH
35560: LD_VAR 0 4
35564: PPUSH
35565: LD_VAR 0 5
35569: PPUSH
35570: CALL 38888 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35574: LD_VAR 0 1
35578: PUSH
35579: LD_INT 254
35581: EQUAL
35582: PUSH
35583: LD_VAR 0 2
35587: PPUSH
35588: CALL_OW 264
35592: PUSH
35593: LD_INT 99
35595: EQUAL
35596: AND
35597: PUSH
35598: LD_VAR 0 3
35602: PPUSH
35603: CALL_OW 263
35607: PUSH
35608: LD_INT 3
35610: EQUAL
35611: AND
35612: IFFALSE 35628
// HackDestroyVehicle ( unit , selectedUnit ) ;
35614: LD_VAR 0 2
35618: PPUSH
35619: LD_VAR 0 3
35623: PPUSH
35624: CALL 37191 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35628: LD_VAR 0 1
35632: PUSH
35633: LD_INT 255
35635: EQUAL
35636: PUSH
35637: LD_VAR 0 2
35641: PPUSH
35642: CALL_OW 264
35646: PUSH
35647: LD_INT 14
35649: PUSH
35650: LD_INT 53
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: IN
35657: AND
35658: PUSH
35659: LD_VAR 0 4
35663: PPUSH
35664: LD_VAR 0 5
35668: PPUSH
35669: CALL_OW 488
35673: AND
35674: IFFALSE 35698
// CutTreeXYR ( unit , x , y , 12 ) ;
35676: LD_VAR 0 2
35680: PPUSH
35681: LD_VAR 0 4
35685: PPUSH
35686: LD_VAR 0 5
35690: PPUSH
35691: LD_INT 12
35693: PPUSH
35694: CALL 35761 0 4
// if cmd = 256 then
35698: LD_VAR 0 1
35702: PUSH
35703: LD_INT 256
35705: EQUAL
35706: IFFALSE 35727
// SetFactoryWaypoint ( unit , x , y ) ;
35708: LD_VAR 0 2
35712: PPUSH
35713: LD_VAR 0 4
35717: PPUSH
35718: LD_VAR 0 5
35722: PPUSH
35723: CALL 33708 0 3
// if cmd = 257 then
35727: LD_VAR 0 1
35731: PUSH
35732: LD_INT 257
35734: EQUAL
35735: IFFALSE 35756
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35737: LD_VAR 0 2
35741: PPUSH
35742: LD_VAR 0 4
35746: PPUSH
35747: LD_VAR 0 5
35751: PPUSH
35752: CALL 34070 0 3
// end ;
35756: LD_VAR 0 6
35760: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35761: LD_INT 0
35763: PPUSH
35764: PPUSH
35765: PPUSH
35766: PPUSH
35767: PPUSH
35768: PPUSH
35769: PPUSH
35770: PPUSH
35771: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35772: LD_VAR 0 1
35776: NOT
35777: PUSH
35778: LD_VAR 0 2
35782: PPUSH
35783: LD_VAR 0 3
35787: PPUSH
35788: CALL_OW 488
35792: NOT
35793: OR
35794: PUSH
35795: LD_VAR 0 4
35799: NOT
35800: OR
35801: IFFALSE 35805
// exit ;
35803: GO 36145
// list := [ ] ;
35805: LD_ADDR_VAR 0 13
35809: PUSH
35810: EMPTY
35811: ST_TO_ADDR
// if x - r < 0 then
35812: LD_VAR 0 2
35816: PUSH
35817: LD_VAR 0 4
35821: MINUS
35822: PUSH
35823: LD_INT 0
35825: LESS
35826: IFFALSE 35838
// min_x := 0 else
35828: LD_ADDR_VAR 0 7
35832: PUSH
35833: LD_INT 0
35835: ST_TO_ADDR
35836: GO 35854
// min_x := x - r ;
35838: LD_ADDR_VAR 0 7
35842: PUSH
35843: LD_VAR 0 2
35847: PUSH
35848: LD_VAR 0 4
35852: MINUS
35853: ST_TO_ADDR
// if y - r < 0 then
35854: LD_VAR 0 3
35858: PUSH
35859: LD_VAR 0 4
35863: MINUS
35864: PUSH
35865: LD_INT 0
35867: LESS
35868: IFFALSE 35880
// min_y := 0 else
35870: LD_ADDR_VAR 0 8
35874: PUSH
35875: LD_INT 0
35877: ST_TO_ADDR
35878: GO 35896
// min_y := y - r ;
35880: LD_ADDR_VAR 0 8
35884: PUSH
35885: LD_VAR 0 3
35889: PUSH
35890: LD_VAR 0 4
35894: MINUS
35895: ST_TO_ADDR
// max_x := x + r ;
35896: LD_ADDR_VAR 0 9
35900: PUSH
35901: LD_VAR 0 2
35905: PUSH
35906: LD_VAR 0 4
35910: PLUS
35911: ST_TO_ADDR
// max_y := y + r ;
35912: LD_ADDR_VAR 0 10
35916: PUSH
35917: LD_VAR 0 3
35921: PUSH
35922: LD_VAR 0 4
35926: PLUS
35927: ST_TO_ADDR
// for _x = min_x to max_x do
35928: LD_ADDR_VAR 0 11
35932: PUSH
35933: DOUBLE
35934: LD_VAR 0 7
35938: DEC
35939: ST_TO_ADDR
35940: LD_VAR 0 9
35944: PUSH
35945: FOR_TO
35946: IFFALSE 36063
// for _y = min_y to max_y do
35948: LD_ADDR_VAR 0 12
35952: PUSH
35953: DOUBLE
35954: LD_VAR 0 8
35958: DEC
35959: ST_TO_ADDR
35960: LD_VAR 0 10
35964: PUSH
35965: FOR_TO
35966: IFFALSE 36059
// begin if not ValidHex ( _x , _y ) then
35968: LD_VAR 0 11
35972: PPUSH
35973: LD_VAR 0 12
35977: PPUSH
35978: CALL_OW 488
35982: NOT
35983: IFFALSE 35987
// continue ;
35985: GO 35965
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35987: LD_VAR 0 11
35991: PPUSH
35992: LD_VAR 0 12
35996: PPUSH
35997: CALL_OW 351
36001: PUSH
36002: LD_VAR 0 11
36006: PPUSH
36007: LD_VAR 0 12
36011: PPUSH
36012: CALL_OW 554
36016: AND
36017: IFFALSE 36057
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36019: LD_ADDR_VAR 0 13
36023: PUSH
36024: LD_VAR 0 13
36028: PPUSH
36029: LD_VAR 0 13
36033: PUSH
36034: LD_INT 1
36036: PLUS
36037: PPUSH
36038: LD_VAR 0 11
36042: PUSH
36043: LD_VAR 0 12
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PPUSH
36052: CALL_OW 2
36056: ST_TO_ADDR
// end ;
36057: GO 35965
36059: POP
36060: POP
36061: GO 35945
36063: POP
36064: POP
// if not list then
36065: LD_VAR 0 13
36069: NOT
36070: IFFALSE 36074
// exit ;
36072: GO 36145
// for i in list do
36074: LD_ADDR_VAR 0 6
36078: PUSH
36079: LD_VAR 0 13
36083: PUSH
36084: FOR_IN
36085: IFFALSE 36143
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36087: LD_VAR 0 1
36091: PPUSH
36092: LD_STRING M
36094: PUSH
36095: LD_VAR 0 6
36099: PUSH
36100: LD_INT 1
36102: ARRAY
36103: PUSH
36104: LD_VAR 0 6
36108: PUSH
36109: LD_INT 2
36111: ARRAY
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: LD_INT 0
36121: PUSH
36122: LD_INT 0
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: PUSH
36134: EMPTY
36135: LIST
36136: PPUSH
36137: CALL_OW 447
36141: GO 36084
36143: POP
36144: POP
// end ;
36145: LD_VAR 0 5
36149: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36150: LD_EXP 124
36154: NOT
36155: IFFALSE 36205
36157: GO 36159
36159: DISABLE
// begin initHack := true ;
36160: LD_ADDR_EXP 124
36164: PUSH
36165: LD_INT 1
36167: ST_TO_ADDR
// hackTanks := [ ] ;
36168: LD_ADDR_EXP 125
36172: PUSH
36173: EMPTY
36174: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36175: LD_ADDR_EXP 126
36179: PUSH
36180: EMPTY
36181: ST_TO_ADDR
// hackLimit := 3 ;
36182: LD_ADDR_EXP 127
36186: PUSH
36187: LD_INT 3
36189: ST_TO_ADDR
// hackDist := 12 ;
36190: LD_ADDR_EXP 128
36194: PUSH
36195: LD_INT 12
36197: ST_TO_ADDR
// hackCounter := [ ] ;
36198: LD_ADDR_EXP 129
36202: PUSH
36203: EMPTY
36204: ST_TO_ADDR
// end ;
36205: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36206: LD_EXP 124
36210: PUSH
36211: LD_INT 34
36213: PUSH
36214: LD_INT 99
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PPUSH
36221: CALL_OW 69
36225: AND
36226: IFFALSE 36479
36228: GO 36230
36230: DISABLE
36231: LD_INT 0
36233: PPUSH
36234: PPUSH
// begin enable ;
36235: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36236: LD_ADDR_VAR 0 1
36240: PUSH
36241: LD_INT 34
36243: PUSH
36244: LD_INT 99
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PPUSH
36251: CALL_OW 69
36255: PUSH
36256: FOR_IN
36257: IFFALSE 36477
// begin if not i in hackTanks then
36259: LD_VAR 0 1
36263: PUSH
36264: LD_EXP 125
36268: IN
36269: NOT
36270: IFFALSE 36353
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36272: LD_ADDR_EXP 125
36276: PUSH
36277: LD_EXP 125
36281: PPUSH
36282: LD_EXP 125
36286: PUSH
36287: LD_INT 1
36289: PLUS
36290: PPUSH
36291: LD_VAR 0 1
36295: PPUSH
36296: CALL_OW 1
36300: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36301: LD_ADDR_EXP 126
36305: PUSH
36306: LD_EXP 126
36310: PPUSH
36311: LD_EXP 126
36315: PUSH
36316: LD_INT 1
36318: PLUS
36319: PPUSH
36320: EMPTY
36321: PPUSH
36322: CALL_OW 1
36326: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36327: LD_ADDR_EXP 129
36331: PUSH
36332: LD_EXP 129
36336: PPUSH
36337: LD_EXP 129
36341: PUSH
36342: LD_INT 1
36344: PLUS
36345: PPUSH
36346: EMPTY
36347: PPUSH
36348: CALL_OW 1
36352: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36353: LD_VAR 0 1
36357: PPUSH
36358: CALL_OW 302
36362: NOT
36363: IFFALSE 36376
// begin HackUnlinkAll ( i ) ;
36365: LD_VAR 0 1
36369: PPUSH
36370: CALL 36482 0 1
// continue ;
36374: GO 36256
// end ; HackCheckCapturedStatus ( i ) ;
36376: LD_VAR 0 1
36380: PPUSH
36381: CALL 36925 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36385: LD_ADDR_VAR 0 2
36389: PUSH
36390: LD_INT 81
36392: PUSH
36393: LD_VAR 0 1
36397: PPUSH
36398: CALL_OW 255
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 33
36409: PUSH
36410: LD_INT 3
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 91
36419: PUSH
36420: LD_VAR 0 1
36424: PUSH
36425: LD_EXP 128
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 50
36437: PUSH
36438: EMPTY
36439: LIST
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: PPUSH
36447: CALL_OW 69
36451: ST_TO_ADDR
// if not tmp then
36452: LD_VAR 0 2
36456: NOT
36457: IFFALSE 36461
// continue ;
36459: GO 36256
// HackLink ( i , tmp ) ;
36461: LD_VAR 0 1
36465: PPUSH
36466: LD_VAR 0 2
36470: PPUSH
36471: CALL 36618 0 2
// end ;
36475: GO 36256
36477: POP
36478: POP
// end ;
36479: PPOPN 2
36481: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36482: LD_INT 0
36484: PPUSH
36485: PPUSH
36486: PPUSH
// if not hack in hackTanks then
36487: LD_VAR 0 1
36491: PUSH
36492: LD_EXP 125
36496: IN
36497: NOT
36498: IFFALSE 36502
// exit ;
36500: GO 36613
// index := GetElementIndex ( hackTanks , hack ) ;
36502: LD_ADDR_VAR 0 4
36506: PUSH
36507: LD_EXP 125
36511: PPUSH
36512: LD_VAR 0 1
36516: PPUSH
36517: CALL 44230 0 2
36521: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36522: LD_EXP 126
36526: PUSH
36527: LD_VAR 0 4
36531: ARRAY
36532: IFFALSE 36613
// begin for i in hackTanksCaptured [ index ] do
36534: LD_ADDR_VAR 0 3
36538: PUSH
36539: LD_EXP 126
36543: PUSH
36544: LD_VAR 0 4
36548: ARRAY
36549: PUSH
36550: FOR_IN
36551: IFFALSE 36577
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36553: LD_VAR 0 3
36557: PUSH
36558: LD_INT 1
36560: ARRAY
36561: PPUSH
36562: LD_VAR 0 3
36566: PUSH
36567: LD_INT 2
36569: ARRAY
36570: PPUSH
36571: CALL_OW 235
36575: GO 36550
36577: POP
36578: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36579: LD_ADDR_EXP 126
36583: PUSH
36584: LD_EXP 126
36588: PPUSH
36589: LD_VAR 0 4
36593: PPUSH
36594: EMPTY
36595: PPUSH
36596: CALL_OW 1
36600: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36601: LD_VAR 0 1
36605: PPUSH
36606: LD_INT 0
36608: PPUSH
36609: CALL_OW 505
// end ; end ;
36613: LD_VAR 0 2
36617: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36618: LD_INT 0
36620: PPUSH
36621: PPUSH
36622: PPUSH
// if not hack in hackTanks or not vehicles then
36623: LD_VAR 0 1
36627: PUSH
36628: LD_EXP 125
36632: IN
36633: NOT
36634: PUSH
36635: LD_VAR 0 2
36639: NOT
36640: OR
36641: IFFALSE 36645
// exit ;
36643: GO 36920
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36645: LD_ADDR_VAR 0 2
36649: PUSH
36650: LD_VAR 0 1
36654: PPUSH
36655: LD_VAR 0 2
36659: PPUSH
36660: LD_INT 1
36662: PPUSH
36663: LD_INT 1
36665: PPUSH
36666: CALL 44880 0 4
36670: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36671: LD_ADDR_VAR 0 5
36675: PUSH
36676: LD_EXP 125
36680: PPUSH
36681: LD_VAR 0 1
36685: PPUSH
36686: CALL 44230 0 2
36690: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36691: LD_EXP 126
36695: PUSH
36696: LD_VAR 0 5
36700: ARRAY
36701: PUSH
36702: LD_EXP 127
36706: LESS
36707: IFFALSE 36896
// begin for i := 1 to vehicles do
36709: LD_ADDR_VAR 0 4
36713: PUSH
36714: DOUBLE
36715: LD_INT 1
36717: DEC
36718: ST_TO_ADDR
36719: LD_VAR 0 2
36723: PUSH
36724: FOR_TO
36725: IFFALSE 36894
// begin if hackTanksCaptured [ index ] = hackLimit then
36727: LD_EXP 126
36731: PUSH
36732: LD_VAR 0 5
36736: ARRAY
36737: PUSH
36738: LD_EXP 127
36742: EQUAL
36743: IFFALSE 36747
// break ;
36745: GO 36894
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36747: LD_ADDR_EXP 129
36751: PUSH
36752: LD_EXP 129
36756: PPUSH
36757: LD_VAR 0 5
36761: PPUSH
36762: LD_EXP 129
36766: PUSH
36767: LD_VAR 0 5
36771: ARRAY
36772: PUSH
36773: LD_INT 1
36775: PLUS
36776: PPUSH
36777: CALL_OW 1
36781: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36782: LD_ADDR_EXP 126
36786: PUSH
36787: LD_EXP 126
36791: PPUSH
36792: LD_VAR 0 5
36796: PUSH
36797: LD_EXP 126
36801: PUSH
36802: LD_VAR 0 5
36806: ARRAY
36807: PUSH
36808: LD_INT 1
36810: PLUS
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PPUSH
36816: LD_VAR 0 2
36820: PUSH
36821: LD_VAR 0 4
36825: ARRAY
36826: PUSH
36827: LD_VAR 0 2
36831: PUSH
36832: LD_VAR 0 4
36836: ARRAY
36837: PPUSH
36838: CALL_OW 255
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PPUSH
36847: CALL 44445 0 3
36851: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36852: LD_VAR 0 2
36856: PUSH
36857: LD_VAR 0 4
36861: ARRAY
36862: PPUSH
36863: LD_VAR 0 1
36867: PPUSH
36868: CALL_OW 255
36872: PPUSH
36873: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36877: LD_VAR 0 2
36881: PUSH
36882: LD_VAR 0 4
36886: ARRAY
36887: PPUSH
36888: CALL_OW 141
// end ;
36892: GO 36724
36894: POP
36895: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36896: LD_VAR 0 1
36900: PPUSH
36901: LD_EXP 126
36905: PUSH
36906: LD_VAR 0 5
36910: ARRAY
36911: PUSH
36912: LD_INT 0
36914: PLUS
36915: PPUSH
36916: CALL_OW 505
// end ;
36920: LD_VAR 0 3
36924: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36925: LD_INT 0
36927: PPUSH
36928: PPUSH
36929: PPUSH
36930: PPUSH
// if not hack in hackTanks then
36931: LD_VAR 0 1
36935: PUSH
36936: LD_EXP 125
36940: IN
36941: NOT
36942: IFFALSE 36946
// exit ;
36944: GO 37186
// index := GetElementIndex ( hackTanks , hack ) ;
36946: LD_ADDR_VAR 0 4
36950: PUSH
36951: LD_EXP 125
36955: PPUSH
36956: LD_VAR 0 1
36960: PPUSH
36961: CALL 44230 0 2
36965: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36966: LD_ADDR_VAR 0 3
36970: PUSH
36971: DOUBLE
36972: LD_EXP 126
36976: PUSH
36977: LD_VAR 0 4
36981: ARRAY
36982: INC
36983: ST_TO_ADDR
36984: LD_INT 1
36986: PUSH
36987: FOR_DOWNTO
36988: IFFALSE 37160
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36990: LD_ADDR_VAR 0 5
36994: PUSH
36995: LD_EXP 126
36999: PUSH
37000: LD_VAR 0 4
37004: ARRAY
37005: PUSH
37006: LD_VAR 0 3
37010: ARRAY
37011: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37012: LD_VAR 0 5
37016: PUSH
37017: LD_INT 1
37019: ARRAY
37020: PPUSH
37021: CALL_OW 302
37025: NOT
37026: PUSH
37027: LD_VAR 0 5
37031: PUSH
37032: LD_INT 1
37034: ARRAY
37035: PPUSH
37036: CALL_OW 255
37040: PUSH
37041: LD_VAR 0 1
37045: PPUSH
37046: CALL_OW 255
37050: NONEQUAL
37051: OR
37052: IFFALSE 37158
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37054: LD_VAR 0 5
37058: PUSH
37059: LD_INT 1
37061: ARRAY
37062: PPUSH
37063: CALL_OW 305
37067: PUSH
37068: LD_VAR 0 5
37072: PUSH
37073: LD_INT 1
37075: ARRAY
37076: PPUSH
37077: CALL_OW 255
37081: PUSH
37082: LD_VAR 0 1
37086: PPUSH
37087: CALL_OW 255
37091: EQUAL
37092: AND
37093: IFFALSE 37117
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37095: LD_VAR 0 5
37099: PUSH
37100: LD_INT 1
37102: ARRAY
37103: PPUSH
37104: LD_VAR 0 5
37108: PUSH
37109: LD_INT 2
37111: ARRAY
37112: PPUSH
37113: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37117: LD_ADDR_EXP 126
37121: PUSH
37122: LD_EXP 126
37126: PPUSH
37127: LD_VAR 0 4
37131: PPUSH
37132: LD_EXP 126
37136: PUSH
37137: LD_VAR 0 4
37141: ARRAY
37142: PPUSH
37143: LD_VAR 0 3
37147: PPUSH
37148: CALL_OW 3
37152: PPUSH
37153: CALL_OW 1
37157: ST_TO_ADDR
// end ; end ;
37158: GO 36987
37160: POP
37161: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37162: LD_VAR 0 1
37166: PPUSH
37167: LD_EXP 126
37171: PUSH
37172: LD_VAR 0 4
37176: ARRAY
37177: PUSH
37178: LD_INT 0
37180: PLUS
37181: PPUSH
37182: CALL_OW 505
// end ;
37186: LD_VAR 0 2
37190: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37191: LD_INT 0
37193: PPUSH
37194: PPUSH
37195: PPUSH
37196: PPUSH
// if not hack in hackTanks then
37197: LD_VAR 0 1
37201: PUSH
37202: LD_EXP 125
37206: IN
37207: NOT
37208: IFFALSE 37212
// exit ;
37210: GO 37297
// index := GetElementIndex ( hackTanks , hack ) ;
37212: LD_ADDR_VAR 0 5
37216: PUSH
37217: LD_EXP 125
37221: PPUSH
37222: LD_VAR 0 1
37226: PPUSH
37227: CALL 44230 0 2
37231: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37232: LD_ADDR_VAR 0 4
37236: PUSH
37237: DOUBLE
37238: LD_INT 1
37240: DEC
37241: ST_TO_ADDR
37242: LD_EXP 126
37246: PUSH
37247: LD_VAR 0 5
37251: ARRAY
37252: PUSH
37253: FOR_TO
37254: IFFALSE 37295
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37256: LD_EXP 126
37260: PUSH
37261: LD_VAR 0 5
37265: ARRAY
37266: PUSH
37267: LD_VAR 0 4
37271: ARRAY
37272: PUSH
37273: LD_INT 1
37275: ARRAY
37276: PUSH
37277: LD_VAR 0 2
37281: EQUAL
37282: IFFALSE 37293
// KillUnit ( vehicle ) ;
37284: LD_VAR 0 2
37288: PPUSH
37289: CALL_OW 66
37293: GO 37253
37295: POP
37296: POP
// end ;
37297: LD_VAR 0 3
37301: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37302: LD_EXP 130
37306: NOT
37307: IFFALSE 37342
37309: GO 37311
37311: DISABLE
// begin initMiner := true ;
37312: LD_ADDR_EXP 130
37316: PUSH
37317: LD_INT 1
37319: ST_TO_ADDR
// minersList := [ ] ;
37320: LD_ADDR_EXP 131
37324: PUSH
37325: EMPTY
37326: ST_TO_ADDR
// minerMinesList := [ ] ;
37327: LD_ADDR_EXP 132
37331: PUSH
37332: EMPTY
37333: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37334: LD_ADDR_EXP 133
37338: PUSH
37339: LD_INT 5
37341: ST_TO_ADDR
// end ;
37342: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37343: LD_EXP 130
37347: PUSH
37348: LD_INT 34
37350: PUSH
37351: LD_INT 81
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PPUSH
37358: CALL_OW 69
37362: AND
37363: IFFALSE 37824
37365: GO 37367
37367: DISABLE
37368: LD_INT 0
37370: PPUSH
37371: PPUSH
37372: PPUSH
37373: PPUSH
// begin enable ;
37374: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37375: LD_ADDR_VAR 0 1
37379: PUSH
37380: LD_INT 34
37382: PUSH
37383: LD_INT 81
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PPUSH
37390: CALL_OW 69
37394: PUSH
37395: FOR_IN
37396: IFFALSE 37468
// begin if not i in minersList then
37398: LD_VAR 0 1
37402: PUSH
37403: LD_EXP 131
37407: IN
37408: NOT
37409: IFFALSE 37466
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37411: LD_ADDR_EXP 131
37415: PUSH
37416: LD_EXP 131
37420: PPUSH
37421: LD_EXP 131
37425: PUSH
37426: LD_INT 1
37428: PLUS
37429: PPUSH
37430: LD_VAR 0 1
37434: PPUSH
37435: CALL_OW 1
37439: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37440: LD_ADDR_EXP 132
37444: PUSH
37445: LD_EXP 132
37449: PPUSH
37450: LD_EXP 132
37454: PUSH
37455: LD_INT 1
37457: PLUS
37458: PPUSH
37459: EMPTY
37460: PPUSH
37461: CALL_OW 1
37465: ST_TO_ADDR
// end end ;
37466: GO 37395
37468: POP
37469: POP
// for i := minerMinesList downto 1 do
37470: LD_ADDR_VAR 0 1
37474: PUSH
37475: DOUBLE
37476: LD_EXP 132
37480: INC
37481: ST_TO_ADDR
37482: LD_INT 1
37484: PUSH
37485: FOR_DOWNTO
37486: IFFALSE 37822
// begin if IsLive ( minersList [ i ] ) then
37488: LD_EXP 131
37492: PUSH
37493: LD_VAR 0 1
37497: ARRAY
37498: PPUSH
37499: CALL_OW 300
37503: IFFALSE 37531
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37505: LD_EXP 131
37509: PUSH
37510: LD_VAR 0 1
37514: ARRAY
37515: PPUSH
37516: LD_EXP 132
37520: PUSH
37521: LD_VAR 0 1
37525: ARRAY
37526: PPUSH
37527: CALL_OW 505
// if not minerMinesList [ i ] then
37531: LD_EXP 132
37535: PUSH
37536: LD_VAR 0 1
37540: ARRAY
37541: NOT
37542: IFFALSE 37546
// continue ;
37544: GO 37485
// for j := minerMinesList [ i ] downto 1 do
37546: LD_ADDR_VAR 0 2
37550: PUSH
37551: DOUBLE
37552: LD_EXP 132
37556: PUSH
37557: LD_VAR 0 1
37561: ARRAY
37562: INC
37563: ST_TO_ADDR
37564: LD_INT 1
37566: PUSH
37567: FOR_DOWNTO
37568: IFFALSE 37818
// begin side := GetSide ( minersList [ i ] ) ;
37570: LD_ADDR_VAR 0 3
37574: PUSH
37575: LD_EXP 131
37579: PUSH
37580: LD_VAR 0 1
37584: ARRAY
37585: PPUSH
37586: CALL_OW 255
37590: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37591: LD_ADDR_VAR 0 4
37595: PUSH
37596: LD_EXP 132
37600: PUSH
37601: LD_VAR 0 1
37605: ARRAY
37606: PUSH
37607: LD_VAR 0 2
37611: ARRAY
37612: PUSH
37613: LD_INT 1
37615: ARRAY
37616: PPUSH
37617: LD_EXP 132
37621: PUSH
37622: LD_VAR 0 1
37626: ARRAY
37627: PUSH
37628: LD_VAR 0 2
37632: ARRAY
37633: PUSH
37634: LD_INT 2
37636: ARRAY
37637: PPUSH
37638: CALL_OW 428
37642: ST_TO_ADDR
// if not tmp then
37643: LD_VAR 0 4
37647: NOT
37648: IFFALSE 37652
// continue ;
37650: GO 37567
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37652: LD_VAR 0 4
37656: PUSH
37657: LD_INT 81
37659: PUSH
37660: LD_VAR 0 3
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PPUSH
37669: CALL_OW 69
37673: IN
37674: PUSH
37675: LD_EXP 132
37679: PUSH
37680: LD_VAR 0 1
37684: ARRAY
37685: PUSH
37686: LD_VAR 0 2
37690: ARRAY
37691: PUSH
37692: LD_INT 1
37694: ARRAY
37695: PPUSH
37696: LD_EXP 132
37700: PUSH
37701: LD_VAR 0 1
37705: ARRAY
37706: PUSH
37707: LD_VAR 0 2
37711: ARRAY
37712: PUSH
37713: LD_INT 2
37715: ARRAY
37716: PPUSH
37717: CALL_OW 458
37721: AND
37722: IFFALSE 37816
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37724: LD_EXP 132
37728: PUSH
37729: LD_VAR 0 1
37733: ARRAY
37734: PUSH
37735: LD_VAR 0 2
37739: ARRAY
37740: PUSH
37741: LD_INT 1
37743: ARRAY
37744: PPUSH
37745: LD_EXP 132
37749: PUSH
37750: LD_VAR 0 1
37754: ARRAY
37755: PUSH
37756: LD_VAR 0 2
37760: ARRAY
37761: PUSH
37762: LD_INT 2
37764: ARRAY
37765: PPUSH
37766: LD_VAR 0 3
37770: PPUSH
37771: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37775: LD_ADDR_EXP 132
37779: PUSH
37780: LD_EXP 132
37784: PPUSH
37785: LD_VAR 0 1
37789: PPUSH
37790: LD_EXP 132
37794: PUSH
37795: LD_VAR 0 1
37799: ARRAY
37800: PPUSH
37801: LD_VAR 0 2
37805: PPUSH
37806: CALL_OW 3
37810: PPUSH
37811: CALL_OW 1
37815: ST_TO_ADDR
// end ; end ;
37816: GO 37567
37818: POP
37819: POP
// end ;
37820: GO 37485
37822: POP
37823: POP
// end ;
37824: PPOPN 4
37826: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37827: LD_INT 0
37829: PPUSH
37830: PPUSH
// result := false ;
37831: LD_ADDR_VAR 0 4
37835: PUSH
37836: LD_INT 0
37838: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37839: LD_VAR 0 1
37843: PPUSH
37844: CALL_OW 264
37848: PUSH
37849: LD_INT 81
37851: EQUAL
37852: NOT
37853: IFFALSE 37857
// exit ;
37855: GO 38097
// index := GetElementIndex ( minersList , unit ) ;
37857: LD_ADDR_VAR 0 5
37861: PUSH
37862: LD_EXP 131
37866: PPUSH
37867: LD_VAR 0 1
37871: PPUSH
37872: CALL 44230 0 2
37876: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37877: LD_EXP 132
37881: PUSH
37882: LD_VAR 0 5
37886: ARRAY
37887: PUSH
37888: LD_EXP 133
37892: GREATEREQUAL
37893: IFFALSE 37897
// exit ;
37895: GO 38097
// ComMoveXY ( unit , x , y ) ;
37897: LD_VAR 0 1
37901: PPUSH
37902: LD_VAR 0 2
37906: PPUSH
37907: LD_VAR 0 3
37911: PPUSH
37912: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37916: LD_INT 35
37918: PPUSH
37919: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37923: LD_VAR 0 1
37927: PPUSH
37928: LD_VAR 0 2
37932: PPUSH
37933: LD_VAR 0 3
37937: PPUSH
37938: CALL 75585 0 3
37942: NOT
37943: PUSH
37944: LD_VAR 0 1
37948: PPUSH
37949: CALL_OW 314
37953: AND
37954: IFFALSE 37958
// exit ;
37956: GO 38097
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37958: LD_VAR 0 2
37962: PPUSH
37963: LD_VAR 0 3
37967: PPUSH
37968: CALL_OW 428
37972: PUSH
37973: LD_VAR 0 1
37977: EQUAL
37978: PUSH
37979: LD_VAR 0 1
37983: PPUSH
37984: CALL_OW 314
37988: NOT
37989: AND
37990: IFFALSE 37916
// PlaySoundXY ( x , y , PlantMine ) ;
37992: LD_VAR 0 2
37996: PPUSH
37997: LD_VAR 0 3
38001: PPUSH
38002: LD_STRING PlantMine
38004: PPUSH
38005: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38009: LD_VAR 0 2
38013: PPUSH
38014: LD_VAR 0 3
38018: PPUSH
38019: LD_VAR 0 1
38023: PPUSH
38024: CALL_OW 255
38028: PPUSH
38029: LD_INT 0
38031: PPUSH
38032: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38036: LD_ADDR_EXP 132
38040: PUSH
38041: LD_EXP 132
38045: PPUSH
38046: LD_VAR 0 5
38050: PUSH
38051: LD_EXP 132
38055: PUSH
38056: LD_VAR 0 5
38060: ARRAY
38061: PUSH
38062: LD_INT 1
38064: PLUS
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PPUSH
38070: LD_VAR 0 2
38074: PUSH
38075: LD_VAR 0 3
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PPUSH
38084: CALL 44445 0 3
38088: ST_TO_ADDR
// result := true ;
38089: LD_ADDR_VAR 0 4
38093: PUSH
38094: LD_INT 1
38096: ST_TO_ADDR
// end ;
38097: LD_VAR 0 4
38101: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38102: LD_INT 0
38104: PPUSH
38105: PPUSH
38106: PPUSH
// if not unit in minersList then
38107: LD_VAR 0 1
38111: PUSH
38112: LD_EXP 131
38116: IN
38117: NOT
38118: IFFALSE 38122
// exit ;
38120: GO 38514
// index := GetElementIndex ( minersList , unit ) ;
38122: LD_ADDR_VAR 0 6
38126: PUSH
38127: LD_EXP 131
38131: PPUSH
38132: LD_VAR 0 1
38136: PPUSH
38137: CALL 44230 0 2
38141: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38142: LD_ADDR_VAR 0 5
38146: PUSH
38147: DOUBLE
38148: LD_EXP 132
38152: PUSH
38153: LD_VAR 0 6
38157: ARRAY
38158: INC
38159: ST_TO_ADDR
38160: LD_INT 1
38162: PUSH
38163: FOR_DOWNTO
38164: IFFALSE 38325
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38166: LD_EXP 132
38170: PUSH
38171: LD_VAR 0 6
38175: ARRAY
38176: PUSH
38177: LD_VAR 0 5
38181: ARRAY
38182: PUSH
38183: LD_INT 1
38185: ARRAY
38186: PUSH
38187: LD_VAR 0 2
38191: EQUAL
38192: PUSH
38193: LD_EXP 132
38197: PUSH
38198: LD_VAR 0 6
38202: ARRAY
38203: PUSH
38204: LD_VAR 0 5
38208: ARRAY
38209: PUSH
38210: LD_INT 2
38212: ARRAY
38213: PUSH
38214: LD_VAR 0 3
38218: EQUAL
38219: AND
38220: IFFALSE 38323
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38222: LD_EXP 132
38226: PUSH
38227: LD_VAR 0 6
38231: ARRAY
38232: PUSH
38233: LD_VAR 0 5
38237: ARRAY
38238: PUSH
38239: LD_INT 1
38241: ARRAY
38242: PPUSH
38243: LD_EXP 132
38247: PUSH
38248: LD_VAR 0 6
38252: ARRAY
38253: PUSH
38254: LD_VAR 0 5
38258: ARRAY
38259: PUSH
38260: LD_INT 2
38262: ARRAY
38263: PPUSH
38264: LD_VAR 0 1
38268: PPUSH
38269: CALL_OW 255
38273: PPUSH
38274: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38278: LD_ADDR_EXP 132
38282: PUSH
38283: LD_EXP 132
38287: PPUSH
38288: LD_VAR 0 6
38292: PPUSH
38293: LD_EXP 132
38297: PUSH
38298: LD_VAR 0 6
38302: ARRAY
38303: PPUSH
38304: LD_VAR 0 5
38308: PPUSH
38309: CALL_OW 3
38313: PPUSH
38314: CALL_OW 1
38318: ST_TO_ADDR
// exit ;
38319: POP
38320: POP
38321: GO 38514
// end ; end ;
38323: GO 38163
38325: POP
38326: POP
// for i := minerMinesList [ index ] downto 1 do
38327: LD_ADDR_VAR 0 5
38331: PUSH
38332: DOUBLE
38333: LD_EXP 132
38337: PUSH
38338: LD_VAR 0 6
38342: ARRAY
38343: INC
38344: ST_TO_ADDR
38345: LD_INT 1
38347: PUSH
38348: FOR_DOWNTO
38349: IFFALSE 38512
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38351: LD_EXP 132
38355: PUSH
38356: LD_VAR 0 6
38360: ARRAY
38361: PUSH
38362: LD_VAR 0 5
38366: ARRAY
38367: PUSH
38368: LD_INT 1
38370: ARRAY
38371: PPUSH
38372: LD_EXP 132
38376: PUSH
38377: LD_VAR 0 6
38381: ARRAY
38382: PUSH
38383: LD_VAR 0 5
38387: ARRAY
38388: PUSH
38389: LD_INT 2
38391: ARRAY
38392: PPUSH
38393: LD_VAR 0 2
38397: PPUSH
38398: LD_VAR 0 3
38402: PPUSH
38403: CALL_OW 298
38407: PUSH
38408: LD_INT 6
38410: LESS
38411: IFFALSE 38510
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38413: LD_EXP 132
38417: PUSH
38418: LD_VAR 0 6
38422: ARRAY
38423: PUSH
38424: LD_VAR 0 5
38428: ARRAY
38429: PUSH
38430: LD_INT 1
38432: ARRAY
38433: PPUSH
38434: LD_EXP 132
38438: PUSH
38439: LD_VAR 0 6
38443: ARRAY
38444: PUSH
38445: LD_VAR 0 5
38449: ARRAY
38450: PUSH
38451: LD_INT 2
38453: ARRAY
38454: PPUSH
38455: LD_VAR 0 1
38459: PPUSH
38460: CALL_OW 255
38464: PPUSH
38465: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38469: LD_ADDR_EXP 132
38473: PUSH
38474: LD_EXP 132
38478: PPUSH
38479: LD_VAR 0 6
38483: PPUSH
38484: LD_EXP 132
38488: PUSH
38489: LD_VAR 0 6
38493: ARRAY
38494: PPUSH
38495: LD_VAR 0 5
38499: PPUSH
38500: CALL_OW 3
38504: PPUSH
38505: CALL_OW 1
38509: ST_TO_ADDR
// end ; end ;
38510: GO 38348
38512: POP
38513: POP
// end ;
38514: LD_VAR 0 4
38518: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38519: LD_INT 0
38521: PPUSH
38522: PPUSH
38523: PPUSH
38524: PPUSH
38525: PPUSH
38526: PPUSH
38527: PPUSH
38528: PPUSH
38529: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38530: LD_VAR 0 1
38534: PPUSH
38535: CALL_OW 264
38539: PUSH
38540: LD_INT 81
38542: EQUAL
38543: NOT
38544: PUSH
38545: LD_VAR 0 1
38549: PUSH
38550: LD_EXP 131
38554: IN
38555: NOT
38556: OR
38557: IFFALSE 38561
// exit ;
38559: GO 38883
// index := GetElementIndex ( minersList , unit ) ;
38561: LD_ADDR_VAR 0 6
38565: PUSH
38566: LD_EXP 131
38570: PPUSH
38571: LD_VAR 0 1
38575: PPUSH
38576: CALL 44230 0 2
38580: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38581: LD_ADDR_VAR 0 8
38585: PUSH
38586: LD_EXP 133
38590: PUSH
38591: LD_EXP 132
38595: PUSH
38596: LD_VAR 0 6
38600: ARRAY
38601: MINUS
38602: ST_TO_ADDR
// if not minesFreeAmount then
38603: LD_VAR 0 8
38607: NOT
38608: IFFALSE 38612
// exit ;
38610: GO 38883
// tmp := [ ] ;
38612: LD_ADDR_VAR 0 7
38616: PUSH
38617: EMPTY
38618: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38619: LD_ADDR_VAR 0 5
38623: PUSH
38624: DOUBLE
38625: LD_INT 1
38627: DEC
38628: ST_TO_ADDR
38629: LD_VAR 0 8
38633: PUSH
38634: FOR_TO
38635: IFFALSE 38830
// begin _d := rand ( 0 , 5 ) ;
38637: LD_ADDR_VAR 0 11
38641: PUSH
38642: LD_INT 0
38644: PPUSH
38645: LD_INT 5
38647: PPUSH
38648: CALL_OW 12
38652: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38653: LD_ADDR_VAR 0 12
38657: PUSH
38658: LD_INT 2
38660: PPUSH
38661: LD_INT 6
38663: PPUSH
38664: CALL_OW 12
38668: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38669: LD_ADDR_VAR 0 9
38673: PUSH
38674: LD_VAR 0 2
38678: PPUSH
38679: LD_VAR 0 11
38683: PPUSH
38684: LD_VAR 0 12
38688: PPUSH
38689: CALL_OW 272
38693: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38694: LD_ADDR_VAR 0 10
38698: PUSH
38699: LD_VAR 0 3
38703: PPUSH
38704: LD_VAR 0 11
38708: PPUSH
38709: LD_VAR 0 12
38713: PPUSH
38714: CALL_OW 273
38718: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38719: LD_VAR 0 9
38723: PPUSH
38724: LD_VAR 0 10
38728: PPUSH
38729: CALL_OW 488
38733: PUSH
38734: LD_VAR 0 9
38738: PUSH
38739: LD_VAR 0 10
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_VAR 0 7
38752: IN
38753: NOT
38754: AND
38755: PUSH
38756: LD_VAR 0 9
38760: PPUSH
38761: LD_VAR 0 10
38765: PPUSH
38766: CALL_OW 458
38770: NOT
38771: AND
38772: IFFALSE 38814
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38774: LD_ADDR_VAR 0 7
38778: PUSH
38779: LD_VAR 0 7
38783: PPUSH
38784: LD_VAR 0 7
38788: PUSH
38789: LD_INT 1
38791: PLUS
38792: PPUSH
38793: LD_VAR 0 9
38797: PUSH
38798: LD_VAR 0 10
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PPUSH
38807: CALL_OW 1
38811: ST_TO_ADDR
38812: GO 38828
// i := i - 1 ;
38814: LD_ADDR_VAR 0 5
38818: PUSH
38819: LD_VAR 0 5
38823: PUSH
38824: LD_INT 1
38826: MINUS
38827: ST_TO_ADDR
// end ;
38828: GO 38634
38830: POP
38831: POP
// for i in tmp do
38832: LD_ADDR_VAR 0 5
38836: PUSH
38837: LD_VAR 0 7
38841: PUSH
38842: FOR_IN
38843: IFFALSE 38881
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38845: LD_VAR 0 1
38849: PPUSH
38850: LD_VAR 0 5
38854: PUSH
38855: LD_INT 1
38857: ARRAY
38858: PPUSH
38859: LD_VAR 0 5
38863: PUSH
38864: LD_INT 2
38866: ARRAY
38867: PPUSH
38868: CALL 37827 0 3
38872: NOT
38873: IFFALSE 38879
// exit ;
38875: POP
38876: POP
38877: GO 38883
38879: GO 38842
38881: POP
38882: POP
// end ;
38883: LD_VAR 0 4
38887: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38888: LD_INT 0
38890: PPUSH
38891: PPUSH
38892: PPUSH
38893: PPUSH
38894: PPUSH
38895: PPUSH
38896: PPUSH
// if not GetClass ( unit ) = class_sniper then
38897: LD_VAR 0 1
38901: PPUSH
38902: CALL_OW 257
38906: PUSH
38907: LD_INT 5
38909: EQUAL
38910: NOT
38911: IFFALSE 38915
// exit ;
38913: GO 39303
// dist := 8 ;
38915: LD_ADDR_VAR 0 5
38919: PUSH
38920: LD_INT 8
38922: ST_TO_ADDR
// viewRange := 12 ;
38923: LD_ADDR_VAR 0 7
38927: PUSH
38928: LD_INT 12
38930: ST_TO_ADDR
// side := GetSide ( unit ) ;
38931: LD_ADDR_VAR 0 6
38935: PUSH
38936: LD_VAR 0 1
38940: PPUSH
38941: CALL_OW 255
38945: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38946: LD_INT 61
38948: PPUSH
38949: LD_VAR 0 6
38953: PPUSH
38954: CALL_OW 321
38958: PUSH
38959: LD_INT 2
38961: EQUAL
38962: IFFALSE 38972
// viewRange := 16 ;
38964: LD_ADDR_VAR 0 7
38968: PUSH
38969: LD_INT 16
38971: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38972: LD_VAR 0 1
38976: PPUSH
38977: LD_VAR 0 2
38981: PPUSH
38982: LD_VAR 0 3
38986: PPUSH
38987: CALL_OW 297
38991: PUSH
38992: LD_VAR 0 5
38996: GREATER
38997: IFFALSE 39076
// begin ComMoveXY ( unit , x , y ) ;
38999: LD_VAR 0 1
39003: PPUSH
39004: LD_VAR 0 2
39008: PPUSH
39009: LD_VAR 0 3
39013: PPUSH
39014: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39018: LD_INT 35
39020: PPUSH
39021: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39025: LD_VAR 0 1
39029: PPUSH
39030: LD_VAR 0 2
39034: PPUSH
39035: LD_VAR 0 3
39039: PPUSH
39040: CALL 75585 0 3
39044: NOT
39045: IFFALSE 39049
// exit ;
39047: GO 39303
// until GetDistUnitXY ( unit , x , y ) < dist ;
39049: LD_VAR 0 1
39053: PPUSH
39054: LD_VAR 0 2
39058: PPUSH
39059: LD_VAR 0 3
39063: PPUSH
39064: CALL_OW 297
39068: PUSH
39069: LD_VAR 0 5
39073: LESS
39074: IFFALSE 39018
// end ; ComTurnXY ( unit , x , y ) ;
39076: LD_VAR 0 1
39080: PPUSH
39081: LD_VAR 0 2
39085: PPUSH
39086: LD_VAR 0 3
39090: PPUSH
39091: CALL_OW 118
// wait ( 5 ) ;
39095: LD_INT 5
39097: PPUSH
39098: CALL_OW 67
// _d := GetDir ( unit ) ;
39102: LD_ADDR_VAR 0 10
39106: PUSH
39107: LD_VAR 0 1
39111: PPUSH
39112: CALL_OW 254
39116: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39117: LD_ADDR_VAR 0 8
39121: PUSH
39122: LD_VAR 0 1
39126: PPUSH
39127: CALL_OW 250
39131: PPUSH
39132: LD_VAR 0 10
39136: PPUSH
39137: LD_VAR 0 5
39141: PPUSH
39142: CALL_OW 272
39146: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39147: LD_ADDR_VAR 0 9
39151: PUSH
39152: LD_VAR 0 1
39156: PPUSH
39157: CALL_OW 251
39161: PPUSH
39162: LD_VAR 0 10
39166: PPUSH
39167: LD_VAR 0 5
39171: PPUSH
39172: CALL_OW 273
39176: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39177: LD_VAR 0 8
39181: PPUSH
39182: LD_VAR 0 9
39186: PPUSH
39187: CALL_OW 488
39191: NOT
39192: IFFALSE 39196
// exit ;
39194: GO 39303
// ComAnimCustom ( unit , 1 ) ;
39196: LD_VAR 0 1
39200: PPUSH
39201: LD_INT 1
39203: PPUSH
39204: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39208: LD_VAR 0 8
39212: PPUSH
39213: LD_VAR 0 9
39217: PPUSH
39218: LD_VAR 0 6
39222: PPUSH
39223: LD_VAR 0 7
39227: PPUSH
39228: CALL_OW 330
// repeat wait ( 1 ) ;
39232: LD_INT 1
39234: PPUSH
39235: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39239: LD_VAR 0 1
39243: PPUSH
39244: CALL_OW 316
39248: PUSH
39249: LD_VAR 0 1
39253: PPUSH
39254: CALL_OW 314
39258: OR
39259: PUSH
39260: LD_VAR 0 1
39264: PPUSH
39265: CALL_OW 302
39269: NOT
39270: OR
39271: PUSH
39272: LD_VAR 0 1
39276: PPUSH
39277: CALL_OW 301
39281: OR
39282: IFFALSE 39232
// RemoveSeeing ( _x , _y , side ) ;
39284: LD_VAR 0 8
39288: PPUSH
39289: LD_VAR 0 9
39293: PPUSH
39294: LD_VAR 0 6
39298: PPUSH
39299: CALL_OW 331
// end ; end_of_file
39303: LD_VAR 0 4
39307: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39308: LD_INT 0
39310: PPUSH
39311: PPUSH
// if exist_mode then
39312: LD_VAR 0 2
39316: IFFALSE 39341
// unit := CreateCharacter ( prefix & ident ) else
39318: LD_ADDR_VAR 0 5
39322: PUSH
39323: LD_VAR 0 3
39327: PUSH
39328: LD_VAR 0 1
39332: STR
39333: PPUSH
39334: CALL_OW 34
39338: ST_TO_ADDR
39339: GO 39356
// unit := NewCharacter ( ident ) ;
39341: LD_ADDR_VAR 0 5
39345: PUSH
39346: LD_VAR 0 1
39350: PPUSH
39351: CALL_OW 25
39355: ST_TO_ADDR
// result := unit ;
39356: LD_ADDR_VAR 0 4
39360: PUSH
39361: LD_VAR 0 5
39365: ST_TO_ADDR
// end ;
39366: LD_VAR 0 4
39370: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39371: LD_INT 0
39373: PPUSH
39374: PPUSH
// if not side or not nation then
39375: LD_VAR 0 1
39379: NOT
39380: PUSH
39381: LD_VAR 0 2
39385: NOT
39386: OR
39387: IFFALSE 39391
// exit ;
39389: GO 40159
// case nation of nation_american :
39391: LD_VAR 0 2
39395: PUSH
39396: LD_INT 1
39398: DOUBLE
39399: EQUAL
39400: IFTRUE 39404
39402: GO 39618
39404: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39405: LD_ADDR_VAR 0 4
39409: PUSH
39410: LD_INT 35
39412: PUSH
39413: LD_INT 45
39415: PUSH
39416: LD_INT 46
39418: PUSH
39419: LD_INT 47
39421: PUSH
39422: LD_INT 82
39424: PUSH
39425: LD_INT 83
39427: PUSH
39428: LD_INT 84
39430: PUSH
39431: LD_INT 85
39433: PUSH
39434: LD_INT 86
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: LD_INT 2
39442: PUSH
39443: LD_INT 6
39445: PUSH
39446: LD_INT 15
39448: PUSH
39449: LD_INT 16
39451: PUSH
39452: LD_INT 7
39454: PUSH
39455: LD_INT 12
39457: PUSH
39458: LD_INT 13
39460: PUSH
39461: LD_INT 10
39463: PUSH
39464: LD_INT 14
39466: PUSH
39467: LD_INT 20
39469: PUSH
39470: LD_INT 21
39472: PUSH
39473: LD_INT 22
39475: PUSH
39476: LD_INT 25
39478: PUSH
39479: LD_INT 32
39481: PUSH
39482: LD_INT 27
39484: PUSH
39485: LD_INT 36
39487: PUSH
39488: LD_INT 69
39490: PUSH
39491: LD_INT 39
39493: PUSH
39494: LD_INT 34
39496: PUSH
39497: LD_INT 40
39499: PUSH
39500: LD_INT 48
39502: PUSH
39503: LD_INT 49
39505: PUSH
39506: LD_INT 50
39508: PUSH
39509: LD_INT 51
39511: PUSH
39512: LD_INT 52
39514: PUSH
39515: LD_INT 53
39517: PUSH
39518: LD_INT 54
39520: PUSH
39521: LD_INT 55
39523: PUSH
39524: LD_INT 56
39526: PUSH
39527: LD_INT 57
39529: PUSH
39530: LD_INT 58
39532: PUSH
39533: LD_INT 59
39535: PUSH
39536: LD_INT 60
39538: PUSH
39539: LD_INT 61
39541: PUSH
39542: LD_INT 62
39544: PUSH
39545: LD_INT 80
39547: PUSH
39548: LD_INT 82
39550: PUSH
39551: LD_INT 83
39553: PUSH
39554: LD_INT 84
39556: PUSH
39557: LD_INT 85
39559: PUSH
39560: LD_INT 86
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: ST_TO_ADDR
39616: GO 40083
39618: LD_INT 2
39620: DOUBLE
39621: EQUAL
39622: IFTRUE 39626
39624: GO 39852
39626: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39627: LD_ADDR_VAR 0 4
39631: PUSH
39632: LD_INT 35
39634: PUSH
39635: LD_INT 45
39637: PUSH
39638: LD_INT 46
39640: PUSH
39641: LD_INT 47
39643: PUSH
39644: LD_INT 82
39646: PUSH
39647: LD_INT 83
39649: PUSH
39650: LD_INT 84
39652: PUSH
39653: LD_INT 85
39655: PUSH
39656: LD_INT 87
39658: PUSH
39659: LD_INT 70
39661: PUSH
39662: LD_INT 1
39664: PUSH
39665: LD_INT 11
39667: PUSH
39668: LD_INT 3
39670: PUSH
39671: LD_INT 4
39673: PUSH
39674: LD_INT 5
39676: PUSH
39677: LD_INT 6
39679: PUSH
39680: LD_INT 15
39682: PUSH
39683: LD_INT 18
39685: PUSH
39686: LD_INT 7
39688: PUSH
39689: LD_INT 17
39691: PUSH
39692: LD_INT 8
39694: PUSH
39695: LD_INT 20
39697: PUSH
39698: LD_INT 21
39700: PUSH
39701: LD_INT 22
39703: PUSH
39704: LD_INT 72
39706: PUSH
39707: LD_INT 26
39709: PUSH
39710: LD_INT 69
39712: PUSH
39713: LD_INT 39
39715: PUSH
39716: LD_INT 40
39718: PUSH
39719: LD_INT 41
39721: PUSH
39722: LD_INT 42
39724: PUSH
39725: LD_INT 43
39727: PUSH
39728: LD_INT 48
39730: PUSH
39731: LD_INT 49
39733: PUSH
39734: LD_INT 50
39736: PUSH
39737: LD_INT 51
39739: PUSH
39740: LD_INT 52
39742: PUSH
39743: LD_INT 53
39745: PUSH
39746: LD_INT 54
39748: PUSH
39749: LD_INT 55
39751: PUSH
39752: LD_INT 56
39754: PUSH
39755: LD_INT 60
39757: PUSH
39758: LD_INT 61
39760: PUSH
39761: LD_INT 62
39763: PUSH
39764: LD_INT 66
39766: PUSH
39767: LD_INT 67
39769: PUSH
39770: LD_INT 68
39772: PUSH
39773: LD_INT 81
39775: PUSH
39776: LD_INT 82
39778: PUSH
39779: LD_INT 83
39781: PUSH
39782: LD_INT 84
39784: PUSH
39785: LD_INT 85
39787: PUSH
39788: LD_INT 87
39790: PUSH
39791: LD_INT 88
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: ST_TO_ADDR
39850: GO 40083
39852: LD_INT 3
39854: DOUBLE
39855: EQUAL
39856: IFTRUE 39860
39858: GO 40082
39860: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39861: LD_ADDR_VAR 0 4
39865: PUSH
39866: LD_INT 46
39868: PUSH
39869: LD_INT 47
39871: PUSH
39872: LD_INT 1
39874: PUSH
39875: LD_INT 2
39877: PUSH
39878: LD_INT 82
39880: PUSH
39881: LD_INT 83
39883: PUSH
39884: LD_INT 84
39886: PUSH
39887: LD_INT 85
39889: PUSH
39890: LD_INT 86
39892: PUSH
39893: LD_INT 11
39895: PUSH
39896: LD_INT 9
39898: PUSH
39899: LD_INT 20
39901: PUSH
39902: LD_INT 19
39904: PUSH
39905: LD_INT 21
39907: PUSH
39908: LD_INT 24
39910: PUSH
39911: LD_INT 22
39913: PUSH
39914: LD_INT 25
39916: PUSH
39917: LD_INT 28
39919: PUSH
39920: LD_INT 29
39922: PUSH
39923: LD_INT 30
39925: PUSH
39926: LD_INT 31
39928: PUSH
39929: LD_INT 37
39931: PUSH
39932: LD_INT 38
39934: PUSH
39935: LD_INT 32
39937: PUSH
39938: LD_INT 27
39940: PUSH
39941: LD_INT 33
39943: PUSH
39944: LD_INT 69
39946: PUSH
39947: LD_INT 39
39949: PUSH
39950: LD_INT 34
39952: PUSH
39953: LD_INT 40
39955: PUSH
39956: LD_INT 71
39958: PUSH
39959: LD_INT 23
39961: PUSH
39962: LD_INT 44
39964: PUSH
39965: LD_INT 48
39967: PUSH
39968: LD_INT 49
39970: PUSH
39971: LD_INT 50
39973: PUSH
39974: LD_INT 51
39976: PUSH
39977: LD_INT 52
39979: PUSH
39980: LD_INT 53
39982: PUSH
39983: LD_INT 54
39985: PUSH
39986: LD_INT 55
39988: PUSH
39989: LD_INT 56
39991: PUSH
39992: LD_INT 57
39994: PUSH
39995: LD_INT 58
39997: PUSH
39998: LD_INT 59
40000: PUSH
40001: LD_INT 63
40003: PUSH
40004: LD_INT 64
40006: PUSH
40007: LD_INT 65
40009: PUSH
40010: LD_INT 82
40012: PUSH
40013: LD_INT 83
40015: PUSH
40016: LD_INT 84
40018: PUSH
40019: LD_INT 85
40021: PUSH
40022: LD_INT 86
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: ST_TO_ADDR
40080: GO 40083
40082: POP
// if state > - 1 and state < 3 then
40083: LD_VAR 0 3
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: GREATER
40092: PUSH
40093: LD_VAR 0 3
40097: PUSH
40098: LD_INT 3
40100: LESS
40101: AND
40102: IFFALSE 40159
// for i in result do
40104: LD_ADDR_VAR 0 5
40108: PUSH
40109: LD_VAR 0 4
40113: PUSH
40114: FOR_IN
40115: IFFALSE 40157
// if GetTech ( i , side ) <> state then
40117: LD_VAR 0 5
40121: PPUSH
40122: LD_VAR 0 1
40126: PPUSH
40127: CALL_OW 321
40131: PUSH
40132: LD_VAR 0 3
40136: NONEQUAL
40137: IFFALSE 40155
// result := result diff i ;
40139: LD_ADDR_VAR 0 4
40143: PUSH
40144: LD_VAR 0 4
40148: PUSH
40149: LD_VAR 0 5
40153: DIFF
40154: ST_TO_ADDR
40155: GO 40114
40157: POP
40158: POP
// end ;
40159: LD_VAR 0 4
40163: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40164: LD_INT 0
40166: PPUSH
40167: PPUSH
40168: PPUSH
// result := true ;
40169: LD_ADDR_VAR 0 3
40173: PUSH
40174: LD_INT 1
40176: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40177: LD_ADDR_VAR 0 5
40181: PUSH
40182: LD_VAR 0 2
40186: PPUSH
40187: CALL_OW 480
40191: ST_TO_ADDR
// if not tmp then
40192: LD_VAR 0 5
40196: NOT
40197: IFFALSE 40201
// exit ;
40199: GO 40250
// for i in tmp do
40201: LD_ADDR_VAR 0 4
40205: PUSH
40206: LD_VAR 0 5
40210: PUSH
40211: FOR_IN
40212: IFFALSE 40248
// if GetTech ( i , side ) <> state_researched then
40214: LD_VAR 0 4
40218: PPUSH
40219: LD_VAR 0 1
40223: PPUSH
40224: CALL_OW 321
40228: PUSH
40229: LD_INT 2
40231: NONEQUAL
40232: IFFALSE 40246
// begin result := false ;
40234: LD_ADDR_VAR 0 3
40238: PUSH
40239: LD_INT 0
40241: ST_TO_ADDR
// exit ;
40242: POP
40243: POP
40244: GO 40250
// end ;
40246: GO 40211
40248: POP
40249: POP
// end ;
40250: LD_VAR 0 3
40254: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40255: LD_INT 0
40257: PPUSH
40258: PPUSH
40259: PPUSH
40260: PPUSH
40261: PPUSH
40262: PPUSH
40263: PPUSH
40264: PPUSH
40265: PPUSH
40266: PPUSH
40267: PPUSH
40268: PPUSH
40269: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40270: LD_VAR 0 1
40274: NOT
40275: PUSH
40276: LD_VAR 0 1
40280: PPUSH
40281: CALL_OW 257
40285: PUSH
40286: LD_INT 9
40288: NONEQUAL
40289: OR
40290: IFFALSE 40294
// exit ;
40292: GO 40867
// side := GetSide ( unit ) ;
40294: LD_ADDR_VAR 0 9
40298: PUSH
40299: LD_VAR 0 1
40303: PPUSH
40304: CALL_OW 255
40308: ST_TO_ADDR
// tech_space := tech_spacanom ;
40309: LD_ADDR_VAR 0 12
40313: PUSH
40314: LD_INT 29
40316: ST_TO_ADDR
// tech_time := tech_taurad ;
40317: LD_ADDR_VAR 0 13
40321: PUSH
40322: LD_INT 28
40324: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40325: LD_ADDR_VAR 0 11
40329: PUSH
40330: LD_VAR 0 1
40334: PPUSH
40335: CALL_OW 310
40339: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40340: LD_VAR 0 11
40344: PPUSH
40345: CALL_OW 247
40349: PUSH
40350: LD_INT 2
40352: EQUAL
40353: IFFALSE 40357
// exit ;
40355: GO 40867
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40357: LD_ADDR_VAR 0 8
40361: PUSH
40362: LD_INT 81
40364: PUSH
40365: LD_VAR 0 9
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 3
40376: PUSH
40377: LD_INT 21
40379: PUSH
40380: LD_INT 3
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PPUSH
40395: CALL_OW 69
40399: ST_TO_ADDR
// if not tmp then
40400: LD_VAR 0 8
40404: NOT
40405: IFFALSE 40409
// exit ;
40407: GO 40867
// if in_unit then
40409: LD_VAR 0 11
40413: IFFALSE 40437
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40415: LD_ADDR_VAR 0 10
40419: PUSH
40420: LD_VAR 0 8
40424: PPUSH
40425: LD_VAR 0 11
40429: PPUSH
40430: CALL_OW 74
40434: ST_TO_ADDR
40435: GO 40457
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40437: LD_ADDR_VAR 0 10
40441: PUSH
40442: LD_VAR 0 8
40446: PPUSH
40447: LD_VAR 0 1
40451: PPUSH
40452: CALL_OW 74
40456: ST_TO_ADDR
// if not enemy then
40457: LD_VAR 0 10
40461: NOT
40462: IFFALSE 40466
// exit ;
40464: GO 40867
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40466: LD_VAR 0 11
40470: PUSH
40471: LD_VAR 0 11
40475: PPUSH
40476: LD_VAR 0 10
40480: PPUSH
40481: CALL_OW 296
40485: PUSH
40486: LD_INT 13
40488: GREATER
40489: AND
40490: PUSH
40491: LD_VAR 0 1
40495: PPUSH
40496: LD_VAR 0 10
40500: PPUSH
40501: CALL_OW 296
40505: PUSH
40506: LD_INT 12
40508: GREATER
40509: OR
40510: IFFALSE 40514
// exit ;
40512: GO 40867
// missile := [ 1 ] ;
40514: LD_ADDR_VAR 0 14
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: EMPTY
40523: LIST
40524: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40525: LD_VAR 0 9
40529: PPUSH
40530: LD_VAR 0 12
40534: PPUSH
40535: CALL_OW 325
40539: IFFALSE 40568
// missile := Replace ( missile , missile + 1 , 2 ) ;
40541: LD_ADDR_VAR 0 14
40545: PUSH
40546: LD_VAR 0 14
40550: PPUSH
40551: LD_VAR 0 14
40555: PUSH
40556: LD_INT 1
40558: PLUS
40559: PPUSH
40560: LD_INT 2
40562: PPUSH
40563: CALL_OW 1
40567: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40568: LD_VAR 0 9
40572: PPUSH
40573: LD_VAR 0 13
40577: PPUSH
40578: CALL_OW 325
40582: PUSH
40583: LD_VAR 0 10
40587: PPUSH
40588: CALL_OW 255
40592: PPUSH
40593: LD_VAR 0 13
40597: PPUSH
40598: CALL_OW 325
40602: NOT
40603: AND
40604: IFFALSE 40633
// missile := Replace ( missile , missile + 1 , 3 ) ;
40606: LD_ADDR_VAR 0 14
40610: PUSH
40611: LD_VAR 0 14
40615: PPUSH
40616: LD_VAR 0 14
40620: PUSH
40621: LD_INT 1
40623: PLUS
40624: PPUSH
40625: LD_INT 3
40627: PPUSH
40628: CALL_OW 1
40632: ST_TO_ADDR
// if missile < 2 then
40633: LD_VAR 0 14
40637: PUSH
40638: LD_INT 2
40640: LESS
40641: IFFALSE 40645
// exit ;
40643: GO 40867
// x := GetX ( enemy ) ;
40645: LD_ADDR_VAR 0 4
40649: PUSH
40650: LD_VAR 0 10
40654: PPUSH
40655: CALL_OW 250
40659: ST_TO_ADDR
// y := GetY ( enemy ) ;
40660: LD_ADDR_VAR 0 5
40664: PUSH
40665: LD_VAR 0 10
40669: PPUSH
40670: CALL_OW 251
40674: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40675: LD_ADDR_VAR 0 6
40679: PUSH
40680: LD_VAR 0 4
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PPUSH
40689: LD_INT 1
40691: PPUSH
40692: CALL_OW 12
40696: PLUS
40697: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40698: LD_ADDR_VAR 0 7
40702: PUSH
40703: LD_VAR 0 5
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PPUSH
40712: LD_INT 1
40714: PPUSH
40715: CALL_OW 12
40719: PLUS
40720: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40721: LD_VAR 0 6
40725: PPUSH
40726: LD_VAR 0 7
40730: PPUSH
40731: CALL_OW 488
40735: NOT
40736: IFFALSE 40758
// begin _x := x ;
40738: LD_ADDR_VAR 0 6
40742: PUSH
40743: LD_VAR 0 4
40747: ST_TO_ADDR
// _y := y ;
40748: LD_ADDR_VAR 0 7
40752: PUSH
40753: LD_VAR 0 5
40757: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40758: LD_ADDR_VAR 0 3
40762: PUSH
40763: LD_INT 1
40765: PPUSH
40766: LD_VAR 0 14
40770: PPUSH
40771: CALL_OW 12
40775: ST_TO_ADDR
// case i of 1 :
40776: LD_VAR 0 3
40780: PUSH
40781: LD_INT 1
40783: DOUBLE
40784: EQUAL
40785: IFTRUE 40789
40787: GO 40806
40789: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40790: LD_VAR 0 1
40794: PPUSH
40795: LD_VAR 0 10
40799: PPUSH
40800: CALL_OW 115
40804: GO 40867
40806: LD_INT 2
40808: DOUBLE
40809: EQUAL
40810: IFTRUE 40814
40812: GO 40836
40814: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40815: LD_VAR 0 1
40819: PPUSH
40820: LD_VAR 0 6
40824: PPUSH
40825: LD_VAR 0 7
40829: PPUSH
40830: CALL_OW 153
40834: GO 40867
40836: LD_INT 3
40838: DOUBLE
40839: EQUAL
40840: IFTRUE 40844
40842: GO 40866
40844: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40845: LD_VAR 0 1
40849: PPUSH
40850: LD_VAR 0 6
40854: PPUSH
40855: LD_VAR 0 7
40859: PPUSH
40860: CALL_OW 154
40864: GO 40867
40866: POP
// end ;
40867: LD_VAR 0 2
40871: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40872: LD_INT 0
40874: PPUSH
40875: PPUSH
40876: PPUSH
40877: PPUSH
40878: PPUSH
40879: PPUSH
// if not unit or not building then
40880: LD_VAR 0 1
40884: NOT
40885: PUSH
40886: LD_VAR 0 2
40890: NOT
40891: OR
40892: IFFALSE 40896
// exit ;
40894: GO 41054
// x := GetX ( building ) ;
40896: LD_ADDR_VAR 0 5
40900: PUSH
40901: LD_VAR 0 2
40905: PPUSH
40906: CALL_OW 250
40910: ST_TO_ADDR
// y := GetY ( building ) ;
40911: LD_ADDR_VAR 0 6
40915: PUSH
40916: LD_VAR 0 2
40920: PPUSH
40921: CALL_OW 251
40925: ST_TO_ADDR
// for i = 0 to 5 do
40926: LD_ADDR_VAR 0 4
40930: PUSH
40931: DOUBLE
40932: LD_INT 0
40934: DEC
40935: ST_TO_ADDR
40936: LD_INT 5
40938: PUSH
40939: FOR_TO
40940: IFFALSE 41052
// begin _x := ShiftX ( x , i , 3 ) ;
40942: LD_ADDR_VAR 0 7
40946: PUSH
40947: LD_VAR 0 5
40951: PPUSH
40952: LD_VAR 0 4
40956: PPUSH
40957: LD_INT 3
40959: PPUSH
40960: CALL_OW 272
40964: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40965: LD_ADDR_VAR 0 8
40969: PUSH
40970: LD_VAR 0 6
40974: PPUSH
40975: LD_VAR 0 4
40979: PPUSH
40980: LD_INT 3
40982: PPUSH
40983: CALL_OW 273
40987: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40988: LD_VAR 0 7
40992: PPUSH
40993: LD_VAR 0 8
40997: PPUSH
40998: CALL_OW 488
41002: NOT
41003: IFFALSE 41007
// continue ;
41005: GO 40939
// if HexInfo ( _x , _y ) = 0 then
41007: LD_VAR 0 7
41011: PPUSH
41012: LD_VAR 0 8
41016: PPUSH
41017: CALL_OW 428
41021: PUSH
41022: LD_INT 0
41024: EQUAL
41025: IFFALSE 41050
// begin ComMoveXY ( unit , _x , _y ) ;
41027: LD_VAR 0 1
41031: PPUSH
41032: LD_VAR 0 7
41036: PPUSH
41037: LD_VAR 0 8
41041: PPUSH
41042: CALL_OW 111
// exit ;
41046: POP
41047: POP
41048: GO 41054
// end ; end ;
41050: GO 40939
41052: POP
41053: POP
// end ;
41054: LD_VAR 0 3
41058: RET
// export function ScanBase ( side , base_area ) ; begin
41059: LD_INT 0
41061: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41062: LD_ADDR_VAR 0 3
41066: PUSH
41067: LD_VAR 0 2
41071: PPUSH
41072: LD_INT 81
41074: PUSH
41075: LD_VAR 0 1
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PPUSH
41084: CALL_OW 70
41088: ST_TO_ADDR
// end ;
41089: LD_VAR 0 3
41093: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41094: LD_INT 0
41096: PPUSH
41097: PPUSH
41098: PPUSH
41099: PPUSH
// result := false ;
41100: LD_ADDR_VAR 0 2
41104: PUSH
41105: LD_INT 0
41107: ST_TO_ADDR
// side := GetSide ( unit ) ;
41108: LD_ADDR_VAR 0 3
41112: PUSH
41113: LD_VAR 0 1
41117: PPUSH
41118: CALL_OW 255
41122: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41123: LD_ADDR_VAR 0 4
41127: PUSH
41128: LD_VAR 0 1
41132: PPUSH
41133: CALL_OW 248
41137: ST_TO_ADDR
// case nat of 1 :
41138: LD_VAR 0 4
41142: PUSH
41143: LD_INT 1
41145: DOUBLE
41146: EQUAL
41147: IFTRUE 41151
41149: GO 41162
41151: POP
// tech := tech_lassight ; 2 :
41152: LD_ADDR_VAR 0 5
41156: PUSH
41157: LD_INT 12
41159: ST_TO_ADDR
41160: GO 41201
41162: LD_INT 2
41164: DOUBLE
41165: EQUAL
41166: IFTRUE 41170
41168: GO 41181
41170: POP
// tech := tech_mortar ; 3 :
41171: LD_ADDR_VAR 0 5
41175: PUSH
41176: LD_INT 41
41178: ST_TO_ADDR
41179: GO 41201
41181: LD_INT 3
41183: DOUBLE
41184: EQUAL
41185: IFTRUE 41189
41187: GO 41200
41189: POP
// tech := tech_bazooka ; end ;
41190: LD_ADDR_VAR 0 5
41194: PUSH
41195: LD_INT 44
41197: ST_TO_ADDR
41198: GO 41201
41200: POP
// if Researched ( side , tech ) then
41201: LD_VAR 0 3
41205: PPUSH
41206: LD_VAR 0 5
41210: PPUSH
41211: CALL_OW 325
41215: IFFALSE 41242
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41217: LD_ADDR_VAR 0 2
41221: PUSH
41222: LD_INT 5
41224: PUSH
41225: LD_INT 8
41227: PUSH
41228: LD_INT 9
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: LIST
41235: PUSH
41236: LD_VAR 0 4
41240: ARRAY
41241: ST_TO_ADDR
// end ;
41242: LD_VAR 0 2
41246: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41247: LD_INT 0
41249: PPUSH
41250: PPUSH
41251: PPUSH
// if not mines then
41252: LD_VAR 0 2
41256: NOT
41257: IFFALSE 41261
// exit ;
41259: GO 41405
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41261: LD_ADDR_VAR 0 5
41265: PUSH
41266: LD_INT 81
41268: PUSH
41269: LD_VAR 0 1
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 3
41280: PUSH
41281: LD_INT 21
41283: PUSH
41284: LD_INT 3
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PPUSH
41299: CALL_OW 69
41303: ST_TO_ADDR
// for i in mines do
41304: LD_ADDR_VAR 0 4
41308: PUSH
41309: LD_VAR 0 2
41313: PUSH
41314: FOR_IN
41315: IFFALSE 41403
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41317: LD_VAR 0 4
41321: PUSH
41322: LD_INT 1
41324: ARRAY
41325: PPUSH
41326: LD_VAR 0 4
41330: PUSH
41331: LD_INT 2
41333: ARRAY
41334: PPUSH
41335: CALL_OW 458
41339: NOT
41340: IFFALSE 41344
// continue ;
41342: GO 41314
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41344: LD_VAR 0 4
41348: PUSH
41349: LD_INT 1
41351: ARRAY
41352: PPUSH
41353: LD_VAR 0 4
41357: PUSH
41358: LD_INT 2
41360: ARRAY
41361: PPUSH
41362: CALL_OW 428
41366: PUSH
41367: LD_VAR 0 5
41371: IN
41372: IFFALSE 41401
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41374: LD_VAR 0 4
41378: PUSH
41379: LD_INT 1
41381: ARRAY
41382: PPUSH
41383: LD_VAR 0 4
41387: PUSH
41388: LD_INT 2
41390: ARRAY
41391: PPUSH
41392: LD_VAR 0 1
41396: PPUSH
41397: CALL_OW 456
// end ;
41401: GO 41314
41403: POP
41404: POP
// end ;
41405: LD_VAR 0 3
41409: RET
// export function Count ( array ) ; var i ; begin
41410: LD_INT 0
41412: PPUSH
41413: PPUSH
// result := 0 ;
41414: LD_ADDR_VAR 0 2
41418: PUSH
41419: LD_INT 0
41421: ST_TO_ADDR
// for i in array do
41422: LD_ADDR_VAR 0 3
41426: PUSH
41427: LD_VAR 0 1
41431: PUSH
41432: FOR_IN
41433: IFFALSE 41457
// if i then
41435: LD_VAR 0 3
41439: IFFALSE 41455
// result := result + 1 ;
41441: LD_ADDR_VAR 0 2
41445: PUSH
41446: LD_VAR 0 2
41450: PUSH
41451: LD_INT 1
41453: PLUS
41454: ST_TO_ADDR
41455: GO 41432
41457: POP
41458: POP
// end ;
41459: LD_VAR 0 2
41463: RET
// export function IsEmpty ( building ) ; begin
41464: LD_INT 0
41466: PPUSH
// if not building then
41467: LD_VAR 0 1
41471: NOT
41472: IFFALSE 41476
// exit ;
41474: GO 41519
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41476: LD_ADDR_VAR 0 2
41480: PUSH
41481: LD_VAR 0 1
41485: PUSH
41486: LD_INT 22
41488: PUSH
41489: LD_VAR 0 1
41493: PPUSH
41494: CALL_OW 255
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 58
41505: PUSH
41506: EMPTY
41507: LIST
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PPUSH
41513: CALL_OW 69
41517: IN
41518: ST_TO_ADDR
// end ;
41519: LD_VAR 0 2
41523: RET
// export function IsNotFull ( building ) ; var places ; begin
41524: LD_INT 0
41526: PPUSH
41527: PPUSH
// if not building then
41528: LD_VAR 0 1
41532: NOT
41533: IFFALSE 41537
// exit ;
41535: GO 41708
// result := false ;
41537: LD_ADDR_VAR 0 2
41541: PUSH
41542: LD_INT 0
41544: ST_TO_ADDR
// places := 0 ;
41545: LD_ADDR_VAR 0 3
41549: PUSH
41550: LD_INT 0
41552: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41553: LD_VAR 0 1
41557: PPUSH
41558: CALL_OW 266
41562: PUSH
41563: LD_INT 0
41565: DOUBLE
41566: EQUAL
41567: IFTRUE 41625
41569: LD_INT 1
41571: DOUBLE
41572: EQUAL
41573: IFTRUE 41625
41575: LD_INT 6
41577: DOUBLE
41578: EQUAL
41579: IFTRUE 41625
41581: LD_INT 7
41583: DOUBLE
41584: EQUAL
41585: IFTRUE 41625
41587: LD_INT 8
41589: DOUBLE
41590: EQUAL
41591: IFTRUE 41625
41593: LD_INT 4
41595: DOUBLE
41596: EQUAL
41597: IFTRUE 41625
41599: LD_INT 5
41601: DOUBLE
41602: EQUAL
41603: IFTRUE 41625
41605: LD_INT 2
41607: DOUBLE
41608: EQUAL
41609: IFTRUE 41625
41611: LD_INT 3
41613: DOUBLE
41614: EQUAL
41615: IFTRUE 41625
41617: LD_INT 35
41619: DOUBLE
41620: EQUAL
41621: IFTRUE 41625
41623: GO 41636
41625: POP
// places := 6 ; b_bunker , b_breastwork :
41626: LD_ADDR_VAR 0 3
41630: PUSH
41631: LD_INT 6
41633: ST_TO_ADDR
41634: GO 41681
41636: LD_INT 32
41638: DOUBLE
41639: EQUAL
41640: IFTRUE 41650
41642: LD_INT 31
41644: DOUBLE
41645: EQUAL
41646: IFTRUE 41650
41648: GO 41661
41650: POP
// places := 1 ; b_control_tower :
41651: LD_ADDR_VAR 0 3
41655: PUSH
41656: LD_INT 1
41658: ST_TO_ADDR
41659: GO 41681
41661: LD_INT 36
41663: DOUBLE
41664: EQUAL
41665: IFTRUE 41669
41667: GO 41680
41669: POP
// places := 3 ; end ;
41670: LD_ADDR_VAR 0 3
41674: PUSH
41675: LD_INT 3
41677: ST_TO_ADDR
41678: GO 41681
41680: POP
// if places then
41681: LD_VAR 0 3
41685: IFFALSE 41708
// result := UnitsInside ( building ) < places ;
41687: LD_ADDR_VAR 0 2
41691: PUSH
41692: LD_VAR 0 1
41696: PPUSH
41697: CALL_OW 313
41701: PUSH
41702: LD_VAR 0 3
41706: LESS
41707: ST_TO_ADDR
// end ;
41708: LD_VAR 0 2
41712: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41713: LD_INT 0
41715: PPUSH
41716: PPUSH
41717: PPUSH
41718: PPUSH
// tmp := [ ] ;
41719: LD_ADDR_VAR 0 3
41723: PUSH
41724: EMPTY
41725: ST_TO_ADDR
// list := [ ] ;
41726: LD_ADDR_VAR 0 5
41730: PUSH
41731: EMPTY
41732: ST_TO_ADDR
// for i = 16 to 25 do
41733: LD_ADDR_VAR 0 4
41737: PUSH
41738: DOUBLE
41739: LD_INT 16
41741: DEC
41742: ST_TO_ADDR
41743: LD_INT 25
41745: PUSH
41746: FOR_TO
41747: IFFALSE 41820
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41749: LD_ADDR_VAR 0 3
41753: PUSH
41754: LD_VAR 0 3
41758: PUSH
41759: LD_INT 22
41761: PUSH
41762: LD_VAR 0 1
41766: PPUSH
41767: CALL_OW 255
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 91
41778: PUSH
41779: LD_VAR 0 1
41783: PUSH
41784: LD_INT 6
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 30
41794: PUSH
41795: LD_VAR 0 4
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: LIST
41808: PUSH
41809: EMPTY
41810: LIST
41811: PPUSH
41812: CALL_OW 69
41816: ADD
41817: ST_TO_ADDR
41818: GO 41746
41820: POP
41821: POP
// for i = 1 to tmp do
41822: LD_ADDR_VAR 0 4
41826: PUSH
41827: DOUBLE
41828: LD_INT 1
41830: DEC
41831: ST_TO_ADDR
41832: LD_VAR 0 3
41836: PUSH
41837: FOR_TO
41838: IFFALSE 41926
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41840: LD_ADDR_VAR 0 5
41844: PUSH
41845: LD_VAR 0 5
41849: PUSH
41850: LD_VAR 0 3
41854: PUSH
41855: LD_VAR 0 4
41859: ARRAY
41860: PPUSH
41861: CALL_OW 266
41865: PUSH
41866: LD_VAR 0 3
41870: PUSH
41871: LD_VAR 0 4
41875: ARRAY
41876: PPUSH
41877: CALL_OW 250
41881: PUSH
41882: LD_VAR 0 3
41886: PUSH
41887: LD_VAR 0 4
41891: ARRAY
41892: PPUSH
41893: CALL_OW 251
41897: PUSH
41898: LD_VAR 0 3
41902: PUSH
41903: LD_VAR 0 4
41907: ARRAY
41908: PPUSH
41909: CALL_OW 254
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: PUSH
41920: EMPTY
41921: LIST
41922: ADD
41923: ST_TO_ADDR
41924: GO 41837
41926: POP
41927: POP
// result := list ;
41928: LD_ADDR_VAR 0 2
41932: PUSH
41933: LD_VAR 0 5
41937: ST_TO_ADDR
// end ;
41938: LD_VAR 0 2
41942: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41943: LD_INT 0
41945: PPUSH
41946: PPUSH
41947: PPUSH
41948: PPUSH
41949: PPUSH
41950: PPUSH
41951: PPUSH
// if not factory then
41952: LD_VAR 0 1
41956: NOT
41957: IFFALSE 41961
// exit ;
41959: GO 42554
// if control = control_apeman then
41961: LD_VAR 0 4
41965: PUSH
41966: LD_INT 5
41968: EQUAL
41969: IFFALSE 42078
// begin tmp := UnitsInside ( factory ) ;
41971: LD_ADDR_VAR 0 8
41975: PUSH
41976: LD_VAR 0 1
41980: PPUSH
41981: CALL_OW 313
41985: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41986: LD_VAR 0 8
41990: PPUSH
41991: LD_INT 25
41993: PUSH
41994: LD_INT 12
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PPUSH
42001: CALL_OW 72
42005: NOT
42006: IFFALSE 42016
// control := control_manual ;
42008: LD_ADDR_VAR 0 4
42012: PUSH
42013: LD_INT 1
42015: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42016: LD_ADDR_VAR 0 8
42020: PUSH
42021: LD_VAR 0 1
42025: PPUSH
42026: CALL 41713 0 1
42030: ST_TO_ADDR
// if tmp then
42031: LD_VAR 0 8
42035: IFFALSE 42078
// begin for i in tmp do
42037: LD_ADDR_VAR 0 7
42041: PUSH
42042: LD_VAR 0 8
42046: PUSH
42047: FOR_IN
42048: IFFALSE 42076
// if i [ 1 ] = b_ext_radio then
42050: LD_VAR 0 7
42054: PUSH
42055: LD_INT 1
42057: ARRAY
42058: PUSH
42059: LD_INT 22
42061: EQUAL
42062: IFFALSE 42074
// begin control := control_remote ;
42064: LD_ADDR_VAR 0 4
42068: PUSH
42069: LD_INT 2
42071: ST_TO_ADDR
// break ;
42072: GO 42076
// end ;
42074: GO 42047
42076: POP
42077: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42078: LD_VAR 0 1
42082: PPUSH
42083: LD_VAR 0 2
42087: PPUSH
42088: LD_VAR 0 3
42092: PPUSH
42093: LD_VAR 0 4
42097: PPUSH
42098: LD_VAR 0 5
42102: PPUSH
42103: CALL_OW 448
42107: IFFALSE 42142
// begin result := [ chassis , engine , control , weapon ] ;
42109: LD_ADDR_VAR 0 6
42113: PUSH
42114: LD_VAR 0 2
42118: PUSH
42119: LD_VAR 0 3
42123: PUSH
42124: LD_VAR 0 4
42128: PUSH
42129: LD_VAR 0 5
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: ST_TO_ADDR
// exit ;
42140: GO 42554
// end ; _chassis := AvailableChassisList ( factory ) ;
42142: LD_ADDR_VAR 0 9
42146: PUSH
42147: LD_VAR 0 1
42151: PPUSH
42152: CALL_OW 475
42156: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42157: LD_ADDR_VAR 0 11
42161: PUSH
42162: LD_VAR 0 1
42166: PPUSH
42167: CALL_OW 476
42171: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42172: LD_ADDR_VAR 0 12
42176: PUSH
42177: LD_VAR 0 1
42181: PPUSH
42182: CALL_OW 477
42186: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42187: LD_ADDR_VAR 0 10
42191: PUSH
42192: LD_VAR 0 1
42196: PPUSH
42197: CALL_OW 478
42201: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42202: LD_VAR 0 9
42206: NOT
42207: PUSH
42208: LD_VAR 0 11
42212: NOT
42213: OR
42214: PUSH
42215: LD_VAR 0 12
42219: NOT
42220: OR
42221: PUSH
42222: LD_VAR 0 10
42226: NOT
42227: OR
42228: IFFALSE 42263
// begin result := [ chassis , engine , control , weapon ] ;
42230: LD_ADDR_VAR 0 6
42234: PUSH
42235: LD_VAR 0 2
42239: PUSH
42240: LD_VAR 0 3
42244: PUSH
42245: LD_VAR 0 4
42249: PUSH
42250: LD_VAR 0 5
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: ST_TO_ADDR
// exit ;
42261: GO 42554
// end ; if not chassis in _chassis then
42263: LD_VAR 0 2
42267: PUSH
42268: LD_VAR 0 9
42272: IN
42273: NOT
42274: IFFALSE 42300
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42276: LD_ADDR_VAR 0 2
42280: PUSH
42281: LD_VAR 0 9
42285: PUSH
42286: LD_INT 1
42288: PPUSH
42289: LD_VAR 0 9
42293: PPUSH
42294: CALL_OW 12
42298: ARRAY
42299: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42300: LD_VAR 0 2
42304: PPUSH
42305: LD_VAR 0 3
42309: PPUSH
42310: CALL 42559 0 2
42314: NOT
42315: IFFALSE 42374
// repeat engine := _engine [ 1 ] ;
42317: LD_ADDR_VAR 0 3
42321: PUSH
42322: LD_VAR 0 11
42326: PUSH
42327: LD_INT 1
42329: ARRAY
42330: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42331: LD_ADDR_VAR 0 11
42335: PUSH
42336: LD_VAR 0 11
42340: PPUSH
42341: LD_INT 1
42343: PPUSH
42344: CALL_OW 3
42348: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42349: LD_VAR 0 2
42353: PPUSH
42354: LD_VAR 0 3
42358: PPUSH
42359: CALL 42559 0 2
42363: PUSH
42364: LD_VAR 0 11
42368: PUSH
42369: EMPTY
42370: EQUAL
42371: OR
42372: IFFALSE 42317
// if not control in _control then
42374: LD_VAR 0 4
42378: PUSH
42379: LD_VAR 0 12
42383: IN
42384: NOT
42385: IFFALSE 42411
// control := _control [ rand ( 1 , _control ) ] ;
42387: LD_ADDR_VAR 0 4
42391: PUSH
42392: LD_VAR 0 12
42396: PUSH
42397: LD_INT 1
42399: PPUSH
42400: LD_VAR 0 12
42404: PPUSH
42405: CALL_OW 12
42409: ARRAY
42410: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42411: LD_VAR 0 2
42415: PPUSH
42416: LD_VAR 0 5
42420: PPUSH
42421: CALL 42779 0 2
42425: NOT
42426: IFFALSE 42485
// repeat weapon := _weapon [ 1 ] ;
42428: LD_ADDR_VAR 0 5
42432: PUSH
42433: LD_VAR 0 10
42437: PUSH
42438: LD_INT 1
42440: ARRAY
42441: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42442: LD_ADDR_VAR 0 10
42446: PUSH
42447: LD_VAR 0 10
42451: PPUSH
42452: LD_INT 1
42454: PPUSH
42455: CALL_OW 3
42459: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42460: LD_VAR 0 2
42464: PPUSH
42465: LD_VAR 0 5
42469: PPUSH
42470: CALL 42779 0 2
42474: PUSH
42475: LD_VAR 0 10
42479: PUSH
42480: EMPTY
42481: EQUAL
42482: OR
42483: IFFALSE 42428
// result := [ ] ;
42485: LD_ADDR_VAR 0 6
42489: PUSH
42490: EMPTY
42491: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42492: LD_VAR 0 1
42496: PPUSH
42497: LD_VAR 0 2
42501: PPUSH
42502: LD_VAR 0 3
42506: PPUSH
42507: LD_VAR 0 4
42511: PPUSH
42512: LD_VAR 0 5
42516: PPUSH
42517: CALL_OW 448
42521: IFFALSE 42554
// result := [ chassis , engine , control , weapon ] ;
42523: LD_ADDR_VAR 0 6
42527: PUSH
42528: LD_VAR 0 2
42532: PUSH
42533: LD_VAR 0 3
42537: PUSH
42538: LD_VAR 0 4
42542: PUSH
42543: LD_VAR 0 5
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: ST_TO_ADDR
// end ;
42554: LD_VAR 0 6
42558: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42559: LD_INT 0
42561: PPUSH
// if not chassis or not engine then
42562: LD_VAR 0 1
42566: NOT
42567: PUSH
42568: LD_VAR 0 2
42572: NOT
42573: OR
42574: IFFALSE 42578
// exit ;
42576: GO 42774
// case engine of engine_solar :
42578: LD_VAR 0 2
42582: PUSH
42583: LD_INT 2
42585: DOUBLE
42586: EQUAL
42587: IFTRUE 42591
42589: GO 42629
42591: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42592: LD_ADDR_VAR 0 3
42596: PUSH
42597: LD_INT 11
42599: PUSH
42600: LD_INT 12
42602: PUSH
42603: LD_INT 13
42605: PUSH
42606: LD_INT 14
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: LD_INT 2
42614: PUSH
42615: LD_INT 3
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: ST_TO_ADDR
42627: GO 42758
42629: LD_INT 1
42631: DOUBLE
42632: EQUAL
42633: IFTRUE 42637
42635: GO 42699
42637: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42638: LD_ADDR_VAR 0 3
42642: PUSH
42643: LD_INT 11
42645: PUSH
42646: LD_INT 12
42648: PUSH
42649: LD_INT 13
42651: PUSH
42652: LD_INT 14
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: LD_INT 2
42660: PUSH
42661: LD_INT 3
42663: PUSH
42664: LD_INT 4
42666: PUSH
42667: LD_INT 5
42669: PUSH
42670: LD_INT 21
42672: PUSH
42673: LD_INT 23
42675: PUSH
42676: LD_INT 22
42678: PUSH
42679: LD_INT 24
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: ST_TO_ADDR
42697: GO 42758
42699: LD_INT 3
42701: DOUBLE
42702: EQUAL
42703: IFTRUE 42707
42705: GO 42757
42707: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42708: LD_ADDR_VAR 0 3
42712: PUSH
42713: LD_INT 13
42715: PUSH
42716: LD_INT 14
42718: PUSH
42719: LD_INT 2
42721: PUSH
42722: LD_INT 3
42724: PUSH
42725: LD_INT 4
42727: PUSH
42728: LD_INT 5
42730: PUSH
42731: LD_INT 21
42733: PUSH
42734: LD_INT 22
42736: PUSH
42737: LD_INT 23
42739: PUSH
42740: LD_INT 24
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: ST_TO_ADDR
42755: GO 42758
42757: POP
// result := ( chassis in result ) ;
42758: LD_ADDR_VAR 0 3
42762: PUSH
42763: LD_VAR 0 1
42767: PUSH
42768: LD_VAR 0 3
42772: IN
42773: ST_TO_ADDR
// end ;
42774: LD_VAR 0 3
42778: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42779: LD_INT 0
42781: PPUSH
// if not chassis or not weapon then
42782: LD_VAR 0 1
42786: NOT
42787: PUSH
42788: LD_VAR 0 2
42792: NOT
42793: OR
42794: IFFALSE 42798
// exit ;
42796: GO 43858
// case weapon of us_machine_gun :
42798: LD_VAR 0 2
42802: PUSH
42803: LD_INT 2
42805: DOUBLE
42806: EQUAL
42807: IFTRUE 42811
42809: GO 42841
42811: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42812: LD_ADDR_VAR 0 3
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: LD_INT 2
42822: PUSH
42823: LD_INT 3
42825: PUSH
42826: LD_INT 4
42828: PUSH
42829: LD_INT 5
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: ST_TO_ADDR
42839: GO 43842
42841: LD_INT 3
42843: DOUBLE
42844: EQUAL
42845: IFTRUE 42849
42847: GO 42879
42849: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42850: LD_ADDR_VAR 0 3
42854: PUSH
42855: LD_INT 1
42857: PUSH
42858: LD_INT 2
42860: PUSH
42861: LD_INT 3
42863: PUSH
42864: LD_INT 4
42866: PUSH
42867: LD_INT 5
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: ST_TO_ADDR
42877: GO 43842
42879: LD_INT 11
42881: DOUBLE
42882: EQUAL
42883: IFTRUE 42887
42885: GO 42917
42887: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42888: LD_ADDR_VAR 0 3
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: LD_INT 2
42898: PUSH
42899: LD_INT 3
42901: PUSH
42902: LD_INT 4
42904: PUSH
42905: LD_INT 5
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: ST_TO_ADDR
42915: GO 43842
42917: LD_INT 4
42919: DOUBLE
42920: EQUAL
42921: IFTRUE 42925
42923: GO 42951
42925: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42926: LD_ADDR_VAR 0 3
42930: PUSH
42931: LD_INT 2
42933: PUSH
42934: LD_INT 3
42936: PUSH
42937: LD_INT 4
42939: PUSH
42940: LD_INT 5
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: ST_TO_ADDR
42949: GO 43842
42951: LD_INT 5
42953: DOUBLE
42954: EQUAL
42955: IFTRUE 42959
42957: GO 42985
42959: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42960: LD_ADDR_VAR 0 3
42964: PUSH
42965: LD_INT 2
42967: PUSH
42968: LD_INT 3
42970: PUSH
42971: LD_INT 4
42973: PUSH
42974: LD_INT 5
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: ST_TO_ADDR
42983: GO 43842
42985: LD_INT 9
42987: DOUBLE
42988: EQUAL
42989: IFTRUE 42993
42991: GO 43019
42993: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42994: LD_ADDR_VAR 0 3
42998: PUSH
42999: LD_INT 2
43001: PUSH
43002: LD_INT 3
43004: PUSH
43005: LD_INT 4
43007: PUSH
43008: LD_INT 5
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: ST_TO_ADDR
43017: GO 43842
43019: LD_INT 7
43021: DOUBLE
43022: EQUAL
43023: IFTRUE 43027
43025: GO 43053
43027: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43028: LD_ADDR_VAR 0 3
43032: PUSH
43033: LD_INT 2
43035: PUSH
43036: LD_INT 3
43038: PUSH
43039: LD_INT 4
43041: PUSH
43042: LD_INT 5
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: ST_TO_ADDR
43051: GO 43842
43053: LD_INT 12
43055: DOUBLE
43056: EQUAL
43057: IFTRUE 43061
43059: GO 43087
43061: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43062: LD_ADDR_VAR 0 3
43066: PUSH
43067: LD_INT 2
43069: PUSH
43070: LD_INT 3
43072: PUSH
43073: LD_INT 4
43075: PUSH
43076: LD_INT 5
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: ST_TO_ADDR
43085: GO 43842
43087: LD_INT 13
43089: DOUBLE
43090: EQUAL
43091: IFTRUE 43095
43093: GO 43121
43095: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43096: LD_ADDR_VAR 0 3
43100: PUSH
43101: LD_INT 2
43103: PUSH
43104: LD_INT 3
43106: PUSH
43107: LD_INT 4
43109: PUSH
43110: LD_INT 5
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: ST_TO_ADDR
43119: GO 43842
43121: LD_INT 14
43123: DOUBLE
43124: EQUAL
43125: IFTRUE 43129
43127: GO 43147
43129: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43130: LD_ADDR_VAR 0 3
43134: PUSH
43135: LD_INT 4
43137: PUSH
43138: LD_INT 5
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: ST_TO_ADDR
43145: GO 43842
43147: LD_INT 6
43149: DOUBLE
43150: EQUAL
43151: IFTRUE 43155
43153: GO 43173
43155: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43156: LD_ADDR_VAR 0 3
43160: PUSH
43161: LD_INT 4
43163: PUSH
43164: LD_INT 5
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: ST_TO_ADDR
43171: GO 43842
43173: LD_INT 10
43175: DOUBLE
43176: EQUAL
43177: IFTRUE 43181
43179: GO 43199
43181: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43182: LD_ADDR_VAR 0 3
43186: PUSH
43187: LD_INT 4
43189: PUSH
43190: LD_INT 5
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: ST_TO_ADDR
43197: GO 43842
43199: LD_INT 22
43201: DOUBLE
43202: EQUAL
43203: IFTRUE 43207
43205: GO 43233
43207: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43208: LD_ADDR_VAR 0 3
43212: PUSH
43213: LD_INT 11
43215: PUSH
43216: LD_INT 12
43218: PUSH
43219: LD_INT 13
43221: PUSH
43222: LD_INT 14
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: ST_TO_ADDR
43231: GO 43842
43233: LD_INT 23
43235: DOUBLE
43236: EQUAL
43237: IFTRUE 43241
43239: GO 43267
43241: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43242: LD_ADDR_VAR 0 3
43246: PUSH
43247: LD_INT 11
43249: PUSH
43250: LD_INT 12
43252: PUSH
43253: LD_INT 13
43255: PUSH
43256: LD_INT 14
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: ST_TO_ADDR
43265: GO 43842
43267: LD_INT 24
43269: DOUBLE
43270: EQUAL
43271: IFTRUE 43275
43273: GO 43301
43275: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43276: LD_ADDR_VAR 0 3
43280: PUSH
43281: LD_INT 11
43283: PUSH
43284: LD_INT 12
43286: PUSH
43287: LD_INT 13
43289: PUSH
43290: LD_INT 14
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: ST_TO_ADDR
43299: GO 43842
43301: LD_INT 30
43303: DOUBLE
43304: EQUAL
43305: IFTRUE 43309
43307: GO 43335
43309: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43310: LD_ADDR_VAR 0 3
43314: PUSH
43315: LD_INT 11
43317: PUSH
43318: LD_INT 12
43320: PUSH
43321: LD_INT 13
43323: PUSH
43324: LD_INT 14
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: ST_TO_ADDR
43333: GO 43842
43335: LD_INT 25
43337: DOUBLE
43338: EQUAL
43339: IFTRUE 43343
43341: GO 43361
43343: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43344: LD_ADDR_VAR 0 3
43348: PUSH
43349: LD_INT 13
43351: PUSH
43352: LD_INT 14
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: ST_TO_ADDR
43359: GO 43842
43361: LD_INT 27
43363: DOUBLE
43364: EQUAL
43365: IFTRUE 43369
43367: GO 43387
43369: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43370: LD_ADDR_VAR 0 3
43374: PUSH
43375: LD_INT 13
43377: PUSH
43378: LD_INT 14
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: ST_TO_ADDR
43385: GO 43842
43387: LD_INT 92
43389: DOUBLE
43390: EQUAL
43391: IFTRUE 43395
43393: GO 43421
43395: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43396: LD_ADDR_VAR 0 3
43400: PUSH
43401: LD_INT 11
43403: PUSH
43404: LD_INT 12
43406: PUSH
43407: LD_INT 13
43409: PUSH
43410: LD_INT 14
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: ST_TO_ADDR
43419: GO 43842
43421: LD_INT 28
43423: DOUBLE
43424: EQUAL
43425: IFTRUE 43429
43427: GO 43447
43429: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43430: LD_ADDR_VAR 0 3
43434: PUSH
43435: LD_INT 13
43437: PUSH
43438: LD_INT 14
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: ST_TO_ADDR
43445: GO 43842
43447: LD_INT 29
43449: DOUBLE
43450: EQUAL
43451: IFTRUE 43455
43453: GO 43473
43455: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43456: LD_ADDR_VAR 0 3
43460: PUSH
43461: LD_INT 13
43463: PUSH
43464: LD_INT 14
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: ST_TO_ADDR
43471: GO 43842
43473: LD_INT 31
43475: DOUBLE
43476: EQUAL
43477: IFTRUE 43481
43479: GO 43499
43481: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43482: LD_ADDR_VAR 0 3
43486: PUSH
43487: LD_INT 13
43489: PUSH
43490: LD_INT 14
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: ST_TO_ADDR
43497: GO 43842
43499: LD_INT 26
43501: DOUBLE
43502: EQUAL
43503: IFTRUE 43507
43505: GO 43525
43507: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43508: LD_ADDR_VAR 0 3
43512: PUSH
43513: LD_INT 13
43515: PUSH
43516: LD_INT 14
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: ST_TO_ADDR
43523: GO 43842
43525: LD_INT 42
43527: DOUBLE
43528: EQUAL
43529: IFTRUE 43533
43531: GO 43559
43533: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43534: LD_ADDR_VAR 0 3
43538: PUSH
43539: LD_INT 21
43541: PUSH
43542: LD_INT 22
43544: PUSH
43545: LD_INT 23
43547: PUSH
43548: LD_INT 24
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: ST_TO_ADDR
43557: GO 43842
43559: LD_INT 43
43561: DOUBLE
43562: EQUAL
43563: IFTRUE 43567
43565: GO 43593
43567: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43568: LD_ADDR_VAR 0 3
43572: PUSH
43573: LD_INT 21
43575: PUSH
43576: LD_INT 22
43578: PUSH
43579: LD_INT 23
43581: PUSH
43582: LD_INT 24
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: ST_TO_ADDR
43591: GO 43842
43593: LD_INT 44
43595: DOUBLE
43596: EQUAL
43597: IFTRUE 43601
43599: GO 43627
43601: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43602: LD_ADDR_VAR 0 3
43606: PUSH
43607: LD_INT 21
43609: PUSH
43610: LD_INT 22
43612: PUSH
43613: LD_INT 23
43615: PUSH
43616: LD_INT 24
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: ST_TO_ADDR
43625: GO 43842
43627: LD_INT 45
43629: DOUBLE
43630: EQUAL
43631: IFTRUE 43635
43633: GO 43661
43635: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43636: LD_ADDR_VAR 0 3
43640: PUSH
43641: LD_INT 21
43643: PUSH
43644: LD_INT 22
43646: PUSH
43647: LD_INT 23
43649: PUSH
43650: LD_INT 24
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: ST_TO_ADDR
43659: GO 43842
43661: LD_INT 49
43663: DOUBLE
43664: EQUAL
43665: IFTRUE 43669
43667: GO 43695
43669: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43670: LD_ADDR_VAR 0 3
43674: PUSH
43675: LD_INT 21
43677: PUSH
43678: LD_INT 22
43680: PUSH
43681: LD_INT 23
43683: PUSH
43684: LD_INT 24
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: ST_TO_ADDR
43693: GO 43842
43695: LD_INT 51
43697: DOUBLE
43698: EQUAL
43699: IFTRUE 43703
43701: GO 43729
43703: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43704: LD_ADDR_VAR 0 3
43708: PUSH
43709: LD_INT 21
43711: PUSH
43712: LD_INT 22
43714: PUSH
43715: LD_INT 23
43717: PUSH
43718: LD_INT 24
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: ST_TO_ADDR
43727: GO 43842
43729: LD_INT 52
43731: DOUBLE
43732: EQUAL
43733: IFTRUE 43737
43735: GO 43763
43737: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43738: LD_ADDR_VAR 0 3
43742: PUSH
43743: LD_INT 21
43745: PUSH
43746: LD_INT 22
43748: PUSH
43749: LD_INT 23
43751: PUSH
43752: LD_INT 24
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: ST_TO_ADDR
43761: GO 43842
43763: LD_INT 53
43765: DOUBLE
43766: EQUAL
43767: IFTRUE 43771
43769: GO 43789
43771: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43772: LD_ADDR_VAR 0 3
43776: PUSH
43777: LD_INT 23
43779: PUSH
43780: LD_INT 24
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: ST_TO_ADDR
43787: GO 43842
43789: LD_INT 46
43791: DOUBLE
43792: EQUAL
43793: IFTRUE 43797
43795: GO 43815
43797: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43798: LD_ADDR_VAR 0 3
43802: PUSH
43803: LD_INT 23
43805: PUSH
43806: LD_INT 24
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: ST_TO_ADDR
43813: GO 43842
43815: LD_INT 47
43817: DOUBLE
43818: EQUAL
43819: IFTRUE 43823
43821: GO 43841
43823: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43824: LD_ADDR_VAR 0 3
43828: PUSH
43829: LD_INT 23
43831: PUSH
43832: LD_INT 24
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: ST_TO_ADDR
43839: GO 43842
43841: POP
// result := ( chassis in result ) ;
43842: LD_ADDR_VAR 0 3
43846: PUSH
43847: LD_VAR 0 1
43851: PUSH
43852: LD_VAR 0 3
43856: IN
43857: ST_TO_ADDR
// end ;
43858: LD_VAR 0 3
43862: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43863: LD_INT 0
43865: PPUSH
43866: PPUSH
43867: PPUSH
43868: PPUSH
43869: PPUSH
43870: PPUSH
43871: PPUSH
// result := array ;
43872: LD_ADDR_VAR 0 5
43876: PUSH
43877: LD_VAR 0 1
43881: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43882: LD_VAR 0 1
43886: NOT
43887: PUSH
43888: LD_VAR 0 2
43892: NOT
43893: OR
43894: PUSH
43895: LD_VAR 0 3
43899: NOT
43900: OR
43901: PUSH
43902: LD_VAR 0 2
43906: PUSH
43907: LD_VAR 0 1
43911: GREATER
43912: OR
43913: PUSH
43914: LD_VAR 0 3
43918: PUSH
43919: LD_VAR 0 1
43923: GREATER
43924: OR
43925: IFFALSE 43929
// exit ;
43927: GO 44225
// if direction then
43929: LD_VAR 0 4
43933: IFFALSE 43997
// begin d := 1 ;
43935: LD_ADDR_VAR 0 9
43939: PUSH
43940: LD_INT 1
43942: ST_TO_ADDR
// if i_from > i_to then
43943: LD_VAR 0 2
43947: PUSH
43948: LD_VAR 0 3
43952: GREATER
43953: IFFALSE 43979
// length := ( array - i_from ) + i_to else
43955: LD_ADDR_VAR 0 11
43959: PUSH
43960: LD_VAR 0 1
43964: PUSH
43965: LD_VAR 0 2
43969: MINUS
43970: PUSH
43971: LD_VAR 0 3
43975: PLUS
43976: ST_TO_ADDR
43977: GO 43995
// length := i_to - i_from ;
43979: LD_ADDR_VAR 0 11
43983: PUSH
43984: LD_VAR 0 3
43988: PUSH
43989: LD_VAR 0 2
43993: MINUS
43994: ST_TO_ADDR
// end else
43995: GO 44058
// begin d := - 1 ;
43997: LD_ADDR_VAR 0 9
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: ST_TO_ADDR
// if i_from > i_to then
44006: LD_VAR 0 2
44010: PUSH
44011: LD_VAR 0 3
44015: GREATER
44016: IFFALSE 44036
// length := i_from - i_to else
44018: LD_ADDR_VAR 0 11
44022: PUSH
44023: LD_VAR 0 2
44027: PUSH
44028: LD_VAR 0 3
44032: MINUS
44033: ST_TO_ADDR
44034: GO 44058
// length := ( array - i_to ) + i_from ;
44036: LD_ADDR_VAR 0 11
44040: PUSH
44041: LD_VAR 0 1
44045: PUSH
44046: LD_VAR 0 3
44050: MINUS
44051: PUSH
44052: LD_VAR 0 2
44056: PLUS
44057: ST_TO_ADDR
// end ; if not length then
44058: LD_VAR 0 11
44062: NOT
44063: IFFALSE 44067
// exit ;
44065: GO 44225
// tmp := array ;
44067: LD_ADDR_VAR 0 10
44071: PUSH
44072: LD_VAR 0 1
44076: ST_TO_ADDR
// for i = 1 to length do
44077: LD_ADDR_VAR 0 6
44081: PUSH
44082: DOUBLE
44083: LD_INT 1
44085: DEC
44086: ST_TO_ADDR
44087: LD_VAR 0 11
44091: PUSH
44092: FOR_TO
44093: IFFALSE 44213
// begin for j = 1 to array do
44095: LD_ADDR_VAR 0 7
44099: PUSH
44100: DOUBLE
44101: LD_INT 1
44103: DEC
44104: ST_TO_ADDR
44105: LD_VAR 0 1
44109: PUSH
44110: FOR_TO
44111: IFFALSE 44199
// begin k := j + d ;
44113: LD_ADDR_VAR 0 8
44117: PUSH
44118: LD_VAR 0 7
44122: PUSH
44123: LD_VAR 0 9
44127: PLUS
44128: ST_TO_ADDR
// if k > array then
44129: LD_VAR 0 8
44133: PUSH
44134: LD_VAR 0 1
44138: GREATER
44139: IFFALSE 44149
// k := 1 ;
44141: LD_ADDR_VAR 0 8
44145: PUSH
44146: LD_INT 1
44148: ST_TO_ADDR
// if not k then
44149: LD_VAR 0 8
44153: NOT
44154: IFFALSE 44166
// k := array ;
44156: LD_ADDR_VAR 0 8
44160: PUSH
44161: LD_VAR 0 1
44165: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44166: LD_ADDR_VAR 0 10
44170: PUSH
44171: LD_VAR 0 10
44175: PPUSH
44176: LD_VAR 0 8
44180: PPUSH
44181: LD_VAR 0 1
44185: PUSH
44186: LD_VAR 0 7
44190: ARRAY
44191: PPUSH
44192: CALL_OW 1
44196: ST_TO_ADDR
// end ;
44197: GO 44110
44199: POP
44200: POP
// array := tmp ;
44201: LD_ADDR_VAR 0 1
44205: PUSH
44206: LD_VAR 0 10
44210: ST_TO_ADDR
// end ;
44211: GO 44092
44213: POP
44214: POP
// result := array ;
44215: LD_ADDR_VAR 0 5
44219: PUSH
44220: LD_VAR 0 1
44224: ST_TO_ADDR
// end ;
44225: LD_VAR 0 5
44229: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44230: LD_INT 0
44232: PPUSH
44233: PPUSH
// result := 0 ;
44234: LD_ADDR_VAR 0 3
44238: PUSH
44239: LD_INT 0
44241: ST_TO_ADDR
// if not array or not value in array then
44242: LD_VAR 0 1
44246: NOT
44247: PUSH
44248: LD_VAR 0 2
44252: PUSH
44253: LD_VAR 0 1
44257: IN
44258: NOT
44259: OR
44260: IFFALSE 44264
// exit ;
44262: GO 44318
// for i = 1 to array do
44264: LD_ADDR_VAR 0 4
44268: PUSH
44269: DOUBLE
44270: LD_INT 1
44272: DEC
44273: ST_TO_ADDR
44274: LD_VAR 0 1
44278: PUSH
44279: FOR_TO
44280: IFFALSE 44316
// if value = array [ i ] then
44282: LD_VAR 0 2
44286: PUSH
44287: LD_VAR 0 1
44291: PUSH
44292: LD_VAR 0 4
44296: ARRAY
44297: EQUAL
44298: IFFALSE 44314
// begin result := i ;
44300: LD_ADDR_VAR 0 3
44304: PUSH
44305: LD_VAR 0 4
44309: ST_TO_ADDR
// exit ;
44310: POP
44311: POP
44312: GO 44318
// end ;
44314: GO 44279
44316: POP
44317: POP
// end ;
44318: LD_VAR 0 3
44322: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44323: LD_INT 0
44325: PPUSH
// vc_chassis := chassis ;
44326: LD_ADDR_OWVAR 37
44330: PUSH
44331: LD_VAR 0 1
44335: ST_TO_ADDR
// vc_engine := engine ;
44336: LD_ADDR_OWVAR 39
44340: PUSH
44341: LD_VAR 0 2
44345: ST_TO_ADDR
// vc_control := control ;
44346: LD_ADDR_OWVAR 38
44350: PUSH
44351: LD_VAR 0 3
44355: ST_TO_ADDR
// vc_weapon := weapon ;
44356: LD_ADDR_OWVAR 40
44360: PUSH
44361: LD_VAR 0 4
44365: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44366: LD_ADDR_OWVAR 41
44370: PUSH
44371: LD_VAR 0 5
44375: ST_TO_ADDR
// end ;
44376: LD_VAR 0 6
44380: RET
// export function WantPlant ( unit ) ; var task ; begin
44381: LD_INT 0
44383: PPUSH
44384: PPUSH
// result := false ;
44385: LD_ADDR_VAR 0 2
44389: PUSH
44390: LD_INT 0
44392: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44393: LD_ADDR_VAR 0 3
44397: PUSH
44398: LD_VAR 0 1
44402: PPUSH
44403: CALL_OW 437
44407: ST_TO_ADDR
// if task then
44408: LD_VAR 0 3
44412: IFFALSE 44440
// if task [ 1 ] [ 1 ] = p then
44414: LD_VAR 0 3
44418: PUSH
44419: LD_INT 1
44421: ARRAY
44422: PUSH
44423: LD_INT 1
44425: ARRAY
44426: PUSH
44427: LD_STRING p
44429: EQUAL
44430: IFFALSE 44440
// result := true ;
44432: LD_ADDR_VAR 0 2
44436: PUSH
44437: LD_INT 1
44439: ST_TO_ADDR
// end ;
44440: LD_VAR 0 2
44444: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44445: LD_INT 0
44447: PPUSH
44448: PPUSH
44449: PPUSH
44450: PPUSH
// if pos < 1 then
44451: LD_VAR 0 2
44455: PUSH
44456: LD_INT 1
44458: LESS
44459: IFFALSE 44463
// exit ;
44461: GO 44766
// if pos = 1 then
44463: LD_VAR 0 2
44467: PUSH
44468: LD_INT 1
44470: EQUAL
44471: IFFALSE 44504
// result := Replace ( arr , pos [ 1 ] , value ) else
44473: LD_ADDR_VAR 0 4
44477: PUSH
44478: LD_VAR 0 1
44482: PPUSH
44483: LD_VAR 0 2
44487: PUSH
44488: LD_INT 1
44490: ARRAY
44491: PPUSH
44492: LD_VAR 0 3
44496: PPUSH
44497: CALL_OW 1
44501: ST_TO_ADDR
44502: GO 44766
// begin tmp := arr ;
44504: LD_ADDR_VAR 0 6
44508: PUSH
44509: LD_VAR 0 1
44513: ST_TO_ADDR
// s_arr := [ tmp ] ;
44514: LD_ADDR_VAR 0 7
44518: PUSH
44519: LD_VAR 0 6
44523: PUSH
44524: EMPTY
44525: LIST
44526: ST_TO_ADDR
// for i = 1 to pos - 1 do
44527: LD_ADDR_VAR 0 5
44531: PUSH
44532: DOUBLE
44533: LD_INT 1
44535: DEC
44536: ST_TO_ADDR
44537: LD_VAR 0 2
44541: PUSH
44542: LD_INT 1
44544: MINUS
44545: PUSH
44546: FOR_TO
44547: IFFALSE 44592
// begin tmp := tmp [ pos [ i ] ] ;
44549: LD_ADDR_VAR 0 6
44553: PUSH
44554: LD_VAR 0 6
44558: PUSH
44559: LD_VAR 0 2
44563: PUSH
44564: LD_VAR 0 5
44568: ARRAY
44569: ARRAY
44570: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44571: LD_ADDR_VAR 0 7
44575: PUSH
44576: LD_VAR 0 7
44580: PUSH
44581: LD_VAR 0 6
44585: PUSH
44586: EMPTY
44587: LIST
44588: ADD
44589: ST_TO_ADDR
// end ;
44590: GO 44546
44592: POP
44593: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44594: LD_ADDR_VAR 0 6
44598: PUSH
44599: LD_VAR 0 6
44603: PPUSH
44604: LD_VAR 0 2
44608: PUSH
44609: LD_VAR 0 2
44613: ARRAY
44614: PPUSH
44615: LD_VAR 0 3
44619: PPUSH
44620: CALL_OW 1
44624: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44625: LD_ADDR_VAR 0 7
44629: PUSH
44630: LD_VAR 0 7
44634: PPUSH
44635: LD_VAR 0 7
44639: PPUSH
44640: LD_VAR 0 6
44644: PPUSH
44645: CALL_OW 1
44649: ST_TO_ADDR
// for i = s_arr downto 2 do
44650: LD_ADDR_VAR 0 5
44654: PUSH
44655: DOUBLE
44656: LD_VAR 0 7
44660: INC
44661: ST_TO_ADDR
44662: LD_INT 2
44664: PUSH
44665: FOR_DOWNTO
44666: IFFALSE 44750
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44668: LD_ADDR_VAR 0 6
44672: PUSH
44673: LD_VAR 0 7
44677: PUSH
44678: LD_VAR 0 5
44682: PUSH
44683: LD_INT 1
44685: MINUS
44686: ARRAY
44687: PPUSH
44688: LD_VAR 0 2
44692: PUSH
44693: LD_VAR 0 5
44697: PUSH
44698: LD_INT 1
44700: MINUS
44701: ARRAY
44702: PPUSH
44703: LD_VAR 0 7
44707: PUSH
44708: LD_VAR 0 5
44712: ARRAY
44713: PPUSH
44714: CALL_OW 1
44718: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44719: LD_ADDR_VAR 0 7
44723: PUSH
44724: LD_VAR 0 7
44728: PPUSH
44729: LD_VAR 0 5
44733: PUSH
44734: LD_INT 1
44736: MINUS
44737: PPUSH
44738: LD_VAR 0 6
44742: PPUSH
44743: CALL_OW 1
44747: ST_TO_ADDR
// end ;
44748: GO 44665
44750: POP
44751: POP
// result := s_arr [ 1 ] ;
44752: LD_ADDR_VAR 0 4
44756: PUSH
44757: LD_VAR 0 7
44761: PUSH
44762: LD_INT 1
44764: ARRAY
44765: ST_TO_ADDR
// end ; end ;
44766: LD_VAR 0 4
44770: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44771: LD_INT 0
44773: PPUSH
44774: PPUSH
// if not list then
44775: LD_VAR 0 1
44779: NOT
44780: IFFALSE 44784
// exit ;
44782: GO 44875
// i := list [ pos1 ] ;
44784: LD_ADDR_VAR 0 5
44788: PUSH
44789: LD_VAR 0 1
44793: PUSH
44794: LD_VAR 0 2
44798: ARRAY
44799: ST_TO_ADDR
// if not i then
44800: LD_VAR 0 5
44804: NOT
44805: IFFALSE 44809
// exit ;
44807: GO 44875
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44809: LD_ADDR_VAR 0 1
44813: PUSH
44814: LD_VAR 0 1
44818: PPUSH
44819: LD_VAR 0 2
44823: PPUSH
44824: LD_VAR 0 1
44828: PUSH
44829: LD_VAR 0 3
44833: ARRAY
44834: PPUSH
44835: CALL_OW 1
44839: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44840: LD_ADDR_VAR 0 1
44844: PUSH
44845: LD_VAR 0 1
44849: PPUSH
44850: LD_VAR 0 3
44854: PPUSH
44855: LD_VAR 0 5
44859: PPUSH
44860: CALL_OW 1
44864: ST_TO_ADDR
// result := list ;
44865: LD_ADDR_VAR 0 4
44869: PUSH
44870: LD_VAR 0 1
44874: ST_TO_ADDR
// end ;
44875: LD_VAR 0 4
44879: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44880: LD_INT 0
44882: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44883: LD_ADDR_VAR 0 5
44887: PUSH
44888: LD_VAR 0 1
44892: PPUSH
44893: CALL_OW 250
44897: PPUSH
44898: LD_VAR 0 1
44902: PPUSH
44903: CALL_OW 251
44907: PPUSH
44908: LD_VAR 0 2
44912: PPUSH
44913: LD_VAR 0 3
44917: PPUSH
44918: LD_VAR 0 4
44922: PPUSH
44923: CALL 44933 0 5
44927: ST_TO_ADDR
// end ;
44928: LD_VAR 0 5
44932: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44933: LD_INT 0
44935: PPUSH
44936: PPUSH
44937: PPUSH
44938: PPUSH
// if not list then
44939: LD_VAR 0 3
44943: NOT
44944: IFFALSE 44948
// exit ;
44946: GO 45336
// result := [ ] ;
44948: LD_ADDR_VAR 0 6
44952: PUSH
44953: EMPTY
44954: ST_TO_ADDR
// for i in list do
44955: LD_ADDR_VAR 0 7
44959: PUSH
44960: LD_VAR 0 3
44964: PUSH
44965: FOR_IN
44966: IFFALSE 45168
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44968: LD_ADDR_VAR 0 9
44972: PUSH
44973: LD_VAR 0 7
44977: PPUSH
44978: LD_VAR 0 1
44982: PPUSH
44983: LD_VAR 0 2
44987: PPUSH
44988: CALL_OW 297
44992: ST_TO_ADDR
// if not result then
44993: LD_VAR 0 6
44997: NOT
44998: IFFALSE 45024
// result := [ [ i , tmp ] ] else
45000: LD_ADDR_VAR 0 6
45004: PUSH
45005: LD_VAR 0 7
45009: PUSH
45010: LD_VAR 0 9
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: EMPTY
45020: LIST
45021: ST_TO_ADDR
45022: GO 45166
// begin if result [ result ] [ 2 ] < tmp then
45024: LD_VAR 0 6
45028: PUSH
45029: LD_VAR 0 6
45033: ARRAY
45034: PUSH
45035: LD_INT 2
45037: ARRAY
45038: PUSH
45039: LD_VAR 0 9
45043: LESS
45044: IFFALSE 45086
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45046: LD_ADDR_VAR 0 6
45050: PUSH
45051: LD_VAR 0 6
45055: PPUSH
45056: LD_VAR 0 6
45060: PUSH
45061: LD_INT 1
45063: PLUS
45064: PPUSH
45065: LD_VAR 0 7
45069: PUSH
45070: LD_VAR 0 9
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PPUSH
45079: CALL_OW 2
45083: ST_TO_ADDR
45084: GO 45166
// for j = 1 to result do
45086: LD_ADDR_VAR 0 8
45090: PUSH
45091: DOUBLE
45092: LD_INT 1
45094: DEC
45095: ST_TO_ADDR
45096: LD_VAR 0 6
45100: PUSH
45101: FOR_TO
45102: IFFALSE 45164
// begin if tmp < result [ j ] [ 2 ] then
45104: LD_VAR 0 9
45108: PUSH
45109: LD_VAR 0 6
45113: PUSH
45114: LD_VAR 0 8
45118: ARRAY
45119: PUSH
45120: LD_INT 2
45122: ARRAY
45123: LESS
45124: IFFALSE 45162
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45126: LD_ADDR_VAR 0 6
45130: PUSH
45131: LD_VAR 0 6
45135: PPUSH
45136: LD_VAR 0 8
45140: PPUSH
45141: LD_VAR 0 7
45145: PUSH
45146: LD_VAR 0 9
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PPUSH
45155: CALL_OW 2
45159: ST_TO_ADDR
// break ;
45160: GO 45164
// end ; end ;
45162: GO 45101
45164: POP
45165: POP
// end ; end ;
45166: GO 44965
45168: POP
45169: POP
// if result and not asc then
45170: LD_VAR 0 6
45174: PUSH
45175: LD_VAR 0 4
45179: NOT
45180: AND
45181: IFFALSE 45256
// begin tmp := result ;
45183: LD_ADDR_VAR 0 9
45187: PUSH
45188: LD_VAR 0 6
45192: ST_TO_ADDR
// for i = tmp downto 1 do
45193: LD_ADDR_VAR 0 7
45197: PUSH
45198: DOUBLE
45199: LD_VAR 0 9
45203: INC
45204: ST_TO_ADDR
45205: LD_INT 1
45207: PUSH
45208: FOR_DOWNTO
45209: IFFALSE 45254
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45211: LD_ADDR_VAR 0 6
45215: PUSH
45216: LD_VAR 0 6
45220: PPUSH
45221: LD_VAR 0 9
45225: PUSH
45226: LD_VAR 0 7
45230: MINUS
45231: PUSH
45232: LD_INT 1
45234: PLUS
45235: PPUSH
45236: LD_VAR 0 9
45240: PUSH
45241: LD_VAR 0 7
45245: ARRAY
45246: PPUSH
45247: CALL_OW 1
45251: ST_TO_ADDR
45252: GO 45208
45254: POP
45255: POP
// end ; tmp := [ ] ;
45256: LD_ADDR_VAR 0 9
45260: PUSH
45261: EMPTY
45262: ST_TO_ADDR
// if mode then
45263: LD_VAR 0 5
45267: IFFALSE 45336
// begin for i = 1 to result do
45269: LD_ADDR_VAR 0 7
45273: PUSH
45274: DOUBLE
45275: LD_INT 1
45277: DEC
45278: ST_TO_ADDR
45279: LD_VAR 0 6
45283: PUSH
45284: FOR_TO
45285: IFFALSE 45324
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45287: LD_ADDR_VAR 0 9
45291: PUSH
45292: LD_VAR 0 9
45296: PPUSH
45297: LD_VAR 0 7
45301: PPUSH
45302: LD_VAR 0 6
45306: PUSH
45307: LD_VAR 0 7
45311: ARRAY
45312: PUSH
45313: LD_INT 1
45315: ARRAY
45316: PPUSH
45317: CALL_OW 1
45321: ST_TO_ADDR
45322: GO 45284
45324: POP
45325: POP
// result := tmp ;
45326: LD_ADDR_VAR 0 6
45330: PUSH
45331: LD_VAR 0 9
45335: ST_TO_ADDR
// end ; end ;
45336: LD_VAR 0 6
45340: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45341: LD_INT 0
45343: PPUSH
45344: PPUSH
45345: PPUSH
45346: PPUSH
45347: PPUSH
45348: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45349: LD_ADDR_VAR 0 5
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: EMPTY
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: ST_TO_ADDR
// if not x or not y then
45371: LD_VAR 0 2
45375: NOT
45376: PUSH
45377: LD_VAR 0 3
45381: NOT
45382: OR
45383: IFFALSE 45387
// exit ;
45385: GO 47037
// if not range then
45387: LD_VAR 0 4
45391: NOT
45392: IFFALSE 45402
// range := 10 ;
45394: LD_ADDR_VAR 0 4
45398: PUSH
45399: LD_INT 10
45401: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45402: LD_ADDR_VAR 0 8
45406: PUSH
45407: LD_INT 81
45409: PUSH
45410: LD_VAR 0 1
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 92
45421: PUSH
45422: LD_VAR 0 2
45426: PUSH
45427: LD_VAR 0 3
45431: PUSH
45432: LD_VAR 0 4
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 3
45445: PUSH
45446: LD_INT 21
45448: PUSH
45449: LD_INT 3
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: LIST
45464: PPUSH
45465: CALL_OW 69
45469: ST_TO_ADDR
// if not tmp then
45470: LD_VAR 0 8
45474: NOT
45475: IFFALSE 45479
// exit ;
45477: GO 47037
// for i in tmp do
45479: LD_ADDR_VAR 0 6
45483: PUSH
45484: LD_VAR 0 8
45488: PUSH
45489: FOR_IN
45490: IFFALSE 47012
// begin points := [ 0 , 0 , 0 ] ;
45492: LD_ADDR_VAR 0 9
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: LIST
45510: ST_TO_ADDR
// bpoints := 1 ;
45511: LD_ADDR_VAR 0 10
45515: PUSH
45516: LD_INT 1
45518: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45519: LD_VAR 0 6
45523: PPUSH
45524: CALL_OW 247
45528: PUSH
45529: LD_INT 1
45531: DOUBLE
45532: EQUAL
45533: IFTRUE 45537
45535: GO 46115
45537: POP
// begin if GetClass ( i ) = 1 then
45538: LD_VAR 0 6
45542: PPUSH
45543: CALL_OW 257
45547: PUSH
45548: LD_INT 1
45550: EQUAL
45551: IFFALSE 45572
// points := [ 10 , 5 , 3 ] ;
45553: LD_ADDR_VAR 0 9
45557: PUSH
45558: LD_INT 10
45560: PUSH
45561: LD_INT 5
45563: PUSH
45564: LD_INT 3
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: LIST
45571: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45572: LD_VAR 0 6
45576: PPUSH
45577: CALL_OW 257
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: LD_INT 3
45587: PUSH
45588: LD_INT 4
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: LIST
45595: IN
45596: IFFALSE 45617
// points := [ 3 , 2 , 1 ] ;
45598: LD_ADDR_VAR 0 9
45602: PUSH
45603: LD_INT 3
45605: PUSH
45606: LD_INT 2
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: LIST
45616: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45617: LD_VAR 0 6
45621: PPUSH
45622: CALL_OW 257
45626: PUSH
45627: LD_INT 5
45629: EQUAL
45630: IFFALSE 45651
// points := [ 130 , 5 , 2 ] ;
45632: LD_ADDR_VAR 0 9
45636: PUSH
45637: LD_INT 130
45639: PUSH
45640: LD_INT 5
45642: PUSH
45643: LD_INT 2
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: LIST
45650: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45651: LD_VAR 0 6
45655: PPUSH
45656: CALL_OW 257
45660: PUSH
45661: LD_INT 8
45663: EQUAL
45664: IFFALSE 45685
// points := [ 35 , 35 , 30 ] ;
45666: LD_ADDR_VAR 0 9
45670: PUSH
45671: LD_INT 35
45673: PUSH
45674: LD_INT 35
45676: PUSH
45677: LD_INT 30
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: LIST
45684: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45685: LD_VAR 0 6
45689: PPUSH
45690: CALL_OW 257
45694: PUSH
45695: LD_INT 9
45697: EQUAL
45698: IFFALSE 45719
// points := [ 20 , 55 , 40 ] ;
45700: LD_ADDR_VAR 0 9
45704: PUSH
45705: LD_INT 20
45707: PUSH
45708: LD_INT 55
45710: PUSH
45711: LD_INT 40
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: LIST
45718: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45719: LD_VAR 0 6
45723: PPUSH
45724: CALL_OW 257
45728: PUSH
45729: LD_INT 12
45731: PUSH
45732: LD_INT 16
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: IN
45739: IFFALSE 45760
// points := [ 5 , 3 , 2 ] ;
45741: LD_ADDR_VAR 0 9
45745: PUSH
45746: LD_INT 5
45748: PUSH
45749: LD_INT 3
45751: PUSH
45752: LD_INT 2
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: LIST
45759: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45760: LD_VAR 0 6
45764: PPUSH
45765: CALL_OW 257
45769: PUSH
45770: LD_INT 17
45772: EQUAL
45773: IFFALSE 45794
// points := [ 100 , 50 , 75 ] ;
45775: LD_ADDR_VAR 0 9
45779: PUSH
45780: LD_INT 100
45782: PUSH
45783: LD_INT 50
45785: PUSH
45786: LD_INT 75
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: LIST
45793: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45794: LD_VAR 0 6
45798: PPUSH
45799: CALL_OW 257
45803: PUSH
45804: LD_INT 15
45806: EQUAL
45807: IFFALSE 45828
// points := [ 10 , 5 , 3 ] ;
45809: LD_ADDR_VAR 0 9
45813: PUSH
45814: LD_INT 10
45816: PUSH
45817: LD_INT 5
45819: PUSH
45820: LD_INT 3
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: LIST
45827: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45828: LD_VAR 0 6
45832: PPUSH
45833: CALL_OW 257
45837: PUSH
45838: LD_INT 14
45840: EQUAL
45841: IFFALSE 45862
// points := [ 10 , 0 , 0 ] ;
45843: LD_ADDR_VAR 0 9
45847: PUSH
45848: LD_INT 10
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: LIST
45861: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45862: LD_VAR 0 6
45866: PPUSH
45867: CALL_OW 257
45871: PUSH
45872: LD_INT 11
45874: EQUAL
45875: IFFALSE 45896
// points := [ 30 , 10 , 5 ] ;
45877: LD_ADDR_VAR 0 9
45881: PUSH
45882: LD_INT 30
45884: PUSH
45885: LD_INT 10
45887: PUSH
45888: LD_INT 5
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: LIST
45895: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45896: LD_VAR 0 1
45900: PPUSH
45901: LD_INT 5
45903: PPUSH
45904: CALL_OW 321
45908: PUSH
45909: LD_INT 2
45911: EQUAL
45912: IFFALSE 45929
// bpoints := bpoints * 1.8 ;
45914: LD_ADDR_VAR 0 10
45918: PUSH
45919: LD_VAR 0 10
45923: PUSH
45924: LD_REAL  1.80000000000000E+0000
45927: MUL
45928: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45929: LD_VAR 0 6
45933: PPUSH
45934: CALL_OW 257
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: LD_INT 3
45947: PUSH
45948: LD_INT 4
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: IN
45957: PUSH
45958: LD_VAR 0 1
45962: PPUSH
45963: LD_INT 51
45965: PPUSH
45966: CALL_OW 321
45970: PUSH
45971: LD_INT 2
45973: EQUAL
45974: AND
45975: IFFALSE 45992
// bpoints := bpoints * 1.2 ;
45977: LD_ADDR_VAR 0 10
45981: PUSH
45982: LD_VAR 0 10
45986: PUSH
45987: LD_REAL  1.20000000000000E+0000
45990: MUL
45991: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45992: LD_VAR 0 6
45996: PPUSH
45997: CALL_OW 257
46001: PUSH
46002: LD_INT 5
46004: PUSH
46005: LD_INT 7
46007: PUSH
46008: LD_INT 9
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: LIST
46015: IN
46016: PUSH
46017: LD_VAR 0 1
46021: PPUSH
46022: LD_INT 52
46024: PPUSH
46025: CALL_OW 321
46029: PUSH
46030: LD_INT 2
46032: EQUAL
46033: AND
46034: IFFALSE 46051
// bpoints := bpoints * 1.5 ;
46036: LD_ADDR_VAR 0 10
46040: PUSH
46041: LD_VAR 0 10
46045: PUSH
46046: LD_REAL  1.50000000000000E+0000
46049: MUL
46050: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46051: LD_VAR 0 1
46055: PPUSH
46056: LD_INT 66
46058: PPUSH
46059: CALL_OW 321
46063: PUSH
46064: LD_INT 2
46066: EQUAL
46067: IFFALSE 46084
// bpoints := bpoints * 1.1 ;
46069: LD_ADDR_VAR 0 10
46073: PUSH
46074: LD_VAR 0 10
46078: PUSH
46079: LD_REAL  1.10000000000000E+0000
46082: MUL
46083: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46084: LD_ADDR_VAR 0 10
46088: PUSH
46089: LD_VAR 0 10
46093: PUSH
46094: LD_VAR 0 6
46098: PPUSH
46099: LD_INT 1
46101: PPUSH
46102: CALL_OW 259
46106: PUSH
46107: LD_REAL  1.15000000000000E+0000
46110: MUL
46111: MUL
46112: ST_TO_ADDR
// end ; unit_vehicle :
46113: GO 46941
46115: LD_INT 2
46117: DOUBLE
46118: EQUAL
46119: IFTRUE 46123
46121: GO 46929
46123: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46124: LD_VAR 0 6
46128: PPUSH
46129: CALL_OW 264
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: LD_INT 42
46139: PUSH
46140: LD_INT 24
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: LIST
46147: IN
46148: IFFALSE 46169
// points := [ 25 , 5 , 3 ] ;
46150: LD_ADDR_VAR 0 9
46154: PUSH
46155: LD_INT 25
46157: PUSH
46158: LD_INT 5
46160: PUSH
46161: LD_INT 3
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: LIST
46168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46169: LD_VAR 0 6
46173: PPUSH
46174: CALL_OW 264
46178: PUSH
46179: LD_INT 4
46181: PUSH
46182: LD_INT 43
46184: PUSH
46185: LD_INT 25
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: LIST
46192: IN
46193: IFFALSE 46214
// points := [ 40 , 15 , 5 ] ;
46195: LD_ADDR_VAR 0 9
46199: PUSH
46200: LD_INT 40
46202: PUSH
46203: LD_INT 15
46205: PUSH
46206: LD_INT 5
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: LIST
46213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46214: LD_VAR 0 6
46218: PPUSH
46219: CALL_OW 264
46223: PUSH
46224: LD_INT 3
46226: PUSH
46227: LD_INT 23
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: IN
46234: IFFALSE 46255
// points := [ 7 , 25 , 8 ] ;
46236: LD_ADDR_VAR 0 9
46240: PUSH
46241: LD_INT 7
46243: PUSH
46244: LD_INT 25
46246: PUSH
46247: LD_INT 8
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: LIST
46254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46255: LD_VAR 0 6
46259: PPUSH
46260: CALL_OW 264
46264: PUSH
46265: LD_INT 5
46267: PUSH
46268: LD_INT 27
46270: PUSH
46271: LD_INT 44
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: LIST
46278: IN
46279: IFFALSE 46300
// points := [ 14 , 50 , 16 ] ;
46281: LD_ADDR_VAR 0 9
46285: PUSH
46286: LD_INT 14
46288: PUSH
46289: LD_INT 50
46291: PUSH
46292: LD_INT 16
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: LIST
46299: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46300: LD_VAR 0 6
46304: PPUSH
46305: CALL_OW 264
46309: PUSH
46310: LD_INT 6
46312: PUSH
46313: LD_INT 46
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: IN
46320: IFFALSE 46341
// points := [ 32 , 120 , 70 ] ;
46322: LD_ADDR_VAR 0 9
46326: PUSH
46327: LD_INT 32
46329: PUSH
46330: LD_INT 120
46332: PUSH
46333: LD_INT 70
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: LIST
46340: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46341: LD_VAR 0 6
46345: PPUSH
46346: CALL_OW 264
46350: PUSH
46351: LD_INT 7
46353: PUSH
46354: LD_INT 28
46356: PUSH
46357: LD_INT 45
46359: PUSH
46360: LD_INT 92
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: IN
46369: IFFALSE 46390
// points := [ 35 , 20 , 45 ] ;
46371: LD_ADDR_VAR 0 9
46375: PUSH
46376: LD_INT 35
46378: PUSH
46379: LD_INT 20
46381: PUSH
46382: LD_INT 45
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: LIST
46389: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46390: LD_VAR 0 6
46394: PPUSH
46395: CALL_OW 264
46399: PUSH
46400: LD_INT 47
46402: PUSH
46403: EMPTY
46404: LIST
46405: IN
46406: IFFALSE 46427
// points := [ 67 , 45 , 75 ] ;
46408: LD_ADDR_VAR 0 9
46412: PUSH
46413: LD_INT 67
46415: PUSH
46416: LD_INT 45
46418: PUSH
46419: LD_INT 75
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: LIST
46426: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46427: LD_VAR 0 6
46431: PPUSH
46432: CALL_OW 264
46436: PUSH
46437: LD_INT 26
46439: PUSH
46440: EMPTY
46441: LIST
46442: IN
46443: IFFALSE 46464
// points := [ 120 , 30 , 80 ] ;
46445: LD_ADDR_VAR 0 9
46449: PUSH
46450: LD_INT 120
46452: PUSH
46453: LD_INT 30
46455: PUSH
46456: LD_INT 80
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: LIST
46463: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46464: LD_VAR 0 6
46468: PPUSH
46469: CALL_OW 264
46473: PUSH
46474: LD_INT 22
46476: PUSH
46477: EMPTY
46478: LIST
46479: IN
46480: IFFALSE 46501
// points := [ 40 , 1 , 1 ] ;
46482: LD_ADDR_VAR 0 9
46486: PUSH
46487: LD_INT 40
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: LIST
46500: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46501: LD_VAR 0 6
46505: PPUSH
46506: CALL_OW 264
46510: PUSH
46511: LD_INT 29
46513: PUSH
46514: EMPTY
46515: LIST
46516: IN
46517: IFFALSE 46538
// points := [ 70 , 200 , 400 ] ;
46519: LD_ADDR_VAR 0 9
46523: PUSH
46524: LD_INT 70
46526: PUSH
46527: LD_INT 200
46529: PUSH
46530: LD_INT 400
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: LIST
46537: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46538: LD_VAR 0 6
46542: PPUSH
46543: CALL_OW 264
46547: PUSH
46548: LD_INT 14
46550: PUSH
46551: LD_INT 53
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: IN
46558: IFFALSE 46579
// points := [ 40 , 10 , 20 ] ;
46560: LD_ADDR_VAR 0 9
46564: PUSH
46565: LD_INT 40
46567: PUSH
46568: LD_INT 10
46570: PUSH
46571: LD_INT 20
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: LIST
46578: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46579: LD_VAR 0 6
46583: PPUSH
46584: CALL_OW 264
46588: PUSH
46589: LD_INT 9
46591: PUSH
46592: EMPTY
46593: LIST
46594: IN
46595: IFFALSE 46616
// points := [ 5 , 70 , 20 ] ;
46597: LD_ADDR_VAR 0 9
46601: PUSH
46602: LD_INT 5
46604: PUSH
46605: LD_INT 70
46607: PUSH
46608: LD_INT 20
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: LIST
46615: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46616: LD_VAR 0 6
46620: PPUSH
46621: CALL_OW 264
46625: PUSH
46626: LD_INT 10
46628: PUSH
46629: EMPTY
46630: LIST
46631: IN
46632: IFFALSE 46653
// points := [ 35 , 110 , 70 ] ;
46634: LD_ADDR_VAR 0 9
46638: PUSH
46639: LD_INT 35
46641: PUSH
46642: LD_INT 110
46644: PUSH
46645: LD_INT 70
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: LIST
46652: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46653: LD_VAR 0 6
46657: PPUSH
46658: CALL_OW 265
46662: PUSH
46663: LD_INT 25
46665: EQUAL
46666: IFFALSE 46687
// points := [ 80 , 65 , 100 ] ;
46668: LD_ADDR_VAR 0 9
46672: PUSH
46673: LD_INT 80
46675: PUSH
46676: LD_INT 65
46678: PUSH
46679: LD_INT 100
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: LIST
46686: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46687: LD_VAR 0 6
46691: PPUSH
46692: CALL_OW 263
46696: PUSH
46697: LD_INT 1
46699: EQUAL
46700: IFFALSE 46735
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46702: LD_ADDR_VAR 0 10
46706: PUSH
46707: LD_VAR 0 10
46711: PUSH
46712: LD_VAR 0 6
46716: PPUSH
46717: CALL_OW 311
46721: PPUSH
46722: LD_INT 3
46724: PPUSH
46725: CALL_OW 259
46729: PUSH
46730: LD_INT 4
46732: MUL
46733: MUL
46734: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46735: LD_VAR 0 6
46739: PPUSH
46740: CALL_OW 263
46744: PUSH
46745: LD_INT 2
46747: EQUAL
46748: IFFALSE 46799
// begin j := IsControledBy ( i ) ;
46750: LD_ADDR_VAR 0 7
46754: PUSH
46755: LD_VAR 0 6
46759: PPUSH
46760: CALL_OW 312
46764: ST_TO_ADDR
// if j then
46765: LD_VAR 0 7
46769: IFFALSE 46799
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46771: LD_ADDR_VAR 0 10
46775: PUSH
46776: LD_VAR 0 10
46780: PUSH
46781: LD_VAR 0 7
46785: PPUSH
46786: LD_INT 3
46788: PPUSH
46789: CALL_OW 259
46793: PUSH
46794: LD_INT 3
46796: MUL
46797: MUL
46798: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46799: LD_VAR 0 6
46803: PPUSH
46804: CALL_OW 264
46808: PUSH
46809: LD_INT 5
46811: PUSH
46812: LD_INT 6
46814: PUSH
46815: LD_INT 46
46817: PUSH
46818: LD_INT 44
46820: PUSH
46821: LD_INT 47
46823: PUSH
46824: LD_INT 45
46826: PUSH
46827: LD_INT 28
46829: PUSH
46830: LD_INT 7
46832: PUSH
46833: LD_INT 27
46835: PUSH
46836: LD_INT 29
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: IN
46851: PUSH
46852: LD_VAR 0 1
46856: PPUSH
46857: LD_INT 52
46859: PPUSH
46860: CALL_OW 321
46864: PUSH
46865: LD_INT 2
46867: EQUAL
46868: AND
46869: IFFALSE 46886
// bpoints := bpoints * 1.2 ;
46871: LD_ADDR_VAR 0 10
46875: PUSH
46876: LD_VAR 0 10
46880: PUSH
46881: LD_REAL  1.20000000000000E+0000
46884: MUL
46885: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46886: LD_VAR 0 6
46890: PPUSH
46891: CALL_OW 264
46895: PUSH
46896: LD_INT 6
46898: PUSH
46899: LD_INT 46
46901: PUSH
46902: LD_INT 47
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: LIST
46909: IN
46910: IFFALSE 46927
// bpoints := bpoints * 1.2 ;
46912: LD_ADDR_VAR 0 10
46916: PUSH
46917: LD_VAR 0 10
46921: PUSH
46922: LD_REAL  1.20000000000000E+0000
46925: MUL
46926: ST_TO_ADDR
// end ; unit_building :
46927: GO 46941
46929: LD_INT 3
46931: DOUBLE
46932: EQUAL
46933: IFTRUE 46937
46935: GO 46940
46937: POP
// ; end ;
46938: GO 46941
46940: POP
// for j = 1 to 3 do
46941: LD_ADDR_VAR 0 7
46945: PUSH
46946: DOUBLE
46947: LD_INT 1
46949: DEC
46950: ST_TO_ADDR
46951: LD_INT 3
46953: PUSH
46954: FOR_TO
46955: IFFALSE 47008
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46957: LD_ADDR_VAR 0 5
46961: PUSH
46962: LD_VAR 0 5
46966: PPUSH
46967: LD_VAR 0 7
46971: PPUSH
46972: LD_VAR 0 5
46976: PUSH
46977: LD_VAR 0 7
46981: ARRAY
46982: PUSH
46983: LD_VAR 0 9
46987: PUSH
46988: LD_VAR 0 7
46992: ARRAY
46993: PUSH
46994: LD_VAR 0 10
46998: MUL
46999: PLUS
47000: PPUSH
47001: CALL_OW 1
47005: ST_TO_ADDR
47006: GO 46954
47008: POP
47009: POP
// end ;
47010: GO 45489
47012: POP
47013: POP
// result := Replace ( result , 4 , tmp ) ;
47014: LD_ADDR_VAR 0 5
47018: PUSH
47019: LD_VAR 0 5
47023: PPUSH
47024: LD_INT 4
47026: PPUSH
47027: LD_VAR 0 8
47031: PPUSH
47032: CALL_OW 1
47036: ST_TO_ADDR
// end ;
47037: LD_VAR 0 5
47041: RET
// export function DangerAtRange ( unit , range ) ; begin
47042: LD_INT 0
47044: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47045: LD_ADDR_VAR 0 3
47049: PUSH
47050: LD_VAR 0 1
47054: PPUSH
47055: CALL_OW 255
47059: PPUSH
47060: LD_VAR 0 1
47064: PPUSH
47065: CALL_OW 250
47069: PPUSH
47070: LD_VAR 0 1
47074: PPUSH
47075: CALL_OW 251
47079: PPUSH
47080: LD_VAR 0 2
47084: PPUSH
47085: CALL 45341 0 4
47089: ST_TO_ADDR
// end ;
47090: LD_VAR 0 3
47094: RET
// export function DangerInArea ( side , area ) ; begin
47095: LD_INT 0
47097: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47098: LD_ADDR_VAR 0 3
47102: PUSH
47103: LD_VAR 0 2
47107: PPUSH
47108: LD_INT 81
47110: PUSH
47111: LD_VAR 0 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PPUSH
47120: CALL_OW 70
47124: ST_TO_ADDR
// end ;
47125: LD_VAR 0 3
47129: RET
// export function IsExtension ( b ) ; begin
47130: LD_INT 0
47132: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47133: LD_ADDR_VAR 0 2
47137: PUSH
47138: LD_VAR 0 1
47142: PUSH
47143: LD_INT 23
47145: PUSH
47146: LD_INT 20
47148: PUSH
47149: LD_INT 22
47151: PUSH
47152: LD_INT 17
47154: PUSH
47155: LD_INT 24
47157: PUSH
47158: LD_INT 21
47160: PUSH
47161: LD_INT 19
47163: PUSH
47164: LD_INT 16
47166: PUSH
47167: LD_INT 25
47169: PUSH
47170: LD_INT 18
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: IN
47185: ST_TO_ADDR
// end ;
47186: LD_VAR 0 2
47190: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47191: LD_INT 0
47193: PPUSH
47194: PPUSH
47195: PPUSH
// result := [ ] ;
47196: LD_ADDR_VAR 0 4
47200: PUSH
47201: EMPTY
47202: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47203: LD_ADDR_VAR 0 5
47207: PUSH
47208: LD_VAR 0 2
47212: PPUSH
47213: LD_INT 21
47215: PUSH
47216: LD_INT 3
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PPUSH
47223: CALL_OW 70
47227: ST_TO_ADDR
// if not tmp then
47228: LD_VAR 0 5
47232: NOT
47233: IFFALSE 47237
// exit ;
47235: GO 47301
// if checkLink then
47237: LD_VAR 0 3
47241: IFFALSE 47291
// begin for i in tmp do
47243: LD_ADDR_VAR 0 6
47247: PUSH
47248: LD_VAR 0 5
47252: PUSH
47253: FOR_IN
47254: IFFALSE 47289
// if GetBase ( i ) <> base then
47256: LD_VAR 0 6
47260: PPUSH
47261: CALL_OW 274
47265: PUSH
47266: LD_VAR 0 1
47270: NONEQUAL
47271: IFFALSE 47287
// ComLinkToBase ( base , i ) ;
47273: LD_VAR 0 1
47277: PPUSH
47278: LD_VAR 0 6
47282: PPUSH
47283: CALL_OW 169
47287: GO 47253
47289: POP
47290: POP
// end ; result := tmp ;
47291: LD_ADDR_VAR 0 4
47295: PUSH
47296: LD_VAR 0 5
47300: ST_TO_ADDR
// end ;
47301: LD_VAR 0 4
47305: RET
// export function ComComplete ( units , b ) ; var i ; begin
47306: LD_INT 0
47308: PPUSH
47309: PPUSH
// if not units then
47310: LD_VAR 0 1
47314: NOT
47315: IFFALSE 47319
// exit ;
47317: GO 47409
// for i in units do
47319: LD_ADDR_VAR 0 4
47323: PUSH
47324: LD_VAR 0 1
47328: PUSH
47329: FOR_IN
47330: IFFALSE 47407
// if BuildingStatus ( b ) = bs_build then
47332: LD_VAR 0 2
47336: PPUSH
47337: CALL_OW 461
47341: PUSH
47342: LD_INT 1
47344: EQUAL
47345: IFFALSE 47405
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47347: LD_VAR 0 4
47351: PPUSH
47352: LD_STRING h
47354: PUSH
47355: LD_VAR 0 2
47359: PPUSH
47360: CALL_OW 250
47364: PUSH
47365: LD_VAR 0 2
47369: PPUSH
47370: CALL_OW 251
47374: PUSH
47375: LD_VAR 0 2
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: PUSH
47398: EMPTY
47399: LIST
47400: PPUSH
47401: CALL_OW 446
47405: GO 47329
47407: POP
47408: POP
// end ;
47409: LD_VAR 0 3
47413: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47414: LD_INT 0
47416: PPUSH
47417: PPUSH
47418: PPUSH
47419: PPUSH
47420: PPUSH
47421: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47422: LD_VAR 0 1
47426: NOT
47427: PUSH
47428: LD_VAR 0 1
47432: PPUSH
47433: CALL_OW 263
47437: PUSH
47438: LD_INT 2
47440: NONEQUAL
47441: OR
47442: IFFALSE 47446
// exit ;
47444: GO 47762
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47446: LD_ADDR_VAR 0 6
47450: PUSH
47451: LD_INT 22
47453: PUSH
47454: LD_VAR 0 1
47458: PPUSH
47459: CALL_OW 255
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: LD_INT 30
47473: PUSH
47474: LD_INT 36
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 34
47483: PUSH
47484: LD_INT 31
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: LIST
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PPUSH
47500: CALL_OW 69
47504: ST_TO_ADDR
// if not tmp then
47505: LD_VAR 0 6
47509: NOT
47510: IFFALSE 47514
// exit ;
47512: GO 47762
// result := [ ] ;
47514: LD_ADDR_VAR 0 2
47518: PUSH
47519: EMPTY
47520: ST_TO_ADDR
// for i in tmp do
47521: LD_ADDR_VAR 0 3
47525: PUSH
47526: LD_VAR 0 6
47530: PUSH
47531: FOR_IN
47532: IFFALSE 47603
// begin t := UnitsInside ( i ) ;
47534: LD_ADDR_VAR 0 4
47538: PUSH
47539: LD_VAR 0 3
47543: PPUSH
47544: CALL_OW 313
47548: ST_TO_ADDR
// if t then
47549: LD_VAR 0 4
47553: IFFALSE 47601
// for j in t do
47555: LD_ADDR_VAR 0 7
47559: PUSH
47560: LD_VAR 0 4
47564: PUSH
47565: FOR_IN
47566: IFFALSE 47599
// result := Replace ( result , result + 1 , j ) ;
47568: LD_ADDR_VAR 0 2
47572: PUSH
47573: LD_VAR 0 2
47577: PPUSH
47578: LD_VAR 0 2
47582: PUSH
47583: LD_INT 1
47585: PLUS
47586: PPUSH
47587: LD_VAR 0 7
47591: PPUSH
47592: CALL_OW 1
47596: ST_TO_ADDR
47597: GO 47565
47599: POP
47600: POP
// end ;
47601: GO 47531
47603: POP
47604: POP
// if not result then
47605: LD_VAR 0 2
47609: NOT
47610: IFFALSE 47614
// exit ;
47612: GO 47762
// mech := result [ 1 ] ;
47614: LD_ADDR_VAR 0 5
47618: PUSH
47619: LD_VAR 0 2
47623: PUSH
47624: LD_INT 1
47626: ARRAY
47627: ST_TO_ADDR
// if result > 1 then
47628: LD_VAR 0 2
47632: PUSH
47633: LD_INT 1
47635: GREATER
47636: IFFALSE 47748
// begin for i = 2 to result do
47638: LD_ADDR_VAR 0 3
47642: PUSH
47643: DOUBLE
47644: LD_INT 2
47646: DEC
47647: ST_TO_ADDR
47648: LD_VAR 0 2
47652: PUSH
47653: FOR_TO
47654: IFFALSE 47746
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47656: LD_ADDR_VAR 0 4
47660: PUSH
47661: LD_VAR 0 2
47665: PUSH
47666: LD_VAR 0 3
47670: ARRAY
47671: PPUSH
47672: LD_INT 3
47674: PPUSH
47675: CALL_OW 259
47679: PUSH
47680: LD_VAR 0 2
47684: PUSH
47685: LD_VAR 0 3
47689: ARRAY
47690: PPUSH
47691: CALL_OW 432
47695: MINUS
47696: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47697: LD_VAR 0 4
47701: PUSH
47702: LD_VAR 0 5
47706: PPUSH
47707: LD_INT 3
47709: PPUSH
47710: CALL_OW 259
47714: PUSH
47715: LD_VAR 0 5
47719: PPUSH
47720: CALL_OW 432
47724: MINUS
47725: GREATEREQUAL
47726: IFFALSE 47744
// mech := result [ i ] ;
47728: LD_ADDR_VAR 0 5
47732: PUSH
47733: LD_VAR 0 2
47737: PUSH
47738: LD_VAR 0 3
47742: ARRAY
47743: ST_TO_ADDR
// end ;
47744: GO 47653
47746: POP
47747: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47748: LD_VAR 0 1
47752: PPUSH
47753: LD_VAR 0 5
47757: PPUSH
47758: CALL_OW 135
// end ;
47762: LD_VAR 0 2
47766: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47767: LD_INT 0
47769: PPUSH
47770: PPUSH
47771: PPUSH
47772: PPUSH
47773: PPUSH
47774: PPUSH
47775: PPUSH
47776: PPUSH
47777: PPUSH
47778: PPUSH
47779: PPUSH
47780: PPUSH
47781: PPUSH
// result := [ ] ;
47782: LD_ADDR_VAR 0 7
47786: PUSH
47787: EMPTY
47788: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47789: LD_VAR 0 1
47793: PPUSH
47794: CALL_OW 266
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: IN
47809: NOT
47810: IFFALSE 47814
// exit ;
47812: GO 49448
// if name then
47814: LD_VAR 0 3
47818: IFFALSE 47834
// SetBName ( base_dep , name ) ;
47820: LD_VAR 0 1
47824: PPUSH
47825: LD_VAR 0 3
47829: PPUSH
47830: CALL_OW 500
// base := GetBase ( base_dep ) ;
47834: LD_ADDR_VAR 0 15
47838: PUSH
47839: LD_VAR 0 1
47843: PPUSH
47844: CALL_OW 274
47848: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47849: LD_ADDR_VAR 0 16
47853: PUSH
47854: LD_VAR 0 1
47858: PPUSH
47859: CALL_OW 255
47863: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47864: LD_ADDR_VAR 0 17
47868: PUSH
47869: LD_VAR 0 1
47873: PPUSH
47874: CALL_OW 248
47878: ST_TO_ADDR
// if sources then
47879: LD_VAR 0 5
47883: IFFALSE 47930
// for i = 1 to 3 do
47885: LD_ADDR_VAR 0 8
47889: PUSH
47890: DOUBLE
47891: LD_INT 1
47893: DEC
47894: ST_TO_ADDR
47895: LD_INT 3
47897: PUSH
47898: FOR_TO
47899: IFFALSE 47928
// AddResourceType ( base , i , sources [ i ] ) ;
47901: LD_VAR 0 15
47905: PPUSH
47906: LD_VAR 0 8
47910: PPUSH
47911: LD_VAR 0 5
47915: PUSH
47916: LD_VAR 0 8
47920: ARRAY
47921: PPUSH
47922: CALL_OW 276
47926: GO 47898
47928: POP
47929: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47930: LD_ADDR_VAR 0 18
47934: PUSH
47935: LD_VAR 0 15
47939: PPUSH
47940: LD_VAR 0 2
47944: PPUSH
47945: LD_INT 1
47947: PPUSH
47948: CALL 47191 0 3
47952: ST_TO_ADDR
// InitHc ;
47953: CALL_OW 19
// InitUc ;
47957: CALL_OW 18
// uc_side := side ;
47961: LD_ADDR_OWVAR 20
47965: PUSH
47966: LD_VAR 0 16
47970: ST_TO_ADDR
// uc_nation := nation ;
47971: LD_ADDR_OWVAR 21
47975: PUSH
47976: LD_VAR 0 17
47980: ST_TO_ADDR
// if buildings then
47981: LD_VAR 0 18
47985: IFFALSE 49307
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47987: LD_ADDR_VAR 0 19
47991: PUSH
47992: LD_VAR 0 18
47996: PPUSH
47997: LD_INT 2
47999: PUSH
48000: LD_INT 30
48002: PUSH
48003: LD_INT 29
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 30
48012: PUSH
48013: LD_INT 30
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: LIST
48024: PPUSH
48025: CALL_OW 72
48029: ST_TO_ADDR
// if tmp then
48030: LD_VAR 0 19
48034: IFFALSE 48082
// for i in tmp do
48036: LD_ADDR_VAR 0 8
48040: PUSH
48041: LD_VAR 0 19
48045: PUSH
48046: FOR_IN
48047: IFFALSE 48080
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48049: LD_VAR 0 8
48053: PPUSH
48054: CALL_OW 250
48058: PPUSH
48059: LD_VAR 0 8
48063: PPUSH
48064: CALL_OW 251
48068: PPUSH
48069: LD_VAR 0 16
48073: PPUSH
48074: CALL_OW 441
48078: GO 48046
48080: POP
48081: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48082: LD_VAR 0 18
48086: PPUSH
48087: LD_INT 2
48089: PUSH
48090: LD_INT 30
48092: PUSH
48093: LD_INT 32
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 30
48102: PUSH
48103: LD_INT 33
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: LIST
48114: PPUSH
48115: CALL_OW 72
48119: IFFALSE 48207
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48121: LD_ADDR_VAR 0 8
48125: PUSH
48126: LD_VAR 0 18
48130: PPUSH
48131: LD_INT 2
48133: PUSH
48134: LD_INT 30
48136: PUSH
48137: LD_INT 32
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 30
48146: PUSH
48147: LD_INT 33
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: LIST
48158: PPUSH
48159: CALL_OW 72
48163: PUSH
48164: FOR_IN
48165: IFFALSE 48205
// begin if not GetBWeapon ( i ) then
48167: LD_VAR 0 8
48171: PPUSH
48172: CALL_OW 269
48176: NOT
48177: IFFALSE 48203
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48179: LD_VAR 0 8
48183: PPUSH
48184: LD_VAR 0 8
48188: PPUSH
48189: LD_VAR 0 2
48193: PPUSH
48194: CALL 49453 0 2
48198: PPUSH
48199: CALL_OW 431
// end ;
48203: GO 48164
48205: POP
48206: POP
// end ; for i = 1 to personel do
48207: LD_ADDR_VAR 0 8
48211: PUSH
48212: DOUBLE
48213: LD_INT 1
48215: DEC
48216: ST_TO_ADDR
48217: LD_VAR 0 6
48221: PUSH
48222: FOR_TO
48223: IFFALSE 49287
// begin if i > 4 then
48225: LD_VAR 0 8
48229: PUSH
48230: LD_INT 4
48232: GREATER
48233: IFFALSE 48237
// break ;
48235: GO 49287
// case i of 1 :
48237: LD_VAR 0 8
48241: PUSH
48242: LD_INT 1
48244: DOUBLE
48245: EQUAL
48246: IFTRUE 48250
48248: GO 48330
48250: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48251: LD_ADDR_VAR 0 12
48255: PUSH
48256: LD_VAR 0 18
48260: PPUSH
48261: LD_INT 22
48263: PUSH
48264: LD_VAR 0 16
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 58
48275: PUSH
48276: EMPTY
48277: LIST
48278: PUSH
48279: LD_INT 2
48281: PUSH
48282: LD_INT 30
48284: PUSH
48285: LD_INT 32
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 30
48294: PUSH
48295: LD_INT 4
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 30
48304: PUSH
48305: LD_INT 5
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: LIST
48322: PPUSH
48323: CALL_OW 72
48327: ST_TO_ADDR
48328: GO 48552
48330: LD_INT 2
48332: DOUBLE
48333: EQUAL
48334: IFTRUE 48338
48336: GO 48400
48338: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48339: LD_ADDR_VAR 0 12
48343: PUSH
48344: LD_VAR 0 18
48348: PPUSH
48349: LD_INT 22
48351: PUSH
48352: LD_VAR 0 16
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 2
48363: PUSH
48364: LD_INT 30
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 30
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: LIST
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PPUSH
48393: CALL_OW 72
48397: ST_TO_ADDR
48398: GO 48552
48400: LD_INT 3
48402: DOUBLE
48403: EQUAL
48404: IFTRUE 48408
48406: GO 48470
48408: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48409: LD_ADDR_VAR 0 12
48413: PUSH
48414: LD_VAR 0 18
48418: PPUSH
48419: LD_INT 22
48421: PUSH
48422: LD_VAR 0 16
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 2
48433: PUSH
48434: LD_INT 30
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 30
48446: PUSH
48447: LD_INT 3
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: LIST
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PPUSH
48463: CALL_OW 72
48467: ST_TO_ADDR
48468: GO 48552
48470: LD_INT 4
48472: DOUBLE
48473: EQUAL
48474: IFTRUE 48478
48476: GO 48551
48478: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48479: LD_ADDR_VAR 0 12
48483: PUSH
48484: LD_VAR 0 18
48488: PPUSH
48489: LD_INT 22
48491: PUSH
48492: LD_VAR 0 16
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 2
48503: PUSH
48504: LD_INT 30
48506: PUSH
48507: LD_INT 6
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 30
48516: PUSH
48517: LD_INT 7
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 30
48526: PUSH
48527: LD_INT 8
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PPUSH
48544: CALL_OW 72
48548: ST_TO_ADDR
48549: GO 48552
48551: POP
// if i = 1 then
48552: LD_VAR 0 8
48556: PUSH
48557: LD_INT 1
48559: EQUAL
48560: IFFALSE 48671
// begin tmp := [ ] ;
48562: LD_ADDR_VAR 0 19
48566: PUSH
48567: EMPTY
48568: ST_TO_ADDR
// for j in f do
48569: LD_ADDR_VAR 0 9
48573: PUSH
48574: LD_VAR 0 12
48578: PUSH
48579: FOR_IN
48580: IFFALSE 48653
// if GetBType ( j ) = b_bunker then
48582: LD_VAR 0 9
48586: PPUSH
48587: CALL_OW 266
48591: PUSH
48592: LD_INT 32
48594: EQUAL
48595: IFFALSE 48622
// tmp := Insert ( tmp , 1 , j ) else
48597: LD_ADDR_VAR 0 19
48601: PUSH
48602: LD_VAR 0 19
48606: PPUSH
48607: LD_INT 1
48609: PPUSH
48610: LD_VAR 0 9
48614: PPUSH
48615: CALL_OW 2
48619: ST_TO_ADDR
48620: GO 48651
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48622: LD_ADDR_VAR 0 19
48626: PUSH
48627: LD_VAR 0 19
48631: PPUSH
48632: LD_VAR 0 19
48636: PUSH
48637: LD_INT 1
48639: PLUS
48640: PPUSH
48641: LD_VAR 0 9
48645: PPUSH
48646: CALL_OW 2
48650: ST_TO_ADDR
48651: GO 48579
48653: POP
48654: POP
// if tmp then
48655: LD_VAR 0 19
48659: IFFALSE 48671
// f := tmp ;
48661: LD_ADDR_VAR 0 12
48665: PUSH
48666: LD_VAR 0 19
48670: ST_TO_ADDR
// end ; x := personel [ i ] ;
48671: LD_ADDR_VAR 0 13
48675: PUSH
48676: LD_VAR 0 6
48680: PUSH
48681: LD_VAR 0 8
48685: ARRAY
48686: ST_TO_ADDR
// if x = - 1 then
48687: LD_VAR 0 13
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: EQUAL
48696: IFFALSE 48905
// begin for j in f do
48698: LD_ADDR_VAR 0 9
48702: PUSH
48703: LD_VAR 0 12
48707: PUSH
48708: FOR_IN
48709: IFFALSE 48901
// repeat InitHc ;
48711: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48715: LD_VAR 0 9
48719: PPUSH
48720: CALL_OW 266
48724: PUSH
48725: LD_INT 5
48727: EQUAL
48728: IFFALSE 48798
// begin if UnitsInside ( j ) < 3 then
48730: LD_VAR 0 9
48734: PPUSH
48735: CALL_OW 313
48739: PUSH
48740: LD_INT 3
48742: LESS
48743: IFFALSE 48779
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48745: LD_INT 0
48747: PPUSH
48748: LD_INT 5
48750: PUSH
48751: LD_INT 8
48753: PUSH
48754: LD_INT 9
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: LIST
48761: PUSH
48762: LD_VAR 0 17
48766: ARRAY
48767: PPUSH
48768: LD_VAR 0 4
48772: PPUSH
48773: CALL_OW 380
48777: GO 48796
// PrepareHuman ( false , i , skill ) ;
48779: LD_INT 0
48781: PPUSH
48782: LD_VAR 0 8
48786: PPUSH
48787: LD_VAR 0 4
48791: PPUSH
48792: CALL_OW 380
// end else
48796: GO 48815
// PrepareHuman ( false , i , skill ) ;
48798: LD_INT 0
48800: PPUSH
48801: LD_VAR 0 8
48805: PPUSH
48806: LD_VAR 0 4
48810: PPUSH
48811: CALL_OW 380
// un := CreateHuman ;
48815: LD_ADDR_VAR 0 14
48819: PUSH
48820: CALL_OW 44
48824: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48825: LD_ADDR_VAR 0 7
48829: PUSH
48830: LD_VAR 0 7
48834: PPUSH
48835: LD_INT 1
48837: PPUSH
48838: LD_VAR 0 14
48842: PPUSH
48843: CALL_OW 2
48847: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48848: LD_VAR 0 14
48852: PPUSH
48853: LD_VAR 0 9
48857: PPUSH
48858: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48862: LD_VAR 0 9
48866: PPUSH
48867: CALL_OW 313
48871: PUSH
48872: LD_INT 6
48874: EQUAL
48875: PUSH
48876: LD_VAR 0 9
48880: PPUSH
48881: CALL_OW 266
48885: PUSH
48886: LD_INT 32
48888: PUSH
48889: LD_INT 31
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: IN
48896: OR
48897: IFFALSE 48711
48899: GO 48708
48901: POP
48902: POP
// end else
48903: GO 49285
// for j = 1 to x do
48905: LD_ADDR_VAR 0 9
48909: PUSH
48910: DOUBLE
48911: LD_INT 1
48913: DEC
48914: ST_TO_ADDR
48915: LD_VAR 0 13
48919: PUSH
48920: FOR_TO
48921: IFFALSE 49283
// begin InitHc ;
48923: CALL_OW 19
// if not f then
48927: LD_VAR 0 12
48931: NOT
48932: IFFALSE 49021
// begin PrepareHuman ( false , i , skill ) ;
48934: LD_INT 0
48936: PPUSH
48937: LD_VAR 0 8
48941: PPUSH
48942: LD_VAR 0 4
48946: PPUSH
48947: CALL_OW 380
// un := CreateHuman ;
48951: LD_ADDR_VAR 0 14
48955: PUSH
48956: CALL_OW 44
48960: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48961: LD_ADDR_VAR 0 7
48965: PUSH
48966: LD_VAR 0 7
48970: PPUSH
48971: LD_INT 1
48973: PPUSH
48974: LD_VAR 0 14
48978: PPUSH
48979: CALL_OW 2
48983: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48984: LD_VAR 0 14
48988: PPUSH
48989: LD_VAR 0 1
48993: PPUSH
48994: CALL_OW 250
48998: PPUSH
48999: LD_VAR 0 1
49003: PPUSH
49004: CALL_OW 251
49008: PPUSH
49009: LD_INT 10
49011: PPUSH
49012: LD_INT 0
49014: PPUSH
49015: CALL_OW 50
// continue ;
49019: GO 48920
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49021: LD_VAR 0 12
49025: PUSH
49026: LD_INT 1
49028: ARRAY
49029: PPUSH
49030: CALL_OW 313
49034: PUSH
49035: LD_VAR 0 12
49039: PUSH
49040: LD_INT 1
49042: ARRAY
49043: PPUSH
49044: CALL_OW 266
49048: PUSH
49049: LD_INT 32
49051: PUSH
49052: LD_INT 31
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: IN
49059: AND
49060: PUSH
49061: LD_VAR 0 12
49065: PUSH
49066: LD_INT 1
49068: ARRAY
49069: PPUSH
49070: CALL_OW 313
49074: PUSH
49075: LD_INT 6
49077: EQUAL
49078: OR
49079: IFFALSE 49099
// f := Delete ( f , 1 ) ;
49081: LD_ADDR_VAR 0 12
49085: PUSH
49086: LD_VAR 0 12
49090: PPUSH
49091: LD_INT 1
49093: PPUSH
49094: CALL_OW 3
49098: ST_TO_ADDR
// if not f then
49099: LD_VAR 0 12
49103: NOT
49104: IFFALSE 49122
// begin x := x + 2 ;
49106: LD_ADDR_VAR 0 13
49110: PUSH
49111: LD_VAR 0 13
49115: PUSH
49116: LD_INT 2
49118: PLUS
49119: ST_TO_ADDR
// continue ;
49120: GO 48920
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49122: LD_VAR 0 12
49126: PUSH
49127: LD_INT 1
49129: ARRAY
49130: PPUSH
49131: CALL_OW 266
49135: PUSH
49136: LD_INT 5
49138: EQUAL
49139: IFFALSE 49213
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49141: LD_VAR 0 12
49145: PUSH
49146: LD_INT 1
49148: ARRAY
49149: PPUSH
49150: CALL_OW 313
49154: PUSH
49155: LD_INT 3
49157: LESS
49158: IFFALSE 49194
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49160: LD_INT 0
49162: PPUSH
49163: LD_INT 5
49165: PUSH
49166: LD_INT 8
49168: PUSH
49169: LD_INT 9
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: LIST
49176: PUSH
49177: LD_VAR 0 17
49181: ARRAY
49182: PPUSH
49183: LD_VAR 0 4
49187: PPUSH
49188: CALL_OW 380
49192: GO 49211
// PrepareHuman ( false , i , skill ) ;
49194: LD_INT 0
49196: PPUSH
49197: LD_VAR 0 8
49201: PPUSH
49202: LD_VAR 0 4
49206: PPUSH
49207: CALL_OW 380
// end else
49211: GO 49230
// PrepareHuman ( false , i , skill ) ;
49213: LD_INT 0
49215: PPUSH
49216: LD_VAR 0 8
49220: PPUSH
49221: LD_VAR 0 4
49225: PPUSH
49226: CALL_OW 380
// un := CreateHuman ;
49230: LD_ADDR_VAR 0 14
49234: PUSH
49235: CALL_OW 44
49239: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49240: LD_ADDR_VAR 0 7
49244: PUSH
49245: LD_VAR 0 7
49249: PPUSH
49250: LD_INT 1
49252: PPUSH
49253: LD_VAR 0 14
49257: PPUSH
49258: CALL_OW 2
49262: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49263: LD_VAR 0 14
49267: PPUSH
49268: LD_VAR 0 12
49272: PUSH
49273: LD_INT 1
49275: ARRAY
49276: PPUSH
49277: CALL_OW 52
// end ;
49281: GO 48920
49283: POP
49284: POP
// end ;
49285: GO 48222
49287: POP
49288: POP
// result := result ^ buildings ;
49289: LD_ADDR_VAR 0 7
49293: PUSH
49294: LD_VAR 0 7
49298: PUSH
49299: LD_VAR 0 18
49303: ADD
49304: ST_TO_ADDR
// end else
49305: GO 49448
// begin for i = 1 to personel do
49307: LD_ADDR_VAR 0 8
49311: PUSH
49312: DOUBLE
49313: LD_INT 1
49315: DEC
49316: ST_TO_ADDR
49317: LD_VAR 0 6
49321: PUSH
49322: FOR_TO
49323: IFFALSE 49446
// begin if i > 4 then
49325: LD_VAR 0 8
49329: PUSH
49330: LD_INT 4
49332: GREATER
49333: IFFALSE 49337
// break ;
49335: GO 49446
// x := personel [ i ] ;
49337: LD_ADDR_VAR 0 13
49341: PUSH
49342: LD_VAR 0 6
49346: PUSH
49347: LD_VAR 0 8
49351: ARRAY
49352: ST_TO_ADDR
// if x = - 1 then
49353: LD_VAR 0 13
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: EQUAL
49362: IFFALSE 49366
// continue ;
49364: GO 49322
// PrepareHuman ( false , i , skill ) ;
49366: LD_INT 0
49368: PPUSH
49369: LD_VAR 0 8
49373: PPUSH
49374: LD_VAR 0 4
49378: PPUSH
49379: CALL_OW 380
// un := CreateHuman ;
49383: LD_ADDR_VAR 0 14
49387: PUSH
49388: CALL_OW 44
49392: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49393: LD_VAR 0 14
49397: PPUSH
49398: LD_VAR 0 1
49402: PPUSH
49403: CALL_OW 250
49407: PPUSH
49408: LD_VAR 0 1
49412: PPUSH
49413: CALL_OW 251
49417: PPUSH
49418: LD_INT 10
49420: PPUSH
49421: LD_INT 0
49423: PPUSH
49424: CALL_OW 50
// result := result ^ un ;
49428: LD_ADDR_VAR 0 7
49432: PUSH
49433: LD_VAR 0 7
49437: PUSH
49438: LD_VAR 0 14
49442: ADD
49443: ST_TO_ADDR
// end ;
49444: GO 49322
49446: POP
49447: POP
// end ; end ;
49448: LD_VAR 0 7
49452: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49453: LD_INT 0
49455: PPUSH
49456: PPUSH
49457: PPUSH
49458: PPUSH
49459: PPUSH
49460: PPUSH
49461: PPUSH
49462: PPUSH
49463: PPUSH
49464: PPUSH
49465: PPUSH
49466: PPUSH
49467: PPUSH
49468: PPUSH
49469: PPUSH
49470: PPUSH
// result := false ;
49471: LD_ADDR_VAR 0 3
49475: PUSH
49476: LD_INT 0
49478: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49479: LD_VAR 0 1
49483: NOT
49484: PUSH
49485: LD_VAR 0 1
49489: PPUSH
49490: CALL_OW 266
49494: PUSH
49495: LD_INT 32
49497: PUSH
49498: LD_INT 33
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: IN
49505: NOT
49506: OR
49507: IFFALSE 49511
// exit ;
49509: GO 50620
// nat := GetNation ( tower ) ;
49511: LD_ADDR_VAR 0 12
49515: PUSH
49516: LD_VAR 0 1
49520: PPUSH
49521: CALL_OW 248
49525: ST_TO_ADDR
// side := GetSide ( tower ) ;
49526: LD_ADDR_VAR 0 16
49530: PUSH
49531: LD_VAR 0 1
49535: PPUSH
49536: CALL_OW 255
49540: ST_TO_ADDR
// x := GetX ( tower ) ;
49541: LD_ADDR_VAR 0 10
49545: PUSH
49546: LD_VAR 0 1
49550: PPUSH
49551: CALL_OW 250
49555: ST_TO_ADDR
// y := GetY ( tower ) ;
49556: LD_ADDR_VAR 0 11
49560: PUSH
49561: LD_VAR 0 1
49565: PPUSH
49566: CALL_OW 251
49570: ST_TO_ADDR
// if not x or not y then
49571: LD_VAR 0 10
49575: NOT
49576: PUSH
49577: LD_VAR 0 11
49581: NOT
49582: OR
49583: IFFALSE 49587
// exit ;
49585: GO 50620
// weapon := 0 ;
49587: LD_ADDR_VAR 0 18
49591: PUSH
49592: LD_INT 0
49594: ST_TO_ADDR
// fac_list := [ ] ;
49595: LD_ADDR_VAR 0 17
49599: PUSH
49600: EMPTY
49601: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49602: LD_ADDR_VAR 0 6
49606: PUSH
49607: LD_VAR 0 1
49611: PPUSH
49612: CALL_OW 274
49616: PPUSH
49617: LD_VAR 0 2
49621: PPUSH
49622: LD_INT 0
49624: PPUSH
49625: CALL 47191 0 3
49629: PPUSH
49630: LD_INT 30
49632: PUSH
49633: LD_INT 3
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PPUSH
49640: CALL_OW 72
49644: ST_TO_ADDR
// if not factories then
49645: LD_VAR 0 6
49649: NOT
49650: IFFALSE 49654
// exit ;
49652: GO 50620
// for i in factories do
49654: LD_ADDR_VAR 0 8
49658: PUSH
49659: LD_VAR 0 6
49663: PUSH
49664: FOR_IN
49665: IFFALSE 49690
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49667: LD_ADDR_VAR 0 17
49671: PUSH
49672: LD_VAR 0 17
49676: PUSH
49677: LD_VAR 0 8
49681: PPUSH
49682: CALL_OW 478
49686: UNION
49687: ST_TO_ADDR
49688: GO 49664
49690: POP
49691: POP
// if not fac_list then
49692: LD_VAR 0 17
49696: NOT
49697: IFFALSE 49701
// exit ;
49699: GO 50620
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49701: LD_ADDR_VAR 0 5
49705: PUSH
49706: LD_INT 4
49708: PUSH
49709: LD_INT 5
49711: PUSH
49712: LD_INT 9
49714: PUSH
49715: LD_INT 10
49717: PUSH
49718: LD_INT 6
49720: PUSH
49721: LD_INT 7
49723: PUSH
49724: LD_INT 11
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 27
49738: PUSH
49739: LD_INT 28
49741: PUSH
49742: LD_INT 26
49744: PUSH
49745: LD_INT 30
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 43
49756: PUSH
49757: LD_INT 44
49759: PUSH
49760: LD_INT 46
49762: PUSH
49763: LD_INT 45
49765: PUSH
49766: LD_INT 47
49768: PUSH
49769: LD_INT 49
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: LIST
49784: PUSH
49785: LD_VAR 0 12
49789: ARRAY
49790: ST_TO_ADDR
// list := list isect fac_list ;
49791: LD_ADDR_VAR 0 5
49795: PUSH
49796: LD_VAR 0 5
49800: PUSH
49801: LD_VAR 0 17
49805: ISECT
49806: ST_TO_ADDR
// if not list then
49807: LD_VAR 0 5
49811: NOT
49812: IFFALSE 49816
// exit ;
49814: GO 50620
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49816: LD_VAR 0 12
49820: PUSH
49821: LD_INT 3
49823: EQUAL
49824: PUSH
49825: LD_INT 49
49827: PUSH
49828: LD_VAR 0 5
49832: IN
49833: AND
49834: PUSH
49835: LD_INT 31
49837: PPUSH
49838: LD_VAR 0 16
49842: PPUSH
49843: CALL_OW 321
49847: PUSH
49848: LD_INT 2
49850: EQUAL
49851: AND
49852: IFFALSE 49912
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49854: LD_INT 22
49856: PUSH
49857: LD_VAR 0 16
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 35
49868: PUSH
49869: LD_INT 49
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 91
49878: PUSH
49879: LD_VAR 0 1
49883: PUSH
49884: LD_INT 10
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: LIST
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: LIST
49896: PPUSH
49897: CALL_OW 69
49901: NOT
49902: IFFALSE 49912
// weapon := ru_time_lapser ;
49904: LD_ADDR_VAR 0 18
49908: PUSH
49909: LD_INT 49
49911: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49912: LD_VAR 0 12
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: IN
49927: PUSH
49928: LD_INT 11
49930: PUSH
49931: LD_VAR 0 5
49935: IN
49936: PUSH
49937: LD_INT 30
49939: PUSH
49940: LD_VAR 0 5
49944: IN
49945: OR
49946: AND
49947: PUSH
49948: LD_INT 6
49950: PPUSH
49951: LD_VAR 0 16
49955: PPUSH
49956: CALL_OW 321
49960: PUSH
49961: LD_INT 2
49963: EQUAL
49964: AND
49965: IFFALSE 50130
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49967: LD_INT 22
49969: PUSH
49970: LD_VAR 0 16
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: LD_INT 35
49984: PUSH
49985: LD_INT 11
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 35
49994: PUSH
49995: LD_INT 30
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 91
50009: PUSH
50010: LD_VAR 0 1
50014: PUSH
50015: LD_INT 18
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: LIST
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: LIST
50027: PPUSH
50028: CALL_OW 69
50032: NOT
50033: PUSH
50034: LD_INT 22
50036: PUSH
50037: LD_VAR 0 16
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: LD_INT 30
50051: PUSH
50052: LD_INT 32
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 30
50061: PUSH
50062: LD_INT 33
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 91
50076: PUSH
50077: LD_VAR 0 1
50081: PUSH
50082: LD_INT 12
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: LIST
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: LIST
50094: PUSH
50095: EMPTY
50096: LIST
50097: PPUSH
50098: CALL_OW 69
50102: PUSH
50103: LD_INT 2
50105: GREATER
50106: AND
50107: IFFALSE 50130
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50109: LD_ADDR_VAR 0 18
50113: PUSH
50114: LD_INT 11
50116: PUSH
50117: LD_INT 30
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_VAR 0 12
50128: ARRAY
50129: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50130: LD_VAR 0 18
50134: NOT
50135: PUSH
50136: LD_INT 40
50138: PPUSH
50139: LD_VAR 0 16
50143: PPUSH
50144: CALL_OW 321
50148: PUSH
50149: LD_INT 2
50151: EQUAL
50152: AND
50153: PUSH
50154: LD_INT 7
50156: PUSH
50157: LD_VAR 0 5
50161: IN
50162: PUSH
50163: LD_INT 28
50165: PUSH
50166: LD_VAR 0 5
50170: IN
50171: OR
50172: PUSH
50173: LD_INT 45
50175: PUSH
50176: LD_VAR 0 5
50180: IN
50181: OR
50182: AND
50183: IFFALSE 50437
// begin hex := GetHexInfo ( x , y ) ;
50185: LD_ADDR_VAR 0 4
50189: PUSH
50190: LD_VAR 0 10
50194: PPUSH
50195: LD_VAR 0 11
50199: PPUSH
50200: CALL_OW 546
50204: ST_TO_ADDR
// if hex [ 1 ] then
50205: LD_VAR 0 4
50209: PUSH
50210: LD_INT 1
50212: ARRAY
50213: IFFALSE 50217
// exit ;
50215: GO 50620
// height := hex [ 2 ] ;
50217: LD_ADDR_VAR 0 15
50221: PUSH
50222: LD_VAR 0 4
50226: PUSH
50227: LD_INT 2
50229: ARRAY
50230: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50231: LD_ADDR_VAR 0 14
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: LD_INT 3
50244: PUSH
50245: LD_INT 5
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: ST_TO_ADDR
// for i in tmp do
50254: LD_ADDR_VAR 0 8
50258: PUSH
50259: LD_VAR 0 14
50263: PUSH
50264: FOR_IN
50265: IFFALSE 50435
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50267: LD_ADDR_VAR 0 9
50271: PUSH
50272: LD_VAR 0 10
50276: PPUSH
50277: LD_VAR 0 8
50281: PPUSH
50282: LD_INT 5
50284: PPUSH
50285: CALL_OW 272
50289: PUSH
50290: LD_VAR 0 11
50294: PPUSH
50295: LD_VAR 0 8
50299: PPUSH
50300: LD_INT 5
50302: PPUSH
50303: CALL_OW 273
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50312: LD_VAR 0 9
50316: PUSH
50317: LD_INT 1
50319: ARRAY
50320: PPUSH
50321: LD_VAR 0 9
50325: PUSH
50326: LD_INT 2
50328: ARRAY
50329: PPUSH
50330: CALL_OW 488
50334: IFFALSE 50433
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50336: LD_ADDR_VAR 0 4
50340: PUSH
50341: LD_VAR 0 9
50345: PUSH
50346: LD_INT 1
50348: ARRAY
50349: PPUSH
50350: LD_VAR 0 9
50354: PUSH
50355: LD_INT 2
50357: ARRAY
50358: PPUSH
50359: CALL_OW 546
50363: ST_TO_ADDR
// if hex [ 1 ] then
50364: LD_VAR 0 4
50368: PUSH
50369: LD_INT 1
50371: ARRAY
50372: IFFALSE 50376
// continue ;
50374: GO 50264
// h := hex [ 2 ] ;
50376: LD_ADDR_VAR 0 13
50380: PUSH
50381: LD_VAR 0 4
50385: PUSH
50386: LD_INT 2
50388: ARRAY
50389: ST_TO_ADDR
// if h + 7 < height then
50390: LD_VAR 0 13
50394: PUSH
50395: LD_INT 7
50397: PLUS
50398: PUSH
50399: LD_VAR 0 15
50403: LESS
50404: IFFALSE 50433
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50406: LD_ADDR_VAR 0 18
50410: PUSH
50411: LD_INT 7
50413: PUSH
50414: LD_INT 28
50416: PUSH
50417: LD_INT 45
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: LIST
50424: PUSH
50425: LD_VAR 0 12
50429: ARRAY
50430: ST_TO_ADDR
// break ;
50431: GO 50435
// end ; end ; end ;
50433: GO 50264
50435: POP
50436: POP
// end ; if not weapon then
50437: LD_VAR 0 18
50441: NOT
50442: IFFALSE 50502
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50444: LD_ADDR_VAR 0 5
50448: PUSH
50449: LD_VAR 0 5
50453: PUSH
50454: LD_INT 11
50456: PUSH
50457: LD_INT 30
50459: PUSH
50460: LD_INT 49
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: LIST
50467: DIFF
50468: ST_TO_ADDR
// if not list then
50469: LD_VAR 0 5
50473: NOT
50474: IFFALSE 50478
// exit ;
50476: GO 50620
// weapon := list [ rand ( 1 , list ) ] ;
50478: LD_ADDR_VAR 0 18
50482: PUSH
50483: LD_VAR 0 5
50487: PUSH
50488: LD_INT 1
50490: PPUSH
50491: LD_VAR 0 5
50495: PPUSH
50496: CALL_OW 12
50500: ARRAY
50501: ST_TO_ADDR
// end ; if weapon then
50502: LD_VAR 0 18
50506: IFFALSE 50620
// begin tmp := CostOfWeapon ( weapon ) ;
50508: LD_ADDR_VAR 0 14
50512: PUSH
50513: LD_VAR 0 18
50517: PPUSH
50518: CALL_OW 451
50522: ST_TO_ADDR
// j := GetBase ( tower ) ;
50523: LD_ADDR_VAR 0 9
50527: PUSH
50528: LD_VAR 0 1
50532: PPUSH
50533: CALL_OW 274
50537: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50538: LD_VAR 0 9
50542: PPUSH
50543: LD_INT 1
50545: PPUSH
50546: CALL_OW 275
50550: PUSH
50551: LD_VAR 0 14
50555: PUSH
50556: LD_INT 1
50558: ARRAY
50559: GREATEREQUAL
50560: PUSH
50561: LD_VAR 0 9
50565: PPUSH
50566: LD_INT 2
50568: PPUSH
50569: CALL_OW 275
50573: PUSH
50574: LD_VAR 0 14
50578: PUSH
50579: LD_INT 2
50581: ARRAY
50582: GREATEREQUAL
50583: AND
50584: PUSH
50585: LD_VAR 0 9
50589: PPUSH
50590: LD_INT 3
50592: PPUSH
50593: CALL_OW 275
50597: PUSH
50598: LD_VAR 0 14
50602: PUSH
50603: LD_INT 3
50605: ARRAY
50606: GREATEREQUAL
50607: AND
50608: IFFALSE 50620
// result := weapon ;
50610: LD_ADDR_VAR 0 3
50614: PUSH
50615: LD_VAR 0 18
50619: ST_TO_ADDR
// end ; end ;
50620: LD_VAR 0 3
50624: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50625: LD_INT 0
50627: PPUSH
50628: PPUSH
// result := true ;
50629: LD_ADDR_VAR 0 3
50633: PUSH
50634: LD_INT 1
50636: ST_TO_ADDR
// if array1 = array2 then
50637: LD_VAR 0 1
50641: PUSH
50642: LD_VAR 0 2
50646: EQUAL
50647: IFFALSE 50707
// begin for i = 1 to array1 do
50649: LD_ADDR_VAR 0 4
50653: PUSH
50654: DOUBLE
50655: LD_INT 1
50657: DEC
50658: ST_TO_ADDR
50659: LD_VAR 0 1
50663: PUSH
50664: FOR_TO
50665: IFFALSE 50703
// if array1 [ i ] <> array2 [ i ] then
50667: LD_VAR 0 1
50671: PUSH
50672: LD_VAR 0 4
50676: ARRAY
50677: PUSH
50678: LD_VAR 0 2
50682: PUSH
50683: LD_VAR 0 4
50687: ARRAY
50688: NONEQUAL
50689: IFFALSE 50701
// begin result := false ;
50691: LD_ADDR_VAR 0 3
50695: PUSH
50696: LD_INT 0
50698: ST_TO_ADDR
// break ;
50699: GO 50703
// end ;
50701: GO 50664
50703: POP
50704: POP
// end else
50705: GO 50715
// result := false ;
50707: LD_ADDR_VAR 0 3
50711: PUSH
50712: LD_INT 0
50714: ST_TO_ADDR
// end ;
50715: LD_VAR 0 3
50719: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50720: LD_INT 0
50722: PPUSH
50723: PPUSH
// if not array1 or not array2 then
50724: LD_VAR 0 1
50728: NOT
50729: PUSH
50730: LD_VAR 0 2
50734: NOT
50735: OR
50736: IFFALSE 50740
// exit ;
50738: GO 50804
// result := true ;
50740: LD_ADDR_VAR 0 3
50744: PUSH
50745: LD_INT 1
50747: ST_TO_ADDR
// for i = 1 to array1 do
50748: LD_ADDR_VAR 0 4
50752: PUSH
50753: DOUBLE
50754: LD_INT 1
50756: DEC
50757: ST_TO_ADDR
50758: LD_VAR 0 1
50762: PUSH
50763: FOR_TO
50764: IFFALSE 50802
// if array1 [ i ] <> array2 [ i ] then
50766: LD_VAR 0 1
50770: PUSH
50771: LD_VAR 0 4
50775: ARRAY
50776: PUSH
50777: LD_VAR 0 2
50781: PUSH
50782: LD_VAR 0 4
50786: ARRAY
50787: NONEQUAL
50788: IFFALSE 50800
// begin result := false ;
50790: LD_ADDR_VAR 0 3
50794: PUSH
50795: LD_INT 0
50797: ST_TO_ADDR
// break ;
50798: GO 50802
// end ;
50800: GO 50763
50802: POP
50803: POP
// end ;
50804: LD_VAR 0 3
50808: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50809: LD_INT 0
50811: PPUSH
50812: PPUSH
50813: PPUSH
// pom := GetBase ( fac ) ;
50814: LD_ADDR_VAR 0 5
50818: PUSH
50819: LD_VAR 0 1
50823: PPUSH
50824: CALL_OW 274
50828: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50829: LD_ADDR_VAR 0 4
50833: PUSH
50834: LD_VAR 0 2
50838: PUSH
50839: LD_INT 1
50841: ARRAY
50842: PPUSH
50843: LD_VAR 0 2
50847: PUSH
50848: LD_INT 2
50850: ARRAY
50851: PPUSH
50852: LD_VAR 0 2
50856: PUSH
50857: LD_INT 3
50859: ARRAY
50860: PPUSH
50861: LD_VAR 0 2
50865: PUSH
50866: LD_INT 4
50868: ARRAY
50869: PPUSH
50870: CALL_OW 449
50874: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50875: LD_ADDR_VAR 0 3
50879: PUSH
50880: LD_VAR 0 5
50884: PPUSH
50885: LD_INT 1
50887: PPUSH
50888: CALL_OW 275
50892: PUSH
50893: LD_VAR 0 4
50897: PUSH
50898: LD_INT 1
50900: ARRAY
50901: GREATEREQUAL
50902: PUSH
50903: LD_VAR 0 5
50907: PPUSH
50908: LD_INT 2
50910: PPUSH
50911: CALL_OW 275
50915: PUSH
50916: LD_VAR 0 4
50920: PUSH
50921: LD_INT 2
50923: ARRAY
50924: GREATEREQUAL
50925: AND
50926: PUSH
50927: LD_VAR 0 5
50931: PPUSH
50932: LD_INT 3
50934: PPUSH
50935: CALL_OW 275
50939: PUSH
50940: LD_VAR 0 4
50944: PUSH
50945: LD_INT 3
50947: ARRAY
50948: GREATEREQUAL
50949: AND
50950: ST_TO_ADDR
// end ;
50951: LD_VAR 0 3
50955: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50956: LD_INT 0
50958: PPUSH
50959: PPUSH
50960: PPUSH
50961: PPUSH
// pom := GetBase ( building ) ;
50962: LD_ADDR_VAR 0 3
50966: PUSH
50967: LD_VAR 0 1
50971: PPUSH
50972: CALL_OW 274
50976: ST_TO_ADDR
// if not pom then
50977: LD_VAR 0 3
50981: NOT
50982: IFFALSE 50986
// exit ;
50984: GO 51156
// btype := GetBType ( building ) ;
50986: LD_ADDR_VAR 0 5
50990: PUSH
50991: LD_VAR 0 1
50995: PPUSH
50996: CALL_OW 266
51000: ST_TO_ADDR
// if btype = b_armoury then
51001: LD_VAR 0 5
51005: PUSH
51006: LD_INT 4
51008: EQUAL
51009: IFFALSE 51019
// btype := b_barracks ;
51011: LD_ADDR_VAR 0 5
51015: PUSH
51016: LD_INT 5
51018: ST_TO_ADDR
// if btype = b_depot then
51019: LD_VAR 0 5
51023: PUSH
51024: LD_INT 0
51026: EQUAL
51027: IFFALSE 51037
// btype := b_warehouse ;
51029: LD_ADDR_VAR 0 5
51033: PUSH
51034: LD_INT 1
51036: ST_TO_ADDR
// if btype = b_workshop then
51037: LD_VAR 0 5
51041: PUSH
51042: LD_INT 2
51044: EQUAL
51045: IFFALSE 51055
// btype := b_factory ;
51047: LD_ADDR_VAR 0 5
51051: PUSH
51052: LD_INT 3
51054: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51055: LD_ADDR_VAR 0 4
51059: PUSH
51060: LD_VAR 0 5
51064: PPUSH
51065: LD_VAR 0 1
51069: PPUSH
51070: CALL_OW 248
51074: PPUSH
51075: CALL_OW 450
51079: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51080: LD_ADDR_VAR 0 2
51084: PUSH
51085: LD_VAR 0 3
51089: PPUSH
51090: LD_INT 1
51092: PPUSH
51093: CALL_OW 275
51097: PUSH
51098: LD_VAR 0 4
51102: PUSH
51103: LD_INT 1
51105: ARRAY
51106: GREATEREQUAL
51107: PUSH
51108: LD_VAR 0 3
51112: PPUSH
51113: LD_INT 2
51115: PPUSH
51116: CALL_OW 275
51120: PUSH
51121: LD_VAR 0 4
51125: PUSH
51126: LD_INT 2
51128: ARRAY
51129: GREATEREQUAL
51130: AND
51131: PUSH
51132: LD_VAR 0 3
51136: PPUSH
51137: LD_INT 3
51139: PPUSH
51140: CALL_OW 275
51144: PUSH
51145: LD_VAR 0 4
51149: PUSH
51150: LD_INT 3
51152: ARRAY
51153: GREATEREQUAL
51154: AND
51155: ST_TO_ADDR
// end ;
51156: LD_VAR 0 2
51160: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51161: LD_INT 0
51163: PPUSH
51164: PPUSH
51165: PPUSH
// pom := GetBase ( building ) ;
51166: LD_ADDR_VAR 0 4
51170: PUSH
51171: LD_VAR 0 1
51175: PPUSH
51176: CALL_OW 274
51180: ST_TO_ADDR
// if not pom then
51181: LD_VAR 0 4
51185: NOT
51186: IFFALSE 51190
// exit ;
51188: GO 51291
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51190: LD_ADDR_VAR 0 5
51194: PUSH
51195: LD_VAR 0 2
51199: PPUSH
51200: LD_VAR 0 1
51204: PPUSH
51205: CALL_OW 248
51209: PPUSH
51210: CALL_OW 450
51214: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51215: LD_ADDR_VAR 0 3
51219: PUSH
51220: LD_VAR 0 4
51224: PPUSH
51225: LD_INT 1
51227: PPUSH
51228: CALL_OW 275
51232: PUSH
51233: LD_VAR 0 5
51237: PUSH
51238: LD_INT 1
51240: ARRAY
51241: GREATEREQUAL
51242: PUSH
51243: LD_VAR 0 4
51247: PPUSH
51248: LD_INT 2
51250: PPUSH
51251: CALL_OW 275
51255: PUSH
51256: LD_VAR 0 5
51260: PUSH
51261: LD_INT 2
51263: ARRAY
51264: GREATEREQUAL
51265: AND
51266: PUSH
51267: LD_VAR 0 4
51271: PPUSH
51272: LD_INT 3
51274: PPUSH
51275: CALL_OW 275
51279: PUSH
51280: LD_VAR 0 5
51284: PUSH
51285: LD_INT 3
51287: ARRAY
51288: GREATEREQUAL
51289: AND
51290: ST_TO_ADDR
// end ;
51291: LD_VAR 0 3
51295: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51296: LD_INT 0
51298: PPUSH
51299: PPUSH
51300: PPUSH
51301: PPUSH
51302: PPUSH
51303: PPUSH
51304: PPUSH
51305: PPUSH
51306: PPUSH
51307: PPUSH
51308: PPUSH
// result := false ;
51309: LD_ADDR_VAR 0 8
51313: PUSH
51314: LD_INT 0
51316: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51317: LD_VAR 0 5
51321: NOT
51322: PUSH
51323: LD_VAR 0 1
51327: NOT
51328: OR
51329: PUSH
51330: LD_VAR 0 2
51334: NOT
51335: OR
51336: PUSH
51337: LD_VAR 0 3
51341: NOT
51342: OR
51343: IFFALSE 51347
// exit ;
51345: GO 52161
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51347: LD_ADDR_VAR 0 14
51351: PUSH
51352: LD_VAR 0 1
51356: PPUSH
51357: LD_VAR 0 2
51361: PPUSH
51362: LD_VAR 0 3
51366: PPUSH
51367: LD_VAR 0 4
51371: PPUSH
51372: LD_VAR 0 5
51376: PUSH
51377: LD_INT 1
51379: ARRAY
51380: PPUSH
51381: CALL_OW 248
51385: PPUSH
51386: LD_INT 0
51388: PPUSH
51389: CALL 53394 0 6
51393: ST_TO_ADDR
// if not hexes then
51394: LD_VAR 0 14
51398: NOT
51399: IFFALSE 51403
// exit ;
51401: GO 52161
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51403: LD_ADDR_VAR 0 17
51407: PUSH
51408: LD_VAR 0 5
51412: PPUSH
51413: LD_INT 22
51415: PUSH
51416: LD_VAR 0 13
51420: PPUSH
51421: CALL_OW 255
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 2
51432: PUSH
51433: LD_INT 30
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 30
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: LIST
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PPUSH
51462: CALL_OW 72
51466: ST_TO_ADDR
// for i = 1 to hexes do
51467: LD_ADDR_VAR 0 9
51471: PUSH
51472: DOUBLE
51473: LD_INT 1
51475: DEC
51476: ST_TO_ADDR
51477: LD_VAR 0 14
51481: PUSH
51482: FOR_TO
51483: IFFALSE 52159
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51485: LD_ADDR_VAR 0 13
51489: PUSH
51490: LD_VAR 0 14
51494: PUSH
51495: LD_VAR 0 9
51499: ARRAY
51500: PUSH
51501: LD_INT 1
51503: ARRAY
51504: PPUSH
51505: LD_VAR 0 14
51509: PUSH
51510: LD_VAR 0 9
51514: ARRAY
51515: PUSH
51516: LD_INT 2
51518: ARRAY
51519: PPUSH
51520: CALL_OW 428
51524: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51525: LD_VAR 0 14
51529: PUSH
51530: LD_VAR 0 9
51534: ARRAY
51535: PUSH
51536: LD_INT 1
51538: ARRAY
51539: PPUSH
51540: LD_VAR 0 14
51544: PUSH
51545: LD_VAR 0 9
51549: ARRAY
51550: PUSH
51551: LD_INT 2
51553: ARRAY
51554: PPUSH
51555: CALL_OW 351
51559: PUSH
51560: LD_VAR 0 14
51564: PUSH
51565: LD_VAR 0 9
51569: ARRAY
51570: PUSH
51571: LD_INT 1
51573: ARRAY
51574: PPUSH
51575: LD_VAR 0 14
51579: PUSH
51580: LD_VAR 0 9
51584: ARRAY
51585: PUSH
51586: LD_INT 2
51588: ARRAY
51589: PPUSH
51590: CALL_OW 488
51594: NOT
51595: OR
51596: PUSH
51597: LD_VAR 0 13
51601: PPUSH
51602: CALL_OW 247
51606: PUSH
51607: LD_INT 3
51609: EQUAL
51610: OR
51611: IFFALSE 51617
// exit ;
51613: POP
51614: POP
51615: GO 52161
// if not tmp then
51617: LD_VAR 0 13
51621: NOT
51622: IFFALSE 51626
// continue ;
51624: GO 51482
// result := true ;
51626: LD_ADDR_VAR 0 8
51630: PUSH
51631: LD_INT 1
51633: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51634: LD_VAR 0 6
51638: PUSH
51639: LD_VAR 0 13
51643: PPUSH
51644: CALL_OW 247
51648: PUSH
51649: LD_INT 2
51651: EQUAL
51652: AND
51653: PUSH
51654: LD_VAR 0 13
51658: PPUSH
51659: CALL_OW 263
51663: PUSH
51664: LD_INT 1
51666: EQUAL
51667: AND
51668: IFFALSE 51832
// begin if IsDrivenBy ( tmp ) then
51670: LD_VAR 0 13
51674: PPUSH
51675: CALL_OW 311
51679: IFFALSE 51683
// continue ;
51681: GO 51482
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51683: LD_VAR 0 6
51687: PPUSH
51688: LD_INT 3
51690: PUSH
51691: LD_INT 60
51693: PUSH
51694: EMPTY
51695: LIST
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 3
51703: PUSH
51704: LD_INT 55
51706: PUSH
51707: EMPTY
51708: LIST
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PPUSH
51718: CALL_OW 72
51722: IFFALSE 51830
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51724: LD_ADDR_VAR 0 18
51728: PUSH
51729: LD_VAR 0 6
51733: PPUSH
51734: LD_INT 3
51736: PUSH
51737: LD_INT 60
51739: PUSH
51740: EMPTY
51741: LIST
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 3
51749: PUSH
51750: LD_INT 55
51752: PUSH
51753: EMPTY
51754: LIST
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PPUSH
51764: CALL_OW 72
51768: PUSH
51769: LD_INT 1
51771: ARRAY
51772: ST_TO_ADDR
// if IsInUnit ( driver ) then
51773: LD_VAR 0 18
51777: PPUSH
51778: CALL_OW 310
51782: IFFALSE 51793
// ComExit ( driver ) ;
51784: LD_VAR 0 18
51788: PPUSH
51789: CALL 77174 0 1
// AddComEnterUnit ( driver , tmp ) ;
51793: LD_VAR 0 18
51797: PPUSH
51798: LD_VAR 0 13
51802: PPUSH
51803: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51807: LD_VAR 0 18
51811: PPUSH
51812: LD_VAR 0 7
51816: PPUSH
51817: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51821: LD_VAR 0 18
51825: PPUSH
51826: CALL_OW 181
// end ; continue ;
51830: GO 51482
// end ; if not cleaners or not tmp in cleaners then
51832: LD_VAR 0 6
51836: NOT
51837: PUSH
51838: LD_VAR 0 13
51842: PUSH
51843: LD_VAR 0 6
51847: IN
51848: NOT
51849: OR
51850: IFFALSE 52157
// begin if dep then
51852: LD_VAR 0 17
51856: IFFALSE 51992
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51858: LD_ADDR_VAR 0 16
51862: PUSH
51863: LD_VAR 0 17
51867: PUSH
51868: LD_INT 1
51870: ARRAY
51871: PPUSH
51872: CALL_OW 250
51876: PPUSH
51877: LD_VAR 0 17
51881: PUSH
51882: LD_INT 1
51884: ARRAY
51885: PPUSH
51886: CALL_OW 254
51890: PPUSH
51891: LD_INT 5
51893: PPUSH
51894: CALL_OW 272
51898: PUSH
51899: LD_VAR 0 17
51903: PUSH
51904: LD_INT 1
51906: ARRAY
51907: PPUSH
51908: CALL_OW 251
51912: PPUSH
51913: LD_VAR 0 17
51917: PUSH
51918: LD_INT 1
51920: ARRAY
51921: PPUSH
51922: CALL_OW 254
51926: PPUSH
51927: LD_INT 5
51929: PPUSH
51930: CALL_OW 273
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51939: LD_VAR 0 16
51943: PUSH
51944: LD_INT 1
51946: ARRAY
51947: PPUSH
51948: LD_VAR 0 16
51952: PUSH
51953: LD_INT 2
51955: ARRAY
51956: PPUSH
51957: CALL_OW 488
51961: IFFALSE 51992
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51963: LD_VAR 0 13
51967: PPUSH
51968: LD_VAR 0 16
51972: PUSH
51973: LD_INT 1
51975: ARRAY
51976: PPUSH
51977: LD_VAR 0 16
51981: PUSH
51982: LD_INT 2
51984: ARRAY
51985: PPUSH
51986: CALL_OW 111
// continue ;
51990: GO 51482
// end ; end ; r := GetDir ( tmp ) ;
51992: LD_ADDR_VAR 0 15
51996: PUSH
51997: LD_VAR 0 13
52001: PPUSH
52002: CALL_OW 254
52006: ST_TO_ADDR
// if r = 5 then
52007: LD_VAR 0 15
52011: PUSH
52012: LD_INT 5
52014: EQUAL
52015: IFFALSE 52025
// r := 0 ;
52017: LD_ADDR_VAR 0 15
52021: PUSH
52022: LD_INT 0
52024: ST_TO_ADDR
// for j = r to 5 do
52025: LD_ADDR_VAR 0 10
52029: PUSH
52030: DOUBLE
52031: LD_VAR 0 15
52035: DEC
52036: ST_TO_ADDR
52037: LD_INT 5
52039: PUSH
52040: FOR_TO
52041: IFFALSE 52155
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52043: LD_ADDR_VAR 0 11
52047: PUSH
52048: LD_VAR 0 13
52052: PPUSH
52053: CALL_OW 250
52057: PPUSH
52058: LD_VAR 0 10
52062: PPUSH
52063: LD_INT 2
52065: PPUSH
52066: CALL_OW 272
52070: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52071: LD_ADDR_VAR 0 12
52075: PUSH
52076: LD_VAR 0 13
52080: PPUSH
52081: CALL_OW 251
52085: PPUSH
52086: LD_VAR 0 10
52090: PPUSH
52091: LD_INT 2
52093: PPUSH
52094: CALL_OW 273
52098: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52099: LD_VAR 0 11
52103: PPUSH
52104: LD_VAR 0 12
52108: PPUSH
52109: CALL_OW 488
52113: PUSH
52114: LD_VAR 0 11
52118: PPUSH
52119: LD_VAR 0 12
52123: PPUSH
52124: CALL_OW 428
52128: NOT
52129: AND
52130: IFFALSE 52153
// begin ComMoveXY ( tmp , _x , _y ) ;
52132: LD_VAR 0 13
52136: PPUSH
52137: LD_VAR 0 11
52141: PPUSH
52142: LD_VAR 0 12
52146: PPUSH
52147: CALL_OW 111
// break ;
52151: GO 52155
// end ; end ;
52153: GO 52040
52155: POP
52156: POP
// end ; end ;
52157: GO 51482
52159: POP
52160: POP
// end ;
52161: LD_VAR 0 8
52165: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52166: LD_INT 0
52168: PPUSH
// result := true ;
52169: LD_ADDR_VAR 0 3
52173: PUSH
52174: LD_INT 1
52176: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52177: LD_VAR 0 2
52181: PUSH
52182: LD_INT 24
52184: DOUBLE
52185: EQUAL
52186: IFTRUE 52196
52188: LD_INT 33
52190: DOUBLE
52191: EQUAL
52192: IFTRUE 52196
52194: GO 52221
52196: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52197: LD_ADDR_VAR 0 3
52201: PUSH
52202: LD_INT 32
52204: PPUSH
52205: LD_VAR 0 1
52209: PPUSH
52210: CALL_OW 321
52214: PUSH
52215: LD_INT 2
52217: EQUAL
52218: ST_TO_ADDR
52219: GO 52537
52221: LD_INT 20
52223: DOUBLE
52224: EQUAL
52225: IFTRUE 52229
52227: GO 52254
52229: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52230: LD_ADDR_VAR 0 3
52234: PUSH
52235: LD_INT 6
52237: PPUSH
52238: LD_VAR 0 1
52242: PPUSH
52243: CALL_OW 321
52247: PUSH
52248: LD_INT 2
52250: EQUAL
52251: ST_TO_ADDR
52252: GO 52537
52254: LD_INT 22
52256: DOUBLE
52257: EQUAL
52258: IFTRUE 52268
52260: LD_INT 36
52262: DOUBLE
52263: EQUAL
52264: IFTRUE 52268
52266: GO 52293
52268: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52269: LD_ADDR_VAR 0 3
52273: PUSH
52274: LD_INT 15
52276: PPUSH
52277: LD_VAR 0 1
52281: PPUSH
52282: CALL_OW 321
52286: PUSH
52287: LD_INT 2
52289: EQUAL
52290: ST_TO_ADDR
52291: GO 52537
52293: LD_INT 30
52295: DOUBLE
52296: EQUAL
52297: IFTRUE 52301
52299: GO 52326
52301: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52302: LD_ADDR_VAR 0 3
52306: PUSH
52307: LD_INT 20
52309: PPUSH
52310: LD_VAR 0 1
52314: PPUSH
52315: CALL_OW 321
52319: PUSH
52320: LD_INT 2
52322: EQUAL
52323: ST_TO_ADDR
52324: GO 52537
52326: LD_INT 28
52328: DOUBLE
52329: EQUAL
52330: IFTRUE 52340
52332: LD_INT 21
52334: DOUBLE
52335: EQUAL
52336: IFTRUE 52340
52338: GO 52365
52340: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52341: LD_ADDR_VAR 0 3
52345: PUSH
52346: LD_INT 21
52348: PPUSH
52349: LD_VAR 0 1
52353: PPUSH
52354: CALL_OW 321
52358: PUSH
52359: LD_INT 2
52361: EQUAL
52362: ST_TO_ADDR
52363: GO 52537
52365: LD_INT 16
52367: DOUBLE
52368: EQUAL
52369: IFTRUE 52373
52371: GO 52398
52373: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52374: LD_ADDR_VAR 0 3
52378: PUSH
52379: LD_INT 84
52381: PPUSH
52382: LD_VAR 0 1
52386: PPUSH
52387: CALL_OW 321
52391: PUSH
52392: LD_INT 2
52394: EQUAL
52395: ST_TO_ADDR
52396: GO 52537
52398: LD_INT 19
52400: DOUBLE
52401: EQUAL
52402: IFTRUE 52412
52404: LD_INT 23
52406: DOUBLE
52407: EQUAL
52408: IFTRUE 52412
52410: GO 52437
52412: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52413: LD_ADDR_VAR 0 3
52417: PUSH
52418: LD_INT 83
52420: PPUSH
52421: LD_VAR 0 1
52425: PPUSH
52426: CALL_OW 321
52430: PUSH
52431: LD_INT 2
52433: EQUAL
52434: ST_TO_ADDR
52435: GO 52537
52437: LD_INT 17
52439: DOUBLE
52440: EQUAL
52441: IFTRUE 52445
52443: GO 52470
52445: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52446: LD_ADDR_VAR 0 3
52450: PUSH
52451: LD_INT 39
52453: PPUSH
52454: LD_VAR 0 1
52458: PPUSH
52459: CALL_OW 321
52463: PUSH
52464: LD_INT 2
52466: EQUAL
52467: ST_TO_ADDR
52468: GO 52537
52470: LD_INT 18
52472: DOUBLE
52473: EQUAL
52474: IFTRUE 52478
52476: GO 52503
52478: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52479: LD_ADDR_VAR 0 3
52483: PUSH
52484: LD_INT 40
52486: PPUSH
52487: LD_VAR 0 1
52491: PPUSH
52492: CALL_OW 321
52496: PUSH
52497: LD_INT 2
52499: EQUAL
52500: ST_TO_ADDR
52501: GO 52537
52503: LD_INT 27
52505: DOUBLE
52506: EQUAL
52507: IFTRUE 52511
52509: GO 52536
52511: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52512: LD_ADDR_VAR 0 3
52516: PUSH
52517: LD_INT 35
52519: PPUSH
52520: LD_VAR 0 1
52524: PPUSH
52525: CALL_OW 321
52529: PUSH
52530: LD_INT 2
52532: EQUAL
52533: ST_TO_ADDR
52534: GO 52537
52536: POP
// end ;
52537: LD_VAR 0 3
52541: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52542: LD_INT 0
52544: PPUSH
52545: PPUSH
52546: PPUSH
52547: PPUSH
52548: PPUSH
52549: PPUSH
52550: PPUSH
52551: PPUSH
52552: PPUSH
52553: PPUSH
52554: PPUSH
// result := false ;
52555: LD_ADDR_VAR 0 6
52559: PUSH
52560: LD_INT 0
52562: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52563: LD_VAR 0 1
52567: NOT
52568: PUSH
52569: LD_VAR 0 1
52573: PPUSH
52574: CALL_OW 266
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: IN
52589: NOT
52590: OR
52591: PUSH
52592: LD_VAR 0 2
52596: NOT
52597: OR
52598: PUSH
52599: LD_VAR 0 5
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: LD_INT 1
52609: PUSH
52610: LD_INT 2
52612: PUSH
52613: LD_INT 3
52615: PUSH
52616: LD_INT 4
52618: PUSH
52619: LD_INT 5
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: IN
52630: NOT
52631: OR
52632: PUSH
52633: LD_VAR 0 3
52637: PPUSH
52638: LD_VAR 0 4
52642: PPUSH
52643: CALL_OW 488
52647: NOT
52648: OR
52649: IFFALSE 52653
// exit ;
52651: GO 53389
// side := GetSide ( depot ) ;
52653: LD_ADDR_VAR 0 9
52657: PUSH
52658: LD_VAR 0 1
52662: PPUSH
52663: CALL_OW 255
52667: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52668: LD_VAR 0 9
52672: PPUSH
52673: LD_VAR 0 2
52677: PPUSH
52678: CALL 52166 0 2
52682: NOT
52683: IFFALSE 52687
// exit ;
52685: GO 53389
// pom := GetBase ( depot ) ;
52687: LD_ADDR_VAR 0 10
52691: PUSH
52692: LD_VAR 0 1
52696: PPUSH
52697: CALL_OW 274
52701: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52702: LD_ADDR_VAR 0 11
52706: PUSH
52707: LD_VAR 0 2
52711: PPUSH
52712: LD_VAR 0 1
52716: PPUSH
52717: CALL_OW 248
52721: PPUSH
52722: CALL_OW 450
52726: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52727: LD_VAR 0 10
52731: PPUSH
52732: LD_INT 1
52734: PPUSH
52735: CALL_OW 275
52739: PUSH
52740: LD_VAR 0 11
52744: PUSH
52745: LD_INT 1
52747: ARRAY
52748: GREATEREQUAL
52749: PUSH
52750: LD_VAR 0 10
52754: PPUSH
52755: LD_INT 2
52757: PPUSH
52758: CALL_OW 275
52762: PUSH
52763: LD_VAR 0 11
52767: PUSH
52768: LD_INT 2
52770: ARRAY
52771: GREATEREQUAL
52772: AND
52773: PUSH
52774: LD_VAR 0 10
52778: PPUSH
52779: LD_INT 3
52781: PPUSH
52782: CALL_OW 275
52786: PUSH
52787: LD_VAR 0 11
52791: PUSH
52792: LD_INT 3
52794: ARRAY
52795: GREATEREQUAL
52796: AND
52797: NOT
52798: IFFALSE 52802
// exit ;
52800: GO 53389
// if GetBType ( depot ) = b_depot then
52802: LD_VAR 0 1
52806: PPUSH
52807: CALL_OW 266
52811: PUSH
52812: LD_INT 0
52814: EQUAL
52815: IFFALSE 52827
// dist := 28 else
52817: LD_ADDR_VAR 0 14
52821: PUSH
52822: LD_INT 28
52824: ST_TO_ADDR
52825: GO 52835
// dist := 36 ;
52827: LD_ADDR_VAR 0 14
52831: PUSH
52832: LD_INT 36
52834: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52835: LD_VAR 0 1
52839: PPUSH
52840: LD_VAR 0 3
52844: PPUSH
52845: LD_VAR 0 4
52849: PPUSH
52850: CALL_OW 297
52854: PUSH
52855: LD_VAR 0 14
52859: GREATER
52860: IFFALSE 52864
// exit ;
52862: GO 53389
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52864: LD_ADDR_VAR 0 12
52868: PUSH
52869: LD_VAR 0 2
52873: PPUSH
52874: LD_VAR 0 3
52878: PPUSH
52879: LD_VAR 0 4
52883: PPUSH
52884: LD_VAR 0 5
52888: PPUSH
52889: LD_VAR 0 1
52893: PPUSH
52894: CALL_OW 248
52898: PPUSH
52899: LD_INT 0
52901: PPUSH
52902: CALL 53394 0 6
52906: ST_TO_ADDR
// if not hexes then
52907: LD_VAR 0 12
52911: NOT
52912: IFFALSE 52916
// exit ;
52914: GO 53389
// hex := GetHexInfo ( x , y ) ;
52916: LD_ADDR_VAR 0 15
52920: PUSH
52921: LD_VAR 0 3
52925: PPUSH
52926: LD_VAR 0 4
52930: PPUSH
52931: CALL_OW 546
52935: ST_TO_ADDR
// if hex [ 1 ] then
52936: LD_VAR 0 15
52940: PUSH
52941: LD_INT 1
52943: ARRAY
52944: IFFALSE 52948
// exit ;
52946: GO 53389
// height := hex [ 2 ] ;
52948: LD_ADDR_VAR 0 13
52952: PUSH
52953: LD_VAR 0 15
52957: PUSH
52958: LD_INT 2
52960: ARRAY
52961: ST_TO_ADDR
// for i = 1 to hexes do
52962: LD_ADDR_VAR 0 7
52966: PUSH
52967: DOUBLE
52968: LD_INT 1
52970: DEC
52971: ST_TO_ADDR
52972: LD_VAR 0 12
52976: PUSH
52977: FOR_TO
52978: IFFALSE 53308
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52980: LD_VAR 0 12
52984: PUSH
52985: LD_VAR 0 7
52989: ARRAY
52990: PUSH
52991: LD_INT 1
52993: ARRAY
52994: PPUSH
52995: LD_VAR 0 12
52999: PUSH
53000: LD_VAR 0 7
53004: ARRAY
53005: PUSH
53006: LD_INT 2
53008: ARRAY
53009: PPUSH
53010: CALL_OW 488
53014: NOT
53015: PUSH
53016: LD_VAR 0 12
53020: PUSH
53021: LD_VAR 0 7
53025: ARRAY
53026: PUSH
53027: LD_INT 1
53029: ARRAY
53030: PPUSH
53031: LD_VAR 0 12
53035: PUSH
53036: LD_VAR 0 7
53040: ARRAY
53041: PUSH
53042: LD_INT 2
53044: ARRAY
53045: PPUSH
53046: CALL_OW 428
53050: PUSH
53051: LD_INT 0
53053: GREATER
53054: OR
53055: PUSH
53056: LD_VAR 0 12
53060: PUSH
53061: LD_VAR 0 7
53065: ARRAY
53066: PUSH
53067: LD_INT 1
53069: ARRAY
53070: PPUSH
53071: LD_VAR 0 12
53075: PUSH
53076: LD_VAR 0 7
53080: ARRAY
53081: PUSH
53082: LD_INT 2
53084: ARRAY
53085: PPUSH
53086: CALL_OW 351
53090: OR
53091: IFFALSE 53097
// exit ;
53093: POP
53094: POP
53095: GO 53389
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53097: LD_ADDR_VAR 0 8
53101: PUSH
53102: LD_VAR 0 12
53106: PUSH
53107: LD_VAR 0 7
53111: ARRAY
53112: PUSH
53113: LD_INT 1
53115: ARRAY
53116: PPUSH
53117: LD_VAR 0 12
53121: PUSH
53122: LD_VAR 0 7
53126: ARRAY
53127: PUSH
53128: LD_INT 2
53130: ARRAY
53131: PPUSH
53132: CALL_OW 546
53136: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53137: LD_VAR 0 8
53141: PUSH
53142: LD_INT 1
53144: ARRAY
53145: PUSH
53146: LD_VAR 0 8
53150: PUSH
53151: LD_INT 2
53153: ARRAY
53154: PUSH
53155: LD_VAR 0 13
53159: PUSH
53160: LD_INT 2
53162: PLUS
53163: GREATER
53164: OR
53165: PUSH
53166: LD_VAR 0 8
53170: PUSH
53171: LD_INT 2
53173: ARRAY
53174: PUSH
53175: LD_VAR 0 13
53179: PUSH
53180: LD_INT 2
53182: MINUS
53183: LESS
53184: OR
53185: PUSH
53186: LD_VAR 0 8
53190: PUSH
53191: LD_INT 3
53193: ARRAY
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: LD_INT 8
53200: PUSH
53201: LD_INT 9
53203: PUSH
53204: LD_INT 10
53206: PUSH
53207: LD_INT 11
53209: PUSH
53210: LD_INT 12
53212: PUSH
53213: LD_INT 13
53215: PUSH
53216: LD_INT 16
53218: PUSH
53219: LD_INT 17
53221: PUSH
53222: LD_INT 18
53224: PUSH
53225: LD_INT 19
53227: PUSH
53228: LD_INT 20
53230: PUSH
53231: LD_INT 21
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: IN
53249: NOT
53250: OR
53251: PUSH
53252: LD_VAR 0 8
53256: PUSH
53257: LD_INT 5
53259: ARRAY
53260: NOT
53261: OR
53262: PUSH
53263: LD_VAR 0 8
53267: PUSH
53268: LD_INT 6
53270: ARRAY
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: LD_INT 7
53280: PUSH
53281: LD_INT 9
53283: PUSH
53284: LD_INT 10
53286: PUSH
53287: LD_INT 11
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: IN
53298: NOT
53299: OR
53300: IFFALSE 53306
// exit ;
53302: POP
53303: POP
53304: GO 53389
// end ;
53306: GO 52977
53308: POP
53309: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53310: LD_VAR 0 9
53314: PPUSH
53315: LD_VAR 0 3
53319: PPUSH
53320: LD_VAR 0 4
53324: PPUSH
53325: LD_INT 20
53327: PPUSH
53328: CALL 45341 0 4
53332: PUSH
53333: LD_INT 4
53335: ARRAY
53336: IFFALSE 53340
// exit ;
53338: GO 53389
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53340: LD_VAR 0 2
53344: PUSH
53345: LD_INT 29
53347: PUSH
53348: LD_INT 30
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: IN
53355: PUSH
53356: LD_VAR 0 3
53360: PPUSH
53361: LD_VAR 0 4
53365: PPUSH
53366: LD_VAR 0 9
53370: PPUSH
53371: CALL_OW 440
53375: NOT
53376: AND
53377: IFFALSE 53381
// exit ;
53379: GO 53389
// result := true ;
53381: LD_ADDR_VAR 0 6
53385: PUSH
53386: LD_INT 1
53388: ST_TO_ADDR
// end ;
53389: LD_VAR 0 6
53393: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53394: LD_INT 0
53396: PPUSH
53397: PPUSH
53398: PPUSH
53399: PPUSH
53400: PPUSH
53401: PPUSH
53402: PPUSH
53403: PPUSH
53404: PPUSH
53405: PPUSH
53406: PPUSH
53407: PPUSH
53408: PPUSH
53409: PPUSH
53410: PPUSH
53411: PPUSH
53412: PPUSH
53413: PPUSH
53414: PPUSH
53415: PPUSH
53416: PPUSH
53417: PPUSH
53418: PPUSH
53419: PPUSH
53420: PPUSH
53421: PPUSH
53422: PPUSH
53423: PPUSH
53424: PPUSH
53425: PPUSH
53426: PPUSH
53427: PPUSH
53428: PPUSH
53429: PPUSH
53430: PPUSH
53431: PPUSH
53432: PPUSH
53433: PPUSH
53434: PPUSH
53435: PPUSH
53436: PPUSH
53437: PPUSH
53438: PPUSH
53439: PPUSH
53440: PPUSH
53441: PPUSH
53442: PPUSH
53443: PPUSH
53444: PPUSH
53445: PPUSH
53446: PPUSH
53447: PPUSH
53448: PPUSH
53449: PPUSH
53450: PPUSH
53451: PPUSH
53452: PPUSH
53453: PPUSH
// result = [ ] ;
53454: LD_ADDR_VAR 0 7
53458: PUSH
53459: EMPTY
53460: ST_TO_ADDR
// temp_list = [ ] ;
53461: LD_ADDR_VAR 0 9
53465: PUSH
53466: EMPTY
53467: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53468: LD_VAR 0 4
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: LD_INT 3
53484: PUSH
53485: LD_INT 4
53487: PUSH
53488: LD_INT 5
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: IN
53499: NOT
53500: PUSH
53501: LD_VAR 0 1
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: IN
53516: PUSH
53517: LD_VAR 0 5
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: LD_INT 3
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: LIST
53535: IN
53536: NOT
53537: AND
53538: OR
53539: IFFALSE 53543
// exit ;
53541: GO 71934
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53543: LD_VAR 0 1
53547: PUSH
53548: LD_INT 6
53550: PUSH
53551: LD_INT 7
53553: PUSH
53554: LD_INT 8
53556: PUSH
53557: LD_INT 13
53559: PUSH
53560: LD_INT 12
53562: PUSH
53563: LD_INT 15
53565: PUSH
53566: LD_INT 11
53568: PUSH
53569: LD_INT 14
53571: PUSH
53572: LD_INT 10
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: IN
53586: IFFALSE 53596
// btype = b_lab ;
53588: LD_ADDR_VAR 0 1
53592: PUSH
53593: LD_INT 6
53595: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53596: LD_VAR 0 6
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: LIST
53614: IN
53615: NOT
53616: PUSH
53617: LD_VAR 0 1
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 2
53630: PUSH
53631: LD_INT 3
53633: PUSH
53634: LD_INT 6
53636: PUSH
53637: LD_INT 36
53639: PUSH
53640: LD_INT 4
53642: PUSH
53643: LD_INT 5
53645: PUSH
53646: LD_INT 31
53648: PUSH
53649: LD_INT 32
53651: PUSH
53652: LD_INT 33
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: IN
53668: NOT
53669: PUSH
53670: LD_VAR 0 6
53674: PUSH
53675: LD_INT 1
53677: EQUAL
53678: AND
53679: OR
53680: PUSH
53681: LD_VAR 0 1
53685: PUSH
53686: LD_INT 2
53688: PUSH
53689: LD_INT 3
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: IN
53696: NOT
53697: PUSH
53698: LD_VAR 0 6
53702: PUSH
53703: LD_INT 2
53705: EQUAL
53706: AND
53707: OR
53708: IFFALSE 53718
// mode = 0 ;
53710: LD_ADDR_VAR 0 6
53714: PUSH
53715: LD_INT 0
53717: ST_TO_ADDR
// case mode of 0 :
53718: LD_VAR 0 6
53722: PUSH
53723: LD_INT 0
53725: DOUBLE
53726: EQUAL
53727: IFTRUE 53731
53729: GO 65184
53731: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53732: LD_ADDR_VAR 0 11
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: LD_INT 1
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: LD_INT 2
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: LD_INT 2
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: LD_INT 2
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: LD_INT 2
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: LD_INT 3
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 3
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: LD_INT 2
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53925: LD_ADDR_VAR 0 12
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 2
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 2
54048: NEG
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 2
54059: NEG
54060: PUSH
54061: LD_INT 1
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 2
54071: NEG
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 3
54082: NEG
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 3
54093: NEG
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54121: LD_ADDR_VAR 0 13
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: LD_INT 2
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 2
54214: PUSH
54215: LD_INT 1
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 2
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 2
54244: NEG
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 2
54256: NEG
54257: PUSH
54258: LD_INT 2
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 2
54268: NEG
54269: PUSH
54270: LD_INT 3
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 3
54280: NEG
54281: PUSH
54282: LD_INT 2
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 3
54292: NEG
54293: PUSH
54294: LD_INT 3
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54320: LD_ADDR_VAR 0 14
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: NEG
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: LD_INT 2
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: LD_INT 2
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: LD_INT 2
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: LD_INT 2
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: LD_INT 3
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: LD_INT 3
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54516: LD_ADDR_VAR 0 15
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 2
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 2
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: NEG
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 3
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 3
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54709: LD_ADDR_VAR 0 16
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: LD_INT 2
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: LD_INT 2
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: NEG
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 2
54844: NEG
54845: PUSH
54846: LD_INT 2
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 3
54856: PUSH
54857: LD_INT 2
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 3
54866: PUSH
54867: LD_INT 3
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 2
54876: PUSH
54877: LD_INT 3
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54902: LD_ADDR_VAR 0 17
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: LD_INT 2
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: LD_INT 0
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 2
55037: PUSH
55038: LD_INT 2
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 2
55089: NEG
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 2
55101: NEG
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55132: LD_ADDR_VAR 0 18
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: LD_INT 0
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: LD_INT 2
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: LD_INT 2
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: NEG
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 2
55331: NEG
55332: PUSH
55333: LD_INT 2
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55362: LD_ADDR_VAR 0 19
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: LD_INT 2
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 2
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 2
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 2
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: LD_INT 2
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 2
55538: NEG
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 2
55549: NEG
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 2
55561: NEG
55562: PUSH
55563: LD_INT 2
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55592: LD_ADDR_VAR 0 20
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 2
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: LD_INT 2
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 2
55768: NEG
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 2
55791: NEG
55792: PUSH
55793: LD_INT 2
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55822: LD_ADDR_VAR 0 21
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: LD_INT 2
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 2
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 2
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 2
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 2
55998: NEG
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 2
56009: NEG
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: NEG
56022: PUSH
56023: LD_INT 2
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56052: LD_ADDR_VAR 0 22
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: LD_INT 2
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 2
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 2
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 2
56228: NEG
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 2
56239: NEG
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PUSH
56253: LD_INT 2
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56282: LD_ADDR_VAR 0 23
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 1
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: LD_INT 2
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 2
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: LD_INT 2
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: LD_INT 2
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: LD_INT 2
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 2
56458: NEG
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 2
56469: NEG
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 2
56481: NEG
56482: PUSH
56483: LD_INT 2
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: NEG
56494: PUSH
56495: LD_INT 3
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: LD_INT 3
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: LD_INT 2
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56562: LD_ADDR_VAR 0 24
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: LD_INT 2
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: LD_INT 2
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 2
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 2
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: LD_INT 2
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: NEG
56728: PUSH
56729: LD_INT 1
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 2
56738: NEG
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 2
56749: NEG
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 2
56761: NEG
56762: PUSH
56763: LD_INT 2
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: LD_INT 2
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 3
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 3
56805: PUSH
56806: LD_INT 2
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56838: LD_ADDR_VAR 0 25
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: LD_INT 1
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 2
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 2
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 2
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: LD_INT 2
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 2
57037: NEG
57038: PUSH
57039: LD_INT 2
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 3
57049: PUSH
57050: LD_INT 1
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 3
57059: PUSH
57060: LD_INT 2
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 2
57069: PUSH
57070: LD_INT 3
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: LD_INT 3
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57112: LD_ADDR_VAR 0 26
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 2
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: LD_INT 2
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: LD_INT 2
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: LD_INT 2
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: LD_INT 1
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 2
57311: NEG
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: LD_INT 3
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: LD_INT 3
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57388: LD_ADDR_VAR 0 27
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 1
57446: NEG
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: LD_INT 2
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 2
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 2
57523: PUSH
57524: LD_INT 2
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 2
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: LD_INT 2
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 2
57564: NEG
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 2
57575: NEG
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: NEG
57588: PUSH
57589: LD_INT 2
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 2
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 3
57621: NEG
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 3
57633: NEG
57634: PUSH
57635: LD_INT 2
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57668: LD_ADDR_VAR 0 28
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: LD_INT 0
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: LD_INT 1
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 0
57716: PUSH
57717: LD_INT 1
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: LD_INT 0
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 1
57737: NEG
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: LD_INT 2
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 0
57761: PUSH
57762: LD_INT 2
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: LD_INT 1
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 2
57793: PUSH
57794: LD_INT 1
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 2
57803: PUSH
57804: LD_INT 2
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: LD_INT 2
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: LD_INT 2
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 2
57855: NEG
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 2
57867: NEG
57868: PUSH
57869: LD_INT 2
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 2
57879: NEG
57880: PUSH
57881: LD_INT 3
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: LD_INT 3
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 3
57903: NEG
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 3
57915: NEG
57916: PUSH
57917: LD_INT 2
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57950: LD_ADDR_VAR 0 29
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 0
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 1
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: NEG
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: NEG
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: LD_INT 2
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: LD_INT 2
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 2
58075: PUSH
58076: LD_INT 1
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: LD_INT 2
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: LD_INT 1
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 2
58116: NEG
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 2
58128: NEG
58129: PUSH
58130: LD_INT 2
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 2
58140: NEG
58141: PUSH
58142: LD_INT 3
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 2
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 3
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: LD_INT 3
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: NEG
58184: PUSH
58185: LD_INT 2
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 3
58194: NEG
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58229: LD_ADDR_VAR 0 30
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 1
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 0
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: LD_INT 2
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 2
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 2
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 2
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: PUSH
58365: LD_INT 2
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: LD_INT 2
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 2
58395: NEG
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 2
58406: NEG
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: LD_INT 3
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 1
58430: PUSH
58431: LD_INT 2
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 3
58441: PUSH
58442: LD_INT 2
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 2
58451: PUSH
58452: LD_INT 3
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 2
58461: NEG
58462: PUSH
58463: LD_INT 1
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 3
58472: NEG
58473: PUSH
58474: LD_INT 1
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58507: LD_ADDR_VAR 0 31
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 0
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: NEG
58589: PUSH
58590: LD_INT 2
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 2
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 2
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 2
58631: PUSH
58632: LD_INT 2
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: PUSH
58642: LD_INT 2
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: LD_INT 2
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: LD_INT 1
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 2
58672: NEG
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 2
58684: NEG
58685: PUSH
58686: LD_INT 2
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 2
58696: NEG
58697: PUSH
58698: LD_INT 3
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 3
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: LD_INT 3
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 3
58750: NEG
58751: PUSH
58752: LD_INT 2
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58785: LD_ADDR_VAR 0 32
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 0
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 1
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: LD_INT 1
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 1
58854: NEG
58855: PUSH
58856: LD_INT 1
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: LD_INT 2
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 2
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 2
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 2
58910: PUSH
58911: LD_INT 2
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: PUSH
58921: LD_INT 2
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 0
58930: PUSH
58931: LD_INT 2
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 2
58951: NEG
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 2
58962: NEG
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: LD_INT 3
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: LD_INT 2
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 3
58997: PUSH
58998: LD_INT 2
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 2
59007: PUSH
59008: LD_INT 3
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 2
59017: NEG
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 3
59028: NEG
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59063: LD_ADDR_VAR 0 33
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 0
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 1
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: LD_INT 1
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: LD_INT 0
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 1
59132: NEG
59133: PUSH
59134: LD_INT 1
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: LD_INT 2
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 2
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 2
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 1
59187: PUSH
59188: LD_INT 2
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: LD_INT 2
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: NEG
59208: PUSH
59209: LD_INT 1
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 2
59218: NEG
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 2
59229: NEG
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 2
59241: NEG
59242: PUSH
59243: LD_INT 2
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 2
59253: NEG
59254: PUSH
59255: LD_INT 3
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 3
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: LD_INT 3
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: LD_INT 2
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 3
59307: NEG
59308: PUSH
59309: LD_INT 2
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59342: LD_ADDR_VAR 0 34
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 1
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 1
59411: NEG
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: LD_INT 2
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: LD_INT 2
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 2
59457: PUSH
59458: LD_INT 1
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 2
59467: PUSH
59468: LD_INT 2
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: LD_INT 2
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 2
59498: NEG
59499: PUSH
59500: LD_INT 0
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 2
59509: NEG
59510: PUSH
59511: LD_INT 1
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 2
59521: NEG
59522: PUSH
59523: LD_INT 2
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: LD_INT 3
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: LD_INT 2
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 3
59556: PUSH
59557: LD_INT 2
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 2
59566: PUSH
59567: LD_INT 3
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 2
59576: NEG
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 3
59587: NEG
59588: PUSH
59589: LD_INT 1
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59622: LD_ADDR_VAR 0 35
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: LD_INT 1
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: LD_INT 0
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 1
59680: NEG
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: LD_INT 1
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 2
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 2
59713: NEG
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59734: LD_ADDR_VAR 0 36
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: NEG
59804: PUSH
59805: LD_INT 1
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: LD_INT 2
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: LD_INT 2
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59846: LD_ADDR_VAR 0 37
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 1
59904: NEG
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59958: LD_ADDR_VAR 0 38
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 0
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 2
60039: PUSH
60040: LD_INT 1
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 2
60049: NEG
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60070: LD_ADDR_VAR 0 39
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 1
60139: NEG
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 1
60151: NEG
60152: PUSH
60153: LD_INT 2
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 1
60163: PUSH
60164: LD_INT 2
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60182: LD_ADDR_VAR 0 40
60186: PUSH
60187: LD_INT 0
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 0
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 1
60251: NEG
60252: PUSH
60253: LD_INT 1
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 1
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60294: LD_ADDR_VAR 0 41
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: LD_INT 1
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 1
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: LD_INT 1
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 0
60342: PUSH
60343: LD_INT 1
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 1
60352: NEG
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 1
60375: NEG
60376: PUSH
60377: LD_INT 2
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 1
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 2
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 2
60408: PUSH
60409: LD_INT 1
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 2
60418: PUSH
60419: LD_INT 2
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 1
60428: PUSH
60429: LD_INT 2
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 2
60449: NEG
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 2
60460: NEG
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 2
60472: NEG
60473: PUSH
60474: LD_INT 2
60476: NEG
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 2
60484: NEG
60485: PUSH
60486: LD_INT 3
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 2
60496: PUSH
60497: LD_INT 1
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 3
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 3
60517: PUSH
60518: LD_INT 1
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: LD_INT 2
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 3
60537: PUSH
60538: LD_INT 3
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: LD_INT 3
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 2
60557: NEG
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 3
60568: NEG
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 3
60579: NEG
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 3
60591: NEG
60592: PUSH
60593: LD_INT 2
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 3
60603: NEG
60604: PUSH
60605: LD_INT 3
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60644: LD_ADDR_VAR 0 42
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: LD_INT 1
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 1
60713: NEG
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: LD_INT 2
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 2
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 2
60759: PUSH
60760: LD_INT 1
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 2
60769: PUSH
60770: LD_INT 2
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 1
60779: PUSH
60780: LD_INT 2
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 0
60789: PUSH
60790: LD_INT 2
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 2
60810: NEG
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 2
60822: NEG
60823: PUSH
60824: LD_INT 2
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 2
60834: NEG
60835: PUSH
60836: LD_INT 3
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: NEG
60847: PUSH
60848: LD_INT 3
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: LD_INT 3
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: LD_INT 2
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 3
60880: PUSH
60881: LD_INT 2
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 3
60890: PUSH
60891: LD_INT 3
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 2
60900: PUSH
60901: LD_INT 3
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 1
60910: PUSH
60911: LD_INT 3
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: LD_INT 3
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 1
60930: NEG
60931: PUSH
60932: LD_INT 2
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 3
60941: NEG
60942: PUSH
60943: LD_INT 2
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 3
60953: NEG
60954: PUSH
60955: LD_INT 3
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60994: LD_ADDR_VAR 0 43
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: LD_INT 1
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: LD_INT 1
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: LD_INT 2
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: PUSH
61130: LD_INT 2
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: LD_INT 2
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 2
61160: NEG
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 2
61171: NEG
61172: PUSH
61173: LD_INT 1
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: LD_INT 3
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 0
61195: PUSH
61196: LD_INT 3
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 1
61206: PUSH
61207: LD_INT 2
61209: NEG
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 2
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 3
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 3
61238: PUSH
61239: LD_INT 1
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: LD_INT 3
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: LD_INT 3
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: LD_INT 2
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 2
61279: NEG
61280: PUSH
61281: LD_INT 1
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 3
61290: NEG
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 3
61301: NEG
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61342: LD_ADDR_VAR 0 44
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: LD_INT 0
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: LD_INT 1
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: PUSH
61381: LD_INT 1
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 0
61390: PUSH
61391: LD_INT 1
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: PUSH
61425: LD_INT 2
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 2
61446: PUSH
61447: LD_INT 0
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 2
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 2
61466: PUSH
61467: LD_INT 2
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: PUSH
61477: LD_INT 2
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: LD_INT 1
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 2
61497: NEG
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 2
61508: NEG
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: LD_INT 2
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 2
61532: NEG
61533: PUSH
61534: LD_INT 3
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: PUSH
61545: LD_INT 1
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 3
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 3
61565: PUSH
61566: LD_INT 1
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 3
61575: PUSH
61576: LD_INT 2
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 3
61585: PUSH
61586: LD_INT 3
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 2
61595: PUSH
61596: LD_INT 3
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 2
61605: NEG
61606: PUSH
61607: LD_INT 1
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 3
61616: NEG
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 3
61627: NEG
61628: PUSH
61629: LD_INT 1
61631: NEG
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 3
61639: NEG
61640: PUSH
61641: LD_INT 2
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 3
61651: NEG
61652: PUSH
61653: LD_INT 3
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61692: LD_ADDR_VAR 0 45
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: LD_INT 1
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 1
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 1
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 1
61773: NEG
61774: PUSH
61775: LD_INT 2
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 0
61785: PUSH
61786: LD_INT 2
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 1
61796: PUSH
61797: LD_INT 1
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 2
61807: PUSH
61808: LD_INT 1
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 2
61817: PUSH
61818: LD_INT 2
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: LD_INT 2
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: LD_INT 2
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: NEG
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 2
61858: NEG
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 2
61870: NEG
61871: PUSH
61872: LD_INT 2
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 2
61882: NEG
61883: PUSH
61884: LD_INT 3
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 1
61894: NEG
61895: PUSH
61896: LD_INT 3
61898: NEG
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 0
61906: PUSH
61907: LD_INT 3
61909: NEG
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 1
61917: PUSH
61918: LD_INT 2
61920: NEG
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 3
61928: PUSH
61929: LD_INT 2
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 3
61938: PUSH
61939: LD_INT 3
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 2
61948: PUSH
61949: LD_INT 3
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: LD_INT 3
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: LD_INT 3
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: PUSH
61980: LD_INT 2
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 3
61989: NEG
61990: PUSH
61991: LD_INT 2
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 3
62001: NEG
62002: PUSH
62003: LD_INT 3
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62042: LD_ADDR_VAR 0 46
62046: PUSH
62047: LD_INT 0
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: LD_INT 1
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: LD_INT 1
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: LD_INT 1
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 1
62100: NEG
62101: PUSH
62102: LD_INT 0
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: LD_INT 1
62115: NEG
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 1
62123: NEG
62124: PUSH
62125: LD_INT 2
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: LD_INT 2
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: LD_INT 1
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 2
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 2
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: PUSH
62178: LD_INT 2
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: LD_INT 2
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 1
62197: NEG
62198: PUSH
62199: LD_INT 1
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 2
62208: NEG
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 2
62219: NEG
62220: PUSH
62221: LD_INT 1
62223: NEG
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: LD_INT 3
62235: NEG
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: LD_INT 3
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: LD_INT 2
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 2
62265: PUSH
62266: LD_INT 1
62268: NEG
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 3
62276: PUSH
62277: LD_INT 0
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 3
62286: PUSH
62287: LD_INT 1
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 1
62296: PUSH
62297: LD_INT 3
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 0
62306: PUSH
62307: LD_INT 3
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 1
62316: NEG
62317: PUSH
62318: LD_INT 2
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 2
62327: NEG
62328: PUSH
62329: LD_INT 1
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 3
62338: NEG
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 3
62349: NEG
62350: PUSH
62351: LD_INT 1
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62390: LD_ADDR_VAR 0 47
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: LD_INT 0
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: LD_INT 1
62410: NEG
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 1
62418: PUSH
62419: LD_INT 0
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 1
62428: PUSH
62429: LD_INT 1
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: LD_INT 1
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: LD_INT 0
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 1
62459: NEG
62460: PUSH
62461: LD_INT 1
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 1
62471: NEG
62472: PUSH
62473: LD_INT 2
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 0
62483: PUSH
62484: LD_INT 2
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 1
62494: PUSH
62495: LD_INT 1
62497: NEG
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 2
62505: NEG
62506: PUSH
62507: LD_INT 1
62509: NEG
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 2
62517: NEG
62518: PUSH
62519: LD_INT 2
62521: NEG
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62541: LD_ADDR_VAR 0 48
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: LD_INT 0
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 1
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: LD_INT 1
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 0
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 1
62599: NEG
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 1
62610: NEG
62611: PUSH
62612: LD_INT 1
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: NEG
62623: PUSH
62624: LD_INT 2
62626: NEG
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: LD_INT 2
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: LD_INT 1
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 2
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 2
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62688: LD_ADDR_VAR 0 49
62692: PUSH
62693: LD_INT 0
62695: PUSH
62696: LD_INT 0
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 0
62705: PUSH
62706: LD_INT 1
62708: NEG
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 1
62716: PUSH
62717: LD_INT 0
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 1
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 0
62736: PUSH
62737: LD_INT 1
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 1
62746: NEG
62747: PUSH
62748: LD_INT 0
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 1
62769: PUSH
62770: LD_INT 1
62772: NEG
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 2
62780: PUSH
62781: LD_INT 0
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 2
62790: PUSH
62791: LD_INT 1
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 2
62800: PUSH
62801: LD_INT 2
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: LD_INT 2
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62832: LD_ADDR_VAR 0 50
62836: PUSH
62837: LD_INT 0
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: LD_INT 1
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 1
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 1
62870: PUSH
62871: LD_INT 1
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 0
62880: PUSH
62881: LD_INT 1
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 1
62890: NEG
62891: PUSH
62892: LD_INT 0
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: LD_INT 1
62905: NEG
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 2
62913: PUSH
62914: LD_INT 1
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 2
62923: PUSH
62924: LD_INT 2
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 1
62933: PUSH
62934: LD_INT 2
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: LD_INT 2
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: NEG
62954: PUSH
62955: LD_INT 1
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62976: LD_ADDR_VAR 0 51
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: LD_INT 1
62996: NEG
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 1
63004: PUSH
63005: LD_INT 0
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 1
63014: PUSH
63015: LD_INT 1
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 0
63024: PUSH
63025: LD_INT 1
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 1
63034: NEG
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 1
63045: NEG
63046: PUSH
63047: LD_INT 1
63049: NEG
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 1
63057: PUSH
63058: LD_INT 2
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: LD_INT 2
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 1
63077: NEG
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 2
63088: NEG
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 2
63099: NEG
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63123: LD_ADDR_VAR 0 52
63127: PUSH
63128: LD_INT 0
63130: PUSH
63131: LD_INT 0
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 0
63140: PUSH
63141: LD_INT 1
63143: NEG
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 1
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 1
63161: PUSH
63162: LD_INT 1
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: LD_INT 1
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 1
63181: NEG
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 1
63192: NEG
63193: PUSH
63194: LD_INT 1
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: LD_INT 2
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 1
63216: NEG
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 2
63227: NEG
63228: PUSH
63229: LD_INT 0
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 2
63238: NEG
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 2
63250: NEG
63251: PUSH
63252: LD_INT 2
63254: NEG
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63274: LD_ADDR_VAR 0 53
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: LD_INT 1
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 1
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 1
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 0
63322: PUSH
63323: LD_INT 1
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 1
63332: NEG
63333: PUSH
63334: LD_INT 0
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: LD_INT 1
63347: NEG
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 1
63355: NEG
63356: PUSH
63357: LD_INT 2
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 0
63367: PUSH
63368: LD_INT 2
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 2
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 2
63399: PUSH
63400: LD_INT 1
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 2
63409: PUSH
63410: LD_INT 2
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: LD_INT 2
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 1
63439: NEG
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 2
63450: NEG
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 2
63461: NEG
63462: PUSH
63463: LD_INT 1
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 2
63473: NEG
63474: PUSH
63475: LD_INT 2
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63504: LD_ADDR_VAR 0 54
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: LD_INT 1
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 1
63532: PUSH
63533: LD_INT 0
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 1
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 0
63552: PUSH
63553: LD_INT 1
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 1
63562: NEG
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 1
63573: NEG
63574: PUSH
63575: LD_INT 1
63577: NEG
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: LD_INT 2
63589: NEG
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: LD_INT 2
63600: NEG
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 1
63608: PUSH
63609: LD_INT 1
63611: NEG
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 2
63619: PUSH
63620: LD_INT 0
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 2
63629: PUSH
63630: LD_INT 1
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 2
63639: PUSH
63640: LD_INT 2
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: LD_INT 2
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 0
63659: PUSH
63660: LD_INT 2
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 1
63669: NEG
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 2
63680: NEG
63681: PUSH
63682: LD_INT 0
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 2
63691: NEG
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 2
63703: NEG
63704: PUSH
63705: LD_INT 2
63707: NEG
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63734: LD_ADDR_VAR 0 55
63738: PUSH
63739: LD_INT 0
63741: PUSH
63742: LD_INT 0
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: LD_INT 1
63754: NEG
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 1
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 1
63772: PUSH
63773: LD_INT 1
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: LD_INT 1
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 1
63792: NEG
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 1
63803: NEG
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: LD_INT 2
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 0
63827: PUSH
63828: LD_INT 2
63830: NEG
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 1
63838: PUSH
63839: LD_INT 1
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 2
63849: PUSH
63850: LD_INT 0
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 2
63859: PUSH
63860: LD_INT 1
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 2
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 1
63879: PUSH
63880: LD_INT 2
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: LD_INT 2
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 1
63899: NEG
63900: PUSH
63901: LD_INT 1
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 2
63910: NEG
63911: PUSH
63912: LD_INT 0
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 2
63921: NEG
63922: PUSH
63923: LD_INT 1
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 2
63933: NEG
63934: PUSH
63935: LD_INT 2
63937: NEG
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63964: LD_ADDR_VAR 0 56
63968: PUSH
63969: LD_INT 0
63971: PUSH
63972: LD_INT 0
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 0
63981: PUSH
63982: LD_INT 1
63984: NEG
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 1
63992: PUSH
63993: LD_INT 0
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 1
64002: PUSH
64003: LD_INT 1
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: LD_INT 1
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 1
64022: NEG
64023: PUSH
64024: LD_INT 0
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 1
64033: NEG
64034: PUSH
64035: LD_INT 1
64037: NEG
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 1
64045: NEG
64046: PUSH
64047: LD_INT 2
64049: NEG
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 0
64057: PUSH
64058: LD_INT 2
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: LD_INT 1
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 2
64079: PUSH
64080: LD_INT 0
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 2
64089: PUSH
64090: LD_INT 1
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 2
64099: PUSH
64100: LD_INT 2
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 1
64109: PUSH
64110: LD_INT 2
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 0
64119: PUSH
64120: LD_INT 2
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 1
64129: NEG
64130: PUSH
64131: LD_INT 1
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 2
64140: NEG
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 2
64151: NEG
64152: PUSH
64153: LD_INT 1
64155: NEG
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 2
64163: NEG
64164: PUSH
64165: LD_INT 2
64167: NEG
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64194: LD_ADDR_VAR 0 57
64198: PUSH
64199: LD_INT 0
64201: PUSH
64202: LD_INT 0
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 0
64211: PUSH
64212: LD_INT 1
64214: NEG
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 1
64222: PUSH
64223: LD_INT 0
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 1
64232: PUSH
64233: LD_INT 1
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 0
64242: PUSH
64243: LD_INT 1
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 1
64252: NEG
64253: PUSH
64254: LD_INT 0
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 1
64263: NEG
64264: PUSH
64265: LD_INT 1
64267: NEG
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 1
64275: NEG
64276: PUSH
64277: LD_INT 2
64279: NEG
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 0
64287: PUSH
64288: LD_INT 2
64290: NEG
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 1
64298: PUSH
64299: LD_INT 1
64301: NEG
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 2
64309: PUSH
64310: LD_INT 0
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 2
64319: PUSH
64320: LD_INT 1
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 2
64329: PUSH
64330: LD_INT 2
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 1
64339: PUSH
64340: LD_INT 2
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: LD_INT 2
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 1
64359: NEG
64360: PUSH
64361: LD_INT 1
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 2
64370: NEG
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 2
64381: NEG
64382: PUSH
64383: LD_INT 1
64385: NEG
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 2
64393: NEG
64394: PUSH
64395: LD_INT 2
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64424: LD_ADDR_VAR 0 58
64428: PUSH
64429: LD_INT 0
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: LD_INT 1
64444: NEG
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 1
64452: PUSH
64453: LD_INT 0
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 1
64462: PUSH
64463: LD_INT 1
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: LD_INT 1
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 1
64482: NEG
64483: PUSH
64484: LD_INT 0
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 1
64493: NEG
64494: PUSH
64495: LD_INT 1
64497: NEG
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 1
64505: NEG
64506: PUSH
64507: LD_INT 2
64509: NEG
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 0
64517: PUSH
64518: LD_INT 2
64520: NEG
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 1
64528: PUSH
64529: LD_INT 1
64531: NEG
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 2
64539: PUSH
64540: LD_INT 0
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 2
64549: PUSH
64550: LD_INT 1
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 2
64559: PUSH
64560: LD_INT 2
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 1
64569: PUSH
64570: LD_INT 2
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: LD_INT 2
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 1
64589: NEG
64590: PUSH
64591: LD_INT 1
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 2
64600: NEG
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 2
64611: NEG
64612: PUSH
64613: LD_INT 1
64615: NEG
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 2
64623: NEG
64624: PUSH
64625: LD_INT 2
64627: NEG
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64654: LD_ADDR_VAR 0 59
64658: PUSH
64659: LD_INT 0
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: LD_INT 1
64674: NEG
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 1
64682: PUSH
64683: LD_INT 0
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 1
64692: PUSH
64693: LD_INT 1
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: LD_INT 1
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 1
64712: NEG
64713: PUSH
64714: LD_INT 0
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 1
64723: NEG
64724: PUSH
64725: LD_INT 1
64727: NEG
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64742: LD_ADDR_VAR 0 60
64746: PUSH
64747: LD_INT 0
64749: PUSH
64750: LD_INT 0
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: LD_INT 1
64762: NEG
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 1
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 1
64780: PUSH
64781: LD_INT 1
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 0
64790: PUSH
64791: LD_INT 1
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 1
64800: NEG
64801: PUSH
64802: LD_INT 0
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: NEG
64812: PUSH
64813: LD_INT 1
64815: NEG
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64830: LD_ADDR_VAR 0 61
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: LD_INT 0
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: LD_INT 1
64850: NEG
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 1
64858: PUSH
64859: LD_INT 0
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: LD_INT 1
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: LD_INT 1
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 1
64888: NEG
64889: PUSH
64890: LD_INT 0
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 1
64899: NEG
64900: PUSH
64901: LD_INT 1
64903: NEG
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64918: LD_ADDR_VAR 0 62
64922: PUSH
64923: LD_INT 0
64925: PUSH
64926: LD_INT 0
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: LD_INT 1
64938: NEG
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 1
64946: PUSH
64947: LD_INT 0
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: LD_INT 1
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: LD_INT 1
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 1
64976: NEG
64977: PUSH
64978: LD_INT 0
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 1
64987: NEG
64988: PUSH
64989: LD_INT 1
64991: NEG
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65006: LD_ADDR_VAR 0 63
65010: PUSH
65011: LD_INT 0
65013: PUSH
65014: LD_INT 0
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 0
65023: PUSH
65024: LD_INT 1
65026: NEG
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 1
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: LD_INT 1
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 0
65054: PUSH
65055: LD_INT 1
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 1
65064: NEG
65065: PUSH
65066: LD_INT 0
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 1
65075: NEG
65076: PUSH
65077: LD_INT 1
65079: NEG
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65094: LD_ADDR_VAR 0 64
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: LD_INT 0
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 0
65111: PUSH
65112: LD_INT 1
65114: NEG
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 1
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 1
65132: PUSH
65133: LD_INT 1
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 0
65142: PUSH
65143: LD_INT 1
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 1
65152: NEG
65153: PUSH
65154: LD_INT 0
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 1
65163: NEG
65164: PUSH
65165: LD_INT 1
65167: NEG
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: ST_TO_ADDR
// end ; 1 :
65182: GO 71079
65184: LD_INT 1
65186: DOUBLE
65187: EQUAL
65188: IFTRUE 65192
65190: GO 67815
65192: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65193: LD_ADDR_VAR 0 11
65197: PUSH
65198: LD_INT 1
65200: NEG
65201: PUSH
65202: LD_INT 3
65204: NEG
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: LD_INT 3
65215: NEG
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 1
65223: PUSH
65224: LD_INT 2
65226: NEG
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: LIST
65236: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65237: LD_ADDR_VAR 0 12
65241: PUSH
65242: LD_INT 2
65244: PUSH
65245: LD_INT 1
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 3
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 3
65265: PUSH
65266: LD_INT 1
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: LIST
65277: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65278: LD_ADDR_VAR 0 13
65282: PUSH
65283: LD_INT 3
65285: PUSH
65286: LD_INT 2
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 3
65295: PUSH
65296: LD_INT 3
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 2
65305: PUSH
65306: LD_INT 3
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: LIST
65317: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65318: LD_ADDR_VAR 0 14
65322: PUSH
65323: LD_INT 1
65325: PUSH
65326: LD_INT 3
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 0
65335: PUSH
65336: LD_INT 3
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 1
65345: NEG
65346: PUSH
65347: LD_INT 2
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: LIST
65358: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65359: LD_ADDR_VAR 0 15
65363: PUSH
65364: LD_INT 2
65366: NEG
65367: PUSH
65368: LD_INT 1
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 3
65377: NEG
65378: PUSH
65379: LD_INT 0
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 3
65388: NEG
65389: PUSH
65390: LD_INT 1
65392: NEG
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: LIST
65402: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65403: LD_ADDR_VAR 0 16
65407: PUSH
65408: LD_INT 2
65410: NEG
65411: PUSH
65412: LD_INT 3
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 3
65422: NEG
65423: PUSH
65424: LD_INT 2
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 3
65434: NEG
65435: PUSH
65436: LD_INT 3
65438: NEG
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: LIST
65448: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65449: LD_ADDR_VAR 0 17
65453: PUSH
65454: LD_INT 1
65456: NEG
65457: PUSH
65458: LD_INT 3
65460: NEG
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: LD_INT 3
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 1
65479: PUSH
65480: LD_INT 2
65482: NEG
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: LIST
65492: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65493: LD_ADDR_VAR 0 18
65497: PUSH
65498: LD_INT 2
65500: PUSH
65501: LD_INT 1
65503: NEG
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 3
65511: PUSH
65512: LD_INT 0
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 3
65521: PUSH
65522: LD_INT 1
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: LIST
65533: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65534: LD_ADDR_VAR 0 19
65538: PUSH
65539: LD_INT 3
65541: PUSH
65542: LD_INT 2
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 3
65551: PUSH
65552: LD_INT 3
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 2
65561: PUSH
65562: LD_INT 3
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: LIST
65573: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65574: LD_ADDR_VAR 0 20
65578: PUSH
65579: LD_INT 1
65581: PUSH
65582: LD_INT 3
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 0
65591: PUSH
65592: LD_INT 3
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 1
65601: NEG
65602: PUSH
65603: LD_INT 2
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: LIST
65614: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65615: LD_ADDR_VAR 0 21
65619: PUSH
65620: LD_INT 2
65622: NEG
65623: PUSH
65624: LD_INT 1
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 3
65633: NEG
65634: PUSH
65635: LD_INT 0
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 3
65644: NEG
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: LIST
65658: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65659: LD_ADDR_VAR 0 22
65663: PUSH
65664: LD_INT 2
65666: NEG
65667: PUSH
65668: LD_INT 3
65670: NEG
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 3
65678: NEG
65679: PUSH
65680: LD_INT 2
65682: NEG
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 3
65690: NEG
65691: PUSH
65692: LD_INT 3
65694: NEG
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: LIST
65704: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65705: LD_ADDR_VAR 0 23
65709: PUSH
65710: LD_INT 0
65712: PUSH
65713: LD_INT 3
65715: NEG
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 1
65723: NEG
65724: PUSH
65725: LD_INT 4
65727: NEG
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 1
65735: PUSH
65736: LD_INT 3
65738: NEG
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: LIST
65748: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65749: LD_ADDR_VAR 0 24
65753: PUSH
65754: LD_INT 3
65756: PUSH
65757: LD_INT 0
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 3
65766: PUSH
65767: LD_INT 1
65769: NEG
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 4
65777: PUSH
65778: LD_INT 1
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: LIST
65789: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65790: LD_ADDR_VAR 0 25
65794: PUSH
65795: LD_INT 3
65797: PUSH
65798: LD_INT 3
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 4
65807: PUSH
65808: LD_INT 3
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 3
65817: PUSH
65818: LD_INT 4
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: LIST
65829: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65830: LD_ADDR_VAR 0 26
65834: PUSH
65835: LD_INT 0
65837: PUSH
65838: LD_INT 3
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 1
65847: PUSH
65848: LD_INT 4
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 1
65857: NEG
65858: PUSH
65859: LD_INT 3
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: LIST
65870: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65871: LD_ADDR_VAR 0 27
65875: PUSH
65876: LD_INT 3
65878: NEG
65879: PUSH
65880: LD_INT 0
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 3
65889: NEG
65890: PUSH
65891: LD_INT 1
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 4
65900: NEG
65901: PUSH
65902: LD_INT 1
65904: NEG
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: LIST
65914: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65915: LD_ADDR_VAR 0 28
65919: PUSH
65920: LD_INT 3
65922: NEG
65923: PUSH
65924: LD_INT 3
65926: NEG
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 3
65934: NEG
65935: PUSH
65936: LD_INT 4
65938: NEG
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 4
65946: NEG
65947: PUSH
65948: LD_INT 3
65950: NEG
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: LIST
65960: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65961: LD_ADDR_VAR 0 29
65965: PUSH
65966: LD_INT 1
65968: NEG
65969: PUSH
65970: LD_INT 3
65972: NEG
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 0
65980: PUSH
65981: LD_INT 3
65983: NEG
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 1
65991: PUSH
65992: LD_INT 2
65994: NEG
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 1
66002: NEG
66003: PUSH
66004: LD_INT 4
66006: NEG
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 0
66014: PUSH
66015: LD_INT 4
66017: NEG
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 1
66025: PUSH
66026: LD_INT 3
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 1
66036: NEG
66037: PUSH
66038: LD_INT 5
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 0
66048: PUSH
66049: LD_INT 5
66051: NEG
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 1
66059: PUSH
66060: LD_INT 4
66062: NEG
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 1
66070: NEG
66071: PUSH
66072: LD_INT 6
66074: NEG
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 0
66082: PUSH
66083: LD_INT 6
66085: NEG
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 1
66093: PUSH
66094: LD_INT 5
66096: NEG
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66116: LD_ADDR_VAR 0 30
66120: PUSH
66121: LD_INT 2
66123: PUSH
66124: LD_INT 1
66126: NEG
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 3
66134: PUSH
66135: LD_INT 0
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 3
66144: PUSH
66145: LD_INT 1
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 3
66154: PUSH
66155: LD_INT 1
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 4
66165: PUSH
66166: LD_INT 0
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 4
66175: PUSH
66176: LD_INT 1
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 4
66185: PUSH
66186: LD_INT 1
66188: NEG
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 5
66196: PUSH
66197: LD_INT 0
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 5
66206: PUSH
66207: LD_INT 1
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 5
66216: PUSH
66217: LD_INT 1
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 6
66227: PUSH
66228: LD_INT 0
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 6
66237: PUSH
66238: LD_INT 1
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66259: LD_ADDR_VAR 0 31
66263: PUSH
66264: LD_INT 3
66266: PUSH
66267: LD_INT 2
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 3
66276: PUSH
66277: LD_INT 3
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 2
66286: PUSH
66287: LD_INT 3
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 4
66296: PUSH
66297: LD_INT 3
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 4
66306: PUSH
66307: LD_INT 4
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 3
66316: PUSH
66317: LD_INT 4
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 5
66326: PUSH
66327: LD_INT 4
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 5
66336: PUSH
66337: LD_INT 5
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 4
66346: PUSH
66347: LD_INT 5
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 6
66356: PUSH
66357: LD_INT 5
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 6
66366: PUSH
66367: LD_INT 6
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 5
66376: PUSH
66377: LD_INT 6
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66398: LD_ADDR_VAR 0 32
66402: PUSH
66403: LD_INT 1
66405: PUSH
66406: LD_INT 3
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 0
66415: PUSH
66416: LD_INT 3
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 1
66425: NEG
66426: PUSH
66427: LD_INT 2
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 1
66436: PUSH
66437: LD_INT 4
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 0
66446: PUSH
66447: LD_INT 4
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 1
66456: NEG
66457: PUSH
66458: LD_INT 3
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 1
66467: PUSH
66468: LD_INT 5
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 0
66477: PUSH
66478: LD_INT 5
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 1
66487: NEG
66488: PUSH
66489: LD_INT 4
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 1
66498: PUSH
66499: LD_INT 6
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 0
66508: PUSH
66509: LD_INT 6
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 1
66518: NEG
66519: PUSH
66520: LD_INT 5
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66541: LD_ADDR_VAR 0 33
66545: PUSH
66546: LD_INT 2
66548: NEG
66549: PUSH
66550: LD_INT 1
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 3
66559: NEG
66560: PUSH
66561: LD_INT 0
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 3
66570: NEG
66571: PUSH
66572: LD_INT 1
66574: NEG
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 3
66582: NEG
66583: PUSH
66584: LD_INT 1
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 4
66593: NEG
66594: PUSH
66595: LD_INT 0
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 4
66604: NEG
66605: PUSH
66606: LD_INT 1
66608: NEG
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 4
66616: NEG
66617: PUSH
66618: LD_INT 1
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 5
66627: NEG
66628: PUSH
66629: LD_INT 0
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 5
66638: NEG
66639: PUSH
66640: LD_INT 1
66642: NEG
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 5
66650: NEG
66651: PUSH
66652: LD_INT 1
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 6
66661: NEG
66662: PUSH
66663: LD_INT 0
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 6
66672: NEG
66673: PUSH
66674: LD_INT 1
66676: NEG
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66696: LD_ADDR_VAR 0 34
66700: PUSH
66701: LD_INT 2
66703: NEG
66704: PUSH
66705: LD_INT 3
66707: NEG
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 3
66715: NEG
66716: PUSH
66717: LD_INT 2
66719: NEG
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 3
66727: NEG
66728: PUSH
66729: LD_INT 3
66731: NEG
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 3
66739: NEG
66740: PUSH
66741: LD_INT 4
66743: NEG
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 4
66751: NEG
66752: PUSH
66753: LD_INT 3
66755: NEG
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 4
66763: NEG
66764: PUSH
66765: LD_INT 4
66767: NEG
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 4
66775: NEG
66776: PUSH
66777: LD_INT 5
66779: NEG
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 5
66787: NEG
66788: PUSH
66789: LD_INT 4
66791: NEG
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 5
66799: NEG
66800: PUSH
66801: LD_INT 5
66803: NEG
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 5
66811: NEG
66812: PUSH
66813: LD_INT 6
66815: NEG
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: LD_INT 6
66823: NEG
66824: PUSH
66825: LD_INT 5
66827: NEG
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 6
66835: NEG
66836: PUSH
66837: LD_INT 6
66839: NEG
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66859: LD_ADDR_VAR 0 41
66863: PUSH
66864: LD_INT 0
66866: PUSH
66867: LD_INT 2
66869: NEG
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 1
66877: NEG
66878: PUSH
66879: LD_INT 3
66881: NEG
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 1
66889: PUSH
66890: LD_INT 2
66892: NEG
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: LIST
66902: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66903: LD_ADDR_VAR 0 42
66907: PUSH
66908: LD_INT 2
66910: PUSH
66911: LD_INT 0
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 2
66920: PUSH
66921: LD_INT 1
66923: NEG
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 3
66931: PUSH
66932: LD_INT 1
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: LIST
66943: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66944: LD_ADDR_VAR 0 43
66948: PUSH
66949: LD_INT 2
66951: PUSH
66952: LD_INT 2
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 3
66961: PUSH
66962: LD_INT 2
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 2
66971: PUSH
66972: LD_INT 3
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: LIST
66983: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66984: LD_ADDR_VAR 0 44
66988: PUSH
66989: LD_INT 0
66991: PUSH
66992: LD_INT 2
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 1
67001: PUSH
67002: LD_INT 3
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 1
67011: NEG
67012: PUSH
67013: LD_INT 2
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: LIST
67024: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67025: LD_ADDR_VAR 0 45
67029: PUSH
67030: LD_INT 2
67032: NEG
67033: PUSH
67034: LD_INT 0
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 2
67043: NEG
67044: PUSH
67045: LD_INT 1
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 3
67054: NEG
67055: PUSH
67056: LD_INT 1
67058: NEG
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: LIST
67068: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67069: LD_ADDR_VAR 0 46
67073: PUSH
67074: LD_INT 2
67076: NEG
67077: PUSH
67078: LD_INT 2
67080: NEG
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 2
67088: NEG
67089: PUSH
67090: LD_INT 3
67092: NEG
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 3
67100: NEG
67101: PUSH
67102: LD_INT 2
67104: NEG
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: LIST
67114: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67115: LD_ADDR_VAR 0 47
67119: PUSH
67120: LD_INT 2
67122: NEG
67123: PUSH
67124: LD_INT 3
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 1
67134: NEG
67135: PUSH
67136: LD_INT 3
67138: NEG
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67148: LD_ADDR_VAR 0 48
67152: PUSH
67153: LD_INT 1
67155: PUSH
67156: LD_INT 2
67158: NEG
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 2
67166: PUSH
67167: LD_INT 1
67169: NEG
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67179: LD_ADDR_VAR 0 49
67183: PUSH
67184: LD_INT 3
67186: PUSH
67187: LD_INT 1
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 3
67196: PUSH
67197: LD_INT 2
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67208: LD_ADDR_VAR 0 50
67212: PUSH
67213: LD_INT 2
67215: PUSH
67216: LD_INT 3
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 1
67225: PUSH
67226: LD_INT 3
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67237: LD_ADDR_VAR 0 51
67241: PUSH
67242: LD_INT 1
67244: NEG
67245: PUSH
67246: LD_INT 2
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 2
67255: NEG
67256: PUSH
67257: LD_INT 1
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67268: LD_ADDR_VAR 0 52
67272: PUSH
67273: LD_INT 3
67275: NEG
67276: PUSH
67277: LD_INT 1
67279: NEG
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 3
67287: NEG
67288: PUSH
67289: LD_INT 2
67291: NEG
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67301: LD_ADDR_VAR 0 53
67305: PUSH
67306: LD_INT 1
67308: NEG
67309: PUSH
67310: LD_INT 3
67312: NEG
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 0
67320: PUSH
67321: LD_INT 3
67323: NEG
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 1
67331: PUSH
67332: LD_INT 2
67334: NEG
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: LIST
67344: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67345: LD_ADDR_VAR 0 54
67349: PUSH
67350: LD_INT 2
67352: PUSH
67353: LD_INT 1
67355: NEG
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 3
67363: PUSH
67364: LD_INT 0
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 3
67373: PUSH
67374: LD_INT 1
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: LIST
67385: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67386: LD_ADDR_VAR 0 55
67390: PUSH
67391: LD_INT 3
67393: PUSH
67394: LD_INT 2
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 3
67403: PUSH
67404: LD_INT 3
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 2
67413: PUSH
67414: LD_INT 3
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: LIST
67425: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67426: LD_ADDR_VAR 0 56
67430: PUSH
67431: LD_INT 1
67433: PUSH
67434: LD_INT 3
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 0
67443: PUSH
67444: LD_INT 3
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 1
67453: NEG
67454: PUSH
67455: LD_INT 2
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: LIST
67466: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67467: LD_ADDR_VAR 0 57
67471: PUSH
67472: LD_INT 2
67474: NEG
67475: PUSH
67476: LD_INT 1
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 3
67485: NEG
67486: PUSH
67487: LD_INT 0
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 3
67496: NEG
67497: PUSH
67498: LD_INT 1
67500: NEG
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: LIST
67510: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67511: LD_ADDR_VAR 0 58
67515: PUSH
67516: LD_INT 2
67518: NEG
67519: PUSH
67520: LD_INT 3
67522: NEG
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 3
67530: NEG
67531: PUSH
67532: LD_INT 2
67534: NEG
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 3
67542: NEG
67543: PUSH
67544: LD_INT 3
67546: NEG
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: LIST
67556: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67557: LD_ADDR_VAR 0 59
67561: PUSH
67562: LD_INT 1
67564: NEG
67565: PUSH
67566: LD_INT 2
67568: NEG
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 0
67576: PUSH
67577: LD_INT 2
67579: NEG
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 1
67587: PUSH
67588: LD_INT 1
67590: NEG
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: LIST
67600: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67601: LD_ADDR_VAR 0 60
67605: PUSH
67606: LD_INT 1
67608: PUSH
67609: LD_INT 1
67611: NEG
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 2
67619: PUSH
67620: LD_INT 0
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 2
67629: PUSH
67630: LD_INT 1
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: LIST
67641: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67642: LD_ADDR_VAR 0 61
67646: PUSH
67647: LD_INT 2
67649: PUSH
67650: LD_INT 1
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: LD_INT 2
67659: PUSH
67660: LD_INT 2
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 1
67669: PUSH
67670: LD_INT 2
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: LIST
67681: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67682: LD_ADDR_VAR 0 62
67686: PUSH
67687: LD_INT 1
67689: PUSH
67690: LD_INT 2
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 0
67699: PUSH
67700: LD_INT 2
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 1
67709: NEG
67710: PUSH
67711: LD_INT 1
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: LIST
67722: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67723: LD_ADDR_VAR 0 63
67727: PUSH
67728: LD_INT 1
67730: NEG
67731: PUSH
67732: LD_INT 1
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 2
67741: NEG
67742: PUSH
67743: LD_INT 0
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 2
67752: NEG
67753: PUSH
67754: LD_INT 1
67756: NEG
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: LIST
67766: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67767: LD_ADDR_VAR 0 64
67771: PUSH
67772: LD_INT 1
67774: NEG
67775: PUSH
67776: LD_INT 2
67778: NEG
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 2
67786: NEG
67787: PUSH
67788: LD_INT 1
67790: NEG
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 2
67798: NEG
67799: PUSH
67800: LD_INT 2
67802: NEG
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: LIST
67812: ST_TO_ADDR
// end ; 2 :
67813: GO 71079
67815: LD_INT 2
67817: DOUBLE
67818: EQUAL
67819: IFTRUE 67823
67821: GO 71078
67823: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67824: LD_ADDR_VAR 0 29
67828: PUSH
67829: LD_INT 4
67831: PUSH
67832: LD_INT 0
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 4
67841: PUSH
67842: LD_INT 1
67844: NEG
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 5
67852: PUSH
67853: LD_INT 0
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 5
67862: PUSH
67863: LD_INT 1
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 4
67872: PUSH
67873: LD_INT 1
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 3
67882: PUSH
67883: LD_INT 0
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 3
67892: PUSH
67893: LD_INT 1
67895: NEG
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 3
67903: PUSH
67904: LD_INT 2
67906: NEG
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 5
67914: PUSH
67915: LD_INT 2
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 3
67924: PUSH
67925: LD_INT 3
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 3
67934: PUSH
67935: LD_INT 2
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 4
67944: PUSH
67945: LD_INT 3
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 4
67954: PUSH
67955: LD_INT 4
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 3
67964: PUSH
67965: LD_INT 4
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 2
67974: PUSH
67975: LD_INT 3
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 2
67984: PUSH
67985: LD_INT 2
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 4
67994: PUSH
67995: LD_INT 2
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 2
68004: PUSH
68005: LD_INT 4
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 0
68014: PUSH
68015: LD_INT 4
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 0
68024: PUSH
68025: LD_INT 3
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 1
68034: PUSH
68035: LD_INT 4
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 1
68044: PUSH
68045: LD_INT 5
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 0
68054: PUSH
68055: LD_INT 5
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 1
68064: NEG
68065: PUSH
68066: LD_INT 4
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 1
68075: NEG
68076: PUSH
68077: LD_INT 3
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 2
68086: PUSH
68087: LD_INT 5
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 2
68096: NEG
68097: PUSH
68098: LD_INT 3
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 3
68107: NEG
68108: PUSH
68109: LD_INT 0
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 3
68118: NEG
68119: PUSH
68120: LD_INT 1
68122: NEG
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 2
68130: NEG
68131: PUSH
68132: LD_INT 0
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 2
68141: NEG
68142: PUSH
68143: LD_INT 1
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 3
68152: NEG
68153: PUSH
68154: LD_INT 1
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 4
68163: NEG
68164: PUSH
68165: LD_INT 0
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 4
68174: NEG
68175: PUSH
68176: LD_INT 1
68178: NEG
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 4
68186: NEG
68187: PUSH
68188: LD_INT 2
68190: NEG
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 2
68198: NEG
68199: PUSH
68200: LD_INT 2
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 4
68209: NEG
68210: PUSH
68211: LD_INT 4
68213: NEG
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 4
68221: NEG
68222: PUSH
68223: LD_INT 5
68225: NEG
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 3
68233: NEG
68234: PUSH
68235: LD_INT 4
68237: NEG
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 3
68245: NEG
68246: PUSH
68247: LD_INT 3
68249: NEG
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 4
68257: NEG
68258: PUSH
68259: LD_INT 3
68261: NEG
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 5
68269: NEG
68270: PUSH
68271: LD_INT 4
68273: NEG
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 5
68281: NEG
68282: PUSH
68283: LD_INT 5
68285: NEG
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 3
68293: NEG
68294: PUSH
68295: LD_INT 5
68297: NEG
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 5
68305: NEG
68306: PUSH
68307: LD_INT 3
68309: NEG
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68362: LD_ADDR_VAR 0 30
68366: PUSH
68367: LD_INT 4
68369: PUSH
68370: LD_INT 4
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 4
68379: PUSH
68380: LD_INT 3
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 5
68389: PUSH
68390: LD_INT 4
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 5
68399: PUSH
68400: LD_INT 5
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 4
68409: PUSH
68410: LD_INT 5
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 3
68419: PUSH
68420: LD_INT 4
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: LD_INT 3
68429: PUSH
68430: LD_INT 3
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 5
68439: PUSH
68440: LD_INT 3
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 3
68449: PUSH
68450: LD_INT 5
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 0
68459: PUSH
68460: LD_INT 3
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 0
68469: PUSH
68470: LD_INT 2
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 1
68479: PUSH
68480: LD_INT 3
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 1
68489: PUSH
68490: LD_INT 4
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 0
68499: PUSH
68500: LD_INT 4
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 1
68509: NEG
68510: PUSH
68511: LD_INT 3
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 1
68520: NEG
68521: PUSH
68522: LD_INT 2
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 2
68531: PUSH
68532: LD_INT 4
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 2
68541: NEG
68542: PUSH
68543: LD_INT 2
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 4
68552: NEG
68553: PUSH
68554: LD_INT 0
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 4
68563: NEG
68564: PUSH
68565: LD_INT 1
68567: NEG
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 3
68575: NEG
68576: PUSH
68577: LD_INT 0
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 3
68586: NEG
68587: PUSH
68588: LD_INT 1
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 4
68597: NEG
68598: PUSH
68599: LD_INT 1
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 5
68608: NEG
68609: PUSH
68610: LD_INT 0
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 5
68619: NEG
68620: PUSH
68621: LD_INT 1
68623: NEG
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 5
68631: NEG
68632: PUSH
68633: LD_INT 2
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 3
68643: NEG
68644: PUSH
68645: LD_INT 2
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 3
68654: NEG
68655: PUSH
68656: LD_INT 3
68658: NEG
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 3
68666: NEG
68667: PUSH
68668: LD_INT 4
68670: NEG
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 2
68678: NEG
68679: PUSH
68680: LD_INT 3
68682: NEG
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 2
68690: NEG
68691: PUSH
68692: LD_INT 2
68694: NEG
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 3
68702: NEG
68703: PUSH
68704: LD_INT 2
68706: NEG
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 4
68714: NEG
68715: PUSH
68716: LD_INT 3
68718: NEG
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 4
68726: NEG
68727: PUSH
68728: LD_INT 4
68730: NEG
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 2
68738: NEG
68739: PUSH
68740: LD_INT 4
68742: NEG
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 4
68750: NEG
68751: PUSH
68752: LD_INT 2
68754: NEG
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: LD_INT 0
68762: PUSH
68763: LD_INT 4
68765: NEG
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 0
68773: PUSH
68774: LD_INT 5
68776: NEG
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 1
68784: PUSH
68785: LD_INT 4
68787: NEG
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 1
68795: PUSH
68796: LD_INT 3
68798: NEG
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 0
68806: PUSH
68807: LD_INT 3
68809: NEG
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 1
68817: NEG
68818: PUSH
68819: LD_INT 4
68821: NEG
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 1
68829: NEG
68830: PUSH
68831: LD_INT 5
68833: NEG
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 2
68841: PUSH
68842: LD_INT 3
68844: NEG
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 2
68852: NEG
68853: PUSH
68854: LD_INT 5
68856: NEG
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68909: LD_ADDR_VAR 0 31
68913: PUSH
68914: LD_INT 0
68916: PUSH
68917: LD_INT 4
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 0
68926: PUSH
68927: LD_INT 3
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 1
68936: PUSH
68937: LD_INT 4
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 1
68946: PUSH
68947: LD_INT 5
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 0
68956: PUSH
68957: LD_INT 5
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 1
68966: NEG
68967: PUSH
68968: LD_INT 4
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 1
68977: NEG
68978: PUSH
68979: LD_INT 3
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 2
68988: PUSH
68989: LD_INT 5
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 2
68998: NEG
68999: PUSH
69000: LD_INT 3
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 3
69009: NEG
69010: PUSH
69011: LD_INT 0
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 3
69020: NEG
69021: PUSH
69022: LD_INT 1
69024: NEG
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 2
69032: NEG
69033: PUSH
69034: LD_INT 0
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: LD_INT 2
69043: NEG
69044: PUSH
69045: LD_INT 1
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 3
69054: NEG
69055: PUSH
69056: LD_INT 1
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 4
69065: NEG
69066: PUSH
69067: LD_INT 0
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 4
69076: NEG
69077: PUSH
69078: LD_INT 1
69080: NEG
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 4
69088: NEG
69089: PUSH
69090: LD_INT 2
69092: NEG
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 2
69100: NEG
69101: PUSH
69102: LD_INT 2
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 4
69111: NEG
69112: PUSH
69113: LD_INT 4
69115: NEG
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 4
69123: NEG
69124: PUSH
69125: LD_INT 5
69127: NEG
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 3
69135: NEG
69136: PUSH
69137: LD_INT 4
69139: NEG
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 3
69147: NEG
69148: PUSH
69149: LD_INT 3
69151: NEG
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 4
69159: NEG
69160: PUSH
69161: LD_INT 3
69163: NEG
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 5
69171: NEG
69172: PUSH
69173: LD_INT 4
69175: NEG
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 5
69183: NEG
69184: PUSH
69185: LD_INT 5
69187: NEG
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 3
69195: NEG
69196: PUSH
69197: LD_INT 5
69199: NEG
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 5
69207: NEG
69208: PUSH
69209: LD_INT 3
69211: NEG
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 0
69219: PUSH
69220: LD_INT 3
69222: NEG
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 0
69230: PUSH
69231: LD_INT 4
69233: NEG
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 1
69241: PUSH
69242: LD_INT 3
69244: NEG
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 1
69252: PUSH
69253: LD_INT 2
69255: NEG
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 0
69263: PUSH
69264: LD_INT 2
69266: NEG
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 1
69274: NEG
69275: PUSH
69276: LD_INT 3
69278: NEG
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 1
69286: NEG
69287: PUSH
69288: LD_INT 4
69290: NEG
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 2
69298: PUSH
69299: LD_INT 2
69301: NEG
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 2
69309: NEG
69310: PUSH
69311: LD_INT 4
69313: NEG
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 4
69321: PUSH
69322: LD_INT 0
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 4
69331: PUSH
69332: LD_INT 1
69334: NEG
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 5
69342: PUSH
69343: LD_INT 0
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 5
69352: PUSH
69353: LD_INT 1
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 4
69362: PUSH
69363: LD_INT 1
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 3
69372: PUSH
69373: LD_INT 0
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 3
69382: PUSH
69383: LD_INT 1
69385: NEG
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 3
69393: PUSH
69394: LD_INT 2
69396: NEG
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 5
69404: PUSH
69405: LD_INT 2
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: LIST
69434: LIST
69435: LIST
69436: LIST
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69459: LD_ADDR_VAR 0 32
69463: PUSH
69464: LD_INT 4
69466: NEG
69467: PUSH
69468: LD_INT 0
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 4
69477: NEG
69478: PUSH
69479: LD_INT 1
69481: NEG
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 3
69489: NEG
69490: PUSH
69491: LD_INT 0
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 3
69500: NEG
69501: PUSH
69502: LD_INT 1
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 4
69511: NEG
69512: PUSH
69513: LD_INT 1
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 5
69522: NEG
69523: PUSH
69524: LD_INT 0
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 5
69533: NEG
69534: PUSH
69535: LD_INT 1
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 5
69545: NEG
69546: PUSH
69547: LD_INT 2
69549: NEG
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 3
69557: NEG
69558: PUSH
69559: LD_INT 2
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 3
69568: NEG
69569: PUSH
69570: LD_INT 3
69572: NEG
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 3
69580: NEG
69581: PUSH
69582: LD_INT 4
69584: NEG
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 2
69592: NEG
69593: PUSH
69594: LD_INT 3
69596: NEG
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PUSH
69602: LD_INT 2
69604: NEG
69605: PUSH
69606: LD_INT 2
69608: NEG
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 3
69616: NEG
69617: PUSH
69618: LD_INT 2
69620: NEG
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 4
69628: NEG
69629: PUSH
69630: LD_INT 3
69632: NEG
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 4
69640: NEG
69641: PUSH
69642: LD_INT 4
69644: NEG
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 2
69652: NEG
69653: PUSH
69654: LD_INT 4
69656: NEG
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 4
69664: NEG
69665: PUSH
69666: LD_INT 2
69668: NEG
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 0
69676: PUSH
69677: LD_INT 4
69679: NEG
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 0
69687: PUSH
69688: LD_INT 5
69690: NEG
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 1
69698: PUSH
69699: LD_INT 4
69701: NEG
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 1
69709: PUSH
69710: LD_INT 3
69712: NEG
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 0
69720: PUSH
69721: LD_INT 3
69723: NEG
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 1
69731: NEG
69732: PUSH
69733: LD_INT 4
69735: NEG
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 1
69743: NEG
69744: PUSH
69745: LD_INT 5
69747: NEG
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 2
69755: PUSH
69756: LD_INT 3
69758: NEG
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: LD_INT 2
69766: NEG
69767: PUSH
69768: LD_INT 5
69770: NEG
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 3
69778: PUSH
69779: LD_INT 0
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 3
69788: PUSH
69789: LD_INT 1
69791: NEG
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 4
69799: PUSH
69800: LD_INT 0
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: LD_INT 4
69809: PUSH
69810: LD_INT 1
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 3
69819: PUSH
69820: LD_INT 1
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 2
69829: PUSH
69830: LD_INT 0
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 2
69839: PUSH
69840: LD_INT 1
69842: NEG
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PUSH
69848: LD_INT 2
69850: PUSH
69851: LD_INT 2
69853: NEG
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 4
69861: PUSH
69862: LD_INT 2
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: LD_INT 4
69871: PUSH
69872: LD_INT 4
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: LD_INT 4
69881: PUSH
69882: LD_INT 3
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 5
69891: PUSH
69892: LD_INT 4
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: LD_INT 5
69901: PUSH
69902: LD_INT 5
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 4
69911: PUSH
69912: LD_INT 5
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 3
69921: PUSH
69922: LD_INT 4
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 3
69931: PUSH
69932: LD_INT 3
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 5
69941: PUSH
69942: LD_INT 3
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 3
69951: PUSH
69952: LD_INT 5
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: LIST
70002: LIST
70003: LIST
70004: LIST
70005: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70006: LD_ADDR_VAR 0 33
70010: PUSH
70011: LD_INT 4
70013: NEG
70014: PUSH
70015: LD_INT 4
70017: NEG
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 4
70025: NEG
70026: PUSH
70027: LD_INT 5
70029: NEG
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 3
70037: NEG
70038: PUSH
70039: LD_INT 4
70041: NEG
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 3
70049: NEG
70050: PUSH
70051: LD_INT 3
70053: NEG
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 4
70061: NEG
70062: PUSH
70063: LD_INT 3
70065: NEG
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 5
70073: NEG
70074: PUSH
70075: LD_INT 4
70077: NEG
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 5
70085: NEG
70086: PUSH
70087: LD_INT 5
70089: NEG
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: LD_INT 3
70097: NEG
70098: PUSH
70099: LD_INT 5
70101: NEG
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 5
70109: NEG
70110: PUSH
70111: LD_INT 3
70113: NEG
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 0
70121: PUSH
70122: LD_INT 3
70124: NEG
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 0
70132: PUSH
70133: LD_INT 4
70135: NEG
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 1
70143: PUSH
70144: LD_INT 3
70146: NEG
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 1
70154: PUSH
70155: LD_INT 2
70157: NEG
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 0
70165: PUSH
70166: LD_INT 2
70168: NEG
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 1
70176: NEG
70177: PUSH
70178: LD_INT 3
70180: NEG
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 1
70188: NEG
70189: PUSH
70190: LD_INT 4
70192: NEG
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 2
70200: PUSH
70201: LD_INT 2
70203: NEG
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 2
70211: NEG
70212: PUSH
70213: LD_INT 4
70215: NEG
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 4
70223: PUSH
70224: LD_INT 0
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 4
70233: PUSH
70234: LD_INT 1
70236: NEG
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: LD_INT 5
70244: PUSH
70245: LD_INT 0
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: LD_INT 5
70254: PUSH
70255: LD_INT 1
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 4
70264: PUSH
70265: LD_INT 1
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 3
70274: PUSH
70275: LD_INT 0
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 3
70284: PUSH
70285: LD_INT 1
70287: NEG
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 3
70295: PUSH
70296: LD_INT 2
70298: NEG
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 5
70306: PUSH
70307: LD_INT 2
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 3
70316: PUSH
70317: LD_INT 3
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PUSH
70324: LD_INT 3
70326: PUSH
70327: LD_INT 2
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 4
70336: PUSH
70337: LD_INT 3
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: LD_INT 4
70346: PUSH
70347: LD_INT 4
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 3
70356: PUSH
70357: LD_INT 4
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 2
70366: PUSH
70367: LD_INT 3
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 2
70376: PUSH
70377: LD_INT 2
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_INT 4
70386: PUSH
70387: LD_INT 2
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: PUSH
70394: LD_INT 2
70396: PUSH
70397: LD_INT 4
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 0
70406: PUSH
70407: LD_INT 4
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 0
70416: PUSH
70417: LD_INT 3
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 1
70426: PUSH
70427: LD_INT 4
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 1
70436: PUSH
70437: LD_INT 5
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 0
70446: PUSH
70447: LD_INT 5
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 1
70456: NEG
70457: PUSH
70458: LD_INT 4
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 1
70467: NEG
70468: PUSH
70469: LD_INT 3
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: LD_INT 2
70478: PUSH
70479: LD_INT 5
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: LD_INT 2
70488: NEG
70489: PUSH
70490: LD_INT 3
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70544: LD_ADDR_VAR 0 34
70548: PUSH
70549: LD_INT 0
70551: PUSH
70552: LD_INT 4
70554: NEG
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 0
70562: PUSH
70563: LD_INT 5
70565: NEG
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 1
70573: PUSH
70574: LD_INT 4
70576: NEG
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 1
70584: PUSH
70585: LD_INT 3
70587: NEG
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: PUSH
70593: LD_INT 0
70595: PUSH
70596: LD_INT 3
70598: NEG
70599: PUSH
70600: EMPTY
70601: LIST
70602: LIST
70603: PUSH
70604: LD_INT 1
70606: NEG
70607: PUSH
70608: LD_INT 4
70610: NEG
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: PUSH
70616: LD_INT 1
70618: NEG
70619: PUSH
70620: LD_INT 5
70622: NEG
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: PUSH
70628: LD_INT 2
70630: PUSH
70631: LD_INT 3
70633: NEG
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 2
70641: NEG
70642: PUSH
70643: LD_INT 5
70645: NEG
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 3
70653: PUSH
70654: LD_INT 0
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 3
70663: PUSH
70664: LD_INT 1
70666: NEG
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 4
70674: PUSH
70675: LD_INT 0
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 4
70684: PUSH
70685: LD_INT 1
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 3
70694: PUSH
70695: LD_INT 1
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: LD_INT 2
70704: PUSH
70705: LD_INT 0
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 2
70714: PUSH
70715: LD_INT 1
70717: NEG
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: PUSH
70723: LD_INT 2
70725: PUSH
70726: LD_INT 2
70728: NEG
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 4
70736: PUSH
70737: LD_INT 2
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: LD_INT 4
70746: PUSH
70747: LD_INT 4
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 4
70756: PUSH
70757: LD_INT 3
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 5
70766: PUSH
70767: LD_INT 4
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 5
70776: PUSH
70777: LD_INT 5
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 4
70786: PUSH
70787: LD_INT 5
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 3
70796: PUSH
70797: LD_INT 4
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: LD_INT 3
70806: PUSH
70807: LD_INT 3
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 5
70816: PUSH
70817: LD_INT 3
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 3
70826: PUSH
70827: LD_INT 5
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PUSH
70834: LD_INT 0
70836: PUSH
70837: LD_INT 3
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 0
70846: PUSH
70847: LD_INT 2
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 1
70856: PUSH
70857: LD_INT 3
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: LD_INT 1
70866: PUSH
70867: LD_INT 4
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 0
70876: PUSH
70877: LD_INT 4
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 1
70886: NEG
70887: PUSH
70888: LD_INT 3
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: LD_INT 1
70897: NEG
70898: PUSH
70899: LD_INT 2
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 2
70908: PUSH
70909: LD_INT 4
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 2
70918: NEG
70919: PUSH
70920: LD_INT 2
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 4
70929: NEG
70930: PUSH
70931: LD_INT 0
70933: PUSH
70934: EMPTY
70935: LIST
70936: LIST
70937: PUSH
70938: LD_INT 4
70940: NEG
70941: PUSH
70942: LD_INT 1
70944: NEG
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 3
70952: NEG
70953: PUSH
70954: LD_INT 0
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: PUSH
70961: LD_INT 3
70963: NEG
70964: PUSH
70965: LD_INT 1
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 4
70974: NEG
70975: PUSH
70976: LD_INT 1
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: PUSH
70983: LD_INT 5
70985: NEG
70986: PUSH
70987: LD_INT 0
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: PUSH
70994: LD_INT 5
70996: NEG
70997: PUSH
70998: LD_INT 1
71000: NEG
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 5
71008: NEG
71009: PUSH
71010: LD_INT 2
71012: NEG
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: PUSH
71018: LD_INT 3
71020: NEG
71021: PUSH
71022: LD_INT 2
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: ST_TO_ADDR
// end ; end ;
71076: GO 71079
71078: POP
// case btype of b_depot , b_warehouse :
71079: LD_VAR 0 1
71083: PUSH
71084: LD_INT 0
71086: DOUBLE
71087: EQUAL
71088: IFTRUE 71098
71090: LD_INT 1
71092: DOUBLE
71093: EQUAL
71094: IFTRUE 71098
71096: GO 71299
71098: POP
// case nation of nation_american :
71099: LD_VAR 0 5
71103: PUSH
71104: LD_INT 1
71106: DOUBLE
71107: EQUAL
71108: IFTRUE 71112
71110: GO 71168
71112: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71113: LD_ADDR_VAR 0 9
71117: PUSH
71118: LD_VAR 0 11
71122: PUSH
71123: LD_VAR 0 12
71127: PUSH
71128: LD_VAR 0 13
71132: PUSH
71133: LD_VAR 0 14
71137: PUSH
71138: LD_VAR 0 15
71142: PUSH
71143: LD_VAR 0 16
71147: PUSH
71148: EMPTY
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: PUSH
71156: LD_VAR 0 4
71160: PUSH
71161: LD_INT 1
71163: PLUS
71164: ARRAY
71165: ST_TO_ADDR
71166: GO 71297
71168: LD_INT 2
71170: DOUBLE
71171: EQUAL
71172: IFTRUE 71176
71174: GO 71232
71176: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71177: LD_ADDR_VAR 0 9
71181: PUSH
71182: LD_VAR 0 17
71186: PUSH
71187: LD_VAR 0 18
71191: PUSH
71192: LD_VAR 0 19
71196: PUSH
71197: LD_VAR 0 20
71201: PUSH
71202: LD_VAR 0 21
71206: PUSH
71207: LD_VAR 0 22
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: PUSH
71220: LD_VAR 0 4
71224: PUSH
71225: LD_INT 1
71227: PLUS
71228: ARRAY
71229: ST_TO_ADDR
71230: GO 71297
71232: LD_INT 3
71234: DOUBLE
71235: EQUAL
71236: IFTRUE 71240
71238: GO 71296
71240: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71241: LD_ADDR_VAR 0 9
71245: PUSH
71246: LD_VAR 0 23
71250: PUSH
71251: LD_VAR 0 24
71255: PUSH
71256: LD_VAR 0 25
71260: PUSH
71261: LD_VAR 0 26
71265: PUSH
71266: LD_VAR 0 27
71270: PUSH
71271: LD_VAR 0 28
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: PUSH
71284: LD_VAR 0 4
71288: PUSH
71289: LD_INT 1
71291: PLUS
71292: ARRAY
71293: ST_TO_ADDR
71294: GO 71297
71296: POP
71297: GO 71852
71299: LD_INT 2
71301: DOUBLE
71302: EQUAL
71303: IFTRUE 71313
71305: LD_INT 3
71307: DOUBLE
71308: EQUAL
71309: IFTRUE 71313
71311: GO 71369
71313: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71314: LD_ADDR_VAR 0 9
71318: PUSH
71319: LD_VAR 0 29
71323: PUSH
71324: LD_VAR 0 30
71328: PUSH
71329: LD_VAR 0 31
71333: PUSH
71334: LD_VAR 0 32
71338: PUSH
71339: LD_VAR 0 33
71343: PUSH
71344: LD_VAR 0 34
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: PUSH
71357: LD_VAR 0 4
71361: PUSH
71362: LD_INT 1
71364: PLUS
71365: ARRAY
71366: ST_TO_ADDR
71367: GO 71852
71369: LD_INT 16
71371: DOUBLE
71372: EQUAL
71373: IFTRUE 71431
71375: LD_INT 17
71377: DOUBLE
71378: EQUAL
71379: IFTRUE 71431
71381: LD_INT 18
71383: DOUBLE
71384: EQUAL
71385: IFTRUE 71431
71387: LD_INT 19
71389: DOUBLE
71390: EQUAL
71391: IFTRUE 71431
71393: LD_INT 22
71395: DOUBLE
71396: EQUAL
71397: IFTRUE 71431
71399: LD_INT 20
71401: DOUBLE
71402: EQUAL
71403: IFTRUE 71431
71405: LD_INT 21
71407: DOUBLE
71408: EQUAL
71409: IFTRUE 71431
71411: LD_INT 23
71413: DOUBLE
71414: EQUAL
71415: IFTRUE 71431
71417: LD_INT 24
71419: DOUBLE
71420: EQUAL
71421: IFTRUE 71431
71423: LD_INT 25
71425: DOUBLE
71426: EQUAL
71427: IFTRUE 71431
71429: GO 71487
71431: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71432: LD_ADDR_VAR 0 9
71436: PUSH
71437: LD_VAR 0 35
71441: PUSH
71442: LD_VAR 0 36
71446: PUSH
71447: LD_VAR 0 37
71451: PUSH
71452: LD_VAR 0 38
71456: PUSH
71457: LD_VAR 0 39
71461: PUSH
71462: LD_VAR 0 40
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: PUSH
71475: LD_VAR 0 4
71479: PUSH
71480: LD_INT 1
71482: PLUS
71483: ARRAY
71484: ST_TO_ADDR
71485: GO 71852
71487: LD_INT 6
71489: DOUBLE
71490: EQUAL
71491: IFTRUE 71543
71493: LD_INT 7
71495: DOUBLE
71496: EQUAL
71497: IFTRUE 71543
71499: LD_INT 8
71501: DOUBLE
71502: EQUAL
71503: IFTRUE 71543
71505: LD_INT 13
71507: DOUBLE
71508: EQUAL
71509: IFTRUE 71543
71511: LD_INT 12
71513: DOUBLE
71514: EQUAL
71515: IFTRUE 71543
71517: LD_INT 15
71519: DOUBLE
71520: EQUAL
71521: IFTRUE 71543
71523: LD_INT 11
71525: DOUBLE
71526: EQUAL
71527: IFTRUE 71543
71529: LD_INT 14
71531: DOUBLE
71532: EQUAL
71533: IFTRUE 71543
71535: LD_INT 10
71537: DOUBLE
71538: EQUAL
71539: IFTRUE 71543
71541: GO 71599
71543: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71544: LD_ADDR_VAR 0 9
71548: PUSH
71549: LD_VAR 0 41
71553: PUSH
71554: LD_VAR 0 42
71558: PUSH
71559: LD_VAR 0 43
71563: PUSH
71564: LD_VAR 0 44
71568: PUSH
71569: LD_VAR 0 45
71573: PUSH
71574: LD_VAR 0 46
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: PUSH
71587: LD_VAR 0 4
71591: PUSH
71592: LD_INT 1
71594: PLUS
71595: ARRAY
71596: ST_TO_ADDR
71597: GO 71852
71599: LD_INT 36
71601: DOUBLE
71602: EQUAL
71603: IFTRUE 71607
71605: GO 71663
71607: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71608: LD_ADDR_VAR 0 9
71612: PUSH
71613: LD_VAR 0 47
71617: PUSH
71618: LD_VAR 0 48
71622: PUSH
71623: LD_VAR 0 49
71627: PUSH
71628: LD_VAR 0 50
71632: PUSH
71633: LD_VAR 0 51
71637: PUSH
71638: LD_VAR 0 52
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: PUSH
71651: LD_VAR 0 4
71655: PUSH
71656: LD_INT 1
71658: PLUS
71659: ARRAY
71660: ST_TO_ADDR
71661: GO 71852
71663: LD_INT 4
71665: DOUBLE
71666: EQUAL
71667: IFTRUE 71689
71669: LD_INT 5
71671: DOUBLE
71672: EQUAL
71673: IFTRUE 71689
71675: LD_INT 34
71677: DOUBLE
71678: EQUAL
71679: IFTRUE 71689
71681: LD_INT 37
71683: DOUBLE
71684: EQUAL
71685: IFTRUE 71689
71687: GO 71745
71689: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71690: LD_ADDR_VAR 0 9
71694: PUSH
71695: LD_VAR 0 53
71699: PUSH
71700: LD_VAR 0 54
71704: PUSH
71705: LD_VAR 0 55
71709: PUSH
71710: LD_VAR 0 56
71714: PUSH
71715: LD_VAR 0 57
71719: PUSH
71720: LD_VAR 0 58
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: PUSH
71733: LD_VAR 0 4
71737: PUSH
71738: LD_INT 1
71740: PLUS
71741: ARRAY
71742: ST_TO_ADDR
71743: GO 71852
71745: LD_INT 31
71747: DOUBLE
71748: EQUAL
71749: IFTRUE 71795
71751: LD_INT 32
71753: DOUBLE
71754: EQUAL
71755: IFTRUE 71795
71757: LD_INT 33
71759: DOUBLE
71760: EQUAL
71761: IFTRUE 71795
71763: LD_INT 27
71765: DOUBLE
71766: EQUAL
71767: IFTRUE 71795
71769: LD_INT 26
71771: DOUBLE
71772: EQUAL
71773: IFTRUE 71795
71775: LD_INT 28
71777: DOUBLE
71778: EQUAL
71779: IFTRUE 71795
71781: LD_INT 29
71783: DOUBLE
71784: EQUAL
71785: IFTRUE 71795
71787: LD_INT 30
71789: DOUBLE
71790: EQUAL
71791: IFTRUE 71795
71793: GO 71851
71795: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71796: LD_ADDR_VAR 0 9
71800: PUSH
71801: LD_VAR 0 59
71805: PUSH
71806: LD_VAR 0 60
71810: PUSH
71811: LD_VAR 0 61
71815: PUSH
71816: LD_VAR 0 62
71820: PUSH
71821: LD_VAR 0 63
71825: PUSH
71826: LD_VAR 0 64
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: LIST
71835: LIST
71836: LIST
71837: LIST
71838: PUSH
71839: LD_VAR 0 4
71843: PUSH
71844: LD_INT 1
71846: PLUS
71847: ARRAY
71848: ST_TO_ADDR
71849: GO 71852
71851: POP
// temp_list2 = [ ] ;
71852: LD_ADDR_VAR 0 10
71856: PUSH
71857: EMPTY
71858: ST_TO_ADDR
// for i in temp_list do
71859: LD_ADDR_VAR 0 8
71863: PUSH
71864: LD_VAR 0 9
71868: PUSH
71869: FOR_IN
71870: IFFALSE 71922
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71872: LD_ADDR_VAR 0 10
71876: PUSH
71877: LD_VAR 0 10
71881: PUSH
71882: LD_VAR 0 8
71886: PUSH
71887: LD_INT 1
71889: ARRAY
71890: PUSH
71891: LD_VAR 0 2
71895: PLUS
71896: PUSH
71897: LD_VAR 0 8
71901: PUSH
71902: LD_INT 2
71904: ARRAY
71905: PUSH
71906: LD_VAR 0 3
71910: PLUS
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: EMPTY
71917: LIST
71918: ADD
71919: ST_TO_ADDR
71920: GO 71869
71922: POP
71923: POP
// result = temp_list2 ;
71924: LD_ADDR_VAR 0 7
71928: PUSH
71929: LD_VAR 0 10
71933: ST_TO_ADDR
// end ;
71934: LD_VAR 0 7
71938: RET
// export function EnemyInRange ( unit , dist ) ; begin
71939: LD_INT 0
71941: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71942: LD_ADDR_VAR 0 3
71946: PUSH
71947: LD_VAR 0 1
71951: PPUSH
71952: CALL_OW 255
71956: PPUSH
71957: LD_VAR 0 1
71961: PPUSH
71962: CALL_OW 250
71966: PPUSH
71967: LD_VAR 0 1
71971: PPUSH
71972: CALL_OW 251
71976: PPUSH
71977: LD_VAR 0 2
71981: PPUSH
71982: CALL 45341 0 4
71986: PUSH
71987: LD_INT 4
71989: ARRAY
71990: ST_TO_ADDR
// end ;
71991: LD_VAR 0 3
71995: RET
// export function PlayerSeeMe ( unit ) ; begin
71996: LD_INT 0
71998: PPUSH
// result := See ( your_side , unit ) ;
71999: LD_ADDR_VAR 0 2
72003: PUSH
72004: LD_OWVAR 2
72008: PPUSH
72009: LD_VAR 0 1
72013: PPUSH
72014: CALL_OW 292
72018: ST_TO_ADDR
// end ;
72019: LD_VAR 0 2
72023: RET
// export function ReverseDir ( unit ) ; begin
72024: LD_INT 0
72026: PPUSH
// if not unit then
72027: LD_VAR 0 1
72031: NOT
72032: IFFALSE 72036
// exit ;
72034: GO 72059
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72036: LD_ADDR_VAR 0 2
72040: PUSH
72041: LD_VAR 0 1
72045: PPUSH
72046: CALL_OW 254
72050: PUSH
72051: LD_INT 3
72053: PLUS
72054: PUSH
72055: LD_INT 6
72057: MOD
72058: ST_TO_ADDR
// end ;
72059: LD_VAR 0 2
72063: RET
// export function ReverseArray ( array ) ; var i ; begin
72064: LD_INT 0
72066: PPUSH
72067: PPUSH
// if not array then
72068: LD_VAR 0 1
72072: NOT
72073: IFFALSE 72077
// exit ;
72075: GO 72132
// result := [ ] ;
72077: LD_ADDR_VAR 0 2
72081: PUSH
72082: EMPTY
72083: ST_TO_ADDR
// for i := array downto 1 do
72084: LD_ADDR_VAR 0 3
72088: PUSH
72089: DOUBLE
72090: LD_VAR 0 1
72094: INC
72095: ST_TO_ADDR
72096: LD_INT 1
72098: PUSH
72099: FOR_DOWNTO
72100: IFFALSE 72130
// result := Join ( result , array [ i ] ) ;
72102: LD_ADDR_VAR 0 2
72106: PUSH
72107: LD_VAR 0 2
72111: PPUSH
72112: LD_VAR 0 1
72116: PUSH
72117: LD_VAR 0 3
72121: ARRAY
72122: PPUSH
72123: CALL 76776 0 2
72127: ST_TO_ADDR
72128: GO 72099
72130: POP
72131: POP
// end ;
72132: LD_VAR 0 2
72136: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72137: LD_INT 0
72139: PPUSH
72140: PPUSH
72141: PPUSH
72142: PPUSH
72143: PPUSH
72144: PPUSH
// if not unit or not hexes then
72145: LD_VAR 0 1
72149: NOT
72150: PUSH
72151: LD_VAR 0 2
72155: NOT
72156: OR
72157: IFFALSE 72161
// exit ;
72159: GO 72284
// dist := 9999 ;
72161: LD_ADDR_VAR 0 5
72165: PUSH
72166: LD_INT 9999
72168: ST_TO_ADDR
// for i = 1 to hexes do
72169: LD_ADDR_VAR 0 4
72173: PUSH
72174: DOUBLE
72175: LD_INT 1
72177: DEC
72178: ST_TO_ADDR
72179: LD_VAR 0 2
72183: PUSH
72184: FOR_TO
72185: IFFALSE 72272
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72187: LD_ADDR_VAR 0 6
72191: PUSH
72192: LD_VAR 0 1
72196: PPUSH
72197: LD_VAR 0 2
72201: PUSH
72202: LD_VAR 0 4
72206: ARRAY
72207: PUSH
72208: LD_INT 1
72210: ARRAY
72211: PPUSH
72212: LD_VAR 0 2
72216: PUSH
72217: LD_VAR 0 4
72221: ARRAY
72222: PUSH
72223: LD_INT 2
72225: ARRAY
72226: PPUSH
72227: CALL_OW 297
72231: ST_TO_ADDR
// if tdist < dist then
72232: LD_VAR 0 6
72236: PUSH
72237: LD_VAR 0 5
72241: LESS
72242: IFFALSE 72270
// begin hex := hexes [ i ] ;
72244: LD_ADDR_VAR 0 8
72248: PUSH
72249: LD_VAR 0 2
72253: PUSH
72254: LD_VAR 0 4
72258: ARRAY
72259: ST_TO_ADDR
// dist := tdist ;
72260: LD_ADDR_VAR 0 5
72264: PUSH
72265: LD_VAR 0 6
72269: ST_TO_ADDR
// end ; end ;
72270: GO 72184
72272: POP
72273: POP
// result := hex ;
72274: LD_ADDR_VAR 0 3
72278: PUSH
72279: LD_VAR 0 8
72283: ST_TO_ADDR
// end ;
72284: LD_VAR 0 3
72288: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72289: LD_INT 0
72291: PPUSH
72292: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72293: LD_VAR 0 1
72297: NOT
72298: PUSH
72299: LD_VAR 0 1
72303: PUSH
72304: LD_INT 21
72306: PUSH
72307: LD_INT 2
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 23
72316: PUSH
72317: LD_INT 2
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PPUSH
72328: CALL_OW 69
72332: IN
72333: NOT
72334: OR
72335: IFFALSE 72339
// exit ;
72337: GO 72386
// for i = 1 to 3 do
72339: LD_ADDR_VAR 0 3
72343: PUSH
72344: DOUBLE
72345: LD_INT 1
72347: DEC
72348: ST_TO_ADDR
72349: LD_INT 3
72351: PUSH
72352: FOR_TO
72353: IFFALSE 72384
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72355: LD_VAR 0 1
72359: PPUSH
72360: CALL_OW 250
72364: PPUSH
72365: LD_VAR 0 1
72369: PPUSH
72370: CALL_OW 251
72374: PPUSH
72375: LD_INT 1
72377: PPUSH
72378: CALL_OW 453
72382: GO 72352
72384: POP
72385: POP
// end ;
72386: LD_VAR 0 2
72390: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72391: LD_INT 0
72393: PPUSH
72394: PPUSH
72395: PPUSH
72396: PPUSH
72397: PPUSH
72398: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72399: LD_VAR 0 1
72403: NOT
72404: PUSH
72405: LD_VAR 0 2
72409: NOT
72410: OR
72411: PUSH
72412: LD_VAR 0 1
72416: PPUSH
72417: CALL_OW 314
72421: OR
72422: IFFALSE 72426
// exit ;
72424: GO 72893
// if GetLives ( i ) < 250 then
72426: LD_VAR 0 4
72430: PPUSH
72431: CALL_OW 256
72435: PUSH
72436: LD_INT 250
72438: LESS
72439: IFFALSE 72452
// begin ComAutodestruct ( i ) ;
72441: LD_VAR 0 4
72445: PPUSH
72446: CALL 72289 0 1
// exit ;
72450: GO 72893
// end ; x := GetX ( enemy_unit ) ;
72452: LD_ADDR_VAR 0 7
72456: PUSH
72457: LD_VAR 0 2
72461: PPUSH
72462: CALL_OW 250
72466: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72467: LD_ADDR_VAR 0 8
72471: PUSH
72472: LD_VAR 0 2
72476: PPUSH
72477: CALL_OW 251
72481: ST_TO_ADDR
// if not x or not y then
72482: LD_VAR 0 7
72486: NOT
72487: PUSH
72488: LD_VAR 0 8
72492: NOT
72493: OR
72494: IFFALSE 72498
// exit ;
72496: GO 72893
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72498: LD_ADDR_VAR 0 6
72502: PUSH
72503: LD_VAR 0 7
72507: PPUSH
72508: LD_INT 0
72510: PPUSH
72511: LD_INT 4
72513: PPUSH
72514: CALL_OW 272
72518: PUSH
72519: LD_VAR 0 8
72523: PPUSH
72524: LD_INT 0
72526: PPUSH
72527: LD_INT 4
72529: PPUSH
72530: CALL_OW 273
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: PUSH
72539: LD_VAR 0 7
72543: PPUSH
72544: LD_INT 1
72546: PPUSH
72547: LD_INT 4
72549: PPUSH
72550: CALL_OW 272
72554: PUSH
72555: LD_VAR 0 8
72559: PPUSH
72560: LD_INT 1
72562: PPUSH
72563: LD_INT 4
72565: PPUSH
72566: CALL_OW 273
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: PUSH
72575: LD_VAR 0 7
72579: PPUSH
72580: LD_INT 2
72582: PPUSH
72583: LD_INT 4
72585: PPUSH
72586: CALL_OW 272
72590: PUSH
72591: LD_VAR 0 8
72595: PPUSH
72596: LD_INT 2
72598: PPUSH
72599: LD_INT 4
72601: PPUSH
72602: CALL_OW 273
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: PUSH
72611: LD_VAR 0 7
72615: PPUSH
72616: LD_INT 3
72618: PPUSH
72619: LD_INT 4
72621: PPUSH
72622: CALL_OW 272
72626: PUSH
72627: LD_VAR 0 8
72631: PPUSH
72632: LD_INT 3
72634: PPUSH
72635: LD_INT 4
72637: PPUSH
72638: CALL_OW 273
72642: PUSH
72643: EMPTY
72644: LIST
72645: LIST
72646: PUSH
72647: LD_VAR 0 7
72651: PPUSH
72652: LD_INT 4
72654: PPUSH
72655: LD_INT 4
72657: PPUSH
72658: CALL_OW 272
72662: PUSH
72663: LD_VAR 0 8
72667: PPUSH
72668: LD_INT 4
72670: PPUSH
72671: LD_INT 4
72673: PPUSH
72674: CALL_OW 273
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: PUSH
72683: LD_VAR 0 7
72687: PPUSH
72688: LD_INT 5
72690: PPUSH
72691: LD_INT 4
72693: PPUSH
72694: CALL_OW 272
72698: PUSH
72699: LD_VAR 0 8
72703: PPUSH
72704: LD_INT 5
72706: PPUSH
72707: LD_INT 4
72709: PPUSH
72710: CALL_OW 273
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: ST_TO_ADDR
// for i = tmp downto 1 do
72727: LD_ADDR_VAR 0 4
72731: PUSH
72732: DOUBLE
72733: LD_VAR 0 6
72737: INC
72738: ST_TO_ADDR
72739: LD_INT 1
72741: PUSH
72742: FOR_DOWNTO
72743: IFFALSE 72844
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72745: LD_VAR 0 6
72749: PUSH
72750: LD_VAR 0 4
72754: ARRAY
72755: PUSH
72756: LD_INT 1
72758: ARRAY
72759: PPUSH
72760: LD_VAR 0 6
72764: PUSH
72765: LD_VAR 0 4
72769: ARRAY
72770: PUSH
72771: LD_INT 2
72773: ARRAY
72774: PPUSH
72775: CALL_OW 488
72779: NOT
72780: PUSH
72781: LD_VAR 0 6
72785: PUSH
72786: LD_VAR 0 4
72790: ARRAY
72791: PUSH
72792: LD_INT 1
72794: ARRAY
72795: PPUSH
72796: LD_VAR 0 6
72800: PUSH
72801: LD_VAR 0 4
72805: ARRAY
72806: PUSH
72807: LD_INT 2
72809: ARRAY
72810: PPUSH
72811: CALL_OW 428
72815: PUSH
72816: LD_INT 0
72818: NONEQUAL
72819: OR
72820: IFFALSE 72842
// tmp := Delete ( tmp , i ) ;
72822: LD_ADDR_VAR 0 6
72826: PUSH
72827: LD_VAR 0 6
72831: PPUSH
72832: LD_VAR 0 4
72836: PPUSH
72837: CALL_OW 3
72841: ST_TO_ADDR
72842: GO 72742
72844: POP
72845: POP
// j := GetClosestHex ( unit , tmp ) ;
72846: LD_ADDR_VAR 0 5
72850: PUSH
72851: LD_VAR 0 1
72855: PPUSH
72856: LD_VAR 0 6
72860: PPUSH
72861: CALL 72137 0 2
72865: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72866: LD_VAR 0 1
72870: PPUSH
72871: LD_VAR 0 5
72875: PUSH
72876: LD_INT 1
72878: ARRAY
72879: PPUSH
72880: LD_VAR 0 5
72884: PUSH
72885: LD_INT 2
72887: ARRAY
72888: PPUSH
72889: CALL_OW 111
// end ;
72893: LD_VAR 0 3
72897: RET
// export function PrepareApemanSoldier ( ) ; begin
72898: LD_INT 0
72900: PPUSH
// uc_nation := 0 ;
72901: LD_ADDR_OWVAR 21
72905: PUSH
72906: LD_INT 0
72908: ST_TO_ADDR
// hc_sex := sex_male ;
72909: LD_ADDR_OWVAR 27
72913: PUSH
72914: LD_INT 1
72916: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72917: LD_ADDR_OWVAR 28
72921: PUSH
72922: LD_INT 15
72924: ST_TO_ADDR
// hc_gallery :=  ;
72925: LD_ADDR_OWVAR 33
72929: PUSH
72930: LD_STRING 
72932: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72933: LD_ADDR_OWVAR 31
72937: PUSH
72938: LD_INT 0
72940: PPUSH
72941: LD_INT 3
72943: PPUSH
72944: CALL_OW 12
72948: PUSH
72949: LD_INT 0
72951: PPUSH
72952: LD_INT 3
72954: PPUSH
72955: CALL_OW 12
72959: PUSH
72960: LD_INT 0
72962: PUSH
72963: LD_INT 0
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: LIST
72970: LIST
72971: ST_TO_ADDR
// end ;
72972: LD_VAR 0 1
72976: RET
// export function PrepareApemanEngineer ( ) ; begin
72977: LD_INT 0
72979: PPUSH
// uc_nation := 0 ;
72980: LD_ADDR_OWVAR 21
72984: PUSH
72985: LD_INT 0
72987: ST_TO_ADDR
// hc_sex := sex_male ;
72988: LD_ADDR_OWVAR 27
72992: PUSH
72993: LD_INT 1
72995: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72996: LD_ADDR_OWVAR 28
73000: PUSH
73001: LD_INT 16
73003: ST_TO_ADDR
// hc_gallery :=  ;
73004: LD_ADDR_OWVAR 33
73008: PUSH
73009: LD_STRING 
73011: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73012: LD_ADDR_OWVAR 31
73016: PUSH
73017: LD_INT 0
73019: PPUSH
73020: LD_INT 3
73022: PPUSH
73023: CALL_OW 12
73027: PUSH
73028: LD_INT 0
73030: PPUSH
73031: LD_INT 3
73033: PPUSH
73034: CALL_OW 12
73038: PUSH
73039: LD_INT 0
73041: PUSH
73042: LD_INT 0
73044: PUSH
73045: EMPTY
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: ST_TO_ADDR
// end ;
73051: LD_VAR 0 1
73055: RET
// export function PrepareApeman ( agressivity ) ; begin
73056: LD_INT 0
73058: PPUSH
// uc_side := 0 ;
73059: LD_ADDR_OWVAR 20
73063: PUSH
73064: LD_INT 0
73066: ST_TO_ADDR
// uc_nation := 0 ;
73067: LD_ADDR_OWVAR 21
73071: PUSH
73072: LD_INT 0
73074: ST_TO_ADDR
// hc_sex := sex_male ;
73075: LD_ADDR_OWVAR 27
73079: PUSH
73080: LD_INT 1
73082: ST_TO_ADDR
// hc_class := class_apeman ;
73083: LD_ADDR_OWVAR 28
73087: PUSH
73088: LD_INT 12
73090: ST_TO_ADDR
// hc_gallery :=  ;
73091: LD_ADDR_OWVAR 33
73095: PUSH
73096: LD_STRING 
73098: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73099: LD_ADDR_OWVAR 35
73103: PUSH
73104: LD_VAR 0 1
73108: NEG
73109: PPUSH
73110: LD_VAR 0 1
73114: PPUSH
73115: CALL_OW 12
73119: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73120: LD_ADDR_OWVAR 31
73124: PUSH
73125: LD_INT 0
73127: PPUSH
73128: LD_INT 3
73130: PPUSH
73131: CALL_OW 12
73135: PUSH
73136: LD_INT 0
73138: PPUSH
73139: LD_INT 3
73141: PPUSH
73142: CALL_OW 12
73146: PUSH
73147: LD_INT 0
73149: PUSH
73150: LD_INT 0
73152: PUSH
73153: EMPTY
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: ST_TO_ADDR
// end ;
73159: LD_VAR 0 2
73163: RET
// export function PrepareTiger ( agressivity ) ; begin
73164: LD_INT 0
73166: PPUSH
// uc_side := 0 ;
73167: LD_ADDR_OWVAR 20
73171: PUSH
73172: LD_INT 0
73174: ST_TO_ADDR
// uc_nation := 0 ;
73175: LD_ADDR_OWVAR 21
73179: PUSH
73180: LD_INT 0
73182: ST_TO_ADDR
// hc_class := class_tiger ;
73183: LD_ADDR_OWVAR 28
73187: PUSH
73188: LD_INT 14
73190: ST_TO_ADDR
// hc_gallery :=  ;
73191: LD_ADDR_OWVAR 33
73195: PUSH
73196: LD_STRING 
73198: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73199: LD_ADDR_OWVAR 35
73203: PUSH
73204: LD_VAR 0 1
73208: NEG
73209: PPUSH
73210: LD_VAR 0 1
73214: PPUSH
73215: CALL_OW 12
73219: ST_TO_ADDR
// end ;
73220: LD_VAR 0 2
73224: RET
// export function PrepareEnchidna ( ) ; begin
73225: LD_INT 0
73227: PPUSH
// uc_side := 0 ;
73228: LD_ADDR_OWVAR 20
73232: PUSH
73233: LD_INT 0
73235: ST_TO_ADDR
// uc_nation := 0 ;
73236: LD_ADDR_OWVAR 21
73240: PUSH
73241: LD_INT 0
73243: ST_TO_ADDR
// hc_class := class_baggie ;
73244: LD_ADDR_OWVAR 28
73248: PUSH
73249: LD_INT 13
73251: ST_TO_ADDR
// hc_gallery :=  ;
73252: LD_ADDR_OWVAR 33
73256: PUSH
73257: LD_STRING 
73259: ST_TO_ADDR
// end ;
73260: LD_VAR 0 1
73264: RET
// export function PrepareFrog ( ) ; begin
73265: LD_INT 0
73267: PPUSH
// uc_side := 0 ;
73268: LD_ADDR_OWVAR 20
73272: PUSH
73273: LD_INT 0
73275: ST_TO_ADDR
// uc_nation := 0 ;
73276: LD_ADDR_OWVAR 21
73280: PUSH
73281: LD_INT 0
73283: ST_TO_ADDR
// hc_class := class_frog ;
73284: LD_ADDR_OWVAR 28
73288: PUSH
73289: LD_INT 19
73291: ST_TO_ADDR
// hc_gallery :=  ;
73292: LD_ADDR_OWVAR 33
73296: PUSH
73297: LD_STRING 
73299: ST_TO_ADDR
// end ;
73300: LD_VAR 0 1
73304: RET
// export function PrepareFish ( ) ; begin
73305: LD_INT 0
73307: PPUSH
// uc_side := 0 ;
73308: LD_ADDR_OWVAR 20
73312: PUSH
73313: LD_INT 0
73315: ST_TO_ADDR
// uc_nation := 0 ;
73316: LD_ADDR_OWVAR 21
73320: PUSH
73321: LD_INT 0
73323: ST_TO_ADDR
// hc_class := class_fish ;
73324: LD_ADDR_OWVAR 28
73328: PUSH
73329: LD_INT 20
73331: ST_TO_ADDR
// hc_gallery :=  ;
73332: LD_ADDR_OWVAR 33
73336: PUSH
73337: LD_STRING 
73339: ST_TO_ADDR
// end ;
73340: LD_VAR 0 1
73344: RET
// export function PrepareBird ( ) ; begin
73345: LD_INT 0
73347: PPUSH
// uc_side := 0 ;
73348: LD_ADDR_OWVAR 20
73352: PUSH
73353: LD_INT 0
73355: ST_TO_ADDR
// uc_nation := 0 ;
73356: LD_ADDR_OWVAR 21
73360: PUSH
73361: LD_INT 0
73363: ST_TO_ADDR
// hc_class := class_phororhacos ;
73364: LD_ADDR_OWVAR 28
73368: PUSH
73369: LD_INT 18
73371: ST_TO_ADDR
// hc_gallery :=  ;
73372: LD_ADDR_OWVAR 33
73376: PUSH
73377: LD_STRING 
73379: ST_TO_ADDR
// end ;
73380: LD_VAR 0 1
73384: RET
// export function PrepareHorse ( ) ; begin
73385: LD_INT 0
73387: PPUSH
// uc_side := 0 ;
73388: LD_ADDR_OWVAR 20
73392: PUSH
73393: LD_INT 0
73395: ST_TO_ADDR
// uc_nation := 0 ;
73396: LD_ADDR_OWVAR 21
73400: PUSH
73401: LD_INT 0
73403: ST_TO_ADDR
// hc_class := class_horse ;
73404: LD_ADDR_OWVAR 28
73408: PUSH
73409: LD_INT 21
73411: ST_TO_ADDR
// hc_gallery :=  ;
73412: LD_ADDR_OWVAR 33
73416: PUSH
73417: LD_STRING 
73419: ST_TO_ADDR
// end ;
73420: LD_VAR 0 1
73424: RET
// export function PrepareMastodont ( ) ; begin
73425: LD_INT 0
73427: PPUSH
// uc_side := 0 ;
73428: LD_ADDR_OWVAR 20
73432: PUSH
73433: LD_INT 0
73435: ST_TO_ADDR
// uc_nation := 0 ;
73436: LD_ADDR_OWVAR 21
73440: PUSH
73441: LD_INT 0
73443: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73444: LD_ADDR_OWVAR 37
73448: PUSH
73449: LD_INT 31
73451: ST_TO_ADDR
// vc_control := control_rider ;
73452: LD_ADDR_OWVAR 38
73456: PUSH
73457: LD_INT 4
73459: ST_TO_ADDR
// end ;
73460: LD_VAR 0 1
73464: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73465: LD_INT 0
73467: PPUSH
73468: PPUSH
73469: PPUSH
// uc_side = 0 ;
73470: LD_ADDR_OWVAR 20
73474: PUSH
73475: LD_INT 0
73477: ST_TO_ADDR
// uc_nation = 0 ;
73478: LD_ADDR_OWVAR 21
73482: PUSH
73483: LD_INT 0
73485: ST_TO_ADDR
// InitHc_All ( ) ;
73486: CALL_OW 584
// InitVc ;
73490: CALL_OW 20
// if mastodonts then
73494: LD_VAR 0 6
73498: IFFALSE 73565
// for i = 1 to mastodonts do
73500: LD_ADDR_VAR 0 11
73504: PUSH
73505: DOUBLE
73506: LD_INT 1
73508: DEC
73509: ST_TO_ADDR
73510: LD_VAR 0 6
73514: PUSH
73515: FOR_TO
73516: IFFALSE 73563
// begin vc_chassis := 31 ;
73518: LD_ADDR_OWVAR 37
73522: PUSH
73523: LD_INT 31
73525: ST_TO_ADDR
// vc_control := control_rider ;
73526: LD_ADDR_OWVAR 38
73530: PUSH
73531: LD_INT 4
73533: ST_TO_ADDR
// animal := CreateVehicle ;
73534: LD_ADDR_VAR 0 12
73538: PUSH
73539: CALL_OW 45
73543: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73544: LD_VAR 0 12
73548: PPUSH
73549: LD_VAR 0 8
73553: PPUSH
73554: LD_INT 0
73556: PPUSH
73557: CALL 75693 0 3
// end ;
73561: GO 73515
73563: POP
73564: POP
// if horses then
73565: LD_VAR 0 5
73569: IFFALSE 73636
// for i = 1 to horses do
73571: LD_ADDR_VAR 0 11
73575: PUSH
73576: DOUBLE
73577: LD_INT 1
73579: DEC
73580: ST_TO_ADDR
73581: LD_VAR 0 5
73585: PUSH
73586: FOR_TO
73587: IFFALSE 73634
// begin hc_class := 21 ;
73589: LD_ADDR_OWVAR 28
73593: PUSH
73594: LD_INT 21
73596: ST_TO_ADDR
// hc_gallery :=  ;
73597: LD_ADDR_OWVAR 33
73601: PUSH
73602: LD_STRING 
73604: ST_TO_ADDR
// animal := CreateHuman ;
73605: LD_ADDR_VAR 0 12
73609: PUSH
73610: CALL_OW 44
73614: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73615: LD_VAR 0 12
73619: PPUSH
73620: LD_VAR 0 8
73624: PPUSH
73625: LD_INT 0
73627: PPUSH
73628: CALL 75693 0 3
// end ;
73632: GO 73586
73634: POP
73635: POP
// if birds then
73636: LD_VAR 0 1
73640: IFFALSE 73707
// for i = 1 to birds do
73642: LD_ADDR_VAR 0 11
73646: PUSH
73647: DOUBLE
73648: LD_INT 1
73650: DEC
73651: ST_TO_ADDR
73652: LD_VAR 0 1
73656: PUSH
73657: FOR_TO
73658: IFFALSE 73705
// begin hc_class = 18 ;
73660: LD_ADDR_OWVAR 28
73664: PUSH
73665: LD_INT 18
73667: ST_TO_ADDR
// hc_gallery =  ;
73668: LD_ADDR_OWVAR 33
73672: PUSH
73673: LD_STRING 
73675: ST_TO_ADDR
// animal := CreateHuman ;
73676: LD_ADDR_VAR 0 12
73680: PUSH
73681: CALL_OW 44
73685: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73686: LD_VAR 0 12
73690: PPUSH
73691: LD_VAR 0 8
73695: PPUSH
73696: LD_INT 0
73698: PPUSH
73699: CALL 75693 0 3
// end ;
73703: GO 73657
73705: POP
73706: POP
// if tigers then
73707: LD_VAR 0 2
73711: IFFALSE 73795
// for i = 1 to tigers do
73713: LD_ADDR_VAR 0 11
73717: PUSH
73718: DOUBLE
73719: LD_INT 1
73721: DEC
73722: ST_TO_ADDR
73723: LD_VAR 0 2
73727: PUSH
73728: FOR_TO
73729: IFFALSE 73793
// begin hc_class = class_tiger ;
73731: LD_ADDR_OWVAR 28
73735: PUSH
73736: LD_INT 14
73738: ST_TO_ADDR
// hc_gallery =  ;
73739: LD_ADDR_OWVAR 33
73743: PUSH
73744: LD_STRING 
73746: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73747: LD_ADDR_OWVAR 35
73751: PUSH
73752: LD_INT 7
73754: NEG
73755: PPUSH
73756: LD_INT 7
73758: PPUSH
73759: CALL_OW 12
73763: ST_TO_ADDR
// animal := CreateHuman ;
73764: LD_ADDR_VAR 0 12
73768: PUSH
73769: CALL_OW 44
73773: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73774: LD_VAR 0 12
73778: PPUSH
73779: LD_VAR 0 8
73783: PPUSH
73784: LD_INT 0
73786: PPUSH
73787: CALL 75693 0 3
// end ;
73791: GO 73728
73793: POP
73794: POP
// if apemans then
73795: LD_VAR 0 3
73799: IFFALSE 73922
// for i = 1 to apemans do
73801: LD_ADDR_VAR 0 11
73805: PUSH
73806: DOUBLE
73807: LD_INT 1
73809: DEC
73810: ST_TO_ADDR
73811: LD_VAR 0 3
73815: PUSH
73816: FOR_TO
73817: IFFALSE 73920
// begin hc_class = class_apeman ;
73819: LD_ADDR_OWVAR 28
73823: PUSH
73824: LD_INT 12
73826: ST_TO_ADDR
// hc_gallery =  ;
73827: LD_ADDR_OWVAR 33
73831: PUSH
73832: LD_STRING 
73834: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73835: LD_ADDR_OWVAR 35
73839: PUSH
73840: LD_INT 2
73842: NEG
73843: PPUSH
73844: LD_INT 2
73846: PPUSH
73847: CALL_OW 12
73851: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73852: LD_ADDR_OWVAR 31
73856: PUSH
73857: LD_INT 1
73859: PPUSH
73860: LD_INT 3
73862: PPUSH
73863: CALL_OW 12
73867: PUSH
73868: LD_INT 1
73870: PPUSH
73871: LD_INT 3
73873: PPUSH
73874: CALL_OW 12
73878: PUSH
73879: LD_INT 0
73881: PUSH
73882: LD_INT 0
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: LIST
73889: LIST
73890: ST_TO_ADDR
// animal := CreateHuman ;
73891: LD_ADDR_VAR 0 12
73895: PUSH
73896: CALL_OW 44
73900: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73901: LD_VAR 0 12
73905: PPUSH
73906: LD_VAR 0 8
73910: PPUSH
73911: LD_INT 0
73913: PPUSH
73914: CALL 75693 0 3
// end ;
73918: GO 73816
73920: POP
73921: POP
// if enchidnas then
73922: LD_VAR 0 4
73926: IFFALSE 73993
// for i = 1 to enchidnas do
73928: LD_ADDR_VAR 0 11
73932: PUSH
73933: DOUBLE
73934: LD_INT 1
73936: DEC
73937: ST_TO_ADDR
73938: LD_VAR 0 4
73942: PUSH
73943: FOR_TO
73944: IFFALSE 73991
// begin hc_class = 13 ;
73946: LD_ADDR_OWVAR 28
73950: PUSH
73951: LD_INT 13
73953: ST_TO_ADDR
// hc_gallery =  ;
73954: LD_ADDR_OWVAR 33
73958: PUSH
73959: LD_STRING 
73961: ST_TO_ADDR
// animal := CreateHuman ;
73962: LD_ADDR_VAR 0 12
73966: PUSH
73967: CALL_OW 44
73971: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73972: LD_VAR 0 12
73976: PPUSH
73977: LD_VAR 0 8
73981: PPUSH
73982: LD_INT 0
73984: PPUSH
73985: CALL 75693 0 3
// end ;
73989: GO 73943
73991: POP
73992: POP
// if fishes then
73993: LD_VAR 0 7
73997: IFFALSE 74064
// for i = 1 to fishes do
73999: LD_ADDR_VAR 0 11
74003: PUSH
74004: DOUBLE
74005: LD_INT 1
74007: DEC
74008: ST_TO_ADDR
74009: LD_VAR 0 7
74013: PUSH
74014: FOR_TO
74015: IFFALSE 74062
// begin hc_class = 20 ;
74017: LD_ADDR_OWVAR 28
74021: PUSH
74022: LD_INT 20
74024: ST_TO_ADDR
// hc_gallery =  ;
74025: LD_ADDR_OWVAR 33
74029: PUSH
74030: LD_STRING 
74032: ST_TO_ADDR
// animal := CreateHuman ;
74033: LD_ADDR_VAR 0 12
74037: PUSH
74038: CALL_OW 44
74042: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74043: LD_VAR 0 12
74047: PPUSH
74048: LD_VAR 0 9
74052: PPUSH
74053: LD_INT 0
74055: PPUSH
74056: CALL 75693 0 3
// end ;
74060: GO 74014
74062: POP
74063: POP
// end ;
74064: LD_VAR 0 10
74068: RET
// export function WantHeal ( sci , unit ) ; begin
74069: LD_INT 0
74071: PPUSH
// if GetTaskList ( sci ) > 0 then
74072: LD_VAR 0 1
74076: PPUSH
74077: CALL_OW 437
74081: PUSH
74082: LD_INT 0
74084: GREATER
74085: IFFALSE 74155
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74087: LD_VAR 0 1
74091: PPUSH
74092: CALL_OW 437
74096: PUSH
74097: LD_INT 1
74099: ARRAY
74100: PUSH
74101: LD_INT 1
74103: ARRAY
74104: PUSH
74105: LD_STRING l
74107: EQUAL
74108: PUSH
74109: LD_VAR 0 1
74113: PPUSH
74114: CALL_OW 437
74118: PUSH
74119: LD_INT 1
74121: ARRAY
74122: PUSH
74123: LD_INT 4
74125: ARRAY
74126: PUSH
74127: LD_VAR 0 2
74131: EQUAL
74132: AND
74133: IFFALSE 74145
// result := true else
74135: LD_ADDR_VAR 0 3
74139: PUSH
74140: LD_INT 1
74142: ST_TO_ADDR
74143: GO 74153
// result := false ;
74145: LD_ADDR_VAR 0 3
74149: PUSH
74150: LD_INT 0
74152: ST_TO_ADDR
// end else
74153: GO 74163
// result := false ;
74155: LD_ADDR_VAR 0 3
74159: PUSH
74160: LD_INT 0
74162: ST_TO_ADDR
// end ;
74163: LD_VAR 0 3
74167: RET
// export function HealTarget ( sci ) ; begin
74168: LD_INT 0
74170: PPUSH
// if not sci then
74171: LD_VAR 0 1
74175: NOT
74176: IFFALSE 74180
// exit ;
74178: GO 74245
// result := 0 ;
74180: LD_ADDR_VAR 0 2
74184: PUSH
74185: LD_INT 0
74187: ST_TO_ADDR
// if GetTaskList ( sci ) then
74188: LD_VAR 0 1
74192: PPUSH
74193: CALL_OW 437
74197: IFFALSE 74245
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74199: LD_VAR 0 1
74203: PPUSH
74204: CALL_OW 437
74208: PUSH
74209: LD_INT 1
74211: ARRAY
74212: PUSH
74213: LD_INT 1
74215: ARRAY
74216: PUSH
74217: LD_STRING l
74219: EQUAL
74220: IFFALSE 74245
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74222: LD_ADDR_VAR 0 2
74226: PUSH
74227: LD_VAR 0 1
74231: PPUSH
74232: CALL_OW 437
74236: PUSH
74237: LD_INT 1
74239: ARRAY
74240: PUSH
74241: LD_INT 4
74243: ARRAY
74244: ST_TO_ADDR
// end ;
74245: LD_VAR 0 2
74249: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74250: LD_INT 0
74252: PPUSH
74253: PPUSH
74254: PPUSH
74255: PPUSH
// if not base_units then
74256: LD_VAR 0 1
74260: NOT
74261: IFFALSE 74265
// exit ;
74263: GO 74352
// result := false ;
74265: LD_ADDR_VAR 0 2
74269: PUSH
74270: LD_INT 0
74272: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74273: LD_ADDR_VAR 0 5
74277: PUSH
74278: LD_VAR 0 1
74282: PPUSH
74283: LD_INT 21
74285: PUSH
74286: LD_INT 3
74288: PUSH
74289: EMPTY
74290: LIST
74291: LIST
74292: PPUSH
74293: CALL_OW 72
74297: ST_TO_ADDR
// if not tmp then
74298: LD_VAR 0 5
74302: NOT
74303: IFFALSE 74307
// exit ;
74305: GO 74352
// for i in tmp do
74307: LD_ADDR_VAR 0 3
74311: PUSH
74312: LD_VAR 0 5
74316: PUSH
74317: FOR_IN
74318: IFFALSE 74350
// begin result := EnemyInRange ( i , 22 ) ;
74320: LD_ADDR_VAR 0 2
74324: PUSH
74325: LD_VAR 0 3
74329: PPUSH
74330: LD_INT 22
74332: PPUSH
74333: CALL 71939 0 2
74337: ST_TO_ADDR
// if result then
74338: LD_VAR 0 2
74342: IFFALSE 74348
// exit ;
74344: POP
74345: POP
74346: GO 74352
// end ;
74348: GO 74317
74350: POP
74351: POP
// end ;
74352: LD_VAR 0 2
74356: RET
// export function FilterByTag ( units , tag ) ; begin
74357: LD_INT 0
74359: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74360: LD_ADDR_VAR 0 3
74364: PUSH
74365: LD_VAR 0 1
74369: PPUSH
74370: LD_INT 120
74372: PUSH
74373: LD_VAR 0 2
74377: PUSH
74378: EMPTY
74379: LIST
74380: LIST
74381: PPUSH
74382: CALL_OW 72
74386: ST_TO_ADDR
// end ;
74387: LD_VAR 0 3
74391: RET
// export function IsDriver ( un ) ; begin
74392: LD_INT 0
74394: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74395: LD_ADDR_VAR 0 2
74399: PUSH
74400: LD_VAR 0 1
74404: PUSH
74405: LD_INT 55
74407: PUSH
74408: EMPTY
74409: LIST
74410: PPUSH
74411: CALL_OW 69
74415: IN
74416: ST_TO_ADDR
// end ;
74417: LD_VAR 0 2
74421: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74422: LD_INT 0
74424: PPUSH
74425: PPUSH
// list := [ ] ;
74426: LD_ADDR_VAR 0 5
74430: PUSH
74431: EMPTY
74432: ST_TO_ADDR
// case d of 0 :
74433: LD_VAR 0 3
74437: PUSH
74438: LD_INT 0
74440: DOUBLE
74441: EQUAL
74442: IFTRUE 74446
74444: GO 74579
74446: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74447: LD_ADDR_VAR 0 5
74451: PUSH
74452: LD_VAR 0 1
74456: PUSH
74457: LD_INT 4
74459: MINUS
74460: PUSH
74461: LD_VAR 0 2
74465: PUSH
74466: LD_INT 4
74468: MINUS
74469: PUSH
74470: LD_INT 2
74472: PUSH
74473: EMPTY
74474: LIST
74475: LIST
74476: LIST
74477: PUSH
74478: LD_VAR 0 1
74482: PUSH
74483: LD_INT 3
74485: MINUS
74486: PUSH
74487: LD_VAR 0 2
74491: PUSH
74492: LD_INT 1
74494: PUSH
74495: EMPTY
74496: LIST
74497: LIST
74498: LIST
74499: PUSH
74500: LD_VAR 0 1
74504: PUSH
74505: LD_INT 4
74507: PLUS
74508: PUSH
74509: LD_VAR 0 2
74513: PUSH
74514: LD_INT 4
74516: PUSH
74517: EMPTY
74518: LIST
74519: LIST
74520: LIST
74521: PUSH
74522: LD_VAR 0 1
74526: PUSH
74527: LD_INT 3
74529: PLUS
74530: PUSH
74531: LD_VAR 0 2
74535: PUSH
74536: LD_INT 3
74538: PLUS
74539: PUSH
74540: LD_INT 5
74542: PUSH
74543: EMPTY
74544: LIST
74545: LIST
74546: LIST
74547: PUSH
74548: LD_VAR 0 1
74552: PUSH
74553: LD_VAR 0 2
74557: PUSH
74558: LD_INT 4
74560: PLUS
74561: PUSH
74562: LD_INT 0
74564: PUSH
74565: EMPTY
74566: LIST
74567: LIST
74568: LIST
74569: PUSH
74570: EMPTY
74571: LIST
74572: LIST
74573: LIST
74574: LIST
74575: LIST
74576: ST_TO_ADDR
// end ; 1 :
74577: GO 75277
74579: LD_INT 1
74581: DOUBLE
74582: EQUAL
74583: IFTRUE 74587
74585: GO 74720
74587: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74588: LD_ADDR_VAR 0 5
74592: PUSH
74593: LD_VAR 0 1
74597: PUSH
74598: LD_VAR 0 2
74602: PUSH
74603: LD_INT 4
74605: MINUS
74606: PUSH
74607: LD_INT 3
74609: PUSH
74610: EMPTY
74611: LIST
74612: LIST
74613: LIST
74614: PUSH
74615: LD_VAR 0 1
74619: PUSH
74620: LD_INT 3
74622: MINUS
74623: PUSH
74624: LD_VAR 0 2
74628: PUSH
74629: LD_INT 3
74631: MINUS
74632: PUSH
74633: LD_INT 2
74635: PUSH
74636: EMPTY
74637: LIST
74638: LIST
74639: LIST
74640: PUSH
74641: LD_VAR 0 1
74645: PUSH
74646: LD_INT 4
74648: MINUS
74649: PUSH
74650: LD_VAR 0 2
74654: PUSH
74655: LD_INT 1
74657: PUSH
74658: EMPTY
74659: LIST
74660: LIST
74661: LIST
74662: PUSH
74663: LD_VAR 0 1
74667: PUSH
74668: LD_VAR 0 2
74672: PUSH
74673: LD_INT 3
74675: PLUS
74676: PUSH
74677: LD_INT 0
74679: PUSH
74680: EMPTY
74681: LIST
74682: LIST
74683: LIST
74684: PUSH
74685: LD_VAR 0 1
74689: PUSH
74690: LD_INT 4
74692: PLUS
74693: PUSH
74694: LD_VAR 0 2
74698: PUSH
74699: LD_INT 4
74701: PLUS
74702: PUSH
74703: LD_INT 5
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: LIST
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: LIST
74715: LIST
74716: LIST
74717: ST_TO_ADDR
// end ; 2 :
74718: GO 75277
74720: LD_INT 2
74722: DOUBLE
74723: EQUAL
74724: IFTRUE 74728
74726: GO 74857
74728: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74729: LD_ADDR_VAR 0 5
74733: PUSH
74734: LD_VAR 0 1
74738: PUSH
74739: LD_VAR 0 2
74743: PUSH
74744: LD_INT 3
74746: MINUS
74747: PUSH
74748: LD_INT 3
74750: PUSH
74751: EMPTY
74752: LIST
74753: LIST
74754: LIST
74755: PUSH
74756: LD_VAR 0 1
74760: PUSH
74761: LD_INT 4
74763: PLUS
74764: PUSH
74765: LD_VAR 0 2
74769: PUSH
74770: LD_INT 4
74772: PUSH
74773: EMPTY
74774: LIST
74775: LIST
74776: LIST
74777: PUSH
74778: LD_VAR 0 1
74782: PUSH
74783: LD_VAR 0 2
74787: PUSH
74788: LD_INT 4
74790: PLUS
74791: PUSH
74792: LD_INT 0
74794: PUSH
74795: EMPTY
74796: LIST
74797: LIST
74798: LIST
74799: PUSH
74800: LD_VAR 0 1
74804: PUSH
74805: LD_INT 3
74807: MINUS
74808: PUSH
74809: LD_VAR 0 2
74813: PUSH
74814: LD_INT 1
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: LIST
74821: PUSH
74822: LD_VAR 0 1
74826: PUSH
74827: LD_INT 4
74829: MINUS
74830: PUSH
74831: LD_VAR 0 2
74835: PUSH
74836: LD_INT 4
74838: MINUS
74839: PUSH
74840: LD_INT 2
74842: PUSH
74843: EMPTY
74844: LIST
74845: LIST
74846: LIST
74847: PUSH
74848: EMPTY
74849: LIST
74850: LIST
74851: LIST
74852: LIST
74853: LIST
74854: ST_TO_ADDR
// end ; 3 :
74855: GO 75277
74857: LD_INT 3
74859: DOUBLE
74860: EQUAL
74861: IFTRUE 74865
74863: GO 74998
74865: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74866: LD_ADDR_VAR 0 5
74870: PUSH
74871: LD_VAR 0 1
74875: PUSH
74876: LD_INT 3
74878: PLUS
74879: PUSH
74880: LD_VAR 0 2
74884: PUSH
74885: LD_INT 4
74887: PUSH
74888: EMPTY
74889: LIST
74890: LIST
74891: LIST
74892: PUSH
74893: LD_VAR 0 1
74897: PUSH
74898: LD_INT 4
74900: PLUS
74901: PUSH
74902: LD_VAR 0 2
74906: PUSH
74907: LD_INT 4
74909: PLUS
74910: PUSH
74911: LD_INT 5
74913: PUSH
74914: EMPTY
74915: LIST
74916: LIST
74917: LIST
74918: PUSH
74919: LD_VAR 0 1
74923: PUSH
74924: LD_INT 4
74926: MINUS
74927: PUSH
74928: LD_VAR 0 2
74932: PUSH
74933: LD_INT 1
74935: PUSH
74936: EMPTY
74937: LIST
74938: LIST
74939: LIST
74940: PUSH
74941: LD_VAR 0 1
74945: PUSH
74946: LD_VAR 0 2
74950: PUSH
74951: LD_INT 4
74953: MINUS
74954: PUSH
74955: LD_INT 3
74957: PUSH
74958: EMPTY
74959: LIST
74960: LIST
74961: LIST
74962: PUSH
74963: LD_VAR 0 1
74967: PUSH
74968: LD_INT 3
74970: MINUS
74971: PUSH
74972: LD_VAR 0 2
74976: PUSH
74977: LD_INT 3
74979: MINUS
74980: PUSH
74981: LD_INT 2
74983: PUSH
74984: EMPTY
74985: LIST
74986: LIST
74987: LIST
74988: PUSH
74989: EMPTY
74990: LIST
74991: LIST
74992: LIST
74993: LIST
74994: LIST
74995: ST_TO_ADDR
// end ; 4 :
74996: GO 75277
74998: LD_INT 4
75000: DOUBLE
75001: EQUAL
75002: IFTRUE 75006
75004: GO 75139
75006: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75007: LD_ADDR_VAR 0 5
75011: PUSH
75012: LD_VAR 0 1
75016: PUSH
75017: LD_VAR 0 2
75021: PUSH
75022: LD_INT 4
75024: PLUS
75025: PUSH
75026: LD_INT 0
75028: PUSH
75029: EMPTY
75030: LIST
75031: LIST
75032: LIST
75033: PUSH
75034: LD_VAR 0 1
75038: PUSH
75039: LD_INT 3
75041: PLUS
75042: PUSH
75043: LD_VAR 0 2
75047: PUSH
75048: LD_INT 3
75050: PLUS
75051: PUSH
75052: LD_INT 5
75054: PUSH
75055: EMPTY
75056: LIST
75057: LIST
75058: LIST
75059: PUSH
75060: LD_VAR 0 1
75064: PUSH
75065: LD_INT 4
75067: PLUS
75068: PUSH
75069: LD_VAR 0 2
75073: PUSH
75074: LD_INT 4
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: LIST
75081: PUSH
75082: LD_VAR 0 1
75086: PUSH
75087: LD_VAR 0 2
75091: PUSH
75092: LD_INT 3
75094: MINUS
75095: PUSH
75096: LD_INT 3
75098: PUSH
75099: EMPTY
75100: LIST
75101: LIST
75102: LIST
75103: PUSH
75104: LD_VAR 0 1
75108: PUSH
75109: LD_INT 4
75111: MINUS
75112: PUSH
75113: LD_VAR 0 2
75117: PUSH
75118: LD_INT 4
75120: MINUS
75121: PUSH
75122: LD_INT 2
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: LIST
75129: PUSH
75130: EMPTY
75131: LIST
75132: LIST
75133: LIST
75134: LIST
75135: LIST
75136: ST_TO_ADDR
// end ; 5 :
75137: GO 75277
75139: LD_INT 5
75141: DOUBLE
75142: EQUAL
75143: IFTRUE 75147
75145: GO 75276
75147: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75148: LD_ADDR_VAR 0 5
75152: PUSH
75153: LD_VAR 0 1
75157: PUSH
75158: LD_INT 4
75160: MINUS
75161: PUSH
75162: LD_VAR 0 2
75166: PUSH
75167: LD_INT 1
75169: PUSH
75170: EMPTY
75171: LIST
75172: LIST
75173: LIST
75174: PUSH
75175: LD_VAR 0 1
75179: PUSH
75180: LD_VAR 0 2
75184: PUSH
75185: LD_INT 4
75187: MINUS
75188: PUSH
75189: LD_INT 3
75191: PUSH
75192: EMPTY
75193: LIST
75194: LIST
75195: LIST
75196: PUSH
75197: LD_VAR 0 1
75201: PUSH
75202: LD_INT 4
75204: PLUS
75205: PUSH
75206: LD_VAR 0 2
75210: PUSH
75211: LD_INT 4
75213: PLUS
75214: PUSH
75215: LD_INT 5
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: LIST
75222: PUSH
75223: LD_VAR 0 1
75227: PUSH
75228: LD_INT 3
75230: PLUS
75231: PUSH
75232: LD_VAR 0 2
75236: PUSH
75237: LD_INT 4
75239: PUSH
75240: EMPTY
75241: LIST
75242: LIST
75243: LIST
75244: PUSH
75245: LD_VAR 0 1
75249: PUSH
75250: LD_VAR 0 2
75254: PUSH
75255: LD_INT 3
75257: PLUS
75258: PUSH
75259: LD_INT 0
75261: PUSH
75262: EMPTY
75263: LIST
75264: LIST
75265: LIST
75266: PUSH
75267: EMPTY
75268: LIST
75269: LIST
75270: LIST
75271: LIST
75272: LIST
75273: ST_TO_ADDR
// end ; end ;
75274: GO 75277
75276: POP
// result := list ;
75277: LD_ADDR_VAR 0 4
75281: PUSH
75282: LD_VAR 0 5
75286: ST_TO_ADDR
// end ;
75287: LD_VAR 0 4
75291: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75292: LD_INT 0
75294: PPUSH
75295: PPUSH
75296: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75297: LD_VAR 0 1
75301: NOT
75302: PUSH
75303: LD_VAR 0 2
75307: PUSH
75308: LD_INT 1
75310: PUSH
75311: LD_INT 2
75313: PUSH
75314: LD_INT 3
75316: PUSH
75317: LD_INT 4
75319: PUSH
75320: EMPTY
75321: LIST
75322: LIST
75323: LIST
75324: LIST
75325: IN
75326: NOT
75327: OR
75328: IFFALSE 75332
// exit ;
75330: GO 75415
// tmp := [ ] ;
75332: LD_ADDR_VAR 0 5
75336: PUSH
75337: EMPTY
75338: ST_TO_ADDR
// for i in units do
75339: LD_ADDR_VAR 0 4
75343: PUSH
75344: LD_VAR 0 1
75348: PUSH
75349: FOR_IN
75350: IFFALSE 75384
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75352: LD_ADDR_VAR 0 5
75356: PUSH
75357: LD_VAR 0 5
75361: PPUSH
75362: LD_VAR 0 4
75366: PPUSH
75367: LD_VAR 0 2
75371: PPUSH
75372: CALL_OW 259
75376: PPUSH
75377: CALL 76776 0 2
75381: ST_TO_ADDR
75382: GO 75349
75384: POP
75385: POP
// if not tmp then
75386: LD_VAR 0 5
75390: NOT
75391: IFFALSE 75395
// exit ;
75393: GO 75415
// result := SortListByListDesc ( units , tmp ) ;
75395: LD_ADDR_VAR 0 3
75399: PUSH
75400: LD_VAR 0 1
75404: PPUSH
75405: LD_VAR 0 5
75409: PPUSH
75410: CALL_OW 77
75414: ST_TO_ADDR
// end ;
75415: LD_VAR 0 3
75419: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75420: LD_INT 0
75422: PPUSH
75423: PPUSH
75424: PPUSH
// result := false ;
75425: LD_ADDR_VAR 0 3
75429: PUSH
75430: LD_INT 0
75432: ST_TO_ADDR
// if not building then
75433: LD_VAR 0 2
75437: NOT
75438: IFFALSE 75442
// exit ;
75440: GO 75580
// x := GetX ( building ) ;
75442: LD_ADDR_VAR 0 4
75446: PUSH
75447: LD_VAR 0 2
75451: PPUSH
75452: CALL_OW 250
75456: ST_TO_ADDR
// y := GetY ( building ) ;
75457: LD_ADDR_VAR 0 5
75461: PUSH
75462: LD_VAR 0 2
75466: PPUSH
75467: CALL_OW 251
75471: ST_TO_ADDR
// if not x or not y then
75472: LD_VAR 0 4
75476: NOT
75477: PUSH
75478: LD_VAR 0 5
75482: NOT
75483: OR
75484: IFFALSE 75488
// exit ;
75486: GO 75580
// if GetTaskList ( unit ) then
75488: LD_VAR 0 1
75492: PPUSH
75493: CALL_OW 437
75497: IFFALSE 75580
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75499: LD_STRING e
75501: PUSH
75502: LD_VAR 0 1
75506: PPUSH
75507: CALL_OW 437
75511: PUSH
75512: LD_INT 1
75514: ARRAY
75515: PUSH
75516: LD_INT 1
75518: ARRAY
75519: EQUAL
75520: PUSH
75521: LD_VAR 0 4
75525: PUSH
75526: LD_VAR 0 1
75530: PPUSH
75531: CALL_OW 437
75535: PUSH
75536: LD_INT 1
75538: ARRAY
75539: PUSH
75540: LD_INT 2
75542: ARRAY
75543: EQUAL
75544: AND
75545: PUSH
75546: LD_VAR 0 5
75550: PUSH
75551: LD_VAR 0 1
75555: PPUSH
75556: CALL_OW 437
75560: PUSH
75561: LD_INT 1
75563: ARRAY
75564: PUSH
75565: LD_INT 3
75567: ARRAY
75568: EQUAL
75569: AND
75570: IFFALSE 75580
// result := true end ;
75572: LD_ADDR_VAR 0 3
75576: PUSH
75577: LD_INT 1
75579: ST_TO_ADDR
// end ;
75580: LD_VAR 0 3
75584: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75585: LD_INT 0
75587: PPUSH
// result := false ;
75588: LD_ADDR_VAR 0 4
75592: PUSH
75593: LD_INT 0
75595: ST_TO_ADDR
// if GetTaskList ( unit ) then
75596: LD_VAR 0 1
75600: PPUSH
75601: CALL_OW 437
75605: IFFALSE 75688
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75607: LD_STRING M
75609: PUSH
75610: LD_VAR 0 1
75614: PPUSH
75615: CALL_OW 437
75619: PUSH
75620: LD_INT 1
75622: ARRAY
75623: PUSH
75624: LD_INT 1
75626: ARRAY
75627: EQUAL
75628: PUSH
75629: LD_VAR 0 2
75633: PUSH
75634: LD_VAR 0 1
75638: PPUSH
75639: CALL_OW 437
75643: PUSH
75644: LD_INT 1
75646: ARRAY
75647: PUSH
75648: LD_INT 2
75650: ARRAY
75651: EQUAL
75652: AND
75653: PUSH
75654: LD_VAR 0 3
75658: PUSH
75659: LD_VAR 0 1
75663: PPUSH
75664: CALL_OW 437
75668: PUSH
75669: LD_INT 1
75671: ARRAY
75672: PUSH
75673: LD_INT 3
75675: ARRAY
75676: EQUAL
75677: AND
75678: IFFALSE 75688
// result := true ;
75680: LD_ADDR_VAR 0 4
75684: PUSH
75685: LD_INT 1
75687: ST_TO_ADDR
// end ; end ;
75688: LD_VAR 0 4
75692: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75693: LD_INT 0
75695: PPUSH
75696: PPUSH
75697: PPUSH
75698: PPUSH
// if not unit or not area then
75699: LD_VAR 0 1
75703: NOT
75704: PUSH
75705: LD_VAR 0 2
75709: NOT
75710: OR
75711: IFFALSE 75715
// exit ;
75713: GO 75879
// tmp := AreaToList ( area , i ) ;
75715: LD_ADDR_VAR 0 6
75719: PUSH
75720: LD_VAR 0 2
75724: PPUSH
75725: LD_VAR 0 5
75729: PPUSH
75730: CALL_OW 517
75734: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75735: LD_ADDR_VAR 0 5
75739: PUSH
75740: DOUBLE
75741: LD_INT 1
75743: DEC
75744: ST_TO_ADDR
75745: LD_VAR 0 6
75749: PUSH
75750: LD_INT 1
75752: ARRAY
75753: PUSH
75754: FOR_TO
75755: IFFALSE 75877
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75757: LD_ADDR_VAR 0 7
75761: PUSH
75762: LD_VAR 0 6
75766: PUSH
75767: LD_INT 1
75769: ARRAY
75770: PUSH
75771: LD_VAR 0 5
75775: ARRAY
75776: PUSH
75777: LD_VAR 0 6
75781: PUSH
75782: LD_INT 2
75784: ARRAY
75785: PUSH
75786: LD_VAR 0 5
75790: ARRAY
75791: PUSH
75792: EMPTY
75793: LIST
75794: LIST
75795: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75796: LD_VAR 0 7
75800: PUSH
75801: LD_INT 1
75803: ARRAY
75804: PPUSH
75805: LD_VAR 0 7
75809: PUSH
75810: LD_INT 2
75812: ARRAY
75813: PPUSH
75814: CALL_OW 428
75818: PUSH
75819: LD_INT 0
75821: EQUAL
75822: IFFALSE 75875
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75824: LD_VAR 0 1
75828: PPUSH
75829: LD_VAR 0 7
75833: PUSH
75834: LD_INT 1
75836: ARRAY
75837: PPUSH
75838: LD_VAR 0 7
75842: PUSH
75843: LD_INT 2
75845: ARRAY
75846: PPUSH
75847: LD_VAR 0 3
75851: PPUSH
75852: CALL_OW 48
// result := IsPlaced ( unit ) ;
75856: LD_ADDR_VAR 0 4
75860: PUSH
75861: LD_VAR 0 1
75865: PPUSH
75866: CALL_OW 305
75870: ST_TO_ADDR
// exit ;
75871: POP
75872: POP
75873: GO 75879
// end ; end ;
75875: GO 75754
75877: POP
75878: POP
// end ;
75879: LD_VAR 0 4
75883: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75884: LD_INT 0
75886: PPUSH
75887: PPUSH
75888: PPUSH
// if not side or side > 8 then
75889: LD_VAR 0 1
75893: NOT
75894: PUSH
75895: LD_VAR 0 1
75899: PUSH
75900: LD_INT 8
75902: GREATER
75903: OR
75904: IFFALSE 75908
// exit ;
75906: GO 76095
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75908: LD_ADDR_VAR 0 4
75912: PUSH
75913: LD_INT 22
75915: PUSH
75916: LD_VAR 0 1
75920: PUSH
75921: EMPTY
75922: LIST
75923: LIST
75924: PUSH
75925: LD_INT 21
75927: PUSH
75928: LD_INT 3
75930: PUSH
75931: EMPTY
75932: LIST
75933: LIST
75934: PUSH
75935: EMPTY
75936: LIST
75937: LIST
75938: PPUSH
75939: CALL_OW 69
75943: ST_TO_ADDR
// if not tmp then
75944: LD_VAR 0 4
75948: NOT
75949: IFFALSE 75953
// exit ;
75951: GO 76095
// enable_addtolog := true ;
75953: LD_ADDR_OWVAR 81
75957: PUSH
75958: LD_INT 1
75960: ST_TO_ADDR
// AddToLog ( [ ) ;
75961: LD_STRING [
75963: PPUSH
75964: CALL_OW 561
// for i in tmp do
75968: LD_ADDR_VAR 0 3
75972: PUSH
75973: LD_VAR 0 4
75977: PUSH
75978: FOR_IN
75979: IFFALSE 76086
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75981: LD_STRING [
75983: PUSH
75984: LD_VAR 0 3
75988: PPUSH
75989: CALL_OW 266
75993: STR
75994: PUSH
75995: LD_STRING , 
75997: STR
75998: PUSH
75999: LD_VAR 0 3
76003: PPUSH
76004: CALL_OW 250
76008: STR
76009: PUSH
76010: LD_STRING , 
76012: STR
76013: PUSH
76014: LD_VAR 0 3
76018: PPUSH
76019: CALL_OW 251
76023: STR
76024: PUSH
76025: LD_STRING , 
76027: STR
76028: PUSH
76029: LD_VAR 0 3
76033: PPUSH
76034: CALL_OW 254
76038: STR
76039: PUSH
76040: LD_STRING , 
76042: STR
76043: PUSH
76044: LD_VAR 0 3
76048: PPUSH
76049: LD_INT 1
76051: PPUSH
76052: CALL_OW 268
76056: STR
76057: PUSH
76058: LD_STRING , 
76060: STR
76061: PUSH
76062: LD_VAR 0 3
76066: PPUSH
76067: LD_INT 2
76069: PPUSH
76070: CALL_OW 268
76074: STR
76075: PUSH
76076: LD_STRING ],
76078: STR
76079: PPUSH
76080: CALL_OW 561
// end ;
76084: GO 75978
76086: POP
76087: POP
// AddToLog ( ]; ) ;
76088: LD_STRING ];
76090: PPUSH
76091: CALL_OW 561
// end ;
76095: LD_VAR 0 2
76099: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76100: LD_INT 0
76102: PPUSH
76103: PPUSH
76104: PPUSH
76105: PPUSH
76106: PPUSH
// if not area or not rate or not max then
76107: LD_VAR 0 1
76111: NOT
76112: PUSH
76113: LD_VAR 0 2
76117: NOT
76118: OR
76119: PUSH
76120: LD_VAR 0 4
76124: NOT
76125: OR
76126: IFFALSE 76130
// exit ;
76128: GO 76319
// while 1 do
76130: LD_INT 1
76132: IFFALSE 76319
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76134: LD_ADDR_VAR 0 9
76138: PUSH
76139: LD_VAR 0 1
76143: PPUSH
76144: LD_INT 1
76146: PPUSH
76147: CALL_OW 287
76151: PUSH
76152: LD_INT 10
76154: MUL
76155: ST_TO_ADDR
// r := rate / 10 ;
76156: LD_ADDR_VAR 0 7
76160: PUSH
76161: LD_VAR 0 2
76165: PUSH
76166: LD_INT 10
76168: DIVREAL
76169: ST_TO_ADDR
// time := 1 1$00 ;
76170: LD_ADDR_VAR 0 8
76174: PUSH
76175: LD_INT 2100
76177: ST_TO_ADDR
// if amount < min then
76178: LD_VAR 0 9
76182: PUSH
76183: LD_VAR 0 3
76187: LESS
76188: IFFALSE 76206
// r := r * 2 else
76190: LD_ADDR_VAR 0 7
76194: PUSH
76195: LD_VAR 0 7
76199: PUSH
76200: LD_INT 2
76202: MUL
76203: ST_TO_ADDR
76204: GO 76232
// if amount > max then
76206: LD_VAR 0 9
76210: PUSH
76211: LD_VAR 0 4
76215: GREATER
76216: IFFALSE 76232
// r := r / 2 ;
76218: LD_ADDR_VAR 0 7
76222: PUSH
76223: LD_VAR 0 7
76227: PUSH
76228: LD_INT 2
76230: DIVREAL
76231: ST_TO_ADDR
// time := time / r ;
76232: LD_ADDR_VAR 0 8
76236: PUSH
76237: LD_VAR 0 8
76241: PUSH
76242: LD_VAR 0 7
76246: DIVREAL
76247: ST_TO_ADDR
// if time < 0 then
76248: LD_VAR 0 8
76252: PUSH
76253: LD_INT 0
76255: LESS
76256: IFFALSE 76273
// time := time * - 1 ;
76258: LD_ADDR_VAR 0 8
76262: PUSH
76263: LD_VAR 0 8
76267: PUSH
76268: LD_INT 1
76270: NEG
76271: MUL
76272: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76273: LD_VAR 0 8
76277: PUSH
76278: LD_INT 35
76280: PPUSH
76281: LD_INT 875
76283: PPUSH
76284: CALL_OW 12
76288: PLUS
76289: PPUSH
76290: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76294: LD_INT 1
76296: PPUSH
76297: LD_INT 5
76299: PPUSH
76300: CALL_OW 12
76304: PPUSH
76305: LD_VAR 0 1
76309: PPUSH
76310: LD_INT 1
76312: PPUSH
76313: CALL_OW 55
// end ;
76317: GO 76130
// end ;
76319: LD_VAR 0 5
76323: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76324: LD_INT 0
76326: PPUSH
76327: PPUSH
76328: PPUSH
76329: PPUSH
76330: PPUSH
76331: PPUSH
76332: PPUSH
76333: PPUSH
// if not turrets or not factories then
76334: LD_VAR 0 1
76338: NOT
76339: PUSH
76340: LD_VAR 0 2
76344: NOT
76345: OR
76346: IFFALSE 76350
// exit ;
76348: GO 76657
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76350: LD_ADDR_VAR 0 10
76354: PUSH
76355: LD_INT 5
76357: PUSH
76358: LD_INT 6
76360: PUSH
76361: EMPTY
76362: LIST
76363: LIST
76364: PUSH
76365: LD_INT 2
76367: PUSH
76368: LD_INT 4
76370: PUSH
76371: EMPTY
76372: LIST
76373: LIST
76374: PUSH
76375: LD_INT 3
76377: PUSH
76378: LD_INT 5
76380: PUSH
76381: EMPTY
76382: LIST
76383: LIST
76384: PUSH
76385: EMPTY
76386: LIST
76387: LIST
76388: LIST
76389: PUSH
76390: LD_INT 24
76392: PUSH
76393: LD_INT 25
76395: PUSH
76396: EMPTY
76397: LIST
76398: LIST
76399: PUSH
76400: LD_INT 23
76402: PUSH
76403: LD_INT 27
76405: PUSH
76406: EMPTY
76407: LIST
76408: LIST
76409: PUSH
76410: EMPTY
76411: LIST
76412: LIST
76413: PUSH
76414: LD_INT 42
76416: PUSH
76417: LD_INT 43
76419: PUSH
76420: EMPTY
76421: LIST
76422: LIST
76423: PUSH
76424: LD_INT 44
76426: PUSH
76427: LD_INT 46
76429: PUSH
76430: EMPTY
76431: LIST
76432: LIST
76433: PUSH
76434: LD_INT 45
76436: PUSH
76437: LD_INT 47
76439: PUSH
76440: EMPTY
76441: LIST
76442: LIST
76443: PUSH
76444: EMPTY
76445: LIST
76446: LIST
76447: LIST
76448: PUSH
76449: EMPTY
76450: LIST
76451: LIST
76452: LIST
76453: ST_TO_ADDR
// result := [ ] ;
76454: LD_ADDR_VAR 0 3
76458: PUSH
76459: EMPTY
76460: ST_TO_ADDR
// for i in turrets do
76461: LD_ADDR_VAR 0 4
76465: PUSH
76466: LD_VAR 0 1
76470: PUSH
76471: FOR_IN
76472: IFFALSE 76655
// begin nat := GetNation ( i ) ;
76474: LD_ADDR_VAR 0 7
76478: PUSH
76479: LD_VAR 0 4
76483: PPUSH
76484: CALL_OW 248
76488: ST_TO_ADDR
// weapon := 0 ;
76489: LD_ADDR_VAR 0 8
76493: PUSH
76494: LD_INT 0
76496: ST_TO_ADDR
// if not nat then
76497: LD_VAR 0 7
76501: NOT
76502: IFFALSE 76506
// continue ;
76504: GO 76471
// for j in list [ nat ] do
76506: LD_ADDR_VAR 0 5
76510: PUSH
76511: LD_VAR 0 10
76515: PUSH
76516: LD_VAR 0 7
76520: ARRAY
76521: PUSH
76522: FOR_IN
76523: IFFALSE 76564
// if GetBWeapon ( i ) = j [ 1 ] then
76525: LD_VAR 0 4
76529: PPUSH
76530: CALL_OW 269
76534: PUSH
76535: LD_VAR 0 5
76539: PUSH
76540: LD_INT 1
76542: ARRAY
76543: EQUAL
76544: IFFALSE 76562
// begin weapon := j [ 2 ] ;
76546: LD_ADDR_VAR 0 8
76550: PUSH
76551: LD_VAR 0 5
76555: PUSH
76556: LD_INT 2
76558: ARRAY
76559: ST_TO_ADDR
// break ;
76560: GO 76564
// end ;
76562: GO 76522
76564: POP
76565: POP
// if not weapon then
76566: LD_VAR 0 8
76570: NOT
76571: IFFALSE 76575
// continue ;
76573: GO 76471
// for k in factories do
76575: LD_ADDR_VAR 0 6
76579: PUSH
76580: LD_VAR 0 2
76584: PUSH
76585: FOR_IN
76586: IFFALSE 76651
// begin weapons := AvailableWeaponList ( k ) ;
76588: LD_ADDR_VAR 0 9
76592: PUSH
76593: LD_VAR 0 6
76597: PPUSH
76598: CALL_OW 478
76602: ST_TO_ADDR
// if not weapons then
76603: LD_VAR 0 9
76607: NOT
76608: IFFALSE 76612
// continue ;
76610: GO 76585
// if weapon in weapons then
76612: LD_VAR 0 8
76616: PUSH
76617: LD_VAR 0 9
76621: IN
76622: IFFALSE 76649
// begin result := [ i , weapon ] ;
76624: LD_ADDR_VAR 0 3
76628: PUSH
76629: LD_VAR 0 4
76633: PUSH
76634: LD_VAR 0 8
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: ST_TO_ADDR
// exit ;
76643: POP
76644: POP
76645: POP
76646: POP
76647: GO 76657
// end ; end ;
76649: GO 76585
76651: POP
76652: POP
// end ;
76653: GO 76471
76655: POP
76656: POP
// end ;
76657: LD_VAR 0 3
76661: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76662: LD_INT 0
76664: PPUSH
// if not side or side > 8 then
76665: LD_VAR 0 3
76669: NOT
76670: PUSH
76671: LD_VAR 0 3
76675: PUSH
76676: LD_INT 8
76678: GREATER
76679: OR
76680: IFFALSE 76684
// exit ;
76682: GO 76743
// if not range then
76684: LD_VAR 0 4
76688: NOT
76689: IFFALSE 76700
// range := - 12 ;
76691: LD_ADDR_VAR 0 4
76695: PUSH
76696: LD_INT 12
76698: NEG
76699: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76700: LD_VAR 0 1
76704: PPUSH
76705: LD_VAR 0 2
76709: PPUSH
76710: LD_VAR 0 3
76714: PPUSH
76715: LD_VAR 0 4
76719: PPUSH
76720: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76724: LD_VAR 0 1
76728: PPUSH
76729: LD_VAR 0 2
76733: PPUSH
76734: LD_VAR 0 3
76738: PPUSH
76739: CALL_OW 331
// end ;
76743: LD_VAR 0 5
76747: RET
// export function Video ( mode ) ; begin
76748: LD_INT 0
76750: PPUSH
// ingame_video = mode ;
76751: LD_ADDR_OWVAR 52
76755: PUSH
76756: LD_VAR 0 1
76760: ST_TO_ADDR
// interface_hidden = mode ;
76761: LD_ADDR_OWVAR 54
76765: PUSH
76766: LD_VAR 0 1
76770: ST_TO_ADDR
// end ;
76771: LD_VAR 0 2
76775: RET
// export function Join ( array , element ) ; begin
76776: LD_INT 0
76778: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76779: LD_ADDR_VAR 0 3
76783: PUSH
76784: LD_VAR 0 1
76788: PPUSH
76789: LD_VAR 0 1
76793: PUSH
76794: LD_INT 1
76796: PLUS
76797: PPUSH
76798: LD_VAR 0 2
76802: PPUSH
76803: CALL_OW 1
76807: ST_TO_ADDR
// end ;
76808: LD_VAR 0 3
76812: RET
// export function JoinUnion ( array , element ) ; begin
76813: LD_INT 0
76815: PPUSH
// result := array union element ;
76816: LD_ADDR_VAR 0 3
76820: PUSH
76821: LD_VAR 0 1
76825: PUSH
76826: LD_VAR 0 2
76830: UNION
76831: ST_TO_ADDR
// end ;
76832: LD_VAR 0 3
76836: RET
// export function GetBehemoths ( side ) ; begin
76837: LD_INT 0
76839: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76840: LD_ADDR_VAR 0 2
76844: PUSH
76845: LD_INT 22
76847: PUSH
76848: LD_VAR 0 1
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: PUSH
76857: LD_INT 31
76859: PUSH
76860: LD_INT 25
76862: PUSH
76863: EMPTY
76864: LIST
76865: LIST
76866: PUSH
76867: EMPTY
76868: LIST
76869: LIST
76870: PPUSH
76871: CALL_OW 69
76875: ST_TO_ADDR
// end ;
76876: LD_VAR 0 2
76880: RET
// export function Shuffle ( array ) ; var i , index ; begin
76881: LD_INT 0
76883: PPUSH
76884: PPUSH
76885: PPUSH
// result := [ ] ;
76886: LD_ADDR_VAR 0 2
76890: PUSH
76891: EMPTY
76892: ST_TO_ADDR
// if not array then
76893: LD_VAR 0 1
76897: NOT
76898: IFFALSE 76902
// exit ;
76900: GO 77001
// Randomize ;
76902: CALL_OW 10
// for i = array downto 1 do
76906: LD_ADDR_VAR 0 3
76910: PUSH
76911: DOUBLE
76912: LD_VAR 0 1
76916: INC
76917: ST_TO_ADDR
76918: LD_INT 1
76920: PUSH
76921: FOR_DOWNTO
76922: IFFALSE 76999
// begin index := rand ( 1 , array ) ;
76924: LD_ADDR_VAR 0 4
76928: PUSH
76929: LD_INT 1
76931: PPUSH
76932: LD_VAR 0 1
76936: PPUSH
76937: CALL_OW 12
76941: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76942: LD_ADDR_VAR 0 2
76946: PUSH
76947: LD_VAR 0 2
76951: PPUSH
76952: LD_VAR 0 2
76956: PUSH
76957: LD_INT 1
76959: PLUS
76960: PPUSH
76961: LD_VAR 0 1
76965: PUSH
76966: LD_VAR 0 4
76970: ARRAY
76971: PPUSH
76972: CALL_OW 2
76976: ST_TO_ADDR
// array := Delete ( array , index ) ;
76977: LD_ADDR_VAR 0 1
76981: PUSH
76982: LD_VAR 0 1
76986: PPUSH
76987: LD_VAR 0 4
76991: PPUSH
76992: CALL_OW 3
76996: ST_TO_ADDR
// end ;
76997: GO 76921
76999: POP
77000: POP
// end ;
77001: LD_VAR 0 2
77005: RET
// export function GetBaseMaterials ( base ) ; begin
77006: LD_INT 0
77008: PPUSH
// result := [ 0 , 0 , 0 ] ;
77009: LD_ADDR_VAR 0 2
77013: PUSH
77014: LD_INT 0
77016: PUSH
77017: LD_INT 0
77019: PUSH
77020: LD_INT 0
77022: PUSH
77023: EMPTY
77024: LIST
77025: LIST
77026: LIST
77027: ST_TO_ADDR
// if not base then
77028: LD_VAR 0 1
77032: NOT
77033: IFFALSE 77037
// exit ;
77035: GO 77086
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77037: LD_ADDR_VAR 0 2
77041: PUSH
77042: LD_VAR 0 1
77046: PPUSH
77047: LD_INT 1
77049: PPUSH
77050: CALL_OW 275
77054: PUSH
77055: LD_VAR 0 1
77059: PPUSH
77060: LD_INT 2
77062: PPUSH
77063: CALL_OW 275
77067: PUSH
77068: LD_VAR 0 1
77072: PPUSH
77073: LD_INT 3
77075: PPUSH
77076: CALL_OW 275
77080: PUSH
77081: EMPTY
77082: LIST
77083: LIST
77084: LIST
77085: ST_TO_ADDR
// end ;
77086: LD_VAR 0 2
77090: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77091: LD_INT 0
77093: PPUSH
77094: PPUSH
// result := array ;
77095: LD_ADDR_VAR 0 3
77099: PUSH
77100: LD_VAR 0 1
77104: ST_TO_ADDR
// if size >= result then
77105: LD_VAR 0 2
77109: PUSH
77110: LD_VAR 0 3
77114: GREATEREQUAL
77115: IFFALSE 77119
// exit ;
77117: GO 77169
// if size then
77119: LD_VAR 0 2
77123: IFFALSE 77169
// for i := array downto size do
77125: LD_ADDR_VAR 0 4
77129: PUSH
77130: DOUBLE
77131: LD_VAR 0 1
77135: INC
77136: ST_TO_ADDR
77137: LD_VAR 0 2
77141: PUSH
77142: FOR_DOWNTO
77143: IFFALSE 77167
// result := Delete ( result , result ) ;
77145: LD_ADDR_VAR 0 3
77149: PUSH
77150: LD_VAR 0 3
77154: PPUSH
77155: LD_VAR 0 3
77159: PPUSH
77160: CALL_OW 3
77164: ST_TO_ADDR
77165: GO 77142
77167: POP
77168: POP
// end ;
77169: LD_VAR 0 3
77173: RET
// export function ComExit ( unit ) ; var tmp ; begin
77174: LD_INT 0
77176: PPUSH
77177: PPUSH
// if not IsInUnit ( unit ) then
77178: LD_VAR 0 1
77182: PPUSH
77183: CALL_OW 310
77187: NOT
77188: IFFALSE 77192
// exit ;
77190: GO 77252
// tmp := IsInUnit ( unit ) ;
77192: LD_ADDR_VAR 0 3
77196: PUSH
77197: LD_VAR 0 1
77201: PPUSH
77202: CALL_OW 310
77206: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77207: LD_VAR 0 3
77211: PPUSH
77212: CALL_OW 247
77216: PUSH
77217: LD_INT 2
77219: EQUAL
77220: IFFALSE 77233
// ComExitVehicle ( unit ) else
77222: LD_VAR 0 1
77226: PPUSH
77227: CALL_OW 121
77231: GO 77242
// ComExitBuilding ( unit ) ;
77233: LD_VAR 0 1
77237: PPUSH
77238: CALL_OW 122
// result := tmp ;
77242: LD_ADDR_VAR 0 2
77246: PUSH
77247: LD_VAR 0 3
77251: ST_TO_ADDR
// end ;
77252: LD_VAR 0 2
77256: RET
// export function ComExitAll ( units ) ; var i ; begin
77257: LD_INT 0
77259: PPUSH
77260: PPUSH
// if not units then
77261: LD_VAR 0 1
77265: NOT
77266: IFFALSE 77270
// exit ;
77268: GO 77296
// for i in units do
77270: LD_ADDR_VAR 0 3
77274: PUSH
77275: LD_VAR 0 1
77279: PUSH
77280: FOR_IN
77281: IFFALSE 77294
// ComExit ( i ) ;
77283: LD_VAR 0 3
77287: PPUSH
77288: CALL 77174 0 1
77292: GO 77280
77294: POP
77295: POP
// end ;
77296: LD_VAR 0 2
77300: RET
// export function ResetHc ; begin
77301: LD_INT 0
77303: PPUSH
// InitHc ;
77304: CALL_OW 19
// hc_importance := 0 ;
77308: LD_ADDR_OWVAR 32
77312: PUSH
77313: LD_INT 0
77315: ST_TO_ADDR
// end ;
77316: LD_VAR 0 1
77320: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77321: LD_INT 0
77323: PPUSH
77324: PPUSH
77325: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77326: LD_ADDR_VAR 0 6
77330: PUSH
77331: LD_VAR 0 1
77335: PUSH
77336: LD_VAR 0 3
77340: PLUS
77341: PUSH
77342: LD_INT 2
77344: DIV
77345: ST_TO_ADDR
// if _x < 0 then
77346: LD_VAR 0 6
77350: PUSH
77351: LD_INT 0
77353: LESS
77354: IFFALSE 77371
// _x := _x * - 1 ;
77356: LD_ADDR_VAR 0 6
77360: PUSH
77361: LD_VAR 0 6
77365: PUSH
77366: LD_INT 1
77368: NEG
77369: MUL
77370: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77371: LD_ADDR_VAR 0 7
77375: PUSH
77376: LD_VAR 0 2
77380: PUSH
77381: LD_VAR 0 4
77385: PLUS
77386: PUSH
77387: LD_INT 2
77389: DIV
77390: ST_TO_ADDR
// if _y < 0 then
77391: LD_VAR 0 7
77395: PUSH
77396: LD_INT 0
77398: LESS
77399: IFFALSE 77416
// _y := _y * - 1 ;
77401: LD_ADDR_VAR 0 7
77405: PUSH
77406: LD_VAR 0 7
77410: PUSH
77411: LD_INT 1
77413: NEG
77414: MUL
77415: ST_TO_ADDR
// result := [ _x , _y ] ;
77416: LD_ADDR_VAR 0 5
77420: PUSH
77421: LD_VAR 0 6
77425: PUSH
77426: LD_VAR 0 7
77430: PUSH
77431: EMPTY
77432: LIST
77433: LIST
77434: ST_TO_ADDR
// end ;
77435: LD_VAR 0 5
77439: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77440: LD_INT 0
77442: PPUSH
77443: PPUSH
77444: PPUSH
77445: PPUSH
// task := GetTaskList ( unit ) ;
77446: LD_ADDR_VAR 0 7
77450: PUSH
77451: LD_VAR 0 1
77455: PPUSH
77456: CALL_OW 437
77460: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77461: LD_VAR 0 7
77465: NOT
77466: PUSH
77467: LD_VAR 0 1
77471: PPUSH
77472: LD_VAR 0 2
77476: PPUSH
77477: CALL_OW 308
77481: NOT
77482: AND
77483: IFFALSE 77487
// exit ;
77485: GO 77605
// if IsInArea ( unit , area ) then
77487: LD_VAR 0 1
77491: PPUSH
77492: LD_VAR 0 2
77496: PPUSH
77497: CALL_OW 308
77501: IFFALSE 77519
// begin ComMoveToArea ( unit , goAway ) ;
77503: LD_VAR 0 1
77507: PPUSH
77508: LD_VAR 0 3
77512: PPUSH
77513: CALL_OW 113
// exit ;
77517: GO 77605
// end ; if task [ 1 ] [ 1 ] <> M then
77519: LD_VAR 0 7
77523: PUSH
77524: LD_INT 1
77526: ARRAY
77527: PUSH
77528: LD_INT 1
77530: ARRAY
77531: PUSH
77532: LD_STRING M
77534: NONEQUAL
77535: IFFALSE 77539
// exit ;
77537: GO 77605
// x := task [ 1 ] [ 2 ] ;
77539: LD_ADDR_VAR 0 5
77543: PUSH
77544: LD_VAR 0 7
77548: PUSH
77549: LD_INT 1
77551: ARRAY
77552: PUSH
77553: LD_INT 2
77555: ARRAY
77556: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77557: LD_ADDR_VAR 0 6
77561: PUSH
77562: LD_VAR 0 7
77566: PUSH
77567: LD_INT 1
77569: ARRAY
77570: PUSH
77571: LD_INT 3
77573: ARRAY
77574: ST_TO_ADDR
// if InArea ( x , y , area ) then
77575: LD_VAR 0 5
77579: PPUSH
77580: LD_VAR 0 6
77584: PPUSH
77585: LD_VAR 0 2
77589: PPUSH
77590: CALL_OW 309
77594: IFFALSE 77605
// ComStop ( unit ) ;
77596: LD_VAR 0 1
77600: PPUSH
77601: CALL_OW 141
// end ;
77605: LD_VAR 0 4
77609: RET
// export function Abs ( value ) ; begin
77610: LD_INT 0
77612: PPUSH
// result := value ;
77613: LD_ADDR_VAR 0 2
77617: PUSH
77618: LD_VAR 0 1
77622: ST_TO_ADDR
// if value < 0 then
77623: LD_VAR 0 1
77627: PUSH
77628: LD_INT 0
77630: LESS
77631: IFFALSE 77648
// result := value * - 1 ;
77633: LD_ADDR_VAR 0 2
77637: PUSH
77638: LD_VAR 0 1
77642: PUSH
77643: LD_INT 1
77645: NEG
77646: MUL
77647: ST_TO_ADDR
// end ;
77648: LD_VAR 0 2
77652: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77653: LD_INT 0
77655: PPUSH
77656: PPUSH
77657: PPUSH
77658: PPUSH
77659: PPUSH
77660: PPUSH
77661: PPUSH
77662: PPUSH
// if not unit or not building then
77663: LD_VAR 0 1
77667: NOT
77668: PUSH
77669: LD_VAR 0 2
77673: NOT
77674: OR
77675: IFFALSE 77679
// exit ;
77677: GO 77905
// x := GetX ( building ) ;
77679: LD_ADDR_VAR 0 4
77683: PUSH
77684: LD_VAR 0 2
77688: PPUSH
77689: CALL_OW 250
77693: ST_TO_ADDR
// y := GetY ( building ) ;
77694: LD_ADDR_VAR 0 6
77698: PUSH
77699: LD_VAR 0 2
77703: PPUSH
77704: CALL_OW 251
77708: ST_TO_ADDR
// d := GetDir ( building ) ;
77709: LD_ADDR_VAR 0 8
77713: PUSH
77714: LD_VAR 0 2
77718: PPUSH
77719: CALL_OW 254
77723: ST_TO_ADDR
// r := 4 ;
77724: LD_ADDR_VAR 0 9
77728: PUSH
77729: LD_INT 4
77731: ST_TO_ADDR
// for i := 1 to 5 do
77732: LD_ADDR_VAR 0 10
77736: PUSH
77737: DOUBLE
77738: LD_INT 1
77740: DEC
77741: ST_TO_ADDR
77742: LD_INT 5
77744: PUSH
77745: FOR_TO
77746: IFFALSE 77903
// begin _x := ShiftX ( x , d , r + i ) ;
77748: LD_ADDR_VAR 0 5
77752: PUSH
77753: LD_VAR 0 4
77757: PPUSH
77758: LD_VAR 0 8
77762: PPUSH
77763: LD_VAR 0 9
77767: PUSH
77768: LD_VAR 0 10
77772: PLUS
77773: PPUSH
77774: CALL_OW 272
77778: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77779: LD_ADDR_VAR 0 7
77783: PUSH
77784: LD_VAR 0 6
77788: PPUSH
77789: LD_VAR 0 8
77793: PPUSH
77794: LD_VAR 0 9
77798: PUSH
77799: LD_VAR 0 10
77803: PLUS
77804: PPUSH
77805: CALL_OW 273
77809: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77810: LD_VAR 0 5
77814: PPUSH
77815: LD_VAR 0 7
77819: PPUSH
77820: CALL_OW 488
77824: PUSH
77825: LD_VAR 0 5
77829: PPUSH
77830: LD_VAR 0 7
77834: PPUSH
77835: CALL_OW 428
77839: PPUSH
77840: CALL_OW 247
77844: PUSH
77845: LD_INT 3
77847: PUSH
77848: LD_INT 2
77850: PUSH
77851: EMPTY
77852: LIST
77853: LIST
77854: IN
77855: NOT
77856: AND
77857: IFFALSE 77901
// begin ComMoveXY ( unit , _x , _y ) ;
77859: LD_VAR 0 1
77863: PPUSH
77864: LD_VAR 0 5
77868: PPUSH
77869: LD_VAR 0 7
77873: PPUSH
77874: CALL_OW 111
// result := [ _x , _y ] ;
77878: LD_ADDR_VAR 0 3
77882: PUSH
77883: LD_VAR 0 5
77887: PUSH
77888: LD_VAR 0 7
77892: PUSH
77893: EMPTY
77894: LIST
77895: LIST
77896: ST_TO_ADDR
// exit ;
77897: POP
77898: POP
77899: GO 77905
// end ; end ;
77901: GO 77745
77903: POP
77904: POP
// end ;
77905: LD_VAR 0 3
77909: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77910: LD_INT 0
77912: PPUSH
77913: PPUSH
77914: PPUSH
// result := 0 ;
77915: LD_ADDR_VAR 0 3
77919: PUSH
77920: LD_INT 0
77922: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77923: LD_VAR 0 1
77927: PUSH
77928: LD_INT 0
77930: LESS
77931: PUSH
77932: LD_VAR 0 1
77936: PUSH
77937: LD_INT 8
77939: GREATER
77940: OR
77941: PUSH
77942: LD_VAR 0 2
77946: PUSH
77947: LD_INT 0
77949: LESS
77950: OR
77951: PUSH
77952: LD_VAR 0 2
77956: PUSH
77957: LD_INT 8
77959: GREATER
77960: OR
77961: IFFALSE 77965
// exit ;
77963: GO 78040
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77965: LD_ADDR_VAR 0 4
77969: PUSH
77970: LD_INT 22
77972: PUSH
77973: LD_VAR 0 2
77977: PUSH
77978: EMPTY
77979: LIST
77980: LIST
77981: PPUSH
77982: CALL_OW 69
77986: PUSH
77987: FOR_IN
77988: IFFALSE 78038
// begin un := UnitShoot ( i ) ;
77990: LD_ADDR_VAR 0 5
77994: PUSH
77995: LD_VAR 0 4
77999: PPUSH
78000: CALL_OW 504
78004: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78005: LD_VAR 0 5
78009: PPUSH
78010: CALL_OW 255
78014: PUSH
78015: LD_VAR 0 1
78019: EQUAL
78020: IFFALSE 78036
// begin result := un ;
78022: LD_ADDR_VAR 0 3
78026: PUSH
78027: LD_VAR 0 5
78031: ST_TO_ADDR
// exit ;
78032: POP
78033: POP
78034: GO 78040
// end ; end ;
78036: GO 77987
78038: POP
78039: POP
// end ;
78040: LD_VAR 0 3
78044: RET
// export function GetCargoBay ( units ) ; begin
78045: LD_INT 0
78047: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78048: LD_ADDR_VAR 0 2
78052: PUSH
78053: LD_VAR 0 1
78057: PPUSH
78058: LD_INT 2
78060: PUSH
78061: LD_INT 34
78063: PUSH
78064: LD_INT 12
78066: PUSH
78067: EMPTY
78068: LIST
78069: LIST
78070: PUSH
78071: LD_INT 34
78073: PUSH
78074: LD_INT 51
78076: PUSH
78077: EMPTY
78078: LIST
78079: LIST
78080: PUSH
78081: LD_INT 34
78083: PUSH
78084: LD_INT 32
78086: PUSH
78087: EMPTY
78088: LIST
78089: LIST
78090: PUSH
78091: LD_INT 34
78093: PUSH
78094: LD_INT 89
78096: PUSH
78097: EMPTY
78098: LIST
78099: LIST
78100: PUSH
78101: EMPTY
78102: LIST
78103: LIST
78104: LIST
78105: LIST
78106: LIST
78107: PPUSH
78108: CALL_OW 72
78112: ST_TO_ADDR
// end ;
78113: LD_VAR 0 2
78117: RET
// export function Negate ( value ) ; begin
78118: LD_INT 0
78120: PPUSH
// result := not value ;
78121: LD_ADDR_VAR 0 2
78125: PUSH
78126: LD_VAR 0 1
78130: NOT
78131: ST_TO_ADDR
// end ;
78132: LD_VAR 0 2
78136: RET
// export function Inc ( value ) ; begin
78137: LD_INT 0
78139: PPUSH
// result := value + 1 ;
78140: LD_ADDR_VAR 0 2
78144: PUSH
78145: LD_VAR 0 1
78149: PUSH
78150: LD_INT 1
78152: PLUS
78153: ST_TO_ADDR
// end ;
78154: LD_VAR 0 2
78158: RET
// export function Dec ( value ) ; begin
78159: LD_INT 0
78161: PPUSH
// result := value - 1 ;
78162: LD_ADDR_VAR 0 2
78166: PUSH
78167: LD_VAR 0 1
78171: PUSH
78172: LD_INT 1
78174: MINUS
78175: ST_TO_ADDR
// end ;
78176: LD_VAR 0 2
78180: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78181: LD_INT 0
78183: PPUSH
78184: PPUSH
78185: PPUSH
78186: PPUSH
78187: PPUSH
78188: PPUSH
78189: PPUSH
78190: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78191: LD_VAR 0 1
78195: PPUSH
78196: LD_VAR 0 2
78200: PPUSH
78201: CALL_OW 488
78205: NOT
78206: PUSH
78207: LD_VAR 0 3
78211: PPUSH
78212: LD_VAR 0 4
78216: PPUSH
78217: CALL_OW 488
78221: NOT
78222: OR
78223: IFFALSE 78236
// begin result := - 1 ;
78225: LD_ADDR_VAR 0 5
78229: PUSH
78230: LD_INT 1
78232: NEG
78233: ST_TO_ADDR
// exit ;
78234: GO 78471
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78236: LD_ADDR_VAR 0 12
78240: PUSH
78241: LD_VAR 0 1
78245: PPUSH
78246: LD_VAR 0 2
78250: PPUSH
78251: LD_VAR 0 3
78255: PPUSH
78256: LD_VAR 0 4
78260: PPUSH
78261: CALL 77321 0 4
78265: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78266: LD_ADDR_VAR 0 11
78270: PUSH
78271: LD_VAR 0 1
78275: PPUSH
78276: LD_VAR 0 2
78280: PPUSH
78281: LD_VAR 0 12
78285: PUSH
78286: LD_INT 1
78288: ARRAY
78289: PPUSH
78290: LD_VAR 0 12
78294: PUSH
78295: LD_INT 2
78297: ARRAY
78298: PPUSH
78299: CALL_OW 298
78303: ST_TO_ADDR
// distance := 9999 ;
78304: LD_ADDR_VAR 0 10
78308: PUSH
78309: LD_INT 9999
78311: ST_TO_ADDR
// for i := 0 to 5 do
78312: LD_ADDR_VAR 0 6
78316: PUSH
78317: DOUBLE
78318: LD_INT 0
78320: DEC
78321: ST_TO_ADDR
78322: LD_INT 5
78324: PUSH
78325: FOR_TO
78326: IFFALSE 78469
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78328: LD_ADDR_VAR 0 7
78332: PUSH
78333: LD_VAR 0 1
78337: PPUSH
78338: LD_VAR 0 6
78342: PPUSH
78343: LD_VAR 0 11
78347: PPUSH
78348: CALL_OW 272
78352: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78353: LD_ADDR_VAR 0 8
78357: PUSH
78358: LD_VAR 0 2
78362: PPUSH
78363: LD_VAR 0 6
78367: PPUSH
78368: LD_VAR 0 11
78372: PPUSH
78373: CALL_OW 273
78377: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78378: LD_VAR 0 7
78382: PPUSH
78383: LD_VAR 0 8
78387: PPUSH
78388: CALL_OW 488
78392: NOT
78393: IFFALSE 78397
// continue ;
78395: GO 78325
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78397: LD_ADDR_VAR 0 9
78401: PUSH
78402: LD_VAR 0 12
78406: PUSH
78407: LD_INT 1
78409: ARRAY
78410: PPUSH
78411: LD_VAR 0 12
78415: PUSH
78416: LD_INT 2
78418: ARRAY
78419: PPUSH
78420: LD_VAR 0 7
78424: PPUSH
78425: LD_VAR 0 8
78429: PPUSH
78430: CALL_OW 298
78434: ST_TO_ADDR
// if tmp < distance then
78435: LD_VAR 0 9
78439: PUSH
78440: LD_VAR 0 10
78444: LESS
78445: IFFALSE 78467
// begin result := i ;
78447: LD_ADDR_VAR 0 5
78451: PUSH
78452: LD_VAR 0 6
78456: ST_TO_ADDR
// distance := tmp ;
78457: LD_ADDR_VAR 0 10
78461: PUSH
78462: LD_VAR 0 9
78466: ST_TO_ADDR
// end ; end ;
78467: GO 78325
78469: POP
78470: POP
// end ;
78471: LD_VAR 0 5
78475: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78476: LD_INT 0
78478: PPUSH
78479: PPUSH
// if not driver or not IsInUnit ( driver ) then
78480: LD_VAR 0 1
78484: NOT
78485: PUSH
78486: LD_VAR 0 1
78490: PPUSH
78491: CALL_OW 310
78495: NOT
78496: OR
78497: IFFALSE 78501
// exit ;
78499: GO 78591
// vehicle := IsInUnit ( driver ) ;
78501: LD_ADDR_VAR 0 3
78505: PUSH
78506: LD_VAR 0 1
78510: PPUSH
78511: CALL_OW 310
78515: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78516: LD_VAR 0 1
78520: PPUSH
78521: LD_STRING \
78523: PUSH
78524: LD_INT 0
78526: PUSH
78527: LD_INT 0
78529: PUSH
78530: LD_INT 0
78532: PUSH
78533: LD_INT 0
78535: PUSH
78536: LD_INT 0
78538: PUSH
78539: LD_INT 0
78541: PUSH
78542: EMPTY
78543: LIST
78544: LIST
78545: LIST
78546: LIST
78547: LIST
78548: LIST
78549: LIST
78550: PUSH
78551: LD_STRING E
78553: PUSH
78554: LD_INT 0
78556: PUSH
78557: LD_INT 0
78559: PUSH
78560: LD_VAR 0 3
78564: PUSH
78565: LD_INT 0
78567: PUSH
78568: LD_INT 0
78570: PUSH
78571: LD_INT 0
78573: PUSH
78574: EMPTY
78575: LIST
78576: LIST
78577: LIST
78578: LIST
78579: LIST
78580: LIST
78581: LIST
78582: PUSH
78583: EMPTY
78584: LIST
78585: LIST
78586: PPUSH
78587: CALL_OW 446
// end ;
78591: LD_VAR 0 2
78595: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78596: LD_INT 0
78598: PPUSH
78599: PPUSH
// if not driver or not IsInUnit ( driver ) then
78600: LD_VAR 0 1
78604: NOT
78605: PUSH
78606: LD_VAR 0 1
78610: PPUSH
78611: CALL_OW 310
78615: NOT
78616: OR
78617: IFFALSE 78621
// exit ;
78619: GO 78711
// vehicle := IsInUnit ( driver ) ;
78621: LD_ADDR_VAR 0 3
78625: PUSH
78626: LD_VAR 0 1
78630: PPUSH
78631: CALL_OW 310
78635: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78636: LD_VAR 0 1
78640: PPUSH
78641: LD_STRING \
78643: PUSH
78644: LD_INT 0
78646: PUSH
78647: LD_INT 0
78649: PUSH
78650: LD_INT 0
78652: PUSH
78653: LD_INT 0
78655: PUSH
78656: LD_INT 0
78658: PUSH
78659: LD_INT 0
78661: PUSH
78662: EMPTY
78663: LIST
78664: LIST
78665: LIST
78666: LIST
78667: LIST
78668: LIST
78669: LIST
78670: PUSH
78671: LD_STRING E
78673: PUSH
78674: LD_INT 0
78676: PUSH
78677: LD_INT 0
78679: PUSH
78680: LD_VAR 0 3
78684: PUSH
78685: LD_INT 0
78687: PUSH
78688: LD_INT 0
78690: PUSH
78691: LD_INT 0
78693: PUSH
78694: EMPTY
78695: LIST
78696: LIST
78697: LIST
78698: LIST
78699: LIST
78700: LIST
78701: LIST
78702: PUSH
78703: EMPTY
78704: LIST
78705: LIST
78706: PPUSH
78707: CALL_OW 447
// end ;
78711: LD_VAR 0 2
78715: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78716: LD_INT 0
78718: PPUSH
78719: PPUSH
78720: PPUSH
// tmp := [ ] ;
78721: LD_ADDR_VAR 0 5
78725: PUSH
78726: EMPTY
78727: ST_TO_ADDR
// for i in units do
78728: LD_ADDR_VAR 0 4
78732: PUSH
78733: LD_VAR 0 1
78737: PUSH
78738: FOR_IN
78739: IFFALSE 78777
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78741: LD_ADDR_VAR 0 5
78745: PUSH
78746: LD_VAR 0 5
78750: PPUSH
78751: LD_VAR 0 5
78755: PUSH
78756: LD_INT 1
78758: PLUS
78759: PPUSH
78760: LD_VAR 0 4
78764: PPUSH
78765: CALL_OW 256
78769: PPUSH
78770: CALL_OW 2
78774: ST_TO_ADDR
78775: GO 78738
78777: POP
78778: POP
// if not tmp then
78779: LD_VAR 0 5
78783: NOT
78784: IFFALSE 78788
// exit ;
78786: GO 78836
// if asc then
78788: LD_VAR 0 2
78792: IFFALSE 78816
// result := SortListByListAsc ( units , tmp ) else
78794: LD_ADDR_VAR 0 3
78798: PUSH
78799: LD_VAR 0 1
78803: PPUSH
78804: LD_VAR 0 5
78808: PPUSH
78809: CALL_OW 76
78813: ST_TO_ADDR
78814: GO 78836
// result := SortListByListDesc ( units , tmp ) ;
78816: LD_ADDR_VAR 0 3
78820: PUSH
78821: LD_VAR 0 1
78825: PPUSH
78826: LD_VAR 0 5
78830: PPUSH
78831: CALL_OW 77
78835: ST_TO_ADDR
// end ;
78836: LD_VAR 0 3
78840: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78841: LD_INT 0
78843: PPUSH
78844: PPUSH
// task := GetTaskList ( mech ) ;
78845: LD_ADDR_VAR 0 4
78849: PUSH
78850: LD_VAR 0 1
78854: PPUSH
78855: CALL_OW 437
78859: ST_TO_ADDR
// if not task then
78860: LD_VAR 0 4
78864: NOT
78865: IFFALSE 78869
// exit ;
78867: GO 78911
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78869: LD_ADDR_VAR 0 3
78873: PUSH
78874: LD_VAR 0 4
78878: PUSH
78879: LD_INT 1
78881: ARRAY
78882: PUSH
78883: LD_INT 1
78885: ARRAY
78886: PUSH
78887: LD_STRING r
78889: EQUAL
78890: PUSH
78891: LD_VAR 0 4
78895: PUSH
78896: LD_INT 1
78898: ARRAY
78899: PUSH
78900: LD_INT 4
78902: ARRAY
78903: PUSH
78904: LD_VAR 0 2
78908: EQUAL
78909: AND
78910: ST_TO_ADDR
// end ;
78911: LD_VAR 0 3
78915: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78916: LD_INT 0
78918: PPUSH
// SetDir ( unit , d ) ;
78919: LD_VAR 0 1
78923: PPUSH
78924: LD_VAR 0 4
78928: PPUSH
78929: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78933: LD_VAR 0 1
78937: PPUSH
78938: LD_VAR 0 2
78942: PPUSH
78943: LD_VAR 0 3
78947: PPUSH
78948: LD_VAR 0 5
78952: PPUSH
78953: CALL_OW 48
// end ;
78957: LD_VAR 0 6
78961: RET
// export function ToNaturalNumber ( number ) ; begin
78962: LD_INT 0
78964: PPUSH
// result := number div 1 ;
78965: LD_ADDR_VAR 0 2
78969: PUSH
78970: LD_VAR 0 1
78974: PUSH
78975: LD_INT 1
78977: DIV
78978: ST_TO_ADDR
// if number < 0 then
78979: LD_VAR 0 1
78983: PUSH
78984: LD_INT 0
78986: LESS
78987: IFFALSE 78997
// result := 0 ;
78989: LD_ADDR_VAR 0 2
78993: PUSH
78994: LD_INT 0
78996: ST_TO_ADDR
// end ;
78997: LD_VAR 0 2
79001: RET
// export function SortByClass ( units , class ) ; var un ; begin
79002: LD_INT 0
79004: PPUSH
79005: PPUSH
// if not units or not class then
79006: LD_VAR 0 1
79010: NOT
79011: PUSH
79012: LD_VAR 0 2
79016: NOT
79017: OR
79018: IFFALSE 79022
// exit ;
79020: GO 79117
// result := [ ] ;
79022: LD_ADDR_VAR 0 3
79026: PUSH
79027: EMPTY
79028: ST_TO_ADDR
// for un in units do
79029: LD_ADDR_VAR 0 4
79033: PUSH
79034: LD_VAR 0 1
79038: PUSH
79039: FOR_IN
79040: IFFALSE 79115
// if GetClass ( un ) = class then
79042: LD_VAR 0 4
79046: PPUSH
79047: CALL_OW 257
79051: PUSH
79052: LD_VAR 0 2
79056: EQUAL
79057: IFFALSE 79084
// result := Insert ( result , 1 , un ) else
79059: LD_ADDR_VAR 0 3
79063: PUSH
79064: LD_VAR 0 3
79068: PPUSH
79069: LD_INT 1
79071: PPUSH
79072: LD_VAR 0 4
79076: PPUSH
79077: CALL_OW 2
79081: ST_TO_ADDR
79082: GO 79113
// result := Replace ( result , result + 1 , un ) ;
79084: LD_ADDR_VAR 0 3
79088: PUSH
79089: LD_VAR 0 3
79093: PPUSH
79094: LD_VAR 0 3
79098: PUSH
79099: LD_INT 1
79101: PLUS
79102: PPUSH
79103: LD_VAR 0 4
79107: PPUSH
79108: CALL_OW 1
79112: ST_TO_ADDR
79113: GO 79039
79115: POP
79116: POP
// end ;
79117: LD_VAR 0 3
79121: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79122: LD_INT 0
79124: PPUSH
79125: PPUSH
79126: PPUSH
79127: PPUSH
79128: PPUSH
79129: PPUSH
79130: PPUSH
// result := [ ] ;
79131: LD_ADDR_VAR 0 4
79135: PUSH
79136: EMPTY
79137: ST_TO_ADDR
// if x - r < 0 then
79138: LD_VAR 0 1
79142: PUSH
79143: LD_VAR 0 3
79147: MINUS
79148: PUSH
79149: LD_INT 0
79151: LESS
79152: IFFALSE 79164
// min_x := 0 else
79154: LD_ADDR_VAR 0 8
79158: PUSH
79159: LD_INT 0
79161: ST_TO_ADDR
79162: GO 79180
// min_x := x - r ;
79164: LD_ADDR_VAR 0 8
79168: PUSH
79169: LD_VAR 0 1
79173: PUSH
79174: LD_VAR 0 3
79178: MINUS
79179: ST_TO_ADDR
// if y - r < 0 then
79180: LD_VAR 0 2
79184: PUSH
79185: LD_VAR 0 3
79189: MINUS
79190: PUSH
79191: LD_INT 0
79193: LESS
79194: IFFALSE 79206
// min_y := 0 else
79196: LD_ADDR_VAR 0 7
79200: PUSH
79201: LD_INT 0
79203: ST_TO_ADDR
79204: GO 79222
// min_y := y - r ;
79206: LD_ADDR_VAR 0 7
79210: PUSH
79211: LD_VAR 0 2
79215: PUSH
79216: LD_VAR 0 3
79220: MINUS
79221: ST_TO_ADDR
// max_x := x + r ;
79222: LD_ADDR_VAR 0 9
79226: PUSH
79227: LD_VAR 0 1
79231: PUSH
79232: LD_VAR 0 3
79236: PLUS
79237: ST_TO_ADDR
// max_y := y + r ;
79238: LD_ADDR_VAR 0 10
79242: PUSH
79243: LD_VAR 0 2
79247: PUSH
79248: LD_VAR 0 3
79252: PLUS
79253: ST_TO_ADDR
// for _x = min_x to max_x do
79254: LD_ADDR_VAR 0 5
79258: PUSH
79259: DOUBLE
79260: LD_VAR 0 8
79264: DEC
79265: ST_TO_ADDR
79266: LD_VAR 0 9
79270: PUSH
79271: FOR_TO
79272: IFFALSE 79373
// for _y = min_y to max_y do
79274: LD_ADDR_VAR 0 6
79278: PUSH
79279: DOUBLE
79280: LD_VAR 0 7
79284: DEC
79285: ST_TO_ADDR
79286: LD_VAR 0 10
79290: PUSH
79291: FOR_TO
79292: IFFALSE 79369
// begin if not ValidHex ( _x , _y ) then
79294: LD_VAR 0 5
79298: PPUSH
79299: LD_VAR 0 6
79303: PPUSH
79304: CALL_OW 488
79308: NOT
79309: IFFALSE 79313
// continue ;
79311: GO 79291
// if GetResourceTypeXY ( _x , _y ) then
79313: LD_VAR 0 5
79317: PPUSH
79318: LD_VAR 0 6
79322: PPUSH
79323: CALL_OW 283
79327: IFFALSE 79367
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79329: LD_ADDR_VAR 0 4
79333: PUSH
79334: LD_VAR 0 4
79338: PPUSH
79339: LD_VAR 0 4
79343: PUSH
79344: LD_INT 1
79346: PLUS
79347: PPUSH
79348: LD_VAR 0 5
79352: PUSH
79353: LD_VAR 0 6
79357: PUSH
79358: EMPTY
79359: LIST
79360: LIST
79361: PPUSH
79362: CALL_OW 1
79366: ST_TO_ADDR
// end ;
79367: GO 79291
79369: POP
79370: POP
79371: GO 79271
79373: POP
79374: POP
// end ;
79375: LD_VAR 0 4
79379: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79380: LD_INT 0
79382: PPUSH
79383: PPUSH
79384: PPUSH
79385: PPUSH
79386: PPUSH
79387: PPUSH
79388: PPUSH
79389: PPUSH
// if not units then
79390: LD_VAR 0 1
79394: NOT
79395: IFFALSE 79399
// exit ;
79397: GO 79923
// result := UnitFilter ( units , [ f_ok ] ) ;
79399: LD_ADDR_VAR 0 3
79403: PUSH
79404: LD_VAR 0 1
79408: PPUSH
79409: LD_INT 50
79411: PUSH
79412: EMPTY
79413: LIST
79414: PPUSH
79415: CALL_OW 72
79419: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79420: LD_ADDR_VAR 0 8
79424: PUSH
79425: LD_VAR 0 1
79429: PUSH
79430: LD_INT 1
79432: ARRAY
79433: PPUSH
79434: CALL_OW 255
79438: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79439: LD_ADDR_VAR 0 10
79443: PUSH
79444: LD_INT 29
79446: PUSH
79447: LD_INT 91
79449: PUSH
79450: LD_INT 49
79452: PUSH
79453: EMPTY
79454: LIST
79455: LIST
79456: LIST
79457: ST_TO_ADDR
// if not result then
79458: LD_VAR 0 3
79462: NOT
79463: IFFALSE 79467
// exit ;
79465: GO 79923
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79467: LD_ADDR_VAR 0 5
79471: PUSH
79472: LD_INT 81
79474: PUSH
79475: LD_VAR 0 8
79479: PUSH
79480: EMPTY
79481: LIST
79482: LIST
79483: PPUSH
79484: CALL_OW 69
79488: ST_TO_ADDR
// for i in result do
79489: LD_ADDR_VAR 0 4
79493: PUSH
79494: LD_VAR 0 3
79498: PUSH
79499: FOR_IN
79500: IFFALSE 79921
// begin tag := GetTag ( i ) + 1 ;
79502: LD_ADDR_VAR 0 9
79506: PUSH
79507: LD_VAR 0 4
79511: PPUSH
79512: CALL_OW 110
79516: PUSH
79517: LD_INT 1
79519: PLUS
79520: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79521: LD_ADDR_VAR 0 7
79525: PUSH
79526: LD_VAR 0 4
79530: PPUSH
79531: CALL_OW 250
79535: PPUSH
79536: LD_VAR 0 4
79540: PPUSH
79541: CALL_OW 251
79545: PPUSH
79546: LD_INT 6
79548: PPUSH
79549: CALL 79122 0 3
79553: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79554: LD_VAR 0 4
79558: PPUSH
79559: CALL_OW 247
79563: PUSH
79564: LD_INT 2
79566: EQUAL
79567: PUSH
79568: LD_VAR 0 7
79572: AND
79573: PUSH
79574: LD_VAR 0 4
79578: PPUSH
79579: CALL_OW 264
79583: PUSH
79584: LD_VAR 0 10
79588: IN
79589: NOT
79590: AND
79591: IFFALSE 79630
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79593: LD_VAR 0 4
79597: PPUSH
79598: LD_VAR 0 7
79602: PUSH
79603: LD_INT 1
79605: ARRAY
79606: PUSH
79607: LD_INT 1
79609: ARRAY
79610: PPUSH
79611: LD_VAR 0 7
79615: PUSH
79616: LD_INT 1
79618: ARRAY
79619: PUSH
79620: LD_INT 2
79622: ARRAY
79623: PPUSH
79624: CALL_OW 116
79628: GO 79919
// if path > tag then
79630: LD_VAR 0 2
79634: PUSH
79635: LD_VAR 0 9
79639: GREATER
79640: IFFALSE 79848
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79642: LD_ADDR_VAR 0 6
79646: PUSH
79647: LD_VAR 0 5
79651: PPUSH
79652: LD_INT 91
79654: PUSH
79655: LD_VAR 0 4
79659: PUSH
79660: LD_INT 8
79662: PUSH
79663: EMPTY
79664: LIST
79665: LIST
79666: LIST
79667: PPUSH
79668: CALL_OW 72
79672: ST_TO_ADDR
// if nearEnemy then
79673: LD_VAR 0 6
79677: IFFALSE 79746
// begin if GetWeapon ( i ) = ru_time_lapser then
79679: LD_VAR 0 4
79683: PPUSH
79684: CALL_OW 264
79688: PUSH
79689: LD_INT 49
79691: EQUAL
79692: IFFALSE 79720
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79694: LD_VAR 0 4
79698: PPUSH
79699: LD_VAR 0 6
79703: PPUSH
79704: LD_VAR 0 4
79708: PPUSH
79709: CALL_OW 74
79713: PPUSH
79714: CALL_OW 112
79718: GO 79744
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79720: LD_VAR 0 4
79724: PPUSH
79725: LD_VAR 0 6
79729: PPUSH
79730: LD_VAR 0 4
79734: PPUSH
79735: CALL_OW 74
79739: PPUSH
79740: CALL_OW 115
// end else
79744: GO 79846
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79746: LD_VAR 0 4
79750: PPUSH
79751: LD_VAR 0 2
79755: PUSH
79756: LD_VAR 0 9
79760: ARRAY
79761: PUSH
79762: LD_INT 1
79764: ARRAY
79765: PPUSH
79766: LD_VAR 0 2
79770: PUSH
79771: LD_VAR 0 9
79775: ARRAY
79776: PUSH
79777: LD_INT 2
79779: ARRAY
79780: PPUSH
79781: CALL_OW 297
79785: PUSH
79786: LD_INT 6
79788: GREATER
79789: IFFALSE 79832
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79791: LD_VAR 0 4
79795: PPUSH
79796: LD_VAR 0 2
79800: PUSH
79801: LD_VAR 0 9
79805: ARRAY
79806: PUSH
79807: LD_INT 1
79809: ARRAY
79810: PPUSH
79811: LD_VAR 0 2
79815: PUSH
79816: LD_VAR 0 9
79820: ARRAY
79821: PUSH
79822: LD_INT 2
79824: ARRAY
79825: PPUSH
79826: CALL_OW 114
79830: GO 79846
// SetTag ( i , tag ) ;
79832: LD_VAR 0 4
79836: PPUSH
79837: LD_VAR 0 9
79841: PPUSH
79842: CALL_OW 109
// end else
79846: GO 79919
// if enemy then
79848: LD_VAR 0 5
79852: IFFALSE 79919
// begin if GetWeapon ( i ) = ru_time_lapser then
79854: LD_VAR 0 4
79858: PPUSH
79859: CALL_OW 264
79863: PUSH
79864: LD_INT 49
79866: EQUAL
79867: IFFALSE 79895
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79869: LD_VAR 0 4
79873: PPUSH
79874: LD_VAR 0 5
79878: PPUSH
79879: LD_VAR 0 4
79883: PPUSH
79884: CALL_OW 74
79888: PPUSH
79889: CALL_OW 112
79893: GO 79919
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79895: LD_VAR 0 4
79899: PPUSH
79900: LD_VAR 0 5
79904: PPUSH
79905: LD_VAR 0 4
79909: PPUSH
79910: CALL_OW 74
79914: PPUSH
79915: CALL_OW 115
// end ; end ;
79919: GO 79499
79921: POP
79922: POP
// end ;
79923: LD_VAR 0 3
79927: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79928: LD_INT 0
79930: PPUSH
79931: PPUSH
79932: PPUSH
// if not unit or IsInUnit ( unit ) then
79933: LD_VAR 0 1
79937: NOT
79938: PUSH
79939: LD_VAR 0 1
79943: PPUSH
79944: CALL_OW 310
79948: OR
79949: IFFALSE 79953
// exit ;
79951: GO 80044
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79953: LD_ADDR_VAR 0 4
79957: PUSH
79958: LD_VAR 0 1
79962: PPUSH
79963: CALL_OW 250
79967: PPUSH
79968: LD_VAR 0 2
79972: PPUSH
79973: LD_INT 1
79975: PPUSH
79976: CALL_OW 272
79980: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79981: LD_ADDR_VAR 0 5
79985: PUSH
79986: LD_VAR 0 1
79990: PPUSH
79991: CALL_OW 251
79995: PPUSH
79996: LD_VAR 0 2
80000: PPUSH
80001: LD_INT 1
80003: PPUSH
80004: CALL_OW 273
80008: ST_TO_ADDR
// if ValidHex ( x , y ) then
80009: LD_VAR 0 4
80013: PPUSH
80014: LD_VAR 0 5
80018: PPUSH
80019: CALL_OW 488
80023: IFFALSE 80044
// ComTurnXY ( unit , x , y ) ;
80025: LD_VAR 0 1
80029: PPUSH
80030: LD_VAR 0 4
80034: PPUSH
80035: LD_VAR 0 5
80039: PPUSH
80040: CALL_OW 118
// end ;
80044: LD_VAR 0 3
80048: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80049: LD_INT 0
80051: PPUSH
80052: PPUSH
// result := false ;
80053: LD_ADDR_VAR 0 3
80057: PUSH
80058: LD_INT 0
80060: ST_TO_ADDR
// if not units then
80061: LD_VAR 0 2
80065: NOT
80066: IFFALSE 80070
// exit ;
80068: GO 80115
// for i in units do
80070: LD_ADDR_VAR 0 4
80074: PUSH
80075: LD_VAR 0 2
80079: PUSH
80080: FOR_IN
80081: IFFALSE 80113
// if See ( side , i ) then
80083: LD_VAR 0 1
80087: PPUSH
80088: LD_VAR 0 4
80092: PPUSH
80093: CALL_OW 292
80097: IFFALSE 80111
// begin result := true ;
80099: LD_ADDR_VAR 0 3
80103: PUSH
80104: LD_INT 1
80106: ST_TO_ADDR
// exit ;
80107: POP
80108: POP
80109: GO 80115
// end ;
80111: GO 80080
80113: POP
80114: POP
// end ;
80115: LD_VAR 0 3
80119: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80120: LD_INT 0
80122: PPUSH
80123: PPUSH
80124: PPUSH
80125: PPUSH
// if not unit or not points then
80126: LD_VAR 0 1
80130: NOT
80131: PUSH
80132: LD_VAR 0 2
80136: NOT
80137: OR
80138: IFFALSE 80142
// exit ;
80140: GO 80232
// dist := 99999 ;
80142: LD_ADDR_VAR 0 5
80146: PUSH
80147: LD_INT 99999
80149: ST_TO_ADDR
// for i in points do
80150: LD_ADDR_VAR 0 4
80154: PUSH
80155: LD_VAR 0 2
80159: PUSH
80160: FOR_IN
80161: IFFALSE 80230
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80163: LD_ADDR_VAR 0 6
80167: PUSH
80168: LD_VAR 0 1
80172: PPUSH
80173: LD_VAR 0 4
80177: PUSH
80178: LD_INT 1
80180: ARRAY
80181: PPUSH
80182: LD_VAR 0 4
80186: PUSH
80187: LD_INT 2
80189: ARRAY
80190: PPUSH
80191: CALL_OW 297
80195: ST_TO_ADDR
// if tmpDist < dist then
80196: LD_VAR 0 6
80200: PUSH
80201: LD_VAR 0 5
80205: LESS
80206: IFFALSE 80228
// begin result := i ;
80208: LD_ADDR_VAR 0 3
80212: PUSH
80213: LD_VAR 0 4
80217: ST_TO_ADDR
// dist := tmpDist ;
80218: LD_ADDR_VAR 0 5
80222: PUSH
80223: LD_VAR 0 6
80227: ST_TO_ADDR
// end ; end ;
80228: GO 80160
80230: POP
80231: POP
// end ;
80232: LD_VAR 0 3
80236: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80237: LD_INT 0
80239: PPUSH
// uc_side := side ;
80240: LD_ADDR_OWVAR 20
80244: PUSH
80245: LD_VAR 0 1
80249: ST_TO_ADDR
// uc_nation := 3 ;
80250: LD_ADDR_OWVAR 21
80254: PUSH
80255: LD_INT 3
80257: ST_TO_ADDR
// vc_chassis := 25 ;
80258: LD_ADDR_OWVAR 37
80262: PUSH
80263: LD_INT 25
80265: ST_TO_ADDR
// vc_engine := engine_siberite ;
80266: LD_ADDR_OWVAR 39
80270: PUSH
80271: LD_INT 3
80273: ST_TO_ADDR
// vc_control := control_computer ;
80274: LD_ADDR_OWVAR 38
80278: PUSH
80279: LD_INT 3
80281: ST_TO_ADDR
// vc_weapon := 59 ;
80282: LD_ADDR_OWVAR 40
80286: PUSH
80287: LD_INT 59
80289: ST_TO_ADDR
// result := CreateVehicle ;
80290: LD_ADDR_VAR 0 5
80294: PUSH
80295: CALL_OW 45
80299: ST_TO_ADDR
// SetDir ( result , d ) ;
80300: LD_VAR 0 5
80304: PPUSH
80305: LD_VAR 0 4
80309: PPUSH
80310: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80314: LD_VAR 0 5
80318: PPUSH
80319: LD_VAR 0 2
80323: PPUSH
80324: LD_VAR 0 3
80328: PPUSH
80329: LD_INT 0
80331: PPUSH
80332: CALL_OW 48
// end ;
80336: LD_VAR 0 5
80340: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80341: LD_INT 0
80343: PPUSH
80344: PPUSH
80345: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80346: LD_ADDR_VAR 0 2
80350: PUSH
80351: LD_INT 0
80353: PUSH
80354: LD_INT 0
80356: PUSH
80357: LD_INT 0
80359: PUSH
80360: LD_INT 0
80362: PUSH
80363: EMPTY
80364: LIST
80365: LIST
80366: LIST
80367: LIST
80368: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80369: LD_VAR 0 1
80373: NOT
80374: PUSH
80375: LD_VAR 0 1
80379: PPUSH
80380: CALL_OW 264
80384: PUSH
80385: LD_INT 12
80387: PUSH
80388: LD_INT 51
80390: PUSH
80391: LD_INT 32
80393: PUSH
80394: LD_INT 89
80396: PUSH
80397: EMPTY
80398: LIST
80399: LIST
80400: LIST
80401: LIST
80402: IN
80403: NOT
80404: OR
80405: IFFALSE 80409
// exit ;
80407: GO 80507
// for i := 1 to 3 do
80409: LD_ADDR_VAR 0 3
80413: PUSH
80414: DOUBLE
80415: LD_INT 1
80417: DEC
80418: ST_TO_ADDR
80419: LD_INT 3
80421: PUSH
80422: FOR_TO
80423: IFFALSE 80505
// begin tmp := GetCargo ( cargo , i ) ;
80425: LD_ADDR_VAR 0 4
80429: PUSH
80430: LD_VAR 0 1
80434: PPUSH
80435: LD_VAR 0 3
80439: PPUSH
80440: CALL_OW 289
80444: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80445: LD_ADDR_VAR 0 2
80449: PUSH
80450: LD_VAR 0 2
80454: PPUSH
80455: LD_VAR 0 3
80459: PPUSH
80460: LD_VAR 0 4
80464: PPUSH
80465: CALL_OW 1
80469: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80470: LD_ADDR_VAR 0 2
80474: PUSH
80475: LD_VAR 0 2
80479: PPUSH
80480: LD_INT 4
80482: PPUSH
80483: LD_VAR 0 2
80487: PUSH
80488: LD_INT 4
80490: ARRAY
80491: PUSH
80492: LD_VAR 0 4
80496: PLUS
80497: PPUSH
80498: CALL_OW 1
80502: ST_TO_ADDR
// end ;
80503: GO 80422
80505: POP
80506: POP
// end ;
80507: LD_VAR 0 2
80511: RET
// export function Length ( array ) ; begin
80512: LD_INT 0
80514: PPUSH
// result := array + 0 ;
80515: LD_ADDR_VAR 0 2
80519: PUSH
80520: LD_VAR 0 1
80524: PUSH
80525: LD_INT 0
80527: PLUS
80528: ST_TO_ADDR
// end ;
80529: LD_VAR 0 2
80533: RET
// export function PrepareArray ( array ) ; begin
80534: LD_INT 0
80536: PPUSH
// result := array diff 0 ;
80537: LD_ADDR_VAR 0 2
80541: PUSH
80542: LD_VAR 0 1
80546: PUSH
80547: LD_INT 0
80549: DIFF
80550: ST_TO_ADDR
// if not result [ 1 ] then
80551: LD_VAR 0 2
80555: PUSH
80556: LD_INT 1
80558: ARRAY
80559: NOT
80560: IFFALSE 80580
// result := Delete ( result , 1 ) ;
80562: LD_ADDR_VAR 0 2
80566: PUSH
80567: LD_VAR 0 2
80571: PPUSH
80572: LD_INT 1
80574: PPUSH
80575: CALL_OW 3
80579: ST_TO_ADDR
// end ;
80580: LD_VAR 0 2
80584: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80585: LD_INT 0
80587: PPUSH
80588: PPUSH
80589: PPUSH
80590: PPUSH
// sibRocketRange := 25 ;
80591: LD_ADDR_VAR 0 6
80595: PUSH
80596: LD_INT 25
80598: ST_TO_ADDR
// result := false ;
80599: LD_ADDR_VAR 0 4
80603: PUSH
80604: LD_INT 0
80606: ST_TO_ADDR
// for i := 0 to 5 do
80607: LD_ADDR_VAR 0 5
80611: PUSH
80612: DOUBLE
80613: LD_INT 0
80615: DEC
80616: ST_TO_ADDR
80617: LD_INT 5
80619: PUSH
80620: FOR_TO
80621: IFFALSE 80688
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80623: LD_VAR 0 1
80627: PPUSH
80628: LD_VAR 0 5
80632: PPUSH
80633: LD_VAR 0 6
80637: PPUSH
80638: CALL_OW 272
80642: PPUSH
80643: LD_VAR 0 2
80647: PPUSH
80648: LD_VAR 0 5
80652: PPUSH
80653: LD_VAR 0 6
80657: PPUSH
80658: CALL_OW 273
80662: PPUSH
80663: LD_VAR 0 3
80667: PPUSH
80668: CALL_OW 309
80672: IFFALSE 80686
// begin result := true ;
80674: LD_ADDR_VAR 0 4
80678: PUSH
80679: LD_INT 1
80681: ST_TO_ADDR
// exit ;
80682: POP
80683: POP
80684: GO 80690
// end ;
80686: GO 80620
80688: POP
80689: POP
// end ;
80690: LD_VAR 0 4
80694: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80695: LD_INT 0
80697: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80698: LD_VAR 0 1
80702: PPUSH
80703: LD_VAR 0 2
80707: PPUSH
80708: LD_INT 0
80710: PPUSH
80711: LD_INT 0
80713: PPUSH
80714: LD_INT 1
80716: PPUSH
80717: LD_INT 0
80719: PPUSH
80720: CALL_OW 587
// end ; end_of_file
80724: LD_VAR 0 3
80728: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80729: LD_VAR 0 1
80733: PUSH
80734: LD_INT 200
80736: DOUBLE
80737: GREATEREQUAL
80738: IFFALSE 80746
80740: LD_INT 299
80742: DOUBLE
80743: LESSEQUAL
80744: IFTRUE 80748
80746: GO 80780
80748: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80749: LD_VAR 0 1
80753: PPUSH
80754: LD_VAR 0 2
80758: PPUSH
80759: LD_VAR 0 3
80763: PPUSH
80764: LD_VAR 0 4
80768: PPUSH
80769: LD_VAR 0 5
80773: PPUSH
80774: CALL 35395 0 5
80778: GO 80857
80780: LD_INT 300
80782: DOUBLE
80783: GREATEREQUAL
80784: IFFALSE 80792
80786: LD_INT 399
80788: DOUBLE
80789: LESSEQUAL
80790: IFTRUE 80794
80792: GO 80856
80794: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80795: LD_VAR 0 1
80799: PPUSH
80800: LD_VAR 0 2
80804: PPUSH
80805: LD_VAR 0 3
80809: PPUSH
80810: LD_VAR 0 4
80814: PPUSH
80815: LD_VAR 0 5
80819: PPUSH
80820: LD_VAR 0 6
80824: PPUSH
80825: LD_VAR 0 7
80829: PPUSH
80830: LD_VAR 0 8
80834: PPUSH
80835: LD_VAR 0 9
80839: PPUSH
80840: LD_VAR 0 10
80844: PPUSH
80845: LD_VAR 0 11
80849: PPUSH
80850: CALL 31728 0 11
80854: GO 80857
80856: POP
// end ;
80857: PPOPN 11
80859: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80860: LD_VAR 0 1
80864: PPUSH
80865: LD_VAR 0 2
80869: PPUSH
80870: LD_VAR 0 3
80874: PPUSH
80875: LD_VAR 0 4
80879: PPUSH
80880: LD_VAR 0 5
80884: PPUSH
80885: CALL 35131 0 5
// end ; end_of_file
80889: PPOPN 5
80891: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80892: LD_VAR 0 1
80896: PPUSH
80897: LD_VAR 0 2
80901: PPUSH
80902: LD_VAR 0 3
80906: PPUSH
80907: LD_VAR 0 4
80911: PPUSH
80912: LD_VAR 0 5
80916: PPUSH
80917: LD_VAR 0 6
80921: PPUSH
80922: CALL 19380 0 6
// end ;
80926: PPOPN 6
80928: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80929: LD_INT 0
80931: PPUSH
// begin if not units then
80932: LD_VAR 0 1
80936: NOT
80937: IFFALSE 80941
// exit ;
80939: GO 80941
// end ;
80941: PPOPN 7
80943: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80944: CALL 19284 0 0
// end ;
80948: PPOPN 1
80950: END
