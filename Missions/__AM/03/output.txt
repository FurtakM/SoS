// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3454 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2668 0 0
// PrepareWesternBase ;
  41: CALL 2897 0 0
// Action ;
  45: CALL 5785 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty , vcount , tmpv ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
// uc_side := 4 ;
1157: LD_ADDR_OWVAR 20
1161: PUSH
1162: LD_INT 4
1164: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1165: LD_ADDR_EXP 46
1169: PUSH
1170: LD_STRING Powell
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: LD_STRING 
1178: PPUSH
1179: CALL 39284 0 3
1183: ST_TO_ADDR
// uc_side := 1 ;
1184: LD_ADDR_OWVAR 20
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// uc_nation := 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// if debug then
1200: LD_EXP 1
1204: IFFALSE 1550
// begin for i = 1 to 4 do
1206: LD_ADDR_VAR 0 2
1210: PUSH
1211: DOUBLE
1212: LD_INT 1
1214: DEC
1215: ST_TO_ADDR
1216: LD_INT 4
1218: PUSH
1219: FOR_TO
1220: IFFALSE 1271
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL_OW 380
// un := CreateHuman ;
1243: LD_ADDR_VAR 0 3
1247: PUSH
1248: CALL_OW 44
1252: ST_TO_ADDR
// others := others ^ un ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_VAR 0 5
1262: PUSH
1263: LD_VAR 0 3
1267: ADD
1268: ST_TO_ADDR
// end ;
1269: GO 1219
1271: POP
1272: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1273: LD_ADDR_VAR 0 6
1277: PUSH
1278: LD_INT 21
1280: PUSH
1281: LD_INT 1
1283: PUSH
1284: LD_INT 1
1286: PUSH
1287: LD_INT 42
1289: PUSH
1290: LD_INT 0
1292: PUSH
1293: LD_INT 750
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 21
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 42
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 750
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_INT 21
1332: PUSH
1333: LD_INT 1
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: LD_INT 42
1341: PUSH
1342: LD_INT 0
1344: PUSH
1345: LD_INT 750
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 42
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 750
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 21
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 44
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: LD_INT 750
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: LD_INT 43
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 750
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 21
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: LD_INT 43
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 750
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 21
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 43
1471: PUSH
1472: LD_INT 0
1474: PUSH
1475: LD_INT 750
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 21
1488: PUSH
1489: LD_INT 1
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 90
1500: PUSH
1501: LD_INT 504
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 51
1523: PUSH
1524: LD_INT 80
1526: PUSH
1527: LD_INT 750
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1550: LD_ADDR_EXP 37
1554: PUSH
1555: LD_STRING JMM
1557: PPUSH
1558: LD_EXP 1
1562: NOT
1563: PPUSH
1564: LD_EXP 3
1568: PPUSH
1569: CALL 39284 0 3
1573: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1574: LD_ADDR_EXP 38
1578: PUSH
1579: LD_STRING Bobby
1581: PPUSH
1582: LD_EXP 1
1586: NOT
1587: PPUSH
1588: LD_EXP 3
1592: PPUSH
1593: CALL 39284 0 3
1597: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1598: LD_ADDR_EXP 39
1602: PUSH
1603: LD_STRING Cyrus
1605: PPUSH
1606: LD_EXP 1
1610: NOT
1611: PPUSH
1612: LD_EXP 3
1616: PPUSH
1617: CALL 39284 0 3
1621: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1622: LD_ADDR_EXP 40
1626: PUSH
1627: LD_STRING Lisa
1629: PPUSH
1630: LD_EXP 1
1634: NOT
1635: PPUSH
1636: LD_EXP 3
1640: PPUSH
1641: CALL 39284 0 3
1645: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1646: LD_ADDR_EXP 41
1650: PUSH
1651: LD_STRING Khatam
1653: PPUSH
1654: LD_EXP 1
1658: NOT
1659: PPUSH
1660: LD_EXP 3
1664: PPUSH
1665: CALL 39284 0 3
1669: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1670: LD_ADDR_EXP 42
1674: PUSH
1675: LD_STRING Brian
1677: PPUSH
1678: LD_EXP 1
1682: NOT
1683: PPUSH
1684: LD_EXP 3
1688: PPUSH
1689: CALL 39284 0 3
1693: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1694: LD_ADDR_EXP 43
1698: PUSH
1699: LD_STRING Jerry
1701: PPUSH
1702: LD_EXP 1
1706: NOT
1707: PPUSH
1708: LD_EXP 3
1712: PPUSH
1713: CALL 39284 0 3
1717: ST_TO_ADDR
// if Bobby then
1718: LD_EXP 38
1722: IFFALSE 1753
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1724: LD_ADDR_VAR 0 4
1728: PUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: LD_VAR 0 4
1738: PUSH
1739: LD_INT 1
1741: PLUS
1742: PPUSH
1743: LD_EXP 38
1747: PPUSH
1748: CALL_OW 2
1752: ST_TO_ADDR
// if Cyrus then
1753: LD_EXP 39
1757: IFFALSE 1788
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_VAR 0 4
1773: PUSH
1774: LD_INT 1
1776: PLUS
1777: PPUSH
1778: LD_EXP 39
1782: PPUSH
1783: CALL_OW 2
1787: ST_TO_ADDR
// if Lisa then
1788: LD_EXP 40
1792: IFFALSE 1823
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: LD_VAR 0 4
1808: PUSH
1809: LD_INT 1
1811: PLUS
1812: PPUSH
1813: LD_EXP 40
1817: PPUSH
1818: CALL_OW 2
1822: ST_TO_ADDR
// if Khatam then
1823: LD_EXP 41
1827: IFFALSE 1858
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: LD_VAR 0 4
1843: PUSH
1844: LD_INT 1
1846: PLUS
1847: PPUSH
1848: LD_EXP 41
1852: PPUSH
1853: CALL_OW 2
1857: ST_TO_ADDR
// if Brian then
1858: LD_EXP 42
1862: IFFALSE 1893
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1864: LD_ADDR_VAR 0 4
1868: PUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_VAR 0 4
1878: PUSH
1879: LD_INT 1
1881: PLUS
1882: PPUSH
1883: LD_EXP 42
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// if Jerry then
1893: LD_EXP 43
1897: IFFALSE 1928
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: PLUS
1917: PPUSH
1918: LD_EXP 43
1922: PPUSH
1923: CALL_OW 2
1927: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1928: LD_STRING 02_other_survivors
1930: PPUSH
1931: CALL_OW 28
1935: IFFALSE 1950
// others := CreateCharacterSet ( 02_other_survivors ) ;
1937: LD_ADDR_VAR 0 5
1941: PUSH
1942: LD_STRING 02_other_survivors
1944: PPUSH
1945: CALL_OW 31
1949: ST_TO_ADDR
// if others then
1950: LD_VAR 0 5
1954: IFFALSE 1979
// begin tmp := tmp ^ others ;
1956: LD_ADDR_VAR 0 4
1960: PUSH
1961: LD_VAR 0 4
1965: PUSH
1966: LD_VAR 0 5
1970: ADD
1971: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1972: LD_STRING 02_other_survivors
1974: PPUSH
1975: CALL_OW 40
// end ; jmm_units := tmp diff 0 ;
1979: LD_ADDR_EXP 4
1983: PUSH
1984: LD_VAR 0 4
1988: PUSH
1989: LD_INT 0
1991: DIFF
1992: ST_TO_ADDR
// if not vehicles then
1993: LD_VAR 0 6
1997: NOT
1998: IFFALSE 2015
// vehicles := LoadVariable ( 02_tanks_1 , [ ] ) ;
2000: LD_ADDR_VAR 0 6
2004: PUSH
2005: LD_STRING 02_tanks_1
2007: PPUSH
2008: EMPTY
2009: PPUSH
2010: CALL_OW 30
2014: ST_TO_ADDR
// if vehicles then
2015: LD_VAR 0 6
2019: IFFALSE 2387
// begin got_mech := false ;
2021: LD_ADDR_VAR 0 7
2025: PUSH
2026: LD_INT 0
2028: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 72
2048: IFFALSE 2058
// got_mech := true ;
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// vcount := Count ( vehicles ) ;
2058: LD_ADDR_VAR 0 9
2062: PUSH
2063: LD_VAR 0 6
2067: PPUSH
2068: CALL 41386 0 1
2072: ST_TO_ADDR
// if vcount > 1 then
2073: LD_VAR 0 9
2077: PUSH
2078: LD_INT 1
2080: GREATER
2081: IFFALSE 2184
// begin for i := 2 to vcount do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 2
2091: DEC
2092: ST_TO_ADDR
2093: LD_VAR 0 9
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2182
// if vehicles [ i ] [ 4 ] = ru_cargo_bay then
2101: LD_VAR 0 6
2105: PUSH
2106: LD_VAR 0 2
2110: ARRAY
2111: PUSH
2112: LD_INT 4
2114: ARRAY
2115: PUSH
2116: LD_INT 51
2118: EQUAL
2119: IFFALSE 2180
// begin tmpv := vehicles [ i ] ;
2121: LD_ADDR_VAR 0 10
2125: PUSH
2126: LD_VAR 0 6
2130: PUSH
2131: LD_VAR 0 2
2135: ARRAY
2136: ST_TO_ADDR
// vehicles := Delete ( vehicles , i ) ;
2137: LD_ADDR_VAR 0 6
2141: PUSH
2142: LD_VAR 0 6
2146: PPUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 3
2156: ST_TO_ADDR
// vehicles := Insert ( vehicles , 1 , tmpv ) ;
2157: LD_ADDR_VAR 0 6
2161: PUSH
2162: LD_VAR 0 6
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_VAR 0 10
2174: PPUSH
2175: CALL_OW 2
2179: ST_TO_ADDR
// end ;
2180: GO 2098
2182: POP
2183: POP
// end ; if vcount > 6 then
2184: LD_VAR 0 9
2188: PUSH
2189: LD_INT 6
2191: GREATER
2192: IFFALSE 2202
// vcount := 6 ;
2194: LD_ADDR_VAR 0 9
2198: PUSH
2199: LD_INT 6
2201: ST_TO_ADDR
// if jmm_units + 1 < vcount then
2202: LD_EXP 4
2206: PUSH
2207: LD_INT 1
2209: PLUS
2210: PUSH
2211: LD_VAR 0 9
2215: LESS
2216: IFFALSE 2232
// vcount := jmm_units + 1 ;
2218: LD_ADDR_VAR 0 9
2222: PUSH
2223: LD_EXP 4
2227: PUSH
2228: LD_INT 1
2230: PLUS
2231: ST_TO_ADDR
// for i := 1 to vcount do
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: DOUBLE
2238: LD_INT 1
2240: DEC
2241: ST_TO_ADDR
2242: LD_VAR 0 9
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2385
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 3
2260: PPUSH
2261: LD_VAR 0 6
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: LD_VAR 0 6
2280: PUSH
2281: LD_VAR 0 2
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 6
2295: PUSH
2296: LD_VAR 0 2
2300: ARRAY
2301: PUSH
2302: LD_INT 3
2304: ARRAY
2305: PPUSH
2306: LD_VAR 0 6
2310: PUSH
2311: LD_VAR 0 2
2315: ARRAY
2316: PUSH
2317: LD_INT 4
2319: ARRAY
2320: PPUSH
2321: LD_INT 40
2323: PPUSH
2324: CALL 497 0 7
2328: ST_TO_ADDR
// if not got_mech then
2329: LD_VAR 0 7
2333: NOT
2334: IFFALSE 2360
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_VAR 0 6
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_INT 6
2354: ARRAY
2355: PPUSH
2356: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_VAR 0 3
2377: PPUSH
2378: CALL_OW 2
2382: ST_TO_ADDR
// end ;
2383: GO 2247
2385: POP
2386: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
2387: LD_EXP 37
2391: PPUSH
2392: LD_INT 194
2394: PPUSH
2395: LD_INT 119
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 48
// if tmp then
2405: LD_VAR 0 4
2409: IFFALSE 2597
// begin for i in tmp do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_VAR 0 4
2420: PUSH
2421: FOR_IN
2422: IFFALSE 2595
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL_OW 257
2433: PUSH
2434: LD_INT 1
2436: NONEQUAL
2437: PUSH
2438: LD_VAR 0 2
2442: PUSH
2443: LD_EXP 41
2447: NONEQUAL
2448: AND
2449: IFFALSE 2463
// SetClass ( i , 1 ) ;
2451: LD_VAR 0 2
2455: PPUSH
2456: LD_INT 1
2458: PPUSH
2459: CALL_OW 336
// if i = Khatam then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_EXP 41
2472: EQUAL
2473: IFFALSE 2487
// SetClass ( i , 4 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 4
2482: PPUSH
2483: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2487: LD_ADDR_VAR 0 8
2491: PUSH
2492: LD_INT 22
2494: PUSH
2495: LD_INT 1
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 21
2504: PUSH
2505: LD_INT 2
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 58
2514: PUSH
2515: EMPTY
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2528: LD_VAR 0 2
2532: PPUSH
2533: CALL_OW 247
2537: PUSH
2538: LD_INT 1
2540: EQUAL
2541: PUSH
2542: LD_VAR 0 8
2546: AND
2547: IFFALSE 2569
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2549: LD_VAR 0 2
2553: PPUSH
2554: LD_VAR 0 8
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PPUSH
2563: CALL_OW 52
2567: GO 2584
// PlaceUnitArea ( i , startArea , false ) ;
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 0
2579: PPUSH
2580: CALL_OW 49
// ComHold ( i ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: CALL_OW 140
// end ;
2593: GO 2421
2595: POP
2596: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2597: LD_ADDR_EXP 7
2601: PUSH
2602: LD_STRING 02_mikhailStatus_1
2604: PPUSH
2605: LD_INT 0
2607: PPUSH
2608: CALL_OW 30
2612: ST_TO_ADDR
// if not bierezov_exist and not debug then
2613: LD_EXP 7
2617: NOT
2618: PUSH
2619: LD_EXP 1
2623: NOT
2624: AND
2625: IFFALSE 2629
// exit ;
2627: GO 2663
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2629: LD_ADDR_EXP 45
2633: PUSH
2634: LD_STRING Mikhail
2636: PPUSH
2637: LD_INT 0
2639: PPUSH
2640: LD_STRING 
2642: PPUSH
2643: CALL 39284 0 3
2647: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2648: LD_EXP 45
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 49
// end ;
2663: LD_VAR 0 1
2667: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
2673: PPUSH
// uc_side := 4 ;
2674: LD_ADDR_OWVAR 20
2678: PUSH
2679: LD_INT 4
2681: ST_TO_ADDR
// uc_nation := 1 ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 1
2689: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2690: LD_ADDR_EXP 44
2694: PUSH
2695: LD_STRING Cornell
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: LD_STRING 
2703: PPUSH
2704: CALL 39284 0 3
2708: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2709: LD_ADDR_EXP 6
2713: PUSH
2714: LD_INT 9
2716: PUSH
2717: LD_EXP 4
2721: MINUS
2722: ST_TO_ADDR
// tmp := [ ] ;
2723: LD_ADDR_VAR 0 2
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// if cornel_units < 4 then
2730: LD_EXP 6
2734: PUSH
2735: LD_INT 4
2737: LESS
2738: IFFALSE 2748
// cornel_units := 4 ;
2740: LD_ADDR_EXP 6
2744: PUSH
2745: LD_INT 4
2747: ST_TO_ADDR
// for i = 1 to cornel_units do
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: DOUBLE
2754: LD_INT 1
2756: DEC
2757: ST_TO_ADDR
2758: LD_EXP 6
2762: PUSH
2763: FOR_TO
2764: IFFALSE 2862
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2766: LD_INT 0
2768: PPUSH
2769: LD_INT 1
2771: PUSH
2772: LD_INT 1
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: LD_INT 4
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: PUSH
2791: LD_VAR 0 4
2795: PUSH
2796: LD_INT 5
2798: MOD
2799: PUSH
2800: LD_INT 1
2802: PLUS
2803: ARRAY
2804: PPUSH
2805: LD_INT 2
2807: PPUSH
2808: CALL_OW 380
// un := CreateHuman ;
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: CALL_OW 44
2821: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2822: LD_ADDR_VAR 0 2
2826: PUSH
2827: LD_VAR 0 2
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: LD_VAR 0 3
2839: PPUSH
2840: CALL_OW 2
2844: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2845: LD_VAR 0 3
2849: PPUSH
2850: LD_INT 2
2852: PPUSH
2853: LD_INT 0
2855: PPUSH
2856: CALL_OW 49
// end ;
2860: GO 2763
2862: POP
2863: POP
// cornel_units := tmp ;
2864: LD_ADDR_EXP 6
2868: PUSH
2869: LD_VAR 0 2
2873: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2874: LD_EXP 44
2878: PPUSH
2879: LD_INT 191
2881: PPUSH
2882: LD_INT 106
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 48
// end ;
2892: LD_VAR 0 1
2896: RET
// export function PrepareWesternBase ; var i ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
// uc_side := 8 ;
2901: LD_ADDR_OWVAR 20
2905: PUSH
2906: LD_INT 8
2908: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2909: LD_ADDR_EXP 47
2913: PUSH
2914: LD_STRING Lynch
2916: PPUSH
2917: LD_INT 0
2919: PPUSH
2920: LD_STRING 
2922: PPUSH
2923: CALL 39284 0 3
2927: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2928: LD_ADDR_EXP 48
2932: PUSH
2933: LD_STRING Walker
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: LD_STRING 
2941: PPUSH
2942: CALL 39284 0 3
2946: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2947: LD_ADDR_EXP 49
2951: PUSH
2952: LD_STRING Turner
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: LD_STRING 
2960: PPUSH
2961: CALL 39284 0 3
2965: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2966: LD_ADDR_EXP 50
2970: PUSH
2971: LD_STRING Jillian
2973: PPUSH
2974: LD_INT 0
2976: PPUSH
2977: LD_STRING 
2979: PPUSH
2980: CALL 39284 0 3
2984: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: LD_EXP 47
2994: PUSH
2995: LD_EXP 48
2999: PUSH
3000: LD_EXP 49
3004: PUSH
3005: LD_EXP 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: FOR_IN
3017: IFFALSE 3045
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 3
3026: PPUSH
3027: LD_INT 0
3029: PPUSH
3030: CALL_OW 49
// ComHold ( i ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 140
// end ;
3043: GO 3016
3045: POP
3046: POP
// end ;
3047: LD_VAR 0 1
3051: RET
// export function SelectGroup ; var units , selected , i ; begin
3052: LD_INT 0
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
3058: LD_ADDR_VAR 0 2
3062: PUSH
3063: LD_EXP 37
3067: PUSH
3068: LD_INT -3
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: LD_EXP 4
3079: ADD
3080: PUSH
3081: LD_INT -2
3083: PUSH
3084: LD_INT -4
3086: PUSH
3087: LD_EXP 44
3091: PUSH
3092: LD_EXP 45
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: ADD
3103: PUSH
3104: LD_INT -3
3106: PUSH
3107: EMPTY
3108: LIST
3109: ADD
3110: PUSH
3111: LD_EXP 6
3115: ADD
3116: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
3117: LD_ADDR_VAR 0 3
3121: PUSH
3122: LD_EXP 37
3126: PUSH
3127: LD_STRING Select four characters to go with you
3129: PPUSH
3130: LD_INT 4
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: LD_VAR 0 2
3140: PPUSH
3141: EMPTY
3142: PPUSH
3143: CALL_OW 42
3147: ADD
3148: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
3149: LD_ADDR_EXP 6
3153: PUSH
3154: LD_EXP 4
3158: PUSH
3159: LD_EXP 6
3163: UNION
3164: PUSH
3165: LD_VAR 0 3
3169: DIFF
3170: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
3171: LD_ADDR_VAR 0 4
3175: PUSH
3176: LD_EXP 6
3180: PUSH
3181: LD_EXP 45
3185: ADD
3186: PUSH
3187: FOR_IN
3188: IFFALSE 3219
// if GetSide ( i ) = 1 then
3190: LD_VAR 0 4
3194: PPUSH
3195: CALL_OW 255
3199: PUSH
3200: LD_INT 1
3202: EQUAL
3203: IFFALSE 3217
// SetSide ( i , 4 ) ;
3205: LD_VAR 0 4
3209: PPUSH
3210: LD_INT 4
3212: PPUSH
3213: CALL_OW 235
3217: GO 3187
3219: POP
3220: POP
// for i in selected do
3221: LD_ADDR_VAR 0 4
3225: PUSH
3226: LD_VAR 0 3
3230: PUSH
3231: FOR_IN
3232: IFFALSE 3263
// if GetSide ( i ) = 4 then
3234: LD_VAR 0 4
3238: PPUSH
3239: CALL_OW 255
3243: PUSH
3244: LD_INT 4
3246: EQUAL
3247: IFFALSE 3261
// SetSide ( i , 1 ) ;
3249: LD_VAR 0 4
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: CALL_OW 235
3261: GO 3231
3263: POP
3264: POP
// jmm_units := jmm_units diff cornel_units ;
3265: LD_ADDR_EXP 4
3269: PUSH
3270: LD_EXP 4
3274: PUSH
3275: LD_EXP 6
3279: DIFF
3280: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
3281: LD_EXP 38
3285: PPUSH
3286: CALL_OW 255
3290: PUSH
3291: LD_INT 4
3293: EQUAL
3294: IFFALSE 3309
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
3296: LD_EXP 3
3300: PUSH
3301: LD_STRING Bobby
3303: STR
3304: PPUSH
3305: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
3309: LD_EXP 39
3313: PPUSH
3314: CALL_OW 255
3318: PUSH
3319: LD_INT 4
3321: EQUAL
3322: IFFALSE 3337
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
3324: LD_EXP 3
3328: PUSH
3329: LD_STRING Cyrus
3331: STR
3332: PPUSH
3333: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
3337: LD_EXP 40
3341: PPUSH
3342: CALL_OW 255
3346: PUSH
3347: LD_INT 4
3349: EQUAL
3350: IFFALSE 3365
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
3352: LD_EXP 3
3356: PUSH
3357: LD_STRING Lisa
3359: STR
3360: PPUSH
3361: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
3365: LD_EXP 41
3369: PPUSH
3370: CALL_OW 255
3374: PUSH
3375: LD_INT 4
3377: EQUAL
3378: IFFALSE 3393
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
3380: LD_EXP 3
3384: PUSH
3385: LD_STRING Khatam
3387: STR
3388: PPUSH
3389: CALL_OW 40
// if GetSide ( Brian ) = 4 then
3393: LD_EXP 42
3397: PPUSH
3398: CALL_OW 255
3402: PUSH
3403: LD_INT 4
3405: EQUAL
3406: IFFALSE 3421
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3408: LD_EXP 3
3412: PUSH
3413: LD_STRING Brian
3415: STR
3416: PPUSH
3417: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3421: LD_EXP 43
3425: PPUSH
3426: CALL_OW 255
3430: PUSH
3431: LD_INT 4
3433: EQUAL
3434: IFFALSE 3449
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3436: LD_EXP 3
3440: PUSH
3441: LD_STRING Jerry
3443: STR
3444: PPUSH
3445: CALL_OW 40
// end ; end_of_file
3449: LD_VAR 0 1
3453: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3454: LD_INT 0
3456: PPUSH
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
// ru_alert := false ;
3469: LD_ADDR_EXP 60
3473: PUSH
3474: LD_INT 0
3476: ST_TO_ADDR
// ru_produce_list := [ ] ;
3477: LD_ADDR_EXP 57
3481: PUSH
3482: EMPTY
3483: ST_TO_ADDR
// if Difficulty > 1 then
3484: LD_OWVAR 67
3488: PUSH
3489: LD_INT 1
3491: GREATER
3492: IFFALSE 3616
// begin uc_side := 3 ;
3494: LD_ADDR_OWVAR 20
3498: PUSH
3499: LD_INT 3
3501: ST_TO_ADDR
// uc_nation := 3 ;
3502: LD_ADDR_OWVAR 21
3506: PUSH
3507: LD_INT 3
3509: ST_TO_ADDR
// bc_type := b_breastwork ;
3510: LD_ADDR_OWVAR 42
3514: PUSH
3515: LD_INT 31
3517: ST_TO_ADDR
// bc_level := Difficulty ;
3518: LD_ADDR_OWVAR 43
3522: PUSH
3523: LD_OWVAR 67
3527: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3528: LD_INT 22
3530: PPUSH
3531: LD_INT 14
3533: PPUSH
3534: LD_INT 0
3536: PPUSH
3537: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3541: LD_INT 48
3543: PPUSH
3544: LD_INT 46
3546: PPUSH
3547: LD_INT 0
3549: PPUSH
3550: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3554: LD_INT 86
3556: PPUSH
3557: LD_INT 65
3559: PPUSH
3560: LD_INT 5
3562: PPUSH
3563: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3567: LD_INT 165
3569: PPUSH
3570: LD_INT 73
3572: PPUSH
3573: LD_INT 5
3575: PPUSH
3576: CALL_OW 47
// if Difficulty > 2 then
3580: LD_OWVAR 67
3584: PUSH
3585: LD_INT 2
3587: GREATER
3588: IFFALSE 3616
// begin CreateAndPlaceBuildingXYD ( 152 , 114 , 4 ) ;
3590: LD_INT 152
3592: PPUSH
3593: LD_INT 114
3595: PPUSH
3596: LD_INT 4
3598: PPUSH
3599: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 157 , 97 , 4 ) ;
3603: LD_INT 157
3605: PPUSH
3606: LD_INT 97
3608: PPUSH
3609: LD_INT 4
3611: PPUSH
3612: CALL_OW 47
// end ; end ; if Difficulty >= 3 then
3616: LD_OWVAR 67
3620: PUSH
3621: LD_INT 3
3623: GREATEREQUAL
3624: IFFALSE 3639
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3626: LD_INT 51
3628: PPUSH
3629: LD_INT 3
3631: PPUSH
3632: LD_INT 2
3634: PPUSH
3635: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3639: LD_ADDR_VAR 0 7
3643: PUSH
3644: LD_INT 22
3646: PUSH
3647: LD_INT 3
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 2
3656: PUSH
3657: LD_INT 30
3659: PUSH
3660: LD_INT 31
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PUSH
3667: LD_INT 30
3669: PUSH
3670: LD_INT 32
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3691: LD_ADDR_VAR 0 8
3695: PUSH
3696: LD_INT 22
3698: PUSH
3699: LD_INT 3
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: LD_INT 30
3708: PUSH
3709: LD_INT 4
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PPUSH
3720: CALL_OW 69
3724: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3725: LD_ADDR_VAR 0 10
3729: PUSH
3730: LD_INT 22
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PUSH
3740: LD_INT 30
3742: PUSH
3743: LD_INT 3
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: PPUSH
3754: CALL_OW 69
3758: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3759: LD_ADDR_VAR 0 9
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 3
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 30
3776: PUSH
3777: LD_INT 6
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PPUSH
3788: CALL_OW 69
3792: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3793: LD_ADDR_VAR 0 2
3797: PUSH
3798: LD_INT 22
3800: PUSH
3801: LD_INT 3
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: LD_INT 30
3810: PUSH
3811: LD_INT 1
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PPUSH
3822: CALL_OW 69
3826: PUSH
3827: FOR_IN
3828: IFFALSE 3872
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3830: LD_VAR 0 2
3834: PPUSH
3835: CALL_OW 274
3839: PPUSH
3840: LD_INT 1
3842: PPUSH
3843: LD_INT 1000
3845: PPUSH
3846: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3850: LD_VAR 0 2
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 2
3862: PPUSH
3863: LD_INT 300
3865: PPUSH
3866: CALL_OW 277
// end ;
3870: GO 3827
3872: POP
3873: POP
// uc_side := 3 ;
3874: LD_ADDR_OWVAR 20
3878: PUSH
3879: LD_INT 3
3881: ST_TO_ADDR
// uc_nation := 3 ;
3882: LD_ADDR_OWVAR 21
3886: PUSH
3887: LD_INT 3
3889: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3890: LD_ADDR_VAR 0 11
3894: PUSH
3895: LD_INT 2
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: LD_INT 4
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: PUSH
3913: LD_OWVAR 67
3917: ARRAY
3918: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3919: LD_ADDR_EXP 52
3923: PUSH
3924: LD_STRING Pokryshkin
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: LD_STRING 
3932: PPUSH
3933: CALL 39284 0 3
3937: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3938: LD_EXP 52
3942: PPUSH
3943: LD_INT 63
3945: PPUSH
3946: LD_INT 21
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3956: LD_EXP 52
3960: PPUSH
3961: CALL_OW 140
// InitHc ;
3965: CALL_OW 19
// for i in fac do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: LD_VAR 0 10
3978: PUSH
3979: FOR_IN
3980: IFFALSE 4033
// begin for j = 1 to 6 do
3982: LD_ADDR_VAR 0 3
3986: PUSH
3987: DOUBLE
3988: LD_INT 1
3990: DEC
3991: ST_TO_ADDR
3992: LD_INT 6
3994: PUSH
3995: FOR_TO
3996: IFFALSE 4029
// begin PrepareHuman ( false , 3 , skill ) ;
3998: LD_INT 0
4000: PPUSH
4001: LD_INT 3
4003: PPUSH
4004: LD_VAR 0 11
4008: PPUSH
4009: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4013: CALL_OW 44
4017: PPUSH
4018: LD_VAR 0 2
4022: PPUSH
4023: CALL_OW 52
// end ;
4027: GO 3995
4029: POP
4030: POP
// end ;
4031: GO 3979
4033: POP
4034: POP
// for i in lab do
4035: LD_ADDR_VAR 0 2
4039: PUSH
4040: LD_VAR 0 9
4044: PUSH
4045: FOR_IN
4046: IFFALSE 4079
// begin PrepareHuman ( false , 4 , skill ) ;
4048: LD_INT 0
4050: PPUSH
4051: LD_INT 4
4053: PPUSH
4054: LD_VAR 0 11
4058: PPUSH
4059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4063: CALL_OW 44
4067: PPUSH
4068: LD_VAR 0 2
4072: PPUSH
4073: CALL_OW 52
// end ;
4077: GO 4045
4079: POP
4080: POP
// for i in tw do
4081: LD_ADDR_VAR 0 2
4085: PUSH
4086: LD_VAR 0 7
4090: PUSH
4091: FOR_IN
4092: IFFALSE 4141
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
4094: LD_VAR 0 2
4098: PPUSH
4099: LD_INT 42
4101: PUSH
4102: LD_INT 43
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 1
4111: PPUSH
4112: LD_INT 2
4114: PPUSH
4115: CALL_OW 12
4119: ARRAY
4120: PPUSH
4121: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
4125: LD_VAR 0 11
4129: PPUSH
4130: LD_VAR 0 2
4134: PPUSH
4135: CALL 775 0 2
// end ;
4139: GO 4091
4141: POP
4142: POP
// for i in bar do
4143: LD_ADDR_VAR 0 2
4147: PUSH
4148: LD_VAR 0 8
4152: PUSH
4153: FOR_IN
4154: IFFALSE 4187
// begin PrepareHuman ( false , 1 , skill ) ;
4156: LD_INT 0
4158: PPUSH
4159: LD_INT 1
4161: PPUSH
4162: LD_VAR 0 11
4166: PPUSH
4167: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4171: CALL_OW 44
4175: PPUSH
4176: LD_VAR 0 2
4180: PPUSH
4181: CALL_OW 52
// end ;
4185: GO 4153
4187: POP
4188: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
4189: LD_ADDR_VAR 0 13
4193: PUSH
4194: LD_INT 100
4196: PUSH
4197: LD_INT 9
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 135
4206: PUSH
4207: LD_INT 60
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: LD_INT 41
4216: PUSH
4217: LD_INT 6
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: LD_INT 22
4226: PUSH
4227: LD_INT 9
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 84
4236: PUSH
4237: LD_INT 14
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: ST_TO_ADDR
// vehicles := [ ] ;
4251: LD_ADDR_VAR 0 12
4255: PUSH
4256: EMPTY
4257: ST_TO_ADDR
// for i in spot_xy do
4258: LD_ADDR_VAR 0 2
4262: PUSH
4263: LD_VAR 0 13
4267: PUSH
4268: FOR_IN
4269: IFFALSE 4427
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
4271: LD_ADDR_VAR 0 6
4275: PUSH
4276: LD_INT 3
4278: PPUSH
4279: LD_INT 3
4281: PPUSH
4282: LD_INT 22
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 1
4290: PPUSH
4291: LD_INT 42
4293: PUSH
4294: LD_INT 43
4296: PUSH
4297: LD_INT 44
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 3
4310: PPUSH
4311: CALL_OW 12
4315: ARRAY
4316: PPUSH
4317: LD_INT 100
4319: PPUSH
4320: CALL 497 0 7
4324: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
4325: LD_ADDR_VAR 0 12
4329: PUSH
4330: LD_VAR 0 12
4334: PPUSH
4335: LD_VAR 0 12
4339: PUSH
4340: LD_INT 1
4342: PLUS
4343: PPUSH
4344: LD_VAR 0 6
4348: PPUSH
4349: CALL_OW 2
4353: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4354: LD_VAR 0 6
4358: PPUSH
4359: LD_INT 3
4361: PPUSH
4362: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
4366: LD_VAR 0 6
4370: PPUSH
4371: LD_VAR 0 2
4375: PUSH
4376: LD_INT 1
4378: ARRAY
4379: PPUSH
4380: LD_VAR 0 2
4384: PUSH
4385: LD_INT 2
4387: ARRAY
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
4396: LD_INT 0
4398: PPUSH
4399: LD_INT 3
4401: PPUSH
4402: LD_VAR 0 11
4406: PPUSH
4407: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4411: CALL_OW 44
4415: PPUSH
4416: LD_VAR 0 6
4420: PPUSH
4421: CALL_OW 52
// end ;
4425: GO 4268
4427: POP
4428: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_INT 5
4441: PUSH
4442: LD_INT 7
4444: PUSH
4445: LD_INT 8
4447: PUSH
4448: LD_INT 9
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PUSH
4463: FOR_TO
4464: IFFALSE 4524
// begin PrepareHuman ( false , 1 , skill ) ;
4466: LD_INT 0
4468: PPUSH
4469: LD_INT 1
4471: PPUSH
4472: LD_VAR 0 11
4476: PPUSH
4477: CALL_OW 380
// un := CreateHuman ;
4481: LD_ADDR_VAR 0 5
4485: PUSH
4486: CALL_OW 44
4490: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4491: LD_VAR 0 5
4495: PPUSH
4496: LD_INT 11
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4506: LD_ADDR_EXP 55
4510: PUSH
4511: LD_EXP 55
4515: PUSH
4516: LD_VAR 0 5
4520: ADD
4521: ST_TO_ADDR
// end ;
4522: GO 4463
4524: POP
4525: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 2
4538: PUSH
4539: LD_INT 3
4541: PUSH
4542: LD_INT 4
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PUSH
4554: LD_OWVAR 67
4558: ARRAY
4559: PUSH
4560: FOR_TO
4561: IFFALSE 4621
// begin PrepareHuman ( false , 1 , skill ) ;
4563: LD_INT 0
4565: PPUSH
4566: LD_INT 1
4568: PPUSH
4569: LD_VAR 0 11
4573: PPUSH
4574: CALL_OW 380
// un := CreateHuman ;
4578: LD_ADDR_VAR 0 5
4582: PUSH
4583: CALL_OW 44
4587: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4588: LD_VAR 0 5
4592: PPUSH
4593: LD_INT 12
4595: PPUSH
4596: LD_INT 0
4598: PPUSH
4599: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4603: LD_ADDR_EXP 53
4607: PUSH
4608: LD_EXP 53
4612: PUSH
4613: LD_VAR 0 5
4617: ADD
4618: ST_TO_ADDR
// end ;
4619: GO 4560
4621: POP
4622: POP
// for i = 1 to 2 do
4623: LD_ADDR_VAR 0 2
4627: PUSH
4628: DOUBLE
4629: LD_INT 1
4631: DEC
4632: ST_TO_ADDR
4633: LD_INT 2
4635: PUSH
4636: FOR_TO
4637: IFFALSE 4730
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4639: LD_INT 1
4641: PPUSH
4642: LD_INT 1
4644: PPUSH
4645: LD_VAR 0 11
4649: PPUSH
4650: CALL_OW 380
// hc_attr := [ 8 + Difficulty , 8 + Difficulty ] ;
4654: LD_ADDR_OWVAR 29
4658: PUSH
4659: LD_INT 8
4661: PUSH
4662: LD_OWVAR 67
4666: PLUS
4667: PUSH
4668: LD_INT 8
4670: PUSH
4671: LD_OWVAR 67
4675: PLUS
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: ST_TO_ADDR
// un := CreateHuman ;
4681: LD_ADDR_VAR 0 5
4685: PUSH
4686: CALL_OW 44
4690: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4691: LD_VAR 0 5
4695: PPUSH
4696: LD_INT 39
4698: PPUSH
4699: LD_INT 12
4701: PPUSH
4702: LD_INT 3
4704: PPUSH
4705: LD_INT 0
4707: PPUSH
4708: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4712: LD_ADDR_EXP 54
4716: PUSH
4717: LD_EXP 54
4721: PUSH
4722: LD_VAR 0 5
4726: ADD
4727: ST_TO_ADDR
// end ;
4728: GO 4636
4730: POP
4731: POP
// InitHc ;
4732: CALL_OW 19
// for i = 1 to 3 do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_INT 3
4748: PUSH
4749: FOR_TO
4750: IFFALSE 4816
// begin PrepareHuman ( false , 1 , skill ) ;
4752: LD_INT 0
4754: PPUSH
4755: LD_INT 1
4757: PPUSH
4758: LD_VAR 0 11
4762: PPUSH
4763: CALL_OW 380
// un := CreateHuman ;
4767: LD_ADDR_VAR 0 5
4771: PUSH
4772: CALL_OW 44
4776: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4777: LD_VAR 0 5
4781: PPUSH
4782: LD_INT 180
4784: PPUSH
4785: LD_INT 11
4787: PPUSH
4788: LD_INT 4
4790: PPUSH
4791: LD_INT 0
4793: PPUSH
4794: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4798: LD_ADDR_EXP 58
4802: PUSH
4803: LD_EXP 58
4807: PUSH
4808: LD_VAR 0 5
4812: ADD
4813: ST_TO_ADDR
// end ;
4814: GO 4749
4816: POP
4817: POP
// ru_vehicles := vehicles ;
4818: LD_ADDR_EXP 56
4822: PUSH
4823: LD_VAR 0 12
4827: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4828: LD_ADDR_EXP 59
4832: PUSH
4833: LD_INT 131
4835: PUSH
4836: LD_INT 121
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 113
4845: PUSH
4846: LD_INT 90
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 93
4855: PUSH
4856: LD_INT 62
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 106
4870: PUSH
4871: LD_INT 54
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: LD_INT 120
4880: PUSH
4881: LD_INT 80
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 143
4890: PUSH
4891: LD_INT 120
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: PUSH
4903: LD_INT 154
4905: PUSH
4906: LD_INT 116
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: LD_INT 140
4915: PUSH
4916: LD_INT 93
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: LD_INT 130
4925: PUSH
4926: LD_INT 58
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: PUSH
4938: LD_INT 105
4940: PUSH
4941: LD_INT 106
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 134
4950: PUSH
4951: LD_INT 98
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 159
4960: PUSH
4961: LD_INT 113
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: ST_TO_ADDR
// if Difficulty = 1 then
4979: LD_OWVAR 67
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: IFFALSE 4991
// exit ;
4989: GO 5046
// for i = 1 to Difficulty - 1 do
4991: LD_ADDR_VAR 0 2
4995: PUSH
4996: DOUBLE
4997: LD_INT 1
4999: DEC
5000: ST_TO_ADDR
5001: LD_OWVAR 67
5005: PUSH
5006: LD_INT 1
5008: MINUS
5009: PUSH
5010: FOR_TO
5011: IFFALSE 5044
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
5013: LD_ADDR_EXP 57
5017: PUSH
5018: LD_EXP 57
5022: PUSH
5023: LD_INT 22
5025: PUSH
5026: LD_INT 1
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: LD_INT 43
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: ADD
5041: ST_TO_ADDR
5042: GO 5010
5044: POP
5045: POP
// end ;
5046: LD_VAR 0 1
5050: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
5051: LD_INT 22
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 21
5063: PUSH
5064: LD_INT 2
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PPUSH
5075: CALL_OW 69
5079: IFFALSE 5173
5081: GO 5083
5083: DISABLE
5084: LD_INT 0
5086: PPUSH
5087: PPUSH
// begin enable ;
5088: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
5089: LD_ADDR_VAR 0 2
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_INT 3
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 2
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PPUSH
5118: CALL_OW 69
5122: ST_TO_ADDR
// if filter then
5123: LD_VAR 0 2
5127: IFFALSE 5173
// for i in filter do
5129: LD_ADDR_VAR 0 1
5133: PUSH
5134: LD_VAR 0 2
5138: PUSH
5139: FOR_IN
5140: IFFALSE 5171
// if GetFuel ( i ) < 20 then
5142: LD_VAR 0 1
5146: PPUSH
5147: CALL_OW 261
5151: PUSH
5152: LD_INT 20
5154: LESS
5155: IFFALSE 5169
// SetFuel ( i , 20 ) ;
5157: LD_VAR 0 1
5161: PPUSH
5162: LD_INT 20
5164: PPUSH
5165: CALL_OW 240
5169: GO 5139
5171: POP
5172: POP
// end ;
5173: PPOPN 2
5175: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
5176: LD_EXP 57
5180: IFFALSE 5399
5182: GO 5184
5184: DISABLE
5185: LD_INT 0
5187: PPUSH
5188: PPUSH
5189: PPUSH
// begin enable ;
5190: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
5191: LD_ADDR_VAR 0 2
5195: PUSH
5196: LD_INT 22
5198: PUSH
5199: LD_INT 3
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 30
5208: PUSH
5209: LD_INT 3
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PPUSH
5220: CALL_OW 69
5224: ST_TO_ADDR
// can_produce := [ ] ;
5225: LD_ADDR_VAR 0 3
5229: PUSH
5230: EMPTY
5231: ST_TO_ADDR
// if not fac then
5232: LD_VAR 0 2
5236: NOT
5237: IFFALSE 5242
// begin disable ;
5239: DISABLE
// exit ;
5240: GO 5399
// end ; for i in fac do
5242: LD_ADDR_VAR 0 1
5246: PUSH
5247: LD_VAR 0 2
5251: PUSH
5252: FOR_IN
5253: IFFALSE 5291
// if UnitsInside ( i ) then
5255: LD_VAR 0 1
5259: PPUSH
5260: CALL_OW 313
5264: IFFALSE 5289
// can_produce := Insert ( can_produce , 1 , i ) ;
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_VAR 0 3
5275: PPUSH
5276: LD_INT 1
5278: PPUSH
5279: LD_VAR 0 1
5283: PPUSH
5284: CALL_OW 2
5288: ST_TO_ADDR
5289: GO 5252
5291: POP
5292: POP
// if not can_produce then
5293: LD_VAR 0 3
5297: NOT
5298: IFFALSE 5302
// exit ;
5300: GO 5399
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
5302: LD_VAR 0 3
5306: PUSH
5307: LD_INT 1
5309: PPUSH
5310: LD_VAR 0 3
5314: PPUSH
5315: CALL_OW 12
5319: ARRAY
5320: PPUSH
5321: LD_EXP 57
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: LD_EXP 57
5334: PUSH
5335: LD_INT 2
5337: ARRAY
5338: PPUSH
5339: LD_EXP 57
5343: PUSH
5344: LD_INT 3
5346: ARRAY
5347: PPUSH
5348: LD_EXP 57
5352: PUSH
5353: LD_INT 4
5355: ARRAY
5356: PPUSH
5357: CALL_OW 125
// for i = 1 to 4 do
5361: LD_ADDR_VAR 0 1
5365: PUSH
5366: DOUBLE
5367: LD_INT 1
5369: DEC
5370: ST_TO_ADDR
5371: LD_INT 4
5373: PUSH
5374: FOR_TO
5375: IFFALSE 5397
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
5377: LD_ADDR_EXP 57
5381: PUSH
5382: LD_EXP 57
5386: PPUSH
5387: LD_INT 1
5389: PPUSH
5390: CALL_OW 3
5394: ST_TO_ADDR
5395: GO 5374
5397: POP
5398: POP
// end ;
5399: PPOPN 3
5401: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
5402: LD_INT 0
5404: PPUSH
5405: PPUSH
5406: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5407: LD_ADDR_VAR 0 2
5411: PUSH
5412: DOUBLE
5413: LD_INT 1
5415: DEC
5416: ST_TO_ADDR
5417: LD_INT 2
5419: PUSH
5420: LD_INT 3
5422: PUSH
5423: LD_INT 4
5425: PUSH
5426: LD_INT 4
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: LD_OWVAR 67
5439: ARRAY
5440: PUSH
5441: FOR_TO
5442: IFFALSE 5591
// begin PrepareHuman ( false , 3 , 3 ) ;
5444: LD_INT 0
5446: PPUSH
5447: LD_INT 3
5449: PPUSH
5450: LD_INT 3
5452: PPUSH
5453: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
5457: LD_ADDR_VAR 0 3
5461: PUSH
5462: LD_INT 3
5464: PPUSH
5465: LD_INT 3
5467: PPUSH
5468: LD_INT 22
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: LD_INT 1
5476: PPUSH
5477: LD_INT 43
5479: PUSH
5480: LD_INT 42
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 1
5489: PPUSH
5490: LD_INT 2
5492: PPUSH
5493: CALL_OW 12
5497: ARRAY
5498: PPUSH
5499: LD_INT 70
5501: PPUSH
5502: CALL 497 0 7
5506: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5507: LD_VAR 0 3
5511: PPUSH
5512: LD_INT 4
5514: PPUSH
5515: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5519: LD_VAR 0 3
5523: PPUSH
5524: LD_INT 229
5526: PPUSH
5527: LD_INT 44
5529: PPUSH
5530: LD_INT 0
5532: PPUSH
5533: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5537: CALL_OW 44
5541: PPUSH
5542: LD_VAR 0 3
5546: PPUSH
5547: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5551: LD_ADDR_EXP 56
5555: PUSH
5556: LD_EXP 56
5560: PUSH
5561: LD_VAR 0 3
5565: ADD
5566: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5567: LD_VAR 0 3
5571: PPUSH
5572: LD_INT 191
5574: PPUSH
5575: LD_INT 32
5577: PPUSH
5578: CALL_OW 111
// Wait ( 0 0$02 ) ;
5582: LD_INT 70
5584: PPUSH
5585: CALL_OW 67
// end ;
5589: GO 5441
5591: POP
5592: POP
// end ;
5593: LD_VAR 0 1
5597: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5598: LD_EXP 31
5602: PUSH
5603: LD_EXP 56
5607: AND
5608: IFFALSE 5782
5610: GO 5612
5612: DISABLE
5613: LD_INT 0
5615: PPUSH
5616: PPUSH
5617: PPUSH
// begin wait ( 0 0$50 ) ;
5618: LD_INT 1750
5620: PPUSH
5621: CALL_OW 67
// tmp := ru_vehicles ;
5625: LD_ADDR_VAR 0 3
5629: PUSH
5630: LD_EXP 56
5634: ST_TO_ADDR
// if not tmp then
5635: LD_VAR 0 3
5639: NOT
5640: IFFALSE 5644
// exit ;
5642: GO 5782
// repeat wait ( 0 0$1 ) ;
5644: LD_INT 35
5646: PPUSH
5647: CALL_OW 67
// for i in tmp do
5651: LD_ADDR_VAR 0 1
5655: PUSH
5656: LD_VAR 0 3
5660: PUSH
5661: FOR_IN
5662: IFFALSE 5773
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5664: LD_ADDR_VAR 0 2
5668: PUSH
5669: LD_INT 22
5671: PUSH
5672: LD_INT 1
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: LD_VAR 0 1
5683: PPUSH
5684: CALL_OW 74
5688: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5689: LD_VAR 0 1
5693: PPUSH
5694: LD_VAR 0 2
5698: PPUSH
5699: CALL_OW 296
5703: PUSH
5704: LD_INT 10
5706: GREATER
5707: IFFALSE 5726
// ComAgressiveMove ( i , 69 , 101 ) else
5709: LD_VAR 0 1
5713: PPUSH
5714: LD_INT 69
5716: PPUSH
5717: LD_INT 101
5719: PPUSH
5720: CALL_OW 114
5724: GO 5740
// ComAttackUnit ( i , enemy ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: CALL_OW 115
// if GetLives ( i ) < 250 then
5740: LD_VAR 0 1
5744: PPUSH
5745: CALL_OW 256
5749: PUSH
5750: LD_INT 250
5752: LESS
5753: IFFALSE 5771
// tmp := tmp diff i ;
5755: LD_ADDR_VAR 0 3
5759: PUSH
5760: LD_VAR 0 3
5764: PUSH
5765: LD_VAR 0 1
5769: DIFF
5770: ST_TO_ADDR
// end ;
5771: GO 5661
5773: POP
5774: POP
// until not tmp ;
5775: LD_VAR 0 3
5779: NOT
5780: IFFALSE 5644
// end ; end_of_file
5782: PPOPN 3
5784: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
// InGameOn ;
5794: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5798: LD_EXP 37
5802: PPUSH
5803: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5807: LD_EXP 37
5811: PPUSH
5812: LD_EXP 44
5816: PPUSH
5817: CALL_OW 119
// if Bierezov then
5821: LD_EXP 45
5825: IFFALSE 5841
// ComTurnUnit ( Bierezov , Cornel ) ;
5827: LD_EXP 45
5831: PPUSH
5832: LD_EXP 44
5836: PPUSH
5837: CALL_OW 119
// for i in jmm_units do
5841: LD_ADDR_VAR 0 2
5845: PUSH
5846: LD_EXP 4
5850: PUSH
5851: FOR_IN
5852: IFFALSE 5870
// ComTurnUnit ( i , Cornel ) ;
5854: LD_VAR 0 2
5858: PPUSH
5859: LD_EXP 44
5863: PPUSH
5864: CALL_OW 119
5868: GO 5851
5870: POP
5871: POP
// units := cornel_units union Cornel ;
5872: LD_ADDR_VAR 0 3
5876: PUSH
5877: LD_EXP 6
5881: PUSH
5882: LD_EXP 44
5886: UNION
5887: ST_TO_ADDR
// repeat wait ( 1 ) ;
5888: LD_INT 1
5890: PPUSH
5891: CALL_OW 67
// for i in units do
5895: LD_ADDR_VAR 0 2
5899: PUSH
5900: LD_VAR 0 3
5904: PUSH
5905: FOR_IN
5906: IFFALSE 5939
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5908: LD_VAR 0 2
5912: PPUSH
5913: LD_EXP 37
5917: PPUSH
5918: CALL_OW 250
5922: PPUSH
5923: LD_EXP 37
5927: PPUSH
5928: CALL_OW 251
5932: PPUSH
5933: CALL_OW 111
5937: GO 5905
5939: POP
5940: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5941: LD_VAR 0 3
5945: PPUSH
5946: LD_INT 92
5948: PUSH
5949: LD_EXP 37
5953: PPUSH
5954: CALL_OW 250
5958: PUSH
5959: LD_EXP 37
5963: PPUSH
5964: CALL_OW 251
5968: PUSH
5969: LD_INT 10
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PPUSH
5978: CALL_OW 72
5982: PUSH
5983: LD_VAR 0 3
5987: EQUAL
5988: IFFALSE 5888
// for i in units do
5990: LD_ADDR_VAR 0 2
5994: PUSH
5995: LD_VAR 0 3
5999: PUSH
6000: FOR_IN
6001: IFFALSE 6019
// ComTurnUnit ( i , JMM ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_EXP 37
6012: PPUSH
6013: CALL_OW 119
6017: GO 6000
6019: POP
6020: POP
// ComTurnUnit ( Cornel , JMM ) ;
6021: LD_EXP 44
6025: PPUSH
6026: LD_EXP 37
6030: PPUSH
6031: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
6035: LD_EXP 37
6039: PPUSH
6040: LD_STRING D1-JMM-1
6042: PPUSH
6043: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
6047: LD_EXP 44
6051: PPUSH
6052: LD_STRING D1-Corn-1
6054: PPUSH
6055: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
6059: LD_EXP 37
6063: PPUSH
6064: LD_EXP 44
6068: PPUSH
6069: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
6073: LD_EXP 44
6077: PPUSH
6078: LD_EXP 37
6082: PPUSH
6083: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
6087: LD_INT 35
6089: PPUSH
6090: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
6094: LD_EXP 37
6098: PPUSH
6099: LD_EXP 44
6103: PPUSH
6104: CALL_OW 296
6108: PUSH
6109: LD_INT 6
6111: LESS
6112: IFFALSE 6087
// ChangeSideFog ( 4 , 1 ) ;
6114: LD_INT 4
6116: PPUSH
6117: LD_INT 1
6119: PPUSH
6120: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
6124: LD_EXP 37
6128: PPUSH
6129: LD_EXP 44
6133: PPUSH
6134: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6138: LD_EXP 44
6142: PPUSH
6143: LD_EXP 37
6147: PPUSH
6148: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
6152: LD_EXP 37
6156: PPUSH
6157: LD_STRING D1-JMM-2
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
6164: LD_EXP 37
6168: PPUSH
6169: LD_STRING D1-JMM-2a
6171: PPUSH
6172: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
6176: LD_EXP 44
6180: PPUSH
6181: LD_STRING D1-Corn-2
6183: PPUSH
6184: CALL_OW 88
// if bierezov_exist or debug then
6188: LD_EXP 7
6192: PUSH
6193: LD_EXP 1
6197: OR
6198: IFFALSE 6439
// begin ComTurnUnit ( Cornel , Bierezov ) ;
6200: LD_EXP 44
6204: PPUSH
6205: LD_EXP 45
6209: PPUSH
6210: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
6214: LD_INT 10
6216: PPUSH
6217: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
6221: LD_EXP 44
6225: PPUSH
6226: LD_STRING D1a-Corn-1
6228: PPUSH
6229: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
6233: LD_EXP 37
6237: PPUSH
6238: LD_EXP 45
6242: PPUSH
6243: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
6247: LD_EXP 45
6251: PPUSH
6252: LD_EXP 37
6256: PPUSH
6257: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
6261: LD_EXP 37
6265: PPUSH
6266: LD_STRING D1a-JMM-1
6268: PPUSH
6269: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
6273: LD_EXP 37
6277: PPUSH
6278: LD_EXP 44
6282: PPUSH
6283: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6287: LD_EXP 44
6291: PPUSH
6292: LD_EXP 37
6296: PPUSH
6297: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
6301: LD_EXP 44
6305: PPUSH
6306: LD_STRING D1a-Corn-2
6308: PPUSH
6309: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
6313: LD_EXP 37
6317: PPUSH
6318: LD_STRING D1a-JMM-2
6320: PPUSH
6321: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
6325: LD_EXP 44
6329: PPUSH
6330: LD_STRING D1a-Corn-3
6332: PPUSH
6333: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
6337: LD_EXP 37
6341: PPUSH
6342: LD_STRING D1a-JMM-3
6344: PPUSH
6345: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
6349: LD_EXP 44
6353: PPUSH
6354: LD_STRING D1a-Corn-4
6356: PPUSH
6357: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
6361: LD_EXP 37
6365: PPUSH
6366: LD_STRING D1a-JMM-4
6368: PPUSH
6369: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
6373: LD_EXP 44
6377: PPUSH
6378: LD_STRING D1a-Corn-5
6380: PPUSH
6381: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
6385: LD_EXP 45
6389: PPUSH
6390: LD_EXP 44
6394: PPUSH
6395: CALL_OW 250
6399: PPUSH
6400: LD_EXP 44
6404: PPUSH
6405: CALL_OW 251
6409: PUSH
6410: LD_INT 2
6412: MINUS
6413: PPUSH
6414: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
6418: LD_EXP 45
6422: PPUSH
6423: LD_EXP 44
6427: PPUSH
6428: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
6432: LD_INT 10
6434: PPUSH
6435: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
6439: LD_EXP 37
6443: PPUSH
6444: LD_STRING D1b-JMM-1
6446: PPUSH
6447: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
6451: LD_EXP 44
6455: PPUSH
6456: LD_STRING D1b-Corn-1
6458: PPUSH
6459: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6463: LD_EXP 37
6467: PPUSH
6468: LD_STRING D1b-JMM-2
6470: PPUSH
6471: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6475: LD_EXP 44
6479: PPUSH
6480: LD_STRING D1b-Corn-2
6482: PPUSH
6483: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6487: LD_EXP 37
6491: PPUSH
6492: LD_STRING D1b-JMM-3
6494: PPUSH
6495: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6499: LD_INT 10
6501: PPUSH
6502: CALL_OW 67
// SayRadioNoFace ( Powell , D1b-Pow-3 ) ;
6506: LD_EXP 46
6510: PPUSH
6511: LD_STRING D1b-Pow-3
6513: PPUSH
6514: CALL_OW 586
// Say ( JMM , D1b-JMM-4 ) ;
6518: LD_EXP 37
6522: PPUSH
6523: LD_STRING D1b-JMM-4
6525: PPUSH
6526: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6530: LD_EXP 44
6534: PPUSH
6535: LD_STRING D1b-Corn-4
6537: PPUSH
6538: CALL_OW 88
// if Khatam then
6542: LD_EXP 41
6546: IFFALSE 6562
// Say ( Khatam , D1b-Khat-4 ) else
6548: LD_EXP 41
6552: PPUSH
6553: LD_STRING D1b-Khat-4
6555: PPUSH
6556: CALL_OW 88
6560: GO 6598
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6562: LD_EXP 6
6566: PPUSH
6567: LD_INT 26
6569: PUSH
6570: LD_INT 1
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PPUSH
6577: CALL_OW 72
6581: PUSH
6582: LD_EXP 44
6586: PUSH
6587: EMPTY
6588: LIST
6589: DIFF
6590: PPUSH
6591: LD_STRING D1b-Sol1-4
6593: PPUSH
6594: CALL 585 0 2
// if Cyrus then
6598: LD_EXP 39
6602: IFFALSE 6616
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6604: LD_EXP 39
6608: PPUSH
6609: LD_STRING D1b-Cyrus-4
6611: PPUSH
6612: CALL_OW 88
// if Lisa then
6616: LD_EXP 40
6620: IFFALSE 6678
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6622: LD_EXP 40
6626: PPUSH
6627: LD_STRING D1b-Lisa-4
6629: PPUSH
6630: CALL_OW 88
// if Cyrus then
6634: LD_EXP 39
6638: IFFALSE 6678
// begin if not IsInUnit ( Cyrus ) then
6640: LD_EXP 39
6644: PPUSH
6645: CALL_OW 310
6649: NOT
6650: IFFALSE 6666
// ComTurnUnit ( Cyrus , Lisa ) ;
6652: LD_EXP 39
6656: PPUSH
6657: LD_EXP 40
6661: PPUSH
6662: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6666: LD_EXP 39
6670: PPUSH
6671: LD_STRING D1b-Cyrus-5
6673: PPUSH
6674: CALL_OW 88
// end ; end ; SelectGroup ;
6678: CALL 3052 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6682: LD_EXP 37
6686: PPUSH
6687: LD_STRING D1d-JMM-1
6689: PPUSH
6690: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6694: LD_EXP 44
6698: PPUSH
6699: LD_STRING D1d-Corn-1
6701: PPUSH
6702: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6706: LD_ADDR_VAR 0 2
6710: PUSH
6711: LD_EXP 4
6715: PUSH
6716: LD_EXP 6
6720: ADD
6721: PUSH
6722: LD_EXP 37
6726: ADD
6727: PUSH
6728: FOR_IN
6729: IFFALSE 6742
// ComHold ( i ) ;
6731: LD_VAR 0 2
6735: PPUSH
6736: CALL_OW 140
6740: GO 6728
6742: POP
6743: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6744: LD_ADDR_VAR 0 4
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 1
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 21
6761: PUSH
6762: LD_INT 2
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PPUSH
6773: CALL_OW 69
6777: ST_TO_ADDR
// if vehicles then
6778: LD_VAR 0 4
6782: IFFALSE 7120
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6784: LD_EXP 6
6788: PPUSH
6789: LD_INT 55
6791: PUSH
6792: EMPTY
6793: LIST
6794: PPUSH
6795: CALL_OW 72
6799: IFFALSE 6838
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6801: LD_ADDR_VAR 0 2
6805: PUSH
6806: LD_EXP 6
6810: PPUSH
6811: LD_INT 55
6813: PUSH
6814: EMPTY
6815: LIST
6816: PPUSH
6817: CALL_OW 72
6821: PUSH
6822: FOR_IN
6823: IFFALSE 6836
// ComExitVehicle ( i ) ;
6825: LD_VAR 0 2
6829: PPUSH
6830: CALL_OW 121
6834: GO 6822
6836: POP
6837: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6838: LD_ADDR_VAR 0 5
6842: PUSH
6843: LD_VAR 0 4
6847: PPUSH
6848: LD_INT 34
6850: PUSH
6851: LD_INT 51
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 72
6862: ST_TO_ADDR
// if cargos then
6863: LD_VAR 0 5
6867: IFFALSE 7050
// begin vehicles := cargos ;
6869: LD_ADDR_VAR 0 4
6873: PUSH
6874: LD_VAR 0 5
6878: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6879: LD_ADDR_VAR 0 6
6883: PUSH
6884: LD_STRING 02_resources_4
6886: PPUSH
6887: LD_INT 0
6889: PPUSH
6890: CALL_OW 30
6894: ST_TO_ADDR
// if debug and not resources then
6895: LD_EXP 1
6899: PUSH
6900: LD_VAR 0 6
6904: NOT
6905: AND
6906: IFFALSE 6916
// resources := 160 ;
6908: LD_ADDR_VAR 0 6
6912: PUSH
6913: LD_INT 160
6915: ST_TO_ADDR
// if resources mod 10 then
6916: LD_VAR 0 6
6920: PUSH
6921: LD_INT 10
6923: MOD
6924: IFFALSE 6946
// resources := resources - resources mod 10 ;
6926: LD_ADDR_VAR 0 6
6930: PUSH
6931: LD_VAR 0 6
6935: PUSH
6936: LD_VAR 0 6
6940: PUSH
6941: LD_INT 10
6943: MOD
6944: MINUS
6945: ST_TO_ADDR
// if resources then
6946: LD_VAR 0 6
6950: IFFALSE 7050
// for i in cargos do
6952: LD_ADDR_VAR 0 2
6956: PUSH
6957: LD_VAR 0 5
6961: PUSH
6962: FOR_IN
6963: IFFALSE 7048
// begin if resources < 100 then
6965: LD_VAR 0 6
6969: PUSH
6970: LD_INT 100
6972: LESS
6973: IFFALSE 6995
// begin cargo := resources ;
6975: LD_ADDR_VAR 0 7
6979: PUSH
6980: LD_VAR 0 6
6984: ST_TO_ADDR
// resources := 0 ;
6985: LD_ADDR_VAR 0 6
6989: PUSH
6990: LD_INT 0
6992: ST_TO_ADDR
// end else
6993: GO 7017
// begin cargo := 100 ;
6995: LD_ADDR_VAR 0 7
6999: PUSH
7000: LD_INT 100
7002: ST_TO_ADDR
// resources := resources - 100 ;
7003: LD_ADDR_VAR 0 6
7007: PUSH
7008: LD_VAR 0 6
7012: PUSH
7013: LD_INT 100
7015: MINUS
7016: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
7017: LD_VAR 0 2
7021: PPUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_VAR 0 7
7029: PPUSH
7030: CALL_OW 290
// if resources = 0 then
7034: LD_VAR 0 6
7038: PUSH
7039: LD_INT 0
7041: EQUAL
7042: IFFALSE 7046
// break ;
7044: GO 7048
// end ;
7046: GO 6962
7048: POP
7049: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
7050: LD_VAR 0 4
7054: PUSH
7055: LD_INT 1
7057: ARRAY
7058: PPUSH
7059: CALL_OW 311
7063: PPUSH
7064: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
7068: LD_VAR 0 4
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: LD_INT 4
7079: PPUSH
7080: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
7084: LD_EXP 44
7088: PPUSH
7089: LD_VAR 0 4
7093: PUSH
7094: LD_INT 1
7096: ARRAY
7097: PPUSH
7098: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
7102: LD_INT 35
7104: PPUSH
7105: CALL_OW 67
// until IsInUnit ( Cornel ) ;
7109: LD_EXP 44
7113: PPUSH
7114: CALL_OW 310
7118: IFFALSE 7102
// end ; InGameOff ;
7120: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
7124: LD_STRING M1
7126: PPUSH
7127: CALL_OW 337
// SaveForQuickRestart ;
7131: CALL_OW 22
// cornel_active := true ;
7135: LD_ADDR_EXP 8
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// end ;
7143: LD_VAR 0 1
7147: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
7148: LD_EXP 37
7152: PPUSH
7153: LD_EXP 47
7157: PPUSH
7158: CALL_OW 296
7162: PUSH
7163: LD_INT 10
7165: LESS
7166: IFFALSE 8549
7168: GO 7170
7170: DISABLE
7171: LD_INT 0
7173: PPUSH
7174: PPUSH
7175: PPUSH
7176: PPUSH
7177: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
7178: LD_ADDR_VAR 0 2
7182: PUSH
7183: LD_INT 89
7185: PUSH
7186: LD_INT 34
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 138
7195: PUSH
7196: LD_INT 63
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 196
7205: PUSH
7206: LD_INT 84
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 135
7215: PUSH
7216: LD_INT 52
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 103
7225: PUSH
7226: LD_INT 39
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: LD_INT 58
7235: PUSH
7236: LD_INT 30
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 38
7245: PUSH
7246: LD_INT 51
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: ST_TO_ADDR
// Video ( true ) ;
7262: LD_INT 1
7264: PPUSH
7265: CALL 76724 0 1
// if jmm_units then
7269: LD_EXP 4
7273: IFFALSE 7349
// for i in jmm_units do
7275: LD_ADDR_VAR 0 1
7279: PUSH
7280: LD_EXP 4
7284: PUSH
7285: FOR_IN
7286: IFFALSE 7347
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_EXP 37
7297: PPUSH
7298: CALL_OW 296
7302: PUSH
7303: LD_INT 10
7305: LESS
7306: PUSH
7307: LD_VAR 0 1
7311: PPUSH
7312: CALL_OW 310
7316: NOT
7317: AND
7318: IFFALSE 7336
// ComTurnUnit ( i , JMM ) else
7320: LD_VAR 0 1
7324: PPUSH
7325: LD_EXP 37
7329: PPUSH
7330: CALL_OW 119
7334: GO 7345
// ComHold ( i ) ;
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 140
// end ;
7345: GO 7285
7347: POP
7348: POP
// if IsInUnit ( JMM ) then
7349: LD_EXP 37
7353: PPUSH
7354: CALL_OW 310
7358: IFFALSE 7383
// begin ComExitVehicle ( JMM ) ;
7360: LD_EXP 37
7364: PPUSH
7365: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
7369: LD_EXP 37
7373: PPUSH
7374: LD_EXP 47
7378: PPUSH
7379: CALL_OW 172
// end ; Wait ( 10 ) ;
7383: LD_INT 10
7385: PPUSH
7386: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
7390: LD_EXP 37
7394: PPUSH
7395: LD_EXP 47
7399: PPUSH
7400: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
7404: LD_INT 35
7406: PPUSH
7407: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
7411: LD_EXP 37
7415: PPUSH
7416: LD_EXP 47
7420: PPUSH
7421: CALL_OW 296
7425: PUSH
7426: LD_INT 6
7428: LESS
7429: IFFALSE 7404
// ComTurnUnit ( JMM , Lynch ) ;
7431: LD_EXP 37
7435: PPUSH
7436: LD_EXP 47
7440: PPUSH
7441: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
7445: LD_ADDR_VAR 0 1
7449: PUSH
7450: LD_EXP 47
7454: PUSH
7455: LD_EXP 48
7459: PUSH
7460: LD_EXP 49
7464: PUSH
7465: LD_EXP 50
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: PUSH
7476: FOR_IN
7477: IFFALSE 7495
// ComTurnUnit ( i , JMM ) ;
7479: LD_VAR 0 1
7483: PPUSH
7484: LD_EXP 37
7488: PPUSH
7489: CALL_OW 119
7493: GO 7476
7495: POP
7496: POP
// Wait ( 0 0$0.3 ) ;
7497: LD_INT 10
7499: PPUSH
7500: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7504: LD_EXP 37
7508: PPUSH
7509: LD_STRING D2-JMM-1
7511: PPUSH
7512: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7516: LD_EXP 47
7520: PPUSH
7521: LD_STRING D2-Sol1-1
7523: PPUSH
7524: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7528: LD_EXP 37
7532: PPUSH
7533: LD_STRING D2-JMM-2
7535: PPUSH
7536: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7540: LD_EXP 47
7544: PPUSH
7545: LD_STRING D2-Sol1-2
7547: PPUSH
7548: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7552: LD_EXP 37
7556: PPUSH
7557: LD_STRING D2-JMM-3
7559: PPUSH
7560: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7564: LD_EXP 47
7568: PPUSH
7569: LD_STRING D2-Sol1-3
7571: PPUSH
7572: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_INT 22
7583: PUSH
7584: LD_INT 8
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PPUSH
7591: CALL_OW 69
7595: PUSH
7596: FOR_IN
7597: IFFALSE 7613
// SetSide ( i , 1 ) ;
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_INT 1
7606: PPUSH
7607: CALL_OW 235
7611: GO 7596
7613: POP
7614: POP
// Say ( JMM , D2-JMM-4 ) ;
7615: LD_EXP 37
7619: PPUSH
7620: LD_STRING D2-JMM-4
7622: PPUSH
7623: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7627: LD_INT 1
7629: PPUSH
7630: LD_INT 5
7632: PPUSH
7633: CALL_OW 332
// for i = 1 to points do
7637: LD_ADDR_VAR 0 1
7641: PUSH
7642: DOUBLE
7643: LD_INT 1
7645: DEC
7646: ST_TO_ADDR
7647: LD_VAR 0 2
7651: PUSH
7652: FOR_TO
7653: IFFALSE 7828
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7655: LD_VAR 0 2
7659: PUSH
7660: LD_VAR 0 1
7664: ARRAY
7665: PUSH
7666: LD_INT 1
7668: ARRAY
7669: PPUSH
7670: LD_VAR 0 2
7674: PUSH
7675: LD_VAR 0 1
7679: ARRAY
7680: PUSH
7681: LD_INT 2
7683: ARRAY
7684: PPUSH
7685: CALL_OW 84
// if i = 1 then
7689: LD_VAR 0 1
7693: PUSH
7694: LD_INT 1
7696: EQUAL
7697: IFFALSE 7711
// Say ( Lynch , D2-Sol1-4 ) ;
7699: LD_EXP 47
7703: PPUSH
7704: LD_STRING D2-Sol1-4
7706: PPUSH
7707: CALL_OW 88
// if i = 2 then
7711: LD_VAR 0 1
7715: PUSH
7716: LD_INT 2
7718: EQUAL
7719: IFFALSE 7733
// Say ( JMM , D2-JMM-5 ) ;
7721: LD_EXP 37
7725: PPUSH
7726: LD_STRING D2-JMM-5
7728: PPUSH
7729: CALL_OW 88
// if i = 4 then
7733: LD_VAR 0 1
7737: PUSH
7738: LD_INT 4
7740: EQUAL
7741: IFFALSE 7765
// begin RevealFogArea ( 1 , troopsArea ) ;
7743: LD_INT 1
7745: PPUSH
7746: LD_INT 6
7748: PPUSH
7749: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7753: LD_EXP 47
7757: PPUSH
7758: LD_STRING D2-Sol1-5
7760: PPUSH
7761: CALL_OW 88
// end ; if i = 5 then
7765: LD_VAR 0 1
7769: PUSH
7770: LD_INT 5
7772: EQUAL
7773: IFFALSE 7787
// Say ( JMM , D2-JMM-6 ) ;
7775: LD_EXP 37
7779: PPUSH
7780: LD_STRING D2-JMM-6
7782: PPUSH
7783: CALL_OW 88
// if i = 7 then
7787: LD_VAR 0 1
7791: PUSH
7792: LD_INT 7
7794: EQUAL
7795: IFFALSE 7819
// begin RevealFogArea ( 1 , forestArea ) ;
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 7
7802: PPUSH
7803: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7807: LD_EXP 47
7811: PPUSH
7812: LD_STRING D2-Sol1-6
7814: PPUSH
7815: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7819: LD_INT 46
7821: PPUSH
7822: CALL_OW 67
// end ;
7826: GO 7652
7828: POP
7829: POP
// CenterNowOnUnits ( JMM ) ;
7830: LD_EXP 37
7834: PPUSH
7835: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7839: LD_EXP 37
7843: PPUSH
7844: LD_STRING D2-JMM-7
7846: PPUSH
7847: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7851: LD_EXP 47
7855: PPUSH
7856: LD_STRING D2-Sol1-7
7858: PPUSH
7859: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7863: LD_EXP 37
7867: PPUSH
7868: LD_STRING D2-JMM-8
7870: PPUSH
7871: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7875: LD_ADDR_VAR 0 4
7879: PUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 30
7892: PUSH
7893: LD_INT 31
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 69
7908: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7909: LD_EXP 47
7913: PPUSH
7914: LD_VAR 0 4
7918: PUSH
7919: LD_INT 1
7921: ARRAY
7922: PPUSH
7923: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7927: LD_INT 65
7929: PPUSH
7930: LD_INT 101
7932: PPUSH
7933: CALL_OW 428
7937: IFFALSE 7960
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7939: LD_INT 65
7941: PPUSH
7942: LD_INT 101
7944: PPUSH
7945: CALL_OW 428
7949: PPUSH
7950: LD_INT 75
7952: PPUSH
7953: LD_INT 100
7955: PPUSH
7956: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7960: LD_INT 66
7962: PPUSH
7963: LD_INT 103
7965: PPUSH
7966: CALL_OW 428
7970: IFFALSE 7993
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7972: LD_INT 66
7974: PPUSH
7975: LD_INT 103
7977: PPUSH
7978: CALL_OW 428
7982: PPUSH
7983: LD_INT 75
7985: PPUSH
7986: LD_INT 100
7988: PPUSH
7989: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7993: LD_ADDR_VAR 0 5
7997: PUSH
7998: LD_INT 22
8000: PUSH
8001: LD_INT 1
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 21
8010: PUSH
8011: LD_INT 2
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: LD_INT 91
8020: PUSH
8021: LD_EXP 37
8025: PUSH
8026: LD_INT 7
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: PPUSH
8039: CALL_OW 69
8043: ST_TO_ADDR
// if tmp then
8044: LD_VAR 0 5
8048: IFFALSE 8065
// ComMoveXY ( tmp , 75 , 100 ) ;
8050: LD_VAR 0 5
8054: PPUSH
8055: LD_INT 75
8057: PPUSH
8058: LD_INT 100
8060: PPUSH
8061: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: LD_EXP 4
8074: PPUSH
8075: LD_INT 25
8077: PUSH
8078: LD_INT 1
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PPUSH
8085: CALL_OW 72
8089: PPUSH
8090: LD_EXP 37
8094: PPUSH
8095: CALL_OW 74
8099: ST_TO_ADDR
// if sol then
8100: LD_VAR 0 3
8104: IFFALSE 8164
// if GetDistUnits ( JMM , sol ) < 10 then
8106: LD_EXP 37
8110: PPUSH
8111: LD_VAR 0 3
8115: PPUSH
8116: CALL_OW 296
8120: PUSH
8121: LD_INT 10
8123: LESS
8124: IFFALSE 8164
// begin if IsInUnit ( sol ) then
8126: LD_VAR 0 3
8130: PPUSH
8131: CALL_OW 310
8135: IFFALSE 8146
// ComExitVehicle ( sol ) ;
8137: LD_VAR 0 3
8141: PPUSH
8142: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
8146: LD_VAR 0 3
8150: PPUSH
8151: LD_VAR 0 4
8155: PUSH
8156: LD_INT 2
8158: ARRAY
8159: PPUSH
8160: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
8164: LD_INT 10
8166: PPUSH
8167: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
8171: LD_EXP 37
8175: PPUSH
8176: LD_INT 65
8178: PPUSH
8179: LD_INT 101
8181: PPUSH
8182: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
8186: LD_EXP 37
8190: PPUSH
8191: LD_INT 63
8193: PPUSH
8194: LD_INT 100
8196: PPUSH
8197: CALL_OW 178
// tmp := 0 0$0 ;
8201: LD_ADDR_VAR 0 5
8205: PUSH
8206: LD_INT 0
8208: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8209: LD_INT 35
8211: PPUSH
8212: CALL_OW 67
// tmp := tmp + 0 0$1 ;
8216: LD_ADDR_VAR 0 5
8220: PUSH
8221: LD_VAR 0 5
8225: PUSH
8226: LD_INT 35
8228: PLUS
8229: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
8230: LD_EXP 37
8234: PPUSH
8235: LD_INT 65
8237: PPUSH
8238: LD_INT 101
8240: PPUSH
8241: CALL_OW 307
8245: PUSH
8246: LD_VAR 0 5
8250: PUSH
8251: LD_INT 175
8253: GREATER
8254: OR
8255: IFFALSE 8209
// Say ( JMM , D2a-JMM-1 ) ;
8257: LD_EXP 37
8261: PPUSH
8262: LD_STRING D2a-JMM-1
8264: PPUSH
8265: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
8269: LD_EXP 48
8273: PPUSH
8274: LD_INT 66
8276: PPUSH
8277: LD_INT 103
8279: PPUSH
8280: CALL_OW 111
// tmp := 0 0$0 ;
8284: LD_ADDR_VAR 0 5
8288: PUSH
8289: LD_INT 0
8291: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8292: LD_INT 35
8294: PPUSH
8295: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
8299: LD_EXP 48
8303: PPUSH
8304: LD_INT 66
8306: PPUSH
8307: LD_INT 103
8309: PPUSH
8310: CALL_OW 307
8314: PUSH
8315: LD_VAR 0 5
8319: PUSH
8320: LD_INT 175
8322: GREATER
8323: OR
8324: IFFALSE 8292
// ComTurnUnit ( Walker , JMM ) ;
8326: LD_EXP 48
8330: PPUSH
8331: LD_EXP 37
8335: PPUSH
8336: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
8340: LD_EXP 48
8344: PPUSH
8345: LD_STRING D2a-Sci1-1
8347: PPUSH
8348: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
8352: LD_EXP 37
8356: PPUSH
8357: LD_EXP 48
8361: PPUSH
8362: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
8366: LD_EXP 37
8370: PPUSH
8371: LD_STRING D2a-JMM-2
8373: PPUSH
8374: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
8378: LD_EXP 48
8382: PPUSH
8383: LD_STRING D2a-Sci1-2
8385: PPUSH
8386: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
8390: LD_EXP 37
8394: PPUSH
8395: LD_STRING D2a-JMM-3
8397: PPUSH
8398: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
8402: LD_EXP 48
8406: PPUSH
8407: LD_STRING D2a-Sci1-3
8409: PPUSH
8410: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
8414: LD_ADDR_EXP 4
8418: PUSH
8419: LD_EXP 4
8423: PUSH
8424: LD_EXP 47
8428: PUSH
8429: LD_EXP 48
8433: PUSH
8434: LD_EXP 49
8438: PUSH
8439: LD_EXP 50
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: ADD
8450: ST_TO_ADDR
// for i in jmm_units do
8451: LD_ADDR_VAR 0 1
8455: PUSH
8456: LD_EXP 4
8460: PUSH
8461: FOR_IN
8462: IFFALSE 8487
// if not IsInUnit ( i ) then
8464: LD_VAR 0 1
8468: PPUSH
8469: CALL_OW 310
8473: NOT
8474: IFFALSE 8485
// ComFree ( i ) ;
8476: LD_VAR 0 1
8480: PPUSH
8481: CALL_OW 139
8485: GO 8461
8487: POP
8488: POP
// Video ( false ) ;
8489: LD_INT 0
8491: PPUSH
8492: CALL 76724 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8496: LD_STRING MSolar1
8498: PPUSH
8499: CALL_OW 337
// jmm_on_west := true ;
8503: LD_ADDR_EXP 5
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8511: LD_INT 1050
8513: PPUSH
8514: CALL_OW 67
// frank_can_return := true ;
8518: LD_ADDR_EXP 12
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8526: LD_INT 6300
8528: PPUSH
8529: LD_INT 8400
8531: PPUSH
8532: CALL_OW 12
8536: PPUSH
8537: CALL_OW 67
// send_spec_patrol := true ;
8541: LD_ADDR_EXP 30
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// end ;
8549: PPOPN 5
8551: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8552: LD_INT 22
8554: PUSH
8555: LD_INT 1
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 34
8564: PUSH
8565: LD_INT 51
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 92
8574: PUSH
8575: LD_INT 63
8577: PUSH
8578: LD_INT 100
8580: PUSH
8581: LD_INT 5
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: PPUSH
8598: CALL_OW 69
8602: PUSH
8603: LD_EXP 5
8607: NOT
8608: AND
8609: IFFALSE 8722
8611: GO 8613
8613: DISABLE
8614: LD_INT 0
8616: PPUSH
8617: PPUSH
// begin enable ;
8618: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8619: LD_ADDR_VAR 0 2
8623: PUSH
8624: LD_INT 22
8626: PUSH
8627: LD_INT 1
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 34
8636: PUSH
8637: LD_INT 51
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 92
8646: PUSH
8647: LD_INT 63
8649: PUSH
8650: LD_INT 100
8652: PUSH
8653: LD_INT 5
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: LIST
8666: PUSH
8667: EMPTY
8668: LIST
8669: PPUSH
8670: CALL_OW 69
8674: ST_TO_ADDR
// if not filter then
8675: LD_VAR 0 2
8679: NOT
8680: IFFALSE 8684
// exit ;
8682: GO 8722
// for i in filter do
8684: LD_ADDR_VAR 0 1
8688: PUSH
8689: LD_VAR 0 2
8693: PUSH
8694: FOR_IN
8695: IFFALSE 8720
// begin SetFuel ( i , 0 ) ;
8697: LD_VAR 0 1
8701: PPUSH
8702: LD_INT 0
8704: PPUSH
8705: CALL_OW 240
// ComStop ( i ) ;
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 141
// end ;
8718: GO 8694
8720: POP
8721: POP
// end ;
8722: PPOPN 2
8724: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8725: LD_EXP 30
8729: IFFALSE 9855
8731: GO 8733
8733: DISABLE
8734: LD_INT 0
8736: PPUSH
8737: PPUSH
8738: PPUSH
8739: PPUSH
8740: PPUSH
8741: PPUSH
8742: PPUSH
// begin if not ru_spec_patrol then
8743: LD_EXP 54
8747: NOT
8748: IFFALSE 8752
// exit ;
8750: GO 9855
// dead1 := false ;
8752: LD_ADDR_VAR 0 1
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// dead2 := false ;
8760: LD_ADDR_VAR 0 2
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// inarea1 := false ;
8768: LD_ADDR_VAR 0 3
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// inarea2 := false ;
8776: LD_ADDR_VAR 0 4
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// tmp := [ ] ;
8784: LD_ADDR_VAR 0 6
8788: PUSH
8789: EMPTY
8790: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8791: LD_EXP 54
8795: PPUSH
8796: LD_INT 75
8798: PPUSH
8799: LD_INT 101
8801: PPUSH
8802: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8806: LD_INT 35
8808: PPUSH
8809: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8813: LD_INT 1
8815: PPUSH
8816: LD_EXP 54
8820: PUSH
8821: LD_INT 1
8823: ARRAY
8824: PPUSH
8825: CALL_OW 292
8829: PUSH
8830: LD_EXP 54
8834: PPUSH
8835: LD_INT 92
8837: PUSH
8838: LD_INT 75
8840: PUSH
8841: LD_INT 101
8843: PUSH
8844: LD_INT 4
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 72
8857: OR
8858: IFFALSE 8806
// ComStop ( ru_spec_patrol ) ;
8860: LD_EXP 54
8864: PPUSH
8865: CALL_OW 141
// Wait ( 0 0$02 ) ;
8869: LD_INT 70
8871: PPUSH
8872: CALL_OW 67
// DialogueOn ;
8876: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8880: LD_EXP 54
8884: PUSH
8885: LD_INT 1
8887: ARRAY
8888: PPUSH
8889: LD_STRING D8-Rus1-1
8891: PPUSH
8892: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8896: LD_EXP 37
8900: PPUSH
8901: LD_STRING D8-JMM-1
8903: PPUSH
8904: CALL_OW 88
// DialogueOff ;
8908: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8912: LD_EXP 54
8916: PPUSH
8917: LD_INT 13
8919: PPUSH
8920: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8924: LD_INT 35
8926: PPUSH
8927: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8931: LD_VAR 0 1
8935: NOT
8936: PUSH
8937: LD_EXP 54
8941: PUSH
8942: LD_INT 1
8944: ARRAY
8945: PPUSH
8946: CALL_OW 301
8950: AND
8951: IFFALSE 8961
// dead1 := true ;
8953: LD_ADDR_VAR 0 1
8957: PUSH
8958: LD_INT 1
8960: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8961: LD_VAR 0 2
8965: NOT
8966: PUSH
8967: LD_EXP 54
8971: PUSH
8972: LD_INT 2
8974: ARRAY
8975: PPUSH
8976: CALL_OW 301
8980: AND
8981: IFFALSE 8991
// dead2 := true ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 1
8990: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8991: LD_VAR 0 3
8995: NOT
8996: PUSH
8997: LD_EXP 54
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: LD_INT 14
9008: PPUSH
9009: CALL_OW 308
9013: AND
9014: IFFALSE 9024
// inarea1 := true ;
9016: LD_ADDR_VAR 0 3
9020: PUSH
9021: LD_INT 1
9023: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
9024: LD_VAR 0 4
9028: NOT
9029: PUSH
9030: LD_EXP 54
9034: PUSH
9035: LD_INT 2
9037: ARRAY
9038: PPUSH
9039: LD_INT 14
9041: PPUSH
9042: CALL_OW 308
9046: AND
9047: IFFALSE 9057
// inarea2 := true ;
9049: LD_ADDR_VAR 0 4
9053: PUSH
9054: LD_INT 1
9056: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
9057: LD_VAR 0 1
9061: PUSH
9062: LD_VAR 0 2
9066: AND
9067: PUSH
9068: LD_VAR 0 1
9072: PUSH
9073: LD_VAR 0 4
9077: AND
9078: OR
9079: PUSH
9080: LD_VAR 0 2
9084: PUSH
9085: LD_VAR 0 3
9089: AND
9090: OR
9091: PUSH
9092: LD_VAR 0 3
9096: PUSH
9097: LD_VAR 0 4
9101: AND
9102: OR
9103: IFFALSE 8924
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
9105: LD_VAR 0 3
9109: PUSH
9110: LD_VAR 0 4
9114: AND
9115: PUSH
9116: LD_VAR 0 1
9120: PUSH
9121: LD_VAR 0 4
9125: AND
9126: OR
9127: PUSH
9128: LD_VAR 0 2
9132: PUSH
9133: LD_VAR 0 3
9137: AND
9138: OR
9139: IFFALSE 9835
// begin prepare_siege := true ;
9141: LD_ADDR_EXP 31
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// DialogueOn ;
9149: CALL_OW 6
// if ( inarea1 and inarea2 ) then
9153: LD_VAR 0 3
9157: PUSH
9158: LD_VAR 0 4
9162: AND
9163: IFFALSE 9179
// Say ( JMM , D8b-JMM-1a ) else
9165: LD_EXP 37
9169: PPUSH
9170: LD_STRING D8b-JMM-1a
9172: PPUSH
9173: CALL_OW 88
9177: GO 9191
// Say ( JMM , D8b-JMM-1 ) ;
9179: LD_EXP 37
9183: PPUSH
9184: LD_STRING D8b-JMM-1
9186: PPUSH
9187: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
9191: LD_EXP 4
9195: PPUSH
9196: LD_INT 26
9198: PUSH
9199: LD_INT 1
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PPUSH
9206: CALL_OW 72
9210: PUSH
9211: LD_EXP 38
9215: PUSH
9216: LD_EXP 39
9220: PUSH
9221: LD_EXP 48
9225: PUSH
9226: LD_EXP 51
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: DIFF
9237: PPUSH
9238: LD_STRING D8b-Sol1-1
9240: PPUSH
9241: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
9245: LD_EXP 39
9249: PUSH
9250: LD_EXP 39
9254: PUSH
9255: LD_EXP 4
9259: IN
9260: AND
9261: IFFALSE 9277
// Say ( Cyrus , D8b-Cyrus-1 ) else
9263: LD_EXP 39
9267: PPUSH
9268: LD_STRING D8b-Cyrus-1
9270: PPUSH
9271: CALL_OW 88
9275: GO 9289
// Say ( JMM , D8b-JMM-1a ) ;
9277: LD_EXP 37
9281: PPUSH
9282: LD_STRING D8b-JMM-1a
9284: PPUSH
9285: CALL_OW 88
// if Lisa and Lisa in jmm_units then
9289: LD_EXP 40
9293: PUSH
9294: LD_EXP 40
9298: PUSH
9299: LD_EXP 4
9303: IN
9304: AND
9305: IFFALSE 9319
// Say ( Lisa , D8b-Lisa-2 ) ;
9307: LD_EXP 40
9311: PPUSH
9312: LD_STRING D8b-Lisa-2
9314: PPUSH
9315: CALL_OW 88
// if Bobby and Bobby in jmm_units then
9319: LD_EXP 38
9323: PUSH
9324: LD_EXP 38
9328: PUSH
9329: LD_EXP 4
9333: IN
9334: AND
9335: IFFALSE 9351
// Say ( Bobby , D8b-Bobby-1 ) else
9337: LD_EXP 38
9341: PPUSH
9342: LD_STRING D8b-Bobby-1
9344: PPUSH
9345: CALL_OW 88
9349: GO 9411
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
9351: LD_ADDR_VAR 0 5
9355: PUSH
9356: LD_EXP 4
9360: PPUSH
9361: LD_INT 26
9363: PUSH
9364: LD_INT 1
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PPUSH
9371: CALL_OW 72
9375: PUSH
9376: LD_EXP 38
9380: PUSH
9381: LD_EXP 39
9385: PUSH
9386: LD_EXP 48
9390: PUSH
9391: LD_EXP 51
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: DIFF
9402: PPUSH
9403: LD_STRING D8b-Sol2-1
9405: PPUSH
9406: CALL 585 0 2
9410: ST_TO_ADDR
// DialogueOff ;
9411: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
9415: LD_EXP 39
9419: PUSH
9420: LD_EXP 39
9424: PUSH
9425: LD_EXP 4
9429: IN
9430: AND
9431: IFFALSE 9456
// tmp := Insert ( tmp , 1 , Cyrus ) ;
9433: LD_ADDR_VAR 0 6
9437: PUSH
9438: LD_VAR 0 6
9442: PPUSH
9443: LD_INT 1
9445: PPUSH
9446: LD_EXP 39
9450: PPUSH
9451: CALL_OW 2
9455: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
9456: LD_EXP 38
9460: PUSH
9461: LD_EXP 38
9465: PUSH
9466: LD_EXP 4
9470: IN
9471: AND
9472: IFFALSE 9497
// tmp := Insert ( tmp , 1 , Bobby ) ;
9474: LD_ADDR_VAR 0 6
9478: PUSH
9479: LD_VAR 0 6
9483: PPUSH
9484: LD_INT 1
9486: PPUSH
9487: LD_EXP 38
9491: PPUSH
9492: CALL_OW 2
9496: ST_TO_ADDR
// if sol then
9497: LD_VAR 0 5
9501: IFFALSE 9526
// tmp := Insert ( tmp , 1 , sol ) ;
9503: LD_ADDR_VAR 0 6
9507: PUSH
9508: LD_VAR 0 6
9512: PPUSH
9513: LD_INT 1
9515: PPUSH
9516: LD_VAR 0 5
9520: PPUSH
9521: CALL_OW 2
9525: ST_TO_ADDR
// if tmp then
9526: LD_VAR 0 6
9530: IFFALSE 9794
// begin SetSide ( tmp , 8 ) ;
9532: LD_VAR 0 6
9536: PPUSH
9537: LD_INT 8
9539: PPUSH
9540: CALL_OW 235
// for i in tmp do
9544: LD_ADDR_VAR 0 7
9548: PUSH
9549: LD_VAR 0 6
9553: PUSH
9554: FOR_IN
9555: IFFALSE 9646
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9557: LD_VAR 0 7
9561: PPUSH
9562: CALL_OW 310
9566: PUSH
9567: LD_VAR 0 7
9571: PPUSH
9572: CALL_OW 310
9576: PPUSH
9577: CALL_OW 266
9581: PUSH
9582: LD_INT 3
9584: EQUAL
9585: AND
9586: IFFALSE 9597
// ComExitBuilding ( i ) ;
9588: LD_VAR 0 7
9592: PPUSH
9593: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9597: LD_VAR 0 7
9601: PPUSH
9602: CALL_OW 310
9606: PUSH
9607: LD_VAR 0 7
9611: PPUSH
9612: CALL_OW 310
9616: PPUSH
9617: CALL_OW 266
9621: PUSH
9622: LD_INT 2
9624: EQUAL
9625: AND
9626: IFFALSE 9637
// ComExitVehicle ( i ) ;
9628: LD_VAR 0 7
9632: PPUSH
9633: CALL_OW 121
// wait ( 0 0$1 ) ;
9637: LD_INT 35
9639: PPUSH
9640: CALL_OW 67
// end ;
9644: GO 9554
9646: POP
9647: POP
// ComFree ( tmp ) ;
9648: LD_VAR 0 6
9652: PPUSH
9653: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9657: LD_VAR 0 6
9661: PPUSH
9662: LD_INT 15
9664: PPUSH
9665: CALL_OW 173
// AddComHold ( tmp ) ;
9669: LD_VAR 0 6
9673: PPUSH
9674: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9678: LD_INT 35
9680: PPUSH
9681: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9685: LD_VAR 0 6
9689: PUSH
9690: LD_INT 1
9692: ARRAY
9693: PPUSH
9694: CALL_OW 314
9698: NOT
9699: IFFALSE 9713
// ComMoveToArea ( tmp , cyrusEscape ) ;
9701: LD_VAR 0 6
9705: PPUSH
9706: LD_INT 15
9708: PPUSH
9709: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9713: LD_VAR 0 6
9717: PUSH
9718: LD_INT 1
9720: ARRAY
9721: PPUSH
9722: LD_INT 15
9724: PPUSH
9725: CALL_OW 308
9729: IFFALSE 9784
// begin RemoveUnit ( tmp [ 1 ] ) ;
9731: LD_VAR 0 6
9735: PUSH
9736: LD_INT 1
9738: ARRAY
9739: PPUSH
9740: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9744: LD_ADDR_EXP 4
9748: PUSH
9749: LD_EXP 4
9753: PUSH
9754: LD_VAR 0 6
9758: PUSH
9759: LD_INT 1
9761: ARRAY
9762: DIFF
9763: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9764: LD_ADDR_VAR 0 6
9768: PUSH
9769: LD_VAR 0 6
9773: PUSH
9774: LD_VAR 0 6
9778: PUSH
9779: LD_INT 1
9781: ARRAY
9782: DIFF
9783: ST_TO_ADDR
// end ; until tmp = 0 ;
9784: LD_VAR 0 6
9788: PUSH
9789: LD_INT 0
9791: EQUAL
9792: IFFALSE 9678
// end ; wait ( 0 0$30 ) ;
9794: LD_INT 1050
9796: PPUSH
9797: CALL_OW 67
// if ru_spec_patrol then
9801: LD_EXP 54
9805: IFFALSE 9833
// for i in ru_spec_patrol do
9807: LD_ADDR_VAR 0 7
9811: PUSH
9812: LD_EXP 54
9816: PUSH
9817: FOR_IN
9818: IFFALSE 9831
// RemoveUnit ( i ) ;
9820: LD_VAR 0 7
9824: PPUSH
9825: CALL_OW 64
9829: GO 9817
9831: POP
9832: POP
// end else
9833: GO 9855
// begin prepare_siege := false ;
9835: LD_ADDR_EXP 31
9839: PUSH
9840: LD_INT 0
9842: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9843: LD_EXP 37
9847: PPUSH
9848: LD_STRING D8a-JMM-1
9850: PPUSH
9851: CALL_OW 88
// end ; end ;
9855: PPOPN 7
9857: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9858: LD_EXP 12
9862: IFFALSE 11130
9864: GO 9866
9866: DISABLE
9867: LD_INT 0
9869: PPUSH
9870: PPUSH
9871: PPUSH
// begin uc_side := 8 ;
9872: LD_ADDR_OWVAR 20
9876: PUSH
9877: LD_INT 8
9879: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9880: LD_ADDR_VAR 0 3
9884: PUSH
9885: LD_INT 59
9887: PUSH
9888: LD_INT 71
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 122
9897: PUSH
9898: LD_INT 117
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9909: LD_ADDR_EXP 51
9913: PUSH
9914: LD_STRING Frank
9916: PPUSH
9917: LD_INT 0
9919: PPUSH
9920: LD_STRING 
9922: PPUSH
9923: CALL 39284 0 3
9927: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9928: LD_ADDR_VAR 0 1
9932: PUSH
9933: LD_INT 1
9935: PPUSH
9936: LD_INT 2
9938: PPUSH
9939: CALL_OW 12
9943: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9944: LD_EXP 51
9948: PPUSH
9949: LD_VAR 0 3
9953: PUSH
9954: LD_VAR 0 1
9958: ARRAY
9959: PUSH
9960: LD_INT 1
9962: ARRAY
9963: PPUSH
9964: LD_VAR 0 3
9968: PUSH
9969: LD_VAR 0 1
9973: ARRAY
9974: PUSH
9975: LD_INT 2
9977: ARRAY
9978: PPUSH
9979: LD_INT 0
9981: PPUSH
9982: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9986: LD_EXP 51
9990: PPUSH
9991: LD_INT 1
9993: PPUSH
9994: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9998: LD_INT 35
10000: PPUSH
10001: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
10005: LD_EXP 51
10009: PPUSH
10010: LD_EXP 37
10014: PPUSH
10015: CALL_OW 296
10019: PUSH
10020: LD_INT 8
10022: LESS
10023: PUSH
10024: LD_EXP 51
10028: PPUSH
10029: CALL_OW 256
10033: PUSH
10034: LD_INT 250
10036: GREATER
10037: AND
10038: IFFALSE 9998
// Video ( true ) ;
10040: LD_INT 1
10042: PPUSH
10043: CALL 76724 0 1
// CenterOnUnits ( JMM ) ;
10047: LD_EXP 37
10051: PPUSH
10052: CALL_OW 85
// if IsInUnit ( JMM ) then
10056: LD_EXP 37
10060: PPUSH
10061: CALL_OW 310
10065: IFFALSE 10076
// ComFree ( JMM ) ;
10067: LD_EXP 37
10071: PPUSH
10072: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
10076: LD_EXP 37
10080: PPUSH
10081: LD_EXP 51
10085: PPUSH
10086: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
10090: LD_EXP 51
10094: PPUSH
10095: LD_EXP 37
10099: PPUSH
10100: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
10104: LD_EXP 37
10108: PPUSH
10109: LD_STRING D6-JMM-1
10111: PPUSH
10112: CALL_OW 88
// p := 0 ;
10116: LD_ADDR_VAR 0 2
10120: PUSH
10121: LD_INT 0
10123: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10124: LD_INT 35
10126: PPUSH
10127: CALL_OW 67
// p := p + 1 ;
10131: LD_ADDR_VAR 0 2
10135: PUSH
10136: LD_VAR 0 2
10140: PUSH
10141: LD_INT 1
10143: PLUS
10144: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
10145: LD_EXP 37
10149: PPUSH
10150: LD_EXP 51
10154: PPUSH
10155: CALL_OW 296
10159: PUSH
10160: LD_INT 8
10162: LESS
10163: PUSH
10164: LD_VAR 0 2
10168: PUSH
10169: LD_INT 7
10171: GREATER
10172: OR
10173: IFFALSE 10124
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
10175: LD_EXP 40
10179: PUSH
10180: LD_EXP 40
10184: PPUSH
10185: LD_EXP 51
10189: PPUSH
10190: CALL_OW 296
10194: PUSH
10195: LD_INT 20
10197: LESS
10198: AND
10199: PUSH
10200: LD_EXP 40
10204: PUSH
10205: LD_EXP 4
10209: IN
10210: AND
10211: IFFALSE 10236
// begin ComFree ( Lisa ) ;
10213: LD_EXP 40
10217: PPUSH
10218: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
10222: LD_EXP 40
10226: PPUSH
10227: LD_EXP 51
10231: PPUSH
10232: CALL_OW 172
// end ; if Lynch then
10236: LD_EXP 47
10240: IFFALSE 10265
// begin ComFree ( Lynch ) ;
10242: LD_EXP 47
10246: PPUSH
10247: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
10251: LD_EXP 47
10255: PPUSH
10256: LD_EXP 51
10260: PPUSH
10261: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
10265: LD_EXP 37
10269: PPUSH
10270: LD_EXP 51
10274: PPUSH
10275: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10279: LD_EXP 51
10283: PPUSH
10284: LD_EXP 37
10288: PPUSH
10289: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
10293: LD_EXP 51
10297: PPUSH
10298: LD_STRING D6-Frank-1
10300: PPUSH
10301: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
10305: LD_INT 69
10307: PPUSH
10308: LD_INT 20
10310: PPUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_INT 20
10316: NEG
10317: PPUSH
10318: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
10322: LD_INT 69
10324: PPUSH
10325: LD_INT 20
10327: PPUSH
10328: LD_INT 1
10330: PPUSH
10331: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
10335: LD_INT 190
10337: PPUSH
10338: LD_INT 31
10340: PPUSH
10341: LD_INT 1
10343: PPUSH
10344: LD_INT 20
10346: NEG
10347: PPUSH
10348: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
10352: LD_INT 190
10354: PPUSH
10355: LD_INT 31
10357: PPUSH
10358: LD_INT 1
10360: PPUSH
10361: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
10365: LD_INT 69
10367: PPUSH
10368: LD_INT 20
10370: PPUSH
10371: CALL_OW 84
// Wait ( 0 0$02 ) ;
10375: LD_INT 70
10377: PPUSH
10378: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
10382: LD_EXP 37
10386: PPUSH
10387: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
10391: LD_EXP 40
10395: PUSH
10396: LD_EXP 40
10400: PPUSH
10401: LD_EXP 51
10405: PPUSH
10406: CALL_OW 296
10410: PUSH
10411: LD_INT 20
10413: LESS
10414: AND
10415: PUSH
10416: LD_EXP 40
10420: PPUSH
10421: CALL_OW 302
10425: AND
10426: PUSH
10427: LD_EXP 40
10431: PUSH
10432: LD_EXP 4
10436: IN
10437: AND
10438: IFFALSE 10560
// begin ComFree ( Lisa ) ;
10440: LD_EXP 40
10444: PPUSH
10445: CALL_OW 139
// p := 0 ;
10449: LD_ADDR_VAR 0 2
10453: PUSH
10454: LD_INT 0
10456: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10457: LD_INT 35
10459: PPUSH
10460: CALL_OW 67
// p := p + 1 ;
10464: LD_ADDR_VAR 0 2
10468: PUSH
10469: LD_VAR 0 2
10473: PUSH
10474: LD_INT 1
10476: PLUS
10477: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10478: LD_EXP 40
10482: PPUSH
10483: LD_EXP 51
10487: PPUSH
10488: CALL_OW 296
10492: PUSH
10493: LD_INT 7
10495: LESS
10496: PUSH
10497: LD_VAR 0 2
10501: PUSH
10502: LD_INT 7
10504: GREATER
10505: OR
10506: IFFALSE 10457
// Say ( Lisa , D6-Lisa-1 ) ;
10508: LD_EXP 40
10512: PPUSH
10513: LD_STRING D6-Lisa-1
10515: PPUSH
10516: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10520: LD_EXP 40
10524: PPUSH
10525: LD_EXP 51
10529: PPUSH
10530: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10534: LD_EXP 51
10538: PPUSH
10539: LD_EXP 40
10543: PPUSH
10544: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10548: LD_EXP 51
10552: PPUSH
10553: LD_STRING D6-Frank-2
10555: PPUSH
10556: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10560: LD_EXP 47
10564: PUSH
10565: LD_EXP 47
10569: PPUSH
10570: LD_EXP 51
10574: PPUSH
10575: CALL_OW 296
10579: PUSH
10580: LD_INT 20
10582: LESS
10583: AND
10584: PUSH
10585: LD_EXP 47
10589: PPUSH
10590: CALL_OW 302
10594: AND
10595: IFFALSE 10788
// begin ComTurnUnit ( Lynch , JMM ) ;
10597: LD_EXP 47
10601: PPUSH
10602: LD_EXP 37
10606: PPUSH
10607: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10611: LD_EXP 51
10615: PPUSH
10616: LD_EXP 37
10620: PPUSH
10621: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10625: LD_EXP 47
10629: PPUSH
10630: LD_STRING D6-Sol1-2
10632: PPUSH
10633: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10637: LD_EXP 37
10641: PPUSH
10642: LD_STRING D6-JMM-2
10644: PPUSH
10645: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10649: LD_EXP 51
10653: PPUSH
10654: LD_STRING D6-Frank-3
10656: PPUSH
10657: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10661: LD_EXP 37
10665: PPUSH
10666: LD_STRING D6-JMM-3
10668: PPUSH
10669: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10673: LD_EXP 51
10677: PPUSH
10678: LD_STRING D6-Frank-4
10680: PPUSH
10681: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10685: LD_EXP 51
10689: PPUSH
10690: LD_STRING D6-Frank-4a
10692: PPUSH
10693: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10697: LD_EXP 37
10701: PPUSH
10702: LD_STRING D6-JMM-4
10704: PPUSH
10705: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10709: LD_EXP 51
10713: PPUSH
10714: LD_STRING D6-Frank-5
10716: PPUSH
10717: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10721: LD_EXP 40
10725: PUSH
10726: LD_EXP 40
10730: PPUSH
10731: CALL_OW 302
10735: AND
10736: PUSH
10737: LD_EXP 40
10741: PUSH
10742: LD_EXP 4
10746: IN
10747: AND
10748: IFFALSE 10762
// Say ( Lisa , D6-Lisa-5 ) ;
10750: LD_EXP 40
10754: PPUSH
10755: LD_STRING D6-Lisa-5
10757: PPUSH
10758: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10762: LD_EXP 51
10766: PPUSH
10767: LD_STRING D6-Frank-6
10769: PPUSH
10770: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10774: LD_EXP 37
10778: PPUSH
10779: LD_STRING D6-JMM-6
10781: PPUSH
10782: CALL_OW 88
// end else
10786: GO 10915
// begin ComTurnUnit ( Frank , JMM ) ;
10788: LD_EXP 51
10792: PPUSH
10793: LD_EXP 37
10797: PPUSH
10798: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10802: LD_EXP 51
10806: PPUSH
10807: LD_STRING D6-Frank-4
10809: PPUSH
10810: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10814: LD_EXP 51
10818: PPUSH
10819: LD_STRING D6-Frank-4a
10821: PPUSH
10822: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10826: LD_EXP 37
10830: PPUSH
10831: LD_STRING D6-JMM-4
10833: PPUSH
10834: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10838: LD_EXP 51
10842: PPUSH
10843: LD_STRING D6-Frank-5
10845: PPUSH
10846: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10850: LD_EXP 40
10854: PUSH
10855: LD_EXP 40
10859: PPUSH
10860: CALL_OW 302
10864: AND
10865: PUSH
10866: LD_EXP 40
10870: PUSH
10871: LD_EXP 4
10875: IN
10876: AND
10877: IFFALSE 10891
// Say ( Lisa , D6-Lisa-5 ) ;
10879: LD_EXP 40
10883: PPUSH
10884: LD_STRING D6-Lisa-5
10886: PPUSH
10887: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10891: LD_EXP 51
10895: PPUSH
10896: LD_STRING D6-Frank-6
10898: PPUSH
10899: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10903: LD_EXP 37
10907: PPUSH
10908: LD_STRING D6-JMM-6
10910: PPUSH
10911: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10915: LD_STRING Q1
10917: PPUSH
10918: CALL_OW 97
10922: PUSH
10923: LD_INT 1
10925: DOUBLE
10926: EQUAL
10927: IFTRUE 10931
10929: GO 10942
10931: POP
// frank_send_to_scout := true ; 2 :
10932: LD_ADDR_EXP 15
10936: PUSH
10937: LD_INT 1
10939: ST_TO_ADDR
10940: GO 10962
10942: LD_INT 2
10944: DOUBLE
10945: EQUAL
10946: IFTRUE 10950
10948: GO 10961
10950: POP
// frank_send_to_scout := false ; end ;
10951: LD_ADDR_EXP 15
10955: PUSH
10956: LD_INT 0
10958: ST_TO_ADDR
10959: GO 10962
10961: POP
// Video ( false ) ;
10962: LD_INT 0
10964: PPUSH
10965: CALL 76724 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10969: LD_EXP 37
10973: PUSH
10974: LD_EXP 40
10978: PUSH
10979: LD_EXP 47
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: PPUSH
10989: CALL_OW 139
// if frank_send_to_scout then
10993: LD_EXP 15
10997: IFFALSE 11051
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10999: LD_EXP 51
11003: PPUSH
11004: LD_INT 15
11006: PPUSH
11007: CALL_OW 113
// wait ( 0 0$01 ) ;
11011: LD_INT 35
11013: PPUSH
11014: CALL_OW 67
// until not See ( 1 , Frank ) ;
11018: LD_INT 1
11020: PPUSH
11021: LD_EXP 51
11025: PPUSH
11026: CALL_OW 292
11030: NOT
11031: IFFALSE 10999
// wait ( 0 0$02 ) ;
11033: LD_INT 70
11035: PPUSH
11036: CALL_OW 67
// RemoveUnit ( Frank ) ;
11040: LD_EXP 51
11044: PPUSH
11045: CALL_OW 64
// end else
11049: GO 11063
// SetSide ( Frank , 1 ) ;
11051: LD_EXP 51
11055: PPUSH
11056: LD_INT 1
11058: PPUSH
11059: CALL_OW 235
// send_attack_on_cornel_base := true ;
11063: LD_ADDR_EXP 26
11067: PUSH
11068: LD_INT 1
11070: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11071: LD_INT 35
11073: PPUSH
11074: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
11078: LD_ADDR_EXP 29
11082: PUSH
11083: LD_EXP 29
11087: PPUSH
11088: LD_STRING -
11090: PPUSH
11091: CALL 1077 0 2
11095: ST_TO_ADDR
// if debug then
11096: LD_EXP 1
11100: IFFALSE 11112
// debug_strings := time_to_prepare ;
11102: LD_ADDR_OWVAR 48
11106: PUSH
11107: LD_EXP 29
11111: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
11112: LD_EXP 29
11116: PUSH
11117: LD_INT 0
11119: EQUAL
11120: IFFALSE 11071
// cornel_prepared := true ;
11122: LD_ADDR_EXP 11
11126: PUSH
11127: LD_INT 1
11129: ST_TO_ADDR
// end ;
11130: PPOPN 3
11132: END
// every 0 0$01 trigger cornel_prepared do
11133: LD_EXP 11
11137: IFFALSE 11445
11139: GO 11141
11141: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
11142: LD_EXP 44
11146: PPUSH
11147: LD_STRING D3-Corn-1
11149: PPUSH
11150: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
11154: LD_STRING MOutWait
11156: PPUSH
11157: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
11161: LD_INT 35
11163: PPUSH
11164: CALL_OW 67
// until cornel_counter = 0 ;
11168: LD_EXP 10
11172: PUSH
11173: LD_INT 0
11175: EQUAL
11176: IFFALSE 11161
// SayRadio ( Cornel , D3a-Corn-1 ) ;
11178: LD_EXP 44
11182: PPUSH
11183: LD_STRING D3a-Corn-1
11185: PPUSH
11186: CALL_OW 94
// if IsOk ( Cornel ) then
11190: LD_EXP 44
11194: PPUSH
11195: CALL_OW 302
11199: IFFALSE 11213
// Say ( JMM , D3a-JMM-1 ) ;
11201: LD_EXP 37
11205: PPUSH
11206: LD_STRING D3a-JMM-1
11208: PPUSH
11209: CALL_OW 88
// end_mission_allowed := true ;
11213: LD_ADDR_EXP 21
11217: PUSH
11218: LD_INT 1
11220: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11221: LD_STRING M2
11223: PPUSH
11224: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
11228: LD_INT 9
11230: PPUSH
11231: LD_INT 1
11233: PPUSH
11234: CALL_OW 424
// Wait ( 0 0$05 ) ;
11238: LD_INT 175
11240: PPUSH
11241: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
11245: LD_EXP 44
11249: PPUSH
11250: LD_STRING D3a-Corn-2
11252: PPUSH
11253: CALL_OW 94
// cornel_attack := true ;
11257: LD_ADDR_EXP 9
11261: PUSH
11262: LD_INT 1
11264: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
11265: LD_INT 105
11267: PPUSH
11268: CALL_OW 67
// AddMoreTanks ( ) ;
11272: CALL 5402 0 0
// if frank_send_to_scout then
11276: LD_EXP 15
11280: IFFALSE 11445
// begin InitHc ;
11282: CALL_OW 19
// InitUc ;
11286: CALL_OW 18
// uc_side := 8 ;
11290: LD_ADDR_OWVAR 20
11294: PUSH
11295: LD_INT 8
11297: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
11298: LD_ADDR_EXP 51
11302: PUSH
11303: LD_STRING Frank
11305: PPUSH
11306: LD_INT 0
11308: PPUSH
11309: LD_STRING 
11311: PPUSH
11312: CALL 39284 0 3
11316: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
11317: LD_EXP 51
11321: PPUSH
11322: LD_INT 6
11324: PPUSH
11325: LD_INT 9
11327: PPUSH
11328: LD_INT 0
11330: PPUSH
11331: CALL_OW 48
// ComCrawl ( Frank ) ;
11335: LD_EXP 51
11339: PPUSH
11340: CALL_OW 137
// repeat wait ( 10 ) ;
11344: LD_INT 10
11346: PPUSH
11347: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11351: LD_EXP 37
11355: PPUSH
11356: LD_EXP 51
11360: PPUSH
11361: CALL_OW 296
11365: PUSH
11366: LD_INT 9
11368: LESS
11369: PUSH
11370: LD_INT 9
11372: PPUSH
11373: LD_INT 22
11375: PUSH
11376: LD_INT 1
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PPUSH
11383: CALL_OW 70
11387: OR
11388: IFFALSE 11344
// if IsDead ( Frank ) then
11390: LD_EXP 51
11394: PPUSH
11395: CALL_OW 301
11399: IFFALSE 11403
// exit ;
11401: GO 11445
// CenterOnUnits ( Frank ) ;
11403: LD_EXP 51
11407: PPUSH
11408: CALL_OW 85
// SetSide ( Frank , 1 ) ;
11412: LD_EXP 51
11416: PPUSH
11417: LD_INT 1
11419: PPUSH
11420: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
11424: LD_EXP 51
11428: PPUSH
11429: LD_STRING D6a-Frank-1
11431: PPUSH
11432: CALL_OW 88
// ComWalk ( Frank ) ;
11436: LD_EXP 51
11440: PPUSH
11441: CALL_OW 138
// end ; end ;
11445: END
// every 0 0$01 trigger solar_builded do
11446: LD_EXP 14
11450: IFFALSE 11554
11452: GO 11454
11454: DISABLE
// begin Wait ( 0 0$02 ) ;
11455: LD_INT 70
11457: PPUSH
11458: CALL_OW 67
// DialogueOn ;
11462: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11466: LD_EXP 37
11470: PPUSH
11471: LD_STRING D2b-JMM-1
11473: PPUSH
11474: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11478: LD_EXP 48
11482: PUSH
11483: LD_EXP 48
11487: PPUSH
11488: CALL_OW 302
11492: AND
11493: IFFALSE 11543
// begin Say ( Walker , D2b-Sci1-1 ) ;
11495: LD_EXP 48
11499: PPUSH
11500: LD_STRING D2b-Sci1-1
11502: PPUSH
11503: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11507: LD_EXP 37
11511: PPUSH
11512: LD_STRING D2b-JMM-2
11514: PPUSH
11515: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11519: LD_EXP 48
11523: PPUSH
11524: LD_STRING D2b-Sci1-2
11526: PPUSH
11527: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11531: LD_EXP 37
11535: PPUSH
11536: LD_STRING D2b-JMM-3
11538: PPUSH
11539: CALL_OW 88
// end ; DialogueOff ;
11543: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11547: LD_STRING MOutSol
11549: PPUSH
11550: CALL_OW 337
// end ;
11554: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11555: LD_EXP 14
11559: PUSH
11560: LD_EXP 37
11564: PPUSH
11565: CALL_OW 302
11569: AND
11570: PUSH
11571: LD_EXP 37
11575: PPUSH
11576: CALL 911 0 1
11580: AND
11581: PUSH
11582: LD_EXP 16
11586: NOT
11587: AND
11588: IFFALSE 11659
11590: GO 11592
11592: DISABLE
11593: LD_INT 0
11595: PPUSH
// begin jmm_in_veh := true ;
11596: LD_ADDR_EXP 16
11600: PUSH
11601: LD_INT 1
11603: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11604: LD_ADDR_VAR 0 1
11608: PUSH
11609: LD_INT 0
11611: PPUSH
11612: LD_INT 1
11614: PPUSH
11615: CALL_OW 12
11619: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11620: LD_INT 70
11622: PPUSH
11623: CALL_OW 67
// if i then
11627: LD_VAR 0 1
11631: IFFALSE 11647
// Say ( JMM , D2c-JMM-1 ) else
11633: LD_EXP 37
11637: PPUSH
11638: LD_STRING D2c-JMM-1
11640: PPUSH
11641: CALL_OW 88
11645: GO 11659
// Say ( JMM , D2c-JMM-1a ) ;
11647: LD_EXP 37
11651: PPUSH
11652: LD_STRING D2c-JMM-1a
11654: PPUSH
11655: CALL_OW 88
// end ;
11659: PPOPN 1
11661: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11662: LD_EXP 14
11666: PUSH
11667: LD_EXP 38
11671: PPUSH
11672: CALL_OW 302
11676: AND
11677: PUSH
11678: LD_EXP 38
11682: PPUSH
11683: CALL 911 0 1
11687: AND
11688: PUSH
11689: LD_EXP 17
11693: NOT
11694: AND
11695: IFFALSE 11727
11697: GO 11699
11699: DISABLE
// begin bobby_in_veh := true ;
11700: LD_ADDR_EXP 17
11704: PUSH
11705: LD_INT 1
11707: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11708: LD_INT 70
11710: PPUSH
11711: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11715: LD_EXP 38
11719: PPUSH
11720: LD_STRING D2c-Bobby-1
11722: PPUSH
11723: CALL_OW 88
11727: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11728: LD_EXP 14
11732: PUSH
11733: LD_EXP 40
11737: PPUSH
11738: CALL_OW 302
11742: AND
11743: PUSH
11744: LD_EXP 40
11748: PPUSH
11749: CALL 911 0 1
11753: AND
11754: PUSH
11755: LD_EXP 19
11759: NOT
11760: AND
11761: IFFALSE 11793
11763: GO 11765
11765: DISABLE
// begin lisa_in_veh := true ;
11766: LD_ADDR_EXP 19
11770: PUSH
11771: LD_INT 1
11773: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11774: LD_INT 70
11776: PPUSH
11777: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11781: LD_EXP 40
11785: PPUSH
11786: LD_STRING D2c-Lisa-1
11788: PPUSH
11789: CALL_OW 88
11793: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11794: LD_EXP 14
11798: PUSH
11799: LD_EXP 39
11803: PPUSH
11804: CALL_OW 302
11808: AND
11809: PUSH
11810: LD_EXP 39
11814: PPUSH
11815: CALL 911 0 1
11819: AND
11820: PUSH
11821: LD_EXP 18
11825: NOT
11826: AND
11827: IFFALSE 11898
11829: GO 11831
11831: DISABLE
11832: LD_INT 0
11834: PPUSH
// begin cyrus_in_veh := true ;
11835: LD_ADDR_EXP 18
11839: PUSH
11840: LD_INT 1
11842: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11843: LD_ADDR_VAR 0 1
11847: PUSH
11848: LD_INT 0
11850: PPUSH
11851: LD_INT 1
11853: PPUSH
11854: CALL_OW 12
11858: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11859: LD_INT 70
11861: PPUSH
11862: CALL_OW 67
// if i then
11866: LD_VAR 0 1
11870: IFFALSE 11886
// Say ( Cyrus , D2c-Cyrus-1 ) else
11872: LD_EXP 39
11876: PPUSH
11877: LD_STRING D2c-Cyrus-1
11879: PPUSH
11880: CALL_OW 88
11884: GO 11898
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11886: LD_EXP 39
11890: PPUSH
11891: LD_STRING D2c-Cyrus-1a
11893: PPUSH
11894: CALL_OW 88
// end ;
11898: PPOPN 1
11900: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11901: LD_EXP 44
11905: PPUSH
11906: LD_INT 16
11908: PPUSH
11909: CALL_OW 308
11913: IFFALSE 12194
11915: GO 11917
11917: DISABLE
11918: LD_INT 0
11920: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11921: LD_INT 3
11923: PPUSH
11924: LD_EXP 44
11928: PPUSH
11929: CALL_OW 471
// send_attack_on_cornel := true ;
11933: LD_ADDR_EXP 32
11937: PUSH
11938: LD_INT 1
11940: ST_TO_ADDR
// if ru_vehicles then
11941: LD_EXP 56
11945: IFFALSE 11979
// for i in ru_vehicles do
11947: LD_ADDR_VAR 0 1
11951: PUSH
11952: LD_EXP 56
11956: PUSH
11957: FOR_IN
11958: IFFALSE 11977
// ComAgressiveMove ( i , 215 , 69 ) ;
11960: LD_VAR 0 1
11964: PPUSH
11965: LD_INT 215
11967: PPUSH
11968: LD_INT 69
11970: PPUSH
11971: CALL_OW 114
11975: GO 11957
11977: POP
11978: POP
// if ru_patrol then
11979: LD_EXP 53
11983: IFFALSE 12017
// for i in ru_patrol do
11985: LD_ADDR_VAR 0 1
11989: PUSH
11990: LD_EXP 53
11994: PUSH
11995: FOR_IN
11996: IFFALSE 12015
// ComAgressiveMove ( i , 215 , 69 ) ;
11998: LD_VAR 0 1
12002: PPUSH
12003: LD_INT 215
12005: PPUSH
12006: LD_INT 69
12008: PPUSH
12009: CALL_OW 114
12013: GO 11995
12015: POP
12016: POP
// if frank_send_to_scout then
12017: LD_EXP 15
12021: IFFALSE 12035
// SayRadio ( Frank , D3b-Frank-1 ) ;
12023: LD_EXP 51
12027: PPUSH
12028: LD_STRING D3b-Frank-1
12030: PPUSH
12031: CALL_OW 94
// wait ( 0 0$03 ) ;
12035: LD_INT 105
12037: PPUSH
12038: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
12042: LD_EXP 44
12046: PPUSH
12047: LD_STRING D4-Corn-1
12049: PPUSH
12050: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
12054: LD_INT 35
12056: PPUSH
12057: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
12061: LD_INT 22
12063: PUSH
12064: LD_INT 4
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 21
12073: PUSH
12074: LD_INT 1
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 3
12083: PUSH
12084: LD_INT 24
12086: PUSH
12087: LD_INT 1000
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: LIST
12102: PPUSH
12103: CALL_OW 69
12107: PUSH
12108: LD_INT 6
12110: LESS
12111: IFFALSE 12054
// if Cornel then
12113: LD_EXP 44
12117: IFFALSE 12157
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
12119: LD_EXP 44
12123: PPUSH
12124: LD_STRING D5-Corn-1
12126: PPUSH
12127: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
12131: LD_EXP 44
12135: PPUSH
12136: LD_EXP 2
12140: PUSH
12141: LD_STRING Cornel
12143: STR
12144: PPUSH
12145: CALL_OW 38
// cornel_saved := true ;
12149: LD_ADDR_EXP 27
12153: PUSH
12154: LD_INT 1
12156: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
12157: LD_INT 4
12159: PPUSH
12160: LD_INT 8
12162: PPUSH
12163: CALL_OW 343
// wait ( 0 0$01 ) ;
12167: LD_INT 35
12169: PPUSH
12170: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
12174: LD_INT 3
12176: PPUSH
12177: LD_EXP 44
12181: PPUSH
12182: CALL_OW 472
// send_attack_on_cornel := false ;
12186: LD_ADDR_EXP 32
12190: PUSH
12191: LD_INT 0
12193: ST_TO_ADDR
// end ;
12194: PPOPN 1
12196: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
12197: LD_INT 9
12199: PPUSH
12200: LD_INT 22
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PPUSH
12210: CALL_OW 70
12214: PUSH
12215: LD_EXP 33
12219: OR
12220: IFFALSE 12441
12222: GO 12224
12224: DISABLE
12225: LD_INT 0
12227: PPUSH
12228: PPUSH
// begin enable ;
12229: ENABLE
// if not jmm_on_west then
12230: LD_EXP 5
12234: NOT
12235: IFFALSE 12246
// begin YouLost ( 4 ) ;
12237: LD_STRING 4
12239: PPUSH
12240: CALL_OW 104
// exit ;
12244: GO 12441
// end ; if not game_end then
12246: LD_EXP 33
12250: NOT
12251: IFFALSE 12261
// game_end := true ;
12253: LD_ADDR_EXP 33
12257: PUSH
12258: LD_INT 1
12260: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
12261: LD_ADDR_VAR 0 2
12265: PUSH
12266: LD_INT 9
12268: PPUSH
12269: LD_INT 22
12271: PUSH
12272: LD_INT 1
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PPUSH
12279: CALL_OW 70
12283: ST_TO_ADDR
// if not filter then
12284: LD_VAR 0 2
12288: NOT
12289: IFFALSE 12293
// exit ;
12291: GO 12441
// for i in filter do
12293: LD_ADDR_VAR 0 1
12297: PUSH
12298: LD_VAR 0 2
12302: PUSH
12303: FOR_IN
12304: IFFALSE 12439
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
12306: LD_VAR 0 1
12310: PPUSH
12311: CALL_OW 302
12315: PUSH
12316: LD_VAR 0 1
12320: PPUSH
12321: CALL_OW 247
12325: PUSH
12326: LD_INT 2
12328: EQUAL
12329: AND
12330: IFFALSE 12402
// begin if i = JMM and save_group < 4 then
12332: LD_VAR 0 1
12336: PUSH
12337: LD_EXP 37
12341: EQUAL
12342: PUSH
12343: LD_EXP 23
12347: PUSH
12348: LD_INT 4
12350: LESS
12351: AND
12352: IFFALSE 12356
// continue ;
12354: GO 12303
// if GetNation ( i ) = nation_american then
12356: LD_VAR 0 1
12360: PPUSH
12361: CALL_OW 248
12365: PUSH
12366: LD_INT 1
12368: EQUAL
12369: IFFALSE 12379
// veh_on_meta := true ;
12371: LD_ADDR_EXP 28
12375: PUSH
12376: LD_INT 1
12378: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
12379: LD_VAR 0 1
12383: PPUSH
12384: CALL_OW 311
12388: PPUSH
12389: CALL 12444 0 1
// RemoveUnit ( i ) ;
12393: LD_VAR 0 1
12397: PPUSH
12398: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
12402: LD_VAR 0 1
12406: PPUSH
12407: CALL_OW 302
12411: PUSH
12412: LD_VAR 0 1
12416: PPUSH
12417: CALL_OW 247
12421: PUSH
12422: LD_INT 1
12424: EQUAL
12425: AND
12426: IFFALSE 12437
// Save ( i ) ;
12428: LD_VAR 0 1
12432: PPUSH
12433: CALL 12444 0 1
// end ;
12437: GO 12303
12439: POP
12440: POP
// end ;
12441: PPOPN 2
12443: END
// export function Save ( i ) ; begin
12444: LD_INT 0
12446: PPUSH
// if i = JMM and save_counter >= 4 then
12447: LD_VAR 0 1
12451: PUSH
12452: LD_EXP 37
12456: EQUAL
12457: PUSH
12458: LD_EXP 36
12462: PUSH
12463: LD_INT 4
12465: GREATEREQUAL
12466: AND
12467: IFFALSE 12603
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12469: LD_EXP 24
12473: PUSH
12474: LD_INT 22
12476: PUSH
12477: LD_INT 1
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 21
12486: PUSH
12487: LD_INT 1
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PPUSH
12498: CALL_OW 69
12502: PUSH
12503: LD_INT 1
12505: GREATER
12506: AND
12507: IFFALSE 12564
// begin show_query := false ;
12509: LD_ADDR_EXP 24
12513: PUSH
12514: LD_INT 0
12516: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12517: LD_STRING Q2
12519: PPUSH
12520: CALL_OW 97
12524: PUSH
12525: LD_INT 1
12527: DOUBLE
12528: EQUAL
12529: IFTRUE 12533
12531: GO 12544
12533: POP
// wait_for_them := true ; 2 :
12534: LD_ADDR_EXP 25
12538: PUSH
12539: LD_INT 1
12541: ST_TO_ADDR
12542: GO 12564
12544: LD_INT 2
12546: DOUBLE
12547: EQUAL
12548: IFTRUE 12552
12550: GO 12563
12552: POP
// wait_for_them := false ; end ;
12553: LD_ADDR_EXP 25
12557: PUSH
12558: LD_INT 0
12560: ST_TO_ADDR
12561: GO 12564
12563: POP
// end ; save_counter := save_counter + 1 ;
12564: LD_ADDR_EXP 36
12568: PUSH
12569: LD_EXP 36
12573: PUSH
12574: LD_INT 1
12576: PLUS
12577: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12578: LD_ADDR_EXP 23
12582: PUSH
12583: LD_EXP 23
12587: PUSH
12588: LD_EXP 37
12592: ADD
12593: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12594: LD_EXP 37
12598: PPUSH
12599: CALL_OW 64
// end ; if i = Lisa then
12603: LD_VAR 0 1
12607: PUSH
12608: LD_EXP 40
12612: EQUAL
12613: IFFALSE 12654
// begin save_counter := save_counter + 1 ;
12615: LD_ADDR_EXP 36
12619: PUSH
12620: LD_EXP 36
12624: PUSH
12625: LD_INT 1
12627: PLUS
12628: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12629: LD_ADDR_EXP 23
12633: PUSH
12634: LD_EXP 23
12638: PUSH
12639: LD_EXP 40
12643: ADD
12644: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12645: LD_EXP 40
12649: PPUSH
12650: CALL_OW 64
// end ; if i = Bobby then
12654: LD_VAR 0 1
12658: PUSH
12659: LD_EXP 38
12663: EQUAL
12664: IFFALSE 12705
// begin save_counter := save_counter + 1 ;
12666: LD_ADDR_EXP 36
12670: PUSH
12671: LD_EXP 36
12675: PUSH
12676: LD_INT 1
12678: PLUS
12679: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12680: LD_ADDR_EXP 23
12684: PUSH
12685: LD_EXP 23
12689: PUSH
12690: LD_EXP 38
12694: ADD
12695: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12696: LD_EXP 38
12700: PPUSH
12701: CALL_OW 64
// end ; if i = Cyrus then
12705: LD_VAR 0 1
12709: PUSH
12710: LD_EXP 39
12714: EQUAL
12715: IFFALSE 12756
// begin save_counter := save_counter + 1 ;
12717: LD_ADDR_EXP 36
12721: PUSH
12722: LD_EXP 36
12726: PUSH
12727: LD_INT 1
12729: PLUS
12730: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12731: LD_ADDR_EXP 23
12735: PUSH
12736: LD_EXP 23
12740: PUSH
12741: LD_EXP 39
12745: ADD
12746: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12747: LD_EXP 39
12751: PPUSH
12752: CALL_OW 64
// end ; if i = Khatam then
12756: LD_VAR 0 1
12760: PUSH
12761: LD_EXP 41
12765: EQUAL
12766: IFFALSE 12807
// begin save_counter := save_counter + 1 ;
12768: LD_ADDR_EXP 36
12772: PUSH
12773: LD_EXP 36
12777: PUSH
12778: LD_INT 1
12780: PLUS
12781: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12782: LD_ADDR_EXP 23
12786: PUSH
12787: LD_EXP 23
12791: PUSH
12792: LD_EXP 41
12796: ADD
12797: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12798: LD_EXP 41
12802: PPUSH
12803: CALL_OW 64
// end ; if i = Frank then
12807: LD_VAR 0 1
12811: PUSH
12812: LD_EXP 51
12816: EQUAL
12817: IFFALSE 12858
// begin save_counter := save_counter + 1 ;
12819: LD_ADDR_EXP 36
12823: PUSH
12824: LD_EXP 36
12828: PUSH
12829: LD_INT 1
12831: PLUS
12832: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12833: LD_ADDR_EXP 23
12837: PUSH
12838: LD_EXP 23
12842: PUSH
12843: LD_EXP 51
12847: ADD
12848: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12849: LD_EXP 51
12853: PPUSH
12854: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12858: LD_VAR 0 1
12862: PUSH
12863: LD_EXP 37
12867: NONEQUAL
12868: PUSH
12869: LD_VAR 0 1
12873: PPUSH
12874: CALL_OW 302
12878: AND
12879: PUSH
12880: LD_VAR 0 1
12884: PPUSH
12885: CALL_OW 247
12889: PUSH
12890: LD_INT 1
12892: EQUAL
12893: AND
12894: PUSH
12895: LD_VAR 0 1
12899: PUSH
12900: LD_EXP 23
12904: IN
12905: NOT
12906: AND
12907: IFFALSE 12948
// begin save_counter := save_counter + 1 ;
12909: LD_ADDR_EXP 36
12913: PUSH
12914: LD_EXP 36
12918: PUSH
12919: LD_INT 1
12921: PLUS
12922: ST_TO_ADDR
// save_others := save_others ^ i ;
12923: LD_ADDR_EXP 22
12927: PUSH
12928: LD_EXP 22
12932: PUSH
12933: LD_VAR 0 1
12937: ADD
12938: ST_TO_ADDR
// RemoveUnit ( i ) ;
12939: LD_VAR 0 1
12943: PPUSH
12944: CALL_OW 64
// end ; end ;
12948: LD_VAR 0 2
12952: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12953: LD_EXP 24
12957: NOT
12958: PUSH
12959: LD_EXP 25
12963: NOT
12964: AND
12965: PUSH
12966: LD_INT 22
12968: PUSH
12969: LD_INT 1
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 21
12978: PUSH
12979: LD_INT 1
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PPUSH
12990: CALL_OW 69
12994: PUSH
12995: LD_INT 0
12997: EQUAL
12998: OR
12999: IFFALSE 13008
13001: GO 13003
13003: DISABLE
// EndMission ;
13004: CALL 13009 0 0
13008: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
13009: LD_INT 0
13011: PPUSH
13012: PPUSH
13013: PPUSH
13014: PPUSH
13015: PPUSH
// wait ( 0 0$01 ) ;
13016: LD_INT 35
13018: PPUSH
13019: CALL_OW 67
// if tick <= 12 12$00 then
13023: LD_OWVAR 1
13027: PUSH
13028: LD_INT 25200
13030: LESSEQUAL
13031: IFFALSE 13040
// SetAchievement ( ACH_ASPEED_3 ) ;
13033: LD_STRING ACH_ASPEED_3
13035: PPUSH
13036: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
13040: LD_EXP 23
13044: PUSH
13045: LD_EXP 22
13049: ADD
13050: PPUSH
13051: LD_INT 25
13053: PUSH
13054: LD_INT 4
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PPUSH
13061: CALL_OW 72
13065: PUSH
13066: LD_INT 0
13068: EQUAL
13069: IFFALSE 13085
// begin wait ( 3 ) ;
13071: LD_INT 3
13073: PPUSH
13074: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
13078: LD_STRING ACH_NOSCI
13080: PPUSH
13081: CALL_OW 543
// end ; m1 := solar_builded ;
13085: LD_ADDR_VAR 0 3
13089: PUSH
13090: LD_EXP 14
13094: ST_TO_ADDR
// m2 := veh_on_meta ;
13095: LD_ADDR_VAR 0 4
13099: PUSH
13100: LD_EXP 28
13104: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
13105: LD_ADDR_VAR 0 5
13109: PUSH
13110: LD_EXP 34
13114: PUSH
13115: LD_INT 0
13117: EQUAL
13118: ST_TO_ADDR
// if solar_builded then
13119: LD_EXP 14
13123: IFFALSE 13137
// AddMedal ( Solar1 , 1 ) else
13125: LD_STRING Solar1
13127: PPUSH
13128: LD_INT 1
13130: PPUSH
13131: CALL_OW 101
13135: GO 13148
// AddMedal ( Solar1 , - 1 ) ;
13137: LD_STRING Solar1
13139: PPUSH
13140: LD_INT 1
13142: NEG
13143: PPUSH
13144: CALL_OW 101
// if veh_on_meta then
13148: LD_EXP 28
13152: IFFALSE 13166
// AddMedal ( Solar2 , 1 ) else
13154: LD_STRING Solar2
13156: PPUSH
13157: LD_INT 1
13159: PPUSH
13160: CALL_OW 101
13164: GO 13196
// if solar_builded then
13166: LD_EXP 14
13170: IFFALSE 13185
// AddMedal ( Solar2 , - 1 ) else
13172: LD_STRING Solar2
13174: PPUSH
13175: LD_INT 1
13177: NEG
13178: PPUSH
13179: CALL_OW 101
13183: GO 13196
// AddMedal ( Solar2 , - 2 ) ;
13185: LD_STRING Solar2
13187: PPUSH
13188: LD_INT 2
13190: NEG
13191: PPUSH
13192: CALL_OW 101
// if lose_counter = 0 then
13196: LD_EXP 34
13200: PUSH
13201: LD_INT 0
13203: EQUAL
13204: IFFALSE 13218
// AddMedal ( No , 1 ) else
13206: LD_STRING No
13208: PPUSH
13209: LD_INT 1
13211: PPUSH
13212: CALL_OW 101
13216: GO 13262
// if lose_counter > 0 and lose_counter < 4 then
13218: LD_EXP 34
13222: PUSH
13223: LD_INT 0
13225: GREATER
13226: PUSH
13227: LD_EXP 34
13231: PUSH
13232: LD_INT 4
13234: LESS
13235: AND
13236: IFFALSE 13251
// AddMedal ( No , - 1 ) else
13238: LD_STRING No
13240: PPUSH
13241: LD_INT 1
13243: NEG
13244: PPUSH
13245: CALL_OW 101
13249: GO 13262
// AddMedal ( UpTo4 , - 1 ) ;
13251: LD_STRING UpTo4
13253: PPUSH
13254: LD_INT 1
13256: NEG
13257: PPUSH
13258: CALL_OW 101
// GiveMedals ( MAIN ) ;
13262: LD_STRING MAIN
13264: PPUSH
13265: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
13269: LD_OWVAR 67
13273: PUSH
13274: LD_INT 3
13276: GREATEREQUAL
13277: PUSH
13278: LD_VAR 0 3
13282: AND
13283: PUSH
13284: LD_VAR 0 4
13288: AND
13289: PUSH
13290: LD_VAR 0 5
13294: AND
13295: IFFALSE 13307
// SetAchievementEX ( ACH_AMER , 3 ) ;
13297: LD_STRING ACH_AMER
13299: PPUSH
13300: LD_INT 3
13302: PPUSH
13303: CALL_OW 564
// if IsDead ( Pokryshkin ) then
13307: LD_EXP 52
13311: PPUSH
13312: CALL_OW 301
13316: IFFALSE 13372
// begin stop_talking := true ;
13318: LD_ADDR_OWVAR 56
13322: PUSH
13323: LD_INT 1
13325: ST_TO_ADDR
// for i in save_group union save_others do
13326: LD_ADDR_VAR 0 2
13330: PUSH
13331: LD_EXP 23
13335: PUSH
13336: LD_EXP 22
13340: UNION
13341: PUSH
13342: FOR_IN
13343: IFFALSE 13362
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
13345: LD_VAR 0 2
13349: PPUSH
13350: LD_INT 1
13352: PPUSH
13353: LD_INT 1500
13355: PPUSH
13356: CALL_OW 591
13360: GO 13342
13362: POP
13363: POP
// stop_talking := false ;
13364: LD_ADDR_OWVAR 56
13368: PUSH
13369: LD_INT 0
13371: ST_TO_ADDR
// end ; RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_american ] ] ) ) ;
13372: LD_INT 22
13374: PUSH
13375: LD_INT 1
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: LD_INT 23
13384: PUSH
13385: LD_INT 1
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PPUSH
13396: CALL_OW 69
13400: PPUSH
13401: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
13405: LD_EXP 37
13409: PPUSH
13410: LD_EXP 2
13414: PUSH
13415: LD_STRING JMM
13417: STR
13418: PPUSH
13419: CALL_OW 38
// if Bobby in save_group then
13423: LD_EXP 38
13427: PUSH
13428: LD_EXP 23
13432: IN
13433: IFFALSE 13453
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
13435: LD_EXP 38
13439: PPUSH
13440: LD_EXP 2
13444: PUSH
13445: LD_STRING Bobby
13447: STR
13448: PPUSH
13449: CALL_OW 38
// if Cyrus in save_group then
13453: LD_EXP 39
13457: PUSH
13458: LD_EXP 23
13462: IN
13463: IFFALSE 13483
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
13465: LD_EXP 39
13469: PPUSH
13470: LD_EXP 2
13474: PUSH
13475: LD_STRING Cyrus
13477: STR
13478: PPUSH
13479: CALL_OW 38
// if Lisa in save_group then
13483: LD_EXP 40
13487: PUSH
13488: LD_EXP 23
13492: IN
13493: IFFALSE 13513
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13495: LD_EXP 40
13499: PPUSH
13500: LD_EXP 2
13504: PUSH
13505: LD_STRING Lisa
13507: STR
13508: PPUSH
13509: CALL_OW 38
// if Frank in save_group then
13513: LD_EXP 51
13517: PUSH
13518: LD_EXP 23
13522: IN
13523: IFFALSE 13543
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13525: LD_EXP 51
13529: PPUSH
13530: LD_EXP 2
13534: PUSH
13535: LD_STRING Frank
13537: STR
13538: PPUSH
13539: CALL_OW 38
// if Khatam in save_group then
13543: LD_EXP 41
13547: PUSH
13548: LD_EXP 23
13552: IN
13553: IFFALSE 13573
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13555: LD_EXP 41
13559: PPUSH
13560: LD_EXP 2
13564: PUSH
13565: LD_STRING Khatam
13567: STR
13568: PPUSH
13569: CALL_OW 38
// if save_others then
13573: LD_EXP 22
13577: IFFALSE 13591
// SaveCharacters ( save_others , 03_others ) ;
13579: LD_EXP 22
13583: PPUSH
13584: LD_STRING 03_others
13586: PPUSH
13587: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13591: LD_EXP 45
13595: PUSH
13596: LD_EXP 45
13600: PPUSH
13601: CALL_OW 302
13605: AND
13606: PUSH
13607: LD_EXP 27
13611: AND
13612: IFFALSE 13624
// begin ResetFog ;
13614: CALL_OW 335
// DisplayEndingScene ;
13618: CALL 13646 0 0
// end else
13622: GO 13637
// DeleteCharacters ( mission_prefix & Cornel ) ;
13624: LD_EXP 2
13628: PUSH
13629: LD_STRING Cornel
13631: STR
13632: PPUSH
13633: CALL_OW 40
// YouWin ;
13637: CALL_OW 103
// end ;
13641: LD_VAR 0 1
13645: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13646: LD_INT 0
13648: PPUSH
13649: PPUSH
13650: PPUSH
13651: PPUSH
13652: PPUSH
13653: PPUSH
// InGameOn ;
13654: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13658: LD_INT 208
13660: PPUSH
13661: LD_INT 62
13663: PPUSH
13664: LD_INT 1
13666: PPUSH
13667: LD_INT 10
13669: NEG
13670: PPUSH
13671: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13675: LD_INT 208
13677: PPUSH
13678: LD_INT 62
13680: PPUSH
13681: LD_INT 1
13683: PPUSH
13684: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13688: LD_ADDR_VAR 0 3
13692: PUSH
13693: LD_INT 22
13695: PUSH
13696: LD_INT 3
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: LD_INT 21
13708: PUSH
13709: LD_INT 2
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 21
13718: PUSH
13719: LD_INT 1
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PPUSH
13735: CALL_OW 69
13739: ST_TO_ADDR
// if filter then
13740: LD_VAR 0 3
13744: IFFALSE 13772
// for i in filter do
13746: LD_ADDR_VAR 0 2
13750: PUSH
13751: LD_VAR 0 3
13755: PUSH
13756: FOR_IN
13757: IFFALSE 13770
// RemoveUnit ( i ) ;
13759: LD_VAR 0 2
13763: PPUSH
13764: CALL_OW 64
13768: GO 13756
13770: POP
13771: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13772: LD_ADDR_VAR 0 3
13776: PUSH
13777: LD_INT 22
13779: PUSH
13780: LD_INT 4
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 21
13789: PUSH
13790: LD_INT 1
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PPUSH
13801: CALL_OW 69
13805: ST_TO_ADDR
// if filter then
13806: LD_VAR 0 3
13810: IFFALSE 13841
// for i in filter do
13812: LD_ADDR_VAR 0 2
13816: PUSH
13817: LD_VAR 0 3
13821: PUSH
13822: FOR_IN
13823: IFFALSE 13839
// SetLives ( i , 0 ) ;
13825: LD_VAR 0 2
13829: PPUSH
13830: LD_INT 0
13832: PPUSH
13833: CALL_OW 234
13837: GO 13822
13839: POP
13840: POP
// uc_side := 4 ;
13841: LD_ADDR_OWVAR 20
13845: PUSH
13846: LD_INT 4
13848: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13849: LD_ADDR_VAR 0 4
13853: PUSH
13854: LD_STRING Cornell
13856: PPUSH
13857: LD_INT 0
13859: PPUSH
13860: LD_STRING 
13862: PPUSH
13863: CALL 39284 0 3
13867: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13868: LD_VAR 0 4
13872: PPUSH
13873: LD_INT 208
13875: PPUSH
13876: LD_INT 62
13878: PPUSH
13879: LD_INT 0
13881: PPUSH
13882: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13886: LD_VAR 0 4
13890: PPUSH
13891: LD_INT 100
13893: PPUSH
13894: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13898: LD_INT 3
13900: PPUSH
13901: LD_VAR 0 4
13905: PPUSH
13906: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13910: LD_INT 4
13912: PPUSH
13913: LD_INT 3
13915: PPUSH
13916: LD_INT 1
13918: PPUSH
13919: LD_INT 1
13921: PPUSH
13922: CALL_OW 80
// uc_side := 3 ;
13926: LD_ADDR_OWVAR 20
13930: PUSH
13931: LD_INT 3
13933: ST_TO_ADDR
// uc_nation := 3 ;
13934: LD_ADDR_OWVAR 21
13938: PUSH
13939: LD_INT 3
13941: ST_TO_ADDR
// InitHc ;
13942: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13946: LD_ADDR_VAR 0 5
13950: PUSH
13951: LD_STRING Mikhail
13953: PPUSH
13954: LD_INT 0
13956: PPUSH
13957: LD_STRING 
13959: PPUSH
13960: CALL 39284 0 3
13964: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13965: LD_INT 1
13967: PPUSH
13968: LD_INT 1
13970: PPUSH
13971: LD_INT 0
13973: PPUSH
13974: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13978: LD_ADDR_VAR 0 6
13982: PUSH
13983: LD_VAR 0 6
13987: PUSH
13988: CALL_OW 44
13992: ADD
13993: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13994: LD_ADDR_VAR 0 6
13998: PUSH
13999: LD_VAR 0 6
14003: PUSH
14004: CALL_OW 44
14008: ADD
14009: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
14010: LD_INT 2
14012: PPUSH
14013: LD_INT 4
14015: PPUSH
14016: LD_INT 0
14018: PPUSH
14019: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
14023: LD_ADDR_VAR 0 6
14027: PUSH
14028: LD_VAR 0 6
14032: PUSH
14033: CALL_OW 44
14037: ADD
14038: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
14039: LD_VAR 0 5
14043: PPUSH
14044: LD_INT 17
14046: PPUSH
14047: LD_INT 0
14049: PPUSH
14050: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
14054: LD_VAR 0 5
14058: PPUSH
14059: LD_INT 210
14061: PPUSH
14062: LD_INT 63
14064: PPUSH
14065: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
14069: LD_VAR 0 5
14073: PPUSH
14074: LD_INT 208
14076: PPUSH
14077: LD_INT 62
14079: PPUSH
14080: CALL_OW 178
// for i in fake_russians do
14084: LD_ADDR_VAR 0 2
14088: PUSH
14089: LD_VAR 0 6
14093: PUSH
14094: FOR_IN
14095: IFFALSE 14173
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
14097: LD_VAR 0 2
14101: PPUSH
14102: LD_INT 17
14104: PPUSH
14105: LD_INT 0
14107: PPUSH
14108: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
14112: LD_VAR 0 2
14116: PPUSH
14117: LD_INT 215
14119: PPUSH
14120: LD_INT 67
14122: PPUSH
14123: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
14127: LD_VAR 0 2
14131: PPUSH
14132: LD_INT 208
14134: PPUSH
14135: LD_INT 62
14137: PPUSH
14138: CALL_OW 178
// if GetClass ( i ) = 4 then
14142: LD_VAR 0 2
14146: PPUSH
14147: CALL_OW 257
14151: PUSH
14152: LD_INT 4
14154: EQUAL
14155: IFFALSE 14171
// ComHeal ( i , fake_cornel ) ;
14157: LD_VAR 0 2
14161: PPUSH
14162: LD_VAR 0 4
14166: PPUSH
14167: CALL_OW 128
// end ;
14171: GO 14094
14173: POP
14174: POP
// Wait ( 0 0$01 ) ;
14175: LD_INT 35
14177: PPUSH
14178: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
14182: LD_INT 208
14184: PPUSH
14185: LD_INT 62
14187: PPUSH
14188: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
14192: LD_INT 208
14194: PPUSH
14195: LD_INT 62
14197: PPUSH
14198: LD_INT 1
14200: PPUSH
14201: LD_INT 10
14203: NEG
14204: PPUSH
14205: CALL_OW 330
// Wait ( 0 0$15 ) ;
14209: LD_INT 525
14211: PPUSH
14212: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
14216: LD_INT 208
14218: PPUSH
14219: LD_INT 62
14221: PPUSH
14222: LD_INT 1
14224: PPUSH
14225: CALL_OW 331
// ResetFog ;
14229: CALL_OW 335
// InGameOff ;
14233: CALL_OW 9
// end ;
14237: LD_VAR 0 1
14241: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
14242: LD_INT 10
14244: PPUSH
14245: LD_INT 22
14247: PUSH
14248: LD_INT 1
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PPUSH
14255: CALL_OW 70
14259: PUSH
14260: LD_EXP 44
14264: PPUSH
14265: CALL_OW 302
14269: AND
14270: PUSH
14271: LD_INT 22
14273: PUSH
14274: LD_INT 1
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: PPUSH
14281: CALL_OW 69
14285: PPUSH
14286: LD_EXP 44
14290: PPUSH
14291: CALL_OW 74
14295: PPUSH
14296: LD_EXP 44
14300: PPUSH
14301: CALL_OW 296
14305: PUSH
14306: LD_INT 30
14308: LESS
14309: OR
14310: IFFALSE 14361
14312: GO 14314
14314: DISABLE
// begin enable ;
14315: ENABLE
// powell_warn := powell_warn + 1 ;
14316: LD_ADDR_EXP 35
14320: PUSH
14321: LD_EXP 35
14325: PUSH
14326: LD_INT 1
14328: PLUS
14329: ST_TO_ADDR
// if powell_warn = 3 then
14330: LD_EXP 35
14334: PUSH
14335: LD_INT 3
14337: EQUAL
14338: IFFALSE 14349
// begin YouLost ( 5 ) ;
14340: LD_STRING 5
14342: PPUSH
14343: CALL_OW 104
// exit ;
14347: GO 14361
// end ; SayRadioNoFace ( Powell , DWarn-Pow-1 ) ;
14349: LD_EXP 46
14353: PPUSH
14354: LD_STRING DWarn-Pow-1
14356: PPUSH
14357: CALL_OW 586
// end ; end_of_file
14361: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
14362: LD_EXP 8
14366: IFFALSE 16203
14368: GO 14370
14370: DISABLE
14371: LD_INT 0
14373: PPUSH
14374: PPUSH
14375: PPUSH
14376: PPUSH
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
14381: LD_EXP 44
14385: PUSH
14386: LD_EXP 45
14390: ADD
14391: PUSH
14392: LD_EXP 6
14396: ADD
14397: PPUSH
14398: LD_INT 250
14400: PPUSH
14401: LD_INT 120
14403: PPUSH
14404: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
14408: LD_ADDR_VAR 0 2
14412: PUSH
14413: LD_EXP 6
14417: PPUSH
14418: LD_INT 25
14420: PUSH
14421: LD_INT 2
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PPUSH
14428: CALL_OW 72
14432: PUSH
14433: LD_EXP 45
14437: DIFF
14438: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
14439: LD_ADDR_VAR 0 3
14443: PUSH
14444: LD_EXP 6
14448: PPUSH
14449: LD_INT 21
14451: PUSH
14452: LD_INT 1
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PPUSH
14459: CALL_OW 72
14463: PUSH
14464: LD_VAR 0 2
14468: DIFF
14469: ST_TO_ADDR
// if not has_eng then
14470: LD_VAR 0 2
14474: NOT
14475: IFFALSE 14558
// begin uc_side := 4 ;
14477: LD_ADDR_OWVAR 20
14481: PUSH
14482: LD_INT 4
14484: ST_TO_ADDR
// uc_nation := 1 ;
14485: LD_ADDR_OWVAR 21
14489: PUSH
14490: LD_INT 1
14492: ST_TO_ADDR
// bc_type := b_depot ;
14493: LD_ADDR_OWVAR 42
14497: PUSH
14498: LD_INT 0
14500: ST_TO_ADDR
// bc_level := 2 ;
14501: LD_ADDR_OWVAR 43
14505: PUSH
14506: LD_INT 2
14508: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14509: LD_ADDR_VAR 0 4
14513: PUSH
14514: LD_INT 264
14516: PPUSH
14517: LD_INT 120
14519: PPUSH
14520: LD_INT 4
14522: PPUSH
14523: CALL_OW 47
14527: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14528: LD_INT 264
14530: PPUSH
14531: LD_INT 120
14533: PPUSH
14534: LD_INT 4
14536: PPUSH
14537: LD_INT 10
14539: NEG
14540: PPUSH
14541: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14545: LD_INT 264
14547: PPUSH
14548: LD_INT 120
14550: PPUSH
14551: LD_INT 4
14553: PPUSH
14554: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14558: LD_INT 35
14560: PPUSH
14561: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14565: LD_EXP 44
14569: PPUSH
14570: LD_INT 10
14572: PPUSH
14573: CALL_OW 308
14577: PUSH
14578: LD_EXP 44
14582: PPUSH
14583: CALL_OW 310
14587: PPUSH
14588: LD_INT 10
14590: PPUSH
14591: CALL_OW 308
14595: OR
14596: IFFALSE 14558
// if has_eng and not dep then
14598: LD_VAR 0 2
14602: PUSH
14603: LD_VAR 0 4
14607: NOT
14608: AND
14609: IFFALSE 14759
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14611: LD_VAR 0 2
14615: PPUSH
14616: LD_INT 0
14618: PPUSH
14619: LD_INT 264
14621: PPUSH
14622: LD_INT 120
14624: PPUSH
14625: LD_INT 4
14627: PPUSH
14628: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14632: LD_INT 35
14634: PPUSH
14635: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14639: LD_INT 22
14641: PUSH
14642: LD_INT 4
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PUSH
14649: LD_INT 30
14651: PUSH
14652: LD_INT 0
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PPUSH
14663: CALL_OW 69
14667: IFFALSE 14632
// ComMoveXY ( filter , 264 , 120 ) ;
14669: LD_VAR 0 3
14673: PPUSH
14674: LD_INT 264
14676: PPUSH
14677: LD_INT 120
14679: PPUSH
14680: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14684: LD_INT 35
14686: PPUSH
14687: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14691: LD_INT 22
14693: PUSH
14694: LD_INT 4
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 30
14703: PUSH
14704: LD_INT 0
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: LD_INT 3
14713: PUSH
14714: LD_INT 57
14716: PUSH
14717: EMPTY
14718: LIST
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: LIST
14728: PPUSH
14729: CALL_OW 69
14733: IFFALSE 14684
// ComMoveXY ( filter , 247 , 113 ) ;
14735: LD_VAR 0 3
14739: PPUSH
14740: LD_INT 247
14742: PPUSH
14743: LD_INT 113
14745: PPUSH
14746: CALL_OW 111
// Wait ( 0 0$2 ) ;
14750: LD_INT 70
14752: PPUSH
14753: CALL_OW 67
// end else
14757: GO 14771
// begin SetSide ( dep , 4 ) ;
14759: LD_VAR 0 4
14763: PPUSH
14764: LD_INT 4
14766: PPUSH
14767: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14771: LD_ADDR_VAR 0 4
14775: PUSH
14776: LD_INT 22
14778: PUSH
14779: LD_INT 4
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 30
14788: PUSH
14789: LD_INT 0
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PPUSH
14800: CALL_OW 69
14804: PUSH
14805: LD_INT 1
14807: ARRAY
14808: ST_TO_ADDR
// if not has_eng then
14809: LD_VAR 0 2
14813: NOT
14814: IFFALSE 14901
// for i = 1 to 2 do
14816: LD_ADDR_VAR 0 1
14820: PUSH
14821: DOUBLE
14822: LD_INT 1
14824: DEC
14825: ST_TO_ADDR
14826: LD_INT 2
14828: PUSH
14829: FOR_TO
14830: IFFALSE 14899
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14832: LD_VAR 0 3
14836: PUSH
14837: LD_INT 1
14839: ARRAY
14840: PPUSH
14841: LD_VAR 0 4
14845: PPUSH
14846: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14850: LD_VAR 0 3
14854: PUSH
14855: LD_INT 1
14857: ARRAY
14858: PPUSH
14859: LD_INT 2
14861: PPUSH
14862: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14866: LD_VAR 0 3
14870: PUSH
14871: LD_INT 1
14873: ARRAY
14874: PPUSH
14875: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14879: LD_ADDR_VAR 0 3
14883: PUSH
14884: LD_VAR 0 3
14888: PPUSH
14889: LD_INT 1
14891: PPUSH
14892: CALL_OW 3
14896: ST_TO_ADDR
// end ;
14897: GO 14829
14899: POP
14900: POP
// if IsInUnit ( Cornel ) then
14901: LD_EXP 44
14905: PPUSH
14906: CALL_OW 310
14910: IFFALSE 14988
// begin cargo := IsInUnit ( Cornel ) ;
14912: LD_ADDR_VAR 0 7
14916: PUSH
14917: LD_EXP 44
14921: PPUSH
14922: CALL_OW 310
14926: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14927: LD_VAR 0 7
14931: PPUSH
14932: LD_INT 1
14934: PPUSH
14935: CALL_OW 289
14939: IFFALSE 14950
// ComUnload ( cargo ) ;
14941: LD_VAR 0 7
14945: PPUSH
14946: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14950: LD_EXP 44
14954: PPUSH
14955: LD_INT 235
14957: PPUSH
14958: LD_INT 122
14960: PPUSH
14961: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14965: LD_EXP 44
14969: PPUSH
14970: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14974: LD_EXP 44
14978: PPUSH
14979: LD_VAR 0 4
14983: PPUSH
14984: CALL_OW 180
// end ; if Bierezov then
14988: LD_EXP 45
14992: IFFALSE 15040
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14994: LD_EXP 45
14998: PPUSH
14999: LD_INT 260
15001: PPUSH
15002: LD_INT 120
15004: PPUSH
15005: CALL_OW 111
// if dep then
15009: LD_VAR 0 4
15013: IFFALSE 15031
// AddComEnterUnit ( Bierezov , dep ) else
15015: LD_EXP 45
15019: PPUSH
15020: LD_VAR 0 4
15024: PPUSH
15025: CALL_OW 180
15029: GO 15040
// AddComHold ( Bierezov ) ;
15031: LD_EXP 45
15035: PPUSH
15036: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
15040: LD_INT 525
15042: PPUSH
15043: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
15047: LD_ADDR_VAR 0 2
15051: PUSH
15052: LD_INT 22
15054: PUSH
15055: LD_INT 4
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PUSH
15062: LD_INT 25
15064: PUSH
15065: LD_INT 2
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PPUSH
15076: CALL_OW 69
15080: PUSH
15081: LD_EXP 45
15085: DIFF
15086: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15087: LD_INT 35
15089: PPUSH
15090: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
15094: LD_ADDR_VAR 0 6
15098: PUSH
15099: LD_INT 10
15101: PPUSH
15102: CALL_OW 435
15106: ST_TO_ADDR
// if crates then
15107: LD_VAR 0 6
15111: IFFALSE 15140
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
15113: LD_VAR 0 2
15117: PPUSH
15118: LD_VAR 0 6
15122: PUSH
15123: LD_INT 1
15125: ARRAY
15126: PPUSH
15127: LD_VAR 0 6
15131: PUSH
15132: LD_INT 2
15134: ARRAY
15135: PPUSH
15136: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
15140: LD_VAR 0 4
15144: PPUSH
15145: CALL_OW 274
15149: PPUSH
15150: LD_INT 1
15152: PPUSH
15153: CALL_OW 275
15157: PUSH
15158: LD_INT 40
15160: GREATEREQUAL
15161: IFFALSE 15087
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
15163: LD_ADDR_VAR 0 5
15167: PUSH
15168: LD_INT 4
15170: PUSH
15171: LD_INT 256
15173: PUSH
15174: LD_INT 111
15176: PUSH
15177: LD_INT 2
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: PUSH
15186: LD_INT 31
15188: PUSH
15189: LD_INT 243
15191: PUSH
15192: LD_INT 112
15194: PUSH
15195: LD_INT 2
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 31
15206: PUSH
15207: LD_INT 254
15209: PUSH
15210: LD_INT 114
15212: PUSH
15213: LD_INT 2
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: LIST
15226: ST_TO_ADDR
// for i in blist do
15227: LD_ADDR_VAR 0 1
15231: PUSH
15232: LD_VAR 0 5
15236: PUSH
15237: FOR_IN
15238: IFFALSE 15287
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
15240: LD_VAR 0 2
15244: PPUSH
15245: LD_VAR 0 1
15249: PUSH
15250: LD_INT 1
15252: ARRAY
15253: PPUSH
15254: LD_VAR 0 1
15258: PUSH
15259: LD_INT 2
15261: ARRAY
15262: PPUSH
15263: LD_VAR 0 1
15267: PUSH
15268: LD_INT 3
15270: ARRAY
15271: PPUSH
15272: LD_VAR 0 1
15276: PUSH
15277: LD_INT 4
15279: ARRAY
15280: PPUSH
15281: CALL_OW 205
15285: GO 15237
15287: POP
15288: POP
// repeat wait ( 0 0$01 ) ;
15289: LD_INT 35
15291: PPUSH
15292: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
15296: LD_INT 22
15298: PUSH
15299: LD_INT 4
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 30
15308: PUSH
15309: LD_INT 4
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 3
15318: PUSH
15319: LD_INT 57
15321: PUSH
15322: EMPTY
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: LIST
15333: PPUSH
15334: CALL_OW 69
15338: IFFALSE 15289
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15340: LD_VAR 0 3
15344: PPUSH
15345: LD_INT 22
15347: PUSH
15348: LD_INT 4
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: LD_INT 30
15357: PUSH
15358: LD_INT 4
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PPUSH
15369: CALL_OW 69
15373: PUSH
15374: LD_INT 1
15376: ARRAY
15377: PPUSH
15378: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
15382: LD_VAR 0 3
15386: PPUSH
15387: LD_INT 1
15389: PPUSH
15390: CALL_OW 183
// if has_eng > 1 then
15394: LD_VAR 0 2
15398: PUSH
15399: LD_INT 1
15401: GREATER
15402: IFFALSE 15544
// for i = has_eng downto 2 do
15404: LD_ADDR_VAR 0 1
15408: PUSH
15409: DOUBLE
15410: LD_VAR 0 2
15414: INC
15415: ST_TO_ADDR
15416: LD_INT 2
15418: PUSH
15419: FOR_DOWNTO
15420: IFFALSE 15542
// begin if IsInUnit ( has_eng [ i ] ) then
15422: LD_VAR 0 2
15426: PUSH
15427: LD_VAR 0 1
15431: ARRAY
15432: PPUSH
15433: CALL_OW 310
15437: IFFALSE 15454
// ComExitBuilding ( has_eng [ i ] ) ;
15439: LD_VAR 0 2
15443: PUSH
15444: LD_VAR 0 1
15448: ARRAY
15449: PPUSH
15450: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15454: LD_VAR 0 2
15458: PUSH
15459: LD_VAR 0 1
15463: ARRAY
15464: PPUSH
15465: LD_INT 22
15467: PUSH
15468: LD_INT 4
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 30
15477: PUSH
15478: LD_INT 4
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PPUSH
15489: CALL_OW 69
15493: PUSH
15494: LD_INT 1
15496: ARRAY
15497: PPUSH
15498: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15502: LD_VAR 0 2
15506: PUSH
15507: LD_VAR 0 1
15511: ARRAY
15512: PPUSH
15513: LD_INT 1
15515: PPUSH
15516: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15520: LD_ADDR_VAR 0 2
15524: PUSH
15525: LD_VAR 0 2
15529: PPUSH
15530: LD_VAR 0 1
15534: PPUSH
15535: CALL_OW 3
15539: ST_TO_ADDR
// end ;
15540: GO 15419
15542: POP
15543: POP
// repeat wait ( 0 0$01 ) ;
15544: LD_INT 35
15546: PPUSH
15547: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15551: LD_INT 22
15553: PUSH
15554: LD_INT 4
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_INT 30
15563: PUSH
15564: LD_INT 31
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: LD_INT 3
15573: PUSH
15574: LD_INT 57
15576: PUSH
15577: EMPTY
15578: LIST
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: LIST
15588: PPUSH
15589: CALL_OW 69
15593: PUSH
15594: LD_INT 1
15596: GREATER
15597: IFFALSE 15544
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15599: LD_ADDR_VAR 0 8
15603: PUSH
15604: LD_EXP 6
15608: PPUSH
15609: LD_INT 25
15611: PUSH
15612: LD_INT 1
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PPUSH
15619: CALL_OW 72
15623: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15624: LD_ADDR_VAR 0 1
15628: PUSH
15629: DOUBLE
15630: LD_INT 1
15632: DEC
15633: ST_TO_ADDR
15634: LD_INT 22
15636: PUSH
15637: LD_INT 4
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PUSH
15644: LD_INT 30
15646: PUSH
15647: LD_INT 31
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 3
15656: PUSH
15657: LD_INT 57
15659: PUSH
15660: EMPTY
15661: LIST
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: LIST
15671: PPUSH
15672: CALL_OW 69
15676: PUSH
15677: FOR_TO
15678: IFFALSE 15762
// begin if not sol [ i ] then
15680: LD_VAR 0 8
15684: PUSH
15685: LD_VAR 0 1
15689: ARRAY
15690: NOT
15691: IFFALSE 15695
// break ;
15693: GO 15762
// ComExitBuilding ( sol [ i ] ) ;
15695: LD_VAR 0 8
15699: PUSH
15700: LD_VAR 0 1
15704: ARRAY
15705: PPUSH
15706: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15710: LD_VAR 0 8
15714: PUSH
15715: LD_VAR 0 1
15719: ARRAY
15720: PPUSH
15721: LD_INT 22
15723: PUSH
15724: LD_INT 4
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 30
15733: PUSH
15734: LD_INT 31
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PPUSH
15745: CALL_OW 69
15749: PUSH
15750: LD_VAR 0 1
15754: ARRAY
15755: PPUSH
15756: CALL_OW 180
// end ;
15760: GO 15677
15762: POP
15763: POP
// if sol > 3 then
15764: LD_VAR 0 8
15768: PUSH
15769: LD_INT 3
15771: GREATER
15772: IFFALSE 15889
// begin ComExitBuilding ( sol [ 3 ] ) ;
15774: LD_VAR 0 8
15778: PUSH
15779: LD_INT 3
15781: ARRAY
15782: PPUSH
15783: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15787: LD_VAR 0 8
15791: PUSH
15792: LD_INT 3
15794: ARRAY
15795: PPUSH
15796: LD_INT 246
15798: PPUSH
15799: LD_INT 94
15801: PPUSH
15802: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15806: LD_VAR 0 8
15810: PUSH
15811: LD_INT 3
15813: ARRAY
15814: PPUSH
15815: LD_INT 175
15817: PPUSH
15818: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15822: LD_VAR 0 8
15826: PUSH
15827: LD_INT 3
15829: ARRAY
15830: PPUSH
15831: LD_INT 224
15833: PPUSH
15834: LD_INT 90
15836: PPUSH
15837: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15841: LD_VAR 0 8
15845: PUSH
15846: LD_INT 3
15848: ARRAY
15849: PPUSH
15850: LD_INT 245
15852: PPUSH
15853: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15857: LD_VAR 0 8
15861: PUSH
15862: LD_INT 3
15864: ARRAY
15865: PPUSH
15866: LD_INT 223
15868: PPUSH
15869: LD_INT 110
15871: PPUSH
15872: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15876: LD_VAR 0 8
15880: PUSH
15881: LD_INT 3
15883: ARRAY
15884: PPUSH
15885: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15889: LD_VAR 0 2
15893: PPUSH
15894: LD_VAR 0 4
15898: PPUSH
15899: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15903: LD_INT 22
15905: PUSH
15906: LD_INT 4
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: PUSH
15913: LD_INT 30
15915: PUSH
15916: LD_INT 4
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PPUSH
15927: CALL_OW 69
15931: PUSH
15932: LD_INT 1
15934: ARRAY
15935: PPUSH
15936: CALL_OW 313
15940: PUSH
15941: LD_INT 6
15943: LESS
15944: IFFALSE 16008
// begin if IsInUnit ( Cornel ) then
15946: LD_EXP 44
15950: PPUSH
15951: CALL_OW 310
15955: IFFALSE 15966
// ComExitBuilding ( Cornel ) ;
15957: LD_EXP 44
15961: PPUSH
15962: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15966: LD_EXP 44
15970: PPUSH
15971: LD_INT 22
15973: PUSH
15974: LD_INT 4
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 30
15983: PUSH
15984: LD_INT 4
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PPUSH
15995: CALL_OW 69
15999: PUSH
16000: LD_INT 1
16002: ARRAY
16003: PPUSH
16004: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
16008: LD_INT 35
16010: PPUSH
16011: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16015: LD_ADDR_VAR 0 3
16019: PUSH
16020: LD_INT 22
16022: PUSH
16023: LD_INT 4
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: LD_INT 21
16032: PUSH
16033: LD_INT 3
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PUSH
16040: LD_INT 3
16042: PUSH
16043: LD_INT 24
16045: PUSH
16046: LD_INT 1000
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: LIST
16061: PPUSH
16062: CALL_OW 69
16066: ST_TO_ADDR
// if filter and has_eng then
16067: LD_VAR 0 3
16071: PUSH
16072: LD_VAR 0 2
16076: AND
16077: IFFALSE 16143
// begin for i in has_eng do
16079: LD_ADDR_VAR 0 1
16083: PUSH
16084: LD_VAR 0 2
16088: PUSH
16089: FOR_IN
16090: IFFALSE 16139
// begin if IsInUnit ( i ) then
16092: LD_VAR 0 1
16096: PPUSH
16097: CALL_OW 310
16101: IFFALSE 16112
// ComExitBuilding ( i ) ;
16103: LD_VAR 0 1
16107: PPUSH
16108: CALL_OW 122
// Wait ( 3 ) ;
16112: LD_INT 3
16114: PPUSH
16115: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
16119: LD_VAR 0 1
16123: PPUSH
16124: LD_VAR 0 3
16128: PUSH
16129: LD_INT 1
16131: ARRAY
16132: PPUSH
16133: CALL_OW 130
// end ;
16137: GO 16089
16139: POP
16140: POP
// end else
16141: GO 16197
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
16143: LD_VAR 0 2
16147: PUSH
16148: LD_VAR 0 2
16152: PPUSH
16153: LD_INT 56
16155: PUSH
16156: EMPTY
16157: LIST
16158: PPUSH
16159: CALL_OW 72
16163: AND
16164: IFFALSE 16197
// for i in has_eng do
16166: LD_ADDR_VAR 0 1
16170: PUSH
16171: LD_VAR 0 2
16175: PUSH
16176: FOR_IN
16177: IFFALSE 16195
// ComEnterUnit ( i , dep ) ;
16179: LD_VAR 0 1
16183: PPUSH
16184: LD_VAR 0 4
16188: PPUSH
16189: CALL_OW 120
16193: GO 16176
16195: POP
16196: POP
// until cornel_prepared ;
16197: LD_EXP 11
16201: IFFALSE 16008
// end ;
16203: PPOPN 8
16205: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
16206: LD_EXP 11
16210: IFFALSE 16646
16212: GO 16214
16214: DISABLE
16215: LD_INT 0
16217: PPUSH
16218: PPUSH
16219: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
16220: LD_ADDR_VAR 0 2
16224: PUSH
16225: LD_INT 22
16227: PUSH
16228: LD_INT 4
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PUSH
16235: LD_INT 30
16237: PUSH
16238: LD_INT 4
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PPUSH
16249: CALL_OW 69
16253: PUSH
16254: LD_INT 1
16256: ARRAY
16257: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
16258: LD_EXP 6
16262: PPUSH
16263: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
16267: LD_EXP 45
16271: PUSH
16272: LD_EXP 45
16276: PPUSH
16277: CALL_OW 310
16281: AND
16282: IFFALSE 16293
// ComExitBuilding ( Bierezov ) ;
16284: LD_EXP 45
16288: PPUSH
16289: CALL_OW 122
// Wait ( 0 0$03 ) ;
16293: LD_INT 105
16295: PPUSH
16296: CALL_OW 67
// for i in cornel_units do
16300: LD_ADDR_VAR 0 1
16304: PUSH
16305: LD_EXP 6
16309: PUSH
16310: FOR_IN
16311: IFFALSE 16387
// begin if GetClass ( i ) in [ 2 , 3 ] then
16313: LD_VAR 0 1
16317: PPUSH
16318: CALL_OW 257
16322: PUSH
16323: LD_INT 2
16325: PUSH
16326: LD_INT 3
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: IN
16333: IFFALSE 16370
// begin ComEnterUnit ( i , arm ) ;
16335: LD_VAR 0 1
16339: PPUSH
16340: LD_VAR 0 2
16344: PPUSH
16345: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
16349: LD_VAR 0 1
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: CALL_OW 183
// AddComExitBuilding ( i ) ;
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
16370: LD_VAR 0 1
16374: PPUSH
16375: LD_INT 257
16377: PPUSH
16378: LD_INT 121
16380: PPUSH
16381: CALL_OW 171
// end ;
16385: GO 16310
16387: POP
16388: POP
// Wait ( 1 1$00 ) ;
16389: LD_INT 2100
16391: PPUSH
16392: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
16396: LD_ADDR_VAR 0 3
16400: PUSH
16401: LD_EXP 44
16405: PUSH
16406: LD_EXP 45
16410: ADD
16411: PUSH
16412: LD_EXP 6
16416: ADD
16417: PUSH
16418: LD_EXP 6
16422: PPUSH
16423: LD_INT 21
16425: PUSH
16426: LD_INT 2
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PPUSH
16433: CALL_OW 72
16437: DIFF
16438: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
16439: LD_VAR 0 3
16443: PPUSH
16444: LD_INT 248
16446: PPUSH
16447: LD_INT 85
16449: PPUSH
16450: CALL_OW 111
// AddComHold ( filter ) ;
16454: LD_VAR 0 3
16458: PPUSH
16459: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
16463: LD_INT 35
16465: PPUSH
16466: CALL_OW 67
// until cornel_attack ;
16470: LD_EXP 9
16474: IFFALSE 16463
// ComAgressiveMove ( filter , 209 , 63 ) ;
16476: LD_VAR 0 3
16480: PPUSH
16481: LD_INT 209
16483: PPUSH
16484: LD_INT 63
16486: PPUSH
16487: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16491: LD_EXP 44
16495: PPUSH
16496: LD_INT 208
16498: PPUSH
16499: LD_INT 62
16501: PPUSH
16502: CALL_OW 114
// AddComHold ( Cornel ) ;
16506: LD_EXP 44
16510: PPUSH
16511: CALL_OW 200
// if Bierezov then
16515: LD_EXP 45
16519: IFFALSE 16609
// begin filter := filter diff Bierezov ;
16521: LD_ADDR_VAR 0 3
16525: PUSH
16526: LD_VAR 0 3
16530: PUSH
16531: LD_EXP 45
16535: DIFF
16536: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16537: LD_EXP 45
16541: PPUSH
16542: LD_INT 6
16544: PPUSH
16545: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16549: LD_EXP 45
16553: PPUSH
16554: LD_INT 235
16556: PPUSH
16557: LD_INT 60
16559: PPUSH
16560: CALL_OW 111
// AddComHold ( Bierezov ) ;
16564: LD_EXP 45
16568: PPUSH
16569: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16573: LD_EXP 45
16577: PPUSH
16578: LD_INT 350
16580: PPUSH
16581: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16585: LD_EXP 45
16589: PPUSH
16590: LD_INT 198
16592: PPUSH
16593: LD_INT 28
16595: PPUSH
16596: CALL_OW 171
// AddComHold ( Bierezov ) ;
16600: LD_EXP 45
16604: PPUSH
16605: CALL_OW 200
// end ; repeat wait ( 0 0$2 ) ;
16609: LD_INT 70
16611: PPUSH
16612: CALL_OW 67
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16616: LD_EXP 44
16620: PPUSH
16621: LD_INT 208
16623: PPUSH
16624: LD_INT 62
16626: PPUSH
16627: CALL_OW 114
// until not IsInArea ( Cornel , cornelKappaArea ) ;
16631: LD_EXP 44
16635: PPUSH
16636: LD_INT 16
16638: PPUSH
16639: CALL_OW 308
16643: NOT
16644: IFFALSE 16609
// end ; end_of_file
16646: PPOPN 3
16648: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16649: LD_EXP 53
16653: PUSH
16654: LD_EXP 31
16658: NOT
16659: AND
16660: PUSH
16661: LD_EXP 32
16665: NOT
16666: AND
16667: IFFALSE 17117
16669: GO 16671
16671: DISABLE
16672: LD_INT 0
16674: PPUSH
16675: PPUSH
16676: PPUSH
16677: PPUSH
// begin enable ;
16678: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16679: LD_ADDR_VAR 0 4
16683: PUSH
16684: LD_INT 81
16686: PUSH
16687: LD_INT 3
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PPUSH
16694: CALL_OW 69
16698: ST_TO_ADDR
// for i = 1 to ru_patrol do
16699: LD_ADDR_VAR 0 2
16703: PUSH
16704: DOUBLE
16705: LD_INT 1
16707: DEC
16708: ST_TO_ADDR
16709: LD_EXP 53
16713: PUSH
16714: FOR_TO
16715: IFFALSE 17115
// begin un := ru_patrol [ i ] ;
16717: LD_ADDR_VAR 0 1
16721: PUSH
16722: LD_EXP 53
16726: PUSH
16727: LD_VAR 0 2
16731: ARRAY
16732: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16733: LD_VAR 0 1
16737: PPUSH
16738: LD_INT 13
16740: PPUSH
16741: CALL_OW 308
16745: IFFALSE 16850
// begin if not ru_alert then
16747: LD_EXP 60
16751: NOT
16752: IFFALSE 16762
// ru_alert := true ;
16754: LD_ADDR_EXP 60
16758: PUSH
16759: LD_INT 1
16761: ST_TO_ADDR
// if not See ( 1 , un ) then
16762: LD_INT 1
16764: PPUSH
16765: LD_VAR 0 1
16769: PPUSH
16770: CALL_OW 292
16774: NOT
16775: IFFALSE 16789
// SetLives ( un , 1000 ) ;
16777: LD_VAR 0 1
16781: PPUSH
16782: LD_INT 1000
16784: PPUSH
16785: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16789: LD_ADDR_EXP 53
16793: PUSH
16794: LD_EXP 53
16798: PUSH
16799: LD_VAR 0 1
16803: DIFF
16804: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16805: LD_VAR 0 1
16809: PPUSH
16810: LD_INT 22
16812: PUSH
16813: LD_INT 3
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 30
16822: PUSH
16823: LD_INT 4
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PPUSH
16834: CALL_OW 69
16838: PPUSH
16839: CALL 1007 0 1
16843: PPUSH
16844: CALL_OW 120
// continue ;
16848: GO 16714
// end ; if IsOk ( un ) and not HasTask ( un ) then
16850: LD_VAR 0 1
16854: PPUSH
16855: CALL_OW 302
16859: PUSH
16860: LD_VAR 0 1
16864: PPUSH
16865: CALL_OW 314
16869: NOT
16870: AND
16871: IFFALSE 16964
// begin for j = 1 to ru_firepoints_south [ i ] do
16873: LD_ADDR_VAR 0 3
16877: PUSH
16878: DOUBLE
16879: LD_INT 1
16881: DEC
16882: ST_TO_ADDR
16883: LD_EXP 59
16887: PUSH
16888: LD_VAR 0 2
16892: ARRAY
16893: PUSH
16894: FOR_TO
16895: IFFALSE 16962
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16897: LD_VAR 0 1
16901: PPUSH
16902: LD_EXP 59
16906: PUSH
16907: LD_VAR 0 2
16911: ARRAY
16912: PUSH
16913: LD_VAR 0 3
16917: ARRAY
16918: PUSH
16919: LD_INT 1
16921: ARRAY
16922: PPUSH
16923: LD_EXP 59
16927: PUSH
16928: LD_VAR 0 2
16932: ARRAY
16933: PUSH
16934: LD_VAR 0 3
16938: ARRAY
16939: PUSH
16940: LD_INT 2
16942: ARRAY
16943: PPUSH
16944: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16948: LD_VAR 0 1
16952: PPUSH
16953: LD_INT 70
16955: PPUSH
16956: CALL_OW 202
// end ;
16960: GO 16894
16962: POP
16963: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16964: LD_VAR 0 1
16968: PPUSH
16969: CALL_OW 256
16973: PUSH
16974: LD_INT 700
16976: LESS
16977: PUSH
16978: LD_VAR 0 1
16982: PPUSH
16983: LD_INT 13
16985: PPUSH
16986: CALL_OW 308
16990: NOT
16991: AND
16992: IFFALSE 17044
// begin ComMoveToArea ( un , retreatArea ) ;
16994: LD_VAR 0 1
16998: PPUSH
16999: LD_INT 13
17001: PPUSH
17002: CALL_OW 113
// if not ru_alert_xy then
17006: LD_EXP 61
17010: NOT
17011: IFFALSE 17042
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
17013: LD_ADDR_EXP 61
17017: PUSH
17018: LD_VAR 0 1
17022: PPUSH
17023: CALL_OW 250
17027: PUSH
17028: LD_VAR 0 1
17032: PPUSH
17033: CALL_OW 251
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: ST_TO_ADDR
// end else
17042: GO 17113
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17044: LD_VAR 0 1
17048: PPUSH
17049: LD_VAR 0 4
17053: PPUSH
17054: LD_VAR 0 1
17058: PPUSH
17059: CALL_OW 74
17063: PPUSH
17064: CALL_OW 296
17068: PUSH
17069: LD_INT 9
17071: LESS
17072: PUSH
17073: LD_VAR 0 1
17077: PPUSH
17078: CALL_OW 256
17082: PUSH
17083: LD_INT 500
17085: GREATER
17086: AND
17087: IFFALSE 17113
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17089: LD_VAR 0 1
17093: PPUSH
17094: LD_VAR 0 4
17098: PPUSH
17099: LD_VAR 0 1
17103: PPUSH
17104: CALL_OW 74
17108: PPUSH
17109: CALL_OW 115
// end ;
17113: GO 16714
17115: POP
17116: POP
// end ;
17117: PPOPN 4
17119: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
17120: LD_EXP 60
17124: PUSH
17125: LD_EXP 61
17129: AND
17130: PUSH
17131: LD_EXP 31
17135: NOT
17136: AND
17137: PUSH
17138: LD_EXP 32
17142: NOT
17143: AND
17144: IFFALSE 17354
17146: GO 17148
17148: DISABLE
17149: LD_INT 0
17151: PPUSH
17152: PPUSH
// begin enable ;
17153: ENABLE
// if not ru_vehicles then
17154: LD_EXP 56
17158: NOT
17159: IFFALSE 17163
// exit ;
17161: GO 17354
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17163: LD_ADDR_VAR 0 2
17167: PUSH
17168: LD_INT 81
17170: PUSH
17171: LD_INT 3
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PPUSH
17178: CALL_OW 69
17182: ST_TO_ADDR
// if ru_vehicles then
17183: LD_EXP 56
17187: IFFALSE 17354
// begin for i in ru_vehicles do
17189: LD_ADDR_VAR 0 1
17193: PUSH
17194: LD_EXP 56
17198: PUSH
17199: FOR_IN
17200: IFFALSE 17352
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
17202: LD_VAR 0 1
17206: PPUSH
17207: CALL_OW 302
17211: PUSH
17212: LD_VAR 0 1
17216: PPUSH
17217: LD_VAR 0 2
17221: PPUSH
17222: LD_VAR 0 1
17226: PPUSH
17227: CALL_OW 74
17231: PPUSH
17232: CALL_OW 296
17236: PUSH
17237: LD_INT 9
17239: LESS
17240: AND
17241: IFFALSE 17267
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17243: LD_VAR 0 1
17247: PPUSH
17248: LD_VAR 0 2
17252: PPUSH
17253: LD_VAR 0 1
17257: PPUSH
17258: CALL_OW 74
17262: PPUSH
17263: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
17267: LD_VAR 0 1
17271: PPUSH
17272: CALL_OW 314
17276: NOT
17277: PUSH
17278: LD_VAR 0 1
17282: PPUSH
17283: CALL_OW 302
17287: AND
17288: PUSH
17289: LD_VAR 0 1
17293: PPUSH
17294: LD_EXP 61
17298: PUSH
17299: LD_INT 1
17301: ARRAY
17302: PPUSH
17303: LD_EXP 61
17307: PUSH
17308: LD_INT 2
17310: ARRAY
17311: PPUSH
17312: CALL_OW 297
17316: PUSH
17317: LD_INT 10
17319: GREATER
17320: AND
17321: IFFALSE 17350
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
17323: LD_VAR 0 1
17327: PPUSH
17328: LD_EXP 61
17332: PUSH
17333: LD_INT 1
17335: ARRAY
17336: PPUSH
17337: LD_EXP 61
17341: PUSH
17342: LD_INT 2
17344: ARRAY
17345: PPUSH
17346: CALL_OW 114
// end ;
17350: GO 17199
17352: POP
17353: POP
// end ; end ;
17354: PPOPN 2
17356: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
17357: LD_EXP 61
17361: PUSH
17362: LD_EXP 60
17366: AND
17367: PUSH
17368: LD_INT 3
17370: PPUSH
17371: CALL_OW 463
17375: NOT
17376: AND
17377: PUSH
17378: LD_EXP 31
17382: NOT
17383: AND
17384: PUSH
17385: LD_EXP 32
17389: NOT
17390: AND
17391: IFFALSE 17486
17393: GO 17395
17395: DISABLE
17396: LD_INT 0
17398: PPUSH
// begin enable ;
17399: ENABLE
// ru_alert_xy := false ;
17400: LD_ADDR_EXP 61
17404: PUSH
17405: LD_INT 0
17407: ST_TO_ADDR
// ru_alert := false ;
17408: LD_ADDR_EXP 60
17412: PUSH
17413: LD_INT 0
17415: ST_TO_ADDR
// if ru_vehicles then
17416: LD_EXP 56
17420: IFFALSE 17486
// for i in ru_vehicles do
17422: LD_ADDR_VAR 0 1
17426: PUSH
17427: LD_EXP 56
17431: PUSH
17432: FOR_IN
17433: IFFALSE 17484
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
17435: LD_VAR 0 1
17439: PPUSH
17440: CALL_OW 302
17444: PUSH
17445: LD_VAR 0 1
17449: PPUSH
17450: LD_INT 89
17452: PPUSH
17453: LD_INT 36
17455: PPUSH
17456: CALL_OW 297
17460: PUSH
17461: LD_INT 10
17463: GREATER
17464: AND
17465: IFFALSE 17482
// ComMoveXY ( i , 89 , 36 ) ;
17467: LD_VAR 0 1
17471: PPUSH
17472: LD_INT 89
17474: PPUSH
17475: LD_INT 36
17477: PPUSH
17478: CALL_OW 111
17482: GO 17432
17484: POP
17485: POP
// end ;
17486: PPOPN 1
17488: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
17489: LD_EXP 55
17493: PUSH
17494: LD_EXP 31
17498: NOT
17499: AND
17500: PUSH
17501: LD_EXP 32
17505: NOT
17506: AND
17507: IFFALSE 17791
17509: GO 17511
17511: DISABLE
17512: LD_INT 0
17514: PPUSH
17515: PPUSH
17516: PPUSH
// begin enable ;
17517: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17518: LD_ADDR_VAR 0 3
17522: PUSH
17523: LD_INT 81
17525: PUSH
17526: LD_INT 3
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PPUSH
17533: CALL_OW 69
17537: ST_TO_ADDR
// for i = 1 to ru_forest do
17538: LD_ADDR_VAR 0 1
17542: PUSH
17543: DOUBLE
17544: LD_INT 1
17546: DEC
17547: ST_TO_ADDR
17548: LD_EXP 55
17552: PUSH
17553: FOR_TO
17554: IFFALSE 17789
// begin un := ru_forest [ i ] ;
17556: LD_ADDR_VAR 0 2
17560: PUSH
17561: LD_EXP 55
17565: PUSH
17566: LD_VAR 0 1
17570: ARRAY
17571: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17572: LD_VAR 0 2
17576: PPUSH
17577: LD_INT 13
17579: PPUSH
17580: CALL_OW 308
17584: IFFALSE 17674
// begin if not See ( 1 , un ) then
17586: LD_INT 1
17588: PPUSH
17589: LD_VAR 0 2
17593: PPUSH
17594: CALL_OW 292
17598: NOT
17599: IFFALSE 17613
// SetLives ( un , 1000 ) ;
17601: LD_VAR 0 2
17605: PPUSH
17606: LD_INT 1000
17608: PPUSH
17609: CALL_OW 234
// ru_forest := ru_forest diff un ;
17613: LD_ADDR_EXP 55
17617: PUSH
17618: LD_EXP 55
17622: PUSH
17623: LD_VAR 0 2
17627: DIFF
17628: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17629: LD_VAR 0 2
17633: PPUSH
17634: LD_INT 22
17636: PUSH
17637: LD_INT 3
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 30
17646: PUSH
17647: LD_INT 4
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PPUSH
17658: CALL_OW 69
17662: PPUSH
17663: CALL 1007 0 1
17667: PPUSH
17668: CALL_OW 120
// continue ;
17672: GO 17553
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17674: LD_VAR 0 2
17678: PPUSH
17679: CALL_OW 256
17683: PUSH
17684: LD_INT 700
17686: LESS
17687: PUSH
17688: LD_VAR 0 2
17692: PPUSH
17693: LD_INT 13
17695: PPUSH
17696: CALL_OW 308
17700: NOT
17701: AND
17702: IFFALSE 17718
// ComMoveToArea ( un , retreatArea ) else
17704: LD_VAR 0 2
17708: PPUSH
17709: LD_INT 13
17711: PPUSH
17712: CALL_OW 113
17716: GO 17787
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17718: LD_VAR 0 2
17722: PPUSH
17723: LD_VAR 0 3
17727: PPUSH
17728: LD_VAR 0 2
17732: PPUSH
17733: CALL_OW 74
17737: PPUSH
17738: CALL_OW 296
17742: PUSH
17743: LD_INT 9
17745: LESS
17746: PUSH
17747: LD_VAR 0 2
17751: PPUSH
17752: CALL_OW 256
17756: PUSH
17757: LD_INT 500
17759: GREATER
17760: AND
17761: IFFALSE 17787
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17763: LD_VAR 0 2
17767: PPUSH
17768: LD_VAR 0 3
17772: PPUSH
17773: LD_VAR 0 2
17777: PPUSH
17778: CALL_OW 74
17782: PPUSH
17783: CALL_OW 115
// end ;
17787: GO 17553
17789: POP
17790: POP
// end ;
17791: PPOPN 3
17793: END
// every 0 0$10 trigger not send_attack_on_cornel do var i , filter ;
17794: LD_EXP 32
17798: NOT
17799: IFFALSE 17942
17801: GO 17803
17803: DISABLE
17804: LD_INT 0
17806: PPUSH
17807: PPUSH
// begin enable ;
17808: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 990 ] ] ] ) ;
17809: LD_ADDR_VAR 0 2
17813: PUSH
17814: LD_INT 22
17816: PUSH
17817: LD_INT 3
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 21
17826: PUSH
17827: LD_INT 3
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 3
17836: PUSH
17837: LD_INT 24
17839: PUSH
17840: LD_INT 990
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: LIST
17855: PPUSH
17856: CALL_OW 69
17860: ST_TO_ADDR
// if filter then
17861: LD_VAR 0 2
17865: IFFALSE 17942
// for i in filter do
17867: LD_ADDR_VAR 0 1
17871: PUSH
17872: LD_VAR 0 2
17876: PUSH
17877: FOR_IN
17878: IFFALSE 17940
// if GetY ( i ) > 70 then
17880: LD_VAR 0 1
17884: PPUSH
17885: CALL_OW 251
17889: PUSH
17890: LD_INT 70
17892: GREATER
17893: IFFALSE 17899
// continue else
17895: GO 17877
17897: GO 17938
// begin ru_alert := true ;
17899: LD_ADDR_EXP 60
17903: PUSH
17904: LD_INT 1
17906: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17907: LD_ADDR_EXP 61
17911: PUSH
17912: LD_VAR 0 1
17916: PPUSH
17917: CALL_OW 250
17921: PUSH
17922: LD_VAR 0 1
17926: PPUSH
17927: CALL_OW 251
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: ST_TO_ADDR
// break ;
17936: GO 17940
// end ;
17938: GO 17877
17940: POP
17941: POP
// end ;
17942: PPOPN 2
17944: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17945: LD_EXP 31
17949: IFFALSE 18098
17951: GO 17953
17953: DISABLE
17954: LD_INT 0
17956: PPUSH
17957: PPUSH
17958: PPUSH
17959: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17960: LD_ADDR_VAR 0 4
17964: PUSH
17965: LD_EXP 56
17969: PUSH
17970: LD_EXP 55
17974: ADD
17975: PUSH
17976: LD_EXP 53
17980: ADD
17981: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17982: LD_ADDR_VAR 0 3
17986: PUSH
17987: LD_INT 3
17989: PPUSH
17990: LD_INT 81
17992: PUSH
17993: LD_INT 3
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PPUSH
18000: CALL_OW 70
18004: ST_TO_ADDR
// if filter and enemy then
18005: LD_VAR 0 4
18009: PUSH
18010: LD_VAR 0 3
18014: AND
18015: IFFALSE 18098
// repeat wait ( 0 0$01 ) ;
18017: LD_INT 35
18019: PPUSH
18020: CALL_OW 67
// for i in filter do
18024: LD_ADDR_VAR 0 1
18028: PUSH
18029: LD_VAR 0 4
18033: PUSH
18034: FOR_IN
18035: IFFALSE 18063
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
18037: LD_VAR 0 1
18041: PPUSH
18042: LD_VAR 0 3
18046: PPUSH
18047: LD_VAR 0 1
18051: PPUSH
18052: CALL_OW 74
18056: PPUSH
18057: CALL_OW 115
// end ;
18061: GO 18034
18063: POP
18064: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
18065: LD_INT 3
18067: PPUSH
18068: LD_INT 81
18070: PUSH
18071: LD_INT 3
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PPUSH
18078: CALL_OW 70
18082: PUSH
18083: LD_INT 0
18085: EQUAL
18086: PUSH
18087: LD_VAR 0 4
18091: PUSH
18092: LD_INT 0
18094: EQUAL
18095: OR
18096: IFFALSE 18017
// end ;
18098: PPOPN 4
18100: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
18101: LD_EXP 26
18105: PUSH
18106: LD_INT 22
18108: PUSH
18109: LD_INT 4
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 30
18118: PUSH
18119: LD_INT 4
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 3
18128: PUSH
18129: LD_INT 57
18131: PUSH
18132: EMPTY
18133: LIST
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: LIST
18143: PPUSH
18144: CALL_OW 69
18148: AND
18149: IFFALSE 18198
18151: GO 18153
18153: DISABLE
18154: LD_INT 0
18156: PPUSH
// begin if not ru_cornel_attack then
18157: LD_EXP 58
18161: NOT
18162: IFFALSE 18166
// exit ;
18164: GO 18198
// for i in ru_cornel_attack do
18166: LD_ADDR_VAR 0 1
18170: PUSH
18171: LD_EXP 58
18175: PUSH
18176: FOR_IN
18177: IFFALSE 18196
// ComAgressiveMove ( i , 258 , 119 ) ;
18179: LD_VAR 0 1
18183: PPUSH
18184: LD_INT 258
18186: PPUSH
18187: LD_INT 119
18189: PPUSH
18190: CALL_OW 114
18194: GO 18176
18196: POP
18197: POP
// end ; end_of_file
18198: PPOPN 1
18200: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
18201: LD_EXP 5
18205: PUSH
18206: LD_EXP 9
18210: NOT
18211: AND
18212: PUSH
18213: LD_EXP 20
18217: AND
18218: IFFALSE 18330
18220: GO 18222
18222: DISABLE
18223: LD_INT 0
18225: PPUSH
// begin enable ;
18226: ENABLE
// crates_counter := crates_counter - 50 ;
18227: LD_ADDR_EXP 20
18231: PUSH
18232: LD_EXP 20
18236: PUSH
18237: LD_INT 50
18239: MINUS
18240: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
18241: LD_INT 8
18243: PPUSH
18244: LD_INT 2
18246: PPUSH
18247: LD_INT 5
18249: PPUSH
18250: CALL_OW 12
18254: PPUSH
18255: LD_INT 1
18257: PPUSH
18258: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
18262: LD_INT 1785
18264: PPUSH
18265: LD_INT 2345
18267: PPUSH
18268: CALL_OW 12
18272: PPUSH
18273: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
18277: LD_ADDR_VAR 0 1
18281: PUSH
18282: LD_INT 1
18284: PPUSH
18285: LD_OWVAR 67
18289: PUSH
18290: LD_INT 2
18292: PLUS
18293: PPUSH
18294: CALL_OW 12
18298: ST_TO_ADDR
// if r < 3 then
18299: LD_VAR 0 1
18303: PUSH
18304: LD_INT 3
18306: LESS
18307: IFFALSE 18330
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
18309: LD_INT 4
18311: PPUSH
18312: LD_INT 1
18314: PPUSH
18315: LD_INT 5
18317: PPUSH
18318: CALL_OW 12
18322: PPUSH
18323: LD_INT 1
18325: PPUSH
18326: CALL_OW 55
// end ;
18330: PPOPN 1
18332: END
// every 0 0$01 trigger cornel_active do
18333: LD_EXP 8
18337: IFFALSE 18426
18339: GO 18341
18341: DISABLE
// begin Wait ( 0 0$03 ) ;
18342: LD_INT 105
18344: PPUSH
18345: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18349: LD_INT 2
18351: PPUSH
18352: LD_INT 5
18354: PPUSH
18355: CALL_OW 12
18359: PPUSH
18360: LD_INT 10
18362: PPUSH
18363: LD_INT 1
18365: PPUSH
18366: CALL_OW 55
// Wait ( 0 0$13 ) ;
18370: LD_INT 455
18372: PPUSH
18373: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18377: LD_INT 2
18379: PPUSH
18380: LD_INT 5
18382: PPUSH
18383: CALL_OW 12
18387: PPUSH
18388: LD_INT 10
18390: PPUSH
18391: LD_INT 1
18393: PPUSH
18394: CALL_OW 55
// Wait ( 0 0$16 ) ;
18398: LD_INT 560
18400: PPUSH
18401: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18405: LD_INT 2
18407: PPUSH
18408: LD_INT 5
18410: PPUSH
18411: CALL_OW 12
18415: PPUSH
18416: LD_INT 10
18418: PPUSH
18419: LD_INT 1
18421: PPUSH
18422: CALL_OW 55
// end ; end_of_file
18426: END
// every 0 0$01 trigger cornel_prepared do
18427: LD_EXP 11
18431: IFFALSE 18490
18433: GO 18435
18435: DISABLE
// begin enable ;
18436: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
18437: LD_ADDR_OWVAR 47
18441: PUSH
18442: LD_STRING #Am03-1
18444: PUSH
18445: LD_EXP 10
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
18454: LD_ADDR_EXP 10
18458: PUSH
18459: LD_EXP 10
18463: PPUSH
18464: LD_STRING -
18466: PPUSH
18467: CALL 1077 0 2
18471: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
18472: LD_EXP 10
18476: PUSH
18477: LD_INT 0
18479: EQUAL
18480: IFFALSE 18490
// begin Display_Strings := [ ] ;
18482: LD_ADDR_OWVAR 47
18486: PUSH
18487: EMPTY
18488: ST_TO_ADDR
// disable ;
18489: DISABLE
// end ; end ;
18490: END
// every 0 0$01 trigger debug and debug_strings do
18491: LD_EXP 1
18495: PUSH
18496: LD_OWVAR 48
18500: AND
18501: IFFALSE 18517
18503: GO 18505
18505: DISABLE
// begin enable ;
18506: ENABLE
// Display_Strings := debug_strings ;
18507: LD_ADDR_OWVAR 47
18511: PUSH
18512: LD_OWVAR 48
18516: ST_TO_ADDR
// end ; end_of_file
18517: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
18518: LD_VAR 0 1
18522: PPUSH
18523: LD_VAR 0 2
18527: PPUSH
18528: CALL 35115 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
18532: LD_VAR 0 1
18536: PPUSH
18537: CALL_OW 255
18541: PUSH
18542: LD_INT 1
18544: EQUAL
18545: PUSH
18546: LD_EXP 14
18550: NOT
18551: AND
18552: IFFALSE 18562
// solar_builded := true ;
18554: LD_ADDR_EXP 14
18558: PUSH
18559: LD_INT 1
18561: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18562: LD_VAR 0 1
18566: PPUSH
18567: CALL_OW 255
18571: PUSH
18572: LD_INT 1
18574: EQUAL
18575: PUSH
18576: LD_EXP 29
18580: AND
18581: IFFALSE 18618
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18583: LD_ADDR_EXP 29
18587: PUSH
18588: LD_EXP 29
18592: PUSH
18593: LD_INT 1750
18595: PUSH
18596: LD_INT 1400
18598: PUSH
18599: LD_INT 1225
18601: PUSH
18602: LD_INT 1050
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: PUSH
18611: LD_OWVAR 67
18615: ARRAY
18616: PLUS
18617: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18618: LD_VAR 0 1
18622: PPUSH
18623: CALL_OW 255
18627: PUSH
18628: LD_INT 3
18630: EQUAL
18631: IFFALSE 18649
// ru_vehicles := ru_vehicles ^ veh ;
18633: LD_ADDR_EXP 56
18637: PUSH
18638: LD_EXP 56
18642: PUSH
18643: LD_VAR 0 1
18647: ADD
18648: ST_TO_ADDR
// end ;
18649: PPOPN 2
18651: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18652: LD_VAR 0 1
18656: PPUSH
18657: CALL 34995 0 1
// if un in ru_patrol then
18661: LD_VAR 0 1
18665: PUSH
18666: LD_EXP 53
18670: IN
18671: IFFALSE 18689
// ru_patrol := ru_patrol diff un ;
18673: LD_ADDR_EXP 53
18677: PUSH
18678: LD_EXP 53
18682: PUSH
18683: LD_VAR 0 1
18687: DIFF
18688: ST_TO_ADDR
// if un in ru_forest then
18689: LD_VAR 0 1
18693: PUSH
18694: LD_EXP 55
18698: IN
18699: IFFALSE 18717
// ru_forest := ru_forest diff un ;
18701: LD_ADDR_EXP 55
18705: PUSH
18706: LD_EXP 55
18710: PUSH
18711: LD_VAR 0 1
18715: DIFF
18716: ST_TO_ADDR
// if un in ru_vehicles then
18717: LD_VAR 0 1
18721: PUSH
18722: LD_EXP 56
18726: IN
18727: IFFALSE 18833
// begin ru_vehicles := ru_vehicles diff un ;
18729: LD_ADDR_EXP 56
18733: PUSH
18734: LD_EXP 56
18738: PUSH
18739: LD_VAR 0 1
18743: DIFF
18744: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18745: LD_ADDR_EXP 57
18749: PUSH
18750: LD_EXP 57
18754: PUSH
18755: LD_VAR 0 1
18759: PPUSH
18760: CALL_OW 265
18764: PUSH
18765: LD_VAR 0 1
18769: PPUSH
18770: CALL_OW 262
18774: PUSH
18775: LD_VAR 0 1
18779: PPUSH
18780: CALL_OW 263
18784: PUSH
18785: LD_VAR 0 1
18789: PPUSH
18790: CALL_OW 264
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: ADD
18801: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18802: LD_ADDR_EXP 13
18806: PUSH
18807: LD_EXP 13
18811: PUSH
18812: LD_INT 1
18814: PLUS
18815: ST_TO_ADDR
// if ach_counter = 10 then
18816: LD_EXP 13
18820: PUSH
18821: LD_INT 10
18823: EQUAL
18824: IFFALSE 18833
// SetAchievement ( ACH_FAUST ) ;
18826: LD_STRING ACH_FAUST
18828: PPUSH
18829: CALL_OW 543
// end ; if un = Pokryshkin then
18833: LD_VAR 0 1
18837: PUSH
18838: LD_EXP 52
18842: EQUAL
18843: IFFALSE 18852
// SetAchievement ( ACH_POKR ) ;
18845: LD_STRING ACH_POKR
18847: PPUSH
18848: CALL_OW 543
// if un = JMM then
18852: LD_VAR 0 1
18856: PUSH
18857: LD_EXP 37
18861: EQUAL
18862: IFFALSE 18871
// YouLost ( 0 ) ;
18864: LD_STRING 0
18866: PPUSH
18867: CALL_OW 104
// if un = us_dep_west then
18871: LD_VAR 0 1
18875: PUSH
18876: LD_INT 1
18878: EQUAL
18879: IFFALSE 18888
// YouLost ( 2 ) ;
18881: LD_STRING 2
18883: PPUSH
18884: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18888: LD_VAR 0 1
18892: PPUSH
18893: CALL_OW 255
18897: PUSH
18898: LD_INT 8
18900: EQUAL
18901: PUSH
18902: LD_EXP 5
18906: NOT
18907: AND
18908: IFFALSE 18917
// YouLost ( 4 ) ;
18910: LD_STRING 4
18912: PPUSH
18913: CALL_OW 104
// if un in jmm_units then
18917: LD_VAR 0 1
18921: PUSH
18922: LD_EXP 4
18926: IN
18927: IFFALSE 18943
// lose_counter := lose_counter + 1 ;
18929: LD_ADDR_EXP 34
18933: PUSH
18934: LD_EXP 34
18938: PUSH
18939: LD_INT 1
18941: PLUS
18942: ST_TO_ADDR
// end ;
18943: PPOPN 1
18945: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18946: LD_INT 0
18948: PPUSH
18949: PPUSH
// begin if GetSide ( driver ) = 3 then
18950: LD_VAR 0 1
18954: PPUSH
18955: CALL_OW 255
18959: PUSH
18960: LD_INT 3
18962: EQUAL
18963: IFFALSE 19041
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18965: LD_ADDR_VAR 0 6
18969: PUSH
18970: LD_INT 22
18972: PUSH
18973: LD_INT 3
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 30
18982: PUSH
18983: LD_INT 3
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PPUSH
18994: CALL_OW 69
18998: PPUSH
18999: CALL 1007 0 1
19003: ST_TO_ADDR
// if place then
19004: LD_VAR 0 6
19008: IFFALSE 19026
// ComEnterUnit ( driver , place ) else
19010: LD_VAR 0 1
19014: PPUSH
19015: LD_VAR 0 6
19019: PPUSH
19020: CALL_OW 120
19024: GO 19041
// ComMoveXY ( driver , 70 , 22 ) ;
19026: LD_VAR 0 1
19030: PPUSH
19031: LD_INT 70
19033: PPUSH
19034: LD_INT 22
19036: PPUSH
19037: CALL_OW 111
// end ; end ;
19041: PPOPN 6
19043: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
19044: LD_VAR 0 1
19048: PUSH
19049: LD_INT 1
19051: EQUAL
19052: PUSH
19053: LD_VAR 0 2
19057: PUSH
19058: LD_INT 4
19060: EQUAL
19061: PUSH
19062: LD_VAR 0 2
19066: PUSH
19067: LD_INT 8
19069: EQUAL
19070: PUSH
19071: LD_EXP 5
19075: NOT
19076: AND
19077: OR
19078: AND
19079: IFFALSE 19088
// YouLost ( 5 ) ;
19081: LD_STRING 5
19083: PPUSH
19084: CALL_OW 104
// end ;
19088: PPOPN 2
19090: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
19091: LD_EXP 36
19095: PUSH
19096: LD_INT 22
19098: PUSH
19099: LD_INT 1
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 21
19108: PUSH
19109: LD_INT 1
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PPUSH
19120: CALL_OW 69
19124: PUSH
19125: LD_INT 22
19127: PUSH
19128: LD_INT 8
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 21
19137: PUSH
19138: LD_INT 1
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PPUSH
19149: CALL_OW 69
19153: ADD
19154: PLUS
19155: PUSH
19156: LD_INT 5
19158: LESS
19159: IFFALSE 19171
19161: GO 19163
19163: DISABLE
// YouLost ( 1 ) ;
19164: LD_STRING 1
19166: PPUSH
19167: CALL_OW 104
19171: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
19172: LD_INT 1
19174: PPUSH
19175: CALL_OW 255
19179: PUSH
19180: LD_INT 3
19182: EQUAL
19183: IFFALSE 19195
19185: GO 19187
19187: DISABLE
// YouLost ( 3 ) ; end_of_file end_of_file
19188: LD_STRING 3
19190: PPUSH
19191: CALL_OW 104
19195: END
// every 0 0$1 do
19196: GO 19198
19198: DISABLE
// begin enable ;
19199: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19200: LD_STRING updateTimer(
19202: PUSH
19203: LD_OWVAR 1
19207: STR
19208: PUSH
19209: LD_STRING );
19211: STR
19212: PPUSH
19213: CALL_OW 559
// end ;
19217: END
// export function SOS_MapStart ( ) ; begin
19218: LD_INT 0
19220: PPUSH
// if streamModeActive then
19221: LD_EXP 63
19225: IFFALSE 19234
// DefineStreamItems ( true ) ;
19227: LD_INT 1
19229: PPUSH
19230: CALL 21038 0 1
// UpdateLuaVariables ( ) ;
19234: CALL 19251 0 0
// UpdateFactoryWaypoints ( ) ;
19238: CALL 33899 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19242: CALL 34156 0 0
// end ;
19246: LD_VAR 0 1
19250: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
19251: LD_INT 0
19253: PPUSH
// if not globalGameSaveCounter then
19254: LD_EXP 62
19258: NOT
19259: IFFALSE 19270
// ToLua ( setGameSaveCounter(0) ) else
19261: LD_STRING setGameSaveCounter(0)
19263: PPUSH
19264: CALL_OW 559
19268: GO 19302
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19270: LD_ADDR_EXP 62
19274: PUSH
19275: LD_EXP 62
19279: PPUSH
19280: CALL 78113 0 1
19284: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19285: LD_STRING setGameSaveCounter(
19287: PUSH
19288: LD_EXP 62
19292: STR
19293: PUSH
19294: LD_STRING )
19296: STR
19297: PPUSH
19298: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19302: LD_STRING setGameDifficulty(
19304: PUSH
19305: LD_OWVAR 67
19309: STR
19310: PUSH
19311: LD_STRING )
19313: STR
19314: PPUSH
19315: CALL_OW 559
// end ;
19319: LD_VAR 0 1
19323: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19324: LD_INT 0
19326: PPUSH
// if p2 = stream_mode then
19327: LD_VAR 0 2
19331: PUSH
19332: LD_INT 100
19334: EQUAL
19335: IFFALSE 20338
// begin if not StreamModeActive then
19337: LD_EXP 63
19341: NOT
19342: IFFALSE 19352
// StreamModeActive := true ;
19344: LD_ADDR_EXP 63
19348: PUSH
19349: LD_INT 1
19351: ST_TO_ADDR
// if p3 = 0 then
19352: LD_VAR 0 3
19356: PUSH
19357: LD_INT 0
19359: EQUAL
19360: IFFALSE 19366
// InitStreamMode ;
19362: CALL 20574 0 0
// if p3 = 1 then
19366: LD_VAR 0 3
19370: PUSH
19371: LD_INT 1
19373: EQUAL
19374: IFFALSE 19384
// sRocket := true ;
19376: LD_ADDR_EXP 68
19380: PUSH
19381: LD_INT 1
19383: ST_TO_ADDR
// if p3 = 2 then
19384: LD_VAR 0 3
19388: PUSH
19389: LD_INT 2
19391: EQUAL
19392: IFFALSE 19402
// sSpeed := true ;
19394: LD_ADDR_EXP 67
19398: PUSH
19399: LD_INT 1
19401: ST_TO_ADDR
// if p3 = 3 then
19402: LD_VAR 0 3
19406: PUSH
19407: LD_INT 3
19409: EQUAL
19410: IFFALSE 19420
// sEngine := true ;
19412: LD_ADDR_EXP 69
19416: PUSH
19417: LD_INT 1
19419: ST_TO_ADDR
// if p3 = 4 then
19420: LD_VAR 0 3
19424: PUSH
19425: LD_INT 4
19427: EQUAL
19428: IFFALSE 19438
// sSpec := true ;
19430: LD_ADDR_EXP 66
19434: PUSH
19435: LD_INT 1
19437: ST_TO_ADDR
// if p3 = 5 then
19438: LD_VAR 0 3
19442: PUSH
19443: LD_INT 5
19445: EQUAL
19446: IFFALSE 19456
// sLevel := true ;
19448: LD_ADDR_EXP 70
19452: PUSH
19453: LD_INT 1
19455: ST_TO_ADDR
// if p3 = 6 then
19456: LD_VAR 0 3
19460: PUSH
19461: LD_INT 6
19463: EQUAL
19464: IFFALSE 19474
// sArmoury := true ;
19466: LD_ADDR_EXP 71
19470: PUSH
19471: LD_INT 1
19473: ST_TO_ADDR
// if p3 = 7 then
19474: LD_VAR 0 3
19478: PUSH
19479: LD_INT 7
19481: EQUAL
19482: IFFALSE 19492
// sRadar := true ;
19484: LD_ADDR_EXP 72
19488: PUSH
19489: LD_INT 1
19491: ST_TO_ADDR
// if p3 = 8 then
19492: LD_VAR 0 3
19496: PUSH
19497: LD_INT 8
19499: EQUAL
19500: IFFALSE 19510
// sBunker := true ;
19502: LD_ADDR_EXP 73
19506: PUSH
19507: LD_INT 1
19509: ST_TO_ADDR
// if p3 = 9 then
19510: LD_VAR 0 3
19514: PUSH
19515: LD_INT 9
19517: EQUAL
19518: IFFALSE 19528
// sHack := true ;
19520: LD_ADDR_EXP 74
19524: PUSH
19525: LD_INT 1
19527: ST_TO_ADDR
// if p3 = 10 then
19528: LD_VAR 0 3
19532: PUSH
19533: LD_INT 10
19535: EQUAL
19536: IFFALSE 19546
// sFire := true ;
19538: LD_ADDR_EXP 75
19542: PUSH
19543: LD_INT 1
19545: ST_TO_ADDR
// if p3 = 11 then
19546: LD_VAR 0 3
19550: PUSH
19551: LD_INT 11
19553: EQUAL
19554: IFFALSE 19564
// sRefresh := true ;
19556: LD_ADDR_EXP 76
19560: PUSH
19561: LD_INT 1
19563: ST_TO_ADDR
// if p3 = 12 then
19564: LD_VAR 0 3
19568: PUSH
19569: LD_INT 12
19571: EQUAL
19572: IFFALSE 19582
// sExp := true ;
19574: LD_ADDR_EXP 77
19578: PUSH
19579: LD_INT 1
19581: ST_TO_ADDR
// if p3 = 13 then
19582: LD_VAR 0 3
19586: PUSH
19587: LD_INT 13
19589: EQUAL
19590: IFFALSE 19600
// sDepot := true ;
19592: LD_ADDR_EXP 78
19596: PUSH
19597: LD_INT 1
19599: ST_TO_ADDR
// if p3 = 14 then
19600: LD_VAR 0 3
19604: PUSH
19605: LD_INT 14
19607: EQUAL
19608: IFFALSE 19618
// sFlag := true ;
19610: LD_ADDR_EXP 79
19614: PUSH
19615: LD_INT 1
19617: ST_TO_ADDR
// if p3 = 15 then
19618: LD_VAR 0 3
19622: PUSH
19623: LD_INT 15
19625: EQUAL
19626: IFFALSE 19636
// sKamikadze := true ;
19628: LD_ADDR_EXP 87
19632: PUSH
19633: LD_INT 1
19635: ST_TO_ADDR
// if p3 = 16 then
19636: LD_VAR 0 3
19640: PUSH
19641: LD_INT 16
19643: EQUAL
19644: IFFALSE 19654
// sTroll := true ;
19646: LD_ADDR_EXP 88
19650: PUSH
19651: LD_INT 1
19653: ST_TO_ADDR
// if p3 = 17 then
19654: LD_VAR 0 3
19658: PUSH
19659: LD_INT 17
19661: EQUAL
19662: IFFALSE 19672
// sSlow := true ;
19664: LD_ADDR_EXP 89
19668: PUSH
19669: LD_INT 1
19671: ST_TO_ADDR
// if p3 = 18 then
19672: LD_VAR 0 3
19676: PUSH
19677: LD_INT 18
19679: EQUAL
19680: IFFALSE 19690
// sLack := true ;
19682: LD_ADDR_EXP 90
19686: PUSH
19687: LD_INT 1
19689: ST_TO_ADDR
// if p3 = 19 then
19690: LD_VAR 0 3
19694: PUSH
19695: LD_INT 19
19697: EQUAL
19698: IFFALSE 19708
// sTank := true ;
19700: LD_ADDR_EXP 92
19704: PUSH
19705: LD_INT 1
19707: ST_TO_ADDR
// if p3 = 20 then
19708: LD_VAR 0 3
19712: PUSH
19713: LD_INT 20
19715: EQUAL
19716: IFFALSE 19726
// sRemote := true ;
19718: LD_ADDR_EXP 93
19722: PUSH
19723: LD_INT 1
19725: ST_TO_ADDR
// if p3 = 21 then
19726: LD_VAR 0 3
19730: PUSH
19731: LD_INT 21
19733: EQUAL
19734: IFFALSE 19744
// sPowell := true ;
19736: LD_ADDR_EXP 94
19740: PUSH
19741: LD_INT 1
19743: ST_TO_ADDR
// if p3 = 22 then
19744: LD_VAR 0 3
19748: PUSH
19749: LD_INT 22
19751: EQUAL
19752: IFFALSE 19762
// sTeleport := true ;
19754: LD_ADDR_EXP 97
19758: PUSH
19759: LD_INT 1
19761: ST_TO_ADDR
// if p3 = 23 then
19762: LD_VAR 0 3
19766: PUSH
19767: LD_INT 23
19769: EQUAL
19770: IFFALSE 19780
// sOilTower := true ;
19772: LD_ADDR_EXP 99
19776: PUSH
19777: LD_INT 1
19779: ST_TO_ADDR
// if p3 = 24 then
19780: LD_VAR 0 3
19784: PUSH
19785: LD_INT 24
19787: EQUAL
19788: IFFALSE 19798
// sShovel := true ;
19790: LD_ADDR_EXP 100
19794: PUSH
19795: LD_INT 1
19797: ST_TO_ADDR
// if p3 = 25 then
19798: LD_VAR 0 3
19802: PUSH
19803: LD_INT 25
19805: EQUAL
19806: IFFALSE 19816
// sSheik := true ;
19808: LD_ADDR_EXP 101
19812: PUSH
19813: LD_INT 1
19815: ST_TO_ADDR
// if p3 = 26 then
19816: LD_VAR 0 3
19820: PUSH
19821: LD_INT 26
19823: EQUAL
19824: IFFALSE 19834
// sEarthquake := true ;
19826: LD_ADDR_EXP 103
19830: PUSH
19831: LD_INT 1
19833: ST_TO_ADDR
// if p3 = 27 then
19834: LD_VAR 0 3
19838: PUSH
19839: LD_INT 27
19841: EQUAL
19842: IFFALSE 19852
// sAI := true ;
19844: LD_ADDR_EXP 104
19848: PUSH
19849: LD_INT 1
19851: ST_TO_ADDR
// if p3 = 28 then
19852: LD_VAR 0 3
19856: PUSH
19857: LD_INT 28
19859: EQUAL
19860: IFFALSE 19870
// sCargo := true ;
19862: LD_ADDR_EXP 107
19866: PUSH
19867: LD_INT 1
19869: ST_TO_ADDR
// if p3 = 29 then
19870: LD_VAR 0 3
19874: PUSH
19875: LD_INT 29
19877: EQUAL
19878: IFFALSE 19888
// sDLaser := true ;
19880: LD_ADDR_EXP 108
19884: PUSH
19885: LD_INT 1
19887: ST_TO_ADDR
// if p3 = 30 then
19888: LD_VAR 0 3
19892: PUSH
19893: LD_INT 30
19895: EQUAL
19896: IFFALSE 19906
// sExchange := true ;
19898: LD_ADDR_EXP 109
19902: PUSH
19903: LD_INT 1
19905: ST_TO_ADDR
// if p3 = 31 then
19906: LD_VAR 0 3
19910: PUSH
19911: LD_INT 31
19913: EQUAL
19914: IFFALSE 19924
// sFac := true ;
19916: LD_ADDR_EXP 110
19920: PUSH
19921: LD_INT 1
19923: ST_TO_ADDR
// if p3 = 32 then
19924: LD_VAR 0 3
19928: PUSH
19929: LD_INT 32
19931: EQUAL
19932: IFFALSE 19942
// sPower := true ;
19934: LD_ADDR_EXP 111
19938: PUSH
19939: LD_INT 1
19941: ST_TO_ADDR
// if p3 = 33 then
19942: LD_VAR 0 3
19946: PUSH
19947: LD_INT 33
19949: EQUAL
19950: IFFALSE 19960
// sRandom := true ;
19952: LD_ADDR_EXP 112
19956: PUSH
19957: LD_INT 1
19959: ST_TO_ADDR
// if p3 = 34 then
19960: LD_VAR 0 3
19964: PUSH
19965: LD_INT 34
19967: EQUAL
19968: IFFALSE 19978
// sShield := true ;
19970: LD_ADDR_EXP 113
19974: PUSH
19975: LD_INT 1
19977: ST_TO_ADDR
// if p3 = 35 then
19978: LD_VAR 0 3
19982: PUSH
19983: LD_INT 35
19985: EQUAL
19986: IFFALSE 19996
// sTime := true ;
19988: LD_ADDR_EXP 114
19992: PUSH
19993: LD_INT 1
19995: ST_TO_ADDR
// if p3 = 36 then
19996: LD_VAR 0 3
20000: PUSH
20001: LD_INT 36
20003: EQUAL
20004: IFFALSE 20014
// sTools := true ;
20006: LD_ADDR_EXP 115
20010: PUSH
20011: LD_INT 1
20013: ST_TO_ADDR
// if p3 = 101 then
20014: LD_VAR 0 3
20018: PUSH
20019: LD_INT 101
20021: EQUAL
20022: IFFALSE 20032
// sSold := true ;
20024: LD_ADDR_EXP 80
20028: PUSH
20029: LD_INT 1
20031: ST_TO_ADDR
// if p3 = 102 then
20032: LD_VAR 0 3
20036: PUSH
20037: LD_INT 102
20039: EQUAL
20040: IFFALSE 20050
// sDiff := true ;
20042: LD_ADDR_EXP 81
20046: PUSH
20047: LD_INT 1
20049: ST_TO_ADDR
// if p3 = 103 then
20050: LD_VAR 0 3
20054: PUSH
20055: LD_INT 103
20057: EQUAL
20058: IFFALSE 20068
// sFog := true ;
20060: LD_ADDR_EXP 84
20064: PUSH
20065: LD_INT 1
20067: ST_TO_ADDR
// if p3 = 104 then
20068: LD_VAR 0 3
20072: PUSH
20073: LD_INT 104
20075: EQUAL
20076: IFFALSE 20086
// sReset := true ;
20078: LD_ADDR_EXP 85
20082: PUSH
20083: LD_INT 1
20085: ST_TO_ADDR
// if p3 = 105 then
20086: LD_VAR 0 3
20090: PUSH
20091: LD_INT 105
20093: EQUAL
20094: IFFALSE 20104
// sSun := true ;
20096: LD_ADDR_EXP 86
20100: PUSH
20101: LD_INT 1
20103: ST_TO_ADDR
// if p3 = 106 then
20104: LD_VAR 0 3
20108: PUSH
20109: LD_INT 106
20111: EQUAL
20112: IFFALSE 20122
// sTiger := true ;
20114: LD_ADDR_EXP 82
20118: PUSH
20119: LD_INT 1
20121: ST_TO_ADDR
// if p3 = 107 then
20122: LD_VAR 0 3
20126: PUSH
20127: LD_INT 107
20129: EQUAL
20130: IFFALSE 20140
// sBomb := true ;
20132: LD_ADDR_EXP 83
20136: PUSH
20137: LD_INT 1
20139: ST_TO_ADDR
// if p3 = 108 then
20140: LD_VAR 0 3
20144: PUSH
20145: LD_INT 108
20147: EQUAL
20148: IFFALSE 20158
// sWound := true ;
20150: LD_ADDR_EXP 91
20154: PUSH
20155: LD_INT 1
20157: ST_TO_ADDR
// if p3 = 109 then
20158: LD_VAR 0 3
20162: PUSH
20163: LD_INT 109
20165: EQUAL
20166: IFFALSE 20176
// sBetray := true ;
20168: LD_ADDR_EXP 95
20172: PUSH
20173: LD_INT 1
20175: ST_TO_ADDR
// if p3 = 110 then
20176: LD_VAR 0 3
20180: PUSH
20181: LD_INT 110
20183: EQUAL
20184: IFFALSE 20194
// sContamin := true ;
20186: LD_ADDR_EXP 96
20190: PUSH
20191: LD_INT 1
20193: ST_TO_ADDR
// if p3 = 111 then
20194: LD_VAR 0 3
20198: PUSH
20199: LD_INT 111
20201: EQUAL
20202: IFFALSE 20212
// sOil := true ;
20204: LD_ADDR_EXP 98
20208: PUSH
20209: LD_INT 1
20211: ST_TO_ADDR
// if p3 = 112 then
20212: LD_VAR 0 3
20216: PUSH
20217: LD_INT 112
20219: EQUAL
20220: IFFALSE 20230
// sStu := true ;
20222: LD_ADDR_EXP 102
20226: PUSH
20227: LD_INT 1
20229: ST_TO_ADDR
// if p3 = 113 then
20230: LD_VAR 0 3
20234: PUSH
20235: LD_INT 113
20237: EQUAL
20238: IFFALSE 20248
// sBazooka := true ;
20240: LD_ADDR_EXP 105
20244: PUSH
20245: LD_INT 1
20247: ST_TO_ADDR
// if p3 = 114 then
20248: LD_VAR 0 3
20252: PUSH
20253: LD_INT 114
20255: EQUAL
20256: IFFALSE 20266
// sMortar := true ;
20258: LD_ADDR_EXP 106
20262: PUSH
20263: LD_INT 1
20265: ST_TO_ADDR
// if p3 = 115 then
20266: LD_VAR 0 3
20270: PUSH
20271: LD_INT 115
20273: EQUAL
20274: IFFALSE 20284
// sRanger := true ;
20276: LD_ADDR_EXP 116
20280: PUSH
20281: LD_INT 1
20283: ST_TO_ADDR
// if p3 = 116 then
20284: LD_VAR 0 3
20288: PUSH
20289: LD_INT 116
20291: EQUAL
20292: IFFALSE 20302
// sComputer := true ;
20294: LD_ADDR_EXP 117
20298: PUSH
20299: LD_INT 1
20301: ST_TO_ADDR
// if p3 = 117 then
20302: LD_VAR 0 3
20306: PUSH
20307: LD_INT 117
20309: EQUAL
20310: IFFALSE 20320
// s30 := true ;
20312: LD_ADDR_EXP 118
20316: PUSH
20317: LD_INT 1
20319: ST_TO_ADDR
// if p3 = 118 then
20320: LD_VAR 0 3
20324: PUSH
20325: LD_INT 118
20327: EQUAL
20328: IFFALSE 20338
// s60 := true ;
20330: LD_ADDR_EXP 119
20334: PUSH
20335: LD_INT 1
20337: ST_TO_ADDR
// end ; if p2 = hack_mode then
20338: LD_VAR 0 2
20342: PUSH
20343: LD_INT 101
20345: EQUAL
20346: IFFALSE 20474
// begin case p3 of 1 :
20348: LD_VAR 0 3
20352: PUSH
20353: LD_INT 1
20355: DOUBLE
20356: EQUAL
20357: IFTRUE 20361
20359: GO 20368
20361: POP
// hHackUnlimitedResources ; 2 :
20362: CALL 32645 0 0
20366: GO 20474
20368: LD_INT 2
20370: DOUBLE
20371: EQUAL
20372: IFTRUE 20376
20374: GO 20383
20376: POP
// hHackSetLevel10 ; 3 :
20377: CALL 32778 0 0
20381: GO 20474
20383: LD_INT 3
20385: DOUBLE
20386: EQUAL
20387: IFTRUE 20391
20389: GO 20398
20391: POP
// hHackSetLevel10YourUnits ; 4 :
20392: CALL 32863 0 0
20396: GO 20474
20398: LD_INT 4
20400: DOUBLE
20401: EQUAL
20402: IFTRUE 20406
20404: GO 20413
20406: POP
// hHackInvincible ; 5 :
20407: CALL 33311 0 0
20411: GO 20474
20413: LD_INT 5
20415: DOUBLE
20416: EQUAL
20417: IFTRUE 20421
20419: GO 20428
20421: POP
// hHackInvisible ; 6 :
20422: CALL 33422 0 0
20426: GO 20474
20428: LD_INT 6
20430: DOUBLE
20431: EQUAL
20432: IFTRUE 20436
20434: GO 20443
20436: POP
// hHackChangeYourSide ; 7 :
20437: CALL 33479 0 0
20441: GO 20474
20443: LD_INT 7
20445: DOUBLE
20446: EQUAL
20447: IFTRUE 20451
20449: GO 20458
20451: POP
// hHackChangeUnitSide ; 8 :
20452: CALL 33521 0 0
20456: GO 20474
20458: LD_INT 8
20460: DOUBLE
20461: EQUAL
20462: IFTRUE 20466
20464: GO 20473
20466: POP
// hHackFog ; end ;
20467: CALL 33622 0 0
20471: GO 20474
20473: POP
// end ; if p2 = game_save_mode then
20474: LD_VAR 0 2
20478: PUSH
20479: LD_INT 102
20481: EQUAL
20482: IFFALSE 20547
// begin if p3 = 1 then
20484: LD_VAR 0 3
20488: PUSH
20489: LD_INT 1
20491: EQUAL
20492: IFFALSE 20504
// globalGameSaveCounter := p4 ;
20494: LD_ADDR_EXP 62
20498: PUSH
20499: LD_VAR 0 4
20503: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20504: LD_VAR 0 3
20508: PUSH
20509: LD_INT 2
20511: EQUAL
20512: PUSH
20513: LD_EXP 62
20517: AND
20518: IFFALSE 20537
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20520: LD_STRING setGameSaveCounter(
20522: PUSH
20523: LD_EXP 62
20527: STR
20528: PUSH
20529: LD_STRING )
20531: STR
20532: PPUSH
20533: CALL_OW 559
// display_strings := globalGameSaveCounter ;
20537: LD_ADDR_OWVAR 47
20541: PUSH
20542: LD_EXP 62
20546: ST_TO_ADDR
// end ; end ;
20547: LD_VAR 0 7
20551: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20552: GO 20554
20554: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20555: LD_STRING initStreamRollete();
20557: PPUSH
20558: CALL_OW 559
// InitStreamMode ;
20562: CALL 20574 0 0
// DefineStreamItems ( false ) ;
20566: LD_INT 0
20568: PPUSH
20569: CALL 21038 0 1
// end ;
20573: END
// function InitStreamMode ; begin
20574: LD_INT 0
20576: PPUSH
// streamModeActive := false ;
20577: LD_ADDR_EXP 63
20581: PUSH
20582: LD_INT 0
20584: ST_TO_ADDR
// normalCounter := 36 ;
20585: LD_ADDR_EXP 64
20589: PUSH
20590: LD_INT 36
20592: ST_TO_ADDR
// hardcoreCounter := 18 ;
20593: LD_ADDR_EXP 65
20597: PUSH
20598: LD_INT 18
20600: ST_TO_ADDR
// sRocket := false ;
20601: LD_ADDR_EXP 68
20605: PUSH
20606: LD_INT 0
20608: ST_TO_ADDR
// sSpeed := false ;
20609: LD_ADDR_EXP 67
20613: PUSH
20614: LD_INT 0
20616: ST_TO_ADDR
// sEngine := false ;
20617: LD_ADDR_EXP 69
20621: PUSH
20622: LD_INT 0
20624: ST_TO_ADDR
// sSpec := false ;
20625: LD_ADDR_EXP 66
20629: PUSH
20630: LD_INT 0
20632: ST_TO_ADDR
// sLevel := false ;
20633: LD_ADDR_EXP 70
20637: PUSH
20638: LD_INT 0
20640: ST_TO_ADDR
// sArmoury := false ;
20641: LD_ADDR_EXP 71
20645: PUSH
20646: LD_INT 0
20648: ST_TO_ADDR
// sRadar := false ;
20649: LD_ADDR_EXP 72
20653: PUSH
20654: LD_INT 0
20656: ST_TO_ADDR
// sBunker := false ;
20657: LD_ADDR_EXP 73
20661: PUSH
20662: LD_INT 0
20664: ST_TO_ADDR
// sHack := false ;
20665: LD_ADDR_EXP 74
20669: PUSH
20670: LD_INT 0
20672: ST_TO_ADDR
// sFire := false ;
20673: LD_ADDR_EXP 75
20677: PUSH
20678: LD_INT 0
20680: ST_TO_ADDR
// sRefresh := false ;
20681: LD_ADDR_EXP 76
20685: PUSH
20686: LD_INT 0
20688: ST_TO_ADDR
// sExp := false ;
20689: LD_ADDR_EXP 77
20693: PUSH
20694: LD_INT 0
20696: ST_TO_ADDR
// sDepot := false ;
20697: LD_ADDR_EXP 78
20701: PUSH
20702: LD_INT 0
20704: ST_TO_ADDR
// sFlag := false ;
20705: LD_ADDR_EXP 79
20709: PUSH
20710: LD_INT 0
20712: ST_TO_ADDR
// sKamikadze := false ;
20713: LD_ADDR_EXP 87
20717: PUSH
20718: LD_INT 0
20720: ST_TO_ADDR
// sTroll := false ;
20721: LD_ADDR_EXP 88
20725: PUSH
20726: LD_INT 0
20728: ST_TO_ADDR
// sSlow := false ;
20729: LD_ADDR_EXP 89
20733: PUSH
20734: LD_INT 0
20736: ST_TO_ADDR
// sLack := false ;
20737: LD_ADDR_EXP 90
20741: PUSH
20742: LD_INT 0
20744: ST_TO_ADDR
// sTank := false ;
20745: LD_ADDR_EXP 92
20749: PUSH
20750: LD_INT 0
20752: ST_TO_ADDR
// sRemote := false ;
20753: LD_ADDR_EXP 93
20757: PUSH
20758: LD_INT 0
20760: ST_TO_ADDR
// sPowell := false ;
20761: LD_ADDR_EXP 94
20765: PUSH
20766: LD_INT 0
20768: ST_TO_ADDR
// sTeleport := false ;
20769: LD_ADDR_EXP 97
20773: PUSH
20774: LD_INT 0
20776: ST_TO_ADDR
// sOilTower := false ;
20777: LD_ADDR_EXP 99
20781: PUSH
20782: LD_INT 0
20784: ST_TO_ADDR
// sShovel := false ;
20785: LD_ADDR_EXP 100
20789: PUSH
20790: LD_INT 0
20792: ST_TO_ADDR
// sSheik := false ;
20793: LD_ADDR_EXP 101
20797: PUSH
20798: LD_INT 0
20800: ST_TO_ADDR
// sEarthquake := false ;
20801: LD_ADDR_EXP 103
20805: PUSH
20806: LD_INT 0
20808: ST_TO_ADDR
// sAI := false ;
20809: LD_ADDR_EXP 104
20813: PUSH
20814: LD_INT 0
20816: ST_TO_ADDR
// sCargo := false ;
20817: LD_ADDR_EXP 107
20821: PUSH
20822: LD_INT 0
20824: ST_TO_ADDR
// sDLaser := false ;
20825: LD_ADDR_EXP 108
20829: PUSH
20830: LD_INT 0
20832: ST_TO_ADDR
// sExchange := false ;
20833: LD_ADDR_EXP 109
20837: PUSH
20838: LD_INT 0
20840: ST_TO_ADDR
// sFac := false ;
20841: LD_ADDR_EXP 110
20845: PUSH
20846: LD_INT 0
20848: ST_TO_ADDR
// sPower := false ;
20849: LD_ADDR_EXP 111
20853: PUSH
20854: LD_INT 0
20856: ST_TO_ADDR
// sRandom := false ;
20857: LD_ADDR_EXP 112
20861: PUSH
20862: LD_INT 0
20864: ST_TO_ADDR
// sShield := false ;
20865: LD_ADDR_EXP 113
20869: PUSH
20870: LD_INT 0
20872: ST_TO_ADDR
// sTime := false ;
20873: LD_ADDR_EXP 114
20877: PUSH
20878: LD_INT 0
20880: ST_TO_ADDR
// sTools := false ;
20881: LD_ADDR_EXP 115
20885: PUSH
20886: LD_INT 0
20888: ST_TO_ADDR
// sSold := false ;
20889: LD_ADDR_EXP 80
20893: PUSH
20894: LD_INT 0
20896: ST_TO_ADDR
// sDiff := false ;
20897: LD_ADDR_EXP 81
20901: PUSH
20902: LD_INT 0
20904: ST_TO_ADDR
// sFog := false ;
20905: LD_ADDR_EXP 84
20909: PUSH
20910: LD_INT 0
20912: ST_TO_ADDR
// sReset := false ;
20913: LD_ADDR_EXP 85
20917: PUSH
20918: LD_INT 0
20920: ST_TO_ADDR
// sSun := false ;
20921: LD_ADDR_EXP 86
20925: PUSH
20926: LD_INT 0
20928: ST_TO_ADDR
// sTiger := false ;
20929: LD_ADDR_EXP 82
20933: PUSH
20934: LD_INT 0
20936: ST_TO_ADDR
// sBomb := false ;
20937: LD_ADDR_EXP 83
20941: PUSH
20942: LD_INT 0
20944: ST_TO_ADDR
// sWound := false ;
20945: LD_ADDR_EXP 91
20949: PUSH
20950: LD_INT 0
20952: ST_TO_ADDR
// sBetray := false ;
20953: LD_ADDR_EXP 95
20957: PUSH
20958: LD_INT 0
20960: ST_TO_ADDR
// sContamin := false ;
20961: LD_ADDR_EXP 96
20965: PUSH
20966: LD_INT 0
20968: ST_TO_ADDR
// sOil := false ;
20969: LD_ADDR_EXP 98
20973: PUSH
20974: LD_INT 0
20976: ST_TO_ADDR
// sStu := false ;
20977: LD_ADDR_EXP 102
20981: PUSH
20982: LD_INT 0
20984: ST_TO_ADDR
// sBazooka := false ;
20985: LD_ADDR_EXP 105
20989: PUSH
20990: LD_INT 0
20992: ST_TO_ADDR
// sMortar := false ;
20993: LD_ADDR_EXP 106
20997: PUSH
20998: LD_INT 0
21000: ST_TO_ADDR
// sRanger := false ;
21001: LD_ADDR_EXP 116
21005: PUSH
21006: LD_INT 0
21008: ST_TO_ADDR
// sComputer := false ;
21009: LD_ADDR_EXP 117
21013: PUSH
21014: LD_INT 0
21016: ST_TO_ADDR
// s30 := false ;
21017: LD_ADDR_EXP 118
21021: PUSH
21022: LD_INT 0
21024: ST_TO_ADDR
// s60 := false ;
21025: LD_ADDR_EXP 119
21029: PUSH
21030: LD_INT 0
21032: ST_TO_ADDR
// end ;
21033: LD_VAR 0 1
21037: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21038: LD_INT 0
21040: PPUSH
21041: PPUSH
21042: PPUSH
21043: PPUSH
21044: PPUSH
21045: PPUSH
21046: PPUSH
// result := [ ] ;
21047: LD_ADDR_VAR 0 2
21051: PUSH
21052: EMPTY
21053: ST_TO_ADDR
// if campaign_id = 1 then
21054: LD_OWVAR 69
21058: PUSH
21059: LD_INT 1
21061: EQUAL
21062: IFFALSE 24228
// begin case mission_number of 1 :
21064: LD_OWVAR 70
21068: PUSH
21069: LD_INT 1
21071: DOUBLE
21072: EQUAL
21073: IFTRUE 21077
21075: GO 21153
21077: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21078: LD_ADDR_VAR 0 2
21082: PUSH
21083: LD_INT 2
21085: PUSH
21086: LD_INT 4
21088: PUSH
21089: LD_INT 11
21091: PUSH
21092: LD_INT 12
21094: PUSH
21095: LD_INT 15
21097: PUSH
21098: LD_INT 16
21100: PUSH
21101: LD_INT 22
21103: PUSH
21104: LD_INT 23
21106: PUSH
21107: LD_INT 26
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 101
21123: PUSH
21124: LD_INT 102
21126: PUSH
21127: LD_INT 106
21129: PUSH
21130: LD_INT 116
21132: PUSH
21133: LD_INT 117
21135: PUSH
21136: LD_INT 118
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: ST_TO_ADDR
21151: GO 24226
21153: LD_INT 2
21155: DOUBLE
21156: EQUAL
21157: IFTRUE 21161
21159: GO 21245
21161: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21162: LD_ADDR_VAR 0 2
21166: PUSH
21167: LD_INT 2
21169: PUSH
21170: LD_INT 4
21172: PUSH
21173: LD_INT 11
21175: PUSH
21176: LD_INT 12
21178: PUSH
21179: LD_INT 15
21181: PUSH
21182: LD_INT 16
21184: PUSH
21185: LD_INT 22
21187: PUSH
21188: LD_INT 23
21190: PUSH
21191: LD_INT 26
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 101
21207: PUSH
21208: LD_INT 102
21210: PUSH
21211: LD_INT 105
21213: PUSH
21214: LD_INT 106
21216: PUSH
21217: LD_INT 108
21219: PUSH
21220: LD_INT 116
21222: PUSH
21223: LD_INT 117
21225: PUSH
21226: LD_INT 118
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: ST_TO_ADDR
21243: GO 24226
21245: LD_INT 3
21247: DOUBLE
21248: EQUAL
21249: IFTRUE 21253
21251: GO 21341
21253: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21254: LD_ADDR_VAR 0 2
21258: PUSH
21259: LD_INT 2
21261: PUSH
21262: LD_INT 4
21264: PUSH
21265: LD_INT 5
21267: PUSH
21268: LD_INT 11
21270: PUSH
21271: LD_INT 12
21273: PUSH
21274: LD_INT 15
21276: PUSH
21277: LD_INT 16
21279: PUSH
21280: LD_INT 22
21282: PUSH
21283: LD_INT 26
21285: PUSH
21286: LD_INT 36
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 101
21303: PUSH
21304: LD_INT 102
21306: PUSH
21307: LD_INT 105
21309: PUSH
21310: LD_INT 106
21312: PUSH
21313: LD_INT 108
21315: PUSH
21316: LD_INT 116
21318: PUSH
21319: LD_INT 117
21321: PUSH
21322: LD_INT 118
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: ST_TO_ADDR
21339: GO 24226
21341: LD_INT 4
21343: DOUBLE
21344: EQUAL
21345: IFTRUE 21349
21347: GO 21445
21349: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21350: LD_ADDR_VAR 0 2
21354: PUSH
21355: LD_INT 2
21357: PUSH
21358: LD_INT 4
21360: PUSH
21361: LD_INT 5
21363: PUSH
21364: LD_INT 8
21366: PUSH
21367: LD_INT 11
21369: PUSH
21370: LD_INT 12
21372: PUSH
21373: LD_INT 15
21375: PUSH
21376: LD_INT 16
21378: PUSH
21379: LD_INT 22
21381: PUSH
21382: LD_INT 23
21384: PUSH
21385: LD_INT 26
21387: PUSH
21388: LD_INT 36
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 101
21407: PUSH
21408: LD_INT 102
21410: PUSH
21411: LD_INT 105
21413: PUSH
21414: LD_INT 106
21416: PUSH
21417: LD_INT 108
21419: PUSH
21420: LD_INT 116
21422: PUSH
21423: LD_INT 117
21425: PUSH
21426: LD_INT 118
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: ST_TO_ADDR
21443: GO 24226
21445: LD_INT 5
21447: DOUBLE
21448: EQUAL
21449: IFTRUE 21453
21451: GO 21565
21453: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21454: LD_ADDR_VAR 0 2
21458: PUSH
21459: LD_INT 2
21461: PUSH
21462: LD_INT 4
21464: PUSH
21465: LD_INT 5
21467: PUSH
21468: LD_INT 6
21470: PUSH
21471: LD_INT 8
21473: PUSH
21474: LD_INT 11
21476: PUSH
21477: LD_INT 12
21479: PUSH
21480: LD_INT 15
21482: PUSH
21483: LD_INT 16
21485: PUSH
21486: LD_INT 22
21488: PUSH
21489: LD_INT 23
21491: PUSH
21492: LD_INT 25
21494: PUSH
21495: LD_INT 26
21497: PUSH
21498: LD_INT 36
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 101
21519: PUSH
21520: LD_INT 102
21522: PUSH
21523: LD_INT 105
21525: PUSH
21526: LD_INT 106
21528: PUSH
21529: LD_INT 108
21531: PUSH
21532: LD_INT 109
21534: PUSH
21535: LD_INT 112
21537: PUSH
21538: LD_INT 116
21540: PUSH
21541: LD_INT 117
21543: PUSH
21544: LD_INT 118
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: ST_TO_ADDR
21563: GO 24226
21565: LD_INT 6
21567: DOUBLE
21568: EQUAL
21569: IFTRUE 21573
21571: GO 21705
21573: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21574: LD_ADDR_VAR 0 2
21578: PUSH
21579: LD_INT 2
21581: PUSH
21582: LD_INT 4
21584: PUSH
21585: LD_INT 5
21587: PUSH
21588: LD_INT 6
21590: PUSH
21591: LD_INT 8
21593: PUSH
21594: LD_INT 11
21596: PUSH
21597: LD_INT 12
21599: PUSH
21600: LD_INT 15
21602: PUSH
21603: LD_INT 16
21605: PUSH
21606: LD_INT 20
21608: PUSH
21609: LD_INT 21
21611: PUSH
21612: LD_INT 22
21614: PUSH
21615: LD_INT 23
21617: PUSH
21618: LD_INT 25
21620: PUSH
21621: LD_INT 26
21623: PUSH
21624: LD_INT 30
21626: PUSH
21627: LD_INT 31
21629: PUSH
21630: LD_INT 32
21632: PUSH
21633: LD_INT 36
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 101
21659: PUSH
21660: LD_INT 102
21662: PUSH
21663: LD_INT 105
21665: PUSH
21666: LD_INT 106
21668: PUSH
21669: LD_INT 108
21671: PUSH
21672: LD_INT 109
21674: PUSH
21675: LD_INT 112
21677: PUSH
21678: LD_INT 116
21680: PUSH
21681: LD_INT 117
21683: PUSH
21684: LD_INT 118
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: ST_TO_ADDR
21703: GO 24226
21705: LD_INT 7
21707: DOUBLE
21708: EQUAL
21709: IFTRUE 21713
21711: GO 21825
21713: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21714: LD_ADDR_VAR 0 2
21718: PUSH
21719: LD_INT 2
21721: PUSH
21722: LD_INT 4
21724: PUSH
21725: LD_INT 5
21727: PUSH
21728: LD_INT 7
21730: PUSH
21731: LD_INT 11
21733: PUSH
21734: LD_INT 12
21736: PUSH
21737: LD_INT 15
21739: PUSH
21740: LD_INT 16
21742: PUSH
21743: LD_INT 20
21745: PUSH
21746: LD_INT 21
21748: PUSH
21749: LD_INT 22
21751: PUSH
21752: LD_INT 23
21754: PUSH
21755: LD_INT 25
21757: PUSH
21758: LD_INT 26
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 101
21779: PUSH
21780: LD_INT 102
21782: PUSH
21783: LD_INT 103
21785: PUSH
21786: LD_INT 105
21788: PUSH
21789: LD_INT 106
21791: PUSH
21792: LD_INT 108
21794: PUSH
21795: LD_INT 112
21797: PUSH
21798: LD_INT 116
21800: PUSH
21801: LD_INT 117
21803: PUSH
21804: LD_INT 118
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: ST_TO_ADDR
21823: GO 24226
21825: LD_INT 8
21827: DOUBLE
21828: EQUAL
21829: IFTRUE 21833
21831: GO 21973
21833: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21834: LD_ADDR_VAR 0 2
21838: PUSH
21839: LD_INT 2
21841: PUSH
21842: LD_INT 4
21844: PUSH
21845: LD_INT 5
21847: PUSH
21848: LD_INT 6
21850: PUSH
21851: LD_INT 7
21853: PUSH
21854: LD_INT 8
21856: PUSH
21857: LD_INT 11
21859: PUSH
21860: LD_INT 12
21862: PUSH
21863: LD_INT 15
21865: PUSH
21866: LD_INT 16
21868: PUSH
21869: LD_INT 20
21871: PUSH
21872: LD_INT 21
21874: PUSH
21875: LD_INT 22
21877: PUSH
21878: LD_INT 23
21880: PUSH
21881: LD_INT 25
21883: PUSH
21884: LD_INT 26
21886: PUSH
21887: LD_INT 30
21889: PUSH
21890: LD_INT 31
21892: PUSH
21893: LD_INT 32
21895: PUSH
21896: LD_INT 36
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 101
21923: PUSH
21924: LD_INT 102
21926: PUSH
21927: LD_INT 103
21929: PUSH
21930: LD_INT 105
21932: PUSH
21933: LD_INT 106
21935: PUSH
21936: LD_INT 108
21938: PUSH
21939: LD_INT 109
21941: PUSH
21942: LD_INT 112
21944: PUSH
21945: LD_INT 116
21947: PUSH
21948: LD_INT 117
21950: PUSH
21951: LD_INT 118
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: ST_TO_ADDR
21971: GO 24226
21973: LD_INT 9
21975: DOUBLE
21976: EQUAL
21977: IFTRUE 21981
21979: GO 22129
21981: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21982: LD_ADDR_VAR 0 2
21986: PUSH
21987: LD_INT 2
21989: PUSH
21990: LD_INT 4
21992: PUSH
21993: LD_INT 5
21995: PUSH
21996: LD_INT 6
21998: PUSH
21999: LD_INT 7
22001: PUSH
22002: LD_INT 8
22004: PUSH
22005: LD_INT 11
22007: PUSH
22008: LD_INT 12
22010: PUSH
22011: LD_INT 15
22013: PUSH
22014: LD_INT 16
22016: PUSH
22017: LD_INT 20
22019: PUSH
22020: LD_INT 21
22022: PUSH
22023: LD_INT 22
22025: PUSH
22026: LD_INT 23
22028: PUSH
22029: LD_INT 25
22031: PUSH
22032: LD_INT 26
22034: PUSH
22035: LD_INT 28
22037: PUSH
22038: LD_INT 30
22040: PUSH
22041: LD_INT 31
22043: PUSH
22044: LD_INT 32
22046: PUSH
22047: LD_INT 36
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 101
22075: PUSH
22076: LD_INT 102
22078: PUSH
22079: LD_INT 103
22081: PUSH
22082: LD_INT 105
22084: PUSH
22085: LD_INT 106
22087: PUSH
22088: LD_INT 108
22090: PUSH
22091: LD_INT 109
22093: PUSH
22094: LD_INT 112
22096: PUSH
22097: LD_INT 114
22099: PUSH
22100: LD_INT 116
22102: PUSH
22103: LD_INT 117
22105: PUSH
22106: LD_INT 118
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: ST_TO_ADDR
22127: GO 24226
22129: LD_INT 10
22131: DOUBLE
22132: EQUAL
22133: IFTRUE 22137
22135: GO 22333
22137: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22138: LD_ADDR_VAR 0 2
22142: PUSH
22143: LD_INT 2
22145: PUSH
22146: LD_INT 4
22148: PUSH
22149: LD_INT 5
22151: PUSH
22152: LD_INT 6
22154: PUSH
22155: LD_INT 7
22157: PUSH
22158: LD_INT 8
22160: PUSH
22161: LD_INT 9
22163: PUSH
22164: LD_INT 10
22166: PUSH
22167: LD_INT 11
22169: PUSH
22170: LD_INT 12
22172: PUSH
22173: LD_INT 13
22175: PUSH
22176: LD_INT 14
22178: PUSH
22179: LD_INT 15
22181: PUSH
22182: LD_INT 16
22184: PUSH
22185: LD_INT 17
22187: PUSH
22188: LD_INT 18
22190: PUSH
22191: LD_INT 19
22193: PUSH
22194: LD_INT 20
22196: PUSH
22197: LD_INT 21
22199: PUSH
22200: LD_INT 22
22202: PUSH
22203: LD_INT 23
22205: PUSH
22206: LD_INT 24
22208: PUSH
22209: LD_INT 25
22211: PUSH
22212: LD_INT 26
22214: PUSH
22215: LD_INT 28
22217: PUSH
22218: LD_INT 30
22220: PUSH
22221: LD_INT 31
22223: PUSH
22224: LD_INT 32
22226: PUSH
22227: LD_INT 36
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 101
22263: PUSH
22264: LD_INT 102
22266: PUSH
22267: LD_INT 103
22269: PUSH
22270: LD_INT 104
22272: PUSH
22273: LD_INT 105
22275: PUSH
22276: LD_INT 106
22278: PUSH
22279: LD_INT 107
22281: PUSH
22282: LD_INT 108
22284: PUSH
22285: LD_INT 109
22287: PUSH
22288: LD_INT 110
22290: PUSH
22291: LD_INT 111
22293: PUSH
22294: LD_INT 112
22296: PUSH
22297: LD_INT 114
22299: PUSH
22300: LD_INT 116
22302: PUSH
22303: LD_INT 117
22305: PUSH
22306: LD_INT 118
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: ST_TO_ADDR
22331: GO 24226
22333: LD_INT 11
22335: DOUBLE
22336: EQUAL
22337: IFTRUE 22341
22339: GO 22545
22341: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22342: LD_ADDR_VAR 0 2
22346: PUSH
22347: LD_INT 2
22349: PUSH
22350: LD_INT 3
22352: PUSH
22353: LD_INT 4
22355: PUSH
22356: LD_INT 5
22358: PUSH
22359: LD_INT 6
22361: PUSH
22362: LD_INT 7
22364: PUSH
22365: LD_INT 8
22367: PUSH
22368: LD_INT 9
22370: PUSH
22371: LD_INT 10
22373: PUSH
22374: LD_INT 11
22376: PUSH
22377: LD_INT 12
22379: PUSH
22380: LD_INT 13
22382: PUSH
22383: LD_INT 14
22385: PUSH
22386: LD_INT 15
22388: PUSH
22389: LD_INT 16
22391: PUSH
22392: LD_INT 17
22394: PUSH
22395: LD_INT 18
22397: PUSH
22398: LD_INT 19
22400: PUSH
22401: LD_INT 20
22403: PUSH
22404: LD_INT 21
22406: PUSH
22407: LD_INT 22
22409: PUSH
22410: LD_INT 23
22412: PUSH
22413: LD_INT 24
22415: PUSH
22416: LD_INT 25
22418: PUSH
22419: LD_INT 26
22421: PUSH
22422: LD_INT 28
22424: PUSH
22425: LD_INT 30
22427: PUSH
22428: LD_INT 31
22430: PUSH
22431: LD_INT 32
22433: PUSH
22434: LD_INT 34
22436: PUSH
22437: LD_INT 36
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 101
22475: PUSH
22476: LD_INT 102
22478: PUSH
22479: LD_INT 103
22481: PUSH
22482: LD_INT 104
22484: PUSH
22485: LD_INT 105
22487: PUSH
22488: LD_INT 106
22490: PUSH
22491: LD_INT 107
22493: PUSH
22494: LD_INT 108
22496: PUSH
22497: LD_INT 109
22499: PUSH
22500: LD_INT 110
22502: PUSH
22503: LD_INT 111
22505: PUSH
22506: LD_INT 112
22508: PUSH
22509: LD_INT 114
22511: PUSH
22512: LD_INT 116
22514: PUSH
22515: LD_INT 117
22517: PUSH
22518: LD_INT 118
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: ST_TO_ADDR
22543: GO 24226
22545: LD_INT 12
22547: DOUBLE
22548: EQUAL
22549: IFTRUE 22553
22551: GO 22773
22553: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22554: LD_ADDR_VAR 0 2
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: LD_INT 2
22564: PUSH
22565: LD_INT 3
22567: PUSH
22568: LD_INT 4
22570: PUSH
22571: LD_INT 5
22573: PUSH
22574: LD_INT 6
22576: PUSH
22577: LD_INT 7
22579: PUSH
22580: LD_INT 8
22582: PUSH
22583: LD_INT 9
22585: PUSH
22586: LD_INT 10
22588: PUSH
22589: LD_INT 11
22591: PUSH
22592: LD_INT 12
22594: PUSH
22595: LD_INT 13
22597: PUSH
22598: LD_INT 14
22600: PUSH
22601: LD_INT 15
22603: PUSH
22604: LD_INT 16
22606: PUSH
22607: LD_INT 17
22609: PUSH
22610: LD_INT 18
22612: PUSH
22613: LD_INT 19
22615: PUSH
22616: LD_INT 20
22618: PUSH
22619: LD_INT 21
22621: PUSH
22622: LD_INT 22
22624: PUSH
22625: LD_INT 23
22627: PUSH
22628: LD_INT 24
22630: PUSH
22631: LD_INT 25
22633: PUSH
22634: LD_INT 26
22636: PUSH
22637: LD_INT 27
22639: PUSH
22640: LD_INT 28
22642: PUSH
22643: LD_INT 30
22645: PUSH
22646: LD_INT 31
22648: PUSH
22649: LD_INT 32
22651: PUSH
22652: LD_INT 33
22654: PUSH
22655: LD_INT 34
22657: PUSH
22658: LD_INT 36
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 101
22699: PUSH
22700: LD_INT 102
22702: PUSH
22703: LD_INT 103
22705: PUSH
22706: LD_INT 104
22708: PUSH
22709: LD_INT 105
22711: PUSH
22712: LD_INT 106
22714: PUSH
22715: LD_INT 107
22717: PUSH
22718: LD_INT 108
22720: PUSH
22721: LD_INT 109
22723: PUSH
22724: LD_INT 110
22726: PUSH
22727: LD_INT 111
22729: PUSH
22730: LD_INT 112
22732: PUSH
22733: LD_INT 113
22735: PUSH
22736: LD_INT 114
22738: PUSH
22739: LD_INT 116
22741: PUSH
22742: LD_INT 117
22744: PUSH
22745: LD_INT 118
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: ST_TO_ADDR
22771: GO 24226
22773: LD_INT 13
22775: DOUBLE
22776: EQUAL
22777: IFTRUE 22781
22779: GO 22989
22781: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22782: LD_ADDR_VAR 0 2
22786: PUSH
22787: LD_INT 1
22789: PUSH
22790: LD_INT 2
22792: PUSH
22793: LD_INT 3
22795: PUSH
22796: LD_INT 4
22798: PUSH
22799: LD_INT 5
22801: PUSH
22802: LD_INT 8
22804: PUSH
22805: LD_INT 9
22807: PUSH
22808: LD_INT 10
22810: PUSH
22811: LD_INT 11
22813: PUSH
22814: LD_INT 12
22816: PUSH
22817: LD_INT 14
22819: PUSH
22820: LD_INT 15
22822: PUSH
22823: LD_INT 16
22825: PUSH
22826: LD_INT 17
22828: PUSH
22829: LD_INT 18
22831: PUSH
22832: LD_INT 19
22834: PUSH
22835: LD_INT 20
22837: PUSH
22838: LD_INT 21
22840: PUSH
22841: LD_INT 22
22843: PUSH
22844: LD_INT 23
22846: PUSH
22847: LD_INT 24
22849: PUSH
22850: LD_INT 25
22852: PUSH
22853: LD_INT 26
22855: PUSH
22856: LD_INT 27
22858: PUSH
22859: LD_INT 28
22861: PUSH
22862: LD_INT 30
22864: PUSH
22865: LD_INT 31
22867: PUSH
22868: LD_INT 32
22870: PUSH
22871: LD_INT 33
22873: PUSH
22874: LD_INT 34
22876: PUSH
22877: LD_INT 36
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 101
22915: PUSH
22916: LD_INT 102
22918: PUSH
22919: LD_INT 103
22921: PUSH
22922: LD_INT 104
22924: PUSH
22925: LD_INT 105
22927: PUSH
22928: LD_INT 106
22930: PUSH
22931: LD_INT 107
22933: PUSH
22934: LD_INT 108
22936: PUSH
22937: LD_INT 109
22939: PUSH
22940: LD_INT 110
22942: PUSH
22943: LD_INT 111
22945: PUSH
22946: LD_INT 112
22948: PUSH
22949: LD_INT 113
22951: PUSH
22952: LD_INT 114
22954: PUSH
22955: LD_INT 116
22957: PUSH
22958: LD_INT 117
22960: PUSH
22961: LD_INT 118
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: ST_TO_ADDR
22987: GO 24226
22989: LD_INT 14
22991: DOUBLE
22992: EQUAL
22993: IFTRUE 22997
22995: GO 23221
22997: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22998: LD_ADDR_VAR 0 2
23002: PUSH
23003: LD_INT 1
23005: PUSH
23006: LD_INT 2
23008: PUSH
23009: LD_INT 3
23011: PUSH
23012: LD_INT 4
23014: PUSH
23015: LD_INT 5
23017: PUSH
23018: LD_INT 6
23020: PUSH
23021: LD_INT 7
23023: PUSH
23024: LD_INT 8
23026: PUSH
23027: LD_INT 9
23029: PUSH
23030: LD_INT 10
23032: PUSH
23033: LD_INT 11
23035: PUSH
23036: LD_INT 12
23038: PUSH
23039: LD_INT 13
23041: PUSH
23042: LD_INT 14
23044: PUSH
23045: LD_INT 15
23047: PUSH
23048: LD_INT 16
23050: PUSH
23051: LD_INT 17
23053: PUSH
23054: LD_INT 18
23056: PUSH
23057: LD_INT 19
23059: PUSH
23060: LD_INT 20
23062: PUSH
23063: LD_INT 21
23065: PUSH
23066: LD_INT 22
23068: PUSH
23069: LD_INT 23
23071: PUSH
23072: LD_INT 24
23074: PUSH
23075: LD_INT 25
23077: PUSH
23078: LD_INT 26
23080: PUSH
23081: LD_INT 27
23083: PUSH
23084: LD_INT 28
23086: PUSH
23087: LD_INT 29
23089: PUSH
23090: LD_INT 30
23092: PUSH
23093: LD_INT 31
23095: PUSH
23096: LD_INT 32
23098: PUSH
23099: LD_INT 33
23101: PUSH
23102: LD_INT 34
23104: PUSH
23105: LD_INT 36
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 101
23147: PUSH
23148: LD_INT 102
23150: PUSH
23151: LD_INT 103
23153: PUSH
23154: LD_INT 104
23156: PUSH
23157: LD_INT 105
23159: PUSH
23160: LD_INT 106
23162: PUSH
23163: LD_INT 107
23165: PUSH
23166: LD_INT 108
23168: PUSH
23169: LD_INT 109
23171: PUSH
23172: LD_INT 110
23174: PUSH
23175: LD_INT 111
23177: PUSH
23178: LD_INT 112
23180: PUSH
23181: LD_INT 113
23183: PUSH
23184: LD_INT 114
23186: PUSH
23187: LD_INT 116
23189: PUSH
23190: LD_INT 117
23192: PUSH
23193: LD_INT 118
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: ST_TO_ADDR
23219: GO 24226
23221: LD_INT 15
23223: DOUBLE
23224: EQUAL
23225: IFTRUE 23229
23227: GO 23453
23229: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23230: LD_ADDR_VAR 0 2
23234: PUSH
23235: LD_INT 1
23237: PUSH
23238: LD_INT 2
23240: PUSH
23241: LD_INT 3
23243: PUSH
23244: LD_INT 4
23246: PUSH
23247: LD_INT 5
23249: PUSH
23250: LD_INT 6
23252: PUSH
23253: LD_INT 7
23255: PUSH
23256: LD_INT 8
23258: PUSH
23259: LD_INT 9
23261: PUSH
23262: LD_INT 10
23264: PUSH
23265: LD_INT 11
23267: PUSH
23268: LD_INT 12
23270: PUSH
23271: LD_INT 13
23273: PUSH
23274: LD_INT 14
23276: PUSH
23277: LD_INT 15
23279: PUSH
23280: LD_INT 16
23282: PUSH
23283: LD_INT 17
23285: PUSH
23286: LD_INT 18
23288: PUSH
23289: LD_INT 19
23291: PUSH
23292: LD_INT 20
23294: PUSH
23295: LD_INT 21
23297: PUSH
23298: LD_INT 22
23300: PUSH
23301: LD_INT 23
23303: PUSH
23304: LD_INT 24
23306: PUSH
23307: LD_INT 25
23309: PUSH
23310: LD_INT 26
23312: PUSH
23313: LD_INT 27
23315: PUSH
23316: LD_INT 28
23318: PUSH
23319: LD_INT 29
23321: PUSH
23322: LD_INT 30
23324: PUSH
23325: LD_INT 31
23327: PUSH
23328: LD_INT 32
23330: PUSH
23331: LD_INT 33
23333: PUSH
23334: LD_INT 34
23336: PUSH
23337: LD_INT 36
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 101
23379: PUSH
23380: LD_INT 102
23382: PUSH
23383: LD_INT 103
23385: PUSH
23386: LD_INT 104
23388: PUSH
23389: LD_INT 105
23391: PUSH
23392: LD_INT 106
23394: PUSH
23395: LD_INT 107
23397: PUSH
23398: LD_INT 108
23400: PUSH
23401: LD_INT 109
23403: PUSH
23404: LD_INT 110
23406: PUSH
23407: LD_INT 111
23409: PUSH
23410: LD_INT 112
23412: PUSH
23413: LD_INT 113
23415: PUSH
23416: LD_INT 114
23418: PUSH
23419: LD_INT 116
23421: PUSH
23422: LD_INT 117
23424: PUSH
23425: LD_INT 118
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: ST_TO_ADDR
23451: GO 24226
23453: LD_INT 16
23455: DOUBLE
23456: EQUAL
23457: IFTRUE 23461
23459: GO 23597
23461: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23462: LD_ADDR_VAR 0 2
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: LD_INT 4
23472: PUSH
23473: LD_INT 5
23475: PUSH
23476: LD_INT 7
23478: PUSH
23479: LD_INT 11
23481: PUSH
23482: LD_INT 12
23484: PUSH
23485: LD_INT 15
23487: PUSH
23488: LD_INT 16
23490: PUSH
23491: LD_INT 20
23493: PUSH
23494: LD_INT 21
23496: PUSH
23497: LD_INT 22
23499: PUSH
23500: LD_INT 23
23502: PUSH
23503: LD_INT 25
23505: PUSH
23506: LD_INT 26
23508: PUSH
23509: LD_INT 30
23511: PUSH
23512: LD_INT 31
23514: PUSH
23515: LD_INT 32
23517: PUSH
23518: LD_INT 33
23520: PUSH
23521: LD_INT 34
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 101
23547: PUSH
23548: LD_INT 102
23550: PUSH
23551: LD_INT 103
23553: PUSH
23554: LD_INT 106
23556: PUSH
23557: LD_INT 108
23559: PUSH
23560: LD_INT 112
23562: PUSH
23563: LD_INT 113
23565: PUSH
23566: LD_INT 114
23568: PUSH
23569: LD_INT 116
23571: PUSH
23572: LD_INT 117
23574: PUSH
23575: LD_INT 118
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: ST_TO_ADDR
23595: GO 24226
23597: LD_INT 17
23599: DOUBLE
23600: EQUAL
23601: IFTRUE 23605
23603: GO 23829
23605: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23606: LD_ADDR_VAR 0 2
23610: PUSH
23611: LD_INT 1
23613: PUSH
23614: LD_INT 2
23616: PUSH
23617: LD_INT 3
23619: PUSH
23620: LD_INT 4
23622: PUSH
23623: LD_INT 5
23625: PUSH
23626: LD_INT 6
23628: PUSH
23629: LD_INT 7
23631: PUSH
23632: LD_INT 8
23634: PUSH
23635: LD_INT 9
23637: PUSH
23638: LD_INT 10
23640: PUSH
23641: LD_INT 11
23643: PUSH
23644: LD_INT 12
23646: PUSH
23647: LD_INT 13
23649: PUSH
23650: LD_INT 14
23652: PUSH
23653: LD_INT 15
23655: PUSH
23656: LD_INT 16
23658: PUSH
23659: LD_INT 17
23661: PUSH
23662: LD_INT 18
23664: PUSH
23665: LD_INT 19
23667: PUSH
23668: LD_INT 20
23670: PUSH
23671: LD_INT 21
23673: PUSH
23674: LD_INT 22
23676: PUSH
23677: LD_INT 23
23679: PUSH
23680: LD_INT 24
23682: PUSH
23683: LD_INT 25
23685: PUSH
23686: LD_INT 26
23688: PUSH
23689: LD_INT 27
23691: PUSH
23692: LD_INT 28
23694: PUSH
23695: LD_INT 29
23697: PUSH
23698: LD_INT 30
23700: PUSH
23701: LD_INT 31
23703: PUSH
23704: LD_INT 32
23706: PUSH
23707: LD_INT 33
23709: PUSH
23710: LD_INT 34
23712: PUSH
23713: LD_INT 36
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 101
23755: PUSH
23756: LD_INT 102
23758: PUSH
23759: LD_INT 103
23761: PUSH
23762: LD_INT 104
23764: PUSH
23765: LD_INT 105
23767: PUSH
23768: LD_INT 106
23770: PUSH
23771: LD_INT 107
23773: PUSH
23774: LD_INT 108
23776: PUSH
23777: LD_INT 109
23779: PUSH
23780: LD_INT 110
23782: PUSH
23783: LD_INT 111
23785: PUSH
23786: LD_INT 112
23788: PUSH
23789: LD_INT 113
23791: PUSH
23792: LD_INT 114
23794: PUSH
23795: LD_INT 116
23797: PUSH
23798: LD_INT 117
23800: PUSH
23801: LD_INT 118
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: ST_TO_ADDR
23827: GO 24226
23829: LD_INT 18
23831: DOUBLE
23832: EQUAL
23833: IFTRUE 23837
23835: GO 23985
23837: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23838: LD_ADDR_VAR 0 2
23842: PUSH
23843: LD_INT 2
23845: PUSH
23846: LD_INT 4
23848: PUSH
23849: LD_INT 5
23851: PUSH
23852: LD_INT 7
23854: PUSH
23855: LD_INT 11
23857: PUSH
23858: LD_INT 12
23860: PUSH
23861: LD_INT 15
23863: PUSH
23864: LD_INT 16
23866: PUSH
23867: LD_INT 20
23869: PUSH
23870: LD_INT 21
23872: PUSH
23873: LD_INT 22
23875: PUSH
23876: LD_INT 23
23878: PUSH
23879: LD_INT 25
23881: PUSH
23882: LD_INT 26
23884: PUSH
23885: LD_INT 30
23887: PUSH
23888: LD_INT 31
23890: PUSH
23891: LD_INT 32
23893: PUSH
23894: LD_INT 33
23896: PUSH
23897: LD_INT 34
23899: PUSH
23900: LD_INT 35
23902: PUSH
23903: LD_INT 36
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 101
23931: PUSH
23932: LD_INT 102
23934: PUSH
23935: LD_INT 103
23937: PUSH
23938: LD_INT 106
23940: PUSH
23941: LD_INT 108
23943: PUSH
23944: LD_INT 112
23946: PUSH
23947: LD_INT 113
23949: PUSH
23950: LD_INT 114
23952: PUSH
23953: LD_INT 115
23955: PUSH
23956: LD_INT 116
23958: PUSH
23959: LD_INT 117
23961: PUSH
23962: LD_INT 118
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: ST_TO_ADDR
23983: GO 24226
23985: LD_INT 19
23987: DOUBLE
23988: EQUAL
23989: IFTRUE 23993
23991: GO 24225
23993: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23994: LD_ADDR_VAR 0 2
23998: PUSH
23999: LD_INT 1
24001: PUSH
24002: LD_INT 2
24004: PUSH
24005: LD_INT 3
24007: PUSH
24008: LD_INT 4
24010: PUSH
24011: LD_INT 5
24013: PUSH
24014: LD_INT 6
24016: PUSH
24017: LD_INT 7
24019: PUSH
24020: LD_INT 8
24022: PUSH
24023: LD_INT 9
24025: PUSH
24026: LD_INT 10
24028: PUSH
24029: LD_INT 11
24031: PUSH
24032: LD_INT 12
24034: PUSH
24035: LD_INT 13
24037: PUSH
24038: LD_INT 14
24040: PUSH
24041: LD_INT 15
24043: PUSH
24044: LD_INT 16
24046: PUSH
24047: LD_INT 17
24049: PUSH
24050: LD_INT 18
24052: PUSH
24053: LD_INT 19
24055: PUSH
24056: LD_INT 20
24058: PUSH
24059: LD_INT 21
24061: PUSH
24062: LD_INT 22
24064: PUSH
24065: LD_INT 23
24067: PUSH
24068: LD_INT 24
24070: PUSH
24071: LD_INT 25
24073: PUSH
24074: LD_INT 26
24076: PUSH
24077: LD_INT 27
24079: PUSH
24080: LD_INT 28
24082: PUSH
24083: LD_INT 29
24085: PUSH
24086: LD_INT 30
24088: PUSH
24089: LD_INT 31
24091: PUSH
24092: LD_INT 32
24094: PUSH
24095: LD_INT 33
24097: PUSH
24098: LD_INT 34
24100: PUSH
24101: LD_INT 35
24103: PUSH
24104: LD_INT 36
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 101
24147: PUSH
24148: LD_INT 102
24150: PUSH
24151: LD_INT 103
24153: PUSH
24154: LD_INT 104
24156: PUSH
24157: LD_INT 105
24159: PUSH
24160: LD_INT 106
24162: PUSH
24163: LD_INT 107
24165: PUSH
24166: LD_INT 108
24168: PUSH
24169: LD_INT 109
24171: PUSH
24172: LD_INT 110
24174: PUSH
24175: LD_INT 111
24177: PUSH
24178: LD_INT 112
24180: PUSH
24181: LD_INT 113
24183: PUSH
24184: LD_INT 114
24186: PUSH
24187: LD_INT 115
24189: PUSH
24190: LD_INT 116
24192: PUSH
24193: LD_INT 117
24195: PUSH
24196: LD_INT 118
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: ST_TO_ADDR
24223: GO 24226
24225: POP
// end else
24226: GO 24457
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24228: LD_ADDR_VAR 0 2
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: LD_INT 2
24238: PUSH
24239: LD_INT 3
24241: PUSH
24242: LD_INT 4
24244: PUSH
24245: LD_INT 5
24247: PUSH
24248: LD_INT 6
24250: PUSH
24251: LD_INT 7
24253: PUSH
24254: LD_INT 8
24256: PUSH
24257: LD_INT 9
24259: PUSH
24260: LD_INT 10
24262: PUSH
24263: LD_INT 11
24265: PUSH
24266: LD_INT 12
24268: PUSH
24269: LD_INT 13
24271: PUSH
24272: LD_INT 14
24274: PUSH
24275: LD_INT 15
24277: PUSH
24278: LD_INT 16
24280: PUSH
24281: LD_INT 17
24283: PUSH
24284: LD_INT 18
24286: PUSH
24287: LD_INT 19
24289: PUSH
24290: LD_INT 20
24292: PUSH
24293: LD_INT 21
24295: PUSH
24296: LD_INT 22
24298: PUSH
24299: LD_INT 23
24301: PUSH
24302: LD_INT 24
24304: PUSH
24305: LD_INT 25
24307: PUSH
24308: LD_INT 26
24310: PUSH
24311: LD_INT 27
24313: PUSH
24314: LD_INT 28
24316: PUSH
24317: LD_INT 29
24319: PUSH
24320: LD_INT 30
24322: PUSH
24323: LD_INT 31
24325: PUSH
24326: LD_INT 32
24328: PUSH
24329: LD_INT 33
24331: PUSH
24332: LD_INT 34
24334: PUSH
24335: LD_INT 35
24337: PUSH
24338: LD_INT 36
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 101
24381: PUSH
24382: LD_INT 102
24384: PUSH
24385: LD_INT 103
24387: PUSH
24388: LD_INT 104
24390: PUSH
24391: LD_INT 105
24393: PUSH
24394: LD_INT 106
24396: PUSH
24397: LD_INT 107
24399: PUSH
24400: LD_INT 108
24402: PUSH
24403: LD_INT 109
24405: PUSH
24406: LD_INT 110
24408: PUSH
24409: LD_INT 111
24411: PUSH
24412: LD_INT 112
24414: PUSH
24415: LD_INT 113
24417: PUSH
24418: LD_INT 114
24420: PUSH
24421: LD_INT 115
24423: PUSH
24424: LD_INT 116
24426: PUSH
24427: LD_INT 117
24429: PUSH
24430: LD_INT 118
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: ST_TO_ADDR
// if result then
24457: LD_VAR 0 2
24461: IFFALSE 25247
// begin normal :=  ;
24463: LD_ADDR_VAR 0 5
24467: PUSH
24468: LD_STRING 
24470: ST_TO_ADDR
// hardcore :=  ;
24471: LD_ADDR_VAR 0 6
24475: PUSH
24476: LD_STRING 
24478: ST_TO_ADDR
// active :=  ;
24479: LD_ADDR_VAR 0 7
24483: PUSH
24484: LD_STRING 
24486: ST_TO_ADDR
// for i = 1 to normalCounter do
24487: LD_ADDR_VAR 0 8
24491: PUSH
24492: DOUBLE
24493: LD_INT 1
24495: DEC
24496: ST_TO_ADDR
24497: LD_EXP 64
24501: PUSH
24502: FOR_TO
24503: IFFALSE 24604
// begin tmp := 0 ;
24505: LD_ADDR_VAR 0 3
24509: PUSH
24510: LD_STRING 0
24512: ST_TO_ADDR
// if result [ 1 ] then
24513: LD_VAR 0 2
24517: PUSH
24518: LD_INT 1
24520: ARRAY
24521: IFFALSE 24586
// if result [ 1 ] [ 1 ] = i then
24523: LD_VAR 0 2
24527: PUSH
24528: LD_INT 1
24530: ARRAY
24531: PUSH
24532: LD_INT 1
24534: ARRAY
24535: PUSH
24536: LD_VAR 0 8
24540: EQUAL
24541: IFFALSE 24586
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24543: LD_ADDR_VAR 0 2
24547: PUSH
24548: LD_VAR 0 2
24552: PPUSH
24553: LD_INT 1
24555: PPUSH
24556: LD_VAR 0 2
24560: PUSH
24561: LD_INT 1
24563: ARRAY
24564: PPUSH
24565: LD_INT 1
24567: PPUSH
24568: CALL_OW 3
24572: PPUSH
24573: CALL_OW 1
24577: ST_TO_ADDR
// tmp := 1 ;
24578: LD_ADDR_VAR 0 3
24582: PUSH
24583: LD_STRING 1
24585: ST_TO_ADDR
// end ; normal := normal & tmp ;
24586: LD_ADDR_VAR 0 5
24590: PUSH
24591: LD_VAR 0 5
24595: PUSH
24596: LD_VAR 0 3
24600: STR
24601: ST_TO_ADDR
// end ;
24602: GO 24502
24604: POP
24605: POP
// for i = 1 to hardcoreCounter do
24606: LD_ADDR_VAR 0 8
24610: PUSH
24611: DOUBLE
24612: LD_INT 1
24614: DEC
24615: ST_TO_ADDR
24616: LD_EXP 65
24620: PUSH
24621: FOR_TO
24622: IFFALSE 24727
// begin tmp := 0 ;
24624: LD_ADDR_VAR 0 3
24628: PUSH
24629: LD_STRING 0
24631: ST_TO_ADDR
// if result [ 2 ] then
24632: LD_VAR 0 2
24636: PUSH
24637: LD_INT 2
24639: ARRAY
24640: IFFALSE 24709
// if result [ 2 ] [ 1 ] = 100 + i then
24642: LD_VAR 0 2
24646: PUSH
24647: LD_INT 2
24649: ARRAY
24650: PUSH
24651: LD_INT 1
24653: ARRAY
24654: PUSH
24655: LD_INT 100
24657: PUSH
24658: LD_VAR 0 8
24662: PLUS
24663: EQUAL
24664: IFFALSE 24709
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24666: LD_ADDR_VAR 0 2
24670: PUSH
24671: LD_VAR 0 2
24675: PPUSH
24676: LD_INT 2
24678: PPUSH
24679: LD_VAR 0 2
24683: PUSH
24684: LD_INT 2
24686: ARRAY
24687: PPUSH
24688: LD_INT 1
24690: PPUSH
24691: CALL_OW 3
24695: PPUSH
24696: CALL_OW 1
24700: ST_TO_ADDR
// tmp := 1 ;
24701: LD_ADDR_VAR 0 3
24705: PUSH
24706: LD_STRING 1
24708: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24709: LD_ADDR_VAR 0 6
24713: PUSH
24714: LD_VAR 0 6
24718: PUSH
24719: LD_VAR 0 3
24723: STR
24724: ST_TO_ADDR
// end ;
24725: GO 24621
24727: POP
24728: POP
// if isGameLoad then
24729: LD_VAR 0 1
24733: IFFALSE 25208
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24735: LD_ADDR_VAR 0 4
24739: PUSH
24740: LD_EXP 68
24744: PUSH
24745: LD_EXP 67
24749: PUSH
24750: LD_EXP 69
24754: PUSH
24755: LD_EXP 66
24759: PUSH
24760: LD_EXP 70
24764: PUSH
24765: LD_EXP 71
24769: PUSH
24770: LD_EXP 72
24774: PUSH
24775: LD_EXP 73
24779: PUSH
24780: LD_EXP 74
24784: PUSH
24785: LD_EXP 75
24789: PUSH
24790: LD_EXP 76
24794: PUSH
24795: LD_EXP 77
24799: PUSH
24800: LD_EXP 78
24804: PUSH
24805: LD_EXP 79
24809: PUSH
24810: LD_EXP 87
24814: PUSH
24815: LD_EXP 88
24819: PUSH
24820: LD_EXP 89
24824: PUSH
24825: LD_EXP 90
24829: PUSH
24830: LD_EXP 92
24834: PUSH
24835: LD_EXP 93
24839: PUSH
24840: LD_EXP 94
24844: PUSH
24845: LD_EXP 97
24849: PUSH
24850: LD_EXP 99
24854: PUSH
24855: LD_EXP 100
24859: PUSH
24860: LD_EXP 101
24864: PUSH
24865: LD_EXP 103
24869: PUSH
24870: LD_EXP 104
24874: PUSH
24875: LD_EXP 107
24879: PUSH
24880: LD_EXP 108
24884: PUSH
24885: LD_EXP 109
24889: PUSH
24890: LD_EXP 110
24894: PUSH
24895: LD_EXP 111
24899: PUSH
24900: LD_EXP 112
24904: PUSH
24905: LD_EXP 113
24909: PUSH
24910: LD_EXP 114
24914: PUSH
24915: LD_EXP 115
24919: PUSH
24920: LD_EXP 80
24924: PUSH
24925: LD_EXP 81
24929: PUSH
24930: LD_EXP 84
24934: PUSH
24935: LD_EXP 85
24939: PUSH
24940: LD_EXP 86
24944: PUSH
24945: LD_EXP 82
24949: PUSH
24950: LD_EXP 83
24954: PUSH
24955: LD_EXP 91
24959: PUSH
24960: LD_EXP 95
24964: PUSH
24965: LD_EXP 96
24969: PUSH
24970: LD_EXP 98
24974: PUSH
24975: LD_EXP 102
24979: PUSH
24980: LD_EXP 105
24984: PUSH
24985: LD_EXP 106
24989: PUSH
24990: LD_EXP 116
24994: PUSH
24995: LD_EXP 117
24999: PUSH
25000: LD_EXP 118
25004: PUSH
25005: LD_EXP 119
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: ST_TO_ADDR
// tmp :=  ;
25066: LD_ADDR_VAR 0 3
25070: PUSH
25071: LD_STRING 
25073: ST_TO_ADDR
// for i = 1 to normalCounter do
25074: LD_ADDR_VAR 0 8
25078: PUSH
25079: DOUBLE
25080: LD_INT 1
25082: DEC
25083: ST_TO_ADDR
25084: LD_EXP 64
25088: PUSH
25089: FOR_TO
25090: IFFALSE 25126
// begin if flags [ i ] then
25092: LD_VAR 0 4
25096: PUSH
25097: LD_VAR 0 8
25101: ARRAY
25102: IFFALSE 25124
// tmp := tmp & i & ; ;
25104: LD_ADDR_VAR 0 3
25108: PUSH
25109: LD_VAR 0 3
25113: PUSH
25114: LD_VAR 0 8
25118: STR
25119: PUSH
25120: LD_STRING ;
25122: STR
25123: ST_TO_ADDR
// end ;
25124: GO 25089
25126: POP
25127: POP
// for i = 1 to hardcoreCounter do
25128: LD_ADDR_VAR 0 8
25132: PUSH
25133: DOUBLE
25134: LD_INT 1
25136: DEC
25137: ST_TO_ADDR
25138: LD_EXP 65
25142: PUSH
25143: FOR_TO
25144: IFFALSE 25190
// begin if flags [ normalCounter + i ] then
25146: LD_VAR 0 4
25150: PUSH
25151: LD_EXP 64
25155: PUSH
25156: LD_VAR 0 8
25160: PLUS
25161: ARRAY
25162: IFFALSE 25188
// tmp := tmp & ( 100 + i ) & ; ;
25164: LD_ADDR_VAR 0 3
25168: PUSH
25169: LD_VAR 0 3
25173: PUSH
25174: LD_INT 100
25176: PUSH
25177: LD_VAR 0 8
25181: PLUS
25182: STR
25183: PUSH
25184: LD_STRING ;
25186: STR
25187: ST_TO_ADDR
// end ;
25188: GO 25143
25190: POP
25191: POP
// if tmp then
25192: LD_VAR 0 3
25196: IFFALSE 25208
// active := tmp ;
25198: LD_ADDR_VAR 0 7
25202: PUSH
25203: LD_VAR 0 3
25207: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25208: LD_STRING getStreamItemsFromMission("
25210: PUSH
25211: LD_VAR 0 5
25215: STR
25216: PUSH
25217: LD_STRING ","
25219: STR
25220: PUSH
25221: LD_VAR 0 6
25225: STR
25226: PUSH
25227: LD_STRING ","
25229: STR
25230: PUSH
25231: LD_VAR 0 7
25235: STR
25236: PUSH
25237: LD_STRING ")
25239: STR
25240: PPUSH
25241: CALL_OW 559
// end else
25245: GO 25254
// ToLua ( getStreamItemsFromMission("","","") ) ;
25247: LD_STRING getStreamItemsFromMission("","","")
25249: PPUSH
25250: CALL_OW 559
// end ;
25254: LD_VAR 0 2
25258: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25259: LD_EXP 63
25263: PUSH
25264: LD_EXP 68
25268: AND
25269: IFFALSE 25393
25271: GO 25273
25273: DISABLE
25274: LD_INT 0
25276: PPUSH
25277: PPUSH
// begin enable ;
25278: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25279: LD_ADDR_VAR 0 2
25283: PUSH
25284: LD_INT 22
25286: PUSH
25287: LD_OWVAR 2
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 2
25298: PUSH
25299: LD_INT 34
25301: PUSH
25302: LD_INT 7
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 34
25311: PUSH
25312: LD_INT 45
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 34
25321: PUSH
25322: LD_INT 28
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 34
25331: PUSH
25332: LD_INT 47
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PPUSH
25350: CALL_OW 69
25354: ST_TO_ADDR
// if not tmp then
25355: LD_VAR 0 2
25359: NOT
25360: IFFALSE 25364
// exit ;
25362: GO 25393
// for i in tmp do
25364: LD_ADDR_VAR 0 1
25368: PUSH
25369: LD_VAR 0 2
25373: PUSH
25374: FOR_IN
25375: IFFALSE 25391
// begin SetLives ( i , 0 ) ;
25377: LD_VAR 0 1
25381: PPUSH
25382: LD_INT 0
25384: PPUSH
25385: CALL_OW 234
// end ;
25389: GO 25374
25391: POP
25392: POP
// end ;
25393: PPOPN 2
25395: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25396: LD_EXP 63
25400: PUSH
25401: LD_EXP 69
25405: AND
25406: IFFALSE 25490
25408: GO 25410
25410: DISABLE
25411: LD_INT 0
25413: PPUSH
25414: PPUSH
// begin enable ;
25415: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25416: LD_ADDR_VAR 0 2
25420: PUSH
25421: LD_INT 22
25423: PUSH
25424: LD_OWVAR 2
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 32
25435: PUSH
25436: LD_INT 3
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PPUSH
25447: CALL_OW 69
25451: ST_TO_ADDR
// if not tmp then
25452: LD_VAR 0 2
25456: NOT
25457: IFFALSE 25461
// exit ;
25459: GO 25490
// for i in tmp do
25461: LD_ADDR_VAR 0 1
25465: PUSH
25466: LD_VAR 0 2
25470: PUSH
25471: FOR_IN
25472: IFFALSE 25488
// begin SetLives ( i , 0 ) ;
25474: LD_VAR 0 1
25478: PPUSH
25479: LD_INT 0
25481: PPUSH
25482: CALL_OW 234
// end ;
25486: GO 25471
25488: POP
25489: POP
// end ;
25490: PPOPN 2
25492: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25493: LD_EXP 63
25497: PUSH
25498: LD_EXP 66
25502: AND
25503: IFFALSE 25596
25505: GO 25507
25507: DISABLE
25508: LD_INT 0
25510: PPUSH
// begin enable ;
25511: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25512: LD_ADDR_VAR 0 1
25516: PUSH
25517: LD_INT 22
25519: PUSH
25520: LD_OWVAR 2
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 2
25531: PUSH
25532: LD_INT 25
25534: PUSH
25535: LD_INT 5
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 25
25544: PUSH
25545: LD_INT 9
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 25
25554: PUSH
25555: LD_INT 8
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PPUSH
25572: CALL_OW 69
25576: PUSH
25577: FOR_IN
25578: IFFALSE 25594
// begin SetClass ( i , 1 ) ;
25580: LD_VAR 0 1
25584: PPUSH
25585: LD_INT 1
25587: PPUSH
25588: CALL_OW 336
// end ;
25592: GO 25577
25594: POP
25595: POP
// end ;
25596: PPOPN 1
25598: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25599: LD_EXP 63
25603: PUSH
25604: LD_EXP 67
25608: AND
25609: PUSH
25610: LD_OWVAR 65
25614: PUSH
25615: LD_INT 7
25617: LESS
25618: AND
25619: IFFALSE 25633
25621: GO 25623
25623: DISABLE
// begin enable ;
25624: ENABLE
// game_speed := 7 ;
25625: LD_ADDR_OWVAR 65
25629: PUSH
25630: LD_INT 7
25632: ST_TO_ADDR
// end ;
25633: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25634: LD_EXP 63
25638: PUSH
25639: LD_EXP 70
25643: AND
25644: IFFALSE 25846
25646: GO 25648
25648: DISABLE
25649: LD_INT 0
25651: PPUSH
25652: PPUSH
25653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25654: LD_ADDR_VAR 0 3
25658: PUSH
25659: LD_INT 81
25661: PUSH
25662: LD_OWVAR 2
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 21
25673: PUSH
25674: LD_INT 1
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PPUSH
25685: CALL_OW 69
25689: ST_TO_ADDR
// if not tmp then
25690: LD_VAR 0 3
25694: NOT
25695: IFFALSE 25699
// exit ;
25697: GO 25846
// if tmp > 5 then
25699: LD_VAR 0 3
25703: PUSH
25704: LD_INT 5
25706: GREATER
25707: IFFALSE 25719
// k := 5 else
25709: LD_ADDR_VAR 0 2
25713: PUSH
25714: LD_INT 5
25716: ST_TO_ADDR
25717: GO 25729
// k := tmp ;
25719: LD_ADDR_VAR 0 2
25723: PUSH
25724: LD_VAR 0 3
25728: ST_TO_ADDR
// for i := 1 to k do
25729: LD_ADDR_VAR 0 1
25733: PUSH
25734: DOUBLE
25735: LD_INT 1
25737: DEC
25738: ST_TO_ADDR
25739: LD_VAR 0 2
25743: PUSH
25744: FOR_TO
25745: IFFALSE 25844
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25747: LD_VAR 0 3
25751: PUSH
25752: LD_VAR 0 1
25756: ARRAY
25757: PPUSH
25758: LD_VAR 0 1
25762: PUSH
25763: LD_INT 4
25765: MOD
25766: PUSH
25767: LD_INT 1
25769: PLUS
25770: PPUSH
25771: CALL_OW 259
25775: PUSH
25776: LD_INT 10
25778: LESS
25779: IFFALSE 25842
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25781: LD_VAR 0 3
25785: PUSH
25786: LD_VAR 0 1
25790: ARRAY
25791: PPUSH
25792: LD_VAR 0 1
25796: PUSH
25797: LD_INT 4
25799: MOD
25800: PUSH
25801: LD_INT 1
25803: PLUS
25804: PPUSH
25805: LD_VAR 0 3
25809: PUSH
25810: LD_VAR 0 1
25814: ARRAY
25815: PPUSH
25816: LD_VAR 0 1
25820: PUSH
25821: LD_INT 4
25823: MOD
25824: PUSH
25825: LD_INT 1
25827: PLUS
25828: PPUSH
25829: CALL_OW 259
25833: PUSH
25834: LD_INT 1
25836: PLUS
25837: PPUSH
25838: CALL_OW 237
25842: GO 25744
25844: POP
25845: POP
// end ;
25846: PPOPN 3
25848: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25849: LD_EXP 63
25853: PUSH
25854: LD_EXP 71
25858: AND
25859: IFFALSE 25879
25861: GO 25863
25863: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25864: LD_INT 4
25866: PPUSH
25867: LD_OWVAR 2
25871: PPUSH
25872: LD_INT 0
25874: PPUSH
25875: CALL_OW 324
25879: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25880: LD_EXP 63
25884: PUSH
25885: LD_EXP 100
25889: AND
25890: IFFALSE 25910
25892: GO 25894
25894: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25895: LD_INT 19
25897: PPUSH
25898: LD_OWVAR 2
25902: PPUSH
25903: LD_INT 0
25905: PPUSH
25906: CALL_OW 324
25910: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25911: LD_EXP 63
25915: PUSH
25916: LD_EXP 72
25920: AND
25921: IFFALSE 26023
25923: GO 25925
25925: DISABLE
25926: LD_INT 0
25928: PPUSH
25929: PPUSH
// begin enable ;
25930: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25931: LD_ADDR_VAR 0 2
25935: PUSH
25936: LD_INT 22
25938: PUSH
25939: LD_OWVAR 2
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 2
25950: PUSH
25951: LD_INT 34
25953: PUSH
25954: LD_INT 11
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 34
25963: PUSH
25964: LD_INT 30
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: LIST
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PPUSH
25980: CALL_OW 69
25984: ST_TO_ADDR
// if not tmp then
25985: LD_VAR 0 2
25989: NOT
25990: IFFALSE 25994
// exit ;
25992: GO 26023
// for i in tmp do
25994: LD_ADDR_VAR 0 1
25998: PUSH
25999: LD_VAR 0 2
26003: PUSH
26004: FOR_IN
26005: IFFALSE 26021
// begin SetLives ( i , 0 ) ;
26007: LD_VAR 0 1
26011: PPUSH
26012: LD_INT 0
26014: PPUSH
26015: CALL_OW 234
// end ;
26019: GO 26004
26021: POP
26022: POP
// end ;
26023: PPOPN 2
26025: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26026: LD_EXP 63
26030: PUSH
26031: LD_EXP 73
26035: AND
26036: IFFALSE 26056
26038: GO 26040
26040: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26041: LD_INT 32
26043: PPUSH
26044: LD_OWVAR 2
26048: PPUSH
26049: LD_INT 0
26051: PPUSH
26052: CALL_OW 324
26056: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26057: LD_EXP 63
26061: PUSH
26062: LD_EXP 74
26066: AND
26067: IFFALSE 26248
26069: GO 26071
26071: DISABLE
26072: LD_INT 0
26074: PPUSH
26075: PPUSH
26076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26077: LD_ADDR_VAR 0 2
26081: PUSH
26082: LD_INT 22
26084: PUSH
26085: LD_OWVAR 2
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 33
26096: PUSH
26097: LD_INT 3
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PPUSH
26108: CALL_OW 69
26112: ST_TO_ADDR
// if not tmp then
26113: LD_VAR 0 2
26117: NOT
26118: IFFALSE 26122
// exit ;
26120: GO 26248
// side := 0 ;
26122: LD_ADDR_VAR 0 3
26126: PUSH
26127: LD_INT 0
26129: ST_TO_ADDR
// for i := 1 to 8 do
26130: LD_ADDR_VAR 0 1
26134: PUSH
26135: DOUBLE
26136: LD_INT 1
26138: DEC
26139: ST_TO_ADDR
26140: LD_INT 8
26142: PUSH
26143: FOR_TO
26144: IFFALSE 26192
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26146: LD_OWVAR 2
26150: PUSH
26151: LD_VAR 0 1
26155: NONEQUAL
26156: PUSH
26157: LD_OWVAR 2
26161: PPUSH
26162: LD_VAR 0 1
26166: PPUSH
26167: CALL_OW 81
26171: PUSH
26172: LD_INT 2
26174: EQUAL
26175: AND
26176: IFFALSE 26190
// begin side := i ;
26178: LD_ADDR_VAR 0 3
26182: PUSH
26183: LD_VAR 0 1
26187: ST_TO_ADDR
// break ;
26188: GO 26192
// end ;
26190: GO 26143
26192: POP
26193: POP
// if not side then
26194: LD_VAR 0 3
26198: NOT
26199: IFFALSE 26203
// exit ;
26201: GO 26248
// for i := 1 to tmp do
26203: LD_ADDR_VAR 0 1
26207: PUSH
26208: DOUBLE
26209: LD_INT 1
26211: DEC
26212: ST_TO_ADDR
26213: LD_VAR 0 2
26217: PUSH
26218: FOR_TO
26219: IFFALSE 26246
// if Prob ( 60 ) then
26221: LD_INT 60
26223: PPUSH
26224: CALL_OW 13
26228: IFFALSE 26244
// SetSide ( i , side ) ;
26230: LD_VAR 0 1
26234: PPUSH
26235: LD_VAR 0 3
26239: PPUSH
26240: CALL_OW 235
26244: GO 26218
26246: POP
26247: POP
// end ;
26248: PPOPN 3
26250: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26251: LD_EXP 63
26255: PUSH
26256: LD_EXP 76
26260: AND
26261: IFFALSE 26380
26263: GO 26265
26265: DISABLE
26266: LD_INT 0
26268: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26269: LD_ADDR_VAR 0 1
26273: PUSH
26274: LD_INT 22
26276: PUSH
26277: LD_OWVAR 2
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 21
26288: PUSH
26289: LD_INT 1
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 3
26298: PUSH
26299: LD_INT 23
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: LIST
26317: PPUSH
26318: CALL_OW 69
26322: PUSH
26323: FOR_IN
26324: IFFALSE 26378
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26326: LD_VAR 0 1
26330: PPUSH
26331: CALL_OW 257
26335: PUSH
26336: LD_INT 1
26338: PUSH
26339: LD_INT 2
26341: PUSH
26342: LD_INT 3
26344: PUSH
26345: LD_INT 4
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: IN
26354: IFFALSE 26376
// SetClass ( un , rand ( 1 , 4 ) ) ;
26356: LD_VAR 0 1
26360: PPUSH
26361: LD_INT 1
26363: PPUSH
26364: LD_INT 4
26366: PPUSH
26367: CALL_OW 12
26371: PPUSH
26372: CALL_OW 336
26376: GO 26323
26378: POP
26379: POP
// end ;
26380: PPOPN 1
26382: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26383: LD_EXP 63
26387: PUSH
26388: LD_EXP 75
26392: AND
26393: IFFALSE 26472
26395: GO 26397
26397: DISABLE
26398: LD_INT 0
26400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26401: LD_ADDR_VAR 0 1
26405: PUSH
26406: LD_INT 22
26408: PUSH
26409: LD_OWVAR 2
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 21
26420: PUSH
26421: LD_INT 3
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PPUSH
26432: CALL_OW 69
26436: ST_TO_ADDR
// if not tmp then
26437: LD_VAR 0 1
26441: NOT
26442: IFFALSE 26446
// exit ;
26444: GO 26472
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26446: LD_VAR 0 1
26450: PUSH
26451: LD_INT 1
26453: PPUSH
26454: LD_VAR 0 1
26458: PPUSH
26459: CALL_OW 12
26463: ARRAY
26464: PPUSH
26465: LD_INT 100
26467: PPUSH
26468: CALL_OW 234
// end ;
26472: PPOPN 1
26474: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26475: LD_EXP 63
26479: PUSH
26480: LD_EXP 77
26484: AND
26485: IFFALSE 26583
26487: GO 26489
26489: DISABLE
26490: LD_INT 0
26492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26493: LD_ADDR_VAR 0 1
26497: PUSH
26498: LD_INT 22
26500: PUSH
26501: LD_OWVAR 2
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 21
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PPUSH
26524: CALL_OW 69
26528: ST_TO_ADDR
// if not tmp then
26529: LD_VAR 0 1
26533: NOT
26534: IFFALSE 26538
// exit ;
26536: GO 26583
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26538: LD_VAR 0 1
26542: PUSH
26543: LD_INT 1
26545: PPUSH
26546: LD_VAR 0 1
26550: PPUSH
26551: CALL_OW 12
26555: ARRAY
26556: PPUSH
26557: LD_INT 1
26559: PPUSH
26560: LD_INT 4
26562: PPUSH
26563: CALL_OW 12
26567: PPUSH
26568: LD_INT 3000
26570: PPUSH
26571: LD_INT 9000
26573: PPUSH
26574: CALL_OW 12
26578: PPUSH
26579: CALL_OW 492
// end ;
26583: PPOPN 1
26585: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26586: LD_EXP 63
26590: PUSH
26591: LD_EXP 78
26595: AND
26596: IFFALSE 26616
26598: GO 26600
26600: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26601: LD_INT 1
26603: PPUSH
26604: LD_OWVAR 2
26608: PPUSH
26609: LD_INT 0
26611: PPUSH
26612: CALL_OW 324
26616: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26617: LD_EXP 63
26621: PUSH
26622: LD_EXP 79
26626: AND
26627: IFFALSE 26710
26629: GO 26631
26631: DISABLE
26632: LD_INT 0
26634: PPUSH
26635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26636: LD_ADDR_VAR 0 2
26640: PUSH
26641: LD_INT 22
26643: PUSH
26644: LD_OWVAR 2
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 21
26655: PUSH
26656: LD_INT 3
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PPUSH
26667: CALL_OW 69
26671: ST_TO_ADDR
// if not tmp then
26672: LD_VAR 0 2
26676: NOT
26677: IFFALSE 26681
// exit ;
26679: GO 26710
// for i in tmp do
26681: LD_ADDR_VAR 0 1
26685: PUSH
26686: LD_VAR 0 2
26690: PUSH
26691: FOR_IN
26692: IFFALSE 26708
// SetBLevel ( i , 10 ) ;
26694: LD_VAR 0 1
26698: PPUSH
26699: LD_INT 10
26701: PPUSH
26702: CALL_OW 241
26706: GO 26691
26708: POP
26709: POP
// end ;
26710: PPOPN 2
26712: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26713: LD_EXP 63
26717: PUSH
26718: LD_EXP 80
26722: AND
26723: IFFALSE 26834
26725: GO 26727
26727: DISABLE
26728: LD_INT 0
26730: PPUSH
26731: PPUSH
26732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26733: LD_ADDR_VAR 0 3
26737: PUSH
26738: LD_INT 22
26740: PUSH
26741: LD_OWVAR 2
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 25
26752: PUSH
26753: LD_INT 1
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PPUSH
26764: CALL_OW 69
26768: ST_TO_ADDR
// if not tmp then
26769: LD_VAR 0 3
26773: NOT
26774: IFFALSE 26778
// exit ;
26776: GO 26834
// un := tmp [ rand ( 1 , tmp ) ] ;
26778: LD_ADDR_VAR 0 2
26782: PUSH
26783: LD_VAR 0 3
26787: PUSH
26788: LD_INT 1
26790: PPUSH
26791: LD_VAR 0 3
26795: PPUSH
26796: CALL_OW 12
26800: ARRAY
26801: ST_TO_ADDR
// if Crawls ( un ) then
26802: LD_VAR 0 2
26806: PPUSH
26807: CALL_OW 318
26811: IFFALSE 26822
// ComWalk ( un ) ;
26813: LD_VAR 0 2
26817: PPUSH
26818: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26822: LD_VAR 0 2
26826: PPUSH
26827: LD_INT 5
26829: PPUSH
26830: CALL_OW 336
// end ;
26834: PPOPN 3
26836: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26837: LD_EXP 63
26841: PUSH
26842: LD_EXP 81
26846: AND
26847: PUSH
26848: LD_OWVAR 67
26852: PUSH
26853: LD_INT 4
26855: LESS
26856: AND
26857: IFFALSE 26876
26859: GO 26861
26861: DISABLE
// begin Difficulty := Difficulty + 1 ;
26862: LD_ADDR_OWVAR 67
26866: PUSH
26867: LD_OWVAR 67
26871: PUSH
26872: LD_INT 1
26874: PLUS
26875: ST_TO_ADDR
// end ;
26876: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26877: LD_EXP 63
26881: PUSH
26882: LD_EXP 82
26886: AND
26887: IFFALSE 26990
26889: GO 26891
26891: DISABLE
26892: LD_INT 0
26894: PPUSH
// begin for i := 1 to 5 do
26895: LD_ADDR_VAR 0 1
26899: PUSH
26900: DOUBLE
26901: LD_INT 1
26903: DEC
26904: ST_TO_ADDR
26905: LD_INT 5
26907: PUSH
26908: FOR_TO
26909: IFFALSE 26988
// begin uc_nation := nation_nature ;
26911: LD_ADDR_OWVAR 21
26915: PUSH
26916: LD_INT 0
26918: ST_TO_ADDR
// uc_side := 0 ;
26919: LD_ADDR_OWVAR 20
26923: PUSH
26924: LD_INT 0
26926: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26927: LD_ADDR_OWVAR 29
26931: PUSH
26932: LD_INT 12
26934: PUSH
26935: LD_INT 12
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: ST_TO_ADDR
// hc_agressivity := 20 ;
26942: LD_ADDR_OWVAR 35
26946: PUSH
26947: LD_INT 20
26949: ST_TO_ADDR
// hc_class := class_tiger ;
26950: LD_ADDR_OWVAR 28
26954: PUSH
26955: LD_INT 14
26957: ST_TO_ADDR
// hc_gallery :=  ;
26958: LD_ADDR_OWVAR 33
26962: PUSH
26963: LD_STRING 
26965: ST_TO_ADDR
// hc_name :=  ;
26966: LD_ADDR_OWVAR 26
26970: PUSH
26971: LD_STRING 
26973: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26974: CALL_OW 44
26978: PPUSH
26979: LD_INT 0
26981: PPUSH
26982: CALL_OW 51
// end ;
26986: GO 26908
26988: POP
26989: POP
// end ;
26990: PPOPN 1
26992: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26993: LD_EXP 63
26997: PUSH
26998: LD_EXP 83
27002: AND
27003: IFFALSE 27012
27005: GO 27007
27007: DISABLE
// StreamSibBomb ;
27008: CALL 27013 0 0
27012: END
// export function StreamSibBomb ; var i , x , y ; begin
27013: LD_INT 0
27015: PPUSH
27016: PPUSH
27017: PPUSH
27018: PPUSH
// result := false ;
27019: LD_ADDR_VAR 0 1
27023: PUSH
27024: LD_INT 0
27026: ST_TO_ADDR
// for i := 1 to 16 do
27027: LD_ADDR_VAR 0 2
27031: PUSH
27032: DOUBLE
27033: LD_INT 1
27035: DEC
27036: ST_TO_ADDR
27037: LD_INT 16
27039: PUSH
27040: FOR_TO
27041: IFFALSE 27240
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27043: LD_ADDR_VAR 0 3
27047: PUSH
27048: LD_INT 10
27050: PUSH
27051: LD_INT 20
27053: PUSH
27054: LD_INT 30
27056: PUSH
27057: LD_INT 40
27059: PUSH
27060: LD_INT 50
27062: PUSH
27063: LD_INT 60
27065: PUSH
27066: LD_INT 70
27068: PUSH
27069: LD_INT 80
27071: PUSH
27072: LD_INT 90
27074: PUSH
27075: LD_INT 100
27077: PUSH
27078: LD_INT 110
27080: PUSH
27081: LD_INT 120
27083: PUSH
27084: LD_INT 130
27086: PUSH
27087: LD_INT 140
27089: PUSH
27090: LD_INT 150
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 1
27112: PPUSH
27113: LD_INT 15
27115: PPUSH
27116: CALL_OW 12
27120: ARRAY
27121: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27122: LD_ADDR_VAR 0 4
27126: PUSH
27127: LD_INT 10
27129: PUSH
27130: LD_INT 20
27132: PUSH
27133: LD_INT 30
27135: PUSH
27136: LD_INT 40
27138: PUSH
27139: LD_INT 50
27141: PUSH
27142: LD_INT 60
27144: PUSH
27145: LD_INT 70
27147: PUSH
27148: LD_INT 80
27150: PUSH
27151: LD_INT 90
27153: PUSH
27154: LD_INT 100
27156: PUSH
27157: LD_INT 110
27159: PUSH
27160: LD_INT 120
27162: PUSH
27163: LD_INT 130
27165: PUSH
27166: LD_INT 140
27168: PUSH
27169: LD_INT 150
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 1
27191: PPUSH
27192: LD_INT 15
27194: PPUSH
27195: CALL_OW 12
27199: ARRAY
27200: ST_TO_ADDR
// if ValidHex ( x , y ) then
27201: LD_VAR 0 3
27205: PPUSH
27206: LD_VAR 0 4
27210: PPUSH
27211: CALL_OW 488
27215: IFFALSE 27238
// begin result := [ x , y ] ;
27217: LD_ADDR_VAR 0 1
27221: PUSH
27222: LD_VAR 0 3
27226: PUSH
27227: LD_VAR 0 4
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: ST_TO_ADDR
// break ;
27236: GO 27240
// end ; end ;
27238: GO 27040
27240: POP
27241: POP
// if result then
27242: LD_VAR 0 1
27246: IFFALSE 27306
// begin ToLua ( playSibBomb() ) ;
27248: LD_STRING playSibBomb()
27250: PPUSH
27251: CALL_OW 559
// wait ( 0 0$14 ) ;
27255: LD_INT 490
27257: PPUSH
27258: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27262: LD_VAR 0 1
27266: PUSH
27267: LD_INT 1
27269: ARRAY
27270: PPUSH
27271: LD_VAR 0 1
27275: PUSH
27276: LD_INT 2
27278: ARRAY
27279: PPUSH
27280: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27284: LD_VAR 0 1
27288: PUSH
27289: LD_INT 1
27291: ARRAY
27292: PPUSH
27293: LD_VAR 0 1
27297: PUSH
27298: LD_INT 2
27300: ARRAY
27301: PPUSH
27302: CALL_OW 429
// end ; end ;
27306: LD_VAR 0 1
27310: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27311: LD_EXP 63
27315: PUSH
27316: LD_EXP 85
27320: AND
27321: IFFALSE 27333
27323: GO 27325
27325: DISABLE
// YouLost (  ) ;
27326: LD_STRING 
27328: PPUSH
27329: CALL_OW 104
27333: END
// every 0 0$1 trigger StreamModeActive and sFog do
27334: LD_EXP 63
27338: PUSH
27339: LD_EXP 84
27343: AND
27344: IFFALSE 27358
27346: GO 27348
27348: DISABLE
// FogOff ( your_side ) ;
27349: LD_OWVAR 2
27353: PPUSH
27354: CALL_OW 344
27358: END
// every 0 0$1 trigger StreamModeActive and sSun do
27359: LD_EXP 63
27363: PUSH
27364: LD_EXP 86
27368: AND
27369: IFFALSE 27397
27371: GO 27373
27373: DISABLE
// begin solar_recharge_percent := 0 ;
27374: LD_ADDR_OWVAR 79
27378: PUSH
27379: LD_INT 0
27381: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27382: LD_INT 10500
27384: PPUSH
27385: CALL_OW 67
// solar_recharge_percent := 100 ;
27389: LD_ADDR_OWVAR 79
27393: PUSH
27394: LD_INT 100
27396: ST_TO_ADDR
// end ;
27397: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27398: LD_EXP 63
27402: PUSH
27403: LD_EXP 87
27407: AND
27408: IFFALSE 27647
27410: GO 27412
27412: DISABLE
27413: LD_INT 0
27415: PPUSH
27416: PPUSH
27417: PPUSH
// begin tmp := [ ] ;
27418: LD_ADDR_VAR 0 3
27422: PUSH
27423: EMPTY
27424: ST_TO_ADDR
// for i := 1 to 6 do
27425: LD_ADDR_VAR 0 1
27429: PUSH
27430: DOUBLE
27431: LD_INT 1
27433: DEC
27434: ST_TO_ADDR
27435: LD_INT 6
27437: PUSH
27438: FOR_TO
27439: IFFALSE 27544
// begin uc_nation := nation_nature ;
27441: LD_ADDR_OWVAR 21
27445: PUSH
27446: LD_INT 0
27448: ST_TO_ADDR
// uc_side := 0 ;
27449: LD_ADDR_OWVAR 20
27453: PUSH
27454: LD_INT 0
27456: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27457: LD_ADDR_OWVAR 29
27461: PUSH
27462: LD_INT 12
27464: PUSH
27465: LD_INT 12
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: ST_TO_ADDR
// hc_agressivity := 20 ;
27472: LD_ADDR_OWVAR 35
27476: PUSH
27477: LD_INT 20
27479: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27480: LD_ADDR_OWVAR 28
27484: PUSH
27485: LD_INT 17
27487: ST_TO_ADDR
// hc_gallery :=  ;
27488: LD_ADDR_OWVAR 33
27492: PUSH
27493: LD_STRING 
27495: ST_TO_ADDR
// hc_name :=  ;
27496: LD_ADDR_OWVAR 26
27500: PUSH
27501: LD_STRING 
27503: ST_TO_ADDR
// un := CreateHuman ;
27504: LD_ADDR_VAR 0 2
27508: PUSH
27509: CALL_OW 44
27513: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27514: LD_VAR 0 2
27518: PPUSH
27519: LD_INT 1
27521: PPUSH
27522: CALL_OW 51
// tmp := tmp ^ un ;
27526: LD_ADDR_VAR 0 3
27530: PUSH
27531: LD_VAR 0 3
27535: PUSH
27536: LD_VAR 0 2
27540: ADD
27541: ST_TO_ADDR
// end ;
27542: GO 27438
27544: POP
27545: POP
// repeat wait ( 0 0$1 ) ;
27546: LD_INT 35
27548: PPUSH
27549: CALL_OW 67
// for un in tmp do
27553: LD_ADDR_VAR 0 2
27557: PUSH
27558: LD_VAR 0 3
27562: PUSH
27563: FOR_IN
27564: IFFALSE 27638
// begin if IsDead ( un ) then
27566: LD_VAR 0 2
27570: PPUSH
27571: CALL_OW 301
27575: IFFALSE 27595
// begin tmp := tmp diff un ;
27577: LD_ADDR_VAR 0 3
27581: PUSH
27582: LD_VAR 0 3
27586: PUSH
27587: LD_VAR 0 2
27591: DIFF
27592: ST_TO_ADDR
// continue ;
27593: GO 27563
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27595: LD_VAR 0 2
27599: PPUSH
27600: LD_INT 3
27602: PUSH
27603: LD_INT 22
27605: PUSH
27606: LD_INT 0
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PPUSH
27617: CALL_OW 69
27621: PPUSH
27622: LD_VAR 0 2
27626: PPUSH
27627: CALL_OW 74
27631: PPUSH
27632: CALL_OW 115
// end ;
27636: GO 27563
27638: POP
27639: POP
// until not tmp ;
27640: LD_VAR 0 3
27644: NOT
27645: IFFALSE 27546
// end ;
27647: PPOPN 3
27649: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27650: LD_EXP 63
27654: PUSH
27655: LD_EXP 88
27659: AND
27660: IFFALSE 27714
27662: GO 27664
27664: DISABLE
// begin ToLua ( displayTroll(); ) ;
27665: LD_STRING displayTroll();
27667: PPUSH
27668: CALL_OW 559
// wait ( 3 3$00 ) ;
27672: LD_INT 6300
27674: PPUSH
27675: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27679: LD_STRING hideTroll();
27681: PPUSH
27682: CALL_OW 559
// wait ( 1 1$00 ) ;
27686: LD_INT 2100
27688: PPUSH
27689: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27693: LD_STRING displayTroll();
27695: PPUSH
27696: CALL_OW 559
// wait ( 1 1$00 ) ;
27700: LD_INT 2100
27702: PPUSH
27703: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27707: LD_STRING hideTroll();
27709: PPUSH
27710: CALL_OW 559
// end ;
27714: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27715: LD_EXP 63
27719: PUSH
27720: LD_EXP 89
27724: AND
27725: IFFALSE 27788
27727: GO 27729
27729: DISABLE
27730: LD_INT 0
27732: PPUSH
// begin p := 0 ;
27733: LD_ADDR_VAR 0 1
27737: PUSH
27738: LD_INT 0
27740: ST_TO_ADDR
// repeat game_speed := 1 ;
27741: LD_ADDR_OWVAR 65
27745: PUSH
27746: LD_INT 1
27748: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27749: LD_INT 35
27751: PPUSH
27752: CALL_OW 67
// p := p + 1 ;
27756: LD_ADDR_VAR 0 1
27760: PUSH
27761: LD_VAR 0 1
27765: PUSH
27766: LD_INT 1
27768: PLUS
27769: ST_TO_ADDR
// until p >= 60 ;
27770: LD_VAR 0 1
27774: PUSH
27775: LD_INT 60
27777: GREATEREQUAL
27778: IFFALSE 27741
// game_speed := 4 ;
27780: LD_ADDR_OWVAR 65
27784: PUSH
27785: LD_INT 4
27787: ST_TO_ADDR
// end ;
27788: PPOPN 1
27790: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27791: LD_EXP 63
27795: PUSH
27796: LD_EXP 90
27800: AND
27801: IFFALSE 27947
27803: GO 27805
27805: DISABLE
27806: LD_INT 0
27808: PPUSH
27809: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27810: LD_ADDR_VAR 0 1
27814: PUSH
27815: LD_INT 22
27817: PUSH
27818: LD_OWVAR 2
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 2
27829: PUSH
27830: LD_INT 30
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 30
27842: PUSH
27843: LD_INT 1
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: LIST
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PPUSH
27859: CALL_OW 69
27863: ST_TO_ADDR
// if not depot then
27864: LD_VAR 0 1
27868: NOT
27869: IFFALSE 27873
// exit ;
27871: GO 27947
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27873: LD_ADDR_VAR 0 2
27877: PUSH
27878: LD_VAR 0 1
27882: PUSH
27883: LD_INT 1
27885: PPUSH
27886: LD_VAR 0 1
27890: PPUSH
27891: CALL_OW 12
27895: ARRAY
27896: PPUSH
27897: CALL_OW 274
27901: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27902: LD_VAR 0 2
27906: PPUSH
27907: LD_INT 1
27909: PPUSH
27910: LD_INT 0
27912: PPUSH
27913: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27917: LD_VAR 0 2
27921: PPUSH
27922: LD_INT 2
27924: PPUSH
27925: LD_INT 0
27927: PPUSH
27928: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27932: LD_VAR 0 2
27936: PPUSH
27937: LD_INT 3
27939: PPUSH
27940: LD_INT 0
27942: PPUSH
27943: CALL_OW 277
// end ;
27947: PPOPN 2
27949: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27950: LD_EXP 63
27954: PUSH
27955: LD_EXP 91
27959: AND
27960: IFFALSE 28057
27962: GO 27964
27964: DISABLE
27965: LD_INT 0
27967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27968: LD_ADDR_VAR 0 1
27972: PUSH
27973: LD_INT 22
27975: PUSH
27976: LD_OWVAR 2
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 21
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 3
27997: PUSH
27998: LD_INT 23
28000: PUSH
28001: LD_INT 0
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: LIST
28016: PPUSH
28017: CALL_OW 69
28021: ST_TO_ADDR
// if not tmp then
28022: LD_VAR 0 1
28026: NOT
28027: IFFALSE 28031
// exit ;
28029: GO 28057
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28031: LD_VAR 0 1
28035: PUSH
28036: LD_INT 1
28038: PPUSH
28039: LD_VAR 0 1
28043: PPUSH
28044: CALL_OW 12
28048: ARRAY
28049: PPUSH
28050: LD_INT 200
28052: PPUSH
28053: CALL_OW 234
// end ;
28057: PPOPN 1
28059: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28060: LD_EXP 63
28064: PUSH
28065: LD_EXP 92
28069: AND
28070: IFFALSE 28149
28072: GO 28074
28074: DISABLE
28075: LD_INT 0
28077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28078: LD_ADDR_VAR 0 1
28082: PUSH
28083: LD_INT 22
28085: PUSH
28086: LD_OWVAR 2
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 21
28097: PUSH
28098: LD_INT 2
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PPUSH
28109: CALL_OW 69
28113: ST_TO_ADDR
// if not tmp then
28114: LD_VAR 0 1
28118: NOT
28119: IFFALSE 28123
// exit ;
28121: GO 28149
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28123: LD_VAR 0 1
28127: PUSH
28128: LD_INT 1
28130: PPUSH
28131: LD_VAR 0 1
28135: PPUSH
28136: CALL_OW 12
28140: ARRAY
28141: PPUSH
28142: LD_INT 60
28144: PPUSH
28145: CALL_OW 234
// end ;
28149: PPOPN 1
28151: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28152: LD_EXP 63
28156: PUSH
28157: LD_EXP 93
28161: AND
28162: IFFALSE 28261
28164: GO 28166
28166: DISABLE
28167: LD_INT 0
28169: PPUSH
28170: PPUSH
// begin enable ;
28171: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28172: LD_ADDR_VAR 0 1
28176: PUSH
28177: LD_INT 22
28179: PUSH
28180: LD_OWVAR 2
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 61
28191: PUSH
28192: EMPTY
28193: LIST
28194: PUSH
28195: LD_INT 33
28197: PUSH
28198: LD_INT 2
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: LIST
28209: PPUSH
28210: CALL_OW 69
28214: ST_TO_ADDR
// if not tmp then
28215: LD_VAR 0 1
28219: NOT
28220: IFFALSE 28224
// exit ;
28222: GO 28261
// for i in tmp do
28224: LD_ADDR_VAR 0 2
28228: PUSH
28229: LD_VAR 0 1
28233: PUSH
28234: FOR_IN
28235: IFFALSE 28259
// if IsControledBy ( i ) then
28237: LD_VAR 0 2
28241: PPUSH
28242: CALL_OW 312
28246: IFFALSE 28257
// ComUnlink ( i ) ;
28248: LD_VAR 0 2
28252: PPUSH
28253: CALL_OW 136
28257: GO 28234
28259: POP
28260: POP
// end ;
28261: PPOPN 2
28263: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28264: LD_EXP 63
28268: PUSH
28269: LD_EXP 94
28273: AND
28274: IFFALSE 28414
28276: GO 28278
28278: DISABLE
28279: LD_INT 0
28281: PPUSH
28282: PPUSH
// begin ToLua ( displayPowell(); ) ;
28283: LD_STRING displayPowell();
28285: PPUSH
28286: CALL_OW 559
// uc_side := 0 ;
28290: LD_ADDR_OWVAR 20
28294: PUSH
28295: LD_INT 0
28297: ST_TO_ADDR
// uc_nation := 2 ;
28298: LD_ADDR_OWVAR 21
28302: PUSH
28303: LD_INT 2
28305: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28306: LD_ADDR_OWVAR 37
28310: PUSH
28311: LD_INT 14
28313: ST_TO_ADDR
// vc_engine := engine_siberite ;
28314: LD_ADDR_OWVAR 39
28318: PUSH
28319: LD_INT 3
28321: ST_TO_ADDR
// vc_control := control_apeman ;
28322: LD_ADDR_OWVAR 38
28326: PUSH
28327: LD_INT 5
28329: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28330: LD_ADDR_OWVAR 40
28334: PUSH
28335: LD_INT 29
28337: ST_TO_ADDR
// un := CreateVehicle ;
28338: LD_ADDR_VAR 0 2
28342: PUSH
28343: CALL_OW 45
28347: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28348: LD_VAR 0 2
28352: PPUSH
28353: LD_INT 1
28355: PPUSH
28356: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28360: LD_INT 35
28362: PPUSH
28363: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28367: LD_VAR 0 2
28371: PPUSH
28372: LD_INT 22
28374: PUSH
28375: LD_OWVAR 2
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PPUSH
28384: CALL_OW 69
28388: PPUSH
28389: LD_VAR 0 2
28393: PPUSH
28394: CALL_OW 74
28398: PPUSH
28399: CALL_OW 115
// until IsDead ( un ) ;
28403: LD_VAR 0 2
28407: PPUSH
28408: CALL_OW 301
28412: IFFALSE 28360
// end ;
28414: PPOPN 2
28416: END
// every 0 0$1 trigger StreamModeActive and sStu do
28417: LD_EXP 63
28421: PUSH
28422: LD_EXP 102
28426: AND
28427: IFFALSE 28443
28429: GO 28431
28431: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28432: LD_STRING displayStucuk();
28434: PPUSH
28435: CALL_OW 559
// ResetFog ;
28439: CALL_OW 335
// end ;
28443: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28444: LD_EXP 63
28448: PUSH
28449: LD_EXP 95
28453: AND
28454: IFFALSE 28595
28456: GO 28458
28458: DISABLE
28459: LD_INT 0
28461: PPUSH
28462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28463: LD_ADDR_VAR 0 2
28467: PUSH
28468: LD_INT 22
28470: PUSH
28471: LD_OWVAR 2
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 21
28482: PUSH
28483: LD_INT 1
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PPUSH
28494: CALL_OW 69
28498: ST_TO_ADDR
// if not tmp then
28499: LD_VAR 0 2
28503: NOT
28504: IFFALSE 28508
// exit ;
28506: GO 28595
// un := tmp [ rand ( 1 , tmp ) ] ;
28508: LD_ADDR_VAR 0 1
28512: PUSH
28513: LD_VAR 0 2
28517: PUSH
28518: LD_INT 1
28520: PPUSH
28521: LD_VAR 0 2
28525: PPUSH
28526: CALL_OW 12
28530: ARRAY
28531: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28532: LD_VAR 0 1
28536: PPUSH
28537: LD_INT 0
28539: PPUSH
28540: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28544: LD_VAR 0 1
28548: PPUSH
28549: LD_OWVAR 3
28553: PUSH
28554: LD_VAR 0 1
28558: DIFF
28559: PPUSH
28560: LD_VAR 0 1
28564: PPUSH
28565: CALL_OW 74
28569: PPUSH
28570: CALL_OW 115
// wait ( 0 0$20 ) ;
28574: LD_INT 700
28576: PPUSH
28577: CALL_OW 67
// SetSide ( un , your_side ) ;
28581: LD_VAR 0 1
28585: PPUSH
28586: LD_OWVAR 2
28590: PPUSH
28591: CALL_OW 235
// end ;
28595: PPOPN 2
28597: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28598: LD_EXP 63
28602: PUSH
28603: LD_EXP 96
28607: AND
28608: IFFALSE 28714
28610: GO 28612
28612: DISABLE
28613: LD_INT 0
28615: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28616: LD_ADDR_VAR 0 1
28620: PUSH
28621: LD_INT 22
28623: PUSH
28624: LD_OWVAR 2
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 2
28635: PUSH
28636: LD_INT 30
28638: PUSH
28639: LD_INT 0
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 30
28648: PUSH
28649: LD_INT 1
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: LIST
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PPUSH
28665: CALL_OW 69
28669: ST_TO_ADDR
// if not depot then
28670: LD_VAR 0 1
28674: NOT
28675: IFFALSE 28679
// exit ;
28677: GO 28714
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28679: LD_VAR 0 1
28683: PUSH
28684: LD_INT 1
28686: ARRAY
28687: PPUSH
28688: CALL_OW 250
28692: PPUSH
28693: LD_VAR 0 1
28697: PUSH
28698: LD_INT 1
28700: ARRAY
28701: PPUSH
28702: CALL_OW 251
28706: PPUSH
28707: LD_INT 70
28709: PPUSH
28710: CALL_OW 495
// end ;
28714: PPOPN 1
28716: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28717: LD_EXP 63
28721: PUSH
28722: LD_EXP 97
28726: AND
28727: IFFALSE 28938
28729: GO 28731
28731: DISABLE
28732: LD_INT 0
28734: PPUSH
28735: PPUSH
28736: PPUSH
28737: PPUSH
28738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28739: LD_ADDR_VAR 0 5
28743: PUSH
28744: LD_INT 22
28746: PUSH
28747: LD_OWVAR 2
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 21
28758: PUSH
28759: LD_INT 1
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PPUSH
28770: CALL_OW 69
28774: ST_TO_ADDR
// if not tmp then
28775: LD_VAR 0 5
28779: NOT
28780: IFFALSE 28784
// exit ;
28782: GO 28938
// for i in tmp do
28784: LD_ADDR_VAR 0 1
28788: PUSH
28789: LD_VAR 0 5
28793: PUSH
28794: FOR_IN
28795: IFFALSE 28936
// begin d := rand ( 0 , 5 ) ;
28797: LD_ADDR_VAR 0 4
28801: PUSH
28802: LD_INT 0
28804: PPUSH
28805: LD_INT 5
28807: PPUSH
28808: CALL_OW 12
28812: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28813: LD_ADDR_VAR 0 2
28817: PUSH
28818: LD_VAR 0 1
28822: PPUSH
28823: CALL_OW 250
28827: PPUSH
28828: LD_VAR 0 4
28832: PPUSH
28833: LD_INT 3
28835: PPUSH
28836: LD_INT 12
28838: PPUSH
28839: CALL_OW 12
28843: PPUSH
28844: CALL_OW 272
28848: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28849: LD_ADDR_VAR 0 3
28853: PUSH
28854: LD_VAR 0 1
28858: PPUSH
28859: CALL_OW 251
28863: PPUSH
28864: LD_VAR 0 4
28868: PPUSH
28869: LD_INT 3
28871: PPUSH
28872: LD_INT 12
28874: PPUSH
28875: CALL_OW 12
28879: PPUSH
28880: CALL_OW 273
28884: ST_TO_ADDR
// if ValidHex ( x , y ) then
28885: LD_VAR 0 2
28889: PPUSH
28890: LD_VAR 0 3
28894: PPUSH
28895: CALL_OW 488
28899: IFFALSE 28934
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28901: LD_VAR 0 1
28905: PPUSH
28906: LD_VAR 0 2
28910: PPUSH
28911: LD_VAR 0 3
28915: PPUSH
28916: LD_INT 3
28918: PPUSH
28919: LD_INT 6
28921: PPUSH
28922: CALL_OW 12
28926: PPUSH
28927: LD_INT 1
28929: PPUSH
28930: CALL_OW 483
// end ;
28934: GO 28794
28936: POP
28937: POP
// end ;
28938: PPOPN 5
28940: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28941: LD_EXP 63
28945: PUSH
28946: LD_EXP 98
28950: AND
28951: IFFALSE 29045
28953: GO 28955
28955: DISABLE
28956: LD_INT 0
28958: PPUSH
28959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28960: LD_ADDR_VAR 0 2
28964: PUSH
28965: LD_INT 22
28967: PUSH
28968: LD_OWVAR 2
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 32
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 21
28989: PUSH
28990: LD_INT 2
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: LIST
29001: PPUSH
29002: CALL_OW 69
29006: ST_TO_ADDR
// if not tmp then
29007: LD_VAR 0 2
29011: NOT
29012: IFFALSE 29016
// exit ;
29014: GO 29045
// for i in tmp do
29016: LD_ADDR_VAR 0 1
29020: PUSH
29021: LD_VAR 0 2
29025: PUSH
29026: FOR_IN
29027: IFFALSE 29043
// SetFuel ( i , 0 ) ;
29029: LD_VAR 0 1
29033: PPUSH
29034: LD_INT 0
29036: PPUSH
29037: CALL_OW 240
29041: GO 29026
29043: POP
29044: POP
// end ;
29045: PPOPN 2
29047: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29048: LD_EXP 63
29052: PUSH
29053: LD_EXP 99
29057: AND
29058: IFFALSE 29124
29060: GO 29062
29062: DISABLE
29063: LD_INT 0
29065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29066: LD_ADDR_VAR 0 1
29070: PUSH
29071: LD_INT 22
29073: PUSH
29074: LD_OWVAR 2
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 30
29085: PUSH
29086: LD_INT 29
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PPUSH
29097: CALL_OW 69
29101: ST_TO_ADDR
// if not tmp then
29102: LD_VAR 0 1
29106: NOT
29107: IFFALSE 29111
// exit ;
29109: GO 29124
// DestroyUnit ( tmp [ 1 ] ) ;
29111: LD_VAR 0 1
29115: PUSH
29116: LD_INT 1
29118: ARRAY
29119: PPUSH
29120: CALL_OW 65
// end ;
29124: PPOPN 1
29126: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29127: LD_EXP 63
29131: PUSH
29132: LD_EXP 101
29136: AND
29137: IFFALSE 29266
29139: GO 29141
29141: DISABLE
29142: LD_INT 0
29144: PPUSH
// begin uc_side := 0 ;
29145: LD_ADDR_OWVAR 20
29149: PUSH
29150: LD_INT 0
29152: ST_TO_ADDR
// uc_nation := nation_arabian ;
29153: LD_ADDR_OWVAR 21
29157: PUSH
29158: LD_INT 2
29160: ST_TO_ADDR
// hc_gallery :=  ;
29161: LD_ADDR_OWVAR 33
29165: PUSH
29166: LD_STRING 
29168: ST_TO_ADDR
// hc_name :=  ;
29169: LD_ADDR_OWVAR 26
29173: PUSH
29174: LD_STRING 
29176: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29177: LD_INT 1
29179: PPUSH
29180: LD_INT 11
29182: PPUSH
29183: LD_INT 10
29185: PPUSH
29186: CALL_OW 380
// un := CreateHuman ;
29190: LD_ADDR_VAR 0 1
29194: PUSH
29195: CALL_OW 44
29199: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29200: LD_VAR 0 1
29204: PPUSH
29205: LD_INT 1
29207: PPUSH
29208: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29212: LD_INT 35
29214: PPUSH
29215: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29219: LD_VAR 0 1
29223: PPUSH
29224: LD_INT 22
29226: PUSH
29227: LD_OWVAR 2
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PPUSH
29236: CALL_OW 69
29240: PPUSH
29241: LD_VAR 0 1
29245: PPUSH
29246: CALL_OW 74
29250: PPUSH
29251: CALL_OW 115
// until IsDead ( un ) ;
29255: LD_VAR 0 1
29259: PPUSH
29260: CALL_OW 301
29264: IFFALSE 29212
// end ;
29266: PPOPN 1
29268: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29269: LD_EXP 63
29273: PUSH
29274: LD_EXP 103
29278: AND
29279: IFFALSE 29291
29281: GO 29283
29283: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29284: LD_STRING earthquake(getX(game), 0, 32)
29286: PPUSH
29287: CALL_OW 559
29291: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29292: LD_EXP 63
29296: PUSH
29297: LD_EXP 104
29301: AND
29302: IFFALSE 29393
29304: GO 29306
29306: DISABLE
29307: LD_INT 0
29309: PPUSH
// begin enable ;
29310: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29311: LD_ADDR_VAR 0 1
29315: PUSH
29316: LD_INT 22
29318: PUSH
29319: LD_OWVAR 2
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 21
29330: PUSH
29331: LD_INT 2
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 33
29340: PUSH
29341: LD_INT 3
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: LIST
29352: PPUSH
29353: CALL_OW 69
29357: ST_TO_ADDR
// if not tmp then
29358: LD_VAR 0 1
29362: NOT
29363: IFFALSE 29367
// exit ;
29365: GO 29393
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29367: LD_VAR 0 1
29371: PUSH
29372: LD_INT 1
29374: PPUSH
29375: LD_VAR 0 1
29379: PPUSH
29380: CALL_OW 12
29384: ARRAY
29385: PPUSH
29386: LD_INT 1
29388: PPUSH
29389: CALL_OW 234
// end ;
29393: PPOPN 1
29395: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29396: LD_EXP 63
29400: PUSH
29401: LD_EXP 105
29405: AND
29406: IFFALSE 29547
29408: GO 29410
29410: DISABLE
29411: LD_INT 0
29413: PPUSH
29414: PPUSH
29415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29416: LD_ADDR_VAR 0 3
29420: PUSH
29421: LD_INT 22
29423: PUSH
29424: LD_OWVAR 2
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 25
29435: PUSH
29436: LD_INT 1
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PPUSH
29447: CALL_OW 69
29451: ST_TO_ADDR
// if not tmp then
29452: LD_VAR 0 3
29456: NOT
29457: IFFALSE 29461
// exit ;
29459: GO 29547
// un := tmp [ rand ( 1 , tmp ) ] ;
29461: LD_ADDR_VAR 0 2
29465: PUSH
29466: LD_VAR 0 3
29470: PUSH
29471: LD_INT 1
29473: PPUSH
29474: LD_VAR 0 3
29478: PPUSH
29479: CALL_OW 12
29483: ARRAY
29484: ST_TO_ADDR
// if Crawls ( un ) then
29485: LD_VAR 0 2
29489: PPUSH
29490: CALL_OW 318
29494: IFFALSE 29505
// ComWalk ( un ) ;
29496: LD_VAR 0 2
29500: PPUSH
29501: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29505: LD_VAR 0 2
29509: PPUSH
29510: LD_INT 9
29512: PPUSH
29513: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29517: LD_INT 28
29519: PPUSH
29520: LD_OWVAR 2
29524: PPUSH
29525: LD_INT 2
29527: PPUSH
29528: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29532: LD_INT 29
29534: PPUSH
29535: LD_OWVAR 2
29539: PPUSH
29540: LD_INT 2
29542: PPUSH
29543: CALL_OW 322
// end ;
29547: PPOPN 3
29549: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29550: LD_EXP 63
29554: PUSH
29555: LD_EXP 106
29559: AND
29560: IFFALSE 29671
29562: GO 29564
29564: DISABLE
29565: LD_INT 0
29567: PPUSH
29568: PPUSH
29569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29570: LD_ADDR_VAR 0 3
29574: PUSH
29575: LD_INT 22
29577: PUSH
29578: LD_OWVAR 2
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 25
29589: PUSH
29590: LD_INT 1
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PPUSH
29601: CALL_OW 69
29605: ST_TO_ADDR
// if not tmp then
29606: LD_VAR 0 3
29610: NOT
29611: IFFALSE 29615
// exit ;
29613: GO 29671
// un := tmp [ rand ( 1 , tmp ) ] ;
29615: LD_ADDR_VAR 0 2
29619: PUSH
29620: LD_VAR 0 3
29624: PUSH
29625: LD_INT 1
29627: PPUSH
29628: LD_VAR 0 3
29632: PPUSH
29633: CALL_OW 12
29637: ARRAY
29638: ST_TO_ADDR
// if Crawls ( un ) then
29639: LD_VAR 0 2
29643: PPUSH
29644: CALL_OW 318
29648: IFFALSE 29659
// ComWalk ( un ) ;
29650: LD_VAR 0 2
29654: PPUSH
29655: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29659: LD_VAR 0 2
29663: PPUSH
29664: LD_INT 8
29666: PPUSH
29667: CALL_OW 336
// end ;
29671: PPOPN 3
29673: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29674: LD_EXP 63
29678: PUSH
29679: LD_EXP 107
29683: AND
29684: IFFALSE 29828
29686: GO 29688
29688: DISABLE
29689: LD_INT 0
29691: PPUSH
29692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29693: LD_ADDR_VAR 0 2
29697: PUSH
29698: LD_INT 22
29700: PUSH
29701: LD_OWVAR 2
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 21
29712: PUSH
29713: LD_INT 2
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 2
29722: PUSH
29723: LD_INT 34
29725: PUSH
29726: LD_INT 12
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 34
29735: PUSH
29736: LD_INT 51
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 34
29745: PUSH
29746: LD_INT 32
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: PPUSH
29764: CALL_OW 69
29768: ST_TO_ADDR
// if not tmp then
29769: LD_VAR 0 2
29773: NOT
29774: IFFALSE 29778
// exit ;
29776: GO 29828
// for i in tmp do
29778: LD_ADDR_VAR 0 1
29782: PUSH
29783: LD_VAR 0 2
29787: PUSH
29788: FOR_IN
29789: IFFALSE 29826
// if GetCargo ( i , mat_artifact ) = 0 then
29791: LD_VAR 0 1
29795: PPUSH
29796: LD_INT 4
29798: PPUSH
29799: CALL_OW 289
29803: PUSH
29804: LD_INT 0
29806: EQUAL
29807: IFFALSE 29824
// SetCargo ( i , mat_siberit , 100 ) ;
29809: LD_VAR 0 1
29813: PPUSH
29814: LD_INT 3
29816: PPUSH
29817: LD_INT 100
29819: PPUSH
29820: CALL_OW 290
29824: GO 29788
29826: POP
29827: POP
// end ;
29828: PPOPN 2
29830: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29831: LD_EXP 63
29835: PUSH
29836: LD_EXP 108
29840: AND
29841: IFFALSE 30024
29843: GO 29845
29845: DISABLE
29846: LD_INT 0
29848: PPUSH
29849: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29850: LD_ADDR_VAR 0 2
29854: PUSH
29855: LD_INT 22
29857: PUSH
29858: LD_OWVAR 2
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PPUSH
29867: CALL_OW 69
29871: ST_TO_ADDR
// if not tmp then
29872: LD_VAR 0 2
29876: NOT
29877: IFFALSE 29881
// exit ;
29879: GO 30024
// for i := 1 to 2 do
29881: LD_ADDR_VAR 0 1
29885: PUSH
29886: DOUBLE
29887: LD_INT 1
29889: DEC
29890: ST_TO_ADDR
29891: LD_INT 2
29893: PUSH
29894: FOR_TO
29895: IFFALSE 30022
// begin uc_side := your_side ;
29897: LD_ADDR_OWVAR 20
29901: PUSH
29902: LD_OWVAR 2
29906: ST_TO_ADDR
// uc_nation := nation_american ;
29907: LD_ADDR_OWVAR 21
29911: PUSH
29912: LD_INT 1
29914: ST_TO_ADDR
// vc_chassis := us_morphling ;
29915: LD_ADDR_OWVAR 37
29919: PUSH
29920: LD_INT 5
29922: ST_TO_ADDR
// vc_engine := engine_siberite ;
29923: LD_ADDR_OWVAR 39
29927: PUSH
29928: LD_INT 3
29930: ST_TO_ADDR
// vc_control := control_computer ;
29931: LD_ADDR_OWVAR 38
29935: PUSH
29936: LD_INT 3
29938: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29939: LD_ADDR_OWVAR 40
29943: PUSH
29944: LD_INT 10
29946: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29947: LD_VAR 0 2
29951: PUSH
29952: LD_INT 1
29954: ARRAY
29955: PPUSH
29956: CALL_OW 310
29960: NOT
29961: IFFALSE 30008
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29963: CALL_OW 45
29967: PPUSH
29968: LD_VAR 0 2
29972: PUSH
29973: LD_INT 1
29975: ARRAY
29976: PPUSH
29977: CALL_OW 250
29981: PPUSH
29982: LD_VAR 0 2
29986: PUSH
29987: LD_INT 1
29989: ARRAY
29990: PPUSH
29991: CALL_OW 251
29995: PPUSH
29996: LD_INT 12
29998: PPUSH
29999: LD_INT 1
30001: PPUSH
30002: CALL_OW 50
30006: GO 30020
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30008: CALL_OW 45
30012: PPUSH
30013: LD_INT 1
30015: PPUSH
30016: CALL_OW 51
// end ;
30020: GO 29894
30022: POP
30023: POP
// end ;
30024: PPOPN 2
30026: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30027: LD_EXP 63
30031: PUSH
30032: LD_EXP 109
30036: AND
30037: IFFALSE 30259
30039: GO 30041
30041: DISABLE
30042: LD_INT 0
30044: PPUSH
30045: PPUSH
30046: PPUSH
30047: PPUSH
30048: PPUSH
30049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30050: LD_ADDR_VAR 0 6
30054: PUSH
30055: LD_INT 22
30057: PUSH
30058: LD_OWVAR 2
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 21
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 3
30079: PUSH
30080: LD_INT 23
30082: PUSH
30083: LD_INT 0
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: LIST
30098: PPUSH
30099: CALL_OW 69
30103: ST_TO_ADDR
// if not tmp then
30104: LD_VAR 0 6
30108: NOT
30109: IFFALSE 30113
// exit ;
30111: GO 30259
// s1 := rand ( 1 , 4 ) ;
30113: LD_ADDR_VAR 0 2
30117: PUSH
30118: LD_INT 1
30120: PPUSH
30121: LD_INT 4
30123: PPUSH
30124: CALL_OW 12
30128: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30129: LD_ADDR_VAR 0 4
30133: PUSH
30134: LD_VAR 0 6
30138: PUSH
30139: LD_INT 1
30141: ARRAY
30142: PPUSH
30143: LD_VAR 0 2
30147: PPUSH
30148: CALL_OW 259
30152: ST_TO_ADDR
// if s1 = 1 then
30153: LD_VAR 0 2
30157: PUSH
30158: LD_INT 1
30160: EQUAL
30161: IFFALSE 30181
// s2 := rand ( 2 , 4 ) else
30163: LD_ADDR_VAR 0 3
30167: PUSH
30168: LD_INT 2
30170: PPUSH
30171: LD_INT 4
30173: PPUSH
30174: CALL_OW 12
30178: ST_TO_ADDR
30179: GO 30189
// s2 := 1 ;
30181: LD_ADDR_VAR 0 3
30185: PUSH
30186: LD_INT 1
30188: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30189: LD_ADDR_VAR 0 5
30193: PUSH
30194: LD_VAR 0 6
30198: PUSH
30199: LD_INT 1
30201: ARRAY
30202: PPUSH
30203: LD_VAR 0 3
30207: PPUSH
30208: CALL_OW 259
30212: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30213: LD_VAR 0 6
30217: PUSH
30218: LD_INT 1
30220: ARRAY
30221: PPUSH
30222: LD_VAR 0 2
30226: PPUSH
30227: LD_VAR 0 5
30231: PPUSH
30232: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30236: LD_VAR 0 6
30240: PUSH
30241: LD_INT 1
30243: ARRAY
30244: PPUSH
30245: LD_VAR 0 3
30249: PPUSH
30250: LD_VAR 0 4
30254: PPUSH
30255: CALL_OW 237
// end ;
30259: PPOPN 6
30261: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30262: LD_EXP 63
30266: PUSH
30267: LD_EXP 110
30271: AND
30272: IFFALSE 30351
30274: GO 30276
30276: DISABLE
30277: LD_INT 0
30279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30280: LD_ADDR_VAR 0 1
30284: PUSH
30285: LD_INT 22
30287: PUSH
30288: LD_OWVAR 2
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 30
30299: PUSH
30300: LD_INT 3
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PPUSH
30311: CALL_OW 69
30315: ST_TO_ADDR
// if not tmp then
30316: LD_VAR 0 1
30320: NOT
30321: IFFALSE 30325
// exit ;
30323: GO 30351
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30325: LD_VAR 0 1
30329: PUSH
30330: LD_INT 1
30332: PPUSH
30333: LD_VAR 0 1
30337: PPUSH
30338: CALL_OW 12
30342: ARRAY
30343: PPUSH
30344: LD_INT 1
30346: PPUSH
30347: CALL_OW 234
// end ;
30351: PPOPN 1
30353: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30354: LD_EXP 63
30358: PUSH
30359: LD_EXP 111
30363: AND
30364: IFFALSE 30476
30366: GO 30368
30368: DISABLE
30369: LD_INT 0
30371: PPUSH
30372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30373: LD_ADDR_VAR 0 2
30377: PUSH
30378: LD_INT 22
30380: PUSH
30381: LD_OWVAR 2
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 2
30392: PUSH
30393: LD_INT 30
30395: PUSH
30396: LD_INT 27
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 30
30405: PUSH
30406: LD_INT 26
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 30
30415: PUSH
30416: LD_INT 28
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PPUSH
30433: CALL_OW 69
30437: ST_TO_ADDR
// if not tmp then
30438: LD_VAR 0 2
30442: NOT
30443: IFFALSE 30447
// exit ;
30445: GO 30476
// for i in tmp do
30447: LD_ADDR_VAR 0 1
30451: PUSH
30452: LD_VAR 0 2
30456: PUSH
30457: FOR_IN
30458: IFFALSE 30474
// SetLives ( i , 1 ) ;
30460: LD_VAR 0 1
30464: PPUSH
30465: LD_INT 1
30467: PPUSH
30468: CALL_OW 234
30472: GO 30457
30474: POP
30475: POP
// end ;
30476: PPOPN 2
30478: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30479: LD_EXP 63
30483: PUSH
30484: LD_EXP 112
30488: AND
30489: IFFALSE 30776
30491: GO 30493
30493: DISABLE
30494: LD_INT 0
30496: PPUSH
30497: PPUSH
30498: PPUSH
// begin i := rand ( 1 , 7 ) ;
30499: LD_ADDR_VAR 0 1
30503: PUSH
30504: LD_INT 1
30506: PPUSH
30507: LD_INT 7
30509: PPUSH
30510: CALL_OW 12
30514: ST_TO_ADDR
// case i of 1 :
30515: LD_VAR 0 1
30519: PUSH
30520: LD_INT 1
30522: DOUBLE
30523: EQUAL
30524: IFTRUE 30528
30526: GO 30538
30528: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30529: LD_STRING earthquake(getX(game), 0, 32)
30531: PPUSH
30532: CALL_OW 559
30536: GO 30776
30538: LD_INT 2
30540: DOUBLE
30541: EQUAL
30542: IFTRUE 30546
30544: GO 30560
30546: POP
// begin ToLua ( displayStucuk(); ) ;
30547: LD_STRING displayStucuk();
30549: PPUSH
30550: CALL_OW 559
// ResetFog ;
30554: CALL_OW 335
// end ; 3 :
30558: GO 30776
30560: LD_INT 3
30562: DOUBLE
30563: EQUAL
30564: IFTRUE 30568
30566: GO 30672
30568: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30569: LD_ADDR_VAR 0 2
30573: PUSH
30574: LD_INT 22
30576: PUSH
30577: LD_OWVAR 2
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 25
30588: PUSH
30589: LD_INT 1
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PPUSH
30600: CALL_OW 69
30604: ST_TO_ADDR
// if not tmp then
30605: LD_VAR 0 2
30609: NOT
30610: IFFALSE 30614
// exit ;
30612: GO 30776
// un := tmp [ rand ( 1 , tmp ) ] ;
30614: LD_ADDR_VAR 0 3
30618: PUSH
30619: LD_VAR 0 2
30623: PUSH
30624: LD_INT 1
30626: PPUSH
30627: LD_VAR 0 2
30631: PPUSH
30632: CALL_OW 12
30636: ARRAY
30637: ST_TO_ADDR
// if Crawls ( un ) then
30638: LD_VAR 0 3
30642: PPUSH
30643: CALL_OW 318
30647: IFFALSE 30658
// ComWalk ( un ) ;
30649: LD_VAR 0 3
30653: PPUSH
30654: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30658: LD_VAR 0 3
30662: PPUSH
30663: LD_INT 8
30665: PPUSH
30666: CALL_OW 336
// end ; 4 :
30670: GO 30776
30672: LD_INT 4
30674: DOUBLE
30675: EQUAL
30676: IFTRUE 30680
30678: GO 30754
30680: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30681: LD_ADDR_VAR 0 2
30685: PUSH
30686: LD_INT 22
30688: PUSH
30689: LD_OWVAR 2
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 30
30700: PUSH
30701: LD_INT 29
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PPUSH
30712: CALL_OW 69
30716: ST_TO_ADDR
// if not tmp then
30717: LD_VAR 0 2
30721: NOT
30722: IFFALSE 30726
// exit ;
30724: GO 30776
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30726: LD_VAR 0 2
30730: PUSH
30731: LD_INT 1
30733: ARRAY
30734: PPUSH
30735: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30739: LD_VAR 0 2
30743: PUSH
30744: LD_INT 1
30746: ARRAY
30747: PPUSH
30748: CALL_OW 65
// end ; 5 .. 7 :
30752: GO 30776
30754: LD_INT 5
30756: DOUBLE
30757: GREATEREQUAL
30758: IFFALSE 30766
30760: LD_INT 7
30762: DOUBLE
30763: LESSEQUAL
30764: IFTRUE 30768
30766: GO 30775
30768: POP
// StreamSibBomb ; end ;
30769: CALL 27013 0 0
30773: GO 30776
30775: POP
// end ;
30776: PPOPN 3
30778: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30779: LD_EXP 63
30783: PUSH
30784: LD_EXP 113
30788: AND
30789: IFFALSE 30945
30791: GO 30793
30793: DISABLE
30794: LD_INT 0
30796: PPUSH
30797: PPUSH
30798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30799: LD_ADDR_VAR 0 2
30803: PUSH
30804: LD_INT 81
30806: PUSH
30807: LD_OWVAR 2
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 2
30818: PUSH
30819: LD_INT 21
30821: PUSH
30822: LD_INT 1
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 21
30831: PUSH
30832: LD_INT 2
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: LIST
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PPUSH
30848: CALL_OW 69
30852: ST_TO_ADDR
// if not tmp then
30853: LD_VAR 0 2
30857: NOT
30858: IFFALSE 30862
// exit ;
30860: GO 30945
// p := 0 ;
30862: LD_ADDR_VAR 0 3
30866: PUSH
30867: LD_INT 0
30869: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30870: LD_INT 35
30872: PPUSH
30873: CALL_OW 67
// p := p + 1 ;
30877: LD_ADDR_VAR 0 3
30881: PUSH
30882: LD_VAR 0 3
30886: PUSH
30887: LD_INT 1
30889: PLUS
30890: ST_TO_ADDR
// for i in tmp do
30891: LD_ADDR_VAR 0 1
30895: PUSH
30896: LD_VAR 0 2
30900: PUSH
30901: FOR_IN
30902: IFFALSE 30933
// if GetLives ( i ) < 1000 then
30904: LD_VAR 0 1
30908: PPUSH
30909: CALL_OW 256
30913: PUSH
30914: LD_INT 1000
30916: LESS
30917: IFFALSE 30931
// SetLives ( i , 1000 ) ;
30919: LD_VAR 0 1
30923: PPUSH
30924: LD_INT 1000
30926: PPUSH
30927: CALL_OW 234
30931: GO 30901
30933: POP
30934: POP
// until p > 20 ;
30935: LD_VAR 0 3
30939: PUSH
30940: LD_INT 20
30942: GREATER
30943: IFFALSE 30870
// end ;
30945: PPOPN 3
30947: END
// every 0 0$1 trigger StreamModeActive and sTime do
30948: LD_EXP 63
30952: PUSH
30953: LD_EXP 114
30957: AND
30958: IFFALSE 30993
30960: GO 30962
30962: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30963: LD_INT 28
30965: PPUSH
30966: LD_OWVAR 2
30970: PPUSH
30971: LD_INT 2
30973: PPUSH
30974: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30978: LD_INT 30
30980: PPUSH
30981: LD_OWVAR 2
30985: PPUSH
30986: LD_INT 2
30988: PPUSH
30989: CALL_OW 322
// end ;
30993: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30994: LD_EXP 63
30998: PUSH
30999: LD_EXP 115
31003: AND
31004: IFFALSE 31125
31006: GO 31008
31008: DISABLE
31009: LD_INT 0
31011: PPUSH
31012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31013: LD_ADDR_VAR 0 2
31017: PUSH
31018: LD_INT 22
31020: PUSH
31021: LD_OWVAR 2
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 21
31032: PUSH
31033: LD_INT 1
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 3
31042: PUSH
31043: LD_INT 23
31045: PUSH
31046: LD_INT 0
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: LIST
31061: PPUSH
31062: CALL_OW 69
31066: ST_TO_ADDR
// if not tmp then
31067: LD_VAR 0 2
31071: NOT
31072: IFFALSE 31076
// exit ;
31074: GO 31125
// for i in tmp do
31076: LD_ADDR_VAR 0 1
31080: PUSH
31081: LD_VAR 0 2
31085: PUSH
31086: FOR_IN
31087: IFFALSE 31123
// begin if Crawls ( i ) then
31089: LD_VAR 0 1
31093: PPUSH
31094: CALL_OW 318
31098: IFFALSE 31109
// ComWalk ( i ) ;
31100: LD_VAR 0 1
31104: PPUSH
31105: CALL_OW 138
// SetClass ( i , 2 ) ;
31109: LD_VAR 0 1
31113: PPUSH
31114: LD_INT 2
31116: PPUSH
31117: CALL_OW 336
// end ;
31121: GO 31086
31123: POP
31124: POP
// end ;
31125: PPOPN 2
31127: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31128: LD_EXP 63
31132: PUSH
31133: LD_EXP 116
31137: AND
31138: IFFALSE 31426
31140: GO 31142
31142: DISABLE
31143: LD_INT 0
31145: PPUSH
31146: PPUSH
31147: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31148: LD_OWVAR 2
31152: PPUSH
31153: LD_INT 9
31155: PPUSH
31156: LD_INT 1
31158: PPUSH
31159: LD_INT 1
31161: PPUSH
31162: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31166: LD_INT 9
31168: PPUSH
31169: LD_OWVAR 2
31173: PPUSH
31174: CALL_OW 343
// uc_side := 9 ;
31178: LD_ADDR_OWVAR 20
31182: PUSH
31183: LD_INT 9
31185: ST_TO_ADDR
// uc_nation := 2 ;
31186: LD_ADDR_OWVAR 21
31190: PUSH
31191: LD_INT 2
31193: ST_TO_ADDR
// hc_name := Dark Warrior ;
31194: LD_ADDR_OWVAR 26
31198: PUSH
31199: LD_STRING Dark Warrior
31201: ST_TO_ADDR
// hc_gallery :=  ;
31202: LD_ADDR_OWVAR 33
31206: PUSH
31207: LD_STRING 
31209: ST_TO_ADDR
// hc_noskilllimit := true ;
31210: LD_ADDR_OWVAR 76
31214: PUSH
31215: LD_INT 1
31217: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31218: LD_ADDR_OWVAR 31
31222: PUSH
31223: LD_INT 30
31225: PUSH
31226: LD_INT 30
31228: PUSH
31229: LD_INT 30
31231: PUSH
31232: LD_INT 30
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: ST_TO_ADDR
// un := CreateHuman ;
31241: LD_ADDR_VAR 0 3
31245: PUSH
31246: CALL_OW 44
31250: ST_TO_ADDR
// hc_noskilllimit := false ;
31251: LD_ADDR_OWVAR 76
31255: PUSH
31256: LD_INT 0
31258: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31259: LD_VAR 0 3
31263: PPUSH
31264: LD_INT 1
31266: PPUSH
31267: CALL_OW 51
// ToLua ( playRanger() ) ;
31271: LD_STRING playRanger()
31273: PPUSH
31274: CALL_OW 559
// p := 0 ;
31278: LD_ADDR_VAR 0 2
31282: PUSH
31283: LD_INT 0
31285: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31286: LD_INT 35
31288: PPUSH
31289: CALL_OW 67
// p := p + 1 ;
31293: LD_ADDR_VAR 0 2
31297: PUSH
31298: LD_VAR 0 2
31302: PUSH
31303: LD_INT 1
31305: PLUS
31306: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31307: LD_VAR 0 3
31311: PPUSH
31312: CALL_OW 256
31316: PUSH
31317: LD_INT 1000
31319: LESS
31320: IFFALSE 31334
// SetLives ( un , 1000 ) ;
31322: LD_VAR 0 3
31326: PPUSH
31327: LD_INT 1000
31329: PPUSH
31330: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31334: LD_VAR 0 3
31338: PPUSH
31339: LD_INT 81
31341: PUSH
31342: LD_OWVAR 2
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 91
31353: PUSH
31354: LD_VAR 0 3
31358: PUSH
31359: LD_INT 30
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: LIST
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PPUSH
31371: CALL_OW 69
31375: PPUSH
31376: LD_VAR 0 3
31380: PPUSH
31381: CALL_OW 74
31385: PPUSH
31386: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31390: LD_VAR 0 2
31394: PUSH
31395: LD_INT 80
31397: GREATER
31398: PUSH
31399: LD_VAR 0 3
31403: PPUSH
31404: CALL_OW 301
31408: OR
31409: IFFALSE 31286
// if un then
31411: LD_VAR 0 3
31415: IFFALSE 31426
// RemoveUnit ( un ) ;
31417: LD_VAR 0 3
31421: PPUSH
31422: CALL_OW 64
// end ;
31426: PPOPN 3
31428: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31429: LD_EXP 117
31433: IFFALSE 31549
31435: GO 31437
31437: DISABLE
31438: LD_INT 0
31440: PPUSH
31441: PPUSH
31442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31443: LD_ADDR_VAR 0 2
31447: PUSH
31448: LD_INT 81
31450: PUSH
31451: LD_OWVAR 2
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 21
31462: PUSH
31463: LD_INT 1
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PPUSH
31474: CALL_OW 69
31478: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31479: LD_STRING playComputer()
31481: PPUSH
31482: CALL_OW 559
// if not tmp then
31486: LD_VAR 0 2
31490: NOT
31491: IFFALSE 31495
// exit ;
31493: GO 31549
// for i in tmp do
31495: LD_ADDR_VAR 0 1
31499: PUSH
31500: LD_VAR 0 2
31504: PUSH
31505: FOR_IN
31506: IFFALSE 31547
// for j := 1 to 4 do
31508: LD_ADDR_VAR 0 3
31512: PUSH
31513: DOUBLE
31514: LD_INT 1
31516: DEC
31517: ST_TO_ADDR
31518: LD_INT 4
31520: PUSH
31521: FOR_TO
31522: IFFALSE 31543
// SetSkill ( i , j , 10 ) ;
31524: LD_VAR 0 1
31528: PPUSH
31529: LD_VAR 0 3
31533: PPUSH
31534: LD_INT 10
31536: PPUSH
31537: CALL_OW 237
31541: GO 31521
31543: POP
31544: POP
31545: GO 31505
31547: POP
31548: POP
// end ;
31549: PPOPN 3
31551: END
// every 0 0$1 trigger s30 do var i , tmp ;
31552: LD_EXP 118
31556: IFFALSE 31625
31558: GO 31560
31560: DISABLE
31561: LD_INT 0
31563: PPUSH
31564: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31565: LD_ADDR_VAR 0 2
31569: PUSH
31570: LD_INT 22
31572: PUSH
31573: LD_OWVAR 2
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PPUSH
31582: CALL_OW 69
31586: ST_TO_ADDR
// if not tmp then
31587: LD_VAR 0 2
31591: NOT
31592: IFFALSE 31596
// exit ;
31594: GO 31625
// for i in tmp do
31596: LD_ADDR_VAR 0 1
31600: PUSH
31601: LD_VAR 0 2
31605: PUSH
31606: FOR_IN
31607: IFFALSE 31623
// SetLives ( i , 300 ) ;
31609: LD_VAR 0 1
31613: PPUSH
31614: LD_INT 300
31616: PPUSH
31617: CALL_OW 234
31621: GO 31606
31623: POP
31624: POP
// end ;
31625: PPOPN 2
31627: END
// every 0 0$1 trigger s60 do var i , tmp ;
31628: LD_EXP 119
31632: IFFALSE 31701
31634: GO 31636
31636: DISABLE
31637: LD_INT 0
31639: PPUSH
31640: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31641: LD_ADDR_VAR 0 2
31645: PUSH
31646: LD_INT 22
31648: PUSH
31649: LD_OWVAR 2
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PPUSH
31658: CALL_OW 69
31662: ST_TO_ADDR
// if not tmp then
31663: LD_VAR 0 2
31667: NOT
31668: IFFALSE 31672
// exit ;
31670: GO 31701
// for i in tmp do
31672: LD_ADDR_VAR 0 1
31676: PUSH
31677: LD_VAR 0 2
31681: PUSH
31682: FOR_IN
31683: IFFALSE 31699
// SetLives ( i , 600 ) ;
31685: LD_VAR 0 1
31689: PPUSH
31690: LD_INT 600
31692: PPUSH
31693: CALL_OW 234
31697: GO 31682
31699: POP
31700: POP
// end ;
31701: PPOPN 2
31703: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31704: LD_INT 0
31706: PPUSH
// case cmd of 301 :
31707: LD_VAR 0 1
31711: PUSH
31712: LD_INT 301
31714: DOUBLE
31715: EQUAL
31716: IFTRUE 31720
31718: GO 31752
31720: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31721: LD_VAR 0 6
31725: PPUSH
31726: LD_VAR 0 7
31730: PPUSH
31731: LD_VAR 0 8
31735: PPUSH
31736: LD_VAR 0 4
31740: PPUSH
31741: LD_VAR 0 5
31745: PPUSH
31746: CALL 32953 0 5
31750: GO 31873
31752: LD_INT 302
31754: DOUBLE
31755: EQUAL
31756: IFTRUE 31760
31758: GO 31797
31760: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31761: LD_VAR 0 6
31765: PPUSH
31766: LD_VAR 0 7
31770: PPUSH
31771: LD_VAR 0 8
31775: PPUSH
31776: LD_VAR 0 9
31780: PPUSH
31781: LD_VAR 0 4
31785: PPUSH
31786: LD_VAR 0 5
31790: PPUSH
31791: CALL 33044 0 6
31795: GO 31873
31797: LD_INT 303
31799: DOUBLE
31800: EQUAL
31801: IFTRUE 31805
31803: GO 31842
31805: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31806: LD_VAR 0 6
31810: PPUSH
31811: LD_VAR 0 7
31815: PPUSH
31816: LD_VAR 0 8
31820: PPUSH
31821: LD_VAR 0 9
31825: PPUSH
31826: LD_VAR 0 4
31830: PPUSH
31831: LD_VAR 0 5
31835: PPUSH
31836: CALL 31878 0 6
31840: GO 31873
31842: LD_INT 304
31844: DOUBLE
31845: EQUAL
31846: IFTRUE 31850
31848: GO 31872
31850: POP
// hHackTeleport ( unit , x , y ) ; end ;
31851: LD_VAR 0 2
31855: PPUSH
31856: LD_VAR 0 4
31860: PPUSH
31861: LD_VAR 0 5
31865: PPUSH
31866: CALL 33637 0 3
31870: GO 31873
31872: POP
// end ;
31873: LD_VAR 0 12
31877: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31878: LD_INT 0
31880: PPUSH
31881: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31882: LD_VAR 0 1
31886: PUSH
31887: LD_INT 1
31889: LESS
31890: PUSH
31891: LD_VAR 0 1
31895: PUSH
31896: LD_INT 3
31898: GREATER
31899: OR
31900: PUSH
31901: LD_VAR 0 5
31905: PPUSH
31906: LD_VAR 0 6
31910: PPUSH
31911: CALL_OW 428
31915: OR
31916: IFFALSE 31920
// exit ;
31918: GO 32640
// uc_side := your_side ;
31920: LD_ADDR_OWVAR 20
31924: PUSH
31925: LD_OWVAR 2
31929: ST_TO_ADDR
// uc_nation := nation ;
31930: LD_ADDR_OWVAR 21
31934: PUSH
31935: LD_VAR 0 1
31939: ST_TO_ADDR
// bc_level = 1 ;
31940: LD_ADDR_OWVAR 43
31944: PUSH
31945: LD_INT 1
31947: ST_TO_ADDR
// case btype of 1 :
31948: LD_VAR 0 2
31952: PUSH
31953: LD_INT 1
31955: DOUBLE
31956: EQUAL
31957: IFTRUE 31961
31959: GO 31972
31961: POP
// bc_type := b_depot ; 2 :
31962: LD_ADDR_OWVAR 42
31966: PUSH
31967: LD_INT 0
31969: ST_TO_ADDR
31970: GO 32584
31972: LD_INT 2
31974: DOUBLE
31975: EQUAL
31976: IFTRUE 31980
31978: GO 31991
31980: POP
// bc_type := b_warehouse ; 3 :
31981: LD_ADDR_OWVAR 42
31985: PUSH
31986: LD_INT 1
31988: ST_TO_ADDR
31989: GO 32584
31991: LD_INT 3
31993: DOUBLE
31994: EQUAL
31995: IFTRUE 31999
31997: GO 32010
31999: POP
// bc_type := b_lab ; 4 .. 9 :
32000: LD_ADDR_OWVAR 42
32004: PUSH
32005: LD_INT 6
32007: ST_TO_ADDR
32008: GO 32584
32010: LD_INT 4
32012: DOUBLE
32013: GREATEREQUAL
32014: IFFALSE 32022
32016: LD_INT 9
32018: DOUBLE
32019: LESSEQUAL
32020: IFTRUE 32024
32022: GO 32076
32024: POP
// begin bc_type := b_lab_half ;
32025: LD_ADDR_OWVAR 42
32029: PUSH
32030: LD_INT 7
32032: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32033: LD_ADDR_OWVAR 44
32037: PUSH
32038: LD_INT 10
32040: PUSH
32041: LD_INT 11
32043: PUSH
32044: LD_INT 12
32046: PUSH
32047: LD_INT 15
32049: PUSH
32050: LD_INT 14
32052: PUSH
32053: LD_INT 13
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: PUSH
32064: LD_VAR 0 2
32068: PUSH
32069: LD_INT 3
32071: MINUS
32072: ARRAY
32073: ST_TO_ADDR
// end ; 10 .. 13 :
32074: GO 32584
32076: LD_INT 10
32078: DOUBLE
32079: GREATEREQUAL
32080: IFFALSE 32088
32082: LD_INT 13
32084: DOUBLE
32085: LESSEQUAL
32086: IFTRUE 32090
32088: GO 32167
32090: POP
// begin bc_type := b_lab_full ;
32091: LD_ADDR_OWVAR 42
32095: PUSH
32096: LD_INT 8
32098: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32099: LD_ADDR_OWVAR 44
32103: PUSH
32104: LD_INT 10
32106: PUSH
32107: LD_INT 12
32109: PUSH
32110: LD_INT 14
32112: PUSH
32113: LD_INT 13
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: PUSH
32122: LD_VAR 0 2
32126: PUSH
32127: LD_INT 9
32129: MINUS
32130: ARRAY
32131: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32132: LD_ADDR_OWVAR 45
32136: PUSH
32137: LD_INT 11
32139: PUSH
32140: LD_INT 15
32142: PUSH
32143: LD_INT 12
32145: PUSH
32146: LD_INT 15
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: PUSH
32155: LD_VAR 0 2
32159: PUSH
32160: LD_INT 9
32162: MINUS
32163: ARRAY
32164: ST_TO_ADDR
// end ; 14 :
32165: GO 32584
32167: LD_INT 14
32169: DOUBLE
32170: EQUAL
32171: IFTRUE 32175
32173: GO 32186
32175: POP
// bc_type := b_workshop ; 15 :
32176: LD_ADDR_OWVAR 42
32180: PUSH
32181: LD_INT 2
32183: ST_TO_ADDR
32184: GO 32584
32186: LD_INT 15
32188: DOUBLE
32189: EQUAL
32190: IFTRUE 32194
32192: GO 32205
32194: POP
// bc_type := b_factory ; 16 :
32195: LD_ADDR_OWVAR 42
32199: PUSH
32200: LD_INT 3
32202: ST_TO_ADDR
32203: GO 32584
32205: LD_INT 16
32207: DOUBLE
32208: EQUAL
32209: IFTRUE 32213
32211: GO 32224
32213: POP
// bc_type := b_ext_gun ; 17 :
32214: LD_ADDR_OWVAR 42
32218: PUSH
32219: LD_INT 17
32221: ST_TO_ADDR
32222: GO 32584
32224: LD_INT 17
32226: DOUBLE
32227: EQUAL
32228: IFTRUE 32232
32230: GO 32260
32232: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32233: LD_ADDR_OWVAR 42
32237: PUSH
32238: LD_INT 19
32240: PUSH
32241: LD_INT 23
32243: PUSH
32244: LD_INT 19
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: LIST
32251: PUSH
32252: LD_VAR 0 1
32256: ARRAY
32257: ST_TO_ADDR
32258: GO 32584
32260: LD_INT 18
32262: DOUBLE
32263: EQUAL
32264: IFTRUE 32268
32266: GO 32279
32268: POP
// bc_type := b_ext_radar ; 19 :
32269: LD_ADDR_OWVAR 42
32273: PUSH
32274: LD_INT 20
32276: ST_TO_ADDR
32277: GO 32584
32279: LD_INT 19
32281: DOUBLE
32282: EQUAL
32283: IFTRUE 32287
32285: GO 32298
32287: POP
// bc_type := b_ext_radio ; 20 :
32288: LD_ADDR_OWVAR 42
32292: PUSH
32293: LD_INT 22
32295: ST_TO_ADDR
32296: GO 32584
32298: LD_INT 20
32300: DOUBLE
32301: EQUAL
32302: IFTRUE 32306
32304: GO 32317
32306: POP
// bc_type := b_ext_siberium ; 21 :
32307: LD_ADDR_OWVAR 42
32311: PUSH
32312: LD_INT 21
32314: ST_TO_ADDR
32315: GO 32584
32317: LD_INT 21
32319: DOUBLE
32320: EQUAL
32321: IFTRUE 32325
32323: GO 32336
32325: POP
// bc_type := b_ext_computer ; 22 :
32326: LD_ADDR_OWVAR 42
32330: PUSH
32331: LD_INT 24
32333: ST_TO_ADDR
32334: GO 32584
32336: LD_INT 22
32338: DOUBLE
32339: EQUAL
32340: IFTRUE 32344
32342: GO 32355
32344: POP
// bc_type := b_ext_track ; 23 :
32345: LD_ADDR_OWVAR 42
32349: PUSH
32350: LD_INT 16
32352: ST_TO_ADDR
32353: GO 32584
32355: LD_INT 23
32357: DOUBLE
32358: EQUAL
32359: IFTRUE 32363
32361: GO 32374
32363: POP
// bc_type := b_ext_laser ; 24 :
32364: LD_ADDR_OWVAR 42
32368: PUSH
32369: LD_INT 25
32371: ST_TO_ADDR
32372: GO 32584
32374: LD_INT 24
32376: DOUBLE
32377: EQUAL
32378: IFTRUE 32382
32380: GO 32393
32382: POP
// bc_type := b_control_tower ; 25 :
32383: LD_ADDR_OWVAR 42
32387: PUSH
32388: LD_INT 36
32390: ST_TO_ADDR
32391: GO 32584
32393: LD_INT 25
32395: DOUBLE
32396: EQUAL
32397: IFTRUE 32401
32399: GO 32412
32401: POP
// bc_type := b_breastwork ; 26 :
32402: LD_ADDR_OWVAR 42
32406: PUSH
32407: LD_INT 31
32409: ST_TO_ADDR
32410: GO 32584
32412: LD_INT 26
32414: DOUBLE
32415: EQUAL
32416: IFTRUE 32420
32418: GO 32431
32420: POP
// bc_type := b_bunker ; 27 :
32421: LD_ADDR_OWVAR 42
32425: PUSH
32426: LD_INT 32
32428: ST_TO_ADDR
32429: GO 32584
32431: LD_INT 27
32433: DOUBLE
32434: EQUAL
32435: IFTRUE 32439
32437: GO 32450
32439: POP
// bc_type := b_turret ; 28 :
32440: LD_ADDR_OWVAR 42
32444: PUSH
32445: LD_INT 33
32447: ST_TO_ADDR
32448: GO 32584
32450: LD_INT 28
32452: DOUBLE
32453: EQUAL
32454: IFTRUE 32458
32456: GO 32469
32458: POP
// bc_type := b_armoury ; 29 :
32459: LD_ADDR_OWVAR 42
32463: PUSH
32464: LD_INT 4
32466: ST_TO_ADDR
32467: GO 32584
32469: LD_INT 29
32471: DOUBLE
32472: EQUAL
32473: IFTRUE 32477
32475: GO 32488
32477: POP
// bc_type := b_barracks ; 30 :
32478: LD_ADDR_OWVAR 42
32482: PUSH
32483: LD_INT 5
32485: ST_TO_ADDR
32486: GO 32584
32488: LD_INT 30
32490: DOUBLE
32491: EQUAL
32492: IFTRUE 32496
32494: GO 32507
32496: POP
// bc_type := b_solar_power ; 31 :
32497: LD_ADDR_OWVAR 42
32501: PUSH
32502: LD_INT 27
32504: ST_TO_ADDR
32505: GO 32584
32507: LD_INT 31
32509: DOUBLE
32510: EQUAL
32511: IFTRUE 32515
32513: GO 32526
32515: POP
// bc_type := b_oil_power ; 32 :
32516: LD_ADDR_OWVAR 42
32520: PUSH
32521: LD_INT 26
32523: ST_TO_ADDR
32524: GO 32584
32526: LD_INT 32
32528: DOUBLE
32529: EQUAL
32530: IFTRUE 32534
32532: GO 32545
32534: POP
// bc_type := b_siberite_power ; 33 :
32535: LD_ADDR_OWVAR 42
32539: PUSH
32540: LD_INT 28
32542: ST_TO_ADDR
32543: GO 32584
32545: LD_INT 33
32547: DOUBLE
32548: EQUAL
32549: IFTRUE 32553
32551: GO 32564
32553: POP
// bc_type := b_oil_mine ; 34 :
32554: LD_ADDR_OWVAR 42
32558: PUSH
32559: LD_INT 29
32561: ST_TO_ADDR
32562: GO 32584
32564: LD_INT 34
32566: DOUBLE
32567: EQUAL
32568: IFTRUE 32572
32570: GO 32583
32572: POP
// bc_type := b_siberite_mine ; end ;
32573: LD_ADDR_OWVAR 42
32577: PUSH
32578: LD_INT 30
32580: ST_TO_ADDR
32581: GO 32584
32583: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32584: LD_ADDR_VAR 0 8
32588: PUSH
32589: LD_VAR 0 5
32593: PPUSH
32594: LD_VAR 0 6
32598: PPUSH
32599: LD_VAR 0 3
32603: PPUSH
32604: CALL_OW 47
32608: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32609: LD_OWVAR 42
32613: PUSH
32614: LD_INT 32
32616: PUSH
32617: LD_INT 33
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: IN
32624: IFFALSE 32640
// PlaceWeaponTurret ( b , weapon ) ;
32626: LD_VAR 0 8
32630: PPUSH
32631: LD_VAR 0 4
32635: PPUSH
32636: CALL_OW 431
// end ;
32640: LD_VAR 0 7
32644: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32645: LD_INT 0
32647: PPUSH
32648: PPUSH
32649: PPUSH
32650: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32651: LD_ADDR_VAR 0 4
32655: PUSH
32656: LD_INT 22
32658: PUSH
32659: LD_OWVAR 2
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 2
32670: PUSH
32671: LD_INT 30
32673: PUSH
32674: LD_INT 0
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 30
32683: PUSH
32684: LD_INT 1
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: LIST
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PPUSH
32700: CALL_OW 69
32704: ST_TO_ADDR
// if not tmp then
32705: LD_VAR 0 4
32709: NOT
32710: IFFALSE 32714
// exit ;
32712: GO 32773
// for i in tmp do
32714: LD_ADDR_VAR 0 2
32718: PUSH
32719: LD_VAR 0 4
32723: PUSH
32724: FOR_IN
32725: IFFALSE 32771
// for j = 1 to 3 do
32727: LD_ADDR_VAR 0 3
32731: PUSH
32732: DOUBLE
32733: LD_INT 1
32735: DEC
32736: ST_TO_ADDR
32737: LD_INT 3
32739: PUSH
32740: FOR_TO
32741: IFFALSE 32767
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32743: LD_VAR 0 2
32747: PPUSH
32748: CALL_OW 274
32752: PPUSH
32753: LD_VAR 0 3
32757: PPUSH
32758: LD_INT 99999
32760: PPUSH
32761: CALL_OW 277
32765: GO 32740
32767: POP
32768: POP
32769: GO 32724
32771: POP
32772: POP
// end ;
32773: LD_VAR 0 1
32777: RET
// export function hHackSetLevel10 ; var i , j ; begin
32778: LD_INT 0
32780: PPUSH
32781: PPUSH
32782: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32783: LD_ADDR_VAR 0 2
32787: PUSH
32788: LD_INT 21
32790: PUSH
32791: LD_INT 1
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PPUSH
32798: CALL_OW 69
32802: PUSH
32803: FOR_IN
32804: IFFALSE 32856
// if IsSelected ( i ) then
32806: LD_VAR 0 2
32810: PPUSH
32811: CALL_OW 306
32815: IFFALSE 32854
// begin for j := 1 to 4 do
32817: LD_ADDR_VAR 0 3
32821: PUSH
32822: DOUBLE
32823: LD_INT 1
32825: DEC
32826: ST_TO_ADDR
32827: LD_INT 4
32829: PUSH
32830: FOR_TO
32831: IFFALSE 32852
// SetSkill ( i , j , 10 ) ;
32833: LD_VAR 0 2
32837: PPUSH
32838: LD_VAR 0 3
32842: PPUSH
32843: LD_INT 10
32845: PPUSH
32846: CALL_OW 237
32850: GO 32830
32852: POP
32853: POP
// end ;
32854: GO 32803
32856: POP
32857: POP
// end ;
32858: LD_VAR 0 1
32862: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32863: LD_INT 0
32865: PPUSH
32866: PPUSH
32867: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32868: LD_ADDR_VAR 0 2
32872: PUSH
32873: LD_INT 22
32875: PUSH
32876: LD_OWVAR 2
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 21
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PPUSH
32899: CALL_OW 69
32903: PUSH
32904: FOR_IN
32905: IFFALSE 32946
// begin for j := 1 to 4 do
32907: LD_ADDR_VAR 0 3
32911: PUSH
32912: DOUBLE
32913: LD_INT 1
32915: DEC
32916: ST_TO_ADDR
32917: LD_INT 4
32919: PUSH
32920: FOR_TO
32921: IFFALSE 32942
// SetSkill ( i , j , 10 ) ;
32923: LD_VAR 0 2
32927: PPUSH
32928: LD_VAR 0 3
32932: PPUSH
32933: LD_INT 10
32935: PPUSH
32936: CALL_OW 237
32940: GO 32920
32942: POP
32943: POP
// end ;
32944: GO 32904
32946: POP
32947: POP
// end ;
32948: LD_VAR 0 1
32952: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32953: LD_INT 0
32955: PPUSH
// uc_side := your_side ;
32956: LD_ADDR_OWVAR 20
32960: PUSH
32961: LD_OWVAR 2
32965: ST_TO_ADDR
// uc_nation := nation ;
32966: LD_ADDR_OWVAR 21
32970: PUSH
32971: LD_VAR 0 1
32975: ST_TO_ADDR
// InitHc ;
32976: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32980: LD_INT 0
32982: PPUSH
32983: LD_VAR 0 2
32987: PPUSH
32988: LD_VAR 0 3
32992: PPUSH
32993: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32997: LD_VAR 0 4
33001: PPUSH
33002: LD_VAR 0 5
33006: PPUSH
33007: CALL_OW 428
33011: PUSH
33012: LD_INT 0
33014: EQUAL
33015: IFFALSE 33039
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33017: CALL_OW 44
33021: PPUSH
33022: LD_VAR 0 4
33026: PPUSH
33027: LD_VAR 0 5
33031: PPUSH
33032: LD_INT 1
33034: PPUSH
33035: CALL_OW 48
// end ;
33039: LD_VAR 0 6
33043: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33044: LD_INT 0
33046: PPUSH
33047: PPUSH
// uc_side := your_side ;
33048: LD_ADDR_OWVAR 20
33052: PUSH
33053: LD_OWVAR 2
33057: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33058: LD_VAR 0 1
33062: PUSH
33063: LD_INT 1
33065: PUSH
33066: LD_INT 2
33068: PUSH
33069: LD_INT 3
33071: PUSH
33072: LD_INT 4
33074: PUSH
33075: LD_INT 5
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: IN
33085: IFFALSE 33097
// uc_nation := nation_american else
33087: LD_ADDR_OWVAR 21
33091: PUSH
33092: LD_INT 1
33094: ST_TO_ADDR
33095: GO 33140
// if chassis in [ 11 , 12 , 13 , 14 ] then
33097: LD_VAR 0 1
33101: PUSH
33102: LD_INT 11
33104: PUSH
33105: LD_INT 12
33107: PUSH
33108: LD_INT 13
33110: PUSH
33111: LD_INT 14
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: IN
33120: IFFALSE 33132
// uc_nation := nation_arabian else
33122: LD_ADDR_OWVAR 21
33126: PUSH
33127: LD_INT 2
33129: ST_TO_ADDR
33130: GO 33140
// uc_nation := nation_russian ;
33132: LD_ADDR_OWVAR 21
33136: PUSH
33137: LD_INT 3
33139: ST_TO_ADDR
// vc_chassis := chassis ;
33140: LD_ADDR_OWVAR 37
33144: PUSH
33145: LD_VAR 0 1
33149: ST_TO_ADDR
// vc_engine := engine ;
33150: LD_ADDR_OWVAR 39
33154: PUSH
33155: LD_VAR 0 2
33159: ST_TO_ADDR
// vc_control := control ;
33160: LD_ADDR_OWVAR 38
33164: PUSH
33165: LD_VAR 0 3
33169: ST_TO_ADDR
// vc_weapon := weapon ;
33170: LD_ADDR_OWVAR 40
33174: PUSH
33175: LD_VAR 0 4
33179: ST_TO_ADDR
// un := CreateVehicle ;
33180: LD_ADDR_VAR 0 8
33184: PUSH
33185: CALL_OW 45
33189: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33190: LD_VAR 0 8
33194: PPUSH
33195: LD_INT 0
33197: PPUSH
33198: LD_INT 5
33200: PPUSH
33201: CALL_OW 12
33205: PPUSH
33206: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33210: LD_VAR 0 8
33214: PPUSH
33215: LD_VAR 0 5
33219: PPUSH
33220: LD_VAR 0 6
33224: PPUSH
33225: LD_INT 1
33227: PPUSH
33228: CALL_OW 48
// end ;
33232: LD_VAR 0 7
33236: RET
// export hInvincible ; every 1 do
33237: GO 33239
33239: DISABLE
// hInvincible := [ ] ;
33240: LD_ADDR_EXP 120
33244: PUSH
33245: EMPTY
33246: ST_TO_ADDR
33247: END
// every 10 do var i ;
33248: GO 33250
33250: DISABLE
33251: LD_INT 0
33253: PPUSH
// begin enable ;
33254: ENABLE
// if not hInvincible then
33255: LD_EXP 120
33259: NOT
33260: IFFALSE 33264
// exit ;
33262: GO 33308
// for i in hInvincible do
33264: LD_ADDR_VAR 0 1
33268: PUSH
33269: LD_EXP 120
33273: PUSH
33274: FOR_IN
33275: IFFALSE 33306
// if GetLives ( i ) < 1000 then
33277: LD_VAR 0 1
33281: PPUSH
33282: CALL_OW 256
33286: PUSH
33287: LD_INT 1000
33289: LESS
33290: IFFALSE 33304
// SetLives ( i , 1000 ) ;
33292: LD_VAR 0 1
33296: PPUSH
33297: LD_INT 1000
33299: PPUSH
33300: CALL_OW 234
33304: GO 33274
33306: POP
33307: POP
// end ;
33308: PPOPN 1
33310: END
// export function hHackInvincible ; var i ; begin
33311: LD_INT 0
33313: PPUSH
33314: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33315: LD_ADDR_VAR 0 2
33319: PUSH
33320: LD_INT 2
33322: PUSH
33323: LD_INT 21
33325: PUSH
33326: LD_INT 1
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 21
33335: PUSH
33336: LD_INT 2
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: LIST
33347: PPUSH
33348: CALL_OW 69
33352: PUSH
33353: FOR_IN
33354: IFFALSE 33415
// if IsSelected ( i ) then
33356: LD_VAR 0 2
33360: PPUSH
33361: CALL_OW 306
33365: IFFALSE 33413
// begin if i in hInvincible then
33367: LD_VAR 0 2
33371: PUSH
33372: LD_EXP 120
33376: IN
33377: IFFALSE 33397
// hInvincible := hInvincible diff i else
33379: LD_ADDR_EXP 120
33383: PUSH
33384: LD_EXP 120
33388: PUSH
33389: LD_VAR 0 2
33393: DIFF
33394: ST_TO_ADDR
33395: GO 33413
// hInvincible := hInvincible union i ;
33397: LD_ADDR_EXP 120
33401: PUSH
33402: LD_EXP 120
33406: PUSH
33407: LD_VAR 0 2
33411: UNION
33412: ST_TO_ADDR
// end ;
33413: GO 33353
33415: POP
33416: POP
// end ;
33417: LD_VAR 0 1
33421: RET
// export function hHackInvisible ; var i , j ; begin
33422: LD_INT 0
33424: PPUSH
33425: PPUSH
33426: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33427: LD_ADDR_VAR 0 2
33431: PUSH
33432: LD_INT 21
33434: PUSH
33435: LD_INT 1
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PPUSH
33442: CALL_OW 69
33446: PUSH
33447: FOR_IN
33448: IFFALSE 33472
// if IsSelected ( i ) then
33450: LD_VAR 0 2
33454: PPUSH
33455: CALL_OW 306
33459: IFFALSE 33470
// ComForceInvisible ( i ) ;
33461: LD_VAR 0 2
33465: PPUSH
33466: CALL_OW 496
33470: GO 33447
33472: POP
33473: POP
// end ;
33474: LD_VAR 0 1
33478: RET
// export function hHackChangeYourSide ; begin
33479: LD_INT 0
33481: PPUSH
// if your_side = 8 then
33482: LD_OWVAR 2
33486: PUSH
33487: LD_INT 8
33489: EQUAL
33490: IFFALSE 33502
// your_side := 0 else
33492: LD_ADDR_OWVAR 2
33496: PUSH
33497: LD_INT 0
33499: ST_TO_ADDR
33500: GO 33516
// your_side := your_side + 1 ;
33502: LD_ADDR_OWVAR 2
33506: PUSH
33507: LD_OWVAR 2
33511: PUSH
33512: LD_INT 1
33514: PLUS
33515: ST_TO_ADDR
// end ;
33516: LD_VAR 0 1
33520: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33521: LD_INT 0
33523: PPUSH
33524: PPUSH
33525: PPUSH
// for i in all_units do
33526: LD_ADDR_VAR 0 2
33530: PUSH
33531: LD_OWVAR 3
33535: PUSH
33536: FOR_IN
33537: IFFALSE 33615
// if IsSelected ( i ) then
33539: LD_VAR 0 2
33543: PPUSH
33544: CALL_OW 306
33548: IFFALSE 33613
// begin j := GetSide ( i ) ;
33550: LD_ADDR_VAR 0 3
33554: PUSH
33555: LD_VAR 0 2
33559: PPUSH
33560: CALL_OW 255
33564: ST_TO_ADDR
// if j = 8 then
33565: LD_VAR 0 3
33569: PUSH
33570: LD_INT 8
33572: EQUAL
33573: IFFALSE 33585
// j := 0 else
33575: LD_ADDR_VAR 0 3
33579: PUSH
33580: LD_INT 0
33582: ST_TO_ADDR
33583: GO 33599
// j := j + 1 ;
33585: LD_ADDR_VAR 0 3
33589: PUSH
33590: LD_VAR 0 3
33594: PUSH
33595: LD_INT 1
33597: PLUS
33598: ST_TO_ADDR
// SetSide ( i , j ) ;
33599: LD_VAR 0 2
33603: PPUSH
33604: LD_VAR 0 3
33608: PPUSH
33609: CALL_OW 235
// end ;
33613: GO 33536
33615: POP
33616: POP
// end ;
33617: LD_VAR 0 1
33621: RET
// export function hHackFog ; begin
33622: LD_INT 0
33624: PPUSH
// FogOff ( true ) ;
33625: LD_INT 1
33627: PPUSH
33628: CALL_OW 344
// end ;
33632: LD_VAR 0 1
33636: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33637: LD_INT 0
33639: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33640: LD_VAR 0 1
33644: PPUSH
33645: LD_VAR 0 2
33649: PPUSH
33650: LD_VAR 0 3
33654: PPUSH
33655: LD_INT 1
33657: PPUSH
33658: LD_INT 1
33660: PPUSH
33661: CALL_OW 483
// CenterOnXY ( x , y ) ;
33665: LD_VAR 0 2
33669: PPUSH
33670: LD_VAR 0 3
33674: PPUSH
33675: CALL_OW 84
// end ;
33679: LD_VAR 0 4
33683: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33684: LD_INT 0
33686: PPUSH
33687: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33688: LD_VAR 0 1
33692: NOT
33693: PUSH
33694: LD_VAR 0 2
33698: PPUSH
33699: LD_VAR 0 3
33703: PPUSH
33704: CALL_OW 488
33708: NOT
33709: OR
33710: PUSH
33711: LD_VAR 0 1
33715: PPUSH
33716: CALL_OW 266
33720: PUSH
33721: LD_INT 3
33723: NONEQUAL
33724: PUSH
33725: LD_VAR 0 1
33729: PPUSH
33730: CALL_OW 247
33734: PUSH
33735: LD_INT 1
33737: EQUAL
33738: NOT
33739: AND
33740: OR
33741: IFFALSE 33745
// exit ;
33743: GO 33894
// if GetType ( factory ) = unit_human then
33745: LD_VAR 0 1
33749: PPUSH
33750: CALL_OW 247
33754: PUSH
33755: LD_INT 1
33757: EQUAL
33758: IFFALSE 33775
// factory := IsInUnit ( factory ) ;
33760: LD_ADDR_VAR 0 1
33764: PUSH
33765: LD_VAR 0 1
33769: PPUSH
33770: CALL_OW 310
33774: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33775: LD_VAR 0 1
33779: PPUSH
33780: CALL_OW 266
33784: PUSH
33785: LD_INT 3
33787: NONEQUAL
33788: IFFALSE 33792
// exit ;
33790: GO 33894
// if HexInfo ( x , y ) = factory then
33792: LD_VAR 0 2
33796: PPUSH
33797: LD_VAR 0 3
33801: PPUSH
33802: CALL_OW 428
33806: PUSH
33807: LD_VAR 0 1
33811: EQUAL
33812: IFFALSE 33839
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33814: LD_ADDR_EXP 121
33818: PUSH
33819: LD_EXP 121
33823: PPUSH
33824: LD_VAR 0 1
33828: PPUSH
33829: LD_INT 0
33831: PPUSH
33832: CALL_OW 1
33836: ST_TO_ADDR
33837: GO 33890
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33839: LD_ADDR_EXP 121
33843: PUSH
33844: LD_EXP 121
33848: PPUSH
33849: LD_VAR 0 1
33853: PPUSH
33854: LD_VAR 0 1
33858: PPUSH
33859: CALL_OW 255
33863: PUSH
33864: LD_VAR 0 1
33868: PUSH
33869: LD_VAR 0 2
33873: PUSH
33874: LD_VAR 0 3
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: PPUSH
33885: CALL_OW 1
33889: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33890: CALL 33899 0 0
// end ;
33894: LD_VAR 0 4
33898: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33899: LD_INT 0
33901: PPUSH
33902: PPUSH
33903: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33904: LD_STRING resetFactoryWaypoint();
33906: PPUSH
33907: CALL_OW 559
// if factoryWaypoints then
33911: LD_EXP 121
33915: IFFALSE 34041
// begin list := PrepareArray ( factoryWaypoints ) ;
33917: LD_ADDR_VAR 0 3
33921: PUSH
33922: LD_EXP 121
33926: PPUSH
33927: CALL 80510 0 1
33931: ST_TO_ADDR
// for i := 1 to list do
33932: LD_ADDR_VAR 0 2
33936: PUSH
33937: DOUBLE
33938: LD_INT 1
33940: DEC
33941: ST_TO_ADDR
33942: LD_VAR 0 3
33946: PUSH
33947: FOR_TO
33948: IFFALSE 34039
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33950: LD_STRING setFactoryWaypointXY(
33952: PUSH
33953: LD_VAR 0 3
33957: PUSH
33958: LD_VAR 0 2
33962: ARRAY
33963: PUSH
33964: LD_INT 1
33966: ARRAY
33967: STR
33968: PUSH
33969: LD_STRING ,
33971: STR
33972: PUSH
33973: LD_VAR 0 3
33977: PUSH
33978: LD_VAR 0 2
33982: ARRAY
33983: PUSH
33984: LD_INT 2
33986: ARRAY
33987: STR
33988: PUSH
33989: LD_STRING ,
33991: STR
33992: PUSH
33993: LD_VAR 0 3
33997: PUSH
33998: LD_VAR 0 2
34002: ARRAY
34003: PUSH
34004: LD_INT 3
34006: ARRAY
34007: STR
34008: PUSH
34009: LD_STRING ,
34011: STR
34012: PUSH
34013: LD_VAR 0 3
34017: PUSH
34018: LD_VAR 0 2
34022: ARRAY
34023: PUSH
34024: LD_INT 4
34026: ARRAY
34027: STR
34028: PUSH
34029: LD_STRING )
34031: STR
34032: PPUSH
34033: CALL_OW 559
34037: GO 33947
34039: POP
34040: POP
// end ; end ;
34041: LD_VAR 0 1
34045: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34046: LD_INT 0
34048: PPUSH
// if HexInfo ( x , y ) = warehouse then
34049: LD_VAR 0 2
34053: PPUSH
34054: LD_VAR 0 3
34058: PPUSH
34059: CALL_OW 428
34063: PUSH
34064: LD_VAR 0 1
34068: EQUAL
34069: IFFALSE 34096
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34071: LD_ADDR_EXP 122
34075: PUSH
34076: LD_EXP 122
34080: PPUSH
34081: LD_VAR 0 1
34085: PPUSH
34086: LD_INT 0
34088: PPUSH
34089: CALL_OW 1
34093: ST_TO_ADDR
34094: GO 34147
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34096: LD_ADDR_EXP 122
34100: PUSH
34101: LD_EXP 122
34105: PPUSH
34106: LD_VAR 0 1
34110: PPUSH
34111: LD_VAR 0 1
34115: PPUSH
34116: CALL_OW 255
34120: PUSH
34121: LD_VAR 0 1
34125: PUSH
34126: LD_VAR 0 2
34130: PUSH
34131: LD_VAR 0 3
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: PPUSH
34142: CALL_OW 1
34146: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34147: CALL 34156 0 0
// end ;
34151: LD_VAR 0 4
34155: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34156: LD_INT 0
34158: PPUSH
34159: PPUSH
34160: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34161: LD_STRING resetWarehouseGatheringPoints();
34163: PPUSH
34164: CALL_OW 559
// if warehouseGatheringPoints then
34168: LD_EXP 122
34172: IFFALSE 34298
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34174: LD_ADDR_VAR 0 3
34178: PUSH
34179: LD_EXP 122
34183: PPUSH
34184: CALL 80510 0 1
34188: ST_TO_ADDR
// for i := 1 to list do
34189: LD_ADDR_VAR 0 2
34193: PUSH
34194: DOUBLE
34195: LD_INT 1
34197: DEC
34198: ST_TO_ADDR
34199: LD_VAR 0 3
34203: PUSH
34204: FOR_TO
34205: IFFALSE 34296
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34207: LD_STRING setWarehouseGatheringPointXY(
34209: PUSH
34210: LD_VAR 0 3
34214: PUSH
34215: LD_VAR 0 2
34219: ARRAY
34220: PUSH
34221: LD_INT 1
34223: ARRAY
34224: STR
34225: PUSH
34226: LD_STRING ,
34228: STR
34229: PUSH
34230: LD_VAR 0 3
34234: PUSH
34235: LD_VAR 0 2
34239: ARRAY
34240: PUSH
34241: LD_INT 2
34243: ARRAY
34244: STR
34245: PUSH
34246: LD_STRING ,
34248: STR
34249: PUSH
34250: LD_VAR 0 3
34254: PUSH
34255: LD_VAR 0 2
34259: ARRAY
34260: PUSH
34261: LD_INT 3
34263: ARRAY
34264: STR
34265: PUSH
34266: LD_STRING ,
34268: STR
34269: PUSH
34270: LD_VAR 0 3
34274: PUSH
34275: LD_VAR 0 2
34279: ARRAY
34280: PUSH
34281: LD_INT 4
34283: ARRAY
34284: STR
34285: PUSH
34286: LD_STRING )
34288: STR
34289: PPUSH
34290: CALL_OW 559
34294: GO 34204
34296: POP
34297: POP
// end ; end ;
34298: LD_VAR 0 1
34302: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34303: LD_EXP 122
34307: IFFALSE 34992
34309: GO 34311
34311: DISABLE
34312: LD_INT 0
34314: PPUSH
34315: PPUSH
34316: PPUSH
34317: PPUSH
34318: PPUSH
34319: PPUSH
34320: PPUSH
34321: PPUSH
34322: PPUSH
// begin enable ;
34323: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34324: LD_ADDR_VAR 0 3
34328: PUSH
34329: LD_EXP 122
34333: PPUSH
34334: CALL 80510 0 1
34338: ST_TO_ADDR
// if not list then
34339: LD_VAR 0 3
34343: NOT
34344: IFFALSE 34348
// exit ;
34346: GO 34992
// for i := 1 to list do
34348: LD_ADDR_VAR 0 1
34352: PUSH
34353: DOUBLE
34354: LD_INT 1
34356: DEC
34357: ST_TO_ADDR
34358: LD_VAR 0 3
34362: PUSH
34363: FOR_TO
34364: IFFALSE 34990
// begin depot := list [ i ] [ 2 ] ;
34366: LD_ADDR_VAR 0 8
34370: PUSH
34371: LD_VAR 0 3
34375: PUSH
34376: LD_VAR 0 1
34380: ARRAY
34381: PUSH
34382: LD_INT 2
34384: ARRAY
34385: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34386: LD_ADDR_VAR 0 5
34390: PUSH
34391: LD_VAR 0 3
34395: PUSH
34396: LD_VAR 0 1
34400: ARRAY
34401: PUSH
34402: LD_INT 1
34404: ARRAY
34405: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34406: LD_VAR 0 8
34410: PPUSH
34411: CALL_OW 301
34415: PUSH
34416: LD_VAR 0 5
34420: PUSH
34421: LD_VAR 0 8
34425: PPUSH
34426: CALL_OW 255
34430: NONEQUAL
34431: OR
34432: IFFALSE 34461
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34434: LD_ADDR_EXP 122
34438: PUSH
34439: LD_EXP 122
34443: PPUSH
34444: LD_VAR 0 8
34448: PPUSH
34449: LD_INT 0
34451: PPUSH
34452: CALL_OW 1
34456: ST_TO_ADDR
// exit ;
34457: POP
34458: POP
34459: GO 34992
// end ; x := list [ i ] [ 3 ] ;
34461: LD_ADDR_VAR 0 6
34465: PUSH
34466: LD_VAR 0 3
34470: PUSH
34471: LD_VAR 0 1
34475: ARRAY
34476: PUSH
34477: LD_INT 3
34479: ARRAY
34480: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34481: LD_ADDR_VAR 0 7
34485: PUSH
34486: LD_VAR 0 3
34490: PUSH
34491: LD_VAR 0 1
34495: ARRAY
34496: PUSH
34497: LD_INT 4
34499: ARRAY
34500: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34501: LD_ADDR_VAR 0 9
34505: PUSH
34506: LD_VAR 0 6
34510: PPUSH
34511: LD_VAR 0 7
34515: PPUSH
34516: LD_INT 16
34518: PPUSH
34519: CALL 79098 0 3
34523: ST_TO_ADDR
// if not cratesNearbyPoint then
34524: LD_VAR 0 9
34528: NOT
34529: IFFALSE 34535
// exit ;
34531: POP
34532: POP
34533: GO 34992
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34535: LD_ADDR_VAR 0 4
34539: PUSH
34540: LD_INT 22
34542: PUSH
34543: LD_VAR 0 5
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 3
34554: PUSH
34555: LD_INT 60
34557: PUSH
34558: EMPTY
34559: LIST
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 91
34567: PUSH
34568: LD_VAR 0 8
34572: PUSH
34573: LD_INT 6
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 2
34583: PUSH
34584: LD_INT 25
34586: PUSH
34587: LD_INT 2
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 25
34596: PUSH
34597: LD_INT 16
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: LIST
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: PPUSH
34615: CALL_OW 69
34619: PUSH
34620: LD_VAR 0 8
34624: PPUSH
34625: CALL_OW 313
34629: PPUSH
34630: LD_INT 3
34632: PUSH
34633: LD_INT 60
34635: PUSH
34636: EMPTY
34637: LIST
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 2
34645: PUSH
34646: LD_INT 25
34648: PUSH
34649: LD_INT 2
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 25
34658: PUSH
34659: LD_INT 16
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: LIST
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PPUSH
34675: CALL_OW 72
34679: UNION
34680: ST_TO_ADDR
// if tmp then
34681: LD_VAR 0 4
34685: IFFALSE 34765
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34687: LD_ADDR_VAR 0 4
34691: PUSH
34692: LD_VAR 0 4
34696: PPUSH
34697: LD_INT 3
34699: PPUSH
34700: CALL 77067 0 2
34704: ST_TO_ADDR
// for j in tmp do
34705: LD_ADDR_VAR 0 2
34709: PUSH
34710: LD_VAR 0 4
34714: PUSH
34715: FOR_IN
34716: IFFALSE 34759
// begin if IsInUnit ( j ) then
34718: LD_VAR 0 2
34722: PPUSH
34723: CALL_OW 310
34727: IFFALSE 34738
// ComExit ( j ) ;
34729: LD_VAR 0 2
34733: PPUSH
34734: CALL 77150 0 1
// AddComCollect ( j , x , y ) ;
34738: LD_VAR 0 2
34742: PPUSH
34743: LD_VAR 0 6
34747: PPUSH
34748: LD_VAR 0 7
34752: PPUSH
34753: CALL_OW 177
// end ;
34757: GO 34715
34759: POP
34760: POP
// exit ;
34761: POP
34762: POP
34763: GO 34992
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34765: LD_ADDR_VAR 0 4
34769: PUSH
34770: LD_INT 22
34772: PUSH
34773: LD_VAR 0 5
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 91
34784: PUSH
34785: LD_VAR 0 8
34789: PUSH
34790: LD_INT 8
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 2
34800: PUSH
34801: LD_INT 34
34803: PUSH
34804: LD_INT 12
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 34
34813: PUSH
34814: LD_INT 51
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 34
34823: PUSH
34824: LD_INT 32
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 34
34833: PUSH
34834: LD_INT 89
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: LIST
34852: PPUSH
34853: CALL_OW 69
34857: ST_TO_ADDR
// if tmp then
34858: LD_VAR 0 4
34862: IFFALSE 34988
// begin for j in tmp do
34864: LD_ADDR_VAR 0 2
34868: PUSH
34869: LD_VAR 0 4
34873: PUSH
34874: FOR_IN
34875: IFFALSE 34986
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34877: LD_VAR 0 2
34881: PPUSH
34882: CALL_OW 262
34886: PUSH
34887: LD_INT 3
34889: EQUAL
34890: PUSH
34891: LD_VAR 0 2
34895: PPUSH
34896: CALL_OW 261
34900: PUSH
34901: LD_INT 20
34903: GREATER
34904: OR
34905: PUSH
34906: LD_VAR 0 2
34910: PPUSH
34911: CALL_OW 314
34915: NOT
34916: AND
34917: PUSH
34918: LD_VAR 0 2
34922: PPUSH
34923: CALL_OW 263
34927: PUSH
34928: LD_INT 1
34930: NONEQUAL
34931: PUSH
34932: LD_VAR 0 2
34936: PPUSH
34937: CALL_OW 311
34941: OR
34942: AND
34943: IFFALSE 34984
// begin ComCollect ( j , x , y ) ;
34945: LD_VAR 0 2
34949: PPUSH
34950: LD_VAR 0 6
34954: PPUSH
34955: LD_VAR 0 7
34959: PPUSH
34960: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34964: LD_VAR 0 2
34968: PPUSH
34969: LD_VAR 0 8
34973: PPUSH
34974: CALL_OW 172
// exit ;
34978: POP
34979: POP
34980: POP
34981: POP
34982: GO 34992
// end ;
34984: GO 34874
34986: POP
34987: POP
// end ; end ;
34988: GO 34363
34990: POP
34991: POP
// end ; end_of_file
34992: PPOPN 9
34994: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34995: LD_INT 0
34997: PPUSH
34998: PPUSH
34999: PPUSH
35000: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35001: LD_VAR 0 1
35005: PPUSH
35006: CALL_OW 264
35010: PUSH
35011: LD_INT 91
35013: EQUAL
35014: IFFALSE 35086
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35016: LD_INT 68
35018: PPUSH
35019: LD_VAR 0 1
35023: PPUSH
35024: CALL_OW 255
35028: PPUSH
35029: CALL_OW 321
35033: PUSH
35034: LD_INT 2
35036: EQUAL
35037: IFFALSE 35049
// eff := 70 else
35039: LD_ADDR_VAR 0 4
35043: PUSH
35044: LD_INT 70
35046: ST_TO_ADDR
35047: GO 35057
// eff := 30 ;
35049: LD_ADDR_VAR 0 4
35053: PUSH
35054: LD_INT 30
35056: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35057: LD_VAR 0 1
35061: PPUSH
35062: CALL_OW 250
35066: PPUSH
35067: LD_VAR 0 1
35071: PPUSH
35072: CALL_OW 251
35076: PPUSH
35077: LD_VAR 0 4
35081: PPUSH
35082: CALL_OW 495
// end ; end ;
35086: LD_VAR 0 2
35090: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35091: LD_INT 0
35093: PPUSH
// end ;
35094: LD_VAR 0 4
35098: RET
// export function SOS_Command ( cmd ) ; begin
35099: LD_INT 0
35101: PPUSH
// end ;
35102: LD_VAR 0 2
35106: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35107: LD_INT 0
35109: PPUSH
// end ;
35110: LD_VAR 0 6
35114: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35115: LD_INT 0
35117: PPUSH
35118: PPUSH
// if not vehicle or not factory then
35119: LD_VAR 0 1
35123: NOT
35124: PUSH
35125: LD_VAR 0 2
35129: NOT
35130: OR
35131: IFFALSE 35135
// exit ;
35133: GO 35366
// if factoryWaypoints >= factory then
35135: LD_EXP 121
35139: PUSH
35140: LD_VAR 0 2
35144: GREATEREQUAL
35145: IFFALSE 35366
// if factoryWaypoints [ factory ] then
35147: LD_EXP 121
35151: PUSH
35152: LD_VAR 0 2
35156: ARRAY
35157: IFFALSE 35366
// begin if GetControl ( vehicle ) = control_manual then
35159: LD_VAR 0 1
35163: PPUSH
35164: CALL_OW 263
35168: PUSH
35169: LD_INT 1
35171: EQUAL
35172: IFFALSE 35253
// begin driver := IsDrivenBy ( vehicle ) ;
35174: LD_ADDR_VAR 0 4
35178: PUSH
35179: LD_VAR 0 1
35183: PPUSH
35184: CALL_OW 311
35188: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35189: LD_VAR 0 4
35193: PPUSH
35194: LD_EXP 121
35198: PUSH
35199: LD_VAR 0 2
35203: ARRAY
35204: PUSH
35205: LD_INT 3
35207: ARRAY
35208: PPUSH
35209: LD_EXP 121
35213: PUSH
35214: LD_VAR 0 2
35218: ARRAY
35219: PUSH
35220: LD_INT 4
35222: ARRAY
35223: PPUSH
35224: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35228: LD_VAR 0 4
35232: PPUSH
35233: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35237: LD_VAR 0 4
35241: PPUSH
35242: LD_VAR 0 2
35246: PPUSH
35247: CALL_OW 180
// end else
35251: GO 35366
// if GetControl ( vehicle ) = control_remote then
35253: LD_VAR 0 1
35257: PPUSH
35258: CALL_OW 263
35262: PUSH
35263: LD_INT 2
35265: EQUAL
35266: IFFALSE 35327
// begin wait ( 0 0$2 ) ;
35268: LD_INT 70
35270: PPUSH
35271: CALL_OW 67
// if Connect ( vehicle ) then
35275: LD_VAR 0 1
35279: PPUSH
35280: CALL 47390 0 1
35284: IFFALSE 35325
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35286: LD_VAR 0 1
35290: PPUSH
35291: LD_EXP 121
35295: PUSH
35296: LD_VAR 0 2
35300: ARRAY
35301: PUSH
35302: LD_INT 3
35304: ARRAY
35305: PPUSH
35306: LD_EXP 121
35310: PUSH
35311: LD_VAR 0 2
35315: ARRAY
35316: PUSH
35317: LD_INT 4
35319: ARRAY
35320: PPUSH
35321: CALL_OW 171
// end else
35325: GO 35366
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35327: LD_VAR 0 1
35331: PPUSH
35332: LD_EXP 121
35336: PUSH
35337: LD_VAR 0 2
35341: ARRAY
35342: PUSH
35343: LD_INT 3
35345: ARRAY
35346: PPUSH
35347: LD_EXP 121
35351: PUSH
35352: LD_VAR 0 2
35356: ARRAY
35357: PUSH
35358: LD_INT 4
35360: ARRAY
35361: PPUSH
35362: CALL_OW 171
// end ; end ;
35366: LD_VAR 0 3
35370: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35371: LD_INT 0
35373: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35374: LD_VAR 0 1
35378: PUSH
35379: LD_INT 250
35381: EQUAL
35382: PUSH
35383: LD_VAR 0 2
35387: PPUSH
35388: CALL_OW 264
35392: PUSH
35393: LD_INT 81
35395: EQUAL
35396: AND
35397: IFFALSE 35418
// MinerPlaceMine ( unit , x , y ) ;
35399: LD_VAR 0 2
35403: PPUSH
35404: LD_VAR 0 4
35408: PPUSH
35409: LD_VAR 0 5
35413: PPUSH
35414: CALL 37803 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35418: LD_VAR 0 1
35422: PUSH
35423: LD_INT 251
35425: EQUAL
35426: PUSH
35427: LD_VAR 0 2
35431: PPUSH
35432: CALL_OW 264
35436: PUSH
35437: LD_INT 81
35439: EQUAL
35440: AND
35441: IFFALSE 35462
// MinerDetonateMine ( unit , x , y ) ;
35443: LD_VAR 0 2
35447: PPUSH
35448: LD_VAR 0 4
35452: PPUSH
35453: LD_VAR 0 5
35457: PPUSH
35458: CALL 38078 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35462: LD_VAR 0 1
35466: PUSH
35467: LD_INT 252
35469: EQUAL
35470: PUSH
35471: LD_VAR 0 2
35475: PPUSH
35476: CALL_OW 264
35480: PUSH
35481: LD_INT 81
35483: EQUAL
35484: AND
35485: IFFALSE 35506
// MinerCreateMinefield ( unit , x , y ) ;
35487: LD_VAR 0 2
35491: PPUSH
35492: LD_VAR 0 4
35496: PPUSH
35497: LD_VAR 0 5
35501: PPUSH
35502: CALL 38495 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35506: LD_VAR 0 1
35510: PUSH
35511: LD_INT 253
35513: EQUAL
35514: PUSH
35515: LD_VAR 0 2
35519: PPUSH
35520: CALL_OW 257
35524: PUSH
35525: LD_INT 5
35527: EQUAL
35528: AND
35529: IFFALSE 35550
// ComBinocular ( unit , x , y ) ;
35531: LD_VAR 0 2
35535: PPUSH
35536: LD_VAR 0 4
35540: PPUSH
35541: LD_VAR 0 5
35545: PPUSH
35546: CALL 38864 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35550: LD_VAR 0 1
35554: PUSH
35555: LD_INT 254
35557: EQUAL
35558: PUSH
35559: LD_VAR 0 2
35563: PPUSH
35564: CALL_OW 264
35568: PUSH
35569: LD_INT 99
35571: EQUAL
35572: AND
35573: PUSH
35574: LD_VAR 0 3
35578: PPUSH
35579: CALL_OW 263
35583: PUSH
35584: LD_INT 3
35586: EQUAL
35587: AND
35588: IFFALSE 35604
// HackDestroyVehicle ( unit , selectedUnit ) ;
35590: LD_VAR 0 2
35594: PPUSH
35595: LD_VAR 0 3
35599: PPUSH
35600: CALL 37167 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35604: LD_VAR 0 1
35608: PUSH
35609: LD_INT 255
35611: EQUAL
35612: PUSH
35613: LD_VAR 0 2
35617: PPUSH
35618: CALL_OW 264
35622: PUSH
35623: LD_INT 14
35625: PUSH
35626: LD_INT 53
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: IN
35633: AND
35634: PUSH
35635: LD_VAR 0 4
35639: PPUSH
35640: LD_VAR 0 5
35644: PPUSH
35645: CALL_OW 488
35649: AND
35650: IFFALSE 35674
// CutTreeXYR ( unit , x , y , 12 ) ;
35652: LD_VAR 0 2
35656: PPUSH
35657: LD_VAR 0 4
35661: PPUSH
35662: LD_VAR 0 5
35666: PPUSH
35667: LD_INT 12
35669: PPUSH
35670: CALL 35737 0 4
// if cmd = 256 then
35674: LD_VAR 0 1
35678: PUSH
35679: LD_INT 256
35681: EQUAL
35682: IFFALSE 35703
// SetFactoryWaypoint ( unit , x , y ) ;
35684: LD_VAR 0 2
35688: PPUSH
35689: LD_VAR 0 4
35693: PPUSH
35694: LD_VAR 0 5
35698: PPUSH
35699: CALL 33684 0 3
// if cmd = 257 then
35703: LD_VAR 0 1
35707: PUSH
35708: LD_INT 257
35710: EQUAL
35711: IFFALSE 35732
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35713: LD_VAR 0 2
35717: PPUSH
35718: LD_VAR 0 4
35722: PPUSH
35723: LD_VAR 0 5
35727: PPUSH
35728: CALL 34046 0 3
// end ;
35732: LD_VAR 0 6
35736: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35737: LD_INT 0
35739: PPUSH
35740: PPUSH
35741: PPUSH
35742: PPUSH
35743: PPUSH
35744: PPUSH
35745: PPUSH
35746: PPUSH
35747: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35748: LD_VAR 0 1
35752: NOT
35753: PUSH
35754: LD_VAR 0 2
35758: PPUSH
35759: LD_VAR 0 3
35763: PPUSH
35764: CALL_OW 488
35768: NOT
35769: OR
35770: PUSH
35771: LD_VAR 0 4
35775: NOT
35776: OR
35777: IFFALSE 35781
// exit ;
35779: GO 36121
// list := [ ] ;
35781: LD_ADDR_VAR 0 13
35785: PUSH
35786: EMPTY
35787: ST_TO_ADDR
// if x - r < 0 then
35788: LD_VAR 0 2
35792: PUSH
35793: LD_VAR 0 4
35797: MINUS
35798: PUSH
35799: LD_INT 0
35801: LESS
35802: IFFALSE 35814
// min_x := 0 else
35804: LD_ADDR_VAR 0 7
35808: PUSH
35809: LD_INT 0
35811: ST_TO_ADDR
35812: GO 35830
// min_x := x - r ;
35814: LD_ADDR_VAR 0 7
35818: PUSH
35819: LD_VAR 0 2
35823: PUSH
35824: LD_VAR 0 4
35828: MINUS
35829: ST_TO_ADDR
// if y - r < 0 then
35830: LD_VAR 0 3
35834: PUSH
35835: LD_VAR 0 4
35839: MINUS
35840: PUSH
35841: LD_INT 0
35843: LESS
35844: IFFALSE 35856
// min_y := 0 else
35846: LD_ADDR_VAR 0 8
35850: PUSH
35851: LD_INT 0
35853: ST_TO_ADDR
35854: GO 35872
// min_y := y - r ;
35856: LD_ADDR_VAR 0 8
35860: PUSH
35861: LD_VAR 0 3
35865: PUSH
35866: LD_VAR 0 4
35870: MINUS
35871: ST_TO_ADDR
// max_x := x + r ;
35872: LD_ADDR_VAR 0 9
35876: PUSH
35877: LD_VAR 0 2
35881: PUSH
35882: LD_VAR 0 4
35886: PLUS
35887: ST_TO_ADDR
// max_y := y + r ;
35888: LD_ADDR_VAR 0 10
35892: PUSH
35893: LD_VAR 0 3
35897: PUSH
35898: LD_VAR 0 4
35902: PLUS
35903: ST_TO_ADDR
// for _x = min_x to max_x do
35904: LD_ADDR_VAR 0 11
35908: PUSH
35909: DOUBLE
35910: LD_VAR 0 7
35914: DEC
35915: ST_TO_ADDR
35916: LD_VAR 0 9
35920: PUSH
35921: FOR_TO
35922: IFFALSE 36039
// for _y = min_y to max_y do
35924: LD_ADDR_VAR 0 12
35928: PUSH
35929: DOUBLE
35930: LD_VAR 0 8
35934: DEC
35935: ST_TO_ADDR
35936: LD_VAR 0 10
35940: PUSH
35941: FOR_TO
35942: IFFALSE 36035
// begin if not ValidHex ( _x , _y ) then
35944: LD_VAR 0 11
35948: PPUSH
35949: LD_VAR 0 12
35953: PPUSH
35954: CALL_OW 488
35958: NOT
35959: IFFALSE 35963
// continue ;
35961: GO 35941
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35963: LD_VAR 0 11
35967: PPUSH
35968: LD_VAR 0 12
35972: PPUSH
35973: CALL_OW 351
35977: PUSH
35978: LD_VAR 0 11
35982: PPUSH
35983: LD_VAR 0 12
35987: PPUSH
35988: CALL_OW 554
35992: AND
35993: IFFALSE 36033
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35995: LD_ADDR_VAR 0 13
35999: PUSH
36000: LD_VAR 0 13
36004: PPUSH
36005: LD_VAR 0 13
36009: PUSH
36010: LD_INT 1
36012: PLUS
36013: PPUSH
36014: LD_VAR 0 11
36018: PUSH
36019: LD_VAR 0 12
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PPUSH
36028: CALL_OW 2
36032: ST_TO_ADDR
// end ;
36033: GO 35941
36035: POP
36036: POP
36037: GO 35921
36039: POP
36040: POP
// if not list then
36041: LD_VAR 0 13
36045: NOT
36046: IFFALSE 36050
// exit ;
36048: GO 36121
// for i in list do
36050: LD_ADDR_VAR 0 6
36054: PUSH
36055: LD_VAR 0 13
36059: PUSH
36060: FOR_IN
36061: IFFALSE 36119
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36063: LD_VAR 0 1
36067: PPUSH
36068: LD_STRING M
36070: PUSH
36071: LD_VAR 0 6
36075: PUSH
36076: LD_INT 1
36078: ARRAY
36079: PUSH
36080: LD_VAR 0 6
36084: PUSH
36085: LD_INT 2
36087: ARRAY
36088: PUSH
36089: LD_INT 0
36091: PUSH
36092: LD_INT 0
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: PUSH
36110: EMPTY
36111: LIST
36112: PPUSH
36113: CALL_OW 447
36117: GO 36060
36119: POP
36120: POP
// end ;
36121: LD_VAR 0 5
36125: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36126: LD_EXP 124
36130: NOT
36131: IFFALSE 36181
36133: GO 36135
36135: DISABLE
// begin initHack := true ;
36136: LD_ADDR_EXP 124
36140: PUSH
36141: LD_INT 1
36143: ST_TO_ADDR
// hackTanks := [ ] ;
36144: LD_ADDR_EXP 125
36148: PUSH
36149: EMPTY
36150: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36151: LD_ADDR_EXP 126
36155: PUSH
36156: EMPTY
36157: ST_TO_ADDR
// hackLimit := 3 ;
36158: LD_ADDR_EXP 127
36162: PUSH
36163: LD_INT 3
36165: ST_TO_ADDR
// hackDist := 12 ;
36166: LD_ADDR_EXP 128
36170: PUSH
36171: LD_INT 12
36173: ST_TO_ADDR
// hackCounter := [ ] ;
36174: LD_ADDR_EXP 129
36178: PUSH
36179: EMPTY
36180: ST_TO_ADDR
// end ;
36181: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36182: LD_EXP 124
36186: PUSH
36187: LD_INT 34
36189: PUSH
36190: LD_INT 99
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PPUSH
36197: CALL_OW 69
36201: AND
36202: IFFALSE 36455
36204: GO 36206
36206: DISABLE
36207: LD_INT 0
36209: PPUSH
36210: PPUSH
// begin enable ;
36211: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36212: LD_ADDR_VAR 0 1
36216: PUSH
36217: LD_INT 34
36219: PUSH
36220: LD_INT 99
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PPUSH
36227: CALL_OW 69
36231: PUSH
36232: FOR_IN
36233: IFFALSE 36453
// begin if not i in hackTanks then
36235: LD_VAR 0 1
36239: PUSH
36240: LD_EXP 125
36244: IN
36245: NOT
36246: IFFALSE 36329
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36248: LD_ADDR_EXP 125
36252: PUSH
36253: LD_EXP 125
36257: PPUSH
36258: LD_EXP 125
36262: PUSH
36263: LD_INT 1
36265: PLUS
36266: PPUSH
36267: LD_VAR 0 1
36271: PPUSH
36272: CALL_OW 1
36276: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36277: LD_ADDR_EXP 126
36281: PUSH
36282: LD_EXP 126
36286: PPUSH
36287: LD_EXP 126
36291: PUSH
36292: LD_INT 1
36294: PLUS
36295: PPUSH
36296: EMPTY
36297: PPUSH
36298: CALL_OW 1
36302: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36303: LD_ADDR_EXP 129
36307: PUSH
36308: LD_EXP 129
36312: PPUSH
36313: LD_EXP 129
36317: PUSH
36318: LD_INT 1
36320: PLUS
36321: PPUSH
36322: EMPTY
36323: PPUSH
36324: CALL_OW 1
36328: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36329: LD_VAR 0 1
36333: PPUSH
36334: CALL_OW 302
36338: NOT
36339: IFFALSE 36352
// begin HackUnlinkAll ( i ) ;
36341: LD_VAR 0 1
36345: PPUSH
36346: CALL 36458 0 1
// continue ;
36350: GO 36232
// end ; HackCheckCapturedStatus ( i ) ;
36352: LD_VAR 0 1
36356: PPUSH
36357: CALL 36901 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36361: LD_ADDR_VAR 0 2
36365: PUSH
36366: LD_INT 81
36368: PUSH
36369: LD_VAR 0 1
36373: PPUSH
36374: CALL_OW 255
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 33
36385: PUSH
36386: LD_INT 3
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 91
36395: PUSH
36396: LD_VAR 0 1
36400: PUSH
36401: LD_EXP 128
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 50
36413: PUSH
36414: EMPTY
36415: LIST
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: PPUSH
36423: CALL_OW 69
36427: ST_TO_ADDR
// if not tmp then
36428: LD_VAR 0 2
36432: NOT
36433: IFFALSE 36437
// continue ;
36435: GO 36232
// HackLink ( i , tmp ) ;
36437: LD_VAR 0 1
36441: PPUSH
36442: LD_VAR 0 2
36446: PPUSH
36447: CALL 36594 0 2
// end ;
36451: GO 36232
36453: POP
36454: POP
// end ;
36455: PPOPN 2
36457: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36458: LD_INT 0
36460: PPUSH
36461: PPUSH
36462: PPUSH
// if not hack in hackTanks then
36463: LD_VAR 0 1
36467: PUSH
36468: LD_EXP 125
36472: IN
36473: NOT
36474: IFFALSE 36478
// exit ;
36476: GO 36589
// index := GetElementIndex ( hackTanks , hack ) ;
36478: LD_ADDR_VAR 0 4
36482: PUSH
36483: LD_EXP 125
36487: PPUSH
36488: LD_VAR 0 1
36492: PPUSH
36493: CALL 44206 0 2
36497: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36498: LD_EXP 126
36502: PUSH
36503: LD_VAR 0 4
36507: ARRAY
36508: IFFALSE 36589
// begin for i in hackTanksCaptured [ index ] do
36510: LD_ADDR_VAR 0 3
36514: PUSH
36515: LD_EXP 126
36519: PUSH
36520: LD_VAR 0 4
36524: ARRAY
36525: PUSH
36526: FOR_IN
36527: IFFALSE 36553
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36529: LD_VAR 0 3
36533: PUSH
36534: LD_INT 1
36536: ARRAY
36537: PPUSH
36538: LD_VAR 0 3
36542: PUSH
36543: LD_INT 2
36545: ARRAY
36546: PPUSH
36547: CALL_OW 235
36551: GO 36526
36553: POP
36554: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36555: LD_ADDR_EXP 126
36559: PUSH
36560: LD_EXP 126
36564: PPUSH
36565: LD_VAR 0 4
36569: PPUSH
36570: EMPTY
36571: PPUSH
36572: CALL_OW 1
36576: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36577: LD_VAR 0 1
36581: PPUSH
36582: LD_INT 0
36584: PPUSH
36585: CALL_OW 505
// end ; end ;
36589: LD_VAR 0 2
36593: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36594: LD_INT 0
36596: PPUSH
36597: PPUSH
36598: PPUSH
// if not hack in hackTanks or not vehicles then
36599: LD_VAR 0 1
36603: PUSH
36604: LD_EXP 125
36608: IN
36609: NOT
36610: PUSH
36611: LD_VAR 0 2
36615: NOT
36616: OR
36617: IFFALSE 36621
// exit ;
36619: GO 36896
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36621: LD_ADDR_VAR 0 2
36625: PUSH
36626: LD_VAR 0 1
36630: PPUSH
36631: LD_VAR 0 2
36635: PPUSH
36636: LD_INT 1
36638: PPUSH
36639: LD_INT 1
36641: PPUSH
36642: CALL 44856 0 4
36646: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36647: LD_ADDR_VAR 0 5
36651: PUSH
36652: LD_EXP 125
36656: PPUSH
36657: LD_VAR 0 1
36661: PPUSH
36662: CALL 44206 0 2
36666: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36667: LD_EXP 126
36671: PUSH
36672: LD_VAR 0 5
36676: ARRAY
36677: PUSH
36678: LD_EXP 127
36682: LESS
36683: IFFALSE 36872
// begin for i := 1 to vehicles do
36685: LD_ADDR_VAR 0 4
36689: PUSH
36690: DOUBLE
36691: LD_INT 1
36693: DEC
36694: ST_TO_ADDR
36695: LD_VAR 0 2
36699: PUSH
36700: FOR_TO
36701: IFFALSE 36870
// begin if hackTanksCaptured [ index ] = hackLimit then
36703: LD_EXP 126
36707: PUSH
36708: LD_VAR 0 5
36712: ARRAY
36713: PUSH
36714: LD_EXP 127
36718: EQUAL
36719: IFFALSE 36723
// break ;
36721: GO 36870
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36723: LD_ADDR_EXP 129
36727: PUSH
36728: LD_EXP 129
36732: PPUSH
36733: LD_VAR 0 5
36737: PPUSH
36738: LD_EXP 129
36742: PUSH
36743: LD_VAR 0 5
36747: ARRAY
36748: PUSH
36749: LD_INT 1
36751: PLUS
36752: PPUSH
36753: CALL_OW 1
36757: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36758: LD_ADDR_EXP 126
36762: PUSH
36763: LD_EXP 126
36767: PPUSH
36768: LD_VAR 0 5
36772: PUSH
36773: LD_EXP 126
36777: PUSH
36778: LD_VAR 0 5
36782: ARRAY
36783: PUSH
36784: LD_INT 1
36786: PLUS
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PPUSH
36792: LD_VAR 0 2
36796: PUSH
36797: LD_VAR 0 4
36801: ARRAY
36802: PUSH
36803: LD_VAR 0 2
36807: PUSH
36808: LD_VAR 0 4
36812: ARRAY
36813: PPUSH
36814: CALL_OW 255
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PPUSH
36823: CALL 44421 0 3
36827: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36828: LD_VAR 0 2
36832: PUSH
36833: LD_VAR 0 4
36837: ARRAY
36838: PPUSH
36839: LD_VAR 0 1
36843: PPUSH
36844: CALL_OW 255
36848: PPUSH
36849: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36853: LD_VAR 0 2
36857: PUSH
36858: LD_VAR 0 4
36862: ARRAY
36863: PPUSH
36864: CALL_OW 141
// end ;
36868: GO 36700
36870: POP
36871: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36872: LD_VAR 0 1
36876: PPUSH
36877: LD_EXP 126
36881: PUSH
36882: LD_VAR 0 5
36886: ARRAY
36887: PUSH
36888: LD_INT 0
36890: PLUS
36891: PPUSH
36892: CALL_OW 505
// end ;
36896: LD_VAR 0 3
36900: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36901: LD_INT 0
36903: PPUSH
36904: PPUSH
36905: PPUSH
36906: PPUSH
// if not hack in hackTanks then
36907: LD_VAR 0 1
36911: PUSH
36912: LD_EXP 125
36916: IN
36917: NOT
36918: IFFALSE 36922
// exit ;
36920: GO 37162
// index := GetElementIndex ( hackTanks , hack ) ;
36922: LD_ADDR_VAR 0 4
36926: PUSH
36927: LD_EXP 125
36931: PPUSH
36932: LD_VAR 0 1
36936: PPUSH
36937: CALL 44206 0 2
36941: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36942: LD_ADDR_VAR 0 3
36946: PUSH
36947: DOUBLE
36948: LD_EXP 126
36952: PUSH
36953: LD_VAR 0 4
36957: ARRAY
36958: INC
36959: ST_TO_ADDR
36960: LD_INT 1
36962: PUSH
36963: FOR_DOWNTO
36964: IFFALSE 37136
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36966: LD_ADDR_VAR 0 5
36970: PUSH
36971: LD_EXP 126
36975: PUSH
36976: LD_VAR 0 4
36980: ARRAY
36981: PUSH
36982: LD_VAR 0 3
36986: ARRAY
36987: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36988: LD_VAR 0 5
36992: PUSH
36993: LD_INT 1
36995: ARRAY
36996: PPUSH
36997: CALL_OW 302
37001: NOT
37002: PUSH
37003: LD_VAR 0 5
37007: PUSH
37008: LD_INT 1
37010: ARRAY
37011: PPUSH
37012: CALL_OW 255
37016: PUSH
37017: LD_VAR 0 1
37021: PPUSH
37022: CALL_OW 255
37026: NONEQUAL
37027: OR
37028: IFFALSE 37134
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37030: LD_VAR 0 5
37034: PUSH
37035: LD_INT 1
37037: ARRAY
37038: PPUSH
37039: CALL_OW 305
37043: PUSH
37044: LD_VAR 0 5
37048: PUSH
37049: LD_INT 1
37051: ARRAY
37052: PPUSH
37053: CALL_OW 255
37057: PUSH
37058: LD_VAR 0 1
37062: PPUSH
37063: CALL_OW 255
37067: EQUAL
37068: AND
37069: IFFALSE 37093
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37071: LD_VAR 0 5
37075: PUSH
37076: LD_INT 1
37078: ARRAY
37079: PPUSH
37080: LD_VAR 0 5
37084: PUSH
37085: LD_INT 2
37087: ARRAY
37088: PPUSH
37089: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37093: LD_ADDR_EXP 126
37097: PUSH
37098: LD_EXP 126
37102: PPUSH
37103: LD_VAR 0 4
37107: PPUSH
37108: LD_EXP 126
37112: PUSH
37113: LD_VAR 0 4
37117: ARRAY
37118: PPUSH
37119: LD_VAR 0 3
37123: PPUSH
37124: CALL_OW 3
37128: PPUSH
37129: CALL_OW 1
37133: ST_TO_ADDR
// end ; end ;
37134: GO 36963
37136: POP
37137: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37138: LD_VAR 0 1
37142: PPUSH
37143: LD_EXP 126
37147: PUSH
37148: LD_VAR 0 4
37152: ARRAY
37153: PUSH
37154: LD_INT 0
37156: PLUS
37157: PPUSH
37158: CALL_OW 505
// end ;
37162: LD_VAR 0 2
37166: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37167: LD_INT 0
37169: PPUSH
37170: PPUSH
37171: PPUSH
37172: PPUSH
// if not hack in hackTanks then
37173: LD_VAR 0 1
37177: PUSH
37178: LD_EXP 125
37182: IN
37183: NOT
37184: IFFALSE 37188
// exit ;
37186: GO 37273
// index := GetElementIndex ( hackTanks , hack ) ;
37188: LD_ADDR_VAR 0 5
37192: PUSH
37193: LD_EXP 125
37197: PPUSH
37198: LD_VAR 0 1
37202: PPUSH
37203: CALL 44206 0 2
37207: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37208: LD_ADDR_VAR 0 4
37212: PUSH
37213: DOUBLE
37214: LD_INT 1
37216: DEC
37217: ST_TO_ADDR
37218: LD_EXP 126
37222: PUSH
37223: LD_VAR 0 5
37227: ARRAY
37228: PUSH
37229: FOR_TO
37230: IFFALSE 37271
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37232: LD_EXP 126
37236: PUSH
37237: LD_VAR 0 5
37241: ARRAY
37242: PUSH
37243: LD_VAR 0 4
37247: ARRAY
37248: PUSH
37249: LD_INT 1
37251: ARRAY
37252: PUSH
37253: LD_VAR 0 2
37257: EQUAL
37258: IFFALSE 37269
// KillUnit ( vehicle ) ;
37260: LD_VAR 0 2
37264: PPUSH
37265: CALL_OW 66
37269: GO 37229
37271: POP
37272: POP
// end ;
37273: LD_VAR 0 3
37277: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37278: LD_EXP 130
37282: NOT
37283: IFFALSE 37318
37285: GO 37287
37287: DISABLE
// begin initMiner := true ;
37288: LD_ADDR_EXP 130
37292: PUSH
37293: LD_INT 1
37295: ST_TO_ADDR
// minersList := [ ] ;
37296: LD_ADDR_EXP 131
37300: PUSH
37301: EMPTY
37302: ST_TO_ADDR
// minerMinesList := [ ] ;
37303: LD_ADDR_EXP 132
37307: PUSH
37308: EMPTY
37309: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37310: LD_ADDR_EXP 133
37314: PUSH
37315: LD_INT 5
37317: ST_TO_ADDR
// end ;
37318: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37319: LD_EXP 130
37323: PUSH
37324: LD_INT 34
37326: PUSH
37327: LD_INT 81
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PPUSH
37334: CALL_OW 69
37338: AND
37339: IFFALSE 37800
37341: GO 37343
37343: DISABLE
37344: LD_INT 0
37346: PPUSH
37347: PPUSH
37348: PPUSH
37349: PPUSH
// begin enable ;
37350: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37351: LD_ADDR_VAR 0 1
37355: PUSH
37356: LD_INT 34
37358: PUSH
37359: LD_INT 81
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PPUSH
37366: CALL_OW 69
37370: PUSH
37371: FOR_IN
37372: IFFALSE 37444
// begin if not i in minersList then
37374: LD_VAR 0 1
37378: PUSH
37379: LD_EXP 131
37383: IN
37384: NOT
37385: IFFALSE 37442
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37387: LD_ADDR_EXP 131
37391: PUSH
37392: LD_EXP 131
37396: PPUSH
37397: LD_EXP 131
37401: PUSH
37402: LD_INT 1
37404: PLUS
37405: PPUSH
37406: LD_VAR 0 1
37410: PPUSH
37411: CALL_OW 1
37415: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37416: LD_ADDR_EXP 132
37420: PUSH
37421: LD_EXP 132
37425: PPUSH
37426: LD_EXP 132
37430: PUSH
37431: LD_INT 1
37433: PLUS
37434: PPUSH
37435: EMPTY
37436: PPUSH
37437: CALL_OW 1
37441: ST_TO_ADDR
// end end ;
37442: GO 37371
37444: POP
37445: POP
// for i := minerMinesList downto 1 do
37446: LD_ADDR_VAR 0 1
37450: PUSH
37451: DOUBLE
37452: LD_EXP 132
37456: INC
37457: ST_TO_ADDR
37458: LD_INT 1
37460: PUSH
37461: FOR_DOWNTO
37462: IFFALSE 37798
// begin if IsLive ( minersList [ i ] ) then
37464: LD_EXP 131
37468: PUSH
37469: LD_VAR 0 1
37473: ARRAY
37474: PPUSH
37475: CALL_OW 300
37479: IFFALSE 37507
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37481: LD_EXP 131
37485: PUSH
37486: LD_VAR 0 1
37490: ARRAY
37491: PPUSH
37492: LD_EXP 132
37496: PUSH
37497: LD_VAR 0 1
37501: ARRAY
37502: PPUSH
37503: CALL_OW 505
// if not minerMinesList [ i ] then
37507: LD_EXP 132
37511: PUSH
37512: LD_VAR 0 1
37516: ARRAY
37517: NOT
37518: IFFALSE 37522
// continue ;
37520: GO 37461
// for j := minerMinesList [ i ] downto 1 do
37522: LD_ADDR_VAR 0 2
37526: PUSH
37527: DOUBLE
37528: LD_EXP 132
37532: PUSH
37533: LD_VAR 0 1
37537: ARRAY
37538: INC
37539: ST_TO_ADDR
37540: LD_INT 1
37542: PUSH
37543: FOR_DOWNTO
37544: IFFALSE 37794
// begin side := GetSide ( minersList [ i ] ) ;
37546: LD_ADDR_VAR 0 3
37550: PUSH
37551: LD_EXP 131
37555: PUSH
37556: LD_VAR 0 1
37560: ARRAY
37561: PPUSH
37562: CALL_OW 255
37566: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37567: LD_ADDR_VAR 0 4
37571: PUSH
37572: LD_EXP 132
37576: PUSH
37577: LD_VAR 0 1
37581: ARRAY
37582: PUSH
37583: LD_VAR 0 2
37587: ARRAY
37588: PUSH
37589: LD_INT 1
37591: ARRAY
37592: PPUSH
37593: LD_EXP 132
37597: PUSH
37598: LD_VAR 0 1
37602: ARRAY
37603: PUSH
37604: LD_VAR 0 2
37608: ARRAY
37609: PUSH
37610: LD_INT 2
37612: ARRAY
37613: PPUSH
37614: CALL_OW 428
37618: ST_TO_ADDR
// if not tmp then
37619: LD_VAR 0 4
37623: NOT
37624: IFFALSE 37628
// continue ;
37626: GO 37543
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37628: LD_VAR 0 4
37632: PUSH
37633: LD_INT 81
37635: PUSH
37636: LD_VAR 0 3
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PPUSH
37645: CALL_OW 69
37649: IN
37650: PUSH
37651: LD_EXP 132
37655: PUSH
37656: LD_VAR 0 1
37660: ARRAY
37661: PUSH
37662: LD_VAR 0 2
37666: ARRAY
37667: PUSH
37668: LD_INT 1
37670: ARRAY
37671: PPUSH
37672: LD_EXP 132
37676: PUSH
37677: LD_VAR 0 1
37681: ARRAY
37682: PUSH
37683: LD_VAR 0 2
37687: ARRAY
37688: PUSH
37689: LD_INT 2
37691: ARRAY
37692: PPUSH
37693: CALL_OW 458
37697: AND
37698: IFFALSE 37792
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37700: LD_EXP 132
37704: PUSH
37705: LD_VAR 0 1
37709: ARRAY
37710: PUSH
37711: LD_VAR 0 2
37715: ARRAY
37716: PUSH
37717: LD_INT 1
37719: ARRAY
37720: PPUSH
37721: LD_EXP 132
37725: PUSH
37726: LD_VAR 0 1
37730: ARRAY
37731: PUSH
37732: LD_VAR 0 2
37736: ARRAY
37737: PUSH
37738: LD_INT 2
37740: ARRAY
37741: PPUSH
37742: LD_VAR 0 3
37746: PPUSH
37747: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37751: LD_ADDR_EXP 132
37755: PUSH
37756: LD_EXP 132
37760: PPUSH
37761: LD_VAR 0 1
37765: PPUSH
37766: LD_EXP 132
37770: PUSH
37771: LD_VAR 0 1
37775: ARRAY
37776: PPUSH
37777: LD_VAR 0 2
37781: PPUSH
37782: CALL_OW 3
37786: PPUSH
37787: CALL_OW 1
37791: ST_TO_ADDR
// end ; end ;
37792: GO 37543
37794: POP
37795: POP
// end ;
37796: GO 37461
37798: POP
37799: POP
// end ;
37800: PPOPN 4
37802: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37803: LD_INT 0
37805: PPUSH
37806: PPUSH
// result := false ;
37807: LD_ADDR_VAR 0 4
37811: PUSH
37812: LD_INT 0
37814: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37815: LD_VAR 0 1
37819: PPUSH
37820: CALL_OW 264
37824: PUSH
37825: LD_INT 81
37827: EQUAL
37828: NOT
37829: IFFALSE 37833
// exit ;
37831: GO 38073
// index := GetElementIndex ( minersList , unit ) ;
37833: LD_ADDR_VAR 0 5
37837: PUSH
37838: LD_EXP 131
37842: PPUSH
37843: LD_VAR 0 1
37847: PPUSH
37848: CALL 44206 0 2
37852: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37853: LD_EXP 132
37857: PUSH
37858: LD_VAR 0 5
37862: ARRAY
37863: PUSH
37864: LD_EXP 133
37868: GREATEREQUAL
37869: IFFALSE 37873
// exit ;
37871: GO 38073
// ComMoveXY ( unit , x , y ) ;
37873: LD_VAR 0 1
37877: PPUSH
37878: LD_VAR 0 2
37882: PPUSH
37883: LD_VAR 0 3
37887: PPUSH
37888: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37892: LD_INT 35
37894: PPUSH
37895: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37899: LD_VAR 0 1
37903: PPUSH
37904: LD_VAR 0 2
37908: PPUSH
37909: LD_VAR 0 3
37913: PPUSH
37914: CALL 75561 0 3
37918: NOT
37919: PUSH
37920: LD_VAR 0 1
37924: PPUSH
37925: CALL_OW 314
37929: AND
37930: IFFALSE 37934
// exit ;
37932: GO 38073
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37934: LD_VAR 0 2
37938: PPUSH
37939: LD_VAR 0 3
37943: PPUSH
37944: CALL_OW 428
37948: PUSH
37949: LD_VAR 0 1
37953: EQUAL
37954: PUSH
37955: LD_VAR 0 1
37959: PPUSH
37960: CALL_OW 314
37964: NOT
37965: AND
37966: IFFALSE 37892
// PlaySoundXY ( x , y , PlantMine ) ;
37968: LD_VAR 0 2
37972: PPUSH
37973: LD_VAR 0 3
37977: PPUSH
37978: LD_STRING PlantMine
37980: PPUSH
37981: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37985: LD_VAR 0 2
37989: PPUSH
37990: LD_VAR 0 3
37994: PPUSH
37995: LD_VAR 0 1
37999: PPUSH
38000: CALL_OW 255
38004: PPUSH
38005: LD_INT 0
38007: PPUSH
38008: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38012: LD_ADDR_EXP 132
38016: PUSH
38017: LD_EXP 132
38021: PPUSH
38022: LD_VAR 0 5
38026: PUSH
38027: LD_EXP 132
38031: PUSH
38032: LD_VAR 0 5
38036: ARRAY
38037: PUSH
38038: LD_INT 1
38040: PLUS
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PPUSH
38046: LD_VAR 0 2
38050: PUSH
38051: LD_VAR 0 3
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PPUSH
38060: CALL 44421 0 3
38064: ST_TO_ADDR
// result := true ;
38065: LD_ADDR_VAR 0 4
38069: PUSH
38070: LD_INT 1
38072: ST_TO_ADDR
// end ;
38073: LD_VAR 0 4
38077: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38078: LD_INT 0
38080: PPUSH
38081: PPUSH
38082: PPUSH
// if not unit in minersList then
38083: LD_VAR 0 1
38087: PUSH
38088: LD_EXP 131
38092: IN
38093: NOT
38094: IFFALSE 38098
// exit ;
38096: GO 38490
// index := GetElementIndex ( minersList , unit ) ;
38098: LD_ADDR_VAR 0 6
38102: PUSH
38103: LD_EXP 131
38107: PPUSH
38108: LD_VAR 0 1
38112: PPUSH
38113: CALL 44206 0 2
38117: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38118: LD_ADDR_VAR 0 5
38122: PUSH
38123: DOUBLE
38124: LD_EXP 132
38128: PUSH
38129: LD_VAR 0 6
38133: ARRAY
38134: INC
38135: ST_TO_ADDR
38136: LD_INT 1
38138: PUSH
38139: FOR_DOWNTO
38140: IFFALSE 38301
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38142: LD_EXP 132
38146: PUSH
38147: LD_VAR 0 6
38151: ARRAY
38152: PUSH
38153: LD_VAR 0 5
38157: ARRAY
38158: PUSH
38159: LD_INT 1
38161: ARRAY
38162: PUSH
38163: LD_VAR 0 2
38167: EQUAL
38168: PUSH
38169: LD_EXP 132
38173: PUSH
38174: LD_VAR 0 6
38178: ARRAY
38179: PUSH
38180: LD_VAR 0 5
38184: ARRAY
38185: PUSH
38186: LD_INT 2
38188: ARRAY
38189: PUSH
38190: LD_VAR 0 3
38194: EQUAL
38195: AND
38196: IFFALSE 38299
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38198: LD_EXP 132
38202: PUSH
38203: LD_VAR 0 6
38207: ARRAY
38208: PUSH
38209: LD_VAR 0 5
38213: ARRAY
38214: PUSH
38215: LD_INT 1
38217: ARRAY
38218: PPUSH
38219: LD_EXP 132
38223: PUSH
38224: LD_VAR 0 6
38228: ARRAY
38229: PUSH
38230: LD_VAR 0 5
38234: ARRAY
38235: PUSH
38236: LD_INT 2
38238: ARRAY
38239: PPUSH
38240: LD_VAR 0 1
38244: PPUSH
38245: CALL_OW 255
38249: PPUSH
38250: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38254: LD_ADDR_EXP 132
38258: PUSH
38259: LD_EXP 132
38263: PPUSH
38264: LD_VAR 0 6
38268: PPUSH
38269: LD_EXP 132
38273: PUSH
38274: LD_VAR 0 6
38278: ARRAY
38279: PPUSH
38280: LD_VAR 0 5
38284: PPUSH
38285: CALL_OW 3
38289: PPUSH
38290: CALL_OW 1
38294: ST_TO_ADDR
// exit ;
38295: POP
38296: POP
38297: GO 38490
// end ; end ;
38299: GO 38139
38301: POP
38302: POP
// for i := minerMinesList [ index ] downto 1 do
38303: LD_ADDR_VAR 0 5
38307: PUSH
38308: DOUBLE
38309: LD_EXP 132
38313: PUSH
38314: LD_VAR 0 6
38318: ARRAY
38319: INC
38320: ST_TO_ADDR
38321: LD_INT 1
38323: PUSH
38324: FOR_DOWNTO
38325: IFFALSE 38488
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38327: LD_EXP 132
38331: PUSH
38332: LD_VAR 0 6
38336: ARRAY
38337: PUSH
38338: LD_VAR 0 5
38342: ARRAY
38343: PUSH
38344: LD_INT 1
38346: ARRAY
38347: PPUSH
38348: LD_EXP 132
38352: PUSH
38353: LD_VAR 0 6
38357: ARRAY
38358: PUSH
38359: LD_VAR 0 5
38363: ARRAY
38364: PUSH
38365: LD_INT 2
38367: ARRAY
38368: PPUSH
38369: LD_VAR 0 2
38373: PPUSH
38374: LD_VAR 0 3
38378: PPUSH
38379: CALL_OW 298
38383: PUSH
38384: LD_INT 6
38386: LESS
38387: IFFALSE 38486
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38389: LD_EXP 132
38393: PUSH
38394: LD_VAR 0 6
38398: ARRAY
38399: PUSH
38400: LD_VAR 0 5
38404: ARRAY
38405: PUSH
38406: LD_INT 1
38408: ARRAY
38409: PPUSH
38410: LD_EXP 132
38414: PUSH
38415: LD_VAR 0 6
38419: ARRAY
38420: PUSH
38421: LD_VAR 0 5
38425: ARRAY
38426: PUSH
38427: LD_INT 2
38429: ARRAY
38430: PPUSH
38431: LD_VAR 0 1
38435: PPUSH
38436: CALL_OW 255
38440: PPUSH
38441: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38445: LD_ADDR_EXP 132
38449: PUSH
38450: LD_EXP 132
38454: PPUSH
38455: LD_VAR 0 6
38459: PPUSH
38460: LD_EXP 132
38464: PUSH
38465: LD_VAR 0 6
38469: ARRAY
38470: PPUSH
38471: LD_VAR 0 5
38475: PPUSH
38476: CALL_OW 3
38480: PPUSH
38481: CALL_OW 1
38485: ST_TO_ADDR
// end ; end ;
38486: GO 38324
38488: POP
38489: POP
// end ;
38490: LD_VAR 0 4
38494: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38495: LD_INT 0
38497: PPUSH
38498: PPUSH
38499: PPUSH
38500: PPUSH
38501: PPUSH
38502: PPUSH
38503: PPUSH
38504: PPUSH
38505: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38506: LD_VAR 0 1
38510: PPUSH
38511: CALL_OW 264
38515: PUSH
38516: LD_INT 81
38518: EQUAL
38519: NOT
38520: PUSH
38521: LD_VAR 0 1
38525: PUSH
38526: LD_EXP 131
38530: IN
38531: NOT
38532: OR
38533: IFFALSE 38537
// exit ;
38535: GO 38859
// index := GetElementIndex ( minersList , unit ) ;
38537: LD_ADDR_VAR 0 6
38541: PUSH
38542: LD_EXP 131
38546: PPUSH
38547: LD_VAR 0 1
38551: PPUSH
38552: CALL 44206 0 2
38556: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38557: LD_ADDR_VAR 0 8
38561: PUSH
38562: LD_EXP 133
38566: PUSH
38567: LD_EXP 132
38571: PUSH
38572: LD_VAR 0 6
38576: ARRAY
38577: MINUS
38578: ST_TO_ADDR
// if not minesFreeAmount then
38579: LD_VAR 0 8
38583: NOT
38584: IFFALSE 38588
// exit ;
38586: GO 38859
// tmp := [ ] ;
38588: LD_ADDR_VAR 0 7
38592: PUSH
38593: EMPTY
38594: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38595: LD_ADDR_VAR 0 5
38599: PUSH
38600: DOUBLE
38601: LD_INT 1
38603: DEC
38604: ST_TO_ADDR
38605: LD_VAR 0 8
38609: PUSH
38610: FOR_TO
38611: IFFALSE 38806
// begin _d := rand ( 0 , 5 ) ;
38613: LD_ADDR_VAR 0 11
38617: PUSH
38618: LD_INT 0
38620: PPUSH
38621: LD_INT 5
38623: PPUSH
38624: CALL_OW 12
38628: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38629: LD_ADDR_VAR 0 12
38633: PUSH
38634: LD_INT 2
38636: PPUSH
38637: LD_INT 6
38639: PPUSH
38640: CALL_OW 12
38644: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38645: LD_ADDR_VAR 0 9
38649: PUSH
38650: LD_VAR 0 2
38654: PPUSH
38655: LD_VAR 0 11
38659: PPUSH
38660: LD_VAR 0 12
38664: PPUSH
38665: CALL_OW 272
38669: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38670: LD_ADDR_VAR 0 10
38674: PUSH
38675: LD_VAR 0 3
38679: PPUSH
38680: LD_VAR 0 11
38684: PPUSH
38685: LD_VAR 0 12
38689: PPUSH
38690: CALL_OW 273
38694: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38695: LD_VAR 0 9
38699: PPUSH
38700: LD_VAR 0 10
38704: PPUSH
38705: CALL_OW 488
38709: PUSH
38710: LD_VAR 0 9
38714: PUSH
38715: LD_VAR 0 10
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_VAR 0 7
38728: IN
38729: NOT
38730: AND
38731: PUSH
38732: LD_VAR 0 9
38736: PPUSH
38737: LD_VAR 0 10
38741: PPUSH
38742: CALL_OW 458
38746: NOT
38747: AND
38748: IFFALSE 38790
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38750: LD_ADDR_VAR 0 7
38754: PUSH
38755: LD_VAR 0 7
38759: PPUSH
38760: LD_VAR 0 7
38764: PUSH
38765: LD_INT 1
38767: PLUS
38768: PPUSH
38769: LD_VAR 0 9
38773: PUSH
38774: LD_VAR 0 10
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PPUSH
38783: CALL_OW 1
38787: ST_TO_ADDR
38788: GO 38804
// i := i - 1 ;
38790: LD_ADDR_VAR 0 5
38794: PUSH
38795: LD_VAR 0 5
38799: PUSH
38800: LD_INT 1
38802: MINUS
38803: ST_TO_ADDR
// end ;
38804: GO 38610
38806: POP
38807: POP
// for i in tmp do
38808: LD_ADDR_VAR 0 5
38812: PUSH
38813: LD_VAR 0 7
38817: PUSH
38818: FOR_IN
38819: IFFALSE 38857
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38821: LD_VAR 0 1
38825: PPUSH
38826: LD_VAR 0 5
38830: PUSH
38831: LD_INT 1
38833: ARRAY
38834: PPUSH
38835: LD_VAR 0 5
38839: PUSH
38840: LD_INT 2
38842: ARRAY
38843: PPUSH
38844: CALL 37803 0 3
38848: NOT
38849: IFFALSE 38855
// exit ;
38851: POP
38852: POP
38853: GO 38859
38855: GO 38818
38857: POP
38858: POP
// end ;
38859: LD_VAR 0 4
38863: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38864: LD_INT 0
38866: PPUSH
38867: PPUSH
38868: PPUSH
38869: PPUSH
38870: PPUSH
38871: PPUSH
38872: PPUSH
// if not GetClass ( unit ) = class_sniper then
38873: LD_VAR 0 1
38877: PPUSH
38878: CALL_OW 257
38882: PUSH
38883: LD_INT 5
38885: EQUAL
38886: NOT
38887: IFFALSE 38891
// exit ;
38889: GO 39279
// dist := 8 ;
38891: LD_ADDR_VAR 0 5
38895: PUSH
38896: LD_INT 8
38898: ST_TO_ADDR
// viewRange := 12 ;
38899: LD_ADDR_VAR 0 7
38903: PUSH
38904: LD_INT 12
38906: ST_TO_ADDR
// side := GetSide ( unit ) ;
38907: LD_ADDR_VAR 0 6
38911: PUSH
38912: LD_VAR 0 1
38916: PPUSH
38917: CALL_OW 255
38921: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38922: LD_INT 61
38924: PPUSH
38925: LD_VAR 0 6
38929: PPUSH
38930: CALL_OW 321
38934: PUSH
38935: LD_INT 2
38937: EQUAL
38938: IFFALSE 38948
// viewRange := 16 ;
38940: LD_ADDR_VAR 0 7
38944: PUSH
38945: LD_INT 16
38947: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38948: LD_VAR 0 1
38952: PPUSH
38953: LD_VAR 0 2
38957: PPUSH
38958: LD_VAR 0 3
38962: PPUSH
38963: CALL_OW 297
38967: PUSH
38968: LD_VAR 0 5
38972: GREATER
38973: IFFALSE 39052
// begin ComMoveXY ( unit , x , y ) ;
38975: LD_VAR 0 1
38979: PPUSH
38980: LD_VAR 0 2
38984: PPUSH
38985: LD_VAR 0 3
38989: PPUSH
38990: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38994: LD_INT 35
38996: PPUSH
38997: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39001: LD_VAR 0 1
39005: PPUSH
39006: LD_VAR 0 2
39010: PPUSH
39011: LD_VAR 0 3
39015: PPUSH
39016: CALL 75561 0 3
39020: NOT
39021: IFFALSE 39025
// exit ;
39023: GO 39279
// until GetDistUnitXY ( unit , x , y ) < dist ;
39025: LD_VAR 0 1
39029: PPUSH
39030: LD_VAR 0 2
39034: PPUSH
39035: LD_VAR 0 3
39039: PPUSH
39040: CALL_OW 297
39044: PUSH
39045: LD_VAR 0 5
39049: LESS
39050: IFFALSE 38994
// end ; ComTurnXY ( unit , x , y ) ;
39052: LD_VAR 0 1
39056: PPUSH
39057: LD_VAR 0 2
39061: PPUSH
39062: LD_VAR 0 3
39066: PPUSH
39067: CALL_OW 118
// wait ( 5 ) ;
39071: LD_INT 5
39073: PPUSH
39074: CALL_OW 67
// _d := GetDir ( unit ) ;
39078: LD_ADDR_VAR 0 10
39082: PUSH
39083: LD_VAR 0 1
39087: PPUSH
39088: CALL_OW 254
39092: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39093: LD_ADDR_VAR 0 8
39097: PUSH
39098: LD_VAR 0 1
39102: PPUSH
39103: CALL_OW 250
39107: PPUSH
39108: LD_VAR 0 10
39112: PPUSH
39113: LD_VAR 0 5
39117: PPUSH
39118: CALL_OW 272
39122: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39123: LD_ADDR_VAR 0 9
39127: PUSH
39128: LD_VAR 0 1
39132: PPUSH
39133: CALL_OW 251
39137: PPUSH
39138: LD_VAR 0 10
39142: PPUSH
39143: LD_VAR 0 5
39147: PPUSH
39148: CALL_OW 273
39152: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39153: LD_VAR 0 8
39157: PPUSH
39158: LD_VAR 0 9
39162: PPUSH
39163: CALL_OW 488
39167: NOT
39168: IFFALSE 39172
// exit ;
39170: GO 39279
// ComAnimCustom ( unit , 1 ) ;
39172: LD_VAR 0 1
39176: PPUSH
39177: LD_INT 1
39179: PPUSH
39180: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39184: LD_VAR 0 8
39188: PPUSH
39189: LD_VAR 0 9
39193: PPUSH
39194: LD_VAR 0 6
39198: PPUSH
39199: LD_VAR 0 7
39203: PPUSH
39204: CALL_OW 330
// repeat wait ( 1 ) ;
39208: LD_INT 1
39210: PPUSH
39211: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39215: LD_VAR 0 1
39219: PPUSH
39220: CALL_OW 316
39224: PUSH
39225: LD_VAR 0 1
39229: PPUSH
39230: CALL_OW 314
39234: OR
39235: PUSH
39236: LD_VAR 0 1
39240: PPUSH
39241: CALL_OW 302
39245: NOT
39246: OR
39247: PUSH
39248: LD_VAR 0 1
39252: PPUSH
39253: CALL_OW 301
39257: OR
39258: IFFALSE 39208
// RemoveSeeing ( _x , _y , side ) ;
39260: LD_VAR 0 8
39264: PPUSH
39265: LD_VAR 0 9
39269: PPUSH
39270: LD_VAR 0 6
39274: PPUSH
39275: CALL_OW 331
// end ; end_of_file
39279: LD_VAR 0 4
39283: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39284: LD_INT 0
39286: PPUSH
39287: PPUSH
// if exist_mode then
39288: LD_VAR 0 2
39292: IFFALSE 39317
// unit := CreateCharacter ( prefix & ident ) else
39294: LD_ADDR_VAR 0 5
39298: PUSH
39299: LD_VAR 0 3
39303: PUSH
39304: LD_VAR 0 1
39308: STR
39309: PPUSH
39310: CALL_OW 34
39314: ST_TO_ADDR
39315: GO 39332
// unit := NewCharacter ( ident ) ;
39317: LD_ADDR_VAR 0 5
39321: PUSH
39322: LD_VAR 0 1
39326: PPUSH
39327: CALL_OW 25
39331: ST_TO_ADDR
// result := unit ;
39332: LD_ADDR_VAR 0 4
39336: PUSH
39337: LD_VAR 0 5
39341: ST_TO_ADDR
// end ;
39342: LD_VAR 0 4
39346: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39347: LD_INT 0
39349: PPUSH
39350: PPUSH
// if not side or not nation then
39351: LD_VAR 0 1
39355: NOT
39356: PUSH
39357: LD_VAR 0 2
39361: NOT
39362: OR
39363: IFFALSE 39367
// exit ;
39365: GO 40135
// case nation of nation_american :
39367: LD_VAR 0 2
39371: PUSH
39372: LD_INT 1
39374: DOUBLE
39375: EQUAL
39376: IFTRUE 39380
39378: GO 39594
39380: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39381: LD_ADDR_VAR 0 4
39385: PUSH
39386: LD_INT 35
39388: PUSH
39389: LD_INT 45
39391: PUSH
39392: LD_INT 46
39394: PUSH
39395: LD_INT 47
39397: PUSH
39398: LD_INT 82
39400: PUSH
39401: LD_INT 83
39403: PUSH
39404: LD_INT 84
39406: PUSH
39407: LD_INT 85
39409: PUSH
39410: LD_INT 86
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: LD_INT 2
39418: PUSH
39419: LD_INT 6
39421: PUSH
39422: LD_INT 15
39424: PUSH
39425: LD_INT 16
39427: PUSH
39428: LD_INT 7
39430: PUSH
39431: LD_INT 12
39433: PUSH
39434: LD_INT 13
39436: PUSH
39437: LD_INT 10
39439: PUSH
39440: LD_INT 14
39442: PUSH
39443: LD_INT 20
39445: PUSH
39446: LD_INT 21
39448: PUSH
39449: LD_INT 22
39451: PUSH
39452: LD_INT 25
39454: PUSH
39455: LD_INT 32
39457: PUSH
39458: LD_INT 27
39460: PUSH
39461: LD_INT 36
39463: PUSH
39464: LD_INT 69
39466: PUSH
39467: LD_INT 39
39469: PUSH
39470: LD_INT 34
39472: PUSH
39473: LD_INT 40
39475: PUSH
39476: LD_INT 48
39478: PUSH
39479: LD_INT 49
39481: PUSH
39482: LD_INT 50
39484: PUSH
39485: LD_INT 51
39487: PUSH
39488: LD_INT 52
39490: PUSH
39491: LD_INT 53
39493: PUSH
39494: LD_INT 54
39496: PUSH
39497: LD_INT 55
39499: PUSH
39500: LD_INT 56
39502: PUSH
39503: LD_INT 57
39505: PUSH
39506: LD_INT 58
39508: PUSH
39509: LD_INT 59
39511: PUSH
39512: LD_INT 60
39514: PUSH
39515: LD_INT 61
39517: PUSH
39518: LD_INT 62
39520: PUSH
39521: LD_INT 80
39523: PUSH
39524: LD_INT 82
39526: PUSH
39527: LD_INT 83
39529: PUSH
39530: LD_INT 84
39532: PUSH
39533: LD_INT 85
39535: PUSH
39536: LD_INT 86
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: ST_TO_ADDR
39592: GO 40059
39594: LD_INT 2
39596: DOUBLE
39597: EQUAL
39598: IFTRUE 39602
39600: GO 39828
39602: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39603: LD_ADDR_VAR 0 4
39607: PUSH
39608: LD_INT 35
39610: PUSH
39611: LD_INT 45
39613: PUSH
39614: LD_INT 46
39616: PUSH
39617: LD_INT 47
39619: PUSH
39620: LD_INT 82
39622: PUSH
39623: LD_INT 83
39625: PUSH
39626: LD_INT 84
39628: PUSH
39629: LD_INT 85
39631: PUSH
39632: LD_INT 87
39634: PUSH
39635: LD_INT 70
39637: PUSH
39638: LD_INT 1
39640: PUSH
39641: LD_INT 11
39643: PUSH
39644: LD_INT 3
39646: PUSH
39647: LD_INT 4
39649: PUSH
39650: LD_INT 5
39652: PUSH
39653: LD_INT 6
39655: PUSH
39656: LD_INT 15
39658: PUSH
39659: LD_INT 18
39661: PUSH
39662: LD_INT 7
39664: PUSH
39665: LD_INT 17
39667: PUSH
39668: LD_INT 8
39670: PUSH
39671: LD_INT 20
39673: PUSH
39674: LD_INT 21
39676: PUSH
39677: LD_INT 22
39679: PUSH
39680: LD_INT 72
39682: PUSH
39683: LD_INT 26
39685: PUSH
39686: LD_INT 69
39688: PUSH
39689: LD_INT 39
39691: PUSH
39692: LD_INT 40
39694: PUSH
39695: LD_INT 41
39697: PUSH
39698: LD_INT 42
39700: PUSH
39701: LD_INT 43
39703: PUSH
39704: LD_INT 48
39706: PUSH
39707: LD_INT 49
39709: PUSH
39710: LD_INT 50
39712: PUSH
39713: LD_INT 51
39715: PUSH
39716: LD_INT 52
39718: PUSH
39719: LD_INT 53
39721: PUSH
39722: LD_INT 54
39724: PUSH
39725: LD_INT 55
39727: PUSH
39728: LD_INT 56
39730: PUSH
39731: LD_INT 60
39733: PUSH
39734: LD_INT 61
39736: PUSH
39737: LD_INT 62
39739: PUSH
39740: LD_INT 66
39742: PUSH
39743: LD_INT 67
39745: PUSH
39746: LD_INT 68
39748: PUSH
39749: LD_INT 81
39751: PUSH
39752: LD_INT 82
39754: PUSH
39755: LD_INT 83
39757: PUSH
39758: LD_INT 84
39760: PUSH
39761: LD_INT 85
39763: PUSH
39764: LD_INT 87
39766: PUSH
39767: LD_INT 88
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: ST_TO_ADDR
39826: GO 40059
39828: LD_INT 3
39830: DOUBLE
39831: EQUAL
39832: IFTRUE 39836
39834: GO 40058
39836: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39837: LD_ADDR_VAR 0 4
39841: PUSH
39842: LD_INT 46
39844: PUSH
39845: LD_INT 47
39847: PUSH
39848: LD_INT 1
39850: PUSH
39851: LD_INT 2
39853: PUSH
39854: LD_INT 82
39856: PUSH
39857: LD_INT 83
39859: PUSH
39860: LD_INT 84
39862: PUSH
39863: LD_INT 85
39865: PUSH
39866: LD_INT 86
39868: PUSH
39869: LD_INT 11
39871: PUSH
39872: LD_INT 9
39874: PUSH
39875: LD_INT 20
39877: PUSH
39878: LD_INT 19
39880: PUSH
39881: LD_INT 21
39883: PUSH
39884: LD_INT 24
39886: PUSH
39887: LD_INT 22
39889: PUSH
39890: LD_INT 25
39892: PUSH
39893: LD_INT 28
39895: PUSH
39896: LD_INT 29
39898: PUSH
39899: LD_INT 30
39901: PUSH
39902: LD_INT 31
39904: PUSH
39905: LD_INT 37
39907: PUSH
39908: LD_INT 38
39910: PUSH
39911: LD_INT 32
39913: PUSH
39914: LD_INT 27
39916: PUSH
39917: LD_INT 33
39919: PUSH
39920: LD_INT 69
39922: PUSH
39923: LD_INT 39
39925: PUSH
39926: LD_INT 34
39928: PUSH
39929: LD_INT 40
39931: PUSH
39932: LD_INT 71
39934: PUSH
39935: LD_INT 23
39937: PUSH
39938: LD_INT 44
39940: PUSH
39941: LD_INT 48
39943: PUSH
39944: LD_INT 49
39946: PUSH
39947: LD_INT 50
39949: PUSH
39950: LD_INT 51
39952: PUSH
39953: LD_INT 52
39955: PUSH
39956: LD_INT 53
39958: PUSH
39959: LD_INT 54
39961: PUSH
39962: LD_INT 55
39964: PUSH
39965: LD_INT 56
39967: PUSH
39968: LD_INT 57
39970: PUSH
39971: LD_INT 58
39973: PUSH
39974: LD_INT 59
39976: PUSH
39977: LD_INT 63
39979: PUSH
39980: LD_INT 64
39982: PUSH
39983: LD_INT 65
39985: PUSH
39986: LD_INT 82
39988: PUSH
39989: LD_INT 83
39991: PUSH
39992: LD_INT 84
39994: PUSH
39995: LD_INT 85
39997: PUSH
39998: LD_INT 86
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: ST_TO_ADDR
40056: GO 40059
40058: POP
// if state > - 1 and state < 3 then
40059: LD_VAR 0 3
40063: PUSH
40064: LD_INT 1
40066: NEG
40067: GREATER
40068: PUSH
40069: LD_VAR 0 3
40073: PUSH
40074: LD_INT 3
40076: LESS
40077: AND
40078: IFFALSE 40135
// for i in result do
40080: LD_ADDR_VAR 0 5
40084: PUSH
40085: LD_VAR 0 4
40089: PUSH
40090: FOR_IN
40091: IFFALSE 40133
// if GetTech ( i , side ) <> state then
40093: LD_VAR 0 5
40097: PPUSH
40098: LD_VAR 0 1
40102: PPUSH
40103: CALL_OW 321
40107: PUSH
40108: LD_VAR 0 3
40112: NONEQUAL
40113: IFFALSE 40131
// result := result diff i ;
40115: LD_ADDR_VAR 0 4
40119: PUSH
40120: LD_VAR 0 4
40124: PUSH
40125: LD_VAR 0 5
40129: DIFF
40130: ST_TO_ADDR
40131: GO 40090
40133: POP
40134: POP
// end ;
40135: LD_VAR 0 4
40139: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40140: LD_INT 0
40142: PPUSH
40143: PPUSH
40144: PPUSH
// result := true ;
40145: LD_ADDR_VAR 0 3
40149: PUSH
40150: LD_INT 1
40152: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40153: LD_ADDR_VAR 0 5
40157: PUSH
40158: LD_VAR 0 2
40162: PPUSH
40163: CALL_OW 480
40167: ST_TO_ADDR
// if not tmp then
40168: LD_VAR 0 5
40172: NOT
40173: IFFALSE 40177
// exit ;
40175: GO 40226
// for i in tmp do
40177: LD_ADDR_VAR 0 4
40181: PUSH
40182: LD_VAR 0 5
40186: PUSH
40187: FOR_IN
40188: IFFALSE 40224
// if GetTech ( i , side ) <> state_researched then
40190: LD_VAR 0 4
40194: PPUSH
40195: LD_VAR 0 1
40199: PPUSH
40200: CALL_OW 321
40204: PUSH
40205: LD_INT 2
40207: NONEQUAL
40208: IFFALSE 40222
// begin result := false ;
40210: LD_ADDR_VAR 0 3
40214: PUSH
40215: LD_INT 0
40217: ST_TO_ADDR
// exit ;
40218: POP
40219: POP
40220: GO 40226
// end ;
40222: GO 40187
40224: POP
40225: POP
// end ;
40226: LD_VAR 0 3
40230: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40231: LD_INT 0
40233: PPUSH
40234: PPUSH
40235: PPUSH
40236: PPUSH
40237: PPUSH
40238: PPUSH
40239: PPUSH
40240: PPUSH
40241: PPUSH
40242: PPUSH
40243: PPUSH
40244: PPUSH
40245: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40246: LD_VAR 0 1
40250: NOT
40251: PUSH
40252: LD_VAR 0 1
40256: PPUSH
40257: CALL_OW 257
40261: PUSH
40262: LD_INT 9
40264: NONEQUAL
40265: OR
40266: IFFALSE 40270
// exit ;
40268: GO 40843
// side := GetSide ( unit ) ;
40270: LD_ADDR_VAR 0 9
40274: PUSH
40275: LD_VAR 0 1
40279: PPUSH
40280: CALL_OW 255
40284: ST_TO_ADDR
// tech_space := tech_spacanom ;
40285: LD_ADDR_VAR 0 12
40289: PUSH
40290: LD_INT 29
40292: ST_TO_ADDR
// tech_time := tech_taurad ;
40293: LD_ADDR_VAR 0 13
40297: PUSH
40298: LD_INT 28
40300: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40301: LD_ADDR_VAR 0 11
40305: PUSH
40306: LD_VAR 0 1
40310: PPUSH
40311: CALL_OW 310
40315: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40316: LD_VAR 0 11
40320: PPUSH
40321: CALL_OW 247
40325: PUSH
40326: LD_INT 2
40328: EQUAL
40329: IFFALSE 40333
// exit ;
40331: GO 40843
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40333: LD_ADDR_VAR 0 8
40337: PUSH
40338: LD_INT 81
40340: PUSH
40341: LD_VAR 0 9
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 3
40352: PUSH
40353: LD_INT 21
40355: PUSH
40356: LD_INT 3
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PPUSH
40371: CALL_OW 69
40375: ST_TO_ADDR
// if not tmp then
40376: LD_VAR 0 8
40380: NOT
40381: IFFALSE 40385
// exit ;
40383: GO 40843
// if in_unit then
40385: LD_VAR 0 11
40389: IFFALSE 40413
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40391: LD_ADDR_VAR 0 10
40395: PUSH
40396: LD_VAR 0 8
40400: PPUSH
40401: LD_VAR 0 11
40405: PPUSH
40406: CALL_OW 74
40410: ST_TO_ADDR
40411: GO 40433
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40413: LD_ADDR_VAR 0 10
40417: PUSH
40418: LD_VAR 0 8
40422: PPUSH
40423: LD_VAR 0 1
40427: PPUSH
40428: CALL_OW 74
40432: ST_TO_ADDR
// if not enemy then
40433: LD_VAR 0 10
40437: NOT
40438: IFFALSE 40442
// exit ;
40440: GO 40843
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40442: LD_VAR 0 11
40446: PUSH
40447: LD_VAR 0 11
40451: PPUSH
40452: LD_VAR 0 10
40456: PPUSH
40457: CALL_OW 296
40461: PUSH
40462: LD_INT 13
40464: GREATER
40465: AND
40466: PUSH
40467: LD_VAR 0 1
40471: PPUSH
40472: LD_VAR 0 10
40476: PPUSH
40477: CALL_OW 296
40481: PUSH
40482: LD_INT 12
40484: GREATER
40485: OR
40486: IFFALSE 40490
// exit ;
40488: GO 40843
// missile := [ 1 ] ;
40490: LD_ADDR_VAR 0 14
40494: PUSH
40495: LD_INT 1
40497: PUSH
40498: EMPTY
40499: LIST
40500: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40501: LD_VAR 0 9
40505: PPUSH
40506: LD_VAR 0 12
40510: PPUSH
40511: CALL_OW 325
40515: IFFALSE 40544
// missile := Replace ( missile , missile + 1 , 2 ) ;
40517: LD_ADDR_VAR 0 14
40521: PUSH
40522: LD_VAR 0 14
40526: PPUSH
40527: LD_VAR 0 14
40531: PUSH
40532: LD_INT 1
40534: PLUS
40535: PPUSH
40536: LD_INT 2
40538: PPUSH
40539: CALL_OW 1
40543: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40544: LD_VAR 0 9
40548: PPUSH
40549: LD_VAR 0 13
40553: PPUSH
40554: CALL_OW 325
40558: PUSH
40559: LD_VAR 0 10
40563: PPUSH
40564: CALL_OW 255
40568: PPUSH
40569: LD_VAR 0 13
40573: PPUSH
40574: CALL_OW 325
40578: NOT
40579: AND
40580: IFFALSE 40609
// missile := Replace ( missile , missile + 1 , 3 ) ;
40582: LD_ADDR_VAR 0 14
40586: PUSH
40587: LD_VAR 0 14
40591: PPUSH
40592: LD_VAR 0 14
40596: PUSH
40597: LD_INT 1
40599: PLUS
40600: PPUSH
40601: LD_INT 3
40603: PPUSH
40604: CALL_OW 1
40608: ST_TO_ADDR
// if missile < 2 then
40609: LD_VAR 0 14
40613: PUSH
40614: LD_INT 2
40616: LESS
40617: IFFALSE 40621
// exit ;
40619: GO 40843
// x := GetX ( enemy ) ;
40621: LD_ADDR_VAR 0 4
40625: PUSH
40626: LD_VAR 0 10
40630: PPUSH
40631: CALL_OW 250
40635: ST_TO_ADDR
// y := GetY ( enemy ) ;
40636: LD_ADDR_VAR 0 5
40640: PUSH
40641: LD_VAR 0 10
40645: PPUSH
40646: CALL_OW 251
40650: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40651: LD_ADDR_VAR 0 6
40655: PUSH
40656: LD_VAR 0 4
40660: PUSH
40661: LD_INT 1
40663: NEG
40664: PPUSH
40665: LD_INT 1
40667: PPUSH
40668: CALL_OW 12
40672: PLUS
40673: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40674: LD_ADDR_VAR 0 7
40678: PUSH
40679: LD_VAR 0 5
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PPUSH
40688: LD_INT 1
40690: PPUSH
40691: CALL_OW 12
40695: PLUS
40696: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40697: LD_VAR 0 6
40701: PPUSH
40702: LD_VAR 0 7
40706: PPUSH
40707: CALL_OW 488
40711: NOT
40712: IFFALSE 40734
// begin _x := x ;
40714: LD_ADDR_VAR 0 6
40718: PUSH
40719: LD_VAR 0 4
40723: ST_TO_ADDR
// _y := y ;
40724: LD_ADDR_VAR 0 7
40728: PUSH
40729: LD_VAR 0 5
40733: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40734: LD_ADDR_VAR 0 3
40738: PUSH
40739: LD_INT 1
40741: PPUSH
40742: LD_VAR 0 14
40746: PPUSH
40747: CALL_OW 12
40751: ST_TO_ADDR
// case i of 1 :
40752: LD_VAR 0 3
40756: PUSH
40757: LD_INT 1
40759: DOUBLE
40760: EQUAL
40761: IFTRUE 40765
40763: GO 40782
40765: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40766: LD_VAR 0 1
40770: PPUSH
40771: LD_VAR 0 10
40775: PPUSH
40776: CALL_OW 115
40780: GO 40843
40782: LD_INT 2
40784: DOUBLE
40785: EQUAL
40786: IFTRUE 40790
40788: GO 40812
40790: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40791: LD_VAR 0 1
40795: PPUSH
40796: LD_VAR 0 6
40800: PPUSH
40801: LD_VAR 0 7
40805: PPUSH
40806: CALL_OW 153
40810: GO 40843
40812: LD_INT 3
40814: DOUBLE
40815: EQUAL
40816: IFTRUE 40820
40818: GO 40842
40820: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40821: LD_VAR 0 1
40825: PPUSH
40826: LD_VAR 0 6
40830: PPUSH
40831: LD_VAR 0 7
40835: PPUSH
40836: CALL_OW 154
40840: GO 40843
40842: POP
// end ;
40843: LD_VAR 0 2
40847: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40848: LD_INT 0
40850: PPUSH
40851: PPUSH
40852: PPUSH
40853: PPUSH
40854: PPUSH
40855: PPUSH
// if not unit or not building then
40856: LD_VAR 0 1
40860: NOT
40861: PUSH
40862: LD_VAR 0 2
40866: NOT
40867: OR
40868: IFFALSE 40872
// exit ;
40870: GO 41030
// x := GetX ( building ) ;
40872: LD_ADDR_VAR 0 5
40876: PUSH
40877: LD_VAR 0 2
40881: PPUSH
40882: CALL_OW 250
40886: ST_TO_ADDR
// y := GetY ( building ) ;
40887: LD_ADDR_VAR 0 6
40891: PUSH
40892: LD_VAR 0 2
40896: PPUSH
40897: CALL_OW 251
40901: ST_TO_ADDR
// for i = 0 to 5 do
40902: LD_ADDR_VAR 0 4
40906: PUSH
40907: DOUBLE
40908: LD_INT 0
40910: DEC
40911: ST_TO_ADDR
40912: LD_INT 5
40914: PUSH
40915: FOR_TO
40916: IFFALSE 41028
// begin _x := ShiftX ( x , i , 3 ) ;
40918: LD_ADDR_VAR 0 7
40922: PUSH
40923: LD_VAR 0 5
40927: PPUSH
40928: LD_VAR 0 4
40932: PPUSH
40933: LD_INT 3
40935: PPUSH
40936: CALL_OW 272
40940: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40941: LD_ADDR_VAR 0 8
40945: PUSH
40946: LD_VAR 0 6
40950: PPUSH
40951: LD_VAR 0 4
40955: PPUSH
40956: LD_INT 3
40958: PPUSH
40959: CALL_OW 273
40963: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40964: LD_VAR 0 7
40968: PPUSH
40969: LD_VAR 0 8
40973: PPUSH
40974: CALL_OW 488
40978: NOT
40979: IFFALSE 40983
// continue ;
40981: GO 40915
// if HexInfo ( _x , _y ) = 0 then
40983: LD_VAR 0 7
40987: PPUSH
40988: LD_VAR 0 8
40992: PPUSH
40993: CALL_OW 428
40997: PUSH
40998: LD_INT 0
41000: EQUAL
41001: IFFALSE 41026
// begin ComMoveXY ( unit , _x , _y ) ;
41003: LD_VAR 0 1
41007: PPUSH
41008: LD_VAR 0 7
41012: PPUSH
41013: LD_VAR 0 8
41017: PPUSH
41018: CALL_OW 111
// exit ;
41022: POP
41023: POP
41024: GO 41030
// end ; end ;
41026: GO 40915
41028: POP
41029: POP
// end ;
41030: LD_VAR 0 3
41034: RET
// export function ScanBase ( side , base_area ) ; begin
41035: LD_INT 0
41037: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41038: LD_ADDR_VAR 0 3
41042: PUSH
41043: LD_VAR 0 2
41047: PPUSH
41048: LD_INT 81
41050: PUSH
41051: LD_VAR 0 1
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PPUSH
41060: CALL_OW 70
41064: ST_TO_ADDR
// end ;
41065: LD_VAR 0 3
41069: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41070: LD_INT 0
41072: PPUSH
41073: PPUSH
41074: PPUSH
41075: PPUSH
// result := false ;
41076: LD_ADDR_VAR 0 2
41080: PUSH
41081: LD_INT 0
41083: ST_TO_ADDR
// side := GetSide ( unit ) ;
41084: LD_ADDR_VAR 0 3
41088: PUSH
41089: LD_VAR 0 1
41093: PPUSH
41094: CALL_OW 255
41098: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41099: LD_ADDR_VAR 0 4
41103: PUSH
41104: LD_VAR 0 1
41108: PPUSH
41109: CALL_OW 248
41113: ST_TO_ADDR
// case nat of 1 :
41114: LD_VAR 0 4
41118: PUSH
41119: LD_INT 1
41121: DOUBLE
41122: EQUAL
41123: IFTRUE 41127
41125: GO 41138
41127: POP
// tech := tech_lassight ; 2 :
41128: LD_ADDR_VAR 0 5
41132: PUSH
41133: LD_INT 12
41135: ST_TO_ADDR
41136: GO 41177
41138: LD_INT 2
41140: DOUBLE
41141: EQUAL
41142: IFTRUE 41146
41144: GO 41157
41146: POP
// tech := tech_mortar ; 3 :
41147: LD_ADDR_VAR 0 5
41151: PUSH
41152: LD_INT 41
41154: ST_TO_ADDR
41155: GO 41177
41157: LD_INT 3
41159: DOUBLE
41160: EQUAL
41161: IFTRUE 41165
41163: GO 41176
41165: POP
// tech := tech_bazooka ; end ;
41166: LD_ADDR_VAR 0 5
41170: PUSH
41171: LD_INT 44
41173: ST_TO_ADDR
41174: GO 41177
41176: POP
// if Researched ( side , tech ) then
41177: LD_VAR 0 3
41181: PPUSH
41182: LD_VAR 0 5
41186: PPUSH
41187: CALL_OW 325
41191: IFFALSE 41218
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41193: LD_ADDR_VAR 0 2
41197: PUSH
41198: LD_INT 5
41200: PUSH
41201: LD_INT 8
41203: PUSH
41204: LD_INT 9
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: LIST
41211: PUSH
41212: LD_VAR 0 4
41216: ARRAY
41217: ST_TO_ADDR
// end ;
41218: LD_VAR 0 2
41222: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41223: LD_INT 0
41225: PPUSH
41226: PPUSH
41227: PPUSH
// if not mines then
41228: LD_VAR 0 2
41232: NOT
41233: IFFALSE 41237
// exit ;
41235: GO 41381
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41237: LD_ADDR_VAR 0 5
41241: PUSH
41242: LD_INT 81
41244: PUSH
41245: LD_VAR 0 1
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 3
41256: PUSH
41257: LD_INT 21
41259: PUSH
41260: LD_INT 3
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PPUSH
41275: CALL_OW 69
41279: ST_TO_ADDR
// for i in mines do
41280: LD_ADDR_VAR 0 4
41284: PUSH
41285: LD_VAR 0 2
41289: PUSH
41290: FOR_IN
41291: IFFALSE 41379
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41293: LD_VAR 0 4
41297: PUSH
41298: LD_INT 1
41300: ARRAY
41301: PPUSH
41302: LD_VAR 0 4
41306: PUSH
41307: LD_INT 2
41309: ARRAY
41310: PPUSH
41311: CALL_OW 458
41315: NOT
41316: IFFALSE 41320
// continue ;
41318: GO 41290
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41320: LD_VAR 0 4
41324: PUSH
41325: LD_INT 1
41327: ARRAY
41328: PPUSH
41329: LD_VAR 0 4
41333: PUSH
41334: LD_INT 2
41336: ARRAY
41337: PPUSH
41338: CALL_OW 428
41342: PUSH
41343: LD_VAR 0 5
41347: IN
41348: IFFALSE 41377
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41350: LD_VAR 0 4
41354: PUSH
41355: LD_INT 1
41357: ARRAY
41358: PPUSH
41359: LD_VAR 0 4
41363: PUSH
41364: LD_INT 2
41366: ARRAY
41367: PPUSH
41368: LD_VAR 0 1
41372: PPUSH
41373: CALL_OW 456
// end ;
41377: GO 41290
41379: POP
41380: POP
// end ;
41381: LD_VAR 0 3
41385: RET
// export function Count ( array ) ; var i ; begin
41386: LD_INT 0
41388: PPUSH
41389: PPUSH
// result := 0 ;
41390: LD_ADDR_VAR 0 2
41394: PUSH
41395: LD_INT 0
41397: ST_TO_ADDR
// for i in array do
41398: LD_ADDR_VAR 0 3
41402: PUSH
41403: LD_VAR 0 1
41407: PUSH
41408: FOR_IN
41409: IFFALSE 41433
// if i then
41411: LD_VAR 0 3
41415: IFFALSE 41431
// result := result + 1 ;
41417: LD_ADDR_VAR 0 2
41421: PUSH
41422: LD_VAR 0 2
41426: PUSH
41427: LD_INT 1
41429: PLUS
41430: ST_TO_ADDR
41431: GO 41408
41433: POP
41434: POP
// end ;
41435: LD_VAR 0 2
41439: RET
// export function IsEmpty ( building ) ; begin
41440: LD_INT 0
41442: PPUSH
// if not building then
41443: LD_VAR 0 1
41447: NOT
41448: IFFALSE 41452
// exit ;
41450: GO 41495
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41452: LD_ADDR_VAR 0 2
41456: PUSH
41457: LD_VAR 0 1
41461: PUSH
41462: LD_INT 22
41464: PUSH
41465: LD_VAR 0 1
41469: PPUSH
41470: CALL_OW 255
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 58
41481: PUSH
41482: EMPTY
41483: LIST
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PPUSH
41489: CALL_OW 69
41493: IN
41494: ST_TO_ADDR
// end ;
41495: LD_VAR 0 2
41499: RET
// export function IsNotFull ( building ) ; var places ; begin
41500: LD_INT 0
41502: PPUSH
41503: PPUSH
// if not building then
41504: LD_VAR 0 1
41508: NOT
41509: IFFALSE 41513
// exit ;
41511: GO 41684
// result := false ;
41513: LD_ADDR_VAR 0 2
41517: PUSH
41518: LD_INT 0
41520: ST_TO_ADDR
// places := 0 ;
41521: LD_ADDR_VAR 0 3
41525: PUSH
41526: LD_INT 0
41528: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41529: LD_VAR 0 1
41533: PPUSH
41534: CALL_OW 266
41538: PUSH
41539: LD_INT 0
41541: DOUBLE
41542: EQUAL
41543: IFTRUE 41601
41545: LD_INT 1
41547: DOUBLE
41548: EQUAL
41549: IFTRUE 41601
41551: LD_INT 6
41553: DOUBLE
41554: EQUAL
41555: IFTRUE 41601
41557: LD_INT 7
41559: DOUBLE
41560: EQUAL
41561: IFTRUE 41601
41563: LD_INT 8
41565: DOUBLE
41566: EQUAL
41567: IFTRUE 41601
41569: LD_INT 4
41571: DOUBLE
41572: EQUAL
41573: IFTRUE 41601
41575: LD_INT 5
41577: DOUBLE
41578: EQUAL
41579: IFTRUE 41601
41581: LD_INT 2
41583: DOUBLE
41584: EQUAL
41585: IFTRUE 41601
41587: LD_INT 3
41589: DOUBLE
41590: EQUAL
41591: IFTRUE 41601
41593: LD_INT 35
41595: DOUBLE
41596: EQUAL
41597: IFTRUE 41601
41599: GO 41612
41601: POP
// places := 6 ; b_bunker , b_breastwork :
41602: LD_ADDR_VAR 0 3
41606: PUSH
41607: LD_INT 6
41609: ST_TO_ADDR
41610: GO 41657
41612: LD_INT 32
41614: DOUBLE
41615: EQUAL
41616: IFTRUE 41626
41618: LD_INT 31
41620: DOUBLE
41621: EQUAL
41622: IFTRUE 41626
41624: GO 41637
41626: POP
// places := 1 ; b_control_tower :
41627: LD_ADDR_VAR 0 3
41631: PUSH
41632: LD_INT 1
41634: ST_TO_ADDR
41635: GO 41657
41637: LD_INT 36
41639: DOUBLE
41640: EQUAL
41641: IFTRUE 41645
41643: GO 41656
41645: POP
// places := 3 ; end ;
41646: LD_ADDR_VAR 0 3
41650: PUSH
41651: LD_INT 3
41653: ST_TO_ADDR
41654: GO 41657
41656: POP
// if places then
41657: LD_VAR 0 3
41661: IFFALSE 41684
// result := UnitsInside ( building ) < places ;
41663: LD_ADDR_VAR 0 2
41667: PUSH
41668: LD_VAR 0 1
41672: PPUSH
41673: CALL_OW 313
41677: PUSH
41678: LD_VAR 0 3
41682: LESS
41683: ST_TO_ADDR
// end ;
41684: LD_VAR 0 2
41688: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41689: LD_INT 0
41691: PPUSH
41692: PPUSH
41693: PPUSH
41694: PPUSH
// tmp := [ ] ;
41695: LD_ADDR_VAR 0 3
41699: PUSH
41700: EMPTY
41701: ST_TO_ADDR
// list := [ ] ;
41702: LD_ADDR_VAR 0 5
41706: PUSH
41707: EMPTY
41708: ST_TO_ADDR
// for i = 16 to 25 do
41709: LD_ADDR_VAR 0 4
41713: PUSH
41714: DOUBLE
41715: LD_INT 16
41717: DEC
41718: ST_TO_ADDR
41719: LD_INT 25
41721: PUSH
41722: FOR_TO
41723: IFFALSE 41796
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41725: LD_ADDR_VAR 0 3
41729: PUSH
41730: LD_VAR 0 3
41734: PUSH
41735: LD_INT 22
41737: PUSH
41738: LD_VAR 0 1
41742: PPUSH
41743: CALL_OW 255
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 91
41754: PUSH
41755: LD_VAR 0 1
41759: PUSH
41760: LD_INT 6
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 30
41770: PUSH
41771: LD_VAR 0 4
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: LIST
41784: PUSH
41785: EMPTY
41786: LIST
41787: PPUSH
41788: CALL_OW 69
41792: ADD
41793: ST_TO_ADDR
41794: GO 41722
41796: POP
41797: POP
// for i = 1 to tmp do
41798: LD_ADDR_VAR 0 4
41802: PUSH
41803: DOUBLE
41804: LD_INT 1
41806: DEC
41807: ST_TO_ADDR
41808: LD_VAR 0 3
41812: PUSH
41813: FOR_TO
41814: IFFALSE 41902
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41816: LD_ADDR_VAR 0 5
41820: PUSH
41821: LD_VAR 0 5
41825: PUSH
41826: LD_VAR 0 3
41830: PUSH
41831: LD_VAR 0 4
41835: ARRAY
41836: PPUSH
41837: CALL_OW 266
41841: PUSH
41842: LD_VAR 0 3
41846: PUSH
41847: LD_VAR 0 4
41851: ARRAY
41852: PPUSH
41853: CALL_OW 250
41857: PUSH
41858: LD_VAR 0 3
41862: PUSH
41863: LD_VAR 0 4
41867: ARRAY
41868: PPUSH
41869: CALL_OW 251
41873: PUSH
41874: LD_VAR 0 3
41878: PUSH
41879: LD_VAR 0 4
41883: ARRAY
41884: PPUSH
41885: CALL_OW 254
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: PUSH
41896: EMPTY
41897: LIST
41898: ADD
41899: ST_TO_ADDR
41900: GO 41813
41902: POP
41903: POP
// result := list ;
41904: LD_ADDR_VAR 0 2
41908: PUSH
41909: LD_VAR 0 5
41913: ST_TO_ADDR
// end ;
41914: LD_VAR 0 2
41918: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41919: LD_INT 0
41921: PPUSH
41922: PPUSH
41923: PPUSH
41924: PPUSH
41925: PPUSH
41926: PPUSH
41927: PPUSH
// if not factory then
41928: LD_VAR 0 1
41932: NOT
41933: IFFALSE 41937
// exit ;
41935: GO 42530
// if control = control_apeman then
41937: LD_VAR 0 4
41941: PUSH
41942: LD_INT 5
41944: EQUAL
41945: IFFALSE 42054
// begin tmp := UnitsInside ( factory ) ;
41947: LD_ADDR_VAR 0 8
41951: PUSH
41952: LD_VAR 0 1
41956: PPUSH
41957: CALL_OW 313
41961: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41962: LD_VAR 0 8
41966: PPUSH
41967: LD_INT 25
41969: PUSH
41970: LD_INT 12
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PPUSH
41977: CALL_OW 72
41981: NOT
41982: IFFALSE 41992
// control := control_manual ;
41984: LD_ADDR_VAR 0 4
41988: PUSH
41989: LD_INT 1
41991: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41992: LD_ADDR_VAR 0 8
41996: PUSH
41997: LD_VAR 0 1
42001: PPUSH
42002: CALL 41689 0 1
42006: ST_TO_ADDR
// if tmp then
42007: LD_VAR 0 8
42011: IFFALSE 42054
// begin for i in tmp do
42013: LD_ADDR_VAR 0 7
42017: PUSH
42018: LD_VAR 0 8
42022: PUSH
42023: FOR_IN
42024: IFFALSE 42052
// if i [ 1 ] = b_ext_radio then
42026: LD_VAR 0 7
42030: PUSH
42031: LD_INT 1
42033: ARRAY
42034: PUSH
42035: LD_INT 22
42037: EQUAL
42038: IFFALSE 42050
// begin control := control_remote ;
42040: LD_ADDR_VAR 0 4
42044: PUSH
42045: LD_INT 2
42047: ST_TO_ADDR
// break ;
42048: GO 42052
// end ;
42050: GO 42023
42052: POP
42053: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42054: LD_VAR 0 1
42058: PPUSH
42059: LD_VAR 0 2
42063: PPUSH
42064: LD_VAR 0 3
42068: PPUSH
42069: LD_VAR 0 4
42073: PPUSH
42074: LD_VAR 0 5
42078: PPUSH
42079: CALL_OW 448
42083: IFFALSE 42118
// begin result := [ chassis , engine , control , weapon ] ;
42085: LD_ADDR_VAR 0 6
42089: PUSH
42090: LD_VAR 0 2
42094: PUSH
42095: LD_VAR 0 3
42099: PUSH
42100: LD_VAR 0 4
42104: PUSH
42105: LD_VAR 0 5
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: ST_TO_ADDR
// exit ;
42116: GO 42530
// end ; _chassis := AvailableChassisList ( factory ) ;
42118: LD_ADDR_VAR 0 9
42122: PUSH
42123: LD_VAR 0 1
42127: PPUSH
42128: CALL_OW 475
42132: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42133: LD_ADDR_VAR 0 11
42137: PUSH
42138: LD_VAR 0 1
42142: PPUSH
42143: CALL_OW 476
42147: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42148: LD_ADDR_VAR 0 12
42152: PUSH
42153: LD_VAR 0 1
42157: PPUSH
42158: CALL_OW 477
42162: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42163: LD_ADDR_VAR 0 10
42167: PUSH
42168: LD_VAR 0 1
42172: PPUSH
42173: CALL_OW 478
42177: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42178: LD_VAR 0 9
42182: NOT
42183: PUSH
42184: LD_VAR 0 11
42188: NOT
42189: OR
42190: PUSH
42191: LD_VAR 0 12
42195: NOT
42196: OR
42197: PUSH
42198: LD_VAR 0 10
42202: NOT
42203: OR
42204: IFFALSE 42239
// begin result := [ chassis , engine , control , weapon ] ;
42206: LD_ADDR_VAR 0 6
42210: PUSH
42211: LD_VAR 0 2
42215: PUSH
42216: LD_VAR 0 3
42220: PUSH
42221: LD_VAR 0 4
42225: PUSH
42226: LD_VAR 0 5
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: ST_TO_ADDR
// exit ;
42237: GO 42530
// end ; if not chassis in _chassis then
42239: LD_VAR 0 2
42243: PUSH
42244: LD_VAR 0 9
42248: IN
42249: NOT
42250: IFFALSE 42276
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42252: LD_ADDR_VAR 0 2
42256: PUSH
42257: LD_VAR 0 9
42261: PUSH
42262: LD_INT 1
42264: PPUSH
42265: LD_VAR 0 9
42269: PPUSH
42270: CALL_OW 12
42274: ARRAY
42275: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42276: LD_VAR 0 2
42280: PPUSH
42281: LD_VAR 0 3
42285: PPUSH
42286: CALL 42535 0 2
42290: NOT
42291: IFFALSE 42350
// repeat engine := _engine [ 1 ] ;
42293: LD_ADDR_VAR 0 3
42297: PUSH
42298: LD_VAR 0 11
42302: PUSH
42303: LD_INT 1
42305: ARRAY
42306: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42307: LD_ADDR_VAR 0 11
42311: PUSH
42312: LD_VAR 0 11
42316: PPUSH
42317: LD_INT 1
42319: PPUSH
42320: CALL_OW 3
42324: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42325: LD_VAR 0 2
42329: PPUSH
42330: LD_VAR 0 3
42334: PPUSH
42335: CALL 42535 0 2
42339: PUSH
42340: LD_VAR 0 11
42344: PUSH
42345: EMPTY
42346: EQUAL
42347: OR
42348: IFFALSE 42293
// if not control in _control then
42350: LD_VAR 0 4
42354: PUSH
42355: LD_VAR 0 12
42359: IN
42360: NOT
42361: IFFALSE 42387
// control := _control [ rand ( 1 , _control ) ] ;
42363: LD_ADDR_VAR 0 4
42367: PUSH
42368: LD_VAR 0 12
42372: PUSH
42373: LD_INT 1
42375: PPUSH
42376: LD_VAR 0 12
42380: PPUSH
42381: CALL_OW 12
42385: ARRAY
42386: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42387: LD_VAR 0 2
42391: PPUSH
42392: LD_VAR 0 5
42396: PPUSH
42397: CALL 42755 0 2
42401: NOT
42402: IFFALSE 42461
// repeat weapon := _weapon [ 1 ] ;
42404: LD_ADDR_VAR 0 5
42408: PUSH
42409: LD_VAR 0 10
42413: PUSH
42414: LD_INT 1
42416: ARRAY
42417: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42418: LD_ADDR_VAR 0 10
42422: PUSH
42423: LD_VAR 0 10
42427: PPUSH
42428: LD_INT 1
42430: PPUSH
42431: CALL_OW 3
42435: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42436: LD_VAR 0 2
42440: PPUSH
42441: LD_VAR 0 5
42445: PPUSH
42446: CALL 42755 0 2
42450: PUSH
42451: LD_VAR 0 10
42455: PUSH
42456: EMPTY
42457: EQUAL
42458: OR
42459: IFFALSE 42404
// result := [ ] ;
42461: LD_ADDR_VAR 0 6
42465: PUSH
42466: EMPTY
42467: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42468: LD_VAR 0 1
42472: PPUSH
42473: LD_VAR 0 2
42477: PPUSH
42478: LD_VAR 0 3
42482: PPUSH
42483: LD_VAR 0 4
42487: PPUSH
42488: LD_VAR 0 5
42492: PPUSH
42493: CALL_OW 448
42497: IFFALSE 42530
// result := [ chassis , engine , control , weapon ] ;
42499: LD_ADDR_VAR 0 6
42503: PUSH
42504: LD_VAR 0 2
42508: PUSH
42509: LD_VAR 0 3
42513: PUSH
42514: LD_VAR 0 4
42518: PUSH
42519: LD_VAR 0 5
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: ST_TO_ADDR
// end ;
42530: LD_VAR 0 6
42534: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42535: LD_INT 0
42537: PPUSH
// if not chassis or not engine then
42538: LD_VAR 0 1
42542: NOT
42543: PUSH
42544: LD_VAR 0 2
42548: NOT
42549: OR
42550: IFFALSE 42554
// exit ;
42552: GO 42750
// case engine of engine_solar :
42554: LD_VAR 0 2
42558: PUSH
42559: LD_INT 2
42561: DOUBLE
42562: EQUAL
42563: IFTRUE 42567
42565: GO 42605
42567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42568: LD_ADDR_VAR 0 3
42572: PUSH
42573: LD_INT 11
42575: PUSH
42576: LD_INT 12
42578: PUSH
42579: LD_INT 13
42581: PUSH
42582: LD_INT 14
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: LD_INT 3
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: ST_TO_ADDR
42603: GO 42734
42605: LD_INT 1
42607: DOUBLE
42608: EQUAL
42609: IFTRUE 42613
42611: GO 42675
42613: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42614: LD_ADDR_VAR 0 3
42618: PUSH
42619: LD_INT 11
42621: PUSH
42622: LD_INT 12
42624: PUSH
42625: LD_INT 13
42627: PUSH
42628: LD_INT 14
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: LD_INT 3
42639: PUSH
42640: LD_INT 4
42642: PUSH
42643: LD_INT 5
42645: PUSH
42646: LD_INT 21
42648: PUSH
42649: LD_INT 23
42651: PUSH
42652: LD_INT 22
42654: PUSH
42655: LD_INT 24
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: ST_TO_ADDR
42673: GO 42734
42675: LD_INT 3
42677: DOUBLE
42678: EQUAL
42679: IFTRUE 42683
42681: GO 42733
42683: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42684: LD_ADDR_VAR 0 3
42688: PUSH
42689: LD_INT 13
42691: PUSH
42692: LD_INT 14
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: LD_INT 3
42700: PUSH
42701: LD_INT 4
42703: PUSH
42704: LD_INT 5
42706: PUSH
42707: LD_INT 21
42709: PUSH
42710: LD_INT 22
42712: PUSH
42713: LD_INT 23
42715: PUSH
42716: LD_INT 24
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: ST_TO_ADDR
42731: GO 42734
42733: POP
// result := ( chassis in result ) ;
42734: LD_ADDR_VAR 0 3
42738: PUSH
42739: LD_VAR 0 1
42743: PUSH
42744: LD_VAR 0 3
42748: IN
42749: ST_TO_ADDR
// end ;
42750: LD_VAR 0 3
42754: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42755: LD_INT 0
42757: PPUSH
// if not chassis or not weapon then
42758: LD_VAR 0 1
42762: NOT
42763: PUSH
42764: LD_VAR 0 2
42768: NOT
42769: OR
42770: IFFALSE 42774
// exit ;
42772: GO 43834
// case weapon of us_machine_gun :
42774: LD_VAR 0 2
42778: PUSH
42779: LD_INT 2
42781: DOUBLE
42782: EQUAL
42783: IFTRUE 42787
42785: GO 42817
42787: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42788: LD_ADDR_VAR 0 3
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: LD_INT 2
42798: PUSH
42799: LD_INT 3
42801: PUSH
42802: LD_INT 4
42804: PUSH
42805: LD_INT 5
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: ST_TO_ADDR
42815: GO 43818
42817: LD_INT 3
42819: DOUBLE
42820: EQUAL
42821: IFTRUE 42825
42823: GO 42855
42825: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42826: LD_ADDR_VAR 0 3
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: LD_INT 2
42836: PUSH
42837: LD_INT 3
42839: PUSH
42840: LD_INT 4
42842: PUSH
42843: LD_INT 5
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: ST_TO_ADDR
42853: GO 43818
42855: LD_INT 11
42857: DOUBLE
42858: EQUAL
42859: IFTRUE 42863
42861: GO 42893
42863: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42864: LD_ADDR_VAR 0 3
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: LD_INT 3
42877: PUSH
42878: LD_INT 4
42880: PUSH
42881: LD_INT 5
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: ST_TO_ADDR
42891: GO 43818
42893: LD_INT 4
42895: DOUBLE
42896: EQUAL
42897: IFTRUE 42901
42899: GO 42927
42901: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42902: LD_ADDR_VAR 0 3
42906: PUSH
42907: LD_INT 2
42909: PUSH
42910: LD_INT 3
42912: PUSH
42913: LD_INT 4
42915: PUSH
42916: LD_INT 5
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: ST_TO_ADDR
42925: GO 43818
42927: LD_INT 5
42929: DOUBLE
42930: EQUAL
42931: IFTRUE 42935
42933: GO 42961
42935: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42936: LD_ADDR_VAR 0 3
42940: PUSH
42941: LD_INT 2
42943: PUSH
42944: LD_INT 3
42946: PUSH
42947: LD_INT 4
42949: PUSH
42950: LD_INT 5
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: ST_TO_ADDR
42959: GO 43818
42961: LD_INT 9
42963: DOUBLE
42964: EQUAL
42965: IFTRUE 42969
42967: GO 42995
42969: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42970: LD_ADDR_VAR 0 3
42974: PUSH
42975: LD_INT 2
42977: PUSH
42978: LD_INT 3
42980: PUSH
42981: LD_INT 4
42983: PUSH
42984: LD_INT 5
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: ST_TO_ADDR
42993: GO 43818
42995: LD_INT 7
42997: DOUBLE
42998: EQUAL
42999: IFTRUE 43003
43001: GO 43029
43003: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43004: LD_ADDR_VAR 0 3
43008: PUSH
43009: LD_INT 2
43011: PUSH
43012: LD_INT 3
43014: PUSH
43015: LD_INT 4
43017: PUSH
43018: LD_INT 5
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: ST_TO_ADDR
43027: GO 43818
43029: LD_INT 12
43031: DOUBLE
43032: EQUAL
43033: IFTRUE 43037
43035: GO 43063
43037: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43038: LD_ADDR_VAR 0 3
43042: PUSH
43043: LD_INT 2
43045: PUSH
43046: LD_INT 3
43048: PUSH
43049: LD_INT 4
43051: PUSH
43052: LD_INT 5
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: ST_TO_ADDR
43061: GO 43818
43063: LD_INT 13
43065: DOUBLE
43066: EQUAL
43067: IFTRUE 43071
43069: GO 43097
43071: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43072: LD_ADDR_VAR 0 3
43076: PUSH
43077: LD_INT 2
43079: PUSH
43080: LD_INT 3
43082: PUSH
43083: LD_INT 4
43085: PUSH
43086: LD_INT 5
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: ST_TO_ADDR
43095: GO 43818
43097: LD_INT 14
43099: DOUBLE
43100: EQUAL
43101: IFTRUE 43105
43103: GO 43123
43105: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43106: LD_ADDR_VAR 0 3
43110: PUSH
43111: LD_INT 4
43113: PUSH
43114: LD_INT 5
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: ST_TO_ADDR
43121: GO 43818
43123: LD_INT 6
43125: DOUBLE
43126: EQUAL
43127: IFTRUE 43131
43129: GO 43149
43131: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43132: LD_ADDR_VAR 0 3
43136: PUSH
43137: LD_INT 4
43139: PUSH
43140: LD_INT 5
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: ST_TO_ADDR
43147: GO 43818
43149: LD_INT 10
43151: DOUBLE
43152: EQUAL
43153: IFTRUE 43157
43155: GO 43175
43157: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43158: LD_ADDR_VAR 0 3
43162: PUSH
43163: LD_INT 4
43165: PUSH
43166: LD_INT 5
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: ST_TO_ADDR
43173: GO 43818
43175: LD_INT 22
43177: DOUBLE
43178: EQUAL
43179: IFTRUE 43183
43181: GO 43209
43183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43184: LD_ADDR_VAR 0 3
43188: PUSH
43189: LD_INT 11
43191: PUSH
43192: LD_INT 12
43194: PUSH
43195: LD_INT 13
43197: PUSH
43198: LD_INT 14
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: ST_TO_ADDR
43207: GO 43818
43209: LD_INT 23
43211: DOUBLE
43212: EQUAL
43213: IFTRUE 43217
43215: GO 43243
43217: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43218: LD_ADDR_VAR 0 3
43222: PUSH
43223: LD_INT 11
43225: PUSH
43226: LD_INT 12
43228: PUSH
43229: LD_INT 13
43231: PUSH
43232: LD_INT 14
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: ST_TO_ADDR
43241: GO 43818
43243: LD_INT 24
43245: DOUBLE
43246: EQUAL
43247: IFTRUE 43251
43249: GO 43277
43251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43252: LD_ADDR_VAR 0 3
43256: PUSH
43257: LD_INT 11
43259: PUSH
43260: LD_INT 12
43262: PUSH
43263: LD_INT 13
43265: PUSH
43266: LD_INT 14
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: ST_TO_ADDR
43275: GO 43818
43277: LD_INT 30
43279: DOUBLE
43280: EQUAL
43281: IFTRUE 43285
43283: GO 43311
43285: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43286: LD_ADDR_VAR 0 3
43290: PUSH
43291: LD_INT 11
43293: PUSH
43294: LD_INT 12
43296: PUSH
43297: LD_INT 13
43299: PUSH
43300: LD_INT 14
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: ST_TO_ADDR
43309: GO 43818
43311: LD_INT 25
43313: DOUBLE
43314: EQUAL
43315: IFTRUE 43319
43317: GO 43337
43319: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43320: LD_ADDR_VAR 0 3
43324: PUSH
43325: LD_INT 13
43327: PUSH
43328: LD_INT 14
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: ST_TO_ADDR
43335: GO 43818
43337: LD_INT 27
43339: DOUBLE
43340: EQUAL
43341: IFTRUE 43345
43343: GO 43363
43345: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43346: LD_ADDR_VAR 0 3
43350: PUSH
43351: LD_INT 13
43353: PUSH
43354: LD_INT 14
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: ST_TO_ADDR
43361: GO 43818
43363: LD_INT 92
43365: DOUBLE
43366: EQUAL
43367: IFTRUE 43371
43369: GO 43397
43371: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43372: LD_ADDR_VAR 0 3
43376: PUSH
43377: LD_INT 11
43379: PUSH
43380: LD_INT 12
43382: PUSH
43383: LD_INT 13
43385: PUSH
43386: LD_INT 14
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: ST_TO_ADDR
43395: GO 43818
43397: LD_INT 28
43399: DOUBLE
43400: EQUAL
43401: IFTRUE 43405
43403: GO 43423
43405: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43406: LD_ADDR_VAR 0 3
43410: PUSH
43411: LD_INT 13
43413: PUSH
43414: LD_INT 14
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: ST_TO_ADDR
43421: GO 43818
43423: LD_INT 29
43425: DOUBLE
43426: EQUAL
43427: IFTRUE 43431
43429: GO 43449
43431: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43432: LD_ADDR_VAR 0 3
43436: PUSH
43437: LD_INT 13
43439: PUSH
43440: LD_INT 14
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: ST_TO_ADDR
43447: GO 43818
43449: LD_INT 31
43451: DOUBLE
43452: EQUAL
43453: IFTRUE 43457
43455: GO 43475
43457: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43458: LD_ADDR_VAR 0 3
43462: PUSH
43463: LD_INT 13
43465: PUSH
43466: LD_INT 14
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: ST_TO_ADDR
43473: GO 43818
43475: LD_INT 26
43477: DOUBLE
43478: EQUAL
43479: IFTRUE 43483
43481: GO 43501
43483: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43484: LD_ADDR_VAR 0 3
43488: PUSH
43489: LD_INT 13
43491: PUSH
43492: LD_INT 14
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: ST_TO_ADDR
43499: GO 43818
43501: LD_INT 42
43503: DOUBLE
43504: EQUAL
43505: IFTRUE 43509
43507: GO 43535
43509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43510: LD_ADDR_VAR 0 3
43514: PUSH
43515: LD_INT 21
43517: PUSH
43518: LD_INT 22
43520: PUSH
43521: LD_INT 23
43523: PUSH
43524: LD_INT 24
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: ST_TO_ADDR
43533: GO 43818
43535: LD_INT 43
43537: DOUBLE
43538: EQUAL
43539: IFTRUE 43543
43541: GO 43569
43543: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43544: LD_ADDR_VAR 0 3
43548: PUSH
43549: LD_INT 21
43551: PUSH
43552: LD_INT 22
43554: PUSH
43555: LD_INT 23
43557: PUSH
43558: LD_INT 24
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: ST_TO_ADDR
43567: GO 43818
43569: LD_INT 44
43571: DOUBLE
43572: EQUAL
43573: IFTRUE 43577
43575: GO 43603
43577: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43578: LD_ADDR_VAR 0 3
43582: PUSH
43583: LD_INT 21
43585: PUSH
43586: LD_INT 22
43588: PUSH
43589: LD_INT 23
43591: PUSH
43592: LD_INT 24
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: ST_TO_ADDR
43601: GO 43818
43603: LD_INT 45
43605: DOUBLE
43606: EQUAL
43607: IFTRUE 43611
43609: GO 43637
43611: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43612: LD_ADDR_VAR 0 3
43616: PUSH
43617: LD_INT 21
43619: PUSH
43620: LD_INT 22
43622: PUSH
43623: LD_INT 23
43625: PUSH
43626: LD_INT 24
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: ST_TO_ADDR
43635: GO 43818
43637: LD_INT 49
43639: DOUBLE
43640: EQUAL
43641: IFTRUE 43645
43643: GO 43671
43645: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43646: LD_ADDR_VAR 0 3
43650: PUSH
43651: LD_INT 21
43653: PUSH
43654: LD_INT 22
43656: PUSH
43657: LD_INT 23
43659: PUSH
43660: LD_INT 24
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: ST_TO_ADDR
43669: GO 43818
43671: LD_INT 51
43673: DOUBLE
43674: EQUAL
43675: IFTRUE 43679
43677: GO 43705
43679: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43680: LD_ADDR_VAR 0 3
43684: PUSH
43685: LD_INT 21
43687: PUSH
43688: LD_INT 22
43690: PUSH
43691: LD_INT 23
43693: PUSH
43694: LD_INT 24
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: ST_TO_ADDR
43703: GO 43818
43705: LD_INT 52
43707: DOUBLE
43708: EQUAL
43709: IFTRUE 43713
43711: GO 43739
43713: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43714: LD_ADDR_VAR 0 3
43718: PUSH
43719: LD_INT 21
43721: PUSH
43722: LD_INT 22
43724: PUSH
43725: LD_INT 23
43727: PUSH
43728: LD_INT 24
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: ST_TO_ADDR
43737: GO 43818
43739: LD_INT 53
43741: DOUBLE
43742: EQUAL
43743: IFTRUE 43747
43745: GO 43765
43747: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43748: LD_ADDR_VAR 0 3
43752: PUSH
43753: LD_INT 23
43755: PUSH
43756: LD_INT 24
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: ST_TO_ADDR
43763: GO 43818
43765: LD_INT 46
43767: DOUBLE
43768: EQUAL
43769: IFTRUE 43773
43771: GO 43791
43773: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43774: LD_ADDR_VAR 0 3
43778: PUSH
43779: LD_INT 23
43781: PUSH
43782: LD_INT 24
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: ST_TO_ADDR
43789: GO 43818
43791: LD_INT 47
43793: DOUBLE
43794: EQUAL
43795: IFTRUE 43799
43797: GO 43817
43799: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43800: LD_ADDR_VAR 0 3
43804: PUSH
43805: LD_INT 23
43807: PUSH
43808: LD_INT 24
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: ST_TO_ADDR
43815: GO 43818
43817: POP
// result := ( chassis in result ) ;
43818: LD_ADDR_VAR 0 3
43822: PUSH
43823: LD_VAR 0 1
43827: PUSH
43828: LD_VAR 0 3
43832: IN
43833: ST_TO_ADDR
// end ;
43834: LD_VAR 0 3
43838: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43839: LD_INT 0
43841: PPUSH
43842: PPUSH
43843: PPUSH
43844: PPUSH
43845: PPUSH
43846: PPUSH
43847: PPUSH
// result := array ;
43848: LD_ADDR_VAR 0 5
43852: PUSH
43853: LD_VAR 0 1
43857: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43858: LD_VAR 0 1
43862: NOT
43863: PUSH
43864: LD_VAR 0 2
43868: NOT
43869: OR
43870: PUSH
43871: LD_VAR 0 3
43875: NOT
43876: OR
43877: PUSH
43878: LD_VAR 0 2
43882: PUSH
43883: LD_VAR 0 1
43887: GREATER
43888: OR
43889: PUSH
43890: LD_VAR 0 3
43894: PUSH
43895: LD_VAR 0 1
43899: GREATER
43900: OR
43901: IFFALSE 43905
// exit ;
43903: GO 44201
// if direction then
43905: LD_VAR 0 4
43909: IFFALSE 43973
// begin d := 1 ;
43911: LD_ADDR_VAR 0 9
43915: PUSH
43916: LD_INT 1
43918: ST_TO_ADDR
// if i_from > i_to then
43919: LD_VAR 0 2
43923: PUSH
43924: LD_VAR 0 3
43928: GREATER
43929: IFFALSE 43955
// length := ( array - i_from ) + i_to else
43931: LD_ADDR_VAR 0 11
43935: PUSH
43936: LD_VAR 0 1
43940: PUSH
43941: LD_VAR 0 2
43945: MINUS
43946: PUSH
43947: LD_VAR 0 3
43951: PLUS
43952: ST_TO_ADDR
43953: GO 43971
// length := i_to - i_from ;
43955: LD_ADDR_VAR 0 11
43959: PUSH
43960: LD_VAR 0 3
43964: PUSH
43965: LD_VAR 0 2
43969: MINUS
43970: ST_TO_ADDR
// end else
43971: GO 44034
// begin d := - 1 ;
43973: LD_ADDR_VAR 0 9
43977: PUSH
43978: LD_INT 1
43980: NEG
43981: ST_TO_ADDR
// if i_from > i_to then
43982: LD_VAR 0 2
43986: PUSH
43987: LD_VAR 0 3
43991: GREATER
43992: IFFALSE 44012
// length := i_from - i_to else
43994: LD_ADDR_VAR 0 11
43998: PUSH
43999: LD_VAR 0 2
44003: PUSH
44004: LD_VAR 0 3
44008: MINUS
44009: ST_TO_ADDR
44010: GO 44034
// length := ( array - i_to ) + i_from ;
44012: LD_ADDR_VAR 0 11
44016: PUSH
44017: LD_VAR 0 1
44021: PUSH
44022: LD_VAR 0 3
44026: MINUS
44027: PUSH
44028: LD_VAR 0 2
44032: PLUS
44033: ST_TO_ADDR
// end ; if not length then
44034: LD_VAR 0 11
44038: NOT
44039: IFFALSE 44043
// exit ;
44041: GO 44201
// tmp := array ;
44043: LD_ADDR_VAR 0 10
44047: PUSH
44048: LD_VAR 0 1
44052: ST_TO_ADDR
// for i = 1 to length do
44053: LD_ADDR_VAR 0 6
44057: PUSH
44058: DOUBLE
44059: LD_INT 1
44061: DEC
44062: ST_TO_ADDR
44063: LD_VAR 0 11
44067: PUSH
44068: FOR_TO
44069: IFFALSE 44189
// begin for j = 1 to array do
44071: LD_ADDR_VAR 0 7
44075: PUSH
44076: DOUBLE
44077: LD_INT 1
44079: DEC
44080: ST_TO_ADDR
44081: LD_VAR 0 1
44085: PUSH
44086: FOR_TO
44087: IFFALSE 44175
// begin k := j + d ;
44089: LD_ADDR_VAR 0 8
44093: PUSH
44094: LD_VAR 0 7
44098: PUSH
44099: LD_VAR 0 9
44103: PLUS
44104: ST_TO_ADDR
// if k > array then
44105: LD_VAR 0 8
44109: PUSH
44110: LD_VAR 0 1
44114: GREATER
44115: IFFALSE 44125
// k := 1 ;
44117: LD_ADDR_VAR 0 8
44121: PUSH
44122: LD_INT 1
44124: ST_TO_ADDR
// if not k then
44125: LD_VAR 0 8
44129: NOT
44130: IFFALSE 44142
// k := array ;
44132: LD_ADDR_VAR 0 8
44136: PUSH
44137: LD_VAR 0 1
44141: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44142: LD_ADDR_VAR 0 10
44146: PUSH
44147: LD_VAR 0 10
44151: PPUSH
44152: LD_VAR 0 8
44156: PPUSH
44157: LD_VAR 0 1
44161: PUSH
44162: LD_VAR 0 7
44166: ARRAY
44167: PPUSH
44168: CALL_OW 1
44172: ST_TO_ADDR
// end ;
44173: GO 44086
44175: POP
44176: POP
// array := tmp ;
44177: LD_ADDR_VAR 0 1
44181: PUSH
44182: LD_VAR 0 10
44186: ST_TO_ADDR
// end ;
44187: GO 44068
44189: POP
44190: POP
// result := array ;
44191: LD_ADDR_VAR 0 5
44195: PUSH
44196: LD_VAR 0 1
44200: ST_TO_ADDR
// end ;
44201: LD_VAR 0 5
44205: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44206: LD_INT 0
44208: PPUSH
44209: PPUSH
// result := 0 ;
44210: LD_ADDR_VAR 0 3
44214: PUSH
44215: LD_INT 0
44217: ST_TO_ADDR
// if not array or not value in array then
44218: LD_VAR 0 1
44222: NOT
44223: PUSH
44224: LD_VAR 0 2
44228: PUSH
44229: LD_VAR 0 1
44233: IN
44234: NOT
44235: OR
44236: IFFALSE 44240
// exit ;
44238: GO 44294
// for i = 1 to array do
44240: LD_ADDR_VAR 0 4
44244: PUSH
44245: DOUBLE
44246: LD_INT 1
44248: DEC
44249: ST_TO_ADDR
44250: LD_VAR 0 1
44254: PUSH
44255: FOR_TO
44256: IFFALSE 44292
// if value = array [ i ] then
44258: LD_VAR 0 2
44262: PUSH
44263: LD_VAR 0 1
44267: PUSH
44268: LD_VAR 0 4
44272: ARRAY
44273: EQUAL
44274: IFFALSE 44290
// begin result := i ;
44276: LD_ADDR_VAR 0 3
44280: PUSH
44281: LD_VAR 0 4
44285: ST_TO_ADDR
// exit ;
44286: POP
44287: POP
44288: GO 44294
// end ;
44290: GO 44255
44292: POP
44293: POP
// end ;
44294: LD_VAR 0 3
44298: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44299: LD_INT 0
44301: PPUSH
// vc_chassis := chassis ;
44302: LD_ADDR_OWVAR 37
44306: PUSH
44307: LD_VAR 0 1
44311: ST_TO_ADDR
// vc_engine := engine ;
44312: LD_ADDR_OWVAR 39
44316: PUSH
44317: LD_VAR 0 2
44321: ST_TO_ADDR
// vc_control := control ;
44322: LD_ADDR_OWVAR 38
44326: PUSH
44327: LD_VAR 0 3
44331: ST_TO_ADDR
// vc_weapon := weapon ;
44332: LD_ADDR_OWVAR 40
44336: PUSH
44337: LD_VAR 0 4
44341: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44342: LD_ADDR_OWVAR 41
44346: PUSH
44347: LD_VAR 0 5
44351: ST_TO_ADDR
// end ;
44352: LD_VAR 0 6
44356: RET
// export function WantPlant ( unit ) ; var task ; begin
44357: LD_INT 0
44359: PPUSH
44360: PPUSH
// result := false ;
44361: LD_ADDR_VAR 0 2
44365: PUSH
44366: LD_INT 0
44368: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44369: LD_ADDR_VAR 0 3
44373: PUSH
44374: LD_VAR 0 1
44378: PPUSH
44379: CALL_OW 437
44383: ST_TO_ADDR
// if task then
44384: LD_VAR 0 3
44388: IFFALSE 44416
// if task [ 1 ] [ 1 ] = p then
44390: LD_VAR 0 3
44394: PUSH
44395: LD_INT 1
44397: ARRAY
44398: PUSH
44399: LD_INT 1
44401: ARRAY
44402: PUSH
44403: LD_STRING p
44405: EQUAL
44406: IFFALSE 44416
// result := true ;
44408: LD_ADDR_VAR 0 2
44412: PUSH
44413: LD_INT 1
44415: ST_TO_ADDR
// end ;
44416: LD_VAR 0 2
44420: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44421: LD_INT 0
44423: PPUSH
44424: PPUSH
44425: PPUSH
44426: PPUSH
// if pos < 1 then
44427: LD_VAR 0 2
44431: PUSH
44432: LD_INT 1
44434: LESS
44435: IFFALSE 44439
// exit ;
44437: GO 44742
// if pos = 1 then
44439: LD_VAR 0 2
44443: PUSH
44444: LD_INT 1
44446: EQUAL
44447: IFFALSE 44480
// result := Replace ( arr , pos [ 1 ] , value ) else
44449: LD_ADDR_VAR 0 4
44453: PUSH
44454: LD_VAR 0 1
44458: PPUSH
44459: LD_VAR 0 2
44463: PUSH
44464: LD_INT 1
44466: ARRAY
44467: PPUSH
44468: LD_VAR 0 3
44472: PPUSH
44473: CALL_OW 1
44477: ST_TO_ADDR
44478: GO 44742
// begin tmp := arr ;
44480: LD_ADDR_VAR 0 6
44484: PUSH
44485: LD_VAR 0 1
44489: ST_TO_ADDR
// s_arr := [ tmp ] ;
44490: LD_ADDR_VAR 0 7
44494: PUSH
44495: LD_VAR 0 6
44499: PUSH
44500: EMPTY
44501: LIST
44502: ST_TO_ADDR
// for i = 1 to pos - 1 do
44503: LD_ADDR_VAR 0 5
44507: PUSH
44508: DOUBLE
44509: LD_INT 1
44511: DEC
44512: ST_TO_ADDR
44513: LD_VAR 0 2
44517: PUSH
44518: LD_INT 1
44520: MINUS
44521: PUSH
44522: FOR_TO
44523: IFFALSE 44568
// begin tmp := tmp [ pos [ i ] ] ;
44525: LD_ADDR_VAR 0 6
44529: PUSH
44530: LD_VAR 0 6
44534: PUSH
44535: LD_VAR 0 2
44539: PUSH
44540: LD_VAR 0 5
44544: ARRAY
44545: ARRAY
44546: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44547: LD_ADDR_VAR 0 7
44551: PUSH
44552: LD_VAR 0 7
44556: PUSH
44557: LD_VAR 0 6
44561: PUSH
44562: EMPTY
44563: LIST
44564: ADD
44565: ST_TO_ADDR
// end ;
44566: GO 44522
44568: POP
44569: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44570: LD_ADDR_VAR 0 6
44574: PUSH
44575: LD_VAR 0 6
44579: PPUSH
44580: LD_VAR 0 2
44584: PUSH
44585: LD_VAR 0 2
44589: ARRAY
44590: PPUSH
44591: LD_VAR 0 3
44595: PPUSH
44596: CALL_OW 1
44600: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44601: LD_ADDR_VAR 0 7
44605: PUSH
44606: LD_VAR 0 7
44610: PPUSH
44611: LD_VAR 0 7
44615: PPUSH
44616: LD_VAR 0 6
44620: PPUSH
44621: CALL_OW 1
44625: ST_TO_ADDR
// for i = s_arr downto 2 do
44626: LD_ADDR_VAR 0 5
44630: PUSH
44631: DOUBLE
44632: LD_VAR 0 7
44636: INC
44637: ST_TO_ADDR
44638: LD_INT 2
44640: PUSH
44641: FOR_DOWNTO
44642: IFFALSE 44726
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44644: LD_ADDR_VAR 0 6
44648: PUSH
44649: LD_VAR 0 7
44653: PUSH
44654: LD_VAR 0 5
44658: PUSH
44659: LD_INT 1
44661: MINUS
44662: ARRAY
44663: PPUSH
44664: LD_VAR 0 2
44668: PUSH
44669: LD_VAR 0 5
44673: PUSH
44674: LD_INT 1
44676: MINUS
44677: ARRAY
44678: PPUSH
44679: LD_VAR 0 7
44683: PUSH
44684: LD_VAR 0 5
44688: ARRAY
44689: PPUSH
44690: CALL_OW 1
44694: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44695: LD_ADDR_VAR 0 7
44699: PUSH
44700: LD_VAR 0 7
44704: PPUSH
44705: LD_VAR 0 5
44709: PUSH
44710: LD_INT 1
44712: MINUS
44713: PPUSH
44714: LD_VAR 0 6
44718: PPUSH
44719: CALL_OW 1
44723: ST_TO_ADDR
// end ;
44724: GO 44641
44726: POP
44727: POP
// result := s_arr [ 1 ] ;
44728: LD_ADDR_VAR 0 4
44732: PUSH
44733: LD_VAR 0 7
44737: PUSH
44738: LD_INT 1
44740: ARRAY
44741: ST_TO_ADDR
// end ; end ;
44742: LD_VAR 0 4
44746: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44747: LD_INT 0
44749: PPUSH
44750: PPUSH
// if not list then
44751: LD_VAR 0 1
44755: NOT
44756: IFFALSE 44760
// exit ;
44758: GO 44851
// i := list [ pos1 ] ;
44760: LD_ADDR_VAR 0 5
44764: PUSH
44765: LD_VAR 0 1
44769: PUSH
44770: LD_VAR 0 2
44774: ARRAY
44775: ST_TO_ADDR
// if not i then
44776: LD_VAR 0 5
44780: NOT
44781: IFFALSE 44785
// exit ;
44783: GO 44851
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44785: LD_ADDR_VAR 0 1
44789: PUSH
44790: LD_VAR 0 1
44794: PPUSH
44795: LD_VAR 0 2
44799: PPUSH
44800: LD_VAR 0 1
44804: PUSH
44805: LD_VAR 0 3
44809: ARRAY
44810: PPUSH
44811: CALL_OW 1
44815: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44816: LD_ADDR_VAR 0 1
44820: PUSH
44821: LD_VAR 0 1
44825: PPUSH
44826: LD_VAR 0 3
44830: PPUSH
44831: LD_VAR 0 5
44835: PPUSH
44836: CALL_OW 1
44840: ST_TO_ADDR
// result := list ;
44841: LD_ADDR_VAR 0 4
44845: PUSH
44846: LD_VAR 0 1
44850: ST_TO_ADDR
// end ;
44851: LD_VAR 0 4
44855: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44856: LD_INT 0
44858: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44859: LD_ADDR_VAR 0 5
44863: PUSH
44864: LD_VAR 0 1
44868: PPUSH
44869: CALL_OW 250
44873: PPUSH
44874: LD_VAR 0 1
44878: PPUSH
44879: CALL_OW 251
44883: PPUSH
44884: LD_VAR 0 2
44888: PPUSH
44889: LD_VAR 0 3
44893: PPUSH
44894: LD_VAR 0 4
44898: PPUSH
44899: CALL 44909 0 5
44903: ST_TO_ADDR
// end ;
44904: LD_VAR 0 5
44908: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44909: LD_INT 0
44911: PPUSH
44912: PPUSH
44913: PPUSH
44914: PPUSH
// if not list then
44915: LD_VAR 0 3
44919: NOT
44920: IFFALSE 44924
// exit ;
44922: GO 45312
// result := [ ] ;
44924: LD_ADDR_VAR 0 6
44928: PUSH
44929: EMPTY
44930: ST_TO_ADDR
// for i in list do
44931: LD_ADDR_VAR 0 7
44935: PUSH
44936: LD_VAR 0 3
44940: PUSH
44941: FOR_IN
44942: IFFALSE 45144
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44944: LD_ADDR_VAR 0 9
44948: PUSH
44949: LD_VAR 0 7
44953: PPUSH
44954: LD_VAR 0 1
44958: PPUSH
44959: LD_VAR 0 2
44963: PPUSH
44964: CALL_OW 297
44968: ST_TO_ADDR
// if not result then
44969: LD_VAR 0 6
44973: NOT
44974: IFFALSE 45000
// result := [ [ i , tmp ] ] else
44976: LD_ADDR_VAR 0 6
44980: PUSH
44981: LD_VAR 0 7
44985: PUSH
44986: LD_VAR 0 9
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: EMPTY
44996: LIST
44997: ST_TO_ADDR
44998: GO 45142
// begin if result [ result ] [ 2 ] < tmp then
45000: LD_VAR 0 6
45004: PUSH
45005: LD_VAR 0 6
45009: ARRAY
45010: PUSH
45011: LD_INT 2
45013: ARRAY
45014: PUSH
45015: LD_VAR 0 9
45019: LESS
45020: IFFALSE 45062
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45022: LD_ADDR_VAR 0 6
45026: PUSH
45027: LD_VAR 0 6
45031: PPUSH
45032: LD_VAR 0 6
45036: PUSH
45037: LD_INT 1
45039: PLUS
45040: PPUSH
45041: LD_VAR 0 7
45045: PUSH
45046: LD_VAR 0 9
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PPUSH
45055: CALL_OW 2
45059: ST_TO_ADDR
45060: GO 45142
// for j = 1 to result do
45062: LD_ADDR_VAR 0 8
45066: PUSH
45067: DOUBLE
45068: LD_INT 1
45070: DEC
45071: ST_TO_ADDR
45072: LD_VAR 0 6
45076: PUSH
45077: FOR_TO
45078: IFFALSE 45140
// begin if tmp < result [ j ] [ 2 ] then
45080: LD_VAR 0 9
45084: PUSH
45085: LD_VAR 0 6
45089: PUSH
45090: LD_VAR 0 8
45094: ARRAY
45095: PUSH
45096: LD_INT 2
45098: ARRAY
45099: LESS
45100: IFFALSE 45138
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45102: LD_ADDR_VAR 0 6
45106: PUSH
45107: LD_VAR 0 6
45111: PPUSH
45112: LD_VAR 0 8
45116: PPUSH
45117: LD_VAR 0 7
45121: PUSH
45122: LD_VAR 0 9
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PPUSH
45131: CALL_OW 2
45135: ST_TO_ADDR
// break ;
45136: GO 45140
// end ; end ;
45138: GO 45077
45140: POP
45141: POP
// end ; end ;
45142: GO 44941
45144: POP
45145: POP
// if result and not asc then
45146: LD_VAR 0 6
45150: PUSH
45151: LD_VAR 0 4
45155: NOT
45156: AND
45157: IFFALSE 45232
// begin tmp := result ;
45159: LD_ADDR_VAR 0 9
45163: PUSH
45164: LD_VAR 0 6
45168: ST_TO_ADDR
// for i = tmp downto 1 do
45169: LD_ADDR_VAR 0 7
45173: PUSH
45174: DOUBLE
45175: LD_VAR 0 9
45179: INC
45180: ST_TO_ADDR
45181: LD_INT 1
45183: PUSH
45184: FOR_DOWNTO
45185: IFFALSE 45230
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45187: LD_ADDR_VAR 0 6
45191: PUSH
45192: LD_VAR 0 6
45196: PPUSH
45197: LD_VAR 0 9
45201: PUSH
45202: LD_VAR 0 7
45206: MINUS
45207: PUSH
45208: LD_INT 1
45210: PLUS
45211: PPUSH
45212: LD_VAR 0 9
45216: PUSH
45217: LD_VAR 0 7
45221: ARRAY
45222: PPUSH
45223: CALL_OW 1
45227: ST_TO_ADDR
45228: GO 45184
45230: POP
45231: POP
// end ; tmp := [ ] ;
45232: LD_ADDR_VAR 0 9
45236: PUSH
45237: EMPTY
45238: ST_TO_ADDR
// if mode then
45239: LD_VAR 0 5
45243: IFFALSE 45312
// begin for i = 1 to result do
45245: LD_ADDR_VAR 0 7
45249: PUSH
45250: DOUBLE
45251: LD_INT 1
45253: DEC
45254: ST_TO_ADDR
45255: LD_VAR 0 6
45259: PUSH
45260: FOR_TO
45261: IFFALSE 45300
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45263: LD_ADDR_VAR 0 9
45267: PUSH
45268: LD_VAR 0 9
45272: PPUSH
45273: LD_VAR 0 7
45277: PPUSH
45278: LD_VAR 0 6
45282: PUSH
45283: LD_VAR 0 7
45287: ARRAY
45288: PUSH
45289: LD_INT 1
45291: ARRAY
45292: PPUSH
45293: CALL_OW 1
45297: ST_TO_ADDR
45298: GO 45260
45300: POP
45301: POP
// result := tmp ;
45302: LD_ADDR_VAR 0 6
45306: PUSH
45307: LD_VAR 0 9
45311: ST_TO_ADDR
// end ; end ;
45312: LD_VAR 0 6
45316: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45317: LD_INT 0
45319: PPUSH
45320: PPUSH
45321: PPUSH
45322: PPUSH
45323: PPUSH
45324: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45325: LD_ADDR_VAR 0 5
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: EMPTY
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: ST_TO_ADDR
// if not x or not y then
45347: LD_VAR 0 2
45351: NOT
45352: PUSH
45353: LD_VAR 0 3
45357: NOT
45358: OR
45359: IFFALSE 45363
// exit ;
45361: GO 47013
// if not range then
45363: LD_VAR 0 4
45367: NOT
45368: IFFALSE 45378
// range := 10 ;
45370: LD_ADDR_VAR 0 4
45374: PUSH
45375: LD_INT 10
45377: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45378: LD_ADDR_VAR 0 8
45382: PUSH
45383: LD_INT 81
45385: PUSH
45386: LD_VAR 0 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 92
45397: PUSH
45398: LD_VAR 0 2
45402: PUSH
45403: LD_VAR 0 3
45407: PUSH
45408: LD_VAR 0 4
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 3
45421: PUSH
45422: LD_INT 21
45424: PUSH
45425: LD_INT 3
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: LIST
45440: PPUSH
45441: CALL_OW 69
45445: ST_TO_ADDR
// if not tmp then
45446: LD_VAR 0 8
45450: NOT
45451: IFFALSE 45455
// exit ;
45453: GO 47013
// for i in tmp do
45455: LD_ADDR_VAR 0 6
45459: PUSH
45460: LD_VAR 0 8
45464: PUSH
45465: FOR_IN
45466: IFFALSE 46988
// begin points := [ 0 , 0 , 0 ] ;
45468: LD_ADDR_VAR 0 9
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: LIST
45486: ST_TO_ADDR
// bpoints := 1 ;
45487: LD_ADDR_VAR 0 10
45491: PUSH
45492: LD_INT 1
45494: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45495: LD_VAR 0 6
45499: PPUSH
45500: CALL_OW 247
45504: PUSH
45505: LD_INT 1
45507: DOUBLE
45508: EQUAL
45509: IFTRUE 45513
45511: GO 46091
45513: POP
// begin if GetClass ( i ) = 1 then
45514: LD_VAR 0 6
45518: PPUSH
45519: CALL_OW 257
45523: PUSH
45524: LD_INT 1
45526: EQUAL
45527: IFFALSE 45548
// points := [ 10 , 5 , 3 ] ;
45529: LD_ADDR_VAR 0 9
45533: PUSH
45534: LD_INT 10
45536: PUSH
45537: LD_INT 5
45539: PUSH
45540: LD_INT 3
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: LIST
45547: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45548: LD_VAR 0 6
45552: PPUSH
45553: CALL_OW 257
45557: PUSH
45558: LD_INT 2
45560: PUSH
45561: LD_INT 3
45563: PUSH
45564: LD_INT 4
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: LIST
45571: IN
45572: IFFALSE 45593
// points := [ 3 , 2 , 1 ] ;
45574: LD_ADDR_VAR 0 9
45578: PUSH
45579: LD_INT 3
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: LIST
45592: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45593: LD_VAR 0 6
45597: PPUSH
45598: CALL_OW 257
45602: PUSH
45603: LD_INT 5
45605: EQUAL
45606: IFFALSE 45627
// points := [ 130 , 5 , 2 ] ;
45608: LD_ADDR_VAR 0 9
45612: PUSH
45613: LD_INT 130
45615: PUSH
45616: LD_INT 5
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: LIST
45626: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45627: LD_VAR 0 6
45631: PPUSH
45632: CALL_OW 257
45636: PUSH
45637: LD_INT 8
45639: EQUAL
45640: IFFALSE 45661
// points := [ 35 , 35 , 30 ] ;
45642: LD_ADDR_VAR 0 9
45646: PUSH
45647: LD_INT 35
45649: PUSH
45650: LD_INT 35
45652: PUSH
45653: LD_INT 30
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: LIST
45660: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45661: LD_VAR 0 6
45665: PPUSH
45666: CALL_OW 257
45670: PUSH
45671: LD_INT 9
45673: EQUAL
45674: IFFALSE 45695
// points := [ 20 , 55 , 40 ] ;
45676: LD_ADDR_VAR 0 9
45680: PUSH
45681: LD_INT 20
45683: PUSH
45684: LD_INT 55
45686: PUSH
45687: LD_INT 40
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: LIST
45694: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45695: LD_VAR 0 6
45699: PPUSH
45700: CALL_OW 257
45704: PUSH
45705: LD_INT 12
45707: PUSH
45708: LD_INT 16
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: IN
45715: IFFALSE 45736
// points := [ 5 , 3 , 2 ] ;
45717: LD_ADDR_VAR 0 9
45721: PUSH
45722: LD_INT 5
45724: PUSH
45725: LD_INT 3
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: LIST
45735: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45736: LD_VAR 0 6
45740: PPUSH
45741: CALL_OW 257
45745: PUSH
45746: LD_INT 17
45748: EQUAL
45749: IFFALSE 45770
// points := [ 100 , 50 , 75 ] ;
45751: LD_ADDR_VAR 0 9
45755: PUSH
45756: LD_INT 100
45758: PUSH
45759: LD_INT 50
45761: PUSH
45762: LD_INT 75
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: LIST
45769: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45770: LD_VAR 0 6
45774: PPUSH
45775: CALL_OW 257
45779: PUSH
45780: LD_INT 15
45782: EQUAL
45783: IFFALSE 45804
// points := [ 10 , 5 , 3 ] ;
45785: LD_ADDR_VAR 0 9
45789: PUSH
45790: LD_INT 10
45792: PUSH
45793: LD_INT 5
45795: PUSH
45796: LD_INT 3
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: LIST
45803: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45804: LD_VAR 0 6
45808: PPUSH
45809: CALL_OW 257
45813: PUSH
45814: LD_INT 14
45816: EQUAL
45817: IFFALSE 45838
// points := [ 10 , 0 , 0 ] ;
45819: LD_ADDR_VAR 0 9
45823: PUSH
45824: LD_INT 10
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: LIST
45837: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45838: LD_VAR 0 6
45842: PPUSH
45843: CALL_OW 257
45847: PUSH
45848: LD_INT 11
45850: EQUAL
45851: IFFALSE 45872
// points := [ 30 , 10 , 5 ] ;
45853: LD_ADDR_VAR 0 9
45857: PUSH
45858: LD_INT 30
45860: PUSH
45861: LD_INT 10
45863: PUSH
45864: LD_INT 5
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: LIST
45871: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45872: LD_VAR 0 1
45876: PPUSH
45877: LD_INT 5
45879: PPUSH
45880: CALL_OW 321
45884: PUSH
45885: LD_INT 2
45887: EQUAL
45888: IFFALSE 45905
// bpoints := bpoints * 1.8 ;
45890: LD_ADDR_VAR 0 10
45894: PUSH
45895: LD_VAR 0 10
45899: PUSH
45900: LD_REAL  1.80000000000000E+0000
45903: MUL
45904: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45905: LD_VAR 0 6
45909: PPUSH
45910: CALL_OW 257
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: LD_INT 2
45920: PUSH
45921: LD_INT 3
45923: PUSH
45924: LD_INT 4
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: IN
45933: PUSH
45934: LD_VAR 0 1
45938: PPUSH
45939: LD_INT 51
45941: PPUSH
45942: CALL_OW 321
45946: PUSH
45947: LD_INT 2
45949: EQUAL
45950: AND
45951: IFFALSE 45968
// bpoints := bpoints * 1.2 ;
45953: LD_ADDR_VAR 0 10
45957: PUSH
45958: LD_VAR 0 10
45962: PUSH
45963: LD_REAL  1.20000000000000E+0000
45966: MUL
45967: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45968: LD_VAR 0 6
45972: PPUSH
45973: CALL_OW 257
45977: PUSH
45978: LD_INT 5
45980: PUSH
45981: LD_INT 7
45983: PUSH
45984: LD_INT 9
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: LIST
45991: IN
45992: PUSH
45993: LD_VAR 0 1
45997: PPUSH
45998: LD_INT 52
46000: PPUSH
46001: CALL_OW 321
46005: PUSH
46006: LD_INT 2
46008: EQUAL
46009: AND
46010: IFFALSE 46027
// bpoints := bpoints * 1.5 ;
46012: LD_ADDR_VAR 0 10
46016: PUSH
46017: LD_VAR 0 10
46021: PUSH
46022: LD_REAL  1.50000000000000E+0000
46025: MUL
46026: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46027: LD_VAR 0 1
46031: PPUSH
46032: LD_INT 66
46034: PPUSH
46035: CALL_OW 321
46039: PUSH
46040: LD_INT 2
46042: EQUAL
46043: IFFALSE 46060
// bpoints := bpoints * 1.1 ;
46045: LD_ADDR_VAR 0 10
46049: PUSH
46050: LD_VAR 0 10
46054: PUSH
46055: LD_REAL  1.10000000000000E+0000
46058: MUL
46059: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46060: LD_ADDR_VAR 0 10
46064: PUSH
46065: LD_VAR 0 10
46069: PUSH
46070: LD_VAR 0 6
46074: PPUSH
46075: LD_INT 1
46077: PPUSH
46078: CALL_OW 259
46082: PUSH
46083: LD_REAL  1.15000000000000E+0000
46086: MUL
46087: MUL
46088: ST_TO_ADDR
// end ; unit_vehicle :
46089: GO 46917
46091: LD_INT 2
46093: DOUBLE
46094: EQUAL
46095: IFTRUE 46099
46097: GO 46905
46099: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46100: LD_VAR 0 6
46104: PPUSH
46105: CALL_OW 264
46109: PUSH
46110: LD_INT 2
46112: PUSH
46113: LD_INT 42
46115: PUSH
46116: LD_INT 24
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: LIST
46123: IN
46124: IFFALSE 46145
// points := [ 25 , 5 , 3 ] ;
46126: LD_ADDR_VAR 0 9
46130: PUSH
46131: LD_INT 25
46133: PUSH
46134: LD_INT 5
46136: PUSH
46137: LD_INT 3
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: LIST
46144: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46145: LD_VAR 0 6
46149: PPUSH
46150: CALL_OW 264
46154: PUSH
46155: LD_INT 4
46157: PUSH
46158: LD_INT 43
46160: PUSH
46161: LD_INT 25
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: LIST
46168: IN
46169: IFFALSE 46190
// points := [ 40 , 15 , 5 ] ;
46171: LD_ADDR_VAR 0 9
46175: PUSH
46176: LD_INT 40
46178: PUSH
46179: LD_INT 15
46181: PUSH
46182: LD_INT 5
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: LIST
46189: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46190: LD_VAR 0 6
46194: PPUSH
46195: CALL_OW 264
46199: PUSH
46200: LD_INT 3
46202: PUSH
46203: LD_INT 23
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: IN
46210: IFFALSE 46231
// points := [ 7 , 25 , 8 ] ;
46212: LD_ADDR_VAR 0 9
46216: PUSH
46217: LD_INT 7
46219: PUSH
46220: LD_INT 25
46222: PUSH
46223: LD_INT 8
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: LIST
46230: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46231: LD_VAR 0 6
46235: PPUSH
46236: CALL_OW 264
46240: PUSH
46241: LD_INT 5
46243: PUSH
46244: LD_INT 27
46246: PUSH
46247: LD_INT 44
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: LIST
46254: IN
46255: IFFALSE 46276
// points := [ 14 , 50 , 16 ] ;
46257: LD_ADDR_VAR 0 9
46261: PUSH
46262: LD_INT 14
46264: PUSH
46265: LD_INT 50
46267: PUSH
46268: LD_INT 16
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: LIST
46275: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46276: LD_VAR 0 6
46280: PPUSH
46281: CALL_OW 264
46285: PUSH
46286: LD_INT 6
46288: PUSH
46289: LD_INT 46
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: IN
46296: IFFALSE 46317
// points := [ 32 , 120 , 70 ] ;
46298: LD_ADDR_VAR 0 9
46302: PUSH
46303: LD_INT 32
46305: PUSH
46306: LD_INT 120
46308: PUSH
46309: LD_INT 70
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: LIST
46316: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46317: LD_VAR 0 6
46321: PPUSH
46322: CALL_OW 264
46326: PUSH
46327: LD_INT 7
46329: PUSH
46330: LD_INT 28
46332: PUSH
46333: LD_INT 45
46335: PUSH
46336: LD_INT 92
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: IN
46345: IFFALSE 46366
// points := [ 35 , 20 , 45 ] ;
46347: LD_ADDR_VAR 0 9
46351: PUSH
46352: LD_INT 35
46354: PUSH
46355: LD_INT 20
46357: PUSH
46358: LD_INT 45
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: LIST
46365: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46366: LD_VAR 0 6
46370: PPUSH
46371: CALL_OW 264
46375: PUSH
46376: LD_INT 47
46378: PUSH
46379: EMPTY
46380: LIST
46381: IN
46382: IFFALSE 46403
// points := [ 67 , 45 , 75 ] ;
46384: LD_ADDR_VAR 0 9
46388: PUSH
46389: LD_INT 67
46391: PUSH
46392: LD_INT 45
46394: PUSH
46395: LD_INT 75
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: LIST
46402: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46403: LD_VAR 0 6
46407: PPUSH
46408: CALL_OW 264
46412: PUSH
46413: LD_INT 26
46415: PUSH
46416: EMPTY
46417: LIST
46418: IN
46419: IFFALSE 46440
// points := [ 120 , 30 , 80 ] ;
46421: LD_ADDR_VAR 0 9
46425: PUSH
46426: LD_INT 120
46428: PUSH
46429: LD_INT 30
46431: PUSH
46432: LD_INT 80
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: LIST
46439: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46440: LD_VAR 0 6
46444: PPUSH
46445: CALL_OW 264
46449: PUSH
46450: LD_INT 22
46452: PUSH
46453: EMPTY
46454: LIST
46455: IN
46456: IFFALSE 46477
// points := [ 40 , 1 , 1 ] ;
46458: LD_ADDR_VAR 0 9
46462: PUSH
46463: LD_INT 40
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: LIST
46476: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46477: LD_VAR 0 6
46481: PPUSH
46482: CALL_OW 264
46486: PUSH
46487: LD_INT 29
46489: PUSH
46490: EMPTY
46491: LIST
46492: IN
46493: IFFALSE 46514
// points := [ 70 , 200 , 400 ] ;
46495: LD_ADDR_VAR 0 9
46499: PUSH
46500: LD_INT 70
46502: PUSH
46503: LD_INT 200
46505: PUSH
46506: LD_INT 400
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46514: LD_VAR 0 6
46518: PPUSH
46519: CALL_OW 264
46523: PUSH
46524: LD_INT 14
46526: PUSH
46527: LD_INT 53
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: IN
46534: IFFALSE 46555
// points := [ 40 , 10 , 20 ] ;
46536: LD_ADDR_VAR 0 9
46540: PUSH
46541: LD_INT 40
46543: PUSH
46544: LD_INT 10
46546: PUSH
46547: LD_INT 20
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: LIST
46554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46555: LD_VAR 0 6
46559: PPUSH
46560: CALL_OW 264
46564: PUSH
46565: LD_INT 9
46567: PUSH
46568: EMPTY
46569: LIST
46570: IN
46571: IFFALSE 46592
// points := [ 5 , 70 , 20 ] ;
46573: LD_ADDR_VAR 0 9
46577: PUSH
46578: LD_INT 5
46580: PUSH
46581: LD_INT 70
46583: PUSH
46584: LD_INT 20
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: LIST
46591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46592: LD_VAR 0 6
46596: PPUSH
46597: CALL_OW 264
46601: PUSH
46602: LD_INT 10
46604: PUSH
46605: EMPTY
46606: LIST
46607: IN
46608: IFFALSE 46629
// points := [ 35 , 110 , 70 ] ;
46610: LD_ADDR_VAR 0 9
46614: PUSH
46615: LD_INT 35
46617: PUSH
46618: LD_INT 110
46620: PUSH
46621: LD_INT 70
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: LIST
46628: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46629: LD_VAR 0 6
46633: PPUSH
46634: CALL_OW 265
46638: PUSH
46639: LD_INT 25
46641: EQUAL
46642: IFFALSE 46663
// points := [ 80 , 65 , 100 ] ;
46644: LD_ADDR_VAR 0 9
46648: PUSH
46649: LD_INT 80
46651: PUSH
46652: LD_INT 65
46654: PUSH
46655: LD_INT 100
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: LIST
46662: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46663: LD_VAR 0 6
46667: PPUSH
46668: CALL_OW 263
46672: PUSH
46673: LD_INT 1
46675: EQUAL
46676: IFFALSE 46711
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46678: LD_ADDR_VAR 0 10
46682: PUSH
46683: LD_VAR 0 10
46687: PUSH
46688: LD_VAR 0 6
46692: PPUSH
46693: CALL_OW 311
46697: PPUSH
46698: LD_INT 3
46700: PPUSH
46701: CALL_OW 259
46705: PUSH
46706: LD_INT 4
46708: MUL
46709: MUL
46710: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46711: LD_VAR 0 6
46715: PPUSH
46716: CALL_OW 263
46720: PUSH
46721: LD_INT 2
46723: EQUAL
46724: IFFALSE 46775
// begin j := IsControledBy ( i ) ;
46726: LD_ADDR_VAR 0 7
46730: PUSH
46731: LD_VAR 0 6
46735: PPUSH
46736: CALL_OW 312
46740: ST_TO_ADDR
// if j then
46741: LD_VAR 0 7
46745: IFFALSE 46775
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46747: LD_ADDR_VAR 0 10
46751: PUSH
46752: LD_VAR 0 10
46756: PUSH
46757: LD_VAR 0 7
46761: PPUSH
46762: LD_INT 3
46764: PPUSH
46765: CALL_OW 259
46769: PUSH
46770: LD_INT 3
46772: MUL
46773: MUL
46774: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46775: LD_VAR 0 6
46779: PPUSH
46780: CALL_OW 264
46784: PUSH
46785: LD_INT 5
46787: PUSH
46788: LD_INT 6
46790: PUSH
46791: LD_INT 46
46793: PUSH
46794: LD_INT 44
46796: PUSH
46797: LD_INT 47
46799: PUSH
46800: LD_INT 45
46802: PUSH
46803: LD_INT 28
46805: PUSH
46806: LD_INT 7
46808: PUSH
46809: LD_INT 27
46811: PUSH
46812: LD_INT 29
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: IN
46827: PUSH
46828: LD_VAR 0 1
46832: PPUSH
46833: LD_INT 52
46835: PPUSH
46836: CALL_OW 321
46840: PUSH
46841: LD_INT 2
46843: EQUAL
46844: AND
46845: IFFALSE 46862
// bpoints := bpoints * 1.2 ;
46847: LD_ADDR_VAR 0 10
46851: PUSH
46852: LD_VAR 0 10
46856: PUSH
46857: LD_REAL  1.20000000000000E+0000
46860: MUL
46861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46862: LD_VAR 0 6
46866: PPUSH
46867: CALL_OW 264
46871: PUSH
46872: LD_INT 6
46874: PUSH
46875: LD_INT 46
46877: PUSH
46878: LD_INT 47
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: LIST
46885: IN
46886: IFFALSE 46903
// bpoints := bpoints * 1.2 ;
46888: LD_ADDR_VAR 0 10
46892: PUSH
46893: LD_VAR 0 10
46897: PUSH
46898: LD_REAL  1.20000000000000E+0000
46901: MUL
46902: ST_TO_ADDR
// end ; unit_building :
46903: GO 46917
46905: LD_INT 3
46907: DOUBLE
46908: EQUAL
46909: IFTRUE 46913
46911: GO 46916
46913: POP
// ; end ;
46914: GO 46917
46916: POP
// for j = 1 to 3 do
46917: LD_ADDR_VAR 0 7
46921: PUSH
46922: DOUBLE
46923: LD_INT 1
46925: DEC
46926: ST_TO_ADDR
46927: LD_INT 3
46929: PUSH
46930: FOR_TO
46931: IFFALSE 46984
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46933: LD_ADDR_VAR 0 5
46937: PUSH
46938: LD_VAR 0 5
46942: PPUSH
46943: LD_VAR 0 7
46947: PPUSH
46948: LD_VAR 0 5
46952: PUSH
46953: LD_VAR 0 7
46957: ARRAY
46958: PUSH
46959: LD_VAR 0 9
46963: PUSH
46964: LD_VAR 0 7
46968: ARRAY
46969: PUSH
46970: LD_VAR 0 10
46974: MUL
46975: PLUS
46976: PPUSH
46977: CALL_OW 1
46981: ST_TO_ADDR
46982: GO 46930
46984: POP
46985: POP
// end ;
46986: GO 45465
46988: POP
46989: POP
// result := Replace ( result , 4 , tmp ) ;
46990: LD_ADDR_VAR 0 5
46994: PUSH
46995: LD_VAR 0 5
46999: PPUSH
47000: LD_INT 4
47002: PPUSH
47003: LD_VAR 0 8
47007: PPUSH
47008: CALL_OW 1
47012: ST_TO_ADDR
// end ;
47013: LD_VAR 0 5
47017: RET
// export function DangerAtRange ( unit , range ) ; begin
47018: LD_INT 0
47020: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47021: LD_ADDR_VAR 0 3
47025: PUSH
47026: LD_VAR 0 1
47030: PPUSH
47031: CALL_OW 255
47035: PPUSH
47036: LD_VAR 0 1
47040: PPUSH
47041: CALL_OW 250
47045: PPUSH
47046: LD_VAR 0 1
47050: PPUSH
47051: CALL_OW 251
47055: PPUSH
47056: LD_VAR 0 2
47060: PPUSH
47061: CALL 45317 0 4
47065: ST_TO_ADDR
// end ;
47066: LD_VAR 0 3
47070: RET
// export function DangerInArea ( side , area ) ; begin
47071: LD_INT 0
47073: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47074: LD_ADDR_VAR 0 3
47078: PUSH
47079: LD_VAR 0 2
47083: PPUSH
47084: LD_INT 81
47086: PUSH
47087: LD_VAR 0 1
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PPUSH
47096: CALL_OW 70
47100: ST_TO_ADDR
// end ;
47101: LD_VAR 0 3
47105: RET
// export function IsExtension ( b ) ; begin
47106: LD_INT 0
47108: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47109: LD_ADDR_VAR 0 2
47113: PUSH
47114: LD_VAR 0 1
47118: PUSH
47119: LD_INT 23
47121: PUSH
47122: LD_INT 20
47124: PUSH
47125: LD_INT 22
47127: PUSH
47128: LD_INT 17
47130: PUSH
47131: LD_INT 24
47133: PUSH
47134: LD_INT 21
47136: PUSH
47137: LD_INT 19
47139: PUSH
47140: LD_INT 16
47142: PUSH
47143: LD_INT 25
47145: PUSH
47146: LD_INT 18
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: IN
47161: ST_TO_ADDR
// end ;
47162: LD_VAR 0 2
47166: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47167: LD_INT 0
47169: PPUSH
47170: PPUSH
47171: PPUSH
// result := [ ] ;
47172: LD_ADDR_VAR 0 4
47176: PUSH
47177: EMPTY
47178: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47179: LD_ADDR_VAR 0 5
47183: PUSH
47184: LD_VAR 0 2
47188: PPUSH
47189: LD_INT 21
47191: PUSH
47192: LD_INT 3
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PPUSH
47199: CALL_OW 70
47203: ST_TO_ADDR
// if not tmp then
47204: LD_VAR 0 5
47208: NOT
47209: IFFALSE 47213
// exit ;
47211: GO 47277
// if checkLink then
47213: LD_VAR 0 3
47217: IFFALSE 47267
// begin for i in tmp do
47219: LD_ADDR_VAR 0 6
47223: PUSH
47224: LD_VAR 0 5
47228: PUSH
47229: FOR_IN
47230: IFFALSE 47265
// if GetBase ( i ) <> base then
47232: LD_VAR 0 6
47236: PPUSH
47237: CALL_OW 274
47241: PUSH
47242: LD_VAR 0 1
47246: NONEQUAL
47247: IFFALSE 47263
// ComLinkToBase ( base , i ) ;
47249: LD_VAR 0 1
47253: PPUSH
47254: LD_VAR 0 6
47258: PPUSH
47259: CALL_OW 169
47263: GO 47229
47265: POP
47266: POP
// end ; result := tmp ;
47267: LD_ADDR_VAR 0 4
47271: PUSH
47272: LD_VAR 0 5
47276: ST_TO_ADDR
// end ;
47277: LD_VAR 0 4
47281: RET
// export function ComComplete ( units , b ) ; var i ; begin
47282: LD_INT 0
47284: PPUSH
47285: PPUSH
// if not units then
47286: LD_VAR 0 1
47290: NOT
47291: IFFALSE 47295
// exit ;
47293: GO 47385
// for i in units do
47295: LD_ADDR_VAR 0 4
47299: PUSH
47300: LD_VAR 0 1
47304: PUSH
47305: FOR_IN
47306: IFFALSE 47383
// if BuildingStatus ( b ) = bs_build then
47308: LD_VAR 0 2
47312: PPUSH
47313: CALL_OW 461
47317: PUSH
47318: LD_INT 1
47320: EQUAL
47321: IFFALSE 47381
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47323: LD_VAR 0 4
47327: PPUSH
47328: LD_STRING h
47330: PUSH
47331: LD_VAR 0 2
47335: PPUSH
47336: CALL_OW 250
47340: PUSH
47341: LD_VAR 0 2
47345: PPUSH
47346: CALL_OW 251
47350: PUSH
47351: LD_VAR 0 2
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: PUSH
47374: EMPTY
47375: LIST
47376: PPUSH
47377: CALL_OW 446
47381: GO 47305
47383: POP
47384: POP
// end ;
47385: LD_VAR 0 3
47389: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47390: LD_INT 0
47392: PPUSH
47393: PPUSH
47394: PPUSH
47395: PPUSH
47396: PPUSH
47397: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47398: LD_VAR 0 1
47402: NOT
47403: PUSH
47404: LD_VAR 0 1
47408: PPUSH
47409: CALL_OW 263
47413: PUSH
47414: LD_INT 2
47416: NONEQUAL
47417: OR
47418: IFFALSE 47422
// exit ;
47420: GO 47738
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47422: LD_ADDR_VAR 0 6
47426: PUSH
47427: LD_INT 22
47429: PUSH
47430: LD_VAR 0 1
47434: PPUSH
47435: CALL_OW 255
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: LD_INT 30
47449: PUSH
47450: LD_INT 36
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 34
47459: PUSH
47460: LD_INT 31
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: LIST
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PPUSH
47476: CALL_OW 69
47480: ST_TO_ADDR
// if not tmp then
47481: LD_VAR 0 6
47485: NOT
47486: IFFALSE 47490
// exit ;
47488: GO 47738
// result := [ ] ;
47490: LD_ADDR_VAR 0 2
47494: PUSH
47495: EMPTY
47496: ST_TO_ADDR
// for i in tmp do
47497: LD_ADDR_VAR 0 3
47501: PUSH
47502: LD_VAR 0 6
47506: PUSH
47507: FOR_IN
47508: IFFALSE 47579
// begin t := UnitsInside ( i ) ;
47510: LD_ADDR_VAR 0 4
47514: PUSH
47515: LD_VAR 0 3
47519: PPUSH
47520: CALL_OW 313
47524: ST_TO_ADDR
// if t then
47525: LD_VAR 0 4
47529: IFFALSE 47577
// for j in t do
47531: LD_ADDR_VAR 0 7
47535: PUSH
47536: LD_VAR 0 4
47540: PUSH
47541: FOR_IN
47542: IFFALSE 47575
// result := Replace ( result , result + 1 , j ) ;
47544: LD_ADDR_VAR 0 2
47548: PUSH
47549: LD_VAR 0 2
47553: PPUSH
47554: LD_VAR 0 2
47558: PUSH
47559: LD_INT 1
47561: PLUS
47562: PPUSH
47563: LD_VAR 0 7
47567: PPUSH
47568: CALL_OW 1
47572: ST_TO_ADDR
47573: GO 47541
47575: POP
47576: POP
// end ;
47577: GO 47507
47579: POP
47580: POP
// if not result then
47581: LD_VAR 0 2
47585: NOT
47586: IFFALSE 47590
// exit ;
47588: GO 47738
// mech := result [ 1 ] ;
47590: LD_ADDR_VAR 0 5
47594: PUSH
47595: LD_VAR 0 2
47599: PUSH
47600: LD_INT 1
47602: ARRAY
47603: ST_TO_ADDR
// if result > 1 then
47604: LD_VAR 0 2
47608: PUSH
47609: LD_INT 1
47611: GREATER
47612: IFFALSE 47724
// begin for i = 2 to result do
47614: LD_ADDR_VAR 0 3
47618: PUSH
47619: DOUBLE
47620: LD_INT 2
47622: DEC
47623: ST_TO_ADDR
47624: LD_VAR 0 2
47628: PUSH
47629: FOR_TO
47630: IFFALSE 47722
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47632: LD_ADDR_VAR 0 4
47636: PUSH
47637: LD_VAR 0 2
47641: PUSH
47642: LD_VAR 0 3
47646: ARRAY
47647: PPUSH
47648: LD_INT 3
47650: PPUSH
47651: CALL_OW 259
47655: PUSH
47656: LD_VAR 0 2
47660: PUSH
47661: LD_VAR 0 3
47665: ARRAY
47666: PPUSH
47667: CALL_OW 432
47671: MINUS
47672: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47673: LD_VAR 0 4
47677: PUSH
47678: LD_VAR 0 5
47682: PPUSH
47683: LD_INT 3
47685: PPUSH
47686: CALL_OW 259
47690: PUSH
47691: LD_VAR 0 5
47695: PPUSH
47696: CALL_OW 432
47700: MINUS
47701: GREATEREQUAL
47702: IFFALSE 47720
// mech := result [ i ] ;
47704: LD_ADDR_VAR 0 5
47708: PUSH
47709: LD_VAR 0 2
47713: PUSH
47714: LD_VAR 0 3
47718: ARRAY
47719: ST_TO_ADDR
// end ;
47720: GO 47629
47722: POP
47723: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47724: LD_VAR 0 1
47728: PPUSH
47729: LD_VAR 0 5
47733: PPUSH
47734: CALL_OW 135
// end ;
47738: LD_VAR 0 2
47742: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47743: LD_INT 0
47745: PPUSH
47746: PPUSH
47747: PPUSH
47748: PPUSH
47749: PPUSH
47750: PPUSH
47751: PPUSH
47752: PPUSH
47753: PPUSH
47754: PPUSH
47755: PPUSH
47756: PPUSH
47757: PPUSH
// result := [ ] ;
47758: LD_ADDR_VAR 0 7
47762: PUSH
47763: EMPTY
47764: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47765: LD_VAR 0 1
47769: PPUSH
47770: CALL_OW 266
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: IN
47785: NOT
47786: IFFALSE 47790
// exit ;
47788: GO 49424
// if name then
47790: LD_VAR 0 3
47794: IFFALSE 47810
// SetBName ( base_dep , name ) ;
47796: LD_VAR 0 1
47800: PPUSH
47801: LD_VAR 0 3
47805: PPUSH
47806: CALL_OW 500
// base := GetBase ( base_dep ) ;
47810: LD_ADDR_VAR 0 15
47814: PUSH
47815: LD_VAR 0 1
47819: PPUSH
47820: CALL_OW 274
47824: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47825: LD_ADDR_VAR 0 16
47829: PUSH
47830: LD_VAR 0 1
47834: PPUSH
47835: CALL_OW 255
47839: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47840: LD_ADDR_VAR 0 17
47844: PUSH
47845: LD_VAR 0 1
47849: PPUSH
47850: CALL_OW 248
47854: ST_TO_ADDR
// if sources then
47855: LD_VAR 0 5
47859: IFFALSE 47906
// for i = 1 to 3 do
47861: LD_ADDR_VAR 0 8
47865: PUSH
47866: DOUBLE
47867: LD_INT 1
47869: DEC
47870: ST_TO_ADDR
47871: LD_INT 3
47873: PUSH
47874: FOR_TO
47875: IFFALSE 47904
// AddResourceType ( base , i , sources [ i ] ) ;
47877: LD_VAR 0 15
47881: PPUSH
47882: LD_VAR 0 8
47886: PPUSH
47887: LD_VAR 0 5
47891: PUSH
47892: LD_VAR 0 8
47896: ARRAY
47897: PPUSH
47898: CALL_OW 276
47902: GO 47874
47904: POP
47905: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47906: LD_ADDR_VAR 0 18
47910: PUSH
47911: LD_VAR 0 15
47915: PPUSH
47916: LD_VAR 0 2
47920: PPUSH
47921: LD_INT 1
47923: PPUSH
47924: CALL 47167 0 3
47928: ST_TO_ADDR
// InitHc ;
47929: CALL_OW 19
// InitUc ;
47933: CALL_OW 18
// uc_side := side ;
47937: LD_ADDR_OWVAR 20
47941: PUSH
47942: LD_VAR 0 16
47946: ST_TO_ADDR
// uc_nation := nation ;
47947: LD_ADDR_OWVAR 21
47951: PUSH
47952: LD_VAR 0 17
47956: ST_TO_ADDR
// if buildings then
47957: LD_VAR 0 18
47961: IFFALSE 49283
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47963: LD_ADDR_VAR 0 19
47967: PUSH
47968: LD_VAR 0 18
47972: PPUSH
47973: LD_INT 2
47975: PUSH
47976: LD_INT 30
47978: PUSH
47979: LD_INT 29
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 30
47988: PUSH
47989: LD_INT 30
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: LIST
48000: PPUSH
48001: CALL_OW 72
48005: ST_TO_ADDR
// if tmp then
48006: LD_VAR 0 19
48010: IFFALSE 48058
// for i in tmp do
48012: LD_ADDR_VAR 0 8
48016: PUSH
48017: LD_VAR 0 19
48021: PUSH
48022: FOR_IN
48023: IFFALSE 48056
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48025: LD_VAR 0 8
48029: PPUSH
48030: CALL_OW 250
48034: PPUSH
48035: LD_VAR 0 8
48039: PPUSH
48040: CALL_OW 251
48044: PPUSH
48045: LD_VAR 0 16
48049: PPUSH
48050: CALL_OW 441
48054: GO 48022
48056: POP
48057: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48058: LD_VAR 0 18
48062: PPUSH
48063: LD_INT 2
48065: PUSH
48066: LD_INT 30
48068: PUSH
48069: LD_INT 32
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 30
48078: PUSH
48079: LD_INT 33
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: LIST
48090: PPUSH
48091: CALL_OW 72
48095: IFFALSE 48183
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48097: LD_ADDR_VAR 0 8
48101: PUSH
48102: LD_VAR 0 18
48106: PPUSH
48107: LD_INT 2
48109: PUSH
48110: LD_INT 30
48112: PUSH
48113: LD_INT 32
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 30
48122: PUSH
48123: LD_INT 33
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: LIST
48134: PPUSH
48135: CALL_OW 72
48139: PUSH
48140: FOR_IN
48141: IFFALSE 48181
// begin if not GetBWeapon ( i ) then
48143: LD_VAR 0 8
48147: PPUSH
48148: CALL_OW 269
48152: NOT
48153: IFFALSE 48179
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48155: LD_VAR 0 8
48159: PPUSH
48160: LD_VAR 0 8
48164: PPUSH
48165: LD_VAR 0 2
48169: PPUSH
48170: CALL 49429 0 2
48174: PPUSH
48175: CALL_OW 431
// end ;
48179: GO 48140
48181: POP
48182: POP
// end ; for i = 1 to personel do
48183: LD_ADDR_VAR 0 8
48187: PUSH
48188: DOUBLE
48189: LD_INT 1
48191: DEC
48192: ST_TO_ADDR
48193: LD_VAR 0 6
48197: PUSH
48198: FOR_TO
48199: IFFALSE 49263
// begin if i > 4 then
48201: LD_VAR 0 8
48205: PUSH
48206: LD_INT 4
48208: GREATER
48209: IFFALSE 48213
// break ;
48211: GO 49263
// case i of 1 :
48213: LD_VAR 0 8
48217: PUSH
48218: LD_INT 1
48220: DOUBLE
48221: EQUAL
48222: IFTRUE 48226
48224: GO 48306
48226: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48227: LD_ADDR_VAR 0 12
48231: PUSH
48232: LD_VAR 0 18
48236: PPUSH
48237: LD_INT 22
48239: PUSH
48240: LD_VAR 0 16
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 58
48251: PUSH
48252: EMPTY
48253: LIST
48254: PUSH
48255: LD_INT 2
48257: PUSH
48258: LD_INT 30
48260: PUSH
48261: LD_INT 32
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 30
48270: PUSH
48271: LD_INT 4
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 30
48280: PUSH
48281: LD_INT 5
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: LIST
48298: PPUSH
48299: CALL_OW 72
48303: ST_TO_ADDR
48304: GO 48528
48306: LD_INT 2
48308: DOUBLE
48309: EQUAL
48310: IFTRUE 48314
48312: GO 48376
48314: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48315: LD_ADDR_VAR 0 12
48319: PUSH
48320: LD_VAR 0 18
48324: PPUSH
48325: LD_INT 22
48327: PUSH
48328: LD_VAR 0 16
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: PUSH
48340: LD_INT 30
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 30
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: LIST
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PPUSH
48369: CALL_OW 72
48373: ST_TO_ADDR
48374: GO 48528
48376: LD_INT 3
48378: DOUBLE
48379: EQUAL
48380: IFTRUE 48384
48382: GO 48446
48384: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48385: LD_ADDR_VAR 0 12
48389: PUSH
48390: LD_VAR 0 18
48394: PPUSH
48395: LD_INT 22
48397: PUSH
48398: LD_VAR 0 16
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: LD_INT 30
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 30
48422: PUSH
48423: LD_INT 3
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: LIST
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PPUSH
48439: CALL_OW 72
48443: ST_TO_ADDR
48444: GO 48528
48446: LD_INT 4
48448: DOUBLE
48449: EQUAL
48450: IFTRUE 48454
48452: GO 48527
48454: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48455: LD_ADDR_VAR 0 12
48459: PUSH
48460: LD_VAR 0 18
48464: PPUSH
48465: LD_INT 22
48467: PUSH
48468: LD_VAR 0 16
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 2
48479: PUSH
48480: LD_INT 30
48482: PUSH
48483: LD_INT 6
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 30
48492: PUSH
48493: LD_INT 7
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 30
48502: PUSH
48503: LD_INT 8
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PPUSH
48520: CALL_OW 72
48524: ST_TO_ADDR
48525: GO 48528
48527: POP
// if i = 1 then
48528: LD_VAR 0 8
48532: PUSH
48533: LD_INT 1
48535: EQUAL
48536: IFFALSE 48647
// begin tmp := [ ] ;
48538: LD_ADDR_VAR 0 19
48542: PUSH
48543: EMPTY
48544: ST_TO_ADDR
// for j in f do
48545: LD_ADDR_VAR 0 9
48549: PUSH
48550: LD_VAR 0 12
48554: PUSH
48555: FOR_IN
48556: IFFALSE 48629
// if GetBType ( j ) = b_bunker then
48558: LD_VAR 0 9
48562: PPUSH
48563: CALL_OW 266
48567: PUSH
48568: LD_INT 32
48570: EQUAL
48571: IFFALSE 48598
// tmp := Insert ( tmp , 1 , j ) else
48573: LD_ADDR_VAR 0 19
48577: PUSH
48578: LD_VAR 0 19
48582: PPUSH
48583: LD_INT 1
48585: PPUSH
48586: LD_VAR 0 9
48590: PPUSH
48591: CALL_OW 2
48595: ST_TO_ADDR
48596: GO 48627
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48598: LD_ADDR_VAR 0 19
48602: PUSH
48603: LD_VAR 0 19
48607: PPUSH
48608: LD_VAR 0 19
48612: PUSH
48613: LD_INT 1
48615: PLUS
48616: PPUSH
48617: LD_VAR 0 9
48621: PPUSH
48622: CALL_OW 2
48626: ST_TO_ADDR
48627: GO 48555
48629: POP
48630: POP
// if tmp then
48631: LD_VAR 0 19
48635: IFFALSE 48647
// f := tmp ;
48637: LD_ADDR_VAR 0 12
48641: PUSH
48642: LD_VAR 0 19
48646: ST_TO_ADDR
// end ; x := personel [ i ] ;
48647: LD_ADDR_VAR 0 13
48651: PUSH
48652: LD_VAR 0 6
48656: PUSH
48657: LD_VAR 0 8
48661: ARRAY
48662: ST_TO_ADDR
// if x = - 1 then
48663: LD_VAR 0 13
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: EQUAL
48672: IFFALSE 48881
// begin for j in f do
48674: LD_ADDR_VAR 0 9
48678: PUSH
48679: LD_VAR 0 12
48683: PUSH
48684: FOR_IN
48685: IFFALSE 48877
// repeat InitHc ;
48687: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48691: LD_VAR 0 9
48695: PPUSH
48696: CALL_OW 266
48700: PUSH
48701: LD_INT 5
48703: EQUAL
48704: IFFALSE 48774
// begin if UnitsInside ( j ) < 3 then
48706: LD_VAR 0 9
48710: PPUSH
48711: CALL_OW 313
48715: PUSH
48716: LD_INT 3
48718: LESS
48719: IFFALSE 48755
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48721: LD_INT 0
48723: PPUSH
48724: LD_INT 5
48726: PUSH
48727: LD_INT 8
48729: PUSH
48730: LD_INT 9
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: LIST
48737: PUSH
48738: LD_VAR 0 17
48742: ARRAY
48743: PPUSH
48744: LD_VAR 0 4
48748: PPUSH
48749: CALL_OW 380
48753: GO 48772
// PrepareHuman ( false , i , skill ) ;
48755: LD_INT 0
48757: PPUSH
48758: LD_VAR 0 8
48762: PPUSH
48763: LD_VAR 0 4
48767: PPUSH
48768: CALL_OW 380
// end else
48772: GO 48791
// PrepareHuman ( false , i , skill ) ;
48774: LD_INT 0
48776: PPUSH
48777: LD_VAR 0 8
48781: PPUSH
48782: LD_VAR 0 4
48786: PPUSH
48787: CALL_OW 380
// un := CreateHuman ;
48791: LD_ADDR_VAR 0 14
48795: PUSH
48796: CALL_OW 44
48800: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48801: LD_ADDR_VAR 0 7
48805: PUSH
48806: LD_VAR 0 7
48810: PPUSH
48811: LD_INT 1
48813: PPUSH
48814: LD_VAR 0 14
48818: PPUSH
48819: CALL_OW 2
48823: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48824: LD_VAR 0 14
48828: PPUSH
48829: LD_VAR 0 9
48833: PPUSH
48834: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48838: LD_VAR 0 9
48842: PPUSH
48843: CALL_OW 313
48847: PUSH
48848: LD_INT 6
48850: EQUAL
48851: PUSH
48852: LD_VAR 0 9
48856: PPUSH
48857: CALL_OW 266
48861: PUSH
48862: LD_INT 32
48864: PUSH
48865: LD_INT 31
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: IN
48872: OR
48873: IFFALSE 48687
48875: GO 48684
48877: POP
48878: POP
// end else
48879: GO 49261
// for j = 1 to x do
48881: LD_ADDR_VAR 0 9
48885: PUSH
48886: DOUBLE
48887: LD_INT 1
48889: DEC
48890: ST_TO_ADDR
48891: LD_VAR 0 13
48895: PUSH
48896: FOR_TO
48897: IFFALSE 49259
// begin InitHc ;
48899: CALL_OW 19
// if not f then
48903: LD_VAR 0 12
48907: NOT
48908: IFFALSE 48997
// begin PrepareHuman ( false , i , skill ) ;
48910: LD_INT 0
48912: PPUSH
48913: LD_VAR 0 8
48917: PPUSH
48918: LD_VAR 0 4
48922: PPUSH
48923: CALL_OW 380
// un := CreateHuman ;
48927: LD_ADDR_VAR 0 14
48931: PUSH
48932: CALL_OW 44
48936: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48937: LD_ADDR_VAR 0 7
48941: PUSH
48942: LD_VAR 0 7
48946: PPUSH
48947: LD_INT 1
48949: PPUSH
48950: LD_VAR 0 14
48954: PPUSH
48955: CALL_OW 2
48959: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48960: LD_VAR 0 14
48964: PPUSH
48965: LD_VAR 0 1
48969: PPUSH
48970: CALL_OW 250
48974: PPUSH
48975: LD_VAR 0 1
48979: PPUSH
48980: CALL_OW 251
48984: PPUSH
48985: LD_INT 10
48987: PPUSH
48988: LD_INT 0
48990: PPUSH
48991: CALL_OW 50
// continue ;
48995: GO 48896
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48997: LD_VAR 0 12
49001: PUSH
49002: LD_INT 1
49004: ARRAY
49005: PPUSH
49006: CALL_OW 313
49010: PUSH
49011: LD_VAR 0 12
49015: PUSH
49016: LD_INT 1
49018: ARRAY
49019: PPUSH
49020: CALL_OW 266
49024: PUSH
49025: LD_INT 32
49027: PUSH
49028: LD_INT 31
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: IN
49035: AND
49036: PUSH
49037: LD_VAR 0 12
49041: PUSH
49042: LD_INT 1
49044: ARRAY
49045: PPUSH
49046: CALL_OW 313
49050: PUSH
49051: LD_INT 6
49053: EQUAL
49054: OR
49055: IFFALSE 49075
// f := Delete ( f , 1 ) ;
49057: LD_ADDR_VAR 0 12
49061: PUSH
49062: LD_VAR 0 12
49066: PPUSH
49067: LD_INT 1
49069: PPUSH
49070: CALL_OW 3
49074: ST_TO_ADDR
// if not f then
49075: LD_VAR 0 12
49079: NOT
49080: IFFALSE 49098
// begin x := x + 2 ;
49082: LD_ADDR_VAR 0 13
49086: PUSH
49087: LD_VAR 0 13
49091: PUSH
49092: LD_INT 2
49094: PLUS
49095: ST_TO_ADDR
// continue ;
49096: GO 48896
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49098: LD_VAR 0 12
49102: PUSH
49103: LD_INT 1
49105: ARRAY
49106: PPUSH
49107: CALL_OW 266
49111: PUSH
49112: LD_INT 5
49114: EQUAL
49115: IFFALSE 49189
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49117: LD_VAR 0 12
49121: PUSH
49122: LD_INT 1
49124: ARRAY
49125: PPUSH
49126: CALL_OW 313
49130: PUSH
49131: LD_INT 3
49133: LESS
49134: IFFALSE 49170
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49136: LD_INT 0
49138: PPUSH
49139: LD_INT 5
49141: PUSH
49142: LD_INT 8
49144: PUSH
49145: LD_INT 9
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: LIST
49152: PUSH
49153: LD_VAR 0 17
49157: ARRAY
49158: PPUSH
49159: LD_VAR 0 4
49163: PPUSH
49164: CALL_OW 380
49168: GO 49187
// PrepareHuman ( false , i , skill ) ;
49170: LD_INT 0
49172: PPUSH
49173: LD_VAR 0 8
49177: PPUSH
49178: LD_VAR 0 4
49182: PPUSH
49183: CALL_OW 380
// end else
49187: GO 49206
// PrepareHuman ( false , i , skill ) ;
49189: LD_INT 0
49191: PPUSH
49192: LD_VAR 0 8
49196: PPUSH
49197: LD_VAR 0 4
49201: PPUSH
49202: CALL_OW 380
// un := CreateHuman ;
49206: LD_ADDR_VAR 0 14
49210: PUSH
49211: CALL_OW 44
49215: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49216: LD_ADDR_VAR 0 7
49220: PUSH
49221: LD_VAR 0 7
49225: PPUSH
49226: LD_INT 1
49228: PPUSH
49229: LD_VAR 0 14
49233: PPUSH
49234: CALL_OW 2
49238: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49239: LD_VAR 0 14
49243: PPUSH
49244: LD_VAR 0 12
49248: PUSH
49249: LD_INT 1
49251: ARRAY
49252: PPUSH
49253: CALL_OW 52
// end ;
49257: GO 48896
49259: POP
49260: POP
// end ;
49261: GO 48198
49263: POP
49264: POP
// result := result ^ buildings ;
49265: LD_ADDR_VAR 0 7
49269: PUSH
49270: LD_VAR 0 7
49274: PUSH
49275: LD_VAR 0 18
49279: ADD
49280: ST_TO_ADDR
// end else
49281: GO 49424
// begin for i = 1 to personel do
49283: LD_ADDR_VAR 0 8
49287: PUSH
49288: DOUBLE
49289: LD_INT 1
49291: DEC
49292: ST_TO_ADDR
49293: LD_VAR 0 6
49297: PUSH
49298: FOR_TO
49299: IFFALSE 49422
// begin if i > 4 then
49301: LD_VAR 0 8
49305: PUSH
49306: LD_INT 4
49308: GREATER
49309: IFFALSE 49313
// break ;
49311: GO 49422
// x := personel [ i ] ;
49313: LD_ADDR_VAR 0 13
49317: PUSH
49318: LD_VAR 0 6
49322: PUSH
49323: LD_VAR 0 8
49327: ARRAY
49328: ST_TO_ADDR
// if x = - 1 then
49329: LD_VAR 0 13
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: EQUAL
49338: IFFALSE 49342
// continue ;
49340: GO 49298
// PrepareHuman ( false , i , skill ) ;
49342: LD_INT 0
49344: PPUSH
49345: LD_VAR 0 8
49349: PPUSH
49350: LD_VAR 0 4
49354: PPUSH
49355: CALL_OW 380
// un := CreateHuman ;
49359: LD_ADDR_VAR 0 14
49363: PUSH
49364: CALL_OW 44
49368: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49369: LD_VAR 0 14
49373: PPUSH
49374: LD_VAR 0 1
49378: PPUSH
49379: CALL_OW 250
49383: PPUSH
49384: LD_VAR 0 1
49388: PPUSH
49389: CALL_OW 251
49393: PPUSH
49394: LD_INT 10
49396: PPUSH
49397: LD_INT 0
49399: PPUSH
49400: CALL_OW 50
// result := result ^ un ;
49404: LD_ADDR_VAR 0 7
49408: PUSH
49409: LD_VAR 0 7
49413: PUSH
49414: LD_VAR 0 14
49418: ADD
49419: ST_TO_ADDR
// end ;
49420: GO 49298
49422: POP
49423: POP
// end ; end ;
49424: LD_VAR 0 7
49428: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49429: LD_INT 0
49431: PPUSH
49432: PPUSH
49433: PPUSH
49434: PPUSH
49435: PPUSH
49436: PPUSH
49437: PPUSH
49438: PPUSH
49439: PPUSH
49440: PPUSH
49441: PPUSH
49442: PPUSH
49443: PPUSH
49444: PPUSH
49445: PPUSH
49446: PPUSH
// result := false ;
49447: LD_ADDR_VAR 0 3
49451: PUSH
49452: LD_INT 0
49454: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49455: LD_VAR 0 1
49459: NOT
49460: PUSH
49461: LD_VAR 0 1
49465: PPUSH
49466: CALL_OW 266
49470: PUSH
49471: LD_INT 32
49473: PUSH
49474: LD_INT 33
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: IN
49481: NOT
49482: OR
49483: IFFALSE 49487
// exit ;
49485: GO 50596
// nat := GetNation ( tower ) ;
49487: LD_ADDR_VAR 0 12
49491: PUSH
49492: LD_VAR 0 1
49496: PPUSH
49497: CALL_OW 248
49501: ST_TO_ADDR
// side := GetSide ( tower ) ;
49502: LD_ADDR_VAR 0 16
49506: PUSH
49507: LD_VAR 0 1
49511: PPUSH
49512: CALL_OW 255
49516: ST_TO_ADDR
// x := GetX ( tower ) ;
49517: LD_ADDR_VAR 0 10
49521: PUSH
49522: LD_VAR 0 1
49526: PPUSH
49527: CALL_OW 250
49531: ST_TO_ADDR
// y := GetY ( tower ) ;
49532: LD_ADDR_VAR 0 11
49536: PUSH
49537: LD_VAR 0 1
49541: PPUSH
49542: CALL_OW 251
49546: ST_TO_ADDR
// if not x or not y then
49547: LD_VAR 0 10
49551: NOT
49552: PUSH
49553: LD_VAR 0 11
49557: NOT
49558: OR
49559: IFFALSE 49563
// exit ;
49561: GO 50596
// weapon := 0 ;
49563: LD_ADDR_VAR 0 18
49567: PUSH
49568: LD_INT 0
49570: ST_TO_ADDR
// fac_list := [ ] ;
49571: LD_ADDR_VAR 0 17
49575: PUSH
49576: EMPTY
49577: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49578: LD_ADDR_VAR 0 6
49582: PUSH
49583: LD_VAR 0 1
49587: PPUSH
49588: CALL_OW 274
49592: PPUSH
49593: LD_VAR 0 2
49597: PPUSH
49598: LD_INT 0
49600: PPUSH
49601: CALL 47167 0 3
49605: PPUSH
49606: LD_INT 30
49608: PUSH
49609: LD_INT 3
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PPUSH
49616: CALL_OW 72
49620: ST_TO_ADDR
// if not factories then
49621: LD_VAR 0 6
49625: NOT
49626: IFFALSE 49630
// exit ;
49628: GO 50596
// for i in factories do
49630: LD_ADDR_VAR 0 8
49634: PUSH
49635: LD_VAR 0 6
49639: PUSH
49640: FOR_IN
49641: IFFALSE 49666
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49643: LD_ADDR_VAR 0 17
49647: PUSH
49648: LD_VAR 0 17
49652: PUSH
49653: LD_VAR 0 8
49657: PPUSH
49658: CALL_OW 478
49662: UNION
49663: ST_TO_ADDR
49664: GO 49640
49666: POP
49667: POP
// if not fac_list then
49668: LD_VAR 0 17
49672: NOT
49673: IFFALSE 49677
// exit ;
49675: GO 50596
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49677: LD_ADDR_VAR 0 5
49681: PUSH
49682: LD_INT 4
49684: PUSH
49685: LD_INT 5
49687: PUSH
49688: LD_INT 9
49690: PUSH
49691: LD_INT 10
49693: PUSH
49694: LD_INT 6
49696: PUSH
49697: LD_INT 7
49699: PUSH
49700: LD_INT 11
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 27
49714: PUSH
49715: LD_INT 28
49717: PUSH
49718: LD_INT 26
49720: PUSH
49721: LD_INT 30
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 43
49732: PUSH
49733: LD_INT 44
49735: PUSH
49736: LD_INT 46
49738: PUSH
49739: LD_INT 45
49741: PUSH
49742: LD_INT 47
49744: PUSH
49745: LD_INT 49
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: LIST
49760: PUSH
49761: LD_VAR 0 12
49765: ARRAY
49766: ST_TO_ADDR
// list := list isect fac_list ;
49767: LD_ADDR_VAR 0 5
49771: PUSH
49772: LD_VAR 0 5
49776: PUSH
49777: LD_VAR 0 17
49781: ISECT
49782: ST_TO_ADDR
// if not list then
49783: LD_VAR 0 5
49787: NOT
49788: IFFALSE 49792
// exit ;
49790: GO 50596
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49792: LD_VAR 0 12
49796: PUSH
49797: LD_INT 3
49799: EQUAL
49800: PUSH
49801: LD_INT 49
49803: PUSH
49804: LD_VAR 0 5
49808: IN
49809: AND
49810: PUSH
49811: LD_INT 31
49813: PPUSH
49814: LD_VAR 0 16
49818: PPUSH
49819: CALL_OW 321
49823: PUSH
49824: LD_INT 2
49826: EQUAL
49827: AND
49828: IFFALSE 49888
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49830: LD_INT 22
49832: PUSH
49833: LD_VAR 0 16
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 35
49844: PUSH
49845: LD_INT 49
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 91
49854: PUSH
49855: LD_VAR 0 1
49859: PUSH
49860: LD_INT 10
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: LIST
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: LIST
49872: PPUSH
49873: CALL_OW 69
49877: NOT
49878: IFFALSE 49888
// weapon := ru_time_lapser ;
49880: LD_ADDR_VAR 0 18
49884: PUSH
49885: LD_INT 49
49887: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49888: LD_VAR 0 12
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: LD_INT 2
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: IN
49903: PUSH
49904: LD_INT 11
49906: PUSH
49907: LD_VAR 0 5
49911: IN
49912: PUSH
49913: LD_INT 30
49915: PUSH
49916: LD_VAR 0 5
49920: IN
49921: OR
49922: AND
49923: PUSH
49924: LD_INT 6
49926: PPUSH
49927: LD_VAR 0 16
49931: PPUSH
49932: CALL_OW 321
49936: PUSH
49937: LD_INT 2
49939: EQUAL
49940: AND
49941: IFFALSE 50106
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49943: LD_INT 22
49945: PUSH
49946: LD_VAR 0 16
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: LD_INT 35
49960: PUSH
49961: LD_INT 11
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 35
49970: PUSH
49971: LD_INT 30
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 91
49985: PUSH
49986: LD_VAR 0 1
49990: PUSH
49991: LD_INT 18
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: LIST
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: LIST
50003: PPUSH
50004: CALL_OW 69
50008: NOT
50009: PUSH
50010: LD_INT 22
50012: PUSH
50013: LD_VAR 0 16
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 2
50024: PUSH
50025: LD_INT 30
50027: PUSH
50028: LD_INT 32
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 30
50037: PUSH
50038: LD_INT 33
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 91
50052: PUSH
50053: LD_VAR 0 1
50057: PUSH
50058: LD_INT 12
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: LIST
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: LIST
50070: PUSH
50071: EMPTY
50072: LIST
50073: PPUSH
50074: CALL_OW 69
50078: PUSH
50079: LD_INT 2
50081: GREATER
50082: AND
50083: IFFALSE 50106
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50085: LD_ADDR_VAR 0 18
50089: PUSH
50090: LD_INT 11
50092: PUSH
50093: LD_INT 30
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_VAR 0 12
50104: ARRAY
50105: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50106: LD_VAR 0 18
50110: NOT
50111: PUSH
50112: LD_INT 40
50114: PPUSH
50115: LD_VAR 0 16
50119: PPUSH
50120: CALL_OW 321
50124: PUSH
50125: LD_INT 2
50127: EQUAL
50128: AND
50129: PUSH
50130: LD_INT 7
50132: PUSH
50133: LD_VAR 0 5
50137: IN
50138: PUSH
50139: LD_INT 28
50141: PUSH
50142: LD_VAR 0 5
50146: IN
50147: OR
50148: PUSH
50149: LD_INT 45
50151: PUSH
50152: LD_VAR 0 5
50156: IN
50157: OR
50158: AND
50159: IFFALSE 50413
// begin hex := GetHexInfo ( x , y ) ;
50161: LD_ADDR_VAR 0 4
50165: PUSH
50166: LD_VAR 0 10
50170: PPUSH
50171: LD_VAR 0 11
50175: PPUSH
50176: CALL_OW 546
50180: ST_TO_ADDR
// if hex [ 1 ] then
50181: LD_VAR 0 4
50185: PUSH
50186: LD_INT 1
50188: ARRAY
50189: IFFALSE 50193
// exit ;
50191: GO 50596
// height := hex [ 2 ] ;
50193: LD_ADDR_VAR 0 15
50197: PUSH
50198: LD_VAR 0 4
50202: PUSH
50203: LD_INT 2
50205: ARRAY
50206: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50207: LD_ADDR_VAR 0 14
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: LD_INT 2
50217: PUSH
50218: LD_INT 3
50220: PUSH
50221: LD_INT 5
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: ST_TO_ADDR
// for i in tmp do
50230: LD_ADDR_VAR 0 8
50234: PUSH
50235: LD_VAR 0 14
50239: PUSH
50240: FOR_IN
50241: IFFALSE 50411
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50243: LD_ADDR_VAR 0 9
50247: PUSH
50248: LD_VAR 0 10
50252: PPUSH
50253: LD_VAR 0 8
50257: PPUSH
50258: LD_INT 5
50260: PPUSH
50261: CALL_OW 272
50265: PUSH
50266: LD_VAR 0 11
50270: PPUSH
50271: LD_VAR 0 8
50275: PPUSH
50276: LD_INT 5
50278: PPUSH
50279: CALL_OW 273
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50288: LD_VAR 0 9
50292: PUSH
50293: LD_INT 1
50295: ARRAY
50296: PPUSH
50297: LD_VAR 0 9
50301: PUSH
50302: LD_INT 2
50304: ARRAY
50305: PPUSH
50306: CALL_OW 488
50310: IFFALSE 50409
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50312: LD_ADDR_VAR 0 4
50316: PUSH
50317: LD_VAR 0 9
50321: PUSH
50322: LD_INT 1
50324: ARRAY
50325: PPUSH
50326: LD_VAR 0 9
50330: PUSH
50331: LD_INT 2
50333: ARRAY
50334: PPUSH
50335: CALL_OW 546
50339: ST_TO_ADDR
// if hex [ 1 ] then
50340: LD_VAR 0 4
50344: PUSH
50345: LD_INT 1
50347: ARRAY
50348: IFFALSE 50352
// continue ;
50350: GO 50240
// h := hex [ 2 ] ;
50352: LD_ADDR_VAR 0 13
50356: PUSH
50357: LD_VAR 0 4
50361: PUSH
50362: LD_INT 2
50364: ARRAY
50365: ST_TO_ADDR
// if h + 7 < height then
50366: LD_VAR 0 13
50370: PUSH
50371: LD_INT 7
50373: PLUS
50374: PUSH
50375: LD_VAR 0 15
50379: LESS
50380: IFFALSE 50409
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50382: LD_ADDR_VAR 0 18
50386: PUSH
50387: LD_INT 7
50389: PUSH
50390: LD_INT 28
50392: PUSH
50393: LD_INT 45
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: LIST
50400: PUSH
50401: LD_VAR 0 12
50405: ARRAY
50406: ST_TO_ADDR
// break ;
50407: GO 50411
// end ; end ; end ;
50409: GO 50240
50411: POP
50412: POP
// end ; if not weapon then
50413: LD_VAR 0 18
50417: NOT
50418: IFFALSE 50478
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50420: LD_ADDR_VAR 0 5
50424: PUSH
50425: LD_VAR 0 5
50429: PUSH
50430: LD_INT 11
50432: PUSH
50433: LD_INT 30
50435: PUSH
50436: LD_INT 49
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: LIST
50443: DIFF
50444: ST_TO_ADDR
// if not list then
50445: LD_VAR 0 5
50449: NOT
50450: IFFALSE 50454
// exit ;
50452: GO 50596
// weapon := list [ rand ( 1 , list ) ] ;
50454: LD_ADDR_VAR 0 18
50458: PUSH
50459: LD_VAR 0 5
50463: PUSH
50464: LD_INT 1
50466: PPUSH
50467: LD_VAR 0 5
50471: PPUSH
50472: CALL_OW 12
50476: ARRAY
50477: ST_TO_ADDR
// end ; if weapon then
50478: LD_VAR 0 18
50482: IFFALSE 50596
// begin tmp := CostOfWeapon ( weapon ) ;
50484: LD_ADDR_VAR 0 14
50488: PUSH
50489: LD_VAR 0 18
50493: PPUSH
50494: CALL_OW 451
50498: ST_TO_ADDR
// j := GetBase ( tower ) ;
50499: LD_ADDR_VAR 0 9
50503: PUSH
50504: LD_VAR 0 1
50508: PPUSH
50509: CALL_OW 274
50513: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50514: LD_VAR 0 9
50518: PPUSH
50519: LD_INT 1
50521: PPUSH
50522: CALL_OW 275
50526: PUSH
50527: LD_VAR 0 14
50531: PUSH
50532: LD_INT 1
50534: ARRAY
50535: GREATEREQUAL
50536: PUSH
50537: LD_VAR 0 9
50541: PPUSH
50542: LD_INT 2
50544: PPUSH
50545: CALL_OW 275
50549: PUSH
50550: LD_VAR 0 14
50554: PUSH
50555: LD_INT 2
50557: ARRAY
50558: GREATEREQUAL
50559: AND
50560: PUSH
50561: LD_VAR 0 9
50565: PPUSH
50566: LD_INT 3
50568: PPUSH
50569: CALL_OW 275
50573: PUSH
50574: LD_VAR 0 14
50578: PUSH
50579: LD_INT 3
50581: ARRAY
50582: GREATEREQUAL
50583: AND
50584: IFFALSE 50596
// result := weapon ;
50586: LD_ADDR_VAR 0 3
50590: PUSH
50591: LD_VAR 0 18
50595: ST_TO_ADDR
// end ; end ;
50596: LD_VAR 0 3
50600: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50601: LD_INT 0
50603: PPUSH
50604: PPUSH
// result := true ;
50605: LD_ADDR_VAR 0 3
50609: PUSH
50610: LD_INT 1
50612: ST_TO_ADDR
// if array1 = array2 then
50613: LD_VAR 0 1
50617: PUSH
50618: LD_VAR 0 2
50622: EQUAL
50623: IFFALSE 50683
// begin for i = 1 to array1 do
50625: LD_ADDR_VAR 0 4
50629: PUSH
50630: DOUBLE
50631: LD_INT 1
50633: DEC
50634: ST_TO_ADDR
50635: LD_VAR 0 1
50639: PUSH
50640: FOR_TO
50641: IFFALSE 50679
// if array1 [ i ] <> array2 [ i ] then
50643: LD_VAR 0 1
50647: PUSH
50648: LD_VAR 0 4
50652: ARRAY
50653: PUSH
50654: LD_VAR 0 2
50658: PUSH
50659: LD_VAR 0 4
50663: ARRAY
50664: NONEQUAL
50665: IFFALSE 50677
// begin result := false ;
50667: LD_ADDR_VAR 0 3
50671: PUSH
50672: LD_INT 0
50674: ST_TO_ADDR
// break ;
50675: GO 50679
// end ;
50677: GO 50640
50679: POP
50680: POP
// end else
50681: GO 50691
// result := false ;
50683: LD_ADDR_VAR 0 3
50687: PUSH
50688: LD_INT 0
50690: ST_TO_ADDR
// end ;
50691: LD_VAR 0 3
50695: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50696: LD_INT 0
50698: PPUSH
50699: PPUSH
// if not array1 or not array2 then
50700: LD_VAR 0 1
50704: NOT
50705: PUSH
50706: LD_VAR 0 2
50710: NOT
50711: OR
50712: IFFALSE 50716
// exit ;
50714: GO 50780
// result := true ;
50716: LD_ADDR_VAR 0 3
50720: PUSH
50721: LD_INT 1
50723: ST_TO_ADDR
// for i = 1 to array1 do
50724: LD_ADDR_VAR 0 4
50728: PUSH
50729: DOUBLE
50730: LD_INT 1
50732: DEC
50733: ST_TO_ADDR
50734: LD_VAR 0 1
50738: PUSH
50739: FOR_TO
50740: IFFALSE 50778
// if array1 [ i ] <> array2 [ i ] then
50742: LD_VAR 0 1
50746: PUSH
50747: LD_VAR 0 4
50751: ARRAY
50752: PUSH
50753: LD_VAR 0 2
50757: PUSH
50758: LD_VAR 0 4
50762: ARRAY
50763: NONEQUAL
50764: IFFALSE 50776
// begin result := false ;
50766: LD_ADDR_VAR 0 3
50770: PUSH
50771: LD_INT 0
50773: ST_TO_ADDR
// break ;
50774: GO 50778
// end ;
50776: GO 50739
50778: POP
50779: POP
// end ;
50780: LD_VAR 0 3
50784: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50785: LD_INT 0
50787: PPUSH
50788: PPUSH
50789: PPUSH
// pom := GetBase ( fac ) ;
50790: LD_ADDR_VAR 0 5
50794: PUSH
50795: LD_VAR 0 1
50799: PPUSH
50800: CALL_OW 274
50804: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50805: LD_ADDR_VAR 0 4
50809: PUSH
50810: LD_VAR 0 2
50814: PUSH
50815: LD_INT 1
50817: ARRAY
50818: PPUSH
50819: LD_VAR 0 2
50823: PUSH
50824: LD_INT 2
50826: ARRAY
50827: PPUSH
50828: LD_VAR 0 2
50832: PUSH
50833: LD_INT 3
50835: ARRAY
50836: PPUSH
50837: LD_VAR 0 2
50841: PUSH
50842: LD_INT 4
50844: ARRAY
50845: PPUSH
50846: CALL_OW 449
50850: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50851: LD_ADDR_VAR 0 3
50855: PUSH
50856: LD_VAR 0 5
50860: PPUSH
50861: LD_INT 1
50863: PPUSH
50864: CALL_OW 275
50868: PUSH
50869: LD_VAR 0 4
50873: PUSH
50874: LD_INT 1
50876: ARRAY
50877: GREATEREQUAL
50878: PUSH
50879: LD_VAR 0 5
50883: PPUSH
50884: LD_INT 2
50886: PPUSH
50887: CALL_OW 275
50891: PUSH
50892: LD_VAR 0 4
50896: PUSH
50897: LD_INT 2
50899: ARRAY
50900: GREATEREQUAL
50901: AND
50902: PUSH
50903: LD_VAR 0 5
50907: PPUSH
50908: LD_INT 3
50910: PPUSH
50911: CALL_OW 275
50915: PUSH
50916: LD_VAR 0 4
50920: PUSH
50921: LD_INT 3
50923: ARRAY
50924: GREATEREQUAL
50925: AND
50926: ST_TO_ADDR
// end ;
50927: LD_VAR 0 3
50931: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50932: LD_INT 0
50934: PPUSH
50935: PPUSH
50936: PPUSH
50937: PPUSH
// pom := GetBase ( building ) ;
50938: LD_ADDR_VAR 0 3
50942: PUSH
50943: LD_VAR 0 1
50947: PPUSH
50948: CALL_OW 274
50952: ST_TO_ADDR
// if not pom then
50953: LD_VAR 0 3
50957: NOT
50958: IFFALSE 50962
// exit ;
50960: GO 51132
// btype := GetBType ( building ) ;
50962: LD_ADDR_VAR 0 5
50966: PUSH
50967: LD_VAR 0 1
50971: PPUSH
50972: CALL_OW 266
50976: ST_TO_ADDR
// if btype = b_armoury then
50977: LD_VAR 0 5
50981: PUSH
50982: LD_INT 4
50984: EQUAL
50985: IFFALSE 50995
// btype := b_barracks ;
50987: LD_ADDR_VAR 0 5
50991: PUSH
50992: LD_INT 5
50994: ST_TO_ADDR
// if btype = b_depot then
50995: LD_VAR 0 5
50999: PUSH
51000: LD_INT 0
51002: EQUAL
51003: IFFALSE 51013
// btype := b_warehouse ;
51005: LD_ADDR_VAR 0 5
51009: PUSH
51010: LD_INT 1
51012: ST_TO_ADDR
// if btype = b_workshop then
51013: LD_VAR 0 5
51017: PUSH
51018: LD_INT 2
51020: EQUAL
51021: IFFALSE 51031
// btype := b_factory ;
51023: LD_ADDR_VAR 0 5
51027: PUSH
51028: LD_INT 3
51030: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51031: LD_ADDR_VAR 0 4
51035: PUSH
51036: LD_VAR 0 5
51040: PPUSH
51041: LD_VAR 0 1
51045: PPUSH
51046: CALL_OW 248
51050: PPUSH
51051: CALL_OW 450
51055: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51056: LD_ADDR_VAR 0 2
51060: PUSH
51061: LD_VAR 0 3
51065: PPUSH
51066: LD_INT 1
51068: PPUSH
51069: CALL_OW 275
51073: PUSH
51074: LD_VAR 0 4
51078: PUSH
51079: LD_INT 1
51081: ARRAY
51082: GREATEREQUAL
51083: PUSH
51084: LD_VAR 0 3
51088: PPUSH
51089: LD_INT 2
51091: PPUSH
51092: CALL_OW 275
51096: PUSH
51097: LD_VAR 0 4
51101: PUSH
51102: LD_INT 2
51104: ARRAY
51105: GREATEREQUAL
51106: AND
51107: PUSH
51108: LD_VAR 0 3
51112: PPUSH
51113: LD_INT 3
51115: PPUSH
51116: CALL_OW 275
51120: PUSH
51121: LD_VAR 0 4
51125: PUSH
51126: LD_INT 3
51128: ARRAY
51129: GREATEREQUAL
51130: AND
51131: ST_TO_ADDR
// end ;
51132: LD_VAR 0 2
51136: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51137: LD_INT 0
51139: PPUSH
51140: PPUSH
51141: PPUSH
// pom := GetBase ( building ) ;
51142: LD_ADDR_VAR 0 4
51146: PUSH
51147: LD_VAR 0 1
51151: PPUSH
51152: CALL_OW 274
51156: ST_TO_ADDR
// if not pom then
51157: LD_VAR 0 4
51161: NOT
51162: IFFALSE 51166
// exit ;
51164: GO 51267
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51166: LD_ADDR_VAR 0 5
51170: PUSH
51171: LD_VAR 0 2
51175: PPUSH
51176: LD_VAR 0 1
51180: PPUSH
51181: CALL_OW 248
51185: PPUSH
51186: CALL_OW 450
51190: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51191: LD_ADDR_VAR 0 3
51195: PUSH
51196: LD_VAR 0 4
51200: PPUSH
51201: LD_INT 1
51203: PPUSH
51204: CALL_OW 275
51208: PUSH
51209: LD_VAR 0 5
51213: PUSH
51214: LD_INT 1
51216: ARRAY
51217: GREATEREQUAL
51218: PUSH
51219: LD_VAR 0 4
51223: PPUSH
51224: LD_INT 2
51226: PPUSH
51227: CALL_OW 275
51231: PUSH
51232: LD_VAR 0 5
51236: PUSH
51237: LD_INT 2
51239: ARRAY
51240: GREATEREQUAL
51241: AND
51242: PUSH
51243: LD_VAR 0 4
51247: PPUSH
51248: LD_INT 3
51250: PPUSH
51251: CALL_OW 275
51255: PUSH
51256: LD_VAR 0 5
51260: PUSH
51261: LD_INT 3
51263: ARRAY
51264: GREATEREQUAL
51265: AND
51266: ST_TO_ADDR
// end ;
51267: LD_VAR 0 3
51271: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51272: LD_INT 0
51274: PPUSH
51275: PPUSH
51276: PPUSH
51277: PPUSH
51278: PPUSH
51279: PPUSH
51280: PPUSH
51281: PPUSH
51282: PPUSH
51283: PPUSH
51284: PPUSH
// result := false ;
51285: LD_ADDR_VAR 0 8
51289: PUSH
51290: LD_INT 0
51292: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51293: LD_VAR 0 5
51297: NOT
51298: PUSH
51299: LD_VAR 0 1
51303: NOT
51304: OR
51305: PUSH
51306: LD_VAR 0 2
51310: NOT
51311: OR
51312: PUSH
51313: LD_VAR 0 3
51317: NOT
51318: OR
51319: IFFALSE 51323
// exit ;
51321: GO 52137
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51323: LD_ADDR_VAR 0 14
51327: PUSH
51328: LD_VAR 0 1
51332: PPUSH
51333: LD_VAR 0 2
51337: PPUSH
51338: LD_VAR 0 3
51342: PPUSH
51343: LD_VAR 0 4
51347: PPUSH
51348: LD_VAR 0 5
51352: PUSH
51353: LD_INT 1
51355: ARRAY
51356: PPUSH
51357: CALL_OW 248
51361: PPUSH
51362: LD_INT 0
51364: PPUSH
51365: CALL 53370 0 6
51369: ST_TO_ADDR
// if not hexes then
51370: LD_VAR 0 14
51374: NOT
51375: IFFALSE 51379
// exit ;
51377: GO 52137
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51379: LD_ADDR_VAR 0 17
51383: PUSH
51384: LD_VAR 0 5
51388: PPUSH
51389: LD_INT 22
51391: PUSH
51392: LD_VAR 0 13
51396: PPUSH
51397: CALL_OW 255
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 2
51408: PUSH
51409: LD_INT 30
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 30
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: LIST
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PPUSH
51438: CALL_OW 72
51442: ST_TO_ADDR
// for i = 1 to hexes do
51443: LD_ADDR_VAR 0 9
51447: PUSH
51448: DOUBLE
51449: LD_INT 1
51451: DEC
51452: ST_TO_ADDR
51453: LD_VAR 0 14
51457: PUSH
51458: FOR_TO
51459: IFFALSE 52135
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51461: LD_ADDR_VAR 0 13
51465: PUSH
51466: LD_VAR 0 14
51470: PUSH
51471: LD_VAR 0 9
51475: ARRAY
51476: PUSH
51477: LD_INT 1
51479: ARRAY
51480: PPUSH
51481: LD_VAR 0 14
51485: PUSH
51486: LD_VAR 0 9
51490: ARRAY
51491: PUSH
51492: LD_INT 2
51494: ARRAY
51495: PPUSH
51496: CALL_OW 428
51500: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51501: LD_VAR 0 14
51505: PUSH
51506: LD_VAR 0 9
51510: ARRAY
51511: PUSH
51512: LD_INT 1
51514: ARRAY
51515: PPUSH
51516: LD_VAR 0 14
51520: PUSH
51521: LD_VAR 0 9
51525: ARRAY
51526: PUSH
51527: LD_INT 2
51529: ARRAY
51530: PPUSH
51531: CALL_OW 351
51535: PUSH
51536: LD_VAR 0 14
51540: PUSH
51541: LD_VAR 0 9
51545: ARRAY
51546: PUSH
51547: LD_INT 1
51549: ARRAY
51550: PPUSH
51551: LD_VAR 0 14
51555: PUSH
51556: LD_VAR 0 9
51560: ARRAY
51561: PUSH
51562: LD_INT 2
51564: ARRAY
51565: PPUSH
51566: CALL_OW 488
51570: NOT
51571: OR
51572: PUSH
51573: LD_VAR 0 13
51577: PPUSH
51578: CALL_OW 247
51582: PUSH
51583: LD_INT 3
51585: EQUAL
51586: OR
51587: IFFALSE 51593
// exit ;
51589: POP
51590: POP
51591: GO 52137
// if not tmp then
51593: LD_VAR 0 13
51597: NOT
51598: IFFALSE 51602
// continue ;
51600: GO 51458
// result := true ;
51602: LD_ADDR_VAR 0 8
51606: PUSH
51607: LD_INT 1
51609: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51610: LD_VAR 0 6
51614: PUSH
51615: LD_VAR 0 13
51619: PPUSH
51620: CALL_OW 247
51624: PUSH
51625: LD_INT 2
51627: EQUAL
51628: AND
51629: PUSH
51630: LD_VAR 0 13
51634: PPUSH
51635: CALL_OW 263
51639: PUSH
51640: LD_INT 1
51642: EQUAL
51643: AND
51644: IFFALSE 51808
// begin if IsDrivenBy ( tmp ) then
51646: LD_VAR 0 13
51650: PPUSH
51651: CALL_OW 311
51655: IFFALSE 51659
// continue ;
51657: GO 51458
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51659: LD_VAR 0 6
51663: PPUSH
51664: LD_INT 3
51666: PUSH
51667: LD_INT 60
51669: PUSH
51670: EMPTY
51671: LIST
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: PUSH
51680: LD_INT 55
51682: PUSH
51683: EMPTY
51684: LIST
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PPUSH
51694: CALL_OW 72
51698: IFFALSE 51806
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51700: LD_ADDR_VAR 0 18
51704: PUSH
51705: LD_VAR 0 6
51709: PPUSH
51710: LD_INT 3
51712: PUSH
51713: LD_INT 60
51715: PUSH
51716: EMPTY
51717: LIST
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 3
51725: PUSH
51726: LD_INT 55
51728: PUSH
51729: EMPTY
51730: LIST
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PPUSH
51740: CALL_OW 72
51744: PUSH
51745: LD_INT 1
51747: ARRAY
51748: ST_TO_ADDR
// if IsInUnit ( driver ) then
51749: LD_VAR 0 18
51753: PPUSH
51754: CALL_OW 310
51758: IFFALSE 51769
// ComExit ( driver ) ;
51760: LD_VAR 0 18
51764: PPUSH
51765: CALL 77150 0 1
// AddComEnterUnit ( driver , tmp ) ;
51769: LD_VAR 0 18
51773: PPUSH
51774: LD_VAR 0 13
51778: PPUSH
51779: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51783: LD_VAR 0 18
51787: PPUSH
51788: LD_VAR 0 7
51792: PPUSH
51793: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51797: LD_VAR 0 18
51801: PPUSH
51802: CALL_OW 181
// end ; continue ;
51806: GO 51458
// end ; if not cleaners or not tmp in cleaners then
51808: LD_VAR 0 6
51812: NOT
51813: PUSH
51814: LD_VAR 0 13
51818: PUSH
51819: LD_VAR 0 6
51823: IN
51824: NOT
51825: OR
51826: IFFALSE 52133
// begin if dep then
51828: LD_VAR 0 17
51832: IFFALSE 51968
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51834: LD_ADDR_VAR 0 16
51838: PUSH
51839: LD_VAR 0 17
51843: PUSH
51844: LD_INT 1
51846: ARRAY
51847: PPUSH
51848: CALL_OW 250
51852: PPUSH
51853: LD_VAR 0 17
51857: PUSH
51858: LD_INT 1
51860: ARRAY
51861: PPUSH
51862: CALL_OW 254
51866: PPUSH
51867: LD_INT 5
51869: PPUSH
51870: CALL_OW 272
51874: PUSH
51875: LD_VAR 0 17
51879: PUSH
51880: LD_INT 1
51882: ARRAY
51883: PPUSH
51884: CALL_OW 251
51888: PPUSH
51889: LD_VAR 0 17
51893: PUSH
51894: LD_INT 1
51896: ARRAY
51897: PPUSH
51898: CALL_OW 254
51902: PPUSH
51903: LD_INT 5
51905: PPUSH
51906: CALL_OW 273
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51915: LD_VAR 0 16
51919: PUSH
51920: LD_INT 1
51922: ARRAY
51923: PPUSH
51924: LD_VAR 0 16
51928: PUSH
51929: LD_INT 2
51931: ARRAY
51932: PPUSH
51933: CALL_OW 488
51937: IFFALSE 51968
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51939: LD_VAR 0 13
51943: PPUSH
51944: LD_VAR 0 16
51948: PUSH
51949: LD_INT 1
51951: ARRAY
51952: PPUSH
51953: LD_VAR 0 16
51957: PUSH
51958: LD_INT 2
51960: ARRAY
51961: PPUSH
51962: CALL_OW 111
// continue ;
51966: GO 51458
// end ; end ; r := GetDir ( tmp ) ;
51968: LD_ADDR_VAR 0 15
51972: PUSH
51973: LD_VAR 0 13
51977: PPUSH
51978: CALL_OW 254
51982: ST_TO_ADDR
// if r = 5 then
51983: LD_VAR 0 15
51987: PUSH
51988: LD_INT 5
51990: EQUAL
51991: IFFALSE 52001
// r := 0 ;
51993: LD_ADDR_VAR 0 15
51997: PUSH
51998: LD_INT 0
52000: ST_TO_ADDR
// for j = r to 5 do
52001: LD_ADDR_VAR 0 10
52005: PUSH
52006: DOUBLE
52007: LD_VAR 0 15
52011: DEC
52012: ST_TO_ADDR
52013: LD_INT 5
52015: PUSH
52016: FOR_TO
52017: IFFALSE 52131
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52019: LD_ADDR_VAR 0 11
52023: PUSH
52024: LD_VAR 0 13
52028: PPUSH
52029: CALL_OW 250
52033: PPUSH
52034: LD_VAR 0 10
52038: PPUSH
52039: LD_INT 2
52041: PPUSH
52042: CALL_OW 272
52046: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52047: LD_ADDR_VAR 0 12
52051: PUSH
52052: LD_VAR 0 13
52056: PPUSH
52057: CALL_OW 251
52061: PPUSH
52062: LD_VAR 0 10
52066: PPUSH
52067: LD_INT 2
52069: PPUSH
52070: CALL_OW 273
52074: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52075: LD_VAR 0 11
52079: PPUSH
52080: LD_VAR 0 12
52084: PPUSH
52085: CALL_OW 488
52089: PUSH
52090: LD_VAR 0 11
52094: PPUSH
52095: LD_VAR 0 12
52099: PPUSH
52100: CALL_OW 428
52104: NOT
52105: AND
52106: IFFALSE 52129
// begin ComMoveXY ( tmp , _x , _y ) ;
52108: LD_VAR 0 13
52112: PPUSH
52113: LD_VAR 0 11
52117: PPUSH
52118: LD_VAR 0 12
52122: PPUSH
52123: CALL_OW 111
// break ;
52127: GO 52131
// end ; end ;
52129: GO 52016
52131: POP
52132: POP
// end ; end ;
52133: GO 51458
52135: POP
52136: POP
// end ;
52137: LD_VAR 0 8
52141: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52142: LD_INT 0
52144: PPUSH
// result := true ;
52145: LD_ADDR_VAR 0 3
52149: PUSH
52150: LD_INT 1
52152: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52153: LD_VAR 0 2
52157: PUSH
52158: LD_INT 24
52160: DOUBLE
52161: EQUAL
52162: IFTRUE 52172
52164: LD_INT 33
52166: DOUBLE
52167: EQUAL
52168: IFTRUE 52172
52170: GO 52197
52172: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52173: LD_ADDR_VAR 0 3
52177: PUSH
52178: LD_INT 32
52180: PPUSH
52181: LD_VAR 0 1
52185: PPUSH
52186: CALL_OW 321
52190: PUSH
52191: LD_INT 2
52193: EQUAL
52194: ST_TO_ADDR
52195: GO 52513
52197: LD_INT 20
52199: DOUBLE
52200: EQUAL
52201: IFTRUE 52205
52203: GO 52230
52205: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52206: LD_ADDR_VAR 0 3
52210: PUSH
52211: LD_INT 6
52213: PPUSH
52214: LD_VAR 0 1
52218: PPUSH
52219: CALL_OW 321
52223: PUSH
52224: LD_INT 2
52226: EQUAL
52227: ST_TO_ADDR
52228: GO 52513
52230: LD_INT 22
52232: DOUBLE
52233: EQUAL
52234: IFTRUE 52244
52236: LD_INT 36
52238: DOUBLE
52239: EQUAL
52240: IFTRUE 52244
52242: GO 52269
52244: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52245: LD_ADDR_VAR 0 3
52249: PUSH
52250: LD_INT 15
52252: PPUSH
52253: LD_VAR 0 1
52257: PPUSH
52258: CALL_OW 321
52262: PUSH
52263: LD_INT 2
52265: EQUAL
52266: ST_TO_ADDR
52267: GO 52513
52269: LD_INT 30
52271: DOUBLE
52272: EQUAL
52273: IFTRUE 52277
52275: GO 52302
52277: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52278: LD_ADDR_VAR 0 3
52282: PUSH
52283: LD_INT 20
52285: PPUSH
52286: LD_VAR 0 1
52290: PPUSH
52291: CALL_OW 321
52295: PUSH
52296: LD_INT 2
52298: EQUAL
52299: ST_TO_ADDR
52300: GO 52513
52302: LD_INT 28
52304: DOUBLE
52305: EQUAL
52306: IFTRUE 52316
52308: LD_INT 21
52310: DOUBLE
52311: EQUAL
52312: IFTRUE 52316
52314: GO 52341
52316: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52317: LD_ADDR_VAR 0 3
52321: PUSH
52322: LD_INT 21
52324: PPUSH
52325: LD_VAR 0 1
52329: PPUSH
52330: CALL_OW 321
52334: PUSH
52335: LD_INT 2
52337: EQUAL
52338: ST_TO_ADDR
52339: GO 52513
52341: LD_INT 16
52343: DOUBLE
52344: EQUAL
52345: IFTRUE 52349
52347: GO 52374
52349: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52350: LD_ADDR_VAR 0 3
52354: PUSH
52355: LD_INT 84
52357: PPUSH
52358: LD_VAR 0 1
52362: PPUSH
52363: CALL_OW 321
52367: PUSH
52368: LD_INT 2
52370: EQUAL
52371: ST_TO_ADDR
52372: GO 52513
52374: LD_INT 19
52376: DOUBLE
52377: EQUAL
52378: IFTRUE 52388
52380: LD_INT 23
52382: DOUBLE
52383: EQUAL
52384: IFTRUE 52388
52386: GO 52413
52388: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52389: LD_ADDR_VAR 0 3
52393: PUSH
52394: LD_INT 83
52396: PPUSH
52397: LD_VAR 0 1
52401: PPUSH
52402: CALL_OW 321
52406: PUSH
52407: LD_INT 2
52409: EQUAL
52410: ST_TO_ADDR
52411: GO 52513
52413: LD_INT 17
52415: DOUBLE
52416: EQUAL
52417: IFTRUE 52421
52419: GO 52446
52421: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52422: LD_ADDR_VAR 0 3
52426: PUSH
52427: LD_INT 39
52429: PPUSH
52430: LD_VAR 0 1
52434: PPUSH
52435: CALL_OW 321
52439: PUSH
52440: LD_INT 2
52442: EQUAL
52443: ST_TO_ADDR
52444: GO 52513
52446: LD_INT 18
52448: DOUBLE
52449: EQUAL
52450: IFTRUE 52454
52452: GO 52479
52454: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52455: LD_ADDR_VAR 0 3
52459: PUSH
52460: LD_INT 40
52462: PPUSH
52463: LD_VAR 0 1
52467: PPUSH
52468: CALL_OW 321
52472: PUSH
52473: LD_INT 2
52475: EQUAL
52476: ST_TO_ADDR
52477: GO 52513
52479: LD_INT 27
52481: DOUBLE
52482: EQUAL
52483: IFTRUE 52487
52485: GO 52512
52487: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52488: LD_ADDR_VAR 0 3
52492: PUSH
52493: LD_INT 35
52495: PPUSH
52496: LD_VAR 0 1
52500: PPUSH
52501: CALL_OW 321
52505: PUSH
52506: LD_INT 2
52508: EQUAL
52509: ST_TO_ADDR
52510: GO 52513
52512: POP
// end ;
52513: LD_VAR 0 3
52517: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52518: LD_INT 0
52520: PPUSH
52521: PPUSH
52522: PPUSH
52523: PPUSH
52524: PPUSH
52525: PPUSH
52526: PPUSH
52527: PPUSH
52528: PPUSH
52529: PPUSH
52530: PPUSH
// result := false ;
52531: LD_ADDR_VAR 0 6
52535: PUSH
52536: LD_INT 0
52538: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52539: LD_VAR 0 1
52543: NOT
52544: PUSH
52545: LD_VAR 0 1
52549: PPUSH
52550: CALL_OW 266
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: IN
52565: NOT
52566: OR
52567: PUSH
52568: LD_VAR 0 2
52572: NOT
52573: OR
52574: PUSH
52575: LD_VAR 0 5
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: LD_INT 2
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: LD_INT 4
52594: PUSH
52595: LD_INT 5
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: IN
52606: NOT
52607: OR
52608: PUSH
52609: LD_VAR 0 3
52613: PPUSH
52614: LD_VAR 0 4
52618: PPUSH
52619: CALL_OW 488
52623: NOT
52624: OR
52625: IFFALSE 52629
// exit ;
52627: GO 53365
// side := GetSide ( depot ) ;
52629: LD_ADDR_VAR 0 9
52633: PUSH
52634: LD_VAR 0 1
52638: PPUSH
52639: CALL_OW 255
52643: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52644: LD_VAR 0 9
52648: PPUSH
52649: LD_VAR 0 2
52653: PPUSH
52654: CALL 52142 0 2
52658: NOT
52659: IFFALSE 52663
// exit ;
52661: GO 53365
// pom := GetBase ( depot ) ;
52663: LD_ADDR_VAR 0 10
52667: PUSH
52668: LD_VAR 0 1
52672: PPUSH
52673: CALL_OW 274
52677: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52678: LD_ADDR_VAR 0 11
52682: PUSH
52683: LD_VAR 0 2
52687: PPUSH
52688: LD_VAR 0 1
52692: PPUSH
52693: CALL_OW 248
52697: PPUSH
52698: CALL_OW 450
52702: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52703: LD_VAR 0 10
52707: PPUSH
52708: LD_INT 1
52710: PPUSH
52711: CALL_OW 275
52715: PUSH
52716: LD_VAR 0 11
52720: PUSH
52721: LD_INT 1
52723: ARRAY
52724: GREATEREQUAL
52725: PUSH
52726: LD_VAR 0 10
52730: PPUSH
52731: LD_INT 2
52733: PPUSH
52734: CALL_OW 275
52738: PUSH
52739: LD_VAR 0 11
52743: PUSH
52744: LD_INT 2
52746: ARRAY
52747: GREATEREQUAL
52748: AND
52749: PUSH
52750: LD_VAR 0 10
52754: PPUSH
52755: LD_INT 3
52757: PPUSH
52758: CALL_OW 275
52762: PUSH
52763: LD_VAR 0 11
52767: PUSH
52768: LD_INT 3
52770: ARRAY
52771: GREATEREQUAL
52772: AND
52773: NOT
52774: IFFALSE 52778
// exit ;
52776: GO 53365
// if GetBType ( depot ) = b_depot then
52778: LD_VAR 0 1
52782: PPUSH
52783: CALL_OW 266
52787: PUSH
52788: LD_INT 0
52790: EQUAL
52791: IFFALSE 52803
// dist := 28 else
52793: LD_ADDR_VAR 0 14
52797: PUSH
52798: LD_INT 28
52800: ST_TO_ADDR
52801: GO 52811
// dist := 36 ;
52803: LD_ADDR_VAR 0 14
52807: PUSH
52808: LD_INT 36
52810: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52811: LD_VAR 0 1
52815: PPUSH
52816: LD_VAR 0 3
52820: PPUSH
52821: LD_VAR 0 4
52825: PPUSH
52826: CALL_OW 297
52830: PUSH
52831: LD_VAR 0 14
52835: GREATER
52836: IFFALSE 52840
// exit ;
52838: GO 53365
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52840: LD_ADDR_VAR 0 12
52844: PUSH
52845: LD_VAR 0 2
52849: PPUSH
52850: LD_VAR 0 3
52854: PPUSH
52855: LD_VAR 0 4
52859: PPUSH
52860: LD_VAR 0 5
52864: PPUSH
52865: LD_VAR 0 1
52869: PPUSH
52870: CALL_OW 248
52874: PPUSH
52875: LD_INT 0
52877: PPUSH
52878: CALL 53370 0 6
52882: ST_TO_ADDR
// if not hexes then
52883: LD_VAR 0 12
52887: NOT
52888: IFFALSE 52892
// exit ;
52890: GO 53365
// hex := GetHexInfo ( x , y ) ;
52892: LD_ADDR_VAR 0 15
52896: PUSH
52897: LD_VAR 0 3
52901: PPUSH
52902: LD_VAR 0 4
52906: PPUSH
52907: CALL_OW 546
52911: ST_TO_ADDR
// if hex [ 1 ] then
52912: LD_VAR 0 15
52916: PUSH
52917: LD_INT 1
52919: ARRAY
52920: IFFALSE 52924
// exit ;
52922: GO 53365
// height := hex [ 2 ] ;
52924: LD_ADDR_VAR 0 13
52928: PUSH
52929: LD_VAR 0 15
52933: PUSH
52934: LD_INT 2
52936: ARRAY
52937: ST_TO_ADDR
// for i = 1 to hexes do
52938: LD_ADDR_VAR 0 7
52942: PUSH
52943: DOUBLE
52944: LD_INT 1
52946: DEC
52947: ST_TO_ADDR
52948: LD_VAR 0 12
52952: PUSH
52953: FOR_TO
52954: IFFALSE 53284
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52956: LD_VAR 0 12
52960: PUSH
52961: LD_VAR 0 7
52965: ARRAY
52966: PUSH
52967: LD_INT 1
52969: ARRAY
52970: PPUSH
52971: LD_VAR 0 12
52975: PUSH
52976: LD_VAR 0 7
52980: ARRAY
52981: PUSH
52982: LD_INT 2
52984: ARRAY
52985: PPUSH
52986: CALL_OW 488
52990: NOT
52991: PUSH
52992: LD_VAR 0 12
52996: PUSH
52997: LD_VAR 0 7
53001: ARRAY
53002: PUSH
53003: LD_INT 1
53005: ARRAY
53006: PPUSH
53007: LD_VAR 0 12
53011: PUSH
53012: LD_VAR 0 7
53016: ARRAY
53017: PUSH
53018: LD_INT 2
53020: ARRAY
53021: PPUSH
53022: CALL_OW 428
53026: PUSH
53027: LD_INT 0
53029: GREATER
53030: OR
53031: PUSH
53032: LD_VAR 0 12
53036: PUSH
53037: LD_VAR 0 7
53041: ARRAY
53042: PUSH
53043: LD_INT 1
53045: ARRAY
53046: PPUSH
53047: LD_VAR 0 12
53051: PUSH
53052: LD_VAR 0 7
53056: ARRAY
53057: PUSH
53058: LD_INT 2
53060: ARRAY
53061: PPUSH
53062: CALL_OW 351
53066: OR
53067: IFFALSE 53073
// exit ;
53069: POP
53070: POP
53071: GO 53365
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53073: LD_ADDR_VAR 0 8
53077: PUSH
53078: LD_VAR 0 12
53082: PUSH
53083: LD_VAR 0 7
53087: ARRAY
53088: PUSH
53089: LD_INT 1
53091: ARRAY
53092: PPUSH
53093: LD_VAR 0 12
53097: PUSH
53098: LD_VAR 0 7
53102: ARRAY
53103: PUSH
53104: LD_INT 2
53106: ARRAY
53107: PPUSH
53108: CALL_OW 546
53112: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53113: LD_VAR 0 8
53117: PUSH
53118: LD_INT 1
53120: ARRAY
53121: PUSH
53122: LD_VAR 0 8
53126: PUSH
53127: LD_INT 2
53129: ARRAY
53130: PUSH
53131: LD_VAR 0 13
53135: PUSH
53136: LD_INT 2
53138: PLUS
53139: GREATER
53140: OR
53141: PUSH
53142: LD_VAR 0 8
53146: PUSH
53147: LD_INT 2
53149: ARRAY
53150: PUSH
53151: LD_VAR 0 13
53155: PUSH
53156: LD_INT 2
53158: MINUS
53159: LESS
53160: OR
53161: PUSH
53162: LD_VAR 0 8
53166: PUSH
53167: LD_INT 3
53169: ARRAY
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: LD_INT 8
53176: PUSH
53177: LD_INT 9
53179: PUSH
53180: LD_INT 10
53182: PUSH
53183: LD_INT 11
53185: PUSH
53186: LD_INT 12
53188: PUSH
53189: LD_INT 13
53191: PUSH
53192: LD_INT 16
53194: PUSH
53195: LD_INT 17
53197: PUSH
53198: LD_INT 18
53200: PUSH
53201: LD_INT 19
53203: PUSH
53204: LD_INT 20
53206: PUSH
53207: LD_INT 21
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: IN
53225: NOT
53226: OR
53227: PUSH
53228: LD_VAR 0 8
53232: PUSH
53233: LD_INT 5
53235: ARRAY
53236: NOT
53237: OR
53238: PUSH
53239: LD_VAR 0 8
53243: PUSH
53244: LD_INT 6
53246: ARRAY
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: LD_INT 7
53256: PUSH
53257: LD_INT 9
53259: PUSH
53260: LD_INT 10
53262: PUSH
53263: LD_INT 11
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: IN
53274: NOT
53275: OR
53276: IFFALSE 53282
// exit ;
53278: POP
53279: POP
53280: GO 53365
// end ;
53282: GO 52953
53284: POP
53285: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53286: LD_VAR 0 9
53290: PPUSH
53291: LD_VAR 0 3
53295: PPUSH
53296: LD_VAR 0 4
53300: PPUSH
53301: LD_INT 20
53303: PPUSH
53304: CALL 45317 0 4
53308: PUSH
53309: LD_INT 4
53311: ARRAY
53312: IFFALSE 53316
// exit ;
53314: GO 53365
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53316: LD_VAR 0 2
53320: PUSH
53321: LD_INT 29
53323: PUSH
53324: LD_INT 30
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: IN
53331: PUSH
53332: LD_VAR 0 3
53336: PPUSH
53337: LD_VAR 0 4
53341: PPUSH
53342: LD_VAR 0 9
53346: PPUSH
53347: CALL_OW 440
53351: NOT
53352: AND
53353: IFFALSE 53357
// exit ;
53355: GO 53365
// result := true ;
53357: LD_ADDR_VAR 0 6
53361: PUSH
53362: LD_INT 1
53364: ST_TO_ADDR
// end ;
53365: LD_VAR 0 6
53369: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53370: LD_INT 0
53372: PPUSH
53373: PPUSH
53374: PPUSH
53375: PPUSH
53376: PPUSH
53377: PPUSH
53378: PPUSH
53379: PPUSH
53380: PPUSH
53381: PPUSH
53382: PPUSH
53383: PPUSH
53384: PPUSH
53385: PPUSH
53386: PPUSH
53387: PPUSH
53388: PPUSH
53389: PPUSH
53390: PPUSH
53391: PPUSH
53392: PPUSH
53393: PPUSH
53394: PPUSH
53395: PPUSH
53396: PPUSH
53397: PPUSH
53398: PPUSH
53399: PPUSH
53400: PPUSH
53401: PPUSH
53402: PPUSH
53403: PPUSH
53404: PPUSH
53405: PPUSH
53406: PPUSH
53407: PPUSH
53408: PPUSH
53409: PPUSH
53410: PPUSH
53411: PPUSH
53412: PPUSH
53413: PPUSH
53414: PPUSH
53415: PPUSH
53416: PPUSH
53417: PPUSH
53418: PPUSH
53419: PPUSH
53420: PPUSH
53421: PPUSH
53422: PPUSH
53423: PPUSH
53424: PPUSH
53425: PPUSH
53426: PPUSH
53427: PPUSH
53428: PPUSH
53429: PPUSH
// result = [ ] ;
53430: LD_ADDR_VAR 0 7
53434: PUSH
53435: EMPTY
53436: ST_TO_ADDR
// temp_list = [ ] ;
53437: LD_ADDR_VAR 0 9
53441: PUSH
53442: EMPTY
53443: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53444: LD_VAR 0 4
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: LD_INT 2
53457: PUSH
53458: LD_INT 3
53460: PUSH
53461: LD_INT 4
53463: PUSH
53464: LD_INT 5
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: IN
53475: NOT
53476: PUSH
53477: LD_VAR 0 1
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: IN
53492: PUSH
53493: LD_VAR 0 5
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 2
53503: PUSH
53504: LD_INT 3
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: LIST
53511: IN
53512: NOT
53513: AND
53514: OR
53515: IFFALSE 53519
// exit ;
53517: GO 71910
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53519: LD_VAR 0 1
53523: PUSH
53524: LD_INT 6
53526: PUSH
53527: LD_INT 7
53529: PUSH
53530: LD_INT 8
53532: PUSH
53533: LD_INT 13
53535: PUSH
53536: LD_INT 12
53538: PUSH
53539: LD_INT 15
53541: PUSH
53542: LD_INT 11
53544: PUSH
53545: LD_INT 14
53547: PUSH
53548: LD_INT 10
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: IN
53562: IFFALSE 53572
// btype = b_lab ;
53564: LD_ADDR_VAR 0 1
53568: PUSH
53569: LD_INT 6
53571: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53572: LD_VAR 0 6
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: LIST
53590: IN
53591: NOT
53592: PUSH
53593: LD_VAR 0 1
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: LD_INT 2
53606: PUSH
53607: LD_INT 3
53609: PUSH
53610: LD_INT 6
53612: PUSH
53613: LD_INT 36
53615: PUSH
53616: LD_INT 4
53618: PUSH
53619: LD_INT 5
53621: PUSH
53622: LD_INT 31
53624: PUSH
53625: LD_INT 32
53627: PUSH
53628: LD_INT 33
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: IN
53644: NOT
53645: PUSH
53646: LD_VAR 0 6
53650: PUSH
53651: LD_INT 1
53653: EQUAL
53654: AND
53655: OR
53656: PUSH
53657: LD_VAR 0 1
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: LD_INT 3
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: IN
53672: NOT
53673: PUSH
53674: LD_VAR 0 6
53678: PUSH
53679: LD_INT 2
53681: EQUAL
53682: AND
53683: OR
53684: IFFALSE 53694
// mode = 0 ;
53686: LD_ADDR_VAR 0 6
53690: PUSH
53691: LD_INT 0
53693: ST_TO_ADDR
// case mode of 0 :
53694: LD_VAR 0 6
53698: PUSH
53699: LD_INT 0
53701: DOUBLE
53702: EQUAL
53703: IFTRUE 53707
53705: GO 65160
53707: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53708: LD_ADDR_VAR 0 11
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: LD_INT 2
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 1
53843: NEG
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: LD_INT 3
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 3
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53901: LD_ADDR_VAR 0 12
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: LD_INT 1
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 2
54024: NEG
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: NEG
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 3
54058: NEG
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 3
54069: NEG
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54097: LD_ADDR_VAR 0 13
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 2
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: LD_INT 2
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 2
54220: NEG
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 2
54244: NEG
54245: PUSH
54246: LD_INT 3
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 3
54256: NEG
54257: PUSH
54258: LD_INT 2
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 3
54268: NEG
54269: PUSH
54270: LD_INT 3
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54296: LD_ADDR_VAR 0 14
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: LD_INT 2
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: LD_INT 2
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: LD_INT 3
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: LD_INT 3
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: LD_INT 2
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54492: LD_ADDR_VAR 0 15
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: NEG
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 2
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 2
54615: NEG
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: NEG
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 3
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 3
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54685: LD_ADDR_VAR 0 16
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: LD_INT 1
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: LD_INT 2
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 2
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 2
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: LD_INT 2
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 3
54832: PUSH
54833: LD_INT 2
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 3
54842: PUSH
54843: LD_INT 3
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: LD_INT 3
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54878: LD_ADDR_VAR 0 17
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: LD_INT 2
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: LD_INT 2
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: LD_INT 2
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 2
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 2
55054: NEG
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: NEG
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: LD_INT 2
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55108: LD_ADDR_VAR 0 18
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: LD_INT 2
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 2
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 2
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: LD_INT 2
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: NEG
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: NEG
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 2
55307: NEG
55308: PUSH
55309: LD_INT 2
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55338: LD_ADDR_VAR 0 19
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: LD_INT 2
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: LD_INT 2
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 2
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 2
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: LD_INT 2
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: NEG
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 2
55525: NEG
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 2
55537: NEG
55538: PUSH
55539: LD_INT 2
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55568: LD_ADDR_VAR 0 20
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: LD_INT 2
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: LD_INT 2
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 2
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 2
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 2
55703: PUSH
55704: LD_INT 2
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: LD_INT 2
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: LD_INT 2
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: NEG
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 2
55755: NEG
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 2
55767: NEG
55768: PUSH
55769: LD_INT 2
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55798: LD_ADDR_VAR 0 21
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 2
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: LD_INT 2
55894: NEG
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: LD_INT 1
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 2
55933: PUSH
55934: LD_INT 2
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: LD_INT 2
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 2
55974: NEG
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 2
55985: NEG
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 2
55997: NEG
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56028: LD_ADDR_VAR 0 22
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 1
56086: NEG
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: LD_INT 2
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 2
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 2
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 2
56163: PUSH
56164: LD_INT 2
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: LD_INT 2
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: LD_INT 2
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 1
56193: NEG
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 2
56204: NEG
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 2
56215: NEG
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: LD_INT 2
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56258: LD_ADDR_VAR 0 23
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: LD_INT 1
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: LD_INT 2
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: LD_INT 2
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 2
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 2
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: LD_INT 2
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: LD_INT 2
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 2
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 2
56434: NEG
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 2
56457: NEG
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 2
56469: NEG
56470: PUSH
56471: LD_INT 3
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: LD_INT 3
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: LD_INT 2
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 2
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56538: LD_ADDR_VAR 0 24
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: LD_INT 2
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 2
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 2
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: LD_INT 2
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 2
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: NEG
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: LD_INT 2
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 3
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 3
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56814: LD_ADDR_VAR 0 25
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: LD_INT 2
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: LD_INT 2
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: LD_INT 2
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 2
57001: NEG
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 2
57013: NEG
57014: PUSH
57015: LD_INT 2
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 3
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 3
57035: PUSH
57036: LD_INT 2
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: LD_INT 3
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: LD_INT 3
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57088: LD_ADDR_VAR 0 26
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: LD_INT 2
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: LD_INT 1
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 2
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: LD_INT 2
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: LD_INT 2
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: LD_INT 2
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 2
57275: NEG
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: LD_INT 2
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 2
57299: PUSH
57300: LD_INT 3
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: LD_INT 3
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 2
57330: NEG
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57364: LD_ADDR_VAR 0 27
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 0
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 1
57422: NEG
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: LD_INT 1
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: LD_INT 2
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: LD_INT 2
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 2
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 2
57489: PUSH
57490: LD_INT 1
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 2
57499: PUSH
57500: LD_INT 2
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: LD_INT 2
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 2
57540: NEG
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 2
57563: NEG
57564: PUSH
57565: LD_INT 2
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: LD_INT 2
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 2
57586: NEG
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 3
57597: NEG
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 3
57609: NEG
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57644: LD_ADDR_VAR 0 28
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: LD_INT 2
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 2
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 2
57820: NEG
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: LD_INT 1
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: NEG
57844: PUSH
57845: LD_INT 2
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 2
57855: NEG
57856: PUSH
57857: LD_INT 3
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: LD_INT 3
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 3
57879: NEG
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 3
57891: NEG
57892: PUSH
57893: LD_INT 2
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57926: LD_ADDR_VAR 0 29
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: LD_INT 1
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 1
57995: NEG
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 1
58007: NEG
58008: PUSH
58009: LD_INT 2
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: LD_INT 2
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: LD_INT 2
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 2
58104: NEG
58105: PUSH
58106: LD_INT 2
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 2
58116: NEG
58117: PUSH
58118: LD_INT 3
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 3
58139: PUSH
58140: LD_INT 1
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: LD_INT 3
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: LD_INT 2
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 3
58170: NEG
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58205: LD_ADDR_VAR 0 30
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 2
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 2
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 2
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: LD_INT 2
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: LD_INT 1
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: LD_INT 3
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: LD_INT 2
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 3
58417: PUSH
58418: LD_INT 2
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 2
58427: PUSH
58428: LD_INT 3
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 2
58437: NEG
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 3
58448: NEG
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58483: LD_ADDR_VAR 0 31
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: LD_INT 0
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 1
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 1
58552: NEG
58553: PUSH
58554: LD_INT 1
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: LD_INT 2
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: LD_INT 1
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 2
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 2
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 2
58607: PUSH
58608: LD_INT 2
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: LD_INT 2
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 0
58627: PUSH
58628: LD_INT 2
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: LD_INT 1
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 2
58648: NEG
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 2
58660: NEG
58661: PUSH
58662: LD_INT 2
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 2
58672: NEG
58673: PUSH
58674: LD_INT 3
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 2
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 3
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 3
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: LD_INT 2
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 3
58726: NEG
58727: PUSH
58728: LD_INT 2
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58761: LD_ADDR_VAR 0 32
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 1
58830: NEG
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 1
58842: NEG
58843: PUSH
58844: LD_INT 2
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: LD_INT 2
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 2
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 2
58886: PUSH
58887: LD_INT 2
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: LD_INT 2
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: LD_INT 2
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: LD_INT 1
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 2
58927: NEG
58928: PUSH
58929: LD_INT 0
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 2
58938: NEG
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: PUSH
58952: LD_INT 3
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 3
58973: PUSH
58974: LD_INT 2
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: PUSH
58984: LD_INT 3
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 2
58993: NEG
58994: PUSH
58995: LD_INT 1
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 3
59004: NEG
59005: PUSH
59006: LD_INT 1
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59039: LD_ADDR_VAR 0 33
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: LD_INT 0
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 0
59087: PUSH
59088: LD_INT 1
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: LD_INT 1
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 1
59120: NEG
59121: PUSH
59122: LD_INT 2
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 2
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: LD_INT 1
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: LD_INT 1
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 2
59205: NEG
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: LD_INT 2
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 2
59229: NEG
59230: PUSH
59231: LD_INT 3
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 2
59241: PUSH
59242: LD_INT 1
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 3
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: PUSH
59263: LD_INT 3
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: LD_INT 2
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 3
59283: NEG
59284: PUSH
59285: LD_INT 2
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59318: LD_ADDR_VAR 0 34
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: LD_INT 0
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: LD_INT 1
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 1
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 0
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: LD_INT 0
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 1
59387: NEG
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: LD_INT 2
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: LD_INT 2
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: LD_INT 1
59425: NEG
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 2
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 2
59443: PUSH
59444: LD_INT 2
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: LD_INT 2
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 2
59474: NEG
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 2
59497: NEG
59498: PUSH
59499: LD_INT 2
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 1
59509: NEG
59510: PUSH
59511: LD_INT 3
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: LD_INT 2
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 3
59532: PUSH
59533: LD_INT 2
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: PUSH
59543: LD_INT 3
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: LD_INT 1
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 3
59563: NEG
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59598: LD_ADDR_VAR 0 35
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: LD_INT 1
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 2
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 2
59689: NEG
59690: PUSH
59691: LD_INT 1
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59710: LD_ADDR_VAR 0 36
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: LD_INT 2
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59822: LD_ADDR_VAR 0 37
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 1
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: NEG
59892: PUSH
59893: LD_INT 1
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: LD_INT 1
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59934: LD_ADDR_VAR 0 38
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: LD_INT 0
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 0
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: LD_INT 1
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 2
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 2
60025: NEG
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60046: LD_ADDR_VAR 0 39
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: LD_INT 0
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 1
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 1
60084: PUSH
60085: LD_INT 1
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: LD_INT 1
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: NEG
60116: PUSH
60117: LD_INT 1
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: LD_INT 2
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 1
60139: PUSH
60140: LD_INT 2
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60158: LD_ADDR_VAR 0 40
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: LD_INT 0
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 0
60175: PUSH
60176: LD_INT 1
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 1
60186: PUSH
60187: LD_INT 0
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 1
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: LD_INT 1
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 1
60250: NEG
60251: PUSH
60252: LD_INT 1
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60270: LD_ADDR_VAR 0 41
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: LD_INT 0
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 1
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: LD_INT 2
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 2
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 2
60384: PUSH
60385: LD_INT 1
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 2
60394: PUSH
60395: LD_INT 2
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 1
60404: PUSH
60405: LD_INT 2
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 1
60414: NEG
60415: PUSH
60416: LD_INT 1
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 2
60425: NEG
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 2
60436: NEG
60437: PUSH
60438: LD_INT 1
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 2
60448: NEG
60449: PUSH
60450: LD_INT 2
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 2
60460: NEG
60461: PUSH
60462: LD_INT 3
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 2
60472: PUSH
60473: LD_INT 1
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 3
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 3
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 3
60503: PUSH
60504: LD_INT 2
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 3
60513: PUSH
60514: LD_INT 3
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 2
60523: PUSH
60524: LD_INT 3
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 2
60533: NEG
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 3
60544: NEG
60545: PUSH
60546: LD_INT 0
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 3
60555: NEG
60556: PUSH
60557: LD_INT 1
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 3
60567: NEG
60568: PUSH
60569: LD_INT 2
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 3
60579: NEG
60580: PUSH
60581: LD_INT 3
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60620: LD_ADDR_VAR 0 42
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: LD_INT 1
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: LD_INT 1
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: LD_INT 1
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 1
60678: NEG
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 1
60689: NEG
60690: PUSH
60691: LD_INT 1
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: LD_INT 2
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: LD_INT 2
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 1
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: LD_INT 1
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 2
60745: PUSH
60746: LD_INT 2
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: LD_INT 2
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: LD_INT 1
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 2
60786: NEG
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 2
60798: NEG
60799: PUSH
60800: LD_INT 2
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 2
60810: NEG
60811: PUSH
60812: LD_INT 3
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: LD_INT 3
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: LD_INT 3
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 1
60845: PUSH
60846: LD_INT 2
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 3
60856: PUSH
60857: LD_INT 2
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 3
60866: PUSH
60867: LD_INT 3
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: LD_INT 3
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: LD_INT 3
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: LD_INT 3
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: NEG
60907: PUSH
60908: LD_INT 2
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 3
60917: NEG
60918: PUSH
60919: LD_INT 2
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 3
60929: NEG
60930: PUSH
60931: LD_INT 3
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60970: LD_ADDR_VAR 0 43
60974: PUSH
60975: LD_INT 0
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 0
60987: PUSH
60988: LD_INT 1
60990: NEG
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 1
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: LD_INT 1
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 1
61039: NEG
61040: PUSH
61041: LD_INT 1
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: LD_INT 2
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: LD_INT 2
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 2
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 0
61115: PUSH
61116: LD_INT 2
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: LD_INT 1
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 2
61136: NEG
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 2
61147: NEG
61148: PUSH
61149: LD_INT 1
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: LD_INT 3
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: LD_INT 3
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: LD_INT 2
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 2
61193: PUSH
61194: LD_INT 1
61196: NEG
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 3
61204: PUSH
61205: LD_INT 0
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 3
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: LD_INT 3
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: LD_INT 3
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: LD_INT 2
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 2
61255: NEG
61256: PUSH
61257: LD_INT 1
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 3
61266: NEG
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 3
61277: NEG
61278: PUSH
61279: LD_INT 1
61281: NEG
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61318: LD_ADDR_VAR 0 44
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: LD_INT 1
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: LD_INT 1
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 1
61376: NEG
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: NEG
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: LD_INT 2
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: LD_INT 1
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 2
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 2
61442: PUSH
61443: LD_INT 2
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 1
61452: PUSH
61453: LD_INT 2
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: NEG
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 2
61473: NEG
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: NEG
61485: PUSH
61486: LD_INT 1
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 2
61496: NEG
61497: PUSH
61498: LD_INT 2
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 2
61508: NEG
61509: PUSH
61510: LD_INT 3
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: PUSH
61521: LD_INT 1
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 3
61531: PUSH
61532: LD_INT 0
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 3
61541: PUSH
61542: LD_INT 1
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 3
61551: PUSH
61552: LD_INT 2
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 3
61561: PUSH
61562: LD_INT 3
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 2
61571: PUSH
61572: LD_INT 3
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 3
61592: NEG
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 3
61603: NEG
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 3
61615: NEG
61616: PUSH
61617: LD_INT 2
61619: NEG
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 3
61627: NEG
61628: PUSH
61629: LD_INT 3
61631: NEG
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61668: LD_ADDR_VAR 0 45
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: LD_INT 1
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 1
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: LD_INT 1
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: LD_INT 1
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 1
61726: NEG
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 1
61737: NEG
61738: PUSH
61739: LD_INT 1
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 1
61749: NEG
61750: PUSH
61751: LD_INT 2
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: LD_INT 2
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 1
61772: PUSH
61773: LD_INT 1
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 2
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 2
61793: PUSH
61794: LD_INT 2
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: LD_INT 2
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 2
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 2
61834: NEG
61835: PUSH
61836: LD_INT 1
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 2
61846: NEG
61847: PUSH
61848: LD_INT 2
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 2
61858: NEG
61859: PUSH
61860: LD_INT 3
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: NEG
61871: PUSH
61872: LD_INT 3
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: LD_INT 3
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: PUSH
61894: LD_INT 2
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 3
61904: PUSH
61905: LD_INT 2
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 3
61914: PUSH
61915: LD_INT 3
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 2
61924: PUSH
61925: LD_INT 3
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 1
61934: PUSH
61935: LD_INT 3
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 0
61944: PUSH
61945: LD_INT 3
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 1
61954: NEG
61955: PUSH
61956: LD_INT 2
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 3
61965: NEG
61966: PUSH
61967: LD_INT 2
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 3
61977: NEG
61978: PUSH
61979: LD_INT 3
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62018: LD_ADDR_VAR 0 46
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: LD_INT 0
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: LD_INT 1
62038: NEG
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 1
62046: PUSH
62047: LD_INT 0
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 1
62056: PUSH
62057: LD_INT 1
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: LD_INT 1
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 1
62076: NEG
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: NEG
62088: PUSH
62089: LD_INT 1
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 1
62099: NEG
62100: PUSH
62101: LD_INT 2
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: LD_INT 2
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 1
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 2
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 2
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: LD_INT 2
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 0
62163: PUSH
62164: LD_INT 2
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: LD_INT 1
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 2
62184: NEG
62185: PUSH
62186: LD_INT 0
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 2
62195: NEG
62196: PUSH
62197: LD_INT 1
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: LD_INT 3
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: LD_INT 3
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 1
62230: PUSH
62231: LD_INT 2
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 2
62241: PUSH
62242: LD_INT 1
62244: NEG
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 3
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 3
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 1
62272: PUSH
62273: LD_INT 3
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: LD_INT 3
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: LD_INT 2
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 2
62303: NEG
62304: PUSH
62305: LD_INT 1
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 3
62314: NEG
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 3
62325: NEG
62326: PUSH
62327: LD_INT 1
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62366: LD_ADDR_VAR 0 47
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: LD_INT 0
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: LD_INT 1
62386: NEG
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 1
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 1
62404: PUSH
62405: LD_INT 1
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 0
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: NEG
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 1
62447: NEG
62448: PUSH
62449: LD_INT 2
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: LD_INT 2
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 1
62470: PUSH
62471: LD_INT 1
62473: NEG
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 2
62481: NEG
62482: PUSH
62483: LD_INT 1
62485: NEG
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 2
62493: NEG
62494: PUSH
62495: LD_INT 2
62497: NEG
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62517: LD_ADDR_VAR 0 48
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 0
62534: PUSH
62535: LD_INT 1
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 1
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 1
62555: PUSH
62556: LD_INT 1
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 0
62565: PUSH
62566: LD_INT 1
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 1
62586: NEG
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 1
62598: NEG
62599: PUSH
62600: LD_INT 2
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: LD_INT 2
62613: NEG
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 1
62621: PUSH
62622: LD_INT 1
62624: NEG
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 2
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 2
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62664: LD_ADDR_VAR 0 49
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: LD_INT 1
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: LD_INT 0
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 1
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: LD_INT 1
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 1
62722: NEG
62723: PUSH
62724: LD_INT 0
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 1
62733: NEG
62734: PUSH
62735: LD_INT 1
62737: NEG
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: LD_INT 1
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 2
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 2
62766: PUSH
62767: LD_INT 1
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: LD_INT 2
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 1
62786: PUSH
62787: LD_INT 2
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62808: LD_ADDR_VAR 0 50
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: LD_INT 0
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: LD_INT 1
62828: NEG
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 1
62836: PUSH
62837: LD_INT 0
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: LD_INT 1
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: LD_INT 1
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 1
62866: NEG
62867: PUSH
62868: LD_INT 0
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 1
62877: NEG
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 2
62889: PUSH
62890: LD_INT 1
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 2
62899: PUSH
62900: LD_INT 2
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 1
62909: PUSH
62910: LD_INT 2
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: LD_INT 2
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 1
62929: NEG
62930: PUSH
62931: LD_INT 1
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62952: LD_ADDR_VAR 0 51
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: LD_INT 1
62972: NEG
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 1
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 1
62990: PUSH
62991: LD_INT 1
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: LD_INT 1
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 1
63010: NEG
63011: PUSH
63012: LD_INT 0
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: NEG
63022: PUSH
63023: LD_INT 1
63025: NEG
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 1
63033: PUSH
63034: LD_INT 2
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: LD_INT 2
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 1
63053: NEG
63054: PUSH
63055: LD_INT 1
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 2
63064: NEG
63065: PUSH
63066: LD_INT 0
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 2
63075: NEG
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63099: LD_ADDR_VAR 0 52
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: LD_INT 0
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 1
63127: PUSH
63128: LD_INT 0
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 1
63137: PUSH
63138: LD_INT 1
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 1
63157: NEG
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 1
63168: NEG
63169: PUSH
63170: LD_INT 1
63172: NEG
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 1
63180: NEG
63181: PUSH
63182: LD_INT 2
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 1
63192: NEG
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 2
63203: NEG
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 2
63214: NEG
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 2
63226: NEG
63227: PUSH
63228: LD_INT 2
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63250: LD_ADDR_VAR 0 53
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 0
63267: PUSH
63268: LD_INT 1
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 1
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: LD_INT 1
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 1
63308: NEG
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 1
63319: NEG
63320: PUSH
63321: LD_INT 1
63323: NEG
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: PUSH
63333: LD_INT 2
63335: NEG
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: LD_INT 2
63346: NEG
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 1
63354: PUSH
63355: LD_INT 1
63357: NEG
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 2
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 2
63375: PUSH
63376: LD_INT 1
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 2
63385: PUSH
63386: LD_INT 2
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 1
63395: PUSH
63396: LD_INT 2
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: LD_INT 2
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 1
63415: NEG
63416: PUSH
63417: LD_INT 1
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 2
63426: NEG
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 2
63437: NEG
63438: PUSH
63439: LD_INT 1
63441: NEG
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 2
63449: NEG
63450: PUSH
63451: LD_INT 2
63453: NEG
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63480: LD_ADDR_VAR 0 54
63484: PUSH
63485: LD_INT 0
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 0
63497: PUSH
63498: LD_INT 1
63500: NEG
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 1
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 1
63518: PUSH
63519: LD_INT 1
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: LD_INT 1
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 1
63538: NEG
63539: PUSH
63540: LD_INT 0
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 1
63549: NEG
63550: PUSH
63551: LD_INT 1
63553: NEG
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 1
63561: NEG
63562: PUSH
63563: LD_INT 2
63565: NEG
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: LD_INT 2
63576: NEG
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: LD_INT 1
63587: NEG
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 2
63595: PUSH
63596: LD_INT 0
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 2
63605: PUSH
63606: LD_INT 1
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 2
63615: PUSH
63616: LD_INT 2
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 1
63625: PUSH
63626: LD_INT 2
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: LD_INT 2
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 1
63645: NEG
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 2
63656: NEG
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 2
63667: NEG
63668: PUSH
63669: LD_INT 1
63671: NEG
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 2
63679: NEG
63680: PUSH
63681: LD_INT 2
63683: NEG
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63710: LD_ADDR_VAR 0 55
63714: PUSH
63715: LD_INT 0
63717: PUSH
63718: LD_INT 0
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 0
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 1
63738: PUSH
63739: LD_INT 0
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: LD_INT 1
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: LD_INT 1
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 1
63768: NEG
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 1
63779: NEG
63780: PUSH
63781: LD_INT 1
63783: NEG
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 1
63791: NEG
63792: PUSH
63793: LD_INT 2
63795: NEG
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: LD_INT 2
63806: NEG
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 1
63814: PUSH
63815: LD_INT 1
63817: NEG
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 2
63825: PUSH
63826: LD_INT 0
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 2
63835: PUSH
63836: LD_INT 1
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 2
63845: PUSH
63846: LD_INT 2
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 1
63855: PUSH
63856: LD_INT 2
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: LD_INT 2
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 1
63875: NEG
63876: PUSH
63877: LD_INT 1
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 2
63886: NEG
63887: PUSH
63888: LD_INT 0
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 2
63897: NEG
63898: PUSH
63899: LD_INT 1
63901: NEG
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 2
63909: NEG
63910: PUSH
63911: LD_INT 2
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63940: LD_ADDR_VAR 0 56
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 0
63957: PUSH
63958: LD_INT 1
63960: NEG
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: PUSH
63969: LD_INT 0
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 1
63978: PUSH
63979: LD_INT 1
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 0
63988: PUSH
63989: LD_INT 1
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 1
63998: NEG
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: LD_INT 1
64013: NEG
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 1
64021: NEG
64022: PUSH
64023: LD_INT 2
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: LD_INT 2
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 1
64044: PUSH
64045: LD_INT 1
64047: NEG
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 2
64055: PUSH
64056: LD_INT 0
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 2
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 2
64075: PUSH
64076: LD_INT 2
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 1
64085: PUSH
64086: LD_INT 2
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 0
64095: PUSH
64096: LD_INT 2
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 1
64105: NEG
64106: PUSH
64107: LD_INT 1
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 2
64116: NEG
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 2
64127: NEG
64128: PUSH
64129: LD_INT 1
64131: NEG
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 2
64139: NEG
64140: PUSH
64141: LD_INT 2
64143: NEG
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64170: LD_ADDR_VAR 0 57
64174: PUSH
64175: LD_INT 0
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 0
64187: PUSH
64188: LD_INT 1
64190: NEG
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 1
64198: PUSH
64199: LD_INT 0
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 1
64208: PUSH
64209: LD_INT 1
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 0
64218: PUSH
64219: LD_INT 1
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 1
64228: NEG
64229: PUSH
64230: LD_INT 0
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: NEG
64240: PUSH
64241: LD_INT 1
64243: NEG
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 1
64251: NEG
64252: PUSH
64253: LD_INT 2
64255: NEG
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 0
64263: PUSH
64264: LD_INT 2
64266: NEG
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 1
64274: PUSH
64275: LD_INT 1
64277: NEG
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 2
64285: PUSH
64286: LD_INT 0
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 2
64295: PUSH
64296: LD_INT 1
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 2
64305: PUSH
64306: LD_INT 2
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 1
64315: PUSH
64316: LD_INT 2
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 0
64325: PUSH
64326: LD_INT 2
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 1
64335: NEG
64336: PUSH
64337: LD_INT 1
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 2
64346: NEG
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 2
64357: NEG
64358: PUSH
64359: LD_INT 1
64361: NEG
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 2
64369: NEG
64370: PUSH
64371: LD_INT 2
64373: NEG
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64400: LD_ADDR_VAR 0 58
64404: PUSH
64405: LD_INT 0
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 0
64417: PUSH
64418: LD_INT 1
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 1
64428: PUSH
64429: LD_INT 0
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 1
64438: PUSH
64439: LD_INT 1
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: LD_INT 1
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 1
64458: NEG
64459: PUSH
64460: LD_INT 0
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 1
64469: NEG
64470: PUSH
64471: LD_INT 1
64473: NEG
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 1
64481: NEG
64482: PUSH
64483: LD_INT 2
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 0
64493: PUSH
64494: LD_INT 2
64496: NEG
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 1
64504: PUSH
64505: LD_INT 1
64507: NEG
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 2
64515: PUSH
64516: LD_INT 0
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 2
64525: PUSH
64526: LD_INT 1
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 2
64535: PUSH
64536: LD_INT 2
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 1
64545: PUSH
64546: LD_INT 2
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 0
64555: PUSH
64556: LD_INT 2
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 1
64565: NEG
64566: PUSH
64567: LD_INT 1
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 2
64576: NEG
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 2
64587: NEG
64588: PUSH
64589: LD_INT 1
64591: NEG
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 2
64599: NEG
64600: PUSH
64601: LD_INT 2
64603: NEG
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64630: LD_ADDR_VAR 0 59
64634: PUSH
64635: LD_INT 0
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: LD_INT 1
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 1
64658: PUSH
64659: LD_INT 0
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 1
64668: PUSH
64669: LD_INT 1
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: LD_INT 1
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 1
64688: NEG
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: LD_INT 1
64703: NEG
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64718: LD_ADDR_VAR 0 60
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 0
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 1
64746: PUSH
64747: LD_INT 0
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 1
64756: PUSH
64757: LD_INT 1
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: LD_INT 1
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 1
64776: NEG
64777: PUSH
64778: LD_INT 0
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 1
64787: NEG
64788: PUSH
64789: LD_INT 1
64791: NEG
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64806: LD_ADDR_VAR 0 61
64810: PUSH
64811: LD_INT 0
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 0
64823: PUSH
64824: LD_INT 1
64826: NEG
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 1
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: LD_INT 1
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 0
64854: PUSH
64855: LD_INT 1
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 1
64864: NEG
64865: PUSH
64866: LD_INT 0
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: LD_INT 1
64879: NEG
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64894: LD_ADDR_VAR 0 62
64898: PUSH
64899: LD_INT 0
64901: PUSH
64902: LD_INT 0
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 0
64911: PUSH
64912: LD_INT 1
64914: NEG
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 1
64922: PUSH
64923: LD_INT 0
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 1
64932: PUSH
64933: LD_INT 1
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: LD_INT 1
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 1
64952: NEG
64953: PUSH
64954: LD_INT 0
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 1
64963: NEG
64964: PUSH
64965: LD_INT 1
64967: NEG
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64982: LD_ADDR_VAR 0 63
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: LD_INT 0
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: LD_INT 1
65002: NEG
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 1
65010: PUSH
65011: LD_INT 0
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 1
65020: PUSH
65021: LD_INT 1
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 0
65030: PUSH
65031: LD_INT 1
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 1
65040: NEG
65041: PUSH
65042: LD_INT 0
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 1
65051: NEG
65052: PUSH
65053: LD_INT 1
65055: NEG
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65070: LD_ADDR_VAR 0 64
65074: PUSH
65075: LD_INT 0
65077: PUSH
65078: LD_INT 0
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 0
65087: PUSH
65088: LD_INT 1
65090: NEG
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 1
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 1
65108: PUSH
65109: LD_INT 1
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: LD_INT 1
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 1
65128: NEG
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: NEG
65140: PUSH
65141: LD_INT 1
65143: NEG
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: ST_TO_ADDR
// end ; 1 :
65158: GO 71055
65160: LD_INT 1
65162: DOUBLE
65163: EQUAL
65164: IFTRUE 65168
65166: GO 67791
65168: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65169: LD_ADDR_VAR 0 11
65173: PUSH
65174: LD_INT 1
65176: NEG
65177: PUSH
65178: LD_INT 3
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 0
65188: PUSH
65189: LD_INT 3
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 1
65199: PUSH
65200: LD_INT 2
65202: NEG
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: LIST
65212: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65213: LD_ADDR_VAR 0 12
65217: PUSH
65218: LD_INT 2
65220: PUSH
65221: LD_INT 1
65223: NEG
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 3
65231: PUSH
65232: LD_INT 0
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 3
65241: PUSH
65242: LD_INT 1
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: LIST
65253: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65254: LD_ADDR_VAR 0 13
65258: PUSH
65259: LD_INT 3
65261: PUSH
65262: LD_INT 2
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 3
65271: PUSH
65272: LD_INT 3
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 2
65281: PUSH
65282: LD_INT 3
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: LIST
65293: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65294: LD_ADDR_VAR 0 14
65298: PUSH
65299: LD_INT 1
65301: PUSH
65302: LD_INT 3
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 0
65311: PUSH
65312: LD_INT 3
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 1
65321: NEG
65322: PUSH
65323: LD_INT 2
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: LIST
65334: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65335: LD_ADDR_VAR 0 15
65339: PUSH
65340: LD_INT 2
65342: NEG
65343: PUSH
65344: LD_INT 1
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 3
65353: NEG
65354: PUSH
65355: LD_INT 0
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 3
65364: NEG
65365: PUSH
65366: LD_INT 1
65368: NEG
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: LIST
65378: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65379: LD_ADDR_VAR 0 16
65383: PUSH
65384: LD_INT 2
65386: NEG
65387: PUSH
65388: LD_INT 3
65390: NEG
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 3
65398: NEG
65399: PUSH
65400: LD_INT 2
65402: NEG
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 3
65410: NEG
65411: PUSH
65412: LD_INT 3
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: LIST
65424: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65425: LD_ADDR_VAR 0 17
65429: PUSH
65430: LD_INT 1
65432: NEG
65433: PUSH
65434: LD_INT 3
65436: NEG
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 0
65444: PUSH
65445: LD_INT 3
65447: NEG
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 1
65455: PUSH
65456: LD_INT 2
65458: NEG
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: LIST
65468: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65469: LD_ADDR_VAR 0 18
65473: PUSH
65474: LD_INT 2
65476: PUSH
65477: LD_INT 1
65479: NEG
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 3
65487: PUSH
65488: LD_INT 0
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 3
65497: PUSH
65498: LD_INT 1
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: LIST
65509: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65510: LD_ADDR_VAR 0 19
65514: PUSH
65515: LD_INT 3
65517: PUSH
65518: LD_INT 2
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 3
65527: PUSH
65528: LD_INT 3
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 2
65537: PUSH
65538: LD_INT 3
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: LIST
65549: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65550: LD_ADDR_VAR 0 20
65554: PUSH
65555: LD_INT 1
65557: PUSH
65558: LD_INT 3
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 0
65567: PUSH
65568: LD_INT 3
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 1
65577: NEG
65578: PUSH
65579: LD_INT 2
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: LIST
65590: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65591: LD_ADDR_VAR 0 21
65595: PUSH
65596: LD_INT 2
65598: NEG
65599: PUSH
65600: LD_INT 1
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 3
65609: NEG
65610: PUSH
65611: LD_INT 0
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 3
65620: NEG
65621: PUSH
65622: LD_INT 1
65624: NEG
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: LIST
65634: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65635: LD_ADDR_VAR 0 22
65639: PUSH
65640: LD_INT 2
65642: NEG
65643: PUSH
65644: LD_INT 3
65646: NEG
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 3
65654: NEG
65655: PUSH
65656: LD_INT 2
65658: NEG
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 3
65666: NEG
65667: PUSH
65668: LD_INT 3
65670: NEG
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: LIST
65680: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65681: LD_ADDR_VAR 0 23
65685: PUSH
65686: LD_INT 0
65688: PUSH
65689: LD_INT 3
65691: NEG
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 1
65699: NEG
65700: PUSH
65701: LD_INT 4
65703: NEG
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 1
65711: PUSH
65712: LD_INT 3
65714: NEG
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: LIST
65724: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65725: LD_ADDR_VAR 0 24
65729: PUSH
65730: LD_INT 3
65732: PUSH
65733: LD_INT 0
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 3
65742: PUSH
65743: LD_INT 1
65745: NEG
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 4
65753: PUSH
65754: LD_INT 1
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: LIST
65765: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65766: LD_ADDR_VAR 0 25
65770: PUSH
65771: LD_INT 3
65773: PUSH
65774: LD_INT 3
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 4
65783: PUSH
65784: LD_INT 3
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 3
65793: PUSH
65794: LD_INT 4
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: LIST
65805: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65806: LD_ADDR_VAR 0 26
65810: PUSH
65811: LD_INT 0
65813: PUSH
65814: LD_INT 3
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: LD_INT 4
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 1
65833: NEG
65834: PUSH
65835: LD_INT 3
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: LIST
65846: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65847: LD_ADDR_VAR 0 27
65851: PUSH
65852: LD_INT 3
65854: NEG
65855: PUSH
65856: LD_INT 0
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 3
65865: NEG
65866: PUSH
65867: LD_INT 1
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 4
65876: NEG
65877: PUSH
65878: LD_INT 1
65880: NEG
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: LIST
65890: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65891: LD_ADDR_VAR 0 28
65895: PUSH
65896: LD_INT 3
65898: NEG
65899: PUSH
65900: LD_INT 3
65902: NEG
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 3
65910: NEG
65911: PUSH
65912: LD_INT 4
65914: NEG
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 4
65922: NEG
65923: PUSH
65924: LD_INT 3
65926: NEG
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: LIST
65936: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65937: LD_ADDR_VAR 0 29
65941: PUSH
65942: LD_INT 1
65944: NEG
65945: PUSH
65946: LD_INT 3
65948: NEG
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: LD_INT 3
65959: NEG
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 1
65967: PUSH
65968: LD_INT 2
65970: NEG
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 1
65978: NEG
65979: PUSH
65980: LD_INT 4
65982: NEG
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 0
65990: PUSH
65991: LD_INT 4
65993: NEG
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 1
66001: PUSH
66002: LD_INT 3
66004: NEG
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 1
66012: NEG
66013: PUSH
66014: LD_INT 5
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 0
66024: PUSH
66025: LD_INT 5
66027: NEG
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 1
66035: PUSH
66036: LD_INT 4
66038: NEG
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 1
66046: NEG
66047: PUSH
66048: LD_INT 6
66050: NEG
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 0
66058: PUSH
66059: LD_INT 6
66061: NEG
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 1
66069: PUSH
66070: LD_INT 5
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66092: LD_ADDR_VAR 0 30
66096: PUSH
66097: LD_INT 2
66099: PUSH
66100: LD_INT 1
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 3
66110: PUSH
66111: LD_INT 0
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 3
66120: PUSH
66121: LD_INT 1
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 3
66130: PUSH
66131: LD_INT 1
66133: NEG
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 4
66141: PUSH
66142: LD_INT 0
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 4
66151: PUSH
66152: LD_INT 1
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 4
66161: PUSH
66162: LD_INT 1
66164: NEG
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 5
66172: PUSH
66173: LD_INT 0
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 5
66182: PUSH
66183: LD_INT 1
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 5
66192: PUSH
66193: LD_INT 1
66195: NEG
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 6
66203: PUSH
66204: LD_INT 0
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 6
66213: PUSH
66214: LD_INT 1
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66235: LD_ADDR_VAR 0 31
66239: PUSH
66240: LD_INT 3
66242: PUSH
66243: LD_INT 2
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 3
66252: PUSH
66253: LD_INT 3
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 2
66262: PUSH
66263: LD_INT 3
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 4
66272: PUSH
66273: LD_INT 3
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 4
66282: PUSH
66283: LD_INT 4
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 3
66292: PUSH
66293: LD_INT 4
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 5
66302: PUSH
66303: LD_INT 4
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 5
66312: PUSH
66313: LD_INT 5
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 4
66322: PUSH
66323: LD_INT 5
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 6
66332: PUSH
66333: LD_INT 5
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 6
66342: PUSH
66343: LD_INT 6
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 5
66352: PUSH
66353: LD_INT 6
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66374: LD_ADDR_VAR 0 32
66378: PUSH
66379: LD_INT 1
66381: PUSH
66382: LD_INT 3
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 0
66391: PUSH
66392: LD_INT 3
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 1
66401: NEG
66402: PUSH
66403: LD_INT 2
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 1
66412: PUSH
66413: LD_INT 4
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 0
66422: PUSH
66423: LD_INT 4
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 1
66432: NEG
66433: PUSH
66434: LD_INT 3
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 1
66443: PUSH
66444: LD_INT 5
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 0
66453: PUSH
66454: LD_INT 5
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 1
66463: NEG
66464: PUSH
66465: LD_INT 4
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 1
66474: PUSH
66475: LD_INT 6
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 0
66484: PUSH
66485: LD_INT 6
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 1
66494: NEG
66495: PUSH
66496: LD_INT 5
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66517: LD_ADDR_VAR 0 33
66521: PUSH
66522: LD_INT 2
66524: NEG
66525: PUSH
66526: LD_INT 1
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 3
66535: NEG
66536: PUSH
66537: LD_INT 0
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 3
66546: NEG
66547: PUSH
66548: LD_INT 1
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 3
66558: NEG
66559: PUSH
66560: LD_INT 1
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 4
66569: NEG
66570: PUSH
66571: LD_INT 0
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 4
66580: NEG
66581: PUSH
66582: LD_INT 1
66584: NEG
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 4
66592: NEG
66593: PUSH
66594: LD_INT 1
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 5
66603: NEG
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 5
66614: NEG
66615: PUSH
66616: LD_INT 1
66618: NEG
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 5
66626: NEG
66627: PUSH
66628: LD_INT 1
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 6
66637: NEG
66638: PUSH
66639: LD_INT 0
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 6
66648: NEG
66649: PUSH
66650: LD_INT 1
66652: NEG
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66672: LD_ADDR_VAR 0 34
66676: PUSH
66677: LD_INT 2
66679: NEG
66680: PUSH
66681: LD_INT 3
66683: NEG
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 3
66691: NEG
66692: PUSH
66693: LD_INT 2
66695: NEG
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 3
66703: NEG
66704: PUSH
66705: LD_INT 3
66707: NEG
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 3
66715: NEG
66716: PUSH
66717: LD_INT 4
66719: NEG
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 4
66727: NEG
66728: PUSH
66729: LD_INT 3
66731: NEG
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 4
66739: NEG
66740: PUSH
66741: LD_INT 4
66743: NEG
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 4
66751: NEG
66752: PUSH
66753: LD_INT 5
66755: NEG
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 5
66763: NEG
66764: PUSH
66765: LD_INT 4
66767: NEG
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 5
66775: NEG
66776: PUSH
66777: LD_INT 5
66779: NEG
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 5
66787: NEG
66788: PUSH
66789: LD_INT 6
66791: NEG
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 6
66799: NEG
66800: PUSH
66801: LD_INT 5
66803: NEG
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 6
66811: NEG
66812: PUSH
66813: LD_INT 6
66815: NEG
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66835: LD_ADDR_VAR 0 41
66839: PUSH
66840: LD_INT 0
66842: PUSH
66843: LD_INT 2
66845: NEG
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 1
66853: NEG
66854: PUSH
66855: LD_INT 3
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 1
66865: PUSH
66866: LD_INT 2
66868: NEG
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: LIST
66878: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66879: LD_ADDR_VAR 0 42
66883: PUSH
66884: LD_INT 2
66886: PUSH
66887: LD_INT 0
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 2
66896: PUSH
66897: LD_INT 1
66899: NEG
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 3
66907: PUSH
66908: LD_INT 1
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: LIST
66919: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66920: LD_ADDR_VAR 0 43
66924: PUSH
66925: LD_INT 2
66927: PUSH
66928: LD_INT 2
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 3
66937: PUSH
66938: LD_INT 2
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 2
66947: PUSH
66948: LD_INT 3
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: LIST
66959: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66960: LD_ADDR_VAR 0 44
66964: PUSH
66965: LD_INT 0
66967: PUSH
66968: LD_INT 2
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 1
66977: PUSH
66978: LD_INT 3
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 1
66987: NEG
66988: PUSH
66989: LD_INT 2
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: LIST
67000: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67001: LD_ADDR_VAR 0 45
67005: PUSH
67006: LD_INT 2
67008: NEG
67009: PUSH
67010: LD_INT 0
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 2
67019: NEG
67020: PUSH
67021: LD_INT 1
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 3
67030: NEG
67031: PUSH
67032: LD_INT 1
67034: NEG
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: LIST
67044: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67045: LD_ADDR_VAR 0 46
67049: PUSH
67050: LD_INT 2
67052: NEG
67053: PUSH
67054: LD_INT 2
67056: NEG
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 2
67064: NEG
67065: PUSH
67066: LD_INT 3
67068: NEG
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 3
67076: NEG
67077: PUSH
67078: LD_INT 2
67080: NEG
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: LIST
67090: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67091: LD_ADDR_VAR 0 47
67095: PUSH
67096: LD_INT 2
67098: NEG
67099: PUSH
67100: LD_INT 3
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 1
67110: NEG
67111: PUSH
67112: LD_INT 3
67114: NEG
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67124: LD_ADDR_VAR 0 48
67128: PUSH
67129: LD_INT 1
67131: PUSH
67132: LD_INT 2
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 2
67142: PUSH
67143: LD_INT 1
67145: NEG
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67155: LD_ADDR_VAR 0 49
67159: PUSH
67160: LD_INT 3
67162: PUSH
67163: LD_INT 1
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 3
67172: PUSH
67173: LD_INT 2
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67184: LD_ADDR_VAR 0 50
67188: PUSH
67189: LD_INT 2
67191: PUSH
67192: LD_INT 3
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 1
67201: PUSH
67202: LD_INT 3
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67213: LD_ADDR_VAR 0 51
67217: PUSH
67218: LD_INT 1
67220: NEG
67221: PUSH
67222: LD_INT 2
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: LD_INT 2
67231: NEG
67232: PUSH
67233: LD_INT 1
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67244: LD_ADDR_VAR 0 52
67248: PUSH
67249: LD_INT 3
67251: NEG
67252: PUSH
67253: LD_INT 1
67255: NEG
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 3
67263: NEG
67264: PUSH
67265: LD_INT 2
67267: NEG
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67277: LD_ADDR_VAR 0 53
67281: PUSH
67282: LD_INT 1
67284: NEG
67285: PUSH
67286: LD_INT 3
67288: NEG
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 0
67296: PUSH
67297: LD_INT 3
67299: NEG
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 1
67307: PUSH
67308: LD_INT 2
67310: NEG
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: LIST
67320: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67321: LD_ADDR_VAR 0 54
67325: PUSH
67326: LD_INT 2
67328: PUSH
67329: LD_INT 1
67331: NEG
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 3
67339: PUSH
67340: LD_INT 0
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 3
67349: PUSH
67350: LD_INT 1
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: LIST
67361: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67362: LD_ADDR_VAR 0 55
67366: PUSH
67367: LD_INT 3
67369: PUSH
67370: LD_INT 2
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 3
67379: PUSH
67380: LD_INT 3
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 2
67389: PUSH
67390: LD_INT 3
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: LIST
67401: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67402: LD_ADDR_VAR 0 56
67406: PUSH
67407: LD_INT 1
67409: PUSH
67410: LD_INT 3
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 0
67419: PUSH
67420: LD_INT 3
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 1
67429: NEG
67430: PUSH
67431: LD_INT 2
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: LIST
67442: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67443: LD_ADDR_VAR 0 57
67447: PUSH
67448: LD_INT 2
67450: NEG
67451: PUSH
67452: LD_INT 1
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 3
67461: NEG
67462: PUSH
67463: LD_INT 0
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 3
67472: NEG
67473: PUSH
67474: LD_INT 1
67476: NEG
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: LIST
67486: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67487: LD_ADDR_VAR 0 58
67491: PUSH
67492: LD_INT 2
67494: NEG
67495: PUSH
67496: LD_INT 3
67498: NEG
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 3
67506: NEG
67507: PUSH
67508: LD_INT 2
67510: NEG
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 3
67518: NEG
67519: PUSH
67520: LD_INT 3
67522: NEG
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: LIST
67532: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67533: LD_ADDR_VAR 0 59
67537: PUSH
67538: LD_INT 1
67540: NEG
67541: PUSH
67542: LD_INT 2
67544: NEG
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 0
67552: PUSH
67553: LD_INT 2
67555: NEG
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 1
67563: PUSH
67564: LD_INT 1
67566: NEG
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: LIST
67576: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67577: LD_ADDR_VAR 0 60
67581: PUSH
67582: LD_INT 1
67584: PUSH
67585: LD_INT 1
67587: NEG
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 2
67595: PUSH
67596: LD_INT 0
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 2
67605: PUSH
67606: LD_INT 1
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: LIST
67617: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67618: LD_ADDR_VAR 0 61
67622: PUSH
67623: LD_INT 2
67625: PUSH
67626: LD_INT 1
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 2
67635: PUSH
67636: LD_INT 2
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 1
67645: PUSH
67646: LD_INT 2
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: LIST
67657: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67658: LD_ADDR_VAR 0 62
67662: PUSH
67663: LD_INT 1
67665: PUSH
67666: LD_INT 2
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 0
67675: PUSH
67676: LD_INT 2
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 1
67685: NEG
67686: PUSH
67687: LD_INT 1
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: LIST
67698: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67699: LD_ADDR_VAR 0 63
67703: PUSH
67704: LD_INT 1
67706: NEG
67707: PUSH
67708: LD_INT 1
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 2
67717: NEG
67718: PUSH
67719: LD_INT 0
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 2
67728: NEG
67729: PUSH
67730: LD_INT 1
67732: NEG
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: LIST
67742: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67743: LD_ADDR_VAR 0 64
67747: PUSH
67748: LD_INT 1
67750: NEG
67751: PUSH
67752: LD_INT 2
67754: NEG
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 2
67762: NEG
67763: PUSH
67764: LD_INT 1
67766: NEG
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 2
67774: NEG
67775: PUSH
67776: LD_INT 2
67778: NEG
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: LIST
67788: ST_TO_ADDR
// end ; 2 :
67789: GO 71055
67791: LD_INT 2
67793: DOUBLE
67794: EQUAL
67795: IFTRUE 67799
67797: GO 71054
67799: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67800: LD_ADDR_VAR 0 29
67804: PUSH
67805: LD_INT 4
67807: PUSH
67808: LD_INT 0
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 4
67817: PUSH
67818: LD_INT 1
67820: NEG
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 5
67828: PUSH
67829: LD_INT 0
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 5
67838: PUSH
67839: LD_INT 1
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 4
67848: PUSH
67849: LD_INT 1
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 3
67858: PUSH
67859: LD_INT 0
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 3
67868: PUSH
67869: LD_INT 1
67871: NEG
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 3
67879: PUSH
67880: LD_INT 2
67882: NEG
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 5
67890: PUSH
67891: LD_INT 2
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 3
67900: PUSH
67901: LD_INT 3
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 3
67910: PUSH
67911: LD_INT 2
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 4
67920: PUSH
67921: LD_INT 3
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 4
67930: PUSH
67931: LD_INT 4
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 3
67940: PUSH
67941: LD_INT 4
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 2
67950: PUSH
67951: LD_INT 3
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 2
67960: PUSH
67961: LD_INT 2
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 4
67970: PUSH
67971: LD_INT 2
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 2
67980: PUSH
67981: LD_INT 4
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 0
67990: PUSH
67991: LD_INT 4
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 0
68000: PUSH
68001: LD_INT 3
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 1
68010: PUSH
68011: LD_INT 4
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 1
68020: PUSH
68021: LD_INT 5
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 0
68030: PUSH
68031: LD_INT 5
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 1
68040: NEG
68041: PUSH
68042: LD_INT 4
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 1
68051: NEG
68052: PUSH
68053: LD_INT 3
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 2
68062: PUSH
68063: LD_INT 5
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 2
68072: NEG
68073: PUSH
68074: LD_INT 3
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 3
68083: NEG
68084: PUSH
68085: LD_INT 0
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 3
68094: NEG
68095: PUSH
68096: LD_INT 1
68098: NEG
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 2
68106: NEG
68107: PUSH
68108: LD_INT 0
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 2
68117: NEG
68118: PUSH
68119: LD_INT 1
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 3
68128: NEG
68129: PUSH
68130: LD_INT 1
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 4
68139: NEG
68140: PUSH
68141: LD_INT 0
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 4
68150: NEG
68151: PUSH
68152: LD_INT 1
68154: NEG
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 4
68162: NEG
68163: PUSH
68164: LD_INT 2
68166: NEG
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 2
68174: NEG
68175: PUSH
68176: LD_INT 2
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 4
68185: NEG
68186: PUSH
68187: LD_INT 4
68189: NEG
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 4
68197: NEG
68198: PUSH
68199: LD_INT 5
68201: NEG
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 3
68209: NEG
68210: PUSH
68211: LD_INT 4
68213: NEG
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 3
68221: NEG
68222: PUSH
68223: LD_INT 3
68225: NEG
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 4
68233: NEG
68234: PUSH
68235: LD_INT 3
68237: NEG
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 5
68245: NEG
68246: PUSH
68247: LD_INT 4
68249: NEG
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 5
68257: NEG
68258: PUSH
68259: LD_INT 5
68261: NEG
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 3
68269: NEG
68270: PUSH
68271: LD_INT 5
68273: NEG
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 5
68281: NEG
68282: PUSH
68283: LD_INT 3
68285: NEG
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68338: LD_ADDR_VAR 0 30
68342: PUSH
68343: LD_INT 4
68345: PUSH
68346: LD_INT 4
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 4
68355: PUSH
68356: LD_INT 3
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 5
68365: PUSH
68366: LD_INT 4
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 5
68375: PUSH
68376: LD_INT 5
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 4
68385: PUSH
68386: LD_INT 5
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 3
68395: PUSH
68396: LD_INT 4
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 3
68405: PUSH
68406: LD_INT 3
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 5
68415: PUSH
68416: LD_INT 3
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 3
68425: PUSH
68426: LD_INT 5
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 0
68435: PUSH
68436: LD_INT 3
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 0
68445: PUSH
68446: LD_INT 2
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: LD_INT 1
68455: PUSH
68456: LD_INT 3
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 1
68465: PUSH
68466: LD_INT 4
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 0
68475: PUSH
68476: LD_INT 4
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 1
68485: NEG
68486: PUSH
68487: LD_INT 3
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 1
68496: NEG
68497: PUSH
68498: LD_INT 2
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 2
68507: PUSH
68508: LD_INT 4
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 2
68517: NEG
68518: PUSH
68519: LD_INT 2
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 4
68528: NEG
68529: PUSH
68530: LD_INT 0
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 4
68539: NEG
68540: PUSH
68541: LD_INT 1
68543: NEG
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 3
68551: NEG
68552: PUSH
68553: LD_INT 0
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 3
68562: NEG
68563: PUSH
68564: LD_INT 1
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 4
68573: NEG
68574: PUSH
68575: LD_INT 1
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 5
68584: NEG
68585: PUSH
68586: LD_INT 0
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 5
68595: NEG
68596: PUSH
68597: LD_INT 1
68599: NEG
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: LD_INT 5
68607: NEG
68608: PUSH
68609: LD_INT 2
68611: NEG
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 3
68619: NEG
68620: PUSH
68621: LD_INT 2
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 3
68630: NEG
68631: PUSH
68632: LD_INT 3
68634: NEG
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 3
68642: NEG
68643: PUSH
68644: LD_INT 4
68646: NEG
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 2
68654: NEG
68655: PUSH
68656: LD_INT 3
68658: NEG
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 2
68666: NEG
68667: PUSH
68668: LD_INT 2
68670: NEG
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 3
68678: NEG
68679: PUSH
68680: LD_INT 2
68682: NEG
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 4
68690: NEG
68691: PUSH
68692: LD_INT 3
68694: NEG
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 4
68702: NEG
68703: PUSH
68704: LD_INT 4
68706: NEG
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 2
68714: NEG
68715: PUSH
68716: LD_INT 4
68718: NEG
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 4
68726: NEG
68727: PUSH
68728: LD_INT 2
68730: NEG
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 0
68738: PUSH
68739: LD_INT 4
68741: NEG
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 0
68749: PUSH
68750: LD_INT 5
68752: NEG
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 1
68760: PUSH
68761: LD_INT 4
68763: NEG
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 1
68771: PUSH
68772: LD_INT 3
68774: NEG
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 0
68782: PUSH
68783: LD_INT 3
68785: NEG
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 1
68793: NEG
68794: PUSH
68795: LD_INT 4
68797: NEG
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 1
68805: NEG
68806: PUSH
68807: LD_INT 5
68809: NEG
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 2
68817: PUSH
68818: LD_INT 3
68820: NEG
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 2
68828: NEG
68829: PUSH
68830: LD_INT 5
68832: NEG
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68885: LD_ADDR_VAR 0 31
68889: PUSH
68890: LD_INT 0
68892: PUSH
68893: LD_INT 4
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 0
68902: PUSH
68903: LD_INT 3
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 1
68912: PUSH
68913: LD_INT 4
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 1
68922: PUSH
68923: LD_INT 5
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 0
68932: PUSH
68933: LD_INT 5
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 1
68942: NEG
68943: PUSH
68944: LD_INT 4
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 1
68953: NEG
68954: PUSH
68955: LD_INT 3
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 2
68964: PUSH
68965: LD_INT 5
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 2
68974: NEG
68975: PUSH
68976: LD_INT 3
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 3
68985: NEG
68986: PUSH
68987: LD_INT 0
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 3
68996: NEG
68997: PUSH
68998: LD_INT 1
69000: NEG
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 2
69008: NEG
69009: PUSH
69010: LD_INT 0
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 2
69019: NEG
69020: PUSH
69021: LD_INT 1
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 3
69030: NEG
69031: PUSH
69032: LD_INT 1
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 4
69041: NEG
69042: PUSH
69043: LD_INT 0
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 4
69052: NEG
69053: PUSH
69054: LD_INT 1
69056: NEG
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 4
69064: NEG
69065: PUSH
69066: LD_INT 2
69068: NEG
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 2
69076: NEG
69077: PUSH
69078: LD_INT 2
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 4
69087: NEG
69088: PUSH
69089: LD_INT 4
69091: NEG
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 4
69099: NEG
69100: PUSH
69101: LD_INT 5
69103: NEG
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 3
69111: NEG
69112: PUSH
69113: LD_INT 4
69115: NEG
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 3
69123: NEG
69124: PUSH
69125: LD_INT 3
69127: NEG
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 4
69135: NEG
69136: PUSH
69137: LD_INT 3
69139: NEG
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 5
69147: NEG
69148: PUSH
69149: LD_INT 4
69151: NEG
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 5
69159: NEG
69160: PUSH
69161: LD_INT 5
69163: NEG
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 3
69171: NEG
69172: PUSH
69173: LD_INT 5
69175: NEG
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 5
69183: NEG
69184: PUSH
69185: LD_INT 3
69187: NEG
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 0
69195: PUSH
69196: LD_INT 3
69198: NEG
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 0
69206: PUSH
69207: LD_INT 4
69209: NEG
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 1
69217: PUSH
69218: LD_INT 3
69220: NEG
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 1
69228: PUSH
69229: LD_INT 2
69231: NEG
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 0
69239: PUSH
69240: LD_INT 2
69242: NEG
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 1
69250: NEG
69251: PUSH
69252: LD_INT 3
69254: NEG
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 1
69262: NEG
69263: PUSH
69264: LD_INT 4
69266: NEG
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 2
69274: PUSH
69275: LD_INT 2
69277: NEG
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 2
69285: NEG
69286: PUSH
69287: LD_INT 4
69289: NEG
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 4
69297: PUSH
69298: LD_INT 0
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 4
69307: PUSH
69308: LD_INT 1
69310: NEG
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 5
69318: PUSH
69319: LD_INT 0
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 5
69328: PUSH
69329: LD_INT 1
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 4
69338: PUSH
69339: LD_INT 1
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 3
69348: PUSH
69349: LD_INT 0
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 3
69358: PUSH
69359: LD_INT 1
69361: NEG
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 3
69369: PUSH
69370: LD_INT 2
69372: NEG
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 5
69380: PUSH
69381: LD_INT 2
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: LIST
69434: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69435: LD_ADDR_VAR 0 32
69439: PUSH
69440: LD_INT 4
69442: NEG
69443: PUSH
69444: LD_INT 0
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 4
69453: NEG
69454: PUSH
69455: LD_INT 1
69457: NEG
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PUSH
69463: LD_INT 3
69465: NEG
69466: PUSH
69467: LD_INT 0
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 3
69476: NEG
69477: PUSH
69478: LD_INT 1
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 4
69487: NEG
69488: PUSH
69489: LD_INT 1
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 5
69498: NEG
69499: PUSH
69500: LD_INT 0
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 5
69509: NEG
69510: PUSH
69511: LD_INT 1
69513: NEG
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_INT 5
69521: NEG
69522: PUSH
69523: LD_INT 2
69525: NEG
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 3
69533: NEG
69534: PUSH
69535: LD_INT 2
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: LD_INT 3
69544: NEG
69545: PUSH
69546: LD_INT 3
69548: NEG
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 3
69556: NEG
69557: PUSH
69558: LD_INT 4
69560: NEG
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 2
69568: NEG
69569: PUSH
69570: LD_INT 3
69572: NEG
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 2
69580: NEG
69581: PUSH
69582: LD_INT 2
69584: NEG
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 3
69592: NEG
69593: PUSH
69594: LD_INT 2
69596: NEG
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PUSH
69602: LD_INT 4
69604: NEG
69605: PUSH
69606: LD_INT 3
69608: NEG
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 4
69616: NEG
69617: PUSH
69618: LD_INT 4
69620: NEG
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 2
69628: NEG
69629: PUSH
69630: LD_INT 4
69632: NEG
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 4
69640: NEG
69641: PUSH
69642: LD_INT 2
69644: NEG
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 0
69652: PUSH
69653: LD_INT 4
69655: NEG
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 0
69663: PUSH
69664: LD_INT 5
69666: NEG
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 1
69674: PUSH
69675: LD_INT 4
69677: NEG
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 1
69685: PUSH
69686: LD_INT 3
69688: NEG
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 0
69696: PUSH
69697: LD_INT 3
69699: NEG
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: LD_INT 1
69707: NEG
69708: PUSH
69709: LD_INT 4
69711: NEG
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 1
69719: NEG
69720: PUSH
69721: LD_INT 5
69723: NEG
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 2
69731: PUSH
69732: LD_INT 3
69734: NEG
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 2
69742: NEG
69743: PUSH
69744: LD_INT 5
69746: NEG
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 3
69754: PUSH
69755: LD_INT 0
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 3
69764: PUSH
69765: LD_INT 1
69767: NEG
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: LD_INT 4
69775: PUSH
69776: LD_INT 0
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 4
69785: PUSH
69786: LD_INT 1
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 3
69795: PUSH
69796: LD_INT 1
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 2
69805: PUSH
69806: LD_INT 0
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 2
69815: PUSH
69816: LD_INT 1
69818: NEG
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 2
69826: PUSH
69827: LD_INT 2
69829: NEG
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 4
69837: PUSH
69838: LD_INT 2
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 4
69847: PUSH
69848: LD_INT 4
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 4
69857: PUSH
69858: LD_INT 3
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 5
69867: PUSH
69868: LD_INT 4
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 5
69877: PUSH
69878: LD_INT 5
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 4
69887: PUSH
69888: LD_INT 5
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 3
69897: PUSH
69898: LD_INT 4
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 3
69907: PUSH
69908: LD_INT 3
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 5
69917: PUSH
69918: LD_INT 3
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 3
69927: PUSH
69928: LD_INT 5
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69982: LD_ADDR_VAR 0 33
69986: PUSH
69987: LD_INT 4
69989: NEG
69990: PUSH
69991: LD_INT 4
69993: NEG
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 4
70001: NEG
70002: PUSH
70003: LD_INT 5
70005: NEG
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 3
70013: NEG
70014: PUSH
70015: LD_INT 4
70017: NEG
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 3
70025: NEG
70026: PUSH
70027: LD_INT 3
70029: NEG
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 4
70037: NEG
70038: PUSH
70039: LD_INT 3
70041: NEG
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 5
70049: NEG
70050: PUSH
70051: LD_INT 4
70053: NEG
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 5
70061: NEG
70062: PUSH
70063: LD_INT 5
70065: NEG
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 3
70073: NEG
70074: PUSH
70075: LD_INT 5
70077: NEG
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 5
70085: NEG
70086: PUSH
70087: LD_INT 3
70089: NEG
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: LD_INT 0
70097: PUSH
70098: LD_INT 3
70100: NEG
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: LD_INT 0
70108: PUSH
70109: LD_INT 4
70111: NEG
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 1
70119: PUSH
70120: LD_INT 3
70122: NEG
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: LD_INT 1
70130: PUSH
70131: LD_INT 2
70133: NEG
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 0
70141: PUSH
70142: LD_INT 2
70144: NEG
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 1
70152: NEG
70153: PUSH
70154: LD_INT 3
70156: NEG
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 1
70164: NEG
70165: PUSH
70166: LD_INT 4
70168: NEG
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 2
70176: PUSH
70177: LD_INT 2
70179: NEG
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 2
70187: NEG
70188: PUSH
70189: LD_INT 4
70191: NEG
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 4
70199: PUSH
70200: LD_INT 0
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 4
70209: PUSH
70210: LD_INT 1
70212: NEG
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 5
70220: PUSH
70221: LD_INT 0
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 5
70230: PUSH
70231: LD_INT 1
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 4
70240: PUSH
70241: LD_INT 1
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 3
70250: PUSH
70251: LD_INT 0
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 3
70260: PUSH
70261: LD_INT 1
70263: NEG
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: LD_INT 3
70271: PUSH
70272: LD_INT 2
70274: NEG
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 5
70282: PUSH
70283: LD_INT 2
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 3
70292: PUSH
70293: LD_INT 3
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 3
70302: PUSH
70303: LD_INT 2
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PUSH
70310: LD_INT 4
70312: PUSH
70313: LD_INT 3
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 4
70322: PUSH
70323: LD_INT 4
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 3
70332: PUSH
70333: LD_INT 4
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 2
70342: PUSH
70343: LD_INT 3
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 2
70352: PUSH
70353: LD_INT 2
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 4
70362: PUSH
70363: LD_INT 2
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 2
70372: PUSH
70373: LD_INT 4
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 0
70382: PUSH
70383: LD_INT 4
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 0
70392: PUSH
70393: LD_INT 3
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 1
70402: PUSH
70403: LD_INT 4
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 1
70412: PUSH
70413: LD_INT 5
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 0
70422: PUSH
70423: LD_INT 5
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: LD_INT 1
70432: NEG
70433: PUSH
70434: LD_INT 4
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 1
70443: NEG
70444: PUSH
70445: LD_INT 3
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 2
70454: PUSH
70455: LD_INT 5
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 2
70464: NEG
70465: PUSH
70466: LD_INT 3
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70520: LD_ADDR_VAR 0 34
70524: PUSH
70525: LD_INT 0
70527: PUSH
70528: LD_INT 4
70530: NEG
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: PUSH
70536: LD_INT 0
70538: PUSH
70539: LD_INT 5
70541: NEG
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PUSH
70547: LD_INT 1
70549: PUSH
70550: LD_INT 4
70552: NEG
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 1
70560: PUSH
70561: LD_INT 3
70563: NEG
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: PUSH
70569: LD_INT 0
70571: PUSH
70572: LD_INT 3
70574: NEG
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 1
70582: NEG
70583: PUSH
70584: LD_INT 4
70586: NEG
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: LD_INT 1
70594: NEG
70595: PUSH
70596: LD_INT 5
70598: NEG
70599: PUSH
70600: EMPTY
70601: LIST
70602: LIST
70603: PUSH
70604: LD_INT 2
70606: PUSH
70607: LD_INT 3
70609: NEG
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: PUSH
70615: LD_INT 2
70617: NEG
70618: PUSH
70619: LD_INT 5
70621: NEG
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 3
70629: PUSH
70630: LD_INT 0
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 3
70639: PUSH
70640: LD_INT 1
70642: NEG
70643: PUSH
70644: EMPTY
70645: LIST
70646: LIST
70647: PUSH
70648: LD_INT 4
70650: PUSH
70651: LD_INT 0
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: PUSH
70658: LD_INT 4
70660: PUSH
70661: LD_INT 1
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 3
70670: PUSH
70671: LD_INT 1
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 2
70680: PUSH
70681: LD_INT 0
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PUSH
70688: LD_INT 2
70690: PUSH
70691: LD_INT 1
70693: NEG
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 2
70701: PUSH
70702: LD_INT 2
70704: NEG
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: PUSH
70710: LD_INT 4
70712: PUSH
70713: LD_INT 2
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 4
70722: PUSH
70723: LD_INT 4
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: LD_INT 4
70732: PUSH
70733: LD_INT 3
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 5
70742: PUSH
70743: LD_INT 4
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: PUSH
70750: LD_INT 5
70752: PUSH
70753: LD_INT 5
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_INT 4
70762: PUSH
70763: LD_INT 5
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: PUSH
70770: LD_INT 3
70772: PUSH
70773: LD_INT 4
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 3
70782: PUSH
70783: LD_INT 3
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: LD_INT 5
70792: PUSH
70793: LD_INT 3
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: LD_INT 3
70802: PUSH
70803: LD_INT 5
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: LD_INT 0
70812: PUSH
70813: LD_INT 3
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: LD_INT 0
70822: PUSH
70823: LD_INT 2
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 1
70832: PUSH
70833: LD_INT 3
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: LD_INT 1
70842: PUSH
70843: LD_INT 4
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 0
70852: PUSH
70853: LD_INT 4
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 1
70862: NEG
70863: PUSH
70864: LD_INT 3
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: LD_INT 1
70873: NEG
70874: PUSH
70875: LD_INT 2
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: LD_INT 2
70884: PUSH
70885: LD_INT 4
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 2
70894: NEG
70895: PUSH
70896: LD_INT 2
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 4
70905: NEG
70906: PUSH
70907: LD_INT 0
70909: PUSH
70910: EMPTY
70911: LIST
70912: LIST
70913: PUSH
70914: LD_INT 4
70916: NEG
70917: PUSH
70918: LD_INT 1
70920: NEG
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: LD_INT 3
70928: NEG
70929: PUSH
70930: LD_INT 0
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: PUSH
70937: LD_INT 3
70939: NEG
70940: PUSH
70941: LD_INT 1
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: PUSH
70948: LD_INT 4
70950: NEG
70951: PUSH
70952: LD_INT 1
70954: PUSH
70955: EMPTY
70956: LIST
70957: LIST
70958: PUSH
70959: LD_INT 5
70961: NEG
70962: PUSH
70963: LD_INT 0
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: PUSH
70970: LD_INT 5
70972: NEG
70973: PUSH
70974: LD_INT 1
70976: NEG
70977: PUSH
70978: EMPTY
70979: LIST
70980: LIST
70981: PUSH
70982: LD_INT 5
70984: NEG
70985: PUSH
70986: LD_INT 2
70988: NEG
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: PUSH
70994: LD_INT 3
70996: NEG
70997: PUSH
70998: LD_INT 2
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: LIST
71011: LIST
71012: LIST
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: ST_TO_ADDR
// end ; end ;
71052: GO 71055
71054: POP
// case btype of b_depot , b_warehouse :
71055: LD_VAR 0 1
71059: PUSH
71060: LD_INT 0
71062: DOUBLE
71063: EQUAL
71064: IFTRUE 71074
71066: LD_INT 1
71068: DOUBLE
71069: EQUAL
71070: IFTRUE 71074
71072: GO 71275
71074: POP
// case nation of nation_american :
71075: LD_VAR 0 5
71079: PUSH
71080: LD_INT 1
71082: DOUBLE
71083: EQUAL
71084: IFTRUE 71088
71086: GO 71144
71088: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71089: LD_ADDR_VAR 0 9
71093: PUSH
71094: LD_VAR 0 11
71098: PUSH
71099: LD_VAR 0 12
71103: PUSH
71104: LD_VAR 0 13
71108: PUSH
71109: LD_VAR 0 14
71113: PUSH
71114: LD_VAR 0 15
71118: PUSH
71119: LD_VAR 0 16
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: PUSH
71132: LD_VAR 0 4
71136: PUSH
71137: LD_INT 1
71139: PLUS
71140: ARRAY
71141: ST_TO_ADDR
71142: GO 71273
71144: LD_INT 2
71146: DOUBLE
71147: EQUAL
71148: IFTRUE 71152
71150: GO 71208
71152: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71153: LD_ADDR_VAR 0 9
71157: PUSH
71158: LD_VAR 0 17
71162: PUSH
71163: LD_VAR 0 18
71167: PUSH
71168: LD_VAR 0 19
71172: PUSH
71173: LD_VAR 0 20
71177: PUSH
71178: LD_VAR 0 21
71182: PUSH
71183: LD_VAR 0 22
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: PUSH
71196: LD_VAR 0 4
71200: PUSH
71201: LD_INT 1
71203: PLUS
71204: ARRAY
71205: ST_TO_ADDR
71206: GO 71273
71208: LD_INT 3
71210: DOUBLE
71211: EQUAL
71212: IFTRUE 71216
71214: GO 71272
71216: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71217: LD_ADDR_VAR 0 9
71221: PUSH
71222: LD_VAR 0 23
71226: PUSH
71227: LD_VAR 0 24
71231: PUSH
71232: LD_VAR 0 25
71236: PUSH
71237: LD_VAR 0 26
71241: PUSH
71242: LD_VAR 0 27
71246: PUSH
71247: LD_VAR 0 28
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: PUSH
71260: LD_VAR 0 4
71264: PUSH
71265: LD_INT 1
71267: PLUS
71268: ARRAY
71269: ST_TO_ADDR
71270: GO 71273
71272: POP
71273: GO 71828
71275: LD_INT 2
71277: DOUBLE
71278: EQUAL
71279: IFTRUE 71289
71281: LD_INT 3
71283: DOUBLE
71284: EQUAL
71285: IFTRUE 71289
71287: GO 71345
71289: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71290: LD_ADDR_VAR 0 9
71294: PUSH
71295: LD_VAR 0 29
71299: PUSH
71300: LD_VAR 0 30
71304: PUSH
71305: LD_VAR 0 31
71309: PUSH
71310: LD_VAR 0 32
71314: PUSH
71315: LD_VAR 0 33
71319: PUSH
71320: LD_VAR 0 34
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: PUSH
71333: LD_VAR 0 4
71337: PUSH
71338: LD_INT 1
71340: PLUS
71341: ARRAY
71342: ST_TO_ADDR
71343: GO 71828
71345: LD_INT 16
71347: DOUBLE
71348: EQUAL
71349: IFTRUE 71407
71351: LD_INT 17
71353: DOUBLE
71354: EQUAL
71355: IFTRUE 71407
71357: LD_INT 18
71359: DOUBLE
71360: EQUAL
71361: IFTRUE 71407
71363: LD_INT 19
71365: DOUBLE
71366: EQUAL
71367: IFTRUE 71407
71369: LD_INT 22
71371: DOUBLE
71372: EQUAL
71373: IFTRUE 71407
71375: LD_INT 20
71377: DOUBLE
71378: EQUAL
71379: IFTRUE 71407
71381: LD_INT 21
71383: DOUBLE
71384: EQUAL
71385: IFTRUE 71407
71387: LD_INT 23
71389: DOUBLE
71390: EQUAL
71391: IFTRUE 71407
71393: LD_INT 24
71395: DOUBLE
71396: EQUAL
71397: IFTRUE 71407
71399: LD_INT 25
71401: DOUBLE
71402: EQUAL
71403: IFTRUE 71407
71405: GO 71463
71407: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71408: LD_ADDR_VAR 0 9
71412: PUSH
71413: LD_VAR 0 35
71417: PUSH
71418: LD_VAR 0 36
71422: PUSH
71423: LD_VAR 0 37
71427: PUSH
71428: LD_VAR 0 38
71432: PUSH
71433: LD_VAR 0 39
71437: PUSH
71438: LD_VAR 0 40
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: PUSH
71451: LD_VAR 0 4
71455: PUSH
71456: LD_INT 1
71458: PLUS
71459: ARRAY
71460: ST_TO_ADDR
71461: GO 71828
71463: LD_INT 6
71465: DOUBLE
71466: EQUAL
71467: IFTRUE 71519
71469: LD_INT 7
71471: DOUBLE
71472: EQUAL
71473: IFTRUE 71519
71475: LD_INT 8
71477: DOUBLE
71478: EQUAL
71479: IFTRUE 71519
71481: LD_INT 13
71483: DOUBLE
71484: EQUAL
71485: IFTRUE 71519
71487: LD_INT 12
71489: DOUBLE
71490: EQUAL
71491: IFTRUE 71519
71493: LD_INT 15
71495: DOUBLE
71496: EQUAL
71497: IFTRUE 71519
71499: LD_INT 11
71501: DOUBLE
71502: EQUAL
71503: IFTRUE 71519
71505: LD_INT 14
71507: DOUBLE
71508: EQUAL
71509: IFTRUE 71519
71511: LD_INT 10
71513: DOUBLE
71514: EQUAL
71515: IFTRUE 71519
71517: GO 71575
71519: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71520: LD_ADDR_VAR 0 9
71524: PUSH
71525: LD_VAR 0 41
71529: PUSH
71530: LD_VAR 0 42
71534: PUSH
71535: LD_VAR 0 43
71539: PUSH
71540: LD_VAR 0 44
71544: PUSH
71545: LD_VAR 0 45
71549: PUSH
71550: LD_VAR 0 46
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: PUSH
71563: LD_VAR 0 4
71567: PUSH
71568: LD_INT 1
71570: PLUS
71571: ARRAY
71572: ST_TO_ADDR
71573: GO 71828
71575: LD_INT 36
71577: DOUBLE
71578: EQUAL
71579: IFTRUE 71583
71581: GO 71639
71583: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71584: LD_ADDR_VAR 0 9
71588: PUSH
71589: LD_VAR 0 47
71593: PUSH
71594: LD_VAR 0 48
71598: PUSH
71599: LD_VAR 0 49
71603: PUSH
71604: LD_VAR 0 50
71608: PUSH
71609: LD_VAR 0 51
71613: PUSH
71614: LD_VAR 0 52
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: PUSH
71627: LD_VAR 0 4
71631: PUSH
71632: LD_INT 1
71634: PLUS
71635: ARRAY
71636: ST_TO_ADDR
71637: GO 71828
71639: LD_INT 4
71641: DOUBLE
71642: EQUAL
71643: IFTRUE 71665
71645: LD_INT 5
71647: DOUBLE
71648: EQUAL
71649: IFTRUE 71665
71651: LD_INT 34
71653: DOUBLE
71654: EQUAL
71655: IFTRUE 71665
71657: LD_INT 37
71659: DOUBLE
71660: EQUAL
71661: IFTRUE 71665
71663: GO 71721
71665: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71666: LD_ADDR_VAR 0 9
71670: PUSH
71671: LD_VAR 0 53
71675: PUSH
71676: LD_VAR 0 54
71680: PUSH
71681: LD_VAR 0 55
71685: PUSH
71686: LD_VAR 0 56
71690: PUSH
71691: LD_VAR 0 57
71695: PUSH
71696: LD_VAR 0 58
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: PUSH
71709: LD_VAR 0 4
71713: PUSH
71714: LD_INT 1
71716: PLUS
71717: ARRAY
71718: ST_TO_ADDR
71719: GO 71828
71721: LD_INT 31
71723: DOUBLE
71724: EQUAL
71725: IFTRUE 71771
71727: LD_INT 32
71729: DOUBLE
71730: EQUAL
71731: IFTRUE 71771
71733: LD_INT 33
71735: DOUBLE
71736: EQUAL
71737: IFTRUE 71771
71739: LD_INT 27
71741: DOUBLE
71742: EQUAL
71743: IFTRUE 71771
71745: LD_INT 26
71747: DOUBLE
71748: EQUAL
71749: IFTRUE 71771
71751: LD_INT 28
71753: DOUBLE
71754: EQUAL
71755: IFTRUE 71771
71757: LD_INT 29
71759: DOUBLE
71760: EQUAL
71761: IFTRUE 71771
71763: LD_INT 30
71765: DOUBLE
71766: EQUAL
71767: IFTRUE 71771
71769: GO 71827
71771: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71772: LD_ADDR_VAR 0 9
71776: PUSH
71777: LD_VAR 0 59
71781: PUSH
71782: LD_VAR 0 60
71786: PUSH
71787: LD_VAR 0 61
71791: PUSH
71792: LD_VAR 0 62
71796: PUSH
71797: LD_VAR 0 63
71801: PUSH
71802: LD_VAR 0 64
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: LIST
71811: LIST
71812: LIST
71813: LIST
71814: PUSH
71815: LD_VAR 0 4
71819: PUSH
71820: LD_INT 1
71822: PLUS
71823: ARRAY
71824: ST_TO_ADDR
71825: GO 71828
71827: POP
// temp_list2 = [ ] ;
71828: LD_ADDR_VAR 0 10
71832: PUSH
71833: EMPTY
71834: ST_TO_ADDR
// for i in temp_list do
71835: LD_ADDR_VAR 0 8
71839: PUSH
71840: LD_VAR 0 9
71844: PUSH
71845: FOR_IN
71846: IFFALSE 71898
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71848: LD_ADDR_VAR 0 10
71852: PUSH
71853: LD_VAR 0 10
71857: PUSH
71858: LD_VAR 0 8
71862: PUSH
71863: LD_INT 1
71865: ARRAY
71866: PUSH
71867: LD_VAR 0 2
71871: PLUS
71872: PUSH
71873: LD_VAR 0 8
71877: PUSH
71878: LD_INT 2
71880: ARRAY
71881: PUSH
71882: LD_VAR 0 3
71886: PLUS
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: PUSH
71892: EMPTY
71893: LIST
71894: ADD
71895: ST_TO_ADDR
71896: GO 71845
71898: POP
71899: POP
// result = temp_list2 ;
71900: LD_ADDR_VAR 0 7
71904: PUSH
71905: LD_VAR 0 10
71909: ST_TO_ADDR
// end ;
71910: LD_VAR 0 7
71914: RET
// export function EnemyInRange ( unit , dist ) ; begin
71915: LD_INT 0
71917: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71918: LD_ADDR_VAR 0 3
71922: PUSH
71923: LD_VAR 0 1
71927: PPUSH
71928: CALL_OW 255
71932: PPUSH
71933: LD_VAR 0 1
71937: PPUSH
71938: CALL_OW 250
71942: PPUSH
71943: LD_VAR 0 1
71947: PPUSH
71948: CALL_OW 251
71952: PPUSH
71953: LD_VAR 0 2
71957: PPUSH
71958: CALL 45317 0 4
71962: PUSH
71963: LD_INT 4
71965: ARRAY
71966: ST_TO_ADDR
// end ;
71967: LD_VAR 0 3
71971: RET
// export function PlayerSeeMe ( unit ) ; begin
71972: LD_INT 0
71974: PPUSH
// result := See ( your_side , unit ) ;
71975: LD_ADDR_VAR 0 2
71979: PUSH
71980: LD_OWVAR 2
71984: PPUSH
71985: LD_VAR 0 1
71989: PPUSH
71990: CALL_OW 292
71994: ST_TO_ADDR
// end ;
71995: LD_VAR 0 2
71999: RET
// export function ReverseDir ( unit ) ; begin
72000: LD_INT 0
72002: PPUSH
// if not unit then
72003: LD_VAR 0 1
72007: NOT
72008: IFFALSE 72012
// exit ;
72010: GO 72035
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72012: LD_ADDR_VAR 0 2
72016: PUSH
72017: LD_VAR 0 1
72021: PPUSH
72022: CALL_OW 254
72026: PUSH
72027: LD_INT 3
72029: PLUS
72030: PUSH
72031: LD_INT 6
72033: MOD
72034: ST_TO_ADDR
// end ;
72035: LD_VAR 0 2
72039: RET
// export function ReverseArray ( array ) ; var i ; begin
72040: LD_INT 0
72042: PPUSH
72043: PPUSH
// if not array then
72044: LD_VAR 0 1
72048: NOT
72049: IFFALSE 72053
// exit ;
72051: GO 72108
// result := [ ] ;
72053: LD_ADDR_VAR 0 2
72057: PUSH
72058: EMPTY
72059: ST_TO_ADDR
// for i := array downto 1 do
72060: LD_ADDR_VAR 0 3
72064: PUSH
72065: DOUBLE
72066: LD_VAR 0 1
72070: INC
72071: ST_TO_ADDR
72072: LD_INT 1
72074: PUSH
72075: FOR_DOWNTO
72076: IFFALSE 72106
// result := Join ( result , array [ i ] ) ;
72078: LD_ADDR_VAR 0 2
72082: PUSH
72083: LD_VAR 0 2
72087: PPUSH
72088: LD_VAR 0 1
72092: PUSH
72093: LD_VAR 0 3
72097: ARRAY
72098: PPUSH
72099: CALL 76752 0 2
72103: ST_TO_ADDR
72104: GO 72075
72106: POP
72107: POP
// end ;
72108: LD_VAR 0 2
72112: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72113: LD_INT 0
72115: PPUSH
72116: PPUSH
72117: PPUSH
72118: PPUSH
72119: PPUSH
72120: PPUSH
// if not unit or not hexes then
72121: LD_VAR 0 1
72125: NOT
72126: PUSH
72127: LD_VAR 0 2
72131: NOT
72132: OR
72133: IFFALSE 72137
// exit ;
72135: GO 72260
// dist := 9999 ;
72137: LD_ADDR_VAR 0 5
72141: PUSH
72142: LD_INT 9999
72144: ST_TO_ADDR
// for i = 1 to hexes do
72145: LD_ADDR_VAR 0 4
72149: PUSH
72150: DOUBLE
72151: LD_INT 1
72153: DEC
72154: ST_TO_ADDR
72155: LD_VAR 0 2
72159: PUSH
72160: FOR_TO
72161: IFFALSE 72248
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72163: LD_ADDR_VAR 0 6
72167: PUSH
72168: LD_VAR 0 1
72172: PPUSH
72173: LD_VAR 0 2
72177: PUSH
72178: LD_VAR 0 4
72182: ARRAY
72183: PUSH
72184: LD_INT 1
72186: ARRAY
72187: PPUSH
72188: LD_VAR 0 2
72192: PUSH
72193: LD_VAR 0 4
72197: ARRAY
72198: PUSH
72199: LD_INT 2
72201: ARRAY
72202: PPUSH
72203: CALL_OW 297
72207: ST_TO_ADDR
// if tdist < dist then
72208: LD_VAR 0 6
72212: PUSH
72213: LD_VAR 0 5
72217: LESS
72218: IFFALSE 72246
// begin hex := hexes [ i ] ;
72220: LD_ADDR_VAR 0 8
72224: PUSH
72225: LD_VAR 0 2
72229: PUSH
72230: LD_VAR 0 4
72234: ARRAY
72235: ST_TO_ADDR
// dist := tdist ;
72236: LD_ADDR_VAR 0 5
72240: PUSH
72241: LD_VAR 0 6
72245: ST_TO_ADDR
// end ; end ;
72246: GO 72160
72248: POP
72249: POP
// result := hex ;
72250: LD_ADDR_VAR 0 3
72254: PUSH
72255: LD_VAR 0 8
72259: ST_TO_ADDR
// end ;
72260: LD_VAR 0 3
72264: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72265: LD_INT 0
72267: PPUSH
72268: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72269: LD_VAR 0 1
72273: NOT
72274: PUSH
72275: LD_VAR 0 1
72279: PUSH
72280: LD_INT 21
72282: PUSH
72283: LD_INT 2
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: PUSH
72290: LD_INT 23
72292: PUSH
72293: LD_INT 2
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PPUSH
72304: CALL_OW 69
72308: IN
72309: NOT
72310: OR
72311: IFFALSE 72315
// exit ;
72313: GO 72362
// for i = 1 to 3 do
72315: LD_ADDR_VAR 0 3
72319: PUSH
72320: DOUBLE
72321: LD_INT 1
72323: DEC
72324: ST_TO_ADDR
72325: LD_INT 3
72327: PUSH
72328: FOR_TO
72329: IFFALSE 72360
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72331: LD_VAR 0 1
72335: PPUSH
72336: CALL_OW 250
72340: PPUSH
72341: LD_VAR 0 1
72345: PPUSH
72346: CALL_OW 251
72350: PPUSH
72351: LD_INT 1
72353: PPUSH
72354: CALL_OW 453
72358: GO 72328
72360: POP
72361: POP
// end ;
72362: LD_VAR 0 2
72366: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72367: LD_INT 0
72369: PPUSH
72370: PPUSH
72371: PPUSH
72372: PPUSH
72373: PPUSH
72374: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72375: LD_VAR 0 1
72379: NOT
72380: PUSH
72381: LD_VAR 0 2
72385: NOT
72386: OR
72387: PUSH
72388: LD_VAR 0 1
72392: PPUSH
72393: CALL_OW 314
72397: OR
72398: IFFALSE 72402
// exit ;
72400: GO 72869
// if GetLives ( i ) < 250 then
72402: LD_VAR 0 4
72406: PPUSH
72407: CALL_OW 256
72411: PUSH
72412: LD_INT 250
72414: LESS
72415: IFFALSE 72428
// begin ComAutodestruct ( i ) ;
72417: LD_VAR 0 4
72421: PPUSH
72422: CALL 72265 0 1
// exit ;
72426: GO 72869
// end ; x := GetX ( enemy_unit ) ;
72428: LD_ADDR_VAR 0 7
72432: PUSH
72433: LD_VAR 0 2
72437: PPUSH
72438: CALL_OW 250
72442: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72443: LD_ADDR_VAR 0 8
72447: PUSH
72448: LD_VAR 0 2
72452: PPUSH
72453: CALL_OW 251
72457: ST_TO_ADDR
// if not x or not y then
72458: LD_VAR 0 7
72462: NOT
72463: PUSH
72464: LD_VAR 0 8
72468: NOT
72469: OR
72470: IFFALSE 72474
// exit ;
72472: GO 72869
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72474: LD_ADDR_VAR 0 6
72478: PUSH
72479: LD_VAR 0 7
72483: PPUSH
72484: LD_INT 0
72486: PPUSH
72487: LD_INT 4
72489: PPUSH
72490: CALL_OW 272
72494: PUSH
72495: LD_VAR 0 8
72499: PPUSH
72500: LD_INT 0
72502: PPUSH
72503: LD_INT 4
72505: PPUSH
72506: CALL_OW 273
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: PUSH
72515: LD_VAR 0 7
72519: PPUSH
72520: LD_INT 1
72522: PPUSH
72523: LD_INT 4
72525: PPUSH
72526: CALL_OW 272
72530: PUSH
72531: LD_VAR 0 8
72535: PPUSH
72536: LD_INT 1
72538: PPUSH
72539: LD_INT 4
72541: PPUSH
72542: CALL_OW 273
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PUSH
72551: LD_VAR 0 7
72555: PPUSH
72556: LD_INT 2
72558: PPUSH
72559: LD_INT 4
72561: PPUSH
72562: CALL_OW 272
72566: PUSH
72567: LD_VAR 0 8
72571: PPUSH
72572: LD_INT 2
72574: PPUSH
72575: LD_INT 4
72577: PPUSH
72578: CALL_OW 273
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: PUSH
72587: LD_VAR 0 7
72591: PPUSH
72592: LD_INT 3
72594: PPUSH
72595: LD_INT 4
72597: PPUSH
72598: CALL_OW 272
72602: PUSH
72603: LD_VAR 0 8
72607: PPUSH
72608: LD_INT 3
72610: PPUSH
72611: LD_INT 4
72613: PPUSH
72614: CALL_OW 273
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: LD_VAR 0 7
72627: PPUSH
72628: LD_INT 4
72630: PPUSH
72631: LD_INT 4
72633: PPUSH
72634: CALL_OW 272
72638: PUSH
72639: LD_VAR 0 8
72643: PPUSH
72644: LD_INT 4
72646: PPUSH
72647: LD_INT 4
72649: PPUSH
72650: CALL_OW 273
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: PUSH
72659: LD_VAR 0 7
72663: PPUSH
72664: LD_INT 5
72666: PPUSH
72667: LD_INT 4
72669: PPUSH
72670: CALL_OW 272
72674: PUSH
72675: LD_VAR 0 8
72679: PPUSH
72680: LD_INT 5
72682: PPUSH
72683: LD_INT 4
72685: PPUSH
72686: CALL_OW 273
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PUSH
72695: EMPTY
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: ST_TO_ADDR
// for i = tmp downto 1 do
72703: LD_ADDR_VAR 0 4
72707: PUSH
72708: DOUBLE
72709: LD_VAR 0 6
72713: INC
72714: ST_TO_ADDR
72715: LD_INT 1
72717: PUSH
72718: FOR_DOWNTO
72719: IFFALSE 72820
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72721: LD_VAR 0 6
72725: PUSH
72726: LD_VAR 0 4
72730: ARRAY
72731: PUSH
72732: LD_INT 1
72734: ARRAY
72735: PPUSH
72736: LD_VAR 0 6
72740: PUSH
72741: LD_VAR 0 4
72745: ARRAY
72746: PUSH
72747: LD_INT 2
72749: ARRAY
72750: PPUSH
72751: CALL_OW 488
72755: NOT
72756: PUSH
72757: LD_VAR 0 6
72761: PUSH
72762: LD_VAR 0 4
72766: ARRAY
72767: PUSH
72768: LD_INT 1
72770: ARRAY
72771: PPUSH
72772: LD_VAR 0 6
72776: PUSH
72777: LD_VAR 0 4
72781: ARRAY
72782: PUSH
72783: LD_INT 2
72785: ARRAY
72786: PPUSH
72787: CALL_OW 428
72791: PUSH
72792: LD_INT 0
72794: NONEQUAL
72795: OR
72796: IFFALSE 72818
// tmp := Delete ( tmp , i ) ;
72798: LD_ADDR_VAR 0 6
72802: PUSH
72803: LD_VAR 0 6
72807: PPUSH
72808: LD_VAR 0 4
72812: PPUSH
72813: CALL_OW 3
72817: ST_TO_ADDR
72818: GO 72718
72820: POP
72821: POP
// j := GetClosestHex ( unit , tmp ) ;
72822: LD_ADDR_VAR 0 5
72826: PUSH
72827: LD_VAR 0 1
72831: PPUSH
72832: LD_VAR 0 6
72836: PPUSH
72837: CALL 72113 0 2
72841: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72842: LD_VAR 0 1
72846: PPUSH
72847: LD_VAR 0 5
72851: PUSH
72852: LD_INT 1
72854: ARRAY
72855: PPUSH
72856: LD_VAR 0 5
72860: PUSH
72861: LD_INT 2
72863: ARRAY
72864: PPUSH
72865: CALL_OW 111
// end ;
72869: LD_VAR 0 3
72873: RET
// export function PrepareApemanSoldier ( ) ; begin
72874: LD_INT 0
72876: PPUSH
// uc_nation := 0 ;
72877: LD_ADDR_OWVAR 21
72881: PUSH
72882: LD_INT 0
72884: ST_TO_ADDR
// hc_sex := sex_male ;
72885: LD_ADDR_OWVAR 27
72889: PUSH
72890: LD_INT 1
72892: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72893: LD_ADDR_OWVAR 28
72897: PUSH
72898: LD_INT 15
72900: ST_TO_ADDR
// hc_gallery :=  ;
72901: LD_ADDR_OWVAR 33
72905: PUSH
72906: LD_STRING 
72908: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72909: LD_ADDR_OWVAR 31
72913: PUSH
72914: LD_INT 0
72916: PPUSH
72917: LD_INT 3
72919: PPUSH
72920: CALL_OW 12
72924: PUSH
72925: LD_INT 0
72927: PPUSH
72928: LD_INT 3
72930: PPUSH
72931: CALL_OW 12
72935: PUSH
72936: LD_INT 0
72938: PUSH
72939: LD_INT 0
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: LIST
72946: LIST
72947: ST_TO_ADDR
// end ;
72948: LD_VAR 0 1
72952: RET
// export function PrepareApemanEngineer ( ) ; begin
72953: LD_INT 0
72955: PPUSH
// uc_nation := 0 ;
72956: LD_ADDR_OWVAR 21
72960: PUSH
72961: LD_INT 0
72963: ST_TO_ADDR
// hc_sex := sex_male ;
72964: LD_ADDR_OWVAR 27
72968: PUSH
72969: LD_INT 1
72971: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72972: LD_ADDR_OWVAR 28
72976: PUSH
72977: LD_INT 16
72979: ST_TO_ADDR
// hc_gallery :=  ;
72980: LD_ADDR_OWVAR 33
72984: PUSH
72985: LD_STRING 
72987: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72988: LD_ADDR_OWVAR 31
72992: PUSH
72993: LD_INT 0
72995: PPUSH
72996: LD_INT 3
72998: PPUSH
72999: CALL_OW 12
73003: PUSH
73004: LD_INT 0
73006: PPUSH
73007: LD_INT 3
73009: PPUSH
73010: CALL_OW 12
73014: PUSH
73015: LD_INT 0
73017: PUSH
73018: LD_INT 0
73020: PUSH
73021: EMPTY
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: ST_TO_ADDR
// end ;
73027: LD_VAR 0 1
73031: RET
// export function PrepareApeman ( agressivity ) ; begin
73032: LD_INT 0
73034: PPUSH
// uc_side := 0 ;
73035: LD_ADDR_OWVAR 20
73039: PUSH
73040: LD_INT 0
73042: ST_TO_ADDR
// uc_nation := 0 ;
73043: LD_ADDR_OWVAR 21
73047: PUSH
73048: LD_INT 0
73050: ST_TO_ADDR
// hc_sex := sex_male ;
73051: LD_ADDR_OWVAR 27
73055: PUSH
73056: LD_INT 1
73058: ST_TO_ADDR
// hc_class := class_apeman ;
73059: LD_ADDR_OWVAR 28
73063: PUSH
73064: LD_INT 12
73066: ST_TO_ADDR
// hc_gallery :=  ;
73067: LD_ADDR_OWVAR 33
73071: PUSH
73072: LD_STRING 
73074: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73075: LD_ADDR_OWVAR 35
73079: PUSH
73080: LD_VAR 0 1
73084: NEG
73085: PPUSH
73086: LD_VAR 0 1
73090: PPUSH
73091: CALL_OW 12
73095: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73096: LD_ADDR_OWVAR 31
73100: PUSH
73101: LD_INT 0
73103: PPUSH
73104: LD_INT 3
73106: PPUSH
73107: CALL_OW 12
73111: PUSH
73112: LD_INT 0
73114: PPUSH
73115: LD_INT 3
73117: PPUSH
73118: CALL_OW 12
73122: PUSH
73123: LD_INT 0
73125: PUSH
73126: LD_INT 0
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: LIST
73133: LIST
73134: ST_TO_ADDR
// end ;
73135: LD_VAR 0 2
73139: RET
// export function PrepareTiger ( agressivity ) ; begin
73140: LD_INT 0
73142: PPUSH
// uc_side := 0 ;
73143: LD_ADDR_OWVAR 20
73147: PUSH
73148: LD_INT 0
73150: ST_TO_ADDR
// uc_nation := 0 ;
73151: LD_ADDR_OWVAR 21
73155: PUSH
73156: LD_INT 0
73158: ST_TO_ADDR
// hc_class := class_tiger ;
73159: LD_ADDR_OWVAR 28
73163: PUSH
73164: LD_INT 14
73166: ST_TO_ADDR
// hc_gallery :=  ;
73167: LD_ADDR_OWVAR 33
73171: PUSH
73172: LD_STRING 
73174: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73175: LD_ADDR_OWVAR 35
73179: PUSH
73180: LD_VAR 0 1
73184: NEG
73185: PPUSH
73186: LD_VAR 0 1
73190: PPUSH
73191: CALL_OW 12
73195: ST_TO_ADDR
// end ;
73196: LD_VAR 0 2
73200: RET
// export function PrepareEnchidna ( ) ; begin
73201: LD_INT 0
73203: PPUSH
// uc_side := 0 ;
73204: LD_ADDR_OWVAR 20
73208: PUSH
73209: LD_INT 0
73211: ST_TO_ADDR
// uc_nation := 0 ;
73212: LD_ADDR_OWVAR 21
73216: PUSH
73217: LD_INT 0
73219: ST_TO_ADDR
// hc_class := class_baggie ;
73220: LD_ADDR_OWVAR 28
73224: PUSH
73225: LD_INT 13
73227: ST_TO_ADDR
// hc_gallery :=  ;
73228: LD_ADDR_OWVAR 33
73232: PUSH
73233: LD_STRING 
73235: ST_TO_ADDR
// end ;
73236: LD_VAR 0 1
73240: RET
// export function PrepareFrog ( ) ; begin
73241: LD_INT 0
73243: PPUSH
// uc_side := 0 ;
73244: LD_ADDR_OWVAR 20
73248: PUSH
73249: LD_INT 0
73251: ST_TO_ADDR
// uc_nation := 0 ;
73252: LD_ADDR_OWVAR 21
73256: PUSH
73257: LD_INT 0
73259: ST_TO_ADDR
// hc_class := class_frog ;
73260: LD_ADDR_OWVAR 28
73264: PUSH
73265: LD_INT 19
73267: ST_TO_ADDR
// hc_gallery :=  ;
73268: LD_ADDR_OWVAR 33
73272: PUSH
73273: LD_STRING 
73275: ST_TO_ADDR
// end ;
73276: LD_VAR 0 1
73280: RET
// export function PrepareFish ( ) ; begin
73281: LD_INT 0
73283: PPUSH
// uc_side := 0 ;
73284: LD_ADDR_OWVAR 20
73288: PUSH
73289: LD_INT 0
73291: ST_TO_ADDR
// uc_nation := 0 ;
73292: LD_ADDR_OWVAR 21
73296: PUSH
73297: LD_INT 0
73299: ST_TO_ADDR
// hc_class := class_fish ;
73300: LD_ADDR_OWVAR 28
73304: PUSH
73305: LD_INT 20
73307: ST_TO_ADDR
// hc_gallery :=  ;
73308: LD_ADDR_OWVAR 33
73312: PUSH
73313: LD_STRING 
73315: ST_TO_ADDR
// end ;
73316: LD_VAR 0 1
73320: RET
// export function PrepareBird ( ) ; begin
73321: LD_INT 0
73323: PPUSH
// uc_side := 0 ;
73324: LD_ADDR_OWVAR 20
73328: PUSH
73329: LD_INT 0
73331: ST_TO_ADDR
// uc_nation := 0 ;
73332: LD_ADDR_OWVAR 21
73336: PUSH
73337: LD_INT 0
73339: ST_TO_ADDR
// hc_class := class_phororhacos ;
73340: LD_ADDR_OWVAR 28
73344: PUSH
73345: LD_INT 18
73347: ST_TO_ADDR
// hc_gallery :=  ;
73348: LD_ADDR_OWVAR 33
73352: PUSH
73353: LD_STRING 
73355: ST_TO_ADDR
// end ;
73356: LD_VAR 0 1
73360: RET
// export function PrepareHorse ( ) ; begin
73361: LD_INT 0
73363: PPUSH
// uc_side := 0 ;
73364: LD_ADDR_OWVAR 20
73368: PUSH
73369: LD_INT 0
73371: ST_TO_ADDR
// uc_nation := 0 ;
73372: LD_ADDR_OWVAR 21
73376: PUSH
73377: LD_INT 0
73379: ST_TO_ADDR
// hc_class := class_horse ;
73380: LD_ADDR_OWVAR 28
73384: PUSH
73385: LD_INT 21
73387: ST_TO_ADDR
// hc_gallery :=  ;
73388: LD_ADDR_OWVAR 33
73392: PUSH
73393: LD_STRING 
73395: ST_TO_ADDR
// end ;
73396: LD_VAR 0 1
73400: RET
// export function PrepareMastodont ( ) ; begin
73401: LD_INT 0
73403: PPUSH
// uc_side := 0 ;
73404: LD_ADDR_OWVAR 20
73408: PUSH
73409: LD_INT 0
73411: ST_TO_ADDR
// uc_nation := 0 ;
73412: LD_ADDR_OWVAR 21
73416: PUSH
73417: LD_INT 0
73419: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73420: LD_ADDR_OWVAR 37
73424: PUSH
73425: LD_INT 31
73427: ST_TO_ADDR
// vc_control := control_rider ;
73428: LD_ADDR_OWVAR 38
73432: PUSH
73433: LD_INT 4
73435: ST_TO_ADDR
// end ;
73436: LD_VAR 0 1
73440: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73441: LD_INT 0
73443: PPUSH
73444: PPUSH
73445: PPUSH
// uc_side = 0 ;
73446: LD_ADDR_OWVAR 20
73450: PUSH
73451: LD_INT 0
73453: ST_TO_ADDR
// uc_nation = 0 ;
73454: LD_ADDR_OWVAR 21
73458: PUSH
73459: LD_INT 0
73461: ST_TO_ADDR
// InitHc_All ( ) ;
73462: CALL_OW 584
// InitVc ;
73466: CALL_OW 20
// if mastodonts then
73470: LD_VAR 0 6
73474: IFFALSE 73541
// for i = 1 to mastodonts do
73476: LD_ADDR_VAR 0 11
73480: PUSH
73481: DOUBLE
73482: LD_INT 1
73484: DEC
73485: ST_TO_ADDR
73486: LD_VAR 0 6
73490: PUSH
73491: FOR_TO
73492: IFFALSE 73539
// begin vc_chassis := 31 ;
73494: LD_ADDR_OWVAR 37
73498: PUSH
73499: LD_INT 31
73501: ST_TO_ADDR
// vc_control := control_rider ;
73502: LD_ADDR_OWVAR 38
73506: PUSH
73507: LD_INT 4
73509: ST_TO_ADDR
// animal := CreateVehicle ;
73510: LD_ADDR_VAR 0 12
73514: PUSH
73515: CALL_OW 45
73519: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73520: LD_VAR 0 12
73524: PPUSH
73525: LD_VAR 0 8
73529: PPUSH
73530: LD_INT 0
73532: PPUSH
73533: CALL 75669 0 3
// end ;
73537: GO 73491
73539: POP
73540: POP
// if horses then
73541: LD_VAR 0 5
73545: IFFALSE 73612
// for i = 1 to horses do
73547: LD_ADDR_VAR 0 11
73551: PUSH
73552: DOUBLE
73553: LD_INT 1
73555: DEC
73556: ST_TO_ADDR
73557: LD_VAR 0 5
73561: PUSH
73562: FOR_TO
73563: IFFALSE 73610
// begin hc_class := 21 ;
73565: LD_ADDR_OWVAR 28
73569: PUSH
73570: LD_INT 21
73572: ST_TO_ADDR
// hc_gallery :=  ;
73573: LD_ADDR_OWVAR 33
73577: PUSH
73578: LD_STRING 
73580: ST_TO_ADDR
// animal := CreateHuman ;
73581: LD_ADDR_VAR 0 12
73585: PUSH
73586: CALL_OW 44
73590: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73591: LD_VAR 0 12
73595: PPUSH
73596: LD_VAR 0 8
73600: PPUSH
73601: LD_INT 0
73603: PPUSH
73604: CALL 75669 0 3
// end ;
73608: GO 73562
73610: POP
73611: POP
// if birds then
73612: LD_VAR 0 1
73616: IFFALSE 73683
// for i = 1 to birds do
73618: LD_ADDR_VAR 0 11
73622: PUSH
73623: DOUBLE
73624: LD_INT 1
73626: DEC
73627: ST_TO_ADDR
73628: LD_VAR 0 1
73632: PUSH
73633: FOR_TO
73634: IFFALSE 73681
// begin hc_class = 18 ;
73636: LD_ADDR_OWVAR 28
73640: PUSH
73641: LD_INT 18
73643: ST_TO_ADDR
// hc_gallery =  ;
73644: LD_ADDR_OWVAR 33
73648: PUSH
73649: LD_STRING 
73651: ST_TO_ADDR
// animal := CreateHuman ;
73652: LD_ADDR_VAR 0 12
73656: PUSH
73657: CALL_OW 44
73661: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73662: LD_VAR 0 12
73666: PPUSH
73667: LD_VAR 0 8
73671: PPUSH
73672: LD_INT 0
73674: PPUSH
73675: CALL 75669 0 3
// end ;
73679: GO 73633
73681: POP
73682: POP
// if tigers then
73683: LD_VAR 0 2
73687: IFFALSE 73771
// for i = 1 to tigers do
73689: LD_ADDR_VAR 0 11
73693: PUSH
73694: DOUBLE
73695: LD_INT 1
73697: DEC
73698: ST_TO_ADDR
73699: LD_VAR 0 2
73703: PUSH
73704: FOR_TO
73705: IFFALSE 73769
// begin hc_class = class_tiger ;
73707: LD_ADDR_OWVAR 28
73711: PUSH
73712: LD_INT 14
73714: ST_TO_ADDR
// hc_gallery =  ;
73715: LD_ADDR_OWVAR 33
73719: PUSH
73720: LD_STRING 
73722: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73723: LD_ADDR_OWVAR 35
73727: PUSH
73728: LD_INT 7
73730: NEG
73731: PPUSH
73732: LD_INT 7
73734: PPUSH
73735: CALL_OW 12
73739: ST_TO_ADDR
// animal := CreateHuman ;
73740: LD_ADDR_VAR 0 12
73744: PUSH
73745: CALL_OW 44
73749: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73750: LD_VAR 0 12
73754: PPUSH
73755: LD_VAR 0 8
73759: PPUSH
73760: LD_INT 0
73762: PPUSH
73763: CALL 75669 0 3
// end ;
73767: GO 73704
73769: POP
73770: POP
// if apemans then
73771: LD_VAR 0 3
73775: IFFALSE 73898
// for i = 1 to apemans do
73777: LD_ADDR_VAR 0 11
73781: PUSH
73782: DOUBLE
73783: LD_INT 1
73785: DEC
73786: ST_TO_ADDR
73787: LD_VAR 0 3
73791: PUSH
73792: FOR_TO
73793: IFFALSE 73896
// begin hc_class = class_apeman ;
73795: LD_ADDR_OWVAR 28
73799: PUSH
73800: LD_INT 12
73802: ST_TO_ADDR
// hc_gallery =  ;
73803: LD_ADDR_OWVAR 33
73807: PUSH
73808: LD_STRING 
73810: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73811: LD_ADDR_OWVAR 35
73815: PUSH
73816: LD_INT 2
73818: NEG
73819: PPUSH
73820: LD_INT 2
73822: PPUSH
73823: CALL_OW 12
73827: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73828: LD_ADDR_OWVAR 31
73832: PUSH
73833: LD_INT 1
73835: PPUSH
73836: LD_INT 3
73838: PPUSH
73839: CALL_OW 12
73843: PUSH
73844: LD_INT 1
73846: PPUSH
73847: LD_INT 3
73849: PPUSH
73850: CALL_OW 12
73854: PUSH
73855: LD_INT 0
73857: PUSH
73858: LD_INT 0
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: LIST
73865: LIST
73866: ST_TO_ADDR
// animal := CreateHuman ;
73867: LD_ADDR_VAR 0 12
73871: PUSH
73872: CALL_OW 44
73876: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73877: LD_VAR 0 12
73881: PPUSH
73882: LD_VAR 0 8
73886: PPUSH
73887: LD_INT 0
73889: PPUSH
73890: CALL 75669 0 3
// end ;
73894: GO 73792
73896: POP
73897: POP
// if enchidnas then
73898: LD_VAR 0 4
73902: IFFALSE 73969
// for i = 1 to enchidnas do
73904: LD_ADDR_VAR 0 11
73908: PUSH
73909: DOUBLE
73910: LD_INT 1
73912: DEC
73913: ST_TO_ADDR
73914: LD_VAR 0 4
73918: PUSH
73919: FOR_TO
73920: IFFALSE 73967
// begin hc_class = 13 ;
73922: LD_ADDR_OWVAR 28
73926: PUSH
73927: LD_INT 13
73929: ST_TO_ADDR
// hc_gallery =  ;
73930: LD_ADDR_OWVAR 33
73934: PUSH
73935: LD_STRING 
73937: ST_TO_ADDR
// animal := CreateHuman ;
73938: LD_ADDR_VAR 0 12
73942: PUSH
73943: CALL_OW 44
73947: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73948: LD_VAR 0 12
73952: PPUSH
73953: LD_VAR 0 8
73957: PPUSH
73958: LD_INT 0
73960: PPUSH
73961: CALL 75669 0 3
// end ;
73965: GO 73919
73967: POP
73968: POP
// if fishes then
73969: LD_VAR 0 7
73973: IFFALSE 74040
// for i = 1 to fishes do
73975: LD_ADDR_VAR 0 11
73979: PUSH
73980: DOUBLE
73981: LD_INT 1
73983: DEC
73984: ST_TO_ADDR
73985: LD_VAR 0 7
73989: PUSH
73990: FOR_TO
73991: IFFALSE 74038
// begin hc_class = 20 ;
73993: LD_ADDR_OWVAR 28
73997: PUSH
73998: LD_INT 20
74000: ST_TO_ADDR
// hc_gallery =  ;
74001: LD_ADDR_OWVAR 33
74005: PUSH
74006: LD_STRING 
74008: ST_TO_ADDR
// animal := CreateHuman ;
74009: LD_ADDR_VAR 0 12
74013: PUSH
74014: CALL_OW 44
74018: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74019: LD_VAR 0 12
74023: PPUSH
74024: LD_VAR 0 9
74028: PPUSH
74029: LD_INT 0
74031: PPUSH
74032: CALL 75669 0 3
// end ;
74036: GO 73990
74038: POP
74039: POP
// end ;
74040: LD_VAR 0 10
74044: RET
// export function WantHeal ( sci , unit ) ; begin
74045: LD_INT 0
74047: PPUSH
// if GetTaskList ( sci ) > 0 then
74048: LD_VAR 0 1
74052: PPUSH
74053: CALL_OW 437
74057: PUSH
74058: LD_INT 0
74060: GREATER
74061: IFFALSE 74131
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74063: LD_VAR 0 1
74067: PPUSH
74068: CALL_OW 437
74072: PUSH
74073: LD_INT 1
74075: ARRAY
74076: PUSH
74077: LD_INT 1
74079: ARRAY
74080: PUSH
74081: LD_STRING l
74083: EQUAL
74084: PUSH
74085: LD_VAR 0 1
74089: PPUSH
74090: CALL_OW 437
74094: PUSH
74095: LD_INT 1
74097: ARRAY
74098: PUSH
74099: LD_INT 4
74101: ARRAY
74102: PUSH
74103: LD_VAR 0 2
74107: EQUAL
74108: AND
74109: IFFALSE 74121
// result := true else
74111: LD_ADDR_VAR 0 3
74115: PUSH
74116: LD_INT 1
74118: ST_TO_ADDR
74119: GO 74129
// result := false ;
74121: LD_ADDR_VAR 0 3
74125: PUSH
74126: LD_INT 0
74128: ST_TO_ADDR
// end else
74129: GO 74139
// result := false ;
74131: LD_ADDR_VAR 0 3
74135: PUSH
74136: LD_INT 0
74138: ST_TO_ADDR
// end ;
74139: LD_VAR 0 3
74143: RET
// export function HealTarget ( sci ) ; begin
74144: LD_INT 0
74146: PPUSH
// if not sci then
74147: LD_VAR 0 1
74151: NOT
74152: IFFALSE 74156
// exit ;
74154: GO 74221
// result := 0 ;
74156: LD_ADDR_VAR 0 2
74160: PUSH
74161: LD_INT 0
74163: ST_TO_ADDR
// if GetTaskList ( sci ) then
74164: LD_VAR 0 1
74168: PPUSH
74169: CALL_OW 437
74173: IFFALSE 74221
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74175: LD_VAR 0 1
74179: PPUSH
74180: CALL_OW 437
74184: PUSH
74185: LD_INT 1
74187: ARRAY
74188: PUSH
74189: LD_INT 1
74191: ARRAY
74192: PUSH
74193: LD_STRING l
74195: EQUAL
74196: IFFALSE 74221
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74198: LD_ADDR_VAR 0 2
74202: PUSH
74203: LD_VAR 0 1
74207: PPUSH
74208: CALL_OW 437
74212: PUSH
74213: LD_INT 1
74215: ARRAY
74216: PUSH
74217: LD_INT 4
74219: ARRAY
74220: ST_TO_ADDR
// end ;
74221: LD_VAR 0 2
74225: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74226: LD_INT 0
74228: PPUSH
74229: PPUSH
74230: PPUSH
74231: PPUSH
// if not base_units then
74232: LD_VAR 0 1
74236: NOT
74237: IFFALSE 74241
// exit ;
74239: GO 74328
// result := false ;
74241: LD_ADDR_VAR 0 2
74245: PUSH
74246: LD_INT 0
74248: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74249: LD_ADDR_VAR 0 5
74253: PUSH
74254: LD_VAR 0 1
74258: PPUSH
74259: LD_INT 21
74261: PUSH
74262: LD_INT 3
74264: PUSH
74265: EMPTY
74266: LIST
74267: LIST
74268: PPUSH
74269: CALL_OW 72
74273: ST_TO_ADDR
// if not tmp then
74274: LD_VAR 0 5
74278: NOT
74279: IFFALSE 74283
// exit ;
74281: GO 74328
// for i in tmp do
74283: LD_ADDR_VAR 0 3
74287: PUSH
74288: LD_VAR 0 5
74292: PUSH
74293: FOR_IN
74294: IFFALSE 74326
// begin result := EnemyInRange ( i , 22 ) ;
74296: LD_ADDR_VAR 0 2
74300: PUSH
74301: LD_VAR 0 3
74305: PPUSH
74306: LD_INT 22
74308: PPUSH
74309: CALL 71915 0 2
74313: ST_TO_ADDR
// if result then
74314: LD_VAR 0 2
74318: IFFALSE 74324
// exit ;
74320: POP
74321: POP
74322: GO 74328
// end ;
74324: GO 74293
74326: POP
74327: POP
// end ;
74328: LD_VAR 0 2
74332: RET
// export function FilterByTag ( units , tag ) ; begin
74333: LD_INT 0
74335: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74336: LD_ADDR_VAR 0 3
74340: PUSH
74341: LD_VAR 0 1
74345: PPUSH
74346: LD_INT 120
74348: PUSH
74349: LD_VAR 0 2
74353: PUSH
74354: EMPTY
74355: LIST
74356: LIST
74357: PPUSH
74358: CALL_OW 72
74362: ST_TO_ADDR
// end ;
74363: LD_VAR 0 3
74367: RET
// export function IsDriver ( un ) ; begin
74368: LD_INT 0
74370: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74371: LD_ADDR_VAR 0 2
74375: PUSH
74376: LD_VAR 0 1
74380: PUSH
74381: LD_INT 55
74383: PUSH
74384: EMPTY
74385: LIST
74386: PPUSH
74387: CALL_OW 69
74391: IN
74392: ST_TO_ADDR
// end ;
74393: LD_VAR 0 2
74397: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74398: LD_INT 0
74400: PPUSH
74401: PPUSH
// list := [ ] ;
74402: LD_ADDR_VAR 0 5
74406: PUSH
74407: EMPTY
74408: ST_TO_ADDR
// case d of 0 :
74409: LD_VAR 0 3
74413: PUSH
74414: LD_INT 0
74416: DOUBLE
74417: EQUAL
74418: IFTRUE 74422
74420: GO 74555
74422: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74423: LD_ADDR_VAR 0 5
74427: PUSH
74428: LD_VAR 0 1
74432: PUSH
74433: LD_INT 4
74435: MINUS
74436: PUSH
74437: LD_VAR 0 2
74441: PUSH
74442: LD_INT 4
74444: MINUS
74445: PUSH
74446: LD_INT 2
74448: PUSH
74449: EMPTY
74450: LIST
74451: LIST
74452: LIST
74453: PUSH
74454: LD_VAR 0 1
74458: PUSH
74459: LD_INT 3
74461: MINUS
74462: PUSH
74463: LD_VAR 0 2
74467: PUSH
74468: LD_INT 1
74470: PUSH
74471: EMPTY
74472: LIST
74473: LIST
74474: LIST
74475: PUSH
74476: LD_VAR 0 1
74480: PUSH
74481: LD_INT 4
74483: PLUS
74484: PUSH
74485: LD_VAR 0 2
74489: PUSH
74490: LD_INT 4
74492: PUSH
74493: EMPTY
74494: LIST
74495: LIST
74496: LIST
74497: PUSH
74498: LD_VAR 0 1
74502: PUSH
74503: LD_INT 3
74505: PLUS
74506: PUSH
74507: LD_VAR 0 2
74511: PUSH
74512: LD_INT 3
74514: PLUS
74515: PUSH
74516: LD_INT 5
74518: PUSH
74519: EMPTY
74520: LIST
74521: LIST
74522: LIST
74523: PUSH
74524: LD_VAR 0 1
74528: PUSH
74529: LD_VAR 0 2
74533: PUSH
74534: LD_INT 4
74536: PLUS
74537: PUSH
74538: LD_INT 0
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: LIST
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: LIST
74550: LIST
74551: LIST
74552: ST_TO_ADDR
// end ; 1 :
74553: GO 75253
74555: LD_INT 1
74557: DOUBLE
74558: EQUAL
74559: IFTRUE 74563
74561: GO 74696
74563: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74564: LD_ADDR_VAR 0 5
74568: PUSH
74569: LD_VAR 0 1
74573: PUSH
74574: LD_VAR 0 2
74578: PUSH
74579: LD_INT 4
74581: MINUS
74582: PUSH
74583: LD_INT 3
74585: PUSH
74586: EMPTY
74587: LIST
74588: LIST
74589: LIST
74590: PUSH
74591: LD_VAR 0 1
74595: PUSH
74596: LD_INT 3
74598: MINUS
74599: PUSH
74600: LD_VAR 0 2
74604: PUSH
74605: LD_INT 3
74607: MINUS
74608: PUSH
74609: LD_INT 2
74611: PUSH
74612: EMPTY
74613: LIST
74614: LIST
74615: LIST
74616: PUSH
74617: LD_VAR 0 1
74621: PUSH
74622: LD_INT 4
74624: MINUS
74625: PUSH
74626: LD_VAR 0 2
74630: PUSH
74631: LD_INT 1
74633: PUSH
74634: EMPTY
74635: LIST
74636: LIST
74637: LIST
74638: PUSH
74639: LD_VAR 0 1
74643: PUSH
74644: LD_VAR 0 2
74648: PUSH
74649: LD_INT 3
74651: PLUS
74652: PUSH
74653: LD_INT 0
74655: PUSH
74656: EMPTY
74657: LIST
74658: LIST
74659: LIST
74660: PUSH
74661: LD_VAR 0 1
74665: PUSH
74666: LD_INT 4
74668: PLUS
74669: PUSH
74670: LD_VAR 0 2
74674: PUSH
74675: LD_INT 4
74677: PLUS
74678: PUSH
74679: LD_INT 5
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: LIST
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: LIST
74691: LIST
74692: LIST
74693: ST_TO_ADDR
// end ; 2 :
74694: GO 75253
74696: LD_INT 2
74698: DOUBLE
74699: EQUAL
74700: IFTRUE 74704
74702: GO 74833
74704: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74705: LD_ADDR_VAR 0 5
74709: PUSH
74710: LD_VAR 0 1
74714: PUSH
74715: LD_VAR 0 2
74719: PUSH
74720: LD_INT 3
74722: MINUS
74723: PUSH
74724: LD_INT 3
74726: PUSH
74727: EMPTY
74728: LIST
74729: LIST
74730: LIST
74731: PUSH
74732: LD_VAR 0 1
74736: PUSH
74737: LD_INT 4
74739: PLUS
74740: PUSH
74741: LD_VAR 0 2
74745: PUSH
74746: LD_INT 4
74748: PUSH
74749: EMPTY
74750: LIST
74751: LIST
74752: LIST
74753: PUSH
74754: LD_VAR 0 1
74758: PUSH
74759: LD_VAR 0 2
74763: PUSH
74764: LD_INT 4
74766: PLUS
74767: PUSH
74768: LD_INT 0
74770: PUSH
74771: EMPTY
74772: LIST
74773: LIST
74774: LIST
74775: PUSH
74776: LD_VAR 0 1
74780: PUSH
74781: LD_INT 3
74783: MINUS
74784: PUSH
74785: LD_VAR 0 2
74789: PUSH
74790: LD_INT 1
74792: PUSH
74793: EMPTY
74794: LIST
74795: LIST
74796: LIST
74797: PUSH
74798: LD_VAR 0 1
74802: PUSH
74803: LD_INT 4
74805: MINUS
74806: PUSH
74807: LD_VAR 0 2
74811: PUSH
74812: LD_INT 4
74814: MINUS
74815: PUSH
74816: LD_INT 2
74818: PUSH
74819: EMPTY
74820: LIST
74821: LIST
74822: LIST
74823: PUSH
74824: EMPTY
74825: LIST
74826: LIST
74827: LIST
74828: LIST
74829: LIST
74830: ST_TO_ADDR
// end ; 3 :
74831: GO 75253
74833: LD_INT 3
74835: DOUBLE
74836: EQUAL
74837: IFTRUE 74841
74839: GO 74974
74841: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74842: LD_ADDR_VAR 0 5
74846: PUSH
74847: LD_VAR 0 1
74851: PUSH
74852: LD_INT 3
74854: PLUS
74855: PUSH
74856: LD_VAR 0 2
74860: PUSH
74861: LD_INT 4
74863: PUSH
74864: EMPTY
74865: LIST
74866: LIST
74867: LIST
74868: PUSH
74869: LD_VAR 0 1
74873: PUSH
74874: LD_INT 4
74876: PLUS
74877: PUSH
74878: LD_VAR 0 2
74882: PUSH
74883: LD_INT 4
74885: PLUS
74886: PUSH
74887: LD_INT 5
74889: PUSH
74890: EMPTY
74891: LIST
74892: LIST
74893: LIST
74894: PUSH
74895: LD_VAR 0 1
74899: PUSH
74900: LD_INT 4
74902: MINUS
74903: PUSH
74904: LD_VAR 0 2
74908: PUSH
74909: LD_INT 1
74911: PUSH
74912: EMPTY
74913: LIST
74914: LIST
74915: LIST
74916: PUSH
74917: LD_VAR 0 1
74921: PUSH
74922: LD_VAR 0 2
74926: PUSH
74927: LD_INT 4
74929: MINUS
74930: PUSH
74931: LD_INT 3
74933: PUSH
74934: EMPTY
74935: LIST
74936: LIST
74937: LIST
74938: PUSH
74939: LD_VAR 0 1
74943: PUSH
74944: LD_INT 3
74946: MINUS
74947: PUSH
74948: LD_VAR 0 2
74952: PUSH
74953: LD_INT 3
74955: MINUS
74956: PUSH
74957: LD_INT 2
74959: PUSH
74960: EMPTY
74961: LIST
74962: LIST
74963: LIST
74964: PUSH
74965: EMPTY
74966: LIST
74967: LIST
74968: LIST
74969: LIST
74970: LIST
74971: ST_TO_ADDR
// end ; 4 :
74972: GO 75253
74974: LD_INT 4
74976: DOUBLE
74977: EQUAL
74978: IFTRUE 74982
74980: GO 75115
74982: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74983: LD_ADDR_VAR 0 5
74987: PUSH
74988: LD_VAR 0 1
74992: PUSH
74993: LD_VAR 0 2
74997: PUSH
74998: LD_INT 4
75000: PLUS
75001: PUSH
75002: LD_INT 0
75004: PUSH
75005: EMPTY
75006: LIST
75007: LIST
75008: LIST
75009: PUSH
75010: LD_VAR 0 1
75014: PUSH
75015: LD_INT 3
75017: PLUS
75018: PUSH
75019: LD_VAR 0 2
75023: PUSH
75024: LD_INT 3
75026: PLUS
75027: PUSH
75028: LD_INT 5
75030: PUSH
75031: EMPTY
75032: LIST
75033: LIST
75034: LIST
75035: PUSH
75036: LD_VAR 0 1
75040: PUSH
75041: LD_INT 4
75043: PLUS
75044: PUSH
75045: LD_VAR 0 2
75049: PUSH
75050: LD_INT 4
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: LIST
75057: PUSH
75058: LD_VAR 0 1
75062: PUSH
75063: LD_VAR 0 2
75067: PUSH
75068: LD_INT 3
75070: MINUS
75071: PUSH
75072: LD_INT 3
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: LIST
75079: PUSH
75080: LD_VAR 0 1
75084: PUSH
75085: LD_INT 4
75087: MINUS
75088: PUSH
75089: LD_VAR 0 2
75093: PUSH
75094: LD_INT 4
75096: MINUS
75097: PUSH
75098: LD_INT 2
75100: PUSH
75101: EMPTY
75102: LIST
75103: LIST
75104: LIST
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: LIST
75110: LIST
75111: LIST
75112: ST_TO_ADDR
// end ; 5 :
75113: GO 75253
75115: LD_INT 5
75117: DOUBLE
75118: EQUAL
75119: IFTRUE 75123
75121: GO 75252
75123: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75124: LD_ADDR_VAR 0 5
75128: PUSH
75129: LD_VAR 0 1
75133: PUSH
75134: LD_INT 4
75136: MINUS
75137: PUSH
75138: LD_VAR 0 2
75142: PUSH
75143: LD_INT 1
75145: PUSH
75146: EMPTY
75147: LIST
75148: LIST
75149: LIST
75150: PUSH
75151: LD_VAR 0 1
75155: PUSH
75156: LD_VAR 0 2
75160: PUSH
75161: LD_INT 4
75163: MINUS
75164: PUSH
75165: LD_INT 3
75167: PUSH
75168: EMPTY
75169: LIST
75170: LIST
75171: LIST
75172: PUSH
75173: LD_VAR 0 1
75177: PUSH
75178: LD_INT 4
75180: PLUS
75181: PUSH
75182: LD_VAR 0 2
75186: PUSH
75187: LD_INT 4
75189: PLUS
75190: PUSH
75191: LD_INT 5
75193: PUSH
75194: EMPTY
75195: LIST
75196: LIST
75197: LIST
75198: PUSH
75199: LD_VAR 0 1
75203: PUSH
75204: LD_INT 3
75206: PLUS
75207: PUSH
75208: LD_VAR 0 2
75212: PUSH
75213: LD_INT 4
75215: PUSH
75216: EMPTY
75217: LIST
75218: LIST
75219: LIST
75220: PUSH
75221: LD_VAR 0 1
75225: PUSH
75226: LD_VAR 0 2
75230: PUSH
75231: LD_INT 3
75233: PLUS
75234: PUSH
75235: LD_INT 0
75237: PUSH
75238: EMPTY
75239: LIST
75240: LIST
75241: LIST
75242: PUSH
75243: EMPTY
75244: LIST
75245: LIST
75246: LIST
75247: LIST
75248: LIST
75249: ST_TO_ADDR
// end ; end ;
75250: GO 75253
75252: POP
// result := list ;
75253: LD_ADDR_VAR 0 4
75257: PUSH
75258: LD_VAR 0 5
75262: ST_TO_ADDR
// end ;
75263: LD_VAR 0 4
75267: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75268: LD_INT 0
75270: PPUSH
75271: PPUSH
75272: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75273: LD_VAR 0 1
75277: NOT
75278: PUSH
75279: LD_VAR 0 2
75283: PUSH
75284: LD_INT 1
75286: PUSH
75287: LD_INT 2
75289: PUSH
75290: LD_INT 3
75292: PUSH
75293: LD_INT 4
75295: PUSH
75296: EMPTY
75297: LIST
75298: LIST
75299: LIST
75300: LIST
75301: IN
75302: NOT
75303: OR
75304: IFFALSE 75308
// exit ;
75306: GO 75391
// tmp := [ ] ;
75308: LD_ADDR_VAR 0 5
75312: PUSH
75313: EMPTY
75314: ST_TO_ADDR
// for i in units do
75315: LD_ADDR_VAR 0 4
75319: PUSH
75320: LD_VAR 0 1
75324: PUSH
75325: FOR_IN
75326: IFFALSE 75360
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75328: LD_ADDR_VAR 0 5
75332: PUSH
75333: LD_VAR 0 5
75337: PPUSH
75338: LD_VAR 0 4
75342: PPUSH
75343: LD_VAR 0 2
75347: PPUSH
75348: CALL_OW 259
75352: PPUSH
75353: CALL 76752 0 2
75357: ST_TO_ADDR
75358: GO 75325
75360: POP
75361: POP
// if not tmp then
75362: LD_VAR 0 5
75366: NOT
75367: IFFALSE 75371
// exit ;
75369: GO 75391
// result := SortListByListDesc ( units , tmp ) ;
75371: LD_ADDR_VAR 0 3
75375: PUSH
75376: LD_VAR 0 1
75380: PPUSH
75381: LD_VAR 0 5
75385: PPUSH
75386: CALL_OW 77
75390: ST_TO_ADDR
// end ;
75391: LD_VAR 0 3
75395: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75396: LD_INT 0
75398: PPUSH
75399: PPUSH
75400: PPUSH
// result := false ;
75401: LD_ADDR_VAR 0 3
75405: PUSH
75406: LD_INT 0
75408: ST_TO_ADDR
// if not building then
75409: LD_VAR 0 2
75413: NOT
75414: IFFALSE 75418
// exit ;
75416: GO 75556
// x := GetX ( building ) ;
75418: LD_ADDR_VAR 0 4
75422: PUSH
75423: LD_VAR 0 2
75427: PPUSH
75428: CALL_OW 250
75432: ST_TO_ADDR
// y := GetY ( building ) ;
75433: LD_ADDR_VAR 0 5
75437: PUSH
75438: LD_VAR 0 2
75442: PPUSH
75443: CALL_OW 251
75447: ST_TO_ADDR
// if not x or not y then
75448: LD_VAR 0 4
75452: NOT
75453: PUSH
75454: LD_VAR 0 5
75458: NOT
75459: OR
75460: IFFALSE 75464
// exit ;
75462: GO 75556
// if GetTaskList ( unit ) then
75464: LD_VAR 0 1
75468: PPUSH
75469: CALL_OW 437
75473: IFFALSE 75556
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75475: LD_STRING e
75477: PUSH
75478: LD_VAR 0 1
75482: PPUSH
75483: CALL_OW 437
75487: PUSH
75488: LD_INT 1
75490: ARRAY
75491: PUSH
75492: LD_INT 1
75494: ARRAY
75495: EQUAL
75496: PUSH
75497: LD_VAR 0 4
75501: PUSH
75502: LD_VAR 0 1
75506: PPUSH
75507: CALL_OW 437
75511: PUSH
75512: LD_INT 1
75514: ARRAY
75515: PUSH
75516: LD_INT 2
75518: ARRAY
75519: EQUAL
75520: AND
75521: PUSH
75522: LD_VAR 0 5
75526: PUSH
75527: LD_VAR 0 1
75531: PPUSH
75532: CALL_OW 437
75536: PUSH
75537: LD_INT 1
75539: ARRAY
75540: PUSH
75541: LD_INT 3
75543: ARRAY
75544: EQUAL
75545: AND
75546: IFFALSE 75556
// result := true end ;
75548: LD_ADDR_VAR 0 3
75552: PUSH
75553: LD_INT 1
75555: ST_TO_ADDR
// end ;
75556: LD_VAR 0 3
75560: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75561: LD_INT 0
75563: PPUSH
// result := false ;
75564: LD_ADDR_VAR 0 4
75568: PUSH
75569: LD_INT 0
75571: ST_TO_ADDR
// if GetTaskList ( unit ) then
75572: LD_VAR 0 1
75576: PPUSH
75577: CALL_OW 437
75581: IFFALSE 75664
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75583: LD_STRING M
75585: PUSH
75586: LD_VAR 0 1
75590: PPUSH
75591: CALL_OW 437
75595: PUSH
75596: LD_INT 1
75598: ARRAY
75599: PUSH
75600: LD_INT 1
75602: ARRAY
75603: EQUAL
75604: PUSH
75605: LD_VAR 0 2
75609: PUSH
75610: LD_VAR 0 1
75614: PPUSH
75615: CALL_OW 437
75619: PUSH
75620: LD_INT 1
75622: ARRAY
75623: PUSH
75624: LD_INT 2
75626: ARRAY
75627: EQUAL
75628: AND
75629: PUSH
75630: LD_VAR 0 3
75634: PUSH
75635: LD_VAR 0 1
75639: PPUSH
75640: CALL_OW 437
75644: PUSH
75645: LD_INT 1
75647: ARRAY
75648: PUSH
75649: LD_INT 3
75651: ARRAY
75652: EQUAL
75653: AND
75654: IFFALSE 75664
// result := true ;
75656: LD_ADDR_VAR 0 4
75660: PUSH
75661: LD_INT 1
75663: ST_TO_ADDR
// end ; end ;
75664: LD_VAR 0 4
75668: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75669: LD_INT 0
75671: PPUSH
75672: PPUSH
75673: PPUSH
75674: PPUSH
// if not unit or not area then
75675: LD_VAR 0 1
75679: NOT
75680: PUSH
75681: LD_VAR 0 2
75685: NOT
75686: OR
75687: IFFALSE 75691
// exit ;
75689: GO 75855
// tmp := AreaToList ( area , i ) ;
75691: LD_ADDR_VAR 0 6
75695: PUSH
75696: LD_VAR 0 2
75700: PPUSH
75701: LD_VAR 0 5
75705: PPUSH
75706: CALL_OW 517
75710: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75711: LD_ADDR_VAR 0 5
75715: PUSH
75716: DOUBLE
75717: LD_INT 1
75719: DEC
75720: ST_TO_ADDR
75721: LD_VAR 0 6
75725: PUSH
75726: LD_INT 1
75728: ARRAY
75729: PUSH
75730: FOR_TO
75731: IFFALSE 75853
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75733: LD_ADDR_VAR 0 7
75737: PUSH
75738: LD_VAR 0 6
75742: PUSH
75743: LD_INT 1
75745: ARRAY
75746: PUSH
75747: LD_VAR 0 5
75751: ARRAY
75752: PUSH
75753: LD_VAR 0 6
75757: PUSH
75758: LD_INT 2
75760: ARRAY
75761: PUSH
75762: LD_VAR 0 5
75766: ARRAY
75767: PUSH
75768: EMPTY
75769: LIST
75770: LIST
75771: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75772: LD_VAR 0 7
75776: PUSH
75777: LD_INT 1
75779: ARRAY
75780: PPUSH
75781: LD_VAR 0 7
75785: PUSH
75786: LD_INT 2
75788: ARRAY
75789: PPUSH
75790: CALL_OW 428
75794: PUSH
75795: LD_INT 0
75797: EQUAL
75798: IFFALSE 75851
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75800: LD_VAR 0 1
75804: PPUSH
75805: LD_VAR 0 7
75809: PUSH
75810: LD_INT 1
75812: ARRAY
75813: PPUSH
75814: LD_VAR 0 7
75818: PUSH
75819: LD_INT 2
75821: ARRAY
75822: PPUSH
75823: LD_VAR 0 3
75827: PPUSH
75828: CALL_OW 48
// result := IsPlaced ( unit ) ;
75832: LD_ADDR_VAR 0 4
75836: PUSH
75837: LD_VAR 0 1
75841: PPUSH
75842: CALL_OW 305
75846: ST_TO_ADDR
// exit ;
75847: POP
75848: POP
75849: GO 75855
// end ; end ;
75851: GO 75730
75853: POP
75854: POP
// end ;
75855: LD_VAR 0 4
75859: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75860: LD_INT 0
75862: PPUSH
75863: PPUSH
75864: PPUSH
// if not side or side > 8 then
75865: LD_VAR 0 1
75869: NOT
75870: PUSH
75871: LD_VAR 0 1
75875: PUSH
75876: LD_INT 8
75878: GREATER
75879: OR
75880: IFFALSE 75884
// exit ;
75882: GO 76071
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75884: LD_ADDR_VAR 0 4
75888: PUSH
75889: LD_INT 22
75891: PUSH
75892: LD_VAR 0 1
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: PUSH
75901: LD_INT 21
75903: PUSH
75904: LD_INT 3
75906: PUSH
75907: EMPTY
75908: LIST
75909: LIST
75910: PUSH
75911: EMPTY
75912: LIST
75913: LIST
75914: PPUSH
75915: CALL_OW 69
75919: ST_TO_ADDR
// if not tmp then
75920: LD_VAR 0 4
75924: NOT
75925: IFFALSE 75929
// exit ;
75927: GO 76071
// enable_addtolog := true ;
75929: LD_ADDR_OWVAR 81
75933: PUSH
75934: LD_INT 1
75936: ST_TO_ADDR
// AddToLog ( [ ) ;
75937: LD_STRING [
75939: PPUSH
75940: CALL_OW 561
// for i in tmp do
75944: LD_ADDR_VAR 0 3
75948: PUSH
75949: LD_VAR 0 4
75953: PUSH
75954: FOR_IN
75955: IFFALSE 76062
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75957: LD_STRING [
75959: PUSH
75960: LD_VAR 0 3
75964: PPUSH
75965: CALL_OW 266
75969: STR
75970: PUSH
75971: LD_STRING , 
75973: STR
75974: PUSH
75975: LD_VAR 0 3
75979: PPUSH
75980: CALL_OW 250
75984: STR
75985: PUSH
75986: LD_STRING , 
75988: STR
75989: PUSH
75990: LD_VAR 0 3
75994: PPUSH
75995: CALL_OW 251
75999: STR
76000: PUSH
76001: LD_STRING , 
76003: STR
76004: PUSH
76005: LD_VAR 0 3
76009: PPUSH
76010: CALL_OW 254
76014: STR
76015: PUSH
76016: LD_STRING , 
76018: STR
76019: PUSH
76020: LD_VAR 0 3
76024: PPUSH
76025: LD_INT 1
76027: PPUSH
76028: CALL_OW 268
76032: STR
76033: PUSH
76034: LD_STRING , 
76036: STR
76037: PUSH
76038: LD_VAR 0 3
76042: PPUSH
76043: LD_INT 2
76045: PPUSH
76046: CALL_OW 268
76050: STR
76051: PUSH
76052: LD_STRING ],
76054: STR
76055: PPUSH
76056: CALL_OW 561
// end ;
76060: GO 75954
76062: POP
76063: POP
// AddToLog ( ]; ) ;
76064: LD_STRING ];
76066: PPUSH
76067: CALL_OW 561
// end ;
76071: LD_VAR 0 2
76075: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76076: LD_INT 0
76078: PPUSH
76079: PPUSH
76080: PPUSH
76081: PPUSH
76082: PPUSH
// if not area or not rate or not max then
76083: LD_VAR 0 1
76087: NOT
76088: PUSH
76089: LD_VAR 0 2
76093: NOT
76094: OR
76095: PUSH
76096: LD_VAR 0 4
76100: NOT
76101: OR
76102: IFFALSE 76106
// exit ;
76104: GO 76295
// while 1 do
76106: LD_INT 1
76108: IFFALSE 76295
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76110: LD_ADDR_VAR 0 9
76114: PUSH
76115: LD_VAR 0 1
76119: PPUSH
76120: LD_INT 1
76122: PPUSH
76123: CALL_OW 287
76127: PUSH
76128: LD_INT 10
76130: MUL
76131: ST_TO_ADDR
// r := rate / 10 ;
76132: LD_ADDR_VAR 0 7
76136: PUSH
76137: LD_VAR 0 2
76141: PUSH
76142: LD_INT 10
76144: DIVREAL
76145: ST_TO_ADDR
// time := 1 1$00 ;
76146: LD_ADDR_VAR 0 8
76150: PUSH
76151: LD_INT 2100
76153: ST_TO_ADDR
// if amount < min then
76154: LD_VAR 0 9
76158: PUSH
76159: LD_VAR 0 3
76163: LESS
76164: IFFALSE 76182
// r := r * 2 else
76166: LD_ADDR_VAR 0 7
76170: PUSH
76171: LD_VAR 0 7
76175: PUSH
76176: LD_INT 2
76178: MUL
76179: ST_TO_ADDR
76180: GO 76208
// if amount > max then
76182: LD_VAR 0 9
76186: PUSH
76187: LD_VAR 0 4
76191: GREATER
76192: IFFALSE 76208
// r := r / 2 ;
76194: LD_ADDR_VAR 0 7
76198: PUSH
76199: LD_VAR 0 7
76203: PUSH
76204: LD_INT 2
76206: DIVREAL
76207: ST_TO_ADDR
// time := time / r ;
76208: LD_ADDR_VAR 0 8
76212: PUSH
76213: LD_VAR 0 8
76217: PUSH
76218: LD_VAR 0 7
76222: DIVREAL
76223: ST_TO_ADDR
// if time < 0 then
76224: LD_VAR 0 8
76228: PUSH
76229: LD_INT 0
76231: LESS
76232: IFFALSE 76249
// time := time * - 1 ;
76234: LD_ADDR_VAR 0 8
76238: PUSH
76239: LD_VAR 0 8
76243: PUSH
76244: LD_INT 1
76246: NEG
76247: MUL
76248: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76249: LD_VAR 0 8
76253: PUSH
76254: LD_INT 35
76256: PPUSH
76257: LD_INT 875
76259: PPUSH
76260: CALL_OW 12
76264: PLUS
76265: PPUSH
76266: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76270: LD_INT 1
76272: PPUSH
76273: LD_INT 5
76275: PPUSH
76276: CALL_OW 12
76280: PPUSH
76281: LD_VAR 0 1
76285: PPUSH
76286: LD_INT 1
76288: PPUSH
76289: CALL_OW 55
// end ;
76293: GO 76106
// end ;
76295: LD_VAR 0 5
76299: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76300: LD_INT 0
76302: PPUSH
76303: PPUSH
76304: PPUSH
76305: PPUSH
76306: PPUSH
76307: PPUSH
76308: PPUSH
76309: PPUSH
// if not turrets or not factories then
76310: LD_VAR 0 1
76314: NOT
76315: PUSH
76316: LD_VAR 0 2
76320: NOT
76321: OR
76322: IFFALSE 76326
// exit ;
76324: GO 76633
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76326: LD_ADDR_VAR 0 10
76330: PUSH
76331: LD_INT 5
76333: PUSH
76334: LD_INT 6
76336: PUSH
76337: EMPTY
76338: LIST
76339: LIST
76340: PUSH
76341: LD_INT 2
76343: PUSH
76344: LD_INT 4
76346: PUSH
76347: EMPTY
76348: LIST
76349: LIST
76350: PUSH
76351: LD_INT 3
76353: PUSH
76354: LD_INT 5
76356: PUSH
76357: EMPTY
76358: LIST
76359: LIST
76360: PUSH
76361: EMPTY
76362: LIST
76363: LIST
76364: LIST
76365: PUSH
76366: LD_INT 24
76368: PUSH
76369: LD_INT 25
76371: PUSH
76372: EMPTY
76373: LIST
76374: LIST
76375: PUSH
76376: LD_INT 23
76378: PUSH
76379: LD_INT 27
76381: PUSH
76382: EMPTY
76383: LIST
76384: LIST
76385: PUSH
76386: EMPTY
76387: LIST
76388: LIST
76389: PUSH
76390: LD_INT 42
76392: PUSH
76393: LD_INT 43
76395: PUSH
76396: EMPTY
76397: LIST
76398: LIST
76399: PUSH
76400: LD_INT 44
76402: PUSH
76403: LD_INT 46
76405: PUSH
76406: EMPTY
76407: LIST
76408: LIST
76409: PUSH
76410: LD_INT 45
76412: PUSH
76413: LD_INT 47
76415: PUSH
76416: EMPTY
76417: LIST
76418: LIST
76419: PUSH
76420: EMPTY
76421: LIST
76422: LIST
76423: LIST
76424: PUSH
76425: EMPTY
76426: LIST
76427: LIST
76428: LIST
76429: ST_TO_ADDR
// result := [ ] ;
76430: LD_ADDR_VAR 0 3
76434: PUSH
76435: EMPTY
76436: ST_TO_ADDR
// for i in turrets do
76437: LD_ADDR_VAR 0 4
76441: PUSH
76442: LD_VAR 0 1
76446: PUSH
76447: FOR_IN
76448: IFFALSE 76631
// begin nat := GetNation ( i ) ;
76450: LD_ADDR_VAR 0 7
76454: PUSH
76455: LD_VAR 0 4
76459: PPUSH
76460: CALL_OW 248
76464: ST_TO_ADDR
// weapon := 0 ;
76465: LD_ADDR_VAR 0 8
76469: PUSH
76470: LD_INT 0
76472: ST_TO_ADDR
// if not nat then
76473: LD_VAR 0 7
76477: NOT
76478: IFFALSE 76482
// continue ;
76480: GO 76447
// for j in list [ nat ] do
76482: LD_ADDR_VAR 0 5
76486: PUSH
76487: LD_VAR 0 10
76491: PUSH
76492: LD_VAR 0 7
76496: ARRAY
76497: PUSH
76498: FOR_IN
76499: IFFALSE 76540
// if GetBWeapon ( i ) = j [ 1 ] then
76501: LD_VAR 0 4
76505: PPUSH
76506: CALL_OW 269
76510: PUSH
76511: LD_VAR 0 5
76515: PUSH
76516: LD_INT 1
76518: ARRAY
76519: EQUAL
76520: IFFALSE 76538
// begin weapon := j [ 2 ] ;
76522: LD_ADDR_VAR 0 8
76526: PUSH
76527: LD_VAR 0 5
76531: PUSH
76532: LD_INT 2
76534: ARRAY
76535: ST_TO_ADDR
// break ;
76536: GO 76540
// end ;
76538: GO 76498
76540: POP
76541: POP
// if not weapon then
76542: LD_VAR 0 8
76546: NOT
76547: IFFALSE 76551
// continue ;
76549: GO 76447
// for k in factories do
76551: LD_ADDR_VAR 0 6
76555: PUSH
76556: LD_VAR 0 2
76560: PUSH
76561: FOR_IN
76562: IFFALSE 76627
// begin weapons := AvailableWeaponList ( k ) ;
76564: LD_ADDR_VAR 0 9
76568: PUSH
76569: LD_VAR 0 6
76573: PPUSH
76574: CALL_OW 478
76578: ST_TO_ADDR
// if not weapons then
76579: LD_VAR 0 9
76583: NOT
76584: IFFALSE 76588
// continue ;
76586: GO 76561
// if weapon in weapons then
76588: LD_VAR 0 8
76592: PUSH
76593: LD_VAR 0 9
76597: IN
76598: IFFALSE 76625
// begin result := [ i , weapon ] ;
76600: LD_ADDR_VAR 0 3
76604: PUSH
76605: LD_VAR 0 4
76609: PUSH
76610: LD_VAR 0 8
76614: PUSH
76615: EMPTY
76616: LIST
76617: LIST
76618: ST_TO_ADDR
// exit ;
76619: POP
76620: POP
76621: POP
76622: POP
76623: GO 76633
// end ; end ;
76625: GO 76561
76627: POP
76628: POP
// end ;
76629: GO 76447
76631: POP
76632: POP
// end ;
76633: LD_VAR 0 3
76637: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76638: LD_INT 0
76640: PPUSH
// if not side or side > 8 then
76641: LD_VAR 0 3
76645: NOT
76646: PUSH
76647: LD_VAR 0 3
76651: PUSH
76652: LD_INT 8
76654: GREATER
76655: OR
76656: IFFALSE 76660
// exit ;
76658: GO 76719
// if not range then
76660: LD_VAR 0 4
76664: NOT
76665: IFFALSE 76676
// range := - 12 ;
76667: LD_ADDR_VAR 0 4
76671: PUSH
76672: LD_INT 12
76674: NEG
76675: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76676: LD_VAR 0 1
76680: PPUSH
76681: LD_VAR 0 2
76685: PPUSH
76686: LD_VAR 0 3
76690: PPUSH
76691: LD_VAR 0 4
76695: PPUSH
76696: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76700: LD_VAR 0 1
76704: PPUSH
76705: LD_VAR 0 2
76709: PPUSH
76710: LD_VAR 0 3
76714: PPUSH
76715: CALL_OW 331
// end ;
76719: LD_VAR 0 5
76723: RET
// export function Video ( mode ) ; begin
76724: LD_INT 0
76726: PPUSH
// ingame_video = mode ;
76727: LD_ADDR_OWVAR 52
76731: PUSH
76732: LD_VAR 0 1
76736: ST_TO_ADDR
// interface_hidden = mode ;
76737: LD_ADDR_OWVAR 54
76741: PUSH
76742: LD_VAR 0 1
76746: ST_TO_ADDR
// end ;
76747: LD_VAR 0 2
76751: RET
// export function Join ( array , element ) ; begin
76752: LD_INT 0
76754: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76755: LD_ADDR_VAR 0 3
76759: PUSH
76760: LD_VAR 0 1
76764: PPUSH
76765: LD_VAR 0 1
76769: PUSH
76770: LD_INT 1
76772: PLUS
76773: PPUSH
76774: LD_VAR 0 2
76778: PPUSH
76779: CALL_OW 1
76783: ST_TO_ADDR
// end ;
76784: LD_VAR 0 3
76788: RET
// export function JoinUnion ( array , element ) ; begin
76789: LD_INT 0
76791: PPUSH
// result := array union element ;
76792: LD_ADDR_VAR 0 3
76796: PUSH
76797: LD_VAR 0 1
76801: PUSH
76802: LD_VAR 0 2
76806: UNION
76807: ST_TO_ADDR
// end ;
76808: LD_VAR 0 3
76812: RET
// export function GetBehemoths ( side ) ; begin
76813: LD_INT 0
76815: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76816: LD_ADDR_VAR 0 2
76820: PUSH
76821: LD_INT 22
76823: PUSH
76824: LD_VAR 0 1
76828: PUSH
76829: EMPTY
76830: LIST
76831: LIST
76832: PUSH
76833: LD_INT 31
76835: PUSH
76836: LD_INT 25
76838: PUSH
76839: EMPTY
76840: LIST
76841: LIST
76842: PUSH
76843: EMPTY
76844: LIST
76845: LIST
76846: PPUSH
76847: CALL_OW 69
76851: ST_TO_ADDR
// end ;
76852: LD_VAR 0 2
76856: RET
// export function Shuffle ( array ) ; var i , index ; begin
76857: LD_INT 0
76859: PPUSH
76860: PPUSH
76861: PPUSH
// result := [ ] ;
76862: LD_ADDR_VAR 0 2
76866: PUSH
76867: EMPTY
76868: ST_TO_ADDR
// if not array then
76869: LD_VAR 0 1
76873: NOT
76874: IFFALSE 76878
// exit ;
76876: GO 76977
// Randomize ;
76878: CALL_OW 10
// for i = array downto 1 do
76882: LD_ADDR_VAR 0 3
76886: PUSH
76887: DOUBLE
76888: LD_VAR 0 1
76892: INC
76893: ST_TO_ADDR
76894: LD_INT 1
76896: PUSH
76897: FOR_DOWNTO
76898: IFFALSE 76975
// begin index := rand ( 1 , array ) ;
76900: LD_ADDR_VAR 0 4
76904: PUSH
76905: LD_INT 1
76907: PPUSH
76908: LD_VAR 0 1
76912: PPUSH
76913: CALL_OW 12
76917: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76918: LD_ADDR_VAR 0 2
76922: PUSH
76923: LD_VAR 0 2
76927: PPUSH
76928: LD_VAR 0 2
76932: PUSH
76933: LD_INT 1
76935: PLUS
76936: PPUSH
76937: LD_VAR 0 1
76941: PUSH
76942: LD_VAR 0 4
76946: ARRAY
76947: PPUSH
76948: CALL_OW 2
76952: ST_TO_ADDR
// array := Delete ( array , index ) ;
76953: LD_ADDR_VAR 0 1
76957: PUSH
76958: LD_VAR 0 1
76962: PPUSH
76963: LD_VAR 0 4
76967: PPUSH
76968: CALL_OW 3
76972: ST_TO_ADDR
// end ;
76973: GO 76897
76975: POP
76976: POP
// end ;
76977: LD_VAR 0 2
76981: RET
// export function GetBaseMaterials ( base ) ; begin
76982: LD_INT 0
76984: PPUSH
// result := [ 0 , 0 , 0 ] ;
76985: LD_ADDR_VAR 0 2
76989: PUSH
76990: LD_INT 0
76992: PUSH
76993: LD_INT 0
76995: PUSH
76996: LD_INT 0
76998: PUSH
76999: EMPTY
77000: LIST
77001: LIST
77002: LIST
77003: ST_TO_ADDR
// if not base then
77004: LD_VAR 0 1
77008: NOT
77009: IFFALSE 77013
// exit ;
77011: GO 77062
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77013: LD_ADDR_VAR 0 2
77017: PUSH
77018: LD_VAR 0 1
77022: PPUSH
77023: LD_INT 1
77025: PPUSH
77026: CALL_OW 275
77030: PUSH
77031: LD_VAR 0 1
77035: PPUSH
77036: LD_INT 2
77038: PPUSH
77039: CALL_OW 275
77043: PUSH
77044: LD_VAR 0 1
77048: PPUSH
77049: LD_INT 3
77051: PPUSH
77052: CALL_OW 275
77056: PUSH
77057: EMPTY
77058: LIST
77059: LIST
77060: LIST
77061: ST_TO_ADDR
// end ;
77062: LD_VAR 0 2
77066: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77067: LD_INT 0
77069: PPUSH
77070: PPUSH
// result := array ;
77071: LD_ADDR_VAR 0 3
77075: PUSH
77076: LD_VAR 0 1
77080: ST_TO_ADDR
// if size >= result then
77081: LD_VAR 0 2
77085: PUSH
77086: LD_VAR 0 3
77090: GREATEREQUAL
77091: IFFALSE 77095
// exit ;
77093: GO 77145
// if size then
77095: LD_VAR 0 2
77099: IFFALSE 77145
// for i := array downto size do
77101: LD_ADDR_VAR 0 4
77105: PUSH
77106: DOUBLE
77107: LD_VAR 0 1
77111: INC
77112: ST_TO_ADDR
77113: LD_VAR 0 2
77117: PUSH
77118: FOR_DOWNTO
77119: IFFALSE 77143
// result := Delete ( result , result ) ;
77121: LD_ADDR_VAR 0 3
77125: PUSH
77126: LD_VAR 0 3
77130: PPUSH
77131: LD_VAR 0 3
77135: PPUSH
77136: CALL_OW 3
77140: ST_TO_ADDR
77141: GO 77118
77143: POP
77144: POP
// end ;
77145: LD_VAR 0 3
77149: RET
// export function ComExit ( unit ) ; var tmp ; begin
77150: LD_INT 0
77152: PPUSH
77153: PPUSH
// if not IsInUnit ( unit ) then
77154: LD_VAR 0 1
77158: PPUSH
77159: CALL_OW 310
77163: NOT
77164: IFFALSE 77168
// exit ;
77166: GO 77228
// tmp := IsInUnit ( unit ) ;
77168: LD_ADDR_VAR 0 3
77172: PUSH
77173: LD_VAR 0 1
77177: PPUSH
77178: CALL_OW 310
77182: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77183: LD_VAR 0 3
77187: PPUSH
77188: CALL_OW 247
77192: PUSH
77193: LD_INT 2
77195: EQUAL
77196: IFFALSE 77209
// ComExitVehicle ( unit ) else
77198: LD_VAR 0 1
77202: PPUSH
77203: CALL_OW 121
77207: GO 77218
// ComExitBuilding ( unit ) ;
77209: LD_VAR 0 1
77213: PPUSH
77214: CALL_OW 122
// result := tmp ;
77218: LD_ADDR_VAR 0 2
77222: PUSH
77223: LD_VAR 0 3
77227: ST_TO_ADDR
// end ;
77228: LD_VAR 0 2
77232: RET
// export function ComExitAll ( units ) ; var i ; begin
77233: LD_INT 0
77235: PPUSH
77236: PPUSH
// if not units then
77237: LD_VAR 0 1
77241: NOT
77242: IFFALSE 77246
// exit ;
77244: GO 77272
// for i in units do
77246: LD_ADDR_VAR 0 3
77250: PUSH
77251: LD_VAR 0 1
77255: PUSH
77256: FOR_IN
77257: IFFALSE 77270
// ComExit ( i ) ;
77259: LD_VAR 0 3
77263: PPUSH
77264: CALL 77150 0 1
77268: GO 77256
77270: POP
77271: POP
// end ;
77272: LD_VAR 0 2
77276: RET
// export function ResetHc ; begin
77277: LD_INT 0
77279: PPUSH
// InitHc ;
77280: CALL_OW 19
// hc_importance := 0 ;
77284: LD_ADDR_OWVAR 32
77288: PUSH
77289: LD_INT 0
77291: ST_TO_ADDR
// end ;
77292: LD_VAR 0 1
77296: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77297: LD_INT 0
77299: PPUSH
77300: PPUSH
77301: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77302: LD_ADDR_VAR 0 6
77306: PUSH
77307: LD_VAR 0 1
77311: PUSH
77312: LD_VAR 0 3
77316: PLUS
77317: PUSH
77318: LD_INT 2
77320: DIV
77321: ST_TO_ADDR
// if _x < 0 then
77322: LD_VAR 0 6
77326: PUSH
77327: LD_INT 0
77329: LESS
77330: IFFALSE 77347
// _x := _x * - 1 ;
77332: LD_ADDR_VAR 0 6
77336: PUSH
77337: LD_VAR 0 6
77341: PUSH
77342: LD_INT 1
77344: NEG
77345: MUL
77346: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77347: LD_ADDR_VAR 0 7
77351: PUSH
77352: LD_VAR 0 2
77356: PUSH
77357: LD_VAR 0 4
77361: PLUS
77362: PUSH
77363: LD_INT 2
77365: DIV
77366: ST_TO_ADDR
// if _y < 0 then
77367: LD_VAR 0 7
77371: PUSH
77372: LD_INT 0
77374: LESS
77375: IFFALSE 77392
// _y := _y * - 1 ;
77377: LD_ADDR_VAR 0 7
77381: PUSH
77382: LD_VAR 0 7
77386: PUSH
77387: LD_INT 1
77389: NEG
77390: MUL
77391: ST_TO_ADDR
// result := [ _x , _y ] ;
77392: LD_ADDR_VAR 0 5
77396: PUSH
77397: LD_VAR 0 6
77401: PUSH
77402: LD_VAR 0 7
77406: PUSH
77407: EMPTY
77408: LIST
77409: LIST
77410: ST_TO_ADDR
// end ;
77411: LD_VAR 0 5
77415: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77416: LD_INT 0
77418: PPUSH
77419: PPUSH
77420: PPUSH
77421: PPUSH
// task := GetTaskList ( unit ) ;
77422: LD_ADDR_VAR 0 7
77426: PUSH
77427: LD_VAR 0 1
77431: PPUSH
77432: CALL_OW 437
77436: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77437: LD_VAR 0 7
77441: NOT
77442: PUSH
77443: LD_VAR 0 1
77447: PPUSH
77448: LD_VAR 0 2
77452: PPUSH
77453: CALL_OW 308
77457: NOT
77458: AND
77459: IFFALSE 77463
// exit ;
77461: GO 77581
// if IsInArea ( unit , area ) then
77463: LD_VAR 0 1
77467: PPUSH
77468: LD_VAR 0 2
77472: PPUSH
77473: CALL_OW 308
77477: IFFALSE 77495
// begin ComMoveToArea ( unit , goAway ) ;
77479: LD_VAR 0 1
77483: PPUSH
77484: LD_VAR 0 3
77488: PPUSH
77489: CALL_OW 113
// exit ;
77493: GO 77581
// end ; if task [ 1 ] [ 1 ] <> M then
77495: LD_VAR 0 7
77499: PUSH
77500: LD_INT 1
77502: ARRAY
77503: PUSH
77504: LD_INT 1
77506: ARRAY
77507: PUSH
77508: LD_STRING M
77510: NONEQUAL
77511: IFFALSE 77515
// exit ;
77513: GO 77581
// x := task [ 1 ] [ 2 ] ;
77515: LD_ADDR_VAR 0 5
77519: PUSH
77520: LD_VAR 0 7
77524: PUSH
77525: LD_INT 1
77527: ARRAY
77528: PUSH
77529: LD_INT 2
77531: ARRAY
77532: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77533: LD_ADDR_VAR 0 6
77537: PUSH
77538: LD_VAR 0 7
77542: PUSH
77543: LD_INT 1
77545: ARRAY
77546: PUSH
77547: LD_INT 3
77549: ARRAY
77550: ST_TO_ADDR
// if InArea ( x , y , area ) then
77551: LD_VAR 0 5
77555: PPUSH
77556: LD_VAR 0 6
77560: PPUSH
77561: LD_VAR 0 2
77565: PPUSH
77566: CALL_OW 309
77570: IFFALSE 77581
// ComStop ( unit ) ;
77572: LD_VAR 0 1
77576: PPUSH
77577: CALL_OW 141
// end ;
77581: LD_VAR 0 4
77585: RET
// export function Abs ( value ) ; begin
77586: LD_INT 0
77588: PPUSH
// result := value ;
77589: LD_ADDR_VAR 0 2
77593: PUSH
77594: LD_VAR 0 1
77598: ST_TO_ADDR
// if value < 0 then
77599: LD_VAR 0 1
77603: PUSH
77604: LD_INT 0
77606: LESS
77607: IFFALSE 77624
// result := value * - 1 ;
77609: LD_ADDR_VAR 0 2
77613: PUSH
77614: LD_VAR 0 1
77618: PUSH
77619: LD_INT 1
77621: NEG
77622: MUL
77623: ST_TO_ADDR
// end ;
77624: LD_VAR 0 2
77628: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77629: LD_INT 0
77631: PPUSH
77632: PPUSH
77633: PPUSH
77634: PPUSH
77635: PPUSH
77636: PPUSH
77637: PPUSH
77638: PPUSH
// if not unit or not building then
77639: LD_VAR 0 1
77643: NOT
77644: PUSH
77645: LD_VAR 0 2
77649: NOT
77650: OR
77651: IFFALSE 77655
// exit ;
77653: GO 77881
// x := GetX ( building ) ;
77655: LD_ADDR_VAR 0 4
77659: PUSH
77660: LD_VAR 0 2
77664: PPUSH
77665: CALL_OW 250
77669: ST_TO_ADDR
// y := GetY ( building ) ;
77670: LD_ADDR_VAR 0 6
77674: PUSH
77675: LD_VAR 0 2
77679: PPUSH
77680: CALL_OW 251
77684: ST_TO_ADDR
// d := GetDir ( building ) ;
77685: LD_ADDR_VAR 0 8
77689: PUSH
77690: LD_VAR 0 2
77694: PPUSH
77695: CALL_OW 254
77699: ST_TO_ADDR
// r := 4 ;
77700: LD_ADDR_VAR 0 9
77704: PUSH
77705: LD_INT 4
77707: ST_TO_ADDR
// for i := 1 to 5 do
77708: LD_ADDR_VAR 0 10
77712: PUSH
77713: DOUBLE
77714: LD_INT 1
77716: DEC
77717: ST_TO_ADDR
77718: LD_INT 5
77720: PUSH
77721: FOR_TO
77722: IFFALSE 77879
// begin _x := ShiftX ( x , d , r + i ) ;
77724: LD_ADDR_VAR 0 5
77728: PUSH
77729: LD_VAR 0 4
77733: PPUSH
77734: LD_VAR 0 8
77738: PPUSH
77739: LD_VAR 0 9
77743: PUSH
77744: LD_VAR 0 10
77748: PLUS
77749: PPUSH
77750: CALL_OW 272
77754: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77755: LD_ADDR_VAR 0 7
77759: PUSH
77760: LD_VAR 0 6
77764: PPUSH
77765: LD_VAR 0 8
77769: PPUSH
77770: LD_VAR 0 9
77774: PUSH
77775: LD_VAR 0 10
77779: PLUS
77780: PPUSH
77781: CALL_OW 273
77785: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77786: LD_VAR 0 5
77790: PPUSH
77791: LD_VAR 0 7
77795: PPUSH
77796: CALL_OW 488
77800: PUSH
77801: LD_VAR 0 5
77805: PPUSH
77806: LD_VAR 0 7
77810: PPUSH
77811: CALL_OW 428
77815: PPUSH
77816: CALL_OW 247
77820: PUSH
77821: LD_INT 3
77823: PUSH
77824: LD_INT 2
77826: PUSH
77827: EMPTY
77828: LIST
77829: LIST
77830: IN
77831: NOT
77832: AND
77833: IFFALSE 77877
// begin ComMoveXY ( unit , _x , _y ) ;
77835: LD_VAR 0 1
77839: PPUSH
77840: LD_VAR 0 5
77844: PPUSH
77845: LD_VAR 0 7
77849: PPUSH
77850: CALL_OW 111
// result := [ _x , _y ] ;
77854: LD_ADDR_VAR 0 3
77858: PUSH
77859: LD_VAR 0 5
77863: PUSH
77864: LD_VAR 0 7
77868: PUSH
77869: EMPTY
77870: LIST
77871: LIST
77872: ST_TO_ADDR
// exit ;
77873: POP
77874: POP
77875: GO 77881
// end ; end ;
77877: GO 77721
77879: POP
77880: POP
// end ;
77881: LD_VAR 0 3
77885: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77886: LD_INT 0
77888: PPUSH
77889: PPUSH
77890: PPUSH
// result := 0 ;
77891: LD_ADDR_VAR 0 3
77895: PUSH
77896: LD_INT 0
77898: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77899: LD_VAR 0 1
77903: PUSH
77904: LD_INT 0
77906: LESS
77907: PUSH
77908: LD_VAR 0 1
77912: PUSH
77913: LD_INT 8
77915: GREATER
77916: OR
77917: PUSH
77918: LD_VAR 0 2
77922: PUSH
77923: LD_INT 0
77925: LESS
77926: OR
77927: PUSH
77928: LD_VAR 0 2
77932: PUSH
77933: LD_INT 8
77935: GREATER
77936: OR
77937: IFFALSE 77941
// exit ;
77939: GO 78016
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77941: LD_ADDR_VAR 0 4
77945: PUSH
77946: LD_INT 22
77948: PUSH
77949: LD_VAR 0 2
77953: PUSH
77954: EMPTY
77955: LIST
77956: LIST
77957: PPUSH
77958: CALL_OW 69
77962: PUSH
77963: FOR_IN
77964: IFFALSE 78014
// begin un := UnitShoot ( i ) ;
77966: LD_ADDR_VAR 0 5
77970: PUSH
77971: LD_VAR 0 4
77975: PPUSH
77976: CALL_OW 504
77980: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77981: LD_VAR 0 5
77985: PPUSH
77986: CALL_OW 255
77990: PUSH
77991: LD_VAR 0 1
77995: EQUAL
77996: IFFALSE 78012
// begin result := un ;
77998: LD_ADDR_VAR 0 3
78002: PUSH
78003: LD_VAR 0 5
78007: ST_TO_ADDR
// exit ;
78008: POP
78009: POP
78010: GO 78016
// end ; end ;
78012: GO 77963
78014: POP
78015: POP
// end ;
78016: LD_VAR 0 3
78020: RET
// export function GetCargoBay ( units ) ; begin
78021: LD_INT 0
78023: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78024: LD_ADDR_VAR 0 2
78028: PUSH
78029: LD_VAR 0 1
78033: PPUSH
78034: LD_INT 2
78036: PUSH
78037: LD_INT 34
78039: PUSH
78040: LD_INT 12
78042: PUSH
78043: EMPTY
78044: LIST
78045: LIST
78046: PUSH
78047: LD_INT 34
78049: PUSH
78050: LD_INT 51
78052: PUSH
78053: EMPTY
78054: LIST
78055: LIST
78056: PUSH
78057: LD_INT 34
78059: PUSH
78060: LD_INT 32
78062: PUSH
78063: EMPTY
78064: LIST
78065: LIST
78066: PUSH
78067: LD_INT 34
78069: PUSH
78070: LD_INT 89
78072: PUSH
78073: EMPTY
78074: LIST
78075: LIST
78076: PUSH
78077: EMPTY
78078: LIST
78079: LIST
78080: LIST
78081: LIST
78082: LIST
78083: PPUSH
78084: CALL_OW 72
78088: ST_TO_ADDR
// end ;
78089: LD_VAR 0 2
78093: RET
// export function Negate ( value ) ; begin
78094: LD_INT 0
78096: PPUSH
// result := not value ;
78097: LD_ADDR_VAR 0 2
78101: PUSH
78102: LD_VAR 0 1
78106: NOT
78107: ST_TO_ADDR
// end ;
78108: LD_VAR 0 2
78112: RET
// export function Inc ( value ) ; begin
78113: LD_INT 0
78115: PPUSH
// result := value + 1 ;
78116: LD_ADDR_VAR 0 2
78120: PUSH
78121: LD_VAR 0 1
78125: PUSH
78126: LD_INT 1
78128: PLUS
78129: ST_TO_ADDR
// end ;
78130: LD_VAR 0 2
78134: RET
// export function Dec ( value ) ; begin
78135: LD_INT 0
78137: PPUSH
// result := value - 1 ;
78138: LD_ADDR_VAR 0 2
78142: PUSH
78143: LD_VAR 0 1
78147: PUSH
78148: LD_INT 1
78150: MINUS
78151: ST_TO_ADDR
// end ;
78152: LD_VAR 0 2
78156: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78157: LD_INT 0
78159: PPUSH
78160: PPUSH
78161: PPUSH
78162: PPUSH
78163: PPUSH
78164: PPUSH
78165: PPUSH
78166: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78167: LD_VAR 0 1
78171: PPUSH
78172: LD_VAR 0 2
78176: PPUSH
78177: CALL_OW 488
78181: NOT
78182: PUSH
78183: LD_VAR 0 3
78187: PPUSH
78188: LD_VAR 0 4
78192: PPUSH
78193: CALL_OW 488
78197: NOT
78198: OR
78199: IFFALSE 78212
// begin result := - 1 ;
78201: LD_ADDR_VAR 0 5
78205: PUSH
78206: LD_INT 1
78208: NEG
78209: ST_TO_ADDR
// exit ;
78210: GO 78447
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78212: LD_ADDR_VAR 0 12
78216: PUSH
78217: LD_VAR 0 1
78221: PPUSH
78222: LD_VAR 0 2
78226: PPUSH
78227: LD_VAR 0 3
78231: PPUSH
78232: LD_VAR 0 4
78236: PPUSH
78237: CALL 77297 0 4
78241: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78242: LD_ADDR_VAR 0 11
78246: PUSH
78247: LD_VAR 0 1
78251: PPUSH
78252: LD_VAR 0 2
78256: PPUSH
78257: LD_VAR 0 12
78261: PUSH
78262: LD_INT 1
78264: ARRAY
78265: PPUSH
78266: LD_VAR 0 12
78270: PUSH
78271: LD_INT 2
78273: ARRAY
78274: PPUSH
78275: CALL_OW 298
78279: ST_TO_ADDR
// distance := 9999 ;
78280: LD_ADDR_VAR 0 10
78284: PUSH
78285: LD_INT 9999
78287: ST_TO_ADDR
// for i := 0 to 5 do
78288: LD_ADDR_VAR 0 6
78292: PUSH
78293: DOUBLE
78294: LD_INT 0
78296: DEC
78297: ST_TO_ADDR
78298: LD_INT 5
78300: PUSH
78301: FOR_TO
78302: IFFALSE 78445
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78304: LD_ADDR_VAR 0 7
78308: PUSH
78309: LD_VAR 0 1
78313: PPUSH
78314: LD_VAR 0 6
78318: PPUSH
78319: LD_VAR 0 11
78323: PPUSH
78324: CALL_OW 272
78328: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78329: LD_ADDR_VAR 0 8
78333: PUSH
78334: LD_VAR 0 2
78338: PPUSH
78339: LD_VAR 0 6
78343: PPUSH
78344: LD_VAR 0 11
78348: PPUSH
78349: CALL_OW 273
78353: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78354: LD_VAR 0 7
78358: PPUSH
78359: LD_VAR 0 8
78363: PPUSH
78364: CALL_OW 488
78368: NOT
78369: IFFALSE 78373
// continue ;
78371: GO 78301
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78373: LD_ADDR_VAR 0 9
78377: PUSH
78378: LD_VAR 0 12
78382: PUSH
78383: LD_INT 1
78385: ARRAY
78386: PPUSH
78387: LD_VAR 0 12
78391: PUSH
78392: LD_INT 2
78394: ARRAY
78395: PPUSH
78396: LD_VAR 0 7
78400: PPUSH
78401: LD_VAR 0 8
78405: PPUSH
78406: CALL_OW 298
78410: ST_TO_ADDR
// if tmp < distance then
78411: LD_VAR 0 9
78415: PUSH
78416: LD_VAR 0 10
78420: LESS
78421: IFFALSE 78443
// begin result := i ;
78423: LD_ADDR_VAR 0 5
78427: PUSH
78428: LD_VAR 0 6
78432: ST_TO_ADDR
// distance := tmp ;
78433: LD_ADDR_VAR 0 10
78437: PUSH
78438: LD_VAR 0 9
78442: ST_TO_ADDR
// end ; end ;
78443: GO 78301
78445: POP
78446: POP
// end ;
78447: LD_VAR 0 5
78451: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78452: LD_INT 0
78454: PPUSH
78455: PPUSH
// if not driver or not IsInUnit ( driver ) then
78456: LD_VAR 0 1
78460: NOT
78461: PUSH
78462: LD_VAR 0 1
78466: PPUSH
78467: CALL_OW 310
78471: NOT
78472: OR
78473: IFFALSE 78477
// exit ;
78475: GO 78567
// vehicle := IsInUnit ( driver ) ;
78477: LD_ADDR_VAR 0 3
78481: PUSH
78482: LD_VAR 0 1
78486: PPUSH
78487: CALL_OW 310
78491: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78492: LD_VAR 0 1
78496: PPUSH
78497: LD_STRING \
78499: PUSH
78500: LD_INT 0
78502: PUSH
78503: LD_INT 0
78505: PUSH
78506: LD_INT 0
78508: PUSH
78509: LD_INT 0
78511: PUSH
78512: LD_INT 0
78514: PUSH
78515: LD_INT 0
78517: PUSH
78518: EMPTY
78519: LIST
78520: LIST
78521: LIST
78522: LIST
78523: LIST
78524: LIST
78525: LIST
78526: PUSH
78527: LD_STRING E
78529: PUSH
78530: LD_INT 0
78532: PUSH
78533: LD_INT 0
78535: PUSH
78536: LD_VAR 0 3
78540: PUSH
78541: LD_INT 0
78543: PUSH
78544: LD_INT 0
78546: PUSH
78547: LD_INT 0
78549: PUSH
78550: EMPTY
78551: LIST
78552: LIST
78553: LIST
78554: LIST
78555: LIST
78556: LIST
78557: LIST
78558: PUSH
78559: EMPTY
78560: LIST
78561: LIST
78562: PPUSH
78563: CALL_OW 446
// end ;
78567: LD_VAR 0 2
78571: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78572: LD_INT 0
78574: PPUSH
78575: PPUSH
// if not driver or not IsInUnit ( driver ) then
78576: LD_VAR 0 1
78580: NOT
78581: PUSH
78582: LD_VAR 0 1
78586: PPUSH
78587: CALL_OW 310
78591: NOT
78592: OR
78593: IFFALSE 78597
// exit ;
78595: GO 78687
// vehicle := IsInUnit ( driver ) ;
78597: LD_ADDR_VAR 0 3
78601: PUSH
78602: LD_VAR 0 1
78606: PPUSH
78607: CALL_OW 310
78611: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78612: LD_VAR 0 1
78616: PPUSH
78617: LD_STRING \
78619: PUSH
78620: LD_INT 0
78622: PUSH
78623: LD_INT 0
78625: PUSH
78626: LD_INT 0
78628: PUSH
78629: LD_INT 0
78631: PUSH
78632: LD_INT 0
78634: PUSH
78635: LD_INT 0
78637: PUSH
78638: EMPTY
78639: LIST
78640: LIST
78641: LIST
78642: LIST
78643: LIST
78644: LIST
78645: LIST
78646: PUSH
78647: LD_STRING E
78649: PUSH
78650: LD_INT 0
78652: PUSH
78653: LD_INT 0
78655: PUSH
78656: LD_VAR 0 3
78660: PUSH
78661: LD_INT 0
78663: PUSH
78664: LD_INT 0
78666: PUSH
78667: LD_INT 0
78669: PUSH
78670: EMPTY
78671: LIST
78672: LIST
78673: LIST
78674: LIST
78675: LIST
78676: LIST
78677: LIST
78678: PUSH
78679: EMPTY
78680: LIST
78681: LIST
78682: PPUSH
78683: CALL_OW 447
// end ;
78687: LD_VAR 0 2
78691: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78692: LD_INT 0
78694: PPUSH
78695: PPUSH
78696: PPUSH
// tmp := [ ] ;
78697: LD_ADDR_VAR 0 5
78701: PUSH
78702: EMPTY
78703: ST_TO_ADDR
// for i in units do
78704: LD_ADDR_VAR 0 4
78708: PUSH
78709: LD_VAR 0 1
78713: PUSH
78714: FOR_IN
78715: IFFALSE 78753
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78717: LD_ADDR_VAR 0 5
78721: PUSH
78722: LD_VAR 0 5
78726: PPUSH
78727: LD_VAR 0 5
78731: PUSH
78732: LD_INT 1
78734: PLUS
78735: PPUSH
78736: LD_VAR 0 4
78740: PPUSH
78741: CALL_OW 256
78745: PPUSH
78746: CALL_OW 2
78750: ST_TO_ADDR
78751: GO 78714
78753: POP
78754: POP
// if not tmp then
78755: LD_VAR 0 5
78759: NOT
78760: IFFALSE 78764
// exit ;
78762: GO 78812
// if asc then
78764: LD_VAR 0 2
78768: IFFALSE 78792
// result := SortListByListAsc ( units , tmp ) else
78770: LD_ADDR_VAR 0 3
78774: PUSH
78775: LD_VAR 0 1
78779: PPUSH
78780: LD_VAR 0 5
78784: PPUSH
78785: CALL_OW 76
78789: ST_TO_ADDR
78790: GO 78812
// result := SortListByListDesc ( units , tmp ) ;
78792: LD_ADDR_VAR 0 3
78796: PUSH
78797: LD_VAR 0 1
78801: PPUSH
78802: LD_VAR 0 5
78806: PPUSH
78807: CALL_OW 77
78811: ST_TO_ADDR
// end ;
78812: LD_VAR 0 3
78816: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78817: LD_INT 0
78819: PPUSH
78820: PPUSH
// task := GetTaskList ( mech ) ;
78821: LD_ADDR_VAR 0 4
78825: PUSH
78826: LD_VAR 0 1
78830: PPUSH
78831: CALL_OW 437
78835: ST_TO_ADDR
// if not task then
78836: LD_VAR 0 4
78840: NOT
78841: IFFALSE 78845
// exit ;
78843: GO 78887
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78845: LD_ADDR_VAR 0 3
78849: PUSH
78850: LD_VAR 0 4
78854: PUSH
78855: LD_INT 1
78857: ARRAY
78858: PUSH
78859: LD_INT 1
78861: ARRAY
78862: PUSH
78863: LD_STRING r
78865: EQUAL
78866: PUSH
78867: LD_VAR 0 4
78871: PUSH
78872: LD_INT 1
78874: ARRAY
78875: PUSH
78876: LD_INT 4
78878: ARRAY
78879: PUSH
78880: LD_VAR 0 2
78884: EQUAL
78885: AND
78886: ST_TO_ADDR
// end ;
78887: LD_VAR 0 3
78891: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78892: LD_INT 0
78894: PPUSH
// SetDir ( unit , d ) ;
78895: LD_VAR 0 1
78899: PPUSH
78900: LD_VAR 0 4
78904: PPUSH
78905: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78909: LD_VAR 0 1
78913: PPUSH
78914: LD_VAR 0 2
78918: PPUSH
78919: LD_VAR 0 3
78923: PPUSH
78924: LD_VAR 0 5
78928: PPUSH
78929: CALL_OW 48
// end ;
78933: LD_VAR 0 6
78937: RET
// export function ToNaturalNumber ( number ) ; begin
78938: LD_INT 0
78940: PPUSH
// result := number div 1 ;
78941: LD_ADDR_VAR 0 2
78945: PUSH
78946: LD_VAR 0 1
78950: PUSH
78951: LD_INT 1
78953: DIV
78954: ST_TO_ADDR
// if number < 0 then
78955: LD_VAR 0 1
78959: PUSH
78960: LD_INT 0
78962: LESS
78963: IFFALSE 78973
// result := 0 ;
78965: LD_ADDR_VAR 0 2
78969: PUSH
78970: LD_INT 0
78972: ST_TO_ADDR
// end ;
78973: LD_VAR 0 2
78977: RET
// export function SortByClass ( units , class ) ; var un ; begin
78978: LD_INT 0
78980: PPUSH
78981: PPUSH
// if not units or not class then
78982: LD_VAR 0 1
78986: NOT
78987: PUSH
78988: LD_VAR 0 2
78992: NOT
78993: OR
78994: IFFALSE 78998
// exit ;
78996: GO 79093
// result := [ ] ;
78998: LD_ADDR_VAR 0 3
79002: PUSH
79003: EMPTY
79004: ST_TO_ADDR
// for un in units do
79005: LD_ADDR_VAR 0 4
79009: PUSH
79010: LD_VAR 0 1
79014: PUSH
79015: FOR_IN
79016: IFFALSE 79091
// if GetClass ( un ) = class then
79018: LD_VAR 0 4
79022: PPUSH
79023: CALL_OW 257
79027: PUSH
79028: LD_VAR 0 2
79032: EQUAL
79033: IFFALSE 79060
// result := Insert ( result , 1 , un ) else
79035: LD_ADDR_VAR 0 3
79039: PUSH
79040: LD_VAR 0 3
79044: PPUSH
79045: LD_INT 1
79047: PPUSH
79048: LD_VAR 0 4
79052: PPUSH
79053: CALL_OW 2
79057: ST_TO_ADDR
79058: GO 79089
// result := Replace ( result , result + 1 , un ) ;
79060: LD_ADDR_VAR 0 3
79064: PUSH
79065: LD_VAR 0 3
79069: PPUSH
79070: LD_VAR 0 3
79074: PUSH
79075: LD_INT 1
79077: PLUS
79078: PPUSH
79079: LD_VAR 0 4
79083: PPUSH
79084: CALL_OW 1
79088: ST_TO_ADDR
79089: GO 79015
79091: POP
79092: POP
// end ;
79093: LD_VAR 0 3
79097: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79098: LD_INT 0
79100: PPUSH
79101: PPUSH
79102: PPUSH
79103: PPUSH
79104: PPUSH
79105: PPUSH
79106: PPUSH
// result := [ ] ;
79107: LD_ADDR_VAR 0 4
79111: PUSH
79112: EMPTY
79113: ST_TO_ADDR
// if x - r < 0 then
79114: LD_VAR 0 1
79118: PUSH
79119: LD_VAR 0 3
79123: MINUS
79124: PUSH
79125: LD_INT 0
79127: LESS
79128: IFFALSE 79140
// min_x := 0 else
79130: LD_ADDR_VAR 0 8
79134: PUSH
79135: LD_INT 0
79137: ST_TO_ADDR
79138: GO 79156
// min_x := x - r ;
79140: LD_ADDR_VAR 0 8
79144: PUSH
79145: LD_VAR 0 1
79149: PUSH
79150: LD_VAR 0 3
79154: MINUS
79155: ST_TO_ADDR
// if y - r < 0 then
79156: LD_VAR 0 2
79160: PUSH
79161: LD_VAR 0 3
79165: MINUS
79166: PUSH
79167: LD_INT 0
79169: LESS
79170: IFFALSE 79182
// min_y := 0 else
79172: LD_ADDR_VAR 0 7
79176: PUSH
79177: LD_INT 0
79179: ST_TO_ADDR
79180: GO 79198
// min_y := y - r ;
79182: LD_ADDR_VAR 0 7
79186: PUSH
79187: LD_VAR 0 2
79191: PUSH
79192: LD_VAR 0 3
79196: MINUS
79197: ST_TO_ADDR
// max_x := x + r ;
79198: LD_ADDR_VAR 0 9
79202: PUSH
79203: LD_VAR 0 1
79207: PUSH
79208: LD_VAR 0 3
79212: PLUS
79213: ST_TO_ADDR
// max_y := y + r ;
79214: LD_ADDR_VAR 0 10
79218: PUSH
79219: LD_VAR 0 2
79223: PUSH
79224: LD_VAR 0 3
79228: PLUS
79229: ST_TO_ADDR
// for _x = min_x to max_x do
79230: LD_ADDR_VAR 0 5
79234: PUSH
79235: DOUBLE
79236: LD_VAR 0 8
79240: DEC
79241: ST_TO_ADDR
79242: LD_VAR 0 9
79246: PUSH
79247: FOR_TO
79248: IFFALSE 79349
// for _y = min_y to max_y do
79250: LD_ADDR_VAR 0 6
79254: PUSH
79255: DOUBLE
79256: LD_VAR 0 7
79260: DEC
79261: ST_TO_ADDR
79262: LD_VAR 0 10
79266: PUSH
79267: FOR_TO
79268: IFFALSE 79345
// begin if not ValidHex ( _x , _y ) then
79270: LD_VAR 0 5
79274: PPUSH
79275: LD_VAR 0 6
79279: PPUSH
79280: CALL_OW 488
79284: NOT
79285: IFFALSE 79289
// continue ;
79287: GO 79267
// if GetResourceTypeXY ( _x , _y ) then
79289: LD_VAR 0 5
79293: PPUSH
79294: LD_VAR 0 6
79298: PPUSH
79299: CALL_OW 283
79303: IFFALSE 79343
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79305: LD_ADDR_VAR 0 4
79309: PUSH
79310: LD_VAR 0 4
79314: PPUSH
79315: LD_VAR 0 4
79319: PUSH
79320: LD_INT 1
79322: PLUS
79323: PPUSH
79324: LD_VAR 0 5
79328: PUSH
79329: LD_VAR 0 6
79333: PUSH
79334: EMPTY
79335: LIST
79336: LIST
79337: PPUSH
79338: CALL_OW 1
79342: ST_TO_ADDR
// end ;
79343: GO 79267
79345: POP
79346: POP
79347: GO 79247
79349: POP
79350: POP
// end ;
79351: LD_VAR 0 4
79355: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79356: LD_INT 0
79358: PPUSH
79359: PPUSH
79360: PPUSH
79361: PPUSH
79362: PPUSH
79363: PPUSH
79364: PPUSH
79365: PPUSH
// if not units then
79366: LD_VAR 0 1
79370: NOT
79371: IFFALSE 79375
// exit ;
79373: GO 79899
// result := UnitFilter ( units , [ f_ok ] ) ;
79375: LD_ADDR_VAR 0 3
79379: PUSH
79380: LD_VAR 0 1
79384: PPUSH
79385: LD_INT 50
79387: PUSH
79388: EMPTY
79389: LIST
79390: PPUSH
79391: CALL_OW 72
79395: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79396: LD_ADDR_VAR 0 8
79400: PUSH
79401: LD_VAR 0 1
79405: PUSH
79406: LD_INT 1
79408: ARRAY
79409: PPUSH
79410: CALL_OW 255
79414: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79415: LD_ADDR_VAR 0 10
79419: PUSH
79420: LD_INT 29
79422: PUSH
79423: LD_INT 91
79425: PUSH
79426: LD_INT 49
79428: PUSH
79429: EMPTY
79430: LIST
79431: LIST
79432: LIST
79433: ST_TO_ADDR
// if not result then
79434: LD_VAR 0 3
79438: NOT
79439: IFFALSE 79443
// exit ;
79441: GO 79899
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79443: LD_ADDR_VAR 0 5
79447: PUSH
79448: LD_INT 81
79450: PUSH
79451: LD_VAR 0 8
79455: PUSH
79456: EMPTY
79457: LIST
79458: LIST
79459: PPUSH
79460: CALL_OW 69
79464: ST_TO_ADDR
// for i in result do
79465: LD_ADDR_VAR 0 4
79469: PUSH
79470: LD_VAR 0 3
79474: PUSH
79475: FOR_IN
79476: IFFALSE 79897
// begin tag := GetTag ( i ) + 1 ;
79478: LD_ADDR_VAR 0 9
79482: PUSH
79483: LD_VAR 0 4
79487: PPUSH
79488: CALL_OW 110
79492: PUSH
79493: LD_INT 1
79495: PLUS
79496: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79497: LD_ADDR_VAR 0 7
79501: PUSH
79502: LD_VAR 0 4
79506: PPUSH
79507: CALL_OW 250
79511: PPUSH
79512: LD_VAR 0 4
79516: PPUSH
79517: CALL_OW 251
79521: PPUSH
79522: LD_INT 6
79524: PPUSH
79525: CALL 79098 0 3
79529: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79530: LD_VAR 0 4
79534: PPUSH
79535: CALL_OW 247
79539: PUSH
79540: LD_INT 2
79542: EQUAL
79543: PUSH
79544: LD_VAR 0 7
79548: AND
79549: PUSH
79550: LD_VAR 0 4
79554: PPUSH
79555: CALL_OW 264
79559: PUSH
79560: LD_VAR 0 10
79564: IN
79565: NOT
79566: AND
79567: IFFALSE 79606
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79569: LD_VAR 0 4
79573: PPUSH
79574: LD_VAR 0 7
79578: PUSH
79579: LD_INT 1
79581: ARRAY
79582: PUSH
79583: LD_INT 1
79585: ARRAY
79586: PPUSH
79587: LD_VAR 0 7
79591: PUSH
79592: LD_INT 1
79594: ARRAY
79595: PUSH
79596: LD_INT 2
79598: ARRAY
79599: PPUSH
79600: CALL_OW 116
79604: GO 79895
// if path > tag then
79606: LD_VAR 0 2
79610: PUSH
79611: LD_VAR 0 9
79615: GREATER
79616: IFFALSE 79824
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79618: LD_ADDR_VAR 0 6
79622: PUSH
79623: LD_VAR 0 5
79627: PPUSH
79628: LD_INT 91
79630: PUSH
79631: LD_VAR 0 4
79635: PUSH
79636: LD_INT 8
79638: PUSH
79639: EMPTY
79640: LIST
79641: LIST
79642: LIST
79643: PPUSH
79644: CALL_OW 72
79648: ST_TO_ADDR
// if nearEnemy then
79649: LD_VAR 0 6
79653: IFFALSE 79722
// begin if GetWeapon ( i ) = ru_time_lapser then
79655: LD_VAR 0 4
79659: PPUSH
79660: CALL_OW 264
79664: PUSH
79665: LD_INT 49
79667: EQUAL
79668: IFFALSE 79696
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79670: LD_VAR 0 4
79674: PPUSH
79675: LD_VAR 0 6
79679: PPUSH
79680: LD_VAR 0 4
79684: PPUSH
79685: CALL_OW 74
79689: PPUSH
79690: CALL_OW 112
79694: GO 79720
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79696: LD_VAR 0 4
79700: PPUSH
79701: LD_VAR 0 6
79705: PPUSH
79706: LD_VAR 0 4
79710: PPUSH
79711: CALL_OW 74
79715: PPUSH
79716: CALL_OW 115
// end else
79720: GO 79822
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79722: LD_VAR 0 4
79726: PPUSH
79727: LD_VAR 0 2
79731: PUSH
79732: LD_VAR 0 9
79736: ARRAY
79737: PUSH
79738: LD_INT 1
79740: ARRAY
79741: PPUSH
79742: LD_VAR 0 2
79746: PUSH
79747: LD_VAR 0 9
79751: ARRAY
79752: PUSH
79753: LD_INT 2
79755: ARRAY
79756: PPUSH
79757: CALL_OW 297
79761: PUSH
79762: LD_INT 6
79764: GREATER
79765: IFFALSE 79808
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79767: LD_VAR 0 4
79771: PPUSH
79772: LD_VAR 0 2
79776: PUSH
79777: LD_VAR 0 9
79781: ARRAY
79782: PUSH
79783: LD_INT 1
79785: ARRAY
79786: PPUSH
79787: LD_VAR 0 2
79791: PUSH
79792: LD_VAR 0 9
79796: ARRAY
79797: PUSH
79798: LD_INT 2
79800: ARRAY
79801: PPUSH
79802: CALL_OW 114
79806: GO 79822
// SetTag ( i , tag ) ;
79808: LD_VAR 0 4
79812: PPUSH
79813: LD_VAR 0 9
79817: PPUSH
79818: CALL_OW 109
// end else
79822: GO 79895
// if enemy then
79824: LD_VAR 0 5
79828: IFFALSE 79895
// begin if GetWeapon ( i ) = ru_time_lapser then
79830: LD_VAR 0 4
79834: PPUSH
79835: CALL_OW 264
79839: PUSH
79840: LD_INT 49
79842: EQUAL
79843: IFFALSE 79871
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79845: LD_VAR 0 4
79849: PPUSH
79850: LD_VAR 0 5
79854: PPUSH
79855: LD_VAR 0 4
79859: PPUSH
79860: CALL_OW 74
79864: PPUSH
79865: CALL_OW 112
79869: GO 79895
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79871: LD_VAR 0 4
79875: PPUSH
79876: LD_VAR 0 5
79880: PPUSH
79881: LD_VAR 0 4
79885: PPUSH
79886: CALL_OW 74
79890: PPUSH
79891: CALL_OW 115
// end ; end ;
79895: GO 79475
79897: POP
79898: POP
// end ;
79899: LD_VAR 0 3
79903: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79904: LD_INT 0
79906: PPUSH
79907: PPUSH
79908: PPUSH
// if not unit or IsInUnit ( unit ) then
79909: LD_VAR 0 1
79913: NOT
79914: PUSH
79915: LD_VAR 0 1
79919: PPUSH
79920: CALL_OW 310
79924: OR
79925: IFFALSE 79929
// exit ;
79927: GO 80020
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79929: LD_ADDR_VAR 0 4
79933: PUSH
79934: LD_VAR 0 1
79938: PPUSH
79939: CALL_OW 250
79943: PPUSH
79944: LD_VAR 0 2
79948: PPUSH
79949: LD_INT 1
79951: PPUSH
79952: CALL_OW 272
79956: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79957: LD_ADDR_VAR 0 5
79961: PUSH
79962: LD_VAR 0 1
79966: PPUSH
79967: CALL_OW 251
79971: PPUSH
79972: LD_VAR 0 2
79976: PPUSH
79977: LD_INT 1
79979: PPUSH
79980: CALL_OW 273
79984: ST_TO_ADDR
// if ValidHex ( x , y ) then
79985: LD_VAR 0 4
79989: PPUSH
79990: LD_VAR 0 5
79994: PPUSH
79995: CALL_OW 488
79999: IFFALSE 80020
// ComTurnXY ( unit , x , y ) ;
80001: LD_VAR 0 1
80005: PPUSH
80006: LD_VAR 0 4
80010: PPUSH
80011: LD_VAR 0 5
80015: PPUSH
80016: CALL_OW 118
// end ;
80020: LD_VAR 0 3
80024: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80025: LD_INT 0
80027: PPUSH
80028: PPUSH
// result := false ;
80029: LD_ADDR_VAR 0 3
80033: PUSH
80034: LD_INT 0
80036: ST_TO_ADDR
// if not units then
80037: LD_VAR 0 2
80041: NOT
80042: IFFALSE 80046
// exit ;
80044: GO 80091
// for i in units do
80046: LD_ADDR_VAR 0 4
80050: PUSH
80051: LD_VAR 0 2
80055: PUSH
80056: FOR_IN
80057: IFFALSE 80089
// if See ( side , i ) then
80059: LD_VAR 0 1
80063: PPUSH
80064: LD_VAR 0 4
80068: PPUSH
80069: CALL_OW 292
80073: IFFALSE 80087
// begin result := true ;
80075: LD_ADDR_VAR 0 3
80079: PUSH
80080: LD_INT 1
80082: ST_TO_ADDR
// exit ;
80083: POP
80084: POP
80085: GO 80091
// end ;
80087: GO 80056
80089: POP
80090: POP
// end ;
80091: LD_VAR 0 3
80095: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80096: LD_INT 0
80098: PPUSH
80099: PPUSH
80100: PPUSH
80101: PPUSH
// if not unit or not points then
80102: LD_VAR 0 1
80106: NOT
80107: PUSH
80108: LD_VAR 0 2
80112: NOT
80113: OR
80114: IFFALSE 80118
// exit ;
80116: GO 80208
// dist := 99999 ;
80118: LD_ADDR_VAR 0 5
80122: PUSH
80123: LD_INT 99999
80125: ST_TO_ADDR
// for i in points do
80126: LD_ADDR_VAR 0 4
80130: PUSH
80131: LD_VAR 0 2
80135: PUSH
80136: FOR_IN
80137: IFFALSE 80206
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80139: LD_ADDR_VAR 0 6
80143: PUSH
80144: LD_VAR 0 1
80148: PPUSH
80149: LD_VAR 0 4
80153: PUSH
80154: LD_INT 1
80156: ARRAY
80157: PPUSH
80158: LD_VAR 0 4
80162: PUSH
80163: LD_INT 2
80165: ARRAY
80166: PPUSH
80167: CALL_OW 297
80171: ST_TO_ADDR
// if tmpDist < dist then
80172: LD_VAR 0 6
80176: PUSH
80177: LD_VAR 0 5
80181: LESS
80182: IFFALSE 80204
// begin result := i ;
80184: LD_ADDR_VAR 0 3
80188: PUSH
80189: LD_VAR 0 4
80193: ST_TO_ADDR
// dist := tmpDist ;
80194: LD_ADDR_VAR 0 5
80198: PUSH
80199: LD_VAR 0 6
80203: ST_TO_ADDR
// end ; end ;
80204: GO 80136
80206: POP
80207: POP
// end ;
80208: LD_VAR 0 3
80212: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80213: LD_INT 0
80215: PPUSH
// uc_side := side ;
80216: LD_ADDR_OWVAR 20
80220: PUSH
80221: LD_VAR 0 1
80225: ST_TO_ADDR
// uc_nation := 3 ;
80226: LD_ADDR_OWVAR 21
80230: PUSH
80231: LD_INT 3
80233: ST_TO_ADDR
// vc_chassis := 25 ;
80234: LD_ADDR_OWVAR 37
80238: PUSH
80239: LD_INT 25
80241: ST_TO_ADDR
// vc_engine := engine_siberite ;
80242: LD_ADDR_OWVAR 39
80246: PUSH
80247: LD_INT 3
80249: ST_TO_ADDR
// vc_control := control_computer ;
80250: LD_ADDR_OWVAR 38
80254: PUSH
80255: LD_INT 3
80257: ST_TO_ADDR
// vc_weapon := 59 ;
80258: LD_ADDR_OWVAR 40
80262: PUSH
80263: LD_INT 59
80265: ST_TO_ADDR
// result := CreateVehicle ;
80266: LD_ADDR_VAR 0 5
80270: PUSH
80271: CALL_OW 45
80275: ST_TO_ADDR
// SetDir ( result , d ) ;
80276: LD_VAR 0 5
80280: PPUSH
80281: LD_VAR 0 4
80285: PPUSH
80286: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80290: LD_VAR 0 5
80294: PPUSH
80295: LD_VAR 0 2
80299: PPUSH
80300: LD_VAR 0 3
80304: PPUSH
80305: LD_INT 0
80307: PPUSH
80308: CALL_OW 48
// end ;
80312: LD_VAR 0 5
80316: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80317: LD_INT 0
80319: PPUSH
80320: PPUSH
80321: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80322: LD_ADDR_VAR 0 2
80326: PUSH
80327: LD_INT 0
80329: PUSH
80330: LD_INT 0
80332: PUSH
80333: LD_INT 0
80335: PUSH
80336: LD_INT 0
80338: PUSH
80339: EMPTY
80340: LIST
80341: LIST
80342: LIST
80343: LIST
80344: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80345: LD_VAR 0 1
80349: NOT
80350: PUSH
80351: LD_VAR 0 1
80355: PPUSH
80356: CALL_OW 264
80360: PUSH
80361: LD_INT 12
80363: PUSH
80364: LD_INT 51
80366: PUSH
80367: LD_INT 32
80369: PUSH
80370: LD_INT 89
80372: PUSH
80373: EMPTY
80374: LIST
80375: LIST
80376: LIST
80377: LIST
80378: IN
80379: NOT
80380: OR
80381: IFFALSE 80385
// exit ;
80383: GO 80483
// for i := 1 to 3 do
80385: LD_ADDR_VAR 0 3
80389: PUSH
80390: DOUBLE
80391: LD_INT 1
80393: DEC
80394: ST_TO_ADDR
80395: LD_INT 3
80397: PUSH
80398: FOR_TO
80399: IFFALSE 80481
// begin tmp := GetCargo ( cargo , i ) ;
80401: LD_ADDR_VAR 0 4
80405: PUSH
80406: LD_VAR 0 1
80410: PPUSH
80411: LD_VAR 0 3
80415: PPUSH
80416: CALL_OW 289
80420: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80421: LD_ADDR_VAR 0 2
80425: PUSH
80426: LD_VAR 0 2
80430: PPUSH
80431: LD_VAR 0 3
80435: PPUSH
80436: LD_VAR 0 4
80440: PPUSH
80441: CALL_OW 1
80445: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80446: LD_ADDR_VAR 0 2
80450: PUSH
80451: LD_VAR 0 2
80455: PPUSH
80456: LD_INT 4
80458: PPUSH
80459: LD_VAR 0 2
80463: PUSH
80464: LD_INT 4
80466: ARRAY
80467: PUSH
80468: LD_VAR 0 4
80472: PLUS
80473: PPUSH
80474: CALL_OW 1
80478: ST_TO_ADDR
// end ;
80479: GO 80398
80481: POP
80482: POP
// end ;
80483: LD_VAR 0 2
80487: RET
// export function Length ( array ) ; begin
80488: LD_INT 0
80490: PPUSH
// result := array + 0 ;
80491: LD_ADDR_VAR 0 2
80495: PUSH
80496: LD_VAR 0 1
80500: PUSH
80501: LD_INT 0
80503: PLUS
80504: ST_TO_ADDR
// end ;
80505: LD_VAR 0 2
80509: RET
// export function PrepareArray ( array ) ; begin
80510: LD_INT 0
80512: PPUSH
// result := array diff 0 ;
80513: LD_ADDR_VAR 0 2
80517: PUSH
80518: LD_VAR 0 1
80522: PUSH
80523: LD_INT 0
80525: DIFF
80526: ST_TO_ADDR
// if not result [ 1 ] then
80527: LD_VAR 0 2
80531: PUSH
80532: LD_INT 1
80534: ARRAY
80535: NOT
80536: IFFALSE 80556
// result := Delete ( result , 1 ) ;
80538: LD_ADDR_VAR 0 2
80542: PUSH
80543: LD_VAR 0 2
80547: PPUSH
80548: LD_INT 1
80550: PPUSH
80551: CALL_OW 3
80555: ST_TO_ADDR
// end ;
80556: LD_VAR 0 2
80560: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80561: LD_INT 0
80563: PPUSH
80564: PPUSH
80565: PPUSH
80566: PPUSH
// sibRocketRange := 25 ;
80567: LD_ADDR_VAR 0 6
80571: PUSH
80572: LD_INT 25
80574: ST_TO_ADDR
// result := false ;
80575: LD_ADDR_VAR 0 4
80579: PUSH
80580: LD_INT 0
80582: ST_TO_ADDR
// for i := 0 to 5 do
80583: LD_ADDR_VAR 0 5
80587: PUSH
80588: DOUBLE
80589: LD_INT 0
80591: DEC
80592: ST_TO_ADDR
80593: LD_INT 5
80595: PUSH
80596: FOR_TO
80597: IFFALSE 80664
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80599: LD_VAR 0 1
80603: PPUSH
80604: LD_VAR 0 5
80608: PPUSH
80609: LD_VAR 0 6
80613: PPUSH
80614: CALL_OW 272
80618: PPUSH
80619: LD_VAR 0 2
80623: PPUSH
80624: LD_VAR 0 5
80628: PPUSH
80629: LD_VAR 0 6
80633: PPUSH
80634: CALL_OW 273
80638: PPUSH
80639: LD_VAR 0 3
80643: PPUSH
80644: CALL_OW 309
80648: IFFALSE 80662
// begin result := true ;
80650: LD_ADDR_VAR 0 4
80654: PUSH
80655: LD_INT 1
80657: ST_TO_ADDR
// exit ;
80658: POP
80659: POP
80660: GO 80666
// end ;
80662: GO 80596
80664: POP
80665: POP
// end ;
80666: LD_VAR 0 4
80670: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80671: LD_INT 0
80673: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80674: LD_VAR 0 1
80678: PPUSH
80679: LD_VAR 0 2
80683: PPUSH
80684: LD_INT 0
80686: PPUSH
80687: LD_INT 0
80689: PPUSH
80690: LD_INT 1
80692: PPUSH
80693: LD_INT 0
80695: PPUSH
80696: CALL_OW 587
// end ; end_of_file
80700: LD_VAR 0 3
80704: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80705: LD_VAR 0 1
80709: PUSH
80710: LD_INT 200
80712: DOUBLE
80713: GREATEREQUAL
80714: IFFALSE 80722
80716: LD_INT 299
80718: DOUBLE
80719: LESSEQUAL
80720: IFTRUE 80724
80722: GO 80756
80724: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80725: LD_VAR 0 1
80729: PPUSH
80730: LD_VAR 0 2
80734: PPUSH
80735: LD_VAR 0 3
80739: PPUSH
80740: LD_VAR 0 4
80744: PPUSH
80745: LD_VAR 0 5
80749: PPUSH
80750: CALL 35371 0 5
80754: GO 80833
80756: LD_INT 300
80758: DOUBLE
80759: GREATEREQUAL
80760: IFFALSE 80768
80762: LD_INT 399
80764: DOUBLE
80765: LESSEQUAL
80766: IFTRUE 80770
80768: GO 80832
80770: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80771: LD_VAR 0 1
80775: PPUSH
80776: LD_VAR 0 2
80780: PPUSH
80781: LD_VAR 0 3
80785: PPUSH
80786: LD_VAR 0 4
80790: PPUSH
80791: LD_VAR 0 5
80795: PPUSH
80796: LD_VAR 0 6
80800: PPUSH
80801: LD_VAR 0 7
80805: PPUSH
80806: LD_VAR 0 8
80810: PPUSH
80811: LD_VAR 0 9
80815: PPUSH
80816: LD_VAR 0 10
80820: PPUSH
80821: LD_VAR 0 11
80825: PPUSH
80826: CALL 31704 0 11
80830: GO 80833
80832: POP
// end ;
80833: PPOPN 11
80835: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80836: LD_VAR 0 1
80840: PPUSH
80841: LD_VAR 0 2
80845: PPUSH
80846: LD_VAR 0 3
80850: PPUSH
80851: LD_VAR 0 4
80855: PPUSH
80856: LD_VAR 0 5
80860: PPUSH
80861: CALL 35107 0 5
// end ; end_of_file
80865: PPOPN 5
80867: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80868: LD_VAR 0 1
80872: PPUSH
80873: LD_VAR 0 2
80877: PPUSH
80878: LD_VAR 0 3
80882: PPUSH
80883: LD_VAR 0 4
80887: PPUSH
80888: LD_VAR 0 5
80892: PPUSH
80893: LD_VAR 0 6
80897: PPUSH
80898: CALL 19324 0 6
// end ;
80902: PPOPN 6
80904: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80905: LD_INT 0
80907: PPUSH
// begin if not units then
80908: LD_VAR 0 1
80912: NOT
80913: IFFALSE 80917
// exit ;
80915: GO 80917
// end ;
80917: PPOPN 7
80919: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80920: CALL 19218 0 0
// end ;
80924: PPOPN 1
80926: END
