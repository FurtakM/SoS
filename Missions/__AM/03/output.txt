// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3059 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2273 0 0
// PrepareWesternBase ;
  41: CALL 2502 0 0
// Action ;
  45: CALL 5323 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
// uc_side := 4 ;
1155: LD_ADDR_OWVAR 20
1159: PUSH
1160: LD_INT 4
1162: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1163: LD_ADDR_EXP 46
1167: PUSH
1168: LD_STRING Powell
1170: PPUSH
1171: LD_INT 0
1173: PPUSH
1174: LD_STRING 
1176: PPUSH
1177: CALL 38595 0 3
1181: ST_TO_ADDR
// uc_side := 1 ;
1182: LD_ADDR_OWVAR 20
1186: PUSH
1187: LD_INT 1
1189: ST_TO_ADDR
// uc_nation := 1 ;
1190: LD_ADDR_OWVAR 21
1194: PUSH
1195: LD_INT 1
1197: ST_TO_ADDR
// if debug then
1198: LD_EXP 1
1202: IFFALSE 1332
// begin for i = 1 to 4 do
1204: LD_ADDR_VAR 0 2
1208: PUSH
1209: DOUBLE
1210: LD_INT 1
1212: DEC
1213: ST_TO_ADDR
1214: LD_INT 4
1216: PUSH
1217: FOR_TO
1218: IFFALSE 1269
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1220: LD_INT 0
1222: PPUSH
1223: LD_INT 1
1225: PPUSH
1226: LD_INT 2
1228: PPUSH
1229: CALL_OW 12
1233: PPUSH
1234: LD_INT 3
1236: PPUSH
1237: CALL_OW 380
// un := CreateHuman ;
1241: LD_ADDR_VAR 0 3
1245: PUSH
1246: CALL_OW 44
1250: ST_TO_ADDR
// others := others ^ un ;
1251: LD_ADDR_VAR 0 5
1255: PUSH
1256: LD_VAR 0 5
1260: PUSH
1261: LD_VAR 0 3
1265: ADD
1266: ST_TO_ADDR
// end ;
1267: GO 1217
1269: POP
1270: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1271: LD_ADDR_VAR 0 6
1275: PUSH
1276: LD_INT 21
1278: PUSH
1279: LD_INT 1
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: LD_INT 51
1287: PUSH
1288: LD_INT 90
1290: PUSH
1291: LD_INT 504
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 21
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: LD_INT 51
1313: PUSH
1314: LD_INT 80
1316: PUSH
1317: LD_INT 750
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1332: LD_ADDR_EXP 37
1336: PUSH
1337: LD_STRING JMM
1339: PPUSH
1340: LD_EXP 1
1344: NOT
1345: PPUSH
1346: LD_EXP 3
1350: PPUSH
1351: CALL 38595 0 3
1355: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1356: LD_ADDR_EXP 38
1360: PUSH
1361: LD_STRING Bobby
1363: PPUSH
1364: LD_EXP 1
1368: NOT
1369: PPUSH
1370: LD_EXP 3
1374: PPUSH
1375: CALL 38595 0 3
1379: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1380: LD_ADDR_EXP 39
1384: PUSH
1385: LD_STRING Cyrus
1387: PPUSH
1388: LD_EXP 1
1392: NOT
1393: PPUSH
1394: LD_EXP 3
1398: PPUSH
1399: CALL 38595 0 3
1403: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1404: LD_ADDR_EXP 40
1408: PUSH
1409: LD_STRING Lisa
1411: PPUSH
1412: LD_EXP 1
1416: NOT
1417: PPUSH
1418: LD_EXP 3
1422: PPUSH
1423: CALL 38595 0 3
1427: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1428: LD_ADDR_EXP 41
1432: PUSH
1433: LD_STRING Khatam
1435: PPUSH
1436: LD_EXP 1
1440: NOT
1441: PPUSH
1442: LD_EXP 3
1446: PPUSH
1447: CALL 38595 0 3
1451: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1452: LD_ADDR_EXP 42
1456: PUSH
1457: LD_STRING Brian
1459: PPUSH
1460: LD_EXP 1
1464: NOT
1465: PPUSH
1466: LD_EXP 3
1470: PPUSH
1471: CALL 38595 0 3
1475: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1476: LD_ADDR_EXP 43
1480: PUSH
1481: LD_STRING Jerry
1483: PPUSH
1484: LD_EXP 1
1488: NOT
1489: PPUSH
1490: LD_EXP 3
1494: PPUSH
1495: CALL 38595 0 3
1499: ST_TO_ADDR
// if Bobby then
1500: LD_EXP 38
1504: IFFALSE 1535
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1506: LD_ADDR_VAR 0 4
1510: PUSH
1511: LD_VAR 0 4
1515: PPUSH
1516: LD_VAR 0 4
1520: PUSH
1521: LD_INT 1
1523: PLUS
1524: PPUSH
1525: LD_EXP 38
1529: PPUSH
1530: CALL_OW 2
1534: ST_TO_ADDR
// if Cyrus then
1535: LD_EXP 39
1539: IFFALSE 1570
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_VAR 0 4
1550: PPUSH
1551: LD_VAR 0 4
1555: PUSH
1556: LD_INT 1
1558: PLUS
1559: PPUSH
1560: LD_EXP 39
1564: PPUSH
1565: CALL_OW 2
1569: ST_TO_ADDR
// if Lisa then
1570: LD_EXP 40
1574: IFFALSE 1605
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1576: LD_ADDR_VAR 0 4
1580: PUSH
1581: LD_VAR 0 4
1585: PPUSH
1586: LD_VAR 0 4
1590: PUSH
1591: LD_INT 1
1593: PLUS
1594: PPUSH
1595: LD_EXP 40
1599: PPUSH
1600: CALL_OW 2
1604: ST_TO_ADDR
// if Khatam then
1605: LD_EXP 41
1609: IFFALSE 1640
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1611: LD_ADDR_VAR 0 4
1615: PUSH
1616: LD_VAR 0 4
1620: PPUSH
1621: LD_VAR 0 4
1625: PUSH
1626: LD_INT 1
1628: PLUS
1629: PPUSH
1630: LD_EXP 41
1634: PPUSH
1635: CALL_OW 2
1639: ST_TO_ADDR
// if Brian then
1640: LD_EXP 42
1644: IFFALSE 1675
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1646: LD_ADDR_VAR 0 4
1650: PUSH
1651: LD_VAR 0 4
1655: PPUSH
1656: LD_VAR 0 4
1660: PUSH
1661: LD_INT 1
1663: PLUS
1664: PPUSH
1665: LD_EXP 42
1669: PPUSH
1670: CALL_OW 2
1674: ST_TO_ADDR
// if Jerry then
1675: LD_EXP 43
1679: IFFALSE 1710
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1681: LD_ADDR_VAR 0 4
1685: PUSH
1686: LD_VAR 0 4
1690: PPUSH
1691: LD_VAR 0 4
1695: PUSH
1696: LD_INT 1
1698: PLUS
1699: PPUSH
1700: LD_EXP 43
1704: PPUSH
1705: CALL_OW 2
1709: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1710: LD_STRING 02_other_survivors
1712: PPUSH
1713: CALL_OW 28
1717: IFFALSE 1732
// others := CreateCharacterSet ( 02_other_survivors ) ;
1719: LD_ADDR_VAR 0 5
1723: PUSH
1724: LD_STRING 02_other_survivors
1726: PPUSH
1727: CALL_OW 31
1731: ST_TO_ADDR
// if others then
1732: LD_VAR 0 5
1736: IFFALSE 1761
// begin tmp := tmp ^ others ;
1738: LD_ADDR_VAR 0 4
1742: PUSH
1743: LD_VAR 0 4
1747: PUSH
1748: LD_VAR 0 5
1752: ADD
1753: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1754: LD_STRING 02_other_survivors
1756: PPUSH
1757: CALL_OW 40
// end ; jmm_units := tmp ;
1761: LD_ADDR_EXP 4
1765: PUSH
1766: LD_VAR 0 4
1770: ST_TO_ADDR
// if not vehicles then
1771: LD_VAR 0 6
1775: NOT
1776: IFFALSE 1794
// vehicles := LoadVariable ( 02_tanks_1 , 0 ) ;
1778: LD_ADDR_VAR 0 6
1782: PUSH
1783: LD_STRING 02_tanks_1
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: CALL_OW 30
1793: ST_TO_ADDR
// if vehicles then
1794: LD_VAR 0 6
1798: IFFALSE 1992
// begin got_mech := false ;
1800: LD_ADDR_VAR 0 7
1804: PUSH
1805: LD_INT 0
1807: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
1808: LD_VAR 0 4
1812: PPUSH
1813: LD_INT 25
1815: PUSH
1816: LD_INT 3
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PPUSH
1823: CALL_OW 72
1827: IFFALSE 1837
// got_mech := true ;
1829: LD_ADDR_VAR 0 7
1833: PUSH
1834: LD_INT 1
1836: ST_TO_ADDR
// for i = 1 to vehicles do
1837: LD_ADDR_VAR 0 2
1841: PUSH
1842: DOUBLE
1843: LD_INT 1
1845: DEC
1846: ST_TO_ADDR
1847: LD_VAR 0 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1990
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
1855: LD_ADDR_VAR 0 3
1859: PUSH
1860: LD_INT 1
1862: PPUSH
1863: LD_INT 3
1865: PPUSH
1866: LD_VAR 0 6
1870: PUSH
1871: LD_VAR 0 2
1875: ARRAY
1876: PUSH
1877: LD_INT 1
1879: ARRAY
1880: PPUSH
1881: LD_VAR 0 6
1885: PUSH
1886: LD_VAR 0 2
1890: ARRAY
1891: PUSH
1892: LD_INT 2
1894: ARRAY
1895: PPUSH
1896: LD_VAR 0 6
1900: PUSH
1901: LD_VAR 0 2
1905: ARRAY
1906: PUSH
1907: LD_INT 3
1909: ARRAY
1910: PPUSH
1911: LD_VAR 0 6
1915: PUSH
1916: LD_VAR 0 2
1920: ARRAY
1921: PUSH
1922: LD_INT 4
1924: ARRAY
1925: PPUSH
1926: LD_INT 40
1928: PPUSH
1929: CALL 497 0 7
1933: ST_TO_ADDR
// if not got_mech then
1934: LD_VAR 0 7
1938: NOT
1939: IFFALSE 1965
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
1941: LD_VAR 0 3
1945: PPUSH
1946: LD_VAR 0 6
1950: PUSH
1951: LD_VAR 0 2
1955: ARRAY
1956: PUSH
1957: LD_INT 6
1959: ARRAY
1960: PPUSH
1961: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
1965: LD_ADDR_VAR 0 4
1969: PUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: LD_VAR 0 3
1982: PPUSH
1983: CALL_OW 2
1987: ST_TO_ADDR
// end ;
1988: GO 1852
1990: POP
1991: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
1992: LD_EXP 37
1996: PPUSH
1997: LD_INT 194
1999: PPUSH
2000: LD_INT 119
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL_OW 48
// if tmp then
2010: LD_VAR 0 4
2014: IFFALSE 2202
// begin for i in tmp do
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: LD_VAR 0 4
2025: PUSH
2026: FOR_IN
2027: IFFALSE 2200
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2029: LD_VAR 0 2
2033: PPUSH
2034: CALL_OW 257
2038: PUSH
2039: LD_INT 1
2041: NONEQUAL
2042: PUSH
2043: LD_VAR 0 2
2047: PUSH
2048: LD_EXP 41
2052: NONEQUAL
2053: AND
2054: IFFALSE 2068
// SetClass ( i , 1 ) ;
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_INT 1
2063: PPUSH
2064: CALL_OW 336
// if i = Khatam then
2068: LD_VAR 0 2
2072: PUSH
2073: LD_EXP 41
2077: EQUAL
2078: IFFALSE 2092
// SetClass ( i , 4 ) ;
2080: LD_VAR 0 2
2084: PPUSH
2085: LD_INT 4
2087: PPUSH
2088: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2092: LD_ADDR_VAR 0 8
2096: PUSH
2097: LD_INT 22
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 21
2109: PUSH
2110: LD_INT 2
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 58
2119: PUSH
2120: EMPTY
2121: LIST
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: PPUSH
2128: CALL_OW 69
2132: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2133: LD_VAR 0 2
2137: PPUSH
2138: CALL_OW 247
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: PUSH
2147: LD_VAR 0 8
2151: AND
2152: IFFALSE 2174
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2154: LD_VAR 0 2
2158: PPUSH
2159: LD_VAR 0 8
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: CALL_OW 52
2172: GO 2189
// PlaceUnitArea ( i , startArea , false ) ;
2174: LD_VAR 0 2
2178: PPUSH
2179: LD_INT 1
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 49
// ComHold ( i ) ;
2189: LD_VAR 0 2
2193: PPUSH
2194: CALL_OW 140
// end ;
2198: GO 2026
2200: POP
2201: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2202: LD_ADDR_EXP 7
2206: PUSH
2207: LD_STRING 02_mikhailStatus_1
2209: PPUSH
2210: LD_INT 0
2212: PPUSH
2213: CALL_OW 30
2217: ST_TO_ADDR
// if not bierezov_exist and not debug then
2218: LD_EXP 7
2222: NOT
2223: PUSH
2224: LD_EXP 1
2228: NOT
2229: AND
2230: IFFALSE 2234
// exit ;
2232: GO 2268
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2234: LD_ADDR_EXP 45
2238: PUSH
2239: LD_STRING Mikhail
2241: PPUSH
2242: LD_INT 0
2244: PPUSH
2245: LD_STRING 
2247: PPUSH
2248: CALL 38595 0 3
2252: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2253: LD_EXP 45
2257: PPUSH
2258: LD_INT 1
2260: PPUSH
2261: LD_INT 0
2263: PPUSH
2264: CALL_OW 49
// end ;
2268: LD_VAR 0 1
2272: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2273: LD_INT 0
2275: PPUSH
2276: PPUSH
2277: PPUSH
2278: PPUSH
// uc_side := 4 ;
2279: LD_ADDR_OWVAR 20
2283: PUSH
2284: LD_INT 4
2286: ST_TO_ADDR
// uc_nation := 1 ;
2287: LD_ADDR_OWVAR 21
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2295: LD_ADDR_EXP 44
2299: PUSH
2300: LD_STRING Cornell
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: LD_STRING 
2308: PPUSH
2309: CALL 38595 0 3
2313: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2314: LD_ADDR_EXP 6
2318: PUSH
2319: LD_INT 9
2321: PUSH
2322: LD_EXP 4
2326: MINUS
2327: ST_TO_ADDR
// tmp := [ ] ;
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: EMPTY
2334: ST_TO_ADDR
// if cornel_units < 4 then
2335: LD_EXP 6
2339: PUSH
2340: LD_INT 4
2342: LESS
2343: IFFALSE 2353
// cornel_units := 4 ;
2345: LD_ADDR_EXP 6
2349: PUSH
2350: LD_INT 4
2352: ST_TO_ADDR
// for i = 1 to cornel_units do
2353: LD_ADDR_VAR 0 4
2357: PUSH
2358: DOUBLE
2359: LD_INT 1
2361: DEC
2362: ST_TO_ADDR
2363: LD_EXP 6
2367: PUSH
2368: FOR_TO
2369: IFFALSE 2467
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2371: LD_INT 0
2373: PPUSH
2374: LD_INT 1
2376: PUSH
2377: LD_INT 1
2379: PUSH
2380: LD_INT 1
2382: PUSH
2383: LD_INT 2
2385: PUSH
2386: LD_INT 4
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: PUSH
2396: LD_VAR 0 4
2400: PUSH
2401: LD_INT 5
2403: MOD
2404: PUSH
2405: LD_INT 1
2407: PLUS
2408: ARRAY
2409: PPUSH
2410: LD_INT 2
2412: PPUSH
2413: CALL_OW 380
// un := CreateHuman ;
2417: LD_ADDR_VAR 0 3
2421: PUSH
2422: CALL_OW 44
2426: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_VAR 0 2
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_VAR 0 3
2444: PPUSH
2445: CALL_OW 2
2449: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2450: LD_VAR 0 3
2454: PPUSH
2455: LD_INT 2
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: CALL_OW 49
// end ;
2465: GO 2368
2467: POP
2468: POP
// cornel_units := tmp ;
2469: LD_ADDR_EXP 6
2473: PUSH
2474: LD_VAR 0 2
2478: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2479: LD_EXP 44
2483: PPUSH
2484: LD_INT 191
2486: PPUSH
2487: LD_INT 106
2489: PPUSH
2490: LD_INT 0
2492: PPUSH
2493: CALL_OW 48
// end ;
2497: LD_VAR 0 1
2501: RET
// export function PrepareWesternBase ; var i ; begin
2502: LD_INT 0
2504: PPUSH
2505: PPUSH
// uc_side := 8 ;
2506: LD_ADDR_OWVAR 20
2510: PUSH
2511: LD_INT 8
2513: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2514: LD_ADDR_EXP 47
2518: PUSH
2519: LD_STRING Lynch
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: LD_STRING 
2527: PPUSH
2528: CALL 38595 0 3
2532: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2533: LD_ADDR_EXP 48
2537: PUSH
2538: LD_STRING Walker
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: LD_STRING 
2546: PPUSH
2547: CALL 38595 0 3
2551: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2552: LD_ADDR_EXP 49
2556: PUSH
2557: LD_STRING Turner
2559: PPUSH
2560: LD_INT 0
2562: PPUSH
2563: LD_STRING 
2565: PPUSH
2566: CALL 38595 0 3
2570: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2571: LD_ADDR_EXP 50
2575: PUSH
2576: LD_STRING Jillian
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: LD_STRING 
2584: PPUSH
2585: CALL 38595 0 3
2589: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: LD_EXP 47
2599: PUSH
2600: LD_EXP 48
2604: PUSH
2605: LD_EXP 49
2609: PUSH
2610: LD_EXP 50
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: PUSH
2621: FOR_IN
2622: IFFALSE 2650
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
2624: LD_VAR 0 2
2628: PPUSH
2629: LD_INT 3
2631: PPUSH
2632: LD_INT 0
2634: PPUSH
2635: CALL_OW 49
// ComHold ( i ) ;
2639: LD_VAR 0 2
2643: PPUSH
2644: CALL_OW 140
// end ;
2648: GO 2621
2650: POP
2651: POP
// end ;
2652: LD_VAR 0 1
2656: RET
// export function SelectGroup ; var units , selected , i ; begin
2657: LD_INT 0
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
2663: LD_ADDR_VAR 0 2
2667: PUSH
2668: LD_EXP 37
2672: PUSH
2673: LD_INT -3
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PUSH
2680: LD_EXP 4
2684: ADD
2685: PUSH
2686: LD_INT -2
2688: PUSH
2689: LD_INT -4
2691: PUSH
2692: LD_EXP 44
2696: PUSH
2697: LD_EXP 45
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: ADD
2708: PUSH
2709: LD_INT -3
2711: PUSH
2712: EMPTY
2713: LIST
2714: ADD
2715: PUSH
2716: LD_EXP 6
2720: ADD
2721: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
2722: LD_ADDR_VAR 0 3
2726: PUSH
2727: LD_EXP 37
2731: PUSH
2732: LD_STRING Select four characters to go with you
2734: PPUSH
2735: LD_INT 4
2737: PPUSH
2738: LD_INT 4
2740: PPUSH
2741: LD_VAR 0 2
2745: PPUSH
2746: EMPTY
2747: PPUSH
2748: CALL_OW 42
2752: ADD
2753: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
2754: LD_ADDR_EXP 6
2758: PUSH
2759: LD_EXP 4
2763: PUSH
2764: LD_EXP 6
2768: UNION
2769: PUSH
2770: LD_VAR 0 3
2774: DIFF
2775: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_EXP 6
2785: PUSH
2786: LD_EXP 45
2790: ADD
2791: PUSH
2792: FOR_IN
2793: IFFALSE 2824
// if GetSide ( i ) = 1 then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 255
2804: PUSH
2805: LD_INT 1
2807: EQUAL
2808: IFFALSE 2822
// SetSide ( i , 4 ) ;
2810: LD_VAR 0 4
2814: PPUSH
2815: LD_INT 4
2817: PPUSH
2818: CALL_OW 235
2822: GO 2792
2824: POP
2825: POP
// for i in selected do
2826: LD_ADDR_VAR 0 4
2830: PUSH
2831: LD_VAR 0 3
2835: PUSH
2836: FOR_IN
2837: IFFALSE 2868
// if GetSide ( i ) = 4 then
2839: LD_VAR 0 4
2843: PPUSH
2844: CALL_OW 255
2848: PUSH
2849: LD_INT 4
2851: EQUAL
2852: IFFALSE 2866
// SetSide ( i , 1 ) ;
2854: LD_VAR 0 4
2858: PPUSH
2859: LD_INT 1
2861: PPUSH
2862: CALL_OW 235
2866: GO 2836
2868: POP
2869: POP
// jmm_units := jmm_units diff cornel_units ;
2870: LD_ADDR_EXP 4
2874: PUSH
2875: LD_EXP 4
2879: PUSH
2880: LD_EXP 6
2884: DIFF
2885: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
2886: LD_EXP 38
2890: PPUSH
2891: CALL_OW 255
2895: PUSH
2896: LD_INT 4
2898: EQUAL
2899: IFFALSE 2914
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
2901: LD_EXP 3
2905: PUSH
2906: LD_STRING Bobby
2908: STR
2909: PPUSH
2910: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
2914: LD_EXP 39
2918: PPUSH
2919: CALL_OW 255
2923: PUSH
2924: LD_INT 4
2926: EQUAL
2927: IFFALSE 2942
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
2929: LD_EXP 3
2933: PUSH
2934: LD_STRING Cyrus
2936: STR
2937: PPUSH
2938: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
2942: LD_EXP 40
2946: PPUSH
2947: CALL_OW 255
2951: PUSH
2952: LD_INT 4
2954: EQUAL
2955: IFFALSE 2970
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
2957: LD_EXP 3
2961: PUSH
2962: LD_STRING Lisa
2964: STR
2965: PPUSH
2966: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
2970: LD_EXP 41
2974: PPUSH
2975: CALL_OW 255
2979: PUSH
2980: LD_INT 4
2982: EQUAL
2983: IFFALSE 2998
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
2985: LD_EXP 3
2989: PUSH
2990: LD_STRING Khatam
2992: STR
2993: PPUSH
2994: CALL_OW 40
// if GetSide ( Brian ) = 4 then
2998: LD_EXP 42
3002: PPUSH
3003: CALL_OW 255
3007: PUSH
3008: LD_INT 4
3010: EQUAL
3011: IFFALSE 3026
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3013: LD_EXP 3
3017: PUSH
3018: LD_STRING Brian
3020: STR
3021: PPUSH
3022: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3026: LD_EXP 43
3030: PPUSH
3031: CALL_OW 255
3035: PUSH
3036: LD_INT 4
3038: EQUAL
3039: IFFALSE 3054
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3041: LD_EXP 3
3045: PUSH
3046: LD_STRING Jerry
3048: STR
3049: PPUSH
3050: CALL_OW 40
// end ; end_of_file
3054: LD_VAR 0 1
3058: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3059: LD_INT 0
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
3065: PPUSH
3066: PPUSH
3067: PPUSH
3068: PPUSH
3069: PPUSH
3070: PPUSH
3071: PPUSH
3072: PPUSH
3073: PPUSH
// ru_alert := false ;
3074: LD_ADDR_EXP 60
3078: PUSH
3079: LD_INT 0
3081: ST_TO_ADDR
// ru_produce_list := [ ] ;
3082: LD_ADDR_EXP 57
3086: PUSH
3087: EMPTY
3088: ST_TO_ADDR
// if Difficulty > 1 then
3089: LD_OWVAR 67
3093: PUSH
3094: LD_INT 1
3096: GREATER
3097: IFFALSE 3185
// begin uc_side := 3 ;
3099: LD_ADDR_OWVAR 20
3103: PUSH
3104: LD_INT 3
3106: ST_TO_ADDR
// uc_nation := 3 ;
3107: LD_ADDR_OWVAR 21
3111: PUSH
3112: LD_INT 3
3114: ST_TO_ADDR
// bc_type := b_breastwork ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// bc_level := Difficulty ;
3123: LD_ADDR_OWVAR 43
3127: PUSH
3128: LD_OWVAR 67
3132: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3133: LD_INT 22
3135: PPUSH
3136: LD_INT 14
3138: PPUSH
3139: LD_INT 0
3141: PPUSH
3142: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3146: LD_INT 48
3148: PPUSH
3149: LD_INT 46
3151: PPUSH
3152: LD_INT 0
3154: PPUSH
3155: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3159: LD_INT 86
3161: PPUSH
3162: LD_INT 65
3164: PPUSH
3165: LD_INT 5
3167: PPUSH
3168: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3172: LD_INT 165
3174: PPUSH
3175: LD_INT 73
3177: PPUSH
3178: LD_INT 5
3180: PPUSH
3181: CALL_OW 47
// end ; if Difficulty >= 3 then
3185: LD_OWVAR 67
3189: PUSH
3190: LD_INT 3
3192: GREATEREQUAL
3193: IFFALSE 3208
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3195: LD_INT 51
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: LD_INT 2
3203: PPUSH
3204: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3208: LD_ADDR_VAR 0 7
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 3
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 2
3225: PUSH
3226: LD_INT 30
3228: PUSH
3229: LD_INT 31
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: LD_INT 30
3238: PUSH
3239: LD_INT 32
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: LIST
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PPUSH
3255: CALL_OW 69
3259: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3260: LD_ADDR_VAR 0 8
3264: PUSH
3265: LD_INT 22
3267: PUSH
3268: LD_INT 3
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 30
3277: PUSH
3278: LD_INT 4
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PPUSH
3289: CALL_OW 69
3293: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3294: LD_ADDR_VAR 0 10
3298: PUSH
3299: LD_INT 22
3301: PUSH
3302: LD_INT 3
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: LD_INT 30
3311: PUSH
3312: LD_INT 3
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PPUSH
3323: CALL_OW 69
3327: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3328: LD_ADDR_VAR 0 9
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_INT 3
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 30
3345: PUSH
3346: LD_INT 6
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 69
3361: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3362: LD_ADDR_VAR 0 2
3366: PUSH
3367: LD_INT 22
3369: PUSH
3370: LD_INT 3
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 30
3379: PUSH
3380: LD_INT 1
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PPUSH
3391: CALL_OW 69
3395: PUSH
3396: FOR_IN
3397: IFFALSE 3441
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3399: LD_VAR 0 2
3403: PPUSH
3404: CALL_OW 274
3408: PPUSH
3409: LD_INT 1
3411: PPUSH
3412: LD_INT 1000
3414: PPUSH
3415: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3419: LD_VAR 0 2
3423: PPUSH
3424: CALL_OW 274
3428: PPUSH
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 300
3434: PPUSH
3435: CALL_OW 277
// end ;
3439: GO 3396
3441: POP
3442: POP
// uc_side := 3 ;
3443: LD_ADDR_OWVAR 20
3447: PUSH
3448: LD_INT 3
3450: ST_TO_ADDR
// uc_nation := 3 ;
3451: LD_ADDR_OWVAR 21
3455: PUSH
3456: LD_INT 3
3458: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3459: LD_ADDR_VAR 0 11
3463: PUSH
3464: LD_INT 2
3466: PUSH
3467: LD_INT 3
3469: PUSH
3470: LD_INT 4
3472: PUSH
3473: LD_INT 4
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: PUSH
3482: LD_OWVAR 67
3486: ARRAY
3487: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3488: LD_ADDR_EXP 52
3492: PUSH
3493: LD_STRING Pokryshkin
3495: PPUSH
3496: LD_INT 0
3498: PPUSH
3499: LD_STRING 
3501: PPUSH
3502: CALL 38595 0 3
3506: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3507: LD_EXP 52
3511: PPUSH
3512: LD_INT 63
3514: PPUSH
3515: LD_INT 21
3517: PPUSH
3518: LD_INT 0
3520: PPUSH
3521: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3525: LD_EXP 52
3529: PPUSH
3530: CALL_OW 140
// InitHc ;
3534: CALL_OW 19
// for i in fac do
3538: LD_ADDR_VAR 0 2
3542: PUSH
3543: LD_VAR 0 10
3547: PUSH
3548: FOR_IN
3549: IFFALSE 3602
// begin for j = 1 to 6 do
3551: LD_ADDR_VAR 0 3
3555: PUSH
3556: DOUBLE
3557: LD_INT 1
3559: DEC
3560: ST_TO_ADDR
3561: LD_INT 6
3563: PUSH
3564: FOR_TO
3565: IFFALSE 3598
// begin PrepareHuman ( false , 3 , skill ) ;
3567: LD_INT 0
3569: PPUSH
3570: LD_INT 3
3572: PPUSH
3573: LD_VAR 0 11
3577: PPUSH
3578: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3582: CALL_OW 44
3586: PPUSH
3587: LD_VAR 0 2
3591: PPUSH
3592: CALL_OW 52
// end ;
3596: GO 3564
3598: POP
3599: POP
// end ;
3600: GO 3548
3602: POP
3603: POP
// for i in lab do
3604: LD_ADDR_VAR 0 2
3608: PUSH
3609: LD_VAR 0 9
3613: PUSH
3614: FOR_IN
3615: IFFALSE 3648
// begin PrepareHuman ( false , 4 , skill ) ;
3617: LD_INT 0
3619: PPUSH
3620: LD_INT 4
3622: PPUSH
3623: LD_VAR 0 11
3627: PPUSH
3628: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3632: CALL_OW 44
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 52
// end ;
3646: GO 3614
3648: POP
3649: POP
// for i in tw do
3650: LD_ADDR_VAR 0 2
3654: PUSH
3655: LD_VAR 0 7
3659: PUSH
3660: FOR_IN
3661: IFFALSE 3710
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
3663: LD_VAR 0 2
3667: PPUSH
3668: LD_INT 42
3670: PUSH
3671: LD_INT 43
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 1
3680: PPUSH
3681: LD_INT 2
3683: PPUSH
3684: CALL_OW 12
3688: ARRAY
3689: PPUSH
3690: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
3694: LD_VAR 0 11
3698: PPUSH
3699: LD_VAR 0 2
3703: PPUSH
3704: CALL 775 0 2
// end ;
3708: GO 3660
3710: POP
3711: POP
// for i in bar do
3712: LD_ADDR_VAR 0 2
3716: PUSH
3717: LD_VAR 0 8
3721: PUSH
3722: FOR_IN
3723: IFFALSE 3756
// begin PrepareHuman ( false , 1 , skill ) ;
3725: LD_INT 0
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_VAR 0 11
3735: PPUSH
3736: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3740: CALL_OW 44
3744: PPUSH
3745: LD_VAR 0 2
3749: PPUSH
3750: CALL_OW 52
// end ;
3754: GO 3722
3756: POP
3757: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
3758: LD_ADDR_VAR 0 13
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 9
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PUSH
3773: LD_INT 135
3775: PUSH
3776: LD_INT 60
3778: PUSH
3779: EMPTY
3780: LIST
3781: LIST
3782: PUSH
3783: LD_INT 41
3785: PUSH
3786: LD_INT 6
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: PUSH
3793: LD_INT 22
3795: PUSH
3796: LD_INT 9
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PUSH
3803: LD_INT 84
3805: PUSH
3806: LD_INT 14
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: ST_TO_ADDR
// vehicles := [ ] ;
3820: LD_ADDR_VAR 0 12
3824: PUSH
3825: EMPTY
3826: ST_TO_ADDR
// for i in spot_xy do
3827: LD_ADDR_VAR 0 2
3831: PUSH
3832: LD_VAR 0 13
3836: PUSH
3837: FOR_IN
3838: IFFALSE 3996
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
3840: LD_ADDR_VAR 0 6
3844: PUSH
3845: LD_INT 3
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 22
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: LD_INT 42
3862: PUSH
3863: LD_INT 43
3865: PUSH
3866: LD_INT 44
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 1
3876: PPUSH
3877: LD_INT 3
3879: PPUSH
3880: CALL_OW 12
3884: ARRAY
3885: PPUSH
3886: LD_INT 100
3888: PPUSH
3889: CALL 497 0 7
3893: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
3894: LD_ADDR_VAR 0 12
3898: PUSH
3899: LD_VAR 0 12
3903: PPUSH
3904: LD_VAR 0 12
3908: PUSH
3909: LD_INT 1
3911: PLUS
3912: PPUSH
3913: LD_VAR 0 6
3917: PPUSH
3918: CALL_OW 2
3922: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3923: LD_VAR 0 6
3927: PPUSH
3928: LD_INT 3
3930: PPUSH
3931: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
3935: LD_VAR 0 6
3939: PPUSH
3940: LD_VAR 0 2
3944: PUSH
3945: LD_INT 1
3947: ARRAY
3948: PPUSH
3949: LD_VAR 0 2
3953: PUSH
3954: LD_INT 2
3956: ARRAY
3957: PPUSH
3958: LD_INT 0
3960: PPUSH
3961: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
3965: LD_INT 0
3967: PPUSH
3968: LD_INT 3
3970: PPUSH
3971: LD_VAR 0 11
3975: PPUSH
3976: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3980: CALL_OW 44
3984: PPUSH
3985: LD_VAR 0 6
3989: PPUSH
3990: CALL_OW 52
// end ;
3994: GO 3837
3996: POP
3997: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
3998: LD_ADDR_VAR 0 2
4002: PUSH
4003: DOUBLE
4004: LD_INT 1
4006: DEC
4007: ST_TO_ADDR
4008: LD_INT 5
4010: PUSH
4011: LD_INT 7
4013: PUSH
4014: LD_INT 8
4016: PUSH
4017: LD_INT 9
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: PUSH
4026: LD_OWVAR 67
4030: ARRAY
4031: PUSH
4032: FOR_TO
4033: IFFALSE 4093
// begin PrepareHuman ( false , 1 , skill ) ;
4035: LD_INT 0
4037: PPUSH
4038: LD_INT 1
4040: PPUSH
4041: LD_VAR 0 11
4045: PPUSH
4046: CALL_OW 380
// un := CreateHuman ;
4050: LD_ADDR_VAR 0 5
4054: PUSH
4055: CALL_OW 44
4059: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4060: LD_VAR 0 5
4064: PPUSH
4065: LD_INT 11
4067: PPUSH
4068: LD_INT 0
4070: PPUSH
4071: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4075: LD_ADDR_EXP 55
4079: PUSH
4080: LD_EXP 55
4084: PUSH
4085: LD_VAR 0 5
4089: ADD
4090: ST_TO_ADDR
// end ;
4091: GO 4032
4093: POP
4094: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4095: LD_ADDR_VAR 0 2
4099: PUSH
4100: DOUBLE
4101: LD_INT 1
4103: DEC
4104: ST_TO_ADDR
4105: LD_INT 2
4107: PUSH
4108: LD_INT 3
4110: PUSH
4111: LD_INT 4
4113: PUSH
4114: LD_INT 5
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PUSH
4129: FOR_TO
4130: IFFALSE 4190
// begin PrepareHuman ( false , 1 , skill ) ;
4132: LD_INT 0
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: LD_VAR 0 11
4142: PPUSH
4143: CALL_OW 380
// un := CreateHuman ;
4147: LD_ADDR_VAR 0 5
4151: PUSH
4152: CALL_OW 44
4156: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4157: LD_VAR 0 5
4161: PPUSH
4162: LD_INT 12
4164: PPUSH
4165: LD_INT 0
4167: PPUSH
4168: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4172: LD_ADDR_EXP 53
4176: PUSH
4177: LD_EXP 53
4181: PUSH
4182: LD_VAR 0 5
4186: ADD
4187: ST_TO_ADDR
// end ;
4188: GO 4129
4190: POP
4191: POP
// for i = 1 to 2 do
4192: LD_ADDR_VAR 0 2
4196: PUSH
4197: DOUBLE
4198: LD_INT 1
4200: DEC
4201: ST_TO_ADDR
4202: LD_INT 2
4204: PUSH
4205: FOR_TO
4206: IFFALSE 4272
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4208: LD_INT 1
4210: PPUSH
4211: LD_INT 1
4213: PPUSH
4214: LD_VAR 0 11
4218: PPUSH
4219: CALL_OW 380
// un := CreateHuman ;
4223: LD_ADDR_VAR 0 5
4227: PUSH
4228: CALL_OW 44
4232: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4233: LD_VAR 0 5
4237: PPUSH
4238: LD_INT 39
4240: PPUSH
4241: LD_INT 12
4243: PPUSH
4244: LD_INT 3
4246: PPUSH
4247: LD_INT 0
4249: PPUSH
4250: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4254: LD_ADDR_EXP 54
4258: PUSH
4259: LD_EXP 54
4263: PUSH
4264: LD_VAR 0 5
4268: ADD
4269: ST_TO_ADDR
// end ;
4270: GO 4205
4272: POP
4273: POP
// for i = 1 to 3 do
4274: LD_ADDR_VAR 0 2
4278: PUSH
4279: DOUBLE
4280: LD_INT 1
4282: DEC
4283: ST_TO_ADDR
4284: LD_INT 3
4286: PUSH
4287: FOR_TO
4288: IFFALSE 4354
// begin PrepareHuman ( false , 1 , skill ) ;
4290: LD_INT 0
4292: PPUSH
4293: LD_INT 1
4295: PPUSH
4296: LD_VAR 0 11
4300: PPUSH
4301: CALL_OW 380
// un := CreateHuman ;
4305: LD_ADDR_VAR 0 5
4309: PUSH
4310: CALL_OW 44
4314: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4315: LD_VAR 0 5
4319: PPUSH
4320: LD_INT 180
4322: PPUSH
4323: LD_INT 11
4325: PPUSH
4326: LD_INT 4
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4336: LD_ADDR_EXP 58
4340: PUSH
4341: LD_EXP 58
4345: PUSH
4346: LD_VAR 0 5
4350: ADD
4351: ST_TO_ADDR
// end ;
4352: GO 4287
4354: POP
4355: POP
// ru_vehicles := vehicles ;
4356: LD_ADDR_EXP 56
4360: PUSH
4361: LD_VAR 0 12
4365: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4366: LD_ADDR_EXP 59
4370: PUSH
4371: LD_INT 131
4373: PUSH
4374: LD_INT 121
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 113
4383: PUSH
4384: LD_INT 90
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: LD_INT 93
4393: PUSH
4394: LD_INT 62
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 106
4408: PUSH
4409: LD_INT 54
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 120
4418: PUSH
4419: LD_INT 80
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 143
4428: PUSH
4429: LD_INT 120
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 154
4443: PUSH
4444: LD_INT 116
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 140
4453: PUSH
4454: LD_INT 93
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: LD_INT 130
4463: PUSH
4464: LD_INT 58
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: LD_INT 105
4478: PUSH
4479: LD_INT 106
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 134
4488: PUSH
4489: LD_INT 98
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 159
4498: PUSH
4499: LD_INT 113
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: LIST
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: ST_TO_ADDR
// if Difficulty = 1 then
4517: LD_OWVAR 67
4521: PUSH
4522: LD_INT 1
4524: EQUAL
4525: IFFALSE 4529
// exit ;
4527: GO 4584
// for i = 1 to Difficulty - 1 do
4529: LD_ADDR_VAR 0 2
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_OWVAR 67
4543: PUSH
4544: LD_INT 1
4546: MINUS
4547: PUSH
4548: FOR_TO
4549: IFFALSE 4582
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
4551: LD_ADDR_EXP 57
4555: PUSH
4556: LD_EXP 57
4560: PUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: LD_INT 1
4569: PUSH
4570: LD_INT 43
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: ADD
4579: ST_TO_ADDR
4580: GO 4548
4582: POP
4583: POP
// end ;
4584: LD_VAR 0 1
4588: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
4589: LD_INT 22
4591: PUSH
4592: LD_INT 3
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: PUSH
4599: LD_INT 21
4601: PUSH
4602: LD_INT 2
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PPUSH
4613: CALL_OW 69
4617: IFFALSE 4711
4619: GO 4621
4621: DISABLE
4622: LD_INT 0
4624: PPUSH
4625: PPUSH
// begin enable ;
4626: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4627: LD_ADDR_VAR 0 2
4631: PUSH
4632: LD_INT 22
4634: PUSH
4635: LD_INT 3
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 21
4644: PUSH
4645: LD_INT 2
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PPUSH
4656: CALL_OW 69
4660: ST_TO_ADDR
// if filter then
4661: LD_VAR 0 2
4665: IFFALSE 4711
// for i in filter do
4667: LD_ADDR_VAR 0 1
4671: PUSH
4672: LD_VAR 0 2
4676: PUSH
4677: FOR_IN
4678: IFFALSE 4709
// if GetFuel ( i ) < 20 then
4680: LD_VAR 0 1
4684: PPUSH
4685: CALL_OW 261
4689: PUSH
4690: LD_INT 20
4692: LESS
4693: IFFALSE 4707
// SetFuel ( i , 20 ) ;
4695: LD_VAR 0 1
4699: PPUSH
4700: LD_INT 20
4702: PPUSH
4703: CALL_OW 240
4707: GO 4677
4709: POP
4710: POP
// end ;
4711: PPOPN 2
4713: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
4714: LD_EXP 57
4718: IFFALSE 4937
4720: GO 4722
4722: DISABLE
4723: LD_INT 0
4725: PPUSH
4726: PPUSH
4727: PPUSH
// begin enable ;
4728: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4729: LD_ADDR_VAR 0 2
4733: PUSH
4734: LD_INT 22
4736: PUSH
4737: LD_INT 3
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 30
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 69
4762: ST_TO_ADDR
// can_produce := [ ] ;
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: EMPTY
4769: ST_TO_ADDR
// if not fac then
4770: LD_VAR 0 2
4774: NOT
4775: IFFALSE 4780
// begin disable ;
4777: DISABLE
// exit ;
4778: GO 4937
// end ; for i in fac do
4780: LD_ADDR_VAR 0 1
4784: PUSH
4785: LD_VAR 0 2
4789: PUSH
4790: FOR_IN
4791: IFFALSE 4829
// if UnitsInside ( i ) then
4793: LD_VAR 0 1
4797: PPUSH
4798: CALL_OW 313
4802: IFFALSE 4827
// can_produce := Insert ( can_produce , 1 , i ) ;
4804: LD_ADDR_VAR 0 3
4808: PUSH
4809: LD_VAR 0 3
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: LD_VAR 0 1
4821: PPUSH
4822: CALL_OW 2
4826: ST_TO_ADDR
4827: GO 4790
4829: POP
4830: POP
// if not can_produce then
4831: LD_VAR 0 3
4835: NOT
4836: IFFALSE 4840
// exit ;
4838: GO 4937
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
4840: LD_VAR 0 3
4844: PUSH
4845: LD_INT 1
4847: PPUSH
4848: LD_VAR 0 3
4852: PPUSH
4853: CALL_OW 12
4857: ARRAY
4858: PPUSH
4859: LD_EXP 57
4863: PUSH
4864: LD_INT 1
4866: ARRAY
4867: PPUSH
4868: LD_EXP 57
4872: PUSH
4873: LD_INT 2
4875: ARRAY
4876: PPUSH
4877: LD_EXP 57
4881: PUSH
4882: LD_INT 3
4884: ARRAY
4885: PPUSH
4886: LD_EXP 57
4890: PUSH
4891: LD_INT 4
4893: ARRAY
4894: PPUSH
4895: CALL_OW 125
// for i = 1 to 4 do
4899: LD_ADDR_VAR 0 1
4903: PUSH
4904: DOUBLE
4905: LD_INT 1
4907: DEC
4908: ST_TO_ADDR
4909: LD_INT 4
4911: PUSH
4912: FOR_TO
4913: IFFALSE 4935
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
4915: LD_ADDR_EXP 57
4919: PUSH
4920: LD_EXP 57
4924: PPUSH
4925: LD_INT 1
4927: PPUSH
4928: CALL_OW 3
4932: ST_TO_ADDR
4933: GO 4912
4935: POP
4936: POP
// end ;
4937: PPOPN 3
4939: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
4940: LD_INT 0
4942: PPUSH
4943: PPUSH
4944: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4945: LD_ADDR_VAR 0 2
4949: PUSH
4950: DOUBLE
4951: LD_INT 1
4953: DEC
4954: ST_TO_ADDR
4955: LD_INT 2
4957: PUSH
4958: LD_INT 3
4960: PUSH
4961: LD_INT 4
4963: PUSH
4964: LD_INT 4
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: LD_OWVAR 67
4977: ARRAY
4978: PUSH
4979: FOR_TO
4980: IFFALSE 5129
// begin PrepareHuman ( false , 3 , 3 ) ;
4982: LD_INT 0
4984: PPUSH
4985: LD_INT 3
4987: PPUSH
4988: LD_INT 3
4990: PPUSH
4991: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
4995: LD_ADDR_VAR 0 3
4999: PUSH
5000: LD_INT 3
5002: PPUSH
5003: LD_INT 3
5005: PPUSH
5006: LD_INT 22
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: LD_INT 1
5014: PPUSH
5015: LD_INT 43
5017: PUSH
5018: LD_INT 42
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: PUSH
5025: LD_INT 1
5027: PPUSH
5028: LD_INT 2
5030: PPUSH
5031: CALL_OW 12
5035: ARRAY
5036: PPUSH
5037: LD_INT 70
5039: PPUSH
5040: CALL 497 0 7
5044: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5045: LD_VAR 0 3
5049: PPUSH
5050: LD_INT 4
5052: PPUSH
5053: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5057: LD_VAR 0 3
5061: PPUSH
5062: LD_INT 229
5064: PPUSH
5065: LD_INT 44
5067: PPUSH
5068: LD_INT 0
5070: PPUSH
5071: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5075: CALL_OW 44
5079: PPUSH
5080: LD_VAR 0 3
5084: PPUSH
5085: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5089: LD_ADDR_EXP 56
5093: PUSH
5094: LD_EXP 56
5098: PUSH
5099: LD_VAR 0 3
5103: ADD
5104: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5105: LD_VAR 0 3
5109: PPUSH
5110: LD_INT 191
5112: PPUSH
5113: LD_INT 32
5115: PPUSH
5116: CALL_OW 111
// Wait ( 0 0$02 ) ;
5120: LD_INT 70
5122: PPUSH
5123: CALL_OW 67
// end ;
5127: GO 4979
5129: POP
5130: POP
// end ;
5131: LD_VAR 0 1
5135: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5136: LD_EXP 31
5140: PUSH
5141: LD_EXP 56
5145: AND
5146: IFFALSE 5320
5148: GO 5150
5150: DISABLE
5151: LD_INT 0
5153: PPUSH
5154: PPUSH
5155: PPUSH
// begin wait ( 0 0$50 ) ;
5156: LD_INT 1750
5158: PPUSH
5159: CALL_OW 67
// tmp := ru_vehicles ;
5163: LD_ADDR_VAR 0 3
5167: PUSH
5168: LD_EXP 56
5172: ST_TO_ADDR
// if not tmp then
5173: LD_VAR 0 3
5177: NOT
5178: IFFALSE 5182
// exit ;
5180: GO 5320
// repeat wait ( 0 0$1 ) ;
5182: LD_INT 35
5184: PPUSH
5185: CALL_OW 67
// for i in tmp do
5189: LD_ADDR_VAR 0 1
5193: PUSH
5194: LD_VAR 0 3
5198: PUSH
5199: FOR_IN
5200: IFFALSE 5311
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5202: LD_ADDR_VAR 0 2
5206: PUSH
5207: LD_INT 22
5209: PUSH
5210: LD_INT 1
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PPUSH
5217: LD_VAR 0 1
5221: PPUSH
5222: CALL_OW 74
5226: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5227: LD_VAR 0 1
5231: PPUSH
5232: LD_VAR 0 2
5236: PPUSH
5237: CALL_OW 296
5241: PUSH
5242: LD_INT 10
5244: GREATER
5245: IFFALSE 5264
// ComAgressiveMove ( i , 69 , 101 ) else
5247: LD_VAR 0 1
5251: PPUSH
5252: LD_INT 69
5254: PPUSH
5255: LD_INT 101
5257: PPUSH
5258: CALL_OW 114
5262: GO 5278
// ComAttackUnit ( i , enemy ) ;
5264: LD_VAR 0 1
5268: PPUSH
5269: LD_VAR 0 2
5273: PPUSH
5274: CALL_OW 115
// if GetLives ( i ) < 250 then
5278: LD_VAR 0 1
5282: PPUSH
5283: CALL_OW 256
5287: PUSH
5288: LD_INT 250
5290: LESS
5291: IFFALSE 5309
// tmp := tmp diff i ;
5293: LD_ADDR_VAR 0 3
5297: PUSH
5298: LD_VAR 0 3
5302: PUSH
5303: LD_VAR 0 1
5307: DIFF
5308: ST_TO_ADDR
// end ;
5309: GO 5199
5311: POP
5312: POP
// until not tmp ;
5313: LD_VAR 0 3
5317: NOT
5318: IFFALSE 5182
// end ; end_of_file
5320: PPOPN 3
5322: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5323: LD_INT 0
5325: PPUSH
5326: PPUSH
5327: PPUSH
5328: PPUSH
5329: PPUSH
5330: PPUSH
5331: PPUSH
// InGameOn ;
5332: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5336: LD_EXP 37
5340: PPUSH
5341: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5345: LD_EXP 37
5349: PPUSH
5350: LD_EXP 44
5354: PPUSH
5355: CALL_OW 119
// if Bierezov then
5359: LD_EXP 45
5363: IFFALSE 5379
// ComTurnUnit ( Bierezov , Cornel ) ;
5365: LD_EXP 45
5369: PPUSH
5370: LD_EXP 44
5374: PPUSH
5375: CALL_OW 119
// for i in jmm_units do
5379: LD_ADDR_VAR 0 2
5383: PUSH
5384: LD_EXP 4
5388: PUSH
5389: FOR_IN
5390: IFFALSE 5408
// ComTurnUnit ( i , Cornel ) ;
5392: LD_VAR 0 2
5396: PPUSH
5397: LD_EXP 44
5401: PPUSH
5402: CALL_OW 119
5406: GO 5389
5408: POP
5409: POP
// units := cornel_units union Cornel ;
5410: LD_ADDR_VAR 0 3
5414: PUSH
5415: LD_EXP 6
5419: PUSH
5420: LD_EXP 44
5424: UNION
5425: ST_TO_ADDR
// repeat wait ( 1 ) ;
5426: LD_INT 1
5428: PPUSH
5429: CALL_OW 67
// for i in units do
5433: LD_ADDR_VAR 0 2
5437: PUSH
5438: LD_VAR 0 3
5442: PUSH
5443: FOR_IN
5444: IFFALSE 5477
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5446: LD_VAR 0 2
5450: PPUSH
5451: LD_EXP 37
5455: PPUSH
5456: CALL_OW 250
5460: PPUSH
5461: LD_EXP 37
5465: PPUSH
5466: CALL_OW 251
5470: PPUSH
5471: CALL_OW 111
5475: GO 5443
5477: POP
5478: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5479: LD_VAR 0 3
5483: PPUSH
5484: LD_INT 92
5486: PUSH
5487: LD_EXP 37
5491: PPUSH
5492: CALL_OW 250
5496: PUSH
5497: LD_EXP 37
5501: PPUSH
5502: CALL_OW 251
5506: PUSH
5507: LD_INT 10
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: PPUSH
5516: CALL_OW 72
5520: PUSH
5521: LD_VAR 0 3
5525: EQUAL
5526: IFFALSE 5426
// for i in units do
5528: LD_ADDR_VAR 0 2
5532: PUSH
5533: LD_VAR 0 3
5537: PUSH
5538: FOR_IN
5539: IFFALSE 5557
// ComTurnUnit ( i , JMM ) ;
5541: LD_VAR 0 2
5545: PPUSH
5546: LD_EXP 37
5550: PPUSH
5551: CALL_OW 119
5555: GO 5538
5557: POP
5558: POP
// ComTurnUnit ( Cornel , JMM ) ;
5559: LD_EXP 44
5563: PPUSH
5564: LD_EXP 37
5568: PPUSH
5569: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
5573: LD_EXP 37
5577: PPUSH
5578: LD_STRING D1-JMM-1
5580: PPUSH
5581: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
5585: LD_EXP 44
5589: PPUSH
5590: LD_STRING D1-Corn-1
5592: PPUSH
5593: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
5597: LD_EXP 37
5601: PPUSH
5602: LD_EXP 44
5606: PPUSH
5607: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
5611: LD_EXP 44
5615: PPUSH
5616: LD_EXP 37
5620: PPUSH
5621: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
5625: LD_INT 35
5627: PPUSH
5628: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
5632: LD_EXP 37
5636: PPUSH
5637: LD_EXP 44
5641: PPUSH
5642: CALL_OW 296
5646: PUSH
5647: LD_INT 6
5649: LESS
5650: IFFALSE 5625
// ChangeSideFog ( 4 , 1 ) ;
5652: LD_INT 4
5654: PPUSH
5655: LD_INT 1
5657: PPUSH
5658: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
5662: LD_EXP 37
5666: PPUSH
5667: LD_EXP 44
5671: PPUSH
5672: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5676: LD_EXP 44
5680: PPUSH
5681: LD_EXP 37
5685: PPUSH
5686: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
5690: LD_EXP 37
5694: PPUSH
5695: LD_STRING D1-JMM-2
5697: PPUSH
5698: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
5702: LD_EXP 37
5706: PPUSH
5707: LD_STRING D1-JMM-2a
5709: PPUSH
5710: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
5714: LD_EXP 44
5718: PPUSH
5719: LD_STRING D1-Corn-2
5721: PPUSH
5722: CALL_OW 88
// if bierezov_exist or debug then
5726: LD_EXP 7
5730: PUSH
5731: LD_EXP 1
5735: OR
5736: IFFALSE 5977
// begin ComTurnUnit ( Cornel , Bierezov ) ;
5738: LD_EXP 44
5742: PPUSH
5743: LD_EXP 45
5747: PPUSH
5748: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
5752: LD_INT 10
5754: PPUSH
5755: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
5759: LD_EXP 44
5763: PPUSH
5764: LD_STRING D1a-Corn-1
5766: PPUSH
5767: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
5771: LD_EXP 37
5775: PPUSH
5776: LD_EXP 45
5780: PPUSH
5781: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
5785: LD_EXP 45
5789: PPUSH
5790: LD_EXP 37
5794: PPUSH
5795: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
5799: LD_EXP 37
5803: PPUSH
5804: LD_STRING D1a-JMM-1
5806: PPUSH
5807: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
5811: LD_EXP 37
5815: PPUSH
5816: LD_EXP 44
5820: PPUSH
5821: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5825: LD_EXP 44
5829: PPUSH
5830: LD_EXP 37
5834: PPUSH
5835: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
5839: LD_EXP 44
5843: PPUSH
5844: LD_STRING D1a-Corn-2
5846: PPUSH
5847: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
5851: LD_EXP 37
5855: PPUSH
5856: LD_STRING D1a-JMM-2
5858: PPUSH
5859: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
5863: LD_EXP 44
5867: PPUSH
5868: LD_STRING D1a-Corn-3
5870: PPUSH
5871: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
5875: LD_EXP 37
5879: PPUSH
5880: LD_STRING D1a-JMM-3
5882: PPUSH
5883: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
5887: LD_EXP 44
5891: PPUSH
5892: LD_STRING D1a-Corn-4
5894: PPUSH
5895: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
5899: LD_EXP 37
5903: PPUSH
5904: LD_STRING D1a-JMM-4
5906: PPUSH
5907: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
5911: LD_EXP 44
5915: PPUSH
5916: LD_STRING D1a-Corn-5
5918: PPUSH
5919: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
5923: LD_EXP 45
5927: PPUSH
5928: LD_EXP 44
5932: PPUSH
5933: CALL_OW 250
5937: PPUSH
5938: LD_EXP 44
5942: PPUSH
5943: CALL_OW 251
5947: PUSH
5948: LD_INT 2
5950: MINUS
5951: PPUSH
5952: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
5956: LD_EXP 45
5960: PPUSH
5961: LD_EXP 44
5965: PPUSH
5966: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
5970: LD_INT 10
5972: PPUSH
5973: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
5977: LD_EXP 37
5981: PPUSH
5982: LD_STRING D1b-JMM-1
5984: PPUSH
5985: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
5989: LD_EXP 44
5993: PPUSH
5994: LD_STRING D1b-Corn-1
5996: PPUSH
5997: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6001: LD_EXP 37
6005: PPUSH
6006: LD_STRING D1b-JMM-2
6008: PPUSH
6009: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6013: LD_EXP 44
6017: PPUSH
6018: LD_STRING D1b-Corn-2
6020: PPUSH
6021: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6025: LD_EXP 37
6029: PPUSH
6030: LD_STRING D1b-JMM-3
6032: PPUSH
6033: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6037: LD_INT 10
6039: PPUSH
6040: CALL_OW 67
// SayRadio ( Powell , D1b-Pow-3 ) ;
6044: LD_EXP 46
6048: PPUSH
6049: LD_STRING D1b-Pow-3
6051: PPUSH
6052: CALL_OW 94
// Say ( JMM , D1b-JMM-4 ) ;
6056: LD_EXP 37
6060: PPUSH
6061: LD_STRING D1b-JMM-4
6063: PPUSH
6064: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6068: LD_EXP 44
6072: PPUSH
6073: LD_STRING D1b-Corn-4
6075: PPUSH
6076: CALL_OW 88
// if Khatam then
6080: LD_EXP 41
6084: IFFALSE 6100
// Say ( Khatam , D1b-Khat-4 ) else
6086: LD_EXP 41
6090: PPUSH
6091: LD_STRING D1b-Khat-4
6093: PPUSH
6094: CALL_OW 88
6098: GO 6136
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6100: LD_EXP 6
6104: PPUSH
6105: LD_INT 26
6107: PUSH
6108: LD_INT 1
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PPUSH
6115: CALL_OW 72
6119: PUSH
6120: LD_EXP 44
6124: PUSH
6125: EMPTY
6126: LIST
6127: DIFF
6128: PPUSH
6129: LD_STRING D1b-Sol1-4
6131: PPUSH
6132: CALL 585 0 2
// if Cyrus then
6136: LD_EXP 39
6140: IFFALSE 6154
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6142: LD_EXP 39
6146: PPUSH
6147: LD_STRING D1b-Cyrus-4
6149: PPUSH
6150: CALL_OW 88
// if Lisa then
6154: LD_EXP 40
6158: IFFALSE 6216
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6160: LD_EXP 40
6164: PPUSH
6165: LD_STRING D1b-Lisa-4
6167: PPUSH
6168: CALL_OW 88
// if Cyrus then
6172: LD_EXP 39
6176: IFFALSE 6216
// begin if not IsInUnit ( Cyrus ) then
6178: LD_EXP 39
6182: PPUSH
6183: CALL_OW 310
6187: NOT
6188: IFFALSE 6204
// ComTurnUnit ( Cyrus , Lisa ) ;
6190: LD_EXP 39
6194: PPUSH
6195: LD_EXP 40
6199: PPUSH
6200: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6204: LD_EXP 39
6208: PPUSH
6209: LD_STRING D1b-Cyrus-5
6211: PPUSH
6212: CALL_OW 88
// end ; end ; SelectGroup ;
6216: CALL 2657 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6220: LD_EXP 37
6224: PPUSH
6225: LD_STRING D1d-JMM-1
6227: PPUSH
6228: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6232: LD_EXP 44
6236: PPUSH
6237: LD_STRING D1d-Corn-1
6239: PPUSH
6240: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6244: LD_ADDR_VAR 0 2
6248: PUSH
6249: LD_EXP 4
6253: PUSH
6254: LD_EXP 6
6258: ADD
6259: PUSH
6260: LD_EXP 37
6264: ADD
6265: PUSH
6266: FOR_IN
6267: IFFALSE 6280
// ComHold ( i ) ;
6269: LD_VAR 0 2
6273: PPUSH
6274: CALL_OW 140
6278: GO 6266
6280: POP
6281: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6282: LD_ADDR_VAR 0 4
6286: PUSH
6287: LD_INT 22
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 21
6299: PUSH
6300: LD_INT 2
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 69
6315: ST_TO_ADDR
// if vehicles then
6316: LD_VAR 0 4
6320: IFFALSE 6658
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6322: LD_EXP 6
6326: PPUSH
6327: LD_INT 55
6329: PUSH
6330: EMPTY
6331: LIST
6332: PPUSH
6333: CALL_OW 72
6337: IFFALSE 6376
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6339: LD_ADDR_VAR 0 2
6343: PUSH
6344: LD_EXP 6
6348: PPUSH
6349: LD_INT 55
6351: PUSH
6352: EMPTY
6353: LIST
6354: PPUSH
6355: CALL_OW 72
6359: PUSH
6360: FOR_IN
6361: IFFALSE 6374
// ComExitVehicle ( i ) ;
6363: LD_VAR 0 2
6367: PPUSH
6368: CALL_OW 121
6372: GO 6360
6374: POP
6375: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6376: LD_ADDR_VAR 0 5
6380: PUSH
6381: LD_VAR 0 4
6385: PPUSH
6386: LD_INT 34
6388: PUSH
6389: LD_INT 51
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 72
6400: ST_TO_ADDR
// if cargos then
6401: LD_VAR 0 5
6405: IFFALSE 6588
// begin vehicles := cargos ;
6407: LD_ADDR_VAR 0 4
6411: PUSH
6412: LD_VAR 0 5
6416: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6417: LD_ADDR_VAR 0 6
6421: PUSH
6422: LD_STRING 02_resources_4
6424: PPUSH
6425: LD_INT 0
6427: PPUSH
6428: CALL_OW 30
6432: ST_TO_ADDR
// if debug and not resources then
6433: LD_EXP 1
6437: PUSH
6438: LD_VAR 0 6
6442: NOT
6443: AND
6444: IFFALSE 6454
// resources := 160 ;
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: LD_INT 160
6453: ST_TO_ADDR
// if resources mod 10 then
6454: LD_VAR 0 6
6458: PUSH
6459: LD_INT 10
6461: MOD
6462: IFFALSE 6484
// resources := resources - resources mod 10 ;
6464: LD_ADDR_VAR 0 6
6468: PUSH
6469: LD_VAR 0 6
6473: PUSH
6474: LD_VAR 0 6
6478: PUSH
6479: LD_INT 10
6481: MOD
6482: MINUS
6483: ST_TO_ADDR
// if resources then
6484: LD_VAR 0 6
6488: IFFALSE 6588
// for i in cargos do
6490: LD_ADDR_VAR 0 2
6494: PUSH
6495: LD_VAR 0 5
6499: PUSH
6500: FOR_IN
6501: IFFALSE 6586
// begin if resources < 100 then
6503: LD_VAR 0 6
6507: PUSH
6508: LD_INT 100
6510: LESS
6511: IFFALSE 6533
// begin cargo := resources ;
6513: LD_ADDR_VAR 0 7
6517: PUSH
6518: LD_VAR 0 6
6522: ST_TO_ADDR
// resources := 0 ;
6523: LD_ADDR_VAR 0 6
6527: PUSH
6528: LD_INT 0
6530: ST_TO_ADDR
// end else
6531: GO 6555
// begin cargo := 100 ;
6533: LD_ADDR_VAR 0 7
6537: PUSH
6538: LD_INT 100
6540: ST_TO_ADDR
// resources := resources - 100 ;
6541: LD_ADDR_VAR 0 6
6545: PUSH
6546: LD_VAR 0 6
6550: PUSH
6551: LD_INT 100
6553: MINUS
6554: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
6555: LD_VAR 0 2
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_VAR 0 7
6567: PPUSH
6568: CALL_OW 290
// if resources = 0 then
6572: LD_VAR 0 6
6576: PUSH
6577: LD_INT 0
6579: EQUAL
6580: IFFALSE 6584
// break ;
6582: GO 6586
// end ;
6584: GO 6500
6586: POP
6587: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
6588: LD_VAR 0 4
6592: PUSH
6593: LD_INT 1
6595: ARRAY
6596: PPUSH
6597: CALL_OW 311
6601: PPUSH
6602: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
6606: LD_VAR 0 4
6610: PUSH
6611: LD_INT 1
6613: ARRAY
6614: PPUSH
6615: LD_INT 4
6617: PPUSH
6618: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
6622: LD_EXP 44
6626: PPUSH
6627: LD_VAR 0 4
6631: PUSH
6632: LD_INT 1
6634: ARRAY
6635: PPUSH
6636: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
6640: LD_INT 35
6642: PPUSH
6643: CALL_OW 67
// until IsInUnit ( Cornel ) ;
6647: LD_EXP 44
6651: PPUSH
6652: CALL_OW 310
6656: IFFALSE 6640
// end ; InGameOff ;
6658: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6662: LD_STRING M1
6664: PPUSH
6665: CALL_OW 337
// SaveForQuickRestart ;
6669: CALL_OW 22
// cornel_active := true ;
6673: LD_ADDR_EXP 8
6677: PUSH
6678: LD_INT 1
6680: ST_TO_ADDR
// end ;
6681: LD_VAR 0 1
6685: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
6686: LD_EXP 37
6690: PPUSH
6691: LD_EXP 47
6695: PPUSH
6696: CALL_OW 296
6700: PUSH
6701: LD_INT 10
6703: LESS
6704: IFFALSE 8087
6706: GO 6708
6708: DISABLE
6709: LD_INT 0
6711: PPUSH
6712: PPUSH
6713: PPUSH
6714: PPUSH
6715: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
6716: LD_ADDR_VAR 0 2
6720: PUSH
6721: LD_INT 89
6723: PUSH
6724: LD_INT 34
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: LD_INT 138
6733: PUSH
6734: LD_INT 63
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 196
6743: PUSH
6744: LD_INT 84
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 135
6753: PUSH
6754: LD_INT 52
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 103
6763: PUSH
6764: LD_INT 39
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 58
6773: PUSH
6774: LD_INT 30
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 38
6783: PUSH
6784: LD_INT 51
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: ST_TO_ADDR
// Video ( true ) ;
6800: LD_INT 1
6802: PPUSH
6803: CALL 75943 0 1
// if jmm_units then
6807: LD_EXP 4
6811: IFFALSE 6887
// for i in jmm_units do
6813: LD_ADDR_VAR 0 1
6817: PUSH
6818: LD_EXP 4
6822: PUSH
6823: FOR_IN
6824: IFFALSE 6885
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
6826: LD_VAR 0 1
6830: PPUSH
6831: LD_EXP 37
6835: PPUSH
6836: CALL_OW 296
6840: PUSH
6841: LD_INT 10
6843: LESS
6844: PUSH
6845: LD_VAR 0 1
6849: PPUSH
6850: CALL_OW 310
6854: NOT
6855: AND
6856: IFFALSE 6874
// ComTurnUnit ( i , JMM ) else
6858: LD_VAR 0 1
6862: PPUSH
6863: LD_EXP 37
6867: PPUSH
6868: CALL_OW 119
6872: GO 6883
// ComHold ( i ) ;
6874: LD_VAR 0 1
6878: PPUSH
6879: CALL_OW 140
// end ;
6883: GO 6823
6885: POP
6886: POP
// if IsInUnit ( JMM ) then
6887: LD_EXP 37
6891: PPUSH
6892: CALL_OW 310
6896: IFFALSE 6921
// begin ComExitVehicle ( JMM ) ;
6898: LD_EXP 37
6902: PPUSH
6903: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
6907: LD_EXP 37
6911: PPUSH
6912: LD_EXP 47
6916: PPUSH
6917: CALL_OW 172
// end ; Wait ( 10 ) ;
6921: LD_INT 10
6923: PPUSH
6924: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
6928: LD_EXP 37
6932: PPUSH
6933: LD_EXP 47
6937: PPUSH
6938: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
6942: LD_INT 35
6944: PPUSH
6945: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
6949: LD_EXP 37
6953: PPUSH
6954: LD_EXP 47
6958: PPUSH
6959: CALL_OW 296
6963: PUSH
6964: LD_INT 6
6966: LESS
6967: IFFALSE 6942
// ComTurnUnit ( JMM , Lynch ) ;
6969: LD_EXP 37
6973: PPUSH
6974: LD_EXP 47
6978: PPUSH
6979: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
6983: LD_ADDR_VAR 0 1
6987: PUSH
6988: LD_EXP 47
6992: PUSH
6993: LD_EXP 48
6997: PUSH
6998: LD_EXP 49
7002: PUSH
7003: LD_EXP 50
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: PUSH
7014: FOR_IN
7015: IFFALSE 7033
// ComTurnUnit ( i , JMM ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_EXP 37
7026: PPUSH
7027: CALL_OW 119
7031: GO 7014
7033: POP
7034: POP
// Wait ( 0 0$0.3 ) ;
7035: LD_INT 10
7037: PPUSH
7038: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7042: LD_EXP 37
7046: PPUSH
7047: LD_STRING D2-JMM-1
7049: PPUSH
7050: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7054: LD_EXP 47
7058: PPUSH
7059: LD_STRING D2-Sol1-1
7061: PPUSH
7062: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7066: LD_EXP 37
7070: PPUSH
7071: LD_STRING D2-JMM-2
7073: PPUSH
7074: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7078: LD_EXP 47
7082: PPUSH
7083: LD_STRING D2-Sol1-2
7085: PPUSH
7086: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7090: LD_EXP 37
7094: PPUSH
7095: LD_STRING D2-JMM-3
7097: PPUSH
7098: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7102: LD_EXP 47
7106: PPUSH
7107: LD_STRING D2-Sol1-3
7109: PPUSH
7110: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7114: LD_ADDR_VAR 0 1
7118: PUSH
7119: LD_INT 22
7121: PUSH
7122: LD_INT 8
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PPUSH
7129: CALL_OW 69
7133: PUSH
7134: FOR_IN
7135: IFFALSE 7151
// SetSide ( i , 1 ) ;
7137: LD_VAR 0 1
7141: PPUSH
7142: LD_INT 1
7144: PPUSH
7145: CALL_OW 235
7149: GO 7134
7151: POP
7152: POP
// Say ( JMM , D2-JMM-4 ) ;
7153: LD_EXP 37
7157: PPUSH
7158: LD_STRING D2-JMM-4
7160: PPUSH
7161: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7165: LD_INT 1
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 332
// for i = 1 to points do
7175: LD_ADDR_VAR 0 1
7179: PUSH
7180: DOUBLE
7181: LD_INT 1
7183: DEC
7184: ST_TO_ADDR
7185: LD_VAR 0 2
7189: PUSH
7190: FOR_TO
7191: IFFALSE 7366
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7193: LD_VAR 0 2
7197: PUSH
7198: LD_VAR 0 1
7202: ARRAY
7203: PUSH
7204: LD_INT 1
7206: ARRAY
7207: PPUSH
7208: LD_VAR 0 2
7212: PUSH
7213: LD_VAR 0 1
7217: ARRAY
7218: PUSH
7219: LD_INT 2
7221: ARRAY
7222: PPUSH
7223: CALL_OW 84
// if i = 1 then
7227: LD_VAR 0 1
7231: PUSH
7232: LD_INT 1
7234: EQUAL
7235: IFFALSE 7249
// Say ( Lynch , D2-Sol1-4 ) ;
7237: LD_EXP 47
7241: PPUSH
7242: LD_STRING D2-Sol1-4
7244: PPUSH
7245: CALL_OW 88
// if i = 2 then
7249: LD_VAR 0 1
7253: PUSH
7254: LD_INT 2
7256: EQUAL
7257: IFFALSE 7271
// Say ( JMM , D2-JMM-5 ) ;
7259: LD_EXP 37
7263: PPUSH
7264: LD_STRING D2-JMM-5
7266: PPUSH
7267: CALL_OW 88
// if i = 4 then
7271: LD_VAR 0 1
7275: PUSH
7276: LD_INT 4
7278: EQUAL
7279: IFFALSE 7303
// begin RevealFogArea ( 1 , troopsArea ) ;
7281: LD_INT 1
7283: PPUSH
7284: LD_INT 6
7286: PPUSH
7287: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7291: LD_EXP 47
7295: PPUSH
7296: LD_STRING D2-Sol1-5
7298: PPUSH
7299: CALL_OW 88
// end ; if i = 5 then
7303: LD_VAR 0 1
7307: PUSH
7308: LD_INT 5
7310: EQUAL
7311: IFFALSE 7325
// Say ( JMM , D2-JMM-6 ) ;
7313: LD_EXP 37
7317: PPUSH
7318: LD_STRING D2-JMM-6
7320: PPUSH
7321: CALL_OW 88
// if i = 7 then
7325: LD_VAR 0 1
7329: PUSH
7330: LD_INT 7
7332: EQUAL
7333: IFFALSE 7357
// begin RevealFogArea ( 1 , forestArea ) ;
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 7
7340: PPUSH
7341: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7345: LD_EXP 47
7349: PPUSH
7350: LD_STRING D2-Sol1-6
7352: PPUSH
7353: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7357: LD_INT 46
7359: PPUSH
7360: CALL_OW 67
// end ;
7364: GO 7190
7366: POP
7367: POP
// CenterNowOnUnits ( JMM ) ;
7368: LD_EXP 37
7372: PPUSH
7373: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7377: LD_EXP 37
7381: PPUSH
7382: LD_STRING D2-JMM-7
7384: PPUSH
7385: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7389: LD_EXP 47
7393: PPUSH
7394: LD_STRING D2-Sol1-7
7396: PPUSH
7397: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7401: LD_EXP 37
7405: PPUSH
7406: LD_STRING D2-JMM-8
7408: PPUSH
7409: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7413: LD_ADDR_VAR 0 4
7417: PUSH
7418: LD_INT 22
7420: PUSH
7421: LD_INT 1
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 30
7430: PUSH
7431: LD_INT 31
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PPUSH
7442: CALL_OW 69
7446: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7447: LD_EXP 47
7451: PPUSH
7452: LD_VAR 0 4
7456: PUSH
7457: LD_INT 1
7459: ARRAY
7460: PPUSH
7461: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7465: LD_INT 65
7467: PPUSH
7468: LD_INT 101
7470: PPUSH
7471: CALL_OW 428
7475: IFFALSE 7498
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7477: LD_INT 65
7479: PPUSH
7480: LD_INT 101
7482: PPUSH
7483: CALL_OW 428
7487: PPUSH
7488: LD_INT 75
7490: PPUSH
7491: LD_INT 100
7493: PPUSH
7494: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7498: LD_INT 66
7500: PPUSH
7501: LD_INT 103
7503: PPUSH
7504: CALL_OW 428
7508: IFFALSE 7531
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7510: LD_INT 66
7512: PPUSH
7513: LD_INT 103
7515: PPUSH
7516: CALL_OW 428
7520: PPUSH
7521: LD_INT 75
7523: PPUSH
7524: LD_INT 100
7526: PPUSH
7527: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7531: LD_ADDR_VAR 0 5
7535: PUSH
7536: LD_INT 22
7538: PUSH
7539: LD_INT 1
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 21
7548: PUSH
7549: LD_INT 2
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 91
7558: PUSH
7559: LD_EXP 37
7563: PUSH
7564: LD_INT 7
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: ST_TO_ADDR
// if tmp then
7582: LD_VAR 0 5
7586: IFFALSE 7603
// ComMoveXY ( tmp , 75 , 100 ) ;
7588: LD_VAR 0 5
7592: PPUSH
7593: LD_INT 75
7595: PPUSH
7596: LD_INT 100
7598: PPUSH
7599: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
7603: LD_ADDR_VAR 0 3
7607: PUSH
7608: LD_EXP 4
7612: PPUSH
7613: LD_INT 25
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 72
7627: PPUSH
7628: LD_EXP 37
7632: PPUSH
7633: CALL_OW 74
7637: ST_TO_ADDR
// if sol then
7638: LD_VAR 0 3
7642: IFFALSE 7702
// if GetDistUnits ( JMM , sol ) < 10 then
7644: LD_EXP 37
7648: PPUSH
7649: LD_VAR 0 3
7653: PPUSH
7654: CALL_OW 296
7658: PUSH
7659: LD_INT 10
7661: LESS
7662: IFFALSE 7702
// begin if IsInUnit ( sol ) then
7664: LD_VAR 0 3
7668: PPUSH
7669: CALL_OW 310
7673: IFFALSE 7684
// ComExitVehicle ( sol ) ;
7675: LD_VAR 0 3
7679: PPUSH
7680: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
7684: LD_VAR 0 3
7688: PPUSH
7689: LD_VAR 0 4
7693: PUSH
7694: LD_INT 2
7696: ARRAY
7697: PPUSH
7698: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
7702: LD_INT 10
7704: PPUSH
7705: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
7709: LD_EXP 37
7713: PPUSH
7714: LD_INT 65
7716: PPUSH
7717: LD_INT 101
7719: PPUSH
7720: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
7724: LD_EXP 37
7728: PPUSH
7729: LD_INT 63
7731: PPUSH
7732: LD_INT 100
7734: PPUSH
7735: CALL_OW 178
// tmp := 0 0$0 ;
7739: LD_ADDR_VAR 0 5
7743: PUSH
7744: LD_INT 0
7746: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7747: LD_INT 35
7749: PPUSH
7750: CALL_OW 67
// tmp := tmp + 0 0$1 ;
7754: LD_ADDR_VAR 0 5
7758: PUSH
7759: LD_VAR 0 5
7763: PUSH
7764: LD_INT 35
7766: PLUS
7767: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
7768: LD_EXP 37
7772: PPUSH
7773: LD_INT 65
7775: PPUSH
7776: LD_INT 101
7778: PPUSH
7779: CALL_OW 307
7783: PUSH
7784: LD_VAR 0 5
7788: PUSH
7789: LD_INT 175
7791: GREATER
7792: OR
7793: IFFALSE 7747
// Say ( JMM , D2a-JMM-1 ) ;
7795: LD_EXP 37
7799: PPUSH
7800: LD_STRING D2a-JMM-1
7802: PPUSH
7803: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
7807: LD_EXP 48
7811: PPUSH
7812: LD_INT 66
7814: PPUSH
7815: LD_INT 103
7817: PPUSH
7818: CALL_OW 111
// tmp := 0 0$0 ;
7822: LD_ADDR_VAR 0 5
7826: PUSH
7827: LD_INT 0
7829: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7830: LD_INT 35
7832: PPUSH
7833: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
7837: LD_EXP 48
7841: PPUSH
7842: LD_INT 66
7844: PPUSH
7845: LD_INT 103
7847: PPUSH
7848: CALL_OW 307
7852: PUSH
7853: LD_VAR 0 5
7857: PUSH
7858: LD_INT 175
7860: GREATER
7861: OR
7862: IFFALSE 7830
// ComTurnUnit ( Walker , JMM ) ;
7864: LD_EXP 48
7868: PPUSH
7869: LD_EXP 37
7873: PPUSH
7874: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
7878: LD_EXP 48
7882: PPUSH
7883: LD_STRING D2a-Sci1-1
7885: PPUSH
7886: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
7890: LD_EXP 37
7894: PPUSH
7895: LD_EXP 48
7899: PPUSH
7900: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
7904: LD_EXP 37
7908: PPUSH
7909: LD_STRING D2a-JMM-2
7911: PPUSH
7912: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
7916: LD_EXP 48
7920: PPUSH
7921: LD_STRING D2a-Sci1-2
7923: PPUSH
7924: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
7928: LD_EXP 37
7932: PPUSH
7933: LD_STRING D2a-JMM-3
7935: PPUSH
7936: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
7940: LD_EXP 48
7944: PPUSH
7945: LD_STRING D2a-Sci1-3
7947: PPUSH
7948: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
7952: LD_ADDR_EXP 4
7956: PUSH
7957: LD_EXP 4
7961: PUSH
7962: LD_EXP 47
7966: PUSH
7967: LD_EXP 48
7971: PUSH
7972: LD_EXP 49
7976: PUSH
7977: LD_EXP 50
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: ADD
7988: ST_TO_ADDR
// for i in jmm_units do
7989: LD_ADDR_VAR 0 1
7993: PUSH
7994: LD_EXP 4
7998: PUSH
7999: FOR_IN
8000: IFFALSE 8025
// if not IsInUnit ( i ) then
8002: LD_VAR 0 1
8006: PPUSH
8007: CALL_OW 310
8011: NOT
8012: IFFALSE 8023
// ComFree ( i ) ;
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 139
8023: GO 7999
8025: POP
8026: POP
// Video ( false ) ;
8027: LD_INT 0
8029: PPUSH
8030: CALL 75943 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8034: LD_STRING MSolar1
8036: PPUSH
8037: CALL_OW 337
// jmm_on_west := true ;
8041: LD_ADDR_EXP 5
8045: PUSH
8046: LD_INT 1
8048: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8049: LD_INT 1050
8051: PPUSH
8052: CALL_OW 67
// frank_can_return := true ;
8056: LD_ADDR_EXP 12
8060: PUSH
8061: LD_INT 1
8063: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8064: LD_INT 6300
8066: PPUSH
8067: LD_INT 8400
8069: PPUSH
8070: CALL_OW 12
8074: PPUSH
8075: CALL_OW 67
// send_spec_patrol := true ;
8079: LD_ADDR_EXP 30
8083: PUSH
8084: LD_INT 1
8086: ST_TO_ADDR
// end ;
8087: PPOPN 5
8089: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8090: LD_INT 22
8092: PUSH
8093: LD_INT 1
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: LD_INT 34
8102: PUSH
8103: LD_INT 51
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: LD_INT 92
8112: PUSH
8113: LD_INT 63
8115: PUSH
8116: LD_INT 100
8118: PUSH
8119: LD_INT 5
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: PPUSH
8136: CALL_OW 69
8140: PUSH
8141: LD_EXP 5
8145: NOT
8146: AND
8147: IFFALSE 8260
8149: GO 8151
8151: DISABLE
8152: LD_INT 0
8154: PPUSH
8155: PPUSH
// begin enable ;
8156: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8157: LD_ADDR_VAR 0 2
8161: PUSH
8162: LD_INT 22
8164: PUSH
8165: LD_INT 1
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: PUSH
8172: LD_INT 34
8174: PUSH
8175: LD_INT 51
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: LD_INT 92
8184: PUSH
8185: LD_INT 63
8187: PUSH
8188: LD_INT 100
8190: PUSH
8191: LD_INT 5
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: LIST
8204: PUSH
8205: EMPTY
8206: LIST
8207: PPUSH
8208: CALL_OW 69
8212: ST_TO_ADDR
// if not filter then
8213: LD_VAR 0 2
8217: NOT
8218: IFFALSE 8222
// exit ;
8220: GO 8260
// for i in filter do
8222: LD_ADDR_VAR 0 1
8226: PUSH
8227: LD_VAR 0 2
8231: PUSH
8232: FOR_IN
8233: IFFALSE 8258
// begin SetFuel ( i , 0 ) ;
8235: LD_VAR 0 1
8239: PPUSH
8240: LD_INT 0
8242: PPUSH
8243: CALL_OW 240
// ComStop ( i ) ;
8247: LD_VAR 0 1
8251: PPUSH
8252: CALL_OW 141
// end ;
8256: GO 8232
8258: POP
8259: POP
// end ;
8260: PPOPN 2
8262: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8263: LD_EXP 30
8267: IFFALSE 9393
8269: GO 8271
8271: DISABLE
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
// begin if not ru_spec_patrol then
8281: LD_EXP 54
8285: NOT
8286: IFFALSE 8290
// exit ;
8288: GO 9393
// dead1 := false ;
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_INT 0
8297: ST_TO_ADDR
// dead2 := false ;
8298: LD_ADDR_VAR 0 2
8302: PUSH
8303: LD_INT 0
8305: ST_TO_ADDR
// inarea1 := false ;
8306: LD_ADDR_VAR 0 3
8310: PUSH
8311: LD_INT 0
8313: ST_TO_ADDR
// inarea2 := false ;
8314: LD_ADDR_VAR 0 4
8318: PUSH
8319: LD_INT 0
8321: ST_TO_ADDR
// tmp := [ ] ;
8322: LD_ADDR_VAR 0 6
8326: PUSH
8327: EMPTY
8328: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8329: LD_EXP 54
8333: PPUSH
8334: LD_INT 75
8336: PPUSH
8337: LD_INT 101
8339: PPUSH
8340: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8344: LD_INT 35
8346: PPUSH
8347: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8351: LD_INT 1
8353: PPUSH
8354: LD_EXP 54
8358: PUSH
8359: LD_INT 1
8361: ARRAY
8362: PPUSH
8363: CALL_OW 292
8367: PUSH
8368: LD_EXP 54
8372: PPUSH
8373: LD_INT 92
8375: PUSH
8376: LD_INT 75
8378: PUSH
8379: LD_INT 101
8381: PUSH
8382: LD_INT 4
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: PPUSH
8391: CALL_OW 72
8395: OR
8396: IFFALSE 8344
// ComStop ( ru_spec_patrol ) ;
8398: LD_EXP 54
8402: PPUSH
8403: CALL_OW 141
// Wait ( 0 0$02 ) ;
8407: LD_INT 70
8409: PPUSH
8410: CALL_OW 67
// DialogueOn ;
8414: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8418: LD_EXP 54
8422: PUSH
8423: LD_INT 1
8425: ARRAY
8426: PPUSH
8427: LD_STRING D8-Rus1-1
8429: PPUSH
8430: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8434: LD_EXP 37
8438: PPUSH
8439: LD_STRING D8-JMM-1
8441: PPUSH
8442: CALL_OW 88
// DialogueOff ;
8446: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8450: LD_EXP 54
8454: PPUSH
8455: LD_INT 13
8457: PPUSH
8458: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8462: LD_INT 35
8464: PPUSH
8465: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8469: LD_VAR 0 1
8473: NOT
8474: PUSH
8475: LD_EXP 54
8479: PUSH
8480: LD_INT 1
8482: ARRAY
8483: PPUSH
8484: CALL_OW 301
8488: AND
8489: IFFALSE 8499
// dead1 := true ;
8491: LD_ADDR_VAR 0 1
8495: PUSH
8496: LD_INT 1
8498: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8499: LD_VAR 0 2
8503: NOT
8504: PUSH
8505: LD_EXP 54
8509: PUSH
8510: LD_INT 2
8512: ARRAY
8513: PPUSH
8514: CALL_OW 301
8518: AND
8519: IFFALSE 8529
// dead2 := true ;
8521: LD_ADDR_VAR 0 2
8525: PUSH
8526: LD_INT 1
8528: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8529: LD_VAR 0 3
8533: NOT
8534: PUSH
8535: LD_EXP 54
8539: PUSH
8540: LD_INT 1
8542: ARRAY
8543: PPUSH
8544: LD_INT 14
8546: PPUSH
8547: CALL_OW 308
8551: AND
8552: IFFALSE 8562
// inarea1 := true ;
8554: LD_ADDR_VAR 0 3
8558: PUSH
8559: LD_INT 1
8561: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
8562: LD_VAR 0 4
8566: NOT
8567: PUSH
8568: LD_EXP 54
8572: PUSH
8573: LD_INT 2
8575: ARRAY
8576: PPUSH
8577: LD_INT 14
8579: PPUSH
8580: CALL_OW 308
8584: AND
8585: IFFALSE 8595
// inarea2 := true ;
8587: LD_ADDR_VAR 0 4
8591: PUSH
8592: LD_INT 1
8594: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
8595: LD_VAR 0 1
8599: PUSH
8600: LD_VAR 0 2
8604: AND
8605: PUSH
8606: LD_VAR 0 1
8610: PUSH
8611: LD_VAR 0 4
8615: AND
8616: OR
8617: PUSH
8618: LD_VAR 0 2
8622: PUSH
8623: LD_VAR 0 3
8627: AND
8628: OR
8629: PUSH
8630: LD_VAR 0 3
8634: PUSH
8635: LD_VAR 0 4
8639: AND
8640: OR
8641: IFFALSE 8462
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
8643: LD_VAR 0 3
8647: PUSH
8648: LD_VAR 0 4
8652: AND
8653: PUSH
8654: LD_VAR 0 1
8658: PUSH
8659: LD_VAR 0 4
8663: AND
8664: OR
8665: PUSH
8666: LD_VAR 0 2
8670: PUSH
8671: LD_VAR 0 3
8675: AND
8676: OR
8677: IFFALSE 9373
// begin prepare_siege := true ;
8679: LD_ADDR_EXP 31
8683: PUSH
8684: LD_INT 1
8686: ST_TO_ADDR
// DialogueOn ;
8687: CALL_OW 6
// if ( inarea1 and inarea2 ) then
8691: LD_VAR 0 3
8695: PUSH
8696: LD_VAR 0 4
8700: AND
8701: IFFALSE 8717
// Say ( JMM , D8b-JMM-1a ) else
8703: LD_EXP 37
8707: PPUSH
8708: LD_STRING D8b-JMM-1a
8710: PPUSH
8711: CALL_OW 88
8715: GO 8729
// Say ( JMM , D8b-JMM-1 ) ;
8717: LD_EXP 37
8721: PPUSH
8722: LD_STRING D8b-JMM-1
8724: PPUSH
8725: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
8729: LD_EXP 4
8733: PPUSH
8734: LD_INT 26
8736: PUSH
8737: LD_INT 1
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PPUSH
8744: CALL_OW 72
8748: PUSH
8749: LD_EXP 38
8753: PUSH
8754: LD_EXP 39
8758: PUSH
8759: LD_EXP 48
8763: PUSH
8764: LD_EXP 51
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: DIFF
8775: PPUSH
8776: LD_STRING D8b-Sol1-1
8778: PPUSH
8779: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
8783: LD_EXP 39
8787: PUSH
8788: LD_EXP 39
8792: PUSH
8793: LD_EXP 4
8797: IN
8798: AND
8799: IFFALSE 8815
// Say ( Cyrus , D8b-Cyrus-1 ) else
8801: LD_EXP 39
8805: PPUSH
8806: LD_STRING D8b-Cyrus-1
8808: PPUSH
8809: CALL_OW 88
8813: GO 8827
// Say ( JMM , D8b-JMM-1a ) ;
8815: LD_EXP 37
8819: PPUSH
8820: LD_STRING D8b-JMM-1a
8822: PPUSH
8823: CALL_OW 88
// if Lisa and Lisa in jmm_units then
8827: LD_EXP 40
8831: PUSH
8832: LD_EXP 40
8836: PUSH
8837: LD_EXP 4
8841: IN
8842: AND
8843: IFFALSE 8857
// Say ( Lisa , D8b-Lisa-2 ) ;
8845: LD_EXP 40
8849: PPUSH
8850: LD_STRING D8b-Lisa-2
8852: PPUSH
8853: CALL_OW 88
// if Bobby and Bobby in jmm_units then
8857: LD_EXP 38
8861: PUSH
8862: LD_EXP 38
8866: PUSH
8867: LD_EXP 4
8871: IN
8872: AND
8873: IFFALSE 8889
// Say ( Bobby , D8b-Bobby-1 ) else
8875: LD_EXP 38
8879: PPUSH
8880: LD_STRING D8b-Bobby-1
8882: PPUSH
8883: CALL_OW 88
8887: GO 8949
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
8889: LD_ADDR_VAR 0 5
8893: PUSH
8894: LD_EXP 4
8898: PPUSH
8899: LD_INT 26
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PPUSH
8909: CALL_OW 72
8913: PUSH
8914: LD_EXP 38
8918: PUSH
8919: LD_EXP 39
8923: PUSH
8924: LD_EXP 48
8928: PUSH
8929: LD_EXP 51
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: DIFF
8940: PPUSH
8941: LD_STRING D8b-Sol2-1
8943: PPUSH
8944: CALL 585 0 2
8948: ST_TO_ADDR
// DialogueOff ;
8949: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
8953: LD_EXP 39
8957: PUSH
8958: LD_EXP 39
8962: PUSH
8963: LD_EXP 4
8967: IN
8968: AND
8969: IFFALSE 8994
// tmp := Insert ( tmp , 1 , Cyrus ) ;
8971: LD_ADDR_VAR 0 6
8975: PUSH
8976: LD_VAR 0 6
8980: PPUSH
8981: LD_INT 1
8983: PPUSH
8984: LD_EXP 39
8988: PPUSH
8989: CALL_OW 2
8993: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
8994: LD_EXP 38
8998: PUSH
8999: LD_EXP 38
9003: PUSH
9004: LD_EXP 4
9008: IN
9009: AND
9010: IFFALSE 9035
// tmp := Insert ( tmp , 1 , Bobby ) ;
9012: LD_ADDR_VAR 0 6
9016: PUSH
9017: LD_VAR 0 6
9021: PPUSH
9022: LD_INT 1
9024: PPUSH
9025: LD_EXP 38
9029: PPUSH
9030: CALL_OW 2
9034: ST_TO_ADDR
// if sol then
9035: LD_VAR 0 5
9039: IFFALSE 9064
// tmp := Insert ( tmp , 1 , sol ) ;
9041: LD_ADDR_VAR 0 6
9045: PUSH
9046: LD_VAR 0 6
9050: PPUSH
9051: LD_INT 1
9053: PPUSH
9054: LD_VAR 0 5
9058: PPUSH
9059: CALL_OW 2
9063: ST_TO_ADDR
// if tmp then
9064: LD_VAR 0 6
9068: IFFALSE 9332
// begin SetSide ( tmp , 8 ) ;
9070: LD_VAR 0 6
9074: PPUSH
9075: LD_INT 8
9077: PPUSH
9078: CALL_OW 235
// for i in tmp do
9082: LD_ADDR_VAR 0 7
9086: PUSH
9087: LD_VAR 0 6
9091: PUSH
9092: FOR_IN
9093: IFFALSE 9184
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9095: LD_VAR 0 7
9099: PPUSH
9100: CALL_OW 310
9104: PUSH
9105: LD_VAR 0 7
9109: PPUSH
9110: CALL_OW 310
9114: PPUSH
9115: CALL_OW 266
9119: PUSH
9120: LD_INT 3
9122: EQUAL
9123: AND
9124: IFFALSE 9135
// ComExitBuilding ( i ) ;
9126: LD_VAR 0 7
9130: PPUSH
9131: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9135: LD_VAR 0 7
9139: PPUSH
9140: CALL_OW 310
9144: PUSH
9145: LD_VAR 0 7
9149: PPUSH
9150: CALL_OW 310
9154: PPUSH
9155: CALL_OW 266
9159: PUSH
9160: LD_INT 2
9162: EQUAL
9163: AND
9164: IFFALSE 9175
// ComExitVehicle ( i ) ;
9166: LD_VAR 0 7
9170: PPUSH
9171: CALL_OW 121
// wait ( 0 0$1 ) ;
9175: LD_INT 35
9177: PPUSH
9178: CALL_OW 67
// end ;
9182: GO 9092
9184: POP
9185: POP
// ComFree ( tmp ) ;
9186: LD_VAR 0 6
9190: PPUSH
9191: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9195: LD_VAR 0 6
9199: PPUSH
9200: LD_INT 15
9202: PPUSH
9203: CALL_OW 173
// AddComHold ( tmp ) ;
9207: LD_VAR 0 6
9211: PPUSH
9212: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9216: LD_INT 35
9218: PPUSH
9219: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9223: LD_VAR 0 6
9227: PUSH
9228: LD_INT 1
9230: ARRAY
9231: PPUSH
9232: CALL_OW 314
9236: NOT
9237: IFFALSE 9251
// ComMoveToArea ( tmp , cyrusEscape ) ;
9239: LD_VAR 0 6
9243: PPUSH
9244: LD_INT 15
9246: PPUSH
9247: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9251: LD_VAR 0 6
9255: PUSH
9256: LD_INT 1
9258: ARRAY
9259: PPUSH
9260: LD_INT 15
9262: PPUSH
9263: CALL_OW 308
9267: IFFALSE 9322
// begin RemoveUnit ( tmp [ 1 ] ) ;
9269: LD_VAR 0 6
9273: PUSH
9274: LD_INT 1
9276: ARRAY
9277: PPUSH
9278: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9282: LD_ADDR_EXP 4
9286: PUSH
9287: LD_EXP 4
9291: PUSH
9292: LD_VAR 0 6
9296: PUSH
9297: LD_INT 1
9299: ARRAY
9300: DIFF
9301: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9302: LD_ADDR_VAR 0 6
9306: PUSH
9307: LD_VAR 0 6
9311: PUSH
9312: LD_VAR 0 6
9316: PUSH
9317: LD_INT 1
9319: ARRAY
9320: DIFF
9321: ST_TO_ADDR
// end ; until tmp = 0 ;
9322: LD_VAR 0 6
9326: PUSH
9327: LD_INT 0
9329: EQUAL
9330: IFFALSE 9216
// end ; wait ( 0 0$30 ) ;
9332: LD_INT 1050
9334: PPUSH
9335: CALL_OW 67
// if ru_spec_patrol then
9339: LD_EXP 54
9343: IFFALSE 9371
// for i in ru_spec_patrol do
9345: LD_ADDR_VAR 0 7
9349: PUSH
9350: LD_EXP 54
9354: PUSH
9355: FOR_IN
9356: IFFALSE 9369
// RemoveUnit ( i ) ;
9358: LD_VAR 0 7
9362: PPUSH
9363: CALL_OW 64
9367: GO 9355
9369: POP
9370: POP
// end else
9371: GO 9393
// begin prepare_siege := false ;
9373: LD_ADDR_EXP 31
9377: PUSH
9378: LD_INT 0
9380: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9381: LD_EXP 37
9385: PPUSH
9386: LD_STRING D8a-JMM-1
9388: PPUSH
9389: CALL_OW 88
// end ; end ;
9393: PPOPN 7
9395: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9396: LD_EXP 12
9400: IFFALSE 10668
9402: GO 9404
9404: DISABLE
9405: LD_INT 0
9407: PPUSH
9408: PPUSH
9409: PPUSH
// begin uc_side := 8 ;
9410: LD_ADDR_OWVAR 20
9414: PUSH
9415: LD_INT 8
9417: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9418: LD_ADDR_VAR 0 3
9422: PUSH
9423: LD_INT 59
9425: PUSH
9426: LD_INT 71
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 122
9435: PUSH
9436: LD_INT 117
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9447: LD_ADDR_EXP 51
9451: PUSH
9452: LD_STRING Frank
9454: PPUSH
9455: LD_INT 0
9457: PPUSH
9458: LD_STRING 
9460: PPUSH
9461: CALL 38595 0 3
9465: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9466: LD_ADDR_VAR 0 1
9470: PUSH
9471: LD_INT 1
9473: PPUSH
9474: LD_INT 2
9476: PPUSH
9477: CALL_OW 12
9481: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9482: LD_EXP 51
9486: PPUSH
9487: LD_VAR 0 3
9491: PUSH
9492: LD_VAR 0 1
9496: ARRAY
9497: PUSH
9498: LD_INT 1
9500: ARRAY
9501: PPUSH
9502: LD_VAR 0 3
9506: PUSH
9507: LD_VAR 0 1
9511: ARRAY
9512: PUSH
9513: LD_INT 2
9515: ARRAY
9516: PPUSH
9517: LD_INT 0
9519: PPUSH
9520: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9524: LD_EXP 51
9528: PPUSH
9529: LD_INT 1
9531: PPUSH
9532: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9536: LD_INT 35
9538: PPUSH
9539: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9543: LD_EXP 51
9547: PPUSH
9548: LD_EXP 37
9552: PPUSH
9553: CALL_OW 296
9557: PUSH
9558: LD_INT 8
9560: LESS
9561: PUSH
9562: LD_EXP 51
9566: PPUSH
9567: CALL_OW 256
9571: PUSH
9572: LD_INT 250
9574: GREATER
9575: AND
9576: IFFALSE 9536
// Video ( true ) ;
9578: LD_INT 1
9580: PPUSH
9581: CALL 75943 0 1
// CenterOnUnits ( JMM ) ;
9585: LD_EXP 37
9589: PPUSH
9590: CALL_OW 85
// if IsInUnit ( JMM ) then
9594: LD_EXP 37
9598: PPUSH
9599: CALL_OW 310
9603: IFFALSE 9614
// ComFree ( JMM ) ;
9605: LD_EXP 37
9609: PPUSH
9610: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
9614: LD_EXP 37
9618: PPUSH
9619: LD_EXP 51
9623: PPUSH
9624: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
9628: LD_EXP 51
9632: PPUSH
9633: LD_EXP 37
9637: PPUSH
9638: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
9642: LD_EXP 37
9646: PPUSH
9647: LD_STRING D6-JMM-1
9649: PPUSH
9650: CALL_OW 88
// p := 0 ;
9654: LD_ADDR_VAR 0 2
9658: PUSH
9659: LD_INT 0
9661: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9662: LD_INT 35
9664: PPUSH
9665: CALL_OW 67
// p := p + 1 ;
9669: LD_ADDR_VAR 0 2
9673: PUSH
9674: LD_VAR 0 2
9678: PUSH
9679: LD_INT 1
9681: PLUS
9682: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
9683: LD_EXP 37
9687: PPUSH
9688: LD_EXP 51
9692: PPUSH
9693: CALL_OW 296
9697: PUSH
9698: LD_INT 8
9700: LESS
9701: PUSH
9702: LD_VAR 0 2
9706: PUSH
9707: LD_INT 7
9709: GREATER
9710: OR
9711: IFFALSE 9662
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
9713: LD_EXP 40
9717: PUSH
9718: LD_EXP 40
9722: PPUSH
9723: LD_EXP 51
9727: PPUSH
9728: CALL_OW 296
9732: PUSH
9733: LD_INT 20
9735: LESS
9736: AND
9737: PUSH
9738: LD_EXP 40
9742: PUSH
9743: LD_EXP 4
9747: IN
9748: AND
9749: IFFALSE 9774
// begin ComFree ( Lisa ) ;
9751: LD_EXP 40
9755: PPUSH
9756: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
9760: LD_EXP 40
9764: PPUSH
9765: LD_EXP 51
9769: PPUSH
9770: CALL_OW 172
// end ; if Lynch then
9774: LD_EXP 47
9778: IFFALSE 9803
// begin ComFree ( Lynch ) ;
9780: LD_EXP 47
9784: PPUSH
9785: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
9789: LD_EXP 47
9793: PPUSH
9794: LD_EXP 51
9798: PPUSH
9799: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
9803: LD_EXP 37
9807: PPUSH
9808: LD_EXP 51
9812: PPUSH
9813: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
9817: LD_EXP 51
9821: PPUSH
9822: LD_EXP 37
9826: PPUSH
9827: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
9831: LD_EXP 51
9835: PPUSH
9836: LD_STRING D6-Frank-1
9838: PPUSH
9839: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
9843: LD_INT 69
9845: PPUSH
9846: LD_INT 20
9848: PPUSH
9849: LD_INT 1
9851: PPUSH
9852: LD_INT 20
9854: NEG
9855: PPUSH
9856: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
9860: LD_INT 69
9862: PPUSH
9863: LD_INT 20
9865: PPUSH
9866: LD_INT 1
9868: PPUSH
9869: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
9873: LD_INT 190
9875: PPUSH
9876: LD_INT 31
9878: PPUSH
9879: LD_INT 1
9881: PPUSH
9882: LD_INT 20
9884: NEG
9885: PPUSH
9886: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
9890: LD_INT 190
9892: PPUSH
9893: LD_INT 31
9895: PPUSH
9896: LD_INT 1
9898: PPUSH
9899: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
9903: LD_INT 69
9905: PPUSH
9906: LD_INT 20
9908: PPUSH
9909: CALL_OW 84
// Wait ( 0 0$02 ) ;
9913: LD_INT 70
9915: PPUSH
9916: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
9920: LD_EXP 37
9924: PPUSH
9925: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
9929: LD_EXP 40
9933: PUSH
9934: LD_EXP 40
9938: PPUSH
9939: LD_EXP 51
9943: PPUSH
9944: CALL_OW 296
9948: PUSH
9949: LD_INT 20
9951: LESS
9952: AND
9953: PUSH
9954: LD_EXP 40
9958: PPUSH
9959: CALL_OW 302
9963: AND
9964: PUSH
9965: LD_EXP 40
9969: PUSH
9970: LD_EXP 4
9974: IN
9975: AND
9976: IFFALSE 10098
// begin ComFree ( Lisa ) ;
9978: LD_EXP 40
9982: PPUSH
9983: CALL_OW 139
// p := 0 ;
9987: LD_ADDR_VAR 0 2
9991: PUSH
9992: LD_INT 0
9994: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9995: LD_INT 35
9997: PPUSH
9998: CALL_OW 67
// p := p + 1 ;
10002: LD_ADDR_VAR 0 2
10006: PUSH
10007: LD_VAR 0 2
10011: PUSH
10012: LD_INT 1
10014: PLUS
10015: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10016: LD_EXP 40
10020: PPUSH
10021: LD_EXP 51
10025: PPUSH
10026: CALL_OW 296
10030: PUSH
10031: LD_INT 7
10033: LESS
10034: PUSH
10035: LD_VAR 0 2
10039: PUSH
10040: LD_INT 7
10042: GREATER
10043: OR
10044: IFFALSE 9995
// Say ( Lisa , D6-Lisa-1 ) ;
10046: LD_EXP 40
10050: PPUSH
10051: LD_STRING D6-Lisa-1
10053: PPUSH
10054: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10058: LD_EXP 40
10062: PPUSH
10063: LD_EXP 51
10067: PPUSH
10068: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10072: LD_EXP 51
10076: PPUSH
10077: LD_EXP 40
10081: PPUSH
10082: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10086: LD_EXP 51
10090: PPUSH
10091: LD_STRING D6-Frank-2
10093: PPUSH
10094: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10098: LD_EXP 47
10102: PUSH
10103: LD_EXP 47
10107: PPUSH
10108: LD_EXP 51
10112: PPUSH
10113: CALL_OW 296
10117: PUSH
10118: LD_INT 20
10120: LESS
10121: AND
10122: PUSH
10123: LD_EXP 47
10127: PPUSH
10128: CALL_OW 302
10132: AND
10133: IFFALSE 10326
// begin ComTurnUnit ( Lynch , JMM ) ;
10135: LD_EXP 47
10139: PPUSH
10140: LD_EXP 37
10144: PPUSH
10145: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10149: LD_EXP 51
10153: PPUSH
10154: LD_EXP 37
10158: PPUSH
10159: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10163: LD_EXP 47
10167: PPUSH
10168: LD_STRING D6-Sol1-2
10170: PPUSH
10171: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10175: LD_EXP 37
10179: PPUSH
10180: LD_STRING D6-JMM-2
10182: PPUSH
10183: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10187: LD_EXP 51
10191: PPUSH
10192: LD_STRING D6-Frank-3
10194: PPUSH
10195: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10199: LD_EXP 37
10203: PPUSH
10204: LD_STRING D6-JMM-3
10206: PPUSH
10207: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10211: LD_EXP 51
10215: PPUSH
10216: LD_STRING D6-Frank-4
10218: PPUSH
10219: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10223: LD_EXP 51
10227: PPUSH
10228: LD_STRING D6-Frank-4a
10230: PPUSH
10231: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10235: LD_EXP 37
10239: PPUSH
10240: LD_STRING D6-JMM-4
10242: PPUSH
10243: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10247: LD_EXP 51
10251: PPUSH
10252: LD_STRING D6-Frank-5
10254: PPUSH
10255: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10259: LD_EXP 40
10263: PUSH
10264: LD_EXP 40
10268: PPUSH
10269: CALL_OW 302
10273: AND
10274: PUSH
10275: LD_EXP 40
10279: PUSH
10280: LD_EXP 4
10284: IN
10285: AND
10286: IFFALSE 10300
// Say ( Lisa , D6-Lisa-5 ) ;
10288: LD_EXP 40
10292: PPUSH
10293: LD_STRING D6-Lisa-5
10295: PPUSH
10296: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10300: LD_EXP 51
10304: PPUSH
10305: LD_STRING D6-Frank-6
10307: PPUSH
10308: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10312: LD_EXP 37
10316: PPUSH
10317: LD_STRING D6-JMM-6
10319: PPUSH
10320: CALL_OW 88
// end else
10324: GO 10453
// begin ComTurnUnit ( Frank , JMM ) ;
10326: LD_EXP 51
10330: PPUSH
10331: LD_EXP 37
10335: PPUSH
10336: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10340: LD_EXP 51
10344: PPUSH
10345: LD_STRING D6-Frank-4
10347: PPUSH
10348: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10352: LD_EXP 51
10356: PPUSH
10357: LD_STRING D6-Frank-4a
10359: PPUSH
10360: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10364: LD_EXP 37
10368: PPUSH
10369: LD_STRING D6-JMM-4
10371: PPUSH
10372: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10376: LD_EXP 51
10380: PPUSH
10381: LD_STRING D6-Frank-5
10383: PPUSH
10384: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10388: LD_EXP 40
10392: PUSH
10393: LD_EXP 40
10397: PPUSH
10398: CALL_OW 302
10402: AND
10403: PUSH
10404: LD_EXP 40
10408: PUSH
10409: LD_EXP 4
10413: IN
10414: AND
10415: IFFALSE 10429
// Say ( Lisa , D6-Lisa-5 ) ;
10417: LD_EXP 40
10421: PPUSH
10422: LD_STRING D6-Lisa-5
10424: PPUSH
10425: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10429: LD_EXP 51
10433: PPUSH
10434: LD_STRING D6-Frank-6
10436: PPUSH
10437: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10441: LD_EXP 37
10445: PPUSH
10446: LD_STRING D6-JMM-6
10448: PPUSH
10449: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10453: LD_STRING Q1
10455: PPUSH
10456: CALL_OW 97
10460: PUSH
10461: LD_INT 1
10463: DOUBLE
10464: EQUAL
10465: IFTRUE 10469
10467: GO 10480
10469: POP
// frank_send_to_scout := true ; 2 :
10470: LD_ADDR_EXP 15
10474: PUSH
10475: LD_INT 1
10477: ST_TO_ADDR
10478: GO 10500
10480: LD_INT 2
10482: DOUBLE
10483: EQUAL
10484: IFTRUE 10488
10486: GO 10499
10488: POP
// frank_send_to_scout := false ; end ;
10489: LD_ADDR_EXP 15
10493: PUSH
10494: LD_INT 0
10496: ST_TO_ADDR
10497: GO 10500
10499: POP
// Video ( false ) ;
10500: LD_INT 0
10502: PPUSH
10503: CALL 75943 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10507: LD_EXP 37
10511: PUSH
10512: LD_EXP 40
10516: PUSH
10517: LD_EXP 47
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: LIST
10526: PPUSH
10527: CALL_OW 139
// if frank_send_to_scout then
10531: LD_EXP 15
10535: IFFALSE 10589
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10537: LD_EXP 51
10541: PPUSH
10542: LD_INT 15
10544: PPUSH
10545: CALL_OW 113
// wait ( 0 0$01 ) ;
10549: LD_INT 35
10551: PPUSH
10552: CALL_OW 67
// until not See ( 1 , Frank ) ;
10556: LD_INT 1
10558: PPUSH
10559: LD_EXP 51
10563: PPUSH
10564: CALL_OW 292
10568: NOT
10569: IFFALSE 10537
// wait ( 0 0$02 ) ;
10571: LD_INT 70
10573: PPUSH
10574: CALL_OW 67
// RemoveUnit ( Frank ) ;
10578: LD_EXP 51
10582: PPUSH
10583: CALL_OW 64
// end else
10587: GO 10601
// SetSide ( Frank , 1 ) ;
10589: LD_EXP 51
10593: PPUSH
10594: LD_INT 1
10596: PPUSH
10597: CALL_OW 235
// send_attack_on_cornel_base := true ;
10601: LD_ADDR_EXP 26
10605: PUSH
10606: LD_INT 1
10608: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10609: LD_INT 35
10611: PPUSH
10612: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
10616: LD_ADDR_EXP 29
10620: PUSH
10621: LD_EXP 29
10625: PPUSH
10626: LD_STRING -
10628: PPUSH
10629: CALL 1077 0 2
10633: ST_TO_ADDR
// if debug then
10634: LD_EXP 1
10638: IFFALSE 10650
// debug_strings := time_to_prepare ;
10640: LD_ADDR_OWVAR 48
10644: PUSH
10645: LD_EXP 29
10649: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
10650: LD_EXP 29
10654: PUSH
10655: LD_INT 0
10657: EQUAL
10658: IFFALSE 10609
// cornel_prepared := true ;
10660: LD_ADDR_EXP 11
10664: PUSH
10665: LD_INT 1
10667: ST_TO_ADDR
// end ;
10668: PPOPN 3
10670: END
// every 0 0$01 trigger cornel_prepared do
10671: LD_EXP 11
10675: IFFALSE 10983
10677: GO 10679
10679: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
10680: LD_EXP 44
10684: PPUSH
10685: LD_STRING D3-Corn-1
10687: PPUSH
10688: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
10692: LD_STRING MOutWait
10694: PPUSH
10695: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
10699: LD_INT 35
10701: PPUSH
10702: CALL_OW 67
// until cornel_counter = 0 ;
10706: LD_EXP 10
10710: PUSH
10711: LD_INT 0
10713: EQUAL
10714: IFFALSE 10699
// SayRadio ( Cornel , D3a-Corn-1 ) ;
10716: LD_EXP 44
10720: PPUSH
10721: LD_STRING D3a-Corn-1
10723: PPUSH
10724: CALL_OW 94
// if IsOk ( Cornel ) then
10728: LD_EXP 44
10732: PPUSH
10733: CALL_OW 302
10737: IFFALSE 10751
// Say ( JMM , D3a-JMM-1 ) ;
10739: LD_EXP 37
10743: PPUSH
10744: LD_STRING D3a-JMM-1
10746: PPUSH
10747: CALL_OW 88
// end_mission_allowed := true ;
10751: LD_ADDR_EXP 21
10755: PUSH
10756: LD_INT 1
10758: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
10759: LD_STRING M2
10761: PPUSH
10762: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
10766: LD_INT 9
10768: PPUSH
10769: LD_INT 1
10771: PPUSH
10772: CALL_OW 424
// Wait ( 0 0$05 ) ;
10776: LD_INT 175
10778: PPUSH
10779: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
10783: LD_EXP 44
10787: PPUSH
10788: LD_STRING D3a-Corn-2
10790: PPUSH
10791: CALL_OW 94
// cornel_attack := true ;
10795: LD_ADDR_EXP 9
10799: PUSH
10800: LD_INT 1
10802: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
10803: LD_INT 105
10805: PPUSH
10806: CALL_OW 67
// AddMoreTanks ( ) ;
10810: CALL 4940 0 0
// if frank_send_to_scout then
10814: LD_EXP 15
10818: IFFALSE 10983
// begin InitHc ;
10820: CALL_OW 19
// InitUc ;
10824: CALL_OW 18
// uc_side := 8 ;
10828: LD_ADDR_OWVAR 20
10832: PUSH
10833: LD_INT 8
10835: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
10836: LD_ADDR_EXP 51
10840: PUSH
10841: LD_STRING Frank
10843: PPUSH
10844: LD_INT 0
10846: PPUSH
10847: LD_STRING 
10849: PPUSH
10850: CALL 38595 0 3
10854: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
10855: LD_EXP 51
10859: PPUSH
10860: LD_INT 6
10862: PPUSH
10863: LD_INT 9
10865: PPUSH
10866: LD_INT 0
10868: PPUSH
10869: CALL_OW 48
// ComCrawl ( Frank ) ;
10873: LD_EXP 51
10877: PPUSH
10878: CALL_OW 137
// repeat wait ( 10 ) ;
10882: LD_INT 10
10884: PPUSH
10885: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
10889: LD_EXP 37
10893: PPUSH
10894: LD_EXP 51
10898: PPUSH
10899: CALL_OW 296
10903: PUSH
10904: LD_INT 9
10906: LESS
10907: PUSH
10908: LD_INT 9
10910: PPUSH
10911: LD_INT 22
10913: PUSH
10914: LD_INT 1
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PPUSH
10921: CALL_OW 70
10925: OR
10926: IFFALSE 10882
// if IsDead ( Frank ) then
10928: LD_EXP 51
10932: PPUSH
10933: CALL_OW 301
10937: IFFALSE 10941
// exit ;
10939: GO 10983
// CenterOnUnits ( Frank ) ;
10941: LD_EXP 51
10945: PPUSH
10946: CALL_OW 85
// SetSide ( Frank , 1 ) ;
10950: LD_EXP 51
10954: PPUSH
10955: LD_INT 1
10957: PPUSH
10958: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
10962: LD_EXP 51
10966: PPUSH
10967: LD_STRING D6a-Frank-1
10969: PPUSH
10970: CALL_OW 88
// ComWalk ( Frank ) ;
10974: LD_EXP 51
10978: PPUSH
10979: CALL_OW 138
// end ; end ;
10983: END
// every 0 0$01 trigger solar_builded do
10984: LD_EXP 14
10988: IFFALSE 11092
10990: GO 10992
10992: DISABLE
// begin Wait ( 0 0$02 ) ;
10993: LD_INT 70
10995: PPUSH
10996: CALL_OW 67
// DialogueOn ;
11000: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11004: LD_EXP 37
11008: PPUSH
11009: LD_STRING D2b-JMM-1
11011: PPUSH
11012: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11016: LD_EXP 48
11020: PUSH
11021: LD_EXP 48
11025: PPUSH
11026: CALL_OW 302
11030: AND
11031: IFFALSE 11081
// begin Say ( Walker , D2b-Sci1-1 ) ;
11033: LD_EXP 48
11037: PPUSH
11038: LD_STRING D2b-Sci1-1
11040: PPUSH
11041: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11045: LD_EXP 37
11049: PPUSH
11050: LD_STRING D2b-JMM-2
11052: PPUSH
11053: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11057: LD_EXP 48
11061: PPUSH
11062: LD_STRING D2b-Sci1-2
11064: PPUSH
11065: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11069: LD_EXP 37
11073: PPUSH
11074: LD_STRING D2b-JMM-3
11076: PPUSH
11077: CALL_OW 88
// end ; DialogueOff ;
11081: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11085: LD_STRING MOutSol
11087: PPUSH
11088: CALL_OW 337
// end ;
11092: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11093: LD_EXP 14
11097: PUSH
11098: LD_EXP 37
11102: PPUSH
11103: CALL_OW 302
11107: AND
11108: PUSH
11109: LD_EXP 37
11113: PPUSH
11114: CALL 911 0 1
11118: AND
11119: PUSH
11120: LD_EXP 16
11124: NOT
11125: AND
11126: IFFALSE 11197
11128: GO 11130
11130: DISABLE
11131: LD_INT 0
11133: PPUSH
// begin jmm_in_veh := true ;
11134: LD_ADDR_EXP 16
11138: PUSH
11139: LD_INT 1
11141: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11142: LD_ADDR_VAR 0 1
11146: PUSH
11147: LD_INT 0
11149: PPUSH
11150: LD_INT 1
11152: PPUSH
11153: CALL_OW 12
11157: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11158: LD_INT 70
11160: PPUSH
11161: CALL_OW 67
// if i then
11165: LD_VAR 0 1
11169: IFFALSE 11185
// Say ( JMM , D2c-JMM-1 ) else
11171: LD_EXP 37
11175: PPUSH
11176: LD_STRING D2c-JMM-1
11178: PPUSH
11179: CALL_OW 88
11183: GO 11197
// Say ( JMM , D2c-JMM-1a ) ;
11185: LD_EXP 37
11189: PPUSH
11190: LD_STRING D2c-JMM-1a
11192: PPUSH
11193: CALL_OW 88
// end ;
11197: PPOPN 1
11199: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11200: LD_EXP 14
11204: PUSH
11205: LD_EXP 38
11209: PPUSH
11210: CALL_OW 302
11214: AND
11215: PUSH
11216: LD_EXP 38
11220: PPUSH
11221: CALL 911 0 1
11225: AND
11226: PUSH
11227: LD_EXP 17
11231: NOT
11232: AND
11233: IFFALSE 11265
11235: GO 11237
11237: DISABLE
// begin bobby_in_veh := true ;
11238: LD_ADDR_EXP 17
11242: PUSH
11243: LD_INT 1
11245: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11246: LD_INT 70
11248: PPUSH
11249: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11253: LD_EXP 38
11257: PPUSH
11258: LD_STRING D2c-Bobby-1
11260: PPUSH
11261: CALL_OW 88
11265: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11266: LD_EXP 14
11270: PUSH
11271: LD_EXP 40
11275: PPUSH
11276: CALL_OW 302
11280: AND
11281: PUSH
11282: LD_EXP 40
11286: PPUSH
11287: CALL 911 0 1
11291: AND
11292: PUSH
11293: LD_EXP 19
11297: NOT
11298: AND
11299: IFFALSE 11331
11301: GO 11303
11303: DISABLE
// begin lisa_in_veh := true ;
11304: LD_ADDR_EXP 19
11308: PUSH
11309: LD_INT 1
11311: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11312: LD_INT 70
11314: PPUSH
11315: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11319: LD_EXP 40
11323: PPUSH
11324: LD_STRING D2c-Lisa-1
11326: PPUSH
11327: CALL_OW 88
11331: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11332: LD_EXP 14
11336: PUSH
11337: LD_EXP 39
11341: PPUSH
11342: CALL_OW 302
11346: AND
11347: PUSH
11348: LD_EXP 39
11352: PPUSH
11353: CALL 911 0 1
11357: AND
11358: PUSH
11359: LD_EXP 18
11363: NOT
11364: AND
11365: IFFALSE 11436
11367: GO 11369
11369: DISABLE
11370: LD_INT 0
11372: PPUSH
// begin cyrus_in_veh := true ;
11373: LD_ADDR_EXP 18
11377: PUSH
11378: LD_INT 1
11380: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11381: LD_ADDR_VAR 0 1
11385: PUSH
11386: LD_INT 0
11388: PPUSH
11389: LD_INT 1
11391: PPUSH
11392: CALL_OW 12
11396: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11397: LD_INT 70
11399: PPUSH
11400: CALL_OW 67
// if i then
11404: LD_VAR 0 1
11408: IFFALSE 11424
// Say ( Cyrus , D2c-Cyrus-1 ) else
11410: LD_EXP 39
11414: PPUSH
11415: LD_STRING D2c-Cyrus-1
11417: PPUSH
11418: CALL_OW 88
11422: GO 11436
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11424: LD_EXP 39
11428: PPUSH
11429: LD_STRING D2c-Cyrus-1a
11431: PPUSH
11432: CALL_OW 88
// end ;
11436: PPOPN 1
11438: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11439: LD_EXP 44
11443: PPUSH
11444: LD_INT 16
11446: PPUSH
11447: CALL_OW 308
11451: IFFALSE 11732
11453: GO 11455
11455: DISABLE
11456: LD_INT 0
11458: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11459: LD_INT 3
11461: PPUSH
11462: LD_EXP 44
11466: PPUSH
11467: CALL_OW 471
// send_attack_on_cornel := true ;
11471: LD_ADDR_EXP 32
11475: PUSH
11476: LD_INT 1
11478: ST_TO_ADDR
// if ru_vehicles then
11479: LD_EXP 56
11483: IFFALSE 11517
// for i in ru_vehicles do
11485: LD_ADDR_VAR 0 1
11489: PUSH
11490: LD_EXP 56
11494: PUSH
11495: FOR_IN
11496: IFFALSE 11515
// ComAgressiveMove ( i , 215 , 69 ) ;
11498: LD_VAR 0 1
11502: PPUSH
11503: LD_INT 215
11505: PPUSH
11506: LD_INT 69
11508: PPUSH
11509: CALL_OW 114
11513: GO 11495
11515: POP
11516: POP
// if ru_patrol then
11517: LD_EXP 53
11521: IFFALSE 11555
// for i in ru_patrol do
11523: LD_ADDR_VAR 0 1
11527: PUSH
11528: LD_EXP 53
11532: PUSH
11533: FOR_IN
11534: IFFALSE 11553
// ComAgressiveMove ( i , 215 , 69 ) ;
11536: LD_VAR 0 1
11540: PPUSH
11541: LD_INT 215
11543: PPUSH
11544: LD_INT 69
11546: PPUSH
11547: CALL_OW 114
11551: GO 11533
11553: POP
11554: POP
// if frank_send_to_scout then
11555: LD_EXP 15
11559: IFFALSE 11573
// begin SayRadio ( Frank , D3b-Frank-1 ) ;
11561: LD_EXP 51
11565: PPUSH
11566: LD_STRING D3b-Frank-1
11568: PPUSH
11569: CALL_OW 94
// end ; Wait ( 0 0$03 ) ;
11573: LD_INT 105
11575: PPUSH
11576: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11580: LD_EXP 44
11584: PPUSH
11585: LD_STRING D4-Corn-1
11587: PPUSH
11588: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11592: LD_INT 35
11594: PPUSH
11595: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11599: LD_INT 22
11601: PUSH
11602: LD_INT 4
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 21
11611: PUSH
11612: LD_INT 1
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 3
11621: PUSH
11622: LD_INT 24
11624: PUSH
11625: LD_INT 1000
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: PPUSH
11641: CALL_OW 69
11645: PUSH
11646: LD_INT 6
11648: LESS
11649: IFFALSE 11592
// if Cornel then
11651: LD_EXP 44
11655: IFFALSE 11695
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
11657: LD_EXP 44
11661: PPUSH
11662: LD_STRING D5-Corn-1
11664: PPUSH
11665: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
11669: LD_EXP 44
11673: PPUSH
11674: LD_EXP 2
11678: PUSH
11679: LD_STRING Cornel
11681: STR
11682: PPUSH
11683: CALL_OW 38
// cornel_saved := true ;
11687: LD_ADDR_EXP 27
11691: PUSH
11692: LD_INT 1
11694: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
11695: LD_INT 4
11697: PPUSH
11698: LD_INT 8
11700: PPUSH
11701: CALL_OW 343
// Wait ( 0 0$01 ) ;
11705: LD_INT 35
11707: PPUSH
11708: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
11712: LD_INT 3
11714: PPUSH
11715: LD_EXP 44
11719: PPUSH
11720: CALL_OW 472
// send_attack_on_cornel := false ;
11724: LD_ADDR_EXP 32
11728: PUSH
11729: LD_INT 0
11731: ST_TO_ADDR
// end ;
11732: PPOPN 1
11734: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
11735: LD_INT 9
11737: PPUSH
11738: LD_INT 22
11740: PUSH
11741: LD_INT 1
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: PPUSH
11748: CALL_OW 70
11752: PUSH
11753: LD_EXP 33
11757: OR
11758: IFFALSE 11979
11760: GO 11762
11762: DISABLE
11763: LD_INT 0
11765: PPUSH
11766: PPUSH
// begin enable ;
11767: ENABLE
// if not jmm_on_west then
11768: LD_EXP 5
11772: NOT
11773: IFFALSE 11784
// begin YouLost ( 4 ) ;
11775: LD_STRING 4
11777: PPUSH
11778: CALL_OW 104
// exit ;
11782: GO 11979
// end ; if not game_end then
11784: LD_EXP 33
11788: NOT
11789: IFFALSE 11799
// game_end := true ;
11791: LD_ADDR_EXP 33
11795: PUSH
11796: LD_INT 1
11798: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11799: LD_ADDR_VAR 0 2
11803: PUSH
11804: LD_INT 9
11806: PPUSH
11807: LD_INT 22
11809: PUSH
11810: LD_INT 1
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PPUSH
11817: CALL_OW 70
11821: ST_TO_ADDR
// if not filter then
11822: LD_VAR 0 2
11826: NOT
11827: IFFALSE 11831
// exit ;
11829: GO 11979
// for i in filter do
11831: LD_ADDR_VAR 0 1
11835: PUSH
11836: LD_VAR 0 2
11840: PUSH
11841: FOR_IN
11842: IFFALSE 11977
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
11844: LD_VAR 0 1
11848: PPUSH
11849: CALL_OW 302
11853: PUSH
11854: LD_VAR 0 1
11858: PPUSH
11859: CALL_OW 247
11863: PUSH
11864: LD_INT 2
11866: EQUAL
11867: AND
11868: IFFALSE 11940
// begin if i = JMM and save_group < 4 then
11870: LD_VAR 0 1
11874: PUSH
11875: LD_EXP 37
11879: EQUAL
11880: PUSH
11881: LD_EXP 23
11885: PUSH
11886: LD_INT 4
11888: LESS
11889: AND
11890: IFFALSE 11894
// continue ;
11892: GO 11841
// if GetNation ( i ) = nation_american then
11894: LD_VAR 0 1
11898: PPUSH
11899: CALL_OW 248
11903: PUSH
11904: LD_INT 1
11906: EQUAL
11907: IFFALSE 11917
// veh_on_meta := true ;
11909: LD_ADDR_EXP 28
11913: PUSH
11914: LD_INT 1
11916: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
11917: LD_VAR 0 1
11921: PPUSH
11922: CALL_OW 311
11926: PPUSH
11927: CALL 11982 0 1
// RemoveUnit ( i ) ;
11931: LD_VAR 0 1
11935: PPUSH
11936: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
11940: LD_VAR 0 1
11944: PPUSH
11945: CALL_OW 302
11949: PUSH
11950: LD_VAR 0 1
11954: PPUSH
11955: CALL_OW 247
11959: PUSH
11960: LD_INT 1
11962: EQUAL
11963: AND
11964: IFFALSE 11975
// Save ( i ) ;
11966: LD_VAR 0 1
11970: PPUSH
11971: CALL 11982 0 1
// end ;
11975: GO 11841
11977: POP
11978: POP
// end ;
11979: PPOPN 2
11981: END
// export function Save ( i ) ; begin
11982: LD_INT 0
11984: PPUSH
// if i = JMM and save_group >= 4 then
11985: LD_VAR 0 1
11989: PUSH
11990: LD_EXP 37
11994: EQUAL
11995: PUSH
11996: LD_EXP 23
12000: PUSH
12001: LD_INT 4
12003: GREATEREQUAL
12004: AND
12005: IFFALSE 12141
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12007: LD_EXP 24
12011: PUSH
12012: LD_INT 22
12014: PUSH
12015: LD_INT 1
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: PUSH
12022: LD_INT 21
12024: PUSH
12025: LD_INT 1
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PPUSH
12036: CALL_OW 69
12040: PUSH
12041: LD_INT 1
12043: GREATER
12044: AND
12045: IFFALSE 12102
// begin show_query := false ;
12047: LD_ADDR_EXP 24
12051: PUSH
12052: LD_INT 0
12054: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12055: LD_STRING Q2
12057: PPUSH
12058: CALL_OW 97
12062: PUSH
12063: LD_INT 1
12065: DOUBLE
12066: EQUAL
12067: IFTRUE 12071
12069: GO 12082
12071: POP
// wait_for_them := true ; 2 :
12072: LD_ADDR_EXP 25
12076: PUSH
12077: LD_INT 1
12079: ST_TO_ADDR
12080: GO 12102
12082: LD_INT 2
12084: DOUBLE
12085: EQUAL
12086: IFTRUE 12090
12088: GO 12101
12090: POP
// wait_for_them := false ; end ;
12091: LD_ADDR_EXP 25
12095: PUSH
12096: LD_INT 0
12098: ST_TO_ADDR
12099: GO 12102
12101: POP
// end ; save_counter := save_counter + 1 ;
12102: LD_ADDR_EXP 36
12106: PUSH
12107: LD_EXP 36
12111: PUSH
12112: LD_INT 1
12114: PLUS
12115: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12116: LD_ADDR_EXP 23
12120: PUSH
12121: LD_EXP 23
12125: PUSH
12126: LD_EXP 37
12130: ADD
12131: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12132: LD_EXP 37
12136: PPUSH
12137: CALL_OW 64
// end ; if i = Lisa then
12141: LD_VAR 0 1
12145: PUSH
12146: LD_EXP 40
12150: EQUAL
12151: IFFALSE 12192
// begin save_counter := save_counter + 1 ;
12153: LD_ADDR_EXP 36
12157: PUSH
12158: LD_EXP 36
12162: PUSH
12163: LD_INT 1
12165: PLUS
12166: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12167: LD_ADDR_EXP 23
12171: PUSH
12172: LD_EXP 23
12176: PUSH
12177: LD_EXP 40
12181: ADD
12182: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12183: LD_EXP 40
12187: PPUSH
12188: CALL_OW 64
// end ; if i = Bobby then
12192: LD_VAR 0 1
12196: PUSH
12197: LD_EXP 38
12201: EQUAL
12202: IFFALSE 12243
// begin save_counter := save_counter + 1 ;
12204: LD_ADDR_EXP 36
12208: PUSH
12209: LD_EXP 36
12213: PUSH
12214: LD_INT 1
12216: PLUS
12217: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12218: LD_ADDR_EXP 23
12222: PUSH
12223: LD_EXP 23
12227: PUSH
12228: LD_EXP 38
12232: ADD
12233: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12234: LD_EXP 38
12238: PPUSH
12239: CALL_OW 64
// end ; if i = Cyrus then
12243: LD_VAR 0 1
12247: PUSH
12248: LD_EXP 39
12252: EQUAL
12253: IFFALSE 12294
// begin save_counter := save_counter + 1 ;
12255: LD_ADDR_EXP 36
12259: PUSH
12260: LD_EXP 36
12264: PUSH
12265: LD_INT 1
12267: PLUS
12268: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12269: LD_ADDR_EXP 23
12273: PUSH
12274: LD_EXP 23
12278: PUSH
12279: LD_EXP 39
12283: ADD
12284: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12285: LD_EXP 39
12289: PPUSH
12290: CALL_OW 64
// end ; if i = Khatam then
12294: LD_VAR 0 1
12298: PUSH
12299: LD_EXP 41
12303: EQUAL
12304: IFFALSE 12345
// begin save_counter := save_counter + 1 ;
12306: LD_ADDR_EXP 36
12310: PUSH
12311: LD_EXP 36
12315: PUSH
12316: LD_INT 1
12318: PLUS
12319: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12320: LD_ADDR_EXP 23
12324: PUSH
12325: LD_EXP 23
12329: PUSH
12330: LD_EXP 41
12334: ADD
12335: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12336: LD_EXP 41
12340: PPUSH
12341: CALL_OW 64
// end ; if i = Frank then
12345: LD_VAR 0 1
12349: PUSH
12350: LD_EXP 51
12354: EQUAL
12355: IFFALSE 12396
// begin save_counter := save_counter + 1 ;
12357: LD_ADDR_EXP 36
12361: PUSH
12362: LD_EXP 36
12366: PUSH
12367: LD_INT 1
12369: PLUS
12370: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12371: LD_ADDR_EXP 23
12375: PUSH
12376: LD_EXP 23
12380: PUSH
12381: LD_EXP 51
12385: ADD
12386: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12387: LD_EXP 51
12391: PPUSH
12392: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12396: LD_VAR 0 1
12400: PUSH
12401: LD_EXP 37
12405: NONEQUAL
12406: PUSH
12407: LD_VAR 0 1
12411: PPUSH
12412: CALL_OW 302
12416: AND
12417: PUSH
12418: LD_VAR 0 1
12422: PPUSH
12423: CALL_OW 247
12427: PUSH
12428: LD_INT 1
12430: EQUAL
12431: AND
12432: PUSH
12433: LD_VAR 0 1
12437: PUSH
12438: LD_EXP 23
12442: IN
12443: NOT
12444: AND
12445: IFFALSE 12486
// begin save_counter := save_counter + 1 ;
12447: LD_ADDR_EXP 36
12451: PUSH
12452: LD_EXP 36
12456: PUSH
12457: LD_INT 1
12459: PLUS
12460: ST_TO_ADDR
// save_others := save_others ^ i ;
12461: LD_ADDR_EXP 22
12465: PUSH
12466: LD_EXP 22
12470: PUSH
12471: LD_VAR 0 1
12475: ADD
12476: ST_TO_ADDR
// RemoveUnit ( i ) ;
12477: LD_VAR 0 1
12481: PPUSH
12482: CALL_OW 64
// end ; end ;
12486: LD_VAR 0 2
12490: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12491: LD_EXP 24
12495: NOT
12496: PUSH
12497: LD_EXP 25
12501: NOT
12502: AND
12503: PUSH
12504: LD_INT 22
12506: PUSH
12507: LD_INT 1
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 21
12516: PUSH
12517: LD_INT 1
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PPUSH
12528: CALL_OW 69
12532: PUSH
12533: LD_INT 0
12535: EQUAL
12536: OR
12537: IFFALSE 12546
12539: GO 12541
12541: DISABLE
// EndMission ;
12542: CALL 12547 0 0
12546: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12547: LD_INT 0
12549: PPUSH
12550: PPUSH
12551: PPUSH
12552: PPUSH
12553: PPUSH
// wait ( 0 0$01 ) ;
12554: LD_INT 35
12556: PPUSH
12557: CALL_OW 67
// if tick <= 12 12$00 then
12561: LD_OWVAR 1
12565: PUSH
12566: LD_INT 25200
12568: LESSEQUAL
12569: IFFALSE 12578
// SetAchievement ( ACH_ASPEED_3 ) ;
12571: LD_STRING ACH_ASPEED_3
12573: PPUSH
12574: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12578: LD_EXP 23
12582: PUSH
12583: LD_EXP 22
12587: ADD
12588: PPUSH
12589: LD_INT 25
12591: PUSH
12592: LD_INT 4
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PPUSH
12599: CALL_OW 72
12603: PUSH
12604: LD_INT 0
12606: EQUAL
12607: IFFALSE 12623
// begin wait ( 3 ) ;
12609: LD_INT 3
12611: PPUSH
12612: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
12616: LD_STRING ACH_NOSCI
12618: PPUSH
12619: CALL_OW 543
// end ; m1 := solar_builded ;
12623: LD_ADDR_VAR 0 3
12627: PUSH
12628: LD_EXP 14
12632: ST_TO_ADDR
// m2 := veh_on_meta ;
12633: LD_ADDR_VAR 0 4
12637: PUSH
12638: LD_EXP 28
12642: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
12643: LD_ADDR_VAR 0 5
12647: PUSH
12648: LD_EXP 34
12652: PUSH
12653: LD_INT 0
12655: EQUAL
12656: ST_TO_ADDR
// if solar_builded then
12657: LD_EXP 14
12661: IFFALSE 12675
// AddMedal ( Solar1 , 1 ) else
12663: LD_STRING Solar1
12665: PPUSH
12666: LD_INT 1
12668: PPUSH
12669: CALL_OW 101
12673: GO 12686
// AddMedal ( Solar1 , - 1 ) ;
12675: LD_STRING Solar1
12677: PPUSH
12678: LD_INT 1
12680: NEG
12681: PPUSH
12682: CALL_OW 101
// if veh_on_meta then
12686: LD_EXP 28
12690: IFFALSE 12704
// AddMedal ( Solar2 , 1 ) else
12692: LD_STRING Solar2
12694: PPUSH
12695: LD_INT 1
12697: PPUSH
12698: CALL_OW 101
12702: GO 12734
// if solar_builded then
12704: LD_EXP 14
12708: IFFALSE 12723
// AddMedal ( Solar2 , - 1 ) else
12710: LD_STRING Solar2
12712: PPUSH
12713: LD_INT 1
12715: NEG
12716: PPUSH
12717: CALL_OW 101
12721: GO 12734
// AddMedal ( Solar2 , - 2 ) ;
12723: LD_STRING Solar2
12725: PPUSH
12726: LD_INT 2
12728: NEG
12729: PPUSH
12730: CALL_OW 101
// if lose_counter = 0 then
12734: LD_EXP 34
12738: PUSH
12739: LD_INT 0
12741: EQUAL
12742: IFFALSE 12756
// AddMedal ( No , 1 ) else
12744: LD_STRING No
12746: PPUSH
12747: LD_INT 1
12749: PPUSH
12750: CALL_OW 101
12754: GO 12800
// if lose_counter > 0 and lose_counter < 4 then
12756: LD_EXP 34
12760: PUSH
12761: LD_INT 0
12763: GREATER
12764: PUSH
12765: LD_EXP 34
12769: PUSH
12770: LD_INT 4
12772: LESS
12773: AND
12774: IFFALSE 12789
// AddMedal ( No , - 1 ) else
12776: LD_STRING No
12778: PPUSH
12779: LD_INT 1
12781: NEG
12782: PPUSH
12783: CALL_OW 101
12787: GO 12800
// AddMedal ( UpTo4 , - 1 ) ;
12789: LD_STRING UpTo4
12791: PPUSH
12792: LD_INT 1
12794: NEG
12795: PPUSH
12796: CALL_OW 101
// GiveMedals ( MAIN ) ;
12800: LD_STRING MAIN
12802: PPUSH
12803: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
12807: LD_OWVAR 67
12811: PUSH
12812: LD_INT 3
12814: GREATEREQUAL
12815: PUSH
12816: LD_VAR 0 3
12820: AND
12821: PUSH
12822: LD_VAR 0 4
12826: AND
12827: PUSH
12828: LD_VAR 0 5
12832: AND
12833: IFFALSE 12845
// SetAchievementEX ( ACH_AMER , 3 ) ;
12835: LD_STRING ACH_AMER
12837: PPUSH
12838: LD_INT 3
12840: PPUSH
12841: CALL_OW 564
// if IsDead ( Pokryshkin ) then
12845: LD_EXP 52
12849: PPUSH
12850: CALL_OW 301
12854: IFFALSE 12910
// begin stop_talking := true ;
12856: LD_ADDR_OWVAR 56
12860: PUSH
12861: LD_INT 1
12863: ST_TO_ADDR
// for i in save_group union save_others do
12864: LD_ADDR_VAR 0 2
12868: PUSH
12869: LD_EXP 23
12873: PUSH
12874: LD_EXP 22
12878: UNION
12879: PUSH
12880: FOR_IN
12881: IFFALSE 12900
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
12883: LD_VAR 0 2
12887: PPUSH
12888: LD_INT 1
12890: PPUSH
12891: LD_INT 1500
12893: PPUSH
12894: CALL_OW 591
12898: GO 12880
12900: POP
12901: POP
// stop_talking := false ;
12902: LD_ADDR_OWVAR 56
12906: PUSH
12907: LD_INT 0
12909: ST_TO_ADDR
// end ; RewardPeople ( save_group ^ save_others ) ;
12910: LD_EXP 23
12914: PUSH
12915: LD_EXP 22
12919: ADD
12920: PPUSH
12921: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
12925: LD_EXP 37
12929: PPUSH
12930: LD_EXP 2
12934: PUSH
12935: LD_STRING JMM
12937: STR
12938: PPUSH
12939: CALL_OW 38
// if Bobby in save_group then
12943: LD_EXP 38
12947: PUSH
12948: LD_EXP 23
12952: IN
12953: IFFALSE 12973
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
12955: LD_EXP 38
12959: PPUSH
12960: LD_EXP 2
12964: PUSH
12965: LD_STRING Bobby
12967: STR
12968: PPUSH
12969: CALL_OW 38
// if Cyrus in save_group then
12973: LD_EXP 39
12977: PUSH
12978: LD_EXP 23
12982: IN
12983: IFFALSE 13003
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
12985: LD_EXP 39
12989: PPUSH
12990: LD_EXP 2
12994: PUSH
12995: LD_STRING Cyrus
12997: STR
12998: PPUSH
12999: CALL_OW 38
// if Lisa in save_group then
13003: LD_EXP 40
13007: PUSH
13008: LD_EXP 23
13012: IN
13013: IFFALSE 13033
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13015: LD_EXP 40
13019: PPUSH
13020: LD_EXP 2
13024: PUSH
13025: LD_STRING Lisa
13027: STR
13028: PPUSH
13029: CALL_OW 38
// if Frank in save_group then
13033: LD_EXP 51
13037: PUSH
13038: LD_EXP 23
13042: IN
13043: IFFALSE 13063
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13045: LD_EXP 51
13049: PPUSH
13050: LD_EXP 2
13054: PUSH
13055: LD_STRING Frank
13057: STR
13058: PPUSH
13059: CALL_OW 38
// if Khatam in save_group then
13063: LD_EXP 41
13067: PUSH
13068: LD_EXP 23
13072: IN
13073: IFFALSE 13093
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13075: LD_EXP 41
13079: PPUSH
13080: LD_EXP 2
13084: PUSH
13085: LD_STRING Khatam
13087: STR
13088: PPUSH
13089: CALL_OW 38
// if save_others then
13093: LD_EXP 22
13097: IFFALSE 13111
// SaveCharacters ( save_others , 03_others ) ;
13099: LD_EXP 22
13103: PPUSH
13104: LD_STRING 03_others
13106: PPUSH
13107: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13111: LD_EXP 45
13115: PUSH
13116: LD_EXP 45
13120: PPUSH
13121: CALL_OW 302
13125: AND
13126: PUSH
13127: LD_EXP 27
13131: AND
13132: IFFALSE 13144
// begin ResetFog ;
13134: CALL_OW 335
// DisplayEndingScene ;
13138: CALL 13166 0 0
// end else
13142: GO 13157
// DeleteCharacters ( mission_prefix & Cornel ) ;
13144: LD_EXP 2
13148: PUSH
13149: LD_STRING Cornel
13151: STR
13152: PPUSH
13153: CALL_OW 40
// YouWin ;
13157: CALL_OW 103
// end ;
13161: LD_VAR 0 1
13165: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13166: LD_INT 0
13168: PPUSH
13169: PPUSH
13170: PPUSH
13171: PPUSH
13172: PPUSH
13173: PPUSH
// InGameOn ;
13174: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13178: LD_INT 208
13180: PPUSH
13181: LD_INT 62
13183: PPUSH
13184: LD_INT 1
13186: PPUSH
13187: LD_INT 10
13189: NEG
13190: PPUSH
13191: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13195: LD_INT 208
13197: PPUSH
13198: LD_INT 62
13200: PPUSH
13201: LD_INT 1
13203: PPUSH
13204: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13208: LD_ADDR_VAR 0 3
13212: PUSH
13213: LD_INT 22
13215: PUSH
13216: LD_INT 3
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 2
13225: PUSH
13226: LD_INT 21
13228: PUSH
13229: LD_INT 2
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: LD_INT 21
13238: PUSH
13239: LD_INT 1
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PPUSH
13255: CALL_OW 69
13259: ST_TO_ADDR
// if filter then
13260: LD_VAR 0 3
13264: IFFALSE 13292
// for i in filter do
13266: LD_ADDR_VAR 0 2
13270: PUSH
13271: LD_VAR 0 3
13275: PUSH
13276: FOR_IN
13277: IFFALSE 13290
// RemoveUnit ( i ) ;
13279: LD_VAR 0 2
13283: PPUSH
13284: CALL_OW 64
13288: GO 13276
13290: POP
13291: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13292: LD_ADDR_VAR 0 3
13296: PUSH
13297: LD_INT 22
13299: PUSH
13300: LD_INT 4
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 21
13309: PUSH
13310: LD_INT 1
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PPUSH
13321: CALL_OW 69
13325: ST_TO_ADDR
// if filter then
13326: LD_VAR 0 3
13330: IFFALSE 13361
// for i in filter do
13332: LD_ADDR_VAR 0 2
13336: PUSH
13337: LD_VAR 0 3
13341: PUSH
13342: FOR_IN
13343: IFFALSE 13359
// SetLives ( i , 0 ) ;
13345: LD_VAR 0 2
13349: PPUSH
13350: LD_INT 0
13352: PPUSH
13353: CALL_OW 234
13357: GO 13342
13359: POP
13360: POP
// uc_side := 4 ;
13361: LD_ADDR_OWVAR 20
13365: PUSH
13366: LD_INT 4
13368: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13369: LD_ADDR_VAR 0 4
13373: PUSH
13374: LD_STRING Cornell
13376: PPUSH
13377: LD_INT 0
13379: PPUSH
13380: LD_STRING 
13382: PPUSH
13383: CALL 38595 0 3
13387: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13388: LD_VAR 0 4
13392: PPUSH
13393: LD_INT 208
13395: PPUSH
13396: LD_INT 62
13398: PPUSH
13399: LD_INT 0
13401: PPUSH
13402: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13406: LD_VAR 0 4
13410: PPUSH
13411: LD_INT 100
13413: PPUSH
13414: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13418: LD_INT 3
13420: PPUSH
13421: LD_VAR 0 4
13425: PPUSH
13426: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13430: LD_INT 4
13432: PPUSH
13433: LD_INT 3
13435: PPUSH
13436: LD_INT 1
13438: PPUSH
13439: LD_INT 1
13441: PPUSH
13442: CALL_OW 80
// uc_side := 3 ;
13446: LD_ADDR_OWVAR 20
13450: PUSH
13451: LD_INT 3
13453: ST_TO_ADDR
// uc_nation := 3 ;
13454: LD_ADDR_OWVAR 21
13458: PUSH
13459: LD_INT 3
13461: ST_TO_ADDR
// InitHc ;
13462: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13466: LD_ADDR_VAR 0 5
13470: PUSH
13471: LD_STRING Mikhail
13473: PPUSH
13474: LD_INT 0
13476: PPUSH
13477: LD_STRING 
13479: PPUSH
13480: CALL 38595 0 3
13484: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13485: LD_INT 1
13487: PPUSH
13488: LD_INT 1
13490: PPUSH
13491: LD_INT 0
13493: PPUSH
13494: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13498: LD_ADDR_VAR 0 6
13502: PUSH
13503: LD_VAR 0 6
13507: PUSH
13508: CALL_OW 44
13512: ADD
13513: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13514: LD_ADDR_VAR 0 6
13518: PUSH
13519: LD_VAR 0 6
13523: PUSH
13524: CALL_OW 44
13528: ADD
13529: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13530: LD_INT 2
13532: PPUSH
13533: LD_INT 4
13535: PPUSH
13536: LD_INT 0
13538: PPUSH
13539: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13543: LD_ADDR_VAR 0 6
13547: PUSH
13548: LD_VAR 0 6
13552: PUSH
13553: CALL_OW 44
13557: ADD
13558: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13559: LD_VAR 0 5
13563: PPUSH
13564: LD_INT 17
13566: PPUSH
13567: LD_INT 0
13569: PPUSH
13570: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13574: LD_VAR 0 5
13578: PPUSH
13579: LD_INT 210
13581: PPUSH
13582: LD_INT 63
13584: PPUSH
13585: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
13589: LD_VAR 0 5
13593: PPUSH
13594: LD_INT 208
13596: PPUSH
13597: LD_INT 62
13599: PPUSH
13600: CALL_OW 178
// for i in fake_russians do
13604: LD_ADDR_VAR 0 2
13608: PUSH
13609: LD_VAR 0 6
13613: PUSH
13614: FOR_IN
13615: IFFALSE 13693
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
13617: LD_VAR 0 2
13621: PPUSH
13622: LD_INT 17
13624: PPUSH
13625: LD_INT 0
13627: PPUSH
13628: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
13632: LD_VAR 0 2
13636: PPUSH
13637: LD_INT 215
13639: PPUSH
13640: LD_INT 67
13642: PPUSH
13643: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
13647: LD_VAR 0 2
13651: PPUSH
13652: LD_INT 208
13654: PPUSH
13655: LD_INT 62
13657: PPUSH
13658: CALL_OW 178
// if GetClass ( i ) = 4 then
13662: LD_VAR 0 2
13666: PPUSH
13667: CALL_OW 257
13671: PUSH
13672: LD_INT 4
13674: EQUAL
13675: IFFALSE 13691
// ComHeal ( i , fake_cornel ) ;
13677: LD_VAR 0 2
13681: PPUSH
13682: LD_VAR 0 4
13686: PPUSH
13687: CALL_OW 128
// end ;
13691: GO 13614
13693: POP
13694: POP
// Wait ( 0 0$01 ) ;
13695: LD_INT 35
13697: PPUSH
13698: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
13702: LD_INT 208
13704: PPUSH
13705: LD_INT 62
13707: PPUSH
13708: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13712: LD_INT 208
13714: PPUSH
13715: LD_INT 62
13717: PPUSH
13718: LD_INT 1
13720: PPUSH
13721: LD_INT 10
13723: NEG
13724: PPUSH
13725: CALL_OW 330
// Wait ( 0 0$15 ) ;
13729: LD_INT 525
13731: PPUSH
13732: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
13736: LD_INT 208
13738: PPUSH
13739: LD_INT 62
13741: PPUSH
13742: LD_INT 1
13744: PPUSH
13745: CALL_OW 331
// ResetFog ;
13749: CALL_OW 335
// InGameOff ;
13753: CALL_OW 9
// end ;
13757: LD_VAR 0 1
13761: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
13762: LD_INT 10
13764: PPUSH
13765: LD_INT 22
13767: PUSH
13768: LD_INT 1
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PPUSH
13775: CALL_OW 70
13779: PUSH
13780: LD_EXP 44
13784: PPUSH
13785: CALL_OW 302
13789: AND
13790: PUSH
13791: LD_INT 22
13793: PUSH
13794: LD_INT 1
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PPUSH
13801: CALL_OW 69
13805: PPUSH
13806: LD_EXP 44
13810: PPUSH
13811: CALL_OW 74
13815: PPUSH
13816: LD_EXP 44
13820: PPUSH
13821: CALL_OW 296
13825: PUSH
13826: LD_INT 30
13828: LESS
13829: OR
13830: IFFALSE 13881
13832: GO 13834
13834: DISABLE
// begin enable ;
13835: ENABLE
// powell_warn := powell_warn + 1 ;
13836: LD_ADDR_EXP 35
13840: PUSH
13841: LD_EXP 35
13845: PUSH
13846: LD_INT 1
13848: PLUS
13849: ST_TO_ADDR
// if powell_warn = 3 then
13850: LD_EXP 35
13854: PUSH
13855: LD_INT 3
13857: EQUAL
13858: IFFALSE 13869
// begin YouLost ( 5 ) ;
13860: LD_STRING 5
13862: PPUSH
13863: CALL_OW 104
// exit ;
13867: GO 13881
// end ; SayRadio ( Powell , DWarn-Pow-1 ) ;
13869: LD_EXP 46
13873: PPUSH
13874: LD_STRING DWarn-Pow-1
13876: PPUSH
13877: CALL_OW 94
// end ; end_of_file
13881: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
13882: LD_EXP 8
13886: IFFALSE 15723
13888: GO 13890
13890: DISABLE
13891: LD_INT 0
13893: PPUSH
13894: PPUSH
13895: PPUSH
13896: PPUSH
13897: PPUSH
13898: PPUSH
13899: PPUSH
13900: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
13901: LD_EXP 44
13905: PUSH
13906: LD_EXP 45
13910: ADD
13911: PUSH
13912: LD_EXP 6
13916: ADD
13917: PPUSH
13918: LD_INT 250
13920: PPUSH
13921: LD_INT 120
13923: PPUSH
13924: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
13928: LD_ADDR_VAR 0 2
13932: PUSH
13933: LD_EXP 6
13937: PPUSH
13938: LD_INT 25
13940: PUSH
13941: LD_INT 2
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PPUSH
13948: CALL_OW 72
13952: PUSH
13953: LD_EXP 45
13957: DIFF
13958: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
13959: LD_ADDR_VAR 0 3
13963: PUSH
13964: LD_EXP 6
13968: PPUSH
13969: LD_INT 21
13971: PUSH
13972: LD_INT 1
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PPUSH
13979: CALL_OW 72
13983: PUSH
13984: LD_VAR 0 2
13988: DIFF
13989: ST_TO_ADDR
// if not has_eng then
13990: LD_VAR 0 2
13994: NOT
13995: IFFALSE 14078
// begin uc_side := 4 ;
13997: LD_ADDR_OWVAR 20
14001: PUSH
14002: LD_INT 4
14004: ST_TO_ADDR
// uc_nation := 1 ;
14005: LD_ADDR_OWVAR 21
14009: PUSH
14010: LD_INT 1
14012: ST_TO_ADDR
// bc_type := b_depot ;
14013: LD_ADDR_OWVAR 42
14017: PUSH
14018: LD_INT 0
14020: ST_TO_ADDR
// bc_level := 2 ;
14021: LD_ADDR_OWVAR 43
14025: PUSH
14026: LD_INT 2
14028: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14029: LD_ADDR_VAR 0 4
14033: PUSH
14034: LD_INT 264
14036: PPUSH
14037: LD_INT 120
14039: PPUSH
14040: LD_INT 4
14042: PPUSH
14043: CALL_OW 47
14047: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14048: LD_INT 264
14050: PPUSH
14051: LD_INT 120
14053: PPUSH
14054: LD_INT 4
14056: PPUSH
14057: LD_INT 10
14059: NEG
14060: PPUSH
14061: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14065: LD_INT 264
14067: PPUSH
14068: LD_INT 120
14070: PPUSH
14071: LD_INT 4
14073: PPUSH
14074: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14078: LD_INT 35
14080: PPUSH
14081: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14085: LD_EXP 44
14089: PPUSH
14090: LD_INT 10
14092: PPUSH
14093: CALL_OW 308
14097: PUSH
14098: LD_EXP 44
14102: PPUSH
14103: CALL_OW 310
14107: PPUSH
14108: LD_INT 10
14110: PPUSH
14111: CALL_OW 308
14115: OR
14116: IFFALSE 14078
// if has_eng and not dep then
14118: LD_VAR 0 2
14122: PUSH
14123: LD_VAR 0 4
14127: NOT
14128: AND
14129: IFFALSE 14279
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14131: LD_VAR 0 2
14135: PPUSH
14136: LD_INT 0
14138: PPUSH
14139: LD_INT 264
14141: PPUSH
14142: LD_INT 120
14144: PPUSH
14145: LD_INT 4
14147: PPUSH
14148: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14152: LD_INT 35
14154: PPUSH
14155: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14159: LD_INT 22
14161: PUSH
14162: LD_INT 4
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 30
14171: PUSH
14172: LD_INT 0
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PPUSH
14183: CALL_OW 69
14187: IFFALSE 14152
// ComMoveXY ( filter , 264 , 120 ) ;
14189: LD_VAR 0 3
14193: PPUSH
14194: LD_INT 264
14196: PPUSH
14197: LD_INT 120
14199: PPUSH
14200: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14204: LD_INT 35
14206: PPUSH
14207: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14211: LD_INT 22
14213: PUSH
14214: LD_INT 4
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 30
14223: PUSH
14224: LD_INT 0
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 3
14233: PUSH
14234: LD_INT 57
14236: PUSH
14237: EMPTY
14238: LIST
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: LIST
14248: PPUSH
14249: CALL_OW 69
14253: IFFALSE 14204
// ComMoveXY ( filter , 247 , 113 ) ;
14255: LD_VAR 0 3
14259: PPUSH
14260: LD_INT 247
14262: PPUSH
14263: LD_INT 113
14265: PPUSH
14266: CALL_OW 111
// Wait ( 0 0$2 ) ;
14270: LD_INT 70
14272: PPUSH
14273: CALL_OW 67
// end else
14277: GO 14291
// begin SetSide ( dep , 4 ) ;
14279: LD_VAR 0 4
14283: PPUSH
14284: LD_INT 4
14286: PPUSH
14287: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14291: LD_ADDR_VAR 0 4
14295: PUSH
14296: LD_INT 22
14298: PUSH
14299: LD_INT 4
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: LD_INT 30
14308: PUSH
14309: LD_INT 0
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PPUSH
14320: CALL_OW 69
14324: PUSH
14325: LD_INT 1
14327: ARRAY
14328: ST_TO_ADDR
// if not has_eng then
14329: LD_VAR 0 2
14333: NOT
14334: IFFALSE 14421
// for i = 1 to 2 do
14336: LD_ADDR_VAR 0 1
14340: PUSH
14341: DOUBLE
14342: LD_INT 1
14344: DEC
14345: ST_TO_ADDR
14346: LD_INT 2
14348: PUSH
14349: FOR_TO
14350: IFFALSE 14419
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14352: LD_VAR 0 3
14356: PUSH
14357: LD_INT 1
14359: ARRAY
14360: PPUSH
14361: LD_VAR 0 4
14365: PPUSH
14366: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14370: LD_VAR 0 3
14374: PUSH
14375: LD_INT 1
14377: ARRAY
14378: PPUSH
14379: LD_INT 2
14381: PPUSH
14382: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14386: LD_VAR 0 3
14390: PUSH
14391: LD_INT 1
14393: ARRAY
14394: PPUSH
14395: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14399: LD_ADDR_VAR 0 3
14403: PUSH
14404: LD_VAR 0 3
14408: PPUSH
14409: LD_INT 1
14411: PPUSH
14412: CALL_OW 3
14416: ST_TO_ADDR
// end ;
14417: GO 14349
14419: POP
14420: POP
// if IsInUnit ( Cornel ) then
14421: LD_EXP 44
14425: PPUSH
14426: CALL_OW 310
14430: IFFALSE 14508
// begin cargo := IsInUnit ( Cornel ) ;
14432: LD_ADDR_VAR 0 7
14436: PUSH
14437: LD_EXP 44
14441: PPUSH
14442: CALL_OW 310
14446: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14447: LD_VAR 0 7
14451: PPUSH
14452: LD_INT 1
14454: PPUSH
14455: CALL_OW 289
14459: IFFALSE 14470
// ComUnload ( cargo ) ;
14461: LD_VAR 0 7
14465: PPUSH
14466: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14470: LD_EXP 44
14474: PPUSH
14475: LD_INT 235
14477: PPUSH
14478: LD_INT 122
14480: PPUSH
14481: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14485: LD_EXP 44
14489: PPUSH
14490: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14494: LD_EXP 44
14498: PPUSH
14499: LD_VAR 0 4
14503: PPUSH
14504: CALL_OW 180
// end ; if Bierezov then
14508: LD_EXP 45
14512: IFFALSE 14560
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14514: LD_EXP 45
14518: PPUSH
14519: LD_INT 260
14521: PPUSH
14522: LD_INT 120
14524: PPUSH
14525: CALL_OW 111
// if dep then
14529: LD_VAR 0 4
14533: IFFALSE 14551
// AddComEnterUnit ( Bierezov , dep ) else
14535: LD_EXP 45
14539: PPUSH
14540: LD_VAR 0 4
14544: PPUSH
14545: CALL_OW 180
14549: GO 14560
// AddComHold ( Bierezov ) ;
14551: LD_EXP 45
14555: PPUSH
14556: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14560: LD_INT 525
14562: PPUSH
14563: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14567: LD_ADDR_VAR 0 2
14571: PUSH
14572: LD_INT 22
14574: PUSH
14575: LD_INT 4
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PUSH
14582: LD_INT 25
14584: PUSH
14585: LD_INT 2
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PPUSH
14596: CALL_OW 69
14600: PUSH
14601: LD_EXP 45
14605: DIFF
14606: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14607: LD_INT 35
14609: PPUSH
14610: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
14614: LD_ADDR_VAR 0 6
14618: PUSH
14619: LD_INT 10
14621: PPUSH
14622: CALL_OW 435
14626: ST_TO_ADDR
// if crates then
14627: LD_VAR 0 6
14631: IFFALSE 14660
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
14633: LD_VAR 0 2
14637: PPUSH
14638: LD_VAR 0 6
14642: PUSH
14643: LD_INT 1
14645: ARRAY
14646: PPUSH
14647: LD_VAR 0 6
14651: PUSH
14652: LD_INT 2
14654: ARRAY
14655: PPUSH
14656: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
14660: LD_VAR 0 4
14664: PPUSH
14665: CALL_OW 274
14669: PPUSH
14670: LD_INT 1
14672: PPUSH
14673: CALL_OW 275
14677: PUSH
14678: LD_INT 40
14680: GREATEREQUAL
14681: IFFALSE 14607
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
14683: LD_ADDR_VAR 0 5
14687: PUSH
14688: LD_INT 4
14690: PUSH
14691: LD_INT 256
14693: PUSH
14694: LD_INT 111
14696: PUSH
14697: LD_INT 2
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 31
14708: PUSH
14709: LD_INT 243
14711: PUSH
14712: LD_INT 112
14714: PUSH
14715: LD_INT 2
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: PUSH
14724: LD_INT 31
14726: PUSH
14727: LD_INT 254
14729: PUSH
14730: LD_INT 114
14732: PUSH
14733: LD_INT 2
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: LIST
14746: ST_TO_ADDR
// for i in blist do
14747: LD_ADDR_VAR 0 1
14751: PUSH
14752: LD_VAR 0 5
14756: PUSH
14757: FOR_IN
14758: IFFALSE 14807
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
14760: LD_VAR 0 2
14764: PPUSH
14765: LD_VAR 0 1
14769: PUSH
14770: LD_INT 1
14772: ARRAY
14773: PPUSH
14774: LD_VAR 0 1
14778: PUSH
14779: LD_INT 2
14781: ARRAY
14782: PPUSH
14783: LD_VAR 0 1
14787: PUSH
14788: LD_INT 3
14790: ARRAY
14791: PPUSH
14792: LD_VAR 0 1
14796: PUSH
14797: LD_INT 4
14799: ARRAY
14800: PPUSH
14801: CALL_OW 205
14805: GO 14757
14807: POP
14808: POP
// repeat wait ( 0 0$01 ) ;
14809: LD_INT 35
14811: PPUSH
14812: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
14816: LD_INT 22
14818: PUSH
14819: LD_INT 4
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: LD_INT 30
14828: PUSH
14829: LD_INT 4
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: LD_INT 3
14838: PUSH
14839: LD_INT 57
14841: PUSH
14842: EMPTY
14843: LIST
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: LIST
14853: PPUSH
14854: CALL_OW 69
14858: IFFALSE 14809
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14860: LD_VAR 0 3
14864: PPUSH
14865: LD_INT 22
14867: PUSH
14868: LD_INT 4
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 30
14877: PUSH
14878: LD_INT 4
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PPUSH
14889: CALL_OW 69
14893: PUSH
14894: LD_INT 1
14896: ARRAY
14897: PPUSH
14898: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
14902: LD_VAR 0 3
14906: PPUSH
14907: LD_INT 1
14909: PPUSH
14910: CALL_OW 183
// if has_eng > 1 then
14914: LD_VAR 0 2
14918: PUSH
14919: LD_INT 1
14921: GREATER
14922: IFFALSE 15064
// for i = has_eng downto 2 do
14924: LD_ADDR_VAR 0 1
14928: PUSH
14929: DOUBLE
14930: LD_VAR 0 2
14934: INC
14935: ST_TO_ADDR
14936: LD_INT 2
14938: PUSH
14939: FOR_DOWNTO
14940: IFFALSE 15062
// begin if IsInUnit ( has_eng [ i ] ) then
14942: LD_VAR 0 2
14946: PUSH
14947: LD_VAR 0 1
14951: ARRAY
14952: PPUSH
14953: CALL_OW 310
14957: IFFALSE 14974
// ComExitBuilding ( has_eng [ i ] ) ;
14959: LD_VAR 0 2
14963: PUSH
14964: LD_VAR 0 1
14968: ARRAY
14969: PPUSH
14970: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14974: LD_VAR 0 2
14978: PUSH
14979: LD_VAR 0 1
14983: ARRAY
14984: PPUSH
14985: LD_INT 22
14987: PUSH
14988: LD_INT 4
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 30
14997: PUSH
14998: LD_INT 4
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PPUSH
15009: CALL_OW 69
15013: PUSH
15014: LD_INT 1
15016: ARRAY
15017: PPUSH
15018: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15022: LD_VAR 0 2
15026: PUSH
15027: LD_VAR 0 1
15031: ARRAY
15032: PPUSH
15033: LD_INT 1
15035: PPUSH
15036: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15040: LD_ADDR_VAR 0 2
15044: PUSH
15045: LD_VAR 0 2
15049: PPUSH
15050: LD_VAR 0 1
15054: PPUSH
15055: CALL_OW 3
15059: ST_TO_ADDR
// end ;
15060: GO 14939
15062: POP
15063: POP
// repeat wait ( 0 0$01 ) ;
15064: LD_INT 35
15066: PPUSH
15067: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15071: LD_INT 22
15073: PUSH
15074: LD_INT 4
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 30
15083: PUSH
15084: LD_INT 31
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 3
15093: PUSH
15094: LD_INT 57
15096: PUSH
15097: EMPTY
15098: LIST
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: LIST
15108: PPUSH
15109: CALL_OW 69
15113: PUSH
15114: LD_INT 1
15116: GREATER
15117: IFFALSE 15064
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15119: LD_ADDR_VAR 0 8
15123: PUSH
15124: LD_EXP 6
15128: PPUSH
15129: LD_INT 25
15131: PUSH
15132: LD_INT 1
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PPUSH
15139: CALL_OW 72
15143: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15144: LD_ADDR_VAR 0 1
15148: PUSH
15149: DOUBLE
15150: LD_INT 1
15152: DEC
15153: ST_TO_ADDR
15154: LD_INT 22
15156: PUSH
15157: LD_INT 4
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 30
15166: PUSH
15167: LD_INT 31
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 3
15176: PUSH
15177: LD_INT 57
15179: PUSH
15180: EMPTY
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: PPUSH
15192: CALL_OW 69
15196: PUSH
15197: FOR_TO
15198: IFFALSE 15282
// begin if not sol [ i ] then
15200: LD_VAR 0 8
15204: PUSH
15205: LD_VAR 0 1
15209: ARRAY
15210: NOT
15211: IFFALSE 15215
// break ;
15213: GO 15282
// ComExitBuilding ( sol [ i ] ) ;
15215: LD_VAR 0 8
15219: PUSH
15220: LD_VAR 0 1
15224: ARRAY
15225: PPUSH
15226: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15230: LD_VAR 0 8
15234: PUSH
15235: LD_VAR 0 1
15239: ARRAY
15240: PPUSH
15241: LD_INT 22
15243: PUSH
15244: LD_INT 4
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: LD_INT 30
15253: PUSH
15254: LD_INT 31
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PPUSH
15265: CALL_OW 69
15269: PUSH
15270: LD_VAR 0 1
15274: ARRAY
15275: PPUSH
15276: CALL_OW 180
// end ;
15280: GO 15197
15282: POP
15283: POP
// if sol > 3 then
15284: LD_VAR 0 8
15288: PUSH
15289: LD_INT 3
15291: GREATER
15292: IFFALSE 15409
// begin ComExitBuilding ( sol [ 3 ] ) ;
15294: LD_VAR 0 8
15298: PUSH
15299: LD_INT 3
15301: ARRAY
15302: PPUSH
15303: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15307: LD_VAR 0 8
15311: PUSH
15312: LD_INT 3
15314: ARRAY
15315: PPUSH
15316: LD_INT 246
15318: PPUSH
15319: LD_INT 94
15321: PPUSH
15322: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15326: LD_VAR 0 8
15330: PUSH
15331: LD_INT 3
15333: ARRAY
15334: PPUSH
15335: LD_INT 175
15337: PPUSH
15338: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15342: LD_VAR 0 8
15346: PUSH
15347: LD_INT 3
15349: ARRAY
15350: PPUSH
15351: LD_INT 224
15353: PPUSH
15354: LD_INT 90
15356: PPUSH
15357: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15361: LD_VAR 0 8
15365: PUSH
15366: LD_INT 3
15368: ARRAY
15369: PPUSH
15370: LD_INT 245
15372: PPUSH
15373: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15377: LD_VAR 0 8
15381: PUSH
15382: LD_INT 3
15384: ARRAY
15385: PPUSH
15386: LD_INT 223
15388: PPUSH
15389: LD_INT 110
15391: PPUSH
15392: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15396: LD_VAR 0 8
15400: PUSH
15401: LD_INT 3
15403: ARRAY
15404: PPUSH
15405: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15409: LD_VAR 0 2
15413: PPUSH
15414: LD_VAR 0 4
15418: PPUSH
15419: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15423: LD_INT 22
15425: PUSH
15426: LD_INT 4
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 30
15435: PUSH
15436: LD_INT 4
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PPUSH
15447: CALL_OW 69
15451: PUSH
15452: LD_INT 1
15454: ARRAY
15455: PPUSH
15456: CALL_OW 313
15460: PUSH
15461: LD_INT 6
15463: LESS
15464: IFFALSE 15528
// begin if IsInUnit ( Cornel ) then
15466: LD_EXP 44
15470: PPUSH
15471: CALL_OW 310
15475: IFFALSE 15486
// ComExitBuilding ( Cornel ) ;
15477: LD_EXP 44
15481: PPUSH
15482: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15486: LD_EXP 44
15490: PPUSH
15491: LD_INT 22
15493: PUSH
15494: LD_INT 4
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 30
15503: PUSH
15504: LD_INT 4
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PPUSH
15515: CALL_OW 69
15519: PUSH
15520: LD_INT 1
15522: ARRAY
15523: PPUSH
15524: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15528: LD_INT 35
15530: PPUSH
15531: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15535: LD_ADDR_VAR 0 3
15539: PUSH
15540: LD_INT 22
15542: PUSH
15543: LD_INT 4
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PUSH
15550: LD_INT 21
15552: PUSH
15553: LD_INT 3
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PUSH
15560: LD_INT 3
15562: PUSH
15563: LD_INT 24
15565: PUSH
15566: LD_INT 1000
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: LIST
15581: PPUSH
15582: CALL_OW 69
15586: ST_TO_ADDR
// if filter and has_eng then
15587: LD_VAR 0 3
15591: PUSH
15592: LD_VAR 0 2
15596: AND
15597: IFFALSE 15663
// begin for i in has_eng do
15599: LD_ADDR_VAR 0 1
15603: PUSH
15604: LD_VAR 0 2
15608: PUSH
15609: FOR_IN
15610: IFFALSE 15659
// begin if IsInUnit ( i ) then
15612: LD_VAR 0 1
15616: PPUSH
15617: CALL_OW 310
15621: IFFALSE 15632
// ComExitBuilding ( i ) ;
15623: LD_VAR 0 1
15627: PPUSH
15628: CALL_OW 122
// Wait ( 3 ) ;
15632: LD_INT 3
15634: PPUSH
15635: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
15639: LD_VAR 0 1
15643: PPUSH
15644: LD_VAR 0 3
15648: PUSH
15649: LD_INT 1
15651: ARRAY
15652: PPUSH
15653: CALL_OW 130
// end ;
15657: GO 15609
15659: POP
15660: POP
// end else
15661: GO 15717
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
15663: LD_VAR 0 2
15667: PUSH
15668: LD_VAR 0 2
15672: PPUSH
15673: LD_INT 56
15675: PUSH
15676: EMPTY
15677: LIST
15678: PPUSH
15679: CALL_OW 72
15683: AND
15684: IFFALSE 15717
// for i in has_eng do
15686: LD_ADDR_VAR 0 1
15690: PUSH
15691: LD_VAR 0 2
15695: PUSH
15696: FOR_IN
15697: IFFALSE 15715
// ComEnterUnit ( i , dep ) ;
15699: LD_VAR 0 1
15703: PPUSH
15704: LD_VAR 0 4
15708: PPUSH
15709: CALL_OW 120
15713: GO 15696
15715: POP
15716: POP
// until cornel_prepared ;
15717: LD_EXP 11
15721: IFFALSE 15528
// end ;
15723: PPOPN 8
15725: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
15726: LD_EXP 11
15730: IFFALSE 16129
15732: GO 15734
15734: DISABLE
15735: LD_INT 0
15737: PPUSH
15738: PPUSH
15739: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
15740: LD_ADDR_VAR 0 2
15744: PUSH
15745: LD_INT 22
15747: PUSH
15748: LD_INT 4
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: LD_INT 30
15757: PUSH
15758: LD_INT 4
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PPUSH
15769: CALL_OW 69
15773: PUSH
15774: LD_INT 1
15776: ARRAY
15777: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
15778: LD_EXP 6
15782: PPUSH
15783: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
15787: LD_EXP 45
15791: PUSH
15792: LD_EXP 45
15796: PPUSH
15797: CALL_OW 310
15801: AND
15802: IFFALSE 15813
// ComExitBuilding ( Bierezov ) ;
15804: LD_EXP 45
15808: PPUSH
15809: CALL_OW 122
// Wait ( 0 0$03 ) ;
15813: LD_INT 105
15815: PPUSH
15816: CALL_OW 67
// for i in cornel_units do
15820: LD_ADDR_VAR 0 1
15824: PUSH
15825: LD_EXP 6
15829: PUSH
15830: FOR_IN
15831: IFFALSE 15907
// begin if GetClass ( i ) in [ 2 , 3 ] then
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 257
15842: PUSH
15843: LD_INT 2
15845: PUSH
15846: LD_INT 3
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: IN
15853: IFFALSE 15890
// begin ComEnterUnit ( i , arm ) ;
15855: LD_VAR 0 1
15859: PPUSH
15860: LD_VAR 0 2
15864: PPUSH
15865: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
15869: LD_VAR 0 1
15873: PPUSH
15874: LD_INT 1
15876: PPUSH
15877: CALL_OW 183
// AddComExitBuilding ( i ) ;
15881: LD_VAR 0 1
15885: PPUSH
15886: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
15890: LD_VAR 0 1
15894: PPUSH
15895: LD_INT 257
15897: PPUSH
15898: LD_INT 121
15900: PPUSH
15901: CALL_OW 171
// end ;
15905: GO 15830
15907: POP
15908: POP
// Wait ( 1 1$00 ) ;
15909: LD_INT 2100
15911: PPUSH
15912: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
15916: LD_ADDR_VAR 0 3
15920: PUSH
15921: LD_EXP 44
15925: PUSH
15926: LD_EXP 45
15930: ADD
15931: PUSH
15932: LD_EXP 6
15936: ADD
15937: PUSH
15938: LD_EXP 6
15942: PPUSH
15943: LD_INT 21
15945: PUSH
15946: LD_INT 2
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PPUSH
15953: CALL_OW 72
15957: DIFF
15958: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
15959: LD_VAR 0 3
15963: PPUSH
15964: LD_INT 248
15966: PPUSH
15967: LD_INT 85
15969: PPUSH
15970: CALL_OW 111
// AddComHold ( filter ) ;
15974: LD_VAR 0 3
15978: PPUSH
15979: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
15983: LD_INT 35
15985: PPUSH
15986: CALL_OW 67
// until cornel_attack ;
15990: LD_EXP 9
15994: IFFALSE 15983
// ComAgressiveMove ( filter , 209 , 63 ) ;
15996: LD_VAR 0 3
16000: PPUSH
16001: LD_INT 209
16003: PPUSH
16004: LD_INT 63
16006: PPUSH
16007: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16011: LD_EXP 44
16015: PPUSH
16016: LD_INT 208
16018: PPUSH
16019: LD_INT 62
16021: PPUSH
16022: CALL_OW 114
// AddComHold ( Cornel ) ;
16026: LD_EXP 44
16030: PPUSH
16031: CALL_OW 200
// if Bierezov then
16035: LD_EXP 45
16039: IFFALSE 16129
// begin filter := filter diff Bierezov ;
16041: LD_ADDR_VAR 0 3
16045: PUSH
16046: LD_VAR 0 3
16050: PUSH
16051: LD_EXP 45
16055: DIFF
16056: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16057: LD_EXP 45
16061: PPUSH
16062: LD_INT 6
16064: PPUSH
16065: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16069: LD_EXP 45
16073: PPUSH
16074: LD_INT 235
16076: PPUSH
16077: LD_INT 60
16079: PPUSH
16080: CALL_OW 111
// AddComHold ( Bierezov ) ;
16084: LD_EXP 45
16088: PPUSH
16089: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16093: LD_EXP 45
16097: PPUSH
16098: LD_INT 350
16100: PPUSH
16101: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16105: LD_EXP 45
16109: PPUSH
16110: LD_INT 198
16112: PPUSH
16113: LD_INT 28
16115: PPUSH
16116: CALL_OW 171
// AddComHold ( Bierezov ) ;
16120: LD_EXP 45
16124: PPUSH
16125: CALL_OW 200
// end ; end ; end_of_file
16129: PPOPN 3
16131: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16132: LD_EXP 53
16136: PUSH
16137: LD_EXP 31
16141: NOT
16142: AND
16143: PUSH
16144: LD_EXP 32
16148: NOT
16149: AND
16150: IFFALSE 16600
16152: GO 16154
16154: DISABLE
16155: LD_INT 0
16157: PPUSH
16158: PPUSH
16159: PPUSH
16160: PPUSH
// begin enable ;
16161: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16162: LD_ADDR_VAR 0 4
16166: PUSH
16167: LD_INT 81
16169: PUSH
16170: LD_INT 3
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PPUSH
16177: CALL_OW 69
16181: ST_TO_ADDR
// for i = 1 to ru_patrol do
16182: LD_ADDR_VAR 0 2
16186: PUSH
16187: DOUBLE
16188: LD_INT 1
16190: DEC
16191: ST_TO_ADDR
16192: LD_EXP 53
16196: PUSH
16197: FOR_TO
16198: IFFALSE 16598
// begin un := ru_patrol [ i ] ;
16200: LD_ADDR_VAR 0 1
16204: PUSH
16205: LD_EXP 53
16209: PUSH
16210: LD_VAR 0 2
16214: ARRAY
16215: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16216: LD_VAR 0 1
16220: PPUSH
16221: LD_INT 13
16223: PPUSH
16224: CALL_OW 308
16228: IFFALSE 16333
// begin if not ru_alert then
16230: LD_EXP 60
16234: NOT
16235: IFFALSE 16245
// ru_alert := true ;
16237: LD_ADDR_EXP 60
16241: PUSH
16242: LD_INT 1
16244: ST_TO_ADDR
// if not See ( 1 , un ) then
16245: LD_INT 1
16247: PPUSH
16248: LD_VAR 0 1
16252: PPUSH
16253: CALL_OW 292
16257: NOT
16258: IFFALSE 16272
// SetLives ( un , 1000 ) ;
16260: LD_VAR 0 1
16264: PPUSH
16265: LD_INT 1000
16267: PPUSH
16268: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16272: LD_ADDR_EXP 53
16276: PUSH
16277: LD_EXP 53
16281: PUSH
16282: LD_VAR 0 1
16286: DIFF
16287: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16288: LD_VAR 0 1
16292: PPUSH
16293: LD_INT 22
16295: PUSH
16296: LD_INT 3
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: LD_INT 30
16305: PUSH
16306: LD_INT 4
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PPUSH
16317: CALL_OW 69
16321: PPUSH
16322: CALL 1007 0 1
16326: PPUSH
16327: CALL_OW 120
// continue ;
16331: GO 16197
// end ; if IsOk ( un ) and not HasTask ( un ) then
16333: LD_VAR 0 1
16337: PPUSH
16338: CALL_OW 302
16342: PUSH
16343: LD_VAR 0 1
16347: PPUSH
16348: CALL_OW 314
16352: NOT
16353: AND
16354: IFFALSE 16447
// begin for j = 1 to ru_firepoints_south [ i ] do
16356: LD_ADDR_VAR 0 3
16360: PUSH
16361: DOUBLE
16362: LD_INT 1
16364: DEC
16365: ST_TO_ADDR
16366: LD_EXP 59
16370: PUSH
16371: LD_VAR 0 2
16375: ARRAY
16376: PUSH
16377: FOR_TO
16378: IFFALSE 16445
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16380: LD_VAR 0 1
16384: PPUSH
16385: LD_EXP 59
16389: PUSH
16390: LD_VAR 0 2
16394: ARRAY
16395: PUSH
16396: LD_VAR 0 3
16400: ARRAY
16401: PUSH
16402: LD_INT 1
16404: ARRAY
16405: PPUSH
16406: LD_EXP 59
16410: PUSH
16411: LD_VAR 0 2
16415: ARRAY
16416: PUSH
16417: LD_VAR 0 3
16421: ARRAY
16422: PUSH
16423: LD_INT 2
16425: ARRAY
16426: PPUSH
16427: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16431: LD_VAR 0 1
16435: PPUSH
16436: LD_INT 70
16438: PPUSH
16439: CALL_OW 202
// end ;
16443: GO 16377
16445: POP
16446: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16447: LD_VAR 0 1
16451: PPUSH
16452: CALL_OW 256
16456: PUSH
16457: LD_INT 700
16459: LESS
16460: PUSH
16461: LD_VAR 0 1
16465: PPUSH
16466: LD_INT 13
16468: PPUSH
16469: CALL_OW 308
16473: NOT
16474: AND
16475: IFFALSE 16527
// begin ComMoveToArea ( un , retreatArea ) ;
16477: LD_VAR 0 1
16481: PPUSH
16482: LD_INT 13
16484: PPUSH
16485: CALL_OW 113
// if not ru_alert_xy then
16489: LD_EXP 61
16493: NOT
16494: IFFALSE 16525
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16496: LD_ADDR_EXP 61
16500: PUSH
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 250
16510: PUSH
16511: LD_VAR 0 1
16515: PPUSH
16516: CALL_OW 251
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: ST_TO_ADDR
// end else
16525: GO 16596
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16527: LD_VAR 0 1
16531: PPUSH
16532: LD_VAR 0 4
16536: PPUSH
16537: LD_VAR 0 1
16541: PPUSH
16542: CALL_OW 74
16546: PPUSH
16547: CALL_OW 296
16551: PUSH
16552: LD_INT 9
16554: LESS
16555: PUSH
16556: LD_VAR 0 1
16560: PPUSH
16561: CALL_OW 256
16565: PUSH
16566: LD_INT 500
16568: GREATER
16569: AND
16570: IFFALSE 16596
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
16572: LD_VAR 0 1
16576: PPUSH
16577: LD_VAR 0 4
16581: PPUSH
16582: LD_VAR 0 1
16586: PPUSH
16587: CALL_OW 74
16591: PPUSH
16592: CALL_OW 115
// end ;
16596: GO 16197
16598: POP
16599: POP
// end ;
16600: PPOPN 4
16602: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
16603: LD_EXP 60
16607: PUSH
16608: LD_EXP 61
16612: AND
16613: PUSH
16614: LD_EXP 31
16618: NOT
16619: AND
16620: PUSH
16621: LD_EXP 32
16625: NOT
16626: AND
16627: IFFALSE 16837
16629: GO 16631
16631: DISABLE
16632: LD_INT 0
16634: PPUSH
16635: PPUSH
// begin enable ;
16636: ENABLE
// if not ru_vehicles then
16637: LD_EXP 56
16641: NOT
16642: IFFALSE 16646
// exit ;
16644: GO 16837
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16646: LD_ADDR_VAR 0 2
16650: PUSH
16651: LD_INT 81
16653: PUSH
16654: LD_INT 3
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PPUSH
16661: CALL_OW 69
16665: ST_TO_ADDR
// if ru_vehicles then
16666: LD_EXP 56
16670: IFFALSE 16837
// begin for i in ru_vehicles do
16672: LD_ADDR_VAR 0 1
16676: PUSH
16677: LD_EXP 56
16681: PUSH
16682: FOR_IN
16683: IFFALSE 16835
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
16685: LD_VAR 0 1
16689: PPUSH
16690: CALL_OW 302
16694: PUSH
16695: LD_VAR 0 1
16699: PPUSH
16700: LD_VAR 0 2
16704: PPUSH
16705: LD_VAR 0 1
16709: PPUSH
16710: CALL_OW 74
16714: PPUSH
16715: CALL_OW 296
16719: PUSH
16720: LD_INT 9
16722: LESS
16723: AND
16724: IFFALSE 16750
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
16726: LD_VAR 0 1
16730: PPUSH
16731: LD_VAR 0 2
16735: PPUSH
16736: LD_VAR 0 1
16740: PPUSH
16741: CALL_OW 74
16745: PPUSH
16746: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
16750: LD_VAR 0 1
16754: PPUSH
16755: CALL_OW 314
16759: NOT
16760: PUSH
16761: LD_VAR 0 1
16765: PPUSH
16766: CALL_OW 302
16770: AND
16771: PUSH
16772: LD_VAR 0 1
16776: PPUSH
16777: LD_EXP 61
16781: PUSH
16782: LD_INT 1
16784: ARRAY
16785: PPUSH
16786: LD_EXP 61
16790: PUSH
16791: LD_INT 2
16793: ARRAY
16794: PPUSH
16795: CALL_OW 297
16799: PUSH
16800: LD_INT 10
16802: GREATER
16803: AND
16804: IFFALSE 16833
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
16806: LD_VAR 0 1
16810: PPUSH
16811: LD_EXP 61
16815: PUSH
16816: LD_INT 1
16818: ARRAY
16819: PPUSH
16820: LD_EXP 61
16824: PUSH
16825: LD_INT 2
16827: ARRAY
16828: PPUSH
16829: CALL_OW 114
// end ;
16833: GO 16682
16835: POP
16836: POP
// end ; end ;
16837: PPOPN 2
16839: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
16840: LD_EXP 61
16844: PUSH
16845: LD_EXP 60
16849: AND
16850: PUSH
16851: LD_INT 3
16853: PPUSH
16854: CALL_OW 463
16858: NOT
16859: AND
16860: PUSH
16861: LD_EXP 31
16865: NOT
16866: AND
16867: PUSH
16868: LD_EXP 32
16872: NOT
16873: AND
16874: IFFALSE 16969
16876: GO 16878
16878: DISABLE
16879: LD_INT 0
16881: PPUSH
// begin enable ;
16882: ENABLE
// ru_alert_xy := false ;
16883: LD_ADDR_EXP 61
16887: PUSH
16888: LD_INT 0
16890: ST_TO_ADDR
// ru_alert := false ;
16891: LD_ADDR_EXP 60
16895: PUSH
16896: LD_INT 0
16898: ST_TO_ADDR
// if ru_vehicles then
16899: LD_EXP 56
16903: IFFALSE 16969
// for i in ru_vehicles do
16905: LD_ADDR_VAR 0 1
16909: PUSH
16910: LD_EXP 56
16914: PUSH
16915: FOR_IN
16916: IFFALSE 16967
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
16918: LD_VAR 0 1
16922: PPUSH
16923: CALL_OW 302
16927: PUSH
16928: LD_VAR 0 1
16932: PPUSH
16933: LD_INT 89
16935: PPUSH
16936: LD_INT 36
16938: PPUSH
16939: CALL_OW 297
16943: PUSH
16944: LD_INT 10
16946: GREATER
16947: AND
16948: IFFALSE 16965
// ComMoveXY ( i , 89 , 36 ) ;
16950: LD_VAR 0 1
16954: PPUSH
16955: LD_INT 89
16957: PPUSH
16958: LD_INT 36
16960: PPUSH
16961: CALL_OW 111
16965: GO 16915
16967: POP
16968: POP
// end ;
16969: PPOPN 1
16971: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
16972: LD_EXP 55
16976: PUSH
16977: LD_EXP 31
16981: NOT
16982: AND
16983: PUSH
16984: LD_EXP 32
16988: NOT
16989: AND
16990: IFFALSE 17274
16992: GO 16994
16994: DISABLE
16995: LD_INT 0
16997: PPUSH
16998: PPUSH
16999: PPUSH
// begin enable ;
17000: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17001: LD_ADDR_VAR 0 3
17005: PUSH
17006: LD_INT 81
17008: PUSH
17009: LD_INT 3
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PPUSH
17016: CALL_OW 69
17020: ST_TO_ADDR
// for i = 1 to ru_forest do
17021: LD_ADDR_VAR 0 1
17025: PUSH
17026: DOUBLE
17027: LD_INT 1
17029: DEC
17030: ST_TO_ADDR
17031: LD_EXP 55
17035: PUSH
17036: FOR_TO
17037: IFFALSE 17272
// begin un := ru_forest [ i ] ;
17039: LD_ADDR_VAR 0 2
17043: PUSH
17044: LD_EXP 55
17048: PUSH
17049: LD_VAR 0 1
17053: ARRAY
17054: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17055: LD_VAR 0 2
17059: PPUSH
17060: LD_INT 13
17062: PPUSH
17063: CALL_OW 308
17067: IFFALSE 17157
// begin if not See ( 1 , un ) then
17069: LD_INT 1
17071: PPUSH
17072: LD_VAR 0 2
17076: PPUSH
17077: CALL_OW 292
17081: NOT
17082: IFFALSE 17096
// SetLives ( un , 1000 ) ;
17084: LD_VAR 0 2
17088: PPUSH
17089: LD_INT 1000
17091: PPUSH
17092: CALL_OW 234
// ru_forest := ru_forest diff un ;
17096: LD_ADDR_EXP 55
17100: PUSH
17101: LD_EXP 55
17105: PUSH
17106: LD_VAR 0 2
17110: DIFF
17111: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17112: LD_VAR 0 2
17116: PPUSH
17117: LD_INT 22
17119: PUSH
17120: LD_INT 3
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 30
17129: PUSH
17130: LD_INT 4
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PPUSH
17141: CALL_OW 69
17145: PPUSH
17146: CALL 1007 0 1
17150: PPUSH
17151: CALL_OW 120
// continue ;
17155: GO 17036
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17157: LD_VAR 0 2
17161: PPUSH
17162: CALL_OW 256
17166: PUSH
17167: LD_INT 700
17169: LESS
17170: PUSH
17171: LD_VAR 0 2
17175: PPUSH
17176: LD_INT 13
17178: PPUSH
17179: CALL_OW 308
17183: NOT
17184: AND
17185: IFFALSE 17201
// ComMoveToArea ( un , retreatArea ) else
17187: LD_VAR 0 2
17191: PPUSH
17192: LD_INT 13
17194: PPUSH
17195: CALL_OW 113
17199: GO 17270
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17201: LD_VAR 0 2
17205: PPUSH
17206: LD_VAR 0 3
17210: PPUSH
17211: LD_VAR 0 2
17215: PPUSH
17216: CALL_OW 74
17220: PPUSH
17221: CALL_OW 296
17225: PUSH
17226: LD_INT 9
17228: LESS
17229: PUSH
17230: LD_VAR 0 2
17234: PPUSH
17235: CALL_OW 256
17239: PUSH
17240: LD_INT 500
17242: GREATER
17243: AND
17244: IFFALSE 17270
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17246: LD_VAR 0 2
17250: PPUSH
17251: LD_VAR 0 3
17255: PPUSH
17256: LD_VAR 0 2
17260: PPUSH
17261: CALL_OW 74
17265: PPUSH
17266: CALL_OW 115
// end ;
17270: GO 17036
17272: POP
17273: POP
// end ;
17274: PPOPN 3
17276: END
// every 0 0$10 trigger not send_attack_on_cornel do var i , filter ;
17277: LD_EXP 32
17281: NOT
17282: IFFALSE 17403
17284: GO 17286
17286: DISABLE
17287: LD_INT 0
17289: PPUSH
17290: PPUSH
// begin enable ;
17291: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
17292: LD_ADDR_VAR 0 2
17296: PUSH
17297: LD_INT 22
17299: PUSH
17300: LD_INT 3
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 21
17309: PUSH
17310: LD_INT 3
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PPUSH
17321: CALL_OW 69
17325: ST_TO_ADDR
// if filter then
17326: LD_VAR 0 2
17330: IFFALSE 17403
// for i in filter do
17332: LD_ADDR_VAR 0 1
17336: PUSH
17337: LD_VAR 0 2
17341: PUSH
17342: FOR_IN
17343: IFFALSE 17401
// if GetLives ( i ) < 990 then
17345: LD_VAR 0 1
17349: PPUSH
17350: CALL_OW 256
17354: PUSH
17355: LD_INT 990
17357: LESS
17358: IFFALSE 17399
// begin ru_alert := true ;
17360: LD_ADDR_EXP 60
17364: PUSH
17365: LD_INT 1
17367: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17368: LD_ADDR_EXP 61
17372: PUSH
17373: LD_VAR 0 1
17377: PPUSH
17378: CALL_OW 250
17382: PUSH
17383: LD_VAR 0 1
17387: PPUSH
17388: CALL_OW 251
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: ST_TO_ADDR
// break ;
17397: GO 17401
// end ;
17399: GO 17342
17401: POP
17402: POP
// end ;
17403: PPOPN 2
17405: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17406: LD_EXP 31
17410: IFFALSE 17559
17412: GO 17414
17414: DISABLE
17415: LD_INT 0
17417: PPUSH
17418: PPUSH
17419: PPUSH
17420: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17421: LD_ADDR_VAR 0 4
17425: PUSH
17426: LD_EXP 56
17430: PUSH
17431: LD_EXP 55
17435: ADD
17436: PUSH
17437: LD_EXP 53
17441: ADD
17442: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17443: LD_ADDR_VAR 0 3
17447: PUSH
17448: LD_INT 3
17450: PPUSH
17451: LD_INT 81
17453: PUSH
17454: LD_INT 3
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PPUSH
17461: CALL_OW 70
17465: ST_TO_ADDR
// if filter and enemy then
17466: LD_VAR 0 4
17470: PUSH
17471: LD_VAR 0 3
17475: AND
17476: IFFALSE 17559
// repeat wait ( 0 0$01 ) ;
17478: LD_INT 35
17480: PPUSH
17481: CALL_OW 67
// for i in filter do
17485: LD_ADDR_VAR 0 1
17489: PUSH
17490: LD_VAR 0 4
17494: PUSH
17495: FOR_IN
17496: IFFALSE 17524
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17498: LD_VAR 0 1
17502: PPUSH
17503: LD_VAR 0 3
17507: PPUSH
17508: LD_VAR 0 1
17512: PPUSH
17513: CALL_OW 74
17517: PPUSH
17518: CALL_OW 115
// end ;
17522: GO 17495
17524: POP
17525: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
17526: LD_INT 3
17528: PPUSH
17529: LD_INT 81
17531: PUSH
17532: LD_INT 3
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PPUSH
17539: CALL_OW 70
17543: PUSH
17544: LD_INT 0
17546: EQUAL
17547: PUSH
17548: LD_VAR 0 4
17552: PUSH
17553: LD_INT 0
17555: EQUAL
17556: OR
17557: IFFALSE 17478
// end ;
17559: PPOPN 4
17561: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
17562: LD_EXP 26
17566: PUSH
17567: LD_INT 22
17569: PUSH
17570: LD_INT 4
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 30
17579: PUSH
17580: LD_INT 4
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 3
17589: PUSH
17590: LD_INT 57
17592: PUSH
17593: EMPTY
17594: LIST
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: LIST
17604: PPUSH
17605: CALL_OW 69
17609: AND
17610: IFFALSE 17659
17612: GO 17614
17614: DISABLE
17615: LD_INT 0
17617: PPUSH
// begin if not ru_cornel_attack then
17618: LD_EXP 58
17622: NOT
17623: IFFALSE 17627
// exit ;
17625: GO 17659
// for i in ru_cornel_attack do
17627: LD_ADDR_VAR 0 1
17631: PUSH
17632: LD_EXP 58
17636: PUSH
17637: FOR_IN
17638: IFFALSE 17657
// ComAgressiveMove ( i , 258 , 119 ) ;
17640: LD_VAR 0 1
17644: PPUSH
17645: LD_INT 258
17647: PPUSH
17648: LD_INT 119
17650: PPUSH
17651: CALL_OW 114
17655: GO 17637
17657: POP
17658: POP
// end ; end_of_file
17659: PPOPN 1
17661: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
17662: LD_EXP 5
17666: PUSH
17667: LD_EXP 9
17671: NOT
17672: AND
17673: PUSH
17674: LD_EXP 20
17678: AND
17679: IFFALSE 17791
17681: GO 17683
17683: DISABLE
17684: LD_INT 0
17686: PPUSH
// begin enable ;
17687: ENABLE
// crates_counter := crates_counter - 50 ;
17688: LD_ADDR_EXP 20
17692: PUSH
17693: LD_EXP 20
17697: PUSH
17698: LD_INT 50
17700: MINUS
17701: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
17702: LD_INT 8
17704: PPUSH
17705: LD_INT 2
17707: PPUSH
17708: LD_INT 5
17710: PPUSH
17711: CALL_OW 12
17715: PPUSH
17716: LD_INT 1
17718: PPUSH
17719: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
17723: LD_INT 1785
17725: PPUSH
17726: LD_INT 2345
17728: PPUSH
17729: CALL_OW 12
17733: PPUSH
17734: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
17738: LD_ADDR_VAR 0 1
17742: PUSH
17743: LD_INT 1
17745: PPUSH
17746: LD_OWVAR 67
17750: PUSH
17751: LD_INT 2
17753: PLUS
17754: PPUSH
17755: CALL_OW 12
17759: ST_TO_ADDR
// if r < 3 then
17760: LD_VAR 0 1
17764: PUSH
17765: LD_INT 3
17767: LESS
17768: IFFALSE 17791
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
17770: LD_INT 4
17772: PPUSH
17773: LD_INT 1
17775: PPUSH
17776: LD_INT 5
17778: PPUSH
17779: CALL_OW 12
17783: PPUSH
17784: LD_INT 1
17786: PPUSH
17787: CALL_OW 55
// end ;
17791: PPOPN 1
17793: END
// every 0 0$01 trigger cornel_active do
17794: LD_EXP 8
17798: IFFALSE 17887
17800: GO 17802
17802: DISABLE
// begin Wait ( 0 0$03 ) ;
17803: LD_INT 105
17805: PPUSH
17806: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17810: LD_INT 2
17812: PPUSH
17813: LD_INT 5
17815: PPUSH
17816: CALL_OW 12
17820: PPUSH
17821: LD_INT 10
17823: PPUSH
17824: LD_INT 1
17826: PPUSH
17827: CALL_OW 55
// Wait ( 0 0$13 ) ;
17831: LD_INT 455
17833: PPUSH
17834: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17838: LD_INT 2
17840: PPUSH
17841: LD_INT 5
17843: PPUSH
17844: CALL_OW 12
17848: PPUSH
17849: LD_INT 10
17851: PPUSH
17852: LD_INT 1
17854: PPUSH
17855: CALL_OW 55
// Wait ( 0 0$16 ) ;
17859: LD_INT 560
17861: PPUSH
17862: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17866: LD_INT 2
17868: PPUSH
17869: LD_INT 5
17871: PPUSH
17872: CALL_OW 12
17876: PPUSH
17877: LD_INT 10
17879: PPUSH
17880: LD_INT 1
17882: PPUSH
17883: CALL_OW 55
// end ; end_of_file
17887: END
// every 0 0$01 trigger cornel_prepared do
17888: LD_EXP 11
17892: IFFALSE 17951
17894: GO 17896
17896: DISABLE
// begin enable ;
17897: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
17898: LD_ADDR_OWVAR 47
17902: PUSH
17903: LD_STRING #Am03-1
17905: PUSH
17906: LD_EXP 10
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
17915: LD_ADDR_EXP 10
17919: PUSH
17920: LD_EXP 10
17924: PPUSH
17925: LD_STRING -
17927: PPUSH
17928: CALL 1077 0 2
17932: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
17933: LD_EXP 10
17937: PUSH
17938: LD_INT 0
17940: EQUAL
17941: IFFALSE 17951
// begin Display_Strings := [ ] ;
17943: LD_ADDR_OWVAR 47
17947: PUSH
17948: EMPTY
17949: ST_TO_ADDR
// disable ;
17950: DISABLE
// end ; end ;
17951: END
// every 0 0$01 trigger debug and debug_strings do
17952: LD_EXP 1
17956: PUSH
17957: LD_OWVAR 48
17961: AND
17962: IFFALSE 17978
17964: GO 17966
17966: DISABLE
// begin enable ;
17967: ENABLE
// Display_Strings := debug_strings ;
17968: LD_ADDR_OWVAR 47
17972: PUSH
17973: LD_OWVAR 48
17977: ST_TO_ADDR
// end ; end_of_file
17978: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
17979: LD_VAR 0 1
17983: PPUSH
17984: LD_VAR 0 2
17988: PPUSH
17989: CALL 34426 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
17993: LD_VAR 0 1
17997: PPUSH
17998: CALL_OW 255
18002: PUSH
18003: LD_INT 1
18005: EQUAL
18006: PUSH
18007: LD_EXP 14
18011: NOT
18012: AND
18013: IFFALSE 18023
// solar_builded := true ;
18015: LD_ADDR_EXP 14
18019: PUSH
18020: LD_INT 1
18022: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18023: LD_VAR 0 1
18027: PPUSH
18028: CALL_OW 255
18032: PUSH
18033: LD_INT 1
18035: EQUAL
18036: PUSH
18037: LD_EXP 29
18041: AND
18042: IFFALSE 18079
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18044: LD_ADDR_EXP 29
18048: PUSH
18049: LD_EXP 29
18053: PUSH
18054: LD_INT 1750
18056: PUSH
18057: LD_INT 1400
18059: PUSH
18060: LD_INT 1225
18062: PUSH
18063: LD_INT 1050
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: PUSH
18072: LD_OWVAR 67
18076: ARRAY
18077: PLUS
18078: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18079: LD_VAR 0 1
18083: PPUSH
18084: CALL_OW 255
18088: PUSH
18089: LD_INT 3
18091: EQUAL
18092: IFFALSE 18110
// ru_vehicles := ru_vehicles ^ veh ;
18094: LD_ADDR_EXP 56
18098: PUSH
18099: LD_EXP 56
18103: PUSH
18104: LD_VAR 0 1
18108: ADD
18109: ST_TO_ADDR
// end ;
18110: PPOPN 2
18112: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18113: LD_VAR 0 1
18117: PPUSH
18118: CALL 34306 0 1
// if un in ru_patrol then
18122: LD_VAR 0 1
18126: PUSH
18127: LD_EXP 53
18131: IN
18132: IFFALSE 18150
// ru_patrol := ru_patrol diff un ;
18134: LD_ADDR_EXP 53
18138: PUSH
18139: LD_EXP 53
18143: PUSH
18144: LD_VAR 0 1
18148: DIFF
18149: ST_TO_ADDR
// if un in ru_forest then
18150: LD_VAR 0 1
18154: PUSH
18155: LD_EXP 55
18159: IN
18160: IFFALSE 18178
// ru_forest := ru_forest diff un ;
18162: LD_ADDR_EXP 55
18166: PUSH
18167: LD_EXP 55
18171: PUSH
18172: LD_VAR 0 1
18176: DIFF
18177: ST_TO_ADDR
// if un in ru_vehicles then
18178: LD_VAR 0 1
18182: PUSH
18183: LD_EXP 56
18187: IN
18188: IFFALSE 18294
// begin ru_vehicles := ru_vehicles diff un ;
18190: LD_ADDR_EXP 56
18194: PUSH
18195: LD_EXP 56
18199: PUSH
18200: LD_VAR 0 1
18204: DIFF
18205: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18206: LD_ADDR_EXP 57
18210: PUSH
18211: LD_EXP 57
18215: PUSH
18216: LD_VAR 0 1
18220: PPUSH
18221: CALL_OW 265
18225: PUSH
18226: LD_VAR 0 1
18230: PPUSH
18231: CALL_OW 262
18235: PUSH
18236: LD_VAR 0 1
18240: PPUSH
18241: CALL_OW 263
18245: PUSH
18246: LD_VAR 0 1
18250: PPUSH
18251: CALL_OW 264
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: ADD
18262: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18263: LD_ADDR_EXP 13
18267: PUSH
18268: LD_EXP 13
18272: PUSH
18273: LD_INT 1
18275: PLUS
18276: ST_TO_ADDR
// if ach_counter = 10 then
18277: LD_EXP 13
18281: PUSH
18282: LD_INT 10
18284: EQUAL
18285: IFFALSE 18294
// SetAchievement ( ACH_FAUST ) ;
18287: LD_STRING ACH_FAUST
18289: PPUSH
18290: CALL_OW 543
// end ; if un = Pokryshkin then
18294: LD_VAR 0 1
18298: PUSH
18299: LD_EXP 52
18303: EQUAL
18304: IFFALSE 18313
// SetAchievement ( ACH_POKR ) ;
18306: LD_STRING ACH_POKR
18308: PPUSH
18309: CALL_OW 543
// if un = JMM then
18313: LD_VAR 0 1
18317: PUSH
18318: LD_EXP 37
18322: EQUAL
18323: IFFALSE 18332
// YouLost ( 0 ) ;
18325: LD_STRING 0
18327: PPUSH
18328: CALL_OW 104
// if un = us_dep_west then
18332: LD_VAR 0 1
18336: PUSH
18337: LD_INT 1
18339: EQUAL
18340: IFFALSE 18349
// YouLost ( 2 ) ;
18342: LD_STRING 2
18344: PPUSH
18345: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18349: LD_VAR 0 1
18353: PPUSH
18354: CALL_OW 255
18358: PUSH
18359: LD_INT 8
18361: EQUAL
18362: PUSH
18363: LD_EXP 5
18367: NOT
18368: AND
18369: IFFALSE 18378
// YouLost ( 4 ) ;
18371: LD_STRING 4
18373: PPUSH
18374: CALL_OW 104
// if un in jmm_units then
18378: LD_VAR 0 1
18382: PUSH
18383: LD_EXP 4
18387: IN
18388: IFFALSE 18404
// lose_counter := lose_counter + 1 ;
18390: LD_ADDR_EXP 34
18394: PUSH
18395: LD_EXP 34
18399: PUSH
18400: LD_INT 1
18402: PLUS
18403: ST_TO_ADDR
// end ;
18404: PPOPN 1
18406: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18407: LD_INT 0
18409: PPUSH
18410: PPUSH
// begin if GetSide ( driver ) = 3 then
18411: LD_VAR 0 1
18415: PPUSH
18416: CALL_OW 255
18420: PUSH
18421: LD_INT 3
18423: EQUAL
18424: IFFALSE 18502
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18426: LD_ADDR_VAR 0 6
18430: PUSH
18431: LD_INT 22
18433: PUSH
18434: LD_INT 3
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 30
18443: PUSH
18444: LD_INT 3
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 69
18459: PPUSH
18460: CALL 1007 0 1
18464: ST_TO_ADDR
// if place then
18465: LD_VAR 0 6
18469: IFFALSE 18487
// ComEnterUnit ( driver , place ) else
18471: LD_VAR 0 1
18475: PPUSH
18476: LD_VAR 0 6
18480: PPUSH
18481: CALL_OW 120
18485: GO 18502
// ComMoveXY ( driver , 70 , 22 ) ;
18487: LD_VAR 0 1
18491: PPUSH
18492: LD_INT 70
18494: PPUSH
18495: LD_INT 22
18497: PPUSH
18498: CALL_OW 111
// end ; end ;
18502: PPOPN 6
18504: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
18505: LD_VAR 0 1
18509: PUSH
18510: LD_INT 1
18512: EQUAL
18513: PUSH
18514: LD_VAR 0 2
18518: PUSH
18519: LD_INT 4
18521: EQUAL
18522: PUSH
18523: LD_VAR 0 2
18527: PUSH
18528: LD_INT 8
18530: EQUAL
18531: PUSH
18532: LD_EXP 5
18536: NOT
18537: AND
18538: OR
18539: AND
18540: IFFALSE 18549
// YouLost ( 5 ) ;
18542: LD_STRING 5
18544: PPUSH
18545: CALL_OW 104
// end ;
18549: PPOPN 2
18551: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
18552: LD_EXP 36
18556: PUSH
18557: LD_INT 22
18559: PUSH
18560: LD_INT 1
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 21
18569: PUSH
18570: LD_INT 1
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PPUSH
18581: CALL_OW 69
18585: PUSH
18586: LD_INT 22
18588: PUSH
18589: LD_INT 8
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 21
18598: PUSH
18599: LD_INT 1
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PPUSH
18610: CALL_OW 69
18614: ADD
18615: PLUS
18616: PUSH
18617: LD_INT 5
18619: LESS
18620: IFFALSE 18632
18622: GO 18624
18624: DISABLE
// YouLost ( 1 ) ;
18625: LD_STRING 1
18627: PPUSH
18628: CALL_OW 104
18632: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
18633: LD_INT 1
18635: PPUSH
18636: CALL_OW 255
18640: PUSH
18641: LD_INT 3
18643: EQUAL
18644: IFFALSE 18656
18646: GO 18648
18648: DISABLE
// YouLost ( 3 ) ; end_of_file end_of_file
18649: LD_STRING 3
18651: PPUSH
18652: CALL_OW 104
18656: END
// every 0 0$1 do
18657: GO 18659
18659: DISABLE
// begin enable ;
18660: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18661: LD_STRING updateTimer(
18663: PUSH
18664: LD_OWVAR 1
18668: STR
18669: PUSH
18670: LD_STRING );
18672: STR
18673: PPUSH
18674: CALL_OW 559
// end ;
18678: END
// export function SOS_MapStart ( ) ; begin
18679: LD_INT 0
18681: PPUSH
// if streamModeActive then
18682: LD_EXP 62
18686: IFFALSE 18695
// DefineStreamItems ( true ) ;
18688: LD_INT 1
18690: PPUSH
18691: CALL 20349 0 1
// UpdateFactoryWaypoints ( ) ;
18695: CALL 33210 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18699: CALL 33467 0 0
// end ;
18703: LD_VAR 0 1
18707: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18708: LD_INT 0
18710: PPUSH
// if p2 = 100 then
18711: LD_VAR 0 2
18715: PUSH
18716: LD_INT 100
18718: EQUAL
18719: IFFALSE 19722
// begin if not StreamModeActive then
18721: LD_EXP 62
18725: NOT
18726: IFFALSE 18736
// StreamModeActive := true ;
18728: LD_ADDR_EXP 62
18732: PUSH
18733: LD_INT 1
18735: ST_TO_ADDR
// if p3 = 0 then
18736: LD_VAR 0 3
18740: PUSH
18741: LD_INT 0
18743: EQUAL
18744: IFFALSE 18750
// InitStreamMode ;
18746: CALL 19885 0 0
// if p3 = 1 then
18750: LD_VAR 0 3
18754: PUSH
18755: LD_INT 1
18757: EQUAL
18758: IFFALSE 18768
// sRocket := true ;
18760: LD_ADDR_EXP 67
18764: PUSH
18765: LD_INT 1
18767: ST_TO_ADDR
// if p3 = 2 then
18768: LD_VAR 0 3
18772: PUSH
18773: LD_INT 2
18775: EQUAL
18776: IFFALSE 18786
// sSpeed := true ;
18778: LD_ADDR_EXP 66
18782: PUSH
18783: LD_INT 1
18785: ST_TO_ADDR
// if p3 = 3 then
18786: LD_VAR 0 3
18790: PUSH
18791: LD_INT 3
18793: EQUAL
18794: IFFALSE 18804
// sEngine := true ;
18796: LD_ADDR_EXP 68
18800: PUSH
18801: LD_INT 1
18803: ST_TO_ADDR
// if p3 = 4 then
18804: LD_VAR 0 3
18808: PUSH
18809: LD_INT 4
18811: EQUAL
18812: IFFALSE 18822
// sSpec := true ;
18814: LD_ADDR_EXP 65
18818: PUSH
18819: LD_INT 1
18821: ST_TO_ADDR
// if p3 = 5 then
18822: LD_VAR 0 3
18826: PUSH
18827: LD_INT 5
18829: EQUAL
18830: IFFALSE 18840
// sLevel := true ;
18832: LD_ADDR_EXP 69
18836: PUSH
18837: LD_INT 1
18839: ST_TO_ADDR
// if p3 = 6 then
18840: LD_VAR 0 3
18844: PUSH
18845: LD_INT 6
18847: EQUAL
18848: IFFALSE 18858
// sArmoury := true ;
18850: LD_ADDR_EXP 70
18854: PUSH
18855: LD_INT 1
18857: ST_TO_ADDR
// if p3 = 7 then
18858: LD_VAR 0 3
18862: PUSH
18863: LD_INT 7
18865: EQUAL
18866: IFFALSE 18876
// sRadar := true ;
18868: LD_ADDR_EXP 71
18872: PUSH
18873: LD_INT 1
18875: ST_TO_ADDR
// if p3 = 8 then
18876: LD_VAR 0 3
18880: PUSH
18881: LD_INT 8
18883: EQUAL
18884: IFFALSE 18894
// sBunker := true ;
18886: LD_ADDR_EXP 72
18890: PUSH
18891: LD_INT 1
18893: ST_TO_ADDR
// if p3 = 9 then
18894: LD_VAR 0 3
18898: PUSH
18899: LD_INT 9
18901: EQUAL
18902: IFFALSE 18912
// sHack := true ;
18904: LD_ADDR_EXP 73
18908: PUSH
18909: LD_INT 1
18911: ST_TO_ADDR
// if p3 = 10 then
18912: LD_VAR 0 3
18916: PUSH
18917: LD_INT 10
18919: EQUAL
18920: IFFALSE 18930
// sFire := true ;
18922: LD_ADDR_EXP 74
18926: PUSH
18927: LD_INT 1
18929: ST_TO_ADDR
// if p3 = 11 then
18930: LD_VAR 0 3
18934: PUSH
18935: LD_INT 11
18937: EQUAL
18938: IFFALSE 18948
// sRefresh := true ;
18940: LD_ADDR_EXP 75
18944: PUSH
18945: LD_INT 1
18947: ST_TO_ADDR
// if p3 = 12 then
18948: LD_VAR 0 3
18952: PUSH
18953: LD_INT 12
18955: EQUAL
18956: IFFALSE 18966
// sExp := true ;
18958: LD_ADDR_EXP 76
18962: PUSH
18963: LD_INT 1
18965: ST_TO_ADDR
// if p3 = 13 then
18966: LD_VAR 0 3
18970: PUSH
18971: LD_INT 13
18973: EQUAL
18974: IFFALSE 18984
// sDepot := true ;
18976: LD_ADDR_EXP 77
18980: PUSH
18981: LD_INT 1
18983: ST_TO_ADDR
// if p3 = 14 then
18984: LD_VAR 0 3
18988: PUSH
18989: LD_INT 14
18991: EQUAL
18992: IFFALSE 19002
// sFlag := true ;
18994: LD_ADDR_EXP 78
18998: PUSH
18999: LD_INT 1
19001: ST_TO_ADDR
// if p3 = 15 then
19002: LD_VAR 0 3
19006: PUSH
19007: LD_INT 15
19009: EQUAL
19010: IFFALSE 19020
// sKamikadze := true ;
19012: LD_ADDR_EXP 86
19016: PUSH
19017: LD_INT 1
19019: ST_TO_ADDR
// if p3 = 16 then
19020: LD_VAR 0 3
19024: PUSH
19025: LD_INT 16
19027: EQUAL
19028: IFFALSE 19038
// sTroll := true ;
19030: LD_ADDR_EXP 87
19034: PUSH
19035: LD_INT 1
19037: ST_TO_ADDR
// if p3 = 17 then
19038: LD_VAR 0 3
19042: PUSH
19043: LD_INT 17
19045: EQUAL
19046: IFFALSE 19056
// sSlow := true ;
19048: LD_ADDR_EXP 88
19052: PUSH
19053: LD_INT 1
19055: ST_TO_ADDR
// if p3 = 18 then
19056: LD_VAR 0 3
19060: PUSH
19061: LD_INT 18
19063: EQUAL
19064: IFFALSE 19074
// sLack := true ;
19066: LD_ADDR_EXP 89
19070: PUSH
19071: LD_INT 1
19073: ST_TO_ADDR
// if p3 = 19 then
19074: LD_VAR 0 3
19078: PUSH
19079: LD_INT 19
19081: EQUAL
19082: IFFALSE 19092
// sTank := true ;
19084: LD_ADDR_EXP 91
19088: PUSH
19089: LD_INT 1
19091: ST_TO_ADDR
// if p3 = 20 then
19092: LD_VAR 0 3
19096: PUSH
19097: LD_INT 20
19099: EQUAL
19100: IFFALSE 19110
// sRemote := true ;
19102: LD_ADDR_EXP 92
19106: PUSH
19107: LD_INT 1
19109: ST_TO_ADDR
// if p3 = 21 then
19110: LD_VAR 0 3
19114: PUSH
19115: LD_INT 21
19117: EQUAL
19118: IFFALSE 19128
// sPowell := true ;
19120: LD_ADDR_EXP 93
19124: PUSH
19125: LD_INT 1
19127: ST_TO_ADDR
// if p3 = 22 then
19128: LD_VAR 0 3
19132: PUSH
19133: LD_INT 22
19135: EQUAL
19136: IFFALSE 19146
// sTeleport := true ;
19138: LD_ADDR_EXP 96
19142: PUSH
19143: LD_INT 1
19145: ST_TO_ADDR
// if p3 = 23 then
19146: LD_VAR 0 3
19150: PUSH
19151: LD_INT 23
19153: EQUAL
19154: IFFALSE 19164
// sOilTower := true ;
19156: LD_ADDR_EXP 98
19160: PUSH
19161: LD_INT 1
19163: ST_TO_ADDR
// if p3 = 24 then
19164: LD_VAR 0 3
19168: PUSH
19169: LD_INT 24
19171: EQUAL
19172: IFFALSE 19182
// sShovel := true ;
19174: LD_ADDR_EXP 99
19178: PUSH
19179: LD_INT 1
19181: ST_TO_ADDR
// if p3 = 25 then
19182: LD_VAR 0 3
19186: PUSH
19187: LD_INT 25
19189: EQUAL
19190: IFFALSE 19200
// sSheik := true ;
19192: LD_ADDR_EXP 100
19196: PUSH
19197: LD_INT 1
19199: ST_TO_ADDR
// if p3 = 26 then
19200: LD_VAR 0 3
19204: PUSH
19205: LD_INT 26
19207: EQUAL
19208: IFFALSE 19218
// sEarthquake := true ;
19210: LD_ADDR_EXP 102
19214: PUSH
19215: LD_INT 1
19217: ST_TO_ADDR
// if p3 = 27 then
19218: LD_VAR 0 3
19222: PUSH
19223: LD_INT 27
19225: EQUAL
19226: IFFALSE 19236
// sAI := true ;
19228: LD_ADDR_EXP 103
19232: PUSH
19233: LD_INT 1
19235: ST_TO_ADDR
// if p3 = 28 then
19236: LD_VAR 0 3
19240: PUSH
19241: LD_INT 28
19243: EQUAL
19244: IFFALSE 19254
// sCargo := true ;
19246: LD_ADDR_EXP 106
19250: PUSH
19251: LD_INT 1
19253: ST_TO_ADDR
// if p3 = 29 then
19254: LD_VAR 0 3
19258: PUSH
19259: LD_INT 29
19261: EQUAL
19262: IFFALSE 19272
// sDLaser := true ;
19264: LD_ADDR_EXP 107
19268: PUSH
19269: LD_INT 1
19271: ST_TO_ADDR
// if p3 = 30 then
19272: LD_VAR 0 3
19276: PUSH
19277: LD_INT 30
19279: EQUAL
19280: IFFALSE 19290
// sExchange := true ;
19282: LD_ADDR_EXP 108
19286: PUSH
19287: LD_INT 1
19289: ST_TO_ADDR
// if p3 = 31 then
19290: LD_VAR 0 3
19294: PUSH
19295: LD_INT 31
19297: EQUAL
19298: IFFALSE 19308
// sFac := true ;
19300: LD_ADDR_EXP 109
19304: PUSH
19305: LD_INT 1
19307: ST_TO_ADDR
// if p3 = 32 then
19308: LD_VAR 0 3
19312: PUSH
19313: LD_INT 32
19315: EQUAL
19316: IFFALSE 19326
// sPower := true ;
19318: LD_ADDR_EXP 110
19322: PUSH
19323: LD_INT 1
19325: ST_TO_ADDR
// if p3 = 33 then
19326: LD_VAR 0 3
19330: PUSH
19331: LD_INT 33
19333: EQUAL
19334: IFFALSE 19344
// sRandom := true ;
19336: LD_ADDR_EXP 111
19340: PUSH
19341: LD_INT 1
19343: ST_TO_ADDR
// if p3 = 34 then
19344: LD_VAR 0 3
19348: PUSH
19349: LD_INT 34
19351: EQUAL
19352: IFFALSE 19362
// sShield := true ;
19354: LD_ADDR_EXP 112
19358: PUSH
19359: LD_INT 1
19361: ST_TO_ADDR
// if p3 = 35 then
19362: LD_VAR 0 3
19366: PUSH
19367: LD_INT 35
19369: EQUAL
19370: IFFALSE 19380
// sTime := true ;
19372: LD_ADDR_EXP 113
19376: PUSH
19377: LD_INT 1
19379: ST_TO_ADDR
// if p3 = 36 then
19380: LD_VAR 0 3
19384: PUSH
19385: LD_INT 36
19387: EQUAL
19388: IFFALSE 19398
// sTools := true ;
19390: LD_ADDR_EXP 114
19394: PUSH
19395: LD_INT 1
19397: ST_TO_ADDR
// if p3 = 101 then
19398: LD_VAR 0 3
19402: PUSH
19403: LD_INT 101
19405: EQUAL
19406: IFFALSE 19416
// sSold := true ;
19408: LD_ADDR_EXP 79
19412: PUSH
19413: LD_INT 1
19415: ST_TO_ADDR
// if p3 = 102 then
19416: LD_VAR 0 3
19420: PUSH
19421: LD_INT 102
19423: EQUAL
19424: IFFALSE 19434
// sDiff := true ;
19426: LD_ADDR_EXP 80
19430: PUSH
19431: LD_INT 1
19433: ST_TO_ADDR
// if p3 = 103 then
19434: LD_VAR 0 3
19438: PUSH
19439: LD_INT 103
19441: EQUAL
19442: IFFALSE 19452
// sFog := true ;
19444: LD_ADDR_EXP 83
19448: PUSH
19449: LD_INT 1
19451: ST_TO_ADDR
// if p3 = 104 then
19452: LD_VAR 0 3
19456: PUSH
19457: LD_INT 104
19459: EQUAL
19460: IFFALSE 19470
// sReset := true ;
19462: LD_ADDR_EXP 84
19466: PUSH
19467: LD_INT 1
19469: ST_TO_ADDR
// if p3 = 105 then
19470: LD_VAR 0 3
19474: PUSH
19475: LD_INT 105
19477: EQUAL
19478: IFFALSE 19488
// sSun := true ;
19480: LD_ADDR_EXP 85
19484: PUSH
19485: LD_INT 1
19487: ST_TO_ADDR
// if p3 = 106 then
19488: LD_VAR 0 3
19492: PUSH
19493: LD_INT 106
19495: EQUAL
19496: IFFALSE 19506
// sTiger := true ;
19498: LD_ADDR_EXP 81
19502: PUSH
19503: LD_INT 1
19505: ST_TO_ADDR
// if p3 = 107 then
19506: LD_VAR 0 3
19510: PUSH
19511: LD_INT 107
19513: EQUAL
19514: IFFALSE 19524
// sBomb := true ;
19516: LD_ADDR_EXP 82
19520: PUSH
19521: LD_INT 1
19523: ST_TO_ADDR
// if p3 = 108 then
19524: LD_VAR 0 3
19528: PUSH
19529: LD_INT 108
19531: EQUAL
19532: IFFALSE 19542
// sWound := true ;
19534: LD_ADDR_EXP 90
19538: PUSH
19539: LD_INT 1
19541: ST_TO_ADDR
// if p3 = 109 then
19542: LD_VAR 0 3
19546: PUSH
19547: LD_INT 109
19549: EQUAL
19550: IFFALSE 19560
// sBetray := true ;
19552: LD_ADDR_EXP 94
19556: PUSH
19557: LD_INT 1
19559: ST_TO_ADDR
// if p3 = 110 then
19560: LD_VAR 0 3
19564: PUSH
19565: LD_INT 110
19567: EQUAL
19568: IFFALSE 19578
// sContamin := true ;
19570: LD_ADDR_EXP 95
19574: PUSH
19575: LD_INT 1
19577: ST_TO_ADDR
// if p3 = 111 then
19578: LD_VAR 0 3
19582: PUSH
19583: LD_INT 111
19585: EQUAL
19586: IFFALSE 19596
// sOil := true ;
19588: LD_ADDR_EXP 97
19592: PUSH
19593: LD_INT 1
19595: ST_TO_ADDR
// if p3 = 112 then
19596: LD_VAR 0 3
19600: PUSH
19601: LD_INT 112
19603: EQUAL
19604: IFFALSE 19614
// sStu := true ;
19606: LD_ADDR_EXP 101
19610: PUSH
19611: LD_INT 1
19613: ST_TO_ADDR
// if p3 = 113 then
19614: LD_VAR 0 3
19618: PUSH
19619: LD_INT 113
19621: EQUAL
19622: IFFALSE 19632
// sBazooka := true ;
19624: LD_ADDR_EXP 104
19628: PUSH
19629: LD_INT 1
19631: ST_TO_ADDR
// if p3 = 114 then
19632: LD_VAR 0 3
19636: PUSH
19637: LD_INT 114
19639: EQUAL
19640: IFFALSE 19650
// sMortar := true ;
19642: LD_ADDR_EXP 105
19646: PUSH
19647: LD_INT 1
19649: ST_TO_ADDR
// if p3 = 115 then
19650: LD_VAR 0 3
19654: PUSH
19655: LD_INT 115
19657: EQUAL
19658: IFFALSE 19668
// sRanger := true ;
19660: LD_ADDR_EXP 115
19664: PUSH
19665: LD_INT 1
19667: ST_TO_ADDR
// if p3 = 116 then
19668: LD_VAR 0 3
19672: PUSH
19673: LD_INT 116
19675: EQUAL
19676: IFFALSE 19686
// sComputer := true ;
19678: LD_ADDR_EXP 116
19682: PUSH
19683: LD_INT 1
19685: ST_TO_ADDR
// if p3 = 117 then
19686: LD_VAR 0 3
19690: PUSH
19691: LD_INT 117
19693: EQUAL
19694: IFFALSE 19704
// s30 := true ;
19696: LD_ADDR_EXP 117
19700: PUSH
19701: LD_INT 1
19703: ST_TO_ADDR
// if p3 = 118 then
19704: LD_VAR 0 3
19708: PUSH
19709: LD_INT 118
19711: EQUAL
19712: IFFALSE 19722
// s60 := true ;
19714: LD_ADDR_EXP 118
19718: PUSH
19719: LD_INT 1
19721: ST_TO_ADDR
// end ; if p2 = 101 then
19722: LD_VAR 0 2
19726: PUSH
19727: LD_INT 101
19729: EQUAL
19730: IFFALSE 19858
// begin case p3 of 1 :
19732: LD_VAR 0 3
19736: PUSH
19737: LD_INT 1
19739: DOUBLE
19740: EQUAL
19741: IFTRUE 19745
19743: GO 19752
19745: POP
// hHackUnlimitedResources ; 2 :
19746: CALL 31956 0 0
19750: GO 19858
19752: LD_INT 2
19754: DOUBLE
19755: EQUAL
19756: IFTRUE 19760
19758: GO 19767
19760: POP
// hHackSetLevel10 ; 3 :
19761: CALL 32089 0 0
19765: GO 19858
19767: LD_INT 3
19769: DOUBLE
19770: EQUAL
19771: IFTRUE 19775
19773: GO 19782
19775: POP
// hHackSetLevel10YourUnits ; 4 :
19776: CALL 32174 0 0
19780: GO 19858
19782: LD_INT 4
19784: DOUBLE
19785: EQUAL
19786: IFTRUE 19790
19788: GO 19797
19790: POP
// hHackInvincible ; 5 :
19791: CALL 32622 0 0
19795: GO 19858
19797: LD_INT 5
19799: DOUBLE
19800: EQUAL
19801: IFTRUE 19805
19803: GO 19812
19805: POP
// hHackInvisible ; 6 :
19806: CALL 32733 0 0
19810: GO 19858
19812: LD_INT 6
19814: DOUBLE
19815: EQUAL
19816: IFTRUE 19820
19818: GO 19827
19820: POP
// hHackChangeYourSide ; 7 :
19821: CALL 32790 0 0
19825: GO 19858
19827: LD_INT 7
19829: DOUBLE
19830: EQUAL
19831: IFTRUE 19835
19833: GO 19842
19835: POP
// hHackChangeUnitSide ; 8 :
19836: CALL 32832 0 0
19840: GO 19858
19842: LD_INT 8
19844: DOUBLE
19845: EQUAL
19846: IFTRUE 19850
19848: GO 19857
19850: POP
// hHackFog ; end ;
19851: CALL 32933 0 0
19855: GO 19858
19857: POP
// end ; end ;
19858: LD_VAR 0 7
19862: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19863: GO 19865
19865: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19866: LD_STRING initStreamRollete();
19868: PPUSH
19869: CALL_OW 559
// InitStreamMode ;
19873: CALL 19885 0 0
// DefineStreamItems ( false ) ;
19877: LD_INT 0
19879: PPUSH
19880: CALL 20349 0 1
// end ;
19884: END
// function InitStreamMode ; begin
19885: LD_INT 0
19887: PPUSH
// streamModeActive := false ;
19888: LD_ADDR_EXP 62
19892: PUSH
19893: LD_INT 0
19895: ST_TO_ADDR
// normalCounter := 36 ;
19896: LD_ADDR_EXP 63
19900: PUSH
19901: LD_INT 36
19903: ST_TO_ADDR
// hardcoreCounter := 18 ;
19904: LD_ADDR_EXP 64
19908: PUSH
19909: LD_INT 18
19911: ST_TO_ADDR
// sRocket := false ;
19912: LD_ADDR_EXP 67
19916: PUSH
19917: LD_INT 0
19919: ST_TO_ADDR
// sSpeed := false ;
19920: LD_ADDR_EXP 66
19924: PUSH
19925: LD_INT 0
19927: ST_TO_ADDR
// sEngine := false ;
19928: LD_ADDR_EXP 68
19932: PUSH
19933: LD_INT 0
19935: ST_TO_ADDR
// sSpec := false ;
19936: LD_ADDR_EXP 65
19940: PUSH
19941: LD_INT 0
19943: ST_TO_ADDR
// sLevel := false ;
19944: LD_ADDR_EXP 69
19948: PUSH
19949: LD_INT 0
19951: ST_TO_ADDR
// sArmoury := false ;
19952: LD_ADDR_EXP 70
19956: PUSH
19957: LD_INT 0
19959: ST_TO_ADDR
// sRadar := false ;
19960: LD_ADDR_EXP 71
19964: PUSH
19965: LD_INT 0
19967: ST_TO_ADDR
// sBunker := false ;
19968: LD_ADDR_EXP 72
19972: PUSH
19973: LD_INT 0
19975: ST_TO_ADDR
// sHack := false ;
19976: LD_ADDR_EXP 73
19980: PUSH
19981: LD_INT 0
19983: ST_TO_ADDR
// sFire := false ;
19984: LD_ADDR_EXP 74
19988: PUSH
19989: LD_INT 0
19991: ST_TO_ADDR
// sRefresh := false ;
19992: LD_ADDR_EXP 75
19996: PUSH
19997: LD_INT 0
19999: ST_TO_ADDR
// sExp := false ;
20000: LD_ADDR_EXP 76
20004: PUSH
20005: LD_INT 0
20007: ST_TO_ADDR
// sDepot := false ;
20008: LD_ADDR_EXP 77
20012: PUSH
20013: LD_INT 0
20015: ST_TO_ADDR
// sFlag := false ;
20016: LD_ADDR_EXP 78
20020: PUSH
20021: LD_INT 0
20023: ST_TO_ADDR
// sKamikadze := false ;
20024: LD_ADDR_EXP 86
20028: PUSH
20029: LD_INT 0
20031: ST_TO_ADDR
// sTroll := false ;
20032: LD_ADDR_EXP 87
20036: PUSH
20037: LD_INT 0
20039: ST_TO_ADDR
// sSlow := false ;
20040: LD_ADDR_EXP 88
20044: PUSH
20045: LD_INT 0
20047: ST_TO_ADDR
// sLack := false ;
20048: LD_ADDR_EXP 89
20052: PUSH
20053: LD_INT 0
20055: ST_TO_ADDR
// sTank := false ;
20056: LD_ADDR_EXP 91
20060: PUSH
20061: LD_INT 0
20063: ST_TO_ADDR
// sRemote := false ;
20064: LD_ADDR_EXP 92
20068: PUSH
20069: LD_INT 0
20071: ST_TO_ADDR
// sPowell := false ;
20072: LD_ADDR_EXP 93
20076: PUSH
20077: LD_INT 0
20079: ST_TO_ADDR
// sTeleport := false ;
20080: LD_ADDR_EXP 96
20084: PUSH
20085: LD_INT 0
20087: ST_TO_ADDR
// sOilTower := false ;
20088: LD_ADDR_EXP 98
20092: PUSH
20093: LD_INT 0
20095: ST_TO_ADDR
// sShovel := false ;
20096: LD_ADDR_EXP 99
20100: PUSH
20101: LD_INT 0
20103: ST_TO_ADDR
// sSheik := false ;
20104: LD_ADDR_EXP 100
20108: PUSH
20109: LD_INT 0
20111: ST_TO_ADDR
// sEarthquake := false ;
20112: LD_ADDR_EXP 102
20116: PUSH
20117: LD_INT 0
20119: ST_TO_ADDR
// sAI := false ;
20120: LD_ADDR_EXP 103
20124: PUSH
20125: LD_INT 0
20127: ST_TO_ADDR
// sCargo := false ;
20128: LD_ADDR_EXP 106
20132: PUSH
20133: LD_INT 0
20135: ST_TO_ADDR
// sDLaser := false ;
20136: LD_ADDR_EXP 107
20140: PUSH
20141: LD_INT 0
20143: ST_TO_ADDR
// sExchange := false ;
20144: LD_ADDR_EXP 108
20148: PUSH
20149: LD_INT 0
20151: ST_TO_ADDR
// sFac := false ;
20152: LD_ADDR_EXP 109
20156: PUSH
20157: LD_INT 0
20159: ST_TO_ADDR
// sPower := false ;
20160: LD_ADDR_EXP 110
20164: PUSH
20165: LD_INT 0
20167: ST_TO_ADDR
// sRandom := false ;
20168: LD_ADDR_EXP 111
20172: PUSH
20173: LD_INT 0
20175: ST_TO_ADDR
// sShield := false ;
20176: LD_ADDR_EXP 112
20180: PUSH
20181: LD_INT 0
20183: ST_TO_ADDR
// sTime := false ;
20184: LD_ADDR_EXP 113
20188: PUSH
20189: LD_INT 0
20191: ST_TO_ADDR
// sTools := false ;
20192: LD_ADDR_EXP 114
20196: PUSH
20197: LD_INT 0
20199: ST_TO_ADDR
// sSold := false ;
20200: LD_ADDR_EXP 79
20204: PUSH
20205: LD_INT 0
20207: ST_TO_ADDR
// sDiff := false ;
20208: LD_ADDR_EXP 80
20212: PUSH
20213: LD_INT 0
20215: ST_TO_ADDR
// sFog := false ;
20216: LD_ADDR_EXP 83
20220: PUSH
20221: LD_INT 0
20223: ST_TO_ADDR
// sReset := false ;
20224: LD_ADDR_EXP 84
20228: PUSH
20229: LD_INT 0
20231: ST_TO_ADDR
// sSun := false ;
20232: LD_ADDR_EXP 85
20236: PUSH
20237: LD_INT 0
20239: ST_TO_ADDR
// sTiger := false ;
20240: LD_ADDR_EXP 81
20244: PUSH
20245: LD_INT 0
20247: ST_TO_ADDR
// sBomb := false ;
20248: LD_ADDR_EXP 82
20252: PUSH
20253: LD_INT 0
20255: ST_TO_ADDR
// sWound := false ;
20256: LD_ADDR_EXP 90
20260: PUSH
20261: LD_INT 0
20263: ST_TO_ADDR
// sBetray := false ;
20264: LD_ADDR_EXP 94
20268: PUSH
20269: LD_INT 0
20271: ST_TO_ADDR
// sContamin := false ;
20272: LD_ADDR_EXP 95
20276: PUSH
20277: LD_INT 0
20279: ST_TO_ADDR
// sOil := false ;
20280: LD_ADDR_EXP 97
20284: PUSH
20285: LD_INT 0
20287: ST_TO_ADDR
// sStu := false ;
20288: LD_ADDR_EXP 101
20292: PUSH
20293: LD_INT 0
20295: ST_TO_ADDR
// sBazooka := false ;
20296: LD_ADDR_EXP 104
20300: PUSH
20301: LD_INT 0
20303: ST_TO_ADDR
// sMortar := false ;
20304: LD_ADDR_EXP 105
20308: PUSH
20309: LD_INT 0
20311: ST_TO_ADDR
// sRanger := false ;
20312: LD_ADDR_EXP 115
20316: PUSH
20317: LD_INT 0
20319: ST_TO_ADDR
// sComputer := false ;
20320: LD_ADDR_EXP 116
20324: PUSH
20325: LD_INT 0
20327: ST_TO_ADDR
// s30 := false ;
20328: LD_ADDR_EXP 117
20332: PUSH
20333: LD_INT 0
20335: ST_TO_ADDR
// s60 := false ;
20336: LD_ADDR_EXP 118
20340: PUSH
20341: LD_INT 0
20343: ST_TO_ADDR
// end ;
20344: LD_VAR 0 1
20348: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20349: LD_INT 0
20351: PPUSH
20352: PPUSH
20353: PPUSH
20354: PPUSH
20355: PPUSH
20356: PPUSH
20357: PPUSH
// result := [ ] ;
20358: LD_ADDR_VAR 0 2
20362: PUSH
20363: EMPTY
20364: ST_TO_ADDR
// if campaign_id = 1 then
20365: LD_OWVAR 69
20369: PUSH
20370: LD_INT 1
20372: EQUAL
20373: IFFALSE 23539
// begin case mission_number of 1 :
20375: LD_OWVAR 70
20379: PUSH
20380: LD_INT 1
20382: DOUBLE
20383: EQUAL
20384: IFTRUE 20388
20386: GO 20464
20388: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20389: LD_ADDR_VAR 0 2
20393: PUSH
20394: LD_INT 2
20396: PUSH
20397: LD_INT 4
20399: PUSH
20400: LD_INT 11
20402: PUSH
20403: LD_INT 12
20405: PUSH
20406: LD_INT 15
20408: PUSH
20409: LD_INT 16
20411: PUSH
20412: LD_INT 22
20414: PUSH
20415: LD_INT 23
20417: PUSH
20418: LD_INT 26
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 101
20434: PUSH
20435: LD_INT 102
20437: PUSH
20438: LD_INT 106
20440: PUSH
20441: LD_INT 116
20443: PUSH
20444: LD_INT 117
20446: PUSH
20447: LD_INT 118
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: ST_TO_ADDR
20462: GO 23537
20464: LD_INT 2
20466: DOUBLE
20467: EQUAL
20468: IFTRUE 20472
20470: GO 20556
20472: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20473: LD_ADDR_VAR 0 2
20477: PUSH
20478: LD_INT 2
20480: PUSH
20481: LD_INT 4
20483: PUSH
20484: LD_INT 11
20486: PUSH
20487: LD_INT 12
20489: PUSH
20490: LD_INT 15
20492: PUSH
20493: LD_INT 16
20495: PUSH
20496: LD_INT 22
20498: PUSH
20499: LD_INT 23
20501: PUSH
20502: LD_INT 26
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 101
20518: PUSH
20519: LD_INT 102
20521: PUSH
20522: LD_INT 105
20524: PUSH
20525: LD_INT 106
20527: PUSH
20528: LD_INT 108
20530: PUSH
20531: LD_INT 116
20533: PUSH
20534: LD_INT 117
20536: PUSH
20537: LD_INT 118
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: ST_TO_ADDR
20554: GO 23537
20556: LD_INT 3
20558: DOUBLE
20559: EQUAL
20560: IFTRUE 20564
20562: GO 20652
20564: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20565: LD_ADDR_VAR 0 2
20569: PUSH
20570: LD_INT 2
20572: PUSH
20573: LD_INT 4
20575: PUSH
20576: LD_INT 5
20578: PUSH
20579: LD_INT 11
20581: PUSH
20582: LD_INT 12
20584: PUSH
20585: LD_INT 15
20587: PUSH
20588: LD_INT 16
20590: PUSH
20591: LD_INT 22
20593: PUSH
20594: LD_INT 26
20596: PUSH
20597: LD_INT 36
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 101
20614: PUSH
20615: LD_INT 102
20617: PUSH
20618: LD_INT 105
20620: PUSH
20621: LD_INT 106
20623: PUSH
20624: LD_INT 108
20626: PUSH
20627: LD_INT 116
20629: PUSH
20630: LD_INT 117
20632: PUSH
20633: LD_INT 118
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: ST_TO_ADDR
20650: GO 23537
20652: LD_INT 4
20654: DOUBLE
20655: EQUAL
20656: IFTRUE 20660
20658: GO 20756
20660: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20661: LD_ADDR_VAR 0 2
20665: PUSH
20666: LD_INT 2
20668: PUSH
20669: LD_INT 4
20671: PUSH
20672: LD_INT 5
20674: PUSH
20675: LD_INT 8
20677: PUSH
20678: LD_INT 11
20680: PUSH
20681: LD_INT 12
20683: PUSH
20684: LD_INT 15
20686: PUSH
20687: LD_INT 16
20689: PUSH
20690: LD_INT 22
20692: PUSH
20693: LD_INT 23
20695: PUSH
20696: LD_INT 26
20698: PUSH
20699: LD_INT 36
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 101
20718: PUSH
20719: LD_INT 102
20721: PUSH
20722: LD_INT 105
20724: PUSH
20725: LD_INT 106
20727: PUSH
20728: LD_INT 108
20730: PUSH
20731: LD_INT 116
20733: PUSH
20734: LD_INT 117
20736: PUSH
20737: LD_INT 118
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: ST_TO_ADDR
20754: GO 23537
20756: LD_INT 5
20758: DOUBLE
20759: EQUAL
20760: IFTRUE 20764
20762: GO 20876
20764: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20765: LD_ADDR_VAR 0 2
20769: PUSH
20770: LD_INT 2
20772: PUSH
20773: LD_INT 4
20775: PUSH
20776: LD_INT 5
20778: PUSH
20779: LD_INT 6
20781: PUSH
20782: LD_INT 8
20784: PUSH
20785: LD_INT 11
20787: PUSH
20788: LD_INT 12
20790: PUSH
20791: LD_INT 15
20793: PUSH
20794: LD_INT 16
20796: PUSH
20797: LD_INT 22
20799: PUSH
20800: LD_INT 23
20802: PUSH
20803: LD_INT 25
20805: PUSH
20806: LD_INT 26
20808: PUSH
20809: LD_INT 36
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 101
20830: PUSH
20831: LD_INT 102
20833: PUSH
20834: LD_INT 105
20836: PUSH
20837: LD_INT 106
20839: PUSH
20840: LD_INT 108
20842: PUSH
20843: LD_INT 109
20845: PUSH
20846: LD_INT 112
20848: PUSH
20849: LD_INT 116
20851: PUSH
20852: LD_INT 117
20854: PUSH
20855: LD_INT 118
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: ST_TO_ADDR
20874: GO 23537
20876: LD_INT 6
20878: DOUBLE
20879: EQUAL
20880: IFTRUE 20884
20882: GO 21016
20884: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20885: LD_ADDR_VAR 0 2
20889: PUSH
20890: LD_INT 2
20892: PUSH
20893: LD_INT 4
20895: PUSH
20896: LD_INT 5
20898: PUSH
20899: LD_INT 6
20901: PUSH
20902: LD_INT 8
20904: PUSH
20905: LD_INT 11
20907: PUSH
20908: LD_INT 12
20910: PUSH
20911: LD_INT 15
20913: PUSH
20914: LD_INT 16
20916: PUSH
20917: LD_INT 20
20919: PUSH
20920: LD_INT 21
20922: PUSH
20923: LD_INT 22
20925: PUSH
20926: LD_INT 23
20928: PUSH
20929: LD_INT 25
20931: PUSH
20932: LD_INT 26
20934: PUSH
20935: LD_INT 30
20937: PUSH
20938: LD_INT 31
20940: PUSH
20941: LD_INT 32
20943: PUSH
20944: LD_INT 36
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 101
20970: PUSH
20971: LD_INT 102
20973: PUSH
20974: LD_INT 105
20976: PUSH
20977: LD_INT 106
20979: PUSH
20980: LD_INT 108
20982: PUSH
20983: LD_INT 109
20985: PUSH
20986: LD_INT 112
20988: PUSH
20989: LD_INT 116
20991: PUSH
20992: LD_INT 117
20994: PUSH
20995: LD_INT 118
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: ST_TO_ADDR
21014: GO 23537
21016: LD_INT 7
21018: DOUBLE
21019: EQUAL
21020: IFTRUE 21024
21022: GO 21136
21024: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21025: LD_ADDR_VAR 0 2
21029: PUSH
21030: LD_INT 2
21032: PUSH
21033: LD_INT 4
21035: PUSH
21036: LD_INT 5
21038: PUSH
21039: LD_INT 7
21041: PUSH
21042: LD_INT 11
21044: PUSH
21045: LD_INT 12
21047: PUSH
21048: LD_INT 15
21050: PUSH
21051: LD_INT 16
21053: PUSH
21054: LD_INT 20
21056: PUSH
21057: LD_INT 21
21059: PUSH
21060: LD_INT 22
21062: PUSH
21063: LD_INT 23
21065: PUSH
21066: LD_INT 25
21068: PUSH
21069: LD_INT 26
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 101
21090: PUSH
21091: LD_INT 102
21093: PUSH
21094: LD_INT 103
21096: PUSH
21097: LD_INT 105
21099: PUSH
21100: LD_INT 106
21102: PUSH
21103: LD_INT 108
21105: PUSH
21106: LD_INT 112
21108: PUSH
21109: LD_INT 116
21111: PUSH
21112: LD_INT 117
21114: PUSH
21115: LD_INT 118
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: ST_TO_ADDR
21134: GO 23537
21136: LD_INT 8
21138: DOUBLE
21139: EQUAL
21140: IFTRUE 21144
21142: GO 21284
21144: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21145: LD_ADDR_VAR 0 2
21149: PUSH
21150: LD_INT 2
21152: PUSH
21153: LD_INT 4
21155: PUSH
21156: LD_INT 5
21158: PUSH
21159: LD_INT 6
21161: PUSH
21162: LD_INT 7
21164: PUSH
21165: LD_INT 8
21167: PUSH
21168: LD_INT 11
21170: PUSH
21171: LD_INT 12
21173: PUSH
21174: LD_INT 15
21176: PUSH
21177: LD_INT 16
21179: PUSH
21180: LD_INT 20
21182: PUSH
21183: LD_INT 21
21185: PUSH
21186: LD_INT 22
21188: PUSH
21189: LD_INT 23
21191: PUSH
21192: LD_INT 25
21194: PUSH
21195: LD_INT 26
21197: PUSH
21198: LD_INT 30
21200: PUSH
21201: LD_INT 31
21203: PUSH
21204: LD_INT 32
21206: PUSH
21207: LD_INT 36
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 101
21234: PUSH
21235: LD_INT 102
21237: PUSH
21238: LD_INT 103
21240: PUSH
21241: LD_INT 105
21243: PUSH
21244: LD_INT 106
21246: PUSH
21247: LD_INT 108
21249: PUSH
21250: LD_INT 109
21252: PUSH
21253: LD_INT 112
21255: PUSH
21256: LD_INT 116
21258: PUSH
21259: LD_INT 117
21261: PUSH
21262: LD_INT 118
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: ST_TO_ADDR
21282: GO 23537
21284: LD_INT 9
21286: DOUBLE
21287: EQUAL
21288: IFTRUE 21292
21290: GO 21440
21292: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21293: LD_ADDR_VAR 0 2
21297: PUSH
21298: LD_INT 2
21300: PUSH
21301: LD_INT 4
21303: PUSH
21304: LD_INT 5
21306: PUSH
21307: LD_INT 6
21309: PUSH
21310: LD_INT 7
21312: PUSH
21313: LD_INT 8
21315: PUSH
21316: LD_INT 11
21318: PUSH
21319: LD_INT 12
21321: PUSH
21322: LD_INT 15
21324: PUSH
21325: LD_INT 16
21327: PUSH
21328: LD_INT 20
21330: PUSH
21331: LD_INT 21
21333: PUSH
21334: LD_INT 22
21336: PUSH
21337: LD_INT 23
21339: PUSH
21340: LD_INT 25
21342: PUSH
21343: LD_INT 26
21345: PUSH
21346: LD_INT 28
21348: PUSH
21349: LD_INT 30
21351: PUSH
21352: LD_INT 31
21354: PUSH
21355: LD_INT 32
21357: PUSH
21358: LD_INT 36
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 101
21386: PUSH
21387: LD_INT 102
21389: PUSH
21390: LD_INT 103
21392: PUSH
21393: LD_INT 105
21395: PUSH
21396: LD_INT 106
21398: PUSH
21399: LD_INT 108
21401: PUSH
21402: LD_INT 109
21404: PUSH
21405: LD_INT 112
21407: PUSH
21408: LD_INT 114
21410: PUSH
21411: LD_INT 116
21413: PUSH
21414: LD_INT 117
21416: PUSH
21417: LD_INT 118
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: ST_TO_ADDR
21438: GO 23537
21440: LD_INT 10
21442: DOUBLE
21443: EQUAL
21444: IFTRUE 21448
21446: GO 21644
21448: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21449: LD_ADDR_VAR 0 2
21453: PUSH
21454: LD_INT 2
21456: PUSH
21457: LD_INT 4
21459: PUSH
21460: LD_INT 5
21462: PUSH
21463: LD_INT 6
21465: PUSH
21466: LD_INT 7
21468: PUSH
21469: LD_INT 8
21471: PUSH
21472: LD_INT 9
21474: PUSH
21475: LD_INT 10
21477: PUSH
21478: LD_INT 11
21480: PUSH
21481: LD_INT 12
21483: PUSH
21484: LD_INT 13
21486: PUSH
21487: LD_INT 14
21489: PUSH
21490: LD_INT 15
21492: PUSH
21493: LD_INT 16
21495: PUSH
21496: LD_INT 17
21498: PUSH
21499: LD_INT 18
21501: PUSH
21502: LD_INT 19
21504: PUSH
21505: LD_INT 20
21507: PUSH
21508: LD_INT 21
21510: PUSH
21511: LD_INT 22
21513: PUSH
21514: LD_INT 23
21516: PUSH
21517: LD_INT 24
21519: PUSH
21520: LD_INT 25
21522: PUSH
21523: LD_INT 26
21525: PUSH
21526: LD_INT 28
21528: PUSH
21529: LD_INT 30
21531: PUSH
21532: LD_INT 31
21534: PUSH
21535: LD_INT 32
21537: PUSH
21538: LD_INT 36
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 101
21574: PUSH
21575: LD_INT 102
21577: PUSH
21578: LD_INT 103
21580: PUSH
21581: LD_INT 104
21583: PUSH
21584: LD_INT 105
21586: PUSH
21587: LD_INT 106
21589: PUSH
21590: LD_INT 107
21592: PUSH
21593: LD_INT 108
21595: PUSH
21596: LD_INT 109
21598: PUSH
21599: LD_INT 110
21601: PUSH
21602: LD_INT 111
21604: PUSH
21605: LD_INT 112
21607: PUSH
21608: LD_INT 114
21610: PUSH
21611: LD_INT 116
21613: PUSH
21614: LD_INT 117
21616: PUSH
21617: LD_INT 118
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: ST_TO_ADDR
21642: GO 23537
21644: LD_INT 11
21646: DOUBLE
21647: EQUAL
21648: IFTRUE 21652
21650: GO 21856
21652: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21653: LD_ADDR_VAR 0 2
21657: PUSH
21658: LD_INT 2
21660: PUSH
21661: LD_INT 3
21663: PUSH
21664: LD_INT 4
21666: PUSH
21667: LD_INT 5
21669: PUSH
21670: LD_INT 6
21672: PUSH
21673: LD_INT 7
21675: PUSH
21676: LD_INT 8
21678: PUSH
21679: LD_INT 9
21681: PUSH
21682: LD_INT 10
21684: PUSH
21685: LD_INT 11
21687: PUSH
21688: LD_INT 12
21690: PUSH
21691: LD_INT 13
21693: PUSH
21694: LD_INT 14
21696: PUSH
21697: LD_INT 15
21699: PUSH
21700: LD_INT 16
21702: PUSH
21703: LD_INT 17
21705: PUSH
21706: LD_INT 18
21708: PUSH
21709: LD_INT 19
21711: PUSH
21712: LD_INT 20
21714: PUSH
21715: LD_INT 21
21717: PUSH
21718: LD_INT 22
21720: PUSH
21721: LD_INT 23
21723: PUSH
21724: LD_INT 24
21726: PUSH
21727: LD_INT 25
21729: PUSH
21730: LD_INT 26
21732: PUSH
21733: LD_INT 28
21735: PUSH
21736: LD_INT 30
21738: PUSH
21739: LD_INT 31
21741: PUSH
21742: LD_INT 32
21744: PUSH
21745: LD_INT 34
21747: PUSH
21748: LD_INT 36
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 101
21786: PUSH
21787: LD_INT 102
21789: PUSH
21790: LD_INT 103
21792: PUSH
21793: LD_INT 104
21795: PUSH
21796: LD_INT 105
21798: PUSH
21799: LD_INT 106
21801: PUSH
21802: LD_INT 107
21804: PUSH
21805: LD_INT 108
21807: PUSH
21808: LD_INT 109
21810: PUSH
21811: LD_INT 110
21813: PUSH
21814: LD_INT 111
21816: PUSH
21817: LD_INT 112
21819: PUSH
21820: LD_INT 114
21822: PUSH
21823: LD_INT 116
21825: PUSH
21826: LD_INT 117
21828: PUSH
21829: LD_INT 118
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: ST_TO_ADDR
21854: GO 23537
21856: LD_INT 12
21858: DOUBLE
21859: EQUAL
21860: IFTRUE 21864
21862: GO 22084
21864: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21865: LD_ADDR_VAR 0 2
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: LD_INT 2
21875: PUSH
21876: LD_INT 3
21878: PUSH
21879: LD_INT 4
21881: PUSH
21882: LD_INT 5
21884: PUSH
21885: LD_INT 6
21887: PUSH
21888: LD_INT 7
21890: PUSH
21891: LD_INT 8
21893: PUSH
21894: LD_INT 9
21896: PUSH
21897: LD_INT 10
21899: PUSH
21900: LD_INT 11
21902: PUSH
21903: LD_INT 12
21905: PUSH
21906: LD_INT 13
21908: PUSH
21909: LD_INT 14
21911: PUSH
21912: LD_INT 15
21914: PUSH
21915: LD_INT 16
21917: PUSH
21918: LD_INT 17
21920: PUSH
21921: LD_INT 18
21923: PUSH
21924: LD_INT 19
21926: PUSH
21927: LD_INT 20
21929: PUSH
21930: LD_INT 21
21932: PUSH
21933: LD_INT 22
21935: PUSH
21936: LD_INT 23
21938: PUSH
21939: LD_INT 24
21941: PUSH
21942: LD_INT 25
21944: PUSH
21945: LD_INT 26
21947: PUSH
21948: LD_INT 27
21950: PUSH
21951: LD_INT 28
21953: PUSH
21954: LD_INT 30
21956: PUSH
21957: LD_INT 31
21959: PUSH
21960: LD_INT 32
21962: PUSH
21963: LD_INT 33
21965: PUSH
21966: LD_INT 34
21968: PUSH
21969: LD_INT 36
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 101
22010: PUSH
22011: LD_INT 102
22013: PUSH
22014: LD_INT 103
22016: PUSH
22017: LD_INT 104
22019: PUSH
22020: LD_INT 105
22022: PUSH
22023: LD_INT 106
22025: PUSH
22026: LD_INT 107
22028: PUSH
22029: LD_INT 108
22031: PUSH
22032: LD_INT 109
22034: PUSH
22035: LD_INT 110
22037: PUSH
22038: LD_INT 111
22040: PUSH
22041: LD_INT 112
22043: PUSH
22044: LD_INT 113
22046: PUSH
22047: LD_INT 114
22049: PUSH
22050: LD_INT 116
22052: PUSH
22053: LD_INT 117
22055: PUSH
22056: LD_INT 118
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: ST_TO_ADDR
22082: GO 23537
22084: LD_INT 13
22086: DOUBLE
22087: EQUAL
22088: IFTRUE 22092
22090: GO 22300
22092: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22093: LD_ADDR_VAR 0 2
22097: PUSH
22098: LD_INT 1
22100: PUSH
22101: LD_INT 2
22103: PUSH
22104: LD_INT 3
22106: PUSH
22107: LD_INT 4
22109: PUSH
22110: LD_INT 5
22112: PUSH
22113: LD_INT 8
22115: PUSH
22116: LD_INT 9
22118: PUSH
22119: LD_INT 10
22121: PUSH
22122: LD_INT 11
22124: PUSH
22125: LD_INT 12
22127: PUSH
22128: LD_INT 14
22130: PUSH
22131: LD_INT 15
22133: PUSH
22134: LD_INT 16
22136: PUSH
22137: LD_INT 17
22139: PUSH
22140: LD_INT 18
22142: PUSH
22143: LD_INT 19
22145: PUSH
22146: LD_INT 20
22148: PUSH
22149: LD_INT 21
22151: PUSH
22152: LD_INT 22
22154: PUSH
22155: LD_INT 23
22157: PUSH
22158: LD_INT 24
22160: PUSH
22161: LD_INT 25
22163: PUSH
22164: LD_INT 26
22166: PUSH
22167: LD_INT 27
22169: PUSH
22170: LD_INT 28
22172: PUSH
22173: LD_INT 30
22175: PUSH
22176: LD_INT 31
22178: PUSH
22179: LD_INT 32
22181: PUSH
22182: LD_INT 33
22184: PUSH
22185: LD_INT 34
22187: PUSH
22188: LD_INT 36
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 101
22226: PUSH
22227: LD_INT 102
22229: PUSH
22230: LD_INT 103
22232: PUSH
22233: LD_INT 104
22235: PUSH
22236: LD_INT 105
22238: PUSH
22239: LD_INT 106
22241: PUSH
22242: LD_INT 107
22244: PUSH
22245: LD_INT 108
22247: PUSH
22248: LD_INT 109
22250: PUSH
22251: LD_INT 110
22253: PUSH
22254: LD_INT 111
22256: PUSH
22257: LD_INT 112
22259: PUSH
22260: LD_INT 113
22262: PUSH
22263: LD_INT 114
22265: PUSH
22266: LD_INT 116
22268: PUSH
22269: LD_INT 117
22271: PUSH
22272: LD_INT 118
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: ST_TO_ADDR
22298: GO 23537
22300: LD_INT 14
22302: DOUBLE
22303: EQUAL
22304: IFTRUE 22308
22306: GO 22532
22308: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22309: LD_ADDR_VAR 0 2
22313: PUSH
22314: LD_INT 1
22316: PUSH
22317: LD_INT 2
22319: PUSH
22320: LD_INT 3
22322: PUSH
22323: LD_INT 4
22325: PUSH
22326: LD_INT 5
22328: PUSH
22329: LD_INT 6
22331: PUSH
22332: LD_INT 7
22334: PUSH
22335: LD_INT 8
22337: PUSH
22338: LD_INT 9
22340: PUSH
22341: LD_INT 10
22343: PUSH
22344: LD_INT 11
22346: PUSH
22347: LD_INT 12
22349: PUSH
22350: LD_INT 13
22352: PUSH
22353: LD_INT 14
22355: PUSH
22356: LD_INT 15
22358: PUSH
22359: LD_INT 16
22361: PUSH
22362: LD_INT 17
22364: PUSH
22365: LD_INT 18
22367: PUSH
22368: LD_INT 19
22370: PUSH
22371: LD_INT 20
22373: PUSH
22374: LD_INT 21
22376: PUSH
22377: LD_INT 22
22379: PUSH
22380: LD_INT 23
22382: PUSH
22383: LD_INT 24
22385: PUSH
22386: LD_INT 25
22388: PUSH
22389: LD_INT 26
22391: PUSH
22392: LD_INT 27
22394: PUSH
22395: LD_INT 28
22397: PUSH
22398: LD_INT 29
22400: PUSH
22401: LD_INT 30
22403: PUSH
22404: LD_INT 31
22406: PUSH
22407: LD_INT 32
22409: PUSH
22410: LD_INT 33
22412: PUSH
22413: LD_INT 34
22415: PUSH
22416: LD_INT 36
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 101
22458: PUSH
22459: LD_INT 102
22461: PUSH
22462: LD_INT 103
22464: PUSH
22465: LD_INT 104
22467: PUSH
22468: LD_INT 105
22470: PUSH
22471: LD_INT 106
22473: PUSH
22474: LD_INT 107
22476: PUSH
22477: LD_INT 108
22479: PUSH
22480: LD_INT 109
22482: PUSH
22483: LD_INT 110
22485: PUSH
22486: LD_INT 111
22488: PUSH
22489: LD_INT 112
22491: PUSH
22492: LD_INT 113
22494: PUSH
22495: LD_INT 114
22497: PUSH
22498: LD_INT 116
22500: PUSH
22501: LD_INT 117
22503: PUSH
22504: LD_INT 118
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: ST_TO_ADDR
22530: GO 23537
22532: LD_INT 15
22534: DOUBLE
22535: EQUAL
22536: IFTRUE 22540
22538: GO 22764
22540: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22541: LD_ADDR_VAR 0 2
22545: PUSH
22546: LD_INT 1
22548: PUSH
22549: LD_INT 2
22551: PUSH
22552: LD_INT 3
22554: PUSH
22555: LD_INT 4
22557: PUSH
22558: LD_INT 5
22560: PUSH
22561: LD_INT 6
22563: PUSH
22564: LD_INT 7
22566: PUSH
22567: LD_INT 8
22569: PUSH
22570: LD_INT 9
22572: PUSH
22573: LD_INT 10
22575: PUSH
22576: LD_INT 11
22578: PUSH
22579: LD_INT 12
22581: PUSH
22582: LD_INT 13
22584: PUSH
22585: LD_INT 14
22587: PUSH
22588: LD_INT 15
22590: PUSH
22591: LD_INT 16
22593: PUSH
22594: LD_INT 17
22596: PUSH
22597: LD_INT 18
22599: PUSH
22600: LD_INT 19
22602: PUSH
22603: LD_INT 20
22605: PUSH
22606: LD_INT 21
22608: PUSH
22609: LD_INT 22
22611: PUSH
22612: LD_INT 23
22614: PUSH
22615: LD_INT 24
22617: PUSH
22618: LD_INT 25
22620: PUSH
22621: LD_INT 26
22623: PUSH
22624: LD_INT 27
22626: PUSH
22627: LD_INT 28
22629: PUSH
22630: LD_INT 29
22632: PUSH
22633: LD_INT 30
22635: PUSH
22636: LD_INT 31
22638: PUSH
22639: LD_INT 32
22641: PUSH
22642: LD_INT 33
22644: PUSH
22645: LD_INT 34
22647: PUSH
22648: LD_INT 36
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 101
22690: PUSH
22691: LD_INT 102
22693: PUSH
22694: LD_INT 103
22696: PUSH
22697: LD_INT 104
22699: PUSH
22700: LD_INT 105
22702: PUSH
22703: LD_INT 106
22705: PUSH
22706: LD_INT 107
22708: PUSH
22709: LD_INT 108
22711: PUSH
22712: LD_INT 109
22714: PUSH
22715: LD_INT 110
22717: PUSH
22718: LD_INT 111
22720: PUSH
22721: LD_INT 112
22723: PUSH
22724: LD_INT 113
22726: PUSH
22727: LD_INT 114
22729: PUSH
22730: LD_INT 116
22732: PUSH
22733: LD_INT 117
22735: PUSH
22736: LD_INT 118
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: ST_TO_ADDR
22762: GO 23537
22764: LD_INT 16
22766: DOUBLE
22767: EQUAL
22768: IFTRUE 22772
22770: GO 22908
22772: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22773: LD_ADDR_VAR 0 2
22777: PUSH
22778: LD_INT 2
22780: PUSH
22781: LD_INT 4
22783: PUSH
22784: LD_INT 5
22786: PUSH
22787: LD_INT 7
22789: PUSH
22790: LD_INT 11
22792: PUSH
22793: LD_INT 12
22795: PUSH
22796: LD_INT 15
22798: PUSH
22799: LD_INT 16
22801: PUSH
22802: LD_INT 20
22804: PUSH
22805: LD_INT 21
22807: PUSH
22808: LD_INT 22
22810: PUSH
22811: LD_INT 23
22813: PUSH
22814: LD_INT 25
22816: PUSH
22817: LD_INT 26
22819: PUSH
22820: LD_INT 30
22822: PUSH
22823: LD_INT 31
22825: PUSH
22826: LD_INT 32
22828: PUSH
22829: LD_INT 33
22831: PUSH
22832: LD_INT 34
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 101
22858: PUSH
22859: LD_INT 102
22861: PUSH
22862: LD_INT 103
22864: PUSH
22865: LD_INT 106
22867: PUSH
22868: LD_INT 108
22870: PUSH
22871: LD_INT 112
22873: PUSH
22874: LD_INT 113
22876: PUSH
22877: LD_INT 114
22879: PUSH
22880: LD_INT 116
22882: PUSH
22883: LD_INT 117
22885: PUSH
22886: LD_INT 118
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: ST_TO_ADDR
22906: GO 23537
22908: LD_INT 17
22910: DOUBLE
22911: EQUAL
22912: IFTRUE 22916
22914: GO 23140
22916: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22917: LD_ADDR_VAR 0 2
22921: PUSH
22922: LD_INT 1
22924: PUSH
22925: LD_INT 2
22927: PUSH
22928: LD_INT 3
22930: PUSH
22931: LD_INT 4
22933: PUSH
22934: LD_INT 5
22936: PUSH
22937: LD_INT 6
22939: PUSH
22940: LD_INT 7
22942: PUSH
22943: LD_INT 8
22945: PUSH
22946: LD_INT 9
22948: PUSH
22949: LD_INT 10
22951: PUSH
22952: LD_INT 11
22954: PUSH
22955: LD_INT 12
22957: PUSH
22958: LD_INT 13
22960: PUSH
22961: LD_INT 14
22963: PUSH
22964: LD_INT 15
22966: PUSH
22967: LD_INT 16
22969: PUSH
22970: LD_INT 17
22972: PUSH
22973: LD_INT 18
22975: PUSH
22976: LD_INT 19
22978: PUSH
22979: LD_INT 20
22981: PUSH
22982: LD_INT 21
22984: PUSH
22985: LD_INT 22
22987: PUSH
22988: LD_INT 23
22990: PUSH
22991: LD_INT 24
22993: PUSH
22994: LD_INT 25
22996: PUSH
22997: LD_INT 26
22999: PUSH
23000: LD_INT 27
23002: PUSH
23003: LD_INT 28
23005: PUSH
23006: LD_INT 29
23008: PUSH
23009: LD_INT 30
23011: PUSH
23012: LD_INT 31
23014: PUSH
23015: LD_INT 32
23017: PUSH
23018: LD_INT 33
23020: PUSH
23021: LD_INT 34
23023: PUSH
23024: LD_INT 36
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 101
23066: PUSH
23067: LD_INT 102
23069: PUSH
23070: LD_INT 103
23072: PUSH
23073: LD_INT 104
23075: PUSH
23076: LD_INT 105
23078: PUSH
23079: LD_INT 106
23081: PUSH
23082: LD_INT 107
23084: PUSH
23085: LD_INT 108
23087: PUSH
23088: LD_INT 109
23090: PUSH
23091: LD_INT 110
23093: PUSH
23094: LD_INT 111
23096: PUSH
23097: LD_INT 112
23099: PUSH
23100: LD_INT 113
23102: PUSH
23103: LD_INT 114
23105: PUSH
23106: LD_INT 116
23108: PUSH
23109: LD_INT 117
23111: PUSH
23112: LD_INT 118
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: ST_TO_ADDR
23138: GO 23537
23140: LD_INT 18
23142: DOUBLE
23143: EQUAL
23144: IFTRUE 23148
23146: GO 23296
23148: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23149: LD_ADDR_VAR 0 2
23153: PUSH
23154: LD_INT 2
23156: PUSH
23157: LD_INT 4
23159: PUSH
23160: LD_INT 5
23162: PUSH
23163: LD_INT 7
23165: PUSH
23166: LD_INT 11
23168: PUSH
23169: LD_INT 12
23171: PUSH
23172: LD_INT 15
23174: PUSH
23175: LD_INT 16
23177: PUSH
23178: LD_INT 20
23180: PUSH
23181: LD_INT 21
23183: PUSH
23184: LD_INT 22
23186: PUSH
23187: LD_INT 23
23189: PUSH
23190: LD_INT 25
23192: PUSH
23193: LD_INT 26
23195: PUSH
23196: LD_INT 30
23198: PUSH
23199: LD_INT 31
23201: PUSH
23202: LD_INT 32
23204: PUSH
23205: LD_INT 33
23207: PUSH
23208: LD_INT 34
23210: PUSH
23211: LD_INT 35
23213: PUSH
23214: LD_INT 36
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 101
23242: PUSH
23243: LD_INT 102
23245: PUSH
23246: LD_INT 103
23248: PUSH
23249: LD_INT 106
23251: PUSH
23252: LD_INT 108
23254: PUSH
23255: LD_INT 112
23257: PUSH
23258: LD_INT 113
23260: PUSH
23261: LD_INT 114
23263: PUSH
23264: LD_INT 115
23266: PUSH
23267: LD_INT 116
23269: PUSH
23270: LD_INT 117
23272: PUSH
23273: LD_INT 118
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: ST_TO_ADDR
23294: GO 23537
23296: LD_INT 19
23298: DOUBLE
23299: EQUAL
23300: IFTRUE 23304
23302: GO 23536
23304: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23305: LD_ADDR_VAR 0 2
23309: PUSH
23310: LD_INT 1
23312: PUSH
23313: LD_INT 2
23315: PUSH
23316: LD_INT 3
23318: PUSH
23319: LD_INT 4
23321: PUSH
23322: LD_INT 5
23324: PUSH
23325: LD_INT 6
23327: PUSH
23328: LD_INT 7
23330: PUSH
23331: LD_INT 8
23333: PUSH
23334: LD_INT 9
23336: PUSH
23337: LD_INT 10
23339: PUSH
23340: LD_INT 11
23342: PUSH
23343: LD_INT 12
23345: PUSH
23346: LD_INT 13
23348: PUSH
23349: LD_INT 14
23351: PUSH
23352: LD_INT 15
23354: PUSH
23355: LD_INT 16
23357: PUSH
23358: LD_INT 17
23360: PUSH
23361: LD_INT 18
23363: PUSH
23364: LD_INT 19
23366: PUSH
23367: LD_INT 20
23369: PUSH
23370: LD_INT 21
23372: PUSH
23373: LD_INT 22
23375: PUSH
23376: LD_INT 23
23378: PUSH
23379: LD_INT 24
23381: PUSH
23382: LD_INT 25
23384: PUSH
23385: LD_INT 26
23387: PUSH
23388: LD_INT 27
23390: PUSH
23391: LD_INT 28
23393: PUSH
23394: LD_INT 29
23396: PUSH
23397: LD_INT 30
23399: PUSH
23400: LD_INT 31
23402: PUSH
23403: LD_INT 32
23405: PUSH
23406: LD_INT 33
23408: PUSH
23409: LD_INT 34
23411: PUSH
23412: LD_INT 35
23414: PUSH
23415: LD_INT 36
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 101
23458: PUSH
23459: LD_INT 102
23461: PUSH
23462: LD_INT 103
23464: PUSH
23465: LD_INT 104
23467: PUSH
23468: LD_INT 105
23470: PUSH
23471: LD_INT 106
23473: PUSH
23474: LD_INT 107
23476: PUSH
23477: LD_INT 108
23479: PUSH
23480: LD_INT 109
23482: PUSH
23483: LD_INT 110
23485: PUSH
23486: LD_INT 111
23488: PUSH
23489: LD_INT 112
23491: PUSH
23492: LD_INT 113
23494: PUSH
23495: LD_INT 114
23497: PUSH
23498: LD_INT 115
23500: PUSH
23501: LD_INT 116
23503: PUSH
23504: LD_INT 117
23506: PUSH
23507: LD_INT 118
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: ST_TO_ADDR
23534: GO 23537
23536: POP
// end else
23537: GO 23768
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23539: LD_ADDR_VAR 0 2
23543: PUSH
23544: LD_INT 1
23546: PUSH
23547: LD_INT 2
23549: PUSH
23550: LD_INT 3
23552: PUSH
23553: LD_INT 4
23555: PUSH
23556: LD_INT 5
23558: PUSH
23559: LD_INT 6
23561: PUSH
23562: LD_INT 7
23564: PUSH
23565: LD_INT 8
23567: PUSH
23568: LD_INT 9
23570: PUSH
23571: LD_INT 10
23573: PUSH
23574: LD_INT 11
23576: PUSH
23577: LD_INT 12
23579: PUSH
23580: LD_INT 13
23582: PUSH
23583: LD_INT 14
23585: PUSH
23586: LD_INT 15
23588: PUSH
23589: LD_INT 16
23591: PUSH
23592: LD_INT 17
23594: PUSH
23595: LD_INT 18
23597: PUSH
23598: LD_INT 19
23600: PUSH
23601: LD_INT 20
23603: PUSH
23604: LD_INT 21
23606: PUSH
23607: LD_INT 22
23609: PUSH
23610: LD_INT 23
23612: PUSH
23613: LD_INT 24
23615: PUSH
23616: LD_INT 25
23618: PUSH
23619: LD_INT 26
23621: PUSH
23622: LD_INT 27
23624: PUSH
23625: LD_INT 28
23627: PUSH
23628: LD_INT 29
23630: PUSH
23631: LD_INT 30
23633: PUSH
23634: LD_INT 31
23636: PUSH
23637: LD_INT 32
23639: PUSH
23640: LD_INT 33
23642: PUSH
23643: LD_INT 34
23645: PUSH
23646: LD_INT 35
23648: PUSH
23649: LD_INT 36
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 101
23692: PUSH
23693: LD_INT 102
23695: PUSH
23696: LD_INT 103
23698: PUSH
23699: LD_INT 104
23701: PUSH
23702: LD_INT 105
23704: PUSH
23705: LD_INT 106
23707: PUSH
23708: LD_INT 107
23710: PUSH
23711: LD_INT 108
23713: PUSH
23714: LD_INT 109
23716: PUSH
23717: LD_INT 110
23719: PUSH
23720: LD_INT 111
23722: PUSH
23723: LD_INT 112
23725: PUSH
23726: LD_INT 113
23728: PUSH
23729: LD_INT 114
23731: PUSH
23732: LD_INT 115
23734: PUSH
23735: LD_INT 116
23737: PUSH
23738: LD_INT 117
23740: PUSH
23741: LD_INT 118
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: ST_TO_ADDR
// if result then
23768: LD_VAR 0 2
23772: IFFALSE 24558
// begin normal :=  ;
23774: LD_ADDR_VAR 0 5
23778: PUSH
23779: LD_STRING 
23781: ST_TO_ADDR
// hardcore :=  ;
23782: LD_ADDR_VAR 0 6
23786: PUSH
23787: LD_STRING 
23789: ST_TO_ADDR
// active :=  ;
23790: LD_ADDR_VAR 0 7
23794: PUSH
23795: LD_STRING 
23797: ST_TO_ADDR
// for i = 1 to normalCounter do
23798: LD_ADDR_VAR 0 8
23802: PUSH
23803: DOUBLE
23804: LD_INT 1
23806: DEC
23807: ST_TO_ADDR
23808: LD_EXP 63
23812: PUSH
23813: FOR_TO
23814: IFFALSE 23915
// begin tmp := 0 ;
23816: LD_ADDR_VAR 0 3
23820: PUSH
23821: LD_STRING 0
23823: ST_TO_ADDR
// if result [ 1 ] then
23824: LD_VAR 0 2
23828: PUSH
23829: LD_INT 1
23831: ARRAY
23832: IFFALSE 23897
// if result [ 1 ] [ 1 ] = i then
23834: LD_VAR 0 2
23838: PUSH
23839: LD_INT 1
23841: ARRAY
23842: PUSH
23843: LD_INT 1
23845: ARRAY
23846: PUSH
23847: LD_VAR 0 8
23851: EQUAL
23852: IFFALSE 23897
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23854: LD_ADDR_VAR 0 2
23858: PUSH
23859: LD_VAR 0 2
23863: PPUSH
23864: LD_INT 1
23866: PPUSH
23867: LD_VAR 0 2
23871: PUSH
23872: LD_INT 1
23874: ARRAY
23875: PPUSH
23876: LD_INT 1
23878: PPUSH
23879: CALL_OW 3
23883: PPUSH
23884: CALL_OW 1
23888: ST_TO_ADDR
// tmp := 1 ;
23889: LD_ADDR_VAR 0 3
23893: PUSH
23894: LD_STRING 1
23896: ST_TO_ADDR
// end ; normal := normal & tmp ;
23897: LD_ADDR_VAR 0 5
23901: PUSH
23902: LD_VAR 0 5
23906: PUSH
23907: LD_VAR 0 3
23911: STR
23912: ST_TO_ADDR
// end ;
23913: GO 23813
23915: POP
23916: POP
// for i = 1 to hardcoreCounter do
23917: LD_ADDR_VAR 0 8
23921: PUSH
23922: DOUBLE
23923: LD_INT 1
23925: DEC
23926: ST_TO_ADDR
23927: LD_EXP 64
23931: PUSH
23932: FOR_TO
23933: IFFALSE 24038
// begin tmp := 0 ;
23935: LD_ADDR_VAR 0 3
23939: PUSH
23940: LD_STRING 0
23942: ST_TO_ADDR
// if result [ 2 ] then
23943: LD_VAR 0 2
23947: PUSH
23948: LD_INT 2
23950: ARRAY
23951: IFFALSE 24020
// if result [ 2 ] [ 1 ] = 100 + i then
23953: LD_VAR 0 2
23957: PUSH
23958: LD_INT 2
23960: ARRAY
23961: PUSH
23962: LD_INT 1
23964: ARRAY
23965: PUSH
23966: LD_INT 100
23968: PUSH
23969: LD_VAR 0 8
23973: PLUS
23974: EQUAL
23975: IFFALSE 24020
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23977: LD_ADDR_VAR 0 2
23981: PUSH
23982: LD_VAR 0 2
23986: PPUSH
23987: LD_INT 2
23989: PPUSH
23990: LD_VAR 0 2
23994: PUSH
23995: LD_INT 2
23997: ARRAY
23998: PPUSH
23999: LD_INT 1
24001: PPUSH
24002: CALL_OW 3
24006: PPUSH
24007: CALL_OW 1
24011: ST_TO_ADDR
// tmp := 1 ;
24012: LD_ADDR_VAR 0 3
24016: PUSH
24017: LD_STRING 1
24019: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24020: LD_ADDR_VAR 0 6
24024: PUSH
24025: LD_VAR 0 6
24029: PUSH
24030: LD_VAR 0 3
24034: STR
24035: ST_TO_ADDR
// end ;
24036: GO 23932
24038: POP
24039: POP
// if isGameLoad then
24040: LD_VAR 0 1
24044: IFFALSE 24519
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24046: LD_ADDR_VAR 0 4
24050: PUSH
24051: LD_EXP 67
24055: PUSH
24056: LD_EXP 66
24060: PUSH
24061: LD_EXP 68
24065: PUSH
24066: LD_EXP 65
24070: PUSH
24071: LD_EXP 69
24075: PUSH
24076: LD_EXP 70
24080: PUSH
24081: LD_EXP 71
24085: PUSH
24086: LD_EXP 72
24090: PUSH
24091: LD_EXP 73
24095: PUSH
24096: LD_EXP 74
24100: PUSH
24101: LD_EXP 75
24105: PUSH
24106: LD_EXP 76
24110: PUSH
24111: LD_EXP 77
24115: PUSH
24116: LD_EXP 78
24120: PUSH
24121: LD_EXP 86
24125: PUSH
24126: LD_EXP 87
24130: PUSH
24131: LD_EXP 88
24135: PUSH
24136: LD_EXP 89
24140: PUSH
24141: LD_EXP 91
24145: PUSH
24146: LD_EXP 92
24150: PUSH
24151: LD_EXP 93
24155: PUSH
24156: LD_EXP 96
24160: PUSH
24161: LD_EXP 98
24165: PUSH
24166: LD_EXP 99
24170: PUSH
24171: LD_EXP 100
24175: PUSH
24176: LD_EXP 102
24180: PUSH
24181: LD_EXP 103
24185: PUSH
24186: LD_EXP 106
24190: PUSH
24191: LD_EXP 107
24195: PUSH
24196: LD_EXP 108
24200: PUSH
24201: LD_EXP 109
24205: PUSH
24206: LD_EXP 110
24210: PUSH
24211: LD_EXP 111
24215: PUSH
24216: LD_EXP 112
24220: PUSH
24221: LD_EXP 113
24225: PUSH
24226: LD_EXP 114
24230: PUSH
24231: LD_EXP 79
24235: PUSH
24236: LD_EXP 80
24240: PUSH
24241: LD_EXP 83
24245: PUSH
24246: LD_EXP 84
24250: PUSH
24251: LD_EXP 85
24255: PUSH
24256: LD_EXP 81
24260: PUSH
24261: LD_EXP 82
24265: PUSH
24266: LD_EXP 90
24270: PUSH
24271: LD_EXP 94
24275: PUSH
24276: LD_EXP 95
24280: PUSH
24281: LD_EXP 97
24285: PUSH
24286: LD_EXP 101
24290: PUSH
24291: LD_EXP 104
24295: PUSH
24296: LD_EXP 105
24300: PUSH
24301: LD_EXP 115
24305: PUSH
24306: LD_EXP 116
24310: PUSH
24311: LD_EXP 117
24315: PUSH
24316: LD_EXP 118
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: ST_TO_ADDR
// tmp :=  ;
24377: LD_ADDR_VAR 0 3
24381: PUSH
24382: LD_STRING 
24384: ST_TO_ADDR
// for i = 1 to normalCounter do
24385: LD_ADDR_VAR 0 8
24389: PUSH
24390: DOUBLE
24391: LD_INT 1
24393: DEC
24394: ST_TO_ADDR
24395: LD_EXP 63
24399: PUSH
24400: FOR_TO
24401: IFFALSE 24437
// begin if flags [ i ] then
24403: LD_VAR 0 4
24407: PUSH
24408: LD_VAR 0 8
24412: ARRAY
24413: IFFALSE 24435
// tmp := tmp & i & ; ;
24415: LD_ADDR_VAR 0 3
24419: PUSH
24420: LD_VAR 0 3
24424: PUSH
24425: LD_VAR 0 8
24429: STR
24430: PUSH
24431: LD_STRING ;
24433: STR
24434: ST_TO_ADDR
// end ;
24435: GO 24400
24437: POP
24438: POP
// for i = 1 to hardcoreCounter do
24439: LD_ADDR_VAR 0 8
24443: PUSH
24444: DOUBLE
24445: LD_INT 1
24447: DEC
24448: ST_TO_ADDR
24449: LD_EXP 64
24453: PUSH
24454: FOR_TO
24455: IFFALSE 24501
// begin if flags [ normalCounter + i ] then
24457: LD_VAR 0 4
24461: PUSH
24462: LD_EXP 63
24466: PUSH
24467: LD_VAR 0 8
24471: PLUS
24472: ARRAY
24473: IFFALSE 24499
// tmp := tmp & ( 100 + i ) & ; ;
24475: LD_ADDR_VAR 0 3
24479: PUSH
24480: LD_VAR 0 3
24484: PUSH
24485: LD_INT 100
24487: PUSH
24488: LD_VAR 0 8
24492: PLUS
24493: STR
24494: PUSH
24495: LD_STRING ;
24497: STR
24498: ST_TO_ADDR
// end ;
24499: GO 24454
24501: POP
24502: POP
// if tmp then
24503: LD_VAR 0 3
24507: IFFALSE 24519
// active := tmp ;
24509: LD_ADDR_VAR 0 7
24513: PUSH
24514: LD_VAR 0 3
24518: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24519: LD_STRING getStreamItemsFromMission("
24521: PUSH
24522: LD_VAR 0 5
24526: STR
24527: PUSH
24528: LD_STRING ","
24530: STR
24531: PUSH
24532: LD_VAR 0 6
24536: STR
24537: PUSH
24538: LD_STRING ","
24540: STR
24541: PUSH
24542: LD_VAR 0 7
24546: STR
24547: PUSH
24548: LD_STRING ")
24550: STR
24551: PPUSH
24552: CALL_OW 559
// end else
24556: GO 24565
// ToLua ( getStreamItemsFromMission("","","") ) ;
24558: LD_STRING getStreamItemsFromMission("","","")
24560: PPUSH
24561: CALL_OW 559
// end ;
24565: LD_VAR 0 2
24569: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24570: LD_EXP 62
24574: PUSH
24575: LD_EXP 67
24579: AND
24580: IFFALSE 24704
24582: GO 24584
24584: DISABLE
24585: LD_INT 0
24587: PPUSH
24588: PPUSH
// begin enable ;
24589: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24590: LD_ADDR_VAR 0 2
24594: PUSH
24595: LD_INT 22
24597: PUSH
24598: LD_OWVAR 2
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 2
24609: PUSH
24610: LD_INT 34
24612: PUSH
24613: LD_INT 7
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 34
24622: PUSH
24623: LD_INT 45
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 34
24632: PUSH
24633: LD_INT 28
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 34
24642: PUSH
24643: LD_INT 47
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PPUSH
24661: CALL_OW 69
24665: ST_TO_ADDR
// if not tmp then
24666: LD_VAR 0 2
24670: NOT
24671: IFFALSE 24675
// exit ;
24673: GO 24704
// for i in tmp do
24675: LD_ADDR_VAR 0 1
24679: PUSH
24680: LD_VAR 0 2
24684: PUSH
24685: FOR_IN
24686: IFFALSE 24702
// begin SetLives ( i , 0 ) ;
24688: LD_VAR 0 1
24692: PPUSH
24693: LD_INT 0
24695: PPUSH
24696: CALL_OW 234
// end ;
24700: GO 24685
24702: POP
24703: POP
// end ;
24704: PPOPN 2
24706: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24707: LD_EXP 62
24711: PUSH
24712: LD_EXP 68
24716: AND
24717: IFFALSE 24801
24719: GO 24721
24721: DISABLE
24722: LD_INT 0
24724: PPUSH
24725: PPUSH
// begin enable ;
24726: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24727: LD_ADDR_VAR 0 2
24731: PUSH
24732: LD_INT 22
24734: PUSH
24735: LD_OWVAR 2
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 32
24746: PUSH
24747: LD_INT 3
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PPUSH
24758: CALL_OW 69
24762: ST_TO_ADDR
// if not tmp then
24763: LD_VAR 0 2
24767: NOT
24768: IFFALSE 24772
// exit ;
24770: GO 24801
// for i in tmp do
24772: LD_ADDR_VAR 0 1
24776: PUSH
24777: LD_VAR 0 2
24781: PUSH
24782: FOR_IN
24783: IFFALSE 24799
// begin SetLives ( i , 0 ) ;
24785: LD_VAR 0 1
24789: PPUSH
24790: LD_INT 0
24792: PPUSH
24793: CALL_OW 234
// end ;
24797: GO 24782
24799: POP
24800: POP
// end ;
24801: PPOPN 2
24803: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24804: LD_EXP 62
24808: PUSH
24809: LD_EXP 65
24813: AND
24814: IFFALSE 24907
24816: GO 24818
24818: DISABLE
24819: LD_INT 0
24821: PPUSH
// begin enable ;
24822: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24823: LD_ADDR_VAR 0 1
24827: PUSH
24828: LD_INT 22
24830: PUSH
24831: LD_OWVAR 2
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 2
24842: PUSH
24843: LD_INT 25
24845: PUSH
24846: LD_INT 5
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 25
24855: PUSH
24856: LD_INT 9
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 25
24865: PUSH
24866: LD_INT 8
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PPUSH
24883: CALL_OW 69
24887: PUSH
24888: FOR_IN
24889: IFFALSE 24905
// begin SetClass ( i , 1 ) ;
24891: LD_VAR 0 1
24895: PPUSH
24896: LD_INT 1
24898: PPUSH
24899: CALL_OW 336
// end ;
24903: GO 24888
24905: POP
24906: POP
// end ;
24907: PPOPN 1
24909: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24910: LD_EXP 62
24914: PUSH
24915: LD_EXP 66
24919: AND
24920: PUSH
24921: LD_OWVAR 65
24925: PUSH
24926: LD_INT 7
24928: LESS
24929: AND
24930: IFFALSE 24944
24932: GO 24934
24934: DISABLE
// begin enable ;
24935: ENABLE
// game_speed := 7 ;
24936: LD_ADDR_OWVAR 65
24940: PUSH
24941: LD_INT 7
24943: ST_TO_ADDR
// end ;
24944: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24945: LD_EXP 62
24949: PUSH
24950: LD_EXP 69
24954: AND
24955: IFFALSE 25157
24957: GO 24959
24959: DISABLE
24960: LD_INT 0
24962: PPUSH
24963: PPUSH
24964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24965: LD_ADDR_VAR 0 3
24969: PUSH
24970: LD_INT 81
24972: PUSH
24973: LD_OWVAR 2
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 21
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PPUSH
24996: CALL_OW 69
25000: ST_TO_ADDR
// if not tmp then
25001: LD_VAR 0 3
25005: NOT
25006: IFFALSE 25010
// exit ;
25008: GO 25157
// if tmp > 5 then
25010: LD_VAR 0 3
25014: PUSH
25015: LD_INT 5
25017: GREATER
25018: IFFALSE 25030
// k := 5 else
25020: LD_ADDR_VAR 0 2
25024: PUSH
25025: LD_INT 5
25027: ST_TO_ADDR
25028: GO 25040
// k := tmp ;
25030: LD_ADDR_VAR 0 2
25034: PUSH
25035: LD_VAR 0 3
25039: ST_TO_ADDR
// for i := 1 to k do
25040: LD_ADDR_VAR 0 1
25044: PUSH
25045: DOUBLE
25046: LD_INT 1
25048: DEC
25049: ST_TO_ADDR
25050: LD_VAR 0 2
25054: PUSH
25055: FOR_TO
25056: IFFALSE 25155
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25058: LD_VAR 0 3
25062: PUSH
25063: LD_VAR 0 1
25067: ARRAY
25068: PPUSH
25069: LD_VAR 0 1
25073: PUSH
25074: LD_INT 4
25076: MOD
25077: PUSH
25078: LD_INT 1
25080: PLUS
25081: PPUSH
25082: CALL_OW 259
25086: PUSH
25087: LD_INT 10
25089: LESS
25090: IFFALSE 25153
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25092: LD_VAR 0 3
25096: PUSH
25097: LD_VAR 0 1
25101: ARRAY
25102: PPUSH
25103: LD_VAR 0 1
25107: PUSH
25108: LD_INT 4
25110: MOD
25111: PUSH
25112: LD_INT 1
25114: PLUS
25115: PPUSH
25116: LD_VAR 0 3
25120: PUSH
25121: LD_VAR 0 1
25125: ARRAY
25126: PPUSH
25127: LD_VAR 0 1
25131: PUSH
25132: LD_INT 4
25134: MOD
25135: PUSH
25136: LD_INT 1
25138: PLUS
25139: PPUSH
25140: CALL_OW 259
25144: PUSH
25145: LD_INT 1
25147: PLUS
25148: PPUSH
25149: CALL_OW 237
25153: GO 25055
25155: POP
25156: POP
// end ;
25157: PPOPN 3
25159: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25160: LD_EXP 62
25164: PUSH
25165: LD_EXP 70
25169: AND
25170: IFFALSE 25190
25172: GO 25174
25174: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25175: LD_INT 4
25177: PPUSH
25178: LD_OWVAR 2
25182: PPUSH
25183: LD_INT 0
25185: PPUSH
25186: CALL_OW 324
25190: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25191: LD_EXP 62
25195: PUSH
25196: LD_EXP 99
25200: AND
25201: IFFALSE 25221
25203: GO 25205
25205: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25206: LD_INT 19
25208: PPUSH
25209: LD_OWVAR 2
25213: PPUSH
25214: LD_INT 0
25216: PPUSH
25217: CALL_OW 324
25221: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25222: LD_EXP 62
25226: PUSH
25227: LD_EXP 71
25231: AND
25232: IFFALSE 25334
25234: GO 25236
25236: DISABLE
25237: LD_INT 0
25239: PPUSH
25240: PPUSH
// begin enable ;
25241: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25242: LD_ADDR_VAR 0 2
25246: PUSH
25247: LD_INT 22
25249: PUSH
25250: LD_OWVAR 2
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 2
25261: PUSH
25262: LD_INT 34
25264: PUSH
25265: LD_INT 11
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 34
25274: PUSH
25275: LD_INT 30
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: LIST
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PPUSH
25291: CALL_OW 69
25295: ST_TO_ADDR
// if not tmp then
25296: LD_VAR 0 2
25300: NOT
25301: IFFALSE 25305
// exit ;
25303: GO 25334
// for i in tmp do
25305: LD_ADDR_VAR 0 1
25309: PUSH
25310: LD_VAR 0 2
25314: PUSH
25315: FOR_IN
25316: IFFALSE 25332
// begin SetLives ( i , 0 ) ;
25318: LD_VAR 0 1
25322: PPUSH
25323: LD_INT 0
25325: PPUSH
25326: CALL_OW 234
// end ;
25330: GO 25315
25332: POP
25333: POP
// end ;
25334: PPOPN 2
25336: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25337: LD_EXP 62
25341: PUSH
25342: LD_EXP 72
25346: AND
25347: IFFALSE 25367
25349: GO 25351
25351: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25352: LD_INT 32
25354: PPUSH
25355: LD_OWVAR 2
25359: PPUSH
25360: LD_INT 0
25362: PPUSH
25363: CALL_OW 324
25367: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25368: LD_EXP 62
25372: PUSH
25373: LD_EXP 73
25377: AND
25378: IFFALSE 25559
25380: GO 25382
25382: DISABLE
25383: LD_INT 0
25385: PPUSH
25386: PPUSH
25387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25388: LD_ADDR_VAR 0 2
25392: PUSH
25393: LD_INT 22
25395: PUSH
25396: LD_OWVAR 2
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 33
25407: PUSH
25408: LD_INT 3
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PPUSH
25419: CALL_OW 69
25423: ST_TO_ADDR
// if not tmp then
25424: LD_VAR 0 2
25428: NOT
25429: IFFALSE 25433
// exit ;
25431: GO 25559
// side := 0 ;
25433: LD_ADDR_VAR 0 3
25437: PUSH
25438: LD_INT 0
25440: ST_TO_ADDR
// for i := 1 to 8 do
25441: LD_ADDR_VAR 0 1
25445: PUSH
25446: DOUBLE
25447: LD_INT 1
25449: DEC
25450: ST_TO_ADDR
25451: LD_INT 8
25453: PUSH
25454: FOR_TO
25455: IFFALSE 25503
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25457: LD_OWVAR 2
25461: PUSH
25462: LD_VAR 0 1
25466: NONEQUAL
25467: PUSH
25468: LD_OWVAR 2
25472: PPUSH
25473: LD_VAR 0 1
25477: PPUSH
25478: CALL_OW 81
25482: PUSH
25483: LD_INT 2
25485: EQUAL
25486: AND
25487: IFFALSE 25501
// begin side := i ;
25489: LD_ADDR_VAR 0 3
25493: PUSH
25494: LD_VAR 0 1
25498: ST_TO_ADDR
// break ;
25499: GO 25503
// end ;
25501: GO 25454
25503: POP
25504: POP
// if not side then
25505: LD_VAR 0 3
25509: NOT
25510: IFFALSE 25514
// exit ;
25512: GO 25559
// for i := 1 to tmp do
25514: LD_ADDR_VAR 0 1
25518: PUSH
25519: DOUBLE
25520: LD_INT 1
25522: DEC
25523: ST_TO_ADDR
25524: LD_VAR 0 2
25528: PUSH
25529: FOR_TO
25530: IFFALSE 25557
// if Prob ( 60 ) then
25532: LD_INT 60
25534: PPUSH
25535: CALL_OW 13
25539: IFFALSE 25555
// SetSide ( i , side ) ;
25541: LD_VAR 0 1
25545: PPUSH
25546: LD_VAR 0 3
25550: PPUSH
25551: CALL_OW 235
25555: GO 25529
25557: POP
25558: POP
// end ;
25559: PPOPN 3
25561: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25562: LD_EXP 62
25566: PUSH
25567: LD_EXP 75
25571: AND
25572: IFFALSE 25691
25574: GO 25576
25576: DISABLE
25577: LD_INT 0
25579: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25580: LD_ADDR_VAR 0 1
25584: PUSH
25585: LD_INT 22
25587: PUSH
25588: LD_OWVAR 2
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 21
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 3
25609: PUSH
25610: LD_INT 23
25612: PUSH
25613: LD_INT 0
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: LIST
25628: PPUSH
25629: CALL_OW 69
25633: PUSH
25634: FOR_IN
25635: IFFALSE 25689
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25637: LD_VAR 0 1
25641: PPUSH
25642: CALL_OW 257
25646: PUSH
25647: LD_INT 1
25649: PUSH
25650: LD_INT 2
25652: PUSH
25653: LD_INT 3
25655: PUSH
25656: LD_INT 4
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: IN
25665: IFFALSE 25687
// SetClass ( un , rand ( 1 , 4 ) ) ;
25667: LD_VAR 0 1
25671: PPUSH
25672: LD_INT 1
25674: PPUSH
25675: LD_INT 4
25677: PPUSH
25678: CALL_OW 12
25682: PPUSH
25683: CALL_OW 336
25687: GO 25634
25689: POP
25690: POP
// end ;
25691: PPOPN 1
25693: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25694: LD_EXP 62
25698: PUSH
25699: LD_EXP 74
25703: AND
25704: IFFALSE 25783
25706: GO 25708
25708: DISABLE
25709: LD_INT 0
25711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25712: LD_ADDR_VAR 0 1
25716: PUSH
25717: LD_INT 22
25719: PUSH
25720: LD_OWVAR 2
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 21
25731: PUSH
25732: LD_INT 3
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PPUSH
25743: CALL_OW 69
25747: ST_TO_ADDR
// if not tmp then
25748: LD_VAR 0 1
25752: NOT
25753: IFFALSE 25757
// exit ;
25755: GO 25783
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25757: LD_VAR 0 1
25761: PUSH
25762: LD_INT 1
25764: PPUSH
25765: LD_VAR 0 1
25769: PPUSH
25770: CALL_OW 12
25774: ARRAY
25775: PPUSH
25776: LD_INT 100
25778: PPUSH
25779: CALL_OW 234
// end ;
25783: PPOPN 1
25785: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25786: LD_EXP 62
25790: PUSH
25791: LD_EXP 76
25795: AND
25796: IFFALSE 25894
25798: GO 25800
25800: DISABLE
25801: LD_INT 0
25803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25804: LD_ADDR_VAR 0 1
25808: PUSH
25809: LD_INT 22
25811: PUSH
25812: LD_OWVAR 2
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 21
25823: PUSH
25824: LD_INT 1
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PPUSH
25835: CALL_OW 69
25839: ST_TO_ADDR
// if not tmp then
25840: LD_VAR 0 1
25844: NOT
25845: IFFALSE 25849
// exit ;
25847: GO 25894
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25849: LD_VAR 0 1
25853: PUSH
25854: LD_INT 1
25856: PPUSH
25857: LD_VAR 0 1
25861: PPUSH
25862: CALL_OW 12
25866: ARRAY
25867: PPUSH
25868: LD_INT 1
25870: PPUSH
25871: LD_INT 4
25873: PPUSH
25874: CALL_OW 12
25878: PPUSH
25879: LD_INT 3000
25881: PPUSH
25882: LD_INT 9000
25884: PPUSH
25885: CALL_OW 12
25889: PPUSH
25890: CALL_OW 492
// end ;
25894: PPOPN 1
25896: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25897: LD_EXP 62
25901: PUSH
25902: LD_EXP 77
25906: AND
25907: IFFALSE 25927
25909: GO 25911
25911: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25912: LD_INT 1
25914: PPUSH
25915: LD_OWVAR 2
25919: PPUSH
25920: LD_INT 0
25922: PPUSH
25923: CALL_OW 324
25927: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25928: LD_EXP 62
25932: PUSH
25933: LD_EXP 78
25937: AND
25938: IFFALSE 26021
25940: GO 25942
25942: DISABLE
25943: LD_INT 0
25945: PPUSH
25946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25947: LD_ADDR_VAR 0 2
25951: PUSH
25952: LD_INT 22
25954: PUSH
25955: LD_OWVAR 2
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 21
25966: PUSH
25967: LD_INT 3
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PPUSH
25978: CALL_OW 69
25982: ST_TO_ADDR
// if not tmp then
25983: LD_VAR 0 2
25987: NOT
25988: IFFALSE 25992
// exit ;
25990: GO 26021
// for i in tmp do
25992: LD_ADDR_VAR 0 1
25996: PUSH
25997: LD_VAR 0 2
26001: PUSH
26002: FOR_IN
26003: IFFALSE 26019
// SetBLevel ( i , 10 ) ;
26005: LD_VAR 0 1
26009: PPUSH
26010: LD_INT 10
26012: PPUSH
26013: CALL_OW 241
26017: GO 26002
26019: POP
26020: POP
// end ;
26021: PPOPN 2
26023: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26024: LD_EXP 62
26028: PUSH
26029: LD_EXP 79
26033: AND
26034: IFFALSE 26145
26036: GO 26038
26038: DISABLE
26039: LD_INT 0
26041: PPUSH
26042: PPUSH
26043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26044: LD_ADDR_VAR 0 3
26048: PUSH
26049: LD_INT 22
26051: PUSH
26052: LD_OWVAR 2
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 25
26063: PUSH
26064: LD_INT 1
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PPUSH
26075: CALL_OW 69
26079: ST_TO_ADDR
// if not tmp then
26080: LD_VAR 0 3
26084: NOT
26085: IFFALSE 26089
// exit ;
26087: GO 26145
// un := tmp [ rand ( 1 , tmp ) ] ;
26089: LD_ADDR_VAR 0 2
26093: PUSH
26094: LD_VAR 0 3
26098: PUSH
26099: LD_INT 1
26101: PPUSH
26102: LD_VAR 0 3
26106: PPUSH
26107: CALL_OW 12
26111: ARRAY
26112: ST_TO_ADDR
// if Crawls ( un ) then
26113: LD_VAR 0 2
26117: PPUSH
26118: CALL_OW 318
26122: IFFALSE 26133
// ComWalk ( un ) ;
26124: LD_VAR 0 2
26128: PPUSH
26129: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26133: LD_VAR 0 2
26137: PPUSH
26138: LD_INT 5
26140: PPUSH
26141: CALL_OW 336
// end ;
26145: PPOPN 3
26147: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26148: LD_EXP 62
26152: PUSH
26153: LD_EXP 80
26157: AND
26158: PUSH
26159: LD_OWVAR 67
26163: PUSH
26164: LD_INT 4
26166: LESS
26167: AND
26168: IFFALSE 26187
26170: GO 26172
26172: DISABLE
// begin Difficulty := Difficulty + 1 ;
26173: LD_ADDR_OWVAR 67
26177: PUSH
26178: LD_OWVAR 67
26182: PUSH
26183: LD_INT 1
26185: PLUS
26186: ST_TO_ADDR
// end ;
26187: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26188: LD_EXP 62
26192: PUSH
26193: LD_EXP 81
26197: AND
26198: IFFALSE 26301
26200: GO 26202
26202: DISABLE
26203: LD_INT 0
26205: PPUSH
// begin for i := 1 to 5 do
26206: LD_ADDR_VAR 0 1
26210: PUSH
26211: DOUBLE
26212: LD_INT 1
26214: DEC
26215: ST_TO_ADDR
26216: LD_INT 5
26218: PUSH
26219: FOR_TO
26220: IFFALSE 26299
// begin uc_nation := nation_nature ;
26222: LD_ADDR_OWVAR 21
26226: PUSH
26227: LD_INT 0
26229: ST_TO_ADDR
// uc_side := 0 ;
26230: LD_ADDR_OWVAR 20
26234: PUSH
26235: LD_INT 0
26237: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26238: LD_ADDR_OWVAR 29
26242: PUSH
26243: LD_INT 12
26245: PUSH
26246: LD_INT 12
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: ST_TO_ADDR
// hc_agressivity := 20 ;
26253: LD_ADDR_OWVAR 35
26257: PUSH
26258: LD_INT 20
26260: ST_TO_ADDR
// hc_class := class_tiger ;
26261: LD_ADDR_OWVAR 28
26265: PUSH
26266: LD_INT 14
26268: ST_TO_ADDR
// hc_gallery :=  ;
26269: LD_ADDR_OWVAR 33
26273: PUSH
26274: LD_STRING 
26276: ST_TO_ADDR
// hc_name :=  ;
26277: LD_ADDR_OWVAR 26
26281: PUSH
26282: LD_STRING 
26284: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26285: CALL_OW 44
26289: PPUSH
26290: LD_INT 0
26292: PPUSH
26293: CALL_OW 51
// end ;
26297: GO 26219
26299: POP
26300: POP
// end ;
26301: PPOPN 1
26303: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26304: LD_EXP 62
26308: PUSH
26309: LD_EXP 82
26313: AND
26314: IFFALSE 26323
26316: GO 26318
26318: DISABLE
// StreamSibBomb ;
26319: CALL 26324 0 0
26323: END
// export function StreamSibBomb ; var i , x , y ; begin
26324: LD_INT 0
26326: PPUSH
26327: PPUSH
26328: PPUSH
26329: PPUSH
// result := false ;
26330: LD_ADDR_VAR 0 1
26334: PUSH
26335: LD_INT 0
26337: ST_TO_ADDR
// for i := 1 to 16 do
26338: LD_ADDR_VAR 0 2
26342: PUSH
26343: DOUBLE
26344: LD_INT 1
26346: DEC
26347: ST_TO_ADDR
26348: LD_INT 16
26350: PUSH
26351: FOR_TO
26352: IFFALSE 26551
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26354: LD_ADDR_VAR 0 3
26358: PUSH
26359: LD_INT 10
26361: PUSH
26362: LD_INT 20
26364: PUSH
26365: LD_INT 30
26367: PUSH
26368: LD_INT 40
26370: PUSH
26371: LD_INT 50
26373: PUSH
26374: LD_INT 60
26376: PUSH
26377: LD_INT 70
26379: PUSH
26380: LD_INT 80
26382: PUSH
26383: LD_INT 90
26385: PUSH
26386: LD_INT 100
26388: PUSH
26389: LD_INT 110
26391: PUSH
26392: LD_INT 120
26394: PUSH
26395: LD_INT 130
26397: PUSH
26398: LD_INT 140
26400: PUSH
26401: LD_INT 150
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 1
26423: PPUSH
26424: LD_INT 15
26426: PPUSH
26427: CALL_OW 12
26431: ARRAY
26432: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26433: LD_ADDR_VAR 0 4
26437: PUSH
26438: LD_INT 10
26440: PUSH
26441: LD_INT 20
26443: PUSH
26444: LD_INT 30
26446: PUSH
26447: LD_INT 40
26449: PUSH
26450: LD_INT 50
26452: PUSH
26453: LD_INT 60
26455: PUSH
26456: LD_INT 70
26458: PUSH
26459: LD_INT 80
26461: PUSH
26462: LD_INT 90
26464: PUSH
26465: LD_INT 100
26467: PUSH
26468: LD_INT 110
26470: PUSH
26471: LD_INT 120
26473: PUSH
26474: LD_INT 130
26476: PUSH
26477: LD_INT 140
26479: PUSH
26480: LD_INT 150
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 1
26502: PPUSH
26503: LD_INT 15
26505: PPUSH
26506: CALL_OW 12
26510: ARRAY
26511: ST_TO_ADDR
// if ValidHex ( x , y ) then
26512: LD_VAR 0 3
26516: PPUSH
26517: LD_VAR 0 4
26521: PPUSH
26522: CALL_OW 488
26526: IFFALSE 26549
// begin result := [ x , y ] ;
26528: LD_ADDR_VAR 0 1
26532: PUSH
26533: LD_VAR 0 3
26537: PUSH
26538: LD_VAR 0 4
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: ST_TO_ADDR
// break ;
26547: GO 26551
// end ; end ;
26549: GO 26351
26551: POP
26552: POP
// if result then
26553: LD_VAR 0 1
26557: IFFALSE 26617
// begin ToLua ( playSibBomb() ) ;
26559: LD_STRING playSibBomb()
26561: PPUSH
26562: CALL_OW 559
// wait ( 0 0$14 ) ;
26566: LD_INT 490
26568: PPUSH
26569: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26573: LD_VAR 0 1
26577: PUSH
26578: LD_INT 1
26580: ARRAY
26581: PPUSH
26582: LD_VAR 0 1
26586: PUSH
26587: LD_INT 2
26589: ARRAY
26590: PPUSH
26591: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26595: LD_VAR 0 1
26599: PUSH
26600: LD_INT 1
26602: ARRAY
26603: PPUSH
26604: LD_VAR 0 1
26608: PUSH
26609: LD_INT 2
26611: ARRAY
26612: PPUSH
26613: CALL_OW 429
// end ; end ;
26617: LD_VAR 0 1
26621: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26622: LD_EXP 62
26626: PUSH
26627: LD_EXP 84
26631: AND
26632: IFFALSE 26644
26634: GO 26636
26636: DISABLE
// YouLost (  ) ;
26637: LD_STRING 
26639: PPUSH
26640: CALL_OW 104
26644: END
// every 0 0$1 trigger StreamModeActive and sFog do
26645: LD_EXP 62
26649: PUSH
26650: LD_EXP 83
26654: AND
26655: IFFALSE 26669
26657: GO 26659
26659: DISABLE
// FogOff ( your_side ) ;
26660: LD_OWVAR 2
26664: PPUSH
26665: CALL_OW 344
26669: END
// every 0 0$1 trigger StreamModeActive and sSun do
26670: LD_EXP 62
26674: PUSH
26675: LD_EXP 85
26679: AND
26680: IFFALSE 26708
26682: GO 26684
26684: DISABLE
// begin solar_recharge_percent := 0 ;
26685: LD_ADDR_OWVAR 79
26689: PUSH
26690: LD_INT 0
26692: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26693: LD_INT 10500
26695: PPUSH
26696: CALL_OW 67
// solar_recharge_percent := 100 ;
26700: LD_ADDR_OWVAR 79
26704: PUSH
26705: LD_INT 100
26707: ST_TO_ADDR
// end ;
26708: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26709: LD_EXP 62
26713: PUSH
26714: LD_EXP 86
26718: AND
26719: IFFALSE 26958
26721: GO 26723
26723: DISABLE
26724: LD_INT 0
26726: PPUSH
26727: PPUSH
26728: PPUSH
// begin tmp := [ ] ;
26729: LD_ADDR_VAR 0 3
26733: PUSH
26734: EMPTY
26735: ST_TO_ADDR
// for i := 1 to 6 do
26736: LD_ADDR_VAR 0 1
26740: PUSH
26741: DOUBLE
26742: LD_INT 1
26744: DEC
26745: ST_TO_ADDR
26746: LD_INT 6
26748: PUSH
26749: FOR_TO
26750: IFFALSE 26855
// begin uc_nation := nation_nature ;
26752: LD_ADDR_OWVAR 21
26756: PUSH
26757: LD_INT 0
26759: ST_TO_ADDR
// uc_side := 0 ;
26760: LD_ADDR_OWVAR 20
26764: PUSH
26765: LD_INT 0
26767: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26768: LD_ADDR_OWVAR 29
26772: PUSH
26773: LD_INT 12
26775: PUSH
26776: LD_INT 12
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: ST_TO_ADDR
// hc_agressivity := 20 ;
26783: LD_ADDR_OWVAR 35
26787: PUSH
26788: LD_INT 20
26790: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26791: LD_ADDR_OWVAR 28
26795: PUSH
26796: LD_INT 17
26798: ST_TO_ADDR
// hc_gallery :=  ;
26799: LD_ADDR_OWVAR 33
26803: PUSH
26804: LD_STRING 
26806: ST_TO_ADDR
// hc_name :=  ;
26807: LD_ADDR_OWVAR 26
26811: PUSH
26812: LD_STRING 
26814: ST_TO_ADDR
// un := CreateHuman ;
26815: LD_ADDR_VAR 0 2
26819: PUSH
26820: CALL_OW 44
26824: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26825: LD_VAR 0 2
26829: PPUSH
26830: LD_INT 1
26832: PPUSH
26833: CALL_OW 51
// tmp := tmp ^ un ;
26837: LD_ADDR_VAR 0 3
26841: PUSH
26842: LD_VAR 0 3
26846: PUSH
26847: LD_VAR 0 2
26851: ADD
26852: ST_TO_ADDR
// end ;
26853: GO 26749
26855: POP
26856: POP
// repeat wait ( 0 0$1 ) ;
26857: LD_INT 35
26859: PPUSH
26860: CALL_OW 67
// for un in tmp do
26864: LD_ADDR_VAR 0 2
26868: PUSH
26869: LD_VAR 0 3
26873: PUSH
26874: FOR_IN
26875: IFFALSE 26949
// begin if IsDead ( un ) then
26877: LD_VAR 0 2
26881: PPUSH
26882: CALL_OW 301
26886: IFFALSE 26906
// begin tmp := tmp diff un ;
26888: LD_ADDR_VAR 0 3
26892: PUSH
26893: LD_VAR 0 3
26897: PUSH
26898: LD_VAR 0 2
26902: DIFF
26903: ST_TO_ADDR
// continue ;
26904: GO 26874
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26906: LD_VAR 0 2
26910: PPUSH
26911: LD_INT 3
26913: PUSH
26914: LD_INT 22
26916: PUSH
26917: LD_INT 0
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PPUSH
26928: CALL_OW 69
26932: PPUSH
26933: LD_VAR 0 2
26937: PPUSH
26938: CALL_OW 74
26942: PPUSH
26943: CALL_OW 115
// end ;
26947: GO 26874
26949: POP
26950: POP
// until not tmp ;
26951: LD_VAR 0 3
26955: NOT
26956: IFFALSE 26857
// end ;
26958: PPOPN 3
26960: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26961: LD_EXP 62
26965: PUSH
26966: LD_EXP 87
26970: AND
26971: IFFALSE 27025
26973: GO 26975
26975: DISABLE
// begin ToLua ( displayTroll(); ) ;
26976: LD_STRING displayTroll();
26978: PPUSH
26979: CALL_OW 559
// wait ( 3 3$00 ) ;
26983: LD_INT 6300
26985: PPUSH
26986: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26990: LD_STRING hideTroll();
26992: PPUSH
26993: CALL_OW 559
// wait ( 1 1$00 ) ;
26997: LD_INT 2100
26999: PPUSH
27000: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27004: LD_STRING displayTroll();
27006: PPUSH
27007: CALL_OW 559
// wait ( 1 1$00 ) ;
27011: LD_INT 2100
27013: PPUSH
27014: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27018: LD_STRING hideTroll();
27020: PPUSH
27021: CALL_OW 559
// end ;
27025: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27026: LD_EXP 62
27030: PUSH
27031: LD_EXP 88
27035: AND
27036: IFFALSE 27099
27038: GO 27040
27040: DISABLE
27041: LD_INT 0
27043: PPUSH
// begin p := 0 ;
27044: LD_ADDR_VAR 0 1
27048: PUSH
27049: LD_INT 0
27051: ST_TO_ADDR
// repeat game_speed := 1 ;
27052: LD_ADDR_OWVAR 65
27056: PUSH
27057: LD_INT 1
27059: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27060: LD_INT 35
27062: PPUSH
27063: CALL_OW 67
// p := p + 1 ;
27067: LD_ADDR_VAR 0 1
27071: PUSH
27072: LD_VAR 0 1
27076: PUSH
27077: LD_INT 1
27079: PLUS
27080: ST_TO_ADDR
// until p >= 60 ;
27081: LD_VAR 0 1
27085: PUSH
27086: LD_INT 60
27088: GREATEREQUAL
27089: IFFALSE 27052
// game_speed := 4 ;
27091: LD_ADDR_OWVAR 65
27095: PUSH
27096: LD_INT 4
27098: ST_TO_ADDR
// end ;
27099: PPOPN 1
27101: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27102: LD_EXP 62
27106: PUSH
27107: LD_EXP 89
27111: AND
27112: IFFALSE 27258
27114: GO 27116
27116: DISABLE
27117: LD_INT 0
27119: PPUSH
27120: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27121: LD_ADDR_VAR 0 1
27125: PUSH
27126: LD_INT 22
27128: PUSH
27129: LD_OWVAR 2
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 2
27140: PUSH
27141: LD_INT 30
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 30
27153: PUSH
27154: LD_INT 1
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: LIST
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PPUSH
27170: CALL_OW 69
27174: ST_TO_ADDR
// if not depot then
27175: LD_VAR 0 1
27179: NOT
27180: IFFALSE 27184
// exit ;
27182: GO 27258
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27184: LD_ADDR_VAR 0 2
27188: PUSH
27189: LD_VAR 0 1
27193: PUSH
27194: LD_INT 1
27196: PPUSH
27197: LD_VAR 0 1
27201: PPUSH
27202: CALL_OW 12
27206: ARRAY
27207: PPUSH
27208: CALL_OW 274
27212: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27213: LD_VAR 0 2
27217: PPUSH
27218: LD_INT 1
27220: PPUSH
27221: LD_INT 0
27223: PPUSH
27224: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27228: LD_VAR 0 2
27232: PPUSH
27233: LD_INT 2
27235: PPUSH
27236: LD_INT 0
27238: PPUSH
27239: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27243: LD_VAR 0 2
27247: PPUSH
27248: LD_INT 3
27250: PPUSH
27251: LD_INT 0
27253: PPUSH
27254: CALL_OW 277
// end ;
27258: PPOPN 2
27260: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27261: LD_EXP 62
27265: PUSH
27266: LD_EXP 90
27270: AND
27271: IFFALSE 27368
27273: GO 27275
27275: DISABLE
27276: LD_INT 0
27278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27279: LD_ADDR_VAR 0 1
27283: PUSH
27284: LD_INT 22
27286: PUSH
27287: LD_OWVAR 2
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 21
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 3
27308: PUSH
27309: LD_INT 23
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: LIST
27327: PPUSH
27328: CALL_OW 69
27332: ST_TO_ADDR
// if not tmp then
27333: LD_VAR 0 1
27337: NOT
27338: IFFALSE 27342
// exit ;
27340: GO 27368
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27342: LD_VAR 0 1
27346: PUSH
27347: LD_INT 1
27349: PPUSH
27350: LD_VAR 0 1
27354: PPUSH
27355: CALL_OW 12
27359: ARRAY
27360: PPUSH
27361: LD_INT 200
27363: PPUSH
27364: CALL_OW 234
// end ;
27368: PPOPN 1
27370: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27371: LD_EXP 62
27375: PUSH
27376: LD_EXP 91
27380: AND
27381: IFFALSE 27460
27383: GO 27385
27385: DISABLE
27386: LD_INT 0
27388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27389: LD_ADDR_VAR 0 1
27393: PUSH
27394: LD_INT 22
27396: PUSH
27397: LD_OWVAR 2
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 21
27408: PUSH
27409: LD_INT 2
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PPUSH
27420: CALL_OW 69
27424: ST_TO_ADDR
// if not tmp then
27425: LD_VAR 0 1
27429: NOT
27430: IFFALSE 27434
// exit ;
27432: GO 27460
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27434: LD_VAR 0 1
27438: PUSH
27439: LD_INT 1
27441: PPUSH
27442: LD_VAR 0 1
27446: PPUSH
27447: CALL_OW 12
27451: ARRAY
27452: PPUSH
27453: LD_INT 60
27455: PPUSH
27456: CALL_OW 234
// end ;
27460: PPOPN 1
27462: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27463: LD_EXP 62
27467: PUSH
27468: LD_EXP 92
27472: AND
27473: IFFALSE 27572
27475: GO 27477
27477: DISABLE
27478: LD_INT 0
27480: PPUSH
27481: PPUSH
// begin enable ;
27482: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27483: LD_ADDR_VAR 0 1
27487: PUSH
27488: LD_INT 22
27490: PUSH
27491: LD_OWVAR 2
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 61
27502: PUSH
27503: EMPTY
27504: LIST
27505: PUSH
27506: LD_INT 33
27508: PUSH
27509: LD_INT 2
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: LIST
27520: PPUSH
27521: CALL_OW 69
27525: ST_TO_ADDR
// if not tmp then
27526: LD_VAR 0 1
27530: NOT
27531: IFFALSE 27535
// exit ;
27533: GO 27572
// for i in tmp do
27535: LD_ADDR_VAR 0 2
27539: PUSH
27540: LD_VAR 0 1
27544: PUSH
27545: FOR_IN
27546: IFFALSE 27570
// if IsControledBy ( i ) then
27548: LD_VAR 0 2
27552: PPUSH
27553: CALL_OW 312
27557: IFFALSE 27568
// ComUnlink ( i ) ;
27559: LD_VAR 0 2
27563: PPUSH
27564: CALL_OW 136
27568: GO 27545
27570: POP
27571: POP
// end ;
27572: PPOPN 2
27574: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27575: LD_EXP 62
27579: PUSH
27580: LD_EXP 93
27584: AND
27585: IFFALSE 27725
27587: GO 27589
27589: DISABLE
27590: LD_INT 0
27592: PPUSH
27593: PPUSH
// begin ToLua ( displayPowell(); ) ;
27594: LD_STRING displayPowell();
27596: PPUSH
27597: CALL_OW 559
// uc_side := 0 ;
27601: LD_ADDR_OWVAR 20
27605: PUSH
27606: LD_INT 0
27608: ST_TO_ADDR
// uc_nation := 2 ;
27609: LD_ADDR_OWVAR 21
27613: PUSH
27614: LD_INT 2
27616: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27617: LD_ADDR_OWVAR 37
27621: PUSH
27622: LD_INT 14
27624: ST_TO_ADDR
// vc_engine := engine_siberite ;
27625: LD_ADDR_OWVAR 39
27629: PUSH
27630: LD_INT 3
27632: ST_TO_ADDR
// vc_control := control_apeman ;
27633: LD_ADDR_OWVAR 38
27637: PUSH
27638: LD_INT 5
27640: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27641: LD_ADDR_OWVAR 40
27645: PUSH
27646: LD_INT 29
27648: ST_TO_ADDR
// un := CreateVehicle ;
27649: LD_ADDR_VAR 0 2
27653: PUSH
27654: CALL_OW 45
27658: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27659: LD_VAR 0 2
27663: PPUSH
27664: LD_INT 1
27666: PPUSH
27667: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27671: LD_INT 35
27673: PPUSH
27674: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27678: LD_VAR 0 2
27682: PPUSH
27683: LD_INT 22
27685: PUSH
27686: LD_OWVAR 2
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PPUSH
27695: CALL_OW 69
27699: PPUSH
27700: LD_VAR 0 2
27704: PPUSH
27705: CALL_OW 74
27709: PPUSH
27710: CALL_OW 115
// until IsDead ( un ) ;
27714: LD_VAR 0 2
27718: PPUSH
27719: CALL_OW 301
27723: IFFALSE 27671
// end ;
27725: PPOPN 2
27727: END
// every 0 0$1 trigger StreamModeActive and sStu do
27728: LD_EXP 62
27732: PUSH
27733: LD_EXP 101
27737: AND
27738: IFFALSE 27754
27740: GO 27742
27742: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27743: LD_STRING displayStucuk();
27745: PPUSH
27746: CALL_OW 559
// ResetFog ;
27750: CALL_OW 335
// end ;
27754: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27755: LD_EXP 62
27759: PUSH
27760: LD_EXP 94
27764: AND
27765: IFFALSE 27906
27767: GO 27769
27769: DISABLE
27770: LD_INT 0
27772: PPUSH
27773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27774: LD_ADDR_VAR 0 2
27778: PUSH
27779: LD_INT 22
27781: PUSH
27782: LD_OWVAR 2
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 21
27793: PUSH
27794: LD_INT 1
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PPUSH
27805: CALL_OW 69
27809: ST_TO_ADDR
// if not tmp then
27810: LD_VAR 0 2
27814: NOT
27815: IFFALSE 27819
// exit ;
27817: GO 27906
// un := tmp [ rand ( 1 , tmp ) ] ;
27819: LD_ADDR_VAR 0 1
27823: PUSH
27824: LD_VAR 0 2
27828: PUSH
27829: LD_INT 1
27831: PPUSH
27832: LD_VAR 0 2
27836: PPUSH
27837: CALL_OW 12
27841: ARRAY
27842: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27843: LD_VAR 0 1
27847: PPUSH
27848: LD_INT 0
27850: PPUSH
27851: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27855: LD_VAR 0 1
27859: PPUSH
27860: LD_OWVAR 3
27864: PUSH
27865: LD_VAR 0 1
27869: DIFF
27870: PPUSH
27871: LD_VAR 0 1
27875: PPUSH
27876: CALL_OW 74
27880: PPUSH
27881: CALL_OW 115
// wait ( 0 0$20 ) ;
27885: LD_INT 700
27887: PPUSH
27888: CALL_OW 67
// SetSide ( un , your_side ) ;
27892: LD_VAR 0 1
27896: PPUSH
27897: LD_OWVAR 2
27901: PPUSH
27902: CALL_OW 235
// end ;
27906: PPOPN 2
27908: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27909: LD_EXP 62
27913: PUSH
27914: LD_EXP 95
27918: AND
27919: IFFALSE 28025
27921: GO 27923
27923: DISABLE
27924: LD_INT 0
27926: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27927: LD_ADDR_VAR 0 1
27931: PUSH
27932: LD_INT 22
27934: PUSH
27935: LD_OWVAR 2
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 2
27946: PUSH
27947: LD_INT 30
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 30
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: LIST
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PPUSH
27976: CALL_OW 69
27980: ST_TO_ADDR
// if not depot then
27981: LD_VAR 0 1
27985: NOT
27986: IFFALSE 27990
// exit ;
27988: GO 28025
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27990: LD_VAR 0 1
27994: PUSH
27995: LD_INT 1
27997: ARRAY
27998: PPUSH
27999: CALL_OW 250
28003: PPUSH
28004: LD_VAR 0 1
28008: PUSH
28009: LD_INT 1
28011: ARRAY
28012: PPUSH
28013: CALL_OW 251
28017: PPUSH
28018: LD_INT 70
28020: PPUSH
28021: CALL_OW 495
// end ;
28025: PPOPN 1
28027: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28028: LD_EXP 62
28032: PUSH
28033: LD_EXP 96
28037: AND
28038: IFFALSE 28249
28040: GO 28042
28042: DISABLE
28043: LD_INT 0
28045: PPUSH
28046: PPUSH
28047: PPUSH
28048: PPUSH
28049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28050: LD_ADDR_VAR 0 5
28054: PUSH
28055: LD_INT 22
28057: PUSH
28058: LD_OWVAR 2
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 21
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PPUSH
28081: CALL_OW 69
28085: ST_TO_ADDR
// if not tmp then
28086: LD_VAR 0 5
28090: NOT
28091: IFFALSE 28095
// exit ;
28093: GO 28249
// for i in tmp do
28095: LD_ADDR_VAR 0 1
28099: PUSH
28100: LD_VAR 0 5
28104: PUSH
28105: FOR_IN
28106: IFFALSE 28247
// begin d := rand ( 0 , 5 ) ;
28108: LD_ADDR_VAR 0 4
28112: PUSH
28113: LD_INT 0
28115: PPUSH
28116: LD_INT 5
28118: PPUSH
28119: CALL_OW 12
28123: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28124: LD_ADDR_VAR 0 2
28128: PUSH
28129: LD_VAR 0 1
28133: PPUSH
28134: CALL_OW 250
28138: PPUSH
28139: LD_VAR 0 4
28143: PPUSH
28144: LD_INT 3
28146: PPUSH
28147: LD_INT 12
28149: PPUSH
28150: CALL_OW 12
28154: PPUSH
28155: CALL_OW 272
28159: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28160: LD_ADDR_VAR 0 3
28164: PUSH
28165: LD_VAR 0 1
28169: PPUSH
28170: CALL_OW 251
28174: PPUSH
28175: LD_VAR 0 4
28179: PPUSH
28180: LD_INT 3
28182: PPUSH
28183: LD_INT 12
28185: PPUSH
28186: CALL_OW 12
28190: PPUSH
28191: CALL_OW 273
28195: ST_TO_ADDR
// if ValidHex ( x , y ) then
28196: LD_VAR 0 2
28200: PPUSH
28201: LD_VAR 0 3
28205: PPUSH
28206: CALL_OW 488
28210: IFFALSE 28245
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28212: LD_VAR 0 1
28216: PPUSH
28217: LD_VAR 0 2
28221: PPUSH
28222: LD_VAR 0 3
28226: PPUSH
28227: LD_INT 3
28229: PPUSH
28230: LD_INT 6
28232: PPUSH
28233: CALL_OW 12
28237: PPUSH
28238: LD_INT 1
28240: PPUSH
28241: CALL_OW 483
// end ;
28245: GO 28105
28247: POP
28248: POP
// end ;
28249: PPOPN 5
28251: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28252: LD_EXP 62
28256: PUSH
28257: LD_EXP 97
28261: AND
28262: IFFALSE 28356
28264: GO 28266
28266: DISABLE
28267: LD_INT 0
28269: PPUSH
28270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28271: LD_ADDR_VAR 0 2
28275: PUSH
28276: LD_INT 22
28278: PUSH
28279: LD_OWVAR 2
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 32
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 21
28300: PUSH
28301: LD_INT 2
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: LIST
28312: PPUSH
28313: CALL_OW 69
28317: ST_TO_ADDR
// if not tmp then
28318: LD_VAR 0 2
28322: NOT
28323: IFFALSE 28327
// exit ;
28325: GO 28356
// for i in tmp do
28327: LD_ADDR_VAR 0 1
28331: PUSH
28332: LD_VAR 0 2
28336: PUSH
28337: FOR_IN
28338: IFFALSE 28354
// SetFuel ( i , 0 ) ;
28340: LD_VAR 0 1
28344: PPUSH
28345: LD_INT 0
28347: PPUSH
28348: CALL_OW 240
28352: GO 28337
28354: POP
28355: POP
// end ;
28356: PPOPN 2
28358: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28359: LD_EXP 62
28363: PUSH
28364: LD_EXP 98
28368: AND
28369: IFFALSE 28435
28371: GO 28373
28373: DISABLE
28374: LD_INT 0
28376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28377: LD_ADDR_VAR 0 1
28381: PUSH
28382: LD_INT 22
28384: PUSH
28385: LD_OWVAR 2
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 30
28396: PUSH
28397: LD_INT 29
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PPUSH
28408: CALL_OW 69
28412: ST_TO_ADDR
// if not tmp then
28413: LD_VAR 0 1
28417: NOT
28418: IFFALSE 28422
// exit ;
28420: GO 28435
// DestroyUnit ( tmp [ 1 ] ) ;
28422: LD_VAR 0 1
28426: PUSH
28427: LD_INT 1
28429: ARRAY
28430: PPUSH
28431: CALL_OW 65
// end ;
28435: PPOPN 1
28437: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28438: LD_EXP 62
28442: PUSH
28443: LD_EXP 100
28447: AND
28448: IFFALSE 28577
28450: GO 28452
28452: DISABLE
28453: LD_INT 0
28455: PPUSH
// begin uc_side := 0 ;
28456: LD_ADDR_OWVAR 20
28460: PUSH
28461: LD_INT 0
28463: ST_TO_ADDR
// uc_nation := nation_arabian ;
28464: LD_ADDR_OWVAR 21
28468: PUSH
28469: LD_INT 2
28471: ST_TO_ADDR
// hc_gallery :=  ;
28472: LD_ADDR_OWVAR 33
28476: PUSH
28477: LD_STRING 
28479: ST_TO_ADDR
// hc_name :=  ;
28480: LD_ADDR_OWVAR 26
28484: PUSH
28485: LD_STRING 
28487: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28488: LD_INT 1
28490: PPUSH
28491: LD_INT 11
28493: PPUSH
28494: LD_INT 10
28496: PPUSH
28497: CALL_OW 380
// un := CreateHuman ;
28501: LD_ADDR_VAR 0 1
28505: PUSH
28506: CALL_OW 44
28510: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28511: LD_VAR 0 1
28515: PPUSH
28516: LD_INT 1
28518: PPUSH
28519: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28523: LD_INT 35
28525: PPUSH
28526: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28530: LD_VAR 0 1
28534: PPUSH
28535: LD_INT 22
28537: PUSH
28538: LD_OWVAR 2
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PPUSH
28547: CALL_OW 69
28551: PPUSH
28552: LD_VAR 0 1
28556: PPUSH
28557: CALL_OW 74
28561: PPUSH
28562: CALL_OW 115
// until IsDead ( un ) ;
28566: LD_VAR 0 1
28570: PPUSH
28571: CALL_OW 301
28575: IFFALSE 28523
// end ;
28577: PPOPN 1
28579: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28580: LD_EXP 62
28584: PUSH
28585: LD_EXP 102
28589: AND
28590: IFFALSE 28602
28592: GO 28594
28594: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28595: LD_STRING earthquake(getX(game), 0, 32)
28597: PPUSH
28598: CALL_OW 559
28602: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28603: LD_EXP 62
28607: PUSH
28608: LD_EXP 103
28612: AND
28613: IFFALSE 28704
28615: GO 28617
28617: DISABLE
28618: LD_INT 0
28620: PPUSH
// begin enable ;
28621: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28622: LD_ADDR_VAR 0 1
28626: PUSH
28627: LD_INT 22
28629: PUSH
28630: LD_OWVAR 2
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 21
28641: PUSH
28642: LD_INT 2
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 33
28651: PUSH
28652: LD_INT 3
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: LIST
28663: PPUSH
28664: CALL_OW 69
28668: ST_TO_ADDR
// if not tmp then
28669: LD_VAR 0 1
28673: NOT
28674: IFFALSE 28678
// exit ;
28676: GO 28704
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28678: LD_VAR 0 1
28682: PUSH
28683: LD_INT 1
28685: PPUSH
28686: LD_VAR 0 1
28690: PPUSH
28691: CALL_OW 12
28695: ARRAY
28696: PPUSH
28697: LD_INT 1
28699: PPUSH
28700: CALL_OW 234
// end ;
28704: PPOPN 1
28706: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28707: LD_EXP 62
28711: PUSH
28712: LD_EXP 104
28716: AND
28717: IFFALSE 28858
28719: GO 28721
28721: DISABLE
28722: LD_INT 0
28724: PPUSH
28725: PPUSH
28726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28727: LD_ADDR_VAR 0 3
28731: PUSH
28732: LD_INT 22
28734: PUSH
28735: LD_OWVAR 2
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 25
28746: PUSH
28747: LD_INT 1
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PPUSH
28758: CALL_OW 69
28762: ST_TO_ADDR
// if not tmp then
28763: LD_VAR 0 3
28767: NOT
28768: IFFALSE 28772
// exit ;
28770: GO 28858
// un := tmp [ rand ( 1 , tmp ) ] ;
28772: LD_ADDR_VAR 0 2
28776: PUSH
28777: LD_VAR 0 3
28781: PUSH
28782: LD_INT 1
28784: PPUSH
28785: LD_VAR 0 3
28789: PPUSH
28790: CALL_OW 12
28794: ARRAY
28795: ST_TO_ADDR
// if Crawls ( un ) then
28796: LD_VAR 0 2
28800: PPUSH
28801: CALL_OW 318
28805: IFFALSE 28816
// ComWalk ( un ) ;
28807: LD_VAR 0 2
28811: PPUSH
28812: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28816: LD_VAR 0 2
28820: PPUSH
28821: LD_INT 9
28823: PPUSH
28824: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28828: LD_INT 28
28830: PPUSH
28831: LD_OWVAR 2
28835: PPUSH
28836: LD_INT 2
28838: PPUSH
28839: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28843: LD_INT 29
28845: PPUSH
28846: LD_OWVAR 2
28850: PPUSH
28851: LD_INT 2
28853: PPUSH
28854: CALL_OW 322
// end ;
28858: PPOPN 3
28860: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28861: LD_EXP 62
28865: PUSH
28866: LD_EXP 105
28870: AND
28871: IFFALSE 28982
28873: GO 28875
28875: DISABLE
28876: LD_INT 0
28878: PPUSH
28879: PPUSH
28880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28881: LD_ADDR_VAR 0 3
28885: PUSH
28886: LD_INT 22
28888: PUSH
28889: LD_OWVAR 2
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 25
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PPUSH
28912: CALL_OW 69
28916: ST_TO_ADDR
// if not tmp then
28917: LD_VAR 0 3
28921: NOT
28922: IFFALSE 28926
// exit ;
28924: GO 28982
// un := tmp [ rand ( 1 , tmp ) ] ;
28926: LD_ADDR_VAR 0 2
28930: PUSH
28931: LD_VAR 0 3
28935: PUSH
28936: LD_INT 1
28938: PPUSH
28939: LD_VAR 0 3
28943: PPUSH
28944: CALL_OW 12
28948: ARRAY
28949: ST_TO_ADDR
// if Crawls ( un ) then
28950: LD_VAR 0 2
28954: PPUSH
28955: CALL_OW 318
28959: IFFALSE 28970
// ComWalk ( un ) ;
28961: LD_VAR 0 2
28965: PPUSH
28966: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28970: LD_VAR 0 2
28974: PPUSH
28975: LD_INT 8
28977: PPUSH
28978: CALL_OW 336
// end ;
28982: PPOPN 3
28984: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28985: LD_EXP 62
28989: PUSH
28990: LD_EXP 106
28994: AND
28995: IFFALSE 29139
28997: GO 28999
28999: DISABLE
29000: LD_INT 0
29002: PPUSH
29003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29004: LD_ADDR_VAR 0 2
29008: PUSH
29009: LD_INT 22
29011: PUSH
29012: LD_OWVAR 2
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 21
29023: PUSH
29024: LD_INT 2
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 2
29033: PUSH
29034: LD_INT 34
29036: PUSH
29037: LD_INT 12
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 34
29046: PUSH
29047: LD_INT 51
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 34
29056: PUSH
29057: LD_INT 32
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: LIST
29074: PPUSH
29075: CALL_OW 69
29079: ST_TO_ADDR
// if not tmp then
29080: LD_VAR 0 2
29084: NOT
29085: IFFALSE 29089
// exit ;
29087: GO 29139
// for i in tmp do
29089: LD_ADDR_VAR 0 1
29093: PUSH
29094: LD_VAR 0 2
29098: PUSH
29099: FOR_IN
29100: IFFALSE 29137
// if GetCargo ( i , mat_artifact ) = 0 then
29102: LD_VAR 0 1
29106: PPUSH
29107: LD_INT 4
29109: PPUSH
29110: CALL_OW 289
29114: PUSH
29115: LD_INT 0
29117: EQUAL
29118: IFFALSE 29135
// SetCargo ( i , mat_siberit , 100 ) ;
29120: LD_VAR 0 1
29124: PPUSH
29125: LD_INT 3
29127: PPUSH
29128: LD_INT 100
29130: PPUSH
29131: CALL_OW 290
29135: GO 29099
29137: POP
29138: POP
// end ;
29139: PPOPN 2
29141: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29142: LD_EXP 62
29146: PUSH
29147: LD_EXP 107
29151: AND
29152: IFFALSE 29335
29154: GO 29156
29156: DISABLE
29157: LD_INT 0
29159: PPUSH
29160: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29161: LD_ADDR_VAR 0 2
29165: PUSH
29166: LD_INT 22
29168: PUSH
29169: LD_OWVAR 2
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PPUSH
29178: CALL_OW 69
29182: ST_TO_ADDR
// if not tmp then
29183: LD_VAR 0 2
29187: NOT
29188: IFFALSE 29192
// exit ;
29190: GO 29335
// for i := 1 to 2 do
29192: LD_ADDR_VAR 0 1
29196: PUSH
29197: DOUBLE
29198: LD_INT 1
29200: DEC
29201: ST_TO_ADDR
29202: LD_INT 2
29204: PUSH
29205: FOR_TO
29206: IFFALSE 29333
// begin uc_side := your_side ;
29208: LD_ADDR_OWVAR 20
29212: PUSH
29213: LD_OWVAR 2
29217: ST_TO_ADDR
// uc_nation := nation_american ;
29218: LD_ADDR_OWVAR 21
29222: PUSH
29223: LD_INT 1
29225: ST_TO_ADDR
// vc_chassis := us_morphling ;
29226: LD_ADDR_OWVAR 37
29230: PUSH
29231: LD_INT 5
29233: ST_TO_ADDR
// vc_engine := engine_siberite ;
29234: LD_ADDR_OWVAR 39
29238: PUSH
29239: LD_INT 3
29241: ST_TO_ADDR
// vc_control := control_computer ;
29242: LD_ADDR_OWVAR 38
29246: PUSH
29247: LD_INT 3
29249: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29250: LD_ADDR_OWVAR 40
29254: PUSH
29255: LD_INT 10
29257: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29258: LD_VAR 0 2
29262: PUSH
29263: LD_INT 1
29265: ARRAY
29266: PPUSH
29267: CALL_OW 310
29271: NOT
29272: IFFALSE 29319
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29274: CALL_OW 45
29278: PPUSH
29279: LD_VAR 0 2
29283: PUSH
29284: LD_INT 1
29286: ARRAY
29287: PPUSH
29288: CALL_OW 250
29292: PPUSH
29293: LD_VAR 0 2
29297: PUSH
29298: LD_INT 1
29300: ARRAY
29301: PPUSH
29302: CALL_OW 251
29306: PPUSH
29307: LD_INT 12
29309: PPUSH
29310: LD_INT 1
29312: PPUSH
29313: CALL_OW 50
29317: GO 29331
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29319: CALL_OW 45
29323: PPUSH
29324: LD_INT 1
29326: PPUSH
29327: CALL_OW 51
// end ;
29331: GO 29205
29333: POP
29334: POP
// end ;
29335: PPOPN 2
29337: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29338: LD_EXP 62
29342: PUSH
29343: LD_EXP 108
29347: AND
29348: IFFALSE 29570
29350: GO 29352
29352: DISABLE
29353: LD_INT 0
29355: PPUSH
29356: PPUSH
29357: PPUSH
29358: PPUSH
29359: PPUSH
29360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29361: LD_ADDR_VAR 0 6
29365: PUSH
29366: LD_INT 22
29368: PUSH
29369: LD_OWVAR 2
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 21
29380: PUSH
29381: LD_INT 1
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 3
29390: PUSH
29391: LD_INT 23
29393: PUSH
29394: LD_INT 0
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: LIST
29409: PPUSH
29410: CALL_OW 69
29414: ST_TO_ADDR
// if not tmp then
29415: LD_VAR 0 6
29419: NOT
29420: IFFALSE 29424
// exit ;
29422: GO 29570
// s1 := rand ( 1 , 4 ) ;
29424: LD_ADDR_VAR 0 2
29428: PUSH
29429: LD_INT 1
29431: PPUSH
29432: LD_INT 4
29434: PPUSH
29435: CALL_OW 12
29439: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29440: LD_ADDR_VAR 0 4
29444: PUSH
29445: LD_VAR 0 6
29449: PUSH
29450: LD_INT 1
29452: ARRAY
29453: PPUSH
29454: LD_VAR 0 2
29458: PPUSH
29459: CALL_OW 259
29463: ST_TO_ADDR
// if s1 = 1 then
29464: LD_VAR 0 2
29468: PUSH
29469: LD_INT 1
29471: EQUAL
29472: IFFALSE 29492
// s2 := rand ( 2 , 4 ) else
29474: LD_ADDR_VAR 0 3
29478: PUSH
29479: LD_INT 2
29481: PPUSH
29482: LD_INT 4
29484: PPUSH
29485: CALL_OW 12
29489: ST_TO_ADDR
29490: GO 29500
// s2 := 1 ;
29492: LD_ADDR_VAR 0 3
29496: PUSH
29497: LD_INT 1
29499: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29500: LD_ADDR_VAR 0 5
29504: PUSH
29505: LD_VAR 0 6
29509: PUSH
29510: LD_INT 1
29512: ARRAY
29513: PPUSH
29514: LD_VAR 0 3
29518: PPUSH
29519: CALL_OW 259
29523: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29524: LD_VAR 0 6
29528: PUSH
29529: LD_INT 1
29531: ARRAY
29532: PPUSH
29533: LD_VAR 0 2
29537: PPUSH
29538: LD_VAR 0 5
29542: PPUSH
29543: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29547: LD_VAR 0 6
29551: PUSH
29552: LD_INT 1
29554: ARRAY
29555: PPUSH
29556: LD_VAR 0 3
29560: PPUSH
29561: LD_VAR 0 4
29565: PPUSH
29566: CALL_OW 237
// end ;
29570: PPOPN 6
29572: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29573: LD_EXP 62
29577: PUSH
29578: LD_EXP 109
29582: AND
29583: IFFALSE 29662
29585: GO 29587
29587: DISABLE
29588: LD_INT 0
29590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29591: LD_ADDR_VAR 0 1
29595: PUSH
29596: LD_INT 22
29598: PUSH
29599: LD_OWVAR 2
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 30
29610: PUSH
29611: LD_INT 3
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PPUSH
29622: CALL_OW 69
29626: ST_TO_ADDR
// if not tmp then
29627: LD_VAR 0 1
29631: NOT
29632: IFFALSE 29636
// exit ;
29634: GO 29662
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29636: LD_VAR 0 1
29640: PUSH
29641: LD_INT 1
29643: PPUSH
29644: LD_VAR 0 1
29648: PPUSH
29649: CALL_OW 12
29653: ARRAY
29654: PPUSH
29655: LD_INT 1
29657: PPUSH
29658: CALL_OW 234
// end ;
29662: PPOPN 1
29664: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29665: LD_EXP 62
29669: PUSH
29670: LD_EXP 110
29674: AND
29675: IFFALSE 29787
29677: GO 29679
29679: DISABLE
29680: LD_INT 0
29682: PPUSH
29683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29684: LD_ADDR_VAR 0 2
29688: PUSH
29689: LD_INT 22
29691: PUSH
29692: LD_OWVAR 2
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 2
29703: PUSH
29704: LD_INT 30
29706: PUSH
29707: LD_INT 27
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 30
29716: PUSH
29717: LD_INT 26
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 30
29726: PUSH
29727: LD_INT 28
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PPUSH
29744: CALL_OW 69
29748: ST_TO_ADDR
// if not tmp then
29749: LD_VAR 0 2
29753: NOT
29754: IFFALSE 29758
// exit ;
29756: GO 29787
// for i in tmp do
29758: LD_ADDR_VAR 0 1
29762: PUSH
29763: LD_VAR 0 2
29767: PUSH
29768: FOR_IN
29769: IFFALSE 29785
// SetLives ( i , 1 ) ;
29771: LD_VAR 0 1
29775: PPUSH
29776: LD_INT 1
29778: PPUSH
29779: CALL_OW 234
29783: GO 29768
29785: POP
29786: POP
// end ;
29787: PPOPN 2
29789: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29790: LD_EXP 62
29794: PUSH
29795: LD_EXP 111
29799: AND
29800: IFFALSE 30087
29802: GO 29804
29804: DISABLE
29805: LD_INT 0
29807: PPUSH
29808: PPUSH
29809: PPUSH
// begin i := rand ( 1 , 7 ) ;
29810: LD_ADDR_VAR 0 1
29814: PUSH
29815: LD_INT 1
29817: PPUSH
29818: LD_INT 7
29820: PPUSH
29821: CALL_OW 12
29825: ST_TO_ADDR
// case i of 1 :
29826: LD_VAR 0 1
29830: PUSH
29831: LD_INT 1
29833: DOUBLE
29834: EQUAL
29835: IFTRUE 29839
29837: GO 29849
29839: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29840: LD_STRING earthquake(getX(game), 0, 32)
29842: PPUSH
29843: CALL_OW 559
29847: GO 30087
29849: LD_INT 2
29851: DOUBLE
29852: EQUAL
29853: IFTRUE 29857
29855: GO 29871
29857: POP
// begin ToLua ( displayStucuk(); ) ;
29858: LD_STRING displayStucuk();
29860: PPUSH
29861: CALL_OW 559
// ResetFog ;
29865: CALL_OW 335
// end ; 3 :
29869: GO 30087
29871: LD_INT 3
29873: DOUBLE
29874: EQUAL
29875: IFTRUE 29879
29877: GO 29983
29879: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29880: LD_ADDR_VAR 0 2
29884: PUSH
29885: LD_INT 22
29887: PUSH
29888: LD_OWVAR 2
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 25
29899: PUSH
29900: LD_INT 1
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PPUSH
29911: CALL_OW 69
29915: ST_TO_ADDR
// if not tmp then
29916: LD_VAR 0 2
29920: NOT
29921: IFFALSE 29925
// exit ;
29923: GO 30087
// un := tmp [ rand ( 1 , tmp ) ] ;
29925: LD_ADDR_VAR 0 3
29929: PUSH
29930: LD_VAR 0 2
29934: PUSH
29935: LD_INT 1
29937: PPUSH
29938: LD_VAR 0 2
29942: PPUSH
29943: CALL_OW 12
29947: ARRAY
29948: ST_TO_ADDR
// if Crawls ( un ) then
29949: LD_VAR 0 3
29953: PPUSH
29954: CALL_OW 318
29958: IFFALSE 29969
// ComWalk ( un ) ;
29960: LD_VAR 0 3
29964: PPUSH
29965: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29969: LD_VAR 0 3
29973: PPUSH
29974: LD_INT 8
29976: PPUSH
29977: CALL_OW 336
// end ; 4 :
29981: GO 30087
29983: LD_INT 4
29985: DOUBLE
29986: EQUAL
29987: IFTRUE 29991
29989: GO 30065
29991: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29992: LD_ADDR_VAR 0 2
29996: PUSH
29997: LD_INT 22
29999: PUSH
30000: LD_OWVAR 2
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 30
30011: PUSH
30012: LD_INT 29
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PPUSH
30023: CALL_OW 69
30027: ST_TO_ADDR
// if not tmp then
30028: LD_VAR 0 2
30032: NOT
30033: IFFALSE 30037
// exit ;
30035: GO 30087
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30037: LD_VAR 0 2
30041: PUSH
30042: LD_INT 1
30044: ARRAY
30045: PPUSH
30046: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30050: LD_VAR 0 2
30054: PUSH
30055: LD_INT 1
30057: ARRAY
30058: PPUSH
30059: CALL_OW 65
// end ; 5 .. 7 :
30063: GO 30087
30065: LD_INT 5
30067: DOUBLE
30068: GREATEREQUAL
30069: IFFALSE 30077
30071: LD_INT 7
30073: DOUBLE
30074: LESSEQUAL
30075: IFTRUE 30079
30077: GO 30086
30079: POP
// StreamSibBomb ; end ;
30080: CALL 26324 0 0
30084: GO 30087
30086: POP
// end ;
30087: PPOPN 3
30089: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30090: LD_EXP 62
30094: PUSH
30095: LD_EXP 112
30099: AND
30100: IFFALSE 30256
30102: GO 30104
30104: DISABLE
30105: LD_INT 0
30107: PPUSH
30108: PPUSH
30109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30110: LD_ADDR_VAR 0 2
30114: PUSH
30115: LD_INT 81
30117: PUSH
30118: LD_OWVAR 2
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 2
30129: PUSH
30130: LD_INT 21
30132: PUSH
30133: LD_INT 1
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 21
30142: PUSH
30143: LD_INT 2
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: LIST
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PPUSH
30159: CALL_OW 69
30163: ST_TO_ADDR
// if not tmp then
30164: LD_VAR 0 2
30168: NOT
30169: IFFALSE 30173
// exit ;
30171: GO 30256
// p := 0 ;
30173: LD_ADDR_VAR 0 3
30177: PUSH
30178: LD_INT 0
30180: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30181: LD_INT 35
30183: PPUSH
30184: CALL_OW 67
// p := p + 1 ;
30188: LD_ADDR_VAR 0 3
30192: PUSH
30193: LD_VAR 0 3
30197: PUSH
30198: LD_INT 1
30200: PLUS
30201: ST_TO_ADDR
// for i in tmp do
30202: LD_ADDR_VAR 0 1
30206: PUSH
30207: LD_VAR 0 2
30211: PUSH
30212: FOR_IN
30213: IFFALSE 30244
// if GetLives ( i ) < 1000 then
30215: LD_VAR 0 1
30219: PPUSH
30220: CALL_OW 256
30224: PUSH
30225: LD_INT 1000
30227: LESS
30228: IFFALSE 30242
// SetLives ( i , 1000 ) ;
30230: LD_VAR 0 1
30234: PPUSH
30235: LD_INT 1000
30237: PPUSH
30238: CALL_OW 234
30242: GO 30212
30244: POP
30245: POP
// until p > 20 ;
30246: LD_VAR 0 3
30250: PUSH
30251: LD_INT 20
30253: GREATER
30254: IFFALSE 30181
// end ;
30256: PPOPN 3
30258: END
// every 0 0$1 trigger StreamModeActive and sTime do
30259: LD_EXP 62
30263: PUSH
30264: LD_EXP 113
30268: AND
30269: IFFALSE 30304
30271: GO 30273
30273: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30274: LD_INT 28
30276: PPUSH
30277: LD_OWVAR 2
30281: PPUSH
30282: LD_INT 2
30284: PPUSH
30285: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30289: LD_INT 30
30291: PPUSH
30292: LD_OWVAR 2
30296: PPUSH
30297: LD_INT 2
30299: PPUSH
30300: CALL_OW 322
// end ;
30304: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30305: LD_EXP 62
30309: PUSH
30310: LD_EXP 114
30314: AND
30315: IFFALSE 30436
30317: GO 30319
30319: DISABLE
30320: LD_INT 0
30322: PPUSH
30323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30324: LD_ADDR_VAR 0 2
30328: PUSH
30329: LD_INT 22
30331: PUSH
30332: LD_OWVAR 2
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 21
30343: PUSH
30344: LD_INT 1
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 3
30353: PUSH
30354: LD_INT 23
30356: PUSH
30357: LD_INT 0
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: LIST
30372: PPUSH
30373: CALL_OW 69
30377: ST_TO_ADDR
// if not tmp then
30378: LD_VAR 0 2
30382: NOT
30383: IFFALSE 30387
// exit ;
30385: GO 30436
// for i in tmp do
30387: LD_ADDR_VAR 0 1
30391: PUSH
30392: LD_VAR 0 2
30396: PUSH
30397: FOR_IN
30398: IFFALSE 30434
// begin if Crawls ( i ) then
30400: LD_VAR 0 1
30404: PPUSH
30405: CALL_OW 318
30409: IFFALSE 30420
// ComWalk ( i ) ;
30411: LD_VAR 0 1
30415: PPUSH
30416: CALL_OW 138
// SetClass ( i , 2 ) ;
30420: LD_VAR 0 1
30424: PPUSH
30425: LD_INT 2
30427: PPUSH
30428: CALL_OW 336
// end ;
30432: GO 30397
30434: POP
30435: POP
// end ;
30436: PPOPN 2
30438: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30439: LD_EXP 62
30443: PUSH
30444: LD_EXP 115
30448: AND
30449: IFFALSE 30737
30451: GO 30453
30453: DISABLE
30454: LD_INT 0
30456: PPUSH
30457: PPUSH
30458: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30459: LD_OWVAR 2
30463: PPUSH
30464: LD_INT 9
30466: PPUSH
30467: LD_INT 1
30469: PPUSH
30470: LD_INT 1
30472: PPUSH
30473: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30477: LD_INT 9
30479: PPUSH
30480: LD_OWVAR 2
30484: PPUSH
30485: CALL_OW 343
// uc_side := 9 ;
30489: LD_ADDR_OWVAR 20
30493: PUSH
30494: LD_INT 9
30496: ST_TO_ADDR
// uc_nation := 2 ;
30497: LD_ADDR_OWVAR 21
30501: PUSH
30502: LD_INT 2
30504: ST_TO_ADDR
// hc_name := Dark Warrior ;
30505: LD_ADDR_OWVAR 26
30509: PUSH
30510: LD_STRING Dark Warrior
30512: ST_TO_ADDR
// hc_gallery :=  ;
30513: LD_ADDR_OWVAR 33
30517: PUSH
30518: LD_STRING 
30520: ST_TO_ADDR
// hc_noskilllimit := true ;
30521: LD_ADDR_OWVAR 76
30525: PUSH
30526: LD_INT 1
30528: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30529: LD_ADDR_OWVAR 31
30533: PUSH
30534: LD_INT 30
30536: PUSH
30537: LD_INT 30
30539: PUSH
30540: LD_INT 30
30542: PUSH
30543: LD_INT 30
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: ST_TO_ADDR
// un := CreateHuman ;
30552: LD_ADDR_VAR 0 3
30556: PUSH
30557: CALL_OW 44
30561: ST_TO_ADDR
// hc_noskilllimit := false ;
30562: LD_ADDR_OWVAR 76
30566: PUSH
30567: LD_INT 0
30569: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30570: LD_VAR 0 3
30574: PPUSH
30575: LD_INT 1
30577: PPUSH
30578: CALL_OW 51
// ToLua ( playRanger() ) ;
30582: LD_STRING playRanger()
30584: PPUSH
30585: CALL_OW 559
// p := 0 ;
30589: LD_ADDR_VAR 0 2
30593: PUSH
30594: LD_INT 0
30596: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30597: LD_INT 35
30599: PPUSH
30600: CALL_OW 67
// p := p + 1 ;
30604: LD_ADDR_VAR 0 2
30608: PUSH
30609: LD_VAR 0 2
30613: PUSH
30614: LD_INT 1
30616: PLUS
30617: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30618: LD_VAR 0 3
30622: PPUSH
30623: CALL_OW 256
30627: PUSH
30628: LD_INT 1000
30630: LESS
30631: IFFALSE 30645
// SetLives ( un , 1000 ) ;
30633: LD_VAR 0 3
30637: PPUSH
30638: LD_INT 1000
30640: PPUSH
30641: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30645: LD_VAR 0 3
30649: PPUSH
30650: LD_INT 81
30652: PUSH
30653: LD_OWVAR 2
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 91
30664: PUSH
30665: LD_VAR 0 3
30669: PUSH
30670: LD_INT 30
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: LIST
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PPUSH
30682: CALL_OW 69
30686: PPUSH
30687: LD_VAR 0 3
30691: PPUSH
30692: CALL_OW 74
30696: PPUSH
30697: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30701: LD_VAR 0 2
30705: PUSH
30706: LD_INT 80
30708: GREATER
30709: PUSH
30710: LD_VAR 0 3
30714: PPUSH
30715: CALL_OW 301
30719: OR
30720: IFFALSE 30597
// if un then
30722: LD_VAR 0 3
30726: IFFALSE 30737
// RemoveUnit ( un ) ;
30728: LD_VAR 0 3
30732: PPUSH
30733: CALL_OW 64
// end ;
30737: PPOPN 3
30739: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30740: LD_EXP 116
30744: IFFALSE 30860
30746: GO 30748
30748: DISABLE
30749: LD_INT 0
30751: PPUSH
30752: PPUSH
30753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30754: LD_ADDR_VAR 0 2
30758: PUSH
30759: LD_INT 81
30761: PUSH
30762: LD_OWVAR 2
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 21
30773: PUSH
30774: LD_INT 1
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PPUSH
30785: CALL_OW 69
30789: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30790: LD_STRING playComputer()
30792: PPUSH
30793: CALL_OW 559
// if not tmp then
30797: LD_VAR 0 2
30801: NOT
30802: IFFALSE 30806
// exit ;
30804: GO 30860
// for i in tmp do
30806: LD_ADDR_VAR 0 1
30810: PUSH
30811: LD_VAR 0 2
30815: PUSH
30816: FOR_IN
30817: IFFALSE 30858
// for j := 1 to 4 do
30819: LD_ADDR_VAR 0 3
30823: PUSH
30824: DOUBLE
30825: LD_INT 1
30827: DEC
30828: ST_TO_ADDR
30829: LD_INT 4
30831: PUSH
30832: FOR_TO
30833: IFFALSE 30854
// SetSkill ( i , j , 10 ) ;
30835: LD_VAR 0 1
30839: PPUSH
30840: LD_VAR 0 3
30844: PPUSH
30845: LD_INT 10
30847: PPUSH
30848: CALL_OW 237
30852: GO 30832
30854: POP
30855: POP
30856: GO 30816
30858: POP
30859: POP
// end ;
30860: PPOPN 3
30862: END
// every 0 0$1 trigger s30 do var i , tmp ;
30863: LD_EXP 117
30867: IFFALSE 30936
30869: GO 30871
30871: DISABLE
30872: LD_INT 0
30874: PPUSH
30875: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30876: LD_ADDR_VAR 0 2
30880: PUSH
30881: LD_INT 22
30883: PUSH
30884: LD_OWVAR 2
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PPUSH
30893: CALL_OW 69
30897: ST_TO_ADDR
// if not tmp then
30898: LD_VAR 0 2
30902: NOT
30903: IFFALSE 30907
// exit ;
30905: GO 30936
// for i in tmp do
30907: LD_ADDR_VAR 0 1
30911: PUSH
30912: LD_VAR 0 2
30916: PUSH
30917: FOR_IN
30918: IFFALSE 30934
// SetLives ( i , 300 ) ;
30920: LD_VAR 0 1
30924: PPUSH
30925: LD_INT 300
30927: PPUSH
30928: CALL_OW 234
30932: GO 30917
30934: POP
30935: POP
// end ;
30936: PPOPN 2
30938: END
// every 0 0$1 trigger s60 do var i , tmp ;
30939: LD_EXP 118
30943: IFFALSE 31012
30945: GO 30947
30947: DISABLE
30948: LD_INT 0
30950: PPUSH
30951: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30952: LD_ADDR_VAR 0 2
30956: PUSH
30957: LD_INT 22
30959: PUSH
30960: LD_OWVAR 2
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PPUSH
30969: CALL_OW 69
30973: ST_TO_ADDR
// if not tmp then
30974: LD_VAR 0 2
30978: NOT
30979: IFFALSE 30983
// exit ;
30981: GO 31012
// for i in tmp do
30983: LD_ADDR_VAR 0 1
30987: PUSH
30988: LD_VAR 0 2
30992: PUSH
30993: FOR_IN
30994: IFFALSE 31010
// SetLives ( i , 600 ) ;
30996: LD_VAR 0 1
31000: PPUSH
31001: LD_INT 600
31003: PPUSH
31004: CALL_OW 234
31008: GO 30993
31010: POP
31011: POP
// end ;
31012: PPOPN 2
31014: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31015: LD_INT 0
31017: PPUSH
// case cmd of 301 :
31018: LD_VAR 0 1
31022: PUSH
31023: LD_INT 301
31025: DOUBLE
31026: EQUAL
31027: IFTRUE 31031
31029: GO 31063
31031: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31032: LD_VAR 0 6
31036: PPUSH
31037: LD_VAR 0 7
31041: PPUSH
31042: LD_VAR 0 8
31046: PPUSH
31047: LD_VAR 0 4
31051: PPUSH
31052: LD_VAR 0 5
31056: PPUSH
31057: CALL 32264 0 5
31061: GO 31184
31063: LD_INT 302
31065: DOUBLE
31066: EQUAL
31067: IFTRUE 31071
31069: GO 31108
31071: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31072: LD_VAR 0 6
31076: PPUSH
31077: LD_VAR 0 7
31081: PPUSH
31082: LD_VAR 0 8
31086: PPUSH
31087: LD_VAR 0 9
31091: PPUSH
31092: LD_VAR 0 4
31096: PPUSH
31097: LD_VAR 0 5
31101: PPUSH
31102: CALL 32355 0 6
31106: GO 31184
31108: LD_INT 303
31110: DOUBLE
31111: EQUAL
31112: IFTRUE 31116
31114: GO 31153
31116: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31117: LD_VAR 0 6
31121: PPUSH
31122: LD_VAR 0 7
31126: PPUSH
31127: LD_VAR 0 8
31131: PPUSH
31132: LD_VAR 0 9
31136: PPUSH
31137: LD_VAR 0 4
31141: PPUSH
31142: LD_VAR 0 5
31146: PPUSH
31147: CALL 31189 0 6
31151: GO 31184
31153: LD_INT 304
31155: DOUBLE
31156: EQUAL
31157: IFTRUE 31161
31159: GO 31183
31161: POP
// hHackTeleport ( unit , x , y ) ; end ;
31162: LD_VAR 0 2
31166: PPUSH
31167: LD_VAR 0 4
31171: PPUSH
31172: LD_VAR 0 5
31176: PPUSH
31177: CALL 32948 0 3
31181: GO 31184
31183: POP
// end ;
31184: LD_VAR 0 12
31188: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31189: LD_INT 0
31191: PPUSH
31192: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31193: LD_VAR 0 1
31197: PUSH
31198: LD_INT 1
31200: LESS
31201: PUSH
31202: LD_VAR 0 1
31206: PUSH
31207: LD_INT 3
31209: GREATER
31210: OR
31211: PUSH
31212: LD_VAR 0 5
31216: PPUSH
31217: LD_VAR 0 6
31221: PPUSH
31222: CALL_OW 428
31226: OR
31227: IFFALSE 31231
// exit ;
31229: GO 31951
// uc_side := your_side ;
31231: LD_ADDR_OWVAR 20
31235: PUSH
31236: LD_OWVAR 2
31240: ST_TO_ADDR
// uc_nation := nation ;
31241: LD_ADDR_OWVAR 21
31245: PUSH
31246: LD_VAR 0 1
31250: ST_TO_ADDR
// bc_level = 1 ;
31251: LD_ADDR_OWVAR 43
31255: PUSH
31256: LD_INT 1
31258: ST_TO_ADDR
// case btype of 1 :
31259: LD_VAR 0 2
31263: PUSH
31264: LD_INT 1
31266: DOUBLE
31267: EQUAL
31268: IFTRUE 31272
31270: GO 31283
31272: POP
// bc_type := b_depot ; 2 :
31273: LD_ADDR_OWVAR 42
31277: PUSH
31278: LD_INT 0
31280: ST_TO_ADDR
31281: GO 31895
31283: LD_INT 2
31285: DOUBLE
31286: EQUAL
31287: IFTRUE 31291
31289: GO 31302
31291: POP
// bc_type := b_warehouse ; 3 :
31292: LD_ADDR_OWVAR 42
31296: PUSH
31297: LD_INT 1
31299: ST_TO_ADDR
31300: GO 31895
31302: LD_INT 3
31304: DOUBLE
31305: EQUAL
31306: IFTRUE 31310
31308: GO 31321
31310: POP
// bc_type := b_lab ; 4 .. 9 :
31311: LD_ADDR_OWVAR 42
31315: PUSH
31316: LD_INT 6
31318: ST_TO_ADDR
31319: GO 31895
31321: LD_INT 4
31323: DOUBLE
31324: GREATEREQUAL
31325: IFFALSE 31333
31327: LD_INT 9
31329: DOUBLE
31330: LESSEQUAL
31331: IFTRUE 31335
31333: GO 31387
31335: POP
// begin bc_type := b_lab_half ;
31336: LD_ADDR_OWVAR 42
31340: PUSH
31341: LD_INT 7
31343: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31344: LD_ADDR_OWVAR 44
31348: PUSH
31349: LD_INT 10
31351: PUSH
31352: LD_INT 11
31354: PUSH
31355: LD_INT 12
31357: PUSH
31358: LD_INT 15
31360: PUSH
31361: LD_INT 14
31363: PUSH
31364: LD_INT 13
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: PUSH
31375: LD_VAR 0 2
31379: PUSH
31380: LD_INT 3
31382: MINUS
31383: ARRAY
31384: ST_TO_ADDR
// end ; 10 .. 13 :
31385: GO 31895
31387: LD_INT 10
31389: DOUBLE
31390: GREATEREQUAL
31391: IFFALSE 31399
31393: LD_INT 13
31395: DOUBLE
31396: LESSEQUAL
31397: IFTRUE 31401
31399: GO 31478
31401: POP
// begin bc_type := b_lab_full ;
31402: LD_ADDR_OWVAR 42
31406: PUSH
31407: LD_INT 8
31409: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31410: LD_ADDR_OWVAR 44
31414: PUSH
31415: LD_INT 10
31417: PUSH
31418: LD_INT 12
31420: PUSH
31421: LD_INT 14
31423: PUSH
31424: LD_INT 13
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: PUSH
31433: LD_VAR 0 2
31437: PUSH
31438: LD_INT 9
31440: MINUS
31441: ARRAY
31442: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31443: LD_ADDR_OWVAR 45
31447: PUSH
31448: LD_INT 11
31450: PUSH
31451: LD_INT 15
31453: PUSH
31454: LD_INT 12
31456: PUSH
31457: LD_INT 15
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: PUSH
31466: LD_VAR 0 2
31470: PUSH
31471: LD_INT 9
31473: MINUS
31474: ARRAY
31475: ST_TO_ADDR
// end ; 14 :
31476: GO 31895
31478: LD_INT 14
31480: DOUBLE
31481: EQUAL
31482: IFTRUE 31486
31484: GO 31497
31486: POP
// bc_type := b_workshop ; 15 :
31487: LD_ADDR_OWVAR 42
31491: PUSH
31492: LD_INT 2
31494: ST_TO_ADDR
31495: GO 31895
31497: LD_INT 15
31499: DOUBLE
31500: EQUAL
31501: IFTRUE 31505
31503: GO 31516
31505: POP
// bc_type := b_factory ; 16 :
31506: LD_ADDR_OWVAR 42
31510: PUSH
31511: LD_INT 3
31513: ST_TO_ADDR
31514: GO 31895
31516: LD_INT 16
31518: DOUBLE
31519: EQUAL
31520: IFTRUE 31524
31522: GO 31535
31524: POP
// bc_type := b_ext_gun ; 17 :
31525: LD_ADDR_OWVAR 42
31529: PUSH
31530: LD_INT 17
31532: ST_TO_ADDR
31533: GO 31895
31535: LD_INT 17
31537: DOUBLE
31538: EQUAL
31539: IFTRUE 31543
31541: GO 31571
31543: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31544: LD_ADDR_OWVAR 42
31548: PUSH
31549: LD_INT 19
31551: PUSH
31552: LD_INT 23
31554: PUSH
31555: LD_INT 19
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: LIST
31562: PUSH
31563: LD_VAR 0 1
31567: ARRAY
31568: ST_TO_ADDR
31569: GO 31895
31571: LD_INT 18
31573: DOUBLE
31574: EQUAL
31575: IFTRUE 31579
31577: GO 31590
31579: POP
// bc_type := b_ext_radar ; 19 :
31580: LD_ADDR_OWVAR 42
31584: PUSH
31585: LD_INT 20
31587: ST_TO_ADDR
31588: GO 31895
31590: LD_INT 19
31592: DOUBLE
31593: EQUAL
31594: IFTRUE 31598
31596: GO 31609
31598: POP
// bc_type := b_ext_radio ; 20 :
31599: LD_ADDR_OWVAR 42
31603: PUSH
31604: LD_INT 22
31606: ST_TO_ADDR
31607: GO 31895
31609: LD_INT 20
31611: DOUBLE
31612: EQUAL
31613: IFTRUE 31617
31615: GO 31628
31617: POP
// bc_type := b_ext_siberium ; 21 :
31618: LD_ADDR_OWVAR 42
31622: PUSH
31623: LD_INT 21
31625: ST_TO_ADDR
31626: GO 31895
31628: LD_INT 21
31630: DOUBLE
31631: EQUAL
31632: IFTRUE 31636
31634: GO 31647
31636: POP
// bc_type := b_ext_computer ; 22 :
31637: LD_ADDR_OWVAR 42
31641: PUSH
31642: LD_INT 24
31644: ST_TO_ADDR
31645: GO 31895
31647: LD_INT 22
31649: DOUBLE
31650: EQUAL
31651: IFTRUE 31655
31653: GO 31666
31655: POP
// bc_type := b_ext_track ; 23 :
31656: LD_ADDR_OWVAR 42
31660: PUSH
31661: LD_INT 16
31663: ST_TO_ADDR
31664: GO 31895
31666: LD_INT 23
31668: DOUBLE
31669: EQUAL
31670: IFTRUE 31674
31672: GO 31685
31674: POP
// bc_type := b_ext_laser ; 24 :
31675: LD_ADDR_OWVAR 42
31679: PUSH
31680: LD_INT 25
31682: ST_TO_ADDR
31683: GO 31895
31685: LD_INT 24
31687: DOUBLE
31688: EQUAL
31689: IFTRUE 31693
31691: GO 31704
31693: POP
// bc_type := b_control_tower ; 25 :
31694: LD_ADDR_OWVAR 42
31698: PUSH
31699: LD_INT 36
31701: ST_TO_ADDR
31702: GO 31895
31704: LD_INT 25
31706: DOUBLE
31707: EQUAL
31708: IFTRUE 31712
31710: GO 31723
31712: POP
// bc_type := b_breastwork ; 26 :
31713: LD_ADDR_OWVAR 42
31717: PUSH
31718: LD_INT 31
31720: ST_TO_ADDR
31721: GO 31895
31723: LD_INT 26
31725: DOUBLE
31726: EQUAL
31727: IFTRUE 31731
31729: GO 31742
31731: POP
// bc_type := b_bunker ; 27 :
31732: LD_ADDR_OWVAR 42
31736: PUSH
31737: LD_INT 32
31739: ST_TO_ADDR
31740: GO 31895
31742: LD_INT 27
31744: DOUBLE
31745: EQUAL
31746: IFTRUE 31750
31748: GO 31761
31750: POP
// bc_type := b_turret ; 28 :
31751: LD_ADDR_OWVAR 42
31755: PUSH
31756: LD_INT 33
31758: ST_TO_ADDR
31759: GO 31895
31761: LD_INT 28
31763: DOUBLE
31764: EQUAL
31765: IFTRUE 31769
31767: GO 31780
31769: POP
// bc_type := b_armoury ; 29 :
31770: LD_ADDR_OWVAR 42
31774: PUSH
31775: LD_INT 4
31777: ST_TO_ADDR
31778: GO 31895
31780: LD_INT 29
31782: DOUBLE
31783: EQUAL
31784: IFTRUE 31788
31786: GO 31799
31788: POP
// bc_type := b_barracks ; 30 :
31789: LD_ADDR_OWVAR 42
31793: PUSH
31794: LD_INT 5
31796: ST_TO_ADDR
31797: GO 31895
31799: LD_INT 30
31801: DOUBLE
31802: EQUAL
31803: IFTRUE 31807
31805: GO 31818
31807: POP
// bc_type := b_solar_power ; 31 :
31808: LD_ADDR_OWVAR 42
31812: PUSH
31813: LD_INT 27
31815: ST_TO_ADDR
31816: GO 31895
31818: LD_INT 31
31820: DOUBLE
31821: EQUAL
31822: IFTRUE 31826
31824: GO 31837
31826: POP
// bc_type := b_oil_power ; 32 :
31827: LD_ADDR_OWVAR 42
31831: PUSH
31832: LD_INT 26
31834: ST_TO_ADDR
31835: GO 31895
31837: LD_INT 32
31839: DOUBLE
31840: EQUAL
31841: IFTRUE 31845
31843: GO 31856
31845: POP
// bc_type := b_siberite_power ; 33 :
31846: LD_ADDR_OWVAR 42
31850: PUSH
31851: LD_INT 28
31853: ST_TO_ADDR
31854: GO 31895
31856: LD_INT 33
31858: DOUBLE
31859: EQUAL
31860: IFTRUE 31864
31862: GO 31875
31864: POP
// bc_type := b_oil_mine ; 34 :
31865: LD_ADDR_OWVAR 42
31869: PUSH
31870: LD_INT 29
31872: ST_TO_ADDR
31873: GO 31895
31875: LD_INT 34
31877: DOUBLE
31878: EQUAL
31879: IFTRUE 31883
31881: GO 31894
31883: POP
// bc_type := b_siberite_mine ; end ;
31884: LD_ADDR_OWVAR 42
31888: PUSH
31889: LD_INT 30
31891: ST_TO_ADDR
31892: GO 31895
31894: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31895: LD_ADDR_VAR 0 8
31899: PUSH
31900: LD_VAR 0 5
31904: PPUSH
31905: LD_VAR 0 6
31909: PPUSH
31910: LD_VAR 0 3
31914: PPUSH
31915: CALL_OW 47
31919: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31920: LD_OWVAR 42
31924: PUSH
31925: LD_INT 32
31927: PUSH
31928: LD_INT 33
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: IN
31935: IFFALSE 31951
// PlaceWeaponTurret ( b , weapon ) ;
31937: LD_VAR 0 8
31941: PPUSH
31942: LD_VAR 0 4
31946: PPUSH
31947: CALL_OW 431
// end ;
31951: LD_VAR 0 7
31955: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31956: LD_INT 0
31958: PPUSH
31959: PPUSH
31960: PPUSH
31961: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31962: LD_ADDR_VAR 0 4
31966: PUSH
31967: LD_INT 22
31969: PUSH
31970: LD_OWVAR 2
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 2
31981: PUSH
31982: LD_INT 30
31984: PUSH
31985: LD_INT 0
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 30
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: LIST
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PPUSH
32011: CALL_OW 69
32015: ST_TO_ADDR
// if not tmp then
32016: LD_VAR 0 4
32020: NOT
32021: IFFALSE 32025
// exit ;
32023: GO 32084
// for i in tmp do
32025: LD_ADDR_VAR 0 2
32029: PUSH
32030: LD_VAR 0 4
32034: PUSH
32035: FOR_IN
32036: IFFALSE 32082
// for j = 1 to 3 do
32038: LD_ADDR_VAR 0 3
32042: PUSH
32043: DOUBLE
32044: LD_INT 1
32046: DEC
32047: ST_TO_ADDR
32048: LD_INT 3
32050: PUSH
32051: FOR_TO
32052: IFFALSE 32078
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32054: LD_VAR 0 2
32058: PPUSH
32059: CALL_OW 274
32063: PPUSH
32064: LD_VAR 0 3
32068: PPUSH
32069: LD_INT 99999
32071: PPUSH
32072: CALL_OW 277
32076: GO 32051
32078: POP
32079: POP
32080: GO 32035
32082: POP
32083: POP
// end ;
32084: LD_VAR 0 1
32088: RET
// export function hHackSetLevel10 ; var i , j ; begin
32089: LD_INT 0
32091: PPUSH
32092: PPUSH
32093: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32094: LD_ADDR_VAR 0 2
32098: PUSH
32099: LD_INT 21
32101: PUSH
32102: LD_INT 1
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PPUSH
32109: CALL_OW 69
32113: PUSH
32114: FOR_IN
32115: IFFALSE 32167
// if IsSelected ( i ) then
32117: LD_VAR 0 2
32121: PPUSH
32122: CALL_OW 306
32126: IFFALSE 32165
// begin for j := 1 to 4 do
32128: LD_ADDR_VAR 0 3
32132: PUSH
32133: DOUBLE
32134: LD_INT 1
32136: DEC
32137: ST_TO_ADDR
32138: LD_INT 4
32140: PUSH
32141: FOR_TO
32142: IFFALSE 32163
// SetSkill ( i , j , 10 ) ;
32144: LD_VAR 0 2
32148: PPUSH
32149: LD_VAR 0 3
32153: PPUSH
32154: LD_INT 10
32156: PPUSH
32157: CALL_OW 237
32161: GO 32141
32163: POP
32164: POP
// end ;
32165: GO 32114
32167: POP
32168: POP
// end ;
32169: LD_VAR 0 1
32173: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32174: LD_INT 0
32176: PPUSH
32177: PPUSH
32178: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32179: LD_ADDR_VAR 0 2
32183: PUSH
32184: LD_INT 22
32186: PUSH
32187: LD_OWVAR 2
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 21
32198: PUSH
32199: LD_INT 1
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PPUSH
32210: CALL_OW 69
32214: PUSH
32215: FOR_IN
32216: IFFALSE 32257
// begin for j := 1 to 4 do
32218: LD_ADDR_VAR 0 3
32222: PUSH
32223: DOUBLE
32224: LD_INT 1
32226: DEC
32227: ST_TO_ADDR
32228: LD_INT 4
32230: PUSH
32231: FOR_TO
32232: IFFALSE 32253
// SetSkill ( i , j , 10 ) ;
32234: LD_VAR 0 2
32238: PPUSH
32239: LD_VAR 0 3
32243: PPUSH
32244: LD_INT 10
32246: PPUSH
32247: CALL_OW 237
32251: GO 32231
32253: POP
32254: POP
// end ;
32255: GO 32215
32257: POP
32258: POP
// end ;
32259: LD_VAR 0 1
32263: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32264: LD_INT 0
32266: PPUSH
// uc_side := your_side ;
32267: LD_ADDR_OWVAR 20
32271: PUSH
32272: LD_OWVAR 2
32276: ST_TO_ADDR
// uc_nation := nation ;
32277: LD_ADDR_OWVAR 21
32281: PUSH
32282: LD_VAR 0 1
32286: ST_TO_ADDR
// InitHc ;
32287: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32291: LD_INT 0
32293: PPUSH
32294: LD_VAR 0 2
32298: PPUSH
32299: LD_VAR 0 3
32303: PPUSH
32304: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32308: LD_VAR 0 4
32312: PPUSH
32313: LD_VAR 0 5
32317: PPUSH
32318: CALL_OW 428
32322: PUSH
32323: LD_INT 0
32325: EQUAL
32326: IFFALSE 32350
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32328: CALL_OW 44
32332: PPUSH
32333: LD_VAR 0 4
32337: PPUSH
32338: LD_VAR 0 5
32342: PPUSH
32343: LD_INT 1
32345: PPUSH
32346: CALL_OW 48
// end ;
32350: LD_VAR 0 6
32354: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32355: LD_INT 0
32357: PPUSH
32358: PPUSH
// uc_side := your_side ;
32359: LD_ADDR_OWVAR 20
32363: PUSH
32364: LD_OWVAR 2
32368: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32369: LD_VAR 0 1
32373: PUSH
32374: LD_INT 1
32376: PUSH
32377: LD_INT 2
32379: PUSH
32380: LD_INT 3
32382: PUSH
32383: LD_INT 4
32385: PUSH
32386: LD_INT 5
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: IN
32396: IFFALSE 32408
// uc_nation := nation_american else
32398: LD_ADDR_OWVAR 21
32402: PUSH
32403: LD_INT 1
32405: ST_TO_ADDR
32406: GO 32451
// if chassis in [ 11 , 12 , 13 , 14 ] then
32408: LD_VAR 0 1
32412: PUSH
32413: LD_INT 11
32415: PUSH
32416: LD_INT 12
32418: PUSH
32419: LD_INT 13
32421: PUSH
32422: LD_INT 14
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: IN
32431: IFFALSE 32443
// uc_nation := nation_arabian else
32433: LD_ADDR_OWVAR 21
32437: PUSH
32438: LD_INT 2
32440: ST_TO_ADDR
32441: GO 32451
// uc_nation := nation_russian ;
32443: LD_ADDR_OWVAR 21
32447: PUSH
32448: LD_INT 3
32450: ST_TO_ADDR
// vc_chassis := chassis ;
32451: LD_ADDR_OWVAR 37
32455: PUSH
32456: LD_VAR 0 1
32460: ST_TO_ADDR
// vc_engine := engine ;
32461: LD_ADDR_OWVAR 39
32465: PUSH
32466: LD_VAR 0 2
32470: ST_TO_ADDR
// vc_control := control ;
32471: LD_ADDR_OWVAR 38
32475: PUSH
32476: LD_VAR 0 3
32480: ST_TO_ADDR
// vc_weapon := weapon ;
32481: LD_ADDR_OWVAR 40
32485: PUSH
32486: LD_VAR 0 4
32490: ST_TO_ADDR
// un := CreateVehicle ;
32491: LD_ADDR_VAR 0 8
32495: PUSH
32496: CALL_OW 45
32500: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32501: LD_VAR 0 8
32505: PPUSH
32506: LD_INT 0
32508: PPUSH
32509: LD_INT 5
32511: PPUSH
32512: CALL_OW 12
32516: PPUSH
32517: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32521: LD_VAR 0 8
32525: PPUSH
32526: LD_VAR 0 5
32530: PPUSH
32531: LD_VAR 0 6
32535: PPUSH
32536: LD_INT 1
32538: PPUSH
32539: CALL_OW 48
// end ;
32543: LD_VAR 0 7
32547: RET
// export hInvincible ; every 1 do
32548: GO 32550
32550: DISABLE
// hInvincible := [ ] ;
32551: LD_ADDR_EXP 119
32555: PUSH
32556: EMPTY
32557: ST_TO_ADDR
32558: END
// every 10 do var i ;
32559: GO 32561
32561: DISABLE
32562: LD_INT 0
32564: PPUSH
// begin enable ;
32565: ENABLE
// if not hInvincible then
32566: LD_EXP 119
32570: NOT
32571: IFFALSE 32575
// exit ;
32573: GO 32619
// for i in hInvincible do
32575: LD_ADDR_VAR 0 1
32579: PUSH
32580: LD_EXP 119
32584: PUSH
32585: FOR_IN
32586: IFFALSE 32617
// if GetLives ( i ) < 1000 then
32588: LD_VAR 0 1
32592: PPUSH
32593: CALL_OW 256
32597: PUSH
32598: LD_INT 1000
32600: LESS
32601: IFFALSE 32615
// SetLives ( i , 1000 ) ;
32603: LD_VAR 0 1
32607: PPUSH
32608: LD_INT 1000
32610: PPUSH
32611: CALL_OW 234
32615: GO 32585
32617: POP
32618: POP
// end ;
32619: PPOPN 1
32621: END
// export function hHackInvincible ; var i ; begin
32622: LD_INT 0
32624: PPUSH
32625: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32626: LD_ADDR_VAR 0 2
32630: PUSH
32631: LD_INT 2
32633: PUSH
32634: LD_INT 21
32636: PUSH
32637: LD_INT 1
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 21
32646: PUSH
32647: LD_INT 2
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: LIST
32658: PPUSH
32659: CALL_OW 69
32663: PUSH
32664: FOR_IN
32665: IFFALSE 32726
// if IsSelected ( i ) then
32667: LD_VAR 0 2
32671: PPUSH
32672: CALL_OW 306
32676: IFFALSE 32724
// begin if i in hInvincible then
32678: LD_VAR 0 2
32682: PUSH
32683: LD_EXP 119
32687: IN
32688: IFFALSE 32708
// hInvincible := hInvincible diff i else
32690: LD_ADDR_EXP 119
32694: PUSH
32695: LD_EXP 119
32699: PUSH
32700: LD_VAR 0 2
32704: DIFF
32705: ST_TO_ADDR
32706: GO 32724
// hInvincible := hInvincible union i ;
32708: LD_ADDR_EXP 119
32712: PUSH
32713: LD_EXP 119
32717: PUSH
32718: LD_VAR 0 2
32722: UNION
32723: ST_TO_ADDR
// end ;
32724: GO 32664
32726: POP
32727: POP
// end ;
32728: LD_VAR 0 1
32732: RET
// export function hHackInvisible ; var i , j ; begin
32733: LD_INT 0
32735: PPUSH
32736: PPUSH
32737: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32738: LD_ADDR_VAR 0 2
32742: PUSH
32743: LD_INT 21
32745: PUSH
32746: LD_INT 1
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PPUSH
32753: CALL_OW 69
32757: PUSH
32758: FOR_IN
32759: IFFALSE 32783
// if IsSelected ( i ) then
32761: LD_VAR 0 2
32765: PPUSH
32766: CALL_OW 306
32770: IFFALSE 32781
// ComForceInvisible ( i ) ;
32772: LD_VAR 0 2
32776: PPUSH
32777: CALL_OW 496
32781: GO 32758
32783: POP
32784: POP
// end ;
32785: LD_VAR 0 1
32789: RET
// export function hHackChangeYourSide ; begin
32790: LD_INT 0
32792: PPUSH
// if your_side = 8 then
32793: LD_OWVAR 2
32797: PUSH
32798: LD_INT 8
32800: EQUAL
32801: IFFALSE 32813
// your_side := 0 else
32803: LD_ADDR_OWVAR 2
32807: PUSH
32808: LD_INT 0
32810: ST_TO_ADDR
32811: GO 32827
// your_side := your_side + 1 ;
32813: LD_ADDR_OWVAR 2
32817: PUSH
32818: LD_OWVAR 2
32822: PUSH
32823: LD_INT 1
32825: PLUS
32826: ST_TO_ADDR
// end ;
32827: LD_VAR 0 1
32831: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32832: LD_INT 0
32834: PPUSH
32835: PPUSH
32836: PPUSH
// for i in all_units do
32837: LD_ADDR_VAR 0 2
32841: PUSH
32842: LD_OWVAR 3
32846: PUSH
32847: FOR_IN
32848: IFFALSE 32926
// if IsSelected ( i ) then
32850: LD_VAR 0 2
32854: PPUSH
32855: CALL_OW 306
32859: IFFALSE 32924
// begin j := GetSide ( i ) ;
32861: LD_ADDR_VAR 0 3
32865: PUSH
32866: LD_VAR 0 2
32870: PPUSH
32871: CALL_OW 255
32875: ST_TO_ADDR
// if j = 8 then
32876: LD_VAR 0 3
32880: PUSH
32881: LD_INT 8
32883: EQUAL
32884: IFFALSE 32896
// j := 0 else
32886: LD_ADDR_VAR 0 3
32890: PUSH
32891: LD_INT 0
32893: ST_TO_ADDR
32894: GO 32910
// j := j + 1 ;
32896: LD_ADDR_VAR 0 3
32900: PUSH
32901: LD_VAR 0 3
32905: PUSH
32906: LD_INT 1
32908: PLUS
32909: ST_TO_ADDR
// SetSide ( i , j ) ;
32910: LD_VAR 0 2
32914: PPUSH
32915: LD_VAR 0 3
32919: PPUSH
32920: CALL_OW 235
// end ;
32924: GO 32847
32926: POP
32927: POP
// end ;
32928: LD_VAR 0 1
32932: RET
// export function hHackFog ; begin
32933: LD_INT 0
32935: PPUSH
// FogOff ( true ) ;
32936: LD_INT 1
32938: PPUSH
32939: CALL_OW 344
// end ;
32943: LD_VAR 0 1
32947: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32948: LD_INT 0
32950: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32951: LD_VAR 0 1
32955: PPUSH
32956: LD_VAR 0 2
32960: PPUSH
32961: LD_VAR 0 3
32965: PPUSH
32966: LD_INT 1
32968: PPUSH
32969: LD_INT 1
32971: PPUSH
32972: CALL_OW 483
// CenterOnXY ( x , y ) ;
32976: LD_VAR 0 2
32980: PPUSH
32981: LD_VAR 0 3
32985: PPUSH
32986: CALL_OW 84
// end ;
32990: LD_VAR 0 4
32994: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32995: LD_INT 0
32997: PPUSH
32998: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32999: LD_VAR 0 1
33003: NOT
33004: PUSH
33005: LD_VAR 0 2
33009: PPUSH
33010: LD_VAR 0 3
33014: PPUSH
33015: CALL_OW 488
33019: NOT
33020: OR
33021: PUSH
33022: LD_VAR 0 1
33026: PPUSH
33027: CALL_OW 266
33031: PUSH
33032: LD_INT 3
33034: NONEQUAL
33035: PUSH
33036: LD_VAR 0 1
33040: PPUSH
33041: CALL_OW 247
33045: PUSH
33046: LD_INT 1
33048: EQUAL
33049: NOT
33050: AND
33051: OR
33052: IFFALSE 33056
// exit ;
33054: GO 33205
// if GetType ( factory ) = unit_human then
33056: LD_VAR 0 1
33060: PPUSH
33061: CALL_OW 247
33065: PUSH
33066: LD_INT 1
33068: EQUAL
33069: IFFALSE 33086
// factory := IsInUnit ( factory ) ;
33071: LD_ADDR_VAR 0 1
33075: PUSH
33076: LD_VAR 0 1
33080: PPUSH
33081: CALL_OW 310
33085: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33086: LD_VAR 0 1
33090: PPUSH
33091: CALL_OW 266
33095: PUSH
33096: LD_INT 3
33098: NONEQUAL
33099: IFFALSE 33103
// exit ;
33101: GO 33205
// if HexInfo ( x , y ) = factory then
33103: LD_VAR 0 2
33107: PPUSH
33108: LD_VAR 0 3
33112: PPUSH
33113: CALL_OW 428
33117: PUSH
33118: LD_VAR 0 1
33122: EQUAL
33123: IFFALSE 33150
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33125: LD_ADDR_EXP 120
33129: PUSH
33130: LD_EXP 120
33134: PPUSH
33135: LD_VAR 0 1
33139: PPUSH
33140: LD_INT 0
33142: PPUSH
33143: CALL_OW 1
33147: ST_TO_ADDR
33148: GO 33201
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33150: LD_ADDR_EXP 120
33154: PUSH
33155: LD_EXP 120
33159: PPUSH
33160: LD_VAR 0 1
33164: PPUSH
33165: LD_VAR 0 1
33169: PPUSH
33170: CALL_OW 255
33174: PUSH
33175: LD_VAR 0 1
33179: PUSH
33180: LD_VAR 0 2
33184: PUSH
33185: LD_VAR 0 3
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: PPUSH
33196: CALL_OW 1
33200: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33201: CALL 33210 0 0
// end ;
33205: LD_VAR 0 4
33209: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33210: LD_INT 0
33212: PPUSH
33213: PPUSH
33214: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33215: LD_STRING resetFactoryWaypoint();
33217: PPUSH
33218: CALL_OW 559
// if factoryWaypoints then
33222: LD_EXP 120
33226: IFFALSE 33352
// begin list := PrepareArray ( factoryWaypoints ) ;
33228: LD_ADDR_VAR 0 3
33232: PUSH
33233: LD_EXP 120
33237: PPUSH
33238: CALL 79729 0 1
33242: ST_TO_ADDR
// for i := 1 to list do
33243: LD_ADDR_VAR 0 2
33247: PUSH
33248: DOUBLE
33249: LD_INT 1
33251: DEC
33252: ST_TO_ADDR
33253: LD_VAR 0 3
33257: PUSH
33258: FOR_TO
33259: IFFALSE 33350
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33261: LD_STRING setFactoryWaypointXY(
33263: PUSH
33264: LD_VAR 0 3
33268: PUSH
33269: LD_VAR 0 2
33273: ARRAY
33274: PUSH
33275: LD_INT 1
33277: ARRAY
33278: STR
33279: PUSH
33280: LD_STRING ,
33282: STR
33283: PUSH
33284: LD_VAR 0 3
33288: PUSH
33289: LD_VAR 0 2
33293: ARRAY
33294: PUSH
33295: LD_INT 2
33297: ARRAY
33298: STR
33299: PUSH
33300: LD_STRING ,
33302: STR
33303: PUSH
33304: LD_VAR 0 3
33308: PUSH
33309: LD_VAR 0 2
33313: ARRAY
33314: PUSH
33315: LD_INT 3
33317: ARRAY
33318: STR
33319: PUSH
33320: LD_STRING ,
33322: STR
33323: PUSH
33324: LD_VAR 0 3
33328: PUSH
33329: LD_VAR 0 2
33333: ARRAY
33334: PUSH
33335: LD_INT 4
33337: ARRAY
33338: STR
33339: PUSH
33340: LD_STRING )
33342: STR
33343: PPUSH
33344: CALL_OW 559
33348: GO 33258
33350: POP
33351: POP
// end ; end ;
33352: LD_VAR 0 1
33356: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33357: LD_INT 0
33359: PPUSH
// if HexInfo ( x , y ) = warehouse then
33360: LD_VAR 0 2
33364: PPUSH
33365: LD_VAR 0 3
33369: PPUSH
33370: CALL_OW 428
33374: PUSH
33375: LD_VAR 0 1
33379: EQUAL
33380: IFFALSE 33407
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33382: LD_ADDR_EXP 121
33386: PUSH
33387: LD_EXP 121
33391: PPUSH
33392: LD_VAR 0 1
33396: PPUSH
33397: LD_INT 0
33399: PPUSH
33400: CALL_OW 1
33404: ST_TO_ADDR
33405: GO 33458
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33407: LD_ADDR_EXP 121
33411: PUSH
33412: LD_EXP 121
33416: PPUSH
33417: LD_VAR 0 1
33421: PPUSH
33422: LD_VAR 0 1
33426: PPUSH
33427: CALL_OW 255
33431: PUSH
33432: LD_VAR 0 1
33436: PUSH
33437: LD_VAR 0 2
33441: PUSH
33442: LD_VAR 0 3
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: PPUSH
33453: CALL_OW 1
33457: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33458: CALL 33467 0 0
// end ;
33462: LD_VAR 0 4
33466: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33467: LD_INT 0
33469: PPUSH
33470: PPUSH
33471: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33472: LD_STRING resetWarehouseGatheringPoints();
33474: PPUSH
33475: CALL_OW 559
// if warehouseGatheringPoints then
33479: LD_EXP 121
33483: IFFALSE 33609
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33485: LD_ADDR_VAR 0 3
33489: PUSH
33490: LD_EXP 121
33494: PPUSH
33495: CALL 79729 0 1
33499: ST_TO_ADDR
// for i := 1 to list do
33500: LD_ADDR_VAR 0 2
33504: PUSH
33505: DOUBLE
33506: LD_INT 1
33508: DEC
33509: ST_TO_ADDR
33510: LD_VAR 0 3
33514: PUSH
33515: FOR_TO
33516: IFFALSE 33607
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33518: LD_STRING setWarehouseGatheringPointXY(
33520: PUSH
33521: LD_VAR 0 3
33525: PUSH
33526: LD_VAR 0 2
33530: ARRAY
33531: PUSH
33532: LD_INT 1
33534: ARRAY
33535: STR
33536: PUSH
33537: LD_STRING ,
33539: STR
33540: PUSH
33541: LD_VAR 0 3
33545: PUSH
33546: LD_VAR 0 2
33550: ARRAY
33551: PUSH
33552: LD_INT 2
33554: ARRAY
33555: STR
33556: PUSH
33557: LD_STRING ,
33559: STR
33560: PUSH
33561: LD_VAR 0 3
33565: PUSH
33566: LD_VAR 0 2
33570: ARRAY
33571: PUSH
33572: LD_INT 3
33574: ARRAY
33575: STR
33576: PUSH
33577: LD_STRING ,
33579: STR
33580: PUSH
33581: LD_VAR 0 3
33585: PUSH
33586: LD_VAR 0 2
33590: ARRAY
33591: PUSH
33592: LD_INT 4
33594: ARRAY
33595: STR
33596: PUSH
33597: LD_STRING )
33599: STR
33600: PPUSH
33601: CALL_OW 559
33605: GO 33515
33607: POP
33608: POP
// end ; end ;
33609: LD_VAR 0 1
33613: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33614: LD_EXP 121
33618: IFFALSE 34303
33620: GO 33622
33622: DISABLE
33623: LD_INT 0
33625: PPUSH
33626: PPUSH
33627: PPUSH
33628: PPUSH
33629: PPUSH
33630: PPUSH
33631: PPUSH
33632: PPUSH
33633: PPUSH
// begin enable ;
33634: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33635: LD_ADDR_VAR 0 3
33639: PUSH
33640: LD_EXP 121
33644: PPUSH
33645: CALL 79729 0 1
33649: ST_TO_ADDR
// if not list then
33650: LD_VAR 0 3
33654: NOT
33655: IFFALSE 33659
// exit ;
33657: GO 34303
// for i := 1 to list do
33659: LD_ADDR_VAR 0 1
33663: PUSH
33664: DOUBLE
33665: LD_INT 1
33667: DEC
33668: ST_TO_ADDR
33669: LD_VAR 0 3
33673: PUSH
33674: FOR_TO
33675: IFFALSE 34301
// begin depot := list [ i ] [ 2 ] ;
33677: LD_ADDR_VAR 0 8
33681: PUSH
33682: LD_VAR 0 3
33686: PUSH
33687: LD_VAR 0 1
33691: ARRAY
33692: PUSH
33693: LD_INT 2
33695: ARRAY
33696: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33697: LD_ADDR_VAR 0 5
33701: PUSH
33702: LD_VAR 0 3
33706: PUSH
33707: LD_VAR 0 1
33711: ARRAY
33712: PUSH
33713: LD_INT 1
33715: ARRAY
33716: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33717: LD_VAR 0 8
33721: PPUSH
33722: CALL_OW 301
33726: PUSH
33727: LD_VAR 0 5
33731: PUSH
33732: LD_VAR 0 8
33736: PPUSH
33737: CALL_OW 255
33741: NONEQUAL
33742: OR
33743: IFFALSE 33772
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33745: LD_ADDR_EXP 121
33749: PUSH
33750: LD_EXP 121
33754: PPUSH
33755: LD_VAR 0 8
33759: PPUSH
33760: LD_INT 0
33762: PPUSH
33763: CALL_OW 1
33767: ST_TO_ADDR
// exit ;
33768: POP
33769: POP
33770: GO 34303
// end ; x := list [ i ] [ 3 ] ;
33772: LD_ADDR_VAR 0 6
33776: PUSH
33777: LD_VAR 0 3
33781: PUSH
33782: LD_VAR 0 1
33786: ARRAY
33787: PUSH
33788: LD_INT 3
33790: ARRAY
33791: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33792: LD_ADDR_VAR 0 7
33796: PUSH
33797: LD_VAR 0 3
33801: PUSH
33802: LD_VAR 0 1
33806: ARRAY
33807: PUSH
33808: LD_INT 4
33810: ARRAY
33811: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33812: LD_ADDR_VAR 0 9
33816: PUSH
33817: LD_VAR 0 6
33821: PPUSH
33822: LD_VAR 0 7
33826: PPUSH
33827: LD_INT 16
33829: PPUSH
33830: CALL 78317 0 3
33834: ST_TO_ADDR
// if not cratesNearbyPoint then
33835: LD_VAR 0 9
33839: NOT
33840: IFFALSE 33846
// exit ;
33842: POP
33843: POP
33844: GO 34303
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33846: LD_ADDR_VAR 0 4
33850: PUSH
33851: LD_INT 22
33853: PUSH
33854: LD_VAR 0 5
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 3
33865: PUSH
33866: LD_INT 60
33868: PUSH
33869: EMPTY
33870: LIST
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 91
33878: PUSH
33879: LD_VAR 0 8
33883: PUSH
33884: LD_INT 6
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 2
33894: PUSH
33895: LD_INT 25
33897: PUSH
33898: LD_INT 2
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 25
33907: PUSH
33908: LD_INT 16
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: LIST
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: PPUSH
33926: CALL_OW 69
33930: PUSH
33931: LD_VAR 0 8
33935: PPUSH
33936: CALL_OW 313
33940: PPUSH
33941: LD_INT 3
33943: PUSH
33944: LD_INT 60
33946: PUSH
33947: EMPTY
33948: LIST
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 2
33956: PUSH
33957: LD_INT 25
33959: PUSH
33960: LD_INT 2
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 25
33969: PUSH
33970: LD_INT 16
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: LIST
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PPUSH
33986: CALL_OW 72
33990: UNION
33991: ST_TO_ADDR
// if tmp then
33992: LD_VAR 0 4
33996: IFFALSE 34076
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33998: LD_ADDR_VAR 0 4
34002: PUSH
34003: LD_VAR 0 4
34007: PPUSH
34008: LD_INT 3
34010: PPUSH
34011: CALL 76286 0 2
34015: ST_TO_ADDR
// for j in tmp do
34016: LD_ADDR_VAR 0 2
34020: PUSH
34021: LD_VAR 0 4
34025: PUSH
34026: FOR_IN
34027: IFFALSE 34070
// begin if IsInUnit ( j ) then
34029: LD_VAR 0 2
34033: PPUSH
34034: CALL_OW 310
34038: IFFALSE 34049
// ComExit ( j ) ;
34040: LD_VAR 0 2
34044: PPUSH
34045: CALL 76369 0 1
// AddComCollect ( j , x , y ) ;
34049: LD_VAR 0 2
34053: PPUSH
34054: LD_VAR 0 6
34058: PPUSH
34059: LD_VAR 0 7
34063: PPUSH
34064: CALL_OW 177
// end ;
34068: GO 34026
34070: POP
34071: POP
// exit ;
34072: POP
34073: POP
34074: GO 34303
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34076: LD_ADDR_VAR 0 4
34080: PUSH
34081: LD_INT 22
34083: PUSH
34084: LD_VAR 0 5
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 91
34095: PUSH
34096: LD_VAR 0 8
34100: PUSH
34101: LD_INT 8
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 2
34111: PUSH
34112: LD_INT 34
34114: PUSH
34115: LD_INT 12
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 34
34124: PUSH
34125: LD_INT 51
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 34
34134: PUSH
34135: LD_INT 32
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 34
34144: PUSH
34145: LD_INT 89
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: LIST
34163: PPUSH
34164: CALL_OW 69
34168: ST_TO_ADDR
// if tmp then
34169: LD_VAR 0 4
34173: IFFALSE 34299
// begin for j in tmp do
34175: LD_ADDR_VAR 0 2
34179: PUSH
34180: LD_VAR 0 4
34184: PUSH
34185: FOR_IN
34186: IFFALSE 34297
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34188: LD_VAR 0 2
34192: PPUSH
34193: CALL_OW 262
34197: PUSH
34198: LD_INT 3
34200: EQUAL
34201: PUSH
34202: LD_VAR 0 2
34206: PPUSH
34207: CALL_OW 261
34211: PUSH
34212: LD_INT 20
34214: GREATER
34215: OR
34216: PUSH
34217: LD_VAR 0 2
34221: PPUSH
34222: CALL_OW 314
34226: NOT
34227: AND
34228: PUSH
34229: LD_VAR 0 2
34233: PPUSH
34234: CALL_OW 263
34238: PUSH
34239: LD_INT 1
34241: NONEQUAL
34242: PUSH
34243: LD_VAR 0 2
34247: PPUSH
34248: CALL_OW 311
34252: OR
34253: AND
34254: IFFALSE 34295
// begin ComCollect ( j , x , y ) ;
34256: LD_VAR 0 2
34260: PPUSH
34261: LD_VAR 0 6
34265: PPUSH
34266: LD_VAR 0 7
34270: PPUSH
34271: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34275: LD_VAR 0 2
34279: PPUSH
34280: LD_VAR 0 8
34284: PPUSH
34285: CALL_OW 172
// exit ;
34289: POP
34290: POP
34291: POP
34292: POP
34293: GO 34303
// end ;
34295: GO 34185
34297: POP
34298: POP
// end ; end ;
34299: GO 33674
34301: POP
34302: POP
// end ; end_of_file
34303: PPOPN 9
34305: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34306: LD_INT 0
34308: PPUSH
34309: PPUSH
34310: PPUSH
34311: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34312: LD_VAR 0 1
34316: PPUSH
34317: CALL_OW 264
34321: PUSH
34322: LD_INT 91
34324: EQUAL
34325: IFFALSE 34397
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34327: LD_INT 68
34329: PPUSH
34330: LD_VAR 0 1
34334: PPUSH
34335: CALL_OW 255
34339: PPUSH
34340: CALL_OW 321
34344: PUSH
34345: LD_INT 2
34347: EQUAL
34348: IFFALSE 34360
// eff := 70 else
34350: LD_ADDR_VAR 0 4
34354: PUSH
34355: LD_INT 70
34357: ST_TO_ADDR
34358: GO 34368
// eff := 30 ;
34360: LD_ADDR_VAR 0 4
34364: PUSH
34365: LD_INT 30
34367: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34368: LD_VAR 0 1
34372: PPUSH
34373: CALL_OW 250
34377: PPUSH
34378: LD_VAR 0 1
34382: PPUSH
34383: CALL_OW 251
34387: PPUSH
34388: LD_VAR 0 4
34392: PPUSH
34393: CALL_OW 495
// end ; end ;
34397: LD_VAR 0 2
34401: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34402: LD_INT 0
34404: PPUSH
// end ;
34405: LD_VAR 0 4
34409: RET
// export function SOS_Command ( cmd ) ; begin
34410: LD_INT 0
34412: PPUSH
// end ;
34413: LD_VAR 0 2
34417: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34418: LD_INT 0
34420: PPUSH
// end ;
34421: LD_VAR 0 6
34425: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34426: LD_INT 0
34428: PPUSH
34429: PPUSH
// if not vehicle or not factory then
34430: LD_VAR 0 1
34434: NOT
34435: PUSH
34436: LD_VAR 0 2
34440: NOT
34441: OR
34442: IFFALSE 34446
// exit ;
34444: GO 34677
// if factoryWaypoints >= factory then
34446: LD_EXP 120
34450: PUSH
34451: LD_VAR 0 2
34455: GREATEREQUAL
34456: IFFALSE 34677
// if factoryWaypoints [ factory ] then
34458: LD_EXP 120
34462: PUSH
34463: LD_VAR 0 2
34467: ARRAY
34468: IFFALSE 34677
// begin if GetControl ( vehicle ) = control_manual then
34470: LD_VAR 0 1
34474: PPUSH
34475: CALL_OW 263
34479: PUSH
34480: LD_INT 1
34482: EQUAL
34483: IFFALSE 34564
// begin driver := IsDrivenBy ( vehicle ) ;
34485: LD_ADDR_VAR 0 4
34489: PUSH
34490: LD_VAR 0 1
34494: PPUSH
34495: CALL_OW 311
34499: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34500: LD_VAR 0 4
34504: PPUSH
34505: LD_EXP 120
34509: PUSH
34510: LD_VAR 0 2
34514: ARRAY
34515: PUSH
34516: LD_INT 3
34518: ARRAY
34519: PPUSH
34520: LD_EXP 120
34524: PUSH
34525: LD_VAR 0 2
34529: ARRAY
34530: PUSH
34531: LD_INT 4
34533: ARRAY
34534: PPUSH
34535: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34539: LD_VAR 0 4
34543: PPUSH
34544: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34548: LD_VAR 0 4
34552: PPUSH
34553: LD_VAR 0 2
34557: PPUSH
34558: CALL_OW 180
// end else
34562: GO 34677
// if GetControl ( vehicle ) = control_remote then
34564: LD_VAR 0 1
34568: PPUSH
34569: CALL_OW 263
34573: PUSH
34574: LD_INT 2
34576: EQUAL
34577: IFFALSE 34638
// begin wait ( 0 0$2 ) ;
34579: LD_INT 70
34581: PPUSH
34582: CALL_OW 67
// if Connect ( vehicle ) then
34586: LD_VAR 0 1
34590: PPUSH
34591: CALL 46701 0 1
34595: IFFALSE 34636
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34597: LD_VAR 0 1
34601: PPUSH
34602: LD_EXP 120
34606: PUSH
34607: LD_VAR 0 2
34611: ARRAY
34612: PUSH
34613: LD_INT 3
34615: ARRAY
34616: PPUSH
34617: LD_EXP 120
34621: PUSH
34622: LD_VAR 0 2
34626: ARRAY
34627: PUSH
34628: LD_INT 4
34630: ARRAY
34631: PPUSH
34632: CALL_OW 171
// end else
34636: GO 34677
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34638: LD_VAR 0 1
34642: PPUSH
34643: LD_EXP 120
34647: PUSH
34648: LD_VAR 0 2
34652: ARRAY
34653: PUSH
34654: LD_INT 3
34656: ARRAY
34657: PPUSH
34658: LD_EXP 120
34662: PUSH
34663: LD_VAR 0 2
34667: ARRAY
34668: PUSH
34669: LD_INT 4
34671: ARRAY
34672: PPUSH
34673: CALL_OW 171
// end ; end ;
34677: LD_VAR 0 3
34681: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34682: LD_INT 0
34684: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34685: LD_VAR 0 1
34689: PUSH
34690: LD_INT 250
34692: EQUAL
34693: PUSH
34694: LD_VAR 0 2
34698: PPUSH
34699: CALL_OW 264
34703: PUSH
34704: LD_INT 81
34706: EQUAL
34707: AND
34708: IFFALSE 34729
// MinerPlaceMine ( unit , x , y ) ;
34710: LD_VAR 0 2
34714: PPUSH
34715: LD_VAR 0 4
34719: PPUSH
34720: LD_VAR 0 5
34724: PPUSH
34725: CALL 37114 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34729: LD_VAR 0 1
34733: PUSH
34734: LD_INT 251
34736: EQUAL
34737: PUSH
34738: LD_VAR 0 2
34742: PPUSH
34743: CALL_OW 264
34747: PUSH
34748: LD_INT 81
34750: EQUAL
34751: AND
34752: IFFALSE 34773
// MinerDetonateMine ( unit , x , y ) ;
34754: LD_VAR 0 2
34758: PPUSH
34759: LD_VAR 0 4
34763: PPUSH
34764: LD_VAR 0 5
34768: PPUSH
34769: CALL 37389 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34773: LD_VAR 0 1
34777: PUSH
34778: LD_INT 252
34780: EQUAL
34781: PUSH
34782: LD_VAR 0 2
34786: PPUSH
34787: CALL_OW 264
34791: PUSH
34792: LD_INT 81
34794: EQUAL
34795: AND
34796: IFFALSE 34817
// MinerCreateMinefield ( unit , x , y ) ;
34798: LD_VAR 0 2
34802: PPUSH
34803: LD_VAR 0 4
34807: PPUSH
34808: LD_VAR 0 5
34812: PPUSH
34813: CALL 37806 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34817: LD_VAR 0 1
34821: PUSH
34822: LD_INT 253
34824: EQUAL
34825: PUSH
34826: LD_VAR 0 2
34830: PPUSH
34831: CALL_OW 257
34835: PUSH
34836: LD_INT 5
34838: EQUAL
34839: AND
34840: IFFALSE 34861
// ComBinocular ( unit , x , y ) ;
34842: LD_VAR 0 2
34846: PPUSH
34847: LD_VAR 0 4
34851: PPUSH
34852: LD_VAR 0 5
34856: PPUSH
34857: CALL 38175 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34861: LD_VAR 0 1
34865: PUSH
34866: LD_INT 254
34868: EQUAL
34869: PUSH
34870: LD_VAR 0 2
34874: PPUSH
34875: CALL_OW 264
34879: PUSH
34880: LD_INT 99
34882: EQUAL
34883: AND
34884: PUSH
34885: LD_VAR 0 3
34889: PPUSH
34890: CALL_OW 263
34894: PUSH
34895: LD_INT 3
34897: EQUAL
34898: AND
34899: IFFALSE 34915
// HackDestroyVehicle ( unit , selectedUnit ) ;
34901: LD_VAR 0 2
34905: PPUSH
34906: LD_VAR 0 3
34910: PPUSH
34911: CALL 36478 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34915: LD_VAR 0 1
34919: PUSH
34920: LD_INT 255
34922: EQUAL
34923: PUSH
34924: LD_VAR 0 2
34928: PPUSH
34929: CALL_OW 264
34933: PUSH
34934: LD_INT 14
34936: PUSH
34937: LD_INT 53
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: IN
34944: AND
34945: PUSH
34946: LD_VAR 0 4
34950: PPUSH
34951: LD_VAR 0 5
34955: PPUSH
34956: CALL_OW 488
34960: AND
34961: IFFALSE 34985
// CutTreeXYR ( unit , x , y , 12 ) ;
34963: LD_VAR 0 2
34967: PPUSH
34968: LD_VAR 0 4
34972: PPUSH
34973: LD_VAR 0 5
34977: PPUSH
34978: LD_INT 12
34980: PPUSH
34981: CALL 35048 0 4
// if cmd = 256 then
34985: LD_VAR 0 1
34989: PUSH
34990: LD_INT 256
34992: EQUAL
34993: IFFALSE 35014
// SetFactoryWaypoint ( unit , x , y ) ;
34995: LD_VAR 0 2
34999: PPUSH
35000: LD_VAR 0 4
35004: PPUSH
35005: LD_VAR 0 5
35009: PPUSH
35010: CALL 32995 0 3
// if cmd = 257 then
35014: LD_VAR 0 1
35018: PUSH
35019: LD_INT 257
35021: EQUAL
35022: IFFALSE 35043
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35024: LD_VAR 0 2
35028: PPUSH
35029: LD_VAR 0 4
35033: PPUSH
35034: LD_VAR 0 5
35038: PPUSH
35039: CALL 33357 0 3
// end ;
35043: LD_VAR 0 6
35047: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35048: LD_INT 0
35050: PPUSH
35051: PPUSH
35052: PPUSH
35053: PPUSH
35054: PPUSH
35055: PPUSH
35056: PPUSH
35057: PPUSH
35058: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35059: LD_VAR 0 1
35063: NOT
35064: PUSH
35065: LD_VAR 0 2
35069: PPUSH
35070: LD_VAR 0 3
35074: PPUSH
35075: CALL_OW 488
35079: NOT
35080: OR
35081: PUSH
35082: LD_VAR 0 4
35086: NOT
35087: OR
35088: IFFALSE 35092
// exit ;
35090: GO 35432
// list := [ ] ;
35092: LD_ADDR_VAR 0 13
35096: PUSH
35097: EMPTY
35098: ST_TO_ADDR
// if x - r < 0 then
35099: LD_VAR 0 2
35103: PUSH
35104: LD_VAR 0 4
35108: MINUS
35109: PUSH
35110: LD_INT 0
35112: LESS
35113: IFFALSE 35125
// min_x := 0 else
35115: LD_ADDR_VAR 0 7
35119: PUSH
35120: LD_INT 0
35122: ST_TO_ADDR
35123: GO 35141
// min_x := x - r ;
35125: LD_ADDR_VAR 0 7
35129: PUSH
35130: LD_VAR 0 2
35134: PUSH
35135: LD_VAR 0 4
35139: MINUS
35140: ST_TO_ADDR
// if y - r < 0 then
35141: LD_VAR 0 3
35145: PUSH
35146: LD_VAR 0 4
35150: MINUS
35151: PUSH
35152: LD_INT 0
35154: LESS
35155: IFFALSE 35167
// min_y := 0 else
35157: LD_ADDR_VAR 0 8
35161: PUSH
35162: LD_INT 0
35164: ST_TO_ADDR
35165: GO 35183
// min_y := y - r ;
35167: LD_ADDR_VAR 0 8
35171: PUSH
35172: LD_VAR 0 3
35176: PUSH
35177: LD_VAR 0 4
35181: MINUS
35182: ST_TO_ADDR
// max_x := x + r ;
35183: LD_ADDR_VAR 0 9
35187: PUSH
35188: LD_VAR 0 2
35192: PUSH
35193: LD_VAR 0 4
35197: PLUS
35198: ST_TO_ADDR
// max_y := y + r ;
35199: LD_ADDR_VAR 0 10
35203: PUSH
35204: LD_VAR 0 3
35208: PUSH
35209: LD_VAR 0 4
35213: PLUS
35214: ST_TO_ADDR
// for _x = min_x to max_x do
35215: LD_ADDR_VAR 0 11
35219: PUSH
35220: DOUBLE
35221: LD_VAR 0 7
35225: DEC
35226: ST_TO_ADDR
35227: LD_VAR 0 9
35231: PUSH
35232: FOR_TO
35233: IFFALSE 35350
// for _y = min_y to max_y do
35235: LD_ADDR_VAR 0 12
35239: PUSH
35240: DOUBLE
35241: LD_VAR 0 8
35245: DEC
35246: ST_TO_ADDR
35247: LD_VAR 0 10
35251: PUSH
35252: FOR_TO
35253: IFFALSE 35346
// begin if not ValidHex ( _x , _y ) then
35255: LD_VAR 0 11
35259: PPUSH
35260: LD_VAR 0 12
35264: PPUSH
35265: CALL_OW 488
35269: NOT
35270: IFFALSE 35274
// continue ;
35272: GO 35252
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35274: LD_VAR 0 11
35278: PPUSH
35279: LD_VAR 0 12
35283: PPUSH
35284: CALL_OW 351
35288: PUSH
35289: LD_VAR 0 11
35293: PPUSH
35294: LD_VAR 0 12
35298: PPUSH
35299: CALL_OW 554
35303: AND
35304: IFFALSE 35344
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35306: LD_ADDR_VAR 0 13
35310: PUSH
35311: LD_VAR 0 13
35315: PPUSH
35316: LD_VAR 0 13
35320: PUSH
35321: LD_INT 1
35323: PLUS
35324: PPUSH
35325: LD_VAR 0 11
35329: PUSH
35330: LD_VAR 0 12
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PPUSH
35339: CALL_OW 2
35343: ST_TO_ADDR
// end ;
35344: GO 35252
35346: POP
35347: POP
35348: GO 35232
35350: POP
35351: POP
// if not list then
35352: LD_VAR 0 13
35356: NOT
35357: IFFALSE 35361
// exit ;
35359: GO 35432
// for i in list do
35361: LD_ADDR_VAR 0 6
35365: PUSH
35366: LD_VAR 0 13
35370: PUSH
35371: FOR_IN
35372: IFFALSE 35430
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35374: LD_VAR 0 1
35378: PPUSH
35379: LD_STRING M
35381: PUSH
35382: LD_VAR 0 6
35386: PUSH
35387: LD_INT 1
35389: ARRAY
35390: PUSH
35391: LD_VAR 0 6
35395: PUSH
35396: LD_INT 2
35398: ARRAY
35399: PUSH
35400: LD_INT 0
35402: PUSH
35403: LD_INT 0
35405: PUSH
35406: LD_INT 0
35408: PUSH
35409: LD_INT 0
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: PUSH
35421: EMPTY
35422: LIST
35423: PPUSH
35424: CALL_OW 447
35428: GO 35371
35430: POP
35431: POP
// end ;
35432: LD_VAR 0 5
35436: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35437: LD_EXP 123
35441: NOT
35442: IFFALSE 35492
35444: GO 35446
35446: DISABLE
// begin initHack := true ;
35447: LD_ADDR_EXP 123
35451: PUSH
35452: LD_INT 1
35454: ST_TO_ADDR
// hackTanks := [ ] ;
35455: LD_ADDR_EXP 124
35459: PUSH
35460: EMPTY
35461: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35462: LD_ADDR_EXP 125
35466: PUSH
35467: EMPTY
35468: ST_TO_ADDR
// hackLimit := 3 ;
35469: LD_ADDR_EXP 126
35473: PUSH
35474: LD_INT 3
35476: ST_TO_ADDR
// hackDist := 12 ;
35477: LD_ADDR_EXP 127
35481: PUSH
35482: LD_INT 12
35484: ST_TO_ADDR
// hackCounter := [ ] ;
35485: LD_ADDR_EXP 128
35489: PUSH
35490: EMPTY
35491: ST_TO_ADDR
// end ;
35492: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35493: LD_EXP 123
35497: PUSH
35498: LD_INT 34
35500: PUSH
35501: LD_INT 99
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PPUSH
35508: CALL_OW 69
35512: AND
35513: IFFALSE 35766
35515: GO 35517
35517: DISABLE
35518: LD_INT 0
35520: PPUSH
35521: PPUSH
// begin enable ;
35522: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35523: LD_ADDR_VAR 0 1
35527: PUSH
35528: LD_INT 34
35530: PUSH
35531: LD_INT 99
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PPUSH
35538: CALL_OW 69
35542: PUSH
35543: FOR_IN
35544: IFFALSE 35764
// begin if not i in hackTanks then
35546: LD_VAR 0 1
35550: PUSH
35551: LD_EXP 124
35555: IN
35556: NOT
35557: IFFALSE 35640
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35559: LD_ADDR_EXP 124
35563: PUSH
35564: LD_EXP 124
35568: PPUSH
35569: LD_EXP 124
35573: PUSH
35574: LD_INT 1
35576: PLUS
35577: PPUSH
35578: LD_VAR 0 1
35582: PPUSH
35583: CALL_OW 1
35587: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35588: LD_ADDR_EXP 125
35592: PUSH
35593: LD_EXP 125
35597: PPUSH
35598: LD_EXP 125
35602: PUSH
35603: LD_INT 1
35605: PLUS
35606: PPUSH
35607: EMPTY
35608: PPUSH
35609: CALL_OW 1
35613: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35614: LD_ADDR_EXP 128
35618: PUSH
35619: LD_EXP 128
35623: PPUSH
35624: LD_EXP 128
35628: PUSH
35629: LD_INT 1
35631: PLUS
35632: PPUSH
35633: EMPTY
35634: PPUSH
35635: CALL_OW 1
35639: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35640: LD_VAR 0 1
35644: PPUSH
35645: CALL_OW 302
35649: NOT
35650: IFFALSE 35663
// begin HackUnlinkAll ( i ) ;
35652: LD_VAR 0 1
35656: PPUSH
35657: CALL 35769 0 1
// continue ;
35661: GO 35543
// end ; HackCheckCapturedStatus ( i ) ;
35663: LD_VAR 0 1
35667: PPUSH
35668: CALL 36212 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35672: LD_ADDR_VAR 0 2
35676: PUSH
35677: LD_INT 81
35679: PUSH
35680: LD_VAR 0 1
35684: PPUSH
35685: CALL_OW 255
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 33
35696: PUSH
35697: LD_INT 3
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 91
35706: PUSH
35707: LD_VAR 0 1
35711: PUSH
35712: LD_EXP 127
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 50
35724: PUSH
35725: EMPTY
35726: LIST
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: PPUSH
35734: CALL_OW 69
35738: ST_TO_ADDR
// if not tmp then
35739: LD_VAR 0 2
35743: NOT
35744: IFFALSE 35748
// continue ;
35746: GO 35543
// HackLink ( i , tmp ) ;
35748: LD_VAR 0 1
35752: PPUSH
35753: LD_VAR 0 2
35757: PPUSH
35758: CALL 35905 0 2
// end ;
35762: GO 35543
35764: POP
35765: POP
// end ;
35766: PPOPN 2
35768: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35769: LD_INT 0
35771: PPUSH
35772: PPUSH
35773: PPUSH
// if not hack in hackTanks then
35774: LD_VAR 0 1
35778: PUSH
35779: LD_EXP 124
35783: IN
35784: NOT
35785: IFFALSE 35789
// exit ;
35787: GO 35900
// index := GetElementIndex ( hackTanks , hack ) ;
35789: LD_ADDR_VAR 0 4
35793: PUSH
35794: LD_EXP 124
35798: PPUSH
35799: LD_VAR 0 1
35803: PPUSH
35804: CALL 43517 0 2
35808: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35809: LD_EXP 125
35813: PUSH
35814: LD_VAR 0 4
35818: ARRAY
35819: IFFALSE 35900
// begin for i in hackTanksCaptured [ index ] do
35821: LD_ADDR_VAR 0 3
35825: PUSH
35826: LD_EXP 125
35830: PUSH
35831: LD_VAR 0 4
35835: ARRAY
35836: PUSH
35837: FOR_IN
35838: IFFALSE 35864
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35840: LD_VAR 0 3
35844: PUSH
35845: LD_INT 1
35847: ARRAY
35848: PPUSH
35849: LD_VAR 0 3
35853: PUSH
35854: LD_INT 2
35856: ARRAY
35857: PPUSH
35858: CALL_OW 235
35862: GO 35837
35864: POP
35865: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35866: LD_ADDR_EXP 125
35870: PUSH
35871: LD_EXP 125
35875: PPUSH
35876: LD_VAR 0 4
35880: PPUSH
35881: EMPTY
35882: PPUSH
35883: CALL_OW 1
35887: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35888: LD_VAR 0 1
35892: PPUSH
35893: LD_INT 0
35895: PPUSH
35896: CALL_OW 505
// end ; end ;
35900: LD_VAR 0 2
35904: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35905: LD_INT 0
35907: PPUSH
35908: PPUSH
35909: PPUSH
// if not hack in hackTanks or not vehicles then
35910: LD_VAR 0 1
35914: PUSH
35915: LD_EXP 124
35919: IN
35920: NOT
35921: PUSH
35922: LD_VAR 0 2
35926: NOT
35927: OR
35928: IFFALSE 35932
// exit ;
35930: GO 36207
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35932: LD_ADDR_VAR 0 2
35936: PUSH
35937: LD_VAR 0 1
35941: PPUSH
35942: LD_VAR 0 2
35946: PPUSH
35947: LD_INT 1
35949: PPUSH
35950: LD_INT 1
35952: PPUSH
35953: CALL 44167 0 4
35957: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35958: LD_ADDR_VAR 0 5
35962: PUSH
35963: LD_EXP 124
35967: PPUSH
35968: LD_VAR 0 1
35972: PPUSH
35973: CALL 43517 0 2
35977: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35978: LD_EXP 125
35982: PUSH
35983: LD_VAR 0 5
35987: ARRAY
35988: PUSH
35989: LD_EXP 126
35993: LESS
35994: IFFALSE 36183
// begin for i := 1 to vehicles do
35996: LD_ADDR_VAR 0 4
36000: PUSH
36001: DOUBLE
36002: LD_INT 1
36004: DEC
36005: ST_TO_ADDR
36006: LD_VAR 0 2
36010: PUSH
36011: FOR_TO
36012: IFFALSE 36181
// begin if hackTanksCaptured [ index ] = hackLimit then
36014: LD_EXP 125
36018: PUSH
36019: LD_VAR 0 5
36023: ARRAY
36024: PUSH
36025: LD_EXP 126
36029: EQUAL
36030: IFFALSE 36034
// break ;
36032: GO 36181
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36034: LD_ADDR_EXP 128
36038: PUSH
36039: LD_EXP 128
36043: PPUSH
36044: LD_VAR 0 5
36048: PPUSH
36049: LD_EXP 128
36053: PUSH
36054: LD_VAR 0 5
36058: ARRAY
36059: PUSH
36060: LD_INT 1
36062: PLUS
36063: PPUSH
36064: CALL_OW 1
36068: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36069: LD_ADDR_EXP 125
36073: PUSH
36074: LD_EXP 125
36078: PPUSH
36079: LD_VAR 0 5
36083: PUSH
36084: LD_EXP 125
36088: PUSH
36089: LD_VAR 0 5
36093: ARRAY
36094: PUSH
36095: LD_INT 1
36097: PLUS
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PPUSH
36103: LD_VAR 0 2
36107: PUSH
36108: LD_VAR 0 4
36112: ARRAY
36113: PUSH
36114: LD_VAR 0 2
36118: PUSH
36119: LD_VAR 0 4
36123: ARRAY
36124: PPUSH
36125: CALL_OW 255
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PPUSH
36134: CALL 43732 0 3
36138: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36139: LD_VAR 0 2
36143: PUSH
36144: LD_VAR 0 4
36148: ARRAY
36149: PPUSH
36150: LD_VAR 0 1
36154: PPUSH
36155: CALL_OW 255
36159: PPUSH
36160: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36164: LD_VAR 0 2
36168: PUSH
36169: LD_VAR 0 4
36173: ARRAY
36174: PPUSH
36175: CALL_OW 141
// end ;
36179: GO 36011
36181: POP
36182: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36183: LD_VAR 0 1
36187: PPUSH
36188: LD_EXP 125
36192: PUSH
36193: LD_VAR 0 5
36197: ARRAY
36198: PUSH
36199: LD_INT 0
36201: PLUS
36202: PPUSH
36203: CALL_OW 505
// end ;
36207: LD_VAR 0 3
36211: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36212: LD_INT 0
36214: PPUSH
36215: PPUSH
36216: PPUSH
36217: PPUSH
// if not hack in hackTanks then
36218: LD_VAR 0 1
36222: PUSH
36223: LD_EXP 124
36227: IN
36228: NOT
36229: IFFALSE 36233
// exit ;
36231: GO 36473
// index := GetElementIndex ( hackTanks , hack ) ;
36233: LD_ADDR_VAR 0 4
36237: PUSH
36238: LD_EXP 124
36242: PPUSH
36243: LD_VAR 0 1
36247: PPUSH
36248: CALL 43517 0 2
36252: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36253: LD_ADDR_VAR 0 3
36257: PUSH
36258: DOUBLE
36259: LD_EXP 125
36263: PUSH
36264: LD_VAR 0 4
36268: ARRAY
36269: INC
36270: ST_TO_ADDR
36271: LD_INT 1
36273: PUSH
36274: FOR_DOWNTO
36275: IFFALSE 36447
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36277: LD_ADDR_VAR 0 5
36281: PUSH
36282: LD_EXP 125
36286: PUSH
36287: LD_VAR 0 4
36291: ARRAY
36292: PUSH
36293: LD_VAR 0 3
36297: ARRAY
36298: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36299: LD_VAR 0 5
36303: PUSH
36304: LD_INT 1
36306: ARRAY
36307: PPUSH
36308: CALL_OW 302
36312: NOT
36313: PUSH
36314: LD_VAR 0 5
36318: PUSH
36319: LD_INT 1
36321: ARRAY
36322: PPUSH
36323: CALL_OW 255
36327: PUSH
36328: LD_VAR 0 1
36332: PPUSH
36333: CALL_OW 255
36337: NONEQUAL
36338: OR
36339: IFFALSE 36445
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36341: LD_VAR 0 5
36345: PUSH
36346: LD_INT 1
36348: ARRAY
36349: PPUSH
36350: CALL_OW 305
36354: PUSH
36355: LD_VAR 0 5
36359: PUSH
36360: LD_INT 1
36362: ARRAY
36363: PPUSH
36364: CALL_OW 255
36368: PUSH
36369: LD_VAR 0 1
36373: PPUSH
36374: CALL_OW 255
36378: EQUAL
36379: AND
36380: IFFALSE 36404
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36382: LD_VAR 0 5
36386: PUSH
36387: LD_INT 1
36389: ARRAY
36390: PPUSH
36391: LD_VAR 0 5
36395: PUSH
36396: LD_INT 2
36398: ARRAY
36399: PPUSH
36400: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36404: LD_ADDR_EXP 125
36408: PUSH
36409: LD_EXP 125
36413: PPUSH
36414: LD_VAR 0 4
36418: PPUSH
36419: LD_EXP 125
36423: PUSH
36424: LD_VAR 0 4
36428: ARRAY
36429: PPUSH
36430: LD_VAR 0 3
36434: PPUSH
36435: CALL_OW 3
36439: PPUSH
36440: CALL_OW 1
36444: ST_TO_ADDR
// end ; end ;
36445: GO 36274
36447: POP
36448: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36449: LD_VAR 0 1
36453: PPUSH
36454: LD_EXP 125
36458: PUSH
36459: LD_VAR 0 4
36463: ARRAY
36464: PUSH
36465: LD_INT 0
36467: PLUS
36468: PPUSH
36469: CALL_OW 505
// end ;
36473: LD_VAR 0 2
36477: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36478: LD_INT 0
36480: PPUSH
36481: PPUSH
36482: PPUSH
36483: PPUSH
// if not hack in hackTanks then
36484: LD_VAR 0 1
36488: PUSH
36489: LD_EXP 124
36493: IN
36494: NOT
36495: IFFALSE 36499
// exit ;
36497: GO 36584
// index := GetElementIndex ( hackTanks , hack ) ;
36499: LD_ADDR_VAR 0 5
36503: PUSH
36504: LD_EXP 124
36508: PPUSH
36509: LD_VAR 0 1
36513: PPUSH
36514: CALL 43517 0 2
36518: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36519: LD_ADDR_VAR 0 4
36523: PUSH
36524: DOUBLE
36525: LD_INT 1
36527: DEC
36528: ST_TO_ADDR
36529: LD_EXP 125
36533: PUSH
36534: LD_VAR 0 5
36538: ARRAY
36539: PUSH
36540: FOR_TO
36541: IFFALSE 36582
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36543: LD_EXP 125
36547: PUSH
36548: LD_VAR 0 5
36552: ARRAY
36553: PUSH
36554: LD_VAR 0 4
36558: ARRAY
36559: PUSH
36560: LD_INT 1
36562: ARRAY
36563: PUSH
36564: LD_VAR 0 2
36568: EQUAL
36569: IFFALSE 36580
// KillUnit ( vehicle ) ;
36571: LD_VAR 0 2
36575: PPUSH
36576: CALL_OW 66
36580: GO 36540
36582: POP
36583: POP
// end ;
36584: LD_VAR 0 3
36588: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36589: LD_EXP 129
36593: NOT
36594: IFFALSE 36629
36596: GO 36598
36598: DISABLE
// begin initMiner := true ;
36599: LD_ADDR_EXP 129
36603: PUSH
36604: LD_INT 1
36606: ST_TO_ADDR
// minersList := [ ] ;
36607: LD_ADDR_EXP 130
36611: PUSH
36612: EMPTY
36613: ST_TO_ADDR
// minerMinesList := [ ] ;
36614: LD_ADDR_EXP 131
36618: PUSH
36619: EMPTY
36620: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36621: LD_ADDR_EXP 132
36625: PUSH
36626: LD_INT 5
36628: ST_TO_ADDR
// end ;
36629: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36630: LD_EXP 129
36634: PUSH
36635: LD_INT 34
36637: PUSH
36638: LD_INT 81
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PPUSH
36645: CALL_OW 69
36649: AND
36650: IFFALSE 37111
36652: GO 36654
36654: DISABLE
36655: LD_INT 0
36657: PPUSH
36658: PPUSH
36659: PPUSH
36660: PPUSH
// begin enable ;
36661: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36662: LD_ADDR_VAR 0 1
36666: PUSH
36667: LD_INT 34
36669: PUSH
36670: LD_INT 81
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PPUSH
36677: CALL_OW 69
36681: PUSH
36682: FOR_IN
36683: IFFALSE 36755
// begin if not i in minersList then
36685: LD_VAR 0 1
36689: PUSH
36690: LD_EXP 130
36694: IN
36695: NOT
36696: IFFALSE 36753
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36698: LD_ADDR_EXP 130
36702: PUSH
36703: LD_EXP 130
36707: PPUSH
36708: LD_EXP 130
36712: PUSH
36713: LD_INT 1
36715: PLUS
36716: PPUSH
36717: LD_VAR 0 1
36721: PPUSH
36722: CALL_OW 1
36726: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36727: LD_ADDR_EXP 131
36731: PUSH
36732: LD_EXP 131
36736: PPUSH
36737: LD_EXP 131
36741: PUSH
36742: LD_INT 1
36744: PLUS
36745: PPUSH
36746: EMPTY
36747: PPUSH
36748: CALL_OW 1
36752: ST_TO_ADDR
// end end ;
36753: GO 36682
36755: POP
36756: POP
// for i := minerMinesList downto 1 do
36757: LD_ADDR_VAR 0 1
36761: PUSH
36762: DOUBLE
36763: LD_EXP 131
36767: INC
36768: ST_TO_ADDR
36769: LD_INT 1
36771: PUSH
36772: FOR_DOWNTO
36773: IFFALSE 37109
// begin if IsLive ( minersList [ i ] ) then
36775: LD_EXP 130
36779: PUSH
36780: LD_VAR 0 1
36784: ARRAY
36785: PPUSH
36786: CALL_OW 300
36790: IFFALSE 36818
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36792: LD_EXP 130
36796: PUSH
36797: LD_VAR 0 1
36801: ARRAY
36802: PPUSH
36803: LD_EXP 131
36807: PUSH
36808: LD_VAR 0 1
36812: ARRAY
36813: PPUSH
36814: CALL_OW 505
// if not minerMinesList [ i ] then
36818: LD_EXP 131
36822: PUSH
36823: LD_VAR 0 1
36827: ARRAY
36828: NOT
36829: IFFALSE 36833
// continue ;
36831: GO 36772
// for j := minerMinesList [ i ] downto 1 do
36833: LD_ADDR_VAR 0 2
36837: PUSH
36838: DOUBLE
36839: LD_EXP 131
36843: PUSH
36844: LD_VAR 0 1
36848: ARRAY
36849: INC
36850: ST_TO_ADDR
36851: LD_INT 1
36853: PUSH
36854: FOR_DOWNTO
36855: IFFALSE 37105
// begin side := GetSide ( minersList [ i ] ) ;
36857: LD_ADDR_VAR 0 3
36861: PUSH
36862: LD_EXP 130
36866: PUSH
36867: LD_VAR 0 1
36871: ARRAY
36872: PPUSH
36873: CALL_OW 255
36877: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36878: LD_ADDR_VAR 0 4
36882: PUSH
36883: LD_EXP 131
36887: PUSH
36888: LD_VAR 0 1
36892: ARRAY
36893: PUSH
36894: LD_VAR 0 2
36898: ARRAY
36899: PUSH
36900: LD_INT 1
36902: ARRAY
36903: PPUSH
36904: LD_EXP 131
36908: PUSH
36909: LD_VAR 0 1
36913: ARRAY
36914: PUSH
36915: LD_VAR 0 2
36919: ARRAY
36920: PUSH
36921: LD_INT 2
36923: ARRAY
36924: PPUSH
36925: CALL_OW 428
36929: ST_TO_ADDR
// if not tmp then
36930: LD_VAR 0 4
36934: NOT
36935: IFFALSE 36939
// continue ;
36937: GO 36854
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36939: LD_VAR 0 4
36943: PUSH
36944: LD_INT 81
36946: PUSH
36947: LD_VAR 0 3
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PPUSH
36956: CALL_OW 69
36960: IN
36961: PUSH
36962: LD_EXP 131
36966: PUSH
36967: LD_VAR 0 1
36971: ARRAY
36972: PUSH
36973: LD_VAR 0 2
36977: ARRAY
36978: PUSH
36979: LD_INT 1
36981: ARRAY
36982: PPUSH
36983: LD_EXP 131
36987: PUSH
36988: LD_VAR 0 1
36992: ARRAY
36993: PUSH
36994: LD_VAR 0 2
36998: ARRAY
36999: PUSH
37000: LD_INT 2
37002: ARRAY
37003: PPUSH
37004: CALL_OW 458
37008: AND
37009: IFFALSE 37103
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37011: LD_EXP 131
37015: PUSH
37016: LD_VAR 0 1
37020: ARRAY
37021: PUSH
37022: LD_VAR 0 2
37026: ARRAY
37027: PUSH
37028: LD_INT 1
37030: ARRAY
37031: PPUSH
37032: LD_EXP 131
37036: PUSH
37037: LD_VAR 0 1
37041: ARRAY
37042: PUSH
37043: LD_VAR 0 2
37047: ARRAY
37048: PUSH
37049: LD_INT 2
37051: ARRAY
37052: PPUSH
37053: LD_VAR 0 3
37057: PPUSH
37058: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37062: LD_ADDR_EXP 131
37066: PUSH
37067: LD_EXP 131
37071: PPUSH
37072: LD_VAR 0 1
37076: PPUSH
37077: LD_EXP 131
37081: PUSH
37082: LD_VAR 0 1
37086: ARRAY
37087: PPUSH
37088: LD_VAR 0 2
37092: PPUSH
37093: CALL_OW 3
37097: PPUSH
37098: CALL_OW 1
37102: ST_TO_ADDR
// end ; end ;
37103: GO 36854
37105: POP
37106: POP
// end ;
37107: GO 36772
37109: POP
37110: POP
// end ;
37111: PPOPN 4
37113: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37114: LD_INT 0
37116: PPUSH
37117: PPUSH
// result := false ;
37118: LD_ADDR_VAR 0 4
37122: PUSH
37123: LD_INT 0
37125: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37126: LD_VAR 0 1
37130: PPUSH
37131: CALL_OW 264
37135: PUSH
37136: LD_INT 81
37138: EQUAL
37139: NOT
37140: IFFALSE 37144
// exit ;
37142: GO 37384
// index := GetElementIndex ( minersList , unit ) ;
37144: LD_ADDR_VAR 0 5
37148: PUSH
37149: LD_EXP 130
37153: PPUSH
37154: LD_VAR 0 1
37158: PPUSH
37159: CALL 43517 0 2
37163: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37164: LD_EXP 131
37168: PUSH
37169: LD_VAR 0 5
37173: ARRAY
37174: PUSH
37175: LD_EXP 132
37179: GREATEREQUAL
37180: IFFALSE 37184
// exit ;
37182: GO 37384
// ComMoveXY ( unit , x , y ) ;
37184: LD_VAR 0 1
37188: PPUSH
37189: LD_VAR 0 2
37193: PPUSH
37194: LD_VAR 0 3
37198: PPUSH
37199: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37203: LD_INT 35
37205: PPUSH
37206: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37210: LD_VAR 0 1
37214: PPUSH
37215: LD_VAR 0 2
37219: PPUSH
37220: LD_VAR 0 3
37224: PPUSH
37225: CALL 74780 0 3
37229: NOT
37230: PUSH
37231: LD_VAR 0 1
37235: PPUSH
37236: CALL_OW 314
37240: AND
37241: IFFALSE 37245
// exit ;
37243: GO 37384
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37245: LD_VAR 0 2
37249: PPUSH
37250: LD_VAR 0 3
37254: PPUSH
37255: CALL_OW 428
37259: PUSH
37260: LD_VAR 0 1
37264: EQUAL
37265: PUSH
37266: LD_VAR 0 1
37270: PPUSH
37271: CALL_OW 314
37275: NOT
37276: AND
37277: IFFALSE 37203
// PlaySoundXY ( x , y , PlantMine ) ;
37279: LD_VAR 0 2
37283: PPUSH
37284: LD_VAR 0 3
37288: PPUSH
37289: LD_STRING PlantMine
37291: PPUSH
37292: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37296: LD_VAR 0 2
37300: PPUSH
37301: LD_VAR 0 3
37305: PPUSH
37306: LD_VAR 0 1
37310: PPUSH
37311: CALL_OW 255
37315: PPUSH
37316: LD_INT 0
37318: PPUSH
37319: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37323: LD_ADDR_EXP 131
37327: PUSH
37328: LD_EXP 131
37332: PPUSH
37333: LD_VAR 0 5
37337: PUSH
37338: LD_EXP 131
37342: PUSH
37343: LD_VAR 0 5
37347: ARRAY
37348: PUSH
37349: LD_INT 1
37351: PLUS
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PPUSH
37357: LD_VAR 0 2
37361: PUSH
37362: LD_VAR 0 3
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PPUSH
37371: CALL 43732 0 3
37375: ST_TO_ADDR
// result := true ;
37376: LD_ADDR_VAR 0 4
37380: PUSH
37381: LD_INT 1
37383: ST_TO_ADDR
// end ;
37384: LD_VAR 0 4
37388: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37389: LD_INT 0
37391: PPUSH
37392: PPUSH
37393: PPUSH
// if not unit in minersList then
37394: LD_VAR 0 1
37398: PUSH
37399: LD_EXP 130
37403: IN
37404: NOT
37405: IFFALSE 37409
// exit ;
37407: GO 37801
// index := GetElementIndex ( minersList , unit ) ;
37409: LD_ADDR_VAR 0 6
37413: PUSH
37414: LD_EXP 130
37418: PPUSH
37419: LD_VAR 0 1
37423: PPUSH
37424: CALL 43517 0 2
37428: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37429: LD_ADDR_VAR 0 5
37433: PUSH
37434: DOUBLE
37435: LD_EXP 131
37439: PUSH
37440: LD_VAR 0 6
37444: ARRAY
37445: INC
37446: ST_TO_ADDR
37447: LD_INT 1
37449: PUSH
37450: FOR_DOWNTO
37451: IFFALSE 37612
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37453: LD_EXP 131
37457: PUSH
37458: LD_VAR 0 6
37462: ARRAY
37463: PUSH
37464: LD_VAR 0 5
37468: ARRAY
37469: PUSH
37470: LD_INT 1
37472: ARRAY
37473: PUSH
37474: LD_VAR 0 2
37478: EQUAL
37479: PUSH
37480: LD_EXP 131
37484: PUSH
37485: LD_VAR 0 6
37489: ARRAY
37490: PUSH
37491: LD_VAR 0 5
37495: ARRAY
37496: PUSH
37497: LD_INT 2
37499: ARRAY
37500: PUSH
37501: LD_VAR 0 3
37505: EQUAL
37506: AND
37507: IFFALSE 37610
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37509: LD_EXP 131
37513: PUSH
37514: LD_VAR 0 6
37518: ARRAY
37519: PUSH
37520: LD_VAR 0 5
37524: ARRAY
37525: PUSH
37526: LD_INT 1
37528: ARRAY
37529: PPUSH
37530: LD_EXP 131
37534: PUSH
37535: LD_VAR 0 6
37539: ARRAY
37540: PUSH
37541: LD_VAR 0 5
37545: ARRAY
37546: PUSH
37547: LD_INT 2
37549: ARRAY
37550: PPUSH
37551: LD_VAR 0 1
37555: PPUSH
37556: CALL_OW 255
37560: PPUSH
37561: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37565: LD_ADDR_EXP 131
37569: PUSH
37570: LD_EXP 131
37574: PPUSH
37575: LD_VAR 0 6
37579: PPUSH
37580: LD_EXP 131
37584: PUSH
37585: LD_VAR 0 6
37589: ARRAY
37590: PPUSH
37591: LD_VAR 0 5
37595: PPUSH
37596: CALL_OW 3
37600: PPUSH
37601: CALL_OW 1
37605: ST_TO_ADDR
// exit ;
37606: POP
37607: POP
37608: GO 37801
// end ; end ;
37610: GO 37450
37612: POP
37613: POP
// for i := minerMinesList [ index ] downto 1 do
37614: LD_ADDR_VAR 0 5
37618: PUSH
37619: DOUBLE
37620: LD_EXP 131
37624: PUSH
37625: LD_VAR 0 6
37629: ARRAY
37630: INC
37631: ST_TO_ADDR
37632: LD_INT 1
37634: PUSH
37635: FOR_DOWNTO
37636: IFFALSE 37799
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37638: LD_EXP 131
37642: PUSH
37643: LD_VAR 0 6
37647: ARRAY
37648: PUSH
37649: LD_VAR 0 5
37653: ARRAY
37654: PUSH
37655: LD_INT 1
37657: ARRAY
37658: PPUSH
37659: LD_EXP 131
37663: PUSH
37664: LD_VAR 0 6
37668: ARRAY
37669: PUSH
37670: LD_VAR 0 5
37674: ARRAY
37675: PUSH
37676: LD_INT 2
37678: ARRAY
37679: PPUSH
37680: LD_VAR 0 2
37684: PPUSH
37685: LD_VAR 0 3
37689: PPUSH
37690: CALL_OW 298
37694: PUSH
37695: LD_INT 6
37697: LESS
37698: IFFALSE 37797
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37700: LD_EXP 131
37704: PUSH
37705: LD_VAR 0 6
37709: ARRAY
37710: PUSH
37711: LD_VAR 0 5
37715: ARRAY
37716: PUSH
37717: LD_INT 1
37719: ARRAY
37720: PPUSH
37721: LD_EXP 131
37725: PUSH
37726: LD_VAR 0 6
37730: ARRAY
37731: PUSH
37732: LD_VAR 0 5
37736: ARRAY
37737: PUSH
37738: LD_INT 2
37740: ARRAY
37741: PPUSH
37742: LD_VAR 0 1
37746: PPUSH
37747: CALL_OW 255
37751: PPUSH
37752: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37756: LD_ADDR_EXP 131
37760: PUSH
37761: LD_EXP 131
37765: PPUSH
37766: LD_VAR 0 6
37770: PPUSH
37771: LD_EXP 131
37775: PUSH
37776: LD_VAR 0 6
37780: ARRAY
37781: PPUSH
37782: LD_VAR 0 5
37786: PPUSH
37787: CALL_OW 3
37791: PPUSH
37792: CALL_OW 1
37796: ST_TO_ADDR
// end ; end ;
37797: GO 37635
37799: POP
37800: POP
// end ;
37801: LD_VAR 0 4
37805: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37806: LD_INT 0
37808: PPUSH
37809: PPUSH
37810: PPUSH
37811: PPUSH
37812: PPUSH
37813: PPUSH
37814: PPUSH
37815: PPUSH
37816: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37817: LD_VAR 0 1
37821: PPUSH
37822: CALL_OW 264
37826: PUSH
37827: LD_INT 81
37829: EQUAL
37830: NOT
37831: PUSH
37832: LD_VAR 0 1
37836: PUSH
37837: LD_EXP 130
37841: IN
37842: NOT
37843: OR
37844: IFFALSE 37848
// exit ;
37846: GO 38170
// index := GetElementIndex ( minersList , unit ) ;
37848: LD_ADDR_VAR 0 6
37852: PUSH
37853: LD_EXP 130
37857: PPUSH
37858: LD_VAR 0 1
37862: PPUSH
37863: CALL 43517 0 2
37867: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37868: LD_ADDR_VAR 0 8
37872: PUSH
37873: LD_EXP 132
37877: PUSH
37878: LD_EXP 131
37882: PUSH
37883: LD_VAR 0 6
37887: ARRAY
37888: MINUS
37889: ST_TO_ADDR
// if not minesFreeAmount then
37890: LD_VAR 0 8
37894: NOT
37895: IFFALSE 37899
// exit ;
37897: GO 38170
// tmp := [ ] ;
37899: LD_ADDR_VAR 0 7
37903: PUSH
37904: EMPTY
37905: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37906: LD_ADDR_VAR 0 5
37910: PUSH
37911: DOUBLE
37912: LD_INT 1
37914: DEC
37915: ST_TO_ADDR
37916: LD_VAR 0 8
37920: PUSH
37921: FOR_TO
37922: IFFALSE 38117
// begin _d := rand ( 0 , 5 ) ;
37924: LD_ADDR_VAR 0 11
37928: PUSH
37929: LD_INT 0
37931: PPUSH
37932: LD_INT 5
37934: PPUSH
37935: CALL_OW 12
37939: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37940: LD_ADDR_VAR 0 12
37944: PUSH
37945: LD_INT 2
37947: PPUSH
37948: LD_INT 6
37950: PPUSH
37951: CALL_OW 12
37955: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37956: LD_ADDR_VAR 0 9
37960: PUSH
37961: LD_VAR 0 2
37965: PPUSH
37966: LD_VAR 0 11
37970: PPUSH
37971: LD_VAR 0 12
37975: PPUSH
37976: CALL_OW 272
37980: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37981: LD_ADDR_VAR 0 10
37985: PUSH
37986: LD_VAR 0 3
37990: PPUSH
37991: LD_VAR 0 11
37995: PPUSH
37996: LD_VAR 0 12
38000: PPUSH
38001: CALL_OW 273
38005: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38006: LD_VAR 0 9
38010: PPUSH
38011: LD_VAR 0 10
38015: PPUSH
38016: CALL_OW 488
38020: PUSH
38021: LD_VAR 0 9
38025: PUSH
38026: LD_VAR 0 10
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_VAR 0 7
38039: IN
38040: NOT
38041: AND
38042: PUSH
38043: LD_VAR 0 9
38047: PPUSH
38048: LD_VAR 0 10
38052: PPUSH
38053: CALL_OW 458
38057: NOT
38058: AND
38059: IFFALSE 38101
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38061: LD_ADDR_VAR 0 7
38065: PUSH
38066: LD_VAR 0 7
38070: PPUSH
38071: LD_VAR 0 7
38075: PUSH
38076: LD_INT 1
38078: PLUS
38079: PPUSH
38080: LD_VAR 0 9
38084: PUSH
38085: LD_VAR 0 10
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PPUSH
38094: CALL_OW 1
38098: ST_TO_ADDR
38099: GO 38115
// i := i - 1 ;
38101: LD_ADDR_VAR 0 5
38105: PUSH
38106: LD_VAR 0 5
38110: PUSH
38111: LD_INT 1
38113: MINUS
38114: ST_TO_ADDR
// end ;
38115: GO 37921
38117: POP
38118: POP
// for i in tmp do
38119: LD_ADDR_VAR 0 5
38123: PUSH
38124: LD_VAR 0 7
38128: PUSH
38129: FOR_IN
38130: IFFALSE 38168
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38132: LD_VAR 0 1
38136: PPUSH
38137: LD_VAR 0 5
38141: PUSH
38142: LD_INT 1
38144: ARRAY
38145: PPUSH
38146: LD_VAR 0 5
38150: PUSH
38151: LD_INT 2
38153: ARRAY
38154: PPUSH
38155: CALL 37114 0 3
38159: NOT
38160: IFFALSE 38166
// exit ;
38162: POP
38163: POP
38164: GO 38170
38166: GO 38129
38168: POP
38169: POP
// end ;
38170: LD_VAR 0 4
38174: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38175: LD_INT 0
38177: PPUSH
38178: PPUSH
38179: PPUSH
38180: PPUSH
38181: PPUSH
38182: PPUSH
38183: PPUSH
// if not GetClass ( unit ) = class_sniper then
38184: LD_VAR 0 1
38188: PPUSH
38189: CALL_OW 257
38193: PUSH
38194: LD_INT 5
38196: EQUAL
38197: NOT
38198: IFFALSE 38202
// exit ;
38200: GO 38590
// dist := 8 ;
38202: LD_ADDR_VAR 0 5
38206: PUSH
38207: LD_INT 8
38209: ST_TO_ADDR
// viewRange := 12 ;
38210: LD_ADDR_VAR 0 7
38214: PUSH
38215: LD_INT 12
38217: ST_TO_ADDR
// side := GetSide ( unit ) ;
38218: LD_ADDR_VAR 0 6
38222: PUSH
38223: LD_VAR 0 1
38227: PPUSH
38228: CALL_OW 255
38232: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38233: LD_INT 61
38235: PPUSH
38236: LD_VAR 0 6
38240: PPUSH
38241: CALL_OW 321
38245: PUSH
38246: LD_INT 2
38248: EQUAL
38249: IFFALSE 38259
// viewRange := 16 ;
38251: LD_ADDR_VAR 0 7
38255: PUSH
38256: LD_INT 16
38258: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38259: LD_VAR 0 1
38263: PPUSH
38264: LD_VAR 0 2
38268: PPUSH
38269: LD_VAR 0 3
38273: PPUSH
38274: CALL_OW 297
38278: PUSH
38279: LD_VAR 0 5
38283: GREATER
38284: IFFALSE 38363
// begin ComMoveXY ( unit , x , y ) ;
38286: LD_VAR 0 1
38290: PPUSH
38291: LD_VAR 0 2
38295: PPUSH
38296: LD_VAR 0 3
38300: PPUSH
38301: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38305: LD_INT 35
38307: PPUSH
38308: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38312: LD_VAR 0 1
38316: PPUSH
38317: LD_VAR 0 2
38321: PPUSH
38322: LD_VAR 0 3
38326: PPUSH
38327: CALL 74780 0 3
38331: NOT
38332: IFFALSE 38336
// exit ;
38334: GO 38590
// until GetDistUnitXY ( unit , x , y ) < dist ;
38336: LD_VAR 0 1
38340: PPUSH
38341: LD_VAR 0 2
38345: PPUSH
38346: LD_VAR 0 3
38350: PPUSH
38351: CALL_OW 297
38355: PUSH
38356: LD_VAR 0 5
38360: LESS
38361: IFFALSE 38305
// end ; ComTurnXY ( unit , x , y ) ;
38363: LD_VAR 0 1
38367: PPUSH
38368: LD_VAR 0 2
38372: PPUSH
38373: LD_VAR 0 3
38377: PPUSH
38378: CALL_OW 118
// wait ( 5 ) ;
38382: LD_INT 5
38384: PPUSH
38385: CALL_OW 67
// _d := GetDir ( unit ) ;
38389: LD_ADDR_VAR 0 10
38393: PUSH
38394: LD_VAR 0 1
38398: PPUSH
38399: CALL_OW 254
38403: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38404: LD_ADDR_VAR 0 8
38408: PUSH
38409: LD_VAR 0 1
38413: PPUSH
38414: CALL_OW 250
38418: PPUSH
38419: LD_VAR 0 10
38423: PPUSH
38424: LD_VAR 0 5
38428: PPUSH
38429: CALL_OW 272
38433: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38434: LD_ADDR_VAR 0 9
38438: PUSH
38439: LD_VAR 0 1
38443: PPUSH
38444: CALL_OW 251
38448: PPUSH
38449: LD_VAR 0 10
38453: PPUSH
38454: LD_VAR 0 5
38458: PPUSH
38459: CALL_OW 273
38463: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38464: LD_VAR 0 8
38468: PPUSH
38469: LD_VAR 0 9
38473: PPUSH
38474: CALL_OW 488
38478: NOT
38479: IFFALSE 38483
// exit ;
38481: GO 38590
// ComAnimCustom ( unit , 1 ) ;
38483: LD_VAR 0 1
38487: PPUSH
38488: LD_INT 1
38490: PPUSH
38491: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38495: LD_VAR 0 8
38499: PPUSH
38500: LD_VAR 0 9
38504: PPUSH
38505: LD_VAR 0 6
38509: PPUSH
38510: LD_VAR 0 7
38514: PPUSH
38515: CALL_OW 330
// repeat wait ( 1 ) ;
38519: LD_INT 1
38521: PPUSH
38522: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38526: LD_VAR 0 1
38530: PPUSH
38531: CALL_OW 316
38535: PUSH
38536: LD_VAR 0 1
38540: PPUSH
38541: CALL_OW 314
38545: OR
38546: PUSH
38547: LD_VAR 0 1
38551: PPUSH
38552: CALL_OW 302
38556: NOT
38557: OR
38558: PUSH
38559: LD_VAR 0 1
38563: PPUSH
38564: CALL_OW 301
38568: OR
38569: IFFALSE 38519
// RemoveSeeing ( _x , _y , side ) ;
38571: LD_VAR 0 8
38575: PPUSH
38576: LD_VAR 0 9
38580: PPUSH
38581: LD_VAR 0 6
38585: PPUSH
38586: CALL_OW 331
// end ; end_of_file
38590: LD_VAR 0 4
38594: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38595: LD_INT 0
38597: PPUSH
38598: PPUSH
// if exist_mode then
38599: LD_VAR 0 2
38603: IFFALSE 38628
// unit := CreateCharacter ( prefix & ident ) else
38605: LD_ADDR_VAR 0 5
38609: PUSH
38610: LD_VAR 0 3
38614: PUSH
38615: LD_VAR 0 1
38619: STR
38620: PPUSH
38621: CALL_OW 34
38625: ST_TO_ADDR
38626: GO 38643
// unit := NewCharacter ( ident ) ;
38628: LD_ADDR_VAR 0 5
38632: PUSH
38633: LD_VAR 0 1
38637: PPUSH
38638: CALL_OW 25
38642: ST_TO_ADDR
// result := unit ;
38643: LD_ADDR_VAR 0 4
38647: PUSH
38648: LD_VAR 0 5
38652: ST_TO_ADDR
// end ;
38653: LD_VAR 0 4
38657: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38658: LD_INT 0
38660: PPUSH
38661: PPUSH
// if not side or not nation then
38662: LD_VAR 0 1
38666: NOT
38667: PUSH
38668: LD_VAR 0 2
38672: NOT
38673: OR
38674: IFFALSE 38678
// exit ;
38676: GO 39446
// case nation of nation_american :
38678: LD_VAR 0 2
38682: PUSH
38683: LD_INT 1
38685: DOUBLE
38686: EQUAL
38687: IFTRUE 38691
38689: GO 38905
38691: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38692: LD_ADDR_VAR 0 4
38696: PUSH
38697: LD_INT 35
38699: PUSH
38700: LD_INT 45
38702: PUSH
38703: LD_INT 46
38705: PUSH
38706: LD_INT 47
38708: PUSH
38709: LD_INT 82
38711: PUSH
38712: LD_INT 83
38714: PUSH
38715: LD_INT 84
38717: PUSH
38718: LD_INT 85
38720: PUSH
38721: LD_INT 86
38723: PUSH
38724: LD_INT 1
38726: PUSH
38727: LD_INT 2
38729: PUSH
38730: LD_INT 6
38732: PUSH
38733: LD_INT 15
38735: PUSH
38736: LD_INT 16
38738: PUSH
38739: LD_INT 7
38741: PUSH
38742: LD_INT 12
38744: PUSH
38745: LD_INT 13
38747: PUSH
38748: LD_INT 10
38750: PUSH
38751: LD_INT 14
38753: PUSH
38754: LD_INT 20
38756: PUSH
38757: LD_INT 21
38759: PUSH
38760: LD_INT 22
38762: PUSH
38763: LD_INT 25
38765: PUSH
38766: LD_INT 32
38768: PUSH
38769: LD_INT 27
38771: PUSH
38772: LD_INT 36
38774: PUSH
38775: LD_INT 69
38777: PUSH
38778: LD_INT 39
38780: PUSH
38781: LD_INT 34
38783: PUSH
38784: LD_INT 40
38786: PUSH
38787: LD_INT 48
38789: PUSH
38790: LD_INT 49
38792: PUSH
38793: LD_INT 50
38795: PUSH
38796: LD_INT 51
38798: PUSH
38799: LD_INT 52
38801: PUSH
38802: LD_INT 53
38804: PUSH
38805: LD_INT 54
38807: PUSH
38808: LD_INT 55
38810: PUSH
38811: LD_INT 56
38813: PUSH
38814: LD_INT 57
38816: PUSH
38817: LD_INT 58
38819: PUSH
38820: LD_INT 59
38822: PUSH
38823: LD_INT 60
38825: PUSH
38826: LD_INT 61
38828: PUSH
38829: LD_INT 62
38831: PUSH
38832: LD_INT 80
38834: PUSH
38835: LD_INT 82
38837: PUSH
38838: LD_INT 83
38840: PUSH
38841: LD_INT 84
38843: PUSH
38844: LD_INT 85
38846: PUSH
38847: LD_INT 86
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: ST_TO_ADDR
38903: GO 39370
38905: LD_INT 2
38907: DOUBLE
38908: EQUAL
38909: IFTRUE 38913
38911: GO 39139
38913: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38914: LD_ADDR_VAR 0 4
38918: PUSH
38919: LD_INT 35
38921: PUSH
38922: LD_INT 45
38924: PUSH
38925: LD_INT 46
38927: PUSH
38928: LD_INT 47
38930: PUSH
38931: LD_INT 82
38933: PUSH
38934: LD_INT 83
38936: PUSH
38937: LD_INT 84
38939: PUSH
38940: LD_INT 85
38942: PUSH
38943: LD_INT 87
38945: PUSH
38946: LD_INT 70
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: LD_INT 11
38954: PUSH
38955: LD_INT 3
38957: PUSH
38958: LD_INT 4
38960: PUSH
38961: LD_INT 5
38963: PUSH
38964: LD_INT 6
38966: PUSH
38967: LD_INT 15
38969: PUSH
38970: LD_INT 18
38972: PUSH
38973: LD_INT 7
38975: PUSH
38976: LD_INT 17
38978: PUSH
38979: LD_INT 8
38981: PUSH
38982: LD_INT 20
38984: PUSH
38985: LD_INT 21
38987: PUSH
38988: LD_INT 22
38990: PUSH
38991: LD_INT 72
38993: PUSH
38994: LD_INT 26
38996: PUSH
38997: LD_INT 69
38999: PUSH
39000: LD_INT 39
39002: PUSH
39003: LD_INT 40
39005: PUSH
39006: LD_INT 41
39008: PUSH
39009: LD_INT 42
39011: PUSH
39012: LD_INT 43
39014: PUSH
39015: LD_INT 48
39017: PUSH
39018: LD_INT 49
39020: PUSH
39021: LD_INT 50
39023: PUSH
39024: LD_INT 51
39026: PUSH
39027: LD_INT 52
39029: PUSH
39030: LD_INT 53
39032: PUSH
39033: LD_INT 54
39035: PUSH
39036: LD_INT 55
39038: PUSH
39039: LD_INT 56
39041: PUSH
39042: LD_INT 60
39044: PUSH
39045: LD_INT 61
39047: PUSH
39048: LD_INT 62
39050: PUSH
39051: LD_INT 66
39053: PUSH
39054: LD_INT 67
39056: PUSH
39057: LD_INT 68
39059: PUSH
39060: LD_INT 81
39062: PUSH
39063: LD_INT 82
39065: PUSH
39066: LD_INT 83
39068: PUSH
39069: LD_INT 84
39071: PUSH
39072: LD_INT 85
39074: PUSH
39075: LD_INT 87
39077: PUSH
39078: LD_INT 88
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: ST_TO_ADDR
39137: GO 39370
39139: LD_INT 3
39141: DOUBLE
39142: EQUAL
39143: IFTRUE 39147
39145: GO 39369
39147: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39148: LD_ADDR_VAR 0 4
39152: PUSH
39153: LD_INT 46
39155: PUSH
39156: LD_INT 47
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: LD_INT 2
39164: PUSH
39165: LD_INT 82
39167: PUSH
39168: LD_INT 83
39170: PUSH
39171: LD_INT 84
39173: PUSH
39174: LD_INT 85
39176: PUSH
39177: LD_INT 86
39179: PUSH
39180: LD_INT 11
39182: PUSH
39183: LD_INT 9
39185: PUSH
39186: LD_INT 20
39188: PUSH
39189: LD_INT 19
39191: PUSH
39192: LD_INT 21
39194: PUSH
39195: LD_INT 24
39197: PUSH
39198: LD_INT 22
39200: PUSH
39201: LD_INT 25
39203: PUSH
39204: LD_INT 28
39206: PUSH
39207: LD_INT 29
39209: PUSH
39210: LD_INT 30
39212: PUSH
39213: LD_INT 31
39215: PUSH
39216: LD_INT 37
39218: PUSH
39219: LD_INT 38
39221: PUSH
39222: LD_INT 32
39224: PUSH
39225: LD_INT 27
39227: PUSH
39228: LD_INT 33
39230: PUSH
39231: LD_INT 69
39233: PUSH
39234: LD_INT 39
39236: PUSH
39237: LD_INT 34
39239: PUSH
39240: LD_INT 40
39242: PUSH
39243: LD_INT 71
39245: PUSH
39246: LD_INT 23
39248: PUSH
39249: LD_INT 44
39251: PUSH
39252: LD_INT 48
39254: PUSH
39255: LD_INT 49
39257: PUSH
39258: LD_INT 50
39260: PUSH
39261: LD_INT 51
39263: PUSH
39264: LD_INT 52
39266: PUSH
39267: LD_INT 53
39269: PUSH
39270: LD_INT 54
39272: PUSH
39273: LD_INT 55
39275: PUSH
39276: LD_INT 56
39278: PUSH
39279: LD_INT 57
39281: PUSH
39282: LD_INT 58
39284: PUSH
39285: LD_INT 59
39287: PUSH
39288: LD_INT 63
39290: PUSH
39291: LD_INT 64
39293: PUSH
39294: LD_INT 65
39296: PUSH
39297: LD_INT 82
39299: PUSH
39300: LD_INT 83
39302: PUSH
39303: LD_INT 84
39305: PUSH
39306: LD_INT 85
39308: PUSH
39309: LD_INT 86
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: ST_TO_ADDR
39367: GO 39370
39369: POP
// if state > - 1 and state < 3 then
39370: LD_VAR 0 3
39374: PUSH
39375: LD_INT 1
39377: NEG
39378: GREATER
39379: PUSH
39380: LD_VAR 0 3
39384: PUSH
39385: LD_INT 3
39387: LESS
39388: AND
39389: IFFALSE 39446
// for i in result do
39391: LD_ADDR_VAR 0 5
39395: PUSH
39396: LD_VAR 0 4
39400: PUSH
39401: FOR_IN
39402: IFFALSE 39444
// if GetTech ( i , side ) <> state then
39404: LD_VAR 0 5
39408: PPUSH
39409: LD_VAR 0 1
39413: PPUSH
39414: CALL_OW 321
39418: PUSH
39419: LD_VAR 0 3
39423: NONEQUAL
39424: IFFALSE 39442
// result := result diff i ;
39426: LD_ADDR_VAR 0 4
39430: PUSH
39431: LD_VAR 0 4
39435: PUSH
39436: LD_VAR 0 5
39440: DIFF
39441: ST_TO_ADDR
39442: GO 39401
39444: POP
39445: POP
// end ;
39446: LD_VAR 0 4
39450: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39451: LD_INT 0
39453: PPUSH
39454: PPUSH
39455: PPUSH
// result := true ;
39456: LD_ADDR_VAR 0 3
39460: PUSH
39461: LD_INT 1
39463: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39464: LD_ADDR_VAR 0 5
39468: PUSH
39469: LD_VAR 0 2
39473: PPUSH
39474: CALL_OW 480
39478: ST_TO_ADDR
// if not tmp then
39479: LD_VAR 0 5
39483: NOT
39484: IFFALSE 39488
// exit ;
39486: GO 39537
// for i in tmp do
39488: LD_ADDR_VAR 0 4
39492: PUSH
39493: LD_VAR 0 5
39497: PUSH
39498: FOR_IN
39499: IFFALSE 39535
// if GetTech ( i , side ) <> state_researched then
39501: LD_VAR 0 4
39505: PPUSH
39506: LD_VAR 0 1
39510: PPUSH
39511: CALL_OW 321
39515: PUSH
39516: LD_INT 2
39518: NONEQUAL
39519: IFFALSE 39533
// begin result := false ;
39521: LD_ADDR_VAR 0 3
39525: PUSH
39526: LD_INT 0
39528: ST_TO_ADDR
// exit ;
39529: POP
39530: POP
39531: GO 39537
// end ;
39533: GO 39498
39535: POP
39536: POP
// end ;
39537: LD_VAR 0 3
39541: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39542: LD_INT 0
39544: PPUSH
39545: PPUSH
39546: PPUSH
39547: PPUSH
39548: PPUSH
39549: PPUSH
39550: PPUSH
39551: PPUSH
39552: PPUSH
39553: PPUSH
39554: PPUSH
39555: PPUSH
39556: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39557: LD_VAR 0 1
39561: NOT
39562: PUSH
39563: LD_VAR 0 1
39567: PPUSH
39568: CALL_OW 257
39572: PUSH
39573: LD_INT 9
39575: NONEQUAL
39576: OR
39577: IFFALSE 39581
// exit ;
39579: GO 40154
// side := GetSide ( unit ) ;
39581: LD_ADDR_VAR 0 9
39585: PUSH
39586: LD_VAR 0 1
39590: PPUSH
39591: CALL_OW 255
39595: ST_TO_ADDR
// tech_space := tech_spacanom ;
39596: LD_ADDR_VAR 0 12
39600: PUSH
39601: LD_INT 29
39603: ST_TO_ADDR
// tech_time := tech_taurad ;
39604: LD_ADDR_VAR 0 13
39608: PUSH
39609: LD_INT 28
39611: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39612: LD_ADDR_VAR 0 11
39616: PUSH
39617: LD_VAR 0 1
39621: PPUSH
39622: CALL_OW 310
39626: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39627: LD_VAR 0 11
39631: PPUSH
39632: CALL_OW 247
39636: PUSH
39637: LD_INT 2
39639: EQUAL
39640: IFFALSE 39644
// exit ;
39642: GO 40154
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39644: LD_ADDR_VAR 0 8
39648: PUSH
39649: LD_INT 81
39651: PUSH
39652: LD_VAR 0 9
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 3
39663: PUSH
39664: LD_INT 21
39666: PUSH
39667: LD_INT 3
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PPUSH
39682: CALL_OW 69
39686: ST_TO_ADDR
// if not tmp then
39687: LD_VAR 0 8
39691: NOT
39692: IFFALSE 39696
// exit ;
39694: GO 40154
// if in_unit then
39696: LD_VAR 0 11
39700: IFFALSE 39724
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39702: LD_ADDR_VAR 0 10
39706: PUSH
39707: LD_VAR 0 8
39711: PPUSH
39712: LD_VAR 0 11
39716: PPUSH
39717: CALL_OW 74
39721: ST_TO_ADDR
39722: GO 39744
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39724: LD_ADDR_VAR 0 10
39728: PUSH
39729: LD_VAR 0 8
39733: PPUSH
39734: LD_VAR 0 1
39738: PPUSH
39739: CALL_OW 74
39743: ST_TO_ADDR
// if not enemy then
39744: LD_VAR 0 10
39748: NOT
39749: IFFALSE 39753
// exit ;
39751: GO 40154
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39753: LD_VAR 0 11
39757: PUSH
39758: LD_VAR 0 11
39762: PPUSH
39763: LD_VAR 0 10
39767: PPUSH
39768: CALL_OW 296
39772: PUSH
39773: LD_INT 13
39775: GREATER
39776: AND
39777: PUSH
39778: LD_VAR 0 1
39782: PPUSH
39783: LD_VAR 0 10
39787: PPUSH
39788: CALL_OW 296
39792: PUSH
39793: LD_INT 12
39795: GREATER
39796: OR
39797: IFFALSE 39801
// exit ;
39799: GO 40154
// missile := [ 1 ] ;
39801: LD_ADDR_VAR 0 14
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: EMPTY
39810: LIST
39811: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39812: LD_VAR 0 9
39816: PPUSH
39817: LD_VAR 0 12
39821: PPUSH
39822: CALL_OW 325
39826: IFFALSE 39855
// missile := Replace ( missile , missile + 1 , 2 ) ;
39828: LD_ADDR_VAR 0 14
39832: PUSH
39833: LD_VAR 0 14
39837: PPUSH
39838: LD_VAR 0 14
39842: PUSH
39843: LD_INT 1
39845: PLUS
39846: PPUSH
39847: LD_INT 2
39849: PPUSH
39850: CALL_OW 1
39854: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39855: LD_VAR 0 9
39859: PPUSH
39860: LD_VAR 0 13
39864: PPUSH
39865: CALL_OW 325
39869: PUSH
39870: LD_VAR 0 10
39874: PPUSH
39875: CALL_OW 255
39879: PPUSH
39880: LD_VAR 0 13
39884: PPUSH
39885: CALL_OW 325
39889: NOT
39890: AND
39891: IFFALSE 39920
// missile := Replace ( missile , missile + 1 , 3 ) ;
39893: LD_ADDR_VAR 0 14
39897: PUSH
39898: LD_VAR 0 14
39902: PPUSH
39903: LD_VAR 0 14
39907: PUSH
39908: LD_INT 1
39910: PLUS
39911: PPUSH
39912: LD_INT 3
39914: PPUSH
39915: CALL_OW 1
39919: ST_TO_ADDR
// if missile < 2 then
39920: LD_VAR 0 14
39924: PUSH
39925: LD_INT 2
39927: LESS
39928: IFFALSE 39932
// exit ;
39930: GO 40154
// x := GetX ( enemy ) ;
39932: LD_ADDR_VAR 0 4
39936: PUSH
39937: LD_VAR 0 10
39941: PPUSH
39942: CALL_OW 250
39946: ST_TO_ADDR
// y := GetY ( enemy ) ;
39947: LD_ADDR_VAR 0 5
39951: PUSH
39952: LD_VAR 0 10
39956: PPUSH
39957: CALL_OW 251
39961: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39962: LD_ADDR_VAR 0 6
39966: PUSH
39967: LD_VAR 0 4
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PPUSH
39976: LD_INT 1
39978: PPUSH
39979: CALL_OW 12
39983: PLUS
39984: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39985: LD_ADDR_VAR 0 7
39989: PUSH
39990: LD_VAR 0 5
39994: PUSH
39995: LD_INT 1
39997: NEG
39998: PPUSH
39999: LD_INT 1
40001: PPUSH
40002: CALL_OW 12
40006: PLUS
40007: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40008: LD_VAR 0 6
40012: PPUSH
40013: LD_VAR 0 7
40017: PPUSH
40018: CALL_OW 488
40022: NOT
40023: IFFALSE 40045
// begin _x := x ;
40025: LD_ADDR_VAR 0 6
40029: PUSH
40030: LD_VAR 0 4
40034: ST_TO_ADDR
// _y := y ;
40035: LD_ADDR_VAR 0 7
40039: PUSH
40040: LD_VAR 0 5
40044: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40045: LD_ADDR_VAR 0 3
40049: PUSH
40050: LD_INT 1
40052: PPUSH
40053: LD_VAR 0 14
40057: PPUSH
40058: CALL_OW 12
40062: ST_TO_ADDR
// case i of 1 :
40063: LD_VAR 0 3
40067: PUSH
40068: LD_INT 1
40070: DOUBLE
40071: EQUAL
40072: IFTRUE 40076
40074: GO 40093
40076: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40077: LD_VAR 0 1
40081: PPUSH
40082: LD_VAR 0 10
40086: PPUSH
40087: CALL_OW 115
40091: GO 40154
40093: LD_INT 2
40095: DOUBLE
40096: EQUAL
40097: IFTRUE 40101
40099: GO 40123
40101: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40102: LD_VAR 0 1
40106: PPUSH
40107: LD_VAR 0 6
40111: PPUSH
40112: LD_VAR 0 7
40116: PPUSH
40117: CALL_OW 153
40121: GO 40154
40123: LD_INT 3
40125: DOUBLE
40126: EQUAL
40127: IFTRUE 40131
40129: GO 40153
40131: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40132: LD_VAR 0 1
40136: PPUSH
40137: LD_VAR 0 6
40141: PPUSH
40142: LD_VAR 0 7
40146: PPUSH
40147: CALL_OW 154
40151: GO 40154
40153: POP
// end ;
40154: LD_VAR 0 2
40158: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40159: LD_INT 0
40161: PPUSH
40162: PPUSH
40163: PPUSH
40164: PPUSH
40165: PPUSH
40166: PPUSH
// if not unit or not building then
40167: LD_VAR 0 1
40171: NOT
40172: PUSH
40173: LD_VAR 0 2
40177: NOT
40178: OR
40179: IFFALSE 40183
// exit ;
40181: GO 40341
// x := GetX ( building ) ;
40183: LD_ADDR_VAR 0 5
40187: PUSH
40188: LD_VAR 0 2
40192: PPUSH
40193: CALL_OW 250
40197: ST_TO_ADDR
// y := GetY ( building ) ;
40198: LD_ADDR_VAR 0 6
40202: PUSH
40203: LD_VAR 0 2
40207: PPUSH
40208: CALL_OW 251
40212: ST_TO_ADDR
// for i = 0 to 5 do
40213: LD_ADDR_VAR 0 4
40217: PUSH
40218: DOUBLE
40219: LD_INT 0
40221: DEC
40222: ST_TO_ADDR
40223: LD_INT 5
40225: PUSH
40226: FOR_TO
40227: IFFALSE 40339
// begin _x := ShiftX ( x , i , 3 ) ;
40229: LD_ADDR_VAR 0 7
40233: PUSH
40234: LD_VAR 0 5
40238: PPUSH
40239: LD_VAR 0 4
40243: PPUSH
40244: LD_INT 3
40246: PPUSH
40247: CALL_OW 272
40251: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40252: LD_ADDR_VAR 0 8
40256: PUSH
40257: LD_VAR 0 6
40261: PPUSH
40262: LD_VAR 0 4
40266: PPUSH
40267: LD_INT 3
40269: PPUSH
40270: CALL_OW 273
40274: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40275: LD_VAR 0 7
40279: PPUSH
40280: LD_VAR 0 8
40284: PPUSH
40285: CALL_OW 488
40289: NOT
40290: IFFALSE 40294
// continue ;
40292: GO 40226
// if HexInfo ( _x , _y ) = 0 then
40294: LD_VAR 0 7
40298: PPUSH
40299: LD_VAR 0 8
40303: PPUSH
40304: CALL_OW 428
40308: PUSH
40309: LD_INT 0
40311: EQUAL
40312: IFFALSE 40337
// begin ComMoveXY ( unit , _x , _y ) ;
40314: LD_VAR 0 1
40318: PPUSH
40319: LD_VAR 0 7
40323: PPUSH
40324: LD_VAR 0 8
40328: PPUSH
40329: CALL_OW 111
// exit ;
40333: POP
40334: POP
40335: GO 40341
// end ; end ;
40337: GO 40226
40339: POP
40340: POP
// end ;
40341: LD_VAR 0 3
40345: RET
// export function ScanBase ( side , base_area ) ; begin
40346: LD_INT 0
40348: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40349: LD_ADDR_VAR 0 3
40353: PUSH
40354: LD_VAR 0 2
40358: PPUSH
40359: LD_INT 81
40361: PUSH
40362: LD_VAR 0 1
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PPUSH
40371: CALL_OW 70
40375: ST_TO_ADDR
// end ;
40376: LD_VAR 0 3
40380: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40381: LD_INT 0
40383: PPUSH
40384: PPUSH
40385: PPUSH
40386: PPUSH
// result := false ;
40387: LD_ADDR_VAR 0 2
40391: PUSH
40392: LD_INT 0
40394: ST_TO_ADDR
// side := GetSide ( unit ) ;
40395: LD_ADDR_VAR 0 3
40399: PUSH
40400: LD_VAR 0 1
40404: PPUSH
40405: CALL_OW 255
40409: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40410: LD_ADDR_VAR 0 4
40414: PUSH
40415: LD_VAR 0 1
40419: PPUSH
40420: CALL_OW 248
40424: ST_TO_ADDR
// case nat of 1 :
40425: LD_VAR 0 4
40429: PUSH
40430: LD_INT 1
40432: DOUBLE
40433: EQUAL
40434: IFTRUE 40438
40436: GO 40449
40438: POP
// tech := tech_lassight ; 2 :
40439: LD_ADDR_VAR 0 5
40443: PUSH
40444: LD_INT 12
40446: ST_TO_ADDR
40447: GO 40488
40449: LD_INT 2
40451: DOUBLE
40452: EQUAL
40453: IFTRUE 40457
40455: GO 40468
40457: POP
// tech := tech_mortar ; 3 :
40458: LD_ADDR_VAR 0 5
40462: PUSH
40463: LD_INT 41
40465: ST_TO_ADDR
40466: GO 40488
40468: LD_INT 3
40470: DOUBLE
40471: EQUAL
40472: IFTRUE 40476
40474: GO 40487
40476: POP
// tech := tech_bazooka ; end ;
40477: LD_ADDR_VAR 0 5
40481: PUSH
40482: LD_INT 44
40484: ST_TO_ADDR
40485: GO 40488
40487: POP
// if Researched ( side , tech ) then
40488: LD_VAR 0 3
40492: PPUSH
40493: LD_VAR 0 5
40497: PPUSH
40498: CALL_OW 325
40502: IFFALSE 40529
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40504: LD_ADDR_VAR 0 2
40508: PUSH
40509: LD_INT 5
40511: PUSH
40512: LD_INT 8
40514: PUSH
40515: LD_INT 9
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: LIST
40522: PUSH
40523: LD_VAR 0 4
40527: ARRAY
40528: ST_TO_ADDR
// end ;
40529: LD_VAR 0 2
40533: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40534: LD_INT 0
40536: PPUSH
40537: PPUSH
40538: PPUSH
// if not mines then
40539: LD_VAR 0 2
40543: NOT
40544: IFFALSE 40548
// exit ;
40546: GO 40692
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40548: LD_ADDR_VAR 0 5
40552: PUSH
40553: LD_INT 81
40555: PUSH
40556: LD_VAR 0 1
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 3
40567: PUSH
40568: LD_INT 21
40570: PUSH
40571: LD_INT 3
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PPUSH
40586: CALL_OW 69
40590: ST_TO_ADDR
// for i in mines do
40591: LD_ADDR_VAR 0 4
40595: PUSH
40596: LD_VAR 0 2
40600: PUSH
40601: FOR_IN
40602: IFFALSE 40690
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40604: LD_VAR 0 4
40608: PUSH
40609: LD_INT 1
40611: ARRAY
40612: PPUSH
40613: LD_VAR 0 4
40617: PUSH
40618: LD_INT 2
40620: ARRAY
40621: PPUSH
40622: CALL_OW 458
40626: NOT
40627: IFFALSE 40631
// continue ;
40629: GO 40601
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40631: LD_VAR 0 4
40635: PUSH
40636: LD_INT 1
40638: ARRAY
40639: PPUSH
40640: LD_VAR 0 4
40644: PUSH
40645: LD_INT 2
40647: ARRAY
40648: PPUSH
40649: CALL_OW 428
40653: PUSH
40654: LD_VAR 0 5
40658: IN
40659: IFFALSE 40688
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40661: LD_VAR 0 4
40665: PUSH
40666: LD_INT 1
40668: ARRAY
40669: PPUSH
40670: LD_VAR 0 4
40674: PUSH
40675: LD_INT 2
40677: ARRAY
40678: PPUSH
40679: LD_VAR 0 1
40683: PPUSH
40684: CALL_OW 456
// end ;
40688: GO 40601
40690: POP
40691: POP
// end ;
40692: LD_VAR 0 3
40696: RET
// export function Count ( array ) ; var i ; begin
40697: LD_INT 0
40699: PPUSH
40700: PPUSH
// result := 0 ;
40701: LD_ADDR_VAR 0 2
40705: PUSH
40706: LD_INT 0
40708: ST_TO_ADDR
// for i in array do
40709: LD_ADDR_VAR 0 3
40713: PUSH
40714: LD_VAR 0 1
40718: PUSH
40719: FOR_IN
40720: IFFALSE 40744
// if i then
40722: LD_VAR 0 3
40726: IFFALSE 40742
// result := result + 1 ;
40728: LD_ADDR_VAR 0 2
40732: PUSH
40733: LD_VAR 0 2
40737: PUSH
40738: LD_INT 1
40740: PLUS
40741: ST_TO_ADDR
40742: GO 40719
40744: POP
40745: POP
// end ;
40746: LD_VAR 0 2
40750: RET
// export function IsEmpty ( building ) ; begin
40751: LD_INT 0
40753: PPUSH
// if not building then
40754: LD_VAR 0 1
40758: NOT
40759: IFFALSE 40763
// exit ;
40761: GO 40806
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40763: LD_ADDR_VAR 0 2
40767: PUSH
40768: LD_VAR 0 1
40772: PUSH
40773: LD_INT 22
40775: PUSH
40776: LD_VAR 0 1
40780: PPUSH
40781: CALL_OW 255
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 58
40792: PUSH
40793: EMPTY
40794: LIST
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PPUSH
40800: CALL_OW 69
40804: IN
40805: ST_TO_ADDR
// end ;
40806: LD_VAR 0 2
40810: RET
// export function IsNotFull ( building ) ; var places ; begin
40811: LD_INT 0
40813: PPUSH
40814: PPUSH
// if not building then
40815: LD_VAR 0 1
40819: NOT
40820: IFFALSE 40824
// exit ;
40822: GO 40995
// result := false ;
40824: LD_ADDR_VAR 0 2
40828: PUSH
40829: LD_INT 0
40831: ST_TO_ADDR
// places := 0 ;
40832: LD_ADDR_VAR 0 3
40836: PUSH
40837: LD_INT 0
40839: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
40840: LD_VAR 0 1
40844: PPUSH
40845: CALL_OW 266
40849: PUSH
40850: LD_INT 0
40852: DOUBLE
40853: EQUAL
40854: IFTRUE 40912
40856: LD_INT 1
40858: DOUBLE
40859: EQUAL
40860: IFTRUE 40912
40862: LD_INT 6
40864: DOUBLE
40865: EQUAL
40866: IFTRUE 40912
40868: LD_INT 7
40870: DOUBLE
40871: EQUAL
40872: IFTRUE 40912
40874: LD_INT 8
40876: DOUBLE
40877: EQUAL
40878: IFTRUE 40912
40880: LD_INT 4
40882: DOUBLE
40883: EQUAL
40884: IFTRUE 40912
40886: LD_INT 5
40888: DOUBLE
40889: EQUAL
40890: IFTRUE 40912
40892: LD_INT 2
40894: DOUBLE
40895: EQUAL
40896: IFTRUE 40912
40898: LD_INT 3
40900: DOUBLE
40901: EQUAL
40902: IFTRUE 40912
40904: LD_INT 35
40906: DOUBLE
40907: EQUAL
40908: IFTRUE 40912
40910: GO 40923
40912: POP
// places := 6 ; b_bunker , b_breastwork :
40913: LD_ADDR_VAR 0 3
40917: PUSH
40918: LD_INT 6
40920: ST_TO_ADDR
40921: GO 40968
40923: LD_INT 32
40925: DOUBLE
40926: EQUAL
40927: IFTRUE 40937
40929: LD_INT 31
40931: DOUBLE
40932: EQUAL
40933: IFTRUE 40937
40935: GO 40948
40937: POP
// places := 1 ; b_control_tower :
40938: LD_ADDR_VAR 0 3
40942: PUSH
40943: LD_INT 1
40945: ST_TO_ADDR
40946: GO 40968
40948: LD_INT 36
40950: DOUBLE
40951: EQUAL
40952: IFTRUE 40956
40954: GO 40967
40956: POP
// places := 3 ; end ;
40957: LD_ADDR_VAR 0 3
40961: PUSH
40962: LD_INT 3
40964: ST_TO_ADDR
40965: GO 40968
40967: POP
// if places then
40968: LD_VAR 0 3
40972: IFFALSE 40995
// result := UnitsInside ( building ) < places ;
40974: LD_ADDR_VAR 0 2
40978: PUSH
40979: LD_VAR 0 1
40983: PPUSH
40984: CALL_OW 313
40988: PUSH
40989: LD_VAR 0 3
40993: LESS
40994: ST_TO_ADDR
// end ;
40995: LD_VAR 0 2
40999: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41000: LD_INT 0
41002: PPUSH
41003: PPUSH
41004: PPUSH
41005: PPUSH
// tmp := [ ] ;
41006: LD_ADDR_VAR 0 3
41010: PUSH
41011: EMPTY
41012: ST_TO_ADDR
// list := [ ] ;
41013: LD_ADDR_VAR 0 5
41017: PUSH
41018: EMPTY
41019: ST_TO_ADDR
// for i = 16 to 25 do
41020: LD_ADDR_VAR 0 4
41024: PUSH
41025: DOUBLE
41026: LD_INT 16
41028: DEC
41029: ST_TO_ADDR
41030: LD_INT 25
41032: PUSH
41033: FOR_TO
41034: IFFALSE 41107
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41036: LD_ADDR_VAR 0 3
41040: PUSH
41041: LD_VAR 0 3
41045: PUSH
41046: LD_INT 22
41048: PUSH
41049: LD_VAR 0 1
41053: PPUSH
41054: CALL_OW 255
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 91
41065: PUSH
41066: LD_VAR 0 1
41070: PUSH
41071: LD_INT 6
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 30
41081: PUSH
41082: LD_VAR 0 4
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: LIST
41095: PUSH
41096: EMPTY
41097: LIST
41098: PPUSH
41099: CALL_OW 69
41103: ADD
41104: ST_TO_ADDR
41105: GO 41033
41107: POP
41108: POP
// for i = 1 to tmp do
41109: LD_ADDR_VAR 0 4
41113: PUSH
41114: DOUBLE
41115: LD_INT 1
41117: DEC
41118: ST_TO_ADDR
41119: LD_VAR 0 3
41123: PUSH
41124: FOR_TO
41125: IFFALSE 41213
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41127: LD_ADDR_VAR 0 5
41131: PUSH
41132: LD_VAR 0 5
41136: PUSH
41137: LD_VAR 0 3
41141: PUSH
41142: LD_VAR 0 4
41146: ARRAY
41147: PPUSH
41148: CALL_OW 266
41152: PUSH
41153: LD_VAR 0 3
41157: PUSH
41158: LD_VAR 0 4
41162: ARRAY
41163: PPUSH
41164: CALL_OW 250
41168: PUSH
41169: LD_VAR 0 3
41173: PUSH
41174: LD_VAR 0 4
41178: ARRAY
41179: PPUSH
41180: CALL_OW 251
41184: PUSH
41185: LD_VAR 0 3
41189: PUSH
41190: LD_VAR 0 4
41194: ARRAY
41195: PPUSH
41196: CALL_OW 254
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: PUSH
41207: EMPTY
41208: LIST
41209: ADD
41210: ST_TO_ADDR
41211: GO 41124
41213: POP
41214: POP
// result := list ;
41215: LD_ADDR_VAR 0 2
41219: PUSH
41220: LD_VAR 0 5
41224: ST_TO_ADDR
// end ;
41225: LD_VAR 0 2
41229: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41230: LD_INT 0
41232: PPUSH
41233: PPUSH
41234: PPUSH
41235: PPUSH
41236: PPUSH
41237: PPUSH
41238: PPUSH
// if not factory then
41239: LD_VAR 0 1
41243: NOT
41244: IFFALSE 41248
// exit ;
41246: GO 41841
// if control = control_apeman then
41248: LD_VAR 0 4
41252: PUSH
41253: LD_INT 5
41255: EQUAL
41256: IFFALSE 41365
// begin tmp := UnitsInside ( factory ) ;
41258: LD_ADDR_VAR 0 8
41262: PUSH
41263: LD_VAR 0 1
41267: PPUSH
41268: CALL_OW 313
41272: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41273: LD_VAR 0 8
41277: PPUSH
41278: LD_INT 25
41280: PUSH
41281: LD_INT 12
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PPUSH
41288: CALL_OW 72
41292: NOT
41293: IFFALSE 41303
// control := control_manual ;
41295: LD_ADDR_VAR 0 4
41299: PUSH
41300: LD_INT 1
41302: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41303: LD_ADDR_VAR 0 8
41307: PUSH
41308: LD_VAR 0 1
41312: PPUSH
41313: CALL 41000 0 1
41317: ST_TO_ADDR
// if tmp then
41318: LD_VAR 0 8
41322: IFFALSE 41365
// begin for i in tmp do
41324: LD_ADDR_VAR 0 7
41328: PUSH
41329: LD_VAR 0 8
41333: PUSH
41334: FOR_IN
41335: IFFALSE 41363
// if i [ 1 ] = b_ext_radio then
41337: LD_VAR 0 7
41341: PUSH
41342: LD_INT 1
41344: ARRAY
41345: PUSH
41346: LD_INT 22
41348: EQUAL
41349: IFFALSE 41361
// begin control := control_remote ;
41351: LD_ADDR_VAR 0 4
41355: PUSH
41356: LD_INT 2
41358: ST_TO_ADDR
// break ;
41359: GO 41363
// end ;
41361: GO 41334
41363: POP
41364: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41365: LD_VAR 0 1
41369: PPUSH
41370: LD_VAR 0 2
41374: PPUSH
41375: LD_VAR 0 3
41379: PPUSH
41380: LD_VAR 0 4
41384: PPUSH
41385: LD_VAR 0 5
41389: PPUSH
41390: CALL_OW 448
41394: IFFALSE 41429
// begin result := [ chassis , engine , control , weapon ] ;
41396: LD_ADDR_VAR 0 6
41400: PUSH
41401: LD_VAR 0 2
41405: PUSH
41406: LD_VAR 0 3
41410: PUSH
41411: LD_VAR 0 4
41415: PUSH
41416: LD_VAR 0 5
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: ST_TO_ADDR
// exit ;
41427: GO 41841
// end ; _chassis := AvailableChassisList ( factory ) ;
41429: LD_ADDR_VAR 0 9
41433: PUSH
41434: LD_VAR 0 1
41438: PPUSH
41439: CALL_OW 475
41443: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41444: LD_ADDR_VAR 0 11
41448: PUSH
41449: LD_VAR 0 1
41453: PPUSH
41454: CALL_OW 476
41458: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41459: LD_ADDR_VAR 0 12
41463: PUSH
41464: LD_VAR 0 1
41468: PPUSH
41469: CALL_OW 477
41473: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41474: LD_ADDR_VAR 0 10
41478: PUSH
41479: LD_VAR 0 1
41483: PPUSH
41484: CALL_OW 478
41488: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41489: LD_VAR 0 9
41493: NOT
41494: PUSH
41495: LD_VAR 0 11
41499: NOT
41500: OR
41501: PUSH
41502: LD_VAR 0 12
41506: NOT
41507: OR
41508: PUSH
41509: LD_VAR 0 10
41513: NOT
41514: OR
41515: IFFALSE 41550
// begin result := [ chassis , engine , control , weapon ] ;
41517: LD_ADDR_VAR 0 6
41521: PUSH
41522: LD_VAR 0 2
41526: PUSH
41527: LD_VAR 0 3
41531: PUSH
41532: LD_VAR 0 4
41536: PUSH
41537: LD_VAR 0 5
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: ST_TO_ADDR
// exit ;
41548: GO 41841
// end ; if not chassis in _chassis then
41550: LD_VAR 0 2
41554: PUSH
41555: LD_VAR 0 9
41559: IN
41560: NOT
41561: IFFALSE 41587
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41563: LD_ADDR_VAR 0 2
41567: PUSH
41568: LD_VAR 0 9
41572: PUSH
41573: LD_INT 1
41575: PPUSH
41576: LD_VAR 0 9
41580: PPUSH
41581: CALL_OW 12
41585: ARRAY
41586: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41587: LD_VAR 0 2
41591: PPUSH
41592: LD_VAR 0 3
41596: PPUSH
41597: CALL 41846 0 2
41601: NOT
41602: IFFALSE 41661
// repeat engine := _engine [ 1 ] ;
41604: LD_ADDR_VAR 0 3
41608: PUSH
41609: LD_VAR 0 11
41613: PUSH
41614: LD_INT 1
41616: ARRAY
41617: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41618: LD_ADDR_VAR 0 11
41622: PUSH
41623: LD_VAR 0 11
41627: PPUSH
41628: LD_INT 1
41630: PPUSH
41631: CALL_OW 3
41635: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41636: LD_VAR 0 2
41640: PPUSH
41641: LD_VAR 0 3
41645: PPUSH
41646: CALL 41846 0 2
41650: PUSH
41651: LD_VAR 0 11
41655: PUSH
41656: EMPTY
41657: EQUAL
41658: OR
41659: IFFALSE 41604
// if not control in _control then
41661: LD_VAR 0 4
41665: PUSH
41666: LD_VAR 0 12
41670: IN
41671: NOT
41672: IFFALSE 41698
// control := _control [ rand ( 1 , _control ) ] ;
41674: LD_ADDR_VAR 0 4
41678: PUSH
41679: LD_VAR 0 12
41683: PUSH
41684: LD_INT 1
41686: PPUSH
41687: LD_VAR 0 12
41691: PPUSH
41692: CALL_OW 12
41696: ARRAY
41697: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41698: LD_VAR 0 2
41702: PPUSH
41703: LD_VAR 0 5
41707: PPUSH
41708: CALL 42066 0 2
41712: NOT
41713: IFFALSE 41772
// repeat weapon := _weapon [ 1 ] ;
41715: LD_ADDR_VAR 0 5
41719: PUSH
41720: LD_VAR 0 10
41724: PUSH
41725: LD_INT 1
41727: ARRAY
41728: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41729: LD_ADDR_VAR 0 10
41733: PUSH
41734: LD_VAR 0 10
41738: PPUSH
41739: LD_INT 1
41741: PPUSH
41742: CALL_OW 3
41746: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41747: LD_VAR 0 2
41751: PPUSH
41752: LD_VAR 0 5
41756: PPUSH
41757: CALL 42066 0 2
41761: PUSH
41762: LD_VAR 0 10
41766: PUSH
41767: EMPTY
41768: EQUAL
41769: OR
41770: IFFALSE 41715
// result := [ ] ;
41772: LD_ADDR_VAR 0 6
41776: PUSH
41777: EMPTY
41778: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41779: LD_VAR 0 1
41783: PPUSH
41784: LD_VAR 0 2
41788: PPUSH
41789: LD_VAR 0 3
41793: PPUSH
41794: LD_VAR 0 4
41798: PPUSH
41799: LD_VAR 0 5
41803: PPUSH
41804: CALL_OW 448
41808: IFFALSE 41841
// result := [ chassis , engine , control , weapon ] ;
41810: LD_ADDR_VAR 0 6
41814: PUSH
41815: LD_VAR 0 2
41819: PUSH
41820: LD_VAR 0 3
41824: PUSH
41825: LD_VAR 0 4
41829: PUSH
41830: LD_VAR 0 5
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: ST_TO_ADDR
// end ;
41841: LD_VAR 0 6
41845: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41846: LD_INT 0
41848: PPUSH
// if not chassis or not engine then
41849: LD_VAR 0 1
41853: NOT
41854: PUSH
41855: LD_VAR 0 2
41859: NOT
41860: OR
41861: IFFALSE 41865
// exit ;
41863: GO 42061
// case engine of engine_solar :
41865: LD_VAR 0 2
41869: PUSH
41870: LD_INT 2
41872: DOUBLE
41873: EQUAL
41874: IFTRUE 41878
41876: GO 41916
41878: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41879: LD_ADDR_VAR 0 3
41883: PUSH
41884: LD_INT 11
41886: PUSH
41887: LD_INT 12
41889: PUSH
41890: LD_INT 13
41892: PUSH
41893: LD_INT 14
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: LD_INT 2
41901: PUSH
41902: LD_INT 3
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: ST_TO_ADDR
41914: GO 42045
41916: LD_INT 1
41918: DOUBLE
41919: EQUAL
41920: IFTRUE 41924
41922: GO 41986
41924: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41925: LD_ADDR_VAR 0 3
41929: PUSH
41930: LD_INT 11
41932: PUSH
41933: LD_INT 12
41935: PUSH
41936: LD_INT 13
41938: PUSH
41939: LD_INT 14
41941: PUSH
41942: LD_INT 1
41944: PUSH
41945: LD_INT 2
41947: PUSH
41948: LD_INT 3
41950: PUSH
41951: LD_INT 4
41953: PUSH
41954: LD_INT 5
41956: PUSH
41957: LD_INT 21
41959: PUSH
41960: LD_INT 23
41962: PUSH
41963: LD_INT 22
41965: PUSH
41966: LD_INT 24
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: ST_TO_ADDR
41984: GO 42045
41986: LD_INT 3
41988: DOUBLE
41989: EQUAL
41990: IFTRUE 41994
41992: GO 42044
41994: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41995: LD_ADDR_VAR 0 3
41999: PUSH
42000: LD_INT 13
42002: PUSH
42003: LD_INT 14
42005: PUSH
42006: LD_INT 2
42008: PUSH
42009: LD_INT 3
42011: PUSH
42012: LD_INT 4
42014: PUSH
42015: LD_INT 5
42017: PUSH
42018: LD_INT 21
42020: PUSH
42021: LD_INT 22
42023: PUSH
42024: LD_INT 23
42026: PUSH
42027: LD_INT 24
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: ST_TO_ADDR
42042: GO 42045
42044: POP
// result := ( chassis in result ) ;
42045: LD_ADDR_VAR 0 3
42049: PUSH
42050: LD_VAR 0 1
42054: PUSH
42055: LD_VAR 0 3
42059: IN
42060: ST_TO_ADDR
// end ;
42061: LD_VAR 0 3
42065: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42066: LD_INT 0
42068: PPUSH
// if not chassis or not weapon then
42069: LD_VAR 0 1
42073: NOT
42074: PUSH
42075: LD_VAR 0 2
42079: NOT
42080: OR
42081: IFFALSE 42085
// exit ;
42083: GO 43145
// case weapon of us_machine_gun :
42085: LD_VAR 0 2
42089: PUSH
42090: LD_INT 2
42092: DOUBLE
42093: EQUAL
42094: IFTRUE 42098
42096: GO 42128
42098: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42099: LD_ADDR_VAR 0 3
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: LD_INT 3
42112: PUSH
42113: LD_INT 4
42115: PUSH
42116: LD_INT 5
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: ST_TO_ADDR
42126: GO 43129
42128: LD_INT 3
42130: DOUBLE
42131: EQUAL
42132: IFTRUE 42136
42134: GO 42166
42136: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42137: LD_ADDR_VAR 0 3
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: LD_INT 2
42147: PUSH
42148: LD_INT 3
42150: PUSH
42151: LD_INT 4
42153: PUSH
42154: LD_INT 5
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: ST_TO_ADDR
42164: GO 43129
42166: LD_INT 11
42168: DOUBLE
42169: EQUAL
42170: IFTRUE 42174
42172: GO 42204
42174: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42175: LD_ADDR_VAR 0 3
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: LD_INT 2
42185: PUSH
42186: LD_INT 3
42188: PUSH
42189: LD_INT 4
42191: PUSH
42192: LD_INT 5
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: ST_TO_ADDR
42202: GO 43129
42204: LD_INT 4
42206: DOUBLE
42207: EQUAL
42208: IFTRUE 42212
42210: GO 42238
42212: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42213: LD_ADDR_VAR 0 3
42217: PUSH
42218: LD_INT 2
42220: PUSH
42221: LD_INT 3
42223: PUSH
42224: LD_INT 4
42226: PUSH
42227: LD_INT 5
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: ST_TO_ADDR
42236: GO 43129
42238: LD_INT 5
42240: DOUBLE
42241: EQUAL
42242: IFTRUE 42246
42244: GO 42272
42246: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42247: LD_ADDR_VAR 0 3
42251: PUSH
42252: LD_INT 2
42254: PUSH
42255: LD_INT 3
42257: PUSH
42258: LD_INT 4
42260: PUSH
42261: LD_INT 5
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: ST_TO_ADDR
42270: GO 43129
42272: LD_INT 9
42274: DOUBLE
42275: EQUAL
42276: IFTRUE 42280
42278: GO 42306
42280: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42281: LD_ADDR_VAR 0 3
42285: PUSH
42286: LD_INT 2
42288: PUSH
42289: LD_INT 3
42291: PUSH
42292: LD_INT 4
42294: PUSH
42295: LD_INT 5
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: ST_TO_ADDR
42304: GO 43129
42306: LD_INT 7
42308: DOUBLE
42309: EQUAL
42310: IFTRUE 42314
42312: GO 42340
42314: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42315: LD_ADDR_VAR 0 3
42319: PUSH
42320: LD_INT 2
42322: PUSH
42323: LD_INT 3
42325: PUSH
42326: LD_INT 4
42328: PUSH
42329: LD_INT 5
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: ST_TO_ADDR
42338: GO 43129
42340: LD_INT 12
42342: DOUBLE
42343: EQUAL
42344: IFTRUE 42348
42346: GO 42374
42348: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42349: LD_ADDR_VAR 0 3
42353: PUSH
42354: LD_INT 2
42356: PUSH
42357: LD_INT 3
42359: PUSH
42360: LD_INT 4
42362: PUSH
42363: LD_INT 5
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: ST_TO_ADDR
42372: GO 43129
42374: LD_INT 13
42376: DOUBLE
42377: EQUAL
42378: IFTRUE 42382
42380: GO 42408
42382: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42383: LD_ADDR_VAR 0 3
42387: PUSH
42388: LD_INT 2
42390: PUSH
42391: LD_INT 3
42393: PUSH
42394: LD_INT 4
42396: PUSH
42397: LD_INT 5
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: ST_TO_ADDR
42406: GO 43129
42408: LD_INT 14
42410: DOUBLE
42411: EQUAL
42412: IFTRUE 42416
42414: GO 42434
42416: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42417: LD_ADDR_VAR 0 3
42421: PUSH
42422: LD_INT 4
42424: PUSH
42425: LD_INT 5
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: ST_TO_ADDR
42432: GO 43129
42434: LD_INT 6
42436: DOUBLE
42437: EQUAL
42438: IFTRUE 42442
42440: GO 42460
42442: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42443: LD_ADDR_VAR 0 3
42447: PUSH
42448: LD_INT 4
42450: PUSH
42451: LD_INT 5
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: ST_TO_ADDR
42458: GO 43129
42460: LD_INT 10
42462: DOUBLE
42463: EQUAL
42464: IFTRUE 42468
42466: GO 42486
42468: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42469: LD_ADDR_VAR 0 3
42473: PUSH
42474: LD_INT 4
42476: PUSH
42477: LD_INT 5
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: ST_TO_ADDR
42484: GO 43129
42486: LD_INT 22
42488: DOUBLE
42489: EQUAL
42490: IFTRUE 42494
42492: GO 42520
42494: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42495: LD_ADDR_VAR 0 3
42499: PUSH
42500: LD_INT 11
42502: PUSH
42503: LD_INT 12
42505: PUSH
42506: LD_INT 13
42508: PUSH
42509: LD_INT 14
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: ST_TO_ADDR
42518: GO 43129
42520: LD_INT 23
42522: DOUBLE
42523: EQUAL
42524: IFTRUE 42528
42526: GO 42554
42528: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42529: LD_ADDR_VAR 0 3
42533: PUSH
42534: LD_INT 11
42536: PUSH
42537: LD_INT 12
42539: PUSH
42540: LD_INT 13
42542: PUSH
42543: LD_INT 14
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: ST_TO_ADDR
42552: GO 43129
42554: LD_INT 24
42556: DOUBLE
42557: EQUAL
42558: IFTRUE 42562
42560: GO 42588
42562: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42563: LD_ADDR_VAR 0 3
42567: PUSH
42568: LD_INT 11
42570: PUSH
42571: LD_INT 12
42573: PUSH
42574: LD_INT 13
42576: PUSH
42577: LD_INT 14
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: ST_TO_ADDR
42586: GO 43129
42588: LD_INT 30
42590: DOUBLE
42591: EQUAL
42592: IFTRUE 42596
42594: GO 42622
42596: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42597: LD_ADDR_VAR 0 3
42601: PUSH
42602: LD_INT 11
42604: PUSH
42605: LD_INT 12
42607: PUSH
42608: LD_INT 13
42610: PUSH
42611: LD_INT 14
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: ST_TO_ADDR
42620: GO 43129
42622: LD_INT 25
42624: DOUBLE
42625: EQUAL
42626: IFTRUE 42630
42628: GO 42648
42630: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42631: LD_ADDR_VAR 0 3
42635: PUSH
42636: LD_INT 13
42638: PUSH
42639: LD_INT 14
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: ST_TO_ADDR
42646: GO 43129
42648: LD_INT 27
42650: DOUBLE
42651: EQUAL
42652: IFTRUE 42656
42654: GO 42674
42656: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42657: LD_ADDR_VAR 0 3
42661: PUSH
42662: LD_INT 13
42664: PUSH
42665: LD_INT 14
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: ST_TO_ADDR
42672: GO 43129
42674: LD_INT 92
42676: DOUBLE
42677: EQUAL
42678: IFTRUE 42682
42680: GO 42708
42682: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42683: LD_ADDR_VAR 0 3
42687: PUSH
42688: LD_INT 11
42690: PUSH
42691: LD_INT 12
42693: PUSH
42694: LD_INT 13
42696: PUSH
42697: LD_INT 14
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: ST_TO_ADDR
42706: GO 43129
42708: LD_INT 28
42710: DOUBLE
42711: EQUAL
42712: IFTRUE 42716
42714: GO 42734
42716: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42717: LD_ADDR_VAR 0 3
42721: PUSH
42722: LD_INT 13
42724: PUSH
42725: LD_INT 14
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: ST_TO_ADDR
42732: GO 43129
42734: LD_INT 29
42736: DOUBLE
42737: EQUAL
42738: IFTRUE 42742
42740: GO 42760
42742: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42743: LD_ADDR_VAR 0 3
42747: PUSH
42748: LD_INT 13
42750: PUSH
42751: LD_INT 14
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: ST_TO_ADDR
42758: GO 43129
42760: LD_INT 31
42762: DOUBLE
42763: EQUAL
42764: IFTRUE 42768
42766: GO 42786
42768: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42769: LD_ADDR_VAR 0 3
42773: PUSH
42774: LD_INT 13
42776: PUSH
42777: LD_INT 14
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: ST_TO_ADDR
42784: GO 43129
42786: LD_INT 26
42788: DOUBLE
42789: EQUAL
42790: IFTRUE 42794
42792: GO 42812
42794: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42795: LD_ADDR_VAR 0 3
42799: PUSH
42800: LD_INT 13
42802: PUSH
42803: LD_INT 14
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: ST_TO_ADDR
42810: GO 43129
42812: LD_INT 42
42814: DOUBLE
42815: EQUAL
42816: IFTRUE 42820
42818: GO 42846
42820: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42821: LD_ADDR_VAR 0 3
42825: PUSH
42826: LD_INT 21
42828: PUSH
42829: LD_INT 22
42831: PUSH
42832: LD_INT 23
42834: PUSH
42835: LD_INT 24
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: ST_TO_ADDR
42844: GO 43129
42846: LD_INT 43
42848: DOUBLE
42849: EQUAL
42850: IFTRUE 42854
42852: GO 42880
42854: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42855: LD_ADDR_VAR 0 3
42859: PUSH
42860: LD_INT 21
42862: PUSH
42863: LD_INT 22
42865: PUSH
42866: LD_INT 23
42868: PUSH
42869: LD_INT 24
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: ST_TO_ADDR
42878: GO 43129
42880: LD_INT 44
42882: DOUBLE
42883: EQUAL
42884: IFTRUE 42888
42886: GO 42914
42888: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42889: LD_ADDR_VAR 0 3
42893: PUSH
42894: LD_INT 21
42896: PUSH
42897: LD_INT 22
42899: PUSH
42900: LD_INT 23
42902: PUSH
42903: LD_INT 24
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: ST_TO_ADDR
42912: GO 43129
42914: LD_INT 45
42916: DOUBLE
42917: EQUAL
42918: IFTRUE 42922
42920: GO 42948
42922: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42923: LD_ADDR_VAR 0 3
42927: PUSH
42928: LD_INT 21
42930: PUSH
42931: LD_INT 22
42933: PUSH
42934: LD_INT 23
42936: PUSH
42937: LD_INT 24
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: ST_TO_ADDR
42946: GO 43129
42948: LD_INT 49
42950: DOUBLE
42951: EQUAL
42952: IFTRUE 42956
42954: GO 42982
42956: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42957: LD_ADDR_VAR 0 3
42961: PUSH
42962: LD_INT 21
42964: PUSH
42965: LD_INT 22
42967: PUSH
42968: LD_INT 23
42970: PUSH
42971: LD_INT 24
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: ST_TO_ADDR
42980: GO 43129
42982: LD_INT 51
42984: DOUBLE
42985: EQUAL
42986: IFTRUE 42990
42988: GO 43016
42990: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42991: LD_ADDR_VAR 0 3
42995: PUSH
42996: LD_INT 21
42998: PUSH
42999: LD_INT 22
43001: PUSH
43002: LD_INT 23
43004: PUSH
43005: LD_INT 24
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: ST_TO_ADDR
43014: GO 43129
43016: LD_INT 52
43018: DOUBLE
43019: EQUAL
43020: IFTRUE 43024
43022: GO 43050
43024: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43025: LD_ADDR_VAR 0 3
43029: PUSH
43030: LD_INT 21
43032: PUSH
43033: LD_INT 22
43035: PUSH
43036: LD_INT 23
43038: PUSH
43039: LD_INT 24
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: ST_TO_ADDR
43048: GO 43129
43050: LD_INT 53
43052: DOUBLE
43053: EQUAL
43054: IFTRUE 43058
43056: GO 43076
43058: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43059: LD_ADDR_VAR 0 3
43063: PUSH
43064: LD_INT 23
43066: PUSH
43067: LD_INT 24
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: ST_TO_ADDR
43074: GO 43129
43076: LD_INT 46
43078: DOUBLE
43079: EQUAL
43080: IFTRUE 43084
43082: GO 43102
43084: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43085: LD_ADDR_VAR 0 3
43089: PUSH
43090: LD_INT 23
43092: PUSH
43093: LD_INT 24
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: ST_TO_ADDR
43100: GO 43129
43102: LD_INT 47
43104: DOUBLE
43105: EQUAL
43106: IFTRUE 43110
43108: GO 43128
43110: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43111: LD_ADDR_VAR 0 3
43115: PUSH
43116: LD_INT 23
43118: PUSH
43119: LD_INT 24
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: ST_TO_ADDR
43126: GO 43129
43128: POP
// result := ( chassis in result ) ;
43129: LD_ADDR_VAR 0 3
43133: PUSH
43134: LD_VAR 0 1
43138: PUSH
43139: LD_VAR 0 3
43143: IN
43144: ST_TO_ADDR
// end ;
43145: LD_VAR 0 3
43149: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43150: LD_INT 0
43152: PPUSH
43153: PPUSH
43154: PPUSH
43155: PPUSH
43156: PPUSH
43157: PPUSH
43158: PPUSH
// result := array ;
43159: LD_ADDR_VAR 0 5
43163: PUSH
43164: LD_VAR 0 1
43168: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43169: LD_VAR 0 1
43173: NOT
43174: PUSH
43175: LD_VAR 0 2
43179: NOT
43180: OR
43181: PUSH
43182: LD_VAR 0 3
43186: NOT
43187: OR
43188: PUSH
43189: LD_VAR 0 2
43193: PUSH
43194: LD_VAR 0 1
43198: GREATER
43199: OR
43200: PUSH
43201: LD_VAR 0 3
43205: PUSH
43206: LD_VAR 0 1
43210: GREATER
43211: OR
43212: IFFALSE 43216
// exit ;
43214: GO 43512
// if direction then
43216: LD_VAR 0 4
43220: IFFALSE 43284
// begin d := 1 ;
43222: LD_ADDR_VAR 0 9
43226: PUSH
43227: LD_INT 1
43229: ST_TO_ADDR
// if i_from > i_to then
43230: LD_VAR 0 2
43234: PUSH
43235: LD_VAR 0 3
43239: GREATER
43240: IFFALSE 43266
// length := ( array - i_from ) + i_to else
43242: LD_ADDR_VAR 0 11
43246: PUSH
43247: LD_VAR 0 1
43251: PUSH
43252: LD_VAR 0 2
43256: MINUS
43257: PUSH
43258: LD_VAR 0 3
43262: PLUS
43263: ST_TO_ADDR
43264: GO 43282
// length := i_to - i_from ;
43266: LD_ADDR_VAR 0 11
43270: PUSH
43271: LD_VAR 0 3
43275: PUSH
43276: LD_VAR 0 2
43280: MINUS
43281: ST_TO_ADDR
// end else
43282: GO 43345
// begin d := - 1 ;
43284: LD_ADDR_VAR 0 9
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: ST_TO_ADDR
// if i_from > i_to then
43293: LD_VAR 0 2
43297: PUSH
43298: LD_VAR 0 3
43302: GREATER
43303: IFFALSE 43323
// length := i_from - i_to else
43305: LD_ADDR_VAR 0 11
43309: PUSH
43310: LD_VAR 0 2
43314: PUSH
43315: LD_VAR 0 3
43319: MINUS
43320: ST_TO_ADDR
43321: GO 43345
// length := ( array - i_to ) + i_from ;
43323: LD_ADDR_VAR 0 11
43327: PUSH
43328: LD_VAR 0 1
43332: PUSH
43333: LD_VAR 0 3
43337: MINUS
43338: PUSH
43339: LD_VAR 0 2
43343: PLUS
43344: ST_TO_ADDR
// end ; if not length then
43345: LD_VAR 0 11
43349: NOT
43350: IFFALSE 43354
// exit ;
43352: GO 43512
// tmp := array ;
43354: LD_ADDR_VAR 0 10
43358: PUSH
43359: LD_VAR 0 1
43363: ST_TO_ADDR
// for i = 1 to length do
43364: LD_ADDR_VAR 0 6
43368: PUSH
43369: DOUBLE
43370: LD_INT 1
43372: DEC
43373: ST_TO_ADDR
43374: LD_VAR 0 11
43378: PUSH
43379: FOR_TO
43380: IFFALSE 43500
// begin for j = 1 to array do
43382: LD_ADDR_VAR 0 7
43386: PUSH
43387: DOUBLE
43388: LD_INT 1
43390: DEC
43391: ST_TO_ADDR
43392: LD_VAR 0 1
43396: PUSH
43397: FOR_TO
43398: IFFALSE 43486
// begin k := j + d ;
43400: LD_ADDR_VAR 0 8
43404: PUSH
43405: LD_VAR 0 7
43409: PUSH
43410: LD_VAR 0 9
43414: PLUS
43415: ST_TO_ADDR
// if k > array then
43416: LD_VAR 0 8
43420: PUSH
43421: LD_VAR 0 1
43425: GREATER
43426: IFFALSE 43436
// k := 1 ;
43428: LD_ADDR_VAR 0 8
43432: PUSH
43433: LD_INT 1
43435: ST_TO_ADDR
// if not k then
43436: LD_VAR 0 8
43440: NOT
43441: IFFALSE 43453
// k := array ;
43443: LD_ADDR_VAR 0 8
43447: PUSH
43448: LD_VAR 0 1
43452: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43453: LD_ADDR_VAR 0 10
43457: PUSH
43458: LD_VAR 0 10
43462: PPUSH
43463: LD_VAR 0 8
43467: PPUSH
43468: LD_VAR 0 1
43472: PUSH
43473: LD_VAR 0 7
43477: ARRAY
43478: PPUSH
43479: CALL_OW 1
43483: ST_TO_ADDR
// end ;
43484: GO 43397
43486: POP
43487: POP
// array := tmp ;
43488: LD_ADDR_VAR 0 1
43492: PUSH
43493: LD_VAR 0 10
43497: ST_TO_ADDR
// end ;
43498: GO 43379
43500: POP
43501: POP
// result := array ;
43502: LD_ADDR_VAR 0 5
43506: PUSH
43507: LD_VAR 0 1
43511: ST_TO_ADDR
// end ;
43512: LD_VAR 0 5
43516: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43517: LD_INT 0
43519: PPUSH
43520: PPUSH
// result := 0 ;
43521: LD_ADDR_VAR 0 3
43525: PUSH
43526: LD_INT 0
43528: ST_TO_ADDR
// if not array or not value in array then
43529: LD_VAR 0 1
43533: NOT
43534: PUSH
43535: LD_VAR 0 2
43539: PUSH
43540: LD_VAR 0 1
43544: IN
43545: NOT
43546: OR
43547: IFFALSE 43551
// exit ;
43549: GO 43605
// for i = 1 to array do
43551: LD_ADDR_VAR 0 4
43555: PUSH
43556: DOUBLE
43557: LD_INT 1
43559: DEC
43560: ST_TO_ADDR
43561: LD_VAR 0 1
43565: PUSH
43566: FOR_TO
43567: IFFALSE 43603
// if value = array [ i ] then
43569: LD_VAR 0 2
43573: PUSH
43574: LD_VAR 0 1
43578: PUSH
43579: LD_VAR 0 4
43583: ARRAY
43584: EQUAL
43585: IFFALSE 43601
// begin result := i ;
43587: LD_ADDR_VAR 0 3
43591: PUSH
43592: LD_VAR 0 4
43596: ST_TO_ADDR
// exit ;
43597: POP
43598: POP
43599: GO 43605
// end ;
43601: GO 43566
43603: POP
43604: POP
// end ;
43605: LD_VAR 0 3
43609: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43610: LD_INT 0
43612: PPUSH
// vc_chassis := chassis ;
43613: LD_ADDR_OWVAR 37
43617: PUSH
43618: LD_VAR 0 1
43622: ST_TO_ADDR
// vc_engine := engine ;
43623: LD_ADDR_OWVAR 39
43627: PUSH
43628: LD_VAR 0 2
43632: ST_TO_ADDR
// vc_control := control ;
43633: LD_ADDR_OWVAR 38
43637: PUSH
43638: LD_VAR 0 3
43642: ST_TO_ADDR
// vc_weapon := weapon ;
43643: LD_ADDR_OWVAR 40
43647: PUSH
43648: LD_VAR 0 4
43652: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43653: LD_ADDR_OWVAR 41
43657: PUSH
43658: LD_VAR 0 5
43662: ST_TO_ADDR
// end ;
43663: LD_VAR 0 6
43667: RET
// export function WantPlant ( unit ) ; var task ; begin
43668: LD_INT 0
43670: PPUSH
43671: PPUSH
// result := false ;
43672: LD_ADDR_VAR 0 2
43676: PUSH
43677: LD_INT 0
43679: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43680: LD_ADDR_VAR 0 3
43684: PUSH
43685: LD_VAR 0 1
43689: PPUSH
43690: CALL_OW 437
43694: ST_TO_ADDR
// if task then
43695: LD_VAR 0 3
43699: IFFALSE 43727
// if task [ 1 ] [ 1 ] = p then
43701: LD_VAR 0 3
43705: PUSH
43706: LD_INT 1
43708: ARRAY
43709: PUSH
43710: LD_INT 1
43712: ARRAY
43713: PUSH
43714: LD_STRING p
43716: EQUAL
43717: IFFALSE 43727
// result := true ;
43719: LD_ADDR_VAR 0 2
43723: PUSH
43724: LD_INT 1
43726: ST_TO_ADDR
// end ;
43727: LD_VAR 0 2
43731: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43732: LD_INT 0
43734: PPUSH
43735: PPUSH
43736: PPUSH
43737: PPUSH
// if pos < 1 then
43738: LD_VAR 0 2
43742: PUSH
43743: LD_INT 1
43745: LESS
43746: IFFALSE 43750
// exit ;
43748: GO 44053
// if pos = 1 then
43750: LD_VAR 0 2
43754: PUSH
43755: LD_INT 1
43757: EQUAL
43758: IFFALSE 43791
// result := Replace ( arr , pos [ 1 ] , value ) else
43760: LD_ADDR_VAR 0 4
43764: PUSH
43765: LD_VAR 0 1
43769: PPUSH
43770: LD_VAR 0 2
43774: PUSH
43775: LD_INT 1
43777: ARRAY
43778: PPUSH
43779: LD_VAR 0 3
43783: PPUSH
43784: CALL_OW 1
43788: ST_TO_ADDR
43789: GO 44053
// begin tmp := arr ;
43791: LD_ADDR_VAR 0 6
43795: PUSH
43796: LD_VAR 0 1
43800: ST_TO_ADDR
// s_arr := [ tmp ] ;
43801: LD_ADDR_VAR 0 7
43805: PUSH
43806: LD_VAR 0 6
43810: PUSH
43811: EMPTY
43812: LIST
43813: ST_TO_ADDR
// for i = 1 to pos - 1 do
43814: LD_ADDR_VAR 0 5
43818: PUSH
43819: DOUBLE
43820: LD_INT 1
43822: DEC
43823: ST_TO_ADDR
43824: LD_VAR 0 2
43828: PUSH
43829: LD_INT 1
43831: MINUS
43832: PUSH
43833: FOR_TO
43834: IFFALSE 43879
// begin tmp := tmp [ pos [ i ] ] ;
43836: LD_ADDR_VAR 0 6
43840: PUSH
43841: LD_VAR 0 6
43845: PUSH
43846: LD_VAR 0 2
43850: PUSH
43851: LD_VAR 0 5
43855: ARRAY
43856: ARRAY
43857: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43858: LD_ADDR_VAR 0 7
43862: PUSH
43863: LD_VAR 0 7
43867: PUSH
43868: LD_VAR 0 6
43872: PUSH
43873: EMPTY
43874: LIST
43875: ADD
43876: ST_TO_ADDR
// end ;
43877: GO 43833
43879: POP
43880: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43881: LD_ADDR_VAR 0 6
43885: PUSH
43886: LD_VAR 0 6
43890: PPUSH
43891: LD_VAR 0 2
43895: PUSH
43896: LD_VAR 0 2
43900: ARRAY
43901: PPUSH
43902: LD_VAR 0 3
43906: PPUSH
43907: CALL_OW 1
43911: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43912: LD_ADDR_VAR 0 7
43916: PUSH
43917: LD_VAR 0 7
43921: PPUSH
43922: LD_VAR 0 7
43926: PPUSH
43927: LD_VAR 0 6
43931: PPUSH
43932: CALL_OW 1
43936: ST_TO_ADDR
// for i = s_arr downto 2 do
43937: LD_ADDR_VAR 0 5
43941: PUSH
43942: DOUBLE
43943: LD_VAR 0 7
43947: INC
43948: ST_TO_ADDR
43949: LD_INT 2
43951: PUSH
43952: FOR_DOWNTO
43953: IFFALSE 44037
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43955: LD_ADDR_VAR 0 6
43959: PUSH
43960: LD_VAR 0 7
43964: PUSH
43965: LD_VAR 0 5
43969: PUSH
43970: LD_INT 1
43972: MINUS
43973: ARRAY
43974: PPUSH
43975: LD_VAR 0 2
43979: PUSH
43980: LD_VAR 0 5
43984: PUSH
43985: LD_INT 1
43987: MINUS
43988: ARRAY
43989: PPUSH
43990: LD_VAR 0 7
43994: PUSH
43995: LD_VAR 0 5
43999: ARRAY
44000: PPUSH
44001: CALL_OW 1
44005: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44006: LD_ADDR_VAR 0 7
44010: PUSH
44011: LD_VAR 0 7
44015: PPUSH
44016: LD_VAR 0 5
44020: PUSH
44021: LD_INT 1
44023: MINUS
44024: PPUSH
44025: LD_VAR 0 6
44029: PPUSH
44030: CALL_OW 1
44034: ST_TO_ADDR
// end ;
44035: GO 43952
44037: POP
44038: POP
// result := s_arr [ 1 ] ;
44039: LD_ADDR_VAR 0 4
44043: PUSH
44044: LD_VAR 0 7
44048: PUSH
44049: LD_INT 1
44051: ARRAY
44052: ST_TO_ADDR
// end ; end ;
44053: LD_VAR 0 4
44057: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44058: LD_INT 0
44060: PPUSH
44061: PPUSH
// if not list then
44062: LD_VAR 0 1
44066: NOT
44067: IFFALSE 44071
// exit ;
44069: GO 44162
// i := list [ pos1 ] ;
44071: LD_ADDR_VAR 0 5
44075: PUSH
44076: LD_VAR 0 1
44080: PUSH
44081: LD_VAR 0 2
44085: ARRAY
44086: ST_TO_ADDR
// if not i then
44087: LD_VAR 0 5
44091: NOT
44092: IFFALSE 44096
// exit ;
44094: GO 44162
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44096: LD_ADDR_VAR 0 1
44100: PUSH
44101: LD_VAR 0 1
44105: PPUSH
44106: LD_VAR 0 2
44110: PPUSH
44111: LD_VAR 0 1
44115: PUSH
44116: LD_VAR 0 3
44120: ARRAY
44121: PPUSH
44122: CALL_OW 1
44126: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44127: LD_ADDR_VAR 0 1
44131: PUSH
44132: LD_VAR 0 1
44136: PPUSH
44137: LD_VAR 0 3
44141: PPUSH
44142: LD_VAR 0 5
44146: PPUSH
44147: CALL_OW 1
44151: ST_TO_ADDR
// result := list ;
44152: LD_ADDR_VAR 0 4
44156: PUSH
44157: LD_VAR 0 1
44161: ST_TO_ADDR
// end ;
44162: LD_VAR 0 4
44166: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44167: LD_INT 0
44169: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44170: LD_ADDR_VAR 0 5
44174: PUSH
44175: LD_VAR 0 1
44179: PPUSH
44180: CALL_OW 250
44184: PPUSH
44185: LD_VAR 0 1
44189: PPUSH
44190: CALL_OW 251
44194: PPUSH
44195: LD_VAR 0 2
44199: PPUSH
44200: LD_VAR 0 3
44204: PPUSH
44205: LD_VAR 0 4
44209: PPUSH
44210: CALL 44220 0 5
44214: ST_TO_ADDR
// end ;
44215: LD_VAR 0 5
44219: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44220: LD_INT 0
44222: PPUSH
44223: PPUSH
44224: PPUSH
44225: PPUSH
// if not list then
44226: LD_VAR 0 3
44230: NOT
44231: IFFALSE 44235
// exit ;
44233: GO 44623
// result := [ ] ;
44235: LD_ADDR_VAR 0 6
44239: PUSH
44240: EMPTY
44241: ST_TO_ADDR
// for i in list do
44242: LD_ADDR_VAR 0 7
44246: PUSH
44247: LD_VAR 0 3
44251: PUSH
44252: FOR_IN
44253: IFFALSE 44455
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44255: LD_ADDR_VAR 0 9
44259: PUSH
44260: LD_VAR 0 7
44264: PPUSH
44265: LD_VAR 0 1
44269: PPUSH
44270: LD_VAR 0 2
44274: PPUSH
44275: CALL_OW 297
44279: ST_TO_ADDR
// if not result then
44280: LD_VAR 0 6
44284: NOT
44285: IFFALSE 44311
// result := [ [ i , tmp ] ] else
44287: LD_ADDR_VAR 0 6
44291: PUSH
44292: LD_VAR 0 7
44296: PUSH
44297: LD_VAR 0 9
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: EMPTY
44307: LIST
44308: ST_TO_ADDR
44309: GO 44453
// begin if result [ result ] [ 2 ] < tmp then
44311: LD_VAR 0 6
44315: PUSH
44316: LD_VAR 0 6
44320: ARRAY
44321: PUSH
44322: LD_INT 2
44324: ARRAY
44325: PUSH
44326: LD_VAR 0 9
44330: LESS
44331: IFFALSE 44373
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44333: LD_ADDR_VAR 0 6
44337: PUSH
44338: LD_VAR 0 6
44342: PPUSH
44343: LD_VAR 0 6
44347: PUSH
44348: LD_INT 1
44350: PLUS
44351: PPUSH
44352: LD_VAR 0 7
44356: PUSH
44357: LD_VAR 0 9
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PPUSH
44366: CALL_OW 2
44370: ST_TO_ADDR
44371: GO 44453
// for j = 1 to result do
44373: LD_ADDR_VAR 0 8
44377: PUSH
44378: DOUBLE
44379: LD_INT 1
44381: DEC
44382: ST_TO_ADDR
44383: LD_VAR 0 6
44387: PUSH
44388: FOR_TO
44389: IFFALSE 44451
// begin if tmp < result [ j ] [ 2 ] then
44391: LD_VAR 0 9
44395: PUSH
44396: LD_VAR 0 6
44400: PUSH
44401: LD_VAR 0 8
44405: ARRAY
44406: PUSH
44407: LD_INT 2
44409: ARRAY
44410: LESS
44411: IFFALSE 44449
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44413: LD_ADDR_VAR 0 6
44417: PUSH
44418: LD_VAR 0 6
44422: PPUSH
44423: LD_VAR 0 8
44427: PPUSH
44428: LD_VAR 0 7
44432: PUSH
44433: LD_VAR 0 9
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PPUSH
44442: CALL_OW 2
44446: ST_TO_ADDR
// break ;
44447: GO 44451
// end ; end ;
44449: GO 44388
44451: POP
44452: POP
// end ; end ;
44453: GO 44252
44455: POP
44456: POP
// if result and not asc then
44457: LD_VAR 0 6
44461: PUSH
44462: LD_VAR 0 4
44466: NOT
44467: AND
44468: IFFALSE 44543
// begin tmp := result ;
44470: LD_ADDR_VAR 0 9
44474: PUSH
44475: LD_VAR 0 6
44479: ST_TO_ADDR
// for i = tmp downto 1 do
44480: LD_ADDR_VAR 0 7
44484: PUSH
44485: DOUBLE
44486: LD_VAR 0 9
44490: INC
44491: ST_TO_ADDR
44492: LD_INT 1
44494: PUSH
44495: FOR_DOWNTO
44496: IFFALSE 44541
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44498: LD_ADDR_VAR 0 6
44502: PUSH
44503: LD_VAR 0 6
44507: PPUSH
44508: LD_VAR 0 9
44512: PUSH
44513: LD_VAR 0 7
44517: MINUS
44518: PUSH
44519: LD_INT 1
44521: PLUS
44522: PPUSH
44523: LD_VAR 0 9
44527: PUSH
44528: LD_VAR 0 7
44532: ARRAY
44533: PPUSH
44534: CALL_OW 1
44538: ST_TO_ADDR
44539: GO 44495
44541: POP
44542: POP
// end ; tmp := [ ] ;
44543: LD_ADDR_VAR 0 9
44547: PUSH
44548: EMPTY
44549: ST_TO_ADDR
// if mode then
44550: LD_VAR 0 5
44554: IFFALSE 44623
// begin for i = 1 to result do
44556: LD_ADDR_VAR 0 7
44560: PUSH
44561: DOUBLE
44562: LD_INT 1
44564: DEC
44565: ST_TO_ADDR
44566: LD_VAR 0 6
44570: PUSH
44571: FOR_TO
44572: IFFALSE 44611
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44574: LD_ADDR_VAR 0 9
44578: PUSH
44579: LD_VAR 0 9
44583: PPUSH
44584: LD_VAR 0 7
44588: PPUSH
44589: LD_VAR 0 6
44593: PUSH
44594: LD_VAR 0 7
44598: ARRAY
44599: PUSH
44600: LD_INT 1
44602: ARRAY
44603: PPUSH
44604: CALL_OW 1
44608: ST_TO_ADDR
44609: GO 44571
44611: POP
44612: POP
// result := tmp ;
44613: LD_ADDR_VAR 0 6
44617: PUSH
44618: LD_VAR 0 9
44622: ST_TO_ADDR
// end ; end ;
44623: LD_VAR 0 6
44627: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44628: LD_INT 0
44630: PPUSH
44631: PPUSH
44632: PPUSH
44633: PPUSH
44634: PPUSH
44635: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44636: LD_ADDR_VAR 0 5
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: EMPTY
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: ST_TO_ADDR
// if not x or not y then
44658: LD_VAR 0 2
44662: NOT
44663: PUSH
44664: LD_VAR 0 3
44668: NOT
44669: OR
44670: IFFALSE 44674
// exit ;
44672: GO 46324
// if not range then
44674: LD_VAR 0 4
44678: NOT
44679: IFFALSE 44689
// range := 10 ;
44681: LD_ADDR_VAR 0 4
44685: PUSH
44686: LD_INT 10
44688: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44689: LD_ADDR_VAR 0 8
44693: PUSH
44694: LD_INT 81
44696: PUSH
44697: LD_VAR 0 1
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 92
44708: PUSH
44709: LD_VAR 0 2
44713: PUSH
44714: LD_VAR 0 3
44718: PUSH
44719: LD_VAR 0 4
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 3
44732: PUSH
44733: LD_INT 21
44735: PUSH
44736: LD_INT 3
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: LIST
44751: PPUSH
44752: CALL_OW 69
44756: ST_TO_ADDR
// if not tmp then
44757: LD_VAR 0 8
44761: NOT
44762: IFFALSE 44766
// exit ;
44764: GO 46324
// for i in tmp do
44766: LD_ADDR_VAR 0 6
44770: PUSH
44771: LD_VAR 0 8
44775: PUSH
44776: FOR_IN
44777: IFFALSE 46299
// begin points := [ 0 , 0 , 0 ] ;
44779: LD_ADDR_VAR 0 9
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: LD_INT 0
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: LIST
44797: ST_TO_ADDR
// bpoints := 1 ;
44798: LD_ADDR_VAR 0 10
44802: PUSH
44803: LD_INT 1
44805: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44806: LD_VAR 0 6
44810: PPUSH
44811: CALL_OW 247
44815: PUSH
44816: LD_INT 1
44818: DOUBLE
44819: EQUAL
44820: IFTRUE 44824
44822: GO 45402
44824: POP
// begin if GetClass ( i ) = 1 then
44825: LD_VAR 0 6
44829: PPUSH
44830: CALL_OW 257
44834: PUSH
44835: LD_INT 1
44837: EQUAL
44838: IFFALSE 44859
// points := [ 10 , 5 , 3 ] ;
44840: LD_ADDR_VAR 0 9
44844: PUSH
44845: LD_INT 10
44847: PUSH
44848: LD_INT 5
44850: PUSH
44851: LD_INT 3
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: LIST
44858: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44859: LD_VAR 0 6
44863: PPUSH
44864: CALL_OW 257
44868: PUSH
44869: LD_INT 2
44871: PUSH
44872: LD_INT 3
44874: PUSH
44875: LD_INT 4
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: LIST
44882: IN
44883: IFFALSE 44904
// points := [ 3 , 2 , 1 ] ;
44885: LD_ADDR_VAR 0 9
44889: PUSH
44890: LD_INT 3
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: LIST
44903: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44904: LD_VAR 0 6
44908: PPUSH
44909: CALL_OW 257
44913: PUSH
44914: LD_INT 5
44916: EQUAL
44917: IFFALSE 44938
// points := [ 130 , 5 , 2 ] ;
44919: LD_ADDR_VAR 0 9
44923: PUSH
44924: LD_INT 130
44926: PUSH
44927: LD_INT 5
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: LIST
44937: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44938: LD_VAR 0 6
44942: PPUSH
44943: CALL_OW 257
44947: PUSH
44948: LD_INT 8
44950: EQUAL
44951: IFFALSE 44972
// points := [ 35 , 35 , 30 ] ;
44953: LD_ADDR_VAR 0 9
44957: PUSH
44958: LD_INT 35
44960: PUSH
44961: LD_INT 35
44963: PUSH
44964: LD_INT 30
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: LIST
44971: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44972: LD_VAR 0 6
44976: PPUSH
44977: CALL_OW 257
44981: PUSH
44982: LD_INT 9
44984: EQUAL
44985: IFFALSE 45006
// points := [ 20 , 55 , 40 ] ;
44987: LD_ADDR_VAR 0 9
44991: PUSH
44992: LD_INT 20
44994: PUSH
44995: LD_INT 55
44997: PUSH
44998: LD_INT 40
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: LIST
45005: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45006: LD_VAR 0 6
45010: PPUSH
45011: CALL_OW 257
45015: PUSH
45016: LD_INT 12
45018: PUSH
45019: LD_INT 16
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: IN
45026: IFFALSE 45047
// points := [ 5 , 3 , 2 ] ;
45028: LD_ADDR_VAR 0 9
45032: PUSH
45033: LD_INT 5
45035: PUSH
45036: LD_INT 3
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: LIST
45046: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45047: LD_VAR 0 6
45051: PPUSH
45052: CALL_OW 257
45056: PUSH
45057: LD_INT 17
45059: EQUAL
45060: IFFALSE 45081
// points := [ 100 , 50 , 75 ] ;
45062: LD_ADDR_VAR 0 9
45066: PUSH
45067: LD_INT 100
45069: PUSH
45070: LD_INT 50
45072: PUSH
45073: LD_INT 75
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: LIST
45080: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45081: LD_VAR 0 6
45085: PPUSH
45086: CALL_OW 257
45090: PUSH
45091: LD_INT 15
45093: EQUAL
45094: IFFALSE 45115
// points := [ 10 , 5 , 3 ] ;
45096: LD_ADDR_VAR 0 9
45100: PUSH
45101: LD_INT 10
45103: PUSH
45104: LD_INT 5
45106: PUSH
45107: LD_INT 3
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: LIST
45114: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45115: LD_VAR 0 6
45119: PPUSH
45120: CALL_OW 257
45124: PUSH
45125: LD_INT 14
45127: EQUAL
45128: IFFALSE 45149
// points := [ 10 , 0 , 0 ] ;
45130: LD_ADDR_VAR 0 9
45134: PUSH
45135: LD_INT 10
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: LIST
45148: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45149: LD_VAR 0 6
45153: PPUSH
45154: CALL_OW 257
45158: PUSH
45159: LD_INT 11
45161: EQUAL
45162: IFFALSE 45183
// points := [ 30 , 10 , 5 ] ;
45164: LD_ADDR_VAR 0 9
45168: PUSH
45169: LD_INT 30
45171: PUSH
45172: LD_INT 10
45174: PUSH
45175: LD_INT 5
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: LIST
45182: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45183: LD_VAR 0 1
45187: PPUSH
45188: LD_INT 5
45190: PPUSH
45191: CALL_OW 321
45195: PUSH
45196: LD_INT 2
45198: EQUAL
45199: IFFALSE 45216
// bpoints := bpoints * 1.8 ;
45201: LD_ADDR_VAR 0 10
45205: PUSH
45206: LD_VAR 0 10
45210: PUSH
45211: LD_REAL  1.80000000000000E+0000
45214: MUL
45215: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45216: LD_VAR 0 6
45220: PPUSH
45221: CALL_OW 257
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: LD_INT 3
45234: PUSH
45235: LD_INT 4
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: IN
45244: PUSH
45245: LD_VAR 0 1
45249: PPUSH
45250: LD_INT 51
45252: PPUSH
45253: CALL_OW 321
45257: PUSH
45258: LD_INT 2
45260: EQUAL
45261: AND
45262: IFFALSE 45279
// bpoints := bpoints * 1.2 ;
45264: LD_ADDR_VAR 0 10
45268: PUSH
45269: LD_VAR 0 10
45273: PUSH
45274: LD_REAL  1.20000000000000E+0000
45277: MUL
45278: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45279: LD_VAR 0 6
45283: PPUSH
45284: CALL_OW 257
45288: PUSH
45289: LD_INT 5
45291: PUSH
45292: LD_INT 7
45294: PUSH
45295: LD_INT 9
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: LIST
45302: IN
45303: PUSH
45304: LD_VAR 0 1
45308: PPUSH
45309: LD_INT 52
45311: PPUSH
45312: CALL_OW 321
45316: PUSH
45317: LD_INT 2
45319: EQUAL
45320: AND
45321: IFFALSE 45338
// bpoints := bpoints * 1.5 ;
45323: LD_ADDR_VAR 0 10
45327: PUSH
45328: LD_VAR 0 10
45332: PUSH
45333: LD_REAL  1.50000000000000E+0000
45336: MUL
45337: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45338: LD_VAR 0 1
45342: PPUSH
45343: LD_INT 66
45345: PPUSH
45346: CALL_OW 321
45350: PUSH
45351: LD_INT 2
45353: EQUAL
45354: IFFALSE 45371
// bpoints := bpoints * 1.1 ;
45356: LD_ADDR_VAR 0 10
45360: PUSH
45361: LD_VAR 0 10
45365: PUSH
45366: LD_REAL  1.10000000000000E+0000
45369: MUL
45370: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45371: LD_ADDR_VAR 0 10
45375: PUSH
45376: LD_VAR 0 10
45380: PUSH
45381: LD_VAR 0 6
45385: PPUSH
45386: LD_INT 1
45388: PPUSH
45389: CALL_OW 259
45393: PUSH
45394: LD_REAL  1.15000000000000E+0000
45397: MUL
45398: MUL
45399: ST_TO_ADDR
// end ; unit_vehicle :
45400: GO 46228
45402: LD_INT 2
45404: DOUBLE
45405: EQUAL
45406: IFTRUE 45410
45408: GO 46216
45410: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45411: LD_VAR 0 6
45415: PPUSH
45416: CALL_OW 264
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: LD_INT 42
45426: PUSH
45427: LD_INT 24
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: LIST
45434: IN
45435: IFFALSE 45456
// points := [ 25 , 5 , 3 ] ;
45437: LD_ADDR_VAR 0 9
45441: PUSH
45442: LD_INT 25
45444: PUSH
45445: LD_INT 5
45447: PUSH
45448: LD_INT 3
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: LIST
45455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45456: LD_VAR 0 6
45460: PPUSH
45461: CALL_OW 264
45465: PUSH
45466: LD_INT 4
45468: PUSH
45469: LD_INT 43
45471: PUSH
45472: LD_INT 25
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: LIST
45479: IN
45480: IFFALSE 45501
// points := [ 40 , 15 , 5 ] ;
45482: LD_ADDR_VAR 0 9
45486: PUSH
45487: LD_INT 40
45489: PUSH
45490: LD_INT 15
45492: PUSH
45493: LD_INT 5
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: LIST
45500: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45501: LD_VAR 0 6
45505: PPUSH
45506: CALL_OW 264
45510: PUSH
45511: LD_INT 3
45513: PUSH
45514: LD_INT 23
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: IN
45521: IFFALSE 45542
// points := [ 7 , 25 , 8 ] ;
45523: LD_ADDR_VAR 0 9
45527: PUSH
45528: LD_INT 7
45530: PUSH
45531: LD_INT 25
45533: PUSH
45534: LD_INT 8
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: LIST
45541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45542: LD_VAR 0 6
45546: PPUSH
45547: CALL_OW 264
45551: PUSH
45552: LD_INT 5
45554: PUSH
45555: LD_INT 27
45557: PUSH
45558: LD_INT 44
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: LIST
45565: IN
45566: IFFALSE 45587
// points := [ 14 , 50 , 16 ] ;
45568: LD_ADDR_VAR 0 9
45572: PUSH
45573: LD_INT 14
45575: PUSH
45576: LD_INT 50
45578: PUSH
45579: LD_INT 16
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: LIST
45586: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45587: LD_VAR 0 6
45591: PPUSH
45592: CALL_OW 264
45596: PUSH
45597: LD_INT 6
45599: PUSH
45600: LD_INT 46
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: IN
45607: IFFALSE 45628
// points := [ 32 , 120 , 70 ] ;
45609: LD_ADDR_VAR 0 9
45613: PUSH
45614: LD_INT 32
45616: PUSH
45617: LD_INT 120
45619: PUSH
45620: LD_INT 70
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: LIST
45627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45628: LD_VAR 0 6
45632: PPUSH
45633: CALL_OW 264
45637: PUSH
45638: LD_INT 7
45640: PUSH
45641: LD_INT 28
45643: PUSH
45644: LD_INT 45
45646: PUSH
45647: LD_INT 92
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: IN
45656: IFFALSE 45677
// points := [ 35 , 20 , 45 ] ;
45658: LD_ADDR_VAR 0 9
45662: PUSH
45663: LD_INT 35
45665: PUSH
45666: LD_INT 20
45668: PUSH
45669: LD_INT 45
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: LIST
45676: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45677: LD_VAR 0 6
45681: PPUSH
45682: CALL_OW 264
45686: PUSH
45687: LD_INT 47
45689: PUSH
45690: EMPTY
45691: LIST
45692: IN
45693: IFFALSE 45714
// points := [ 67 , 45 , 75 ] ;
45695: LD_ADDR_VAR 0 9
45699: PUSH
45700: LD_INT 67
45702: PUSH
45703: LD_INT 45
45705: PUSH
45706: LD_INT 75
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: LIST
45713: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45714: LD_VAR 0 6
45718: PPUSH
45719: CALL_OW 264
45723: PUSH
45724: LD_INT 26
45726: PUSH
45727: EMPTY
45728: LIST
45729: IN
45730: IFFALSE 45751
// points := [ 120 , 30 , 80 ] ;
45732: LD_ADDR_VAR 0 9
45736: PUSH
45737: LD_INT 120
45739: PUSH
45740: LD_INT 30
45742: PUSH
45743: LD_INT 80
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45751: LD_VAR 0 6
45755: PPUSH
45756: CALL_OW 264
45760: PUSH
45761: LD_INT 22
45763: PUSH
45764: EMPTY
45765: LIST
45766: IN
45767: IFFALSE 45788
// points := [ 40 , 1 , 1 ] ;
45769: LD_ADDR_VAR 0 9
45773: PUSH
45774: LD_INT 40
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: LIST
45787: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45788: LD_VAR 0 6
45792: PPUSH
45793: CALL_OW 264
45797: PUSH
45798: LD_INT 29
45800: PUSH
45801: EMPTY
45802: LIST
45803: IN
45804: IFFALSE 45825
// points := [ 70 , 200 , 400 ] ;
45806: LD_ADDR_VAR 0 9
45810: PUSH
45811: LD_INT 70
45813: PUSH
45814: LD_INT 200
45816: PUSH
45817: LD_INT 400
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: LIST
45824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45825: LD_VAR 0 6
45829: PPUSH
45830: CALL_OW 264
45834: PUSH
45835: LD_INT 14
45837: PUSH
45838: LD_INT 53
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: IN
45845: IFFALSE 45866
// points := [ 40 , 10 , 20 ] ;
45847: LD_ADDR_VAR 0 9
45851: PUSH
45852: LD_INT 40
45854: PUSH
45855: LD_INT 10
45857: PUSH
45858: LD_INT 20
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: LIST
45865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45866: LD_VAR 0 6
45870: PPUSH
45871: CALL_OW 264
45875: PUSH
45876: LD_INT 9
45878: PUSH
45879: EMPTY
45880: LIST
45881: IN
45882: IFFALSE 45903
// points := [ 5 , 70 , 20 ] ;
45884: LD_ADDR_VAR 0 9
45888: PUSH
45889: LD_INT 5
45891: PUSH
45892: LD_INT 70
45894: PUSH
45895: LD_INT 20
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: LIST
45902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45903: LD_VAR 0 6
45907: PPUSH
45908: CALL_OW 264
45912: PUSH
45913: LD_INT 10
45915: PUSH
45916: EMPTY
45917: LIST
45918: IN
45919: IFFALSE 45940
// points := [ 35 , 110 , 70 ] ;
45921: LD_ADDR_VAR 0 9
45925: PUSH
45926: LD_INT 35
45928: PUSH
45929: LD_INT 110
45931: PUSH
45932: LD_INT 70
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: LIST
45939: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45940: LD_VAR 0 6
45944: PPUSH
45945: CALL_OW 265
45949: PUSH
45950: LD_INT 25
45952: EQUAL
45953: IFFALSE 45974
// points := [ 80 , 65 , 100 ] ;
45955: LD_ADDR_VAR 0 9
45959: PUSH
45960: LD_INT 80
45962: PUSH
45963: LD_INT 65
45965: PUSH
45966: LD_INT 100
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: LIST
45973: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45974: LD_VAR 0 6
45978: PPUSH
45979: CALL_OW 263
45983: PUSH
45984: LD_INT 1
45986: EQUAL
45987: IFFALSE 46022
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45989: LD_ADDR_VAR 0 10
45993: PUSH
45994: LD_VAR 0 10
45998: PUSH
45999: LD_VAR 0 6
46003: PPUSH
46004: CALL_OW 311
46008: PPUSH
46009: LD_INT 3
46011: PPUSH
46012: CALL_OW 259
46016: PUSH
46017: LD_INT 4
46019: MUL
46020: MUL
46021: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46022: LD_VAR 0 6
46026: PPUSH
46027: CALL_OW 263
46031: PUSH
46032: LD_INT 2
46034: EQUAL
46035: IFFALSE 46086
// begin j := IsControledBy ( i ) ;
46037: LD_ADDR_VAR 0 7
46041: PUSH
46042: LD_VAR 0 6
46046: PPUSH
46047: CALL_OW 312
46051: ST_TO_ADDR
// if j then
46052: LD_VAR 0 7
46056: IFFALSE 46086
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46058: LD_ADDR_VAR 0 10
46062: PUSH
46063: LD_VAR 0 10
46067: PUSH
46068: LD_VAR 0 7
46072: PPUSH
46073: LD_INT 3
46075: PPUSH
46076: CALL_OW 259
46080: PUSH
46081: LD_INT 3
46083: MUL
46084: MUL
46085: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46086: LD_VAR 0 6
46090: PPUSH
46091: CALL_OW 264
46095: PUSH
46096: LD_INT 5
46098: PUSH
46099: LD_INT 6
46101: PUSH
46102: LD_INT 46
46104: PUSH
46105: LD_INT 44
46107: PUSH
46108: LD_INT 47
46110: PUSH
46111: LD_INT 45
46113: PUSH
46114: LD_INT 28
46116: PUSH
46117: LD_INT 7
46119: PUSH
46120: LD_INT 27
46122: PUSH
46123: LD_INT 29
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: IN
46138: PUSH
46139: LD_VAR 0 1
46143: PPUSH
46144: LD_INT 52
46146: PPUSH
46147: CALL_OW 321
46151: PUSH
46152: LD_INT 2
46154: EQUAL
46155: AND
46156: IFFALSE 46173
// bpoints := bpoints * 1.2 ;
46158: LD_ADDR_VAR 0 10
46162: PUSH
46163: LD_VAR 0 10
46167: PUSH
46168: LD_REAL  1.20000000000000E+0000
46171: MUL
46172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46173: LD_VAR 0 6
46177: PPUSH
46178: CALL_OW 264
46182: PUSH
46183: LD_INT 6
46185: PUSH
46186: LD_INT 46
46188: PUSH
46189: LD_INT 47
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: LIST
46196: IN
46197: IFFALSE 46214
// bpoints := bpoints * 1.2 ;
46199: LD_ADDR_VAR 0 10
46203: PUSH
46204: LD_VAR 0 10
46208: PUSH
46209: LD_REAL  1.20000000000000E+0000
46212: MUL
46213: ST_TO_ADDR
// end ; unit_building :
46214: GO 46228
46216: LD_INT 3
46218: DOUBLE
46219: EQUAL
46220: IFTRUE 46224
46222: GO 46227
46224: POP
// ; end ;
46225: GO 46228
46227: POP
// for j = 1 to 3 do
46228: LD_ADDR_VAR 0 7
46232: PUSH
46233: DOUBLE
46234: LD_INT 1
46236: DEC
46237: ST_TO_ADDR
46238: LD_INT 3
46240: PUSH
46241: FOR_TO
46242: IFFALSE 46295
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46244: LD_ADDR_VAR 0 5
46248: PUSH
46249: LD_VAR 0 5
46253: PPUSH
46254: LD_VAR 0 7
46258: PPUSH
46259: LD_VAR 0 5
46263: PUSH
46264: LD_VAR 0 7
46268: ARRAY
46269: PUSH
46270: LD_VAR 0 9
46274: PUSH
46275: LD_VAR 0 7
46279: ARRAY
46280: PUSH
46281: LD_VAR 0 10
46285: MUL
46286: PLUS
46287: PPUSH
46288: CALL_OW 1
46292: ST_TO_ADDR
46293: GO 46241
46295: POP
46296: POP
// end ;
46297: GO 44776
46299: POP
46300: POP
// result := Replace ( result , 4 , tmp ) ;
46301: LD_ADDR_VAR 0 5
46305: PUSH
46306: LD_VAR 0 5
46310: PPUSH
46311: LD_INT 4
46313: PPUSH
46314: LD_VAR 0 8
46318: PPUSH
46319: CALL_OW 1
46323: ST_TO_ADDR
// end ;
46324: LD_VAR 0 5
46328: RET
// export function DangerAtRange ( unit , range ) ; begin
46329: LD_INT 0
46331: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46332: LD_ADDR_VAR 0 3
46336: PUSH
46337: LD_VAR 0 1
46341: PPUSH
46342: CALL_OW 255
46346: PPUSH
46347: LD_VAR 0 1
46351: PPUSH
46352: CALL_OW 250
46356: PPUSH
46357: LD_VAR 0 1
46361: PPUSH
46362: CALL_OW 251
46366: PPUSH
46367: LD_VAR 0 2
46371: PPUSH
46372: CALL 44628 0 4
46376: ST_TO_ADDR
// end ;
46377: LD_VAR 0 3
46381: RET
// export function DangerInArea ( side , area ) ; begin
46382: LD_INT 0
46384: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46385: LD_ADDR_VAR 0 3
46389: PUSH
46390: LD_VAR 0 2
46394: PPUSH
46395: LD_INT 81
46397: PUSH
46398: LD_VAR 0 1
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PPUSH
46407: CALL_OW 70
46411: ST_TO_ADDR
// end ;
46412: LD_VAR 0 3
46416: RET
// export function IsExtension ( b ) ; begin
46417: LD_INT 0
46419: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46420: LD_ADDR_VAR 0 2
46424: PUSH
46425: LD_VAR 0 1
46429: PUSH
46430: LD_INT 23
46432: PUSH
46433: LD_INT 20
46435: PUSH
46436: LD_INT 22
46438: PUSH
46439: LD_INT 17
46441: PUSH
46442: LD_INT 24
46444: PUSH
46445: LD_INT 21
46447: PUSH
46448: LD_INT 19
46450: PUSH
46451: LD_INT 16
46453: PUSH
46454: LD_INT 25
46456: PUSH
46457: LD_INT 18
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: IN
46472: ST_TO_ADDR
// end ;
46473: LD_VAR 0 2
46477: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46478: LD_INT 0
46480: PPUSH
46481: PPUSH
46482: PPUSH
// result := [ ] ;
46483: LD_ADDR_VAR 0 4
46487: PUSH
46488: EMPTY
46489: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46490: LD_ADDR_VAR 0 5
46494: PUSH
46495: LD_VAR 0 2
46499: PPUSH
46500: LD_INT 21
46502: PUSH
46503: LD_INT 3
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PPUSH
46510: CALL_OW 70
46514: ST_TO_ADDR
// if not tmp then
46515: LD_VAR 0 5
46519: NOT
46520: IFFALSE 46524
// exit ;
46522: GO 46588
// if checkLink then
46524: LD_VAR 0 3
46528: IFFALSE 46578
// begin for i in tmp do
46530: LD_ADDR_VAR 0 6
46534: PUSH
46535: LD_VAR 0 5
46539: PUSH
46540: FOR_IN
46541: IFFALSE 46576
// if GetBase ( i ) <> base then
46543: LD_VAR 0 6
46547: PPUSH
46548: CALL_OW 274
46552: PUSH
46553: LD_VAR 0 1
46557: NONEQUAL
46558: IFFALSE 46574
// ComLinkToBase ( base , i ) ;
46560: LD_VAR 0 1
46564: PPUSH
46565: LD_VAR 0 6
46569: PPUSH
46570: CALL_OW 169
46574: GO 46540
46576: POP
46577: POP
// end ; result := tmp ;
46578: LD_ADDR_VAR 0 4
46582: PUSH
46583: LD_VAR 0 5
46587: ST_TO_ADDR
// end ;
46588: LD_VAR 0 4
46592: RET
// export function ComComplete ( units , b ) ; var i ; begin
46593: LD_INT 0
46595: PPUSH
46596: PPUSH
// if not units then
46597: LD_VAR 0 1
46601: NOT
46602: IFFALSE 46606
// exit ;
46604: GO 46696
// for i in units do
46606: LD_ADDR_VAR 0 4
46610: PUSH
46611: LD_VAR 0 1
46615: PUSH
46616: FOR_IN
46617: IFFALSE 46694
// if BuildingStatus ( b ) = bs_build then
46619: LD_VAR 0 2
46623: PPUSH
46624: CALL_OW 461
46628: PUSH
46629: LD_INT 1
46631: EQUAL
46632: IFFALSE 46692
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46634: LD_VAR 0 4
46638: PPUSH
46639: LD_STRING h
46641: PUSH
46642: LD_VAR 0 2
46646: PPUSH
46647: CALL_OW 250
46651: PUSH
46652: LD_VAR 0 2
46656: PPUSH
46657: CALL_OW 251
46661: PUSH
46662: LD_VAR 0 2
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: PUSH
46685: EMPTY
46686: LIST
46687: PPUSH
46688: CALL_OW 446
46692: GO 46616
46694: POP
46695: POP
// end ;
46696: LD_VAR 0 3
46700: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46701: LD_INT 0
46703: PPUSH
46704: PPUSH
46705: PPUSH
46706: PPUSH
46707: PPUSH
46708: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46709: LD_VAR 0 1
46713: NOT
46714: PUSH
46715: LD_VAR 0 1
46719: PPUSH
46720: CALL_OW 263
46724: PUSH
46725: LD_INT 2
46727: NONEQUAL
46728: OR
46729: IFFALSE 46733
// exit ;
46731: GO 47049
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46733: LD_ADDR_VAR 0 6
46737: PUSH
46738: LD_INT 22
46740: PUSH
46741: LD_VAR 0 1
46745: PPUSH
46746: CALL_OW 255
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: LD_INT 30
46760: PUSH
46761: LD_INT 36
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 34
46770: PUSH
46771: LD_INT 31
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: LIST
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PPUSH
46787: CALL_OW 69
46791: ST_TO_ADDR
// if not tmp then
46792: LD_VAR 0 6
46796: NOT
46797: IFFALSE 46801
// exit ;
46799: GO 47049
// result := [ ] ;
46801: LD_ADDR_VAR 0 2
46805: PUSH
46806: EMPTY
46807: ST_TO_ADDR
// for i in tmp do
46808: LD_ADDR_VAR 0 3
46812: PUSH
46813: LD_VAR 0 6
46817: PUSH
46818: FOR_IN
46819: IFFALSE 46890
// begin t := UnitsInside ( i ) ;
46821: LD_ADDR_VAR 0 4
46825: PUSH
46826: LD_VAR 0 3
46830: PPUSH
46831: CALL_OW 313
46835: ST_TO_ADDR
// if t then
46836: LD_VAR 0 4
46840: IFFALSE 46888
// for j in t do
46842: LD_ADDR_VAR 0 7
46846: PUSH
46847: LD_VAR 0 4
46851: PUSH
46852: FOR_IN
46853: IFFALSE 46886
// result := Replace ( result , result + 1 , j ) ;
46855: LD_ADDR_VAR 0 2
46859: PUSH
46860: LD_VAR 0 2
46864: PPUSH
46865: LD_VAR 0 2
46869: PUSH
46870: LD_INT 1
46872: PLUS
46873: PPUSH
46874: LD_VAR 0 7
46878: PPUSH
46879: CALL_OW 1
46883: ST_TO_ADDR
46884: GO 46852
46886: POP
46887: POP
// end ;
46888: GO 46818
46890: POP
46891: POP
// if not result then
46892: LD_VAR 0 2
46896: NOT
46897: IFFALSE 46901
// exit ;
46899: GO 47049
// mech := result [ 1 ] ;
46901: LD_ADDR_VAR 0 5
46905: PUSH
46906: LD_VAR 0 2
46910: PUSH
46911: LD_INT 1
46913: ARRAY
46914: ST_TO_ADDR
// if result > 1 then
46915: LD_VAR 0 2
46919: PUSH
46920: LD_INT 1
46922: GREATER
46923: IFFALSE 47035
// begin for i = 2 to result do
46925: LD_ADDR_VAR 0 3
46929: PUSH
46930: DOUBLE
46931: LD_INT 2
46933: DEC
46934: ST_TO_ADDR
46935: LD_VAR 0 2
46939: PUSH
46940: FOR_TO
46941: IFFALSE 47033
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46943: LD_ADDR_VAR 0 4
46947: PUSH
46948: LD_VAR 0 2
46952: PUSH
46953: LD_VAR 0 3
46957: ARRAY
46958: PPUSH
46959: LD_INT 3
46961: PPUSH
46962: CALL_OW 259
46966: PUSH
46967: LD_VAR 0 2
46971: PUSH
46972: LD_VAR 0 3
46976: ARRAY
46977: PPUSH
46978: CALL_OW 432
46982: MINUS
46983: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46984: LD_VAR 0 4
46988: PUSH
46989: LD_VAR 0 5
46993: PPUSH
46994: LD_INT 3
46996: PPUSH
46997: CALL_OW 259
47001: PUSH
47002: LD_VAR 0 5
47006: PPUSH
47007: CALL_OW 432
47011: MINUS
47012: GREATEREQUAL
47013: IFFALSE 47031
// mech := result [ i ] ;
47015: LD_ADDR_VAR 0 5
47019: PUSH
47020: LD_VAR 0 2
47024: PUSH
47025: LD_VAR 0 3
47029: ARRAY
47030: ST_TO_ADDR
// end ;
47031: GO 46940
47033: POP
47034: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47035: LD_VAR 0 1
47039: PPUSH
47040: LD_VAR 0 5
47044: PPUSH
47045: CALL_OW 135
// end ;
47049: LD_VAR 0 2
47053: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47054: LD_INT 0
47056: PPUSH
47057: PPUSH
47058: PPUSH
47059: PPUSH
47060: PPUSH
47061: PPUSH
47062: PPUSH
47063: PPUSH
47064: PPUSH
47065: PPUSH
47066: PPUSH
47067: PPUSH
47068: PPUSH
// result := [ ] ;
47069: LD_ADDR_VAR 0 7
47073: PUSH
47074: EMPTY
47075: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47076: LD_VAR 0 1
47080: PPUSH
47081: CALL_OW 266
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: IN
47096: NOT
47097: IFFALSE 47101
// exit ;
47099: GO 48735
// if name then
47101: LD_VAR 0 3
47105: IFFALSE 47121
// SetBName ( base_dep , name ) ;
47107: LD_VAR 0 1
47111: PPUSH
47112: LD_VAR 0 3
47116: PPUSH
47117: CALL_OW 500
// base := GetBase ( base_dep ) ;
47121: LD_ADDR_VAR 0 15
47125: PUSH
47126: LD_VAR 0 1
47130: PPUSH
47131: CALL_OW 274
47135: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47136: LD_ADDR_VAR 0 16
47140: PUSH
47141: LD_VAR 0 1
47145: PPUSH
47146: CALL_OW 255
47150: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47151: LD_ADDR_VAR 0 17
47155: PUSH
47156: LD_VAR 0 1
47160: PPUSH
47161: CALL_OW 248
47165: ST_TO_ADDR
// if sources then
47166: LD_VAR 0 5
47170: IFFALSE 47217
// for i = 1 to 3 do
47172: LD_ADDR_VAR 0 8
47176: PUSH
47177: DOUBLE
47178: LD_INT 1
47180: DEC
47181: ST_TO_ADDR
47182: LD_INT 3
47184: PUSH
47185: FOR_TO
47186: IFFALSE 47215
// AddResourceType ( base , i , sources [ i ] ) ;
47188: LD_VAR 0 15
47192: PPUSH
47193: LD_VAR 0 8
47197: PPUSH
47198: LD_VAR 0 5
47202: PUSH
47203: LD_VAR 0 8
47207: ARRAY
47208: PPUSH
47209: CALL_OW 276
47213: GO 47185
47215: POP
47216: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47217: LD_ADDR_VAR 0 18
47221: PUSH
47222: LD_VAR 0 15
47226: PPUSH
47227: LD_VAR 0 2
47231: PPUSH
47232: LD_INT 1
47234: PPUSH
47235: CALL 46478 0 3
47239: ST_TO_ADDR
// InitHc ;
47240: CALL_OW 19
// InitUc ;
47244: CALL_OW 18
// uc_side := side ;
47248: LD_ADDR_OWVAR 20
47252: PUSH
47253: LD_VAR 0 16
47257: ST_TO_ADDR
// uc_nation := nation ;
47258: LD_ADDR_OWVAR 21
47262: PUSH
47263: LD_VAR 0 17
47267: ST_TO_ADDR
// if buildings then
47268: LD_VAR 0 18
47272: IFFALSE 48594
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47274: LD_ADDR_VAR 0 19
47278: PUSH
47279: LD_VAR 0 18
47283: PPUSH
47284: LD_INT 2
47286: PUSH
47287: LD_INT 30
47289: PUSH
47290: LD_INT 29
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 30
47299: PUSH
47300: LD_INT 30
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: LIST
47311: PPUSH
47312: CALL_OW 72
47316: ST_TO_ADDR
// if tmp then
47317: LD_VAR 0 19
47321: IFFALSE 47369
// for i in tmp do
47323: LD_ADDR_VAR 0 8
47327: PUSH
47328: LD_VAR 0 19
47332: PUSH
47333: FOR_IN
47334: IFFALSE 47367
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47336: LD_VAR 0 8
47340: PPUSH
47341: CALL_OW 250
47345: PPUSH
47346: LD_VAR 0 8
47350: PPUSH
47351: CALL_OW 251
47355: PPUSH
47356: LD_VAR 0 16
47360: PPUSH
47361: CALL_OW 441
47365: GO 47333
47367: POP
47368: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47369: LD_VAR 0 18
47373: PPUSH
47374: LD_INT 2
47376: PUSH
47377: LD_INT 30
47379: PUSH
47380: LD_INT 32
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 30
47389: PUSH
47390: LD_INT 33
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: LIST
47401: PPUSH
47402: CALL_OW 72
47406: IFFALSE 47494
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47408: LD_ADDR_VAR 0 8
47412: PUSH
47413: LD_VAR 0 18
47417: PPUSH
47418: LD_INT 2
47420: PUSH
47421: LD_INT 30
47423: PUSH
47424: LD_INT 32
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 30
47433: PUSH
47434: LD_INT 33
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: LIST
47445: PPUSH
47446: CALL_OW 72
47450: PUSH
47451: FOR_IN
47452: IFFALSE 47492
// begin if not GetBWeapon ( i ) then
47454: LD_VAR 0 8
47458: PPUSH
47459: CALL_OW 269
47463: NOT
47464: IFFALSE 47490
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47466: LD_VAR 0 8
47470: PPUSH
47471: LD_VAR 0 8
47475: PPUSH
47476: LD_VAR 0 2
47480: PPUSH
47481: CALL 48740 0 2
47485: PPUSH
47486: CALL_OW 431
// end ;
47490: GO 47451
47492: POP
47493: POP
// end ; for i = 1 to personel do
47494: LD_ADDR_VAR 0 8
47498: PUSH
47499: DOUBLE
47500: LD_INT 1
47502: DEC
47503: ST_TO_ADDR
47504: LD_VAR 0 6
47508: PUSH
47509: FOR_TO
47510: IFFALSE 48574
// begin if i > 4 then
47512: LD_VAR 0 8
47516: PUSH
47517: LD_INT 4
47519: GREATER
47520: IFFALSE 47524
// break ;
47522: GO 48574
// case i of 1 :
47524: LD_VAR 0 8
47528: PUSH
47529: LD_INT 1
47531: DOUBLE
47532: EQUAL
47533: IFTRUE 47537
47535: GO 47617
47537: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47538: LD_ADDR_VAR 0 12
47542: PUSH
47543: LD_VAR 0 18
47547: PPUSH
47548: LD_INT 22
47550: PUSH
47551: LD_VAR 0 16
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 58
47562: PUSH
47563: EMPTY
47564: LIST
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: LD_INT 30
47571: PUSH
47572: LD_INT 32
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 30
47581: PUSH
47582: LD_INT 4
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 30
47591: PUSH
47592: LD_INT 5
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: LIST
47609: PPUSH
47610: CALL_OW 72
47614: ST_TO_ADDR
47615: GO 47839
47617: LD_INT 2
47619: DOUBLE
47620: EQUAL
47621: IFTRUE 47625
47623: GO 47687
47625: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47626: LD_ADDR_VAR 0 12
47630: PUSH
47631: LD_VAR 0 18
47635: PPUSH
47636: LD_INT 22
47638: PUSH
47639: LD_VAR 0 16
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: LD_INT 30
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 30
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: LIST
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PPUSH
47680: CALL_OW 72
47684: ST_TO_ADDR
47685: GO 47839
47687: LD_INT 3
47689: DOUBLE
47690: EQUAL
47691: IFTRUE 47695
47693: GO 47757
47695: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47696: LD_ADDR_VAR 0 12
47700: PUSH
47701: LD_VAR 0 18
47705: PPUSH
47706: LD_INT 22
47708: PUSH
47709: LD_VAR 0 16
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 2
47720: PUSH
47721: LD_INT 30
47723: PUSH
47724: LD_INT 2
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 30
47733: PUSH
47734: LD_INT 3
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PPUSH
47750: CALL_OW 72
47754: ST_TO_ADDR
47755: GO 47839
47757: LD_INT 4
47759: DOUBLE
47760: EQUAL
47761: IFTRUE 47765
47763: GO 47838
47765: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47766: LD_ADDR_VAR 0 12
47770: PUSH
47771: LD_VAR 0 18
47775: PPUSH
47776: LD_INT 22
47778: PUSH
47779: LD_VAR 0 16
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: LD_INT 30
47793: PUSH
47794: LD_INT 6
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 30
47803: PUSH
47804: LD_INT 7
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 30
47813: PUSH
47814: LD_INT 8
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PPUSH
47831: CALL_OW 72
47835: ST_TO_ADDR
47836: GO 47839
47838: POP
// if i = 1 then
47839: LD_VAR 0 8
47843: PUSH
47844: LD_INT 1
47846: EQUAL
47847: IFFALSE 47958
// begin tmp := [ ] ;
47849: LD_ADDR_VAR 0 19
47853: PUSH
47854: EMPTY
47855: ST_TO_ADDR
// for j in f do
47856: LD_ADDR_VAR 0 9
47860: PUSH
47861: LD_VAR 0 12
47865: PUSH
47866: FOR_IN
47867: IFFALSE 47940
// if GetBType ( j ) = b_bunker then
47869: LD_VAR 0 9
47873: PPUSH
47874: CALL_OW 266
47878: PUSH
47879: LD_INT 32
47881: EQUAL
47882: IFFALSE 47909
// tmp := Insert ( tmp , 1 , j ) else
47884: LD_ADDR_VAR 0 19
47888: PUSH
47889: LD_VAR 0 19
47893: PPUSH
47894: LD_INT 1
47896: PPUSH
47897: LD_VAR 0 9
47901: PPUSH
47902: CALL_OW 2
47906: ST_TO_ADDR
47907: GO 47938
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47909: LD_ADDR_VAR 0 19
47913: PUSH
47914: LD_VAR 0 19
47918: PPUSH
47919: LD_VAR 0 19
47923: PUSH
47924: LD_INT 1
47926: PLUS
47927: PPUSH
47928: LD_VAR 0 9
47932: PPUSH
47933: CALL_OW 2
47937: ST_TO_ADDR
47938: GO 47866
47940: POP
47941: POP
// if tmp then
47942: LD_VAR 0 19
47946: IFFALSE 47958
// f := tmp ;
47948: LD_ADDR_VAR 0 12
47952: PUSH
47953: LD_VAR 0 19
47957: ST_TO_ADDR
// end ; x := personel [ i ] ;
47958: LD_ADDR_VAR 0 13
47962: PUSH
47963: LD_VAR 0 6
47967: PUSH
47968: LD_VAR 0 8
47972: ARRAY
47973: ST_TO_ADDR
// if x = - 1 then
47974: LD_VAR 0 13
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: EQUAL
47983: IFFALSE 48192
// begin for j in f do
47985: LD_ADDR_VAR 0 9
47989: PUSH
47990: LD_VAR 0 12
47994: PUSH
47995: FOR_IN
47996: IFFALSE 48188
// repeat InitHc ;
47998: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48002: LD_VAR 0 9
48006: PPUSH
48007: CALL_OW 266
48011: PUSH
48012: LD_INT 5
48014: EQUAL
48015: IFFALSE 48085
// begin if UnitsInside ( j ) < 3 then
48017: LD_VAR 0 9
48021: PPUSH
48022: CALL_OW 313
48026: PUSH
48027: LD_INT 3
48029: LESS
48030: IFFALSE 48066
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48032: LD_INT 0
48034: PPUSH
48035: LD_INT 5
48037: PUSH
48038: LD_INT 8
48040: PUSH
48041: LD_INT 9
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: LIST
48048: PUSH
48049: LD_VAR 0 17
48053: ARRAY
48054: PPUSH
48055: LD_VAR 0 4
48059: PPUSH
48060: CALL_OW 380
48064: GO 48083
// PrepareHuman ( false , i , skill ) ;
48066: LD_INT 0
48068: PPUSH
48069: LD_VAR 0 8
48073: PPUSH
48074: LD_VAR 0 4
48078: PPUSH
48079: CALL_OW 380
// end else
48083: GO 48102
// PrepareHuman ( false , i , skill ) ;
48085: LD_INT 0
48087: PPUSH
48088: LD_VAR 0 8
48092: PPUSH
48093: LD_VAR 0 4
48097: PPUSH
48098: CALL_OW 380
// un := CreateHuman ;
48102: LD_ADDR_VAR 0 14
48106: PUSH
48107: CALL_OW 44
48111: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48112: LD_ADDR_VAR 0 7
48116: PUSH
48117: LD_VAR 0 7
48121: PPUSH
48122: LD_INT 1
48124: PPUSH
48125: LD_VAR 0 14
48129: PPUSH
48130: CALL_OW 2
48134: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48135: LD_VAR 0 14
48139: PPUSH
48140: LD_VAR 0 9
48144: PPUSH
48145: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48149: LD_VAR 0 9
48153: PPUSH
48154: CALL_OW 313
48158: PUSH
48159: LD_INT 6
48161: EQUAL
48162: PUSH
48163: LD_VAR 0 9
48167: PPUSH
48168: CALL_OW 266
48172: PUSH
48173: LD_INT 32
48175: PUSH
48176: LD_INT 31
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: IN
48183: OR
48184: IFFALSE 47998
48186: GO 47995
48188: POP
48189: POP
// end else
48190: GO 48572
// for j = 1 to x do
48192: LD_ADDR_VAR 0 9
48196: PUSH
48197: DOUBLE
48198: LD_INT 1
48200: DEC
48201: ST_TO_ADDR
48202: LD_VAR 0 13
48206: PUSH
48207: FOR_TO
48208: IFFALSE 48570
// begin InitHc ;
48210: CALL_OW 19
// if not f then
48214: LD_VAR 0 12
48218: NOT
48219: IFFALSE 48308
// begin PrepareHuman ( false , i , skill ) ;
48221: LD_INT 0
48223: PPUSH
48224: LD_VAR 0 8
48228: PPUSH
48229: LD_VAR 0 4
48233: PPUSH
48234: CALL_OW 380
// un := CreateHuman ;
48238: LD_ADDR_VAR 0 14
48242: PUSH
48243: CALL_OW 44
48247: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48248: LD_ADDR_VAR 0 7
48252: PUSH
48253: LD_VAR 0 7
48257: PPUSH
48258: LD_INT 1
48260: PPUSH
48261: LD_VAR 0 14
48265: PPUSH
48266: CALL_OW 2
48270: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48271: LD_VAR 0 14
48275: PPUSH
48276: LD_VAR 0 1
48280: PPUSH
48281: CALL_OW 250
48285: PPUSH
48286: LD_VAR 0 1
48290: PPUSH
48291: CALL_OW 251
48295: PPUSH
48296: LD_INT 10
48298: PPUSH
48299: LD_INT 0
48301: PPUSH
48302: CALL_OW 50
// continue ;
48306: GO 48207
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48308: LD_VAR 0 12
48312: PUSH
48313: LD_INT 1
48315: ARRAY
48316: PPUSH
48317: CALL_OW 313
48321: PUSH
48322: LD_VAR 0 12
48326: PUSH
48327: LD_INT 1
48329: ARRAY
48330: PPUSH
48331: CALL_OW 266
48335: PUSH
48336: LD_INT 32
48338: PUSH
48339: LD_INT 31
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: IN
48346: AND
48347: PUSH
48348: LD_VAR 0 12
48352: PUSH
48353: LD_INT 1
48355: ARRAY
48356: PPUSH
48357: CALL_OW 313
48361: PUSH
48362: LD_INT 6
48364: EQUAL
48365: OR
48366: IFFALSE 48386
// f := Delete ( f , 1 ) ;
48368: LD_ADDR_VAR 0 12
48372: PUSH
48373: LD_VAR 0 12
48377: PPUSH
48378: LD_INT 1
48380: PPUSH
48381: CALL_OW 3
48385: ST_TO_ADDR
// if not f then
48386: LD_VAR 0 12
48390: NOT
48391: IFFALSE 48409
// begin x := x + 2 ;
48393: LD_ADDR_VAR 0 13
48397: PUSH
48398: LD_VAR 0 13
48402: PUSH
48403: LD_INT 2
48405: PLUS
48406: ST_TO_ADDR
// continue ;
48407: GO 48207
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48409: LD_VAR 0 12
48413: PUSH
48414: LD_INT 1
48416: ARRAY
48417: PPUSH
48418: CALL_OW 266
48422: PUSH
48423: LD_INT 5
48425: EQUAL
48426: IFFALSE 48500
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48428: LD_VAR 0 12
48432: PUSH
48433: LD_INT 1
48435: ARRAY
48436: PPUSH
48437: CALL_OW 313
48441: PUSH
48442: LD_INT 3
48444: LESS
48445: IFFALSE 48481
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48447: LD_INT 0
48449: PPUSH
48450: LD_INT 5
48452: PUSH
48453: LD_INT 8
48455: PUSH
48456: LD_INT 9
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: LIST
48463: PUSH
48464: LD_VAR 0 17
48468: ARRAY
48469: PPUSH
48470: LD_VAR 0 4
48474: PPUSH
48475: CALL_OW 380
48479: GO 48498
// PrepareHuman ( false , i , skill ) ;
48481: LD_INT 0
48483: PPUSH
48484: LD_VAR 0 8
48488: PPUSH
48489: LD_VAR 0 4
48493: PPUSH
48494: CALL_OW 380
// end else
48498: GO 48517
// PrepareHuman ( false , i , skill ) ;
48500: LD_INT 0
48502: PPUSH
48503: LD_VAR 0 8
48507: PPUSH
48508: LD_VAR 0 4
48512: PPUSH
48513: CALL_OW 380
// un := CreateHuman ;
48517: LD_ADDR_VAR 0 14
48521: PUSH
48522: CALL_OW 44
48526: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48527: LD_ADDR_VAR 0 7
48531: PUSH
48532: LD_VAR 0 7
48536: PPUSH
48537: LD_INT 1
48539: PPUSH
48540: LD_VAR 0 14
48544: PPUSH
48545: CALL_OW 2
48549: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48550: LD_VAR 0 14
48554: PPUSH
48555: LD_VAR 0 12
48559: PUSH
48560: LD_INT 1
48562: ARRAY
48563: PPUSH
48564: CALL_OW 52
// end ;
48568: GO 48207
48570: POP
48571: POP
// end ;
48572: GO 47509
48574: POP
48575: POP
// result := result ^ buildings ;
48576: LD_ADDR_VAR 0 7
48580: PUSH
48581: LD_VAR 0 7
48585: PUSH
48586: LD_VAR 0 18
48590: ADD
48591: ST_TO_ADDR
// end else
48592: GO 48735
// begin for i = 1 to personel do
48594: LD_ADDR_VAR 0 8
48598: PUSH
48599: DOUBLE
48600: LD_INT 1
48602: DEC
48603: ST_TO_ADDR
48604: LD_VAR 0 6
48608: PUSH
48609: FOR_TO
48610: IFFALSE 48733
// begin if i > 4 then
48612: LD_VAR 0 8
48616: PUSH
48617: LD_INT 4
48619: GREATER
48620: IFFALSE 48624
// break ;
48622: GO 48733
// x := personel [ i ] ;
48624: LD_ADDR_VAR 0 13
48628: PUSH
48629: LD_VAR 0 6
48633: PUSH
48634: LD_VAR 0 8
48638: ARRAY
48639: ST_TO_ADDR
// if x = - 1 then
48640: LD_VAR 0 13
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: EQUAL
48649: IFFALSE 48653
// continue ;
48651: GO 48609
// PrepareHuman ( false , i , skill ) ;
48653: LD_INT 0
48655: PPUSH
48656: LD_VAR 0 8
48660: PPUSH
48661: LD_VAR 0 4
48665: PPUSH
48666: CALL_OW 380
// un := CreateHuman ;
48670: LD_ADDR_VAR 0 14
48674: PUSH
48675: CALL_OW 44
48679: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48680: LD_VAR 0 14
48684: PPUSH
48685: LD_VAR 0 1
48689: PPUSH
48690: CALL_OW 250
48694: PPUSH
48695: LD_VAR 0 1
48699: PPUSH
48700: CALL_OW 251
48704: PPUSH
48705: LD_INT 10
48707: PPUSH
48708: LD_INT 0
48710: PPUSH
48711: CALL_OW 50
// result := result ^ un ;
48715: LD_ADDR_VAR 0 7
48719: PUSH
48720: LD_VAR 0 7
48724: PUSH
48725: LD_VAR 0 14
48729: ADD
48730: ST_TO_ADDR
// end ;
48731: GO 48609
48733: POP
48734: POP
// end ; end ;
48735: LD_VAR 0 7
48739: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48740: LD_INT 0
48742: PPUSH
48743: PPUSH
48744: PPUSH
48745: PPUSH
48746: PPUSH
48747: PPUSH
48748: PPUSH
48749: PPUSH
48750: PPUSH
48751: PPUSH
48752: PPUSH
48753: PPUSH
48754: PPUSH
48755: PPUSH
48756: PPUSH
48757: PPUSH
// result := false ;
48758: LD_ADDR_VAR 0 3
48762: PUSH
48763: LD_INT 0
48765: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48766: LD_VAR 0 1
48770: NOT
48771: PUSH
48772: LD_VAR 0 1
48776: PPUSH
48777: CALL_OW 266
48781: PUSH
48782: LD_INT 32
48784: PUSH
48785: LD_INT 33
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: IN
48792: NOT
48793: OR
48794: IFFALSE 48798
// exit ;
48796: GO 49907
// nat := GetNation ( tower ) ;
48798: LD_ADDR_VAR 0 12
48802: PUSH
48803: LD_VAR 0 1
48807: PPUSH
48808: CALL_OW 248
48812: ST_TO_ADDR
// side := GetSide ( tower ) ;
48813: LD_ADDR_VAR 0 16
48817: PUSH
48818: LD_VAR 0 1
48822: PPUSH
48823: CALL_OW 255
48827: ST_TO_ADDR
// x := GetX ( tower ) ;
48828: LD_ADDR_VAR 0 10
48832: PUSH
48833: LD_VAR 0 1
48837: PPUSH
48838: CALL_OW 250
48842: ST_TO_ADDR
// y := GetY ( tower ) ;
48843: LD_ADDR_VAR 0 11
48847: PUSH
48848: LD_VAR 0 1
48852: PPUSH
48853: CALL_OW 251
48857: ST_TO_ADDR
// if not x or not y then
48858: LD_VAR 0 10
48862: NOT
48863: PUSH
48864: LD_VAR 0 11
48868: NOT
48869: OR
48870: IFFALSE 48874
// exit ;
48872: GO 49907
// weapon := 0 ;
48874: LD_ADDR_VAR 0 18
48878: PUSH
48879: LD_INT 0
48881: ST_TO_ADDR
// fac_list := [ ] ;
48882: LD_ADDR_VAR 0 17
48886: PUSH
48887: EMPTY
48888: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48889: LD_ADDR_VAR 0 6
48893: PUSH
48894: LD_VAR 0 1
48898: PPUSH
48899: CALL_OW 274
48903: PPUSH
48904: LD_VAR 0 2
48908: PPUSH
48909: LD_INT 0
48911: PPUSH
48912: CALL 46478 0 3
48916: PPUSH
48917: LD_INT 30
48919: PUSH
48920: LD_INT 3
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PPUSH
48927: CALL_OW 72
48931: ST_TO_ADDR
// if not factories then
48932: LD_VAR 0 6
48936: NOT
48937: IFFALSE 48941
// exit ;
48939: GO 49907
// for i in factories do
48941: LD_ADDR_VAR 0 8
48945: PUSH
48946: LD_VAR 0 6
48950: PUSH
48951: FOR_IN
48952: IFFALSE 48977
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48954: LD_ADDR_VAR 0 17
48958: PUSH
48959: LD_VAR 0 17
48963: PUSH
48964: LD_VAR 0 8
48968: PPUSH
48969: CALL_OW 478
48973: UNION
48974: ST_TO_ADDR
48975: GO 48951
48977: POP
48978: POP
// if not fac_list then
48979: LD_VAR 0 17
48983: NOT
48984: IFFALSE 48988
// exit ;
48986: GO 49907
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48988: LD_ADDR_VAR 0 5
48992: PUSH
48993: LD_INT 4
48995: PUSH
48996: LD_INT 5
48998: PUSH
48999: LD_INT 9
49001: PUSH
49002: LD_INT 10
49004: PUSH
49005: LD_INT 6
49007: PUSH
49008: LD_INT 7
49010: PUSH
49011: LD_INT 11
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 27
49025: PUSH
49026: LD_INT 28
49028: PUSH
49029: LD_INT 26
49031: PUSH
49032: LD_INT 30
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 43
49043: PUSH
49044: LD_INT 44
49046: PUSH
49047: LD_INT 46
49049: PUSH
49050: LD_INT 45
49052: PUSH
49053: LD_INT 47
49055: PUSH
49056: LD_INT 49
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: LIST
49071: PUSH
49072: LD_VAR 0 12
49076: ARRAY
49077: ST_TO_ADDR
// list := list isect fac_list ;
49078: LD_ADDR_VAR 0 5
49082: PUSH
49083: LD_VAR 0 5
49087: PUSH
49088: LD_VAR 0 17
49092: ISECT
49093: ST_TO_ADDR
// if not list then
49094: LD_VAR 0 5
49098: NOT
49099: IFFALSE 49103
// exit ;
49101: GO 49907
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49103: LD_VAR 0 12
49107: PUSH
49108: LD_INT 3
49110: EQUAL
49111: PUSH
49112: LD_INT 49
49114: PUSH
49115: LD_VAR 0 5
49119: IN
49120: AND
49121: PUSH
49122: LD_INT 31
49124: PPUSH
49125: LD_VAR 0 16
49129: PPUSH
49130: CALL_OW 321
49134: PUSH
49135: LD_INT 2
49137: EQUAL
49138: AND
49139: IFFALSE 49199
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49141: LD_INT 22
49143: PUSH
49144: LD_VAR 0 16
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 35
49155: PUSH
49156: LD_INT 49
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 91
49165: PUSH
49166: LD_VAR 0 1
49170: PUSH
49171: LD_INT 10
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: LIST
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: LIST
49183: PPUSH
49184: CALL_OW 69
49188: NOT
49189: IFFALSE 49199
// weapon := ru_time_lapser ;
49191: LD_ADDR_VAR 0 18
49195: PUSH
49196: LD_INT 49
49198: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49199: LD_VAR 0 12
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: LD_INT 2
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: IN
49214: PUSH
49215: LD_INT 11
49217: PUSH
49218: LD_VAR 0 5
49222: IN
49223: PUSH
49224: LD_INT 30
49226: PUSH
49227: LD_VAR 0 5
49231: IN
49232: OR
49233: AND
49234: PUSH
49235: LD_INT 6
49237: PPUSH
49238: LD_VAR 0 16
49242: PPUSH
49243: CALL_OW 321
49247: PUSH
49248: LD_INT 2
49250: EQUAL
49251: AND
49252: IFFALSE 49417
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49254: LD_INT 22
49256: PUSH
49257: LD_VAR 0 16
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: PUSH
49269: LD_INT 35
49271: PUSH
49272: LD_INT 11
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 35
49281: PUSH
49282: LD_INT 30
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 91
49296: PUSH
49297: LD_VAR 0 1
49301: PUSH
49302: LD_INT 18
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: LIST
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: LIST
49314: PPUSH
49315: CALL_OW 69
49319: NOT
49320: PUSH
49321: LD_INT 22
49323: PUSH
49324: LD_VAR 0 16
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: PUSH
49336: LD_INT 30
49338: PUSH
49339: LD_INT 32
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 30
49348: PUSH
49349: LD_INT 33
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 91
49363: PUSH
49364: LD_VAR 0 1
49368: PUSH
49369: LD_INT 12
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: LIST
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: LIST
49381: PUSH
49382: EMPTY
49383: LIST
49384: PPUSH
49385: CALL_OW 69
49389: PUSH
49390: LD_INT 2
49392: GREATER
49393: AND
49394: IFFALSE 49417
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49396: LD_ADDR_VAR 0 18
49400: PUSH
49401: LD_INT 11
49403: PUSH
49404: LD_INT 30
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_VAR 0 12
49415: ARRAY
49416: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49417: LD_VAR 0 18
49421: NOT
49422: PUSH
49423: LD_INT 40
49425: PPUSH
49426: LD_VAR 0 16
49430: PPUSH
49431: CALL_OW 321
49435: PUSH
49436: LD_INT 2
49438: EQUAL
49439: AND
49440: PUSH
49441: LD_INT 7
49443: PUSH
49444: LD_VAR 0 5
49448: IN
49449: PUSH
49450: LD_INT 28
49452: PUSH
49453: LD_VAR 0 5
49457: IN
49458: OR
49459: PUSH
49460: LD_INT 45
49462: PUSH
49463: LD_VAR 0 5
49467: IN
49468: OR
49469: AND
49470: IFFALSE 49724
// begin hex := GetHexInfo ( x , y ) ;
49472: LD_ADDR_VAR 0 4
49476: PUSH
49477: LD_VAR 0 10
49481: PPUSH
49482: LD_VAR 0 11
49486: PPUSH
49487: CALL_OW 546
49491: ST_TO_ADDR
// if hex [ 1 ] then
49492: LD_VAR 0 4
49496: PUSH
49497: LD_INT 1
49499: ARRAY
49500: IFFALSE 49504
// exit ;
49502: GO 49907
// height := hex [ 2 ] ;
49504: LD_ADDR_VAR 0 15
49508: PUSH
49509: LD_VAR 0 4
49513: PUSH
49514: LD_INT 2
49516: ARRAY
49517: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49518: LD_ADDR_VAR 0 14
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: LD_INT 3
49531: PUSH
49532: LD_INT 5
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: ST_TO_ADDR
// for i in tmp do
49541: LD_ADDR_VAR 0 8
49545: PUSH
49546: LD_VAR 0 14
49550: PUSH
49551: FOR_IN
49552: IFFALSE 49722
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49554: LD_ADDR_VAR 0 9
49558: PUSH
49559: LD_VAR 0 10
49563: PPUSH
49564: LD_VAR 0 8
49568: PPUSH
49569: LD_INT 5
49571: PPUSH
49572: CALL_OW 272
49576: PUSH
49577: LD_VAR 0 11
49581: PPUSH
49582: LD_VAR 0 8
49586: PPUSH
49587: LD_INT 5
49589: PPUSH
49590: CALL_OW 273
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49599: LD_VAR 0 9
49603: PUSH
49604: LD_INT 1
49606: ARRAY
49607: PPUSH
49608: LD_VAR 0 9
49612: PUSH
49613: LD_INT 2
49615: ARRAY
49616: PPUSH
49617: CALL_OW 488
49621: IFFALSE 49720
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49623: LD_ADDR_VAR 0 4
49627: PUSH
49628: LD_VAR 0 9
49632: PUSH
49633: LD_INT 1
49635: ARRAY
49636: PPUSH
49637: LD_VAR 0 9
49641: PUSH
49642: LD_INT 2
49644: ARRAY
49645: PPUSH
49646: CALL_OW 546
49650: ST_TO_ADDR
// if hex [ 1 ] then
49651: LD_VAR 0 4
49655: PUSH
49656: LD_INT 1
49658: ARRAY
49659: IFFALSE 49663
// continue ;
49661: GO 49551
// h := hex [ 2 ] ;
49663: LD_ADDR_VAR 0 13
49667: PUSH
49668: LD_VAR 0 4
49672: PUSH
49673: LD_INT 2
49675: ARRAY
49676: ST_TO_ADDR
// if h + 7 < height then
49677: LD_VAR 0 13
49681: PUSH
49682: LD_INT 7
49684: PLUS
49685: PUSH
49686: LD_VAR 0 15
49690: LESS
49691: IFFALSE 49720
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49693: LD_ADDR_VAR 0 18
49697: PUSH
49698: LD_INT 7
49700: PUSH
49701: LD_INT 28
49703: PUSH
49704: LD_INT 45
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: LIST
49711: PUSH
49712: LD_VAR 0 12
49716: ARRAY
49717: ST_TO_ADDR
// break ;
49718: GO 49722
// end ; end ; end ;
49720: GO 49551
49722: POP
49723: POP
// end ; if not weapon then
49724: LD_VAR 0 18
49728: NOT
49729: IFFALSE 49789
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49731: LD_ADDR_VAR 0 5
49735: PUSH
49736: LD_VAR 0 5
49740: PUSH
49741: LD_INT 11
49743: PUSH
49744: LD_INT 30
49746: PUSH
49747: LD_INT 49
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: LIST
49754: DIFF
49755: ST_TO_ADDR
// if not list then
49756: LD_VAR 0 5
49760: NOT
49761: IFFALSE 49765
// exit ;
49763: GO 49907
// weapon := list [ rand ( 1 , list ) ] ;
49765: LD_ADDR_VAR 0 18
49769: PUSH
49770: LD_VAR 0 5
49774: PUSH
49775: LD_INT 1
49777: PPUSH
49778: LD_VAR 0 5
49782: PPUSH
49783: CALL_OW 12
49787: ARRAY
49788: ST_TO_ADDR
// end ; if weapon then
49789: LD_VAR 0 18
49793: IFFALSE 49907
// begin tmp := CostOfWeapon ( weapon ) ;
49795: LD_ADDR_VAR 0 14
49799: PUSH
49800: LD_VAR 0 18
49804: PPUSH
49805: CALL_OW 451
49809: ST_TO_ADDR
// j := GetBase ( tower ) ;
49810: LD_ADDR_VAR 0 9
49814: PUSH
49815: LD_VAR 0 1
49819: PPUSH
49820: CALL_OW 274
49824: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49825: LD_VAR 0 9
49829: PPUSH
49830: LD_INT 1
49832: PPUSH
49833: CALL_OW 275
49837: PUSH
49838: LD_VAR 0 14
49842: PUSH
49843: LD_INT 1
49845: ARRAY
49846: GREATEREQUAL
49847: PUSH
49848: LD_VAR 0 9
49852: PPUSH
49853: LD_INT 2
49855: PPUSH
49856: CALL_OW 275
49860: PUSH
49861: LD_VAR 0 14
49865: PUSH
49866: LD_INT 2
49868: ARRAY
49869: GREATEREQUAL
49870: AND
49871: PUSH
49872: LD_VAR 0 9
49876: PPUSH
49877: LD_INT 3
49879: PPUSH
49880: CALL_OW 275
49884: PUSH
49885: LD_VAR 0 14
49889: PUSH
49890: LD_INT 3
49892: ARRAY
49893: GREATEREQUAL
49894: AND
49895: IFFALSE 49907
// result := weapon ;
49897: LD_ADDR_VAR 0 3
49901: PUSH
49902: LD_VAR 0 18
49906: ST_TO_ADDR
// end ; end ;
49907: LD_VAR 0 3
49911: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49912: LD_INT 0
49914: PPUSH
49915: PPUSH
// result := true ;
49916: LD_ADDR_VAR 0 3
49920: PUSH
49921: LD_INT 1
49923: ST_TO_ADDR
// if array1 = array2 then
49924: LD_VAR 0 1
49928: PUSH
49929: LD_VAR 0 2
49933: EQUAL
49934: IFFALSE 49994
// begin for i = 1 to array1 do
49936: LD_ADDR_VAR 0 4
49940: PUSH
49941: DOUBLE
49942: LD_INT 1
49944: DEC
49945: ST_TO_ADDR
49946: LD_VAR 0 1
49950: PUSH
49951: FOR_TO
49952: IFFALSE 49990
// if array1 [ i ] <> array2 [ i ] then
49954: LD_VAR 0 1
49958: PUSH
49959: LD_VAR 0 4
49963: ARRAY
49964: PUSH
49965: LD_VAR 0 2
49969: PUSH
49970: LD_VAR 0 4
49974: ARRAY
49975: NONEQUAL
49976: IFFALSE 49988
// begin result := false ;
49978: LD_ADDR_VAR 0 3
49982: PUSH
49983: LD_INT 0
49985: ST_TO_ADDR
// break ;
49986: GO 49990
// end ;
49988: GO 49951
49990: POP
49991: POP
// end else
49992: GO 50002
// result := false ;
49994: LD_ADDR_VAR 0 3
49998: PUSH
49999: LD_INT 0
50001: ST_TO_ADDR
// end ;
50002: LD_VAR 0 3
50006: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50007: LD_INT 0
50009: PPUSH
50010: PPUSH
// if not array1 or not array2 then
50011: LD_VAR 0 1
50015: NOT
50016: PUSH
50017: LD_VAR 0 2
50021: NOT
50022: OR
50023: IFFALSE 50027
// exit ;
50025: GO 50091
// result := true ;
50027: LD_ADDR_VAR 0 3
50031: PUSH
50032: LD_INT 1
50034: ST_TO_ADDR
// for i = 1 to array1 do
50035: LD_ADDR_VAR 0 4
50039: PUSH
50040: DOUBLE
50041: LD_INT 1
50043: DEC
50044: ST_TO_ADDR
50045: LD_VAR 0 1
50049: PUSH
50050: FOR_TO
50051: IFFALSE 50089
// if array1 [ i ] <> array2 [ i ] then
50053: LD_VAR 0 1
50057: PUSH
50058: LD_VAR 0 4
50062: ARRAY
50063: PUSH
50064: LD_VAR 0 2
50068: PUSH
50069: LD_VAR 0 4
50073: ARRAY
50074: NONEQUAL
50075: IFFALSE 50087
// begin result := false ;
50077: LD_ADDR_VAR 0 3
50081: PUSH
50082: LD_INT 0
50084: ST_TO_ADDR
// break ;
50085: GO 50089
// end ;
50087: GO 50050
50089: POP
50090: POP
// end ;
50091: LD_VAR 0 3
50095: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50096: LD_INT 0
50098: PPUSH
50099: PPUSH
50100: PPUSH
// pom := GetBase ( fac ) ;
50101: LD_ADDR_VAR 0 5
50105: PUSH
50106: LD_VAR 0 1
50110: PPUSH
50111: CALL_OW 274
50115: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50116: LD_ADDR_VAR 0 4
50120: PUSH
50121: LD_VAR 0 2
50125: PUSH
50126: LD_INT 1
50128: ARRAY
50129: PPUSH
50130: LD_VAR 0 2
50134: PUSH
50135: LD_INT 2
50137: ARRAY
50138: PPUSH
50139: LD_VAR 0 2
50143: PUSH
50144: LD_INT 3
50146: ARRAY
50147: PPUSH
50148: LD_VAR 0 2
50152: PUSH
50153: LD_INT 4
50155: ARRAY
50156: PPUSH
50157: CALL_OW 449
50161: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50162: LD_ADDR_VAR 0 3
50166: PUSH
50167: LD_VAR 0 5
50171: PPUSH
50172: LD_INT 1
50174: PPUSH
50175: CALL_OW 275
50179: PUSH
50180: LD_VAR 0 4
50184: PUSH
50185: LD_INT 1
50187: ARRAY
50188: GREATEREQUAL
50189: PUSH
50190: LD_VAR 0 5
50194: PPUSH
50195: LD_INT 2
50197: PPUSH
50198: CALL_OW 275
50202: PUSH
50203: LD_VAR 0 4
50207: PUSH
50208: LD_INT 2
50210: ARRAY
50211: GREATEREQUAL
50212: AND
50213: PUSH
50214: LD_VAR 0 5
50218: PPUSH
50219: LD_INT 3
50221: PPUSH
50222: CALL_OW 275
50226: PUSH
50227: LD_VAR 0 4
50231: PUSH
50232: LD_INT 3
50234: ARRAY
50235: GREATEREQUAL
50236: AND
50237: ST_TO_ADDR
// end ;
50238: LD_VAR 0 3
50242: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50243: LD_INT 0
50245: PPUSH
50246: PPUSH
50247: PPUSH
50248: PPUSH
// pom := GetBase ( building ) ;
50249: LD_ADDR_VAR 0 3
50253: PUSH
50254: LD_VAR 0 1
50258: PPUSH
50259: CALL_OW 274
50263: ST_TO_ADDR
// if not pom then
50264: LD_VAR 0 3
50268: NOT
50269: IFFALSE 50273
// exit ;
50271: GO 50443
// btype := GetBType ( building ) ;
50273: LD_ADDR_VAR 0 5
50277: PUSH
50278: LD_VAR 0 1
50282: PPUSH
50283: CALL_OW 266
50287: ST_TO_ADDR
// if btype = b_armoury then
50288: LD_VAR 0 5
50292: PUSH
50293: LD_INT 4
50295: EQUAL
50296: IFFALSE 50306
// btype := b_barracks ;
50298: LD_ADDR_VAR 0 5
50302: PUSH
50303: LD_INT 5
50305: ST_TO_ADDR
// if btype = b_depot then
50306: LD_VAR 0 5
50310: PUSH
50311: LD_INT 0
50313: EQUAL
50314: IFFALSE 50324
// btype := b_warehouse ;
50316: LD_ADDR_VAR 0 5
50320: PUSH
50321: LD_INT 1
50323: ST_TO_ADDR
// if btype = b_workshop then
50324: LD_VAR 0 5
50328: PUSH
50329: LD_INT 2
50331: EQUAL
50332: IFFALSE 50342
// btype := b_factory ;
50334: LD_ADDR_VAR 0 5
50338: PUSH
50339: LD_INT 3
50341: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50342: LD_ADDR_VAR 0 4
50346: PUSH
50347: LD_VAR 0 5
50351: PPUSH
50352: LD_VAR 0 1
50356: PPUSH
50357: CALL_OW 248
50361: PPUSH
50362: CALL_OW 450
50366: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50367: LD_ADDR_VAR 0 2
50371: PUSH
50372: LD_VAR 0 3
50376: PPUSH
50377: LD_INT 1
50379: PPUSH
50380: CALL_OW 275
50384: PUSH
50385: LD_VAR 0 4
50389: PUSH
50390: LD_INT 1
50392: ARRAY
50393: GREATEREQUAL
50394: PUSH
50395: LD_VAR 0 3
50399: PPUSH
50400: LD_INT 2
50402: PPUSH
50403: CALL_OW 275
50407: PUSH
50408: LD_VAR 0 4
50412: PUSH
50413: LD_INT 2
50415: ARRAY
50416: GREATEREQUAL
50417: AND
50418: PUSH
50419: LD_VAR 0 3
50423: PPUSH
50424: LD_INT 3
50426: PPUSH
50427: CALL_OW 275
50431: PUSH
50432: LD_VAR 0 4
50436: PUSH
50437: LD_INT 3
50439: ARRAY
50440: GREATEREQUAL
50441: AND
50442: ST_TO_ADDR
// end ;
50443: LD_VAR 0 2
50447: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50448: LD_INT 0
50450: PPUSH
50451: PPUSH
50452: PPUSH
// pom := GetBase ( building ) ;
50453: LD_ADDR_VAR 0 4
50457: PUSH
50458: LD_VAR 0 1
50462: PPUSH
50463: CALL_OW 274
50467: ST_TO_ADDR
// if not pom then
50468: LD_VAR 0 4
50472: NOT
50473: IFFALSE 50477
// exit ;
50475: GO 50578
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50477: LD_ADDR_VAR 0 5
50481: PUSH
50482: LD_VAR 0 2
50486: PPUSH
50487: LD_VAR 0 1
50491: PPUSH
50492: CALL_OW 248
50496: PPUSH
50497: CALL_OW 450
50501: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50502: LD_ADDR_VAR 0 3
50506: PUSH
50507: LD_VAR 0 4
50511: PPUSH
50512: LD_INT 1
50514: PPUSH
50515: CALL_OW 275
50519: PUSH
50520: LD_VAR 0 5
50524: PUSH
50525: LD_INT 1
50527: ARRAY
50528: GREATEREQUAL
50529: PUSH
50530: LD_VAR 0 4
50534: PPUSH
50535: LD_INT 2
50537: PPUSH
50538: CALL_OW 275
50542: PUSH
50543: LD_VAR 0 5
50547: PUSH
50548: LD_INT 2
50550: ARRAY
50551: GREATEREQUAL
50552: AND
50553: PUSH
50554: LD_VAR 0 4
50558: PPUSH
50559: LD_INT 3
50561: PPUSH
50562: CALL_OW 275
50566: PUSH
50567: LD_VAR 0 5
50571: PUSH
50572: LD_INT 3
50574: ARRAY
50575: GREATEREQUAL
50576: AND
50577: ST_TO_ADDR
// end ;
50578: LD_VAR 0 3
50582: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50583: LD_INT 0
50585: PPUSH
50586: PPUSH
50587: PPUSH
50588: PPUSH
50589: PPUSH
50590: PPUSH
50591: PPUSH
50592: PPUSH
50593: PPUSH
50594: PPUSH
50595: PPUSH
// result := false ;
50596: LD_ADDR_VAR 0 8
50600: PUSH
50601: LD_INT 0
50603: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50604: LD_VAR 0 5
50608: NOT
50609: PUSH
50610: LD_VAR 0 1
50614: NOT
50615: OR
50616: PUSH
50617: LD_VAR 0 2
50621: NOT
50622: OR
50623: PUSH
50624: LD_VAR 0 3
50628: NOT
50629: OR
50630: IFFALSE 50634
// exit ;
50632: GO 51448
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50634: LD_ADDR_VAR 0 14
50638: PUSH
50639: LD_VAR 0 1
50643: PPUSH
50644: LD_VAR 0 2
50648: PPUSH
50649: LD_VAR 0 3
50653: PPUSH
50654: LD_VAR 0 4
50658: PPUSH
50659: LD_VAR 0 5
50663: PUSH
50664: LD_INT 1
50666: ARRAY
50667: PPUSH
50668: CALL_OW 248
50672: PPUSH
50673: LD_INT 0
50675: PPUSH
50676: CALL 52681 0 6
50680: ST_TO_ADDR
// if not hexes then
50681: LD_VAR 0 14
50685: NOT
50686: IFFALSE 50690
// exit ;
50688: GO 51448
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50690: LD_ADDR_VAR 0 17
50694: PUSH
50695: LD_VAR 0 5
50699: PPUSH
50700: LD_INT 22
50702: PUSH
50703: LD_VAR 0 13
50707: PPUSH
50708: CALL_OW 255
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 2
50719: PUSH
50720: LD_INT 30
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 30
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: LIST
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PPUSH
50749: CALL_OW 72
50753: ST_TO_ADDR
// for i = 1 to hexes do
50754: LD_ADDR_VAR 0 9
50758: PUSH
50759: DOUBLE
50760: LD_INT 1
50762: DEC
50763: ST_TO_ADDR
50764: LD_VAR 0 14
50768: PUSH
50769: FOR_TO
50770: IFFALSE 51446
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50772: LD_ADDR_VAR 0 13
50776: PUSH
50777: LD_VAR 0 14
50781: PUSH
50782: LD_VAR 0 9
50786: ARRAY
50787: PUSH
50788: LD_INT 1
50790: ARRAY
50791: PPUSH
50792: LD_VAR 0 14
50796: PUSH
50797: LD_VAR 0 9
50801: ARRAY
50802: PUSH
50803: LD_INT 2
50805: ARRAY
50806: PPUSH
50807: CALL_OW 428
50811: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50812: LD_VAR 0 14
50816: PUSH
50817: LD_VAR 0 9
50821: ARRAY
50822: PUSH
50823: LD_INT 1
50825: ARRAY
50826: PPUSH
50827: LD_VAR 0 14
50831: PUSH
50832: LD_VAR 0 9
50836: ARRAY
50837: PUSH
50838: LD_INT 2
50840: ARRAY
50841: PPUSH
50842: CALL_OW 351
50846: PUSH
50847: LD_VAR 0 14
50851: PUSH
50852: LD_VAR 0 9
50856: ARRAY
50857: PUSH
50858: LD_INT 1
50860: ARRAY
50861: PPUSH
50862: LD_VAR 0 14
50866: PUSH
50867: LD_VAR 0 9
50871: ARRAY
50872: PUSH
50873: LD_INT 2
50875: ARRAY
50876: PPUSH
50877: CALL_OW 488
50881: NOT
50882: OR
50883: PUSH
50884: LD_VAR 0 13
50888: PPUSH
50889: CALL_OW 247
50893: PUSH
50894: LD_INT 3
50896: EQUAL
50897: OR
50898: IFFALSE 50904
// exit ;
50900: POP
50901: POP
50902: GO 51448
// if not tmp then
50904: LD_VAR 0 13
50908: NOT
50909: IFFALSE 50913
// continue ;
50911: GO 50769
// result := true ;
50913: LD_ADDR_VAR 0 8
50917: PUSH
50918: LD_INT 1
50920: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50921: LD_VAR 0 6
50925: PUSH
50926: LD_VAR 0 13
50930: PPUSH
50931: CALL_OW 247
50935: PUSH
50936: LD_INT 2
50938: EQUAL
50939: AND
50940: PUSH
50941: LD_VAR 0 13
50945: PPUSH
50946: CALL_OW 263
50950: PUSH
50951: LD_INT 1
50953: EQUAL
50954: AND
50955: IFFALSE 51119
// begin if IsDrivenBy ( tmp ) then
50957: LD_VAR 0 13
50961: PPUSH
50962: CALL_OW 311
50966: IFFALSE 50970
// continue ;
50968: GO 50769
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50970: LD_VAR 0 6
50974: PPUSH
50975: LD_INT 3
50977: PUSH
50978: LD_INT 60
50980: PUSH
50981: EMPTY
50982: LIST
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 3
50990: PUSH
50991: LD_INT 55
50993: PUSH
50994: EMPTY
50995: LIST
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PPUSH
51005: CALL_OW 72
51009: IFFALSE 51117
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51011: LD_ADDR_VAR 0 18
51015: PUSH
51016: LD_VAR 0 6
51020: PPUSH
51021: LD_INT 3
51023: PUSH
51024: LD_INT 60
51026: PUSH
51027: EMPTY
51028: LIST
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 3
51036: PUSH
51037: LD_INT 55
51039: PUSH
51040: EMPTY
51041: LIST
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PPUSH
51051: CALL_OW 72
51055: PUSH
51056: LD_INT 1
51058: ARRAY
51059: ST_TO_ADDR
// if IsInUnit ( driver ) then
51060: LD_VAR 0 18
51064: PPUSH
51065: CALL_OW 310
51069: IFFALSE 51080
// ComExit ( driver ) ;
51071: LD_VAR 0 18
51075: PPUSH
51076: CALL 76369 0 1
// AddComEnterUnit ( driver , tmp ) ;
51080: LD_VAR 0 18
51084: PPUSH
51085: LD_VAR 0 13
51089: PPUSH
51090: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51094: LD_VAR 0 18
51098: PPUSH
51099: LD_VAR 0 7
51103: PPUSH
51104: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51108: LD_VAR 0 18
51112: PPUSH
51113: CALL_OW 181
// end ; continue ;
51117: GO 50769
// end ; if not cleaners or not tmp in cleaners then
51119: LD_VAR 0 6
51123: NOT
51124: PUSH
51125: LD_VAR 0 13
51129: PUSH
51130: LD_VAR 0 6
51134: IN
51135: NOT
51136: OR
51137: IFFALSE 51444
// begin if dep then
51139: LD_VAR 0 17
51143: IFFALSE 51279
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51145: LD_ADDR_VAR 0 16
51149: PUSH
51150: LD_VAR 0 17
51154: PUSH
51155: LD_INT 1
51157: ARRAY
51158: PPUSH
51159: CALL_OW 250
51163: PPUSH
51164: LD_VAR 0 17
51168: PUSH
51169: LD_INT 1
51171: ARRAY
51172: PPUSH
51173: CALL_OW 254
51177: PPUSH
51178: LD_INT 5
51180: PPUSH
51181: CALL_OW 272
51185: PUSH
51186: LD_VAR 0 17
51190: PUSH
51191: LD_INT 1
51193: ARRAY
51194: PPUSH
51195: CALL_OW 251
51199: PPUSH
51200: LD_VAR 0 17
51204: PUSH
51205: LD_INT 1
51207: ARRAY
51208: PPUSH
51209: CALL_OW 254
51213: PPUSH
51214: LD_INT 5
51216: PPUSH
51217: CALL_OW 273
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51226: LD_VAR 0 16
51230: PUSH
51231: LD_INT 1
51233: ARRAY
51234: PPUSH
51235: LD_VAR 0 16
51239: PUSH
51240: LD_INT 2
51242: ARRAY
51243: PPUSH
51244: CALL_OW 488
51248: IFFALSE 51279
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51250: LD_VAR 0 13
51254: PPUSH
51255: LD_VAR 0 16
51259: PUSH
51260: LD_INT 1
51262: ARRAY
51263: PPUSH
51264: LD_VAR 0 16
51268: PUSH
51269: LD_INT 2
51271: ARRAY
51272: PPUSH
51273: CALL_OW 111
// continue ;
51277: GO 50769
// end ; end ; r := GetDir ( tmp ) ;
51279: LD_ADDR_VAR 0 15
51283: PUSH
51284: LD_VAR 0 13
51288: PPUSH
51289: CALL_OW 254
51293: ST_TO_ADDR
// if r = 5 then
51294: LD_VAR 0 15
51298: PUSH
51299: LD_INT 5
51301: EQUAL
51302: IFFALSE 51312
// r := 0 ;
51304: LD_ADDR_VAR 0 15
51308: PUSH
51309: LD_INT 0
51311: ST_TO_ADDR
// for j = r to 5 do
51312: LD_ADDR_VAR 0 10
51316: PUSH
51317: DOUBLE
51318: LD_VAR 0 15
51322: DEC
51323: ST_TO_ADDR
51324: LD_INT 5
51326: PUSH
51327: FOR_TO
51328: IFFALSE 51442
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51330: LD_ADDR_VAR 0 11
51334: PUSH
51335: LD_VAR 0 13
51339: PPUSH
51340: CALL_OW 250
51344: PPUSH
51345: LD_VAR 0 10
51349: PPUSH
51350: LD_INT 2
51352: PPUSH
51353: CALL_OW 272
51357: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51358: LD_ADDR_VAR 0 12
51362: PUSH
51363: LD_VAR 0 13
51367: PPUSH
51368: CALL_OW 251
51372: PPUSH
51373: LD_VAR 0 10
51377: PPUSH
51378: LD_INT 2
51380: PPUSH
51381: CALL_OW 273
51385: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51386: LD_VAR 0 11
51390: PPUSH
51391: LD_VAR 0 12
51395: PPUSH
51396: CALL_OW 488
51400: PUSH
51401: LD_VAR 0 11
51405: PPUSH
51406: LD_VAR 0 12
51410: PPUSH
51411: CALL_OW 428
51415: NOT
51416: AND
51417: IFFALSE 51440
// begin ComMoveXY ( tmp , _x , _y ) ;
51419: LD_VAR 0 13
51423: PPUSH
51424: LD_VAR 0 11
51428: PPUSH
51429: LD_VAR 0 12
51433: PPUSH
51434: CALL_OW 111
// break ;
51438: GO 51442
// end ; end ;
51440: GO 51327
51442: POP
51443: POP
// end ; end ;
51444: GO 50769
51446: POP
51447: POP
// end ;
51448: LD_VAR 0 8
51452: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51453: LD_INT 0
51455: PPUSH
// result := true ;
51456: LD_ADDR_VAR 0 3
51460: PUSH
51461: LD_INT 1
51463: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51464: LD_VAR 0 2
51468: PUSH
51469: LD_INT 24
51471: DOUBLE
51472: EQUAL
51473: IFTRUE 51483
51475: LD_INT 33
51477: DOUBLE
51478: EQUAL
51479: IFTRUE 51483
51481: GO 51508
51483: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51484: LD_ADDR_VAR 0 3
51488: PUSH
51489: LD_INT 32
51491: PPUSH
51492: LD_VAR 0 1
51496: PPUSH
51497: CALL_OW 321
51501: PUSH
51502: LD_INT 2
51504: EQUAL
51505: ST_TO_ADDR
51506: GO 51824
51508: LD_INT 20
51510: DOUBLE
51511: EQUAL
51512: IFTRUE 51516
51514: GO 51541
51516: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51517: LD_ADDR_VAR 0 3
51521: PUSH
51522: LD_INT 6
51524: PPUSH
51525: LD_VAR 0 1
51529: PPUSH
51530: CALL_OW 321
51534: PUSH
51535: LD_INT 2
51537: EQUAL
51538: ST_TO_ADDR
51539: GO 51824
51541: LD_INT 22
51543: DOUBLE
51544: EQUAL
51545: IFTRUE 51555
51547: LD_INT 36
51549: DOUBLE
51550: EQUAL
51551: IFTRUE 51555
51553: GO 51580
51555: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51556: LD_ADDR_VAR 0 3
51560: PUSH
51561: LD_INT 15
51563: PPUSH
51564: LD_VAR 0 1
51568: PPUSH
51569: CALL_OW 321
51573: PUSH
51574: LD_INT 2
51576: EQUAL
51577: ST_TO_ADDR
51578: GO 51824
51580: LD_INT 30
51582: DOUBLE
51583: EQUAL
51584: IFTRUE 51588
51586: GO 51613
51588: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51589: LD_ADDR_VAR 0 3
51593: PUSH
51594: LD_INT 20
51596: PPUSH
51597: LD_VAR 0 1
51601: PPUSH
51602: CALL_OW 321
51606: PUSH
51607: LD_INT 2
51609: EQUAL
51610: ST_TO_ADDR
51611: GO 51824
51613: LD_INT 28
51615: DOUBLE
51616: EQUAL
51617: IFTRUE 51627
51619: LD_INT 21
51621: DOUBLE
51622: EQUAL
51623: IFTRUE 51627
51625: GO 51652
51627: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51628: LD_ADDR_VAR 0 3
51632: PUSH
51633: LD_INT 21
51635: PPUSH
51636: LD_VAR 0 1
51640: PPUSH
51641: CALL_OW 321
51645: PUSH
51646: LD_INT 2
51648: EQUAL
51649: ST_TO_ADDR
51650: GO 51824
51652: LD_INT 16
51654: DOUBLE
51655: EQUAL
51656: IFTRUE 51660
51658: GO 51685
51660: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51661: LD_ADDR_VAR 0 3
51665: PUSH
51666: LD_INT 84
51668: PPUSH
51669: LD_VAR 0 1
51673: PPUSH
51674: CALL_OW 321
51678: PUSH
51679: LD_INT 2
51681: EQUAL
51682: ST_TO_ADDR
51683: GO 51824
51685: LD_INT 19
51687: DOUBLE
51688: EQUAL
51689: IFTRUE 51699
51691: LD_INT 23
51693: DOUBLE
51694: EQUAL
51695: IFTRUE 51699
51697: GO 51724
51699: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51700: LD_ADDR_VAR 0 3
51704: PUSH
51705: LD_INT 83
51707: PPUSH
51708: LD_VAR 0 1
51712: PPUSH
51713: CALL_OW 321
51717: PUSH
51718: LD_INT 2
51720: EQUAL
51721: ST_TO_ADDR
51722: GO 51824
51724: LD_INT 17
51726: DOUBLE
51727: EQUAL
51728: IFTRUE 51732
51730: GO 51757
51732: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51733: LD_ADDR_VAR 0 3
51737: PUSH
51738: LD_INT 39
51740: PPUSH
51741: LD_VAR 0 1
51745: PPUSH
51746: CALL_OW 321
51750: PUSH
51751: LD_INT 2
51753: EQUAL
51754: ST_TO_ADDR
51755: GO 51824
51757: LD_INT 18
51759: DOUBLE
51760: EQUAL
51761: IFTRUE 51765
51763: GO 51790
51765: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51766: LD_ADDR_VAR 0 3
51770: PUSH
51771: LD_INT 40
51773: PPUSH
51774: LD_VAR 0 1
51778: PPUSH
51779: CALL_OW 321
51783: PUSH
51784: LD_INT 2
51786: EQUAL
51787: ST_TO_ADDR
51788: GO 51824
51790: LD_INT 27
51792: DOUBLE
51793: EQUAL
51794: IFTRUE 51798
51796: GO 51823
51798: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51799: LD_ADDR_VAR 0 3
51803: PUSH
51804: LD_INT 35
51806: PPUSH
51807: LD_VAR 0 1
51811: PPUSH
51812: CALL_OW 321
51816: PUSH
51817: LD_INT 2
51819: EQUAL
51820: ST_TO_ADDR
51821: GO 51824
51823: POP
// end ;
51824: LD_VAR 0 3
51828: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51829: LD_INT 0
51831: PPUSH
51832: PPUSH
51833: PPUSH
51834: PPUSH
51835: PPUSH
51836: PPUSH
51837: PPUSH
51838: PPUSH
51839: PPUSH
51840: PPUSH
51841: PPUSH
// result := false ;
51842: LD_ADDR_VAR 0 6
51846: PUSH
51847: LD_INT 0
51849: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51850: LD_VAR 0 1
51854: NOT
51855: PUSH
51856: LD_VAR 0 1
51860: PPUSH
51861: CALL_OW 266
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: IN
51876: NOT
51877: OR
51878: PUSH
51879: LD_VAR 0 2
51883: NOT
51884: OR
51885: PUSH
51886: LD_VAR 0 5
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: LD_INT 3
51902: PUSH
51903: LD_INT 4
51905: PUSH
51906: LD_INT 5
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: IN
51917: NOT
51918: OR
51919: PUSH
51920: LD_VAR 0 3
51924: PPUSH
51925: LD_VAR 0 4
51929: PPUSH
51930: CALL_OW 488
51934: NOT
51935: OR
51936: IFFALSE 51940
// exit ;
51938: GO 52676
// side := GetSide ( depot ) ;
51940: LD_ADDR_VAR 0 9
51944: PUSH
51945: LD_VAR 0 1
51949: PPUSH
51950: CALL_OW 255
51954: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51955: LD_VAR 0 9
51959: PPUSH
51960: LD_VAR 0 2
51964: PPUSH
51965: CALL 51453 0 2
51969: NOT
51970: IFFALSE 51974
// exit ;
51972: GO 52676
// pom := GetBase ( depot ) ;
51974: LD_ADDR_VAR 0 10
51978: PUSH
51979: LD_VAR 0 1
51983: PPUSH
51984: CALL_OW 274
51988: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51989: LD_ADDR_VAR 0 11
51993: PUSH
51994: LD_VAR 0 2
51998: PPUSH
51999: LD_VAR 0 1
52003: PPUSH
52004: CALL_OW 248
52008: PPUSH
52009: CALL_OW 450
52013: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52014: LD_VAR 0 10
52018: PPUSH
52019: LD_INT 1
52021: PPUSH
52022: CALL_OW 275
52026: PUSH
52027: LD_VAR 0 11
52031: PUSH
52032: LD_INT 1
52034: ARRAY
52035: GREATEREQUAL
52036: PUSH
52037: LD_VAR 0 10
52041: PPUSH
52042: LD_INT 2
52044: PPUSH
52045: CALL_OW 275
52049: PUSH
52050: LD_VAR 0 11
52054: PUSH
52055: LD_INT 2
52057: ARRAY
52058: GREATEREQUAL
52059: AND
52060: PUSH
52061: LD_VAR 0 10
52065: PPUSH
52066: LD_INT 3
52068: PPUSH
52069: CALL_OW 275
52073: PUSH
52074: LD_VAR 0 11
52078: PUSH
52079: LD_INT 3
52081: ARRAY
52082: GREATEREQUAL
52083: AND
52084: NOT
52085: IFFALSE 52089
// exit ;
52087: GO 52676
// if GetBType ( depot ) = b_depot then
52089: LD_VAR 0 1
52093: PPUSH
52094: CALL_OW 266
52098: PUSH
52099: LD_INT 0
52101: EQUAL
52102: IFFALSE 52114
// dist := 28 else
52104: LD_ADDR_VAR 0 14
52108: PUSH
52109: LD_INT 28
52111: ST_TO_ADDR
52112: GO 52122
// dist := 36 ;
52114: LD_ADDR_VAR 0 14
52118: PUSH
52119: LD_INT 36
52121: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52122: LD_VAR 0 1
52126: PPUSH
52127: LD_VAR 0 3
52131: PPUSH
52132: LD_VAR 0 4
52136: PPUSH
52137: CALL_OW 297
52141: PUSH
52142: LD_VAR 0 14
52146: GREATER
52147: IFFALSE 52151
// exit ;
52149: GO 52676
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52151: LD_ADDR_VAR 0 12
52155: PUSH
52156: LD_VAR 0 2
52160: PPUSH
52161: LD_VAR 0 3
52165: PPUSH
52166: LD_VAR 0 4
52170: PPUSH
52171: LD_VAR 0 5
52175: PPUSH
52176: LD_VAR 0 1
52180: PPUSH
52181: CALL_OW 248
52185: PPUSH
52186: LD_INT 0
52188: PPUSH
52189: CALL 52681 0 6
52193: ST_TO_ADDR
// if not hexes then
52194: LD_VAR 0 12
52198: NOT
52199: IFFALSE 52203
// exit ;
52201: GO 52676
// hex := GetHexInfo ( x , y ) ;
52203: LD_ADDR_VAR 0 15
52207: PUSH
52208: LD_VAR 0 3
52212: PPUSH
52213: LD_VAR 0 4
52217: PPUSH
52218: CALL_OW 546
52222: ST_TO_ADDR
// if hex [ 1 ] then
52223: LD_VAR 0 15
52227: PUSH
52228: LD_INT 1
52230: ARRAY
52231: IFFALSE 52235
// exit ;
52233: GO 52676
// height := hex [ 2 ] ;
52235: LD_ADDR_VAR 0 13
52239: PUSH
52240: LD_VAR 0 15
52244: PUSH
52245: LD_INT 2
52247: ARRAY
52248: ST_TO_ADDR
// for i = 1 to hexes do
52249: LD_ADDR_VAR 0 7
52253: PUSH
52254: DOUBLE
52255: LD_INT 1
52257: DEC
52258: ST_TO_ADDR
52259: LD_VAR 0 12
52263: PUSH
52264: FOR_TO
52265: IFFALSE 52595
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52267: LD_VAR 0 12
52271: PUSH
52272: LD_VAR 0 7
52276: ARRAY
52277: PUSH
52278: LD_INT 1
52280: ARRAY
52281: PPUSH
52282: LD_VAR 0 12
52286: PUSH
52287: LD_VAR 0 7
52291: ARRAY
52292: PUSH
52293: LD_INT 2
52295: ARRAY
52296: PPUSH
52297: CALL_OW 488
52301: NOT
52302: PUSH
52303: LD_VAR 0 12
52307: PUSH
52308: LD_VAR 0 7
52312: ARRAY
52313: PUSH
52314: LD_INT 1
52316: ARRAY
52317: PPUSH
52318: LD_VAR 0 12
52322: PUSH
52323: LD_VAR 0 7
52327: ARRAY
52328: PUSH
52329: LD_INT 2
52331: ARRAY
52332: PPUSH
52333: CALL_OW 428
52337: PUSH
52338: LD_INT 0
52340: GREATER
52341: OR
52342: PUSH
52343: LD_VAR 0 12
52347: PUSH
52348: LD_VAR 0 7
52352: ARRAY
52353: PUSH
52354: LD_INT 1
52356: ARRAY
52357: PPUSH
52358: LD_VAR 0 12
52362: PUSH
52363: LD_VAR 0 7
52367: ARRAY
52368: PUSH
52369: LD_INT 2
52371: ARRAY
52372: PPUSH
52373: CALL_OW 351
52377: OR
52378: IFFALSE 52384
// exit ;
52380: POP
52381: POP
52382: GO 52676
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52384: LD_ADDR_VAR 0 8
52388: PUSH
52389: LD_VAR 0 12
52393: PUSH
52394: LD_VAR 0 7
52398: ARRAY
52399: PUSH
52400: LD_INT 1
52402: ARRAY
52403: PPUSH
52404: LD_VAR 0 12
52408: PUSH
52409: LD_VAR 0 7
52413: ARRAY
52414: PUSH
52415: LD_INT 2
52417: ARRAY
52418: PPUSH
52419: CALL_OW 546
52423: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52424: LD_VAR 0 8
52428: PUSH
52429: LD_INT 1
52431: ARRAY
52432: PUSH
52433: LD_VAR 0 8
52437: PUSH
52438: LD_INT 2
52440: ARRAY
52441: PUSH
52442: LD_VAR 0 13
52446: PUSH
52447: LD_INT 2
52449: PLUS
52450: GREATER
52451: OR
52452: PUSH
52453: LD_VAR 0 8
52457: PUSH
52458: LD_INT 2
52460: ARRAY
52461: PUSH
52462: LD_VAR 0 13
52466: PUSH
52467: LD_INT 2
52469: MINUS
52470: LESS
52471: OR
52472: PUSH
52473: LD_VAR 0 8
52477: PUSH
52478: LD_INT 3
52480: ARRAY
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: LD_INT 8
52487: PUSH
52488: LD_INT 9
52490: PUSH
52491: LD_INT 10
52493: PUSH
52494: LD_INT 11
52496: PUSH
52497: LD_INT 12
52499: PUSH
52500: LD_INT 13
52502: PUSH
52503: LD_INT 16
52505: PUSH
52506: LD_INT 17
52508: PUSH
52509: LD_INT 18
52511: PUSH
52512: LD_INT 19
52514: PUSH
52515: LD_INT 20
52517: PUSH
52518: LD_INT 21
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: IN
52536: NOT
52537: OR
52538: PUSH
52539: LD_VAR 0 8
52543: PUSH
52544: LD_INT 5
52546: ARRAY
52547: NOT
52548: OR
52549: PUSH
52550: LD_VAR 0 8
52554: PUSH
52555: LD_INT 6
52557: ARRAY
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: LD_INT 7
52567: PUSH
52568: LD_INT 9
52570: PUSH
52571: LD_INT 10
52573: PUSH
52574: LD_INT 11
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: IN
52585: NOT
52586: OR
52587: IFFALSE 52593
// exit ;
52589: POP
52590: POP
52591: GO 52676
// end ;
52593: GO 52264
52595: POP
52596: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52597: LD_VAR 0 9
52601: PPUSH
52602: LD_VAR 0 3
52606: PPUSH
52607: LD_VAR 0 4
52611: PPUSH
52612: LD_INT 20
52614: PPUSH
52615: CALL 44628 0 4
52619: PUSH
52620: LD_INT 4
52622: ARRAY
52623: IFFALSE 52627
// exit ;
52625: GO 52676
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52627: LD_VAR 0 2
52631: PUSH
52632: LD_INT 29
52634: PUSH
52635: LD_INT 30
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: IN
52642: PUSH
52643: LD_VAR 0 3
52647: PPUSH
52648: LD_VAR 0 4
52652: PPUSH
52653: LD_VAR 0 9
52657: PPUSH
52658: CALL_OW 440
52662: NOT
52663: AND
52664: IFFALSE 52668
// exit ;
52666: GO 52676
// result := true ;
52668: LD_ADDR_VAR 0 6
52672: PUSH
52673: LD_INT 1
52675: ST_TO_ADDR
// end ;
52676: LD_VAR 0 6
52680: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52681: LD_INT 0
52683: PPUSH
52684: PPUSH
52685: PPUSH
52686: PPUSH
52687: PPUSH
52688: PPUSH
52689: PPUSH
52690: PPUSH
52691: PPUSH
52692: PPUSH
52693: PPUSH
52694: PPUSH
52695: PPUSH
52696: PPUSH
52697: PPUSH
52698: PPUSH
52699: PPUSH
52700: PPUSH
52701: PPUSH
52702: PPUSH
52703: PPUSH
52704: PPUSH
52705: PPUSH
52706: PPUSH
52707: PPUSH
52708: PPUSH
52709: PPUSH
52710: PPUSH
52711: PPUSH
52712: PPUSH
52713: PPUSH
52714: PPUSH
52715: PPUSH
52716: PPUSH
52717: PPUSH
52718: PPUSH
52719: PPUSH
52720: PPUSH
52721: PPUSH
52722: PPUSH
52723: PPUSH
52724: PPUSH
52725: PPUSH
52726: PPUSH
52727: PPUSH
52728: PPUSH
52729: PPUSH
52730: PPUSH
52731: PPUSH
52732: PPUSH
52733: PPUSH
52734: PPUSH
52735: PPUSH
52736: PPUSH
52737: PPUSH
52738: PPUSH
52739: PPUSH
52740: PPUSH
// result = [ ] ;
52741: LD_ADDR_VAR 0 7
52745: PUSH
52746: EMPTY
52747: ST_TO_ADDR
// temp_list = [ ] ;
52748: LD_ADDR_VAR 0 9
52752: PUSH
52753: EMPTY
52754: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52755: LD_VAR 0 4
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 2
52768: PUSH
52769: LD_INT 3
52771: PUSH
52772: LD_INT 4
52774: PUSH
52775: LD_INT 5
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: IN
52786: NOT
52787: PUSH
52788: LD_VAR 0 1
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: IN
52803: PUSH
52804: LD_VAR 0 5
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: LD_INT 2
52814: PUSH
52815: LD_INT 3
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: LIST
52822: IN
52823: NOT
52824: AND
52825: OR
52826: IFFALSE 52830
// exit ;
52828: GO 71221
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52830: LD_VAR 0 1
52834: PUSH
52835: LD_INT 6
52837: PUSH
52838: LD_INT 7
52840: PUSH
52841: LD_INT 8
52843: PUSH
52844: LD_INT 13
52846: PUSH
52847: LD_INT 12
52849: PUSH
52850: LD_INT 15
52852: PUSH
52853: LD_INT 11
52855: PUSH
52856: LD_INT 14
52858: PUSH
52859: LD_INT 10
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: IN
52873: IFFALSE 52883
// btype = b_lab ;
52875: LD_ADDR_VAR 0 1
52879: PUSH
52880: LD_INT 6
52882: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52883: LD_VAR 0 6
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: LIST
52901: IN
52902: NOT
52903: PUSH
52904: LD_VAR 0 1
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: LD_INT 2
52917: PUSH
52918: LD_INT 3
52920: PUSH
52921: LD_INT 6
52923: PUSH
52924: LD_INT 36
52926: PUSH
52927: LD_INT 4
52929: PUSH
52930: LD_INT 5
52932: PUSH
52933: LD_INT 31
52935: PUSH
52936: LD_INT 32
52938: PUSH
52939: LD_INT 33
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: IN
52955: NOT
52956: PUSH
52957: LD_VAR 0 6
52961: PUSH
52962: LD_INT 1
52964: EQUAL
52965: AND
52966: OR
52967: PUSH
52968: LD_VAR 0 1
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: LD_INT 3
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: IN
52983: NOT
52984: PUSH
52985: LD_VAR 0 6
52989: PUSH
52990: LD_INT 2
52992: EQUAL
52993: AND
52994: OR
52995: IFFALSE 53005
// mode = 0 ;
52997: LD_ADDR_VAR 0 6
53001: PUSH
53002: LD_INT 0
53004: ST_TO_ADDR
// case mode of 0 :
53005: LD_VAR 0 6
53009: PUSH
53010: LD_INT 0
53012: DOUBLE
53013: EQUAL
53014: IFTRUE 53018
53016: GO 64471
53018: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53019: LD_ADDR_VAR 0 11
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: LD_INT 1
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: LD_INT 2
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 2
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: LD_INT 2
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: NEG
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: LD_INT 3
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 3
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: LD_INT 2
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53212: LD_ADDR_VAR 0 12
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 2
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: LD_INT 1
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 3
53369: NEG
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 3
53380: NEG
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53408: LD_ADDR_VAR 0 13
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: LD_INT 2
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 2
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: LD_INT 2
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: LD_INT 2
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 2
53555: NEG
53556: PUSH
53557: LD_INT 3
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 3
53567: NEG
53568: PUSH
53569: LD_INT 2
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 3
53579: NEG
53580: PUSH
53581: LD_INT 3
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53607: LD_ADDR_VAR 0 14
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: LD_INT 2
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: LD_INT 2
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: LD_INT 2
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: LD_INT 2
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: LD_INT 3
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 3
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53803: LD_ADDR_VAR 0 15
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 2
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 2
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 2
53926: NEG
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 2
53937: NEG
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 2
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 3
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 3
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53996: LD_ADDR_VAR 0 16
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: LD_INT 1
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: LD_INT 2
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 2
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: LD_INT 2
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 2
54119: NEG
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 2
54131: NEG
54132: PUSH
54133: LD_INT 2
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 3
54143: PUSH
54144: LD_INT 2
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 3
54153: PUSH
54154: LD_INT 3
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 2
54163: PUSH
54164: LD_INT 3
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54189: LD_ADDR_VAR 0 17
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: LD_INT 1
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: LD_INT 2
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 2
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 2
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 2
54324: PUSH
54325: LD_INT 2
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 2
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 2
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 2
54365: NEG
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 2
54376: NEG
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 2
54388: NEG
54389: PUSH
54390: LD_INT 2
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54419: LD_ADDR_VAR 0 18
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 2
54554: PUSH
54555: LD_INT 2
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: LD_INT 2
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 2
54618: NEG
54619: PUSH
54620: LD_INT 2
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54649: LD_ADDR_VAR 0 19
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: LD_INT 2
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 2
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 2
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 2
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: LD_INT 2
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: LD_INT 2
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 2
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: NEG
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 2
54836: NEG
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 2
54848: NEG
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54879: LD_ADDR_VAR 0 20
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: LD_INT 2
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 2
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 2
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 2
55055: NEG
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55109: LD_ADDR_VAR 0 21
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: LD_INT 2
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 2
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 2
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 2
55285: NEG
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55339: LD_ADDR_VAR 0 22
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 2
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 2
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 2
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: LD_INT 2
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: LD_INT 2
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 2
55526: NEG
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 2
55538: NEG
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55569: LD_ADDR_VAR 0 23
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: LD_INT 2
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: LD_INT 2
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: NEG
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 2
55756: NEG
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 2
55768: NEG
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 2
55780: NEG
55781: PUSH
55782: LD_INT 3
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 3
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 2
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55849: LD_ADDR_VAR 0 24
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: LD_INT 2
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: LD_INT 2
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 2
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 2
55984: PUSH
55985: LD_INT 2
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 2
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 2
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: NEG
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 2
56036: NEG
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: LD_INT 2
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 2
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 3
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 3
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56125: LD_ADDR_VAR 0 25
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: LD_INT 1
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: NEG
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: LD_INT 2
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 2
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 2
56250: PUSH
56251: LD_INT 1
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 2
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: LD_INT 2
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: LD_INT 2
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 2
56301: NEG
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 2
56312: NEG
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 2
56324: NEG
56325: PUSH
56326: LD_INT 2
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 3
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 3
56346: PUSH
56347: LD_INT 2
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: PUSH
56357: LD_INT 3
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: LD_INT 3
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56399: LD_ADDR_VAR 0 26
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 2
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 2
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 2
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 2
56575: NEG
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: NEG
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: LD_INT 2
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: LD_INT 3
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: LD_INT 3
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 2
56641: NEG
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56675: LD_ADDR_VAR 0 27
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: LD_INT 2
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: LD_INT 2
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 2
56810: PUSH
56811: LD_INT 2
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: LD_INT 2
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 2
56851: NEG
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 2
56862: NEG
56863: PUSH
56864: LD_INT 1
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: LD_INT 2
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: LD_INT 2
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 3
56908: NEG
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 3
56920: NEG
56921: PUSH
56922: LD_INT 2
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56955: LD_ADDR_VAR 0 28
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: LD_INT 2
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 2
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 2
57090: PUSH
57091: LD_INT 2
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: NEG
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 2
57154: NEG
57155: PUSH
57156: LD_INT 2
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 2
57166: NEG
57167: PUSH
57168: LD_INT 3
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: LD_INT 3
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 3
57190: NEG
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 3
57202: NEG
57203: PUSH
57204: LD_INT 2
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57237: LD_ADDR_VAR 0 29
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: LD_INT 1
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: LD_INT 2
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: LD_INT 2
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 2
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: LD_INT 2
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 2
57403: NEG
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: LD_INT 2
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: LD_INT 3
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 3
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: LD_INT 3
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: LD_INT 2
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 3
57481: NEG
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57516: LD_ADDR_VAR 0 30
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 2
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 2
57651: PUSH
57652: LD_INT 2
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 1
57661: PUSH
57662: LD_INT 2
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: NEG
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 2
57693: NEG
57694: PUSH
57695: LD_INT 1
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: NEG
57706: PUSH
57707: LD_INT 3
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 1
57717: PUSH
57718: LD_INT 2
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 3
57728: PUSH
57729: LD_INT 2
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 2
57738: PUSH
57739: LD_INT 3
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 3
57759: NEG
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57794: LD_ADDR_VAR 0 31
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: LD_INT 1
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: LD_INT 1
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: LD_INT 2
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 2
57918: PUSH
57919: LD_INT 2
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 1
57928: PUSH
57929: LD_INT 2
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 2
57959: NEG
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 2
57971: NEG
57972: PUSH
57973: LD_INT 2
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 2
57983: NEG
57984: PUSH
57985: LD_INT 3
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 3
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: LD_INT 3
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 3
58037: NEG
58038: PUSH
58039: LD_INT 2
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58072: LD_ADDR_VAR 0 32
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 0
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: LD_INT 0
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 0
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: LD_INT 0
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: LD_INT 2
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: LD_INT 2
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 2
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 2
58197: PUSH
58198: LD_INT 2
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: LD_INT 2
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 2
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: NEG
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 2
58249: NEG
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 1
58261: NEG
58262: PUSH
58263: LD_INT 3
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: LD_INT 2
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 3
58284: PUSH
58285: LD_INT 2
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 2
58294: PUSH
58295: LD_INT 3
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: LD_INT 1
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 3
58315: NEG
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58350: LD_ADDR_VAR 0 33
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: LD_INT 1
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: NEG
58409: PUSH
58410: LD_INT 0
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 1
58431: NEG
58432: PUSH
58433: LD_INT 2
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 2
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: LD_INT 2
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: LD_INT 2
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 2
58516: NEG
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 2
58528: NEG
58529: PUSH
58530: LD_INT 2
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 2
58540: NEG
58541: PUSH
58542: LD_INT 3
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 2
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 3
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: LD_INT 3
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: NEG
58584: PUSH
58585: LD_INT 2
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 3
58594: NEG
58595: PUSH
58596: LD_INT 2
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58629: LD_ADDR_VAR 0 34
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: NEG
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: LD_INT 2
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: LD_INT 2
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 2
58754: PUSH
58755: LD_INT 2
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 2
58785: NEG
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 2
58796: NEG
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 2
58808: NEG
58809: PUSH
58810: LD_INT 2
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: LD_INT 3
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: LD_INT 2
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 3
58843: PUSH
58844: LD_INT 2
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: LD_INT 3
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 2
58863: NEG
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 3
58874: NEG
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58909: LD_ADDR_VAR 0 35
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 1
58937: PUSH
58938: LD_INT 0
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 1
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 0
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 1
58967: NEG
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 2
59000: NEG
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59021: LD_ADDR_VAR 0 36
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 1
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 1
59090: NEG
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: PUSH
59115: LD_INT 2
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59133: LD_ADDR_VAR 0 37
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 1
59214: PUSH
59215: LD_INT 1
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59245: LD_ADDR_VAR 0 38
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 1
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 1
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: LD_INT 1
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: LD_INT 1
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 2
59326: PUSH
59327: LD_INT 1
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 2
59336: NEG
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59357: LD_ADDR_VAR 0 39
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 1
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: LD_INT 1
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: LD_INT 2
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: LD_INT 2
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59469: LD_ADDR_VAR 0 40
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: LD_INT 1
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: LD_INT 1
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 1
59527: NEG
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: LD_INT 1
59553: NEG
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 1
59561: NEG
59562: PUSH
59563: LD_INT 1
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59581: LD_ADDR_VAR 0 41
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: LD_INT 1
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: LD_INT 2
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 2
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 2
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 2
59705: PUSH
59706: LD_INT 2
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 1
59715: PUSH
59716: LD_INT 2
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 2
59736: NEG
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 2
59747: NEG
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 2
59759: NEG
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 2
59771: NEG
59772: PUSH
59773: LD_INT 3
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 3
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 3
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 3
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 3
59824: PUSH
59825: LD_INT 3
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 2
59834: PUSH
59835: LD_INT 3
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 2
59844: NEG
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 3
59855: NEG
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 3
59866: NEG
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 3
59878: NEG
59879: PUSH
59880: LD_INT 2
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 3
59890: NEG
59891: PUSH
59892: LD_INT 3
59894: NEG
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59931: LD_ADDR_VAR 0 42
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 0
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 1
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 1
60012: NEG
60013: PUSH
60014: LD_INT 2
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: LD_INT 2
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 1
60035: PUSH
60036: LD_INT 1
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: LD_INT 1
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: LD_INT 2
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: LD_INT 2
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 0
60076: PUSH
60077: LD_INT 2
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 2
60097: NEG
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 2
60109: NEG
60110: PUSH
60111: LD_INT 2
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: LD_INT 3
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: PUSH
60135: LD_INT 3
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: LD_INT 3
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: PUSH
60157: LD_INT 2
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 3
60167: PUSH
60168: LD_INT 2
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 3
60177: PUSH
60178: LD_INT 3
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 2
60187: PUSH
60188: LD_INT 3
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: LD_INT 3
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: LD_INT 3
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: LD_INT 2
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 3
60228: NEG
60229: PUSH
60230: LD_INT 2
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 3
60240: NEG
60241: PUSH
60242: LD_INT 3
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60281: LD_ADDR_VAR 0 43
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: LD_INT 1
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: PUSH
60352: LD_INT 1
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: LD_INT 2
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 1
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 2
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 2
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: LD_INT 2
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: LD_INT 2
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 2
60447: NEG
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 2
60458: NEG
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: LD_INT 3
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: LD_INT 3
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: LD_INT 2
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 2
60504: PUSH
60505: LD_INT 1
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 3
60515: PUSH
60516: LD_INT 0
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 3
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: LD_INT 3
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: LD_INT 3
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 1
60555: NEG
60556: PUSH
60557: LD_INT 2
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 2
60566: NEG
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 3
60577: NEG
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 3
60588: NEG
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60629: LD_ADDR_VAR 0 44
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: LD_INT 1
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 1
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: LD_INT 1
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 1
60710: NEG
60711: PUSH
60712: LD_INT 2
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 2
60753: PUSH
60754: LD_INT 2
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: LD_INT 2
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: LD_INT 1
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: NEG
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 2
60795: NEG
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 2
60807: NEG
60808: PUSH
60809: LD_INT 2
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 2
60819: NEG
60820: PUSH
60821: LD_INT 3
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 2
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 3
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 3
60852: PUSH
60853: LD_INT 1
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 3
60862: PUSH
60863: LD_INT 2
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 3
60872: PUSH
60873: LD_INT 3
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 2
60882: PUSH
60883: LD_INT 3
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 2
60892: NEG
60893: PUSH
60894: LD_INT 1
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 3
60903: NEG
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 3
60914: NEG
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 3
60926: NEG
60927: PUSH
60928: LD_INT 2
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 3
60938: NEG
60939: PUSH
60940: LD_INT 3
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60979: LD_ADDR_VAR 0 45
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: LD_INT 0
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 1
61048: NEG
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 1
61060: NEG
61061: PUSH
61062: LD_INT 2
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: LD_INT 2
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: LD_INT 1
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 2
61094: PUSH
61095: LD_INT 1
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 2
61104: PUSH
61105: LD_INT 2
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: LD_INT 2
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 1
61134: NEG
61135: PUSH
61136: LD_INT 1
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 2
61145: NEG
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 2
61157: NEG
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 2
61169: NEG
61170: PUSH
61171: LD_INT 3
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: NEG
61182: PUSH
61183: LD_INT 3
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: LD_INT 3
61196: NEG
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: LD_INT 2
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 3
61215: PUSH
61216: LD_INT 2
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 3
61225: PUSH
61226: LD_INT 3
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: LD_INT 3
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: LD_INT 3
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: LD_INT 3
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: NEG
61266: PUSH
61267: LD_INT 2
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 3
61276: NEG
61277: PUSH
61278: LD_INT 2
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 3
61288: NEG
61289: PUSH
61290: LD_INT 3
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61329: LD_ADDR_VAR 0 46
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: LD_INT 1
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: PUSH
61358: LD_INT 0
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: LD_INT 1
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: NEG
61388: PUSH
61389: LD_INT 0
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 1
61398: NEG
61399: PUSH
61400: LD_INT 1
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 1
61410: NEG
61411: PUSH
61412: LD_INT 2
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: LD_INT 2
61425: NEG
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: LD_INT 1
61436: NEG
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 2
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 2
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: LD_INT 2
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 0
61474: PUSH
61475: LD_INT 2
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 1
61484: NEG
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 2
61495: NEG
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 2
61506: NEG
61507: PUSH
61508: LD_INT 1
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: LD_INT 3
61522: NEG
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: LD_INT 3
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: LD_INT 2
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 2
61552: PUSH
61553: LD_INT 1
61555: NEG
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 3
61563: PUSH
61564: LD_INT 0
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 3
61573: PUSH
61574: LD_INT 1
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: LD_INT 3
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: LD_INT 3
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 1
61603: NEG
61604: PUSH
61605: LD_INT 2
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 2
61614: NEG
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 3
61625: NEG
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 3
61636: NEG
61637: PUSH
61638: LD_INT 1
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61677: LD_ADDR_VAR 0 47
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 1
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: NEG
61759: PUSH
61760: LD_INT 2
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: LD_INT 2
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 1
61781: PUSH
61782: LD_INT 1
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 2
61792: NEG
61793: PUSH
61794: LD_INT 1
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: NEG
61805: PUSH
61806: LD_INT 2
61808: NEG
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61828: LD_ADDR_VAR 0 48
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: LD_INT 0
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 1
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: LD_INT 1
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: NEG
61910: PUSH
61911: LD_INT 2
61913: NEG
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: LD_INT 2
61924: NEG
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: LD_INT 1
61935: NEG
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 2
61943: PUSH
61944: LD_INT 0
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 2
61953: PUSH
61954: LD_INT 1
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61975: LD_ADDR_VAR 0 49
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 1
62013: PUSH
62014: LD_INT 1
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: LD_INT 1
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 1
62044: NEG
62045: PUSH
62046: LD_INT 1
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 1
62056: PUSH
62057: LD_INT 1
62059: NEG
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 2
62067: PUSH
62068: LD_INT 0
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 2
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 2
62087: PUSH
62088: LD_INT 2
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 1
62097: PUSH
62098: LD_INT 2
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62119: LD_ADDR_VAR 0 50
62123: PUSH
62124: LD_INT 0
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 0
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: PUSH
62190: LD_INT 1
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 2
62200: PUSH
62201: LD_INT 1
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 2
62210: PUSH
62211: LD_INT 2
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 1
62220: PUSH
62221: LD_INT 2
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: LD_INT 2
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 1
62240: NEG
62241: PUSH
62242: LD_INT 1
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62263: LD_ADDR_VAR 0 51
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 1
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: LD_INT 1
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: LD_INT 1
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: LD_INT 1
62336: NEG
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 1
62344: PUSH
62345: LD_INT 2
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 0
62354: PUSH
62355: LD_INT 2
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 1
62364: NEG
62365: PUSH
62366: LD_INT 1
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 2
62375: NEG
62376: PUSH
62377: LD_INT 0
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 2
62386: NEG
62387: PUSH
62388: LD_INT 1
62390: NEG
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62410: LD_ADDR_VAR 0 52
62414: PUSH
62415: LD_INT 0
62417: PUSH
62418: LD_INT 0
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 1
62438: PUSH
62439: LD_INT 0
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: PUSH
62449: LD_INT 1
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 0
62458: PUSH
62459: LD_INT 1
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 1
62468: NEG
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 1
62479: NEG
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: LD_INT 2
62495: NEG
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 1
62503: NEG
62504: PUSH
62505: LD_INT 1
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 2
62514: NEG
62515: PUSH
62516: LD_INT 0
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 2
62525: NEG
62526: PUSH
62527: LD_INT 1
62529: NEG
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 2
62537: NEG
62538: PUSH
62539: LD_INT 2
62541: NEG
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62561: LD_ADDR_VAR 0 53
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 0
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: LD_INT 0
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: LD_INT 1
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: LD_INT 1
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: LD_INT 0
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 1
62630: NEG
62631: PUSH
62632: LD_INT 1
62634: NEG
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 1
62642: NEG
62643: PUSH
62644: LD_INT 2
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 0
62654: PUSH
62655: LD_INT 2
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: PUSH
62666: LD_INT 1
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 2
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 2
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 2
62696: PUSH
62697: LD_INT 2
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: LD_INT 2
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: LD_INT 2
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: LD_INT 1
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 2
62737: NEG
62738: PUSH
62739: LD_INT 0
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 2
62748: NEG
62749: PUSH
62750: LD_INT 1
62752: NEG
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 2
62760: NEG
62761: PUSH
62762: LD_INT 2
62764: NEG
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62791: LD_ADDR_VAR 0 54
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 0
62808: PUSH
62809: LD_INT 1
62811: NEG
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 1
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 1
62829: PUSH
62830: LD_INT 1
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 0
62839: PUSH
62840: LD_INT 1
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 1
62849: NEG
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 1
62860: NEG
62861: PUSH
62862: LD_INT 1
62864: NEG
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 1
62872: NEG
62873: PUSH
62874: LD_INT 2
62876: NEG
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 0
62884: PUSH
62885: LD_INT 2
62887: NEG
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 1
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 2
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 2
62916: PUSH
62917: LD_INT 1
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 2
62926: PUSH
62927: LD_INT 2
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 1
62936: PUSH
62937: LD_INT 2
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: LD_INT 2
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: LD_INT 1
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 2
62967: NEG
62968: PUSH
62969: LD_INT 0
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 2
62978: NEG
62979: PUSH
62980: LD_INT 1
62982: NEG
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 2
62990: NEG
62991: PUSH
62992: LD_INT 2
62994: NEG
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63021: LD_ADDR_VAR 0 55
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: LD_INT 1
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 1
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: LD_INT 1
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 1
63090: NEG
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: NEG
63103: PUSH
63104: LD_INT 2
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: LD_INT 2
63117: NEG
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 1
63125: PUSH
63126: LD_INT 1
63128: NEG
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 2
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 2
63146: PUSH
63147: LD_INT 1
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 2
63156: PUSH
63157: LD_INT 2
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: LD_INT 2
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: LD_INT 2
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 1
63186: NEG
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 2
63197: NEG
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 2
63208: NEG
63209: PUSH
63210: LD_INT 1
63212: NEG
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 2
63220: NEG
63221: PUSH
63222: LD_INT 2
63224: NEG
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63251: LD_ADDR_VAR 0 56
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: LD_INT 0
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 0
63268: PUSH
63269: LD_INT 1
63271: NEG
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 1
63279: PUSH
63280: LD_INT 0
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 1
63289: PUSH
63290: LD_INT 1
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 0
63299: PUSH
63300: LD_INT 1
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: PUSH
63311: LD_INT 0
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: LD_INT 1
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 1
63332: NEG
63333: PUSH
63334: LD_INT 2
63336: NEG
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 0
63344: PUSH
63345: LD_INT 2
63347: NEG
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 1
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 2
63366: PUSH
63367: LD_INT 0
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 2
63376: PUSH
63377: LD_INT 1
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 2
63386: PUSH
63387: LD_INT 2
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 1
63396: PUSH
63397: LD_INT 2
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: LD_INT 2
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 1
63416: NEG
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 2
63427: NEG
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 2
63438: NEG
63439: PUSH
63440: LD_INT 1
63442: NEG
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 2
63450: NEG
63451: PUSH
63452: LD_INT 2
63454: NEG
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63481: LD_ADDR_VAR 0 57
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: LD_INT 0
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 1
63519: PUSH
63520: LD_INT 1
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 0
63529: PUSH
63530: LD_INT 1
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 1
63539: NEG
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 1
63550: NEG
63551: PUSH
63552: LD_INT 1
63554: NEG
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 1
63562: NEG
63563: PUSH
63564: LD_INT 2
63566: NEG
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 0
63574: PUSH
63575: LD_INT 2
63577: NEG
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: LD_INT 1
63588: NEG
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 2
63596: PUSH
63597: LD_INT 0
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 2
63606: PUSH
63607: LD_INT 1
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 2
63616: PUSH
63617: LD_INT 2
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: LD_INT 2
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: LD_INT 2
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 1
63646: NEG
63647: PUSH
63648: LD_INT 1
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 2
63657: NEG
63658: PUSH
63659: LD_INT 0
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 2
63668: NEG
63669: PUSH
63670: LD_INT 1
63672: NEG
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 2
63680: NEG
63681: PUSH
63682: LD_INT 2
63684: NEG
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63711: LD_ADDR_VAR 0 58
63715: PUSH
63716: LD_INT 0
63718: PUSH
63719: LD_INT 0
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: LD_INT 1
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 1
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 1
63749: PUSH
63750: LD_INT 1
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 0
63759: PUSH
63760: LD_INT 1
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 1
63769: NEG
63770: PUSH
63771: LD_INT 0
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 1
63780: NEG
63781: PUSH
63782: LD_INT 1
63784: NEG
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 1
63792: NEG
63793: PUSH
63794: LD_INT 2
63796: NEG
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: LD_INT 2
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 1
63815: PUSH
63816: LD_INT 1
63818: NEG
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 2
63826: PUSH
63827: LD_INT 0
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 2
63836: PUSH
63837: LD_INT 1
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 2
63846: PUSH
63847: LD_INT 2
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 1
63856: PUSH
63857: LD_INT 2
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 0
63866: PUSH
63867: LD_INT 2
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 1
63876: NEG
63877: PUSH
63878: LD_INT 1
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 2
63887: NEG
63888: PUSH
63889: LD_INT 0
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 2
63898: NEG
63899: PUSH
63900: LD_INT 1
63902: NEG
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 2
63910: NEG
63911: PUSH
63912: LD_INT 2
63914: NEG
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63941: LD_ADDR_VAR 0 59
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: LD_INT 0
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 0
63958: PUSH
63959: LD_INT 1
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 1
63969: PUSH
63970: LD_INT 0
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 1
63979: PUSH
63980: LD_INT 1
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 0
63989: PUSH
63990: LD_INT 1
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 1
63999: NEG
64000: PUSH
64001: LD_INT 0
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 1
64010: NEG
64011: PUSH
64012: LD_INT 1
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64029: LD_ADDR_VAR 0 60
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: LD_INT 1
64049: NEG
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 1
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 1
64067: PUSH
64068: LD_INT 1
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: LD_INT 1
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 1
64087: NEG
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: LD_INT 1
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64117: LD_ADDR_VAR 0 61
64121: PUSH
64122: LD_INT 0
64124: PUSH
64125: LD_INT 0
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 0
64134: PUSH
64135: LD_INT 1
64137: NEG
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: LD_INT 0
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 1
64155: PUSH
64156: LD_INT 1
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: LD_INT 1
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 1
64186: NEG
64187: PUSH
64188: LD_INT 1
64190: NEG
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64205: LD_ADDR_VAR 0 62
64209: PUSH
64210: LD_INT 0
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 0
64222: PUSH
64223: LD_INT 1
64225: NEG
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 1
64233: PUSH
64234: LD_INT 0
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 1
64243: PUSH
64244: LD_INT 1
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 0
64253: PUSH
64254: LD_INT 1
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 1
64263: NEG
64264: PUSH
64265: LD_INT 0
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 1
64274: NEG
64275: PUSH
64276: LD_INT 1
64278: NEG
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64293: LD_ADDR_VAR 0 63
64297: PUSH
64298: LD_INT 0
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: LD_INT 1
64313: NEG
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 1
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 1
64331: PUSH
64332: LD_INT 1
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 0
64341: PUSH
64342: LD_INT 1
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 1
64351: NEG
64352: PUSH
64353: LD_INT 0
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 1
64362: NEG
64363: PUSH
64364: LD_INT 1
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64381: LD_ADDR_VAR 0 64
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: LD_INT 1
64401: NEG
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 1
64409: PUSH
64410: LD_INT 0
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 1
64419: PUSH
64420: LD_INT 1
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 1
64439: NEG
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: NEG
64451: PUSH
64452: LD_INT 1
64454: NEG
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: ST_TO_ADDR
// end ; 1 :
64469: GO 70366
64471: LD_INT 1
64473: DOUBLE
64474: EQUAL
64475: IFTRUE 64479
64477: GO 67102
64479: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64480: LD_ADDR_VAR 0 11
64484: PUSH
64485: LD_INT 1
64487: NEG
64488: PUSH
64489: LD_INT 3
64491: NEG
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: LD_INT 3
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: LD_INT 2
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: LIST
64523: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64524: LD_ADDR_VAR 0 12
64528: PUSH
64529: LD_INT 2
64531: PUSH
64532: LD_INT 1
64534: NEG
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 3
64542: PUSH
64543: LD_INT 0
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 3
64552: PUSH
64553: LD_INT 1
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: LIST
64564: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64565: LD_ADDR_VAR 0 13
64569: PUSH
64570: LD_INT 3
64572: PUSH
64573: LD_INT 2
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 3
64582: PUSH
64583: LD_INT 3
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 2
64592: PUSH
64593: LD_INT 3
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: LIST
64604: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64605: LD_ADDR_VAR 0 14
64609: PUSH
64610: LD_INT 1
64612: PUSH
64613: LD_INT 3
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 0
64622: PUSH
64623: LD_INT 3
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: LD_INT 2
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: LIST
64645: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64646: LD_ADDR_VAR 0 15
64650: PUSH
64651: LD_INT 2
64653: NEG
64654: PUSH
64655: LD_INT 1
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 3
64664: NEG
64665: PUSH
64666: LD_INT 0
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 3
64675: NEG
64676: PUSH
64677: LD_INT 1
64679: NEG
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: LIST
64689: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64690: LD_ADDR_VAR 0 16
64694: PUSH
64695: LD_INT 2
64697: NEG
64698: PUSH
64699: LD_INT 3
64701: NEG
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 3
64709: NEG
64710: PUSH
64711: LD_INT 2
64713: NEG
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 3
64721: NEG
64722: PUSH
64723: LD_INT 3
64725: NEG
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: LIST
64735: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64736: LD_ADDR_VAR 0 17
64740: PUSH
64741: LD_INT 1
64743: NEG
64744: PUSH
64745: LD_INT 3
64747: NEG
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 0
64755: PUSH
64756: LD_INT 3
64758: NEG
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 1
64766: PUSH
64767: LD_INT 2
64769: NEG
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: LIST
64779: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64780: LD_ADDR_VAR 0 18
64784: PUSH
64785: LD_INT 2
64787: PUSH
64788: LD_INT 1
64790: NEG
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 3
64798: PUSH
64799: LD_INT 0
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 3
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: LIST
64820: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64821: LD_ADDR_VAR 0 19
64825: PUSH
64826: LD_INT 3
64828: PUSH
64829: LD_INT 2
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 3
64838: PUSH
64839: LD_INT 3
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 2
64848: PUSH
64849: LD_INT 3
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: LIST
64860: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64861: LD_ADDR_VAR 0 20
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: LD_INT 3
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: LD_INT 3
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 1
64888: NEG
64889: PUSH
64890: LD_INT 2
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: LIST
64901: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64902: LD_ADDR_VAR 0 21
64906: PUSH
64907: LD_INT 2
64909: NEG
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 3
64920: NEG
64921: PUSH
64922: LD_INT 0
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 3
64931: NEG
64932: PUSH
64933: LD_INT 1
64935: NEG
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: LIST
64945: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64946: LD_ADDR_VAR 0 22
64950: PUSH
64951: LD_INT 2
64953: NEG
64954: PUSH
64955: LD_INT 3
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 3
64965: NEG
64966: PUSH
64967: LD_INT 2
64969: NEG
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 3
64977: NEG
64978: PUSH
64979: LD_INT 3
64981: NEG
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: LIST
64991: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64992: LD_ADDR_VAR 0 23
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: LD_INT 3
65002: NEG
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 1
65010: NEG
65011: PUSH
65012: LD_INT 4
65014: NEG
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 1
65022: PUSH
65023: LD_INT 3
65025: NEG
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: LIST
65035: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65036: LD_ADDR_VAR 0 24
65040: PUSH
65041: LD_INT 3
65043: PUSH
65044: LD_INT 0
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 3
65053: PUSH
65054: LD_INT 1
65056: NEG
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 4
65064: PUSH
65065: LD_INT 1
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: LIST
65076: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65077: LD_ADDR_VAR 0 25
65081: PUSH
65082: LD_INT 3
65084: PUSH
65085: LD_INT 3
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 4
65094: PUSH
65095: LD_INT 3
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 3
65104: PUSH
65105: LD_INT 4
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: LIST
65116: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65117: LD_ADDR_VAR 0 26
65121: PUSH
65122: LD_INT 0
65124: PUSH
65125: LD_INT 3
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 1
65134: PUSH
65135: LD_INT 4
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 1
65144: NEG
65145: PUSH
65146: LD_INT 3
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: LIST
65157: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65158: LD_ADDR_VAR 0 27
65162: PUSH
65163: LD_INT 3
65165: NEG
65166: PUSH
65167: LD_INT 0
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 3
65176: NEG
65177: PUSH
65178: LD_INT 1
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 4
65187: NEG
65188: PUSH
65189: LD_INT 1
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: LIST
65201: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65202: LD_ADDR_VAR 0 28
65206: PUSH
65207: LD_INT 3
65209: NEG
65210: PUSH
65211: LD_INT 3
65213: NEG
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 3
65221: NEG
65222: PUSH
65223: LD_INT 4
65225: NEG
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 4
65233: NEG
65234: PUSH
65235: LD_INT 3
65237: NEG
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: LIST
65247: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65248: LD_ADDR_VAR 0 29
65252: PUSH
65253: LD_INT 1
65255: NEG
65256: PUSH
65257: LD_INT 3
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 0
65267: PUSH
65268: LD_INT 3
65270: NEG
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 1
65278: PUSH
65279: LD_INT 2
65281: NEG
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 1
65289: NEG
65290: PUSH
65291: LD_INT 4
65293: NEG
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 0
65301: PUSH
65302: LD_INT 4
65304: NEG
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 1
65312: PUSH
65313: LD_INT 3
65315: NEG
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 1
65323: NEG
65324: PUSH
65325: LD_INT 5
65327: NEG
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 0
65335: PUSH
65336: LD_INT 5
65338: NEG
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 1
65346: PUSH
65347: LD_INT 4
65349: NEG
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 1
65357: NEG
65358: PUSH
65359: LD_INT 6
65361: NEG
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 0
65369: PUSH
65370: LD_INT 6
65372: NEG
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 1
65380: PUSH
65381: LD_INT 5
65383: NEG
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65403: LD_ADDR_VAR 0 30
65407: PUSH
65408: LD_INT 2
65410: PUSH
65411: LD_INT 1
65413: NEG
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 3
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 3
65431: PUSH
65432: LD_INT 1
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 3
65441: PUSH
65442: LD_INT 1
65444: NEG
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 4
65452: PUSH
65453: LD_INT 0
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 4
65462: PUSH
65463: LD_INT 1
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 4
65472: PUSH
65473: LD_INT 1
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 5
65483: PUSH
65484: LD_INT 0
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 5
65493: PUSH
65494: LD_INT 1
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 5
65503: PUSH
65504: LD_INT 1
65506: NEG
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 6
65514: PUSH
65515: LD_INT 0
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 6
65524: PUSH
65525: LD_INT 1
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65546: LD_ADDR_VAR 0 31
65550: PUSH
65551: LD_INT 3
65553: PUSH
65554: LD_INT 2
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 3
65563: PUSH
65564: LD_INT 3
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 2
65573: PUSH
65574: LD_INT 3
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 4
65583: PUSH
65584: LD_INT 3
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 4
65593: PUSH
65594: LD_INT 4
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 3
65603: PUSH
65604: LD_INT 4
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 5
65613: PUSH
65614: LD_INT 4
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 5
65623: PUSH
65624: LD_INT 5
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 4
65633: PUSH
65634: LD_INT 5
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 6
65643: PUSH
65644: LD_INT 5
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 6
65653: PUSH
65654: LD_INT 6
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 5
65663: PUSH
65664: LD_INT 6
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65685: LD_ADDR_VAR 0 32
65689: PUSH
65690: LD_INT 1
65692: PUSH
65693: LD_INT 3
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 0
65702: PUSH
65703: LD_INT 3
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 1
65712: NEG
65713: PUSH
65714: LD_INT 2
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 1
65723: PUSH
65724: LD_INT 4
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 0
65733: PUSH
65734: LD_INT 4
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 1
65743: NEG
65744: PUSH
65745: LD_INT 3
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 1
65754: PUSH
65755: LD_INT 5
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 0
65764: PUSH
65765: LD_INT 5
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 1
65774: NEG
65775: PUSH
65776: LD_INT 4
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 1
65785: PUSH
65786: LD_INT 6
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 0
65795: PUSH
65796: LD_INT 6
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 1
65805: NEG
65806: PUSH
65807: LD_INT 5
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65828: LD_ADDR_VAR 0 33
65832: PUSH
65833: LD_INT 2
65835: NEG
65836: PUSH
65837: LD_INT 1
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 3
65846: NEG
65847: PUSH
65848: LD_INT 0
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 3
65857: NEG
65858: PUSH
65859: LD_INT 1
65861: NEG
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 3
65869: NEG
65870: PUSH
65871: LD_INT 1
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 4
65880: NEG
65881: PUSH
65882: LD_INT 0
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 4
65891: NEG
65892: PUSH
65893: LD_INT 1
65895: NEG
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 4
65903: NEG
65904: PUSH
65905: LD_INT 1
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 5
65914: NEG
65915: PUSH
65916: LD_INT 0
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 5
65925: NEG
65926: PUSH
65927: LD_INT 1
65929: NEG
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 5
65937: NEG
65938: PUSH
65939: LD_INT 1
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 6
65948: NEG
65949: PUSH
65950: LD_INT 0
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 6
65959: NEG
65960: PUSH
65961: LD_INT 1
65963: NEG
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65983: LD_ADDR_VAR 0 34
65987: PUSH
65988: LD_INT 2
65990: NEG
65991: PUSH
65992: LD_INT 3
65994: NEG
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 3
66002: NEG
66003: PUSH
66004: LD_INT 2
66006: NEG
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 3
66014: NEG
66015: PUSH
66016: LD_INT 3
66018: NEG
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 3
66026: NEG
66027: PUSH
66028: LD_INT 4
66030: NEG
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 4
66038: NEG
66039: PUSH
66040: LD_INT 3
66042: NEG
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 4
66050: NEG
66051: PUSH
66052: LD_INT 4
66054: NEG
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 4
66062: NEG
66063: PUSH
66064: LD_INT 5
66066: NEG
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 5
66074: NEG
66075: PUSH
66076: LD_INT 4
66078: NEG
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 5
66086: NEG
66087: PUSH
66088: LD_INT 5
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 5
66098: NEG
66099: PUSH
66100: LD_INT 6
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 6
66110: NEG
66111: PUSH
66112: LD_INT 5
66114: NEG
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 6
66122: NEG
66123: PUSH
66124: LD_INT 6
66126: NEG
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66146: LD_ADDR_VAR 0 41
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: LD_INT 2
66156: NEG
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 1
66164: NEG
66165: PUSH
66166: LD_INT 3
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 1
66176: PUSH
66177: LD_INT 2
66179: NEG
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: LIST
66189: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66190: LD_ADDR_VAR 0 42
66194: PUSH
66195: LD_INT 2
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 2
66207: PUSH
66208: LD_INT 1
66210: NEG
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 3
66218: PUSH
66219: LD_INT 1
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: LIST
66230: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66231: LD_ADDR_VAR 0 43
66235: PUSH
66236: LD_INT 2
66238: PUSH
66239: LD_INT 2
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 3
66248: PUSH
66249: LD_INT 2
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 2
66258: PUSH
66259: LD_INT 3
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: LIST
66270: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66271: LD_ADDR_VAR 0 44
66275: PUSH
66276: LD_INT 0
66278: PUSH
66279: LD_INT 2
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 1
66288: PUSH
66289: LD_INT 3
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 1
66298: NEG
66299: PUSH
66300: LD_INT 2
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: LIST
66311: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66312: LD_ADDR_VAR 0 45
66316: PUSH
66317: LD_INT 2
66319: NEG
66320: PUSH
66321: LD_INT 0
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 2
66330: NEG
66331: PUSH
66332: LD_INT 1
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 3
66341: NEG
66342: PUSH
66343: LD_INT 1
66345: NEG
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: LIST
66355: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66356: LD_ADDR_VAR 0 46
66360: PUSH
66361: LD_INT 2
66363: NEG
66364: PUSH
66365: LD_INT 2
66367: NEG
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 2
66375: NEG
66376: PUSH
66377: LD_INT 3
66379: NEG
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 3
66387: NEG
66388: PUSH
66389: LD_INT 2
66391: NEG
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: LIST
66401: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66402: LD_ADDR_VAR 0 47
66406: PUSH
66407: LD_INT 2
66409: NEG
66410: PUSH
66411: LD_INT 3
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 1
66421: NEG
66422: PUSH
66423: LD_INT 3
66425: NEG
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66435: LD_ADDR_VAR 0 48
66439: PUSH
66440: LD_INT 1
66442: PUSH
66443: LD_INT 2
66445: NEG
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 2
66453: PUSH
66454: LD_INT 1
66456: NEG
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66466: LD_ADDR_VAR 0 49
66470: PUSH
66471: LD_INT 3
66473: PUSH
66474: LD_INT 1
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 3
66483: PUSH
66484: LD_INT 2
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66495: LD_ADDR_VAR 0 50
66499: PUSH
66500: LD_INT 2
66502: PUSH
66503: LD_INT 3
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 1
66512: PUSH
66513: LD_INT 3
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66524: LD_ADDR_VAR 0 51
66528: PUSH
66529: LD_INT 1
66531: NEG
66532: PUSH
66533: LD_INT 2
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 2
66542: NEG
66543: PUSH
66544: LD_INT 1
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66555: LD_ADDR_VAR 0 52
66559: PUSH
66560: LD_INT 3
66562: NEG
66563: PUSH
66564: LD_INT 1
66566: NEG
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 3
66574: NEG
66575: PUSH
66576: LD_INT 2
66578: NEG
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66588: LD_ADDR_VAR 0 53
66592: PUSH
66593: LD_INT 1
66595: NEG
66596: PUSH
66597: LD_INT 3
66599: NEG
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: LD_INT 3
66610: NEG
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 1
66618: PUSH
66619: LD_INT 2
66621: NEG
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: LIST
66631: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66632: LD_ADDR_VAR 0 54
66636: PUSH
66637: LD_INT 2
66639: PUSH
66640: LD_INT 1
66642: NEG
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 3
66650: PUSH
66651: LD_INT 0
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 3
66660: PUSH
66661: LD_INT 1
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: LIST
66672: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66673: LD_ADDR_VAR 0 55
66677: PUSH
66678: LD_INT 3
66680: PUSH
66681: LD_INT 2
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 3
66690: PUSH
66691: LD_INT 3
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 2
66700: PUSH
66701: LD_INT 3
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: LIST
66712: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66713: LD_ADDR_VAR 0 56
66717: PUSH
66718: LD_INT 1
66720: PUSH
66721: LD_INT 3
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 0
66730: PUSH
66731: LD_INT 3
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 1
66740: NEG
66741: PUSH
66742: LD_INT 2
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: LIST
66753: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66754: LD_ADDR_VAR 0 57
66758: PUSH
66759: LD_INT 2
66761: NEG
66762: PUSH
66763: LD_INT 1
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 3
66772: NEG
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 3
66783: NEG
66784: PUSH
66785: LD_INT 1
66787: NEG
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: LIST
66797: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66798: LD_ADDR_VAR 0 58
66802: PUSH
66803: LD_INT 2
66805: NEG
66806: PUSH
66807: LD_INT 3
66809: NEG
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 3
66817: NEG
66818: PUSH
66819: LD_INT 2
66821: NEG
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 3
66829: NEG
66830: PUSH
66831: LD_INT 3
66833: NEG
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: LIST
66843: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66844: LD_ADDR_VAR 0 59
66848: PUSH
66849: LD_INT 1
66851: NEG
66852: PUSH
66853: LD_INT 2
66855: NEG
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 0
66863: PUSH
66864: LD_INT 2
66866: NEG
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 1
66874: PUSH
66875: LD_INT 1
66877: NEG
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: LIST
66887: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66888: LD_ADDR_VAR 0 60
66892: PUSH
66893: LD_INT 1
66895: PUSH
66896: LD_INT 1
66898: NEG
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 2
66906: PUSH
66907: LD_INT 0
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 2
66916: PUSH
66917: LD_INT 1
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: LIST
66928: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66929: LD_ADDR_VAR 0 61
66933: PUSH
66934: LD_INT 2
66936: PUSH
66937: LD_INT 1
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 2
66946: PUSH
66947: LD_INT 2
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 1
66956: PUSH
66957: LD_INT 2
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: LIST
66968: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66969: LD_ADDR_VAR 0 62
66973: PUSH
66974: LD_INT 1
66976: PUSH
66977: LD_INT 2
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 0
66986: PUSH
66987: LD_INT 2
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 1
66996: NEG
66997: PUSH
66998: LD_INT 1
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: LIST
67009: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67010: LD_ADDR_VAR 0 63
67014: PUSH
67015: LD_INT 1
67017: NEG
67018: PUSH
67019: LD_INT 1
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 2
67028: NEG
67029: PUSH
67030: LD_INT 0
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 2
67039: NEG
67040: PUSH
67041: LD_INT 1
67043: NEG
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: LIST
67053: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67054: LD_ADDR_VAR 0 64
67058: PUSH
67059: LD_INT 1
67061: NEG
67062: PUSH
67063: LD_INT 2
67065: NEG
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 2
67073: NEG
67074: PUSH
67075: LD_INT 1
67077: NEG
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 2
67085: NEG
67086: PUSH
67087: LD_INT 2
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: LIST
67099: ST_TO_ADDR
// end ; 2 :
67100: GO 70366
67102: LD_INT 2
67104: DOUBLE
67105: EQUAL
67106: IFTRUE 67110
67108: GO 70365
67110: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67111: LD_ADDR_VAR 0 29
67115: PUSH
67116: LD_INT 4
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 4
67128: PUSH
67129: LD_INT 1
67131: NEG
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 5
67139: PUSH
67140: LD_INT 0
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 5
67149: PUSH
67150: LD_INT 1
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 4
67159: PUSH
67160: LD_INT 1
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 3
67169: PUSH
67170: LD_INT 0
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 3
67179: PUSH
67180: LD_INT 1
67182: NEG
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 3
67190: PUSH
67191: LD_INT 2
67193: NEG
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 5
67201: PUSH
67202: LD_INT 2
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 3
67211: PUSH
67212: LD_INT 3
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 3
67221: PUSH
67222: LD_INT 2
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: LD_INT 4
67231: PUSH
67232: LD_INT 3
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 4
67241: PUSH
67242: LD_INT 4
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 3
67251: PUSH
67252: LD_INT 4
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 2
67261: PUSH
67262: LD_INT 3
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 2
67271: PUSH
67272: LD_INT 2
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 4
67281: PUSH
67282: LD_INT 2
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 2
67291: PUSH
67292: LD_INT 4
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 0
67301: PUSH
67302: LD_INT 4
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 0
67311: PUSH
67312: LD_INT 3
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 1
67321: PUSH
67322: LD_INT 4
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 1
67331: PUSH
67332: LD_INT 5
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: LD_INT 5
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 1
67351: NEG
67352: PUSH
67353: LD_INT 4
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 1
67362: NEG
67363: PUSH
67364: LD_INT 3
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 2
67373: PUSH
67374: LD_INT 5
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: LD_INT 2
67383: NEG
67384: PUSH
67385: LD_INT 3
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 3
67394: NEG
67395: PUSH
67396: LD_INT 0
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 3
67405: NEG
67406: PUSH
67407: LD_INT 1
67409: NEG
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 2
67417: NEG
67418: PUSH
67419: LD_INT 0
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 2
67428: NEG
67429: PUSH
67430: LD_INT 1
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 3
67439: NEG
67440: PUSH
67441: LD_INT 1
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 4
67450: NEG
67451: PUSH
67452: LD_INT 0
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 4
67461: NEG
67462: PUSH
67463: LD_INT 1
67465: NEG
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 4
67473: NEG
67474: PUSH
67475: LD_INT 2
67477: NEG
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 2
67485: NEG
67486: PUSH
67487: LD_INT 2
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 4
67496: NEG
67497: PUSH
67498: LD_INT 4
67500: NEG
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 4
67508: NEG
67509: PUSH
67510: LD_INT 5
67512: NEG
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 3
67520: NEG
67521: PUSH
67522: LD_INT 4
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 3
67532: NEG
67533: PUSH
67534: LD_INT 3
67536: NEG
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 4
67544: NEG
67545: PUSH
67546: LD_INT 3
67548: NEG
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 5
67556: NEG
67557: PUSH
67558: LD_INT 4
67560: NEG
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 5
67568: NEG
67569: PUSH
67570: LD_INT 5
67572: NEG
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 3
67580: NEG
67581: PUSH
67582: LD_INT 5
67584: NEG
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 5
67592: NEG
67593: PUSH
67594: LD_INT 3
67596: NEG
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67649: LD_ADDR_VAR 0 30
67653: PUSH
67654: LD_INT 4
67656: PUSH
67657: LD_INT 4
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 4
67666: PUSH
67667: LD_INT 3
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 5
67676: PUSH
67677: LD_INT 4
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 5
67686: PUSH
67687: LD_INT 5
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 4
67696: PUSH
67697: LD_INT 5
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 3
67706: PUSH
67707: LD_INT 4
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 3
67716: PUSH
67717: LD_INT 3
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 5
67726: PUSH
67727: LD_INT 3
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 3
67736: PUSH
67737: LD_INT 5
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 0
67746: PUSH
67747: LD_INT 3
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 0
67756: PUSH
67757: LD_INT 2
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 1
67766: PUSH
67767: LD_INT 3
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 1
67776: PUSH
67777: LD_INT 4
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 0
67786: PUSH
67787: LD_INT 4
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 1
67796: NEG
67797: PUSH
67798: LD_INT 3
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 1
67807: NEG
67808: PUSH
67809: LD_INT 2
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 2
67818: PUSH
67819: LD_INT 4
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 2
67828: NEG
67829: PUSH
67830: LD_INT 2
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 4
67839: NEG
67840: PUSH
67841: LD_INT 0
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 4
67850: NEG
67851: PUSH
67852: LD_INT 1
67854: NEG
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 3
67862: NEG
67863: PUSH
67864: LD_INT 0
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: LD_INT 3
67873: NEG
67874: PUSH
67875: LD_INT 1
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 4
67884: NEG
67885: PUSH
67886: LD_INT 1
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 5
67895: NEG
67896: PUSH
67897: LD_INT 0
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 5
67906: NEG
67907: PUSH
67908: LD_INT 1
67910: NEG
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 5
67918: NEG
67919: PUSH
67920: LD_INT 2
67922: NEG
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 3
67930: NEG
67931: PUSH
67932: LD_INT 2
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 3
67941: NEG
67942: PUSH
67943: LD_INT 3
67945: NEG
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 3
67953: NEG
67954: PUSH
67955: LD_INT 4
67957: NEG
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 2
67965: NEG
67966: PUSH
67967: LD_INT 3
67969: NEG
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 2
67977: NEG
67978: PUSH
67979: LD_INT 2
67981: NEG
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 3
67989: NEG
67990: PUSH
67991: LD_INT 2
67993: NEG
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 4
68001: NEG
68002: PUSH
68003: LD_INT 3
68005: NEG
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 4
68013: NEG
68014: PUSH
68015: LD_INT 4
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 2
68025: NEG
68026: PUSH
68027: LD_INT 4
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 4
68037: NEG
68038: PUSH
68039: LD_INT 2
68041: NEG
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 0
68049: PUSH
68050: LD_INT 4
68052: NEG
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 0
68060: PUSH
68061: LD_INT 5
68063: NEG
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 1
68071: PUSH
68072: LD_INT 4
68074: NEG
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 1
68082: PUSH
68083: LD_INT 3
68085: NEG
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 0
68093: PUSH
68094: LD_INT 3
68096: NEG
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 1
68104: NEG
68105: PUSH
68106: LD_INT 4
68108: NEG
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 1
68116: NEG
68117: PUSH
68118: LD_INT 5
68120: NEG
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 2
68128: PUSH
68129: LD_INT 3
68131: NEG
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 2
68139: NEG
68140: PUSH
68141: LD_INT 5
68143: NEG
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68196: LD_ADDR_VAR 0 31
68200: PUSH
68201: LD_INT 0
68203: PUSH
68204: LD_INT 4
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 0
68213: PUSH
68214: LD_INT 3
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 1
68223: PUSH
68224: LD_INT 4
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 1
68233: PUSH
68234: LD_INT 5
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 0
68243: PUSH
68244: LD_INT 5
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 1
68253: NEG
68254: PUSH
68255: LD_INT 4
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 1
68264: NEG
68265: PUSH
68266: LD_INT 3
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 2
68275: PUSH
68276: LD_INT 5
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 2
68285: NEG
68286: PUSH
68287: LD_INT 3
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 3
68296: NEG
68297: PUSH
68298: LD_INT 0
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 3
68307: NEG
68308: PUSH
68309: LD_INT 1
68311: NEG
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 2
68319: NEG
68320: PUSH
68321: LD_INT 0
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 2
68330: NEG
68331: PUSH
68332: LD_INT 1
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 3
68341: NEG
68342: PUSH
68343: LD_INT 1
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 4
68352: NEG
68353: PUSH
68354: LD_INT 0
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 4
68363: NEG
68364: PUSH
68365: LD_INT 1
68367: NEG
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 4
68375: NEG
68376: PUSH
68377: LD_INT 2
68379: NEG
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 2
68387: NEG
68388: PUSH
68389: LD_INT 2
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 4
68398: NEG
68399: PUSH
68400: LD_INT 4
68402: NEG
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 4
68410: NEG
68411: PUSH
68412: LD_INT 5
68414: NEG
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 3
68422: NEG
68423: PUSH
68424: LD_INT 4
68426: NEG
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 3
68434: NEG
68435: PUSH
68436: LD_INT 3
68438: NEG
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 4
68446: NEG
68447: PUSH
68448: LD_INT 3
68450: NEG
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 5
68458: NEG
68459: PUSH
68460: LD_INT 4
68462: NEG
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 5
68470: NEG
68471: PUSH
68472: LD_INT 5
68474: NEG
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 3
68482: NEG
68483: PUSH
68484: LD_INT 5
68486: NEG
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 5
68494: NEG
68495: PUSH
68496: LD_INT 3
68498: NEG
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 0
68506: PUSH
68507: LD_INT 3
68509: NEG
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 0
68517: PUSH
68518: LD_INT 4
68520: NEG
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 1
68528: PUSH
68529: LD_INT 3
68531: NEG
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 1
68539: PUSH
68540: LD_INT 2
68542: NEG
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 0
68550: PUSH
68551: LD_INT 2
68553: NEG
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 1
68561: NEG
68562: PUSH
68563: LD_INT 3
68565: NEG
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 1
68573: NEG
68574: PUSH
68575: LD_INT 4
68577: NEG
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 2
68585: PUSH
68586: LD_INT 2
68588: NEG
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 2
68596: NEG
68597: PUSH
68598: LD_INT 4
68600: NEG
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 4
68608: PUSH
68609: LD_INT 0
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 4
68618: PUSH
68619: LD_INT 1
68621: NEG
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 5
68629: PUSH
68630: LD_INT 0
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 5
68639: PUSH
68640: LD_INT 1
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 4
68649: PUSH
68650: LD_INT 1
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 3
68659: PUSH
68660: LD_INT 0
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 3
68669: PUSH
68670: LD_INT 1
68672: NEG
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 3
68680: PUSH
68681: LD_INT 2
68683: NEG
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 5
68691: PUSH
68692: LD_INT 2
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68746: LD_ADDR_VAR 0 32
68750: PUSH
68751: LD_INT 4
68753: NEG
68754: PUSH
68755: LD_INT 0
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 4
68764: NEG
68765: PUSH
68766: LD_INT 1
68768: NEG
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 3
68776: NEG
68777: PUSH
68778: LD_INT 0
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 3
68787: NEG
68788: PUSH
68789: LD_INT 1
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 4
68798: NEG
68799: PUSH
68800: LD_INT 1
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 5
68809: NEG
68810: PUSH
68811: LD_INT 0
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 5
68820: NEG
68821: PUSH
68822: LD_INT 1
68824: NEG
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 5
68832: NEG
68833: PUSH
68834: LD_INT 2
68836: NEG
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 3
68844: NEG
68845: PUSH
68846: LD_INT 2
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 3
68855: NEG
68856: PUSH
68857: LD_INT 3
68859: NEG
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 3
68867: NEG
68868: PUSH
68869: LD_INT 4
68871: NEG
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 2
68879: NEG
68880: PUSH
68881: LD_INT 3
68883: NEG
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 2
68891: NEG
68892: PUSH
68893: LD_INT 2
68895: NEG
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 3
68903: NEG
68904: PUSH
68905: LD_INT 2
68907: NEG
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 4
68915: NEG
68916: PUSH
68917: LD_INT 3
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 4
68927: NEG
68928: PUSH
68929: LD_INT 4
68931: NEG
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 2
68939: NEG
68940: PUSH
68941: LD_INT 4
68943: NEG
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 4
68951: NEG
68952: PUSH
68953: LD_INT 2
68955: NEG
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 0
68963: PUSH
68964: LD_INT 4
68966: NEG
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 0
68974: PUSH
68975: LD_INT 5
68977: NEG
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 1
68985: PUSH
68986: LD_INT 4
68988: NEG
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 1
68996: PUSH
68997: LD_INT 3
68999: NEG
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 0
69007: PUSH
69008: LD_INT 3
69010: NEG
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 1
69018: NEG
69019: PUSH
69020: LD_INT 4
69022: NEG
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 1
69030: NEG
69031: PUSH
69032: LD_INT 5
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 2
69042: PUSH
69043: LD_INT 3
69045: NEG
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 2
69053: NEG
69054: PUSH
69055: LD_INT 5
69057: NEG
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 3
69065: PUSH
69066: LD_INT 0
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 3
69075: PUSH
69076: LD_INT 1
69078: NEG
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 4
69086: PUSH
69087: LD_INT 0
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 4
69096: PUSH
69097: LD_INT 1
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 3
69106: PUSH
69107: LD_INT 1
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 2
69116: PUSH
69117: LD_INT 0
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 2
69126: PUSH
69127: LD_INT 1
69129: NEG
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 2
69137: PUSH
69138: LD_INT 2
69140: NEG
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 4
69148: PUSH
69149: LD_INT 2
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: LD_INT 4
69158: PUSH
69159: LD_INT 4
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 4
69168: PUSH
69169: LD_INT 3
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 5
69178: PUSH
69179: LD_INT 4
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 5
69188: PUSH
69189: LD_INT 5
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 4
69198: PUSH
69199: LD_INT 5
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 3
69208: PUSH
69209: LD_INT 4
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 3
69218: PUSH
69219: LD_INT 3
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 5
69228: PUSH
69229: LD_INT 3
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 3
69238: PUSH
69239: LD_INT 5
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69293: LD_ADDR_VAR 0 33
69297: PUSH
69298: LD_INT 4
69300: NEG
69301: PUSH
69302: LD_INT 4
69304: NEG
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 4
69312: NEG
69313: PUSH
69314: LD_INT 5
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 3
69324: NEG
69325: PUSH
69326: LD_INT 4
69328: NEG
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 3
69336: NEG
69337: PUSH
69338: LD_INT 3
69340: NEG
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 4
69348: NEG
69349: PUSH
69350: LD_INT 3
69352: NEG
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 5
69360: NEG
69361: PUSH
69362: LD_INT 4
69364: NEG
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 5
69372: NEG
69373: PUSH
69374: LD_INT 5
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 3
69384: NEG
69385: PUSH
69386: LD_INT 5
69388: NEG
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 5
69396: NEG
69397: PUSH
69398: LD_INT 3
69400: NEG
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 0
69408: PUSH
69409: LD_INT 3
69411: NEG
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 0
69419: PUSH
69420: LD_INT 4
69422: NEG
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 1
69430: PUSH
69431: LD_INT 3
69433: NEG
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 1
69441: PUSH
69442: LD_INT 2
69444: NEG
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 0
69452: PUSH
69453: LD_INT 2
69455: NEG
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 1
69463: NEG
69464: PUSH
69465: LD_INT 3
69467: NEG
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 1
69475: NEG
69476: PUSH
69477: LD_INT 4
69479: NEG
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 2
69487: PUSH
69488: LD_INT 2
69490: NEG
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 2
69498: NEG
69499: PUSH
69500: LD_INT 4
69502: NEG
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 4
69510: PUSH
69511: LD_INT 0
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 4
69520: PUSH
69521: LD_INT 1
69523: NEG
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 5
69531: PUSH
69532: LD_INT 0
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: LD_INT 5
69541: PUSH
69542: LD_INT 1
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 4
69551: PUSH
69552: LD_INT 1
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 3
69561: PUSH
69562: LD_INT 0
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 3
69571: PUSH
69572: LD_INT 1
69574: NEG
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 3
69582: PUSH
69583: LD_INT 2
69585: NEG
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: PUSH
69591: LD_INT 5
69593: PUSH
69594: LD_INT 2
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_INT 3
69603: PUSH
69604: LD_INT 3
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: LD_INT 3
69613: PUSH
69614: LD_INT 2
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: PUSH
69621: LD_INT 4
69623: PUSH
69624: LD_INT 3
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: LD_INT 4
69633: PUSH
69634: LD_INT 4
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: PUSH
69641: LD_INT 3
69643: PUSH
69644: LD_INT 4
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 2
69653: PUSH
69654: LD_INT 3
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 2
69663: PUSH
69664: LD_INT 2
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: LD_INT 4
69673: PUSH
69674: LD_INT 2
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PUSH
69681: LD_INT 2
69683: PUSH
69684: LD_INT 4
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: PUSH
69691: LD_INT 0
69693: PUSH
69694: LD_INT 4
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 0
69703: PUSH
69704: LD_INT 3
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 1
69713: PUSH
69714: LD_INT 4
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 1
69723: PUSH
69724: LD_INT 5
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 0
69733: PUSH
69734: LD_INT 5
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 1
69743: NEG
69744: PUSH
69745: LD_INT 4
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 1
69754: NEG
69755: PUSH
69756: LD_INT 3
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: PUSH
69763: LD_INT 2
69765: PUSH
69766: LD_INT 5
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: LD_INT 2
69775: NEG
69776: PUSH
69777: LD_INT 3
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69831: LD_ADDR_VAR 0 34
69835: PUSH
69836: LD_INT 0
69838: PUSH
69839: LD_INT 4
69841: NEG
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 0
69849: PUSH
69850: LD_INT 5
69852: NEG
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 1
69860: PUSH
69861: LD_INT 4
69863: NEG
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: LD_INT 1
69871: PUSH
69872: LD_INT 3
69874: NEG
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 0
69882: PUSH
69883: LD_INT 3
69885: NEG
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 1
69893: NEG
69894: PUSH
69895: LD_INT 4
69897: NEG
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 1
69905: NEG
69906: PUSH
69907: LD_INT 5
69909: NEG
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 2
69917: PUSH
69918: LD_INT 3
69920: NEG
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 2
69928: NEG
69929: PUSH
69930: LD_INT 5
69932: NEG
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 3
69940: PUSH
69941: LD_INT 0
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: LD_INT 3
69950: PUSH
69951: LD_INT 1
69953: NEG
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 4
69961: PUSH
69962: LD_INT 0
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 4
69971: PUSH
69972: LD_INT 1
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 3
69981: PUSH
69982: LD_INT 1
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: LD_INT 2
69991: PUSH
69992: LD_INT 0
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 2
70001: PUSH
70002: LD_INT 1
70004: NEG
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 2
70012: PUSH
70013: LD_INT 2
70015: NEG
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: PUSH
70021: LD_INT 4
70023: PUSH
70024: LD_INT 2
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 4
70033: PUSH
70034: LD_INT 4
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 4
70043: PUSH
70044: LD_INT 3
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 5
70053: PUSH
70054: LD_INT 4
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 5
70063: PUSH
70064: LD_INT 5
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 4
70073: PUSH
70074: LD_INT 5
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: LD_INT 3
70083: PUSH
70084: LD_INT 4
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 3
70093: PUSH
70094: LD_INT 3
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 5
70103: PUSH
70104: LD_INT 3
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 3
70113: PUSH
70114: LD_INT 5
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 0
70123: PUSH
70124: LD_INT 3
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 0
70133: PUSH
70134: LD_INT 2
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 1
70143: PUSH
70144: LD_INT 3
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 1
70153: PUSH
70154: LD_INT 4
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 0
70163: PUSH
70164: LD_INT 4
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 1
70173: NEG
70174: PUSH
70175: LD_INT 3
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 1
70184: NEG
70185: PUSH
70186: LD_INT 2
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: PUSH
70193: LD_INT 2
70195: PUSH
70196: LD_INT 4
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PUSH
70203: LD_INT 2
70205: NEG
70206: PUSH
70207: LD_INT 2
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 4
70216: NEG
70217: PUSH
70218: LD_INT 0
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 4
70227: NEG
70228: PUSH
70229: LD_INT 1
70231: NEG
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 3
70239: NEG
70240: PUSH
70241: LD_INT 0
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 3
70250: NEG
70251: PUSH
70252: LD_INT 1
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 4
70261: NEG
70262: PUSH
70263: LD_INT 1
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 5
70272: NEG
70273: PUSH
70274: LD_INT 0
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 5
70283: NEG
70284: PUSH
70285: LD_INT 1
70287: NEG
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 5
70295: NEG
70296: PUSH
70297: LD_INT 2
70299: NEG
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: LD_INT 3
70307: NEG
70308: PUSH
70309: LD_INT 2
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: ST_TO_ADDR
// end ; end ;
70363: GO 70366
70365: POP
// case btype of b_depot , b_warehouse :
70366: LD_VAR 0 1
70370: PUSH
70371: LD_INT 0
70373: DOUBLE
70374: EQUAL
70375: IFTRUE 70385
70377: LD_INT 1
70379: DOUBLE
70380: EQUAL
70381: IFTRUE 70385
70383: GO 70586
70385: POP
// case nation of nation_american :
70386: LD_VAR 0 5
70390: PUSH
70391: LD_INT 1
70393: DOUBLE
70394: EQUAL
70395: IFTRUE 70399
70397: GO 70455
70399: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70400: LD_ADDR_VAR 0 9
70404: PUSH
70405: LD_VAR 0 11
70409: PUSH
70410: LD_VAR 0 12
70414: PUSH
70415: LD_VAR 0 13
70419: PUSH
70420: LD_VAR 0 14
70424: PUSH
70425: LD_VAR 0 15
70429: PUSH
70430: LD_VAR 0 16
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: PUSH
70443: LD_VAR 0 4
70447: PUSH
70448: LD_INT 1
70450: PLUS
70451: ARRAY
70452: ST_TO_ADDR
70453: GO 70584
70455: LD_INT 2
70457: DOUBLE
70458: EQUAL
70459: IFTRUE 70463
70461: GO 70519
70463: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70464: LD_ADDR_VAR 0 9
70468: PUSH
70469: LD_VAR 0 17
70473: PUSH
70474: LD_VAR 0 18
70478: PUSH
70479: LD_VAR 0 19
70483: PUSH
70484: LD_VAR 0 20
70488: PUSH
70489: LD_VAR 0 21
70493: PUSH
70494: LD_VAR 0 22
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: PUSH
70507: LD_VAR 0 4
70511: PUSH
70512: LD_INT 1
70514: PLUS
70515: ARRAY
70516: ST_TO_ADDR
70517: GO 70584
70519: LD_INT 3
70521: DOUBLE
70522: EQUAL
70523: IFTRUE 70527
70525: GO 70583
70527: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70528: LD_ADDR_VAR 0 9
70532: PUSH
70533: LD_VAR 0 23
70537: PUSH
70538: LD_VAR 0 24
70542: PUSH
70543: LD_VAR 0 25
70547: PUSH
70548: LD_VAR 0 26
70552: PUSH
70553: LD_VAR 0 27
70557: PUSH
70558: LD_VAR 0 28
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: PUSH
70571: LD_VAR 0 4
70575: PUSH
70576: LD_INT 1
70578: PLUS
70579: ARRAY
70580: ST_TO_ADDR
70581: GO 70584
70583: POP
70584: GO 71139
70586: LD_INT 2
70588: DOUBLE
70589: EQUAL
70590: IFTRUE 70600
70592: LD_INT 3
70594: DOUBLE
70595: EQUAL
70596: IFTRUE 70600
70598: GO 70656
70600: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70601: LD_ADDR_VAR 0 9
70605: PUSH
70606: LD_VAR 0 29
70610: PUSH
70611: LD_VAR 0 30
70615: PUSH
70616: LD_VAR 0 31
70620: PUSH
70621: LD_VAR 0 32
70625: PUSH
70626: LD_VAR 0 33
70630: PUSH
70631: LD_VAR 0 34
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: PUSH
70644: LD_VAR 0 4
70648: PUSH
70649: LD_INT 1
70651: PLUS
70652: ARRAY
70653: ST_TO_ADDR
70654: GO 71139
70656: LD_INT 16
70658: DOUBLE
70659: EQUAL
70660: IFTRUE 70718
70662: LD_INT 17
70664: DOUBLE
70665: EQUAL
70666: IFTRUE 70718
70668: LD_INT 18
70670: DOUBLE
70671: EQUAL
70672: IFTRUE 70718
70674: LD_INT 19
70676: DOUBLE
70677: EQUAL
70678: IFTRUE 70718
70680: LD_INT 22
70682: DOUBLE
70683: EQUAL
70684: IFTRUE 70718
70686: LD_INT 20
70688: DOUBLE
70689: EQUAL
70690: IFTRUE 70718
70692: LD_INT 21
70694: DOUBLE
70695: EQUAL
70696: IFTRUE 70718
70698: LD_INT 23
70700: DOUBLE
70701: EQUAL
70702: IFTRUE 70718
70704: LD_INT 24
70706: DOUBLE
70707: EQUAL
70708: IFTRUE 70718
70710: LD_INT 25
70712: DOUBLE
70713: EQUAL
70714: IFTRUE 70718
70716: GO 70774
70718: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70719: LD_ADDR_VAR 0 9
70723: PUSH
70724: LD_VAR 0 35
70728: PUSH
70729: LD_VAR 0 36
70733: PUSH
70734: LD_VAR 0 37
70738: PUSH
70739: LD_VAR 0 38
70743: PUSH
70744: LD_VAR 0 39
70748: PUSH
70749: LD_VAR 0 40
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: PUSH
70762: LD_VAR 0 4
70766: PUSH
70767: LD_INT 1
70769: PLUS
70770: ARRAY
70771: ST_TO_ADDR
70772: GO 71139
70774: LD_INT 6
70776: DOUBLE
70777: EQUAL
70778: IFTRUE 70830
70780: LD_INT 7
70782: DOUBLE
70783: EQUAL
70784: IFTRUE 70830
70786: LD_INT 8
70788: DOUBLE
70789: EQUAL
70790: IFTRUE 70830
70792: LD_INT 13
70794: DOUBLE
70795: EQUAL
70796: IFTRUE 70830
70798: LD_INT 12
70800: DOUBLE
70801: EQUAL
70802: IFTRUE 70830
70804: LD_INT 15
70806: DOUBLE
70807: EQUAL
70808: IFTRUE 70830
70810: LD_INT 11
70812: DOUBLE
70813: EQUAL
70814: IFTRUE 70830
70816: LD_INT 14
70818: DOUBLE
70819: EQUAL
70820: IFTRUE 70830
70822: LD_INT 10
70824: DOUBLE
70825: EQUAL
70826: IFTRUE 70830
70828: GO 70886
70830: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70831: LD_ADDR_VAR 0 9
70835: PUSH
70836: LD_VAR 0 41
70840: PUSH
70841: LD_VAR 0 42
70845: PUSH
70846: LD_VAR 0 43
70850: PUSH
70851: LD_VAR 0 44
70855: PUSH
70856: LD_VAR 0 45
70860: PUSH
70861: LD_VAR 0 46
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: PUSH
70874: LD_VAR 0 4
70878: PUSH
70879: LD_INT 1
70881: PLUS
70882: ARRAY
70883: ST_TO_ADDR
70884: GO 71139
70886: LD_INT 36
70888: DOUBLE
70889: EQUAL
70890: IFTRUE 70894
70892: GO 70950
70894: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70895: LD_ADDR_VAR 0 9
70899: PUSH
70900: LD_VAR 0 47
70904: PUSH
70905: LD_VAR 0 48
70909: PUSH
70910: LD_VAR 0 49
70914: PUSH
70915: LD_VAR 0 50
70919: PUSH
70920: LD_VAR 0 51
70924: PUSH
70925: LD_VAR 0 52
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: PUSH
70938: LD_VAR 0 4
70942: PUSH
70943: LD_INT 1
70945: PLUS
70946: ARRAY
70947: ST_TO_ADDR
70948: GO 71139
70950: LD_INT 4
70952: DOUBLE
70953: EQUAL
70954: IFTRUE 70976
70956: LD_INT 5
70958: DOUBLE
70959: EQUAL
70960: IFTRUE 70976
70962: LD_INT 34
70964: DOUBLE
70965: EQUAL
70966: IFTRUE 70976
70968: LD_INT 37
70970: DOUBLE
70971: EQUAL
70972: IFTRUE 70976
70974: GO 71032
70976: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70977: LD_ADDR_VAR 0 9
70981: PUSH
70982: LD_VAR 0 53
70986: PUSH
70987: LD_VAR 0 54
70991: PUSH
70992: LD_VAR 0 55
70996: PUSH
70997: LD_VAR 0 56
71001: PUSH
71002: LD_VAR 0 57
71006: PUSH
71007: LD_VAR 0 58
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: PUSH
71020: LD_VAR 0 4
71024: PUSH
71025: LD_INT 1
71027: PLUS
71028: ARRAY
71029: ST_TO_ADDR
71030: GO 71139
71032: LD_INT 31
71034: DOUBLE
71035: EQUAL
71036: IFTRUE 71082
71038: LD_INT 32
71040: DOUBLE
71041: EQUAL
71042: IFTRUE 71082
71044: LD_INT 33
71046: DOUBLE
71047: EQUAL
71048: IFTRUE 71082
71050: LD_INT 27
71052: DOUBLE
71053: EQUAL
71054: IFTRUE 71082
71056: LD_INT 26
71058: DOUBLE
71059: EQUAL
71060: IFTRUE 71082
71062: LD_INT 28
71064: DOUBLE
71065: EQUAL
71066: IFTRUE 71082
71068: LD_INT 29
71070: DOUBLE
71071: EQUAL
71072: IFTRUE 71082
71074: LD_INT 30
71076: DOUBLE
71077: EQUAL
71078: IFTRUE 71082
71080: GO 71138
71082: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71083: LD_ADDR_VAR 0 9
71087: PUSH
71088: LD_VAR 0 59
71092: PUSH
71093: LD_VAR 0 60
71097: PUSH
71098: LD_VAR 0 61
71102: PUSH
71103: LD_VAR 0 62
71107: PUSH
71108: LD_VAR 0 63
71112: PUSH
71113: LD_VAR 0 64
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: PUSH
71126: LD_VAR 0 4
71130: PUSH
71131: LD_INT 1
71133: PLUS
71134: ARRAY
71135: ST_TO_ADDR
71136: GO 71139
71138: POP
// temp_list2 = [ ] ;
71139: LD_ADDR_VAR 0 10
71143: PUSH
71144: EMPTY
71145: ST_TO_ADDR
// for i in temp_list do
71146: LD_ADDR_VAR 0 8
71150: PUSH
71151: LD_VAR 0 9
71155: PUSH
71156: FOR_IN
71157: IFFALSE 71209
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71159: LD_ADDR_VAR 0 10
71163: PUSH
71164: LD_VAR 0 10
71168: PUSH
71169: LD_VAR 0 8
71173: PUSH
71174: LD_INT 1
71176: ARRAY
71177: PUSH
71178: LD_VAR 0 2
71182: PLUS
71183: PUSH
71184: LD_VAR 0 8
71188: PUSH
71189: LD_INT 2
71191: ARRAY
71192: PUSH
71193: LD_VAR 0 3
71197: PLUS
71198: PUSH
71199: EMPTY
71200: LIST
71201: LIST
71202: PUSH
71203: EMPTY
71204: LIST
71205: ADD
71206: ST_TO_ADDR
71207: GO 71156
71209: POP
71210: POP
// result = temp_list2 ;
71211: LD_ADDR_VAR 0 7
71215: PUSH
71216: LD_VAR 0 10
71220: ST_TO_ADDR
// end ;
71221: LD_VAR 0 7
71225: RET
// export function EnemyInRange ( unit , dist ) ; begin
71226: LD_INT 0
71228: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71229: LD_ADDR_VAR 0 3
71233: PUSH
71234: LD_VAR 0 1
71238: PPUSH
71239: CALL_OW 255
71243: PPUSH
71244: LD_VAR 0 1
71248: PPUSH
71249: CALL_OW 250
71253: PPUSH
71254: LD_VAR 0 1
71258: PPUSH
71259: CALL_OW 251
71263: PPUSH
71264: LD_VAR 0 2
71268: PPUSH
71269: CALL 44628 0 4
71273: PUSH
71274: LD_INT 4
71276: ARRAY
71277: ST_TO_ADDR
// end ;
71278: LD_VAR 0 3
71282: RET
// export function PlayerSeeMe ( unit ) ; begin
71283: LD_INT 0
71285: PPUSH
// result := See ( your_side , unit ) ;
71286: LD_ADDR_VAR 0 2
71290: PUSH
71291: LD_OWVAR 2
71295: PPUSH
71296: LD_VAR 0 1
71300: PPUSH
71301: CALL_OW 292
71305: ST_TO_ADDR
// end ;
71306: LD_VAR 0 2
71310: RET
// export function ReverseDir ( unit ) ; begin
71311: LD_INT 0
71313: PPUSH
// if not unit then
71314: LD_VAR 0 1
71318: NOT
71319: IFFALSE 71323
// exit ;
71321: GO 71346
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71323: LD_ADDR_VAR 0 2
71327: PUSH
71328: LD_VAR 0 1
71332: PPUSH
71333: CALL_OW 254
71337: PUSH
71338: LD_INT 3
71340: PLUS
71341: PUSH
71342: LD_INT 6
71344: MOD
71345: ST_TO_ADDR
// end ;
71346: LD_VAR 0 2
71350: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71351: LD_INT 0
71353: PPUSH
71354: PPUSH
71355: PPUSH
71356: PPUSH
71357: PPUSH
71358: PPUSH
// if not unit or not hexes then
71359: LD_VAR 0 1
71363: NOT
71364: PUSH
71365: LD_VAR 0 2
71369: NOT
71370: OR
71371: IFFALSE 71375
// exit ;
71373: GO 71498
// dist := 9999 ;
71375: LD_ADDR_VAR 0 5
71379: PUSH
71380: LD_INT 9999
71382: ST_TO_ADDR
// for i = 1 to hexes do
71383: LD_ADDR_VAR 0 4
71387: PUSH
71388: DOUBLE
71389: LD_INT 1
71391: DEC
71392: ST_TO_ADDR
71393: LD_VAR 0 2
71397: PUSH
71398: FOR_TO
71399: IFFALSE 71486
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71401: LD_ADDR_VAR 0 6
71405: PUSH
71406: LD_VAR 0 1
71410: PPUSH
71411: LD_VAR 0 2
71415: PUSH
71416: LD_VAR 0 4
71420: ARRAY
71421: PUSH
71422: LD_INT 1
71424: ARRAY
71425: PPUSH
71426: LD_VAR 0 2
71430: PUSH
71431: LD_VAR 0 4
71435: ARRAY
71436: PUSH
71437: LD_INT 2
71439: ARRAY
71440: PPUSH
71441: CALL_OW 297
71445: ST_TO_ADDR
// if tdist < dist then
71446: LD_VAR 0 6
71450: PUSH
71451: LD_VAR 0 5
71455: LESS
71456: IFFALSE 71484
// begin hex := hexes [ i ] ;
71458: LD_ADDR_VAR 0 8
71462: PUSH
71463: LD_VAR 0 2
71467: PUSH
71468: LD_VAR 0 4
71472: ARRAY
71473: ST_TO_ADDR
// dist := tdist ;
71474: LD_ADDR_VAR 0 5
71478: PUSH
71479: LD_VAR 0 6
71483: ST_TO_ADDR
// end ; end ;
71484: GO 71398
71486: POP
71487: POP
// result := hex ;
71488: LD_ADDR_VAR 0 3
71492: PUSH
71493: LD_VAR 0 8
71497: ST_TO_ADDR
// end ;
71498: LD_VAR 0 3
71502: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71503: LD_INT 0
71505: PPUSH
71506: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71507: LD_VAR 0 1
71511: NOT
71512: PUSH
71513: LD_VAR 0 1
71517: PUSH
71518: LD_INT 21
71520: PUSH
71521: LD_INT 2
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 23
71530: PUSH
71531: LD_INT 2
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: PPUSH
71542: CALL_OW 69
71546: IN
71547: NOT
71548: OR
71549: IFFALSE 71553
// exit ;
71551: GO 71600
// for i = 1 to 3 do
71553: LD_ADDR_VAR 0 3
71557: PUSH
71558: DOUBLE
71559: LD_INT 1
71561: DEC
71562: ST_TO_ADDR
71563: LD_INT 3
71565: PUSH
71566: FOR_TO
71567: IFFALSE 71598
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71569: LD_VAR 0 1
71573: PPUSH
71574: CALL_OW 250
71578: PPUSH
71579: LD_VAR 0 1
71583: PPUSH
71584: CALL_OW 251
71588: PPUSH
71589: LD_INT 1
71591: PPUSH
71592: CALL_OW 453
71596: GO 71566
71598: POP
71599: POP
// end ;
71600: LD_VAR 0 2
71604: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71605: LD_INT 0
71607: PPUSH
71608: PPUSH
71609: PPUSH
71610: PPUSH
71611: PPUSH
71612: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71613: LD_VAR 0 1
71617: NOT
71618: PUSH
71619: LD_VAR 0 2
71623: NOT
71624: OR
71625: PUSH
71626: LD_VAR 0 1
71630: PPUSH
71631: CALL_OW 314
71635: OR
71636: IFFALSE 71640
// exit ;
71638: GO 72081
// x := GetX ( enemy_unit ) ;
71640: LD_ADDR_VAR 0 7
71644: PUSH
71645: LD_VAR 0 2
71649: PPUSH
71650: CALL_OW 250
71654: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71655: LD_ADDR_VAR 0 8
71659: PUSH
71660: LD_VAR 0 2
71664: PPUSH
71665: CALL_OW 251
71669: ST_TO_ADDR
// if not x or not y then
71670: LD_VAR 0 7
71674: NOT
71675: PUSH
71676: LD_VAR 0 8
71680: NOT
71681: OR
71682: IFFALSE 71686
// exit ;
71684: GO 72081
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71686: LD_ADDR_VAR 0 6
71690: PUSH
71691: LD_VAR 0 7
71695: PPUSH
71696: LD_INT 0
71698: PPUSH
71699: LD_INT 4
71701: PPUSH
71702: CALL_OW 272
71706: PUSH
71707: LD_VAR 0 8
71711: PPUSH
71712: LD_INT 0
71714: PPUSH
71715: LD_INT 4
71717: PPUSH
71718: CALL_OW 273
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: LD_VAR 0 7
71731: PPUSH
71732: LD_INT 1
71734: PPUSH
71735: LD_INT 4
71737: PPUSH
71738: CALL_OW 272
71742: PUSH
71743: LD_VAR 0 8
71747: PPUSH
71748: LD_INT 1
71750: PPUSH
71751: LD_INT 4
71753: PPUSH
71754: CALL_OW 273
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_VAR 0 7
71767: PPUSH
71768: LD_INT 2
71770: PPUSH
71771: LD_INT 4
71773: PPUSH
71774: CALL_OW 272
71778: PUSH
71779: LD_VAR 0 8
71783: PPUSH
71784: LD_INT 2
71786: PPUSH
71787: LD_INT 4
71789: PPUSH
71790: CALL_OW 273
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: PUSH
71799: LD_VAR 0 7
71803: PPUSH
71804: LD_INT 3
71806: PPUSH
71807: LD_INT 4
71809: PPUSH
71810: CALL_OW 272
71814: PUSH
71815: LD_VAR 0 8
71819: PPUSH
71820: LD_INT 3
71822: PPUSH
71823: LD_INT 4
71825: PPUSH
71826: CALL_OW 273
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: LD_VAR 0 7
71839: PPUSH
71840: LD_INT 4
71842: PPUSH
71843: LD_INT 4
71845: PPUSH
71846: CALL_OW 272
71850: PUSH
71851: LD_VAR 0 8
71855: PPUSH
71856: LD_INT 4
71858: PPUSH
71859: LD_INT 4
71861: PPUSH
71862: CALL_OW 273
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: PUSH
71871: LD_VAR 0 7
71875: PPUSH
71876: LD_INT 5
71878: PPUSH
71879: LD_INT 4
71881: PPUSH
71882: CALL_OW 272
71886: PUSH
71887: LD_VAR 0 8
71891: PPUSH
71892: LD_INT 5
71894: PPUSH
71895: LD_INT 4
71897: PPUSH
71898: CALL_OW 273
71902: PUSH
71903: EMPTY
71904: LIST
71905: LIST
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: ST_TO_ADDR
// for i = tmp downto 1 do
71915: LD_ADDR_VAR 0 4
71919: PUSH
71920: DOUBLE
71921: LD_VAR 0 6
71925: INC
71926: ST_TO_ADDR
71927: LD_INT 1
71929: PUSH
71930: FOR_DOWNTO
71931: IFFALSE 72032
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71933: LD_VAR 0 6
71937: PUSH
71938: LD_VAR 0 4
71942: ARRAY
71943: PUSH
71944: LD_INT 1
71946: ARRAY
71947: PPUSH
71948: LD_VAR 0 6
71952: PUSH
71953: LD_VAR 0 4
71957: ARRAY
71958: PUSH
71959: LD_INT 2
71961: ARRAY
71962: PPUSH
71963: CALL_OW 488
71967: NOT
71968: PUSH
71969: LD_VAR 0 6
71973: PUSH
71974: LD_VAR 0 4
71978: ARRAY
71979: PUSH
71980: LD_INT 1
71982: ARRAY
71983: PPUSH
71984: LD_VAR 0 6
71988: PUSH
71989: LD_VAR 0 4
71993: ARRAY
71994: PUSH
71995: LD_INT 2
71997: ARRAY
71998: PPUSH
71999: CALL_OW 428
72003: PUSH
72004: LD_INT 0
72006: NONEQUAL
72007: OR
72008: IFFALSE 72030
// tmp := Delete ( tmp , i ) ;
72010: LD_ADDR_VAR 0 6
72014: PUSH
72015: LD_VAR 0 6
72019: PPUSH
72020: LD_VAR 0 4
72024: PPUSH
72025: CALL_OW 3
72029: ST_TO_ADDR
72030: GO 71930
72032: POP
72033: POP
// j := GetClosestHex ( unit , tmp ) ;
72034: LD_ADDR_VAR 0 5
72038: PUSH
72039: LD_VAR 0 1
72043: PPUSH
72044: LD_VAR 0 6
72048: PPUSH
72049: CALL 71351 0 2
72053: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72054: LD_VAR 0 1
72058: PPUSH
72059: LD_VAR 0 5
72063: PUSH
72064: LD_INT 1
72066: ARRAY
72067: PPUSH
72068: LD_VAR 0 5
72072: PUSH
72073: LD_INT 2
72075: ARRAY
72076: PPUSH
72077: CALL_OW 111
// end ;
72081: LD_VAR 0 3
72085: RET
// export function PrepareApemanSoldier ( ) ; begin
72086: LD_INT 0
72088: PPUSH
// uc_nation := 0 ;
72089: LD_ADDR_OWVAR 21
72093: PUSH
72094: LD_INT 0
72096: ST_TO_ADDR
// hc_sex := sex_male ;
72097: LD_ADDR_OWVAR 27
72101: PUSH
72102: LD_INT 1
72104: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72105: LD_ADDR_OWVAR 28
72109: PUSH
72110: LD_INT 15
72112: ST_TO_ADDR
// hc_gallery :=  ;
72113: LD_ADDR_OWVAR 33
72117: PUSH
72118: LD_STRING 
72120: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72121: LD_ADDR_OWVAR 31
72125: PUSH
72126: LD_INT 0
72128: PPUSH
72129: LD_INT 3
72131: PPUSH
72132: CALL_OW 12
72136: PUSH
72137: LD_INT 0
72139: PPUSH
72140: LD_INT 3
72142: PPUSH
72143: CALL_OW 12
72147: PUSH
72148: LD_INT 0
72150: PUSH
72151: LD_INT 0
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: ST_TO_ADDR
// end ;
72160: LD_VAR 0 1
72164: RET
// export function PrepareApemanEngineer ( ) ; begin
72165: LD_INT 0
72167: PPUSH
// uc_nation := 0 ;
72168: LD_ADDR_OWVAR 21
72172: PUSH
72173: LD_INT 0
72175: ST_TO_ADDR
// hc_sex := sex_male ;
72176: LD_ADDR_OWVAR 27
72180: PUSH
72181: LD_INT 1
72183: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72184: LD_ADDR_OWVAR 28
72188: PUSH
72189: LD_INT 16
72191: ST_TO_ADDR
// hc_gallery :=  ;
72192: LD_ADDR_OWVAR 33
72196: PUSH
72197: LD_STRING 
72199: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72200: LD_ADDR_OWVAR 31
72204: PUSH
72205: LD_INT 0
72207: PPUSH
72208: LD_INT 3
72210: PPUSH
72211: CALL_OW 12
72215: PUSH
72216: LD_INT 0
72218: PPUSH
72219: LD_INT 3
72221: PPUSH
72222: CALL_OW 12
72226: PUSH
72227: LD_INT 0
72229: PUSH
72230: LD_INT 0
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: ST_TO_ADDR
// end ;
72239: LD_VAR 0 1
72243: RET
// export function PrepareApeman ( agressivity ) ; begin
72244: LD_INT 0
72246: PPUSH
// uc_side := 0 ;
72247: LD_ADDR_OWVAR 20
72251: PUSH
72252: LD_INT 0
72254: ST_TO_ADDR
// uc_nation := 0 ;
72255: LD_ADDR_OWVAR 21
72259: PUSH
72260: LD_INT 0
72262: ST_TO_ADDR
// hc_sex := sex_male ;
72263: LD_ADDR_OWVAR 27
72267: PUSH
72268: LD_INT 1
72270: ST_TO_ADDR
// hc_class := class_apeman ;
72271: LD_ADDR_OWVAR 28
72275: PUSH
72276: LD_INT 12
72278: ST_TO_ADDR
// hc_gallery :=  ;
72279: LD_ADDR_OWVAR 33
72283: PUSH
72284: LD_STRING 
72286: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72287: LD_ADDR_OWVAR 35
72291: PUSH
72292: LD_VAR 0 1
72296: NEG
72297: PPUSH
72298: LD_VAR 0 1
72302: PPUSH
72303: CALL_OW 12
72307: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72308: LD_ADDR_OWVAR 31
72312: PUSH
72313: LD_INT 0
72315: PPUSH
72316: LD_INT 3
72318: PPUSH
72319: CALL_OW 12
72323: PUSH
72324: LD_INT 0
72326: PPUSH
72327: LD_INT 3
72329: PPUSH
72330: CALL_OW 12
72334: PUSH
72335: LD_INT 0
72337: PUSH
72338: LD_INT 0
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: ST_TO_ADDR
// end ;
72347: LD_VAR 0 2
72351: RET
// export function PrepareTiger ( agressivity ) ; begin
72352: LD_INT 0
72354: PPUSH
// uc_side := 0 ;
72355: LD_ADDR_OWVAR 20
72359: PUSH
72360: LD_INT 0
72362: ST_TO_ADDR
// uc_nation := 0 ;
72363: LD_ADDR_OWVAR 21
72367: PUSH
72368: LD_INT 0
72370: ST_TO_ADDR
// hc_class := class_tiger ;
72371: LD_ADDR_OWVAR 28
72375: PUSH
72376: LD_INT 14
72378: ST_TO_ADDR
// hc_gallery :=  ;
72379: LD_ADDR_OWVAR 33
72383: PUSH
72384: LD_STRING 
72386: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72387: LD_ADDR_OWVAR 35
72391: PUSH
72392: LD_VAR 0 1
72396: NEG
72397: PPUSH
72398: LD_VAR 0 1
72402: PPUSH
72403: CALL_OW 12
72407: ST_TO_ADDR
// end ;
72408: LD_VAR 0 2
72412: RET
// export function PrepareEnchidna ( ) ; begin
72413: LD_INT 0
72415: PPUSH
// uc_side := 0 ;
72416: LD_ADDR_OWVAR 20
72420: PUSH
72421: LD_INT 0
72423: ST_TO_ADDR
// uc_nation := 0 ;
72424: LD_ADDR_OWVAR 21
72428: PUSH
72429: LD_INT 0
72431: ST_TO_ADDR
// hc_class := class_baggie ;
72432: LD_ADDR_OWVAR 28
72436: PUSH
72437: LD_INT 13
72439: ST_TO_ADDR
// hc_gallery :=  ;
72440: LD_ADDR_OWVAR 33
72444: PUSH
72445: LD_STRING 
72447: ST_TO_ADDR
// end ;
72448: LD_VAR 0 1
72452: RET
// export function PrepareFrog ( ) ; begin
72453: LD_INT 0
72455: PPUSH
// uc_side := 0 ;
72456: LD_ADDR_OWVAR 20
72460: PUSH
72461: LD_INT 0
72463: ST_TO_ADDR
// uc_nation := 0 ;
72464: LD_ADDR_OWVAR 21
72468: PUSH
72469: LD_INT 0
72471: ST_TO_ADDR
// hc_class := class_frog ;
72472: LD_ADDR_OWVAR 28
72476: PUSH
72477: LD_INT 19
72479: ST_TO_ADDR
// hc_gallery :=  ;
72480: LD_ADDR_OWVAR 33
72484: PUSH
72485: LD_STRING 
72487: ST_TO_ADDR
// end ;
72488: LD_VAR 0 1
72492: RET
// export function PrepareFish ( ) ; begin
72493: LD_INT 0
72495: PPUSH
// uc_side := 0 ;
72496: LD_ADDR_OWVAR 20
72500: PUSH
72501: LD_INT 0
72503: ST_TO_ADDR
// uc_nation := 0 ;
72504: LD_ADDR_OWVAR 21
72508: PUSH
72509: LD_INT 0
72511: ST_TO_ADDR
// hc_class := class_fish ;
72512: LD_ADDR_OWVAR 28
72516: PUSH
72517: LD_INT 20
72519: ST_TO_ADDR
// hc_gallery :=  ;
72520: LD_ADDR_OWVAR 33
72524: PUSH
72525: LD_STRING 
72527: ST_TO_ADDR
// end ;
72528: LD_VAR 0 1
72532: RET
// export function PrepareBird ( ) ; begin
72533: LD_INT 0
72535: PPUSH
// uc_side := 0 ;
72536: LD_ADDR_OWVAR 20
72540: PUSH
72541: LD_INT 0
72543: ST_TO_ADDR
// uc_nation := 0 ;
72544: LD_ADDR_OWVAR 21
72548: PUSH
72549: LD_INT 0
72551: ST_TO_ADDR
// hc_class := class_phororhacos ;
72552: LD_ADDR_OWVAR 28
72556: PUSH
72557: LD_INT 18
72559: ST_TO_ADDR
// hc_gallery :=  ;
72560: LD_ADDR_OWVAR 33
72564: PUSH
72565: LD_STRING 
72567: ST_TO_ADDR
// end ;
72568: LD_VAR 0 1
72572: RET
// export function PrepareHorse ( ) ; begin
72573: LD_INT 0
72575: PPUSH
// uc_side := 0 ;
72576: LD_ADDR_OWVAR 20
72580: PUSH
72581: LD_INT 0
72583: ST_TO_ADDR
// uc_nation := 0 ;
72584: LD_ADDR_OWVAR 21
72588: PUSH
72589: LD_INT 0
72591: ST_TO_ADDR
// hc_class := class_horse ;
72592: LD_ADDR_OWVAR 28
72596: PUSH
72597: LD_INT 21
72599: ST_TO_ADDR
// hc_gallery :=  ;
72600: LD_ADDR_OWVAR 33
72604: PUSH
72605: LD_STRING 
72607: ST_TO_ADDR
// end ;
72608: LD_VAR 0 1
72612: RET
// export function PrepareMastodont ( ) ; begin
72613: LD_INT 0
72615: PPUSH
// uc_side := 0 ;
72616: LD_ADDR_OWVAR 20
72620: PUSH
72621: LD_INT 0
72623: ST_TO_ADDR
// uc_nation := 0 ;
72624: LD_ADDR_OWVAR 21
72628: PUSH
72629: LD_INT 0
72631: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72632: LD_ADDR_OWVAR 37
72636: PUSH
72637: LD_INT 31
72639: ST_TO_ADDR
// vc_control := control_rider ;
72640: LD_ADDR_OWVAR 38
72644: PUSH
72645: LD_INT 4
72647: ST_TO_ADDR
// end ;
72648: LD_VAR 0 1
72652: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72653: LD_INT 0
72655: PPUSH
72656: PPUSH
72657: PPUSH
// uc_side = 0 ;
72658: LD_ADDR_OWVAR 20
72662: PUSH
72663: LD_INT 0
72665: ST_TO_ADDR
// uc_nation = 0 ;
72666: LD_ADDR_OWVAR 21
72670: PUSH
72671: LD_INT 0
72673: ST_TO_ADDR
// InitHc_All ( ) ;
72674: CALL_OW 584
// InitVc ;
72678: CALL_OW 20
// if mastodonts then
72682: LD_VAR 0 6
72686: IFFALSE 72753
// for i = 1 to mastodonts do
72688: LD_ADDR_VAR 0 11
72692: PUSH
72693: DOUBLE
72694: LD_INT 1
72696: DEC
72697: ST_TO_ADDR
72698: LD_VAR 0 6
72702: PUSH
72703: FOR_TO
72704: IFFALSE 72751
// begin vc_chassis := 31 ;
72706: LD_ADDR_OWVAR 37
72710: PUSH
72711: LD_INT 31
72713: ST_TO_ADDR
// vc_control := control_rider ;
72714: LD_ADDR_OWVAR 38
72718: PUSH
72719: LD_INT 4
72721: ST_TO_ADDR
// animal := CreateVehicle ;
72722: LD_ADDR_VAR 0 12
72726: PUSH
72727: CALL_OW 45
72731: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72732: LD_VAR 0 12
72736: PPUSH
72737: LD_VAR 0 8
72741: PPUSH
72742: LD_INT 0
72744: PPUSH
72745: CALL 74888 0 3
// end ;
72749: GO 72703
72751: POP
72752: POP
// if horses then
72753: LD_VAR 0 5
72757: IFFALSE 72824
// for i = 1 to horses do
72759: LD_ADDR_VAR 0 11
72763: PUSH
72764: DOUBLE
72765: LD_INT 1
72767: DEC
72768: ST_TO_ADDR
72769: LD_VAR 0 5
72773: PUSH
72774: FOR_TO
72775: IFFALSE 72822
// begin hc_class := 21 ;
72777: LD_ADDR_OWVAR 28
72781: PUSH
72782: LD_INT 21
72784: ST_TO_ADDR
// hc_gallery :=  ;
72785: LD_ADDR_OWVAR 33
72789: PUSH
72790: LD_STRING 
72792: ST_TO_ADDR
// animal := CreateHuman ;
72793: LD_ADDR_VAR 0 12
72797: PUSH
72798: CALL_OW 44
72802: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72803: LD_VAR 0 12
72807: PPUSH
72808: LD_VAR 0 8
72812: PPUSH
72813: LD_INT 0
72815: PPUSH
72816: CALL 74888 0 3
// end ;
72820: GO 72774
72822: POP
72823: POP
// if birds then
72824: LD_VAR 0 1
72828: IFFALSE 72895
// for i = 1 to birds do
72830: LD_ADDR_VAR 0 11
72834: PUSH
72835: DOUBLE
72836: LD_INT 1
72838: DEC
72839: ST_TO_ADDR
72840: LD_VAR 0 1
72844: PUSH
72845: FOR_TO
72846: IFFALSE 72893
// begin hc_class = 18 ;
72848: LD_ADDR_OWVAR 28
72852: PUSH
72853: LD_INT 18
72855: ST_TO_ADDR
// hc_gallery =  ;
72856: LD_ADDR_OWVAR 33
72860: PUSH
72861: LD_STRING 
72863: ST_TO_ADDR
// animal := CreateHuman ;
72864: LD_ADDR_VAR 0 12
72868: PUSH
72869: CALL_OW 44
72873: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72874: LD_VAR 0 12
72878: PPUSH
72879: LD_VAR 0 8
72883: PPUSH
72884: LD_INT 0
72886: PPUSH
72887: CALL 74888 0 3
// end ;
72891: GO 72845
72893: POP
72894: POP
// if tigers then
72895: LD_VAR 0 2
72899: IFFALSE 72983
// for i = 1 to tigers do
72901: LD_ADDR_VAR 0 11
72905: PUSH
72906: DOUBLE
72907: LD_INT 1
72909: DEC
72910: ST_TO_ADDR
72911: LD_VAR 0 2
72915: PUSH
72916: FOR_TO
72917: IFFALSE 72981
// begin hc_class = class_tiger ;
72919: LD_ADDR_OWVAR 28
72923: PUSH
72924: LD_INT 14
72926: ST_TO_ADDR
// hc_gallery =  ;
72927: LD_ADDR_OWVAR 33
72931: PUSH
72932: LD_STRING 
72934: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72935: LD_ADDR_OWVAR 35
72939: PUSH
72940: LD_INT 7
72942: NEG
72943: PPUSH
72944: LD_INT 7
72946: PPUSH
72947: CALL_OW 12
72951: ST_TO_ADDR
// animal := CreateHuman ;
72952: LD_ADDR_VAR 0 12
72956: PUSH
72957: CALL_OW 44
72961: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72962: LD_VAR 0 12
72966: PPUSH
72967: LD_VAR 0 8
72971: PPUSH
72972: LD_INT 0
72974: PPUSH
72975: CALL 74888 0 3
// end ;
72979: GO 72916
72981: POP
72982: POP
// if apemans then
72983: LD_VAR 0 3
72987: IFFALSE 73110
// for i = 1 to apemans do
72989: LD_ADDR_VAR 0 11
72993: PUSH
72994: DOUBLE
72995: LD_INT 1
72997: DEC
72998: ST_TO_ADDR
72999: LD_VAR 0 3
73003: PUSH
73004: FOR_TO
73005: IFFALSE 73108
// begin hc_class = class_apeman ;
73007: LD_ADDR_OWVAR 28
73011: PUSH
73012: LD_INT 12
73014: ST_TO_ADDR
// hc_gallery =  ;
73015: LD_ADDR_OWVAR 33
73019: PUSH
73020: LD_STRING 
73022: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73023: LD_ADDR_OWVAR 35
73027: PUSH
73028: LD_INT 2
73030: NEG
73031: PPUSH
73032: LD_INT 2
73034: PPUSH
73035: CALL_OW 12
73039: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73040: LD_ADDR_OWVAR 31
73044: PUSH
73045: LD_INT 1
73047: PPUSH
73048: LD_INT 3
73050: PPUSH
73051: CALL_OW 12
73055: PUSH
73056: LD_INT 1
73058: PPUSH
73059: LD_INT 3
73061: PPUSH
73062: CALL_OW 12
73066: PUSH
73067: LD_INT 0
73069: PUSH
73070: LD_INT 0
73072: PUSH
73073: EMPTY
73074: LIST
73075: LIST
73076: LIST
73077: LIST
73078: ST_TO_ADDR
// animal := CreateHuman ;
73079: LD_ADDR_VAR 0 12
73083: PUSH
73084: CALL_OW 44
73088: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73089: LD_VAR 0 12
73093: PPUSH
73094: LD_VAR 0 8
73098: PPUSH
73099: LD_INT 0
73101: PPUSH
73102: CALL 74888 0 3
// end ;
73106: GO 73004
73108: POP
73109: POP
// if enchidnas then
73110: LD_VAR 0 4
73114: IFFALSE 73181
// for i = 1 to enchidnas do
73116: LD_ADDR_VAR 0 11
73120: PUSH
73121: DOUBLE
73122: LD_INT 1
73124: DEC
73125: ST_TO_ADDR
73126: LD_VAR 0 4
73130: PUSH
73131: FOR_TO
73132: IFFALSE 73179
// begin hc_class = 13 ;
73134: LD_ADDR_OWVAR 28
73138: PUSH
73139: LD_INT 13
73141: ST_TO_ADDR
// hc_gallery =  ;
73142: LD_ADDR_OWVAR 33
73146: PUSH
73147: LD_STRING 
73149: ST_TO_ADDR
// animal := CreateHuman ;
73150: LD_ADDR_VAR 0 12
73154: PUSH
73155: CALL_OW 44
73159: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73160: LD_VAR 0 12
73164: PPUSH
73165: LD_VAR 0 8
73169: PPUSH
73170: LD_INT 0
73172: PPUSH
73173: CALL 74888 0 3
// end ;
73177: GO 73131
73179: POP
73180: POP
// if fishes then
73181: LD_VAR 0 7
73185: IFFALSE 73252
// for i = 1 to fishes do
73187: LD_ADDR_VAR 0 11
73191: PUSH
73192: DOUBLE
73193: LD_INT 1
73195: DEC
73196: ST_TO_ADDR
73197: LD_VAR 0 7
73201: PUSH
73202: FOR_TO
73203: IFFALSE 73250
// begin hc_class = 20 ;
73205: LD_ADDR_OWVAR 28
73209: PUSH
73210: LD_INT 20
73212: ST_TO_ADDR
// hc_gallery =  ;
73213: LD_ADDR_OWVAR 33
73217: PUSH
73218: LD_STRING 
73220: ST_TO_ADDR
// animal := CreateHuman ;
73221: LD_ADDR_VAR 0 12
73225: PUSH
73226: CALL_OW 44
73230: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73231: LD_VAR 0 12
73235: PPUSH
73236: LD_VAR 0 9
73240: PPUSH
73241: LD_INT 0
73243: PPUSH
73244: CALL 74888 0 3
// end ;
73248: GO 73202
73250: POP
73251: POP
// end ;
73252: LD_VAR 0 10
73256: RET
// export function WantHeal ( sci , unit ) ; begin
73257: LD_INT 0
73259: PPUSH
// if GetTaskList ( sci ) > 0 then
73260: LD_VAR 0 1
73264: PPUSH
73265: CALL_OW 437
73269: PUSH
73270: LD_INT 0
73272: GREATER
73273: IFFALSE 73343
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73275: LD_VAR 0 1
73279: PPUSH
73280: CALL_OW 437
73284: PUSH
73285: LD_INT 1
73287: ARRAY
73288: PUSH
73289: LD_INT 1
73291: ARRAY
73292: PUSH
73293: LD_STRING l
73295: EQUAL
73296: PUSH
73297: LD_VAR 0 1
73301: PPUSH
73302: CALL_OW 437
73306: PUSH
73307: LD_INT 1
73309: ARRAY
73310: PUSH
73311: LD_INT 4
73313: ARRAY
73314: PUSH
73315: LD_VAR 0 2
73319: EQUAL
73320: AND
73321: IFFALSE 73333
// result := true else
73323: LD_ADDR_VAR 0 3
73327: PUSH
73328: LD_INT 1
73330: ST_TO_ADDR
73331: GO 73341
// result := false ;
73333: LD_ADDR_VAR 0 3
73337: PUSH
73338: LD_INT 0
73340: ST_TO_ADDR
// end else
73341: GO 73351
// result := false ;
73343: LD_ADDR_VAR 0 3
73347: PUSH
73348: LD_INT 0
73350: ST_TO_ADDR
// end ;
73351: LD_VAR 0 3
73355: RET
// export function HealTarget ( sci ) ; begin
73356: LD_INT 0
73358: PPUSH
// if not sci then
73359: LD_VAR 0 1
73363: NOT
73364: IFFALSE 73368
// exit ;
73366: GO 73433
// result := 0 ;
73368: LD_ADDR_VAR 0 2
73372: PUSH
73373: LD_INT 0
73375: ST_TO_ADDR
// if GetTaskList ( sci ) then
73376: LD_VAR 0 1
73380: PPUSH
73381: CALL_OW 437
73385: IFFALSE 73433
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73387: LD_VAR 0 1
73391: PPUSH
73392: CALL_OW 437
73396: PUSH
73397: LD_INT 1
73399: ARRAY
73400: PUSH
73401: LD_INT 1
73403: ARRAY
73404: PUSH
73405: LD_STRING l
73407: EQUAL
73408: IFFALSE 73433
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73410: LD_ADDR_VAR 0 2
73414: PUSH
73415: LD_VAR 0 1
73419: PPUSH
73420: CALL_OW 437
73424: PUSH
73425: LD_INT 1
73427: ARRAY
73428: PUSH
73429: LD_INT 4
73431: ARRAY
73432: ST_TO_ADDR
// end ;
73433: LD_VAR 0 2
73437: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73438: LD_INT 0
73440: PPUSH
73441: PPUSH
73442: PPUSH
73443: PPUSH
// if not base_units then
73444: LD_VAR 0 1
73448: NOT
73449: IFFALSE 73453
// exit ;
73451: GO 73540
// result := false ;
73453: LD_ADDR_VAR 0 2
73457: PUSH
73458: LD_INT 0
73460: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73461: LD_ADDR_VAR 0 5
73465: PUSH
73466: LD_VAR 0 1
73470: PPUSH
73471: LD_INT 21
73473: PUSH
73474: LD_INT 3
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PPUSH
73481: CALL_OW 72
73485: ST_TO_ADDR
// if not tmp then
73486: LD_VAR 0 5
73490: NOT
73491: IFFALSE 73495
// exit ;
73493: GO 73540
// for i in tmp do
73495: LD_ADDR_VAR 0 3
73499: PUSH
73500: LD_VAR 0 5
73504: PUSH
73505: FOR_IN
73506: IFFALSE 73538
// begin result := EnemyInRange ( i , 22 ) ;
73508: LD_ADDR_VAR 0 2
73512: PUSH
73513: LD_VAR 0 3
73517: PPUSH
73518: LD_INT 22
73520: PPUSH
73521: CALL 71226 0 2
73525: ST_TO_ADDR
// if result then
73526: LD_VAR 0 2
73530: IFFALSE 73536
// exit ;
73532: POP
73533: POP
73534: GO 73540
// end ;
73536: GO 73505
73538: POP
73539: POP
// end ;
73540: LD_VAR 0 2
73544: RET
// export function FilterByTag ( units , tag ) ; begin
73545: LD_INT 0
73547: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73548: LD_ADDR_VAR 0 3
73552: PUSH
73553: LD_VAR 0 1
73557: PPUSH
73558: LD_INT 120
73560: PUSH
73561: LD_VAR 0 2
73565: PUSH
73566: EMPTY
73567: LIST
73568: LIST
73569: PPUSH
73570: CALL_OW 72
73574: ST_TO_ADDR
// end ;
73575: LD_VAR 0 3
73579: RET
// export function IsDriver ( un ) ; begin
73580: LD_INT 0
73582: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73583: LD_ADDR_VAR 0 2
73587: PUSH
73588: LD_VAR 0 1
73592: PUSH
73593: LD_INT 55
73595: PUSH
73596: EMPTY
73597: LIST
73598: PPUSH
73599: CALL_OW 69
73603: IN
73604: ST_TO_ADDR
// end ;
73605: LD_VAR 0 2
73609: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73610: LD_INT 0
73612: PPUSH
73613: PPUSH
// list := [ ] ;
73614: LD_ADDR_VAR 0 5
73618: PUSH
73619: EMPTY
73620: ST_TO_ADDR
// case d of 0 :
73621: LD_VAR 0 3
73625: PUSH
73626: LD_INT 0
73628: DOUBLE
73629: EQUAL
73630: IFTRUE 73634
73632: GO 73767
73634: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73635: LD_ADDR_VAR 0 5
73639: PUSH
73640: LD_VAR 0 1
73644: PUSH
73645: LD_INT 4
73647: MINUS
73648: PUSH
73649: LD_VAR 0 2
73653: PUSH
73654: LD_INT 4
73656: MINUS
73657: PUSH
73658: LD_INT 2
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: LIST
73665: PUSH
73666: LD_VAR 0 1
73670: PUSH
73671: LD_INT 3
73673: MINUS
73674: PUSH
73675: LD_VAR 0 2
73679: PUSH
73680: LD_INT 1
73682: PUSH
73683: EMPTY
73684: LIST
73685: LIST
73686: LIST
73687: PUSH
73688: LD_VAR 0 1
73692: PUSH
73693: LD_INT 4
73695: PLUS
73696: PUSH
73697: LD_VAR 0 2
73701: PUSH
73702: LD_INT 4
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: LIST
73709: PUSH
73710: LD_VAR 0 1
73714: PUSH
73715: LD_INT 3
73717: PLUS
73718: PUSH
73719: LD_VAR 0 2
73723: PUSH
73724: LD_INT 3
73726: PLUS
73727: PUSH
73728: LD_INT 5
73730: PUSH
73731: EMPTY
73732: LIST
73733: LIST
73734: LIST
73735: PUSH
73736: LD_VAR 0 1
73740: PUSH
73741: LD_VAR 0 2
73745: PUSH
73746: LD_INT 4
73748: PLUS
73749: PUSH
73750: LD_INT 0
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: LIST
73757: PUSH
73758: EMPTY
73759: LIST
73760: LIST
73761: LIST
73762: LIST
73763: LIST
73764: ST_TO_ADDR
// end ; 1 :
73765: GO 74465
73767: LD_INT 1
73769: DOUBLE
73770: EQUAL
73771: IFTRUE 73775
73773: GO 73908
73775: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73776: LD_ADDR_VAR 0 5
73780: PUSH
73781: LD_VAR 0 1
73785: PUSH
73786: LD_VAR 0 2
73790: PUSH
73791: LD_INT 4
73793: MINUS
73794: PUSH
73795: LD_INT 3
73797: PUSH
73798: EMPTY
73799: LIST
73800: LIST
73801: LIST
73802: PUSH
73803: LD_VAR 0 1
73807: PUSH
73808: LD_INT 3
73810: MINUS
73811: PUSH
73812: LD_VAR 0 2
73816: PUSH
73817: LD_INT 3
73819: MINUS
73820: PUSH
73821: LD_INT 2
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: LIST
73828: PUSH
73829: LD_VAR 0 1
73833: PUSH
73834: LD_INT 4
73836: MINUS
73837: PUSH
73838: LD_VAR 0 2
73842: PUSH
73843: LD_INT 1
73845: PUSH
73846: EMPTY
73847: LIST
73848: LIST
73849: LIST
73850: PUSH
73851: LD_VAR 0 1
73855: PUSH
73856: LD_VAR 0 2
73860: PUSH
73861: LD_INT 3
73863: PLUS
73864: PUSH
73865: LD_INT 0
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: LIST
73872: PUSH
73873: LD_VAR 0 1
73877: PUSH
73878: LD_INT 4
73880: PLUS
73881: PUSH
73882: LD_VAR 0 2
73886: PUSH
73887: LD_INT 4
73889: PLUS
73890: PUSH
73891: LD_INT 5
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: LIST
73898: PUSH
73899: EMPTY
73900: LIST
73901: LIST
73902: LIST
73903: LIST
73904: LIST
73905: ST_TO_ADDR
// end ; 2 :
73906: GO 74465
73908: LD_INT 2
73910: DOUBLE
73911: EQUAL
73912: IFTRUE 73916
73914: GO 74045
73916: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73917: LD_ADDR_VAR 0 5
73921: PUSH
73922: LD_VAR 0 1
73926: PUSH
73927: LD_VAR 0 2
73931: PUSH
73932: LD_INT 3
73934: MINUS
73935: PUSH
73936: LD_INT 3
73938: PUSH
73939: EMPTY
73940: LIST
73941: LIST
73942: LIST
73943: PUSH
73944: LD_VAR 0 1
73948: PUSH
73949: LD_INT 4
73951: PLUS
73952: PUSH
73953: LD_VAR 0 2
73957: PUSH
73958: LD_INT 4
73960: PUSH
73961: EMPTY
73962: LIST
73963: LIST
73964: LIST
73965: PUSH
73966: LD_VAR 0 1
73970: PUSH
73971: LD_VAR 0 2
73975: PUSH
73976: LD_INT 4
73978: PLUS
73979: PUSH
73980: LD_INT 0
73982: PUSH
73983: EMPTY
73984: LIST
73985: LIST
73986: LIST
73987: PUSH
73988: LD_VAR 0 1
73992: PUSH
73993: LD_INT 3
73995: MINUS
73996: PUSH
73997: LD_VAR 0 2
74001: PUSH
74002: LD_INT 1
74004: PUSH
74005: EMPTY
74006: LIST
74007: LIST
74008: LIST
74009: PUSH
74010: LD_VAR 0 1
74014: PUSH
74015: LD_INT 4
74017: MINUS
74018: PUSH
74019: LD_VAR 0 2
74023: PUSH
74024: LD_INT 4
74026: MINUS
74027: PUSH
74028: LD_INT 2
74030: PUSH
74031: EMPTY
74032: LIST
74033: LIST
74034: LIST
74035: PUSH
74036: EMPTY
74037: LIST
74038: LIST
74039: LIST
74040: LIST
74041: LIST
74042: ST_TO_ADDR
// end ; 3 :
74043: GO 74465
74045: LD_INT 3
74047: DOUBLE
74048: EQUAL
74049: IFTRUE 74053
74051: GO 74186
74053: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74054: LD_ADDR_VAR 0 5
74058: PUSH
74059: LD_VAR 0 1
74063: PUSH
74064: LD_INT 3
74066: PLUS
74067: PUSH
74068: LD_VAR 0 2
74072: PUSH
74073: LD_INT 4
74075: PUSH
74076: EMPTY
74077: LIST
74078: LIST
74079: LIST
74080: PUSH
74081: LD_VAR 0 1
74085: PUSH
74086: LD_INT 4
74088: PLUS
74089: PUSH
74090: LD_VAR 0 2
74094: PUSH
74095: LD_INT 4
74097: PLUS
74098: PUSH
74099: LD_INT 5
74101: PUSH
74102: EMPTY
74103: LIST
74104: LIST
74105: LIST
74106: PUSH
74107: LD_VAR 0 1
74111: PUSH
74112: LD_INT 4
74114: MINUS
74115: PUSH
74116: LD_VAR 0 2
74120: PUSH
74121: LD_INT 1
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: LIST
74128: PUSH
74129: LD_VAR 0 1
74133: PUSH
74134: LD_VAR 0 2
74138: PUSH
74139: LD_INT 4
74141: MINUS
74142: PUSH
74143: LD_INT 3
74145: PUSH
74146: EMPTY
74147: LIST
74148: LIST
74149: LIST
74150: PUSH
74151: LD_VAR 0 1
74155: PUSH
74156: LD_INT 3
74158: MINUS
74159: PUSH
74160: LD_VAR 0 2
74164: PUSH
74165: LD_INT 3
74167: MINUS
74168: PUSH
74169: LD_INT 2
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: LIST
74176: PUSH
74177: EMPTY
74178: LIST
74179: LIST
74180: LIST
74181: LIST
74182: LIST
74183: ST_TO_ADDR
// end ; 4 :
74184: GO 74465
74186: LD_INT 4
74188: DOUBLE
74189: EQUAL
74190: IFTRUE 74194
74192: GO 74327
74194: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74195: LD_ADDR_VAR 0 5
74199: PUSH
74200: LD_VAR 0 1
74204: PUSH
74205: LD_VAR 0 2
74209: PUSH
74210: LD_INT 4
74212: PLUS
74213: PUSH
74214: LD_INT 0
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: LIST
74221: PUSH
74222: LD_VAR 0 1
74226: PUSH
74227: LD_INT 3
74229: PLUS
74230: PUSH
74231: LD_VAR 0 2
74235: PUSH
74236: LD_INT 3
74238: PLUS
74239: PUSH
74240: LD_INT 5
74242: PUSH
74243: EMPTY
74244: LIST
74245: LIST
74246: LIST
74247: PUSH
74248: LD_VAR 0 1
74252: PUSH
74253: LD_INT 4
74255: PLUS
74256: PUSH
74257: LD_VAR 0 2
74261: PUSH
74262: LD_INT 4
74264: PUSH
74265: EMPTY
74266: LIST
74267: LIST
74268: LIST
74269: PUSH
74270: LD_VAR 0 1
74274: PUSH
74275: LD_VAR 0 2
74279: PUSH
74280: LD_INT 3
74282: MINUS
74283: PUSH
74284: LD_INT 3
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: LIST
74291: PUSH
74292: LD_VAR 0 1
74296: PUSH
74297: LD_INT 4
74299: MINUS
74300: PUSH
74301: LD_VAR 0 2
74305: PUSH
74306: LD_INT 4
74308: MINUS
74309: PUSH
74310: LD_INT 2
74312: PUSH
74313: EMPTY
74314: LIST
74315: LIST
74316: LIST
74317: PUSH
74318: EMPTY
74319: LIST
74320: LIST
74321: LIST
74322: LIST
74323: LIST
74324: ST_TO_ADDR
// end ; 5 :
74325: GO 74465
74327: LD_INT 5
74329: DOUBLE
74330: EQUAL
74331: IFTRUE 74335
74333: GO 74464
74335: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74336: LD_ADDR_VAR 0 5
74340: PUSH
74341: LD_VAR 0 1
74345: PUSH
74346: LD_INT 4
74348: MINUS
74349: PUSH
74350: LD_VAR 0 2
74354: PUSH
74355: LD_INT 1
74357: PUSH
74358: EMPTY
74359: LIST
74360: LIST
74361: LIST
74362: PUSH
74363: LD_VAR 0 1
74367: PUSH
74368: LD_VAR 0 2
74372: PUSH
74373: LD_INT 4
74375: MINUS
74376: PUSH
74377: LD_INT 3
74379: PUSH
74380: EMPTY
74381: LIST
74382: LIST
74383: LIST
74384: PUSH
74385: LD_VAR 0 1
74389: PUSH
74390: LD_INT 4
74392: PLUS
74393: PUSH
74394: LD_VAR 0 2
74398: PUSH
74399: LD_INT 4
74401: PLUS
74402: PUSH
74403: LD_INT 5
74405: PUSH
74406: EMPTY
74407: LIST
74408: LIST
74409: LIST
74410: PUSH
74411: LD_VAR 0 1
74415: PUSH
74416: LD_INT 3
74418: PLUS
74419: PUSH
74420: LD_VAR 0 2
74424: PUSH
74425: LD_INT 4
74427: PUSH
74428: EMPTY
74429: LIST
74430: LIST
74431: LIST
74432: PUSH
74433: LD_VAR 0 1
74437: PUSH
74438: LD_VAR 0 2
74442: PUSH
74443: LD_INT 3
74445: PLUS
74446: PUSH
74447: LD_INT 0
74449: PUSH
74450: EMPTY
74451: LIST
74452: LIST
74453: LIST
74454: PUSH
74455: EMPTY
74456: LIST
74457: LIST
74458: LIST
74459: LIST
74460: LIST
74461: ST_TO_ADDR
// end ; end ;
74462: GO 74465
74464: POP
// result := list ;
74465: LD_ADDR_VAR 0 4
74469: PUSH
74470: LD_VAR 0 5
74474: ST_TO_ADDR
// end ;
74475: LD_VAR 0 4
74479: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74480: LD_INT 0
74482: PPUSH
74483: PPUSH
74484: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74485: LD_VAR 0 1
74489: NOT
74490: PUSH
74491: LD_VAR 0 2
74495: PUSH
74496: LD_INT 1
74498: PUSH
74499: LD_INT 2
74501: PUSH
74502: LD_INT 3
74504: PUSH
74505: LD_INT 4
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: LIST
74512: LIST
74513: IN
74514: NOT
74515: OR
74516: IFFALSE 74520
// exit ;
74518: GO 74612
// tmp := [ ] ;
74520: LD_ADDR_VAR 0 5
74524: PUSH
74525: EMPTY
74526: ST_TO_ADDR
// for i in units do
74527: LD_ADDR_VAR 0 4
74531: PUSH
74532: LD_VAR 0 1
74536: PUSH
74537: FOR_IN
74538: IFFALSE 74581
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74540: LD_ADDR_VAR 0 5
74544: PUSH
74545: LD_VAR 0 5
74549: PPUSH
74550: LD_VAR 0 5
74554: PUSH
74555: LD_INT 1
74557: PLUS
74558: PPUSH
74559: LD_VAR 0 4
74563: PPUSH
74564: LD_VAR 0 2
74568: PPUSH
74569: CALL_OW 259
74573: PPUSH
74574: CALL_OW 2
74578: ST_TO_ADDR
74579: GO 74537
74581: POP
74582: POP
// if not tmp then
74583: LD_VAR 0 5
74587: NOT
74588: IFFALSE 74592
// exit ;
74590: GO 74612
// result := SortListByListDesc ( units , tmp ) ;
74592: LD_ADDR_VAR 0 3
74596: PUSH
74597: LD_VAR 0 1
74601: PPUSH
74602: LD_VAR 0 5
74606: PPUSH
74607: CALL_OW 77
74611: ST_TO_ADDR
// end ;
74612: LD_VAR 0 3
74616: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74617: LD_INT 0
74619: PPUSH
74620: PPUSH
74621: PPUSH
// result := false ;
74622: LD_ADDR_VAR 0 3
74626: PUSH
74627: LD_INT 0
74629: ST_TO_ADDR
// x := GetX ( building ) ;
74630: LD_ADDR_VAR 0 4
74634: PUSH
74635: LD_VAR 0 2
74639: PPUSH
74640: CALL_OW 250
74644: ST_TO_ADDR
// y := GetY ( building ) ;
74645: LD_ADDR_VAR 0 5
74649: PUSH
74650: LD_VAR 0 2
74654: PPUSH
74655: CALL_OW 251
74659: ST_TO_ADDR
// if not building or not x or not y then
74660: LD_VAR 0 2
74664: NOT
74665: PUSH
74666: LD_VAR 0 4
74670: NOT
74671: OR
74672: PUSH
74673: LD_VAR 0 5
74677: NOT
74678: OR
74679: IFFALSE 74683
// exit ;
74681: GO 74775
// if GetTaskList ( unit ) then
74683: LD_VAR 0 1
74687: PPUSH
74688: CALL_OW 437
74692: IFFALSE 74775
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74694: LD_STRING e
74696: PUSH
74697: LD_VAR 0 1
74701: PPUSH
74702: CALL_OW 437
74706: PUSH
74707: LD_INT 1
74709: ARRAY
74710: PUSH
74711: LD_INT 1
74713: ARRAY
74714: EQUAL
74715: PUSH
74716: LD_VAR 0 4
74720: PUSH
74721: LD_VAR 0 1
74725: PPUSH
74726: CALL_OW 437
74730: PUSH
74731: LD_INT 1
74733: ARRAY
74734: PUSH
74735: LD_INT 2
74737: ARRAY
74738: EQUAL
74739: AND
74740: PUSH
74741: LD_VAR 0 5
74745: PUSH
74746: LD_VAR 0 1
74750: PPUSH
74751: CALL_OW 437
74755: PUSH
74756: LD_INT 1
74758: ARRAY
74759: PUSH
74760: LD_INT 3
74762: ARRAY
74763: EQUAL
74764: AND
74765: IFFALSE 74775
// result := true end ;
74767: LD_ADDR_VAR 0 3
74771: PUSH
74772: LD_INT 1
74774: ST_TO_ADDR
// end ;
74775: LD_VAR 0 3
74779: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74780: LD_INT 0
74782: PPUSH
// result := false ;
74783: LD_ADDR_VAR 0 4
74787: PUSH
74788: LD_INT 0
74790: ST_TO_ADDR
// if GetTaskList ( unit ) then
74791: LD_VAR 0 1
74795: PPUSH
74796: CALL_OW 437
74800: IFFALSE 74883
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74802: LD_STRING M
74804: PUSH
74805: LD_VAR 0 1
74809: PPUSH
74810: CALL_OW 437
74814: PUSH
74815: LD_INT 1
74817: ARRAY
74818: PUSH
74819: LD_INT 1
74821: ARRAY
74822: EQUAL
74823: PUSH
74824: LD_VAR 0 2
74828: PUSH
74829: LD_VAR 0 1
74833: PPUSH
74834: CALL_OW 437
74838: PUSH
74839: LD_INT 1
74841: ARRAY
74842: PUSH
74843: LD_INT 2
74845: ARRAY
74846: EQUAL
74847: AND
74848: PUSH
74849: LD_VAR 0 3
74853: PUSH
74854: LD_VAR 0 1
74858: PPUSH
74859: CALL_OW 437
74863: PUSH
74864: LD_INT 1
74866: ARRAY
74867: PUSH
74868: LD_INT 3
74870: ARRAY
74871: EQUAL
74872: AND
74873: IFFALSE 74883
// result := true ;
74875: LD_ADDR_VAR 0 4
74879: PUSH
74880: LD_INT 1
74882: ST_TO_ADDR
// end ; end ;
74883: LD_VAR 0 4
74887: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74888: LD_INT 0
74890: PPUSH
74891: PPUSH
74892: PPUSH
74893: PPUSH
// if not unit or not area then
74894: LD_VAR 0 1
74898: NOT
74899: PUSH
74900: LD_VAR 0 2
74904: NOT
74905: OR
74906: IFFALSE 74910
// exit ;
74908: GO 75074
// tmp := AreaToList ( area , i ) ;
74910: LD_ADDR_VAR 0 6
74914: PUSH
74915: LD_VAR 0 2
74919: PPUSH
74920: LD_VAR 0 5
74924: PPUSH
74925: CALL_OW 517
74929: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74930: LD_ADDR_VAR 0 5
74934: PUSH
74935: DOUBLE
74936: LD_INT 1
74938: DEC
74939: ST_TO_ADDR
74940: LD_VAR 0 6
74944: PUSH
74945: LD_INT 1
74947: ARRAY
74948: PUSH
74949: FOR_TO
74950: IFFALSE 75072
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74952: LD_ADDR_VAR 0 7
74956: PUSH
74957: LD_VAR 0 6
74961: PUSH
74962: LD_INT 1
74964: ARRAY
74965: PUSH
74966: LD_VAR 0 5
74970: ARRAY
74971: PUSH
74972: LD_VAR 0 6
74976: PUSH
74977: LD_INT 2
74979: ARRAY
74980: PUSH
74981: LD_VAR 0 5
74985: ARRAY
74986: PUSH
74987: EMPTY
74988: LIST
74989: LIST
74990: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74991: LD_VAR 0 7
74995: PUSH
74996: LD_INT 1
74998: ARRAY
74999: PPUSH
75000: LD_VAR 0 7
75004: PUSH
75005: LD_INT 2
75007: ARRAY
75008: PPUSH
75009: CALL_OW 428
75013: PUSH
75014: LD_INT 0
75016: EQUAL
75017: IFFALSE 75070
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75019: LD_VAR 0 1
75023: PPUSH
75024: LD_VAR 0 7
75028: PUSH
75029: LD_INT 1
75031: ARRAY
75032: PPUSH
75033: LD_VAR 0 7
75037: PUSH
75038: LD_INT 2
75040: ARRAY
75041: PPUSH
75042: LD_VAR 0 3
75046: PPUSH
75047: CALL_OW 48
// result := IsPlaced ( unit ) ;
75051: LD_ADDR_VAR 0 4
75055: PUSH
75056: LD_VAR 0 1
75060: PPUSH
75061: CALL_OW 305
75065: ST_TO_ADDR
// exit ;
75066: POP
75067: POP
75068: GO 75074
// end ; end ;
75070: GO 74949
75072: POP
75073: POP
// end ;
75074: LD_VAR 0 4
75078: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75079: LD_INT 0
75081: PPUSH
75082: PPUSH
75083: PPUSH
// if not side or side > 8 then
75084: LD_VAR 0 1
75088: NOT
75089: PUSH
75090: LD_VAR 0 1
75094: PUSH
75095: LD_INT 8
75097: GREATER
75098: OR
75099: IFFALSE 75103
// exit ;
75101: GO 75290
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75103: LD_ADDR_VAR 0 4
75107: PUSH
75108: LD_INT 22
75110: PUSH
75111: LD_VAR 0 1
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: PUSH
75120: LD_INT 21
75122: PUSH
75123: LD_INT 3
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: PUSH
75130: EMPTY
75131: LIST
75132: LIST
75133: PPUSH
75134: CALL_OW 69
75138: ST_TO_ADDR
// if not tmp then
75139: LD_VAR 0 4
75143: NOT
75144: IFFALSE 75148
// exit ;
75146: GO 75290
// enable_addtolog := true ;
75148: LD_ADDR_OWVAR 81
75152: PUSH
75153: LD_INT 1
75155: ST_TO_ADDR
// AddToLog ( [ ) ;
75156: LD_STRING [
75158: PPUSH
75159: CALL_OW 561
// for i in tmp do
75163: LD_ADDR_VAR 0 3
75167: PUSH
75168: LD_VAR 0 4
75172: PUSH
75173: FOR_IN
75174: IFFALSE 75281
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75176: LD_STRING [
75178: PUSH
75179: LD_VAR 0 3
75183: PPUSH
75184: CALL_OW 266
75188: STR
75189: PUSH
75190: LD_STRING , 
75192: STR
75193: PUSH
75194: LD_VAR 0 3
75198: PPUSH
75199: CALL_OW 250
75203: STR
75204: PUSH
75205: LD_STRING , 
75207: STR
75208: PUSH
75209: LD_VAR 0 3
75213: PPUSH
75214: CALL_OW 251
75218: STR
75219: PUSH
75220: LD_STRING , 
75222: STR
75223: PUSH
75224: LD_VAR 0 3
75228: PPUSH
75229: CALL_OW 254
75233: STR
75234: PUSH
75235: LD_STRING , 
75237: STR
75238: PUSH
75239: LD_VAR 0 3
75243: PPUSH
75244: LD_INT 1
75246: PPUSH
75247: CALL_OW 268
75251: STR
75252: PUSH
75253: LD_STRING , 
75255: STR
75256: PUSH
75257: LD_VAR 0 3
75261: PPUSH
75262: LD_INT 2
75264: PPUSH
75265: CALL_OW 268
75269: STR
75270: PUSH
75271: LD_STRING ],
75273: STR
75274: PPUSH
75275: CALL_OW 561
// end ;
75279: GO 75173
75281: POP
75282: POP
// AddToLog ( ]; ) ;
75283: LD_STRING ];
75285: PPUSH
75286: CALL_OW 561
// end ;
75290: LD_VAR 0 2
75294: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75295: LD_INT 0
75297: PPUSH
75298: PPUSH
75299: PPUSH
75300: PPUSH
75301: PPUSH
// if not area or not rate or not max then
75302: LD_VAR 0 1
75306: NOT
75307: PUSH
75308: LD_VAR 0 2
75312: NOT
75313: OR
75314: PUSH
75315: LD_VAR 0 4
75319: NOT
75320: OR
75321: IFFALSE 75325
// exit ;
75323: GO 75514
// while 1 do
75325: LD_INT 1
75327: IFFALSE 75514
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75329: LD_ADDR_VAR 0 9
75333: PUSH
75334: LD_VAR 0 1
75338: PPUSH
75339: LD_INT 1
75341: PPUSH
75342: CALL_OW 287
75346: PUSH
75347: LD_INT 10
75349: MUL
75350: ST_TO_ADDR
// r := rate / 10 ;
75351: LD_ADDR_VAR 0 7
75355: PUSH
75356: LD_VAR 0 2
75360: PUSH
75361: LD_INT 10
75363: DIVREAL
75364: ST_TO_ADDR
// time := 1 1$00 ;
75365: LD_ADDR_VAR 0 8
75369: PUSH
75370: LD_INT 2100
75372: ST_TO_ADDR
// if amount < min then
75373: LD_VAR 0 9
75377: PUSH
75378: LD_VAR 0 3
75382: LESS
75383: IFFALSE 75401
// r := r * 2 else
75385: LD_ADDR_VAR 0 7
75389: PUSH
75390: LD_VAR 0 7
75394: PUSH
75395: LD_INT 2
75397: MUL
75398: ST_TO_ADDR
75399: GO 75427
// if amount > max then
75401: LD_VAR 0 9
75405: PUSH
75406: LD_VAR 0 4
75410: GREATER
75411: IFFALSE 75427
// r := r / 2 ;
75413: LD_ADDR_VAR 0 7
75417: PUSH
75418: LD_VAR 0 7
75422: PUSH
75423: LD_INT 2
75425: DIVREAL
75426: ST_TO_ADDR
// time := time / r ;
75427: LD_ADDR_VAR 0 8
75431: PUSH
75432: LD_VAR 0 8
75436: PUSH
75437: LD_VAR 0 7
75441: DIVREAL
75442: ST_TO_ADDR
// if time < 0 then
75443: LD_VAR 0 8
75447: PUSH
75448: LD_INT 0
75450: LESS
75451: IFFALSE 75468
// time := time * - 1 ;
75453: LD_ADDR_VAR 0 8
75457: PUSH
75458: LD_VAR 0 8
75462: PUSH
75463: LD_INT 1
75465: NEG
75466: MUL
75467: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75468: LD_VAR 0 8
75472: PUSH
75473: LD_INT 35
75475: PPUSH
75476: LD_INT 875
75478: PPUSH
75479: CALL_OW 12
75483: PLUS
75484: PPUSH
75485: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75489: LD_INT 1
75491: PPUSH
75492: LD_INT 5
75494: PPUSH
75495: CALL_OW 12
75499: PPUSH
75500: LD_VAR 0 1
75504: PPUSH
75505: LD_INT 1
75507: PPUSH
75508: CALL_OW 55
// end ;
75512: GO 75325
// end ;
75514: LD_VAR 0 5
75518: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75519: LD_INT 0
75521: PPUSH
75522: PPUSH
75523: PPUSH
75524: PPUSH
75525: PPUSH
75526: PPUSH
75527: PPUSH
75528: PPUSH
// if not turrets or not factories then
75529: LD_VAR 0 1
75533: NOT
75534: PUSH
75535: LD_VAR 0 2
75539: NOT
75540: OR
75541: IFFALSE 75545
// exit ;
75543: GO 75852
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75545: LD_ADDR_VAR 0 10
75549: PUSH
75550: LD_INT 5
75552: PUSH
75553: LD_INT 6
75555: PUSH
75556: EMPTY
75557: LIST
75558: LIST
75559: PUSH
75560: LD_INT 2
75562: PUSH
75563: LD_INT 4
75565: PUSH
75566: EMPTY
75567: LIST
75568: LIST
75569: PUSH
75570: LD_INT 3
75572: PUSH
75573: LD_INT 5
75575: PUSH
75576: EMPTY
75577: LIST
75578: LIST
75579: PUSH
75580: EMPTY
75581: LIST
75582: LIST
75583: LIST
75584: PUSH
75585: LD_INT 24
75587: PUSH
75588: LD_INT 25
75590: PUSH
75591: EMPTY
75592: LIST
75593: LIST
75594: PUSH
75595: LD_INT 23
75597: PUSH
75598: LD_INT 27
75600: PUSH
75601: EMPTY
75602: LIST
75603: LIST
75604: PUSH
75605: EMPTY
75606: LIST
75607: LIST
75608: PUSH
75609: LD_INT 42
75611: PUSH
75612: LD_INT 43
75614: PUSH
75615: EMPTY
75616: LIST
75617: LIST
75618: PUSH
75619: LD_INT 44
75621: PUSH
75622: LD_INT 46
75624: PUSH
75625: EMPTY
75626: LIST
75627: LIST
75628: PUSH
75629: LD_INT 45
75631: PUSH
75632: LD_INT 47
75634: PUSH
75635: EMPTY
75636: LIST
75637: LIST
75638: PUSH
75639: EMPTY
75640: LIST
75641: LIST
75642: LIST
75643: PUSH
75644: EMPTY
75645: LIST
75646: LIST
75647: LIST
75648: ST_TO_ADDR
// result := [ ] ;
75649: LD_ADDR_VAR 0 3
75653: PUSH
75654: EMPTY
75655: ST_TO_ADDR
// for i in turrets do
75656: LD_ADDR_VAR 0 4
75660: PUSH
75661: LD_VAR 0 1
75665: PUSH
75666: FOR_IN
75667: IFFALSE 75850
// begin nat := GetNation ( i ) ;
75669: LD_ADDR_VAR 0 7
75673: PUSH
75674: LD_VAR 0 4
75678: PPUSH
75679: CALL_OW 248
75683: ST_TO_ADDR
// weapon := 0 ;
75684: LD_ADDR_VAR 0 8
75688: PUSH
75689: LD_INT 0
75691: ST_TO_ADDR
// if not nat then
75692: LD_VAR 0 7
75696: NOT
75697: IFFALSE 75701
// continue ;
75699: GO 75666
// for j in list [ nat ] do
75701: LD_ADDR_VAR 0 5
75705: PUSH
75706: LD_VAR 0 10
75710: PUSH
75711: LD_VAR 0 7
75715: ARRAY
75716: PUSH
75717: FOR_IN
75718: IFFALSE 75759
// if GetBWeapon ( i ) = j [ 1 ] then
75720: LD_VAR 0 4
75724: PPUSH
75725: CALL_OW 269
75729: PUSH
75730: LD_VAR 0 5
75734: PUSH
75735: LD_INT 1
75737: ARRAY
75738: EQUAL
75739: IFFALSE 75757
// begin weapon := j [ 2 ] ;
75741: LD_ADDR_VAR 0 8
75745: PUSH
75746: LD_VAR 0 5
75750: PUSH
75751: LD_INT 2
75753: ARRAY
75754: ST_TO_ADDR
// break ;
75755: GO 75759
// end ;
75757: GO 75717
75759: POP
75760: POP
// if not weapon then
75761: LD_VAR 0 8
75765: NOT
75766: IFFALSE 75770
// continue ;
75768: GO 75666
// for k in factories do
75770: LD_ADDR_VAR 0 6
75774: PUSH
75775: LD_VAR 0 2
75779: PUSH
75780: FOR_IN
75781: IFFALSE 75846
// begin weapons := AvailableWeaponList ( k ) ;
75783: LD_ADDR_VAR 0 9
75787: PUSH
75788: LD_VAR 0 6
75792: PPUSH
75793: CALL_OW 478
75797: ST_TO_ADDR
// if not weapons then
75798: LD_VAR 0 9
75802: NOT
75803: IFFALSE 75807
// continue ;
75805: GO 75780
// if weapon in weapons then
75807: LD_VAR 0 8
75811: PUSH
75812: LD_VAR 0 9
75816: IN
75817: IFFALSE 75844
// begin result := [ i , weapon ] ;
75819: LD_ADDR_VAR 0 3
75823: PUSH
75824: LD_VAR 0 4
75828: PUSH
75829: LD_VAR 0 8
75833: PUSH
75834: EMPTY
75835: LIST
75836: LIST
75837: ST_TO_ADDR
// exit ;
75838: POP
75839: POP
75840: POP
75841: POP
75842: GO 75852
// end ; end ;
75844: GO 75780
75846: POP
75847: POP
// end ;
75848: GO 75666
75850: POP
75851: POP
// end ;
75852: LD_VAR 0 3
75856: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75857: LD_INT 0
75859: PPUSH
// if not side or side > 8 then
75860: LD_VAR 0 3
75864: NOT
75865: PUSH
75866: LD_VAR 0 3
75870: PUSH
75871: LD_INT 8
75873: GREATER
75874: OR
75875: IFFALSE 75879
// exit ;
75877: GO 75938
// if not range then
75879: LD_VAR 0 4
75883: NOT
75884: IFFALSE 75895
// range := - 12 ;
75886: LD_ADDR_VAR 0 4
75890: PUSH
75891: LD_INT 12
75893: NEG
75894: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75895: LD_VAR 0 1
75899: PPUSH
75900: LD_VAR 0 2
75904: PPUSH
75905: LD_VAR 0 3
75909: PPUSH
75910: LD_VAR 0 4
75914: PPUSH
75915: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75919: LD_VAR 0 1
75923: PPUSH
75924: LD_VAR 0 2
75928: PPUSH
75929: LD_VAR 0 3
75933: PPUSH
75934: CALL_OW 331
// end ;
75938: LD_VAR 0 5
75942: RET
// export function Video ( mode ) ; begin
75943: LD_INT 0
75945: PPUSH
// ingame_video = mode ;
75946: LD_ADDR_OWVAR 52
75950: PUSH
75951: LD_VAR 0 1
75955: ST_TO_ADDR
// interface_hidden = mode ;
75956: LD_ADDR_OWVAR 54
75960: PUSH
75961: LD_VAR 0 1
75965: ST_TO_ADDR
// end ;
75966: LD_VAR 0 2
75970: RET
// export function Join ( array , element ) ; begin
75971: LD_INT 0
75973: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75974: LD_ADDR_VAR 0 3
75978: PUSH
75979: LD_VAR 0 1
75983: PPUSH
75984: LD_VAR 0 1
75988: PUSH
75989: LD_INT 1
75991: PLUS
75992: PPUSH
75993: LD_VAR 0 2
75997: PPUSH
75998: CALL_OW 1
76002: ST_TO_ADDR
// end ;
76003: LD_VAR 0 3
76007: RET
// export function JoinUnion ( array , element ) ; begin
76008: LD_INT 0
76010: PPUSH
// result := array union element ;
76011: LD_ADDR_VAR 0 3
76015: PUSH
76016: LD_VAR 0 1
76020: PUSH
76021: LD_VAR 0 2
76025: UNION
76026: ST_TO_ADDR
// end ;
76027: LD_VAR 0 3
76031: RET
// export function GetBehemoths ( side ) ; begin
76032: LD_INT 0
76034: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76035: LD_ADDR_VAR 0 2
76039: PUSH
76040: LD_INT 22
76042: PUSH
76043: LD_VAR 0 1
76047: PUSH
76048: EMPTY
76049: LIST
76050: LIST
76051: PUSH
76052: LD_INT 31
76054: PUSH
76055: LD_INT 25
76057: PUSH
76058: EMPTY
76059: LIST
76060: LIST
76061: PUSH
76062: EMPTY
76063: LIST
76064: LIST
76065: PPUSH
76066: CALL_OW 69
76070: ST_TO_ADDR
// end ;
76071: LD_VAR 0 2
76075: RET
// export function Shuffle ( array ) ; var i , index ; begin
76076: LD_INT 0
76078: PPUSH
76079: PPUSH
76080: PPUSH
// result := [ ] ;
76081: LD_ADDR_VAR 0 2
76085: PUSH
76086: EMPTY
76087: ST_TO_ADDR
// if not array then
76088: LD_VAR 0 1
76092: NOT
76093: IFFALSE 76097
// exit ;
76095: GO 76196
// Randomize ;
76097: CALL_OW 10
// for i = array downto 1 do
76101: LD_ADDR_VAR 0 3
76105: PUSH
76106: DOUBLE
76107: LD_VAR 0 1
76111: INC
76112: ST_TO_ADDR
76113: LD_INT 1
76115: PUSH
76116: FOR_DOWNTO
76117: IFFALSE 76194
// begin index := rand ( 1 , array ) ;
76119: LD_ADDR_VAR 0 4
76123: PUSH
76124: LD_INT 1
76126: PPUSH
76127: LD_VAR 0 1
76131: PPUSH
76132: CALL_OW 12
76136: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76137: LD_ADDR_VAR 0 2
76141: PUSH
76142: LD_VAR 0 2
76146: PPUSH
76147: LD_VAR 0 2
76151: PUSH
76152: LD_INT 1
76154: PLUS
76155: PPUSH
76156: LD_VAR 0 1
76160: PUSH
76161: LD_VAR 0 4
76165: ARRAY
76166: PPUSH
76167: CALL_OW 2
76171: ST_TO_ADDR
// array := Delete ( array , index ) ;
76172: LD_ADDR_VAR 0 1
76176: PUSH
76177: LD_VAR 0 1
76181: PPUSH
76182: LD_VAR 0 4
76186: PPUSH
76187: CALL_OW 3
76191: ST_TO_ADDR
// end ;
76192: GO 76116
76194: POP
76195: POP
// end ;
76196: LD_VAR 0 2
76200: RET
// export function GetBaseMaterials ( base ) ; begin
76201: LD_INT 0
76203: PPUSH
// result := [ 0 , 0 , 0 ] ;
76204: LD_ADDR_VAR 0 2
76208: PUSH
76209: LD_INT 0
76211: PUSH
76212: LD_INT 0
76214: PUSH
76215: LD_INT 0
76217: PUSH
76218: EMPTY
76219: LIST
76220: LIST
76221: LIST
76222: ST_TO_ADDR
// if not base then
76223: LD_VAR 0 1
76227: NOT
76228: IFFALSE 76232
// exit ;
76230: GO 76281
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76232: LD_ADDR_VAR 0 2
76236: PUSH
76237: LD_VAR 0 1
76241: PPUSH
76242: LD_INT 1
76244: PPUSH
76245: CALL_OW 275
76249: PUSH
76250: LD_VAR 0 1
76254: PPUSH
76255: LD_INT 2
76257: PPUSH
76258: CALL_OW 275
76262: PUSH
76263: LD_VAR 0 1
76267: PPUSH
76268: LD_INT 3
76270: PPUSH
76271: CALL_OW 275
76275: PUSH
76276: EMPTY
76277: LIST
76278: LIST
76279: LIST
76280: ST_TO_ADDR
// end ;
76281: LD_VAR 0 2
76285: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76286: LD_INT 0
76288: PPUSH
76289: PPUSH
// result := array ;
76290: LD_ADDR_VAR 0 3
76294: PUSH
76295: LD_VAR 0 1
76299: ST_TO_ADDR
// if size >= result then
76300: LD_VAR 0 2
76304: PUSH
76305: LD_VAR 0 3
76309: GREATEREQUAL
76310: IFFALSE 76314
// exit ;
76312: GO 76364
// if size then
76314: LD_VAR 0 2
76318: IFFALSE 76364
// for i := array downto size do
76320: LD_ADDR_VAR 0 4
76324: PUSH
76325: DOUBLE
76326: LD_VAR 0 1
76330: INC
76331: ST_TO_ADDR
76332: LD_VAR 0 2
76336: PUSH
76337: FOR_DOWNTO
76338: IFFALSE 76362
// result := Delete ( result , result ) ;
76340: LD_ADDR_VAR 0 3
76344: PUSH
76345: LD_VAR 0 3
76349: PPUSH
76350: LD_VAR 0 3
76354: PPUSH
76355: CALL_OW 3
76359: ST_TO_ADDR
76360: GO 76337
76362: POP
76363: POP
// end ;
76364: LD_VAR 0 3
76368: RET
// export function ComExit ( unit ) ; var tmp ; begin
76369: LD_INT 0
76371: PPUSH
76372: PPUSH
// if not IsInUnit ( unit ) then
76373: LD_VAR 0 1
76377: PPUSH
76378: CALL_OW 310
76382: NOT
76383: IFFALSE 76387
// exit ;
76385: GO 76447
// tmp := IsInUnit ( unit ) ;
76387: LD_ADDR_VAR 0 3
76391: PUSH
76392: LD_VAR 0 1
76396: PPUSH
76397: CALL_OW 310
76401: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76402: LD_VAR 0 3
76406: PPUSH
76407: CALL_OW 247
76411: PUSH
76412: LD_INT 2
76414: EQUAL
76415: IFFALSE 76428
// ComExitVehicle ( unit ) else
76417: LD_VAR 0 1
76421: PPUSH
76422: CALL_OW 121
76426: GO 76437
// ComExitBuilding ( unit ) ;
76428: LD_VAR 0 1
76432: PPUSH
76433: CALL_OW 122
// result := tmp ;
76437: LD_ADDR_VAR 0 2
76441: PUSH
76442: LD_VAR 0 3
76446: ST_TO_ADDR
// end ;
76447: LD_VAR 0 2
76451: RET
// export function ComExitAll ( units ) ; var i ; begin
76452: LD_INT 0
76454: PPUSH
76455: PPUSH
// if not units then
76456: LD_VAR 0 1
76460: NOT
76461: IFFALSE 76465
// exit ;
76463: GO 76491
// for i in units do
76465: LD_ADDR_VAR 0 3
76469: PUSH
76470: LD_VAR 0 1
76474: PUSH
76475: FOR_IN
76476: IFFALSE 76489
// ComExit ( i ) ;
76478: LD_VAR 0 3
76482: PPUSH
76483: CALL 76369 0 1
76487: GO 76475
76489: POP
76490: POP
// end ;
76491: LD_VAR 0 2
76495: RET
// export function ResetHc ; begin
76496: LD_INT 0
76498: PPUSH
// InitHc ;
76499: CALL_OW 19
// hc_importance := 0 ;
76503: LD_ADDR_OWVAR 32
76507: PUSH
76508: LD_INT 0
76510: ST_TO_ADDR
// end ;
76511: LD_VAR 0 1
76515: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76516: LD_INT 0
76518: PPUSH
76519: PPUSH
76520: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76521: LD_ADDR_VAR 0 6
76525: PUSH
76526: LD_VAR 0 1
76530: PUSH
76531: LD_VAR 0 3
76535: PLUS
76536: PUSH
76537: LD_INT 2
76539: DIV
76540: ST_TO_ADDR
// if _x < 0 then
76541: LD_VAR 0 6
76545: PUSH
76546: LD_INT 0
76548: LESS
76549: IFFALSE 76566
// _x := _x * - 1 ;
76551: LD_ADDR_VAR 0 6
76555: PUSH
76556: LD_VAR 0 6
76560: PUSH
76561: LD_INT 1
76563: NEG
76564: MUL
76565: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76566: LD_ADDR_VAR 0 7
76570: PUSH
76571: LD_VAR 0 2
76575: PUSH
76576: LD_VAR 0 4
76580: PLUS
76581: PUSH
76582: LD_INT 2
76584: DIV
76585: ST_TO_ADDR
// if _y < 0 then
76586: LD_VAR 0 7
76590: PUSH
76591: LD_INT 0
76593: LESS
76594: IFFALSE 76611
// _y := _y * - 1 ;
76596: LD_ADDR_VAR 0 7
76600: PUSH
76601: LD_VAR 0 7
76605: PUSH
76606: LD_INT 1
76608: NEG
76609: MUL
76610: ST_TO_ADDR
// result := [ _x , _y ] ;
76611: LD_ADDR_VAR 0 5
76615: PUSH
76616: LD_VAR 0 6
76620: PUSH
76621: LD_VAR 0 7
76625: PUSH
76626: EMPTY
76627: LIST
76628: LIST
76629: ST_TO_ADDR
// end ;
76630: LD_VAR 0 5
76634: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76635: LD_INT 0
76637: PPUSH
76638: PPUSH
76639: PPUSH
76640: PPUSH
// task := GetTaskList ( unit ) ;
76641: LD_ADDR_VAR 0 7
76645: PUSH
76646: LD_VAR 0 1
76650: PPUSH
76651: CALL_OW 437
76655: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76656: LD_VAR 0 7
76660: NOT
76661: PUSH
76662: LD_VAR 0 1
76666: PPUSH
76667: LD_VAR 0 2
76671: PPUSH
76672: CALL_OW 308
76676: NOT
76677: AND
76678: IFFALSE 76682
// exit ;
76680: GO 76800
// if IsInArea ( unit , area ) then
76682: LD_VAR 0 1
76686: PPUSH
76687: LD_VAR 0 2
76691: PPUSH
76692: CALL_OW 308
76696: IFFALSE 76714
// begin ComMoveToArea ( unit , goAway ) ;
76698: LD_VAR 0 1
76702: PPUSH
76703: LD_VAR 0 3
76707: PPUSH
76708: CALL_OW 113
// exit ;
76712: GO 76800
// end ; if task [ 1 ] [ 1 ] <> M then
76714: LD_VAR 0 7
76718: PUSH
76719: LD_INT 1
76721: ARRAY
76722: PUSH
76723: LD_INT 1
76725: ARRAY
76726: PUSH
76727: LD_STRING M
76729: NONEQUAL
76730: IFFALSE 76734
// exit ;
76732: GO 76800
// x := task [ 1 ] [ 2 ] ;
76734: LD_ADDR_VAR 0 5
76738: PUSH
76739: LD_VAR 0 7
76743: PUSH
76744: LD_INT 1
76746: ARRAY
76747: PUSH
76748: LD_INT 2
76750: ARRAY
76751: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76752: LD_ADDR_VAR 0 6
76756: PUSH
76757: LD_VAR 0 7
76761: PUSH
76762: LD_INT 1
76764: ARRAY
76765: PUSH
76766: LD_INT 3
76768: ARRAY
76769: ST_TO_ADDR
// if InArea ( x , y , area ) then
76770: LD_VAR 0 5
76774: PPUSH
76775: LD_VAR 0 6
76779: PPUSH
76780: LD_VAR 0 2
76784: PPUSH
76785: CALL_OW 309
76789: IFFALSE 76800
// ComStop ( unit ) ;
76791: LD_VAR 0 1
76795: PPUSH
76796: CALL_OW 141
// end ;
76800: LD_VAR 0 4
76804: RET
// export function Abs ( value ) ; begin
76805: LD_INT 0
76807: PPUSH
// result := value ;
76808: LD_ADDR_VAR 0 2
76812: PUSH
76813: LD_VAR 0 1
76817: ST_TO_ADDR
// if value < 0 then
76818: LD_VAR 0 1
76822: PUSH
76823: LD_INT 0
76825: LESS
76826: IFFALSE 76843
// result := value * - 1 ;
76828: LD_ADDR_VAR 0 2
76832: PUSH
76833: LD_VAR 0 1
76837: PUSH
76838: LD_INT 1
76840: NEG
76841: MUL
76842: ST_TO_ADDR
// end ;
76843: LD_VAR 0 2
76847: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76848: LD_INT 0
76850: PPUSH
76851: PPUSH
76852: PPUSH
76853: PPUSH
76854: PPUSH
76855: PPUSH
76856: PPUSH
76857: PPUSH
// if not unit or not building then
76858: LD_VAR 0 1
76862: NOT
76863: PUSH
76864: LD_VAR 0 2
76868: NOT
76869: OR
76870: IFFALSE 76874
// exit ;
76872: GO 77100
// x := GetX ( building ) ;
76874: LD_ADDR_VAR 0 4
76878: PUSH
76879: LD_VAR 0 2
76883: PPUSH
76884: CALL_OW 250
76888: ST_TO_ADDR
// y := GetY ( building ) ;
76889: LD_ADDR_VAR 0 6
76893: PUSH
76894: LD_VAR 0 2
76898: PPUSH
76899: CALL_OW 251
76903: ST_TO_ADDR
// d := GetDir ( building ) ;
76904: LD_ADDR_VAR 0 8
76908: PUSH
76909: LD_VAR 0 2
76913: PPUSH
76914: CALL_OW 254
76918: ST_TO_ADDR
// r := 4 ;
76919: LD_ADDR_VAR 0 9
76923: PUSH
76924: LD_INT 4
76926: ST_TO_ADDR
// for i := 1 to 5 do
76927: LD_ADDR_VAR 0 10
76931: PUSH
76932: DOUBLE
76933: LD_INT 1
76935: DEC
76936: ST_TO_ADDR
76937: LD_INT 5
76939: PUSH
76940: FOR_TO
76941: IFFALSE 77098
// begin _x := ShiftX ( x , d , r + i ) ;
76943: LD_ADDR_VAR 0 5
76947: PUSH
76948: LD_VAR 0 4
76952: PPUSH
76953: LD_VAR 0 8
76957: PPUSH
76958: LD_VAR 0 9
76962: PUSH
76963: LD_VAR 0 10
76967: PLUS
76968: PPUSH
76969: CALL_OW 272
76973: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76974: LD_ADDR_VAR 0 7
76978: PUSH
76979: LD_VAR 0 6
76983: PPUSH
76984: LD_VAR 0 8
76988: PPUSH
76989: LD_VAR 0 9
76993: PUSH
76994: LD_VAR 0 10
76998: PLUS
76999: PPUSH
77000: CALL_OW 273
77004: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77005: LD_VAR 0 5
77009: PPUSH
77010: LD_VAR 0 7
77014: PPUSH
77015: CALL_OW 488
77019: PUSH
77020: LD_VAR 0 5
77024: PPUSH
77025: LD_VAR 0 7
77029: PPUSH
77030: CALL_OW 428
77034: PPUSH
77035: CALL_OW 247
77039: PUSH
77040: LD_INT 3
77042: PUSH
77043: LD_INT 2
77045: PUSH
77046: EMPTY
77047: LIST
77048: LIST
77049: IN
77050: NOT
77051: AND
77052: IFFALSE 77096
// begin ComMoveXY ( unit , _x , _y ) ;
77054: LD_VAR 0 1
77058: PPUSH
77059: LD_VAR 0 5
77063: PPUSH
77064: LD_VAR 0 7
77068: PPUSH
77069: CALL_OW 111
// result := [ _x , _y ] ;
77073: LD_ADDR_VAR 0 3
77077: PUSH
77078: LD_VAR 0 5
77082: PUSH
77083: LD_VAR 0 7
77087: PUSH
77088: EMPTY
77089: LIST
77090: LIST
77091: ST_TO_ADDR
// exit ;
77092: POP
77093: POP
77094: GO 77100
// end ; end ;
77096: GO 76940
77098: POP
77099: POP
// end ;
77100: LD_VAR 0 3
77104: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77105: LD_INT 0
77107: PPUSH
77108: PPUSH
77109: PPUSH
// result := 0 ;
77110: LD_ADDR_VAR 0 3
77114: PUSH
77115: LD_INT 0
77117: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77118: LD_VAR 0 1
77122: PUSH
77123: LD_INT 0
77125: LESS
77126: PUSH
77127: LD_VAR 0 1
77131: PUSH
77132: LD_INT 8
77134: GREATER
77135: OR
77136: PUSH
77137: LD_VAR 0 2
77141: PUSH
77142: LD_INT 0
77144: LESS
77145: OR
77146: PUSH
77147: LD_VAR 0 2
77151: PUSH
77152: LD_INT 8
77154: GREATER
77155: OR
77156: IFFALSE 77160
// exit ;
77158: GO 77235
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77160: LD_ADDR_VAR 0 4
77164: PUSH
77165: LD_INT 22
77167: PUSH
77168: LD_VAR 0 2
77172: PUSH
77173: EMPTY
77174: LIST
77175: LIST
77176: PPUSH
77177: CALL_OW 69
77181: PUSH
77182: FOR_IN
77183: IFFALSE 77233
// begin un := UnitShoot ( i ) ;
77185: LD_ADDR_VAR 0 5
77189: PUSH
77190: LD_VAR 0 4
77194: PPUSH
77195: CALL_OW 504
77199: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77200: LD_VAR 0 5
77204: PPUSH
77205: CALL_OW 255
77209: PUSH
77210: LD_VAR 0 1
77214: EQUAL
77215: IFFALSE 77231
// begin result := un ;
77217: LD_ADDR_VAR 0 3
77221: PUSH
77222: LD_VAR 0 5
77226: ST_TO_ADDR
// exit ;
77227: POP
77228: POP
77229: GO 77235
// end ; end ;
77231: GO 77182
77233: POP
77234: POP
// end ;
77235: LD_VAR 0 3
77239: RET
// export function GetCargoBay ( units ) ; begin
77240: LD_INT 0
77242: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77243: LD_ADDR_VAR 0 2
77247: PUSH
77248: LD_VAR 0 1
77252: PPUSH
77253: LD_INT 2
77255: PUSH
77256: LD_INT 34
77258: PUSH
77259: LD_INT 12
77261: PUSH
77262: EMPTY
77263: LIST
77264: LIST
77265: PUSH
77266: LD_INT 34
77268: PUSH
77269: LD_INT 51
77271: PUSH
77272: EMPTY
77273: LIST
77274: LIST
77275: PUSH
77276: LD_INT 34
77278: PUSH
77279: LD_INT 32
77281: PUSH
77282: EMPTY
77283: LIST
77284: LIST
77285: PUSH
77286: LD_INT 34
77288: PUSH
77289: LD_INT 89
77291: PUSH
77292: EMPTY
77293: LIST
77294: LIST
77295: PUSH
77296: EMPTY
77297: LIST
77298: LIST
77299: LIST
77300: LIST
77301: LIST
77302: PPUSH
77303: CALL_OW 72
77307: ST_TO_ADDR
// end ;
77308: LD_VAR 0 2
77312: RET
// export function Negate ( value ) ; begin
77313: LD_INT 0
77315: PPUSH
// result := not value ;
77316: LD_ADDR_VAR 0 2
77320: PUSH
77321: LD_VAR 0 1
77325: NOT
77326: ST_TO_ADDR
// end ;
77327: LD_VAR 0 2
77331: RET
// export function Inc ( value ) ; begin
77332: LD_INT 0
77334: PPUSH
// result := value + 1 ;
77335: LD_ADDR_VAR 0 2
77339: PUSH
77340: LD_VAR 0 1
77344: PUSH
77345: LD_INT 1
77347: PLUS
77348: ST_TO_ADDR
// end ;
77349: LD_VAR 0 2
77353: RET
// export function Dec ( value ) ; begin
77354: LD_INT 0
77356: PPUSH
// result := value - 1 ;
77357: LD_ADDR_VAR 0 2
77361: PUSH
77362: LD_VAR 0 1
77366: PUSH
77367: LD_INT 1
77369: MINUS
77370: ST_TO_ADDR
// end ;
77371: LD_VAR 0 2
77375: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77376: LD_INT 0
77378: PPUSH
77379: PPUSH
77380: PPUSH
77381: PPUSH
77382: PPUSH
77383: PPUSH
77384: PPUSH
77385: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77386: LD_VAR 0 1
77390: PPUSH
77391: LD_VAR 0 2
77395: PPUSH
77396: CALL_OW 488
77400: NOT
77401: PUSH
77402: LD_VAR 0 3
77406: PPUSH
77407: LD_VAR 0 4
77411: PPUSH
77412: CALL_OW 488
77416: NOT
77417: OR
77418: IFFALSE 77431
// begin result := - 1 ;
77420: LD_ADDR_VAR 0 5
77424: PUSH
77425: LD_INT 1
77427: NEG
77428: ST_TO_ADDR
// exit ;
77429: GO 77666
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77431: LD_ADDR_VAR 0 12
77435: PUSH
77436: LD_VAR 0 1
77440: PPUSH
77441: LD_VAR 0 2
77445: PPUSH
77446: LD_VAR 0 3
77450: PPUSH
77451: LD_VAR 0 4
77455: PPUSH
77456: CALL 76516 0 4
77460: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77461: LD_ADDR_VAR 0 11
77465: PUSH
77466: LD_VAR 0 1
77470: PPUSH
77471: LD_VAR 0 2
77475: PPUSH
77476: LD_VAR 0 12
77480: PUSH
77481: LD_INT 1
77483: ARRAY
77484: PPUSH
77485: LD_VAR 0 12
77489: PUSH
77490: LD_INT 2
77492: ARRAY
77493: PPUSH
77494: CALL_OW 298
77498: ST_TO_ADDR
// distance := 9999 ;
77499: LD_ADDR_VAR 0 10
77503: PUSH
77504: LD_INT 9999
77506: ST_TO_ADDR
// for i := 0 to 5 do
77507: LD_ADDR_VAR 0 6
77511: PUSH
77512: DOUBLE
77513: LD_INT 0
77515: DEC
77516: ST_TO_ADDR
77517: LD_INT 5
77519: PUSH
77520: FOR_TO
77521: IFFALSE 77664
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77523: LD_ADDR_VAR 0 7
77527: PUSH
77528: LD_VAR 0 1
77532: PPUSH
77533: LD_VAR 0 6
77537: PPUSH
77538: LD_VAR 0 11
77542: PPUSH
77543: CALL_OW 272
77547: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77548: LD_ADDR_VAR 0 8
77552: PUSH
77553: LD_VAR 0 2
77557: PPUSH
77558: LD_VAR 0 6
77562: PPUSH
77563: LD_VAR 0 11
77567: PPUSH
77568: CALL_OW 273
77572: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77573: LD_VAR 0 7
77577: PPUSH
77578: LD_VAR 0 8
77582: PPUSH
77583: CALL_OW 488
77587: NOT
77588: IFFALSE 77592
// continue ;
77590: GO 77520
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77592: LD_ADDR_VAR 0 9
77596: PUSH
77597: LD_VAR 0 12
77601: PUSH
77602: LD_INT 1
77604: ARRAY
77605: PPUSH
77606: LD_VAR 0 12
77610: PUSH
77611: LD_INT 2
77613: ARRAY
77614: PPUSH
77615: LD_VAR 0 7
77619: PPUSH
77620: LD_VAR 0 8
77624: PPUSH
77625: CALL_OW 298
77629: ST_TO_ADDR
// if tmp < distance then
77630: LD_VAR 0 9
77634: PUSH
77635: LD_VAR 0 10
77639: LESS
77640: IFFALSE 77662
// begin result := i ;
77642: LD_ADDR_VAR 0 5
77646: PUSH
77647: LD_VAR 0 6
77651: ST_TO_ADDR
// distance := tmp ;
77652: LD_ADDR_VAR 0 10
77656: PUSH
77657: LD_VAR 0 9
77661: ST_TO_ADDR
// end ; end ;
77662: GO 77520
77664: POP
77665: POP
// end ;
77666: LD_VAR 0 5
77670: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77671: LD_INT 0
77673: PPUSH
77674: PPUSH
// if not driver or not IsInUnit ( driver ) then
77675: LD_VAR 0 1
77679: NOT
77680: PUSH
77681: LD_VAR 0 1
77685: PPUSH
77686: CALL_OW 310
77690: NOT
77691: OR
77692: IFFALSE 77696
// exit ;
77694: GO 77786
// vehicle := IsInUnit ( driver ) ;
77696: LD_ADDR_VAR 0 3
77700: PUSH
77701: LD_VAR 0 1
77705: PPUSH
77706: CALL_OW 310
77710: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77711: LD_VAR 0 1
77715: PPUSH
77716: LD_STRING \
77718: PUSH
77719: LD_INT 0
77721: PUSH
77722: LD_INT 0
77724: PUSH
77725: LD_INT 0
77727: PUSH
77728: LD_INT 0
77730: PUSH
77731: LD_INT 0
77733: PUSH
77734: LD_INT 0
77736: PUSH
77737: EMPTY
77738: LIST
77739: LIST
77740: LIST
77741: LIST
77742: LIST
77743: LIST
77744: LIST
77745: PUSH
77746: LD_STRING E
77748: PUSH
77749: LD_INT 0
77751: PUSH
77752: LD_INT 0
77754: PUSH
77755: LD_VAR 0 3
77759: PUSH
77760: LD_INT 0
77762: PUSH
77763: LD_INT 0
77765: PUSH
77766: LD_INT 0
77768: PUSH
77769: EMPTY
77770: LIST
77771: LIST
77772: LIST
77773: LIST
77774: LIST
77775: LIST
77776: LIST
77777: PUSH
77778: EMPTY
77779: LIST
77780: LIST
77781: PPUSH
77782: CALL_OW 446
// end ;
77786: LD_VAR 0 2
77790: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77791: LD_INT 0
77793: PPUSH
77794: PPUSH
// if not driver or not IsInUnit ( driver ) then
77795: LD_VAR 0 1
77799: NOT
77800: PUSH
77801: LD_VAR 0 1
77805: PPUSH
77806: CALL_OW 310
77810: NOT
77811: OR
77812: IFFALSE 77816
// exit ;
77814: GO 77906
// vehicle := IsInUnit ( driver ) ;
77816: LD_ADDR_VAR 0 3
77820: PUSH
77821: LD_VAR 0 1
77825: PPUSH
77826: CALL_OW 310
77830: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77831: LD_VAR 0 1
77835: PPUSH
77836: LD_STRING \
77838: PUSH
77839: LD_INT 0
77841: PUSH
77842: LD_INT 0
77844: PUSH
77845: LD_INT 0
77847: PUSH
77848: LD_INT 0
77850: PUSH
77851: LD_INT 0
77853: PUSH
77854: LD_INT 0
77856: PUSH
77857: EMPTY
77858: LIST
77859: LIST
77860: LIST
77861: LIST
77862: LIST
77863: LIST
77864: LIST
77865: PUSH
77866: LD_STRING E
77868: PUSH
77869: LD_INT 0
77871: PUSH
77872: LD_INT 0
77874: PUSH
77875: LD_VAR 0 3
77879: PUSH
77880: LD_INT 0
77882: PUSH
77883: LD_INT 0
77885: PUSH
77886: LD_INT 0
77888: PUSH
77889: EMPTY
77890: LIST
77891: LIST
77892: LIST
77893: LIST
77894: LIST
77895: LIST
77896: LIST
77897: PUSH
77898: EMPTY
77899: LIST
77900: LIST
77901: PPUSH
77902: CALL_OW 447
// end ;
77906: LD_VAR 0 2
77910: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77911: LD_INT 0
77913: PPUSH
77914: PPUSH
77915: PPUSH
// tmp := [ ] ;
77916: LD_ADDR_VAR 0 5
77920: PUSH
77921: EMPTY
77922: ST_TO_ADDR
// for i in units do
77923: LD_ADDR_VAR 0 4
77927: PUSH
77928: LD_VAR 0 1
77932: PUSH
77933: FOR_IN
77934: IFFALSE 77972
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77936: LD_ADDR_VAR 0 5
77940: PUSH
77941: LD_VAR 0 5
77945: PPUSH
77946: LD_VAR 0 5
77950: PUSH
77951: LD_INT 1
77953: PLUS
77954: PPUSH
77955: LD_VAR 0 4
77959: PPUSH
77960: CALL_OW 256
77964: PPUSH
77965: CALL_OW 2
77969: ST_TO_ADDR
77970: GO 77933
77972: POP
77973: POP
// if not tmp then
77974: LD_VAR 0 5
77978: NOT
77979: IFFALSE 77983
// exit ;
77981: GO 78031
// if asc then
77983: LD_VAR 0 2
77987: IFFALSE 78011
// result := SortListByListAsc ( units , tmp ) else
77989: LD_ADDR_VAR 0 3
77993: PUSH
77994: LD_VAR 0 1
77998: PPUSH
77999: LD_VAR 0 5
78003: PPUSH
78004: CALL_OW 76
78008: ST_TO_ADDR
78009: GO 78031
// result := SortListByListDesc ( units , tmp ) ;
78011: LD_ADDR_VAR 0 3
78015: PUSH
78016: LD_VAR 0 1
78020: PPUSH
78021: LD_VAR 0 5
78025: PPUSH
78026: CALL_OW 77
78030: ST_TO_ADDR
// end ;
78031: LD_VAR 0 3
78035: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78036: LD_INT 0
78038: PPUSH
78039: PPUSH
// task := GetTaskList ( mech ) ;
78040: LD_ADDR_VAR 0 4
78044: PUSH
78045: LD_VAR 0 1
78049: PPUSH
78050: CALL_OW 437
78054: ST_TO_ADDR
// if not task then
78055: LD_VAR 0 4
78059: NOT
78060: IFFALSE 78064
// exit ;
78062: GO 78106
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78064: LD_ADDR_VAR 0 3
78068: PUSH
78069: LD_VAR 0 4
78073: PUSH
78074: LD_INT 1
78076: ARRAY
78077: PUSH
78078: LD_INT 1
78080: ARRAY
78081: PUSH
78082: LD_STRING r
78084: EQUAL
78085: PUSH
78086: LD_VAR 0 4
78090: PUSH
78091: LD_INT 1
78093: ARRAY
78094: PUSH
78095: LD_INT 4
78097: ARRAY
78098: PUSH
78099: LD_VAR 0 2
78103: EQUAL
78104: AND
78105: ST_TO_ADDR
// end ;
78106: LD_VAR 0 3
78110: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78111: LD_INT 0
78113: PPUSH
// SetDir ( unit , d ) ;
78114: LD_VAR 0 1
78118: PPUSH
78119: LD_VAR 0 4
78123: PPUSH
78124: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78128: LD_VAR 0 1
78132: PPUSH
78133: LD_VAR 0 2
78137: PPUSH
78138: LD_VAR 0 3
78142: PPUSH
78143: LD_VAR 0 5
78147: PPUSH
78148: CALL_OW 48
// end ;
78152: LD_VAR 0 6
78156: RET
// export function ToNaturalNumber ( number ) ; begin
78157: LD_INT 0
78159: PPUSH
// result := number div 1 ;
78160: LD_ADDR_VAR 0 2
78164: PUSH
78165: LD_VAR 0 1
78169: PUSH
78170: LD_INT 1
78172: DIV
78173: ST_TO_ADDR
// if number < 0 then
78174: LD_VAR 0 1
78178: PUSH
78179: LD_INT 0
78181: LESS
78182: IFFALSE 78192
// result := 0 ;
78184: LD_ADDR_VAR 0 2
78188: PUSH
78189: LD_INT 0
78191: ST_TO_ADDR
// end ;
78192: LD_VAR 0 2
78196: RET
// export function SortByClass ( units , class ) ; var un ; begin
78197: LD_INT 0
78199: PPUSH
78200: PPUSH
// if not units or not class then
78201: LD_VAR 0 1
78205: NOT
78206: PUSH
78207: LD_VAR 0 2
78211: NOT
78212: OR
78213: IFFALSE 78217
// exit ;
78215: GO 78312
// result := [ ] ;
78217: LD_ADDR_VAR 0 3
78221: PUSH
78222: EMPTY
78223: ST_TO_ADDR
// for un in units do
78224: LD_ADDR_VAR 0 4
78228: PUSH
78229: LD_VAR 0 1
78233: PUSH
78234: FOR_IN
78235: IFFALSE 78310
// if GetClass ( un ) = class then
78237: LD_VAR 0 4
78241: PPUSH
78242: CALL_OW 257
78246: PUSH
78247: LD_VAR 0 2
78251: EQUAL
78252: IFFALSE 78279
// result := Insert ( result , 1 , un ) else
78254: LD_ADDR_VAR 0 3
78258: PUSH
78259: LD_VAR 0 3
78263: PPUSH
78264: LD_INT 1
78266: PPUSH
78267: LD_VAR 0 4
78271: PPUSH
78272: CALL_OW 2
78276: ST_TO_ADDR
78277: GO 78308
// result := Replace ( result , result + 1 , un ) ;
78279: LD_ADDR_VAR 0 3
78283: PUSH
78284: LD_VAR 0 3
78288: PPUSH
78289: LD_VAR 0 3
78293: PUSH
78294: LD_INT 1
78296: PLUS
78297: PPUSH
78298: LD_VAR 0 4
78302: PPUSH
78303: CALL_OW 1
78307: ST_TO_ADDR
78308: GO 78234
78310: POP
78311: POP
// end ;
78312: LD_VAR 0 3
78316: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78317: LD_INT 0
78319: PPUSH
78320: PPUSH
78321: PPUSH
78322: PPUSH
78323: PPUSH
78324: PPUSH
78325: PPUSH
// result := [ ] ;
78326: LD_ADDR_VAR 0 4
78330: PUSH
78331: EMPTY
78332: ST_TO_ADDR
// if x - r < 0 then
78333: LD_VAR 0 1
78337: PUSH
78338: LD_VAR 0 3
78342: MINUS
78343: PUSH
78344: LD_INT 0
78346: LESS
78347: IFFALSE 78359
// min_x := 0 else
78349: LD_ADDR_VAR 0 8
78353: PUSH
78354: LD_INT 0
78356: ST_TO_ADDR
78357: GO 78375
// min_x := x - r ;
78359: LD_ADDR_VAR 0 8
78363: PUSH
78364: LD_VAR 0 1
78368: PUSH
78369: LD_VAR 0 3
78373: MINUS
78374: ST_TO_ADDR
// if y - r < 0 then
78375: LD_VAR 0 2
78379: PUSH
78380: LD_VAR 0 3
78384: MINUS
78385: PUSH
78386: LD_INT 0
78388: LESS
78389: IFFALSE 78401
// min_y := 0 else
78391: LD_ADDR_VAR 0 7
78395: PUSH
78396: LD_INT 0
78398: ST_TO_ADDR
78399: GO 78417
// min_y := y - r ;
78401: LD_ADDR_VAR 0 7
78405: PUSH
78406: LD_VAR 0 2
78410: PUSH
78411: LD_VAR 0 3
78415: MINUS
78416: ST_TO_ADDR
// max_x := x + r ;
78417: LD_ADDR_VAR 0 9
78421: PUSH
78422: LD_VAR 0 1
78426: PUSH
78427: LD_VAR 0 3
78431: PLUS
78432: ST_TO_ADDR
// max_y := y + r ;
78433: LD_ADDR_VAR 0 10
78437: PUSH
78438: LD_VAR 0 2
78442: PUSH
78443: LD_VAR 0 3
78447: PLUS
78448: ST_TO_ADDR
// for _x = min_x to max_x do
78449: LD_ADDR_VAR 0 5
78453: PUSH
78454: DOUBLE
78455: LD_VAR 0 8
78459: DEC
78460: ST_TO_ADDR
78461: LD_VAR 0 9
78465: PUSH
78466: FOR_TO
78467: IFFALSE 78568
// for _y = min_y to max_y do
78469: LD_ADDR_VAR 0 6
78473: PUSH
78474: DOUBLE
78475: LD_VAR 0 7
78479: DEC
78480: ST_TO_ADDR
78481: LD_VAR 0 10
78485: PUSH
78486: FOR_TO
78487: IFFALSE 78564
// begin if not ValidHex ( _x , _y ) then
78489: LD_VAR 0 5
78493: PPUSH
78494: LD_VAR 0 6
78498: PPUSH
78499: CALL_OW 488
78503: NOT
78504: IFFALSE 78508
// continue ;
78506: GO 78486
// if GetResourceTypeXY ( _x , _y ) then
78508: LD_VAR 0 5
78512: PPUSH
78513: LD_VAR 0 6
78517: PPUSH
78518: CALL_OW 283
78522: IFFALSE 78562
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78524: LD_ADDR_VAR 0 4
78528: PUSH
78529: LD_VAR 0 4
78533: PPUSH
78534: LD_VAR 0 4
78538: PUSH
78539: LD_INT 1
78541: PLUS
78542: PPUSH
78543: LD_VAR 0 5
78547: PUSH
78548: LD_VAR 0 6
78552: PUSH
78553: EMPTY
78554: LIST
78555: LIST
78556: PPUSH
78557: CALL_OW 1
78561: ST_TO_ADDR
// end ;
78562: GO 78486
78564: POP
78565: POP
78566: GO 78466
78568: POP
78569: POP
// end ;
78570: LD_VAR 0 4
78574: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78575: LD_INT 0
78577: PPUSH
78578: PPUSH
78579: PPUSH
78580: PPUSH
78581: PPUSH
78582: PPUSH
78583: PPUSH
78584: PPUSH
// if not units then
78585: LD_VAR 0 1
78589: NOT
78590: IFFALSE 78594
// exit ;
78592: GO 79118
// result := UnitFilter ( units , [ f_ok ] ) ;
78594: LD_ADDR_VAR 0 3
78598: PUSH
78599: LD_VAR 0 1
78603: PPUSH
78604: LD_INT 50
78606: PUSH
78607: EMPTY
78608: LIST
78609: PPUSH
78610: CALL_OW 72
78614: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78615: LD_ADDR_VAR 0 8
78619: PUSH
78620: LD_VAR 0 1
78624: PUSH
78625: LD_INT 1
78627: ARRAY
78628: PPUSH
78629: CALL_OW 255
78633: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78634: LD_ADDR_VAR 0 10
78638: PUSH
78639: LD_INT 29
78641: PUSH
78642: LD_INT 91
78644: PUSH
78645: LD_INT 49
78647: PUSH
78648: EMPTY
78649: LIST
78650: LIST
78651: LIST
78652: ST_TO_ADDR
// if not result then
78653: LD_VAR 0 3
78657: NOT
78658: IFFALSE 78662
// exit ;
78660: GO 79118
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78662: LD_ADDR_VAR 0 5
78666: PUSH
78667: LD_INT 81
78669: PUSH
78670: LD_VAR 0 8
78674: PUSH
78675: EMPTY
78676: LIST
78677: LIST
78678: PPUSH
78679: CALL_OW 69
78683: ST_TO_ADDR
// for i in result do
78684: LD_ADDR_VAR 0 4
78688: PUSH
78689: LD_VAR 0 3
78693: PUSH
78694: FOR_IN
78695: IFFALSE 79116
// begin tag := GetTag ( i ) + 1 ;
78697: LD_ADDR_VAR 0 9
78701: PUSH
78702: LD_VAR 0 4
78706: PPUSH
78707: CALL_OW 110
78711: PUSH
78712: LD_INT 1
78714: PLUS
78715: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78716: LD_ADDR_VAR 0 7
78720: PUSH
78721: LD_VAR 0 4
78725: PPUSH
78726: CALL_OW 250
78730: PPUSH
78731: LD_VAR 0 4
78735: PPUSH
78736: CALL_OW 251
78740: PPUSH
78741: LD_INT 6
78743: PPUSH
78744: CALL 78317 0 3
78748: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78749: LD_VAR 0 4
78753: PPUSH
78754: CALL_OW 247
78758: PUSH
78759: LD_INT 2
78761: EQUAL
78762: PUSH
78763: LD_VAR 0 7
78767: AND
78768: PUSH
78769: LD_VAR 0 4
78773: PPUSH
78774: CALL_OW 264
78778: PUSH
78779: LD_VAR 0 10
78783: IN
78784: NOT
78785: AND
78786: IFFALSE 78825
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78788: LD_VAR 0 4
78792: PPUSH
78793: LD_VAR 0 7
78797: PUSH
78798: LD_INT 1
78800: ARRAY
78801: PUSH
78802: LD_INT 1
78804: ARRAY
78805: PPUSH
78806: LD_VAR 0 7
78810: PUSH
78811: LD_INT 1
78813: ARRAY
78814: PUSH
78815: LD_INT 2
78817: ARRAY
78818: PPUSH
78819: CALL_OW 116
78823: GO 79114
// if path > tag then
78825: LD_VAR 0 2
78829: PUSH
78830: LD_VAR 0 9
78834: GREATER
78835: IFFALSE 79043
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78837: LD_ADDR_VAR 0 6
78841: PUSH
78842: LD_VAR 0 5
78846: PPUSH
78847: LD_INT 91
78849: PUSH
78850: LD_VAR 0 4
78854: PUSH
78855: LD_INT 8
78857: PUSH
78858: EMPTY
78859: LIST
78860: LIST
78861: LIST
78862: PPUSH
78863: CALL_OW 72
78867: ST_TO_ADDR
// if nearEnemy then
78868: LD_VAR 0 6
78872: IFFALSE 78941
// begin if GetWeapon ( i ) = ru_time_lapser then
78874: LD_VAR 0 4
78878: PPUSH
78879: CALL_OW 264
78883: PUSH
78884: LD_INT 49
78886: EQUAL
78887: IFFALSE 78915
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78889: LD_VAR 0 4
78893: PPUSH
78894: LD_VAR 0 6
78898: PPUSH
78899: LD_VAR 0 4
78903: PPUSH
78904: CALL_OW 74
78908: PPUSH
78909: CALL_OW 112
78913: GO 78939
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78915: LD_VAR 0 4
78919: PPUSH
78920: LD_VAR 0 6
78924: PPUSH
78925: LD_VAR 0 4
78929: PPUSH
78930: CALL_OW 74
78934: PPUSH
78935: CALL_OW 115
// end else
78939: GO 79041
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78941: LD_VAR 0 4
78945: PPUSH
78946: LD_VAR 0 2
78950: PUSH
78951: LD_VAR 0 9
78955: ARRAY
78956: PUSH
78957: LD_INT 1
78959: ARRAY
78960: PPUSH
78961: LD_VAR 0 2
78965: PUSH
78966: LD_VAR 0 9
78970: ARRAY
78971: PUSH
78972: LD_INT 2
78974: ARRAY
78975: PPUSH
78976: CALL_OW 297
78980: PUSH
78981: LD_INT 6
78983: GREATER
78984: IFFALSE 79027
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78986: LD_VAR 0 4
78990: PPUSH
78991: LD_VAR 0 2
78995: PUSH
78996: LD_VAR 0 9
79000: ARRAY
79001: PUSH
79002: LD_INT 1
79004: ARRAY
79005: PPUSH
79006: LD_VAR 0 2
79010: PUSH
79011: LD_VAR 0 9
79015: ARRAY
79016: PUSH
79017: LD_INT 2
79019: ARRAY
79020: PPUSH
79021: CALL_OW 114
79025: GO 79041
// SetTag ( i , tag ) ;
79027: LD_VAR 0 4
79031: PPUSH
79032: LD_VAR 0 9
79036: PPUSH
79037: CALL_OW 109
// end else
79041: GO 79114
// if enemy then
79043: LD_VAR 0 5
79047: IFFALSE 79114
// begin if GetWeapon ( i ) = ru_time_lapser then
79049: LD_VAR 0 4
79053: PPUSH
79054: CALL_OW 264
79058: PUSH
79059: LD_INT 49
79061: EQUAL
79062: IFFALSE 79090
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79064: LD_VAR 0 4
79068: PPUSH
79069: LD_VAR 0 5
79073: PPUSH
79074: LD_VAR 0 4
79078: PPUSH
79079: CALL_OW 74
79083: PPUSH
79084: CALL_OW 112
79088: GO 79114
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79090: LD_VAR 0 4
79094: PPUSH
79095: LD_VAR 0 5
79099: PPUSH
79100: LD_VAR 0 4
79104: PPUSH
79105: CALL_OW 74
79109: PPUSH
79110: CALL_OW 115
// end ; end ;
79114: GO 78694
79116: POP
79117: POP
// end ;
79118: LD_VAR 0 3
79122: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79123: LD_INT 0
79125: PPUSH
79126: PPUSH
79127: PPUSH
// if not unit or IsInUnit ( unit ) then
79128: LD_VAR 0 1
79132: NOT
79133: PUSH
79134: LD_VAR 0 1
79138: PPUSH
79139: CALL_OW 310
79143: OR
79144: IFFALSE 79148
// exit ;
79146: GO 79239
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79148: LD_ADDR_VAR 0 4
79152: PUSH
79153: LD_VAR 0 1
79157: PPUSH
79158: CALL_OW 250
79162: PPUSH
79163: LD_VAR 0 2
79167: PPUSH
79168: LD_INT 1
79170: PPUSH
79171: CALL_OW 272
79175: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79176: LD_ADDR_VAR 0 5
79180: PUSH
79181: LD_VAR 0 1
79185: PPUSH
79186: CALL_OW 251
79190: PPUSH
79191: LD_VAR 0 2
79195: PPUSH
79196: LD_INT 1
79198: PPUSH
79199: CALL_OW 273
79203: ST_TO_ADDR
// if ValidHex ( x , y ) then
79204: LD_VAR 0 4
79208: PPUSH
79209: LD_VAR 0 5
79213: PPUSH
79214: CALL_OW 488
79218: IFFALSE 79239
// ComTurnXY ( unit , x , y ) ;
79220: LD_VAR 0 1
79224: PPUSH
79225: LD_VAR 0 4
79229: PPUSH
79230: LD_VAR 0 5
79234: PPUSH
79235: CALL_OW 118
// end ;
79239: LD_VAR 0 3
79243: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79244: LD_INT 0
79246: PPUSH
79247: PPUSH
// result := false ;
79248: LD_ADDR_VAR 0 3
79252: PUSH
79253: LD_INT 0
79255: ST_TO_ADDR
// if not units then
79256: LD_VAR 0 2
79260: NOT
79261: IFFALSE 79265
// exit ;
79263: GO 79310
// for i in units do
79265: LD_ADDR_VAR 0 4
79269: PUSH
79270: LD_VAR 0 2
79274: PUSH
79275: FOR_IN
79276: IFFALSE 79308
// if See ( side , i ) then
79278: LD_VAR 0 1
79282: PPUSH
79283: LD_VAR 0 4
79287: PPUSH
79288: CALL_OW 292
79292: IFFALSE 79306
// begin result := true ;
79294: LD_ADDR_VAR 0 3
79298: PUSH
79299: LD_INT 1
79301: ST_TO_ADDR
// exit ;
79302: POP
79303: POP
79304: GO 79310
// end ;
79306: GO 79275
79308: POP
79309: POP
// end ;
79310: LD_VAR 0 3
79314: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79315: LD_INT 0
79317: PPUSH
79318: PPUSH
79319: PPUSH
79320: PPUSH
// if not unit or not points then
79321: LD_VAR 0 1
79325: NOT
79326: PUSH
79327: LD_VAR 0 2
79331: NOT
79332: OR
79333: IFFALSE 79337
// exit ;
79335: GO 79427
// dist := 99999 ;
79337: LD_ADDR_VAR 0 5
79341: PUSH
79342: LD_INT 99999
79344: ST_TO_ADDR
// for i in points do
79345: LD_ADDR_VAR 0 4
79349: PUSH
79350: LD_VAR 0 2
79354: PUSH
79355: FOR_IN
79356: IFFALSE 79425
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79358: LD_ADDR_VAR 0 6
79362: PUSH
79363: LD_VAR 0 1
79367: PPUSH
79368: LD_VAR 0 4
79372: PUSH
79373: LD_INT 1
79375: ARRAY
79376: PPUSH
79377: LD_VAR 0 4
79381: PUSH
79382: LD_INT 2
79384: ARRAY
79385: PPUSH
79386: CALL_OW 297
79390: ST_TO_ADDR
// if tmpDist < dist then
79391: LD_VAR 0 6
79395: PUSH
79396: LD_VAR 0 5
79400: LESS
79401: IFFALSE 79423
// begin result := i ;
79403: LD_ADDR_VAR 0 3
79407: PUSH
79408: LD_VAR 0 4
79412: ST_TO_ADDR
// dist := tmpDist ;
79413: LD_ADDR_VAR 0 5
79417: PUSH
79418: LD_VAR 0 6
79422: ST_TO_ADDR
// end ; end ;
79423: GO 79355
79425: POP
79426: POP
// end ;
79427: LD_VAR 0 3
79431: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79432: LD_INT 0
79434: PPUSH
// uc_side := side ;
79435: LD_ADDR_OWVAR 20
79439: PUSH
79440: LD_VAR 0 1
79444: ST_TO_ADDR
// uc_nation := 3 ;
79445: LD_ADDR_OWVAR 21
79449: PUSH
79450: LD_INT 3
79452: ST_TO_ADDR
// vc_chassis := 25 ;
79453: LD_ADDR_OWVAR 37
79457: PUSH
79458: LD_INT 25
79460: ST_TO_ADDR
// vc_engine := engine_siberite ;
79461: LD_ADDR_OWVAR 39
79465: PUSH
79466: LD_INT 3
79468: ST_TO_ADDR
// vc_control := control_computer ;
79469: LD_ADDR_OWVAR 38
79473: PUSH
79474: LD_INT 3
79476: ST_TO_ADDR
// vc_weapon := 59 ;
79477: LD_ADDR_OWVAR 40
79481: PUSH
79482: LD_INT 59
79484: ST_TO_ADDR
// result := CreateVehicle ;
79485: LD_ADDR_VAR 0 5
79489: PUSH
79490: CALL_OW 45
79494: ST_TO_ADDR
// SetDir ( result , d ) ;
79495: LD_VAR 0 5
79499: PPUSH
79500: LD_VAR 0 4
79504: PPUSH
79505: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79509: LD_VAR 0 5
79513: PPUSH
79514: LD_VAR 0 2
79518: PPUSH
79519: LD_VAR 0 3
79523: PPUSH
79524: LD_INT 0
79526: PPUSH
79527: CALL_OW 48
// end ;
79531: LD_VAR 0 5
79535: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79536: LD_INT 0
79538: PPUSH
79539: PPUSH
79540: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79541: LD_ADDR_VAR 0 2
79545: PUSH
79546: LD_INT 0
79548: PUSH
79549: LD_INT 0
79551: PUSH
79552: LD_INT 0
79554: PUSH
79555: LD_INT 0
79557: PUSH
79558: EMPTY
79559: LIST
79560: LIST
79561: LIST
79562: LIST
79563: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79564: LD_VAR 0 1
79568: NOT
79569: PUSH
79570: LD_VAR 0 1
79574: PPUSH
79575: CALL_OW 264
79579: PUSH
79580: LD_INT 12
79582: PUSH
79583: LD_INT 51
79585: PUSH
79586: LD_INT 32
79588: PUSH
79589: LD_INT 89
79591: PUSH
79592: EMPTY
79593: LIST
79594: LIST
79595: LIST
79596: LIST
79597: IN
79598: NOT
79599: OR
79600: IFFALSE 79604
// exit ;
79602: GO 79702
// for i := 1 to 3 do
79604: LD_ADDR_VAR 0 3
79608: PUSH
79609: DOUBLE
79610: LD_INT 1
79612: DEC
79613: ST_TO_ADDR
79614: LD_INT 3
79616: PUSH
79617: FOR_TO
79618: IFFALSE 79700
// begin tmp := GetCargo ( cargo , i ) ;
79620: LD_ADDR_VAR 0 4
79624: PUSH
79625: LD_VAR 0 1
79629: PPUSH
79630: LD_VAR 0 3
79634: PPUSH
79635: CALL_OW 289
79639: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79640: LD_ADDR_VAR 0 2
79644: PUSH
79645: LD_VAR 0 2
79649: PPUSH
79650: LD_VAR 0 3
79654: PPUSH
79655: LD_VAR 0 4
79659: PPUSH
79660: CALL_OW 1
79664: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79665: LD_ADDR_VAR 0 2
79669: PUSH
79670: LD_VAR 0 2
79674: PPUSH
79675: LD_INT 4
79677: PPUSH
79678: LD_VAR 0 2
79682: PUSH
79683: LD_INT 4
79685: ARRAY
79686: PUSH
79687: LD_VAR 0 4
79691: PLUS
79692: PPUSH
79693: CALL_OW 1
79697: ST_TO_ADDR
// end ;
79698: GO 79617
79700: POP
79701: POP
// end ;
79702: LD_VAR 0 2
79706: RET
// export function Length ( array ) ; begin
79707: LD_INT 0
79709: PPUSH
// result := array + 0 ;
79710: LD_ADDR_VAR 0 2
79714: PUSH
79715: LD_VAR 0 1
79719: PUSH
79720: LD_INT 0
79722: PLUS
79723: ST_TO_ADDR
// end ;
79724: LD_VAR 0 2
79728: RET
// export function PrepareArray ( array ) ; begin
79729: LD_INT 0
79731: PPUSH
// result := array diff 0 ;
79732: LD_ADDR_VAR 0 2
79736: PUSH
79737: LD_VAR 0 1
79741: PUSH
79742: LD_INT 0
79744: DIFF
79745: ST_TO_ADDR
// if not result [ 1 ] then
79746: LD_VAR 0 2
79750: PUSH
79751: LD_INT 1
79753: ARRAY
79754: NOT
79755: IFFALSE 79775
// result := Delete ( result , 1 ) ;
79757: LD_ADDR_VAR 0 2
79761: PUSH
79762: LD_VAR 0 2
79766: PPUSH
79767: LD_INT 1
79769: PPUSH
79770: CALL_OW 3
79774: ST_TO_ADDR
// end ; end_of_file
79775: LD_VAR 0 2
79779: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79780: LD_VAR 0 1
79784: PUSH
79785: LD_INT 200
79787: DOUBLE
79788: GREATEREQUAL
79789: IFFALSE 79797
79791: LD_INT 299
79793: DOUBLE
79794: LESSEQUAL
79795: IFTRUE 79799
79797: GO 79831
79799: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79800: LD_VAR 0 1
79804: PPUSH
79805: LD_VAR 0 2
79809: PPUSH
79810: LD_VAR 0 3
79814: PPUSH
79815: LD_VAR 0 4
79819: PPUSH
79820: LD_VAR 0 5
79824: PPUSH
79825: CALL 34682 0 5
79829: GO 79908
79831: LD_INT 300
79833: DOUBLE
79834: GREATEREQUAL
79835: IFFALSE 79843
79837: LD_INT 399
79839: DOUBLE
79840: LESSEQUAL
79841: IFTRUE 79845
79843: GO 79907
79845: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79846: LD_VAR 0 1
79850: PPUSH
79851: LD_VAR 0 2
79855: PPUSH
79856: LD_VAR 0 3
79860: PPUSH
79861: LD_VAR 0 4
79865: PPUSH
79866: LD_VAR 0 5
79870: PPUSH
79871: LD_VAR 0 6
79875: PPUSH
79876: LD_VAR 0 7
79880: PPUSH
79881: LD_VAR 0 8
79885: PPUSH
79886: LD_VAR 0 9
79890: PPUSH
79891: LD_VAR 0 10
79895: PPUSH
79896: LD_VAR 0 11
79900: PPUSH
79901: CALL 31015 0 11
79905: GO 79908
79907: POP
// end ;
79908: PPOPN 11
79910: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79911: LD_VAR 0 1
79915: PPUSH
79916: LD_VAR 0 2
79920: PPUSH
79921: LD_VAR 0 3
79925: PPUSH
79926: LD_VAR 0 4
79930: PPUSH
79931: LD_VAR 0 5
79935: PPUSH
79936: CALL 34418 0 5
// end ; end_of_file
79940: PPOPN 5
79942: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79943: LD_VAR 0 1
79947: PPUSH
79948: LD_VAR 0 2
79952: PPUSH
79953: LD_VAR 0 3
79957: PPUSH
79958: LD_VAR 0 4
79962: PPUSH
79963: LD_VAR 0 5
79967: PPUSH
79968: LD_VAR 0 6
79972: PPUSH
79973: CALL 18708 0 6
// end ;
79977: PPOPN 6
79979: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79980: LD_INT 0
79982: PPUSH
// begin if not units then
79983: LD_VAR 0 1
79987: NOT
79988: IFFALSE 79992
// exit ;
79990: GO 79992
// end ;
79992: PPOPN 7
79994: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79995: CALL 18679 0 0
// end ;
79999: PPOPN 1
80001: END
