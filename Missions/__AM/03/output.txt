// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 378 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 466 0 0
// PrepareRussian ;
  29: CALL 3086 0 0
// PrepareAmerican ;
  33: CALL 1228 0 0
// PrepareCornell ;
  37: CALL 2315 0 0
// PrepareWesternBase ;
  41: CALL 2541 0 0
// Action ;
  45: CALL 5331 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_OWVAR 67
 220: ARRAY
 221: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 ] [ Difficulty ] ;
 222: LD_ADDR_EXP 20
 226: PUSH
 227: LD_INT 600
 229: PUSH
 230: LD_INT 500
 232: PUSH
 233: LD_INT 400
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_OWVAR 67
 245: ARRAY
 246: ST_TO_ADDR
// end_mission_allowed := false ;
 247: LD_ADDR_EXP 21
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// save_others := [ ] ;
 255: LD_ADDR_EXP 22
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// save_group := [ ] ;
 262: LD_ADDR_EXP 23
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// show_query := true ;
 269: LD_ADDR_EXP 24
 273: PUSH
 274: LD_INT 1
 276: ST_TO_ADDR
// wait_for_them := false ;
 277: LD_ADDR_EXP 25
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// veh_on_meta := false ;
 285: LD_ADDR_EXP 28
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// send_spec_patrol := false ;
 293: LD_ADDR_EXP 30
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// prepare_siege := false ;
 301: LD_ADDR_EXP 31
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// send_attack_on_cornel := false ;
 309: LD_ADDR_EXP 32
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 317: LD_ADDR_EXP 26
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// game_end := false ;
 325: LD_ADDR_EXP 33
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// lose_counter := 0 ;
 333: LD_ADDR_EXP 34
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// powell_warn := 0 ;
 341: LD_ADDR_EXP 35
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// save_counter := 0 ;
 349: LD_ADDR_EXP 36
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// cornel_saved := false ;
 357: LD_ADDR_EXP 27
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// ach_counter := 0 ;
 365: LD_ADDR_EXP 13
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// end ;
 373: LD_VAR 0 1
 377: RET
// function SetDiplomacy ; begin
 378: LD_INT 0
 380: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 381: LD_INT 1
 383: PPUSH
 384: LD_INT 4
 386: PPUSH
 387: LD_INT 1
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 397: LD_INT 1
 399: PPUSH
 400: LD_INT 8
 402: PPUSH
 403: LD_INT 1
 405: PPUSH
 406: LD_INT 1
 408: PPUSH
 409: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 413: LD_INT 3
 415: PPUSH
 416: LD_INT 6
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: LD_INT 1
 424: PPUSH
 425: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 429: LD_INT 4
 431: PPUSH
 432: LD_INT 6
 434: PPUSH
 435: LD_INT 0
 437: PPUSH
 438: LD_INT 1
 440: PPUSH
 441: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 445: LD_INT 3
 447: PPUSH
 448: LD_INT 8
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: LD_INT 1
 456: PPUSH
 457: CALL_OW 80
// end ;
 461: LD_VAR 0 1
 465: RET
// export function DebugMode ; var i ; begin
 466: LD_INT 0
 468: PPUSH
 469: PPUSH
// FogOff ( 1 ) ;
 470: LD_INT 1
 472: PPUSH
 473: CALL_OW 344
// debug_strings := [ ] ;
 477: LD_ADDR_OWVAR 48
 481: PUSH
 482: EMPTY
 483: ST_TO_ADDR
// end ; end_of_file
 484: LD_VAR 0 1
 488: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 489: LD_INT 0
 491: PPUSH
 492: PPUSH
// if exist_mode then
 493: LD_VAR 0 2
 497: IFFALSE 522
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
 499: LD_ADDR_VAR 0 4
 503: PUSH
 504: LD_EXP 3
 508: PUSH
 509: LD_VAR 0 1
 513: STR
 514: PPUSH
 515: CALL_OW 34
 519: ST_TO_ADDR
 520: GO 537
// unit := NewCharacter ( ident ) ;
 522: LD_ADDR_VAR 0 4
 526: PUSH
 527: LD_VAR 0 1
 531: PPUSH
 532: CALL_OW 25
 536: ST_TO_ADDR
// result := unit ;
 537: LD_ADDR_VAR 0 3
 541: PUSH
 542: LD_VAR 0 4
 546: ST_TO_ADDR
// end ;
 547: LD_VAR 0 3
 551: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 552: LD_INT 0
 554: PPUSH
// uc_side := side ;
 555: LD_ADDR_OWVAR 20
 559: PUSH
 560: LD_VAR 0 1
 564: ST_TO_ADDR
// uc_nation := nation ;
 565: LD_ADDR_OWVAR 21
 569: PUSH
 570: LD_VAR 0 2
 574: ST_TO_ADDR
// vc_chassis := chassis ;
 575: LD_ADDR_OWVAR 37
 579: PUSH
 580: LD_VAR 0 3
 584: ST_TO_ADDR
// vc_engine := engine ;
 585: LD_ADDR_OWVAR 39
 589: PUSH
 590: LD_VAR 0 4
 594: ST_TO_ADDR
// vc_control := control ;
 595: LD_ADDR_OWVAR 38
 599: PUSH
 600: LD_VAR 0 5
 604: ST_TO_ADDR
// vc_weapon := weapon ;
 605: LD_ADDR_OWVAR 40
 609: PUSH
 610: LD_VAR 0 6
 614: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 615: LD_ADDR_OWVAR 41
 619: PUSH
 620: LD_VAR 0 7
 624: ST_TO_ADDR
// result := CreateVehicle ;
 625: LD_ADDR_VAR 0 8
 629: PUSH
 630: CALL_OW 45
 634: ST_TO_ADDR
// end ;
 635: LD_VAR 0 8
 639: RET
// export function SayX ( units , ident ) ; var i ; begin
 640: LD_INT 0
 642: PPUSH
 643: PPUSH
// result := false ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_INT 0
 651: ST_TO_ADDR
// if not units then
 652: LD_VAR 0 1
 656: NOT
 657: IFFALSE 661
// exit ;
 659: GO 715
// for i in units do
 661: LD_ADDR_VAR 0 4
 665: PUSH
 666: LD_VAR 0 1
 670: PUSH
 671: FOR_IN
 672: IFFALSE 713
// if IsOk ( i ) then
 674: LD_VAR 0 4
 678: PPUSH
 679: CALL_OW 302
 683: IFFALSE 711
// begin Say ( i , ident ) ;
 685: LD_VAR 0 4
 689: PPUSH
 690: LD_VAR 0 2
 694: PPUSH
 695: CALL_OW 88
// result := i ;
 699: LD_ADDR_VAR 0 3
 703: PUSH
 704: LD_VAR 0 4
 708: ST_TO_ADDR
// break ;
 709: GO 713
// end ;
 711: GO 671
 713: POP
 714: POP
// end ;
 715: LD_VAR 0 3
 719: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 720: LD_INT 0
 722: PPUSH
 723: PPUSH
 724: PPUSH
 725: PPUSH
// for i = 1 to count do
 726: LD_ADDR_VAR 0 8
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 6
 740: PUSH
 741: FOR_TO
 742: IFFALSE 823
// begin uc_side = side ;
 744: LD_ADDR_OWVAR 20
 748: PUSH
 749: LD_VAR 0 1
 753: ST_TO_ADDR
// uc_nation = nation ;
 754: LD_ADDR_OWVAR 21
 758: PUSH
 759: LD_VAR 0 2
 763: ST_TO_ADDR
// hc_gallery =  ;
 764: LD_ADDR_OWVAR 33
 768: PUSH
 769: LD_STRING 
 771: ST_TO_ADDR
// hc_name =  ;
 772: LD_ADDR_OWVAR 26
 776: PUSH
 777: LD_STRING 
 779: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 780: LD_INT 0
 782: PPUSH
 783: LD_VAR 0 5
 787: PPUSH
 788: LD_VAR 0 4
 792: PPUSH
 793: CALL_OW 380
// un = CreateHuman ;
 797: LD_ADDR_VAR 0 10
 801: PUSH
 802: CALL_OW 44
 806: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 807: LD_VAR 0 10
 811: PPUSH
 812: LD_VAR 0 3
 816: PPUSH
 817: CALL_OW 52
// end ;
 821: GO 741
 823: POP
 824: POP
// end ;
 825: LD_VAR 0 7
 829: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
// uc_side := GetSide ( b ) ;
 835: LD_ADDR_OWVAR 20
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 255
 849: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 850: LD_ADDR_OWVAR 21
 854: PUSH
 855: LD_VAR 0 2
 859: PPUSH
 860: CALL_OW 248
 864: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 865: LD_INT 0
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 380
// un = CreateHuman ;
 880: LD_ADDR_VAR 0 4
 884: PUSH
 885: CALL_OW 44
 889: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 890: LD_ADDR_VAR 0 5
 894: PUSH
 895: LD_VAR 0 2
 899: PPUSH
 900: CALL_OW 254
 904: PUSH
 905: LD_INT 3
 907: MINUS
 908: ST_TO_ADDR
// if dir < 0 then
 909: LD_VAR 0 5
 913: PUSH
 914: LD_INT 0
 916: LESS
 917: IFFALSE 933
// dir := 6 + dir ;
 919: LD_ADDR_VAR 0 5
 923: PUSH
 924: LD_INT 6
 926: PUSH
 927: LD_VAR 0 5
 931: PLUS
 932: ST_TO_ADDR
// SetDir ( un , dir ) ;
 933: LD_VAR 0 4
 937: PPUSH
 938: LD_VAR 0 5
 942: PPUSH
 943: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 947: LD_VAR 0 4
 951: PPUSH
 952: LD_VAR 0 2
 956: PPUSH
 957: CALL_OW 52
// end ;
 961: LD_VAR 0 3
 965: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 966: LD_INT 0
 968: PPUSH
 969: PPUSH
 970: PPUSH
// result := false ;
 971: LD_ADDR_VAR 0 2
 975: PUSH
 976: LD_INT 0
 978: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 979: LD_ADDR_VAR 0 3
 983: PUSH
 984: LD_INT 22
 986: PUSH
 987: LD_INT 1
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 34
 996: PUSH
 997: LD_INT 2
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PPUSH
1008: CALL_OW 69
1012: ST_TO_ADDR
// for i in filter do
1013: LD_ADDR_VAR 0 4
1017: PUSH
1018: LD_VAR 0 3
1022: PUSH
1023: FOR_IN
1024: IFFALSE 1055
// if IsDrivenBy ( i ) = unit then
1026: LD_VAR 0 4
1030: PPUSH
1031: CALL_OW 311
1035: PUSH
1036: LD_VAR 0 1
1040: EQUAL
1041: IFFALSE 1053
// begin result := true ;
1043: LD_ADDR_VAR 0 2
1047: PUSH
1048: LD_INT 1
1050: ST_TO_ADDR
// break ;
1051: GO 1055
// end ;
1053: GO 1023
1055: POP
1056: POP
// end ;
1057: LD_VAR 0 2
1061: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1062: LD_INT 0
1064: PPUSH
1065: PPUSH
// result := false ;
1066: LD_ADDR_VAR 0 2
1070: PUSH
1071: LD_INT 0
1073: ST_TO_ADDR
// if not blist then
1074: LD_VAR 0 1
1078: NOT
1079: IFFALSE 1083
// exit ;
1081: GO 1127
// for i in blist do
1083: LD_ADDR_VAR 0 3
1087: PUSH
1088: LD_VAR 0 1
1092: PUSH
1093: FOR_IN
1094: IFFALSE 1125
// if UnitsInside ( i ) < 6 then
1096: LD_VAR 0 3
1100: PPUSH
1101: CALL_OW 313
1105: PUSH
1106: LD_INT 6
1108: LESS
1109: IFFALSE 1123
// begin result := i ;
1111: LD_ADDR_VAR 0 2
1115: PUSH
1116: LD_VAR 0 3
1120: ST_TO_ADDR
// break ;
1121: GO 1125
// end ;
1123: GO 1093
1125: POP
1126: POP
// end ;
1127: LD_VAR 0 2
1131: RET
// export function Count ( timer , mode ) ; begin
1132: LD_INT 0
1134: PPUSH
// if not timer then
1135: LD_VAR 0 1
1139: NOT
1140: IFFALSE 1144
// exit ;
1142: GO 1195
// if mode in [ asc , up , + ] then
1144: LD_VAR 0 2
1148: PUSH
1149: LD_STRING asc
1151: PUSH
1152: LD_STRING up
1154: PUSH
1155: LD_STRING +
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: IN
1163: IFFALSE 1181
// result := timer + 0 0$01 else
1165: LD_ADDR_VAR 0 3
1169: PUSH
1170: LD_VAR 0 1
1174: PUSH
1175: LD_INT 35
1177: PLUS
1178: ST_TO_ADDR
1179: GO 1195
// result := timer - 0 0$01 ;
1181: LD_ADDR_VAR 0 3
1185: PUSH
1186: LD_VAR 0 1
1190: PUSH
1191: LD_INT 35
1193: MINUS
1194: ST_TO_ADDR
// end ;
1195: LD_VAR 0 3
1199: RET
// export function Video ( mode ) ; begin
1200: LD_INT 0
1202: PPUSH
// ingame_video = mode ;
1203: LD_ADDR_OWVAR 52
1207: PUSH
1208: LD_VAR 0 1
1212: ST_TO_ADDR
// interface_hidden = mode ;
1213: LD_ADDR_OWVAR 54
1217: PUSH
1218: LD_VAR 0 1
1222: ST_TO_ADDR
// end ; end_of_file
1223: LD_VAR 0 2
1227: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty ; begin
1228: LD_INT 0
1230: PPUSH
1231: PPUSH
1232: PPUSH
1233: PPUSH
1234: PPUSH
1235: PPUSH
1236: PPUSH
1237: PPUSH
// uc_side := 4 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_INT 4
1245: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
1246: LD_ADDR_EXP 46
1250: PUSH
1251: LD_STRING Powell
1253: PPUSH
1254: LD_INT 0
1256: PPUSH
1257: CALL 489 0 2
1261: ST_TO_ADDR
// uc_side := 1 ;
1262: LD_ADDR_OWVAR 20
1266: PUSH
1267: LD_INT 1
1269: ST_TO_ADDR
// uc_nation := 1 ;
1270: LD_ADDR_OWVAR 21
1274: PUSH
1275: LD_INT 1
1277: ST_TO_ADDR
// if debug then
1278: LD_EXP 1
1282: IFFALSE 1412
// begin for i = 1 to 4 do
1284: LD_ADDR_VAR 0 2
1288: PUSH
1289: DOUBLE
1290: LD_INT 1
1292: DEC
1293: ST_TO_ADDR
1294: LD_INT 4
1296: PUSH
1297: FOR_TO
1298: IFFALSE 1349
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1300: LD_INT 0
1302: PPUSH
1303: LD_INT 1
1305: PPUSH
1306: LD_INT 2
1308: PPUSH
1309: CALL_OW 12
1313: PPUSH
1314: LD_INT 3
1316: PPUSH
1317: CALL_OW 380
// un := CreateHuman ;
1321: LD_ADDR_VAR 0 3
1325: PUSH
1326: CALL_OW 44
1330: ST_TO_ADDR
// others := others ^ un ;
1331: LD_ADDR_VAR 0 5
1335: PUSH
1336: LD_VAR 0 5
1340: PUSH
1341: LD_VAR 0 3
1345: ADD
1346: ST_TO_ADDR
// end ;
1347: GO 1297
1349: POP
1350: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1351: LD_ADDR_VAR 0 6
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 51
1367: PUSH
1368: LD_INT 90
1370: PUSH
1371: LD_INT 504
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 21
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 51
1393: PUSH
1394: LD_INT 80
1396: PUSH
1397: LD_INT 750
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) ) ;
1412: LD_ADDR_EXP 37
1416: PUSH
1417: LD_STRING JMM
1419: PPUSH
1420: LD_EXP 1
1424: NOT
1425: PPUSH
1426: CALL 489 0 2
1430: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
1431: LD_ADDR_EXP 38
1435: PUSH
1436: LD_STRING Bobby
1438: PPUSH
1439: LD_EXP 1
1443: NOT
1444: PPUSH
1445: CALL 489 0 2
1449: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
1450: LD_ADDR_EXP 39
1454: PUSH
1455: LD_STRING Cyrus
1457: PPUSH
1458: LD_EXP 1
1462: NOT
1463: PPUSH
1464: CALL 489 0 2
1468: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
1469: LD_ADDR_EXP 40
1473: PUSH
1474: LD_STRING Lisa
1476: PPUSH
1477: LD_EXP 1
1481: NOT
1482: PPUSH
1483: CALL 489 0 2
1487: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) ) ;
1488: LD_ADDR_EXP 41
1492: PUSH
1493: LD_STRING Khatam
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: CALL 489 0 2
1506: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) ) ;
1507: LD_ADDR_EXP 42
1511: PUSH
1512: LD_STRING Brian
1514: PPUSH
1515: LD_EXP 1
1519: NOT
1520: PPUSH
1521: CALL 489 0 2
1525: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) ) ;
1526: LD_ADDR_EXP 43
1530: PUSH
1531: LD_STRING Jerry
1533: PPUSH
1534: LD_EXP 1
1538: NOT
1539: PPUSH
1540: CALL 489 0 2
1544: ST_TO_ADDR
// if Bobby then
1545: LD_EXP 38
1549: IFFALSE 1580
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1551: LD_ADDR_VAR 0 4
1555: PUSH
1556: LD_VAR 0 4
1560: PPUSH
1561: LD_VAR 0 4
1565: PUSH
1566: LD_INT 1
1568: PLUS
1569: PPUSH
1570: LD_EXP 38
1574: PPUSH
1575: CALL_OW 2
1579: ST_TO_ADDR
// if Cyrus then
1580: LD_EXP 39
1584: IFFALSE 1615
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1586: LD_ADDR_VAR 0 4
1590: PUSH
1591: LD_VAR 0 4
1595: PPUSH
1596: LD_VAR 0 4
1600: PUSH
1601: LD_INT 1
1603: PLUS
1604: PPUSH
1605: LD_EXP 39
1609: PPUSH
1610: CALL_OW 2
1614: ST_TO_ADDR
// if Lisa then
1615: LD_EXP 40
1619: IFFALSE 1650
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1621: LD_ADDR_VAR 0 4
1625: PUSH
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 4
1635: PUSH
1636: LD_INT 1
1638: PLUS
1639: PPUSH
1640: LD_EXP 40
1644: PPUSH
1645: CALL_OW 2
1649: ST_TO_ADDR
// if Khatam then
1650: LD_EXP 41
1654: IFFALSE 1685
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1656: LD_ADDR_VAR 0 4
1660: PUSH
1661: LD_VAR 0 4
1665: PPUSH
1666: LD_VAR 0 4
1670: PUSH
1671: LD_INT 1
1673: PLUS
1674: PPUSH
1675: LD_EXP 41
1679: PPUSH
1680: CALL_OW 2
1684: ST_TO_ADDR
// if Brian then
1685: LD_EXP 42
1689: IFFALSE 1720
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1691: LD_ADDR_VAR 0 4
1695: PUSH
1696: LD_VAR 0 4
1700: PPUSH
1701: LD_VAR 0 4
1705: PUSH
1706: LD_INT 1
1708: PLUS
1709: PPUSH
1710: LD_EXP 42
1714: PPUSH
1715: CALL_OW 2
1719: ST_TO_ADDR
// if Jerry then
1720: LD_EXP 43
1724: IFFALSE 1755
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1726: LD_ADDR_VAR 0 4
1730: PUSH
1731: LD_VAR 0 4
1735: PPUSH
1736: LD_VAR 0 4
1740: PUSH
1741: LD_INT 1
1743: PLUS
1744: PPUSH
1745: LD_EXP 43
1749: PPUSH
1750: CALL_OW 2
1754: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1755: LD_STRING 02_other_survivors
1757: PPUSH
1758: CALL_OW 28
1762: IFFALSE 1777
// others := CreateCharacterSet ( 02_other_survivors ) ;
1764: LD_ADDR_VAR 0 5
1768: PUSH
1769: LD_STRING 02_other_survivors
1771: PPUSH
1772: CALL_OW 31
1776: ST_TO_ADDR
// if others then
1777: LD_VAR 0 5
1781: IFFALSE 1806
// begin tmp := tmp ^ others ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_VAR 0 4
1792: PUSH
1793: LD_VAR 0 5
1797: ADD
1798: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1799: LD_STRING 02_other_survivors
1801: PPUSH
1802: CALL_OW 40
// end ; jmm_units := tmp ;
1806: LD_ADDR_EXP 4
1810: PUSH
1811: LD_VAR 0 4
1815: ST_TO_ADDR
// if not vehicles then
1816: LD_VAR 0 6
1820: NOT
1821: IFFALSE 1839
// vehicles := LoadVariable ( 02_tanks_1 , 0 ) ;
1823: LD_ADDR_VAR 0 6
1827: PUSH
1828: LD_STRING 02_tanks_1
1830: PPUSH
1831: LD_INT 0
1833: PPUSH
1834: CALL_OW 30
1838: ST_TO_ADDR
// if vehicles then
1839: LD_VAR 0 6
1843: IFFALSE 2037
// begin got_mech := false ;
1845: LD_ADDR_VAR 0 7
1849: PUSH
1850: LD_INT 0
1852: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
1853: LD_VAR 0 4
1857: PPUSH
1858: LD_INT 25
1860: PUSH
1861: LD_INT 3
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PPUSH
1868: CALL_OW 72
1872: IFFALSE 1882
// got_mech := true ;
1874: LD_ADDR_VAR 0 7
1878: PUSH
1879: LD_INT 1
1881: ST_TO_ADDR
// for i = 1 to vehicles do
1882: LD_ADDR_VAR 0 2
1886: PUSH
1887: DOUBLE
1888: LD_INT 1
1890: DEC
1891: ST_TO_ADDR
1892: LD_VAR 0 6
1896: PUSH
1897: FOR_TO
1898: IFFALSE 2035
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
1900: LD_ADDR_VAR 0 3
1904: PUSH
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 3
1910: PPUSH
1911: LD_VAR 0 6
1915: PUSH
1916: LD_VAR 0 2
1920: ARRAY
1921: PUSH
1922: LD_INT 1
1924: ARRAY
1925: PPUSH
1926: LD_VAR 0 6
1930: PUSH
1931: LD_VAR 0 2
1935: ARRAY
1936: PUSH
1937: LD_INT 2
1939: ARRAY
1940: PPUSH
1941: LD_VAR 0 6
1945: PUSH
1946: LD_VAR 0 2
1950: ARRAY
1951: PUSH
1952: LD_INT 3
1954: ARRAY
1955: PPUSH
1956: LD_VAR 0 6
1960: PUSH
1961: LD_VAR 0 2
1965: ARRAY
1966: PUSH
1967: LD_INT 4
1969: ARRAY
1970: PPUSH
1971: LD_INT 40
1973: PPUSH
1974: CALL 552 0 7
1978: ST_TO_ADDR
// if not got_mech then
1979: LD_VAR 0 7
1983: NOT
1984: IFFALSE 2010
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
1986: LD_VAR 0 3
1990: PPUSH
1991: LD_VAR 0 6
1995: PUSH
1996: LD_VAR 0 2
2000: ARRAY
2001: PUSH
2002: LD_INT 6
2004: ARRAY
2005: PPUSH
2006: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
2010: LD_ADDR_VAR 0 4
2014: PUSH
2015: LD_VAR 0 4
2019: PPUSH
2020: LD_INT 1
2022: PPUSH
2023: LD_VAR 0 3
2027: PPUSH
2028: CALL_OW 2
2032: ST_TO_ADDR
// end ;
2033: GO 1897
2035: POP
2036: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
2037: LD_EXP 37
2041: PPUSH
2042: LD_INT 194
2044: PPUSH
2045: LD_INT 119
2047: PPUSH
2048: LD_INT 0
2050: PPUSH
2051: CALL_OW 48
// if tmp then
2055: LD_VAR 0 4
2059: IFFALSE 2247
// begin for i in tmp do
2061: LD_ADDR_VAR 0 2
2065: PUSH
2066: LD_VAR 0 4
2070: PUSH
2071: FOR_IN
2072: IFFALSE 2245
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2074: LD_VAR 0 2
2078: PPUSH
2079: CALL_OW 257
2083: PUSH
2084: LD_INT 1
2086: NONEQUAL
2087: PUSH
2088: LD_VAR 0 2
2092: PUSH
2093: LD_EXP 41
2097: NONEQUAL
2098: AND
2099: IFFALSE 2113
// SetClass ( i , 1 ) ;
2101: LD_VAR 0 2
2105: PPUSH
2106: LD_INT 1
2108: PPUSH
2109: CALL_OW 336
// if i = Khatam then
2113: LD_VAR 0 2
2117: PUSH
2118: LD_EXP 41
2122: EQUAL
2123: IFFALSE 2137
// SetClass ( i , 4 ) ;
2125: LD_VAR 0 2
2129: PPUSH
2130: LD_INT 4
2132: PPUSH
2133: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2137: LD_ADDR_VAR 0 8
2141: PUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PUSH
2152: LD_INT 21
2154: PUSH
2155: LD_INT 2
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PUSH
2162: LD_INT 58
2164: PUSH
2165: EMPTY
2166: LIST
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: PPUSH
2173: CALL_OW 69
2177: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2178: LD_VAR 0 2
2182: PPUSH
2183: CALL_OW 247
2187: PUSH
2188: LD_INT 1
2190: EQUAL
2191: PUSH
2192: LD_VAR 0 8
2196: AND
2197: IFFALSE 2219
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2199: LD_VAR 0 2
2203: PPUSH
2204: LD_VAR 0 8
2208: PUSH
2209: LD_INT 1
2211: ARRAY
2212: PPUSH
2213: CALL_OW 52
2217: GO 2234
// PlaceUnitArea ( i , startArea , false ) ;
2219: LD_VAR 0 2
2223: PPUSH
2224: LD_INT 1
2226: PPUSH
2227: LD_INT 0
2229: PPUSH
2230: CALL_OW 49
// ComHold ( i ) ;
2234: LD_VAR 0 2
2238: PPUSH
2239: CALL_OW 140
// end ;
2243: GO 2071
2245: POP
2246: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2247: LD_ADDR_EXP 7
2251: PUSH
2252: LD_STRING 02_mikhailStatus_1
2254: PPUSH
2255: LD_INT 0
2257: PPUSH
2258: CALL_OW 30
2262: ST_TO_ADDR
// if not bierezov_exist and not debug then
2263: LD_EXP 7
2267: NOT
2268: PUSH
2269: LD_EXP 1
2273: NOT
2274: AND
2275: IFFALSE 2279
// exit ;
2277: GO 2310
// Bierezov = PrepareUnit ( Mikhail , false ) ;
2279: LD_ADDR_EXP 45
2283: PUSH
2284: LD_STRING Mikhail
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: CALL 489 0 2
2294: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2295: LD_EXP 45
2299: PPUSH
2300: LD_INT 1
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: CALL_OW 49
// end ;
2310: LD_VAR 0 1
2314: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2315: LD_INT 0
2317: PPUSH
2318: PPUSH
2319: PPUSH
2320: PPUSH
// uc_side := 4 ;
2321: LD_ADDR_OWVAR 20
2325: PUSH
2326: LD_INT 4
2328: ST_TO_ADDR
// uc_nation := 1 ;
2329: LD_ADDR_OWVAR 21
2333: PUSH
2334: LD_INT 1
2336: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ) ;
2337: LD_ADDR_EXP 44
2341: PUSH
2342: LD_STRING Cornell
2344: PPUSH
2345: LD_INT 0
2347: PPUSH
2348: CALL 489 0 2
2352: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2353: LD_ADDR_EXP 6
2357: PUSH
2358: LD_INT 9
2360: PUSH
2361: LD_EXP 4
2365: MINUS
2366: ST_TO_ADDR
// tmp := [ ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: EMPTY
2373: ST_TO_ADDR
// if cornel_units < 4 then
2374: LD_EXP 6
2378: PUSH
2379: LD_INT 4
2381: LESS
2382: IFFALSE 2392
// cornel_units := 4 ;
2384: LD_ADDR_EXP 6
2388: PUSH
2389: LD_INT 4
2391: ST_TO_ADDR
// for i = 1 to cornel_units do
2392: LD_ADDR_VAR 0 4
2396: PUSH
2397: DOUBLE
2398: LD_INT 1
2400: DEC
2401: ST_TO_ADDR
2402: LD_EXP 6
2406: PUSH
2407: FOR_TO
2408: IFFALSE 2506
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2410: LD_INT 0
2412: PPUSH
2413: LD_INT 1
2415: PUSH
2416: LD_INT 1
2418: PUSH
2419: LD_INT 1
2421: PUSH
2422: LD_INT 2
2424: PUSH
2425: LD_INT 4
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: PUSH
2435: LD_VAR 0 4
2439: PUSH
2440: LD_INT 5
2442: MOD
2443: PUSH
2444: LD_INT 1
2446: PLUS
2447: ARRAY
2448: PPUSH
2449: LD_INT 2
2451: PPUSH
2452: CALL_OW 380
// un := CreateHuman ;
2456: LD_ADDR_VAR 0 3
2460: PUSH
2461: CALL_OW 44
2465: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2466: LD_ADDR_VAR 0 2
2470: PUSH
2471: LD_VAR 0 2
2475: PPUSH
2476: LD_INT 1
2478: PPUSH
2479: LD_VAR 0 3
2483: PPUSH
2484: CALL_OW 2
2488: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2489: LD_VAR 0 3
2493: PPUSH
2494: LD_INT 2
2496: PPUSH
2497: LD_INT 0
2499: PPUSH
2500: CALL_OW 49
// end ;
2504: GO 2407
2506: POP
2507: POP
// cornel_units := tmp ;
2508: LD_ADDR_EXP 6
2512: PUSH
2513: LD_VAR 0 2
2517: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2518: LD_EXP 44
2522: PPUSH
2523: LD_INT 191
2525: PPUSH
2526: LD_INT 106
2528: PPUSH
2529: LD_INT 0
2531: PPUSH
2532: CALL_OW 48
// end ;
2536: LD_VAR 0 1
2540: RET
// export function PrepareWesternBase ; var i ; begin
2541: LD_INT 0
2543: PPUSH
2544: PPUSH
// uc_side := 8 ;
2545: LD_ADDR_OWVAR 20
2549: PUSH
2550: LD_INT 8
2552: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ) ;
2553: LD_ADDR_EXP 47
2557: PUSH
2558: LD_STRING Lynch
2560: PPUSH
2561: LD_INT 0
2563: PPUSH
2564: CALL 489 0 2
2568: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ) ;
2569: LD_ADDR_EXP 48
2573: PUSH
2574: LD_STRING Walker
2576: PPUSH
2577: LD_INT 0
2579: PPUSH
2580: CALL 489 0 2
2584: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ) ;
2585: LD_ADDR_EXP 49
2589: PUSH
2590: LD_STRING Turner
2592: PPUSH
2593: LD_INT 0
2595: PPUSH
2596: CALL 489 0 2
2600: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ) ;
2601: LD_ADDR_EXP 50
2605: PUSH
2606: LD_STRING Jillian
2608: PPUSH
2609: LD_INT 0
2611: PPUSH
2612: CALL 489 0 2
2616: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2617: LD_ADDR_VAR 0 2
2621: PUSH
2622: LD_EXP 47
2626: PUSH
2627: LD_EXP 48
2631: PUSH
2632: LD_EXP 49
2636: PUSH
2637: LD_EXP 50
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: PUSH
2648: FOR_IN
2649: IFFALSE 2677
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
2651: LD_VAR 0 2
2655: PPUSH
2656: LD_INT 3
2658: PPUSH
2659: LD_INT 0
2661: PPUSH
2662: CALL_OW 49
// ComHold ( i ) ;
2666: LD_VAR 0 2
2670: PPUSH
2671: CALL_OW 140
// end ;
2675: GO 2648
2677: POP
2678: POP
// end ;
2679: LD_VAR 0 1
2683: RET
// export function SelectGroup ; var units , selected , i ; begin
2684: LD_INT 0
2686: PPUSH
2687: PPUSH
2688: PPUSH
2689: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
2690: LD_ADDR_VAR 0 2
2694: PUSH
2695: LD_EXP 37
2699: PUSH
2700: LD_INT -3
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_EXP 4
2711: ADD
2712: PUSH
2713: LD_INT -2
2715: PUSH
2716: LD_INT -4
2718: PUSH
2719: LD_EXP 44
2723: PUSH
2724: LD_EXP 45
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: ADD
2735: PUSH
2736: LD_INT -3
2738: PUSH
2739: EMPTY
2740: LIST
2741: ADD
2742: PUSH
2743: LD_EXP 6
2747: ADD
2748: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select five characters to go with you , 4 , 4 , units , [ ] ) ;
2749: LD_ADDR_VAR 0 3
2753: PUSH
2754: LD_EXP 37
2758: PUSH
2759: LD_STRING Select five characters to go with you
2761: PPUSH
2762: LD_INT 4
2764: PPUSH
2765: LD_INT 4
2767: PPUSH
2768: LD_VAR 0 2
2772: PPUSH
2773: EMPTY
2774: PPUSH
2775: CALL_OW 42
2779: ADD
2780: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
2781: LD_ADDR_EXP 6
2785: PUSH
2786: LD_EXP 4
2790: PUSH
2791: LD_EXP 6
2795: UNION
2796: PUSH
2797: LD_VAR 0 3
2801: DIFF
2802: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
2803: LD_ADDR_VAR 0 4
2807: PUSH
2808: LD_EXP 6
2812: PUSH
2813: LD_EXP 45
2817: ADD
2818: PUSH
2819: FOR_IN
2820: IFFALSE 2851
// if GetSide ( i ) = 1 then
2822: LD_VAR 0 4
2826: PPUSH
2827: CALL_OW 255
2831: PUSH
2832: LD_INT 1
2834: EQUAL
2835: IFFALSE 2849
// SetSide ( i , 4 ) ;
2837: LD_VAR 0 4
2841: PPUSH
2842: LD_INT 4
2844: PPUSH
2845: CALL_OW 235
2849: GO 2819
2851: POP
2852: POP
// for i in selected do
2853: LD_ADDR_VAR 0 4
2857: PUSH
2858: LD_VAR 0 3
2862: PUSH
2863: FOR_IN
2864: IFFALSE 2895
// if GetSide ( i ) = 4 then
2866: LD_VAR 0 4
2870: PPUSH
2871: CALL_OW 255
2875: PUSH
2876: LD_INT 4
2878: EQUAL
2879: IFFALSE 2893
// SetSide ( i , 1 ) ;
2881: LD_VAR 0 4
2885: PPUSH
2886: LD_INT 1
2888: PPUSH
2889: CALL_OW 235
2893: GO 2863
2895: POP
2896: POP
// jmm_units := jmm_units diff cornel_units ;
2897: LD_ADDR_EXP 4
2901: PUSH
2902: LD_EXP 4
2906: PUSH
2907: LD_EXP 6
2911: DIFF
2912: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
2913: LD_EXP 38
2917: PPUSH
2918: CALL_OW 255
2922: PUSH
2923: LD_INT 4
2925: EQUAL
2926: IFFALSE 2941
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
2928: LD_EXP 3
2932: PUSH
2933: LD_STRING Bobby
2935: STR
2936: PPUSH
2937: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
2941: LD_EXP 39
2945: PPUSH
2946: CALL_OW 255
2950: PUSH
2951: LD_INT 4
2953: EQUAL
2954: IFFALSE 2969
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
2956: LD_EXP 3
2960: PUSH
2961: LD_STRING Cyrus
2963: STR
2964: PPUSH
2965: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
2969: LD_EXP 40
2973: PPUSH
2974: CALL_OW 255
2978: PUSH
2979: LD_INT 4
2981: EQUAL
2982: IFFALSE 2997
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
2984: LD_EXP 3
2988: PUSH
2989: LD_STRING Lisa
2991: STR
2992: PPUSH
2993: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
2997: LD_EXP 41
3001: PPUSH
3002: CALL_OW 255
3006: PUSH
3007: LD_INT 4
3009: EQUAL
3010: IFFALSE 3025
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
3012: LD_EXP 3
3016: PUSH
3017: LD_STRING Khatam
3019: STR
3020: PPUSH
3021: CALL_OW 40
// if GetSide ( Brian ) = 4 then
3025: LD_EXP 42
3029: PPUSH
3030: CALL_OW 255
3034: PUSH
3035: LD_INT 4
3037: EQUAL
3038: IFFALSE 3053
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3040: LD_EXP 3
3044: PUSH
3045: LD_STRING Brian
3047: STR
3048: PPUSH
3049: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3053: LD_EXP 43
3057: PPUSH
3058: CALL_OW 255
3062: PUSH
3063: LD_INT 4
3065: EQUAL
3066: IFFALSE 3081
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3068: LD_EXP 3
3072: PUSH
3073: LD_STRING Jerry
3075: STR
3076: PPUSH
3077: CALL_OW 40
// end ; end_of_file
3081: LD_VAR 0 1
3085: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3086: LD_INT 0
3088: PPUSH
3089: PPUSH
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
3094: PPUSH
3095: PPUSH
3096: PPUSH
3097: PPUSH
3098: PPUSH
3099: PPUSH
3100: PPUSH
// ru_alert := false ;
3101: LD_ADDR_EXP 60
3105: PUSH
3106: LD_INT 0
3108: ST_TO_ADDR
// ru_produce_list := [ ] ;
3109: LD_ADDR_EXP 57
3113: PUSH
3114: EMPTY
3115: ST_TO_ADDR
// if Difficulty > 1 then
3116: LD_OWVAR 67
3120: PUSH
3121: LD_INT 1
3123: GREATER
3124: IFFALSE 3212
// begin uc_side := 3 ;
3126: LD_ADDR_OWVAR 20
3130: PUSH
3131: LD_INT 3
3133: ST_TO_ADDR
// uc_nation := 3 ;
3134: LD_ADDR_OWVAR 21
3138: PUSH
3139: LD_INT 3
3141: ST_TO_ADDR
// bc_type := b_breastwork ;
3142: LD_ADDR_OWVAR 42
3146: PUSH
3147: LD_INT 31
3149: ST_TO_ADDR
// bc_level := Difficulty ;
3150: LD_ADDR_OWVAR 43
3154: PUSH
3155: LD_OWVAR 67
3159: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3160: LD_INT 22
3162: PPUSH
3163: LD_INT 14
3165: PPUSH
3166: LD_INT 0
3168: PPUSH
3169: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3173: LD_INT 48
3175: PPUSH
3176: LD_INT 46
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3186: LD_INT 86
3188: PPUSH
3189: LD_INT 65
3191: PPUSH
3192: LD_INT 5
3194: PPUSH
3195: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3199: LD_INT 165
3201: PPUSH
3202: LD_INT 73
3204: PPUSH
3205: LD_INT 5
3207: PPUSH
3208: CALL_OW 47
// end ; if Difficulty = 3 then
3212: LD_OWVAR 67
3216: PUSH
3217: LD_INT 3
3219: EQUAL
3220: IFFALSE 3235
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3222: LD_INT 51
3224: PPUSH
3225: LD_INT 3
3227: PPUSH
3228: LD_INT 2
3230: PPUSH
3231: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3235: LD_ADDR_VAR 0 7
3239: PUSH
3240: LD_INT 22
3242: PUSH
3243: LD_INT 3
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PUSH
3250: LD_INT 2
3252: PUSH
3253: LD_INT 30
3255: PUSH
3256: LD_INT 31
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: PUSH
3263: LD_INT 30
3265: PUSH
3266: LD_INT 32
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: LIST
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PPUSH
3282: CALL_OW 69
3286: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3287: LD_ADDR_VAR 0 8
3291: PUSH
3292: LD_INT 22
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: PUSH
3302: LD_INT 30
3304: PUSH
3305: LD_INT 4
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PPUSH
3316: CALL_OW 69
3320: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3321: LD_ADDR_VAR 0 10
3325: PUSH
3326: LD_INT 22
3328: PUSH
3329: LD_INT 3
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: PUSH
3336: LD_INT 30
3338: PUSH
3339: LD_INT 3
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: PPUSH
3350: CALL_OW 69
3354: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3355: LD_ADDR_VAR 0 9
3359: PUSH
3360: LD_INT 22
3362: PUSH
3363: LD_INT 3
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PUSH
3370: LD_INT 30
3372: PUSH
3373: LD_INT 6
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PPUSH
3384: CALL_OW 69
3388: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3389: LD_ADDR_VAR 0 2
3393: PUSH
3394: LD_INT 22
3396: PUSH
3397: LD_INT 3
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_INT 30
3406: PUSH
3407: LD_INT 1
3409: PUSH
3410: EMPTY
3411: LIST
3412: LIST
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PPUSH
3418: CALL_OW 69
3422: PUSH
3423: FOR_IN
3424: IFFALSE 3468
// begin SetResourceType ( GetBase ( i ) , mat_cans , 5000 ) ;
3426: LD_VAR 0 2
3430: PPUSH
3431: CALL_OW 274
3435: PPUSH
3436: LD_INT 1
3438: PPUSH
3439: LD_INT 5000
3441: PPUSH
3442: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 3000 ) ;
3446: LD_VAR 0 2
3450: PPUSH
3451: CALL_OW 274
3455: PPUSH
3456: LD_INT 2
3458: PPUSH
3459: LD_INT 3000
3461: PPUSH
3462: CALL_OW 277
// end ;
3466: GO 3423
3468: POP
3469: POP
// uc_side := 3 ;
3470: LD_ADDR_OWVAR 20
3474: PUSH
3475: LD_INT 3
3477: ST_TO_ADDR
// uc_nation := 3 ;
3478: LD_ADDR_OWVAR 21
3482: PUSH
3483: LD_INT 3
3485: ST_TO_ADDR
// skill := [ 2 , 3 , 4 ] [ Difficulty ] ;
3486: LD_ADDR_VAR 0 11
3490: PUSH
3491: LD_INT 2
3493: PUSH
3494: LD_INT 3
3496: PUSH
3497: LD_INT 4
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: PUSH
3505: LD_OWVAR 67
3509: ARRAY
3510: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
3511: LD_ADDR_EXP 52
3515: PUSH
3516: LD_STRING Pokryshkin
3518: PPUSH
3519: LD_INT 0
3521: PPUSH
3522: CALL 489 0 2
3526: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3527: LD_EXP 52
3531: PPUSH
3532: LD_INT 63
3534: PPUSH
3535: LD_INT 21
3537: PPUSH
3538: LD_INT 0
3540: PPUSH
3541: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3545: LD_EXP 52
3549: PPUSH
3550: CALL_OW 140
// InitHc ;
3554: CALL_OW 19
// for i in fac do
3558: LD_ADDR_VAR 0 2
3562: PUSH
3563: LD_VAR 0 10
3567: PUSH
3568: FOR_IN
3569: IFFALSE 3622
// begin for j = 1 to 6 do
3571: LD_ADDR_VAR 0 3
3575: PUSH
3576: DOUBLE
3577: LD_INT 1
3579: DEC
3580: ST_TO_ADDR
3581: LD_INT 6
3583: PUSH
3584: FOR_TO
3585: IFFALSE 3618
// begin PrepareHuman ( false , 3 , skill ) ;
3587: LD_INT 0
3589: PPUSH
3590: LD_INT 3
3592: PPUSH
3593: LD_VAR 0 11
3597: PPUSH
3598: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3602: CALL_OW 44
3606: PPUSH
3607: LD_VAR 0 2
3611: PPUSH
3612: CALL_OW 52
// end ;
3616: GO 3584
3618: POP
3619: POP
// end ;
3620: GO 3568
3622: POP
3623: POP
// for i in lab do
3624: LD_ADDR_VAR 0 2
3628: PUSH
3629: LD_VAR 0 9
3633: PUSH
3634: FOR_IN
3635: IFFALSE 3668
// begin PrepareHuman ( false , 4 , skill ) ;
3637: LD_INT 0
3639: PPUSH
3640: LD_INT 4
3642: PPUSH
3643: LD_VAR 0 11
3647: PPUSH
3648: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3652: CALL_OW 44
3656: PPUSH
3657: LD_VAR 0 2
3661: PPUSH
3662: CALL_OW 52
// end ;
3666: GO 3634
3668: POP
3669: POP
// for i in tw do
3670: LD_ADDR_VAR 0 2
3674: PUSH
3675: LD_VAR 0 7
3679: PUSH
3680: FOR_IN
3681: IFFALSE 3730
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
3683: LD_VAR 0 2
3687: PPUSH
3688: LD_INT 42
3690: PUSH
3691: LD_INT 43
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 1
3700: PPUSH
3701: LD_INT 2
3703: PPUSH
3704: CALL_OW 12
3708: ARRAY
3709: PPUSH
3710: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
3714: LD_VAR 0 11
3718: PPUSH
3719: LD_VAR 0 2
3723: PPUSH
3724: CALL 830 0 2
// end ;
3728: GO 3680
3730: POP
3731: POP
// for i in bar do
3732: LD_ADDR_VAR 0 2
3736: PUSH
3737: LD_VAR 0 8
3741: PUSH
3742: FOR_IN
3743: IFFALSE 3776
// begin PrepareHuman ( false , 1 , skill ) ;
3745: LD_INT 0
3747: PPUSH
3748: LD_INT 1
3750: PPUSH
3751: LD_VAR 0 11
3755: PPUSH
3756: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3760: CALL_OW 44
3764: PPUSH
3765: LD_VAR 0 2
3769: PPUSH
3770: CALL_OW 52
// end ;
3774: GO 3742
3776: POP
3777: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
3778: LD_ADDR_VAR 0 13
3782: PUSH
3783: LD_INT 100
3785: PUSH
3786: LD_INT 9
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: PUSH
3793: LD_INT 135
3795: PUSH
3796: LD_INT 60
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PUSH
3803: LD_INT 41
3805: PUSH
3806: LD_INT 6
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 22
3815: PUSH
3816: LD_INT 9
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 84
3825: PUSH
3826: LD_INT 14
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: ST_TO_ADDR
// vehicles := [ ] ;
3840: LD_ADDR_VAR 0 12
3844: PUSH
3845: EMPTY
3846: ST_TO_ADDR
// for i in spot_xy do
3847: LD_ADDR_VAR 0 2
3851: PUSH
3852: LD_VAR 0 13
3856: PUSH
3857: FOR_IN
3858: IFFALSE 4016
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
3860: LD_ADDR_VAR 0 6
3864: PUSH
3865: LD_INT 3
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: LD_INT 22
3873: PPUSH
3874: LD_INT 1
3876: PPUSH
3877: LD_INT 1
3879: PPUSH
3880: LD_INT 42
3882: PUSH
3883: LD_INT 43
3885: PUSH
3886: LD_INT 44
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: LIST
3893: PUSH
3894: LD_INT 1
3896: PPUSH
3897: LD_INT 3
3899: PPUSH
3900: CALL_OW 12
3904: ARRAY
3905: PPUSH
3906: LD_INT 100
3908: PPUSH
3909: CALL 552 0 7
3913: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
3914: LD_ADDR_VAR 0 12
3918: PUSH
3919: LD_VAR 0 12
3923: PPUSH
3924: LD_VAR 0 12
3928: PUSH
3929: LD_INT 1
3931: PLUS
3932: PPUSH
3933: LD_VAR 0 6
3937: PPUSH
3938: CALL_OW 2
3942: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3943: LD_VAR 0 6
3947: PPUSH
3948: LD_INT 3
3950: PPUSH
3951: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
3955: LD_VAR 0 6
3959: PPUSH
3960: LD_VAR 0 2
3964: PUSH
3965: LD_INT 1
3967: ARRAY
3968: PPUSH
3969: LD_VAR 0 2
3973: PUSH
3974: LD_INT 2
3976: ARRAY
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
3985: LD_INT 0
3987: PPUSH
3988: LD_INT 3
3990: PPUSH
3991: LD_VAR 0 11
3995: PPUSH
3996: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4000: CALL_OW 44
4004: PPUSH
4005: LD_VAR 0 6
4009: PPUSH
4010: CALL_OW 52
// end ;
4014: GO 3857
4016: POP
4017: POP
// for i = 1 to [ 5 , 7 , 8 ] [ Difficulty ] do
4018: LD_ADDR_VAR 0 2
4022: PUSH
4023: DOUBLE
4024: LD_INT 1
4026: DEC
4027: ST_TO_ADDR
4028: LD_INT 5
4030: PUSH
4031: LD_INT 7
4033: PUSH
4034: LD_INT 8
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: LIST
4041: PUSH
4042: LD_OWVAR 67
4046: ARRAY
4047: PUSH
4048: FOR_TO
4049: IFFALSE 4109
// begin PrepareHuman ( false , 1 , skill ) ;
4051: LD_INT 0
4053: PPUSH
4054: LD_INT 1
4056: PPUSH
4057: LD_VAR 0 11
4061: PPUSH
4062: CALL_OW 380
// un := CreateHuman ;
4066: LD_ADDR_VAR 0 5
4070: PUSH
4071: CALL_OW 44
4075: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4076: LD_VAR 0 5
4080: PPUSH
4081: LD_INT 11
4083: PPUSH
4084: LD_INT 0
4086: PPUSH
4087: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4091: LD_ADDR_EXP 55
4095: PUSH
4096: LD_EXP 55
4100: PUSH
4101: LD_VAR 0 5
4105: ADD
4106: ST_TO_ADDR
// end ;
4107: GO 4048
4109: POP
4110: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4111: LD_ADDR_VAR 0 2
4115: PUSH
4116: DOUBLE
4117: LD_INT 1
4119: DEC
4120: ST_TO_ADDR
4121: LD_INT 2
4123: PUSH
4124: LD_INT 3
4126: PUSH
4127: LD_INT 4
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: LIST
4134: PUSH
4135: LD_OWVAR 67
4139: ARRAY
4140: PUSH
4141: FOR_TO
4142: IFFALSE 4202
// begin PrepareHuman ( false , 1 , skill ) ;
4144: LD_INT 0
4146: PPUSH
4147: LD_INT 1
4149: PPUSH
4150: LD_VAR 0 11
4154: PPUSH
4155: CALL_OW 380
// un := CreateHuman ;
4159: LD_ADDR_VAR 0 5
4163: PUSH
4164: CALL_OW 44
4168: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4169: LD_VAR 0 5
4173: PPUSH
4174: LD_INT 12
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4184: LD_ADDR_EXP 53
4188: PUSH
4189: LD_EXP 53
4193: PUSH
4194: LD_VAR 0 5
4198: ADD
4199: ST_TO_ADDR
// end ;
4200: GO 4141
4202: POP
4203: POP
// for i = 1 to 2 do
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: DOUBLE
4210: LD_INT 1
4212: DEC
4213: ST_TO_ADDR
4214: LD_INT 2
4216: PUSH
4217: FOR_TO
4218: IFFALSE 4284
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 1
4225: PPUSH
4226: LD_VAR 0 11
4230: PPUSH
4231: CALL_OW 380
// un := CreateHuman ;
4235: LD_ADDR_VAR 0 5
4239: PUSH
4240: CALL_OW 44
4244: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4245: LD_VAR 0 5
4249: PPUSH
4250: LD_INT 39
4252: PPUSH
4253: LD_INT 12
4255: PPUSH
4256: LD_INT 3
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4266: LD_ADDR_EXP 54
4270: PUSH
4271: LD_EXP 54
4275: PUSH
4276: LD_VAR 0 5
4280: ADD
4281: ST_TO_ADDR
// end ;
4282: GO 4217
4284: POP
4285: POP
// for i = 1 to 3 do
4286: LD_ADDR_VAR 0 2
4290: PUSH
4291: DOUBLE
4292: LD_INT 1
4294: DEC
4295: ST_TO_ADDR
4296: LD_INT 3
4298: PUSH
4299: FOR_TO
4300: IFFALSE 4366
// begin PrepareHuman ( false , 1 , skill ) ;
4302: LD_INT 0
4304: PPUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_VAR 0 11
4312: PPUSH
4313: CALL_OW 380
// un := CreateHuman ;
4317: LD_ADDR_VAR 0 5
4321: PUSH
4322: CALL_OW 44
4326: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4327: LD_VAR 0 5
4331: PPUSH
4332: LD_INT 180
4334: PPUSH
4335: LD_INT 11
4337: PPUSH
4338: LD_INT 4
4340: PPUSH
4341: LD_INT 0
4343: PPUSH
4344: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4348: LD_ADDR_EXP 58
4352: PUSH
4353: LD_EXP 58
4357: PUSH
4358: LD_VAR 0 5
4362: ADD
4363: ST_TO_ADDR
// end ;
4364: GO 4299
4366: POP
4367: POP
// ru_vehicles := vehicles ;
4368: LD_ADDR_EXP 56
4372: PUSH
4373: LD_VAR 0 12
4377: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4378: LD_ADDR_EXP 59
4382: PUSH
4383: LD_INT 131
4385: PUSH
4386: LD_INT 121
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 113
4395: PUSH
4396: LD_INT 90
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: LD_INT 93
4405: PUSH
4406: LD_INT 62
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: PUSH
4418: LD_INT 106
4420: PUSH
4421: LD_INT 54
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PUSH
4428: LD_INT 120
4430: PUSH
4431: LD_INT 80
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: PUSH
4438: LD_INT 143
4440: PUSH
4441: LD_INT 120
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: LIST
4452: PUSH
4453: LD_INT 154
4455: PUSH
4456: LD_INT 116
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 140
4465: PUSH
4466: LD_INT 93
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 130
4475: PUSH
4476: LD_INT 58
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: PUSH
4488: LD_INT 105
4490: PUSH
4491: LD_INT 106
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: PUSH
4498: LD_INT 134
4500: PUSH
4501: LD_INT 98
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: PUSH
4508: LD_INT 159
4510: PUSH
4511: LD_INT 113
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: ST_TO_ADDR
// if Difficulty = 1 then
4529: LD_OWVAR 67
4533: PUSH
4534: LD_INT 1
4536: EQUAL
4537: IFFALSE 4541
// exit ;
4539: GO 4596
// for i = 1 to Difficulty - 1 do
4541: LD_ADDR_VAR 0 2
4545: PUSH
4546: DOUBLE
4547: LD_INT 1
4549: DEC
4550: ST_TO_ADDR
4551: LD_OWVAR 67
4555: PUSH
4556: LD_INT 1
4558: MINUS
4559: PUSH
4560: FOR_TO
4561: IFFALSE 4594
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
4563: LD_ADDR_EXP 57
4567: PUSH
4568: LD_EXP 57
4572: PUSH
4573: LD_INT 22
4575: PUSH
4576: LD_INT 1
4578: PUSH
4579: LD_INT 1
4581: PUSH
4582: LD_INT 43
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: ADD
4591: ST_TO_ADDR
4592: GO 4560
4594: POP
4595: POP
// end ;
4596: LD_VAR 0 1
4600: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
4601: LD_INT 22
4603: PUSH
4604: LD_INT 3
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: LD_INT 21
4613: PUSH
4614: LD_INT 2
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: PPUSH
4625: CALL_OW 69
4629: IFFALSE 4723
4631: GO 4633
4633: DISABLE
4634: LD_INT 0
4636: PPUSH
4637: PPUSH
// begin enable ;
4638: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4639: LD_ADDR_VAR 0 2
4643: PUSH
4644: LD_INT 22
4646: PUSH
4647: LD_INT 3
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: PUSH
4654: LD_INT 21
4656: PUSH
4657: LD_INT 2
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PPUSH
4668: CALL_OW 69
4672: ST_TO_ADDR
// if filter then
4673: LD_VAR 0 2
4677: IFFALSE 4723
// for i in filter do
4679: LD_ADDR_VAR 0 1
4683: PUSH
4684: LD_VAR 0 2
4688: PUSH
4689: FOR_IN
4690: IFFALSE 4721
// if GetFuel ( i ) < 20 then
4692: LD_VAR 0 1
4696: PPUSH
4697: CALL_OW 261
4701: PUSH
4702: LD_INT 20
4704: LESS
4705: IFFALSE 4719
// SetFuel ( i , 20 ) ;
4707: LD_VAR 0 1
4711: PPUSH
4712: LD_INT 20
4714: PPUSH
4715: CALL_OW 240
4719: GO 4689
4721: POP
4722: POP
// end ;
4723: PPOPN 2
4725: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
4726: LD_EXP 57
4730: IFFALSE 4949
4732: GO 4734
4734: DISABLE
4735: LD_INT 0
4737: PPUSH
4738: PPUSH
4739: PPUSH
// begin enable ;
4740: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4741: LD_ADDR_VAR 0 2
4745: PUSH
4746: LD_INT 22
4748: PUSH
4749: LD_INT 3
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: PUSH
4756: LD_INT 30
4758: PUSH
4759: LD_INT 3
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: PPUSH
4770: CALL_OW 69
4774: ST_TO_ADDR
// can_produce := [ ] ;
4775: LD_ADDR_VAR 0 3
4779: PUSH
4780: EMPTY
4781: ST_TO_ADDR
// if not fac then
4782: LD_VAR 0 2
4786: NOT
4787: IFFALSE 4792
// begin disable ;
4789: DISABLE
// exit ;
4790: GO 4949
// end ; for i in fac do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_VAR 0 2
4801: PUSH
4802: FOR_IN
4803: IFFALSE 4841
// if UnitsInside ( i ) then
4805: LD_VAR 0 1
4809: PPUSH
4810: CALL_OW 313
4814: IFFALSE 4839
// can_produce := Insert ( can_produce , 1 , i ) ;
4816: LD_ADDR_VAR 0 3
4820: PUSH
4821: LD_VAR 0 3
4825: PPUSH
4826: LD_INT 1
4828: PPUSH
4829: LD_VAR 0 1
4833: PPUSH
4834: CALL_OW 2
4838: ST_TO_ADDR
4839: GO 4802
4841: POP
4842: POP
// if not can_produce then
4843: LD_VAR 0 3
4847: NOT
4848: IFFALSE 4852
// exit ;
4850: GO 4949
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
4852: LD_VAR 0 3
4856: PUSH
4857: LD_INT 1
4859: PPUSH
4860: LD_VAR 0 3
4864: PPUSH
4865: CALL_OW 12
4869: ARRAY
4870: PPUSH
4871: LD_EXP 57
4875: PUSH
4876: LD_INT 1
4878: ARRAY
4879: PPUSH
4880: LD_EXP 57
4884: PUSH
4885: LD_INT 2
4887: ARRAY
4888: PPUSH
4889: LD_EXP 57
4893: PUSH
4894: LD_INT 3
4896: ARRAY
4897: PPUSH
4898: LD_EXP 57
4902: PUSH
4903: LD_INT 4
4905: ARRAY
4906: PPUSH
4907: CALL_OW 125
// for i = 1 to 4 do
4911: LD_ADDR_VAR 0 1
4915: PUSH
4916: DOUBLE
4917: LD_INT 1
4919: DEC
4920: ST_TO_ADDR
4921: LD_INT 4
4923: PUSH
4924: FOR_TO
4925: IFFALSE 4947
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
4927: LD_ADDR_EXP 57
4931: PUSH
4932: LD_EXP 57
4936: PPUSH
4937: LD_INT 1
4939: PPUSH
4940: CALL_OW 3
4944: ST_TO_ADDR
4945: GO 4924
4947: POP
4948: POP
// end ;
4949: PPOPN 3
4951: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
4952: LD_INT 0
4954: PPUSH
4955: PPUSH
4956: PPUSH
// for i = 1 to [ 3 , 5 , 6 ] [ Difficulty ] do
4957: LD_ADDR_VAR 0 2
4961: PUSH
4962: DOUBLE
4963: LD_INT 1
4965: DEC
4966: ST_TO_ADDR
4967: LD_INT 3
4969: PUSH
4970: LD_INT 5
4972: PUSH
4973: LD_INT 6
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: PUSH
4981: LD_OWVAR 67
4985: ARRAY
4986: PUSH
4987: FOR_TO
4988: IFFALSE 5137
// begin PrepareHuman ( false , 3 , 3 ) ;
4990: LD_INT 0
4992: PPUSH
4993: LD_INT 3
4995: PPUSH
4996: LD_INT 3
4998: PPUSH
4999: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
5003: LD_ADDR_VAR 0 3
5007: PUSH
5008: LD_INT 3
5010: PPUSH
5011: LD_INT 3
5013: PPUSH
5014: LD_INT 22
5016: PPUSH
5017: LD_INT 1
5019: PPUSH
5020: LD_INT 1
5022: PPUSH
5023: LD_INT 43
5025: PUSH
5026: LD_INT 42
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: PUSH
5033: LD_INT 1
5035: PPUSH
5036: LD_INT 2
5038: PPUSH
5039: CALL_OW 12
5043: ARRAY
5044: PPUSH
5045: LD_INT 70
5047: PPUSH
5048: CALL 552 0 7
5052: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5053: LD_VAR 0 3
5057: PPUSH
5058: LD_INT 4
5060: PPUSH
5061: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5065: LD_VAR 0 3
5069: PPUSH
5070: LD_INT 229
5072: PPUSH
5073: LD_INT 44
5075: PPUSH
5076: LD_INT 0
5078: PPUSH
5079: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5083: CALL_OW 44
5087: PPUSH
5088: LD_VAR 0 3
5092: PPUSH
5093: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5097: LD_ADDR_EXP 56
5101: PUSH
5102: LD_EXP 56
5106: PUSH
5107: LD_VAR 0 3
5111: ADD
5112: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5113: LD_VAR 0 3
5117: PPUSH
5118: LD_INT 191
5120: PPUSH
5121: LD_INT 32
5123: PPUSH
5124: CALL_OW 111
// Wait ( 0 0$02 ) ;
5128: LD_INT 70
5130: PPUSH
5131: CALL_OW 67
// end ;
5135: GO 4987
5137: POP
5138: POP
// end ;
5139: LD_VAR 0 1
5143: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5144: LD_EXP 31
5148: PUSH
5149: LD_EXP 56
5153: AND
5154: IFFALSE 5328
5156: GO 5158
5158: DISABLE
5159: LD_INT 0
5161: PPUSH
5162: PPUSH
5163: PPUSH
// begin wait ( 0 0$50 ) ;
5164: LD_INT 1750
5166: PPUSH
5167: CALL_OW 67
// tmp := ru_vehicles ;
5171: LD_ADDR_VAR 0 3
5175: PUSH
5176: LD_EXP 56
5180: ST_TO_ADDR
// if not tmp then
5181: LD_VAR 0 3
5185: NOT
5186: IFFALSE 5190
// exit ;
5188: GO 5328
// repeat wait ( 0 0$1 ) ;
5190: LD_INT 35
5192: PPUSH
5193: CALL_OW 67
// for i in tmp do
5197: LD_ADDR_VAR 0 1
5201: PUSH
5202: LD_VAR 0 3
5206: PUSH
5207: FOR_IN
5208: IFFALSE 5319
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5210: LD_ADDR_VAR 0 2
5214: PUSH
5215: LD_INT 22
5217: PUSH
5218: LD_INT 1
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL_OW 74
5234: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5235: LD_VAR 0 1
5239: PPUSH
5240: LD_VAR 0 2
5244: PPUSH
5245: CALL_OW 296
5249: PUSH
5250: LD_INT 10
5252: GREATER
5253: IFFALSE 5272
// ComAgressiveMove ( i , 69 , 101 ) else
5255: LD_VAR 0 1
5259: PPUSH
5260: LD_INT 69
5262: PPUSH
5263: LD_INT 101
5265: PPUSH
5266: CALL_OW 114
5270: GO 5286
// ComAttackUnit ( i , enemy ) ;
5272: LD_VAR 0 1
5276: PPUSH
5277: LD_VAR 0 2
5281: PPUSH
5282: CALL_OW 115
// if GetLives ( i ) < 250 then
5286: LD_VAR 0 1
5290: PPUSH
5291: CALL_OW 256
5295: PUSH
5296: LD_INT 250
5298: LESS
5299: IFFALSE 5317
// tmp := tmp diff i ;
5301: LD_ADDR_VAR 0 3
5305: PUSH
5306: LD_VAR 0 3
5310: PUSH
5311: LD_VAR 0 1
5315: DIFF
5316: ST_TO_ADDR
// end ;
5317: GO 5207
5319: POP
5320: POP
// until not tmp ;
5321: LD_VAR 0 3
5325: NOT
5326: IFFALSE 5190
// end ; end_of_file
5328: PPOPN 3
5330: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5331: LD_INT 0
5333: PPUSH
5334: PPUSH
5335: PPUSH
5336: PPUSH
5337: PPUSH
5338: PPUSH
5339: PPUSH
// InGameOn ;
5340: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5344: LD_EXP 37
5348: PPUSH
5349: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5353: LD_EXP 37
5357: PPUSH
5358: LD_EXP 44
5362: PPUSH
5363: CALL_OW 119
// if Bierezov then
5367: LD_EXP 45
5371: IFFALSE 5387
// ComTurnUnit ( Bierezov , Cornel ) ;
5373: LD_EXP 45
5377: PPUSH
5378: LD_EXP 44
5382: PPUSH
5383: CALL_OW 119
// for i in jmm_units do
5387: LD_ADDR_VAR 0 2
5391: PUSH
5392: LD_EXP 4
5396: PUSH
5397: FOR_IN
5398: IFFALSE 5416
// ComTurnUnit ( i , Cornel ) ;
5400: LD_VAR 0 2
5404: PPUSH
5405: LD_EXP 44
5409: PPUSH
5410: CALL_OW 119
5414: GO 5397
5416: POP
5417: POP
// units := cornel_units union Cornel ;
5418: LD_ADDR_VAR 0 3
5422: PUSH
5423: LD_EXP 6
5427: PUSH
5428: LD_EXP 44
5432: UNION
5433: ST_TO_ADDR
// repeat wait ( 1 ) ;
5434: LD_INT 1
5436: PPUSH
5437: CALL_OW 67
// for i in units do
5441: LD_ADDR_VAR 0 2
5445: PUSH
5446: LD_VAR 0 3
5450: PUSH
5451: FOR_IN
5452: IFFALSE 5485
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5454: LD_VAR 0 2
5458: PPUSH
5459: LD_EXP 37
5463: PPUSH
5464: CALL_OW 250
5468: PPUSH
5469: LD_EXP 37
5473: PPUSH
5474: CALL_OW 251
5478: PPUSH
5479: CALL_OW 111
5483: GO 5451
5485: POP
5486: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5487: LD_VAR 0 3
5491: PPUSH
5492: LD_INT 92
5494: PUSH
5495: LD_EXP 37
5499: PPUSH
5500: CALL_OW 250
5504: PUSH
5505: LD_EXP 37
5509: PPUSH
5510: CALL_OW 251
5514: PUSH
5515: LD_INT 10
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: PPUSH
5524: CALL_OW 72
5528: PUSH
5529: LD_VAR 0 3
5533: EQUAL
5534: IFFALSE 5434
// for i in units do
5536: LD_ADDR_VAR 0 2
5540: PUSH
5541: LD_VAR 0 3
5545: PUSH
5546: FOR_IN
5547: IFFALSE 5565
// ComTurnUnit ( i , JMM ) ;
5549: LD_VAR 0 2
5553: PPUSH
5554: LD_EXP 37
5558: PPUSH
5559: CALL_OW 119
5563: GO 5546
5565: POP
5566: POP
// ComTurnUnit ( Cornel , JMM ) ;
5567: LD_EXP 44
5571: PPUSH
5572: LD_EXP 37
5576: PPUSH
5577: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
5581: LD_EXP 37
5585: PPUSH
5586: LD_STRING D1-JMM-1
5588: PPUSH
5589: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
5593: LD_EXP 44
5597: PPUSH
5598: LD_STRING D1-Corn-1
5600: PPUSH
5601: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
5605: LD_EXP 37
5609: PPUSH
5610: LD_EXP 44
5614: PPUSH
5615: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
5619: LD_EXP 44
5623: PPUSH
5624: LD_EXP 37
5628: PPUSH
5629: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
5633: LD_INT 35
5635: PPUSH
5636: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
5640: LD_EXP 37
5644: PPUSH
5645: LD_EXP 44
5649: PPUSH
5650: CALL_OW 296
5654: PUSH
5655: LD_INT 6
5657: LESS
5658: IFFALSE 5633
// ChangeSideFog ( 4 , 1 ) ;
5660: LD_INT 4
5662: PPUSH
5663: LD_INT 1
5665: PPUSH
5666: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
5670: LD_EXP 37
5674: PPUSH
5675: LD_EXP 44
5679: PPUSH
5680: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5684: LD_EXP 44
5688: PPUSH
5689: LD_EXP 37
5693: PPUSH
5694: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
5698: LD_EXP 37
5702: PPUSH
5703: LD_STRING D1-JMM-2
5705: PPUSH
5706: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
5710: LD_EXP 37
5714: PPUSH
5715: LD_STRING D1-JMM-2a
5717: PPUSH
5718: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
5722: LD_EXP 44
5726: PPUSH
5727: LD_STRING D1-Corn-2
5729: PPUSH
5730: CALL_OW 88
// if bierezov_exist or debug then
5734: LD_EXP 7
5738: PUSH
5739: LD_EXP 1
5743: OR
5744: IFFALSE 5985
// begin ComTurnUnit ( Cornel , Bierezov ) ;
5746: LD_EXP 44
5750: PPUSH
5751: LD_EXP 45
5755: PPUSH
5756: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
5760: LD_INT 10
5762: PPUSH
5763: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
5767: LD_EXP 44
5771: PPUSH
5772: LD_STRING D1a-Corn-1
5774: PPUSH
5775: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
5779: LD_EXP 37
5783: PPUSH
5784: LD_EXP 45
5788: PPUSH
5789: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
5793: LD_EXP 45
5797: PPUSH
5798: LD_EXP 37
5802: PPUSH
5803: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
5807: LD_EXP 37
5811: PPUSH
5812: LD_STRING D1a-JMM-1
5814: PPUSH
5815: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
5819: LD_EXP 37
5823: PPUSH
5824: LD_EXP 44
5828: PPUSH
5829: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5833: LD_EXP 44
5837: PPUSH
5838: LD_EXP 37
5842: PPUSH
5843: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
5847: LD_EXP 44
5851: PPUSH
5852: LD_STRING D1a-Corn-2
5854: PPUSH
5855: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
5859: LD_EXP 37
5863: PPUSH
5864: LD_STRING D1a-JMM-2
5866: PPUSH
5867: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
5871: LD_EXP 44
5875: PPUSH
5876: LD_STRING D1a-Corn-3
5878: PPUSH
5879: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
5883: LD_EXP 37
5887: PPUSH
5888: LD_STRING D1a-JMM-3
5890: PPUSH
5891: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
5895: LD_EXP 44
5899: PPUSH
5900: LD_STRING D1a-Corn-4
5902: PPUSH
5903: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
5907: LD_EXP 37
5911: PPUSH
5912: LD_STRING D1a-JMM-4
5914: PPUSH
5915: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
5919: LD_EXP 44
5923: PPUSH
5924: LD_STRING D1a-Corn-5
5926: PPUSH
5927: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
5931: LD_EXP 45
5935: PPUSH
5936: LD_EXP 44
5940: PPUSH
5941: CALL_OW 250
5945: PPUSH
5946: LD_EXP 44
5950: PPUSH
5951: CALL_OW 251
5955: PUSH
5956: LD_INT 2
5958: MINUS
5959: PPUSH
5960: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
5964: LD_EXP 45
5968: PPUSH
5969: LD_EXP 44
5973: PPUSH
5974: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
5978: LD_INT 10
5980: PPUSH
5981: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
5985: LD_EXP 37
5989: PPUSH
5990: LD_STRING D1b-JMM-1
5992: PPUSH
5993: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
5997: LD_EXP 44
6001: PPUSH
6002: LD_STRING D1b-Corn-1
6004: PPUSH
6005: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6009: LD_EXP 37
6013: PPUSH
6014: LD_STRING D1b-JMM-2
6016: PPUSH
6017: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6021: LD_EXP 44
6025: PPUSH
6026: LD_STRING D1b-Corn-2
6028: PPUSH
6029: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6033: LD_EXP 37
6037: PPUSH
6038: LD_STRING D1b-JMM-3
6040: PPUSH
6041: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6045: LD_INT 10
6047: PPUSH
6048: CALL_OW 67
// SayRadio ( Powell , D1b-Pow-3 ) ;
6052: LD_EXP 46
6056: PPUSH
6057: LD_STRING D1b-Pow-3
6059: PPUSH
6060: CALL_OW 94
// Say ( JMM , D1b-JMM-4 ) ;
6064: LD_EXP 37
6068: PPUSH
6069: LD_STRING D1b-JMM-4
6071: PPUSH
6072: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6076: LD_EXP 44
6080: PPUSH
6081: LD_STRING D1b-Corn-4
6083: PPUSH
6084: CALL_OW 88
// if Khatam then
6088: LD_EXP 41
6092: IFFALSE 6108
// Say ( Khatam , D1b-Khat-4 ) else
6094: LD_EXP 41
6098: PPUSH
6099: LD_STRING D1b-Khat-4
6101: PPUSH
6102: CALL_OW 88
6106: GO 6144
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6108: LD_EXP 6
6112: PPUSH
6113: LD_INT 26
6115: PUSH
6116: LD_INT 1
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PPUSH
6123: CALL_OW 72
6127: PUSH
6128: LD_EXP 44
6132: PUSH
6133: EMPTY
6134: LIST
6135: DIFF
6136: PPUSH
6137: LD_STRING D1b-Sol1-4
6139: PPUSH
6140: CALL 640 0 2
// if Cyrus then
6144: LD_EXP 39
6148: IFFALSE 6162
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6150: LD_EXP 39
6154: PPUSH
6155: LD_STRING D1b-Cyrus-4
6157: PPUSH
6158: CALL_OW 88
// if Lisa then
6162: LD_EXP 40
6166: IFFALSE 6224
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6168: LD_EXP 40
6172: PPUSH
6173: LD_STRING D1b-Lisa-4
6175: PPUSH
6176: CALL_OW 88
// if Cyrus then
6180: LD_EXP 39
6184: IFFALSE 6224
// begin if not IsInUnit ( Cyrus ) then
6186: LD_EXP 39
6190: PPUSH
6191: CALL_OW 310
6195: NOT
6196: IFFALSE 6212
// ComTurnUnit ( Cyrus , Lisa ) ;
6198: LD_EXP 39
6202: PPUSH
6203: LD_EXP 40
6207: PPUSH
6208: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6212: LD_EXP 39
6216: PPUSH
6217: LD_STRING D1b-Cyrus-5
6219: PPUSH
6220: CALL_OW 88
// end ; end ; SelectGroup ;
6224: CALL 2684 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6228: LD_EXP 37
6232: PPUSH
6233: LD_STRING D1d-JMM-1
6235: PPUSH
6236: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6240: LD_EXP 44
6244: PPUSH
6245: LD_STRING D1d-Corn-1
6247: PPUSH
6248: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6252: LD_ADDR_VAR 0 2
6256: PUSH
6257: LD_EXP 4
6261: PUSH
6262: LD_EXP 6
6266: ADD
6267: PUSH
6268: LD_EXP 37
6272: ADD
6273: PUSH
6274: FOR_IN
6275: IFFALSE 6288
// ComHold ( i ) ;
6277: LD_VAR 0 2
6281: PPUSH
6282: CALL_OW 140
6286: GO 6274
6288: POP
6289: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6290: LD_ADDR_VAR 0 4
6294: PUSH
6295: LD_INT 22
6297: PUSH
6298: LD_INT 1
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: PUSH
6305: LD_INT 21
6307: PUSH
6308: LD_INT 2
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PPUSH
6319: CALL_OW 69
6323: ST_TO_ADDR
// if vehicles then
6324: LD_VAR 0 4
6328: IFFALSE 6666
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6330: LD_EXP 6
6334: PPUSH
6335: LD_INT 55
6337: PUSH
6338: EMPTY
6339: LIST
6340: PPUSH
6341: CALL_OW 72
6345: IFFALSE 6384
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6347: LD_ADDR_VAR 0 2
6351: PUSH
6352: LD_EXP 6
6356: PPUSH
6357: LD_INT 55
6359: PUSH
6360: EMPTY
6361: LIST
6362: PPUSH
6363: CALL_OW 72
6367: PUSH
6368: FOR_IN
6369: IFFALSE 6382
// ComExitVehicle ( i ) ;
6371: LD_VAR 0 2
6375: PPUSH
6376: CALL_OW 121
6380: GO 6368
6382: POP
6383: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6384: LD_ADDR_VAR 0 5
6388: PUSH
6389: LD_VAR 0 4
6393: PPUSH
6394: LD_INT 34
6396: PUSH
6397: LD_INT 51
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 72
6408: ST_TO_ADDR
// if cargos then
6409: LD_VAR 0 5
6413: IFFALSE 6596
// begin vehicles := cargos ;
6415: LD_ADDR_VAR 0 4
6419: PUSH
6420: LD_VAR 0 5
6424: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6425: LD_ADDR_VAR 0 6
6429: PUSH
6430: LD_STRING 02_resources_4
6432: PPUSH
6433: LD_INT 0
6435: PPUSH
6436: CALL_OW 30
6440: ST_TO_ADDR
// if debug and not resources then
6441: LD_EXP 1
6445: PUSH
6446: LD_VAR 0 6
6450: NOT
6451: AND
6452: IFFALSE 6462
// resources := 160 ;
6454: LD_ADDR_VAR 0 6
6458: PUSH
6459: LD_INT 160
6461: ST_TO_ADDR
// if resources mod 10 then
6462: LD_VAR 0 6
6466: PUSH
6467: LD_INT 10
6469: MOD
6470: IFFALSE 6492
// resources := resources - resources mod 10 ;
6472: LD_ADDR_VAR 0 6
6476: PUSH
6477: LD_VAR 0 6
6481: PUSH
6482: LD_VAR 0 6
6486: PUSH
6487: LD_INT 10
6489: MOD
6490: MINUS
6491: ST_TO_ADDR
// if resources then
6492: LD_VAR 0 6
6496: IFFALSE 6596
// for i in cargos do
6498: LD_ADDR_VAR 0 2
6502: PUSH
6503: LD_VAR 0 5
6507: PUSH
6508: FOR_IN
6509: IFFALSE 6594
// begin if resources < 100 then
6511: LD_VAR 0 6
6515: PUSH
6516: LD_INT 100
6518: LESS
6519: IFFALSE 6541
// begin cargo := resources ;
6521: LD_ADDR_VAR 0 7
6525: PUSH
6526: LD_VAR 0 6
6530: ST_TO_ADDR
// resources := 0 ;
6531: LD_ADDR_VAR 0 6
6535: PUSH
6536: LD_INT 0
6538: ST_TO_ADDR
// end else
6539: GO 6563
// begin cargo := 100 ;
6541: LD_ADDR_VAR 0 7
6545: PUSH
6546: LD_INT 100
6548: ST_TO_ADDR
// resources := resources - 100 ;
6549: LD_ADDR_VAR 0 6
6553: PUSH
6554: LD_VAR 0 6
6558: PUSH
6559: LD_INT 100
6561: MINUS
6562: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
6563: LD_VAR 0 2
6567: PPUSH
6568: LD_INT 1
6570: PPUSH
6571: LD_VAR 0 7
6575: PPUSH
6576: CALL_OW 290
// if resources = 0 then
6580: LD_VAR 0 6
6584: PUSH
6585: LD_INT 0
6587: EQUAL
6588: IFFALSE 6592
// break ;
6590: GO 6594
// end ;
6592: GO 6508
6594: POP
6595: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
6596: LD_VAR 0 4
6600: PUSH
6601: LD_INT 1
6603: ARRAY
6604: PPUSH
6605: CALL_OW 311
6609: PPUSH
6610: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
6614: LD_VAR 0 4
6618: PUSH
6619: LD_INT 1
6621: ARRAY
6622: PPUSH
6623: LD_INT 4
6625: PPUSH
6626: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
6630: LD_EXP 44
6634: PPUSH
6635: LD_VAR 0 4
6639: PUSH
6640: LD_INT 1
6642: ARRAY
6643: PPUSH
6644: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
6648: LD_INT 35
6650: PPUSH
6651: CALL_OW 67
// until IsInUnit ( Cornel ) ;
6655: LD_EXP 44
6659: PPUSH
6660: CALL_OW 310
6664: IFFALSE 6648
// end ; InGameOff ;
6666: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6670: LD_STRING M1
6672: PPUSH
6673: CALL_OW 337
// SaveForQuickRestart ;
6677: CALL_OW 22
// cornel_active := true ;
6681: LD_ADDR_EXP 8
6685: PUSH
6686: LD_INT 1
6688: ST_TO_ADDR
// end ;
6689: LD_VAR 0 1
6693: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
6694: LD_EXP 37
6698: PPUSH
6699: LD_EXP 47
6703: PPUSH
6704: CALL_OW 296
6708: PUSH
6709: LD_INT 10
6711: LESS
6712: IFFALSE 8095
6714: GO 6716
6716: DISABLE
6717: LD_INT 0
6719: PPUSH
6720: PPUSH
6721: PPUSH
6722: PPUSH
6723: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
6724: LD_ADDR_VAR 0 2
6728: PUSH
6729: LD_INT 89
6731: PUSH
6732: LD_INT 34
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: LD_INT 138
6741: PUSH
6742: LD_INT 63
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: LD_INT 196
6751: PUSH
6752: LD_INT 84
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 135
6761: PUSH
6762: LD_INT 52
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: LD_INT 103
6771: PUSH
6772: LD_INT 39
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: PUSH
6779: LD_INT 58
6781: PUSH
6782: LD_INT 30
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 38
6791: PUSH
6792: LD_INT 51
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: ST_TO_ADDR
// Video ( true ) ;
6808: LD_INT 1
6810: PPUSH
6811: CALL 1200 0 1
// if jmm_units then
6815: LD_EXP 4
6819: IFFALSE 6895
// for i in jmm_units do
6821: LD_ADDR_VAR 0 1
6825: PUSH
6826: LD_EXP 4
6830: PUSH
6831: FOR_IN
6832: IFFALSE 6893
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
6834: LD_VAR 0 1
6838: PPUSH
6839: LD_EXP 37
6843: PPUSH
6844: CALL_OW 296
6848: PUSH
6849: LD_INT 10
6851: LESS
6852: PUSH
6853: LD_VAR 0 1
6857: PPUSH
6858: CALL_OW 310
6862: NOT
6863: AND
6864: IFFALSE 6882
// ComTurnUnit ( i , JMM ) else
6866: LD_VAR 0 1
6870: PPUSH
6871: LD_EXP 37
6875: PPUSH
6876: CALL_OW 119
6880: GO 6891
// ComHold ( i ) ;
6882: LD_VAR 0 1
6886: PPUSH
6887: CALL_OW 140
// end ;
6891: GO 6831
6893: POP
6894: POP
// if IsInUnit ( JMM ) then
6895: LD_EXP 37
6899: PPUSH
6900: CALL_OW 310
6904: IFFALSE 6929
// begin ComExitVehicle ( JMM ) ;
6906: LD_EXP 37
6910: PPUSH
6911: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
6915: LD_EXP 37
6919: PPUSH
6920: LD_EXP 47
6924: PPUSH
6925: CALL_OW 172
// end ; Wait ( 10 ) ;
6929: LD_INT 10
6931: PPUSH
6932: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
6936: LD_EXP 37
6940: PPUSH
6941: LD_EXP 47
6945: PPUSH
6946: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
6950: LD_INT 35
6952: PPUSH
6953: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
6957: LD_EXP 37
6961: PPUSH
6962: LD_EXP 47
6966: PPUSH
6967: CALL_OW 296
6971: PUSH
6972: LD_INT 6
6974: LESS
6975: IFFALSE 6950
// ComTurnUnit ( JMM , Lynch ) ;
6977: LD_EXP 37
6981: PPUSH
6982: LD_EXP 47
6986: PPUSH
6987: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
6991: LD_ADDR_VAR 0 1
6995: PUSH
6996: LD_EXP 47
7000: PUSH
7001: LD_EXP 48
7005: PUSH
7006: LD_EXP 49
7010: PUSH
7011: LD_EXP 50
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: FOR_IN
7023: IFFALSE 7041
// ComTurnUnit ( i , JMM ) ;
7025: LD_VAR 0 1
7029: PPUSH
7030: LD_EXP 37
7034: PPUSH
7035: CALL_OW 119
7039: GO 7022
7041: POP
7042: POP
// Wait ( 0 0$0.3 ) ;
7043: LD_INT 10
7045: PPUSH
7046: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7050: LD_EXP 37
7054: PPUSH
7055: LD_STRING D2-JMM-1
7057: PPUSH
7058: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7062: LD_EXP 47
7066: PPUSH
7067: LD_STRING D2-Sol1-1
7069: PPUSH
7070: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7074: LD_EXP 37
7078: PPUSH
7079: LD_STRING D2-JMM-2
7081: PPUSH
7082: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7086: LD_EXP 47
7090: PPUSH
7091: LD_STRING D2-Sol1-2
7093: PPUSH
7094: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7098: LD_EXP 37
7102: PPUSH
7103: LD_STRING D2-JMM-3
7105: PPUSH
7106: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7110: LD_EXP 47
7114: PPUSH
7115: LD_STRING D2-Sol1-3
7117: PPUSH
7118: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7122: LD_ADDR_VAR 0 1
7126: PUSH
7127: LD_INT 22
7129: PUSH
7130: LD_INT 8
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PPUSH
7137: CALL_OW 69
7141: PUSH
7142: FOR_IN
7143: IFFALSE 7159
// SetSide ( i , 1 ) ;
7145: LD_VAR 0 1
7149: PPUSH
7150: LD_INT 1
7152: PPUSH
7153: CALL_OW 235
7157: GO 7142
7159: POP
7160: POP
// Say ( JMM , D2-JMM-4 ) ;
7161: LD_EXP 37
7165: PPUSH
7166: LD_STRING D2-JMM-4
7168: PPUSH
7169: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7173: LD_INT 1
7175: PPUSH
7176: LD_INT 5
7178: PPUSH
7179: CALL_OW 332
// for i = 1 to points do
7183: LD_ADDR_VAR 0 1
7187: PUSH
7188: DOUBLE
7189: LD_INT 1
7191: DEC
7192: ST_TO_ADDR
7193: LD_VAR 0 2
7197: PUSH
7198: FOR_TO
7199: IFFALSE 7374
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7201: LD_VAR 0 2
7205: PUSH
7206: LD_VAR 0 1
7210: ARRAY
7211: PUSH
7212: LD_INT 1
7214: ARRAY
7215: PPUSH
7216: LD_VAR 0 2
7220: PUSH
7221: LD_VAR 0 1
7225: ARRAY
7226: PUSH
7227: LD_INT 2
7229: ARRAY
7230: PPUSH
7231: CALL_OW 84
// if i = 1 then
7235: LD_VAR 0 1
7239: PUSH
7240: LD_INT 1
7242: EQUAL
7243: IFFALSE 7257
// Say ( Lynch , D2-Sol1-4 ) ;
7245: LD_EXP 47
7249: PPUSH
7250: LD_STRING D2-Sol1-4
7252: PPUSH
7253: CALL_OW 88
// if i = 2 then
7257: LD_VAR 0 1
7261: PUSH
7262: LD_INT 2
7264: EQUAL
7265: IFFALSE 7279
// Say ( JMM , D2-JMM-5 ) ;
7267: LD_EXP 37
7271: PPUSH
7272: LD_STRING D2-JMM-5
7274: PPUSH
7275: CALL_OW 88
// if i = 4 then
7279: LD_VAR 0 1
7283: PUSH
7284: LD_INT 4
7286: EQUAL
7287: IFFALSE 7311
// begin RevealFogArea ( 1 , troopsArea ) ;
7289: LD_INT 1
7291: PPUSH
7292: LD_INT 6
7294: PPUSH
7295: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7299: LD_EXP 47
7303: PPUSH
7304: LD_STRING D2-Sol1-5
7306: PPUSH
7307: CALL_OW 88
// end ; if i = 5 then
7311: LD_VAR 0 1
7315: PUSH
7316: LD_INT 5
7318: EQUAL
7319: IFFALSE 7333
// Say ( JMM , D2-JMM-6 ) ;
7321: LD_EXP 37
7325: PPUSH
7326: LD_STRING D2-JMM-6
7328: PPUSH
7329: CALL_OW 88
// if i = 7 then
7333: LD_VAR 0 1
7337: PUSH
7338: LD_INT 7
7340: EQUAL
7341: IFFALSE 7365
// begin RevealFogArea ( 1 , forestArea ) ;
7343: LD_INT 1
7345: PPUSH
7346: LD_INT 7
7348: PPUSH
7349: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7353: LD_EXP 47
7357: PPUSH
7358: LD_STRING D2-Sol1-6
7360: PPUSH
7361: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7365: LD_INT 46
7367: PPUSH
7368: CALL_OW 67
// end ;
7372: GO 7198
7374: POP
7375: POP
// CenterNowOnUnits ( JMM ) ;
7376: LD_EXP 37
7380: PPUSH
7381: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7385: LD_EXP 37
7389: PPUSH
7390: LD_STRING D2-JMM-7
7392: PPUSH
7393: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7397: LD_EXP 47
7401: PPUSH
7402: LD_STRING D2-Sol1-7
7404: PPUSH
7405: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7409: LD_EXP 37
7413: PPUSH
7414: LD_STRING D2-JMM-8
7416: PPUSH
7417: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7421: LD_ADDR_VAR 0 4
7425: PUSH
7426: LD_INT 22
7428: PUSH
7429: LD_INT 1
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: LD_INT 30
7438: PUSH
7439: LD_INT 31
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 69
7454: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7455: LD_EXP 47
7459: PPUSH
7460: LD_VAR 0 4
7464: PUSH
7465: LD_INT 1
7467: ARRAY
7468: PPUSH
7469: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7473: LD_INT 65
7475: PPUSH
7476: LD_INT 101
7478: PPUSH
7479: CALL_OW 428
7483: IFFALSE 7506
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7485: LD_INT 65
7487: PPUSH
7488: LD_INT 101
7490: PPUSH
7491: CALL_OW 428
7495: PPUSH
7496: LD_INT 75
7498: PPUSH
7499: LD_INT 100
7501: PPUSH
7502: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7506: LD_INT 66
7508: PPUSH
7509: LD_INT 103
7511: PPUSH
7512: CALL_OW 428
7516: IFFALSE 7539
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7518: LD_INT 66
7520: PPUSH
7521: LD_INT 103
7523: PPUSH
7524: CALL_OW 428
7528: PPUSH
7529: LD_INT 75
7531: PPUSH
7532: LD_INT 100
7534: PPUSH
7535: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7539: LD_ADDR_VAR 0 5
7543: PUSH
7544: LD_INT 22
7546: PUSH
7547: LD_INT 1
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PUSH
7554: LD_INT 21
7556: PUSH
7557: LD_INT 2
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 91
7566: PUSH
7567: LD_EXP 37
7571: PUSH
7572: LD_INT 7
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: LIST
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL_OW 69
7589: ST_TO_ADDR
// if tmp then
7590: LD_VAR 0 5
7594: IFFALSE 7611
// ComMoveXY ( tmp , 75 , 100 ) ;
7596: LD_VAR 0 5
7600: PPUSH
7601: LD_INT 75
7603: PPUSH
7604: LD_INT 100
7606: PPUSH
7607: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
7611: LD_ADDR_VAR 0 3
7615: PUSH
7616: LD_EXP 4
7620: PPUSH
7621: LD_INT 25
7623: PUSH
7624: LD_INT 1
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PPUSH
7631: CALL_OW 72
7635: PPUSH
7636: LD_EXP 37
7640: PPUSH
7641: CALL_OW 74
7645: ST_TO_ADDR
// if sol then
7646: LD_VAR 0 3
7650: IFFALSE 7710
// if GetDistUnits ( JMM , sol ) < 10 then
7652: LD_EXP 37
7656: PPUSH
7657: LD_VAR 0 3
7661: PPUSH
7662: CALL_OW 296
7666: PUSH
7667: LD_INT 10
7669: LESS
7670: IFFALSE 7710
// begin if IsInUnit ( sol ) then
7672: LD_VAR 0 3
7676: PPUSH
7677: CALL_OW 310
7681: IFFALSE 7692
// ComExitVehicle ( sol ) ;
7683: LD_VAR 0 3
7687: PPUSH
7688: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
7692: LD_VAR 0 3
7696: PPUSH
7697: LD_VAR 0 4
7701: PUSH
7702: LD_INT 2
7704: ARRAY
7705: PPUSH
7706: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
7710: LD_INT 10
7712: PPUSH
7713: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
7717: LD_EXP 37
7721: PPUSH
7722: LD_INT 65
7724: PPUSH
7725: LD_INT 101
7727: PPUSH
7728: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
7732: LD_EXP 37
7736: PPUSH
7737: LD_INT 63
7739: PPUSH
7740: LD_INT 100
7742: PPUSH
7743: CALL_OW 178
// tmp := 0 0$0 ;
7747: LD_ADDR_VAR 0 5
7751: PUSH
7752: LD_INT 0
7754: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7755: LD_INT 35
7757: PPUSH
7758: CALL_OW 67
// tmp := tmp + 0 0$1 ;
7762: LD_ADDR_VAR 0 5
7766: PUSH
7767: LD_VAR 0 5
7771: PUSH
7772: LD_INT 35
7774: PLUS
7775: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
7776: LD_EXP 37
7780: PPUSH
7781: LD_INT 65
7783: PPUSH
7784: LD_INT 101
7786: PPUSH
7787: CALL_OW 307
7791: PUSH
7792: LD_VAR 0 5
7796: PUSH
7797: LD_INT 175
7799: GREATER
7800: OR
7801: IFFALSE 7755
// Say ( JMM , D2a-JMM-1 ) ;
7803: LD_EXP 37
7807: PPUSH
7808: LD_STRING D2a-JMM-1
7810: PPUSH
7811: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
7815: LD_EXP 48
7819: PPUSH
7820: LD_INT 66
7822: PPUSH
7823: LD_INT 103
7825: PPUSH
7826: CALL_OW 111
// tmp := 0 0$0 ;
7830: LD_ADDR_VAR 0 5
7834: PUSH
7835: LD_INT 0
7837: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7838: LD_INT 35
7840: PPUSH
7841: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
7845: LD_EXP 48
7849: PPUSH
7850: LD_INT 66
7852: PPUSH
7853: LD_INT 103
7855: PPUSH
7856: CALL_OW 307
7860: PUSH
7861: LD_VAR 0 5
7865: PUSH
7866: LD_INT 175
7868: GREATER
7869: OR
7870: IFFALSE 7838
// ComTurnUnit ( Walker , JMM ) ;
7872: LD_EXP 48
7876: PPUSH
7877: LD_EXP 37
7881: PPUSH
7882: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
7886: LD_EXP 48
7890: PPUSH
7891: LD_STRING D2a-Sci1-1
7893: PPUSH
7894: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
7898: LD_EXP 37
7902: PPUSH
7903: LD_EXP 48
7907: PPUSH
7908: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
7912: LD_EXP 37
7916: PPUSH
7917: LD_STRING D2a-JMM-2
7919: PPUSH
7920: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
7924: LD_EXP 48
7928: PPUSH
7929: LD_STRING D2a-Sci1-2
7931: PPUSH
7932: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
7936: LD_EXP 37
7940: PPUSH
7941: LD_STRING D2a-JMM-3
7943: PPUSH
7944: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
7948: LD_EXP 48
7952: PPUSH
7953: LD_STRING D2a-Sci1-3
7955: PPUSH
7956: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
7960: LD_ADDR_EXP 4
7964: PUSH
7965: LD_EXP 4
7969: PUSH
7970: LD_EXP 47
7974: PUSH
7975: LD_EXP 48
7979: PUSH
7980: LD_EXP 49
7984: PUSH
7985: LD_EXP 50
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: ADD
7996: ST_TO_ADDR
// for i in jmm_units do
7997: LD_ADDR_VAR 0 1
8001: PUSH
8002: LD_EXP 4
8006: PUSH
8007: FOR_IN
8008: IFFALSE 8033
// if not IsInUnit ( i ) then
8010: LD_VAR 0 1
8014: PPUSH
8015: CALL_OW 310
8019: NOT
8020: IFFALSE 8031
// ComFree ( i ) ;
8022: LD_VAR 0 1
8026: PPUSH
8027: CALL_OW 139
8031: GO 8007
8033: POP
8034: POP
// Video ( false ) ;
8035: LD_INT 0
8037: PPUSH
8038: CALL 1200 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8042: LD_STRING MSolar1
8044: PPUSH
8045: CALL_OW 337
// jmm_on_west := true ;
8049: LD_ADDR_EXP 5
8053: PUSH
8054: LD_INT 1
8056: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8057: LD_INT 1050
8059: PPUSH
8060: CALL_OW 67
// frank_can_return := true ;
8064: LD_ADDR_EXP 12
8068: PUSH
8069: LD_INT 1
8071: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8072: LD_INT 6300
8074: PPUSH
8075: LD_INT 8400
8077: PPUSH
8078: CALL_OW 12
8082: PPUSH
8083: CALL_OW 67
// send_spec_patrol := true ;
8087: LD_ADDR_EXP 30
8091: PUSH
8092: LD_INT 1
8094: ST_TO_ADDR
// end ;
8095: PPOPN 5
8097: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8098: LD_INT 22
8100: PUSH
8101: LD_INT 1
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PUSH
8108: LD_INT 34
8110: PUSH
8111: LD_INT 51
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: PUSH
8118: LD_INT 92
8120: PUSH
8121: LD_INT 63
8123: PUSH
8124: LD_INT 100
8126: PUSH
8127: LD_INT 5
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: PUSH
8141: EMPTY
8142: LIST
8143: PPUSH
8144: CALL_OW 69
8148: PUSH
8149: LD_EXP 5
8153: NOT
8154: AND
8155: IFFALSE 8268
8157: GO 8159
8159: DISABLE
8160: LD_INT 0
8162: PPUSH
8163: PPUSH
// begin enable ;
8164: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8165: LD_ADDR_VAR 0 2
8169: PUSH
8170: LD_INT 22
8172: PUSH
8173: LD_INT 1
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 34
8182: PUSH
8183: LD_INT 51
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 92
8192: PUSH
8193: LD_INT 63
8195: PUSH
8196: LD_INT 100
8198: PUSH
8199: LD_INT 5
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: LIST
8212: PUSH
8213: EMPTY
8214: LIST
8215: PPUSH
8216: CALL_OW 69
8220: ST_TO_ADDR
// if not filter then
8221: LD_VAR 0 2
8225: NOT
8226: IFFALSE 8230
// exit ;
8228: GO 8268
// for i in filter do
8230: LD_ADDR_VAR 0 1
8234: PUSH
8235: LD_VAR 0 2
8239: PUSH
8240: FOR_IN
8241: IFFALSE 8266
// begin SetFuel ( i , 0 ) ;
8243: LD_VAR 0 1
8247: PPUSH
8248: LD_INT 0
8250: PPUSH
8251: CALL_OW 240
// ComStop ( i ) ;
8255: LD_VAR 0 1
8259: PPUSH
8260: CALL_OW 141
// end ;
8264: GO 8240
8266: POP
8267: POP
// end ;
8268: PPOPN 2
8270: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8271: LD_EXP 30
8275: IFFALSE 9372
8277: GO 8279
8279: DISABLE
8280: LD_INT 0
8282: PPUSH
8283: PPUSH
8284: PPUSH
8285: PPUSH
8286: PPUSH
8287: PPUSH
8288: PPUSH
// begin if not ru_spec_patrol then
8289: LD_EXP 54
8293: NOT
8294: IFFALSE 8298
// exit ;
8296: GO 9372
// dead1 := false ;
8298: LD_ADDR_VAR 0 1
8302: PUSH
8303: LD_INT 0
8305: ST_TO_ADDR
// dead2 := false ;
8306: LD_ADDR_VAR 0 2
8310: PUSH
8311: LD_INT 0
8313: ST_TO_ADDR
// inarea1 := false ;
8314: LD_ADDR_VAR 0 3
8318: PUSH
8319: LD_INT 0
8321: ST_TO_ADDR
// inarea2 := false ;
8322: LD_ADDR_VAR 0 4
8326: PUSH
8327: LD_INT 0
8329: ST_TO_ADDR
// tmp := [ ] ;
8330: LD_ADDR_VAR 0 6
8334: PUSH
8335: EMPTY
8336: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8337: LD_EXP 54
8341: PPUSH
8342: LD_INT 75
8344: PPUSH
8345: LD_INT 101
8347: PPUSH
8348: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8352: LD_INT 35
8354: PPUSH
8355: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) ;
8359: LD_INT 1
8361: PPUSH
8362: LD_EXP 54
8366: PUSH
8367: LD_INT 1
8369: ARRAY
8370: PPUSH
8371: CALL_OW 292
8375: IFFALSE 8352
// ComStop ( ru_spec_patrol ) ;
8377: LD_EXP 54
8381: PPUSH
8382: CALL_OW 141
// Wait ( 0 0$02 ) ;
8386: LD_INT 70
8388: PPUSH
8389: CALL_OW 67
// DialogueOn ;
8393: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8397: LD_EXP 54
8401: PUSH
8402: LD_INT 1
8404: ARRAY
8405: PPUSH
8406: LD_STRING D8-Rus1-1
8408: PPUSH
8409: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8413: LD_EXP 37
8417: PPUSH
8418: LD_STRING D8-JMM-1
8420: PPUSH
8421: CALL_OW 88
// DialogueOff ;
8425: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8429: LD_EXP 54
8433: PPUSH
8434: LD_INT 13
8436: PPUSH
8437: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8441: LD_INT 35
8443: PPUSH
8444: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8448: LD_VAR 0 1
8452: NOT
8453: PUSH
8454: LD_EXP 54
8458: PUSH
8459: LD_INT 1
8461: ARRAY
8462: PPUSH
8463: CALL_OW 301
8467: AND
8468: IFFALSE 8478
// dead1 := true ;
8470: LD_ADDR_VAR 0 1
8474: PUSH
8475: LD_INT 1
8477: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8478: LD_VAR 0 2
8482: NOT
8483: PUSH
8484: LD_EXP 54
8488: PUSH
8489: LD_INT 2
8491: ARRAY
8492: PPUSH
8493: CALL_OW 301
8497: AND
8498: IFFALSE 8508
// dead2 := true ;
8500: LD_ADDR_VAR 0 2
8504: PUSH
8505: LD_INT 1
8507: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8508: LD_VAR 0 3
8512: NOT
8513: PUSH
8514: LD_EXP 54
8518: PUSH
8519: LD_INT 1
8521: ARRAY
8522: PPUSH
8523: LD_INT 14
8525: PPUSH
8526: CALL_OW 308
8530: AND
8531: IFFALSE 8541
// inarea1 := true ;
8533: LD_ADDR_VAR 0 3
8537: PUSH
8538: LD_INT 1
8540: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
8541: LD_VAR 0 4
8545: NOT
8546: PUSH
8547: LD_EXP 54
8551: PUSH
8552: LD_INT 2
8554: ARRAY
8555: PPUSH
8556: LD_INT 14
8558: PPUSH
8559: CALL_OW 308
8563: AND
8564: IFFALSE 8574
// inarea2 := true ;
8566: LD_ADDR_VAR 0 4
8570: PUSH
8571: LD_INT 1
8573: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
8574: LD_VAR 0 1
8578: PUSH
8579: LD_VAR 0 2
8583: AND
8584: PUSH
8585: LD_VAR 0 1
8589: PUSH
8590: LD_VAR 0 4
8594: AND
8595: OR
8596: PUSH
8597: LD_VAR 0 2
8601: PUSH
8602: LD_VAR 0 3
8606: AND
8607: OR
8608: PUSH
8609: LD_VAR 0 3
8613: PUSH
8614: LD_VAR 0 4
8618: AND
8619: OR
8620: IFFALSE 8441
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
8622: LD_VAR 0 3
8626: PUSH
8627: LD_VAR 0 4
8631: AND
8632: PUSH
8633: LD_VAR 0 1
8637: PUSH
8638: LD_VAR 0 4
8642: AND
8643: OR
8644: PUSH
8645: LD_VAR 0 2
8649: PUSH
8650: LD_VAR 0 3
8654: AND
8655: OR
8656: IFFALSE 9352
// begin prepare_siege := true ;
8658: LD_ADDR_EXP 31
8662: PUSH
8663: LD_INT 1
8665: ST_TO_ADDR
// DialogueOn ;
8666: CALL_OW 6
// if ( inarea1 and inarea2 ) then
8670: LD_VAR 0 3
8674: PUSH
8675: LD_VAR 0 4
8679: AND
8680: IFFALSE 8696
// Say ( JMM , D8b-JMM-1a ) else
8682: LD_EXP 37
8686: PPUSH
8687: LD_STRING D8b-JMM-1a
8689: PPUSH
8690: CALL_OW 88
8694: GO 8708
// Say ( JMM , D8b-JMM-1 ) ;
8696: LD_EXP 37
8700: PPUSH
8701: LD_STRING D8b-JMM-1
8703: PPUSH
8704: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
8708: LD_EXP 4
8712: PPUSH
8713: LD_INT 26
8715: PUSH
8716: LD_INT 1
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PPUSH
8723: CALL_OW 72
8727: PUSH
8728: LD_EXP 38
8732: PUSH
8733: LD_EXP 39
8737: PUSH
8738: LD_EXP 48
8742: PUSH
8743: LD_EXP 51
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: DIFF
8754: PPUSH
8755: LD_STRING D8b-Sol1-1
8757: PPUSH
8758: CALL 640 0 2
// if Cyrus and Cyrus in jmm_units then
8762: LD_EXP 39
8766: PUSH
8767: LD_EXP 39
8771: PUSH
8772: LD_EXP 4
8776: IN
8777: AND
8778: IFFALSE 8794
// Say ( Cyrus , D8b-Cyrus-1 ) else
8780: LD_EXP 39
8784: PPUSH
8785: LD_STRING D8b-Cyrus-1
8787: PPUSH
8788: CALL_OW 88
8792: GO 8806
// Say ( JMM , D8b-JMM-1a ) ;
8794: LD_EXP 37
8798: PPUSH
8799: LD_STRING D8b-JMM-1a
8801: PPUSH
8802: CALL_OW 88
// if Lisa and Lisa in jmm_units then
8806: LD_EXP 40
8810: PUSH
8811: LD_EXP 40
8815: PUSH
8816: LD_EXP 4
8820: IN
8821: AND
8822: IFFALSE 8836
// Say ( Lisa , D8b-Lisa-2 ) ;
8824: LD_EXP 40
8828: PPUSH
8829: LD_STRING D8b-Lisa-2
8831: PPUSH
8832: CALL_OW 88
// if Bobby and Bobby in jmm_units then
8836: LD_EXP 38
8840: PUSH
8841: LD_EXP 38
8845: PUSH
8846: LD_EXP 4
8850: IN
8851: AND
8852: IFFALSE 8868
// Say ( Bobby , D8b-Bobby-1 ) else
8854: LD_EXP 38
8858: PPUSH
8859: LD_STRING D8b-Bobby-1
8861: PPUSH
8862: CALL_OW 88
8866: GO 8928
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
8868: LD_ADDR_VAR 0 5
8872: PUSH
8873: LD_EXP 4
8877: PPUSH
8878: LD_INT 26
8880: PUSH
8881: LD_INT 1
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: PPUSH
8888: CALL_OW 72
8892: PUSH
8893: LD_EXP 38
8897: PUSH
8898: LD_EXP 39
8902: PUSH
8903: LD_EXP 48
8907: PUSH
8908: LD_EXP 51
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: DIFF
8919: PPUSH
8920: LD_STRING D8b-Sol2-1
8922: PPUSH
8923: CALL 640 0 2
8927: ST_TO_ADDR
// DialogueOff ;
8928: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
8932: LD_EXP 39
8936: PUSH
8937: LD_EXP 39
8941: PUSH
8942: LD_EXP 4
8946: IN
8947: AND
8948: IFFALSE 8973
// tmp := Insert ( tmp , 1 , Cyrus ) ;
8950: LD_ADDR_VAR 0 6
8954: PUSH
8955: LD_VAR 0 6
8959: PPUSH
8960: LD_INT 1
8962: PPUSH
8963: LD_EXP 39
8967: PPUSH
8968: CALL_OW 2
8972: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
8973: LD_EXP 38
8977: PUSH
8978: LD_EXP 38
8982: PUSH
8983: LD_EXP 4
8987: IN
8988: AND
8989: IFFALSE 9014
// tmp := Insert ( tmp , 1 , Bobby ) ;
8991: LD_ADDR_VAR 0 6
8995: PUSH
8996: LD_VAR 0 6
9000: PPUSH
9001: LD_INT 1
9003: PPUSH
9004: LD_EXP 38
9008: PPUSH
9009: CALL_OW 2
9013: ST_TO_ADDR
// if sol then
9014: LD_VAR 0 5
9018: IFFALSE 9043
// tmp := Insert ( tmp , 1 , sol ) ;
9020: LD_ADDR_VAR 0 6
9024: PUSH
9025: LD_VAR 0 6
9029: PPUSH
9030: LD_INT 1
9032: PPUSH
9033: LD_VAR 0 5
9037: PPUSH
9038: CALL_OW 2
9042: ST_TO_ADDR
// if tmp then
9043: LD_VAR 0 6
9047: IFFALSE 9311
// begin SetSide ( tmp , 8 ) ;
9049: LD_VAR 0 6
9053: PPUSH
9054: LD_INT 8
9056: PPUSH
9057: CALL_OW 235
// for i in tmp do
9061: LD_ADDR_VAR 0 7
9065: PUSH
9066: LD_VAR 0 6
9070: PUSH
9071: FOR_IN
9072: IFFALSE 9163
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9074: LD_VAR 0 7
9078: PPUSH
9079: CALL_OW 310
9083: PUSH
9084: LD_VAR 0 7
9088: PPUSH
9089: CALL_OW 310
9093: PPUSH
9094: CALL_OW 266
9098: PUSH
9099: LD_INT 3
9101: EQUAL
9102: AND
9103: IFFALSE 9114
// ComExitBuilding ( i ) ;
9105: LD_VAR 0 7
9109: PPUSH
9110: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9114: LD_VAR 0 7
9118: PPUSH
9119: CALL_OW 310
9123: PUSH
9124: LD_VAR 0 7
9128: PPUSH
9129: CALL_OW 310
9133: PPUSH
9134: CALL_OW 266
9138: PUSH
9139: LD_INT 2
9141: EQUAL
9142: AND
9143: IFFALSE 9154
// ComExitVehicle ( i ) ;
9145: LD_VAR 0 7
9149: PPUSH
9150: CALL_OW 121
// wait ( 0 0$1 ) ;
9154: LD_INT 35
9156: PPUSH
9157: CALL_OW 67
// end ;
9161: GO 9071
9163: POP
9164: POP
// ComFree ( tmp ) ;
9165: LD_VAR 0 6
9169: PPUSH
9170: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9174: LD_VAR 0 6
9178: PPUSH
9179: LD_INT 15
9181: PPUSH
9182: CALL_OW 173
// AddComHold ( tmp ) ;
9186: LD_VAR 0 6
9190: PPUSH
9191: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9195: LD_INT 35
9197: PPUSH
9198: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9202: LD_VAR 0 6
9206: PUSH
9207: LD_INT 1
9209: ARRAY
9210: PPUSH
9211: CALL_OW 314
9215: NOT
9216: IFFALSE 9230
// ComMoveToArea ( tmp , cyrusEscape ) ;
9218: LD_VAR 0 6
9222: PPUSH
9223: LD_INT 15
9225: PPUSH
9226: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9230: LD_VAR 0 6
9234: PUSH
9235: LD_INT 1
9237: ARRAY
9238: PPUSH
9239: LD_INT 15
9241: PPUSH
9242: CALL_OW 308
9246: IFFALSE 9301
// begin RemoveUnit ( tmp [ 1 ] ) ;
9248: LD_VAR 0 6
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: PPUSH
9257: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9261: LD_ADDR_EXP 4
9265: PUSH
9266: LD_EXP 4
9270: PUSH
9271: LD_VAR 0 6
9275: PUSH
9276: LD_INT 1
9278: ARRAY
9279: DIFF
9280: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9281: LD_ADDR_VAR 0 6
9285: PUSH
9286: LD_VAR 0 6
9290: PUSH
9291: LD_VAR 0 6
9295: PUSH
9296: LD_INT 1
9298: ARRAY
9299: DIFF
9300: ST_TO_ADDR
// end ; until tmp = 0 ;
9301: LD_VAR 0 6
9305: PUSH
9306: LD_INT 0
9308: EQUAL
9309: IFFALSE 9195
// end ; wait ( 0 0$30 ) ;
9311: LD_INT 1050
9313: PPUSH
9314: CALL_OW 67
// if ru_spec_patrol then
9318: LD_EXP 54
9322: IFFALSE 9350
// for i in ru_spec_patrol do
9324: LD_ADDR_VAR 0 7
9328: PUSH
9329: LD_EXP 54
9333: PUSH
9334: FOR_IN
9335: IFFALSE 9348
// RemoveUnit ( i ) ;
9337: LD_VAR 0 7
9341: PPUSH
9342: CALL_OW 64
9346: GO 9334
9348: POP
9349: POP
// end else
9350: GO 9372
// begin prepare_siege := false ;
9352: LD_ADDR_EXP 31
9356: PUSH
9357: LD_INT 0
9359: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9360: LD_EXP 37
9364: PPUSH
9365: LD_STRING D8a-JMM-1
9367: PPUSH
9368: CALL_OW 88
// end ; end ;
9372: PPOPN 7
9374: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9375: LD_EXP 12
9379: IFFALSE 10596
9381: GO 9383
9383: DISABLE
9384: LD_INT 0
9386: PPUSH
9387: PPUSH
9388: PPUSH
// begin uc_side := 8 ;
9389: LD_ADDR_OWVAR 20
9393: PUSH
9394: LD_INT 8
9396: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9397: LD_ADDR_VAR 0 3
9401: PUSH
9402: LD_INT 59
9404: PUSH
9405: LD_INT 71
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 122
9414: PUSH
9415: LD_INT 117
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ) ;
9426: LD_ADDR_EXP 51
9430: PUSH
9431: LD_STRING Frank
9433: PPUSH
9434: LD_INT 0
9436: PPUSH
9437: CALL 489 0 2
9441: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9442: LD_ADDR_VAR 0 1
9446: PUSH
9447: LD_INT 1
9449: PPUSH
9450: LD_INT 2
9452: PPUSH
9453: CALL_OW 12
9457: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9458: LD_EXP 51
9462: PPUSH
9463: LD_VAR 0 3
9467: PUSH
9468: LD_VAR 0 1
9472: ARRAY
9473: PUSH
9474: LD_INT 1
9476: ARRAY
9477: PPUSH
9478: LD_VAR 0 3
9482: PUSH
9483: LD_VAR 0 1
9487: ARRAY
9488: PUSH
9489: LD_INT 2
9491: ARRAY
9492: PPUSH
9493: LD_INT 0
9495: PPUSH
9496: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9500: LD_EXP 51
9504: PPUSH
9505: LD_INT 1
9507: PPUSH
9508: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9512: LD_INT 35
9514: PPUSH
9515: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9519: LD_EXP 51
9523: PPUSH
9524: LD_EXP 37
9528: PPUSH
9529: CALL_OW 296
9533: PUSH
9534: LD_INT 8
9536: LESS
9537: PUSH
9538: LD_EXP 51
9542: PPUSH
9543: CALL_OW 256
9547: PUSH
9548: LD_INT 250
9550: GREATER
9551: AND
9552: IFFALSE 9512
// Video ( true ) ;
9554: LD_INT 1
9556: PPUSH
9557: CALL 1200 0 1
// CenterOnUnits ( JMM ) ;
9561: LD_EXP 37
9565: PPUSH
9566: CALL_OW 85
// if IsInUnit ( JMM ) then
9570: LD_EXP 37
9574: PPUSH
9575: CALL_OW 310
9579: IFFALSE 9590
// ComFree ( JMM ) ;
9581: LD_EXP 37
9585: PPUSH
9586: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
9590: LD_EXP 37
9594: PPUSH
9595: LD_EXP 51
9599: PPUSH
9600: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
9604: LD_EXP 51
9608: PPUSH
9609: LD_EXP 37
9613: PPUSH
9614: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
9618: LD_EXP 37
9622: PPUSH
9623: LD_STRING D6-JMM-1
9625: PPUSH
9626: CALL_OW 88
// p := 0 ;
9630: LD_ADDR_VAR 0 2
9634: PUSH
9635: LD_INT 0
9637: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9638: LD_INT 35
9640: PPUSH
9641: CALL_OW 67
// p := p + 1 ;
9645: LD_ADDR_VAR 0 2
9649: PUSH
9650: LD_VAR 0 2
9654: PUSH
9655: LD_INT 1
9657: PLUS
9658: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
9659: LD_EXP 37
9663: PPUSH
9664: LD_EXP 51
9668: PPUSH
9669: CALL_OW 296
9673: PUSH
9674: LD_INT 8
9676: LESS
9677: PUSH
9678: LD_VAR 0 2
9682: PUSH
9683: LD_INT 7
9685: GREATER
9686: OR
9687: IFFALSE 9638
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 then
9689: LD_EXP 40
9693: PUSH
9694: LD_EXP 40
9698: PPUSH
9699: LD_EXP 51
9703: PPUSH
9704: CALL_OW 296
9708: PUSH
9709: LD_INT 20
9711: LESS
9712: AND
9713: IFFALSE 9738
// begin ComFree ( Lisa ) ;
9715: LD_EXP 40
9719: PPUSH
9720: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
9724: LD_EXP 40
9728: PPUSH
9729: LD_EXP 51
9733: PPUSH
9734: CALL_OW 172
// end ; if Lynch then
9738: LD_EXP 47
9742: IFFALSE 9767
// begin ComFree ( Lynch ) ;
9744: LD_EXP 47
9748: PPUSH
9749: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
9753: LD_EXP 47
9757: PPUSH
9758: LD_EXP 51
9762: PPUSH
9763: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
9767: LD_EXP 37
9771: PPUSH
9772: LD_EXP 51
9776: PPUSH
9777: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
9781: LD_EXP 51
9785: PPUSH
9786: LD_EXP 37
9790: PPUSH
9791: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
9795: LD_EXP 51
9799: PPUSH
9800: LD_STRING D6-Frank-1
9802: PPUSH
9803: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
9807: LD_INT 69
9809: PPUSH
9810: LD_INT 20
9812: PPUSH
9813: LD_INT 1
9815: PPUSH
9816: LD_INT 20
9818: NEG
9819: PPUSH
9820: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
9824: LD_INT 69
9826: PPUSH
9827: LD_INT 20
9829: PPUSH
9830: LD_INT 1
9832: PPUSH
9833: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
9837: LD_INT 190
9839: PPUSH
9840: LD_INT 31
9842: PPUSH
9843: LD_INT 1
9845: PPUSH
9846: LD_INT 20
9848: NEG
9849: PPUSH
9850: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
9854: LD_INT 190
9856: PPUSH
9857: LD_INT 31
9859: PPUSH
9860: LD_INT 1
9862: PPUSH
9863: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
9867: LD_INT 69
9869: PPUSH
9870: LD_INT 20
9872: PPUSH
9873: CALL_OW 84
// Wait ( 0 0$02 ) ;
9877: LD_INT 70
9879: PPUSH
9880: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
9884: LD_EXP 37
9888: PPUSH
9889: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) then
9893: LD_EXP 40
9897: PUSH
9898: LD_EXP 40
9902: PPUSH
9903: LD_EXP 51
9907: PPUSH
9908: CALL_OW 296
9912: PUSH
9913: LD_INT 20
9915: LESS
9916: AND
9917: PUSH
9918: LD_EXP 40
9922: PPUSH
9923: CALL_OW 302
9927: AND
9928: IFFALSE 10050
// begin ComFree ( Lisa ) ;
9930: LD_EXP 40
9934: PPUSH
9935: CALL_OW 139
// p := 0 ;
9939: LD_ADDR_VAR 0 2
9943: PUSH
9944: LD_INT 0
9946: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9947: LD_INT 35
9949: PPUSH
9950: CALL_OW 67
// p := p + 1 ;
9954: LD_ADDR_VAR 0 2
9958: PUSH
9959: LD_VAR 0 2
9963: PUSH
9964: LD_INT 1
9966: PLUS
9967: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
9968: LD_EXP 40
9972: PPUSH
9973: LD_EXP 51
9977: PPUSH
9978: CALL_OW 296
9982: PUSH
9983: LD_INT 7
9985: LESS
9986: PUSH
9987: LD_VAR 0 2
9991: PUSH
9992: LD_INT 7
9994: GREATER
9995: OR
9996: IFFALSE 9947
// Say ( Lisa , D6-Lisa-1 ) ;
9998: LD_EXP 40
10002: PPUSH
10003: LD_STRING D6-Lisa-1
10005: PPUSH
10006: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10010: LD_EXP 40
10014: PPUSH
10015: LD_EXP 51
10019: PPUSH
10020: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10024: LD_EXP 51
10028: PPUSH
10029: LD_EXP 40
10033: PPUSH
10034: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10038: LD_EXP 51
10042: PPUSH
10043: LD_STRING D6-Frank-2
10045: PPUSH
10046: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10050: LD_EXP 47
10054: PUSH
10055: LD_EXP 47
10059: PPUSH
10060: LD_EXP 51
10064: PPUSH
10065: CALL_OW 296
10069: PUSH
10070: LD_INT 20
10072: LESS
10073: AND
10074: PUSH
10075: LD_EXP 47
10079: PPUSH
10080: CALL_OW 302
10084: AND
10085: IFFALSE 10266
// begin ComTurnUnit ( Lynch , JMM ) ;
10087: LD_EXP 47
10091: PPUSH
10092: LD_EXP 37
10096: PPUSH
10097: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10101: LD_EXP 51
10105: PPUSH
10106: LD_EXP 37
10110: PPUSH
10111: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10115: LD_EXP 47
10119: PPUSH
10120: LD_STRING D6-Sol1-2
10122: PPUSH
10123: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10127: LD_EXP 37
10131: PPUSH
10132: LD_STRING D6-JMM-2
10134: PPUSH
10135: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10139: LD_EXP 51
10143: PPUSH
10144: LD_STRING D6-Frank-3
10146: PPUSH
10147: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10151: LD_EXP 37
10155: PPUSH
10156: LD_STRING D6-JMM-3
10158: PPUSH
10159: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10163: LD_EXP 51
10167: PPUSH
10168: LD_STRING D6-Frank-4
10170: PPUSH
10171: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10175: LD_EXP 51
10179: PPUSH
10180: LD_STRING D6-Frank-4a
10182: PPUSH
10183: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10187: LD_EXP 37
10191: PPUSH
10192: LD_STRING D6-JMM-4
10194: PPUSH
10195: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10199: LD_EXP 51
10203: PPUSH
10204: LD_STRING D6-Frank-5
10206: PPUSH
10207: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10211: LD_EXP 40
10215: PUSH
10216: LD_EXP 40
10220: PPUSH
10221: CALL_OW 302
10225: AND
10226: IFFALSE 10240
// Say ( Lisa , D6-Lisa-5 ) ;
10228: LD_EXP 40
10232: PPUSH
10233: LD_STRING D6-Lisa-5
10235: PPUSH
10236: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10240: LD_EXP 51
10244: PPUSH
10245: LD_STRING D6-Frank-6
10247: PPUSH
10248: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10252: LD_EXP 37
10256: PPUSH
10257: LD_STRING D6-JMM-6
10259: PPUSH
10260: CALL_OW 88
// end else
10264: GO 10381
// begin ComTurnUnit ( Frank , JMM ) ;
10266: LD_EXP 51
10270: PPUSH
10271: LD_EXP 37
10275: PPUSH
10276: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10280: LD_EXP 51
10284: PPUSH
10285: LD_STRING D6-Frank-4
10287: PPUSH
10288: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10292: LD_EXP 51
10296: PPUSH
10297: LD_STRING D6-Frank-4a
10299: PPUSH
10300: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10304: LD_EXP 37
10308: PPUSH
10309: LD_STRING D6-JMM-4
10311: PPUSH
10312: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10316: LD_EXP 51
10320: PPUSH
10321: LD_STRING D6-Frank-5
10323: PPUSH
10324: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10328: LD_EXP 40
10332: PUSH
10333: LD_EXP 40
10337: PPUSH
10338: CALL_OW 302
10342: AND
10343: IFFALSE 10357
// Say ( Lisa , D6-Lisa-5 ) ;
10345: LD_EXP 40
10349: PPUSH
10350: LD_STRING D6-Lisa-5
10352: PPUSH
10353: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10357: LD_EXP 51
10361: PPUSH
10362: LD_STRING D6-Frank-6
10364: PPUSH
10365: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10369: LD_EXP 37
10373: PPUSH
10374: LD_STRING D6-JMM-6
10376: PPUSH
10377: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10381: LD_STRING Q1
10383: PPUSH
10384: CALL_OW 97
10388: PUSH
10389: LD_INT 1
10391: DOUBLE
10392: EQUAL
10393: IFTRUE 10397
10395: GO 10408
10397: POP
// frank_send_to_scout := true ; 2 :
10398: LD_ADDR_EXP 15
10402: PUSH
10403: LD_INT 1
10405: ST_TO_ADDR
10406: GO 10428
10408: LD_INT 2
10410: DOUBLE
10411: EQUAL
10412: IFTRUE 10416
10414: GO 10427
10416: POP
// frank_send_to_scout := false ; end ;
10417: LD_ADDR_EXP 15
10421: PUSH
10422: LD_INT 0
10424: ST_TO_ADDR
10425: GO 10428
10427: POP
// Video ( false ) ;
10428: LD_INT 0
10430: PPUSH
10431: CALL 1200 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10435: LD_EXP 37
10439: PUSH
10440: LD_EXP 40
10444: PUSH
10445: LD_EXP 47
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: LIST
10454: PPUSH
10455: CALL_OW 139
// if frank_send_to_scout then
10459: LD_EXP 15
10463: IFFALSE 10517
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10465: LD_EXP 51
10469: PPUSH
10470: LD_INT 15
10472: PPUSH
10473: CALL_OW 113
// wait ( 0 0$01 ) ;
10477: LD_INT 35
10479: PPUSH
10480: CALL_OW 67
// until not See ( 1 , Frank ) ;
10484: LD_INT 1
10486: PPUSH
10487: LD_EXP 51
10491: PPUSH
10492: CALL_OW 292
10496: NOT
10497: IFFALSE 10465
// wait ( 0 0$02 ) ;
10499: LD_INT 70
10501: PPUSH
10502: CALL_OW 67
// RemoveUnit ( Frank ) ;
10506: LD_EXP 51
10510: PPUSH
10511: CALL_OW 64
// end else
10515: GO 10529
// SetSide ( Frank , 1 ) ;
10517: LD_EXP 51
10521: PPUSH
10522: LD_INT 1
10524: PPUSH
10525: CALL_OW 235
// send_attack_on_cornel_base := true ;
10529: LD_ADDR_EXP 26
10533: PUSH
10534: LD_INT 1
10536: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10537: LD_INT 35
10539: PPUSH
10540: CALL_OW 67
// time_to_prepare := Count ( time_to_prepare , - ) ;
10544: LD_ADDR_EXP 29
10548: PUSH
10549: LD_EXP 29
10553: PPUSH
10554: LD_STRING -
10556: PPUSH
10557: CALL 1132 0 2
10561: ST_TO_ADDR
// if debug then
10562: LD_EXP 1
10566: IFFALSE 10578
// debug_strings := time_to_prepare ;
10568: LD_ADDR_OWVAR 48
10572: PUSH
10573: LD_EXP 29
10577: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
10578: LD_EXP 29
10582: PUSH
10583: LD_INT 0
10585: EQUAL
10586: IFFALSE 10537
// cornel_prepared := true ;
10588: LD_ADDR_EXP 11
10592: PUSH
10593: LD_INT 1
10595: ST_TO_ADDR
// end ;
10596: PPOPN 3
10598: END
// every 0 0$01 trigger cornel_prepared do
10599: LD_EXP 11
10603: IFFALSE 10908
10605: GO 10607
10607: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
10608: LD_EXP 44
10612: PPUSH
10613: LD_STRING D3-Corn-1
10615: PPUSH
10616: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
10620: LD_STRING MOutWait
10622: PPUSH
10623: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
10627: LD_INT 35
10629: PPUSH
10630: CALL_OW 67
// until cornel_counter = 0 ;
10634: LD_EXP 10
10638: PUSH
10639: LD_INT 0
10641: EQUAL
10642: IFFALSE 10627
// SayRadio ( Cornel , D3a-Corn-1 ) ;
10644: LD_EXP 44
10648: PPUSH
10649: LD_STRING D3a-Corn-1
10651: PPUSH
10652: CALL_OW 94
// if IsOk ( Cornel ) then
10656: LD_EXP 44
10660: PPUSH
10661: CALL_OW 302
10665: IFFALSE 10679
// Say ( JMM , D3a-JMM-1 ) ;
10667: LD_EXP 37
10671: PPUSH
10672: LD_STRING D3a-JMM-1
10674: PPUSH
10675: CALL_OW 88
// end_mission_allowed := true ;
10679: LD_ADDR_EXP 21
10683: PUSH
10684: LD_INT 1
10686: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
10687: LD_STRING M2
10689: PPUSH
10690: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
10694: LD_INT 9
10696: PPUSH
10697: LD_INT 1
10699: PPUSH
10700: CALL_OW 424
// Wait ( 0 0$05 ) ;
10704: LD_INT 175
10706: PPUSH
10707: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
10711: LD_EXP 44
10715: PPUSH
10716: LD_STRING D3a-Corn-2
10718: PPUSH
10719: CALL_OW 94
// cornel_attack := true ;
10723: LD_ADDR_EXP 9
10727: PUSH
10728: LD_INT 1
10730: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
10731: LD_INT 105
10733: PPUSH
10734: CALL_OW 67
// AddMoreTanks ( ) ;
10738: CALL 4952 0 0
// if frank_send_to_scout then
10742: LD_EXP 15
10746: IFFALSE 10908
// begin InitHc ;
10748: CALL_OW 19
// InitUc ;
10752: CALL_OW 18
// uc_side := 8 ;
10756: LD_ADDR_OWVAR 20
10760: PUSH
10761: LD_INT 8
10763: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ) ;
10764: LD_ADDR_EXP 51
10768: PUSH
10769: LD_STRING Frank
10771: PPUSH
10772: LD_INT 0
10774: PPUSH
10775: CALL 489 0 2
10779: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
10780: LD_EXP 51
10784: PPUSH
10785: LD_INT 6
10787: PPUSH
10788: LD_INT 9
10790: PPUSH
10791: LD_INT 0
10793: PPUSH
10794: CALL_OW 48
// ComCrawl ( Frank ) ;
10798: LD_EXP 51
10802: PPUSH
10803: CALL_OW 137
// repeat wait ( 10 ) ;
10807: LD_INT 10
10809: PPUSH
10810: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
10814: LD_EXP 37
10818: PPUSH
10819: LD_EXP 51
10823: PPUSH
10824: CALL_OW 296
10828: PUSH
10829: LD_INT 9
10831: LESS
10832: PUSH
10833: LD_INT 9
10835: PPUSH
10836: LD_INT 22
10838: PUSH
10839: LD_INT 1
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PPUSH
10846: CALL_OW 70
10850: OR
10851: IFFALSE 10807
// if IsDead ( Frank ) then
10853: LD_EXP 51
10857: PPUSH
10858: CALL_OW 301
10862: IFFALSE 10866
// exit ;
10864: GO 10908
// CenterOnUnits ( Frank ) ;
10866: LD_EXP 51
10870: PPUSH
10871: CALL_OW 85
// SetSide ( Frank , 1 ) ;
10875: LD_EXP 51
10879: PPUSH
10880: LD_INT 1
10882: PPUSH
10883: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
10887: LD_EXP 51
10891: PPUSH
10892: LD_STRING D6a-Frank-1
10894: PPUSH
10895: CALL_OW 88
// ComWalk ( Frank ) ;
10899: LD_EXP 51
10903: PPUSH
10904: CALL_OW 138
// end ; end ;
10908: END
// every 0 0$01 trigger solar_builded do
10909: LD_EXP 14
10913: IFFALSE 11017
10915: GO 10917
10917: DISABLE
// begin Wait ( 0 0$02 ) ;
10918: LD_INT 70
10920: PPUSH
10921: CALL_OW 67
// DialogueOn ;
10925: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
10929: LD_EXP 37
10933: PPUSH
10934: LD_STRING D2b-JMM-1
10936: PPUSH
10937: CALL_OW 88
// if Walker and IsOk ( Walker ) then
10941: LD_EXP 48
10945: PUSH
10946: LD_EXP 48
10950: PPUSH
10951: CALL_OW 302
10955: AND
10956: IFFALSE 11006
// begin Say ( Walker , D2b-Sci1-1 ) ;
10958: LD_EXP 48
10962: PPUSH
10963: LD_STRING D2b-Sci1-1
10965: PPUSH
10966: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
10970: LD_EXP 37
10974: PPUSH
10975: LD_STRING D2b-JMM-2
10977: PPUSH
10978: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
10982: LD_EXP 48
10986: PPUSH
10987: LD_STRING D2b-Sci1-2
10989: PPUSH
10990: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
10994: LD_EXP 37
10998: PPUSH
10999: LD_STRING D2b-JMM-3
11001: PPUSH
11002: CALL_OW 88
// end ; DialogueOff ;
11006: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11010: LD_STRING MOutSol
11012: PPUSH
11013: CALL_OW 337
// end ;
11017: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11018: LD_EXP 14
11022: PUSH
11023: LD_EXP 37
11027: PPUSH
11028: CALL_OW 302
11032: AND
11033: PUSH
11034: LD_EXP 37
11038: PPUSH
11039: CALL 966 0 1
11043: AND
11044: PUSH
11045: LD_EXP 16
11049: NOT
11050: AND
11051: IFFALSE 11122
11053: GO 11055
11055: DISABLE
11056: LD_INT 0
11058: PPUSH
// begin jmm_in_veh := true ;
11059: LD_ADDR_EXP 16
11063: PUSH
11064: LD_INT 1
11066: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11067: LD_ADDR_VAR 0 1
11071: PUSH
11072: LD_INT 0
11074: PPUSH
11075: LD_INT 1
11077: PPUSH
11078: CALL_OW 12
11082: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11083: LD_INT 70
11085: PPUSH
11086: CALL_OW 67
// if i then
11090: LD_VAR 0 1
11094: IFFALSE 11110
// Say ( JMM , D2c-JMM-1 ) else
11096: LD_EXP 37
11100: PPUSH
11101: LD_STRING D2c-JMM-1
11103: PPUSH
11104: CALL_OW 88
11108: GO 11122
// Say ( JMM , D2c-JMM-1a ) ;
11110: LD_EXP 37
11114: PPUSH
11115: LD_STRING D2c-JMM-1a
11117: PPUSH
11118: CALL_OW 88
// end ;
11122: PPOPN 1
11124: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11125: LD_EXP 14
11129: PUSH
11130: LD_EXP 38
11134: PPUSH
11135: CALL_OW 302
11139: AND
11140: PUSH
11141: LD_EXP 38
11145: PPUSH
11146: CALL 966 0 1
11150: AND
11151: PUSH
11152: LD_EXP 17
11156: NOT
11157: AND
11158: IFFALSE 11190
11160: GO 11162
11162: DISABLE
// begin bobby_in_veh := true ;
11163: LD_ADDR_EXP 17
11167: PUSH
11168: LD_INT 1
11170: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11171: LD_INT 70
11173: PPUSH
11174: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11178: LD_EXP 38
11182: PPUSH
11183: LD_STRING D2c-Bobby-1
11185: PPUSH
11186: CALL_OW 88
11190: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11191: LD_EXP 14
11195: PUSH
11196: LD_EXP 40
11200: PPUSH
11201: CALL_OW 302
11205: AND
11206: PUSH
11207: LD_EXP 40
11211: PPUSH
11212: CALL 966 0 1
11216: AND
11217: PUSH
11218: LD_EXP 19
11222: NOT
11223: AND
11224: IFFALSE 11256
11226: GO 11228
11228: DISABLE
// begin lisa_in_veh := true ;
11229: LD_ADDR_EXP 19
11233: PUSH
11234: LD_INT 1
11236: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11237: LD_INT 70
11239: PPUSH
11240: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11244: LD_EXP 40
11248: PPUSH
11249: LD_STRING D2c-Lisa-1
11251: PPUSH
11252: CALL_OW 88
11256: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11257: LD_EXP 14
11261: PUSH
11262: LD_EXP 39
11266: PPUSH
11267: CALL_OW 302
11271: AND
11272: PUSH
11273: LD_EXP 39
11277: PPUSH
11278: CALL 966 0 1
11282: AND
11283: PUSH
11284: LD_EXP 18
11288: NOT
11289: AND
11290: IFFALSE 11361
11292: GO 11294
11294: DISABLE
11295: LD_INT 0
11297: PPUSH
// begin cyrus_in_veh := true ;
11298: LD_ADDR_EXP 18
11302: PUSH
11303: LD_INT 1
11305: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11306: LD_ADDR_VAR 0 1
11310: PUSH
11311: LD_INT 0
11313: PPUSH
11314: LD_INT 1
11316: PPUSH
11317: CALL_OW 12
11321: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11322: LD_INT 70
11324: PPUSH
11325: CALL_OW 67
// if i then
11329: LD_VAR 0 1
11333: IFFALSE 11349
// Say ( Cyrus , D2c-Cyrus-1 ) else
11335: LD_EXP 39
11339: PPUSH
11340: LD_STRING D2c-Cyrus-1
11342: PPUSH
11343: CALL_OW 88
11347: GO 11361
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11349: LD_EXP 39
11353: PPUSH
11354: LD_STRING D2c-Cyrus-1a
11356: PPUSH
11357: CALL_OW 88
// end ;
11361: PPOPN 1
11363: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11364: LD_EXP 44
11368: PPUSH
11369: LD_INT 16
11371: PPUSH
11372: CALL_OW 308
11376: IFFALSE 11657
11378: GO 11380
11380: DISABLE
11381: LD_INT 0
11383: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11384: LD_INT 3
11386: PPUSH
11387: LD_EXP 44
11391: PPUSH
11392: CALL_OW 471
// send_attack_on_cornel := true ;
11396: LD_ADDR_EXP 32
11400: PUSH
11401: LD_INT 1
11403: ST_TO_ADDR
// if ru_vehicles then
11404: LD_EXP 56
11408: IFFALSE 11442
// for i in ru_vehicles do
11410: LD_ADDR_VAR 0 1
11414: PUSH
11415: LD_EXP 56
11419: PUSH
11420: FOR_IN
11421: IFFALSE 11440
// ComAgressiveMove ( i , 215 , 69 ) ;
11423: LD_VAR 0 1
11427: PPUSH
11428: LD_INT 215
11430: PPUSH
11431: LD_INT 69
11433: PPUSH
11434: CALL_OW 114
11438: GO 11420
11440: POP
11441: POP
// if ru_patrol then
11442: LD_EXP 53
11446: IFFALSE 11480
// for i in ru_patrol do
11448: LD_ADDR_VAR 0 1
11452: PUSH
11453: LD_EXP 53
11457: PUSH
11458: FOR_IN
11459: IFFALSE 11478
// ComAgressiveMove ( i , 215 , 69 ) ;
11461: LD_VAR 0 1
11465: PPUSH
11466: LD_INT 215
11468: PPUSH
11469: LD_INT 69
11471: PPUSH
11472: CALL_OW 114
11476: GO 11458
11478: POP
11479: POP
// if frank_send_to_scout then
11480: LD_EXP 15
11484: IFFALSE 11498
// begin SayRadio ( Frank , D3b-Frank-1 ) ;
11486: LD_EXP 51
11490: PPUSH
11491: LD_STRING D3b-Frank-1
11493: PPUSH
11494: CALL_OW 94
// end ; Wait ( 0 0$03 ) ;
11498: LD_INT 105
11500: PPUSH
11501: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11505: LD_EXP 44
11509: PPUSH
11510: LD_STRING D4-Corn-1
11512: PPUSH
11513: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11517: LD_INT 35
11519: PPUSH
11520: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11524: LD_INT 22
11526: PUSH
11527: LD_INT 4
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: LD_INT 21
11536: PUSH
11537: LD_INT 1
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: LD_INT 3
11546: PUSH
11547: LD_INT 24
11549: PUSH
11550: LD_INT 1000
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: LIST
11565: PPUSH
11566: CALL_OW 69
11570: PUSH
11571: LD_INT 6
11573: LESS
11574: IFFALSE 11517
// if Cornel then
11576: LD_EXP 44
11580: IFFALSE 11620
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
11582: LD_EXP 44
11586: PPUSH
11587: LD_STRING D5-Corn-1
11589: PPUSH
11590: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
11594: LD_EXP 44
11598: PPUSH
11599: LD_EXP 2
11603: PUSH
11604: LD_STRING Cornel
11606: STR
11607: PPUSH
11608: CALL_OW 38
// cornel_saved := true ;
11612: LD_ADDR_EXP 27
11616: PUSH
11617: LD_INT 1
11619: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
11620: LD_INT 4
11622: PPUSH
11623: LD_INT 8
11625: PPUSH
11626: CALL_OW 343
// Wait ( 0 0$01 ) ;
11630: LD_INT 35
11632: PPUSH
11633: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
11637: LD_INT 3
11639: PPUSH
11640: LD_EXP 44
11644: PPUSH
11645: CALL_OW 472
// send_attack_on_cornel := false ;
11649: LD_ADDR_EXP 32
11653: PUSH
11654: LD_INT 0
11656: ST_TO_ADDR
// end ;
11657: PPOPN 1
11659: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
11660: LD_INT 9
11662: PPUSH
11663: LD_INT 22
11665: PUSH
11666: LD_INT 1
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PPUSH
11673: CALL_OW 70
11677: PUSH
11678: LD_EXP 33
11682: OR
11683: IFFALSE 11904
11685: GO 11687
11687: DISABLE
11688: LD_INT 0
11690: PPUSH
11691: PPUSH
// begin enable ;
11692: ENABLE
// if not jmm_on_west then
11693: LD_EXP 5
11697: NOT
11698: IFFALSE 11709
// begin YouLost ( 4 ) ;
11700: LD_STRING 4
11702: PPUSH
11703: CALL_OW 104
// exit ;
11707: GO 11904
// end ; if not game_end then
11709: LD_EXP 33
11713: NOT
11714: IFFALSE 11724
// game_end := true ;
11716: LD_ADDR_EXP 33
11720: PUSH
11721: LD_INT 1
11723: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11724: LD_ADDR_VAR 0 2
11728: PUSH
11729: LD_INT 9
11731: PPUSH
11732: LD_INT 22
11734: PUSH
11735: LD_INT 1
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PPUSH
11742: CALL_OW 70
11746: ST_TO_ADDR
// if not filter then
11747: LD_VAR 0 2
11751: NOT
11752: IFFALSE 11756
// exit ;
11754: GO 11904
// for i in filter do
11756: LD_ADDR_VAR 0 1
11760: PUSH
11761: LD_VAR 0 2
11765: PUSH
11766: FOR_IN
11767: IFFALSE 11902
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle and GetNation ( i ) = nation_american then
11769: LD_VAR 0 1
11773: PPUSH
11774: CALL_OW 302
11778: PUSH
11779: LD_VAR 0 1
11783: PPUSH
11784: CALL_OW 247
11788: PUSH
11789: LD_INT 2
11791: EQUAL
11792: AND
11793: PUSH
11794: LD_VAR 0 1
11798: PPUSH
11799: CALL_OW 248
11803: PUSH
11804: LD_INT 1
11806: EQUAL
11807: AND
11808: IFFALSE 11865
// begin if i = JMM and save_group < 4 then
11810: LD_VAR 0 1
11814: PUSH
11815: LD_EXP 37
11819: EQUAL
11820: PUSH
11821: LD_EXP 23
11825: PUSH
11826: LD_INT 4
11828: LESS
11829: AND
11830: IFFALSE 11834
// continue ;
11832: GO 11766
// veh_on_meta := true ;
11834: LD_ADDR_EXP 28
11838: PUSH
11839: LD_INT 1
11841: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
11842: LD_VAR 0 1
11846: PPUSH
11847: CALL_OW 311
11851: PPUSH
11852: CALL 11907 0 1
// RemoveUnit ( i ) ;
11856: LD_VAR 0 1
11860: PPUSH
11861: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
11865: LD_VAR 0 1
11869: PPUSH
11870: CALL_OW 302
11874: PUSH
11875: LD_VAR 0 1
11879: PPUSH
11880: CALL_OW 247
11884: PUSH
11885: LD_INT 1
11887: EQUAL
11888: AND
11889: IFFALSE 11900
// Save ( i ) ;
11891: LD_VAR 0 1
11895: PPUSH
11896: CALL 11907 0 1
// end ;
11900: GO 11766
11902: POP
11903: POP
// end ;
11904: PPOPN 2
11906: END
// export function Save ( i ) ; begin
11907: LD_INT 0
11909: PPUSH
// if i = JMM and save_group >= 4 then
11910: LD_VAR 0 1
11914: PUSH
11915: LD_EXP 37
11919: EQUAL
11920: PUSH
11921: LD_EXP 23
11925: PUSH
11926: LD_INT 4
11928: GREATEREQUAL
11929: AND
11930: IFFALSE 12066
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
11932: LD_EXP 24
11936: PUSH
11937: LD_INT 22
11939: PUSH
11940: LD_INT 1
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: PUSH
11947: LD_INT 21
11949: PUSH
11950: LD_INT 1
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PPUSH
11961: CALL_OW 69
11965: PUSH
11966: LD_INT 1
11968: GREATER
11969: AND
11970: IFFALSE 12027
// begin show_query := false ;
11972: LD_ADDR_EXP 24
11976: PUSH
11977: LD_INT 0
11979: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
11980: LD_STRING Q2
11982: PPUSH
11983: CALL_OW 97
11987: PUSH
11988: LD_INT 1
11990: DOUBLE
11991: EQUAL
11992: IFTRUE 11996
11994: GO 12007
11996: POP
// wait_for_them := true ; 2 :
11997: LD_ADDR_EXP 25
12001: PUSH
12002: LD_INT 1
12004: ST_TO_ADDR
12005: GO 12027
12007: LD_INT 2
12009: DOUBLE
12010: EQUAL
12011: IFTRUE 12015
12013: GO 12026
12015: POP
// wait_for_them := false ; end ;
12016: LD_ADDR_EXP 25
12020: PUSH
12021: LD_INT 0
12023: ST_TO_ADDR
12024: GO 12027
12026: POP
// end ; save_counter := save_counter + 1 ;
12027: LD_ADDR_EXP 36
12031: PUSH
12032: LD_EXP 36
12036: PUSH
12037: LD_INT 1
12039: PLUS
12040: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12041: LD_ADDR_EXP 23
12045: PUSH
12046: LD_EXP 23
12050: PUSH
12051: LD_EXP 37
12055: ADD
12056: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12057: LD_EXP 37
12061: PPUSH
12062: CALL_OW 64
// end ; if i = Lisa then
12066: LD_VAR 0 1
12070: PUSH
12071: LD_EXP 40
12075: EQUAL
12076: IFFALSE 12117
// begin save_counter := save_counter + 1 ;
12078: LD_ADDR_EXP 36
12082: PUSH
12083: LD_EXP 36
12087: PUSH
12088: LD_INT 1
12090: PLUS
12091: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12092: LD_ADDR_EXP 23
12096: PUSH
12097: LD_EXP 23
12101: PUSH
12102: LD_EXP 40
12106: ADD
12107: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12108: LD_EXP 40
12112: PPUSH
12113: CALL_OW 64
// end ; if i = Bobby then
12117: LD_VAR 0 1
12121: PUSH
12122: LD_EXP 38
12126: EQUAL
12127: IFFALSE 12168
// begin save_counter := save_counter + 1 ;
12129: LD_ADDR_EXP 36
12133: PUSH
12134: LD_EXP 36
12138: PUSH
12139: LD_INT 1
12141: PLUS
12142: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12143: LD_ADDR_EXP 23
12147: PUSH
12148: LD_EXP 23
12152: PUSH
12153: LD_EXP 38
12157: ADD
12158: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12159: LD_EXP 38
12163: PPUSH
12164: CALL_OW 64
// end ; if i = Cyrus then
12168: LD_VAR 0 1
12172: PUSH
12173: LD_EXP 39
12177: EQUAL
12178: IFFALSE 12219
// begin save_counter := save_counter + 1 ;
12180: LD_ADDR_EXP 36
12184: PUSH
12185: LD_EXP 36
12189: PUSH
12190: LD_INT 1
12192: PLUS
12193: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12194: LD_ADDR_EXP 23
12198: PUSH
12199: LD_EXP 23
12203: PUSH
12204: LD_EXP 39
12208: ADD
12209: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12210: LD_EXP 39
12214: PPUSH
12215: CALL_OW 64
// end ; if i = Khatam then
12219: LD_VAR 0 1
12223: PUSH
12224: LD_EXP 41
12228: EQUAL
12229: IFFALSE 12270
// begin save_counter := save_counter + 1 ;
12231: LD_ADDR_EXP 36
12235: PUSH
12236: LD_EXP 36
12240: PUSH
12241: LD_INT 1
12243: PLUS
12244: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12245: LD_ADDR_EXP 23
12249: PUSH
12250: LD_EXP 23
12254: PUSH
12255: LD_EXP 41
12259: ADD
12260: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12261: LD_EXP 41
12265: PPUSH
12266: CALL_OW 64
// end ; if i = Frank then
12270: LD_VAR 0 1
12274: PUSH
12275: LD_EXP 51
12279: EQUAL
12280: IFFALSE 12321
// begin save_counter := save_counter + 1 ;
12282: LD_ADDR_EXP 36
12286: PUSH
12287: LD_EXP 36
12291: PUSH
12292: LD_INT 1
12294: PLUS
12295: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12296: LD_ADDR_EXP 23
12300: PUSH
12301: LD_EXP 23
12305: PUSH
12306: LD_EXP 51
12310: ADD
12311: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12312: LD_EXP 51
12316: PPUSH
12317: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12321: LD_VAR 0 1
12325: PUSH
12326: LD_EXP 37
12330: NONEQUAL
12331: PUSH
12332: LD_VAR 0 1
12336: PPUSH
12337: CALL_OW 302
12341: AND
12342: PUSH
12343: LD_VAR 0 1
12347: PPUSH
12348: CALL_OW 247
12352: PUSH
12353: LD_INT 1
12355: EQUAL
12356: AND
12357: PUSH
12358: LD_VAR 0 1
12362: PUSH
12363: LD_EXP 23
12367: IN
12368: NOT
12369: AND
12370: IFFALSE 12411
// begin save_counter := save_counter + 1 ;
12372: LD_ADDR_EXP 36
12376: PUSH
12377: LD_EXP 36
12381: PUSH
12382: LD_INT 1
12384: PLUS
12385: ST_TO_ADDR
// save_others := save_others ^ i ;
12386: LD_ADDR_EXP 22
12390: PUSH
12391: LD_EXP 22
12395: PUSH
12396: LD_VAR 0 1
12400: ADD
12401: ST_TO_ADDR
// RemoveUnit ( i ) ;
12402: LD_VAR 0 1
12406: PPUSH
12407: CALL_OW 64
// end ; end ;
12411: LD_VAR 0 2
12415: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12416: LD_EXP 24
12420: NOT
12421: PUSH
12422: LD_EXP 25
12426: NOT
12427: AND
12428: PUSH
12429: LD_INT 22
12431: PUSH
12432: LD_INT 1
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 21
12441: PUSH
12442: LD_INT 1
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PPUSH
12453: CALL_OW 69
12457: PUSH
12458: LD_INT 0
12460: EQUAL
12461: OR
12462: IFFALSE 12471
12464: GO 12466
12466: DISABLE
// EndMission ;
12467: CALL 12472 0 0
12471: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12472: LD_INT 0
12474: PPUSH
12475: PPUSH
12476: PPUSH
12477: PPUSH
12478: PPUSH
// wait ( 0 0$01 ) ;
12479: LD_INT 35
12481: PPUSH
12482: CALL_OW 67
// if tick <= 12 12$00 then
12486: LD_OWVAR 1
12490: PUSH
12491: LD_INT 25200
12493: LESSEQUAL
12494: IFFALSE 12503
// SetAchievement ( ACH_ASPEED_3 ) ;
12496: LD_STRING ACH_ASPEED_3
12498: PPUSH
12499: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12503: LD_EXP 23
12507: PUSH
12508: LD_EXP 22
12512: ADD
12513: PPUSH
12514: LD_INT 25
12516: PUSH
12517: LD_INT 4
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PPUSH
12524: CALL_OW 72
12528: PUSH
12529: LD_INT 0
12531: EQUAL
12532: IFFALSE 12548
// begin wait ( 3 ) ;
12534: LD_INT 3
12536: PPUSH
12537: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
12541: LD_STRING ACH_NOSCI
12543: PPUSH
12544: CALL_OW 543
// end ; m1 := solar_builded ;
12548: LD_ADDR_VAR 0 3
12552: PUSH
12553: LD_EXP 14
12557: ST_TO_ADDR
// m2 := veh_on_meta ;
12558: LD_ADDR_VAR 0 4
12562: PUSH
12563: LD_EXP 28
12567: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
12568: LD_ADDR_VAR 0 5
12572: PUSH
12573: LD_EXP 34
12577: PUSH
12578: LD_INT 0
12580: EQUAL
12581: ST_TO_ADDR
// if solar_builded then
12582: LD_EXP 14
12586: IFFALSE 12600
// AddMedal ( Solar1 , 1 ) else
12588: LD_STRING Solar1
12590: PPUSH
12591: LD_INT 1
12593: PPUSH
12594: CALL_OW 101
12598: GO 12611
// AddMedal ( Solar1 , - 1 ) ;
12600: LD_STRING Solar1
12602: PPUSH
12603: LD_INT 1
12605: NEG
12606: PPUSH
12607: CALL_OW 101
// if veh_on_meta then
12611: LD_EXP 28
12615: IFFALSE 12629
// AddMedal ( Solar2 , 1 ) else
12617: LD_STRING Solar2
12619: PPUSH
12620: LD_INT 1
12622: PPUSH
12623: CALL_OW 101
12627: GO 12659
// if solar_builded then
12629: LD_EXP 14
12633: IFFALSE 12648
// AddMedal ( Solar2 , - 1 ) else
12635: LD_STRING Solar2
12637: PPUSH
12638: LD_INT 1
12640: NEG
12641: PPUSH
12642: CALL_OW 101
12646: GO 12659
// AddMedal ( Solar2 , - 2 ) ;
12648: LD_STRING Solar2
12650: PPUSH
12651: LD_INT 2
12653: NEG
12654: PPUSH
12655: CALL_OW 101
// if lose_counter = 0 then
12659: LD_EXP 34
12663: PUSH
12664: LD_INT 0
12666: EQUAL
12667: IFFALSE 12681
// AddMedal ( No , 1 ) else
12669: LD_STRING No
12671: PPUSH
12672: LD_INT 1
12674: PPUSH
12675: CALL_OW 101
12679: GO 12725
// if lose_counter > 0 and lose_counter < 4 then
12681: LD_EXP 34
12685: PUSH
12686: LD_INT 0
12688: GREATER
12689: PUSH
12690: LD_EXP 34
12694: PUSH
12695: LD_INT 4
12697: LESS
12698: AND
12699: IFFALSE 12714
// AddMedal ( No , - 1 ) else
12701: LD_STRING No
12703: PPUSH
12704: LD_INT 1
12706: NEG
12707: PPUSH
12708: CALL_OW 101
12712: GO 12725
// AddMedal ( UpTo4 , - 1 ) ;
12714: LD_STRING UpTo4
12716: PPUSH
12717: LD_INT 1
12719: NEG
12720: PPUSH
12721: CALL_OW 101
// GiveMedals ( MAIN ) ;
12725: LD_STRING MAIN
12727: PPUSH
12728: CALL_OW 102
// if Difficulty = 3 and m1 and m2 and m3 then
12732: LD_OWVAR 67
12736: PUSH
12737: LD_INT 3
12739: EQUAL
12740: PUSH
12741: LD_VAR 0 3
12745: AND
12746: PUSH
12747: LD_VAR 0 4
12751: AND
12752: PUSH
12753: LD_VAR 0 5
12757: AND
12758: IFFALSE 12770
// SetAchievementEX ( ACH_AMER , 3 ) ;
12760: LD_STRING ACH_AMER
12762: PPUSH
12763: LD_INT 3
12765: PPUSH
12766: CALL_OW 564
// if IsDead ( Pokryshkin ) then
12770: LD_EXP 52
12774: PPUSH
12775: CALL_OW 301
12779: IFFALSE 12835
// begin stop_talking := true ;
12781: LD_ADDR_OWVAR 56
12785: PUSH
12786: LD_INT 1
12788: ST_TO_ADDR
// for i in save_group ^ save_others do
12789: LD_ADDR_VAR 0 2
12793: PUSH
12794: LD_EXP 23
12798: PUSH
12799: LD_EXP 22
12803: ADD
12804: PUSH
12805: FOR_IN
12806: IFFALSE 12825
// AddExperience ( i , skill_combat , 1500 ) ;
12808: LD_VAR 0 2
12812: PPUSH
12813: LD_INT 1
12815: PPUSH
12816: LD_INT 1500
12818: PPUSH
12819: CALL_OW 492
12823: GO 12805
12825: POP
12826: POP
// stop_talking := false ;
12827: LD_ADDR_OWVAR 56
12831: PUSH
12832: LD_INT 0
12834: ST_TO_ADDR
// end ; RewardPeople ( save_group ^ save_others ) ;
12835: LD_EXP 23
12839: PUSH
12840: LD_EXP 22
12844: ADD
12845: PPUSH
12846: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
12850: LD_EXP 37
12854: PPUSH
12855: LD_EXP 2
12859: PUSH
12860: LD_STRING JMM
12862: STR
12863: PPUSH
12864: CALL_OW 38
// if Bobby in save_group then
12868: LD_EXP 38
12872: PUSH
12873: LD_EXP 23
12877: IN
12878: IFFALSE 12898
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
12880: LD_EXP 38
12884: PPUSH
12885: LD_EXP 2
12889: PUSH
12890: LD_STRING Bobby
12892: STR
12893: PPUSH
12894: CALL_OW 38
// if Cyrus in save_group then
12898: LD_EXP 39
12902: PUSH
12903: LD_EXP 23
12907: IN
12908: IFFALSE 12928
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
12910: LD_EXP 39
12914: PPUSH
12915: LD_EXP 2
12919: PUSH
12920: LD_STRING Cyrus
12922: STR
12923: PPUSH
12924: CALL_OW 38
// if Lisa in save_group then
12928: LD_EXP 40
12932: PUSH
12933: LD_EXP 23
12937: IN
12938: IFFALSE 12958
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
12940: LD_EXP 40
12944: PPUSH
12945: LD_EXP 2
12949: PUSH
12950: LD_STRING Lisa
12952: STR
12953: PPUSH
12954: CALL_OW 38
// if Frank in save_group then
12958: LD_EXP 51
12962: PUSH
12963: LD_EXP 23
12967: IN
12968: IFFALSE 12988
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
12970: LD_EXP 51
12974: PPUSH
12975: LD_EXP 2
12979: PUSH
12980: LD_STRING Frank
12982: STR
12983: PPUSH
12984: CALL_OW 38
// if Khatam in save_group then
12988: LD_EXP 41
12992: PUSH
12993: LD_EXP 23
12997: IN
12998: IFFALSE 13018
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13000: LD_EXP 41
13004: PPUSH
13005: LD_EXP 2
13009: PUSH
13010: LD_STRING Khatam
13012: STR
13013: PPUSH
13014: CALL_OW 38
// if save_others then
13018: LD_EXP 22
13022: IFFALSE 13036
// SaveCharacters ( save_others , 03_others ) ;
13024: LD_EXP 22
13028: PPUSH
13029: LD_STRING 03_others
13031: PPUSH
13032: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13036: LD_EXP 45
13040: PUSH
13041: LD_EXP 45
13045: PPUSH
13046: CALL_OW 302
13050: AND
13051: PUSH
13052: LD_EXP 27
13056: AND
13057: IFFALSE 13069
// begin ResetFog ;
13059: CALL_OW 335
// DisplayEndingScene ;
13063: CALL 13091 0 0
// end else
13067: GO 13082
// DeleteCharacters ( mission_prefix & Cornel ) ;
13069: LD_EXP 2
13073: PUSH
13074: LD_STRING Cornel
13076: STR
13077: PPUSH
13078: CALL_OW 40
// YouWin ;
13082: CALL_OW 103
// end ;
13086: LD_VAR 0 1
13090: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13091: LD_INT 0
13093: PPUSH
13094: PPUSH
13095: PPUSH
13096: PPUSH
13097: PPUSH
13098: PPUSH
// InGameOn ;
13099: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13103: LD_INT 208
13105: PPUSH
13106: LD_INT 62
13108: PPUSH
13109: LD_INT 1
13111: PPUSH
13112: LD_INT 10
13114: NEG
13115: PPUSH
13116: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13120: LD_INT 208
13122: PPUSH
13123: LD_INT 62
13125: PPUSH
13126: LD_INT 1
13128: PPUSH
13129: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13133: LD_ADDR_VAR 0 3
13137: PUSH
13138: LD_INT 22
13140: PUSH
13141: LD_INT 3
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: LD_INT 2
13150: PUSH
13151: LD_INT 21
13153: PUSH
13154: LD_INT 2
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: LD_INT 21
13163: PUSH
13164: LD_INT 1
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: LIST
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PPUSH
13180: CALL_OW 69
13184: ST_TO_ADDR
// if filter then
13185: LD_VAR 0 3
13189: IFFALSE 13217
// for i in filter do
13191: LD_ADDR_VAR 0 2
13195: PUSH
13196: LD_VAR 0 3
13200: PUSH
13201: FOR_IN
13202: IFFALSE 13215
// RemoveUnit ( i ) ;
13204: LD_VAR 0 2
13208: PPUSH
13209: CALL_OW 64
13213: GO 13201
13215: POP
13216: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13217: LD_ADDR_VAR 0 3
13221: PUSH
13222: LD_INT 22
13224: PUSH
13225: LD_INT 4
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 21
13234: PUSH
13235: LD_INT 1
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PPUSH
13246: CALL_OW 69
13250: ST_TO_ADDR
// if filter then
13251: LD_VAR 0 3
13255: IFFALSE 13286
// for i in filter do
13257: LD_ADDR_VAR 0 2
13261: PUSH
13262: LD_VAR 0 3
13266: PUSH
13267: FOR_IN
13268: IFFALSE 13284
// SetLives ( i , 0 ) ;
13270: LD_VAR 0 2
13274: PPUSH
13275: LD_INT 0
13277: PPUSH
13278: CALL_OW 234
13282: GO 13267
13284: POP
13285: POP
// uc_side := 4 ;
13286: LD_ADDR_OWVAR 20
13290: PUSH
13291: LD_INT 4
13293: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ) ;
13294: LD_ADDR_VAR 0 4
13298: PUSH
13299: LD_STRING Cornell
13301: PPUSH
13302: LD_INT 0
13304: PPUSH
13305: CALL 489 0 2
13309: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13310: LD_VAR 0 4
13314: PPUSH
13315: LD_INT 208
13317: PPUSH
13318: LD_INT 62
13320: PPUSH
13321: LD_INT 0
13323: PPUSH
13324: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13328: LD_VAR 0 4
13332: PPUSH
13333: LD_INT 100
13335: PPUSH
13336: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13340: LD_INT 3
13342: PPUSH
13343: LD_VAR 0 4
13347: PPUSH
13348: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13352: LD_INT 4
13354: PPUSH
13355: LD_INT 3
13357: PPUSH
13358: LD_INT 1
13360: PPUSH
13361: LD_INT 1
13363: PPUSH
13364: CALL_OW 80
// uc_side := 3 ;
13368: LD_ADDR_OWVAR 20
13372: PUSH
13373: LD_INT 3
13375: ST_TO_ADDR
// uc_nation := 3 ;
13376: LD_ADDR_OWVAR 21
13380: PUSH
13381: LD_INT 3
13383: ST_TO_ADDR
// InitHc ;
13384: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ) ;
13388: LD_ADDR_VAR 0 5
13392: PUSH
13393: LD_STRING Mikhail
13395: PPUSH
13396: LD_INT 0
13398: PPUSH
13399: CALL 489 0 2
13403: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13404: LD_INT 1
13406: PPUSH
13407: LD_INT 1
13409: PPUSH
13410: LD_INT 0
13412: PPUSH
13413: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13417: LD_ADDR_VAR 0 6
13421: PUSH
13422: LD_VAR 0 6
13426: PUSH
13427: CALL_OW 44
13431: ADD
13432: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13433: LD_ADDR_VAR 0 6
13437: PUSH
13438: LD_VAR 0 6
13442: PUSH
13443: CALL_OW 44
13447: ADD
13448: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13449: LD_INT 2
13451: PPUSH
13452: LD_INT 4
13454: PPUSH
13455: LD_INT 0
13457: PPUSH
13458: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13462: LD_ADDR_VAR 0 6
13466: PUSH
13467: LD_VAR 0 6
13471: PUSH
13472: CALL_OW 44
13476: ADD
13477: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13478: LD_VAR 0 5
13482: PPUSH
13483: LD_INT 17
13485: PPUSH
13486: LD_INT 0
13488: PPUSH
13489: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13493: LD_VAR 0 5
13497: PPUSH
13498: LD_INT 210
13500: PPUSH
13501: LD_INT 63
13503: PPUSH
13504: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
13508: LD_VAR 0 5
13512: PPUSH
13513: LD_INT 208
13515: PPUSH
13516: LD_INT 62
13518: PPUSH
13519: CALL_OW 178
// for i in fake_russians do
13523: LD_ADDR_VAR 0 2
13527: PUSH
13528: LD_VAR 0 6
13532: PUSH
13533: FOR_IN
13534: IFFALSE 13612
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
13536: LD_VAR 0 2
13540: PPUSH
13541: LD_INT 17
13543: PPUSH
13544: LD_INT 0
13546: PPUSH
13547: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
13551: LD_VAR 0 2
13555: PPUSH
13556: LD_INT 215
13558: PPUSH
13559: LD_INT 67
13561: PPUSH
13562: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
13566: LD_VAR 0 2
13570: PPUSH
13571: LD_INT 208
13573: PPUSH
13574: LD_INT 62
13576: PPUSH
13577: CALL_OW 178
// if GetClass ( i ) = 4 then
13581: LD_VAR 0 2
13585: PPUSH
13586: CALL_OW 257
13590: PUSH
13591: LD_INT 4
13593: EQUAL
13594: IFFALSE 13610
// ComHeal ( i , fake_cornel ) ;
13596: LD_VAR 0 2
13600: PPUSH
13601: LD_VAR 0 4
13605: PPUSH
13606: CALL_OW 128
// end ;
13610: GO 13533
13612: POP
13613: POP
// Wait ( 0 0$01 ) ;
13614: LD_INT 35
13616: PPUSH
13617: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
13621: LD_INT 208
13623: PPUSH
13624: LD_INT 62
13626: PPUSH
13627: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13631: LD_INT 208
13633: PPUSH
13634: LD_INT 62
13636: PPUSH
13637: LD_INT 1
13639: PPUSH
13640: LD_INT 10
13642: NEG
13643: PPUSH
13644: CALL_OW 330
// Wait ( 0 0$15 ) ;
13648: LD_INT 525
13650: PPUSH
13651: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
13655: LD_INT 208
13657: PPUSH
13658: LD_INT 62
13660: PPUSH
13661: LD_INT 1
13663: PPUSH
13664: CALL_OW 331
// ResetFog ;
13668: CALL_OW 335
// InGameOff ;
13672: CALL_OW 9
// end ;
13676: LD_VAR 0 1
13680: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
13681: LD_INT 10
13683: PPUSH
13684: LD_INT 22
13686: PUSH
13687: LD_INT 1
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PPUSH
13694: CALL_OW 70
13698: PUSH
13699: LD_EXP 44
13703: PPUSH
13704: CALL_OW 302
13708: AND
13709: PUSH
13710: LD_INT 22
13712: PUSH
13713: LD_INT 1
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PPUSH
13720: CALL_OW 69
13724: PPUSH
13725: LD_EXP 44
13729: PPUSH
13730: CALL_OW 74
13734: PPUSH
13735: LD_EXP 44
13739: PPUSH
13740: CALL_OW 296
13744: PUSH
13745: LD_INT 30
13747: LESS
13748: OR
13749: IFFALSE 13800
13751: GO 13753
13753: DISABLE
// begin enable ;
13754: ENABLE
// powell_warn := powell_warn + 1 ;
13755: LD_ADDR_EXP 35
13759: PUSH
13760: LD_EXP 35
13764: PUSH
13765: LD_INT 1
13767: PLUS
13768: ST_TO_ADDR
// if powell_warn = 3 then
13769: LD_EXP 35
13773: PUSH
13774: LD_INT 3
13776: EQUAL
13777: IFFALSE 13788
// begin YouLost ( 5 ) ;
13779: LD_STRING 5
13781: PPUSH
13782: CALL_OW 104
// exit ;
13786: GO 13800
// end ; SayRadio ( Powell , DWarn-Pow-1 ) ;
13788: LD_EXP 46
13792: PPUSH
13793: LD_STRING DWarn-Pow-1
13795: PPUSH
13796: CALL_OW 94
// end ; end_of_file
13800: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
13801: LD_EXP 8
13805: IFFALSE 15642
13807: GO 13809
13809: DISABLE
13810: LD_INT 0
13812: PPUSH
13813: PPUSH
13814: PPUSH
13815: PPUSH
13816: PPUSH
13817: PPUSH
13818: PPUSH
13819: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
13820: LD_EXP 44
13824: PUSH
13825: LD_EXP 45
13829: ADD
13830: PUSH
13831: LD_EXP 6
13835: ADD
13836: PPUSH
13837: LD_INT 250
13839: PPUSH
13840: LD_INT 120
13842: PPUSH
13843: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
13847: LD_ADDR_VAR 0 2
13851: PUSH
13852: LD_EXP 6
13856: PPUSH
13857: LD_INT 25
13859: PUSH
13860: LD_INT 2
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PPUSH
13867: CALL_OW 72
13871: PUSH
13872: LD_EXP 45
13876: DIFF
13877: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
13878: LD_ADDR_VAR 0 3
13882: PUSH
13883: LD_EXP 6
13887: PPUSH
13888: LD_INT 21
13890: PUSH
13891: LD_INT 1
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PPUSH
13898: CALL_OW 72
13902: PUSH
13903: LD_VAR 0 2
13907: DIFF
13908: ST_TO_ADDR
// if not has_eng then
13909: LD_VAR 0 2
13913: NOT
13914: IFFALSE 13997
// begin uc_side := 4 ;
13916: LD_ADDR_OWVAR 20
13920: PUSH
13921: LD_INT 4
13923: ST_TO_ADDR
// uc_nation := 1 ;
13924: LD_ADDR_OWVAR 21
13928: PUSH
13929: LD_INT 1
13931: ST_TO_ADDR
// bc_type := b_depot ;
13932: LD_ADDR_OWVAR 42
13936: PUSH
13937: LD_INT 0
13939: ST_TO_ADDR
// bc_level := 2 ;
13940: LD_ADDR_OWVAR 43
13944: PUSH
13945: LD_INT 2
13947: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
13948: LD_ADDR_VAR 0 4
13952: PUSH
13953: LD_INT 264
13955: PPUSH
13956: LD_INT 120
13958: PPUSH
13959: LD_INT 4
13961: PPUSH
13962: CALL_OW 47
13966: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
13967: LD_INT 264
13969: PPUSH
13970: LD_INT 120
13972: PPUSH
13973: LD_INT 4
13975: PPUSH
13976: LD_INT 10
13978: NEG
13979: PPUSH
13980: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
13984: LD_INT 264
13986: PPUSH
13987: LD_INT 120
13989: PPUSH
13990: LD_INT 4
13992: PPUSH
13993: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
13997: LD_INT 35
13999: PPUSH
14000: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14004: LD_EXP 44
14008: PPUSH
14009: LD_INT 10
14011: PPUSH
14012: CALL_OW 308
14016: PUSH
14017: LD_EXP 44
14021: PPUSH
14022: CALL_OW 310
14026: PPUSH
14027: LD_INT 10
14029: PPUSH
14030: CALL_OW 308
14034: OR
14035: IFFALSE 13997
// if has_eng and not dep then
14037: LD_VAR 0 2
14041: PUSH
14042: LD_VAR 0 4
14046: NOT
14047: AND
14048: IFFALSE 14198
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14050: LD_VAR 0 2
14054: PPUSH
14055: LD_INT 0
14057: PPUSH
14058: LD_INT 264
14060: PPUSH
14061: LD_INT 120
14063: PPUSH
14064: LD_INT 4
14066: PPUSH
14067: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14071: LD_INT 35
14073: PPUSH
14074: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14078: LD_INT 22
14080: PUSH
14081: LD_INT 4
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: LD_INT 30
14090: PUSH
14091: LD_INT 0
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PPUSH
14102: CALL_OW 69
14106: IFFALSE 14071
// ComMoveXY ( filter , 264 , 120 ) ;
14108: LD_VAR 0 3
14112: PPUSH
14113: LD_INT 264
14115: PPUSH
14116: LD_INT 120
14118: PPUSH
14119: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14123: LD_INT 35
14125: PPUSH
14126: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14130: LD_INT 22
14132: PUSH
14133: LD_INT 4
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: LD_INT 30
14142: PUSH
14143: LD_INT 0
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: LD_INT 3
14152: PUSH
14153: LD_INT 57
14155: PUSH
14156: EMPTY
14157: LIST
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: LIST
14167: PPUSH
14168: CALL_OW 69
14172: IFFALSE 14123
// ComMoveXY ( filter , 247 , 113 ) ;
14174: LD_VAR 0 3
14178: PPUSH
14179: LD_INT 247
14181: PPUSH
14182: LD_INT 113
14184: PPUSH
14185: CALL_OW 111
// Wait ( 0 0$2 ) ;
14189: LD_INT 70
14191: PPUSH
14192: CALL_OW 67
// end else
14196: GO 14210
// begin SetSide ( dep , 4 ) ;
14198: LD_VAR 0 4
14202: PPUSH
14203: LD_INT 4
14205: PPUSH
14206: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14210: LD_ADDR_VAR 0 4
14214: PUSH
14215: LD_INT 22
14217: PUSH
14218: LD_INT 4
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 30
14227: PUSH
14228: LD_INT 0
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PPUSH
14239: CALL_OW 69
14243: PUSH
14244: LD_INT 1
14246: ARRAY
14247: ST_TO_ADDR
// if not has_eng then
14248: LD_VAR 0 2
14252: NOT
14253: IFFALSE 14340
// for i = 1 to 2 do
14255: LD_ADDR_VAR 0 1
14259: PUSH
14260: DOUBLE
14261: LD_INT 1
14263: DEC
14264: ST_TO_ADDR
14265: LD_INT 2
14267: PUSH
14268: FOR_TO
14269: IFFALSE 14338
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14271: LD_VAR 0 3
14275: PUSH
14276: LD_INT 1
14278: ARRAY
14279: PPUSH
14280: LD_VAR 0 4
14284: PPUSH
14285: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14289: LD_VAR 0 3
14293: PUSH
14294: LD_INT 1
14296: ARRAY
14297: PPUSH
14298: LD_INT 2
14300: PPUSH
14301: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14305: LD_VAR 0 3
14309: PUSH
14310: LD_INT 1
14312: ARRAY
14313: PPUSH
14314: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14318: LD_ADDR_VAR 0 3
14322: PUSH
14323: LD_VAR 0 3
14327: PPUSH
14328: LD_INT 1
14330: PPUSH
14331: CALL_OW 3
14335: ST_TO_ADDR
// end ;
14336: GO 14268
14338: POP
14339: POP
// if IsInUnit ( Cornel ) then
14340: LD_EXP 44
14344: PPUSH
14345: CALL_OW 310
14349: IFFALSE 14427
// begin cargo := IsInUnit ( Cornel ) ;
14351: LD_ADDR_VAR 0 7
14355: PUSH
14356: LD_EXP 44
14360: PPUSH
14361: CALL_OW 310
14365: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14366: LD_VAR 0 7
14370: PPUSH
14371: LD_INT 1
14373: PPUSH
14374: CALL_OW 289
14378: IFFALSE 14389
// ComUnload ( cargo ) ;
14380: LD_VAR 0 7
14384: PPUSH
14385: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14389: LD_EXP 44
14393: PPUSH
14394: LD_INT 235
14396: PPUSH
14397: LD_INT 122
14399: PPUSH
14400: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14404: LD_EXP 44
14408: PPUSH
14409: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14413: LD_EXP 44
14417: PPUSH
14418: LD_VAR 0 4
14422: PPUSH
14423: CALL_OW 180
// end ; if Bierezov then
14427: LD_EXP 45
14431: IFFALSE 14479
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14433: LD_EXP 45
14437: PPUSH
14438: LD_INT 260
14440: PPUSH
14441: LD_INT 120
14443: PPUSH
14444: CALL_OW 111
// if dep then
14448: LD_VAR 0 4
14452: IFFALSE 14470
// AddComEnterUnit ( Bierezov , dep ) else
14454: LD_EXP 45
14458: PPUSH
14459: LD_VAR 0 4
14463: PPUSH
14464: CALL_OW 180
14468: GO 14479
// AddComHold ( Bierezov ) ;
14470: LD_EXP 45
14474: PPUSH
14475: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14479: LD_INT 525
14481: PPUSH
14482: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14486: LD_ADDR_VAR 0 2
14490: PUSH
14491: LD_INT 22
14493: PUSH
14494: LD_INT 4
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PUSH
14501: LD_INT 25
14503: PUSH
14504: LD_INT 2
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: PPUSH
14515: CALL_OW 69
14519: PUSH
14520: LD_EXP 45
14524: DIFF
14525: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14526: LD_INT 35
14528: PPUSH
14529: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
14533: LD_ADDR_VAR 0 6
14537: PUSH
14538: LD_INT 10
14540: PPUSH
14541: CALL_OW 435
14545: ST_TO_ADDR
// if crates then
14546: LD_VAR 0 6
14550: IFFALSE 14579
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
14552: LD_VAR 0 2
14556: PPUSH
14557: LD_VAR 0 6
14561: PUSH
14562: LD_INT 1
14564: ARRAY
14565: PPUSH
14566: LD_VAR 0 6
14570: PUSH
14571: LD_INT 2
14573: ARRAY
14574: PPUSH
14575: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
14579: LD_VAR 0 4
14583: PPUSH
14584: CALL_OW 274
14588: PPUSH
14589: LD_INT 1
14591: PPUSH
14592: CALL_OW 275
14596: PUSH
14597: LD_INT 40
14599: GREATEREQUAL
14600: IFFALSE 14526
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
14602: LD_ADDR_VAR 0 5
14606: PUSH
14607: LD_INT 4
14609: PUSH
14610: LD_INT 256
14612: PUSH
14613: LD_INT 111
14615: PUSH
14616: LD_INT 2
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: PUSH
14625: LD_INT 31
14627: PUSH
14628: LD_INT 243
14630: PUSH
14631: LD_INT 112
14633: PUSH
14634: LD_INT 2
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: PUSH
14643: LD_INT 31
14645: PUSH
14646: LD_INT 254
14648: PUSH
14649: LD_INT 114
14651: PUSH
14652: LD_INT 2
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: LIST
14665: ST_TO_ADDR
// for i in blist do
14666: LD_ADDR_VAR 0 1
14670: PUSH
14671: LD_VAR 0 5
14675: PUSH
14676: FOR_IN
14677: IFFALSE 14726
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
14679: LD_VAR 0 2
14683: PPUSH
14684: LD_VAR 0 1
14688: PUSH
14689: LD_INT 1
14691: ARRAY
14692: PPUSH
14693: LD_VAR 0 1
14697: PUSH
14698: LD_INT 2
14700: ARRAY
14701: PPUSH
14702: LD_VAR 0 1
14706: PUSH
14707: LD_INT 3
14709: ARRAY
14710: PPUSH
14711: LD_VAR 0 1
14715: PUSH
14716: LD_INT 4
14718: ARRAY
14719: PPUSH
14720: CALL_OW 205
14724: GO 14676
14726: POP
14727: POP
// repeat wait ( 0 0$01 ) ;
14728: LD_INT 35
14730: PPUSH
14731: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
14735: LD_INT 22
14737: PUSH
14738: LD_INT 4
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 30
14747: PUSH
14748: LD_INT 4
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 3
14757: PUSH
14758: LD_INT 57
14760: PUSH
14761: EMPTY
14762: LIST
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: LIST
14772: PPUSH
14773: CALL_OW 69
14777: IFFALSE 14728
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14779: LD_VAR 0 3
14783: PPUSH
14784: LD_INT 22
14786: PUSH
14787: LD_INT 4
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: LD_INT 30
14796: PUSH
14797: LD_INT 4
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PPUSH
14808: CALL_OW 69
14812: PUSH
14813: LD_INT 1
14815: ARRAY
14816: PPUSH
14817: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
14821: LD_VAR 0 3
14825: PPUSH
14826: LD_INT 1
14828: PPUSH
14829: CALL_OW 183
// if has_eng > 1 then
14833: LD_VAR 0 2
14837: PUSH
14838: LD_INT 1
14840: GREATER
14841: IFFALSE 14983
// for i = has_eng downto 2 do
14843: LD_ADDR_VAR 0 1
14847: PUSH
14848: DOUBLE
14849: LD_VAR 0 2
14853: INC
14854: ST_TO_ADDR
14855: LD_INT 2
14857: PUSH
14858: FOR_DOWNTO
14859: IFFALSE 14981
// begin if IsInUnit ( has_eng [ i ] ) then
14861: LD_VAR 0 2
14865: PUSH
14866: LD_VAR 0 1
14870: ARRAY
14871: PPUSH
14872: CALL_OW 310
14876: IFFALSE 14893
// ComExitBuilding ( has_eng [ i ] ) ;
14878: LD_VAR 0 2
14882: PUSH
14883: LD_VAR 0 1
14887: ARRAY
14888: PPUSH
14889: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14893: LD_VAR 0 2
14897: PUSH
14898: LD_VAR 0 1
14902: ARRAY
14903: PPUSH
14904: LD_INT 22
14906: PUSH
14907: LD_INT 4
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 30
14916: PUSH
14917: LD_INT 4
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PPUSH
14928: CALL_OW 69
14932: PUSH
14933: LD_INT 1
14935: ARRAY
14936: PPUSH
14937: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
14941: LD_VAR 0 2
14945: PUSH
14946: LD_VAR 0 1
14950: ARRAY
14951: PPUSH
14952: LD_INT 1
14954: PPUSH
14955: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
14959: LD_ADDR_VAR 0 2
14963: PUSH
14964: LD_VAR 0 2
14968: PPUSH
14969: LD_VAR 0 1
14973: PPUSH
14974: CALL_OW 3
14978: ST_TO_ADDR
// end ;
14979: GO 14858
14981: POP
14982: POP
// repeat wait ( 0 0$01 ) ;
14983: LD_INT 35
14985: PPUSH
14986: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
14990: LD_INT 22
14992: PUSH
14993: LD_INT 4
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PUSH
15000: LD_INT 30
15002: PUSH
15003: LD_INT 31
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: LD_INT 3
15012: PUSH
15013: LD_INT 57
15015: PUSH
15016: EMPTY
15017: LIST
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: LIST
15027: PPUSH
15028: CALL_OW 69
15032: PUSH
15033: LD_INT 1
15035: GREATER
15036: IFFALSE 14983
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15038: LD_ADDR_VAR 0 8
15042: PUSH
15043: LD_EXP 6
15047: PPUSH
15048: LD_INT 25
15050: PUSH
15051: LD_INT 1
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PPUSH
15058: CALL_OW 72
15062: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15063: LD_ADDR_VAR 0 1
15067: PUSH
15068: DOUBLE
15069: LD_INT 1
15071: DEC
15072: ST_TO_ADDR
15073: LD_INT 22
15075: PUSH
15076: LD_INT 4
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 30
15085: PUSH
15086: LD_INT 31
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: LD_INT 3
15095: PUSH
15096: LD_INT 57
15098: PUSH
15099: EMPTY
15100: LIST
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: LIST
15110: PPUSH
15111: CALL_OW 69
15115: PUSH
15116: FOR_TO
15117: IFFALSE 15201
// begin if not sol [ i ] then
15119: LD_VAR 0 8
15123: PUSH
15124: LD_VAR 0 1
15128: ARRAY
15129: NOT
15130: IFFALSE 15134
// break ;
15132: GO 15201
// ComExitBuilding ( sol [ i ] ) ;
15134: LD_VAR 0 8
15138: PUSH
15139: LD_VAR 0 1
15143: ARRAY
15144: PPUSH
15145: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15149: LD_VAR 0 8
15153: PUSH
15154: LD_VAR 0 1
15158: ARRAY
15159: PPUSH
15160: LD_INT 22
15162: PUSH
15163: LD_INT 4
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: LD_INT 30
15172: PUSH
15173: LD_INT 31
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PPUSH
15184: CALL_OW 69
15188: PUSH
15189: LD_VAR 0 1
15193: ARRAY
15194: PPUSH
15195: CALL_OW 180
// end ;
15199: GO 15116
15201: POP
15202: POP
// if sol > 3 then
15203: LD_VAR 0 8
15207: PUSH
15208: LD_INT 3
15210: GREATER
15211: IFFALSE 15328
// begin ComExitBuilding ( sol [ 3 ] ) ;
15213: LD_VAR 0 8
15217: PUSH
15218: LD_INT 3
15220: ARRAY
15221: PPUSH
15222: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15226: LD_VAR 0 8
15230: PUSH
15231: LD_INT 3
15233: ARRAY
15234: PPUSH
15235: LD_INT 246
15237: PPUSH
15238: LD_INT 94
15240: PPUSH
15241: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15245: LD_VAR 0 8
15249: PUSH
15250: LD_INT 3
15252: ARRAY
15253: PPUSH
15254: LD_INT 175
15256: PPUSH
15257: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15261: LD_VAR 0 8
15265: PUSH
15266: LD_INT 3
15268: ARRAY
15269: PPUSH
15270: LD_INT 224
15272: PPUSH
15273: LD_INT 90
15275: PPUSH
15276: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15280: LD_VAR 0 8
15284: PUSH
15285: LD_INT 3
15287: ARRAY
15288: PPUSH
15289: LD_INT 245
15291: PPUSH
15292: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15296: LD_VAR 0 8
15300: PUSH
15301: LD_INT 3
15303: ARRAY
15304: PPUSH
15305: LD_INT 223
15307: PPUSH
15308: LD_INT 110
15310: PPUSH
15311: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15315: LD_VAR 0 8
15319: PUSH
15320: LD_INT 3
15322: ARRAY
15323: PPUSH
15324: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15328: LD_VAR 0 2
15332: PPUSH
15333: LD_VAR 0 4
15337: PPUSH
15338: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15342: LD_INT 22
15344: PUSH
15345: LD_INT 4
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: LD_INT 30
15354: PUSH
15355: LD_INT 4
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PPUSH
15366: CALL_OW 69
15370: PUSH
15371: LD_INT 1
15373: ARRAY
15374: PPUSH
15375: CALL_OW 313
15379: PUSH
15380: LD_INT 6
15382: LESS
15383: IFFALSE 15447
// begin if IsInUnit ( Cornel ) then
15385: LD_EXP 44
15389: PPUSH
15390: CALL_OW 310
15394: IFFALSE 15405
// ComExitBuilding ( Cornel ) ;
15396: LD_EXP 44
15400: PPUSH
15401: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15405: LD_EXP 44
15409: PPUSH
15410: LD_INT 22
15412: PUSH
15413: LD_INT 4
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: LD_INT 30
15422: PUSH
15423: LD_INT 4
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PPUSH
15434: CALL_OW 69
15438: PUSH
15439: LD_INT 1
15441: ARRAY
15442: PPUSH
15443: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15447: LD_INT 35
15449: PPUSH
15450: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15454: LD_ADDR_VAR 0 3
15458: PUSH
15459: LD_INT 22
15461: PUSH
15462: LD_INT 4
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PUSH
15469: LD_INT 21
15471: PUSH
15472: LD_INT 3
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PUSH
15479: LD_INT 3
15481: PUSH
15482: LD_INT 24
15484: PUSH
15485: LD_INT 1000
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: LIST
15500: PPUSH
15501: CALL_OW 69
15505: ST_TO_ADDR
// if filter and has_eng then
15506: LD_VAR 0 3
15510: PUSH
15511: LD_VAR 0 2
15515: AND
15516: IFFALSE 15582
// begin for i in has_eng do
15518: LD_ADDR_VAR 0 1
15522: PUSH
15523: LD_VAR 0 2
15527: PUSH
15528: FOR_IN
15529: IFFALSE 15578
// begin if IsInUnit ( i ) then
15531: LD_VAR 0 1
15535: PPUSH
15536: CALL_OW 310
15540: IFFALSE 15551
// ComExitBuilding ( i ) ;
15542: LD_VAR 0 1
15546: PPUSH
15547: CALL_OW 122
// Wait ( 3 ) ;
15551: LD_INT 3
15553: PPUSH
15554: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
15558: LD_VAR 0 1
15562: PPUSH
15563: LD_VAR 0 3
15567: PUSH
15568: LD_INT 1
15570: ARRAY
15571: PPUSH
15572: CALL_OW 130
// end ;
15576: GO 15528
15578: POP
15579: POP
// end else
15580: GO 15636
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
15582: LD_VAR 0 2
15586: PUSH
15587: LD_VAR 0 2
15591: PPUSH
15592: LD_INT 56
15594: PUSH
15595: EMPTY
15596: LIST
15597: PPUSH
15598: CALL_OW 72
15602: AND
15603: IFFALSE 15636
// for i in has_eng do
15605: LD_ADDR_VAR 0 1
15609: PUSH
15610: LD_VAR 0 2
15614: PUSH
15615: FOR_IN
15616: IFFALSE 15634
// ComEnterUnit ( i , dep ) ;
15618: LD_VAR 0 1
15622: PPUSH
15623: LD_VAR 0 4
15627: PPUSH
15628: CALL_OW 120
15632: GO 15615
15634: POP
15635: POP
// until cornel_prepared ;
15636: LD_EXP 11
15640: IFFALSE 15447
// end ;
15642: PPOPN 8
15644: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
15645: LD_EXP 11
15649: IFFALSE 16048
15651: GO 15653
15653: DISABLE
15654: LD_INT 0
15656: PPUSH
15657: PPUSH
15658: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
15659: LD_ADDR_VAR 0 2
15663: PUSH
15664: LD_INT 22
15666: PUSH
15667: LD_INT 4
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 30
15676: PUSH
15677: LD_INT 4
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PPUSH
15688: CALL_OW 69
15692: PUSH
15693: LD_INT 1
15695: ARRAY
15696: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
15697: LD_EXP 6
15701: PPUSH
15702: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
15706: LD_EXP 45
15710: PUSH
15711: LD_EXP 45
15715: PPUSH
15716: CALL_OW 310
15720: AND
15721: IFFALSE 15732
// ComExitBuilding ( Bierezov ) ;
15723: LD_EXP 45
15727: PPUSH
15728: CALL_OW 122
// Wait ( 0 0$03 ) ;
15732: LD_INT 105
15734: PPUSH
15735: CALL_OW 67
// for i in cornel_units do
15739: LD_ADDR_VAR 0 1
15743: PUSH
15744: LD_EXP 6
15748: PUSH
15749: FOR_IN
15750: IFFALSE 15826
// begin if GetClass ( i ) in [ 2 , 3 ] then
15752: LD_VAR 0 1
15756: PPUSH
15757: CALL_OW 257
15761: PUSH
15762: LD_INT 2
15764: PUSH
15765: LD_INT 3
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: IN
15772: IFFALSE 15809
// begin ComEnterUnit ( i , arm ) ;
15774: LD_VAR 0 1
15778: PPUSH
15779: LD_VAR 0 2
15783: PPUSH
15784: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
15788: LD_VAR 0 1
15792: PPUSH
15793: LD_INT 1
15795: PPUSH
15796: CALL_OW 183
// AddComExitBuilding ( i ) ;
15800: LD_VAR 0 1
15804: PPUSH
15805: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
15809: LD_VAR 0 1
15813: PPUSH
15814: LD_INT 257
15816: PPUSH
15817: LD_INT 121
15819: PPUSH
15820: CALL_OW 171
// end ;
15824: GO 15749
15826: POP
15827: POP
// Wait ( 1 1$00 ) ;
15828: LD_INT 2100
15830: PPUSH
15831: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
15835: LD_ADDR_VAR 0 3
15839: PUSH
15840: LD_EXP 44
15844: PUSH
15845: LD_EXP 45
15849: ADD
15850: PUSH
15851: LD_EXP 6
15855: ADD
15856: PUSH
15857: LD_EXP 6
15861: PPUSH
15862: LD_INT 21
15864: PUSH
15865: LD_INT 2
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PPUSH
15872: CALL_OW 72
15876: DIFF
15877: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
15878: LD_VAR 0 3
15882: PPUSH
15883: LD_INT 248
15885: PPUSH
15886: LD_INT 85
15888: PPUSH
15889: CALL_OW 111
// AddComHold ( filter ) ;
15893: LD_VAR 0 3
15897: PPUSH
15898: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
15902: LD_INT 35
15904: PPUSH
15905: CALL_OW 67
// until cornel_attack ;
15909: LD_EXP 9
15913: IFFALSE 15902
// ComAgressiveMove ( filter , 209 , 63 ) ;
15915: LD_VAR 0 3
15919: PPUSH
15920: LD_INT 209
15922: PPUSH
15923: LD_INT 63
15925: PPUSH
15926: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
15930: LD_EXP 44
15934: PPUSH
15935: LD_INT 208
15937: PPUSH
15938: LD_INT 62
15940: PPUSH
15941: CALL_OW 114
// AddComHold ( Cornel ) ;
15945: LD_EXP 44
15949: PPUSH
15950: CALL_OW 200
// if Bierezov then
15954: LD_EXP 45
15958: IFFALSE 16048
// begin filter := filter diff Bierezov ;
15960: LD_ADDR_VAR 0 3
15964: PUSH
15965: LD_VAR 0 3
15969: PUSH
15970: LD_EXP 45
15974: DIFF
15975: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
15976: LD_EXP 45
15980: PPUSH
15981: LD_INT 6
15983: PPUSH
15984: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
15988: LD_EXP 45
15992: PPUSH
15993: LD_INT 235
15995: PPUSH
15996: LD_INT 60
15998: PPUSH
15999: CALL_OW 111
// AddComHold ( Bierezov ) ;
16003: LD_EXP 45
16007: PPUSH
16008: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16012: LD_EXP 45
16016: PPUSH
16017: LD_INT 350
16019: PPUSH
16020: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16024: LD_EXP 45
16028: PPUSH
16029: LD_INT 198
16031: PPUSH
16032: LD_INT 28
16034: PPUSH
16035: CALL_OW 171
// AddComHold ( Bierezov ) ;
16039: LD_EXP 45
16043: PPUSH
16044: CALL_OW 200
// end ; end ; end_of_file
16048: PPOPN 3
16050: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16051: LD_EXP 53
16055: PUSH
16056: LD_EXP 31
16060: NOT
16061: AND
16062: PUSH
16063: LD_EXP 32
16067: NOT
16068: AND
16069: IFFALSE 16519
16071: GO 16073
16073: DISABLE
16074: LD_INT 0
16076: PPUSH
16077: PPUSH
16078: PPUSH
16079: PPUSH
// begin enable ;
16080: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16081: LD_ADDR_VAR 0 4
16085: PUSH
16086: LD_INT 81
16088: PUSH
16089: LD_INT 3
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PPUSH
16096: CALL_OW 69
16100: ST_TO_ADDR
// for i = 1 to ru_patrol do
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: DOUBLE
16107: LD_INT 1
16109: DEC
16110: ST_TO_ADDR
16111: LD_EXP 53
16115: PUSH
16116: FOR_TO
16117: IFFALSE 16517
// begin un := ru_patrol [ i ] ;
16119: LD_ADDR_VAR 0 1
16123: PUSH
16124: LD_EXP 53
16128: PUSH
16129: LD_VAR 0 2
16133: ARRAY
16134: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16135: LD_VAR 0 1
16139: PPUSH
16140: LD_INT 13
16142: PPUSH
16143: CALL_OW 308
16147: IFFALSE 16252
// begin if not ru_alert then
16149: LD_EXP 60
16153: NOT
16154: IFFALSE 16164
// ru_alert := true ;
16156: LD_ADDR_EXP 60
16160: PUSH
16161: LD_INT 1
16163: ST_TO_ADDR
// if not See ( 1 , un ) then
16164: LD_INT 1
16166: PPUSH
16167: LD_VAR 0 1
16171: PPUSH
16172: CALL_OW 292
16176: NOT
16177: IFFALSE 16191
// SetLives ( un , 1000 ) ;
16179: LD_VAR 0 1
16183: PPUSH
16184: LD_INT 1000
16186: PPUSH
16187: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16191: LD_ADDR_EXP 53
16195: PUSH
16196: LD_EXP 53
16200: PUSH
16201: LD_VAR 0 1
16205: DIFF
16206: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16207: LD_VAR 0 1
16211: PPUSH
16212: LD_INT 22
16214: PUSH
16215: LD_INT 3
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PUSH
16222: LD_INT 30
16224: PUSH
16225: LD_INT 4
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PPUSH
16236: CALL_OW 69
16240: PPUSH
16241: CALL 1062 0 1
16245: PPUSH
16246: CALL_OW 120
// continue ;
16250: GO 16116
// end ; if IsOk ( un ) and not HasTask ( un ) then
16252: LD_VAR 0 1
16256: PPUSH
16257: CALL_OW 302
16261: PUSH
16262: LD_VAR 0 1
16266: PPUSH
16267: CALL_OW 314
16271: NOT
16272: AND
16273: IFFALSE 16366
// begin for j = 1 to ru_firepoints_south [ i ] do
16275: LD_ADDR_VAR 0 3
16279: PUSH
16280: DOUBLE
16281: LD_INT 1
16283: DEC
16284: ST_TO_ADDR
16285: LD_EXP 59
16289: PUSH
16290: LD_VAR 0 2
16294: ARRAY
16295: PUSH
16296: FOR_TO
16297: IFFALSE 16364
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16299: LD_VAR 0 1
16303: PPUSH
16304: LD_EXP 59
16308: PUSH
16309: LD_VAR 0 2
16313: ARRAY
16314: PUSH
16315: LD_VAR 0 3
16319: ARRAY
16320: PUSH
16321: LD_INT 1
16323: ARRAY
16324: PPUSH
16325: LD_EXP 59
16329: PUSH
16330: LD_VAR 0 2
16334: ARRAY
16335: PUSH
16336: LD_VAR 0 3
16340: ARRAY
16341: PUSH
16342: LD_INT 2
16344: ARRAY
16345: PPUSH
16346: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16350: LD_VAR 0 1
16354: PPUSH
16355: LD_INT 70
16357: PPUSH
16358: CALL_OW 202
// end ;
16362: GO 16296
16364: POP
16365: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16366: LD_VAR 0 1
16370: PPUSH
16371: CALL_OW 256
16375: PUSH
16376: LD_INT 700
16378: LESS
16379: PUSH
16380: LD_VAR 0 1
16384: PPUSH
16385: LD_INT 13
16387: PPUSH
16388: CALL_OW 308
16392: NOT
16393: AND
16394: IFFALSE 16446
// begin ComMoveToArea ( un , retreatArea ) ;
16396: LD_VAR 0 1
16400: PPUSH
16401: LD_INT 13
16403: PPUSH
16404: CALL_OW 113
// if not ru_alert_xy then
16408: LD_EXP 61
16412: NOT
16413: IFFALSE 16444
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16415: LD_ADDR_EXP 61
16419: PUSH
16420: LD_VAR 0 1
16424: PPUSH
16425: CALL_OW 250
16429: PUSH
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 251
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: ST_TO_ADDR
// end else
16444: GO 16515
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16446: LD_VAR 0 1
16450: PPUSH
16451: LD_VAR 0 4
16455: PPUSH
16456: LD_VAR 0 1
16460: PPUSH
16461: CALL_OW 74
16465: PPUSH
16466: CALL_OW 296
16470: PUSH
16471: LD_INT 9
16473: LESS
16474: PUSH
16475: LD_VAR 0 1
16479: PPUSH
16480: CALL_OW 256
16484: PUSH
16485: LD_INT 500
16487: GREATER
16488: AND
16489: IFFALSE 16515
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
16491: LD_VAR 0 1
16495: PPUSH
16496: LD_VAR 0 4
16500: PPUSH
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 74
16510: PPUSH
16511: CALL_OW 115
// end ;
16515: GO 16116
16517: POP
16518: POP
// end ;
16519: PPOPN 4
16521: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
16522: LD_EXP 60
16526: PUSH
16527: LD_EXP 61
16531: AND
16532: PUSH
16533: LD_EXP 31
16537: NOT
16538: AND
16539: PUSH
16540: LD_EXP 32
16544: NOT
16545: AND
16546: IFFALSE 16756
16548: GO 16550
16550: DISABLE
16551: LD_INT 0
16553: PPUSH
16554: PPUSH
// begin enable ;
16555: ENABLE
// if not ru_vehicles then
16556: LD_EXP 56
16560: NOT
16561: IFFALSE 16565
// exit ;
16563: GO 16756
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16565: LD_ADDR_VAR 0 2
16569: PUSH
16570: LD_INT 81
16572: PUSH
16573: LD_INT 3
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PPUSH
16580: CALL_OW 69
16584: ST_TO_ADDR
// if ru_vehicles then
16585: LD_EXP 56
16589: IFFALSE 16756
// begin for i in ru_vehicles do
16591: LD_ADDR_VAR 0 1
16595: PUSH
16596: LD_EXP 56
16600: PUSH
16601: FOR_IN
16602: IFFALSE 16754
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
16604: LD_VAR 0 1
16608: PPUSH
16609: CALL_OW 302
16613: PUSH
16614: LD_VAR 0 1
16618: PPUSH
16619: LD_VAR 0 2
16623: PPUSH
16624: LD_VAR 0 1
16628: PPUSH
16629: CALL_OW 74
16633: PPUSH
16634: CALL_OW 296
16638: PUSH
16639: LD_INT 9
16641: LESS
16642: AND
16643: IFFALSE 16669
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
16645: LD_VAR 0 1
16649: PPUSH
16650: LD_VAR 0 2
16654: PPUSH
16655: LD_VAR 0 1
16659: PPUSH
16660: CALL_OW 74
16664: PPUSH
16665: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
16669: LD_VAR 0 1
16673: PPUSH
16674: CALL_OW 314
16678: NOT
16679: PUSH
16680: LD_VAR 0 1
16684: PPUSH
16685: CALL_OW 302
16689: AND
16690: PUSH
16691: LD_VAR 0 1
16695: PPUSH
16696: LD_EXP 61
16700: PUSH
16701: LD_INT 1
16703: ARRAY
16704: PPUSH
16705: LD_EXP 61
16709: PUSH
16710: LD_INT 2
16712: ARRAY
16713: PPUSH
16714: CALL_OW 297
16718: PUSH
16719: LD_INT 10
16721: GREATER
16722: AND
16723: IFFALSE 16752
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
16725: LD_VAR 0 1
16729: PPUSH
16730: LD_EXP 61
16734: PUSH
16735: LD_INT 1
16737: ARRAY
16738: PPUSH
16739: LD_EXP 61
16743: PUSH
16744: LD_INT 2
16746: ARRAY
16747: PPUSH
16748: CALL_OW 114
// end ;
16752: GO 16601
16754: POP
16755: POP
// end ; end ;
16756: PPOPN 2
16758: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
16759: LD_EXP 61
16763: PUSH
16764: LD_EXP 60
16768: AND
16769: PUSH
16770: LD_INT 3
16772: PPUSH
16773: CALL_OW 463
16777: NOT
16778: AND
16779: PUSH
16780: LD_EXP 31
16784: NOT
16785: AND
16786: PUSH
16787: LD_EXP 32
16791: NOT
16792: AND
16793: IFFALSE 16888
16795: GO 16797
16797: DISABLE
16798: LD_INT 0
16800: PPUSH
// begin enable ;
16801: ENABLE
// ru_alert_xy := false ;
16802: LD_ADDR_EXP 61
16806: PUSH
16807: LD_INT 0
16809: ST_TO_ADDR
// ru_alert := false ;
16810: LD_ADDR_EXP 60
16814: PUSH
16815: LD_INT 0
16817: ST_TO_ADDR
// if ru_vehicles then
16818: LD_EXP 56
16822: IFFALSE 16888
// for i in ru_vehicles do
16824: LD_ADDR_VAR 0 1
16828: PUSH
16829: LD_EXP 56
16833: PUSH
16834: FOR_IN
16835: IFFALSE 16886
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
16837: LD_VAR 0 1
16841: PPUSH
16842: CALL_OW 302
16846: PUSH
16847: LD_VAR 0 1
16851: PPUSH
16852: LD_INT 89
16854: PPUSH
16855: LD_INT 36
16857: PPUSH
16858: CALL_OW 297
16862: PUSH
16863: LD_INT 10
16865: GREATER
16866: AND
16867: IFFALSE 16884
// ComMoveXY ( i , 89 , 36 ) ;
16869: LD_VAR 0 1
16873: PPUSH
16874: LD_INT 89
16876: PPUSH
16877: LD_INT 36
16879: PPUSH
16880: CALL_OW 111
16884: GO 16834
16886: POP
16887: POP
// end ;
16888: PPOPN 1
16890: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
16891: LD_EXP 55
16895: PUSH
16896: LD_EXP 31
16900: NOT
16901: AND
16902: PUSH
16903: LD_EXP 32
16907: NOT
16908: AND
16909: IFFALSE 17193
16911: GO 16913
16913: DISABLE
16914: LD_INT 0
16916: PPUSH
16917: PPUSH
16918: PPUSH
// begin enable ;
16919: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16920: LD_ADDR_VAR 0 3
16924: PUSH
16925: LD_INT 81
16927: PUSH
16928: LD_INT 3
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PPUSH
16935: CALL_OW 69
16939: ST_TO_ADDR
// for i = 1 to ru_forest do
16940: LD_ADDR_VAR 0 1
16944: PUSH
16945: DOUBLE
16946: LD_INT 1
16948: DEC
16949: ST_TO_ADDR
16950: LD_EXP 55
16954: PUSH
16955: FOR_TO
16956: IFFALSE 17191
// begin un := ru_forest [ i ] ;
16958: LD_ADDR_VAR 0 2
16962: PUSH
16963: LD_EXP 55
16967: PUSH
16968: LD_VAR 0 1
16972: ARRAY
16973: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16974: LD_VAR 0 2
16978: PPUSH
16979: LD_INT 13
16981: PPUSH
16982: CALL_OW 308
16986: IFFALSE 17076
// begin if not See ( 1 , un ) then
16988: LD_INT 1
16990: PPUSH
16991: LD_VAR 0 2
16995: PPUSH
16996: CALL_OW 292
17000: NOT
17001: IFFALSE 17015
// SetLives ( un , 1000 ) ;
17003: LD_VAR 0 2
17007: PPUSH
17008: LD_INT 1000
17010: PPUSH
17011: CALL_OW 234
// ru_forest := ru_forest diff un ;
17015: LD_ADDR_EXP 55
17019: PUSH
17020: LD_EXP 55
17024: PUSH
17025: LD_VAR 0 2
17029: DIFF
17030: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17031: LD_VAR 0 2
17035: PPUSH
17036: LD_INT 22
17038: PUSH
17039: LD_INT 3
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 30
17048: PUSH
17049: LD_INT 4
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PPUSH
17060: CALL_OW 69
17064: PPUSH
17065: CALL 1062 0 1
17069: PPUSH
17070: CALL_OW 120
// continue ;
17074: GO 16955
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17076: LD_VAR 0 2
17080: PPUSH
17081: CALL_OW 256
17085: PUSH
17086: LD_INT 700
17088: LESS
17089: PUSH
17090: LD_VAR 0 2
17094: PPUSH
17095: LD_INT 13
17097: PPUSH
17098: CALL_OW 308
17102: NOT
17103: AND
17104: IFFALSE 17120
// ComMoveToArea ( un , retreatArea ) else
17106: LD_VAR 0 2
17110: PPUSH
17111: LD_INT 13
17113: PPUSH
17114: CALL_OW 113
17118: GO 17189
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17120: LD_VAR 0 2
17124: PPUSH
17125: LD_VAR 0 3
17129: PPUSH
17130: LD_VAR 0 2
17134: PPUSH
17135: CALL_OW 74
17139: PPUSH
17140: CALL_OW 296
17144: PUSH
17145: LD_INT 9
17147: LESS
17148: PUSH
17149: LD_VAR 0 2
17153: PPUSH
17154: CALL_OW 256
17158: PUSH
17159: LD_INT 500
17161: GREATER
17162: AND
17163: IFFALSE 17189
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17165: LD_VAR 0 2
17169: PPUSH
17170: LD_VAR 0 3
17174: PPUSH
17175: LD_VAR 0 2
17179: PPUSH
17180: CALL_OW 74
17184: PPUSH
17185: CALL_OW 115
// end ;
17189: GO 16955
17191: POP
17192: POP
// end ;
17193: PPOPN 3
17195: END
// every 0 0$10 trigger not send_attack_on_cornel do var i , filter ;
17196: LD_EXP 32
17200: NOT
17201: IFFALSE 17322
17203: GO 17205
17205: DISABLE
17206: LD_INT 0
17208: PPUSH
17209: PPUSH
// begin enable ;
17210: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
17211: LD_ADDR_VAR 0 2
17215: PUSH
17216: LD_INT 22
17218: PUSH
17219: LD_INT 3
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 21
17228: PUSH
17229: LD_INT 3
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PPUSH
17240: CALL_OW 69
17244: ST_TO_ADDR
// if filter then
17245: LD_VAR 0 2
17249: IFFALSE 17322
// for i in filter do
17251: LD_ADDR_VAR 0 1
17255: PUSH
17256: LD_VAR 0 2
17260: PUSH
17261: FOR_IN
17262: IFFALSE 17320
// if GetLives ( i ) < 990 then
17264: LD_VAR 0 1
17268: PPUSH
17269: CALL_OW 256
17273: PUSH
17274: LD_INT 990
17276: LESS
17277: IFFALSE 17318
// begin ru_alert := true ;
17279: LD_ADDR_EXP 60
17283: PUSH
17284: LD_INT 1
17286: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17287: LD_ADDR_EXP 61
17291: PUSH
17292: LD_VAR 0 1
17296: PPUSH
17297: CALL_OW 250
17301: PUSH
17302: LD_VAR 0 1
17306: PPUSH
17307: CALL_OW 251
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: ST_TO_ADDR
// break ;
17316: GO 17320
// end ;
17318: GO 17261
17320: POP
17321: POP
// end ;
17322: PPOPN 2
17324: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17325: LD_EXP 31
17329: IFFALSE 17478
17331: GO 17333
17333: DISABLE
17334: LD_INT 0
17336: PPUSH
17337: PPUSH
17338: PPUSH
17339: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17340: LD_ADDR_VAR 0 4
17344: PUSH
17345: LD_EXP 56
17349: PUSH
17350: LD_EXP 55
17354: ADD
17355: PUSH
17356: LD_EXP 53
17360: ADD
17361: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17362: LD_ADDR_VAR 0 3
17366: PUSH
17367: LD_INT 3
17369: PPUSH
17370: LD_INT 81
17372: PUSH
17373: LD_INT 3
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PPUSH
17380: CALL_OW 70
17384: ST_TO_ADDR
// if filter and enemy then
17385: LD_VAR 0 4
17389: PUSH
17390: LD_VAR 0 3
17394: AND
17395: IFFALSE 17478
// repeat wait ( 0 0$01 ) ;
17397: LD_INT 35
17399: PPUSH
17400: CALL_OW 67
// for i in filter do
17404: LD_ADDR_VAR 0 1
17408: PUSH
17409: LD_VAR 0 4
17413: PUSH
17414: FOR_IN
17415: IFFALSE 17443
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17417: LD_VAR 0 1
17421: PPUSH
17422: LD_VAR 0 3
17426: PPUSH
17427: LD_VAR 0 1
17431: PPUSH
17432: CALL_OW 74
17436: PPUSH
17437: CALL_OW 115
// end ;
17441: GO 17414
17443: POP
17444: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
17445: LD_INT 3
17447: PPUSH
17448: LD_INT 81
17450: PUSH
17451: LD_INT 3
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PPUSH
17458: CALL_OW 70
17462: PUSH
17463: LD_INT 0
17465: EQUAL
17466: PUSH
17467: LD_VAR 0 4
17471: PUSH
17472: LD_INT 0
17474: EQUAL
17475: OR
17476: IFFALSE 17397
// end ;
17478: PPOPN 4
17480: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
17481: LD_EXP 26
17485: PUSH
17486: LD_INT 22
17488: PUSH
17489: LD_INT 4
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 30
17498: PUSH
17499: LD_INT 4
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: LD_INT 3
17508: PUSH
17509: LD_INT 57
17511: PUSH
17512: EMPTY
17513: LIST
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: PPUSH
17524: CALL_OW 69
17528: AND
17529: IFFALSE 17578
17531: GO 17533
17533: DISABLE
17534: LD_INT 0
17536: PPUSH
// begin if not ru_cornel_attack then
17537: LD_EXP 58
17541: NOT
17542: IFFALSE 17546
// exit ;
17544: GO 17578
// for i in ru_cornel_attack do
17546: LD_ADDR_VAR 0 1
17550: PUSH
17551: LD_EXP 58
17555: PUSH
17556: FOR_IN
17557: IFFALSE 17576
// ComAgressiveMove ( i , 258 , 119 ) ;
17559: LD_VAR 0 1
17563: PPUSH
17564: LD_INT 258
17566: PPUSH
17567: LD_INT 119
17569: PPUSH
17570: CALL_OW 114
17574: GO 17556
17576: POP
17577: POP
// end ; end_of_file
17578: PPOPN 1
17580: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
17581: LD_EXP 5
17585: PUSH
17586: LD_EXP 9
17590: NOT
17591: AND
17592: PUSH
17593: LD_EXP 20
17597: AND
17598: IFFALSE 17710
17600: GO 17602
17602: DISABLE
17603: LD_INT 0
17605: PPUSH
// begin enable ;
17606: ENABLE
// crates_counter := crates_counter - 50 ;
17607: LD_ADDR_EXP 20
17611: PUSH
17612: LD_EXP 20
17616: PUSH
17617: LD_INT 50
17619: MINUS
17620: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
17621: LD_INT 8
17623: PPUSH
17624: LD_INT 2
17626: PPUSH
17627: LD_INT 5
17629: PPUSH
17630: CALL_OW 12
17634: PPUSH
17635: LD_INT 1
17637: PPUSH
17638: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
17642: LD_INT 1785
17644: PPUSH
17645: LD_INT 2345
17647: PPUSH
17648: CALL_OW 12
17652: PPUSH
17653: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
17657: LD_ADDR_VAR 0 1
17661: PUSH
17662: LD_INT 1
17664: PPUSH
17665: LD_OWVAR 67
17669: PUSH
17670: LD_INT 2
17672: PLUS
17673: PPUSH
17674: CALL_OW 12
17678: ST_TO_ADDR
// if r < 3 then
17679: LD_VAR 0 1
17683: PUSH
17684: LD_INT 3
17686: LESS
17687: IFFALSE 17710
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
17689: LD_INT 4
17691: PPUSH
17692: LD_INT 1
17694: PPUSH
17695: LD_INT 5
17697: PPUSH
17698: CALL_OW 12
17702: PPUSH
17703: LD_INT 1
17705: PPUSH
17706: CALL_OW 55
// end ;
17710: PPOPN 1
17712: END
// every 0 0$01 trigger cornel_active do
17713: LD_EXP 8
17717: IFFALSE 17806
17719: GO 17721
17721: DISABLE
// begin Wait ( 0 0$03 ) ;
17722: LD_INT 105
17724: PPUSH
17725: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17729: LD_INT 2
17731: PPUSH
17732: LD_INT 5
17734: PPUSH
17735: CALL_OW 12
17739: PPUSH
17740: LD_INT 10
17742: PPUSH
17743: LD_INT 1
17745: PPUSH
17746: CALL_OW 55
// Wait ( 0 0$13 ) ;
17750: LD_INT 455
17752: PPUSH
17753: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17757: LD_INT 2
17759: PPUSH
17760: LD_INT 5
17762: PPUSH
17763: CALL_OW 12
17767: PPUSH
17768: LD_INT 10
17770: PPUSH
17771: LD_INT 1
17773: PPUSH
17774: CALL_OW 55
// Wait ( 0 0$16 ) ;
17778: LD_INT 560
17780: PPUSH
17781: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17785: LD_INT 2
17787: PPUSH
17788: LD_INT 5
17790: PPUSH
17791: CALL_OW 12
17795: PPUSH
17796: LD_INT 10
17798: PPUSH
17799: LD_INT 1
17801: PPUSH
17802: CALL_OW 55
// end ; end_of_file
17806: END
// every 0 0$01 trigger cornel_prepared do
17807: LD_EXP 11
17811: IFFALSE 17870
17813: GO 17815
17815: DISABLE
// begin enable ;
17816: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
17817: LD_ADDR_OWVAR 47
17821: PUSH
17822: LD_STRING #Am03-1
17824: PUSH
17825: LD_EXP 10
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: ST_TO_ADDR
// cornel_counter := Count ( cornel_counter , - ) ;
17834: LD_ADDR_EXP 10
17838: PUSH
17839: LD_EXP 10
17843: PPUSH
17844: LD_STRING -
17846: PPUSH
17847: CALL 1132 0 2
17851: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
17852: LD_EXP 10
17856: PUSH
17857: LD_INT 0
17859: EQUAL
17860: IFFALSE 17870
// begin Display_Strings := [ ] ;
17862: LD_ADDR_OWVAR 47
17866: PUSH
17867: EMPTY
17868: ST_TO_ADDR
// disable ;
17869: DISABLE
// end ; end ;
17870: END
// every 0 0$01 trigger debug and debug_strings do
17871: LD_EXP 1
17875: PUSH
17876: LD_OWVAR 48
17880: AND
17881: IFFALSE 17897
17883: GO 17885
17885: DISABLE
// begin enable ;
17886: ENABLE
// Display_Strings := debug_strings ;
17887: LD_ADDR_OWVAR 47
17891: PUSH
17892: LD_OWVAR 48
17896: ST_TO_ADDR
// end ; end_of_file
17897: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 1 and not solar_builded then
17898: LD_VAR 0 1
17902: PPUSH
17903: CALL_OW 255
17907: PUSH
17908: LD_INT 1
17910: EQUAL
17911: PUSH
17912: LD_EXP 14
17916: NOT
17917: AND
17918: IFFALSE 17928
// solar_builded := true ;
17920: LD_ADDR_EXP 14
17924: PUSH
17925: LD_INT 1
17927: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
17928: LD_VAR 0 1
17932: PPUSH
17933: CALL_OW 255
17937: PUSH
17938: LD_INT 1
17940: EQUAL
17941: PUSH
17942: LD_EXP 29
17946: AND
17947: IFFALSE 17980
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ;
17949: LD_ADDR_EXP 29
17953: PUSH
17954: LD_EXP 29
17958: PUSH
17959: LD_INT 1750
17961: PUSH
17962: LD_INT 1400
17964: PUSH
17965: LD_INT 1225
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: LIST
17972: PUSH
17973: LD_OWVAR 67
17977: ARRAY
17978: PLUS
17979: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
17980: LD_VAR 0 1
17984: PPUSH
17985: CALL_OW 255
17989: PUSH
17990: LD_INT 3
17992: EQUAL
17993: IFFALSE 18011
// ru_vehicles := ru_vehicles ^ veh ;
17995: LD_ADDR_EXP 56
17999: PUSH
18000: LD_EXP 56
18004: PUSH
18005: LD_VAR 0 1
18009: ADD
18010: ST_TO_ADDR
// end ;
18011: PPOPN 2
18013: END
// on UnitDestroyed ( un ) do begin if un in ru_patrol then
18014: LD_VAR 0 1
18018: PUSH
18019: LD_EXP 53
18023: IN
18024: IFFALSE 18042
// ru_patrol := ru_patrol diff un ;
18026: LD_ADDR_EXP 53
18030: PUSH
18031: LD_EXP 53
18035: PUSH
18036: LD_VAR 0 1
18040: DIFF
18041: ST_TO_ADDR
// if un in ru_forest then
18042: LD_VAR 0 1
18046: PUSH
18047: LD_EXP 55
18051: IN
18052: IFFALSE 18070
// ru_forest := ru_forest diff un ;
18054: LD_ADDR_EXP 55
18058: PUSH
18059: LD_EXP 55
18063: PUSH
18064: LD_VAR 0 1
18068: DIFF
18069: ST_TO_ADDR
// if un in ru_vehicles then
18070: LD_VAR 0 1
18074: PUSH
18075: LD_EXP 56
18079: IN
18080: IFFALSE 18186
// begin ru_vehicles := ru_vehicles diff un ;
18082: LD_ADDR_EXP 56
18086: PUSH
18087: LD_EXP 56
18091: PUSH
18092: LD_VAR 0 1
18096: DIFF
18097: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18098: LD_ADDR_EXP 57
18102: PUSH
18103: LD_EXP 57
18107: PUSH
18108: LD_VAR 0 1
18112: PPUSH
18113: CALL_OW 265
18117: PUSH
18118: LD_VAR 0 1
18122: PPUSH
18123: CALL_OW 262
18127: PUSH
18128: LD_VAR 0 1
18132: PPUSH
18133: CALL_OW 263
18137: PUSH
18138: LD_VAR 0 1
18142: PPUSH
18143: CALL_OW 264
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: ADD
18154: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18155: LD_ADDR_EXP 13
18159: PUSH
18160: LD_EXP 13
18164: PUSH
18165: LD_INT 1
18167: PLUS
18168: ST_TO_ADDR
// if ach_counter = 10 then
18169: LD_EXP 13
18173: PUSH
18174: LD_INT 10
18176: EQUAL
18177: IFFALSE 18186
// SetAchievement ( ACH_FAUST ) ;
18179: LD_STRING ACH_FAUST
18181: PPUSH
18182: CALL_OW 543
// end ; if un = Pokryshkin then
18186: LD_VAR 0 1
18190: PUSH
18191: LD_EXP 52
18195: EQUAL
18196: IFFALSE 18205
// SetAchievement ( ACH_POKR ) ;
18198: LD_STRING ACH_POKR
18200: PPUSH
18201: CALL_OW 543
// if un = JMM then
18205: LD_VAR 0 1
18209: PUSH
18210: LD_EXP 37
18214: EQUAL
18215: IFFALSE 18224
// YouLost ( 0 ) ;
18217: LD_STRING 0
18219: PPUSH
18220: CALL_OW 104
// if un = us_dep_west then
18224: LD_VAR 0 1
18228: PUSH
18229: LD_INT 1
18231: EQUAL
18232: IFFALSE 18241
// YouLost ( 2 ) ;
18234: LD_STRING 2
18236: PPUSH
18237: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18241: LD_VAR 0 1
18245: PPUSH
18246: CALL_OW 255
18250: PUSH
18251: LD_INT 8
18253: EQUAL
18254: PUSH
18255: LD_EXP 5
18259: NOT
18260: AND
18261: IFFALSE 18270
// YouLost ( 4 ) ;
18263: LD_STRING 4
18265: PPUSH
18266: CALL_OW 104
// if un in jmm_units then
18270: LD_VAR 0 1
18274: PUSH
18275: LD_EXP 4
18279: IN
18280: IFFALSE 18296
// lose_counter := lose_counter + 1 ;
18282: LD_ADDR_EXP 34
18286: PUSH
18287: LD_EXP 34
18291: PUSH
18292: LD_INT 1
18294: PLUS
18295: ST_TO_ADDR
// end ;
18296: PPOPN 1
18298: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18299: LD_INT 0
18301: PPUSH
18302: PPUSH
// begin if GetSide ( driver ) = 3 then
18303: LD_VAR 0 1
18307: PPUSH
18308: CALL_OW 255
18312: PUSH
18313: LD_INT 3
18315: EQUAL
18316: IFFALSE 18394
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18318: LD_ADDR_VAR 0 6
18322: PUSH
18323: LD_INT 22
18325: PUSH
18326: LD_INT 3
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 30
18335: PUSH
18336: LD_INT 3
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PPUSH
18347: CALL_OW 69
18351: PPUSH
18352: CALL 1062 0 1
18356: ST_TO_ADDR
// if place then
18357: LD_VAR 0 6
18361: IFFALSE 18379
// ComEnterUnit ( driver , place ) else
18363: LD_VAR 0 1
18367: PPUSH
18368: LD_VAR 0 6
18372: PPUSH
18373: CALL_OW 120
18377: GO 18394
// ComMoveXY ( driver , 70 , 22 ) ;
18379: LD_VAR 0 1
18383: PPUSH
18384: LD_INT 70
18386: PPUSH
18387: LD_INT 22
18389: PPUSH
18390: CALL_OW 111
// end ; end ;
18394: PPOPN 6
18396: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
18397: LD_VAR 0 1
18401: PUSH
18402: LD_INT 1
18404: EQUAL
18405: PUSH
18406: LD_VAR 0 2
18410: PUSH
18411: LD_INT 4
18413: EQUAL
18414: PUSH
18415: LD_VAR 0 2
18419: PUSH
18420: LD_INT 8
18422: EQUAL
18423: PUSH
18424: LD_EXP 5
18428: NOT
18429: AND
18430: OR
18431: AND
18432: IFFALSE 18441
// YouLost ( 5 ) ;
18434: LD_STRING 5
18436: PPUSH
18437: CALL_OW 104
// end ;
18441: PPOPN 2
18443: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
18444: LD_EXP 36
18448: PUSH
18449: LD_INT 22
18451: PUSH
18452: LD_INT 1
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 21
18461: PUSH
18462: LD_INT 1
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PPUSH
18473: CALL_OW 69
18477: PUSH
18478: LD_INT 22
18480: PUSH
18481: LD_INT 8
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 21
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PPUSH
18502: CALL_OW 69
18506: ADD
18507: PLUS
18508: PUSH
18509: LD_INT 5
18511: LESS
18512: IFFALSE 18524
18514: GO 18516
18516: DISABLE
// YouLost ( 1 ) ;
18517: LD_STRING 1
18519: PPUSH
18520: CALL_OW 104
18524: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
18525: LD_INT 1
18527: PPUSH
18528: CALL_OW 255
18532: PUSH
18533: LD_INT 3
18535: EQUAL
18536: IFFALSE 18548
18538: GO 18540
18540: DISABLE
// YouLost ( 3 ) ; end_of_file
18541: LD_STRING 3
18543: PPUSH
18544: CALL_OW 104
18548: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
18549: GO 18551
18551: DISABLE
// begin ru_radar := 98 ;
18552: LD_ADDR_EXP 62
18556: PUSH
18557: LD_INT 98
18559: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18560: LD_ADDR_EXP 63
18564: PUSH
18565: LD_INT 89
18567: ST_TO_ADDR
// us_hack := 99 ;
18568: LD_ADDR_EXP 64
18572: PUSH
18573: LD_INT 99
18575: ST_TO_ADDR
// us_artillery := 97 ;
18576: LD_ADDR_EXP 65
18580: PUSH
18581: LD_INT 97
18583: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18584: LD_ADDR_EXP 66
18588: PUSH
18589: LD_INT 91
18591: ST_TO_ADDR
// end ; end_of_file end_of_file
18592: END
// export StreamModeActive , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu ; every 0 0$1 do
18593: GO 18595
18595: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18596: LD_STRING initStreamRollete();
18598: PPUSH
18599: CALL_OW 559
// InitStreamMode ;
18603: CALL 18608 0 0
// end ;
18607: END
// function InitStreamMode ; begin
18608: LD_INT 0
18610: PPUSH
// streamModeActive := false ;
18611: LD_ADDR_EXP 67
18615: PUSH
18616: LD_INT 0
18618: ST_TO_ADDR
// sRocket := false ;
18619: LD_ADDR_EXP 70
18623: PUSH
18624: LD_INT 0
18626: ST_TO_ADDR
// sSpeed := false ;
18627: LD_ADDR_EXP 69
18631: PUSH
18632: LD_INT 0
18634: ST_TO_ADDR
// sEngine := false ;
18635: LD_ADDR_EXP 71
18639: PUSH
18640: LD_INT 0
18642: ST_TO_ADDR
// sSpec := false ;
18643: LD_ADDR_EXP 68
18647: PUSH
18648: LD_INT 0
18650: ST_TO_ADDR
// sLevel := false ;
18651: LD_ADDR_EXP 72
18655: PUSH
18656: LD_INT 0
18658: ST_TO_ADDR
// sArmoury := false ;
18659: LD_ADDR_EXP 73
18663: PUSH
18664: LD_INT 0
18666: ST_TO_ADDR
// sRadar := false ;
18667: LD_ADDR_EXP 74
18671: PUSH
18672: LD_INT 0
18674: ST_TO_ADDR
// sBunker := false ;
18675: LD_ADDR_EXP 75
18679: PUSH
18680: LD_INT 0
18682: ST_TO_ADDR
// sHack := false ;
18683: LD_ADDR_EXP 76
18687: PUSH
18688: LD_INT 0
18690: ST_TO_ADDR
// sFire := false ;
18691: LD_ADDR_EXP 77
18695: PUSH
18696: LD_INT 0
18698: ST_TO_ADDR
// sRefresh := false ;
18699: LD_ADDR_EXP 78
18703: PUSH
18704: LD_INT 0
18706: ST_TO_ADDR
// sExp := false ;
18707: LD_ADDR_EXP 79
18711: PUSH
18712: LD_INT 0
18714: ST_TO_ADDR
// sDepot := false ;
18715: LD_ADDR_EXP 80
18719: PUSH
18720: LD_INT 0
18722: ST_TO_ADDR
// sFlag := false ;
18723: LD_ADDR_EXP 81
18727: PUSH
18728: LD_INT 0
18730: ST_TO_ADDR
// sKamikadze := false ;
18731: LD_ADDR_EXP 89
18735: PUSH
18736: LD_INT 0
18738: ST_TO_ADDR
// sTroll := false ;
18739: LD_ADDR_EXP 90
18743: PUSH
18744: LD_INT 0
18746: ST_TO_ADDR
// sSlow := false ;
18747: LD_ADDR_EXP 91
18751: PUSH
18752: LD_INT 0
18754: ST_TO_ADDR
// sLack := false ;
18755: LD_ADDR_EXP 92
18759: PUSH
18760: LD_INT 0
18762: ST_TO_ADDR
// sTank := false ;
18763: LD_ADDR_EXP 94
18767: PUSH
18768: LD_INT 0
18770: ST_TO_ADDR
// sRemote := false ;
18771: LD_ADDR_EXP 95
18775: PUSH
18776: LD_INT 0
18778: ST_TO_ADDR
// sPowell := false ;
18779: LD_ADDR_EXP 96
18783: PUSH
18784: LD_INT 0
18786: ST_TO_ADDR
// sTeleport := false ;
18787: LD_ADDR_EXP 99
18791: PUSH
18792: LD_INT 0
18794: ST_TO_ADDR
// sOilTower := false ;
18795: LD_ADDR_EXP 101
18799: PUSH
18800: LD_INT 0
18802: ST_TO_ADDR
// sShovel := false ;
18803: LD_ADDR_EXP 102
18807: PUSH
18808: LD_INT 0
18810: ST_TO_ADDR
// sSheik := false ;
18811: LD_ADDR_EXP 103
18815: PUSH
18816: LD_INT 0
18818: ST_TO_ADDR
// sSold := false ;
18819: LD_ADDR_EXP 82
18823: PUSH
18824: LD_INT 0
18826: ST_TO_ADDR
// sDiff := false ;
18827: LD_ADDR_EXP 83
18831: PUSH
18832: LD_INT 0
18834: ST_TO_ADDR
// sFog := false ;
18835: LD_ADDR_EXP 86
18839: PUSH
18840: LD_INT 0
18842: ST_TO_ADDR
// sReset := false ;
18843: LD_ADDR_EXP 87
18847: PUSH
18848: LD_INT 0
18850: ST_TO_ADDR
// sSun := false ;
18851: LD_ADDR_EXP 88
18855: PUSH
18856: LD_INT 0
18858: ST_TO_ADDR
// sTiger := false ;
18859: LD_ADDR_EXP 84
18863: PUSH
18864: LD_INT 0
18866: ST_TO_ADDR
// sBomb := false ;
18867: LD_ADDR_EXP 85
18871: PUSH
18872: LD_INT 0
18874: ST_TO_ADDR
// sWound := false ;
18875: LD_ADDR_EXP 93
18879: PUSH
18880: LD_INT 0
18882: ST_TO_ADDR
// sBetray := false ;
18883: LD_ADDR_EXP 97
18887: PUSH
18888: LD_INT 0
18890: ST_TO_ADDR
// sContamin := false ;
18891: LD_ADDR_EXP 98
18895: PUSH
18896: LD_INT 0
18898: ST_TO_ADDR
// sOil := false ;
18899: LD_ADDR_EXP 100
18903: PUSH
18904: LD_INT 0
18906: ST_TO_ADDR
// sStu := false ;
18907: LD_ADDR_EXP 104
18911: PUSH
18912: LD_INT 0
18914: ST_TO_ADDR
// end ;
18915: LD_VAR 0 1
18919: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
18920: LD_VAR 0 2
18924: PUSH
18925: LD_INT 100
18927: EQUAL
18928: IFFALSE 19625
// begin if not StreamModeActive then
18930: LD_EXP 67
18934: NOT
18935: IFFALSE 18945
// StreamModeActive := true ;
18937: LD_ADDR_EXP 67
18941: PUSH
18942: LD_INT 1
18944: ST_TO_ADDR
// if p3 = 0 then
18945: LD_VAR 0 3
18949: PUSH
18950: LD_INT 0
18952: EQUAL
18953: IFFALSE 18959
// InitStreamMode ;
18955: CALL 18608 0 0
// if p3 = 1 then
18959: LD_VAR 0 3
18963: PUSH
18964: LD_INT 1
18966: EQUAL
18967: IFFALSE 18977
// sRocket := true ;
18969: LD_ADDR_EXP 70
18973: PUSH
18974: LD_INT 1
18976: ST_TO_ADDR
// if p3 = 2 then
18977: LD_VAR 0 3
18981: PUSH
18982: LD_INT 2
18984: EQUAL
18985: IFFALSE 18995
// sSpeed := true ;
18987: LD_ADDR_EXP 69
18991: PUSH
18992: LD_INT 1
18994: ST_TO_ADDR
// if p3 = 3 then
18995: LD_VAR 0 3
18999: PUSH
19000: LD_INT 3
19002: EQUAL
19003: IFFALSE 19013
// sEngine := true ;
19005: LD_ADDR_EXP 71
19009: PUSH
19010: LD_INT 1
19012: ST_TO_ADDR
// if p3 = 4 then
19013: LD_VAR 0 3
19017: PUSH
19018: LD_INT 4
19020: EQUAL
19021: IFFALSE 19031
// sSpec := true ;
19023: LD_ADDR_EXP 68
19027: PUSH
19028: LD_INT 1
19030: ST_TO_ADDR
// if p3 = 5 then
19031: LD_VAR 0 3
19035: PUSH
19036: LD_INT 5
19038: EQUAL
19039: IFFALSE 19049
// sLevel := true ;
19041: LD_ADDR_EXP 72
19045: PUSH
19046: LD_INT 1
19048: ST_TO_ADDR
// if p3 = 6 then
19049: LD_VAR 0 3
19053: PUSH
19054: LD_INT 6
19056: EQUAL
19057: IFFALSE 19067
// sArmoury := true ;
19059: LD_ADDR_EXP 73
19063: PUSH
19064: LD_INT 1
19066: ST_TO_ADDR
// if p3 = 7 then
19067: LD_VAR 0 3
19071: PUSH
19072: LD_INT 7
19074: EQUAL
19075: IFFALSE 19085
// sRadar := true ;
19077: LD_ADDR_EXP 74
19081: PUSH
19082: LD_INT 1
19084: ST_TO_ADDR
// if p3 = 8 then
19085: LD_VAR 0 3
19089: PUSH
19090: LD_INT 8
19092: EQUAL
19093: IFFALSE 19103
// sBunker := true ;
19095: LD_ADDR_EXP 75
19099: PUSH
19100: LD_INT 1
19102: ST_TO_ADDR
// if p3 = 9 then
19103: LD_VAR 0 3
19107: PUSH
19108: LD_INT 9
19110: EQUAL
19111: IFFALSE 19121
// sHack := true ;
19113: LD_ADDR_EXP 76
19117: PUSH
19118: LD_INT 1
19120: ST_TO_ADDR
// if p3 = 10 then
19121: LD_VAR 0 3
19125: PUSH
19126: LD_INT 10
19128: EQUAL
19129: IFFALSE 19139
// sFire := true ;
19131: LD_ADDR_EXP 77
19135: PUSH
19136: LD_INT 1
19138: ST_TO_ADDR
// if p3 = 11 then
19139: LD_VAR 0 3
19143: PUSH
19144: LD_INT 11
19146: EQUAL
19147: IFFALSE 19157
// sRefresh := true ;
19149: LD_ADDR_EXP 78
19153: PUSH
19154: LD_INT 1
19156: ST_TO_ADDR
// if p3 = 12 then
19157: LD_VAR 0 3
19161: PUSH
19162: LD_INT 12
19164: EQUAL
19165: IFFALSE 19175
// sExp := true ;
19167: LD_ADDR_EXP 79
19171: PUSH
19172: LD_INT 1
19174: ST_TO_ADDR
// if p3 = 13 then
19175: LD_VAR 0 3
19179: PUSH
19180: LD_INT 13
19182: EQUAL
19183: IFFALSE 19193
// sDepot := true ;
19185: LD_ADDR_EXP 80
19189: PUSH
19190: LD_INT 1
19192: ST_TO_ADDR
// if p3 = 14 then
19193: LD_VAR 0 3
19197: PUSH
19198: LD_INT 14
19200: EQUAL
19201: IFFALSE 19211
// sFlag := true ;
19203: LD_ADDR_EXP 81
19207: PUSH
19208: LD_INT 1
19210: ST_TO_ADDR
// if p3 = 15 then
19211: LD_VAR 0 3
19215: PUSH
19216: LD_INT 15
19218: EQUAL
19219: IFFALSE 19229
// sKamikadze := true ;
19221: LD_ADDR_EXP 89
19225: PUSH
19226: LD_INT 1
19228: ST_TO_ADDR
// if p3 = 16 then
19229: LD_VAR 0 3
19233: PUSH
19234: LD_INT 16
19236: EQUAL
19237: IFFALSE 19247
// sTroll := true ;
19239: LD_ADDR_EXP 90
19243: PUSH
19244: LD_INT 1
19246: ST_TO_ADDR
// if p3 = 17 then
19247: LD_VAR 0 3
19251: PUSH
19252: LD_INT 17
19254: EQUAL
19255: IFFALSE 19265
// sSlow := true ;
19257: LD_ADDR_EXP 91
19261: PUSH
19262: LD_INT 1
19264: ST_TO_ADDR
// if p3 = 18 then
19265: LD_VAR 0 3
19269: PUSH
19270: LD_INT 18
19272: EQUAL
19273: IFFALSE 19283
// sLack := true ;
19275: LD_ADDR_EXP 92
19279: PUSH
19280: LD_INT 1
19282: ST_TO_ADDR
// if p3 = 19 then
19283: LD_VAR 0 3
19287: PUSH
19288: LD_INT 19
19290: EQUAL
19291: IFFALSE 19301
// sTank := true ;
19293: LD_ADDR_EXP 94
19297: PUSH
19298: LD_INT 1
19300: ST_TO_ADDR
// if p3 = 20 then
19301: LD_VAR 0 3
19305: PUSH
19306: LD_INT 20
19308: EQUAL
19309: IFFALSE 19319
// sRemote := true ;
19311: LD_ADDR_EXP 95
19315: PUSH
19316: LD_INT 1
19318: ST_TO_ADDR
// if p3 = 21 then
19319: LD_VAR 0 3
19323: PUSH
19324: LD_INT 21
19326: EQUAL
19327: IFFALSE 19337
// sPowell := true ;
19329: LD_ADDR_EXP 96
19333: PUSH
19334: LD_INT 1
19336: ST_TO_ADDR
// if p3 = 22 then
19337: LD_VAR 0 3
19341: PUSH
19342: LD_INT 22
19344: EQUAL
19345: IFFALSE 19355
// sTeleport := true ;
19347: LD_ADDR_EXP 99
19351: PUSH
19352: LD_INT 1
19354: ST_TO_ADDR
// if p3 = 23 then
19355: LD_VAR 0 3
19359: PUSH
19360: LD_INT 23
19362: EQUAL
19363: IFFALSE 19373
// sOilTower := true ;
19365: LD_ADDR_EXP 101
19369: PUSH
19370: LD_INT 1
19372: ST_TO_ADDR
// if p3 = 24 then
19373: LD_VAR 0 3
19377: PUSH
19378: LD_INT 24
19380: EQUAL
19381: IFFALSE 19391
// sShovel := true ;
19383: LD_ADDR_EXP 102
19387: PUSH
19388: LD_INT 1
19390: ST_TO_ADDR
// if p3 = 25 then
19391: LD_VAR 0 3
19395: PUSH
19396: LD_INT 25
19398: EQUAL
19399: IFFALSE 19409
// sSheik := true ;
19401: LD_ADDR_EXP 103
19405: PUSH
19406: LD_INT 1
19408: ST_TO_ADDR
// if p3 = 101 then
19409: LD_VAR 0 3
19413: PUSH
19414: LD_INT 101
19416: EQUAL
19417: IFFALSE 19427
// sSold := true ;
19419: LD_ADDR_EXP 82
19423: PUSH
19424: LD_INT 1
19426: ST_TO_ADDR
// if p3 = 102 then
19427: LD_VAR 0 3
19431: PUSH
19432: LD_INT 102
19434: EQUAL
19435: IFFALSE 19445
// sDiff := true ;
19437: LD_ADDR_EXP 83
19441: PUSH
19442: LD_INT 1
19444: ST_TO_ADDR
// if p3 = 103 then
19445: LD_VAR 0 3
19449: PUSH
19450: LD_INT 103
19452: EQUAL
19453: IFFALSE 19463
// sFog := true ;
19455: LD_ADDR_EXP 86
19459: PUSH
19460: LD_INT 1
19462: ST_TO_ADDR
// if p3 = 104 then
19463: LD_VAR 0 3
19467: PUSH
19468: LD_INT 104
19470: EQUAL
19471: IFFALSE 19481
// sReset := true ;
19473: LD_ADDR_EXP 87
19477: PUSH
19478: LD_INT 1
19480: ST_TO_ADDR
// if p3 = 105 then
19481: LD_VAR 0 3
19485: PUSH
19486: LD_INT 105
19488: EQUAL
19489: IFFALSE 19499
// sSun := true ;
19491: LD_ADDR_EXP 88
19495: PUSH
19496: LD_INT 1
19498: ST_TO_ADDR
// if p3 = 106 then
19499: LD_VAR 0 3
19503: PUSH
19504: LD_INT 106
19506: EQUAL
19507: IFFALSE 19517
// sTiger := true ;
19509: LD_ADDR_EXP 84
19513: PUSH
19514: LD_INT 1
19516: ST_TO_ADDR
// if p3 = 107 then
19517: LD_VAR 0 3
19521: PUSH
19522: LD_INT 107
19524: EQUAL
19525: IFFALSE 19535
// sBomb := true ;
19527: LD_ADDR_EXP 85
19531: PUSH
19532: LD_INT 1
19534: ST_TO_ADDR
// if p3 = 108 then
19535: LD_VAR 0 3
19539: PUSH
19540: LD_INT 108
19542: EQUAL
19543: IFFALSE 19553
// sWound := true ;
19545: LD_ADDR_EXP 93
19549: PUSH
19550: LD_INT 1
19552: ST_TO_ADDR
// if p3 = 109 then
19553: LD_VAR 0 3
19557: PUSH
19558: LD_INT 109
19560: EQUAL
19561: IFFALSE 19571
// sBetray := true ;
19563: LD_ADDR_EXP 97
19567: PUSH
19568: LD_INT 1
19570: ST_TO_ADDR
// if p3 = 110 then
19571: LD_VAR 0 3
19575: PUSH
19576: LD_INT 110
19578: EQUAL
19579: IFFALSE 19589
// sContamin := true ;
19581: LD_ADDR_EXP 98
19585: PUSH
19586: LD_INT 1
19588: ST_TO_ADDR
// if p3 = 111 then
19589: LD_VAR 0 3
19593: PUSH
19594: LD_INT 111
19596: EQUAL
19597: IFFALSE 19607
// sOil := true ;
19599: LD_ADDR_EXP 100
19603: PUSH
19604: LD_INT 1
19606: ST_TO_ADDR
// if p3 = 112 then
19607: LD_VAR 0 3
19611: PUSH
19612: LD_INT 112
19614: EQUAL
19615: IFFALSE 19625
// sStu := true ;
19617: LD_ADDR_EXP 104
19621: PUSH
19622: LD_INT 1
19624: ST_TO_ADDR
// end ; end ;
19625: PPOPN 6
19627: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19628: LD_EXP 67
19632: PUSH
19633: LD_EXP 70
19637: AND
19638: IFFALSE 19762
19640: GO 19642
19642: DISABLE
19643: LD_INT 0
19645: PPUSH
19646: PPUSH
// begin enable ;
19647: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19648: LD_ADDR_VAR 0 2
19652: PUSH
19653: LD_INT 22
19655: PUSH
19656: LD_OWVAR 2
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 2
19667: PUSH
19668: LD_INT 34
19670: PUSH
19671: LD_INT 7
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 34
19680: PUSH
19681: LD_INT 45
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 34
19690: PUSH
19691: LD_INT 28
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 34
19700: PUSH
19701: LD_INT 47
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PPUSH
19719: CALL_OW 69
19723: ST_TO_ADDR
// if not tmp then
19724: LD_VAR 0 2
19728: NOT
19729: IFFALSE 19733
// exit ;
19731: GO 19762
// for i in tmp do
19733: LD_ADDR_VAR 0 1
19737: PUSH
19738: LD_VAR 0 2
19742: PUSH
19743: FOR_IN
19744: IFFALSE 19760
// begin SetLives ( i , 0 ) ;
19746: LD_VAR 0 1
19750: PPUSH
19751: LD_INT 0
19753: PPUSH
19754: CALL_OW 234
// end ;
19758: GO 19743
19760: POP
19761: POP
// end ;
19762: PPOPN 2
19764: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19765: LD_EXP 67
19769: PUSH
19770: LD_EXP 71
19774: AND
19775: IFFALSE 19856
19777: GO 19779
19779: DISABLE
19780: LD_INT 0
19782: PPUSH
19783: PPUSH
// begin enable ;
19784: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19785: LD_ADDR_VAR 0 2
19789: PUSH
19790: LD_INT 22
19792: PUSH
19793: LD_OWVAR 2
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 32
19804: PUSH
19805: LD_INT 3
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PPUSH
19816: CALL_OW 69
19820: ST_TO_ADDR
// if not tmp then
19821: LD_VAR 0 2
19825: NOT
19826: IFFALSE 19830
// exit ;
19828: GO 19856
// for i in tmp do
19830: LD_ADDR_VAR 0 1
19834: PUSH
19835: LD_VAR 0 2
19839: PUSH
19840: FOR_IN
19841: IFFALSE 19854
// begin DestroyUnit ( i ) ;
19843: LD_VAR 0 1
19847: PPUSH
19848: CALL_OW 65
// end ;
19852: GO 19840
19854: POP
19855: POP
// end ;
19856: PPOPN 2
19858: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19859: LD_EXP 67
19863: PUSH
19864: LD_EXP 68
19868: AND
19869: IFFALSE 19962
19871: GO 19873
19873: DISABLE
19874: LD_INT 0
19876: PPUSH
// begin enable ;
19877: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19878: LD_ADDR_VAR 0 1
19882: PUSH
19883: LD_INT 22
19885: PUSH
19886: LD_OWVAR 2
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 2
19897: PUSH
19898: LD_INT 25
19900: PUSH
19901: LD_INT 5
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 25
19910: PUSH
19911: LD_INT 9
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 25
19920: PUSH
19921: LD_INT 8
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PPUSH
19938: CALL_OW 69
19942: PUSH
19943: FOR_IN
19944: IFFALSE 19960
// begin SetClass ( i , 1 ) ;
19946: LD_VAR 0 1
19950: PPUSH
19951: LD_INT 1
19953: PPUSH
19954: CALL_OW 336
// end ;
19958: GO 19943
19960: POP
19961: POP
// end ;
19962: PPOPN 1
19964: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19965: LD_EXP 67
19969: PUSH
19970: LD_EXP 69
19974: AND
19975: PUSH
19976: LD_OWVAR 65
19980: PUSH
19981: LD_INT 7
19983: LESS
19984: AND
19985: IFFALSE 19999
19987: GO 19989
19989: DISABLE
// begin enable ;
19990: ENABLE
// game_speed := 7 ;
19991: LD_ADDR_OWVAR 65
19995: PUSH
19996: LD_INT 7
19998: ST_TO_ADDR
// end ;
19999: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20000: LD_EXP 67
20004: PUSH
20005: LD_EXP 72
20009: AND
20010: IFFALSE 20212
20012: GO 20014
20014: DISABLE
20015: LD_INT 0
20017: PPUSH
20018: PPUSH
20019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20020: LD_ADDR_VAR 0 3
20024: PUSH
20025: LD_INT 81
20027: PUSH
20028: LD_OWVAR 2
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 21
20039: PUSH
20040: LD_INT 1
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PPUSH
20051: CALL_OW 69
20055: ST_TO_ADDR
// if not tmp then
20056: LD_VAR 0 3
20060: NOT
20061: IFFALSE 20065
// exit ;
20063: GO 20212
// if tmp > 5 then
20065: LD_VAR 0 3
20069: PUSH
20070: LD_INT 5
20072: GREATER
20073: IFFALSE 20085
// k := 5 else
20075: LD_ADDR_VAR 0 2
20079: PUSH
20080: LD_INT 5
20082: ST_TO_ADDR
20083: GO 20095
// k := tmp ;
20085: LD_ADDR_VAR 0 2
20089: PUSH
20090: LD_VAR 0 3
20094: ST_TO_ADDR
// for i := 1 to k do
20095: LD_ADDR_VAR 0 1
20099: PUSH
20100: DOUBLE
20101: LD_INT 1
20103: DEC
20104: ST_TO_ADDR
20105: LD_VAR 0 2
20109: PUSH
20110: FOR_TO
20111: IFFALSE 20210
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20113: LD_VAR 0 3
20117: PUSH
20118: LD_VAR 0 1
20122: ARRAY
20123: PPUSH
20124: LD_VAR 0 1
20128: PUSH
20129: LD_INT 4
20131: MOD
20132: PUSH
20133: LD_INT 1
20135: PLUS
20136: PPUSH
20137: CALL_OW 259
20141: PUSH
20142: LD_INT 10
20144: LESS
20145: IFFALSE 20208
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20147: LD_VAR 0 3
20151: PUSH
20152: LD_VAR 0 1
20156: ARRAY
20157: PPUSH
20158: LD_VAR 0 1
20162: PUSH
20163: LD_INT 4
20165: MOD
20166: PUSH
20167: LD_INT 1
20169: PLUS
20170: PPUSH
20171: LD_VAR 0 3
20175: PUSH
20176: LD_VAR 0 1
20180: ARRAY
20181: PPUSH
20182: LD_VAR 0 1
20186: PUSH
20187: LD_INT 4
20189: MOD
20190: PUSH
20191: LD_INT 1
20193: PLUS
20194: PPUSH
20195: CALL_OW 259
20199: PUSH
20200: LD_INT 1
20202: PLUS
20203: PPUSH
20204: CALL_OW 237
20208: GO 20110
20210: POP
20211: POP
// end ;
20212: PPOPN 3
20214: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20215: LD_EXP 67
20219: PUSH
20220: LD_EXP 73
20224: AND
20225: IFFALSE 20245
20227: GO 20229
20229: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20230: LD_INT 4
20232: PPUSH
20233: LD_OWVAR 2
20237: PPUSH
20238: LD_INT 0
20240: PPUSH
20241: CALL_OW 324
20245: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20246: LD_EXP 67
20250: PUSH
20251: LD_EXP 102
20255: AND
20256: IFFALSE 20276
20258: GO 20260
20260: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20261: LD_INT 19
20263: PPUSH
20264: LD_OWVAR 2
20268: PPUSH
20269: LD_INT 0
20271: PPUSH
20272: CALL_OW 324
20276: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20277: LD_EXP 67
20281: PUSH
20282: LD_EXP 74
20286: AND
20287: IFFALSE 20386
20289: GO 20291
20291: DISABLE
20292: LD_INT 0
20294: PPUSH
20295: PPUSH
// begin enable ;
20296: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20297: LD_ADDR_VAR 0 2
20301: PUSH
20302: LD_INT 22
20304: PUSH
20305: LD_OWVAR 2
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 2
20316: PUSH
20317: LD_INT 34
20319: PUSH
20320: LD_INT 11
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 34
20329: PUSH
20330: LD_INT 30
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: LIST
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PPUSH
20346: CALL_OW 69
20350: ST_TO_ADDR
// if not tmp then
20351: LD_VAR 0 2
20355: NOT
20356: IFFALSE 20360
// exit ;
20358: GO 20386
// for i in tmp do
20360: LD_ADDR_VAR 0 1
20364: PUSH
20365: LD_VAR 0 2
20369: PUSH
20370: FOR_IN
20371: IFFALSE 20384
// begin DestroyUnit ( i ) ;
20373: LD_VAR 0 1
20377: PPUSH
20378: CALL_OW 65
// end ;
20382: GO 20370
20384: POP
20385: POP
// end ;
20386: PPOPN 2
20388: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20389: LD_EXP 67
20393: PUSH
20394: LD_EXP 75
20398: AND
20399: IFFALSE 20419
20401: GO 20403
20403: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20404: LD_INT 32
20406: PPUSH
20407: LD_OWVAR 2
20411: PPUSH
20412: LD_INT 0
20414: PPUSH
20415: CALL_OW 324
20419: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20420: LD_EXP 67
20424: PUSH
20425: LD_EXP 76
20429: AND
20430: IFFALSE 20611
20432: GO 20434
20434: DISABLE
20435: LD_INT 0
20437: PPUSH
20438: PPUSH
20439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20440: LD_ADDR_VAR 0 2
20444: PUSH
20445: LD_INT 22
20447: PUSH
20448: LD_OWVAR 2
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 33
20459: PUSH
20460: LD_INT 3
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PPUSH
20471: CALL_OW 69
20475: ST_TO_ADDR
// if not tmp then
20476: LD_VAR 0 2
20480: NOT
20481: IFFALSE 20485
// exit ;
20483: GO 20611
// side := 0 ;
20485: LD_ADDR_VAR 0 3
20489: PUSH
20490: LD_INT 0
20492: ST_TO_ADDR
// for i := 1 to 8 do
20493: LD_ADDR_VAR 0 1
20497: PUSH
20498: DOUBLE
20499: LD_INT 1
20501: DEC
20502: ST_TO_ADDR
20503: LD_INT 8
20505: PUSH
20506: FOR_TO
20507: IFFALSE 20555
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
20509: LD_OWVAR 2
20513: PUSH
20514: LD_VAR 0 1
20518: NONEQUAL
20519: PUSH
20520: LD_OWVAR 2
20524: PPUSH
20525: LD_VAR 0 1
20529: PPUSH
20530: CALL_OW 81
20534: PUSH
20535: LD_INT 2
20537: EQUAL
20538: AND
20539: IFFALSE 20553
// begin side := i ;
20541: LD_ADDR_VAR 0 3
20545: PUSH
20546: LD_VAR 0 1
20550: ST_TO_ADDR
// break ;
20551: GO 20555
// end ;
20553: GO 20506
20555: POP
20556: POP
// if not side then
20557: LD_VAR 0 3
20561: NOT
20562: IFFALSE 20566
// exit ;
20564: GO 20611
// for i := 1 to tmp do
20566: LD_ADDR_VAR 0 1
20570: PUSH
20571: DOUBLE
20572: LD_INT 1
20574: DEC
20575: ST_TO_ADDR
20576: LD_VAR 0 2
20580: PUSH
20581: FOR_TO
20582: IFFALSE 20609
// if Prob ( 30 ) then
20584: LD_INT 30
20586: PPUSH
20587: CALL_OW 13
20591: IFFALSE 20607
// SetSide ( i , side ) ;
20593: LD_VAR 0 1
20597: PPUSH
20598: LD_VAR 0 3
20602: PPUSH
20603: CALL_OW 235
20607: GO 20581
20609: POP
20610: POP
// end ;
20611: PPOPN 3
20613: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20614: LD_EXP 67
20618: PUSH
20619: LD_EXP 78
20623: AND
20624: IFFALSE 20743
20626: GO 20628
20628: DISABLE
20629: LD_INT 0
20631: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20632: LD_ADDR_VAR 0 1
20636: PUSH
20637: LD_INT 22
20639: PUSH
20640: LD_OWVAR 2
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 21
20651: PUSH
20652: LD_INT 1
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 3
20661: PUSH
20662: LD_INT 23
20664: PUSH
20665: LD_INT 0
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: LIST
20680: PPUSH
20681: CALL_OW 69
20685: PUSH
20686: FOR_IN
20687: IFFALSE 20741
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20689: LD_VAR 0 1
20693: PPUSH
20694: CALL_OW 257
20698: PUSH
20699: LD_INT 1
20701: PUSH
20702: LD_INT 2
20704: PUSH
20705: LD_INT 3
20707: PUSH
20708: LD_INT 4
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: IN
20717: IFFALSE 20739
// SetClass ( un , rand ( 1 , 4 ) ) ;
20719: LD_VAR 0 1
20723: PPUSH
20724: LD_INT 1
20726: PPUSH
20727: LD_INT 4
20729: PPUSH
20730: CALL_OW 12
20734: PPUSH
20735: CALL_OW 336
20739: GO 20686
20741: POP
20742: POP
// end ;
20743: PPOPN 1
20745: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20746: LD_EXP 67
20750: PUSH
20751: LD_EXP 77
20755: AND
20756: IFFALSE 20835
20758: GO 20760
20760: DISABLE
20761: LD_INT 0
20763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20764: LD_ADDR_VAR 0 1
20768: PUSH
20769: LD_INT 22
20771: PUSH
20772: LD_OWVAR 2
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 21
20783: PUSH
20784: LD_INT 3
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PPUSH
20795: CALL_OW 69
20799: ST_TO_ADDR
// if not tmp then
20800: LD_VAR 0 1
20804: NOT
20805: IFFALSE 20809
// exit ;
20807: GO 20835
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20809: LD_VAR 0 1
20813: PUSH
20814: LD_INT 1
20816: PPUSH
20817: LD_VAR 0 1
20821: PPUSH
20822: CALL_OW 12
20826: ARRAY
20827: PPUSH
20828: LD_INT 100
20830: PPUSH
20831: CALL_OW 234
// end ;
20835: PPOPN 1
20837: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20838: LD_EXP 67
20842: PUSH
20843: LD_EXP 79
20847: AND
20848: IFFALSE 20946
20850: GO 20852
20852: DISABLE
20853: LD_INT 0
20855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20856: LD_ADDR_VAR 0 1
20860: PUSH
20861: LD_INT 22
20863: PUSH
20864: LD_OWVAR 2
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 21
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PPUSH
20887: CALL_OW 69
20891: ST_TO_ADDR
// if not tmp then
20892: LD_VAR 0 1
20896: NOT
20897: IFFALSE 20901
// exit ;
20899: GO 20946
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20901: LD_VAR 0 1
20905: PUSH
20906: LD_INT 1
20908: PPUSH
20909: LD_VAR 0 1
20913: PPUSH
20914: CALL_OW 12
20918: ARRAY
20919: PPUSH
20920: LD_INT 1
20922: PPUSH
20923: LD_INT 4
20925: PPUSH
20926: CALL_OW 12
20930: PPUSH
20931: LD_INT 3000
20933: PPUSH
20934: LD_INT 9000
20936: PPUSH
20937: CALL_OW 12
20941: PPUSH
20942: CALL_OW 492
// end ;
20946: PPOPN 1
20948: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20949: LD_EXP 67
20953: PUSH
20954: LD_EXP 80
20958: AND
20959: IFFALSE 20979
20961: GO 20963
20963: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20964: LD_INT 1
20966: PPUSH
20967: LD_OWVAR 2
20971: PPUSH
20972: LD_INT 0
20974: PPUSH
20975: CALL_OW 324
20979: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20980: LD_EXP 67
20984: PUSH
20985: LD_EXP 81
20989: AND
20990: IFFALSE 21073
20992: GO 20994
20994: DISABLE
20995: LD_INT 0
20997: PPUSH
20998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20999: LD_ADDR_VAR 0 2
21003: PUSH
21004: LD_INT 22
21006: PUSH
21007: LD_OWVAR 2
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 21
21018: PUSH
21019: LD_INT 3
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PPUSH
21030: CALL_OW 69
21034: ST_TO_ADDR
// if not tmp then
21035: LD_VAR 0 2
21039: NOT
21040: IFFALSE 21044
// exit ;
21042: GO 21073
// for i in tmp do
21044: LD_ADDR_VAR 0 1
21048: PUSH
21049: LD_VAR 0 2
21053: PUSH
21054: FOR_IN
21055: IFFALSE 21071
// SetBLevel ( i , 10 ) ;
21057: LD_VAR 0 1
21061: PPUSH
21062: LD_INT 10
21064: PPUSH
21065: CALL_OW 241
21069: GO 21054
21071: POP
21072: POP
// end ;
21073: PPOPN 2
21075: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21076: LD_EXP 67
21080: PUSH
21081: LD_EXP 82
21085: AND
21086: IFFALSE 21197
21088: GO 21090
21090: DISABLE
21091: LD_INT 0
21093: PPUSH
21094: PPUSH
21095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21096: LD_ADDR_VAR 0 3
21100: PUSH
21101: LD_INT 22
21103: PUSH
21104: LD_OWVAR 2
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 25
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PPUSH
21127: CALL_OW 69
21131: ST_TO_ADDR
// if not tmp then
21132: LD_VAR 0 3
21136: NOT
21137: IFFALSE 21141
// exit ;
21139: GO 21197
// un := tmp [ rand ( 1 , tmp ) ] ;
21141: LD_ADDR_VAR 0 2
21145: PUSH
21146: LD_VAR 0 3
21150: PUSH
21151: LD_INT 1
21153: PPUSH
21154: LD_VAR 0 3
21158: PPUSH
21159: CALL_OW 12
21163: ARRAY
21164: ST_TO_ADDR
// if Crawls ( un ) then
21165: LD_VAR 0 2
21169: PPUSH
21170: CALL_OW 318
21174: IFFALSE 21185
// ComWalk ( un ) ;
21176: LD_VAR 0 2
21180: PPUSH
21181: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21185: LD_VAR 0 2
21189: PPUSH
21190: LD_INT 5
21192: PPUSH
21193: CALL_OW 336
// end ;
21197: PPOPN 3
21199: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
21200: LD_EXP 67
21204: PUSH
21205: LD_EXP 83
21209: AND
21210: PUSH
21211: LD_OWVAR 67
21215: PUSH
21216: LD_INT 3
21218: LESS
21219: AND
21220: IFFALSE 21239
21222: GO 21224
21224: DISABLE
// Difficulty := Difficulty + 1 ;
21225: LD_ADDR_OWVAR 67
21229: PUSH
21230: LD_OWVAR 67
21234: PUSH
21235: LD_INT 1
21237: PLUS
21238: ST_TO_ADDR
21239: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21240: LD_EXP 67
21244: PUSH
21245: LD_EXP 84
21249: AND
21250: IFFALSE 21353
21252: GO 21254
21254: DISABLE
21255: LD_INT 0
21257: PPUSH
// begin for i := 1 to 5 do
21258: LD_ADDR_VAR 0 1
21262: PUSH
21263: DOUBLE
21264: LD_INT 1
21266: DEC
21267: ST_TO_ADDR
21268: LD_INT 5
21270: PUSH
21271: FOR_TO
21272: IFFALSE 21351
// begin uc_nation := nation_nature ;
21274: LD_ADDR_OWVAR 21
21278: PUSH
21279: LD_INT 0
21281: ST_TO_ADDR
// uc_side := 0 ;
21282: LD_ADDR_OWVAR 20
21286: PUSH
21287: LD_INT 0
21289: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21290: LD_ADDR_OWVAR 29
21294: PUSH
21295: LD_INT 12
21297: PUSH
21298: LD_INT 12
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: ST_TO_ADDR
// hc_agressivity := 20 ;
21305: LD_ADDR_OWVAR 35
21309: PUSH
21310: LD_INT 20
21312: ST_TO_ADDR
// hc_class := class_tiger ;
21313: LD_ADDR_OWVAR 28
21317: PUSH
21318: LD_INT 14
21320: ST_TO_ADDR
// hc_gallery :=  ;
21321: LD_ADDR_OWVAR 33
21325: PUSH
21326: LD_STRING 
21328: ST_TO_ADDR
// hc_name :=  ;
21329: LD_ADDR_OWVAR 26
21333: PUSH
21334: LD_STRING 
21336: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21337: CALL_OW 44
21341: PPUSH
21342: LD_INT 0
21344: PPUSH
21345: CALL_OW 51
// end ;
21349: GO 21271
21351: POP
21352: POP
// end ;
21353: PPOPN 1
21355: END
// every 0 0$1 trigger StreamModeActive and sBomb do var i , x , y , result ;
21356: LD_EXP 67
21360: PUSH
21361: LD_EXP 85
21365: AND
21366: IFFALSE 21540
21368: GO 21370
21370: DISABLE
21371: LD_INT 0
21373: PPUSH
21374: PPUSH
21375: PPUSH
21376: PPUSH
// begin result := false ;
21377: LD_ADDR_VAR 0 4
21381: PUSH
21382: LD_INT 0
21384: ST_TO_ADDR
// for i := 1 to 8 do
21385: LD_ADDR_VAR 0 1
21389: PUSH
21390: DOUBLE
21391: LD_INT 1
21393: DEC
21394: ST_TO_ADDR
21395: LD_INT 8
21397: PUSH
21398: FOR_TO
21399: IFFALSE 21510
// begin x := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
21401: LD_ADDR_VAR 0 2
21405: PUSH
21406: LD_INT 10
21408: PUSH
21409: LD_INT 50
21411: PUSH
21412: LD_INT 90
21414: PUSH
21415: LD_INT 140
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: PUSH
21424: LD_INT 1
21426: PPUSH
21427: LD_INT 4
21429: PPUSH
21430: CALL_OW 12
21434: ARRAY
21435: ST_TO_ADDR
// y := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
21436: LD_ADDR_VAR 0 3
21440: PUSH
21441: LD_INT 10
21443: PUSH
21444: LD_INT 50
21446: PUSH
21447: LD_INT 90
21449: PUSH
21450: LD_INT 140
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 1
21461: PPUSH
21462: LD_INT 4
21464: PPUSH
21465: CALL_OW 12
21469: ARRAY
21470: ST_TO_ADDR
// if ValidHex ( x , y ) then
21471: LD_VAR 0 2
21475: PPUSH
21476: LD_VAR 0 3
21480: PPUSH
21481: CALL_OW 488
21485: IFFALSE 21508
// begin result := [ x , y ] ;
21487: LD_ADDR_VAR 0 4
21491: PUSH
21492: LD_VAR 0 2
21496: PUSH
21497: LD_VAR 0 3
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: ST_TO_ADDR
// break ;
21506: GO 21510
// end ; end ;
21508: GO 21398
21510: POP
21511: POP
// if result then
21512: LD_VAR 0 4
21516: IFFALSE 21540
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21518: LD_VAR 0 4
21522: PUSH
21523: LD_INT 1
21525: ARRAY
21526: PPUSH
21527: LD_VAR 0 4
21531: PUSH
21532: LD_INT 2
21534: ARRAY
21535: PPUSH
21536: CALL_OW 429
// end ;
21540: PPOPN 4
21542: END
// every 0 0$1 trigger StreamModeActive and sReset do
21543: LD_EXP 67
21547: PUSH
21548: LD_EXP 87
21552: AND
21553: IFFALSE 21565
21555: GO 21557
21557: DISABLE
// YouLost (  ) ;
21558: LD_STRING 
21560: PPUSH
21561: CALL_OW 104
21565: END
// every 0 0$1 trigger StreamModeActive and sFog do
21566: LD_EXP 67
21570: PUSH
21571: LD_EXP 86
21575: AND
21576: IFFALSE 21590
21578: GO 21580
21580: DISABLE
// FogOff ( your_side ) ;
21581: LD_OWVAR 2
21585: PPUSH
21586: CALL_OW 344
21590: END
// every 0 0$1 trigger StreamModeActive and sSun do
21591: LD_EXP 67
21595: PUSH
21596: LD_EXP 88
21600: AND
21601: IFFALSE 21629
21603: GO 21605
21605: DISABLE
// begin solar_recharge_percent := 0 ;
21606: LD_ADDR_OWVAR 79
21610: PUSH
21611: LD_INT 0
21613: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21614: LD_INT 10500
21616: PPUSH
21617: CALL_OW 67
// solar_recharge_percent := 100 ;
21621: LD_ADDR_OWVAR 79
21625: PUSH
21626: LD_INT 100
21628: ST_TO_ADDR
// end ;
21629: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21630: LD_EXP 67
21634: PUSH
21635: LD_EXP 89
21639: AND
21640: IFFALSE 21879
21642: GO 21644
21644: DISABLE
21645: LD_INT 0
21647: PPUSH
21648: PPUSH
21649: PPUSH
// begin tmp := [ ] ;
21650: LD_ADDR_VAR 0 3
21654: PUSH
21655: EMPTY
21656: ST_TO_ADDR
// for i := 1 to 6 do
21657: LD_ADDR_VAR 0 1
21661: PUSH
21662: DOUBLE
21663: LD_INT 1
21665: DEC
21666: ST_TO_ADDR
21667: LD_INT 6
21669: PUSH
21670: FOR_TO
21671: IFFALSE 21776
// begin uc_nation := nation_nature ;
21673: LD_ADDR_OWVAR 21
21677: PUSH
21678: LD_INT 0
21680: ST_TO_ADDR
// uc_side := 0 ;
21681: LD_ADDR_OWVAR 20
21685: PUSH
21686: LD_INT 0
21688: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21689: LD_ADDR_OWVAR 29
21693: PUSH
21694: LD_INT 12
21696: PUSH
21697: LD_INT 12
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: ST_TO_ADDR
// hc_agressivity := 20 ;
21704: LD_ADDR_OWVAR 35
21708: PUSH
21709: LD_INT 20
21711: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21712: LD_ADDR_OWVAR 28
21716: PUSH
21717: LD_INT 17
21719: ST_TO_ADDR
// hc_gallery :=  ;
21720: LD_ADDR_OWVAR 33
21724: PUSH
21725: LD_STRING 
21727: ST_TO_ADDR
// hc_name :=  ;
21728: LD_ADDR_OWVAR 26
21732: PUSH
21733: LD_STRING 
21735: ST_TO_ADDR
// un := CreateHuman ;
21736: LD_ADDR_VAR 0 2
21740: PUSH
21741: CALL_OW 44
21745: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21746: LD_VAR 0 2
21750: PPUSH
21751: LD_INT 1
21753: PPUSH
21754: CALL_OW 51
// tmp := tmp * un ;
21758: LD_ADDR_VAR 0 3
21762: PUSH
21763: LD_VAR 0 3
21767: PUSH
21768: LD_VAR 0 2
21772: MUL
21773: ST_TO_ADDR
// end ;
21774: GO 21670
21776: POP
21777: POP
// repeat wait ( 0 0$1 ) ;
21778: LD_INT 35
21780: PPUSH
21781: CALL_OW 67
// for un in tmp do
21785: LD_ADDR_VAR 0 2
21789: PUSH
21790: LD_VAR 0 3
21794: PUSH
21795: FOR_IN
21796: IFFALSE 21870
// begin if IsDead ( un ) then
21798: LD_VAR 0 2
21802: PPUSH
21803: CALL_OW 301
21807: IFFALSE 21827
// begin tmp := tmp diff un ;
21809: LD_ADDR_VAR 0 3
21813: PUSH
21814: LD_VAR 0 3
21818: PUSH
21819: LD_VAR 0 2
21823: DIFF
21824: ST_TO_ADDR
// continue ;
21825: GO 21795
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21827: LD_VAR 0 2
21831: PPUSH
21832: LD_INT 3
21834: PUSH
21835: LD_INT 22
21837: PUSH
21838: LD_INT 0
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PPUSH
21849: CALL_OW 69
21853: PPUSH
21854: LD_VAR 0 2
21858: PPUSH
21859: CALL_OW 74
21863: PPUSH
21864: CALL_OW 115
// end ;
21868: GO 21795
21870: POP
21871: POP
// until not tmp ;
21872: LD_VAR 0 3
21876: NOT
21877: IFFALSE 21778
// end ;
21879: PPOPN 3
21881: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21882: LD_EXP 67
21886: PUSH
21887: LD_EXP 90
21891: AND
21892: IFFALSE 21918
21894: GO 21896
21896: DISABLE
// begin ToLua ( displayTroll(); ) ;
21897: LD_STRING displayTroll();
21899: PPUSH
21900: CALL_OW 559
// wait ( 3 3$00 ) ;
21904: LD_INT 6300
21906: PPUSH
21907: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21911: LD_STRING hideTroll();
21913: PPUSH
21914: CALL_OW 559
// end ;
21918: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21919: LD_EXP 67
21923: PUSH
21924: LD_EXP 91
21928: AND
21929: IFFALSE 21992
21931: GO 21933
21933: DISABLE
21934: LD_INT 0
21936: PPUSH
// begin p := 0 ;
21937: LD_ADDR_VAR 0 1
21941: PUSH
21942: LD_INT 0
21944: ST_TO_ADDR
// repeat game_speed := 1 ;
21945: LD_ADDR_OWVAR 65
21949: PUSH
21950: LD_INT 1
21952: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21953: LD_INT 35
21955: PPUSH
21956: CALL_OW 67
// p := p + 1 ;
21960: LD_ADDR_VAR 0 1
21964: PUSH
21965: LD_VAR 0 1
21969: PUSH
21970: LD_INT 1
21972: PLUS
21973: ST_TO_ADDR
// until p >= 60 ;
21974: LD_VAR 0 1
21978: PUSH
21979: LD_INT 60
21981: GREATEREQUAL
21982: IFFALSE 21945
// game_speed := 4 ;
21984: LD_ADDR_OWVAR 65
21988: PUSH
21989: LD_INT 4
21991: ST_TO_ADDR
// end ;
21992: PPOPN 1
21994: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21995: LD_EXP 67
21999: PUSH
22000: LD_EXP 92
22004: AND
22005: IFFALSE 22151
22007: GO 22009
22009: DISABLE
22010: LD_INT 0
22012: PPUSH
22013: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22014: LD_ADDR_VAR 0 1
22018: PUSH
22019: LD_INT 22
22021: PUSH
22022: LD_OWVAR 2
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 2
22033: PUSH
22034: LD_INT 30
22036: PUSH
22037: LD_INT 0
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 30
22046: PUSH
22047: LD_INT 1
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: LIST
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PPUSH
22063: CALL_OW 69
22067: ST_TO_ADDR
// if not depot then
22068: LD_VAR 0 1
22072: NOT
22073: IFFALSE 22077
// exit ;
22075: GO 22151
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22077: LD_ADDR_VAR 0 2
22081: PUSH
22082: LD_VAR 0 1
22086: PUSH
22087: LD_INT 1
22089: PPUSH
22090: LD_VAR 0 1
22094: PPUSH
22095: CALL_OW 12
22099: ARRAY
22100: PPUSH
22101: CALL_OW 274
22105: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22106: LD_VAR 0 2
22110: PPUSH
22111: LD_INT 1
22113: PPUSH
22114: LD_INT 0
22116: PPUSH
22117: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22121: LD_VAR 0 2
22125: PPUSH
22126: LD_INT 2
22128: PPUSH
22129: LD_INT 0
22131: PPUSH
22132: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22136: LD_VAR 0 2
22140: PPUSH
22141: LD_INT 3
22143: PPUSH
22144: LD_INT 0
22146: PPUSH
22147: CALL_OW 277
// end ;
22151: PPOPN 2
22153: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22154: LD_EXP 67
22158: PUSH
22159: LD_EXP 93
22163: AND
22164: IFFALSE 22261
22166: GO 22168
22168: DISABLE
22169: LD_INT 0
22171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22172: LD_ADDR_VAR 0 1
22176: PUSH
22177: LD_INT 22
22179: PUSH
22180: LD_OWVAR 2
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 21
22191: PUSH
22192: LD_INT 1
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 3
22201: PUSH
22202: LD_INT 23
22204: PUSH
22205: LD_INT 0
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: LIST
22220: PPUSH
22221: CALL_OW 69
22225: ST_TO_ADDR
// if not tmp then
22226: LD_VAR 0 1
22230: NOT
22231: IFFALSE 22235
// exit ;
22233: GO 22261
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22235: LD_VAR 0 1
22239: PUSH
22240: LD_INT 1
22242: PPUSH
22243: LD_VAR 0 1
22247: PPUSH
22248: CALL_OW 12
22252: ARRAY
22253: PPUSH
22254: LD_INT 200
22256: PPUSH
22257: CALL_OW 234
// end ;
22261: PPOPN 1
22263: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22264: LD_EXP 67
22268: PUSH
22269: LD_EXP 94
22273: AND
22274: IFFALSE 22353
22276: GO 22278
22278: DISABLE
22279: LD_INT 0
22281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22282: LD_ADDR_VAR 0 1
22286: PUSH
22287: LD_INT 22
22289: PUSH
22290: LD_OWVAR 2
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 21
22301: PUSH
22302: LD_INT 2
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PPUSH
22313: CALL_OW 69
22317: ST_TO_ADDR
// if not tmp then
22318: LD_VAR 0 1
22322: NOT
22323: IFFALSE 22327
// exit ;
22325: GO 22353
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
22327: LD_VAR 0 1
22331: PUSH
22332: LD_INT 1
22334: PPUSH
22335: LD_VAR 0 1
22339: PPUSH
22340: CALL_OW 12
22344: ARRAY
22345: PPUSH
22346: LD_INT 60
22348: PPUSH
22349: CALL_OW 234
// end ;
22353: PPOPN 1
22355: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
22356: LD_EXP 67
22360: PUSH
22361: LD_EXP 95
22365: AND
22366: IFFALSE 22465
22368: GO 22370
22370: DISABLE
22371: LD_INT 0
22373: PPUSH
22374: PPUSH
// begin enable ;
22375: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22376: LD_ADDR_VAR 0 1
22380: PUSH
22381: LD_INT 22
22383: PUSH
22384: LD_OWVAR 2
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 61
22395: PUSH
22396: EMPTY
22397: LIST
22398: PUSH
22399: LD_INT 33
22401: PUSH
22402: LD_INT 2
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: LIST
22413: PPUSH
22414: CALL_OW 69
22418: ST_TO_ADDR
// if not tmp then
22419: LD_VAR 0 1
22423: NOT
22424: IFFALSE 22428
// exit ;
22426: GO 22465
// for i in tmp do
22428: LD_ADDR_VAR 0 2
22432: PUSH
22433: LD_VAR 0 1
22437: PUSH
22438: FOR_IN
22439: IFFALSE 22463
// if IsControledBy ( i ) then
22441: LD_VAR 0 2
22445: PPUSH
22446: CALL_OW 312
22450: IFFALSE 22461
// ComUnlink ( i ) ;
22452: LD_VAR 0 2
22456: PPUSH
22457: CALL_OW 136
22461: GO 22438
22463: POP
22464: POP
// end ;
22465: PPOPN 2
22467: END
// every 0 0$1 trigger StreamModeActive and sPowell do
22468: LD_EXP 67
22472: PUSH
22473: LD_EXP 96
22477: AND
22478: IFFALSE 22518
22480: GO 22482
22482: DISABLE
// begin ToLua ( displayPowell(); ) ;
22483: LD_STRING displayPowell();
22485: PPUSH
22486: CALL_OW 559
// wait ( 0 0$20 ) ;
22490: LD_INT 700
22492: PPUSH
22493: CALL_OW 67
// ToLua ( displayPowell(); ) ;
22497: LD_STRING displayPowell();
22499: PPUSH
22500: CALL_OW 559
// wait ( 0 0$40 ) ;
22504: LD_INT 1400
22506: PPUSH
22507: CALL_OW 67
// ToLua ( displayPowell(); ) ;
22511: LD_STRING displayPowell();
22513: PPUSH
22514: CALL_OW 559
// end ;
22518: END
// every 0 0$1 trigger StreamModeActive and sStu do
22519: LD_EXP 67
22523: PUSH
22524: LD_EXP 104
22528: AND
22529: IFFALSE 22541
22531: GO 22533
22533: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22534: LD_STRING displayStucuk();
22536: PPUSH
22537: CALL_OW 559
// end ;
22541: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22542: LD_EXP 67
22546: PUSH
22547: LD_EXP 97
22551: AND
22552: IFFALSE 22693
22554: GO 22556
22556: DISABLE
22557: LD_INT 0
22559: PPUSH
22560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22561: LD_ADDR_VAR 0 2
22565: PUSH
22566: LD_INT 22
22568: PUSH
22569: LD_OWVAR 2
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 21
22580: PUSH
22581: LD_INT 1
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PPUSH
22592: CALL_OW 69
22596: ST_TO_ADDR
// if not tmp then
22597: LD_VAR 0 2
22601: NOT
22602: IFFALSE 22606
// exit ;
22604: GO 22693
// un := tmp [ rand ( 1 , tmp ) ] ;
22606: LD_ADDR_VAR 0 1
22610: PUSH
22611: LD_VAR 0 2
22615: PUSH
22616: LD_INT 1
22618: PPUSH
22619: LD_VAR 0 2
22623: PPUSH
22624: CALL_OW 12
22628: ARRAY
22629: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22630: LD_VAR 0 1
22634: PPUSH
22635: LD_INT 0
22637: PPUSH
22638: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22642: LD_VAR 0 1
22646: PPUSH
22647: LD_OWVAR 3
22651: PUSH
22652: LD_VAR 0 1
22656: DIFF
22657: PPUSH
22658: LD_VAR 0 1
22662: PPUSH
22663: CALL_OW 74
22667: PPUSH
22668: CALL_OW 115
// wait ( 0 0$20 ) ;
22672: LD_INT 700
22674: PPUSH
22675: CALL_OW 67
// SetSide ( un , your_side ) ;
22679: LD_VAR 0 1
22683: PPUSH
22684: LD_OWVAR 2
22688: PPUSH
22689: CALL_OW 235
// end ;
22693: PPOPN 2
22695: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22696: LD_EXP 67
22700: PUSH
22701: LD_EXP 98
22705: AND
22706: IFFALSE 22812
22708: GO 22710
22710: DISABLE
22711: LD_INT 0
22713: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22714: LD_ADDR_VAR 0 1
22718: PUSH
22719: LD_INT 22
22721: PUSH
22722: LD_OWVAR 2
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 2
22733: PUSH
22734: LD_INT 30
22736: PUSH
22737: LD_INT 0
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 30
22746: PUSH
22747: LD_INT 1
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: LIST
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PPUSH
22763: CALL_OW 69
22767: ST_TO_ADDR
// if not depot then
22768: LD_VAR 0 1
22772: NOT
22773: IFFALSE 22777
// exit ;
22775: GO 22812
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22777: LD_VAR 0 1
22781: PUSH
22782: LD_INT 1
22784: ARRAY
22785: PPUSH
22786: CALL_OW 250
22790: PPUSH
22791: LD_VAR 0 1
22795: PUSH
22796: LD_INT 1
22798: ARRAY
22799: PPUSH
22800: CALL_OW 251
22804: PPUSH
22805: LD_INT 70
22807: PPUSH
22808: CALL_OW 495
// end ;
22812: PPOPN 1
22814: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22815: LD_EXP 67
22819: PUSH
22820: LD_EXP 99
22824: AND
22825: IFFALSE 23036
22827: GO 22829
22829: DISABLE
22830: LD_INT 0
22832: PPUSH
22833: PPUSH
22834: PPUSH
22835: PPUSH
22836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22837: LD_ADDR_VAR 0 5
22841: PUSH
22842: LD_INT 22
22844: PUSH
22845: LD_OWVAR 2
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 21
22856: PUSH
22857: LD_INT 1
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PPUSH
22868: CALL_OW 69
22872: ST_TO_ADDR
// if not tmp then
22873: LD_VAR 0 5
22877: NOT
22878: IFFALSE 22882
// exit ;
22880: GO 23036
// for i in tmp do
22882: LD_ADDR_VAR 0 1
22886: PUSH
22887: LD_VAR 0 5
22891: PUSH
22892: FOR_IN
22893: IFFALSE 23034
// begin d := rand ( 0 , 5 ) ;
22895: LD_ADDR_VAR 0 4
22899: PUSH
22900: LD_INT 0
22902: PPUSH
22903: LD_INT 5
22905: PPUSH
22906: CALL_OW 12
22910: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22911: LD_ADDR_VAR 0 2
22915: PUSH
22916: LD_VAR 0 1
22920: PPUSH
22921: CALL_OW 250
22925: PPUSH
22926: LD_VAR 0 4
22930: PPUSH
22931: LD_INT 3
22933: PPUSH
22934: LD_INT 12
22936: PPUSH
22937: CALL_OW 12
22941: PPUSH
22942: CALL_OW 272
22946: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22947: LD_ADDR_VAR 0 3
22951: PUSH
22952: LD_VAR 0 1
22956: PPUSH
22957: CALL_OW 251
22961: PPUSH
22962: LD_VAR 0 4
22966: PPUSH
22967: LD_INT 3
22969: PPUSH
22970: LD_INT 12
22972: PPUSH
22973: CALL_OW 12
22977: PPUSH
22978: CALL_OW 273
22982: ST_TO_ADDR
// if ValidHex ( x , y ) then
22983: LD_VAR 0 2
22987: PPUSH
22988: LD_VAR 0 3
22992: PPUSH
22993: CALL_OW 488
22997: IFFALSE 23032
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22999: LD_VAR 0 1
23003: PPUSH
23004: LD_VAR 0 2
23008: PPUSH
23009: LD_VAR 0 3
23013: PPUSH
23014: LD_INT 3
23016: PPUSH
23017: LD_INT 6
23019: PPUSH
23020: CALL_OW 12
23024: PPUSH
23025: LD_INT 1
23027: PPUSH
23028: CALL_OW 483
// end ;
23032: GO 22892
23034: POP
23035: POP
// end ;
23036: PPOPN 5
23038: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23039: LD_EXP 67
23043: PUSH
23044: LD_EXP 100
23048: AND
23049: IFFALSE 23143
23051: GO 23053
23053: DISABLE
23054: LD_INT 0
23056: PPUSH
23057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23058: LD_ADDR_VAR 0 2
23062: PUSH
23063: LD_INT 22
23065: PUSH
23066: LD_OWVAR 2
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 32
23077: PUSH
23078: LD_INT 1
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 21
23087: PUSH
23088: LD_INT 2
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: LIST
23099: PPUSH
23100: CALL_OW 69
23104: ST_TO_ADDR
// if not tmp then
23105: LD_VAR 0 2
23109: NOT
23110: IFFALSE 23114
// exit ;
23112: GO 23143
// for i in tmp do
23114: LD_ADDR_VAR 0 1
23118: PUSH
23119: LD_VAR 0 2
23123: PUSH
23124: FOR_IN
23125: IFFALSE 23141
// SetFuel ( i , 0 ) ;
23127: LD_VAR 0 1
23131: PPUSH
23132: LD_INT 0
23134: PPUSH
23135: CALL_OW 240
23139: GO 23124
23141: POP
23142: POP
// end ;
23143: PPOPN 2
23145: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23146: LD_EXP 67
23150: PUSH
23151: LD_EXP 101
23155: AND
23156: IFFALSE 23222
23158: GO 23160
23160: DISABLE
23161: LD_INT 0
23163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23164: LD_ADDR_VAR 0 1
23168: PUSH
23169: LD_INT 22
23171: PUSH
23172: LD_OWVAR 2
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 30
23183: PUSH
23184: LD_INT 29
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PPUSH
23195: CALL_OW 69
23199: ST_TO_ADDR
// if not tmp then
23200: LD_VAR 0 1
23204: NOT
23205: IFFALSE 23209
// exit ;
23207: GO 23222
// DestroyUnit ( tmp [ 1 ] ) ;
23209: LD_VAR 0 1
23213: PUSH
23214: LD_INT 1
23216: ARRAY
23217: PPUSH
23218: CALL_OW 65
// end ;
23222: PPOPN 1
23224: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
23225: LD_EXP 67
23229: PUSH
23230: LD_EXP 103
23234: AND
23235: IFFALSE 23348
23237: GO 23239
23239: DISABLE
23240: LD_INT 0
23242: PPUSH
// begin uc_side := 0 ;
23243: LD_ADDR_OWVAR 20
23247: PUSH
23248: LD_INT 0
23250: ST_TO_ADDR
// uc_nation := nation_arabian ;
23251: LD_ADDR_OWVAR 21
23255: PUSH
23256: LD_INT 2
23258: ST_TO_ADDR
// PrepareHuman ( sex_male , 10 , class_desert_warior ) ;
23259: LD_INT 1
23261: PPUSH
23262: LD_INT 10
23264: PPUSH
23265: LD_INT 11
23267: PPUSH
23268: CALL_OW 380
// un := CreateHuman ;
23272: LD_ADDR_VAR 0 1
23276: PUSH
23277: CALL_OW 44
23281: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23282: LD_VAR 0 1
23286: PPUSH
23287: LD_INT 1
23289: PPUSH
23290: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23294: LD_INT 35
23296: PPUSH
23297: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23301: LD_VAR 0 1
23305: PPUSH
23306: LD_INT 22
23308: PUSH
23309: LD_OWVAR 2
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PPUSH
23318: CALL_OW 69
23322: PPUSH
23323: LD_VAR 0 1
23327: PPUSH
23328: CALL_OW 74
23332: PPUSH
23333: CALL_OW 115
// until IsDead ( un ) ;
23337: LD_VAR 0 1
23341: PPUSH
23342: CALL_OW 301
23346: IFFALSE 23294
// end ; end_of_file
23348: PPOPN 1
23350: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
23351: LD_INT 0
23353: PPUSH
23354: PPUSH
23355: PPUSH
23356: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23357: LD_VAR 0 1
23361: PPUSH
23362: CALL_OW 264
23366: PUSH
23367: LD_EXP 66
23371: EQUAL
23372: IFFALSE 23444
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23374: LD_INT 68
23376: PPUSH
23377: LD_VAR 0 1
23381: PPUSH
23382: CALL_OW 255
23386: PPUSH
23387: CALL_OW 321
23391: PUSH
23392: LD_INT 2
23394: EQUAL
23395: IFFALSE 23407
// eff := 70 else
23397: LD_ADDR_VAR 0 6
23401: PUSH
23402: LD_INT 70
23404: ST_TO_ADDR
23405: GO 23415
// eff := 30 ;
23407: LD_ADDR_VAR 0 6
23411: PUSH
23412: LD_INT 30
23414: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23415: LD_VAR 0 1
23419: PPUSH
23420: CALL_OW 250
23424: PPUSH
23425: LD_VAR 0 1
23429: PPUSH
23430: CALL_OW 251
23434: PPUSH
23435: LD_VAR 0 6
23439: PPUSH
23440: CALL_OW 495
// end ; end ;
23444: LD_VAR 0 4
23448: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
23449: LD_INT 0
23451: PPUSH
23452: PPUSH
23453: PPUSH
23454: PPUSH
23455: PPUSH
23456: PPUSH
// if cmd = 124 then
23457: LD_VAR 0 1
23461: PUSH
23462: LD_INT 124
23464: EQUAL
23465: IFFALSE 23671
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
23467: LD_ADDR_VAR 0 5
23471: PUSH
23472: LD_INT 2
23474: PUSH
23475: LD_INT 34
23477: PUSH
23478: LD_INT 53
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 34
23487: PUSH
23488: LD_INT 14
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: LIST
23499: PPUSH
23500: CALL_OW 69
23504: ST_TO_ADDR
// if not tmp then
23505: LD_VAR 0 5
23509: NOT
23510: IFFALSE 23514
// exit ;
23512: GO 23671
// for i in tmp do
23514: LD_ADDR_VAR 0 3
23518: PUSH
23519: LD_VAR 0 5
23523: PUSH
23524: FOR_IN
23525: IFFALSE 23669
// begin taskList := GetTaskList ( i ) ;
23527: LD_ADDR_VAR 0 6
23531: PUSH
23532: LD_VAR 0 3
23536: PPUSH
23537: CALL_OW 437
23541: ST_TO_ADDR
// if not taskList then
23542: LD_VAR 0 6
23546: NOT
23547: IFFALSE 23551
// continue ;
23549: GO 23524
// for j = 1 to taskList do
23551: LD_ADDR_VAR 0 4
23555: PUSH
23556: DOUBLE
23557: LD_INT 1
23559: DEC
23560: ST_TO_ADDR
23561: LD_VAR 0 6
23565: PUSH
23566: FOR_TO
23567: IFFALSE 23665
// if taskList [ j ] [ 1 ] = | then
23569: LD_VAR 0 6
23573: PUSH
23574: LD_VAR 0 4
23578: ARRAY
23579: PUSH
23580: LD_INT 1
23582: ARRAY
23583: PUSH
23584: LD_STRING |
23586: EQUAL
23587: IFFALSE 23663
// begin _taskList := Delete ( taskList , 1 ) ;
23589: LD_ADDR_VAR 0 7
23593: PUSH
23594: LD_VAR 0 6
23598: PPUSH
23599: LD_INT 1
23601: PPUSH
23602: CALL_OW 3
23606: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
23607: LD_VAR 0 3
23611: PPUSH
23612: LD_VAR 0 7
23616: PPUSH
23617: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
23621: LD_VAR 0 3
23625: PPUSH
23626: LD_VAR 0 6
23630: PUSH
23631: LD_VAR 0 4
23635: ARRAY
23636: PUSH
23637: LD_INT 2
23639: ARRAY
23640: PPUSH
23641: LD_VAR 0 6
23645: PUSH
23646: LD_VAR 0 4
23650: ARRAY
23651: PUSH
23652: LD_INT 3
23654: ARRAY
23655: PPUSH
23656: LD_INT 8
23658: PPUSH
23659: CALL 23676 0 4
// end ;
23663: GO 23566
23665: POP
23666: POP
// end ;
23667: GO 23524
23669: POP
23670: POP
// end ; end ;
23671: LD_VAR 0 2
23675: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23676: LD_INT 0
23678: PPUSH
23679: PPUSH
23680: PPUSH
23681: PPUSH
23682: PPUSH
23683: PPUSH
23684: PPUSH
23685: PPUSH
23686: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23687: LD_VAR 0 1
23691: NOT
23692: PUSH
23693: LD_VAR 0 2
23697: PPUSH
23698: LD_VAR 0 3
23702: PPUSH
23703: CALL_OW 488
23707: NOT
23708: OR
23709: PUSH
23710: LD_VAR 0 4
23714: NOT
23715: OR
23716: IFFALSE 23720
// exit ;
23718: GO 24060
// list := [ ] ;
23720: LD_ADDR_VAR 0 13
23724: PUSH
23725: EMPTY
23726: ST_TO_ADDR
// if x - r < 0 then
23727: LD_VAR 0 2
23731: PUSH
23732: LD_VAR 0 4
23736: MINUS
23737: PUSH
23738: LD_INT 0
23740: LESS
23741: IFFALSE 23753
// min_x := 0 else
23743: LD_ADDR_VAR 0 7
23747: PUSH
23748: LD_INT 0
23750: ST_TO_ADDR
23751: GO 23769
// min_x := x - r ;
23753: LD_ADDR_VAR 0 7
23757: PUSH
23758: LD_VAR 0 2
23762: PUSH
23763: LD_VAR 0 4
23767: MINUS
23768: ST_TO_ADDR
// if y - r < 0 then
23769: LD_VAR 0 3
23773: PUSH
23774: LD_VAR 0 4
23778: MINUS
23779: PUSH
23780: LD_INT 0
23782: LESS
23783: IFFALSE 23795
// min_y := 0 else
23785: LD_ADDR_VAR 0 8
23789: PUSH
23790: LD_INT 0
23792: ST_TO_ADDR
23793: GO 23811
// min_y := y - r ;
23795: LD_ADDR_VAR 0 8
23799: PUSH
23800: LD_VAR 0 3
23804: PUSH
23805: LD_VAR 0 4
23809: MINUS
23810: ST_TO_ADDR
// max_x := x + r ;
23811: LD_ADDR_VAR 0 9
23815: PUSH
23816: LD_VAR 0 2
23820: PUSH
23821: LD_VAR 0 4
23825: PLUS
23826: ST_TO_ADDR
// max_y := y + r ;
23827: LD_ADDR_VAR 0 10
23831: PUSH
23832: LD_VAR 0 3
23836: PUSH
23837: LD_VAR 0 4
23841: PLUS
23842: ST_TO_ADDR
// for _x = min_x to max_x do
23843: LD_ADDR_VAR 0 11
23847: PUSH
23848: DOUBLE
23849: LD_VAR 0 7
23853: DEC
23854: ST_TO_ADDR
23855: LD_VAR 0 9
23859: PUSH
23860: FOR_TO
23861: IFFALSE 23978
// for _y = min_y to max_y do
23863: LD_ADDR_VAR 0 12
23867: PUSH
23868: DOUBLE
23869: LD_VAR 0 8
23873: DEC
23874: ST_TO_ADDR
23875: LD_VAR 0 10
23879: PUSH
23880: FOR_TO
23881: IFFALSE 23974
// begin if not ValidHex ( _x , _y ) then
23883: LD_VAR 0 11
23887: PPUSH
23888: LD_VAR 0 12
23892: PPUSH
23893: CALL_OW 488
23897: NOT
23898: IFFALSE 23902
// continue ;
23900: GO 23880
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23902: LD_VAR 0 11
23906: PPUSH
23907: LD_VAR 0 12
23911: PPUSH
23912: CALL_OW 351
23916: PUSH
23917: LD_VAR 0 11
23921: PPUSH
23922: LD_VAR 0 12
23926: PPUSH
23927: CALL_OW 554
23931: AND
23932: IFFALSE 23972
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23934: LD_ADDR_VAR 0 13
23938: PUSH
23939: LD_VAR 0 13
23943: PPUSH
23944: LD_VAR 0 13
23948: PUSH
23949: LD_INT 1
23951: PLUS
23952: PPUSH
23953: LD_VAR 0 11
23957: PUSH
23958: LD_VAR 0 12
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PPUSH
23967: CALL_OW 2
23971: ST_TO_ADDR
// end ;
23972: GO 23880
23974: POP
23975: POP
23976: GO 23860
23978: POP
23979: POP
// if not list then
23980: LD_VAR 0 13
23984: NOT
23985: IFFALSE 23989
// exit ;
23987: GO 24060
// for i in list do
23989: LD_ADDR_VAR 0 6
23993: PUSH
23994: LD_VAR 0 13
23998: PUSH
23999: FOR_IN
24000: IFFALSE 24058
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24002: LD_VAR 0 1
24006: PPUSH
24007: LD_STRING M
24009: PUSH
24010: LD_VAR 0 6
24014: PUSH
24015: LD_INT 1
24017: ARRAY
24018: PUSH
24019: LD_VAR 0 6
24023: PUSH
24024: LD_INT 2
24026: ARRAY
24027: PUSH
24028: LD_INT 0
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: LD_INT 0
24036: PUSH
24037: LD_INT 0
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: PUSH
24049: EMPTY
24050: LIST
24051: PPUSH
24052: CALL_OW 447
24056: GO 23999
24058: POP
24059: POP
// end ;
24060: LD_VAR 0 5
24064: RET
