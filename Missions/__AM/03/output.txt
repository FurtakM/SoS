// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3460 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2674 0 0
// PrepareWesternBase ;
  41: CALL 2903 0 0
// Action ;
  45: CALL 5793 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty , vcount , tmpv ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
// uc_side := 4 ;
1157: LD_ADDR_OWVAR 20
1161: PUSH
1162: LD_INT 4
1164: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1165: LD_ADDR_EXP 46
1169: PUSH
1170: LD_STRING Powell
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: LD_STRING 
1178: PPUSH
1179: CALL 41038 0 3
1183: ST_TO_ADDR
// uc_side := 1 ;
1184: LD_ADDR_OWVAR 20
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// uc_nation := 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// if debug then
1200: LD_EXP 1
1204: IFFALSE 1550
// begin for i = 1 to 4 do
1206: LD_ADDR_VAR 0 2
1210: PUSH
1211: DOUBLE
1212: LD_INT 1
1214: DEC
1215: ST_TO_ADDR
1216: LD_INT 4
1218: PUSH
1219: FOR_TO
1220: IFFALSE 1271
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL_OW 380
// un := CreateHuman ;
1243: LD_ADDR_VAR 0 3
1247: PUSH
1248: CALL_OW 44
1252: ST_TO_ADDR
// others := others ^ un ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_VAR 0 5
1262: PUSH
1263: LD_VAR 0 3
1267: ADD
1268: ST_TO_ADDR
// end ;
1269: GO 1219
1271: POP
1272: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1273: LD_ADDR_VAR 0 6
1277: PUSH
1278: LD_INT 21
1280: PUSH
1281: LD_INT 1
1283: PUSH
1284: LD_INT 1
1286: PUSH
1287: LD_INT 42
1289: PUSH
1290: LD_INT 0
1292: PUSH
1293: LD_INT 750
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 21
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 42
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 750
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_INT 21
1332: PUSH
1333: LD_INT 1
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: LD_INT 42
1341: PUSH
1342: LD_INT 0
1344: PUSH
1345: LD_INT 750
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 42
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 750
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 21
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 44
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: LD_INT 750
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: LD_INT 43
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 750
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 21
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: LD_INT 43
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 750
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 21
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 43
1471: PUSH
1472: LD_INT 0
1474: PUSH
1475: LD_INT 750
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 21
1488: PUSH
1489: LD_INT 1
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 90
1500: PUSH
1501: LD_INT 504
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 51
1523: PUSH
1524: LD_INT 80
1526: PUSH
1527: LD_INT 750
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1550: LD_ADDR_EXP 37
1554: PUSH
1555: LD_STRING JMM
1557: PPUSH
1558: LD_EXP 1
1562: NOT
1563: PPUSH
1564: LD_EXP 3
1568: PPUSH
1569: CALL 41038 0 3
1573: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1574: LD_ADDR_EXP 38
1578: PUSH
1579: LD_STRING Bobby
1581: PPUSH
1582: LD_EXP 1
1586: NOT
1587: PPUSH
1588: LD_EXP 3
1592: PPUSH
1593: CALL 41038 0 3
1597: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1598: LD_ADDR_EXP 39
1602: PUSH
1603: LD_STRING Cyrus
1605: PPUSH
1606: LD_EXP 1
1610: NOT
1611: PPUSH
1612: LD_EXP 3
1616: PPUSH
1617: CALL 41038 0 3
1621: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1622: LD_ADDR_EXP 40
1626: PUSH
1627: LD_STRING Lisa
1629: PPUSH
1630: LD_EXP 1
1634: NOT
1635: PPUSH
1636: LD_EXP 3
1640: PPUSH
1641: CALL 41038 0 3
1645: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1646: LD_ADDR_EXP 41
1650: PUSH
1651: LD_STRING Khatam
1653: PPUSH
1654: LD_EXP 1
1658: NOT
1659: PPUSH
1660: LD_EXP 3
1664: PPUSH
1665: CALL 41038 0 3
1669: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1670: LD_ADDR_EXP 42
1674: PUSH
1675: LD_STRING Brian
1677: PPUSH
1678: LD_EXP 1
1682: NOT
1683: PPUSH
1684: LD_EXP 3
1688: PPUSH
1689: CALL 41038 0 3
1693: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1694: LD_ADDR_EXP 43
1698: PUSH
1699: LD_STRING Jerry
1701: PPUSH
1702: LD_EXP 1
1706: NOT
1707: PPUSH
1708: LD_EXP 3
1712: PPUSH
1713: CALL 41038 0 3
1717: ST_TO_ADDR
// if Bobby then
1718: LD_EXP 38
1722: IFFALSE 1753
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1724: LD_ADDR_VAR 0 4
1728: PUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: LD_VAR 0 4
1738: PUSH
1739: LD_INT 1
1741: PLUS
1742: PPUSH
1743: LD_EXP 38
1747: PPUSH
1748: CALL_OW 2
1752: ST_TO_ADDR
// if Cyrus then
1753: LD_EXP 39
1757: IFFALSE 1788
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_VAR 0 4
1773: PUSH
1774: LD_INT 1
1776: PLUS
1777: PPUSH
1778: LD_EXP 39
1782: PPUSH
1783: CALL_OW 2
1787: ST_TO_ADDR
// if Lisa then
1788: LD_EXP 40
1792: IFFALSE 1823
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: LD_VAR 0 4
1808: PUSH
1809: LD_INT 1
1811: PLUS
1812: PPUSH
1813: LD_EXP 40
1817: PPUSH
1818: CALL_OW 2
1822: ST_TO_ADDR
// if Khatam then
1823: LD_EXP 41
1827: IFFALSE 1858
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: LD_VAR 0 4
1843: PUSH
1844: LD_INT 1
1846: PLUS
1847: PPUSH
1848: LD_EXP 41
1852: PPUSH
1853: CALL_OW 2
1857: ST_TO_ADDR
// if Brian then
1858: LD_EXP 42
1862: IFFALSE 1893
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1864: LD_ADDR_VAR 0 4
1868: PUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_VAR 0 4
1878: PUSH
1879: LD_INT 1
1881: PLUS
1882: PPUSH
1883: LD_EXP 42
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// if Jerry then
1893: LD_EXP 43
1897: IFFALSE 1928
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: PLUS
1917: PPUSH
1918: LD_EXP 43
1922: PPUSH
1923: CALL_OW 2
1927: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1928: LD_STRING 02_other_survivors
1930: PPUSH
1931: CALL_OW 28
1935: IFFALSE 1950
// others := CreateCharacterSet ( 02_other_survivors ) ;
1937: LD_ADDR_VAR 0 5
1941: PUSH
1942: LD_STRING 02_other_survivors
1944: PPUSH
1945: CALL_OW 31
1949: ST_TO_ADDR
// if others then
1950: LD_VAR 0 5
1954: IFFALSE 1979
// begin tmp := tmp ^ others ;
1956: LD_ADDR_VAR 0 4
1960: PUSH
1961: LD_VAR 0 4
1965: PUSH
1966: LD_VAR 0 5
1970: ADD
1971: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1972: LD_STRING 02_other_survivors
1974: PPUSH
1975: CALL_OW 40
// end ; jmm_units := tmp diff 0 ;
1979: LD_ADDR_EXP 4
1983: PUSH
1984: LD_VAR 0 4
1988: PUSH
1989: LD_INT 0
1991: DIFF
1992: ST_TO_ADDR
// if not vehicles then
1993: LD_VAR 0 6
1997: NOT
1998: IFFALSE 2015
// vehicles := LoadVariable ( 02_tanks_1 , [ ] ) ;
2000: LD_ADDR_VAR 0 6
2004: PUSH
2005: LD_STRING 02_tanks_1
2007: PPUSH
2008: EMPTY
2009: PPUSH
2010: CALL_OW 30
2014: ST_TO_ADDR
// if vehicles then
2015: LD_VAR 0 6
2019: IFFALSE 2387
// begin got_mech := false ;
2021: LD_ADDR_VAR 0 7
2025: PUSH
2026: LD_INT 0
2028: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 72
2048: IFFALSE 2058
// got_mech := true ;
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// vcount := Count ( vehicles ) ;
2058: LD_ADDR_VAR 0 9
2062: PUSH
2063: LD_VAR 0 6
2067: PPUSH
2068: CALL 43238 0 1
2072: ST_TO_ADDR
// if vcount > 1 then
2073: LD_VAR 0 9
2077: PUSH
2078: LD_INT 1
2080: GREATER
2081: IFFALSE 2184
// begin for i := 2 to vcount do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 2
2091: DEC
2092: ST_TO_ADDR
2093: LD_VAR 0 9
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2182
// if vehicles [ i ] [ 4 ] = ru_cargo_bay then
2101: LD_VAR 0 6
2105: PUSH
2106: LD_VAR 0 2
2110: ARRAY
2111: PUSH
2112: LD_INT 4
2114: ARRAY
2115: PUSH
2116: LD_INT 51
2118: EQUAL
2119: IFFALSE 2180
// begin tmpv := vehicles [ i ] ;
2121: LD_ADDR_VAR 0 10
2125: PUSH
2126: LD_VAR 0 6
2130: PUSH
2131: LD_VAR 0 2
2135: ARRAY
2136: ST_TO_ADDR
// vehicles := Delete ( vehicles , i ) ;
2137: LD_ADDR_VAR 0 6
2141: PUSH
2142: LD_VAR 0 6
2146: PPUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 3
2156: ST_TO_ADDR
// vehicles := Insert ( vehicles , 1 , tmpv ) ;
2157: LD_ADDR_VAR 0 6
2161: PUSH
2162: LD_VAR 0 6
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_VAR 0 10
2174: PPUSH
2175: CALL_OW 2
2179: ST_TO_ADDR
// end ;
2180: GO 2098
2182: POP
2183: POP
// end ; if vcount > 6 then
2184: LD_VAR 0 9
2188: PUSH
2189: LD_INT 6
2191: GREATER
2192: IFFALSE 2202
// vcount := 6 ;
2194: LD_ADDR_VAR 0 9
2198: PUSH
2199: LD_INT 6
2201: ST_TO_ADDR
// if jmm_units + 1 < vcount then
2202: LD_EXP 4
2206: PUSH
2207: LD_INT 1
2209: PLUS
2210: PUSH
2211: LD_VAR 0 9
2215: LESS
2216: IFFALSE 2232
// vcount := jmm_units + 1 ;
2218: LD_ADDR_VAR 0 9
2222: PUSH
2223: LD_EXP 4
2227: PUSH
2228: LD_INT 1
2230: PLUS
2231: ST_TO_ADDR
// for i := 1 to vcount do
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: DOUBLE
2238: LD_INT 1
2240: DEC
2241: ST_TO_ADDR
2242: LD_VAR 0 9
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2385
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 3
2260: PPUSH
2261: LD_VAR 0 6
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: LD_VAR 0 6
2280: PUSH
2281: LD_VAR 0 2
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 6
2295: PUSH
2296: LD_VAR 0 2
2300: ARRAY
2301: PUSH
2302: LD_INT 3
2304: ARRAY
2305: PPUSH
2306: LD_VAR 0 6
2310: PUSH
2311: LD_VAR 0 2
2315: ARRAY
2316: PUSH
2317: LD_INT 4
2319: ARRAY
2320: PPUSH
2321: LD_INT 40
2323: PPUSH
2324: CALL 497 0 7
2328: ST_TO_ADDR
// if not got_mech then
2329: LD_VAR 0 7
2333: NOT
2334: IFFALSE 2360
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_VAR 0 6
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_INT 6
2354: ARRAY
2355: PPUSH
2356: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_VAR 0 3
2377: PPUSH
2378: CALL_OW 2
2382: ST_TO_ADDR
// end ;
2383: GO 2247
2385: POP
2386: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
2387: LD_EXP 37
2391: PPUSH
2392: LD_INT 194
2394: PPUSH
2395: LD_INT 119
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 48
// if tmp then
2405: LD_VAR 0 4
2409: IFFALSE 2601
// begin for i in tmp do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_VAR 0 4
2420: PUSH
2421: FOR_IN
2422: IFFALSE 2599
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL_OW 257
2433: PUSH
2434: LD_INT 1
2436: NONEQUAL
2437: IFFALSE 2451
2439: PUSH
2440: LD_VAR 0 2
2444: PUSH
2445: LD_EXP 41
2449: NONEQUAL
2450: AND
2451: IFFALSE 2465
// SetClass ( i , 1 ) ;
2453: LD_VAR 0 2
2457: PPUSH
2458: LD_INT 1
2460: PPUSH
2461: CALL_OW 336
// if i = Khatam then
2465: LD_VAR 0 2
2469: PUSH
2470: LD_EXP 41
2474: EQUAL
2475: IFFALSE 2489
// SetClass ( i , 4 ) ;
2477: LD_VAR 0 2
2481: PPUSH
2482: LD_INT 4
2484: PPUSH
2485: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2489: LD_ADDR_VAR 0 8
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 21
2506: PUSH
2507: LD_INT 2
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 58
2516: PUSH
2517: EMPTY
2518: LIST
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: LIST
2524: PPUSH
2525: CALL_OW 69
2529: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2530: LD_VAR 0 2
2534: PPUSH
2535: CALL_OW 247
2539: PUSH
2540: LD_INT 1
2542: EQUAL
2543: IFFALSE 2551
2545: PUSH
2546: LD_VAR 0 8
2550: AND
2551: IFFALSE 2573
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2553: LD_VAR 0 2
2557: PPUSH
2558: LD_VAR 0 8
2562: PUSH
2563: LD_INT 1
2565: ARRAY
2566: PPUSH
2567: CALL_OW 52
2571: GO 2588
// PlaceUnitArea ( i , startArea , false ) ;
2573: LD_VAR 0 2
2577: PPUSH
2578: LD_INT 1
2580: PPUSH
2581: LD_INT 0
2583: PPUSH
2584: CALL_OW 49
// ComHold ( i ) ;
2588: LD_VAR 0 2
2592: PPUSH
2593: CALL_OW 140
// end ;
2597: GO 2421
2599: POP
2600: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2601: LD_ADDR_EXP 7
2605: PUSH
2606: LD_STRING 02_mikhailStatus_1
2608: PPUSH
2609: LD_INT 0
2611: PPUSH
2612: CALL_OW 30
2616: ST_TO_ADDR
// if not bierezov_exist and not debug then
2617: LD_EXP 7
2621: NOT
2622: IFFALSE 2631
2624: PUSH
2625: LD_EXP 1
2629: NOT
2630: AND
2631: IFFALSE 2635
// exit ;
2633: GO 2669
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2635: LD_ADDR_EXP 45
2639: PUSH
2640: LD_STRING Mikhail
2642: PPUSH
2643: LD_INT 0
2645: PPUSH
2646: LD_STRING 
2648: PPUSH
2649: CALL 41038 0 3
2653: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2654: LD_EXP 45
2658: PPUSH
2659: LD_INT 1
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: CALL_OW 49
// end ;
2669: LD_VAR 0 1
2673: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2674: LD_INT 0
2676: PPUSH
2677: PPUSH
2678: PPUSH
2679: PPUSH
// uc_side := 4 ;
2680: LD_ADDR_OWVAR 20
2684: PUSH
2685: LD_INT 4
2687: ST_TO_ADDR
// uc_nation := 1 ;
2688: LD_ADDR_OWVAR 21
2692: PUSH
2693: LD_INT 1
2695: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2696: LD_ADDR_EXP 44
2700: PUSH
2701: LD_STRING Cornell
2703: PPUSH
2704: LD_INT 0
2706: PPUSH
2707: LD_STRING 
2709: PPUSH
2710: CALL 41038 0 3
2714: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2715: LD_ADDR_EXP 6
2719: PUSH
2720: LD_INT 9
2722: PUSH
2723: LD_EXP 4
2727: MINUS
2728: ST_TO_ADDR
// tmp := [ ] ;
2729: LD_ADDR_VAR 0 2
2733: PUSH
2734: EMPTY
2735: ST_TO_ADDR
// if cornel_units < 4 then
2736: LD_EXP 6
2740: PUSH
2741: LD_INT 4
2743: LESS
2744: IFFALSE 2754
// cornel_units := 4 ;
2746: LD_ADDR_EXP 6
2750: PUSH
2751: LD_INT 4
2753: ST_TO_ADDR
// for i = 1 to cornel_units do
2754: LD_ADDR_VAR 0 4
2758: PUSH
2759: DOUBLE
2760: LD_INT 1
2762: DEC
2763: ST_TO_ADDR
2764: LD_EXP 6
2768: PUSH
2769: FOR_TO
2770: IFFALSE 2868
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2772: LD_INT 0
2774: PPUSH
2775: LD_INT 1
2777: PUSH
2778: LD_INT 1
2780: PUSH
2781: LD_INT 1
2783: PUSH
2784: LD_INT 2
2786: PUSH
2787: LD_INT 4
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: LIST
2794: LIST
2795: LIST
2796: PUSH
2797: LD_VAR 0 4
2801: PUSH
2802: LD_INT 5
2804: MOD
2805: PUSH
2806: LD_INT 1
2808: PLUS
2809: ARRAY
2810: PPUSH
2811: LD_INT 2
2813: PPUSH
2814: CALL_OW 380
// un := CreateHuman ;
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: CALL_OW 44
2827: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2828: LD_ADDR_VAR 0 2
2832: PUSH
2833: LD_VAR 0 2
2837: PPUSH
2838: LD_INT 1
2840: PPUSH
2841: LD_VAR 0 3
2845: PPUSH
2846: CALL_OW 2
2850: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2851: LD_VAR 0 3
2855: PPUSH
2856: LD_INT 2
2858: PPUSH
2859: LD_INT 0
2861: PPUSH
2862: CALL_OW 49
// end ;
2866: GO 2769
2868: POP
2869: POP
// cornel_units := tmp ;
2870: LD_ADDR_EXP 6
2874: PUSH
2875: LD_VAR 0 2
2879: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2880: LD_EXP 44
2884: PPUSH
2885: LD_INT 191
2887: PPUSH
2888: LD_INT 106
2890: PPUSH
2891: LD_INT 0
2893: PPUSH
2894: CALL_OW 48
// end ;
2898: LD_VAR 0 1
2902: RET
// export function PrepareWesternBase ; var i ; begin
2903: LD_INT 0
2905: PPUSH
2906: PPUSH
// uc_side := 8 ;
2907: LD_ADDR_OWVAR 20
2911: PUSH
2912: LD_INT 8
2914: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2915: LD_ADDR_EXP 47
2919: PUSH
2920: LD_STRING Lynch
2922: PPUSH
2923: LD_INT 0
2925: PPUSH
2926: LD_STRING 
2928: PPUSH
2929: CALL 41038 0 3
2933: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2934: LD_ADDR_EXP 48
2938: PUSH
2939: LD_STRING Walker
2941: PPUSH
2942: LD_INT 0
2944: PPUSH
2945: LD_STRING 
2947: PPUSH
2948: CALL 41038 0 3
2952: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2953: LD_ADDR_EXP 49
2957: PUSH
2958: LD_STRING Turner
2960: PPUSH
2961: LD_INT 0
2963: PPUSH
2964: LD_STRING 
2966: PPUSH
2967: CALL 41038 0 3
2971: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2972: LD_ADDR_EXP 50
2976: PUSH
2977: LD_STRING Jillian
2979: PPUSH
2980: LD_INT 0
2982: PPUSH
2983: LD_STRING 
2985: PPUSH
2986: CALL 41038 0 3
2990: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2991: LD_ADDR_VAR 0 2
2995: PUSH
2996: LD_EXP 47
3000: PUSH
3001: LD_EXP 48
3005: PUSH
3006: LD_EXP 49
3010: PUSH
3011: LD_EXP 50
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: PUSH
3022: FOR_IN
3023: IFFALSE 3051
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
3025: LD_VAR 0 2
3029: PPUSH
3030: LD_INT 3
3032: PPUSH
3033: LD_INT 0
3035: PPUSH
3036: CALL_OW 49
// ComHold ( i ) ;
3040: LD_VAR 0 2
3044: PPUSH
3045: CALL_OW 140
// end ;
3049: GO 3022
3051: POP
3052: POP
// end ;
3053: LD_VAR 0 1
3057: RET
// export function SelectGroup ; var units , selected , i ; begin
3058: LD_INT 0
3060: PPUSH
3061: PPUSH
3062: PPUSH
3063: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
3064: LD_ADDR_VAR 0 2
3068: PUSH
3069: LD_EXP 37
3073: PUSH
3074: LD_INT -3
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: PUSH
3081: LD_EXP 4
3085: ADD
3086: PUSH
3087: LD_INT -2
3089: PUSH
3090: LD_INT -4
3092: PUSH
3093: LD_EXP 44
3097: PUSH
3098: LD_EXP 45
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: LIST
3107: LIST
3108: ADD
3109: PUSH
3110: LD_INT -3
3112: PUSH
3113: EMPTY
3114: LIST
3115: ADD
3116: PUSH
3117: LD_EXP 6
3121: ADD
3122: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
3123: LD_ADDR_VAR 0 3
3127: PUSH
3128: LD_EXP 37
3132: PUSH
3133: LD_STRING Select four characters to go with you
3135: PPUSH
3136: LD_INT 4
3138: PPUSH
3139: LD_INT 4
3141: PPUSH
3142: LD_VAR 0 2
3146: PPUSH
3147: EMPTY
3148: PPUSH
3149: CALL_OW 42
3153: ADD
3154: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
3155: LD_ADDR_EXP 6
3159: PUSH
3160: LD_EXP 4
3164: PUSH
3165: LD_EXP 6
3169: UNION
3170: PUSH
3171: LD_VAR 0 3
3175: DIFF
3176: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
3177: LD_ADDR_VAR 0 4
3181: PUSH
3182: LD_EXP 6
3186: PUSH
3187: LD_EXP 45
3191: ADD
3192: PUSH
3193: FOR_IN
3194: IFFALSE 3225
// if GetSide ( i ) = 1 then
3196: LD_VAR 0 4
3200: PPUSH
3201: CALL_OW 255
3205: PUSH
3206: LD_INT 1
3208: EQUAL
3209: IFFALSE 3223
// SetSide ( i , 4 ) ;
3211: LD_VAR 0 4
3215: PPUSH
3216: LD_INT 4
3218: PPUSH
3219: CALL_OW 235
3223: GO 3193
3225: POP
3226: POP
// for i in selected do
3227: LD_ADDR_VAR 0 4
3231: PUSH
3232: LD_VAR 0 3
3236: PUSH
3237: FOR_IN
3238: IFFALSE 3269
// if GetSide ( i ) = 4 then
3240: LD_VAR 0 4
3244: PPUSH
3245: CALL_OW 255
3249: PUSH
3250: LD_INT 4
3252: EQUAL
3253: IFFALSE 3267
// SetSide ( i , 1 ) ;
3255: LD_VAR 0 4
3259: PPUSH
3260: LD_INT 1
3262: PPUSH
3263: CALL_OW 235
3267: GO 3237
3269: POP
3270: POP
// jmm_units := jmm_units diff cornel_units ;
3271: LD_ADDR_EXP 4
3275: PUSH
3276: LD_EXP 4
3280: PUSH
3281: LD_EXP 6
3285: DIFF
3286: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
3287: LD_EXP 38
3291: PPUSH
3292: CALL_OW 255
3296: PUSH
3297: LD_INT 4
3299: EQUAL
3300: IFFALSE 3315
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
3302: LD_EXP 3
3306: PUSH
3307: LD_STRING Bobby
3309: STR
3310: PPUSH
3311: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
3315: LD_EXP 39
3319: PPUSH
3320: CALL_OW 255
3324: PUSH
3325: LD_INT 4
3327: EQUAL
3328: IFFALSE 3343
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
3330: LD_EXP 3
3334: PUSH
3335: LD_STRING Cyrus
3337: STR
3338: PPUSH
3339: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
3343: LD_EXP 40
3347: PPUSH
3348: CALL_OW 255
3352: PUSH
3353: LD_INT 4
3355: EQUAL
3356: IFFALSE 3371
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
3358: LD_EXP 3
3362: PUSH
3363: LD_STRING Lisa
3365: STR
3366: PPUSH
3367: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
3371: LD_EXP 41
3375: PPUSH
3376: CALL_OW 255
3380: PUSH
3381: LD_INT 4
3383: EQUAL
3384: IFFALSE 3399
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
3386: LD_EXP 3
3390: PUSH
3391: LD_STRING Khatam
3393: STR
3394: PPUSH
3395: CALL_OW 40
// if GetSide ( Brian ) = 4 then
3399: LD_EXP 42
3403: PPUSH
3404: CALL_OW 255
3408: PUSH
3409: LD_INT 4
3411: EQUAL
3412: IFFALSE 3427
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3414: LD_EXP 3
3418: PUSH
3419: LD_STRING Brian
3421: STR
3422: PPUSH
3423: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3427: LD_EXP 43
3431: PPUSH
3432: CALL_OW 255
3436: PUSH
3437: LD_INT 4
3439: EQUAL
3440: IFFALSE 3455
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3442: LD_EXP 3
3446: PUSH
3447: LD_STRING Jerry
3449: STR
3450: PPUSH
3451: CALL_OW 40
// end ; end_of_file
3455: LD_VAR 0 1
3459: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3460: LD_INT 0
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
3469: PPUSH
3470: PPUSH
3471: PPUSH
3472: PPUSH
3473: PPUSH
3474: PPUSH
// ru_alert := false ;
3475: LD_ADDR_EXP 60
3479: PUSH
3480: LD_INT 0
3482: ST_TO_ADDR
// ru_produce_list := [ ] ;
3483: LD_ADDR_EXP 57
3487: PUSH
3488: EMPTY
3489: ST_TO_ADDR
// if Difficulty > 1 then
3490: LD_OWVAR 67
3494: PUSH
3495: LD_INT 1
3497: GREATER
3498: IFFALSE 3622
// begin uc_side := 3 ;
3500: LD_ADDR_OWVAR 20
3504: PUSH
3505: LD_INT 3
3507: ST_TO_ADDR
// uc_nation := 3 ;
3508: LD_ADDR_OWVAR 21
3512: PUSH
3513: LD_INT 3
3515: ST_TO_ADDR
// bc_type := b_breastwork ;
3516: LD_ADDR_OWVAR 42
3520: PUSH
3521: LD_INT 31
3523: ST_TO_ADDR
// bc_level := Difficulty ;
3524: LD_ADDR_OWVAR 43
3528: PUSH
3529: LD_OWVAR 67
3533: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3534: LD_INT 22
3536: PPUSH
3537: LD_INT 14
3539: PPUSH
3540: LD_INT 0
3542: PPUSH
3543: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3547: LD_INT 48
3549: PPUSH
3550: LD_INT 46
3552: PPUSH
3553: LD_INT 0
3555: PPUSH
3556: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3560: LD_INT 86
3562: PPUSH
3563: LD_INT 65
3565: PPUSH
3566: LD_INT 5
3568: PPUSH
3569: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3573: LD_INT 165
3575: PPUSH
3576: LD_INT 73
3578: PPUSH
3579: LD_INT 5
3581: PPUSH
3582: CALL_OW 47
// if Difficulty > 2 then
3586: LD_OWVAR 67
3590: PUSH
3591: LD_INT 2
3593: GREATER
3594: IFFALSE 3622
// begin CreateAndPlaceBuildingXYD ( 152 , 114 , 4 ) ;
3596: LD_INT 152
3598: PPUSH
3599: LD_INT 114
3601: PPUSH
3602: LD_INT 4
3604: PPUSH
3605: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 157 , 97 , 4 ) ;
3609: LD_INT 157
3611: PPUSH
3612: LD_INT 97
3614: PPUSH
3615: LD_INT 4
3617: PPUSH
3618: CALL_OW 47
// end ; end ; if Difficulty >= 3 then
3622: LD_OWVAR 67
3626: PUSH
3627: LD_INT 3
3629: GREATEREQUAL
3630: IFFALSE 3645
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3632: LD_INT 51
3634: PPUSH
3635: LD_INT 3
3637: PPUSH
3638: LD_INT 2
3640: PPUSH
3641: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3645: LD_ADDR_VAR 0 7
3649: PUSH
3650: LD_INT 22
3652: PUSH
3653: LD_INT 3
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: LD_INT 2
3662: PUSH
3663: LD_INT 30
3665: PUSH
3666: LD_INT 31
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: PUSH
3673: LD_INT 30
3675: PUSH
3676: LD_INT 32
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PPUSH
3692: CALL_OW 69
3696: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3697: LD_ADDR_VAR 0 8
3701: PUSH
3702: LD_INT 22
3704: PUSH
3705: LD_INT 3
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PUSH
3712: LD_INT 30
3714: PUSH
3715: LD_INT 4
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: PPUSH
3726: CALL_OW 69
3730: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3731: LD_ADDR_VAR 0 10
3735: PUSH
3736: LD_INT 22
3738: PUSH
3739: LD_INT 3
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: PUSH
3746: LD_INT 30
3748: PUSH
3749: LD_INT 3
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PPUSH
3760: CALL_OW 69
3764: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3765: LD_ADDR_VAR 0 9
3769: PUSH
3770: LD_INT 22
3772: PUSH
3773: LD_INT 3
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: PUSH
3780: LD_INT 30
3782: PUSH
3783: LD_INT 6
3785: PUSH
3786: EMPTY
3787: LIST
3788: LIST
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PPUSH
3794: CALL_OW 69
3798: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3799: LD_ADDR_VAR 0 2
3803: PUSH
3804: LD_INT 22
3806: PUSH
3807: LD_INT 3
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: PUSH
3814: LD_INT 30
3816: PUSH
3817: LD_INT 1
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: PPUSH
3828: CALL_OW 69
3832: PUSH
3833: FOR_IN
3834: IFFALSE 3878
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3836: LD_VAR 0 2
3840: PPUSH
3841: CALL_OW 274
3845: PPUSH
3846: LD_INT 1
3848: PPUSH
3849: LD_INT 1000
3851: PPUSH
3852: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3856: LD_VAR 0 2
3860: PPUSH
3861: CALL_OW 274
3865: PPUSH
3866: LD_INT 2
3868: PPUSH
3869: LD_INT 300
3871: PPUSH
3872: CALL_OW 277
// end ;
3876: GO 3833
3878: POP
3879: POP
// uc_side := 3 ;
3880: LD_ADDR_OWVAR 20
3884: PUSH
3885: LD_INT 3
3887: ST_TO_ADDR
// uc_nation := 3 ;
3888: LD_ADDR_OWVAR 21
3892: PUSH
3893: LD_INT 3
3895: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3896: LD_ADDR_VAR 0 11
3900: PUSH
3901: LD_INT 2
3903: PUSH
3904: LD_INT 3
3906: PUSH
3907: LD_INT 4
3909: PUSH
3910: LD_INT 4
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: PUSH
3919: LD_OWVAR 67
3923: ARRAY
3924: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3925: LD_ADDR_EXP 52
3929: PUSH
3930: LD_STRING Pokryshkin
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: LD_STRING 
3938: PPUSH
3939: CALL 41038 0 3
3943: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3944: LD_EXP 52
3948: PPUSH
3949: LD_INT 63
3951: PPUSH
3952: LD_INT 21
3954: PPUSH
3955: LD_INT 0
3957: PPUSH
3958: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3962: LD_EXP 52
3966: PPUSH
3967: CALL_OW 140
// InitHc ;
3971: CALL_OW 19
// for i in fac do
3975: LD_ADDR_VAR 0 2
3979: PUSH
3980: LD_VAR 0 10
3984: PUSH
3985: FOR_IN
3986: IFFALSE 4039
// begin for j = 1 to 6 do
3988: LD_ADDR_VAR 0 3
3992: PUSH
3993: DOUBLE
3994: LD_INT 1
3996: DEC
3997: ST_TO_ADDR
3998: LD_INT 6
4000: PUSH
4001: FOR_TO
4002: IFFALSE 4035
// begin PrepareHuman ( false , 3 , skill ) ;
4004: LD_INT 0
4006: PPUSH
4007: LD_INT 3
4009: PPUSH
4010: LD_VAR 0 11
4014: PPUSH
4015: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4019: CALL_OW 44
4023: PPUSH
4024: LD_VAR 0 2
4028: PPUSH
4029: CALL_OW 52
// end ;
4033: GO 4001
4035: POP
4036: POP
// end ;
4037: GO 3985
4039: POP
4040: POP
// for i in lab do
4041: LD_ADDR_VAR 0 2
4045: PUSH
4046: LD_VAR 0 9
4050: PUSH
4051: FOR_IN
4052: IFFALSE 4085
// begin PrepareHuman ( false , 4 , skill ) ;
4054: LD_INT 0
4056: PPUSH
4057: LD_INT 4
4059: PPUSH
4060: LD_VAR 0 11
4064: PPUSH
4065: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4069: CALL_OW 44
4073: PPUSH
4074: LD_VAR 0 2
4078: PPUSH
4079: CALL_OW 52
// end ;
4083: GO 4051
4085: POP
4086: POP
// for i in tw do
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: LD_VAR 0 7
4096: PUSH
4097: FOR_IN
4098: IFFALSE 4147
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
4100: LD_VAR 0 2
4104: PPUSH
4105: LD_INT 42
4107: PUSH
4108: LD_INT 43
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PUSH
4115: LD_INT 1
4117: PPUSH
4118: LD_INT 2
4120: PPUSH
4121: CALL_OW 12
4125: ARRAY
4126: PPUSH
4127: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
4131: LD_VAR 0 11
4135: PPUSH
4136: LD_VAR 0 2
4140: PPUSH
4141: CALL 775 0 2
// end ;
4145: GO 4097
4147: POP
4148: POP
// for i in bar do
4149: LD_ADDR_VAR 0 2
4153: PUSH
4154: LD_VAR 0 8
4158: PUSH
4159: FOR_IN
4160: IFFALSE 4193
// begin PrepareHuman ( false , 1 , skill ) ;
4162: LD_INT 0
4164: PPUSH
4165: LD_INT 1
4167: PPUSH
4168: LD_VAR 0 11
4172: PPUSH
4173: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4177: CALL_OW 44
4181: PPUSH
4182: LD_VAR 0 2
4186: PPUSH
4187: CALL_OW 52
// end ;
4191: GO 4159
4193: POP
4194: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
4195: LD_ADDR_VAR 0 13
4199: PUSH
4200: LD_INT 100
4202: PUSH
4203: LD_INT 9
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PUSH
4210: LD_INT 135
4212: PUSH
4213: LD_INT 60
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: LD_INT 41
4222: PUSH
4223: LD_INT 6
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: LD_INT 22
4232: PUSH
4233: LD_INT 9
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_INT 84
4242: PUSH
4243: LD_INT 14
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: ST_TO_ADDR
// vehicles := [ ] ;
4257: LD_ADDR_VAR 0 12
4261: PUSH
4262: EMPTY
4263: ST_TO_ADDR
// for i in spot_xy do
4264: LD_ADDR_VAR 0 2
4268: PUSH
4269: LD_VAR 0 13
4273: PUSH
4274: FOR_IN
4275: IFFALSE 4433
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
4277: LD_ADDR_VAR 0 6
4281: PUSH
4282: LD_INT 3
4284: PPUSH
4285: LD_INT 3
4287: PPUSH
4288: LD_INT 22
4290: PPUSH
4291: LD_INT 1
4293: PPUSH
4294: LD_INT 1
4296: PPUSH
4297: LD_INT 42
4299: PUSH
4300: LD_INT 43
4302: PUSH
4303: LD_INT 44
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 1
4313: PPUSH
4314: LD_INT 3
4316: PPUSH
4317: CALL_OW 12
4321: ARRAY
4322: PPUSH
4323: LD_INT 100
4325: PPUSH
4326: CALL 497 0 7
4330: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
4331: LD_ADDR_VAR 0 12
4335: PUSH
4336: LD_VAR 0 12
4340: PPUSH
4341: LD_VAR 0 12
4345: PUSH
4346: LD_INT 1
4348: PLUS
4349: PPUSH
4350: LD_VAR 0 6
4354: PPUSH
4355: CALL_OW 2
4359: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4360: LD_VAR 0 6
4364: PPUSH
4365: LD_INT 3
4367: PPUSH
4368: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
4372: LD_VAR 0 6
4376: PPUSH
4377: LD_VAR 0 2
4381: PUSH
4382: LD_INT 1
4384: ARRAY
4385: PPUSH
4386: LD_VAR 0 2
4390: PUSH
4391: LD_INT 2
4393: ARRAY
4394: PPUSH
4395: LD_INT 0
4397: PPUSH
4398: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
4402: LD_INT 0
4404: PPUSH
4405: LD_INT 3
4407: PPUSH
4408: LD_VAR 0 11
4412: PPUSH
4413: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4417: CALL_OW 44
4421: PPUSH
4422: LD_VAR 0 6
4426: PPUSH
4427: CALL_OW 52
// end ;
4431: GO 4274
4433: POP
4434: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
4435: LD_ADDR_VAR 0 2
4439: PUSH
4440: DOUBLE
4441: LD_INT 1
4443: DEC
4444: ST_TO_ADDR
4445: LD_INT 5
4447: PUSH
4448: LD_INT 7
4450: PUSH
4451: LD_INT 8
4453: PUSH
4454: LD_INT 9
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: LIST
4462: PUSH
4463: LD_OWVAR 67
4467: ARRAY
4468: PUSH
4469: FOR_TO
4470: IFFALSE 4530
// begin PrepareHuman ( false , 1 , skill ) ;
4472: LD_INT 0
4474: PPUSH
4475: LD_INT 1
4477: PPUSH
4478: LD_VAR 0 11
4482: PPUSH
4483: CALL_OW 380
// un := CreateHuman ;
4487: LD_ADDR_VAR 0 5
4491: PUSH
4492: CALL_OW 44
4496: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4497: LD_VAR 0 5
4501: PPUSH
4502: LD_INT 11
4504: PPUSH
4505: LD_INT 0
4507: PPUSH
4508: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4512: LD_ADDR_EXP 55
4516: PUSH
4517: LD_EXP 55
4521: PUSH
4522: LD_VAR 0 5
4526: ADD
4527: ST_TO_ADDR
// end ;
4528: GO 4469
4530: POP
4531: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4532: LD_ADDR_VAR 0 2
4536: PUSH
4537: DOUBLE
4538: LD_INT 1
4540: DEC
4541: ST_TO_ADDR
4542: LD_INT 2
4544: PUSH
4545: LD_INT 3
4547: PUSH
4548: LD_INT 4
4550: PUSH
4551: LD_INT 5
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: PUSH
4560: LD_OWVAR 67
4564: ARRAY
4565: PUSH
4566: FOR_TO
4567: IFFALSE 4627
// begin PrepareHuman ( false , 1 , skill ) ;
4569: LD_INT 0
4571: PPUSH
4572: LD_INT 1
4574: PPUSH
4575: LD_VAR 0 11
4579: PPUSH
4580: CALL_OW 380
// un := CreateHuman ;
4584: LD_ADDR_VAR 0 5
4588: PUSH
4589: CALL_OW 44
4593: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4594: LD_VAR 0 5
4598: PPUSH
4599: LD_INT 12
4601: PPUSH
4602: LD_INT 0
4604: PPUSH
4605: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4609: LD_ADDR_EXP 53
4613: PUSH
4614: LD_EXP 53
4618: PUSH
4619: LD_VAR 0 5
4623: ADD
4624: ST_TO_ADDR
// end ;
4625: GO 4566
4627: POP
4628: POP
// for i = 1 to 2 do
4629: LD_ADDR_VAR 0 2
4633: PUSH
4634: DOUBLE
4635: LD_INT 1
4637: DEC
4638: ST_TO_ADDR
4639: LD_INT 2
4641: PUSH
4642: FOR_TO
4643: IFFALSE 4736
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4645: LD_INT 1
4647: PPUSH
4648: LD_INT 1
4650: PPUSH
4651: LD_VAR 0 11
4655: PPUSH
4656: CALL_OW 380
// hc_attr := [ 8 + Difficulty , 8 + Difficulty ] ;
4660: LD_ADDR_OWVAR 29
4664: PUSH
4665: LD_INT 8
4667: PUSH
4668: LD_OWVAR 67
4672: PLUS
4673: PUSH
4674: LD_INT 8
4676: PUSH
4677: LD_OWVAR 67
4681: PLUS
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: ST_TO_ADDR
// un := CreateHuman ;
4687: LD_ADDR_VAR 0 5
4691: PUSH
4692: CALL_OW 44
4696: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4697: LD_VAR 0 5
4701: PPUSH
4702: LD_INT 39
4704: PPUSH
4705: LD_INT 12
4707: PPUSH
4708: LD_INT 3
4710: PPUSH
4711: LD_INT 0
4713: PPUSH
4714: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4718: LD_ADDR_EXP 54
4722: PUSH
4723: LD_EXP 54
4727: PUSH
4728: LD_VAR 0 5
4732: ADD
4733: ST_TO_ADDR
// end ;
4734: GO 4642
4736: POP
4737: POP
// InitHc ;
4738: CALL_OW 19
// for i = 1 to 3 do
4742: LD_ADDR_VAR 0 2
4746: PUSH
4747: DOUBLE
4748: LD_INT 1
4750: DEC
4751: ST_TO_ADDR
4752: LD_INT 3
4754: PUSH
4755: FOR_TO
4756: IFFALSE 4822
// begin PrepareHuman ( false , 1 , skill ) ;
4758: LD_INT 0
4760: PPUSH
4761: LD_INT 1
4763: PPUSH
4764: LD_VAR 0 11
4768: PPUSH
4769: CALL_OW 380
// un := CreateHuman ;
4773: LD_ADDR_VAR 0 5
4777: PUSH
4778: CALL_OW 44
4782: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4783: LD_VAR 0 5
4787: PPUSH
4788: LD_INT 180
4790: PPUSH
4791: LD_INT 11
4793: PPUSH
4794: LD_INT 4
4796: PPUSH
4797: LD_INT 0
4799: PPUSH
4800: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4804: LD_ADDR_EXP 58
4808: PUSH
4809: LD_EXP 58
4813: PUSH
4814: LD_VAR 0 5
4818: ADD
4819: ST_TO_ADDR
// end ;
4820: GO 4755
4822: POP
4823: POP
// ru_vehicles := vehicles ;
4824: LD_ADDR_EXP 56
4828: PUSH
4829: LD_VAR 0 12
4833: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4834: LD_ADDR_EXP 59
4838: PUSH
4839: LD_INT 131
4841: PUSH
4842: LD_INT 121
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 113
4851: PUSH
4852: LD_INT 90
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 93
4861: PUSH
4862: LD_INT 62
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 106
4876: PUSH
4877: LD_INT 54
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 120
4886: PUSH
4887: LD_INT 80
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: LD_INT 143
4896: PUSH
4897: LD_INT 120
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 154
4911: PUSH
4912: LD_INT 116
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: LD_INT 140
4921: PUSH
4922: LD_INT 93
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: PUSH
4929: LD_INT 130
4931: PUSH
4932: LD_INT 58
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: LD_INT 105
4946: PUSH
4947: LD_INT 106
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 134
4956: PUSH
4957: LD_INT 98
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: LD_INT 159
4966: PUSH
4967: LD_INT 113
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: LIST
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: ST_TO_ADDR
// if Difficulty = 1 then
4985: LD_OWVAR 67
4989: PUSH
4990: LD_INT 1
4992: EQUAL
4993: IFFALSE 4997
// exit ;
4995: GO 5052
// for i = 1 to Difficulty - 1 do
4997: LD_ADDR_VAR 0 2
5001: PUSH
5002: DOUBLE
5003: LD_INT 1
5005: DEC
5006: ST_TO_ADDR
5007: LD_OWVAR 67
5011: PUSH
5012: LD_INT 1
5014: MINUS
5015: PUSH
5016: FOR_TO
5017: IFFALSE 5050
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
5019: LD_ADDR_EXP 57
5023: PUSH
5024: LD_EXP 57
5028: PUSH
5029: LD_INT 22
5031: PUSH
5032: LD_INT 1
5034: PUSH
5035: LD_INT 1
5037: PUSH
5038: LD_INT 43
5040: PUSH
5041: EMPTY
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: ADD
5047: ST_TO_ADDR
5048: GO 5016
5050: POP
5051: POP
// end ;
5052: LD_VAR 0 1
5056: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
5057: LD_INT 22
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: LD_INT 21
5069: PUSH
5070: LD_INT 2
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PPUSH
5081: CALL_OW 69
5085: IFFALSE 5179
5087: GO 5089
5089: DISABLE
5090: LD_INT 0
5092: PPUSH
5093: PPUSH
// begin enable ;
5094: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
5095: LD_ADDR_VAR 0 2
5099: PUSH
5100: LD_INT 22
5102: PUSH
5103: LD_INT 3
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 21
5112: PUSH
5113: LD_INT 2
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: PPUSH
5124: CALL_OW 69
5128: ST_TO_ADDR
// if filter then
5129: LD_VAR 0 2
5133: IFFALSE 5179
// for i in filter do
5135: LD_ADDR_VAR 0 1
5139: PUSH
5140: LD_VAR 0 2
5144: PUSH
5145: FOR_IN
5146: IFFALSE 5177
// if GetFuel ( i ) < 20 then
5148: LD_VAR 0 1
5152: PPUSH
5153: CALL_OW 261
5157: PUSH
5158: LD_INT 20
5160: LESS
5161: IFFALSE 5175
// SetFuel ( i , 20 ) ;
5163: LD_VAR 0 1
5167: PPUSH
5168: LD_INT 20
5170: PPUSH
5171: CALL_OW 240
5175: GO 5145
5177: POP
5178: POP
// end ;
5179: PPOPN 2
5181: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
5182: LD_EXP 57
5186: IFFALSE 5405
5188: GO 5190
5190: DISABLE
5191: LD_INT 0
5193: PPUSH
5194: PPUSH
5195: PPUSH
// begin enable ;
5196: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
5197: LD_ADDR_VAR 0 2
5201: PUSH
5202: LD_INT 22
5204: PUSH
5205: LD_INT 3
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PUSH
5212: LD_INT 30
5214: PUSH
5215: LD_INT 3
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PPUSH
5226: CALL_OW 69
5230: ST_TO_ADDR
// can_produce := [ ] ;
5231: LD_ADDR_VAR 0 3
5235: PUSH
5236: EMPTY
5237: ST_TO_ADDR
// if not fac then
5238: LD_VAR 0 2
5242: NOT
5243: IFFALSE 5248
// begin disable ;
5245: DISABLE
// exit ;
5246: GO 5405
// end ; for i in fac do
5248: LD_ADDR_VAR 0 1
5252: PUSH
5253: LD_VAR 0 2
5257: PUSH
5258: FOR_IN
5259: IFFALSE 5297
// if UnitsInside ( i ) then
5261: LD_VAR 0 1
5265: PPUSH
5266: CALL_OW 313
5270: IFFALSE 5295
// can_produce := Insert ( can_produce , 1 , i ) ;
5272: LD_ADDR_VAR 0 3
5276: PUSH
5277: LD_VAR 0 3
5281: PPUSH
5282: LD_INT 1
5284: PPUSH
5285: LD_VAR 0 1
5289: PPUSH
5290: CALL_OW 2
5294: ST_TO_ADDR
5295: GO 5258
5297: POP
5298: POP
// if not can_produce then
5299: LD_VAR 0 3
5303: NOT
5304: IFFALSE 5308
// exit ;
5306: GO 5405
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
5308: LD_VAR 0 3
5312: PUSH
5313: LD_INT 1
5315: PPUSH
5316: LD_VAR 0 3
5320: PPUSH
5321: CALL_OW 12
5325: ARRAY
5326: PPUSH
5327: LD_EXP 57
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: PPUSH
5336: LD_EXP 57
5340: PUSH
5341: LD_INT 2
5343: ARRAY
5344: PPUSH
5345: LD_EXP 57
5349: PUSH
5350: LD_INT 3
5352: ARRAY
5353: PPUSH
5354: LD_EXP 57
5358: PUSH
5359: LD_INT 4
5361: ARRAY
5362: PPUSH
5363: CALL_OW 125
// for i = 1 to 4 do
5367: LD_ADDR_VAR 0 1
5371: PUSH
5372: DOUBLE
5373: LD_INT 1
5375: DEC
5376: ST_TO_ADDR
5377: LD_INT 4
5379: PUSH
5380: FOR_TO
5381: IFFALSE 5403
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
5383: LD_ADDR_EXP 57
5387: PUSH
5388: LD_EXP 57
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: CALL_OW 3
5400: ST_TO_ADDR
5401: GO 5380
5403: POP
5404: POP
// end ;
5405: PPOPN 3
5407: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
5408: LD_INT 0
5410: PPUSH
5411: PPUSH
5412: PPUSH
// for i = 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
5413: LD_ADDR_VAR 0 2
5417: PUSH
5418: DOUBLE
5419: LD_INT 1
5421: DEC
5422: ST_TO_ADDR
5423: LD_INT 2
5425: PUSH
5426: LD_INT 3
5428: PUSH
5429: LD_INT 3
5431: PUSH
5432: LD_INT 3
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: PUSH
5441: LD_OWVAR 67
5445: ARRAY
5446: PUSH
5447: FOR_TO
5448: IFFALSE 5597
// begin PrepareHuman ( false , 3 , 3 ) ;
5450: LD_INT 0
5452: PPUSH
5453: LD_INT 3
5455: PPUSH
5456: LD_INT 3
5458: PPUSH
5459: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
5463: LD_ADDR_VAR 0 3
5467: PUSH
5468: LD_INT 3
5470: PPUSH
5471: LD_INT 3
5473: PPUSH
5474: LD_INT 22
5476: PPUSH
5477: LD_INT 1
5479: PPUSH
5480: LD_INT 1
5482: PPUSH
5483: LD_INT 43
5485: PUSH
5486: LD_INT 42
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PUSH
5493: LD_INT 1
5495: PPUSH
5496: LD_INT 2
5498: PPUSH
5499: CALL_OW 12
5503: ARRAY
5504: PPUSH
5505: LD_INT 70
5507: PPUSH
5508: CALL 497 0 7
5512: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5513: LD_VAR 0 3
5517: PPUSH
5518: LD_INT 4
5520: PPUSH
5521: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5525: LD_VAR 0 3
5529: PPUSH
5530: LD_INT 229
5532: PPUSH
5533: LD_INT 44
5535: PPUSH
5536: LD_INT 0
5538: PPUSH
5539: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5543: CALL_OW 44
5547: PPUSH
5548: LD_VAR 0 3
5552: PPUSH
5553: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5557: LD_ADDR_EXP 56
5561: PUSH
5562: LD_EXP 56
5566: PUSH
5567: LD_VAR 0 3
5571: ADD
5572: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5573: LD_VAR 0 3
5577: PPUSH
5578: LD_INT 191
5580: PPUSH
5581: LD_INT 32
5583: PPUSH
5584: CALL_OW 111
// Wait ( 0 0$02 ) ;
5588: LD_INT 70
5590: PPUSH
5591: CALL_OW 67
// end ;
5595: GO 5447
5597: POP
5598: POP
// end ;
5599: LD_VAR 0 1
5603: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5604: LD_EXP 31
5608: IFFALSE 5616
5610: PUSH
5611: LD_EXP 56
5615: AND
5616: IFFALSE 5790
5618: GO 5620
5620: DISABLE
5621: LD_INT 0
5623: PPUSH
5624: PPUSH
5625: PPUSH
// begin wait ( 0 0$50 ) ;
5626: LD_INT 1750
5628: PPUSH
5629: CALL_OW 67
// tmp := ru_vehicles ;
5633: LD_ADDR_VAR 0 3
5637: PUSH
5638: LD_EXP 56
5642: ST_TO_ADDR
// if not tmp then
5643: LD_VAR 0 3
5647: NOT
5648: IFFALSE 5652
// exit ;
5650: GO 5790
// repeat wait ( 0 0$1 ) ;
5652: LD_INT 35
5654: PPUSH
5655: CALL_OW 67
// for i in tmp do
5659: LD_ADDR_VAR 0 1
5663: PUSH
5664: LD_VAR 0 3
5668: PUSH
5669: FOR_IN
5670: IFFALSE 5781
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5672: LD_ADDR_VAR 0 2
5676: PUSH
5677: LD_INT 22
5679: PUSH
5680: LD_INT 1
5682: PUSH
5683: EMPTY
5684: LIST
5685: LIST
5686: PPUSH
5687: LD_VAR 0 1
5691: PPUSH
5692: CALL_OW 74
5696: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5697: LD_VAR 0 1
5701: PPUSH
5702: LD_VAR 0 2
5706: PPUSH
5707: CALL_OW 296
5711: PUSH
5712: LD_INT 10
5714: GREATER
5715: IFFALSE 5734
// ComAgressiveMove ( i , 69 , 101 ) else
5717: LD_VAR 0 1
5721: PPUSH
5722: LD_INT 69
5724: PPUSH
5725: LD_INT 101
5727: PPUSH
5728: CALL_OW 114
5732: GO 5748
// ComAttackUnit ( i , enemy ) ;
5734: LD_VAR 0 1
5738: PPUSH
5739: LD_VAR 0 2
5743: PPUSH
5744: CALL_OW 115
// if GetLives ( i ) < 250 then
5748: LD_VAR 0 1
5752: PPUSH
5753: CALL_OW 256
5757: PUSH
5758: LD_INT 250
5760: LESS
5761: IFFALSE 5779
// tmp := tmp diff i ;
5763: LD_ADDR_VAR 0 3
5767: PUSH
5768: LD_VAR 0 3
5772: PUSH
5773: LD_VAR 0 1
5777: DIFF
5778: ST_TO_ADDR
// end ;
5779: GO 5669
5781: POP
5782: POP
// until not tmp ;
5783: LD_VAR 0 3
5787: NOT
5788: IFFALSE 5652
// end ; end_of_file
5790: PPOPN 3
5792: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5793: LD_INT 0
5795: PPUSH
5796: PPUSH
5797: PPUSH
5798: PPUSH
5799: PPUSH
5800: PPUSH
5801: PPUSH
// InGameOn ;
5802: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5806: LD_EXP 37
5810: PPUSH
5811: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5815: LD_EXP 37
5819: PPUSH
5820: LD_EXP 44
5824: PPUSH
5825: CALL_OW 119
// if Bierezov then
5829: LD_EXP 45
5833: IFFALSE 5849
// ComTurnUnit ( Bierezov , Cornel ) ;
5835: LD_EXP 45
5839: PPUSH
5840: LD_EXP 44
5844: PPUSH
5845: CALL_OW 119
// for i in jmm_units do
5849: LD_ADDR_VAR 0 2
5853: PUSH
5854: LD_EXP 4
5858: PUSH
5859: FOR_IN
5860: IFFALSE 5878
// ComTurnUnit ( i , Cornel ) ;
5862: LD_VAR 0 2
5866: PPUSH
5867: LD_EXP 44
5871: PPUSH
5872: CALL_OW 119
5876: GO 5859
5878: POP
5879: POP
// units := cornel_units union Cornel ;
5880: LD_ADDR_VAR 0 3
5884: PUSH
5885: LD_EXP 6
5889: PUSH
5890: LD_EXP 44
5894: UNION
5895: ST_TO_ADDR
// repeat wait ( 1 ) ;
5896: LD_INT 1
5898: PPUSH
5899: CALL_OW 67
// for i in units do
5903: LD_ADDR_VAR 0 2
5907: PUSH
5908: LD_VAR 0 3
5912: PUSH
5913: FOR_IN
5914: IFFALSE 5947
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5916: LD_VAR 0 2
5920: PPUSH
5921: LD_EXP 37
5925: PPUSH
5926: CALL_OW 250
5930: PPUSH
5931: LD_EXP 37
5935: PPUSH
5936: CALL_OW 251
5940: PPUSH
5941: CALL_OW 111
5945: GO 5913
5947: POP
5948: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5949: LD_VAR 0 3
5953: PPUSH
5954: LD_INT 92
5956: PUSH
5957: LD_EXP 37
5961: PPUSH
5962: CALL_OW 250
5966: PUSH
5967: LD_EXP 37
5971: PPUSH
5972: CALL_OW 251
5976: PUSH
5977: LD_INT 10
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: PPUSH
5986: CALL_OW 72
5990: PUSH
5991: LD_VAR 0 3
5995: EQUAL
5996: IFFALSE 5896
// for i in units do
5998: LD_ADDR_VAR 0 2
6002: PUSH
6003: LD_VAR 0 3
6007: PUSH
6008: FOR_IN
6009: IFFALSE 6027
// ComTurnUnit ( i , JMM ) ;
6011: LD_VAR 0 2
6015: PPUSH
6016: LD_EXP 37
6020: PPUSH
6021: CALL_OW 119
6025: GO 6008
6027: POP
6028: POP
// ComTurnUnit ( Cornel , JMM ) ;
6029: LD_EXP 44
6033: PPUSH
6034: LD_EXP 37
6038: PPUSH
6039: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
6043: LD_EXP 37
6047: PPUSH
6048: LD_STRING D1-JMM-1
6050: PPUSH
6051: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
6055: LD_EXP 44
6059: PPUSH
6060: LD_STRING D1-Corn-1
6062: PPUSH
6063: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
6067: LD_EXP 37
6071: PPUSH
6072: LD_EXP 44
6076: PPUSH
6077: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
6081: LD_EXP 44
6085: PPUSH
6086: LD_EXP 37
6090: PPUSH
6091: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
6095: LD_INT 35
6097: PPUSH
6098: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
6102: LD_EXP 37
6106: PPUSH
6107: LD_EXP 44
6111: PPUSH
6112: CALL_OW 296
6116: PUSH
6117: LD_INT 6
6119: LESS
6120: IFFALSE 6095
// ChangeSideFog ( 4 , 1 ) ;
6122: LD_INT 4
6124: PPUSH
6125: LD_INT 1
6127: PPUSH
6128: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
6132: LD_EXP 37
6136: PPUSH
6137: LD_EXP 44
6141: PPUSH
6142: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6146: LD_EXP 44
6150: PPUSH
6151: LD_EXP 37
6155: PPUSH
6156: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
6160: LD_EXP 37
6164: PPUSH
6165: LD_STRING D1-JMM-2
6167: PPUSH
6168: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
6172: LD_EXP 37
6176: PPUSH
6177: LD_STRING D1-JMM-2a
6179: PPUSH
6180: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
6184: LD_EXP 44
6188: PPUSH
6189: LD_STRING D1-Corn-2
6191: PPUSH
6192: CALL_OW 88
// if bierezov_exist or debug then
6196: LD_EXP 7
6200: IFTRUE 6208
6202: PUSH
6203: LD_EXP 1
6207: OR
6208: IFFALSE 6449
// begin ComTurnUnit ( Cornel , Bierezov ) ;
6210: LD_EXP 44
6214: PPUSH
6215: LD_EXP 45
6219: PPUSH
6220: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
6224: LD_INT 10
6226: PPUSH
6227: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
6231: LD_EXP 44
6235: PPUSH
6236: LD_STRING D1a-Corn-1
6238: PPUSH
6239: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
6243: LD_EXP 37
6247: PPUSH
6248: LD_EXP 45
6252: PPUSH
6253: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
6257: LD_EXP 45
6261: PPUSH
6262: LD_EXP 37
6266: PPUSH
6267: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
6271: LD_EXP 37
6275: PPUSH
6276: LD_STRING D1a-JMM-1
6278: PPUSH
6279: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
6283: LD_EXP 37
6287: PPUSH
6288: LD_EXP 44
6292: PPUSH
6293: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6297: LD_EXP 44
6301: PPUSH
6302: LD_EXP 37
6306: PPUSH
6307: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
6311: LD_EXP 44
6315: PPUSH
6316: LD_STRING D1a-Corn-2
6318: PPUSH
6319: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
6323: LD_EXP 37
6327: PPUSH
6328: LD_STRING D1a-JMM-2
6330: PPUSH
6331: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
6335: LD_EXP 44
6339: PPUSH
6340: LD_STRING D1a-Corn-3
6342: PPUSH
6343: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
6347: LD_EXP 37
6351: PPUSH
6352: LD_STRING D1a-JMM-3
6354: PPUSH
6355: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
6359: LD_EXP 44
6363: PPUSH
6364: LD_STRING D1a-Corn-4
6366: PPUSH
6367: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
6371: LD_EXP 37
6375: PPUSH
6376: LD_STRING D1a-JMM-4
6378: PPUSH
6379: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
6383: LD_EXP 44
6387: PPUSH
6388: LD_STRING D1a-Corn-5
6390: PPUSH
6391: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
6395: LD_EXP 45
6399: PPUSH
6400: LD_EXP 44
6404: PPUSH
6405: CALL_OW 250
6409: PPUSH
6410: LD_EXP 44
6414: PPUSH
6415: CALL_OW 251
6419: PUSH
6420: LD_INT 2
6422: MINUS
6423: PPUSH
6424: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
6428: LD_EXP 45
6432: PPUSH
6433: LD_EXP 44
6437: PPUSH
6438: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
6442: LD_INT 10
6444: PPUSH
6445: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
6449: LD_EXP 37
6453: PPUSH
6454: LD_STRING D1b-JMM-1
6456: PPUSH
6457: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
6461: LD_EXP 44
6465: PPUSH
6466: LD_STRING D1b-Corn-1
6468: PPUSH
6469: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6473: LD_EXP 37
6477: PPUSH
6478: LD_STRING D1b-JMM-2
6480: PPUSH
6481: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6485: LD_EXP 44
6489: PPUSH
6490: LD_STRING D1b-Corn-2
6492: PPUSH
6493: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6497: LD_EXP 37
6501: PPUSH
6502: LD_STRING D1b-JMM-3
6504: PPUSH
6505: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6509: LD_INT 10
6511: PPUSH
6512: CALL_OW 67
// SayRadioNoFace ( Powell , D1b-Pow-3 ) ;
6516: LD_EXP 46
6520: PPUSH
6521: LD_STRING D1b-Pow-3
6523: PPUSH
6524: CALL_OW 586
// Say ( JMM , D1b-JMM-4 ) ;
6528: LD_EXP 37
6532: PPUSH
6533: LD_STRING D1b-JMM-4
6535: PPUSH
6536: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6540: LD_EXP 44
6544: PPUSH
6545: LD_STRING D1b-Corn-4
6547: PPUSH
6548: CALL_OW 88
// if Khatam then
6552: LD_EXP 41
6556: IFFALSE 6572
// Say ( Khatam , D1b-Khat-4 ) else
6558: LD_EXP 41
6562: PPUSH
6563: LD_STRING D1b-Khat-4
6565: PPUSH
6566: CALL_OW 88
6570: GO 6608
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6572: LD_EXP 6
6576: PPUSH
6577: LD_INT 26
6579: PUSH
6580: LD_INT 1
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PPUSH
6587: CALL_OW 72
6591: PUSH
6592: LD_EXP 44
6596: PUSH
6597: EMPTY
6598: LIST
6599: DIFF
6600: PPUSH
6601: LD_STRING D1b-Sol1-4
6603: PPUSH
6604: CALL 585 0 2
// if Cyrus then
6608: LD_EXP 39
6612: IFFALSE 6626
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6614: LD_EXP 39
6618: PPUSH
6619: LD_STRING D1b-Cyrus-4
6621: PPUSH
6622: CALL_OW 88
// if Lisa then
6626: LD_EXP 40
6630: IFFALSE 6688
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6632: LD_EXP 40
6636: PPUSH
6637: LD_STRING D1b-Lisa-4
6639: PPUSH
6640: CALL_OW 88
// if Cyrus then
6644: LD_EXP 39
6648: IFFALSE 6688
// begin if not IsInUnit ( Cyrus ) then
6650: LD_EXP 39
6654: PPUSH
6655: CALL_OW 310
6659: NOT
6660: IFFALSE 6676
// ComTurnUnit ( Cyrus , Lisa ) ;
6662: LD_EXP 39
6666: PPUSH
6667: LD_EXP 40
6671: PPUSH
6672: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6676: LD_EXP 39
6680: PPUSH
6681: LD_STRING D1b-Cyrus-5
6683: PPUSH
6684: CALL_OW 88
// end ; end ; SelectGroup ;
6688: CALL 3058 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6692: LD_EXP 37
6696: PPUSH
6697: LD_STRING D1d-JMM-1
6699: PPUSH
6700: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6704: LD_EXP 44
6708: PPUSH
6709: LD_STRING D1d-Corn-1
6711: PPUSH
6712: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6716: LD_ADDR_VAR 0 2
6720: PUSH
6721: LD_EXP 4
6725: PUSH
6726: LD_EXP 6
6730: ADD
6731: PUSH
6732: LD_EXP 37
6736: ADD
6737: PUSH
6738: FOR_IN
6739: IFFALSE 6752
// ComHold ( i ) ;
6741: LD_VAR 0 2
6745: PPUSH
6746: CALL_OW 140
6750: GO 6738
6752: POP
6753: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6754: LD_ADDR_VAR 0 4
6758: PUSH
6759: LD_INT 22
6761: PUSH
6762: LD_INT 1
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: LD_INT 21
6771: PUSH
6772: LD_INT 2
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: PPUSH
6783: CALL_OW 69
6787: ST_TO_ADDR
// if vehicles then
6788: LD_VAR 0 4
6792: IFFALSE 7132
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6794: LD_EXP 6
6798: PPUSH
6799: LD_INT 55
6801: PUSH
6802: EMPTY
6803: LIST
6804: PPUSH
6805: CALL_OW 72
6809: IFFALSE 6848
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6811: LD_ADDR_VAR 0 2
6815: PUSH
6816: LD_EXP 6
6820: PPUSH
6821: LD_INT 55
6823: PUSH
6824: EMPTY
6825: LIST
6826: PPUSH
6827: CALL_OW 72
6831: PUSH
6832: FOR_IN
6833: IFFALSE 6846
// ComExitVehicle ( i ) ;
6835: LD_VAR 0 2
6839: PPUSH
6840: CALL_OW 121
6844: GO 6832
6846: POP
6847: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6848: LD_ADDR_VAR 0 5
6852: PUSH
6853: LD_VAR 0 4
6857: PPUSH
6858: LD_INT 34
6860: PUSH
6861: LD_INT 51
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PPUSH
6868: CALL_OW 72
6872: ST_TO_ADDR
// if cargos then
6873: LD_VAR 0 5
6877: IFFALSE 7062
// begin vehicles := cargos ;
6879: LD_ADDR_VAR 0 4
6883: PUSH
6884: LD_VAR 0 5
6888: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6889: LD_ADDR_VAR 0 6
6893: PUSH
6894: LD_STRING 02_resources_4
6896: PPUSH
6897: LD_INT 0
6899: PPUSH
6900: CALL_OW 30
6904: ST_TO_ADDR
// if debug and not resources then
6905: LD_EXP 1
6909: IFFALSE 6918
6911: PUSH
6912: LD_VAR 0 6
6916: NOT
6917: AND
6918: IFFALSE 6928
// resources := 160 ;
6920: LD_ADDR_VAR 0 6
6924: PUSH
6925: LD_INT 160
6927: ST_TO_ADDR
// if resources mod 10 then
6928: LD_VAR 0 6
6932: PUSH
6933: LD_INT 10
6935: MOD
6936: IFFALSE 6958
// resources := resources - resources mod 10 ;
6938: LD_ADDR_VAR 0 6
6942: PUSH
6943: LD_VAR 0 6
6947: PUSH
6948: LD_VAR 0 6
6952: PUSH
6953: LD_INT 10
6955: MOD
6956: MINUS
6957: ST_TO_ADDR
// if resources then
6958: LD_VAR 0 6
6962: IFFALSE 7062
// for i in cargos do
6964: LD_ADDR_VAR 0 2
6968: PUSH
6969: LD_VAR 0 5
6973: PUSH
6974: FOR_IN
6975: IFFALSE 7060
// begin if resources < 100 then
6977: LD_VAR 0 6
6981: PUSH
6982: LD_INT 100
6984: LESS
6985: IFFALSE 7007
// begin cargo := resources ;
6987: LD_ADDR_VAR 0 7
6991: PUSH
6992: LD_VAR 0 6
6996: ST_TO_ADDR
// resources := 0 ;
6997: LD_ADDR_VAR 0 6
7001: PUSH
7002: LD_INT 0
7004: ST_TO_ADDR
// end else
7005: GO 7029
// begin cargo := 100 ;
7007: LD_ADDR_VAR 0 7
7011: PUSH
7012: LD_INT 100
7014: ST_TO_ADDR
// resources := resources - 100 ;
7015: LD_ADDR_VAR 0 6
7019: PUSH
7020: LD_VAR 0 6
7024: PUSH
7025: LD_INT 100
7027: MINUS
7028: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_INT 1
7036: PPUSH
7037: LD_VAR 0 7
7041: PPUSH
7042: CALL_OW 290
// if resources = 0 then
7046: LD_VAR 0 6
7050: PUSH
7051: LD_INT 0
7053: EQUAL
7054: IFFALSE 7058
// break ;
7056: GO 7060
// end ;
7058: GO 6974
7060: POP
7061: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
7062: LD_VAR 0 4
7066: PUSH
7067: LD_INT 1
7069: ARRAY
7070: PPUSH
7071: CALL_OW 311
7075: PPUSH
7076: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
7080: LD_VAR 0 4
7084: PUSH
7085: LD_INT 1
7087: ARRAY
7088: PPUSH
7089: LD_INT 4
7091: PPUSH
7092: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
7096: LD_EXP 44
7100: PPUSH
7101: LD_VAR 0 4
7105: PUSH
7106: LD_INT 1
7108: ARRAY
7109: PPUSH
7110: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
7114: LD_INT 35
7116: PPUSH
7117: CALL_OW 67
// until IsInUnit ( Cornel ) ;
7121: LD_EXP 44
7125: PPUSH
7126: CALL_OW 310
7130: IFFALSE 7114
// end ; InGameOff ;
7132: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
7136: LD_STRING M1
7138: PPUSH
7139: CALL_OW 337
// SaveForQuickRestart ;
7143: CALL_OW 22
// cornel_active := true ;
7147: LD_ADDR_EXP 8
7151: PUSH
7152: LD_INT 1
7154: ST_TO_ADDR
// end ;
7155: LD_VAR 0 1
7159: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
7160: LD_EXP 37
7164: PPUSH
7165: LD_EXP 47
7169: PPUSH
7170: CALL_OW 296
7174: PUSH
7175: LD_INT 10
7177: LESS
7178: IFFALSE 8567
7180: GO 7182
7182: DISABLE
7183: LD_INT 0
7185: PPUSH
7186: PPUSH
7187: PPUSH
7188: PPUSH
7189: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
7190: LD_ADDR_VAR 0 2
7194: PUSH
7195: LD_INT 89
7197: PUSH
7198: LD_INT 34
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 138
7207: PUSH
7208: LD_INT 63
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 196
7217: PUSH
7218: LD_INT 84
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 135
7227: PUSH
7228: LD_INT 52
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 103
7237: PUSH
7238: LD_INT 39
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 58
7247: PUSH
7248: LD_INT 30
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 38
7257: PUSH
7258: LD_INT 51
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: ST_TO_ADDR
// Video ( true ) ;
7274: LD_INT 1
7276: PPUSH
7277: CALL 79142 0 1
// if jmm_units then
7281: LD_EXP 4
7285: IFFALSE 7363
// for i in jmm_units do
7287: LD_ADDR_VAR 0 1
7291: PUSH
7292: LD_EXP 4
7296: PUSH
7297: FOR_IN
7298: IFFALSE 7361
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
7300: LD_VAR 0 1
7304: PPUSH
7305: LD_EXP 37
7309: PPUSH
7310: CALL_OW 296
7314: PUSH
7315: LD_INT 10
7317: LESS
7318: IFFALSE 7332
7320: PUSH
7321: LD_VAR 0 1
7325: PPUSH
7326: CALL_OW 310
7330: NOT
7331: AND
7332: IFFALSE 7350
// ComTurnUnit ( i , JMM ) else
7334: LD_VAR 0 1
7338: PPUSH
7339: LD_EXP 37
7343: PPUSH
7344: CALL_OW 119
7348: GO 7359
// ComHold ( i ) ;
7350: LD_VAR 0 1
7354: PPUSH
7355: CALL_OW 140
// end ;
7359: GO 7297
7361: POP
7362: POP
// if IsInUnit ( JMM ) then
7363: LD_EXP 37
7367: PPUSH
7368: CALL_OW 310
7372: IFFALSE 7397
// begin ComExitVehicle ( JMM ) ;
7374: LD_EXP 37
7378: PPUSH
7379: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
7383: LD_EXP 37
7387: PPUSH
7388: LD_EXP 47
7392: PPUSH
7393: CALL_OW 172
// end ; Wait ( 10 ) ;
7397: LD_INT 10
7399: PPUSH
7400: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
7404: LD_EXP 37
7408: PPUSH
7409: LD_EXP 47
7413: PPUSH
7414: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
7418: LD_INT 35
7420: PPUSH
7421: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
7425: LD_EXP 37
7429: PPUSH
7430: LD_EXP 47
7434: PPUSH
7435: CALL_OW 296
7439: PUSH
7440: LD_INT 6
7442: LESS
7443: IFFALSE 7418
// ComTurnUnit ( JMM , Lynch ) ;
7445: LD_EXP 37
7449: PPUSH
7450: LD_EXP 47
7454: PPUSH
7455: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
7459: LD_ADDR_VAR 0 1
7463: PUSH
7464: LD_EXP 47
7468: PUSH
7469: LD_EXP 48
7473: PUSH
7474: LD_EXP 49
7478: PUSH
7479: LD_EXP 50
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: PUSH
7490: FOR_IN
7491: IFFALSE 7509
// ComTurnUnit ( i , JMM ) ;
7493: LD_VAR 0 1
7497: PPUSH
7498: LD_EXP 37
7502: PPUSH
7503: CALL_OW 119
7507: GO 7490
7509: POP
7510: POP
// Wait ( 0 0$0.3 ) ;
7511: LD_INT 10
7513: PPUSH
7514: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7518: LD_EXP 37
7522: PPUSH
7523: LD_STRING D2-JMM-1
7525: PPUSH
7526: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7530: LD_EXP 47
7534: PPUSH
7535: LD_STRING D2-Sol1-1
7537: PPUSH
7538: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7542: LD_EXP 37
7546: PPUSH
7547: LD_STRING D2-JMM-2
7549: PPUSH
7550: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7554: LD_EXP 47
7558: PPUSH
7559: LD_STRING D2-Sol1-2
7561: PPUSH
7562: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7566: LD_EXP 37
7570: PPUSH
7571: LD_STRING D2-JMM-3
7573: PPUSH
7574: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7578: LD_EXP 47
7582: PPUSH
7583: LD_STRING D2-Sol1-3
7585: PPUSH
7586: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7590: LD_ADDR_VAR 0 1
7594: PUSH
7595: LD_INT 22
7597: PUSH
7598: LD_INT 8
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 69
7609: PUSH
7610: FOR_IN
7611: IFFALSE 7627
// SetSide ( i , 1 ) ;
7613: LD_VAR 0 1
7617: PPUSH
7618: LD_INT 1
7620: PPUSH
7621: CALL_OW 235
7625: GO 7610
7627: POP
7628: POP
// Say ( JMM , D2-JMM-4 ) ;
7629: LD_EXP 37
7633: PPUSH
7634: LD_STRING D2-JMM-4
7636: PPUSH
7637: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7641: LD_INT 1
7643: PPUSH
7644: LD_INT 5
7646: PPUSH
7647: CALL_OW 332
// for i = 1 to points do
7651: LD_ADDR_VAR 0 1
7655: PUSH
7656: DOUBLE
7657: LD_INT 1
7659: DEC
7660: ST_TO_ADDR
7661: LD_VAR 0 2
7665: PUSH
7666: FOR_TO
7667: IFFALSE 7842
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7669: LD_VAR 0 2
7673: PUSH
7674: LD_VAR 0 1
7678: ARRAY
7679: PUSH
7680: LD_INT 1
7682: ARRAY
7683: PPUSH
7684: LD_VAR 0 2
7688: PUSH
7689: LD_VAR 0 1
7693: ARRAY
7694: PUSH
7695: LD_INT 2
7697: ARRAY
7698: PPUSH
7699: CALL_OW 84
// if i = 1 then
7703: LD_VAR 0 1
7707: PUSH
7708: LD_INT 1
7710: EQUAL
7711: IFFALSE 7725
// Say ( Lynch , D2-Sol1-4 ) ;
7713: LD_EXP 47
7717: PPUSH
7718: LD_STRING D2-Sol1-4
7720: PPUSH
7721: CALL_OW 88
// if i = 2 then
7725: LD_VAR 0 1
7729: PUSH
7730: LD_INT 2
7732: EQUAL
7733: IFFALSE 7747
// Say ( JMM , D2-JMM-5 ) ;
7735: LD_EXP 37
7739: PPUSH
7740: LD_STRING D2-JMM-5
7742: PPUSH
7743: CALL_OW 88
// if i = 4 then
7747: LD_VAR 0 1
7751: PUSH
7752: LD_INT 4
7754: EQUAL
7755: IFFALSE 7779
// begin RevealFogArea ( 1 , troopsArea ) ;
7757: LD_INT 1
7759: PPUSH
7760: LD_INT 6
7762: PPUSH
7763: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7767: LD_EXP 47
7771: PPUSH
7772: LD_STRING D2-Sol1-5
7774: PPUSH
7775: CALL_OW 88
// end ; if i = 5 then
7779: LD_VAR 0 1
7783: PUSH
7784: LD_INT 5
7786: EQUAL
7787: IFFALSE 7801
// Say ( JMM , D2-JMM-6 ) ;
7789: LD_EXP 37
7793: PPUSH
7794: LD_STRING D2-JMM-6
7796: PPUSH
7797: CALL_OW 88
// if i = 7 then
7801: LD_VAR 0 1
7805: PUSH
7806: LD_INT 7
7808: EQUAL
7809: IFFALSE 7833
// begin RevealFogArea ( 1 , forestArea ) ;
7811: LD_INT 1
7813: PPUSH
7814: LD_INT 7
7816: PPUSH
7817: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7821: LD_EXP 47
7825: PPUSH
7826: LD_STRING D2-Sol1-6
7828: PPUSH
7829: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7833: LD_INT 46
7835: PPUSH
7836: CALL_OW 67
// end ;
7840: GO 7666
7842: POP
7843: POP
// CenterNowOnUnits ( JMM ) ;
7844: LD_EXP 37
7848: PPUSH
7849: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7853: LD_EXP 37
7857: PPUSH
7858: LD_STRING D2-JMM-7
7860: PPUSH
7861: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7865: LD_EXP 47
7869: PPUSH
7870: LD_STRING D2-Sol1-7
7872: PPUSH
7873: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7877: LD_EXP 37
7881: PPUSH
7882: LD_STRING D2-JMM-8
7884: PPUSH
7885: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7889: LD_ADDR_VAR 0 4
7893: PUSH
7894: LD_INT 22
7896: PUSH
7897: LD_INT 1
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 30
7906: PUSH
7907: LD_INT 31
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PPUSH
7918: CALL_OW 69
7922: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7923: LD_EXP 47
7927: PPUSH
7928: LD_VAR 0 4
7932: PUSH
7933: LD_INT 1
7935: ARRAY
7936: PPUSH
7937: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7941: LD_INT 65
7943: PPUSH
7944: LD_INT 101
7946: PPUSH
7947: CALL_OW 428
7951: IFFALSE 7974
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7953: LD_INT 65
7955: PPUSH
7956: LD_INT 101
7958: PPUSH
7959: CALL_OW 428
7963: PPUSH
7964: LD_INT 75
7966: PPUSH
7967: LD_INT 100
7969: PPUSH
7970: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7974: LD_INT 66
7976: PPUSH
7977: LD_INT 103
7979: PPUSH
7980: CALL_OW 428
7984: IFFALSE 8007
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7986: LD_INT 66
7988: PPUSH
7989: LD_INT 103
7991: PPUSH
7992: CALL_OW 428
7996: PPUSH
7997: LD_INT 75
7999: PPUSH
8000: LD_INT 100
8002: PPUSH
8003: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
8007: LD_ADDR_VAR 0 5
8011: PUSH
8012: LD_INT 22
8014: PUSH
8015: LD_INT 1
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: PUSH
8022: LD_INT 21
8024: PUSH
8025: LD_INT 2
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: PUSH
8032: LD_INT 91
8034: PUSH
8035: LD_EXP 37
8039: PUSH
8040: LD_INT 7
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: LIST
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: LIST
8052: PPUSH
8053: CALL_OW 69
8057: ST_TO_ADDR
// if tmp then
8058: LD_VAR 0 5
8062: IFFALSE 8079
// ComMoveXY ( tmp , 75 , 100 ) ;
8064: LD_VAR 0 5
8068: PPUSH
8069: LD_INT 75
8071: PPUSH
8072: LD_INT 100
8074: PPUSH
8075: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
8079: LD_ADDR_VAR 0 3
8083: PUSH
8084: LD_EXP 4
8088: PPUSH
8089: LD_INT 25
8091: PUSH
8092: LD_INT 1
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PPUSH
8099: CALL_OW 72
8103: PPUSH
8104: LD_EXP 37
8108: PPUSH
8109: CALL_OW 74
8113: ST_TO_ADDR
// if sol then
8114: LD_VAR 0 3
8118: IFFALSE 8178
// if GetDistUnits ( JMM , sol ) < 10 then
8120: LD_EXP 37
8124: PPUSH
8125: LD_VAR 0 3
8129: PPUSH
8130: CALL_OW 296
8134: PUSH
8135: LD_INT 10
8137: LESS
8138: IFFALSE 8178
// begin if IsInUnit ( sol ) then
8140: LD_VAR 0 3
8144: PPUSH
8145: CALL_OW 310
8149: IFFALSE 8160
// ComExitVehicle ( sol ) ;
8151: LD_VAR 0 3
8155: PPUSH
8156: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
8160: LD_VAR 0 3
8164: PPUSH
8165: LD_VAR 0 4
8169: PUSH
8170: LD_INT 2
8172: ARRAY
8173: PPUSH
8174: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
8178: LD_INT 10
8180: PPUSH
8181: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
8185: LD_EXP 37
8189: PPUSH
8190: LD_INT 65
8192: PPUSH
8193: LD_INT 101
8195: PPUSH
8196: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
8200: LD_EXP 37
8204: PPUSH
8205: LD_INT 63
8207: PPUSH
8208: LD_INT 100
8210: PPUSH
8211: CALL_OW 178
// tmp := 0 0$0 ;
8215: LD_ADDR_VAR 0 5
8219: PUSH
8220: LD_INT 0
8222: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8223: LD_INT 35
8225: PPUSH
8226: CALL_OW 67
// tmp := tmp + 0 0$1 ;
8230: LD_ADDR_VAR 0 5
8234: PUSH
8235: LD_VAR 0 5
8239: PUSH
8240: LD_INT 35
8242: PLUS
8243: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
8244: LD_EXP 37
8248: PPUSH
8249: LD_INT 65
8251: PPUSH
8252: LD_INT 101
8254: PPUSH
8255: CALL_OW 307
8259: IFTRUE 8271
8261: PUSH
8262: LD_VAR 0 5
8266: PUSH
8267: LD_INT 175
8269: GREATER
8270: OR
8271: IFFALSE 8223
// Say ( JMM , D2a-JMM-1 ) ;
8273: LD_EXP 37
8277: PPUSH
8278: LD_STRING D2a-JMM-1
8280: PPUSH
8281: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
8285: LD_EXP 48
8289: PPUSH
8290: LD_INT 66
8292: PPUSH
8293: LD_INT 103
8295: PPUSH
8296: CALL_OW 111
// tmp := 0 0$0 ;
8300: LD_ADDR_VAR 0 5
8304: PUSH
8305: LD_INT 0
8307: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8308: LD_INT 35
8310: PPUSH
8311: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
8315: LD_EXP 48
8319: PPUSH
8320: LD_INT 66
8322: PPUSH
8323: LD_INT 103
8325: PPUSH
8326: CALL_OW 307
8330: IFTRUE 8342
8332: PUSH
8333: LD_VAR 0 5
8337: PUSH
8338: LD_INT 175
8340: GREATER
8341: OR
8342: IFFALSE 8308
// ComTurnUnit ( Walker , JMM ) ;
8344: LD_EXP 48
8348: PPUSH
8349: LD_EXP 37
8353: PPUSH
8354: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
8358: LD_EXP 48
8362: PPUSH
8363: LD_STRING D2a-Sci1-1
8365: PPUSH
8366: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
8370: LD_EXP 37
8374: PPUSH
8375: LD_EXP 48
8379: PPUSH
8380: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
8384: LD_EXP 37
8388: PPUSH
8389: LD_STRING D2a-JMM-2
8391: PPUSH
8392: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
8396: LD_EXP 48
8400: PPUSH
8401: LD_STRING D2a-Sci1-2
8403: PPUSH
8404: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
8408: LD_EXP 37
8412: PPUSH
8413: LD_STRING D2a-JMM-3
8415: PPUSH
8416: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
8420: LD_EXP 48
8424: PPUSH
8425: LD_STRING D2a-Sci1-3
8427: PPUSH
8428: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
8432: LD_ADDR_EXP 4
8436: PUSH
8437: LD_EXP 4
8441: PUSH
8442: LD_EXP 47
8446: PUSH
8447: LD_EXP 48
8451: PUSH
8452: LD_EXP 49
8456: PUSH
8457: LD_EXP 50
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: ADD
8468: ST_TO_ADDR
// for i in jmm_units do
8469: LD_ADDR_VAR 0 1
8473: PUSH
8474: LD_EXP 4
8478: PUSH
8479: FOR_IN
8480: IFFALSE 8505
// if not IsInUnit ( i ) then
8482: LD_VAR 0 1
8486: PPUSH
8487: CALL_OW 310
8491: NOT
8492: IFFALSE 8503
// ComFree ( i ) ;
8494: LD_VAR 0 1
8498: PPUSH
8499: CALL_OW 139
8503: GO 8479
8505: POP
8506: POP
// Video ( false ) ;
8507: LD_INT 0
8509: PPUSH
8510: CALL 79142 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8514: LD_STRING MSolar1
8516: PPUSH
8517: CALL_OW 337
// jmm_on_west := true ;
8521: LD_ADDR_EXP 5
8525: PUSH
8526: LD_INT 1
8528: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8529: LD_INT 1050
8531: PPUSH
8532: CALL_OW 67
// frank_can_return := true ;
8536: LD_ADDR_EXP 12
8540: PUSH
8541: LD_INT 1
8543: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8544: LD_INT 6300
8546: PPUSH
8547: LD_INT 8400
8549: PPUSH
8550: CALL_OW 12
8554: PPUSH
8555: CALL_OW 67
// send_spec_patrol := true ;
8559: LD_ADDR_EXP 30
8563: PUSH
8564: LD_INT 1
8566: ST_TO_ADDR
// end ;
8567: PPOPN 5
8569: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8570: LD_INT 22
8572: PUSH
8573: LD_INT 1
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_INT 34
8582: PUSH
8583: LD_INT 51
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: LD_INT 92
8592: PUSH
8593: LD_INT 63
8595: PUSH
8596: LD_INT 100
8598: PUSH
8599: LD_INT 5
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: LIST
8612: PUSH
8613: EMPTY
8614: LIST
8615: PPUSH
8616: CALL_OW 69
8620: IFFALSE 8629
8622: PUSH
8623: LD_EXP 5
8627: NOT
8628: AND
8629: IFFALSE 8742
8631: GO 8633
8633: DISABLE
8634: LD_INT 0
8636: PPUSH
8637: PPUSH
// begin enable ;
8638: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8639: LD_ADDR_VAR 0 2
8643: PUSH
8644: LD_INT 22
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 34
8656: PUSH
8657: LD_INT 51
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 92
8666: PUSH
8667: LD_INT 63
8669: PUSH
8670: LD_INT 100
8672: PUSH
8673: LD_INT 5
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: LIST
8686: PUSH
8687: EMPTY
8688: LIST
8689: PPUSH
8690: CALL_OW 69
8694: ST_TO_ADDR
// if not filter then
8695: LD_VAR 0 2
8699: NOT
8700: IFFALSE 8704
// exit ;
8702: GO 8742
// for i in filter do
8704: LD_ADDR_VAR 0 1
8708: PUSH
8709: LD_VAR 0 2
8713: PUSH
8714: FOR_IN
8715: IFFALSE 8740
// begin SetFuel ( i , 0 ) ;
8717: LD_VAR 0 1
8721: PPUSH
8722: LD_INT 0
8724: PPUSH
8725: CALL_OW 240
// ComStop ( i ) ;
8729: LD_VAR 0 1
8733: PPUSH
8734: CALL_OW 141
// end ;
8738: GO 8714
8740: POP
8741: POP
// end ;
8742: PPOPN 2
8744: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8745: LD_EXP 30
8749: IFFALSE 9850
8751: GO 8753
8753: DISABLE
8754: LD_INT 0
8756: PPUSH
8757: PPUSH
8758: PPUSH
8759: PPUSH
8760: PPUSH
8761: PPUSH
8762: PPUSH
// begin if not ru_spec_patrol then
8763: LD_EXP 54
8767: NOT
8768: IFFALSE 8772
// exit ;
8770: GO 9850
// dead1 := false ;
8772: LD_ADDR_VAR 0 1
8776: PUSH
8777: LD_INT 0
8779: ST_TO_ADDR
// dead2 := false ;
8780: LD_ADDR_VAR 0 2
8784: PUSH
8785: LD_INT 0
8787: ST_TO_ADDR
// inarea1 := false ;
8788: LD_ADDR_VAR 0 3
8792: PUSH
8793: LD_INT 0
8795: ST_TO_ADDR
// inarea2 := false ;
8796: LD_ADDR_VAR 0 4
8800: PUSH
8801: LD_INT 0
8803: ST_TO_ADDR
// tmp := [ ] ;
8804: LD_ADDR_VAR 0 6
8808: PUSH
8809: EMPTY
8810: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8811: LD_EXP 54
8815: PPUSH
8816: LD_INT 75
8818: PPUSH
8819: LD_INT 101
8821: PPUSH
8822: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8826: LD_INT 35
8828: PPUSH
8829: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8833: LD_INT 1
8835: PPUSH
8836: LD_EXP 54
8840: PUSH
8841: LD_INT 1
8843: ARRAY
8844: PPUSH
8845: CALL_OW 292
8849: IFTRUE 8880
8851: PUSH
8852: LD_EXP 54
8856: PPUSH
8857: LD_INT 92
8859: PUSH
8860: LD_INT 75
8862: PUSH
8863: LD_INT 101
8865: PUSH
8866: LD_INT 4
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 72
8879: OR
8880: IFFALSE 8826
// ComStop ( ru_spec_patrol ) ;
8882: LD_EXP 54
8886: PPUSH
8887: CALL_OW 141
// Wait ( 0 0$02 ) ;
8891: LD_INT 70
8893: PPUSH
8894: CALL_OW 67
// DialogueOn ;
8898: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8902: LD_EXP 54
8906: PUSH
8907: LD_INT 1
8909: ARRAY
8910: PPUSH
8911: LD_STRING D8-Rus1-1
8913: PPUSH
8914: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8918: LD_EXP 37
8922: PPUSH
8923: LD_STRING D8-JMM-1
8925: PPUSH
8926: CALL_OW 88
// DialogueOff ;
8930: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8934: LD_EXP 54
8938: PPUSH
8939: LD_INT 13
8941: PPUSH
8942: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8946: LD_INT 35
8948: PPUSH
8949: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8953: LD_VAR 0 1
8957: NOT
8958: IFFALSE 8975
8960: PUSH
8961: LD_EXP 54
8965: PUSH
8966: LD_INT 1
8968: ARRAY
8969: PPUSH
8970: CALL_OW 301
8974: AND
8975: IFFALSE 8985
// dead1 := true ;
8977: LD_ADDR_VAR 0 1
8981: PUSH
8982: LD_INT 1
8984: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8985: LD_VAR 0 2
8989: NOT
8990: IFFALSE 9007
8992: PUSH
8993: LD_EXP 54
8997: PUSH
8998: LD_INT 2
9000: ARRAY
9001: PPUSH
9002: CALL_OW 301
9006: AND
9007: IFFALSE 9017
// dead2 := true ;
9009: LD_ADDR_VAR 0 2
9013: PUSH
9014: LD_INT 1
9016: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
9017: LD_VAR 0 3
9021: NOT
9022: IFFALSE 9042
9024: PUSH
9025: LD_EXP 54
9029: PUSH
9030: LD_INT 1
9032: ARRAY
9033: PPUSH
9034: LD_INT 14
9036: PPUSH
9037: CALL_OW 308
9041: AND
9042: IFFALSE 9052
// inarea1 := true ;
9044: LD_ADDR_VAR 0 3
9048: PUSH
9049: LD_INT 1
9051: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
9052: LD_VAR 0 4
9056: NOT
9057: IFFALSE 9077
9059: PUSH
9060: LD_EXP 54
9064: PUSH
9065: LD_INT 2
9067: ARRAY
9068: PPUSH
9069: LD_INT 14
9071: PPUSH
9072: CALL_OW 308
9076: AND
9077: IFFALSE 9087
// inarea2 := true ;
9079: LD_ADDR_VAR 0 4
9083: PUSH
9084: LD_INT 1
9086: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
9087: LD_VAR 0 1
9091: IFFALSE 9099
9093: PUSH
9094: LD_VAR 0 2
9098: AND
9099: IFTRUE 9115
9101: PUSH
9102: LD_VAR 0 1
9106: IFFALSE 9114
9108: PUSH
9109: LD_VAR 0 4
9113: AND
9114: OR
9115: IFTRUE 9131
9117: PUSH
9118: LD_VAR 0 2
9122: IFFALSE 9130
9124: PUSH
9125: LD_VAR 0 3
9129: AND
9130: OR
9131: IFTRUE 9147
9133: PUSH
9134: LD_VAR 0 3
9138: IFFALSE 9146
9140: PUSH
9141: LD_VAR 0 4
9145: AND
9146: OR
9147: IFFALSE 8946
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
9149: LD_VAR 0 3
9153: IFFALSE 9161
9155: PUSH
9156: LD_VAR 0 4
9160: AND
9161: IFTRUE 9177
9163: PUSH
9164: LD_VAR 0 1
9168: IFFALSE 9176
9170: PUSH
9171: LD_VAR 0 4
9175: AND
9176: OR
9177: IFTRUE 9193
9179: PUSH
9180: LD_VAR 0 2
9184: IFFALSE 9192
9186: PUSH
9187: LD_VAR 0 3
9191: AND
9192: OR
9193: IFFALSE 9830
// begin prepare_siege := true ;
9195: LD_ADDR_EXP 31
9199: PUSH
9200: LD_INT 1
9202: ST_TO_ADDR
// DialogueOn ;
9203: CALL_OW 6
// if ( inarea1 and inarea2 ) then
9207: LD_VAR 0 3
9211: IFFALSE 9219
9213: PUSH
9214: LD_VAR 0 4
9218: AND
9219: IFFALSE 9235
// Say ( JMM , D8b-JMM-1a ) else
9221: LD_EXP 37
9225: PPUSH
9226: LD_STRING D8b-JMM-1a
9228: PPUSH
9229: CALL_OW 88
9233: GO 9247
// Say ( JMM , D8b-JMM-1 ) ;
9235: LD_EXP 37
9239: PPUSH
9240: LD_STRING D8b-JMM-1
9242: PPUSH
9243: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
9247: LD_EXP 4
9251: PPUSH
9252: LD_INT 26
9254: PUSH
9255: LD_INT 1
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PPUSH
9262: CALL_OW 72
9266: PUSH
9267: LD_EXP 38
9271: PUSH
9272: LD_EXP 39
9276: PUSH
9277: LD_EXP 48
9281: PUSH
9282: LD_EXP 51
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: DIFF
9293: PPUSH
9294: LD_STRING D8b-Sol1-1
9296: PPUSH
9297: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
9301: LD_EXP 39
9305: IFFALSE 9319
9307: PUSH
9308: LD_EXP 39
9312: PUSH
9313: LD_EXP 4
9317: IN
9318: AND
9319: IFFALSE 9335
// Say ( Cyrus , D8b-Cyrus-1 ) else
9321: LD_EXP 39
9325: PPUSH
9326: LD_STRING D8b-Cyrus-1
9328: PPUSH
9329: CALL_OW 88
9333: GO 9347
// Say ( JMM , D8b-JMM-1a ) ;
9335: LD_EXP 37
9339: PPUSH
9340: LD_STRING D8b-JMM-1a
9342: PPUSH
9343: CALL_OW 88
// if Lisa and Lisa in jmm_units then
9347: LD_EXP 40
9351: IFFALSE 9365
9353: PUSH
9354: LD_EXP 40
9358: PUSH
9359: LD_EXP 4
9363: IN
9364: AND
9365: IFFALSE 9379
// Say ( Lisa , D8b-Lisa-2 ) ;
9367: LD_EXP 40
9371: PPUSH
9372: LD_STRING D8b-Lisa-2
9374: PPUSH
9375: CALL_OW 88
// if Bobby and Bobby in jmm_units then
9379: LD_EXP 38
9383: IFFALSE 9397
9385: PUSH
9386: LD_EXP 38
9390: PUSH
9391: LD_EXP 4
9395: IN
9396: AND
9397: IFFALSE 9413
// Say ( Bobby , D8b-Bobby-1 ) else
9399: LD_EXP 38
9403: PPUSH
9404: LD_STRING D8b-Bobby-1
9406: PPUSH
9407: CALL_OW 88
9411: GO 9473
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
9413: LD_ADDR_VAR 0 5
9417: PUSH
9418: LD_EXP 4
9422: PPUSH
9423: LD_INT 26
9425: PUSH
9426: LD_INT 1
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PPUSH
9433: CALL_OW 72
9437: PUSH
9438: LD_EXP 38
9442: PUSH
9443: LD_EXP 39
9447: PUSH
9448: LD_EXP 48
9452: PUSH
9453: LD_EXP 51
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: DIFF
9464: PPUSH
9465: LD_STRING D8b-Sol2-1
9467: PPUSH
9468: CALL 585 0 2
9472: ST_TO_ADDR
// DialogueOff ;
9473: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
9477: LD_EXP 39
9481: IFFALSE 9495
9483: PUSH
9484: LD_EXP 39
9488: PUSH
9489: LD_EXP 4
9493: IN
9494: AND
9495: IFFALSE 9520
// tmp := Insert ( tmp , 1 , Cyrus ) ;
9497: LD_ADDR_VAR 0 6
9501: PUSH
9502: LD_VAR 0 6
9506: PPUSH
9507: LD_INT 1
9509: PPUSH
9510: LD_EXP 39
9514: PPUSH
9515: CALL_OW 2
9519: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
9520: LD_EXP 38
9524: IFFALSE 9538
9526: PUSH
9527: LD_EXP 38
9531: PUSH
9532: LD_EXP 4
9536: IN
9537: AND
9538: IFFALSE 9563
// tmp := Insert ( tmp , 1 , Bobby ) ;
9540: LD_ADDR_VAR 0 6
9544: PUSH
9545: LD_VAR 0 6
9549: PPUSH
9550: LD_INT 1
9552: PPUSH
9553: LD_EXP 38
9557: PPUSH
9558: CALL_OW 2
9562: ST_TO_ADDR
// if sol then
9563: LD_VAR 0 5
9567: IFFALSE 9592
// tmp := Insert ( tmp , 1 , sol ) ;
9569: LD_ADDR_VAR 0 6
9573: PUSH
9574: LD_VAR 0 6
9578: PPUSH
9579: LD_INT 1
9581: PPUSH
9582: LD_VAR 0 5
9586: PPUSH
9587: CALL_OW 2
9591: ST_TO_ADDR
// if tmp then
9592: LD_VAR 0 6
9596: IFFALSE 9789
// begin SetSide ( tmp , 8 ) ;
9598: LD_VAR 0 6
9602: PPUSH
9603: LD_INT 8
9605: PPUSH
9606: CALL_OW 235
// for i in tmp do
9610: LD_ADDR_VAR 0 7
9614: PUSH
9615: LD_VAR 0 6
9619: PUSH
9620: FOR_IN
9621: IFFALSE 9634
// ComExit ( i ) ;
9623: LD_VAR 0 7
9627: PPUSH
9628: CALL 79568 0 1
9632: GO 9620
9634: POP
9635: POP
// wait ( 0 0$0.3 ) ;
9636: LD_INT 10
9638: PPUSH
9639: CALL_OW 67
// ComFree ( tmp ) ;
9643: LD_VAR 0 6
9647: PPUSH
9648: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9652: LD_VAR 0 6
9656: PPUSH
9657: LD_INT 15
9659: PPUSH
9660: CALL_OW 173
// AddComHold ( tmp ) ;
9664: LD_VAR 0 6
9668: PPUSH
9669: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9673: LD_INT 35
9675: PPUSH
9676: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9680: LD_VAR 0 6
9684: PUSH
9685: LD_INT 1
9687: ARRAY
9688: PPUSH
9689: CALL_OW 314
9693: NOT
9694: IFFALSE 9708
// ComMoveToArea ( tmp , cyrusEscape ) ;
9696: LD_VAR 0 6
9700: PPUSH
9701: LD_INT 15
9703: PPUSH
9704: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9708: LD_VAR 0 6
9712: PUSH
9713: LD_INT 1
9715: ARRAY
9716: PPUSH
9717: LD_INT 15
9719: PPUSH
9720: CALL_OW 308
9724: IFFALSE 9779
// begin RemoveUnit ( tmp [ 1 ] ) ;
9726: LD_VAR 0 6
9730: PUSH
9731: LD_INT 1
9733: ARRAY
9734: PPUSH
9735: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9739: LD_ADDR_EXP 4
9743: PUSH
9744: LD_EXP 4
9748: PUSH
9749: LD_VAR 0 6
9753: PUSH
9754: LD_INT 1
9756: ARRAY
9757: DIFF
9758: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9759: LD_ADDR_VAR 0 6
9763: PUSH
9764: LD_VAR 0 6
9768: PUSH
9769: LD_VAR 0 6
9773: PUSH
9774: LD_INT 1
9776: ARRAY
9777: DIFF
9778: ST_TO_ADDR
// end ; until tmp = 0 ;
9779: LD_VAR 0 6
9783: PUSH
9784: LD_INT 0
9786: EQUAL
9787: IFFALSE 9673
// end ; wait ( 0 0$30 ) ;
9789: LD_INT 1050
9791: PPUSH
9792: CALL_OW 67
// if ru_spec_patrol then
9796: LD_EXP 54
9800: IFFALSE 9828
// for i in ru_spec_patrol do
9802: LD_ADDR_VAR 0 7
9806: PUSH
9807: LD_EXP 54
9811: PUSH
9812: FOR_IN
9813: IFFALSE 9826
// RemoveUnit ( i ) ;
9815: LD_VAR 0 7
9819: PPUSH
9820: CALL_OW 64
9824: GO 9812
9826: POP
9827: POP
// end else
9828: GO 9850
// begin prepare_siege := false ;
9830: LD_ADDR_EXP 31
9834: PUSH
9835: LD_INT 0
9837: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9838: LD_EXP 37
9842: PPUSH
9843: LD_STRING D8a-JMM-1
9845: PPUSH
9846: CALL_OW 88
// end ; end ;
9850: PPOPN 7
9852: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9853: LD_EXP 12
9857: IFFALSE 11153
9859: GO 9861
9861: DISABLE
9862: LD_INT 0
9864: PPUSH
9865: PPUSH
9866: PPUSH
// begin uc_side := 8 ;
9867: LD_ADDR_OWVAR 20
9871: PUSH
9872: LD_INT 8
9874: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9875: LD_ADDR_VAR 0 3
9879: PUSH
9880: LD_INT 59
9882: PUSH
9883: LD_INT 71
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 122
9892: PUSH
9893: LD_INT 117
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9904: LD_ADDR_EXP 51
9908: PUSH
9909: LD_STRING Frank
9911: PPUSH
9912: LD_INT 0
9914: PPUSH
9915: LD_STRING 
9917: PPUSH
9918: CALL 41038 0 3
9922: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9923: LD_ADDR_VAR 0 1
9927: PUSH
9928: LD_INT 1
9930: PPUSH
9931: LD_INT 2
9933: PPUSH
9934: CALL_OW 12
9938: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9939: LD_EXP 51
9943: PPUSH
9944: LD_VAR 0 3
9948: PUSH
9949: LD_VAR 0 1
9953: ARRAY
9954: PUSH
9955: LD_INT 1
9957: ARRAY
9958: PPUSH
9959: LD_VAR 0 3
9963: PUSH
9964: LD_VAR 0 1
9968: ARRAY
9969: PUSH
9970: LD_INT 2
9972: ARRAY
9973: PPUSH
9974: LD_INT 0
9976: PPUSH
9977: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9981: LD_EXP 51
9985: PPUSH
9986: LD_INT 1
9988: PPUSH
9989: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9993: LD_INT 35
9995: PPUSH
9996: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
10000: LD_EXP 51
10004: PPUSH
10005: LD_EXP 37
10009: PPUSH
10010: CALL_OW 296
10014: PUSH
10015: LD_INT 8
10017: LESS
10018: IFFALSE 10035
10020: PUSH
10021: LD_EXP 51
10025: PPUSH
10026: CALL_OW 256
10030: PUSH
10031: LD_INT 250
10033: GREATER
10034: AND
10035: IFFALSE 9993
// Video ( true ) ;
10037: LD_INT 1
10039: PPUSH
10040: CALL 79142 0 1
// CenterOnUnits ( JMM ) ;
10044: LD_EXP 37
10048: PPUSH
10049: CALL_OW 85
// if IsInUnit ( JMM ) then
10053: LD_EXP 37
10057: PPUSH
10058: CALL_OW 310
10062: IFFALSE 10073
// ComFree ( JMM ) ;
10064: LD_EXP 37
10068: PPUSH
10069: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
10073: LD_EXP 37
10077: PPUSH
10078: LD_EXP 51
10082: PPUSH
10083: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
10087: LD_EXP 51
10091: PPUSH
10092: LD_EXP 37
10096: PPUSH
10097: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
10101: LD_EXP 37
10105: PPUSH
10106: LD_STRING D6-JMM-1
10108: PPUSH
10109: CALL_OW 88
// p := 0 ;
10113: LD_ADDR_VAR 0 2
10117: PUSH
10118: LD_INT 0
10120: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10121: LD_INT 35
10123: PPUSH
10124: CALL_OW 67
// p := p + 1 ;
10128: LD_ADDR_VAR 0 2
10132: PUSH
10133: LD_VAR 0 2
10137: PUSH
10138: LD_INT 1
10140: PLUS
10141: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
10142: LD_EXP 37
10146: PPUSH
10147: LD_EXP 51
10151: PPUSH
10152: CALL_OW 296
10156: PUSH
10157: LD_INT 8
10159: LESS
10160: IFTRUE 10172
10162: PUSH
10163: LD_VAR 0 2
10167: PUSH
10168: LD_INT 7
10170: GREATER
10171: OR
10172: IFFALSE 10121
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
10174: LD_EXP 40
10178: IFFALSE 10200
10180: PUSH
10181: LD_EXP 40
10185: PPUSH
10186: LD_EXP 51
10190: PPUSH
10191: CALL_OW 296
10195: PUSH
10196: LD_INT 20
10198: LESS
10199: AND
10200: IFFALSE 10214
10202: PUSH
10203: LD_EXP 40
10207: PUSH
10208: LD_EXP 4
10212: IN
10213: AND
10214: IFFALSE 10239
// begin ComFree ( Lisa ) ;
10216: LD_EXP 40
10220: PPUSH
10221: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
10225: LD_EXP 40
10229: PPUSH
10230: LD_EXP 51
10234: PPUSH
10235: CALL_OW 172
// end ; if Lynch then
10239: LD_EXP 47
10243: IFFALSE 10268
// begin ComFree ( Lynch ) ;
10245: LD_EXP 47
10249: PPUSH
10250: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
10254: LD_EXP 47
10258: PPUSH
10259: LD_EXP 51
10263: PPUSH
10264: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
10268: LD_EXP 37
10272: PPUSH
10273: LD_EXP 51
10277: PPUSH
10278: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10282: LD_EXP 51
10286: PPUSH
10287: LD_EXP 37
10291: PPUSH
10292: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
10296: LD_EXP 51
10300: PPUSH
10301: LD_STRING D6-Frank-1
10303: PPUSH
10304: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
10308: LD_INT 69
10310: PPUSH
10311: LD_INT 20
10313: PPUSH
10314: LD_INT 1
10316: PPUSH
10317: LD_INT 20
10319: NEG
10320: PPUSH
10321: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
10325: LD_INT 69
10327: PPUSH
10328: LD_INT 20
10330: PPUSH
10331: LD_INT 1
10333: PPUSH
10334: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
10338: LD_INT 190
10340: PPUSH
10341: LD_INT 31
10343: PPUSH
10344: LD_INT 1
10346: PPUSH
10347: LD_INT 20
10349: NEG
10350: PPUSH
10351: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
10355: LD_INT 190
10357: PPUSH
10358: LD_INT 31
10360: PPUSH
10361: LD_INT 1
10363: PPUSH
10364: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
10368: LD_INT 69
10370: PPUSH
10371: LD_INT 20
10373: PPUSH
10374: CALL_OW 84
// Wait ( 0 0$02 ) ;
10378: LD_INT 70
10380: PPUSH
10381: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
10385: LD_EXP 37
10389: PPUSH
10390: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
10394: LD_EXP 40
10398: IFFALSE 10420
10400: PUSH
10401: LD_EXP 40
10405: PPUSH
10406: LD_EXP 51
10410: PPUSH
10411: CALL_OW 296
10415: PUSH
10416: LD_INT 20
10418: LESS
10419: AND
10420: IFFALSE 10433
10422: PUSH
10423: LD_EXP 40
10427: PPUSH
10428: CALL_OW 302
10432: AND
10433: IFFALSE 10447
10435: PUSH
10436: LD_EXP 40
10440: PUSH
10441: LD_EXP 4
10445: IN
10446: AND
10447: IFFALSE 10571
// begin ComFree ( Lisa ) ;
10449: LD_EXP 40
10453: PPUSH
10454: CALL_OW 139
// p := 0 ;
10458: LD_ADDR_VAR 0 2
10462: PUSH
10463: LD_INT 0
10465: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10466: LD_INT 35
10468: PPUSH
10469: CALL_OW 67
// p := p + 1 ;
10473: LD_ADDR_VAR 0 2
10477: PUSH
10478: LD_VAR 0 2
10482: PUSH
10483: LD_INT 1
10485: PLUS
10486: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10487: LD_EXP 40
10491: PPUSH
10492: LD_EXP 51
10496: PPUSH
10497: CALL_OW 296
10501: PUSH
10502: LD_INT 7
10504: LESS
10505: IFTRUE 10517
10507: PUSH
10508: LD_VAR 0 2
10512: PUSH
10513: LD_INT 7
10515: GREATER
10516: OR
10517: IFFALSE 10466
// Say ( Lisa , D6-Lisa-1 ) ;
10519: LD_EXP 40
10523: PPUSH
10524: LD_STRING D6-Lisa-1
10526: PPUSH
10527: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10531: LD_EXP 40
10535: PPUSH
10536: LD_EXP 51
10540: PPUSH
10541: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10545: LD_EXP 51
10549: PPUSH
10550: LD_EXP 40
10554: PPUSH
10555: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10559: LD_EXP 51
10563: PPUSH
10564: LD_STRING D6-Frank-2
10566: PPUSH
10567: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10571: LD_EXP 47
10575: IFFALSE 10597
10577: PUSH
10578: LD_EXP 47
10582: PPUSH
10583: LD_EXP 51
10587: PPUSH
10588: CALL_OW 296
10592: PUSH
10593: LD_INT 20
10595: LESS
10596: AND
10597: IFFALSE 10610
10599: PUSH
10600: LD_EXP 47
10604: PPUSH
10605: CALL_OW 302
10609: AND
10610: IFFALSE 10807
// begin ComTurnUnit ( Lynch , JMM ) ;
10612: LD_EXP 47
10616: PPUSH
10617: LD_EXP 37
10621: PPUSH
10622: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10626: LD_EXP 51
10630: PPUSH
10631: LD_EXP 37
10635: PPUSH
10636: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10640: LD_EXP 47
10644: PPUSH
10645: LD_STRING D6-Sol1-2
10647: PPUSH
10648: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10652: LD_EXP 37
10656: PPUSH
10657: LD_STRING D6-JMM-2
10659: PPUSH
10660: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10664: LD_EXP 51
10668: PPUSH
10669: LD_STRING D6-Frank-3
10671: PPUSH
10672: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10676: LD_EXP 37
10680: PPUSH
10681: LD_STRING D6-JMM-3
10683: PPUSH
10684: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10688: LD_EXP 51
10692: PPUSH
10693: LD_STRING D6-Frank-4
10695: PPUSH
10696: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10700: LD_EXP 51
10704: PPUSH
10705: LD_STRING D6-Frank-4a
10707: PPUSH
10708: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10712: LD_EXP 37
10716: PPUSH
10717: LD_STRING D6-JMM-4
10719: PPUSH
10720: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10724: LD_EXP 51
10728: PPUSH
10729: LD_STRING D6-Frank-5
10731: PPUSH
10732: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10736: LD_EXP 40
10740: IFFALSE 10753
10742: PUSH
10743: LD_EXP 40
10747: PPUSH
10748: CALL_OW 302
10752: AND
10753: IFFALSE 10767
10755: PUSH
10756: LD_EXP 40
10760: PUSH
10761: LD_EXP 4
10765: IN
10766: AND
10767: IFFALSE 10781
// Say ( Lisa , D6-Lisa-5 ) ;
10769: LD_EXP 40
10773: PPUSH
10774: LD_STRING D6-Lisa-5
10776: PPUSH
10777: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10781: LD_EXP 51
10785: PPUSH
10786: LD_STRING D6-Frank-6
10788: PPUSH
10789: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10793: LD_EXP 37
10797: PPUSH
10798: LD_STRING D6-JMM-6
10800: PPUSH
10801: CALL_OW 88
// end else
10805: GO 10938
// begin ComTurnUnit ( Frank , JMM ) ;
10807: LD_EXP 51
10811: PPUSH
10812: LD_EXP 37
10816: PPUSH
10817: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10821: LD_EXP 51
10825: PPUSH
10826: LD_STRING D6-Frank-4
10828: PPUSH
10829: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10833: LD_EXP 51
10837: PPUSH
10838: LD_STRING D6-Frank-4a
10840: PPUSH
10841: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10845: LD_EXP 37
10849: PPUSH
10850: LD_STRING D6-JMM-4
10852: PPUSH
10853: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10857: LD_EXP 51
10861: PPUSH
10862: LD_STRING D6-Frank-5
10864: PPUSH
10865: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10869: LD_EXP 40
10873: IFFALSE 10886
10875: PUSH
10876: LD_EXP 40
10880: PPUSH
10881: CALL_OW 302
10885: AND
10886: IFFALSE 10900
10888: PUSH
10889: LD_EXP 40
10893: PUSH
10894: LD_EXP 4
10898: IN
10899: AND
10900: IFFALSE 10914
// Say ( Lisa , D6-Lisa-5 ) ;
10902: LD_EXP 40
10906: PPUSH
10907: LD_STRING D6-Lisa-5
10909: PPUSH
10910: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10914: LD_EXP 51
10918: PPUSH
10919: LD_STRING D6-Frank-6
10921: PPUSH
10922: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10926: LD_EXP 37
10930: PPUSH
10931: LD_STRING D6-JMM-6
10933: PPUSH
10934: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10938: LD_STRING Q1
10940: PPUSH
10941: CALL_OW 97
10945: PUSH
10946: LD_INT 1
10948: DOUBLE
10949: EQUAL
10950: IFTRUE 10954
10952: GO 10965
10954: POP
// frank_send_to_scout := true ; 2 :
10955: LD_ADDR_EXP 15
10959: PUSH
10960: LD_INT 1
10962: ST_TO_ADDR
10963: GO 10985
10965: LD_INT 2
10967: DOUBLE
10968: EQUAL
10969: IFTRUE 10973
10971: GO 10984
10973: POP
// frank_send_to_scout := false ; end ;
10974: LD_ADDR_EXP 15
10978: PUSH
10979: LD_INT 0
10981: ST_TO_ADDR
10982: GO 10985
10984: POP
// Video ( false ) ;
10985: LD_INT 0
10987: PPUSH
10988: CALL 79142 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10992: LD_EXP 37
10996: PUSH
10997: LD_EXP 40
11001: PUSH
11002: LD_EXP 47
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: LIST
11011: PPUSH
11012: CALL_OW 139
// if frank_send_to_scout then
11016: LD_EXP 15
11020: IFFALSE 11074
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
11022: LD_EXP 51
11026: PPUSH
11027: LD_INT 15
11029: PPUSH
11030: CALL_OW 113
// wait ( 0 0$01 ) ;
11034: LD_INT 35
11036: PPUSH
11037: CALL_OW 67
// until not See ( 1 , Frank ) ;
11041: LD_INT 1
11043: PPUSH
11044: LD_EXP 51
11048: PPUSH
11049: CALL_OW 292
11053: NOT
11054: IFFALSE 11022
// wait ( 0 0$02 ) ;
11056: LD_INT 70
11058: PPUSH
11059: CALL_OW 67
// RemoveUnit ( Frank ) ;
11063: LD_EXP 51
11067: PPUSH
11068: CALL_OW 64
// end else
11072: GO 11086
// SetSide ( Frank , 1 ) ;
11074: LD_EXP 51
11078: PPUSH
11079: LD_INT 1
11081: PPUSH
11082: CALL_OW 235
// send_attack_on_cornel_base := true ;
11086: LD_ADDR_EXP 26
11090: PUSH
11091: LD_INT 1
11093: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11094: LD_INT 35
11096: PPUSH
11097: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
11101: LD_ADDR_EXP 29
11105: PUSH
11106: LD_EXP 29
11110: PPUSH
11111: LD_STRING -
11113: PPUSH
11114: CALL 1077 0 2
11118: ST_TO_ADDR
// if debug then
11119: LD_EXP 1
11123: IFFALSE 11135
// debug_strings := time_to_prepare ;
11125: LD_ADDR_OWVAR 48
11129: PUSH
11130: LD_EXP 29
11134: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
11135: LD_EXP 29
11139: PUSH
11140: LD_INT 0
11142: EQUAL
11143: IFFALSE 11094
// cornel_prepared := true ;
11145: LD_ADDR_EXP 11
11149: PUSH
11150: LD_INT 1
11152: ST_TO_ADDR
// end ;
11153: PPOPN 3
11155: END
// every 0 0$01 trigger cornel_prepared do
11156: LD_EXP 11
11160: IFFALSE 11470
11162: GO 11164
11164: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
11165: LD_EXP 44
11169: PPUSH
11170: LD_STRING D3-Corn-1
11172: PPUSH
11173: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
11177: LD_STRING MOutWait
11179: PPUSH
11180: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
11184: LD_INT 35
11186: PPUSH
11187: CALL_OW 67
// until cornel_counter = 0 ;
11191: LD_EXP 10
11195: PUSH
11196: LD_INT 0
11198: EQUAL
11199: IFFALSE 11184
// SayRadio ( Cornel , D3a-Corn-1 ) ;
11201: LD_EXP 44
11205: PPUSH
11206: LD_STRING D3a-Corn-1
11208: PPUSH
11209: CALL_OW 94
// if IsOk ( Cornel ) then
11213: LD_EXP 44
11217: PPUSH
11218: CALL_OW 302
11222: IFFALSE 11236
// Say ( JMM , D3a-JMM-1 ) ;
11224: LD_EXP 37
11228: PPUSH
11229: LD_STRING D3a-JMM-1
11231: PPUSH
11232: CALL_OW 88
// end_mission_allowed := true ;
11236: LD_ADDR_EXP 21
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11244: LD_STRING M2
11246: PPUSH
11247: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
11251: LD_INT 9
11253: PPUSH
11254: LD_INT 1
11256: PPUSH
11257: CALL_OW 424
// Wait ( 0 0$05 ) ;
11261: LD_INT 175
11263: PPUSH
11264: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
11268: LD_EXP 44
11272: PPUSH
11273: LD_STRING D3a-Corn-2
11275: PPUSH
11276: CALL_OW 94
// cornel_attack := true ;
11280: LD_ADDR_EXP 9
11284: PUSH
11285: LD_INT 1
11287: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
11288: LD_INT 105
11290: PPUSH
11291: CALL_OW 67
// AddMoreTanks ( ) ;
11295: CALL 5408 0 0
// if frank_send_to_scout then
11299: LD_EXP 15
11303: IFFALSE 11470
// begin InitHc ;
11305: CALL_OW 19
// InitUc ;
11309: CALL_OW 18
// uc_side := 8 ;
11313: LD_ADDR_OWVAR 20
11317: PUSH
11318: LD_INT 8
11320: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
11321: LD_ADDR_EXP 51
11325: PUSH
11326: LD_STRING Frank
11328: PPUSH
11329: LD_INT 0
11331: PPUSH
11332: LD_STRING 
11334: PPUSH
11335: CALL 41038 0 3
11339: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
11340: LD_EXP 51
11344: PPUSH
11345: LD_INT 6
11347: PPUSH
11348: LD_INT 9
11350: PPUSH
11351: LD_INT 0
11353: PPUSH
11354: CALL_OW 48
// ComCrawl ( Frank ) ;
11358: LD_EXP 51
11362: PPUSH
11363: CALL_OW 137
// repeat wait ( 10 ) ;
11367: LD_INT 10
11369: PPUSH
11370: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11374: LD_EXP 37
11378: PPUSH
11379: LD_EXP 51
11383: PPUSH
11384: CALL_OW 296
11388: PUSH
11389: LD_INT 9
11391: LESS
11392: IFTRUE 11413
11394: PUSH
11395: LD_INT 9
11397: PPUSH
11398: LD_INT 22
11400: PUSH
11401: LD_INT 1
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PPUSH
11408: CALL_OW 70
11412: OR
11413: IFFALSE 11367
// if IsDead ( Frank ) then
11415: LD_EXP 51
11419: PPUSH
11420: CALL_OW 301
11424: IFFALSE 11428
// exit ;
11426: GO 11470
// CenterOnUnits ( Frank ) ;
11428: LD_EXP 51
11432: PPUSH
11433: CALL_OW 85
// SetSide ( Frank , 1 ) ;
11437: LD_EXP 51
11441: PPUSH
11442: LD_INT 1
11444: PPUSH
11445: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
11449: LD_EXP 51
11453: PPUSH
11454: LD_STRING D6a-Frank-1
11456: PPUSH
11457: CALL_OW 88
// ComWalk ( Frank ) ;
11461: LD_EXP 51
11465: PPUSH
11466: CALL_OW 138
// end ; end ;
11470: END
// every 0 0$01 trigger solar_builded do
11471: LD_EXP 14
11475: IFFALSE 11581
11477: GO 11479
11479: DISABLE
// begin Wait ( 0 0$02 ) ;
11480: LD_INT 70
11482: PPUSH
11483: CALL_OW 67
// DialogueOn ;
11487: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11491: LD_EXP 37
11495: PPUSH
11496: LD_STRING D2b-JMM-1
11498: PPUSH
11499: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11503: LD_EXP 48
11507: IFFALSE 11520
11509: PUSH
11510: LD_EXP 48
11514: PPUSH
11515: CALL_OW 302
11519: AND
11520: IFFALSE 11570
// begin Say ( Walker , D2b-Sci1-1 ) ;
11522: LD_EXP 48
11526: PPUSH
11527: LD_STRING D2b-Sci1-1
11529: PPUSH
11530: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11534: LD_EXP 37
11538: PPUSH
11539: LD_STRING D2b-JMM-2
11541: PPUSH
11542: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11546: LD_EXP 48
11550: PPUSH
11551: LD_STRING D2b-Sci1-2
11553: PPUSH
11554: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11558: LD_EXP 37
11562: PPUSH
11563: LD_STRING D2b-JMM-3
11565: PPUSH
11566: CALL_OW 88
// end ; DialogueOff ;
11570: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11574: LD_STRING MOutSol
11576: PPUSH
11577: CALL_OW 337
// end ;
11581: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11582: LD_EXP 14
11586: IFFALSE 11599
11588: PUSH
11589: LD_EXP 37
11593: PPUSH
11594: CALL_OW 302
11598: AND
11599: IFFALSE 11612
11601: PUSH
11602: LD_EXP 37
11606: PPUSH
11607: CALL 911 0 1
11611: AND
11612: IFFALSE 11621
11614: PUSH
11615: LD_EXP 16
11619: NOT
11620: AND
11621: IFFALSE 11692
11623: GO 11625
11625: DISABLE
11626: LD_INT 0
11628: PPUSH
// begin jmm_in_veh := true ;
11629: LD_ADDR_EXP 16
11633: PUSH
11634: LD_INT 1
11636: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11637: LD_ADDR_VAR 0 1
11641: PUSH
11642: LD_INT 0
11644: PPUSH
11645: LD_INT 1
11647: PPUSH
11648: CALL_OW 12
11652: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11653: LD_INT 70
11655: PPUSH
11656: CALL_OW 67
// if i then
11660: LD_VAR 0 1
11664: IFFALSE 11680
// Say ( JMM , D2c-JMM-1 ) else
11666: LD_EXP 37
11670: PPUSH
11671: LD_STRING D2c-JMM-1
11673: PPUSH
11674: CALL_OW 88
11678: GO 11692
// Say ( JMM , D2c-JMM-1a ) ;
11680: LD_EXP 37
11684: PPUSH
11685: LD_STRING D2c-JMM-1a
11687: PPUSH
11688: CALL_OW 88
// end ;
11692: PPOPN 1
11694: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11695: LD_EXP 14
11699: IFFALSE 11712
11701: PUSH
11702: LD_EXP 38
11706: PPUSH
11707: CALL_OW 302
11711: AND
11712: IFFALSE 11725
11714: PUSH
11715: LD_EXP 38
11719: PPUSH
11720: CALL 911 0 1
11724: AND
11725: IFFALSE 11734
11727: PUSH
11728: LD_EXP 17
11732: NOT
11733: AND
11734: IFFALSE 11766
11736: GO 11738
11738: DISABLE
// begin bobby_in_veh := true ;
11739: LD_ADDR_EXP 17
11743: PUSH
11744: LD_INT 1
11746: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11747: LD_INT 70
11749: PPUSH
11750: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11754: LD_EXP 38
11758: PPUSH
11759: LD_STRING D2c-Bobby-1
11761: PPUSH
11762: CALL_OW 88
11766: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11767: LD_EXP 14
11771: IFFALSE 11784
11773: PUSH
11774: LD_EXP 40
11778: PPUSH
11779: CALL_OW 302
11783: AND
11784: IFFALSE 11797
11786: PUSH
11787: LD_EXP 40
11791: PPUSH
11792: CALL 911 0 1
11796: AND
11797: IFFALSE 11806
11799: PUSH
11800: LD_EXP 19
11804: NOT
11805: AND
11806: IFFALSE 11838
11808: GO 11810
11810: DISABLE
// begin lisa_in_veh := true ;
11811: LD_ADDR_EXP 19
11815: PUSH
11816: LD_INT 1
11818: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11819: LD_INT 70
11821: PPUSH
11822: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11826: LD_EXP 40
11830: PPUSH
11831: LD_STRING D2c-Lisa-1
11833: PPUSH
11834: CALL_OW 88
11838: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11839: LD_EXP 14
11843: IFFALSE 11856
11845: PUSH
11846: LD_EXP 39
11850: PPUSH
11851: CALL_OW 302
11855: AND
11856: IFFALSE 11869
11858: PUSH
11859: LD_EXP 39
11863: PPUSH
11864: CALL 911 0 1
11868: AND
11869: IFFALSE 11878
11871: PUSH
11872: LD_EXP 18
11876: NOT
11877: AND
11878: IFFALSE 11949
11880: GO 11882
11882: DISABLE
11883: LD_INT 0
11885: PPUSH
// begin cyrus_in_veh := true ;
11886: LD_ADDR_EXP 18
11890: PUSH
11891: LD_INT 1
11893: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11894: LD_ADDR_VAR 0 1
11898: PUSH
11899: LD_INT 0
11901: PPUSH
11902: LD_INT 1
11904: PPUSH
11905: CALL_OW 12
11909: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11910: LD_INT 70
11912: PPUSH
11913: CALL_OW 67
// if i then
11917: LD_VAR 0 1
11921: IFFALSE 11937
// Say ( Cyrus , D2c-Cyrus-1 ) else
11923: LD_EXP 39
11927: PPUSH
11928: LD_STRING D2c-Cyrus-1
11930: PPUSH
11931: CALL_OW 88
11935: GO 11949
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11937: LD_EXP 39
11941: PPUSH
11942: LD_STRING D2c-Cyrus-1a
11944: PPUSH
11945: CALL_OW 88
// end ;
11949: PPOPN 1
11951: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11952: LD_EXP 44
11956: PPUSH
11957: LD_INT 16
11959: PPUSH
11960: CALL_OW 308
11964: IFFALSE 12245
11966: GO 11968
11968: DISABLE
11969: LD_INT 0
11971: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11972: LD_INT 3
11974: PPUSH
11975: LD_EXP 44
11979: PPUSH
11980: CALL_OW 471
// send_attack_on_cornel := true ;
11984: LD_ADDR_EXP 32
11988: PUSH
11989: LD_INT 1
11991: ST_TO_ADDR
// if ru_vehicles then
11992: LD_EXP 56
11996: IFFALSE 12030
// for i in ru_vehicles do
11998: LD_ADDR_VAR 0 1
12002: PUSH
12003: LD_EXP 56
12007: PUSH
12008: FOR_IN
12009: IFFALSE 12028
// ComAgressiveMove ( i , 215 , 69 ) ;
12011: LD_VAR 0 1
12015: PPUSH
12016: LD_INT 215
12018: PPUSH
12019: LD_INT 69
12021: PPUSH
12022: CALL_OW 114
12026: GO 12008
12028: POP
12029: POP
// if ru_patrol then
12030: LD_EXP 53
12034: IFFALSE 12068
// for i in ru_patrol do
12036: LD_ADDR_VAR 0 1
12040: PUSH
12041: LD_EXP 53
12045: PUSH
12046: FOR_IN
12047: IFFALSE 12066
// ComAgressiveMove ( i , 215 , 69 ) ;
12049: LD_VAR 0 1
12053: PPUSH
12054: LD_INT 215
12056: PPUSH
12057: LD_INT 69
12059: PPUSH
12060: CALL_OW 114
12064: GO 12046
12066: POP
12067: POP
// if frank_send_to_scout then
12068: LD_EXP 15
12072: IFFALSE 12086
// SayRadio ( Frank , D3b-Frank-1 ) ;
12074: LD_EXP 51
12078: PPUSH
12079: LD_STRING D3b-Frank-1
12081: PPUSH
12082: CALL_OW 94
// wait ( 0 0$03 ) ;
12086: LD_INT 105
12088: PPUSH
12089: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
12093: LD_EXP 44
12097: PPUSH
12098: LD_STRING D4-Corn-1
12100: PPUSH
12101: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
12105: LD_INT 35
12107: PPUSH
12108: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
12112: LD_INT 22
12114: PUSH
12115: LD_INT 4
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 21
12124: PUSH
12125: LD_INT 1
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 3
12134: PUSH
12135: LD_INT 24
12137: PUSH
12138: LD_INT 1000
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: LIST
12153: PPUSH
12154: CALL_OW 69
12158: PUSH
12159: LD_INT 6
12161: LESS
12162: IFFALSE 12105
// if Cornel then
12164: LD_EXP 44
12168: IFFALSE 12208
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
12170: LD_EXP 44
12174: PPUSH
12175: LD_STRING D5-Corn-1
12177: PPUSH
12178: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
12182: LD_EXP 44
12186: PPUSH
12187: LD_EXP 2
12191: PUSH
12192: LD_STRING Cornel
12194: STR
12195: PPUSH
12196: CALL_OW 38
// cornel_saved := true ;
12200: LD_ADDR_EXP 27
12204: PUSH
12205: LD_INT 1
12207: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
12208: LD_INT 4
12210: PPUSH
12211: LD_INT 8
12213: PPUSH
12214: CALL_OW 343
// wait ( 0 0$01 ) ;
12218: LD_INT 35
12220: PPUSH
12221: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
12225: LD_INT 3
12227: PPUSH
12228: LD_EXP 44
12232: PPUSH
12233: CALL_OW 472
// send_attack_on_cornel := false ;
12237: LD_ADDR_EXP 32
12241: PUSH
12242: LD_INT 0
12244: ST_TO_ADDR
// end ;
12245: PPOPN 1
12247: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
12248: LD_INT 9
12250: PPUSH
12251: LD_INT 22
12253: PUSH
12254: LD_INT 1
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PPUSH
12261: CALL_OW 70
12265: IFTRUE 12273
12267: PUSH
12268: LD_EXP 33
12272: OR
12273: IFFALSE 12530
12275: GO 12277
12277: DISABLE
12278: LD_INT 0
12280: PPUSH
12281: PPUSH
// begin enable ;
12282: ENABLE
// if not jmm_on_west then
12283: LD_EXP 5
12287: NOT
12288: IFFALSE 12299
// begin YouLost ( 4 ) ;
12290: LD_STRING 4
12292: PPUSH
12293: CALL_OW 104
// exit ;
12297: GO 12530
// end ; if not game_end then
12299: LD_EXP 33
12303: NOT
12304: IFFALSE 12314
// game_end := true ;
12306: LD_ADDR_EXP 33
12310: PUSH
12311: LD_INT 1
12313: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
12314: LD_ADDR_VAR 0 2
12318: PUSH
12319: LD_INT 9
12321: PPUSH
12322: LD_INT 22
12324: PUSH
12325: LD_INT 1
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PPUSH
12332: CALL_OW 70
12336: ST_TO_ADDR
// if not filter then
12337: LD_VAR 0 2
12341: NOT
12342: IFFALSE 12346
// exit ;
12344: GO 12530
// for i in filter do
12346: LD_ADDR_VAR 0 1
12350: PUSH
12351: LD_VAR 0 2
12355: PUSH
12356: FOR_IN
12357: IFFALSE 12528
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle and IsDrivenBy ( i ) and GetFuel ( i ) > 0 then
12359: LD_VAR 0 1
12363: PPUSH
12364: CALL_OW 302
12368: IFFALSE 12385
12370: PUSH
12371: LD_VAR 0 1
12375: PPUSH
12376: CALL_OW 247
12380: PUSH
12381: LD_INT 2
12383: EQUAL
12384: AND
12385: IFFALSE 12398
12387: PUSH
12388: LD_VAR 0 1
12392: PPUSH
12393: CALL_OW 311
12397: AND
12398: IFFALSE 12415
12400: PUSH
12401: LD_VAR 0 1
12405: PPUSH
12406: CALL_OW 261
12410: PUSH
12411: LD_INT 0
12413: GREATER
12414: AND
12415: IFFALSE 12489
// begin if i = JMM and save_group < 4 then
12417: LD_VAR 0 1
12421: PUSH
12422: LD_EXP 37
12426: EQUAL
12427: IFFALSE 12439
12429: PUSH
12430: LD_EXP 23
12434: PUSH
12435: LD_INT 4
12437: LESS
12438: AND
12439: IFFALSE 12443
// continue ;
12441: GO 12356
// if GetNation ( i ) = nation_american then
12443: LD_VAR 0 1
12447: PPUSH
12448: CALL_OW 248
12452: PUSH
12453: LD_INT 1
12455: EQUAL
12456: IFFALSE 12466
// veh_on_meta := true ;
12458: LD_ADDR_EXP 28
12462: PUSH
12463: LD_INT 1
12465: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
12466: LD_VAR 0 1
12470: PPUSH
12471: CALL_OW 311
12475: PPUSH
12476: CALL 12533 0 1
// RemoveUnit ( i ) ;
12480: LD_VAR 0 1
12484: PPUSH
12485: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
12489: LD_VAR 0 1
12493: PPUSH
12494: CALL_OW 302
12498: IFFALSE 12515
12500: PUSH
12501: LD_VAR 0 1
12505: PPUSH
12506: CALL_OW 247
12510: PUSH
12511: LD_INT 1
12513: EQUAL
12514: AND
12515: IFFALSE 12526
// Save ( i ) ;
12517: LD_VAR 0 1
12521: PPUSH
12522: CALL 12533 0 1
// end ;
12526: GO 12356
12528: POP
12529: POP
// end ;
12530: PPOPN 2
12532: END
// export function Save ( i ) ; begin
12533: LD_INT 0
12535: PPUSH
// if i = JMM and save_counter >= 4 then
12536: LD_VAR 0 1
12540: PUSH
12541: LD_EXP 37
12545: EQUAL
12546: IFFALSE 12558
12548: PUSH
12549: LD_EXP 36
12553: PUSH
12554: LD_INT 4
12556: GREATEREQUAL
12557: AND
12558: IFFALSE 12696
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12560: LD_EXP 24
12564: IFFALSE 12600
12566: PUSH
12567: LD_INT 22
12569: PUSH
12570: LD_INT 1
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 21
12579: PUSH
12580: LD_INT 1
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PPUSH
12591: CALL_OW 69
12595: PUSH
12596: LD_INT 1
12598: GREATER
12599: AND
12600: IFFALSE 12657
// begin show_query := false ;
12602: LD_ADDR_EXP 24
12606: PUSH
12607: LD_INT 0
12609: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12610: LD_STRING Q2
12612: PPUSH
12613: CALL_OW 97
12617: PUSH
12618: LD_INT 1
12620: DOUBLE
12621: EQUAL
12622: IFTRUE 12626
12624: GO 12637
12626: POP
// wait_for_them := true ; 2 :
12627: LD_ADDR_EXP 25
12631: PUSH
12632: LD_INT 1
12634: ST_TO_ADDR
12635: GO 12657
12637: LD_INT 2
12639: DOUBLE
12640: EQUAL
12641: IFTRUE 12645
12643: GO 12656
12645: POP
// wait_for_them := false ; end ;
12646: LD_ADDR_EXP 25
12650: PUSH
12651: LD_INT 0
12653: ST_TO_ADDR
12654: GO 12657
12656: POP
// end ; save_counter := save_counter + 1 ;
12657: LD_ADDR_EXP 36
12661: PUSH
12662: LD_EXP 36
12666: PUSH
12667: LD_INT 1
12669: PLUS
12670: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12671: LD_ADDR_EXP 23
12675: PUSH
12676: LD_EXP 23
12680: PUSH
12681: LD_EXP 37
12685: ADD
12686: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12687: LD_EXP 37
12691: PPUSH
12692: CALL_OW 64
// end ; if i = Lisa then
12696: LD_VAR 0 1
12700: PUSH
12701: LD_EXP 40
12705: EQUAL
12706: IFFALSE 12747
// begin save_counter := save_counter + 1 ;
12708: LD_ADDR_EXP 36
12712: PUSH
12713: LD_EXP 36
12717: PUSH
12718: LD_INT 1
12720: PLUS
12721: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12722: LD_ADDR_EXP 23
12726: PUSH
12727: LD_EXP 23
12731: PUSH
12732: LD_EXP 40
12736: ADD
12737: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12738: LD_EXP 40
12742: PPUSH
12743: CALL_OW 64
// end ; if i = Bobby then
12747: LD_VAR 0 1
12751: PUSH
12752: LD_EXP 38
12756: EQUAL
12757: IFFALSE 12798
// begin save_counter := save_counter + 1 ;
12759: LD_ADDR_EXP 36
12763: PUSH
12764: LD_EXP 36
12768: PUSH
12769: LD_INT 1
12771: PLUS
12772: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12773: LD_ADDR_EXP 23
12777: PUSH
12778: LD_EXP 23
12782: PUSH
12783: LD_EXP 38
12787: ADD
12788: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12789: LD_EXP 38
12793: PPUSH
12794: CALL_OW 64
// end ; if i = Cyrus then
12798: LD_VAR 0 1
12802: PUSH
12803: LD_EXP 39
12807: EQUAL
12808: IFFALSE 12849
// begin save_counter := save_counter + 1 ;
12810: LD_ADDR_EXP 36
12814: PUSH
12815: LD_EXP 36
12819: PUSH
12820: LD_INT 1
12822: PLUS
12823: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12824: LD_ADDR_EXP 23
12828: PUSH
12829: LD_EXP 23
12833: PUSH
12834: LD_EXP 39
12838: ADD
12839: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12840: LD_EXP 39
12844: PPUSH
12845: CALL_OW 64
// end ; if i = Khatam then
12849: LD_VAR 0 1
12853: PUSH
12854: LD_EXP 41
12858: EQUAL
12859: IFFALSE 12900
// begin save_counter := save_counter + 1 ;
12861: LD_ADDR_EXP 36
12865: PUSH
12866: LD_EXP 36
12870: PUSH
12871: LD_INT 1
12873: PLUS
12874: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12875: LD_ADDR_EXP 23
12879: PUSH
12880: LD_EXP 23
12884: PUSH
12885: LD_EXP 41
12889: ADD
12890: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12891: LD_EXP 41
12895: PPUSH
12896: CALL_OW 64
// end ; if i = Frank then
12900: LD_VAR 0 1
12904: PUSH
12905: LD_EXP 51
12909: EQUAL
12910: IFFALSE 12951
// begin save_counter := save_counter + 1 ;
12912: LD_ADDR_EXP 36
12916: PUSH
12917: LD_EXP 36
12921: PUSH
12922: LD_INT 1
12924: PLUS
12925: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12926: LD_ADDR_EXP 23
12930: PUSH
12931: LD_EXP 23
12935: PUSH
12936: LD_EXP 51
12940: ADD
12941: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12942: LD_EXP 51
12946: PPUSH
12947: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12951: LD_VAR 0 1
12955: PUSH
12956: LD_EXP 37
12960: NONEQUAL
12961: IFFALSE 12974
12963: PUSH
12964: LD_VAR 0 1
12968: PPUSH
12969: CALL_OW 302
12973: AND
12974: IFFALSE 12991
12976: PUSH
12977: LD_VAR 0 1
12981: PPUSH
12982: CALL_OW 247
12986: PUSH
12987: LD_INT 1
12989: EQUAL
12990: AND
12991: IFFALSE 13006
12993: PUSH
12994: LD_VAR 0 1
12998: PUSH
12999: LD_EXP 23
13003: IN
13004: NOT
13005: AND
13006: IFFALSE 13047
// begin save_counter := save_counter + 1 ;
13008: LD_ADDR_EXP 36
13012: PUSH
13013: LD_EXP 36
13017: PUSH
13018: LD_INT 1
13020: PLUS
13021: ST_TO_ADDR
// save_others := save_others ^ i ;
13022: LD_ADDR_EXP 22
13026: PUSH
13027: LD_EXP 22
13031: PUSH
13032: LD_VAR 0 1
13036: ADD
13037: ST_TO_ADDR
// RemoveUnit ( i ) ;
13038: LD_VAR 0 1
13042: PPUSH
13043: CALL_OW 64
// end ; end ;
13047: LD_VAR 0 2
13051: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
13052: LD_EXP 24
13056: NOT
13057: IFFALSE 13066
13059: PUSH
13060: LD_EXP 25
13064: NOT
13065: AND
13066: IFTRUE 13102
13068: PUSH
13069: LD_INT 22
13071: PUSH
13072: LD_INT 1
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: LD_INT 21
13081: PUSH
13082: LD_INT 1
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PPUSH
13093: CALL_OW 69
13097: PUSH
13098: LD_INT 0
13100: EQUAL
13101: OR
13102: IFFALSE 13111
13104: GO 13106
13106: DISABLE
// EndMission ;
13107: CALL 13112 0 0
13111: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
13112: LD_INT 0
13114: PPUSH
13115: PPUSH
13116: PPUSH
13117: PPUSH
13118: PPUSH
// wait ( 0 0$01 ) ;
13119: LD_INT 35
13121: PPUSH
13122: CALL_OW 67
// if tick <= 12 12$00 then
13126: LD_OWVAR 1
13130: PUSH
13131: LD_INT 25200
13133: LESSEQUAL
13134: IFFALSE 13143
// SetAchievement ( ACH_ASPEED_3 ) ;
13136: LD_STRING ACH_ASPEED_3
13138: PPUSH
13139: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
13143: LD_EXP 23
13147: PUSH
13148: LD_EXP 22
13152: ADD
13153: PPUSH
13154: LD_INT 25
13156: PUSH
13157: LD_INT 4
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: PPUSH
13164: CALL_OW 72
13168: PUSH
13169: LD_INT 0
13171: EQUAL
13172: IFFALSE 13188
// begin wait ( 3 ) ;
13174: LD_INT 3
13176: PPUSH
13177: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
13181: LD_STRING ACH_NOSCI
13183: PPUSH
13184: CALL_OW 543
// end ; m1 := solar_builded ;
13188: LD_ADDR_VAR 0 3
13192: PUSH
13193: LD_EXP 14
13197: ST_TO_ADDR
// m2 := veh_on_meta ;
13198: LD_ADDR_VAR 0 4
13202: PUSH
13203: LD_EXP 28
13207: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
13208: LD_ADDR_VAR 0 5
13212: PUSH
13213: LD_EXP 34
13217: PUSH
13218: LD_INT 0
13220: EQUAL
13221: ST_TO_ADDR
// if solar_builded then
13222: LD_EXP 14
13226: IFFALSE 13240
// AddMedal ( Solar1 , 1 ) else
13228: LD_STRING Solar1
13230: PPUSH
13231: LD_INT 1
13233: PPUSH
13234: CALL_OW 101
13238: GO 13251
// AddMedal ( Solar1 , - 1 ) ;
13240: LD_STRING Solar1
13242: PPUSH
13243: LD_INT 1
13245: NEG
13246: PPUSH
13247: CALL_OW 101
// if veh_on_meta then
13251: LD_EXP 28
13255: IFFALSE 13269
// AddMedal ( Solar2 , 1 ) else
13257: LD_STRING Solar2
13259: PPUSH
13260: LD_INT 1
13262: PPUSH
13263: CALL_OW 101
13267: GO 13299
// if solar_builded then
13269: LD_EXP 14
13273: IFFALSE 13288
// AddMedal ( Solar2 , - 1 ) else
13275: LD_STRING Solar2
13277: PPUSH
13278: LD_INT 1
13280: NEG
13281: PPUSH
13282: CALL_OW 101
13286: GO 13299
// AddMedal ( Solar2 , - 2 ) ;
13288: LD_STRING Solar2
13290: PPUSH
13291: LD_INT 2
13293: NEG
13294: PPUSH
13295: CALL_OW 101
// if lose_counter = 0 then
13299: LD_EXP 34
13303: PUSH
13304: LD_INT 0
13306: EQUAL
13307: IFFALSE 13321
// AddMedal ( No , 1 ) else
13309: LD_STRING No
13311: PPUSH
13312: LD_INT 1
13314: PPUSH
13315: CALL_OW 101
13319: GO 13367
// if lose_counter > 0 and lose_counter < 5 then
13321: LD_EXP 34
13325: PUSH
13326: LD_INT 0
13328: GREATER
13329: IFFALSE 13341
13331: PUSH
13332: LD_EXP 34
13336: PUSH
13337: LD_INT 5
13339: LESS
13340: AND
13341: IFFALSE 13356
// AddMedal ( No , - 1 ) else
13343: LD_STRING No
13345: PPUSH
13346: LD_INT 1
13348: NEG
13349: PPUSH
13350: CALL_OW 101
13354: GO 13367
// AddMedal ( UpTo4 , - 1 ) ;
13356: LD_STRING UpTo4
13358: PPUSH
13359: LD_INT 1
13361: NEG
13362: PPUSH
13363: CALL_OW 101
// GiveMedals ( MAIN ) ;
13367: LD_STRING MAIN
13369: PPUSH
13370: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
13374: LD_OWVAR 67
13378: PUSH
13379: LD_INT 3
13381: GREATEREQUAL
13382: IFFALSE 13390
13384: PUSH
13385: LD_VAR 0 3
13389: AND
13390: IFFALSE 13398
13392: PUSH
13393: LD_VAR 0 4
13397: AND
13398: IFFALSE 13406
13400: PUSH
13401: LD_VAR 0 5
13405: AND
13406: IFFALSE 13418
// SetAchievementEX ( ACH_AMER , 3 ) ;
13408: LD_STRING ACH_AMER
13410: PPUSH
13411: LD_INT 3
13413: PPUSH
13414: CALL_OW 564
// if IsDead ( Pokryshkin ) then
13418: LD_EXP 52
13422: PPUSH
13423: CALL_OW 301
13427: IFFALSE 13483
// begin stop_talking := true ;
13429: LD_ADDR_OWVAR 56
13433: PUSH
13434: LD_INT 1
13436: ST_TO_ADDR
// for i in save_group union save_others do
13437: LD_ADDR_VAR 0 2
13441: PUSH
13442: LD_EXP 23
13446: PUSH
13447: LD_EXP 22
13451: UNION
13452: PUSH
13453: FOR_IN
13454: IFFALSE 13473
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
13456: LD_VAR 0 2
13460: PPUSH
13461: LD_INT 1
13463: PPUSH
13464: LD_INT 1500
13466: PPUSH
13467: CALL_OW 591
13471: GO 13453
13473: POP
13474: POP
// stop_talking := false ;
13475: LD_ADDR_OWVAR 56
13479: PUSH
13480: LD_INT 0
13482: ST_TO_ADDR
// end ; RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_american ] ] ) ) ;
13483: LD_INT 22
13485: PUSH
13486: LD_INT 1
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: LD_INT 23
13495: PUSH
13496: LD_INT 1
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PPUSH
13507: CALL_OW 69
13511: PPUSH
13512: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
13516: LD_EXP 37
13520: PPUSH
13521: LD_EXP 2
13525: PUSH
13526: LD_STRING JMM
13528: STR
13529: PPUSH
13530: CALL_OW 38
// if Bobby in save_group then
13534: LD_EXP 38
13538: PUSH
13539: LD_EXP 23
13543: IN
13544: IFFALSE 13564
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
13546: LD_EXP 38
13550: PPUSH
13551: LD_EXP 2
13555: PUSH
13556: LD_STRING Bobby
13558: STR
13559: PPUSH
13560: CALL_OW 38
// if Cyrus in save_group then
13564: LD_EXP 39
13568: PUSH
13569: LD_EXP 23
13573: IN
13574: IFFALSE 13594
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
13576: LD_EXP 39
13580: PPUSH
13581: LD_EXP 2
13585: PUSH
13586: LD_STRING Cyrus
13588: STR
13589: PPUSH
13590: CALL_OW 38
// if Lisa in save_group then
13594: LD_EXP 40
13598: PUSH
13599: LD_EXP 23
13603: IN
13604: IFFALSE 13624
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13606: LD_EXP 40
13610: PPUSH
13611: LD_EXP 2
13615: PUSH
13616: LD_STRING Lisa
13618: STR
13619: PPUSH
13620: CALL_OW 38
// if Frank in save_group then
13624: LD_EXP 51
13628: PUSH
13629: LD_EXP 23
13633: IN
13634: IFFALSE 13661
// begin ToLua ( enableBioCharacter(BIO_FRANK) ) ;
13636: LD_STRING enableBioCharacter(BIO_FRANK)
13638: PPUSH
13639: CALL_OW 559
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13643: LD_EXP 51
13647: PPUSH
13648: LD_EXP 2
13652: PUSH
13653: LD_STRING Frank
13655: STR
13656: PPUSH
13657: CALL_OW 38
// end ; if Khatam in save_group then
13661: LD_EXP 41
13665: PUSH
13666: LD_EXP 23
13670: IN
13671: IFFALSE 13691
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13673: LD_EXP 41
13677: PPUSH
13678: LD_EXP 2
13682: PUSH
13683: LD_STRING Khatam
13685: STR
13686: PPUSH
13687: CALL_OW 38
// if save_others then
13691: LD_EXP 22
13695: IFFALSE 13709
// SaveCharacters ( save_others , 03_others ) ;
13697: LD_EXP 22
13701: PPUSH
13702: LD_STRING 03_others
13704: PPUSH
13705: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ANDY) ) ;
13709: LD_STRING enableBioCharacter(BIO_ANDY)
13711: PPUSH
13712: CALL_OW 559
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13716: LD_EXP 45
13720: IFFALSE 13733
13722: PUSH
13723: LD_EXP 45
13727: PPUSH
13728: CALL_OW 302
13732: AND
13733: IFFALSE 13741
13735: PUSH
13736: LD_EXP 27
13740: AND
13741: IFFALSE 13753
// begin ResetFog ;
13743: CALL_OW 335
// DisplayEndingScene ;
13747: CALL 13775 0 0
// end else
13751: GO 13766
// DeleteCharacters ( mission_prefix & Cornel ) ;
13753: LD_EXP 2
13757: PUSH
13758: LD_STRING Cornel
13760: STR
13761: PPUSH
13762: CALL_OW 40
// YouWin ;
13766: CALL_OW 103
// end ;
13770: LD_VAR 0 1
13774: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13775: LD_INT 0
13777: PPUSH
13778: PPUSH
13779: PPUSH
13780: PPUSH
13781: PPUSH
13782: PPUSH
// InGameOn ;
13783: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13787: LD_INT 208
13789: PPUSH
13790: LD_INT 62
13792: PPUSH
13793: LD_INT 1
13795: PPUSH
13796: LD_INT 10
13798: NEG
13799: PPUSH
13800: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13804: LD_INT 208
13806: PPUSH
13807: LD_INT 62
13809: PPUSH
13810: LD_INT 1
13812: PPUSH
13813: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13817: LD_ADDR_VAR 0 3
13821: PUSH
13822: LD_INT 22
13824: PUSH
13825: LD_INT 3
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: PUSH
13832: LD_INT 2
13834: PUSH
13835: LD_INT 21
13837: PUSH
13838: LD_INT 2
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 21
13847: PUSH
13848: LD_INT 1
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: LIST
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PPUSH
13864: CALL_OW 69
13868: ST_TO_ADDR
// if filter then
13869: LD_VAR 0 3
13873: IFFALSE 13901
// for i in filter do
13875: LD_ADDR_VAR 0 2
13879: PUSH
13880: LD_VAR 0 3
13884: PUSH
13885: FOR_IN
13886: IFFALSE 13899
// RemoveUnit ( i ) ;
13888: LD_VAR 0 2
13892: PPUSH
13893: CALL_OW 64
13897: GO 13885
13899: POP
13900: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13901: LD_ADDR_VAR 0 3
13905: PUSH
13906: LD_INT 22
13908: PUSH
13909: LD_INT 4
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: LD_INT 21
13918: PUSH
13919: LD_INT 1
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PPUSH
13930: CALL_OW 69
13934: ST_TO_ADDR
// if filter then
13935: LD_VAR 0 3
13939: IFFALSE 13970
// for i in filter do
13941: LD_ADDR_VAR 0 2
13945: PUSH
13946: LD_VAR 0 3
13950: PUSH
13951: FOR_IN
13952: IFFALSE 13968
// SetLives ( i , 0 ) ;
13954: LD_VAR 0 2
13958: PPUSH
13959: LD_INT 0
13961: PPUSH
13962: CALL_OW 234
13966: GO 13951
13968: POP
13969: POP
// uc_side := 4 ;
13970: LD_ADDR_OWVAR 20
13974: PUSH
13975: LD_INT 4
13977: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13978: LD_ADDR_VAR 0 4
13982: PUSH
13983: LD_STRING Cornell
13985: PPUSH
13986: LD_INT 0
13988: PPUSH
13989: LD_STRING 
13991: PPUSH
13992: CALL 41038 0 3
13996: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13997: LD_VAR 0 4
14001: PPUSH
14002: LD_INT 208
14004: PPUSH
14005: LD_INT 62
14007: PPUSH
14008: LD_INT 0
14010: PPUSH
14011: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
14015: LD_VAR 0 4
14019: PPUSH
14020: LD_INT 100
14022: PPUSH
14023: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
14027: LD_INT 3
14029: PPUSH
14030: LD_VAR 0 4
14034: PPUSH
14035: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
14039: LD_INT 4
14041: PPUSH
14042: LD_INT 3
14044: PPUSH
14045: LD_INT 1
14047: PPUSH
14048: LD_INT 1
14050: PPUSH
14051: CALL_OW 80
// uc_side := 3 ;
14055: LD_ADDR_OWVAR 20
14059: PUSH
14060: LD_INT 3
14062: ST_TO_ADDR
// uc_nation := 3 ;
14063: LD_ADDR_OWVAR 21
14067: PUSH
14068: LD_INT 3
14070: ST_TO_ADDR
// InitHc ;
14071: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
14075: LD_ADDR_VAR 0 5
14079: PUSH
14080: LD_STRING Mikhail
14082: PPUSH
14083: LD_INT 0
14085: PPUSH
14086: LD_STRING 
14088: PPUSH
14089: CALL 41038 0 3
14093: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
14094: LD_INT 1
14096: PPUSH
14097: LD_INT 1
14099: PPUSH
14100: LD_INT 0
14102: PPUSH
14103: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
14107: LD_ADDR_VAR 0 6
14111: PUSH
14112: LD_VAR 0 6
14116: PUSH
14117: CALL_OW 44
14121: ADD
14122: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
14123: LD_ADDR_VAR 0 6
14127: PUSH
14128: LD_VAR 0 6
14132: PUSH
14133: CALL_OW 44
14137: ADD
14138: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
14139: LD_INT 2
14141: PPUSH
14142: LD_INT 4
14144: PPUSH
14145: LD_INT 0
14147: PPUSH
14148: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
14152: LD_ADDR_VAR 0 6
14156: PUSH
14157: LD_VAR 0 6
14161: PUSH
14162: CALL_OW 44
14166: ADD
14167: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
14168: LD_VAR 0 5
14172: PPUSH
14173: LD_INT 17
14175: PPUSH
14176: LD_INT 0
14178: PPUSH
14179: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
14183: LD_VAR 0 5
14187: PPUSH
14188: LD_INT 210
14190: PPUSH
14191: LD_INT 63
14193: PPUSH
14194: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
14198: LD_VAR 0 5
14202: PPUSH
14203: LD_INT 208
14205: PPUSH
14206: LD_INT 62
14208: PPUSH
14209: CALL_OW 178
// for i in fake_russians do
14213: LD_ADDR_VAR 0 2
14217: PUSH
14218: LD_VAR 0 6
14222: PUSH
14223: FOR_IN
14224: IFFALSE 14302
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
14226: LD_VAR 0 2
14230: PPUSH
14231: LD_INT 17
14233: PPUSH
14234: LD_INT 0
14236: PPUSH
14237: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
14241: LD_VAR 0 2
14245: PPUSH
14246: LD_INT 215
14248: PPUSH
14249: LD_INT 67
14251: PPUSH
14252: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
14256: LD_VAR 0 2
14260: PPUSH
14261: LD_INT 208
14263: PPUSH
14264: LD_INT 62
14266: PPUSH
14267: CALL_OW 178
// if GetClass ( i ) = 4 then
14271: LD_VAR 0 2
14275: PPUSH
14276: CALL_OW 257
14280: PUSH
14281: LD_INT 4
14283: EQUAL
14284: IFFALSE 14300
// ComHeal ( i , fake_cornel ) ;
14286: LD_VAR 0 2
14290: PPUSH
14291: LD_VAR 0 4
14295: PPUSH
14296: CALL_OW 128
// end ;
14300: GO 14223
14302: POP
14303: POP
// Wait ( 0 0$01 ) ;
14304: LD_INT 35
14306: PPUSH
14307: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
14311: LD_INT 208
14313: PPUSH
14314: LD_INT 62
14316: PPUSH
14317: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
14321: LD_INT 208
14323: PPUSH
14324: LD_INT 62
14326: PPUSH
14327: LD_INT 1
14329: PPUSH
14330: LD_INT 10
14332: NEG
14333: PPUSH
14334: CALL_OW 330
// Wait ( 0 0$15 ) ;
14338: LD_INT 525
14340: PPUSH
14341: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
14345: LD_INT 208
14347: PPUSH
14348: LD_INT 62
14350: PPUSH
14351: LD_INT 1
14353: PPUSH
14354: CALL_OW 331
// ResetFog ;
14358: CALL_OW 335
// InGameOff ;
14362: CALL_OW 9
// end ;
14366: LD_VAR 0 1
14370: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
14371: LD_INT 10
14373: PPUSH
14374: LD_INT 22
14376: PUSH
14377: LD_INT 1
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PPUSH
14384: CALL_OW 70
14388: IFFALSE 14401
14390: PUSH
14391: LD_EXP 44
14395: PPUSH
14396: CALL_OW 302
14400: AND
14401: IFTRUE 14443
14403: PUSH
14404: LD_INT 22
14406: PUSH
14407: LD_INT 1
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PPUSH
14414: CALL_OW 69
14418: PPUSH
14419: LD_EXP 44
14423: PPUSH
14424: CALL_OW 74
14428: PPUSH
14429: LD_EXP 44
14433: PPUSH
14434: CALL_OW 296
14438: PUSH
14439: LD_INT 30
14441: LESS
14442: OR
14443: IFFALSE 14494
14445: GO 14447
14447: DISABLE
// begin enable ;
14448: ENABLE
// powell_warn := powell_warn + 1 ;
14449: LD_ADDR_EXP 35
14453: PUSH
14454: LD_EXP 35
14458: PUSH
14459: LD_INT 1
14461: PLUS
14462: ST_TO_ADDR
// if powell_warn = 3 then
14463: LD_EXP 35
14467: PUSH
14468: LD_INT 3
14470: EQUAL
14471: IFFALSE 14482
// begin YouLost ( 5 ) ;
14473: LD_STRING 5
14475: PPUSH
14476: CALL_OW 104
// exit ;
14480: GO 14494
// end ; SayRadioNoFace ( Powell , DWarn-Pow-1 ) ;
14482: LD_EXP 46
14486: PPUSH
14487: LD_STRING DWarn-Pow-1
14489: PPUSH
14490: CALL_OW 586
// end ; end_of_file
14494: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
14495: LD_EXP 8
14499: IFFALSE 16344
14501: GO 14503
14503: DISABLE
14504: LD_INT 0
14506: PPUSH
14507: PPUSH
14508: PPUSH
14509: PPUSH
14510: PPUSH
14511: PPUSH
14512: PPUSH
14513: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
14514: LD_EXP 44
14518: PUSH
14519: LD_EXP 45
14523: ADD
14524: PUSH
14525: LD_EXP 6
14529: ADD
14530: PPUSH
14531: LD_INT 250
14533: PPUSH
14534: LD_INT 120
14536: PPUSH
14537: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
14541: LD_ADDR_VAR 0 2
14545: PUSH
14546: LD_EXP 6
14550: PPUSH
14551: LD_INT 25
14553: PUSH
14554: LD_INT 2
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PPUSH
14561: CALL_OW 72
14565: PUSH
14566: LD_EXP 45
14570: DIFF
14571: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
14572: LD_ADDR_VAR 0 3
14576: PUSH
14577: LD_EXP 6
14581: PPUSH
14582: LD_INT 21
14584: PUSH
14585: LD_INT 1
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PPUSH
14592: CALL_OW 72
14596: PUSH
14597: LD_VAR 0 2
14601: DIFF
14602: ST_TO_ADDR
// if not has_eng then
14603: LD_VAR 0 2
14607: NOT
14608: IFFALSE 14691
// begin uc_side := 4 ;
14610: LD_ADDR_OWVAR 20
14614: PUSH
14615: LD_INT 4
14617: ST_TO_ADDR
// uc_nation := 1 ;
14618: LD_ADDR_OWVAR 21
14622: PUSH
14623: LD_INT 1
14625: ST_TO_ADDR
// bc_type := b_depot ;
14626: LD_ADDR_OWVAR 42
14630: PUSH
14631: LD_INT 0
14633: ST_TO_ADDR
// bc_level := 2 ;
14634: LD_ADDR_OWVAR 43
14638: PUSH
14639: LD_INT 2
14641: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14642: LD_ADDR_VAR 0 4
14646: PUSH
14647: LD_INT 264
14649: PPUSH
14650: LD_INT 120
14652: PPUSH
14653: LD_INT 4
14655: PPUSH
14656: CALL_OW 47
14660: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14661: LD_INT 264
14663: PPUSH
14664: LD_INT 120
14666: PPUSH
14667: LD_INT 4
14669: PPUSH
14670: LD_INT 10
14672: NEG
14673: PPUSH
14674: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14678: LD_INT 264
14680: PPUSH
14681: LD_INT 120
14683: PPUSH
14684: LD_INT 4
14686: PPUSH
14687: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14691: LD_INT 35
14693: PPUSH
14694: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14698: LD_EXP 44
14702: PPUSH
14703: LD_INT 10
14705: PPUSH
14706: CALL_OW 308
14710: IFTRUE 14731
14712: PUSH
14713: LD_EXP 44
14717: PPUSH
14718: CALL_OW 310
14722: PPUSH
14723: LD_INT 10
14725: PPUSH
14726: CALL_OW 308
14730: OR
14731: IFFALSE 14691
// if has_eng and not dep then
14733: LD_VAR 0 2
14737: IFFALSE 14746
14739: PUSH
14740: LD_VAR 0 4
14744: NOT
14745: AND
14746: IFFALSE 14896
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14748: LD_VAR 0 2
14752: PPUSH
14753: LD_INT 0
14755: PPUSH
14756: LD_INT 264
14758: PPUSH
14759: LD_INT 120
14761: PPUSH
14762: LD_INT 4
14764: PPUSH
14765: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14769: LD_INT 35
14771: PPUSH
14772: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14776: LD_INT 22
14778: PUSH
14779: LD_INT 4
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 30
14788: PUSH
14789: LD_INT 0
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PPUSH
14800: CALL_OW 69
14804: IFFALSE 14769
// ComMoveXY ( filter , 264 , 120 ) ;
14806: LD_VAR 0 3
14810: PPUSH
14811: LD_INT 264
14813: PPUSH
14814: LD_INT 120
14816: PPUSH
14817: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14821: LD_INT 35
14823: PPUSH
14824: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14828: LD_INT 22
14830: PUSH
14831: LD_INT 4
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PUSH
14838: LD_INT 30
14840: PUSH
14841: LD_INT 0
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PUSH
14848: LD_INT 3
14850: PUSH
14851: LD_INT 57
14853: PUSH
14854: EMPTY
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: LIST
14865: PPUSH
14866: CALL_OW 69
14870: IFFALSE 14821
// ComMoveXY ( filter , 247 , 113 ) ;
14872: LD_VAR 0 3
14876: PPUSH
14877: LD_INT 247
14879: PPUSH
14880: LD_INT 113
14882: PPUSH
14883: CALL_OW 111
// Wait ( 0 0$2 ) ;
14887: LD_INT 70
14889: PPUSH
14890: CALL_OW 67
// end else
14894: GO 14908
// begin SetSide ( dep , 4 ) ;
14896: LD_VAR 0 4
14900: PPUSH
14901: LD_INT 4
14903: PPUSH
14904: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14908: LD_ADDR_VAR 0 4
14912: PUSH
14913: LD_INT 22
14915: PUSH
14916: LD_INT 4
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 30
14925: PUSH
14926: LD_INT 0
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PPUSH
14937: CALL_OW 69
14941: PUSH
14942: LD_INT 1
14944: ARRAY
14945: ST_TO_ADDR
// if not has_eng then
14946: LD_VAR 0 2
14950: NOT
14951: IFFALSE 15038
// for i = 1 to 2 do
14953: LD_ADDR_VAR 0 1
14957: PUSH
14958: DOUBLE
14959: LD_INT 1
14961: DEC
14962: ST_TO_ADDR
14963: LD_INT 2
14965: PUSH
14966: FOR_TO
14967: IFFALSE 15036
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14969: LD_VAR 0 3
14973: PUSH
14974: LD_INT 1
14976: ARRAY
14977: PPUSH
14978: LD_VAR 0 4
14982: PPUSH
14983: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14987: LD_VAR 0 3
14991: PUSH
14992: LD_INT 1
14994: ARRAY
14995: PPUSH
14996: LD_INT 2
14998: PPUSH
14999: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
15003: LD_VAR 0 3
15007: PUSH
15008: LD_INT 1
15010: ARRAY
15011: PPUSH
15012: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
15016: LD_ADDR_VAR 0 3
15020: PUSH
15021: LD_VAR 0 3
15025: PPUSH
15026: LD_INT 1
15028: PPUSH
15029: CALL_OW 3
15033: ST_TO_ADDR
// end ;
15034: GO 14966
15036: POP
15037: POP
// if IsInUnit ( Cornel ) then
15038: LD_EXP 44
15042: PPUSH
15043: CALL_OW 310
15047: IFFALSE 15125
// begin cargo := IsInUnit ( Cornel ) ;
15049: LD_ADDR_VAR 0 7
15053: PUSH
15054: LD_EXP 44
15058: PPUSH
15059: CALL_OW 310
15063: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
15064: LD_VAR 0 7
15068: PPUSH
15069: LD_INT 1
15071: PPUSH
15072: CALL_OW 289
15076: IFFALSE 15087
// ComUnload ( cargo ) ;
15078: LD_VAR 0 7
15082: PPUSH
15083: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
15087: LD_EXP 44
15091: PPUSH
15092: LD_INT 235
15094: PPUSH
15095: LD_INT 122
15097: PPUSH
15098: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
15102: LD_EXP 44
15106: PPUSH
15107: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
15111: LD_EXP 44
15115: PPUSH
15116: LD_VAR 0 4
15120: PPUSH
15121: CALL_OW 180
// end ; if Bierezov then
15125: LD_EXP 45
15129: IFFALSE 15177
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
15131: LD_EXP 45
15135: PPUSH
15136: LD_INT 260
15138: PPUSH
15139: LD_INT 120
15141: PPUSH
15142: CALL_OW 111
// if dep then
15146: LD_VAR 0 4
15150: IFFALSE 15168
// AddComEnterUnit ( Bierezov , dep ) else
15152: LD_EXP 45
15156: PPUSH
15157: LD_VAR 0 4
15161: PPUSH
15162: CALL_OW 180
15166: GO 15177
// AddComHold ( Bierezov ) ;
15168: LD_EXP 45
15172: PPUSH
15173: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
15177: LD_INT 525
15179: PPUSH
15180: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
15184: LD_ADDR_VAR 0 2
15188: PUSH
15189: LD_INT 22
15191: PUSH
15192: LD_INT 4
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: LD_INT 25
15201: PUSH
15202: LD_INT 2
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PPUSH
15213: CALL_OW 69
15217: PUSH
15218: LD_EXP 45
15222: DIFF
15223: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15224: LD_INT 35
15226: PPUSH
15227: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
15231: LD_ADDR_VAR 0 6
15235: PUSH
15236: LD_INT 10
15238: PPUSH
15239: CALL_OW 435
15243: ST_TO_ADDR
// if crates then
15244: LD_VAR 0 6
15248: IFFALSE 15277
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
15250: LD_VAR 0 2
15254: PPUSH
15255: LD_VAR 0 6
15259: PUSH
15260: LD_INT 1
15262: ARRAY
15263: PPUSH
15264: LD_VAR 0 6
15268: PUSH
15269: LD_INT 2
15271: ARRAY
15272: PPUSH
15273: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
15277: LD_VAR 0 4
15281: PPUSH
15282: CALL_OW 274
15286: PPUSH
15287: LD_INT 1
15289: PPUSH
15290: CALL_OW 275
15294: PUSH
15295: LD_INT 40
15297: GREATEREQUAL
15298: IFFALSE 15224
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
15300: LD_ADDR_VAR 0 5
15304: PUSH
15305: LD_INT 4
15307: PUSH
15308: LD_INT 256
15310: PUSH
15311: LD_INT 111
15313: PUSH
15314: LD_INT 2
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 31
15325: PUSH
15326: LD_INT 243
15328: PUSH
15329: LD_INT 112
15331: PUSH
15332: LD_INT 2
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 31
15343: PUSH
15344: LD_INT 254
15346: PUSH
15347: LD_INT 114
15349: PUSH
15350: LD_INT 2
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: LIST
15363: ST_TO_ADDR
// for i in blist do
15364: LD_ADDR_VAR 0 1
15368: PUSH
15369: LD_VAR 0 5
15373: PUSH
15374: FOR_IN
15375: IFFALSE 15424
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
15377: LD_VAR 0 2
15381: PPUSH
15382: LD_VAR 0 1
15386: PUSH
15387: LD_INT 1
15389: ARRAY
15390: PPUSH
15391: LD_VAR 0 1
15395: PUSH
15396: LD_INT 2
15398: ARRAY
15399: PPUSH
15400: LD_VAR 0 1
15404: PUSH
15405: LD_INT 3
15407: ARRAY
15408: PPUSH
15409: LD_VAR 0 1
15413: PUSH
15414: LD_INT 4
15416: ARRAY
15417: PPUSH
15418: CALL_OW 205
15422: GO 15374
15424: POP
15425: POP
// repeat wait ( 0 0$01 ) ;
15426: LD_INT 35
15428: PPUSH
15429: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
15433: LD_INT 22
15435: PUSH
15436: LD_INT 4
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 30
15445: PUSH
15446: LD_INT 4
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 3
15455: PUSH
15456: LD_INT 57
15458: PUSH
15459: EMPTY
15460: LIST
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: LIST
15470: PPUSH
15471: CALL_OW 69
15475: IFFALSE 15426
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15477: LD_VAR 0 3
15481: PPUSH
15482: LD_INT 22
15484: PUSH
15485: LD_INT 4
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: LD_INT 30
15494: PUSH
15495: LD_INT 4
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PPUSH
15506: CALL_OW 69
15510: PUSH
15511: LD_INT 1
15513: ARRAY
15514: PPUSH
15515: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
15519: LD_VAR 0 3
15523: PPUSH
15524: LD_INT 1
15526: PPUSH
15527: CALL_OW 183
// if has_eng > 1 then
15531: LD_VAR 0 2
15535: PUSH
15536: LD_INT 1
15538: GREATER
15539: IFFALSE 15681
// for i = has_eng downto 2 do
15541: LD_ADDR_VAR 0 1
15545: PUSH
15546: DOUBLE
15547: LD_VAR 0 2
15551: INC
15552: ST_TO_ADDR
15553: LD_INT 2
15555: PUSH
15556: FOR_DOWNTO
15557: IFFALSE 15679
// begin if IsInUnit ( has_eng [ i ] ) then
15559: LD_VAR 0 2
15563: PUSH
15564: LD_VAR 0 1
15568: ARRAY
15569: PPUSH
15570: CALL_OW 310
15574: IFFALSE 15591
// ComExitBuilding ( has_eng [ i ] ) ;
15576: LD_VAR 0 2
15580: PUSH
15581: LD_VAR 0 1
15585: ARRAY
15586: PPUSH
15587: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15591: LD_VAR 0 2
15595: PUSH
15596: LD_VAR 0 1
15600: ARRAY
15601: PPUSH
15602: LD_INT 22
15604: PUSH
15605: LD_INT 4
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 30
15614: PUSH
15615: LD_INT 4
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PPUSH
15626: CALL_OW 69
15630: PUSH
15631: LD_INT 1
15633: ARRAY
15634: PPUSH
15635: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15639: LD_VAR 0 2
15643: PUSH
15644: LD_VAR 0 1
15648: ARRAY
15649: PPUSH
15650: LD_INT 1
15652: PPUSH
15653: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15657: LD_ADDR_VAR 0 2
15661: PUSH
15662: LD_VAR 0 2
15666: PPUSH
15667: LD_VAR 0 1
15671: PPUSH
15672: CALL_OW 3
15676: ST_TO_ADDR
// end ;
15677: GO 15556
15679: POP
15680: POP
// repeat wait ( 0 0$01 ) ;
15681: LD_INT 35
15683: PPUSH
15684: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15688: LD_INT 22
15690: PUSH
15691: LD_INT 4
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 30
15700: PUSH
15701: LD_INT 31
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 3
15710: PUSH
15711: LD_INT 57
15713: PUSH
15714: EMPTY
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: LIST
15725: PPUSH
15726: CALL_OW 69
15730: PUSH
15731: LD_INT 1
15733: GREATER
15734: IFFALSE 15681
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15736: LD_ADDR_VAR 0 8
15740: PUSH
15741: LD_EXP 6
15745: PPUSH
15746: LD_INT 25
15748: PUSH
15749: LD_INT 1
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PPUSH
15756: CALL_OW 72
15760: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15761: LD_ADDR_VAR 0 1
15765: PUSH
15766: DOUBLE
15767: LD_INT 1
15769: DEC
15770: ST_TO_ADDR
15771: LD_INT 22
15773: PUSH
15774: LD_INT 4
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 30
15783: PUSH
15784: LD_INT 31
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 3
15793: PUSH
15794: LD_INT 57
15796: PUSH
15797: EMPTY
15798: LIST
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: LIST
15808: PPUSH
15809: CALL_OW 69
15813: PUSH
15814: FOR_TO
15815: IFFALSE 15899
// begin if not sol [ i ] then
15817: LD_VAR 0 8
15821: PUSH
15822: LD_VAR 0 1
15826: ARRAY
15827: NOT
15828: IFFALSE 15832
// break ;
15830: GO 15899
// ComExitBuilding ( sol [ i ] ) ;
15832: LD_VAR 0 8
15836: PUSH
15837: LD_VAR 0 1
15841: ARRAY
15842: PPUSH
15843: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15847: LD_VAR 0 8
15851: PUSH
15852: LD_VAR 0 1
15856: ARRAY
15857: PPUSH
15858: LD_INT 22
15860: PUSH
15861: LD_INT 4
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: LD_INT 30
15870: PUSH
15871: LD_INT 31
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PPUSH
15882: CALL_OW 69
15886: PUSH
15887: LD_VAR 0 1
15891: ARRAY
15892: PPUSH
15893: CALL_OW 180
// end ;
15897: GO 15814
15899: POP
15900: POP
// if sol > 3 then
15901: LD_VAR 0 8
15905: PUSH
15906: LD_INT 3
15908: GREATER
15909: IFFALSE 16026
// begin ComExitBuilding ( sol [ 3 ] ) ;
15911: LD_VAR 0 8
15915: PUSH
15916: LD_INT 3
15918: ARRAY
15919: PPUSH
15920: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15924: LD_VAR 0 8
15928: PUSH
15929: LD_INT 3
15931: ARRAY
15932: PPUSH
15933: LD_INT 246
15935: PPUSH
15936: LD_INT 94
15938: PPUSH
15939: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15943: LD_VAR 0 8
15947: PUSH
15948: LD_INT 3
15950: ARRAY
15951: PPUSH
15952: LD_INT 175
15954: PPUSH
15955: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15959: LD_VAR 0 8
15963: PUSH
15964: LD_INT 3
15966: ARRAY
15967: PPUSH
15968: LD_INT 224
15970: PPUSH
15971: LD_INT 90
15973: PPUSH
15974: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15978: LD_VAR 0 8
15982: PUSH
15983: LD_INT 3
15985: ARRAY
15986: PPUSH
15987: LD_INT 245
15989: PPUSH
15990: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15994: LD_VAR 0 8
15998: PUSH
15999: LD_INT 3
16001: ARRAY
16002: PPUSH
16003: LD_INT 223
16005: PPUSH
16006: LD_INT 110
16008: PPUSH
16009: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
16013: LD_VAR 0 8
16017: PUSH
16018: LD_INT 3
16020: ARRAY
16021: PPUSH
16022: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
16026: LD_VAR 0 2
16030: PPUSH
16031: LD_VAR 0 4
16035: PPUSH
16036: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
16040: LD_INT 22
16042: PUSH
16043: LD_INT 4
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: LD_INT 30
16052: PUSH
16053: LD_INT 4
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PPUSH
16064: CALL_OW 69
16068: PUSH
16069: LD_INT 1
16071: ARRAY
16072: PPUSH
16073: CALL_OW 313
16077: PUSH
16078: LD_INT 6
16080: LESS
16081: IFFALSE 16145
// begin if IsInUnit ( Cornel ) then
16083: LD_EXP 44
16087: PPUSH
16088: CALL_OW 310
16092: IFFALSE 16103
// ComExitBuilding ( Cornel ) ;
16094: LD_EXP 44
16098: PPUSH
16099: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
16103: LD_EXP 44
16107: PPUSH
16108: LD_INT 22
16110: PUSH
16111: LD_INT 4
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 30
16120: PUSH
16121: LD_INT 4
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PPUSH
16132: CALL_OW 69
16136: PUSH
16137: LD_INT 1
16139: ARRAY
16140: PPUSH
16141: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
16145: LD_INT 35
16147: PPUSH
16148: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16152: LD_ADDR_VAR 0 3
16156: PUSH
16157: LD_INT 22
16159: PUSH
16160: LD_INT 4
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 21
16169: PUSH
16170: LD_INT 3
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: LD_INT 3
16179: PUSH
16180: LD_INT 24
16182: PUSH
16183: LD_INT 1000
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: PPUSH
16199: CALL_OW 69
16203: ST_TO_ADDR
// if filter and has_eng then
16204: LD_VAR 0 3
16208: IFFALSE 16216
16210: PUSH
16211: LD_VAR 0 2
16215: AND
16216: IFFALSE 16282
// begin for i in has_eng do
16218: LD_ADDR_VAR 0 1
16222: PUSH
16223: LD_VAR 0 2
16227: PUSH
16228: FOR_IN
16229: IFFALSE 16278
// begin if IsInUnit ( i ) then
16231: LD_VAR 0 1
16235: PPUSH
16236: CALL_OW 310
16240: IFFALSE 16251
// ComExitBuilding ( i ) ;
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 122
// Wait ( 3 ) ;
16251: LD_INT 3
16253: PPUSH
16254: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
16258: LD_VAR 0 1
16262: PPUSH
16263: LD_VAR 0 3
16267: PUSH
16268: LD_INT 1
16270: ARRAY
16271: PPUSH
16272: CALL_OW 130
// end ;
16276: GO 16228
16278: POP
16279: POP
// end else
16280: GO 16338
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
16282: LD_VAR 0 2
16286: IFFALSE 16305
16288: PUSH
16289: LD_VAR 0 2
16293: PPUSH
16294: LD_INT 56
16296: PUSH
16297: EMPTY
16298: LIST
16299: PPUSH
16300: CALL_OW 72
16304: AND
16305: IFFALSE 16338
// for i in has_eng do
16307: LD_ADDR_VAR 0 1
16311: PUSH
16312: LD_VAR 0 2
16316: PUSH
16317: FOR_IN
16318: IFFALSE 16336
// ComEnterUnit ( i , dep ) ;
16320: LD_VAR 0 1
16324: PPUSH
16325: LD_VAR 0 4
16329: PPUSH
16330: CALL_OW 120
16334: GO 16317
16336: POP
16337: POP
// until cornel_prepared ;
16338: LD_EXP 11
16342: IFFALSE 16145
// end ;
16344: PPOPN 8
16346: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
16347: LD_EXP 11
16351: IFFALSE 16888
16353: GO 16355
16355: DISABLE
16356: LD_INT 0
16358: PPUSH
16359: PPUSH
16360: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
16361: LD_ADDR_VAR 0 2
16365: PUSH
16366: LD_INT 22
16368: PUSH
16369: LD_INT 4
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 30
16378: PUSH
16379: LD_INT 4
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PPUSH
16390: CALL_OW 69
16394: PUSH
16395: LD_INT 1
16397: ARRAY
16398: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
16399: LD_EXP 6
16403: PPUSH
16404: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
16408: LD_EXP 45
16412: IFFALSE 16425
16414: PUSH
16415: LD_EXP 45
16419: PPUSH
16420: CALL_OW 310
16424: AND
16425: IFFALSE 16436
// ComExitBuilding ( Bierezov ) ;
16427: LD_EXP 45
16431: PPUSH
16432: CALL_OW 122
// Wait ( 0 0$03 ) ;
16436: LD_INT 105
16438: PPUSH
16439: CALL_OW 67
// for i in cornel_units do
16443: LD_ADDR_VAR 0 1
16447: PUSH
16448: LD_EXP 6
16452: PUSH
16453: FOR_IN
16454: IFFALSE 16530
// begin if GetClass ( i ) in [ 2 , 3 ] then
16456: LD_VAR 0 1
16460: PPUSH
16461: CALL_OW 257
16465: PUSH
16466: LD_INT 2
16468: PUSH
16469: LD_INT 3
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: IN
16476: IFFALSE 16513
// begin ComEnterUnit ( i , arm ) ;
16478: LD_VAR 0 1
16482: PPUSH
16483: LD_VAR 0 2
16487: PPUSH
16488: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
16492: LD_VAR 0 1
16496: PPUSH
16497: LD_INT 1
16499: PPUSH
16500: CALL_OW 183
// AddComExitBuilding ( i ) ;
16504: LD_VAR 0 1
16508: PPUSH
16509: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
16513: LD_VAR 0 1
16517: PPUSH
16518: LD_INT 257
16520: PPUSH
16521: LD_INT 121
16523: PPUSH
16524: CALL_OW 171
// end ;
16528: GO 16453
16530: POP
16531: POP
// Wait ( 1 1$00 ) ;
16532: LD_INT 2100
16534: PPUSH
16535: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
16539: LD_ADDR_VAR 0 3
16543: PUSH
16544: LD_EXP 44
16548: PUSH
16549: LD_EXP 45
16553: ADD
16554: PUSH
16555: LD_EXP 6
16559: ADD
16560: PUSH
16561: LD_EXP 6
16565: PPUSH
16566: LD_INT 21
16568: PUSH
16569: LD_INT 2
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PPUSH
16576: CALL_OW 72
16580: DIFF
16581: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
16582: LD_VAR 0 3
16586: PPUSH
16587: LD_INT 248
16589: PPUSH
16590: LD_INT 85
16592: PPUSH
16593: CALL_OW 111
// AddComHold ( filter ) ;
16597: LD_VAR 0 3
16601: PPUSH
16602: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
16606: LD_INT 35
16608: PPUSH
16609: CALL_OW 67
// until cornel_attack ;
16613: LD_EXP 9
16617: IFFALSE 16606
// ComAgressiveMove ( filter , 209 , 63 ) ;
16619: LD_VAR 0 3
16623: PPUSH
16624: LD_INT 209
16626: PPUSH
16627: LD_INT 63
16629: PPUSH
16630: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16634: LD_EXP 44
16638: PPUSH
16639: LD_INT 208
16641: PPUSH
16642: LD_INT 62
16644: PPUSH
16645: CALL_OW 114
// AddComHold ( Cornel ) ;
16649: LD_EXP 44
16653: PPUSH
16654: CALL_OW 200
// if Bierezov then
16658: LD_EXP 45
16662: IFFALSE 16752
// begin filter := filter diff Bierezov ;
16664: LD_ADDR_VAR 0 3
16668: PUSH
16669: LD_VAR 0 3
16673: PUSH
16674: LD_EXP 45
16678: DIFF
16679: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16680: LD_EXP 45
16684: PPUSH
16685: LD_INT 6
16687: PPUSH
16688: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16692: LD_EXP 45
16696: PPUSH
16697: LD_INT 235
16699: PPUSH
16700: LD_INT 60
16702: PPUSH
16703: CALL_OW 111
// AddComHold ( Bierezov ) ;
16707: LD_EXP 45
16711: PPUSH
16712: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16716: LD_EXP 45
16720: PPUSH
16721: LD_INT 350
16723: PPUSH
16724: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16728: LD_EXP 45
16732: PPUSH
16733: LD_INT 198
16735: PPUSH
16736: LD_INT 28
16738: PPUSH
16739: CALL_OW 171
// AddComHold ( Bierezov ) ;
16743: LD_EXP 45
16747: PPUSH
16748: CALL_OW 200
// end ; filter := filter diff Cornel ;
16752: LD_ADDR_VAR 0 3
16756: PUSH
16757: LD_VAR 0 3
16761: PUSH
16762: LD_EXP 44
16766: DIFF
16767: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16768: LD_INT 70
16770: PPUSH
16771: CALL_OW 67
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16775: LD_EXP 44
16779: PPUSH
16780: LD_INT 208
16782: PPUSH
16783: LD_INT 62
16785: PPUSH
16786: CALL_OW 114
// until not IsInArea ( Cornel , cornelKappaArea ) ;
16790: LD_EXP 44
16794: PPUSH
16795: LD_INT 16
16797: PPUSH
16798: CALL_OW 308
16802: NOT
16803: IFFALSE 16768
// wait ( 0 0$2 ) ;
16805: LD_INT 70
16807: PPUSH
16808: CALL_OW 67
// ComMoveXY ( filter [ 1 ] , 195 , 57 ) ;
16812: LD_VAR 0 3
16816: PUSH
16817: LD_INT 1
16819: ARRAY
16820: PPUSH
16821: LD_INT 195
16823: PPUSH
16824: LD_INT 57
16826: PPUSH
16827: CALL_OW 111
// ComMoveXY ( filter [ 2 ] , 217 , 53 ) ;
16831: LD_VAR 0 3
16835: PUSH
16836: LD_INT 2
16838: ARRAY
16839: PPUSH
16840: LD_INT 217
16842: PPUSH
16843: LD_INT 53
16845: PPUSH
16846: CALL_OW 111
// ComMoveXY ( filter [ 3 ] , 199 , 48 ) ;
16850: LD_VAR 0 3
16854: PUSH
16855: LD_INT 3
16857: ARRAY
16858: PPUSH
16859: LD_INT 199
16861: PPUSH
16862: LD_INT 48
16864: PPUSH
16865: CALL_OW 111
// ComMoveXY ( filter [ 4 ] , 179 , 48 ) ;
16869: LD_VAR 0 3
16873: PUSH
16874: LD_INT 4
16876: ARRAY
16877: PPUSH
16878: LD_INT 179
16880: PPUSH
16881: LD_INT 48
16883: PPUSH
16884: CALL_OW 111
// end ; end_of_file
16888: PPOPN 3
16890: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16891: LD_EXP 53
16895: IFFALSE 16904
16897: PUSH
16898: LD_EXP 31
16902: NOT
16903: AND
16904: IFFALSE 16913
16906: PUSH
16907: LD_EXP 32
16911: NOT
16912: AND
16913: IFFALSE 17369
16915: GO 16917
16917: DISABLE
16918: LD_INT 0
16920: PPUSH
16921: PPUSH
16922: PPUSH
16923: PPUSH
// begin enable ;
16924: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16925: LD_ADDR_VAR 0 4
16929: PUSH
16930: LD_INT 81
16932: PUSH
16933: LD_INT 3
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PPUSH
16940: CALL_OW 69
16944: ST_TO_ADDR
// for i = 1 to ru_patrol do
16945: LD_ADDR_VAR 0 2
16949: PUSH
16950: DOUBLE
16951: LD_INT 1
16953: DEC
16954: ST_TO_ADDR
16955: LD_EXP 53
16959: PUSH
16960: FOR_TO
16961: IFFALSE 17367
// begin un := ru_patrol [ i ] ;
16963: LD_ADDR_VAR 0 1
16967: PUSH
16968: LD_EXP 53
16972: PUSH
16973: LD_VAR 0 2
16977: ARRAY
16978: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16979: LD_VAR 0 1
16983: PPUSH
16984: LD_INT 13
16986: PPUSH
16987: CALL_OW 308
16991: IFFALSE 17096
// begin if not ru_alert then
16993: LD_EXP 60
16997: NOT
16998: IFFALSE 17008
// ru_alert := true ;
17000: LD_ADDR_EXP 60
17004: PUSH
17005: LD_INT 1
17007: ST_TO_ADDR
// if not See ( 1 , un ) then
17008: LD_INT 1
17010: PPUSH
17011: LD_VAR 0 1
17015: PPUSH
17016: CALL_OW 292
17020: NOT
17021: IFFALSE 17035
// SetLives ( un , 1000 ) ;
17023: LD_VAR 0 1
17027: PPUSH
17028: LD_INT 1000
17030: PPUSH
17031: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
17035: LD_ADDR_EXP 53
17039: PUSH
17040: LD_EXP 53
17044: PUSH
17045: LD_VAR 0 1
17049: DIFF
17050: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17051: LD_VAR 0 1
17055: PPUSH
17056: LD_INT 22
17058: PUSH
17059: LD_INT 3
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 30
17068: PUSH
17069: LD_INT 4
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PPUSH
17080: CALL_OW 69
17084: PPUSH
17085: CALL 1007 0 1
17089: PPUSH
17090: CALL_OW 120
// continue ;
17094: GO 16960
// end ; if IsOk ( un ) and not HasTask ( un ) then
17096: LD_VAR 0 1
17100: PPUSH
17101: CALL_OW 302
17105: IFFALSE 17119
17107: PUSH
17108: LD_VAR 0 1
17112: PPUSH
17113: CALL_OW 314
17117: NOT
17118: AND
17119: IFFALSE 17212
// begin for j = 1 to ru_firepoints_south [ i ] do
17121: LD_ADDR_VAR 0 3
17125: PUSH
17126: DOUBLE
17127: LD_INT 1
17129: DEC
17130: ST_TO_ADDR
17131: LD_EXP 59
17135: PUSH
17136: LD_VAR 0 2
17140: ARRAY
17141: PUSH
17142: FOR_TO
17143: IFFALSE 17210
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
17145: LD_VAR 0 1
17149: PPUSH
17150: LD_EXP 59
17154: PUSH
17155: LD_VAR 0 2
17159: ARRAY
17160: PUSH
17161: LD_VAR 0 3
17165: ARRAY
17166: PUSH
17167: LD_INT 1
17169: ARRAY
17170: PPUSH
17171: LD_EXP 59
17175: PUSH
17176: LD_VAR 0 2
17180: ARRAY
17181: PUSH
17182: LD_VAR 0 3
17186: ARRAY
17187: PUSH
17188: LD_INT 2
17190: ARRAY
17191: PPUSH
17192: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
17196: LD_VAR 0 1
17200: PPUSH
17201: LD_INT 70
17203: PPUSH
17204: CALL_OW 202
// end ;
17208: GO 17142
17210: POP
17211: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17212: LD_VAR 0 1
17216: PPUSH
17217: CALL_OW 256
17221: PUSH
17222: LD_INT 700
17224: LESS
17225: IFFALSE 17242
17227: PUSH
17228: LD_VAR 0 1
17232: PPUSH
17233: LD_INT 13
17235: PPUSH
17236: CALL_OW 308
17240: NOT
17241: AND
17242: IFFALSE 17294
// begin ComMoveToArea ( un , retreatArea ) ;
17244: LD_VAR 0 1
17248: PPUSH
17249: LD_INT 13
17251: PPUSH
17252: CALL_OW 113
// if not ru_alert_xy then
17256: LD_EXP 61
17260: NOT
17261: IFFALSE 17292
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
17263: LD_ADDR_EXP 61
17267: PUSH
17268: LD_VAR 0 1
17272: PPUSH
17273: CALL_OW 250
17277: PUSH
17278: LD_VAR 0 1
17282: PPUSH
17283: CALL_OW 251
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: ST_TO_ADDR
// end else
17292: GO 17365
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17294: LD_VAR 0 1
17298: PPUSH
17299: LD_VAR 0 4
17303: PPUSH
17304: LD_VAR 0 1
17308: PPUSH
17309: CALL_OW 74
17313: PPUSH
17314: CALL_OW 296
17318: PUSH
17319: LD_INT 9
17321: LESS
17322: IFFALSE 17339
17324: PUSH
17325: LD_VAR 0 1
17329: PPUSH
17330: CALL_OW 256
17334: PUSH
17335: LD_INT 500
17337: GREATER
17338: AND
17339: IFFALSE 17365
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17341: LD_VAR 0 1
17345: PPUSH
17346: LD_VAR 0 4
17350: PPUSH
17351: LD_VAR 0 1
17355: PPUSH
17356: CALL_OW 74
17360: PPUSH
17361: CALL_OW 115
// end ;
17365: GO 16960
17367: POP
17368: POP
// end ;
17369: PPOPN 4
17371: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
17372: LD_EXP 60
17376: IFFALSE 17384
17378: PUSH
17379: LD_EXP 61
17383: AND
17384: IFFALSE 17393
17386: PUSH
17387: LD_EXP 31
17391: NOT
17392: AND
17393: IFFALSE 17402
17395: PUSH
17396: LD_EXP 32
17400: NOT
17401: AND
17402: IFFALSE 17618
17404: GO 17406
17406: DISABLE
17407: LD_INT 0
17409: PPUSH
17410: PPUSH
// begin enable ;
17411: ENABLE
// if not ru_vehicles then
17412: LD_EXP 56
17416: NOT
17417: IFFALSE 17421
// exit ;
17419: GO 17618
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17421: LD_ADDR_VAR 0 2
17425: PUSH
17426: LD_INT 81
17428: PUSH
17429: LD_INT 3
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PPUSH
17436: CALL_OW 69
17440: ST_TO_ADDR
// if ru_vehicles then
17441: LD_EXP 56
17445: IFFALSE 17618
// begin for i in ru_vehicles do
17447: LD_ADDR_VAR 0 1
17451: PUSH
17452: LD_EXP 56
17456: PUSH
17457: FOR_IN
17458: IFFALSE 17616
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
17460: LD_VAR 0 1
17464: PPUSH
17465: CALL_OW 302
17469: IFFALSE 17501
17471: PUSH
17472: LD_VAR 0 1
17476: PPUSH
17477: LD_VAR 0 2
17481: PPUSH
17482: LD_VAR 0 1
17486: PPUSH
17487: CALL_OW 74
17491: PPUSH
17492: CALL_OW 296
17496: PUSH
17497: LD_INT 9
17499: LESS
17500: AND
17501: IFFALSE 17527
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17503: LD_VAR 0 1
17507: PPUSH
17508: LD_VAR 0 2
17512: PPUSH
17513: LD_VAR 0 1
17517: PPUSH
17518: CALL_OW 74
17522: PPUSH
17523: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
17527: LD_VAR 0 1
17531: PPUSH
17532: CALL_OW 314
17536: NOT
17537: IFFALSE 17550
17539: PUSH
17540: LD_VAR 0 1
17544: PPUSH
17545: CALL_OW 302
17549: AND
17550: IFFALSE 17585
17552: PUSH
17553: LD_VAR 0 1
17557: PPUSH
17558: LD_EXP 61
17562: PUSH
17563: LD_INT 1
17565: ARRAY
17566: PPUSH
17567: LD_EXP 61
17571: PUSH
17572: LD_INT 2
17574: ARRAY
17575: PPUSH
17576: CALL_OW 297
17580: PUSH
17581: LD_INT 10
17583: GREATER
17584: AND
17585: IFFALSE 17614
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
17587: LD_VAR 0 1
17591: PPUSH
17592: LD_EXP 61
17596: PUSH
17597: LD_INT 1
17599: ARRAY
17600: PPUSH
17601: LD_EXP 61
17605: PUSH
17606: LD_INT 2
17608: ARRAY
17609: PPUSH
17610: CALL_OW 114
// end ;
17614: GO 17457
17616: POP
17617: POP
// end ; end ;
17618: PPOPN 2
17620: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
17621: LD_EXP 61
17625: IFFALSE 17633
17627: PUSH
17628: LD_EXP 60
17632: AND
17633: IFFALSE 17645
17635: PUSH
17636: LD_INT 3
17638: PPUSH
17639: CALL_OW 463
17643: NOT
17644: AND
17645: IFFALSE 17654
17647: PUSH
17648: LD_EXP 31
17652: NOT
17653: AND
17654: IFFALSE 17663
17656: PUSH
17657: LD_EXP 32
17661: NOT
17662: AND
17663: IFFALSE 17760
17665: GO 17667
17667: DISABLE
17668: LD_INT 0
17670: PPUSH
// begin enable ;
17671: ENABLE
// ru_alert_xy := false ;
17672: LD_ADDR_EXP 61
17676: PUSH
17677: LD_INT 0
17679: ST_TO_ADDR
// ru_alert := false ;
17680: LD_ADDR_EXP 60
17684: PUSH
17685: LD_INT 0
17687: ST_TO_ADDR
// if ru_vehicles then
17688: LD_EXP 56
17692: IFFALSE 17760
// for i in ru_vehicles do
17694: LD_ADDR_VAR 0 1
17698: PUSH
17699: LD_EXP 56
17703: PUSH
17704: FOR_IN
17705: IFFALSE 17758
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
17707: LD_VAR 0 1
17711: PPUSH
17712: CALL_OW 302
17716: IFFALSE 17739
17718: PUSH
17719: LD_VAR 0 1
17723: PPUSH
17724: LD_INT 89
17726: PPUSH
17727: LD_INT 36
17729: PPUSH
17730: CALL_OW 297
17734: PUSH
17735: LD_INT 10
17737: GREATER
17738: AND
17739: IFFALSE 17756
// ComMoveXY ( i , 89 , 36 ) ;
17741: LD_VAR 0 1
17745: PPUSH
17746: LD_INT 89
17748: PPUSH
17749: LD_INT 36
17751: PPUSH
17752: CALL_OW 111
17756: GO 17704
17758: POP
17759: POP
// end ;
17760: PPOPN 1
17762: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
17763: LD_EXP 55
17767: IFFALSE 17776
17769: PUSH
17770: LD_EXP 31
17774: NOT
17775: AND
17776: IFFALSE 17785
17778: PUSH
17779: LD_EXP 32
17783: NOT
17784: AND
17785: IFFALSE 18073
17787: GO 17789
17789: DISABLE
17790: LD_INT 0
17792: PPUSH
17793: PPUSH
17794: PPUSH
// begin enable ;
17795: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17796: LD_ADDR_VAR 0 3
17800: PUSH
17801: LD_INT 81
17803: PUSH
17804: LD_INT 3
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PPUSH
17811: CALL_OW 69
17815: ST_TO_ADDR
// for i = 1 to ru_forest do
17816: LD_ADDR_VAR 0 1
17820: PUSH
17821: DOUBLE
17822: LD_INT 1
17824: DEC
17825: ST_TO_ADDR
17826: LD_EXP 55
17830: PUSH
17831: FOR_TO
17832: IFFALSE 18071
// begin un := ru_forest [ i ] ;
17834: LD_ADDR_VAR 0 2
17838: PUSH
17839: LD_EXP 55
17843: PUSH
17844: LD_VAR 0 1
17848: ARRAY
17849: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17850: LD_VAR 0 2
17854: PPUSH
17855: LD_INT 13
17857: PPUSH
17858: CALL_OW 308
17862: IFFALSE 17952
// begin if not See ( 1 , un ) then
17864: LD_INT 1
17866: PPUSH
17867: LD_VAR 0 2
17871: PPUSH
17872: CALL_OW 292
17876: NOT
17877: IFFALSE 17891
// SetLives ( un , 1000 ) ;
17879: LD_VAR 0 2
17883: PPUSH
17884: LD_INT 1000
17886: PPUSH
17887: CALL_OW 234
// ru_forest := ru_forest diff un ;
17891: LD_ADDR_EXP 55
17895: PUSH
17896: LD_EXP 55
17900: PUSH
17901: LD_VAR 0 2
17905: DIFF
17906: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17907: LD_VAR 0 2
17911: PPUSH
17912: LD_INT 22
17914: PUSH
17915: LD_INT 3
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 30
17924: PUSH
17925: LD_INT 4
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PPUSH
17936: CALL_OW 69
17940: PPUSH
17941: CALL 1007 0 1
17945: PPUSH
17946: CALL_OW 120
// continue ;
17950: GO 17831
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17952: LD_VAR 0 2
17956: PPUSH
17957: CALL_OW 256
17961: PUSH
17962: LD_INT 700
17964: LESS
17965: IFFALSE 17982
17967: PUSH
17968: LD_VAR 0 2
17972: PPUSH
17973: LD_INT 13
17975: PPUSH
17976: CALL_OW 308
17980: NOT
17981: AND
17982: IFFALSE 17998
// ComMoveToArea ( un , retreatArea ) else
17984: LD_VAR 0 2
17988: PPUSH
17989: LD_INT 13
17991: PPUSH
17992: CALL_OW 113
17996: GO 18069
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17998: LD_VAR 0 2
18002: PPUSH
18003: LD_VAR 0 3
18007: PPUSH
18008: LD_VAR 0 2
18012: PPUSH
18013: CALL_OW 74
18017: PPUSH
18018: CALL_OW 296
18022: PUSH
18023: LD_INT 9
18025: LESS
18026: IFFALSE 18043
18028: PUSH
18029: LD_VAR 0 2
18033: PPUSH
18034: CALL_OW 256
18038: PUSH
18039: LD_INT 500
18041: GREATER
18042: AND
18043: IFFALSE 18069
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
18045: LD_VAR 0 2
18049: PPUSH
18050: LD_VAR 0 3
18054: PPUSH
18055: LD_VAR 0 2
18059: PPUSH
18060: CALL_OW 74
18064: PPUSH
18065: CALL_OW 115
// end ;
18069: GO 17831
18071: POP
18072: POP
// end ;
18073: PPOPN 3
18075: END
// every 0 0$10 trigger not send_attack_on_cornel or IsDead ( Cornel ) do var i , filter ;
18076: LD_EXP 32
18080: NOT
18081: IFTRUE 18094
18083: PUSH
18084: LD_EXP 44
18088: PPUSH
18089: CALL_OW 301
18093: OR
18094: IFFALSE 18255
18096: GO 18098
18098: DISABLE
18099: LD_INT 0
18101: PPUSH
18102: PPUSH
// begin enable ;
18103: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_inarea , ignoreBuildingsArea ] ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 990 ] ] ] ) ;
18104: LD_ADDR_VAR 0 2
18108: PUSH
18109: LD_INT 22
18111: PUSH
18112: LD_INT 3
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 3
18121: PUSH
18122: LD_INT 95
18124: PUSH
18125: LD_INT 18
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 21
18138: PUSH
18139: LD_INT 3
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 3
18148: PUSH
18149: LD_INT 24
18151: PUSH
18152: LD_INT 990
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: PPUSH
18169: CALL_OW 69
18173: ST_TO_ADDR
// if filter then
18174: LD_VAR 0 2
18178: IFFALSE 18255
// for i in filter do
18180: LD_ADDR_VAR 0 1
18184: PUSH
18185: LD_VAR 0 2
18189: PUSH
18190: FOR_IN
18191: IFFALSE 18253
// if GetY ( i ) > 70 then
18193: LD_VAR 0 1
18197: PPUSH
18198: CALL_OW 251
18202: PUSH
18203: LD_INT 70
18205: GREATER
18206: IFFALSE 18212
// continue else
18208: GO 18190
18210: GO 18251
// begin ru_alert := true ;
18212: LD_ADDR_EXP 60
18216: PUSH
18217: LD_INT 1
18219: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
18220: LD_ADDR_EXP 61
18224: PUSH
18225: LD_VAR 0 1
18229: PPUSH
18230: CALL_OW 250
18234: PUSH
18235: LD_VAR 0 1
18239: PPUSH
18240: CALL_OW 251
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: ST_TO_ADDR
// break ;
18249: GO 18253
// end ;
18251: GO 18190
18253: POP
18254: POP
// end ;
18255: PPOPN 2
18257: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
18258: LD_EXP 31
18262: IFFALSE 18415
18264: GO 18266
18266: DISABLE
18267: LD_INT 0
18269: PPUSH
18270: PPUSH
18271: PPUSH
18272: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
18273: LD_ADDR_VAR 0 4
18277: PUSH
18278: LD_EXP 56
18282: PUSH
18283: LD_EXP 55
18287: ADD
18288: PUSH
18289: LD_EXP 53
18293: ADD
18294: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
18295: LD_ADDR_VAR 0 3
18299: PUSH
18300: LD_INT 3
18302: PPUSH
18303: LD_INT 81
18305: PUSH
18306: LD_INT 3
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PPUSH
18313: CALL_OW 70
18317: ST_TO_ADDR
// if filter and enemy then
18318: LD_VAR 0 4
18322: IFFALSE 18330
18324: PUSH
18325: LD_VAR 0 3
18329: AND
18330: IFFALSE 18415
// repeat wait ( 0 0$01 ) ;
18332: LD_INT 35
18334: PPUSH
18335: CALL_OW 67
// for i in filter do
18339: LD_ADDR_VAR 0 1
18343: PUSH
18344: LD_VAR 0 4
18348: PUSH
18349: FOR_IN
18350: IFFALSE 18378
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
18352: LD_VAR 0 1
18356: PPUSH
18357: LD_VAR 0 3
18361: PPUSH
18362: LD_VAR 0 1
18366: PPUSH
18367: CALL_OW 74
18371: PPUSH
18372: CALL_OW 115
// end ;
18376: GO 18349
18378: POP
18379: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
18380: LD_INT 3
18382: PPUSH
18383: LD_INT 81
18385: PUSH
18386: LD_INT 3
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PPUSH
18393: CALL_OW 70
18397: PUSH
18398: LD_INT 0
18400: EQUAL
18401: IFTRUE 18413
18403: PUSH
18404: LD_VAR 0 4
18408: PUSH
18409: LD_INT 0
18411: EQUAL
18412: OR
18413: IFFALSE 18332
// end ;
18415: PPOPN 4
18417: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
18418: LD_EXP 26
18422: IFFALSE 18468
18424: PUSH
18425: LD_INT 22
18427: PUSH
18428: LD_INT 4
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 30
18437: PUSH
18438: LD_INT 4
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 3
18447: PUSH
18448: LD_INT 57
18450: PUSH
18451: EMPTY
18452: LIST
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: LIST
18462: PPUSH
18463: CALL_OW 69
18467: AND
18468: IFFALSE 18517
18470: GO 18472
18472: DISABLE
18473: LD_INT 0
18475: PPUSH
// begin if not ru_cornel_attack then
18476: LD_EXP 58
18480: NOT
18481: IFFALSE 18485
// exit ;
18483: GO 18517
// for i in ru_cornel_attack do
18485: LD_ADDR_VAR 0 1
18489: PUSH
18490: LD_EXP 58
18494: PUSH
18495: FOR_IN
18496: IFFALSE 18515
// ComAgressiveMove ( i , 258 , 119 ) ;
18498: LD_VAR 0 1
18502: PPUSH
18503: LD_INT 258
18505: PPUSH
18506: LD_INT 119
18508: PPUSH
18509: CALL_OW 114
18513: GO 18495
18515: POP
18516: POP
// end ; end_of_file
18517: PPOPN 1
18519: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
18520: LD_EXP 5
18524: IFFALSE 18533
18526: PUSH
18527: LD_EXP 9
18531: NOT
18532: AND
18533: IFFALSE 18541
18535: PUSH
18536: LD_EXP 20
18540: AND
18541: IFFALSE 18653
18543: GO 18545
18545: DISABLE
18546: LD_INT 0
18548: PPUSH
// begin enable ;
18549: ENABLE
// crates_counter := crates_counter - 50 ;
18550: LD_ADDR_EXP 20
18554: PUSH
18555: LD_EXP 20
18559: PUSH
18560: LD_INT 50
18562: MINUS
18563: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
18564: LD_INT 8
18566: PPUSH
18567: LD_INT 2
18569: PPUSH
18570: LD_INT 5
18572: PPUSH
18573: CALL_OW 12
18577: PPUSH
18578: LD_INT 1
18580: PPUSH
18581: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
18585: LD_INT 1785
18587: PPUSH
18588: LD_INT 2345
18590: PPUSH
18591: CALL_OW 12
18595: PPUSH
18596: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
18600: LD_ADDR_VAR 0 1
18604: PUSH
18605: LD_INT 1
18607: PPUSH
18608: LD_OWVAR 67
18612: PUSH
18613: LD_INT 2
18615: PLUS
18616: PPUSH
18617: CALL_OW 12
18621: ST_TO_ADDR
// if r < 3 then
18622: LD_VAR 0 1
18626: PUSH
18627: LD_INT 3
18629: LESS
18630: IFFALSE 18653
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
18632: LD_INT 4
18634: PPUSH
18635: LD_INT 1
18637: PPUSH
18638: LD_INT 5
18640: PPUSH
18641: CALL_OW 12
18645: PPUSH
18646: LD_INT 1
18648: PPUSH
18649: CALL_OW 55
// end ;
18653: PPOPN 1
18655: END
// every 0 0$01 trigger cornel_active do
18656: LD_EXP 8
18660: IFFALSE 18749
18662: GO 18664
18664: DISABLE
// begin Wait ( 0 0$03 ) ;
18665: LD_INT 105
18667: PPUSH
18668: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18672: LD_INT 2
18674: PPUSH
18675: LD_INT 5
18677: PPUSH
18678: CALL_OW 12
18682: PPUSH
18683: LD_INT 10
18685: PPUSH
18686: LD_INT 1
18688: PPUSH
18689: CALL_OW 55
// Wait ( 0 0$13 ) ;
18693: LD_INT 455
18695: PPUSH
18696: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18700: LD_INT 2
18702: PPUSH
18703: LD_INT 5
18705: PPUSH
18706: CALL_OW 12
18710: PPUSH
18711: LD_INT 10
18713: PPUSH
18714: LD_INT 1
18716: PPUSH
18717: CALL_OW 55
// Wait ( 0 0$16 ) ;
18721: LD_INT 560
18723: PPUSH
18724: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18728: LD_INT 2
18730: PPUSH
18731: LD_INT 5
18733: PPUSH
18734: CALL_OW 12
18738: PPUSH
18739: LD_INT 10
18741: PPUSH
18742: LD_INT 1
18744: PPUSH
18745: CALL_OW 55
// end ; end_of_file
18749: END
// every 0 0$01 trigger cornel_prepared do
18750: LD_EXP 11
18754: IFFALSE 18813
18756: GO 18758
18758: DISABLE
// begin enable ;
18759: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
18760: LD_ADDR_OWVAR 47
18764: PUSH
18765: LD_STRING #Am03-1
18767: PUSH
18768: LD_EXP 10
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
18777: LD_ADDR_EXP 10
18781: PUSH
18782: LD_EXP 10
18786: PPUSH
18787: LD_STRING -
18789: PPUSH
18790: CALL 1077 0 2
18794: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
18795: LD_EXP 10
18799: PUSH
18800: LD_INT 0
18802: EQUAL
18803: IFFALSE 18813
// begin Display_Strings := [ ] ;
18805: LD_ADDR_OWVAR 47
18809: PUSH
18810: EMPTY
18811: ST_TO_ADDR
// disable ;
18812: DISABLE
// end ; end ;
18813: END
// every 0 0$01 trigger debug and debug_strings do
18814: LD_EXP 1
18818: IFFALSE 18826
18820: PUSH
18821: LD_OWVAR 48
18825: AND
18826: IFFALSE 18842
18828: GO 18830
18830: DISABLE
// begin enable ;
18831: ENABLE
// Display_Strings := debug_strings ;
18832: LD_ADDR_OWVAR 47
18836: PUSH
18837: LD_OWVAR 48
18841: ST_TO_ADDR
// end ; end_of_file
18842: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
18843: LD_VAR 0 1
18847: PPUSH
18848: LD_VAR 0 2
18852: PPUSH
18853: CALL 35670 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
18857: LD_VAR 0 1
18861: PPUSH
18862: CALL_OW 255
18866: PUSH
18867: LD_INT 1
18869: EQUAL
18870: IFFALSE 18879
18872: PUSH
18873: LD_EXP 14
18877: NOT
18878: AND
18879: IFFALSE 18889
// solar_builded := true ;
18881: LD_ADDR_EXP 14
18885: PUSH
18886: LD_INT 1
18888: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18889: LD_VAR 0 1
18893: PPUSH
18894: CALL_OW 255
18898: PUSH
18899: LD_INT 1
18901: EQUAL
18902: IFFALSE 18910
18904: PUSH
18905: LD_EXP 29
18909: AND
18910: IFFALSE 18947
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18912: LD_ADDR_EXP 29
18916: PUSH
18917: LD_EXP 29
18921: PUSH
18922: LD_INT 1750
18924: PUSH
18925: LD_INT 1400
18927: PUSH
18928: LD_INT 1225
18930: PUSH
18931: LD_INT 1050
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: PUSH
18940: LD_OWVAR 67
18944: ARRAY
18945: PLUS
18946: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18947: LD_VAR 0 1
18951: PPUSH
18952: CALL_OW 255
18956: PUSH
18957: LD_INT 3
18959: EQUAL
18960: IFFALSE 18978
// ru_vehicles := ru_vehicles ^ veh ;
18962: LD_ADDR_EXP 56
18966: PUSH
18967: LD_EXP 56
18971: PUSH
18972: LD_VAR 0 1
18976: ADD
18977: ST_TO_ADDR
// end ;
18978: PPOPN 2
18980: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18981: LD_VAR 0 1
18985: PPUSH
18986: CALL 35612 0 1
// if un in ru_patrol then
18990: LD_VAR 0 1
18994: PUSH
18995: LD_EXP 53
18999: IN
19000: IFFALSE 19018
// ru_patrol := ru_patrol diff un ;
19002: LD_ADDR_EXP 53
19006: PUSH
19007: LD_EXP 53
19011: PUSH
19012: LD_VAR 0 1
19016: DIFF
19017: ST_TO_ADDR
// if un in ru_forest then
19018: LD_VAR 0 1
19022: PUSH
19023: LD_EXP 55
19027: IN
19028: IFFALSE 19046
// ru_forest := ru_forest diff un ;
19030: LD_ADDR_EXP 55
19034: PUSH
19035: LD_EXP 55
19039: PUSH
19040: LD_VAR 0 1
19044: DIFF
19045: ST_TO_ADDR
// if un in ru_vehicles then
19046: LD_VAR 0 1
19050: PUSH
19051: LD_EXP 56
19055: IN
19056: IFFALSE 19162
// begin ru_vehicles := ru_vehicles diff un ;
19058: LD_ADDR_EXP 56
19062: PUSH
19063: LD_EXP 56
19067: PUSH
19068: LD_VAR 0 1
19072: DIFF
19073: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
19074: LD_ADDR_EXP 57
19078: PUSH
19079: LD_EXP 57
19083: PUSH
19084: LD_VAR 0 1
19088: PPUSH
19089: CALL_OW 265
19093: PUSH
19094: LD_VAR 0 1
19098: PPUSH
19099: CALL_OW 262
19103: PUSH
19104: LD_VAR 0 1
19108: PPUSH
19109: CALL_OW 263
19113: PUSH
19114: LD_VAR 0 1
19118: PPUSH
19119: CALL_OW 264
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: ADD
19130: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
19131: LD_ADDR_EXP 13
19135: PUSH
19136: LD_EXP 13
19140: PUSH
19141: LD_INT 1
19143: PLUS
19144: ST_TO_ADDR
// if ach_counter = 10 then
19145: LD_EXP 13
19149: PUSH
19150: LD_INT 10
19152: EQUAL
19153: IFFALSE 19162
// SetAchievement ( ACH_FAUST ) ;
19155: LD_STRING ACH_FAUST
19157: PPUSH
19158: CALL_OW 543
// end ; if un = Pokryshkin then
19162: LD_VAR 0 1
19166: PUSH
19167: LD_EXP 52
19171: EQUAL
19172: IFFALSE 19181
// SetAchievement ( ACH_POKR ) ;
19174: LD_STRING ACH_POKR
19176: PPUSH
19177: CALL_OW 543
// if un = JMM then
19181: LD_VAR 0 1
19185: PUSH
19186: LD_EXP 37
19190: EQUAL
19191: IFFALSE 19200
// YouLost ( 0 ) ;
19193: LD_STRING 0
19195: PPUSH
19196: CALL_OW 104
// if un = us_dep_west then
19200: LD_VAR 0 1
19204: PUSH
19205: LD_INT 1
19207: EQUAL
19208: IFFALSE 19217
// YouLost ( 2 ) ;
19210: LD_STRING 2
19212: PPUSH
19213: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
19217: LD_VAR 0 1
19221: PPUSH
19222: CALL_OW 255
19226: PUSH
19227: LD_INT 8
19229: EQUAL
19230: IFFALSE 19239
19232: PUSH
19233: LD_EXP 5
19237: NOT
19238: AND
19239: IFFALSE 19248
// YouLost ( 4 ) ;
19241: LD_STRING 4
19243: PPUSH
19244: CALL_OW 104
// if un in jmm_units then
19248: LD_VAR 0 1
19252: PUSH
19253: LD_EXP 4
19257: IN
19258: IFFALSE 19274
// lose_counter := lose_counter + 1 ;
19260: LD_ADDR_EXP 34
19264: PUSH
19265: LD_EXP 34
19269: PUSH
19270: LD_INT 1
19272: PLUS
19273: ST_TO_ADDR
// end ;
19274: PPOPN 1
19276: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
19277: LD_INT 0
19279: PPUSH
19280: PPUSH
// begin if GetSide ( driver ) = 3 then
19281: LD_VAR 0 1
19285: PPUSH
19286: CALL_OW 255
19290: PUSH
19291: LD_INT 3
19293: EQUAL
19294: IFFALSE 19372
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
19296: LD_ADDR_VAR 0 6
19300: PUSH
19301: LD_INT 22
19303: PUSH
19304: LD_INT 3
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 30
19313: PUSH
19314: LD_INT 3
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PPUSH
19325: CALL_OW 69
19329: PPUSH
19330: CALL 1007 0 1
19334: ST_TO_ADDR
// if place then
19335: LD_VAR 0 6
19339: IFFALSE 19357
// ComEnterUnit ( driver , place ) else
19341: LD_VAR 0 1
19345: PPUSH
19346: LD_VAR 0 6
19350: PPUSH
19351: CALL_OW 120
19355: GO 19372
// ComMoveXY ( driver , 70 , 22 ) ;
19357: LD_VAR 0 1
19361: PPUSH
19362: LD_INT 70
19364: PPUSH
19365: LD_INT 22
19367: PPUSH
19368: CALL_OW 111
// end ; end ;
19372: PPOPN 6
19374: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
19375: LD_VAR 0 1
19379: PUSH
19380: LD_INT 1
19382: EQUAL
19383: IFFALSE 19416
19385: PUSH
19386: LD_VAR 0 2
19390: PUSH
19391: LD_INT 4
19393: EQUAL
19394: IFTRUE 19415
19396: PUSH
19397: LD_VAR 0 2
19401: PUSH
19402: LD_INT 8
19404: EQUAL
19405: IFFALSE 19414
19407: PUSH
19408: LD_EXP 5
19412: NOT
19413: AND
19414: OR
19415: AND
19416: IFFALSE 19425
// YouLost ( 5 ) ;
19418: LD_STRING 5
19420: PPUSH
19421: CALL_OW 104
// end ;
19425: PPOPN 2
19427: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
19428: LD_EXP 36
19432: PUSH
19433: LD_INT 22
19435: PUSH
19436: LD_INT 1
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 21
19445: PUSH
19446: LD_INT 1
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PPUSH
19457: CALL_OW 69
19461: PUSH
19462: LD_INT 22
19464: PUSH
19465: LD_INT 8
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 21
19474: PUSH
19475: LD_INT 1
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PPUSH
19486: CALL_OW 69
19490: ADD
19491: PLUS
19492: PUSH
19493: LD_INT 5
19495: LESS
19496: IFFALSE 19508
19498: GO 19500
19500: DISABLE
// YouLost ( 1 ) ;
19501: LD_STRING 1
19503: PPUSH
19504: CALL_OW 104
19508: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
19509: LD_INT 1
19511: PPUSH
19512: CALL_OW 255
19516: PUSH
19517: LD_INT 3
19519: EQUAL
19520: IFFALSE 19532
19522: GO 19524
19524: DISABLE
// YouLost ( 3 ) ; end_of_file end_of_file
19525: LD_STRING 3
19527: PPUSH
19528: CALL_OW 104
19532: END
// export globalGameSaveCounter ; every 0 0$1 do
19533: GO 19535
19535: DISABLE
// begin enable ;
19536: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19537: LD_STRING updateTimer(
19539: PUSH
19540: LD_OWVAR 1
19544: STR
19545: PUSH
19546: LD_STRING );
19548: STR
19549: PPUSH
19550: CALL_OW 559
// end ;
19554: END
// every 0 0$1 do
19555: GO 19557
19557: DISABLE
// begin globalGameSaveCounter := 0 ;
19558: LD_ADDR_EXP 62
19562: PUSH
19563: LD_INT 0
19565: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19566: LD_STRING setGameSaveCounter(0)
19568: PPUSH
19569: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19573: LD_STRING initStreamRollete();
19575: PPUSH
19576: CALL_OW 559
// InitStreamMode ;
19580: CALL 20925 0 0
// DefineStreamItems ( false ) ;
19584: LD_INT 0
19586: PPUSH
19587: CALL 21389 0 1
// end ;
19591: END
// export function SOS_MapStart ( ) ; begin
19592: LD_INT 0
19594: PPUSH
// if streamModeActive then
19595: LD_EXP 63
19599: IFFALSE 19608
// DefineStreamItems ( true ) ;
19601: LD_INT 1
19603: PPUSH
19604: CALL 21389 0 1
// UpdateLuaVariables ( ) ;
19608: CALL 19625 0 0
// UpdateFactoryWaypoints ( ) ;
19612: CALL 34511 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19616: CALL 34763 0 0
// end ;
19620: LD_VAR 0 1
19624: RET
// function UpdateLuaVariables ( ) ; begin
19625: LD_INT 0
19627: PPUSH
// if globalGameSaveCounter then
19628: LD_EXP 62
19632: IFFALSE 19666
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19634: LD_ADDR_EXP 62
19638: PUSH
19639: LD_EXP 62
19643: PPUSH
19644: CALL 80543 0 1
19648: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19649: LD_STRING setGameSaveCounter(
19651: PUSH
19652: LD_EXP 62
19656: STR
19657: PUSH
19658: LD_STRING )
19660: STR
19661: PPUSH
19662: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19666: LD_STRING setGameDifficulty(
19668: PUSH
19669: LD_OWVAR 67
19673: STR
19674: PUSH
19675: LD_STRING )
19677: STR
19678: PPUSH
19679: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19683: LD_STRING displayDifficulty(
19685: PUSH
19686: LD_OWVAR 67
19690: STR
19691: PUSH
19692: LD_STRING )
19694: STR
19695: PPUSH
19696: CALL_OW 559
// end ;
19700: LD_VAR 0 1
19704: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19705: LD_INT 0
19707: PPUSH
// if p2 = stream_mode then
19708: LD_VAR 0 2
19712: PUSH
19713: LD_INT 100
19715: EQUAL
19716: IFFALSE 20719
// begin if not StreamModeActive then
19718: LD_EXP 63
19722: NOT
19723: IFFALSE 19733
// StreamModeActive := true ;
19725: LD_ADDR_EXP 63
19729: PUSH
19730: LD_INT 1
19732: ST_TO_ADDR
// if p3 = 0 then
19733: LD_VAR 0 3
19737: PUSH
19738: LD_INT 0
19740: EQUAL
19741: IFFALSE 19747
// InitStreamMode ;
19743: CALL 20925 0 0
// if p3 = 1 then
19747: LD_VAR 0 3
19751: PUSH
19752: LD_INT 1
19754: EQUAL
19755: IFFALSE 19765
// sRocket := true ;
19757: LD_ADDR_EXP 68
19761: PUSH
19762: LD_INT 1
19764: ST_TO_ADDR
// if p3 = 2 then
19765: LD_VAR 0 3
19769: PUSH
19770: LD_INT 2
19772: EQUAL
19773: IFFALSE 19783
// sSpeed := true ;
19775: LD_ADDR_EXP 67
19779: PUSH
19780: LD_INT 1
19782: ST_TO_ADDR
// if p3 = 3 then
19783: LD_VAR 0 3
19787: PUSH
19788: LD_INT 3
19790: EQUAL
19791: IFFALSE 19801
// sEngine := true ;
19793: LD_ADDR_EXP 69
19797: PUSH
19798: LD_INT 1
19800: ST_TO_ADDR
// if p3 = 4 then
19801: LD_VAR 0 3
19805: PUSH
19806: LD_INT 4
19808: EQUAL
19809: IFFALSE 19819
// sSpec := true ;
19811: LD_ADDR_EXP 66
19815: PUSH
19816: LD_INT 1
19818: ST_TO_ADDR
// if p3 = 5 then
19819: LD_VAR 0 3
19823: PUSH
19824: LD_INT 5
19826: EQUAL
19827: IFFALSE 19837
// sLevel := true ;
19829: LD_ADDR_EXP 70
19833: PUSH
19834: LD_INT 1
19836: ST_TO_ADDR
// if p3 = 6 then
19837: LD_VAR 0 3
19841: PUSH
19842: LD_INT 6
19844: EQUAL
19845: IFFALSE 19855
// sArmoury := true ;
19847: LD_ADDR_EXP 71
19851: PUSH
19852: LD_INT 1
19854: ST_TO_ADDR
// if p3 = 7 then
19855: LD_VAR 0 3
19859: PUSH
19860: LD_INT 7
19862: EQUAL
19863: IFFALSE 19873
// sRadar := true ;
19865: LD_ADDR_EXP 72
19869: PUSH
19870: LD_INT 1
19872: ST_TO_ADDR
// if p3 = 8 then
19873: LD_VAR 0 3
19877: PUSH
19878: LD_INT 8
19880: EQUAL
19881: IFFALSE 19891
// sBunker := true ;
19883: LD_ADDR_EXP 73
19887: PUSH
19888: LD_INT 1
19890: ST_TO_ADDR
// if p3 = 9 then
19891: LD_VAR 0 3
19895: PUSH
19896: LD_INT 9
19898: EQUAL
19899: IFFALSE 19909
// sHack := true ;
19901: LD_ADDR_EXP 74
19905: PUSH
19906: LD_INT 1
19908: ST_TO_ADDR
// if p3 = 10 then
19909: LD_VAR 0 3
19913: PUSH
19914: LD_INT 10
19916: EQUAL
19917: IFFALSE 19927
// sFire := true ;
19919: LD_ADDR_EXP 75
19923: PUSH
19924: LD_INT 1
19926: ST_TO_ADDR
// if p3 = 11 then
19927: LD_VAR 0 3
19931: PUSH
19932: LD_INT 11
19934: EQUAL
19935: IFFALSE 19945
// sRefresh := true ;
19937: LD_ADDR_EXP 76
19941: PUSH
19942: LD_INT 1
19944: ST_TO_ADDR
// if p3 = 12 then
19945: LD_VAR 0 3
19949: PUSH
19950: LD_INT 12
19952: EQUAL
19953: IFFALSE 19963
// sExp := true ;
19955: LD_ADDR_EXP 77
19959: PUSH
19960: LD_INT 1
19962: ST_TO_ADDR
// if p3 = 13 then
19963: LD_VAR 0 3
19967: PUSH
19968: LD_INT 13
19970: EQUAL
19971: IFFALSE 19981
// sDepot := true ;
19973: LD_ADDR_EXP 78
19977: PUSH
19978: LD_INT 1
19980: ST_TO_ADDR
// if p3 = 14 then
19981: LD_VAR 0 3
19985: PUSH
19986: LD_INT 14
19988: EQUAL
19989: IFFALSE 19999
// sFlag := true ;
19991: LD_ADDR_EXP 79
19995: PUSH
19996: LD_INT 1
19998: ST_TO_ADDR
// if p3 = 15 then
19999: LD_VAR 0 3
20003: PUSH
20004: LD_INT 15
20006: EQUAL
20007: IFFALSE 20017
// sKamikadze := true ;
20009: LD_ADDR_EXP 87
20013: PUSH
20014: LD_INT 1
20016: ST_TO_ADDR
// if p3 = 16 then
20017: LD_VAR 0 3
20021: PUSH
20022: LD_INT 16
20024: EQUAL
20025: IFFALSE 20035
// sTroll := true ;
20027: LD_ADDR_EXP 88
20031: PUSH
20032: LD_INT 1
20034: ST_TO_ADDR
// if p3 = 17 then
20035: LD_VAR 0 3
20039: PUSH
20040: LD_INT 17
20042: EQUAL
20043: IFFALSE 20053
// sSlow := true ;
20045: LD_ADDR_EXP 89
20049: PUSH
20050: LD_INT 1
20052: ST_TO_ADDR
// if p3 = 18 then
20053: LD_VAR 0 3
20057: PUSH
20058: LD_INT 18
20060: EQUAL
20061: IFFALSE 20071
// sLack := true ;
20063: LD_ADDR_EXP 90
20067: PUSH
20068: LD_INT 1
20070: ST_TO_ADDR
// if p3 = 19 then
20071: LD_VAR 0 3
20075: PUSH
20076: LD_INT 19
20078: EQUAL
20079: IFFALSE 20089
// sTank := true ;
20081: LD_ADDR_EXP 92
20085: PUSH
20086: LD_INT 1
20088: ST_TO_ADDR
// if p3 = 20 then
20089: LD_VAR 0 3
20093: PUSH
20094: LD_INT 20
20096: EQUAL
20097: IFFALSE 20107
// sRemote := true ;
20099: LD_ADDR_EXP 93
20103: PUSH
20104: LD_INT 1
20106: ST_TO_ADDR
// if p3 = 21 then
20107: LD_VAR 0 3
20111: PUSH
20112: LD_INT 21
20114: EQUAL
20115: IFFALSE 20125
// sPowell := true ;
20117: LD_ADDR_EXP 94
20121: PUSH
20122: LD_INT 1
20124: ST_TO_ADDR
// if p3 = 22 then
20125: LD_VAR 0 3
20129: PUSH
20130: LD_INT 22
20132: EQUAL
20133: IFFALSE 20143
// sTeleport := true ;
20135: LD_ADDR_EXP 97
20139: PUSH
20140: LD_INT 1
20142: ST_TO_ADDR
// if p3 = 23 then
20143: LD_VAR 0 3
20147: PUSH
20148: LD_INT 23
20150: EQUAL
20151: IFFALSE 20161
// sOilTower := true ;
20153: LD_ADDR_EXP 99
20157: PUSH
20158: LD_INT 1
20160: ST_TO_ADDR
// if p3 = 24 then
20161: LD_VAR 0 3
20165: PUSH
20166: LD_INT 24
20168: EQUAL
20169: IFFALSE 20179
// sShovel := true ;
20171: LD_ADDR_EXP 100
20175: PUSH
20176: LD_INT 1
20178: ST_TO_ADDR
// if p3 = 25 then
20179: LD_VAR 0 3
20183: PUSH
20184: LD_INT 25
20186: EQUAL
20187: IFFALSE 20197
// sSheik := true ;
20189: LD_ADDR_EXP 101
20193: PUSH
20194: LD_INT 1
20196: ST_TO_ADDR
// if p3 = 26 then
20197: LD_VAR 0 3
20201: PUSH
20202: LD_INT 26
20204: EQUAL
20205: IFFALSE 20215
// sEarthquake := true ;
20207: LD_ADDR_EXP 103
20211: PUSH
20212: LD_INT 1
20214: ST_TO_ADDR
// if p3 = 27 then
20215: LD_VAR 0 3
20219: PUSH
20220: LD_INT 27
20222: EQUAL
20223: IFFALSE 20233
// sAI := true ;
20225: LD_ADDR_EXP 104
20229: PUSH
20230: LD_INT 1
20232: ST_TO_ADDR
// if p3 = 28 then
20233: LD_VAR 0 3
20237: PUSH
20238: LD_INT 28
20240: EQUAL
20241: IFFALSE 20251
// sCargo := true ;
20243: LD_ADDR_EXP 107
20247: PUSH
20248: LD_INT 1
20250: ST_TO_ADDR
// if p3 = 29 then
20251: LD_VAR 0 3
20255: PUSH
20256: LD_INT 29
20258: EQUAL
20259: IFFALSE 20269
// sDLaser := true ;
20261: LD_ADDR_EXP 108
20265: PUSH
20266: LD_INT 1
20268: ST_TO_ADDR
// if p3 = 30 then
20269: LD_VAR 0 3
20273: PUSH
20274: LD_INT 30
20276: EQUAL
20277: IFFALSE 20287
// sExchange := true ;
20279: LD_ADDR_EXP 109
20283: PUSH
20284: LD_INT 1
20286: ST_TO_ADDR
// if p3 = 31 then
20287: LD_VAR 0 3
20291: PUSH
20292: LD_INT 31
20294: EQUAL
20295: IFFALSE 20305
// sFac := true ;
20297: LD_ADDR_EXP 110
20301: PUSH
20302: LD_INT 1
20304: ST_TO_ADDR
// if p3 = 32 then
20305: LD_VAR 0 3
20309: PUSH
20310: LD_INT 32
20312: EQUAL
20313: IFFALSE 20323
// sPower := true ;
20315: LD_ADDR_EXP 111
20319: PUSH
20320: LD_INT 1
20322: ST_TO_ADDR
// if p3 = 33 then
20323: LD_VAR 0 3
20327: PUSH
20328: LD_INT 33
20330: EQUAL
20331: IFFALSE 20341
// sRandom := true ;
20333: LD_ADDR_EXP 112
20337: PUSH
20338: LD_INT 1
20340: ST_TO_ADDR
// if p3 = 34 then
20341: LD_VAR 0 3
20345: PUSH
20346: LD_INT 34
20348: EQUAL
20349: IFFALSE 20359
// sShield := true ;
20351: LD_ADDR_EXP 113
20355: PUSH
20356: LD_INT 1
20358: ST_TO_ADDR
// if p3 = 35 then
20359: LD_VAR 0 3
20363: PUSH
20364: LD_INT 35
20366: EQUAL
20367: IFFALSE 20377
// sTime := true ;
20369: LD_ADDR_EXP 114
20373: PUSH
20374: LD_INT 1
20376: ST_TO_ADDR
// if p3 = 36 then
20377: LD_VAR 0 3
20381: PUSH
20382: LD_INT 36
20384: EQUAL
20385: IFFALSE 20395
// sTools := true ;
20387: LD_ADDR_EXP 115
20391: PUSH
20392: LD_INT 1
20394: ST_TO_ADDR
// if p3 = 101 then
20395: LD_VAR 0 3
20399: PUSH
20400: LD_INT 101
20402: EQUAL
20403: IFFALSE 20413
// sSold := true ;
20405: LD_ADDR_EXP 80
20409: PUSH
20410: LD_INT 1
20412: ST_TO_ADDR
// if p3 = 102 then
20413: LD_VAR 0 3
20417: PUSH
20418: LD_INT 102
20420: EQUAL
20421: IFFALSE 20431
// sDiff := true ;
20423: LD_ADDR_EXP 81
20427: PUSH
20428: LD_INT 1
20430: ST_TO_ADDR
// if p3 = 103 then
20431: LD_VAR 0 3
20435: PUSH
20436: LD_INT 103
20438: EQUAL
20439: IFFALSE 20449
// sFog := true ;
20441: LD_ADDR_EXP 84
20445: PUSH
20446: LD_INT 1
20448: ST_TO_ADDR
// if p3 = 104 then
20449: LD_VAR 0 3
20453: PUSH
20454: LD_INT 104
20456: EQUAL
20457: IFFALSE 20467
// sReset := true ;
20459: LD_ADDR_EXP 85
20463: PUSH
20464: LD_INT 1
20466: ST_TO_ADDR
// if p3 = 105 then
20467: LD_VAR 0 3
20471: PUSH
20472: LD_INT 105
20474: EQUAL
20475: IFFALSE 20485
// sSun := true ;
20477: LD_ADDR_EXP 86
20481: PUSH
20482: LD_INT 1
20484: ST_TO_ADDR
// if p3 = 106 then
20485: LD_VAR 0 3
20489: PUSH
20490: LD_INT 106
20492: EQUAL
20493: IFFALSE 20503
// sTiger := true ;
20495: LD_ADDR_EXP 82
20499: PUSH
20500: LD_INT 1
20502: ST_TO_ADDR
// if p3 = 107 then
20503: LD_VAR 0 3
20507: PUSH
20508: LD_INT 107
20510: EQUAL
20511: IFFALSE 20521
// sBomb := true ;
20513: LD_ADDR_EXP 83
20517: PUSH
20518: LD_INT 1
20520: ST_TO_ADDR
// if p3 = 108 then
20521: LD_VAR 0 3
20525: PUSH
20526: LD_INT 108
20528: EQUAL
20529: IFFALSE 20539
// sWound := true ;
20531: LD_ADDR_EXP 91
20535: PUSH
20536: LD_INT 1
20538: ST_TO_ADDR
// if p3 = 109 then
20539: LD_VAR 0 3
20543: PUSH
20544: LD_INT 109
20546: EQUAL
20547: IFFALSE 20557
// sBetray := true ;
20549: LD_ADDR_EXP 95
20553: PUSH
20554: LD_INT 1
20556: ST_TO_ADDR
// if p3 = 110 then
20557: LD_VAR 0 3
20561: PUSH
20562: LD_INT 110
20564: EQUAL
20565: IFFALSE 20575
// sContamin := true ;
20567: LD_ADDR_EXP 96
20571: PUSH
20572: LD_INT 1
20574: ST_TO_ADDR
// if p3 = 111 then
20575: LD_VAR 0 3
20579: PUSH
20580: LD_INT 111
20582: EQUAL
20583: IFFALSE 20593
// sOil := true ;
20585: LD_ADDR_EXP 98
20589: PUSH
20590: LD_INT 1
20592: ST_TO_ADDR
// if p3 = 112 then
20593: LD_VAR 0 3
20597: PUSH
20598: LD_INT 112
20600: EQUAL
20601: IFFALSE 20611
// sStu := true ;
20603: LD_ADDR_EXP 102
20607: PUSH
20608: LD_INT 1
20610: ST_TO_ADDR
// if p3 = 113 then
20611: LD_VAR 0 3
20615: PUSH
20616: LD_INT 113
20618: EQUAL
20619: IFFALSE 20629
// sBazooka := true ;
20621: LD_ADDR_EXP 105
20625: PUSH
20626: LD_INT 1
20628: ST_TO_ADDR
// if p3 = 114 then
20629: LD_VAR 0 3
20633: PUSH
20634: LD_INT 114
20636: EQUAL
20637: IFFALSE 20647
// sMortar := true ;
20639: LD_ADDR_EXP 106
20643: PUSH
20644: LD_INT 1
20646: ST_TO_ADDR
// if p3 = 115 then
20647: LD_VAR 0 3
20651: PUSH
20652: LD_INT 115
20654: EQUAL
20655: IFFALSE 20665
// sRanger := true ;
20657: LD_ADDR_EXP 116
20661: PUSH
20662: LD_INT 1
20664: ST_TO_ADDR
// if p3 = 116 then
20665: LD_VAR 0 3
20669: PUSH
20670: LD_INT 116
20672: EQUAL
20673: IFFALSE 20683
// sComputer := true ;
20675: LD_ADDR_EXP 117
20679: PUSH
20680: LD_INT 1
20682: ST_TO_ADDR
// if p3 = 117 then
20683: LD_VAR 0 3
20687: PUSH
20688: LD_INT 117
20690: EQUAL
20691: IFFALSE 20701
// s30 := true ;
20693: LD_ADDR_EXP 118
20697: PUSH
20698: LD_INT 1
20700: ST_TO_ADDR
// if p3 = 118 then
20701: LD_VAR 0 3
20705: PUSH
20706: LD_INT 118
20708: EQUAL
20709: IFFALSE 20719
// s60 := true ;
20711: LD_ADDR_EXP 119
20715: PUSH
20716: LD_INT 1
20718: ST_TO_ADDR
// end ; if p2 = hack_mode then
20719: LD_VAR 0 2
20723: PUSH
20724: LD_INT 101
20726: EQUAL
20727: IFFALSE 20855
// begin case p3 of 1 :
20729: LD_VAR 0 3
20733: PUSH
20734: LD_INT 1
20736: DOUBLE
20737: EQUAL
20738: IFTRUE 20742
20740: GO 20749
20742: POP
// hHackUnlimitedResources ; 2 :
20743: CALL 33118 0 0
20747: GO 20855
20749: LD_INT 2
20751: DOUBLE
20752: EQUAL
20753: IFTRUE 20757
20755: GO 20764
20757: POP
// hHackSetLevel10 ; 3 :
20758: CALL 33251 0 0
20762: GO 20855
20764: LD_INT 3
20766: DOUBLE
20767: EQUAL
20768: IFTRUE 20772
20770: GO 20779
20772: POP
// hHackSetLevel10YourUnits ; 4 :
20773: CALL 33336 0 0
20777: GO 20855
20779: LD_INT 4
20781: DOUBLE
20782: EQUAL
20783: IFTRUE 20787
20785: GO 20794
20787: POP
// hHackInvincible ; 5 :
20788: CALL 33784 0 0
20792: GO 20855
20794: LD_INT 5
20796: DOUBLE
20797: EQUAL
20798: IFTRUE 20802
20800: GO 20809
20802: POP
// hHackInvisible ; 6 :
20803: CALL 33895 0 0
20807: GO 20855
20809: LD_INT 6
20811: DOUBLE
20812: EQUAL
20813: IFTRUE 20817
20815: GO 20824
20817: POP
// hHackChangeYourSide ; 7 :
20818: CALL 33952 0 0
20822: GO 20855
20824: LD_INT 7
20826: DOUBLE
20827: EQUAL
20828: IFTRUE 20832
20830: GO 20839
20832: POP
// hHackChangeUnitSide ; 8 :
20833: CALL 33994 0 0
20837: GO 20855
20839: LD_INT 8
20841: DOUBLE
20842: EQUAL
20843: IFTRUE 20847
20845: GO 20854
20847: POP
// hHackFog ; end ;
20848: CALL 34095 0 0
20852: GO 20855
20854: POP
// end ; if p2 = game_save_mode then
20855: LD_VAR 0 2
20859: PUSH
20860: LD_INT 102
20862: EQUAL
20863: IFFALSE 20920
// begin if p3 = 1 then
20865: LD_VAR 0 3
20869: PUSH
20870: LD_INT 1
20872: EQUAL
20873: IFFALSE 20885
// globalGameSaveCounter := p4 ;
20875: LD_ADDR_EXP 62
20879: PUSH
20880: LD_VAR 0 4
20884: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20885: LD_VAR 0 3
20889: PUSH
20890: LD_INT 2
20892: EQUAL
20893: IFFALSE 20901
20895: PUSH
20896: LD_EXP 62
20900: AND
20901: IFFALSE 20920
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20903: LD_STRING setGameSaveCounter(
20905: PUSH
20906: LD_EXP 62
20910: STR
20911: PUSH
20912: LD_STRING )
20914: STR
20915: PPUSH
20916: CALL_OW 559
// end ; end ;
20920: LD_VAR 0 7
20924: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20925: LD_INT 0
20927: PPUSH
// streamModeActive := false ;
20928: LD_ADDR_EXP 63
20932: PUSH
20933: LD_INT 0
20935: ST_TO_ADDR
// normalCounter := 36 ;
20936: LD_ADDR_EXP 64
20940: PUSH
20941: LD_INT 36
20943: ST_TO_ADDR
// hardcoreCounter := 18 ;
20944: LD_ADDR_EXP 65
20948: PUSH
20949: LD_INT 18
20951: ST_TO_ADDR
// sRocket := false ;
20952: LD_ADDR_EXP 68
20956: PUSH
20957: LD_INT 0
20959: ST_TO_ADDR
// sSpeed := false ;
20960: LD_ADDR_EXP 67
20964: PUSH
20965: LD_INT 0
20967: ST_TO_ADDR
// sEngine := false ;
20968: LD_ADDR_EXP 69
20972: PUSH
20973: LD_INT 0
20975: ST_TO_ADDR
// sSpec := false ;
20976: LD_ADDR_EXP 66
20980: PUSH
20981: LD_INT 0
20983: ST_TO_ADDR
// sLevel := false ;
20984: LD_ADDR_EXP 70
20988: PUSH
20989: LD_INT 0
20991: ST_TO_ADDR
// sArmoury := false ;
20992: LD_ADDR_EXP 71
20996: PUSH
20997: LD_INT 0
20999: ST_TO_ADDR
// sRadar := false ;
21000: LD_ADDR_EXP 72
21004: PUSH
21005: LD_INT 0
21007: ST_TO_ADDR
// sBunker := false ;
21008: LD_ADDR_EXP 73
21012: PUSH
21013: LD_INT 0
21015: ST_TO_ADDR
// sHack := false ;
21016: LD_ADDR_EXP 74
21020: PUSH
21021: LD_INT 0
21023: ST_TO_ADDR
// sFire := false ;
21024: LD_ADDR_EXP 75
21028: PUSH
21029: LD_INT 0
21031: ST_TO_ADDR
// sRefresh := false ;
21032: LD_ADDR_EXP 76
21036: PUSH
21037: LD_INT 0
21039: ST_TO_ADDR
// sExp := false ;
21040: LD_ADDR_EXP 77
21044: PUSH
21045: LD_INT 0
21047: ST_TO_ADDR
// sDepot := false ;
21048: LD_ADDR_EXP 78
21052: PUSH
21053: LD_INT 0
21055: ST_TO_ADDR
// sFlag := false ;
21056: LD_ADDR_EXP 79
21060: PUSH
21061: LD_INT 0
21063: ST_TO_ADDR
// sKamikadze := false ;
21064: LD_ADDR_EXP 87
21068: PUSH
21069: LD_INT 0
21071: ST_TO_ADDR
// sTroll := false ;
21072: LD_ADDR_EXP 88
21076: PUSH
21077: LD_INT 0
21079: ST_TO_ADDR
// sSlow := false ;
21080: LD_ADDR_EXP 89
21084: PUSH
21085: LD_INT 0
21087: ST_TO_ADDR
// sLack := false ;
21088: LD_ADDR_EXP 90
21092: PUSH
21093: LD_INT 0
21095: ST_TO_ADDR
// sTank := false ;
21096: LD_ADDR_EXP 92
21100: PUSH
21101: LD_INT 0
21103: ST_TO_ADDR
// sRemote := false ;
21104: LD_ADDR_EXP 93
21108: PUSH
21109: LD_INT 0
21111: ST_TO_ADDR
// sPowell := false ;
21112: LD_ADDR_EXP 94
21116: PUSH
21117: LD_INT 0
21119: ST_TO_ADDR
// sTeleport := false ;
21120: LD_ADDR_EXP 97
21124: PUSH
21125: LD_INT 0
21127: ST_TO_ADDR
// sOilTower := false ;
21128: LD_ADDR_EXP 99
21132: PUSH
21133: LD_INT 0
21135: ST_TO_ADDR
// sShovel := false ;
21136: LD_ADDR_EXP 100
21140: PUSH
21141: LD_INT 0
21143: ST_TO_ADDR
// sSheik := false ;
21144: LD_ADDR_EXP 101
21148: PUSH
21149: LD_INT 0
21151: ST_TO_ADDR
// sEarthquake := false ;
21152: LD_ADDR_EXP 103
21156: PUSH
21157: LD_INT 0
21159: ST_TO_ADDR
// sAI := false ;
21160: LD_ADDR_EXP 104
21164: PUSH
21165: LD_INT 0
21167: ST_TO_ADDR
// sCargo := false ;
21168: LD_ADDR_EXP 107
21172: PUSH
21173: LD_INT 0
21175: ST_TO_ADDR
// sDLaser := false ;
21176: LD_ADDR_EXP 108
21180: PUSH
21181: LD_INT 0
21183: ST_TO_ADDR
// sExchange := false ;
21184: LD_ADDR_EXP 109
21188: PUSH
21189: LD_INT 0
21191: ST_TO_ADDR
// sFac := false ;
21192: LD_ADDR_EXP 110
21196: PUSH
21197: LD_INT 0
21199: ST_TO_ADDR
// sPower := false ;
21200: LD_ADDR_EXP 111
21204: PUSH
21205: LD_INT 0
21207: ST_TO_ADDR
// sRandom := false ;
21208: LD_ADDR_EXP 112
21212: PUSH
21213: LD_INT 0
21215: ST_TO_ADDR
// sShield := false ;
21216: LD_ADDR_EXP 113
21220: PUSH
21221: LD_INT 0
21223: ST_TO_ADDR
// sTime := false ;
21224: LD_ADDR_EXP 114
21228: PUSH
21229: LD_INT 0
21231: ST_TO_ADDR
// sTools := false ;
21232: LD_ADDR_EXP 115
21236: PUSH
21237: LD_INT 0
21239: ST_TO_ADDR
// sSold := false ;
21240: LD_ADDR_EXP 80
21244: PUSH
21245: LD_INT 0
21247: ST_TO_ADDR
// sDiff := false ;
21248: LD_ADDR_EXP 81
21252: PUSH
21253: LD_INT 0
21255: ST_TO_ADDR
// sFog := false ;
21256: LD_ADDR_EXP 84
21260: PUSH
21261: LD_INT 0
21263: ST_TO_ADDR
// sReset := false ;
21264: LD_ADDR_EXP 85
21268: PUSH
21269: LD_INT 0
21271: ST_TO_ADDR
// sSun := false ;
21272: LD_ADDR_EXP 86
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// sTiger := false ;
21280: LD_ADDR_EXP 82
21284: PUSH
21285: LD_INT 0
21287: ST_TO_ADDR
// sBomb := false ;
21288: LD_ADDR_EXP 83
21292: PUSH
21293: LD_INT 0
21295: ST_TO_ADDR
// sWound := false ;
21296: LD_ADDR_EXP 91
21300: PUSH
21301: LD_INT 0
21303: ST_TO_ADDR
// sBetray := false ;
21304: LD_ADDR_EXP 95
21308: PUSH
21309: LD_INT 0
21311: ST_TO_ADDR
// sContamin := false ;
21312: LD_ADDR_EXP 96
21316: PUSH
21317: LD_INT 0
21319: ST_TO_ADDR
// sOil := false ;
21320: LD_ADDR_EXP 98
21324: PUSH
21325: LD_INT 0
21327: ST_TO_ADDR
// sStu := false ;
21328: LD_ADDR_EXP 102
21332: PUSH
21333: LD_INT 0
21335: ST_TO_ADDR
// sBazooka := false ;
21336: LD_ADDR_EXP 105
21340: PUSH
21341: LD_INT 0
21343: ST_TO_ADDR
// sMortar := false ;
21344: LD_ADDR_EXP 106
21348: PUSH
21349: LD_INT 0
21351: ST_TO_ADDR
// sRanger := false ;
21352: LD_ADDR_EXP 116
21356: PUSH
21357: LD_INT 0
21359: ST_TO_ADDR
// sComputer := false ;
21360: LD_ADDR_EXP 117
21364: PUSH
21365: LD_INT 0
21367: ST_TO_ADDR
// s30 := false ;
21368: LD_ADDR_EXP 118
21372: PUSH
21373: LD_INT 0
21375: ST_TO_ADDR
// s60 := false ;
21376: LD_ADDR_EXP 119
21380: PUSH
21381: LD_INT 0
21383: ST_TO_ADDR
// end ;
21384: LD_VAR 0 1
21388: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21389: LD_INT 0
21391: PPUSH
21392: PPUSH
21393: PPUSH
21394: PPUSH
21395: PPUSH
21396: PPUSH
21397: PPUSH
// result := [ ] ;
21398: LD_ADDR_VAR 0 2
21402: PUSH
21403: EMPTY
21404: ST_TO_ADDR
// if campaign_id = 1 then
21405: LD_OWVAR 69
21409: PUSH
21410: LD_INT 1
21412: EQUAL
21413: IFFALSE 24579
// begin case mission_number of 1 :
21415: LD_OWVAR 70
21419: PUSH
21420: LD_INT 1
21422: DOUBLE
21423: EQUAL
21424: IFTRUE 21428
21426: GO 21504
21428: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21429: LD_ADDR_VAR 0 2
21433: PUSH
21434: LD_INT 2
21436: PUSH
21437: LD_INT 4
21439: PUSH
21440: LD_INT 11
21442: PUSH
21443: LD_INT 12
21445: PUSH
21446: LD_INT 15
21448: PUSH
21449: LD_INT 16
21451: PUSH
21452: LD_INT 22
21454: PUSH
21455: LD_INT 23
21457: PUSH
21458: LD_INT 26
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 101
21474: PUSH
21475: LD_INT 102
21477: PUSH
21478: LD_INT 106
21480: PUSH
21481: LD_INT 116
21483: PUSH
21484: LD_INT 117
21486: PUSH
21487: LD_INT 118
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: ST_TO_ADDR
21502: GO 24577
21504: LD_INT 2
21506: DOUBLE
21507: EQUAL
21508: IFTRUE 21512
21510: GO 21596
21512: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21513: LD_ADDR_VAR 0 2
21517: PUSH
21518: LD_INT 2
21520: PUSH
21521: LD_INT 4
21523: PUSH
21524: LD_INT 11
21526: PUSH
21527: LD_INT 12
21529: PUSH
21530: LD_INT 15
21532: PUSH
21533: LD_INT 16
21535: PUSH
21536: LD_INT 22
21538: PUSH
21539: LD_INT 23
21541: PUSH
21542: LD_INT 26
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 101
21558: PUSH
21559: LD_INT 102
21561: PUSH
21562: LD_INT 105
21564: PUSH
21565: LD_INT 106
21567: PUSH
21568: LD_INT 108
21570: PUSH
21571: LD_INT 116
21573: PUSH
21574: LD_INT 117
21576: PUSH
21577: LD_INT 118
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: ST_TO_ADDR
21594: GO 24577
21596: LD_INT 3
21598: DOUBLE
21599: EQUAL
21600: IFTRUE 21604
21602: GO 21692
21604: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21605: LD_ADDR_VAR 0 2
21609: PUSH
21610: LD_INT 2
21612: PUSH
21613: LD_INT 4
21615: PUSH
21616: LD_INT 5
21618: PUSH
21619: LD_INT 11
21621: PUSH
21622: LD_INT 12
21624: PUSH
21625: LD_INT 15
21627: PUSH
21628: LD_INT 16
21630: PUSH
21631: LD_INT 22
21633: PUSH
21634: LD_INT 26
21636: PUSH
21637: LD_INT 36
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 101
21654: PUSH
21655: LD_INT 102
21657: PUSH
21658: LD_INT 105
21660: PUSH
21661: LD_INT 106
21663: PUSH
21664: LD_INT 108
21666: PUSH
21667: LD_INT 116
21669: PUSH
21670: LD_INT 117
21672: PUSH
21673: LD_INT 118
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: ST_TO_ADDR
21690: GO 24577
21692: LD_INT 4
21694: DOUBLE
21695: EQUAL
21696: IFTRUE 21700
21698: GO 21796
21700: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21701: LD_ADDR_VAR 0 2
21705: PUSH
21706: LD_INT 2
21708: PUSH
21709: LD_INT 4
21711: PUSH
21712: LD_INT 5
21714: PUSH
21715: LD_INT 8
21717: PUSH
21718: LD_INT 11
21720: PUSH
21721: LD_INT 12
21723: PUSH
21724: LD_INT 15
21726: PUSH
21727: LD_INT 16
21729: PUSH
21730: LD_INT 22
21732: PUSH
21733: LD_INT 23
21735: PUSH
21736: LD_INT 26
21738: PUSH
21739: LD_INT 36
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 101
21758: PUSH
21759: LD_INT 102
21761: PUSH
21762: LD_INT 105
21764: PUSH
21765: LD_INT 106
21767: PUSH
21768: LD_INT 108
21770: PUSH
21771: LD_INT 116
21773: PUSH
21774: LD_INT 117
21776: PUSH
21777: LD_INT 118
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: ST_TO_ADDR
21794: GO 24577
21796: LD_INT 5
21798: DOUBLE
21799: EQUAL
21800: IFTRUE 21804
21802: GO 21916
21804: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21805: LD_ADDR_VAR 0 2
21809: PUSH
21810: LD_INT 2
21812: PUSH
21813: LD_INT 4
21815: PUSH
21816: LD_INT 5
21818: PUSH
21819: LD_INT 6
21821: PUSH
21822: LD_INT 8
21824: PUSH
21825: LD_INT 11
21827: PUSH
21828: LD_INT 12
21830: PUSH
21831: LD_INT 15
21833: PUSH
21834: LD_INT 16
21836: PUSH
21837: LD_INT 22
21839: PUSH
21840: LD_INT 23
21842: PUSH
21843: LD_INT 25
21845: PUSH
21846: LD_INT 26
21848: PUSH
21849: LD_INT 36
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 101
21870: PUSH
21871: LD_INT 102
21873: PUSH
21874: LD_INT 105
21876: PUSH
21877: LD_INT 106
21879: PUSH
21880: LD_INT 108
21882: PUSH
21883: LD_INT 109
21885: PUSH
21886: LD_INT 112
21888: PUSH
21889: LD_INT 116
21891: PUSH
21892: LD_INT 117
21894: PUSH
21895: LD_INT 118
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: ST_TO_ADDR
21914: GO 24577
21916: LD_INT 6
21918: DOUBLE
21919: EQUAL
21920: IFTRUE 21924
21922: GO 22056
21924: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21925: LD_ADDR_VAR 0 2
21929: PUSH
21930: LD_INT 2
21932: PUSH
21933: LD_INT 4
21935: PUSH
21936: LD_INT 5
21938: PUSH
21939: LD_INT 6
21941: PUSH
21942: LD_INT 8
21944: PUSH
21945: LD_INT 11
21947: PUSH
21948: LD_INT 12
21950: PUSH
21951: LD_INT 15
21953: PUSH
21954: LD_INT 16
21956: PUSH
21957: LD_INT 20
21959: PUSH
21960: LD_INT 21
21962: PUSH
21963: LD_INT 22
21965: PUSH
21966: LD_INT 23
21968: PUSH
21969: LD_INT 25
21971: PUSH
21972: LD_INT 26
21974: PUSH
21975: LD_INT 30
21977: PUSH
21978: LD_INT 31
21980: PUSH
21981: LD_INT 32
21983: PUSH
21984: LD_INT 36
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 101
22010: PUSH
22011: LD_INT 102
22013: PUSH
22014: LD_INT 105
22016: PUSH
22017: LD_INT 106
22019: PUSH
22020: LD_INT 108
22022: PUSH
22023: LD_INT 109
22025: PUSH
22026: LD_INT 112
22028: PUSH
22029: LD_INT 116
22031: PUSH
22032: LD_INT 117
22034: PUSH
22035: LD_INT 118
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: ST_TO_ADDR
22054: GO 24577
22056: LD_INT 7
22058: DOUBLE
22059: EQUAL
22060: IFTRUE 22064
22062: GO 22176
22064: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22065: LD_ADDR_VAR 0 2
22069: PUSH
22070: LD_INT 2
22072: PUSH
22073: LD_INT 4
22075: PUSH
22076: LD_INT 5
22078: PUSH
22079: LD_INT 7
22081: PUSH
22082: LD_INT 11
22084: PUSH
22085: LD_INT 12
22087: PUSH
22088: LD_INT 15
22090: PUSH
22091: LD_INT 16
22093: PUSH
22094: LD_INT 20
22096: PUSH
22097: LD_INT 21
22099: PUSH
22100: LD_INT 22
22102: PUSH
22103: LD_INT 23
22105: PUSH
22106: LD_INT 25
22108: PUSH
22109: LD_INT 26
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 101
22130: PUSH
22131: LD_INT 102
22133: PUSH
22134: LD_INT 103
22136: PUSH
22137: LD_INT 105
22139: PUSH
22140: LD_INT 106
22142: PUSH
22143: LD_INT 108
22145: PUSH
22146: LD_INT 112
22148: PUSH
22149: LD_INT 116
22151: PUSH
22152: LD_INT 117
22154: PUSH
22155: LD_INT 118
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: ST_TO_ADDR
22174: GO 24577
22176: LD_INT 8
22178: DOUBLE
22179: EQUAL
22180: IFTRUE 22184
22182: GO 22324
22184: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22185: LD_ADDR_VAR 0 2
22189: PUSH
22190: LD_INT 2
22192: PUSH
22193: LD_INT 4
22195: PUSH
22196: LD_INT 5
22198: PUSH
22199: LD_INT 6
22201: PUSH
22202: LD_INT 7
22204: PUSH
22205: LD_INT 8
22207: PUSH
22208: LD_INT 11
22210: PUSH
22211: LD_INT 12
22213: PUSH
22214: LD_INT 15
22216: PUSH
22217: LD_INT 16
22219: PUSH
22220: LD_INT 20
22222: PUSH
22223: LD_INT 21
22225: PUSH
22226: LD_INT 22
22228: PUSH
22229: LD_INT 23
22231: PUSH
22232: LD_INT 25
22234: PUSH
22235: LD_INT 26
22237: PUSH
22238: LD_INT 30
22240: PUSH
22241: LD_INT 31
22243: PUSH
22244: LD_INT 32
22246: PUSH
22247: LD_INT 36
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 101
22274: PUSH
22275: LD_INT 102
22277: PUSH
22278: LD_INT 103
22280: PUSH
22281: LD_INT 105
22283: PUSH
22284: LD_INT 106
22286: PUSH
22287: LD_INT 108
22289: PUSH
22290: LD_INT 109
22292: PUSH
22293: LD_INT 112
22295: PUSH
22296: LD_INT 116
22298: PUSH
22299: LD_INT 117
22301: PUSH
22302: LD_INT 118
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: ST_TO_ADDR
22322: GO 24577
22324: LD_INT 9
22326: DOUBLE
22327: EQUAL
22328: IFTRUE 22332
22330: GO 22480
22332: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22333: LD_ADDR_VAR 0 2
22337: PUSH
22338: LD_INT 2
22340: PUSH
22341: LD_INT 4
22343: PUSH
22344: LD_INT 5
22346: PUSH
22347: LD_INT 6
22349: PUSH
22350: LD_INT 7
22352: PUSH
22353: LD_INT 8
22355: PUSH
22356: LD_INT 11
22358: PUSH
22359: LD_INT 12
22361: PUSH
22362: LD_INT 15
22364: PUSH
22365: LD_INT 16
22367: PUSH
22368: LD_INT 20
22370: PUSH
22371: LD_INT 21
22373: PUSH
22374: LD_INT 22
22376: PUSH
22377: LD_INT 23
22379: PUSH
22380: LD_INT 25
22382: PUSH
22383: LD_INT 26
22385: PUSH
22386: LD_INT 28
22388: PUSH
22389: LD_INT 30
22391: PUSH
22392: LD_INT 31
22394: PUSH
22395: LD_INT 32
22397: PUSH
22398: LD_INT 36
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 101
22426: PUSH
22427: LD_INT 102
22429: PUSH
22430: LD_INT 103
22432: PUSH
22433: LD_INT 105
22435: PUSH
22436: LD_INT 106
22438: PUSH
22439: LD_INT 108
22441: PUSH
22442: LD_INT 109
22444: PUSH
22445: LD_INT 112
22447: PUSH
22448: LD_INT 114
22450: PUSH
22451: LD_INT 116
22453: PUSH
22454: LD_INT 117
22456: PUSH
22457: LD_INT 118
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: ST_TO_ADDR
22478: GO 24577
22480: LD_INT 10
22482: DOUBLE
22483: EQUAL
22484: IFTRUE 22488
22486: GO 22684
22488: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22489: LD_ADDR_VAR 0 2
22493: PUSH
22494: LD_INT 2
22496: PUSH
22497: LD_INT 4
22499: PUSH
22500: LD_INT 5
22502: PUSH
22503: LD_INT 6
22505: PUSH
22506: LD_INT 7
22508: PUSH
22509: LD_INT 8
22511: PUSH
22512: LD_INT 9
22514: PUSH
22515: LD_INT 10
22517: PUSH
22518: LD_INT 11
22520: PUSH
22521: LD_INT 12
22523: PUSH
22524: LD_INT 13
22526: PUSH
22527: LD_INT 14
22529: PUSH
22530: LD_INT 15
22532: PUSH
22533: LD_INT 16
22535: PUSH
22536: LD_INT 17
22538: PUSH
22539: LD_INT 18
22541: PUSH
22542: LD_INT 19
22544: PUSH
22545: LD_INT 20
22547: PUSH
22548: LD_INT 21
22550: PUSH
22551: LD_INT 22
22553: PUSH
22554: LD_INT 23
22556: PUSH
22557: LD_INT 24
22559: PUSH
22560: LD_INT 25
22562: PUSH
22563: LD_INT 26
22565: PUSH
22566: LD_INT 28
22568: PUSH
22569: LD_INT 30
22571: PUSH
22572: LD_INT 31
22574: PUSH
22575: LD_INT 32
22577: PUSH
22578: LD_INT 36
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 101
22614: PUSH
22615: LD_INT 102
22617: PUSH
22618: LD_INT 103
22620: PUSH
22621: LD_INT 104
22623: PUSH
22624: LD_INT 105
22626: PUSH
22627: LD_INT 106
22629: PUSH
22630: LD_INT 107
22632: PUSH
22633: LD_INT 108
22635: PUSH
22636: LD_INT 109
22638: PUSH
22639: LD_INT 110
22641: PUSH
22642: LD_INT 111
22644: PUSH
22645: LD_INT 112
22647: PUSH
22648: LD_INT 114
22650: PUSH
22651: LD_INT 116
22653: PUSH
22654: LD_INT 117
22656: PUSH
22657: LD_INT 118
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: ST_TO_ADDR
22682: GO 24577
22684: LD_INT 11
22686: DOUBLE
22687: EQUAL
22688: IFTRUE 22692
22690: GO 22896
22692: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22693: LD_ADDR_VAR 0 2
22697: PUSH
22698: LD_INT 2
22700: PUSH
22701: LD_INT 3
22703: PUSH
22704: LD_INT 4
22706: PUSH
22707: LD_INT 5
22709: PUSH
22710: LD_INT 6
22712: PUSH
22713: LD_INT 7
22715: PUSH
22716: LD_INT 8
22718: PUSH
22719: LD_INT 9
22721: PUSH
22722: LD_INT 10
22724: PUSH
22725: LD_INT 11
22727: PUSH
22728: LD_INT 12
22730: PUSH
22731: LD_INT 13
22733: PUSH
22734: LD_INT 14
22736: PUSH
22737: LD_INT 15
22739: PUSH
22740: LD_INT 16
22742: PUSH
22743: LD_INT 17
22745: PUSH
22746: LD_INT 18
22748: PUSH
22749: LD_INT 19
22751: PUSH
22752: LD_INT 20
22754: PUSH
22755: LD_INT 21
22757: PUSH
22758: LD_INT 22
22760: PUSH
22761: LD_INT 23
22763: PUSH
22764: LD_INT 24
22766: PUSH
22767: LD_INT 25
22769: PUSH
22770: LD_INT 26
22772: PUSH
22773: LD_INT 28
22775: PUSH
22776: LD_INT 30
22778: PUSH
22779: LD_INT 31
22781: PUSH
22782: LD_INT 32
22784: PUSH
22785: LD_INT 34
22787: PUSH
22788: LD_INT 36
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 101
22826: PUSH
22827: LD_INT 102
22829: PUSH
22830: LD_INT 103
22832: PUSH
22833: LD_INT 104
22835: PUSH
22836: LD_INT 105
22838: PUSH
22839: LD_INT 106
22841: PUSH
22842: LD_INT 107
22844: PUSH
22845: LD_INT 108
22847: PUSH
22848: LD_INT 109
22850: PUSH
22851: LD_INT 110
22853: PUSH
22854: LD_INT 111
22856: PUSH
22857: LD_INT 112
22859: PUSH
22860: LD_INT 114
22862: PUSH
22863: LD_INT 116
22865: PUSH
22866: LD_INT 117
22868: PUSH
22869: LD_INT 118
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: ST_TO_ADDR
22894: GO 24577
22896: LD_INT 12
22898: DOUBLE
22899: EQUAL
22900: IFTRUE 22904
22902: GO 23124
22904: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22905: LD_ADDR_VAR 0 2
22909: PUSH
22910: LD_INT 1
22912: PUSH
22913: LD_INT 2
22915: PUSH
22916: LD_INT 3
22918: PUSH
22919: LD_INT 4
22921: PUSH
22922: LD_INT 5
22924: PUSH
22925: LD_INT 6
22927: PUSH
22928: LD_INT 7
22930: PUSH
22931: LD_INT 8
22933: PUSH
22934: LD_INT 9
22936: PUSH
22937: LD_INT 10
22939: PUSH
22940: LD_INT 11
22942: PUSH
22943: LD_INT 12
22945: PUSH
22946: LD_INT 13
22948: PUSH
22949: LD_INT 14
22951: PUSH
22952: LD_INT 15
22954: PUSH
22955: LD_INT 16
22957: PUSH
22958: LD_INT 17
22960: PUSH
22961: LD_INT 18
22963: PUSH
22964: LD_INT 19
22966: PUSH
22967: LD_INT 20
22969: PUSH
22970: LD_INT 21
22972: PUSH
22973: LD_INT 22
22975: PUSH
22976: LD_INT 23
22978: PUSH
22979: LD_INT 24
22981: PUSH
22982: LD_INT 25
22984: PUSH
22985: LD_INT 26
22987: PUSH
22988: LD_INT 27
22990: PUSH
22991: LD_INT 28
22993: PUSH
22994: LD_INT 30
22996: PUSH
22997: LD_INT 31
22999: PUSH
23000: LD_INT 32
23002: PUSH
23003: LD_INT 33
23005: PUSH
23006: LD_INT 34
23008: PUSH
23009: LD_INT 36
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 101
23050: PUSH
23051: LD_INT 102
23053: PUSH
23054: LD_INT 103
23056: PUSH
23057: LD_INT 104
23059: PUSH
23060: LD_INT 105
23062: PUSH
23063: LD_INT 106
23065: PUSH
23066: LD_INT 107
23068: PUSH
23069: LD_INT 108
23071: PUSH
23072: LD_INT 109
23074: PUSH
23075: LD_INT 110
23077: PUSH
23078: LD_INT 111
23080: PUSH
23081: LD_INT 112
23083: PUSH
23084: LD_INT 113
23086: PUSH
23087: LD_INT 114
23089: PUSH
23090: LD_INT 116
23092: PUSH
23093: LD_INT 117
23095: PUSH
23096: LD_INT 118
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: ST_TO_ADDR
23122: GO 24577
23124: LD_INT 13
23126: DOUBLE
23127: EQUAL
23128: IFTRUE 23132
23130: GO 23340
23132: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23133: LD_ADDR_VAR 0 2
23137: PUSH
23138: LD_INT 1
23140: PUSH
23141: LD_INT 2
23143: PUSH
23144: LD_INT 3
23146: PUSH
23147: LD_INT 4
23149: PUSH
23150: LD_INT 5
23152: PUSH
23153: LD_INT 8
23155: PUSH
23156: LD_INT 9
23158: PUSH
23159: LD_INT 10
23161: PUSH
23162: LD_INT 11
23164: PUSH
23165: LD_INT 12
23167: PUSH
23168: LD_INT 14
23170: PUSH
23171: LD_INT 15
23173: PUSH
23174: LD_INT 16
23176: PUSH
23177: LD_INT 17
23179: PUSH
23180: LD_INT 18
23182: PUSH
23183: LD_INT 19
23185: PUSH
23186: LD_INT 20
23188: PUSH
23189: LD_INT 21
23191: PUSH
23192: LD_INT 22
23194: PUSH
23195: LD_INT 23
23197: PUSH
23198: LD_INT 24
23200: PUSH
23201: LD_INT 25
23203: PUSH
23204: LD_INT 26
23206: PUSH
23207: LD_INT 27
23209: PUSH
23210: LD_INT 28
23212: PUSH
23213: LD_INT 30
23215: PUSH
23216: LD_INT 31
23218: PUSH
23219: LD_INT 32
23221: PUSH
23222: LD_INT 33
23224: PUSH
23225: LD_INT 34
23227: PUSH
23228: LD_INT 36
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 101
23266: PUSH
23267: LD_INT 102
23269: PUSH
23270: LD_INT 103
23272: PUSH
23273: LD_INT 104
23275: PUSH
23276: LD_INT 105
23278: PUSH
23279: LD_INT 106
23281: PUSH
23282: LD_INT 107
23284: PUSH
23285: LD_INT 108
23287: PUSH
23288: LD_INT 109
23290: PUSH
23291: LD_INT 110
23293: PUSH
23294: LD_INT 111
23296: PUSH
23297: LD_INT 112
23299: PUSH
23300: LD_INT 113
23302: PUSH
23303: LD_INT 114
23305: PUSH
23306: LD_INT 116
23308: PUSH
23309: LD_INT 117
23311: PUSH
23312: LD_INT 118
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: ST_TO_ADDR
23338: GO 24577
23340: LD_INT 14
23342: DOUBLE
23343: EQUAL
23344: IFTRUE 23348
23346: GO 23572
23348: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23349: LD_ADDR_VAR 0 2
23353: PUSH
23354: LD_INT 1
23356: PUSH
23357: LD_INT 2
23359: PUSH
23360: LD_INT 3
23362: PUSH
23363: LD_INT 4
23365: PUSH
23366: LD_INT 5
23368: PUSH
23369: LD_INT 6
23371: PUSH
23372: LD_INT 7
23374: PUSH
23375: LD_INT 8
23377: PUSH
23378: LD_INT 9
23380: PUSH
23381: LD_INT 10
23383: PUSH
23384: LD_INT 11
23386: PUSH
23387: LD_INT 12
23389: PUSH
23390: LD_INT 13
23392: PUSH
23393: LD_INT 14
23395: PUSH
23396: LD_INT 15
23398: PUSH
23399: LD_INT 16
23401: PUSH
23402: LD_INT 17
23404: PUSH
23405: LD_INT 18
23407: PUSH
23408: LD_INT 19
23410: PUSH
23411: LD_INT 20
23413: PUSH
23414: LD_INT 21
23416: PUSH
23417: LD_INT 22
23419: PUSH
23420: LD_INT 23
23422: PUSH
23423: LD_INT 24
23425: PUSH
23426: LD_INT 25
23428: PUSH
23429: LD_INT 26
23431: PUSH
23432: LD_INT 27
23434: PUSH
23435: LD_INT 28
23437: PUSH
23438: LD_INT 29
23440: PUSH
23441: LD_INT 30
23443: PUSH
23444: LD_INT 31
23446: PUSH
23447: LD_INT 32
23449: PUSH
23450: LD_INT 33
23452: PUSH
23453: LD_INT 34
23455: PUSH
23456: LD_INT 36
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 101
23498: PUSH
23499: LD_INT 102
23501: PUSH
23502: LD_INT 103
23504: PUSH
23505: LD_INT 104
23507: PUSH
23508: LD_INT 105
23510: PUSH
23511: LD_INT 106
23513: PUSH
23514: LD_INT 107
23516: PUSH
23517: LD_INT 108
23519: PUSH
23520: LD_INT 109
23522: PUSH
23523: LD_INT 110
23525: PUSH
23526: LD_INT 111
23528: PUSH
23529: LD_INT 112
23531: PUSH
23532: LD_INT 113
23534: PUSH
23535: LD_INT 114
23537: PUSH
23538: LD_INT 116
23540: PUSH
23541: LD_INT 117
23543: PUSH
23544: LD_INT 118
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: ST_TO_ADDR
23570: GO 24577
23572: LD_INT 15
23574: DOUBLE
23575: EQUAL
23576: IFTRUE 23580
23578: GO 23804
23580: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23581: LD_ADDR_VAR 0 2
23585: PUSH
23586: LD_INT 1
23588: PUSH
23589: LD_INT 2
23591: PUSH
23592: LD_INT 3
23594: PUSH
23595: LD_INT 4
23597: PUSH
23598: LD_INT 5
23600: PUSH
23601: LD_INT 6
23603: PUSH
23604: LD_INT 7
23606: PUSH
23607: LD_INT 8
23609: PUSH
23610: LD_INT 9
23612: PUSH
23613: LD_INT 10
23615: PUSH
23616: LD_INT 11
23618: PUSH
23619: LD_INT 12
23621: PUSH
23622: LD_INT 13
23624: PUSH
23625: LD_INT 14
23627: PUSH
23628: LD_INT 15
23630: PUSH
23631: LD_INT 16
23633: PUSH
23634: LD_INT 17
23636: PUSH
23637: LD_INT 18
23639: PUSH
23640: LD_INT 19
23642: PUSH
23643: LD_INT 20
23645: PUSH
23646: LD_INT 21
23648: PUSH
23649: LD_INT 22
23651: PUSH
23652: LD_INT 23
23654: PUSH
23655: LD_INT 24
23657: PUSH
23658: LD_INT 25
23660: PUSH
23661: LD_INT 26
23663: PUSH
23664: LD_INT 27
23666: PUSH
23667: LD_INT 28
23669: PUSH
23670: LD_INT 29
23672: PUSH
23673: LD_INT 30
23675: PUSH
23676: LD_INT 31
23678: PUSH
23679: LD_INT 32
23681: PUSH
23682: LD_INT 33
23684: PUSH
23685: LD_INT 34
23687: PUSH
23688: LD_INT 36
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 101
23730: PUSH
23731: LD_INT 102
23733: PUSH
23734: LD_INT 103
23736: PUSH
23737: LD_INT 104
23739: PUSH
23740: LD_INT 105
23742: PUSH
23743: LD_INT 106
23745: PUSH
23746: LD_INT 107
23748: PUSH
23749: LD_INT 108
23751: PUSH
23752: LD_INT 109
23754: PUSH
23755: LD_INT 110
23757: PUSH
23758: LD_INT 111
23760: PUSH
23761: LD_INT 112
23763: PUSH
23764: LD_INT 113
23766: PUSH
23767: LD_INT 114
23769: PUSH
23770: LD_INT 116
23772: PUSH
23773: LD_INT 117
23775: PUSH
23776: LD_INT 118
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: ST_TO_ADDR
23802: GO 24577
23804: LD_INT 16
23806: DOUBLE
23807: EQUAL
23808: IFTRUE 23812
23810: GO 23948
23812: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23813: LD_ADDR_VAR 0 2
23817: PUSH
23818: LD_INT 2
23820: PUSH
23821: LD_INT 4
23823: PUSH
23824: LD_INT 5
23826: PUSH
23827: LD_INT 7
23829: PUSH
23830: LD_INT 11
23832: PUSH
23833: LD_INT 12
23835: PUSH
23836: LD_INT 15
23838: PUSH
23839: LD_INT 16
23841: PUSH
23842: LD_INT 20
23844: PUSH
23845: LD_INT 21
23847: PUSH
23848: LD_INT 22
23850: PUSH
23851: LD_INT 23
23853: PUSH
23854: LD_INT 25
23856: PUSH
23857: LD_INT 26
23859: PUSH
23860: LD_INT 30
23862: PUSH
23863: LD_INT 31
23865: PUSH
23866: LD_INT 32
23868: PUSH
23869: LD_INT 33
23871: PUSH
23872: LD_INT 34
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 101
23898: PUSH
23899: LD_INT 102
23901: PUSH
23902: LD_INT 103
23904: PUSH
23905: LD_INT 106
23907: PUSH
23908: LD_INT 108
23910: PUSH
23911: LD_INT 112
23913: PUSH
23914: LD_INT 113
23916: PUSH
23917: LD_INT 114
23919: PUSH
23920: LD_INT 116
23922: PUSH
23923: LD_INT 117
23925: PUSH
23926: LD_INT 118
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: ST_TO_ADDR
23946: GO 24577
23948: LD_INT 17
23950: DOUBLE
23951: EQUAL
23952: IFTRUE 23956
23954: GO 24180
23956: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23957: LD_ADDR_VAR 0 2
23961: PUSH
23962: LD_INT 1
23964: PUSH
23965: LD_INT 2
23967: PUSH
23968: LD_INT 3
23970: PUSH
23971: LD_INT 4
23973: PUSH
23974: LD_INT 5
23976: PUSH
23977: LD_INT 6
23979: PUSH
23980: LD_INT 7
23982: PUSH
23983: LD_INT 8
23985: PUSH
23986: LD_INT 9
23988: PUSH
23989: LD_INT 10
23991: PUSH
23992: LD_INT 11
23994: PUSH
23995: LD_INT 12
23997: PUSH
23998: LD_INT 13
24000: PUSH
24001: LD_INT 14
24003: PUSH
24004: LD_INT 15
24006: PUSH
24007: LD_INT 16
24009: PUSH
24010: LD_INT 17
24012: PUSH
24013: LD_INT 18
24015: PUSH
24016: LD_INT 19
24018: PUSH
24019: LD_INT 20
24021: PUSH
24022: LD_INT 21
24024: PUSH
24025: LD_INT 22
24027: PUSH
24028: LD_INT 23
24030: PUSH
24031: LD_INT 24
24033: PUSH
24034: LD_INT 25
24036: PUSH
24037: LD_INT 26
24039: PUSH
24040: LD_INT 27
24042: PUSH
24043: LD_INT 28
24045: PUSH
24046: LD_INT 29
24048: PUSH
24049: LD_INT 30
24051: PUSH
24052: LD_INT 31
24054: PUSH
24055: LD_INT 32
24057: PUSH
24058: LD_INT 33
24060: PUSH
24061: LD_INT 34
24063: PUSH
24064: LD_INT 36
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 101
24106: PUSH
24107: LD_INT 102
24109: PUSH
24110: LD_INT 103
24112: PUSH
24113: LD_INT 104
24115: PUSH
24116: LD_INT 105
24118: PUSH
24119: LD_INT 106
24121: PUSH
24122: LD_INT 107
24124: PUSH
24125: LD_INT 108
24127: PUSH
24128: LD_INT 109
24130: PUSH
24131: LD_INT 110
24133: PUSH
24134: LD_INT 111
24136: PUSH
24137: LD_INT 112
24139: PUSH
24140: LD_INT 113
24142: PUSH
24143: LD_INT 114
24145: PUSH
24146: LD_INT 116
24148: PUSH
24149: LD_INT 117
24151: PUSH
24152: LD_INT 118
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: ST_TO_ADDR
24178: GO 24577
24180: LD_INT 18
24182: DOUBLE
24183: EQUAL
24184: IFTRUE 24188
24186: GO 24336
24188: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24189: LD_ADDR_VAR 0 2
24193: PUSH
24194: LD_INT 2
24196: PUSH
24197: LD_INT 4
24199: PUSH
24200: LD_INT 5
24202: PUSH
24203: LD_INT 7
24205: PUSH
24206: LD_INT 11
24208: PUSH
24209: LD_INT 12
24211: PUSH
24212: LD_INT 15
24214: PUSH
24215: LD_INT 16
24217: PUSH
24218: LD_INT 20
24220: PUSH
24221: LD_INT 21
24223: PUSH
24224: LD_INT 22
24226: PUSH
24227: LD_INT 23
24229: PUSH
24230: LD_INT 25
24232: PUSH
24233: LD_INT 26
24235: PUSH
24236: LD_INT 30
24238: PUSH
24239: LD_INT 31
24241: PUSH
24242: LD_INT 32
24244: PUSH
24245: LD_INT 33
24247: PUSH
24248: LD_INT 34
24250: PUSH
24251: LD_INT 35
24253: PUSH
24254: LD_INT 36
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 101
24282: PUSH
24283: LD_INT 102
24285: PUSH
24286: LD_INT 103
24288: PUSH
24289: LD_INT 106
24291: PUSH
24292: LD_INT 108
24294: PUSH
24295: LD_INT 112
24297: PUSH
24298: LD_INT 113
24300: PUSH
24301: LD_INT 114
24303: PUSH
24304: LD_INT 115
24306: PUSH
24307: LD_INT 116
24309: PUSH
24310: LD_INT 117
24312: PUSH
24313: LD_INT 118
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: ST_TO_ADDR
24334: GO 24577
24336: LD_INT 19
24338: DOUBLE
24339: EQUAL
24340: IFTRUE 24344
24342: GO 24576
24344: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24345: LD_ADDR_VAR 0 2
24349: PUSH
24350: LD_INT 1
24352: PUSH
24353: LD_INT 2
24355: PUSH
24356: LD_INT 3
24358: PUSH
24359: LD_INT 4
24361: PUSH
24362: LD_INT 5
24364: PUSH
24365: LD_INT 6
24367: PUSH
24368: LD_INT 7
24370: PUSH
24371: LD_INT 8
24373: PUSH
24374: LD_INT 9
24376: PUSH
24377: LD_INT 10
24379: PUSH
24380: LD_INT 11
24382: PUSH
24383: LD_INT 12
24385: PUSH
24386: LD_INT 13
24388: PUSH
24389: LD_INT 14
24391: PUSH
24392: LD_INT 15
24394: PUSH
24395: LD_INT 16
24397: PUSH
24398: LD_INT 17
24400: PUSH
24401: LD_INT 18
24403: PUSH
24404: LD_INT 19
24406: PUSH
24407: LD_INT 20
24409: PUSH
24410: LD_INT 21
24412: PUSH
24413: LD_INT 22
24415: PUSH
24416: LD_INT 23
24418: PUSH
24419: LD_INT 24
24421: PUSH
24422: LD_INT 25
24424: PUSH
24425: LD_INT 26
24427: PUSH
24428: LD_INT 27
24430: PUSH
24431: LD_INT 28
24433: PUSH
24434: LD_INT 29
24436: PUSH
24437: LD_INT 30
24439: PUSH
24440: LD_INT 31
24442: PUSH
24443: LD_INT 32
24445: PUSH
24446: LD_INT 33
24448: PUSH
24449: LD_INT 34
24451: PUSH
24452: LD_INT 35
24454: PUSH
24455: LD_INT 36
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 101
24498: PUSH
24499: LD_INT 102
24501: PUSH
24502: LD_INT 103
24504: PUSH
24505: LD_INT 104
24507: PUSH
24508: LD_INT 105
24510: PUSH
24511: LD_INT 106
24513: PUSH
24514: LD_INT 107
24516: PUSH
24517: LD_INT 108
24519: PUSH
24520: LD_INT 109
24522: PUSH
24523: LD_INT 110
24525: PUSH
24526: LD_INT 111
24528: PUSH
24529: LD_INT 112
24531: PUSH
24532: LD_INT 113
24534: PUSH
24535: LD_INT 114
24537: PUSH
24538: LD_INT 115
24540: PUSH
24541: LD_INT 116
24543: PUSH
24544: LD_INT 117
24546: PUSH
24547: LD_INT 118
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: ST_TO_ADDR
24574: GO 24577
24576: POP
// end else
24577: GO 24808
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24579: LD_ADDR_VAR 0 2
24583: PUSH
24584: LD_INT 1
24586: PUSH
24587: LD_INT 2
24589: PUSH
24590: LD_INT 3
24592: PUSH
24593: LD_INT 4
24595: PUSH
24596: LD_INT 5
24598: PUSH
24599: LD_INT 6
24601: PUSH
24602: LD_INT 7
24604: PUSH
24605: LD_INT 8
24607: PUSH
24608: LD_INT 9
24610: PUSH
24611: LD_INT 10
24613: PUSH
24614: LD_INT 11
24616: PUSH
24617: LD_INT 12
24619: PUSH
24620: LD_INT 13
24622: PUSH
24623: LD_INT 14
24625: PUSH
24626: LD_INT 15
24628: PUSH
24629: LD_INT 16
24631: PUSH
24632: LD_INT 17
24634: PUSH
24635: LD_INT 18
24637: PUSH
24638: LD_INT 19
24640: PUSH
24641: LD_INT 20
24643: PUSH
24644: LD_INT 21
24646: PUSH
24647: LD_INT 22
24649: PUSH
24650: LD_INT 23
24652: PUSH
24653: LD_INT 24
24655: PUSH
24656: LD_INT 25
24658: PUSH
24659: LD_INT 26
24661: PUSH
24662: LD_INT 27
24664: PUSH
24665: LD_INT 28
24667: PUSH
24668: LD_INT 29
24670: PUSH
24671: LD_INT 30
24673: PUSH
24674: LD_INT 31
24676: PUSH
24677: LD_INT 32
24679: PUSH
24680: LD_INT 33
24682: PUSH
24683: LD_INT 34
24685: PUSH
24686: LD_INT 35
24688: PUSH
24689: LD_INT 36
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 101
24732: PUSH
24733: LD_INT 102
24735: PUSH
24736: LD_INT 103
24738: PUSH
24739: LD_INT 104
24741: PUSH
24742: LD_INT 105
24744: PUSH
24745: LD_INT 106
24747: PUSH
24748: LD_INT 107
24750: PUSH
24751: LD_INT 108
24753: PUSH
24754: LD_INT 109
24756: PUSH
24757: LD_INT 110
24759: PUSH
24760: LD_INT 111
24762: PUSH
24763: LD_INT 112
24765: PUSH
24766: LD_INT 113
24768: PUSH
24769: LD_INT 114
24771: PUSH
24772: LD_INT 115
24774: PUSH
24775: LD_INT 116
24777: PUSH
24778: LD_INT 117
24780: PUSH
24781: LD_INT 118
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: ST_TO_ADDR
// if result then
24808: LD_VAR 0 2
24812: IFFALSE 25598
// begin normal :=  ;
24814: LD_ADDR_VAR 0 5
24818: PUSH
24819: LD_STRING 
24821: ST_TO_ADDR
// hardcore :=  ;
24822: LD_ADDR_VAR 0 6
24826: PUSH
24827: LD_STRING 
24829: ST_TO_ADDR
// active :=  ;
24830: LD_ADDR_VAR 0 7
24834: PUSH
24835: LD_STRING 
24837: ST_TO_ADDR
// for i = 1 to normalCounter do
24838: LD_ADDR_VAR 0 8
24842: PUSH
24843: DOUBLE
24844: LD_INT 1
24846: DEC
24847: ST_TO_ADDR
24848: LD_EXP 64
24852: PUSH
24853: FOR_TO
24854: IFFALSE 24955
// begin tmp := 0 ;
24856: LD_ADDR_VAR 0 3
24860: PUSH
24861: LD_STRING 0
24863: ST_TO_ADDR
// if result [ 1 ] then
24864: LD_VAR 0 2
24868: PUSH
24869: LD_INT 1
24871: ARRAY
24872: IFFALSE 24937
// if result [ 1 ] [ 1 ] = i then
24874: LD_VAR 0 2
24878: PUSH
24879: LD_INT 1
24881: ARRAY
24882: PUSH
24883: LD_INT 1
24885: ARRAY
24886: PUSH
24887: LD_VAR 0 8
24891: EQUAL
24892: IFFALSE 24937
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24894: LD_ADDR_VAR 0 2
24898: PUSH
24899: LD_VAR 0 2
24903: PPUSH
24904: LD_INT 1
24906: PPUSH
24907: LD_VAR 0 2
24911: PUSH
24912: LD_INT 1
24914: ARRAY
24915: PPUSH
24916: LD_INT 1
24918: PPUSH
24919: CALL_OW 3
24923: PPUSH
24924: CALL_OW 1
24928: ST_TO_ADDR
// tmp := 1 ;
24929: LD_ADDR_VAR 0 3
24933: PUSH
24934: LD_STRING 1
24936: ST_TO_ADDR
// end ; normal := normal & tmp ;
24937: LD_ADDR_VAR 0 5
24941: PUSH
24942: LD_VAR 0 5
24946: PUSH
24947: LD_VAR 0 3
24951: STR
24952: ST_TO_ADDR
// end ;
24953: GO 24853
24955: POP
24956: POP
// for i = 1 to hardcoreCounter do
24957: LD_ADDR_VAR 0 8
24961: PUSH
24962: DOUBLE
24963: LD_INT 1
24965: DEC
24966: ST_TO_ADDR
24967: LD_EXP 65
24971: PUSH
24972: FOR_TO
24973: IFFALSE 25078
// begin tmp := 0 ;
24975: LD_ADDR_VAR 0 3
24979: PUSH
24980: LD_STRING 0
24982: ST_TO_ADDR
// if result [ 2 ] then
24983: LD_VAR 0 2
24987: PUSH
24988: LD_INT 2
24990: ARRAY
24991: IFFALSE 25060
// if result [ 2 ] [ 1 ] = 100 + i then
24993: LD_VAR 0 2
24997: PUSH
24998: LD_INT 2
25000: ARRAY
25001: PUSH
25002: LD_INT 1
25004: ARRAY
25005: PUSH
25006: LD_INT 100
25008: PUSH
25009: LD_VAR 0 8
25013: PLUS
25014: EQUAL
25015: IFFALSE 25060
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25017: LD_ADDR_VAR 0 2
25021: PUSH
25022: LD_VAR 0 2
25026: PPUSH
25027: LD_INT 2
25029: PPUSH
25030: LD_VAR 0 2
25034: PUSH
25035: LD_INT 2
25037: ARRAY
25038: PPUSH
25039: LD_INT 1
25041: PPUSH
25042: CALL_OW 3
25046: PPUSH
25047: CALL_OW 1
25051: ST_TO_ADDR
// tmp := 1 ;
25052: LD_ADDR_VAR 0 3
25056: PUSH
25057: LD_STRING 1
25059: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25060: LD_ADDR_VAR 0 6
25064: PUSH
25065: LD_VAR 0 6
25069: PUSH
25070: LD_VAR 0 3
25074: STR
25075: ST_TO_ADDR
// end ;
25076: GO 24972
25078: POP
25079: POP
// if isGameLoad then
25080: LD_VAR 0 1
25084: IFFALSE 25559
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25086: LD_ADDR_VAR 0 4
25090: PUSH
25091: LD_EXP 68
25095: PUSH
25096: LD_EXP 67
25100: PUSH
25101: LD_EXP 69
25105: PUSH
25106: LD_EXP 66
25110: PUSH
25111: LD_EXP 70
25115: PUSH
25116: LD_EXP 71
25120: PUSH
25121: LD_EXP 72
25125: PUSH
25126: LD_EXP 73
25130: PUSH
25131: LD_EXP 74
25135: PUSH
25136: LD_EXP 75
25140: PUSH
25141: LD_EXP 76
25145: PUSH
25146: LD_EXP 77
25150: PUSH
25151: LD_EXP 78
25155: PUSH
25156: LD_EXP 79
25160: PUSH
25161: LD_EXP 87
25165: PUSH
25166: LD_EXP 88
25170: PUSH
25171: LD_EXP 89
25175: PUSH
25176: LD_EXP 90
25180: PUSH
25181: LD_EXP 92
25185: PUSH
25186: LD_EXP 93
25190: PUSH
25191: LD_EXP 94
25195: PUSH
25196: LD_EXP 97
25200: PUSH
25201: LD_EXP 99
25205: PUSH
25206: LD_EXP 100
25210: PUSH
25211: LD_EXP 101
25215: PUSH
25216: LD_EXP 103
25220: PUSH
25221: LD_EXP 104
25225: PUSH
25226: LD_EXP 107
25230: PUSH
25231: LD_EXP 108
25235: PUSH
25236: LD_EXP 109
25240: PUSH
25241: LD_EXP 110
25245: PUSH
25246: LD_EXP 111
25250: PUSH
25251: LD_EXP 112
25255: PUSH
25256: LD_EXP 113
25260: PUSH
25261: LD_EXP 114
25265: PUSH
25266: LD_EXP 115
25270: PUSH
25271: LD_EXP 80
25275: PUSH
25276: LD_EXP 81
25280: PUSH
25281: LD_EXP 84
25285: PUSH
25286: LD_EXP 85
25290: PUSH
25291: LD_EXP 86
25295: PUSH
25296: LD_EXP 82
25300: PUSH
25301: LD_EXP 83
25305: PUSH
25306: LD_EXP 91
25310: PUSH
25311: LD_EXP 95
25315: PUSH
25316: LD_EXP 96
25320: PUSH
25321: LD_EXP 98
25325: PUSH
25326: LD_EXP 102
25330: PUSH
25331: LD_EXP 105
25335: PUSH
25336: LD_EXP 106
25340: PUSH
25341: LD_EXP 116
25345: PUSH
25346: LD_EXP 117
25350: PUSH
25351: LD_EXP 118
25355: PUSH
25356: LD_EXP 119
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: ST_TO_ADDR
// tmp :=  ;
25417: LD_ADDR_VAR 0 3
25421: PUSH
25422: LD_STRING 
25424: ST_TO_ADDR
// for i = 1 to normalCounter do
25425: LD_ADDR_VAR 0 8
25429: PUSH
25430: DOUBLE
25431: LD_INT 1
25433: DEC
25434: ST_TO_ADDR
25435: LD_EXP 64
25439: PUSH
25440: FOR_TO
25441: IFFALSE 25477
// begin if flags [ i ] then
25443: LD_VAR 0 4
25447: PUSH
25448: LD_VAR 0 8
25452: ARRAY
25453: IFFALSE 25475
// tmp := tmp & i & ; ;
25455: LD_ADDR_VAR 0 3
25459: PUSH
25460: LD_VAR 0 3
25464: PUSH
25465: LD_VAR 0 8
25469: STR
25470: PUSH
25471: LD_STRING ;
25473: STR
25474: ST_TO_ADDR
// end ;
25475: GO 25440
25477: POP
25478: POP
// for i = 1 to hardcoreCounter do
25479: LD_ADDR_VAR 0 8
25483: PUSH
25484: DOUBLE
25485: LD_INT 1
25487: DEC
25488: ST_TO_ADDR
25489: LD_EXP 65
25493: PUSH
25494: FOR_TO
25495: IFFALSE 25541
// begin if flags [ normalCounter + i ] then
25497: LD_VAR 0 4
25501: PUSH
25502: LD_EXP 64
25506: PUSH
25507: LD_VAR 0 8
25511: PLUS
25512: ARRAY
25513: IFFALSE 25539
// tmp := tmp & ( 100 + i ) & ; ;
25515: LD_ADDR_VAR 0 3
25519: PUSH
25520: LD_VAR 0 3
25524: PUSH
25525: LD_INT 100
25527: PUSH
25528: LD_VAR 0 8
25532: PLUS
25533: STR
25534: PUSH
25535: LD_STRING ;
25537: STR
25538: ST_TO_ADDR
// end ;
25539: GO 25494
25541: POP
25542: POP
// if tmp then
25543: LD_VAR 0 3
25547: IFFALSE 25559
// active := tmp ;
25549: LD_ADDR_VAR 0 7
25553: PUSH
25554: LD_VAR 0 3
25558: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25559: LD_STRING getStreamItemsFromMission("
25561: PUSH
25562: LD_VAR 0 5
25566: STR
25567: PUSH
25568: LD_STRING ","
25570: STR
25571: PUSH
25572: LD_VAR 0 6
25576: STR
25577: PUSH
25578: LD_STRING ","
25580: STR
25581: PUSH
25582: LD_VAR 0 7
25586: STR
25587: PUSH
25588: LD_STRING ")
25590: STR
25591: PPUSH
25592: CALL_OW 559
// end else
25596: GO 25605
// ToLua ( getStreamItemsFromMission("","","") ) ;
25598: LD_STRING getStreamItemsFromMission("","","")
25600: PPUSH
25601: CALL_OW 559
// end ;
25605: LD_VAR 0 2
25609: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25610: LD_EXP 63
25614: IFFALSE 25622
25616: PUSH
25617: LD_EXP 68
25621: AND
25622: IFFALSE 25746
25624: GO 25626
25626: DISABLE
25627: LD_INT 0
25629: PPUSH
25630: PPUSH
// begin enable ;
25631: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25632: LD_ADDR_VAR 0 2
25636: PUSH
25637: LD_INT 22
25639: PUSH
25640: LD_OWVAR 2
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 2
25651: PUSH
25652: LD_INT 34
25654: PUSH
25655: LD_INT 7
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 34
25664: PUSH
25665: LD_INT 45
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 34
25674: PUSH
25675: LD_INT 28
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 34
25684: PUSH
25685: LD_INT 47
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PPUSH
25703: CALL_OW 69
25707: ST_TO_ADDR
// if not tmp then
25708: LD_VAR 0 2
25712: NOT
25713: IFFALSE 25717
// exit ;
25715: GO 25746
// for i in tmp do
25717: LD_ADDR_VAR 0 1
25721: PUSH
25722: LD_VAR 0 2
25726: PUSH
25727: FOR_IN
25728: IFFALSE 25744
// begin SetLives ( i , 0 ) ;
25730: LD_VAR 0 1
25734: PPUSH
25735: LD_INT 0
25737: PPUSH
25738: CALL_OW 234
// end ;
25742: GO 25727
25744: POP
25745: POP
// end ;
25746: PPOPN 2
25748: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25749: LD_EXP 63
25753: IFFALSE 25761
25755: PUSH
25756: LD_EXP 69
25760: AND
25761: IFFALSE 25845
25763: GO 25765
25765: DISABLE
25766: LD_INT 0
25768: PPUSH
25769: PPUSH
// begin enable ;
25770: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25771: LD_ADDR_VAR 0 2
25775: PUSH
25776: LD_INT 22
25778: PUSH
25779: LD_OWVAR 2
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 32
25790: PUSH
25791: LD_INT 3
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PPUSH
25802: CALL_OW 69
25806: ST_TO_ADDR
// if not tmp then
25807: LD_VAR 0 2
25811: NOT
25812: IFFALSE 25816
// exit ;
25814: GO 25845
// for i in tmp do
25816: LD_ADDR_VAR 0 1
25820: PUSH
25821: LD_VAR 0 2
25825: PUSH
25826: FOR_IN
25827: IFFALSE 25843
// begin SetLives ( i , 0 ) ;
25829: LD_VAR 0 1
25833: PPUSH
25834: LD_INT 0
25836: PPUSH
25837: CALL_OW 234
// end ;
25841: GO 25826
25843: POP
25844: POP
// end ;
25845: PPOPN 2
25847: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25848: LD_EXP 63
25852: IFFALSE 25860
25854: PUSH
25855: LD_EXP 66
25859: AND
25860: IFFALSE 25953
25862: GO 25864
25864: DISABLE
25865: LD_INT 0
25867: PPUSH
// begin enable ;
25868: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25869: LD_ADDR_VAR 0 1
25873: PUSH
25874: LD_INT 22
25876: PUSH
25877: LD_OWVAR 2
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 2
25888: PUSH
25889: LD_INT 25
25891: PUSH
25892: LD_INT 5
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 25
25901: PUSH
25902: LD_INT 9
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 25
25911: PUSH
25912: LD_INT 8
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PPUSH
25929: CALL_OW 69
25933: PUSH
25934: FOR_IN
25935: IFFALSE 25951
// begin SetClass ( i , 1 ) ;
25937: LD_VAR 0 1
25941: PPUSH
25942: LD_INT 1
25944: PPUSH
25945: CALL_OW 336
// end ;
25949: GO 25934
25951: POP
25952: POP
// end ;
25953: PPOPN 1
25955: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25956: LD_EXP 63
25960: IFFALSE 25968
25962: PUSH
25963: LD_EXP 67
25967: AND
25968: IFFALSE 25980
25970: PUSH
25971: LD_OWVAR 65
25975: PUSH
25976: LD_INT 7
25978: LESS
25979: AND
25980: IFFALSE 25994
25982: GO 25984
25984: DISABLE
// begin enable ;
25985: ENABLE
// game_speed := 7 ;
25986: LD_ADDR_OWVAR 65
25990: PUSH
25991: LD_INT 7
25993: ST_TO_ADDR
// end ;
25994: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25995: LD_EXP 63
25999: IFFALSE 26007
26001: PUSH
26002: LD_EXP 70
26006: AND
26007: IFFALSE 26209
26009: GO 26011
26011: DISABLE
26012: LD_INT 0
26014: PPUSH
26015: PPUSH
26016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26017: LD_ADDR_VAR 0 3
26021: PUSH
26022: LD_INT 81
26024: PUSH
26025: LD_OWVAR 2
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 21
26036: PUSH
26037: LD_INT 1
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PPUSH
26048: CALL_OW 69
26052: ST_TO_ADDR
// if not tmp then
26053: LD_VAR 0 3
26057: NOT
26058: IFFALSE 26062
// exit ;
26060: GO 26209
// if tmp > 5 then
26062: LD_VAR 0 3
26066: PUSH
26067: LD_INT 5
26069: GREATER
26070: IFFALSE 26082
// k := 5 else
26072: LD_ADDR_VAR 0 2
26076: PUSH
26077: LD_INT 5
26079: ST_TO_ADDR
26080: GO 26092
// k := tmp ;
26082: LD_ADDR_VAR 0 2
26086: PUSH
26087: LD_VAR 0 3
26091: ST_TO_ADDR
// for i := 1 to k do
26092: LD_ADDR_VAR 0 1
26096: PUSH
26097: DOUBLE
26098: LD_INT 1
26100: DEC
26101: ST_TO_ADDR
26102: LD_VAR 0 2
26106: PUSH
26107: FOR_TO
26108: IFFALSE 26207
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26110: LD_VAR 0 3
26114: PUSH
26115: LD_VAR 0 1
26119: ARRAY
26120: PPUSH
26121: LD_VAR 0 1
26125: PUSH
26126: LD_INT 4
26128: MOD
26129: PUSH
26130: LD_INT 1
26132: PLUS
26133: PPUSH
26134: CALL_OW 259
26138: PUSH
26139: LD_INT 10
26141: LESS
26142: IFFALSE 26205
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26144: LD_VAR 0 3
26148: PUSH
26149: LD_VAR 0 1
26153: ARRAY
26154: PPUSH
26155: LD_VAR 0 1
26159: PUSH
26160: LD_INT 4
26162: MOD
26163: PUSH
26164: LD_INT 1
26166: PLUS
26167: PPUSH
26168: LD_VAR 0 3
26172: PUSH
26173: LD_VAR 0 1
26177: ARRAY
26178: PPUSH
26179: LD_VAR 0 1
26183: PUSH
26184: LD_INT 4
26186: MOD
26187: PUSH
26188: LD_INT 1
26190: PLUS
26191: PPUSH
26192: CALL_OW 259
26196: PUSH
26197: LD_INT 1
26199: PLUS
26200: PPUSH
26201: CALL_OW 237
26205: GO 26107
26207: POP
26208: POP
// end ;
26209: PPOPN 3
26211: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26212: LD_EXP 63
26216: IFFALSE 26224
26218: PUSH
26219: LD_EXP 71
26223: AND
26224: IFFALSE 26244
26226: GO 26228
26228: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26229: LD_INT 4
26231: PPUSH
26232: LD_OWVAR 2
26236: PPUSH
26237: LD_INT 0
26239: PPUSH
26240: CALL_OW 324
26244: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26245: LD_EXP 63
26249: IFFALSE 26257
26251: PUSH
26252: LD_EXP 100
26256: AND
26257: IFFALSE 26277
26259: GO 26261
26261: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26262: LD_INT 19
26264: PPUSH
26265: LD_OWVAR 2
26269: PPUSH
26270: LD_INT 0
26272: PPUSH
26273: CALL_OW 324
26277: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26278: LD_EXP 63
26282: IFFALSE 26290
26284: PUSH
26285: LD_EXP 72
26289: AND
26290: IFFALSE 26392
26292: GO 26294
26294: DISABLE
26295: LD_INT 0
26297: PPUSH
26298: PPUSH
// begin enable ;
26299: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26300: LD_ADDR_VAR 0 2
26304: PUSH
26305: LD_INT 22
26307: PUSH
26308: LD_OWVAR 2
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 2
26319: PUSH
26320: LD_INT 34
26322: PUSH
26323: LD_INT 11
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 34
26332: PUSH
26333: LD_INT 30
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: LIST
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PPUSH
26349: CALL_OW 69
26353: ST_TO_ADDR
// if not tmp then
26354: LD_VAR 0 2
26358: NOT
26359: IFFALSE 26363
// exit ;
26361: GO 26392
// for i in tmp do
26363: LD_ADDR_VAR 0 1
26367: PUSH
26368: LD_VAR 0 2
26372: PUSH
26373: FOR_IN
26374: IFFALSE 26390
// begin SetLives ( i , 0 ) ;
26376: LD_VAR 0 1
26380: PPUSH
26381: LD_INT 0
26383: PPUSH
26384: CALL_OW 234
// end ;
26388: GO 26373
26390: POP
26391: POP
// end ;
26392: PPOPN 2
26394: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26395: LD_EXP 63
26399: IFFALSE 26407
26401: PUSH
26402: LD_EXP 73
26406: AND
26407: IFFALSE 26427
26409: GO 26411
26411: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26412: LD_INT 32
26414: PPUSH
26415: LD_OWVAR 2
26419: PPUSH
26420: LD_INT 0
26422: PPUSH
26423: CALL_OW 324
26427: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26428: LD_EXP 63
26432: IFFALSE 26440
26434: PUSH
26435: LD_EXP 74
26439: AND
26440: IFFALSE 26623
26442: GO 26444
26444: DISABLE
26445: LD_INT 0
26447: PPUSH
26448: PPUSH
26449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26450: LD_ADDR_VAR 0 2
26454: PUSH
26455: LD_INT 22
26457: PUSH
26458: LD_OWVAR 2
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 33
26469: PUSH
26470: LD_INT 3
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PPUSH
26481: CALL_OW 69
26485: ST_TO_ADDR
// if not tmp then
26486: LD_VAR 0 2
26490: NOT
26491: IFFALSE 26495
// exit ;
26493: GO 26623
// side := 0 ;
26495: LD_ADDR_VAR 0 3
26499: PUSH
26500: LD_INT 0
26502: ST_TO_ADDR
// for i := 1 to 8 do
26503: LD_ADDR_VAR 0 1
26507: PUSH
26508: DOUBLE
26509: LD_INT 1
26511: DEC
26512: ST_TO_ADDR
26513: LD_INT 8
26515: PUSH
26516: FOR_TO
26517: IFFALSE 26567
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26519: LD_OWVAR 2
26523: PUSH
26524: LD_VAR 0 1
26528: NONEQUAL
26529: IFFALSE 26551
26531: PUSH
26532: LD_OWVAR 2
26536: PPUSH
26537: LD_VAR 0 1
26541: PPUSH
26542: CALL_OW 81
26546: PUSH
26547: LD_INT 2
26549: EQUAL
26550: AND
26551: IFFALSE 26565
// begin side := i ;
26553: LD_ADDR_VAR 0 3
26557: PUSH
26558: LD_VAR 0 1
26562: ST_TO_ADDR
// break ;
26563: GO 26567
// end ;
26565: GO 26516
26567: POP
26568: POP
// if not side then
26569: LD_VAR 0 3
26573: NOT
26574: IFFALSE 26578
// exit ;
26576: GO 26623
// for i := 1 to tmp do
26578: LD_ADDR_VAR 0 1
26582: PUSH
26583: DOUBLE
26584: LD_INT 1
26586: DEC
26587: ST_TO_ADDR
26588: LD_VAR 0 2
26592: PUSH
26593: FOR_TO
26594: IFFALSE 26621
// if Prob ( 60 ) then
26596: LD_INT 60
26598: PPUSH
26599: CALL_OW 13
26603: IFFALSE 26619
// SetSide ( i , side ) ;
26605: LD_VAR 0 1
26609: PPUSH
26610: LD_VAR 0 3
26614: PPUSH
26615: CALL_OW 235
26619: GO 26593
26621: POP
26622: POP
// end ;
26623: PPOPN 3
26625: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26626: LD_EXP 63
26630: IFFALSE 26638
26632: PUSH
26633: LD_EXP 76
26637: AND
26638: IFFALSE 26757
26640: GO 26642
26642: DISABLE
26643: LD_INT 0
26645: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26646: LD_ADDR_VAR 0 1
26650: PUSH
26651: LD_INT 22
26653: PUSH
26654: LD_OWVAR 2
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 21
26665: PUSH
26666: LD_INT 1
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 3
26675: PUSH
26676: LD_INT 23
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: LIST
26694: PPUSH
26695: CALL_OW 69
26699: PUSH
26700: FOR_IN
26701: IFFALSE 26755
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26703: LD_VAR 0 1
26707: PPUSH
26708: CALL_OW 257
26712: PUSH
26713: LD_INT 1
26715: PUSH
26716: LD_INT 2
26718: PUSH
26719: LD_INT 3
26721: PUSH
26722: LD_INT 4
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: IN
26731: IFFALSE 26753
// SetClass ( un , rand ( 1 , 4 ) ) ;
26733: LD_VAR 0 1
26737: PPUSH
26738: LD_INT 1
26740: PPUSH
26741: LD_INT 4
26743: PPUSH
26744: CALL_OW 12
26748: PPUSH
26749: CALL_OW 336
26753: GO 26700
26755: POP
26756: POP
// end ;
26757: PPOPN 1
26759: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26760: LD_EXP 63
26764: IFFALSE 26772
26766: PUSH
26767: LD_EXP 75
26771: AND
26772: IFFALSE 26851
26774: GO 26776
26776: DISABLE
26777: LD_INT 0
26779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26780: LD_ADDR_VAR 0 1
26784: PUSH
26785: LD_INT 22
26787: PUSH
26788: LD_OWVAR 2
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 21
26799: PUSH
26800: LD_INT 3
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PPUSH
26811: CALL_OW 69
26815: ST_TO_ADDR
// if not tmp then
26816: LD_VAR 0 1
26820: NOT
26821: IFFALSE 26825
// exit ;
26823: GO 26851
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26825: LD_VAR 0 1
26829: PUSH
26830: LD_INT 1
26832: PPUSH
26833: LD_VAR 0 1
26837: PPUSH
26838: CALL_OW 12
26842: ARRAY
26843: PPUSH
26844: LD_INT 100
26846: PPUSH
26847: CALL_OW 234
// end ;
26851: PPOPN 1
26853: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26854: LD_EXP 63
26858: IFFALSE 26866
26860: PUSH
26861: LD_EXP 77
26865: AND
26866: IFFALSE 26964
26868: GO 26870
26870: DISABLE
26871: LD_INT 0
26873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26874: LD_ADDR_VAR 0 1
26878: PUSH
26879: LD_INT 22
26881: PUSH
26882: LD_OWVAR 2
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 21
26893: PUSH
26894: LD_INT 1
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PPUSH
26905: CALL_OW 69
26909: ST_TO_ADDR
// if not tmp then
26910: LD_VAR 0 1
26914: NOT
26915: IFFALSE 26919
// exit ;
26917: GO 26964
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26919: LD_VAR 0 1
26923: PUSH
26924: LD_INT 1
26926: PPUSH
26927: LD_VAR 0 1
26931: PPUSH
26932: CALL_OW 12
26936: ARRAY
26937: PPUSH
26938: LD_INT 1
26940: PPUSH
26941: LD_INT 4
26943: PPUSH
26944: CALL_OW 12
26948: PPUSH
26949: LD_INT 3000
26951: PPUSH
26952: LD_INT 9000
26954: PPUSH
26955: CALL_OW 12
26959: PPUSH
26960: CALL_OW 492
// end ;
26964: PPOPN 1
26966: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26967: LD_EXP 63
26971: IFFALSE 26979
26973: PUSH
26974: LD_EXP 78
26978: AND
26979: IFFALSE 26999
26981: GO 26983
26983: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26984: LD_INT 1
26986: PPUSH
26987: LD_OWVAR 2
26991: PPUSH
26992: LD_INT 0
26994: PPUSH
26995: CALL_OW 324
26999: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27000: LD_EXP 63
27004: IFFALSE 27012
27006: PUSH
27007: LD_EXP 79
27011: AND
27012: IFFALSE 27095
27014: GO 27016
27016: DISABLE
27017: LD_INT 0
27019: PPUSH
27020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27021: LD_ADDR_VAR 0 2
27025: PUSH
27026: LD_INT 22
27028: PUSH
27029: LD_OWVAR 2
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 21
27040: PUSH
27041: LD_INT 3
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PPUSH
27052: CALL_OW 69
27056: ST_TO_ADDR
// if not tmp then
27057: LD_VAR 0 2
27061: NOT
27062: IFFALSE 27066
// exit ;
27064: GO 27095
// for i in tmp do
27066: LD_ADDR_VAR 0 1
27070: PUSH
27071: LD_VAR 0 2
27075: PUSH
27076: FOR_IN
27077: IFFALSE 27093
// SetBLevel ( i , 10 ) ;
27079: LD_VAR 0 1
27083: PPUSH
27084: LD_INT 10
27086: PPUSH
27087: CALL_OW 241
27091: GO 27076
27093: POP
27094: POP
// end ;
27095: PPOPN 2
27097: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27098: LD_EXP 63
27102: IFFALSE 27110
27104: PUSH
27105: LD_EXP 80
27109: AND
27110: IFFALSE 27221
27112: GO 27114
27114: DISABLE
27115: LD_INT 0
27117: PPUSH
27118: PPUSH
27119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27120: LD_ADDR_VAR 0 3
27124: PUSH
27125: LD_INT 22
27127: PUSH
27128: LD_OWVAR 2
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 25
27139: PUSH
27140: LD_INT 1
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PPUSH
27151: CALL_OW 69
27155: ST_TO_ADDR
// if not tmp then
27156: LD_VAR 0 3
27160: NOT
27161: IFFALSE 27165
// exit ;
27163: GO 27221
// un := tmp [ rand ( 1 , tmp ) ] ;
27165: LD_ADDR_VAR 0 2
27169: PUSH
27170: LD_VAR 0 3
27174: PUSH
27175: LD_INT 1
27177: PPUSH
27178: LD_VAR 0 3
27182: PPUSH
27183: CALL_OW 12
27187: ARRAY
27188: ST_TO_ADDR
// if Crawls ( un ) then
27189: LD_VAR 0 2
27193: PPUSH
27194: CALL_OW 318
27198: IFFALSE 27209
// ComWalk ( un ) ;
27200: LD_VAR 0 2
27204: PPUSH
27205: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27209: LD_VAR 0 2
27213: PPUSH
27214: LD_INT 5
27216: PPUSH
27217: CALL_OW 336
// end ;
27221: PPOPN 3
27223: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27224: LD_EXP 63
27228: IFFALSE 27236
27230: PUSH
27231: LD_EXP 81
27235: AND
27236: IFFALSE 27248
27238: PUSH
27239: LD_OWVAR 67
27243: PUSH
27244: LD_INT 4
27246: LESS
27247: AND
27248: IFFALSE 27267
27250: GO 27252
27252: DISABLE
// begin Difficulty := Difficulty + 1 ;
27253: LD_ADDR_OWVAR 67
27257: PUSH
27258: LD_OWVAR 67
27262: PUSH
27263: LD_INT 1
27265: PLUS
27266: ST_TO_ADDR
// end ;
27267: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27268: LD_EXP 63
27272: IFFALSE 27280
27274: PUSH
27275: LD_EXP 82
27279: AND
27280: IFFALSE 27383
27282: GO 27284
27284: DISABLE
27285: LD_INT 0
27287: PPUSH
// begin for i := 1 to 5 do
27288: LD_ADDR_VAR 0 1
27292: PUSH
27293: DOUBLE
27294: LD_INT 1
27296: DEC
27297: ST_TO_ADDR
27298: LD_INT 5
27300: PUSH
27301: FOR_TO
27302: IFFALSE 27381
// begin uc_nation := nation_nature ;
27304: LD_ADDR_OWVAR 21
27308: PUSH
27309: LD_INT 0
27311: ST_TO_ADDR
// uc_side := 0 ;
27312: LD_ADDR_OWVAR 20
27316: PUSH
27317: LD_INT 0
27319: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27320: LD_ADDR_OWVAR 29
27324: PUSH
27325: LD_INT 12
27327: PUSH
27328: LD_INT 12
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: ST_TO_ADDR
// hc_agressivity := 20 ;
27335: LD_ADDR_OWVAR 35
27339: PUSH
27340: LD_INT 20
27342: ST_TO_ADDR
// hc_class := class_tiger ;
27343: LD_ADDR_OWVAR 28
27347: PUSH
27348: LD_INT 14
27350: ST_TO_ADDR
// hc_gallery :=  ;
27351: LD_ADDR_OWVAR 33
27355: PUSH
27356: LD_STRING 
27358: ST_TO_ADDR
// hc_name :=  ;
27359: LD_ADDR_OWVAR 26
27363: PUSH
27364: LD_STRING 
27366: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27367: CALL_OW 44
27371: PPUSH
27372: LD_INT 0
27374: PPUSH
27375: CALL_OW 51
// end ;
27379: GO 27301
27381: POP
27382: POP
// end ;
27383: PPOPN 1
27385: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27386: LD_EXP 63
27390: IFFALSE 27398
27392: PUSH
27393: LD_EXP 83
27397: AND
27398: IFFALSE 27407
27400: GO 27402
27402: DISABLE
// StreamSibBomb ;
27403: CALL 27408 0 0
27407: END
// export function StreamSibBomb ; var i , x , y ; begin
27408: LD_INT 0
27410: PPUSH
27411: PPUSH
27412: PPUSH
27413: PPUSH
// result := false ;
27414: LD_ADDR_VAR 0 1
27418: PUSH
27419: LD_INT 0
27421: ST_TO_ADDR
// for i := 1 to 16 do
27422: LD_ADDR_VAR 0 2
27426: PUSH
27427: DOUBLE
27428: LD_INT 1
27430: DEC
27431: ST_TO_ADDR
27432: LD_INT 16
27434: PUSH
27435: FOR_TO
27436: IFFALSE 27635
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27438: LD_ADDR_VAR 0 3
27442: PUSH
27443: LD_INT 10
27445: PUSH
27446: LD_INT 20
27448: PUSH
27449: LD_INT 30
27451: PUSH
27452: LD_INT 40
27454: PUSH
27455: LD_INT 50
27457: PUSH
27458: LD_INT 60
27460: PUSH
27461: LD_INT 70
27463: PUSH
27464: LD_INT 80
27466: PUSH
27467: LD_INT 90
27469: PUSH
27470: LD_INT 100
27472: PUSH
27473: LD_INT 110
27475: PUSH
27476: LD_INT 120
27478: PUSH
27479: LD_INT 130
27481: PUSH
27482: LD_INT 140
27484: PUSH
27485: LD_INT 150
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 1
27507: PPUSH
27508: LD_INT 15
27510: PPUSH
27511: CALL_OW 12
27515: ARRAY
27516: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27517: LD_ADDR_VAR 0 4
27521: PUSH
27522: LD_INT 10
27524: PUSH
27525: LD_INT 20
27527: PUSH
27528: LD_INT 30
27530: PUSH
27531: LD_INT 40
27533: PUSH
27534: LD_INT 50
27536: PUSH
27537: LD_INT 60
27539: PUSH
27540: LD_INT 70
27542: PUSH
27543: LD_INT 80
27545: PUSH
27546: LD_INT 90
27548: PUSH
27549: LD_INT 100
27551: PUSH
27552: LD_INT 110
27554: PUSH
27555: LD_INT 120
27557: PUSH
27558: LD_INT 130
27560: PUSH
27561: LD_INT 140
27563: PUSH
27564: LD_INT 150
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 1
27586: PPUSH
27587: LD_INT 15
27589: PPUSH
27590: CALL_OW 12
27594: ARRAY
27595: ST_TO_ADDR
// if ValidHex ( x , y ) then
27596: LD_VAR 0 3
27600: PPUSH
27601: LD_VAR 0 4
27605: PPUSH
27606: CALL_OW 488
27610: IFFALSE 27633
// begin result := [ x , y ] ;
27612: LD_ADDR_VAR 0 1
27616: PUSH
27617: LD_VAR 0 3
27621: PUSH
27622: LD_VAR 0 4
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: ST_TO_ADDR
// break ;
27631: GO 27635
// end ; end ;
27633: GO 27435
27635: POP
27636: POP
// if result then
27637: LD_VAR 0 1
27641: IFFALSE 27701
// begin ToLua ( playSibBomb() ) ;
27643: LD_STRING playSibBomb()
27645: PPUSH
27646: CALL_OW 559
// wait ( 0 0$14 ) ;
27650: LD_INT 490
27652: PPUSH
27653: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27657: LD_VAR 0 1
27661: PUSH
27662: LD_INT 1
27664: ARRAY
27665: PPUSH
27666: LD_VAR 0 1
27670: PUSH
27671: LD_INT 2
27673: ARRAY
27674: PPUSH
27675: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27679: LD_VAR 0 1
27683: PUSH
27684: LD_INT 1
27686: ARRAY
27687: PPUSH
27688: LD_VAR 0 1
27692: PUSH
27693: LD_INT 2
27695: ARRAY
27696: PPUSH
27697: CALL_OW 429
// end ; end ;
27701: LD_VAR 0 1
27705: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27706: LD_EXP 63
27710: IFFALSE 27718
27712: PUSH
27713: LD_EXP 85
27717: AND
27718: IFFALSE 27730
27720: GO 27722
27722: DISABLE
// YouLost (  ) ;
27723: LD_STRING 
27725: PPUSH
27726: CALL_OW 104
27730: END
// every 0 0$1 trigger StreamModeActive and sFog do
27731: LD_EXP 63
27735: IFFALSE 27743
27737: PUSH
27738: LD_EXP 84
27742: AND
27743: IFFALSE 27757
27745: GO 27747
27747: DISABLE
// FogOff ( your_side ) ;
27748: LD_OWVAR 2
27752: PPUSH
27753: CALL_OW 344
27757: END
// every 0 0$1 trigger StreamModeActive and sSun do
27758: LD_EXP 63
27762: IFFALSE 27770
27764: PUSH
27765: LD_EXP 86
27769: AND
27770: IFFALSE 27798
27772: GO 27774
27774: DISABLE
// begin solar_recharge_percent := 0 ;
27775: LD_ADDR_OWVAR 79
27779: PUSH
27780: LD_INT 0
27782: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27783: LD_INT 10500
27785: PPUSH
27786: CALL_OW 67
// solar_recharge_percent := 100 ;
27790: LD_ADDR_OWVAR 79
27794: PUSH
27795: LD_INT 100
27797: ST_TO_ADDR
// end ;
27798: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27799: LD_EXP 63
27803: IFFALSE 27811
27805: PUSH
27806: LD_EXP 87
27810: AND
27811: IFFALSE 28050
27813: GO 27815
27815: DISABLE
27816: LD_INT 0
27818: PPUSH
27819: PPUSH
27820: PPUSH
// begin tmp := [ ] ;
27821: LD_ADDR_VAR 0 3
27825: PUSH
27826: EMPTY
27827: ST_TO_ADDR
// for i := 1 to 6 do
27828: LD_ADDR_VAR 0 1
27832: PUSH
27833: DOUBLE
27834: LD_INT 1
27836: DEC
27837: ST_TO_ADDR
27838: LD_INT 6
27840: PUSH
27841: FOR_TO
27842: IFFALSE 27947
// begin uc_nation := nation_nature ;
27844: LD_ADDR_OWVAR 21
27848: PUSH
27849: LD_INT 0
27851: ST_TO_ADDR
// uc_side := 0 ;
27852: LD_ADDR_OWVAR 20
27856: PUSH
27857: LD_INT 0
27859: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27860: LD_ADDR_OWVAR 29
27864: PUSH
27865: LD_INT 12
27867: PUSH
27868: LD_INT 12
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: ST_TO_ADDR
// hc_agressivity := 20 ;
27875: LD_ADDR_OWVAR 35
27879: PUSH
27880: LD_INT 20
27882: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27883: LD_ADDR_OWVAR 28
27887: PUSH
27888: LD_INT 17
27890: ST_TO_ADDR
// hc_gallery :=  ;
27891: LD_ADDR_OWVAR 33
27895: PUSH
27896: LD_STRING 
27898: ST_TO_ADDR
// hc_name :=  ;
27899: LD_ADDR_OWVAR 26
27903: PUSH
27904: LD_STRING 
27906: ST_TO_ADDR
// un := CreateHuman ;
27907: LD_ADDR_VAR 0 2
27911: PUSH
27912: CALL_OW 44
27916: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27917: LD_VAR 0 2
27921: PPUSH
27922: LD_INT 1
27924: PPUSH
27925: CALL_OW 51
// tmp := tmp ^ un ;
27929: LD_ADDR_VAR 0 3
27933: PUSH
27934: LD_VAR 0 3
27938: PUSH
27939: LD_VAR 0 2
27943: ADD
27944: ST_TO_ADDR
// end ;
27945: GO 27841
27947: POP
27948: POP
// repeat wait ( 0 0$1 ) ;
27949: LD_INT 35
27951: PPUSH
27952: CALL_OW 67
// for un in tmp do
27956: LD_ADDR_VAR 0 2
27960: PUSH
27961: LD_VAR 0 3
27965: PUSH
27966: FOR_IN
27967: IFFALSE 28041
// begin if IsDead ( un ) then
27969: LD_VAR 0 2
27973: PPUSH
27974: CALL_OW 301
27978: IFFALSE 27998
// begin tmp := tmp diff un ;
27980: LD_ADDR_VAR 0 3
27984: PUSH
27985: LD_VAR 0 3
27989: PUSH
27990: LD_VAR 0 2
27994: DIFF
27995: ST_TO_ADDR
// continue ;
27996: GO 27966
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27998: LD_VAR 0 2
28002: PPUSH
28003: LD_INT 3
28005: PUSH
28006: LD_INT 22
28008: PUSH
28009: LD_INT 0
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PPUSH
28020: CALL_OW 69
28024: PPUSH
28025: LD_VAR 0 2
28029: PPUSH
28030: CALL_OW 74
28034: PPUSH
28035: CALL_OW 115
// end ;
28039: GO 27966
28041: POP
28042: POP
// until not tmp ;
28043: LD_VAR 0 3
28047: NOT
28048: IFFALSE 27949
// end ;
28050: PPOPN 3
28052: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28053: LD_EXP 63
28057: IFFALSE 28065
28059: PUSH
28060: LD_EXP 88
28064: AND
28065: IFFALSE 28119
28067: GO 28069
28069: DISABLE
// begin ToLua ( displayTroll(); ) ;
28070: LD_STRING displayTroll();
28072: PPUSH
28073: CALL_OW 559
// wait ( 3 3$00 ) ;
28077: LD_INT 6300
28079: PPUSH
28080: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28084: LD_STRING hideTroll();
28086: PPUSH
28087: CALL_OW 559
// wait ( 1 1$00 ) ;
28091: LD_INT 2100
28093: PPUSH
28094: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28098: LD_STRING displayTroll();
28100: PPUSH
28101: CALL_OW 559
// wait ( 1 1$00 ) ;
28105: LD_INT 2100
28107: PPUSH
28108: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28112: LD_STRING hideTroll();
28114: PPUSH
28115: CALL_OW 559
// end ;
28119: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28120: LD_EXP 63
28124: IFFALSE 28132
28126: PUSH
28127: LD_EXP 89
28131: AND
28132: IFFALSE 28195
28134: GO 28136
28136: DISABLE
28137: LD_INT 0
28139: PPUSH
// begin p := 0 ;
28140: LD_ADDR_VAR 0 1
28144: PUSH
28145: LD_INT 0
28147: ST_TO_ADDR
// repeat game_speed := 1 ;
28148: LD_ADDR_OWVAR 65
28152: PUSH
28153: LD_INT 1
28155: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28156: LD_INT 35
28158: PPUSH
28159: CALL_OW 67
// p := p + 1 ;
28163: LD_ADDR_VAR 0 1
28167: PUSH
28168: LD_VAR 0 1
28172: PUSH
28173: LD_INT 1
28175: PLUS
28176: ST_TO_ADDR
// until p >= 60 ;
28177: LD_VAR 0 1
28181: PUSH
28182: LD_INT 60
28184: GREATEREQUAL
28185: IFFALSE 28148
// game_speed := 4 ;
28187: LD_ADDR_OWVAR 65
28191: PUSH
28192: LD_INT 4
28194: ST_TO_ADDR
// end ;
28195: PPOPN 1
28197: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28198: LD_EXP 63
28202: IFFALSE 28210
28204: PUSH
28205: LD_EXP 90
28209: AND
28210: IFFALSE 28356
28212: GO 28214
28214: DISABLE
28215: LD_INT 0
28217: PPUSH
28218: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28219: LD_ADDR_VAR 0 1
28223: PUSH
28224: LD_INT 22
28226: PUSH
28227: LD_OWVAR 2
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 2
28238: PUSH
28239: LD_INT 30
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 30
28251: PUSH
28252: LD_INT 1
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: LIST
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PPUSH
28268: CALL_OW 69
28272: ST_TO_ADDR
// if not depot then
28273: LD_VAR 0 1
28277: NOT
28278: IFFALSE 28282
// exit ;
28280: GO 28356
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28282: LD_ADDR_VAR 0 2
28286: PUSH
28287: LD_VAR 0 1
28291: PUSH
28292: LD_INT 1
28294: PPUSH
28295: LD_VAR 0 1
28299: PPUSH
28300: CALL_OW 12
28304: ARRAY
28305: PPUSH
28306: CALL_OW 274
28310: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28311: LD_VAR 0 2
28315: PPUSH
28316: LD_INT 1
28318: PPUSH
28319: LD_INT 0
28321: PPUSH
28322: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28326: LD_VAR 0 2
28330: PPUSH
28331: LD_INT 2
28333: PPUSH
28334: LD_INT 0
28336: PPUSH
28337: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28341: LD_VAR 0 2
28345: PPUSH
28346: LD_INT 3
28348: PPUSH
28349: LD_INT 0
28351: PPUSH
28352: CALL_OW 277
// end ;
28356: PPOPN 2
28358: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28359: LD_EXP 63
28363: IFFALSE 28371
28365: PUSH
28366: LD_EXP 91
28370: AND
28371: IFFALSE 28468
28373: GO 28375
28375: DISABLE
28376: LD_INT 0
28378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28379: LD_ADDR_VAR 0 1
28383: PUSH
28384: LD_INT 22
28386: PUSH
28387: LD_OWVAR 2
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 21
28398: PUSH
28399: LD_INT 1
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 3
28408: PUSH
28409: LD_INT 23
28411: PUSH
28412: LD_INT 0
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: LIST
28427: PPUSH
28428: CALL_OW 69
28432: ST_TO_ADDR
// if not tmp then
28433: LD_VAR 0 1
28437: NOT
28438: IFFALSE 28442
// exit ;
28440: GO 28468
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28442: LD_VAR 0 1
28446: PUSH
28447: LD_INT 1
28449: PPUSH
28450: LD_VAR 0 1
28454: PPUSH
28455: CALL_OW 12
28459: ARRAY
28460: PPUSH
28461: LD_INT 200
28463: PPUSH
28464: CALL_OW 234
// end ;
28468: PPOPN 1
28470: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28471: LD_EXP 63
28475: IFFALSE 28483
28477: PUSH
28478: LD_EXP 92
28482: AND
28483: IFFALSE 28562
28485: GO 28487
28487: DISABLE
28488: LD_INT 0
28490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28491: LD_ADDR_VAR 0 1
28495: PUSH
28496: LD_INT 22
28498: PUSH
28499: LD_OWVAR 2
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 21
28510: PUSH
28511: LD_INT 2
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PPUSH
28522: CALL_OW 69
28526: ST_TO_ADDR
// if not tmp then
28527: LD_VAR 0 1
28531: NOT
28532: IFFALSE 28536
// exit ;
28534: GO 28562
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28536: LD_VAR 0 1
28540: PUSH
28541: LD_INT 1
28543: PPUSH
28544: LD_VAR 0 1
28548: PPUSH
28549: CALL_OW 12
28553: ARRAY
28554: PPUSH
28555: LD_INT 60
28557: PPUSH
28558: CALL_OW 234
// end ;
28562: PPOPN 1
28564: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28565: LD_EXP 63
28569: IFFALSE 28577
28571: PUSH
28572: LD_EXP 93
28576: AND
28577: IFFALSE 28676
28579: GO 28581
28581: DISABLE
28582: LD_INT 0
28584: PPUSH
28585: PPUSH
// begin enable ;
28586: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28587: LD_ADDR_VAR 0 1
28591: PUSH
28592: LD_INT 22
28594: PUSH
28595: LD_OWVAR 2
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 61
28606: PUSH
28607: EMPTY
28608: LIST
28609: PUSH
28610: LD_INT 33
28612: PUSH
28613: LD_INT 2
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: LIST
28624: PPUSH
28625: CALL_OW 69
28629: ST_TO_ADDR
// if not tmp then
28630: LD_VAR 0 1
28634: NOT
28635: IFFALSE 28639
// exit ;
28637: GO 28676
// for i in tmp do
28639: LD_ADDR_VAR 0 2
28643: PUSH
28644: LD_VAR 0 1
28648: PUSH
28649: FOR_IN
28650: IFFALSE 28674
// if IsControledBy ( i ) then
28652: LD_VAR 0 2
28656: PPUSH
28657: CALL_OW 312
28661: IFFALSE 28672
// ComUnlink ( i ) ;
28663: LD_VAR 0 2
28667: PPUSH
28668: CALL_OW 136
28672: GO 28649
28674: POP
28675: POP
// end ;
28676: PPOPN 2
28678: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28679: LD_EXP 63
28683: IFFALSE 28691
28685: PUSH
28686: LD_EXP 94
28690: AND
28691: IFFALSE 28831
28693: GO 28695
28695: DISABLE
28696: LD_INT 0
28698: PPUSH
28699: PPUSH
// begin ToLua ( displayPowell(); ) ;
28700: LD_STRING displayPowell();
28702: PPUSH
28703: CALL_OW 559
// uc_side := 0 ;
28707: LD_ADDR_OWVAR 20
28711: PUSH
28712: LD_INT 0
28714: ST_TO_ADDR
// uc_nation := 2 ;
28715: LD_ADDR_OWVAR 21
28719: PUSH
28720: LD_INT 2
28722: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28723: LD_ADDR_OWVAR 37
28727: PUSH
28728: LD_INT 14
28730: ST_TO_ADDR
// vc_engine := engine_siberite ;
28731: LD_ADDR_OWVAR 39
28735: PUSH
28736: LD_INT 3
28738: ST_TO_ADDR
// vc_control := control_apeman ;
28739: LD_ADDR_OWVAR 38
28743: PUSH
28744: LD_INT 5
28746: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28747: LD_ADDR_OWVAR 40
28751: PUSH
28752: LD_INT 29
28754: ST_TO_ADDR
// un := CreateVehicle ;
28755: LD_ADDR_VAR 0 2
28759: PUSH
28760: CALL_OW 45
28764: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28765: LD_VAR 0 2
28769: PPUSH
28770: LD_INT 1
28772: PPUSH
28773: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28777: LD_INT 35
28779: PPUSH
28780: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28784: LD_VAR 0 2
28788: PPUSH
28789: LD_INT 22
28791: PUSH
28792: LD_OWVAR 2
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PPUSH
28801: CALL_OW 69
28805: PPUSH
28806: LD_VAR 0 2
28810: PPUSH
28811: CALL_OW 74
28815: PPUSH
28816: CALL_OW 115
// until IsDead ( un ) ;
28820: LD_VAR 0 2
28824: PPUSH
28825: CALL_OW 301
28829: IFFALSE 28777
// end ;
28831: PPOPN 2
28833: END
// every 0 0$1 trigger StreamModeActive and sStu do
28834: LD_EXP 63
28838: IFFALSE 28846
28840: PUSH
28841: LD_EXP 102
28845: AND
28846: IFFALSE 28862
28848: GO 28850
28850: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28851: LD_STRING displayStucuk();
28853: PPUSH
28854: CALL_OW 559
// ResetFog ;
28858: CALL_OW 335
// end ;
28862: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28863: LD_EXP 63
28867: IFFALSE 28875
28869: PUSH
28870: LD_EXP 95
28874: AND
28875: IFFALSE 29016
28877: GO 28879
28879: DISABLE
28880: LD_INT 0
28882: PPUSH
28883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28884: LD_ADDR_VAR 0 2
28888: PUSH
28889: LD_INT 22
28891: PUSH
28892: LD_OWVAR 2
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 21
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PPUSH
28915: CALL_OW 69
28919: ST_TO_ADDR
// if not tmp then
28920: LD_VAR 0 2
28924: NOT
28925: IFFALSE 28929
// exit ;
28927: GO 29016
// un := tmp [ rand ( 1 , tmp ) ] ;
28929: LD_ADDR_VAR 0 1
28933: PUSH
28934: LD_VAR 0 2
28938: PUSH
28939: LD_INT 1
28941: PPUSH
28942: LD_VAR 0 2
28946: PPUSH
28947: CALL_OW 12
28951: ARRAY
28952: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28953: LD_VAR 0 1
28957: PPUSH
28958: LD_INT 0
28960: PPUSH
28961: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28965: LD_VAR 0 1
28969: PPUSH
28970: LD_OWVAR 3
28974: PUSH
28975: LD_VAR 0 1
28979: DIFF
28980: PPUSH
28981: LD_VAR 0 1
28985: PPUSH
28986: CALL_OW 74
28990: PPUSH
28991: CALL_OW 115
// wait ( 0 0$20 ) ;
28995: LD_INT 700
28997: PPUSH
28998: CALL_OW 67
// SetSide ( un , your_side ) ;
29002: LD_VAR 0 1
29006: PPUSH
29007: LD_OWVAR 2
29011: PPUSH
29012: CALL_OW 235
// end ;
29016: PPOPN 2
29018: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29019: LD_EXP 63
29023: IFFALSE 29031
29025: PUSH
29026: LD_EXP 96
29030: AND
29031: IFFALSE 29137
29033: GO 29035
29035: DISABLE
29036: LD_INT 0
29038: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29039: LD_ADDR_VAR 0 1
29043: PUSH
29044: LD_INT 22
29046: PUSH
29047: LD_OWVAR 2
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 2
29058: PUSH
29059: LD_INT 30
29061: PUSH
29062: LD_INT 0
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 30
29071: PUSH
29072: LD_INT 1
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: LIST
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PPUSH
29088: CALL_OW 69
29092: ST_TO_ADDR
// if not depot then
29093: LD_VAR 0 1
29097: NOT
29098: IFFALSE 29102
// exit ;
29100: GO 29137
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29102: LD_VAR 0 1
29106: PUSH
29107: LD_INT 1
29109: ARRAY
29110: PPUSH
29111: CALL_OW 250
29115: PPUSH
29116: LD_VAR 0 1
29120: PUSH
29121: LD_INT 1
29123: ARRAY
29124: PPUSH
29125: CALL_OW 251
29129: PPUSH
29130: LD_INT 70
29132: PPUSH
29133: CALL_OW 495
// end ;
29137: PPOPN 1
29139: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29140: LD_EXP 63
29144: IFFALSE 29152
29146: PUSH
29147: LD_EXP 97
29151: AND
29152: IFFALSE 29363
29154: GO 29156
29156: DISABLE
29157: LD_INT 0
29159: PPUSH
29160: PPUSH
29161: PPUSH
29162: PPUSH
29163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29164: LD_ADDR_VAR 0 5
29168: PUSH
29169: LD_INT 22
29171: PUSH
29172: LD_OWVAR 2
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 21
29183: PUSH
29184: LD_INT 1
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PPUSH
29195: CALL_OW 69
29199: ST_TO_ADDR
// if not tmp then
29200: LD_VAR 0 5
29204: NOT
29205: IFFALSE 29209
// exit ;
29207: GO 29363
// for i in tmp do
29209: LD_ADDR_VAR 0 1
29213: PUSH
29214: LD_VAR 0 5
29218: PUSH
29219: FOR_IN
29220: IFFALSE 29361
// begin d := rand ( 0 , 5 ) ;
29222: LD_ADDR_VAR 0 4
29226: PUSH
29227: LD_INT 0
29229: PPUSH
29230: LD_INT 5
29232: PPUSH
29233: CALL_OW 12
29237: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29238: LD_ADDR_VAR 0 2
29242: PUSH
29243: LD_VAR 0 1
29247: PPUSH
29248: CALL_OW 250
29252: PPUSH
29253: LD_VAR 0 4
29257: PPUSH
29258: LD_INT 3
29260: PPUSH
29261: LD_INT 12
29263: PPUSH
29264: CALL_OW 12
29268: PPUSH
29269: CALL_OW 272
29273: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29274: LD_ADDR_VAR 0 3
29278: PUSH
29279: LD_VAR 0 1
29283: PPUSH
29284: CALL_OW 251
29288: PPUSH
29289: LD_VAR 0 4
29293: PPUSH
29294: LD_INT 3
29296: PPUSH
29297: LD_INT 12
29299: PPUSH
29300: CALL_OW 12
29304: PPUSH
29305: CALL_OW 273
29309: ST_TO_ADDR
// if ValidHex ( x , y ) then
29310: LD_VAR 0 2
29314: PPUSH
29315: LD_VAR 0 3
29319: PPUSH
29320: CALL_OW 488
29324: IFFALSE 29359
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29326: LD_VAR 0 1
29330: PPUSH
29331: LD_VAR 0 2
29335: PPUSH
29336: LD_VAR 0 3
29340: PPUSH
29341: LD_INT 3
29343: PPUSH
29344: LD_INT 6
29346: PPUSH
29347: CALL_OW 12
29351: PPUSH
29352: LD_INT 1
29354: PPUSH
29355: CALL_OW 483
// end ;
29359: GO 29219
29361: POP
29362: POP
// end ;
29363: PPOPN 5
29365: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29366: LD_EXP 63
29370: IFFALSE 29378
29372: PUSH
29373: LD_EXP 98
29377: AND
29378: IFFALSE 29472
29380: GO 29382
29382: DISABLE
29383: LD_INT 0
29385: PPUSH
29386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29387: LD_ADDR_VAR 0 2
29391: PUSH
29392: LD_INT 22
29394: PUSH
29395: LD_OWVAR 2
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 32
29406: PUSH
29407: LD_INT 1
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 21
29416: PUSH
29417: LD_INT 2
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: LIST
29428: PPUSH
29429: CALL_OW 69
29433: ST_TO_ADDR
// if not tmp then
29434: LD_VAR 0 2
29438: NOT
29439: IFFALSE 29443
// exit ;
29441: GO 29472
// for i in tmp do
29443: LD_ADDR_VAR 0 1
29447: PUSH
29448: LD_VAR 0 2
29452: PUSH
29453: FOR_IN
29454: IFFALSE 29470
// SetFuel ( i , 0 ) ;
29456: LD_VAR 0 1
29460: PPUSH
29461: LD_INT 0
29463: PPUSH
29464: CALL_OW 240
29468: GO 29453
29470: POP
29471: POP
// end ;
29472: PPOPN 2
29474: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29475: LD_EXP 63
29479: IFFALSE 29487
29481: PUSH
29482: LD_EXP 99
29486: AND
29487: IFFALSE 29553
29489: GO 29491
29491: DISABLE
29492: LD_INT 0
29494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29495: LD_ADDR_VAR 0 1
29499: PUSH
29500: LD_INT 22
29502: PUSH
29503: LD_OWVAR 2
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 30
29514: PUSH
29515: LD_INT 29
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PPUSH
29526: CALL_OW 69
29530: ST_TO_ADDR
// if not tmp then
29531: LD_VAR 0 1
29535: NOT
29536: IFFALSE 29540
// exit ;
29538: GO 29553
// DestroyUnit ( tmp [ 1 ] ) ;
29540: LD_VAR 0 1
29544: PUSH
29545: LD_INT 1
29547: ARRAY
29548: PPUSH
29549: CALL_OW 65
// end ;
29553: PPOPN 1
29555: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29556: LD_EXP 63
29560: IFFALSE 29568
29562: PUSH
29563: LD_EXP 101
29567: AND
29568: IFFALSE 29697
29570: GO 29572
29572: DISABLE
29573: LD_INT 0
29575: PPUSH
// begin uc_side := 0 ;
29576: LD_ADDR_OWVAR 20
29580: PUSH
29581: LD_INT 0
29583: ST_TO_ADDR
// uc_nation := nation_arabian ;
29584: LD_ADDR_OWVAR 21
29588: PUSH
29589: LD_INT 2
29591: ST_TO_ADDR
// hc_gallery :=  ;
29592: LD_ADDR_OWVAR 33
29596: PUSH
29597: LD_STRING 
29599: ST_TO_ADDR
// hc_name :=  ;
29600: LD_ADDR_OWVAR 26
29604: PUSH
29605: LD_STRING 
29607: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29608: LD_INT 1
29610: PPUSH
29611: LD_INT 11
29613: PPUSH
29614: LD_INT 10
29616: PPUSH
29617: CALL_OW 380
// un := CreateHuman ;
29621: LD_ADDR_VAR 0 1
29625: PUSH
29626: CALL_OW 44
29630: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29631: LD_VAR 0 1
29635: PPUSH
29636: LD_INT 1
29638: PPUSH
29639: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29643: LD_INT 35
29645: PPUSH
29646: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29650: LD_VAR 0 1
29654: PPUSH
29655: LD_INT 22
29657: PUSH
29658: LD_OWVAR 2
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PPUSH
29667: CALL_OW 69
29671: PPUSH
29672: LD_VAR 0 1
29676: PPUSH
29677: CALL_OW 74
29681: PPUSH
29682: CALL_OW 115
// until IsDead ( un ) ;
29686: LD_VAR 0 1
29690: PPUSH
29691: CALL_OW 301
29695: IFFALSE 29643
// end ;
29697: PPOPN 1
29699: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29700: LD_EXP 63
29704: IFFALSE 29712
29706: PUSH
29707: LD_EXP 103
29711: AND
29712: IFFALSE 29724
29714: GO 29716
29716: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29717: LD_STRING earthquake(getX(game), 0, 32)
29719: PPUSH
29720: CALL_OW 559
29724: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29725: LD_EXP 63
29729: IFFALSE 29737
29731: PUSH
29732: LD_EXP 104
29736: AND
29737: IFFALSE 29828
29739: GO 29741
29741: DISABLE
29742: LD_INT 0
29744: PPUSH
// begin enable ;
29745: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29746: LD_ADDR_VAR 0 1
29750: PUSH
29751: LD_INT 22
29753: PUSH
29754: LD_OWVAR 2
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 21
29765: PUSH
29766: LD_INT 2
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 33
29775: PUSH
29776: LD_INT 3
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: LIST
29787: PPUSH
29788: CALL_OW 69
29792: ST_TO_ADDR
// if not tmp then
29793: LD_VAR 0 1
29797: NOT
29798: IFFALSE 29802
// exit ;
29800: GO 29828
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29802: LD_VAR 0 1
29806: PUSH
29807: LD_INT 1
29809: PPUSH
29810: LD_VAR 0 1
29814: PPUSH
29815: CALL_OW 12
29819: ARRAY
29820: PPUSH
29821: LD_INT 1
29823: PPUSH
29824: CALL_OW 234
// end ;
29828: PPOPN 1
29830: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29831: LD_EXP 63
29835: IFFALSE 29843
29837: PUSH
29838: LD_EXP 105
29842: AND
29843: IFFALSE 29984
29845: GO 29847
29847: DISABLE
29848: LD_INT 0
29850: PPUSH
29851: PPUSH
29852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29853: LD_ADDR_VAR 0 3
29857: PUSH
29858: LD_INT 22
29860: PUSH
29861: LD_OWVAR 2
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 25
29872: PUSH
29873: LD_INT 1
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PPUSH
29884: CALL_OW 69
29888: ST_TO_ADDR
// if not tmp then
29889: LD_VAR 0 3
29893: NOT
29894: IFFALSE 29898
// exit ;
29896: GO 29984
// un := tmp [ rand ( 1 , tmp ) ] ;
29898: LD_ADDR_VAR 0 2
29902: PUSH
29903: LD_VAR 0 3
29907: PUSH
29908: LD_INT 1
29910: PPUSH
29911: LD_VAR 0 3
29915: PPUSH
29916: CALL_OW 12
29920: ARRAY
29921: ST_TO_ADDR
// if Crawls ( un ) then
29922: LD_VAR 0 2
29926: PPUSH
29927: CALL_OW 318
29931: IFFALSE 29942
// ComWalk ( un ) ;
29933: LD_VAR 0 2
29937: PPUSH
29938: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29942: LD_VAR 0 2
29946: PPUSH
29947: LD_INT 9
29949: PPUSH
29950: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29954: LD_INT 28
29956: PPUSH
29957: LD_OWVAR 2
29961: PPUSH
29962: LD_INT 2
29964: PPUSH
29965: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29969: LD_INT 29
29971: PPUSH
29972: LD_OWVAR 2
29976: PPUSH
29977: LD_INT 2
29979: PPUSH
29980: CALL_OW 322
// end ;
29984: PPOPN 3
29986: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29987: LD_EXP 63
29991: IFFALSE 29999
29993: PUSH
29994: LD_EXP 106
29998: AND
29999: IFFALSE 30110
30001: GO 30003
30003: DISABLE
30004: LD_INT 0
30006: PPUSH
30007: PPUSH
30008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30009: LD_ADDR_VAR 0 3
30013: PUSH
30014: LD_INT 22
30016: PUSH
30017: LD_OWVAR 2
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 25
30028: PUSH
30029: LD_INT 1
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PPUSH
30040: CALL_OW 69
30044: ST_TO_ADDR
// if not tmp then
30045: LD_VAR 0 3
30049: NOT
30050: IFFALSE 30054
// exit ;
30052: GO 30110
// un := tmp [ rand ( 1 , tmp ) ] ;
30054: LD_ADDR_VAR 0 2
30058: PUSH
30059: LD_VAR 0 3
30063: PUSH
30064: LD_INT 1
30066: PPUSH
30067: LD_VAR 0 3
30071: PPUSH
30072: CALL_OW 12
30076: ARRAY
30077: ST_TO_ADDR
// if Crawls ( un ) then
30078: LD_VAR 0 2
30082: PPUSH
30083: CALL_OW 318
30087: IFFALSE 30098
// ComWalk ( un ) ;
30089: LD_VAR 0 2
30093: PPUSH
30094: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30098: LD_VAR 0 2
30102: PPUSH
30103: LD_INT 8
30105: PPUSH
30106: CALL_OW 336
// end ;
30110: PPOPN 3
30112: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30113: LD_EXP 63
30117: IFFALSE 30125
30119: PUSH
30120: LD_EXP 107
30124: AND
30125: IFFALSE 30269
30127: GO 30129
30129: DISABLE
30130: LD_INT 0
30132: PPUSH
30133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30134: LD_ADDR_VAR 0 2
30138: PUSH
30139: LD_INT 22
30141: PUSH
30142: LD_OWVAR 2
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 21
30153: PUSH
30154: LD_INT 2
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 2
30163: PUSH
30164: LD_INT 34
30166: PUSH
30167: LD_INT 12
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 34
30176: PUSH
30177: LD_INT 51
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 34
30186: PUSH
30187: LD_INT 32
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: LIST
30204: PPUSH
30205: CALL_OW 69
30209: ST_TO_ADDR
// if not tmp then
30210: LD_VAR 0 2
30214: NOT
30215: IFFALSE 30219
// exit ;
30217: GO 30269
// for i in tmp do
30219: LD_ADDR_VAR 0 1
30223: PUSH
30224: LD_VAR 0 2
30228: PUSH
30229: FOR_IN
30230: IFFALSE 30267
// if GetCargo ( i , mat_artifact ) = 0 then
30232: LD_VAR 0 1
30236: PPUSH
30237: LD_INT 4
30239: PPUSH
30240: CALL_OW 289
30244: PUSH
30245: LD_INT 0
30247: EQUAL
30248: IFFALSE 30265
// SetCargo ( i , mat_siberit , 100 ) ;
30250: LD_VAR 0 1
30254: PPUSH
30255: LD_INT 3
30257: PPUSH
30258: LD_INT 100
30260: PPUSH
30261: CALL_OW 290
30265: GO 30229
30267: POP
30268: POP
// end ;
30269: PPOPN 2
30271: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30272: LD_EXP 63
30276: IFFALSE 30284
30278: PUSH
30279: LD_EXP 108
30283: AND
30284: IFFALSE 30467
30286: GO 30288
30288: DISABLE
30289: LD_INT 0
30291: PPUSH
30292: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30293: LD_ADDR_VAR 0 2
30297: PUSH
30298: LD_INT 22
30300: PUSH
30301: LD_OWVAR 2
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PPUSH
30310: CALL_OW 69
30314: ST_TO_ADDR
// if not tmp then
30315: LD_VAR 0 2
30319: NOT
30320: IFFALSE 30324
// exit ;
30322: GO 30467
// for i := 1 to 2 do
30324: LD_ADDR_VAR 0 1
30328: PUSH
30329: DOUBLE
30330: LD_INT 1
30332: DEC
30333: ST_TO_ADDR
30334: LD_INT 2
30336: PUSH
30337: FOR_TO
30338: IFFALSE 30465
// begin uc_side := your_side ;
30340: LD_ADDR_OWVAR 20
30344: PUSH
30345: LD_OWVAR 2
30349: ST_TO_ADDR
// uc_nation := nation_american ;
30350: LD_ADDR_OWVAR 21
30354: PUSH
30355: LD_INT 1
30357: ST_TO_ADDR
// vc_chassis := us_morphling ;
30358: LD_ADDR_OWVAR 37
30362: PUSH
30363: LD_INT 5
30365: ST_TO_ADDR
// vc_engine := engine_siberite ;
30366: LD_ADDR_OWVAR 39
30370: PUSH
30371: LD_INT 3
30373: ST_TO_ADDR
// vc_control := control_computer ;
30374: LD_ADDR_OWVAR 38
30378: PUSH
30379: LD_INT 3
30381: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30382: LD_ADDR_OWVAR 40
30386: PUSH
30387: LD_INT 10
30389: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30390: LD_VAR 0 2
30394: PUSH
30395: LD_INT 1
30397: ARRAY
30398: PPUSH
30399: CALL_OW 310
30403: NOT
30404: IFFALSE 30451
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30406: CALL_OW 45
30410: PPUSH
30411: LD_VAR 0 2
30415: PUSH
30416: LD_INT 1
30418: ARRAY
30419: PPUSH
30420: CALL_OW 250
30424: PPUSH
30425: LD_VAR 0 2
30429: PUSH
30430: LD_INT 1
30432: ARRAY
30433: PPUSH
30434: CALL_OW 251
30438: PPUSH
30439: LD_INT 12
30441: PPUSH
30442: LD_INT 1
30444: PPUSH
30445: CALL_OW 50
30449: GO 30463
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30451: CALL_OW 45
30455: PPUSH
30456: LD_INT 1
30458: PPUSH
30459: CALL_OW 51
// end ;
30463: GO 30337
30465: POP
30466: POP
// end ;
30467: PPOPN 2
30469: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30470: LD_EXP 63
30474: IFFALSE 30482
30476: PUSH
30477: LD_EXP 109
30481: AND
30482: IFFALSE 30704
30484: GO 30486
30486: DISABLE
30487: LD_INT 0
30489: PPUSH
30490: PPUSH
30491: PPUSH
30492: PPUSH
30493: PPUSH
30494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30495: LD_ADDR_VAR 0 6
30499: PUSH
30500: LD_INT 22
30502: PUSH
30503: LD_OWVAR 2
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 21
30514: PUSH
30515: LD_INT 1
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 3
30524: PUSH
30525: LD_INT 23
30527: PUSH
30528: LD_INT 0
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: LIST
30543: PPUSH
30544: CALL_OW 69
30548: ST_TO_ADDR
// if not tmp then
30549: LD_VAR 0 6
30553: NOT
30554: IFFALSE 30558
// exit ;
30556: GO 30704
// s1 := rand ( 1 , 4 ) ;
30558: LD_ADDR_VAR 0 2
30562: PUSH
30563: LD_INT 1
30565: PPUSH
30566: LD_INT 4
30568: PPUSH
30569: CALL_OW 12
30573: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30574: LD_ADDR_VAR 0 4
30578: PUSH
30579: LD_VAR 0 6
30583: PUSH
30584: LD_INT 1
30586: ARRAY
30587: PPUSH
30588: LD_VAR 0 2
30592: PPUSH
30593: CALL_OW 259
30597: ST_TO_ADDR
// if s1 = 1 then
30598: LD_VAR 0 2
30602: PUSH
30603: LD_INT 1
30605: EQUAL
30606: IFFALSE 30626
// s2 := rand ( 2 , 4 ) else
30608: LD_ADDR_VAR 0 3
30612: PUSH
30613: LD_INT 2
30615: PPUSH
30616: LD_INT 4
30618: PPUSH
30619: CALL_OW 12
30623: ST_TO_ADDR
30624: GO 30634
// s2 := 1 ;
30626: LD_ADDR_VAR 0 3
30630: PUSH
30631: LD_INT 1
30633: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30634: LD_ADDR_VAR 0 5
30638: PUSH
30639: LD_VAR 0 6
30643: PUSH
30644: LD_INT 1
30646: ARRAY
30647: PPUSH
30648: LD_VAR 0 3
30652: PPUSH
30653: CALL_OW 259
30657: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30658: LD_VAR 0 6
30662: PUSH
30663: LD_INT 1
30665: ARRAY
30666: PPUSH
30667: LD_VAR 0 2
30671: PPUSH
30672: LD_VAR 0 5
30676: PPUSH
30677: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30681: LD_VAR 0 6
30685: PUSH
30686: LD_INT 1
30688: ARRAY
30689: PPUSH
30690: LD_VAR 0 3
30694: PPUSH
30695: LD_VAR 0 4
30699: PPUSH
30700: CALL_OW 237
// end ;
30704: PPOPN 6
30706: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30707: LD_EXP 63
30711: IFFALSE 30719
30713: PUSH
30714: LD_EXP 110
30718: AND
30719: IFFALSE 30798
30721: GO 30723
30723: DISABLE
30724: LD_INT 0
30726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30727: LD_ADDR_VAR 0 1
30731: PUSH
30732: LD_INT 22
30734: PUSH
30735: LD_OWVAR 2
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 30
30746: PUSH
30747: LD_INT 3
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PPUSH
30758: CALL_OW 69
30762: ST_TO_ADDR
// if not tmp then
30763: LD_VAR 0 1
30767: NOT
30768: IFFALSE 30772
// exit ;
30770: GO 30798
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30772: LD_VAR 0 1
30776: PUSH
30777: LD_INT 1
30779: PPUSH
30780: LD_VAR 0 1
30784: PPUSH
30785: CALL_OW 12
30789: ARRAY
30790: PPUSH
30791: LD_INT 1
30793: PPUSH
30794: CALL_OW 234
// end ;
30798: PPOPN 1
30800: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30801: LD_EXP 63
30805: IFFALSE 30813
30807: PUSH
30808: LD_EXP 111
30812: AND
30813: IFFALSE 30925
30815: GO 30817
30817: DISABLE
30818: LD_INT 0
30820: PPUSH
30821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30822: LD_ADDR_VAR 0 2
30826: PUSH
30827: LD_INT 22
30829: PUSH
30830: LD_OWVAR 2
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 2
30841: PUSH
30842: LD_INT 30
30844: PUSH
30845: LD_INT 27
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 30
30854: PUSH
30855: LD_INT 26
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 30
30864: PUSH
30865: LD_INT 28
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PPUSH
30882: CALL_OW 69
30886: ST_TO_ADDR
// if not tmp then
30887: LD_VAR 0 2
30891: NOT
30892: IFFALSE 30896
// exit ;
30894: GO 30925
// for i in tmp do
30896: LD_ADDR_VAR 0 1
30900: PUSH
30901: LD_VAR 0 2
30905: PUSH
30906: FOR_IN
30907: IFFALSE 30923
// SetLives ( i , 1 ) ;
30909: LD_VAR 0 1
30913: PPUSH
30914: LD_INT 1
30916: PPUSH
30917: CALL_OW 234
30921: GO 30906
30923: POP
30924: POP
// end ;
30925: PPOPN 2
30927: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30928: LD_EXP 63
30932: IFFALSE 30940
30934: PUSH
30935: LD_EXP 112
30939: AND
30940: IFFALSE 31227
30942: GO 30944
30944: DISABLE
30945: LD_INT 0
30947: PPUSH
30948: PPUSH
30949: PPUSH
// begin i := rand ( 1 , 7 ) ;
30950: LD_ADDR_VAR 0 1
30954: PUSH
30955: LD_INT 1
30957: PPUSH
30958: LD_INT 7
30960: PPUSH
30961: CALL_OW 12
30965: ST_TO_ADDR
// case i of 1 :
30966: LD_VAR 0 1
30970: PUSH
30971: LD_INT 1
30973: DOUBLE
30974: EQUAL
30975: IFTRUE 30979
30977: GO 30989
30979: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30980: LD_STRING earthquake(getX(game), 0, 32)
30982: PPUSH
30983: CALL_OW 559
30987: GO 31227
30989: LD_INT 2
30991: DOUBLE
30992: EQUAL
30993: IFTRUE 30997
30995: GO 31011
30997: POP
// begin ToLua ( displayStucuk(); ) ;
30998: LD_STRING displayStucuk();
31000: PPUSH
31001: CALL_OW 559
// ResetFog ;
31005: CALL_OW 335
// end ; 3 :
31009: GO 31227
31011: LD_INT 3
31013: DOUBLE
31014: EQUAL
31015: IFTRUE 31019
31017: GO 31123
31019: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31020: LD_ADDR_VAR 0 2
31024: PUSH
31025: LD_INT 22
31027: PUSH
31028: LD_OWVAR 2
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 25
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PPUSH
31051: CALL_OW 69
31055: ST_TO_ADDR
// if not tmp then
31056: LD_VAR 0 2
31060: NOT
31061: IFFALSE 31065
// exit ;
31063: GO 31227
// un := tmp [ rand ( 1 , tmp ) ] ;
31065: LD_ADDR_VAR 0 3
31069: PUSH
31070: LD_VAR 0 2
31074: PUSH
31075: LD_INT 1
31077: PPUSH
31078: LD_VAR 0 2
31082: PPUSH
31083: CALL_OW 12
31087: ARRAY
31088: ST_TO_ADDR
// if Crawls ( un ) then
31089: LD_VAR 0 3
31093: PPUSH
31094: CALL_OW 318
31098: IFFALSE 31109
// ComWalk ( un ) ;
31100: LD_VAR 0 3
31104: PPUSH
31105: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31109: LD_VAR 0 3
31113: PPUSH
31114: LD_INT 8
31116: PPUSH
31117: CALL_OW 336
// end ; 4 :
31121: GO 31227
31123: LD_INT 4
31125: DOUBLE
31126: EQUAL
31127: IFTRUE 31131
31129: GO 31205
31131: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31132: LD_ADDR_VAR 0 2
31136: PUSH
31137: LD_INT 22
31139: PUSH
31140: LD_OWVAR 2
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 30
31151: PUSH
31152: LD_INT 29
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PPUSH
31163: CALL_OW 69
31167: ST_TO_ADDR
// if not tmp then
31168: LD_VAR 0 2
31172: NOT
31173: IFFALSE 31177
// exit ;
31175: GO 31227
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31177: LD_VAR 0 2
31181: PUSH
31182: LD_INT 1
31184: ARRAY
31185: PPUSH
31186: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31190: LD_VAR 0 2
31194: PUSH
31195: LD_INT 1
31197: ARRAY
31198: PPUSH
31199: CALL_OW 65
// end ; 5 .. 7 :
31203: GO 31227
31205: LD_INT 5
31207: DOUBLE
31208: GREATEREQUAL
31209: IFFALSE 31217
31211: LD_INT 7
31213: DOUBLE
31214: LESSEQUAL
31215: IFTRUE 31219
31217: GO 31226
31219: POP
// StreamSibBomb ; end ;
31220: CALL 27408 0 0
31224: GO 31227
31226: POP
// end ;
31227: PPOPN 3
31229: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31230: LD_EXP 63
31234: IFFALSE 31242
31236: PUSH
31237: LD_EXP 113
31241: AND
31242: IFFALSE 31398
31244: GO 31246
31246: DISABLE
31247: LD_INT 0
31249: PPUSH
31250: PPUSH
31251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31252: LD_ADDR_VAR 0 2
31256: PUSH
31257: LD_INT 81
31259: PUSH
31260: LD_OWVAR 2
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 2
31271: PUSH
31272: LD_INT 21
31274: PUSH
31275: LD_INT 1
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 21
31284: PUSH
31285: LD_INT 2
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: LIST
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PPUSH
31301: CALL_OW 69
31305: ST_TO_ADDR
// if not tmp then
31306: LD_VAR 0 2
31310: NOT
31311: IFFALSE 31315
// exit ;
31313: GO 31398
// p := 0 ;
31315: LD_ADDR_VAR 0 3
31319: PUSH
31320: LD_INT 0
31322: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31323: LD_INT 35
31325: PPUSH
31326: CALL_OW 67
// p := p + 1 ;
31330: LD_ADDR_VAR 0 3
31334: PUSH
31335: LD_VAR 0 3
31339: PUSH
31340: LD_INT 1
31342: PLUS
31343: ST_TO_ADDR
// for i in tmp do
31344: LD_ADDR_VAR 0 1
31348: PUSH
31349: LD_VAR 0 2
31353: PUSH
31354: FOR_IN
31355: IFFALSE 31386
// if GetLives ( i ) < 1000 then
31357: LD_VAR 0 1
31361: PPUSH
31362: CALL_OW 256
31366: PUSH
31367: LD_INT 1000
31369: LESS
31370: IFFALSE 31384
// SetLives ( i , 1000 ) ;
31372: LD_VAR 0 1
31376: PPUSH
31377: LD_INT 1000
31379: PPUSH
31380: CALL_OW 234
31384: GO 31354
31386: POP
31387: POP
// until p > 20 ;
31388: LD_VAR 0 3
31392: PUSH
31393: LD_INT 20
31395: GREATER
31396: IFFALSE 31323
// end ;
31398: PPOPN 3
31400: END
// every 0 0$1 trigger StreamModeActive and sTime do
31401: LD_EXP 63
31405: IFFALSE 31413
31407: PUSH
31408: LD_EXP 114
31412: AND
31413: IFFALSE 31448
31415: GO 31417
31417: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31418: LD_INT 28
31420: PPUSH
31421: LD_OWVAR 2
31425: PPUSH
31426: LD_INT 2
31428: PPUSH
31429: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31433: LD_INT 30
31435: PPUSH
31436: LD_OWVAR 2
31440: PPUSH
31441: LD_INT 2
31443: PPUSH
31444: CALL_OW 322
// end ;
31448: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31449: LD_EXP 63
31453: IFFALSE 31461
31455: PUSH
31456: LD_EXP 115
31460: AND
31461: IFFALSE 31582
31463: GO 31465
31465: DISABLE
31466: LD_INT 0
31468: PPUSH
31469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31470: LD_ADDR_VAR 0 2
31474: PUSH
31475: LD_INT 22
31477: PUSH
31478: LD_OWVAR 2
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 21
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 3
31499: PUSH
31500: LD_INT 23
31502: PUSH
31503: LD_INT 0
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: LIST
31518: PPUSH
31519: CALL_OW 69
31523: ST_TO_ADDR
// if not tmp then
31524: LD_VAR 0 2
31528: NOT
31529: IFFALSE 31533
// exit ;
31531: GO 31582
// for i in tmp do
31533: LD_ADDR_VAR 0 1
31537: PUSH
31538: LD_VAR 0 2
31542: PUSH
31543: FOR_IN
31544: IFFALSE 31580
// begin if Crawls ( i ) then
31546: LD_VAR 0 1
31550: PPUSH
31551: CALL_OW 318
31555: IFFALSE 31566
// ComWalk ( i ) ;
31557: LD_VAR 0 1
31561: PPUSH
31562: CALL_OW 138
// SetClass ( i , 2 ) ;
31566: LD_VAR 0 1
31570: PPUSH
31571: LD_INT 2
31573: PPUSH
31574: CALL_OW 336
// end ;
31578: GO 31543
31580: POP
31581: POP
// end ;
31582: PPOPN 2
31584: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31585: LD_EXP 63
31589: IFFALSE 31597
31591: PUSH
31592: LD_EXP 116
31596: AND
31597: IFFALSE 31887
31599: GO 31601
31601: DISABLE
31602: LD_INT 0
31604: PPUSH
31605: PPUSH
31606: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31607: LD_OWVAR 2
31611: PPUSH
31612: LD_INT 9
31614: PPUSH
31615: LD_INT 1
31617: PPUSH
31618: LD_INT 1
31620: PPUSH
31621: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31625: LD_INT 9
31627: PPUSH
31628: LD_OWVAR 2
31632: PPUSH
31633: CALL_OW 343
// uc_side := 9 ;
31637: LD_ADDR_OWVAR 20
31641: PUSH
31642: LD_INT 9
31644: ST_TO_ADDR
// uc_nation := 2 ;
31645: LD_ADDR_OWVAR 21
31649: PUSH
31650: LD_INT 2
31652: ST_TO_ADDR
// hc_name := Dark Warrior ;
31653: LD_ADDR_OWVAR 26
31657: PUSH
31658: LD_STRING Dark Warrior
31660: ST_TO_ADDR
// hc_gallery :=  ;
31661: LD_ADDR_OWVAR 33
31665: PUSH
31666: LD_STRING 
31668: ST_TO_ADDR
// hc_noskilllimit := true ;
31669: LD_ADDR_OWVAR 76
31673: PUSH
31674: LD_INT 1
31676: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31677: LD_ADDR_OWVAR 31
31681: PUSH
31682: LD_INT 30
31684: PUSH
31685: LD_INT 30
31687: PUSH
31688: LD_INT 30
31690: PUSH
31691: LD_INT 30
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: ST_TO_ADDR
// un := CreateHuman ;
31700: LD_ADDR_VAR 0 3
31704: PUSH
31705: CALL_OW 44
31709: ST_TO_ADDR
// hc_noskilllimit := false ;
31710: LD_ADDR_OWVAR 76
31714: PUSH
31715: LD_INT 0
31717: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31718: LD_VAR 0 3
31722: PPUSH
31723: LD_INT 1
31725: PPUSH
31726: CALL_OW 51
// ToLua ( playRanger() ) ;
31730: LD_STRING playRanger()
31732: PPUSH
31733: CALL_OW 559
// p := 0 ;
31737: LD_ADDR_VAR 0 2
31741: PUSH
31742: LD_INT 0
31744: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31745: LD_INT 35
31747: PPUSH
31748: CALL_OW 67
// p := p + 1 ;
31752: LD_ADDR_VAR 0 2
31756: PUSH
31757: LD_VAR 0 2
31761: PUSH
31762: LD_INT 1
31764: PLUS
31765: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31766: LD_VAR 0 3
31770: PPUSH
31771: CALL_OW 256
31775: PUSH
31776: LD_INT 1000
31778: LESS
31779: IFFALSE 31793
// SetLives ( un , 1000 ) ;
31781: LD_VAR 0 3
31785: PPUSH
31786: LD_INT 1000
31788: PPUSH
31789: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31793: LD_VAR 0 3
31797: PPUSH
31798: LD_INT 81
31800: PUSH
31801: LD_OWVAR 2
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 91
31812: PUSH
31813: LD_VAR 0 3
31817: PUSH
31818: LD_INT 30
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: LIST
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PPUSH
31830: CALL_OW 69
31834: PPUSH
31835: LD_VAR 0 3
31839: PPUSH
31840: CALL_OW 74
31844: PPUSH
31845: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31849: LD_VAR 0 2
31853: PUSH
31854: LD_INT 80
31856: GREATER
31857: IFTRUE 31870
31859: PUSH
31860: LD_VAR 0 3
31864: PPUSH
31865: CALL_OW 301
31869: OR
31870: IFFALSE 31745
// if un then
31872: LD_VAR 0 3
31876: IFFALSE 31887
// RemoveUnit ( un ) ;
31878: LD_VAR 0 3
31882: PPUSH
31883: CALL_OW 64
// end ;
31887: PPOPN 3
31889: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31890: LD_EXP 117
31894: IFFALSE 32010
31896: GO 31898
31898: DISABLE
31899: LD_INT 0
31901: PPUSH
31902: PPUSH
31903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31904: LD_ADDR_VAR 0 2
31908: PUSH
31909: LD_INT 81
31911: PUSH
31912: LD_OWVAR 2
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 21
31923: PUSH
31924: LD_INT 1
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PPUSH
31935: CALL_OW 69
31939: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31940: LD_STRING playComputer()
31942: PPUSH
31943: CALL_OW 559
// if not tmp then
31947: LD_VAR 0 2
31951: NOT
31952: IFFALSE 31956
// exit ;
31954: GO 32010
// for i in tmp do
31956: LD_ADDR_VAR 0 1
31960: PUSH
31961: LD_VAR 0 2
31965: PUSH
31966: FOR_IN
31967: IFFALSE 32008
// for j := 1 to 4 do
31969: LD_ADDR_VAR 0 3
31973: PUSH
31974: DOUBLE
31975: LD_INT 1
31977: DEC
31978: ST_TO_ADDR
31979: LD_INT 4
31981: PUSH
31982: FOR_TO
31983: IFFALSE 32004
// SetSkill ( i , j , 10 ) ;
31985: LD_VAR 0 1
31989: PPUSH
31990: LD_VAR 0 3
31994: PPUSH
31995: LD_INT 10
31997: PPUSH
31998: CALL_OW 237
32002: GO 31982
32004: POP
32005: POP
32006: GO 31966
32008: POP
32009: POP
// end ;
32010: PPOPN 3
32012: END
// every 0 0$1 trigger s30 do var i , tmp ;
32013: LD_EXP 118
32017: IFFALSE 32086
32019: GO 32021
32021: DISABLE
32022: LD_INT 0
32024: PPUSH
32025: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32026: LD_ADDR_VAR 0 2
32030: PUSH
32031: LD_INT 22
32033: PUSH
32034: LD_OWVAR 2
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PPUSH
32043: CALL_OW 69
32047: ST_TO_ADDR
// if not tmp then
32048: LD_VAR 0 2
32052: NOT
32053: IFFALSE 32057
// exit ;
32055: GO 32086
// for i in tmp do
32057: LD_ADDR_VAR 0 1
32061: PUSH
32062: LD_VAR 0 2
32066: PUSH
32067: FOR_IN
32068: IFFALSE 32084
// SetLives ( i , 300 ) ;
32070: LD_VAR 0 1
32074: PPUSH
32075: LD_INT 300
32077: PPUSH
32078: CALL_OW 234
32082: GO 32067
32084: POP
32085: POP
// end ;
32086: PPOPN 2
32088: END
// every 0 0$1 trigger s60 do var i , tmp ;
32089: LD_EXP 119
32093: IFFALSE 32162
32095: GO 32097
32097: DISABLE
32098: LD_INT 0
32100: PPUSH
32101: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32102: LD_ADDR_VAR 0 2
32106: PUSH
32107: LD_INT 22
32109: PUSH
32110: LD_OWVAR 2
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PPUSH
32119: CALL_OW 69
32123: ST_TO_ADDR
// if not tmp then
32124: LD_VAR 0 2
32128: NOT
32129: IFFALSE 32133
// exit ;
32131: GO 32162
// for i in tmp do
32133: LD_ADDR_VAR 0 1
32137: PUSH
32138: LD_VAR 0 2
32142: PUSH
32143: FOR_IN
32144: IFFALSE 32160
// SetLives ( i , 600 ) ;
32146: LD_VAR 0 1
32150: PPUSH
32151: LD_INT 600
32153: PPUSH
32154: CALL_OW 234
32158: GO 32143
32160: POP
32161: POP
// end ;
32162: PPOPN 2
32164: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32165: LD_INT 0
32167: PPUSH
// case cmd of 301 :
32168: LD_VAR 0 1
32172: PUSH
32173: LD_INT 301
32175: DOUBLE
32176: EQUAL
32177: IFTRUE 32181
32179: GO 32213
32181: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32182: LD_VAR 0 6
32186: PPUSH
32187: LD_VAR 0 7
32191: PPUSH
32192: LD_VAR 0 8
32196: PPUSH
32197: LD_VAR 0 4
32201: PPUSH
32202: LD_VAR 0 5
32206: PPUSH
32207: CALL 33426 0 5
32211: GO 32334
32213: LD_INT 302
32215: DOUBLE
32216: EQUAL
32217: IFTRUE 32221
32219: GO 32258
32221: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32222: LD_VAR 0 6
32226: PPUSH
32227: LD_VAR 0 7
32231: PPUSH
32232: LD_VAR 0 8
32236: PPUSH
32237: LD_VAR 0 9
32241: PPUSH
32242: LD_VAR 0 4
32246: PPUSH
32247: LD_VAR 0 5
32251: PPUSH
32252: CALL 33517 0 6
32256: GO 32334
32258: LD_INT 303
32260: DOUBLE
32261: EQUAL
32262: IFTRUE 32266
32264: GO 32303
32266: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32267: LD_VAR 0 6
32271: PPUSH
32272: LD_VAR 0 7
32276: PPUSH
32277: LD_VAR 0 8
32281: PPUSH
32282: LD_VAR 0 9
32286: PPUSH
32287: LD_VAR 0 4
32291: PPUSH
32292: LD_VAR 0 5
32296: PPUSH
32297: CALL 32339 0 6
32301: GO 32334
32303: LD_INT 304
32305: DOUBLE
32306: EQUAL
32307: IFTRUE 32311
32309: GO 32333
32311: POP
// hHackTeleport ( unit , x , y ) ; end ;
32312: LD_VAR 0 2
32316: PPUSH
32317: LD_VAR 0 4
32321: PPUSH
32322: LD_VAR 0 5
32326: PPUSH
32327: CALL 34110 0 3
32331: GO 32334
32333: POP
// end ;
32334: LD_VAR 0 12
32338: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32339: LD_INT 0
32341: PPUSH
32342: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32343: LD_VAR 0 1
32347: PUSH
32348: LD_INT 1
32350: LESS
32351: IFTRUE 32363
32353: PUSH
32354: LD_VAR 0 1
32358: PUSH
32359: LD_INT 3
32361: GREATER
32362: OR
32363: IFTRUE 32381
32365: PUSH
32366: LD_VAR 0 5
32370: PPUSH
32371: LD_VAR 0 6
32375: PPUSH
32376: CALL_OW 428
32380: OR
32381: IFFALSE 32385
// exit ;
32383: GO 33113
// uc_side := your_side ;
32385: LD_ADDR_OWVAR 20
32389: PUSH
32390: LD_OWVAR 2
32394: ST_TO_ADDR
// uc_nation := nation ;
32395: LD_ADDR_OWVAR 21
32399: PUSH
32400: LD_VAR 0 1
32404: ST_TO_ADDR
// bc_level = 1 ;
32405: LD_ADDR_OWVAR 43
32409: PUSH
32410: LD_INT 1
32412: ST_TO_ADDR
// case btype of 1 :
32413: LD_VAR 0 2
32417: PUSH
32418: LD_INT 1
32420: DOUBLE
32421: EQUAL
32422: IFTRUE 32426
32424: GO 32437
32426: POP
// bc_type := b_depot ; 2 :
32427: LD_ADDR_OWVAR 42
32431: PUSH
32432: LD_INT 0
32434: ST_TO_ADDR
32435: GO 33057
32437: LD_INT 2
32439: DOUBLE
32440: EQUAL
32441: IFTRUE 32445
32443: GO 32456
32445: POP
// bc_type := b_warehouse ; 3 :
32446: LD_ADDR_OWVAR 42
32450: PUSH
32451: LD_INT 1
32453: ST_TO_ADDR
32454: GO 33057
32456: LD_INT 3
32458: DOUBLE
32459: EQUAL
32460: IFTRUE 32464
32462: GO 32475
32464: POP
// bc_type := b_lab ; 4 .. 9 :
32465: LD_ADDR_OWVAR 42
32469: PUSH
32470: LD_INT 6
32472: ST_TO_ADDR
32473: GO 33057
32475: LD_INT 4
32477: DOUBLE
32478: GREATEREQUAL
32479: IFFALSE 32487
32481: LD_INT 9
32483: DOUBLE
32484: LESSEQUAL
32485: IFTRUE 32489
32487: GO 32549
32489: POP
// begin bc_type := b_lab_half ;
32490: LD_ADDR_OWVAR 42
32494: PUSH
32495: LD_INT 7
32497: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32498: LD_ADDR_OWVAR 44
32502: PUSH
32503: LD_INT 10
32505: PUSH
32506: LD_INT 11
32508: PUSH
32509: LD_INT 12
32511: PUSH
32512: LD_INT 15
32514: PUSH
32515: LD_INT 14
32517: PUSH
32518: LD_INT 13
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: PUSH
32529: LD_VAR 0 2
32533: PUSH
32534: LD_INT 3
32536: MINUS
32537: ARRAY
32538: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32539: LD_ADDR_OWVAR 45
32543: PUSH
32544: LD_INT 9
32546: ST_TO_ADDR
// end ; 10 .. 13 :
32547: GO 33057
32549: LD_INT 10
32551: DOUBLE
32552: GREATEREQUAL
32553: IFFALSE 32561
32555: LD_INT 13
32557: DOUBLE
32558: LESSEQUAL
32559: IFTRUE 32563
32561: GO 32640
32563: POP
// begin bc_type := b_lab_full ;
32564: LD_ADDR_OWVAR 42
32568: PUSH
32569: LD_INT 8
32571: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32572: LD_ADDR_OWVAR 44
32576: PUSH
32577: LD_INT 10
32579: PUSH
32580: LD_INT 12
32582: PUSH
32583: LD_INT 14
32585: PUSH
32586: LD_INT 13
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: PUSH
32595: LD_VAR 0 2
32599: PUSH
32600: LD_INT 9
32602: MINUS
32603: ARRAY
32604: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32605: LD_ADDR_OWVAR 45
32609: PUSH
32610: LD_INT 11
32612: PUSH
32613: LD_INT 15
32615: PUSH
32616: LD_INT 12
32618: PUSH
32619: LD_INT 15
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: PUSH
32628: LD_VAR 0 2
32632: PUSH
32633: LD_INT 9
32635: MINUS
32636: ARRAY
32637: ST_TO_ADDR
// end ; 14 :
32638: GO 33057
32640: LD_INT 14
32642: DOUBLE
32643: EQUAL
32644: IFTRUE 32648
32646: GO 32659
32648: POP
// bc_type := b_workshop ; 15 :
32649: LD_ADDR_OWVAR 42
32653: PUSH
32654: LD_INT 2
32656: ST_TO_ADDR
32657: GO 33057
32659: LD_INT 15
32661: DOUBLE
32662: EQUAL
32663: IFTRUE 32667
32665: GO 32678
32667: POP
// bc_type := b_factory ; 16 :
32668: LD_ADDR_OWVAR 42
32672: PUSH
32673: LD_INT 3
32675: ST_TO_ADDR
32676: GO 33057
32678: LD_INT 16
32680: DOUBLE
32681: EQUAL
32682: IFTRUE 32686
32684: GO 32697
32686: POP
// bc_type := b_ext_gun ; 17 :
32687: LD_ADDR_OWVAR 42
32691: PUSH
32692: LD_INT 17
32694: ST_TO_ADDR
32695: GO 33057
32697: LD_INT 17
32699: DOUBLE
32700: EQUAL
32701: IFTRUE 32705
32703: GO 32733
32705: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32706: LD_ADDR_OWVAR 42
32710: PUSH
32711: LD_INT 19
32713: PUSH
32714: LD_INT 23
32716: PUSH
32717: LD_INT 19
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: LIST
32724: PUSH
32725: LD_VAR 0 1
32729: ARRAY
32730: ST_TO_ADDR
32731: GO 33057
32733: LD_INT 18
32735: DOUBLE
32736: EQUAL
32737: IFTRUE 32741
32739: GO 32752
32741: POP
// bc_type := b_ext_radar ; 19 :
32742: LD_ADDR_OWVAR 42
32746: PUSH
32747: LD_INT 20
32749: ST_TO_ADDR
32750: GO 33057
32752: LD_INT 19
32754: DOUBLE
32755: EQUAL
32756: IFTRUE 32760
32758: GO 32771
32760: POP
// bc_type := b_ext_radio ; 20 :
32761: LD_ADDR_OWVAR 42
32765: PUSH
32766: LD_INT 22
32768: ST_TO_ADDR
32769: GO 33057
32771: LD_INT 20
32773: DOUBLE
32774: EQUAL
32775: IFTRUE 32779
32777: GO 32790
32779: POP
// bc_type := b_ext_siberium ; 21 :
32780: LD_ADDR_OWVAR 42
32784: PUSH
32785: LD_INT 21
32787: ST_TO_ADDR
32788: GO 33057
32790: LD_INT 21
32792: DOUBLE
32793: EQUAL
32794: IFTRUE 32798
32796: GO 32809
32798: POP
// bc_type := b_ext_computer ; 22 :
32799: LD_ADDR_OWVAR 42
32803: PUSH
32804: LD_INT 24
32806: ST_TO_ADDR
32807: GO 33057
32809: LD_INT 22
32811: DOUBLE
32812: EQUAL
32813: IFTRUE 32817
32815: GO 32828
32817: POP
// bc_type := b_ext_track ; 23 :
32818: LD_ADDR_OWVAR 42
32822: PUSH
32823: LD_INT 16
32825: ST_TO_ADDR
32826: GO 33057
32828: LD_INT 23
32830: DOUBLE
32831: EQUAL
32832: IFTRUE 32836
32834: GO 32847
32836: POP
// bc_type := b_ext_laser ; 24 :
32837: LD_ADDR_OWVAR 42
32841: PUSH
32842: LD_INT 25
32844: ST_TO_ADDR
32845: GO 33057
32847: LD_INT 24
32849: DOUBLE
32850: EQUAL
32851: IFTRUE 32855
32853: GO 32866
32855: POP
// bc_type := b_control_tower ; 25 :
32856: LD_ADDR_OWVAR 42
32860: PUSH
32861: LD_INT 36
32863: ST_TO_ADDR
32864: GO 33057
32866: LD_INT 25
32868: DOUBLE
32869: EQUAL
32870: IFTRUE 32874
32872: GO 32885
32874: POP
// bc_type := b_breastwork ; 26 :
32875: LD_ADDR_OWVAR 42
32879: PUSH
32880: LD_INT 31
32882: ST_TO_ADDR
32883: GO 33057
32885: LD_INT 26
32887: DOUBLE
32888: EQUAL
32889: IFTRUE 32893
32891: GO 32904
32893: POP
// bc_type := b_bunker ; 27 :
32894: LD_ADDR_OWVAR 42
32898: PUSH
32899: LD_INT 32
32901: ST_TO_ADDR
32902: GO 33057
32904: LD_INT 27
32906: DOUBLE
32907: EQUAL
32908: IFTRUE 32912
32910: GO 32923
32912: POP
// bc_type := b_turret ; 28 :
32913: LD_ADDR_OWVAR 42
32917: PUSH
32918: LD_INT 33
32920: ST_TO_ADDR
32921: GO 33057
32923: LD_INT 28
32925: DOUBLE
32926: EQUAL
32927: IFTRUE 32931
32929: GO 32942
32931: POP
// bc_type := b_armoury ; 29 :
32932: LD_ADDR_OWVAR 42
32936: PUSH
32937: LD_INT 4
32939: ST_TO_ADDR
32940: GO 33057
32942: LD_INT 29
32944: DOUBLE
32945: EQUAL
32946: IFTRUE 32950
32948: GO 32961
32950: POP
// bc_type := b_barracks ; 30 :
32951: LD_ADDR_OWVAR 42
32955: PUSH
32956: LD_INT 5
32958: ST_TO_ADDR
32959: GO 33057
32961: LD_INT 30
32963: DOUBLE
32964: EQUAL
32965: IFTRUE 32969
32967: GO 32980
32969: POP
// bc_type := b_solar_power ; 31 :
32970: LD_ADDR_OWVAR 42
32974: PUSH
32975: LD_INT 27
32977: ST_TO_ADDR
32978: GO 33057
32980: LD_INT 31
32982: DOUBLE
32983: EQUAL
32984: IFTRUE 32988
32986: GO 32999
32988: POP
// bc_type := b_oil_power ; 32 :
32989: LD_ADDR_OWVAR 42
32993: PUSH
32994: LD_INT 26
32996: ST_TO_ADDR
32997: GO 33057
32999: LD_INT 32
33001: DOUBLE
33002: EQUAL
33003: IFTRUE 33007
33005: GO 33018
33007: POP
// bc_type := b_siberite_power ; 33 :
33008: LD_ADDR_OWVAR 42
33012: PUSH
33013: LD_INT 28
33015: ST_TO_ADDR
33016: GO 33057
33018: LD_INT 33
33020: DOUBLE
33021: EQUAL
33022: IFTRUE 33026
33024: GO 33037
33026: POP
// bc_type := b_oil_mine ; 34 :
33027: LD_ADDR_OWVAR 42
33031: PUSH
33032: LD_INT 29
33034: ST_TO_ADDR
33035: GO 33057
33037: LD_INT 34
33039: DOUBLE
33040: EQUAL
33041: IFTRUE 33045
33043: GO 33056
33045: POP
// bc_type := b_siberite_mine ; end ;
33046: LD_ADDR_OWVAR 42
33050: PUSH
33051: LD_INT 30
33053: ST_TO_ADDR
33054: GO 33057
33056: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33057: LD_ADDR_VAR 0 8
33061: PUSH
33062: LD_VAR 0 5
33066: PPUSH
33067: LD_VAR 0 6
33071: PPUSH
33072: LD_VAR 0 3
33076: PPUSH
33077: CALL_OW 47
33081: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33082: LD_OWVAR 42
33086: PUSH
33087: LD_INT 32
33089: PUSH
33090: LD_INT 33
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: IN
33097: IFFALSE 33113
// PlaceWeaponTurret ( b , weapon ) ;
33099: LD_VAR 0 8
33103: PPUSH
33104: LD_VAR 0 4
33108: PPUSH
33109: CALL_OW 431
// end ;
33113: LD_VAR 0 7
33117: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33118: LD_INT 0
33120: PPUSH
33121: PPUSH
33122: PPUSH
33123: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33124: LD_ADDR_VAR 0 4
33128: PUSH
33129: LD_INT 22
33131: PUSH
33132: LD_OWVAR 2
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 2
33143: PUSH
33144: LD_INT 30
33146: PUSH
33147: LD_INT 0
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 30
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: LIST
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PPUSH
33173: CALL_OW 69
33177: ST_TO_ADDR
// if not tmp then
33178: LD_VAR 0 4
33182: NOT
33183: IFFALSE 33187
// exit ;
33185: GO 33246
// for i in tmp do
33187: LD_ADDR_VAR 0 2
33191: PUSH
33192: LD_VAR 0 4
33196: PUSH
33197: FOR_IN
33198: IFFALSE 33244
// for j = 1 to 3 do
33200: LD_ADDR_VAR 0 3
33204: PUSH
33205: DOUBLE
33206: LD_INT 1
33208: DEC
33209: ST_TO_ADDR
33210: LD_INT 3
33212: PUSH
33213: FOR_TO
33214: IFFALSE 33240
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33216: LD_VAR 0 2
33220: PPUSH
33221: CALL_OW 274
33225: PPUSH
33226: LD_VAR 0 3
33230: PPUSH
33231: LD_INT 99999
33233: PPUSH
33234: CALL_OW 277
33238: GO 33213
33240: POP
33241: POP
33242: GO 33197
33244: POP
33245: POP
// end ;
33246: LD_VAR 0 1
33250: RET
// export function hHackSetLevel10 ; var i , j ; begin
33251: LD_INT 0
33253: PPUSH
33254: PPUSH
33255: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33256: LD_ADDR_VAR 0 2
33260: PUSH
33261: LD_INT 21
33263: PUSH
33264: LD_INT 1
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PPUSH
33271: CALL_OW 69
33275: PUSH
33276: FOR_IN
33277: IFFALSE 33329
// if IsSelected ( i ) then
33279: LD_VAR 0 2
33283: PPUSH
33284: CALL_OW 306
33288: IFFALSE 33327
// begin for j := 1 to 4 do
33290: LD_ADDR_VAR 0 3
33294: PUSH
33295: DOUBLE
33296: LD_INT 1
33298: DEC
33299: ST_TO_ADDR
33300: LD_INT 4
33302: PUSH
33303: FOR_TO
33304: IFFALSE 33325
// SetSkill ( i , j , 10 ) ;
33306: LD_VAR 0 2
33310: PPUSH
33311: LD_VAR 0 3
33315: PPUSH
33316: LD_INT 10
33318: PPUSH
33319: CALL_OW 237
33323: GO 33303
33325: POP
33326: POP
// end ;
33327: GO 33276
33329: POP
33330: POP
// end ;
33331: LD_VAR 0 1
33335: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33336: LD_INT 0
33338: PPUSH
33339: PPUSH
33340: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33341: LD_ADDR_VAR 0 2
33345: PUSH
33346: LD_INT 22
33348: PUSH
33349: LD_OWVAR 2
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 21
33360: PUSH
33361: LD_INT 1
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PPUSH
33372: CALL_OW 69
33376: PUSH
33377: FOR_IN
33378: IFFALSE 33419
// begin for j := 1 to 4 do
33380: LD_ADDR_VAR 0 3
33384: PUSH
33385: DOUBLE
33386: LD_INT 1
33388: DEC
33389: ST_TO_ADDR
33390: LD_INT 4
33392: PUSH
33393: FOR_TO
33394: IFFALSE 33415
// SetSkill ( i , j , 10 ) ;
33396: LD_VAR 0 2
33400: PPUSH
33401: LD_VAR 0 3
33405: PPUSH
33406: LD_INT 10
33408: PPUSH
33409: CALL_OW 237
33413: GO 33393
33415: POP
33416: POP
// end ;
33417: GO 33377
33419: POP
33420: POP
// end ;
33421: LD_VAR 0 1
33425: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33426: LD_INT 0
33428: PPUSH
// uc_side := your_side ;
33429: LD_ADDR_OWVAR 20
33433: PUSH
33434: LD_OWVAR 2
33438: ST_TO_ADDR
// uc_nation := nation ;
33439: LD_ADDR_OWVAR 21
33443: PUSH
33444: LD_VAR 0 1
33448: ST_TO_ADDR
// InitHc ;
33449: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33453: LD_INT 0
33455: PPUSH
33456: LD_VAR 0 2
33460: PPUSH
33461: LD_VAR 0 3
33465: PPUSH
33466: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33470: LD_VAR 0 4
33474: PPUSH
33475: LD_VAR 0 5
33479: PPUSH
33480: CALL_OW 428
33484: PUSH
33485: LD_INT 0
33487: EQUAL
33488: IFFALSE 33512
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33490: CALL_OW 44
33494: PPUSH
33495: LD_VAR 0 4
33499: PPUSH
33500: LD_VAR 0 5
33504: PPUSH
33505: LD_INT 1
33507: PPUSH
33508: CALL_OW 48
// end ;
33512: LD_VAR 0 6
33516: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33517: LD_INT 0
33519: PPUSH
33520: PPUSH
// uc_side := your_side ;
33521: LD_ADDR_OWVAR 20
33525: PUSH
33526: LD_OWVAR 2
33530: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33531: LD_VAR 0 1
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: LD_INT 2
33541: PUSH
33542: LD_INT 3
33544: PUSH
33545: LD_INT 4
33547: PUSH
33548: LD_INT 5
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: IN
33558: IFFALSE 33570
// uc_nation := nation_american else
33560: LD_ADDR_OWVAR 21
33564: PUSH
33565: LD_INT 1
33567: ST_TO_ADDR
33568: GO 33613
// if chassis in [ 11 , 12 , 13 , 14 ] then
33570: LD_VAR 0 1
33574: PUSH
33575: LD_INT 11
33577: PUSH
33578: LD_INT 12
33580: PUSH
33581: LD_INT 13
33583: PUSH
33584: LD_INT 14
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: IN
33593: IFFALSE 33605
// uc_nation := nation_arabian else
33595: LD_ADDR_OWVAR 21
33599: PUSH
33600: LD_INT 2
33602: ST_TO_ADDR
33603: GO 33613
// uc_nation := nation_russian ;
33605: LD_ADDR_OWVAR 21
33609: PUSH
33610: LD_INT 3
33612: ST_TO_ADDR
// vc_chassis := chassis ;
33613: LD_ADDR_OWVAR 37
33617: PUSH
33618: LD_VAR 0 1
33622: ST_TO_ADDR
// vc_engine := engine ;
33623: LD_ADDR_OWVAR 39
33627: PUSH
33628: LD_VAR 0 2
33632: ST_TO_ADDR
// vc_control := control ;
33633: LD_ADDR_OWVAR 38
33637: PUSH
33638: LD_VAR 0 3
33642: ST_TO_ADDR
// vc_weapon := weapon ;
33643: LD_ADDR_OWVAR 40
33647: PUSH
33648: LD_VAR 0 4
33652: ST_TO_ADDR
// un := CreateVehicle ;
33653: LD_ADDR_VAR 0 8
33657: PUSH
33658: CALL_OW 45
33662: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33663: LD_VAR 0 8
33667: PPUSH
33668: LD_INT 0
33670: PPUSH
33671: LD_INT 5
33673: PPUSH
33674: CALL_OW 12
33678: PPUSH
33679: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33683: LD_VAR 0 8
33687: PPUSH
33688: LD_VAR 0 5
33692: PPUSH
33693: LD_VAR 0 6
33697: PPUSH
33698: LD_INT 1
33700: PPUSH
33701: CALL_OW 48
// end ;
33705: LD_VAR 0 7
33709: RET
// export hInvincible ; every 1 do
33710: GO 33712
33712: DISABLE
// hInvincible := [ ] ;
33713: LD_ADDR_EXP 120
33717: PUSH
33718: EMPTY
33719: ST_TO_ADDR
33720: END
// every 10 do var i ;
33721: GO 33723
33723: DISABLE
33724: LD_INT 0
33726: PPUSH
// begin enable ;
33727: ENABLE
// if not hInvincible then
33728: LD_EXP 120
33732: NOT
33733: IFFALSE 33737
// exit ;
33735: GO 33781
// for i in hInvincible do
33737: LD_ADDR_VAR 0 1
33741: PUSH
33742: LD_EXP 120
33746: PUSH
33747: FOR_IN
33748: IFFALSE 33779
// if GetLives ( i ) < 1000 then
33750: LD_VAR 0 1
33754: PPUSH
33755: CALL_OW 256
33759: PUSH
33760: LD_INT 1000
33762: LESS
33763: IFFALSE 33777
// SetLives ( i , 1000 ) ;
33765: LD_VAR 0 1
33769: PPUSH
33770: LD_INT 1000
33772: PPUSH
33773: CALL_OW 234
33777: GO 33747
33779: POP
33780: POP
// end ;
33781: PPOPN 1
33783: END
// export function hHackInvincible ; var i ; begin
33784: LD_INT 0
33786: PPUSH
33787: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33788: LD_ADDR_VAR 0 2
33792: PUSH
33793: LD_INT 2
33795: PUSH
33796: LD_INT 21
33798: PUSH
33799: LD_INT 1
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 21
33808: PUSH
33809: LD_INT 2
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: LIST
33820: PPUSH
33821: CALL_OW 69
33825: PUSH
33826: FOR_IN
33827: IFFALSE 33888
// if IsSelected ( i ) then
33829: LD_VAR 0 2
33833: PPUSH
33834: CALL_OW 306
33838: IFFALSE 33886
// begin if i in hInvincible then
33840: LD_VAR 0 2
33844: PUSH
33845: LD_EXP 120
33849: IN
33850: IFFALSE 33870
// hInvincible := hInvincible diff i else
33852: LD_ADDR_EXP 120
33856: PUSH
33857: LD_EXP 120
33861: PUSH
33862: LD_VAR 0 2
33866: DIFF
33867: ST_TO_ADDR
33868: GO 33886
// hInvincible := hInvincible union i ;
33870: LD_ADDR_EXP 120
33874: PUSH
33875: LD_EXP 120
33879: PUSH
33880: LD_VAR 0 2
33884: UNION
33885: ST_TO_ADDR
// end ;
33886: GO 33826
33888: POP
33889: POP
// end ;
33890: LD_VAR 0 1
33894: RET
// export function hHackInvisible ; var i , j ; begin
33895: LD_INT 0
33897: PPUSH
33898: PPUSH
33899: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33900: LD_ADDR_VAR 0 2
33904: PUSH
33905: LD_INT 21
33907: PUSH
33908: LD_INT 1
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PPUSH
33915: CALL_OW 69
33919: PUSH
33920: FOR_IN
33921: IFFALSE 33945
// if IsSelected ( i ) then
33923: LD_VAR 0 2
33927: PPUSH
33928: CALL_OW 306
33932: IFFALSE 33943
// ComForceInvisible ( i ) ;
33934: LD_VAR 0 2
33938: PPUSH
33939: CALL_OW 496
33943: GO 33920
33945: POP
33946: POP
// end ;
33947: LD_VAR 0 1
33951: RET
// export function hHackChangeYourSide ; begin
33952: LD_INT 0
33954: PPUSH
// if your_side = 8 then
33955: LD_OWVAR 2
33959: PUSH
33960: LD_INT 8
33962: EQUAL
33963: IFFALSE 33975
// your_side := 0 else
33965: LD_ADDR_OWVAR 2
33969: PUSH
33970: LD_INT 0
33972: ST_TO_ADDR
33973: GO 33989
// your_side := your_side + 1 ;
33975: LD_ADDR_OWVAR 2
33979: PUSH
33980: LD_OWVAR 2
33984: PUSH
33985: LD_INT 1
33987: PLUS
33988: ST_TO_ADDR
// end ;
33989: LD_VAR 0 1
33993: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33994: LD_INT 0
33996: PPUSH
33997: PPUSH
33998: PPUSH
// for i in all_units do
33999: LD_ADDR_VAR 0 2
34003: PUSH
34004: LD_OWVAR 3
34008: PUSH
34009: FOR_IN
34010: IFFALSE 34088
// if IsSelected ( i ) then
34012: LD_VAR 0 2
34016: PPUSH
34017: CALL_OW 306
34021: IFFALSE 34086
// begin j := GetSide ( i ) ;
34023: LD_ADDR_VAR 0 3
34027: PUSH
34028: LD_VAR 0 2
34032: PPUSH
34033: CALL_OW 255
34037: ST_TO_ADDR
// if j = 8 then
34038: LD_VAR 0 3
34042: PUSH
34043: LD_INT 8
34045: EQUAL
34046: IFFALSE 34058
// j := 0 else
34048: LD_ADDR_VAR 0 3
34052: PUSH
34053: LD_INT 0
34055: ST_TO_ADDR
34056: GO 34072
// j := j + 1 ;
34058: LD_ADDR_VAR 0 3
34062: PUSH
34063: LD_VAR 0 3
34067: PUSH
34068: LD_INT 1
34070: PLUS
34071: ST_TO_ADDR
// SetSide ( i , j ) ;
34072: LD_VAR 0 2
34076: PPUSH
34077: LD_VAR 0 3
34081: PPUSH
34082: CALL_OW 235
// end ;
34086: GO 34009
34088: POP
34089: POP
// end ;
34090: LD_VAR 0 1
34094: RET
// export function hHackFog ; begin
34095: LD_INT 0
34097: PPUSH
// FogOff ( true ) ;
34098: LD_INT 1
34100: PPUSH
34101: CALL_OW 344
// end ;
34105: LD_VAR 0 1
34109: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34110: LD_INT 0
34112: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34113: LD_VAR 0 1
34117: PPUSH
34118: LD_VAR 0 2
34122: PPUSH
34123: LD_VAR 0 3
34127: PPUSH
34128: LD_INT 1
34130: PPUSH
34131: LD_INT 1
34133: PPUSH
34134: CALL_OW 483
// CenterOnXY ( x , y ) ;
34138: LD_VAR 0 2
34142: PPUSH
34143: LD_VAR 0 3
34147: PPUSH
34148: CALL_OW 84
// end ;
34152: LD_VAR 0 4
34156: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34157: LD_INT 0
34159: PPUSH
34160: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34161: LD_VAR 0 1
34165: NOT
34166: IFTRUE 34185
34168: PUSH
34169: LD_VAR 0 2
34173: PPUSH
34174: LD_VAR 0 3
34178: PPUSH
34179: CALL_OW 488
34183: NOT
34184: OR
34185: IFTRUE 34220
34187: PUSH
34188: LD_VAR 0 1
34192: PPUSH
34193: CALL_OW 266
34197: PUSH
34198: LD_INT 3
34200: NONEQUAL
34201: IFFALSE 34219
34203: PUSH
34204: LD_VAR 0 1
34208: PPUSH
34209: CALL_OW 247
34213: PUSH
34214: LD_INT 1
34216: EQUAL
34217: NOT
34218: AND
34219: OR
34220: IFFALSE 34224
// exit ;
34222: GO 34506
// if GetType ( factory ) = unit_human then
34224: LD_VAR 0 1
34228: PPUSH
34229: CALL_OW 247
34233: PUSH
34234: LD_INT 1
34236: EQUAL
34237: IFFALSE 34254
// factory := IsInUnit ( factory ) ;
34239: LD_ADDR_VAR 0 1
34243: PUSH
34244: LD_VAR 0 1
34248: PPUSH
34249: CALL_OW 310
34253: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34254: LD_VAR 0 1
34258: PPUSH
34259: CALL_OW 266
34263: PUSH
34264: LD_INT 3
34266: NONEQUAL
34267: IFFALSE 34271
// exit ;
34269: GO 34506
// for i := 1 to Count ( factoryWaypoints ) do
34271: LD_ADDR_VAR 0 5
34275: PUSH
34276: DOUBLE
34277: LD_INT 1
34279: DEC
34280: ST_TO_ADDR
34281: LD_EXP 121
34285: PPUSH
34286: CALL 43238 0 1
34290: PUSH
34291: FOR_TO
34292: IFFALSE 34454
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34294: LD_VAR 0 2
34298: PPUSH
34299: LD_VAR 0 3
34303: PPUSH
34304: CALL_OW 428
34308: PUSH
34309: LD_EXP 121
34313: PUSH
34314: LD_VAR 0 5
34318: ARRAY
34319: PUSH
34320: LD_INT 2
34322: ARRAY
34323: EQUAL
34324: IFFALSE 34356
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34326: LD_ADDR_EXP 121
34330: PUSH
34331: LD_EXP 121
34335: PPUSH
34336: LD_VAR 0 5
34340: PPUSH
34341: CALL_OW 3
34345: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34346: CALL 34511 0 0
// exit ;
34350: POP
34351: POP
34352: GO 34506
// end else
34354: GO 34452
// if factory = factoryWaypoints [ i ] [ 2 ] then
34356: LD_VAR 0 1
34360: PUSH
34361: LD_EXP 121
34365: PUSH
34366: LD_VAR 0 5
34370: ARRAY
34371: PUSH
34372: LD_INT 2
34374: ARRAY
34375: EQUAL
34376: IFFALSE 34452
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34378: LD_ADDR_EXP 121
34382: PUSH
34383: LD_EXP 121
34387: PPUSH
34388: LD_VAR 0 5
34392: PPUSH
34393: CALL_OW 3
34397: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34398: LD_ADDR_EXP 121
34402: PUSH
34403: LD_EXP 121
34407: PPUSH
34408: LD_VAR 0 1
34412: PPUSH
34413: CALL_OW 255
34417: PUSH
34418: LD_VAR 0 1
34422: PUSH
34423: LD_VAR 0 2
34427: PUSH
34428: LD_VAR 0 3
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: PPUSH
34439: CALL 79170 0 2
34443: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34444: CALL 34511 0 0
// exit ;
34448: POP
34449: POP
34450: GO 34506
// end ; end ;
34452: GO 34291
34454: POP
34455: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34456: LD_ADDR_EXP 121
34460: PUSH
34461: LD_EXP 121
34465: PPUSH
34466: LD_VAR 0 1
34470: PPUSH
34471: CALL_OW 255
34475: PUSH
34476: LD_VAR 0 1
34480: PUSH
34481: LD_VAR 0 2
34485: PUSH
34486: LD_VAR 0 3
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: PPUSH
34497: CALL 79170 0 2
34501: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34502: CALL 34511 0 0
// end ;
34506: LD_VAR 0 4
34510: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34511: LD_INT 0
34513: PPUSH
34514: PPUSH
34515: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34516: LD_STRING resetFactoryWaypoint();
34518: PPUSH
34519: CALL_OW 559
// if factoryWaypoints then
34523: LD_EXP 121
34527: IFFALSE 34648
// begin list := factoryWaypoints ;
34529: LD_ADDR_VAR 0 3
34533: PUSH
34534: LD_EXP 121
34538: ST_TO_ADDR
// for i := 1 to list do
34539: LD_ADDR_VAR 0 2
34543: PUSH
34544: DOUBLE
34545: LD_INT 1
34547: DEC
34548: ST_TO_ADDR
34549: LD_VAR 0 3
34553: PUSH
34554: FOR_TO
34555: IFFALSE 34646
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34557: LD_STRING setFactoryWaypointXY(
34559: PUSH
34560: LD_VAR 0 3
34564: PUSH
34565: LD_VAR 0 2
34569: ARRAY
34570: PUSH
34571: LD_INT 1
34573: ARRAY
34574: STR
34575: PUSH
34576: LD_STRING ,
34578: STR
34579: PUSH
34580: LD_VAR 0 3
34584: PUSH
34585: LD_VAR 0 2
34589: ARRAY
34590: PUSH
34591: LD_INT 2
34593: ARRAY
34594: STR
34595: PUSH
34596: LD_STRING ,
34598: STR
34599: PUSH
34600: LD_VAR 0 3
34604: PUSH
34605: LD_VAR 0 2
34609: ARRAY
34610: PUSH
34611: LD_INT 3
34613: ARRAY
34614: STR
34615: PUSH
34616: LD_STRING ,
34618: STR
34619: PUSH
34620: LD_VAR 0 3
34624: PUSH
34625: LD_VAR 0 2
34629: ARRAY
34630: PUSH
34631: LD_INT 4
34633: ARRAY
34634: STR
34635: PUSH
34636: LD_STRING )
34638: STR
34639: PPUSH
34640: CALL_OW 559
34644: GO 34554
34646: POP
34647: POP
// end ; end ;
34648: LD_VAR 0 1
34652: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34653: LD_INT 0
34655: PPUSH
// if HexInfo ( x , y ) = warehouse then
34656: LD_VAR 0 2
34660: PPUSH
34661: LD_VAR 0 3
34665: PPUSH
34666: CALL_OW 428
34670: PUSH
34671: LD_VAR 0 1
34675: EQUAL
34676: IFFALSE 34703
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34678: LD_ADDR_EXP 123
34682: PUSH
34683: LD_EXP 123
34687: PPUSH
34688: LD_VAR 0 1
34692: PPUSH
34693: LD_INT 0
34695: PPUSH
34696: CALL_OW 1
34700: ST_TO_ADDR
34701: GO 34754
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34703: LD_ADDR_EXP 123
34707: PUSH
34708: LD_EXP 123
34712: PPUSH
34713: LD_VAR 0 1
34717: PPUSH
34718: LD_VAR 0 1
34722: PPUSH
34723: CALL_OW 255
34727: PUSH
34728: LD_VAR 0 1
34732: PUSH
34733: LD_VAR 0 2
34737: PUSH
34738: LD_VAR 0 3
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: PPUSH
34749: CALL_OW 1
34753: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34754: CALL 34763 0 0
// end ;
34758: LD_VAR 0 4
34762: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34763: LD_INT 0
34765: PPUSH
34766: PPUSH
34767: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34768: LD_STRING resetWarehouseGatheringPoints();
34770: PPUSH
34771: CALL_OW 559
// if warehouseGatheringPoints then
34775: LD_EXP 123
34779: IFFALSE 34905
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34781: LD_ADDR_VAR 0 3
34785: PUSH
34786: LD_EXP 123
34790: PPUSH
34791: CALL 83104 0 1
34795: ST_TO_ADDR
// for i := 1 to list do
34796: LD_ADDR_VAR 0 2
34800: PUSH
34801: DOUBLE
34802: LD_INT 1
34804: DEC
34805: ST_TO_ADDR
34806: LD_VAR 0 3
34810: PUSH
34811: FOR_TO
34812: IFFALSE 34903
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34814: LD_STRING setWarehouseGatheringPointXY(
34816: PUSH
34817: LD_VAR 0 3
34821: PUSH
34822: LD_VAR 0 2
34826: ARRAY
34827: PUSH
34828: LD_INT 1
34830: ARRAY
34831: STR
34832: PUSH
34833: LD_STRING ,
34835: STR
34836: PUSH
34837: LD_VAR 0 3
34841: PUSH
34842: LD_VAR 0 2
34846: ARRAY
34847: PUSH
34848: LD_INT 2
34850: ARRAY
34851: STR
34852: PUSH
34853: LD_STRING ,
34855: STR
34856: PUSH
34857: LD_VAR 0 3
34861: PUSH
34862: LD_VAR 0 2
34866: ARRAY
34867: PUSH
34868: LD_INT 3
34870: ARRAY
34871: STR
34872: PUSH
34873: LD_STRING ,
34875: STR
34876: PUSH
34877: LD_VAR 0 3
34881: PUSH
34882: LD_VAR 0 2
34886: ARRAY
34887: PUSH
34888: LD_INT 4
34890: ARRAY
34891: STR
34892: PUSH
34893: LD_STRING )
34895: STR
34896: PPUSH
34897: CALL_OW 559
34901: GO 34811
34903: POP
34904: POP
// end ; end ;
34905: LD_VAR 0 1
34909: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34910: LD_EXP 123
34914: IFFALSE 35609
34916: GO 34918
34918: DISABLE
34919: LD_INT 0
34921: PPUSH
34922: PPUSH
34923: PPUSH
34924: PPUSH
34925: PPUSH
34926: PPUSH
34927: PPUSH
34928: PPUSH
34929: PPUSH
// begin enable ;
34930: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34931: LD_ADDR_VAR 0 3
34935: PUSH
34936: LD_EXP 123
34940: PPUSH
34941: CALL 83104 0 1
34945: ST_TO_ADDR
// if not list then
34946: LD_VAR 0 3
34950: NOT
34951: IFFALSE 34955
// exit ;
34953: GO 35609
// for i := 1 to list do
34955: LD_ADDR_VAR 0 1
34959: PUSH
34960: DOUBLE
34961: LD_INT 1
34963: DEC
34964: ST_TO_ADDR
34965: LD_VAR 0 3
34969: PUSH
34970: FOR_TO
34971: IFFALSE 35607
// begin depot := list [ i ] [ 2 ] ;
34973: LD_ADDR_VAR 0 8
34977: PUSH
34978: LD_VAR 0 3
34982: PUSH
34983: LD_VAR 0 1
34987: ARRAY
34988: PUSH
34989: LD_INT 2
34991: ARRAY
34992: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34993: LD_ADDR_VAR 0 5
34997: PUSH
34998: LD_VAR 0 3
35002: PUSH
35003: LD_VAR 0 1
35007: ARRAY
35008: PUSH
35009: LD_INT 1
35011: ARRAY
35012: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35013: LD_VAR 0 8
35017: PPUSH
35018: CALL_OW 301
35022: IFTRUE 35041
35024: PUSH
35025: LD_VAR 0 5
35029: PUSH
35030: LD_VAR 0 8
35034: PPUSH
35035: CALL_OW 255
35039: NONEQUAL
35040: OR
35041: IFFALSE 35070
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35043: LD_ADDR_EXP 123
35047: PUSH
35048: LD_EXP 123
35052: PPUSH
35053: LD_VAR 0 8
35057: PPUSH
35058: LD_INT 0
35060: PPUSH
35061: CALL_OW 1
35065: ST_TO_ADDR
// exit ;
35066: POP
35067: POP
35068: GO 35609
// end ; x := list [ i ] [ 3 ] ;
35070: LD_ADDR_VAR 0 6
35074: PUSH
35075: LD_VAR 0 3
35079: PUSH
35080: LD_VAR 0 1
35084: ARRAY
35085: PUSH
35086: LD_INT 3
35088: ARRAY
35089: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35090: LD_ADDR_VAR 0 7
35094: PUSH
35095: LD_VAR 0 3
35099: PUSH
35100: LD_VAR 0 1
35104: ARRAY
35105: PUSH
35106: LD_INT 4
35108: ARRAY
35109: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35110: LD_ADDR_VAR 0 9
35114: PUSH
35115: LD_VAR 0 6
35119: PPUSH
35120: LD_VAR 0 7
35124: PPUSH
35125: LD_INT 16
35127: PPUSH
35128: CALL 81678 0 3
35132: ST_TO_ADDR
// if not cratesNearbyPoint then
35133: LD_VAR 0 9
35137: NOT
35138: IFFALSE 35144
// exit ;
35140: POP
35141: POP
35142: GO 35609
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35144: LD_ADDR_VAR 0 4
35148: PUSH
35149: LD_INT 22
35151: PUSH
35152: LD_VAR 0 5
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 3
35163: PUSH
35164: LD_INT 60
35166: PUSH
35167: EMPTY
35168: LIST
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 91
35176: PUSH
35177: LD_VAR 0 8
35181: PUSH
35182: LD_INT 6
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 2
35192: PUSH
35193: LD_INT 25
35195: PUSH
35196: LD_INT 2
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 25
35205: PUSH
35206: LD_INT 16
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: LIST
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: PPUSH
35224: CALL_OW 69
35228: PUSH
35229: LD_VAR 0 8
35233: PPUSH
35234: CALL_OW 313
35238: PPUSH
35239: LD_INT 3
35241: PUSH
35242: LD_INT 60
35244: PUSH
35245: EMPTY
35246: LIST
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 2
35254: PUSH
35255: LD_INT 25
35257: PUSH
35258: LD_INT 2
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 25
35267: PUSH
35268: LD_INT 16
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: LIST
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PPUSH
35284: CALL_OW 72
35288: UNION
35289: ST_TO_ADDR
// if tmp then
35290: LD_VAR 0 4
35294: IFFALSE 35374
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35296: LD_ADDR_VAR 0 4
35300: PUSH
35301: LD_VAR 0 4
35305: PPUSH
35306: LD_INT 3
35308: PPUSH
35309: CALL 79485 0 2
35313: ST_TO_ADDR
// for j in tmp do
35314: LD_ADDR_VAR 0 2
35318: PUSH
35319: LD_VAR 0 4
35323: PUSH
35324: FOR_IN
35325: IFFALSE 35368
// begin if IsInUnit ( j ) then
35327: LD_VAR 0 2
35331: PPUSH
35332: CALL_OW 310
35336: IFFALSE 35347
// ComExit ( j ) ;
35338: LD_VAR 0 2
35342: PPUSH
35343: CALL 79568 0 1
// AddComCollect ( j , x , y ) ;
35347: LD_VAR 0 2
35351: PPUSH
35352: LD_VAR 0 6
35356: PPUSH
35357: LD_VAR 0 7
35361: PPUSH
35362: CALL_OW 177
// end ;
35366: GO 35324
35368: POP
35369: POP
// exit ;
35370: POP
35371: POP
35372: GO 35609
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35374: LD_ADDR_VAR 0 4
35378: PUSH
35379: LD_INT 22
35381: PUSH
35382: LD_VAR 0 5
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 91
35393: PUSH
35394: LD_VAR 0 8
35398: PUSH
35399: LD_INT 8
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 2
35409: PUSH
35410: LD_INT 34
35412: PUSH
35413: LD_INT 12
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 34
35422: PUSH
35423: LD_INT 51
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 34
35432: PUSH
35433: LD_INT 32
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 34
35442: PUSH
35443: LD_INT 89
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: PPUSH
35462: CALL_OW 69
35466: ST_TO_ADDR
// if tmp then
35467: LD_VAR 0 4
35471: IFFALSE 35605
// begin for j in tmp do
35473: LD_ADDR_VAR 0 2
35477: PUSH
35478: LD_VAR 0 4
35482: PUSH
35483: FOR_IN
35484: IFFALSE 35603
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35486: LD_VAR 0 2
35490: PPUSH
35491: CALL_OW 262
35495: PUSH
35496: LD_INT 3
35498: EQUAL
35499: IFTRUE 35516
35501: PUSH
35502: LD_VAR 0 2
35506: PPUSH
35507: CALL_OW 261
35511: PUSH
35512: LD_INT 20
35514: GREATER
35515: OR
35516: IFFALSE 35530
35518: PUSH
35519: LD_VAR 0 2
35523: PPUSH
35524: CALL_OW 314
35528: NOT
35529: AND
35530: IFFALSE 35560
35532: PUSH
35533: LD_VAR 0 2
35537: PPUSH
35538: CALL_OW 263
35542: PUSH
35543: LD_INT 1
35545: NONEQUAL
35546: IFTRUE 35559
35548: PUSH
35549: LD_VAR 0 2
35553: PPUSH
35554: CALL_OW 311
35558: OR
35559: AND
35560: IFFALSE 35601
// begin ComCollect ( j , x , y ) ;
35562: LD_VAR 0 2
35566: PPUSH
35567: LD_VAR 0 6
35571: PPUSH
35572: LD_VAR 0 7
35576: PPUSH
35577: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35581: LD_VAR 0 2
35585: PPUSH
35586: LD_VAR 0 8
35590: PPUSH
35591: CALL_OW 172
// exit ;
35595: POP
35596: POP
35597: POP
35598: POP
35599: GO 35609
// end ;
35601: GO 35483
35603: POP
35604: POP
// end ; end ;
35605: GO 34970
35607: POP
35608: POP
// end ; end_of_file
35609: PPOPN 9
35611: END
// export function SOS_UnitDestroyed ( un ) ; begin
35612: LD_INT 0
35614: PPUSH
// ComRadiation ( un ) ;
35615: LD_VAR 0 1
35619: PPUSH
35620: CALL 36701 0 1
// end ;
35624: LD_VAR 0 2
35628: RET
// export function SOS_UnitKamikazed ( un ) ; begin
35629: LD_INT 0
35631: PPUSH
// ComRadiation ( un ) ;
35632: LD_VAR 0 1
35636: PPUSH
35637: CALL 36701 0 1
// end ;
35641: LD_VAR 0 2
35645: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35646: LD_INT 0
35648: PPUSH
// end ;
35649: LD_VAR 0 4
35653: RET
// export function SOS_Command ( cmd ) ; begin
35654: LD_INT 0
35656: PPUSH
// end ;
35657: LD_VAR 0 2
35661: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35662: LD_INT 0
35664: PPUSH
// end ;
35665: LD_VAR 0 6
35669: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
35670: LD_INT 0
35672: PPUSH
35673: PPUSH
35674: PPUSH
35675: PPUSH
// if not vehicle or not factory then
35676: LD_VAR 0 1
35680: NOT
35681: IFTRUE 35690
35683: PUSH
35684: LD_VAR 0 2
35688: NOT
35689: OR
35690: IFFALSE 35694
// exit ;
35692: GO 36276
// if not factoryWaypoints then
35694: LD_EXP 121
35698: NOT
35699: IFFALSE 35703
// exit ;
35701: GO 36276
// for i := 1 to Count ( factoryWaypoints ) do
35703: LD_ADDR_VAR 0 4
35707: PUSH
35708: DOUBLE
35709: LD_INT 1
35711: DEC
35712: ST_TO_ADDR
35713: LD_EXP 121
35717: PPUSH
35718: CALL 43238 0 1
35722: PUSH
35723: FOR_TO
35724: IFFALSE 36274
// if factoryWaypoints [ i ] [ 2 ] = factory then
35726: LD_EXP 121
35730: PUSH
35731: LD_VAR 0 4
35735: ARRAY
35736: PUSH
35737: LD_INT 2
35739: ARRAY
35740: PUSH
35741: LD_VAR 0 2
35745: EQUAL
35746: IFFALSE 36272
// begin if GetControl ( vehicle ) = control_manual then
35748: LD_VAR 0 1
35752: PPUSH
35753: CALL_OW 263
35757: PUSH
35758: LD_INT 1
35760: EQUAL
35761: IFFALSE 36125
// begin driver := IsDrivenBy ( vehicle ) ;
35763: LD_ADDR_VAR 0 5
35767: PUSH
35768: LD_VAR 0 1
35772: PPUSH
35773: CALL_OW 311
35777: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
35778: LD_VAR 0 5
35782: PUSH
35783: LD_EXP 122
35787: IN
35788: IFTRUE 35802
35790: PUSH
35791: LD_VAR 0 1
35795: PUSH
35796: LD_EXP 122
35800: IN
35801: OR
35802: IFFALSE 35808
// exit ;
35804: POP
35805: POP
35806: GO 36276
// if not HasTask ( driver ) then
35808: LD_VAR 0 5
35812: PPUSH
35813: CALL_OW 314
35817: NOT
35818: IFFALSE 36123
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
35820: LD_ADDR_EXP 122
35824: PUSH
35825: LD_EXP 122
35829: PPUSH
35830: LD_VAR 0 5
35834: PPUSH
35835: CALL 79170 0 2
35839: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
35840: LD_ADDR_EXP 122
35844: PUSH
35845: LD_EXP 122
35849: PPUSH
35850: LD_VAR 0 1
35854: PPUSH
35855: CALL 79170 0 2
35859: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35860: LD_ADDR_VAR 0 6
35864: PUSH
35865: LD_EXP 121
35869: PUSH
35870: LD_VAR 0 4
35874: ARRAY
35875: PUSH
35876: LD_INT 3
35878: ARRAY
35879: PPUSH
35880: LD_EXP 121
35884: PUSH
35885: LD_VAR 0 4
35889: ARRAY
35890: PUSH
35891: LD_INT 4
35893: ARRAY
35894: PPUSH
35895: CALL_OW 428
35899: ST_TO_ADDR
// if hex then
35900: LD_VAR 0 6
35904: IFFALSE 35922
// ComMoveUnit ( driver , hex ) else
35906: LD_VAR 0 5
35910: PPUSH
35911: LD_VAR 0 6
35915: PPUSH
35916: CALL_OW 112
35920: GO 36006
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
35922: LD_VAR 0 1
35926: PPUSH
35927: LD_EXP 121
35931: PUSH
35932: LD_VAR 0 4
35936: ARRAY
35937: PUSH
35938: LD_INT 3
35940: ARRAY
35941: PPUSH
35942: LD_EXP 121
35946: PUSH
35947: LD_VAR 0 4
35951: ARRAY
35952: PUSH
35953: LD_INT 4
35955: ARRAY
35956: PPUSH
35957: CALL_OW 297
35961: PUSH
35962: LD_INT 0
35964: GREATER
35965: IFFALSE 36006
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35967: LD_VAR 0 5
35971: PPUSH
35972: LD_EXP 121
35976: PUSH
35977: LD_VAR 0 4
35981: ARRAY
35982: PUSH
35983: LD_INT 3
35985: ARRAY
35986: PPUSH
35987: LD_EXP 121
35991: PUSH
35992: LD_VAR 0 4
35996: ARRAY
35997: PUSH
35998: LD_INT 4
36000: ARRAY
36001: PPUSH
36002: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36006: LD_VAR 0 5
36010: PPUSH
36011: CALL_OW 181
// if Multiplayer then
36015: LD_OWVAR 4
36019: IFFALSE 36068
// begin repeat wait ( 10 ) ;
36021: LD_INT 10
36023: PPUSH
36024: CALL_OW 67
// until not IsInUnit ( driver ) ;
36028: LD_VAR 0 5
36032: PPUSH
36033: CALL_OW 310
36037: NOT
36038: IFFALSE 36021
// if not HasTask ( driver ) then
36040: LD_VAR 0 5
36044: PPUSH
36045: CALL_OW 314
36049: NOT
36050: IFFALSE 36066
// ComEnterUnit ( driver , factory ) ;
36052: LD_VAR 0 5
36056: PPUSH
36057: LD_VAR 0 2
36061: PPUSH
36062: CALL_OW 120
// end else
36066: GO 36082
// AddComEnterUnit ( driver , factory ) ;
36068: LD_VAR 0 5
36072: PPUSH
36073: LD_VAR 0 2
36077: PPUSH
36078: CALL_OW 180
// wait ( 0 0$1 ) ;
36082: LD_INT 35
36084: PPUSH
36085: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
36089: LD_ADDR_EXP 122
36093: PUSH
36094: LD_EXP 122
36098: PUSH
36099: LD_VAR 0 5
36103: DIFF
36104: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
36105: LD_ADDR_EXP 122
36109: PUSH
36110: LD_EXP 122
36114: PUSH
36115: LD_VAR 0 1
36119: DIFF
36120: ST_TO_ADDR
// break ;
36121: GO 36274
// end ; end else
36123: GO 36272
// if GetControl ( vehicle ) = control_remote then
36125: LD_VAR 0 1
36129: PPUSH
36130: CALL_OW 263
36134: PUSH
36135: LD_INT 2
36137: EQUAL
36138: IFFALSE 36224
// begin wait ( 0 0$2 ) ;
36140: LD_INT 70
36142: PPUSH
36143: CALL_OW 67
// repeat wait ( 10 ) ;
36147: LD_INT 10
36149: PPUSH
36150: CALL_OW 67
// Connect ( vehicle ) ;
36154: LD_VAR 0 1
36158: PPUSH
36159: CALL 49482 0 1
// until IsControledBy ( vehicle ) ;
36163: LD_VAR 0 1
36167: PPUSH
36168: CALL_OW 312
36172: IFFALSE 36147
// wait ( 10 ) ;
36174: LD_INT 10
36176: PPUSH
36177: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36181: LD_VAR 0 1
36185: PPUSH
36186: LD_EXP 121
36190: PUSH
36191: LD_VAR 0 4
36195: ARRAY
36196: PUSH
36197: LD_INT 3
36199: ARRAY
36200: PPUSH
36201: LD_EXP 121
36205: PUSH
36206: LD_VAR 0 4
36210: ARRAY
36211: PUSH
36212: LD_INT 4
36214: ARRAY
36215: PPUSH
36216: CALL_OW 111
// break ;
36220: GO 36274
// end else
36222: GO 36272
// begin wait ( 0 0$3 ) ;
36224: LD_INT 105
36226: PPUSH
36227: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36231: LD_VAR 0 1
36235: PPUSH
36236: LD_EXP 121
36240: PUSH
36241: LD_VAR 0 4
36245: ARRAY
36246: PUSH
36247: LD_INT 3
36249: ARRAY
36250: PPUSH
36251: LD_EXP 121
36255: PUSH
36256: LD_VAR 0 4
36260: ARRAY
36261: PUSH
36262: LD_INT 4
36264: ARRAY
36265: PPUSH
36266: CALL_OW 111
// break ;
36270: GO 36274
// end ; end ;
36272: GO 35723
36274: POP
36275: POP
// end ;
36276: LD_VAR 0 3
36280: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36281: LD_INT 0
36283: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36284: LD_VAR 0 1
36288: PUSH
36289: LD_INT 250
36291: EQUAL
36292: IFFALSE 36309
36294: PUSH
36295: LD_VAR 0 2
36299: PPUSH
36300: CALL_OW 264
36304: PUSH
36305: LD_INT 81
36307: EQUAL
36308: AND
36309: IFFALSE 36330
// MinerPlaceMine ( unit , x , y ) ;
36311: LD_VAR 0 2
36315: PPUSH
36316: LD_VAR 0 4
36320: PPUSH
36321: LD_VAR 0 5
36325: PPUSH
36326: CALL 39462 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36330: LD_VAR 0 1
36334: PUSH
36335: LD_INT 251
36337: EQUAL
36338: IFFALSE 36355
36340: PUSH
36341: LD_VAR 0 2
36345: PPUSH
36346: CALL_OW 264
36350: PUSH
36351: LD_INT 81
36353: EQUAL
36354: AND
36355: IFFALSE 36376
// MinerDetonateMine ( unit , x , y ) ;
36357: LD_VAR 0 2
36361: PPUSH
36362: LD_VAR 0 4
36366: PPUSH
36367: LD_VAR 0 5
36371: PPUSH
36372: CALL 39741 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36376: LD_VAR 0 1
36380: PUSH
36381: LD_INT 252
36383: EQUAL
36384: IFFALSE 36401
36386: PUSH
36387: LD_VAR 0 2
36391: PPUSH
36392: CALL_OW 264
36396: PUSH
36397: LD_INT 81
36399: EQUAL
36400: AND
36401: IFFALSE 36422
// MinerCreateMinefield ( unit , x , y ) ;
36403: LD_VAR 0 2
36407: PPUSH
36408: LD_VAR 0 4
36412: PPUSH
36413: LD_VAR 0 5
36417: PPUSH
36418: CALL 40160 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36422: LD_VAR 0 1
36426: PUSH
36427: LD_INT 253
36429: EQUAL
36430: IFFALSE 36447
36432: PUSH
36433: LD_VAR 0 2
36437: PPUSH
36438: CALL_OW 257
36442: PUSH
36443: LD_INT 5
36445: EQUAL
36446: AND
36447: IFFALSE 36468
// ComBinocular ( unit , x , y ) ;
36449: LD_VAR 0 2
36453: PPUSH
36454: LD_VAR 0 4
36458: PPUSH
36459: LD_VAR 0 5
36463: PPUSH
36464: CALL 40535 0 3
// if selectedUnit then
36468: LD_VAR 0 3
36472: IFFALSE 36532
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36474: LD_VAR 0 1
36478: PUSH
36479: LD_INT 254
36481: EQUAL
36482: IFFALSE 36499
36484: PUSH
36485: LD_VAR 0 2
36489: PPUSH
36490: CALL_OW 264
36494: PUSH
36495: LD_INT 99
36497: EQUAL
36498: AND
36499: IFFALSE 36516
36501: PUSH
36502: LD_VAR 0 3
36506: PPUSH
36507: CALL_OW 263
36511: PUSH
36512: LD_INT 3
36514: EQUAL
36515: AND
36516: IFFALSE 36532
// HackDestroyVehicle ( unit , selectedUnit ) ;
36518: LD_VAR 0 2
36522: PPUSH
36523: LD_VAR 0 3
36527: PPUSH
36528: CALL 38822 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36532: LD_VAR 0 1
36536: PUSH
36537: LD_INT 255
36539: EQUAL
36540: IFFALSE 36564
36542: PUSH
36543: LD_VAR 0 2
36547: PPUSH
36548: CALL_OW 264
36552: PUSH
36553: LD_INT 14
36555: PUSH
36556: LD_INT 53
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: IN
36563: AND
36564: IFFALSE 36582
36566: PUSH
36567: LD_VAR 0 4
36571: PPUSH
36572: LD_VAR 0 5
36576: PPUSH
36577: CALL_OW 488
36581: AND
36582: IFFALSE 36606
// CutTreeXYR ( unit , x , y , 12 ) ;
36584: LD_VAR 0 2
36588: PPUSH
36589: LD_VAR 0 4
36593: PPUSH
36594: LD_VAR 0 5
36598: PPUSH
36599: LD_INT 12
36601: PPUSH
36602: CALL 36797 0 4
// if cmd = 256 then
36606: LD_VAR 0 1
36610: PUSH
36611: LD_INT 256
36613: EQUAL
36614: IFFALSE 36635
// SetFactoryWaypoint ( unit , x , y ) ;
36616: LD_VAR 0 2
36620: PPUSH
36621: LD_VAR 0 4
36625: PPUSH
36626: LD_VAR 0 5
36630: PPUSH
36631: CALL 34157 0 3
// if cmd = 257 then
36635: LD_VAR 0 1
36639: PUSH
36640: LD_INT 257
36642: EQUAL
36643: IFFALSE 36664
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36645: LD_VAR 0 2
36649: PPUSH
36650: LD_VAR 0 4
36654: PPUSH
36655: LD_VAR 0 5
36659: PPUSH
36660: CALL 34653 0 3
// if cmd = 258 then
36664: LD_VAR 0 1
36668: PUSH
36669: LD_INT 258
36671: EQUAL
36672: IFFALSE 36696
// BurnTreeXYR ( unit , x , y , 8 ) ;
36674: LD_VAR 0 2
36678: PPUSH
36679: LD_VAR 0 4
36683: PPUSH
36684: LD_VAR 0 5
36688: PPUSH
36689: LD_INT 8
36691: PPUSH
36692: CALL 37197 0 4
// end ;
36696: LD_VAR 0 6
36700: RET
// export function ComRadiation ( un ) ; var eff ; begin
36701: LD_INT 0
36703: PPUSH
36704: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
36705: LD_VAR 0 1
36709: PPUSH
36710: CALL_OW 264
36714: PUSH
36715: LD_INT 91
36717: NONEQUAL
36718: IFFALSE 36722
// exit ;
36720: GO 36792
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36722: LD_INT 68
36724: PPUSH
36725: LD_VAR 0 1
36729: PPUSH
36730: CALL_OW 255
36734: PPUSH
36735: CALL_OW 321
36739: PUSH
36740: LD_INT 2
36742: EQUAL
36743: IFFALSE 36755
// eff := 50 else
36745: LD_ADDR_VAR 0 3
36749: PUSH
36750: LD_INT 50
36752: ST_TO_ADDR
36753: GO 36763
// eff := 25 ;
36755: LD_ADDR_VAR 0 3
36759: PUSH
36760: LD_INT 25
36762: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36763: LD_VAR 0 1
36767: PPUSH
36768: CALL_OW 250
36772: PPUSH
36773: LD_VAR 0 1
36777: PPUSH
36778: CALL_OW 251
36782: PPUSH
36783: LD_VAR 0 3
36787: PPUSH
36788: CALL_OW 495
// end ;
36792: LD_VAR 0 2
36796: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36797: LD_INT 0
36799: PPUSH
36800: PPUSH
36801: PPUSH
36802: PPUSH
36803: PPUSH
36804: PPUSH
36805: PPUSH
36806: PPUSH
36807: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36808: LD_VAR 0 1
36812: PPUSH
36813: CALL_OW 302
36817: NOT
36818: IFTRUE 36837
36820: PUSH
36821: LD_VAR 0 2
36825: PPUSH
36826: LD_VAR 0 3
36830: PPUSH
36831: CALL_OW 488
36835: NOT
36836: OR
36837: IFTRUE 36846
36839: PUSH
36840: LD_VAR 0 4
36844: NOT
36845: OR
36846: IFFALSE 36850
// exit ;
36848: GO 37192
// list := [ ] ;
36850: LD_ADDR_VAR 0 13
36854: PUSH
36855: EMPTY
36856: ST_TO_ADDR
// if x - r < 0 then
36857: LD_VAR 0 2
36861: PUSH
36862: LD_VAR 0 4
36866: MINUS
36867: PUSH
36868: LD_INT 0
36870: LESS
36871: IFFALSE 36883
// min_x := 0 else
36873: LD_ADDR_VAR 0 7
36877: PUSH
36878: LD_INT 0
36880: ST_TO_ADDR
36881: GO 36899
// min_x := x - r ;
36883: LD_ADDR_VAR 0 7
36887: PUSH
36888: LD_VAR 0 2
36892: PUSH
36893: LD_VAR 0 4
36897: MINUS
36898: ST_TO_ADDR
// if y - r < 0 then
36899: LD_VAR 0 3
36903: PUSH
36904: LD_VAR 0 4
36908: MINUS
36909: PUSH
36910: LD_INT 0
36912: LESS
36913: IFFALSE 36925
// min_y := 0 else
36915: LD_ADDR_VAR 0 8
36919: PUSH
36920: LD_INT 0
36922: ST_TO_ADDR
36923: GO 36941
// min_y := y - r ;
36925: LD_ADDR_VAR 0 8
36929: PUSH
36930: LD_VAR 0 3
36934: PUSH
36935: LD_VAR 0 4
36939: MINUS
36940: ST_TO_ADDR
// max_x := x + r ;
36941: LD_ADDR_VAR 0 9
36945: PUSH
36946: LD_VAR 0 2
36950: PUSH
36951: LD_VAR 0 4
36955: PLUS
36956: ST_TO_ADDR
// max_y := y + r ;
36957: LD_ADDR_VAR 0 10
36961: PUSH
36962: LD_VAR 0 3
36966: PUSH
36967: LD_VAR 0 4
36971: PLUS
36972: ST_TO_ADDR
// for _x = min_x to max_x do
36973: LD_ADDR_VAR 0 11
36977: PUSH
36978: DOUBLE
36979: LD_VAR 0 7
36983: DEC
36984: ST_TO_ADDR
36985: LD_VAR 0 9
36989: PUSH
36990: FOR_TO
36991: IFFALSE 37110
// for _y = min_y to max_y do
36993: LD_ADDR_VAR 0 12
36997: PUSH
36998: DOUBLE
36999: LD_VAR 0 8
37003: DEC
37004: ST_TO_ADDR
37005: LD_VAR 0 10
37009: PUSH
37010: FOR_TO
37011: IFFALSE 37106
// begin if not ValidHex ( _x , _y ) then
37013: LD_VAR 0 11
37017: PPUSH
37018: LD_VAR 0 12
37022: PPUSH
37023: CALL_OW 488
37027: NOT
37028: IFFALSE 37032
// continue ;
37030: GO 37010
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37032: LD_VAR 0 11
37036: PPUSH
37037: LD_VAR 0 12
37041: PPUSH
37042: CALL_OW 351
37046: IFFALSE 37064
37048: PUSH
37049: LD_VAR 0 11
37053: PPUSH
37054: LD_VAR 0 12
37058: PPUSH
37059: CALL_OW 554
37063: AND
37064: IFFALSE 37104
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37066: LD_ADDR_VAR 0 13
37070: PUSH
37071: LD_VAR 0 13
37075: PPUSH
37076: LD_VAR 0 13
37080: PUSH
37081: LD_INT 1
37083: PLUS
37084: PPUSH
37085: LD_VAR 0 11
37089: PUSH
37090: LD_VAR 0 12
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PPUSH
37099: CALL_OW 2
37103: ST_TO_ADDR
// end ;
37104: GO 37010
37106: POP
37107: POP
37108: GO 36990
37110: POP
37111: POP
// if not list then
37112: LD_VAR 0 13
37116: NOT
37117: IFFALSE 37121
// exit ;
37119: GO 37192
// for i in list do
37121: LD_ADDR_VAR 0 6
37125: PUSH
37126: LD_VAR 0 13
37130: PUSH
37131: FOR_IN
37132: IFFALSE 37190
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37134: LD_VAR 0 1
37138: PPUSH
37139: LD_STRING M
37141: PUSH
37142: LD_VAR 0 6
37146: PUSH
37147: LD_INT 1
37149: ARRAY
37150: PUSH
37151: LD_VAR 0 6
37155: PUSH
37156: LD_INT 2
37158: ARRAY
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: PUSH
37181: EMPTY
37182: LIST
37183: PPUSH
37184: CALL_OW 447
37188: GO 37131
37190: POP
37191: POP
// end ;
37192: LD_VAR 0 5
37196: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37197: LD_INT 0
37199: PPUSH
37200: PPUSH
37201: PPUSH
37202: PPUSH
37203: PPUSH
37204: PPUSH
37205: PPUSH
37206: PPUSH
37207: PPUSH
37208: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37209: LD_VAR 0 1
37213: PPUSH
37214: CALL_OW 302
37218: NOT
37219: IFTRUE 37238
37221: PUSH
37222: LD_VAR 0 2
37226: PPUSH
37227: LD_VAR 0 3
37231: PPUSH
37232: CALL_OW 488
37236: NOT
37237: OR
37238: IFTRUE 37247
37240: PUSH
37241: LD_VAR 0 4
37245: NOT
37246: OR
37247: IFFALSE 37251
// exit ;
37249: GO 37768
// list := [ ] ;
37251: LD_ADDR_VAR 0 13
37255: PUSH
37256: EMPTY
37257: ST_TO_ADDR
// if x - r < 0 then
37258: LD_VAR 0 2
37262: PUSH
37263: LD_VAR 0 4
37267: MINUS
37268: PUSH
37269: LD_INT 0
37271: LESS
37272: IFFALSE 37284
// min_x := 0 else
37274: LD_ADDR_VAR 0 7
37278: PUSH
37279: LD_INT 0
37281: ST_TO_ADDR
37282: GO 37300
// min_x := x - r ;
37284: LD_ADDR_VAR 0 7
37288: PUSH
37289: LD_VAR 0 2
37293: PUSH
37294: LD_VAR 0 4
37298: MINUS
37299: ST_TO_ADDR
// if y - r < 0 then
37300: LD_VAR 0 3
37304: PUSH
37305: LD_VAR 0 4
37309: MINUS
37310: PUSH
37311: LD_INT 0
37313: LESS
37314: IFFALSE 37326
// min_y := 0 else
37316: LD_ADDR_VAR 0 8
37320: PUSH
37321: LD_INT 0
37323: ST_TO_ADDR
37324: GO 37342
// min_y := y - r ;
37326: LD_ADDR_VAR 0 8
37330: PUSH
37331: LD_VAR 0 3
37335: PUSH
37336: LD_VAR 0 4
37340: MINUS
37341: ST_TO_ADDR
// max_x := x + r ;
37342: LD_ADDR_VAR 0 9
37346: PUSH
37347: LD_VAR 0 2
37351: PUSH
37352: LD_VAR 0 4
37356: PLUS
37357: ST_TO_ADDR
// max_y := y + r ;
37358: LD_ADDR_VAR 0 10
37362: PUSH
37363: LD_VAR 0 3
37367: PUSH
37368: LD_VAR 0 4
37372: PLUS
37373: ST_TO_ADDR
// for _x = min_x to max_x do
37374: LD_ADDR_VAR 0 11
37378: PUSH
37379: DOUBLE
37380: LD_VAR 0 7
37384: DEC
37385: ST_TO_ADDR
37386: LD_VAR 0 9
37390: PUSH
37391: FOR_TO
37392: IFFALSE 37511
// for _y = min_y to max_y do
37394: LD_ADDR_VAR 0 12
37398: PUSH
37399: DOUBLE
37400: LD_VAR 0 8
37404: DEC
37405: ST_TO_ADDR
37406: LD_VAR 0 10
37410: PUSH
37411: FOR_TO
37412: IFFALSE 37507
// begin if not ValidHex ( _x , _y ) then
37414: LD_VAR 0 11
37418: PPUSH
37419: LD_VAR 0 12
37423: PPUSH
37424: CALL_OW 488
37428: NOT
37429: IFFALSE 37433
// continue ;
37431: GO 37411
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37433: LD_VAR 0 11
37437: PPUSH
37438: LD_VAR 0 12
37442: PPUSH
37443: CALL_OW 351
37447: IFFALSE 37465
37449: PUSH
37450: LD_VAR 0 11
37454: PPUSH
37455: LD_VAR 0 12
37459: PPUSH
37460: CALL_OW 554
37464: AND
37465: IFFALSE 37505
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37467: LD_ADDR_VAR 0 13
37471: PUSH
37472: LD_VAR 0 13
37476: PPUSH
37477: LD_VAR 0 13
37481: PUSH
37482: LD_INT 1
37484: PLUS
37485: PPUSH
37486: LD_VAR 0 11
37490: PUSH
37491: LD_VAR 0 12
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PPUSH
37500: CALL_OW 2
37504: ST_TO_ADDR
// end ;
37505: GO 37411
37507: POP
37508: POP
37509: GO 37391
37511: POP
37512: POP
// if not list then
37513: LD_VAR 0 13
37517: NOT
37518: IFFALSE 37522
// exit ;
37520: GO 37768
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37522: LD_ADDR_VAR 0 13
37526: PUSH
37527: LD_VAR 0 1
37531: PPUSH
37532: LD_VAR 0 13
37536: PPUSH
37537: LD_INT 1
37539: PPUSH
37540: LD_INT 1
37542: PPUSH
37543: CALL 46610 0 4
37547: ST_TO_ADDR
// ComStop ( flame ) ;
37548: LD_VAR 0 1
37552: PPUSH
37553: CALL_OW 141
// for i in list do
37557: LD_ADDR_VAR 0 6
37561: PUSH
37562: LD_VAR 0 13
37566: PUSH
37567: FOR_IN
37568: IFFALSE 37599
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37570: LD_VAR 0 1
37574: PPUSH
37575: LD_VAR 0 6
37579: PUSH
37580: LD_INT 1
37582: ARRAY
37583: PPUSH
37584: LD_VAR 0 6
37588: PUSH
37589: LD_INT 2
37591: ARRAY
37592: PPUSH
37593: CALL_OW 176
37597: GO 37567
37599: POP
37600: POP
// repeat wait ( 0 0$1 ) ;
37601: LD_INT 35
37603: PPUSH
37604: CALL_OW 67
// task := GetTaskList ( flame ) ;
37608: LD_ADDR_VAR 0 14
37612: PUSH
37613: LD_VAR 0 1
37617: PPUSH
37618: CALL_OW 437
37622: ST_TO_ADDR
// if not task then
37623: LD_VAR 0 14
37627: NOT
37628: IFFALSE 37632
// exit ;
37630: GO 37768
// if task [ 1 ] [ 1 ] <> | then
37632: LD_VAR 0 14
37636: PUSH
37637: LD_INT 1
37639: ARRAY
37640: PUSH
37641: LD_INT 1
37643: ARRAY
37644: PUSH
37645: LD_STRING |
37647: NONEQUAL
37648: IFFALSE 37652
// exit ;
37650: GO 37768
// _x := task [ 1 ] [ 2 ] ;
37652: LD_ADDR_VAR 0 11
37656: PUSH
37657: LD_VAR 0 14
37661: PUSH
37662: LD_INT 1
37664: ARRAY
37665: PUSH
37666: LD_INT 2
37668: ARRAY
37669: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37670: LD_ADDR_VAR 0 12
37674: PUSH
37675: LD_VAR 0 14
37679: PUSH
37680: LD_INT 1
37682: ARRAY
37683: PUSH
37684: LD_INT 3
37686: ARRAY
37687: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37688: LD_VAR 0 11
37692: PPUSH
37693: LD_VAR 0 12
37697: PPUSH
37698: CALL_OW 351
37702: NOT
37703: IFTRUE 37722
37705: PUSH
37706: LD_VAR 0 11
37710: PPUSH
37711: LD_VAR 0 12
37715: PPUSH
37716: CALL_OW 554
37720: NOT
37721: OR
37722: IFFALSE 37756
// begin task := Delete ( task , 1 ) ;
37724: LD_ADDR_VAR 0 14
37728: PUSH
37729: LD_VAR 0 14
37733: PPUSH
37734: LD_INT 1
37736: PPUSH
37737: CALL_OW 3
37741: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37742: LD_VAR 0 1
37746: PPUSH
37747: LD_VAR 0 14
37751: PPUSH
37752: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37756: LD_VAR 0 1
37760: PPUSH
37761: CALL_OW 314
37765: NOT
37766: IFFALSE 37601
// end ;
37768: LD_VAR 0 5
37772: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37773: LD_EXP 125
37777: NOT
37778: IFFALSE 37828
37780: GO 37782
37782: DISABLE
// begin initHack := true ;
37783: LD_ADDR_EXP 125
37787: PUSH
37788: LD_INT 1
37790: ST_TO_ADDR
// hackTanks := [ ] ;
37791: LD_ADDR_EXP 126
37795: PUSH
37796: EMPTY
37797: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37798: LD_ADDR_EXP 127
37802: PUSH
37803: EMPTY
37804: ST_TO_ADDR
// hackLimit := 3 ;
37805: LD_ADDR_EXP 128
37809: PUSH
37810: LD_INT 3
37812: ST_TO_ADDR
// hackDist := 12 ;
37813: LD_ADDR_EXP 129
37817: PUSH
37818: LD_INT 12
37820: ST_TO_ADDR
// hackCounter := [ ] ;
37821: LD_ADDR_EXP 130
37825: PUSH
37826: EMPTY
37827: ST_TO_ADDR
// end ;
37828: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37829: LD_EXP 125
37833: IFFALSE 37851
37835: PUSH
37836: LD_INT 34
37838: PUSH
37839: LD_INT 99
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PPUSH
37846: CALL_OW 69
37850: AND
37851: IFFALSE 38104
37853: GO 37855
37855: DISABLE
37856: LD_INT 0
37858: PPUSH
37859: PPUSH
// begin enable ;
37860: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37861: LD_ADDR_VAR 0 1
37865: PUSH
37866: LD_INT 34
37868: PUSH
37869: LD_INT 99
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PPUSH
37876: CALL_OW 69
37880: PUSH
37881: FOR_IN
37882: IFFALSE 38102
// begin if not i in hackTanks then
37884: LD_VAR 0 1
37888: PUSH
37889: LD_EXP 126
37893: IN
37894: NOT
37895: IFFALSE 37978
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37897: LD_ADDR_EXP 126
37901: PUSH
37902: LD_EXP 126
37906: PPUSH
37907: LD_EXP 126
37911: PUSH
37912: LD_INT 1
37914: PLUS
37915: PPUSH
37916: LD_VAR 0 1
37920: PPUSH
37921: CALL_OW 1
37925: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37926: LD_ADDR_EXP 127
37930: PUSH
37931: LD_EXP 127
37935: PPUSH
37936: LD_EXP 127
37940: PUSH
37941: LD_INT 1
37943: PLUS
37944: PPUSH
37945: EMPTY
37946: PPUSH
37947: CALL_OW 1
37951: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37952: LD_ADDR_EXP 130
37956: PUSH
37957: LD_EXP 130
37961: PPUSH
37962: LD_EXP 130
37966: PUSH
37967: LD_INT 1
37969: PLUS
37970: PPUSH
37971: EMPTY
37972: PPUSH
37973: CALL_OW 1
37977: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37978: LD_VAR 0 1
37982: PPUSH
37983: CALL_OW 302
37987: NOT
37988: IFFALSE 38001
// begin HackUnlinkAll ( i ) ;
37990: LD_VAR 0 1
37994: PPUSH
37995: CALL 38107 0 1
// continue ;
37999: GO 37881
// end ; HackCheckCapturedStatus ( i ) ;
38001: LD_VAR 0 1
38005: PPUSH
38006: CALL 38552 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38010: LD_ADDR_VAR 0 2
38014: PUSH
38015: LD_INT 81
38017: PUSH
38018: LD_VAR 0 1
38022: PPUSH
38023: CALL_OW 255
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 33
38034: PUSH
38035: LD_INT 3
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 91
38044: PUSH
38045: LD_VAR 0 1
38049: PUSH
38050: LD_EXP 129
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 50
38062: PUSH
38063: EMPTY
38064: LIST
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: PPUSH
38072: CALL_OW 69
38076: ST_TO_ADDR
// if not tmp then
38077: LD_VAR 0 2
38081: NOT
38082: IFFALSE 38086
// continue ;
38084: GO 37881
// HackLink ( i , tmp ) ;
38086: LD_VAR 0 1
38090: PPUSH
38091: LD_VAR 0 2
38095: PPUSH
38096: CALL 38243 0 2
// end ;
38100: GO 37881
38102: POP
38103: POP
// end ;
38104: PPOPN 2
38106: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38107: LD_INT 0
38109: PPUSH
38110: PPUSH
38111: PPUSH
// if not hack in hackTanks then
38112: LD_VAR 0 1
38116: PUSH
38117: LD_EXP 126
38121: IN
38122: NOT
38123: IFFALSE 38127
// exit ;
38125: GO 38238
// index := GetElementIndex ( hackTanks , hack ) ;
38127: LD_ADDR_VAR 0 4
38131: PUSH
38132: LD_EXP 126
38136: PPUSH
38137: LD_VAR 0 1
38141: PPUSH
38142: CALL 45905 0 2
38146: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38147: LD_EXP 127
38151: PUSH
38152: LD_VAR 0 4
38156: ARRAY
38157: IFFALSE 38238
// begin for i in hackTanksCaptured [ index ] do
38159: LD_ADDR_VAR 0 3
38163: PUSH
38164: LD_EXP 127
38168: PUSH
38169: LD_VAR 0 4
38173: ARRAY
38174: PUSH
38175: FOR_IN
38176: IFFALSE 38202
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38178: LD_VAR 0 3
38182: PUSH
38183: LD_INT 1
38185: ARRAY
38186: PPUSH
38187: LD_VAR 0 3
38191: PUSH
38192: LD_INT 2
38194: ARRAY
38195: PPUSH
38196: CALL_OW 235
38200: GO 38175
38202: POP
38203: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38204: LD_ADDR_EXP 127
38208: PUSH
38209: LD_EXP 127
38213: PPUSH
38214: LD_VAR 0 4
38218: PPUSH
38219: EMPTY
38220: PPUSH
38221: CALL_OW 1
38225: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38226: LD_VAR 0 1
38230: PPUSH
38231: LD_INT 0
38233: PPUSH
38234: CALL_OW 505
// end ; end ;
38238: LD_VAR 0 2
38242: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38243: LD_INT 0
38245: PPUSH
38246: PPUSH
38247: PPUSH
// if not hack in hackTanks or not vehicles then
38248: LD_VAR 0 1
38252: PUSH
38253: LD_EXP 126
38257: IN
38258: NOT
38259: IFTRUE 38268
38261: PUSH
38262: LD_VAR 0 2
38266: NOT
38267: OR
38268: IFFALSE 38272
// exit ;
38270: GO 38547
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38272: LD_ADDR_VAR 0 2
38276: PUSH
38277: LD_VAR 0 1
38281: PPUSH
38282: LD_VAR 0 2
38286: PPUSH
38287: LD_INT 1
38289: PPUSH
38290: LD_INT 1
38292: PPUSH
38293: CALL 46557 0 4
38297: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38298: LD_ADDR_VAR 0 5
38302: PUSH
38303: LD_EXP 126
38307: PPUSH
38308: LD_VAR 0 1
38312: PPUSH
38313: CALL 45905 0 2
38317: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38318: LD_EXP 127
38322: PUSH
38323: LD_VAR 0 5
38327: ARRAY
38328: PUSH
38329: LD_EXP 128
38333: LESS
38334: IFFALSE 38523
// begin for i := 1 to vehicles do
38336: LD_ADDR_VAR 0 4
38340: PUSH
38341: DOUBLE
38342: LD_INT 1
38344: DEC
38345: ST_TO_ADDR
38346: LD_VAR 0 2
38350: PUSH
38351: FOR_TO
38352: IFFALSE 38521
// begin if hackTanksCaptured [ index ] = hackLimit then
38354: LD_EXP 127
38358: PUSH
38359: LD_VAR 0 5
38363: ARRAY
38364: PUSH
38365: LD_EXP 128
38369: EQUAL
38370: IFFALSE 38374
// break ;
38372: GO 38521
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38374: LD_ADDR_EXP 130
38378: PUSH
38379: LD_EXP 130
38383: PPUSH
38384: LD_VAR 0 5
38388: PPUSH
38389: LD_EXP 130
38393: PUSH
38394: LD_VAR 0 5
38398: ARRAY
38399: PUSH
38400: LD_INT 1
38402: PLUS
38403: PPUSH
38404: CALL_OW 1
38408: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38409: LD_ADDR_EXP 127
38413: PUSH
38414: LD_EXP 127
38418: PPUSH
38419: LD_VAR 0 5
38423: PUSH
38424: LD_EXP 127
38428: PUSH
38429: LD_VAR 0 5
38433: ARRAY
38434: PUSH
38435: LD_INT 1
38437: PLUS
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PPUSH
38443: LD_VAR 0 2
38447: PUSH
38448: LD_VAR 0 4
38452: ARRAY
38453: PUSH
38454: LD_VAR 0 2
38458: PUSH
38459: LD_VAR 0 4
38463: ARRAY
38464: PPUSH
38465: CALL_OW 255
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PPUSH
38474: CALL 46122 0 3
38478: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38479: LD_VAR 0 2
38483: PUSH
38484: LD_VAR 0 4
38488: ARRAY
38489: PPUSH
38490: LD_VAR 0 1
38494: PPUSH
38495: CALL_OW 255
38499: PPUSH
38500: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38504: LD_VAR 0 2
38508: PUSH
38509: LD_VAR 0 4
38513: ARRAY
38514: PPUSH
38515: CALL_OW 141
// end ;
38519: GO 38351
38521: POP
38522: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38523: LD_VAR 0 1
38527: PPUSH
38528: LD_EXP 127
38532: PUSH
38533: LD_VAR 0 5
38537: ARRAY
38538: PUSH
38539: LD_INT 0
38541: PLUS
38542: PPUSH
38543: CALL_OW 505
// end ;
38547: LD_VAR 0 3
38551: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38552: LD_INT 0
38554: PPUSH
38555: PPUSH
38556: PPUSH
38557: PPUSH
// if not hack in hackTanks then
38558: LD_VAR 0 1
38562: PUSH
38563: LD_EXP 126
38567: IN
38568: NOT
38569: IFFALSE 38573
// exit ;
38571: GO 38817
// index := GetElementIndex ( hackTanks , hack ) ;
38573: LD_ADDR_VAR 0 4
38577: PUSH
38578: LD_EXP 126
38582: PPUSH
38583: LD_VAR 0 1
38587: PPUSH
38588: CALL 45905 0 2
38592: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38593: LD_ADDR_VAR 0 3
38597: PUSH
38598: DOUBLE
38599: LD_EXP 127
38603: PUSH
38604: LD_VAR 0 4
38608: ARRAY
38609: INC
38610: ST_TO_ADDR
38611: LD_INT 1
38613: PUSH
38614: FOR_DOWNTO
38615: IFFALSE 38791
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38617: LD_ADDR_VAR 0 5
38621: PUSH
38622: LD_EXP 127
38626: PUSH
38627: LD_VAR 0 4
38631: ARRAY
38632: PUSH
38633: LD_VAR 0 3
38637: ARRAY
38638: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38639: LD_VAR 0 5
38643: PUSH
38644: LD_INT 1
38646: ARRAY
38647: PPUSH
38648: CALL_OW 302
38652: NOT
38653: IFTRUE 38681
38655: PUSH
38656: LD_VAR 0 5
38660: PUSH
38661: LD_INT 1
38663: ARRAY
38664: PPUSH
38665: CALL_OW 255
38669: PUSH
38670: LD_VAR 0 1
38674: PPUSH
38675: CALL_OW 255
38679: NONEQUAL
38680: OR
38681: IFFALSE 38789
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38683: LD_VAR 0 5
38687: PUSH
38688: LD_INT 1
38690: ARRAY
38691: PPUSH
38692: CALL_OW 305
38696: IFFALSE 38724
38698: PUSH
38699: LD_VAR 0 5
38703: PUSH
38704: LD_INT 1
38706: ARRAY
38707: PPUSH
38708: CALL_OW 255
38712: PUSH
38713: LD_VAR 0 1
38717: PPUSH
38718: CALL_OW 255
38722: EQUAL
38723: AND
38724: IFFALSE 38748
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38726: LD_VAR 0 5
38730: PUSH
38731: LD_INT 1
38733: ARRAY
38734: PPUSH
38735: LD_VAR 0 5
38739: PUSH
38740: LD_INT 2
38742: ARRAY
38743: PPUSH
38744: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38748: LD_ADDR_EXP 127
38752: PUSH
38753: LD_EXP 127
38757: PPUSH
38758: LD_VAR 0 4
38762: PPUSH
38763: LD_EXP 127
38767: PUSH
38768: LD_VAR 0 4
38772: ARRAY
38773: PPUSH
38774: LD_VAR 0 3
38778: PPUSH
38779: CALL_OW 3
38783: PPUSH
38784: CALL_OW 1
38788: ST_TO_ADDR
// end ; end ;
38789: GO 38614
38791: POP
38792: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38793: LD_VAR 0 1
38797: PPUSH
38798: LD_EXP 127
38802: PUSH
38803: LD_VAR 0 4
38807: ARRAY
38808: PUSH
38809: LD_INT 0
38811: PLUS
38812: PPUSH
38813: CALL_OW 505
// end ;
38817: LD_VAR 0 2
38821: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38822: LD_INT 0
38824: PPUSH
38825: PPUSH
38826: PPUSH
38827: PPUSH
// if not hack in hackTanks then
38828: LD_VAR 0 1
38832: PUSH
38833: LD_EXP 126
38837: IN
38838: NOT
38839: IFFALSE 38843
// exit ;
38841: GO 38928
// index := GetElementIndex ( hackTanks , hack ) ;
38843: LD_ADDR_VAR 0 5
38847: PUSH
38848: LD_EXP 126
38852: PPUSH
38853: LD_VAR 0 1
38857: PPUSH
38858: CALL 45905 0 2
38862: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38863: LD_ADDR_VAR 0 4
38867: PUSH
38868: DOUBLE
38869: LD_INT 1
38871: DEC
38872: ST_TO_ADDR
38873: LD_EXP 127
38877: PUSH
38878: LD_VAR 0 5
38882: ARRAY
38883: PUSH
38884: FOR_TO
38885: IFFALSE 38926
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38887: LD_EXP 127
38891: PUSH
38892: LD_VAR 0 5
38896: ARRAY
38897: PUSH
38898: LD_VAR 0 4
38902: ARRAY
38903: PUSH
38904: LD_INT 1
38906: ARRAY
38907: PUSH
38908: LD_VAR 0 2
38912: EQUAL
38913: IFFALSE 38924
// KillUnit ( vehicle ) ;
38915: LD_VAR 0 2
38919: PPUSH
38920: CALL_OW 66
38924: GO 38884
38926: POP
38927: POP
// end ;
38928: LD_VAR 0 3
38932: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38933: LD_EXP 131
38937: NOT
38938: IFFALSE 38973
38940: GO 38942
38942: DISABLE
// begin initMiner := true ;
38943: LD_ADDR_EXP 131
38947: PUSH
38948: LD_INT 1
38950: ST_TO_ADDR
// minersList := [ ] ;
38951: LD_ADDR_EXP 132
38955: PUSH
38956: EMPTY
38957: ST_TO_ADDR
// minerMinesList := [ ] ;
38958: LD_ADDR_EXP 133
38962: PUSH
38963: EMPTY
38964: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38965: LD_ADDR_EXP 134
38969: PUSH
38970: LD_INT 5
38972: ST_TO_ADDR
// end ;
38973: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38974: LD_EXP 131
38978: IFFALSE 38996
38980: PUSH
38981: LD_INT 34
38983: PUSH
38984: LD_INT 81
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PPUSH
38991: CALL_OW 69
38995: AND
38996: IFFALSE 39459
38998: GO 39000
39000: DISABLE
39001: LD_INT 0
39003: PPUSH
39004: PPUSH
39005: PPUSH
39006: PPUSH
// begin enable ;
39007: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39008: LD_ADDR_VAR 0 1
39012: PUSH
39013: LD_INT 34
39015: PUSH
39016: LD_INT 81
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PPUSH
39023: CALL_OW 69
39027: PUSH
39028: FOR_IN
39029: IFFALSE 39101
// begin if not i in minersList then
39031: LD_VAR 0 1
39035: PUSH
39036: LD_EXP 132
39040: IN
39041: NOT
39042: IFFALSE 39099
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39044: LD_ADDR_EXP 132
39048: PUSH
39049: LD_EXP 132
39053: PPUSH
39054: LD_EXP 132
39058: PUSH
39059: LD_INT 1
39061: PLUS
39062: PPUSH
39063: LD_VAR 0 1
39067: PPUSH
39068: CALL_OW 1
39072: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39073: LD_ADDR_EXP 133
39077: PUSH
39078: LD_EXP 133
39082: PPUSH
39083: LD_EXP 133
39087: PUSH
39088: LD_INT 1
39090: PLUS
39091: PPUSH
39092: EMPTY
39093: PPUSH
39094: CALL_OW 1
39098: ST_TO_ADDR
// end end ;
39099: GO 39028
39101: POP
39102: POP
// for i := minerMinesList downto 1 do
39103: LD_ADDR_VAR 0 1
39107: PUSH
39108: DOUBLE
39109: LD_EXP 133
39113: INC
39114: ST_TO_ADDR
39115: LD_INT 1
39117: PUSH
39118: FOR_DOWNTO
39119: IFFALSE 39457
// begin if IsLive ( minersList [ i ] ) then
39121: LD_EXP 132
39125: PUSH
39126: LD_VAR 0 1
39130: ARRAY
39131: PPUSH
39132: CALL_OW 300
39136: IFFALSE 39164
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39138: LD_EXP 132
39142: PUSH
39143: LD_VAR 0 1
39147: ARRAY
39148: PPUSH
39149: LD_EXP 133
39153: PUSH
39154: LD_VAR 0 1
39158: ARRAY
39159: PPUSH
39160: CALL_OW 505
// if not minerMinesList [ i ] then
39164: LD_EXP 133
39168: PUSH
39169: LD_VAR 0 1
39173: ARRAY
39174: NOT
39175: IFFALSE 39179
// continue ;
39177: GO 39118
// for j := minerMinesList [ i ] downto 1 do
39179: LD_ADDR_VAR 0 2
39183: PUSH
39184: DOUBLE
39185: LD_EXP 133
39189: PUSH
39190: LD_VAR 0 1
39194: ARRAY
39195: INC
39196: ST_TO_ADDR
39197: LD_INT 1
39199: PUSH
39200: FOR_DOWNTO
39201: IFFALSE 39453
// begin side := GetSide ( minersList [ i ] ) ;
39203: LD_ADDR_VAR 0 3
39207: PUSH
39208: LD_EXP 132
39212: PUSH
39213: LD_VAR 0 1
39217: ARRAY
39218: PPUSH
39219: CALL_OW 255
39223: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39224: LD_ADDR_VAR 0 4
39228: PUSH
39229: LD_EXP 133
39233: PUSH
39234: LD_VAR 0 1
39238: ARRAY
39239: PUSH
39240: LD_VAR 0 2
39244: ARRAY
39245: PUSH
39246: LD_INT 1
39248: ARRAY
39249: PPUSH
39250: LD_EXP 133
39254: PUSH
39255: LD_VAR 0 1
39259: ARRAY
39260: PUSH
39261: LD_VAR 0 2
39265: ARRAY
39266: PUSH
39267: LD_INT 2
39269: ARRAY
39270: PPUSH
39271: CALL_OW 428
39275: ST_TO_ADDR
// if not tmp then
39276: LD_VAR 0 4
39280: NOT
39281: IFFALSE 39285
// continue ;
39283: GO 39200
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39285: LD_VAR 0 4
39289: PUSH
39290: LD_INT 81
39292: PUSH
39293: LD_VAR 0 3
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PPUSH
39302: CALL_OW 69
39306: IN
39307: IFFALSE 39357
39309: PUSH
39310: LD_EXP 133
39314: PUSH
39315: LD_VAR 0 1
39319: ARRAY
39320: PUSH
39321: LD_VAR 0 2
39325: ARRAY
39326: PUSH
39327: LD_INT 1
39329: ARRAY
39330: PPUSH
39331: LD_EXP 133
39335: PUSH
39336: LD_VAR 0 1
39340: ARRAY
39341: PUSH
39342: LD_VAR 0 2
39346: ARRAY
39347: PUSH
39348: LD_INT 2
39350: ARRAY
39351: PPUSH
39352: CALL_OW 458
39356: AND
39357: IFFALSE 39451
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39359: LD_EXP 133
39363: PUSH
39364: LD_VAR 0 1
39368: ARRAY
39369: PUSH
39370: LD_VAR 0 2
39374: ARRAY
39375: PUSH
39376: LD_INT 1
39378: ARRAY
39379: PPUSH
39380: LD_EXP 133
39384: PUSH
39385: LD_VAR 0 1
39389: ARRAY
39390: PUSH
39391: LD_VAR 0 2
39395: ARRAY
39396: PUSH
39397: LD_INT 2
39399: ARRAY
39400: PPUSH
39401: LD_VAR 0 3
39405: PPUSH
39406: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39410: LD_ADDR_EXP 133
39414: PUSH
39415: LD_EXP 133
39419: PPUSH
39420: LD_VAR 0 1
39424: PPUSH
39425: LD_EXP 133
39429: PUSH
39430: LD_VAR 0 1
39434: ARRAY
39435: PPUSH
39436: LD_VAR 0 2
39440: PPUSH
39441: CALL_OW 3
39445: PPUSH
39446: CALL_OW 1
39450: ST_TO_ADDR
// end ; end ;
39451: GO 39200
39453: POP
39454: POP
// end ;
39455: GO 39118
39457: POP
39458: POP
// end ;
39459: PPOPN 4
39461: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39462: LD_INT 0
39464: PPUSH
39465: PPUSH
// result := false ;
39466: LD_ADDR_VAR 0 4
39470: PUSH
39471: LD_INT 0
39473: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39474: LD_VAR 0 1
39478: PPUSH
39479: CALL_OW 264
39483: PUSH
39484: LD_INT 81
39486: EQUAL
39487: NOT
39488: IFFALSE 39492
// exit ;
39490: GO 39736
// index := GetElementIndex ( minersList , unit ) ;
39492: LD_ADDR_VAR 0 5
39496: PUSH
39497: LD_EXP 132
39501: PPUSH
39502: LD_VAR 0 1
39506: PPUSH
39507: CALL 45905 0 2
39511: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39512: LD_EXP 133
39516: PUSH
39517: LD_VAR 0 5
39521: ARRAY
39522: PUSH
39523: LD_EXP 134
39527: GREATEREQUAL
39528: IFFALSE 39532
// exit ;
39530: GO 39736
// ComMoveXY ( unit , x , y ) ;
39532: LD_VAR 0 1
39536: PPUSH
39537: LD_VAR 0 2
39541: PPUSH
39542: LD_VAR 0 3
39546: PPUSH
39547: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39551: LD_INT 35
39553: PPUSH
39554: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39558: LD_VAR 0 1
39562: PPUSH
39563: LD_VAR 0 2
39567: PPUSH
39568: LD_VAR 0 3
39572: PPUSH
39573: CALL 77951 0 3
39577: NOT
39578: IFFALSE 39591
39580: PUSH
39581: LD_VAR 0 1
39585: PPUSH
39586: CALL_OW 314
39590: AND
39591: IFFALSE 39595
// exit ;
39593: GO 39736
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39595: LD_VAR 0 2
39599: PPUSH
39600: LD_VAR 0 3
39604: PPUSH
39605: CALL_OW 428
39609: PUSH
39610: LD_VAR 0 1
39614: EQUAL
39615: IFFALSE 39629
39617: PUSH
39618: LD_VAR 0 1
39622: PPUSH
39623: CALL_OW 314
39627: NOT
39628: AND
39629: IFFALSE 39551
// PlaySoundXY ( x , y , PlantMine ) ;
39631: LD_VAR 0 2
39635: PPUSH
39636: LD_VAR 0 3
39640: PPUSH
39641: LD_STRING PlantMine
39643: PPUSH
39644: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39648: LD_VAR 0 2
39652: PPUSH
39653: LD_VAR 0 3
39657: PPUSH
39658: LD_VAR 0 1
39662: PPUSH
39663: CALL_OW 255
39667: PPUSH
39668: LD_INT 0
39670: PPUSH
39671: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39675: LD_ADDR_EXP 133
39679: PUSH
39680: LD_EXP 133
39684: PPUSH
39685: LD_VAR 0 5
39689: PUSH
39690: LD_EXP 133
39694: PUSH
39695: LD_VAR 0 5
39699: ARRAY
39700: PUSH
39701: LD_INT 1
39703: PLUS
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PPUSH
39709: LD_VAR 0 2
39713: PUSH
39714: LD_VAR 0 3
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PPUSH
39723: CALL 46122 0 3
39727: ST_TO_ADDR
// result := true ;
39728: LD_ADDR_VAR 0 4
39732: PUSH
39733: LD_INT 1
39735: ST_TO_ADDR
// end ;
39736: LD_VAR 0 4
39740: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39741: LD_INT 0
39743: PPUSH
39744: PPUSH
39745: PPUSH
// if not unit in minersList then
39746: LD_VAR 0 1
39750: PUSH
39751: LD_EXP 132
39755: IN
39756: NOT
39757: IFFALSE 39761
// exit ;
39759: GO 40155
// index := GetElementIndex ( minersList , unit ) ;
39761: LD_ADDR_VAR 0 6
39765: PUSH
39766: LD_EXP 132
39770: PPUSH
39771: LD_VAR 0 1
39775: PPUSH
39776: CALL 45905 0 2
39780: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39781: LD_ADDR_VAR 0 5
39785: PUSH
39786: DOUBLE
39787: LD_EXP 133
39791: PUSH
39792: LD_VAR 0 6
39796: ARRAY
39797: INC
39798: ST_TO_ADDR
39799: LD_INT 1
39801: PUSH
39802: FOR_DOWNTO
39803: IFFALSE 39966
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39805: LD_EXP 133
39809: PUSH
39810: LD_VAR 0 6
39814: ARRAY
39815: PUSH
39816: LD_VAR 0 5
39820: ARRAY
39821: PUSH
39822: LD_INT 1
39824: ARRAY
39825: PUSH
39826: LD_VAR 0 2
39830: EQUAL
39831: IFFALSE 39861
39833: PUSH
39834: LD_EXP 133
39838: PUSH
39839: LD_VAR 0 6
39843: ARRAY
39844: PUSH
39845: LD_VAR 0 5
39849: ARRAY
39850: PUSH
39851: LD_INT 2
39853: ARRAY
39854: PUSH
39855: LD_VAR 0 3
39859: EQUAL
39860: AND
39861: IFFALSE 39964
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39863: LD_EXP 133
39867: PUSH
39868: LD_VAR 0 6
39872: ARRAY
39873: PUSH
39874: LD_VAR 0 5
39878: ARRAY
39879: PUSH
39880: LD_INT 1
39882: ARRAY
39883: PPUSH
39884: LD_EXP 133
39888: PUSH
39889: LD_VAR 0 6
39893: ARRAY
39894: PUSH
39895: LD_VAR 0 5
39899: ARRAY
39900: PUSH
39901: LD_INT 2
39903: ARRAY
39904: PPUSH
39905: LD_VAR 0 1
39909: PPUSH
39910: CALL_OW 255
39914: PPUSH
39915: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39919: LD_ADDR_EXP 133
39923: PUSH
39924: LD_EXP 133
39928: PPUSH
39929: LD_VAR 0 6
39933: PPUSH
39934: LD_EXP 133
39938: PUSH
39939: LD_VAR 0 6
39943: ARRAY
39944: PPUSH
39945: LD_VAR 0 5
39949: PPUSH
39950: CALL_OW 3
39954: PPUSH
39955: CALL_OW 1
39959: ST_TO_ADDR
// exit ;
39960: POP
39961: POP
39962: GO 40155
// end ; end ;
39964: GO 39802
39966: POP
39967: POP
// for i := minerMinesList [ index ] downto 1 do
39968: LD_ADDR_VAR 0 5
39972: PUSH
39973: DOUBLE
39974: LD_EXP 133
39978: PUSH
39979: LD_VAR 0 6
39983: ARRAY
39984: INC
39985: ST_TO_ADDR
39986: LD_INT 1
39988: PUSH
39989: FOR_DOWNTO
39990: IFFALSE 40153
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39992: LD_EXP 133
39996: PUSH
39997: LD_VAR 0 6
40001: ARRAY
40002: PUSH
40003: LD_VAR 0 5
40007: ARRAY
40008: PUSH
40009: LD_INT 1
40011: ARRAY
40012: PPUSH
40013: LD_EXP 133
40017: PUSH
40018: LD_VAR 0 6
40022: ARRAY
40023: PUSH
40024: LD_VAR 0 5
40028: ARRAY
40029: PUSH
40030: LD_INT 2
40032: ARRAY
40033: PPUSH
40034: LD_VAR 0 2
40038: PPUSH
40039: LD_VAR 0 3
40043: PPUSH
40044: CALL_OW 298
40048: PUSH
40049: LD_INT 6
40051: LESS
40052: IFFALSE 40151
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40054: LD_EXP 133
40058: PUSH
40059: LD_VAR 0 6
40063: ARRAY
40064: PUSH
40065: LD_VAR 0 5
40069: ARRAY
40070: PUSH
40071: LD_INT 1
40073: ARRAY
40074: PPUSH
40075: LD_EXP 133
40079: PUSH
40080: LD_VAR 0 6
40084: ARRAY
40085: PUSH
40086: LD_VAR 0 5
40090: ARRAY
40091: PUSH
40092: LD_INT 2
40094: ARRAY
40095: PPUSH
40096: LD_VAR 0 1
40100: PPUSH
40101: CALL_OW 255
40105: PPUSH
40106: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40110: LD_ADDR_EXP 133
40114: PUSH
40115: LD_EXP 133
40119: PPUSH
40120: LD_VAR 0 6
40124: PPUSH
40125: LD_EXP 133
40129: PUSH
40130: LD_VAR 0 6
40134: ARRAY
40135: PPUSH
40136: LD_VAR 0 5
40140: PPUSH
40141: CALL_OW 3
40145: PPUSH
40146: CALL_OW 1
40150: ST_TO_ADDR
// end ; end ;
40151: GO 39989
40153: POP
40154: POP
// end ;
40155: LD_VAR 0 4
40159: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40160: LD_INT 0
40162: PPUSH
40163: PPUSH
40164: PPUSH
40165: PPUSH
40166: PPUSH
40167: PPUSH
40168: PPUSH
40169: PPUSH
40170: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40171: LD_VAR 0 1
40175: PPUSH
40176: CALL_OW 264
40180: PUSH
40181: LD_INT 81
40183: EQUAL
40184: NOT
40185: IFTRUE 40200
40187: PUSH
40188: LD_VAR 0 1
40192: PUSH
40193: LD_EXP 132
40197: IN
40198: NOT
40199: OR
40200: IFFALSE 40204
// exit ;
40202: GO 40530
// index := GetElementIndex ( minersList , unit ) ;
40204: LD_ADDR_VAR 0 6
40208: PUSH
40209: LD_EXP 132
40213: PPUSH
40214: LD_VAR 0 1
40218: PPUSH
40219: CALL 45905 0 2
40223: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40224: LD_ADDR_VAR 0 8
40228: PUSH
40229: LD_EXP 134
40233: PUSH
40234: LD_EXP 133
40238: PUSH
40239: LD_VAR 0 6
40243: ARRAY
40244: MINUS
40245: ST_TO_ADDR
// if not minesFreeAmount then
40246: LD_VAR 0 8
40250: NOT
40251: IFFALSE 40255
// exit ;
40253: GO 40530
// tmp := [ ] ;
40255: LD_ADDR_VAR 0 7
40259: PUSH
40260: EMPTY
40261: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40262: LD_ADDR_VAR 0 5
40266: PUSH
40267: DOUBLE
40268: LD_INT 1
40270: DEC
40271: ST_TO_ADDR
40272: LD_VAR 0 8
40276: PUSH
40277: FOR_TO
40278: IFFALSE 40477
// begin _d := rand ( 0 , 5 ) ;
40280: LD_ADDR_VAR 0 11
40284: PUSH
40285: LD_INT 0
40287: PPUSH
40288: LD_INT 5
40290: PPUSH
40291: CALL_OW 12
40295: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40296: LD_ADDR_VAR 0 12
40300: PUSH
40301: LD_INT 2
40303: PPUSH
40304: LD_INT 6
40306: PPUSH
40307: CALL_OW 12
40311: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40312: LD_ADDR_VAR 0 9
40316: PUSH
40317: LD_VAR 0 2
40321: PPUSH
40322: LD_VAR 0 11
40326: PPUSH
40327: LD_VAR 0 12
40331: PPUSH
40332: CALL_OW 272
40336: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40337: LD_ADDR_VAR 0 10
40341: PUSH
40342: LD_VAR 0 3
40346: PPUSH
40347: LD_VAR 0 11
40351: PPUSH
40352: LD_VAR 0 12
40356: PPUSH
40357: CALL_OW 273
40361: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40362: LD_VAR 0 9
40366: PPUSH
40367: LD_VAR 0 10
40371: PPUSH
40372: CALL_OW 488
40376: IFFALSE 40400
40378: PUSH
40379: LD_VAR 0 9
40383: PUSH
40384: LD_VAR 0 10
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_VAR 0 7
40397: IN
40398: NOT
40399: AND
40400: IFFALSE 40419
40402: PUSH
40403: LD_VAR 0 9
40407: PPUSH
40408: LD_VAR 0 10
40412: PPUSH
40413: CALL_OW 458
40417: NOT
40418: AND
40419: IFFALSE 40461
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40421: LD_ADDR_VAR 0 7
40425: PUSH
40426: LD_VAR 0 7
40430: PPUSH
40431: LD_VAR 0 7
40435: PUSH
40436: LD_INT 1
40438: PLUS
40439: PPUSH
40440: LD_VAR 0 9
40444: PUSH
40445: LD_VAR 0 10
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PPUSH
40454: CALL_OW 1
40458: ST_TO_ADDR
40459: GO 40475
// i := i - 1 ;
40461: LD_ADDR_VAR 0 5
40465: PUSH
40466: LD_VAR 0 5
40470: PUSH
40471: LD_INT 1
40473: MINUS
40474: ST_TO_ADDR
// end ;
40475: GO 40277
40477: POP
40478: POP
// for i in tmp do
40479: LD_ADDR_VAR 0 5
40483: PUSH
40484: LD_VAR 0 7
40488: PUSH
40489: FOR_IN
40490: IFFALSE 40528
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40492: LD_VAR 0 1
40496: PPUSH
40497: LD_VAR 0 5
40501: PUSH
40502: LD_INT 1
40504: ARRAY
40505: PPUSH
40506: LD_VAR 0 5
40510: PUSH
40511: LD_INT 2
40513: ARRAY
40514: PPUSH
40515: CALL 39462 0 3
40519: NOT
40520: IFFALSE 40526
// exit ;
40522: POP
40523: POP
40524: GO 40530
40526: GO 40489
40528: POP
40529: POP
// end ;
40530: LD_VAR 0 4
40534: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40535: LD_INT 0
40537: PPUSH
40538: PPUSH
40539: PPUSH
40540: PPUSH
40541: PPUSH
40542: PPUSH
40543: PPUSH
40544: PPUSH
40545: PPUSH
// if GetClass ( unit ) <> class_sniper then
40546: LD_VAR 0 1
40550: PPUSH
40551: CALL_OW 257
40555: PUSH
40556: LD_INT 5
40558: NONEQUAL
40559: IFFALSE 40563
// exit ;
40561: GO 41033
// dist := 8 ;
40563: LD_ADDR_VAR 0 5
40567: PUSH
40568: LD_INT 8
40570: ST_TO_ADDR
// viewRange := 12 ;
40571: LD_ADDR_VAR 0 8
40575: PUSH
40576: LD_INT 12
40578: ST_TO_ADDR
// side := GetSide ( unit ) ;
40579: LD_ADDR_VAR 0 6
40583: PUSH
40584: LD_VAR 0 1
40588: PPUSH
40589: CALL_OW 255
40593: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40594: LD_INT 61
40596: PPUSH
40597: LD_VAR 0 6
40601: PPUSH
40602: CALL_OW 321
40606: PUSH
40607: LD_INT 2
40609: EQUAL
40610: IFFALSE 40620
// viewRange := 16 ;
40612: LD_ADDR_VAR 0 8
40616: PUSH
40617: LD_INT 16
40619: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40620: LD_VAR 0 1
40624: PPUSH
40625: LD_VAR 0 2
40629: PPUSH
40630: LD_VAR 0 3
40634: PPUSH
40635: CALL_OW 297
40639: PUSH
40640: LD_VAR 0 5
40644: GREATER
40645: IFFALSE 40724
// begin ComMoveXY ( unit , x , y ) ;
40647: LD_VAR 0 1
40651: PPUSH
40652: LD_VAR 0 2
40656: PPUSH
40657: LD_VAR 0 3
40661: PPUSH
40662: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40666: LD_INT 35
40668: PPUSH
40669: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40673: LD_VAR 0 1
40677: PPUSH
40678: LD_VAR 0 2
40682: PPUSH
40683: LD_VAR 0 3
40687: PPUSH
40688: CALL 77951 0 3
40692: NOT
40693: IFFALSE 40697
// exit ;
40695: GO 41033
// until GetDistUnitXY ( unit , x , y ) < dist ;
40697: LD_VAR 0 1
40701: PPUSH
40702: LD_VAR 0 2
40706: PPUSH
40707: LD_VAR 0 3
40711: PPUSH
40712: CALL_OW 297
40716: PUSH
40717: LD_VAR 0 5
40721: LESS
40722: IFFALSE 40666
// end ; ComTurnXY ( unit , x , y ) ;
40724: LD_VAR 0 1
40728: PPUSH
40729: LD_VAR 0 2
40733: PPUSH
40734: LD_VAR 0 3
40738: PPUSH
40739: CALL_OW 118
// repeat if Multiplayer then
40743: LD_OWVAR 4
40747: IFFALSE 40758
// wait ( 35 ) else
40749: LD_INT 35
40751: PPUSH
40752: CALL_OW 67
40756: GO 40765
// wait ( 5 ) ;
40758: LD_INT 5
40760: PPUSH
40761: CALL_OW 67
// _d := GetDir ( unit ) ;
40765: LD_ADDR_VAR 0 11
40769: PUSH
40770: LD_VAR 0 1
40774: PPUSH
40775: CALL_OW 254
40779: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
40780: LD_ADDR_VAR 0 7
40784: PUSH
40785: LD_VAR 0 1
40789: PPUSH
40790: CALL_OW 250
40794: PPUSH
40795: LD_VAR 0 1
40799: PPUSH
40800: CALL_OW 251
40804: PPUSH
40805: LD_VAR 0 2
40809: PPUSH
40810: LD_VAR 0 3
40814: PPUSH
40815: CALL 80587 0 4
40819: ST_TO_ADDR
// until dir = _d ;
40820: LD_VAR 0 7
40824: PUSH
40825: LD_VAR 0 11
40829: EQUAL
40830: IFFALSE 40743
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
40832: LD_ADDR_VAR 0 9
40836: PUSH
40837: LD_VAR 0 1
40841: PPUSH
40842: CALL_OW 250
40846: PPUSH
40847: LD_VAR 0 7
40851: PPUSH
40852: LD_VAR 0 5
40856: PPUSH
40857: CALL_OW 272
40861: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
40862: LD_ADDR_VAR 0 10
40866: PUSH
40867: LD_VAR 0 1
40871: PPUSH
40872: CALL_OW 251
40876: PPUSH
40877: LD_VAR 0 7
40881: PPUSH
40882: LD_VAR 0 5
40886: PPUSH
40887: CALL_OW 273
40891: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40892: LD_VAR 0 9
40896: PPUSH
40897: LD_VAR 0 10
40901: PPUSH
40902: CALL_OW 488
40906: NOT
40907: IFFALSE 40911
// exit ;
40909: GO 41033
// ComAnimCustom ( unit , 1 ) ;
40911: LD_VAR 0 1
40915: PPUSH
40916: LD_INT 1
40918: PPUSH
40919: CALL_OW 592
// p := 0 ;
40923: LD_ADDR_VAR 0 12
40927: PUSH
40928: LD_INT 0
40930: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40931: LD_VAR 0 9
40935: PPUSH
40936: LD_VAR 0 10
40940: PPUSH
40941: LD_VAR 0 6
40945: PPUSH
40946: LD_VAR 0 8
40950: PPUSH
40951: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
40955: LD_INT 35
40957: PPUSH
40958: CALL_OW 67
// p := Inc ( p ) ;
40962: LD_ADDR_VAR 0 12
40966: PUSH
40967: LD_VAR 0 12
40971: PPUSH
40972: CALL 80543 0 1
40976: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
40977: LD_VAR 0 12
40981: PUSH
40982: LD_INT 3
40984: EQUAL
40985: IFTRUE 40999
40987: PUSH
40988: LD_VAR 0 1
40992: PPUSH
40993: CALL_OW 302
40997: NOT
40998: OR
40999: IFTRUE 41012
41001: PUSH
41002: LD_VAR 0 1
41006: PPUSH
41007: CALL_OW 301
41011: OR
41012: IFFALSE 40955
// RemoveSeeing ( _x , _y , side ) ;
41014: LD_VAR 0 9
41018: PPUSH
41019: LD_VAR 0 10
41023: PPUSH
41024: LD_VAR 0 6
41028: PPUSH
41029: CALL_OW 331
// end ; end_of_file
41033: LD_VAR 0 4
41037: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41038: LD_INT 0
41040: PPUSH
41041: PPUSH
// if exist_mode then
41042: LD_VAR 0 2
41046: IFFALSE 41092
// begin unit := CreateCharacter ( prefix & ident ) ;
41048: LD_ADDR_VAR 0 5
41052: PUSH
41053: LD_VAR 0 3
41057: PUSH
41058: LD_VAR 0 1
41062: STR
41063: PPUSH
41064: CALL_OW 34
41068: ST_TO_ADDR
// if unit then
41069: LD_VAR 0 5
41073: IFFALSE 41090
// DeleteCharacters ( prefix & ident ) ;
41075: LD_VAR 0 3
41079: PUSH
41080: LD_VAR 0 1
41084: STR
41085: PPUSH
41086: CALL_OW 40
// end else
41090: GO 41107
// unit := NewCharacter ( ident ) ;
41092: LD_ADDR_VAR 0 5
41096: PUSH
41097: LD_VAR 0 1
41101: PPUSH
41102: CALL_OW 25
41106: ST_TO_ADDR
// result := unit ;
41107: LD_ADDR_VAR 0 4
41111: PUSH
41112: LD_VAR 0 5
41116: ST_TO_ADDR
// end ;
41117: LD_VAR 0 4
41121: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
41122: LD_INT 0
41124: PPUSH
41125: PPUSH
// if exist_mode then
41126: LD_VAR 0 2
41130: IFFALSE 41155
// unit := CreateCharacter ( prefix & ident ) else
41132: LD_ADDR_VAR 0 5
41136: PUSH
41137: LD_VAR 0 3
41141: PUSH
41142: LD_VAR 0 1
41146: STR
41147: PPUSH
41148: CALL_OW 34
41152: ST_TO_ADDR
41153: GO 41170
// unit := NewCharacter ( ident ) ;
41155: LD_ADDR_VAR 0 5
41159: PUSH
41160: LD_VAR 0 1
41164: PPUSH
41165: CALL_OW 25
41169: ST_TO_ADDR
// result := unit ;
41170: LD_ADDR_VAR 0 4
41174: PUSH
41175: LD_VAR 0 5
41179: ST_TO_ADDR
// end ;
41180: LD_VAR 0 4
41184: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41185: LD_INT 0
41187: PPUSH
41188: PPUSH
// if not side or not nation then
41189: LD_VAR 0 1
41193: NOT
41194: IFTRUE 41203
41196: PUSH
41197: LD_VAR 0 2
41201: NOT
41202: OR
41203: IFFALSE 41207
// exit ;
41205: GO 41977
// case nation of nation_american :
41207: LD_VAR 0 2
41211: PUSH
41212: LD_INT 1
41214: DOUBLE
41215: EQUAL
41216: IFTRUE 41220
41218: GO 41434
41220: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41221: LD_ADDR_VAR 0 4
41225: PUSH
41226: LD_INT 35
41228: PUSH
41229: LD_INT 45
41231: PUSH
41232: LD_INT 46
41234: PUSH
41235: LD_INT 47
41237: PUSH
41238: LD_INT 82
41240: PUSH
41241: LD_INT 83
41243: PUSH
41244: LD_INT 84
41246: PUSH
41247: LD_INT 85
41249: PUSH
41250: LD_INT 86
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: LD_INT 6
41261: PUSH
41262: LD_INT 15
41264: PUSH
41265: LD_INT 16
41267: PUSH
41268: LD_INT 7
41270: PUSH
41271: LD_INT 12
41273: PUSH
41274: LD_INT 13
41276: PUSH
41277: LD_INT 10
41279: PUSH
41280: LD_INT 14
41282: PUSH
41283: LD_INT 20
41285: PUSH
41286: LD_INT 21
41288: PUSH
41289: LD_INT 22
41291: PUSH
41292: LD_INT 25
41294: PUSH
41295: LD_INT 32
41297: PUSH
41298: LD_INT 27
41300: PUSH
41301: LD_INT 36
41303: PUSH
41304: LD_INT 69
41306: PUSH
41307: LD_INT 39
41309: PUSH
41310: LD_INT 34
41312: PUSH
41313: LD_INT 40
41315: PUSH
41316: LD_INT 48
41318: PUSH
41319: LD_INT 49
41321: PUSH
41322: LD_INT 50
41324: PUSH
41325: LD_INT 51
41327: PUSH
41328: LD_INT 52
41330: PUSH
41331: LD_INT 53
41333: PUSH
41334: LD_INT 54
41336: PUSH
41337: LD_INT 55
41339: PUSH
41340: LD_INT 56
41342: PUSH
41343: LD_INT 57
41345: PUSH
41346: LD_INT 58
41348: PUSH
41349: LD_INT 59
41351: PUSH
41352: LD_INT 60
41354: PUSH
41355: LD_INT 61
41357: PUSH
41358: LD_INT 62
41360: PUSH
41361: LD_INT 80
41363: PUSH
41364: LD_INT 82
41366: PUSH
41367: LD_INT 83
41369: PUSH
41370: LD_INT 84
41372: PUSH
41373: LD_INT 85
41375: PUSH
41376: LD_INT 86
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: ST_TO_ADDR
41432: GO 41899
41434: LD_INT 2
41436: DOUBLE
41437: EQUAL
41438: IFTRUE 41442
41440: GO 41668
41442: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41443: LD_ADDR_VAR 0 4
41447: PUSH
41448: LD_INT 35
41450: PUSH
41451: LD_INT 45
41453: PUSH
41454: LD_INT 46
41456: PUSH
41457: LD_INT 47
41459: PUSH
41460: LD_INT 82
41462: PUSH
41463: LD_INT 83
41465: PUSH
41466: LD_INT 84
41468: PUSH
41469: LD_INT 85
41471: PUSH
41472: LD_INT 87
41474: PUSH
41475: LD_INT 70
41477: PUSH
41478: LD_INT 1
41480: PUSH
41481: LD_INT 11
41483: PUSH
41484: LD_INT 3
41486: PUSH
41487: LD_INT 4
41489: PUSH
41490: LD_INT 5
41492: PUSH
41493: LD_INT 6
41495: PUSH
41496: LD_INT 15
41498: PUSH
41499: LD_INT 18
41501: PUSH
41502: LD_INT 7
41504: PUSH
41505: LD_INT 17
41507: PUSH
41508: LD_INT 8
41510: PUSH
41511: LD_INT 20
41513: PUSH
41514: LD_INT 21
41516: PUSH
41517: LD_INT 22
41519: PUSH
41520: LD_INT 72
41522: PUSH
41523: LD_INT 26
41525: PUSH
41526: LD_INT 69
41528: PUSH
41529: LD_INT 39
41531: PUSH
41532: LD_INT 40
41534: PUSH
41535: LD_INT 41
41537: PUSH
41538: LD_INT 42
41540: PUSH
41541: LD_INT 43
41543: PUSH
41544: LD_INT 48
41546: PUSH
41547: LD_INT 49
41549: PUSH
41550: LD_INT 50
41552: PUSH
41553: LD_INT 51
41555: PUSH
41556: LD_INT 52
41558: PUSH
41559: LD_INT 53
41561: PUSH
41562: LD_INT 54
41564: PUSH
41565: LD_INT 55
41567: PUSH
41568: LD_INT 56
41570: PUSH
41571: LD_INT 60
41573: PUSH
41574: LD_INT 61
41576: PUSH
41577: LD_INT 62
41579: PUSH
41580: LD_INT 66
41582: PUSH
41583: LD_INT 67
41585: PUSH
41586: LD_INT 68
41588: PUSH
41589: LD_INT 81
41591: PUSH
41592: LD_INT 82
41594: PUSH
41595: LD_INT 83
41597: PUSH
41598: LD_INT 84
41600: PUSH
41601: LD_INT 85
41603: PUSH
41604: LD_INT 87
41606: PUSH
41607: LD_INT 88
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: ST_TO_ADDR
41666: GO 41899
41668: LD_INT 3
41670: DOUBLE
41671: EQUAL
41672: IFTRUE 41676
41674: GO 41898
41676: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41677: LD_ADDR_VAR 0 4
41681: PUSH
41682: LD_INT 46
41684: PUSH
41685: LD_INT 47
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: LD_INT 82
41696: PUSH
41697: LD_INT 83
41699: PUSH
41700: LD_INT 84
41702: PUSH
41703: LD_INT 85
41705: PUSH
41706: LD_INT 86
41708: PUSH
41709: LD_INT 11
41711: PUSH
41712: LD_INT 9
41714: PUSH
41715: LD_INT 20
41717: PUSH
41718: LD_INT 19
41720: PUSH
41721: LD_INT 21
41723: PUSH
41724: LD_INT 24
41726: PUSH
41727: LD_INT 22
41729: PUSH
41730: LD_INT 25
41732: PUSH
41733: LD_INT 28
41735: PUSH
41736: LD_INT 29
41738: PUSH
41739: LD_INT 30
41741: PUSH
41742: LD_INT 31
41744: PUSH
41745: LD_INT 37
41747: PUSH
41748: LD_INT 38
41750: PUSH
41751: LD_INT 32
41753: PUSH
41754: LD_INT 27
41756: PUSH
41757: LD_INT 33
41759: PUSH
41760: LD_INT 69
41762: PUSH
41763: LD_INT 39
41765: PUSH
41766: LD_INT 34
41768: PUSH
41769: LD_INT 40
41771: PUSH
41772: LD_INT 71
41774: PUSH
41775: LD_INT 23
41777: PUSH
41778: LD_INT 44
41780: PUSH
41781: LD_INT 48
41783: PUSH
41784: LD_INT 49
41786: PUSH
41787: LD_INT 50
41789: PUSH
41790: LD_INT 51
41792: PUSH
41793: LD_INT 52
41795: PUSH
41796: LD_INT 53
41798: PUSH
41799: LD_INT 54
41801: PUSH
41802: LD_INT 55
41804: PUSH
41805: LD_INT 56
41807: PUSH
41808: LD_INT 57
41810: PUSH
41811: LD_INT 58
41813: PUSH
41814: LD_INT 59
41816: PUSH
41817: LD_INT 63
41819: PUSH
41820: LD_INT 64
41822: PUSH
41823: LD_INT 65
41825: PUSH
41826: LD_INT 82
41828: PUSH
41829: LD_INT 83
41831: PUSH
41832: LD_INT 84
41834: PUSH
41835: LD_INT 85
41837: PUSH
41838: LD_INT 86
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: ST_TO_ADDR
41896: GO 41899
41898: POP
// if state > - 1 and state < 3 then
41899: LD_VAR 0 3
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: GREATER
41908: IFFALSE 41920
41910: PUSH
41911: LD_VAR 0 3
41915: PUSH
41916: LD_INT 3
41918: LESS
41919: AND
41920: IFFALSE 41977
// for i in result do
41922: LD_ADDR_VAR 0 5
41926: PUSH
41927: LD_VAR 0 4
41931: PUSH
41932: FOR_IN
41933: IFFALSE 41975
// if GetTech ( i , side ) <> state then
41935: LD_VAR 0 5
41939: PPUSH
41940: LD_VAR 0 1
41944: PPUSH
41945: CALL_OW 321
41949: PUSH
41950: LD_VAR 0 3
41954: NONEQUAL
41955: IFFALSE 41973
// result := result diff i ;
41957: LD_ADDR_VAR 0 4
41961: PUSH
41962: LD_VAR 0 4
41966: PUSH
41967: LD_VAR 0 5
41971: DIFF
41972: ST_TO_ADDR
41973: GO 41932
41975: POP
41976: POP
// end ;
41977: LD_VAR 0 4
41981: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41982: LD_INT 0
41984: PPUSH
41985: PPUSH
41986: PPUSH
// result := true ;
41987: LD_ADDR_VAR 0 3
41991: PUSH
41992: LD_INT 1
41994: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41995: LD_ADDR_VAR 0 5
41999: PUSH
42000: LD_VAR 0 2
42004: PPUSH
42005: CALL_OW 480
42009: ST_TO_ADDR
// if not tmp then
42010: LD_VAR 0 5
42014: NOT
42015: IFFALSE 42019
// exit ;
42017: GO 42068
// for i in tmp do
42019: LD_ADDR_VAR 0 4
42023: PUSH
42024: LD_VAR 0 5
42028: PUSH
42029: FOR_IN
42030: IFFALSE 42066
// if GetTech ( i , side ) <> state_researched then
42032: LD_VAR 0 4
42036: PPUSH
42037: LD_VAR 0 1
42041: PPUSH
42042: CALL_OW 321
42046: PUSH
42047: LD_INT 2
42049: NONEQUAL
42050: IFFALSE 42064
// begin result := false ;
42052: LD_ADDR_VAR 0 3
42056: PUSH
42057: LD_INT 0
42059: ST_TO_ADDR
// exit ;
42060: POP
42061: POP
42062: GO 42068
// end ;
42064: GO 42029
42066: POP
42067: POP
// end ;
42068: LD_VAR 0 3
42072: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42073: LD_INT 0
42075: PPUSH
42076: PPUSH
42077: PPUSH
42078: PPUSH
42079: PPUSH
42080: PPUSH
42081: PPUSH
42082: PPUSH
42083: PPUSH
42084: PPUSH
42085: PPUSH
42086: PPUSH
42087: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42088: LD_VAR 0 1
42092: NOT
42093: IFTRUE 42110
42095: PUSH
42096: LD_VAR 0 1
42100: PPUSH
42101: CALL_OW 257
42105: PUSH
42106: LD_INT 9
42108: NONEQUAL
42109: OR
42110: IFFALSE 42114
// exit ;
42112: GO 42693
// side := GetSide ( unit ) ;
42114: LD_ADDR_VAR 0 9
42118: PUSH
42119: LD_VAR 0 1
42123: PPUSH
42124: CALL_OW 255
42128: ST_TO_ADDR
// tech_space := tech_spacanom ;
42129: LD_ADDR_VAR 0 12
42133: PUSH
42134: LD_INT 29
42136: ST_TO_ADDR
// tech_time := tech_taurad ;
42137: LD_ADDR_VAR 0 13
42141: PUSH
42142: LD_INT 28
42144: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42145: LD_ADDR_VAR 0 11
42149: PUSH
42150: LD_VAR 0 1
42154: PPUSH
42155: CALL_OW 310
42159: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42160: LD_VAR 0 11
42164: PPUSH
42165: CALL_OW 247
42169: PUSH
42170: LD_INT 2
42172: EQUAL
42173: IFFALSE 42177
// exit ;
42175: GO 42693
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42177: LD_ADDR_VAR 0 8
42181: PUSH
42182: LD_INT 81
42184: PUSH
42185: LD_VAR 0 9
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 3
42196: PUSH
42197: LD_INT 21
42199: PUSH
42200: LD_INT 3
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PPUSH
42215: CALL_OW 69
42219: ST_TO_ADDR
// if not tmp then
42220: LD_VAR 0 8
42224: NOT
42225: IFFALSE 42229
// exit ;
42227: GO 42693
// if in_unit then
42229: LD_VAR 0 11
42233: IFFALSE 42257
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42235: LD_ADDR_VAR 0 10
42239: PUSH
42240: LD_VAR 0 8
42244: PPUSH
42245: LD_VAR 0 11
42249: PPUSH
42250: CALL_OW 74
42254: ST_TO_ADDR
42255: GO 42277
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42257: LD_ADDR_VAR 0 10
42261: PUSH
42262: LD_VAR 0 8
42266: PPUSH
42267: LD_VAR 0 1
42271: PPUSH
42272: CALL_OW 74
42276: ST_TO_ADDR
// if not enemy then
42277: LD_VAR 0 10
42281: NOT
42282: IFFALSE 42286
// exit ;
42284: GO 42693
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42286: LD_VAR 0 11
42290: IFFALSE 42312
42292: PUSH
42293: LD_VAR 0 11
42297: PPUSH
42298: LD_VAR 0 10
42302: PPUSH
42303: CALL_OW 296
42307: PUSH
42308: LD_INT 13
42310: GREATER
42311: AND
42312: IFTRUE 42334
42314: PUSH
42315: LD_VAR 0 1
42319: PPUSH
42320: LD_VAR 0 10
42324: PPUSH
42325: CALL_OW 296
42329: PUSH
42330: LD_INT 12
42332: GREATER
42333: OR
42334: IFFALSE 42338
// exit ;
42336: GO 42693
// missile := [ 1 ] ;
42338: LD_ADDR_VAR 0 14
42342: PUSH
42343: LD_INT 1
42345: PUSH
42346: EMPTY
42347: LIST
42348: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42349: LD_VAR 0 9
42353: PPUSH
42354: LD_VAR 0 12
42358: PPUSH
42359: CALL_OW 325
42363: IFFALSE 42392
// missile := Replace ( missile , missile + 1 , 2 ) ;
42365: LD_ADDR_VAR 0 14
42369: PUSH
42370: LD_VAR 0 14
42374: PPUSH
42375: LD_VAR 0 14
42379: PUSH
42380: LD_INT 1
42382: PLUS
42383: PPUSH
42384: LD_INT 2
42386: PPUSH
42387: CALL_OW 1
42391: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42392: LD_VAR 0 9
42396: PPUSH
42397: LD_VAR 0 13
42401: PPUSH
42402: CALL_OW 325
42406: IFFALSE 42430
42408: PUSH
42409: LD_VAR 0 10
42413: PPUSH
42414: CALL_OW 255
42418: PPUSH
42419: LD_VAR 0 13
42423: PPUSH
42424: CALL_OW 325
42428: NOT
42429: AND
42430: IFFALSE 42459
// missile := Replace ( missile , missile + 1 , 3 ) ;
42432: LD_ADDR_VAR 0 14
42436: PUSH
42437: LD_VAR 0 14
42441: PPUSH
42442: LD_VAR 0 14
42446: PUSH
42447: LD_INT 1
42449: PLUS
42450: PPUSH
42451: LD_INT 3
42453: PPUSH
42454: CALL_OW 1
42458: ST_TO_ADDR
// if missile < 2 then
42459: LD_VAR 0 14
42463: PUSH
42464: LD_INT 2
42466: LESS
42467: IFFALSE 42471
// exit ;
42469: GO 42693
// x := GetX ( enemy ) ;
42471: LD_ADDR_VAR 0 4
42475: PUSH
42476: LD_VAR 0 10
42480: PPUSH
42481: CALL_OW 250
42485: ST_TO_ADDR
// y := GetY ( enemy ) ;
42486: LD_ADDR_VAR 0 5
42490: PUSH
42491: LD_VAR 0 10
42495: PPUSH
42496: CALL_OW 251
42500: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42501: LD_ADDR_VAR 0 6
42505: PUSH
42506: LD_VAR 0 4
42510: PUSH
42511: LD_INT 1
42513: NEG
42514: PPUSH
42515: LD_INT 1
42517: PPUSH
42518: CALL_OW 12
42522: PLUS
42523: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42524: LD_ADDR_VAR 0 7
42528: PUSH
42529: LD_VAR 0 5
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PPUSH
42538: LD_INT 1
42540: PPUSH
42541: CALL_OW 12
42545: PLUS
42546: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42547: LD_VAR 0 6
42551: PPUSH
42552: LD_VAR 0 7
42556: PPUSH
42557: CALL_OW 488
42561: NOT
42562: IFFALSE 42584
// begin _x := x ;
42564: LD_ADDR_VAR 0 6
42568: PUSH
42569: LD_VAR 0 4
42573: ST_TO_ADDR
// _y := y ;
42574: LD_ADDR_VAR 0 7
42578: PUSH
42579: LD_VAR 0 5
42583: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42584: LD_ADDR_VAR 0 3
42588: PUSH
42589: LD_INT 1
42591: PPUSH
42592: LD_VAR 0 14
42596: PPUSH
42597: CALL_OW 12
42601: ST_TO_ADDR
// case i of 1 :
42602: LD_VAR 0 3
42606: PUSH
42607: LD_INT 1
42609: DOUBLE
42610: EQUAL
42611: IFTRUE 42615
42613: GO 42632
42615: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42616: LD_VAR 0 1
42620: PPUSH
42621: LD_VAR 0 10
42625: PPUSH
42626: CALL_OW 115
42630: GO 42693
42632: LD_INT 2
42634: DOUBLE
42635: EQUAL
42636: IFTRUE 42640
42638: GO 42662
42640: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42641: LD_VAR 0 1
42645: PPUSH
42646: LD_VAR 0 6
42650: PPUSH
42651: LD_VAR 0 7
42655: PPUSH
42656: CALL_OW 153
42660: GO 42693
42662: LD_INT 3
42664: DOUBLE
42665: EQUAL
42666: IFTRUE 42670
42668: GO 42692
42670: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42671: LD_VAR 0 1
42675: PPUSH
42676: LD_VAR 0 6
42680: PPUSH
42681: LD_VAR 0 7
42685: PPUSH
42686: CALL_OW 154
42690: GO 42693
42692: POP
// end ;
42693: LD_VAR 0 2
42697: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42698: LD_INT 0
42700: PPUSH
42701: PPUSH
42702: PPUSH
42703: PPUSH
42704: PPUSH
42705: PPUSH
// if not unit or not building then
42706: LD_VAR 0 1
42710: NOT
42711: IFTRUE 42720
42713: PUSH
42714: LD_VAR 0 2
42718: NOT
42719: OR
42720: IFFALSE 42724
// exit ;
42722: GO 42882
// x := GetX ( building ) ;
42724: LD_ADDR_VAR 0 5
42728: PUSH
42729: LD_VAR 0 2
42733: PPUSH
42734: CALL_OW 250
42738: ST_TO_ADDR
// y := GetY ( building ) ;
42739: LD_ADDR_VAR 0 6
42743: PUSH
42744: LD_VAR 0 2
42748: PPUSH
42749: CALL_OW 251
42753: ST_TO_ADDR
// for i := 0 to 5 do
42754: LD_ADDR_VAR 0 4
42758: PUSH
42759: DOUBLE
42760: LD_INT 0
42762: DEC
42763: ST_TO_ADDR
42764: LD_INT 5
42766: PUSH
42767: FOR_TO
42768: IFFALSE 42880
// begin _x := ShiftX ( x , i , 3 ) ;
42770: LD_ADDR_VAR 0 7
42774: PUSH
42775: LD_VAR 0 5
42779: PPUSH
42780: LD_VAR 0 4
42784: PPUSH
42785: LD_INT 3
42787: PPUSH
42788: CALL_OW 272
42792: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42793: LD_ADDR_VAR 0 8
42797: PUSH
42798: LD_VAR 0 6
42802: PPUSH
42803: LD_VAR 0 4
42807: PPUSH
42808: LD_INT 3
42810: PPUSH
42811: CALL_OW 273
42815: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42816: LD_VAR 0 7
42820: PPUSH
42821: LD_VAR 0 8
42825: PPUSH
42826: CALL_OW 488
42830: NOT
42831: IFFALSE 42835
// continue ;
42833: GO 42767
// if HexInfo ( _x , _y ) = 0 then
42835: LD_VAR 0 7
42839: PPUSH
42840: LD_VAR 0 8
42844: PPUSH
42845: CALL_OW 428
42849: PUSH
42850: LD_INT 0
42852: EQUAL
42853: IFFALSE 42878
// begin ComMoveXY ( unit , _x , _y ) ;
42855: LD_VAR 0 1
42859: PPUSH
42860: LD_VAR 0 7
42864: PPUSH
42865: LD_VAR 0 8
42869: PPUSH
42870: CALL_OW 111
// exit ;
42874: POP
42875: POP
42876: GO 42882
// end ; end ;
42878: GO 42767
42880: POP
42881: POP
// end ;
42882: LD_VAR 0 3
42886: RET
// export function ScanBase ( side , base_area ) ; begin
42887: LD_INT 0
42889: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42890: LD_ADDR_VAR 0 3
42894: PUSH
42895: LD_VAR 0 2
42899: PPUSH
42900: LD_INT 81
42902: PUSH
42903: LD_VAR 0 1
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PPUSH
42912: CALL_OW 70
42916: ST_TO_ADDR
// end ;
42917: LD_VAR 0 3
42921: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42922: LD_INT 0
42924: PPUSH
42925: PPUSH
42926: PPUSH
42927: PPUSH
// result := false ;
42928: LD_ADDR_VAR 0 2
42932: PUSH
42933: LD_INT 0
42935: ST_TO_ADDR
// side := GetSide ( unit ) ;
42936: LD_ADDR_VAR 0 3
42940: PUSH
42941: LD_VAR 0 1
42945: PPUSH
42946: CALL_OW 255
42950: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42951: LD_ADDR_VAR 0 4
42955: PUSH
42956: LD_VAR 0 1
42960: PPUSH
42961: CALL_OW 248
42965: ST_TO_ADDR
// case nat of 1 :
42966: LD_VAR 0 4
42970: PUSH
42971: LD_INT 1
42973: DOUBLE
42974: EQUAL
42975: IFTRUE 42979
42977: GO 42990
42979: POP
// tech := tech_lassight ; 2 :
42980: LD_ADDR_VAR 0 5
42984: PUSH
42985: LD_INT 12
42987: ST_TO_ADDR
42988: GO 43029
42990: LD_INT 2
42992: DOUBLE
42993: EQUAL
42994: IFTRUE 42998
42996: GO 43009
42998: POP
// tech := tech_mortar ; 3 :
42999: LD_ADDR_VAR 0 5
43003: PUSH
43004: LD_INT 41
43006: ST_TO_ADDR
43007: GO 43029
43009: LD_INT 3
43011: DOUBLE
43012: EQUAL
43013: IFTRUE 43017
43015: GO 43028
43017: POP
// tech := tech_bazooka ; end ;
43018: LD_ADDR_VAR 0 5
43022: PUSH
43023: LD_INT 44
43025: ST_TO_ADDR
43026: GO 43029
43028: POP
// if Researched ( side , tech ) then
43029: LD_VAR 0 3
43033: PPUSH
43034: LD_VAR 0 5
43038: PPUSH
43039: CALL_OW 325
43043: IFFALSE 43070
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43045: LD_ADDR_VAR 0 2
43049: PUSH
43050: LD_INT 5
43052: PUSH
43053: LD_INT 8
43055: PUSH
43056: LD_INT 9
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: LIST
43063: PUSH
43064: LD_VAR 0 4
43068: ARRAY
43069: ST_TO_ADDR
// end ;
43070: LD_VAR 0 2
43074: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43075: LD_INT 0
43077: PPUSH
43078: PPUSH
43079: PPUSH
// if not mines then
43080: LD_VAR 0 2
43084: NOT
43085: IFFALSE 43089
// exit ;
43087: GO 43233
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43089: LD_ADDR_VAR 0 5
43093: PUSH
43094: LD_INT 81
43096: PUSH
43097: LD_VAR 0 1
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 3
43108: PUSH
43109: LD_INT 21
43111: PUSH
43112: LD_INT 3
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PPUSH
43127: CALL_OW 69
43131: ST_TO_ADDR
// for i in mines do
43132: LD_ADDR_VAR 0 4
43136: PUSH
43137: LD_VAR 0 2
43141: PUSH
43142: FOR_IN
43143: IFFALSE 43231
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43145: LD_VAR 0 4
43149: PUSH
43150: LD_INT 1
43152: ARRAY
43153: PPUSH
43154: LD_VAR 0 4
43158: PUSH
43159: LD_INT 2
43161: ARRAY
43162: PPUSH
43163: CALL_OW 458
43167: NOT
43168: IFFALSE 43172
// continue ;
43170: GO 43142
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43172: LD_VAR 0 4
43176: PUSH
43177: LD_INT 1
43179: ARRAY
43180: PPUSH
43181: LD_VAR 0 4
43185: PUSH
43186: LD_INT 2
43188: ARRAY
43189: PPUSH
43190: CALL_OW 428
43194: PUSH
43195: LD_VAR 0 5
43199: IN
43200: IFFALSE 43229
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43202: LD_VAR 0 4
43206: PUSH
43207: LD_INT 1
43209: ARRAY
43210: PPUSH
43211: LD_VAR 0 4
43215: PUSH
43216: LD_INT 2
43218: ARRAY
43219: PPUSH
43220: LD_VAR 0 1
43224: PPUSH
43225: CALL_OW 456
// end ;
43229: GO 43142
43231: POP
43232: POP
// end ;
43233: LD_VAR 0 3
43237: RET
// export function Count ( array ) ; begin
43238: LD_INT 0
43240: PPUSH
// result := array + 0 ;
43241: LD_ADDR_VAR 0 2
43245: PUSH
43246: LD_VAR 0 1
43250: PUSH
43251: LD_INT 0
43253: PLUS
43254: ST_TO_ADDR
// end ;
43255: LD_VAR 0 2
43259: RET
// export function IsEmpty ( building ) ; begin
43260: LD_INT 0
43262: PPUSH
// if not building then
43263: LD_VAR 0 1
43267: NOT
43268: IFFALSE 43272
// exit ;
43270: GO 43315
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43272: LD_ADDR_VAR 0 2
43276: PUSH
43277: LD_VAR 0 1
43281: PUSH
43282: LD_INT 22
43284: PUSH
43285: LD_VAR 0 1
43289: PPUSH
43290: CALL_OW 255
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 58
43301: PUSH
43302: EMPTY
43303: LIST
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PPUSH
43309: CALL_OW 69
43313: IN
43314: ST_TO_ADDR
// end ;
43315: LD_VAR 0 2
43319: RET
// export function IsNotFull ( building ) ; var places ; begin
43320: LD_INT 0
43322: PPUSH
43323: PPUSH
// if not building then
43324: LD_VAR 0 1
43328: NOT
43329: IFFALSE 43333
// exit ;
43331: GO 43361
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43333: LD_ADDR_VAR 0 2
43337: PUSH
43338: LD_VAR 0 1
43342: PPUSH
43343: LD_INT 3
43345: PUSH
43346: LD_INT 62
43348: PUSH
43349: EMPTY
43350: LIST
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PPUSH
43356: CALL_OW 72
43360: ST_TO_ADDR
// end ;
43361: LD_VAR 0 2
43365: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43366: LD_INT 0
43368: PPUSH
43369: PPUSH
43370: PPUSH
43371: PPUSH
// tmp := [ ] ;
43372: LD_ADDR_VAR 0 3
43376: PUSH
43377: EMPTY
43378: ST_TO_ADDR
// list := [ ] ;
43379: LD_ADDR_VAR 0 5
43383: PUSH
43384: EMPTY
43385: ST_TO_ADDR
// for i = 16 to 25 do
43386: LD_ADDR_VAR 0 4
43390: PUSH
43391: DOUBLE
43392: LD_INT 16
43394: DEC
43395: ST_TO_ADDR
43396: LD_INT 25
43398: PUSH
43399: FOR_TO
43400: IFFALSE 43473
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43402: LD_ADDR_VAR 0 3
43406: PUSH
43407: LD_VAR 0 3
43411: PUSH
43412: LD_INT 22
43414: PUSH
43415: LD_VAR 0 1
43419: PPUSH
43420: CALL_OW 255
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 91
43431: PUSH
43432: LD_VAR 0 1
43436: PUSH
43437: LD_INT 6
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 30
43447: PUSH
43448: LD_VAR 0 4
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: LIST
43461: PUSH
43462: EMPTY
43463: LIST
43464: PPUSH
43465: CALL_OW 69
43469: ADD
43470: ST_TO_ADDR
43471: GO 43399
43473: POP
43474: POP
// for i = 1 to tmp do
43475: LD_ADDR_VAR 0 4
43479: PUSH
43480: DOUBLE
43481: LD_INT 1
43483: DEC
43484: ST_TO_ADDR
43485: LD_VAR 0 3
43489: PUSH
43490: FOR_TO
43491: IFFALSE 43579
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43493: LD_ADDR_VAR 0 5
43497: PUSH
43498: LD_VAR 0 5
43502: PUSH
43503: LD_VAR 0 3
43507: PUSH
43508: LD_VAR 0 4
43512: ARRAY
43513: PPUSH
43514: CALL_OW 266
43518: PUSH
43519: LD_VAR 0 3
43523: PUSH
43524: LD_VAR 0 4
43528: ARRAY
43529: PPUSH
43530: CALL_OW 250
43534: PUSH
43535: LD_VAR 0 3
43539: PUSH
43540: LD_VAR 0 4
43544: ARRAY
43545: PPUSH
43546: CALL_OW 251
43550: PUSH
43551: LD_VAR 0 3
43555: PUSH
43556: LD_VAR 0 4
43560: ARRAY
43561: PPUSH
43562: CALL_OW 254
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: PUSH
43573: EMPTY
43574: LIST
43575: ADD
43576: ST_TO_ADDR
43577: GO 43490
43579: POP
43580: POP
// result := list ;
43581: LD_ADDR_VAR 0 2
43585: PUSH
43586: LD_VAR 0 5
43590: ST_TO_ADDR
// end ;
43591: LD_VAR 0 2
43595: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43596: LD_INT 0
43598: PPUSH
43599: PPUSH
43600: PPUSH
43601: PPUSH
43602: PPUSH
43603: PPUSH
43604: PPUSH
// if not factory then
43605: LD_VAR 0 1
43609: NOT
43610: IFFALSE 43614
// exit ;
43612: GO 44217
// if control = control_apeman then
43614: LD_VAR 0 4
43618: PUSH
43619: LD_INT 5
43621: EQUAL
43622: IFFALSE 43731
// begin tmp := UnitsInside ( factory ) ;
43624: LD_ADDR_VAR 0 8
43628: PUSH
43629: LD_VAR 0 1
43633: PPUSH
43634: CALL_OW 313
43638: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43639: LD_VAR 0 8
43643: PPUSH
43644: LD_INT 25
43646: PUSH
43647: LD_INT 12
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PPUSH
43654: CALL_OW 72
43658: NOT
43659: IFFALSE 43669
// control := control_manual ;
43661: LD_ADDR_VAR 0 4
43665: PUSH
43666: LD_INT 1
43668: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43669: LD_ADDR_VAR 0 8
43673: PUSH
43674: LD_VAR 0 1
43678: PPUSH
43679: CALL 43366 0 1
43683: ST_TO_ADDR
// if tmp then
43684: LD_VAR 0 8
43688: IFFALSE 43731
// begin for i in tmp do
43690: LD_ADDR_VAR 0 7
43694: PUSH
43695: LD_VAR 0 8
43699: PUSH
43700: FOR_IN
43701: IFFALSE 43729
// if i [ 1 ] = b_ext_radio then
43703: LD_VAR 0 7
43707: PUSH
43708: LD_INT 1
43710: ARRAY
43711: PUSH
43712: LD_INT 22
43714: EQUAL
43715: IFFALSE 43727
// begin control := control_remote ;
43717: LD_ADDR_VAR 0 4
43721: PUSH
43722: LD_INT 2
43724: ST_TO_ADDR
// break ;
43725: GO 43729
// end ;
43727: GO 43700
43729: POP
43730: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43731: LD_VAR 0 1
43735: PPUSH
43736: LD_VAR 0 2
43740: PPUSH
43741: LD_VAR 0 3
43745: PPUSH
43746: LD_VAR 0 4
43750: PPUSH
43751: LD_VAR 0 5
43755: PPUSH
43756: CALL_OW 448
43760: IFFALSE 43795
// begin result := [ chassis , engine , control , weapon ] ;
43762: LD_ADDR_VAR 0 6
43766: PUSH
43767: LD_VAR 0 2
43771: PUSH
43772: LD_VAR 0 3
43776: PUSH
43777: LD_VAR 0 4
43781: PUSH
43782: LD_VAR 0 5
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: ST_TO_ADDR
// exit ;
43793: GO 44217
// end ; _chassis := AvailableChassisList ( factory ) ;
43795: LD_ADDR_VAR 0 9
43799: PUSH
43800: LD_VAR 0 1
43804: PPUSH
43805: CALL_OW 475
43809: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43810: LD_ADDR_VAR 0 11
43814: PUSH
43815: LD_VAR 0 1
43819: PPUSH
43820: CALL_OW 476
43824: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43825: LD_ADDR_VAR 0 12
43829: PUSH
43830: LD_VAR 0 1
43834: PPUSH
43835: CALL_OW 477
43839: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43840: LD_ADDR_VAR 0 10
43844: PUSH
43845: LD_VAR 0 1
43849: PPUSH
43850: CALL_OW 478
43854: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43855: LD_VAR 0 9
43859: NOT
43860: IFTRUE 43869
43862: PUSH
43863: LD_VAR 0 11
43867: NOT
43868: OR
43869: IFTRUE 43878
43871: PUSH
43872: LD_VAR 0 12
43876: NOT
43877: OR
43878: IFTRUE 43887
43880: PUSH
43881: LD_VAR 0 10
43885: NOT
43886: OR
43887: IFFALSE 43922
// begin result := [ chassis , engine , control , weapon ] ;
43889: LD_ADDR_VAR 0 6
43893: PUSH
43894: LD_VAR 0 2
43898: PUSH
43899: LD_VAR 0 3
43903: PUSH
43904: LD_VAR 0 4
43908: PUSH
43909: LD_VAR 0 5
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: ST_TO_ADDR
// exit ;
43920: GO 44217
// end ; if not chassis in _chassis then
43922: LD_VAR 0 2
43926: PUSH
43927: LD_VAR 0 9
43931: IN
43932: NOT
43933: IFFALSE 43959
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43935: LD_ADDR_VAR 0 2
43939: PUSH
43940: LD_VAR 0 9
43944: PUSH
43945: LD_INT 1
43947: PPUSH
43948: LD_VAR 0 9
43952: PPUSH
43953: CALL_OW 12
43957: ARRAY
43958: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43959: LD_VAR 0 2
43963: PPUSH
43964: LD_VAR 0 3
43968: PPUSH
43969: CALL 44222 0 2
43973: NOT
43974: IFFALSE 44035
// repeat engine := _engine [ 1 ] ;
43976: LD_ADDR_VAR 0 3
43980: PUSH
43981: LD_VAR 0 11
43985: PUSH
43986: LD_INT 1
43988: ARRAY
43989: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43990: LD_ADDR_VAR 0 11
43994: PUSH
43995: LD_VAR 0 11
43999: PPUSH
44000: LD_INT 1
44002: PPUSH
44003: CALL_OW 3
44007: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44008: LD_VAR 0 2
44012: PPUSH
44013: LD_VAR 0 3
44017: PPUSH
44018: CALL 44222 0 2
44022: IFTRUE 44033
44024: PUSH
44025: LD_VAR 0 11
44029: PUSH
44030: EMPTY
44031: EQUAL
44032: OR
44033: IFFALSE 43976
// if not control in _control then
44035: LD_VAR 0 4
44039: PUSH
44040: LD_VAR 0 12
44044: IN
44045: NOT
44046: IFFALSE 44072
// control := _control [ rand ( 1 , _control ) ] ;
44048: LD_ADDR_VAR 0 4
44052: PUSH
44053: LD_VAR 0 12
44057: PUSH
44058: LD_INT 1
44060: PPUSH
44061: LD_VAR 0 12
44065: PPUSH
44066: CALL_OW 12
44070: ARRAY
44071: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44072: LD_VAR 0 2
44076: PPUSH
44077: LD_VAR 0 5
44081: PPUSH
44082: CALL 44444 0 2
44086: NOT
44087: IFFALSE 44148
// repeat weapon := _weapon [ 1 ] ;
44089: LD_ADDR_VAR 0 5
44093: PUSH
44094: LD_VAR 0 10
44098: PUSH
44099: LD_INT 1
44101: ARRAY
44102: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44103: LD_ADDR_VAR 0 10
44107: PUSH
44108: LD_VAR 0 10
44112: PPUSH
44113: LD_INT 1
44115: PPUSH
44116: CALL_OW 3
44120: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44121: LD_VAR 0 2
44125: PPUSH
44126: LD_VAR 0 5
44130: PPUSH
44131: CALL 44444 0 2
44135: IFTRUE 44146
44137: PUSH
44138: LD_VAR 0 10
44142: PUSH
44143: EMPTY
44144: EQUAL
44145: OR
44146: IFFALSE 44089
// result := [ ] ;
44148: LD_ADDR_VAR 0 6
44152: PUSH
44153: EMPTY
44154: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44155: LD_VAR 0 1
44159: PPUSH
44160: LD_VAR 0 2
44164: PPUSH
44165: LD_VAR 0 3
44169: PPUSH
44170: LD_VAR 0 4
44174: PPUSH
44175: LD_VAR 0 5
44179: PPUSH
44180: CALL_OW 448
44184: IFFALSE 44217
// result := [ chassis , engine , control , weapon ] ;
44186: LD_ADDR_VAR 0 6
44190: PUSH
44191: LD_VAR 0 2
44195: PUSH
44196: LD_VAR 0 3
44200: PUSH
44201: LD_VAR 0 4
44205: PUSH
44206: LD_VAR 0 5
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: ST_TO_ADDR
// end ;
44217: LD_VAR 0 6
44221: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44222: LD_INT 0
44224: PPUSH
// if not chassis or not engine then
44225: LD_VAR 0 1
44229: NOT
44230: IFTRUE 44239
44232: PUSH
44233: LD_VAR 0 2
44237: NOT
44238: OR
44239: IFFALSE 44243
// exit ;
44241: GO 44439
// case engine of engine_solar :
44243: LD_VAR 0 2
44247: PUSH
44248: LD_INT 2
44250: DOUBLE
44251: EQUAL
44252: IFTRUE 44256
44254: GO 44294
44256: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44257: LD_ADDR_VAR 0 3
44261: PUSH
44262: LD_INT 11
44264: PUSH
44265: LD_INT 12
44267: PUSH
44268: LD_INT 13
44270: PUSH
44271: LD_INT 14
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: LD_INT 3
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: ST_TO_ADDR
44292: GO 44423
44294: LD_INT 1
44296: DOUBLE
44297: EQUAL
44298: IFTRUE 44302
44300: GO 44364
44302: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44303: LD_ADDR_VAR 0 3
44307: PUSH
44308: LD_INT 11
44310: PUSH
44311: LD_INT 12
44313: PUSH
44314: LD_INT 13
44316: PUSH
44317: LD_INT 14
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: LD_INT 2
44325: PUSH
44326: LD_INT 3
44328: PUSH
44329: LD_INT 4
44331: PUSH
44332: LD_INT 5
44334: PUSH
44335: LD_INT 21
44337: PUSH
44338: LD_INT 23
44340: PUSH
44341: LD_INT 22
44343: PUSH
44344: LD_INT 24
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: ST_TO_ADDR
44362: GO 44423
44364: LD_INT 3
44366: DOUBLE
44367: EQUAL
44368: IFTRUE 44372
44370: GO 44422
44372: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44373: LD_ADDR_VAR 0 3
44377: PUSH
44378: LD_INT 13
44380: PUSH
44381: LD_INT 14
44383: PUSH
44384: LD_INT 2
44386: PUSH
44387: LD_INT 3
44389: PUSH
44390: LD_INT 4
44392: PUSH
44393: LD_INT 5
44395: PUSH
44396: LD_INT 21
44398: PUSH
44399: LD_INT 22
44401: PUSH
44402: LD_INT 23
44404: PUSH
44405: LD_INT 24
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: ST_TO_ADDR
44420: GO 44423
44422: POP
// result := ( chassis in result ) ;
44423: LD_ADDR_VAR 0 3
44427: PUSH
44428: LD_VAR 0 1
44432: PUSH
44433: LD_VAR 0 3
44437: IN
44438: ST_TO_ADDR
// end ;
44439: LD_VAR 0 3
44443: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44444: LD_INT 0
44446: PPUSH
// if not chassis or not weapon then
44447: LD_VAR 0 1
44451: NOT
44452: IFTRUE 44461
44454: PUSH
44455: LD_VAR 0 2
44459: NOT
44460: OR
44461: IFFALSE 44465
// exit ;
44463: GO 45525
// case weapon of us_machine_gun :
44465: LD_VAR 0 2
44469: PUSH
44470: LD_INT 2
44472: DOUBLE
44473: EQUAL
44474: IFTRUE 44478
44476: GO 44508
44478: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44479: LD_ADDR_VAR 0 3
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: LD_INT 3
44492: PUSH
44493: LD_INT 4
44495: PUSH
44496: LD_INT 5
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: ST_TO_ADDR
44506: GO 45509
44508: LD_INT 3
44510: DOUBLE
44511: EQUAL
44512: IFTRUE 44516
44514: GO 44546
44516: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44517: LD_ADDR_VAR 0 3
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: LD_INT 2
44527: PUSH
44528: LD_INT 3
44530: PUSH
44531: LD_INT 4
44533: PUSH
44534: LD_INT 5
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: ST_TO_ADDR
44544: GO 45509
44546: LD_INT 11
44548: DOUBLE
44549: EQUAL
44550: IFTRUE 44554
44552: GO 44584
44554: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44555: LD_ADDR_VAR 0 3
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: LD_INT 3
44568: PUSH
44569: LD_INT 4
44571: PUSH
44572: LD_INT 5
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: ST_TO_ADDR
44582: GO 45509
44584: LD_INT 4
44586: DOUBLE
44587: EQUAL
44588: IFTRUE 44592
44590: GO 44618
44592: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44593: LD_ADDR_VAR 0 3
44597: PUSH
44598: LD_INT 2
44600: PUSH
44601: LD_INT 3
44603: PUSH
44604: LD_INT 4
44606: PUSH
44607: LD_INT 5
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: ST_TO_ADDR
44616: GO 45509
44618: LD_INT 5
44620: DOUBLE
44621: EQUAL
44622: IFTRUE 44626
44624: GO 44652
44626: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44627: LD_ADDR_VAR 0 3
44631: PUSH
44632: LD_INT 2
44634: PUSH
44635: LD_INT 3
44637: PUSH
44638: LD_INT 4
44640: PUSH
44641: LD_INT 5
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: ST_TO_ADDR
44650: GO 45509
44652: LD_INT 9
44654: DOUBLE
44655: EQUAL
44656: IFTRUE 44660
44658: GO 44686
44660: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44661: LD_ADDR_VAR 0 3
44665: PUSH
44666: LD_INT 2
44668: PUSH
44669: LD_INT 3
44671: PUSH
44672: LD_INT 4
44674: PUSH
44675: LD_INT 5
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: ST_TO_ADDR
44684: GO 45509
44686: LD_INT 7
44688: DOUBLE
44689: EQUAL
44690: IFTRUE 44694
44692: GO 44720
44694: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44695: LD_ADDR_VAR 0 3
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: LD_INT 3
44705: PUSH
44706: LD_INT 4
44708: PUSH
44709: LD_INT 5
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: ST_TO_ADDR
44718: GO 45509
44720: LD_INT 12
44722: DOUBLE
44723: EQUAL
44724: IFTRUE 44728
44726: GO 44754
44728: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44729: LD_ADDR_VAR 0 3
44733: PUSH
44734: LD_INT 2
44736: PUSH
44737: LD_INT 3
44739: PUSH
44740: LD_INT 4
44742: PUSH
44743: LD_INT 5
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: ST_TO_ADDR
44752: GO 45509
44754: LD_INT 13
44756: DOUBLE
44757: EQUAL
44758: IFTRUE 44762
44760: GO 44788
44762: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44763: LD_ADDR_VAR 0 3
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: LD_INT 3
44773: PUSH
44774: LD_INT 4
44776: PUSH
44777: LD_INT 5
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: ST_TO_ADDR
44786: GO 45509
44788: LD_INT 14
44790: DOUBLE
44791: EQUAL
44792: IFTRUE 44796
44794: GO 44814
44796: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44797: LD_ADDR_VAR 0 3
44801: PUSH
44802: LD_INT 4
44804: PUSH
44805: LD_INT 5
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: ST_TO_ADDR
44812: GO 45509
44814: LD_INT 6
44816: DOUBLE
44817: EQUAL
44818: IFTRUE 44822
44820: GO 44840
44822: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44823: LD_ADDR_VAR 0 3
44827: PUSH
44828: LD_INT 4
44830: PUSH
44831: LD_INT 5
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: ST_TO_ADDR
44838: GO 45509
44840: LD_INT 10
44842: DOUBLE
44843: EQUAL
44844: IFTRUE 44848
44846: GO 44866
44848: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44849: LD_ADDR_VAR 0 3
44853: PUSH
44854: LD_INT 4
44856: PUSH
44857: LD_INT 5
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: ST_TO_ADDR
44864: GO 45509
44866: LD_INT 22
44868: DOUBLE
44869: EQUAL
44870: IFTRUE 44874
44872: GO 44900
44874: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44875: LD_ADDR_VAR 0 3
44879: PUSH
44880: LD_INT 11
44882: PUSH
44883: LD_INT 12
44885: PUSH
44886: LD_INT 13
44888: PUSH
44889: LD_INT 14
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: ST_TO_ADDR
44898: GO 45509
44900: LD_INT 23
44902: DOUBLE
44903: EQUAL
44904: IFTRUE 44908
44906: GO 44934
44908: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44909: LD_ADDR_VAR 0 3
44913: PUSH
44914: LD_INT 11
44916: PUSH
44917: LD_INT 12
44919: PUSH
44920: LD_INT 13
44922: PUSH
44923: LD_INT 14
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: ST_TO_ADDR
44932: GO 45509
44934: LD_INT 24
44936: DOUBLE
44937: EQUAL
44938: IFTRUE 44942
44940: GO 44968
44942: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44943: LD_ADDR_VAR 0 3
44947: PUSH
44948: LD_INT 11
44950: PUSH
44951: LD_INT 12
44953: PUSH
44954: LD_INT 13
44956: PUSH
44957: LD_INT 14
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: ST_TO_ADDR
44966: GO 45509
44968: LD_INT 30
44970: DOUBLE
44971: EQUAL
44972: IFTRUE 44976
44974: GO 45002
44976: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44977: LD_ADDR_VAR 0 3
44981: PUSH
44982: LD_INT 11
44984: PUSH
44985: LD_INT 12
44987: PUSH
44988: LD_INT 13
44990: PUSH
44991: LD_INT 14
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: ST_TO_ADDR
45000: GO 45509
45002: LD_INT 25
45004: DOUBLE
45005: EQUAL
45006: IFTRUE 45010
45008: GO 45028
45010: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45011: LD_ADDR_VAR 0 3
45015: PUSH
45016: LD_INT 13
45018: PUSH
45019: LD_INT 14
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: ST_TO_ADDR
45026: GO 45509
45028: LD_INT 27
45030: DOUBLE
45031: EQUAL
45032: IFTRUE 45036
45034: GO 45054
45036: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45037: LD_ADDR_VAR 0 3
45041: PUSH
45042: LD_INT 13
45044: PUSH
45045: LD_INT 14
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: ST_TO_ADDR
45052: GO 45509
45054: LD_INT 92
45056: DOUBLE
45057: EQUAL
45058: IFTRUE 45062
45060: GO 45088
45062: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45063: LD_ADDR_VAR 0 3
45067: PUSH
45068: LD_INT 11
45070: PUSH
45071: LD_INT 12
45073: PUSH
45074: LD_INT 13
45076: PUSH
45077: LD_INT 14
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: ST_TO_ADDR
45086: GO 45509
45088: LD_INT 28
45090: DOUBLE
45091: EQUAL
45092: IFTRUE 45096
45094: GO 45114
45096: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45097: LD_ADDR_VAR 0 3
45101: PUSH
45102: LD_INT 13
45104: PUSH
45105: LD_INT 14
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: ST_TO_ADDR
45112: GO 45509
45114: LD_INT 29
45116: DOUBLE
45117: EQUAL
45118: IFTRUE 45122
45120: GO 45140
45122: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45123: LD_ADDR_VAR 0 3
45127: PUSH
45128: LD_INT 13
45130: PUSH
45131: LD_INT 14
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: ST_TO_ADDR
45138: GO 45509
45140: LD_INT 31
45142: DOUBLE
45143: EQUAL
45144: IFTRUE 45148
45146: GO 45166
45148: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45149: LD_ADDR_VAR 0 3
45153: PUSH
45154: LD_INT 13
45156: PUSH
45157: LD_INT 14
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: ST_TO_ADDR
45164: GO 45509
45166: LD_INT 26
45168: DOUBLE
45169: EQUAL
45170: IFTRUE 45174
45172: GO 45192
45174: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45175: LD_ADDR_VAR 0 3
45179: PUSH
45180: LD_INT 13
45182: PUSH
45183: LD_INT 14
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: ST_TO_ADDR
45190: GO 45509
45192: LD_INT 42
45194: DOUBLE
45195: EQUAL
45196: IFTRUE 45200
45198: GO 45226
45200: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45201: LD_ADDR_VAR 0 3
45205: PUSH
45206: LD_INT 21
45208: PUSH
45209: LD_INT 22
45211: PUSH
45212: LD_INT 23
45214: PUSH
45215: LD_INT 24
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: ST_TO_ADDR
45224: GO 45509
45226: LD_INT 43
45228: DOUBLE
45229: EQUAL
45230: IFTRUE 45234
45232: GO 45260
45234: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45235: LD_ADDR_VAR 0 3
45239: PUSH
45240: LD_INT 21
45242: PUSH
45243: LD_INT 22
45245: PUSH
45246: LD_INT 23
45248: PUSH
45249: LD_INT 24
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: ST_TO_ADDR
45258: GO 45509
45260: LD_INT 44
45262: DOUBLE
45263: EQUAL
45264: IFTRUE 45268
45266: GO 45294
45268: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45269: LD_ADDR_VAR 0 3
45273: PUSH
45274: LD_INT 21
45276: PUSH
45277: LD_INT 22
45279: PUSH
45280: LD_INT 23
45282: PUSH
45283: LD_INT 24
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: ST_TO_ADDR
45292: GO 45509
45294: LD_INT 45
45296: DOUBLE
45297: EQUAL
45298: IFTRUE 45302
45300: GO 45328
45302: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45303: LD_ADDR_VAR 0 3
45307: PUSH
45308: LD_INT 21
45310: PUSH
45311: LD_INT 22
45313: PUSH
45314: LD_INT 23
45316: PUSH
45317: LD_INT 24
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: ST_TO_ADDR
45326: GO 45509
45328: LD_INT 49
45330: DOUBLE
45331: EQUAL
45332: IFTRUE 45336
45334: GO 45362
45336: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45337: LD_ADDR_VAR 0 3
45341: PUSH
45342: LD_INT 21
45344: PUSH
45345: LD_INT 22
45347: PUSH
45348: LD_INT 23
45350: PUSH
45351: LD_INT 24
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: ST_TO_ADDR
45360: GO 45509
45362: LD_INT 51
45364: DOUBLE
45365: EQUAL
45366: IFTRUE 45370
45368: GO 45396
45370: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45371: LD_ADDR_VAR 0 3
45375: PUSH
45376: LD_INT 21
45378: PUSH
45379: LD_INT 22
45381: PUSH
45382: LD_INT 23
45384: PUSH
45385: LD_INT 24
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: ST_TO_ADDR
45394: GO 45509
45396: LD_INT 52
45398: DOUBLE
45399: EQUAL
45400: IFTRUE 45404
45402: GO 45430
45404: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45405: LD_ADDR_VAR 0 3
45409: PUSH
45410: LD_INT 21
45412: PUSH
45413: LD_INT 22
45415: PUSH
45416: LD_INT 23
45418: PUSH
45419: LD_INT 24
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: ST_TO_ADDR
45428: GO 45509
45430: LD_INT 53
45432: DOUBLE
45433: EQUAL
45434: IFTRUE 45438
45436: GO 45456
45438: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45439: LD_ADDR_VAR 0 3
45443: PUSH
45444: LD_INT 23
45446: PUSH
45447: LD_INT 24
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: ST_TO_ADDR
45454: GO 45509
45456: LD_INT 46
45458: DOUBLE
45459: EQUAL
45460: IFTRUE 45464
45462: GO 45482
45464: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45465: LD_ADDR_VAR 0 3
45469: PUSH
45470: LD_INT 23
45472: PUSH
45473: LD_INT 24
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: ST_TO_ADDR
45480: GO 45509
45482: LD_INT 47
45484: DOUBLE
45485: EQUAL
45486: IFTRUE 45490
45488: GO 45508
45490: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45491: LD_ADDR_VAR 0 3
45495: PUSH
45496: LD_INT 23
45498: PUSH
45499: LD_INT 24
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: ST_TO_ADDR
45506: GO 45509
45508: POP
// result := ( chassis in result ) ;
45509: LD_ADDR_VAR 0 3
45513: PUSH
45514: LD_VAR 0 1
45518: PUSH
45519: LD_VAR 0 3
45523: IN
45524: ST_TO_ADDR
// end ;
45525: LD_VAR 0 3
45529: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45530: LD_INT 0
45532: PPUSH
45533: PPUSH
45534: PPUSH
45535: PPUSH
45536: PPUSH
45537: PPUSH
45538: PPUSH
// result := array ;
45539: LD_ADDR_VAR 0 5
45543: PUSH
45544: LD_VAR 0 1
45548: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45549: LD_VAR 0 1
45553: NOT
45554: IFTRUE 45563
45556: PUSH
45557: LD_VAR 0 2
45561: NOT
45562: OR
45563: IFTRUE 45572
45565: PUSH
45566: LD_VAR 0 3
45570: NOT
45571: OR
45572: IFTRUE 45586
45574: PUSH
45575: LD_VAR 0 2
45579: PUSH
45580: LD_VAR 0 1
45584: GREATER
45585: OR
45586: IFTRUE 45600
45588: PUSH
45589: LD_VAR 0 3
45593: PUSH
45594: LD_VAR 0 1
45598: GREATER
45599: OR
45600: IFFALSE 45604
// exit ;
45602: GO 45900
// if direction then
45604: LD_VAR 0 4
45608: IFFALSE 45672
// begin d := 1 ;
45610: LD_ADDR_VAR 0 9
45614: PUSH
45615: LD_INT 1
45617: ST_TO_ADDR
// if i_from > i_to then
45618: LD_VAR 0 2
45622: PUSH
45623: LD_VAR 0 3
45627: GREATER
45628: IFFALSE 45654
// length := ( array - i_from ) + i_to else
45630: LD_ADDR_VAR 0 11
45634: PUSH
45635: LD_VAR 0 1
45639: PUSH
45640: LD_VAR 0 2
45644: MINUS
45645: PUSH
45646: LD_VAR 0 3
45650: PLUS
45651: ST_TO_ADDR
45652: GO 45670
// length := i_to - i_from ;
45654: LD_ADDR_VAR 0 11
45658: PUSH
45659: LD_VAR 0 3
45663: PUSH
45664: LD_VAR 0 2
45668: MINUS
45669: ST_TO_ADDR
// end else
45670: GO 45733
// begin d := - 1 ;
45672: LD_ADDR_VAR 0 9
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: ST_TO_ADDR
// if i_from > i_to then
45681: LD_VAR 0 2
45685: PUSH
45686: LD_VAR 0 3
45690: GREATER
45691: IFFALSE 45711
// length := i_from - i_to else
45693: LD_ADDR_VAR 0 11
45697: PUSH
45698: LD_VAR 0 2
45702: PUSH
45703: LD_VAR 0 3
45707: MINUS
45708: ST_TO_ADDR
45709: GO 45733
// length := ( array - i_to ) + i_from ;
45711: LD_ADDR_VAR 0 11
45715: PUSH
45716: LD_VAR 0 1
45720: PUSH
45721: LD_VAR 0 3
45725: MINUS
45726: PUSH
45727: LD_VAR 0 2
45731: PLUS
45732: ST_TO_ADDR
// end ; if not length then
45733: LD_VAR 0 11
45737: NOT
45738: IFFALSE 45742
// exit ;
45740: GO 45900
// tmp := array ;
45742: LD_ADDR_VAR 0 10
45746: PUSH
45747: LD_VAR 0 1
45751: ST_TO_ADDR
// for i = 1 to length do
45752: LD_ADDR_VAR 0 6
45756: PUSH
45757: DOUBLE
45758: LD_INT 1
45760: DEC
45761: ST_TO_ADDR
45762: LD_VAR 0 11
45766: PUSH
45767: FOR_TO
45768: IFFALSE 45888
// begin for j = 1 to array do
45770: LD_ADDR_VAR 0 7
45774: PUSH
45775: DOUBLE
45776: LD_INT 1
45778: DEC
45779: ST_TO_ADDR
45780: LD_VAR 0 1
45784: PUSH
45785: FOR_TO
45786: IFFALSE 45874
// begin k := j + d ;
45788: LD_ADDR_VAR 0 8
45792: PUSH
45793: LD_VAR 0 7
45797: PUSH
45798: LD_VAR 0 9
45802: PLUS
45803: ST_TO_ADDR
// if k > array then
45804: LD_VAR 0 8
45808: PUSH
45809: LD_VAR 0 1
45813: GREATER
45814: IFFALSE 45824
// k := 1 ;
45816: LD_ADDR_VAR 0 8
45820: PUSH
45821: LD_INT 1
45823: ST_TO_ADDR
// if not k then
45824: LD_VAR 0 8
45828: NOT
45829: IFFALSE 45841
// k := array ;
45831: LD_ADDR_VAR 0 8
45835: PUSH
45836: LD_VAR 0 1
45840: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45841: LD_ADDR_VAR 0 10
45845: PUSH
45846: LD_VAR 0 10
45850: PPUSH
45851: LD_VAR 0 8
45855: PPUSH
45856: LD_VAR 0 1
45860: PUSH
45861: LD_VAR 0 7
45865: ARRAY
45866: PPUSH
45867: CALL_OW 1
45871: ST_TO_ADDR
// end ;
45872: GO 45785
45874: POP
45875: POP
// array := tmp ;
45876: LD_ADDR_VAR 0 1
45880: PUSH
45881: LD_VAR 0 10
45885: ST_TO_ADDR
// end ;
45886: GO 45767
45888: POP
45889: POP
// result := array ;
45890: LD_ADDR_VAR 0 5
45894: PUSH
45895: LD_VAR 0 1
45899: ST_TO_ADDR
// end ;
45900: LD_VAR 0 5
45904: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45905: LD_INT 0
45907: PPUSH
45908: PPUSH
// result := 0 ;
45909: LD_ADDR_VAR 0 3
45913: PUSH
45914: LD_INT 0
45916: ST_TO_ADDR
// if not array or not value in array then
45917: LD_VAR 0 1
45921: NOT
45922: IFTRUE 45937
45924: PUSH
45925: LD_VAR 0 2
45929: PUSH
45930: LD_VAR 0 1
45934: IN
45935: NOT
45936: OR
45937: IFFALSE 45941
// exit ;
45939: GO 45995
// for i = 1 to array do
45941: LD_ADDR_VAR 0 4
45945: PUSH
45946: DOUBLE
45947: LD_INT 1
45949: DEC
45950: ST_TO_ADDR
45951: LD_VAR 0 1
45955: PUSH
45956: FOR_TO
45957: IFFALSE 45993
// if value = array [ i ] then
45959: LD_VAR 0 2
45963: PUSH
45964: LD_VAR 0 1
45968: PUSH
45969: LD_VAR 0 4
45973: ARRAY
45974: EQUAL
45975: IFFALSE 45991
// begin result := i ;
45977: LD_ADDR_VAR 0 3
45981: PUSH
45982: LD_VAR 0 4
45986: ST_TO_ADDR
// exit ;
45987: POP
45988: POP
45989: GO 45995
// end ;
45991: GO 45956
45993: POP
45994: POP
// end ;
45995: LD_VAR 0 3
45999: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46000: LD_INT 0
46002: PPUSH
// vc_chassis := chassis ;
46003: LD_ADDR_OWVAR 37
46007: PUSH
46008: LD_VAR 0 1
46012: ST_TO_ADDR
// vc_engine := engine ;
46013: LD_ADDR_OWVAR 39
46017: PUSH
46018: LD_VAR 0 2
46022: ST_TO_ADDR
// vc_control := control ;
46023: LD_ADDR_OWVAR 38
46027: PUSH
46028: LD_VAR 0 3
46032: ST_TO_ADDR
// vc_weapon := weapon ;
46033: LD_ADDR_OWVAR 40
46037: PUSH
46038: LD_VAR 0 4
46042: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46043: LD_ADDR_OWVAR 41
46047: PUSH
46048: LD_VAR 0 5
46052: ST_TO_ADDR
// end ;
46053: LD_VAR 0 6
46057: RET
// export function WantPlant ( unit ) ; var task ; begin
46058: LD_INT 0
46060: PPUSH
46061: PPUSH
// result := false ;
46062: LD_ADDR_VAR 0 2
46066: PUSH
46067: LD_INT 0
46069: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46070: LD_ADDR_VAR 0 3
46074: PUSH
46075: LD_VAR 0 1
46079: PPUSH
46080: CALL_OW 437
46084: ST_TO_ADDR
// if task then
46085: LD_VAR 0 3
46089: IFFALSE 46117
// if task [ 1 ] [ 1 ] = p then
46091: LD_VAR 0 3
46095: PUSH
46096: LD_INT 1
46098: ARRAY
46099: PUSH
46100: LD_INT 1
46102: ARRAY
46103: PUSH
46104: LD_STRING p
46106: EQUAL
46107: IFFALSE 46117
// result := true ;
46109: LD_ADDR_VAR 0 2
46113: PUSH
46114: LD_INT 1
46116: ST_TO_ADDR
// end ;
46117: LD_VAR 0 2
46121: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46122: LD_INT 0
46124: PPUSH
46125: PPUSH
46126: PPUSH
46127: PPUSH
// if pos < 1 then
46128: LD_VAR 0 2
46132: PUSH
46133: LD_INT 1
46135: LESS
46136: IFFALSE 46140
// exit ;
46138: GO 46443
// if pos = 1 then
46140: LD_VAR 0 2
46144: PUSH
46145: LD_INT 1
46147: EQUAL
46148: IFFALSE 46181
// result := Replace ( arr , pos [ 1 ] , value ) else
46150: LD_ADDR_VAR 0 4
46154: PUSH
46155: LD_VAR 0 1
46159: PPUSH
46160: LD_VAR 0 2
46164: PUSH
46165: LD_INT 1
46167: ARRAY
46168: PPUSH
46169: LD_VAR 0 3
46173: PPUSH
46174: CALL_OW 1
46178: ST_TO_ADDR
46179: GO 46443
// begin tmp := arr ;
46181: LD_ADDR_VAR 0 6
46185: PUSH
46186: LD_VAR 0 1
46190: ST_TO_ADDR
// s_arr := [ tmp ] ;
46191: LD_ADDR_VAR 0 7
46195: PUSH
46196: LD_VAR 0 6
46200: PUSH
46201: EMPTY
46202: LIST
46203: ST_TO_ADDR
// for i = 1 to pos - 1 do
46204: LD_ADDR_VAR 0 5
46208: PUSH
46209: DOUBLE
46210: LD_INT 1
46212: DEC
46213: ST_TO_ADDR
46214: LD_VAR 0 2
46218: PUSH
46219: LD_INT 1
46221: MINUS
46222: PUSH
46223: FOR_TO
46224: IFFALSE 46269
// begin tmp := tmp [ pos [ i ] ] ;
46226: LD_ADDR_VAR 0 6
46230: PUSH
46231: LD_VAR 0 6
46235: PUSH
46236: LD_VAR 0 2
46240: PUSH
46241: LD_VAR 0 5
46245: ARRAY
46246: ARRAY
46247: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46248: LD_ADDR_VAR 0 7
46252: PUSH
46253: LD_VAR 0 7
46257: PUSH
46258: LD_VAR 0 6
46262: PUSH
46263: EMPTY
46264: LIST
46265: ADD
46266: ST_TO_ADDR
// end ;
46267: GO 46223
46269: POP
46270: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46271: LD_ADDR_VAR 0 6
46275: PUSH
46276: LD_VAR 0 6
46280: PPUSH
46281: LD_VAR 0 2
46285: PUSH
46286: LD_VAR 0 2
46290: ARRAY
46291: PPUSH
46292: LD_VAR 0 3
46296: PPUSH
46297: CALL_OW 1
46301: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46302: LD_ADDR_VAR 0 7
46306: PUSH
46307: LD_VAR 0 7
46311: PPUSH
46312: LD_VAR 0 7
46316: PPUSH
46317: LD_VAR 0 6
46321: PPUSH
46322: CALL_OW 1
46326: ST_TO_ADDR
// for i = s_arr downto 2 do
46327: LD_ADDR_VAR 0 5
46331: PUSH
46332: DOUBLE
46333: LD_VAR 0 7
46337: INC
46338: ST_TO_ADDR
46339: LD_INT 2
46341: PUSH
46342: FOR_DOWNTO
46343: IFFALSE 46427
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46345: LD_ADDR_VAR 0 6
46349: PUSH
46350: LD_VAR 0 7
46354: PUSH
46355: LD_VAR 0 5
46359: PUSH
46360: LD_INT 1
46362: MINUS
46363: ARRAY
46364: PPUSH
46365: LD_VAR 0 2
46369: PUSH
46370: LD_VAR 0 5
46374: PUSH
46375: LD_INT 1
46377: MINUS
46378: ARRAY
46379: PPUSH
46380: LD_VAR 0 7
46384: PUSH
46385: LD_VAR 0 5
46389: ARRAY
46390: PPUSH
46391: CALL_OW 1
46395: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46396: LD_ADDR_VAR 0 7
46400: PUSH
46401: LD_VAR 0 7
46405: PPUSH
46406: LD_VAR 0 5
46410: PUSH
46411: LD_INT 1
46413: MINUS
46414: PPUSH
46415: LD_VAR 0 6
46419: PPUSH
46420: CALL_OW 1
46424: ST_TO_ADDR
// end ;
46425: GO 46342
46427: POP
46428: POP
// result := s_arr [ 1 ] ;
46429: LD_ADDR_VAR 0 4
46433: PUSH
46434: LD_VAR 0 7
46438: PUSH
46439: LD_INT 1
46441: ARRAY
46442: ST_TO_ADDR
// end ; end ;
46443: LD_VAR 0 4
46447: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46448: LD_INT 0
46450: PPUSH
46451: PPUSH
// if not list then
46452: LD_VAR 0 1
46456: NOT
46457: IFFALSE 46461
// exit ;
46459: GO 46552
// i := list [ pos1 ] ;
46461: LD_ADDR_VAR 0 5
46465: PUSH
46466: LD_VAR 0 1
46470: PUSH
46471: LD_VAR 0 2
46475: ARRAY
46476: ST_TO_ADDR
// if not i then
46477: LD_VAR 0 5
46481: NOT
46482: IFFALSE 46486
// exit ;
46484: GO 46552
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46486: LD_ADDR_VAR 0 1
46490: PUSH
46491: LD_VAR 0 1
46495: PPUSH
46496: LD_VAR 0 2
46500: PPUSH
46501: LD_VAR 0 1
46505: PUSH
46506: LD_VAR 0 3
46510: ARRAY
46511: PPUSH
46512: CALL_OW 1
46516: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46517: LD_ADDR_VAR 0 1
46521: PUSH
46522: LD_VAR 0 1
46526: PPUSH
46527: LD_VAR 0 3
46531: PPUSH
46532: LD_VAR 0 5
46536: PPUSH
46537: CALL_OW 1
46541: ST_TO_ADDR
// result := list ;
46542: LD_ADDR_VAR 0 4
46546: PUSH
46547: LD_VAR 0 1
46551: ST_TO_ADDR
// end ;
46552: LD_VAR 0 4
46556: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46557: LD_INT 0
46559: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46560: LD_ADDR_VAR 0 5
46564: PUSH
46565: LD_VAR 0 1
46569: PPUSH
46570: CALL_OW 250
46574: PPUSH
46575: LD_VAR 0 1
46579: PPUSH
46580: CALL_OW 251
46584: PPUSH
46585: LD_VAR 0 2
46589: PPUSH
46590: LD_VAR 0 3
46594: PPUSH
46595: LD_VAR 0 4
46599: PPUSH
46600: CALL 46982 0 5
46604: ST_TO_ADDR
// end ;
46605: LD_VAR 0 5
46609: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46610: LD_INT 0
46612: PPUSH
46613: PPUSH
46614: PPUSH
46615: PPUSH
// if not list or not unit then
46616: LD_VAR 0 2
46620: NOT
46621: IFTRUE 46630
46623: PUSH
46624: LD_VAR 0 1
46628: NOT
46629: OR
46630: IFFALSE 46634
// exit ;
46632: GO 46977
// result := [ ] ;
46634: LD_ADDR_VAR 0 5
46638: PUSH
46639: EMPTY
46640: ST_TO_ADDR
// for i in list do
46641: LD_ADDR_VAR 0 6
46645: PUSH
46646: LD_VAR 0 2
46650: PUSH
46651: FOR_IN
46652: IFFALSE 46870
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46654: LD_ADDR_VAR 0 8
46658: PUSH
46659: LD_VAR 0 1
46663: PPUSH
46664: LD_VAR 0 6
46668: PUSH
46669: LD_INT 1
46671: ARRAY
46672: PPUSH
46673: LD_VAR 0 6
46677: PUSH
46678: LD_INT 2
46680: ARRAY
46681: PPUSH
46682: CALL_OW 297
46686: ST_TO_ADDR
// if not Count ( result ) then
46687: LD_VAR 0 5
46691: PPUSH
46692: CALL 43238 0 1
46696: NOT
46697: IFFALSE 46730
// begin result := Join ( result , [ i , tmp ] ) ;
46699: LD_ADDR_VAR 0 5
46703: PUSH
46704: LD_VAR 0 5
46708: PPUSH
46709: LD_VAR 0 6
46713: PUSH
46714: LD_VAR 0 8
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PPUSH
46723: CALL 79170 0 2
46727: ST_TO_ADDR
// continue ;
46728: GO 46651
// end ; if result [ result ] [ 2 ] <= tmp then
46730: LD_VAR 0 5
46734: PUSH
46735: LD_VAR 0 5
46739: ARRAY
46740: PUSH
46741: LD_INT 2
46743: ARRAY
46744: PUSH
46745: LD_VAR 0 8
46749: LESSEQUAL
46750: IFFALSE 46783
// result := Join ( result , [ i , tmp ] ) else
46752: LD_ADDR_VAR 0 5
46756: PUSH
46757: LD_VAR 0 5
46761: PPUSH
46762: LD_VAR 0 6
46766: PUSH
46767: LD_VAR 0 8
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PPUSH
46776: CALL 79170 0 2
46780: ST_TO_ADDR
46781: GO 46868
// begin for j := 1 to Count ( result ) do
46783: LD_ADDR_VAR 0 7
46787: PUSH
46788: DOUBLE
46789: LD_INT 1
46791: DEC
46792: ST_TO_ADDR
46793: LD_VAR 0 5
46797: PPUSH
46798: CALL 43238 0 1
46802: PUSH
46803: FOR_TO
46804: IFFALSE 46866
// begin if tmp < result [ j ] [ 2 ] then
46806: LD_VAR 0 8
46810: PUSH
46811: LD_VAR 0 5
46815: PUSH
46816: LD_VAR 0 7
46820: ARRAY
46821: PUSH
46822: LD_INT 2
46824: ARRAY
46825: LESS
46826: IFFALSE 46864
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46828: LD_ADDR_VAR 0 5
46832: PUSH
46833: LD_VAR 0 5
46837: PPUSH
46838: LD_VAR 0 7
46842: PPUSH
46843: LD_VAR 0 6
46847: PUSH
46848: LD_VAR 0 8
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PPUSH
46857: CALL_OW 2
46861: ST_TO_ADDR
// break ;
46862: GO 46866
// end ; end ;
46864: GO 46803
46866: POP
46867: POP
// end ; end ;
46868: GO 46651
46870: POP
46871: POP
// if result and not asc then
46872: LD_VAR 0 5
46876: IFFALSE 46885
46878: PUSH
46879: LD_VAR 0 3
46883: NOT
46884: AND
46885: IFFALSE 46902
// result := ReverseArray ( result ) ;
46887: LD_ADDR_VAR 0 5
46891: PUSH
46892: LD_VAR 0 5
46896: PPUSH
46897: CALL 74260 0 1
46901: ST_TO_ADDR
// tmp := [ ] ;
46902: LD_ADDR_VAR 0 8
46906: PUSH
46907: EMPTY
46908: ST_TO_ADDR
// if mode then
46909: LD_VAR 0 4
46913: IFFALSE 46977
// begin for i := 1 to result do
46915: LD_ADDR_VAR 0 6
46919: PUSH
46920: DOUBLE
46921: LD_INT 1
46923: DEC
46924: ST_TO_ADDR
46925: LD_VAR 0 5
46929: PUSH
46930: FOR_TO
46931: IFFALSE 46965
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46933: LD_ADDR_VAR 0 8
46937: PUSH
46938: LD_VAR 0 8
46942: PPUSH
46943: LD_VAR 0 5
46947: PUSH
46948: LD_VAR 0 6
46952: ARRAY
46953: PUSH
46954: LD_INT 1
46956: ARRAY
46957: PPUSH
46958: CALL 79170 0 2
46962: ST_TO_ADDR
46963: GO 46930
46965: POP
46966: POP
// result := tmp ;
46967: LD_ADDR_VAR 0 5
46971: PUSH
46972: LD_VAR 0 8
46976: ST_TO_ADDR
// end ; end ;
46977: LD_VAR 0 5
46981: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46982: LD_INT 0
46984: PPUSH
46985: PPUSH
46986: PPUSH
46987: PPUSH
// if not list then
46988: LD_VAR 0 3
46992: NOT
46993: IFFALSE 46997
// exit ;
46995: GO 47387
// result := [ ] ;
46997: LD_ADDR_VAR 0 6
47001: PUSH
47002: EMPTY
47003: ST_TO_ADDR
// for i in list do
47004: LD_ADDR_VAR 0 7
47008: PUSH
47009: LD_VAR 0 3
47013: PUSH
47014: FOR_IN
47015: IFFALSE 47217
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47017: LD_ADDR_VAR 0 9
47021: PUSH
47022: LD_VAR 0 7
47026: PPUSH
47027: LD_VAR 0 1
47031: PPUSH
47032: LD_VAR 0 2
47036: PPUSH
47037: CALL_OW 297
47041: ST_TO_ADDR
// if not result then
47042: LD_VAR 0 6
47046: NOT
47047: IFFALSE 47073
// result := [ [ i , tmp ] ] else
47049: LD_ADDR_VAR 0 6
47053: PUSH
47054: LD_VAR 0 7
47058: PUSH
47059: LD_VAR 0 9
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: EMPTY
47069: LIST
47070: ST_TO_ADDR
47071: GO 47215
// begin if result [ result ] [ 2 ] <= tmp then
47073: LD_VAR 0 6
47077: PUSH
47078: LD_VAR 0 6
47082: ARRAY
47083: PUSH
47084: LD_INT 2
47086: ARRAY
47087: PUSH
47088: LD_VAR 0 9
47092: LESSEQUAL
47093: IFFALSE 47135
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47095: LD_ADDR_VAR 0 6
47099: PUSH
47100: LD_VAR 0 6
47104: PPUSH
47105: LD_VAR 0 6
47109: PUSH
47110: LD_INT 1
47112: PLUS
47113: PPUSH
47114: LD_VAR 0 7
47118: PUSH
47119: LD_VAR 0 9
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PPUSH
47128: CALL_OW 2
47132: ST_TO_ADDR
47133: GO 47215
// for j := 1 to result do
47135: LD_ADDR_VAR 0 8
47139: PUSH
47140: DOUBLE
47141: LD_INT 1
47143: DEC
47144: ST_TO_ADDR
47145: LD_VAR 0 6
47149: PUSH
47150: FOR_TO
47151: IFFALSE 47213
// begin if tmp < result [ j ] [ 2 ] then
47153: LD_VAR 0 9
47157: PUSH
47158: LD_VAR 0 6
47162: PUSH
47163: LD_VAR 0 8
47167: ARRAY
47168: PUSH
47169: LD_INT 2
47171: ARRAY
47172: LESS
47173: IFFALSE 47211
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47175: LD_ADDR_VAR 0 6
47179: PUSH
47180: LD_VAR 0 6
47184: PPUSH
47185: LD_VAR 0 8
47189: PPUSH
47190: LD_VAR 0 7
47194: PUSH
47195: LD_VAR 0 9
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PPUSH
47204: CALL_OW 2
47208: ST_TO_ADDR
// break ;
47209: GO 47213
// end ; end ;
47211: GO 47150
47213: POP
47214: POP
// end ; end ;
47215: GO 47014
47217: POP
47218: POP
// if result and not asc then
47219: LD_VAR 0 6
47223: IFFALSE 47232
47225: PUSH
47226: LD_VAR 0 4
47230: NOT
47231: AND
47232: IFFALSE 47307
// begin tmp := result ;
47234: LD_ADDR_VAR 0 9
47238: PUSH
47239: LD_VAR 0 6
47243: ST_TO_ADDR
// for i = tmp downto 1 do
47244: LD_ADDR_VAR 0 7
47248: PUSH
47249: DOUBLE
47250: LD_VAR 0 9
47254: INC
47255: ST_TO_ADDR
47256: LD_INT 1
47258: PUSH
47259: FOR_DOWNTO
47260: IFFALSE 47305
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47262: LD_ADDR_VAR 0 6
47266: PUSH
47267: LD_VAR 0 6
47271: PPUSH
47272: LD_VAR 0 9
47276: PUSH
47277: LD_VAR 0 7
47281: MINUS
47282: PUSH
47283: LD_INT 1
47285: PLUS
47286: PPUSH
47287: LD_VAR 0 9
47291: PUSH
47292: LD_VAR 0 7
47296: ARRAY
47297: PPUSH
47298: CALL_OW 1
47302: ST_TO_ADDR
47303: GO 47259
47305: POP
47306: POP
// end ; tmp := [ ] ;
47307: LD_ADDR_VAR 0 9
47311: PUSH
47312: EMPTY
47313: ST_TO_ADDR
// if mode then
47314: LD_VAR 0 5
47318: IFFALSE 47387
// begin for i = 1 to result do
47320: LD_ADDR_VAR 0 7
47324: PUSH
47325: DOUBLE
47326: LD_INT 1
47328: DEC
47329: ST_TO_ADDR
47330: LD_VAR 0 6
47334: PUSH
47335: FOR_TO
47336: IFFALSE 47375
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47338: LD_ADDR_VAR 0 9
47342: PUSH
47343: LD_VAR 0 9
47347: PPUSH
47348: LD_VAR 0 7
47352: PPUSH
47353: LD_VAR 0 6
47357: PUSH
47358: LD_VAR 0 7
47362: ARRAY
47363: PUSH
47364: LD_INT 1
47366: ARRAY
47367: PPUSH
47368: CALL_OW 1
47372: ST_TO_ADDR
47373: GO 47335
47375: POP
47376: POP
// result := tmp ;
47377: LD_ADDR_VAR 0 6
47381: PUSH
47382: LD_VAR 0 9
47386: ST_TO_ADDR
// end ; end ;
47387: LD_VAR 0 6
47391: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47392: LD_INT 0
47394: PPUSH
47395: PPUSH
47396: PPUSH
47397: PPUSH
47398: PPUSH
47399: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47400: LD_ADDR_VAR 0 5
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: EMPTY
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: ST_TO_ADDR
// if not x or not y then
47422: LD_VAR 0 2
47426: NOT
47427: IFTRUE 47436
47429: PUSH
47430: LD_VAR 0 3
47434: NOT
47435: OR
47436: IFFALSE 47440
// exit ;
47438: GO 49096
// if not range then
47440: LD_VAR 0 4
47444: NOT
47445: IFFALSE 47455
// range := 10 ;
47447: LD_ADDR_VAR 0 4
47451: PUSH
47452: LD_INT 10
47454: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47455: LD_ADDR_VAR 0 8
47459: PUSH
47460: LD_INT 81
47462: PUSH
47463: LD_VAR 0 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 92
47474: PUSH
47475: LD_VAR 0 2
47479: PUSH
47480: LD_VAR 0 3
47484: PUSH
47485: LD_VAR 0 4
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 3
47498: PUSH
47499: LD_INT 21
47501: PUSH
47502: LD_INT 3
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: PPUSH
47518: CALL_OW 69
47522: ST_TO_ADDR
// if not tmp then
47523: LD_VAR 0 8
47527: NOT
47528: IFFALSE 47532
// exit ;
47530: GO 49096
// for i in tmp do
47532: LD_ADDR_VAR 0 6
47536: PUSH
47537: LD_VAR 0 8
47541: PUSH
47542: FOR_IN
47543: IFFALSE 49071
// begin points := [ 0 , 0 , 0 ] ;
47545: LD_ADDR_VAR 0 9
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: LIST
47563: ST_TO_ADDR
// bpoints := 1 ;
47564: LD_ADDR_VAR 0 10
47568: PUSH
47569: LD_INT 1
47571: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47572: LD_VAR 0 6
47576: PPUSH
47577: CALL_OW 247
47581: PUSH
47582: LD_INT 1
47584: DOUBLE
47585: EQUAL
47586: IFTRUE 47590
47588: GO 48172
47590: POP
// begin if GetClass ( i ) = 1 then
47591: LD_VAR 0 6
47595: PPUSH
47596: CALL_OW 257
47600: PUSH
47601: LD_INT 1
47603: EQUAL
47604: IFFALSE 47625
// points := [ 10 , 5 , 3 ] ;
47606: LD_ADDR_VAR 0 9
47610: PUSH
47611: LD_INT 10
47613: PUSH
47614: LD_INT 5
47616: PUSH
47617: LD_INT 3
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: LIST
47624: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47625: LD_VAR 0 6
47629: PPUSH
47630: CALL_OW 257
47634: PUSH
47635: LD_INT 2
47637: PUSH
47638: LD_INT 3
47640: PUSH
47641: LD_INT 4
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: LIST
47648: IN
47649: IFFALSE 47670
// points := [ 3 , 2 , 1 ] ;
47651: LD_ADDR_VAR 0 9
47655: PUSH
47656: LD_INT 3
47658: PUSH
47659: LD_INT 2
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: LIST
47669: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47670: LD_VAR 0 6
47674: PPUSH
47675: CALL_OW 257
47679: PUSH
47680: LD_INT 5
47682: EQUAL
47683: IFFALSE 47704
// points := [ 130 , 5 , 2 ] ;
47685: LD_ADDR_VAR 0 9
47689: PUSH
47690: LD_INT 130
47692: PUSH
47693: LD_INT 5
47695: PUSH
47696: LD_INT 2
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: LIST
47703: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47704: LD_VAR 0 6
47708: PPUSH
47709: CALL_OW 257
47713: PUSH
47714: LD_INT 8
47716: EQUAL
47717: IFFALSE 47738
// points := [ 35 , 35 , 30 ] ;
47719: LD_ADDR_VAR 0 9
47723: PUSH
47724: LD_INT 35
47726: PUSH
47727: LD_INT 35
47729: PUSH
47730: LD_INT 30
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: LIST
47737: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47738: LD_VAR 0 6
47742: PPUSH
47743: CALL_OW 257
47747: PUSH
47748: LD_INT 9
47750: EQUAL
47751: IFFALSE 47772
// points := [ 20 , 55 , 40 ] ;
47753: LD_ADDR_VAR 0 9
47757: PUSH
47758: LD_INT 20
47760: PUSH
47761: LD_INT 55
47763: PUSH
47764: LD_INT 40
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: LIST
47771: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47772: LD_VAR 0 6
47776: PPUSH
47777: CALL_OW 257
47781: PUSH
47782: LD_INT 12
47784: PUSH
47785: LD_INT 16
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: IN
47792: IFFALSE 47813
// points := [ 5 , 3 , 2 ] ;
47794: LD_ADDR_VAR 0 9
47798: PUSH
47799: LD_INT 5
47801: PUSH
47802: LD_INT 3
47804: PUSH
47805: LD_INT 2
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: LIST
47812: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47813: LD_VAR 0 6
47817: PPUSH
47818: CALL_OW 257
47822: PUSH
47823: LD_INT 17
47825: EQUAL
47826: IFFALSE 47847
// points := [ 100 , 50 , 75 ] ;
47828: LD_ADDR_VAR 0 9
47832: PUSH
47833: LD_INT 100
47835: PUSH
47836: LD_INT 50
47838: PUSH
47839: LD_INT 75
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: LIST
47846: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47847: LD_VAR 0 6
47851: PPUSH
47852: CALL_OW 257
47856: PUSH
47857: LD_INT 15
47859: EQUAL
47860: IFFALSE 47881
// points := [ 10 , 5 , 3 ] ;
47862: LD_ADDR_VAR 0 9
47866: PUSH
47867: LD_INT 10
47869: PUSH
47870: LD_INT 5
47872: PUSH
47873: LD_INT 3
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: LIST
47880: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47881: LD_VAR 0 6
47885: PPUSH
47886: CALL_OW 257
47890: PUSH
47891: LD_INT 14
47893: EQUAL
47894: IFFALSE 47915
// points := [ 10 , 0 , 0 ] ;
47896: LD_ADDR_VAR 0 9
47900: PUSH
47901: LD_INT 10
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: LIST
47914: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47915: LD_VAR 0 6
47919: PPUSH
47920: CALL_OW 257
47924: PUSH
47925: LD_INT 11
47927: EQUAL
47928: IFFALSE 47949
// points := [ 30 , 10 , 5 ] ;
47930: LD_ADDR_VAR 0 9
47934: PUSH
47935: LD_INT 30
47937: PUSH
47938: LD_INT 10
47940: PUSH
47941: LD_INT 5
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: LIST
47948: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47949: LD_VAR 0 1
47953: PPUSH
47954: LD_INT 5
47956: PPUSH
47957: CALL_OW 321
47961: PUSH
47962: LD_INT 2
47964: EQUAL
47965: IFFALSE 47982
// bpoints := bpoints * 1.8 ;
47967: LD_ADDR_VAR 0 10
47971: PUSH
47972: LD_VAR 0 10
47976: PUSH
47977: LD_REAL  1.80000000000000E+0000
47980: MUL
47981: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47982: LD_VAR 0 6
47986: PPUSH
47987: CALL_OW 257
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: LD_INT 2
47997: PUSH
47998: LD_INT 3
48000: PUSH
48001: LD_INT 4
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: IN
48010: IFFALSE 48030
48012: PUSH
48013: LD_VAR 0 1
48017: PPUSH
48018: LD_INT 51
48020: PPUSH
48021: CALL_OW 321
48025: PUSH
48026: LD_INT 2
48028: EQUAL
48029: AND
48030: IFFALSE 48047
// bpoints := bpoints * 1.2 ;
48032: LD_ADDR_VAR 0 10
48036: PUSH
48037: LD_VAR 0 10
48041: PUSH
48042: LD_REAL  1.20000000000000E+0000
48045: MUL
48046: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48047: LD_VAR 0 6
48051: PPUSH
48052: CALL_OW 257
48056: PUSH
48057: LD_INT 5
48059: PUSH
48060: LD_INT 7
48062: PUSH
48063: LD_INT 9
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: LIST
48070: IN
48071: IFFALSE 48091
48073: PUSH
48074: LD_VAR 0 1
48078: PPUSH
48079: LD_INT 52
48081: PPUSH
48082: CALL_OW 321
48086: PUSH
48087: LD_INT 2
48089: EQUAL
48090: AND
48091: IFFALSE 48108
// bpoints := bpoints * 1.5 ;
48093: LD_ADDR_VAR 0 10
48097: PUSH
48098: LD_VAR 0 10
48102: PUSH
48103: LD_REAL  1.50000000000000E+0000
48106: MUL
48107: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48108: LD_VAR 0 1
48112: PPUSH
48113: LD_INT 66
48115: PPUSH
48116: CALL_OW 321
48120: PUSH
48121: LD_INT 2
48123: EQUAL
48124: IFFALSE 48141
// bpoints := bpoints * 1.1 ;
48126: LD_ADDR_VAR 0 10
48130: PUSH
48131: LD_VAR 0 10
48135: PUSH
48136: LD_REAL  1.10000000000000E+0000
48139: MUL
48140: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48141: LD_ADDR_VAR 0 10
48145: PUSH
48146: LD_VAR 0 10
48150: PUSH
48151: LD_VAR 0 6
48155: PPUSH
48156: LD_INT 1
48158: PPUSH
48159: CALL_OW 259
48163: PUSH
48164: LD_REAL  1.15000000000000E+0000
48167: MUL
48168: MUL
48169: ST_TO_ADDR
// end ; unit_vehicle :
48170: GO 49000
48172: LD_INT 2
48174: DOUBLE
48175: EQUAL
48176: IFTRUE 48180
48178: GO 48988
48180: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48181: LD_VAR 0 6
48185: PPUSH
48186: CALL_OW 264
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: LD_INT 42
48196: PUSH
48197: LD_INT 24
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: LIST
48204: IN
48205: IFFALSE 48226
// points := [ 25 , 5 , 3 ] ;
48207: LD_ADDR_VAR 0 9
48211: PUSH
48212: LD_INT 25
48214: PUSH
48215: LD_INT 5
48217: PUSH
48218: LD_INT 3
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: LIST
48225: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48226: LD_VAR 0 6
48230: PPUSH
48231: CALL_OW 264
48235: PUSH
48236: LD_INT 4
48238: PUSH
48239: LD_INT 43
48241: PUSH
48242: LD_INT 25
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: LIST
48249: IN
48250: IFFALSE 48271
// points := [ 40 , 15 , 5 ] ;
48252: LD_ADDR_VAR 0 9
48256: PUSH
48257: LD_INT 40
48259: PUSH
48260: LD_INT 15
48262: PUSH
48263: LD_INT 5
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: LIST
48270: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48271: LD_VAR 0 6
48275: PPUSH
48276: CALL_OW 264
48280: PUSH
48281: LD_INT 3
48283: PUSH
48284: LD_INT 23
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: IN
48291: IFFALSE 48312
// points := [ 7 , 25 , 8 ] ;
48293: LD_ADDR_VAR 0 9
48297: PUSH
48298: LD_INT 7
48300: PUSH
48301: LD_INT 25
48303: PUSH
48304: LD_INT 8
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: LIST
48311: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48312: LD_VAR 0 6
48316: PPUSH
48317: CALL_OW 264
48321: PUSH
48322: LD_INT 5
48324: PUSH
48325: LD_INT 27
48327: PUSH
48328: LD_INT 44
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: LIST
48335: IN
48336: IFFALSE 48357
// points := [ 14 , 50 , 16 ] ;
48338: LD_ADDR_VAR 0 9
48342: PUSH
48343: LD_INT 14
48345: PUSH
48346: LD_INT 50
48348: PUSH
48349: LD_INT 16
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: LIST
48356: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48357: LD_VAR 0 6
48361: PPUSH
48362: CALL_OW 264
48366: PUSH
48367: LD_INT 6
48369: PUSH
48370: LD_INT 46
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: IN
48377: IFFALSE 48398
// points := [ 32 , 120 , 70 ] ;
48379: LD_ADDR_VAR 0 9
48383: PUSH
48384: LD_INT 32
48386: PUSH
48387: LD_INT 120
48389: PUSH
48390: LD_INT 70
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: LIST
48397: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48398: LD_VAR 0 6
48402: PPUSH
48403: CALL_OW 264
48407: PUSH
48408: LD_INT 7
48410: PUSH
48411: LD_INT 28
48413: PUSH
48414: LD_INT 45
48416: PUSH
48417: LD_INT 92
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: IN
48426: IFFALSE 48447
// points := [ 35 , 20 , 45 ] ;
48428: LD_ADDR_VAR 0 9
48432: PUSH
48433: LD_INT 35
48435: PUSH
48436: LD_INT 20
48438: PUSH
48439: LD_INT 45
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: LIST
48446: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48447: LD_VAR 0 6
48451: PPUSH
48452: CALL_OW 264
48456: PUSH
48457: LD_INT 47
48459: PUSH
48460: EMPTY
48461: LIST
48462: IN
48463: IFFALSE 48484
// points := [ 67 , 45 , 75 ] ;
48465: LD_ADDR_VAR 0 9
48469: PUSH
48470: LD_INT 67
48472: PUSH
48473: LD_INT 45
48475: PUSH
48476: LD_INT 75
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: LIST
48483: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48484: LD_VAR 0 6
48488: PPUSH
48489: CALL_OW 264
48493: PUSH
48494: LD_INT 26
48496: PUSH
48497: EMPTY
48498: LIST
48499: IN
48500: IFFALSE 48521
// points := [ 120 , 30 , 80 ] ;
48502: LD_ADDR_VAR 0 9
48506: PUSH
48507: LD_INT 120
48509: PUSH
48510: LD_INT 30
48512: PUSH
48513: LD_INT 80
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: LIST
48520: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48521: LD_VAR 0 6
48525: PPUSH
48526: CALL_OW 264
48530: PUSH
48531: LD_INT 22
48533: PUSH
48534: EMPTY
48535: LIST
48536: IN
48537: IFFALSE 48558
// points := [ 40 , 1 , 1 ] ;
48539: LD_ADDR_VAR 0 9
48543: PUSH
48544: LD_INT 40
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: LIST
48557: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48558: LD_VAR 0 6
48562: PPUSH
48563: CALL_OW 264
48567: PUSH
48568: LD_INT 29
48570: PUSH
48571: EMPTY
48572: LIST
48573: IN
48574: IFFALSE 48595
// points := [ 70 , 200 , 400 ] ;
48576: LD_ADDR_VAR 0 9
48580: PUSH
48581: LD_INT 70
48583: PUSH
48584: LD_INT 200
48586: PUSH
48587: LD_INT 400
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: LIST
48594: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48595: LD_VAR 0 6
48599: PPUSH
48600: CALL_OW 264
48604: PUSH
48605: LD_INT 14
48607: PUSH
48608: LD_INT 53
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: IN
48615: IFFALSE 48636
// points := [ 40 , 10 , 20 ] ;
48617: LD_ADDR_VAR 0 9
48621: PUSH
48622: LD_INT 40
48624: PUSH
48625: LD_INT 10
48627: PUSH
48628: LD_INT 20
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: LIST
48635: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48636: LD_VAR 0 6
48640: PPUSH
48641: CALL_OW 264
48645: PUSH
48646: LD_INT 9
48648: PUSH
48649: EMPTY
48650: LIST
48651: IN
48652: IFFALSE 48673
// points := [ 5 , 70 , 20 ] ;
48654: LD_ADDR_VAR 0 9
48658: PUSH
48659: LD_INT 5
48661: PUSH
48662: LD_INT 70
48664: PUSH
48665: LD_INT 20
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: LIST
48672: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48673: LD_VAR 0 6
48677: PPUSH
48678: CALL_OW 264
48682: PUSH
48683: LD_INT 10
48685: PUSH
48686: EMPTY
48687: LIST
48688: IN
48689: IFFALSE 48710
// points := [ 35 , 110 , 70 ] ;
48691: LD_ADDR_VAR 0 9
48695: PUSH
48696: LD_INT 35
48698: PUSH
48699: LD_INT 110
48701: PUSH
48702: LD_INT 70
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: LIST
48709: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48710: LD_VAR 0 6
48714: PPUSH
48715: CALL_OW 265
48719: PUSH
48720: LD_INT 25
48722: EQUAL
48723: IFFALSE 48744
// points := [ 80 , 65 , 100 ] ;
48725: LD_ADDR_VAR 0 9
48729: PUSH
48730: LD_INT 80
48732: PUSH
48733: LD_INT 65
48735: PUSH
48736: LD_INT 100
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: LIST
48743: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48744: LD_VAR 0 6
48748: PPUSH
48749: CALL_OW 263
48753: PUSH
48754: LD_INT 1
48756: EQUAL
48757: IFFALSE 48792
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48759: LD_ADDR_VAR 0 10
48763: PUSH
48764: LD_VAR 0 10
48768: PUSH
48769: LD_VAR 0 6
48773: PPUSH
48774: CALL_OW 311
48778: PPUSH
48779: LD_INT 3
48781: PPUSH
48782: CALL_OW 259
48786: PUSH
48787: LD_INT 4
48789: MUL
48790: MUL
48791: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48792: LD_VAR 0 6
48796: PPUSH
48797: CALL_OW 263
48801: PUSH
48802: LD_INT 2
48804: EQUAL
48805: IFFALSE 48856
// begin j := IsControledBy ( i ) ;
48807: LD_ADDR_VAR 0 7
48811: PUSH
48812: LD_VAR 0 6
48816: PPUSH
48817: CALL_OW 312
48821: ST_TO_ADDR
// if j then
48822: LD_VAR 0 7
48826: IFFALSE 48856
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48828: LD_ADDR_VAR 0 10
48832: PUSH
48833: LD_VAR 0 10
48837: PUSH
48838: LD_VAR 0 7
48842: PPUSH
48843: LD_INT 3
48845: PPUSH
48846: CALL_OW 259
48850: PUSH
48851: LD_INT 3
48853: MUL
48854: MUL
48855: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48856: LD_VAR 0 6
48860: PPUSH
48861: CALL_OW 264
48865: PUSH
48866: LD_INT 5
48868: PUSH
48869: LD_INT 6
48871: PUSH
48872: LD_INT 46
48874: PUSH
48875: LD_INT 44
48877: PUSH
48878: LD_INT 47
48880: PUSH
48881: LD_INT 45
48883: PUSH
48884: LD_INT 28
48886: PUSH
48887: LD_INT 7
48889: PUSH
48890: LD_INT 27
48892: PUSH
48893: LD_INT 29
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: IN
48908: IFFALSE 48928
48910: PUSH
48911: LD_VAR 0 1
48915: PPUSH
48916: LD_INT 52
48918: PPUSH
48919: CALL_OW 321
48923: PUSH
48924: LD_INT 2
48926: EQUAL
48927: AND
48928: IFFALSE 48945
// bpoints := bpoints * 1.2 ;
48930: LD_ADDR_VAR 0 10
48934: PUSH
48935: LD_VAR 0 10
48939: PUSH
48940: LD_REAL  1.20000000000000E+0000
48943: MUL
48944: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48945: LD_VAR 0 6
48949: PPUSH
48950: CALL_OW 264
48954: PUSH
48955: LD_INT 6
48957: PUSH
48958: LD_INT 46
48960: PUSH
48961: LD_INT 47
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: LIST
48968: IN
48969: IFFALSE 48986
// bpoints := bpoints * 1.2 ;
48971: LD_ADDR_VAR 0 10
48975: PUSH
48976: LD_VAR 0 10
48980: PUSH
48981: LD_REAL  1.20000000000000E+0000
48984: MUL
48985: ST_TO_ADDR
// end ; unit_building :
48986: GO 49000
48988: LD_INT 3
48990: DOUBLE
48991: EQUAL
48992: IFTRUE 48996
48994: GO 48999
48996: POP
// ; end ;
48997: GO 49000
48999: POP
// for j = 1 to 3 do
49000: LD_ADDR_VAR 0 7
49004: PUSH
49005: DOUBLE
49006: LD_INT 1
49008: DEC
49009: ST_TO_ADDR
49010: LD_INT 3
49012: PUSH
49013: FOR_TO
49014: IFFALSE 49067
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49016: LD_ADDR_VAR 0 5
49020: PUSH
49021: LD_VAR 0 5
49025: PPUSH
49026: LD_VAR 0 7
49030: PPUSH
49031: LD_VAR 0 5
49035: PUSH
49036: LD_VAR 0 7
49040: ARRAY
49041: PUSH
49042: LD_VAR 0 9
49046: PUSH
49047: LD_VAR 0 7
49051: ARRAY
49052: PUSH
49053: LD_VAR 0 10
49057: MUL
49058: PLUS
49059: PPUSH
49060: CALL_OW 1
49064: ST_TO_ADDR
49065: GO 49013
49067: POP
49068: POP
// end ;
49069: GO 47542
49071: POP
49072: POP
// result := Replace ( result , 4 , tmp ) ;
49073: LD_ADDR_VAR 0 5
49077: PUSH
49078: LD_VAR 0 5
49082: PPUSH
49083: LD_INT 4
49085: PPUSH
49086: LD_VAR 0 8
49090: PPUSH
49091: CALL_OW 1
49095: ST_TO_ADDR
// end ;
49096: LD_VAR 0 5
49100: RET
// export function DangerAtRange ( unit , range ) ; begin
49101: LD_INT 0
49103: PPUSH
// if not unit then
49104: LD_VAR 0 1
49108: NOT
49109: IFFALSE 49113
// exit ;
49111: GO 49158
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49113: LD_ADDR_VAR 0 3
49117: PUSH
49118: LD_VAR 0 1
49122: PPUSH
49123: CALL_OW 255
49127: PPUSH
49128: LD_VAR 0 1
49132: PPUSH
49133: CALL_OW 250
49137: PPUSH
49138: LD_VAR 0 1
49142: PPUSH
49143: CALL_OW 251
49147: PPUSH
49148: LD_VAR 0 2
49152: PPUSH
49153: CALL 47392 0 4
49157: ST_TO_ADDR
// end ;
49158: LD_VAR 0 3
49162: RET
// export function DangerInArea ( side , area ) ; begin
49163: LD_INT 0
49165: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49166: LD_ADDR_VAR 0 3
49170: PUSH
49171: LD_VAR 0 2
49175: PPUSH
49176: LD_INT 81
49178: PUSH
49179: LD_VAR 0 1
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PPUSH
49188: CALL_OW 70
49192: ST_TO_ADDR
// end ;
49193: LD_VAR 0 3
49197: RET
// export function IsExtension ( b ) ; begin
49198: LD_INT 0
49200: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49201: LD_ADDR_VAR 0 2
49205: PUSH
49206: LD_VAR 0 1
49210: PUSH
49211: LD_INT 23
49213: PUSH
49214: LD_INT 20
49216: PUSH
49217: LD_INT 22
49219: PUSH
49220: LD_INT 17
49222: PUSH
49223: LD_INT 24
49225: PUSH
49226: LD_INT 21
49228: PUSH
49229: LD_INT 19
49231: PUSH
49232: LD_INT 16
49234: PUSH
49235: LD_INT 25
49237: PUSH
49238: LD_INT 18
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: IN
49253: ST_TO_ADDR
// end ;
49254: LD_VAR 0 2
49258: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49259: LD_INT 0
49261: PPUSH
49262: PPUSH
49263: PPUSH
// result := [ ] ;
49264: LD_ADDR_VAR 0 4
49268: PUSH
49269: EMPTY
49270: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49271: LD_ADDR_VAR 0 5
49275: PUSH
49276: LD_VAR 0 2
49280: PPUSH
49281: LD_INT 21
49283: PUSH
49284: LD_INT 3
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PPUSH
49291: CALL_OW 70
49295: ST_TO_ADDR
// if not tmp then
49296: LD_VAR 0 5
49300: NOT
49301: IFFALSE 49305
// exit ;
49303: GO 49369
// if checkLink then
49305: LD_VAR 0 3
49309: IFFALSE 49359
// begin for i in tmp do
49311: LD_ADDR_VAR 0 6
49315: PUSH
49316: LD_VAR 0 5
49320: PUSH
49321: FOR_IN
49322: IFFALSE 49357
// if GetBase ( i ) <> base then
49324: LD_VAR 0 6
49328: PPUSH
49329: CALL_OW 274
49333: PUSH
49334: LD_VAR 0 1
49338: NONEQUAL
49339: IFFALSE 49355
// ComLinkToBase ( base , i ) ;
49341: LD_VAR 0 1
49345: PPUSH
49346: LD_VAR 0 6
49350: PPUSH
49351: CALL_OW 169
49355: GO 49321
49357: POP
49358: POP
// end ; result := tmp ;
49359: LD_ADDR_VAR 0 4
49363: PUSH
49364: LD_VAR 0 5
49368: ST_TO_ADDR
// end ;
49369: LD_VAR 0 4
49373: RET
// export function ComComplete ( units , b ) ; var i ; begin
49374: LD_INT 0
49376: PPUSH
49377: PPUSH
// if not units then
49378: LD_VAR 0 1
49382: NOT
49383: IFFALSE 49387
// exit ;
49385: GO 49477
// for i in units do
49387: LD_ADDR_VAR 0 4
49391: PUSH
49392: LD_VAR 0 1
49396: PUSH
49397: FOR_IN
49398: IFFALSE 49475
// if BuildingStatus ( b ) = bs_build then
49400: LD_VAR 0 2
49404: PPUSH
49405: CALL_OW 461
49409: PUSH
49410: LD_INT 1
49412: EQUAL
49413: IFFALSE 49473
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49415: LD_VAR 0 4
49419: PPUSH
49420: LD_STRING h
49422: PUSH
49423: LD_VAR 0 2
49427: PPUSH
49428: CALL_OW 250
49432: PUSH
49433: LD_VAR 0 2
49437: PPUSH
49438: CALL_OW 251
49442: PUSH
49443: LD_VAR 0 2
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: PUSH
49466: EMPTY
49467: LIST
49468: PPUSH
49469: CALL_OW 446
49473: GO 49397
49475: POP
49476: POP
// end ;
49477: LD_VAR 0 3
49481: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49482: LD_INT 0
49484: PPUSH
49485: PPUSH
49486: PPUSH
49487: PPUSH
49488: PPUSH
49489: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49490: LD_VAR 0 1
49494: NOT
49495: IFTRUE 49512
49497: PUSH
49498: LD_VAR 0 1
49502: PPUSH
49503: CALL_OW 263
49507: PUSH
49508: LD_INT 2
49510: NONEQUAL
49511: OR
49512: IFFALSE 49516
// exit ;
49514: GO 49832
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49516: LD_ADDR_VAR 0 6
49520: PUSH
49521: LD_INT 22
49523: PUSH
49524: LD_VAR 0 1
49528: PPUSH
49529: CALL_OW 255
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: LD_INT 30
49543: PUSH
49544: LD_INT 36
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 34
49553: PUSH
49554: LD_INT 31
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: LIST
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PPUSH
49570: CALL_OW 69
49574: ST_TO_ADDR
// if not tmp then
49575: LD_VAR 0 6
49579: NOT
49580: IFFALSE 49584
// exit ;
49582: GO 49832
// result := [ ] ;
49584: LD_ADDR_VAR 0 2
49588: PUSH
49589: EMPTY
49590: ST_TO_ADDR
// for i in tmp do
49591: LD_ADDR_VAR 0 3
49595: PUSH
49596: LD_VAR 0 6
49600: PUSH
49601: FOR_IN
49602: IFFALSE 49673
// begin t := UnitsInside ( i ) ;
49604: LD_ADDR_VAR 0 4
49608: PUSH
49609: LD_VAR 0 3
49613: PPUSH
49614: CALL_OW 313
49618: ST_TO_ADDR
// if t then
49619: LD_VAR 0 4
49623: IFFALSE 49671
// for j in t do
49625: LD_ADDR_VAR 0 7
49629: PUSH
49630: LD_VAR 0 4
49634: PUSH
49635: FOR_IN
49636: IFFALSE 49669
// result := Replace ( result , result + 1 , j ) ;
49638: LD_ADDR_VAR 0 2
49642: PUSH
49643: LD_VAR 0 2
49647: PPUSH
49648: LD_VAR 0 2
49652: PUSH
49653: LD_INT 1
49655: PLUS
49656: PPUSH
49657: LD_VAR 0 7
49661: PPUSH
49662: CALL_OW 1
49666: ST_TO_ADDR
49667: GO 49635
49669: POP
49670: POP
// end ;
49671: GO 49601
49673: POP
49674: POP
// if not result then
49675: LD_VAR 0 2
49679: NOT
49680: IFFALSE 49684
// exit ;
49682: GO 49832
// mech := result [ 1 ] ;
49684: LD_ADDR_VAR 0 5
49688: PUSH
49689: LD_VAR 0 2
49693: PUSH
49694: LD_INT 1
49696: ARRAY
49697: ST_TO_ADDR
// if result > 1 then
49698: LD_VAR 0 2
49702: PUSH
49703: LD_INT 1
49705: GREATER
49706: IFFALSE 49818
// begin for i = 2 to result do
49708: LD_ADDR_VAR 0 3
49712: PUSH
49713: DOUBLE
49714: LD_INT 2
49716: DEC
49717: ST_TO_ADDR
49718: LD_VAR 0 2
49722: PUSH
49723: FOR_TO
49724: IFFALSE 49816
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49726: LD_ADDR_VAR 0 4
49730: PUSH
49731: LD_VAR 0 2
49735: PUSH
49736: LD_VAR 0 3
49740: ARRAY
49741: PPUSH
49742: LD_INT 3
49744: PPUSH
49745: CALL_OW 259
49749: PUSH
49750: LD_VAR 0 2
49754: PUSH
49755: LD_VAR 0 3
49759: ARRAY
49760: PPUSH
49761: CALL_OW 432
49765: MINUS
49766: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49767: LD_VAR 0 4
49771: PUSH
49772: LD_VAR 0 5
49776: PPUSH
49777: LD_INT 3
49779: PPUSH
49780: CALL_OW 259
49784: PUSH
49785: LD_VAR 0 5
49789: PPUSH
49790: CALL_OW 432
49794: MINUS
49795: GREATEREQUAL
49796: IFFALSE 49814
// mech := result [ i ] ;
49798: LD_ADDR_VAR 0 5
49802: PUSH
49803: LD_VAR 0 2
49807: PUSH
49808: LD_VAR 0 3
49812: ARRAY
49813: ST_TO_ADDR
// end ;
49814: GO 49723
49816: POP
49817: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49818: LD_VAR 0 1
49822: PPUSH
49823: LD_VAR 0 5
49827: PPUSH
49828: CALL_OW 135
// end ;
49832: LD_VAR 0 2
49836: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49837: LD_INT 0
49839: PPUSH
49840: PPUSH
49841: PPUSH
49842: PPUSH
49843: PPUSH
49844: PPUSH
49845: PPUSH
49846: PPUSH
49847: PPUSH
49848: PPUSH
49849: PPUSH
49850: PPUSH
49851: PPUSH
// result := [ ] ;
49852: LD_ADDR_VAR 0 7
49856: PUSH
49857: EMPTY
49858: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49859: LD_VAR 0 1
49863: PPUSH
49864: CALL_OW 266
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: IN
49879: NOT
49880: IFFALSE 49884
// exit ;
49882: GO 51524
// if name then
49884: LD_VAR 0 3
49888: IFFALSE 49904
// SetBName ( base_dep , name ) ;
49890: LD_VAR 0 1
49894: PPUSH
49895: LD_VAR 0 3
49899: PPUSH
49900: CALL_OW 500
// base := GetBase ( base_dep ) ;
49904: LD_ADDR_VAR 0 15
49908: PUSH
49909: LD_VAR 0 1
49913: PPUSH
49914: CALL_OW 274
49918: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49919: LD_ADDR_VAR 0 16
49923: PUSH
49924: LD_VAR 0 1
49928: PPUSH
49929: CALL_OW 255
49933: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49934: LD_ADDR_VAR 0 17
49938: PUSH
49939: LD_VAR 0 1
49943: PPUSH
49944: CALL_OW 248
49948: ST_TO_ADDR
// if sources then
49949: LD_VAR 0 5
49953: IFFALSE 50000
// for i = 1 to 3 do
49955: LD_ADDR_VAR 0 8
49959: PUSH
49960: DOUBLE
49961: LD_INT 1
49963: DEC
49964: ST_TO_ADDR
49965: LD_INT 3
49967: PUSH
49968: FOR_TO
49969: IFFALSE 49998
// AddResourceType ( base , i , sources [ i ] ) ;
49971: LD_VAR 0 15
49975: PPUSH
49976: LD_VAR 0 8
49980: PPUSH
49981: LD_VAR 0 5
49985: PUSH
49986: LD_VAR 0 8
49990: ARRAY
49991: PPUSH
49992: CALL_OW 276
49996: GO 49968
49998: POP
49999: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50000: LD_ADDR_VAR 0 18
50004: PUSH
50005: LD_VAR 0 15
50009: PPUSH
50010: LD_VAR 0 2
50014: PPUSH
50015: LD_INT 1
50017: PPUSH
50018: CALL 49259 0 3
50022: ST_TO_ADDR
// InitHc ;
50023: CALL_OW 19
// InitUc ;
50027: CALL_OW 18
// uc_side := side ;
50031: LD_ADDR_OWVAR 20
50035: PUSH
50036: LD_VAR 0 16
50040: ST_TO_ADDR
// uc_nation := nation ;
50041: LD_ADDR_OWVAR 21
50045: PUSH
50046: LD_VAR 0 17
50050: ST_TO_ADDR
// if buildings then
50051: LD_VAR 0 18
50055: IFFALSE 51383
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50057: LD_ADDR_VAR 0 19
50061: PUSH
50062: LD_VAR 0 18
50066: PPUSH
50067: LD_INT 2
50069: PUSH
50070: LD_INT 30
50072: PUSH
50073: LD_INT 29
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 30
50082: PUSH
50083: LD_INT 30
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: LIST
50094: PPUSH
50095: CALL_OW 72
50099: ST_TO_ADDR
// if tmp then
50100: LD_VAR 0 19
50104: IFFALSE 50152
// for i in tmp do
50106: LD_ADDR_VAR 0 8
50110: PUSH
50111: LD_VAR 0 19
50115: PUSH
50116: FOR_IN
50117: IFFALSE 50150
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50119: LD_VAR 0 8
50123: PPUSH
50124: CALL_OW 250
50128: PPUSH
50129: LD_VAR 0 8
50133: PPUSH
50134: CALL_OW 251
50138: PPUSH
50139: LD_VAR 0 16
50143: PPUSH
50144: CALL_OW 441
50148: GO 50116
50150: POP
50151: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50152: LD_VAR 0 18
50156: PPUSH
50157: LD_INT 2
50159: PUSH
50160: LD_INT 30
50162: PUSH
50163: LD_INT 32
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 30
50172: PUSH
50173: LD_INT 33
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: LIST
50184: PPUSH
50185: CALL_OW 72
50189: IFFALSE 50277
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50191: LD_ADDR_VAR 0 8
50195: PUSH
50196: LD_VAR 0 18
50200: PPUSH
50201: LD_INT 2
50203: PUSH
50204: LD_INT 30
50206: PUSH
50207: LD_INT 32
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 30
50216: PUSH
50217: LD_INT 33
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: LIST
50228: PPUSH
50229: CALL_OW 72
50233: PUSH
50234: FOR_IN
50235: IFFALSE 50275
// begin if not GetBWeapon ( i ) then
50237: LD_VAR 0 8
50241: PPUSH
50242: CALL_OW 269
50246: NOT
50247: IFFALSE 50273
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50249: LD_VAR 0 8
50253: PPUSH
50254: LD_VAR 0 8
50258: PPUSH
50259: LD_VAR 0 2
50263: PPUSH
50264: CALL 51529 0 2
50268: PPUSH
50269: CALL_OW 431
// end ;
50273: GO 50234
50275: POP
50276: POP
// end ; for i = 1 to personel do
50277: LD_ADDR_VAR 0 8
50281: PUSH
50282: DOUBLE
50283: LD_INT 1
50285: DEC
50286: ST_TO_ADDR
50287: LD_VAR 0 6
50291: PUSH
50292: FOR_TO
50293: IFFALSE 51363
// begin if i > 4 then
50295: LD_VAR 0 8
50299: PUSH
50300: LD_INT 4
50302: GREATER
50303: IFFALSE 50307
// break ;
50305: GO 51363
// case i of 1 :
50307: LD_VAR 0 8
50311: PUSH
50312: LD_INT 1
50314: DOUBLE
50315: EQUAL
50316: IFTRUE 50320
50318: GO 50400
50320: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50321: LD_ADDR_VAR 0 12
50325: PUSH
50326: LD_VAR 0 18
50330: PPUSH
50331: LD_INT 22
50333: PUSH
50334: LD_VAR 0 16
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 58
50345: PUSH
50346: EMPTY
50347: LIST
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: LD_INT 30
50354: PUSH
50355: LD_INT 32
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 30
50364: PUSH
50365: LD_INT 4
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 30
50374: PUSH
50375: LD_INT 5
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: LIST
50392: PPUSH
50393: CALL_OW 72
50397: ST_TO_ADDR
50398: GO 50622
50400: LD_INT 2
50402: DOUBLE
50403: EQUAL
50404: IFTRUE 50408
50406: GO 50470
50408: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50409: LD_ADDR_VAR 0 12
50413: PUSH
50414: LD_VAR 0 18
50418: PPUSH
50419: LD_INT 22
50421: PUSH
50422: LD_VAR 0 16
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: PUSH
50434: LD_INT 30
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 30
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: LIST
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PPUSH
50463: CALL_OW 72
50467: ST_TO_ADDR
50468: GO 50622
50470: LD_INT 3
50472: DOUBLE
50473: EQUAL
50474: IFTRUE 50478
50476: GO 50540
50478: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50479: LD_ADDR_VAR 0 12
50483: PUSH
50484: LD_VAR 0 18
50488: PPUSH
50489: LD_INT 22
50491: PUSH
50492: LD_VAR 0 16
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: PUSH
50504: LD_INT 30
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 30
50516: PUSH
50517: LD_INT 3
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: LIST
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PPUSH
50533: CALL_OW 72
50537: ST_TO_ADDR
50538: GO 50622
50540: LD_INT 4
50542: DOUBLE
50543: EQUAL
50544: IFTRUE 50548
50546: GO 50621
50548: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50549: LD_ADDR_VAR 0 12
50553: PUSH
50554: LD_VAR 0 18
50558: PPUSH
50559: LD_INT 22
50561: PUSH
50562: LD_VAR 0 16
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: LD_INT 30
50576: PUSH
50577: LD_INT 6
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 30
50586: PUSH
50587: LD_INT 7
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 30
50596: PUSH
50597: LD_INT 8
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PPUSH
50614: CALL_OW 72
50618: ST_TO_ADDR
50619: GO 50622
50621: POP
// if i = 1 then
50622: LD_VAR 0 8
50626: PUSH
50627: LD_INT 1
50629: EQUAL
50630: IFFALSE 50741
// begin tmp := [ ] ;
50632: LD_ADDR_VAR 0 19
50636: PUSH
50637: EMPTY
50638: ST_TO_ADDR
// for j in f do
50639: LD_ADDR_VAR 0 9
50643: PUSH
50644: LD_VAR 0 12
50648: PUSH
50649: FOR_IN
50650: IFFALSE 50723
// if GetBType ( j ) = b_bunker then
50652: LD_VAR 0 9
50656: PPUSH
50657: CALL_OW 266
50661: PUSH
50662: LD_INT 32
50664: EQUAL
50665: IFFALSE 50692
// tmp := Insert ( tmp , 1 , j ) else
50667: LD_ADDR_VAR 0 19
50671: PUSH
50672: LD_VAR 0 19
50676: PPUSH
50677: LD_INT 1
50679: PPUSH
50680: LD_VAR 0 9
50684: PPUSH
50685: CALL_OW 2
50689: ST_TO_ADDR
50690: GO 50721
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50692: LD_ADDR_VAR 0 19
50696: PUSH
50697: LD_VAR 0 19
50701: PPUSH
50702: LD_VAR 0 19
50706: PUSH
50707: LD_INT 1
50709: PLUS
50710: PPUSH
50711: LD_VAR 0 9
50715: PPUSH
50716: CALL_OW 2
50720: ST_TO_ADDR
50721: GO 50649
50723: POP
50724: POP
// if tmp then
50725: LD_VAR 0 19
50729: IFFALSE 50741
// f := tmp ;
50731: LD_ADDR_VAR 0 12
50735: PUSH
50736: LD_VAR 0 19
50740: ST_TO_ADDR
// end ; x := personel [ i ] ;
50741: LD_ADDR_VAR 0 13
50745: PUSH
50746: LD_VAR 0 6
50750: PUSH
50751: LD_VAR 0 8
50755: ARRAY
50756: ST_TO_ADDR
// if x = - 1 then
50757: LD_VAR 0 13
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: EQUAL
50766: IFFALSE 50977
// begin for j in f do
50768: LD_ADDR_VAR 0 9
50772: PUSH
50773: LD_VAR 0 12
50777: PUSH
50778: FOR_IN
50779: IFFALSE 50973
// repeat InitHc ;
50781: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50785: LD_VAR 0 9
50789: PPUSH
50790: CALL_OW 266
50794: PUSH
50795: LD_INT 5
50797: EQUAL
50798: IFFALSE 50868
// begin if UnitsInside ( j ) < 3 then
50800: LD_VAR 0 9
50804: PPUSH
50805: CALL_OW 313
50809: PUSH
50810: LD_INT 3
50812: LESS
50813: IFFALSE 50849
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50815: LD_INT 0
50817: PPUSH
50818: LD_INT 5
50820: PUSH
50821: LD_INT 8
50823: PUSH
50824: LD_INT 9
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: LIST
50831: PUSH
50832: LD_VAR 0 17
50836: ARRAY
50837: PPUSH
50838: LD_VAR 0 4
50842: PPUSH
50843: CALL_OW 380
50847: GO 50866
// PrepareHuman ( false , i , skill ) ;
50849: LD_INT 0
50851: PPUSH
50852: LD_VAR 0 8
50856: PPUSH
50857: LD_VAR 0 4
50861: PPUSH
50862: CALL_OW 380
// end else
50866: GO 50885
// PrepareHuman ( false , i , skill ) ;
50868: LD_INT 0
50870: PPUSH
50871: LD_VAR 0 8
50875: PPUSH
50876: LD_VAR 0 4
50880: PPUSH
50881: CALL_OW 380
// un := CreateHuman ;
50885: LD_ADDR_VAR 0 14
50889: PUSH
50890: CALL_OW 44
50894: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50895: LD_ADDR_VAR 0 7
50899: PUSH
50900: LD_VAR 0 7
50904: PPUSH
50905: LD_INT 1
50907: PPUSH
50908: LD_VAR 0 14
50912: PPUSH
50913: CALL_OW 2
50917: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50918: LD_VAR 0 14
50922: PPUSH
50923: LD_VAR 0 9
50927: PPUSH
50928: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50932: LD_VAR 0 9
50936: PPUSH
50937: CALL_OW 313
50941: PUSH
50942: LD_INT 6
50944: EQUAL
50945: IFTRUE 50969
50947: PUSH
50948: LD_VAR 0 9
50952: PPUSH
50953: CALL_OW 266
50957: PUSH
50958: LD_INT 32
50960: PUSH
50961: LD_INT 31
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: IN
50968: OR
50969: IFFALSE 50781
50971: GO 50778
50973: POP
50974: POP
// end else
50975: GO 51361
// for j = 1 to x do
50977: LD_ADDR_VAR 0 9
50981: PUSH
50982: DOUBLE
50983: LD_INT 1
50985: DEC
50986: ST_TO_ADDR
50987: LD_VAR 0 13
50991: PUSH
50992: FOR_TO
50993: IFFALSE 51359
// begin InitHc ;
50995: CALL_OW 19
// if not f then
50999: LD_VAR 0 12
51003: NOT
51004: IFFALSE 51093
// begin PrepareHuman ( false , i , skill ) ;
51006: LD_INT 0
51008: PPUSH
51009: LD_VAR 0 8
51013: PPUSH
51014: LD_VAR 0 4
51018: PPUSH
51019: CALL_OW 380
// un := CreateHuman ;
51023: LD_ADDR_VAR 0 14
51027: PUSH
51028: CALL_OW 44
51032: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51033: LD_ADDR_VAR 0 7
51037: PUSH
51038: LD_VAR 0 7
51042: PPUSH
51043: LD_INT 1
51045: PPUSH
51046: LD_VAR 0 14
51050: PPUSH
51051: CALL_OW 2
51055: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51056: LD_VAR 0 14
51060: PPUSH
51061: LD_VAR 0 1
51065: PPUSH
51066: CALL_OW 250
51070: PPUSH
51071: LD_VAR 0 1
51075: PPUSH
51076: CALL_OW 251
51080: PPUSH
51081: LD_INT 10
51083: PPUSH
51084: LD_INT 0
51086: PPUSH
51087: CALL_OW 50
// continue ;
51091: GO 50992
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51093: LD_VAR 0 12
51097: PUSH
51098: LD_INT 1
51100: ARRAY
51101: PPUSH
51102: CALL_OW 313
51106: IFFALSE 51134
51108: PUSH
51109: LD_VAR 0 12
51113: PUSH
51114: LD_INT 1
51116: ARRAY
51117: PPUSH
51118: CALL_OW 266
51122: PUSH
51123: LD_INT 32
51125: PUSH
51126: LD_INT 31
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: IN
51133: AND
51134: IFTRUE 51155
51136: PUSH
51137: LD_VAR 0 12
51141: PUSH
51142: LD_INT 1
51144: ARRAY
51145: PPUSH
51146: CALL_OW 313
51150: PUSH
51151: LD_INT 6
51153: EQUAL
51154: OR
51155: IFFALSE 51175
// f := Delete ( f , 1 ) ;
51157: LD_ADDR_VAR 0 12
51161: PUSH
51162: LD_VAR 0 12
51166: PPUSH
51167: LD_INT 1
51169: PPUSH
51170: CALL_OW 3
51174: ST_TO_ADDR
// if not f then
51175: LD_VAR 0 12
51179: NOT
51180: IFFALSE 51198
// begin x := x + 2 ;
51182: LD_ADDR_VAR 0 13
51186: PUSH
51187: LD_VAR 0 13
51191: PUSH
51192: LD_INT 2
51194: PLUS
51195: ST_TO_ADDR
// continue ;
51196: GO 50992
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51198: LD_VAR 0 12
51202: PUSH
51203: LD_INT 1
51205: ARRAY
51206: PPUSH
51207: CALL_OW 266
51211: PUSH
51212: LD_INT 5
51214: EQUAL
51215: IFFALSE 51289
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51217: LD_VAR 0 12
51221: PUSH
51222: LD_INT 1
51224: ARRAY
51225: PPUSH
51226: CALL_OW 313
51230: PUSH
51231: LD_INT 3
51233: LESS
51234: IFFALSE 51270
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51236: LD_INT 0
51238: PPUSH
51239: LD_INT 5
51241: PUSH
51242: LD_INT 8
51244: PUSH
51245: LD_INT 9
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: LIST
51252: PUSH
51253: LD_VAR 0 17
51257: ARRAY
51258: PPUSH
51259: LD_VAR 0 4
51263: PPUSH
51264: CALL_OW 380
51268: GO 51287
// PrepareHuman ( false , i , skill ) ;
51270: LD_INT 0
51272: PPUSH
51273: LD_VAR 0 8
51277: PPUSH
51278: LD_VAR 0 4
51282: PPUSH
51283: CALL_OW 380
// end else
51287: GO 51306
// PrepareHuman ( false , i , skill ) ;
51289: LD_INT 0
51291: PPUSH
51292: LD_VAR 0 8
51296: PPUSH
51297: LD_VAR 0 4
51301: PPUSH
51302: CALL_OW 380
// un := CreateHuman ;
51306: LD_ADDR_VAR 0 14
51310: PUSH
51311: CALL_OW 44
51315: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51316: LD_ADDR_VAR 0 7
51320: PUSH
51321: LD_VAR 0 7
51325: PPUSH
51326: LD_INT 1
51328: PPUSH
51329: LD_VAR 0 14
51333: PPUSH
51334: CALL_OW 2
51338: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51339: LD_VAR 0 14
51343: PPUSH
51344: LD_VAR 0 12
51348: PUSH
51349: LD_INT 1
51351: ARRAY
51352: PPUSH
51353: CALL_OW 52
// end ;
51357: GO 50992
51359: POP
51360: POP
// end ;
51361: GO 50292
51363: POP
51364: POP
// result := result ^ buildings ;
51365: LD_ADDR_VAR 0 7
51369: PUSH
51370: LD_VAR 0 7
51374: PUSH
51375: LD_VAR 0 18
51379: ADD
51380: ST_TO_ADDR
// end else
51381: GO 51524
// begin for i = 1 to personel do
51383: LD_ADDR_VAR 0 8
51387: PUSH
51388: DOUBLE
51389: LD_INT 1
51391: DEC
51392: ST_TO_ADDR
51393: LD_VAR 0 6
51397: PUSH
51398: FOR_TO
51399: IFFALSE 51522
// begin if i > 4 then
51401: LD_VAR 0 8
51405: PUSH
51406: LD_INT 4
51408: GREATER
51409: IFFALSE 51413
// break ;
51411: GO 51522
// x := personel [ i ] ;
51413: LD_ADDR_VAR 0 13
51417: PUSH
51418: LD_VAR 0 6
51422: PUSH
51423: LD_VAR 0 8
51427: ARRAY
51428: ST_TO_ADDR
// if x = - 1 then
51429: LD_VAR 0 13
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: EQUAL
51438: IFFALSE 51442
// continue ;
51440: GO 51398
// PrepareHuman ( false , i , skill ) ;
51442: LD_INT 0
51444: PPUSH
51445: LD_VAR 0 8
51449: PPUSH
51450: LD_VAR 0 4
51454: PPUSH
51455: CALL_OW 380
// un := CreateHuman ;
51459: LD_ADDR_VAR 0 14
51463: PUSH
51464: CALL_OW 44
51468: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51469: LD_VAR 0 14
51473: PPUSH
51474: LD_VAR 0 1
51478: PPUSH
51479: CALL_OW 250
51483: PPUSH
51484: LD_VAR 0 1
51488: PPUSH
51489: CALL_OW 251
51493: PPUSH
51494: LD_INT 10
51496: PPUSH
51497: LD_INT 0
51499: PPUSH
51500: CALL_OW 50
// result := result ^ un ;
51504: LD_ADDR_VAR 0 7
51508: PUSH
51509: LD_VAR 0 7
51513: PUSH
51514: LD_VAR 0 14
51518: ADD
51519: ST_TO_ADDR
// end ;
51520: GO 51398
51522: POP
51523: POP
// end ; end ;
51524: LD_VAR 0 7
51528: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51529: LD_INT 0
51531: PPUSH
51532: PPUSH
51533: PPUSH
51534: PPUSH
51535: PPUSH
51536: PPUSH
51537: PPUSH
51538: PPUSH
51539: PPUSH
51540: PPUSH
51541: PPUSH
51542: PPUSH
51543: PPUSH
51544: PPUSH
51545: PPUSH
51546: PPUSH
// result := false ;
51547: LD_ADDR_VAR 0 3
51551: PUSH
51552: LD_INT 0
51554: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51555: LD_VAR 0 1
51559: NOT
51560: IFTRUE 51585
51562: PUSH
51563: LD_VAR 0 1
51567: PPUSH
51568: CALL_OW 266
51572: PUSH
51573: LD_INT 32
51575: PUSH
51576: LD_INT 33
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: IN
51583: NOT
51584: OR
51585: IFFALSE 51589
// exit ;
51587: GO 52724
// nat := GetNation ( tower ) ;
51589: LD_ADDR_VAR 0 12
51593: PUSH
51594: LD_VAR 0 1
51598: PPUSH
51599: CALL_OW 248
51603: ST_TO_ADDR
// side := GetSide ( tower ) ;
51604: LD_ADDR_VAR 0 16
51608: PUSH
51609: LD_VAR 0 1
51613: PPUSH
51614: CALL_OW 255
51618: ST_TO_ADDR
// x := GetX ( tower ) ;
51619: LD_ADDR_VAR 0 10
51623: PUSH
51624: LD_VAR 0 1
51628: PPUSH
51629: CALL_OW 250
51633: ST_TO_ADDR
// y := GetY ( tower ) ;
51634: LD_ADDR_VAR 0 11
51638: PUSH
51639: LD_VAR 0 1
51643: PPUSH
51644: CALL_OW 251
51648: ST_TO_ADDR
// if not x or not y then
51649: LD_VAR 0 10
51653: NOT
51654: IFTRUE 51663
51656: PUSH
51657: LD_VAR 0 11
51661: NOT
51662: OR
51663: IFFALSE 51667
// exit ;
51665: GO 52724
// weapon := 0 ;
51667: LD_ADDR_VAR 0 18
51671: PUSH
51672: LD_INT 0
51674: ST_TO_ADDR
// fac_list := [ ] ;
51675: LD_ADDR_VAR 0 17
51679: PUSH
51680: EMPTY
51681: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51682: LD_ADDR_VAR 0 6
51686: PUSH
51687: LD_VAR 0 1
51691: PPUSH
51692: CALL_OW 274
51696: PPUSH
51697: LD_VAR 0 2
51701: PPUSH
51702: LD_INT 0
51704: PPUSH
51705: CALL 49259 0 3
51709: PPUSH
51710: LD_INT 30
51712: PUSH
51713: LD_INT 3
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PPUSH
51720: CALL_OW 72
51724: ST_TO_ADDR
// if not factories then
51725: LD_VAR 0 6
51729: NOT
51730: IFFALSE 51734
// exit ;
51732: GO 52724
// for i in factories do
51734: LD_ADDR_VAR 0 8
51738: PUSH
51739: LD_VAR 0 6
51743: PUSH
51744: FOR_IN
51745: IFFALSE 51770
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51747: LD_ADDR_VAR 0 17
51751: PUSH
51752: LD_VAR 0 17
51756: PUSH
51757: LD_VAR 0 8
51761: PPUSH
51762: CALL_OW 478
51766: UNION
51767: ST_TO_ADDR
51768: GO 51744
51770: POP
51771: POP
// if not fac_list then
51772: LD_VAR 0 17
51776: NOT
51777: IFFALSE 51781
// exit ;
51779: GO 52724
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51781: LD_ADDR_VAR 0 5
51785: PUSH
51786: LD_INT 4
51788: PUSH
51789: LD_INT 5
51791: PUSH
51792: LD_INT 9
51794: PUSH
51795: LD_INT 10
51797: PUSH
51798: LD_INT 6
51800: PUSH
51801: LD_INT 7
51803: PUSH
51804: LD_INT 11
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 27
51818: PUSH
51819: LD_INT 28
51821: PUSH
51822: LD_INT 26
51824: PUSH
51825: LD_INT 30
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 43
51836: PUSH
51837: LD_INT 44
51839: PUSH
51840: LD_INT 46
51842: PUSH
51843: LD_INT 45
51845: PUSH
51846: LD_INT 47
51848: PUSH
51849: LD_INT 49
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: LIST
51864: PUSH
51865: LD_VAR 0 12
51869: ARRAY
51870: ST_TO_ADDR
// list := list isect fac_list ;
51871: LD_ADDR_VAR 0 5
51875: PUSH
51876: LD_VAR 0 5
51880: PUSH
51881: LD_VAR 0 17
51885: ISECT
51886: ST_TO_ADDR
// if not list then
51887: LD_VAR 0 5
51891: NOT
51892: IFFALSE 51896
// exit ;
51894: GO 52724
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51896: LD_VAR 0 12
51900: PUSH
51901: LD_INT 3
51903: EQUAL
51904: IFFALSE 51916
51906: PUSH
51907: LD_INT 49
51909: PUSH
51910: LD_VAR 0 5
51914: IN
51915: AND
51916: IFFALSE 51936
51918: PUSH
51919: LD_INT 31
51921: PPUSH
51922: LD_VAR 0 16
51926: PPUSH
51927: CALL_OW 321
51931: PUSH
51932: LD_INT 2
51934: EQUAL
51935: AND
51936: IFFALSE 51996
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51938: LD_INT 22
51940: PUSH
51941: LD_VAR 0 16
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 35
51952: PUSH
51953: LD_INT 49
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 91
51962: PUSH
51963: LD_VAR 0 1
51967: PUSH
51968: LD_INT 10
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: LIST
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: LIST
51980: PPUSH
51981: CALL_OW 69
51985: NOT
51986: IFFALSE 51996
// weapon := ru_time_lapser ;
51988: LD_ADDR_VAR 0 18
51992: PUSH
51993: LD_INT 49
51995: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51996: LD_VAR 0 12
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: LD_INT 2
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: IN
52011: IFFALSE 52035
52013: PUSH
52014: LD_INT 11
52016: PUSH
52017: LD_VAR 0 5
52021: IN
52022: IFTRUE 52034
52024: PUSH
52025: LD_INT 30
52027: PUSH
52028: LD_VAR 0 5
52032: IN
52033: OR
52034: AND
52035: IFFALSE 52055
52037: PUSH
52038: LD_INT 6
52040: PPUSH
52041: LD_VAR 0 16
52045: PPUSH
52046: CALL_OW 321
52050: PUSH
52051: LD_INT 2
52053: EQUAL
52054: AND
52055: IFFALSE 52222
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52057: LD_INT 22
52059: PUSH
52060: LD_VAR 0 16
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 2
52071: PUSH
52072: LD_INT 35
52074: PUSH
52075: LD_INT 11
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 35
52084: PUSH
52085: LD_INT 30
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 91
52099: PUSH
52100: LD_VAR 0 1
52104: PUSH
52105: LD_INT 18
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: LIST
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: LIST
52117: PPUSH
52118: CALL_OW 69
52122: NOT
52123: IFFALSE 52199
52125: PUSH
52126: LD_INT 22
52128: PUSH
52129: LD_VAR 0 16
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: LD_INT 30
52143: PUSH
52144: LD_INT 32
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 30
52153: PUSH
52154: LD_INT 33
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 91
52168: PUSH
52169: LD_VAR 0 1
52173: PUSH
52174: LD_INT 12
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: LIST
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: LIST
52186: PUSH
52187: EMPTY
52188: LIST
52189: PPUSH
52190: CALL_OW 69
52194: PUSH
52195: LD_INT 2
52197: GREATER
52198: AND
52199: IFFALSE 52222
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52201: LD_ADDR_VAR 0 18
52205: PUSH
52206: LD_INT 11
52208: PUSH
52209: LD_INT 30
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_VAR 0 12
52220: ARRAY
52221: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52222: LD_VAR 0 18
52226: NOT
52227: IFFALSE 52247
52229: PUSH
52230: LD_INT 40
52232: PPUSH
52233: LD_VAR 0 16
52237: PPUSH
52238: CALL_OW 321
52242: PUSH
52243: LD_INT 2
52245: EQUAL
52246: AND
52247: IFFALSE 52283
52249: PUSH
52250: LD_INT 7
52252: PUSH
52253: LD_VAR 0 5
52257: IN
52258: IFTRUE 52270
52260: PUSH
52261: LD_INT 28
52263: PUSH
52264: LD_VAR 0 5
52268: IN
52269: OR
52270: IFTRUE 52282
52272: PUSH
52273: LD_INT 45
52275: PUSH
52276: LD_VAR 0 5
52280: IN
52281: OR
52282: AND
52283: IFFALSE 52537
// begin hex := GetHexInfo ( x , y ) ;
52285: LD_ADDR_VAR 0 4
52289: PUSH
52290: LD_VAR 0 10
52294: PPUSH
52295: LD_VAR 0 11
52299: PPUSH
52300: CALL_OW 546
52304: ST_TO_ADDR
// if hex [ 1 ] then
52305: LD_VAR 0 4
52309: PUSH
52310: LD_INT 1
52312: ARRAY
52313: IFFALSE 52317
// exit ;
52315: GO 52724
// height := hex [ 2 ] ;
52317: LD_ADDR_VAR 0 15
52321: PUSH
52322: LD_VAR 0 4
52326: PUSH
52327: LD_INT 2
52329: ARRAY
52330: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52331: LD_ADDR_VAR 0 14
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: LD_INT 2
52341: PUSH
52342: LD_INT 3
52344: PUSH
52345: LD_INT 5
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: ST_TO_ADDR
// for i in tmp do
52354: LD_ADDR_VAR 0 8
52358: PUSH
52359: LD_VAR 0 14
52363: PUSH
52364: FOR_IN
52365: IFFALSE 52535
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52367: LD_ADDR_VAR 0 9
52371: PUSH
52372: LD_VAR 0 10
52376: PPUSH
52377: LD_VAR 0 8
52381: PPUSH
52382: LD_INT 5
52384: PPUSH
52385: CALL_OW 272
52389: PUSH
52390: LD_VAR 0 11
52394: PPUSH
52395: LD_VAR 0 8
52399: PPUSH
52400: LD_INT 5
52402: PPUSH
52403: CALL_OW 273
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52412: LD_VAR 0 9
52416: PUSH
52417: LD_INT 1
52419: ARRAY
52420: PPUSH
52421: LD_VAR 0 9
52425: PUSH
52426: LD_INT 2
52428: ARRAY
52429: PPUSH
52430: CALL_OW 488
52434: IFFALSE 52533
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52436: LD_ADDR_VAR 0 4
52440: PUSH
52441: LD_VAR 0 9
52445: PUSH
52446: LD_INT 1
52448: ARRAY
52449: PPUSH
52450: LD_VAR 0 9
52454: PUSH
52455: LD_INT 2
52457: ARRAY
52458: PPUSH
52459: CALL_OW 546
52463: ST_TO_ADDR
// if hex [ 1 ] then
52464: LD_VAR 0 4
52468: PUSH
52469: LD_INT 1
52471: ARRAY
52472: IFFALSE 52476
// continue ;
52474: GO 52364
// h := hex [ 2 ] ;
52476: LD_ADDR_VAR 0 13
52480: PUSH
52481: LD_VAR 0 4
52485: PUSH
52486: LD_INT 2
52488: ARRAY
52489: ST_TO_ADDR
// if h + 7 < height then
52490: LD_VAR 0 13
52494: PUSH
52495: LD_INT 7
52497: PLUS
52498: PUSH
52499: LD_VAR 0 15
52503: LESS
52504: IFFALSE 52533
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52506: LD_ADDR_VAR 0 18
52510: PUSH
52511: LD_INT 7
52513: PUSH
52514: LD_INT 28
52516: PUSH
52517: LD_INT 45
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: LIST
52524: PUSH
52525: LD_VAR 0 12
52529: ARRAY
52530: ST_TO_ADDR
// break ;
52531: GO 52535
// end ; end ; end ;
52533: GO 52364
52535: POP
52536: POP
// end ; if not weapon then
52537: LD_VAR 0 18
52541: NOT
52542: IFFALSE 52602
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52544: LD_ADDR_VAR 0 5
52548: PUSH
52549: LD_VAR 0 5
52553: PUSH
52554: LD_INT 11
52556: PUSH
52557: LD_INT 30
52559: PUSH
52560: LD_INT 49
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: LIST
52567: DIFF
52568: ST_TO_ADDR
// if not list then
52569: LD_VAR 0 5
52573: NOT
52574: IFFALSE 52578
// exit ;
52576: GO 52724
// weapon := list [ rand ( 1 , list ) ] ;
52578: LD_ADDR_VAR 0 18
52582: PUSH
52583: LD_VAR 0 5
52587: PUSH
52588: LD_INT 1
52590: PPUSH
52591: LD_VAR 0 5
52595: PPUSH
52596: CALL_OW 12
52600: ARRAY
52601: ST_TO_ADDR
// end ; if weapon then
52602: LD_VAR 0 18
52606: IFFALSE 52724
// begin tmp := CostOfWeapon ( weapon ) ;
52608: LD_ADDR_VAR 0 14
52612: PUSH
52613: LD_VAR 0 18
52617: PPUSH
52618: CALL_OW 451
52622: ST_TO_ADDR
// j := GetBase ( tower ) ;
52623: LD_ADDR_VAR 0 9
52627: PUSH
52628: LD_VAR 0 1
52632: PPUSH
52633: CALL_OW 274
52637: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52638: LD_VAR 0 9
52642: PPUSH
52643: LD_INT 1
52645: PPUSH
52646: CALL_OW 275
52650: PUSH
52651: LD_VAR 0 14
52655: PUSH
52656: LD_INT 1
52658: ARRAY
52659: GREATEREQUAL
52660: IFFALSE 52686
52662: PUSH
52663: LD_VAR 0 9
52667: PPUSH
52668: LD_INT 2
52670: PPUSH
52671: CALL_OW 275
52675: PUSH
52676: LD_VAR 0 14
52680: PUSH
52681: LD_INT 2
52683: ARRAY
52684: GREATEREQUAL
52685: AND
52686: IFFALSE 52712
52688: PUSH
52689: LD_VAR 0 9
52693: PPUSH
52694: LD_INT 3
52696: PPUSH
52697: CALL_OW 275
52701: PUSH
52702: LD_VAR 0 14
52706: PUSH
52707: LD_INT 3
52709: ARRAY
52710: GREATEREQUAL
52711: AND
52712: IFFALSE 52724
// result := weapon ;
52714: LD_ADDR_VAR 0 3
52718: PUSH
52719: LD_VAR 0 18
52723: ST_TO_ADDR
// end ; end ;
52724: LD_VAR 0 3
52728: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52729: LD_INT 0
52731: PPUSH
52732: PPUSH
// result := true ;
52733: LD_ADDR_VAR 0 3
52737: PUSH
52738: LD_INT 1
52740: ST_TO_ADDR
// if array1 = array2 then
52741: LD_VAR 0 1
52745: PUSH
52746: LD_VAR 0 2
52750: EQUAL
52751: IFFALSE 52811
// begin for i = 1 to array1 do
52753: LD_ADDR_VAR 0 4
52757: PUSH
52758: DOUBLE
52759: LD_INT 1
52761: DEC
52762: ST_TO_ADDR
52763: LD_VAR 0 1
52767: PUSH
52768: FOR_TO
52769: IFFALSE 52807
// if array1 [ i ] <> array2 [ i ] then
52771: LD_VAR 0 1
52775: PUSH
52776: LD_VAR 0 4
52780: ARRAY
52781: PUSH
52782: LD_VAR 0 2
52786: PUSH
52787: LD_VAR 0 4
52791: ARRAY
52792: NONEQUAL
52793: IFFALSE 52805
// begin result := false ;
52795: LD_ADDR_VAR 0 3
52799: PUSH
52800: LD_INT 0
52802: ST_TO_ADDR
// break ;
52803: GO 52807
// end ;
52805: GO 52768
52807: POP
52808: POP
// end else
52809: GO 52819
// result := false ;
52811: LD_ADDR_VAR 0 3
52815: PUSH
52816: LD_INT 0
52818: ST_TO_ADDR
// end ;
52819: LD_VAR 0 3
52823: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52824: LD_INT 0
52826: PPUSH
52827: PPUSH
// if not array1 or not array2 then
52828: LD_VAR 0 1
52832: NOT
52833: IFTRUE 52842
52835: PUSH
52836: LD_VAR 0 2
52840: NOT
52841: OR
52842: IFFALSE 52846
// exit ;
52844: GO 52910
// result := true ;
52846: LD_ADDR_VAR 0 3
52850: PUSH
52851: LD_INT 1
52853: ST_TO_ADDR
// for i = 1 to array1 do
52854: LD_ADDR_VAR 0 4
52858: PUSH
52859: DOUBLE
52860: LD_INT 1
52862: DEC
52863: ST_TO_ADDR
52864: LD_VAR 0 1
52868: PUSH
52869: FOR_TO
52870: IFFALSE 52908
// if array1 [ i ] <> array2 [ i ] then
52872: LD_VAR 0 1
52876: PUSH
52877: LD_VAR 0 4
52881: ARRAY
52882: PUSH
52883: LD_VAR 0 2
52887: PUSH
52888: LD_VAR 0 4
52892: ARRAY
52893: NONEQUAL
52894: IFFALSE 52906
// begin result := false ;
52896: LD_ADDR_VAR 0 3
52900: PUSH
52901: LD_INT 0
52903: ST_TO_ADDR
// break ;
52904: GO 52908
// end ;
52906: GO 52869
52908: POP
52909: POP
// end ;
52910: LD_VAR 0 3
52914: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52915: LD_INT 0
52917: PPUSH
52918: PPUSH
52919: PPUSH
// pom := GetBase ( fac ) ;
52920: LD_ADDR_VAR 0 5
52924: PUSH
52925: LD_VAR 0 1
52929: PPUSH
52930: CALL_OW 274
52934: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52935: LD_ADDR_VAR 0 4
52939: PUSH
52940: LD_VAR 0 2
52944: PUSH
52945: LD_INT 1
52947: ARRAY
52948: PPUSH
52949: LD_VAR 0 2
52953: PUSH
52954: LD_INT 2
52956: ARRAY
52957: PPUSH
52958: LD_VAR 0 2
52962: PUSH
52963: LD_INT 3
52965: ARRAY
52966: PPUSH
52967: LD_VAR 0 2
52971: PUSH
52972: LD_INT 4
52974: ARRAY
52975: PPUSH
52976: CALL_OW 449
52980: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52981: LD_ADDR_VAR 0 3
52985: PUSH
52986: LD_VAR 0 5
52990: PPUSH
52991: LD_INT 1
52993: PPUSH
52994: CALL_OW 275
52998: PUSH
52999: LD_VAR 0 4
53003: PUSH
53004: LD_INT 1
53006: ARRAY
53007: GREATEREQUAL
53008: IFFALSE 53034
53010: PUSH
53011: LD_VAR 0 5
53015: PPUSH
53016: LD_INT 2
53018: PPUSH
53019: CALL_OW 275
53023: PUSH
53024: LD_VAR 0 4
53028: PUSH
53029: LD_INT 2
53031: ARRAY
53032: GREATEREQUAL
53033: AND
53034: IFFALSE 53060
53036: PUSH
53037: LD_VAR 0 5
53041: PPUSH
53042: LD_INT 3
53044: PPUSH
53045: CALL_OW 275
53049: PUSH
53050: LD_VAR 0 4
53054: PUSH
53055: LD_INT 3
53057: ARRAY
53058: GREATEREQUAL
53059: AND
53060: ST_TO_ADDR
// end ;
53061: LD_VAR 0 3
53065: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53066: LD_INT 0
53068: PPUSH
53069: PPUSH
53070: PPUSH
53071: PPUSH
// pom := GetBase ( building ) ;
53072: LD_ADDR_VAR 0 3
53076: PUSH
53077: LD_VAR 0 1
53081: PPUSH
53082: CALL_OW 274
53086: ST_TO_ADDR
// if not pom then
53087: LD_VAR 0 3
53091: NOT
53092: IFFALSE 53096
// exit ;
53094: GO 53270
// btype := GetBType ( building ) ;
53096: LD_ADDR_VAR 0 5
53100: PUSH
53101: LD_VAR 0 1
53105: PPUSH
53106: CALL_OW 266
53110: ST_TO_ADDR
// if btype = b_armoury then
53111: LD_VAR 0 5
53115: PUSH
53116: LD_INT 4
53118: EQUAL
53119: IFFALSE 53129
// btype := b_barracks ;
53121: LD_ADDR_VAR 0 5
53125: PUSH
53126: LD_INT 5
53128: ST_TO_ADDR
// if btype = b_depot then
53129: LD_VAR 0 5
53133: PUSH
53134: LD_INT 0
53136: EQUAL
53137: IFFALSE 53147
// btype := b_warehouse ;
53139: LD_ADDR_VAR 0 5
53143: PUSH
53144: LD_INT 1
53146: ST_TO_ADDR
// if btype = b_workshop then
53147: LD_VAR 0 5
53151: PUSH
53152: LD_INT 2
53154: EQUAL
53155: IFFALSE 53165
// btype := b_factory ;
53157: LD_ADDR_VAR 0 5
53161: PUSH
53162: LD_INT 3
53164: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53165: LD_ADDR_VAR 0 4
53169: PUSH
53170: LD_VAR 0 5
53174: PPUSH
53175: LD_VAR 0 1
53179: PPUSH
53180: CALL_OW 248
53184: PPUSH
53185: CALL_OW 450
53189: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53190: LD_ADDR_VAR 0 2
53194: PUSH
53195: LD_VAR 0 3
53199: PPUSH
53200: LD_INT 1
53202: PPUSH
53203: CALL_OW 275
53207: PUSH
53208: LD_VAR 0 4
53212: PUSH
53213: LD_INT 1
53215: ARRAY
53216: GREATEREQUAL
53217: IFFALSE 53243
53219: PUSH
53220: LD_VAR 0 3
53224: PPUSH
53225: LD_INT 2
53227: PPUSH
53228: CALL_OW 275
53232: PUSH
53233: LD_VAR 0 4
53237: PUSH
53238: LD_INT 2
53240: ARRAY
53241: GREATEREQUAL
53242: AND
53243: IFFALSE 53269
53245: PUSH
53246: LD_VAR 0 3
53250: PPUSH
53251: LD_INT 3
53253: PPUSH
53254: CALL_OW 275
53258: PUSH
53259: LD_VAR 0 4
53263: PUSH
53264: LD_INT 3
53266: ARRAY
53267: GREATEREQUAL
53268: AND
53269: ST_TO_ADDR
// end ;
53270: LD_VAR 0 2
53274: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53275: LD_INT 0
53277: PPUSH
53278: PPUSH
53279: PPUSH
// pom := GetBase ( building ) ;
53280: LD_ADDR_VAR 0 4
53284: PUSH
53285: LD_VAR 0 1
53289: PPUSH
53290: CALL_OW 274
53294: ST_TO_ADDR
// if not pom then
53295: LD_VAR 0 4
53299: NOT
53300: IFFALSE 53304
// exit ;
53302: GO 53409
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53304: LD_ADDR_VAR 0 5
53308: PUSH
53309: LD_VAR 0 2
53313: PPUSH
53314: LD_VAR 0 1
53318: PPUSH
53319: CALL_OW 248
53323: PPUSH
53324: CALL_OW 450
53328: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53329: LD_ADDR_VAR 0 3
53333: PUSH
53334: LD_VAR 0 4
53338: PPUSH
53339: LD_INT 1
53341: PPUSH
53342: CALL_OW 275
53346: PUSH
53347: LD_VAR 0 5
53351: PUSH
53352: LD_INT 1
53354: ARRAY
53355: GREATEREQUAL
53356: IFFALSE 53382
53358: PUSH
53359: LD_VAR 0 4
53363: PPUSH
53364: LD_INT 2
53366: PPUSH
53367: CALL_OW 275
53371: PUSH
53372: LD_VAR 0 5
53376: PUSH
53377: LD_INT 2
53379: ARRAY
53380: GREATEREQUAL
53381: AND
53382: IFFALSE 53408
53384: PUSH
53385: LD_VAR 0 4
53389: PPUSH
53390: LD_INT 3
53392: PPUSH
53393: CALL_OW 275
53397: PUSH
53398: LD_VAR 0 5
53402: PUSH
53403: LD_INT 3
53405: ARRAY
53406: GREATEREQUAL
53407: AND
53408: ST_TO_ADDR
// end ;
53409: LD_VAR 0 3
53413: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53414: LD_INT 0
53416: PPUSH
53417: PPUSH
53418: PPUSH
53419: PPUSH
53420: PPUSH
53421: PPUSH
53422: PPUSH
53423: PPUSH
53424: PPUSH
53425: PPUSH
53426: PPUSH
// result := false ;
53427: LD_ADDR_VAR 0 8
53431: PUSH
53432: LD_INT 0
53434: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53435: LD_VAR 0 5
53439: NOT
53440: IFTRUE 53449
53442: PUSH
53443: LD_VAR 0 1
53447: NOT
53448: OR
53449: IFTRUE 53458
53451: PUSH
53452: LD_VAR 0 2
53456: NOT
53457: OR
53458: IFTRUE 53467
53460: PUSH
53461: LD_VAR 0 3
53465: NOT
53466: OR
53467: IFFALSE 53471
// exit ;
53469: GO 54297
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53471: LD_ADDR_VAR 0 14
53475: PUSH
53476: LD_VAR 0 1
53480: PPUSH
53481: LD_VAR 0 2
53485: PPUSH
53486: LD_VAR 0 3
53490: PPUSH
53491: LD_VAR 0 4
53495: PPUSH
53496: LD_VAR 0 5
53500: PUSH
53501: LD_INT 1
53503: ARRAY
53504: PPUSH
53505: CALL_OW 248
53509: PPUSH
53510: LD_INT 0
53512: PPUSH
53513: CALL 55578 0 6
53517: ST_TO_ADDR
// if not hexes then
53518: LD_VAR 0 14
53522: NOT
53523: IFFALSE 53527
// exit ;
53525: GO 54297
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53527: LD_ADDR_VAR 0 17
53531: PUSH
53532: LD_VAR 0 5
53536: PPUSH
53537: LD_INT 22
53539: PUSH
53540: LD_VAR 0 13
53544: PPUSH
53545: CALL_OW 255
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: LD_INT 30
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 30
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: LIST
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PPUSH
53586: CALL_OW 72
53590: ST_TO_ADDR
// for i = 1 to hexes do
53591: LD_ADDR_VAR 0 9
53595: PUSH
53596: DOUBLE
53597: LD_INT 1
53599: DEC
53600: ST_TO_ADDR
53601: LD_VAR 0 14
53605: PUSH
53606: FOR_TO
53607: IFFALSE 54295
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53609: LD_ADDR_VAR 0 13
53613: PUSH
53614: LD_VAR 0 14
53618: PUSH
53619: LD_VAR 0 9
53623: ARRAY
53624: PUSH
53625: LD_INT 1
53627: ARRAY
53628: PPUSH
53629: LD_VAR 0 14
53633: PUSH
53634: LD_VAR 0 9
53638: ARRAY
53639: PUSH
53640: LD_INT 2
53642: ARRAY
53643: PPUSH
53644: CALL_OW 428
53648: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53649: LD_VAR 0 14
53653: PUSH
53654: LD_VAR 0 9
53658: ARRAY
53659: PUSH
53660: LD_INT 1
53662: ARRAY
53663: PPUSH
53664: LD_VAR 0 14
53668: PUSH
53669: LD_VAR 0 9
53673: ARRAY
53674: PUSH
53675: LD_INT 2
53677: ARRAY
53678: PPUSH
53679: CALL_OW 351
53683: IFTRUE 53722
53685: PUSH
53686: LD_VAR 0 14
53690: PUSH
53691: LD_VAR 0 9
53695: ARRAY
53696: PUSH
53697: LD_INT 1
53699: ARRAY
53700: PPUSH
53701: LD_VAR 0 14
53705: PUSH
53706: LD_VAR 0 9
53710: ARRAY
53711: PUSH
53712: LD_INT 2
53714: ARRAY
53715: PPUSH
53716: CALL_OW 488
53720: NOT
53721: OR
53722: IFTRUE 53739
53724: PUSH
53725: LD_VAR 0 13
53729: PPUSH
53730: CALL_OW 247
53734: PUSH
53735: LD_INT 3
53737: EQUAL
53738: OR
53739: IFFALSE 53745
// exit ;
53741: POP
53742: POP
53743: GO 54297
// if not tmp then
53745: LD_VAR 0 13
53749: NOT
53750: IFFALSE 53754
// continue ;
53752: GO 53606
// result := true ;
53754: LD_ADDR_VAR 0 8
53758: PUSH
53759: LD_INT 1
53761: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53762: LD_VAR 0 6
53766: IFFALSE 53783
53768: PUSH
53769: LD_VAR 0 13
53773: PPUSH
53774: CALL_OW 247
53778: PUSH
53779: LD_INT 2
53781: EQUAL
53782: AND
53783: IFFALSE 53800
53785: PUSH
53786: LD_VAR 0 13
53790: PPUSH
53791: CALL_OW 263
53795: PUSH
53796: LD_INT 1
53798: EQUAL
53799: AND
53800: IFFALSE 53964
// begin if IsDrivenBy ( tmp ) then
53802: LD_VAR 0 13
53806: PPUSH
53807: CALL_OW 311
53811: IFFALSE 53815
// continue ;
53813: GO 53606
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53815: LD_VAR 0 6
53819: PPUSH
53820: LD_INT 3
53822: PUSH
53823: LD_INT 60
53825: PUSH
53826: EMPTY
53827: LIST
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 3
53835: PUSH
53836: LD_INT 55
53838: PUSH
53839: EMPTY
53840: LIST
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PPUSH
53850: CALL_OW 72
53854: IFFALSE 53962
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53856: LD_ADDR_VAR 0 18
53860: PUSH
53861: LD_VAR 0 6
53865: PPUSH
53866: LD_INT 3
53868: PUSH
53869: LD_INT 60
53871: PUSH
53872: EMPTY
53873: LIST
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 3
53881: PUSH
53882: LD_INT 55
53884: PUSH
53885: EMPTY
53886: LIST
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PPUSH
53896: CALL_OW 72
53900: PUSH
53901: LD_INT 1
53903: ARRAY
53904: ST_TO_ADDR
// if IsInUnit ( driver ) then
53905: LD_VAR 0 18
53909: PPUSH
53910: CALL_OW 310
53914: IFFALSE 53925
// ComExit ( driver ) ;
53916: LD_VAR 0 18
53920: PPUSH
53921: CALL 79568 0 1
// AddComEnterUnit ( driver , tmp ) ;
53925: LD_VAR 0 18
53929: PPUSH
53930: LD_VAR 0 13
53934: PPUSH
53935: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53939: LD_VAR 0 18
53943: PPUSH
53944: LD_VAR 0 7
53948: PPUSH
53949: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53953: LD_VAR 0 18
53957: PPUSH
53958: CALL_OW 181
// end ; continue ;
53962: GO 53606
// end ; if not cleaners or not tmp in cleaners then
53964: LD_VAR 0 6
53968: NOT
53969: IFTRUE 53984
53971: PUSH
53972: LD_VAR 0 13
53976: PUSH
53977: LD_VAR 0 6
53981: IN
53982: NOT
53983: OR
53984: IFFALSE 54293
// begin if dep then
53986: LD_VAR 0 17
53990: IFFALSE 54126
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53992: LD_ADDR_VAR 0 16
53996: PUSH
53997: LD_VAR 0 17
54001: PUSH
54002: LD_INT 1
54004: ARRAY
54005: PPUSH
54006: CALL_OW 250
54010: PPUSH
54011: LD_VAR 0 17
54015: PUSH
54016: LD_INT 1
54018: ARRAY
54019: PPUSH
54020: CALL_OW 254
54024: PPUSH
54025: LD_INT 5
54027: PPUSH
54028: CALL_OW 272
54032: PUSH
54033: LD_VAR 0 17
54037: PUSH
54038: LD_INT 1
54040: ARRAY
54041: PPUSH
54042: CALL_OW 251
54046: PPUSH
54047: LD_VAR 0 17
54051: PUSH
54052: LD_INT 1
54054: ARRAY
54055: PPUSH
54056: CALL_OW 254
54060: PPUSH
54061: LD_INT 5
54063: PPUSH
54064: CALL_OW 273
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54073: LD_VAR 0 16
54077: PUSH
54078: LD_INT 1
54080: ARRAY
54081: PPUSH
54082: LD_VAR 0 16
54086: PUSH
54087: LD_INT 2
54089: ARRAY
54090: PPUSH
54091: CALL_OW 488
54095: IFFALSE 54126
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54097: LD_VAR 0 13
54101: PPUSH
54102: LD_VAR 0 16
54106: PUSH
54107: LD_INT 1
54109: ARRAY
54110: PPUSH
54111: LD_VAR 0 16
54115: PUSH
54116: LD_INT 2
54118: ARRAY
54119: PPUSH
54120: CALL_OW 111
// continue ;
54124: GO 53606
// end ; end ; r := GetDir ( tmp ) ;
54126: LD_ADDR_VAR 0 15
54130: PUSH
54131: LD_VAR 0 13
54135: PPUSH
54136: CALL_OW 254
54140: ST_TO_ADDR
// if r = 5 then
54141: LD_VAR 0 15
54145: PUSH
54146: LD_INT 5
54148: EQUAL
54149: IFFALSE 54159
// r := 0 ;
54151: LD_ADDR_VAR 0 15
54155: PUSH
54156: LD_INT 0
54158: ST_TO_ADDR
// for j = r to 5 do
54159: LD_ADDR_VAR 0 10
54163: PUSH
54164: DOUBLE
54165: LD_VAR 0 15
54169: DEC
54170: ST_TO_ADDR
54171: LD_INT 5
54173: PUSH
54174: FOR_TO
54175: IFFALSE 54291
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54177: LD_ADDR_VAR 0 11
54181: PUSH
54182: LD_VAR 0 13
54186: PPUSH
54187: CALL_OW 250
54191: PPUSH
54192: LD_VAR 0 10
54196: PPUSH
54197: LD_INT 2
54199: PPUSH
54200: CALL_OW 272
54204: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54205: LD_ADDR_VAR 0 12
54209: PUSH
54210: LD_VAR 0 13
54214: PPUSH
54215: CALL_OW 251
54219: PPUSH
54220: LD_VAR 0 10
54224: PPUSH
54225: LD_INT 2
54227: PPUSH
54228: CALL_OW 273
54232: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54233: LD_VAR 0 11
54237: PPUSH
54238: LD_VAR 0 12
54242: PPUSH
54243: CALL_OW 488
54247: IFFALSE 54266
54249: PUSH
54250: LD_VAR 0 11
54254: PPUSH
54255: LD_VAR 0 12
54259: PPUSH
54260: CALL_OW 428
54264: NOT
54265: AND
54266: IFFALSE 54289
// begin ComMoveXY ( tmp , _x , _y ) ;
54268: LD_VAR 0 13
54272: PPUSH
54273: LD_VAR 0 11
54277: PPUSH
54278: LD_VAR 0 12
54282: PPUSH
54283: CALL_OW 111
// break ;
54287: GO 54291
// end ; end ;
54289: GO 54174
54291: POP
54292: POP
// end ; end ;
54293: GO 53606
54295: POP
54296: POP
// end ;
54297: LD_VAR 0 8
54301: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54302: LD_INT 0
54304: PPUSH
// result := true ;
54305: LD_ADDR_VAR 0 3
54309: PUSH
54310: LD_INT 1
54312: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54313: LD_VAR 0 2
54317: PUSH
54318: LD_INT 24
54320: DOUBLE
54321: EQUAL
54322: IFTRUE 54332
54324: LD_INT 33
54326: DOUBLE
54327: EQUAL
54328: IFTRUE 54332
54330: GO 54357
54332: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54333: LD_ADDR_VAR 0 3
54337: PUSH
54338: LD_INT 32
54340: PPUSH
54341: LD_VAR 0 1
54345: PPUSH
54346: CALL_OW 321
54350: PUSH
54351: LD_INT 2
54353: EQUAL
54354: ST_TO_ADDR
54355: GO 54673
54357: LD_INT 20
54359: DOUBLE
54360: EQUAL
54361: IFTRUE 54365
54363: GO 54390
54365: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54366: LD_ADDR_VAR 0 3
54370: PUSH
54371: LD_INT 6
54373: PPUSH
54374: LD_VAR 0 1
54378: PPUSH
54379: CALL_OW 321
54383: PUSH
54384: LD_INT 2
54386: EQUAL
54387: ST_TO_ADDR
54388: GO 54673
54390: LD_INT 22
54392: DOUBLE
54393: EQUAL
54394: IFTRUE 54404
54396: LD_INT 36
54398: DOUBLE
54399: EQUAL
54400: IFTRUE 54404
54402: GO 54429
54404: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54405: LD_ADDR_VAR 0 3
54409: PUSH
54410: LD_INT 15
54412: PPUSH
54413: LD_VAR 0 1
54417: PPUSH
54418: CALL_OW 321
54422: PUSH
54423: LD_INT 2
54425: EQUAL
54426: ST_TO_ADDR
54427: GO 54673
54429: LD_INT 30
54431: DOUBLE
54432: EQUAL
54433: IFTRUE 54437
54435: GO 54462
54437: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54438: LD_ADDR_VAR 0 3
54442: PUSH
54443: LD_INT 20
54445: PPUSH
54446: LD_VAR 0 1
54450: PPUSH
54451: CALL_OW 321
54455: PUSH
54456: LD_INT 2
54458: EQUAL
54459: ST_TO_ADDR
54460: GO 54673
54462: LD_INT 28
54464: DOUBLE
54465: EQUAL
54466: IFTRUE 54476
54468: LD_INT 21
54470: DOUBLE
54471: EQUAL
54472: IFTRUE 54476
54474: GO 54501
54476: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54477: LD_ADDR_VAR 0 3
54481: PUSH
54482: LD_INT 21
54484: PPUSH
54485: LD_VAR 0 1
54489: PPUSH
54490: CALL_OW 321
54494: PUSH
54495: LD_INT 2
54497: EQUAL
54498: ST_TO_ADDR
54499: GO 54673
54501: LD_INT 16
54503: DOUBLE
54504: EQUAL
54505: IFTRUE 54509
54507: GO 54534
54509: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54510: LD_ADDR_VAR 0 3
54514: PUSH
54515: LD_INT 84
54517: PPUSH
54518: LD_VAR 0 1
54522: PPUSH
54523: CALL_OW 321
54527: PUSH
54528: LD_INT 2
54530: EQUAL
54531: ST_TO_ADDR
54532: GO 54673
54534: LD_INT 19
54536: DOUBLE
54537: EQUAL
54538: IFTRUE 54548
54540: LD_INT 23
54542: DOUBLE
54543: EQUAL
54544: IFTRUE 54548
54546: GO 54573
54548: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54549: LD_ADDR_VAR 0 3
54553: PUSH
54554: LD_INT 83
54556: PPUSH
54557: LD_VAR 0 1
54561: PPUSH
54562: CALL_OW 321
54566: PUSH
54567: LD_INT 2
54569: EQUAL
54570: ST_TO_ADDR
54571: GO 54673
54573: LD_INT 17
54575: DOUBLE
54576: EQUAL
54577: IFTRUE 54581
54579: GO 54606
54581: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54582: LD_ADDR_VAR 0 3
54586: PUSH
54587: LD_INT 39
54589: PPUSH
54590: LD_VAR 0 1
54594: PPUSH
54595: CALL_OW 321
54599: PUSH
54600: LD_INT 2
54602: EQUAL
54603: ST_TO_ADDR
54604: GO 54673
54606: LD_INT 18
54608: DOUBLE
54609: EQUAL
54610: IFTRUE 54614
54612: GO 54639
54614: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54615: LD_ADDR_VAR 0 3
54619: PUSH
54620: LD_INT 40
54622: PPUSH
54623: LD_VAR 0 1
54627: PPUSH
54628: CALL_OW 321
54632: PUSH
54633: LD_INT 2
54635: EQUAL
54636: ST_TO_ADDR
54637: GO 54673
54639: LD_INT 27
54641: DOUBLE
54642: EQUAL
54643: IFTRUE 54647
54645: GO 54672
54647: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54648: LD_ADDR_VAR 0 3
54652: PUSH
54653: LD_INT 35
54655: PPUSH
54656: LD_VAR 0 1
54660: PPUSH
54661: CALL_OW 321
54665: PUSH
54666: LD_INT 2
54668: EQUAL
54669: ST_TO_ADDR
54670: GO 54673
54672: POP
// end ;
54673: LD_VAR 0 3
54677: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54678: LD_INT 0
54680: PPUSH
54681: PPUSH
54682: PPUSH
54683: PPUSH
54684: PPUSH
54685: PPUSH
54686: PPUSH
54687: PPUSH
54688: PPUSH
54689: PPUSH
54690: PPUSH
// result := false ;
54691: LD_ADDR_VAR 0 6
54695: PUSH
54696: LD_INT 0
54698: ST_TO_ADDR
// if btype = b_depot then
54699: LD_VAR 0 2
54703: PUSH
54704: LD_INT 0
54706: EQUAL
54707: IFFALSE 54719
// begin result := true ;
54709: LD_ADDR_VAR 0 6
54713: PUSH
54714: LD_INT 1
54716: ST_TO_ADDR
// exit ;
54717: GO 55573
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54719: LD_VAR 0 1
54723: NOT
54724: IFTRUE 54749
54726: PUSH
54727: LD_VAR 0 1
54731: PPUSH
54732: CALL_OW 266
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: IN
54747: NOT
54748: OR
54749: IFTRUE 54758
54751: PUSH
54752: LD_VAR 0 2
54756: NOT
54757: OR
54758: IFTRUE 54794
54760: PUSH
54761: LD_VAR 0 5
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: LD_INT 2
54774: PUSH
54775: LD_INT 3
54777: PUSH
54778: LD_INT 4
54780: PUSH
54781: LD_INT 5
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: IN
54792: NOT
54793: OR
54794: IFTRUE 54813
54796: PUSH
54797: LD_VAR 0 3
54801: PPUSH
54802: LD_VAR 0 4
54806: PPUSH
54807: CALL_OW 488
54811: NOT
54812: OR
54813: IFFALSE 54817
// exit ;
54815: GO 55573
// side := GetSide ( depot ) ;
54817: LD_ADDR_VAR 0 9
54821: PUSH
54822: LD_VAR 0 1
54826: PPUSH
54827: CALL_OW 255
54831: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54832: LD_VAR 0 9
54836: PPUSH
54837: LD_VAR 0 2
54841: PPUSH
54842: CALL 54302 0 2
54846: NOT
54847: IFFALSE 54851
// exit ;
54849: GO 55573
// pom := GetBase ( depot ) ;
54851: LD_ADDR_VAR 0 10
54855: PUSH
54856: LD_VAR 0 1
54860: PPUSH
54861: CALL_OW 274
54865: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54866: LD_ADDR_VAR 0 11
54870: PUSH
54871: LD_VAR 0 2
54875: PPUSH
54876: LD_VAR 0 1
54880: PPUSH
54881: CALL_OW 248
54885: PPUSH
54886: CALL_OW 450
54890: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54891: LD_VAR 0 10
54895: PPUSH
54896: LD_INT 1
54898: PPUSH
54899: CALL_OW 275
54903: PUSH
54904: LD_VAR 0 11
54908: PUSH
54909: LD_INT 1
54911: ARRAY
54912: GREATEREQUAL
54913: IFFALSE 54939
54915: PUSH
54916: LD_VAR 0 10
54920: PPUSH
54921: LD_INT 2
54923: PPUSH
54924: CALL_OW 275
54928: PUSH
54929: LD_VAR 0 11
54933: PUSH
54934: LD_INT 2
54936: ARRAY
54937: GREATEREQUAL
54938: AND
54939: IFFALSE 54965
54941: PUSH
54942: LD_VAR 0 10
54946: PPUSH
54947: LD_INT 3
54949: PPUSH
54950: CALL_OW 275
54954: PUSH
54955: LD_VAR 0 11
54959: PUSH
54960: LD_INT 3
54962: ARRAY
54963: GREATEREQUAL
54964: AND
54965: NOT
54966: IFFALSE 54970
// exit ;
54968: GO 55573
// if GetBType ( depot ) = b_depot then
54970: LD_VAR 0 1
54974: PPUSH
54975: CALL_OW 266
54979: PUSH
54980: LD_INT 0
54982: EQUAL
54983: IFFALSE 54995
// dist := 28 else
54985: LD_ADDR_VAR 0 14
54989: PUSH
54990: LD_INT 28
54992: ST_TO_ADDR
54993: GO 55003
// dist := 36 ;
54995: LD_ADDR_VAR 0 14
54999: PUSH
55000: LD_INT 36
55002: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55003: LD_VAR 0 1
55007: PPUSH
55008: LD_VAR 0 3
55012: PPUSH
55013: LD_VAR 0 4
55017: PPUSH
55018: CALL_OW 297
55022: PUSH
55023: LD_VAR 0 14
55027: GREATER
55028: IFFALSE 55032
// exit ;
55030: GO 55573
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55032: LD_ADDR_VAR 0 12
55036: PUSH
55037: LD_VAR 0 2
55041: PPUSH
55042: LD_VAR 0 3
55046: PPUSH
55047: LD_VAR 0 4
55051: PPUSH
55052: LD_VAR 0 5
55056: PPUSH
55057: LD_VAR 0 1
55061: PPUSH
55062: CALL_OW 248
55066: PPUSH
55067: LD_INT 0
55069: PPUSH
55070: CALL 55578 0 6
55074: ST_TO_ADDR
// if not hexes then
55075: LD_VAR 0 12
55079: NOT
55080: IFFALSE 55084
// exit ;
55082: GO 55573
// hex := GetHexInfo ( x , y ) ;
55084: LD_ADDR_VAR 0 15
55088: PUSH
55089: LD_VAR 0 3
55093: PPUSH
55094: LD_VAR 0 4
55098: PPUSH
55099: CALL_OW 546
55103: ST_TO_ADDR
// if hex [ 1 ] then
55104: LD_VAR 0 15
55108: PUSH
55109: LD_INT 1
55111: ARRAY
55112: IFFALSE 55116
// exit ;
55114: GO 55573
// height := hex [ 2 ] ;
55116: LD_ADDR_VAR 0 13
55120: PUSH
55121: LD_VAR 0 15
55125: PUSH
55126: LD_INT 2
55128: ARRAY
55129: ST_TO_ADDR
// for i = 1 to hexes do
55130: LD_ADDR_VAR 0 7
55134: PUSH
55135: DOUBLE
55136: LD_INT 1
55138: DEC
55139: ST_TO_ADDR
55140: LD_VAR 0 12
55144: PUSH
55145: FOR_TO
55146: IFFALSE 55490
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55148: LD_VAR 0 12
55152: PUSH
55153: LD_VAR 0 7
55157: ARRAY
55158: PUSH
55159: LD_INT 1
55161: ARRAY
55162: PPUSH
55163: LD_VAR 0 12
55167: PUSH
55168: LD_VAR 0 7
55172: ARRAY
55173: PUSH
55174: LD_INT 2
55176: ARRAY
55177: PPUSH
55178: CALL_OW 488
55182: NOT
55183: IFTRUE 55225
55185: PUSH
55186: LD_VAR 0 12
55190: PUSH
55191: LD_VAR 0 7
55195: ARRAY
55196: PUSH
55197: LD_INT 1
55199: ARRAY
55200: PPUSH
55201: LD_VAR 0 12
55205: PUSH
55206: LD_VAR 0 7
55210: ARRAY
55211: PUSH
55212: LD_INT 2
55214: ARRAY
55215: PPUSH
55216: CALL_OW 428
55220: PUSH
55221: LD_INT 0
55223: GREATER
55224: OR
55225: IFTRUE 55263
55227: PUSH
55228: LD_VAR 0 12
55232: PUSH
55233: LD_VAR 0 7
55237: ARRAY
55238: PUSH
55239: LD_INT 1
55241: ARRAY
55242: PPUSH
55243: LD_VAR 0 12
55247: PUSH
55248: LD_VAR 0 7
55252: ARRAY
55253: PUSH
55254: LD_INT 2
55256: ARRAY
55257: PPUSH
55258: CALL_OW 351
55262: OR
55263: IFFALSE 55269
// exit ;
55265: POP
55266: POP
55267: GO 55573
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55269: LD_ADDR_VAR 0 8
55273: PUSH
55274: LD_VAR 0 12
55278: PUSH
55279: LD_VAR 0 7
55283: ARRAY
55284: PUSH
55285: LD_INT 1
55287: ARRAY
55288: PPUSH
55289: LD_VAR 0 12
55293: PUSH
55294: LD_VAR 0 7
55298: ARRAY
55299: PUSH
55300: LD_INT 2
55302: ARRAY
55303: PPUSH
55304: CALL_OW 546
55308: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55309: LD_VAR 0 8
55313: PUSH
55314: LD_INT 1
55316: ARRAY
55317: IFTRUE 55339
55319: PUSH
55320: LD_VAR 0 8
55324: PUSH
55325: LD_INT 2
55327: ARRAY
55328: PUSH
55329: LD_VAR 0 13
55333: PUSH
55334: LD_INT 2
55336: PLUS
55337: GREATER
55338: OR
55339: IFTRUE 55361
55341: PUSH
55342: LD_VAR 0 8
55346: PUSH
55347: LD_INT 2
55349: ARRAY
55350: PUSH
55351: LD_VAR 0 13
55355: PUSH
55356: LD_INT 2
55358: MINUS
55359: LESS
55360: OR
55361: IFTRUE 55429
55363: PUSH
55364: LD_VAR 0 8
55368: PUSH
55369: LD_INT 3
55371: ARRAY
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: LD_INT 8
55378: PUSH
55379: LD_INT 9
55381: PUSH
55382: LD_INT 10
55384: PUSH
55385: LD_INT 11
55387: PUSH
55388: LD_INT 12
55390: PUSH
55391: LD_INT 13
55393: PUSH
55394: LD_INT 16
55396: PUSH
55397: LD_INT 17
55399: PUSH
55400: LD_INT 18
55402: PUSH
55403: LD_INT 19
55405: PUSH
55406: LD_INT 20
55408: PUSH
55409: LD_INT 21
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: IN
55427: NOT
55428: OR
55429: IFTRUE 55442
55431: PUSH
55432: LD_VAR 0 8
55436: PUSH
55437: LD_INT 5
55439: ARRAY
55440: NOT
55441: OR
55442: IFTRUE 55482
55444: PUSH
55445: LD_VAR 0 8
55449: PUSH
55450: LD_INT 6
55452: ARRAY
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: LD_INT 7
55462: PUSH
55463: LD_INT 9
55465: PUSH
55466: LD_INT 10
55468: PUSH
55469: LD_INT 11
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: IN
55480: NOT
55481: OR
55482: IFFALSE 55488
// exit ;
55484: POP
55485: POP
55486: GO 55573
// end ;
55488: GO 55145
55490: POP
55491: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55492: LD_VAR 0 9
55496: PPUSH
55497: LD_VAR 0 3
55501: PPUSH
55502: LD_VAR 0 4
55506: PPUSH
55507: LD_INT 20
55509: PPUSH
55510: CALL 47392 0 4
55514: PUSH
55515: LD_INT 4
55517: ARRAY
55518: IFFALSE 55522
// exit ;
55520: GO 55573
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55522: LD_VAR 0 2
55526: PUSH
55527: LD_INT 29
55529: PUSH
55530: LD_INT 30
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: IN
55537: IFFALSE 55561
55539: PUSH
55540: LD_VAR 0 3
55544: PPUSH
55545: LD_VAR 0 4
55549: PPUSH
55550: LD_VAR 0 9
55554: PPUSH
55555: CALL_OW 440
55559: NOT
55560: AND
55561: IFFALSE 55565
// exit ;
55563: GO 55573
// result := true ;
55565: LD_ADDR_VAR 0 6
55569: PUSH
55570: LD_INT 1
55572: ST_TO_ADDR
// end ;
55573: LD_VAR 0 6
55577: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55578: LD_INT 0
55580: PPUSH
55581: PPUSH
55582: PPUSH
55583: PPUSH
55584: PPUSH
55585: PPUSH
55586: PPUSH
55587: PPUSH
55588: PPUSH
55589: PPUSH
55590: PPUSH
55591: PPUSH
55592: PPUSH
55593: PPUSH
55594: PPUSH
55595: PPUSH
55596: PPUSH
55597: PPUSH
55598: PPUSH
55599: PPUSH
55600: PPUSH
55601: PPUSH
55602: PPUSH
55603: PPUSH
55604: PPUSH
55605: PPUSH
55606: PPUSH
55607: PPUSH
55608: PPUSH
55609: PPUSH
55610: PPUSH
55611: PPUSH
55612: PPUSH
55613: PPUSH
55614: PPUSH
55615: PPUSH
55616: PPUSH
55617: PPUSH
55618: PPUSH
55619: PPUSH
55620: PPUSH
55621: PPUSH
55622: PPUSH
55623: PPUSH
55624: PPUSH
55625: PPUSH
55626: PPUSH
55627: PPUSH
55628: PPUSH
55629: PPUSH
55630: PPUSH
55631: PPUSH
55632: PPUSH
55633: PPUSH
55634: PPUSH
55635: PPUSH
55636: PPUSH
55637: PPUSH
// result = [ ] ;
55638: LD_ADDR_VAR 0 7
55642: PUSH
55643: EMPTY
55644: ST_TO_ADDR
// temp_list = [ ] ;
55645: LD_ADDR_VAR 0 9
55649: PUSH
55650: EMPTY
55651: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55652: LD_VAR 0 4
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: LD_INT 2
55665: PUSH
55666: LD_INT 3
55668: PUSH
55669: LD_INT 4
55671: PUSH
55672: LD_INT 5
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: IN
55683: NOT
55684: IFTRUE 55727
55686: PUSH
55687: LD_VAR 0 1
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: IN
55702: IFFALSE 55726
55704: PUSH
55705: LD_VAR 0 5
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: LD_INT 2
55715: PUSH
55716: LD_INT 3
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: LIST
55723: IN
55724: NOT
55725: AND
55726: OR
55727: IFFALSE 55731
// exit ;
55729: GO 74130
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55731: LD_VAR 0 1
55735: PUSH
55736: LD_INT 6
55738: PUSH
55739: LD_INT 7
55741: PUSH
55742: LD_INT 8
55744: PUSH
55745: LD_INT 13
55747: PUSH
55748: LD_INT 12
55750: PUSH
55751: LD_INT 15
55753: PUSH
55754: LD_INT 11
55756: PUSH
55757: LD_INT 14
55759: PUSH
55760: LD_INT 10
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: IN
55774: IFFALSE 55784
// btype = b_lab ;
55776: LD_ADDR_VAR 0 1
55780: PUSH
55781: LD_INT 6
55783: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55784: LD_VAR 0 6
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: LD_INT 2
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: LIST
55802: IN
55803: NOT
55804: IFTRUE 55872
55806: PUSH
55807: LD_VAR 0 1
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: LD_INT 2
55820: PUSH
55821: LD_INT 3
55823: PUSH
55824: LD_INT 6
55826: PUSH
55827: LD_INT 36
55829: PUSH
55830: LD_INT 4
55832: PUSH
55833: LD_INT 5
55835: PUSH
55836: LD_INT 31
55838: PUSH
55839: LD_INT 32
55841: PUSH
55842: LD_INT 33
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: IN
55858: NOT
55859: IFFALSE 55871
55861: PUSH
55862: LD_VAR 0 6
55866: PUSH
55867: LD_INT 1
55869: EQUAL
55870: AND
55871: OR
55872: IFTRUE 55904
55874: PUSH
55875: LD_VAR 0 1
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: LD_INT 3
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: IN
55890: NOT
55891: IFFALSE 55903
55893: PUSH
55894: LD_VAR 0 6
55898: PUSH
55899: LD_INT 2
55901: EQUAL
55902: AND
55903: OR
55904: IFFALSE 55914
// mode = 0 ;
55906: LD_ADDR_VAR 0 6
55910: PUSH
55911: LD_INT 0
55913: ST_TO_ADDR
// case mode of 0 :
55914: LD_VAR 0 6
55918: PUSH
55919: LD_INT 0
55921: DOUBLE
55922: EQUAL
55923: IFTRUE 55927
55925: GO 67380
55927: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55928: LD_ADDR_VAR 0 11
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: LD_INT 2
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: LD_INT 2
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: LD_INT 2
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: LD_INT 3
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: LD_INT 3
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: NEG
56095: PUSH
56096: LD_INT 2
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56121: LD_ADDR_VAR 0 12
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 2
56255: NEG
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 3
56278: NEG
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 3
56289: NEG
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56317: LD_ADDR_VAR 0 13
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: LD_INT 2
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 2
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 2
56452: NEG
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 2
56464: NEG
56465: PUSH
56466: LD_INT 3
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 3
56476: NEG
56477: PUSH
56478: LD_INT 2
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 3
56488: NEG
56489: PUSH
56490: LD_INT 3
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56516: LD_ADDR_VAR 0 14
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: LD_INT 3
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 3
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: LD_INT 2
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56712: LD_ADDR_VAR 0 15
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 2
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 2
56814: PUSH
56815: LD_INT 1
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 1
56824: NEG
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 2
56835: NEG
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 2
56846: NEG
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 2
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 3
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 3
56879: PUSH
56880: LD_INT 1
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56905: LD_ADDR_VAR 0 16
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 2
57008: PUSH
57009: LD_INT 2
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: LD_INT 2
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 3
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 3
57062: PUSH
57063: LD_INT 3
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 2
57072: PUSH
57073: LD_INT 3
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57098: LD_ADDR_VAR 0 17
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: LD_INT 2
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: LD_INT 1
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 2
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: LD_INT 2
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: LD_INT 2
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: LD_INT 2
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: NEG
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: NEG
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 2
57285: NEG
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 2
57297: NEG
57298: PUSH
57299: LD_INT 2
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57328: LD_ADDR_VAR 0 18
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: LD_INT 1
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: LD_INT 1
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: LD_INT 2
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: LD_INT 1
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: LD_INT 2
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 2
57504: NEG
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 2
57515: NEG
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 2
57527: NEG
57528: PUSH
57529: LD_INT 2
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57558: LD_ADDR_VAR 0 19
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 1
57627: NEG
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: LD_INT 2
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: LD_INT 2
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 1
57662: PUSH
57663: LD_INT 1
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 2
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 2
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 2
57693: PUSH
57694: LD_INT 2
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: LD_INT 2
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 2
57757: NEG
57758: PUSH
57759: LD_INT 2
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57788: LD_ADDR_VAR 0 20
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: LD_INT 2
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 2
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 2
57913: PUSH
57914: LD_INT 1
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: LD_INT 2
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: LD_INT 2
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: LD_INT 2
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: NEG
57954: PUSH
57955: LD_INT 1
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 2
57975: NEG
57976: PUSH
57977: LD_INT 1
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 2
57987: NEG
57988: PUSH
57989: LD_INT 2
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58018: LD_ADDR_VAR 0 21
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: LD_INT 1
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: NEG
58100: PUSH
58101: LD_INT 2
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: PUSH
58164: LD_INT 2
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: LD_INT 2
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: NEG
58184: PUSH
58185: LD_INT 1
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 2
58205: NEG
58206: PUSH
58207: LD_INT 1
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 2
58217: NEG
58218: PUSH
58219: LD_INT 2
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58248: LD_ADDR_VAR 0 22
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 0
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 1
58317: NEG
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: LD_INT 2
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: LD_INT 2
58344: NEG
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 2
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: LD_INT 2
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: LD_INT 2
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: LD_INT 2
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: LD_INT 1
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 2
58435: NEG
58436: PUSH
58437: LD_INT 1
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 2
58447: NEG
58448: PUSH
58449: LD_INT 2
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58478: LD_ADDR_VAR 0 23
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: LD_INT 1
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: LD_INT 1
58551: NEG
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 1
58559: NEG
58560: PUSH
58561: LD_INT 2
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_INT 2
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: LD_INT 1
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: LD_INT 2
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: LD_INT 2
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: LD_INT 2
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: NEG
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 2
58654: NEG
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: NEG
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: LD_INT 2
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 2
58689: NEG
58690: PUSH
58691: LD_INT 3
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: LD_INT 3
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: LD_INT 2
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 2
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58758: LD_ADDR_VAR 0 24
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: LD_INT 1
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: NEG
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: LD_INT 2
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: LD_INT 2
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: LD_INT 1
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 2
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 2
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: LD_INT 2
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: LD_INT 2
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 0
58913: PUSH
58914: LD_INT 2
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 2
58934: NEG
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 2
58945: NEG
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 2
58957: NEG
58958: PUSH
58959: LD_INT 2
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: LD_INT 2
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 2
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 3
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 3
59001: PUSH
59002: LD_INT 2
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59034: LD_ADDR_VAR 0 25
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: LD_INT 1
59054: NEG
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: LD_INT 1
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: LD_INT 1
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: LD_INT 2
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: LD_INT 2
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 1
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 2
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 2
59169: PUSH
59170: LD_INT 2
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: LD_INT 2
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: NEG
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 2
59210: NEG
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 2
59221: NEG
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 2
59233: NEG
59234: PUSH
59235: LD_INT 2
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 3
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 3
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: LD_INT 3
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: LD_INT 3
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59308: LD_ADDR_VAR 0 26
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: LD_INT 1
59328: NEG
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: LD_INT 1
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: LD_INT 2
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: LD_INT 2
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 2
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 2
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 2
59443: PUSH
59444: LD_INT 2
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: LD_INT 2
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: NEG
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 2
59495: NEG
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 2
59507: NEG
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 2
59519: PUSH
59520: LD_INT 3
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: LD_INT 3
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: LD_INT 2
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 2
59550: NEG
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59584: LD_ADDR_VAR 0 27
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 1
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: LD_INT 1
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: LD_INT 1
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: NEG
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: NEG
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: LD_INT 2
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: LD_INT 2
59680: NEG
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 2
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 2
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 2
59719: PUSH
59720: LD_INT 2
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: LD_INT 2
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: LD_INT 2
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: LD_INT 1
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 2
59771: NEG
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 2
59783: NEG
59784: PUSH
59785: LD_INT 2
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: LD_INT 2
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 2
59806: NEG
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 3
59817: NEG
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 3
59829: NEG
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59864: LD_ADDR_VAR 0 28
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: LD_INT 2
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: LD_INT 2
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 1
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 2
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 2
59989: PUSH
59990: LD_INT 1
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 2
59999: PUSH
60000: LD_INT 2
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: LD_INT 2
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 2
60040: NEG
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 2
60051: NEG
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: LD_INT 2
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: LD_INT 3
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: LD_INT 3
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 3
60099: NEG
60100: PUSH
60101: LD_INT 1
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 3
60111: NEG
60112: PUSH
60113: LD_INT 2
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60146: LD_ADDR_VAR 0 29
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 0
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 1
60215: NEG
60216: PUSH
60217: LD_INT 1
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: LD_INT 2
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: LD_INT 2
60242: NEG
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 1
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 2
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 2
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 1
60281: PUSH
60282: LD_INT 2
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: LD_INT 2
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: LD_INT 1
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 2
60312: NEG
60313: PUSH
60314: LD_INT 1
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 2
60324: NEG
60325: PUSH
60326: LD_INT 2
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 2
60336: NEG
60337: PUSH
60338: LD_INT 3
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 2
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 3
60359: PUSH
60360: LD_INT 1
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: LD_INT 3
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 1
60379: NEG
60380: PUSH
60381: LD_INT 2
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 3
60390: NEG
60391: PUSH
60392: LD_INT 2
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60425: LD_ADDR_VAR 0 30
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: LD_INT 0
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: LD_INT 1
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 1
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 0
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 1
60483: NEG
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: LD_INT 1
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 1
60506: NEG
60507: PUSH
60508: LD_INT 2
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 0
60518: PUSH
60519: LD_INT 2
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: PUSH
60530: LD_INT 1
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 2
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 2
60550: PUSH
60551: LD_INT 1
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 2
60560: PUSH
60561: LD_INT 2
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: LD_INT 2
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: LD_INT 1
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 2
60591: NEG
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 2
60602: NEG
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: LD_INT 3
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 2
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 3
60637: PUSH
60638: LD_INT 2
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 2
60647: PUSH
60648: LD_INT 3
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 2
60657: NEG
60658: PUSH
60659: LD_INT 1
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 3
60668: NEG
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60703: LD_ADDR_VAR 0 31
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: NEG
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: LD_INT 2
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 1
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 2
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 2
60817: PUSH
60818: LD_INT 1
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 2
60827: PUSH
60828: LD_INT 2
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 1
60837: PUSH
60838: LD_INT 2
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 0
60847: PUSH
60848: LD_INT 2
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: LD_INT 1
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 2
60868: NEG
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 2
60880: NEG
60881: PUSH
60882: LD_INT 2
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 2
60892: NEG
60893: PUSH
60894: LD_INT 3
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 2
60904: PUSH
60905: LD_INT 1
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 3
60915: PUSH
60916: LD_INT 1
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 1
60925: PUSH
60926: LD_INT 3
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: LD_INT 2
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 3
60946: NEG
60947: PUSH
60948: LD_INT 2
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60981: LD_ADDR_VAR 0 32
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 0
60998: PUSH
60999: LD_INT 1
61001: NEG
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 1
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 1
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 1
61039: NEG
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: LD_INT 1
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: LD_INT 2
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: LD_INT 2
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 1
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 2
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 2
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: LD_INT 2
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: LD_INT 2
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 1
61136: NEG
61137: PUSH
61138: LD_INT 1
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 2
61147: NEG
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 2
61158: NEG
61159: PUSH
61160: LD_INT 1
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 1
61170: NEG
61171: PUSH
61172: LD_INT 3
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: LD_INT 2
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 3
61193: PUSH
61194: LD_INT 2
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 2
61203: PUSH
61204: LD_INT 3
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 2
61213: NEG
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 3
61224: NEG
61225: PUSH
61226: LD_INT 1
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61259: LD_ADDR_VAR 0 33
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: LD_INT 0
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: LD_INT 1
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: LD_INT 1
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: NEG
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: LD_INT 2
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 1
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 2
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 2
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 1
61383: PUSH
61384: LD_INT 2
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 0
61393: PUSH
61394: LD_INT 2
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 1
61403: NEG
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 2
61414: NEG
61415: PUSH
61416: LD_INT 0
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 2
61425: NEG
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 2
61437: NEG
61438: PUSH
61439: LD_INT 2
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 2
61449: NEG
61450: PUSH
61451: LD_INT 3
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 2
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 3
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: LD_INT 3
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: LD_INT 2
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 3
61503: NEG
61504: PUSH
61505: LD_INT 2
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61538: LD_ADDR_VAR 0 34
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 0
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 1
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: NEG
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: LD_INT 2
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 2
61653: PUSH
61654: LD_INT 1
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 2
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 1
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: LD_INT 1
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 2
61694: NEG
61695: PUSH
61696: LD_INT 0
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 2
61705: NEG
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 2
61717: NEG
61718: PUSH
61719: LD_INT 2
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 1
61729: NEG
61730: PUSH
61731: LD_INT 3
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 1
61741: PUSH
61742: LD_INT 2
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 3
61752: PUSH
61753: LD_INT 2
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 2
61762: PUSH
61763: LD_INT 3
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 2
61772: NEG
61773: PUSH
61774: LD_INT 1
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 3
61783: NEG
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61818: LD_ADDR_VAR 0 35
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: LD_INT 1
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 1
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: LD_INT 1
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 0
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 1
61876: NEG
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 1
61887: NEG
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 2
61899: PUSH
61900: LD_INT 1
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 2
61909: NEG
61910: PUSH
61911: LD_INT 1
61913: NEG
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61930: LD_ADDR_VAR 0 36
61934: PUSH
61935: LD_INT 0
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: LD_INT 1
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 1
61968: PUSH
61969: LD_INT 1
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 0
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 1
61988: NEG
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 1
61999: NEG
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 1
62011: NEG
62012: PUSH
62013: LD_INT 2
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: PUSH
62024: LD_INT 2
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62042: LD_ADDR_VAR 0 37
62046: PUSH
62047: LD_INT 0
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: LD_INT 1
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: LD_INT 1
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: LD_INT 1
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 1
62100: NEG
62101: PUSH
62102: LD_INT 0
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: LD_INT 1
62115: NEG
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 1
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: LD_INT 1
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62154: LD_ADDR_VAR 0 38
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: LD_INT 1
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: LD_INT 0
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 0
62202: PUSH
62203: LD_INT 1
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 1
62212: NEG
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 1
62223: NEG
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 2
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 2
62245: NEG
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62266: LD_ADDR_VAR 0 39
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: LD_INT 1
62286: NEG
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: PUSH
62305: LD_INT 1
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 0
62314: PUSH
62315: LD_INT 1
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 1
62324: NEG
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 1
62335: NEG
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 1
62347: NEG
62348: PUSH
62349: LD_INT 2
62351: NEG
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: LD_INT 2
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62378: LD_ADDR_VAR 0 40
62382: PUSH
62383: LD_INT 0
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 0
62395: PUSH
62396: LD_INT 1
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 1
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: LD_INT 1
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 1
62447: NEG
62448: PUSH
62449: LD_INT 1
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 1
62459: PUSH
62460: LD_INT 1
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 1
62470: NEG
62471: PUSH
62472: LD_INT 1
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62490: LD_ADDR_VAR 0 41
62494: PUSH
62495: LD_INT 0
62497: PUSH
62498: LD_INT 0
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: LD_INT 1
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 1
62518: PUSH
62519: LD_INT 0
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: LD_INT 1
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 0
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 1
62548: NEG
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: LD_INT 2
62575: NEG
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 1
62583: PUSH
62584: LD_INT 1
62586: NEG
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 2
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 2
62604: PUSH
62605: LD_INT 1
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 2
62614: PUSH
62615: LD_INT 2
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 1
62624: PUSH
62625: LD_INT 2
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 1
62634: NEG
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 2
62645: NEG
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 2
62656: NEG
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 2
62668: NEG
62669: PUSH
62670: LD_INT 2
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 2
62680: NEG
62681: PUSH
62682: LD_INT 3
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 2
62692: PUSH
62693: LD_INT 1
62695: NEG
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 3
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 3
62713: PUSH
62714: LD_INT 1
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 3
62723: PUSH
62724: LD_INT 2
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 3
62733: PUSH
62734: LD_INT 3
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 2
62743: PUSH
62744: LD_INT 3
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 2
62753: NEG
62754: PUSH
62755: LD_INT 1
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 3
62764: NEG
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 3
62775: NEG
62776: PUSH
62777: LD_INT 1
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 3
62787: NEG
62788: PUSH
62789: LD_INT 2
62791: NEG
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 3
62799: NEG
62800: PUSH
62801: LD_INT 3
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62840: LD_ADDR_VAR 0 42
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: LD_INT 1
62860: NEG
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: LD_INT 1
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 0
62888: PUSH
62889: LD_INT 1
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 1
62909: NEG
62910: PUSH
62911: LD_INT 1
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: LD_INT 2
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: LD_INT 2
62936: NEG
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 1
62944: PUSH
62945: LD_INT 1
62947: NEG
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 2
62955: PUSH
62956: LD_INT 1
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 2
62965: PUSH
62966: LD_INT 2
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: LD_INT 2
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 0
62985: PUSH
62986: LD_INT 2
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 1
62995: NEG
62996: PUSH
62997: LD_INT 1
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 2
63006: NEG
63007: PUSH
63008: LD_INT 1
63010: NEG
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 2
63018: NEG
63019: PUSH
63020: LD_INT 2
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 2
63030: NEG
63031: PUSH
63032: LD_INT 3
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 1
63042: NEG
63043: PUSH
63044: LD_INT 3
63046: NEG
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 0
63054: PUSH
63055: LD_INT 3
63057: NEG
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 1
63065: PUSH
63066: LD_INT 2
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 3
63076: PUSH
63077: LD_INT 2
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 3
63086: PUSH
63087: LD_INT 3
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 2
63096: PUSH
63097: LD_INT 3
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: LD_INT 3
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: LD_INT 3
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: LD_INT 2
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 3
63137: NEG
63138: PUSH
63139: LD_INT 2
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 3
63149: NEG
63150: PUSH
63151: LD_INT 3
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63190: LD_ADDR_VAR 0 43
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: LD_INT 0
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: LD_INT 1
63210: NEG
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 1
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 1
63228: PUSH
63229: LD_INT 1
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 1
63259: NEG
63260: PUSH
63261: LD_INT 1
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: NEG
63272: PUSH
63273: LD_INT 2
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: LD_INT 2
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: LD_INT 1
63297: NEG
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 2
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 2
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 1
63325: PUSH
63326: LD_INT 2
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: LD_INT 2
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: LD_INT 1
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 2
63356: NEG
63357: PUSH
63358: LD_INT 0
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 2
63367: NEG
63368: PUSH
63369: LD_INT 1
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 1
63379: NEG
63380: PUSH
63381: LD_INT 3
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: LD_INT 3
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 1
63402: PUSH
63403: LD_INT 2
63405: NEG
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 2
63413: PUSH
63414: LD_INT 1
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 3
63424: PUSH
63425: LD_INT 0
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 3
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 1
63444: PUSH
63445: LD_INT 3
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: LD_INT 3
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 1
63464: NEG
63465: PUSH
63466: LD_INT 2
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 2
63475: NEG
63476: PUSH
63477: LD_INT 1
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 3
63486: NEG
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 3
63497: NEG
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63538: LD_ADDR_VAR 0 44
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: LD_INT 1
63558: NEG
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 1
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 1
63576: PUSH
63577: LD_INT 1
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 1
63596: NEG
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: NEG
63608: PUSH
63609: LD_INT 1
63611: NEG
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 1
63619: NEG
63620: PUSH
63621: LD_INT 2
63623: NEG
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: PUSH
63632: LD_INT 1
63634: NEG
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 2
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 2
63652: PUSH
63653: LD_INT 1
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 2
63662: PUSH
63663: LD_INT 2
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: LD_INT 2
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 1
63682: NEG
63683: PUSH
63684: LD_INT 1
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 2
63693: NEG
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 2
63704: NEG
63705: PUSH
63706: LD_INT 1
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 2
63716: NEG
63717: PUSH
63718: LD_INT 2
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 2
63728: NEG
63729: PUSH
63730: LD_INT 3
63732: NEG
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 2
63740: PUSH
63741: LD_INT 1
63743: NEG
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 3
63751: PUSH
63752: LD_INT 0
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 3
63761: PUSH
63762: LD_INT 1
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 3
63771: PUSH
63772: LD_INT 2
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 3
63781: PUSH
63782: LD_INT 3
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 2
63791: PUSH
63792: LD_INT 3
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 2
63801: NEG
63802: PUSH
63803: LD_INT 1
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 3
63812: NEG
63813: PUSH
63814: LD_INT 0
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 3
63823: NEG
63824: PUSH
63825: LD_INT 1
63827: NEG
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 3
63835: NEG
63836: PUSH
63837: LD_INT 2
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 3
63847: NEG
63848: PUSH
63849: LD_INT 3
63851: NEG
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63888: LD_ADDR_VAR 0 45
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 1
63916: PUSH
63917: LD_INT 0
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 1
63926: PUSH
63927: LD_INT 1
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: LD_INT 1
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 1
63946: NEG
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: LD_INT 1
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 1
63969: NEG
63970: PUSH
63971: LD_INT 2
63973: NEG
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 0
63981: PUSH
63982: LD_INT 2
63984: NEG
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 1
63992: PUSH
63993: LD_INT 1
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 2
64003: PUSH
64004: LD_INT 1
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 2
64013: PUSH
64014: LD_INT 2
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 1
64023: PUSH
64024: LD_INT 2
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: LD_INT 2
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 1
64043: NEG
64044: PUSH
64045: LD_INT 1
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 2
64054: NEG
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 2
64066: NEG
64067: PUSH
64068: LD_INT 2
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 2
64078: NEG
64079: PUSH
64080: LD_INT 3
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 1
64090: NEG
64091: PUSH
64092: LD_INT 3
64094: NEG
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 0
64102: PUSH
64103: LD_INT 3
64105: NEG
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 1
64113: PUSH
64114: LD_INT 2
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 3
64124: PUSH
64125: LD_INT 2
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 3
64134: PUSH
64135: LD_INT 3
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 2
64144: PUSH
64145: LD_INT 3
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: LD_INT 3
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: LD_INT 3
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 1
64174: NEG
64175: PUSH
64176: LD_INT 2
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 3
64185: NEG
64186: PUSH
64187: LD_INT 2
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 3
64197: NEG
64198: PUSH
64199: LD_INT 3
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64238: LD_ADDR_VAR 0 46
64242: PUSH
64243: LD_INT 0
64245: PUSH
64246: LD_INT 0
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 0
64255: PUSH
64256: LD_INT 1
64258: NEG
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 1
64266: PUSH
64267: LD_INT 0
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 1
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: LD_INT 1
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 1
64296: NEG
64297: PUSH
64298: LD_INT 0
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 1
64307: NEG
64308: PUSH
64309: LD_INT 1
64311: NEG
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 1
64319: NEG
64320: PUSH
64321: LD_INT 2
64323: NEG
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: LD_INT 2
64334: NEG
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 1
64342: PUSH
64343: LD_INT 1
64345: NEG
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 2
64353: PUSH
64354: LD_INT 0
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 2
64363: PUSH
64364: LD_INT 1
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 1
64373: PUSH
64374: LD_INT 2
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 0
64383: PUSH
64384: LD_INT 2
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 1
64393: NEG
64394: PUSH
64395: LD_INT 1
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 2
64404: NEG
64405: PUSH
64406: LD_INT 0
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 2
64415: NEG
64416: PUSH
64417: LD_INT 1
64419: NEG
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 1
64427: NEG
64428: PUSH
64429: LD_INT 3
64431: NEG
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: LD_INT 3
64442: NEG
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: PUSH
64451: LD_INT 2
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 2
64461: PUSH
64462: LD_INT 1
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 3
64472: PUSH
64473: LD_INT 0
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 3
64482: PUSH
64483: LD_INT 1
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 1
64492: PUSH
64493: LD_INT 3
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: LD_INT 3
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 1
64512: NEG
64513: PUSH
64514: LD_INT 2
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 2
64523: NEG
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 3
64534: NEG
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 3
64545: NEG
64546: PUSH
64547: LD_INT 1
64549: NEG
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64586: LD_ADDR_VAR 0 47
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: LD_INT 0
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 0
64603: PUSH
64604: LD_INT 1
64606: NEG
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 1
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 1
64624: PUSH
64625: LD_INT 1
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: LD_INT 1
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 1
64644: NEG
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 1
64655: NEG
64656: PUSH
64657: LD_INT 1
64659: NEG
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: PUSH
64669: LD_INT 2
64671: NEG
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: LD_INT 2
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 1
64690: PUSH
64691: LD_INT 1
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 2
64701: NEG
64702: PUSH
64703: LD_INT 1
64705: NEG
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 2
64713: NEG
64714: PUSH
64715: LD_INT 2
64717: NEG
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64737: LD_ADDR_VAR 0 48
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: LD_INT 0
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: LD_INT 1
64757: NEG
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 1
64765: PUSH
64766: LD_INT 0
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 1
64775: PUSH
64776: LD_INT 1
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 0
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 1
64795: NEG
64796: PUSH
64797: LD_INT 0
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 1
64806: NEG
64807: PUSH
64808: LD_INT 1
64810: NEG
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 1
64818: NEG
64819: PUSH
64820: LD_INT 2
64822: NEG
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: LD_INT 2
64833: NEG
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 1
64841: PUSH
64842: LD_INT 1
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 2
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 2
64862: PUSH
64863: LD_INT 1
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64884: LD_ADDR_VAR 0 49
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: LD_INT 0
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 0
64901: PUSH
64902: LD_INT 1
64904: NEG
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 1
64912: PUSH
64913: LD_INT 0
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 1
64922: PUSH
64923: LD_INT 1
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 0
64932: PUSH
64933: LD_INT 1
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 1
64942: NEG
64943: PUSH
64944: LD_INT 0
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 1
64953: NEG
64954: PUSH
64955: LD_INT 1
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 1
64965: PUSH
64966: LD_INT 1
64968: NEG
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 2
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 2
64986: PUSH
64987: LD_INT 1
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 2
64996: PUSH
64997: LD_INT 2
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 1
65006: PUSH
65007: LD_INT 2
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65028: LD_ADDR_VAR 0 50
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: LD_INT 0
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 0
65045: PUSH
65046: LD_INT 1
65048: NEG
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 1
65056: PUSH
65057: LD_INT 0
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 1
65066: PUSH
65067: LD_INT 1
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 0
65076: PUSH
65077: LD_INT 1
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 1
65086: NEG
65087: PUSH
65088: LD_INT 0
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 1
65097: NEG
65098: PUSH
65099: LD_INT 1
65101: NEG
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 2
65109: PUSH
65110: LD_INT 1
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 2
65119: PUSH
65120: LD_INT 2
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 1
65129: PUSH
65130: LD_INT 2
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 0
65139: PUSH
65140: LD_INT 2
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 1
65149: NEG
65150: PUSH
65151: LD_INT 1
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65172: LD_ADDR_VAR 0 51
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: LD_INT 0
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: LD_INT 1
65192: NEG
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 1
65200: PUSH
65201: LD_INT 0
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 1
65210: PUSH
65211: LD_INT 1
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: LD_INT 1
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 1
65230: NEG
65231: PUSH
65232: LD_INT 0
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 1
65241: NEG
65242: PUSH
65243: LD_INT 1
65245: NEG
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 1
65253: PUSH
65254: LD_INT 2
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 0
65263: PUSH
65264: LD_INT 2
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 1
65273: NEG
65274: PUSH
65275: LD_INT 1
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 2
65284: NEG
65285: PUSH
65286: LD_INT 0
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 2
65295: NEG
65296: PUSH
65297: LD_INT 1
65299: NEG
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65319: LD_ADDR_VAR 0 52
65323: PUSH
65324: LD_INT 0
65326: PUSH
65327: LD_INT 0
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 0
65336: PUSH
65337: LD_INT 1
65339: NEG
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 1
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 1
65357: PUSH
65358: LD_INT 1
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 0
65367: PUSH
65368: LD_INT 1
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 1
65377: NEG
65378: PUSH
65379: LD_INT 0
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 1
65388: NEG
65389: PUSH
65390: LD_INT 1
65392: NEG
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 1
65400: NEG
65401: PUSH
65402: LD_INT 2
65404: NEG
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 1
65412: NEG
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 2
65423: NEG
65424: PUSH
65425: LD_INT 0
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 2
65434: NEG
65435: PUSH
65436: LD_INT 1
65438: NEG
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 2
65446: NEG
65447: PUSH
65448: LD_INT 2
65450: NEG
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65470: LD_ADDR_VAR 0 53
65474: PUSH
65475: LD_INT 0
65477: PUSH
65478: LD_INT 0
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 0
65487: PUSH
65488: LD_INT 1
65490: NEG
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 1
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 1
65508: PUSH
65509: LD_INT 1
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 0
65518: PUSH
65519: LD_INT 1
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 1
65528: NEG
65529: PUSH
65530: LD_INT 0
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 1
65539: NEG
65540: PUSH
65541: LD_INT 1
65543: NEG
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 1
65551: NEG
65552: PUSH
65553: LD_INT 2
65555: NEG
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: LD_INT 2
65566: NEG
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 1
65574: PUSH
65575: LD_INT 1
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 2
65585: PUSH
65586: LD_INT 0
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 2
65595: PUSH
65596: LD_INT 1
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 2
65605: PUSH
65606: LD_INT 2
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 1
65615: PUSH
65616: LD_INT 2
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 0
65625: PUSH
65626: LD_INT 2
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 1
65635: NEG
65636: PUSH
65637: LD_INT 1
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 2
65646: NEG
65647: PUSH
65648: LD_INT 0
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 2
65657: NEG
65658: PUSH
65659: LD_INT 1
65661: NEG
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 2
65669: NEG
65670: PUSH
65671: LD_INT 2
65673: NEG
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65700: LD_ADDR_VAR 0 54
65704: PUSH
65705: LD_INT 0
65707: PUSH
65708: LD_INT 0
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 0
65717: PUSH
65718: LD_INT 1
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 1
65728: PUSH
65729: LD_INT 0
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 1
65738: PUSH
65739: LD_INT 1
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 0
65748: PUSH
65749: LD_INT 1
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 1
65758: NEG
65759: PUSH
65760: LD_INT 0
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 1
65769: NEG
65770: PUSH
65771: LD_INT 1
65773: NEG
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 1
65781: NEG
65782: PUSH
65783: LD_INT 2
65785: NEG
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 0
65793: PUSH
65794: LD_INT 2
65796: NEG
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 1
65804: PUSH
65805: LD_INT 1
65807: NEG
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 2
65815: PUSH
65816: LD_INT 0
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 2
65825: PUSH
65826: LD_INT 1
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 2
65835: PUSH
65836: LD_INT 2
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 1
65845: PUSH
65846: LD_INT 2
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 0
65855: PUSH
65856: LD_INT 2
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 1
65865: NEG
65866: PUSH
65867: LD_INT 1
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 2
65876: NEG
65877: PUSH
65878: LD_INT 0
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 2
65887: NEG
65888: PUSH
65889: LD_INT 1
65891: NEG
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 2
65899: NEG
65900: PUSH
65901: LD_INT 2
65903: NEG
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65930: LD_ADDR_VAR 0 55
65934: PUSH
65935: LD_INT 0
65937: PUSH
65938: LD_INT 0
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 0
65947: PUSH
65948: LD_INT 1
65950: NEG
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 1
65958: PUSH
65959: LD_INT 0
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 1
65968: PUSH
65969: LD_INT 1
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 0
65978: PUSH
65979: LD_INT 1
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 1
65988: NEG
65989: PUSH
65990: LD_INT 0
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 1
65999: NEG
66000: PUSH
66001: LD_INT 1
66003: NEG
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 1
66011: NEG
66012: PUSH
66013: LD_INT 2
66015: NEG
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 0
66023: PUSH
66024: LD_INT 2
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 1
66034: PUSH
66035: LD_INT 1
66037: NEG
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 2
66045: PUSH
66046: LD_INT 0
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 2
66055: PUSH
66056: LD_INT 1
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 2
66065: PUSH
66066: LD_INT 2
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 1
66075: PUSH
66076: LD_INT 2
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 0
66085: PUSH
66086: LD_INT 2
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 1
66095: NEG
66096: PUSH
66097: LD_INT 1
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 2
66106: NEG
66107: PUSH
66108: LD_INT 0
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 2
66117: NEG
66118: PUSH
66119: LD_INT 1
66121: NEG
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 2
66129: NEG
66130: PUSH
66131: LD_INT 2
66133: NEG
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66160: LD_ADDR_VAR 0 56
66164: PUSH
66165: LD_INT 0
66167: PUSH
66168: LD_INT 0
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 0
66177: PUSH
66178: LD_INT 1
66180: NEG
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 1
66188: PUSH
66189: LD_INT 0
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 1
66198: PUSH
66199: LD_INT 1
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: LD_INT 1
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 1
66218: NEG
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 1
66229: NEG
66230: PUSH
66231: LD_INT 1
66233: NEG
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 1
66241: NEG
66242: PUSH
66243: LD_INT 2
66245: NEG
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 0
66253: PUSH
66254: LD_INT 2
66256: NEG
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 1
66264: PUSH
66265: LD_INT 1
66267: NEG
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 2
66275: PUSH
66276: LD_INT 0
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 2
66285: PUSH
66286: LD_INT 1
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 2
66295: PUSH
66296: LD_INT 2
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 1
66305: PUSH
66306: LD_INT 2
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 0
66315: PUSH
66316: LD_INT 2
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 1
66325: NEG
66326: PUSH
66327: LD_INT 1
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 2
66336: NEG
66337: PUSH
66338: LD_INT 0
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 2
66347: NEG
66348: PUSH
66349: LD_INT 1
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 2
66359: NEG
66360: PUSH
66361: LD_INT 2
66363: NEG
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66390: LD_ADDR_VAR 0 57
66394: PUSH
66395: LD_INT 0
66397: PUSH
66398: LD_INT 0
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 0
66407: PUSH
66408: LD_INT 1
66410: NEG
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 1
66418: PUSH
66419: LD_INT 0
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 1
66428: PUSH
66429: LD_INT 1
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 0
66438: PUSH
66439: LD_INT 1
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 1
66448: NEG
66449: PUSH
66450: LD_INT 0
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 1
66459: NEG
66460: PUSH
66461: LD_INT 1
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 1
66471: NEG
66472: PUSH
66473: LD_INT 2
66475: NEG
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 0
66483: PUSH
66484: LD_INT 2
66486: NEG
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 1
66494: PUSH
66495: LD_INT 1
66497: NEG
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 2
66505: PUSH
66506: LD_INT 0
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 2
66515: PUSH
66516: LD_INT 1
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 2
66525: PUSH
66526: LD_INT 2
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 1
66535: PUSH
66536: LD_INT 2
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 0
66545: PUSH
66546: LD_INT 2
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 1
66555: NEG
66556: PUSH
66557: LD_INT 1
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 2
66566: NEG
66567: PUSH
66568: LD_INT 0
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 2
66577: NEG
66578: PUSH
66579: LD_INT 1
66581: NEG
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 2
66589: NEG
66590: PUSH
66591: LD_INT 2
66593: NEG
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66620: LD_ADDR_VAR 0 58
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: LD_INT 0
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 0
66637: PUSH
66638: LD_INT 1
66640: NEG
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 1
66648: PUSH
66649: LD_INT 0
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 1
66658: PUSH
66659: LD_INT 1
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 0
66668: PUSH
66669: LD_INT 1
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: LD_INT 0
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 1
66689: NEG
66690: PUSH
66691: LD_INT 1
66693: NEG
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 1
66701: NEG
66702: PUSH
66703: LD_INT 2
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 0
66713: PUSH
66714: LD_INT 2
66716: NEG
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 1
66724: PUSH
66725: LD_INT 1
66727: NEG
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 2
66735: PUSH
66736: LD_INT 0
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 2
66745: PUSH
66746: LD_INT 1
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 2
66755: PUSH
66756: LD_INT 2
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 1
66765: PUSH
66766: LD_INT 2
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 0
66775: PUSH
66776: LD_INT 2
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 1
66785: NEG
66786: PUSH
66787: LD_INT 1
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 2
66796: NEG
66797: PUSH
66798: LD_INT 0
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 2
66807: NEG
66808: PUSH
66809: LD_INT 1
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 2
66819: NEG
66820: PUSH
66821: LD_INT 2
66823: NEG
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66850: LD_ADDR_VAR 0 59
66854: PUSH
66855: LD_INT 0
66857: PUSH
66858: LD_INT 0
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 0
66867: PUSH
66868: LD_INT 1
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 1
66878: PUSH
66879: LD_INT 0
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 1
66888: PUSH
66889: LD_INT 1
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 0
66898: PUSH
66899: LD_INT 1
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 1
66908: NEG
66909: PUSH
66910: LD_INT 0
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 1
66919: NEG
66920: PUSH
66921: LD_INT 1
66923: NEG
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66938: LD_ADDR_VAR 0 60
66942: PUSH
66943: LD_INT 0
66945: PUSH
66946: LD_INT 0
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 0
66955: PUSH
66956: LD_INT 1
66958: NEG
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 1
66966: PUSH
66967: LD_INT 0
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 1
66976: PUSH
66977: LD_INT 1
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 0
66986: PUSH
66987: LD_INT 1
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 1
66996: NEG
66997: PUSH
66998: LD_INT 0
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 1
67007: NEG
67008: PUSH
67009: LD_INT 1
67011: NEG
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67026: LD_ADDR_VAR 0 61
67030: PUSH
67031: LD_INT 0
67033: PUSH
67034: LD_INT 0
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 0
67043: PUSH
67044: LD_INT 1
67046: NEG
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 1
67054: PUSH
67055: LD_INT 0
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 1
67064: PUSH
67065: LD_INT 1
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 0
67074: PUSH
67075: LD_INT 1
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 1
67084: NEG
67085: PUSH
67086: LD_INT 0
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 1
67095: NEG
67096: PUSH
67097: LD_INT 1
67099: NEG
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67114: LD_ADDR_VAR 0 62
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: LD_INT 0
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 0
67131: PUSH
67132: LD_INT 1
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 1
67142: PUSH
67143: LD_INT 0
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 1
67152: PUSH
67153: LD_INT 1
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 0
67162: PUSH
67163: LD_INT 1
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 1
67172: NEG
67173: PUSH
67174: LD_INT 0
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 1
67183: NEG
67184: PUSH
67185: LD_INT 1
67187: NEG
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67202: LD_ADDR_VAR 0 63
67206: PUSH
67207: LD_INT 0
67209: PUSH
67210: LD_INT 0
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: LD_INT 1
67222: NEG
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 1
67230: PUSH
67231: LD_INT 0
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 1
67240: PUSH
67241: LD_INT 1
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 0
67250: PUSH
67251: LD_INT 1
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 1
67260: NEG
67261: PUSH
67262: LD_INT 0
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 1
67271: NEG
67272: PUSH
67273: LD_INT 1
67275: NEG
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67290: LD_ADDR_VAR 0 64
67294: PUSH
67295: LD_INT 0
67297: PUSH
67298: LD_INT 0
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 0
67307: PUSH
67308: LD_INT 1
67310: NEG
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 1
67318: PUSH
67319: LD_INT 0
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 1
67328: PUSH
67329: LD_INT 1
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 0
67338: PUSH
67339: LD_INT 1
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 1
67348: NEG
67349: PUSH
67350: LD_INT 0
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 1
67359: NEG
67360: PUSH
67361: LD_INT 1
67363: NEG
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: ST_TO_ADDR
// end ; 1 :
67378: GO 73275
67380: LD_INT 1
67382: DOUBLE
67383: EQUAL
67384: IFTRUE 67388
67386: GO 70011
67388: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67389: LD_ADDR_VAR 0 11
67393: PUSH
67394: LD_INT 1
67396: NEG
67397: PUSH
67398: LD_INT 3
67400: NEG
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 0
67408: PUSH
67409: LD_INT 3
67411: NEG
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 1
67419: PUSH
67420: LD_INT 2
67422: NEG
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: LIST
67432: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67433: LD_ADDR_VAR 0 12
67437: PUSH
67438: LD_INT 2
67440: PUSH
67441: LD_INT 1
67443: NEG
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 3
67451: PUSH
67452: LD_INT 0
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 3
67461: PUSH
67462: LD_INT 1
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: LIST
67473: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67474: LD_ADDR_VAR 0 13
67478: PUSH
67479: LD_INT 3
67481: PUSH
67482: LD_INT 2
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 3
67491: PUSH
67492: LD_INT 3
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 2
67501: PUSH
67502: LD_INT 3
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: LIST
67513: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67514: LD_ADDR_VAR 0 14
67518: PUSH
67519: LD_INT 1
67521: PUSH
67522: LD_INT 3
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 0
67531: PUSH
67532: LD_INT 3
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 1
67541: NEG
67542: PUSH
67543: LD_INT 2
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: LIST
67554: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67555: LD_ADDR_VAR 0 15
67559: PUSH
67560: LD_INT 2
67562: NEG
67563: PUSH
67564: LD_INT 1
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 3
67573: NEG
67574: PUSH
67575: LD_INT 0
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 3
67584: NEG
67585: PUSH
67586: LD_INT 1
67588: NEG
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: LIST
67598: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67599: LD_ADDR_VAR 0 16
67603: PUSH
67604: LD_INT 2
67606: NEG
67607: PUSH
67608: LD_INT 3
67610: NEG
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 3
67618: NEG
67619: PUSH
67620: LD_INT 2
67622: NEG
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 3
67630: NEG
67631: PUSH
67632: LD_INT 3
67634: NEG
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: LIST
67644: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67645: LD_ADDR_VAR 0 17
67649: PUSH
67650: LD_INT 1
67652: NEG
67653: PUSH
67654: LD_INT 3
67656: NEG
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 0
67664: PUSH
67665: LD_INT 3
67667: NEG
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 1
67675: PUSH
67676: LD_INT 2
67678: NEG
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: LIST
67688: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67689: LD_ADDR_VAR 0 18
67693: PUSH
67694: LD_INT 2
67696: PUSH
67697: LD_INT 1
67699: NEG
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 3
67707: PUSH
67708: LD_INT 0
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 3
67717: PUSH
67718: LD_INT 1
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: LIST
67729: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67730: LD_ADDR_VAR 0 19
67734: PUSH
67735: LD_INT 3
67737: PUSH
67738: LD_INT 2
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 3
67747: PUSH
67748: LD_INT 3
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 2
67757: PUSH
67758: LD_INT 3
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: LIST
67769: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67770: LD_ADDR_VAR 0 20
67774: PUSH
67775: LD_INT 1
67777: PUSH
67778: LD_INT 3
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 0
67787: PUSH
67788: LD_INT 3
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 1
67797: NEG
67798: PUSH
67799: LD_INT 2
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: LIST
67810: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67811: LD_ADDR_VAR 0 21
67815: PUSH
67816: LD_INT 2
67818: NEG
67819: PUSH
67820: LD_INT 1
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 3
67829: NEG
67830: PUSH
67831: LD_INT 0
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 3
67840: NEG
67841: PUSH
67842: LD_INT 1
67844: NEG
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: LIST
67854: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67855: LD_ADDR_VAR 0 22
67859: PUSH
67860: LD_INT 2
67862: NEG
67863: PUSH
67864: LD_INT 3
67866: NEG
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 3
67874: NEG
67875: PUSH
67876: LD_INT 2
67878: NEG
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 3
67886: NEG
67887: PUSH
67888: LD_INT 3
67890: NEG
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: LIST
67900: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67901: LD_ADDR_VAR 0 23
67905: PUSH
67906: LD_INT 0
67908: PUSH
67909: LD_INT 3
67911: NEG
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 1
67919: NEG
67920: PUSH
67921: LD_INT 4
67923: NEG
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 1
67931: PUSH
67932: LD_INT 3
67934: NEG
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: LIST
67944: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67945: LD_ADDR_VAR 0 24
67949: PUSH
67950: LD_INT 3
67952: PUSH
67953: LD_INT 0
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 3
67962: PUSH
67963: LD_INT 1
67965: NEG
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 4
67973: PUSH
67974: LD_INT 1
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: LIST
67985: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67986: LD_ADDR_VAR 0 25
67990: PUSH
67991: LD_INT 3
67993: PUSH
67994: LD_INT 3
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 4
68003: PUSH
68004: LD_INT 3
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 3
68013: PUSH
68014: LD_INT 4
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: LIST
68025: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68026: LD_ADDR_VAR 0 26
68030: PUSH
68031: LD_INT 0
68033: PUSH
68034: LD_INT 3
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 1
68043: PUSH
68044: LD_INT 4
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 1
68053: NEG
68054: PUSH
68055: LD_INT 3
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: LIST
68066: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68067: LD_ADDR_VAR 0 27
68071: PUSH
68072: LD_INT 3
68074: NEG
68075: PUSH
68076: LD_INT 0
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 3
68085: NEG
68086: PUSH
68087: LD_INT 1
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 4
68096: NEG
68097: PUSH
68098: LD_INT 1
68100: NEG
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: LIST
68110: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68111: LD_ADDR_VAR 0 28
68115: PUSH
68116: LD_INT 3
68118: NEG
68119: PUSH
68120: LD_INT 3
68122: NEG
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 3
68130: NEG
68131: PUSH
68132: LD_INT 4
68134: NEG
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 4
68142: NEG
68143: PUSH
68144: LD_INT 3
68146: NEG
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: LIST
68156: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68157: LD_ADDR_VAR 0 29
68161: PUSH
68162: LD_INT 1
68164: NEG
68165: PUSH
68166: LD_INT 3
68168: NEG
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 0
68176: PUSH
68177: LD_INT 3
68179: NEG
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 1
68187: PUSH
68188: LD_INT 2
68190: NEG
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 1
68198: NEG
68199: PUSH
68200: LD_INT 4
68202: NEG
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 0
68210: PUSH
68211: LD_INT 4
68213: NEG
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 1
68221: PUSH
68222: LD_INT 3
68224: NEG
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 1
68232: NEG
68233: PUSH
68234: LD_INT 5
68236: NEG
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 0
68244: PUSH
68245: LD_INT 5
68247: NEG
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 1
68255: PUSH
68256: LD_INT 4
68258: NEG
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 1
68266: NEG
68267: PUSH
68268: LD_INT 6
68270: NEG
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 0
68278: PUSH
68279: LD_INT 6
68281: NEG
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 1
68289: PUSH
68290: LD_INT 5
68292: NEG
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68312: LD_ADDR_VAR 0 30
68316: PUSH
68317: LD_INT 2
68319: PUSH
68320: LD_INT 1
68322: NEG
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 3
68330: PUSH
68331: LD_INT 0
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 3
68340: PUSH
68341: LD_INT 1
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 3
68350: PUSH
68351: LD_INT 1
68353: NEG
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 4
68361: PUSH
68362: LD_INT 0
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: LD_INT 4
68371: PUSH
68372: LD_INT 1
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 4
68381: PUSH
68382: LD_INT 1
68384: NEG
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 5
68392: PUSH
68393: LD_INT 0
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 5
68402: PUSH
68403: LD_INT 1
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 5
68412: PUSH
68413: LD_INT 1
68415: NEG
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 6
68423: PUSH
68424: LD_INT 0
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 6
68433: PUSH
68434: LD_INT 1
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68455: LD_ADDR_VAR 0 31
68459: PUSH
68460: LD_INT 3
68462: PUSH
68463: LD_INT 2
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: LD_INT 3
68472: PUSH
68473: LD_INT 3
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 2
68482: PUSH
68483: LD_INT 3
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 4
68492: PUSH
68493: LD_INT 3
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 4
68502: PUSH
68503: LD_INT 4
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 3
68512: PUSH
68513: LD_INT 4
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 5
68522: PUSH
68523: LD_INT 4
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PUSH
68530: LD_INT 5
68532: PUSH
68533: LD_INT 5
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 4
68542: PUSH
68543: LD_INT 5
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 6
68552: PUSH
68553: LD_INT 5
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 6
68562: PUSH
68563: LD_INT 6
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 5
68572: PUSH
68573: LD_INT 6
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68594: LD_ADDR_VAR 0 32
68598: PUSH
68599: LD_INT 1
68601: PUSH
68602: LD_INT 3
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 0
68611: PUSH
68612: LD_INT 3
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 1
68621: NEG
68622: PUSH
68623: LD_INT 2
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 1
68632: PUSH
68633: LD_INT 4
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 0
68642: PUSH
68643: LD_INT 4
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 1
68652: NEG
68653: PUSH
68654: LD_INT 3
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 1
68663: PUSH
68664: LD_INT 5
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 0
68673: PUSH
68674: LD_INT 5
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 1
68683: NEG
68684: PUSH
68685: LD_INT 4
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 1
68694: PUSH
68695: LD_INT 6
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 0
68704: PUSH
68705: LD_INT 6
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 1
68714: NEG
68715: PUSH
68716: LD_INT 5
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68737: LD_ADDR_VAR 0 33
68741: PUSH
68742: LD_INT 2
68744: NEG
68745: PUSH
68746: LD_INT 1
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 3
68755: NEG
68756: PUSH
68757: LD_INT 0
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 3
68766: NEG
68767: PUSH
68768: LD_INT 1
68770: NEG
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 3
68778: NEG
68779: PUSH
68780: LD_INT 1
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 4
68789: NEG
68790: PUSH
68791: LD_INT 0
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 4
68800: NEG
68801: PUSH
68802: LD_INT 1
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 4
68812: NEG
68813: PUSH
68814: LD_INT 1
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 5
68823: NEG
68824: PUSH
68825: LD_INT 0
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 5
68834: NEG
68835: PUSH
68836: LD_INT 1
68838: NEG
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 5
68846: NEG
68847: PUSH
68848: LD_INT 1
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 6
68857: NEG
68858: PUSH
68859: LD_INT 0
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 6
68868: NEG
68869: PUSH
68870: LD_INT 1
68872: NEG
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68892: LD_ADDR_VAR 0 34
68896: PUSH
68897: LD_INT 2
68899: NEG
68900: PUSH
68901: LD_INT 3
68903: NEG
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 3
68911: NEG
68912: PUSH
68913: LD_INT 2
68915: NEG
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 3
68923: NEG
68924: PUSH
68925: LD_INT 3
68927: NEG
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 3
68935: NEG
68936: PUSH
68937: LD_INT 4
68939: NEG
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 4
68947: NEG
68948: PUSH
68949: LD_INT 3
68951: NEG
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 4
68959: NEG
68960: PUSH
68961: LD_INT 4
68963: NEG
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 4
68971: NEG
68972: PUSH
68973: LD_INT 5
68975: NEG
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 5
68983: NEG
68984: PUSH
68985: LD_INT 4
68987: NEG
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 5
68995: NEG
68996: PUSH
68997: LD_INT 5
68999: NEG
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 5
69007: NEG
69008: PUSH
69009: LD_INT 6
69011: NEG
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 6
69019: NEG
69020: PUSH
69021: LD_INT 5
69023: NEG
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 6
69031: NEG
69032: PUSH
69033: LD_INT 6
69035: NEG
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69055: LD_ADDR_VAR 0 41
69059: PUSH
69060: LD_INT 0
69062: PUSH
69063: LD_INT 2
69065: NEG
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 1
69073: NEG
69074: PUSH
69075: LD_INT 3
69077: NEG
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: LD_INT 1
69085: PUSH
69086: LD_INT 2
69088: NEG
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: LIST
69098: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69099: LD_ADDR_VAR 0 42
69103: PUSH
69104: LD_INT 2
69106: PUSH
69107: LD_INT 0
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 2
69116: PUSH
69117: LD_INT 1
69119: NEG
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 3
69127: PUSH
69128: LD_INT 1
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: LIST
69139: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69140: LD_ADDR_VAR 0 43
69144: PUSH
69145: LD_INT 2
69147: PUSH
69148: LD_INT 2
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 3
69157: PUSH
69158: LD_INT 2
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 2
69167: PUSH
69168: LD_INT 3
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: LIST
69179: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69180: LD_ADDR_VAR 0 44
69184: PUSH
69185: LD_INT 0
69187: PUSH
69188: LD_INT 2
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 1
69197: PUSH
69198: LD_INT 3
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 1
69207: NEG
69208: PUSH
69209: LD_INT 2
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: LIST
69220: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69221: LD_ADDR_VAR 0 45
69225: PUSH
69226: LD_INT 2
69228: NEG
69229: PUSH
69230: LD_INT 0
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 2
69239: NEG
69240: PUSH
69241: LD_INT 1
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 3
69250: NEG
69251: PUSH
69252: LD_INT 1
69254: NEG
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: LIST
69264: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69265: LD_ADDR_VAR 0 46
69269: PUSH
69270: LD_INT 2
69272: NEG
69273: PUSH
69274: LD_INT 2
69276: NEG
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 2
69284: NEG
69285: PUSH
69286: LD_INT 3
69288: NEG
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 3
69296: NEG
69297: PUSH
69298: LD_INT 2
69300: NEG
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: LIST
69310: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69311: LD_ADDR_VAR 0 47
69315: PUSH
69316: LD_INT 2
69318: NEG
69319: PUSH
69320: LD_INT 3
69322: NEG
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: PUSH
69328: LD_INT 1
69330: NEG
69331: PUSH
69332: LD_INT 3
69334: NEG
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69344: LD_ADDR_VAR 0 48
69348: PUSH
69349: LD_INT 1
69351: PUSH
69352: LD_INT 2
69354: NEG
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 2
69362: PUSH
69363: LD_INT 1
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69375: LD_ADDR_VAR 0 49
69379: PUSH
69380: LD_INT 3
69382: PUSH
69383: LD_INT 1
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 3
69392: PUSH
69393: LD_INT 2
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69404: LD_ADDR_VAR 0 50
69408: PUSH
69409: LD_INT 2
69411: PUSH
69412: LD_INT 3
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 1
69421: PUSH
69422: LD_INT 3
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69433: LD_ADDR_VAR 0 51
69437: PUSH
69438: LD_INT 1
69440: NEG
69441: PUSH
69442: LD_INT 2
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 2
69451: NEG
69452: PUSH
69453: LD_INT 1
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69464: LD_ADDR_VAR 0 52
69468: PUSH
69469: LD_INT 3
69471: NEG
69472: PUSH
69473: LD_INT 1
69475: NEG
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: PUSH
69481: LD_INT 3
69483: NEG
69484: PUSH
69485: LD_INT 2
69487: NEG
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69497: LD_ADDR_VAR 0 53
69501: PUSH
69502: LD_INT 1
69504: NEG
69505: PUSH
69506: LD_INT 3
69508: NEG
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PUSH
69514: LD_INT 0
69516: PUSH
69517: LD_INT 3
69519: NEG
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 1
69527: PUSH
69528: LD_INT 2
69530: NEG
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: LIST
69540: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69541: LD_ADDR_VAR 0 54
69545: PUSH
69546: LD_INT 2
69548: PUSH
69549: LD_INT 1
69551: NEG
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: LD_INT 3
69559: PUSH
69560: LD_INT 0
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 3
69569: PUSH
69570: LD_INT 1
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: EMPTY
69578: LIST
69579: LIST
69580: LIST
69581: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69582: LD_ADDR_VAR 0 55
69586: PUSH
69587: LD_INT 3
69589: PUSH
69590: LD_INT 2
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 3
69599: PUSH
69600: LD_INT 3
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 2
69609: PUSH
69610: LD_INT 3
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: LIST
69621: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69622: LD_ADDR_VAR 0 56
69626: PUSH
69627: LD_INT 1
69629: PUSH
69630: LD_INT 3
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 0
69639: PUSH
69640: LD_INT 3
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 1
69649: NEG
69650: PUSH
69651: LD_INT 2
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: LIST
69662: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69663: LD_ADDR_VAR 0 57
69667: PUSH
69668: LD_INT 2
69670: NEG
69671: PUSH
69672: LD_INT 1
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 3
69681: NEG
69682: PUSH
69683: LD_INT 0
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 3
69692: NEG
69693: PUSH
69694: LD_INT 1
69696: NEG
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: LIST
69706: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69707: LD_ADDR_VAR 0 58
69711: PUSH
69712: LD_INT 2
69714: NEG
69715: PUSH
69716: LD_INT 3
69718: NEG
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 3
69726: NEG
69727: PUSH
69728: LD_INT 2
69730: NEG
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 3
69738: NEG
69739: PUSH
69740: LD_INT 3
69742: NEG
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: LIST
69752: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69753: LD_ADDR_VAR 0 59
69757: PUSH
69758: LD_INT 1
69760: NEG
69761: PUSH
69762: LD_INT 2
69764: NEG
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 0
69772: PUSH
69773: LD_INT 2
69775: NEG
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_INT 1
69783: PUSH
69784: LD_INT 1
69786: NEG
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: LIST
69796: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69797: LD_ADDR_VAR 0 60
69801: PUSH
69802: LD_INT 1
69804: PUSH
69805: LD_INT 1
69807: NEG
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 2
69815: PUSH
69816: LD_INT 0
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 2
69825: PUSH
69826: LD_INT 1
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: LIST
69837: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69838: LD_ADDR_VAR 0 61
69842: PUSH
69843: LD_INT 2
69845: PUSH
69846: LD_INT 1
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 2
69855: PUSH
69856: LD_INT 2
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 1
69865: PUSH
69866: LD_INT 2
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: LIST
69877: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69878: LD_ADDR_VAR 0 62
69882: PUSH
69883: LD_INT 1
69885: PUSH
69886: LD_INT 2
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 0
69895: PUSH
69896: LD_INT 2
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 1
69905: NEG
69906: PUSH
69907: LD_INT 1
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: LIST
69918: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69919: LD_ADDR_VAR 0 63
69923: PUSH
69924: LD_INT 1
69926: NEG
69927: PUSH
69928: LD_INT 1
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 2
69937: NEG
69938: PUSH
69939: LD_INT 0
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 2
69948: NEG
69949: PUSH
69950: LD_INT 1
69952: NEG
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: LIST
69962: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69963: LD_ADDR_VAR 0 64
69967: PUSH
69968: LD_INT 1
69970: NEG
69971: PUSH
69972: LD_INT 2
69974: NEG
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 2
69982: NEG
69983: PUSH
69984: LD_INT 1
69986: NEG
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 2
69994: NEG
69995: PUSH
69996: LD_INT 2
69998: NEG
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: LIST
70008: ST_TO_ADDR
// end ; 2 :
70009: GO 73275
70011: LD_INT 2
70013: DOUBLE
70014: EQUAL
70015: IFTRUE 70019
70017: GO 73274
70019: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70020: LD_ADDR_VAR 0 29
70024: PUSH
70025: LD_INT 4
70027: PUSH
70028: LD_INT 0
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 4
70037: PUSH
70038: LD_INT 1
70040: NEG
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 5
70048: PUSH
70049: LD_INT 0
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 5
70058: PUSH
70059: LD_INT 1
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 4
70068: PUSH
70069: LD_INT 1
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 3
70078: PUSH
70079: LD_INT 0
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: LD_INT 3
70088: PUSH
70089: LD_INT 1
70091: NEG
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 3
70099: PUSH
70100: LD_INT 2
70102: NEG
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 5
70110: PUSH
70111: LD_INT 2
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 3
70120: PUSH
70121: LD_INT 3
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: LD_INT 3
70130: PUSH
70131: LD_INT 2
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PUSH
70138: LD_INT 4
70140: PUSH
70141: LD_INT 3
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 4
70150: PUSH
70151: LD_INT 4
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 3
70160: PUSH
70161: LD_INT 4
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 2
70170: PUSH
70171: LD_INT 3
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: LD_INT 2
70180: PUSH
70181: LD_INT 2
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 4
70190: PUSH
70191: LD_INT 2
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 2
70200: PUSH
70201: LD_INT 4
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 0
70210: PUSH
70211: LD_INT 4
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 0
70220: PUSH
70221: LD_INT 3
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 1
70230: PUSH
70231: LD_INT 4
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 1
70240: PUSH
70241: LD_INT 5
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 0
70250: PUSH
70251: LD_INT 5
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 1
70260: NEG
70261: PUSH
70262: LD_INT 4
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: LD_INT 1
70271: NEG
70272: PUSH
70273: LD_INT 3
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 2
70282: PUSH
70283: LD_INT 5
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 2
70292: NEG
70293: PUSH
70294: LD_INT 3
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 3
70303: NEG
70304: PUSH
70305: LD_INT 0
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: LD_INT 3
70314: NEG
70315: PUSH
70316: LD_INT 1
70318: NEG
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PUSH
70324: LD_INT 2
70326: NEG
70327: PUSH
70328: LD_INT 0
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 2
70337: NEG
70338: PUSH
70339: LD_INT 1
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: LD_INT 3
70348: NEG
70349: PUSH
70350: LD_INT 1
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 4
70359: NEG
70360: PUSH
70361: LD_INT 0
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 4
70370: NEG
70371: PUSH
70372: LD_INT 1
70374: NEG
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 4
70382: NEG
70383: PUSH
70384: LD_INT 2
70386: NEG
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 2
70394: NEG
70395: PUSH
70396: LD_INT 2
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 4
70405: NEG
70406: PUSH
70407: LD_INT 4
70409: NEG
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 4
70417: NEG
70418: PUSH
70419: LD_INT 5
70421: NEG
70422: PUSH
70423: EMPTY
70424: LIST
70425: LIST
70426: PUSH
70427: LD_INT 3
70429: NEG
70430: PUSH
70431: LD_INT 4
70433: NEG
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PUSH
70439: LD_INT 3
70441: NEG
70442: PUSH
70443: LD_INT 3
70445: NEG
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 4
70453: NEG
70454: PUSH
70455: LD_INT 3
70457: NEG
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 5
70465: NEG
70466: PUSH
70467: LD_INT 4
70469: NEG
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 5
70477: NEG
70478: PUSH
70479: LD_INT 5
70481: NEG
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 3
70489: NEG
70490: PUSH
70491: LD_INT 5
70493: NEG
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: PUSH
70499: LD_INT 5
70501: NEG
70502: PUSH
70503: LD_INT 3
70505: NEG
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70558: LD_ADDR_VAR 0 30
70562: PUSH
70563: LD_INT 4
70565: PUSH
70566: LD_INT 4
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 4
70575: PUSH
70576: LD_INT 3
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: LD_INT 5
70585: PUSH
70586: LD_INT 4
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: PUSH
70593: LD_INT 5
70595: PUSH
70596: LD_INT 5
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 4
70605: PUSH
70606: LD_INT 5
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 3
70615: PUSH
70616: LD_INT 4
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: LD_INT 3
70625: PUSH
70626: LD_INT 3
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 5
70635: PUSH
70636: LD_INT 3
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 3
70645: PUSH
70646: LD_INT 5
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PUSH
70653: LD_INT 0
70655: PUSH
70656: LD_INT 3
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 0
70665: PUSH
70666: LD_INT 2
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: PUSH
70673: LD_INT 1
70675: PUSH
70676: LD_INT 3
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: LD_INT 1
70685: PUSH
70686: LD_INT 4
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_INT 0
70695: PUSH
70696: LD_INT 4
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 1
70705: NEG
70706: PUSH
70707: LD_INT 3
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: LD_INT 1
70716: NEG
70717: PUSH
70718: LD_INT 2
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: LD_INT 2
70727: PUSH
70728: LD_INT 4
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PUSH
70735: LD_INT 2
70737: NEG
70738: PUSH
70739: LD_INT 2
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: PUSH
70746: LD_INT 4
70748: NEG
70749: PUSH
70750: LD_INT 0
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: PUSH
70757: LD_INT 4
70759: NEG
70760: PUSH
70761: LD_INT 1
70763: NEG
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 3
70771: NEG
70772: PUSH
70773: LD_INT 0
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 3
70782: NEG
70783: PUSH
70784: LD_INT 1
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 4
70793: NEG
70794: PUSH
70795: LD_INT 1
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 5
70804: NEG
70805: PUSH
70806: LD_INT 0
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 5
70815: NEG
70816: PUSH
70817: LD_INT 1
70819: NEG
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PUSH
70825: LD_INT 5
70827: NEG
70828: PUSH
70829: LD_INT 2
70831: NEG
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 3
70839: NEG
70840: PUSH
70841: LD_INT 2
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: PUSH
70848: LD_INT 3
70850: NEG
70851: PUSH
70852: LD_INT 3
70854: NEG
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 3
70862: NEG
70863: PUSH
70864: LD_INT 4
70866: NEG
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 2
70874: NEG
70875: PUSH
70876: LD_INT 3
70878: NEG
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 2
70886: NEG
70887: PUSH
70888: LD_INT 2
70890: NEG
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 3
70898: NEG
70899: PUSH
70900: LD_INT 2
70902: NEG
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 4
70910: NEG
70911: PUSH
70912: LD_INT 3
70914: NEG
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 4
70922: NEG
70923: PUSH
70924: LD_INT 4
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 2
70934: NEG
70935: PUSH
70936: LD_INT 4
70938: NEG
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 4
70946: NEG
70947: PUSH
70948: LD_INT 2
70950: NEG
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 0
70958: PUSH
70959: LD_INT 4
70961: NEG
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 0
70969: PUSH
70970: LD_INT 5
70972: NEG
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_INT 1
70980: PUSH
70981: LD_INT 4
70983: NEG
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 1
70991: PUSH
70992: LD_INT 3
70994: NEG
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 0
71002: PUSH
71003: LD_INT 3
71005: NEG
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 1
71013: NEG
71014: PUSH
71015: LD_INT 4
71017: NEG
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 1
71025: NEG
71026: PUSH
71027: LD_INT 5
71029: NEG
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 2
71037: PUSH
71038: LD_INT 3
71040: NEG
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 2
71048: NEG
71049: PUSH
71050: LD_INT 5
71052: NEG
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: LIST
71095: LIST
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71105: LD_ADDR_VAR 0 31
71109: PUSH
71110: LD_INT 0
71112: PUSH
71113: LD_INT 4
71115: PUSH
71116: EMPTY
71117: LIST
71118: LIST
71119: PUSH
71120: LD_INT 0
71122: PUSH
71123: LD_INT 3
71125: PUSH
71126: EMPTY
71127: LIST
71128: LIST
71129: PUSH
71130: LD_INT 1
71132: PUSH
71133: LD_INT 4
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 1
71142: PUSH
71143: LD_INT 5
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: PUSH
71150: LD_INT 0
71152: PUSH
71153: LD_INT 5
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 1
71162: NEG
71163: PUSH
71164: LD_INT 4
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: PUSH
71171: LD_INT 1
71173: NEG
71174: PUSH
71175: LD_INT 3
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: LD_INT 2
71184: PUSH
71185: LD_INT 5
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PUSH
71192: LD_INT 2
71194: NEG
71195: PUSH
71196: LD_INT 3
71198: PUSH
71199: EMPTY
71200: LIST
71201: LIST
71202: PUSH
71203: LD_INT 3
71205: NEG
71206: PUSH
71207: LD_INT 0
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PUSH
71214: LD_INT 3
71216: NEG
71217: PUSH
71218: LD_INT 1
71220: NEG
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 2
71228: NEG
71229: PUSH
71230: LD_INT 0
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: LD_INT 2
71239: NEG
71240: PUSH
71241: LD_INT 1
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PUSH
71248: LD_INT 3
71250: NEG
71251: PUSH
71252: LD_INT 1
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: PUSH
71259: LD_INT 4
71261: NEG
71262: PUSH
71263: LD_INT 0
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 4
71272: NEG
71273: PUSH
71274: LD_INT 1
71276: NEG
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 4
71284: NEG
71285: PUSH
71286: LD_INT 2
71288: NEG
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: LD_INT 2
71296: NEG
71297: PUSH
71298: LD_INT 2
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 4
71307: NEG
71308: PUSH
71309: LD_INT 4
71311: NEG
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 4
71319: NEG
71320: PUSH
71321: LD_INT 5
71323: NEG
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: LD_INT 3
71331: NEG
71332: PUSH
71333: LD_INT 4
71335: NEG
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: PUSH
71341: LD_INT 3
71343: NEG
71344: PUSH
71345: LD_INT 3
71347: NEG
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: LD_INT 4
71355: NEG
71356: PUSH
71357: LD_INT 3
71359: NEG
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_INT 5
71367: NEG
71368: PUSH
71369: LD_INT 4
71371: NEG
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 5
71379: NEG
71380: PUSH
71381: LD_INT 5
71383: NEG
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 3
71391: NEG
71392: PUSH
71393: LD_INT 5
71395: NEG
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: LD_INT 5
71403: NEG
71404: PUSH
71405: LD_INT 3
71407: NEG
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PUSH
71413: LD_INT 0
71415: PUSH
71416: LD_INT 3
71418: NEG
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 0
71426: PUSH
71427: LD_INT 4
71429: NEG
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: PUSH
71435: LD_INT 1
71437: PUSH
71438: LD_INT 3
71440: NEG
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 1
71448: PUSH
71449: LD_INT 2
71451: NEG
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: PUSH
71457: LD_INT 0
71459: PUSH
71460: LD_INT 2
71462: NEG
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 1
71470: NEG
71471: PUSH
71472: LD_INT 3
71474: NEG
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 1
71482: NEG
71483: PUSH
71484: LD_INT 4
71486: NEG
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 2
71494: PUSH
71495: LD_INT 2
71497: NEG
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: LD_INT 2
71505: NEG
71506: PUSH
71507: LD_INT 4
71509: NEG
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PUSH
71515: LD_INT 4
71517: PUSH
71518: LD_INT 0
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: LD_INT 4
71527: PUSH
71528: LD_INT 1
71530: NEG
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: PUSH
71536: LD_INT 5
71538: PUSH
71539: LD_INT 0
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: LD_INT 5
71548: PUSH
71549: LD_INT 1
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: PUSH
71556: LD_INT 4
71558: PUSH
71559: LD_INT 1
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: PUSH
71566: LD_INT 3
71568: PUSH
71569: LD_INT 0
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 3
71578: PUSH
71579: LD_INT 1
71581: NEG
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 3
71589: PUSH
71590: LD_INT 2
71592: NEG
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: LD_INT 5
71600: PUSH
71601: LD_INT 2
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: LIST
71634: LIST
71635: LIST
71636: LIST
71637: LIST
71638: LIST
71639: LIST
71640: LIST
71641: LIST
71642: LIST
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71655: LD_ADDR_VAR 0 32
71659: PUSH
71660: LD_INT 4
71662: NEG
71663: PUSH
71664: LD_INT 0
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: LD_INT 4
71673: NEG
71674: PUSH
71675: LD_INT 1
71677: NEG
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PUSH
71683: LD_INT 3
71685: NEG
71686: PUSH
71687: LD_INT 0
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: PUSH
71694: LD_INT 3
71696: NEG
71697: PUSH
71698: LD_INT 1
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 4
71707: NEG
71708: PUSH
71709: LD_INT 1
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: PUSH
71716: LD_INT 5
71718: NEG
71719: PUSH
71720: LD_INT 0
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: LD_INT 5
71729: NEG
71730: PUSH
71731: LD_INT 1
71733: NEG
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: PUSH
71739: LD_INT 5
71741: NEG
71742: PUSH
71743: LD_INT 2
71745: NEG
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: LD_INT 3
71753: NEG
71754: PUSH
71755: LD_INT 2
71757: PUSH
71758: EMPTY
71759: LIST
71760: LIST
71761: PUSH
71762: LD_INT 3
71764: NEG
71765: PUSH
71766: LD_INT 3
71768: NEG
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: PUSH
71774: LD_INT 3
71776: NEG
71777: PUSH
71778: LD_INT 4
71780: NEG
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: PUSH
71786: LD_INT 2
71788: NEG
71789: PUSH
71790: LD_INT 3
71792: NEG
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 2
71800: NEG
71801: PUSH
71802: LD_INT 2
71804: NEG
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 3
71812: NEG
71813: PUSH
71814: LD_INT 2
71816: NEG
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 4
71824: NEG
71825: PUSH
71826: LD_INT 3
71828: NEG
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 4
71836: NEG
71837: PUSH
71838: LD_INT 4
71840: NEG
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: PUSH
71846: LD_INT 2
71848: NEG
71849: PUSH
71850: LD_INT 4
71852: NEG
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PUSH
71858: LD_INT 4
71860: NEG
71861: PUSH
71862: LD_INT 2
71864: NEG
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: PUSH
71870: LD_INT 0
71872: PUSH
71873: LD_INT 4
71875: NEG
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: LD_INT 0
71883: PUSH
71884: LD_INT 5
71886: NEG
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: PUSH
71892: LD_INT 1
71894: PUSH
71895: LD_INT 4
71897: NEG
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: PUSH
71903: LD_INT 1
71905: PUSH
71906: LD_INT 3
71908: NEG
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: PUSH
71914: LD_INT 0
71916: PUSH
71917: LD_INT 3
71919: NEG
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 1
71927: NEG
71928: PUSH
71929: LD_INT 4
71931: NEG
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 1
71939: NEG
71940: PUSH
71941: LD_INT 5
71943: NEG
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: LD_INT 2
71951: PUSH
71952: LD_INT 3
71954: NEG
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: LD_INT 2
71962: NEG
71963: PUSH
71964: LD_INT 5
71966: NEG
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: LD_INT 3
71974: PUSH
71975: LD_INT 0
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: PUSH
71982: LD_INT 3
71984: PUSH
71985: LD_INT 1
71987: NEG
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: PUSH
71993: LD_INT 4
71995: PUSH
71996: LD_INT 0
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: PUSH
72003: LD_INT 4
72005: PUSH
72006: LD_INT 1
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: PUSH
72013: LD_INT 3
72015: PUSH
72016: LD_INT 1
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: PUSH
72023: LD_INT 2
72025: PUSH
72026: LD_INT 0
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 2
72035: PUSH
72036: LD_INT 1
72038: NEG
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PUSH
72044: LD_INT 2
72046: PUSH
72047: LD_INT 2
72049: NEG
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: PUSH
72055: LD_INT 4
72057: PUSH
72058: LD_INT 2
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: PUSH
72065: LD_INT 4
72067: PUSH
72068: LD_INT 4
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: PUSH
72075: LD_INT 4
72077: PUSH
72078: LD_INT 3
72080: PUSH
72081: EMPTY
72082: LIST
72083: LIST
72084: PUSH
72085: LD_INT 5
72087: PUSH
72088: LD_INT 4
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: PUSH
72095: LD_INT 5
72097: PUSH
72098: LD_INT 5
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: PUSH
72105: LD_INT 4
72107: PUSH
72108: LD_INT 5
72110: PUSH
72111: EMPTY
72112: LIST
72113: LIST
72114: PUSH
72115: LD_INT 3
72117: PUSH
72118: LD_INT 4
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: PUSH
72125: LD_INT 3
72127: PUSH
72128: LD_INT 3
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: PUSH
72135: LD_INT 5
72137: PUSH
72138: LD_INT 3
72140: PUSH
72141: EMPTY
72142: LIST
72143: LIST
72144: PUSH
72145: LD_INT 3
72147: PUSH
72148: LD_INT 5
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: LIST
72182: LIST
72183: LIST
72184: LIST
72185: LIST
72186: LIST
72187: LIST
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72202: LD_ADDR_VAR 0 33
72206: PUSH
72207: LD_INT 4
72209: NEG
72210: PUSH
72211: LD_INT 4
72213: NEG
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: PUSH
72219: LD_INT 4
72221: NEG
72222: PUSH
72223: LD_INT 5
72225: NEG
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: LD_INT 3
72233: NEG
72234: PUSH
72235: LD_INT 4
72237: NEG
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_INT 3
72245: NEG
72246: PUSH
72247: LD_INT 3
72249: NEG
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 4
72257: NEG
72258: PUSH
72259: LD_INT 3
72261: NEG
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 5
72269: NEG
72270: PUSH
72271: LD_INT 4
72273: NEG
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 5
72281: NEG
72282: PUSH
72283: LD_INT 5
72285: NEG
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: PUSH
72291: LD_INT 3
72293: NEG
72294: PUSH
72295: LD_INT 5
72297: NEG
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: PUSH
72303: LD_INT 5
72305: NEG
72306: PUSH
72307: LD_INT 3
72309: NEG
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 0
72317: PUSH
72318: LD_INT 3
72320: NEG
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: LD_INT 0
72328: PUSH
72329: LD_INT 4
72331: NEG
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: PUSH
72337: LD_INT 1
72339: PUSH
72340: LD_INT 3
72342: NEG
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: LD_INT 1
72350: PUSH
72351: LD_INT 2
72353: NEG
72354: PUSH
72355: EMPTY
72356: LIST
72357: LIST
72358: PUSH
72359: LD_INT 0
72361: PUSH
72362: LD_INT 2
72364: NEG
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: PUSH
72370: LD_INT 1
72372: NEG
72373: PUSH
72374: LD_INT 3
72376: NEG
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: PUSH
72382: LD_INT 1
72384: NEG
72385: PUSH
72386: LD_INT 4
72388: NEG
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: PUSH
72394: LD_INT 2
72396: PUSH
72397: LD_INT 2
72399: NEG
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: PUSH
72405: LD_INT 2
72407: NEG
72408: PUSH
72409: LD_INT 4
72411: NEG
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: PUSH
72417: LD_INT 4
72419: PUSH
72420: LD_INT 0
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PUSH
72427: LD_INT 4
72429: PUSH
72430: LD_INT 1
72432: NEG
72433: PUSH
72434: EMPTY
72435: LIST
72436: LIST
72437: PUSH
72438: LD_INT 5
72440: PUSH
72441: LD_INT 0
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: PUSH
72448: LD_INT 5
72450: PUSH
72451: LD_INT 1
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: PUSH
72458: LD_INT 4
72460: PUSH
72461: LD_INT 1
72463: PUSH
72464: EMPTY
72465: LIST
72466: LIST
72467: PUSH
72468: LD_INT 3
72470: PUSH
72471: LD_INT 0
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: LD_INT 3
72480: PUSH
72481: LD_INT 1
72483: NEG
72484: PUSH
72485: EMPTY
72486: LIST
72487: LIST
72488: PUSH
72489: LD_INT 3
72491: PUSH
72492: LD_INT 2
72494: NEG
72495: PUSH
72496: EMPTY
72497: LIST
72498: LIST
72499: PUSH
72500: LD_INT 5
72502: PUSH
72503: LD_INT 2
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: PUSH
72510: LD_INT 3
72512: PUSH
72513: LD_INT 3
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: PUSH
72520: LD_INT 3
72522: PUSH
72523: LD_INT 2
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: PUSH
72530: LD_INT 4
72532: PUSH
72533: LD_INT 3
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 4
72542: PUSH
72543: LD_INT 4
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: PUSH
72550: LD_INT 3
72552: PUSH
72553: LD_INT 4
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: PUSH
72560: LD_INT 2
72562: PUSH
72563: LD_INT 3
72565: PUSH
72566: EMPTY
72567: LIST
72568: LIST
72569: PUSH
72570: LD_INT 2
72572: PUSH
72573: LD_INT 2
72575: PUSH
72576: EMPTY
72577: LIST
72578: LIST
72579: PUSH
72580: LD_INT 4
72582: PUSH
72583: LD_INT 2
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: PUSH
72590: LD_INT 2
72592: PUSH
72593: LD_INT 4
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: PUSH
72600: LD_INT 0
72602: PUSH
72603: LD_INT 4
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: PUSH
72610: LD_INT 0
72612: PUSH
72613: LD_INT 3
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: PUSH
72620: LD_INT 1
72622: PUSH
72623: LD_INT 4
72625: PUSH
72626: EMPTY
72627: LIST
72628: LIST
72629: PUSH
72630: LD_INT 1
72632: PUSH
72633: LD_INT 5
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: PUSH
72640: LD_INT 0
72642: PUSH
72643: LD_INT 5
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: PUSH
72650: LD_INT 1
72652: NEG
72653: PUSH
72654: LD_INT 4
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: PUSH
72661: LD_INT 1
72663: NEG
72664: PUSH
72665: LD_INT 3
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: LD_INT 2
72674: PUSH
72675: LD_INT 5
72677: PUSH
72678: EMPTY
72679: LIST
72680: LIST
72681: PUSH
72682: LD_INT 2
72684: NEG
72685: PUSH
72686: LD_INT 3
72688: PUSH
72689: EMPTY
72690: LIST
72691: LIST
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: LIST
72704: LIST
72705: LIST
72706: LIST
72707: LIST
72708: LIST
72709: LIST
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: LIST
72727: LIST
72728: LIST
72729: LIST
72730: LIST
72731: LIST
72732: LIST
72733: LIST
72734: LIST
72735: LIST
72736: LIST
72737: LIST
72738: LIST
72739: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72740: LD_ADDR_VAR 0 34
72744: PUSH
72745: LD_INT 0
72747: PUSH
72748: LD_INT 4
72750: NEG
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PUSH
72756: LD_INT 0
72758: PUSH
72759: LD_INT 5
72761: NEG
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PUSH
72767: LD_INT 1
72769: PUSH
72770: LD_INT 4
72772: NEG
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: PUSH
72778: LD_INT 1
72780: PUSH
72781: LD_INT 3
72783: NEG
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: PUSH
72789: LD_INT 0
72791: PUSH
72792: LD_INT 3
72794: NEG
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: PUSH
72800: LD_INT 1
72802: NEG
72803: PUSH
72804: LD_INT 4
72806: NEG
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: PUSH
72812: LD_INT 1
72814: NEG
72815: PUSH
72816: LD_INT 5
72818: NEG
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PUSH
72824: LD_INT 2
72826: PUSH
72827: LD_INT 3
72829: NEG
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 2
72837: NEG
72838: PUSH
72839: LD_INT 5
72841: NEG
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: PUSH
72847: LD_INT 3
72849: PUSH
72850: LD_INT 0
72852: PUSH
72853: EMPTY
72854: LIST
72855: LIST
72856: PUSH
72857: LD_INT 3
72859: PUSH
72860: LD_INT 1
72862: NEG
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: PUSH
72868: LD_INT 4
72870: PUSH
72871: LD_INT 0
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: PUSH
72878: LD_INT 4
72880: PUSH
72881: LD_INT 1
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: PUSH
72888: LD_INT 3
72890: PUSH
72891: LD_INT 1
72893: PUSH
72894: EMPTY
72895: LIST
72896: LIST
72897: PUSH
72898: LD_INT 2
72900: PUSH
72901: LD_INT 0
72903: PUSH
72904: EMPTY
72905: LIST
72906: LIST
72907: PUSH
72908: LD_INT 2
72910: PUSH
72911: LD_INT 1
72913: NEG
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: PUSH
72919: LD_INT 2
72921: PUSH
72922: LD_INT 2
72924: NEG
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: PUSH
72930: LD_INT 4
72932: PUSH
72933: LD_INT 2
72935: PUSH
72936: EMPTY
72937: LIST
72938: LIST
72939: PUSH
72940: LD_INT 4
72942: PUSH
72943: LD_INT 4
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: PUSH
72950: LD_INT 4
72952: PUSH
72953: LD_INT 3
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: PUSH
72960: LD_INT 5
72962: PUSH
72963: LD_INT 4
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: PUSH
72970: LD_INT 5
72972: PUSH
72973: LD_INT 5
72975: PUSH
72976: EMPTY
72977: LIST
72978: LIST
72979: PUSH
72980: LD_INT 4
72982: PUSH
72983: LD_INT 5
72985: PUSH
72986: EMPTY
72987: LIST
72988: LIST
72989: PUSH
72990: LD_INT 3
72992: PUSH
72993: LD_INT 4
72995: PUSH
72996: EMPTY
72997: LIST
72998: LIST
72999: PUSH
73000: LD_INT 3
73002: PUSH
73003: LD_INT 3
73005: PUSH
73006: EMPTY
73007: LIST
73008: LIST
73009: PUSH
73010: LD_INT 5
73012: PUSH
73013: LD_INT 3
73015: PUSH
73016: EMPTY
73017: LIST
73018: LIST
73019: PUSH
73020: LD_INT 3
73022: PUSH
73023: LD_INT 5
73025: PUSH
73026: EMPTY
73027: LIST
73028: LIST
73029: PUSH
73030: LD_INT 0
73032: PUSH
73033: LD_INT 3
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: PUSH
73040: LD_INT 0
73042: PUSH
73043: LD_INT 2
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: PUSH
73050: LD_INT 1
73052: PUSH
73053: LD_INT 3
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: PUSH
73060: LD_INT 1
73062: PUSH
73063: LD_INT 4
73065: PUSH
73066: EMPTY
73067: LIST
73068: LIST
73069: PUSH
73070: LD_INT 0
73072: PUSH
73073: LD_INT 4
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: LD_INT 1
73082: NEG
73083: PUSH
73084: LD_INT 3
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: PUSH
73091: LD_INT 1
73093: NEG
73094: PUSH
73095: LD_INT 2
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PUSH
73102: LD_INT 2
73104: PUSH
73105: LD_INT 4
73107: PUSH
73108: EMPTY
73109: LIST
73110: LIST
73111: PUSH
73112: LD_INT 2
73114: NEG
73115: PUSH
73116: LD_INT 2
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: PUSH
73123: LD_INT 4
73125: NEG
73126: PUSH
73127: LD_INT 0
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 4
73136: NEG
73137: PUSH
73138: LD_INT 1
73140: NEG
73141: PUSH
73142: EMPTY
73143: LIST
73144: LIST
73145: PUSH
73146: LD_INT 3
73148: NEG
73149: PUSH
73150: LD_INT 0
73152: PUSH
73153: EMPTY
73154: LIST
73155: LIST
73156: PUSH
73157: LD_INT 3
73159: NEG
73160: PUSH
73161: LD_INT 1
73163: PUSH
73164: EMPTY
73165: LIST
73166: LIST
73167: PUSH
73168: LD_INT 4
73170: NEG
73171: PUSH
73172: LD_INT 1
73174: PUSH
73175: EMPTY
73176: LIST
73177: LIST
73178: PUSH
73179: LD_INT 5
73181: NEG
73182: PUSH
73183: LD_INT 0
73185: PUSH
73186: EMPTY
73187: LIST
73188: LIST
73189: PUSH
73190: LD_INT 5
73192: NEG
73193: PUSH
73194: LD_INT 1
73196: NEG
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: LD_INT 5
73204: NEG
73205: PUSH
73206: LD_INT 2
73208: NEG
73209: PUSH
73210: EMPTY
73211: LIST
73212: LIST
73213: PUSH
73214: LD_INT 3
73216: NEG
73217: PUSH
73218: LD_INT 2
73220: PUSH
73221: EMPTY
73222: LIST
73223: LIST
73224: PUSH
73225: EMPTY
73226: LIST
73227: LIST
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: LIST
73234: LIST
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: LIST
73247: LIST
73248: LIST
73249: LIST
73250: LIST
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: LIST
73256: LIST
73257: LIST
73258: LIST
73259: LIST
73260: LIST
73261: LIST
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: LIST
73269: LIST
73270: LIST
73271: ST_TO_ADDR
// end ; end ;
73272: GO 73275
73274: POP
// case btype of b_depot , b_warehouse :
73275: LD_VAR 0 1
73279: PUSH
73280: LD_INT 0
73282: DOUBLE
73283: EQUAL
73284: IFTRUE 73294
73286: LD_INT 1
73288: DOUBLE
73289: EQUAL
73290: IFTRUE 73294
73292: GO 73495
73294: POP
// case nation of nation_american :
73295: LD_VAR 0 5
73299: PUSH
73300: LD_INT 1
73302: DOUBLE
73303: EQUAL
73304: IFTRUE 73308
73306: GO 73364
73308: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73309: LD_ADDR_VAR 0 9
73313: PUSH
73314: LD_VAR 0 11
73318: PUSH
73319: LD_VAR 0 12
73323: PUSH
73324: LD_VAR 0 13
73328: PUSH
73329: LD_VAR 0 14
73333: PUSH
73334: LD_VAR 0 15
73338: PUSH
73339: LD_VAR 0 16
73343: PUSH
73344: EMPTY
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: PUSH
73352: LD_VAR 0 4
73356: PUSH
73357: LD_INT 1
73359: PLUS
73360: ARRAY
73361: ST_TO_ADDR
73362: GO 73493
73364: LD_INT 2
73366: DOUBLE
73367: EQUAL
73368: IFTRUE 73372
73370: GO 73428
73372: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73373: LD_ADDR_VAR 0 9
73377: PUSH
73378: LD_VAR 0 17
73382: PUSH
73383: LD_VAR 0 18
73387: PUSH
73388: LD_VAR 0 19
73392: PUSH
73393: LD_VAR 0 20
73397: PUSH
73398: LD_VAR 0 21
73402: PUSH
73403: LD_VAR 0 22
73407: PUSH
73408: EMPTY
73409: LIST
73410: LIST
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: PUSH
73416: LD_VAR 0 4
73420: PUSH
73421: LD_INT 1
73423: PLUS
73424: ARRAY
73425: ST_TO_ADDR
73426: GO 73493
73428: LD_INT 3
73430: DOUBLE
73431: EQUAL
73432: IFTRUE 73436
73434: GO 73492
73436: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73437: LD_ADDR_VAR 0 9
73441: PUSH
73442: LD_VAR 0 23
73446: PUSH
73447: LD_VAR 0 24
73451: PUSH
73452: LD_VAR 0 25
73456: PUSH
73457: LD_VAR 0 26
73461: PUSH
73462: LD_VAR 0 27
73466: PUSH
73467: LD_VAR 0 28
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: LIST
73476: LIST
73477: LIST
73478: LIST
73479: PUSH
73480: LD_VAR 0 4
73484: PUSH
73485: LD_INT 1
73487: PLUS
73488: ARRAY
73489: ST_TO_ADDR
73490: GO 73493
73492: POP
73493: GO 74048
73495: LD_INT 2
73497: DOUBLE
73498: EQUAL
73499: IFTRUE 73509
73501: LD_INT 3
73503: DOUBLE
73504: EQUAL
73505: IFTRUE 73509
73507: GO 73565
73509: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73510: LD_ADDR_VAR 0 9
73514: PUSH
73515: LD_VAR 0 29
73519: PUSH
73520: LD_VAR 0 30
73524: PUSH
73525: LD_VAR 0 31
73529: PUSH
73530: LD_VAR 0 32
73534: PUSH
73535: LD_VAR 0 33
73539: PUSH
73540: LD_VAR 0 34
73544: PUSH
73545: EMPTY
73546: LIST
73547: LIST
73548: LIST
73549: LIST
73550: LIST
73551: LIST
73552: PUSH
73553: LD_VAR 0 4
73557: PUSH
73558: LD_INT 1
73560: PLUS
73561: ARRAY
73562: ST_TO_ADDR
73563: GO 74048
73565: LD_INT 16
73567: DOUBLE
73568: EQUAL
73569: IFTRUE 73627
73571: LD_INT 17
73573: DOUBLE
73574: EQUAL
73575: IFTRUE 73627
73577: LD_INT 18
73579: DOUBLE
73580: EQUAL
73581: IFTRUE 73627
73583: LD_INT 19
73585: DOUBLE
73586: EQUAL
73587: IFTRUE 73627
73589: LD_INT 22
73591: DOUBLE
73592: EQUAL
73593: IFTRUE 73627
73595: LD_INT 20
73597: DOUBLE
73598: EQUAL
73599: IFTRUE 73627
73601: LD_INT 21
73603: DOUBLE
73604: EQUAL
73605: IFTRUE 73627
73607: LD_INT 23
73609: DOUBLE
73610: EQUAL
73611: IFTRUE 73627
73613: LD_INT 24
73615: DOUBLE
73616: EQUAL
73617: IFTRUE 73627
73619: LD_INT 25
73621: DOUBLE
73622: EQUAL
73623: IFTRUE 73627
73625: GO 73683
73627: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73628: LD_ADDR_VAR 0 9
73632: PUSH
73633: LD_VAR 0 35
73637: PUSH
73638: LD_VAR 0 36
73642: PUSH
73643: LD_VAR 0 37
73647: PUSH
73648: LD_VAR 0 38
73652: PUSH
73653: LD_VAR 0 39
73657: PUSH
73658: LD_VAR 0 40
73662: PUSH
73663: EMPTY
73664: LIST
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: PUSH
73671: LD_VAR 0 4
73675: PUSH
73676: LD_INT 1
73678: PLUS
73679: ARRAY
73680: ST_TO_ADDR
73681: GO 74048
73683: LD_INT 6
73685: DOUBLE
73686: EQUAL
73687: IFTRUE 73739
73689: LD_INT 7
73691: DOUBLE
73692: EQUAL
73693: IFTRUE 73739
73695: LD_INT 8
73697: DOUBLE
73698: EQUAL
73699: IFTRUE 73739
73701: LD_INT 13
73703: DOUBLE
73704: EQUAL
73705: IFTRUE 73739
73707: LD_INT 12
73709: DOUBLE
73710: EQUAL
73711: IFTRUE 73739
73713: LD_INT 15
73715: DOUBLE
73716: EQUAL
73717: IFTRUE 73739
73719: LD_INT 11
73721: DOUBLE
73722: EQUAL
73723: IFTRUE 73739
73725: LD_INT 14
73727: DOUBLE
73728: EQUAL
73729: IFTRUE 73739
73731: LD_INT 10
73733: DOUBLE
73734: EQUAL
73735: IFTRUE 73739
73737: GO 73795
73739: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73740: LD_ADDR_VAR 0 9
73744: PUSH
73745: LD_VAR 0 41
73749: PUSH
73750: LD_VAR 0 42
73754: PUSH
73755: LD_VAR 0 43
73759: PUSH
73760: LD_VAR 0 44
73764: PUSH
73765: LD_VAR 0 45
73769: PUSH
73770: LD_VAR 0 46
73774: PUSH
73775: EMPTY
73776: LIST
73777: LIST
73778: LIST
73779: LIST
73780: LIST
73781: LIST
73782: PUSH
73783: LD_VAR 0 4
73787: PUSH
73788: LD_INT 1
73790: PLUS
73791: ARRAY
73792: ST_TO_ADDR
73793: GO 74048
73795: LD_INT 36
73797: DOUBLE
73798: EQUAL
73799: IFTRUE 73803
73801: GO 73859
73803: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73804: LD_ADDR_VAR 0 9
73808: PUSH
73809: LD_VAR 0 47
73813: PUSH
73814: LD_VAR 0 48
73818: PUSH
73819: LD_VAR 0 49
73823: PUSH
73824: LD_VAR 0 50
73828: PUSH
73829: LD_VAR 0 51
73833: PUSH
73834: LD_VAR 0 52
73838: PUSH
73839: EMPTY
73840: LIST
73841: LIST
73842: LIST
73843: LIST
73844: LIST
73845: LIST
73846: PUSH
73847: LD_VAR 0 4
73851: PUSH
73852: LD_INT 1
73854: PLUS
73855: ARRAY
73856: ST_TO_ADDR
73857: GO 74048
73859: LD_INT 4
73861: DOUBLE
73862: EQUAL
73863: IFTRUE 73885
73865: LD_INT 5
73867: DOUBLE
73868: EQUAL
73869: IFTRUE 73885
73871: LD_INT 34
73873: DOUBLE
73874: EQUAL
73875: IFTRUE 73885
73877: LD_INT 37
73879: DOUBLE
73880: EQUAL
73881: IFTRUE 73885
73883: GO 73941
73885: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73886: LD_ADDR_VAR 0 9
73890: PUSH
73891: LD_VAR 0 53
73895: PUSH
73896: LD_VAR 0 54
73900: PUSH
73901: LD_VAR 0 55
73905: PUSH
73906: LD_VAR 0 56
73910: PUSH
73911: LD_VAR 0 57
73915: PUSH
73916: LD_VAR 0 58
73920: PUSH
73921: EMPTY
73922: LIST
73923: LIST
73924: LIST
73925: LIST
73926: LIST
73927: LIST
73928: PUSH
73929: LD_VAR 0 4
73933: PUSH
73934: LD_INT 1
73936: PLUS
73937: ARRAY
73938: ST_TO_ADDR
73939: GO 74048
73941: LD_INT 31
73943: DOUBLE
73944: EQUAL
73945: IFTRUE 73991
73947: LD_INT 32
73949: DOUBLE
73950: EQUAL
73951: IFTRUE 73991
73953: LD_INT 33
73955: DOUBLE
73956: EQUAL
73957: IFTRUE 73991
73959: LD_INT 27
73961: DOUBLE
73962: EQUAL
73963: IFTRUE 73991
73965: LD_INT 26
73967: DOUBLE
73968: EQUAL
73969: IFTRUE 73991
73971: LD_INT 28
73973: DOUBLE
73974: EQUAL
73975: IFTRUE 73991
73977: LD_INT 29
73979: DOUBLE
73980: EQUAL
73981: IFTRUE 73991
73983: LD_INT 30
73985: DOUBLE
73986: EQUAL
73987: IFTRUE 73991
73989: GO 74047
73991: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73992: LD_ADDR_VAR 0 9
73996: PUSH
73997: LD_VAR 0 59
74001: PUSH
74002: LD_VAR 0 60
74006: PUSH
74007: LD_VAR 0 61
74011: PUSH
74012: LD_VAR 0 62
74016: PUSH
74017: LD_VAR 0 63
74021: PUSH
74022: LD_VAR 0 64
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: LIST
74031: LIST
74032: LIST
74033: LIST
74034: PUSH
74035: LD_VAR 0 4
74039: PUSH
74040: LD_INT 1
74042: PLUS
74043: ARRAY
74044: ST_TO_ADDR
74045: GO 74048
74047: POP
// temp_list2 = [ ] ;
74048: LD_ADDR_VAR 0 10
74052: PUSH
74053: EMPTY
74054: ST_TO_ADDR
// for i in temp_list do
74055: LD_ADDR_VAR 0 8
74059: PUSH
74060: LD_VAR 0 9
74064: PUSH
74065: FOR_IN
74066: IFFALSE 74118
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74068: LD_ADDR_VAR 0 10
74072: PUSH
74073: LD_VAR 0 10
74077: PUSH
74078: LD_VAR 0 8
74082: PUSH
74083: LD_INT 1
74085: ARRAY
74086: PUSH
74087: LD_VAR 0 2
74091: PLUS
74092: PUSH
74093: LD_VAR 0 8
74097: PUSH
74098: LD_INT 2
74100: ARRAY
74101: PUSH
74102: LD_VAR 0 3
74106: PLUS
74107: PUSH
74108: EMPTY
74109: LIST
74110: LIST
74111: PUSH
74112: EMPTY
74113: LIST
74114: ADD
74115: ST_TO_ADDR
74116: GO 74065
74118: POP
74119: POP
// result = temp_list2 ;
74120: LD_ADDR_VAR 0 7
74124: PUSH
74125: LD_VAR 0 10
74129: ST_TO_ADDR
// end ;
74130: LD_VAR 0 7
74134: RET
// export function EnemyInRange ( unit , dist ) ; begin
74135: LD_INT 0
74137: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74138: LD_ADDR_VAR 0 3
74142: PUSH
74143: LD_VAR 0 1
74147: PPUSH
74148: CALL_OW 255
74152: PPUSH
74153: LD_VAR 0 1
74157: PPUSH
74158: CALL_OW 250
74162: PPUSH
74163: LD_VAR 0 1
74167: PPUSH
74168: CALL_OW 251
74172: PPUSH
74173: LD_VAR 0 2
74177: PPUSH
74178: CALL 47392 0 4
74182: PUSH
74183: LD_INT 4
74185: ARRAY
74186: ST_TO_ADDR
// end ;
74187: LD_VAR 0 3
74191: RET
// export function PlayerSeeMe ( unit ) ; begin
74192: LD_INT 0
74194: PPUSH
// result := See ( your_side , unit ) ;
74195: LD_ADDR_VAR 0 2
74199: PUSH
74200: LD_OWVAR 2
74204: PPUSH
74205: LD_VAR 0 1
74209: PPUSH
74210: CALL_OW 292
74214: ST_TO_ADDR
// end ;
74215: LD_VAR 0 2
74219: RET
// export function ReverseDir ( unit ) ; begin
74220: LD_INT 0
74222: PPUSH
// if not unit then
74223: LD_VAR 0 1
74227: NOT
74228: IFFALSE 74232
// exit ;
74230: GO 74255
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74232: LD_ADDR_VAR 0 2
74236: PUSH
74237: LD_VAR 0 1
74241: PPUSH
74242: CALL_OW 254
74246: PUSH
74247: LD_INT 3
74249: PLUS
74250: PUSH
74251: LD_INT 6
74253: MOD
74254: ST_TO_ADDR
// end ;
74255: LD_VAR 0 2
74259: RET
// export function ReverseArray ( array ) ; var i ; begin
74260: LD_INT 0
74262: PPUSH
74263: PPUSH
// if not array then
74264: LD_VAR 0 1
74268: NOT
74269: IFFALSE 74273
// exit ;
74271: GO 74328
// result := [ ] ;
74273: LD_ADDR_VAR 0 2
74277: PUSH
74278: EMPTY
74279: ST_TO_ADDR
// for i := array downto 1 do
74280: LD_ADDR_VAR 0 3
74284: PUSH
74285: DOUBLE
74286: LD_VAR 0 1
74290: INC
74291: ST_TO_ADDR
74292: LD_INT 1
74294: PUSH
74295: FOR_DOWNTO
74296: IFFALSE 74326
// result := Join ( result , array [ i ] ) ;
74298: LD_ADDR_VAR 0 2
74302: PUSH
74303: LD_VAR 0 2
74307: PPUSH
74308: LD_VAR 0 1
74312: PUSH
74313: LD_VAR 0 3
74317: ARRAY
74318: PPUSH
74319: CALL 79170 0 2
74323: ST_TO_ADDR
74324: GO 74295
74326: POP
74327: POP
// end ;
74328: LD_VAR 0 2
74332: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74333: LD_INT 0
74335: PPUSH
74336: PPUSH
74337: PPUSH
74338: PPUSH
74339: PPUSH
74340: PPUSH
// if not unit or not hexes then
74341: LD_VAR 0 1
74345: NOT
74346: IFTRUE 74355
74348: PUSH
74349: LD_VAR 0 2
74353: NOT
74354: OR
74355: IFFALSE 74359
// exit ;
74357: GO 74482
// dist := 9999 ;
74359: LD_ADDR_VAR 0 5
74363: PUSH
74364: LD_INT 9999
74366: ST_TO_ADDR
// for i = 1 to hexes do
74367: LD_ADDR_VAR 0 4
74371: PUSH
74372: DOUBLE
74373: LD_INT 1
74375: DEC
74376: ST_TO_ADDR
74377: LD_VAR 0 2
74381: PUSH
74382: FOR_TO
74383: IFFALSE 74470
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74385: LD_ADDR_VAR 0 6
74389: PUSH
74390: LD_VAR 0 1
74394: PPUSH
74395: LD_VAR 0 2
74399: PUSH
74400: LD_VAR 0 4
74404: ARRAY
74405: PUSH
74406: LD_INT 1
74408: ARRAY
74409: PPUSH
74410: LD_VAR 0 2
74414: PUSH
74415: LD_VAR 0 4
74419: ARRAY
74420: PUSH
74421: LD_INT 2
74423: ARRAY
74424: PPUSH
74425: CALL_OW 297
74429: ST_TO_ADDR
// if tdist < dist then
74430: LD_VAR 0 6
74434: PUSH
74435: LD_VAR 0 5
74439: LESS
74440: IFFALSE 74468
// begin hex := hexes [ i ] ;
74442: LD_ADDR_VAR 0 8
74446: PUSH
74447: LD_VAR 0 2
74451: PUSH
74452: LD_VAR 0 4
74456: ARRAY
74457: ST_TO_ADDR
// dist := tdist ;
74458: LD_ADDR_VAR 0 5
74462: PUSH
74463: LD_VAR 0 6
74467: ST_TO_ADDR
// end ; end ;
74468: GO 74382
74470: POP
74471: POP
// result := hex ;
74472: LD_ADDR_VAR 0 3
74476: PUSH
74477: LD_VAR 0 8
74481: ST_TO_ADDR
// end ;
74482: LD_VAR 0 3
74486: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74487: LD_INT 0
74489: PPUSH
74490: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74491: LD_VAR 0 1
74495: NOT
74496: IFTRUE 74535
74498: PUSH
74499: LD_VAR 0 1
74503: PUSH
74504: LD_INT 21
74506: PUSH
74507: LD_INT 2
74509: PUSH
74510: EMPTY
74511: LIST
74512: LIST
74513: PUSH
74514: LD_INT 23
74516: PUSH
74517: LD_INT 2
74519: PUSH
74520: EMPTY
74521: LIST
74522: LIST
74523: PUSH
74524: EMPTY
74525: LIST
74526: LIST
74527: PPUSH
74528: CALL_OW 69
74532: IN
74533: NOT
74534: OR
74535: IFFALSE 74539
// exit ;
74537: GO 74586
// for i = 1 to 3 do
74539: LD_ADDR_VAR 0 3
74543: PUSH
74544: DOUBLE
74545: LD_INT 1
74547: DEC
74548: ST_TO_ADDR
74549: LD_INT 3
74551: PUSH
74552: FOR_TO
74553: IFFALSE 74584
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74555: LD_VAR 0 1
74559: PPUSH
74560: CALL_OW 250
74564: PPUSH
74565: LD_VAR 0 1
74569: PPUSH
74570: CALL_OW 251
74574: PPUSH
74575: LD_INT 1
74577: PPUSH
74578: CALL_OW 453
74582: GO 74552
74584: POP
74585: POP
// end ;
74586: LD_VAR 0 2
74590: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74591: LD_INT 0
74593: PPUSH
74594: PPUSH
74595: PPUSH
74596: PPUSH
74597: PPUSH
74598: PPUSH
// if not unit or not enemy_unit then
74599: LD_VAR 0 1
74603: NOT
74604: IFTRUE 74613
74606: PUSH
74607: LD_VAR 0 2
74611: NOT
74612: OR
74613: IFFALSE 74617
// exit ;
74615: GO 75088
// if GetLives ( i ) < 250 then
74617: LD_VAR 0 4
74621: PPUSH
74622: CALL_OW 256
74626: PUSH
74627: LD_INT 250
74629: LESS
74630: IFFALSE 74643
// begin ComAutodestruct ( i ) ;
74632: LD_VAR 0 4
74636: PPUSH
74637: CALL 74487 0 1
// exit ;
74641: GO 75088
// end ; x := GetX ( enemy_unit ) ;
74643: LD_ADDR_VAR 0 7
74647: PUSH
74648: LD_VAR 0 2
74652: PPUSH
74653: CALL_OW 250
74657: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74658: LD_ADDR_VAR 0 8
74662: PUSH
74663: LD_VAR 0 2
74667: PPUSH
74668: CALL_OW 251
74672: ST_TO_ADDR
// if not x or not y then
74673: LD_VAR 0 7
74677: NOT
74678: IFTRUE 74687
74680: PUSH
74681: LD_VAR 0 8
74685: NOT
74686: OR
74687: IFFALSE 74691
// exit ;
74689: GO 75088
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74691: LD_ADDR_VAR 0 6
74695: PUSH
74696: LD_VAR 0 7
74700: PPUSH
74701: LD_INT 0
74703: PPUSH
74704: LD_INT 4
74706: PPUSH
74707: CALL_OW 272
74711: PUSH
74712: LD_VAR 0 8
74716: PPUSH
74717: LD_INT 0
74719: PPUSH
74720: LD_INT 4
74722: PPUSH
74723: CALL_OW 273
74727: PUSH
74728: EMPTY
74729: LIST
74730: LIST
74731: PUSH
74732: LD_VAR 0 7
74736: PPUSH
74737: LD_INT 1
74739: PPUSH
74740: LD_INT 4
74742: PPUSH
74743: CALL_OW 272
74747: PUSH
74748: LD_VAR 0 8
74752: PPUSH
74753: LD_INT 1
74755: PPUSH
74756: LD_INT 4
74758: PPUSH
74759: CALL_OW 273
74763: PUSH
74764: EMPTY
74765: LIST
74766: LIST
74767: PUSH
74768: LD_VAR 0 7
74772: PPUSH
74773: LD_INT 2
74775: PPUSH
74776: LD_INT 4
74778: PPUSH
74779: CALL_OW 272
74783: PUSH
74784: LD_VAR 0 8
74788: PPUSH
74789: LD_INT 2
74791: PPUSH
74792: LD_INT 4
74794: PPUSH
74795: CALL_OW 273
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: PUSH
74804: LD_VAR 0 7
74808: PPUSH
74809: LD_INT 3
74811: PPUSH
74812: LD_INT 4
74814: PPUSH
74815: CALL_OW 272
74819: PUSH
74820: LD_VAR 0 8
74824: PPUSH
74825: LD_INT 3
74827: PPUSH
74828: LD_INT 4
74830: PPUSH
74831: CALL_OW 273
74835: PUSH
74836: EMPTY
74837: LIST
74838: LIST
74839: PUSH
74840: LD_VAR 0 7
74844: PPUSH
74845: LD_INT 4
74847: PPUSH
74848: LD_INT 4
74850: PPUSH
74851: CALL_OW 272
74855: PUSH
74856: LD_VAR 0 8
74860: PPUSH
74861: LD_INT 4
74863: PPUSH
74864: LD_INT 4
74866: PPUSH
74867: CALL_OW 273
74871: PUSH
74872: EMPTY
74873: LIST
74874: LIST
74875: PUSH
74876: LD_VAR 0 7
74880: PPUSH
74881: LD_INT 5
74883: PPUSH
74884: LD_INT 4
74886: PPUSH
74887: CALL_OW 272
74891: PUSH
74892: LD_VAR 0 8
74896: PPUSH
74897: LD_INT 5
74899: PPUSH
74900: LD_INT 4
74902: PPUSH
74903: CALL_OW 273
74907: PUSH
74908: EMPTY
74909: LIST
74910: LIST
74911: PUSH
74912: EMPTY
74913: LIST
74914: LIST
74915: LIST
74916: LIST
74917: LIST
74918: LIST
74919: ST_TO_ADDR
// for i = tmp downto 1 do
74920: LD_ADDR_VAR 0 4
74924: PUSH
74925: DOUBLE
74926: LD_VAR 0 6
74930: INC
74931: ST_TO_ADDR
74932: LD_INT 1
74934: PUSH
74935: FOR_DOWNTO
74936: IFFALSE 75039
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74938: LD_VAR 0 6
74942: PUSH
74943: LD_VAR 0 4
74947: ARRAY
74948: PUSH
74949: LD_INT 1
74951: ARRAY
74952: PPUSH
74953: LD_VAR 0 6
74957: PUSH
74958: LD_VAR 0 4
74962: ARRAY
74963: PUSH
74964: LD_INT 2
74966: ARRAY
74967: PPUSH
74968: CALL_OW 488
74972: NOT
74973: IFTRUE 75015
74975: PUSH
74976: LD_VAR 0 6
74980: PUSH
74981: LD_VAR 0 4
74985: ARRAY
74986: PUSH
74987: LD_INT 1
74989: ARRAY
74990: PPUSH
74991: LD_VAR 0 6
74995: PUSH
74996: LD_VAR 0 4
75000: ARRAY
75001: PUSH
75002: LD_INT 2
75004: ARRAY
75005: PPUSH
75006: CALL_OW 428
75010: PUSH
75011: LD_INT 0
75013: NONEQUAL
75014: OR
75015: IFFALSE 75037
// tmp := Delete ( tmp , i ) ;
75017: LD_ADDR_VAR 0 6
75021: PUSH
75022: LD_VAR 0 6
75026: PPUSH
75027: LD_VAR 0 4
75031: PPUSH
75032: CALL_OW 3
75036: ST_TO_ADDR
75037: GO 74935
75039: POP
75040: POP
// j := GetClosestHex ( unit , tmp ) ;
75041: LD_ADDR_VAR 0 5
75045: PUSH
75046: LD_VAR 0 1
75050: PPUSH
75051: LD_VAR 0 6
75055: PPUSH
75056: CALL 74333 0 2
75060: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75061: LD_VAR 0 1
75065: PPUSH
75066: LD_VAR 0 5
75070: PUSH
75071: LD_INT 1
75073: ARRAY
75074: PPUSH
75075: LD_VAR 0 5
75079: PUSH
75080: LD_INT 2
75082: ARRAY
75083: PPUSH
75084: CALL_OW 111
// end ;
75088: LD_VAR 0 3
75092: RET
// export function PrepareApemanSoldier ( ) ; begin
75093: LD_INT 0
75095: PPUSH
// uc_nation := 0 ;
75096: LD_ADDR_OWVAR 21
75100: PUSH
75101: LD_INT 0
75103: ST_TO_ADDR
// hc_sex := sex_male ;
75104: LD_ADDR_OWVAR 27
75108: PUSH
75109: LD_INT 1
75111: ST_TO_ADDR
// hc_name :=  ;
75112: LD_ADDR_OWVAR 26
75116: PUSH
75117: LD_STRING 
75119: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75120: LD_ADDR_OWVAR 28
75124: PUSH
75125: LD_INT 15
75127: ST_TO_ADDR
// hc_gallery :=  ;
75128: LD_ADDR_OWVAR 33
75132: PUSH
75133: LD_STRING 
75135: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75136: LD_ADDR_OWVAR 31
75140: PUSH
75141: LD_INT 0
75143: PPUSH
75144: LD_INT 3
75146: PPUSH
75147: CALL_OW 12
75151: PUSH
75152: LD_INT 0
75154: PPUSH
75155: LD_INT 3
75157: PPUSH
75158: CALL_OW 12
75162: PUSH
75163: LD_INT 0
75165: PUSH
75166: LD_INT 0
75168: PUSH
75169: EMPTY
75170: LIST
75171: LIST
75172: LIST
75173: LIST
75174: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75175: LD_ADDR_OWVAR 29
75179: PUSH
75180: LD_INT 12
75182: PUSH
75183: LD_INT 12
75185: PUSH
75186: EMPTY
75187: LIST
75188: LIST
75189: ST_TO_ADDR
// end ;
75190: LD_VAR 0 1
75194: RET
// export function PrepareApemanEngineer ( ) ; begin
75195: LD_INT 0
75197: PPUSH
// uc_nation := 0 ;
75198: LD_ADDR_OWVAR 21
75202: PUSH
75203: LD_INT 0
75205: ST_TO_ADDR
// hc_sex := sex_male ;
75206: LD_ADDR_OWVAR 27
75210: PUSH
75211: LD_INT 1
75213: ST_TO_ADDR
// hc_name :=  ;
75214: LD_ADDR_OWVAR 26
75218: PUSH
75219: LD_STRING 
75221: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75222: LD_ADDR_OWVAR 28
75226: PUSH
75227: LD_INT 16
75229: ST_TO_ADDR
// hc_gallery :=  ;
75230: LD_ADDR_OWVAR 33
75234: PUSH
75235: LD_STRING 
75237: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75238: LD_ADDR_OWVAR 31
75242: PUSH
75243: LD_INT 0
75245: PPUSH
75246: LD_INT 3
75248: PPUSH
75249: CALL_OW 12
75253: PUSH
75254: LD_INT 0
75256: PPUSH
75257: LD_INT 3
75259: PPUSH
75260: CALL_OW 12
75264: PUSH
75265: LD_INT 0
75267: PUSH
75268: LD_INT 0
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: LIST
75275: LIST
75276: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75277: LD_ADDR_OWVAR 29
75281: PUSH
75282: LD_INT 12
75284: PUSH
75285: LD_INT 12
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: ST_TO_ADDR
// end ;
75292: LD_VAR 0 1
75296: RET
// export function PrepareApeman ( agressivity ) ; begin
75297: LD_INT 0
75299: PPUSH
// uc_side := 0 ;
75300: LD_ADDR_OWVAR 20
75304: PUSH
75305: LD_INT 0
75307: ST_TO_ADDR
// uc_nation := 0 ;
75308: LD_ADDR_OWVAR 21
75312: PUSH
75313: LD_INT 0
75315: ST_TO_ADDR
// hc_sex := sex_male ;
75316: LD_ADDR_OWVAR 27
75320: PUSH
75321: LD_INT 1
75323: ST_TO_ADDR
// hc_class := class_apeman ;
75324: LD_ADDR_OWVAR 28
75328: PUSH
75329: LD_INT 12
75331: ST_TO_ADDR
// hc_gallery :=  ;
75332: LD_ADDR_OWVAR 33
75336: PUSH
75337: LD_STRING 
75339: ST_TO_ADDR
// hc_name :=  ;
75340: LD_ADDR_OWVAR 26
75344: PUSH
75345: LD_STRING 
75347: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75348: LD_ADDR_OWVAR 29
75352: PUSH
75353: LD_INT 12
75355: PUSH
75356: LD_INT 12
75358: PUSH
75359: EMPTY
75360: LIST
75361: LIST
75362: ST_TO_ADDR
// if agressivity = 0 then
75363: LD_VAR 0 1
75367: PUSH
75368: LD_INT 0
75370: EQUAL
75371: IFFALSE 75383
// hc_agressivity := 0 else
75373: LD_ADDR_OWVAR 35
75377: PUSH
75378: LD_INT 0
75380: ST_TO_ADDR
75381: GO 75404
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75383: LD_ADDR_OWVAR 35
75387: PUSH
75388: LD_VAR 0 1
75392: NEG
75393: PPUSH
75394: LD_VAR 0 1
75398: PPUSH
75399: CALL_OW 12
75403: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75404: LD_ADDR_OWVAR 31
75408: PUSH
75409: LD_INT 0
75411: PPUSH
75412: LD_INT 3
75414: PPUSH
75415: CALL_OW 12
75419: PUSH
75420: LD_INT 0
75422: PPUSH
75423: LD_INT 3
75425: PPUSH
75426: CALL_OW 12
75430: PUSH
75431: LD_INT 0
75433: PUSH
75434: LD_INT 0
75436: PUSH
75437: EMPTY
75438: LIST
75439: LIST
75440: LIST
75441: LIST
75442: ST_TO_ADDR
// end ;
75443: LD_VAR 0 2
75447: RET
// export function PrepareTiger ( agressivity ) ; begin
75448: LD_INT 0
75450: PPUSH
// uc_side := 0 ;
75451: LD_ADDR_OWVAR 20
75455: PUSH
75456: LD_INT 0
75458: ST_TO_ADDR
// uc_nation := 0 ;
75459: LD_ADDR_OWVAR 21
75463: PUSH
75464: LD_INT 0
75466: ST_TO_ADDR
// InitHc ;
75467: CALL_OW 19
// hc_class := class_tiger ;
75471: LD_ADDR_OWVAR 28
75475: PUSH
75476: LD_INT 14
75478: ST_TO_ADDR
// hc_gallery :=  ;
75479: LD_ADDR_OWVAR 33
75483: PUSH
75484: LD_STRING 
75486: ST_TO_ADDR
// hc_name :=  ;
75487: LD_ADDR_OWVAR 26
75491: PUSH
75492: LD_STRING 
75494: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75495: LD_ADDR_OWVAR 35
75499: PUSH
75500: LD_VAR 0 1
75504: NEG
75505: PPUSH
75506: LD_VAR 0 1
75510: PPUSH
75511: CALL_OW 12
75515: ST_TO_ADDR
// end ;
75516: LD_VAR 0 2
75520: RET
// export function PrepareEnchidna ( ) ; begin
75521: LD_INT 0
75523: PPUSH
// uc_side := 0 ;
75524: LD_ADDR_OWVAR 20
75528: PUSH
75529: LD_INT 0
75531: ST_TO_ADDR
// uc_nation := 0 ;
75532: LD_ADDR_OWVAR 21
75536: PUSH
75537: LD_INT 0
75539: ST_TO_ADDR
// InitHc ;
75540: CALL_OW 19
// hc_class := class_baggie ;
75544: LD_ADDR_OWVAR 28
75548: PUSH
75549: LD_INT 13
75551: ST_TO_ADDR
// hc_gallery :=  ;
75552: LD_ADDR_OWVAR 33
75556: PUSH
75557: LD_STRING 
75559: ST_TO_ADDR
// hc_name :=  ;
75560: LD_ADDR_OWVAR 26
75564: PUSH
75565: LD_STRING 
75567: ST_TO_ADDR
// end ;
75568: LD_VAR 0 1
75572: RET
// export function PrepareFrog ( ) ; begin
75573: LD_INT 0
75575: PPUSH
// uc_side := 0 ;
75576: LD_ADDR_OWVAR 20
75580: PUSH
75581: LD_INT 0
75583: ST_TO_ADDR
// uc_nation := 0 ;
75584: LD_ADDR_OWVAR 21
75588: PUSH
75589: LD_INT 0
75591: ST_TO_ADDR
// InitHc ;
75592: CALL_OW 19
// hc_class := class_frog ;
75596: LD_ADDR_OWVAR 28
75600: PUSH
75601: LD_INT 19
75603: ST_TO_ADDR
// hc_gallery :=  ;
75604: LD_ADDR_OWVAR 33
75608: PUSH
75609: LD_STRING 
75611: ST_TO_ADDR
// hc_name :=  ;
75612: LD_ADDR_OWVAR 26
75616: PUSH
75617: LD_STRING 
75619: ST_TO_ADDR
// end ;
75620: LD_VAR 0 1
75624: RET
// export function PrepareFish ( ) ; begin
75625: LD_INT 0
75627: PPUSH
// uc_side := 0 ;
75628: LD_ADDR_OWVAR 20
75632: PUSH
75633: LD_INT 0
75635: ST_TO_ADDR
// uc_nation := 0 ;
75636: LD_ADDR_OWVAR 21
75640: PUSH
75641: LD_INT 0
75643: ST_TO_ADDR
// InitHc ;
75644: CALL_OW 19
// hc_class := class_fish ;
75648: LD_ADDR_OWVAR 28
75652: PUSH
75653: LD_INT 20
75655: ST_TO_ADDR
// hc_gallery :=  ;
75656: LD_ADDR_OWVAR 33
75660: PUSH
75661: LD_STRING 
75663: ST_TO_ADDR
// hc_name :=  ;
75664: LD_ADDR_OWVAR 26
75668: PUSH
75669: LD_STRING 
75671: ST_TO_ADDR
// end ;
75672: LD_VAR 0 1
75676: RET
// export function PrepareBird ( ) ; begin
75677: LD_INT 0
75679: PPUSH
// uc_side := 0 ;
75680: LD_ADDR_OWVAR 20
75684: PUSH
75685: LD_INT 0
75687: ST_TO_ADDR
// uc_nation := 0 ;
75688: LD_ADDR_OWVAR 21
75692: PUSH
75693: LD_INT 0
75695: ST_TO_ADDR
// InitHc ;
75696: CALL_OW 19
// hc_class := class_phororhacos ;
75700: LD_ADDR_OWVAR 28
75704: PUSH
75705: LD_INT 18
75707: ST_TO_ADDR
// hc_gallery :=  ;
75708: LD_ADDR_OWVAR 33
75712: PUSH
75713: LD_STRING 
75715: ST_TO_ADDR
// hc_name :=  ;
75716: LD_ADDR_OWVAR 26
75720: PUSH
75721: LD_STRING 
75723: ST_TO_ADDR
// end ;
75724: LD_VAR 0 1
75728: RET
// export function PrepareHorse ( ) ; begin
75729: LD_INT 0
75731: PPUSH
// uc_side := 0 ;
75732: LD_ADDR_OWVAR 20
75736: PUSH
75737: LD_INT 0
75739: ST_TO_ADDR
// uc_nation := 0 ;
75740: LD_ADDR_OWVAR 21
75744: PUSH
75745: LD_INT 0
75747: ST_TO_ADDR
// InitHc ;
75748: CALL_OW 19
// hc_class := class_horse ;
75752: LD_ADDR_OWVAR 28
75756: PUSH
75757: LD_INT 21
75759: ST_TO_ADDR
// hc_gallery :=  ;
75760: LD_ADDR_OWVAR 33
75764: PUSH
75765: LD_STRING 
75767: ST_TO_ADDR
// hc_name :=  ;
75768: LD_ADDR_OWVAR 26
75772: PUSH
75773: LD_STRING 
75775: ST_TO_ADDR
// end ;
75776: LD_VAR 0 1
75780: RET
// export function PrepareMastodont ( ) ; begin
75781: LD_INT 0
75783: PPUSH
// uc_side := 0 ;
75784: LD_ADDR_OWVAR 20
75788: PUSH
75789: LD_INT 0
75791: ST_TO_ADDR
// uc_nation := 0 ;
75792: LD_ADDR_OWVAR 21
75796: PUSH
75797: LD_INT 0
75799: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75800: LD_ADDR_OWVAR 37
75804: PUSH
75805: LD_INT 31
75807: ST_TO_ADDR
// vc_control := control_rider ;
75808: LD_ADDR_OWVAR 38
75812: PUSH
75813: LD_INT 4
75815: ST_TO_ADDR
// end ;
75816: LD_VAR 0 1
75820: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75821: LD_INT 0
75823: PPUSH
75824: PPUSH
75825: PPUSH
// uc_side = 0 ;
75826: LD_ADDR_OWVAR 20
75830: PUSH
75831: LD_INT 0
75833: ST_TO_ADDR
// uc_nation = 0 ;
75834: LD_ADDR_OWVAR 21
75838: PUSH
75839: LD_INT 0
75841: ST_TO_ADDR
// InitHc_All ( ) ;
75842: CALL_OW 584
// InitVc ;
75846: CALL_OW 20
// if mastodonts then
75850: LD_VAR 0 6
75854: IFFALSE 75921
// for i = 1 to mastodonts do
75856: LD_ADDR_VAR 0 11
75860: PUSH
75861: DOUBLE
75862: LD_INT 1
75864: DEC
75865: ST_TO_ADDR
75866: LD_VAR 0 6
75870: PUSH
75871: FOR_TO
75872: IFFALSE 75919
// begin vc_chassis := 31 ;
75874: LD_ADDR_OWVAR 37
75878: PUSH
75879: LD_INT 31
75881: ST_TO_ADDR
// vc_control := control_rider ;
75882: LD_ADDR_OWVAR 38
75886: PUSH
75887: LD_INT 4
75889: ST_TO_ADDR
// animal := CreateVehicle ;
75890: LD_ADDR_VAR 0 12
75894: PUSH
75895: CALL_OW 45
75899: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75900: LD_VAR 0 12
75904: PPUSH
75905: LD_VAR 0 8
75909: PPUSH
75910: LD_INT 0
75912: PPUSH
75913: CALL 78063 0 3
// end ;
75917: GO 75871
75919: POP
75920: POP
// if horses then
75921: LD_VAR 0 5
75925: IFFALSE 75992
// for i = 1 to horses do
75927: LD_ADDR_VAR 0 11
75931: PUSH
75932: DOUBLE
75933: LD_INT 1
75935: DEC
75936: ST_TO_ADDR
75937: LD_VAR 0 5
75941: PUSH
75942: FOR_TO
75943: IFFALSE 75990
// begin hc_class := 21 ;
75945: LD_ADDR_OWVAR 28
75949: PUSH
75950: LD_INT 21
75952: ST_TO_ADDR
// hc_gallery :=  ;
75953: LD_ADDR_OWVAR 33
75957: PUSH
75958: LD_STRING 
75960: ST_TO_ADDR
// animal := CreateHuman ;
75961: LD_ADDR_VAR 0 12
75965: PUSH
75966: CALL_OW 44
75970: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75971: LD_VAR 0 12
75975: PPUSH
75976: LD_VAR 0 8
75980: PPUSH
75981: LD_INT 0
75983: PPUSH
75984: CALL 78063 0 3
// end ;
75988: GO 75942
75990: POP
75991: POP
// if birds then
75992: LD_VAR 0 1
75996: IFFALSE 76063
// for i = 1 to birds do
75998: LD_ADDR_VAR 0 11
76002: PUSH
76003: DOUBLE
76004: LD_INT 1
76006: DEC
76007: ST_TO_ADDR
76008: LD_VAR 0 1
76012: PUSH
76013: FOR_TO
76014: IFFALSE 76061
// begin hc_class := 18 ;
76016: LD_ADDR_OWVAR 28
76020: PUSH
76021: LD_INT 18
76023: ST_TO_ADDR
// hc_gallery =  ;
76024: LD_ADDR_OWVAR 33
76028: PUSH
76029: LD_STRING 
76031: ST_TO_ADDR
// animal := CreateHuman ;
76032: LD_ADDR_VAR 0 12
76036: PUSH
76037: CALL_OW 44
76041: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76042: LD_VAR 0 12
76046: PPUSH
76047: LD_VAR 0 8
76051: PPUSH
76052: LD_INT 0
76054: PPUSH
76055: CALL 78063 0 3
// end ;
76059: GO 76013
76061: POP
76062: POP
// if tigers then
76063: LD_VAR 0 2
76067: IFFALSE 76151
// for i = 1 to tigers do
76069: LD_ADDR_VAR 0 11
76073: PUSH
76074: DOUBLE
76075: LD_INT 1
76077: DEC
76078: ST_TO_ADDR
76079: LD_VAR 0 2
76083: PUSH
76084: FOR_TO
76085: IFFALSE 76149
// begin hc_class = class_tiger ;
76087: LD_ADDR_OWVAR 28
76091: PUSH
76092: LD_INT 14
76094: ST_TO_ADDR
// hc_gallery =  ;
76095: LD_ADDR_OWVAR 33
76099: PUSH
76100: LD_STRING 
76102: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76103: LD_ADDR_OWVAR 35
76107: PUSH
76108: LD_INT 7
76110: NEG
76111: PPUSH
76112: LD_INT 7
76114: PPUSH
76115: CALL_OW 12
76119: ST_TO_ADDR
// animal := CreateHuman ;
76120: LD_ADDR_VAR 0 12
76124: PUSH
76125: CALL_OW 44
76129: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76130: LD_VAR 0 12
76134: PPUSH
76135: LD_VAR 0 8
76139: PPUSH
76140: LD_INT 0
76142: PPUSH
76143: CALL 78063 0 3
// end ;
76147: GO 76084
76149: POP
76150: POP
// if apemans then
76151: LD_VAR 0 3
76155: IFFALSE 76278
// for i = 1 to apemans do
76157: LD_ADDR_VAR 0 11
76161: PUSH
76162: DOUBLE
76163: LD_INT 1
76165: DEC
76166: ST_TO_ADDR
76167: LD_VAR 0 3
76171: PUSH
76172: FOR_TO
76173: IFFALSE 76276
// begin hc_class = class_apeman ;
76175: LD_ADDR_OWVAR 28
76179: PUSH
76180: LD_INT 12
76182: ST_TO_ADDR
// hc_gallery =  ;
76183: LD_ADDR_OWVAR 33
76187: PUSH
76188: LD_STRING 
76190: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76191: LD_ADDR_OWVAR 35
76195: PUSH
76196: LD_INT 2
76198: NEG
76199: PPUSH
76200: LD_INT 2
76202: PPUSH
76203: CALL_OW 12
76207: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76208: LD_ADDR_OWVAR 31
76212: PUSH
76213: LD_INT 1
76215: PPUSH
76216: LD_INT 3
76218: PPUSH
76219: CALL_OW 12
76223: PUSH
76224: LD_INT 1
76226: PPUSH
76227: LD_INT 3
76229: PPUSH
76230: CALL_OW 12
76234: PUSH
76235: LD_INT 0
76237: PUSH
76238: LD_INT 0
76240: PUSH
76241: EMPTY
76242: LIST
76243: LIST
76244: LIST
76245: LIST
76246: ST_TO_ADDR
// animal := CreateHuman ;
76247: LD_ADDR_VAR 0 12
76251: PUSH
76252: CALL_OW 44
76256: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76257: LD_VAR 0 12
76261: PPUSH
76262: LD_VAR 0 8
76266: PPUSH
76267: LD_INT 0
76269: PPUSH
76270: CALL 78063 0 3
// end ;
76274: GO 76172
76276: POP
76277: POP
// if enchidnas then
76278: LD_VAR 0 4
76282: IFFALSE 76349
// for i = 1 to enchidnas do
76284: LD_ADDR_VAR 0 11
76288: PUSH
76289: DOUBLE
76290: LD_INT 1
76292: DEC
76293: ST_TO_ADDR
76294: LD_VAR 0 4
76298: PUSH
76299: FOR_TO
76300: IFFALSE 76347
// begin hc_class = 13 ;
76302: LD_ADDR_OWVAR 28
76306: PUSH
76307: LD_INT 13
76309: ST_TO_ADDR
// hc_gallery =  ;
76310: LD_ADDR_OWVAR 33
76314: PUSH
76315: LD_STRING 
76317: ST_TO_ADDR
// animal := CreateHuman ;
76318: LD_ADDR_VAR 0 12
76322: PUSH
76323: CALL_OW 44
76327: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76328: LD_VAR 0 12
76332: PPUSH
76333: LD_VAR 0 8
76337: PPUSH
76338: LD_INT 0
76340: PPUSH
76341: CALL 78063 0 3
// end ;
76345: GO 76299
76347: POP
76348: POP
// if fishes then
76349: LD_VAR 0 7
76353: IFFALSE 76420
// for i = 1 to fishes do
76355: LD_ADDR_VAR 0 11
76359: PUSH
76360: DOUBLE
76361: LD_INT 1
76363: DEC
76364: ST_TO_ADDR
76365: LD_VAR 0 7
76369: PUSH
76370: FOR_TO
76371: IFFALSE 76418
// begin hc_class = 20 ;
76373: LD_ADDR_OWVAR 28
76377: PUSH
76378: LD_INT 20
76380: ST_TO_ADDR
// hc_gallery =  ;
76381: LD_ADDR_OWVAR 33
76385: PUSH
76386: LD_STRING 
76388: ST_TO_ADDR
// animal := CreateHuman ;
76389: LD_ADDR_VAR 0 12
76393: PUSH
76394: CALL_OW 44
76398: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76399: LD_VAR 0 12
76403: PPUSH
76404: LD_VAR 0 9
76408: PPUSH
76409: LD_INT 0
76411: PPUSH
76412: CALL 78063 0 3
// end ;
76416: GO 76370
76418: POP
76419: POP
// end ;
76420: LD_VAR 0 10
76424: RET
// export function WantHeal ( sci , unit ) ; begin
76425: LD_INT 0
76427: PPUSH
// if GetTaskList ( sci ) > 0 then
76428: LD_VAR 0 1
76432: PPUSH
76433: CALL_OW 437
76437: PUSH
76438: LD_INT 0
76440: GREATER
76441: IFFALSE 76513
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76443: LD_VAR 0 1
76447: PPUSH
76448: CALL_OW 437
76452: PUSH
76453: LD_INT 1
76455: ARRAY
76456: PUSH
76457: LD_INT 1
76459: ARRAY
76460: PUSH
76461: LD_STRING l
76463: EQUAL
76464: IFFALSE 76491
76466: PUSH
76467: LD_VAR 0 1
76471: PPUSH
76472: CALL_OW 437
76476: PUSH
76477: LD_INT 1
76479: ARRAY
76480: PUSH
76481: LD_INT 4
76483: ARRAY
76484: PUSH
76485: LD_VAR 0 2
76489: EQUAL
76490: AND
76491: IFFALSE 76503
// result := true else
76493: LD_ADDR_VAR 0 3
76497: PUSH
76498: LD_INT 1
76500: ST_TO_ADDR
76501: GO 76511
// result := false ;
76503: LD_ADDR_VAR 0 3
76507: PUSH
76508: LD_INT 0
76510: ST_TO_ADDR
// end else
76511: GO 76521
// result := false ;
76513: LD_ADDR_VAR 0 3
76517: PUSH
76518: LD_INT 0
76520: ST_TO_ADDR
// end ;
76521: LD_VAR 0 3
76525: RET
// export function HealTarget ( sci ) ; begin
76526: LD_INT 0
76528: PPUSH
// if not sci then
76529: LD_VAR 0 1
76533: NOT
76534: IFFALSE 76538
// exit ;
76536: GO 76603
// result := 0 ;
76538: LD_ADDR_VAR 0 2
76542: PUSH
76543: LD_INT 0
76545: ST_TO_ADDR
// if GetTaskList ( sci ) then
76546: LD_VAR 0 1
76550: PPUSH
76551: CALL_OW 437
76555: IFFALSE 76603
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76557: LD_VAR 0 1
76561: PPUSH
76562: CALL_OW 437
76566: PUSH
76567: LD_INT 1
76569: ARRAY
76570: PUSH
76571: LD_INT 1
76573: ARRAY
76574: PUSH
76575: LD_STRING l
76577: EQUAL
76578: IFFALSE 76603
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76580: LD_ADDR_VAR 0 2
76584: PUSH
76585: LD_VAR 0 1
76589: PPUSH
76590: CALL_OW 437
76594: PUSH
76595: LD_INT 1
76597: ARRAY
76598: PUSH
76599: LD_INT 4
76601: ARRAY
76602: ST_TO_ADDR
// end ;
76603: LD_VAR 0 2
76607: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76608: LD_INT 0
76610: PPUSH
76611: PPUSH
76612: PPUSH
76613: PPUSH
// if not base_units then
76614: LD_VAR 0 1
76618: NOT
76619: IFFALSE 76623
// exit ;
76621: GO 76710
// result := false ;
76623: LD_ADDR_VAR 0 2
76627: PUSH
76628: LD_INT 0
76630: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76631: LD_ADDR_VAR 0 5
76635: PUSH
76636: LD_VAR 0 1
76640: PPUSH
76641: LD_INT 21
76643: PUSH
76644: LD_INT 3
76646: PUSH
76647: EMPTY
76648: LIST
76649: LIST
76650: PPUSH
76651: CALL_OW 72
76655: ST_TO_ADDR
// if not tmp then
76656: LD_VAR 0 5
76660: NOT
76661: IFFALSE 76665
// exit ;
76663: GO 76710
// for i in tmp do
76665: LD_ADDR_VAR 0 3
76669: PUSH
76670: LD_VAR 0 5
76674: PUSH
76675: FOR_IN
76676: IFFALSE 76708
// begin result := EnemyInRange ( i , 22 ) ;
76678: LD_ADDR_VAR 0 2
76682: PUSH
76683: LD_VAR 0 3
76687: PPUSH
76688: LD_INT 22
76690: PPUSH
76691: CALL 74135 0 2
76695: ST_TO_ADDR
// if result then
76696: LD_VAR 0 2
76700: IFFALSE 76706
// exit ;
76702: POP
76703: POP
76704: GO 76710
// end ;
76706: GO 76675
76708: POP
76709: POP
// end ;
76710: LD_VAR 0 2
76714: RET
// export function FilterByTag ( units , tag ) ; begin
76715: LD_INT 0
76717: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76718: LD_ADDR_VAR 0 3
76722: PUSH
76723: LD_VAR 0 1
76727: PPUSH
76728: LD_INT 120
76730: PUSH
76731: LD_VAR 0 2
76735: PUSH
76736: EMPTY
76737: LIST
76738: LIST
76739: PPUSH
76740: CALL_OW 72
76744: ST_TO_ADDR
// end ;
76745: LD_VAR 0 3
76749: RET
// export function IsDriver ( un ) ; begin
76750: LD_INT 0
76752: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76753: LD_ADDR_VAR 0 2
76757: PUSH
76758: LD_VAR 0 1
76762: PUSH
76763: LD_INT 55
76765: PUSH
76766: EMPTY
76767: LIST
76768: PPUSH
76769: CALL_OW 69
76773: IN
76774: ST_TO_ADDR
// end ;
76775: LD_VAR 0 2
76779: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76780: LD_INT 0
76782: PPUSH
76783: PPUSH
// list := [ ] ;
76784: LD_ADDR_VAR 0 5
76788: PUSH
76789: EMPTY
76790: ST_TO_ADDR
// case d of 0 :
76791: LD_VAR 0 3
76795: PUSH
76796: LD_INT 0
76798: DOUBLE
76799: EQUAL
76800: IFTRUE 76804
76802: GO 76937
76804: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76805: LD_ADDR_VAR 0 5
76809: PUSH
76810: LD_VAR 0 1
76814: PUSH
76815: LD_INT 4
76817: MINUS
76818: PUSH
76819: LD_VAR 0 2
76823: PUSH
76824: LD_INT 4
76826: MINUS
76827: PUSH
76828: LD_INT 2
76830: PUSH
76831: EMPTY
76832: LIST
76833: LIST
76834: LIST
76835: PUSH
76836: LD_VAR 0 1
76840: PUSH
76841: LD_INT 3
76843: MINUS
76844: PUSH
76845: LD_VAR 0 2
76849: PUSH
76850: LD_INT 1
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: LIST
76857: PUSH
76858: LD_VAR 0 1
76862: PUSH
76863: LD_INT 4
76865: PLUS
76866: PUSH
76867: LD_VAR 0 2
76871: PUSH
76872: LD_INT 4
76874: PUSH
76875: EMPTY
76876: LIST
76877: LIST
76878: LIST
76879: PUSH
76880: LD_VAR 0 1
76884: PUSH
76885: LD_INT 3
76887: PLUS
76888: PUSH
76889: LD_VAR 0 2
76893: PUSH
76894: LD_INT 3
76896: PLUS
76897: PUSH
76898: LD_INT 5
76900: PUSH
76901: EMPTY
76902: LIST
76903: LIST
76904: LIST
76905: PUSH
76906: LD_VAR 0 1
76910: PUSH
76911: LD_VAR 0 2
76915: PUSH
76916: LD_INT 4
76918: PLUS
76919: PUSH
76920: LD_INT 0
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: LIST
76927: PUSH
76928: EMPTY
76929: LIST
76930: LIST
76931: LIST
76932: LIST
76933: LIST
76934: ST_TO_ADDR
// end ; 1 :
76935: GO 77635
76937: LD_INT 1
76939: DOUBLE
76940: EQUAL
76941: IFTRUE 76945
76943: GO 77078
76945: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76946: LD_ADDR_VAR 0 5
76950: PUSH
76951: LD_VAR 0 1
76955: PUSH
76956: LD_VAR 0 2
76960: PUSH
76961: LD_INT 4
76963: MINUS
76964: PUSH
76965: LD_INT 3
76967: PUSH
76968: EMPTY
76969: LIST
76970: LIST
76971: LIST
76972: PUSH
76973: LD_VAR 0 1
76977: PUSH
76978: LD_INT 3
76980: MINUS
76981: PUSH
76982: LD_VAR 0 2
76986: PUSH
76987: LD_INT 3
76989: MINUS
76990: PUSH
76991: LD_INT 2
76993: PUSH
76994: EMPTY
76995: LIST
76996: LIST
76997: LIST
76998: PUSH
76999: LD_VAR 0 1
77003: PUSH
77004: LD_INT 4
77006: MINUS
77007: PUSH
77008: LD_VAR 0 2
77012: PUSH
77013: LD_INT 1
77015: PUSH
77016: EMPTY
77017: LIST
77018: LIST
77019: LIST
77020: PUSH
77021: LD_VAR 0 1
77025: PUSH
77026: LD_VAR 0 2
77030: PUSH
77031: LD_INT 3
77033: PLUS
77034: PUSH
77035: LD_INT 0
77037: PUSH
77038: EMPTY
77039: LIST
77040: LIST
77041: LIST
77042: PUSH
77043: LD_VAR 0 1
77047: PUSH
77048: LD_INT 4
77050: PLUS
77051: PUSH
77052: LD_VAR 0 2
77056: PUSH
77057: LD_INT 4
77059: PLUS
77060: PUSH
77061: LD_INT 5
77063: PUSH
77064: EMPTY
77065: LIST
77066: LIST
77067: LIST
77068: PUSH
77069: EMPTY
77070: LIST
77071: LIST
77072: LIST
77073: LIST
77074: LIST
77075: ST_TO_ADDR
// end ; 2 :
77076: GO 77635
77078: LD_INT 2
77080: DOUBLE
77081: EQUAL
77082: IFTRUE 77086
77084: GO 77215
77086: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77087: LD_ADDR_VAR 0 5
77091: PUSH
77092: LD_VAR 0 1
77096: PUSH
77097: LD_VAR 0 2
77101: PUSH
77102: LD_INT 3
77104: MINUS
77105: PUSH
77106: LD_INT 3
77108: PUSH
77109: EMPTY
77110: LIST
77111: LIST
77112: LIST
77113: PUSH
77114: LD_VAR 0 1
77118: PUSH
77119: LD_INT 4
77121: PLUS
77122: PUSH
77123: LD_VAR 0 2
77127: PUSH
77128: LD_INT 4
77130: PUSH
77131: EMPTY
77132: LIST
77133: LIST
77134: LIST
77135: PUSH
77136: LD_VAR 0 1
77140: PUSH
77141: LD_VAR 0 2
77145: PUSH
77146: LD_INT 4
77148: PLUS
77149: PUSH
77150: LD_INT 0
77152: PUSH
77153: EMPTY
77154: LIST
77155: LIST
77156: LIST
77157: PUSH
77158: LD_VAR 0 1
77162: PUSH
77163: LD_INT 3
77165: MINUS
77166: PUSH
77167: LD_VAR 0 2
77171: PUSH
77172: LD_INT 1
77174: PUSH
77175: EMPTY
77176: LIST
77177: LIST
77178: LIST
77179: PUSH
77180: LD_VAR 0 1
77184: PUSH
77185: LD_INT 4
77187: MINUS
77188: PUSH
77189: LD_VAR 0 2
77193: PUSH
77194: LD_INT 4
77196: MINUS
77197: PUSH
77198: LD_INT 2
77200: PUSH
77201: EMPTY
77202: LIST
77203: LIST
77204: LIST
77205: PUSH
77206: EMPTY
77207: LIST
77208: LIST
77209: LIST
77210: LIST
77211: LIST
77212: ST_TO_ADDR
// end ; 3 :
77213: GO 77635
77215: LD_INT 3
77217: DOUBLE
77218: EQUAL
77219: IFTRUE 77223
77221: GO 77356
77223: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77224: LD_ADDR_VAR 0 5
77228: PUSH
77229: LD_VAR 0 1
77233: PUSH
77234: LD_INT 3
77236: PLUS
77237: PUSH
77238: LD_VAR 0 2
77242: PUSH
77243: LD_INT 4
77245: PUSH
77246: EMPTY
77247: LIST
77248: LIST
77249: LIST
77250: PUSH
77251: LD_VAR 0 1
77255: PUSH
77256: LD_INT 4
77258: PLUS
77259: PUSH
77260: LD_VAR 0 2
77264: PUSH
77265: LD_INT 4
77267: PLUS
77268: PUSH
77269: LD_INT 5
77271: PUSH
77272: EMPTY
77273: LIST
77274: LIST
77275: LIST
77276: PUSH
77277: LD_VAR 0 1
77281: PUSH
77282: LD_INT 4
77284: MINUS
77285: PUSH
77286: LD_VAR 0 2
77290: PUSH
77291: LD_INT 1
77293: PUSH
77294: EMPTY
77295: LIST
77296: LIST
77297: LIST
77298: PUSH
77299: LD_VAR 0 1
77303: PUSH
77304: LD_VAR 0 2
77308: PUSH
77309: LD_INT 4
77311: MINUS
77312: PUSH
77313: LD_INT 3
77315: PUSH
77316: EMPTY
77317: LIST
77318: LIST
77319: LIST
77320: PUSH
77321: LD_VAR 0 1
77325: PUSH
77326: LD_INT 3
77328: MINUS
77329: PUSH
77330: LD_VAR 0 2
77334: PUSH
77335: LD_INT 3
77337: MINUS
77338: PUSH
77339: LD_INT 2
77341: PUSH
77342: EMPTY
77343: LIST
77344: LIST
77345: LIST
77346: PUSH
77347: EMPTY
77348: LIST
77349: LIST
77350: LIST
77351: LIST
77352: LIST
77353: ST_TO_ADDR
// end ; 4 :
77354: GO 77635
77356: LD_INT 4
77358: DOUBLE
77359: EQUAL
77360: IFTRUE 77364
77362: GO 77497
77364: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77365: LD_ADDR_VAR 0 5
77369: PUSH
77370: LD_VAR 0 1
77374: PUSH
77375: LD_VAR 0 2
77379: PUSH
77380: LD_INT 4
77382: PLUS
77383: PUSH
77384: LD_INT 0
77386: PUSH
77387: EMPTY
77388: LIST
77389: LIST
77390: LIST
77391: PUSH
77392: LD_VAR 0 1
77396: PUSH
77397: LD_INT 3
77399: PLUS
77400: PUSH
77401: LD_VAR 0 2
77405: PUSH
77406: LD_INT 3
77408: PLUS
77409: PUSH
77410: LD_INT 5
77412: PUSH
77413: EMPTY
77414: LIST
77415: LIST
77416: LIST
77417: PUSH
77418: LD_VAR 0 1
77422: PUSH
77423: LD_INT 4
77425: PLUS
77426: PUSH
77427: LD_VAR 0 2
77431: PUSH
77432: LD_INT 4
77434: PUSH
77435: EMPTY
77436: LIST
77437: LIST
77438: LIST
77439: PUSH
77440: LD_VAR 0 1
77444: PUSH
77445: LD_VAR 0 2
77449: PUSH
77450: LD_INT 3
77452: MINUS
77453: PUSH
77454: LD_INT 3
77456: PUSH
77457: EMPTY
77458: LIST
77459: LIST
77460: LIST
77461: PUSH
77462: LD_VAR 0 1
77466: PUSH
77467: LD_INT 4
77469: MINUS
77470: PUSH
77471: LD_VAR 0 2
77475: PUSH
77476: LD_INT 4
77478: MINUS
77479: PUSH
77480: LD_INT 2
77482: PUSH
77483: EMPTY
77484: LIST
77485: LIST
77486: LIST
77487: PUSH
77488: EMPTY
77489: LIST
77490: LIST
77491: LIST
77492: LIST
77493: LIST
77494: ST_TO_ADDR
// end ; 5 :
77495: GO 77635
77497: LD_INT 5
77499: DOUBLE
77500: EQUAL
77501: IFTRUE 77505
77503: GO 77634
77505: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77506: LD_ADDR_VAR 0 5
77510: PUSH
77511: LD_VAR 0 1
77515: PUSH
77516: LD_INT 4
77518: MINUS
77519: PUSH
77520: LD_VAR 0 2
77524: PUSH
77525: LD_INT 1
77527: PUSH
77528: EMPTY
77529: LIST
77530: LIST
77531: LIST
77532: PUSH
77533: LD_VAR 0 1
77537: PUSH
77538: LD_VAR 0 2
77542: PUSH
77543: LD_INT 4
77545: MINUS
77546: PUSH
77547: LD_INT 3
77549: PUSH
77550: EMPTY
77551: LIST
77552: LIST
77553: LIST
77554: PUSH
77555: LD_VAR 0 1
77559: PUSH
77560: LD_INT 4
77562: PLUS
77563: PUSH
77564: LD_VAR 0 2
77568: PUSH
77569: LD_INT 4
77571: PLUS
77572: PUSH
77573: LD_INT 5
77575: PUSH
77576: EMPTY
77577: LIST
77578: LIST
77579: LIST
77580: PUSH
77581: LD_VAR 0 1
77585: PUSH
77586: LD_INT 3
77588: PLUS
77589: PUSH
77590: LD_VAR 0 2
77594: PUSH
77595: LD_INT 4
77597: PUSH
77598: EMPTY
77599: LIST
77600: LIST
77601: LIST
77602: PUSH
77603: LD_VAR 0 1
77607: PUSH
77608: LD_VAR 0 2
77612: PUSH
77613: LD_INT 3
77615: PLUS
77616: PUSH
77617: LD_INT 0
77619: PUSH
77620: EMPTY
77621: LIST
77622: LIST
77623: LIST
77624: PUSH
77625: EMPTY
77626: LIST
77627: LIST
77628: LIST
77629: LIST
77630: LIST
77631: ST_TO_ADDR
// end ; end ;
77632: GO 77635
77634: POP
// result := list ;
77635: LD_ADDR_VAR 0 4
77639: PUSH
77640: LD_VAR 0 5
77644: ST_TO_ADDR
// end ;
77645: LD_VAR 0 4
77649: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77650: LD_INT 0
77652: PPUSH
77653: PPUSH
77654: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77655: LD_VAR 0 1
77659: NOT
77660: IFTRUE 77688
77662: PUSH
77663: LD_VAR 0 2
77667: PUSH
77668: LD_INT 1
77670: PUSH
77671: LD_INT 2
77673: PUSH
77674: LD_INT 3
77676: PUSH
77677: LD_INT 4
77679: PUSH
77680: EMPTY
77681: LIST
77682: LIST
77683: LIST
77684: LIST
77685: IN
77686: NOT
77687: OR
77688: IFFALSE 77692
// exit ;
77690: GO 77775
// tmp := [ ] ;
77692: LD_ADDR_VAR 0 5
77696: PUSH
77697: EMPTY
77698: ST_TO_ADDR
// for i in units do
77699: LD_ADDR_VAR 0 4
77703: PUSH
77704: LD_VAR 0 1
77708: PUSH
77709: FOR_IN
77710: IFFALSE 77744
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77712: LD_ADDR_VAR 0 5
77716: PUSH
77717: LD_VAR 0 5
77721: PPUSH
77722: LD_VAR 0 4
77726: PPUSH
77727: LD_VAR 0 2
77731: PPUSH
77732: CALL_OW 259
77736: PPUSH
77737: CALL 79170 0 2
77741: ST_TO_ADDR
77742: GO 77709
77744: POP
77745: POP
// if not tmp then
77746: LD_VAR 0 5
77750: NOT
77751: IFFALSE 77755
// exit ;
77753: GO 77775
// result := SortListByListDesc ( units , tmp ) ;
77755: LD_ADDR_VAR 0 3
77759: PUSH
77760: LD_VAR 0 1
77764: PPUSH
77765: LD_VAR 0 5
77769: PPUSH
77770: CALL_OW 77
77774: ST_TO_ADDR
// end ;
77775: LD_VAR 0 3
77779: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77780: LD_INT 0
77782: PPUSH
77783: PPUSH
77784: PPUSH
// result := false ;
77785: LD_ADDR_VAR 0 3
77789: PUSH
77790: LD_INT 0
77792: ST_TO_ADDR
// if not building then
77793: LD_VAR 0 2
77797: NOT
77798: IFFALSE 77802
// exit ;
77800: GO 77946
// x := GetX ( building ) ;
77802: LD_ADDR_VAR 0 4
77806: PUSH
77807: LD_VAR 0 2
77811: PPUSH
77812: CALL_OW 250
77816: ST_TO_ADDR
// y := GetY ( building ) ;
77817: LD_ADDR_VAR 0 5
77821: PUSH
77822: LD_VAR 0 2
77826: PPUSH
77827: CALL_OW 251
77831: ST_TO_ADDR
// if not x or not y then
77832: LD_VAR 0 4
77836: NOT
77837: IFTRUE 77846
77839: PUSH
77840: LD_VAR 0 5
77844: NOT
77845: OR
77846: IFFALSE 77850
// exit ;
77848: GO 77946
// if GetTaskList ( unit ) then
77850: LD_VAR 0 1
77854: PPUSH
77855: CALL_OW 437
77859: IFFALSE 77946
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77861: LD_STRING e
77863: PUSH
77864: LD_VAR 0 1
77868: PPUSH
77869: CALL_OW 437
77873: PUSH
77874: LD_INT 1
77876: ARRAY
77877: PUSH
77878: LD_INT 1
77880: ARRAY
77881: EQUAL
77882: IFFALSE 77909
77884: PUSH
77885: LD_VAR 0 4
77889: PUSH
77890: LD_VAR 0 1
77894: PPUSH
77895: CALL_OW 437
77899: PUSH
77900: LD_INT 1
77902: ARRAY
77903: PUSH
77904: LD_INT 2
77906: ARRAY
77907: EQUAL
77908: AND
77909: IFFALSE 77936
77911: PUSH
77912: LD_VAR 0 5
77916: PUSH
77917: LD_VAR 0 1
77921: PPUSH
77922: CALL_OW 437
77926: PUSH
77927: LD_INT 1
77929: ARRAY
77930: PUSH
77931: LD_INT 3
77933: ARRAY
77934: EQUAL
77935: AND
77936: IFFALSE 77946
// result := true end ;
77938: LD_ADDR_VAR 0 3
77942: PUSH
77943: LD_INT 1
77945: ST_TO_ADDR
// end ;
77946: LD_VAR 0 3
77950: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77951: LD_INT 0
77953: PPUSH
// result := false ;
77954: LD_ADDR_VAR 0 4
77958: PUSH
77959: LD_INT 0
77961: ST_TO_ADDR
// if GetTaskList ( unit ) then
77962: LD_VAR 0 1
77966: PPUSH
77967: CALL_OW 437
77971: IFFALSE 78058
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77973: LD_STRING M
77975: PUSH
77976: LD_VAR 0 1
77980: PPUSH
77981: CALL_OW 437
77985: PUSH
77986: LD_INT 1
77988: ARRAY
77989: PUSH
77990: LD_INT 1
77992: ARRAY
77993: EQUAL
77994: IFFALSE 78021
77996: PUSH
77997: LD_VAR 0 2
78001: PUSH
78002: LD_VAR 0 1
78006: PPUSH
78007: CALL_OW 437
78011: PUSH
78012: LD_INT 1
78014: ARRAY
78015: PUSH
78016: LD_INT 2
78018: ARRAY
78019: EQUAL
78020: AND
78021: IFFALSE 78048
78023: PUSH
78024: LD_VAR 0 3
78028: PUSH
78029: LD_VAR 0 1
78033: PPUSH
78034: CALL_OW 437
78038: PUSH
78039: LD_INT 1
78041: ARRAY
78042: PUSH
78043: LD_INT 3
78045: ARRAY
78046: EQUAL
78047: AND
78048: IFFALSE 78058
// result := true ;
78050: LD_ADDR_VAR 0 4
78054: PUSH
78055: LD_INT 1
78057: ST_TO_ADDR
// end ; end ;
78058: LD_VAR 0 4
78062: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78063: LD_INT 0
78065: PPUSH
78066: PPUSH
78067: PPUSH
78068: PPUSH
// if not unit or not area then
78069: LD_VAR 0 1
78073: NOT
78074: IFTRUE 78083
78076: PUSH
78077: LD_VAR 0 2
78081: NOT
78082: OR
78083: IFFALSE 78087
// exit ;
78085: GO 78263
// tmp := AreaToList ( area , i ) ;
78087: LD_ADDR_VAR 0 6
78091: PUSH
78092: LD_VAR 0 2
78096: PPUSH
78097: LD_VAR 0 5
78101: PPUSH
78102: CALL_OW 517
78106: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78107: LD_ADDR_VAR 0 5
78111: PUSH
78112: DOUBLE
78113: LD_INT 1
78115: DEC
78116: ST_TO_ADDR
78117: LD_VAR 0 6
78121: PUSH
78122: LD_INT 1
78124: ARRAY
78125: PUSH
78126: FOR_TO
78127: IFFALSE 78261
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78129: LD_ADDR_VAR 0 7
78133: PUSH
78134: LD_VAR 0 6
78138: PUSH
78139: LD_INT 1
78141: ARRAY
78142: PUSH
78143: LD_VAR 0 5
78147: ARRAY
78148: PUSH
78149: LD_VAR 0 6
78153: PUSH
78154: LD_INT 2
78156: ARRAY
78157: PUSH
78158: LD_VAR 0 5
78162: ARRAY
78163: PUSH
78164: EMPTY
78165: LIST
78166: LIST
78167: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78168: LD_INT 92
78170: PUSH
78171: LD_VAR 0 7
78175: PUSH
78176: LD_INT 1
78178: ARRAY
78179: PUSH
78180: LD_VAR 0 7
78184: PUSH
78185: LD_INT 2
78187: ARRAY
78188: PUSH
78189: LD_INT 2
78191: PUSH
78192: EMPTY
78193: LIST
78194: LIST
78195: LIST
78196: LIST
78197: PPUSH
78198: CALL_OW 69
78202: PUSH
78203: LD_INT 0
78205: EQUAL
78206: IFFALSE 78259
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78208: LD_VAR 0 1
78212: PPUSH
78213: LD_VAR 0 7
78217: PUSH
78218: LD_INT 1
78220: ARRAY
78221: PPUSH
78222: LD_VAR 0 7
78226: PUSH
78227: LD_INT 2
78229: ARRAY
78230: PPUSH
78231: LD_VAR 0 3
78235: PPUSH
78236: CALL_OW 48
// result := IsPlaced ( unit ) ;
78240: LD_ADDR_VAR 0 4
78244: PUSH
78245: LD_VAR 0 1
78249: PPUSH
78250: CALL_OW 305
78254: ST_TO_ADDR
// exit ;
78255: POP
78256: POP
78257: GO 78263
// end ; end ;
78259: GO 78126
78261: POP
78262: POP
// end ;
78263: LD_VAR 0 4
78267: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78268: LD_INT 0
78270: PPUSH
78271: PPUSH
78272: PPUSH
// if not side or side > 8 then
78273: LD_VAR 0 1
78277: NOT
78278: IFTRUE 78290
78280: PUSH
78281: LD_VAR 0 1
78285: PUSH
78286: LD_INT 8
78288: GREATER
78289: OR
78290: IFFALSE 78294
// exit ;
78292: GO 78481
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78294: LD_ADDR_VAR 0 4
78298: PUSH
78299: LD_INT 22
78301: PUSH
78302: LD_VAR 0 1
78306: PUSH
78307: EMPTY
78308: LIST
78309: LIST
78310: PUSH
78311: LD_INT 21
78313: PUSH
78314: LD_INT 3
78316: PUSH
78317: EMPTY
78318: LIST
78319: LIST
78320: PUSH
78321: EMPTY
78322: LIST
78323: LIST
78324: PPUSH
78325: CALL_OW 69
78329: ST_TO_ADDR
// if not tmp then
78330: LD_VAR 0 4
78334: NOT
78335: IFFALSE 78339
// exit ;
78337: GO 78481
// enable_addtolog := true ;
78339: LD_ADDR_OWVAR 81
78343: PUSH
78344: LD_INT 1
78346: ST_TO_ADDR
// AddToLog ( [ ) ;
78347: LD_STRING [
78349: PPUSH
78350: CALL_OW 561
// for i in tmp do
78354: LD_ADDR_VAR 0 3
78358: PUSH
78359: LD_VAR 0 4
78363: PUSH
78364: FOR_IN
78365: IFFALSE 78472
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78367: LD_STRING [
78369: PUSH
78370: LD_VAR 0 3
78374: PPUSH
78375: CALL_OW 266
78379: STR
78380: PUSH
78381: LD_STRING , 
78383: STR
78384: PUSH
78385: LD_VAR 0 3
78389: PPUSH
78390: CALL_OW 250
78394: STR
78395: PUSH
78396: LD_STRING , 
78398: STR
78399: PUSH
78400: LD_VAR 0 3
78404: PPUSH
78405: CALL_OW 251
78409: STR
78410: PUSH
78411: LD_STRING , 
78413: STR
78414: PUSH
78415: LD_VAR 0 3
78419: PPUSH
78420: CALL_OW 254
78424: STR
78425: PUSH
78426: LD_STRING , 
78428: STR
78429: PUSH
78430: LD_VAR 0 3
78434: PPUSH
78435: LD_INT 1
78437: PPUSH
78438: CALL_OW 268
78442: STR
78443: PUSH
78444: LD_STRING , 
78446: STR
78447: PUSH
78448: LD_VAR 0 3
78452: PPUSH
78453: LD_INT 2
78455: PPUSH
78456: CALL_OW 268
78460: STR
78461: PUSH
78462: LD_STRING ],
78464: STR
78465: PPUSH
78466: CALL_OW 561
// end ;
78470: GO 78364
78472: POP
78473: POP
// AddToLog ( ]; ) ;
78474: LD_STRING ];
78476: PPUSH
78477: CALL_OW 561
// end ;
78481: LD_VAR 0 2
78485: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78486: LD_INT 0
78488: PPUSH
78489: PPUSH
78490: PPUSH
78491: PPUSH
78492: PPUSH
// if not area or not rate or not max then
78493: LD_VAR 0 1
78497: NOT
78498: IFTRUE 78507
78500: PUSH
78501: LD_VAR 0 2
78505: NOT
78506: OR
78507: IFTRUE 78516
78509: PUSH
78510: LD_VAR 0 4
78514: NOT
78515: OR
78516: IFFALSE 78520
// exit ;
78518: GO 78709
// while 1 do
78520: LD_INT 1
78522: IFFALSE 78709
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78524: LD_ADDR_VAR 0 9
78528: PUSH
78529: LD_VAR 0 1
78533: PPUSH
78534: LD_INT 1
78536: PPUSH
78537: CALL_OW 287
78541: PUSH
78542: LD_INT 10
78544: MUL
78545: ST_TO_ADDR
// r := rate / 10 ;
78546: LD_ADDR_VAR 0 7
78550: PUSH
78551: LD_VAR 0 2
78555: PUSH
78556: LD_INT 10
78558: DIVREAL
78559: ST_TO_ADDR
// time := 1 1$00 ;
78560: LD_ADDR_VAR 0 8
78564: PUSH
78565: LD_INT 2100
78567: ST_TO_ADDR
// if amount < min then
78568: LD_VAR 0 9
78572: PUSH
78573: LD_VAR 0 3
78577: LESS
78578: IFFALSE 78596
// r := r * 2 else
78580: LD_ADDR_VAR 0 7
78584: PUSH
78585: LD_VAR 0 7
78589: PUSH
78590: LD_INT 2
78592: MUL
78593: ST_TO_ADDR
78594: GO 78622
// if amount > max then
78596: LD_VAR 0 9
78600: PUSH
78601: LD_VAR 0 4
78605: GREATER
78606: IFFALSE 78622
// r := r / 2 ;
78608: LD_ADDR_VAR 0 7
78612: PUSH
78613: LD_VAR 0 7
78617: PUSH
78618: LD_INT 2
78620: DIVREAL
78621: ST_TO_ADDR
// time := time / r ;
78622: LD_ADDR_VAR 0 8
78626: PUSH
78627: LD_VAR 0 8
78631: PUSH
78632: LD_VAR 0 7
78636: DIVREAL
78637: ST_TO_ADDR
// if time < 0 then
78638: LD_VAR 0 8
78642: PUSH
78643: LD_INT 0
78645: LESS
78646: IFFALSE 78663
// time := time * - 1 ;
78648: LD_ADDR_VAR 0 8
78652: PUSH
78653: LD_VAR 0 8
78657: PUSH
78658: LD_INT 1
78660: NEG
78661: MUL
78662: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78663: LD_VAR 0 8
78667: PUSH
78668: LD_INT 35
78670: PPUSH
78671: LD_INT 875
78673: PPUSH
78674: CALL_OW 12
78678: PLUS
78679: PPUSH
78680: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78684: LD_INT 1
78686: PPUSH
78687: LD_INT 5
78689: PPUSH
78690: CALL_OW 12
78694: PPUSH
78695: LD_VAR 0 1
78699: PPUSH
78700: LD_INT 1
78702: PPUSH
78703: CALL_OW 55
// end ;
78707: GO 78520
// end ;
78709: LD_VAR 0 5
78713: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78714: LD_INT 0
78716: PPUSH
78717: PPUSH
78718: PPUSH
78719: PPUSH
78720: PPUSH
78721: PPUSH
78722: PPUSH
78723: PPUSH
// if not turrets or not factories then
78724: LD_VAR 0 1
78728: NOT
78729: IFTRUE 78738
78731: PUSH
78732: LD_VAR 0 2
78736: NOT
78737: OR
78738: IFFALSE 78742
// exit ;
78740: GO 79049
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78742: LD_ADDR_VAR 0 10
78746: PUSH
78747: LD_INT 5
78749: PUSH
78750: LD_INT 6
78752: PUSH
78753: EMPTY
78754: LIST
78755: LIST
78756: PUSH
78757: LD_INT 2
78759: PUSH
78760: LD_INT 4
78762: PUSH
78763: EMPTY
78764: LIST
78765: LIST
78766: PUSH
78767: LD_INT 3
78769: PUSH
78770: LD_INT 5
78772: PUSH
78773: EMPTY
78774: LIST
78775: LIST
78776: PUSH
78777: EMPTY
78778: LIST
78779: LIST
78780: LIST
78781: PUSH
78782: LD_INT 24
78784: PUSH
78785: LD_INT 25
78787: PUSH
78788: EMPTY
78789: LIST
78790: LIST
78791: PUSH
78792: LD_INT 23
78794: PUSH
78795: LD_INT 27
78797: PUSH
78798: EMPTY
78799: LIST
78800: LIST
78801: PUSH
78802: EMPTY
78803: LIST
78804: LIST
78805: PUSH
78806: LD_INT 42
78808: PUSH
78809: LD_INT 43
78811: PUSH
78812: EMPTY
78813: LIST
78814: LIST
78815: PUSH
78816: LD_INT 44
78818: PUSH
78819: LD_INT 46
78821: PUSH
78822: EMPTY
78823: LIST
78824: LIST
78825: PUSH
78826: LD_INT 45
78828: PUSH
78829: LD_INT 47
78831: PUSH
78832: EMPTY
78833: LIST
78834: LIST
78835: PUSH
78836: EMPTY
78837: LIST
78838: LIST
78839: LIST
78840: PUSH
78841: EMPTY
78842: LIST
78843: LIST
78844: LIST
78845: ST_TO_ADDR
// result := [ ] ;
78846: LD_ADDR_VAR 0 3
78850: PUSH
78851: EMPTY
78852: ST_TO_ADDR
// for i in turrets do
78853: LD_ADDR_VAR 0 4
78857: PUSH
78858: LD_VAR 0 1
78862: PUSH
78863: FOR_IN
78864: IFFALSE 79047
// begin nat := GetNation ( i ) ;
78866: LD_ADDR_VAR 0 7
78870: PUSH
78871: LD_VAR 0 4
78875: PPUSH
78876: CALL_OW 248
78880: ST_TO_ADDR
// weapon := 0 ;
78881: LD_ADDR_VAR 0 8
78885: PUSH
78886: LD_INT 0
78888: ST_TO_ADDR
// if not nat then
78889: LD_VAR 0 7
78893: NOT
78894: IFFALSE 78898
// continue ;
78896: GO 78863
// for j in list [ nat ] do
78898: LD_ADDR_VAR 0 5
78902: PUSH
78903: LD_VAR 0 10
78907: PUSH
78908: LD_VAR 0 7
78912: ARRAY
78913: PUSH
78914: FOR_IN
78915: IFFALSE 78956
// if GetBWeapon ( i ) = j [ 1 ] then
78917: LD_VAR 0 4
78921: PPUSH
78922: CALL_OW 269
78926: PUSH
78927: LD_VAR 0 5
78931: PUSH
78932: LD_INT 1
78934: ARRAY
78935: EQUAL
78936: IFFALSE 78954
// begin weapon := j [ 2 ] ;
78938: LD_ADDR_VAR 0 8
78942: PUSH
78943: LD_VAR 0 5
78947: PUSH
78948: LD_INT 2
78950: ARRAY
78951: ST_TO_ADDR
// break ;
78952: GO 78956
// end ;
78954: GO 78914
78956: POP
78957: POP
// if not weapon then
78958: LD_VAR 0 8
78962: NOT
78963: IFFALSE 78967
// continue ;
78965: GO 78863
// for k in factories do
78967: LD_ADDR_VAR 0 6
78971: PUSH
78972: LD_VAR 0 2
78976: PUSH
78977: FOR_IN
78978: IFFALSE 79043
// begin weapons := AvailableWeaponList ( k ) ;
78980: LD_ADDR_VAR 0 9
78984: PUSH
78985: LD_VAR 0 6
78989: PPUSH
78990: CALL_OW 478
78994: ST_TO_ADDR
// if not weapons then
78995: LD_VAR 0 9
78999: NOT
79000: IFFALSE 79004
// continue ;
79002: GO 78977
// if weapon in weapons then
79004: LD_VAR 0 8
79008: PUSH
79009: LD_VAR 0 9
79013: IN
79014: IFFALSE 79041
// begin result := [ i , weapon ] ;
79016: LD_ADDR_VAR 0 3
79020: PUSH
79021: LD_VAR 0 4
79025: PUSH
79026: LD_VAR 0 8
79030: PUSH
79031: EMPTY
79032: LIST
79033: LIST
79034: ST_TO_ADDR
// exit ;
79035: POP
79036: POP
79037: POP
79038: POP
79039: GO 79049
// end ; end ;
79041: GO 78977
79043: POP
79044: POP
// end ;
79045: GO 78863
79047: POP
79048: POP
// end ;
79049: LD_VAR 0 3
79053: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79054: LD_INT 0
79056: PPUSH
// if not side or side > 8 then
79057: LD_VAR 0 3
79061: NOT
79062: IFTRUE 79074
79064: PUSH
79065: LD_VAR 0 3
79069: PUSH
79070: LD_INT 8
79072: GREATER
79073: OR
79074: IFFALSE 79078
// exit ;
79076: GO 79137
// if not range then
79078: LD_VAR 0 4
79082: NOT
79083: IFFALSE 79094
// range := - 12 ;
79085: LD_ADDR_VAR 0 4
79089: PUSH
79090: LD_INT 12
79092: NEG
79093: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79094: LD_VAR 0 1
79098: PPUSH
79099: LD_VAR 0 2
79103: PPUSH
79104: LD_VAR 0 3
79108: PPUSH
79109: LD_VAR 0 4
79113: PPUSH
79114: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79118: LD_VAR 0 1
79122: PPUSH
79123: LD_VAR 0 2
79127: PPUSH
79128: LD_VAR 0 3
79132: PPUSH
79133: CALL_OW 331
// end ;
79137: LD_VAR 0 5
79141: RET
// export function Video ( mode ) ; begin
79142: LD_INT 0
79144: PPUSH
// ingame_video = mode ;
79145: LD_ADDR_OWVAR 52
79149: PUSH
79150: LD_VAR 0 1
79154: ST_TO_ADDR
// interface_hidden = mode ;
79155: LD_ADDR_OWVAR 54
79159: PUSH
79160: LD_VAR 0 1
79164: ST_TO_ADDR
// end ;
79165: LD_VAR 0 2
79169: RET
// export function Join ( array , element ) ; begin
79170: LD_INT 0
79172: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79173: LD_ADDR_VAR 0 3
79177: PUSH
79178: LD_VAR 0 1
79182: PPUSH
79183: LD_VAR 0 1
79187: PUSH
79188: LD_INT 1
79190: PLUS
79191: PPUSH
79192: LD_VAR 0 2
79196: PPUSH
79197: CALL_OW 1
79201: ST_TO_ADDR
// end ;
79202: LD_VAR 0 3
79206: RET
// export function JoinUnion ( array , element ) ; begin
79207: LD_INT 0
79209: PPUSH
// result := array union element ;
79210: LD_ADDR_VAR 0 3
79214: PUSH
79215: LD_VAR 0 1
79219: PUSH
79220: LD_VAR 0 2
79224: UNION
79225: ST_TO_ADDR
// end ;
79226: LD_VAR 0 3
79230: RET
// export function GetBehemoths ( side ) ; begin
79231: LD_INT 0
79233: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79234: LD_ADDR_VAR 0 2
79238: PUSH
79239: LD_INT 22
79241: PUSH
79242: LD_VAR 0 1
79246: PUSH
79247: EMPTY
79248: LIST
79249: LIST
79250: PUSH
79251: LD_INT 31
79253: PUSH
79254: LD_INT 25
79256: PUSH
79257: EMPTY
79258: LIST
79259: LIST
79260: PUSH
79261: EMPTY
79262: LIST
79263: LIST
79264: PPUSH
79265: CALL_OW 69
79269: ST_TO_ADDR
// end ;
79270: LD_VAR 0 2
79274: RET
// export function Shuffle ( array ) ; var i , index ; begin
79275: LD_INT 0
79277: PPUSH
79278: PPUSH
79279: PPUSH
// result := [ ] ;
79280: LD_ADDR_VAR 0 2
79284: PUSH
79285: EMPTY
79286: ST_TO_ADDR
// if not array then
79287: LD_VAR 0 1
79291: NOT
79292: IFFALSE 79296
// exit ;
79294: GO 79395
// Randomize ;
79296: CALL_OW 10
// for i = array downto 1 do
79300: LD_ADDR_VAR 0 3
79304: PUSH
79305: DOUBLE
79306: LD_VAR 0 1
79310: INC
79311: ST_TO_ADDR
79312: LD_INT 1
79314: PUSH
79315: FOR_DOWNTO
79316: IFFALSE 79393
// begin index := rand ( 1 , array ) ;
79318: LD_ADDR_VAR 0 4
79322: PUSH
79323: LD_INT 1
79325: PPUSH
79326: LD_VAR 0 1
79330: PPUSH
79331: CALL_OW 12
79335: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79336: LD_ADDR_VAR 0 2
79340: PUSH
79341: LD_VAR 0 2
79345: PPUSH
79346: LD_VAR 0 2
79350: PUSH
79351: LD_INT 1
79353: PLUS
79354: PPUSH
79355: LD_VAR 0 1
79359: PUSH
79360: LD_VAR 0 4
79364: ARRAY
79365: PPUSH
79366: CALL_OW 2
79370: ST_TO_ADDR
// array := Delete ( array , index ) ;
79371: LD_ADDR_VAR 0 1
79375: PUSH
79376: LD_VAR 0 1
79380: PPUSH
79381: LD_VAR 0 4
79385: PPUSH
79386: CALL_OW 3
79390: ST_TO_ADDR
// end ;
79391: GO 79315
79393: POP
79394: POP
// end ;
79395: LD_VAR 0 2
79399: RET
// export function GetBaseMaterials ( base ) ; begin
79400: LD_INT 0
79402: PPUSH
// result := [ 0 , 0 , 0 ] ;
79403: LD_ADDR_VAR 0 2
79407: PUSH
79408: LD_INT 0
79410: PUSH
79411: LD_INT 0
79413: PUSH
79414: LD_INT 0
79416: PUSH
79417: EMPTY
79418: LIST
79419: LIST
79420: LIST
79421: ST_TO_ADDR
// if not base then
79422: LD_VAR 0 1
79426: NOT
79427: IFFALSE 79431
// exit ;
79429: GO 79480
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79431: LD_ADDR_VAR 0 2
79435: PUSH
79436: LD_VAR 0 1
79440: PPUSH
79441: LD_INT 1
79443: PPUSH
79444: CALL_OW 275
79448: PUSH
79449: LD_VAR 0 1
79453: PPUSH
79454: LD_INT 2
79456: PPUSH
79457: CALL_OW 275
79461: PUSH
79462: LD_VAR 0 1
79466: PPUSH
79467: LD_INT 3
79469: PPUSH
79470: CALL_OW 275
79474: PUSH
79475: EMPTY
79476: LIST
79477: LIST
79478: LIST
79479: ST_TO_ADDR
// end ;
79480: LD_VAR 0 2
79484: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79485: LD_INT 0
79487: PPUSH
79488: PPUSH
// result := array ;
79489: LD_ADDR_VAR 0 3
79493: PUSH
79494: LD_VAR 0 1
79498: ST_TO_ADDR
// if size >= result then
79499: LD_VAR 0 2
79503: PUSH
79504: LD_VAR 0 3
79508: GREATEREQUAL
79509: IFFALSE 79513
// exit ;
79511: GO 79563
// if size then
79513: LD_VAR 0 2
79517: IFFALSE 79563
// for i := array downto size do
79519: LD_ADDR_VAR 0 4
79523: PUSH
79524: DOUBLE
79525: LD_VAR 0 1
79529: INC
79530: ST_TO_ADDR
79531: LD_VAR 0 2
79535: PUSH
79536: FOR_DOWNTO
79537: IFFALSE 79561
// result := Delete ( result , result ) ;
79539: LD_ADDR_VAR 0 3
79543: PUSH
79544: LD_VAR 0 3
79548: PPUSH
79549: LD_VAR 0 3
79553: PPUSH
79554: CALL_OW 3
79558: ST_TO_ADDR
79559: GO 79536
79561: POP
79562: POP
// end ;
79563: LD_VAR 0 3
79567: RET
// export function ComExit ( unit ) ; var tmp ; begin
79568: LD_INT 0
79570: PPUSH
79571: PPUSH
// if not IsInUnit ( unit ) then
79572: LD_VAR 0 1
79576: PPUSH
79577: CALL_OW 310
79581: NOT
79582: IFFALSE 79586
// exit ;
79584: GO 79646
// tmp := IsInUnit ( unit ) ;
79586: LD_ADDR_VAR 0 3
79590: PUSH
79591: LD_VAR 0 1
79595: PPUSH
79596: CALL_OW 310
79600: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79601: LD_VAR 0 3
79605: PPUSH
79606: CALL_OW 247
79610: PUSH
79611: LD_INT 2
79613: EQUAL
79614: IFFALSE 79627
// ComExitVehicle ( unit ) else
79616: LD_VAR 0 1
79620: PPUSH
79621: CALL_OW 121
79625: GO 79636
// ComExitBuilding ( unit ) ;
79627: LD_VAR 0 1
79631: PPUSH
79632: CALL_OW 122
// result := tmp ;
79636: LD_ADDR_VAR 0 2
79640: PUSH
79641: LD_VAR 0 3
79645: ST_TO_ADDR
// end ;
79646: LD_VAR 0 2
79650: RET
// export function ComExitAll ( units ) ; var i ; begin
79651: LD_INT 0
79653: PPUSH
79654: PPUSH
// if not units then
79655: LD_VAR 0 1
79659: NOT
79660: IFFALSE 79664
// exit ;
79662: GO 79690
// for i in units do
79664: LD_ADDR_VAR 0 3
79668: PUSH
79669: LD_VAR 0 1
79673: PUSH
79674: FOR_IN
79675: IFFALSE 79688
// ComExit ( i ) ;
79677: LD_VAR 0 3
79681: PPUSH
79682: CALL 79568 0 1
79686: GO 79674
79688: POP
79689: POP
// end ;
79690: LD_VAR 0 2
79694: RET
// export function ResetHc ; begin
79695: LD_INT 0
79697: PPUSH
// InitHc ;
79698: CALL_OW 19
// hc_importance := 0 ;
79702: LD_ADDR_OWVAR 32
79706: PUSH
79707: LD_INT 0
79709: ST_TO_ADDR
// end ;
79710: LD_VAR 0 1
79714: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79715: LD_INT 0
79717: PPUSH
79718: PPUSH
79719: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79720: LD_ADDR_VAR 0 6
79724: PUSH
79725: LD_VAR 0 1
79729: PUSH
79730: LD_VAR 0 3
79734: PLUS
79735: PUSH
79736: LD_INT 2
79738: DIV
79739: ST_TO_ADDR
// if _x < 0 then
79740: LD_VAR 0 6
79744: PUSH
79745: LD_INT 0
79747: LESS
79748: IFFALSE 79765
// _x := _x * - 1 ;
79750: LD_ADDR_VAR 0 6
79754: PUSH
79755: LD_VAR 0 6
79759: PUSH
79760: LD_INT 1
79762: NEG
79763: MUL
79764: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79765: LD_ADDR_VAR 0 7
79769: PUSH
79770: LD_VAR 0 2
79774: PUSH
79775: LD_VAR 0 4
79779: PLUS
79780: PUSH
79781: LD_INT 2
79783: DIV
79784: ST_TO_ADDR
// if _y < 0 then
79785: LD_VAR 0 7
79789: PUSH
79790: LD_INT 0
79792: LESS
79793: IFFALSE 79810
// _y := _y * - 1 ;
79795: LD_ADDR_VAR 0 7
79799: PUSH
79800: LD_VAR 0 7
79804: PUSH
79805: LD_INT 1
79807: NEG
79808: MUL
79809: ST_TO_ADDR
// result := [ _x , _y ] ;
79810: LD_ADDR_VAR 0 5
79814: PUSH
79815: LD_VAR 0 6
79819: PUSH
79820: LD_VAR 0 7
79824: PUSH
79825: EMPTY
79826: LIST
79827: LIST
79828: ST_TO_ADDR
// end ;
79829: LD_VAR 0 5
79833: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79834: LD_INT 0
79836: PPUSH
79837: PPUSH
79838: PPUSH
79839: PPUSH
// task := GetTaskList ( unit ) ;
79840: LD_ADDR_VAR 0 7
79844: PUSH
79845: LD_VAR 0 1
79849: PPUSH
79850: CALL_OW 437
79854: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79855: LD_VAR 0 7
79859: NOT
79860: IFFALSE 79879
79862: PUSH
79863: LD_VAR 0 1
79867: PPUSH
79868: LD_VAR 0 2
79872: PPUSH
79873: CALL_OW 308
79877: NOT
79878: AND
79879: IFFALSE 79883
// exit ;
79881: GO 80001
// if IsInArea ( unit , area ) then
79883: LD_VAR 0 1
79887: PPUSH
79888: LD_VAR 0 2
79892: PPUSH
79893: CALL_OW 308
79897: IFFALSE 79915
// begin ComMoveToArea ( unit , goAway ) ;
79899: LD_VAR 0 1
79903: PPUSH
79904: LD_VAR 0 3
79908: PPUSH
79909: CALL_OW 113
// exit ;
79913: GO 80001
// end ; if task [ 1 ] [ 1 ] <> M then
79915: LD_VAR 0 7
79919: PUSH
79920: LD_INT 1
79922: ARRAY
79923: PUSH
79924: LD_INT 1
79926: ARRAY
79927: PUSH
79928: LD_STRING M
79930: NONEQUAL
79931: IFFALSE 79935
// exit ;
79933: GO 80001
// x := task [ 1 ] [ 2 ] ;
79935: LD_ADDR_VAR 0 5
79939: PUSH
79940: LD_VAR 0 7
79944: PUSH
79945: LD_INT 1
79947: ARRAY
79948: PUSH
79949: LD_INT 2
79951: ARRAY
79952: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79953: LD_ADDR_VAR 0 6
79957: PUSH
79958: LD_VAR 0 7
79962: PUSH
79963: LD_INT 1
79965: ARRAY
79966: PUSH
79967: LD_INT 3
79969: ARRAY
79970: ST_TO_ADDR
// if InArea ( x , y , area ) then
79971: LD_VAR 0 5
79975: PPUSH
79976: LD_VAR 0 6
79980: PPUSH
79981: LD_VAR 0 2
79985: PPUSH
79986: CALL_OW 309
79990: IFFALSE 80001
// ComStop ( unit ) ;
79992: LD_VAR 0 1
79996: PPUSH
79997: CALL_OW 141
// end ;
80001: LD_VAR 0 4
80005: RET
// export function Abs ( value ) ; begin
80006: LD_INT 0
80008: PPUSH
// result := value ;
80009: LD_ADDR_VAR 0 2
80013: PUSH
80014: LD_VAR 0 1
80018: ST_TO_ADDR
// if value < 0 then
80019: LD_VAR 0 1
80023: PUSH
80024: LD_INT 0
80026: LESS
80027: IFFALSE 80044
// result := value * - 1 ;
80029: LD_ADDR_VAR 0 2
80033: PUSH
80034: LD_VAR 0 1
80038: PUSH
80039: LD_INT 1
80041: NEG
80042: MUL
80043: ST_TO_ADDR
// end ;
80044: LD_VAR 0 2
80048: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80049: LD_INT 0
80051: PPUSH
80052: PPUSH
80053: PPUSH
80054: PPUSH
80055: PPUSH
80056: PPUSH
80057: PPUSH
80058: PPUSH
// if not unit or not building then
80059: LD_VAR 0 1
80063: NOT
80064: IFTRUE 80073
80066: PUSH
80067: LD_VAR 0 2
80071: NOT
80072: OR
80073: IFFALSE 80077
// exit ;
80075: GO 80305
// x := GetX ( building ) ;
80077: LD_ADDR_VAR 0 4
80081: PUSH
80082: LD_VAR 0 2
80086: PPUSH
80087: CALL_OW 250
80091: ST_TO_ADDR
// y := GetY ( building ) ;
80092: LD_ADDR_VAR 0 6
80096: PUSH
80097: LD_VAR 0 2
80101: PPUSH
80102: CALL_OW 251
80106: ST_TO_ADDR
// d := GetDir ( building ) ;
80107: LD_ADDR_VAR 0 8
80111: PUSH
80112: LD_VAR 0 2
80116: PPUSH
80117: CALL_OW 254
80121: ST_TO_ADDR
// r := 4 ;
80122: LD_ADDR_VAR 0 9
80126: PUSH
80127: LD_INT 4
80129: ST_TO_ADDR
// for i := 1 to 5 do
80130: LD_ADDR_VAR 0 10
80134: PUSH
80135: DOUBLE
80136: LD_INT 1
80138: DEC
80139: ST_TO_ADDR
80140: LD_INT 5
80142: PUSH
80143: FOR_TO
80144: IFFALSE 80303
// begin _x := ShiftX ( x , d , r + i ) ;
80146: LD_ADDR_VAR 0 5
80150: PUSH
80151: LD_VAR 0 4
80155: PPUSH
80156: LD_VAR 0 8
80160: PPUSH
80161: LD_VAR 0 9
80165: PUSH
80166: LD_VAR 0 10
80170: PLUS
80171: PPUSH
80172: CALL_OW 272
80176: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80177: LD_ADDR_VAR 0 7
80181: PUSH
80182: LD_VAR 0 6
80186: PPUSH
80187: LD_VAR 0 8
80191: PPUSH
80192: LD_VAR 0 9
80196: PUSH
80197: LD_VAR 0 10
80201: PLUS
80202: PPUSH
80203: CALL_OW 273
80207: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80208: LD_VAR 0 5
80212: PPUSH
80213: LD_VAR 0 7
80217: PPUSH
80218: CALL_OW 488
80222: IFFALSE 80257
80224: PUSH
80225: LD_VAR 0 5
80229: PPUSH
80230: LD_VAR 0 7
80234: PPUSH
80235: CALL_OW 428
80239: PPUSH
80240: CALL_OW 247
80244: PUSH
80245: LD_INT 3
80247: PUSH
80248: LD_INT 2
80250: PUSH
80251: EMPTY
80252: LIST
80253: LIST
80254: IN
80255: NOT
80256: AND
80257: IFFALSE 80301
// begin ComMoveXY ( unit , _x , _y ) ;
80259: LD_VAR 0 1
80263: PPUSH
80264: LD_VAR 0 5
80268: PPUSH
80269: LD_VAR 0 7
80273: PPUSH
80274: CALL_OW 111
// result := [ _x , _y ] ;
80278: LD_ADDR_VAR 0 3
80282: PUSH
80283: LD_VAR 0 5
80287: PUSH
80288: LD_VAR 0 7
80292: PUSH
80293: EMPTY
80294: LIST
80295: LIST
80296: ST_TO_ADDR
// exit ;
80297: POP
80298: POP
80299: GO 80305
// end ; end ;
80301: GO 80143
80303: POP
80304: POP
// end ;
80305: LD_VAR 0 3
80309: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80310: LD_INT 0
80312: PPUSH
80313: PPUSH
80314: PPUSH
// result := 0 ;
80315: LD_ADDR_VAR 0 3
80319: PUSH
80320: LD_INT 0
80322: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80323: LD_VAR 0 1
80327: PUSH
80328: LD_INT 0
80330: LESS
80331: IFTRUE 80343
80333: PUSH
80334: LD_VAR 0 1
80338: PUSH
80339: LD_INT 8
80341: GREATER
80342: OR
80343: IFTRUE 80355
80345: PUSH
80346: LD_VAR 0 2
80350: PUSH
80351: LD_INT 0
80353: LESS
80354: OR
80355: IFTRUE 80367
80357: PUSH
80358: LD_VAR 0 2
80362: PUSH
80363: LD_INT 8
80365: GREATER
80366: OR
80367: IFFALSE 80371
// exit ;
80369: GO 80446
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80371: LD_ADDR_VAR 0 4
80375: PUSH
80376: LD_INT 22
80378: PUSH
80379: LD_VAR 0 2
80383: PUSH
80384: EMPTY
80385: LIST
80386: LIST
80387: PPUSH
80388: CALL_OW 69
80392: PUSH
80393: FOR_IN
80394: IFFALSE 80444
// begin un := UnitShoot ( i ) ;
80396: LD_ADDR_VAR 0 5
80400: PUSH
80401: LD_VAR 0 4
80405: PPUSH
80406: CALL_OW 504
80410: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80411: LD_VAR 0 5
80415: PPUSH
80416: CALL_OW 255
80420: PUSH
80421: LD_VAR 0 1
80425: EQUAL
80426: IFFALSE 80442
// begin result := un ;
80428: LD_ADDR_VAR 0 3
80432: PUSH
80433: LD_VAR 0 5
80437: ST_TO_ADDR
// exit ;
80438: POP
80439: POP
80440: GO 80446
// end ; end ;
80442: GO 80393
80444: POP
80445: POP
// end ;
80446: LD_VAR 0 3
80450: RET
// export function GetCargoBay ( units ) ; begin
80451: LD_INT 0
80453: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80454: LD_ADDR_VAR 0 2
80458: PUSH
80459: LD_VAR 0 1
80463: PPUSH
80464: LD_INT 2
80466: PUSH
80467: LD_INT 34
80469: PUSH
80470: LD_INT 12
80472: PUSH
80473: EMPTY
80474: LIST
80475: LIST
80476: PUSH
80477: LD_INT 34
80479: PUSH
80480: LD_INT 51
80482: PUSH
80483: EMPTY
80484: LIST
80485: LIST
80486: PUSH
80487: LD_INT 34
80489: PUSH
80490: LD_INT 32
80492: PUSH
80493: EMPTY
80494: LIST
80495: LIST
80496: PUSH
80497: LD_INT 34
80499: PUSH
80500: LD_INT 89
80502: PUSH
80503: EMPTY
80504: LIST
80505: LIST
80506: PUSH
80507: EMPTY
80508: LIST
80509: LIST
80510: LIST
80511: LIST
80512: LIST
80513: PPUSH
80514: CALL_OW 72
80518: ST_TO_ADDR
// end ;
80519: LD_VAR 0 2
80523: RET
// export function Negate ( value ) ; begin
80524: LD_INT 0
80526: PPUSH
// result := not value ;
80527: LD_ADDR_VAR 0 2
80531: PUSH
80532: LD_VAR 0 1
80536: NOT
80537: ST_TO_ADDR
// end ;
80538: LD_VAR 0 2
80542: RET
// export function Inc ( value ) ; begin
80543: LD_INT 0
80545: PPUSH
// result := value + 1 ;
80546: LD_ADDR_VAR 0 2
80550: PUSH
80551: LD_VAR 0 1
80555: PUSH
80556: LD_INT 1
80558: PLUS
80559: ST_TO_ADDR
// end ;
80560: LD_VAR 0 2
80564: RET
// export function Dec ( value ) ; begin
80565: LD_INT 0
80567: PPUSH
// result := value - 1 ;
80568: LD_ADDR_VAR 0 2
80572: PUSH
80573: LD_VAR 0 1
80577: PUSH
80578: LD_INT 1
80580: MINUS
80581: ST_TO_ADDR
// end ;
80582: LD_VAR 0 2
80586: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80587: LD_INT 0
80589: PPUSH
80590: PPUSH
80591: PPUSH
80592: PPUSH
80593: PPUSH
80594: PPUSH
80595: PPUSH
80596: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80597: LD_VAR 0 1
80601: PPUSH
80602: LD_VAR 0 2
80606: PPUSH
80607: CALL_OW 488
80611: NOT
80612: IFTRUE 80631
80614: PUSH
80615: LD_VAR 0 3
80619: PPUSH
80620: LD_VAR 0 4
80624: PPUSH
80625: CALL_OW 488
80629: NOT
80630: OR
80631: IFFALSE 80644
// begin result := - 1 ;
80633: LD_ADDR_VAR 0 5
80637: PUSH
80638: LD_INT 1
80640: NEG
80641: ST_TO_ADDR
// exit ;
80642: GO 80879
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80644: LD_ADDR_VAR 0 12
80648: PUSH
80649: LD_VAR 0 1
80653: PPUSH
80654: LD_VAR 0 2
80658: PPUSH
80659: LD_VAR 0 3
80663: PPUSH
80664: LD_VAR 0 4
80668: PPUSH
80669: CALL 79715 0 4
80673: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80674: LD_ADDR_VAR 0 11
80678: PUSH
80679: LD_VAR 0 1
80683: PPUSH
80684: LD_VAR 0 2
80688: PPUSH
80689: LD_VAR 0 12
80693: PUSH
80694: LD_INT 1
80696: ARRAY
80697: PPUSH
80698: LD_VAR 0 12
80702: PUSH
80703: LD_INT 2
80705: ARRAY
80706: PPUSH
80707: CALL_OW 298
80711: ST_TO_ADDR
// distance := 9999 ;
80712: LD_ADDR_VAR 0 10
80716: PUSH
80717: LD_INT 9999
80719: ST_TO_ADDR
// for i := 0 to 5 do
80720: LD_ADDR_VAR 0 6
80724: PUSH
80725: DOUBLE
80726: LD_INT 0
80728: DEC
80729: ST_TO_ADDR
80730: LD_INT 5
80732: PUSH
80733: FOR_TO
80734: IFFALSE 80877
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80736: LD_ADDR_VAR 0 7
80740: PUSH
80741: LD_VAR 0 1
80745: PPUSH
80746: LD_VAR 0 6
80750: PPUSH
80751: LD_VAR 0 11
80755: PPUSH
80756: CALL_OW 272
80760: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80761: LD_ADDR_VAR 0 8
80765: PUSH
80766: LD_VAR 0 2
80770: PPUSH
80771: LD_VAR 0 6
80775: PPUSH
80776: LD_VAR 0 11
80780: PPUSH
80781: CALL_OW 273
80785: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80786: LD_VAR 0 7
80790: PPUSH
80791: LD_VAR 0 8
80795: PPUSH
80796: CALL_OW 488
80800: NOT
80801: IFFALSE 80805
// continue ;
80803: GO 80733
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80805: LD_ADDR_VAR 0 9
80809: PUSH
80810: LD_VAR 0 12
80814: PUSH
80815: LD_INT 1
80817: ARRAY
80818: PPUSH
80819: LD_VAR 0 12
80823: PUSH
80824: LD_INT 2
80826: ARRAY
80827: PPUSH
80828: LD_VAR 0 7
80832: PPUSH
80833: LD_VAR 0 8
80837: PPUSH
80838: CALL_OW 298
80842: ST_TO_ADDR
// if tmp < distance then
80843: LD_VAR 0 9
80847: PUSH
80848: LD_VAR 0 10
80852: LESS
80853: IFFALSE 80875
// begin result := i ;
80855: LD_ADDR_VAR 0 5
80859: PUSH
80860: LD_VAR 0 6
80864: ST_TO_ADDR
// distance := tmp ;
80865: LD_ADDR_VAR 0 10
80869: PUSH
80870: LD_VAR 0 9
80874: ST_TO_ADDR
// end ; end ;
80875: GO 80733
80877: POP
80878: POP
// end ;
80879: LD_VAR 0 5
80883: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80884: LD_INT 0
80886: PPUSH
80887: PPUSH
// if not driver or not IsInUnit ( driver ) then
80888: LD_VAR 0 1
80892: NOT
80893: IFTRUE 80907
80895: PUSH
80896: LD_VAR 0 1
80900: PPUSH
80901: CALL_OW 310
80905: NOT
80906: OR
80907: IFFALSE 80911
// exit ;
80909: GO 81001
// vehicle := IsInUnit ( driver ) ;
80911: LD_ADDR_VAR 0 3
80915: PUSH
80916: LD_VAR 0 1
80920: PPUSH
80921: CALL_OW 310
80925: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80926: LD_VAR 0 1
80930: PPUSH
80931: LD_STRING \
80933: PUSH
80934: LD_INT 0
80936: PUSH
80937: LD_INT 0
80939: PUSH
80940: LD_INT 0
80942: PUSH
80943: LD_INT 0
80945: PUSH
80946: LD_INT 0
80948: PUSH
80949: LD_INT 0
80951: PUSH
80952: EMPTY
80953: LIST
80954: LIST
80955: LIST
80956: LIST
80957: LIST
80958: LIST
80959: LIST
80960: PUSH
80961: LD_STRING E
80963: PUSH
80964: LD_INT 0
80966: PUSH
80967: LD_INT 0
80969: PUSH
80970: LD_VAR 0 3
80974: PUSH
80975: LD_INT 0
80977: PUSH
80978: LD_INT 0
80980: PUSH
80981: LD_INT 0
80983: PUSH
80984: EMPTY
80985: LIST
80986: LIST
80987: LIST
80988: LIST
80989: LIST
80990: LIST
80991: LIST
80992: PUSH
80993: EMPTY
80994: LIST
80995: LIST
80996: PPUSH
80997: CALL_OW 446
// end ;
81001: LD_VAR 0 2
81005: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81006: LD_INT 0
81008: PPUSH
81009: PPUSH
// if not driver or not IsInUnit ( driver ) then
81010: LD_VAR 0 1
81014: NOT
81015: IFTRUE 81029
81017: PUSH
81018: LD_VAR 0 1
81022: PPUSH
81023: CALL_OW 310
81027: NOT
81028: OR
81029: IFFALSE 81033
// exit ;
81031: GO 81123
// vehicle := IsInUnit ( driver ) ;
81033: LD_ADDR_VAR 0 3
81037: PUSH
81038: LD_VAR 0 1
81042: PPUSH
81043: CALL_OW 310
81047: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81048: LD_VAR 0 1
81052: PPUSH
81053: LD_STRING \
81055: PUSH
81056: LD_INT 0
81058: PUSH
81059: LD_INT 0
81061: PUSH
81062: LD_INT 0
81064: PUSH
81065: LD_INT 0
81067: PUSH
81068: LD_INT 0
81070: PUSH
81071: LD_INT 0
81073: PUSH
81074: EMPTY
81075: LIST
81076: LIST
81077: LIST
81078: LIST
81079: LIST
81080: LIST
81081: LIST
81082: PUSH
81083: LD_STRING E
81085: PUSH
81086: LD_INT 0
81088: PUSH
81089: LD_INT 0
81091: PUSH
81092: LD_VAR 0 3
81096: PUSH
81097: LD_INT 0
81099: PUSH
81100: LD_INT 0
81102: PUSH
81103: LD_INT 0
81105: PUSH
81106: EMPTY
81107: LIST
81108: LIST
81109: LIST
81110: LIST
81111: LIST
81112: LIST
81113: LIST
81114: PUSH
81115: EMPTY
81116: LIST
81117: LIST
81118: PPUSH
81119: CALL_OW 447
// end ;
81123: LD_VAR 0 2
81127: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81128: LD_INT 0
81130: PPUSH
81131: PPUSH
81132: PPUSH
// tmp := [ ] ;
81133: LD_ADDR_VAR 0 5
81137: PUSH
81138: EMPTY
81139: ST_TO_ADDR
// for i in units do
81140: LD_ADDR_VAR 0 4
81144: PUSH
81145: LD_VAR 0 1
81149: PUSH
81150: FOR_IN
81151: IFFALSE 81189
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81153: LD_ADDR_VAR 0 5
81157: PUSH
81158: LD_VAR 0 5
81162: PPUSH
81163: LD_VAR 0 5
81167: PUSH
81168: LD_INT 1
81170: PLUS
81171: PPUSH
81172: LD_VAR 0 4
81176: PPUSH
81177: CALL_OW 256
81181: PPUSH
81182: CALL_OW 2
81186: ST_TO_ADDR
81187: GO 81150
81189: POP
81190: POP
// if not tmp then
81191: LD_VAR 0 5
81195: NOT
81196: IFFALSE 81200
// exit ;
81198: GO 81248
// if asc then
81200: LD_VAR 0 2
81204: IFFALSE 81228
// result := SortListByListAsc ( units , tmp ) else
81206: LD_ADDR_VAR 0 3
81210: PUSH
81211: LD_VAR 0 1
81215: PPUSH
81216: LD_VAR 0 5
81220: PPUSH
81221: CALL_OW 76
81225: ST_TO_ADDR
81226: GO 81248
// result := SortListByListDesc ( units , tmp ) ;
81228: LD_ADDR_VAR 0 3
81232: PUSH
81233: LD_VAR 0 1
81237: PPUSH
81238: LD_VAR 0 5
81242: PPUSH
81243: CALL_OW 77
81247: ST_TO_ADDR
// end ;
81248: LD_VAR 0 3
81252: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81253: LD_INT 0
81255: PPUSH
81256: PPUSH
// task := GetTaskList ( mech ) ;
81257: LD_ADDR_VAR 0 4
81261: PUSH
81262: LD_VAR 0 1
81266: PPUSH
81267: CALL_OW 437
81271: ST_TO_ADDR
// if not task then
81272: LD_VAR 0 4
81276: NOT
81277: IFFALSE 81281
// exit ;
81279: GO 81325
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81281: LD_ADDR_VAR 0 3
81285: PUSH
81286: LD_VAR 0 4
81290: PUSH
81291: LD_INT 1
81293: ARRAY
81294: PUSH
81295: LD_INT 1
81297: ARRAY
81298: PUSH
81299: LD_STRING r
81301: EQUAL
81302: IFFALSE 81324
81304: PUSH
81305: LD_VAR 0 4
81309: PUSH
81310: LD_INT 1
81312: ARRAY
81313: PUSH
81314: LD_INT 4
81316: ARRAY
81317: PUSH
81318: LD_VAR 0 2
81322: EQUAL
81323: AND
81324: ST_TO_ADDR
// end ;
81325: LD_VAR 0 3
81329: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81330: LD_INT 0
81332: PPUSH
// SetDir ( unit , d ) ;
81333: LD_VAR 0 1
81337: PPUSH
81338: LD_VAR 0 4
81342: PPUSH
81343: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
81347: LD_ADDR_VAR 0 6
81351: PUSH
81352: LD_VAR 0 1
81356: PPUSH
81357: LD_VAR 0 2
81361: PPUSH
81362: LD_VAR 0 3
81366: PPUSH
81367: LD_VAR 0 5
81371: PPUSH
81372: CALL_OW 48
81376: ST_TO_ADDR
// end ;
81377: LD_VAR 0 6
81381: RET
// export function ToNaturalNumber ( number ) ; begin
81382: LD_INT 0
81384: PPUSH
// result := number div 1 ;
81385: LD_ADDR_VAR 0 2
81389: PUSH
81390: LD_VAR 0 1
81394: PUSH
81395: LD_INT 1
81397: DIV
81398: ST_TO_ADDR
// if number < 0 then
81399: LD_VAR 0 1
81403: PUSH
81404: LD_INT 0
81406: LESS
81407: IFFALSE 81417
// result := 0 ;
81409: LD_ADDR_VAR 0 2
81413: PUSH
81414: LD_INT 0
81416: ST_TO_ADDR
// end ;
81417: LD_VAR 0 2
81421: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
81422: LD_INT 0
81424: PPUSH
81425: PPUSH
81426: PPUSH
// if not buildings then
81427: LD_VAR 0 1
81431: NOT
81432: IFFALSE 81436
// exit ;
81434: GO 81551
// tmp := [ ] ;
81436: LD_ADDR_VAR 0 5
81440: PUSH
81441: EMPTY
81442: ST_TO_ADDR
// for b in buildings do
81443: LD_ADDR_VAR 0 4
81447: PUSH
81448: LD_VAR 0 1
81452: PUSH
81453: FOR_IN
81454: IFFALSE 81492
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
81456: LD_ADDR_VAR 0 5
81460: PUSH
81461: LD_VAR 0 5
81465: PPUSH
81466: LD_VAR 0 5
81470: PUSH
81471: LD_INT 1
81473: PLUS
81474: PPUSH
81475: LD_VAR 0 4
81479: PPUSH
81480: CALL_OW 266
81484: PPUSH
81485: CALL_OW 1
81489: ST_TO_ADDR
81490: GO 81453
81492: POP
81493: POP
// if not tmp then
81494: LD_VAR 0 5
81498: NOT
81499: IFFALSE 81503
// exit ;
81501: GO 81551
// if asc then
81503: LD_VAR 0 2
81507: IFFALSE 81531
// result := SortListByListAsc ( buildings , tmp ) else
81509: LD_ADDR_VAR 0 3
81513: PUSH
81514: LD_VAR 0 1
81518: PPUSH
81519: LD_VAR 0 5
81523: PPUSH
81524: CALL_OW 76
81528: ST_TO_ADDR
81529: GO 81551
// result := SortListByListDesc ( buildings , tmp ) ;
81531: LD_ADDR_VAR 0 3
81535: PUSH
81536: LD_VAR 0 1
81540: PPUSH
81541: LD_VAR 0 5
81545: PPUSH
81546: CALL_OW 77
81550: ST_TO_ADDR
// end ;
81551: LD_VAR 0 3
81555: RET
// export function SortByClass ( units , class ) ; var un ; begin
81556: LD_INT 0
81558: PPUSH
81559: PPUSH
// if not units or not class then
81560: LD_VAR 0 1
81564: NOT
81565: IFTRUE 81574
81567: PUSH
81568: LD_VAR 0 2
81572: NOT
81573: OR
81574: IFFALSE 81578
// exit ;
81576: GO 81673
// result := [ ] ;
81578: LD_ADDR_VAR 0 3
81582: PUSH
81583: EMPTY
81584: ST_TO_ADDR
// for un in units do
81585: LD_ADDR_VAR 0 4
81589: PUSH
81590: LD_VAR 0 1
81594: PUSH
81595: FOR_IN
81596: IFFALSE 81671
// if GetClass ( un ) = class then
81598: LD_VAR 0 4
81602: PPUSH
81603: CALL_OW 257
81607: PUSH
81608: LD_VAR 0 2
81612: EQUAL
81613: IFFALSE 81640
// result := Insert ( result , 1 , un ) else
81615: LD_ADDR_VAR 0 3
81619: PUSH
81620: LD_VAR 0 3
81624: PPUSH
81625: LD_INT 1
81627: PPUSH
81628: LD_VAR 0 4
81632: PPUSH
81633: CALL_OW 2
81637: ST_TO_ADDR
81638: GO 81669
// result := Replace ( result , result + 1 , un ) ;
81640: LD_ADDR_VAR 0 3
81644: PUSH
81645: LD_VAR 0 3
81649: PPUSH
81650: LD_VAR 0 3
81654: PUSH
81655: LD_INT 1
81657: PLUS
81658: PPUSH
81659: LD_VAR 0 4
81663: PPUSH
81664: CALL_OW 1
81668: ST_TO_ADDR
81669: GO 81595
81671: POP
81672: POP
// end ;
81673: LD_VAR 0 3
81677: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81678: LD_INT 0
81680: PPUSH
81681: PPUSH
81682: PPUSH
81683: PPUSH
81684: PPUSH
81685: PPUSH
81686: PPUSH
// result := [ ] ;
81687: LD_ADDR_VAR 0 4
81691: PUSH
81692: EMPTY
81693: ST_TO_ADDR
// if x - r < 0 then
81694: LD_VAR 0 1
81698: PUSH
81699: LD_VAR 0 3
81703: MINUS
81704: PUSH
81705: LD_INT 0
81707: LESS
81708: IFFALSE 81720
// min_x := 0 else
81710: LD_ADDR_VAR 0 8
81714: PUSH
81715: LD_INT 0
81717: ST_TO_ADDR
81718: GO 81736
// min_x := x - r ;
81720: LD_ADDR_VAR 0 8
81724: PUSH
81725: LD_VAR 0 1
81729: PUSH
81730: LD_VAR 0 3
81734: MINUS
81735: ST_TO_ADDR
// if y - r < 0 then
81736: LD_VAR 0 2
81740: PUSH
81741: LD_VAR 0 3
81745: MINUS
81746: PUSH
81747: LD_INT 0
81749: LESS
81750: IFFALSE 81762
// min_y := 0 else
81752: LD_ADDR_VAR 0 7
81756: PUSH
81757: LD_INT 0
81759: ST_TO_ADDR
81760: GO 81778
// min_y := y - r ;
81762: LD_ADDR_VAR 0 7
81766: PUSH
81767: LD_VAR 0 2
81771: PUSH
81772: LD_VAR 0 3
81776: MINUS
81777: ST_TO_ADDR
// max_x := x + r ;
81778: LD_ADDR_VAR 0 9
81782: PUSH
81783: LD_VAR 0 1
81787: PUSH
81788: LD_VAR 0 3
81792: PLUS
81793: ST_TO_ADDR
// max_y := y + r ;
81794: LD_ADDR_VAR 0 10
81798: PUSH
81799: LD_VAR 0 2
81803: PUSH
81804: LD_VAR 0 3
81808: PLUS
81809: ST_TO_ADDR
// for _x = min_x to max_x do
81810: LD_ADDR_VAR 0 5
81814: PUSH
81815: DOUBLE
81816: LD_VAR 0 8
81820: DEC
81821: ST_TO_ADDR
81822: LD_VAR 0 9
81826: PUSH
81827: FOR_TO
81828: IFFALSE 81929
// for _y = min_y to max_y do
81830: LD_ADDR_VAR 0 6
81834: PUSH
81835: DOUBLE
81836: LD_VAR 0 7
81840: DEC
81841: ST_TO_ADDR
81842: LD_VAR 0 10
81846: PUSH
81847: FOR_TO
81848: IFFALSE 81925
// begin if not ValidHex ( _x , _y ) then
81850: LD_VAR 0 5
81854: PPUSH
81855: LD_VAR 0 6
81859: PPUSH
81860: CALL_OW 488
81864: NOT
81865: IFFALSE 81869
// continue ;
81867: GO 81847
// if GetResourceTypeXY ( _x , _y ) then
81869: LD_VAR 0 5
81873: PPUSH
81874: LD_VAR 0 6
81878: PPUSH
81879: CALL_OW 283
81883: IFFALSE 81923
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81885: LD_ADDR_VAR 0 4
81889: PUSH
81890: LD_VAR 0 4
81894: PPUSH
81895: LD_VAR 0 4
81899: PUSH
81900: LD_INT 1
81902: PLUS
81903: PPUSH
81904: LD_VAR 0 5
81908: PUSH
81909: LD_VAR 0 6
81913: PUSH
81914: EMPTY
81915: LIST
81916: LIST
81917: PPUSH
81918: CALL_OW 1
81922: ST_TO_ADDR
// end ;
81923: GO 81847
81925: POP
81926: POP
81927: GO 81827
81929: POP
81930: POP
// end ;
81931: LD_VAR 0 4
81935: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81936: LD_INT 0
81938: PPUSH
81939: PPUSH
81940: PPUSH
81941: PPUSH
81942: PPUSH
81943: PPUSH
81944: PPUSH
81945: PPUSH
// if not units then
81946: LD_VAR 0 1
81950: NOT
81951: IFFALSE 81955
// exit ;
81953: GO 82487
// result := UnitFilter ( units , [ f_ok ] ) ;
81955: LD_ADDR_VAR 0 3
81959: PUSH
81960: LD_VAR 0 1
81964: PPUSH
81965: LD_INT 50
81967: PUSH
81968: EMPTY
81969: LIST
81970: PPUSH
81971: CALL_OW 72
81975: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81976: LD_ADDR_VAR 0 8
81980: PUSH
81981: LD_VAR 0 1
81985: PUSH
81986: LD_INT 1
81988: ARRAY
81989: PPUSH
81990: CALL_OW 255
81994: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81995: LD_ADDR_VAR 0 10
81999: PUSH
82000: LD_INT 29
82002: PUSH
82003: LD_INT 91
82005: PUSH
82006: LD_INT 49
82008: PUSH
82009: EMPTY
82010: LIST
82011: LIST
82012: LIST
82013: ST_TO_ADDR
// if not result then
82014: LD_VAR 0 3
82018: NOT
82019: IFFALSE 82023
// exit ;
82021: GO 82487
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82023: LD_ADDR_VAR 0 5
82027: PUSH
82028: LD_INT 81
82030: PUSH
82031: LD_VAR 0 8
82035: PUSH
82036: EMPTY
82037: LIST
82038: LIST
82039: PPUSH
82040: CALL_OW 69
82044: ST_TO_ADDR
// for i in result do
82045: LD_ADDR_VAR 0 4
82049: PUSH
82050: LD_VAR 0 3
82054: PUSH
82055: FOR_IN
82056: IFFALSE 82485
// begin tag := GetTag ( i ) + 1 ;
82058: LD_ADDR_VAR 0 9
82062: PUSH
82063: LD_VAR 0 4
82067: PPUSH
82068: CALL_OW 110
82072: PUSH
82073: LD_INT 1
82075: PLUS
82076: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
82077: LD_ADDR_VAR 0 7
82081: PUSH
82082: LD_VAR 0 4
82086: PPUSH
82087: CALL_OW 250
82091: PPUSH
82092: LD_VAR 0 4
82096: PPUSH
82097: CALL_OW 251
82101: PPUSH
82102: LD_INT 4
82104: PPUSH
82105: CALL 81678 0 3
82109: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
82110: LD_VAR 0 4
82114: PPUSH
82115: CALL_OW 247
82119: PUSH
82120: LD_INT 2
82122: EQUAL
82123: IFFALSE 82135
82125: PUSH
82126: LD_VAR 0 7
82130: PUSH
82131: LD_INT 2
82133: GREATER
82134: AND
82135: IFFALSE 82155
82137: PUSH
82138: LD_VAR 0 4
82142: PPUSH
82143: CALL_OW 264
82147: PUSH
82148: LD_VAR 0 10
82152: IN
82153: NOT
82154: AND
82155: IFFALSE 82194
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82157: LD_VAR 0 4
82161: PPUSH
82162: LD_VAR 0 7
82166: PUSH
82167: LD_INT 1
82169: ARRAY
82170: PUSH
82171: LD_INT 1
82173: ARRAY
82174: PPUSH
82175: LD_VAR 0 7
82179: PUSH
82180: LD_INT 1
82182: ARRAY
82183: PUSH
82184: LD_INT 2
82186: ARRAY
82187: PPUSH
82188: CALL_OW 116
82192: GO 82483
// if path > tag then
82194: LD_VAR 0 2
82198: PUSH
82199: LD_VAR 0 9
82203: GREATER
82204: IFFALSE 82412
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82206: LD_ADDR_VAR 0 6
82210: PUSH
82211: LD_VAR 0 5
82215: PPUSH
82216: LD_INT 91
82218: PUSH
82219: LD_VAR 0 4
82223: PUSH
82224: LD_INT 8
82226: PUSH
82227: EMPTY
82228: LIST
82229: LIST
82230: LIST
82231: PPUSH
82232: CALL_OW 72
82236: ST_TO_ADDR
// if nearEnemy then
82237: LD_VAR 0 6
82241: IFFALSE 82310
// begin if GetWeapon ( i ) = ru_time_lapser then
82243: LD_VAR 0 4
82247: PPUSH
82248: CALL_OW 264
82252: PUSH
82253: LD_INT 49
82255: EQUAL
82256: IFFALSE 82284
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82258: LD_VAR 0 4
82262: PPUSH
82263: LD_VAR 0 6
82267: PPUSH
82268: LD_VAR 0 4
82272: PPUSH
82273: CALL_OW 74
82277: PPUSH
82278: CALL_OW 112
82282: GO 82308
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82284: LD_VAR 0 4
82288: PPUSH
82289: LD_VAR 0 6
82293: PPUSH
82294: LD_VAR 0 4
82298: PPUSH
82299: CALL_OW 74
82303: PPUSH
82304: CALL 83568 0 2
// end else
82308: GO 82410
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82310: LD_VAR 0 4
82314: PPUSH
82315: LD_VAR 0 2
82319: PUSH
82320: LD_VAR 0 9
82324: ARRAY
82325: PUSH
82326: LD_INT 1
82328: ARRAY
82329: PPUSH
82330: LD_VAR 0 2
82334: PUSH
82335: LD_VAR 0 9
82339: ARRAY
82340: PUSH
82341: LD_INT 2
82343: ARRAY
82344: PPUSH
82345: CALL_OW 297
82349: PUSH
82350: LD_INT 6
82352: GREATER
82353: IFFALSE 82396
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82355: LD_VAR 0 4
82359: PPUSH
82360: LD_VAR 0 2
82364: PUSH
82365: LD_VAR 0 9
82369: ARRAY
82370: PUSH
82371: LD_INT 1
82373: ARRAY
82374: PPUSH
82375: LD_VAR 0 2
82379: PUSH
82380: LD_VAR 0 9
82384: ARRAY
82385: PUSH
82386: LD_INT 2
82388: ARRAY
82389: PPUSH
82390: CALL_OW 114
82394: GO 82410
// SetTag ( i , tag ) ;
82396: LD_VAR 0 4
82400: PPUSH
82401: LD_VAR 0 9
82405: PPUSH
82406: CALL_OW 109
// end else
82410: GO 82483
// if enemy then
82412: LD_VAR 0 5
82416: IFFALSE 82483
// begin if GetWeapon ( i ) = ru_time_lapser then
82418: LD_VAR 0 4
82422: PPUSH
82423: CALL_OW 264
82427: PUSH
82428: LD_INT 49
82430: EQUAL
82431: IFFALSE 82459
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82433: LD_VAR 0 4
82437: PPUSH
82438: LD_VAR 0 5
82442: PPUSH
82443: LD_VAR 0 4
82447: PPUSH
82448: CALL_OW 74
82452: PPUSH
82453: CALL_OW 112
82457: GO 82483
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82459: LD_VAR 0 4
82463: PPUSH
82464: LD_VAR 0 5
82468: PPUSH
82469: LD_VAR 0 4
82473: PPUSH
82474: CALL_OW 74
82478: PPUSH
82479: CALL 83568 0 2
// end ; end ;
82483: GO 82055
82485: POP
82486: POP
// end ;
82487: LD_VAR 0 3
82491: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82492: LD_INT 0
82494: PPUSH
82495: PPUSH
82496: PPUSH
// if not unit or IsInUnit ( unit ) then
82497: LD_VAR 0 1
82501: NOT
82502: IFTRUE 82515
82504: PUSH
82505: LD_VAR 0 1
82509: PPUSH
82510: CALL_OW 310
82514: OR
82515: IFFALSE 82519
// exit ;
82517: GO 82610
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82519: LD_ADDR_VAR 0 4
82523: PUSH
82524: LD_VAR 0 1
82528: PPUSH
82529: CALL_OW 250
82533: PPUSH
82534: LD_VAR 0 2
82538: PPUSH
82539: LD_INT 1
82541: PPUSH
82542: CALL_OW 272
82546: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82547: LD_ADDR_VAR 0 5
82551: PUSH
82552: LD_VAR 0 1
82556: PPUSH
82557: CALL_OW 251
82561: PPUSH
82562: LD_VAR 0 2
82566: PPUSH
82567: LD_INT 1
82569: PPUSH
82570: CALL_OW 273
82574: ST_TO_ADDR
// if ValidHex ( x , y ) then
82575: LD_VAR 0 4
82579: PPUSH
82580: LD_VAR 0 5
82584: PPUSH
82585: CALL_OW 488
82589: IFFALSE 82610
// ComTurnXY ( unit , x , y ) ;
82591: LD_VAR 0 1
82595: PPUSH
82596: LD_VAR 0 4
82600: PPUSH
82601: LD_VAR 0 5
82605: PPUSH
82606: CALL_OW 118
// end ;
82610: LD_VAR 0 3
82614: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82615: LD_INT 0
82617: PPUSH
82618: PPUSH
// result := false ;
82619: LD_ADDR_VAR 0 3
82623: PUSH
82624: LD_INT 0
82626: ST_TO_ADDR
// if not units then
82627: LD_VAR 0 2
82631: NOT
82632: IFFALSE 82636
// exit ;
82634: GO 82681
// for i in units do
82636: LD_ADDR_VAR 0 4
82640: PUSH
82641: LD_VAR 0 2
82645: PUSH
82646: FOR_IN
82647: IFFALSE 82679
// if See ( side , i ) then
82649: LD_VAR 0 1
82653: PPUSH
82654: LD_VAR 0 4
82658: PPUSH
82659: CALL_OW 292
82663: IFFALSE 82677
// begin result := true ;
82665: LD_ADDR_VAR 0 3
82669: PUSH
82670: LD_INT 1
82672: ST_TO_ADDR
// exit ;
82673: POP
82674: POP
82675: GO 82681
// end ;
82677: GO 82646
82679: POP
82680: POP
// end ;
82681: LD_VAR 0 3
82685: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82686: LD_INT 0
82688: PPUSH
82689: PPUSH
82690: PPUSH
82691: PPUSH
// if not unit or not points then
82692: LD_VAR 0 1
82696: NOT
82697: IFTRUE 82706
82699: PUSH
82700: LD_VAR 0 2
82704: NOT
82705: OR
82706: IFFALSE 82710
// exit ;
82708: GO 82800
// dist := 99999 ;
82710: LD_ADDR_VAR 0 5
82714: PUSH
82715: LD_INT 99999
82717: ST_TO_ADDR
// for i in points do
82718: LD_ADDR_VAR 0 4
82722: PUSH
82723: LD_VAR 0 2
82727: PUSH
82728: FOR_IN
82729: IFFALSE 82798
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82731: LD_ADDR_VAR 0 6
82735: PUSH
82736: LD_VAR 0 1
82740: PPUSH
82741: LD_VAR 0 4
82745: PUSH
82746: LD_INT 1
82748: ARRAY
82749: PPUSH
82750: LD_VAR 0 4
82754: PUSH
82755: LD_INT 2
82757: ARRAY
82758: PPUSH
82759: CALL_OW 297
82763: ST_TO_ADDR
// if tmpDist < dist then
82764: LD_VAR 0 6
82768: PUSH
82769: LD_VAR 0 5
82773: LESS
82774: IFFALSE 82796
// begin result := i ;
82776: LD_ADDR_VAR 0 3
82780: PUSH
82781: LD_VAR 0 4
82785: ST_TO_ADDR
// dist := tmpDist ;
82786: LD_ADDR_VAR 0 5
82790: PUSH
82791: LD_VAR 0 6
82795: ST_TO_ADDR
// end ; end ;
82796: GO 82728
82798: POP
82799: POP
// end ;
82800: LD_VAR 0 3
82804: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82805: LD_INT 0
82807: PPUSH
// uc_side := side ;
82808: LD_ADDR_OWVAR 20
82812: PUSH
82813: LD_VAR 0 1
82817: ST_TO_ADDR
// uc_nation := 3 ;
82818: LD_ADDR_OWVAR 21
82822: PUSH
82823: LD_INT 3
82825: ST_TO_ADDR
// vc_chassis := 25 ;
82826: LD_ADDR_OWVAR 37
82830: PUSH
82831: LD_INT 25
82833: ST_TO_ADDR
// vc_engine := engine_siberite ;
82834: LD_ADDR_OWVAR 39
82838: PUSH
82839: LD_INT 3
82841: ST_TO_ADDR
// vc_control := control_computer ;
82842: LD_ADDR_OWVAR 38
82846: PUSH
82847: LD_INT 3
82849: ST_TO_ADDR
// vc_weapon := 59 ;
82850: LD_ADDR_OWVAR 40
82854: PUSH
82855: LD_INT 59
82857: ST_TO_ADDR
// result := CreateVehicle ;
82858: LD_ADDR_VAR 0 5
82862: PUSH
82863: CALL_OW 45
82867: ST_TO_ADDR
// SetDir ( result , d ) ;
82868: LD_VAR 0 5
82872: PPUSH
82873: LD_VAR 0 4
82877: PPUSH
82878: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82882: LD_VAR 0 5
82886: PPUSH
82887: LD_VAR 0 2
82891: PPUSH
82892: LD_VAR 0 3
82896: PPUSH
82897: LD_INT 0
82899: PPUSH
82900: CALL_OW 48
// end ;
82904: LD_VAR 0 5
82908: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82909: LD_INT 0
82911: PPUSH
82912: PPUSH
82913: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82914: LD_ADDR_VAR 0 2
82918: PUSH
82919: LD_INT 0
82921: PUSH
82922: LD_INT 0
82924: PUSH
82925: LD_INT 0
82927: PUSH
82928: LD_INT 0
82930: PUSH
82931: EMPTY
82932: LIST
82933: LIST
82934: LIST
82935: LIST
82936: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82937: LD_VAR 0 1
82941: NOT
82942: IFTRUE 82975
82944: PUSH
82945: LD_VAR 0 1
82949: PPUSH
82950: CALL_OW 264
82954: PUSH
82955: LD_INT 12
82957: PUSH
82958: LD_INT 51
82960: PUSH
82961: LD_INT 32
82963: PUSH
82964: LD_INT 89
82966: PUSH
82967: EMPTY
82968: LIST
82969: LIST
82970: LIST
82971: LIST
82972: IN
82973: NOT
82974: OR
82975: IFFALSE 82979
// exit ;
82977: GO 83077
// for i := 1 to 3 do
82979: LD_ADDR_VAR 0 3
82983: PUSH
82984: DOUBLE
82985: LD_INT 1
82987: DEC
82988: ST_TO_ADDR
82989: LD_INT 3
82991: PUSH
82992: FOR_TO
82993: IFFALSE 83075
// begin tmp := GetCargo ( cargo , i ) ;
82995: LD_ADDR_VAR 0 4
82999: PUSH
83000: LD_VAR 0 1
83004: PPUSH
83005: LD_VAR 0 3
83009: PPUSH
83010: CALL_OW 289
83014: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83015: LD_ADDR_VAR 0 2
83019: PUSH
83020: LD_VAR 0 2
83024: PPUSH
83025: LD_VAR 0 3
83029: PPUSH
83030: LD_VAR 0 4
83034: PPUSH
83035: CALL_OW 1
83039: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
83040: LD_ADDR_VAR 0 2
83044: PUSH
83045: LD_VAR 0 2
83049: PPUSH
83050: LD_INT 4
83052: PPUSH
83053: LD_VAR 0 2
83057: PUSH
83058: LD_INT 4
83060: ARRAY
83061: PUSH
83062: LD_VAR 0 4
83066: PLUS
83067: PPUSH
83068: CALL_OW 1
83072: ST_TO_ADDR
// end ;
83073: GO 82992
83075: POP
83076: POP
// end ;
83077: LD_VAR 0 2
83081: RET
// export function Length ( array ) ; begin
83082: LD_INT 0
83084: PPUSH
// result := array + 0 ;
83085: LD_ADDR_VAR 0 2
83089: PUSH
83090: LD_VAR 0 1
83094: PUSH
83095: LD_INT 0
83097: PLUS
83098: ST_TO_ADDR
// end ;
83099: LD_VAR 0 2
83103: RET
// export function PrepareArray ( array ) ; begin
83104: LD_INT 0
83106: PPUSH
// result := array diff 0 ;
83107: LD_ADDR_VAR 0 2
83111: PUSH
83112: LD_VAR 0 1
83116: PUSH
83117: LD_INT 0
83119: DIFF
83120: ST_TO_ADDR
// if not result [ 1 ] then
83121: LD_VAR 0 2
83125: PUSH
83126: LD_INT 1
83128: ARRAY
83129: NOT
83130: IFFALSE 83150
// result := Delete ( result , 1 ) ;
83132: LD_ADDR_VAR 0 2
83136: PUSH
83137: LD_VAR 0 2
83141: PPUSH
83142: LD_INT 1
83144: PPUSH
83145: CALL_OW 3
83149: ST_TO_ADDR
// end ;
83150: LD_VAR 0 2
83154: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
83155: LD_INT 0
83157: PPUSH
83158: PPUSH
83159: PPUSH
83160: PPUSH
// sibRocketRange := 25 ;
83161: LD_ADDR_VAR 0 6
83165: PUSH
83166: LD_INT 25
83168: ST_TO_ADDR
// result := false ;
83169: LD_ADDR_VAR 0 4
83173: PUSH
83174: LD_INT 0
83176: ST_TO_ADDR
// for i := 0 to 5 do
83177: LD_ADDR_VAR 0 5
83181: PUSH
83182: DOUBLE
83183: LD_INT 0
83185: DEC
83186: ST_TO_ADDR
83187: LD_INT 5
83189: PUSH
83190: FOR_TO
83191: IFFALSE 83258
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83193: LD_VAR 0 1
83197: PPUSH
83198: LD_VAR 0 5
83202: PPUSH
83203: LD_VAR 0 6
83207: PPUSH
83208: CALL_OW 272
83212: PPUSH
83213: LD_VAR 0 2
83217: PPUSH
83218: LD_VAR 0 5
83222: PPUSH
83223: LD_VAR 0 6
83227: PPUSH
83228: CALL_OW 273
83232: PPUSH
83233: LD_VAR 0 3
83237: PPUSH
83238: CALL_OW 309
83242: IFFALSE 83256
// begin result := true ;
83244: LD_ADDR_VAR 0 4
83248: PUSH
83249: LD_INT 1
83251: ST_TO_ADDR
// exit ;
83252: POP
83253: POP
83254: GO 83260
// end ;
83256: GO 83190
83258: POP
83259: POP
// end ;
83260: LD_VAR 0 4
83264: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83265: LD_INT 0
83267: PPUSH
83268: PPUSH
83269: PPUSH
// if btype = b_depot then
83270: LD_VAR 0 2
83274: PUSH
83275: LD_INT 0
83277: EQUAL
83278: IFFALSE 83290
// begin result := true ;
83280: LD_ADDR_VAR 0 3
83284: PUSH
83285: LD_INT 1
83287: ST_TO_ADDR
// exit ;
83288: GO 83410
// end ; pom := GetBase ( depot ) ;
83290: LD_ADDR_VAR 0 4
83294: PUSH
83295: LD_VAR 0 1
83299: PPUSH
83300: CALL_OW 274
83304: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83305: LD_ADDR_VAR 0 5
83309: PUSH
83310: LD_VAR 0 2
83314: PPUSH
83315: LD_VAR 0 1
83319: PPUSH
83320: CALL_OW 248
83324: PPUSH
83325: CALL_OW 450
83329: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83330: LD_ADDR_VAR 0 3
83334: PUSH
83335: LD_VAR 0 4
83339: PPUSH
83340: LD_INT 1
83342: PPUSH
83343: CALL_OW 275
83347: PUSH
83348: LD_VAR 0 5
83352: PUSH
83353: LD_INT 1
83355: ARRAY
83356: GREATEREQUAL
83357: IFFALSE 83383
83359: PUSH
83360: LD_VAR 0 4
83364: PPUSH
83365: LD_INT 2
83367: PPUSH
83368: CALL_OW 275
83372: PUSH
83373: LD_VAR 0 5
83377: PUSH
83378: LD_INT 2
83380: ARRAY
83381: GREATEREQUAL
83382: AND
83383: IFFALSE 83409
83385: PUSH
83386: LD_VAR 0 4
83390: PPUSH
83391: LD_INT 3
83393: PPUSH
83394: CALL_OW 275
83398: PUSH
83399: LD_VAR 0 5
83403: PUSH
83404: LD_INT 3
83406: ARRAY
83407: GREATEREQUAL
83408: AND
83409: ST_TO_ADDR
// end ;
83410: LD_VAR 0 3
83414: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83415: LD_INT 0
83417: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83418: LD_VAR 0 1
83422: PPUSH
83423: LD_VAR 0 2
83427: PPUSH
83428: LD_INT 0
83430: PPUSH
83431: LD_INT 0
83433: PPUSH
83434: LD_INT 1
83436: PPUSH
83437: LD_INT 0
83439: PPUSH
83440: CALL_OW 587
// end ;
83444: LD_VAR 0 3
83448: RET
// export function CenterOnNow ( unit ) ; begin
83449: LD_INT 0
83451: PPUSH
// result := IsInUnit ( unit ) ;
83452: LD_ADDR_VAR 0 2
83456: PUSH
83457: LD_VAR 0 1
83461: PPUSH
83462: CALL_OW 310
83466: ST_TO_ADDR
// if not result then
83467: LD_VAR 0 2
83471: NOT
83472: IFFALSE 83484
// result := unit ;
83474: LD_ADDR_VAR 0 2
83478: PUSH
83479: LD_VAR 0 1
83483: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83484: LD_VAR 0 1
83488: PPUSH
83489: CALL_OW 87
// end ;
83493: LD_VAR 0 2
83497: RET
// export function ComMoveHex ( unit , hex ) ; begin
83498: LD_INT 0
83500: PPUSH
// if not hex then
83501: LD_VAR 0 2
83505: NOT
83506: IFFALSE 83510
// exit ;
83508: GO 83563
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83510: LD_VAR 0 2
83514: PUSH
83515: LD_INT 1
83517: ARRAY
83518: PPUSH
83519: LD_VAR 0 2
83523: PUSH
83524: LD_INT 2
83526: ARRAY
83527: PPUSH
83528: CALL_OW 428
83532: IFFALSE 83536
// exit ;
83534: GO 83563
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83536: LD_VAR 0 1
83540: PPUSH
83541: LD_VAR 0 2
83545: PUSH
83546: LD_INT 1
83548: ARRAY
83549: PPUSH
83550: LD_VAR 0 2
83554: PUSH
83555: LD_INT 2
83557: ARRAY
83558: PPUSH
83559: CALL_OW 111
// end ;
83563: LD_VAR 0 3
83567: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83568: LD_INT 0
83570: PPUSH
83571: PPUSH
83572: PPUSH
// if not unit or not enemy then
83573: LD_VAR 0 1
83577: NOT
83578: IFTRUE 83587
83580: PUSH
83581: LD_VAR 0 2
83585: NOT
83586: OR
83587: IFFALSE 83591
// exit ;
83589: GO 83717
// x := GetX ( enemy ) ;
83591: LD_ADDR_VAR 0 4
83595: PUSH
83596: LD_VAR 0 2
83600: PPUSH
83601: CALL_OW 250
83605: ST_TO_ADDR
// y := GetY ( enemy ) ;
83606: LD_ADDR_VAR 0 5
83610: PUSH
83611: LD_VAR 0 2
83615: PPUSH
83616: CALL_OW 251
83620: ST_TO_ADDR
// if ValidHex ( x , y ) then
83621: LD_VAR 0 4
83625: PPUSH
83626: LD_VAR 0 5
83630: PPUSH
83631: CALL_OW 488
83635: IFFALSE 83717
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83637: LD_VAR 0 2
83641: PPUSH
83642: CALL_OW 247
83646: PUSH
83647: LD_INT 3
83649: PUSH
83650: LD_INT 2
83652: PUSH
83653: EMPTY
83654: LIST
83655: LIST
83656: IN
83657: IFTRUE 83680
83659: PUSH
83660: LD_VAR 0 1
83664: PPUSH
83665: CALL_OW 255
83669: PPUSH
83670: LD_VAR 0 2
83674: PPUSH
83675: CALL_OW 292
83679: OR
83680: IFFALSE 83698
// ComAttackUnit ( unit , enemy ) else
83682: LD_VAR 0 1
83686: PPUSH
83687: LD_VAR 0 2
83691: PPUSH
83692: CALL_OW 115
83696: GO 83717
// ComAgressiveMove ( unit , x , y ) ;
83698: LD_VAR 0 1
83702: PPUSH
83703: LD_VAR 0 4
83707: PPUSH
83708: LD_VAR 0 5
83712: PPUSH
83713: CALL_OW 114
// end ;
83717: LD_VAR 0 3
83721: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
83722: LD_INT 0
83724: PPUSH
83725: PPUSH
83726: PPUSH
// list := AreaToList ( area , 0 ) ;
83727: LD_ADDR_VAR 0 5
83731: PUSH
83732: LD_VAR 0 1
83736: PPUSH
83737: LD_INT 0
83739: PPUSH
83740: CALL_OW 517
83744: ST_TO_ADDR
// if not list then
83745: LD_VAR 0 5
83749: NOT
83750: IFFALSE 83754
// exit ;
83752: GO 83884
// if all then
83754: LD_VAR 0 2
83758: IFFALSE 83846
// begin for i := 1 to list [ 1 ] do
83760: LD_ADDR_VAR 0 4
83764: PUSH
83765: DOUBLE
83766: LD_INT 1
83768: DEC
83769: ST_TO_ADDR
83770: LD_VAR 0 5
83774: PUSH
83775: LD_INT 1
83777: ARRAY
83778: PUSH
83779: FOR_TO
83780: IFFALSE 83842
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83782: LD_ADDR_VAR 0 3
83786: PUSH
83787: LD_VAR 0 3
83791: PPUSH
83792: LD_VAR 0 3
83796: PUSH
83797: LD_INT 1
83799: PLUS
83800: PPUSH
83801: LD_VAR 0 5
83805: PUSH
83806: LD_INT 1
83808: ARRAY
83809: PUSH
83810: LD_VAR 0 4
83814: ARRAY
83815: PUSH
83816: LD_VAR 0 5
83820: PUSH
83821: LD_INT 2
83823: ARRAY
83824: PUSH
83825: LD_VAR 0 4
83829: ARRAY
83830: PUSH
83831: EMPTY
83832: LIST
83833: LIST
83834: PPUSH
83835: CALL_OW 1
83839: ST_TO_ADDR
83840: GO 83779
83842: POP
83843: POP
// exit ;
83844: GO 83884
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83846: LD_ADDR_VAR 0 3
83850: PUSH
83851: LD_VAR 0 5
83855: PUSH
83856: LD_INT 1
83858: ARRAY
83859: PUSH
83860: LD_INT 1
83862: ARRAY
83863: PUSH
83864: LD_VAR 0 5
83868: PUSH
83869: LD_INT 2
83871: ARRAY
83872: PUSH
83873: LD_INT 1
83875: ARRAY
83876: PUSH
83877: EMPTY
83878: LIST
83879: LIST
83880: PUSH
83881: EMPTY
83882: LIST
83883: ST_TO_ADDR
// end ;
83884: LD_VAR 0 3
83888: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
83889: LD_INT 0
83891: PPUSH
83892: PPUSH
// list := AreaToList ( area , 0 ) ;
83893: LD_ADDR_VAR 0 4
83897: PUSH
83898: LD_VAR 0 1
83902: PPUSH
83903: LD_INT 0
83905: PPUSH
83906: CALL_OW 517
83910: ST_TO_ADDR
// if not list then
83911: LD_VAR 0 4
83915: NOT
83916: IFFALSE 83920
// exit ;
83918: GO 83961
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
83920: LD_ADDR_VAR 0 3
83924: PUSH
83925: LD_VAR 0 4
83929: PUSH
83930: LD_INT 1
83932: ARRAY
83933: PUSH
83934: LD_INT 1
83936: ARRAY
83937: PUSH
83938: LD_VAR 0 4
83942: PUSH
83943: LD_INT 2
83945: ARRAY
83946: PUSH
83947: LD_INT 1
83949: ARRAY
83950: PUSH
83951: LD_VAR 0 2
83955: PUSH
83956: EMPTY
83957: LIST
83958: LIST
83959: LIST
83960: ST_TO_ADDR
// end ;
83961: LD_VAR 0 3
83965: RET
// export function First ( array ) ; begin
83966: LD_INT 0
83968: PPUSH
// if not array then
83969: LD_VAR 0 1
83973: NOT
83974: IFFALSE 83978
// exit ;
83976: GO 83992
// result := array [ 1 ] ;
83978: LD_ADDR_VAR 0 2
83982: PUSH
83983: LD_VAR 0 1
83987: PUSH
83988: LD_INT 1
83990: ARRAY
83991: ST_TO_ADDR
// end ;
83992: LD_VAR 0 2
83996: RET
// export function Last ( array ) ; begin
83997: LD_INT 0
83999: PPUSH
// if not array then
84000: LD_VAR 0 1
84004: NOT
84005: IFFALSE 84009
// exit ;
84007: GO 84025
// result := array [ array ] ;
84009: LD_ADDR_VAR 0 2
84013: PUSH
84014: LD_VAR 0 1
84018: PUSH
84019: LD_VAR 0 1
84023: ARRAY
84024: ST_TO_ADDR
// end ;
84025: LD_VAR 0 2
84029: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
84030: LD_INT 0
84032: PPUSH
84033: PPUSH
// result := [ ] ;
84034: LD_ADDR_VAR 0 5
84038: PUSH
84039: EMPTY
84040: ST_TO_ADDR
// if not array then
84041: LD_VAR 0 1
84045: NOT
84046: IFFALSE 84050
// exit ;
84048: GO 84162
// for i := 1 to array do
84050: LD_ADDR_VAR 0 6
84054: PUSH
84055: DOUBLE
84056: LD_INT 1
84058: DEC
84059: ST_TO_ADDR
84060: LD_VAR 0 1
84064: PUSH
84065: FOR_TO
84066: IFFALSE 84160
// if array [ i ] [ index ] = value then
84068: LD_VAR 0 1
84072: PUSH
84073: LD_VAR 0 6
84077: ARRAY
84078: PUSH
84079: LD_VAR 0 2
84083: ARRAY
84084: PUSH
84085: LD_VAR 0 3
84089: EQUAL
84090: IFFALSE 84158
// begin if indexColumn then
84092: LD_VAR 0 4
84096: IFFALSE 84132
// result := Join ( result , array [ i ] [ indexColumn ] ) else
84098: LD_ADDR_VAR 0 5
84102: PUSH
84103: LD_VAR 0 5
84107: PPUSH
84108: LD_VAR 0 1
84112: PUSH
84113: LD_VAR 0 6
84117: ARRAY
84118: PUSH
84119: LD_VAR 0 4
84123: ARRAY
84124: PPUSH
84125: CALL 79170 0 2
84129: ST_TO_ADDR
84130: GO 84158
// result := Join ( result , array [ i ] ) ;
84132: LD_ADDR_VAR 0 5
84136: PUSH
84137: LD_VAR 0 5
84141: PPUSH
84142: LD_VAR 0 1
84146: PUSH
84147: LD_VAR 0 6
84151: ARRAY
84152: PPUSH
84153: CALL 79170 0 2
84157: ST_TO_ADDR
// end ;
84158: GO 84065
84160: POP
84161: POP
// end ;
84162: LD_VAR 0 5
84166: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
84167: LD_INT 0
84169: PPUSH
// if not vehicles or not parkingPoint then
84170: LD_VAR 0 1
84174: NOT
84175: IFTRUE 84184
84177: PUSH
84178: LD_VAR 0 2
84182: NOT
84183: OR
84184: IFFALSE 84188
// exit ;
84186: GO 84286
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
84188: LD_ADDR_VAR 0 1
84192: PUSH
84193: LD_VAR 0 1
84197: PPUSH
84198: LD_INT 50
84200: PUSH
84201: EMPTY
84202: LIST
84203: PUSH
84204: LD_INT 3
84206: PUSH
84207: LD_INT 92
84209: PUSH
84210: LD_VAR 0 2
84214: PUSH
84215: LD_INT 1
84217: ARRAY
84218: PUSH
84219: LD_VAR 0 2
84223: PUSH
84224: LD_INT 2
84226: ARRAY
84227: PUSH
84228: LD_INT 8
84230: PUSH
84231: EMPTY
84232: LIST
84233: LIST
84234: LIST
84235: LIST
84236: PUSH
84237: EMPTY
84238: LIST
84239: LIST
84240: PUSH
84241: EMPTY
84242: LIST
84243: LIST
84244: PPUSH
84245: CALL_OW 72
84249: ST_TO_ADDR
// if not vehicles then
84250: LD_VAR 0 1
84254: NOT
84255: IFFALSE 84259
// exit ;
84257: GO 84286
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
84259: LD_VAR 0 1
84263: PPUSH
84264: LD_VAR 0 2
84268: PUSH
84269: LD_INT 1
84271: ARRAY
84272: PPUSH
84273: LD_VAR 0 2
84277: PUSH
84278: LD_INT 2
84280: ARRAY
84281: PPUSH
84282: CALL_OW 111
// end ;
84286: LD_VAR 0 3
84290: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
84291: LD_INT 0
84293: PPUSH
84294: PPUSH
84295: PPUSH
// if not side or not area then
84296: LD_VAR 0 1
84300: NOT
84301: IFTRUE 84310
84303: PUSH
84304: LD_VAR 0 2
84308: NOT
84309: OR
84310: IFFALSE 84314
// exit ;
84312: GO 84433
// tmp := AreaToList ( area , 0 ) ;
84314: LD_ADDR_VAR 0 5
84318: PUSH
84319: LD_VAR 0 2
84323: PPUSH
84324: LD_INT 0
84326: PPUSH
84327: CALL_OW 517
84331: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
84332: LD_ADDR_VAR 0 4
84336: PUSH
84337: DOUBLE
84338: LD_INT 1
84340: DEC
84341: ST_TO_ADDR
84342: LD_VAR 0 5
84346: PUSH
84347: LD_INT 1
84349: ARRAY
84350: PUSH
84351: FOR_TO
84352: IFFALSE 84431
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
84354: LD_VAR 0 5
84358: PUSH
84359: LD_INT 1
84361: ARRAY
84362: PUSH
84363: LD_VAR 0 4
84367: ARRAY
84368: PPUSH
84369: LD_VAR 0 5
84373: PUSH
84374: LD_INT 2
84376: ARRAY
84377: PUSH
84378: LD_VAR 0 4
84382: ARRAY
84383: PPUSH
84384: CALL_OW 351
84388: IFFALSE 84429
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84390: LD_VAR 0 5
84394: PUSH
84395: LD_INT 1
84397: ARRAY
84398: PUSH
84399: LD_VAR 0 4
84403: ARRAY
84404: PPUSH
84405: LD_VAR 0 5
84409: PUSH
84410: LD_INT 2
84412: ARRAY
84413: PUSH
84414: LD_VAR 0 4
84418: ARRAY
84419: PPUSH
84420: LD_VAR 0 1
84424: PPUSH
84425: CALL_OW 244
// end ;
84429: GO 84351
84431: POP
84432: POP
// end ; end_of_file
84433: LD_VAR 0 3
84437: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84438: LD_VAR 0 1
84442: PUSH
84443: LD_INT 200
84445: DOUBLE
84446: GREATEREQUAL
84447: IFFALSE 84455
84449: LD_INT 299
84451: DOUBLE
84452: LESSEQUAL
84453: IFTRUE 84457
84455: GO 84489
84457: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84458: LD_VAR 0 1
84462: PPUSH
84463: LD_VAR 0 2
84467: PPUSH
84468: LD_VAR 0 3
84472: PPUSH
84473: LD_VAR 0 4
84477: PPUSH
84478: LD_VAR 0 5
84482: PPUSH
84483: CALL 36281 0 5
84487: GO 84566
84489: LD_INT 300
84491: DOUBLE
84492: GREATEREQUAL
84493: IFFALSE 84501
84495: LD_INT 399
84497: DOUBLE
84498: LESSEQUAL
84499: IFTRUE 84503
84501: GO 84565
84503: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84504: LD_VAR 0 1
84508: PPUSH
84509: LD_VAR 0 2
84513: PPUSH
84514: LD_VAR 0 3
84518: PPUSH
84519: LD_VAR 0 4
84523: PPUSH
84524: LD_VAR 0 5
84528: PPUSH
84529: LD_VAR 0 6
84533: PPUSH
84534: LD_VAR 0 7
84538: PPUSH
84539: LD_VAR 0 8
84543: PPUSH
84544: LD_VAR 0 9
84548: PPUSH
84549: LD_VAR 0 10
84553: PPUSH
84554: LD_VAR 0 11
84558: PPUSH
84559: CALL 32165 0 11
84563: GO 84566
84565: POP
// end ;
84566: PPOPN 11
84568: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84569: LD_VAR 0 1
84573: PPUSH
84574: LD_VAR 0 2
84578: PPUSH
84579: LD_VAR 0 3
84583: PPUSH
84584: LD_VAR 0 4
84588: PPUSH
84589: LD_VAR 0 5
84593: PPUSH
84594: CALL 35662 0 5
// end ; end_of_file
84598: PPOPN 5
84600: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84601: LD_VAR 0 1
84605: PPUSH
84606: LD_VAR 0 2
84610: PPUSH
84611: LD_VAR 0 3
84615: PPUSH
84616: LD_VAR 0 4
84620: PPUSH
84621: LD_VAR 0 5
84625: PPUSH
84626: LD_VAR 0 6
84630: PPUSH
84631: CALL 19705 0 6
// end ;
84635: PPOPN 6
84637: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84638: LD_INT 0
84640: PPUSH
// begin if not units then
84641: LD_VAR 0 1
84645: NOT
84646: IFFALSE 84650
// exit ;
84648: GO 84650
// end ;
84650: PPOPN 7
84652: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84653: CALL 19592 0 0
// end ;
84657: PPOPN 1
84659: END
