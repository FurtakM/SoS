// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3454 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2668 0 0
// PrepareWesternBase ;
  41: CALL 2897 0 0
// Action ;
  45: CALL 5754 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty , vcount , tmpv ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
// uc_side := 4 ;
1157: LD_ADDR_OWVAR 20
1161: PUSH
1162: LD_INT 4
1164: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1165: LD_ADDR_EXP 46
1169: PUSH
1170: LD_STRING Powell
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: LD_STRING 
1178: PPUSH
1179: CALL 39085 0 3
1183: ST_TO_ADDR
// uc_side := 1 ;
1184: LD_ADDR_OWVAR 20
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// uc_nation := 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// if debug then
1200: LD_EXP 1
1204: IFFALSE 1550
// begin for i = 1 to 4 do
1206: LD_ADDR_VAR 0 2
1210: PUSH
1211: DOUBLE
1212: LD_INT 1
1214: DEC
1215: ST_TO_ADDR
1216: LD_INT 4
1218: PUSH
1219: FOR_TO
1220: IFFALSE 1271
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL_OW 380
// un := CreateHuman ;
1243: LD_ADDR_VAR 0 3
1247: PUSH
1248: CALL_OW 44
1252: ST_TO_ADDR
// others := others ^ un ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_VAR 0 5
1262: PUSH
1263: LD_VAR 0 3
1267: ADD
1268: ST_TO_ADDR
// end ;
1269: GO 1219
1271: POP
1272: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1273: LD_ADDR_VAR 0 6
1277: PUSH
1278: LD_INT 21
1280: PUSH
1281: LD_INT 1
1283: PUSH
1284: LD_INT 1
1286: PUSH
1287: LD_INT 42
1289: PUSH
1290: LD_INT 0
1292: PUSH
1293: LD_INT 750
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 21
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 42
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 750
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_INT 21
1332: PUSH
1333: LD_INT 1
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: LD_INT 42
1341: PUSH
1342: LD_INT 0
1344: PUSH
1345: LD_INT 750
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 42
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 750
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 21
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 44
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: LD_INT 750
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: LD_INT 43
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 750
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 21
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: LD_INT 43
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 750
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 21
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 43
1471: PUSH
1472: LD_INT 0
1474: PUSH
1475: LD_INT 750
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 21
1488: PUSH
1489: LD_INT 1
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 90
1500: PUSH
1501: LD_INT 504
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 51
1523: PUSH
1524: LD_INT 80
1526: PUSH
1527: LD_INT 750
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1550: LD_ADDR_EXP 37
1554: PUSH
1555: LD_STRING JMM
1557: PPUSH
1558: LD_EXP 1
1562: NOT
1563: PPUSH
1564: LD_EXP 3
1568: PPUSH
1569: CALL 39085 0 3
1573: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1574: LD_ADDR_EXP 38
1578: PUSH
1579: LD_STRING Bobby
1581: PPUSH
1582: LD_EXP 1
1586: NOT
1587: PPUSH
1588: LD_EXP 3
1592: PPUSH
1593: CALL 39085 0 3
1597: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1598: LD_ADDR_EXP 39
1602: PUSH
1603: LD_STRING Cyrus
1605: PPUSH
1606: LD_EXP 1
1610: NOT
1611: PPUSH
1612: LD_EXP 3
1616: PPUSH
1617: CALL 39085 0 3
1621: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1622: LD_ADDR_EXP 40
1626: PUSH
1627: LD_STRING Lisa
1629: PPUSH
1630: LD_EXP 1
1634: NOT
1635: PPUSH
1636: LD_EXP 3
1640: PPUSH
1641: CALL 39085 0 3
1645: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1646: LD_ADDR_EXP 41
1650: PUSH
1651: LD_STRING Khatam
1653: PPUSH
1654: LD_EXP 1
1658: NOT
1659: PPUSH
1660: LD_EXP 3
1664: PPUSH
1665: CALL 39085 0 3
1669: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1670: LD_ADDR_EXP 42
1674: PUSH
1675: LD_STRING Brian
1677: PPUSH
1678: LD_EXP 1
1682: NOT
1683: PPUSH
1684: LD_EXP 3
1688: PPUSH
1689: CALL 39085 0 3
1693: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1694: LD_ADDR_EXP 43
1698: PUSH
1699: LD_STRING Jerry
1701: PPUSH
1702: LD_EXP 1
1706: NOT
1707: PPUSH
1708: LD_EXP 3
1712: PPUSH
1713: CALL 39085 0 3
1717: ST_TO_ADDR
// if Bobby then
1718: LD_EXP 38
1722: IFFALSE 1753
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1724: LD_ADDR_VAR 0 4
1728: PUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: LD_VAR 0 4
1738: PUSH
1739: LD_INT 1
1741: PLUS
1742: PPUSH
1743: LD_EXP 38
1747: PPUSH
1748: CALL_OW 2
1752: ST_TO_ADDR
// if Cyrus then
1753: LD_EXP 39
1757: IFFALSE 1788
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_VAR 0 4
1773: PUSH
1774: LD_INT 1
1776: PLUS
1777: PPUSH
1778: LD_EXP 39
1782: PPUSH
1783: CALL_OW 2
1787: ST_TO_ADDR
// if Lisa then
1788: LD_EXP 40
1792: IFFALSE 1823
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: LD_VAR 0 4
1808: PUSH
1809: LD_INT 1
1811: PLUS
1812: PPUSH
1813: LD_EXP 40
1817: PPUSH
1818: CALL_OW 2
1822: ST_TO_ADDR
// if Khatam then
1823: LD_EXP 41
1827: IFFALSE 1858
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: LD_VAR 0 4
1843: PUSH
1844: LD_INT 1
1846: PLUS
1847: PPUSH
1848: LD_EXP 41
1852: PPUSH
1853: CALL_OW 2
1857: ST_TO_ADDR
// if Brian then
1858: LD_EXP 42
1862: IFFALSE 1893
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1864: LD_ADDR_VAR 0 4
1868: PUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_VAR 0 4
1878: PUSH
1879: LD_INT 1
1881: PLUS
1882: PPUSH
1883: LD_EXP 42
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// if Jerry then
1893: LD_EXP 43
1897: IFFALSE 1928
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: PLUS
1917: PPUSH
1918: LD_EXP 43
1922: PPUSH
1923: CALL_OW 2
1927: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1928: LD_STRING 02_other_survivors
1930: PPUSH
1931: CALL_OW 28
1935: IFFALSE 1950
// others := CreateCharacterSet ( 02_other_survivors ) ;
1937: LD_ADDR_VAR 0 5
1941: PUSH
1942: LD_STRING 02_other_survivors
1944: PPUSH
1945: CALL_OW 31
1949: ST_TO_ADDR
// if others then
1950: LD_VAR 0 5
1954: IFFALSE 1979
// begin tmp := tmp ^ others ;
1956: LD_ADDR_VAR 0 4
1960: PUSH
1961: LD_VAR 0 4
1965: PUSH
1966: LD_VAR 0 5
1970: ADD
1971: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1972: LD_STRING 02_other_survivors
1974: PPUSH
1975: CALL_OW 40
// end ; jmm_units := tmp diff 0 ;
1979: LD_ADDR_EXP 4
1983: PUSH
1984: LD_VAR 0 4
1988: PUSH
1989: LD_INT 0
1991: DIFF
1992: ST_TO_ADDR
// if not vehicles then
1993: LD_VAR 0 6
1997: NOT
1998: IFFALSE 2015
// vehicles := LoadVariable ( 02_tanks_1 , [ ] ) ;
2000: LD_ADDR_VAR 0 6
2004: PUSH
2005: LD_STRING 02_tanks_1
2007: PPUSH
2008: EMPTY
2009: PPUSH
2010: CALL_OW 30
2014: ST_TO_ADDR
// if vehicles then
2015: LD_VAR 0 6
2019: IFFALSE 2387
// begin got_mech := false ;
2021: LD_ADDR_VAR 0 7
2025: PUSH
2026: LD_INT 0
2028: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 72
2048: IFFALSE 2058
// got_mech := true ;
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// vcount := Count ( vehicles ) ;
2058: LD_ADDR_VAR 0 9
2062: PUSH
2063: LD_VAR 0 6
2067: PPUSH
2068: CALL 41187 0 1
2072: ST_TO_ADDR
// if vcount > 1 then
2073: LD_VAR 0 9
2077: PUSH
2078: LD_INT 1
2080: GREATER
2081: IFFALSE 2184
// begin for i := 2 to vcount do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 2
2091: DEC
2092: ST_TO_ADDR
2093: LD_VAR 0 9
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2182
// if vehicles [ i ] [ 4 ] = ru_cargo_bay then
2101: LD_VAR 0 6
2105: PUSH
2106: LD_VAR 0 2
2110: ARRAY
2111: PUSH
2112: LD_INT 4
2114: ARRAY
2115: PUSH
2116: LD_INT 51
2118: EQUAL
2119: IFFALSE 2180
// begin tmpv := vehicles [ i ] ;
2121: LD_ADDR_VAR 0 10
2125: PUSH
2126: LD_VAR 0 6
2130: PUSH
2131: LD_VAR 0 2
2135: ARRAY
2136: ST_TO_ADDR
// vehicles := Delete ( vehicles , i ) ;
2137: LD_ADDR_VAR 0 6
2141: PUSH
2142: LD_VAR 0 6
2146: PPUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 3
2156: ST_TO_ADDR
// vehicles := Insert ( vehicles , 1 , tmpv ) ;
2157: LD_ADDR_VAR 0 6
2161: PUSH
2162: LD_VAR 0 6
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_VAR 0 10
2174: PPUSH
2175: CALL_OW 2
2179: ST_TO_ADDR
// end ;
2180: GO 2098
2182: POP
2183: POP
// end ; if vcount > 6 then
2184: LD_VAR 0 9
2188: PUSH
2189: LD_INT 6
2191: GREATER
2192: IFFALSE 2202
// vcount := 6 ;
2194: LD_ADDR_VAR 0 9
2198: PUSH
2199: LD_INT 6
2201: ST_TO_ADDR
// if jmm_units + 1 < vcount then
2202: LD_EXP 4
2206: PUSH
2207: LD_INT 1
2209: PLUS
2210: PUSH
2211: LD_VAR 0 9
2215: LESS
2216: IFFALSE 2232
// vcount := jmm_units + 1 ;
2218: LD_ADDR_VAR 0 9
2222: PUSH
2223: LD_EXP 4
2227: PUSH
2228: LD_INT 1
2230: PLUS
2231: ST_TO_ADDR
// for i := 1 to vcount do
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: DOUBLE
2238: LD_INT 1
2240: DEC
2241: ST_TO_ADDR
2242: LD_VAR 0 9
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2385
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 3
2260: PPUSH
2261: LD_VAR 0 6
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: LD_VAR 0 6
2280: PUSH
2281: LD_VAR 0 2
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 6
2295: PUSH
2296: LD_VAR 0 2
2300: ARRAY
2301: PUSH
2302: LD_INT 3
2304: ARRAY
2305: PPUSH
2306: LD_VAR 0 6
2310: PUSH
2311: LD_VAR 0 2
2315: ARRAY
2316: PUSH
2317: LD_INT 4
2319: ARRAY
2320: PPUSH
2321: LD_INT 40
2323: PPUSH
2324: CALL 497 0 7
2328: ST_TO_ADDR
// if not got_mech then
2329: LD_VAR 0 7
2333: NOT
2334: IFFALSE 2360
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_VAR 0 6
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_INT 6
2354: ARRAY
2355: PPUSH
2356: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_VAR 0 3
2377: PPUSH
2378: CALL_OW 2
2382: ST_TO_ADDR
// end ;
2383: GO 2247
2385: POP
2386: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
2387: LD_EXP 37
2391: PPUSH
2392: LD_INT 194
2394: PPUSH
2395: LD_INT 119
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 48
// if tmp then
2405: LD_VAR 0 4
2409: IFFALSE 2597
// begin for i in tmp do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_VAR 0 4
2420: PUSH
2421: FOR_IN
2422: IFFALSE 2595
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL_OW 257
2433: PUSH
2434: LD_INT 1
2436: NONEQUAL
2437: PUSH
2438: LD_VAR 0 2
2442: PUSH
2443: LD_EXP 41
2447: NONEQUAL
2448: AND
2449: IFFALSE 2463
// SetClass ( i , 1 ) ;
2451: LD_VAR 0 2
2455: PPUSH
2456: LD_INT 1
2458: PPUSH
2459: CALL_OW 336
// if i = Khatam then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_EXP 41
2472: EQUAL
2473: IFFALSE 2487
// SetClass ( i , 4 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 4
2482: PPUSH
2483: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2487: LD_ADDR_VAR 0 8
2491: PUSH
2492: LD_INT 22
2494: PUSH
2495: LD_INT 1
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 21
2504: PUSH
2505: LD_INT 2
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 58
2514: PUSH
2515: EMPTY
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2528: LD_VAR 0 2
2532: PPUSH
2533: CALL_OW 247
2537: PUSH
2538: LD_INT 1
2540: EQUAL
2541: PUSH
2542: LD_VAR 0 8
2546: AND
2547: IFFALSE 2569
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2549: LD_VAR 0 2
2553: PPUSH
2554: LD_VAR 0 8
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PPUSH
2563: CALL_OW 52
2567: GO 2584
// PlaceUnitArea ( i , startArea , false ) ;
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 0
2579: PPUSH
2580: CALL_OW 49
// ComHold ( i ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: CALL_OW 140
// end ;
2593: GO 2421
2595: POP
2596: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2597: LD_ADDR_EXP 7
2601: PUSH
2602: LD_STRING 02_mikhailStatus_1
2604: PPUSH
2605: LD_INT 0
2607: PPUSH
2608: CALL_OW 30
2612: ST_TO_ADDR
// if not bierezov_exist and not debug then
2613: LD_EXP 7
2617: NOT
2618: PUSH
2619: LD_EXP 1
2623: NOT
2624: AND
2625: IFFALSE 2629
// exit ;
2627: GO 2663
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2629: LD_ADDR_EXP 45
2633: PUSH
2634: LD_STRING Mikhail
2636: PPUSH
2637: LD_INT 0
2639: PPUSH
2640: LD_STRING 
2642: PPUSH
2643: CALL 39085 0 3
2647: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2648: LD_EXP 45
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 49
// end ;
2663: LD_VAR 0 1
2667: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
2673: PPUSH
// uc_side := 4 ;
2674: LD_ADDR_OWVAR 20
2678: PUSH
2679: LD_INT 4
2681: ST_TO_ADDR
// uc_nation := 1 ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 1
2689: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2690: LD_ADDR_EXP 44
2694: PUSH
2695: LD_STRING Cornell
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: LD_STRING 
2703: PPUSH
2704: CALL 39085 0 3
2708: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2709: LD_ADDR_EXP 6
2713: PUSH
2714: LD_INT 9
2716: PUSH
2717: LD_EXP 4
2721: MINUS
2722: ST_TO_ADDR
// tmp := [ ] ;
2723: LD_ADDR_VAR 0 2
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// if cornel_units < 4 then
2730: LD_EXP 6
2734: PUSH
2735: LD_INT 4
2737: LESS
2738: IFFALSE 2748
// cornel_units := 4 ;
2740: LD_ADDR_EXP 6
2744: PUSH
2745: LD_INT 4
2747: ST_TO_ADDR
// for i = 1 to cornel_units do
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: DOUBLE
2754: LD_INT 1
2756: DEC
2757: ST_TO_ADDR
2758: LD_EXP 6
2762: PUSH
2763: FOR_TO
2764: IFFALSE 2862
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2766: LD_INT 0
2768: PPUSH
2769: LD_INT 1
2771: PUSH
2772: LD_INT 1
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: LD_INT 4
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: PUSH
2791: LD_VAR 0 4
2795: PUSH
2796: LD_INT 5
2798: MOD
2799: PUSH
2800: LD_INT 1
2802: PLUS
2803: ARRAY
2804: PPUSH
2805: LD_INT 2
2807: PPUSH
2808: CALL_OW 380
// un := CreateHuman ;
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: CALL_OW 44
2821: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2822: LD_ADDR_VAR 0 2
2826: PUSH
2827: LD_VAR 0 2
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: LD_VAR 0 3
2839: PPUSH
2840: CALL_OW 2
2844: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2845: LD_VAR 0 3
2849: PPUSH
2850: LD_INT 2
2852: PPUSH
2853: LD_INT 0
2855: PPUSH
2856: CALL_OW 49
// end ;
2860: GO 2763
2862: POP
2863: POP
// cornel_units := tmp ;
2864: LD_ADDR_EXP 6
2868: PUSH
2869: LD_VAR 0 2
2873: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2874: LD_EXP 44
2878: PPUSH
2879: LD_INT 191
2881: PPUSH
2882: LD_INT 106
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 48
// end ;
2892: LD_VAR 0 1
2896: RET
// export function PrepareWesternBase ; var i ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
// uc_side := 8 ;
2901: LD_ADDR_OWVAR 20
2905: PUSH
2906: LD_INT 8
2908: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2909: LD_ADDR_EXP 47
2913: PUSH
2914: LD_STRING Lynch
2916: PPUSH
2917: LD_INT 0
2919: PPUSH
2920: LD_STRING 
2922: PPUSH
2923: CALL 39085 0 3
2927: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2928: LD_ADDR_EXP 48
2932: PUSH
2933: LD_STRING Walker
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: LD_STRING 
2941: PPUSH
2942: CALL 39085 0 3
2946: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2947: LD_ADDR_EXP 49
2951: PUSH
2952: LD_STRING Turner
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: LD_STRING 
2960: PPUSH
2961: CALL 39085 0 3
2965: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2966: LD_ADDR_EXP 50
2970: PUSH
2971: LD_STRING Jillian
2973: PPUSH
2974: LD_INT 0
2976: PPUSH
2977: LD_STRING 
2979: PPUSH
2980: CALL 39085 0 3
2984: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: LD_EXP 47
2994: PUSH
2995: LD_EXP 48
2999: PUSH
3000: LD_EXP 49
3004: PUSH
3005: LD_EXP 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: FOR_IN
3017: IFFALSE 3045
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 3
3026: PPUSH
3027: LD_INT 0
3029: PPUSH
3030: CALL_OW 49
// ComHold ( i ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 140
// end ;
3043: GO 3016
3045: POP
3046: POP
// end ;
3047: LD_VAR 0 1
3051: RET
// export function SelectGroup ; var units , selected , i ; begin
3052: LD_INT 0
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
3058: LD_ADDR_VAR 0 2
3062: PUSH
3063: LD_EXP 37
3067: PUSH
3068: LD_INT -3
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: LD_EXP 4
3079: ADD
3080: PUSH
3081: LD_INT -2
3083: PUSH
3084: LD_INT -4
3086: PUSH
3087: LD_EXP 44
3091: PUSH
3092: LD_EXP 45
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: ADD
3103: PUSH
3104: LD_INT -3
3106: PUSH
3107: EMPTY
3108: LIST
3109: ADD
3110: PUSH
3111: LD_EXP 6
3115: ADD
3116: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
3117: LD_ADDR_VAR 0 3
3121: PUSH
3122: LD_EXP 37
3126: PUSH
3127: LD_STRING Select four characters to go with you
3129: PPUSH
3130: LD_INT 4
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: LD_VAR 0 2
3140: PPUSH
3141: EMPTY
3142: PPUSH
3143: CALL_OW 42
3147: ADD
3148: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
3149: LD_ADDR_EXP 6
3153: PUSH
3154: LD_EXP 4
3158: PUSH
3159: LD_EXP 6
3163: UNION
3164: PUSH
3165: LD_VAR 0 3
3169: DIFF
3170: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
3171: LD_ADDR_VAR 0 4
3175: PUSH
3176: LD_EXP 6
3180: PUSH
3181: LD_EXP 45
3185: ADD
3186: PUSH
3187: FOR_IN
3188: IFFALSE 3219
// if GetSide ( i ) = 1 then
3190: LD_VAR 0 4
3194: PPUSH
3195: CALL_OW 255
3199: PUSH
3200: LD_INT 1
3202: EQUAL
3203: IFFALSE 3217
// SetSide ( i , 4 ) ;
3205: LD_VAR 0 4
3209: PPUSH
3210: LD_INT 4
3212: PPUSH
3213: CALL_OW 235
3217: GO 3187
3219: POP
3220: POP
// for i in selected do
3221: LD_ADDR_VAR 0 4
3225: PUSH
3226: LD_VAR 0 3
3230: PUSH
3231: FOR_IN
3232: IFFALSE 3263
// if GetSide ( i ) = 4 then
3234: LD_VAR 0 4
3238: PPUSH
3239: CALL_OW 255
3243: PUSH
3244: LD_INT 4
3246: EQUAL
3247: IFFALSE 3261
// SetSide ( i , 1 ) ;
3249: LD_VAR 0 4
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: CALL_OW 235
3261: GO 3231
3263: POP
3264: POP
// jmm_units := jmm_units diff cornel_units ;
3265: LD_ADDR_EXP 4
3269: PUSH
3270: LD_EXP 4
3274: PUSH
3275: LD_EXP 6
3279: DIFF
3280: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
3281: LD_EXP 38
3285: PPUSH
3286: CALL_OW 255
3290: PUSH
3291: LD_INT 4
3293: EQUAL
3294: IFFALSE 3309
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
3296: LD_EXP 3
3300: PUSH
3301: LD_STRING Bobby
3303: STR
3304: PPUSH
3305: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
3309: LD_EXP 39
3313: PPUSH
3314: CALL_OW 255
3318: PUSH
3319: LD_INT 4
3321: EQUAL
3322: IFFALSE 3337
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
3324: LD_EXP 3
3328: PUSH
3329: LD_STRING Cyrus
3331: STR
3332: PPUSH
3333: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
3337: LD_EXP 40
3341: PPUSH
3342: CALL_OW 255
3346: PUSH
3347: LD_INT 4
3349: EQUAL
3350: IFFALSE 3365
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
3352: LD_EXP 3
3356: PUSH
3357: LD_STRING Lisa
3359: STR
3360: PPUSH
3361: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
3365: LD_EXP 41
3369: PPUSH
3370: CALL_OW 255
3374: PUSH
3375: LD_INT 4
3377: EQUAL
3378: IFFALSE 3393
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
3380: LD_EXP 3
3384: PUSH
3385: LD_STRING Khatam
3387: STR
3388: PPUSH
3389: CALL_OW 40
// if GetSide ( Brian ) = 4 then
3393: LD_EXP 42
3397: PPUSH
3398: CALL_OW 255
3402: PUSH
3403: LD_INT 4
3405: EQUAL
3406: IFFALSE 3421
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3408: LD_EXP 3
3412: PUSH
3413: LD_STRING Brian
3415: STR
3416: PPUSH
3417: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3421: LD_EXP 43
3425: PPUSH
3426: CALL_OW 255
3430: PUSH
3431: LD_INT 4
3433: EQUAL
3434: IFFALSE 3449
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3436: LD_EXP 3
3440: PUSH
3441: LD_STRING Jerry
3443: STR
3444: PPUSH
3445: CALL_OW 40
// end ; end_of_file
3449: LD_VAR 0 1
3453: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3454: LD_INT 0
3456: PPUSH
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
// ru_alert := false ;
3469: LD_ADDR_EXP 60
3473: PUSH
3474: LD_INT 0
3476: ST_TO_ADDR
// ru_produce_list := [ ] ;
3477: LD_ADDR_EXP 57
3481: PUSH
3482: EMPTY
3483: ST_TO_ADDR
// if Difficulty > 1 then
3484: LD_OWVAR 67
3488: PUSH
3489: LD_INT 1
3491: GREATER
3492: IFFALSE 3616
// begin uc_side := 3 ;
3494: LD_ADDR_OWVAR 20
3498: PUSH
3499: LD_INT 3
3501: ST_TO_ADDR
// uc_nation := 3 ;
3502: LD_ADDR_OWVAR 21
3506: PUSH
3507: LD_INT 3
3509: ST_TO_ADDR
// bc_type := b_breastwork ;
3510: LD_ADDR_OWVAR 42
3514: PUSH
3515: LD_INT 31
3517: ST_TO_ADDR
// bc_level := Difficulty ;
3518: LD_ADDR_OWVAR 43
3522: PUSH
3523: LD_OWVAR 67
3527: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3528: LD_INT 22
3530: PPUSH
3531: LD_INT 14
3533: PPUSH
3534: LD_INT 0
3536: PPUSH
3537: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3541: LD_INT 48
3543: PPUSH
3544: LD_INT 46
3546: PPUSH
3547: LD_INT 0
3549: PPUSH
3550: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3554: LD_INT 86
3556: PPUSH
3557: LD_INT 65
3559: PPUSH
3560: LD_INT 5
3562: PPUSH
3563: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3567: LD_INT 165
3569: PPUSH
3570: LD_INT 73
3572: PPUSH
3573: LD_INT 5
3575: PPUSH
3576: CALL_OW 47
// if Difficulty > 2 then
3580: LD_OWVAR 67
3584: PUSH
3585: LD_INT 2
3587: GREATER
3588: IFFALSE 3616
// begin CreateAndPlaceBuildingXYD ( 152 , 114 , 4 ) ;
3590: LD_INT 152
3592: PPUSH
3593: LD_INT 114
3595: PPUSH
3596: LD_INT 4
3598: PPUSH
3599: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 157 , 97 , 4 ) ;
3603: LD_INT 157
3605: PPUSH
3606: LD_INT 97
3608: PPUSH
3609: LD_INT 4
3611: PPUSH
3612: CALL_OW 47
// end ; end ; if Difficulty >= 3 then
3616: LD_OWVAR 67
3620: PUSH
3621: LD_INT 3
3623: GREATEREQUAL
3624: IFFALSE 3639
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3626: LD_INT 51
3628: PPUSH
3629: LD_INT 3
3631: PPUSH
3632: LD_INT 2
3634: PPUSH
3635: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3639: LD_ADDR_VAR 0 7
3643: PUSH
3644: LD_INT 22
3646: PUSH
3647: LD_INT 3
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 2
3656: PUSH
3657: LD_INT 30
3659: PUSH
3660: LD_INT 31
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PUSH
3667: LD_INT 30
3669: PUSH
3670: LD_INT 32
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3691: LD_ADDR_VAR 0 8
3695: PUSH
3696: LD_INT 22
3698: PUSH
3699: LD_INT 3
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: LD_INT 30
3708: PUSH
3709: LD_INT 4
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PPUSH
3720: CALL_OW 69
3724: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3725: LD_ADDR_VAR 0 10
3729: PUSH
3730: LD_INT 22
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PUSH
3740: LD_INT 30
3742: PUSH
3743: LD_INT 3
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: PPUSH
3754: CALL_OW 69
3758: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3759: LD_ADDR_VAR 0 9
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 3
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 30
3776: PUSH
3777: LD_INT 6
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PPUSH
3788: CALL_OW 69
3792: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3793: LD_ADDR_VAR 0 2
3797: PUSH
3798: LD_INT 22
3800: PUSH
3801: LD_INT 3
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: LD_INT 30
3810: PUSH
3811: LD_INT 1
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PPUSH
3822: CALL_OW 69
3826: PUSH
3827: FOR_IN
3828: IFFALSE 3872
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3830: LD_VAR 0 2
3834: PPUSH
3835: CALL_OW 274
3839: PPUSH
3840: LD_INT 1
3842: PPUSH
3843: LD_INT 1000
3845: PPUSH
3846: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3850: LD_VAR 0 2
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 2
3862: PPUSH
3863: LD_INT 300
3865: PPUSH
3866: CALL_OW 277
// end ;
3870: GO 3827
3872: POP
3873: POP
// uc_side := 3 ;
3874: LD_ADDR_OWVAR 20
3878: PUSH
3879: LD_INT 3
3881: ST_TO_ADDR
// uc_nation := 3 ;
3882: LD_ADDR_OWVAR 21
3886: PUSH
3887: LD_INT 3
3889: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3890: LD_ADDR_VAR 0 11
3894: PUSH
3895: LD_INT 2
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: LD_INT 4
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: PUSH
3913: LD_OWVAR 67
3917: ARRAY
3918: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3919: LD_ADDR_EXP 52
3923: PUSH
3924: LD_STRING Pokryshkin
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: LD_STRING 
3932: PPUSH
3933: CALL 39085 0 3
3937: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3938: LD_EXP 52
3942: PPUSH
3943: LD_INT 63
3945: PPUSH
3946: LD_INT 21
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3956: LD_EXP 52
3960: PPUSH
3961: CALL_OW 140
// InitHc ;
3965: CALL_OW 19
// for i in fac do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: LD_VAR 0 10
3978: PUSH
3979: FOR_IN
3980: IFFALSE 4033
// begin for j = 1 to 6 do
3982: LD_ADDR_VAR 0 3
3986: PUSH
3987: DOUBLE
3988: LD_INT 1
3990: DEC
3991: ST_TO_ADDR
3992: LD_INT 6
3994: PUSH
3995: FOR_TO
3996: IFFALSE 4029
// begin PrepareHuman ( false , 3 , skill ) ;
3998: LD_INT 0
4000: PPUSH
4001: LD_INT 3
4003: PPUSH
4004: LD_VAR 0 11
4008: PPUSH
4009: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4013: CALL_OW 44
4017: PPUSH
4018: LD_VAR 0 2
4022: PPUSH
4023: CALL_OW 52
// end ;
4027: GO 3995
4029: POP
4030: POP
// end ;
4031: GO 3979
4033: POP
4034: POP
// for i in lab do
4035: LD_ADDR_VAR 0 2
4039: PUSH
4040: LD_VAR 0 9
4044: PUSH
4045: FOR_IN
4046: IFFALSE 4079
// begin PrepareHuman ( false , 4 , skill ) ;
4048: LD_INT 0
4050: PPUSH
4051: LD_INT 4
4053: PPUSH
4054: LD_VAR 0 11
4058: PPUSH
4059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4063: CALL_OW 44
4067: PPUSH
4068: LD_VAR 0 2
4072: PPUSH
4073: CALL_OW 52
// end ;
4077: GO 4045
4079: POP
4080: POP
// for i in tw do
4081: LD_ADDR_VAR 0 2
4085: PUSH
4086: LD_VAR 0 7
4090: PUSH
4091: FOR_IN
4092: IFFALSE 4141
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
4094: LD_VAR 0 2
4098: PPUSH
4099: LD_INT 42
4101: PUSH
4102: LD_INT 43
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 1
4111: PPUSH
4112: LD_INT 2
4114: PPUSH
4115: CALL_OW 12
4119: ARRAY
4120: PPUSH
4121: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
4125: LD_VAR 0 11
4129: PPUSH
4130: LD_VAR 0 2
4134: PPUSH
4135: CALL 775 0 2
// end ;
4139: GO 4091
4141: POP
4142: POP
// for i in bar do
4143: LD_ADDR_VAR 0 2
4147: PUSH
4148: LD_VAR 0 8
4152: PUSH
4153: FOR_IN
4154: IFFALSE 4187
// begin PrepareHuman ( false , 1 , skill ) ;
4156: LD_INT 0
4158: PPUSH
4159: LD_INT 1
4161: PPUSH
4162: LD_VAR 0 11
4166: PPUSH
4167: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4171: CALL_OW 44
4175: PPUSH
4176: LD_VAR 0 2
4180: PPUSH
4181: CALL_OW 52
// end ;
4185: GO 4153
4187: POP
4188: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
4189: LD_ADDR_VAR 0 13
4193: PUSH
4194: LD_INT 100
4196: PUSH
4197: LD_INT 9
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 135
4206: PUSH
4207: LD_INT 60
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: LD_INT 41
4216: PUSH
4217: LD_INT 6
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: LD_INT 22
4226: PUSH
4227: LD_INT 9
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 84
4236: PUSH
4237: LD_INT 14
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: ST_TO_ADDR
// vehicles := [ ] ;
4251: LD_ADDR_VAR 0 12
4255: PUSH
4256: EMPTY
4257: ST_TO_ADDR
// for i in spot_xy do
4258: LD_ADDR_VAR 0 2
4262: PUSH
4263: LD_VAR 0 13
4267: PUSH
4268: FOR_IN
4269: IFFALSE 4427
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
4271: LD_ADDR_VAR 0 6
4275: PUSH
4276: LD_INT 3
4278: PPUSH
4279: LD_INT 3
4281: PPUSH
4282: LD_INT 22
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 1
4290: PPUSH
4291: LD_INT 42
4293: PUSH
4294: LD_INT 43
4296: PUSH
4297: LD_INT 44
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 3
4310: PPUSH
4311: CALL_OW 12
4315: ARRAY
4316: PPUSH
4317: LD_INT 100
4319: PPUSH
4320: CALL 497 0 7
4324: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
4325: LD_ADDR_VAR 0 12
4329: PUSH
4330: LD_VAR 0 12
4334: PPUSH
4335: LD_VAR 0 12
4339: PUSH
4340: LD_INT 1
4342: PLUS
4343: PPUSH
4344: LD_VAR 0 6
4348: PPUSH
4349: CALL_OW 2
4353: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4354: LD_VAR 0 6
4358: PPUSH
4359: LD_INT 3
4361: PPUSH
4362: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
4366: LD_VAR 0 6
4370: PPUSH
4371: LD_VAR 0 2
4375: PUSH
4376: LD_INT 1
4378: ARRAY
4379: PPUSH
4380: LD_VAR 0 2
4384: PUSH
4385: LD_INT 2
4387: ARRAY
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
4396: LD_INT 0
4398: PPUSH
4399: LD_INT 3
4401: PPUSH
4402: LD_VAR 0 11
4406: PPUSH
4407: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4411: CALL_OW 44
4415: PPUSH
4416: LD_VAR 0 6
4420: PPUSH
4421: CALL_OW 52
// end ;
4425: GO 4268
4427: POP
4428: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_INT 5
4441: PUSH
4442: LD_INT 7
4444: PUSH
4445: LD_INT 8
4447: PUSH
4448: LD_INT 9
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PUSH
4463: FOR_TO
4464: IFFALSE 4524
// begin PrepareHuman ( false , 1 , skill ) ;
4466: LD_INT 0
4468: PPUSH
4469: LD_INT 1
4471: PPUSH
4472: LD_VAR 0 11
4476: PPUSH
4477: CALL_OW 380
// un := CreateHuman ;
4481: LD_ADDR_VAR 0 5
4485: PUSH
4486: CALL_OW 44
4490: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4491: LD_VAR 0 5
4495: PPUSH
4496: LD_INT 11
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4506: LD_ADDR_EXP 55
4510: PUSH
4511: LD_EXP 55
4515: PUSH
4516: LD_VAR 0 5
4520: ADD
4521: ST_TO_ADDR
// end ;
4522: GO 4463
4524: POP
4525: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 2
4538: PUSH
4539: LD_INT 3
4541: PUSH
4542: LD_INT 4
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PUSH
4554: LD_OWVAR 67
4558: ARRAY
4559: PUSH
4560: FOR_TO
4561: IFFALSE 4621
// begin PrepareHuman ( false , 1 , skill ) ;
4563: LD_INT 0
4565: PPUSH
4566: LD_INT 1
4568: PPUSH
4569: LD_VAR 0 11
4573: PPUSH
4574: CALL_OW 380
// un := CreateHuman ;
4578: LD_ADDR_VAR 0 5
4582: PUSH
4583: CALL_OW 44
4587: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4588: LD_VAR 0 5
4592: PPUSH
4593: LD_INT 12
4595: PPUSH
4596: LD_INT 0
4598: PPUSH
4599: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4603: LD_ADDR_EXP 53
4607: PUSH
4608: LD_EXP 53
4612: PUSH
4613: LD_VAR 0 5
4617: ADD
4618: ST_TO_ADDR
// end ;
4619: GO 4560
4621: POP
4622: POP
// for i = 1 to 2 do
4623: LD_ADDR_VAR 0 2
4627: PUSH
4628: DOUBLE
4629: LD_INT 1
4631: DEC
4632: ST_TO_ADDR
4633: LD_INT 2
4635: PUSH
4636: FOR_TO
4637: IFFALSE 4703
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4639: LD_INT 1
4641: PPUSH
4642: LD_INT 1
4644: PPUSH
4645: LD_VAR 0 11
4649: PPUSH
4650: CALL_OW 380
// un := CreateHuman ;
4654: LD_ADDR_VAR 0 5
4658: PUSH
4659: CALL_OW 44
4663: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4664: LD_VAR 0 5
4668: PPUSH
4669: LD_INT 39
4671: PPUSH
4672: LD_INT 12
4674: PPUSH
4675: LD_INT 3
4677: PPUSH
4678: LD_INT 0
4680: PPUSH
4681: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4685: LD_ADDR_EXP 54
4689: PUSH
4690: LD_EXP 54
4694: PUSH
4695: LD_VAR 0 5
4699: ADD
4700: ST_TO_ADDR
// end ;
4701: GO 4636
4703: POP
4704: POP
// for i = 1 to 3 do
4705: LD_ADDR_VAR 0 2
4709: PUSH
4710: DOUBLE
4711: LD_INT 1
4713: DEC
4714: ST_TO_ADDR
4715: LD_INT 3
4717: PUSH
4718: FOR_TO
4719: IFFALSE 4785
// begin PrepareHuman ( false , 1 , skill ) ;
4721: LD_INT 0
4723: PPUSH
4724: LD_INT 1
4726: PPUSH
4727: LD_VAR 0 11
4731: PPUSH
4732: CALL_OW 380
// un := CreateHuman ;
4736: LD_ADDR_VAR 0 5
4740: PUSH
4741: CALL_OW 44
4745: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4746: LD_VAR 0 5
4750: PPUSH
4751: LD_INT 180
4753: PPUSH
4754: LD_INT 11
4756: PPUSH
4757: LD_INT 4
4759: PPUSH
4760: LD_INT 0
4762: PPUSH
4763: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4767: LD_ADDR_EXP 58
4771: PUSH
4772: LD_EXP 58
4776: PUSH
4777: LD_VAR 0 5
4781: ADD
4782: ST_TO_ADDR
// end ;
4783: GO 4718
4785: POP
4786: POP
// ru_vehicles := vehicles ;
4787: LD_ADDR_EXP 56
4791: PUSH
4792: LD_VAR 0 12
4796: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4797: LD_ADDR_EXP 59
4801: PUSH
4802: LD_INT 131
4804: PUSH
4805: LD_INT 121
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 113
4814: PUSH
4815: LD_INT 90
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 93
4824: PUSH
4825: LD_INT 62
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 106
4839: PUSH
4840: LD_INT 54
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: LD_INT 120
4849: PUSH
4850: LD_INT 80
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: LD_INT 143
4859: PUSH
4860: LD_INT 120
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 154
4874: PUSH
4875: LD_INT 116
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 140
4884: PUSH
4885: LD_INT 93
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 130
4894: PUSH
4895: LD_INT 58
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: LIST
4906: PUSH
4907: LD_INT 105
4909: PUSH
4910: LD_INT 106
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: LD_INT 134
4919: PUSH
4920: LD_INT 98
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: LD_INT 159
4929: PUSH
4930: LD_INT 113
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: LIST
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: ST_TO_ADDR
// if Difficulty = 1 then
4948: LD_OWVAR 67
4952: PUSH
4953: LD_INT 1
4955: EQUAL
4956: IFFALSE 4960
// exit ;
4958: GO 5015
// for i = 1 to Difficulty - 1 do
4960: LD_ADDR_VAR 0 2
4964: PUSH
4965: DOUBLE
4966: LD_INT 1
4968: DEC
4969: ST_TO_ADDR
4970: LD_OWVAR 67
4974: PUSH
4975: LD_INT 1
4977: MINUS
4978: PUSH
4979: FOR_TO
4980: IFFALSE 5013
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
4982: LD_ADDR_EXP 57
4986: PUSH
4987: LD_EXP 57
4991: PUSH
4992: LD_INT 22
4994: PUSH
4995: LD_INT 1
4997: PUSH
4998: LD_INT 1
5000: PUSH
5001: LD_INT 43
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: ADD
5010: ST_TO_ADDR
5011: GO 4979
5013: POP
5014: POP
// end ;
5015: LD_VAR 0 1
5019: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
5020: LD_INT 22
5022: PUSH
5023: LD_INT 3
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: LD_INT 21
5032: PUSH
5033: LD_INT 2
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PPUSH
5044: CALL_OW 69
5048: IFFALSE 5142
5050: GO 5052
5052: DISABLE
5053: LD_INT 0
5055: PPUSH
5056: PPUSH
// begin enable ;
5057: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
5058: LD_ADDR_VAR 0 2
5062: PUSH
5063: LD_INT 22
5065: PUSH
5066: LD_INT 3
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: LD_INT 21
5075: PUSH
5076: LD_INT 2
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: EMPTY
5084: LIST
5085: LIST
5086: PPUSH
5087: CALL_OW 69
5091: ST_TO_ADDR
// if filter then
5092: LD_VAR 0 2
5096: IFFALSE 5142
// for i in filter do
5098: LD_ADDR_VAR 0 1
5102: PUSH
5103: LD_VAR 0 2
5107: PUSH
5108: FOR_IN
5109: IFFALSE 5140
// if GetFuel ( i ) < 20 then
5111: LD_VAR 0 1
5115: PPUSH
5116: CALL_OW 261
5120: PUSH
5121: LD_INT 20
5123: LESS
5124: IFFALSE 5138
// SetFuel ( i , 20 ) ;
5126: LD_VAR 0 1
5130: PPUSH
5131: LD_INT 20
5133: PPUSH
5134: CALL_OW 240
5138: GO 5108
5140: POP
5141: POP
// end ;
5142: PPOPN 2
5144: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
5145: LD_EXP 57
5149: IFFALSE 5368
5151: GO 5153
5153: DISABLE
5154: LD_INT 0
5156: PPUSH
5157: PPUSH
5158: PPUSH
// begin enable ;
5159: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
5160: LD_ADDR_VAR 0 2
5164: PUSH
5165: LD_INT 22
5167: PUSH
5168: LD_INT 3
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: LD_INT 30
5177: PUSH
5178: LD_INT 3
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PPUSH
5189: CALL_OW 69
5193: ST_TO_ADDR
// can_produce := [ ] ;
5194: LD_ADDR_VAR 0 3
5198: PUSH
5199: EMPTY
5200: ST_TO_ADDR
// if not fac then
5201: LD_VAR 0 2
5205: NOT
5206: IFFALSE 5211
// begin disable ;
5208: DISABLE
// exit ;
5209: GO 5368
// end ; for i in fac do
5211: LD_ADDR_VAR 0 1
5215: PUSH
5216: LD_VAR 0 2
5220: PUSH
5221: FOR_IN
5222: IFFALSE 5260
// if UnitsInside ( i ) then
5224: LD_VAR 0 1
5228: PPUSH
5229: CALL_OW 313
5233: IFFALSE 5258
// can_produce := Insert ( can_produce , 1 , i ) ;
5235: LD_ADDR_VAR 0 3
5239: PUSH
5240: LD_VAR 0 3
5244: PPUSH
5245: LD_INT 1
5247: PPUSH
5248: LD_VAR 0 1
5252: PPUSH
5253: CALL_OW 2
5257: ST_TO_ADDR
5258: GO 5221
5260: POP
5261: POP
// if not can_produce then
5262: LD_VAR 0 3
5266: NOT
5267: IFFALSE 5271
// exit ;
5269: GO 5368
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
5271: LD_VAR 0 3
5275: PUSH
5276: LD_INT 1
5278: PPUSH
5279: LD_VAR 0 3
5283: PPUSH
5284: CALL_OW 12
5288: ARRAY
5289: PPUSH
5290: LD_EXP 57
5294: PUSH
5295: LD_INT 1
5297: ARRAY
5298: PPUSH
5299: LD_EXP 57
5303: PUSH
5304: LD_INT 2
5306: ARRAY
5307: PPUSH
5308: LD_EXP 57
5312: PUSH
5313: LD_INT 3
5315: ARRAY
5316: PPUSH
5317: LD_EXP 57
5321: PUSH
5322: LD_INT 4
5324: ARRAY
5325: PPUSH
5326: CALL_OW 125
// for i = 1 to 4 do
5330: LD_ADDR_VAR 0 1
5334: PUSH
5335: DOUBLE
5336: LD_INT 1
5338: DEC
5339: ST_TO_ADDR
5340: LD_INT 4
5342: PUSH
5343: FOR_TO
5344: IFFALSE 5366
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
5346: LD_ADDR_EXP 57
5350: PUSH
5351: LD_EXP 57
5355: PPUSH
5356: LD_INT 1
5358: PPUSH
5359: CALL_OW 3
5363: ST_TO_ADDR
5364: GO 5343
5366: POP
5367: POP
// end ;
5368: PPOPN 3
5370: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
5371: LD_INT 0
5373: PPUSH
5374: PPUSH
5375: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5376: LD_ADDR_VAR 0 2
5380: PUSH
5381: DOUBLE
5382: LD_INT 1
5384: DEC
5385: ST_TO_ADDR
5386: LD_INT 2
5388: PUSH
5389: LD_INT 3
5391: PUSH
5392: LD_INT 4
5394: PUSH
5395: LD_INT 4
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: PUSH
5404: LD_OWVAR 67
5408: ARRAY
5409: PUSH
5410: FOR_TO
5411: IFFALSE 5560
// begin PrepareHuman ( false , 3 , 3 ) ;
5413: LD_INT 0
5415: PPUSH
5416: LD_INT 3
5418: PPUSH
5419: LD_INT 3
5421: PPUSH
5422: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
5426: LD_ADDR_VAR 0 3
5430: PUSH
5431: LD_INT 3
5433: PPUSH
5434: LD_INT 3
5436: PPUSH
5437: LD_INT 22
5439: PPUSH
5440: LD_INT 1
5442: PPUSH
5443: LD_INT 1
5445: PPUSH
5446: LD_INT 43
5448: PUSH
5449: LD_INT 42
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: PUSH
5456: LD_INT 1
5458: PPUSH
5459: LD_INT 2
5461: PPUSH
5462: CALL_OW 12
5466: ARRAY
5467: PPUSH
5468: LD_INT 70
5470: PPUSH
5471: CALL 497 0 7
5475: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5476: LD_VAR 0 3
5480: PPUSH
5481: LD_INT 4
5483: PPUSH
5484: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5488: LD_VAR 0 3
5492: PPUSH
5493: LD_INT 229
5495: PPUSH
5496: LD_INT 44
5498: PPUSH
5499: LD_INT 0
5501: PPUSH
5502: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5506: CALL_OW 44
5510: PPUSH
5511: LD_VAR 0 3
5515: PPUSH
5516: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5520: LD_ADDR_EXP 56
5524: PUSH
5525: LD_EXP 56
5529: PUSH
5530: LD_VAR 0 3
5534: ADD
5535: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5536: LD_VAR 0 3
5540: PPUSH
5541: LD_INT 191
5543: PPUSH
5544: LD_INT 32
5546: PPUSH
5547: CALL_OW 111
// Wait ( 0 0$02 ) ;
5551: LD_INT 70
5553: PPUSH
5554: CALL_OW 67
// end ;
5558: GO 5410
5560: POP
5561: POP
// end ;
5562: LD_VAR 0 1
5566: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5567: LD_EXP 31
5571: PUSH
5572: LD_EXP 56
5576: AND
5577: IFFALSE 5751
5579: GO 5581
5581: DISABLE
5582: LD_INT 0
5584: PPUSH
5585: PPUSH
5586: PPUSH
// begin wait ( 0 0$50 ) ;
5587: LD_INT 1750
5589: PPUSH
5590: CALL_OW 67
// tmp := ru_vehicles ;
5594: LD_ADDR_VAR 0 3
5598: PUSH
5599: LD_EXP 56
5603: ST_TO_ADDR
// if not tmp then
5604: LD_VAR 0 3
5608: NOT
5609: IFFALSE 5613
// exit ;
5611: GO 5751
// repeat wait ( 0 0$1 ) ;
5613: LD_INT 35
5615: PPUSH
5616: CALL_OW 67
// for i in tmp do
5620: LD_ADDR_VAR 0 1
5624: PUSH
5625: LD_VAR 0 3
5629: PUSH
5630: FOR_IN
5631: IFFALSE 5742
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5633: LD_ADDR_VAR 0 2
5637: PUSH
5638: LD_INT 22
5640: PUSH
5641: LD_INT 1
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: PPUSH
5648: LD_VAR 0 1
5652: PPUSH
5653: CALL_OW 74
5657: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5658: LD_VAR 0 1
5662: PPUSH
5663: LD_VAR 0 2
5667: PPUSH
5668: CALL_OW 296
5672: PUSH
5673: LD_INT 10
5675: GREATER
5676: IFFALSE 5695
// ComAgressiveMove ( i , 69 , 101 ) else
5678: LD_VAR 0 1
5682: PPUSH
5683: LD_INT 69
5685: PPUSH
5686: LD_INT 101
5688: PPUSH
5689: CALL_OW 114
5693: GO 5709
// ComAttackUnit ( i , enemy ) ;
5695: LD_VAR 0 1
5699: PPUSH
5700: LD_VAR 0 2
5704: PPUSH
5705: CALL_OW 115
// if GetLives ( i ) < 250 then
5709: LD_VAR 0 1
5713: PPUSH
5714: CALL_OW 256
5718: PUSH
5719: LD_INT 250
5721: LESS
5722: IFFALSE 5740
// tmp := tmp diff i ;
5724: LD_ADDR_VAR 0 3
5728: PUSH
5729: LD_VAR 0 3
5733: PUSH
5734: LD_VAR 0 1
5738: DIFF
5739: ST_TO_ADDR
// end ;
5740: GO 5630
5742: POP
5743: POP
// until not tmp ;
5744: LD_VAR 0 3
5748: NOT
5749: IFFALSE 5613
// end ; end_of_file
5751: PPOPN 3
5753: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5754: LD_INT 0
5756: PPUSH
5757: PPUSH
5758: PPUSH
5759: PPUSH
5760: PPUSH
5761: PPUSH
5762: PPUSH
// InGameOn ;
5763: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5767: LD_EXP 37
5771: PPUSH
5772: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5776: LD_EXP 37
5780: PPUSH
5781: LD_EXP 44
5785: PPUSH
5786: CALL_OW 119
// if Bierezov then
5790: LD_EXP 45
5794: IFFALSE 5810
// ComTurnUnit ( Bierezov , Cornel ) ;
5796: LD_EXP 45
5800: PPUSH
5801: LD_EXP 44
5805: PPUSH
5806: CALL_OW 119
// for i in jmm_units do
5810: LD_ADDR_VAR 0 2
5814: PUSH
5815: LD_EXP 4
5819: PUSH
5820: FOR_IN
5821: IFFALSE 5839
// ComTurnUnit ( i , Cornel ) ;
5823: LD_VAR 0 2
5827: PPUSH
5828: LD_EXP 44
5832: PPUSH
5833: CALL_OW 119
5837: GO 5820
5839: POP
5840: POP
// units := cornel_units union Cornel ;
5841: LD_ADDR_VAR 0 3
5845: PUSH
5846: LD_EXP 6
5850: PUSH
5851: LD_EXP 44
5855: UNION
5856: ST_TO_ADDR
// repeat wait ( 1 ) ;
5857: LD_INT 1
5859: PPUSH
5860: CALL_OW 67
// for i in units do
5864: LD_ADDR_VAR 0 2
5868: PUSH
5869: LD_VAR 0 3
5873: PUSH
5874: FOR_IN
5875: IFFALSE 5908
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5877: LD_VAR 0 2
5881: PPUSH
5882: LD_EXP 37
5886: PPUSH
5887: CALL_OW 250
5891: PPUSH
5892: LD_EXP 37
5896: PPUSH
5897: CALL_OW 251
5901: PPUSH
5902: CALL_OW 111
5906: GO 5874
5908: POP
5909: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5910: LD_VAR 0 3
5914: PPUSH
5915: LD_INT 92
5917: PUSH
5918: LD_EXP 37
5922: PPUSH
5923: CALL_OW 250
5927: PUSH
5928: LD_EXP 37
5932: PPUSH
5933: CALL_OW 251
5937: PUSH
5938: LD_INT 10
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: PPUSH
5947: CALL_OW 72
5951: PUSH
5952: LD_VAR 0 3
5956: EQUAL
5957: IFFALSE 5857
// for i in units do
5959: LD_ADDR_VAR 0 2
5963: PUSH
5964: LD_VAR 0 3
5968: PUSH
5969: FOR_IN
5970: IFFALSE 5988
// ComTurnUnit ( i , JMM ) ;
5972: LD_VAR 0 2
5976: PPUSH
5977: LD_EXP 37
5981: PPUSH
5982: CALL_OW 119
5986: GO 5969
5988: POP
5989: POP
// ComTurnUnit ( Cornel , JMM ) ;
5990: LD_EXP 44
5994: PPUSH
5995: LD_EXP 37
5999: PPUSH
6000: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
6004: LD_EXP 37
6008: PPUSH
6009: LD_STRING D1-JMM-1
6011: PPUSH
6012: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
6016: LD_EXP 44
6020: PPUSH
6021: LD_STRING D1-Corn-1
6023: PPUSH
6024: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
6028: LD_EXP 37
6032: PPUSH
6033: LD_EXP 44
6037: PPUSH
6038: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
6042: LD_EXP 44
6046: PPUSH
6047: LD_EXP 37
6051: PPUSH
6052: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
6056: LD_INT 35
6058: PPUSH
6059: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
6063: LD_EXP 37
6067: PPUSH
6068: LD_EXP 44
6072: PPUSH
6073: CALL_OW 296
6077: PUSH
6078: LD_INT 6
6080: LESS
6081: IFFALSE 6056
// ChangeSideFog ( 4 , 1 ) ;
6083: LD_INT 4
6085: PPUSH
6086: LD_INT 1
6088: PPUSH
6089: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
6093: LD_EXP 37
6097: PPUSH
6098: LD_EXP 44
6102: PPUSH
6103: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6107: LD_EXP 44
6111: PPUSH
6112: LD_EXP 37
6116: PPUSH
6117: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
6121: LD_EXP 37
6125: PPUSH
6126: LD_STRING D1-JMM-2
6128: PPUSH
6129: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
6133: LD_EXP 37
6137: PPUSH
6138: LD_STRING D1-JMM-2a
6140: PPUSH
6141: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
6145: LD_EXP 44
6149: PPUSH
6150: LD_STRING D1-Corn-2
6152: PPUSH
6153: CALL_OW 88
// if bierezov_exist or debug then
6157: LD_EXP 7
6161: PUSH
6162: LD_EXP 1
6166: OR
6167: IFFALSE 6408
// begin ComTurnUnit ( Cornel , Bierezov ) ;
6169: LD_EXP 44
6173: PPUSH
6174: LD_EXP 45
6178: PPUSH
6179: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
6183: LD_INT 10
6185: PPUSH
6186: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
6190: LD_EXP 44
6194: PPUSH
6195: LD_STRING D1a-Corn-1
6197: PPUSH
6198: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
6202: LD_EXP 37
6206: PPUSH
6207: LD_EXP 45
6211: PPUSH
6212: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
6216: LD_EXP 45
6220: PPUSH
6221: LD_EXP 37
6225: PPUSH
6226: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
6230: LD_EXP 37
6234: PPUSH
6235: LD_STRING D1a-JMM-1
6237: PPUSH
6238: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
6242: LD_EXP 37
6246: PPUSH
6247: LD_EXP 44
6251: PPUSH
6252: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6256: LD_EXP 44
6260: PPUSH
6261: LD_EXP 37
6265: PPUSH
6266: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
6270: LD_EXP 44
6274: PPUSH
6275: LD_STRING D1a-Corn-2
6277: PPUSH
6278: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
6282: LD_EXP 37
6286: PPUSH
6287: LD_STRING D1a-JMM-2
6289: PPUSH
6290: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
6294: LD_EXP 44
6298: PPUSH
6299: LD_STRING D1a-Corn-3
6301: PPUSH
6302: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
6306: LD_EXP 37
6310: PPUSH
6311: LD_STRING D1a-JMM-3
6313: PPUSH
6314: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
6318: LD_EXP 44
6322: PPUSH
6323: LD_STRING D1a-Corn-4
6325: PPUSH
6326: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
6330: LD_EXP 37
6334: PPUSH
6335: LD_STRING D1a-JMM-4
6337: PPUSH
6338: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
6342: LD_EXP 44
6346: PPUSH
6347: LD_STRING D1a-Corn-5
6349: PPUSH
6350: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
6354: LD_EXP 45
6358: PPUSH
6359: LD_EXP 44
6363: PPUSH
6364: CALL_OW 250
6368: PPUSH
6369: LD_EXP 44
6373: PPUSH
6374: CALL_OW 251
6378: PUSH
6379: LD_INT 2
6381: MINUS
6382: PPUSH
6383: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
6387: LD_EXP 45
6391: PPUSH
6392: LD_EXP 44
6396: PPUSH
6397: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
6401: LD_INT 10
6403: PPUSH
6404: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
6408: LD_EXP 37
6412: PPUSH
6413: LD_STRING D1b-JMM-1
6415: PPUSH
6416: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
6420: LD_EXP 44
6424: PPUSH
6425: LD_STRING D1b-Corn-1
6427: PPUSH
6428: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6432: LD_EXP 37
6436: PPUSH
6437: LD_STRING D1b-JMM-2
6439: PPUSH
6440: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6444: LD_EXP 44
6448: PPUSH
6449: LD_STRING D1b-Corn-2
6451: PPUSH
6452: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6456: LD_EXP 37
6460: PPUSH
6461: LD_STRING D1b-JMM-3
6463: PPUSH
6464: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6468: LD_INT 10
6470: PPUSH
6471: CALL_OW 67
// SayRadio ( Powell , D1b-Pow-3 ) ;
6475: LD_EXP 46
6479: PPUSH
6480: LD_STRING D1b-Pow-3
6482: PPUSH
6483: CALL_OW 94
// Say ( JMM , D1b-JMM-4 ) ;
6487: LD_EXP 37
6491: PPUSH
6492: LD_STRING D1b-JMM-4
6494: PPUSH
6495: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6499: LD_EXP 44
6503: PPUSH
6504: LD_STRING D1b-Corn-4
6506: PPUSH
6507: CALL_OW 88
// if Khatam then
6511: LD_EXP 41
6515: IFFALSE 6531
// Say ( Khatam , D1b-Khat-4 ) else
6517: LD_EXP 41
6521: PPUSH
6522: LD_STRING D1b-Khat-4
6524: PPUSH
6525: CALL_OW 88
6529: GO 6567
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6531: LD_EXP 6
6535: PPUSH
6536: LD_INT 26
6538: PUSH
6539: LD_INT 1
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: PPUSH
6546: CALL_OW 72
6550: PUSH
6551: LD_EXP 44
6555: PUSH
6556: EMPTY
6557: LIST
6558: DIFF
6559: PPUSH
6560: LD_STRING D1b-Sol1-4
6562: PPUSH
6563: CALL 585 0 2
// if Cyrus then
6567: LD_EXP 39
6571: IFFALSE 6585
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6573: LD_EXP 39
6577: PPUSH
6578: LD_STRING D1b-Cyrus-4
6580: PPUSH
6581: CALL_OW 88
// if Lisa then
6585: LD_EXP 40
6589: IFFALSE 6647
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6591: LD_EXP 40
6595: PPUSH
6596: LD_STRING D1b-Lisa-4
6598: PPUSH
6599: CALL_OW 88
// if Cyrus then
6603: LD_EXP 39
6607: IFFALSE 6647
// begin if not IsInUnit ( Cyrus ) then
6609: LD_EXP 39
6613: PPUSH
6614: CALL_OW 310
6618: NOT
6619: IFFALSE 6635
// ComTurnUnit ( Cyrus , Lisa ) ;
6621: LD_EXP 39
6625: PPUSH
6626: LD_EXP 40
6630: PPUSH
6631: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6635: LD_EXP 39
6639: PPUSH
6640: LD_STRING D1b-Cyrus-5
6642: PPUSH
6643: CALL_OW 88
// end ; end ; SelectGroup ;
6647: CALL 3052 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6651: LD_EXP 37
6655: PPUSH
6656: LD_STRING D1d-JMM-1
6658: PPUSH
6659: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6663: LD_EXP 44
6667: PPUSH
6668: LD_STRING D1d-Corn-1
6670: PPUSH
6671: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6675: LD_ADDR_VAR 0 2
6679: PUSH
6680: LD_EXP 4
6684: PUSH
6685: LD_EXP 6
6689: ADD
6690: PUSH
6691: LD_EXP 37
6695: ADD
6696: PUSH
6697: FOR_IN
6698: IFFALSE 6711
// ComHold ( i ) ;
6700: LD_VAR 0 2
6704: PPUSH
6705: CALL_OW 140
6709: GO 6697
6711: POP
6712: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6713: LD_ADDR_VAR 0 4
6717: PUSH
6718: LD_INT 22
6720: PUSH
6721: LD_INT 1
6723: PUSH
6724: EMPTY
6725: LIST
6726: LIST
6727: PUSH
6728: LD_INT 21
6730: PUSH
6731: LD_INT 2
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: PPUSH
6742: CALL_OW 69
6746: ST_TO_ADDR
// if vehicles then
6747: LD_VAR 0 4
6751: IFFALSE 7089
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6753: LD_EXP 6
6757: PPUSH
6758: LD_INT 55
6760: PUSH
6761: EMPTY
6762: LIST
6763: PPUSH
6764: CALL_OW 72
6768: IFFALSE 6807
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6770: LD_ADDR_VAR 0 2
6774: PUSH
6775: LD_EXP 6
6779: PPUSH
6780: LD_INT 55
6782: PUSH
6783: EMPTY
6784: LIST
6785: PPUSH
6786: CALL_OW 72
6790: PUSH
6791: FOR_IN
6792: IFFALSE 6805
// ComExitVehicle ( i ) ;
6794: LD_VAR 0 2
6798: PPUSH
6799: CALL_OW 121
6803: GO 6791
6805: POP
6806: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6807: LD_ADDR_VAR 0 5
6811: PUSH
6812: LD_VAR 0 4
6816: PPUSH
6817: LD_INT 34
6819: PUSH
6820: LD_INT 51
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PPUSH
6827: CALL_OW 72
6831: ST_TO_ADDR
// if cargos then
6832: LD_VAR 0 5
6836: IFFALSE 7019
// begin vehicles := cargos ;
6838: LD_ADDR_VAR 0 4
6842: PUSH
6843: LD_VAR 0 5
6847: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6848: LD_ADDR_VAR 0 6
6852: PUSH
6853: LD_STRING 02_resources_4
6855: PPUSH
6856: LD_INT 0
6858: PPUSH
6859: CALL_OW 30
6863: ST_TO_ADDR
// if debug and not resources then
6864: LD_EXP 1
6868: PUSH
6869: LD_VAR 0 6
6873: NOT
6874: AND
6875: IFFALSE 6885
// resources := 160 ;
6877: LD_ADDR_VAR 0 6
6881: PUSH
6882: LD_INT 160
6884: ST_TO_ADDR
// if resources mod 10 then
6885: LD_VAR 0 6
6889: PUSH
6890: LD_INT 10
6892: MOD
6893: IFFALSE 6915
// resources := resources - resources mod 10 ;
6895: LD_ADDR_VAR 0 6
6899: PUSH
6900: LD_VAR 0 6
6904: PUSH
6905: LD_VAR 0 6
6909: PUSH
6910: LD_INT 10
6912: MOD
6913: MINUS
6914: ST_TO_ADDR
// if resources then
6915: LD_VAR 0 6
6919: IFFALSE 7019
// for i in cargos do
6921: LD_ADDR_VAR 0 2
6925: PUSH
6926: LD_VAR 0 5
6930: PUSH
6931: FOR_IN
6932: IFFALSE 7017
// begin if resources < 100 then
6934: LD_VAR 0 6
6938: PUSH
6939: LD_INT 100
6941: LESS
6942: IFFALSE 6964
// begin cargo := resources ;
6944: LD_ADDR_VAR 0 7
6948: PUSH
6949: LD_VAR 0 6
6953: ST_TO_ADDR
// resources := 0 ;
6954: LD_ADDR_VAR 0 6
6958: PUSH
6959: LD_INT 0
6961: ST_TO_ADDR
// end else
6962: GO 6986
// begin cargo := 100 ;
6964: LD_ADDR_VAR 0 7
6968: PUSH
6969: LD_INT 100
6971: ST_TO_ADDR
// resources := resources - 100 ;
6972: LD_ADDR_VAR 0 6
6976: PUSH
6977: LD_VAR 0 6
6981: PUSH
6982: LD_INT 100
6984: MINUS
6985: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
6986: LD_VAR 0 2
6990: PPUSH
6991: LD_INT 1
6993: PPUSH
6994: LD_VAR 0 7
6998: PPUSH
6999: CALL_OW 290
// if resources = 0 then
7003: LD_VAR 0 6
7007: PUSH
7008: LD_INT 0
7010: EQUAL
7011: IFFALSE 7015
// break ;
7013: GO 7017
// end ;
7015: GO 6931
7017: POP
7018: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
7019: LD_VAR 0 4
7023: PUSH
7024: LD_INT 1
7026: ARRAY
7027: PPUSH
7028: CALL_OW 311
7032: PPUSH
7033: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
7037: LD_VAR 0 4
7041: PUSH
7042: LD_INT 1
7044: ARRAY
7045: PPUSH
7046: LD_INT 4
7048: PPUSH
7049: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
7053: LD_EXP 44
7057: PPUSH
7058: LD_VAR 0 4
7062: PUSH
7063: LD_INT 1
7065: ARRAY
7066: PPUSH
7067: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
7071: LD_INT 35
7073: PPUSH
7074: CALL_OW 67
// until IsInUnit ( Cornel ) ;
7078: LD_EXP 44
7082: PPUSH
7083: CALL_OW 310
7087: IFFALSE 7071
// end ; InGameOff ;
7089: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
7093: LD_STRING M1
7095: PPUSH
7096: CALL_OW 337
// SaveForQuickRestart ;
7100: CALL_OW 22
// cornel_active := true ;
7104: LD_ADDR_EXP 8
7108: PUSH
7109: LD_INT 1
7111: ST_TO_ADDR
// end ;
7112: LD_VAR 0 1
7116: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
7117: LD_EXP 37
7121: PPUSH
7122: LD_EXP 47
7126: PPUSH
7127: CALL_OW 296
7131: PUSH
7132: LD_INT 10
7134: LESS
7135: IFFALSE 8518
7137: GO 7139
7139: DISABLE
7140: LD_INT 0
7142: PPUSH
7143: PPUSH
7144: PPUSH
7145: PPUSH
7146: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
7147: LD_ADDR_VAR 0 2
7151: PUSH
7152: LD_INT 89
7154: PUSH
7155: LD_INT 34
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 138
7164: PUSH
7165: LD_INT 63
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 196
7174: PUSH
7175: LD_INT 84
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PUSH
7182: LD_INT 135
7184: PUSH
7185: LD_INT 52
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PUSH
7192: LD_INT 103
7194: PUSH
7195: LD_INT 39
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: LD_INT 58
7204: PUSH
7205: LD_INT 30
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PUSH
7212: LD_INT 38
7214: PUSH
7215: LD_INT 51
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: ST_TO_ADDR
// Video ( true ) ;
7231: LD_INT 1
7233: PPUSH
7234: CALL 76506 0 1
// if jmm_units then
7238: LD_EXP 4
7242: IFFALSE 7318
// for i in jmm_units do
7244: LD_ADDR_VAR 0 1
7248: PUSH
7249: LD_EXP 4
7253: PUSH
7254: FOR_IN
7255: IFFALSE 7316
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
7257: LD_VAR 0 1
7261: PPUSH
7262: LD_EXP 37
7266: PPUSH
7267: CALL_OW 296
7271: PUSH
7272: LD_INT 10
7274: LESS
7275: PUSH
7276: LD_VAR 0 1
7280: PPUSH
7281: CALL_OW 310
7285: NOT
7286: AND
7287: IFFALSE 7305
// ComTurnUnit ( i , JMM ) else
7289: LD_VAR 0 1
7293: PPUSH
7294: LD_EXP 37
7298: PPUSH
7299: CALL_OW 119
7303: GO 7314
// ComHold ( i ) ;
7305: LD_VAR 0 1
7309: PPUSH
7310: CALL_OW 140
// end ;
7314: GO 7254
7316: POP
7317: POP
// if IsInUnit ( JMM ) then
7318: LD_EXP 37
7322: PPUSH
7323: CALL_OW 310
7327: IFFALSE 7352
// begin ComExitVehicle ( JMM ) ;
7329: LD_EXP 37
7333: PPUSH
7334: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
7338: LD_EXP 37
7342: PPUSH
7343: LD_EXP 47
7347: PPUSH
7348: CALL_OW 172
// end ; Wait ( 10 ) ;
7352: LD_INT 10
7354: PPUSH
7355: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
7359: LD_EXP 37
7363: PPUSH
7364: LD_EXP 47
7368: PPUSH
7369: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
7373: LD_INT 35
7375: PPUSH
7376: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
7380: LD_EXP 37
7384: PPUSH
7385: LD_EXP 47
7389: PPUSH
7390: CALL_OW 296
7394: PUSH
7395: LD_INT 6
7397: LESS
7398: IFFALSE 7373
// ComTurnUnit ( JMM , Lynch ) ;
7400: LD_EXP 37
7404: PPUSH
7405: LD_EXP 47
7409: PPUSH
7410: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
7414: LD_ADDR_VAR 0 1
7418: PUSH
7419: LD_EXP 47
7423: PUSH
7424: LD_EXP 48
7428: PUSH
7429: LD_EXP 49
7433: PUSH
7434: LD_EXP 50
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: PUSH
7445: FOR_IN
7446: IFFALSE 7464
// ComTurnUnit ( i , JMM ) ;
7448: LD_VAR 0 1
7452: PPUSH
7453: LD_EXP 37
7457: PPUSH
7458: CALL_OW 119
7462: GO 7445
7464: POP
7465: POP
// Wait ( 0 0$0.3 ) ;
7466: LD_INT 10
7468: PPUSH
7469: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7473: LD_EXP 37
7477: PPUSH
7478: LD_STRING D2-JMM-1
7480: PPUSH
7481: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7485: LD_EXP 47
7489: PPUSH
7490: LD_STRING D2-Sol1-1
7492: PPUSH
7493: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7497: LD_EXP 37
7501: PPUSH
7502: LD_STRING D2-JMM-2
7504: PPUSH
7505: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7509: LD_EXP 47
7513: PPUSH
7514: LD_STRING D2-Sol1-2
7516: PPUSH
7517: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7521: LD_EXP 37
7525: PPUSH
7526: LD_STRING D2-JMM-3
7528: PPUSH
7529: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7533: LD_EXP 47
7537: PPUSH
7538: LD_STRING D2-Sol1-3
7540: PPUSH
7541: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7545: LD_ADDR_VAR 0 1
7549: PUSH
7550: LD_INT 22
7552: PUSH
7553: LD_INT 8
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: PPUSH
7560: CALL_OW 69
7564: PUSH
7565: FOR_IN
7566: IFFALSE 7582
// SetSide ( i , 1 ) ;
7568: LD_VAR 0 1
7572: PPUSH
7573: LD_INT 1
7575: PPUSH
7576: CALL_OW 235
7580: GO 7565
7582: POP
7583: POP
// Say ( JMM , D2-JMM-4 ) ;
7584: LD_EXP 37
7588: PPUSH
7589: LD_STRING D2-JMM-4
7591: PPUSH
7592: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7596: LD_INT 1
7598: PPUSH
7599: LD_INT 5
7601: PPUSH
7602: CALL_OW 332
// for i = 1 to points do
7606: LD_ADDR_VAR 0 1
7610: PUSH
7611: DOUBLE
7612: LD_INT 1
7614: DEC
7615: ST_TO_ADDR
7616: LD_VAR 0 2
7620: PUSH
7621: FOR_TO
7622: IFFALSE 7797
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7624: LD_VAR 0 2
7628: PUSH
7629: LD_VAR 0 1
7633: ARRAY
7634: PUSH
7635: LD_INT 1
7637: ARRAY
7638: PPUSH
7639: LD_VAR 0 2
7643: PUSH
7644: LD_VAR 0 1
7648: ARRAY
7649: PUSH
7650: LD_INT 2
7652: ARRAY
7653: PPUSH
7654: CALL_OW 84
// if i = 1 then
7658: LD_VAR 0 1
7662: PUSH
7663: LD_INT 1
7665: EQUAL
7666: IFFALSE 7680
// Say ( Lynch , D2-Sol1-4 ) ;
7668: LD_EXP 47
7672: PPUSH
7673: LD_STRING D2-Sol1-4
7675: PPUSH
7676: CALL_OW 88
// if i = 2 then
7680: LD_VAR 0 1
7684: PUSH
7685: LD_INT 2
7687: EQUAL
7688: IFFALSE 7702
// Say ( JMM , D2-JMM-5 ) ;
7690: LD_EXP 37
7694: PPUSH
7695: LD_STRING D2-JMM-5
7697: PPUSH
7698: CALL_OW 88
// if i = 4 then
7702: LD_VAR 0 1
7706: PUSH
7707: LD_INT 4
7709: EQUAL
7710: IFFALSE 7734
// begin RevealFogArea ( 1 , troopsArea ) ;
7712: LD_INT 1
7714: PPUSH
7715: LD_INT 6
7717: PPUSH
7718: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7722: LD_EXP 47
7726: PPUSH
7727: LD_STRING D2-Sol1-5
7729: PPUSH
7730: CALL_OW 88
// end ; if i = 5 then
7734: LD_VAR 0 1
7738: PUSH
7739: LD_INT 5
7741: EQUAL
7742: IFFALSE 7756
// Say ( JMM , D2-JMM-6 ) ;
7744: LD_EXP 37
7748: PPUSH
7749: LD_STRING D2-JMM-6
7751: PPUSH
7752: CALL_OW 88
// if i = 7 then
7756: LD_VAR 0 1
7760: PUSH
7761: LD_INT 7
7763: EQUAL
7764: IFFALSE 7788
// begin RevealFogArea ( 1 , forestArea ) ;
7766: LD_INT 1
7768: PPUSH
7769: LD_INT 7
7771: PPUSH
7772: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7776: LD_EXP 47
7780: PPUSH
7781: LD_STRING D2-Sol1-6
7783: PPUSH
7784: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7788: LD_INT 46
7790: PPUSH
7791: CALL_OW 67
// end ;
7795: GO 7621
7797: POP
7798: POP
// CenterNowOnUnits ( JMM ) ;
7799: LD_EXP 37
7803: PPUSH
7804: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7808: LD_EXP 37
7812: PPUSH
7813: LD_STRING D2-JMM-7
7815: PPUSH
7816: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7820: LD_EXP 47
7824: PPUSH
7825: LD_STRING D2-Sol1-7
7827: PPUSH
7828: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7832: LD_EXP 37
7836: PPUSH
7837: LD_STRING D2-JMM-8
7839: PPUSH
7840: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7844: LD_ADDR_VAR 0 4
7848: PUSH
7849: LD_INT 22
7851: PUSH
7852: LD_INT 1
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: LD_INT 30
7861: PUSH
7862: LD_INT 31
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PPUSH
7873: CALL_OW 69
7877: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7878: LD_EXP 47
7882: PPUSH
7883: LD_VAR 0 4
7887: PUSH
7888: LD_INT 1
7890: ARRAY
7891: PPUSH
7892: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7896: LD_INT 65
7898: PPUSH
7899: LD_INT 101
7901: PPUSH
7902: CALL_OW 428
7906: IFFALSE 7929
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7908: LD_INT 65
7910: PPUSH
7911: LD_INT 101
7913: PPUSH
7914: CALL_OW 428
7918: PPUSH
7919: LD_INT 75
7921: PPUSH
7922: LD_INT 100
7924: PPUSH
7925: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7929: LD_INT 66
7931: PPUSH
7932: LD_INT 103
7934: PPUSH
7935: CALL_OW 428
7939: IFFALSE 7962
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7941: LD_INT 66
7943: PPUSH
7944: LD_INT 103
7946: PPUSH
7947: CALL_OW 428
7951: PPUSH
7952: LD_INT 75
7954: PPUSH
7955: LD_INT 100
7957: PPUSH
7958: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7962: LD_ADDR_VAR 0 5
7966: PUSH
7967: LD_INT 22
7969: PUSH
7970: LD_INT 1
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: PUSH
7977: LD_INT 21
7979: PUSH
7980: LD_INT 2
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 91
7989: PUSH
7990: LD_EXP 37
7994: PUSH
7995: LD_INT 7
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: LIST
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: LIST
8007: PPUSH
8008: CALL_OW 69
8012: ST_TO_ADDR
// if tmp then
8013: LD_VAR 0 5
8017: IFFALSE 8034
// ComMoveXY ( tmp , 75 , 100 ) ;
8019: LD_VAR 0 5
8023: PPUSH
8024: LD_INT 75
8026: PPUSH
8027: LD_INT 100
8029: PPUSH
8030: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
8034: LD_ADDR_VAR 0 3
8038: PUSH
8039: LD_EXP 4
8043: PPUSH
8044: LD_INT 25
8046: PUSH
8047: LD_INT 1
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PPUSH
8054: CALL_OW 72
8058: PPUSH
8059: LD_EXP 37
8063: PPUSH
8064: CALL_OW 74
8068: ST_TO_ADDR
// if sol then
8069: LD_VAR 0 3
8073: IFFALSE 8133
// if GetDistUnits ( JMM , sol ) < 10 then
8075: LD_EXP 37
8079: PPUSH
8080: LD_VAR 0 3
8084: PPUSH
8085: CALL_OW 296
8089: PUSH
8090: LD_INT 10
8092: LESS
8093: IFFALSE 8133
// begin if IsInUnit ( sol ) then
8095: LD_VAR 0 3
8099: PPUSH
8100: CALL_OW 310
8104: IFFALSE 8115
// ComExitVehicle ( sol ) ;
8106: LD_VAR 0 3
8110: PPUSH
8111: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
8115: LD_VAR 0 3
8119: PPUSH
8120: LD_VAR 0 4
8124: PUSH
8125: LD_INT 2
8127: ARRAY
8128: PPUSH
8129: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
8133: LD_INT 10
8135: PPUSH
8136: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
8140: LD_EXP 37
8144: PPUSH
8145: LD_INT 65
8147: PPUSH
8148: LD_INT 101
8150: PPUSH
8151: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
8155: LD_EXP 37
8159: PPUSH
8160: LD_INT 63
8162: PPUSH
8163: LD_INT 100
8165: PPUSH
8166: CALL_OW 178
// tmp := 0 0$0 ;
8170: LD_ADDR_VAR 0 5
8174: PUSH
8175: LD_INT 0
8177: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8178: LD_INT 35
8180: PPUSH
8181: CALL_OW 67
// tmp := tmp + 0 0$1 ;
8185: LD_ADDR_VAR 0 5
8189: PUSH
8190: LD_VAR 0 5
8194: PUSH
8195: LD_INT 35
8197: PLUS
8198: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
8199: LD_EXP 37
8203: PPUSH
8204: LD_INT 65
8206: PPUSH
8207: LD_INT 101
8209: PPUSH
8210: CALL_OW 307
8214: PUSH
8215: LD_VAR 0 5
8219: PUSH
8220: LD_INT 175
8222: GREATER
8223: OR
8224: IFFALSE 8178
// Say ( JMM , D2a-JMM-1 ) ;
8226: LD_EXP 37
8230: PPUSH
8231: LD_STRING D2a-JMM-1
8233: PPUSH
8234: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
8238: LD_EXP 48
8242: PPUSH
8243: LD_INT 66
8245: PPUSH
8246: LD_INT 103
8248: PPUSH
8249: CALL_OW 111
// tmp := 0 0$0 ;
8253: LD_ADDR_VAR 0 5
8257: PUSH
8258: LD_INT 0
8260: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8261: LD_INT 35
8263: PPUSH
8264: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
8268: LD_EXP 48
8272: PPUSH
8273: LD_INT 66
8275: PPUSH
8276: LD_INT 103
8278: PPUSH
8279: CALL_OW 307
8283: PUSH
8284: LD_VAR 0 5
8288: PUSH
8289: LD_INT 175
8291: GREATER
8292: OR
8293: IFFALSE 8261
// ComTurnUnit ( Walker , JMM ) ;
8295: LD_EXP 48
8299: PPUSH
8300: LD_EXP 37
8304: PPUSH
8305: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
8309: LD_EXP 48
8313: PPUSH
8314: LD_STRING D2a-Sci1-1
8316: PPUSH
8317: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
8321: LD_EXP 37
8325: PPUSH
8326: LD_EXP 48
8330: PPUSH
8331: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
8335: LD_EXP 37
8339: PPUSH
8340: LD_STRING D2a-JMM-2
8342: PPUSH
8343: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
8347: LD_EXP 48
8351: PPUSH
8352: LD_STRING D2a-Sci1-2
8354: PPUSH
8355: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
8359: LD_EXP 37
8363: PPUSH
8364: LD_STRING D2a-JMM-3
8366: PPUSH
8367: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
8371: LD_EXP 48
8375: PPUSH
8376: LD_STRING D2a-Sci1-3
8378: PPUSH
8379: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
8383: LD_ADDR_EXP 4
8387: PUSH
8388: LD_EXP 4
8392: PUSH
8393: LD_EXP 47
8397: PUSH
8398: LD_EXP 48
8402: PUSH
8403: LD_EXP 49
8407: PUSH
8408: LD_EXP 50
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: ADD
8419: ST_TO_ADDR
// for i in jmm_units do
8420: LD_ADDR_VAR 0 1
8424: PUSH
8425: LD_EXP 4
8429: PUSH
8430: FOR_IN
8431: IFFALSE 8456
// if not IsInUnit ( i ) then
8433: LD_VAR 0 1
8437: PPUSH
8438: CALL_OW 310
8442: NOT
8443: IFFALSE 8454
// ComFree ( i ) ;
8445: LD_VAR 0 1
8449: PPUSH
8450: CALL_OW 139
8454: GO 8430
8456: POP
8457: POP
// Video ( false ) ;
8458: LD_INT 0
8460: PPUSH
8461: CALL 76506 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8465: LD_STRING MSolar1
8467: PPUSH
8468: CALL_OW 337
// jmm_on_west := true ;
8472: LD_ADDR_EXP 5
8476: PUSH
8477: LD_INT 1
8479: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8480: LD_INT 1050
8482: PPUSH
8483: CALL_OW 67
// frank_can_return := true ;
8487: LD_ADDR_EXP 12
8491: PUSH
8492: LD_INT 1
8494: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8495: LD_INT 6300
8497: PPUSH
8498: LD_INT 8400
8500: PPUSH
8501: CALL_OW 12
8505: PPUSH
8506: CALL_OW 67
// send_spec_patrol := true ;
8510: LD_ADDR_EXP 30
8514: PUSH
8515: LD_INT 1
8517: ST_TO_ADDR
// end ;
8518: PPOPN 5
8520: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8521: LD_INT 22
8523: PUSH
8524: LD_INT 1
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: PUSH
8531: LD_INT 34
8533: PUSH
8534: LD_INT 51
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PUSH
8541: LD_INT 92
8543: PUSH
8544: LD_INT 63
8546: PUSH
8547: LD_INT 100
8549: PUSH
8550: LD_INT 5
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: LIST
8563: PUSH
8564: EMPTY
8565: LIST
8566: PPUSH
8567: CALL_OW 69
8571: PUSH
8572: LD_EXP 5
8576: NOT
8577: AND
8578: IFFALSE 8691
8580: GO 8582
8582: DISABLE
8583: LD_INT 0
8585: PPUSH
8586: PPUSH
// begin enable ;
8587: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8588: LD_ADDR_VAR 0 2
8592: PUSH
8593: LD_INT 22
8595: PUSH
8596: LD_INT 1
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: PUSH
8603: LD_INT 34
8605: PUSH
8606: LD_INT 51
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: PUSH
8613: LD_INT 92
8615: PUSH
8616: LD_INT 63
8618: PUSH
8619: LD_INT 100
8621: PUSH
8622: LD_INT 5
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: PUSH
8636: EMPTY
8637: LIST
8638: PPUSH
8639: CALL_OW 69
8643: ST_TO_ADDR
// if not filter then
8644: LD_VAR 0 2
8648: NOT
8649: IFFALSE 8653
// exit ;
8651: GO 8691
// for i in filter do
8653: LD_ADDR_VAR 0 1
8657: PUSH
8658: LD_VAR 0 2
8662: PUSH
8663: FOR_IN
8664: IFFALSE 8689
// begin SetFuel ( i , 0 ) ;
8666: LD_VAR 0 1
8670: PPUSH
8671: LD_INT 0
8673: PPUSH
8674: CALL_OW 240
// ComStop ( i ) ;
8678: LD_VAR 0 1
8682: PPUSH
8683: CALL_OW 141
// end ;
8687: GO 8663
8689: POP
8690: POP
// end ;
8691: PPOPN 2
8693: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8694: LD_EXP 30
8698: IFFALSE 9824
8700: GO 8702
8702: DISABLE
8703: LD_INT 0
8705: PPUSH
8706: PPUSH
8707: PPUSH
8708: PPUSH
8709: PPUSH
8710: PPUSH
8711: PPUSH
// begin if not ru_spec_patrol then
8712: LD_EXP 54
8716: NOT
8717: IFFALSE 8721
// exit ;
8719: GO 9824
// dead1 := false ;
8721: LD_ADDR_VAR 0 1
8725: PUSH
8726: LD_INT 0
8728: ST_TO_ADDR
// dead2 := false ;
8729: LD_ADDR_VAR 0 2
8733: PUSH
8734: LD_INT 0
8736: ST_TO_ADDR
// inarea1 := false ;
8737: LD_ADDR_VAR 0 3
8741: PUSH
8742: LD_INT 0
8744: ST_TO_ADDR
// inarea2 := false ;
8745: LD_ADDR_VAR 0 4
8749: PUSH
8750: LD_INT 0
8752: ST_TO_ADDR
// tmp := [ ] ;
8753: LD_ADDR_VAR 0 6
8757: PUSH
8758: EMPTY
8759: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8760: LD_EXP 54
8764: PPUSH
8765: LD_INT 75
8767: PPUSH
8768: LD_INT 101
8770: PPUSH
8771: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8775: LD_INT 35
8777: PPUSH
8778: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8782: LD_INT 1
8784: PPUSH
8785: LD_EXP 54
8789: PUSH
8790: LD_INT 1
8792: ARRAY
8793: PPUSH
8794: CALL_OW 292
8798: PUSH
8799: LD_EXP 54
8803: PPUSH
8804: LD_INT 92
8806: PUSH
8807: LD_INT 75
8809: PUSH
8810: LD_INT 101
8812: PUSH
8813: LD_INT 4
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: PPUSH
8822: CALL_OW 72
8826: OR
8827: IFFALSE 8775
// ComStop ( ru_spec_patrol ) ;
8829: LD_EXP 54
8833: PPUSH
8834: CALL_OW 141
// Wait ( 0 0$02 ) ;
8838: LD_INT 70
8840: PPUSH
8841: CALL_OW 67
// DialogueOn ;
8845: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8849: LD_EXP 54
8853: PUSH
8854: LD_INT 1
8856: ARRAY
8857: PPUSH
8858: LD_STRING D8-Rus1-1
8860: PPUSH
8861: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8865: LD_EXP 37
8869: PPUSH
8870: LD_STRING D8-JMM-1
8872: PPUSH
8873: CALL_OW 88
// DialogueOff ;
8877: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8881: LD_EXP 54
8885: PPUSH
8886: LD_INT 13
8888: PPUSH
8889: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8893: LD_INT 35
8895: PPUSH
8896: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8900: LD_VAR 0 1
8904: NOT
8905: PUSH
8906: LD_EXP 54
8910: PUSH
8911: LD_INT 1
8913: ARRAY
8914: PPUSH
8915: CALL_OW 301
8919: AND
8920: IFFALSE 8930
// dead1 := true ;
8922: LD_ADDR_VAR 0 1
8926: PUSH
8927: LD_INT 1
8929: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8930: LD_VAR 0 2
8934: NOT
8935: PUSH
8936: LD_EXP 54
8940: PUSH
8941: LD_INT 2
8943: ARRAY
8944: PPUSH
8945: CALL_OW 301
8949: AND
8950: IFFALSE 8960
// dead2 := true ;
8952: LD_ADDR_VAR 0 2
8956: PUSH
8957: LD_INT 1
8959: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8960: LD_VAR 0 3
8964: NOT
8965: PUSH
8966: LD_EXP 54
8970: PUSH
8971: LD_INT 1
8973: ARRAY
8974: PPUSH
8975: LD_INT 14
8977: PPUSH
8978: CALL_OW 308
8982: AND
8983: IFFALSE 8993
// inarea1 := true ;
8985: LD_ADDR_VAR 0 3
8989: PUSH
8990: LD_INT 1
8992: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
8993: LD_VAR 0 4
8997: NOT
8998: PUSH
8999: LD_EXP 54
9003: PUSH
9004: LD_INT 2
9006: ARRAY
9007: PPUSH
9008: LD_INT 14
9010: PPUSH
9011: CALL_OW 308
9015: AND
9016: IFFALSE 9026
// inarea2 := true ;
9018: LD_ADDR_VAR 0 4
9022: PUSH
9023: LD_INT 1
9025: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
9026: LD_VAR 0 1
9030: PUSH
9031: LD_VAR 0 2
9035: AND
9036: PUSH
9037: LD_VAR 0 1
9041: PUSH
9042: LD_VAR 0 4
9046: AND
9047: OR
9048: PUSH
9049: LD_VAR 0 2
9053: PUSH
9054: LD_VAR 0 3
9058: AND
9059: OR
9060: PUSH
9061: LD_VAR 0 3
9065: PUSH
9066: LD_VAR 0 4
9070: AND
9071: OR
9072: IFFALSE 8893
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
9074: LD_VAR 0 3
9078: PUSH
9079: LD_VAR 0 4
9083: AND
9084: PUSH
9085: LD_VAR 0 1
9089: PUSH
9090: LD_VAR 0 4
9094: AND
9095: OR
9096: PUSH
9097: LD_VAR 0 2
9101: PUSH
9102: LD_VAR 0 3
9106: AND
9107: OR
9108: IFFALSE 9804
// begin prepare_siege := true ;
9110: LD_ADDR_EXP 31
9114: PUSH
9115: LD_INT 1
9117: ST_TO_ADDR
// DialogueOn ;
9118: CALL_OW 6
// if ( inarea1 and inarea2 ) then
9122: LD_VAR 0 3
9126: PUSH
9127: LD_VAR 0 4
9131: AND
9132: IFFALSE 9148
// Say ( JMM , D8b-JMM-1a ) else
9134: LD_EXP 37
9138: PPUSH
9139: LD_STRING D8b-JMM-1a
9141: PPUSH
9142: CALL_OW 88
9146: GO 9160
// Say ( JMM , D8b-JMM-1 ) ;
9148: LD_EXP 37
9152: PPUSH
9153: LD_STRING D8b-JMM-1
9155: PPUSH
9156: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
9160: LD_EXP 4
9164: PPUSH
9165: LD_INT 26
9167: PUSH
9168: LD_INT 1
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PPUSH
9175: CALL_OW 72
9179: PUSH
9180: LD_EXP 38
9184: PUSH
9185: LD_EXP 39
9189: PUSH
9190: LD_EXP 48
9194: PUSH
9195: LD_EXP 51
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: DIFF
9206: PPUSH
9207: LD_STRING D8b-Sol1-1
9209: PPUSH
9210: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
9214: LD_EXP 39
9218: PUSH
9219: LD_EXP 39
9223: PUSH
9224: LD_EXP 4
9228: IN
9229: AND
9230: IFFALSE 9246
// Say ( Cyrus , D8b-Cyrus-1 ) else
9232: LD_EXP 39
9236: PPUSH
9237: LD_STRING D8b-Cyrus-1
9239: PPUSH
9240: CALL_OW 88
9244: GO 9258
// Say ( JMM , D8b-JMM-1a ) ;
9246: LD_EXP 37
9250: PPUSH
9251: LD_STRING D8b-JMM-1a
9253: PPUSH
9254: CALL_OW 88
// if Lisa and Lisa in jmm_units then
9258: LD_EXP 40
9262: PUSH
9263: LD_EXP 40
9267: PUSH
9268: LD_EXP 4
9272: IN
9273: AND
9274: IFFALSE 9288
// Say ( Lisa , D8b-Lisa-2 ) ;
9276: LD_EXP 40
9280: PPUSH
9281: LD_STRING D8b-Lisa-2
9283: PPUSH
9284: CALL_OW 88
// if Bobby and Bobby in jmm_units then
9288: LD_EXP 38
9292: PUSH
9293: LD_EXP 38
9297: PUSH
9298: LD_EXP 4
9302: IN
9303: AND
9304: IFFALSE 9320
// Say ( Bobby , D8b-Bobby-1 ) else
9306: LD_EXP 38
9310: PPUSH
9311: LD_STRING D8b-Bobby-1
9313: PPUSH
9314: CALL_OW 88
9318: GO 9380
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
9320: LD_ADDR_VAR 0 5
9324: PUSH
9325: LD_EXP 4
9329: PPUSH
9330: LD_INT 26
9332: PUSH
9333: LD_INT 1
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PPUSH
9340: CALL_OW 72
9344: PUSH
9345: LD_EXP 38
9349: PUSH
9350: LD_EXP 39
9354: PUSH
9355: LD_EXP 48
9359: PUSH
9360: LD_EXP 51
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: DIFF
9371: PPUSH
9372: LD_STRING D8b-Sol2-1
9374: PPUSH
9375: CALL 585 0 2
9379: ST_TO_ADDR
// DialogueOff ;
9380: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
9384: LD_EXP 39
9388: PUSH
9389: LD_EXP 39
9393: PUSH
9394: LD_EXP 4
9398: IN
9399: AND
9400: IFFALSE 9425
// tmp := Insert ( tmp , 1 , Cyrus ) ;
9402: LD_ADDR_VAR 0 6
9406: PUSH
9407: LD_VAR 0 6
9411: PPUSH
9412: LD_INT 1
9414: PPUSH
9415: LD_EXP 39
9419: PPUSH
9420: CALL_OW 2
9424: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
9425: LD_EXP 38
9429: PUSH
9430: LD_EXP 38
9434: PUSH
9435: LD_EXP 4
9439: IN
9440: AND
9441: IFFALSE 9466
// tmp := Insert ( tmp , 1 , Bobby ) ;
9443: LD_ADDR_VAR 0 6
9447: PUSH
9448: LD_VAR 0 6
9452: PPUSH
9453: LD_INT 1
9455: PPUSH
9456: LD_EXP 38
9460: PPUSH
9461: CALL_OW 2
9465: ST_TO_ADDR
// if sol then
9466: LD_VAR 0 5
9470: IFFALSE 9495
// tmp := Insert ( tmp , 1 , sol ) ;
9472: LD_ADDR_VAR 0 6
9476: PUSH
9477: LD_VAR 0 6
9481: PPUSH
9482: LD_INT 1
9484: PPUSH
9485: LD_VAR 0 5
9489: PPUSH
9490: CALL_OW 2
9494: ST_TO_ADDR
// if tmp then
9495: LD_VAR 0 6
9499: IFFALSE 9763
// begin SetSide ( tmp , 8 ) ;
9501: LD_VAR 0 6
9505: PPUSH
9506: LD_INT 8
9508: PPUSH
9509: CALL_OW 235
// for i in tmp do
9513: LD_ADDR_VAR 0 7
9517: PUSH
9518: LD_VAR 0 6
9522: PUSH
9523: FOR_IN
9524: IFFALSE 9615
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9526: LD_VAR 0 7
9530: PPUSH
9531: CALL_OW 310
9535: PUSH
9536: LD_VAR 0 7
9540: PPUSH
9541: CALL_OW 310
9545: PPUSH
9546: CALL_OW 266
9550: PUSH
9551: LD_INT 3
9553: EQUAL
9554: AND
9555: IFFALSE 9566
// ComExitBuilding ( i ) ;
9557: LD_VAR 0 7
9561: PPUSH
9562: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9566: LD_VAR 0 7
9570: PPUSH
9571: CALL_OW 310
9575: PUSH
9576: LD_VAR 0 7
9580: PPUSH
9581: CALL_OW 310
9585: PPUSH
9586: CALL_OW 266
9590: PUSH
9591: LD_INT 2
9593: EQUAL
9594: AND
9595: IFFALSE 9606
// ComExitVehicle ( i ) ;
9597: LD_VAR 0 7
9601: PPUSH
9602: CALL_OW 121
// wait ( 0 0$1 ) ;
9606: LD_INT 35
9608: PPUSH
9609: CALL_OW 67
// end ;
9613: GO 9523
9615: POP
9616: POP
// ComFree ( tmp ) ;
9617: LD_VAR 0 6
9621: PPUSH
9622: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9626: LD_VAR 0 6
9630: PPUSH
9631: LD_INT 15
9633: PPUSH
9634: CALL_OW 173
// AddComHold ( tmp ) ;
9638: LD_VAR 0 6
9642: PPUSH
9643: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9647: LD_INT 35
9649: PPUSH
9650: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9654: LD_VAR 0 6
9658: PUSH
9659: LD_INT 1
9661: ARRAY
9662: PPUSH
9663: CALL_OW 314
9667: NOT
9668: IFFALSE 9682
// ComMoveToArea ( tmp , cyrusEscape ) ;
9670: LD_VAR 0 6
9674: PPUSH
9675: LD_INT 15
9677: PPUSH
9678: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9682: LD_VAR 0 6
9686: PUSH
9687: LD_INT 1
9689: ARRAY
9690: PPUSH
9691: LD_INT 15
9693: PPUSH
9694: CALL_OW 308
9698: IFFALSE 9753
// begin RemoveUnit ( tmp [ 1 ] ) ;
9700: LD_VAR 0 6
9704: PUSH
9705: LD_INT 1
9707: ARRAY
9708: PPUSH
9709: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9713: LD_ADDR_EXP 4
9717: PUSH
9718: LD_EXP 4
9722: PUSH
9723: LD_VAR 0 6
9727: PUSH
9728: LD_INT 1
9730: ARRAY
9731: DIFF
9732: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9733: LD_ADDR_VAR 0 6
9737: PUSH
9738: LD_VAR 0 6
9742: PUSH
9743: LD_VAR 0 6
9747: PUSH
9748: LD_INT 1
9750: ARRAY
9751: DIFF
9752: ST_TO_ADDR
// end ; until tmp = 0 ;
9753: LD_VAR 0 6
9757: PUSH
9758: LD_INT 0
9760: EQUAL
9761: IFFALSE 9647
// end ; wait ( 0 0$30 ) ;
9763: LD_INT 1050
9765: PPUSH
9766: CALL_OW 67
// if ru_spec_patrol then
9770: LD_EXP 54
9774: IFFALSE 9802
// for i in ru_spec_patrol do
9776: LD_ADDR_VAR 0 7
9780: PUSH
9781: LD_EXP 54
9785: PUSH
9786: FOR_IN
9787: IFFALSE 9800
// RemoveUnit ( i ) ;
9789: LD_VAR 0 7
9793: PPUSH
9794: CALL_OW 64
9798: GO 9786
9800: POP
9801: POP
// end else
9802: GO 9824
// begin prepare_siege := false ;
9804: LD_ADDR_EXP 31
9808: PUSH
9809: LD_INT 0
9811: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9812: LD_EXP 37
9816: PPUSH
9817: LD_STRING D8a-JMM-1
9819: PPUSH
9820: CALL_OW 88
// end ; end ;
9824: PPOPN 7
9826: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9827: LD_EXP 12
9831: IFFALSE 11099
9833: GO 9835
9835: DISABLE
9836: LD_INT 0
9838: PPUSH
9839: PPUSH
9840: PPUSH
// begin uc_side := 8 ;
9841: LD_ADDR_OWVAR 20
9845: PUSH
9846: LD_INT 8
9848: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9849: LD_ADDR_VAR 0 3
9853: PUSH
9854: LD_INT 59
9856: PUSH
9857: LD_INT 71
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: PUSH
9864: LD_INT 122
9866: PUSH
9867: LD_INT 117
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9878: LD_ADDR_EXP 51
9882: PUSH
9883: LD_STRING Frank
9885: PPUSH
9886: LD_INT 0
9888: PPUSH
9889: LD_STRING 
9891: PPUSH
9892: CALL 39085 0 3
9896: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9897: LD_ADDR_VAR 0 1
9901: PUSH
9902: LD_INT 1
9904: PPUSH
9905: LD_INT 2
9907: PPUSH
9908: CALL_OW 12
9912: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9913: LD_EXP 51
9917: PPUSH
9918: LD_VAR 0 3
9922: PUSH
9923: LD_VAR 0 1
9927: ARRAY
9928: PUSH
9929: LD_INT 1
9931: ARRAY
9932: PPUSH
9933: LD_VAR 0 3
9937: PUSH
9938: LD_VAR 0 1
9942: ARRAY
9943: PUSH
9944: LD_INT 2
9946: ARRAY
9947: PPUSH
9948: LD_INT 0
9950: PPUSH
9951: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9955: LD_EXP 51
9959: PPUSH
9960: LD_INT 1
9962: PPUSH
9963: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9967: LD_INT 35
9969: PPUSH
9970: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9974: LD_EXP 51
9978: PPUSH
9979: LD_EXP 37
9983: PPUSH
9984: CALL_OW 296
9988: PUSH
9989: LD_INT 8
9991: LESS
9992: PUSH
9993: LD_EXP 51
9997: PPUSH
9998: CALL_OW 256
10002: PUSH
10003: LD_INT 250
10005: GREATER
10006: AND
10007: IFFALSE 9967
// Video ( true ) ;
10009: LD_INT 1
10011: PPUSH
10012: CALL 76506 0 1
// CenterOnUnits ( JMM ) ;
10016: LD_EXP 37
10020: PPUSH
10021: CALL_OW 85
// if IsInUnit ( JMM ) then
10025: LD_EXP 37
10029: PPUSH
10030: CALL_OW 310
10034: IFFALSE 10045
// ComFree ( JMM ) ;
10036: LD_EXP 37
10040: PPUSH
10041: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
10045: LD_EXP 37
10049: PPUSH
10050: LD_EXP 51
10054: PPUSH
10055: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
10059: LD_EXP 51
10063: PPUSH
10064: LD_EXP 37
10068: PPUSH
10069: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
10073: LD_EXP 37
10077: PPUSH
10078: LD_STRING D6-JMM-1
10080: PPUSH
10081: CALL_OW 88
// p := 0 ;
10085: LD_ADDR_VAR 0 2
10089: PUSH
10090: LD_INT 0
10092: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10093: LD_INT 35
10095: PPUSH
10096: CALL_OW 67
// p := p + 1 ;
10100: LD_ADDR_VAR 0 2
10104: PUSH
10105: LD_VAR 0 2
10109: PUSH
10110: LD_INT 1
10112: PLUS
10113: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
10114: LD_EXP 37
10118: PPUSH
10119: LD_EXP 51
10123: PPUSH
10124: CALL_OW 296
10128: PUSH
10129: LD_INT 8
10131: LESS
10132: PUSH
10133: LD_VAR 0 2
10137: PUSH
10138: LD_INT 7
10140: GREATER
10141: OR
10142: IFFALSE 10093
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
10144: LD_EXP 40
10148: PUSH
10149: LD_EXP 40
10153: PPUSH
10154: LD_EXP 51
10158: PPUSH
10159: CALL_OW 296
10163: PUSH
10164: LD_INT 20
10166: LESS
10167: AND
10168: PUSH
10169: LD_EXP 40
10173: PUSH
10174: LD_EXP 4
10178: IN
10179: AND
10180: IFFALSE 10205
// begin ComFree ( Lisa ) ;
10182: LD_EXP 40
10186: PPUSH
10187: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
10191: LD_EXP 40
10195: PPUSH
10196: LD_EXP 51
10200: PPUSH
10201: CALL_OW 172
// end ; if Lynch then
10205: LD_EXP 47
10209: IFFALSE 10234
// begin ComFree ( Lynch ) ;
10211: LD_EXP 47
10215: PPUSH
10216: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
10220: LD_EXP 47
10224: PPUSH
10225: LD_EXP 51
10229: PPUSH
10230: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
10234: LD_EXP 37
10238: PPUSH
10239: LD_EXP 51
10243: PPUSH
10244: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10248: LD_EXP 51
10252: PPUSH
10253: LD_EXP 37
10257: PPUSH
10258: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
10262: LD_EXP 51
10266: PPUSH
10267: LD_STRING D6-Frank-1
10269: PPUSH
10270: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
10274: LD_INT 69
10276: PPUSH
10277: LD_INT 20
10279: PPUSH
10280: LD_INT 1
10282: PPUSH
10283: LD_INT 20
10285: NEG
10286: PPUSH
10287: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
10291: LD_INT 69
10293: PPUSH
10294: LD_INT 20
10296: PPUSH
10297: LD_INT 1
10299: PPUSH
10300: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
10304: LD_INT 190
10306: PPUSH
10307: LD_INT 31
10309: PPUSH
10310: LD_INT 1
10312: PPUSH
10313: LD_INT 20
10315: NEG
10316: PPUSH
10317: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
10321: LD_INT 190
10323: PPUSH
10324: LD_INT 31
10326: PPUSH
10327: LD_INT 1
10329: PPUSH
10330: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
10334: LD_INT 69
10336: PPUSH
10337: LD_INT 20
10339: PPUSH
10340: CALL_OW 84
// Wait ( 0 0$02 ) ;
10344: LD_INT 70
10346: PPUSH
10347: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
10351: LD_EXP 37
10355: PPUSH
10356: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
10360: LD_EXP 40
10364: PUSH
10365: LD_EXP 40
10369: PPUSH
10370: LD_EXP 51
10374: PPUSH
10375: CALL_OW 296
10379: PUSH
10380: LD_INT 20
10382: LESS
10383: AND
10384: PUSH
10385: LD_EXP 40
10389: PPUSH
10390: CALL_OW 302
10394: AND
10395: PUSH
10396: LD_EXP 40
10400: PUSH
10401: LD_EXP 4
10405: IN
10406: AND
10407: IFFALSE 10529
// begin ComFree ( Lisa ) ;
10409: LD_EXP 40
10413: PPUSH
10414: CALL_OW 139
// p := 0 ;
10418: LD_ADDR_VAR 0 2
10422: PUSH
10423: LD_INT 0
10425: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10426: LD_INT 35
10428: PPUSH
10429: CALL_OW 67
// p := p + 1 ;
10433: LD_ADDR_VAR 0 2
10437: PUSH
10438: LD_VAR 0 2
10442: PUSH
10443: LD_INT 1
10445: PLUS
10446: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10447: LD_EXP 40
10451: PPUSH
10452: LD_EXP 51
10456: PPUSH
10457: CALL_OW 296
10461: PUSH
10462: LD_INT 7
10464: LESS
10465: PUSH
10466: LD_VAR 0 2
10470: PUSH
10471: LD_INT 7
10473: GREATER
10474: OR
10475: IFFALSE 10426
// Say ( Lisa , D6-Lisa-1 ) ;
10477: LD_EXP 40
10481: PPUSH
10482: LD_STRING D6-Lisa-1
10484: PPUSH
10485: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10489: LD_EXP 40
10493: PPUSH
10494: LD_EXP 51
10498: PPUSH
10499: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10503: LD_EXP 51
10507: PPUSH
10508: LD_EXP 40
10512: PPUSH
10513: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10517: LD_EXP 51
10521: PPUSH
10522: LD_STRING D6-Frank-2
10524: PPUSH
10525: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10529: LD_EXP 47
10533: PUSH
10534: LD_EXP 47
10538: PPUSH
10539: LD_EXP 51
10543: PPUSH
10544: CALL_OW 296
10548: PUSH
10549: LD_INT 20
10551: LESS
10552: AND
10553: PUSH
10554: LD_EXP 47
10558: PPUSH
10559: CALL_OW 302
10563: AND
10564: IFFALSE 10757
// begin ComTurnUnit ( Lynch , JMM ) ;
10566: LD_EXP 47
10570: PPUSH
10571: LD_EXP 37
10575: PPUSH
10576: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10580: LD_EXP 51
10584: PPUSH
10585: LD_EXP 37
10589: PPUSH
10590: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10594: LD_EXP 47
10598: PPUSH
10599: LD_STRING D6-Sol1-2
10601: PPUSH
10602: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10606: LD_EXP 37
10610: PPUSH
10611: LD_STRING D6-JMM-2
10613: PPUSH
10614: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10618: LD_EXP 51
10622: PPUSH
10623: LD_STRING D6-Frank-3
10625: PPUSH
10626: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10630: LD_EXP 37
10634: PPUSH
10635: LD_STRING D6-JMM-3
10637: PPUSH
10638: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10642: LD_EXP 51
10646: PPUSH
10647: LD_STRING D6-Frank-4
10649: PPUSH
10650: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10654: LD_EXP 51
10658: PPUSH
10659: LD_STRING D6-Frank-4a
10661: PPUSH
10662: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10666: LD_EXP 37
10670: PPUSH
10671: LD_STRING D6-JMM-4
10673: PPUSH
10674: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10678: LD_EXP 51
10682: PPUSH
10683: LD_STRING D6-Frank-5
10685: PPUSH
10686: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10690: LD_EXP 40
10694: PUSH
10695: LD_EXP 40
10699: PPUSH
10700: CALL_OW 302
10704: AND
10705: PUSH
10706: LD_EXP 40
10710: PUSH
10711: LD_EXP 4
10715: IN
10716: AND
10717: IFFALSE 10731
// Say ( Lisa , D6-Lisa-5 ) ;
10719: LD_EXP 40
10723: PPUSH
10724: LD_STRING D6-Lisa-5
10726: PPUSH
10727: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10731: LD_EXP 51
10735: PPUSH
10736: LD_STRING D6-Frank-6
10738: PPUSH
10739: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10743: LD_EXP 37
10747: PPUSH
10748: LD_STRING D6-JMM-6
10750: PPUSH
10751: CALL_OW 88
// end else
10755: GO 10884
// begin ComTurnUnit ( Frank , JMM ) ;
10757: LD_EXP 51
10761: PPUSH
10762: LD_EXP 37
10766: PPUSH
10767: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10771: LD_EXP 51
10775: PPUSH
10776: LD_STRING D6-Frank-4
10778: PPUSH
10779: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10783: LD_EXP 51
10787: PPUSH
10788: LD_STRING D6-Frank-4a
10790: PPUSH
10791: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10795: LD_EXP 37
10799: PPUSH
10800: LD_STRING D6-JMM-4
10802: PPUSH
10803: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10807: LD_EXP 51
10811: PPUSH
10812: LD_STRING D6-Frank-5
10814: PPUSH
10815: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10819: LD_EXP 40
10823: PUSH
10824: LD_EXP 40
10828: PPUSH
10829: CALL_OW 302
10833: AND
10834: PUSH
10835: LD_EXP 40
10839: PUSH
10840: LD_EXP 4
10844: IN
10845: AND
10846: IFFALSE 10860
// Say ( Lisa , D6-Lisa-5 ) ;
10848: LD_EXP 40
10852: PPUSH
10853: LD_STRING D6-Lisa-5
10855: PPUSH
10856: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10860: LD_EXP 51
10864: PPUSH
10865: LD_STRING D6-Frank-6
10867: PPUSH
10868: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10872: LD_EXP 37
10876: PPUSH
10877: LD_STRING D6-JMM-6
10879: PPUSH
10880: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10884: LD_STRING Q1
10886: PPUSH
10887: CALL_OW 97
10891: PUSH
10892: LD_INT 1
10894: DOUBLE
10895: EQUAL
10896: IFTRUE 10900
10898: GO 10911
10900: POP
// frank_send_to_scout := true ; 2 :
10901: LD_ADDR_EXP 15
10905: PUSH
10906: LD_INT 1
10908: ST_TO_ADDR
10909: GO 10931
10911: LD_INT 2
10913: DOUBLE
10914: EQUAL
10915: IFTRUE 10919
10917: GO 10930
10919: POP
// frank_send_to_scout := false ; end ;
10920: LD_ADDR_EXP 15
10924: PUSH
10925: LD_INT 0
10927: ST_TO_ADDR
10928: GO 10931
10930: POP
// Video ( false ) ;
10931: LD_INT 0
10933: PPUSH
10934: CALL 76506 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10938: LD_EXP 37
10942: PUSH
10943: LD_EXP 40
10947: PUSH
10948: LD_EXP 47
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: LIST
10957: PPUSH
10958: CALL_OW 139
// if frank_send_to_scout then
10962: LD_EXP 15
10966: IFFALSE 11020
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10968: LD_EXP 51
10972: PPUSH
10973: LD_INT 15
10975: PPUSH
10976: CALL_OW 113
// wait ( 0 0$01 ) ;
10980: LD_INT 35
10982: PPUSH
10983: CALL_OW 67
// until not See ( 1 , Frank ) ;
10987: LD_INT 1
10989: PPUSH
10990: LD_EXP 51
10994: PPUSH
10995: CALL_OW 292
10999: NOT
11000: IFFALSE 10968
// wait ( 0 0$02 ) ;
11002: LD_INT 70
11004: PPUSH
11005: CALL_OW 67
// RemoveUnit ( Frank ) ;
11009: LD_EXP 51
11013: PPUSH
11014: CALL_OW 64
// end else
11018: GO 11032
// SetSide ( Frank , 1 ) ;
11020: LD_EXP 51
11024: PPUSH
11025: LD_INT 1
11027: PPUSH
11028: CALL_OW 235
// send_attack_on_cornel_base := true ;
11032: LD_ADDR_EXP 26
11036: PUSH
11037: LD_INT 1
11039: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11040: LD_INT 35
11042: PPUSH
11043: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
11047: LD_ADDR_EXP 29
11051: PUSH
11052: LD_EXP 29
11056: PPUSH
11057: LD_STRING -
11059: PPUSH
11060: CALL 1077 0 2
11064: ST_TO_ADDR
// if debug then
11065: LD_EXP 1
11069: IFFALSE 11081
// debug_strings := time_to_prepare ;
11071: LD_ADDR_OWVAR 48
11075: PUSH
11076: LD_EXP 29
11080: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
11081: LD_EXP 29
11085: PUSH
11086: LD_INT 0
11088: EQUAL
11089: IFFALSE 11040
// cornel_prepared := true ;
11091: LD_ADDR_EXP 11
11095: PUSH
11096: LD_INT 1
11098: ST_TO_ADDR
// end ;
11099: PPOPN 3
11101: END
// every 0 0$01 trigger cornel_prepared do
11102: LD_EXP 11
11106: IFFALSE 11414
11108: GO 11110
11110: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
11111: LD_EXP 44
11115: PPUSH
11116: LD_STRING D3-Corn-1
11118: PPUSH
11119: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
11123: LD_STRING MOutWait
11125: PPUSH
11126: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
11130: LD_INT 35
11132: PPUSH
11133: CALL_OW 67
// until cornel_counter = 0 ;
11137: LD_EXP 10
11141: PUSH
11142: LD_INT 0
11144: EQUAL
11145: IFFALSE 11130
// SayRadio ( Cornel , D3a-Corn-1 ) ;
11147: LD_EXP 44
11151: PPUSH
11152: LD_STRING D3a-Corn-1
11154: PPUSH
11155: CALL_OW 94
// if IsOk ( Cornel ) then
11159: LD_EXP 44
11163: PPUSH
11164: CALL_OW 302
11168: IFFALSE 11182
// Say ( JMM , D3a-JMM-1 ) ;
11170: LD_EXP 37
11174: PPUSH
11175: LD_STRING D3a-JMM-1
11177: PPUSH
11178: CALL_OW 88
// end_mission_allowed := true ;
11182: LD_ADDR_EXP 21
11186: PUSH
11187: LD_INT 1
11189: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11190: LD_STRING M2
11192: PPUSH
11193: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
11197: LD_INT 9
11199: PPUSH
11200: LD_INT 1
11202: PPUSH
11203: CALL_OW 424
// Wait ( 0 0$05 ) ;
11207: LD_INT 175
11209: PPUSH
11210: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
11214: LD_EXP 44
11218: PPUSH
11219: LD_STRING D3a-Corn-2
11221: PPUSH
11222: CALL_OW 94
// cornel_attack := true ;
11226: LD_ADDR_EXP 9
11230: PUSH
11231: LD_INT 1
11233: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
11234: LD_INT 105
11236: PPUSH
11237: CALL_OW 67
// AddMoreTanks ( ) ;
11241: CALL 5371 0 0
// if frank_send_to_scout then
11245: LD_EXP 15
11249: IFFALSE 11414
// begin InitHc ;
11251: CALL_OW 19
// InitUc ;
11255: CALL_OW 18
// uc_side := 8 ;
11259: LD_ADDR_OWVAR 20
11263: PUSH
11264: LD_INT 8
11266: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
11267: LD_ADDR_EXP 51
11271: PUSH
11272: LD_STRING Frank
11274: PPUSH
11275: LD_INT 0
11277: PPUSH
11278: LD_STRING 
11280: PPUSH
11281: CALL 39085 0 3
11285: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
11286: LD_EXP 51
11290: PPUSH
11291: LD_INT 6
11293: PPUSH
11294: LD_INT 9
11296: PPUSH
11297: LD_INT 0
11299: PPUSH
11300: CALL_OW 48
// ComCrawl ( Frank ) ;
11304: LD_EXP 51
11308: PPUSH
11309: CALL_OW 137
// repeat wait ( 10 ) ;
11313: LD_INT 10
11315: PPUSH
11316: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11320: LD_EXP 37
11324: PPUSH
11325: LD_EXP 51
11329: PPUSH
11330: CALL_OW 296
11334: PUSH
11335: LD_INT 9
11337: LESS
11338: PUSH
11339: LD_INT 9
11341: PPUSH
11342: LD_INT 22
11344: PUSH
11345: LD_INT 1
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PPUSH
11352: CALL_OW 70
11356: OR
11357: IFFALSE 11313
// if IsDead ( Frank ) then
11359: LD_EXP 51
11363: PPUSH
11364: CALL_OW 301
11368: IFFALSE 11372
// exit ;
11370: GO 11414
// CenterOnUnits ( Frank ) ;
11372: LD_EXP 51
11376: PPUSH
11377: CALL_OW 85
// SetSide ( Frank , 1 ) ;
11381: LD_EXP 51
11385: PPUSH
11386: LD_INT 1
11388: PPUSH
11389: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
11393: LD_EXP 51
11397: PPUSH
11398: LD_STRING D6a-Frank-1
11400: PPUSH
11401: CALL_OW 88
// ComWalk ( Frank ) ;
11405: LD_EXP 51
11409: PPUSH
11410: CALL_OW 138
// end ; end ;
11414: END
// every 0 0$01 trigger solar_builded do
11415: LD_EXP 14
11419: IFFALSE 11523
11421: GO 11423
11423: DISABLE
// begin Wait ( 0 0$02 ) ;
11424: LD_INT 70
11426: PPUSH
11427: CALL_OW 67
// DialogueOn ;
11431: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11435: LD_EXP 37
11439: PPUSH
11440: LD_STRING D2b-JMM-1
11442: PPUSH
11443: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11447: LD_EXP 48
11451: PUSH
11452: LD_EXP 48
11456: PPUSH
11457: CALL_OW 302
11461: AND
11462: IFFALSE 11512
// begin Say ( Walker , D2b-Sci1-1 ) ;
11464: LD_EXP 48
11468: PPUSH
11469: LD_STRING D2b-Sci1-1
11471: PPUSH
11472: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11476: LD_EXP 37
11480: PPUSH
11481: LD_STRING D2b-JMM-2
11483: PPUSH
11484: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11488: LD_EXP 48
11492: PPUSH
11493: LD_STRING D2b-Sci1-2
11495: PPUSH
11496: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11500: LD_EXP 37
11504: PPUSH
11505: LD_STRING D2b-JMM-3
11507: PPUSH
11508: CALL_OW 88
// end ; DialogueOff ;
11512: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11516: LD_STRING MOutSol
11518: PPUSH
11519: CALL_OW 337
// end ;
11523: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11524: LD_EXP 14
11528: PUSH
11529: LD_EXP 37
11533: PPUSH
11534: CALL_OW 302
11538: AND
11539: PUSH
11540: LD_EXP 37
11544: PPUSH
11545: CALL 911 0 1
11549: AND
11550: PUSH
11551: LD_EXP 16
11555: NOT
11556: AND
11557: IFFALSE 11628
11559: GO 11561
11561: DISABLE
11562: LD_INT 0
11564: PPUSH
// begin jmm_in_veh := true ;
11565: LD_ADDR_EXP 16
11569: PUSH
11570: LD_INT 1
11572: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11573: LD_ADDR_VAR 0 1
11577: PUSH
11578: LD_INT 0
11580: PPUSH
11581: LD_INT 1
11583: PPUSH
11584: CALL_OW 12
11588: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11589: LD_INT 70
11591: PPUSH
11592: CALL_OW 67
// if i then
11596: LD_VAR 0 1
11600: IFFALSE 11616
// Say ( JMM , D2c-JMM-1 ) else
11602: LD_EXP 37
11606: PPUSH
11607: LD_STRING D2c-JMM-1
11609: PPUSH
11610: CALL_OW 88
11614: GO 11628
// Say ( JMM , D2c-JMM-1a ) ;
11616: LD_EXP 37
11620: PPUSH
11621: LD_STRING D2c-JMM-1a
11623: PPUSH
11624: CALL_OW 88
// end ;
11628: PPOPN 1
11630: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11631: LD_EXP 14
11635: PUSH
11636: LD_EXP 38
11640: PPUSH
11641: CALL_OW 302
11645: AND
11646: PUSH
11647: LD_EXP 38
11651: PPUSH
11652: CALL 911 0 1
11656: AND
11657: PUSH
11658: LD_EXP 17
11662: NOT
11663: AND
11664: IFFALSE 11696
11666: GO 11668
11668: DISABLE
// begin bobby_in_veh := true ;
11669: LD_ADDR_EXP 17
11673: PUSH
11674: LD_INT 1
11676: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11677: LD_INT 70
11679: PPUSH
11680: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11684: LD_EXP 38
11688: PPUSH
11689: LD_STRING D2c-Bobby-1
11691: PPUSH
11692: CALL_OW 88
11696: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11697: LD_EXP 14
11701: PUSH
11702: LD_EXP 40
11706: PPUSH
11707: CALL_OW 302
11711: AND
11712: PUSH
11713: LD_EXP 40
11717: PPUSH
11718: CALL 911 0 1
11722: AND
11723: PUSH
11724: LD_EXP 19
11728: NOT
11729: AND
11730: IFFALSE 11762
11732: GO 11734
11734: DISABLE
// begin lisa_in_veh := true ;
11735: LD_ADDR_EXP 19
11739: PUSH
11740: LD_INT 1
11742: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11743: LD_INT 70
11745: PPUSH
11746: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11750: LD_EXP 40
11754: PPUSH
11755: LD_STRING D2c-Lisa-1
11757: PPUSH
11758: CALL_OW 88
11762: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11763: LD_EXP 14
11767: PUSH
11768: LD_EXP 39
11772: PPUSH
11773: CALL_OW 302
11777: AND
11778: PUSH
11779: LD_EXP 39
11783: PPUSH
11784: CALL 911 0 1
11788: AND
11789: PUSH
11790: LD_EXP 18
11794: NOT
11795: AND
11796: IFFALSE 11867
11798: GO 11800
11800: DISABLE
11801: LD_INT 0
11803: PPUSH
// begin cyrus_in_veh := true ;
11804: LD_ADDR_EXP 18
11808: PUSH
11809: LD_INT 1
11811: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11812: LD_ADDR_VAR 0 1
11816: PUSH
11817: LD_INT 0
11819: PPUSH
11820: LD_INT 1
11822: PPUSH
11823: CALL_OW 12
11827: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11828: LD_INT 70
11830: PPUSH
11831: CALL_OW 67
// if i then
11835: LD_VAR 0 1
11839: IFFALSE 11855
// Say ( Cyrus , D2c-Cyrus-1 ) else
11841: LD_EXP 39
11845: PPUSH
11846: LD_STRING D2c-Cyrus-1
11848: PPUSH
11849: CALL_OW 88
11853: GO 11867
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11855: LD_EXP 39
11859: PPUSH
11860: LD_STRING D2c-Cyrus-1a
11862: PPUSH
11863: CALL_OW 88
// end ;
11867: PPOPN 1
11869: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11870: LD_EXP 44
11874: PPUSH
11875: LD_INT 16
11877: PPUSH
11878: CALL_OW 308
11882: IFFALSE 12163
11884: GO 11886
11886: DISABLE
11887: LD_INT 0
11889: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11890: LD_INT 3
11892: PPUSH
11893: LD_EXP 44
11897: PPUSH
11898: CALL_OW 471
// send_attack_on_cornel := true ;
11902: LD_ADDR_EXP 32
11906: PUSH
11907: LD_INT 1
11909: ST_TO_ADDR
// if ru_vehicles then
11910: LD_EXP 56
11914: IFFALSE 11948
// for i in ru_vehicles do
11916: LD_ADDR_VAR 0 1
11920: PUSH
11921: LD_EXP 56
11925: PUSH
11926: FOR_IN
11927: IFFALSE 11946
// ComAgressiveMove ( i , 215 , 69 ) ;
11929: LD_VAR 0 1
11933: PPUSH
11934: LD_INT 215
11936: PPUSH
11937: LD_INT 69
11939: PPUSH
11940: CALL_OW 114
11944: GO 11926
11946: POP
11947: POP
// if ru_patrol then
11948: LD_EXP 53
11952: IFFALSE 11986
// for i in ru_patrol do
11954: LD_ADDR_VAR 0 1
11958: PUSH
11959: LD_EXP 53
11963: PUSH
11964: FOR_IN
11965: IFFALSE 11984
// ComAgressiveMove ( i , 215 , 69 ) ;
11967: LD_VAR 0 1
11971: PPUSH
11972: LD_INT 215
11974: PPUSH
11975: LD_INT 69
11977: PPUSH
11978: CALL_OW 114
11982: GO 11964
11984: POP
11985: POP
// if frank_send_to_scout then
11986: LD_EXP 15
11990: IFFALSE 12004
// SayRadio ( Frank , D3b-Frank-1 ) ;
11992: LD_EXP 51
11996: PPUSH
11997: LD_STRING D3b-Frank-1
11999: PPUSH
12000: CALL_OW 94
// wait ( 0 0$03 ) ;
12004: LD_INT 105
12006: PPUSH
12007: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
12011: LD_EXP 44
12015: PPUSH
12016: LD_STRING D4-Corn-1
12018: PPUSH
12019: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
12023: LD_INT 35
12025: PPUSH
12026: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
12030: LD_INT 22
12032: PUSH
12033: LD_INT 4
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 21
12042: PUSH
12043: LD_INT 1
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: LD_INT 3
12052: PUSH
12053: LD_INT 24
12055: PUSH
12056: LD_INT 1000
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: LIST
12071: PPUSH
12072: CALL_OW 69
12076: PUSH
12077: LD_INT 6
12079: LESS
12080: IFFALSE 12023
// if Cornel then
12082: LD_EXP 44
12086: IFFALSE 12126
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
12088: LD_EXP 44
12092: PPUSH
12093: LD_STRING D5-Corn-1
12095: PPUSH
12096: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
12100: LD_EXP 44
12104: PPUSH
12105: LD_EXP 2
12109: PUSH
12110: LD_STRING Cornel
12112: STR
12113: PPUSH
12114: CALL_OW 38
// cornel_saved := true ;
12118: LD_ADDR_EXP 27
12122: PUSH
12123: LD_INT 1
12125: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
12126: LD_INT 4
12128: PPUSH
12129: LD_INT 8
12131: PPUSH
12132: CALL_OW 343
// wait ( 0 0$01 ) ;
12136: LD_INT 35
12138: PPUSH
12139: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
12143: LD_INT 3
12145: PPUSH
12146: LD_EXP 44
12150: PPUSH
12151: CALL_OW 472
// send_attack_on_cornel := false ;
12155: LD_ADDR_EXP 32
12159: PUSH
12160: LD_INT 0
12162: ST_TO_ADDR
// end ;
12163: PPOPN 1
12165: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
12166: LD_INT 9
12168: PPUSH
12169: LD_INT 22
12171: PUSH
12172: LD_INT 1
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: PPUSH
12179: CALL_OW 70
12183: PUSH
12184: LD_EXP 33
12188: OR
12189: IFFALSE 12410
12191: GO 12193
12193: DISABLE
12194: LD_INT 0
12196: PPUSH
12197: PPUSH
// begin enable ;
12198: ENABLE
// if not jmm_on_west then
12199: LD_EXP 5
12203: NOT
12204: IFFALSE 12215
// begin YouLost ( 4 ) ;
12206: LD_STRING 4
12208: PPUSH
12209: CALL_OW 104
// exit ;
12213: GO 12410
// end ; if not game_end then
12215: LD_EXP 33
12219: NOT
12220: IFFALSE 12230
// game_end := true ;
12222: LD_ADDR_EXP 33
12226: PUSH
12227: LD_INT 1
12229: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
12230: LD_ADDR_VAR 0 2
12234: PUSH
12235: LD_INT 9
12237: PPUSH
12238: LD_INT 22
12240: PUSH
12241: LD_INT 1
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: PPUSH
12248: CALL_OW 70
12252: ST_TO_ADDR
// if not filter then
12253: LD_VAR 0 2
12257: NOT
12258: IFFALSE 12262
// exit ;
12260: GO 12410
// for i in filter do
12262: LD_ADDR_VAR 0 1
12266: PUSH
12267: LD_VAR 0 2
12271: PUSH
12272: FOR_IN
12273: IFFALSE 12408
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
12275: LD_VAR 0 1
12279: PPUSH
12280: CALL_OW 302
12284: PUSH
12285: LD_VAR 0 1
12289: PPUSH
12290: CALL_OW 247
12294: PUSH
12295: LD_INT 2
12297: EQUAL
12298: AND
12299: IFFALSE 12371
// begin if i = JMM and save_group < 4 then
12301: LD_VAR 0 1
12305: PUSH
12306: LD_EXP 37
12310: EQUAL
12311: PUSH
12312: LD_EXP 23
12316: PUSH
12317: LD_INT 4
12319: LESS
12320: AND
12321: IFFALSE 12325
// continue ;
12323: GO 12272
// if GetNation ( i ) = nation_american then
12325: LD_VAR 0 1
12329: PPUSH
12330: CALL_OW 248
12334: PUSH
12335: LD_INT 1
12337: EQUAL
12338: IFFALSE 12348
// veh_on_meta := true ;
12340: LD_ADDR_EXP 28
12344: PUSH
12345: LD_INT 1
12347: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
12348: LD_VAR 0 1
12352: PPUSH
12353: CALL_OW 311
12357: PPUSH
12358: CALL 12413 0 1
// RemoveUnit ( i ) ;
12362: LD_VAR 0 1
12366: PPUSH
12367: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
12371: LD_VAR 0 1
12375: PPUSH
12376: CALL_OW 302
12380: PUSH
12381: LD_VAR 0 1
12385: PPUSH
12386: CALL_OW 247
12390: PUSH
12391: LD_INT 1
12393: EQUAL
12394: AND
12395: IFFALSE 12406
// Save ( i ) ;
12397: LD_VAR 0 1
12401: PPUSH
12402: CALL 12413 0 1
// end ;
12406: GO 12272
12408: POP
12409: POP
// end ;
12410: PPOPN 2
12412: END
// export function Save ( i ) ; begin
12413: LD_INT 0
12415: PPUSH
// if i = JMM and save_counter >= 4 then
12416: LD_VAR 0 1
12420: PUSH
12421: LD_EXP 37
12425: EQUAL
12426: PUSH
12427: LD_EXP 36
12431: PUSH
12432: LD_INT 4
12434: GREATEREQUAL
12435: AND
12436: IFFALSE 12572
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12438: LD_EXP 24
12442: PUSH
12443: LD_INT 22
12445: PUSH
12446: LD_INT 1
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 21
12455: PUSH
12456: LD_INT 1
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PPUSH
12467: CALL_OW 69
12471: PUSH
12472: LD_INT 1
12474: GREATER
12475: AND
12476: IFFALSE 12533
// begin show_query := false ;
12478: LD_ADDR_EXP 24
12482: PUSH
12483: LD_INT 0
12485: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12486: LD_STRING Q2
12488: PPUSH
12489: CALL_OW 97
12493: PUSH
12494: LD_INT 1
12496: DOUBLE
12497: EQUAL
12498: IFTRUE 12502
12500: GO 12513
12502: POP
// wait_for_them := true ; 2 :
12503: LD_ADDR_EXP 25
12507: PUSH
12508: LD_INT 1
12510: ST_TO_ADDR
12511: GO 12533
12513: LD_INT 2
12515: DOUBLE
12516: EQUAL
12517: IFTRUE 12521
12519: GO 12532
12521: POP
// wait_for_them := false ; end ;
12522: LD_ADDR_EXP 25
12526: PUSH
12527: LD_INT 0
12529: ST_TO_ADDR
12530: GO 12533
12532: POP
// end ; save_counter := save_counter + 1 ;
12533: LD_ADDR_EXP 36
12537: PUSH
12538: LD_EXP 36
12542: PUSH
12543: LD_INT 1
12545: PLUS
12546: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12547: LD_ADDR_EXP 23
12551: PUSH
12552: LD_EXP 23
12556: PUSH
12557: LD_EXP 37
12561: ADD
12562: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12563: LD_EXP 37
12567: PPUSH
12568: CALL_OW 64
// end ; if i = Lisa then
12572: LD_VAR 0 1
12576: PUSH
12577: LD_EXP 40
12581: EQUAL
12582: IFFALSE 12623
// begin save_counter := save_counter + 1 ;
12584: LD_ADDR_EXP 36
12588: PUSH
12589: LD_EXP 36
12593: PUSH
12594: LD_INT 1
12596: PLUS
12597: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12598: LD_ADDR_EXP 23
12602: PUSH
12603: LD_EXP 23
12607: PUSH
12608: LD_EXP 40
12612: ADD
12613: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12614: LD_EXP 40
12618: PPUSH
12619: CALL_OW 64
// end ; if i = Bobby then
12623: LD_VAR 0 1
12627: PUSH
12628: LD_EXP 38
12632: EQUAL
12633: IFFALSE 12674
// begin save_counter := save_counter + 1 ;
12635: LD_ADDR_EXP 36
12639: PUSH
12640: LD_EXP 36
12644: PUSH
12645: LD_INT 1
12647: PLUS
12648: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12649: LD_ADDR_EXP 23
12653: PUSH
12654: LD_EXP 23
12658: PUSH
12659: LD_EXP 38
12663: ADD
12664: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12665: LD_EXP 38
12669: PPUSH
12670: CALL_OW 64
// end ; if i = Cyrus then
12674: LD_VAR 0 1
12678: PUSH
12679: LD_EXP 39
12683: EQUAL
12684: IFFALSE 12725
// begin save_counter := save_counter + 1 ;
12686: LD_ADDR_EXP 36
12690: PUSH
12691: LD_EXP 36
12695: PUSH
12696: LD_INT 1
12698: PLUS
12699: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12700: LD_ADDR_EXP 23
12704: PUSH
12705: LD_EXP 23
12709: PUSH
12710: LD_EXP 39
12714: ADD
12715: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12716: LD_EXP 39
12720: PPUSH
12721: CALL_OW 64
// end ; if i = Khatam then
12725: LD_VAR 0 1
12729: PUSH
12730: LD_EXP 41
12734: EQUAL
12735: IFFALSE 12776
// begin save_counter := save_counter + 1 ;
12737: LD_ADDR_EXP 36
12741: PUSH
12742: LD_EXP 36
12746: PUSH
12747: LD_INT 1
12749: PLUS
12750: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12751: LD_ADDR_EXP 23
12755: PUSH
12756: LD_EXP 23
12760: PUSH
12761: LD_EXP 41
12765: ADD
12766: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12767: LD_EXP 41
12771: PPUSH
12772: CALL_OW 64
// end ; if i = Frank then
12776: LD_VAR 0 1
12780: PUSH
12781: LD_EXP 51
12785: EQUAL
12786: IFFALSE 12827
// begin save_counter := save_counter + 1 ;
12788: LD_ADDR_EXP 36
12792: PUSH
12793: LD_EXP 36
12797: PUSH
12798: LD_INT 1
12800: PLUS
12801: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12802: LD_ADDR_EXP 23
12806: PUSH
12807: LD_EXP 23
12811: PUSH
12812: LD_EXP 51
12816: ADD
12817: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12818: LD_EXP 51
12822: PPUSH
12823: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12827: LD_VAR 0 1
12831: PUSH
12832: LD_EXP 37
12836: NONEQUAL
12837: PUSH
12838: LD_VAR 0 1
12842: PPUSH
12843: CALL_OW 302
12847: AND
12848: PUSH
12849: LD_VAR 0 1
12853: PPUSH
12854: CALL_OW 247
12858: PUSH
12859: LD_INT 1
12861: EQUAL
12862: AND
12863: PUSH
12864: LD_VAR 0 1
12868: PUSH
12869: LD_EXP 23
12873: IN
12874: NOT
12875: AND
12876: IFFALSE 12917
// begin save_counter := save_counter + 1 ;
12878: LD_ADDR_EXP 36
12882: PUSH
12883: LD_EXP 36
12887: PUSH
12888: LD_INT 1
12890: PLUS
12891: ST_TO_ADDR
// save_others := save_others ^ i ;
12892: LD_ADDR_EXP 22
12896: PUSH
12897: LD_EXP 22
12901: PUSH
12902: LD_VAR 0 1
12906: ADD
12907: ST_TO_ADDR
// RemoveUnit ( i ) ;
12908: LD_VAR 0 1
12912: PPUSH
12913: CALL_OW 64
// end ; end ;
12917: LD_VAR 0 2
12921: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12922: LD_EXP 24
12926: NOT
12927: PUSH
12928: LD_EXP 25
12932: NOT
12933: AND
12934: PUSH
12935: LD_INT 22
12937: PUSH
12938: LD_INT 1
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: LD_INT 21
12947: PUSH
12948: LD_INT 1
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PPUSH
12959: CALL_OW 69
12963: PUSH
12964: LD_INT 0
12966: EQUAL
12967: OR
12968: IFFALSE 12977
12970: GO 12972
12972: DISABLE
// EndMission ;
12973: CALL 12978 0 0
12977: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12978: LD_INT 0
12980: PPUSH
12981: PPUSH
12982: PPUSH
12983: PPUSH
12984: PPUSH
// wait ( 0 0$01 ) ;
12985: LD_INT 35
12987: PPUSH
12988: CALL_OW 67
// if tick <= 12 12$00 then
12992: LD_OWVAR 1
12996: PUSH
12997: LD_INT 25200
12999: LESSEQUAL
13000: IFFALSE 13009
// SetAchievement ( ACH_ASPEED_3 ) ;
13002: LD_STRING ACH_ASPEED_3
13004: PPUSH
13005: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
13009: LD_EXP 23
13013: PUSH
13014: LD_EXP 22
13018: ADD
13019: PPUSH
13020: LD_INT 25
13022: PUSH
13023: LD_INT 4
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PPUSH
13030: CALL_OW 72
13034: PUSH
13035: LD_INT 0
13037: EQUAL
13038: IFFALSE 13054
// begin wait ( 3 ) ;
13040: LD_INT 3
13042: PPUSH
13043: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
13047: LD_STRING ACH_NOSCI
13049: PPUSH
13050: CALL_OW 543
// end ; m1 := solar_builded ;
13054: LD_ADDR_VAR 0 3
13058: PUSH
13059: LD_EXP 14
13063: ST_TO_ADDR
// m2 := veh_on_meta ;
13064: LD_ADDR_VAR 0 4
13068: PUSH
13069: LD_EXP 28
13073: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
13074: LD_ADDR_VAR 0 5
13078: PUSH
13079: LD_EXP 34
13083: PUSH
13084: LD_INT 0
13086: EQUAL
13087: ST_TO_ADDR
// if solar_builded then
13088: LD_EXP 14
13092: IFFALSE 13106
// AddMedal ( Solar1 , 1 ) else
13094: LD_STRING Solar1
13096: PPUSH
13097: LD_INT 1
13099: PPUSH
13100: CALL_OW 101
13104: GO 13117
// AddMedal ( Solar1 , - 1 ) ;
13106: LD_STRING Solar1
13108: PPUSH
13109: LD_INT 1
13111: NEG
13112: PPUSH
13113: CALL_OW 101
// if veh_on_meta then
13117: LD_EXP 28
13121: IFFALSE 13135
// AddMedal ( Solar2 , 1 ) else
13123: LD_STRING Solar2
13125: PPUSH
13126: LD_INT 1
13128: PPUSH
13129: CALL_OW 101
13133: GO 13165
// if solar_builded then
13135: LD_EXP 14
13139: IFFALSE 13154
// AddMedal ( Solar2 , - 1 ) else
13141: LD_STRING Solar2
13143: PPUSH
13144: LD_INT 1
13146: NEG
13147: PPUSH
13148: CALL_OW 101
13152: GO 13165
// AddMedal ( Solar2 , - 2 ) ;
13154: LD_STRING Solar2
13156: PPUSH
13157: LD_INT 2
13159: NEG
13160: PPUSH
13161: CALL_OW 101
// if lose_counter = 0 then
13165: LD_EXP 34
13169: PUSH
13170: LD_INT 0
13172: EQUAL
13173: IFFALSE 13187
// AddMedal ( No , 1 ) else
13175: LD_STRING No
13177: PPUSH
13178: LD_INT 1
13180: PPUSH
13181: CALL_OW 101
13185: GO 13231
// if lose_counter > 0 and lose_counter < 4 then
13187: LD_EXP 34
13191: PUSH
13192: LD_INT 0
13194: GREATER
13195: PUSH
13196: LD_EXP 34
13200: PUSH
13201: LD_INT 4
13203: LESS
13204: AND
13205: IFFALSE 13220
// AddMedal ( No , - 1 ) else
13207: LD_STRING No
13209: PPUSH
13210: LD_INT 1
13212: NEG
13213: PPUSH
13214: CALL_OW 101
13218: GO 13231
// AddMedal ( UpTo4 , - 1 ) ;
13220: LD_STRING UpTo4
13222: PPUSH
13223: LD_INT 1
13225: NEG
13226: PPUSH
13227: CALL_OW 101
// GiveMedals ( MAIN ) ;
13231: LD_STRING MAIN
13233: PPUSH
13234: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
13238: LD_OWVAR 67
13242: PUSH
13243: LD_INT 3
13245: GREATEREQUAL
13246: PUSH
13247: LD_VAR 0 3
13251: AND
13252: PUSH
13253: LD_VAR 0 4
13257: AND
13258: PUSH
13259: LD_VAR 0 5
13263: AND
13264: IFFALSE 13276
// SetAchievementEX ( ACH_AMER , 3 ) ;
13266: LD_STRING ACH_AMER
13268: PPUSH
13269: LD_INT 3
13271: PPUSH
13272: CALL_OW 564
// if IsDead ( Pokryshkin ) then
13276: LD_EXP 52
13280: PPUSH
13281: CALL_OW 301
13285: IFFALSE 13341
// begin stop_talking := true ;
13287: LD_ADDR_OWVAR 56
13291: PUSH
13292: LD_INT 1
13294: ST_TO_ADDR
// for i in save_group union save_others do
13295: LD_ADDR_VAR 0 2
13299: PUSH
13300: LD_EXP 23
13304: PUSH
13305: LD_EXP 22
13309: UNION
13310: PUSH
13311: FOR_IN
13312: IFFALSE 13331
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
13314: LD_VAR 0 2
13318: PPUSH
13319: LD_INT 1
13321: PPUSH
13322: LD_INT 1500
13324: PPUSH
13325: CALL_OW 591
13329: GO 13311
13331: POP
13332: POP
// stop_talking := false ;
13333: LD_ADDR_OWVAR 56
13337: PUSH
13338: LD_INT 0
13340: ST_TO_ADDR
// end ; RewardPeople ( save_group ^ save_others ) ;
13341: LD_EXP 23
13345: PUSH
13346: LD_EXP 22
13350: ADD
13351: PPUSH
13352: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
13356: LD_EXP 37
13360: PPUSH
13361: LD_EXP 2
13365: PUSH
13366: LD_STRING JMM
13368: STR
13369: PPUSH
13370: CALL_OW 38
// if Bobby in save_group then
13374: LD_EXP 38
13378: PUSH
13379: LD_EXP 23
13383: IN
13384: IFFALSE 13404
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
13386: LD_EXP 38
13390: PPUSH
13391: LD_EXP 2
13395: PUSH
13396: LD_STRING Bobby
13398: STR
13399: PPUSH
13400: CALL_OW 38
// if Cyrus in save_group then
13404: LD_EXP 39
13408: PUSH
13409: LD_EXP 23
13413: IN
13414: IFFALSE 13434
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
13416: LD_EXP 39
13420: PPUSH
13421: LD_EXP 2
13425: PUSH
13426: LD_STRING Cyrus
13428: STR
13429: PPUSH
13430: CALL_OW 38
// if Lisa in save_group then
13434: LD_EXP 40
13438: PUSH
13439: LD_EXP 23
13443: IN
13444: IFFALSE 13464
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13446: LD_EXP 40
13450: PPUSH
13451: LD_EXP 2
13455: PUSH
13456: LD_STRING Lisa
13458: STR
13459: PPUSH
13460: CALL_OW 38
// if Frank in save_group then
13464: LD_EXP 51
13468: PUSH
13469: LD_EXP 23
13473: IN
13474: IFFALSE 13494
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13476: LD_EXP 51
13480: PPUSH
13481: LD_EXP 2
13485: PUSH
13486: LD_STRING Frank
13488: STR
13489: PPUSH
13490: CALL_OW 38
// if Khatam in save_group then
13494: LD_EXP 41
13498: PUSH
13499: LD_EXP 23
13503: IN
13504: IFFALSE 13524
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13506: LD_EXP 41
13510: PPUSH
13511: LD_EXP 2
13515: PUSH
13516: LD_STRING Khatam
13518: STR
13519: PPUSH
13520: CALL_OW 38
// if save_others then
13524: LD_EXP 22
13528: IFFALSE 13542
// SaveCharacters ( save_others , 03_others ) ;
13530: LD_EXP 22
13534: PPUSH
13535: LD_STRING 03_others
13537: PPUSH
13538: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13542: LD_EXP 45
13546: PUSH
13547: LD_EXP 45
13551: PPUSH
13552: CALL_OW 302
13556: AND
13557: PUSH
13558: LD_EXP 27
13562: AND
13563: IFFALSE 13575
// begin ResetFog ;
13565: CALL_OW 335
// DisplayEndingScene ;
13569: CALL 13597 0 0
// end else
13573: GO 13588
// DeleteCharacters ( mission_prefix & Cornel ) ;
13575: LD_EXP 2
13579: PUSH
13580: LD_STRING Cornel
13582: STR
13583: PPUSH
13584: CALL_OW 40
// YouWin ;
13588: CALL_OW 103
// end ;
13592: LD_VAR 0 1
13596: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13597: LD_INT 0
13599: PPUSH
13600: PPUSH
13601: PPUSH
13602: PPUSH
13603: PPUSH
13604: PPUSH
// InGameOn ;
13605: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13609: LD_INT 208
13611: PPUSH
13612: LD_INT 62
13614: PPUSH
13615: LD_INT 1
13617: PPUSH
13618: LD_INT 10
13620: NEG
13621: PPUSH
13622: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13626: LD_INT 208
13628: PPUSH
13629: LD_INT 62
13631: PPUSH
13632: LD_INT 1
13634: PPUSH
13635: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13639: LD_ADDR_VAR 0 3
13643: PUSH
13644: LD_INT 22
13646: PUSH
13647: LD_INT 3
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PUSH
13654: LD_INT 2
13656: PUSH
13657: LD_INT 21
13659: PUSH
13660: LD_INT 2
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PUSH
13667: LD_INT 21
13669: PUSH
13670: LD_INT 1
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: LIST
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PPUSH
13686: CALL_OW 69
13690: ST_TO_ADDR
// if filter then
13691: LD_VAR 0 3
13695: IFFALSE 13723
// for i in filter do
13697: LD_ADDR_VAR 0 2
13701: PUSH
13702: LD_VAR 0 3
13706: PUSH
13707: FOR_IN
13708: IFFALSE 13721
// RemoveUnit ( i ) ;
13710: LD_VAR 0 2
13714: PPUSH
13715: CALL_OW 64
13719: GO 13707
13721: POP
13722: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13723: LD_ADDR_VAR 0 3
13727: PUSH
13728: LD_INT 22
13730: PUSH
13731: LD_INT 4
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 21
13740: PUSH
13741: LD_INT 1
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PPUSH
13752: CALL_OW 69
13756: ST_TO_ADDR
// if filter then
13757: LD_VAR 0 3
13761: IFFALSE 13792
// for i in filter do
13763: LD_ADDR_VAR 0 2
13767: PUSH
13768: LD_VAR 0 3
13772: PUSH
13773: FOR_IN
13774: IFFALSE 13790
// SetLives ( i , 0 ) ;
13776: LD_VAR 0 2
13780: PPUSH
13781: LD_INT 0
13783: PPUSH
13784: CALL_OW 234
13788: GO 13773
13790: POP
13791: POP
// uc_side := 4 ;
13792: LD_ADDR_OWVAR 20
13796: PUSH
13797: LD_INT 4
13799: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13800: LD_ADDR_VAR 0 4
13804: PUSH
13805: LD_STRING Cornell
13807: PPUSH
13808: LD_INT 0
13810: PPUSH
13811: LD_STRING 
13813: PPUSH
13814: CALL 39085 0 3
13818: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13819: LD_VAR 0 4
13823: PPUSH
13824: LD_INT 208
13826: PPUSH
13827: LD_INT 62
13829: PPUSH
13830: LD_INT 0
13832: PPUSH
13833: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13837: LD_VAR 0 4
13841: PPUSH
13842: LD_INT 100
13844: PPUSH
13845: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13849: LD_INT 3
13851: PPUSH
13852: LD_VAR 0 4
13856: PPUSH
13857: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13861: LD_INT 4
13863: PPUSH
13864: LD_INT 3
13866: PPUSH
13867: LD_INT 1
13869: PPUSH
13870: LD_INT 1
13872: PPUSH
13873: CALL_OW 80
// uc_side := 3 ;
13877: LD_ADDR_OWVAR 20
13881: PUSH
13882: LD_INT 3
13884: ST_TO_ADDR
// uc_nation := 3 ;
13885: LD_ADDR_OWVAR 21
13889: PUSH
13890: LD_INT 3
13892: ST_TO_ADDR
// InitHc ;
13893: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13897: LD_ADDR_VAR 0 5
13901: PUSH
13902: LD_STRING Mikhail
13904: PPUSH
13905: LD_INT 0
13907: PPUSH
13908: LD_STRING 
13910: PPUSH
13911: CALL 39085 0 3
13915: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13916: LD_INT 1
13918: PPUSH
13919: LD_INT 1
13921: PPUSH
13922: LD_INT 0
13924: PPUSH
13925: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13929: LD_ADDR_VAR 0 6
13933: PUSH
13934: LD_VAR 0 6
13938: PUSH
13939: CALL_OW 44
13943: ADD
13944: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13945: LD_ADDR_VAR 0 6
13949: PUSH
13950: LD_VAR 0 6
13954: PUSH
13955: CALL_OW 44
13959: ADD
13960: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13961: LD_INT 2
13963: PPUSH
13964: LD_INT 4
13966: PPUSH
13967: LD_INT 0
13969: PPUSH
13970: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13974: LD_ADDR_VAR 0 6
13978: PUSH
13979: LD_VAR 0 6
13983: PUSH
13984: CALL_OW 44
13988: ADD
13989: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13990: LD_VAR 0 5
13994: PPUSH
13995: LD_INT 17
13997: PPUSH
13998: LD_INT 0
14000: PPUSH
14001: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
14005: LD_VAR 0 5
14009: PPUSH
14010: LD_INT 210
14012: PPUSH
14013: LD_INT 63
14015: PPUSH
14016: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
14020: LD_VAR 0 5
14024: PPUSH
14025: LD_INT 208
14027: PPUSH
14028: LD_INT 62
14030: PPUSH
14031: CALL_OW 178
// for i in fake_russians do
14035: LD_ADDR_VAR 0 2
14039: PUSH
14040: LD_VAR 0 6
14044: PUSH
14045: FOR_IN
14046: IFFALSE 14124
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
14048: LD_VAR 0 2
14052: PPUSH
14053: LD_INT 17
14055: PPUSH
14056: LD_INT 0
14058: PPUSH
14059: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
14063: LD_VAR 0 2
14067: PPUSH
14068: LD_INT 215
14070: PPUSH
14071: LD_INT 67
14073: PPUSH
14074: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
14078: LD_VAR 0 2
14082: PPUSH
14083: LD_INT 208
14085: PPUSH
14086: LD_INT 62
14088: PPUSH
14089: CALL_OW 178
// if GetClass ( i ) = 4 then
14093: LD_VAR 0 2
14097: PPUSH
14098: CALL_OW 257
14102: PUSH
14103: LD_INT 4
14105: EQUAL
14106: IFFALSE 14122
// ComHeal ( i , fake_cornel ) ;
14108: LD_VAR 0 2
14112: PPUSH
14113: LD_VAR 0 4
14117: PPUSH
14118: CALL_OW 128
// end ;
14122: GO 14045
14124: POP
14125: POP
// Wait ( 0 0$01 ) ;
14126: LD_INT 35
14128: PPUSH
14129: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
14133: LD_INT 208
14135: PPUSH
14136: LD_INT 62
14138: PPUSH
14139: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
14143: LD_INT 208
14145: PPUSH
14146: LD_INT 62
14148: PPUSH
14149: LD_INT 1
14151: PPUSH
14152: LD_INT 10
14154: NEG
14155: PPUSH
14156: CALL_OW 330
// Wait ( 0 0$15 ) ;
14160: LD_INT 525
14162: PPUSH
14163: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
14167: LD_INT 208
14169: PPUSH
14170: LD_INT 62
14172: PPUSH
14173: LD_INT 1
14175: PPUSH
14176: CALL_OW 331
// ResetFog ;
14180: CALL_OW 335
// InGameOff ;
14184: CALL_OW 9
// end ;
14188: LD_VAR 0 1
14192: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
14193: LD_INT 10
14195: PPUSH
14196: LD_INT 22
14198: PUSH
14199: LD_INT 1
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PPUSH
14206: CALL_OW 70
14210: PUSH
14211: LD_EXP 44
14215: PPUSH
14216: CALL_OW 302
14220: AND
14221: PUSH
14222: LD_INT 22
14224: PUSH
14225: LD_INT 1
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: PPUSH
14232: CALL_OW 69
14236: PPUSH
14237: LD_EXP 44
14241: PPUSH
14242: CALL_OW 74
14246: PPUSH
14247: LD_EXP 44
14251: PPUSH
14252: CALL_OW 296
14256: PUSH
14257: LD_INT 30
14259: LESS
14260: OR
14261: IFFALSE 14312
14263: GO 14265
14265: DISABLE
// begin enable ;
14266: ENABLE
// powell_warn := powell_warn + 1 ;
14267: LD_ADDR_EXP 35
14271: PUSH
14272: LD_EXP 35
14276: PUSH
14277: LD_INT 1
14279: PLUS
14280: ST_TO_ADDR
// if powell_warn = 3 then
14281: LD_EXP 35
14285: PUSH
14286: LD_INT 3
14288: EQUAL
14289: IFFALSE 14300
// begin YouLost ( 5 ) ;
14291: LD_STRING 5
14293: PPUSH
14294: CALL_OW 104
// exit ;
14298: GO 14312
// end ; SayRadio ( Powell , DWarn-Pow-1 ) ;
14300: LD_EXP 46
14304: PPUSH
14305: LD_STRING DWarn-Pow-1
14307: PPUSH
14308: CALL_OW 94
// end ; end_of_file
14312: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
14313: LD_EXP 8
14317: IFFALSE 16154
14319: GO 14321
14321: DISABLE
14322: LD_INT 0
14324: PPUSH
14325: PPUSH
14326: PPUSH
14327: PPUSH
14328: PPUSH
14329: PPUSH
14330: PPUSH
14331: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
14332: LD_EXP 44
14336: PUSH
14337: LD_EXP 45
14341: ADD
14342: PUSH
14343: LD_EXP 6
14347: ADD
14348: PPUSH
14349: LD_INT 250
14351: PPUSH
14352: LD_INT 120
14354: PPUSH
14355: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
14359: LD_ADDR_VAR 0 2
14363: PUSH
14364: LD_EXP 6
14368: PPUSH
14369: LD_INT 25
14371: PUSH
14372: LD_INT 2
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PPUSH
14379: CALL_OW 72
14383: PUSH
14384: LD_EXP 45
14388: DIFF
14389: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
14390: LD_ADDR_VAR 0 3
14394: PUSH
14395: LD_EXP 6
14399: PPUSH
14400: LD_INT 21
14402: PUSH
14403: LD_INT 1
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PPUSH
14410: CALL_OW 72
14414: PUSH
14415: LD_VAR 0 2
14419: DIFF
14420: ST_TO_ADDR
// if not has_eng then
14421: LD_VAR 0 2
14425: NOT
14426: IFFALSE 14509
// begin uc_side := 4 ;
14428: LD_ADDR_OWVAR 20
14432: PUSH
14433: LD_INT 4
14435: ST_TO_ADDR
// uc_nation := 1 ;
14436: LD_ADDR_OWVAR 21
14440: PUSH
14441: LD_INT 1
14443: ST_TO_ADDR
// bc_type := b_depot ;
14444: LD_ADDR_OWVAR 42
14448: PUSH
14449: LD_INT 0
14451: ST_TO_ADDR
// bc_level := 2 ;
14452: LD_ADDR_OWVAR 43
14456: PUSH
14457: LD_INT 2
14459: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14460: LD_ADDR_VAR 0 4
14464: PUSH
14465: LD_INT 264
14467: PPUSH
14468: LD_INT 120
14470: PPUSH
14471: LD_INT 4
14473: PPUSH
14474: CALL_OW 47
14478: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14479: LD_INT 264
14481: PPUSH
14482: LD_INT 120
14484: PPUSH
14485: LD_INT 4
14487: PPUSH
14488: LD_INT 10
14490: NEG
14491: PPUSH
14492: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14496: LD_INT 264
14498: PPUSH
14499: LD_INT 120
14501: PPUSH
14502: LD_INT 4
14504: PPUSH
14505: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14509: LD_INT 35
14511: PPUSH
14512: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14516: LD_EXP 44
14520: PPUSH
14521: LD_INT 10
14523: PPUSH
14524: CALL_OW 308
14528: PUSH
14529: LD_EXP 44
14533: PPUSH
14534: CALL_OW 310
14538: PPUSH
14539: LD_INT 10
14541: PPUSH
14542: CALL_OW 308
14546: OR
14547: IFFALSE 14509
// if has_eng and not dep then
14549: LD_VAR 0 2
14553: PUSH
14554: LD_VAR 0 4
14558: NOT
14559: AND
14560: IFFALSE 14710
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14562: LD_VAR 0 2
14566: PPUSH
14567: LD_INT 0
14569: PPUSH
14570: LD_INT 264
14572: PPUSH
14573: LD_INT 120
14575: PPUSH
14576: LD_INT 4
14578: PPUSH
14579: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14583: LD_INT 35
14585: PPUSH
14586: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14590: LD_INT 22
14592: PUSH
14593: LD_INT 4
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PUSH
14600: LD_INT 30
14602: PUSH
14603: LD_INT 0
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PPUSH
14614: CALL_OW 69
14618: IFFALSE 14583
// ComMoveXY ( filter , 264 , 120 ) ;
14620: LD_VAR 0 3
14624: PPUSH
14625: LD_INT 264
14627: PPUSH
14628: LD_INT 120
14630: PPUSH
14631: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14635: LD_INT 35
14637: PPUSH
14638: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14642: LD_INT 22
14644: PUSH
14645: LD_INT 4
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: PUSH
14652: LD_INT 30
14654: PUSH
14655: LD_INT 0
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: PUSH
14662: LD_INT 3
14664: PUSH
14665: LD_INT 57
14667: PUSH
14668: EMPTY
14669: LIST
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: LIST
14679: PPUSH
14680: CALL_OW 69
14684: IFFALSE 14635
// ComMoveXY ( filter , 247 , 113 ) ;
14686: LD_VAR 0 3
14690: PPUSH
14691: LD_INT 247
14693: PPUSH
14694: LD_INT 113
14696: PPUSH
14697: CALL_OW 111
// Wait ( 0 0$2 ) ;
14701: LD_INT 70
14703: PPUSH
14704: CALL_OW 67
// end else
14708: GO 14722
// begin SetSide ( dep , 4 ) ;
14710: LD_VAR 0 4
14714: PPUSH
14715: LD_INT 4
14717: PPUSH
14718: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14722: LD_ADDR_VAR 0 4
14726: PUSH
14727: LD_INT 22
14729: PUSH
14730: LD_INT 4
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PUSH
14737: LD_INT 30
14739: PUSH
14740: LD_INT 0
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PPUSH
14751: CALL_OW 69
14755: PUSH
14756: LD_INT 1
14758: ARRAY
14759: ST_TO_ADDR
// if not has_eng then
14760: LD_VAR 0 2
14764: NOT
14765: IFFALSE 14852
// for i = 1 to 2 do
14767: LD_ADDR_VAR 0 1
14771: PUSH
14772: DOUBLE
14773: LD_INT 1
14775: DEC
14776: ST_TO_ADDR
14777: LD_INT 2
14779: PUSH
14780: FOR_TO
14781: IFFALSE 14850
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14783: LD_VAR 0 3
14787: PUSH
14788: LD_INT 1
14790: ARRAY
14791: PPUSH
14792: LD_VAR 0 4
14796: PPUSH
14797: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14801: LD_VAR 0 3
14805: PUSH
14806: LD_INT 1
14808: ARRAY
14809: PPUSH
14810: LD_INT 2
14812: PPUSH
14813: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14817: LD_VAR 0 3
14821: PUSH
14822: LD_INT 1
14824: ARRAY
14825: PPUSH
14826: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14830: LD_ADDR_VAR 0 3
14834: PUSH
14835: LD_VAR 0 3
14839: PPUSH
14840: LD_INT 1
14842: PPUSH
14843: CALL_OW 3
14847: ST_TO_ADDR
// end ;
14848: GO 14780
14850: POP
14851: POP
// if IsInUnit ( Cornel ) then
14852: LD_EXP 44
14856: PPUSH
14857: CALL_OW 310
14861: IFFALSE 14939
// begin cargo := IsInUnit ( Cornel ) ;
14863: LD_ADDR_VAR 0 7
14867: PUSH
14868: LD_EXP 44
14872: PPUSH
14873: CALL_OW 310
14877: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14878: LD_VAR 0 7
14882: PPUSH
14883: LD_INT 1
14885: PPUSH
14886: CALL_OW 289
14890: IFFALSE 14901
// ComUnload ( cargo ) ;
14892: LD_VAR 0 7
14896: PPUSH
14897: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14901: LD_EXP 44
14905: PPUSH
14906: LD_INT 235
14908: PPUSH
14909: LD_INT 122
14911: PPUSH
14912: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14916: LD_EXP 44
14920: PPUSH
14921: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14925: LD_EXP 44
14929: PPUSH
14930: LD_VAR 0 4
14934: PPUSH
14935: CALL_OW 180
// end ; if Bierezov then
14939: LD_EXP 45
14943: IFFALSE 14991
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14945: LD_EXP 45
14949: PPUSH
14950: LD_INT 260
14952: PPUSH
14953: LD_INT 120
14955: PPUSH
14956: CALL_OW 111
// if dep then
14960: LD_VAR 0 4
14964: IFFALSE 14982
// AddComEnterUnit ( Bierezov , dep ) else
14966: LD_EXP 45
14970: PPUSH
14971: LD_VAR 0 4
14975: PPUSH
14976: CALL_OW 180
14980: GO 14991
// AddComHold ( Bierezov ) ;
14982: LD_EXP 45
14986: PPUSH
14987: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14991: LD_INT 525
14993: PPUSH
14994: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14998: LD_ADDR_VAR 0 2
15002: PUSH
15003: LD_INT 22
15005: PUSH
15006: LD_INT 4
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: LD_INT 25
15015: PUSH
15016: LD_INT 2
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PPUSH
15027: CALL_OW 69
15031: PUSH
15032: LD_EXP 45
15036: DIFF
15037: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15038: LD_INT 35
15040: PPUSH
15041: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
15045: LD_ADDR_VAR 0 6
15049: PUSH
15050: LD_INT 10
15052: PPUSH
15053: CALL_OW 435
15057: ST_TO_ADDR
// if crates then
15058: LD_VAR 0 6
15062: IFFALSE 15091
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
15064: LD_VAR 0 2
15068: PPUSH
15069: LD_VAR 0 6
15073: PUSH
15074: LD_INT 1
15076: ARRAY
15077: PPUSH
15078: LD_VAR 0 6
15082: PUSH
15083: LD_INT 2
15085: ARRAY
15086: PPUSH
15087: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
15091: LD_VAR 0 4
15095: PPUSH
15096: CALL_OW 274
15100: PPUSH
15101: LD_INT 1
15103: PPUSH
15104: CALL_OW 275
15108: PUSH
15109: LD_INT 40
15111: GREATEREQUAL
15112: IFFALSE 15038
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
15114: LD_ADDR_VAR 0 5
15118: PUSH
15119: LD_INT 4
15121: PUSH
15122: LD_INT 256
15124: PUSH
15125: LD_INT 111
15127: PUSH
15128: LD_INT 2
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: PUSH
15137: LD_INT 31
15139: PUSH
15140: LD_INT 243
15142: PUSH
15143: LD_INT 112
15145: PUSH
15146: LD_INT 2
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: PUSH
15155: LD_INT 31
15157: PUSH
15158: LD_INT 254
15160: PUSH
15161: LD_INT 114
15163: PUSH
15164: LD_INT 2
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: LIST
15177: ST_TO_ADDR
// for i in blist do
15178: LD_ADDR_VAR 0 1
15182: PUSH
15183: LD_VAR 0 5
15187: PUSH
15188: FOR_IN
15189: IFFALSE 15238
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
15191: LD_VAR 0 2
15195: PPUSH
15196: LD_VAR 0 1
15200: PUSH
15201: LD_INT 1
15203: ARRAY
15204: PPUSH
15205: LD_VAR 0 1
15209: PUSH
15210: LD_INT 2
15212: ARRAY
15213: PPUSH
15214: LD_VAR 0 1
15218: PUSH
15219: LD_INT 3
15221: ARRAY
15222: PPUSH
15223: LD_VAR 0 1
15227: PUSH
15228: LD_INT 4
15230: ARRAY
15231: PPUSH
15232: CALL_OW 205
15236: GO 15188
15238: POP
15239: POP
// repeat wait ( 0 0$01 ) ;
15240: LD_INT 35
15242: PPUSH
15243: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
15247: LD_INT 22
15249: PUSH
15250: LD_INT 4
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PUSH
15257: LD_INT 30
15259: PUSH
15260: LD_INT 4
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PUSH
15267: LD_INT 3
15269: PUSH
15270: LD_INT 57
15272: PUSH
15273: EMPTY
15274: LIST
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: LIST
15284: PPUSH
15285: CALL_OW 69
15289: IFFALSE 15240
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15291: LD_VAR 0 3
15295: PPUSH
15296: LD_INT 22
15298: PUSH
15299: LD_INT 4
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 30
15308: PUSH
15309: LD_INT 4
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: PPUSH
15320: CALL_OW 69
15324: PUSH
15325: LD_INT 1
15327: ARRAY
15328: PPUSH
15329: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
15333: LD_VAR 0 3
15337: PPUSH
15338: LD_INT 1
15340: PPUSH
15341: CALL_OW 183
// if has_eng > 1 then
15345: LD_VAR 0 2
15349: PUSH
15350: LD_INT 1
15352: GREATER
15353: IFFALSE 15495
// for i = has_eng downto 2 do
15355: LD_ADDR_VAR 0 1
15359: PUSH
15360: DOUBLE
15361: LD_VAR 0 2
15365: INC
15366: ST_TO_ADDR
15367: LD_INT 2
15369: PUSH
15370: FOR_DOWNTO
15371: IFFALSE 15493
// begin if IsInUnit ( has_eng [ i ] ) then
15373: LD_VAR 0 2
15377: PUSH
15378: LD_VAR 0 1
15382: ARRAY
15383: PPUSH
15384: CALL_OW 310
15388: IFFALSE 15405
// ComExitBuilding ( has_eng [ i ] ) ;
15390: LD_VAR 0 2
15394: PUSH
15395: LD_VAR 0 1
15399: ARRAY
15400: PPUSH
15401: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15405: LD_VAR 0 2
15409: PUSH
15410: LD_VAR 0 1
15414: ARRAY
15415: PPUSH
15416: LD_INT 22
15418: PUSH
15419: LD_INT 4
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 30
15428: PUSH
15429: LD_INT 4
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: PPUSH
15440: CALL_OW 69
15444: PUSH
15445: LD_INT 1
15447: ARRAY
15448: PPUSH
15449: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15453: LD_VAR 0 2
15457: PUSH
15458: LD_VAR 0 1
15462: ARRAY
15463: PPUSH
15464: LD_INT 1
15466: PPUSH
15467: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15471: LD_ADDR_VAR 0 2
15475: PUSH
15476: LD_VAR 0 2
15480: PPUSH
15481: LD_VAR 0 1
15485: PPUSH
15486: CALL_OW 3
15490: ST_TO_ADDR
// end ;
15491: GO 15370
15493: POP
15494: POP
// repeat wait ( 0 0$01 ) ;
15495: LD_INT 35
15497: PPUSH
15498: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15502: LD_INT 22
15504: PUSH
15505: LD_INT 4
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 30
15514: PUSH
15515: LD_INT 31
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 3
15524: PUSH
15525: LD_INT 57
15527: PUSH
15528: EMPTY
15529: LIST
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: LIST
15539: PPUSH
15540: CALL_OW 69
15544: PUSH
15545: LD_INT 1
15547: GREATER
15548: IFFALSE 15495
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15550: LD_ADDR_VAR 0 8
15554: PUSH
15555: LD_EXP 6
15559: PPUSH
15560: LD_INT 25
15562: PUSH
15563: LD_INT 1
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PPUSH
15570: CALL_OW 72
15574: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15575: LD_ADDR_VAR 0 1
15579: PUSH
15580: DOUBLE
15581: LD_INT 1
15583: DEC
15584: ST_TO_ADDR
15585: LD_INT 22
15587: PUSH
15588: LD_INT 4
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: PUSH
15595: LD_INT 30
15597: PUSH
15598: LD_INT 31
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 3
15607: PUSH
15608: LD_INT 57
15610: PUSH
15611: EMPTY
15612: LIST
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: LIST
15622: PPUSH
15623: CALL_OW 69
15627: PUSH
15628: FOR_TO
15629: IFFALSE 15713
// begin if not sol [ i ] then
15631: LD_VAR 0 8
15635: PUSH
15636: LD_VAR 0 1
15640: ARRAY
15641: NOT
15642: IFFALSE 15646
// break ;
15644: GO 15713
// ComExitBuilding ( sol [ i ] ) ;
15646: LD_VAR 0 8
15650: PUSH
15651: LD_VAR 0 1
15655: ARRAY
15656: PPUSH
15657: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15661: LD_VAR 0 8
15665: PUSH
15666: LD_VAR 0 1
15670: ARRAY
15671: PPUSH
15672: LD_INT 22
15674: PUSH
15675: LD_INT 4
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 30
15684: PUSH
15685: LD_INT 31
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PPUSH
15696: CALL_OW 69
15700: PUSH
15701: LD_VAR 0 1
15705: ARRAY
15706: PPUSH
15707: CALL_OW 180
// end ;
15711: GO 15628
15713: POP
15714: POP
// if sol > 3 then
15715: LD_VAR 0 8
15719: PUSH
15720: LD_INT 3
15722: GREATER
15723: IFFALSE 15840
// begin ComExitBuilding ( sol [ 3 ] ) ;
15725: LD_VAR 0 8
15729: PUSH
15730: LD_INT 3
15732: ARRAY
15733: PPUSH
15734: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15738: LD_VAR 0 8
15742: PUSH
15743: LD_INT 3
15745: ARRAY
15746: PPUSH
15747: LD_INT 246
15749: PPUSH
15750: LD_INT 94
15752: PPUSH
15753: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15757: LD_VAR 0 8
15761: PUSH
15762: LD_INT 3
15764: ARRAY
15765: PPUSH
15766: LD_INT 175
15768: PPUSH
15769: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15773: LD_VAR 0 8
15777: PUSH
15778: LD_INT 3
15780: ARRAY
15781: PPUSH
15782: LD_INT 224
15784: PPUSH
15785: LD_INT 90
15787: PPUSH
15788: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15792: LD_VAR 0 8
15796: PUSH
15797: LD_INT 3
15799: ARRAY
15800: PPUSH
15801: LD_INT 245
15803: PPUSH
15804: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15808: LD_VAR 0 8
15812: PUSH
15813: LD_INT 3
15815: ARRAY
15816: PPUSH
15817: LD_INT 223
15819: PPUSH
15820: LD_INT 110
15822: PPUSH
15823: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15827: LD_VAR 0 8
15831: PUSH
15832: LD_INT 3
15834: ARRAY
15835: PPUSH
15836: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15840: LD_VAR 0 2
15844: PPUSH
15845: LD_VAR 0 4
15849: PPUSH
15850: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15854: LD_INT 22
15856: PUSH
15857: LD_INT 4
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 30
15866: PUSH
15867: LD_INT 4
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PPUSH
15878: CALL_OW 69
15882: PUSH
15883: LD_INT 1
15885: ARRAY
15886: PPUSH
15887: CALL_OW 313
15891: PUSH
15892: LD_INT 6
15894: LESS
15895: IFFALSE 15959
// begin if IsInUnit ( Cornel ) then
15897: LD_EXP 44
15901: PPUSH
15902: CALL_OW 310
15906: IFFALSE 15917
// ComExitBuilding ( Cornel ) ;
15908: LD_EXP 44
15912: PPUSH
15913: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15917: LD_EXP 44
15921: PPUSH
15922: LD_INT 22
15924: PUSH
15925: LD_INT 4
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PUSH
15932: LD_INT 30
15934: PUSH
15935: LD_INT 4
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PPUSH
15946: CALL_OW 69
15950: PUSH
15951: LD_INT 1
15953: ARRAY
15954: PPUSH
15955: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15959: LD_INT 35
15961: PPUSH
15962: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15966: LD_ADDR_VAR 0 3
15970: PUSH
15971: LD_INT 22
15973: PUSH
15974: LD_INT 4
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 21
15983: PUSH
15984: LD_INT 3
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: LD_INT 3
15993: PUSH
15994: LD_INT 24
15996: PUSH
15997: LD_INT 1000
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: LIST
16012: PPUSH
16013: CALL_OW 69
16017: ST_TO_ADDR
// if filter and has_eng then
16018: LD_VAR 0 3
16022: PUSH
16023: LD_VAR 0 2
16027: AND
16028: IFFALSE 16094
// begin for i in has_eng do
16030: LD_ADDR_VAR 0 1
16034: PUSH
16035: LD_VAR 0 2
16039: PUSH
16040: FOR_IN
16041: IFFALSE 16090
// begin if IsInUnit ( i ) then
16043: LD_VAR 0 1
16047: PPUSH
16048: CALL_OW 310
16052: IFFALSE 16063
// ComExitBuilding ( i ) ;
16054: LD_VAR 0 1
16058: PPUSH
16059: CALL_OW 122
// Wait ( 3 ) ;
16063: LD_INT 3
16065: PPUSH
16066: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
16070: LD_VAR 0 1
16074: PPUSH
16075: LD_VAR 0 3
16079: PUSH
16080: LD_INT 1
16082: ARRAY
16083: PPUSH
16084: CALL_OW 130
// end ;
16088: GO 16040
16090: POP
16091: POP
// end else
16092: GO 16148
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
16094: LD_VAR 0 2
16098: PUSH
16099: LD_VAR 0 2
16103: PPUSH
16104: LD_INT 56
16106: PUSH
16107: EMPTY
16108: LIST
16109: PPUSH
16110: CALL_OW 72
16114: AND
16115: IFFALSE 16148
// for i in has_eng do
16117: LD_ADDR_VAR 0 1
16121: PUSH
16122: LD_VAR 0 2
16126: PUSH
16127: FOR_IN
16128: IFFALSE 16146
// ComEnterUnit ( i , dep ) ;
16130: LD_VAR 0 1
16134: PPUSH
16135: LD_VAR 0 4
16139: PPUSH
16140: CALL_OW 120
16144: GO 16127
16146: POP
16147: POP
// until cornel_prepared ;
16148: LD_EXP 11
16152: IFFALSE 15959
// end ;
16154: PPOPN 8
16156: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
16157: LD_EXP 11
16161: IFFALSE 16597
16163: GO 16165
16165: DISABLE
16166: LD_INT 0
16168: PPUSH
16169: PPUSH
16170: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
16171: LD_ADDR_VAR 0 2
16175: PUSH
16176: LD_INT 22
16178: PUSH
16179: LD_INT 4
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: LD_INT 30
16188: PUSH
16189: LD_INT 4
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PPUSH
16200: CALL_OW 69
16204: PUSH
16205: LD_INT 1
16207: ARRAY
16208: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
16209: LD_EXP 6
16213: PPUSH
16214: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
16218: LD_EXP 45
16222: PUSH
16223: LD_EXP 45
16227: PPUSH
16228: CALL_OW 310
16232: AND
16233: IFFALSE 16244
// ComExitBuilding ( Bierezov ) ;
16235: LD_EXP 45
16239: PPUSH
16240: CALL_OW 122
// Wait ( 0 0$03 ) ;
16244: LD_INT 105
16246: PPUSH
16247: CALL_OW 67
// for i in cornel_units do
16251: LD_ADDR_VAR 0 1
16255: PUSH
16256: LD_EXP 6
16260: PUSH
16261: FOR_IN
16262: IFFALSE 16338
// begin if GetClass ( i ) in [ 2 , 3 ] then
16264: LD_VAR 0 1
16268: PPUSH
16269: CALL_OW 257
16273: PUSH
16274: LD_INT 2
16276: PUSH
16277: LD_INT 3
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: IN
16284: IFFALSE 16321
// begin ComEnterUnit ( i , arm ) ;
16286: LD_VAR 0 1
16290: PPUSH
16291: LD_VAR 0 2
16295: PPUSH
16296: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
16300: LD_VAR 0 1
16304: PPUSH
16305: LD_INT 1
16307: PPUSH
16308: CALL_OW 183
// AddComExitBuilding ( i ) ;
16312: LD_VAR 0 1
16316: PPUSH
16317: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
16321: LD_VAR 0 1
16325: PPUSH
16326: LD_INT 257
16328: PPUSH
16329: LD_INT 121
16331: PPUSH
16332: CALL_OW 171
// end ;
16336: GO 16261
16338: POP
16339: POP
// Wait ( 1 1$00 ) ;
16340: LD_INT 2100
16342: PPUSH
16343: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
16347: LD_ADDR_VAR 0 3
16351: PUSH
16352: LD_EXP 44
16356: PUSH
16357: LD_EXP 45
16361: ADD
16362: PUSH
16363: LD_EXP 6
16367: ADD
16368: PUSH
16369: LD_EXP 6
16373: PPUSH
16374: LD_INT 21
16376: PUSH
16377: LD_INT 2
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PPUSH
16384: CALL_OW 72
16388: DIFF
16389: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
16390: LD_VAR 0 3
16394: PPUSH
16395: LD_INT 248
16397: PPUSH
16398: LD_INT 85
16400: PPUSH
16401: CALL_OW 111
// AddComHold ( filter ) ;
16405: LD_VAR 0 3
16409: PPUSH
16410: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
16414: LD_INT 35
16416: PPUSH
16417: CALL_OW 67
// until cornel_attack ;
16421: LD_EXP 9
16425: IFFALSE 16414
// ComAgressiveMove ( filter , 209 , 63 ) ;
16427: LD_VAR 0 3
16431: PPUSH
16432: LD_INT 209
16434: PPUSH
16435: LD_INT 63
16437: PPUSH
16438: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16442: LD_EXP 44
16446: PPUSH
16447: LD_INT 208
16449: PPUSH
16450: LD_INT 62
16452: PPUSH
16453: CALL_OW 114
// AddComHold ( Cornel ) ;
16457: LD_EXP 44
16461: PPUSH
16462: CALL_OW 200
// if Bierezov then
16466: LD_EXP 45
16470: IFFALSE 16560
// begin filter := filter diff Bierezov ;
16472: LD_ADDR_VAR 0 3
16476: PUSH
16477: LD_VAR 0 3
16481: PUSH
16482: LD_EXP 45
16486: DIFF
16487: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16488: LD_EXP 45
16492: PPUSH
16493: LD_INT 6
16495: PPUSH
16496: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16500: LD_EXP 45
16504: PPUSH
16505: LD_INT 235
16507: PPUSH
16508: LD_INT 60
16510: PPUSH
16511: CALL_OW 111
// AddComHold ( Bierezov ) ;
16515: LD_EXP 45
16519: PPUSH
16520: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16524: LD_EXP 45
16528: PPUSH
16529: LD_INT 350
16531: PPUSH
16532: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16536: LD_EXP 45
16540: PPUSH
16541: LD_INT 198
16543: PPUSH
16544: LD_INT 28
16546: PPUSH
16547: CALL_OW 171
// AddComHold ( Bierezov ) ;
16551: LD_EXP 45
16555: PPUSH
16556: CALL_OW 200
// end ; repeat wait ( 0 0$2 ) ;
16560: LD_INT 70
16562: PPUSH
16563: CALL_OW 67
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16567: LD_EXP 44
16571: PPUSH
16572: LD_INT 208
16574: PPUSH
16575: LD_INT 62
16577: PPUSH
16578: CALL_OW 114
// until not IsInArea ( Cornel , cornelKappaArea ) ;
16582: LD_EXP 44
16586: PPUSH
16587: LD_INT 16
16589: PPUSH
16590: CALL_OW 308
16594: NOT
16595: IFFALSE 16560
// end ; end_of_file
16597: PPOPN 3
16599: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16600: LD_EXP 53
16604: PUSH
16605: LD_EXP 31
16609: NOT
16610: AND
16611: PUSH
16612: LD_EXP 32
16616: NOT
16617: AND
16618: IFFALSE 17068
16620: GO 16622
16622: DISABLE
16623: LD_INT 0
16625: PPUSH
16626: PPUSH
16627: PPUSH
16628: PPUSH
// begin enable ;
16629: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16630: LD_ADDR_VAR 0 4
16634: PUSH
16635: LD_INT 81
16637: PUSH
16638: LD_INT 3
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PPUSH
16645: CALL_OW 69
16649: ST_TO_ADDR
// for i = 1 to ru_patrol do
16650: LD_ADDR_VAR 0 2
16654: PUSH
16655: DOUBLE
16656: LD_INT 1
16658: DEC
16659: ST_TO_ADDR
16660: LD_EXP 53
16664: PUSH
16665: FOR_TO
16666: IFFALSE 17066
// begin un := ru_patrol [ i ] ;
16668: LD_ADDR_VAR 0 1
16672: PUSH
16673: LD_EXP 53
16677: PUSH
16678: LD_VAR 0 2
16682: ARRAY
16683: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16684: LD_VAR 0 1
16688: PPUSH
16689: LD_INT 13
16691: PPUSH
16692: CALL_OW 308
16696: IFFALSE 16801
// begin if not ru_alert then
16698: LD_EXP 60
16702: NOT
16703: IFFALSE 16713
// ru_alert := true ;
16705: LD_ADDR_EXP 60
16709: PUSH
16710: LD_INT 1
16712: ST_TO_ADDR
// if not See ( 1 , un ) then
16713: LD_INT 1
16715: PPUSH
16716: LD_VAR 0 1
16720: PPUSH
16721: CALL_OW 292
16725: NOT
16726: IFFALSE 16740
// SetLives ( un , 1000 ) ;
16728: LD_VAR 0 1
16732: PPUSH
16733: LD_INT 1000
16735: PPUSH
16736: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16740: LD_ADDR_EXP 53
16744: PUSH
16745: LD_EXP 53
16749: PUSH
16750: LD_VAR 0 1
16754: DIFF
16755: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16756: LD_VAR 0 1
16760: PPUSH
16761: LD_INT 22
16763: PUSH
16764: LD_INT 3
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: LD_INT 30
16773: PUSH
16774: LD_INT 4
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PPUSH
16785: CALL_OW 69
16789: PPUSH
16790: CALL 1007 0 1
16794: PPUSH
16795: CALL_OW 120
// continue ;
16799: GO 16665
// end ; if IsOk ( un ) and not HasTask ( un ) then
16801: LD_VAR 0 1
16805: PPUSH
16806: CALL_OW 302
16810: PUSH
16811: LD_VAR 0 1
16815: PPUSH
16816: CALL_OW 314
16820: NOT
16821: AND
16822: IFFALSE 16915
// begin for j = 1 to ru_firepoints_south [ i ] do
16824: LD_ADDR_VAR 0 3
16828: PUSH
16829: DOUBLE
16830: LD_INT 1
16832: DEC
16833: ST_TO_ADDR
16834: LD_EXP 59
16838: PUSH
16839: LD_VAR 0 2
16843: ARRAY
16844: PUSH
16845: FOR_TO
16846: IFFALSE 16913
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16848: LD_VAR 0 1
16852: PPUSH
16853: LD_EXP 59
16857: PUSH
16858: LD_VAR 0 2
16862: ARRAY
16863: PUSH
16864: LD_VAR 0 3
16868: ARRAY
16869: PUSH
16870: LD_INT 1
16872: ARRAY
16873: PPUSH
16874: LD_EXP 59
16878: PUSH
16879: LD_VAR 0 2
16883: ARRAY
16884: PUSH
16885: LD_VAR 0 3
16889: ARRAY
16890: PUSH
16891: LD_INT 2
16893: ARRAY
16894: PPUSH
16895: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16899: LD_VAR 0 1
16903: PPUSH
16904: LD_INT 70
16906: PPUSH
16907: CALL_OW 202
// end ;
16911: GO 16845
16913: POP
16914: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16915: LD_VAR 0 1
16919: PPUSH
16920: CALL_OW 256
16924: PUSH
16925: LD_INT 700
16927: LESS
16928: PUSH
16929: LD_VAR 0 1
16933: PPUSH
16934: LD_INT 13
16936: PPUSH
16937: CALL_OW 308
16941: NOT
16942: AND
16943: IFFALSE 16995
// begin ComMoveToArea ( un , retreatArea ) ;
16945: LD_VAR 0 1
16949: PPUSH
16950: LD_INT 13
16952: PPUSH
16953: CALL_OW 113
// if not ru_alert_xy then
16957: LD_EXP 61
16961: NOT
16962: IFFALSE 16993
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16964: LD_ADDR_EXP 61
16968: PUSH
16969: LD_VAR 0 1
16973: PPUSH
16974: CALL_OW 250
16978: PUSH
16979: LD_VAR 0 1
16983: PPUSH
16984: CALL_OW 251
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: ST_TO_ADDR
// end else
16993: GO 17064
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16995: LD_VAR 0 1
16999: PPUSH
17000: LD_VAR 0 4
17004: PPUSH
17005: LD_VAR 0 1
17009: PPUSH
17010: CALL_OW 74
17014: PPUSH
17015: CALL_OW 296
17019: PUSH
17020: LD_INT 9
17022: LESS
17023: PUSH
17024: LD_VAR 0 1
17028: PPUSH
17029: CALL_OW 256
17033: PUSH
17034: LD_INT 500
17036: GREATER
17037: AND
17038: IFFALSE 17064
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17040: LD_VAR 0 1
17044: PPUSH
17045: LD_VAR 0 4
17049: PPUSH
17050: LD_VAR 0 1
17054: PPUSH
17055: CALL_OW 74
17059: PPUSH
17060: CALL_OW 115
// end ;
17064: GO 16665
17066: POP
17067: POP
// end ;
17068: PPOPN 4
17070: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
17071: LD_EXP 60
17075: PUSH
17076: LD_EXP 61
17080: AND
17081: PUSH
17082: LD_EXP 31
17086: NOT
17087: AND
17088: PUSH
17089: LD_EXP 32
17093: NOT
17094: AND
17095: IFFALSE 17305
17097: GO 17099
17099: DISABLE
17100: LD_INT 0
17102: PPUSH
17103: PPUSH
// begin enable ;
17104: ENABLE
// if not ru_vehicles then
17105: LD_EXP 56
17109: NOT
17110: IFFALSE 17114
// exit ;
17112: GO 17305
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17114: LD_ADDR_VAR 0 2
17118: PUSH
17119: LD_INT 81
17121: PUSH
17122: LD_INT 3
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PPUSH
17129: CALL_OW 69
17133: ST_TO_ADDR
// if ru_vehicles then
17134: LD_EXP 56
17138: IFFALSE 17305
// begin for i in ru_vehicles do
17140: LD_ADDR_VAR 0 1
17144: PUSH
17145: LD_EXP 56
17149: PUSH
17150: FOR_IN
17151: IFFALSE 17303
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
17153: LD_VAR 0 1
17157: PPUSH
17158: CALL_OW 302
17162: PUSH
17163: LD_VAR 0 1
17167: PPUSH
17168: LD_VAR 0 2
17172: PPUSH
17173: LD_VAR 0 1
17177: PPUSH
17178: CALL_OW 74
17182: PPUSH
17183: CALL_OW 296
17187: PUSH
17188: LD_INT 9
17190: LESS
17191: AND
17192: IFFALSE 17218
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17194: LD_VAR 0 1
17198: PPUSH
17199: LD_VAR 0 2
17203: PPUSH
17204: LD_VAR 0 1
17208: PPUSH
17209: CALL_OW 74
17213: PPUSH
17214: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
17218: LD_VAR 0 1
17222: PPUSH
17223: CALL_OW 314
17227: NOT
17228: PUSH
17229: LD_VAR 0 1
17233: PPUSH
17234: CALL_OW 302
17238: AND
17239: PUSH
17240: LD_VAR 0 1
17244: PPUSH
17245: LD_EXP 61
17249: PUSH
17250: LD_INT 1
17252: ARRAY
17253: PPUSH
17254: LD_EXP 61
17258: PUSH
17259: LD_INT 2
17261: ARRAY
17262: PPUSH
17263: CALL_OW 297
17267: PUSH
17268: LD_INT 10
17270: GREATER
17271: AND
17272: IFFALSE 17301
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
17274: LD_VAR 0 1
17278: PPUSH
17279: LD_EXP 61
17283: PUSH
17284: LD_INT 1
17286: ARRAY
17287: PPUSH
17288: LD_EXP 61
17292: PUSH
17293: LD_INT 2
17295: ARRAY
17296: PPUSH
17297: CALL_OW 114
// end ;
17301: GO 17150
17303: POP
17304: POP
// end ; end ;
17305: PPOPN 2
17307: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
17308: LD_EXP 61
17312: PUSH
17313: LD_EXP 60
17317: AND
17318: PUSH
17319: LD_INT 3
17321: PPUSH
17322: CALL_OW 463
17326: NOT
17327: AND
17328: PUSH
17329: LD_EXP 31
17333: NOT
17334: AND
17335: PUSH
17336: LD_EXP 32
17340: NOT
17341: AND
17342: IFFALSE 17437
17344: GO 17346
17346: DISABLE
17347: LD_INT 0
17349: PPUSH
// begin enable ;
17350: ENABLE
// ru_alert_xy := false ;
17351: LD_ADDR_EXP 61
17355: PUSH
17356: LD_INT 0
17358: ST_TO_ADDR
// ru_alert := false ;
17359: LD_ADDR_EXP 60
17363: PUSH
17364: LD_INT 0
17366: ST_TO_ADDR
// if ru_vehicles then
17367: LD_EXP 56
17371: IFFALSE 17437
// for i in ru_vehicles do
17373: LD_ADDR_VAR 0 1
17377: PUSH
17378: LD_EXP 56
17382: PUSH
17383: FOR_IN
17384: IFFALSE 17435
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
17386: LD_VAR 0 1
17390: PPUSH
17391: CALL_OW 302
17395: PUSH
17396: LD_VAR 0 1
17400: PPUSH
17401: LD_INT 89
17403: PPUSH
17404: LD_INT 36
17406: PPUSH
17407: CALL_OW 297
17411: PUSH
17412: LD_INT 10
17414: GREATER
17415: AND
17416: IFFALSE 17433
// ComMoveXY ( i , 89 , 36 ) ;
17418: LD_VAR 0 1
17422: PPUSH
17423: LD_INT 89
17425: PPUSH
17426: LD_INT 36
17428: PPUSH
17429: CALL_OW 111
17433: GO 17383
17435: POP
17436: POP
// end ;
17437: PPOPN 1
17439: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
17440: LD_EXP 55
17444: PUSH
17445: LD_EXP 31
17449: NOT
17450: AND
17451: PUSH
17452: LD_EXP 32
17456: NOT
17457: AND
17458: IFFALSE 17742
17460: GO 17462
17462: DISABLE
17463: LD_INT 0
17465: PPUSH
17466: PPUSH
17467: PPUSH
// begin enable ;
17468: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17469: LD_ADDR_VAR 0 3
17473: PUSH
17474: LD_INT 81
17476: PUSH
17477: LD_INT 3
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PPUSH
17484: CALL_OW 69
17488: ST_TO_ADDR
// for i = 1 to ru_forest do
17489: LD_ADDR_VAR 0 1
17493: PUSH
17494: DOUBLE
17495: LD_INT 1
17497: DEC
17498: ST_TO_ADDR
17499: LD_EXP 55
17503: PUSH
17504: FOR_TO
17505: IFFALSE 17740
// begin un := ru_forest [ i ] ;
17507: LD_ADDR_VAR 0 2
17511: PUSH
17512: LD_EXP 55
17516: PUSH
17517: LD_VAR 0 1
17521: ARRAY
17522: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17523: LD_VAR 0 2
17527: PPUSH
17528: LD_INT 13
17530: PPUSH
17531: CALL_OW 308
17535: IFFALSE 17625
// begin if not See ( 1 , un ) then
17537: LD_INT 1
17539: PPUSH
17540: LD_VAR 0 2
17544: PPUSH
17545: CALL_OW 292
17549: NOT
17550: IFFALSE 17564
// SetLives ( un , 1000 ) ;
17552: LD_VAR 0 2
17556: PPUSH
17557: LD_INT 1000
17559: PPUSH
17560: CALL_OW 234
// ru_forest := ru_forest diff un ;
17564: LD_ADDR_EXP 55
17568: PUSH
17569: LD_EXP 55
17573: PUSH
17574: LD_VAR 0 2
17578: DIFF
17579: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17580: LD_VAR 0 2
17584: PPUSH
17585: LD_INT 22
17587: PUSH
17588: LD_INT 3
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: LD_INT 30
17597: PUSH
17598: LD_INT 4
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PPUSH
17609: CALL_OW 69
17613: PPUSH
17614: CALL 1007 0 1
17618: PPUSH
17619: CALL_OW 120
// continue ;
17623: GO 17504
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17625: LD_VAR 0 2
17629: PPUSH
17630: CALL_OW 256
17634: PUSH
17635: LD_INT 700
17637: LESS
17638: PUSH
17639: LD_VAR 0 2
17643: PPUSH
17644: LD_INT 13
17646: PPUSH
17647: CALL_OW 308
17651: NOT
17652: AND
17653: IFFALSE 17669
// ComMoveToArea ( un , retreatArea ) else
17655: LD_VAR 0 2
17659: PPUSH
17660: LD_INT 13
17662: PPUSH
17663: CALL_OW 113
17667: GO 17738
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17669: LD_VAR 0 2
17673: PPUSH
17674: LD_VAR 0 3
17678: PPUSH
17679: LD_VAR 0 2
17683: PPUSH
17684: CALL_OW 74
17688: PPUSH
17689: CALL_OW 296
17693: PUSH
17694: LD_INT 9
17696: LESS
17697: PUSH
17698: LD_VAR 0 2
17702: PPUSH
17703: CALL_OW 256
17707: PUSH
17708: LD_INT 500
17710: GREATER
17711: AND
17712: IFFALSE 17738
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17714: LD_VAR 0 2
17718: PPUSH
17719: LD_VAR 0 3
17723: PPUSH
17724: LD_VAR 0 2
17728: PPUSH
17729: CALL_OW 74
17733: PPUSH
17734: CALL_OW 115
// end ;
17738: GO 17504
17740: POP
17741: POP
// end ;
17742: PPOPN 3
17744: END
// every 0 0$10 trigger not send_attack_on_cornel do var i , filter ;
17745: LD_EXP 32
17749: NOT
17750: IFFALSE 17893
17752: GO 17754
17754: DISABLE
17755: LD_INT 0
17757: PPUSH
17758: PPUSH
// begin enable ;
17759: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 990 ] ] ] ) ;
17760: LD_ADDR_VAR 0 2
17764: PUSH
17765: LD_INT 22
17767: PUSH
17768: LD_INT 3
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 21
17777: PUSH
17778: LD_INT 3
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 3
17787: PUSH
17788: LD_INT 24
17790: PUSH
17791: LD_INT 990
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: LIST
17806: PPUSH
17807: CALL_OW 69
17811: ST_TO_ADDR
// if filter then
17812: LD_VAR 0 2
17816: IFFALSE 17893
// for i in filter do
17818: LD_ADDR_VAR 0 1
17822: PUSH
17823: LD_VAR 0 2
17827: PUSH
17828: FOR_IN
17829: IFFALSE 17891
// if GetY ( i ) > 70 then
17831: LD_VAR 0 1
17835: PPUSH
17836: CALL_OW 251
17840: PUSH
17841: LD_INT 70
17843: GREATER
17844: IFFALSE 17850
// continue else
17846: GO 17828
17848: GO 17889
// begin ru_alert := true ;
17850: LD_ADDR_EXP 60
17854: PUSH
17855: LD_INT 1
17857: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17858: LD_ADDR_EXP 61
17862: PUSH
17863: LD_VAR 0 1
17867: PPUSH
17868: CALL_OW 250
17872: PUSH
17873: LD_VAR 0 1
17877: PPUSH
17878: CALL_OW 251
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: ST_TO_ADDR
// break ;
17887: GO 17891
// end ;
17889: GO 17828
17891: POP
17892: POP
// end ;
17893: PPOPN 2
17895: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17896: LD_EXP 31
17900: IFFALSE 18049
17902: GO 17904
17904: DISABLE
17905: LD_INT 0
17907: PPUSH
17908: PPUSH
17909: PPUSH
17910: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17911: LD_ADDR_VAR 0 4
17915: PUSH
17916: LD_EXP 56
17920: PUSH
17921: LD_EXP 55
17925: ADD
17926: PUSH
17927: LD_EXP 53
17931: ADD
17932: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17933: LD_ADDR_VAR 0 3
17937: PUSH
17938: LD_INT 3
17940: PPUSH
17941: LD_INT 81
17943: PUSH
17944: LD_INT 3
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PPUSH
17951: CALL_OW 70
17955: ST_TO_ADDR
// if filter and enemy then
17956: LD_VAR 0 4
17960: PUSH
17961: LD_VAR 0 3
17965: AND
17966: IFFALSE 18049
// repeat wait ( 0 0$01 ) ;
17968: LD_INT 35
17970: PPUSH
17971: CALL_OW 67
// for i in filter do
17975: LD_ADDR_VAR 0 1
17979: PUSH
17980: LD_VAR 0 4
17984: PUSH
17985: FOR_IN
17986: IFFALSE 18014
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17988: LD_VAR 0 1
17992: PPUSH
17993: LD_VAR 0 3
17997: PPUSH
17998: LD_VAR 0 1
18002: PPUSH
18003: CALL_OW 74
18007: PPUSH
18008: CALL_OW 115
// end ;
18012: GO 17985
18014: POP
18015: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
18016: LD_INT 3
18018: PPUSH
18019: LD_INT 81
18021: PUSH
18022: LD_INT 3
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PPUSH
18029: CALL_OW 70
18033: PUSH
18034: LD_INT 0
18036: EQUAL
18037: PUSH
18038: LD_VAR 0 4
18042: PUSH
18043: LD_INT 0
18045: EQUAL
18046: OR
18047: IFFALSE 17968
// end ;
18049: PPOPN 4
18051: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
18052: LD_EXP 26
18056: PUSH
18057: LD_INT 22
18059: PUSH
18060: LD_INT 4
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: LD_INT 30
18069: PUSH
18070: LD_INT 4
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: LD_INT 3
18079: PUSH
18080: LD_INT 57
18082: PUSH
18083: EMPTY
18084: LIST
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: LIST
18094: PPUSH
18095: CALL_OW 69
18099: AND
18100: IFFALSE 18149
18102: GO 18104
18104: DISABLE
18105: LD_INT 0
18107: PPUSH
// begin if not ru_cornel_attack then
18108: LD_EXP 58
18112: NOT
18113: IFFALSE 18117
// exit ;
18115: GO 18149
// for i in ru_cornel_attack do
18117: LD_ADDR_VAR 0 1
18121: PUSH
18122: LD_EXP 58
18126: PUSH
18127: FOR_IN
18128: IFFALSE 18147
// ComAgressiveMove ( i , 258 , 119 ) ;
18130: LD_VAR 0 1
18134: PPUSH
18135: LD_INT 258
18137: PPUSH
18138: LD_INT 119
18140: PPUSH
18141: CALL_OW 114
18145: GO 18127
18147: POP
18148: POP
// end ; end_of_file
18149: PPOPN 1
18151: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
18152: LD_EXP 5
18156: PUSH
18157: LD_EXP 9
18161: NOT
18162: AND
18163: PUSH
18164: LD_EXP 20
18168: AND
18169: IFFALSE 18281
18171: GO 18173
18173: DISABLE
18174: LD_INT 0
18176: PPUSH
// begin enable ;
18177: ENABLE
// crates_counter := crates_counter - 50 ;
18178: LD_ADDR_EXP 20
18182: PUSH
18183: LD_EXP 20
18187: PUSH
18188: LD_INT 50
18190: MINUS
18191: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
18192: LD_INT 8
18194: PPUSH
18195: LD_INT 2
18197: PPUSH
18198: LD_INT 5
18200: PPUSH
18201: CALL_OW 12
18205: PPUSH
18206: LD_INT 1
18208: PPUSH
18209: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
18213: LD_INT 1785
18215: PPUSH
18216: LD_INT 2345
18218: PPUSH
18219: CALL_OW 12
18223: PPUSH
18224: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
18228: LD_ADDR_VAR 0 1
18232: PUSH
18233: LD_INT 1
18235: PPUSH
18236: LD_OWVAR 67
18240: PUSH
18241: LD_INT 2
18243: PLUS
18244: PPUSH
18245: CALL_OW 12
18249: ST_TO_ADDR
// if r < 3 then
18250: LD_VAR 0 1
18254: PUSH
18255: LD_INT 3
18257: LESS
18258: IFFALSE 18281
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
18260: LD_INT 4
18262: PPUSH
18263: LD_INT 1
18265: PPUSH
18266: LD_INT 5
18268: PPUSH
18269: CALL_OW 12
18273: PPUSH
18274: LD_INT 1
18276: PPUSH
18277: CALL_OW 55
// end ;
18281: PPOPN 1
18283: END
// every 0 0$01 trigger cornel_active do
18284: LD_EXP 8
18288: IFFALSE 18377
18290: GO 18292
18292: DISABLE
// begin Wait ( 0 0$03 ) ;
18293: LD_INT 105
18295: PPUSH
18296: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18300: LD_INT 2
18302: PPUSH
18303: LD_INT 5
18305: PPUSH
18306: CALL_OW 12
18310: PPUSH
18311: LD_INT 10
18313: PPUSH
18314: LD_INT 1
18316: PPUSH
18317: CALL_OW 55
// Wait ( 0 0$13 ) ;
18321: LD_INT 455
18323: PPUSH
18324: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18328: LD_INT 2
18330: PPUSH
18331: LD_INT 5
18333: PPUSH
18334: CALL_OW 12
18338: PPUSH
18339: LD_INT 10
18341: PPUSH
18342: LD_INT 1
18344: PPUSH
18345: CALL_OW 55
// Wait ( 0 0$16 ) ;
18349: LD_INT 560
18351: PPUSH
18352: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18356: LD_INT 2
18358: PPUSH
18359: LD_INT 5
18361: PPUSH
18362: CALL_OW 12
18366: PPUSH
18367: LD_INT 10
18369: PPUSH
18370: LD_INT 1
18372: PPUSH
18373: CALL_OW 55
// end ; end_of_file
18377: END
// every 0 0$01 trigger cornel_prepared do
18378: LD_EXP 11
18382: IFFALSE 18441
18384: GO 18386
18386: DISABLE
// begin enable ;
18387: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
18388: LD_ADDR_OWVAR 47
18392: PUSH
18393: LD_STRING #Am03-1
18395: PUSH
18396: LD_EXP 10
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
18405: LD_ADDR_EXP 10
18409: PUSH
18410: LD_EXP 10
18414: PPUSH
18415: LD_STRING -
18417: PPUSH
18418: CALL 1077 0 2
18422: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
18423: LD_EXP 10
18427: PUSH
18428: LD_INT 0
18430: EQUAL
18431: IFFALSE 18441
// begin Display_Strings := [ ] ;
18433: LD_ADDR_OWVAR 47
18437: PUSH
18438: EMPTY
18439: ST_TO_ADDR
// disable ;
18440: DISABLE
// end ; end ;
18441: END
// every 0 0$01 trigger debug and debug_strings do
18442: LD_EXP 1
18446: PUSH
18447: LD_OWVAR 48
18451: AND
18452: IFFALSE 18468
18454: GO 18456
18456: DISABLE
// begin enable ;
18457: ENABLE
// Display_Strings := debug_strings ;
18458: LD_ADDR_OWVAR 47
18462: PUSH
18463: LD_OWVAR 48
18467: ST_TO_ADDR
// end ; end_of_file
18468: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
18469: LD_VAR 0 1
18473: PPUSH
18474: LD_VAR 0 2
18478: PPUSH
18479: CALL 34916 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
18483: LD_VAR 0 1
18487: PPUSH
18488: CALL_OW 255
18492: PUSH
18493: LD_INT 1
18495: EQUAL
18496: PUSH
18497: LD_EXP 14
18501: NOT
18502: AND
18503: IFFALSE 18513
// solar_builded := true ;
18505: LD_ADDR_EXP 14
18509: PUSH
18510: LD_INT 1
18512: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18513: LD_VAR 0 1
18517: PPUSH
18518: CALL_OW 255
18522: PUSH
18523: LD_INT 1
18525: EQUAL
18526: PUSH
18527: LD_EXP 29
18531: AND
18532: IFFALSE 18569
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18534: LD_ADDR_EXP 29
18538: PUSH
18539: LD_EXP 29
18543: PUSH
18544: LD_INT 1750
18546: PUSH
18547: LD_INT 1400
18549: PUSH
18550: LD_INT 1225
18552: PUSH
18553: LD_INT 1050
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: PUSH
18562: LD_OWVAR 67
18566: ARRAY
18567: PLUS
18568: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18569: LD_VAR 0 1
18573: PPUSH
18574: CALL_OW 255
18578: PUSH
18579: LD_INT 3
18581: EQUAL
18582: IFFALSE 18600
// ru_vehicles := ru_vehicles ^ veh ;
18584: LD_ADDR_EXP 56
18588: PUSH
18589: LD_EXP 56
18593: PUSH
18594: LD_VAR 0 1
18598: ADD
18599: ST_TO_ADDR
// end ;
18600: PPOPN 2
18602: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL 34796 0 1
// if un in ru_patrol then
18612: LD_VAR 0 1
18616: PUSH
18617: LD_EXP 53
18621: IN
18622: IFFALSE 18640
// ru_patrol := ru_patrol diff un ;
18624: LD_ADDR_EXP 53
18628: PUSH
18629: LD_EXP 53
18633: PUSH
18634: LD_VAR 0 1
18638: DIFF
18639: ST_TO_ADDR
// if un in ru_forest then
18640: LD_VAR 0 1
18644: PUSH
18645: LD_EXP 55
18649: IN
18650: IFFALSE 18668
// ru_forest := ru_forest diff un ;
18652: LD_ADDR_EXP 55
18656: PUSH
18657: LD_EXP 55
18661: PUSH
18662: LD_VAR 0 1
18666: DIFF
18667: ST_TO_ADDR
// if un in ru_vehicles then
18668: LD_VAR 0 1
18672: PUSH
18673: LD_EXP 56
18677: IN
18678: IFFALSE 18784
// begin ru_vehicles := ru_vehicles diff un ;
18680: LD_ADDR_EXP 56
18684: PUSH
18685: LD_EXP 56
18689: PUSH
18690: LD_VAR 0 1
18694: DIFF
18695: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18696: LD_ADDR_EXP 57
18700: PUSH
18701: LD_EXP 57
18705: PUSH
18706: LD_VAR 0 1
18710: PPUSH
18711: CALL_OW 265
18715: PUSH
18716: LD_VAR 0 1
18720: PPUSH
18721: CALL_OW 262
18725: PUSH
18726: LD_VAR 0 1
18730: PPUSH
18731: CALL_OW 263
18735: PUSH
18736: LD_VAR 0 1
18740: PPUSH
18741: CALL_OW 264
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: ADD
18752: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18753: LD_ADDR_EXP 13
18757: PUSH
18758: LD_EXP 13
18762: PUSH
18763: LD_INT 1
18765: PLUS
18766: ST_TO_ADDR
// if ach_counter = 10 then
18767: LD_EXP 13
18771: PUSH
18772: LD_INT 10
18774: EQUAL
18775: IFFALSE 18784
// SetAchievement ( ACH_FAUST ) ;
18777: LD_STRING ACH_FAUST
18779: PPUSH
18780: CALL_OW 543
// end ; if un = Pokryshkin then
18784: LD_VAR 0 1
18788: PUSH
18789: LD_EXP 52
18793: EQUAL
18794: IFFALSE 18803
// SetAchievement ( ACH_POKR ) ;
18796: LD_STRING ACH_POKR
18798: PPUSH
18799: CALL_OW 543
// if un = JMM then
18803: LD_VAR 0 1
18807: PUSH
18808: LD_EXP 37
18812: EQUAL
18813: IFFALSE 18822
// YouLost ( 0 ) ;
18815: LD_STRING 0
18817: PPUSH
18818: CALL_OW 104
// if un = us_dep_west then
18822: LD_VAR 0 1
18826: PUSH
18827: LD_INT 1
18829: EQUAL
18830: IFFALSE 18839
// YouLost ( 2 ) ;
18832: LD_STRING 2
18834: PPUSH
18835: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18839: LD_VAR 0 1
18843: PPUSH
18844: CALL_OW 255
18848: PUSH
18849: LD_INT 8
18851: EQUAL
18852: PUSH
18853: LD_EXP 5
18857: NOT
18858: AND
18859: IFFALSE 18868
// YouLost ( 4 ) ;
18861: LD_STRING 4
18863: PPUSH
18864: CALL_OW 104
// if un in jmm_units then
18868: LD_VAR 0 1
18872: PUSH
18873: LD_EXP 4
18877: IN
18878: IFFALSE 18894
// lose_counter := lose_counter + 1 ;
18880: LD_ADDR_EXP 34
18884: PUSH
18885: LD_EXP 34
18889: PUSH
18890: LD_INT 1
18892: PLUS
18893: ST_TO_ADDR
// end ;
18894: PPOPN 1
18896: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18897: LD_INT 0
18899: PPUSH
18900: PPUSH
// begin if GetSide ( driver ) = 3 then
18901: LD_VAR 0 1
18905: PPUSH
18906: CALL_OW 255
18910: PUSH
18911: LD_INT 3
18913: EQUAL
18914: IFFALSE 18992
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18916: LD_ADDR_VAR 0 6
18920: PUSH
18921: LD_INT 22
18923: PUSH
18924: LD_INT 3
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 30
18933: PUSH
18934: LD_INT 3
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PPUSH
18945: CALL_OW 69
18949: PPUSH
18950: CALL 1007 0 1
18954: ST_TO_ADDR
// if place then
18955: LD_VAR 0 6
18959: IFFALSE 18977
// ComEnterUnit ( driver , place ) else
18961: LD_VAR 0 1
18965: PPUSH
18966: LD_VAR 0 6
18970: PPUSH
18971: CALL_OW 120
18975: GO 18992
// ComMoveXY ( driver , 70 , 22 ) ;
18977: LD_VAR 0 1
18981: PPUSH
18982: LD_INT 70
18984: PPUSH
18985: LD_INT 22
18987: PPUSH
18988: CALL_OW 111
// end ; end ;
18992: PPOPN 6
18994: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
18995: LD_VAR 0 1
18999: PUSH
19000: LD_INT 1
19002: EQUAL
19003: PUSH
19004: LD_VAR 0 2
19008: PUSH
19009: LD_INT 4
19011: EQUAL
19012: PUSH
19013: LD_VAR 0 2
19017: PUSH
19018: LD_INT 8
19020: EQUAL
19021: PUSH
19022: LD_EXP 5
19026: NOT
19027: AND
19028: OR
19029: AND
19030: IFFALSE 19039
// YouLost ( 5 ) ;
19032: LD_STRING 5
19034: PPUSH
19035: CALL_OW 104
// end ;
19039: PPOPN 2
19041: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
19042: LD_EXP 36
19046: PUSH
19047: LD_INT 22
19049: PUSH
19050: LD_INT 1
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 21
19059: PUSH
19060: LD_INT 1
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PPUSH
19071: CALL_OW 69
19075: PUSH
19076: LD_INT 22
19078: PUSH
19079: LD_INT 8
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 21
19088: PUSH
19089: LD_INT 1
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PPUSH
19100: CALL_OW 69
19104: ADD
19105: PLUS
19106: PUSH
19107: LD_INT 5
19109: LESS
19110: IFFALSE 19122
19112: GO 19114
19114: DISABLE
// YouLost ( 1 ) ;
19115: LD_STRING 1
19117: PPUSH
19118: CALL_OW 104
19122: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
19123: LD_INT 1
19125: PPUSH
19126: CALL_OW 255
19130: PUSH
19131: LD_INT 3
19133: EQUAL
19134: IFFALSE 19146
19136: GO 19138
19138: DISABLE
// YouLost ( 3 ) ; end_of_file end_of_file
19139: LD_STRING 3
19141: PPUSH
19142: CALL_OW 104
19146: END
// every 0 0$1 do
19147: GO 19149
19149: DISABLE
// begin enable ;
19150: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19151: LD_STRING updateTimer(
19153: PUSH
19154: LD_OWVAR 1
19158: STR
19159: PUSH
19160: LD_STRING );
19162: STR
19163: PPUSH
19164: CALL_OW 559
// end ;
19168: END
// export function SOS_MapStart ( ) ; begin
19169: LD_INT 0
19171: PPUSH
// if streamModeActive then
19172: LD_EXP 62
19176: IFFALSE 19185
// DefineStreamItems ( true ) ;
19178: LD_INT 1
19180: PPUSH
19181: CALL 20839 0 1
// UpdateFactoryWaypoints ( ) ;
19185: CALL 33700 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19189: CALL 33957 0 0
// end ;
19193: LD_VAR 0 1
19197: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19198: LD_INT 0
19200: PPUSH
// if p2 = hack_mode then
19201: LD_VAR 0 2
19205: PUSH
19206: LD_INT 100
19208: EQUAL
19209: IFFALSE 20212
// begin if not StreamModeActive then
19211: LD_EXP 62
19215: NOT
19216: IFFALSE 19226
// StreamModeActive := true ;
19218: LD_ADDR_EXP 62
19222: PUSH
19223: LD_INT 1
19225: ST_TO_ADDR
// if p3 = 0 then
19226: LD_VAR 0 3
19230: PUSH
19231: LD_INT 0
19233: EQUAL
19234: IFFALSE 19240
// InitStreamMode ;
19236: CALL 20375 0 0
// if p3 = 1 then
19240: LD_VAR 0 3
19244: PUSH
19245: LD_INT 1
19247: EQUAL
19248: IFFALSE 19258
// sRocket := true ;
19250: LD_ADDR_EXP 67
19254: PUSH
19255: LD_INT 1
19257: ST_TO_ADDR
// if p3 = 2 then
19258: LD_VAR 0 3
19262: PUSH
19263: LD_INT 2
19265: EQUAL
19266: IFFALSE 19276
// sSpeed := true ;
19268: LD_ADDR_EXP 66
19272: PUSH
19273: LD_INT 1
19275: ST_TO_ADDR
// if p3 = 3 then
19276: LD_VAR 0 3
19280: PUSH
19281: LD_INT 3
19283: EQUAL
19284: IFFALSE 19294
// sEngine := true ;
19286: LD_ADDR_EXP 68
19290: PUSH
19291: LD_INT 1
19293: ST_TO_ADDR
// if p3 = 4 then
19294: LD_VAR 0 3
19298: PUSH
19299: LD_INT 4
19301: EQUAL
19302: IFFALSE 19312
// sSpec := true ;
19304: LD_ADDR_EXP 65
19308: PUSH
19309: LD_INT 1
19311: ST_TO_ADDR
// if p3 = 5 then
19312: LD_VAR 0 3
19316: PUSH
19317: LD_INT 5
19319: EQUAL
19320: IFFALSE 19330
// sLevel := true ;
19322: LD_ADDR_EXP 69
19326: PUSH
19327: LD_INT 1
19329: ST_TO_ADDR
// if p3 = 6 then
19330: LD_VAR 0 3
19334: PUSH
19335: LD_INT 6
19337: EQUAL
19338: IFFALSE 19348
// sArmoury := true ;
19340: LD_ADDR_EXP 70
19344: PUSH
19345: LD_INT 1
19347: ST_TO_ADDR
// if p3 = 7 then
19348: LD_VAR 0 3
19352: PUSH
19353: LD_INT 7
19355: EQUAL
19356: IFFALSE 19366
// sRadar := true ;
19358: LD_ADDR_EXP 71
19362: PUSH
19363: LD_INT 1
19365: ST_TO_ADDR
// if p3 = 8 then
19366: LD_VAR 0 3
19370: PUSH
19371: LD_INT 8
19373: EQUAL
19374: IFFALSE 19384
// sBunker := true ;
19376: LD_ADDR_EXP 72
19380: PUSH
19381: LD_INT 1
19383: ST_TO_ADDR
// if p3 = 9 then
19384: LD_VAR 0 3
19388: PUSH
19389: LD_INT 9
19391: EQUAL
19392: IFFALSE 19402
// sHack := true ;
19394: LD_ADDR_EXP 73
19398: PUSH
19399: LD_INT 1
19401: ST_TO_ADDR
// if p3 = 10 then
19402: LD_VAR 0 3
19406: PUSH
19407: LD_INT 10
19409: EQUAL
19410: IFFALSE 19420
// sFire := true ;
19412: LD_ADDR_EXP 74
19416: PUSH
19417: LD_INT 1
19419: ST_TO_ADDR
// if p3 = 11 then
19420: LD_VAR 0 3
19424: PUSH
19425: LD_INT 11
19427: EQUAL
19428: IFFALSE 19438
// sRefresh := true ;
19430: LD_ADDR_EXP 75
19434: PUSH
19435: LD_INT 1
19437: ST_TO_ADDR
// if p3 = 12 then
19438: LD_VAR 0 3
19442: PUSH
19443: LD_INT 12
19445: EQUAL
19446: IFFALSE 19456
// sExp := true ;
19448: LD_ADDR_EXP 76
19452: PUSH
19453: LD_INT 1
19455: ST_TO_ADDR
// if p3 = 13 then
19456: LD_VAR 0 3
19460: PUSH
19461: LD_INT 13
19463: EQUAL
19464: IFFALSE 19474
// sDepot := true ;
19466: LD_ADDR_EXP 77
19470: PUSH
19471: LD_INT 1
19473: ST_TO_ADDR
// if p3 = 14 then
19474: LD_VAR 0 3
19478: PUSH
19479: LD_INT 14
19481: EQUAL
19482: IFFALSE 19492
// sFlag := true ;
19484: LD_ADDR_EXP 78
19488: PUSH
19489: LD_INT 1
19491: ST_TO_ADDR
// if p3 = 15 then
19492: LD_VAR 0 3
19496: PUSH
19497: LD_INT 15
19499: EQUAL
19500: IFFALSE 19510
// sKamikadze := true ;
19502: LD_ADDR_EXP 86
19506: PUSH
19507: LD_INT 1
19509: ST_TO_ADDR
// if p3 = 16 then
19510: LD_VAR 0 3
19514: PUSH
19515: LD_INT 16
19517: EQUAL
19518: IFFALSE 19528
// sTroll := true ;
19520: LD_ADDR_EXP 87
19524: PUSH
19525: LD_INT 1
19527: ST_TO_ADDR
// if p3 = 17 then
19528: LD_VAR 0 3
19532: PUSH
19533: LD_INT 17
19535: EQUAL
19536: IFFALSE 19546
// sSlow := true ;
19538: LD_ADDR_EXP 88
19542: PUSH
19543: LD_INT 1
19545: ST_TO_ADDR
// if p3 = 18 then
19546: LD_VAR 0 3
19550: PUSH
19551: LD_INT 18
19553: EQUAL
19554: IFFALSE 19564
// sLack := true ;
19556: LD_ADDR_EXP 89
19560: PUSH
19561: LD_INT 1
19563: ST_TO_ADDR
// if p3 = 19 then
19564: LD_VAR 0 3
19568: PUSH
19569: LD_INT 19
19571: EQUAL
19572: IFFALSE 19582
// sTank := true ;
19574: LD_ADDR_EXP 91
19578: PUSH
19579: LD_INT 1
19581: ST_TO_ADDR
// if p3 = 20 then
19582: LD_VAR 0 3
19586: PUSH
19587: LD_INT 20
19589: EQUAL
19590: IFFALSE 19600
// sRemote := true ;
19592: LD_ADDR_EXP 92
19596: PUSH
19597: LD_INT 1
19599: ST_TO_ADDR
// if p3 = 21 then
19600: LD_VAR 0 3
19604: PUSH
19605: LD_INT 21
19607: EQUAL
19608: IFFALSE 19618
// sPowell := true ;
19610: LD_ADDR_EXP 93
19614: PUSH
19615: LD_INT 1
19617: ST_TO_ADDR
// if p3 = 22 then
19618: LD_VAR 0 3
19622: PUSH
19623: LD_INT 22
19625: EQUAL
19626: IFFALSE 19636
// sTeleport := true ;
19628: LD_ADDR_EXP 96
19632: PUSH
19633: LD_INT 1
19635: ST_TO_ADDR
// if p3 = 23 then
19636: LD_VAR 0 3
19640: PUSH
19641: LD_INT 23
19643: EQUAL
19644: IFFALSE 19654
// sOilTower := true ;
19646: LD_ADDR_EXP 98
19650: PUSH
19651: LD_INT 1
19653: ST_TO_ADDR
// if p3 = 24 then
19654: LD_VAR 0 3
19658: PUSH
19659: LD_INT 24
19661: EQUAL
19662: IFFALSE 19672
// sShovel := true ;
19664: LD_ADDR_EXP 99
19668: PUSH
19669: LD_INT 1
19671: ST_TO_ADDR
// if p3 = 25 then
19672: LD_VAR 0 3
19676: PUSH
19677: LD_INT 25
19679: EQUAL
19680: IFFALSE 19690
// sSheik := true ;
19682: LD_ADDR_EXP 100
19686: PUSH
19687: LD_INT 1
19689: ST_TO_ADDR
// if p3 = 26 then
19690: LD_VAR 0 3
19694: PUSH
19695: LD_INT 26
19697: EQUAL
19698: IFFALSE 19708
// sEarthquake := true ;
19700: LD_ADDR_EXP 102
19704: PUSH
19705: LD_INT 1
19707: ST_TO_ADDR
// if p3 = 27 then
19708: LD_VAR 0 3
19712: PUSH
19713: LD_INT 27
19715: EQUAL
19716: IFFALSE 19726
// sAI := true ;
19718: LD_ADDR_EXP 103
19722: PUSH
19723: LD_INT 1
19725: ST_TO_ADDR
// if p3 = 28 then
19726: LD_VAR 0 3
19730: PUSH
19731: LD_INT 28
19733: EQUAL
19734: IFFALSE 19744
// sCargo := true ;
19736: LD_ADDR_EXP 106
19740: PUSH
19741: LD_INT 1
19743: ST_TO_ADDR
// if p3 = 29 then
19744: LD_VAR 0 3
19748: PUSH
19749: LD_INT 29
19751: EQUAL
19752: IFFALSE 19762
// sDLaser := true ;
19754: LD_ADDR_EXP 107
19758: PUSH
19759: LD_INT 1
19761: ST_TO_ADDR
// if p3 = 30 then
19762: LD_VAR 0 3
19766: PUSH
19767: LD_INT 30
19769: EQUAL
19770: IFFALSE 19780
// sExchange := true ;
19772: LD_ADDR_EXP 108
19776: PUSH
19777: LD_INT 1
19779: ST_TO_ADDR
// if p3 = 31 then
19780: LD_VAR 0 3
19784: PUSH
19785: LD_INT 31
19787: EQUAL
19788: IFFALSE 19798
// sFac := true ;
19790: LD_ADDR_EXP 109
19794: PUSH
19795: LD_INT 1
19797: ST_TO_ADDR
// if p3 = 32 then
19798: LD_VAR 0 3
19802: PUSH
19803: LD_INT 32
19805: EQUAL
19806: IFFALSE 19816
// sPower := true ;
19808: LD_ADDR_EXP 110
19812: PUSH
19813: LD_INT 1
19815: ST_TO_ADDR
// if p3 = 33 then
19816: LD_VAR 0 3
19820: PUSH
19821: LD_INT 33
19823: EQUAL
19824: IFFALSE 19834
// sRandom := true ;
19826: LD_ADDR_EXP 111
19830: PUSH
19831: LD_INT 1
19833: ST_TO_ADDR
// if p3 = 34 then
19834: LD_VAR 0 3
19838: PUSH
19839: LD_INT 34
19841: EQUAL
19842: IFFALSE 19852
// sShield := true ;
19844: LD_ADDR_EXP 112
19848: PUSH
19849: LD_INT 1
19851: ST_TO_ADDR
// if p3 = 35 then
19852: LD_VAR 0 3
19856: PUSH
19857: LD_INT 35
19859: EQUAL
19860: IFFALSE 19870
// sTime := true ;
19862: LD_ADDR_EXP 113
19866: PUSH
19867: LD_INT 1
19869: ST_TO_ADDR
// if p3 = 36 then
19870: LD_VAR 0 3
19874: PUSH
19875: LD_INT 36
19877: EQUAL
19878: IFFALSE 19888
// sTools := true ;
19880: LD_ADDR_EXP 114
19884: PUSH
19885: LD_INT 1
19887: ST_TO_ADDR
// if p3 = 101 then
19888: LD_VAR 0 3
19892: PUSH
19893: LD_INT 101
19895: EQUAL
19896: IFFALSE 19906
// sSold := true ;
19898: LD_ADDR_EXP 79
19902: PUSH
19903: LD_INT 1
19905: ST_TO_ADDR
// if p3 = 102 then
19906: LD_VAR 0 3
19910: PUSH
19911: LD_INT 102
19913: EQUAL
19914: IFFALSE 19924
// sDiff := true ;
19916: LD_ADDR_EXP 80
19920: PUSH
19921: LD_INT 1
19923: ST_TO_ADDR
// if p3 = 103 then
19924: LD_VAR 0 3
19928: PUSH
19929: LD_INT 103
19931: EQUAL
19932: IFFALSE 19942
// sFog := true ;
19934: LD_ADDR_EXP 83
19938: PUSH
19939: LD_INT 1
19941: ST_TO_ADDR
// if p3 = 104 then
19942: LD_VAR 0 3
19946: PUSH
19947: LD_INT 104
19949: EQUAL
19950: IFFALSE 19960
// sReset := true ;
19952: LD_ADDR_EXP 84
19956: PUSH
19957: LD_INT 1
19959: ST_TO_ADDR
// if p3 = 105 then
19960: LD_VAR 0 3
19964: PUSH
19965: LD_INT 105
19967: EQUAL
19968: IFFALSE 19978
// sSun := true ;
19970: LD_ADDR_EXP 85
19974: PUSH
19975: LD_INT 1
19977: ST_TO_ADDR
// if p3 = 106 then
19978: LD_VAR 0 3
19982: PUSH
19983: LD_INT 106
19985: EQUAL
19986: IFFALSE 19996
// sTiger := true ;
19988: LD_ADDR_EXP 81
19992: PUSH
19993: LD_INT 1
19995: ST_TO_ADDR
// if p3 = 107 then
19996: LD_VAR 0 3
20000: PUSH
20001: LD_INT 107
20003: EQUAL
20004: IFFALSE 20014
// sBomb := true ;
20006: LD_ADDR_EXP 82
20010: PUSH
20011: LD_INT 1
20013: ST_TO_ADDR
// if p3 = 108 then
20014: LD_VAR 0 3
20018: PUSH
20019: LD_INT 108
20021: EQUAL
20022: IFFALSE 20032
// sWound := true ;
20024: LD_ADDR_EXP 90
20028: PUSH
20029: LD_INT 1
20031: ST_TO_ADDR
// if p3 = 109 then
20032: LD_VAR 0 3
20036: PUSH
20037: LD_INT 109
20039: EQUAL
20040: IFFALSE 20050
// sBetray := true ;
20042: LD_ADDR_EXP 94
20046: PUSH
20047: LD_INT 1
20049: ST_TO_ADDR
// if p3 = 110 then
20050: LD_VAR 0 3
20054: PUSH
20055: LD_INT 110
20057: EQUAL
20058: IFFALSE 20068
// sContamin := true ;
20060: LD_ADDR_EXP 95
20064: PUSH
20065: LD_INT 1
20067: ST_TO_ADDR
// if p3 = 111 then
20068: LD_VAR 0 3
20072: PUSH
20073: LD_INT 111
20075: EQUAL
20076: IFFALSE 20086
// sOil := true ;
20078: LD_ADDR_EXP 97
20082: PUSH
20083: LD_INT 1
20085: ST_TO_ADDR
// if p3 = 112 then
20086: LD_VAR 0 3
20090: PUSH
20091: LD_INT 112
20093: EQUAL
20094: IFFALSE 20104
// sStu := true ;
20096: LD_ADDR_EXP 101
20100: PUSH
20101: LD_INT 1
20103: ST_TO_ADDR
// if p3 = 113 then
20104: LD_VAR 0 3
20108: PUSH
20109: LD_INT 113
20111: EQUAL
20112: IFFALSE 20122
// sBazooka := true ;
20114: LD_ADDR_EXP 104
20118: PUSH
20119: LD_INT 1
20121: ST_TO_ADDR
// if p3 = 114 then
20122: LD_VAR 0 3
20126: PUSH
20127: LD_INT 114
20129: EQUAL
20130: IFFALSE 20140
// sMortar := true ;
20132: LD_ADDR_EXP 105
20136: PUSH
20137: LD_INT 1
20139: ST_TO_ADDR
// if p3 = 115 then
20140: LD_VAR 0 3
20144: PUSH
20145: LD_INT 115
20147: EQUAL
20148: IFFALSE 20158
// sRanger := true ;
20150: LD_ADDR_EXP 115
20154: PUSH
20155: LD_INT 1
20157: ST_TO_ADDR
// if p3 = 116 then
20158: LD_VAR 0 3
20162: PUSH
20163: LD_INT 116
20165: EQUAL
20166: IFFALSE 20176
// sComputer := true ;
20168: LD_ADDR_EXP 116
20172: PUSH
20173: LD_INT 1
20175: ST_TO_ADDR
// if p3 = 117 then
20176: LD_VAR 0 3
20180: PUSH
20181: LD_INT 117
20183: EQUAL
20184: IFFALSE 20194
// s30 := true ;
20186: LD_ADDR_EXP 117
20190: PUSH
20191: LD_INT 1
20193: ST_TO_ADDR
// if p3 = 118 then
20194: LD_VAR 0 3
20198: PUSH
20199: LD_INT 118
20201: EQUAL
20202: IFFALSE 20212
// s60 := true ;
20204: LD_ADDR_EXP 118
20208: PUSH
20209: LD_INT 1
20211: ST_TO_ADDR
// end ; if p2 = stream_mode then
20212: LD_VAR 0 2
20216: PUSH
20217: LD_INT 101
20219: EQUAL
20220: IFFALSE 20348
// begin case p3 of 1 :
20222: LD_VAR 0 3
20226: PUSH
20227: LD_INT 1
20229: DOUBLE
20230: EQUAL
20231: IFTRUE 20235
20233: GO 20242
20235: POP
// hHackUnlimitedResources ; 2 :
20236: CALL 32446 0 0
20240: GO 20348
20242: LD_INT 2
20244: DOUBLE
20245: EQUAL
20246: IFTRUE 20250
20248: GO 20257
20250: POP
// hHackSetLevel10 ; 3 :
20251: CALL 32579 0 0
20255: GO 20348
20257: LD_INT 3
20259: DOUBLE
20260: EQUAL
20261: IFTRUE 20265
20263: GO 20272
20265: POP
// hHackSetLevel10YourUnits ; 4 :
20266: CALL 32664 0 0
20270: GO 20348
20272: LD_INT 4
20274: DOUBLE
20275: EQUAL
20276: IFTRUE 20280
20278: GO 20287
20280: POP
// hHackInvincible ; 5 :
20281: CALL 33112 0 0
20285: GO 20348
20287: LD_INT 5
20289: DOUBLE
20290: EQUAL
20291: IFTRUE 20295
20293: GO 20302
20295: POP
// hHackInvisible ; 6 :
20296: CALL 33223 0 0
20300: GO 20348
20302: LD_INT 6
20304: DOUBLE
20305: EQUAL
20306: IFTRUE 20310
20308: GO 20317
20310: POP
// hHackChangeYourSide ; 7 :
20311: CALL 33280 0 0
20315: GO 20348
20317: LD_INT 7
20319: DOUBLE
20320: EQUAL
20321: IFTRUE 20325
20323: GO 20332
20325: POP
// hHackChangeUnitSide ; 8 :
20326: CALL 33322 0 0
20330: GO 20348
20332: LD_INT 8
20334: DOUBLE
20335: EQUAL
20336: IFTRUE 20340
20338: GO 20347
20340: POP
// hHackFog ; end ;
20341: CALL 33423 0 0
20345: GO 20348
20347: POP
// end ; end ;
20348: LD_VAR 0 7
20352: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20353: GO 20355
20355: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20356: LD_STRING initStreamRollete();
20358: PPUSH
20359: CALL_OW 559
// InitStreamMode ;
20363: CALL 20375 0 0
// DefineStreamItems ( false ) ;
20367: LD_INT 0
20369: PPUSH
20370: CALL 20839 0 1
// end ;
20374: END
// function InitStreamMode ; begin
20375: LD_INT 0
20377: PPUSH
// streamModeActive := false ;
20378: LD_ADDR_EXP 62
20382: PUSH
20383: LD_INT 0
20385: ST_TO_ADDR
// normalCounter := 36 ;
20386: LD_ADDR_EXP 63
20390: PUSH
20391: LD_INT 36
20393: ST_TO_ADDR
// hardcoreCounter := 18 ;
20394: LD_ADDR_EXP 64
20398: PUSH
20399: LD_INT 18
20401: ST_TO_ADDR
// sRocket := false ;
20402: LD_ADDR_EXP 67
20406: PUSH
20407: LD_INT 0
20409: ST_TO_ADDR
// sSpeed := false ;
20410: LD_ADDR_EXP 66
20414: PUSH
20415: LD_INT 0
20417: ST_TO_ADDR
// sEngine := false ;
20418: LD_ADDR_EXP 68
20422: PUSH
20423: LD_INT 0
20425: ST_TO_ADDR
// sSpec := false ;
20426: LD_ADDR_EXP 65
20430: PUSH
20431: LD_INT 0
20433: ST_TO_ADDR
// sLevel := false ;
20434: LD_ADDR_EXP 69
20438: PUSH
20439: LD_INT 0
20441: ST_TO_ADDR
// sArmoury := false ;
20442: LD_ADDR_EXP 70
20446: PUSH
20447: LD_INT 0
20449: ST_TO_ADDR
// sRadar := false ;
20450: LD_ADDR_EXP 71
20454: PUSH
20455: LD_INT 0
20457: ST_TO_ADDR
// sBunker := false ;
20458: LD_ADDR_EXP 72
20462: PUSH
20463: LD_INT 0
20465: ST_TO_ADDR
// sHack := false ;
20466: LD_ADDR_EXP 73
20470: PUSH
20471: LD_INT 0
20473: ST_TO_ADDR
// sFire := false ;
20474: LD_ADDR_EXP 74
20478: PUSH
20479: LD_INT 0
20481: ST_TO_ADDR
// sRefresh := false ;
20482: LD_ADDR_EXP 75
20486: PUSH
20487: LD_INT 0
20489: ST_TO_ADDR
// sExp := false ;
20490: LD_ADDR_EXP 76
20494: PUSH
20495: LD_INT 0
20497: ST_TO_ADDR
// sDepot := false ;
20498: LD_ADDR_EXP 77
20502: PUSH
20503: LD_INT 0
20505: ST_TO_ADDR
// sFlag := false ;
20506: LD_ADDR_EXP 78
20510: PUSH
20511: LD_INT 0
20513: ST_TO_ADDR
// sKamikadze := false ;
20514: LD_ADDR_EXP 86
20518: PUSH
20519: LD_INT 0
20521: ST_TO_ADDR
// sTroll := false ;
20522: LD_ADDR_EXP 87
20526: PUSH
20527: LD_INT 0
20529: ST_TO_ADDR
// sSlow := false ;
20530: LD_ADDR_EXP 88
20534: PUSH
20535: LD_INT 0
20537: ST_TO_ADDR
// sLack := false ;
20538: LD_ADDR_EXP 89
20542: PUSH
20543: LD_INT 0
20545: ST_TO_ADDR
// sTank := false ;
20546: LD_ADDR_EXP 91
20550: PUSH
20551: LD_INT 0
20553: ST_TO_ADDR
// sRemote := false ;
20554: LD_ADDR_EXP 92
20558: PUSH
20559: LD_INT 0
20561: ST_TO_ADDR
// sPowell := false ;
20562: LD_ADDR_EXP 93
20566: PUSH
20567: LD_INT 0
20569: ST_TO_ADDR
// sTeleport := false ;
20570: LD_ADDR_EXP 96
20574: PUSH
20575: LD_INT 0
20577: ST_TO_ADDR
// sOilTower := false ;
20578: LD_ADDR_EXP 98
20582: PUSH
20583: LD_INT 0
20585: ST_TO_ADDR
// sShovel := false ;
20586: LD_ADDR_EXP 99
20590: PUSH
20591: LD_INT 0
20593: ST_TO_ADDR
// sSheik := false ;
20594: LD_ADDR_EXP 100
20598: PUSH
20599: LD_INT 0
20601: ST_TO_ADDR
// sEarthquake := false ;
20602: LD_ADDR_EXP 102
20606: PUSH
20607: LD_INT 0
20609: ST_TO_ADDR
// sAI := false ;
20610: LD_ADDR_EXP 103
20614: PUSH
20615: LD_INT 0
20617: ST_TO_ADDR
// sCargo := false ;
20618: LD_ADDR_EXP 106
20622: PUSH
20623: LD_INT 0
20625: ST_TO_ADDR
// sDLaser := false ;
20626: LD_ADDR_EXP 107
20630: PUSH
20631: LD_INT 0
20633: ST_TO_ADDR
// sExchange := false ;
20634: LD_ADDR_EXP 108
20638: PUSH
20639: LD_INT 0
20641: ST_TO_ADDR
// sFac := false ;
20642: LD_ADDR_EXP 109
20646: PUSH
20647: LD_INT 0
20649: ST_TO_ADDR
// sPower := false ;
20650: LD_ADDR_EXP 110
20654: PUSH
20655: LD_INT 0
20657: ST_TO_ADDR
// sRandom := false ;
20658: LD_ADDR_EXP 111
20662: PUSH
20663: LD_INT 0
20665: ST_TO_ADDR
// sShield := false ;
20666: LD_ADDR_EXP 112
20670: PUSH
20671: LD_INT 0
20673: ST_TO_ADDR
// sTime := false ;
20674: LD_ADDR_EXP 113
20678: PUSH
20679: LD_INT 0
20681: ST_TO_ADDR
// sTools := false ;
20682: LD_ADDR_EXP 114
20686: PUSH
20687: LD_INT 0
20689: ST_TO_ADDR
// sSold := false ;
20690: LD_ADDR_EXP 79
20694: PUSH
20695: LD_INT 0
20697: ST_TO_ADDR
// sDiff := false ;
20698: LD_ADDR_EXP 80
20702: PUSH
20703: LD_INT 0
20705: ST_TO_ADDR
// sFog := false ;
20706: LD_ADDR_EXP 83
20710: PUSH
20711: LD_INT 0
20713: ST_TO_ADDR
// sReset := false ;
20714: LD_ADDR_EXP 84
20718: PUSH
20719: LD_INT 0
20721: ST_TO_ADDR
// sSun := false ;
20722: LD_ADDR_EXP 85
20726: PUSH
20727: LD_INT 0
20729: ST_TO_ADDR
// sTiger := false ;
20730: LD_ADDR_EXP 81
20734: PUSH
20735: LD_INT 0
20737: ST_TO_ADDR
// sBomb := false ;
20738: LD_ADDR_EXP 82
20742: PUSH
20743: LD_INT 0
20745: ST_TO_ADDR
// sWound := false ;
20746: LD_ADDR_EXP 90
20750: PUSH
20751: LD_INT 0
20753: ST_TO_ADDR
// sBetray := false ;
20754: LD_ADDR_EXP 94
20758: PUSH
20759: LD_INT 0
20761: ST_TO_ADDR
// sContamin := false ;
20762: LD_ADDR_EXP 95
20766: PUSH
20767: LD_INT 0
20769: ST_TO_ADDR
// sOil := false ;
20770: LD_ADDR_EXP 97
20774: PUSH
20775: LD_INT 0
20777: ST_TO_ADDR
// sStu := false ;
20778: LD_ADDR_EXP 101
20782: PUSH
20783: LD_INT 0
20785: ST_TO_ADDR
// sBazooka := false ;
20786: LD_ADDR_EXP 104
20790: PUSH
20791: LD_INT 0
20793: ST_TO_ADDR
// sMortar := false ;
20794: LD_ADDR_EXP 105
20798: PUSH
20799: LD_INT 0
20801: ST_TO_ADDR
// sRanger := false ;
20802: LD_ADDR_EXP 115
20806: PUSH
20807: LD_INT 0
20809: ST_TO_ADDR
// sComputer := false ;
20810: LD_ADDR_EXP 116
20814: PUSH
20815: LD_INT 0
20817: ST_TO_ADDR
// s30 := false ;
20818: LD_ADDR_EXP 117
20822: PUSH
20823: LD_INT 0
20825: ST_TO_ADDR
// s60 := false ;
20826: LD_ADDR_EXP 118
20830: PUSH
20831: LD_INT 0
20833: ST_TO_ADDR
// end ;
20834: LD_VAR 0 1
20838: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20839: LD_INT 0
20841: PPUSH
20842: PPUSH
20843: PPUSH
20844: PPUSH
20845: PPUSH
20846: PPUSH
20847: PPUSH
// result := [ ] ;
20848: LD_ADDR_VAR 0 2
20852: PUSH
20853: EMPTY
20854: ST_TO_ADDR
// if campaign_id = 1 then
20855: LD_OWVAR 69
20859: PUSH
20860: LD_INT 1
20862: EQUAL
20863: IFFALSE 24029
// begin case mission_number of 1 :
20865: LD_OWVAR 70
20869: PUSH
20870: LD_INT 1
20872: DOUBLE
20873: EQUAL
20874: IFTRUE 20878
20876: GO 20954
20878: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20879: LD_ADDR_VAR 0 2
20883: PUSH
20884: LD_INT 2
20886: PUSH
20887: LD_INT 4
20889: PUSH
20890: LD_INT 11
20892: PUSH
20893: LD_INT 12
20895: PUSH
20896: LD_INT 15
20898: PUSH
20899: LD_INT 16
20901: PUSH
20902: LD_INT 22
20904: PUSH
20905: LD_INT 23
20907: PUSH
20908: LD_INT 26
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 101
20924: PUSH
20925: LD_INT 102
20927: PUSH
20928: LD_INT 106
20930: PUSH
20931: LD_INT 116
20933: PUSH
20934: LD_INT 117
20936: PUSH
20937: LD_INT 118
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: ST_TO_ADDR
20952: GO 24027
20954: LD_INT 2
20956: DOUBLE
20957: EQUAL
20958: IFTRUE 20962
20960: GO 21046
20962: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20963: LD_ADDR_VAR 0 2
20967: PUSH
20968: LD_INT 2
20970: PUSH
20971: LD_INT 4
20973: PUSH
20974: LD_INT 11
20976: PUSH
20977: LD_INT 12
20979: PUSH
20980: LD_INT 15
20982: PUSH
20983: LD_INT 16
20985: PUSH
20986: LD_INT 22
20988: PUSH
20989: LD_INT 23
20991: PUSH
20992: LD_INT 26
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 101
21008: PUSH
21009: LD_INT 102
21011: PUSH
21012: LD_INT 105
21014: PUSH
21015: LD_INT 106
21017: PUSH
21018: LD_INT 108
21020: PUSH
21021: LD_INT 116
21023: PUSH
21024: LD_INT 117
21026: PUSH
21027: LD_INT 118
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: ST_TO_ADDR
21044: GO 24027
21046: LD_INT 3
21048: DOUBLE
21049: EQUAL
21050: IFTRUE 21054
21052: GO 21142
21054: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21055: LD_ADDR_VAR 0 2
21059: PUSH
21060: LD_INT 2
21062: PUSH
21063: LD_INT 4
21065: PUSH
21066: LD_INT 5
21068: PUSH
21069: LD_INT 11
21071: PUSH
21072: LD_INT 12
21074: PUSH
21075: LD_INT 15
21077: PUSH
21078: LD_INT 16
21080: PUSH
21081: LD_INT 22
21083: PUSH
21084: LD_INT 26
21086: PUSH
21087: LD_INT 36
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 101
21104: PUSH
21105: LD_INT 102
21107: PUSH
21108: LD_INT 105
21110: PUSH
21111: LD_INT 106
21113: PUSH
21114: LD_INT 108
21116: PUSH
21117: LD_INT 116
21119: PUSH
21120: LD_INT 117
21122: PUSH
21123: LD_INT 118
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: ST_TO_ADDR
21140: GO 24027
21142: LD_INT 4
21144: DOUBLE
21145: EQUAL
21146: IFTRUE 21150
21148: GO 21246
21150: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21151: LD_ADDR_VAR 0 2
21155: PUSH
21156: LD_INT 2
21158: PUSH
21159: LD_INT 4
21161: PUSH
21162: LD_INT 5
21164: PUSH
21165: LD_INT 8
21167: PUSH
21168: LD_INT 11
21170: PUSH
21171: LD_INT 12
21173: PUSH
21174: LD_INT 15
21176: PUSH
21177: LD_INT 16
21179: PUSH
21180: LD_INT 22
21182: PUSH
21183: LD_INT 23
21185: PUSH
21186: LD_INT 26
21188: PUSH
21189: LD_INT 36
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 101
21208: PUSH
21209: LD_INT 102
21211: PUSH
21212: LD_INT 105
21214: PUSH
21215: LD_INT 106
21217: PUSH
21218: LD_INT 108
21220: PUSH
21221: LD_INT 116
21223: PUSH
21224: LD_INT 117
21226: PUSH
21227: LD_INT 118
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: ST_TO_ADDR
21244: GO 24027
21246: LD_INT 5
21248: DOUBLE
21249: EQUAL
21250: IFTRUE 21254
21252: GO 21366
21254: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21255: LD_ADDR_VAR 0 2
21259: PUSH
21260: LD_INT 2
21262: PUSH
21263: LD_INT 4
21265: PUSH
21266: LD_INT 5
21268: PUSH
21269: LD_INT 6
21271: PUSH
21272: LD_INT 8
21274: PUSH
21275: LD_INT 11
21277: PUSH
21278: LD_INT 12
21280: PUSH
21281: LD_INT 15
21283: PUSH
21284: LD_INT 16
21286: PUSH
21287: LD_INT 22
21289: PUSH
21290: LD_INT 23
21292: PUSH
21293: LD_INT 25
21295: PUSH
21296: LD_INT 26
21298: PUSH
21299: LD_INT 36
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 101
21320: PUSH
21321: LD_INT 102
21323: PUSH
21324: LD_INT 105
21326: PUSH
21327: LD_INT 106
21329: PUSH
21330: LD_INT 108
21332: PUSH
21333: LD_INT 109
21335: PUSH
21336: LD_INT 112
21338: PUSH
21339: LD_INT 116
21341: PUSH
21342: LD_INT 117
21344: PUSH
21345: LD_INT 118
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: ST_TO_ADDR
21364: GO 24027
21366: LD_INT 6
21368: DOUBLE
21369: EQUAL
21370: IFTRUE 21374
21372: GO 21506
21374: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21375: LD_ADDR_VAR 0 2
21379: PUSH
21380: LD_INT 2
21382: PUSH
21383: LD_INT 4
21385: PUSH
21386: LD_INT 5
21388: PUSH
21389: LD_INT 6
21391: PUSH
21392: LD_INT 8
21394: PUSH
21395: LD_INT 11
21397: PUSH
21398: LD_INT 12
21400: PUSH
21401: LD_INT 15
21403: PUSH
21404: LD_INT 16
21406: PUSH
21407: LD_INT 20
21409: PUSH
21410: LD_INT 21
21412: PUSH
21413: LD_INT 22
21415: PUSH
21416: LD_INT 23
21418: PUSH
21419: LD_INT 25
21421: PUSH
21422: LD_INT 26
21424: PUSH
21425: LD_INT 30
21427: PUSH
21428: LD_INT 31
21430: PUSH
21431: LD_INT 32
21433: PUSH
21434: LD_INT 36
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 101
21460: PUSH
21461: LD_INT 102
21463: PUSH
21464: LD_INT 105
21466: PUSH
21467: LD_INT 106
21469: PUSH
21470: LD_INT 108
21472: PUSH
21473: LD_INT 109
21475: PUSH
21476: LD_INT 112
21478: PUSH
21479: LD_INT 116
21481: PUSH
21482: LD_INT 117
21484: PUSH
21485: LD_INT 118
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: ST_TO_ADDR
21504: GO 24027
21506: LD_INT 7
21508: DOUBLE
21509: EQUAL
21510: IFTRUE 21514
21512: GO 21626
21514: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21515: LD_ADDR_VAR 0 2
21519: PUSH
21520: LD_INT 2
21522: PUSH
21523: LD_INT 4
21525: PUSH
21526: LD_INT 5
21528: PUSH
21529: LD_INT 7
21531: PUSH
21532: LD_INT 11
21534: PUSH
21535: LD_INT 12
21537: PUSH
21538: LD_INT 15
21540: PUSH
21541: LD_INT 16
21543: PUSH
21544: LD_INT 20
21546: PUSH
21547: LD_INT 21
21549: PUSH
21550: LD_INT 22
21552: PUSH
21553: LD_INT 23
21555: PUSH
21556: LD_INT 25
21558: PUSH
21559: LD_INT 26
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 101
21580: PUSH
21581: LD_INT 102
21583: PUSH
21584: LD_INT 103
21586: PUSH
21587: LD_INT 105
21589: PUSH
21590: LD_INT 106
21592: PUSH
21593: LD_INT 108
21595: PUSH
21596: LD_INT 112
21598: PUSH
21599: LD_INT 116
21601: PUSH
21602: LD_INT 117
21604: PUSH
21605: LD_INT 118
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: ST_TO_ADDR
21624: GO 24027
21626: LD_INT 8
21628: DOUBLE
21629: EQUAL
21630: IFTRUE 21634
21632: GO 21774
21634: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21635: LD_ADDR_VAR 0 2
21639: PUSH
21640: LD_INT 2
21642: PUSH
21643: LD_INT 4
21645: PUSH
21646: LD_INT 5
21648: PUSH
21649: LD_INT 6
21651: PUSH
21652: LD_INT 7
21654: PUSH
21655: LD_INT 8
21657: PUSH
21658: LD_INT 11
21660: PUSH
21661: LD_INT 12
21663: PUSH
21664: LD_INT 15
21666: PUSH
21667: LD_INT 16
21669: PUSH
21670: LD_INT 20
21672: PUSH
21673: LD_INT 21
21675: PUSH
21676: LD_INT 22
21678: PUSH
21679: LD_INT 23
21681: PUSH
21682: LD_INT 25
21684: PUSH
21685: LD_INT 26
21687: PUSH
21688: LD_INT 30
21690: PUSH
21691: LD_INT 31
21693: PUSH
21694: LD_INT 32
21696: PUSH
21697: LD_INT 36
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 101
21724: PUSH
21725: LD_INT 102
21727: PUSH
21728: LD_INT 103
21730: PUSH
21731: LD_INT 105
21733: PUSH
21734: LD_INT 106
21736: PUSH
21737: LD_INT 108
21739: PUSH
21740: LD_INT 109
21742: PUSH
21743: LD_INT 112
21745: PUSH
21746: LD_INT 116
21748: PUSH
21749: LD_INT 117
21751: PUSH
21752: LD_INT 118
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: ST_TO_ADDR
21772: GO 24027
21774: LD_INT 9
21776: DOUBLE
21777: EQUAL
21778: IFTRUE 21782
21780: GO 21930
21782: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21783: LD_ADDR_VAR 0 2
21787: PUSH
21788: LD_INT 2
21790: PUSH
21791: LD_INT 4
21793: PUSH
21794: LD_INT 5
21796: PUSH
21797: LD_INT 6
21799: PUSH
21800: LD_INT 7
21802: PUSH
21803: LD_INT 8
21805: PUSH
21806: LD_INT 11
21808: PUSH
21809: LD_INT 12
21811: PUSH
21812: LD_INT 15
21814: PUSH
21815: LD_INT 16
21817: PUSH
21818: LD_INT 20
21820: PUSH
21821: LD_INT 21
21823: PUSH
21824: LD_INT 22
21826: PUSH
21827: LD_INT 23
21829: PUSH
21830: LD_INT 25
21832: PUSH
21833: LD_INT 26
21835: PUSH
21836: LD_INT 28
21838: PUSH
21839: LD_INT 30
21841: PUSH
21842: LD_INT 31
21844: PUSH
21845: LD_INT 32
21847: PUSH
21848: LD_INT 36
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 101
21876: PUSH
21877: LD_INT 102
21879: PUSH
21880: LD_INT 103
21882: PUSH
21883: LD_INT 105
21885: PUSH
21886: LD_INT 106
21888: PUSH
21889: LD_INT 108
21891: PUSH
21892: LD_INT 109
21894: PUSH
21895: LD_INT 112
21897: PUSH
21898: LD_INT 114
21900: PUSH
21901: LD_INT 116
21903: PUSH
21904: LD_INT 117
21906: PUSH
21907: LD_INT 118
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: ST_TO_ADDR
21928: GO 24027
21930: LD_INT 10
21932: DOUBLE
21933: EQUAL
21934: IFTRUE 21938
21936: GO 22134
21938: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21939: LD_ADDR_VAR 0 2
21943: PUSH
21944: LD_INT 2
21946: PUSH
21947: LD_INT 4
21949: PUSH
21950: LD_INT 5
21952: PUSH
21953: LD_INT 6
21955: PUSH
21956: LD_INT 7
21958: PUSH
21959: LD_INT 8
21961: PUSH
21962: LD_INT 9
21964: PUSH
21965: LD_INT 10
21967: PUSH
21968: LD_INT 11
21970: PUSH
21971: LD_INT 12
21973: PUSH
21974: LD_INT 13
21976: PUSH
21977: LD_INT 14
21979: PUSH
21980: LD_INT 15
21982: PUSH
21983: LD_INT 16
21985: PUSH
21986: LD_INT 17
21988: PUSH
21989: LD_INT 18
21991: PUSH
21992: LD_INT 19
21994: PUSH
21995: LD_INT 20
21997: PUSH
21998: LD_INT 21
22000: PUSH
22001: LD_INT 22
22003: PUSH
22004: LD_INT 23
22006: PUSH
22007: LD_INT 24
22009: PUSH
22010: LD_INT 25
22012: PUSH
22013: LD_INT 26
22015: PUSH
22016: LD_INT 28
22018: PUSH
22019: LD_INT 30
22021: PUSH
22022: LD_INT 31
22024: PUSH
22025: LD_INT 32
22027: PUSH
22028: LD_INT 36
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 101
22064: PUSH
22065: LD_INT 102
22067: PUSH
22068: LD_INT 103
22070: PUSH
22071: LD_INT 104
22073: PUSH
22074: LD_INT 105
22076: PUSH
22077: LD_INT 106
22079: PUSH
22080: LD_INT 107
22082: PUSH
22083: LD_INT 108
22085: PUSH
22086: LD_INT 109
22088: PUSH
22089: LD_INT 110
22091: PUSH
22092: LD_INT 111
22094: PUSH
22095: LD_INT 112
22097: PUSH
22098: LD_INT 114
22100: PUSH
22101: LD_INT 116
22103: PUSH
22104: LD_INT 117
22106: PUSH
22107: LD_INT 118
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: ST_TO_ADDR
22132: GO 24027
22134: LD_INT 11
22136: DOUBLE
22137: EQUAL
22138: IFTRUE 22142
22140: GO 22346
22142: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22143: LD_ADDR_VAR 0 2
22147: PUSH
22148: LD_INT 2
22150: PUSH
22151: LD_INT 3
22153: PUSH
22154: LD_INT 4
22156: PUSH
22157: LD_INT 5
22159: PUSH
22160: LD_INT 6
22162: PUSH
22163: LD_INT 7
22165: PUSH
22166: LD_INT 8
22168: PUSH
22169: LD_INT 9
22171: PUSH
22172: LD_INT 10
22174: PUSH
22175: LD_INT 11
22177: PUSH
22178: LD_INT 12
22180: PUSH
22181: LD_INT 13
22183: PUSH
22184: LD_INT 14
22186: PUSH
22187: LD_INT 15
22189: PUSH
22190: LD_INT 16
22192: PUSH
22193: LD_INT 17
22195: PUSH
22196: LD_INT 18
22198: PUSH
22199: LD_INT 19
22201: PUSH
22202: LD_INT 20
22204: PUSH
22205: LD_INT 21
22207: PUSH
22208: LD_INT 22
22210: PUSH
22211: LD_INT 23
22213: PUSH
22214: LD_INT 24
22216: PUSH
22217: LD_INT 25
22219: PUSH
22220: LD_INT 26
22222: PUSH
22223: LD_INT 28
22225: PUSH
22226: LD_INT 30
22228: PUSH
22229: LD_INT 31
22231: PUSH
22232: LD_INT 32
22234: PUSH
22235: LD_INT 34
22237: PUSH
22238: LD_INT 36
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 101
22276: PUSH
22277: LD_INT 102
22279: PUSH
22280: LD_INT 103
22282: PUSH
22283: LD_INT 104
22285: PUSH
22286: LD_INT 105
22288: PUSH
22289: LD_INT 106
22291: PUSH
22292: LD_INT 107
22294: PUSH
22295: LD_INT 108
22297: PUSH
22298: LD_INT 109
22300: PUSH
22301: LD_INT 110
22303: PUSH
22304: LD_INT 111
22306: PUSH
22307: LD_INT 112
22309: PUSH
22310: LD_INT 114
22312: PUSH
22313: LD_INT 116
22315: PUSH
22316: LD_INT 117
22318: PUSH
22319: LD_INT 118
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: ST_TO_ADDR
22344: GO 24027
22346: LD_INT 12
22348: DOUBLE
22349: EQUAL
22350: IFTRUE 22354
22352: GO 22574
22354: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22355: LD_ADDR_VAR 0 2
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: LD_INT 2
22365: PUSH
22366: LD_INT 3
22368: PUSH
22369: LD_INT 4
22371: PUSH
22372: LD_INT 5
22374: PUSH
22375: LD_INT 6
22377: PUSH
22378: LD_INT 7
22380: PUSH
22381: LD_INT 8
22383: PUSH
22384: LD_INT 9
22386: PUSH
22387: LD_INT 10
22389: PUSH
22390: LD_INT 11
22392: PUSH
22393: LD_INT 12
22395: PUSH
22396: LD_INT 13
22398: PUSH
22399: LD_INT 14
22401: PUSH
22402: LD_INT 15
22404: PUSH
22405: LD_INT 16
22407: PUSH
22408: LD_INT 17
22410: PUSH
22411: LD_INT 18
22413: PUSH
22414: LD_INT 19
22416: PUSH
22417: LD_INT 20
22419: PUSH
22420: LD_INT 21
22422: PUSH
22423: LD_INT 22
22425: PUSH
22426: LD_INT 23
22428: PUSH
22429: LD_INT 24
22431: PUSH
22432: LD_INT 25
22434: PUSH
22435: LD_INT 26
22437: PUSH
22438: LD_INT 27
22440: PUSH
22441: LD_INT 28
22443: PUSH
22444: LD_INT 30
22446: PUSH
22447: LD_INT 31
22449: PUSH
22450: LD_INT 32
22452: PUSH
22453: LD_INT 33
22455: PUSH
22456: LD_INT 34
22458: PUSH
22459: LD_INT 36
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 101
22500: PUSH
22501: LD_INT 102
22503: PUSH
22504: LD_INT 103
22506: PUSH
22507: LD_INT 104
22509: PUSH
22510: LD_INT 105
22512: PUSH
22513: LD_INT 106
22515: PUSH
22516: LD_INT 107
22518: PUSH
22519: LD_INT 108
22521: PUSH
22522: LD_INT 109
22524: PUSH
22525: LD_INT 110
22527: PUSH
22528: LD_INT 111
22530: PUSH
22531: LD_INT 112
22533: PUSH
22534: LD_INT 113
22536: PUSH
22537: LD_INT 114
22539: PUSH
22540: LD_INT 116
22542: PUSH
22543: LD_INT 117
22545: PUSH
22546: LD_INT 118
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: ST_TO_ADDR
22572: GO 24027
22574: LD_INT 13
22576: DOUBLE
22577: EQUAL
22578: IFTRUE 22582
22580: GO 22790
22582: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22583: LD_ADDR_VAR 0 2
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: LD_INT 2
22593: PUSH
22594: LD_INT 3
22596: PUSH
22597: LD_INT 4
22599: PUSH
22600: LD_INT 5
22602: PUSH
22603: LD_INT 8
22605: PUSH
22606: LD_INT 9
22608: PUSH
22609: LD_INT 10
22611: PUSH
22612: LD_INT 11
22614: PUSH
22615: LD_INT 12
22617: PUSH
22618: LD_INT 14
22620: PUSH
22621: LD_INT 15
22623: PUSH
22624: LD_INT 16
22626: PUSH
22627: LD_INT 17
22629: PUSH
22630: LD_INT 18
22632: PUSH
22633: LD_INT 19
22635: PUSH
22636: LD_INT 20
22638: PUSH
22639: LD_INT 21
22641: PUSH
22642: LD_INT 22
22644: PUSH
22645: LD_INT 23
22647: PUSH
22648: LD_INT 24
22650: PUSH
22651: LD_INT 25
22653: PUSH
22654: LD_INT 26
22656: PUSH
22657: LD_INT 27
22659: PUSH
22660: LD_INT 28
22662: PUSH
22663: LD_INT 30
22665: PUSH
22666: LD_INT 31
22668: PUSH
22669: LD_INT 32
22671: PUSH
22672: LD_INT 33
22674: PUSH
22675: LD_INT 34
22677: PUSH
22678: LD_INT 36
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 101
22716: PUSH
22717: LD_INT 102
22719: PUSH
22720: LD_INT 103
22722: PUSH
22723: LD_INT 104
22725: PUSH
22726: LD_INT 105
22728: PUSH
22729: LD_INT 106
22731: PUSH
22732: LD_INT 107
22734: PUSH
22735: LD_INT 108
22737: PUSH
22738: LD_INT 109
22740: PUSH
22741: LD_INT 110
22743: PUSH
22744: LD_INT 111
22746: PUSH
22747: LD_INT 112
22749: PUSH
22750: LD_INT 113
22752: PUSH
22753: LD_INT 114
22755: PUSH
22756: LD_INT 116
22758: PUSH
22759: LD_INT 117
22761: PUSH
22762: LD_INT 118
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: ST_TO_ADDR
22788: GO 24027
22790: LD_INT 14
22792: DOUBLE
22793: EQUAL
22794: IFTRUE 22798
22796: GO 23022
22798: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22799: LD_ADDR_VAR 0 2
22803: PUSH
22804: LD_INT 1
22806: PUSH
22807: LD_INT 2
22809: PUSH
22810: LD_INT 3
22812: PUSH
22813: LD_INT 4
22815: PUSH
22816: LD_INT 5
22818: PUSH
22819: LD_INT 6
22821: PUSH
22822: LD_INT 7
22824: PUSH
22825: LD_INT 8
22827: PUSH
22828: LD_INT 9
22830: PUSH
22831: LD_INT 10
22833: PUSH
22834: LD_INT 11
22836: PUSH
22837: LD_INT 12
22839: PUSH
22840: LD_INT 13
22842: PUSH
22843: LD_INT 14
22845: PUSH
22846: LD_INT 15
22848: PUSH
22849: LD_INT 16
22851: PUSH
22852: LD_INT 17
22854: PUSH
22855: LD_INT 18
22857: PUSH
22858: LD_INT 19
22860: PUSH
22861: LD_INT 20
22863: PUSH
22864: LD_INT 21
22866: PUSH
22867: LD_INT 22
22869: PUSH
22870: LD_INT 23
22872: PUSH
22873: LD_INT 24
22875: PUSH
22876: LD_INT 25
22878: PUSH
22879: LD_INT 26
22881: PUSH
22882: LD_INT 27
22884: PUSH
22885: LD_INT 28
22887: PUSH
22888: LD_INT 29
22890: PUSH
22891: LD_INT 30
22893: PUSH
22894: LD_INT 31
22896: PUSH
22897: LD_INT 32
22899: PUSH
22900: LD_INT 33
22902: PUSH
22903: LD_INT 34
22905: PUSH
22906: LD_INT 36
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 101
22948: PUSH
22949: LD_INT 102
22951: PUSH
22952: LD_INT 103
22954: PUSH
22955: LD_INT 104
22957: PUSH
22958: LD_INT 105
22960: PUSH
22961: LD_INT 106
22963: PUSH
22964: LD_INT 107
22966: PUSH
22967: LD_INT 108
22969: PUSH
22970: LD_INT 109
22972: PUSH
22973: LD_INT 110
22975: PUSH
22976: LD_INT 111
22978: PUSH
22979: LD_INT 112
22981: PUSH
22982: LD_INT 113
22984: PUSH
22985: LD_INT 114
22987: PUSH
22988: LD_INT 116
22990: PUSH
22991: LD_INT 117
22993: PUSH
22994: LD_INT 118
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: ST_TO_ADDR
23020: GO 24027
23022: LD_INT 15
23024: DOUBLE
23025: EQUAL
23026: IFTRUE 23030
23028: GO 23254
23030: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23031: LD_ADDR_VAR 0 2
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: LD_INT 2
23041: PUSH
23042: LD_INT 3
23044: PUSH
23045: LD_INT 4
23047: PUSH
23048: LD_INT 5
23050: PUSH
23051: LD_INT 6
23053: PUSH
23054: LD_INT 7
23056: PUSH
23057: LD_INT 8
23059: PUSH
23060: LD_INT 9
23062: PUSH
23063: LD_INT 10
23065: PUSH
23066: LD_INT 11
23068: PUSH
23069: LD_INT 12
23071: PUSH
23072: LD_INT 13
23074: PUSH
23075: LD_INT 14
23077: PUSH
23078: LD_INT 15
23080: PUSH
23081: LD_INT 16
23083: PUSH
23084: LD_INT 17
23086: PUSH
23087: LD_INT 18
23089: PUSH
23090: LD_INT 19
23092: PUSH
23093: LD_INT 20
23095: PUSH
23096: LD_INT 21
23098: PUSH
23099: LD_INT 22
23101: PUSH
23102: LD_INT 23
23104: PUSH
23105: LD_INT 24
23107: PUSH
23108: LD_INT 25
23110: PUSH
23111: LD_INT 26
23113: PUSH
23114: LD_INT 27
23116: PUSH
23117: LD_INT 28
23119: PUSH
23120: LD_INT 29
23122: PUSH
23123: LD_INT 30
23125: PUSH
23126: LD_INT 31
23128: PUSH
23129: LD_INT 32
23131: PUSH
23132: LD_INT 33
23134: PUSH
23135: LD_INT 34
23137: PUSH
23138: LD_INT 36
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 101
23180: PUSH
23181: LD_INT 102
23183: PUSH
23184: LD_INT 103
23186: PUSH
23187: LD_INT 104
23189: PUSH
23190: LD_INT 105
23192: PUSH
23193: LD_INT 106
23195: PUSH
23196: LD_INT 107
23198: PUSH
23199: LD_INT 108
23201: PUSH
23202: LD_INT 109
23204: PUSH
23205: LD_INT 110
23207: PUSH
23208: LD_INT 111
23210: PUSH
23211: LD_INT 112
23213: PUSH
23214: LD_INT 113
23216: PUSH
23217: LD_INT 114
23219: PUSH
23220: LD_INT 116
23222: PUSH
23223: LD_INT 117
23225: PUSH
23226: LD_INT 118
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: ST_TO_ADDR
23252: GO 24027
23254: LD_INT 16
23256: DOUBLE
23257: EQUAL
23258: IFTRUE 23262
23260: GO 23398
23262: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23263: LD_ADDR_VAR 0 2
23267: PUSH
23268: LD_INT 2
23270: PUSH
23271: LD_INT 4
23273: PUSH
23274: LD_INT 5
23276: PUSH
23277: LD_INT 7
23279: PUSH
23280: LD_INT 11
23282: PUSH
23283: LD_INT 12
23285: PUSH
23286: LD_INT 15
23288: PUSH
23289: LD_INT 16
23291: PUSH
23292: LD_INT 20
23294: PUSH
23295: LD_INT 21
23297: PUSH
23298: LD_INT 22
23300: PUSH
23301: LD_INT 23
23303: PUSH
23304: LD_INT 25
23306: PUSH
23307: LD_INT 26
23309: PUSH
23310: LD_INT 30
23312: PUSH
23313: LD_INT 31
23315: PUSH
23316: LD_INT 32
23318: PUSH
23319: LD_INT 33
23321: PUSH
23322: LD_INT 34
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 101
23348: PUSH
23349: LD_INT 102
23351: PUSH
23352: LD_INT 103
23354: PUSH
23355: LD_INT 106
23357: PUSH
23358: LD_INT 108
23360: PUSH
23361: LD_INT 112
23363: PUSH
23364: LD_INT 113
23366: PUSH
23367: LD_INT 114
23369: PUSH
23370: LD_INT 116
23372: PUSH
23373: LD_INT 117
23375: PUSH
23376: LD_INT 118
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: ST_TO_ADDR
23396: GO 24027
23398: LD_INT 17
23400: DOUBLE
23401: EQUAL
23402: IFTRUE 23406
23404: GO 23630
23406: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23407: LD_ADDR_VAR 0 2
23411: PUSH
23412: LD_INT 1
23414: PUSH
23415: LD_INT 2
23417: PUSH
23418: LD_INT 3
23420: PUSH
23421: LD_INT 4
23423: PUSH
23424: LD_INT 5
23426: PUSH
23427: LD_INT 6
23429: PUSH
23430: LD_INT 7
23432: PUSH
23433: LD_INT 8
23435: PUSH
23436: LD_INT 9
23438: PUSH
23439: LD_INT 10
23441: PUSH
23442: LD_INT 11
23444: PUSH
23445: LD_INT 12
23447: PUSH
23448: LD_INT 13
23450: PUSH
23451: LD_INT 14
23453: PUSH
23454: LD_INT 15
23456: PUSH
23457: LD_INT 16
23459: PUSH
23460: LD_INT 17
23462: PUSH
23463: LD_INT 18
23465: PUSH
23466: LD_INT 19
23468: PUSH
23469: LD_INT 20
23471: PUSH
23472: LD_INT 21
23474: PUSH
23475: LD_INT 22
23477: PUSH
23478: LD_INT 23
23480: PUSH
23481: LD_INT 24
23483: PUSH
23484: LD_INT 25
23486: PUSH
23487: LD_INT 26
23489: PUSH
23490: LD_INT 27
23492: PUSH
23493: LD_INT 28
23495: PUSH
23496: LD_INT 29
23498: PUSH
23499: LD_INT 30
23501: PUSH
23502: LD_INT 31
23504: PUSH
23505: LD_INT 32
23507: PUSH
23508: LD_INT 33
23510: PUSH
23511: LD_INT 34
23513: PUSH
23514: LD_INT 36
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 101
23556: PUSH
23557: LD_INT 102
23559: PUSH
23560: LD_INT 103
23562: PUSH
23563: LD_INT 104
23565: PUSH
23566: LD_INT 105
23568: PUSH
23569: LD_INT 106
23571: PUSH
23572: LD_INT 107
23574: PUSH
23575: LD_INT 108
23577: PUSH
23578: LD_INT 109
23580: PUSH
23581: LD_INT 110
23583: PUSH
23584: LD_INT 111
23586: PUSH
23587: LD_INT 112
23589: PUSH
23590: LD_INT 113
23592: PUSH
23593: LD_INT 114
23595: PUSH
23596: LD_INT 116
23598: PUSH
23599: LD_INT 117
23601: PUSH
23602: LD_INT 118
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: ST_TO_ADDR
23628: GO 24027
23630: LD_INT 18
23632: DOUBLE
23633: EQUAL
23634: IFTRUE 23638
23636: GO 23786
23638: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23639: LD_ADDR_VAR 0 2
23643: PUSH
23644: LD_INT 2
23646: PUSH
23647: LD_INT 4
23649: PUSH
23650: LD_INT 5
23652: PUSH
23653: LD_INT 7
23655: PUSH
23656: LD_INT 11
23658: PUSH
23659: LD_INT 12
23661: PUSH
23662: LD_INT 15
23664: PUSH
23665: LD_INT 16
23667: PUSH
23668: LD_INT 20
23670: PUSH
23671: LD_INT 21
23673: PUSH
23674: LD_INT 22
23676: PUSH
23677: LD_INT 23
23679: PUSH
23680: LD_INT 25
23682: PUSH
23683: LD_INT 26
23685: PUSH
23686: LD_INT 30
23688: PUSH
23689: LD_INT 31
23691: PUSH
23692: LD_INT 32
23694: PUSH
23695: LD_INT 33
23697: PUSH
23698: LD_INT 34
23700: PUSH
23701: LD_INT 35
23703: PUSH
23704: LD_INT 36
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 101
23732: PUSH
23733: LD_INT 102
23735: PUSH
23736: LD_INT 103
23738: PUSH
23739: LD_INT 106
23741: PUSH
23742: LD_INT 108
23744: PUSH
23745: LD_INT 112
23747: PUSH
23748: LD_INT 113
23750: PUSH
23751: LD_INT 114
23753: PUSH
23754: LD_INT 115
23756: PUSH
23757: LD_INT 116
23759: PUSH
23760: LD_INT 117
23762: PUSH
23763: LD_INT 118
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: ST_TO_ADDR
23784: GO 24027
23786: LD_INT 19
23788: DOUBLE
23789: EQUAL
23790: IFTRUE 23794
23792: GO 24026
23794: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23795: LD_ADDR_VAR 0 2
23799: PUSH
23800: LD_INT 1
23802: PUSH
23803: LD_INT 2
23805: PUSH
23806: LD_INT 3
23808: PUSH
23809: LD_INT 4
23811: PUSH
23812: LD_INT 5
23814: PUSH
23815: LD_INT 6
23817: PUSH
23818: LD_INT 7
23820: PUSH
23821: LD_INT 8
23823: PUSH
23824: LD_INT 9
23826: PUSH
23827: LD_INT 10
23829: PUSH
23830: LD_INT 11
23832: PUSH
23833: LD_INT 12
23835: PUSH
23836: LD_INT 13
23838: PUSH
23839: LD_INT 14
23841: PUSH
23842: LD_INT 15
23844: PUSH
23845: LD_INT 16
23847: PUSH
23848: LD_INT 17
23850: PUSH
23851: LD_INT 18
23853: PUSH
23854: LD_INT 19
23856: PUSH
23857: LD_INT 20
23859: PUSH
23860: LD_INT 21
23862: PUSH
23863: LD_INT 22
23865: PUSH
23866: LD_INT 23
23868: PUSH
23869: LD_INT 24
23871: PUSH
23872: LD_INT 25
23874: PUSH
23875: LD_INT 26
23877: PUSH
23878: LD_INT 27
23880: PUSH
23881: LD_INT 28
23883: PUSH
23884: LD_INT 29
23886: PUSH
23887: LD_INT 30
23889: PUSH
23890: LD_INT 31
23892: PUSH
23893: LD_INT 32
23895: PUSH
23896: LD_INT 33
23898: PUSH
23899: LD_INT 34
23901: PUSH
23902: LD_INT 35
23904: PUSH
23905: LD_INT 36
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 101
23948: PUSH
23949: LD_INT 102
23951: PUSH
23952: LD_INT 103
23954: PUSH
23955: LD_INT 104
23957: PUSH
23958: LD_INT 105
23960: PUSH
23961: LD_INT 106
23963: PUSH
23964: LD_INT 107
23966: PUSH
23967: LD_INT 108
23969: PUSH
23970: LD_INT 109
23972: PUSH
23973: LD_INT 110
23975: PUSH
23976: LD_INT 111
23978: PUSH
23979: LD_INT 112
23981: PUSH
23982: LD_INT 113
23984: PUSH
23985: LD_INT 114
23987: PUSH
23988: LD_INT 115
23990: PUSH
23991: LD_INT 116
23993: PUSH
23994: LD_INT 117
23996: PUSH
23997: LD_INT 118
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: ST_TO_ADDR
24024: GO 24027
24026: POP
// end else
24027: GO 24258
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24029: LD_ADDR_VAR 0 2
24033: PUSH
24034: LD_INT 1
24036: PUSH
24037: LD_INT 2
24039: PUSH
24040: LD_INT 3
24042: PUSH
24043: LD_INT 4
24045: PUSH
24046: LD_INT 5
24048: PUSH
24049: LD_INT 6
24051: PUSH
24052: LD_INT 7
24054: PUSH
24055: LD_INT 8
24057: PUSH
24058: LD_INT 9
24060: PUSH
24061: LD_INT 10
24063: PUSH
24064: LD_INT 11
24066: PUSH
24067: LD_INT 12
24069: PUSH
24070: LD_INT 13
24072: PUSH
24073: LD_INT 14
24075: PUSH
24076: LD_INT 15
24078: PUSH
24079: LD_INT 16
24081: PUSH
24082: LD_INT 17
24084: PUSH
24085: LD_INT 18
24087: PUSH
24088: LD_INT 19
24090: PUSH
24091: LD_INT 20
24093: PUSH
24094: LD_INT 21
24096: PUSH
24097: LD_INT 22
24099: PUSH
24100: LD_INT 23
24102: PUSH
24103: LD_INT 24
24105: PUSH
24106: LD_INT 25
24108: PUSH
24109: LD_INT 26
24111: PUSH
24112: LD_INT 27
24114: PUSH
24115: LD_INT 28
24117: PUSH
24118: LD_INT 29
24120: PUSH
24121: LD_INT 30
24123: PUSH
24124: LD_INT 31
24126: PUSH
24127: LD_INT 32
24129: PUSH
24130: LD_INT 33
24132: PUSH
24133: LD_INT 34
24135: PUSH
24136: LD_INT 35
24138: PUSH
24139: LD_INT 36
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 101
24182: PUSH
24183: LD_INT 102
24185: PUSH
24186: LD_INT 103
24188: PUSH
24189: LD_INT 104
24191: PUSH
24192: LD_INT 105
24194: PUSH
24195: LD_INT 106
24197: PUSH
24198: LD_INT 107
24200: PUSH
24201: LD_INT 108
24203: PUSH
24204: LD_INT 109
24206: PUSH
24207: LD_INT 110
24209: PUSH
24210: LD_INT 111
24212: PUSH
24213: LD_INT 112
24215: PUSH
24216: LD_INT 113
24218: PUSH
24219: LD_INT 114
24221: PUSH
24222: LD_INT 115
24224: PUSH
24225: LD_INT 116
24227: PUSH
24228: LD_INT 117
24230: PUSH
24231: LD_INT 118
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: ST_TO_ADDR
// if result then
24258: LD_VAR 0 2
24262: IFFALSE 25048
// begin normal :=  ;
24264: LD_ADDR_VAR 0 5
24268: PUSH
24269: LD_STRING 
24271: ST_TO_ADDR
// hardcore :=  ;
24272: LD_ADDR_VAR 0 6
24276: PUSH
24277: LD_STRING 
24279: ST_TO_ADDR
// active :=  ;
24280: LD_ADDR_VAR 0 7
24284: PUSH
24285: LD_STRING 
24287: ST_TO_ADDR
// for i = 1 to normalCounter do
24288: LD_ADDR_VAR 0 8
24292: PUSH
24293: DOUBLE
24294: LD_INT 1
24296: DEC
24297: ST_TO_ADDR
24298: LD_EXP 63
24302: PUSH
24303: FOR_TO
24304: IFFALSE 24405
// begin tmp := 0 ;
24306: LD_ADDR_VAR 0 3
24310: PUSH
24311: LD_STRING 0
24313: ST_TO_ADDR
// if result [ 1 ] then
24314: LD_VAR 0 2
24318: PUSH
24319: LD_INT 1
24321: ARRAY
24322: IFFALSE 24387
// if result [ 1 ] [ 1 ] = i then
24324: LD_VAR 0 2
24328: PUSH
24329: LD_INT 1
24331: ARRAY
24332: PUSH
24333: LD_INT 1
24335: ARRAY
24336: PUSH
24337: LD_VAR 0 8
24341: EQUAL
24342: IFFALSE 24387
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24344: LD_ADDR_VAR 0 2
24348: PUSH
24349: LD_VAR 0 2
24353: PPUSH
24354: LD_INT 1
24356: PPUSH
24357: LD_VAR 0 2
24361: PUSH
24362: LD_INT 1
24364: ARRAY
24365: PPUSH
24366: LD_INT 1
24368: PPUSH
24369: CALL_OW 3
24373: PPUSH
24374: CALL_OW 1
24378: ST_TO_ADDR
// tmp := 1 ;
24379: LD_ADDR_VAR 0 3
24383: PUSH
24384: LD_STRING 1
24386: ST_TO_ADDR
// end ; normal := normal & tmp ;
24387: LD_ADDR_VAR 0 5
24391: PUSH
24392: LD_VAR 0 5
24396: PUSH
24397: LD_VAR 0 3
24401: STR
24402: ST_TO_ADDR
// end ;
24403: GO 24303
24405: POP
24406: POP
// for i = 1 to hardcoreCounter do
24407: LD_ADDR_VAR 0 8
24411: PUSH
24412: DOUBLE
24413: LD_INT 1
24415: DEC
24416: ST_TO_ADDR
24417: LD_EXP 64
24421: PUSH
24422: FOR_TO
24423: IFFALSE 24528
// begin tmp := 0 ;
24425: LD_ADDR_VAR 0 3
24429: PUSH
24430: LD_STRING 0
24432: ST_TO_ADDR
// if result [ 2 ] then
24433: LD_VAR 0 2
24437: PUSH
24438: LD_INT 2
24440: ARRAY
24441: IFFALSE 24510
// if result [ 2 ] [ 1 ] = 100 + i then
24443: LD_VAR 0 2
24447: PUSH
24448: LD_INT 2
24450: ARRAY
24451: PUSH
24452: LD_INT 1
24454: ARRAY
24455: PUSH
24456: LD_INT 100
24458: PUSH
24459: LD_VAR 0 8
24463: PLUS
24464: EQUAL
24465: IFFALSE 24510
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24467: LD_ADDR_VAR 0 2
24471: PUSH
24472: LD_VAR 0 2
24476: PPUSH
24477: LD_INT 2
24479: PPUSH
24480: LD_VAR 0 2
24484: PUSH
24485: LD_INT 2
24487: ARRAY
24488: PPUSH
24489: LD_INT 1
24491: PPUSH
24492: CALL_OW 3
24496: PPUSH
24497: CALL_OW 1
24501: ST_TO_ADDR
// tmp := 1 ;
24502: LD_ADDR_VAR 0 3
24506: PUSH
24507: LD_STRING 1
24509: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24510: LD_ADDR_VAR 0 6
24514: PUSH
24515: LD_VAR 0 6
24519: PUSH
24520: LD_VAR 0 3
24524: STR
24525: ST_TO_ADDR
// end ;
24526: GO 24422
24528: POP
24529: POP
// if isGameLoad then
24530: LD_VAR 0 1
24534: IFFALSE 25009
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24536: LD_ADDR_VAR 0 4
24540: PUSH
24541: LD_EXP 67
24545: PUSH
24546: LD_EXP 66
24550: PUSH
24551: LD_EXP 68
24555: PUSH
24556: LD_EXP 65
24560: PUSH
24561: LD_EXP 69
24565: PUSH
24566: LD_EXP 70
24570: PUSH
24571: LD_EXP 71
24575: PUSH
24576: LD_EXP 72
24580: PUSH
24581: LD_EXP 73
24585: PUSH
24586: LD_EXP 74
24590: PUSH
24591: LD_EXP 75
24595: PUSH
24596: LD_EXP 76
24600: PUSH
24601: LD_EXP 77
24605: PUSH
24606: LD_EXP 78
24610: PUSH
24611: LD_EXP 86
24615: PUSH
24616: LD_EXP 87
24620: PUSH
24621: LD_EXP 88
24625: PUSH
24626: LD_EXP 89
24630: PUSH
24631: LD_EXP 91
24635: PUSH
24636: LD_EXP 92
24640: PUSH
24641: LD_EXP 93
24645: PUSH
24646: LD_EXP 96
24650: PUSH
24651: LD_EXP 98
24655: PUSH
24656: LD_EXP 99
24660: PUSH
24661: LD_EXP 100
24665: PUSH
24666: LD_EXP 102
24670: PUSH
24671: LD_EXP 103
24675: PUSH
24676: LD_EXP 106
24680: PUSH
24681: LD_EXP 107
24685: PUSH
24686: LD_EXP 108
24690: PUSH
24691: LD_EXP 109
24695: PUSH
24696: LD_EXP 110
24700: PUSH
24701: LD_EXP 111
24705: PUSH
24706: LD_EXP 112
24710: PUSH
24711: LD_EXP 113
24715: PUSH
24716: LD_EXP 114
24720: PUSH
24721: LD_EXP 79
24725: PUSH
24726: LD_EXP 80
24730: PUSH
24731: LD_EXP 83
24735: PUSH
24736: LD_EXP 84
24740: PUSH
24741: LD_EXP 85
24745: PUSH
24746: LD_EXP 81
24750: PUSH
24751: LD_EXP 82
24755: PUSH
24756: LD_EXP 90
24760: PUSH
24761: LD_EXP 94
24765: PUSH
24766: LD_EXP 95
24770: PUSH
24771: LD_EXP 97
24775: PUSH
24776: LD_EXP 101
24780: PUSH
24781: LD_EXP 104
24785: PUSH
24786: LD_EXP 105
24790: PUSH
24791: LD_EXP 115
24795: PUSH
24796: LD_EXP 116
24800: PUSH
24801: LD_EXP 117
24805: PUSH
24806: LD_EXP 118
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: ST_TO_ADDR
// tmp :=  ;
24867: LD_ADDR_VAR 0 3
24871: PUSH
24872: LD_STRING 
24874: ST_TO_ADDR
// for i = 1 to normalCounter do
24875: LD_ADDR_VAR 0 8
24879: PUSH
24880: DOUBLE
24881: LD_INT 1
24883: DEC
24884: ST_TO_ADDR
24885: LD_EXP 63
24889: PUSH
24890: FOR_TO
24891: IFFALSE 24927
// begin if flags [ i ] then
24893: LD_VAR 0 4
24897: PUSH
24898: LD_VAR 0 8
24902: ARRAY
24903: IFFALSE 24925
// tmp := tmp & i & ; ;
24905: LD_ADDR_VAR 0 3
24909: PUSH
24910: LD_VAR 0 3
24914: PUSH
24915: LD_VAR 0 8
24919: STR
24920: PUSH
24921: LD_STRING ;
24923: STR
24924: ST_TO_ADDR
// end ;
24925: GO 24890
24927: POP
24928: POP
// for i = 1 to hardcoreCounter do
24929: LD_ADDR_VAR 0 8
24933: PUSH
24934: DOUBLE
24935: LD_INT 1
24937: DEC
24938: ST_TO_ADDR
24939: LD_EXP 64
24943: PUSH
24944: FOR_TO
24945: IFFALSE 24991
// begin if flags [ normalCounter + i ] then
24947: LD_VAR 0 4
24951: PUSH
24952: LD_EXP 63
24956: PUSH
24957: LD_VAR 0 8
24961: PLUS
24962: ARRAY
24963: IFFALSE 24989
// tmp := tmp & ( 100 + i ) & ; ;
24965: LD_ADDR_VAR 0 3
24969: PUSH
24970: LD_VAR 0 3
24974: PUSH
24975: LD_INT 100
24977: PUSH
24978: LD_VAR 0 8
24982: PLUS
24983: STR
24984: PUSH
24985: LD_STRING ;
24987: STR
24988: ST_TO_ADDR
// end ;
24989: GO 24944
24991: POP
24992: POP
// if tmp then
24993: LD_VAR 0 3
24997: IFFALSE 25009
// active := tmp ;
24999: LD_ADDR_VAR 0 7
25003: PUSH
25004: LD_VAR 0 3
25008: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25009: LD_STRING getStreamItemsFromMission("
25011: PUSH
25012: LD_VAR 0 5
25016: STR
25017: PUSH
25018: LD_STRING ","
25020: STR
25021: PUSH
25022: LD_VAR 0 6
25026: STR
25027: PUSH
25028: LD_STRING ","
25030: STR
25031: PUSH
25032: LD_VAR 0 7
25036: STR
25037: PUSH
25038: LD_STRING ")
25040: STR
25041: PPUSH
25042: CALL_OW 559
// end else
25046: GO 25055
// ToLua ( getStreamItemsFromMission("","","") ) ;
25048: LD_STRING getStreamItemsFromMission("","","")
25050: PPUSH
25051: CALL_OW 559
// end ;
25055: LD_VAR 0 2
25059: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25060: LD_EXP 62
25064: PUSH
25065: LD_EXP 67
25069: AND
25070: IFFALSE 25194
25072: GO 25074
25074: DISABLE
25075: LD_INT 0
25077: PPUSH
25078: PPUSH
// begin enable ;
25079: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25080: LD_ADDR_VAR 0 2
25084: PUSH
25085: LD_INT 22
25087: PUSH
25088: LD_OWVAR 2
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 2
25099: PUSH
25100: LD_INT 34
25102: PUSH
25103: LD_INT 7
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 34
25112: PUSH
25113: LD_INT 45
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 34
25122: PUSH
25123: LD_INT 28
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 34
25132: PUSH
25133: LD_INT 47
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PPUSH
25151: CALL_OW 69
25155: ST_TO_ADDR
// if not tmp then
25156: LD_VAR 0 2
25160: NOT
25161: IFFALSE 25165
// exit ;
25163: GO 25194
// for i in tmp do
25165: LD_ADDR_VAR 0 1
25169: PUSH
25170: LD_VAR 0 2
25174: PUSH
25175: FOR_IN
25176: IFFALSE 25192
// begin SetLives ( i , 0 ) ;
25178: LD_VAR 0 1
25182: PPUSH
25183: LD_INT 0
25185: PPUSH
25186: CALL_OW 234
// end ;
25190: GO 25175
25192: POP
25193: POP
// end ;
25194: PPOPN 2
25196: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25197: LD_EXP 62
25201: PUSH
25202: LD_EXP 68
25206: AND
25207: IFFALSE 25291
25209: GO 25211
25211: DISABLE
25212: LD_INT 0
25214: PPUSH
25215: PPUSH
// begin enable ;
25216: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25217: LD_ADDR_VAR 0 2
25221: PUSH
25222: LD_INT 22
25224: PUSH
25225: LD_OWVAR 2
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 32
25236: PUSH
25237: LD_INT 3
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PPUSH
25248: CALL_OW 69
25252: ST_TO_ADDR
// if not tmp then
25253: LD_VAR 0 2
25257: NOT
25258: IFFALSE 25262
// exit ;
25260: GO 25291
// for i in tmp do
25262: LD_ADDR_VAR 0 1
25266: PUSH
25267: LD_VAR 0 2
25271: PUSH
25272: FOR_IN
25273: IFFALSE 25289
// begin SetLives ( i , 0 ) ;
25275: LD_VAR 0 1
25279: PPUSH
25280: LD_INT 0
25282: PPUSH
25283: CALL_OW 234
// end ;
25287: GO 25272
25289: POP
25290: POP
// end ;
25291: PPOPN 2
25293: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25294: LD_EXP 62
25298: PUSH
25299: LD_EXP 65
25303: AND
25304: IFFALSE 25397
25306: GO 25308
25308: DISABLE
25309: LD_INT 0
25311: PPUSH
// begin enable ;
25312: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25313: LD_ADDR_VAR 0 1
25317: PUSH
25318: LD_INT 22
25320: PUSH
25321: LD_OWVAR 2
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 2
25332: PUSH
25333: LD_INT 25
25335: PUSH
25336: LD_INT 5
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 25
25345: PUSH
25346: LD_INT 9
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 25
25355: PUSH
25356: LD_INT 8
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PPUSH
25373: CALL_OW 69
25377: PUSH
25378: FOR_IN
25379: IFFALSE 25395
// begin SetClass ( i , 1 ) ;
25381: LD_VAR 0 1
25385: PPUSH
25386: LD_INT 1
25388: PPUSH
25389: CALL_OW 336
// end ;
25393: GO 25378
25395: POP
25396: POP
// end ;
25397: PPOPN 1
25399: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25400: LD_EXP 62
25404: PUSH
25405: LD_EXP 66
25409: AND
25410: PUSH
25411: LD_OWVAR 65
25415: PUSH
25416: LD_INT 7
25418: LESS
25419: AND
25420: IFFALSE 25434
25422: GO 25424
25424: DISABLE
// begin enable ;
25425: ENABLE
// game_speed := 7 ;
25426: LD_ADDR_OWVAR 65
25430: PUSH
25431: LD_INT 7
25433: ST_TO_ADDR
// end ;
25434: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25435: LD_EXP 62
25439: PUSH
25440: LD_EXP 69
25444: AND
25445: IFFALSE 25647
25447: GO 25449
25449: DISABLE
25450: LD_INT 0
25452: PPUSH
25453: PPUSH
25454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25455: LD_ADDR_VAR 0 3
25459: PUSH
25460: LD_INT 81
25462: PUSH
25463: LD_OWVAR 2
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 21
25474: PUSH
25475: LD_INT 1
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PPUSH
25486: CALL_OW 69
25490: ST_TO_ADDR
// if not tmp then
25491: LD_VAR 0 3
25495: NOT
25496: IFFALSE 25500
// exit ;
25498: GO 25647
// if tmp > 5 then
25500: LD_VAR 0 3
25504: PUSH
25505: LD_INT 5
25507: GREATER
25508: IFFALSE 25520
// k := 5 else
25510: LD_ADDR_VAR 0 2
25514: PUSH
25515: LD_INT 5
25517: ST_TO_ADDR
25518: GO 25530
// k := tmp ;
25520: LD_ADDR_VAR 0 2
25524: PUSH
25525: LD_VAR 0 3
25529: ST_TO_ADDR
// for i := 1 to k do
25530: LD_ADDR_VAR 0 1
25534: PUSH
25535: DOUBLE
25536: LD_INT 1
25538: DEC
25539: ST_TO_ADDR
25540: LD_VAR 0 2
25544: PUSH
25545: FOR_TO
25546: IFFALSE 25645
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25548: LD_VAR 0 3
25552: PUSH
25553: LD_VAR 0 1
25557: ARRAY
25558: PPUSH
25559: LD_VAR 0 1
25563: PUSH
25564: LD_INT 4
25566: MOD
25567: PUSH
25568: LD_INT 1
25570: PLUS
25571: PPUSH
25572: CALL_OW 259
25576: PUSH
25577: LD_INT 10
25579: LESS
25580: IFFALSE 25643
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25582: LD_VAR 0 3
25586: PUSH
25587: LD_VAR 0 1
25591: ARRAY
25592: PPUSH
25593: LD_VAR 0 1
25597: PUSH
25598: LD_INT 4
25600: MOD
25601: PUSH
25602: LD_INT 1
25604: PLUS
25605: PPUSH
25606: LD_VAR 0 3
25610: PUSH
25611: LD_VAR 0 1
25615: ARRAY
25616: PPUSH
25617: LD_VAR 0 1
25621: PUSH
25622: LD_INT 4
25624: MOD
25625: PUSH
25626: LD_INT 1
25628: PLUS
25629: PPUSH
25630: CALL_OW 259
25634: PUSH
25635: LD_INT 1
25637: PLUS
25638: PPUSH
25639: CALL_OW 237
25643: GO 25545
25645: POP
25646: POP
// end ;
25647: PPOPN 3
25649: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25650: LD_EXP 62
25654: PUSH
25655: LD_EXP 70
25659: AND
25660: IFFALSE 25680
25662: GO 25664
25664: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25665: LD_INT 4
25667: PPUSH
25668: LD_OWVAR 2
25672: PPUSH
25673: LD_INT 0
25675: PPUSH
25676: CALL_OW 324
25680: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25681: LD_EXP 62
25685: PUSH
25686: LD_EXP 99
25690: AND
25691: IFFALSE 25711
25693: GO 25695
25695: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25696: LD_INT 19
25698: PPUSH
25699: LD_OWVAR 2
25703: PPUSH
25704: LD_INT 0
25706: PPUSH
25707: CALL_OW 324
25711: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25712: LD_EXP 62
25716: PUSH
25717: LD_EXP 71
25721: AND
25722: IFFALSE 25824
25724: GO 25726
25726: DISABLE
25727: LD_INT 0
25729: PPUSH
25730: PPUSH
// begin enable ;
25731: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25732: LD_ADDR_VAR 0 2
25736: PUSH
25737: LD_INT 22
25739: PUSH
25740: LD_OWVAR 2
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 2
25751: PUSH
25752: LD_INT 34
25754: PUSH
25755: LD_INT 11
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 34
25764: PUSH
25765: LD_INT 30
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: LIST
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PPUSH
25781: CALL_OW 69
25785: ST_TO_ADDR
// if not tmp then
25786: LD_VAR 0 2
25790: NOT
25791: IFFALSE 25795
// exit ;
25793: GO 25824
// for i in tmp do
25795: LD_ADDR_VAR 0 1
25799: PUSH
25800: LD_VAR 0 2
25804: PUSH
25805: FOR_IN
25806: IFFALSE 25822
// begin SetLives ( i , 0 ) ;
25808: LD_VAR 0 1
25812: PPUSH
25813: LD_INT 0
25815: PPUSH
25816: CALL_OW 234
// end ;
25820: GO 25805
25822: POP
25823: POP
// end ;
25824: PPOPN 2
25826: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25827: LD_EXP 62
25831: PUSH
25832: LD_EXP 72
25836: AND
25837: IFFALSE 25857
25839: GO 25841
25841: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25842: LD_INT 32
25844: PPUSH
25845: LD_OWVAR 2
25849: PPUSH
25850: LD_INT 0
25852: PPUSH
25853: CALL_OW 324
25857: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25858: LD_EXP 62
25862: PUSH
25863: LD_EXP 73
25867: AND
25868: IFFALSE 26049
25870: GO 25872
25872: DISABLE
25873: LD_INT 0
25875: PPUSH
25876: PPUSH
25877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25878: LD_ADDR_VAR 0 2
25882: PUSH
25883: LD_INT 22
25885: PUSH
25886: LD_OWVAR 2
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 33
25897: PUSH
25898: LD_INT 3
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PPUSH
25909: CALL_OW 69
25913: ST_TO_ADDR
// if not tmp then
25914: LD_VAR 0 2
25918: NOT
25919: IFFALSE 25923
// exit ;
25921: GO 26049
// side := 0 ;
25923: LD_ADDR_VAR 0 3
25927: PUSH
25928: LD_INT 0
25930: ST_TO_ADDR
// for i := 1 to 8 do
25931: LD_ADDR_VAR 0 1
25935: PUSH
25936: DOUBLE
25937: LD_INT 1
25939: DEC
25940: ST_TO_ADDR
25941: LD_INT 8
25943: PUSH
25944: FOR_TO
25945: IFFALSE 25993
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25947: LD_OWVAR 2
25951: PUSH
25952: LD_VAR 0 1
25956: NONEQUAL
25957: PUSH
25958: LD_OWVAR 2
25962: PPUSH
25963: LD_VAR 0 1
25967: PPUSH
25968: CALL_OW 81
25972: PUSH
25973: LD_INT 2
25975: EQUAL
25976: AND
25977: IFFALSE 25991
// begin side := i ;
25979: LD_ADDR_VAR 0 3
25983: PUSH
25984: LD_VAR 0 1
25988: ST_TO_ADDR
// break ;
25989: GO 25993
// end ;
25991: GO 25944
25993: POP
25994: POP
// if not side then
25995: LD_VAR 0 3
25999: NOT
26000: IFFALSE 26004
// exit ;
26002: GO 26049
// for i := 1 to tmp do
26004: LD_ADDR_VAR 0 1
26008: PUSH
26009: DOUBLE
26010: LD_INT 1
26012: DEC
26013: ST_TO_ADDR
26014: LD_VAR 0 2
26018: PUSH
26019: FOR_TO
26020: IFFALSE 26047
// if Prob ( 60 ) then
26022: LD_INT 60
26024: PPUSH
26025: CALL_OW 13
26029: IFFALSE 26045
// SetSide ( i , side ) ;
26031: LD_VAR 0 1
26035: PPUSH
26036: LD_VAR 0 3
26040: PPUSH
26041: CALL_OW 235
26045: GO 26019
26047: POP
26048: POP
// end ;
26049: PPOPN 3
26051: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26052: LD_EXP 62
26056: PUSH
26057: LD_EXP 75
26061: AND
26062: IFFALSE 26181
26064: GO 26066
26066: DISABLE
26067: LD_INT 0
26069: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26070: LD_ADDR_VAR 0 1
26074: PUSH
26075: LD_INT 22
26077: PUSH
26078: LD_OWVAR 2
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 21
26089: PUSH
26090: LD_INT 1
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 3
26099: PUSH
26100: LD_INT 23
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: LIST
26118: PPUSH
26119: CALL_OW 69
26123: PUSH
26124: FOR_IN
26125: IFFALSE 26179
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26127: LD_VAR 0 1
26131: PPUSH
26132: CALL_OW 257
26136: PUSH
26137: LD_INT 1
26139: PUSH
26140: LD_INT 2
26142: PUSH
26143: LD_INT 3
26145: PUSH
26146: LD_INT 4
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: IN
26155: IFFALSE 26177
// SetClass ( un , rand ( 1 , 4 ) ) ;
26157: LD_VAR 0 1
26161: PPUSH
26162: LD_INT 1
26164: PPUSH
26165: LD_INT 4
26167: PPUSH
26168: CALL_OW 12
26172: PPUSH
26173: CALL_OW 336
26177: GO 26124
26179: POP
26180: POP
// end ;
26181: PPOPN 1
26183: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26184: LD_EXP 62
26188: PUSH
26189: LD_EXP 74
26193: AND
26194: IFFALSE 26273
26196: GO 26198
26198: DISABLE
26199: LD_INT 0
26201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26202: LD_ADDR_VAR 0 1
26206: PUSH
26207: LD_INT 22
26209: PUSH
26210: LD_OWVAR 2
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 21
26221: PUSH
26222: LD_INT 3
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PPUSH
26233: CALL_OW 69
26237: ST_TO_ADDR
// if not tmp then
26238: LD_VAR 0 1
26242: NOT
26243: IFFALSE 26247
// exit ;
26245: GO 26273
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26247: LD_VAR 0 1
26251: PUSH
26252: LD_INT 1
26254: PPUSH
26255: LD_VAR 0 1
26259: PPUSH
26260: CALL_OW 12
26264: ARRAY
26265: PPUSH
26266: LD_INT 100
26268: PPUSH
26269: CALL_OW 234
// end ;
26273: PPOPN 1
26275: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26276: LD_EXP 62
26280: PUSH
26281: LD_EXP 76
26285: AND
26286: IFFALSE 26384
26288: GO 26290
26290: DISABLE
26291: LD_INT 0
26293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26294: LD_ADDR_VAR 0 1
26298: PUSH
26299: LD_INT 22
26301: PUSH
26302: LD_OWVAR 2
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 21
26313: PUSH
26314: LD_INT 1
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PPUSH
26325: CALL_OW 69
26329: ST_TO_ADDR
// if not tmp then
26330: LD_VAR 0 1
26334: NOT
26335: IFFALSE 26339
// exit ;
26337: GO 26384
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26339: LD_VAR 0 1
26343: PUSH
26344: LD_INT 1
26346: PPUSH
26347: LD_VAR 0 1
26351: PPUSH
26352: CALL_OW 12
26356: ARRAY
26357: PPUSH
26358: LD_INT 1
26360: PPUSH
26361: LD_INT 4
26363: PPUSH
26364: CALL_OW 12
26368: PPUSH
26369: LD_INT 3000
26371: PPUSH
26372: LD_INT 9000
26374: PPUSH
26375: CALL_OW 12
26379: PPUSH
26380: CALL_OW 492
// end ;
26384: PPOPN 1
26386: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26387: LD_EXP 62
26391: PUSH
26392: LD_EXP 77
26396: AND
26397: IFFALSE 26417
26399: GO 26401
26401: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26402: LD_INT 1
26404: PPUSH
26405: LD_OWVAR 2
26409: PPUSH
26410: LD_INT 0
26412: PPUSH
26413: CALL_OW 324
26417: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26418: LD_EXP 62
26422: PUSH
26423: LD_EXP 78
26427: AND
26428: IFFALSE 26511
26430: GO 26432
26432: DISABLE
26433: LD_INT 0
26435: PPUSH
26436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26437: LD_ADDR_VAR 0 2
26441: PUSH
26442: LD_INT 22
26444: PUSH
26445: LD_OWVAR 2
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 21
26456: PUSH
26457: LD_INT 3
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PPUSH
26468: CALL_OW 69
26472: ST_TO_ADDR
// if not tmp then
26473: LD_VAR 0 2
26477: NOT
26478: IFFALSE 26482
// exit ;
26480: GO 26511
// for i in tmp do
26482: LD_ADDR_VAR 0 1
26486: PUSH
26487: LD_VAR 0 2
26491: PUSH
26492: FOR_IN
26493: IFFALSE 26509
// SetBLevel ( i , 10 ) ;
26495: LD_VAR 0 1
26499: PPUSH
26500: LD_INT 10
26502: PPUSH
26503: CALL_OW 241
26507: GO 26492
26509: POP
26510: POP
// end ;
26511: PPOPN 2
26513: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26514: LD_EXP 62
26518: PUSH
26519: LD_EXP 79
26523: AND
26524: IFFALSE 26635
26526: GO 26528
26528: DISABLE
26529: LD_INT 0
26531: PPUSH
26532: PPUSH
26533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26534: LD_ADDR_VAR 0 3
26538: PUSH
26539: LD_INT 22
26541: PUSH
26542: LD_OWVAR 2
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 25
26553: PUSH
26554: LD_INT 1
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PPUSH
26565: CALL_OW 69
26569: ST_TO_ADDR
// if not tmp then
26570: LD_VAR 0 3
26574: NOT
26575: IFFALSE 26579
// exit ;
26577: GO 26635
// un := tmp [ rand ( 1 , tmp ) ] ;
26579: LD_ADDR_VAR 0 2
26583: PUSH
26584: LD_VAR 0 3
26588: PUSH
26589: LD_INT 1
26591: PPUSH
26592: LD_VAR 0 3
26596: PPUSH
26597: CALL_OW 12
26601: ARRAY
26602: ST_TO_ADDR
// if Crawls ( un ) then
26603: LD_VAR 0 2
26607: PPUSH
26608: CALL_OW 318
26612: IFFALSE 26623
// ComWalk ( un ) ;
26614: LD_VAR 0 2
26618: PPUSH
26619: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26623: LD_VAR 0 2
26627: PPUSH
26628: LD_INT 5
26630: PPUSH
26631: CALL_OW 336
// end ;
26635: PPOPN 3
26637: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26638: LD_EXP 62
26642: PUSH
26643: LD_EXP 80
26647: AND
26648: PUSH
26649: LD_OWVAR 67
26653: PUSH
26654: LD_INT 4
26656: LESS
26657: AND
26658: IFFALSE 26677
26660: GO 26662
26662: DISABLE
// begin Difficulty := Difficulty + 1 ;
26663: LD_ADDR_OWVAR 67
26667: PUSH
26668: LD_OWVAR 67
26672: PUSH
26673: LD_INT 1
26675: PLUS
26676: ST_TO_ADDR
// end ;
26677: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26678: LD_EXP 62
26682: PUSH
26683: LD_EXP 81
26687: AND
26688: IFFALSE 26791
26690: GO 26692
26692: DISABLE
26693: LD_INT 0
26695: PPUSH
// begin for i := 1 to 5 do
26696: LD_ADDR_VAR 0 1
26700: PUSH
26701: DOUBLE
26702: LD_INT 1
26704: DEC
26705: ST_TO_ADDR
26706: LD_INT 5
26708: PUSH
26709: FOR_TO
26710: IFFALSE 26789
// begin uc_nation := nation_nature ;
26712: LD_ADDR_OWVAR 21
26716: PUSH
26717: LD_INT 0
26719: ST_TO_ADDR
// uc_side := 0 ;
26720: LD_ADDR_OWVAR 20
26724: PUSH
26725: LD_INT 0
26727: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26728: LD_ADDR_OWVAR 29
26732: PUSH
26733: LD_INT 12
26735: PUSH
26736: LD_INT 12
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: ST_TO_ADDR
// hc_agressivity := 20 ;
26743: LD_ADDR_OWVAR 35
26747: PUSH
26748: LD_INT 20
26750: ST_TO_ADDR
// hc_class := class_tiger ;
26751: LD_ADDR_OWVAR 28
26755: PUSH
26756: LD_INT 14
26758: ST_TO_ADDR
// hc_gallery :=  ;
26759: LD_ADDR_OWVAR 33
26763: PUSH
26764: LD_STRING 
26766: ST_TO_ADDR
// hc_name :=  ;
26767: LD_ADDR_OWVAR 26
26771: PUSH
26772: LD_STRING 
26774: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26775: CALL_OW 44
26779: PPUSH
26780: LD_INT 0
26782: PPUSH
26783: CALL_OW 51
// end ;
26787: GO 26709
26789: POP
26790: POP
// end ;
26791: PPOPN 1
26793: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26794: LD_EXP 62
26798: PUSH
26799: LD_EXP 82
26803: AND
26804: IFFALSE 26813
26806: GO 26808
26808: DISABLE
// StreamSibBomb ;
26809: CALL 26814 0 0
26813: END
// export function StreamSibBomb ; var i , x , y ; begin
26814: LD_INT 0
26816: PPUSH
26817: PPUSH
26818: PPUSH
26819: PPUSH
// result := false ;
26820: LD_ADDR_VAR 0 1
26824: PUSH
26825: LD_INT 0
26827: ST_TO_ADDR
// for i := 1 to 16 do
26828: LD_ADDR_VAR 0 2
26832: PUSH
26833: DOUBLE
26834: LD_INT 1
26836: DEC
26837: ST_TO_ADDR
26838: LD_INT 16
26840: PUSH
26841: FOR_TO
26842: IFFALSE 27041
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26844: LD_ADDR_VAR 0 3
26848: PUSH
26849: LD_INT 10
26851: PUSH
26852: LD_INT 20
26854: PUSH
26855: LD_INT 30
26857: PUSH
26858: LD_INT 40
26860: PUSH
26861: LD_INT 50
26863: PUSH
26864: LD_INT 60
26866: PUSH
26867: LD_INT 70
26869: PUSH
26870: LD_INT 80
26872: PUSH
26873: LD_INT 90
26875: PUSH
26876: LD_INT 100
26878: PUSH
26879: LD_INT 110
26881: PUSH
26882: LD_INT 120
26884: PUSH
26885: LD_INT 130
26887: PUSH
26888: LD_INT 140
26890: PUSH
26891: LD_INT 150
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 1
26913: PPUSH
26914: LD_INT 15
26916: PPUSH
26917: CALL_OW 12
26921: ARRAY
26922: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26923: LD_ADDR_VAR 0 4
26927: PUSH
26928: LD_INT 10
26930: PUSH
26931: LD_INT 20
26933: PUSH
26934: LD_INT 30
26936: PUSH
26937: LD_INT 40
26939: PUSH
26940: LD_INT 50
26942: PUSH
26943: LD_INT 60
26945: PUSH
26946: LD_INT 70
26948: PUSH
26949: LD_INT 80
26951: PUSH
26952: LD_INT 90
26954: PUSH
26955: LD_INT 100
26957: PUSH
26958: LD_INT 110
26960: PUSH
26961: LD_INT 120
26963: PUSH
26964: LD_INT 130
26966: PUSH
26967: LD_INT 140
26969: PUSH
26970: LD_INT 150
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 1
26992: PPUSH
26993: LD_INT 15
26995: PPUSH
26996: CALL_OW 12
27000: ARRAY
27001: ST_TO_ADDR
// if ValidHex ( x , y ) then
27002: LD_VAR 0 3
27006: PPUSH
27007: LD_VAR 0 4
27011: PPUSH
27012: CALL_OW 488
27016: IFFALSE 27039
// begin result := [ x , y ] ;
27018: LD_ADDR_VAR 0 1
27022: PUSH
27023: LD_VAR 0 3
27027: PUSH
27028: LD_VAR 0 4
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: ST_TO_ADDR
// break ;
27037: GO 27041
// end ; end ;
27039: GO 26841
27041: POP
27042: POP
// if result then
27043: LD_VAR 0 1
27047: IFFALSE 27107
// begin ToLua ( playSibBomb() ) ;
27049: LD_STRING playSibBomb()
27051: PPUSH
27052: CALL_OW 559
// wait ( 0 0$14 ) ;
27056: LD_INT 490
27058: PPUSH
27059: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27063: LD_VAR 0 1
27067: PUSH
27068: LD_INT 1
27070: ARRAY
27071: PPUSH
27072: LD_VAR 0 1
27076: PUSH
27077: LD_INT 2
27079: ARRAY
27080: PPUSH
27081: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27085: LD_VAR 0 1
27089: PUSH
27090: LD_INT 1
27092: ARRAY
27093: PPUSH
27094: LD_VAR 0 1
27098: PUSH
27099: LD_INT 2
27101: ARRAY
27102: PPUSH
27103: CALL_OW 429
// end ; end ;
27107: LD_VAR 0 1
27111: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27112: LD_EXP 62
27116: PUSH
27117: LD_EXP 84
27121: AND
27122: IFFALSE 27134
27124: GO 27126
27126: DISABLE
// YouLost (  ) ;
27127: LD_STRING 
27129: PPUSH
27130: CALL_OW 104
27134: END
// every 0 0$1 trigger StreamModeActive and sFog do
27135: LD_EXP 62
27139: PUSH
27140: LD_EXP 83
27144: AND
27145: IFFALSE 27159
27147: GO 27149
27149: DISABLE
// FogOff ( your_side ) ;
27150: LD_OWVAR 2
27154: PPUSH
27155: CALL_OW 344
27159: END
// every 0 0$1 trigger StreamModeActive and sSun do
27160: LD_EXP 62
27164: PUSH
27165: LD_EXP 85
27169: AND
27170: IFFALSE 27198
27172: GO 27174
27174: DISABLE
// begin solar_recharge_percent := 0 ;
27175: LD_ADDR_OWVAR 79
27179: PUSH
27180: LD_INT 0
27182: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27183: LD_INT 10500
27185: PPUSH
27186: CALL_OW 67
// solar_recharge_percent := 100 ;
27190: LD_ADDR_OWVAR 79
27194: PUSH
27195: LD_INT 100
27197: ST_TO_ADDR
// end ;
27198: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27199: LD_EXP 62
27203: PUSH
27204: LD_EXP 86
27208: AND
27209: IFFALSE 27448
27211: GO 27213
27213: DISABLE
27214: LD_INT 0
27216: PPUSH
27217: PPUSH
27218: PPUSH
// begin tmp := [ ] ;
27219: LD_ADDR_VAR 0 3
27223: PUSH
27224: EMPTY
27225: ST_TO_ADDR
// for i := 1 to 6 do
27226: LD_ADDR_VAR 0 1
27230: PUSH
27231: DOUBLE
27232: LD_INT 1
27234: DEC
27235: ST_TO_ADDR
27236: LD_INT 6
27238: PUSH
27239: FOR_TO
27240: IFFALSE 27345
// begin uc_nation := nation_nature ;
27242: LD_ADDR_OWVAR 21
27246: PUSH
27247: LD_INT 0
27249: ST_TO_ADDR
// uc_side := 0 ;
27250: LD_ADDR_OWVAR 20
27254: PUSH
27255: LD_INT 0
27257: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27258: LD_ADDR_OWVAR 29
27262: PUSH
27263: LD_INT 12
27265: PUSH
27266: LD_INT 12
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: ST_TO_ADDR
// hc_agressivity := 20 ;
27273: LD_ADDR_OWVAR 35
27277: PUSH
27278: LD_INT 20
27280: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27281: LD_ADDR_OWVAR 28
27285: PUSH
27286: LD_INT 17
27288: ST_TO_ADDR
// hc_gallery :=  ;
27289: LD_ADDR_OWVAR 33
27293: PUSH
27294: LD_STRING 
27296: ST_TO_ADDR
// hc_name :=  ;
27297: LD_ADDR_OWVAR 26
27301: PUSH
27302: LD_STRING 
27304: ST_TO_ADDR
// un := CreateHuman ;
27305: LD_ADDR_VAR 0 2
27309: PUSH
27310: CALL_OW 44
27314: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27315: LD_VAR 0 2
27319: PPUSH
27320: LD_INT 1
27322: PPUSH
27323: CALL_OW 51
// tmp := tmp ^ un ;
27327: LD_ADDR_VAR 0 3
27331: PUSH
27332: LD_VAR 0 3
27336: PUSH
27337: LD_VAR 0 2
27341: ADD
27342: ST_TO_ADDR
// end ;
27343: GO 27239
27345: POP
27346: POP
// repeat wait ( 0 0$1 ) ;
27347: LD_INT 35
27349: PPUSH
27350: CALL_OW 67
// for un in tmp do
27354: LD_ADDR_VAR 0 2
27358: PUSH
27359: LD_VAR 0 3
27363: PUSH
27364: FOR_IN
27365: IFFALSE 27439
// begin if IsDead ( un ) then
27367: LD_VAR 0 2
27371: PPUSH
27372: CALL_OW 301
27376: IFFALSE 27396
// begin tmp := tmp diff un ;
27378: LD_ADDR_VAR 0 3
27382: PUSH
27383: LD_VAR 0 3
27387: PUSH
27388: LD_VAR 0 2
27392: DIFF
27393: ST_TO_ADDR
// continue ;
27394: GO 27364
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27396: LD_VAR 0 2
27400: PPUSH
27401: LD_INT 3
27403: PUSH
27404: LD_INT 22
27406: PUSH
27407: LD_INT 0
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PPUSH
27418: CALL_OW 69
27422: PPUSH
27423: LD_VAR 0 2
27427: PPUSH
27428: CALL_OW 74
27432: PPUSH
27433: CALL_OW 115
// end ;
27437: GO 27364
27439: POP
27440: POP
// until not tmp ;
27441: LD_VAR 0 3
27445: NOT
27446: IFFALSE 27347
// end ;
27448: PPOPN 3
27450: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27451: LD_EXP 62
27455: PUSH
27456: LD_EXP 87
27460: AND
27461: IFFALSE 27515
27463: GO 27465
27465: DISABLE
// begin ToLua ( displayTroll(); ) ;
27466: LD_STRING displayTroll();
27468: PPUSH
27469: CALL_OW 559
// wait ( 3 3$00 ) ;
27473: LD_INT 6300
27475: PPUSH
27476: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27480: LD_STRING hideTroll();
27482: PPUSH
27483: CALL_OW 559
// wait ( 1 1$00 ) ;
27487: LD_INT 2100
27489: PPUSH
27490: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27494: LD_STRING displayTroll();
27496: PPUSH
27497: CALL_OW 559
// wait ( 1 1$00 ) ;
27501: LD_INT 2100
27503: PPUSH
27504: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27508: LD_STRING hideTroll();
27510: PPUSH
27511: CALL_OW 559
// end ;
27515: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27516: LD_EXP 62
27520: PUSH
27521: LD_EXP 88
27525: AND
27526: IFFALSE 27589
27528: GO 27530
27530: DISABLE
27531: LD_INT 0
27533: PPUSH
// begin p := 0 ;
27534: LD_ADDR_VAR 0 1
27538: PUSH
27539: LD_INT 0
27541: ST_TO_ADDR
// repeat game_speed := 1 ;
27542: LD_ADDR_OWVAR 65
27546: PUSH
27547: LD_INT 1
27549: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27550: LD_INT 35
27552: PPUSH
27553: CALL_OW 67
// p := p + 1 ;
27557: LD_ADDR_VAR 0 1
27561: PUSH
27562: LD_VAR 0 1
27566: PUSH
27567: LD_INT 1
27569: PLUS
27570: ST_TO_ADDR
// until p >= 60 ;
27571: LD_VAR 0 1
27575: PUSH
27576: LD_INT 60
27578: GREATEREQUAL
27579: IFFALSE 27542
// game_speed := 4 ;
27581: LD_ADDR_OWVAR 65
27585: PUSH
27586: LD_INT 4
27588: ST_TO_ADDR
// end ;
27589: PPOPN 1
27591: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27592: LD_EXP 62
27596: PUSH
27597: LD_EXP 89
27601: AND
27602: IFFALSE 27748
27604: GO 27606
27606: DISABLE
27607: LD_INT 0
27609: PPUSH
27610: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27611: LD_ADDR_VAR 0 1
27615: PUSH
27616: LD_INT 22
27618: PUSH
27619: LD_OWVAR 2
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 2
27630: PUSH
27631: LD_INT 30
27633: PUSH
27634: LD_INT 0
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 30
27643: PUSH
27644: LD_INT 1
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: LIST
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PPUSH
27660: CALL_OW 69
27664: ST_TO_ADDR
// if not depot then
27665: LD_VAR 0 1
27669: NOT
27670: IFFALSE 27674
// exit ;
27672: GO 27748
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27674: LD_ADDR_VAR 0 2
27678: PUSH
27679: LD_VAR 0 1
27683: PUSH
27684: LD_INT 1
27686: PPUSH
27687: LD_VAR 0 1
27691: PPUSH
27692: CALL_OW 12
27696: ARRAY
27697: PPUSH
27698: CALL_OW 274
27702: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27703: LD_VAR 0 2
27707: PPUSH
27708: LD_INT 1
27710: PPUSH
27711: LD_INT 0
27713: PPUSH
27714: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27718: LD_VAR 0 2
27722: PPUSH
27723: LD_INT 2
27725: PPUSH
27726: LD_INT 0
27728: PPUSH
27729: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27733: LD_VAR 0 2
27737: PPUSH
27738: LD_INT 3
27740: PPUSH
27741: LD_INT 0
27743: PPUSH
27744: CALL_OW 277
// end ;
27748: PPOPN 2
27750: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27751: LD_EXP 62
27755: PUSH
27756: LD_EXP 90
27760: AND
27761: IFFALSE 27858
27763: GO 27765
27765: DISABLE
27766: LD_INT 0
27768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27769: LD_ADDR_VAR 0 1
27773: PUSH
27774: LD_INT 22
27776: PUSH
27777: LD_OWVAR 2
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 21
27788: PUSH
27789: LD_INT 1
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 3
27798: PUSH
27799: LD_INT 23
27801: PUSH
27802: LD_INT 0
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: LIST
27817: PPUSH
27818: CALL_OW 69
27822: ST_TO_ADDR
// if not tmp then
27823: LD_VAR 0 1
27827: NOT
27828: IFFALSE 27832
// exit ;
27830: GO 27858
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27832: LD_VAR 0 1
27836: PUSH
27837: LD_INT 1
27839: PPUSH
27840: LD_VAR 0 1
27844: PPUSH
27845: CALL_OW 12
27849: ARRAY
27850: PPUSH
27851: LD_INT 200
27853: PPUSH
27854: CALL_OW 234
// end ;
27858: PPOPN 1
27860: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27861: LD_EXP 62
27865: PUSH
27866: LD_EXP 91
27870: AND
27871: IFFALSE 27950
27873: GO 27875
27875: DISABLE
27876: LD_INT 0
27878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27879: LD_ADDR_VAR 0 1
27883: PUSH
27884: LD_INT 22
27886: PUSH
27887: LD_OWVAR 2
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 21
27898: PUSH
27899: LD_INT 2
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PPUSH
27910: CALL_OW 69
27914: ST_TO_ADDR
// if not tmp then
27915: LD_VAR 0 1
27919: NOT
27920: IFFALSE 27924
// exit ;
27922: GO 27950
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27924: LD_VAR 0 1
27928: PUSH
27929: LD_INT 1
27931: PPUSH
27932: LD_VAR 0 1
27936: PPUSH
27937: CALL_OW 12
27941: ARRAY
27942: PPUSH
27943: LD_INT 60
27945: PPUSH
27946: CALL_OW 234
// end ;
27950: PPOPN 1
27952: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27953: LD_EXP 62
27957: PUSH
27958: LD_EXP 92
27962: AND
27963: IFFALSE 28062
27965: GO 27967
27967: DISABLE
27968: LD_INT 0
27970: PPUSH
27971: PPUSH
// begin enable ;
27972: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27973: LD_ADDR_VAR 0 1
27977: PUSH
27978: LD_INT 22
27980: PUSH
27981: LD_OWVAR 2
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 61
27992: PUSH
27993: EMPTY
27994: LIST
27995: PUSH
27996: LD_INT 33
27998: PUSH
27999: LD_INT 2
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: LIST
28010: PPUSH
28011: CALL_OW 69
28015: ST_TO_ADDR
// if not tmp then
28016: LD_VAR 0 1
28020: NOT
28021: IFFALSE 28025
// exit ;
28023: GO 28062
// for i in tmp do
28025: LD_ADDR_VAR 0 2
28029: PUSH
28030: LD_VAR 0 1
28034: PUSH
28035: FOR_IN
28036: IFFALSE 28060
// if IsControledBy ( i ) then
28038: LD_VAR 0 2
28042: PPUSH
28043: CALL_OW 312
28047: IFFALSE 28058
// ComUnlink ( i ) ;
28049: LD_VAR 0 2
28053: PPUSH
28054: CALL_OW 136
28058: GO 28035
28060: POP
28061: POP
// end ;
28062: PPOPN 2
28064: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28065: LD_EXP 62
28069: PUSH
28070: LD_EXP 93
28074: AND
28075: IFFALSE 28215
28077: GO 28079
28079: DISABLE
28080: LD_INT 0
28082: PPUSH
28083: PPUSH
// begin ToLua ( displayPowell(); ) ;
28084: LD_STRING displayPowell();
28086: PPUSH
28087: CALL_OW 559
// uc_side := 0 ;
28091: LD_ADDR_OWVAR 20
28095: PUSH
28096: LD_INT 0
28098: ST_TO_ADDR
// uc_nation := 2 ;
28099: LD_ADDR_OWVAR 21
28103: PUSH
28104: LD_INT 2
28106: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28107: LD_ADDR_OWVAR 37
28111: PUSH
28112: LD_INT 14
28114: ST_TO_ADDR
// vc_engine := engine_siberite ;
28115: LD_ADDR_OWVAR 39
28119: PUSH
28120: LD_INT 3
28122: ST_TO_ADDR
// vc_control := control_apeman ;
28123: LD_ADDR_OWVAR 38
28127: PUSH
28128: LD_INT 5
28130: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28131: LD_ADDR_OWVAR 40
28135: PUSH
28136: LD_INT 29
28138: ST_TO_ADDR
// un := CreateVehicle ;
28139: LD_ADDR_VAR 0 2
28143: PUSH
28144: CALL_OW 45
28148: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28149: LD_VAR 0 2
28153: PPUSH
28154: LD_INT 1
28156: PPUSH
28157: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28161: LD_INT 35
28163: PPUSH
28164: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28168: LD_VAR 0 2
28172: PPUSH
28173: LD_INT 22
28175: PUSH
28176: LD_OWVAR 2
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PPUSH
28185: CALL_OW 69
28189: PPUSH
28190: LD_VAR 0 2
28194: PPUSH
28195: CALL_OW 74
28199: PPUSH
28200: CALL_OW 115
// until IsDead ( un ) ;
28204: LD_VAR 0 2
28208: PPUSH
28209: CALL_OW 301
28213: IFFALSE 28161
// end ;
28215: PPOPN 2
28217: END
// every 0 0$1 trigger StreamModeActive and sStu do
28218: LD_EXP 62
28222: PUSH
28223: LD_EXP 101
28227: AND
28228: IFFALSE 28244
28230: GO 28232
28232: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28233: LD_STRING displayStucuk();
28235: PPUSH
28236: CALL_OW 559
// ResetFog ;
28240: CALL_OW 335
// end ;
28244: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28245: LD_EXP 62
28249: PUSH
28250: LD_EXP 94
28254: AND
28255: IFFALSE 28396
28257: GO 28259
28259: DISABLE
28260: LD_INT 0
28262: PPUSH
28263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28264: LD_ADDR_VAR 0 2
28268: PUSH
28269: LD_INT 22
28271: PUSH
28272: LD_OWVAR 2
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 21
28283: PUSH
28284: LD_INT 1
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PPUSH
28295: CALL_OW 69
28299: ST_TO_ADDR
// if not tmp then
28300: LD_VAR 0 2
28304: NOT
28305: IFFALSE 28309
// exit ;
28307: GO 28396
// un := tmp [ rand ( 1 , tmp ) ] ;
28309: LD_ADDR_VAR 0 1
28313: PUSH
28314: LD_VAR 0 2
28318: PUSH
28319: LD_INT 1
28321: PPUSH
28322: LD_VAR 0 2
28326: PPUSH
28327: CALL_OW 12
28331: ARRAY
28332: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28333: LD_VAR 0 1
28337: PPUSH
28338: LD_INT 0
28340: PPUSH
28341: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28345: LD_VAR 0 1
28349: PPUSH
28350: LD_OWVAR 3
28354: PUSH
28355: LD_VAR 0 1
28359: DIFF
28360: PPUSH
28361: LD_VAR 0 1
28365: PPUSH
28366: CALL_OW 74
28370: PPUSH
28371: CALL_OW 115
// wait ( 0 0$20 ) ;
28375: LD_INT 700
28377: PPUSH
28378: CALL_OW 67
// SetSide ( un , your_side ) ;
28382: LD_VAR 0 1
28386: PPUSH
28387: LD_OWVAR 2
28391: PPUSH
28392: CALL_OW 235
// end ;
28396: PPOPN 2
28398: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28399: LD_EXP 62
28403: PUSH
28404: LD_EXP 95
28408: AND
28409: IFFALSE 28515
28411: GO 28413
28413: DISABLE
28414: LD_INT 0
28416: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28417: LD_ADDR_VAR 0 1
28421: PUSH
28422: LD_INT 22
28424: PUSH
28425: LD_OWVAR 2
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 2
28436: PUSH
28437: LD_INT 30
28439: PUSH
28440: LD_INT 0
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 30
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: LIST
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PPUSH
28466: CALL_OW 69
28470: ST_TO_ADDR
// if not depot then
28471: LD_VAR 0 1
28475: NOT
28476: IFFALSE 28480
// exit ;
28478: GO 28515
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28480: LD_VAR 0 1
28484: PUSH
28485: LD_INT 1
28487: ARRAY
28488: PPUSH
28489: CALL_OW 250
28493: PPUSH
28494: LD_VAR 0 1
28498: PUSH
28499: LD_INT 1
28501: ARRAY
28502: PPUSH
28503: CALL_OW 251
28507: PPUSH
28508: LD_INT 70
28510: PPUSH
28511: CALL_OW 495
// end ;
28515: PPOPN 1
28517: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28518: LD_EXP 62
28522: PUSH
28523: LD_EXP 96
28527: AND
28528: IFFALSE 28739
28530: GO 28532
28532: DISABLE
28533: LD_INT 0
28535: PPUSH
28536: PPUSH
28537: PPUSH
28538: PPUSH
28539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28540: LD_ADDR_VAR 0 5
28544: PUSH
28545: LD_INT 22
28547: PUSH
28548: LD_OWVAR 2
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 21
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PPUSH
28571: CALL_OW 69
28575: ST_TO_ADDR
// if not tmp then
28576: LD_VAR 0 5
28580: NOT
28581: IFFALSE 28585
// exit ;
28583: GO 28739
// for i in tmp do
28585: LD_ADDR_VAR 0 1
28589: PUSH
28590: LD_VAR 0 5
28594: PUSH
28595: FOR_IN
28596: IFFALSE 28737
// begin d := rand ( 0 , 5 ) ;
28598: LD_ADDR_VAR 0 4
28602: PUSH
28603: LD_INT 0
28605: PPUSH
28606: LD_INT 5
28608: PPUSH
28609: CALL_OW 12
28613: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28614: LD_ADDR_VAR 0 2
28618: PUSH
28619: LD_VAR 0 1
28623: PPUSH
28624: CALL_OW 250
28628: PPUSH
28629: LD_VAR 0 4
28633: PPUSH
28634: LD_INT 3
28636: PPUSH
28637: LD_INT 12
28639: PPUSH
28640: CALL_OW 12
28644: PPUSH
28645: CALL_OW 272
28649: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28650: LD_ADDR_VAR 0 3
28654: PUSH
28655: LD_VAR 0 1
28659: PPUSH
28660: CALL_OW 251
28664: PPUSH
28665: LD_VAR 0 4
28669: PPUSH
28670: LD_INT 3
28672: PPUSH
28673: LD_INT 12
28675: PPUSH
28676: CALL_OW 12
28680: PPUSH
28681: CALL_OW 273
28685: ST_TO_ADDR
// if ValidHex ( x , y ) then
28686: LD_VAR 0 2
28690: PPUSH
28691: LD_VAR 0 3
28695: PPUSH
28696: CALL_OW 488
28700: IFFALSE 28735
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28702: LD_VAR 0 1
28706: PPUSH
28707: LD_VAR 0 2
28711: PPUSH
28712: LD_VAR 0 3
28716: PPUSH
28717: LD_INT 3
28719: PPUSH
28720: LD_INT 6
28722: PPUSH
28723: CALL_OW 12
28727: PPUSH
28728: LD_INT 1
28730: PPUSH
28731: CALL_OW 483
// end ;
28735: GO 28595
28737: POP
28738: POP
// end ;
28739: PPOPN 5
28741: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28742: LD_EXP 62
28746: PUSH
28747: LD_EXP 97
28751: AND
28752: IFFALSE 28846
28754: GO 28756
28756: DISABLE
28757: LD_INT 0
28759: PPUSH
28760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28761: LD_ADDR_VAR 0 2
28765: PUSH
28766: LD_INT 22
28768: PUSH
28769: LD_OWVAR 2
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 32
28780: PUSH
28781: LD_INT 1
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 21
28790: PUSH
28791: LD_INT 2
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: LIST
28802: PPUSH
28803: CALL_OW 69
28807: ST_TO_ADDR
// if not tmp then
28808: LD_VAR 0 2
28812: NOT
28813: IFFALSE 28817
// exit ;
28815: GO 28846
// for i in tmp do
28817: LD_ADDR_VAR 0 1
28821: PUSH
28822: LD_VAR 0 2
28826: PUSH
28827: FOR_IN
28828: IFFALSE 28844
// SetFuel ( i , 0 ) ;
28830: LD_VAR 0 1
28834: PPUSH
28835: LD_INT 0
28837: PPUSH
28838: CALL_OW 240
28842: GO 28827
28844: POP
28845: POP
// end ;
28846: PPOPN 2
28848: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28849: LD_EXP 62
28853: PUSH
28854: LD_EXP 98
28858: AND
28859: IFFALSE 28925
28861: GO 28863
28863: DISABLE
28864: LD_INT 0
28866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28867: LD_ADDR_VAR 0 1
28871: PUSH
28872: LD_INT 22
28874: PUSH
28875: LD_OWVAR 2
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 30
28886: PUSH
28887: LD_INT 29
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PPUSH
28898: CALL_OW 69
28902: ST_TO_ADDR
// if not tmp then
28903: LD_VAR 0 1
28907: NOT
28908: IFFALSE 28912
// exit ;
28910: GO 28925
// DestroyUnit ( tmp [ 1 ] ) ;
28912: LD_VAR 0 1
28916: PUSH
28917: LD_INT 1
28919: ARRAY
28920: PPUSH
28921: CALL_OW 65
// end ;
28925: PPOPN 1
28927: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28928: LD_EXP 62
28932: PUSH
28933: LD_EXP 100
28937: AND
28938: IFFALSE 29067
28940: GO 28942
28942: DISABLE
28943: LD_INT 0
28945: PPUSH
// begin uc_side := 0 ;
28946: LD_ADDR_OWVAR 20
28950: PUSH
28951: LD_INT 0
28953: ST_TO_ADDR
// uc_nation := nation_arabian ;
28954: LD_ADDR_OWVAR 21
28958: PUSH
28959: LD_INT 2
28961: ST_TO_ADDR
// hc_gallery :=  ;
28962: LD_ADDR_OWVAR 33
28966: PUSH
28967: LD_STRING 
28969: ST_TO_ADDR
// hc_name :=  ;
28970: LD_ADDR_OWVAR 26
28974: PUSH
28975: LD_STRING 
28977: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28978: LD_INT 1
28980: PPUSH
28981: LD_INT 11
28983: PPUSH
28984: LD_INT 10
28986: PPUSH
28987: CALL_OW 380
// un := CreateHuman ;
28991: LD_ADDR_VAR 0 1
28995: PUSH
28996: CALL_OW 44
29000: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29001: LD_VAR 0 1
29005: PPUSH
29006: LD_INT 1
29008: PPUSH
29009: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29013: LD_INT 35
29015: PPUSH
29016: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29020: LD_VAR 0 1
29024: PPUSH
29025: LD_INT 22
29027: PUSH
29028: LD_OWVAR 2
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PPUSH
29037: CALL_OW 69
29041: PPUSH
29042: LD_VAR 0 1
29046: PPUSH
29047: CALL_OW 74
29051: PPUSH
29052: CALL_OW 115
// until IsDead ( un ) ;
29056: LD_VAR 0 1
29060: PPUSH
29061: CALL_OW 301
29065: IFFALSE 29013
// end ;
29067: PPOPN 1
29069: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29070: LD_EXP 62
29074: PUSH
29075: LD_EXP 102
29079: AND
29080: IFFALSE 29092
29082: GO 29084
29084: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29085: LD_STRING earthquake(getX(game), 0, 32)
29087: PPUSH
29088: CALL_OW 559
29092: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29093: LD_EXP 62
29097: PUSH
29098: LD_EXP 103
29102: AND
29103: IFFALSE 29194
29105: GO 29107
29107: DISABLE
29108: LD_INT 0
29110: PPUSH
// begin enable ;
29111: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29112: LD_ADDR_VAR 0 1
29116: PUSH
29117: LD_INT 22
29119: PUSH
29120: LD_OWVAR 2
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 21
29131: PUSH
29132: LD_INT 2
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 33
29141: PUSH
29142: LD_INT 3
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: LIST
29153: PPUSH
29154: CALL_OW 69
29158: ST_TO_ADDR
// if not tmp then
29159: LD_VAR 0 1
29163: NOT
29164: IFFALSE 29168
// exit ;
29166: GO 29194
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29168: LD_VAR 0 1
29172: PUSH
29173: LD_INT 1
29175: PPUSH
29176: LD_VAR 0 1
29180: PPUSH
29181: CALL_OW 12
29185: ARRAY
29186: PPUSH
29187: LD_INT 1
29189: PPUSH
29190: CALL_OW 234
// end ;
29194: PPOPN 1
29196: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29197: LD_EXP 62
29201: PUSH
29202: LD_EXP 104
29206: AND
29207: IFFALSE 29348
29209: GO 29211
29211: DISABLE
29212: LD_INT 0
29214: PPUSH
29215: PPUSH
29216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29217: LD_ADDR_VAR 0 3
29221: PUSH
29222: LD_INT 22
29224: PUSH
29225: LD_OWVAR 2
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 25
29236: PUSH
29237: LD_INT 1
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PPUSH
29248: CALL_OW 69
29252: ST_TO_ADDR
// if not tmp then
29253: LD_VAR 0 3
29257: NOT
29258: IFFALSE 29262
// exit ;
29260: GO 29348
// un := tmp [ rand ( 1 , tmp ) ] ;
29262: LD_ADDR_VAR 0 2
29266: PUSH
29267: LD_VAR 0 3
29271: PUSH
29272: LD_INT 1
29274: PPUSH
29275: LD_VAR 0 3
29279: PPUSH
29280: CALL_OW 12
29284: ARRAY
29285: ST_TO_ADDR
// if Crawls ( un ) then
29286: LD_VAR 0 2
29290: PPUSH
29291: CALL_OW 318
29295: IFFALSE 29306
// ComWalk ( un ) ;
29297: LD_VAR 0 2
29301: PPUSH
29302: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29306: LD_VAR 0 2
29310: PPUSH
29311: LD_INT 9
29313: PPUSH
29314: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29318: LD_INT 28
29320: PPUSH
29321: LD_OWVAR 2
29325: PPUSH
29326: LD_INT 2
29328: PPUSH
29329: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29333: LD_INT 29
29335: PPUSH
29336: LD_OWVAR 2
29340: PPUSH
29341: LD_INT 2
29343: PPUSH
29344: CALL_OW 322
// end ;
29348: PPOPN 3
29350: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29351: LD_EXP 62
29355: PUSH
29356: LD_EXP 105
29360: AND
29361: IFFALSE 29472
29363: GO 29365
29365: DISABLE
29366: LD_INT 0
29368: PPUSH
29369: PPUSH
29370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29371: LD_ADDR_VAR 0 3
29375: PUSH
29376: LD_INT 22
29378: PUSH
29379: LD_OWVAR 2
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 25
29390: PUSH
29391: LD_INT 1
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PPUSH
29402: CALL_OW 69
29406: ST_TO_ADDR
// if not tmp then
29407: LD_VAR 0 3
29411: NOT
29412: IFFALSE 29416
// exit ;
29414: GO 29472
// un := tmp [ rand ( 1 , tmp ) ] ;
29416: LD_ADDR_VAR 0 2
29420: PUSH
29421: LD_VAR 0 3
29425: PUSH
29426: LD_INT 1
29428: PPUSH
29429: LD_VAR 0 3
29433: PPUSH
29434: CALL_OW 12
29438: ARRAY
29439: ST_TO_ADDR
// if Crawls ( un ) then
29440: LD_VAR 0 2
29444: PPUSH
29445: CALL_OW 318
29449: IFFALSE 29460
// ComWalk ( un ) ;
29451: LD_VAR 0 2
29455: PPUSH
29456: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29460: LD_VAR 0 2
29464: PPUSH
29465: LD_INT 8
29467: PPUSH
29468: CALL_OW 336
// end ;
29472: PPOPN 3
29474: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29475: LD_EXP 62
29479: PUSH
29480: LD_EXP 106
29484: AND
29485: IFFALSE 29629
29487: GO 29489
29489: DISABLE
29490: LD_INT 0
29492: PPUSH
29493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29494: LD_ADDR_VAR 0 2
29498: PUSH
29499: LD_INT 22
29501: PUSH
29502: LD_OWVAR 2
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 21
29513: PUSH
29514: LD_INT 2
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 2
29523: PUSH
29524: LD_INT 34
29526: PUSH
29527: LD_INT 12
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 34
29536: PUSH
29537: LD_INT 51
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 34
29546: PUSH
29547: LD_INT 32
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: LIST
29564: PPUSH
29565: CALL_OW 69
29569: ST_TO_ADDR
// if not tmp then
29570: LD_VAR 0 2
29574: NOT
29575: IFFALSE 29579
// exit ;
29577: GO 29629
// for i in tmp do
29579: LD_ADDR_VAR 0 1
29583: PUSH
29584: LD_VAR 0 2
29588: PUSH
29589: FOR_IN
29590: IFFALSE 29627
// if GetCargo ( i , mat_artifact ) = 0 then
29592: LD_VAR 0 1
29596: PPUSH
29597: LD_INT 4
29599: PPUSH
29600: CALL_OW 289
29604: PUSH
29605: LD_INT 0
29607: EQUAL
29608: IFFALSE 29625
// SetCargo ( i , mat_siberit , 100 ) ;
29610: LD_VAR 0 1
29614: PPUSH
29615: LD_INT 3
29617: PPUSH
29618: LD_INT 100
29620: PPUSH
29621: CALL_OW 290
29625: GO 29589
29627: POP
29628: POP
// end ;
29629: PPOPN 2
29631: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29632: LD_EXP 62
29636: PUSH
29637: LD_EXP 107
29641: AND
29642: IFFALSE 29825
29644: GO 29646
29646: DISABLE
29647: LD_INT 0
29649: PPUSH
29650: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29651: LD_ADDR_VAR 0 2
29655: PUSH
29656: LD_INT 22
29658: PUSH
29659: LD_OWVAR 2
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PPUSH
29668: CALL_OW 69
29672: ST_TO_ADDR
// if not tmp then
29673: LD_VAR 0 2
29677: NOT
29678: IFFALSE 29682
// exit ;
29680: GO 29825
// for i := 1 to 2 do
29682: LD_ADDR_VAR 0 1
29686: PUSH
29687: DOUBLE
29688: LD_INT 1
29690: DEC
29691: ST_TO_ADDR
29692: LD_INT 2
29694: PUSH
29695: FOR_TO
29696: IFFALSE 29823
// begin uc_side := your_side ;
29698: LD_ADDR_OWVAR 20
29702: PUSH
29703: LD_OWVAR 2
29707: ST_TO_ADDR
// uc_nation := nation_american ;
29708: LD_ADDR_OWVAR 21
29712: PUSH
29713: LD_INT 1
29715: ST_TO_ADDR
// vc_chassis := us_morphling ;
29716: LD_ADDR_OWVAR 37
29720: PUSH
29721: LD_INT 5
29723: ST_TO_ADDR
// vc_engine := engine_siberite ;
29724: LD_ADDR_OWVAR 39
29728: PUSH
29729: LD_INT 3
29731: ST_TO_ADDR
// vc_control := control_computer ;
29732: LD_ADDR_OWVAR 38
29736: PUSH
29737: LD_INT 3
29739: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29740: LD_ADDR_OWVAR 40
29744: PUSH
29745: LD_INT 10
29747: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29748: LD_VAR 0 2
29752: PUSH
29753: LD_INT 1
29755: ARRAY
29756: PPUSH
29757: CALL_OW 310
29761: NOT
29762: IFFALSE 29809
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29764: CALL_OW 45
29768: PPUSH
29769: LD_VAR 0 2
29773: PUSH
29774: LD_INT 1
29776: ARRAY
29777: PPUSH
29778: CALL_OW 250
29782: PPUSH
29783: LD_VAR 0 2
29787: PUSH
29788: LD_INT 1
29790: ARRAY
29791: PPUSH
29792: CALL_OW 251
29796: PPUSH
29797: LD_INT 12
29799: PPUSH
29800: LD_INT 1
29802: PPUSH
29803: CALL_OW 50
29807: GO 29821
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29809: CALL_OW 45
29813: PPUSH
29814: LD_INT 1
29816: PPUSH
29817: CALL_OW 51
// end ;
29821: GO 29695
29823: POP
29824: POP
// end ;
29825: PPOPN 2
29827: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29828: LD_EXP 62
29832: PUSH
29833: LD_EXP 108
29837: AND
29838: IFFALSE 30060
29840: GO 29842
29842: DISABLE
29843: LD_INT 0
29845: PPUSH
29846: PPUSH
29847: PPUSH
29848: PPUSH
29849: PPUSH
29850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29851: LD_ADDR_VAR 0 6
29855: PUSH
29856: LD_INT 22
29858: PUSH
29859: LD_OWVAR 2
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 21
29870: PUSH
29871: LD_INT 1
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 3
29880: PUSH
29881: LD_INT 23
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: LIST
29899: PPUSH
29900: CALL_OW 69
29904: ST_TO_ADDR
// if not tmp then
29905: LD_VAR 0 6
29909: NOT
29910: IFFALSE 29914
// exit ;
29912: GO 30060
// s1 := rand ( 1 , 4 ) ;
29914: LD_ADDR_VAR 0 2
29918: PUSH
29919: LD_INT 1
29921: PPUSH
29922: LD_INT 4
29924: PPUSH
29925: CALL_OW 12
29929: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29930: LD_ADDR_VAR 0 4
29934: PUSH
29935: LD_VAR 0 6
29939: PUSH
29940: LD_INT 1
29942: ARRAY
29943: PPUSH
29944: LD_VAR 0 2
29948: PPUSH
29949: CALL_OW 259
29953: ST_TO_ADDR
// if s1 = 1 then
29954: LD_VAR 0 2
29958: PUSH
29959: LD_INT 1
29961: EQUAL
29962: IFFALSE 29982
// s2 := rand ( 2 , 4 ) else
29964: LD_ADDR_VAR 0 3
29968: PUSH
29969: LD_INT 2
29971: PPUSH
29972: LD_INT 4
29974: PPUSH
29975: CALL_OW 12
29979: ST_TO_ADDR
29980: GO 29990
// s2 := 1 ;
29982: LD_ADDR_VAR 0 3
29986: PUSH
29987: LD_INT 1
29989: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29990: LD_ADDR_VAR 0 5
29994: PUSH
29995: LD_VAR 0 6
29999: PUSH
30000: LD_INT 1
30002: ARRAY
30003: PPUSH
30004: LD_VAR 0 3
30008: PPUSH
30009: CALL_OW 259
30013: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30014: LD_VAR 0 6
30018: PUSH
30019: LD_INT 1
30021: ARRAY
30022: PPUSH
30023: LD_VAR 0 2
30027: PPUSH
30028: LD_VAR 0 5
30032: PPUSH
30033: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30037: LD_VAR 0 6
30041: PUSH
30042: LD_INT 1
30044: ARRAY
30045: PPUSH
30046: LD_VAR 0 3
30050: PPUSH
30051: LD_VAR 0 4
30055: PPUSH
30056: CALL_OW 237
// end ;
30060: PPOPN 6
30062: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30063: LD_EXP 62
30067: PUSH
30068: LD_EXP 109
30072: AND
30073: IFFALSE 30152
30075: GO 30077
30077: DISABLE
30078: LD_INT 0
30080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30081: LD_ADDR_VAR 0 1
30085: PUSH
30086: LD_INT 22
30088: PUSH
30089: LD_OWVAR 2
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 30
30100: PUSH
30101: LD_INT 3
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PPUSH
30112: CALL_OW 69
30116: ST_TO_ADDR
// if not tmp then
30117: LD_VAR 0 1
30121: NOT
30122: IFFALSE 30126
// exit ;
30124: GO 30152
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30126: LD_VAR 0 1
30130: PUSH
30131: LD_INT 1
30133: PPUSH
30134: LD_VAR 0 1
30138: PPUSH
30139: CALL_OW 12
30143: ARRAY
30144: PPUSH
30145: LD_INT 1
30147: PPUSH
30148: CALL_OW 234
// end ;
30152: PPOPN 1
30154: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30155: LD_EXP 62
30159: PUSH
30160: LD_EXP 110
30164: AND
30165: IFFALSE 30277
30167: GO 30169
30169: DISABLE
30170: LD_INT 0
30172: PPUSH
30173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30174: LD_ADDR_VAR 0 2
30178: PUSH
30179: LD_INT 22
30181: PUSH
30182: LD_OWVAR 2
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 2
30193: PUSH
30194: LD_INT 30
30196: PUSH
30197: LD_INT 27
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 30
30206: PUSH
30207: LD_INT 26
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 30
30216: PUSH
30217: LD_INT 28
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PPUSH
30234: CALL_OW 69
30238: ST_TO_ADDR
// if not tmp then
30239: LD_VAR 0 2
30243: NOT
30244: IFFALSE 30248
// exit ;
30246: GO 30277
// for i in tmp do
30248: LD_ADDR_VAR 0 1
30252: PUSH
30253: LD_VAR 0 2
30257: PUSH
30258: FOR_IN
30259: IFFALSE 30275
// SetLives ( i , 1 ) ;
30261: LD_VAR 0 1
30265: PPUSH
30266: LD_INT 1
30268: PPUSH
30269: CALL_OW 234
30273: GO 30258
30275: POP
30276: POP
// end ;
30277: PPOPN 2
30279: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30280: LD_EXP 62
30284: PUSH
30285: LD_EXP 111
30289: AND
30290: IFFALSE 30577
30292: GO 30294
30294: DISABLE
30295: LD_INT 0
30297: PPUSH
30298: PPUSH
30299: PPUSH
// begin i := rand ( 1 , 7 ) ;
30300: LD_ADDR_VAR 0 1
30304: PUSH
30305: LD_INT 1
30307: PPUSH
30308: LD_INT 7
30310: PPUSH
30311: CALL_OW 12
30315: ST_TO_ADDR
// case i of 1 :
30316: LD_VAR 0 1
30320: PUSH
30321: LD_INT 1
30323: DOUBLE
30324: EQUAL
30325: IFTRUE 30329
30327: GO 30339
30329: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30330: LD_STRING earthquake(getX(game), 0, 32)
30332: PPUSH
30333: CALL_OW 559
30337: GO 30577
30339: LD_INT 2
30341: DOUBLE
30342: EQUAL
30343: IFTRUE 30347
30345: GO 30361
30347: POP
// begin ToLua ( displayStucuk(); ) ;
30348: LD_STRING displayStucuk();
30350: PPUSH
30351: CALL_OW 559
// ResetFog ;
30355: CALL_OW 335
// end ; 3 :
30359: GO 30577
30361: LD_INT 3
30363: DOUBLE
30364: EQUAL
30365: IFTRUE 30369
30367: GO 30473
30369: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30370: LD_ADDR_VAR 0 2
30374: PUSH
30375: LD_INT 22
30377: PUSH
30378: LD_OWVAR 2
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 25
30389: PUSH
30390: LD_INT 1
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PPUSH
30401: CALL_OW 69
30405: ST_TO_ADDR
// if not tmp then
30406: LD_VAR 0 2
30410: NOT
30411: IFFALSE 30415
// exit ;
30413: GO 30577
// un := tmp [ rand ( 1 , tmp ) ] ;
30415: LD_ADDR_VAR 0 3
30419: PUSH
30420: LD_VAR 0 2
30424: PUSH
30425: LD_INT 1
30427: PPUSH
30428: LD_VAR 0 2
30432: PPUSH
30433: CALL_OW 12
30437: ARRAY
30438: ST_TO_ADDR
// if Crawls ( un ) then
30439: LD_VAR 0 3
30443: PPUSH
30444: CALL_OW 318
30448: IFFALSE 30459
// ComWalk ( un ) ;
30450: LD_VAR 0 3
30454: PPUSH
30455: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30459: LD_VAR 0 3
30463: PPUSH
30464: LD_INT 8
30466: PPUSH
30467: CALL_OW 336
// end ; 4 :
30471: GO 30577
30473: LD_INT 4
30475: DOUBLE
30476: EQUAL
30477: IFTRUE 30481
30479: GO 30555
30481: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30482: LD_ADDR_VAR 0 2
30486: PUSH
30487: LD_INT 22
30489: PUSH
30490: LD_OWVAR 2
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 30
30501: PUSH
30502: LD_INT 29
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PPUSH
30513: CALL_OW 69
30517: ST_TO_ADDR
// if not tmp then
30518: LD_VAR 0 2
30522: NOT
30523: IFFALSE 30527
// exit ;
30525: GO 30577
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30527: LD_VAR 0 2
30531: PUSH
30532: LD_INT 1
30534: ARRAY
30535: PPUSH
30536: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30540: LD_VAR 0 2
30544: PUSH
30545: LD_INT 1
30547: ARRAY
30548: PPUSH
30549: CALL_OW 65
// end ; 5 .. 7 :
30553: GO 30577
30555: LD_INT 5
30557: DOUBLE
30558: GREATEREQUAL
30559: IFFALSE 30567
30561: LD_INT 7
30563: DOUBLE
30564: LESSEQUAL
30565: IFTRUE 30569
30567: GO 30576
30569: POP
// StreamSibBomb ; end ;
30570: CALL 26814 0 0
30574: GO 30577
30576: POP
// end ;
30577: PPOPN 3
30579: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30580: LD_EXP 62
30584: PUSH
30585: LD_EXP 112
30589: AND
30590: IFFALSE 30746
30592: GO 30594
30594: DISABLE
30595: LD_INT 0
30597: PPUSH
30598: PPUSH
30599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30600: LD_ADDR_VAR 0 2
30604: PUSH
30605: LD_INT 81
30607: PUSH
30608: LD_OWVAR 2
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 2
30619: PUSH
30620: LD_INT 21
30622: PUSH
30623: LD_INT 1
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 21
30632: PUSH
30633: LD_INT 2
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: LIST
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PPUSH
30649: CALL_OW 69
30653: ST_TO_ADDR
// if not tmp then
30654: LD_VAR 0 2
30658: NOT
30659: IFFALSE 30663
// exit ;
30661: GO 30746
// p := 0 ;
30663: LD_ADDR_VAR 0 3
30667: PUSH
30668: LD_INT 0
30670: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30671: LD_INT 35
30673: PPUSH
30674: CALL_OW 67
// p := p + 1 ;
30678: LD_ADDR_VAR 0 3
30682: PUSH
30683: LD_VAR 0 3
30687: PUSH
30688: LD_INT 1
30690: PLUS
30691: ST_TO_ADDR
// for i in tmp do
30692: LD_ADDR_VAR 0 1
30696: PUSH
30697: LD_VAR 0 2
30701: PUSH
30702: FOR_IN
30703: IFFALSE 30734
// if GetLives ( i ) < 1000 then
30705: LD_VAR 0 1
30709: PPUSH
30710: CALL_OW 256
30714: PUSH
30715: LD_INT 1000
30717: LESS
30718: IFFALSE 30732
// SetLives ( i , 1000 ) ;
30720: LD_VAR 0 1
30724: PPUSH
30725: LD_INT 1000
30727: PPUSH
30728: CALL_OW 234
30732: GO 30702
30734: POP
30735: POP
// until p > 20 ;
30736: LD_VAR 0 3
30740: PUSH
30741: LD_INT 20
30743: GREATER
30744: IFFALSE 30671
// end ;
30746: PPOPN 3
30748: END
// every 0 0$1 trigger StreamModeActive and sTime do
30749: LD_EXP 62
30753: PUSH
30754: LD_EXP 113
30758: AND
30759: IFFALSE 30794
30761: GO 30763
30763: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30764: LD_INT 28
30766: PPUSH
30767: LD_OWVAR 2
30771: PPUSH
30772: LD_INT 2
30774: PPUSH
30775: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30779: LD_INT 30
30781: PPUSH
30782: LD_OWVAR 2
30786: PPUSH
30787: LD_INT 2
30789: PPUSH
30790: CALL_OW 322
// end ;
30794: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30795: LD_EXP 62
30799: PUSH
30800: LD_EXP 114
30804: AND
30805: IFFALSE 30926
30807: GO 30809
30809: DISABLE
30810: LD_INT 0
30812: PPUSH
30813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30814: LD_ADDR_VAR 0 2
30818: PUSH
30819: LD_INT 22
30821: PUSH
30822: LD_OWVAR 2
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 21
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 3
30843: PUSH
30844: LD_INT 23
30846: PUSH
30847: LD_INT 0
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: LIST
30862: PPUSH
30863: CALL_OW 69
30867: ST_TO_ADDR
// if not tmp then
30868: LD_VAR 0 2
30872: NOT
30873: IFFALSE 30877
// exit ;
30875: GO 30926
// for i in tmp do
30877: LD_ADDR_VAR 0 1
30881: PUSH
30882: LD_VAR 0 2
30886: PUSH
30887: FOR_IN
30888: IFFALSE 30924
// begin if Crawls ( i ) then
30890: LD_VAR 0 1
30894: PPUSH
30895: CALL_OW 318
30899: IFFALSE 30910
// ComWalk ( i ) ;
30901: LD_VAR 0 1
30905: PPUSH
30906: CALL_OW 138
// SetClass ( i , 2 ) ;
30910: LD_VAR 0 1
30914: PPUSH
30915: LD_INT 2
30917: PPUSH
30918: CALL_OW 336
// end ;
30922: GO 30887
30924: POP
30925: POP
// end ;
30926: PPOPN 2
30928: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30929: LD_EXP 62
30933: PUSH
30934: LD_EXP 115
30938: AND
30939: IFFALSE 31227
30941: GO 30943
30943: DISABLE
30944: LD_INT 0
30946: PPUSH
30947: PPUSH
30948: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30949: LD_OWVAR 2
30953: PPUSH
30954: LD_INT 9
30956: PPUSH
30957: LD_INT 1
30959: PPUSH
30960: LD_INT 1
30962: PPUSH
30963: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30967: LD_INT 9
30969: PPUSH
30970: LD_OWVAR 2
30974: PPUSH
30975: CALL_OW 343
// uc_side := 9 ;
30979: LD_ADDR_OWVAR 20
30983: PUSH
30984: LD_INT 9
30986: ST_TO_ADDR
// uc_nation := 2 ;
30987: LD_ADDR_OWVAR 21
30991: PUSH
30992: LD_INT 2
30994: ST_TO_ADDR
// hc_name := Dark Warrior ;
30995: LD_ADDR_OWVAR 26
30999: PUSH
31000: LD_STRING Dark Warrior
31002: ST_TO_ADDR
// hc_gallery :=  ;
31003: LD_ADDR_OWVAR 33
31007: PUSH
31008: LD_STRING 
31010: ST_TO_ADDR
// hc_noskilllimit := true ;
31011: LD_ADDR_OWVAR 76
31015: PUSH
31016: LD_INT 1
31018: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31019: LD_ADDR_OWVAR 31
31023: PUSH
31024: LD_INT 30
31026: PUSH
31027: LD_INT 30
31029: PUSH
31030: LD_INT 30
31032: PUSH
31033: LD_INT 30
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: ST_TO_ADDR
// un := CreateHuman ;
31042: LD_ADDR_VAR 0 3
31046: PUSH
31047: CALL_OW 44
31051: ST_TO_ADDR
// hc_noskilllimit := false ;
31052: LD_ADDR_OWVAR 76
31056: PUSH
31057: LD_INT 0
31059: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31060: LD_VAR 0 3
31064: PPUSH
31065: LD_INT 1
31067: PPUSH
31068: CALL_OW 51
// ToLua ( playRanger() ) ;
31072: LD_STRING playRanger()
31074: PPUSH
31075: CALL_OW 559
// p := 0 ;
31079: LD_ADDR_VAR 0 2
31083: PUSH
31084: LD_INT 0
31086: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31087: LD_INT 35
31089: PPUSH
31090: CALL_OW 67
// p := p + 1 ;
31094: LD_ADDR_VAR 0 2
31098: PUSH
31099: LD_VAR 0 2
31103: PUSH
31104: LD_INT 1
31106: PLUS
31107: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31108: LD_VAR 0 3
31112: PPUSH
31113: CALL_OW 256
31117: PUSH
31118: LD_INT 1000
31120: LESS
31121: IFFALSE 31135
// SetLives ( un , 1000 ) ;
31123: LD_VAR 0 3
31127: PPUSH
31128: LD_INT 1000
31130: PPUSH
31131: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31135: LD_VAR 0 3
31139: PPUSH
31140: LD_INT 81
31142: PUSH
31143: LD_OWVAR 2
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 91
31154: PUSH
31155: LD_VAR 0 3
31159: PUSH
31160: LD_INT 30
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: LIST
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PPUSH
31172: CALL_OW 69
31176: PPUSH
31177: LD_VAR 0 3
31181: PPUSH
31182: CALL_OW 74
31186: PPUSH
31187: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31191: LD_VAR 0 2
31195: PUSH
31196: LD_INT 80
31198: GREATER
31199: PUSH
31200: LD_VAR 0 3
31204: PPUSH
31205: CALL_OW 301
31209: OR
31210: IFFALSE 31087
// if un then
31212: LD_VAR 0 3
31216: IFFALSE 31227
// RemoveUnit ( un ) ;
31218: LD_VAR 0 3
31222: PPUSH
31223: CALL_OW 64
// end ;
31227: PPOPN 3
31229: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31230: LD_EXP 116
31234: IFFALSE 31350
31236: GO 31238
31238: DISABLE
31239: LD_INT 0
31241: PPUSH
31242: PPUSH
31243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31244: LD_ADDR_VAR 0 2
31248: PUSH
31249: LD_INT 81
31251: PUSH
31252: LD_OWVAR 2
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 21
31263: PUSH
31264: LD_INT 1
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PPUSH
31275: CALL_OW 69
31279: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31280: LD_STRING playComputer()
31282: PPUSH
31283: CALL_OW 559
// if not tmp then
31287: LD_VAR 0 2
31291: NOT
31292: IFFALSE 31296
// exit ;
31294: GO 31350
// for i in tmp do
31296: LD_ADDR_VAR 0 1
31300: PUSH
31301: LD_VAR 0 2
31305: PUSH
31306: FOR_IN
31307: IFFALSE 31348
// for j := 1 to 4 do
31309: LD_ADDR_VAR 0 3
31313: PUSH
31314: DOUBLE
31315: LD_INT 1
31317: DEC
31318: ST_TO_ADDR
31319: LD_INT 4
31321: PUSH
31322: FOR_TO
31323: IFFALSE 31344
// SetSkill ( i , j , 10 ) ;
31325: LD_VAR 0 1
31329: PPUSH
31330: LD_VAR 0 3
31334: PPUSH
31335: LD_INT 10
31337: PPUSH
31338: CALL_OW 237
31342: GO 31322
31344: POP
31345: POP
31346: GO 31306
31348: POP
31349: POP
// end ;
31350: PPOPN 3
31352: END
// every 0 0$1 trigger s30 do var i , tmp ;
31353: LD_EXP 117
31357: IFFALSE 31426
31359: GO 31361
31361: DISABLE
31362: LD_INT 0
31364: PPUSH
31365: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31366: LD_ADDR_VAR 0 2
31370: PUSH
31371: LD_INT 22
31373: PUSH
31374: LD_OWVAR 2
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PPUSH
31383: CALL_OW 69
31387: ST_TO_ADDR
// if not tmp then
31388: LD_VAR 0 2
31392: NOT
31393: IFFALSE 31397
// exit ;
31395: GO 31426
// for i in tmp do
31397: LD_ADDR_VAR 0 1
31401: PUSH
31402: LD_VAR 0 2
31406: PUSH
31407: FOR_IN
31408: IFFALSE 31424
// SetLives ( i , 300 ) ;
31410: LD_VAR 0 1
31414: PPUSH
31415: LD_INT 300
31417: PPUSH
31418: CALL_OW 234
31422: GO 31407
31424: POP
31425: POP
// end ;
31426: PPOPN 2
31428: END
// every 0 0$1 trigger s60 do var i , tmp ;
31429: LD_EXP 118
31433: IFFALSE 31502
31435: GO 31437
31437: DISABLE
31438: LD_INT 0
31440: PPUSH
31441: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31442: LD_ADDR_VAR 0 2
31446: PUSH
31447: LD_INT 22
31449: PUSH
31450: LD_OWVAR 2
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PPUSH
31459: CALL_OW 69
31463: ST_TO_ADDR
// if not tmp then
31464: LD_VAR 0 2
31468: NOT
31469: IFFALSE 31473
// exit ;
31471: GO 31502
// for i in tmp do
31473: LD_ADDR_VAR 0 1
31477: PUSH
31478: LD_VAR 0 2
31482: PUSH
31483: FOR_IN
31484: IFFALSE 31500
// SetLives ( i , 600 ) ;
31486: LD_VAR 0 1
31490: PPUSH
31491: LD_INT 600
31493: PPUSH
31494: CALL_OW 234
31498: GO 31483
31500: POP
31501: POP
// end ;
31502: PPOPN 2
31504: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31505: LD_INT 0
31507: PPUSH
// case cmd of 301 :
31508: LD_VAR 0 1
31512: PUSH
31513: LD_INT 301
31515: DOUBLE
31516: EQUAL
31517: IFTRUE 31521
31519: GO 31553
31521: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31522: LD_VAR 0 6
31526: PPUSH
31527: LD_VAR 0 7
31531: PPUSH
31532: LD_VAR 0 8
31536: PPUSH
31537: LD_VAR 0 4
31541: PPUSH
31542: LD_VAR 0 5
31546: PPUSH
31547: CALL 32754 0 5
31551: GO 31674
31553: LD_INT 302
31555: DOUBLE
31556: EQUAL
31557: IFTRUE 31561
31559: GO 31598
31561: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31562: LD_VAR 0 6
31566: PPUSH
31567: LD_VAR 0 7
31571: PPUSH
31572: LD_VAR 0 8
31576: PPUSH
31577: LD_VAR 0 9
31581: PPUSH
31582: LD_VAR 0 4
31586: PPUSH
31587: LD_VAR 0 5
31591: PPUSH
31592: CALL 32845 0 6
31596: GO 31674
31598: LD_INT 303
31600: DOUBLE
31601: EQUAL
31602: IFTRUE 31606
31604: GO 31643
31606: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31607: LD_VAR 0 6
31611: PPUSH
31612: LD_VAR 0 7
31616: PPUSH
31617: LD_VAR 0 8
31621: PPUSH
31622: LD_VAR 0 9
31626: PPUSH
31627: LD_VAR 0 4
31631: PPUSH
31632: LD_VAR 0 5
31636: PPUSH
31637: CALL 31679 0 6
31641: GO 31674
31643: LD_INT 304
31645: DOUBLE
31646: EQUAL
31647: IFTRUE 31651
31649: GO 31673
31651: POP
// hHackTeleport ( unit , x , y ) ; end ;
31652: LD_VAR 0 2
31656: PPUSH
31657: LD_VAR 0 4
31661: PPUSH
31662: LD_VAR 0 5
31666: PPUSH
31667: CALL 33438 0 3
31671: GO 31674
31673: POP
// end ;
31674: LD_VAR 0 12
31678: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31679: LD_INT 0
31681: PPUSH
31682: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31683: LD_VAR 0 1
31687: PUSH
31688: LD_INT 1
31690: LESS
31691: PUSH
31692: LD_VAR 0 1
31696: PUSH
31697: LD_INT 3
31699: GREATER
31700: OR
31701: PUSH
31702: LD_VAR 0 5
31706: PPUSH
31707: LD_VAR 0 6
31711: PPUSH
31712: CALL_OW 428
31716: OR
31717: IFFALSE 31721
// exit ;
31719: GO 32441
// uc_side := your_side ;
31721: LD_ADDR_OWVAR 20
31725: PUSH
31726: LD_OWVAR 2
31730: ST_TO_ADDR
// uc_nation := nation ;
31731: LD_ADDR_OWVAR 21
31735: PUSH
31736: LD_VAR 0 1
31740: ST_TO_ADDR
// bc_level = 1 ;
31741: LD_ADDR_OWVAR 43
31745: PUSH
31746: LD_INT 1
31748: ST_TO_ADDR
// case btype of 1 :
31749: LD_VAR 0 2
31753: PUSH
31754: LD_INT 1
31756: DOUBLE
31757: EQUAL
31758: IFTRUE 31762
31760: GO 31773
31762: POP
// bc_type := b_depot ; 2 :
31763: LD_ADDR_OWVAR 42
31767: PUSH
31768: LD_INT 0
31770: ST_TO_ADDR
31771: GO 32385
31773: LD_INT 2
31775: DOUBLE
31776: EQUAL
31777: IFTRUE 31781
31779: GO 31792
31781: POP
// bc_type := b_warehouse ; 3 :
31782: LD_ADDR_OWVAR 42
31786: PUSH
31787: LD_INT 1
31789: ST_TO_ADDR
31790: GO 32385
31792: LD_INT 3
31794: DOUBLE
31795: EQUAL
31796: IFTRUE 31800
31798: GO 31811
31800: POP
// bc_type := b_lab ; 4 .. 9 :
31801: LD_ADDR_OWVAR 42
31805: PUSH
31806: LD_INT 6
31808: ST_TO_ADDR
31809: GO 32385
31811: LD_INT 4
31813: DOUBLE
31814: GREATEREQUAL
31815: IFFALSE 31823
31817: LD_INT 9
31819: DOUBLE
31820: LESSEQUAL
31821: IFTRUE 31825
31823: GO 31877
31825: POP
// begin bc_type := b_lab_half ;
31826: LD_ADDR_OWVAR 42
31830: PUSH
31831: LD_INT 7
31833: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31834: LD_ADDR_OWVAR 44
31838: PUSH
31839: LD_INT 10
31841: PUSH
31842: LD_INT 11
31844: PUSH
31845: LD_INT 12
31847: PUSH
31848: LD_INT 15
31850: PUSH
31851: LD_INT 14
31853: PUSH
31854: LD_INT 13
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: PUSH
31865: LD_VAR 0 2
31869: PUSH
31870: LD_INT 3
31872: MINUS
31873: ARRAY
31874: ST_TO_ADDR
// end ; 10 .. 13 :
31875: GO 32385
31877: LD_INT 10
31879: DOUBLE
31880: GREATEREQUAL
31881: IFFALSE 31889
31883: LD_INT 13
31885: DOUBLE
31886: LESSEQUAL
31887: IFTRUE 31891
31889: GO 31968
31891: POP
// begin bc_type := b_lab_full ;
31892: LD_ADDR_OWVAR 42
31896: PUSH
31897: LD_INT 8
31899: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31900: LD_ADDR_OWVAR 44
31904: PUSH
31905: LD_INT 10
31907: PUSH
31908: LD_INT 12
31910: PUSH
31911: LD_INT 14
31913: PUSH
31914: LD_INT 13
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: PUSH
31923: LD_VAR 0 2
31927: PUSH
31928: LD_INT 9
31930: MINUS
31931: ARRAY
31932: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31933: LD_ADDR_OWVAR 45
31937: PUSH
31938: LD_INT 11
31940: PUSH
31941: LD_INT 15
31943: PUSH
31944: LD_INT 12
31946: PUSH
31947: LD_INT 15
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: PUSH
31956: LD_VAR 0 2
31960: PUSH
31961: LD_INT 9
31963: MINUS
31964: ARRAY
31965: ST_TO_ADDR
// end ; 14 :
31966: GO 32385
31968: LD_INT 14
31970: DOUBLE
31971: EQUAL
31972: IFTRUE 31976
31974: GO 31987
31976: POP
// bc_type := b_workshop ; 15 :
31977: LD_ADDR_OWVAR 42
31981: PUSH
31982: LD_INT 2
31984: ST_TO_ADDR
31985: GO 32385
31987: LD_INT 15
31989: DOUBLE
31990: EQUAL
31991: IFTRUE 31995
31993: GO 32006
31995: POP
// bc_type := b_factory ; 16 :
31996: LD_ADDR_OWVAR 42
32000: PUSH
32001: LD_INT 3
32003: ST_TO_ADDR
32004: GO 32385
32006: LD_INT 16
32008: DOUBLE
32009: EQUAL
32010: IFTRUE 32014
32012: GO 32025
32014: POP
// bc_type := b_ext_gun ; 17 :
32015: LD_ADDR_OWVAR 42
32019: PUSH
32020: LD_INT 17
32022: ST_TO_ADDR
32023: GO 32385
32025: LD_INT 17
32027: DOUBLE
32028: EQUAL
32029: IFTRUE 32033
32031: GO 32061
32033: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32034: LD_ADDR_OWVAR 42
32038: PUSH
32039: LD_INT 19
32041: PUSH
32042: LD_INT 23
32044: PUSH
32045: LD_INT 19
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: LIST
32052: PUSH
32053: LD_VAR 0 1
32057: ARRAY
32058: ST_TO_ADDR
32059: GO 32385
32061: LD_INT 18
32063: DOUBLE
32064: EQUAL
32065: IFTRUE 32069
32067: GO 32080
32069: POP
// bc_type := b_ext_radar ; 19 :
32070: LD_ADDR_OWVAR 42
32074: PUSH
32075: LD_INT 20
32077: ST_TO_ADDR
32078: GO 32385
32080: LD_INT 19
32082: DOUBLE
32083: EQUAL
32084: IFTRUE 32088
32086: GO 32099
32088: POP
// bc_type := b_ext_radio ; 20 :
32089: LD_ADDR_OWVAR 42
32093: PUSH
32094: LD_INT 22
32096: ST_TO_ADDR
32097: GO 32385
32099: LD_INT 20
32101: DOUBLE
32102: EQUAL
32103: IFTRUE 32107
32105: GO 32118
32107: POP
// bc_type := b_ext_siberium ; 21 :
32108: LD_ADDR_OWVAR 42
32112: PUSH
32113: LD_INT 21
32115: ST_TO_ADDR
32116: GO 32385
32118: LD_INT 21
32120: DOUBLE
32121: EQUAL
32122: IFTRUE 32126
32124: GO 32137
32126: POP
// bc_type := b_ext_computer ; 22 :
32127: LD_ADDR_OWVAR 42
32131: PUSH
32132: LD_INT 24
32134: ST_TO_ADDR
32135: GO 32385
32137: LD_INT 22
32139: DOUBLE
32140: EQUAL
32141: IFTRUE 32145
32143: GO 32156
32145: POP
// bc_type := b_ext_track ; 23 :
32146: LD_ADDR_OWVAR 42
32150: PUSH
32151: LD_INT 16
32153: ST_TO_ADDR
32154: GO 32385
32156: LD_INT 23
32158: DOUBLE
32159: EQUAL
32160: IFTRUE 32164
32162: GO 32175
32164: POP
// bc_type := b_ext_laser ; 24 :
32165: LD_ADDR_OWVAR 42
32169: PUSH
32170: LD_INT 25
32172: ST_TO_ADDR
32173: GO 32385
32175: LD_INT 24
32177: DOUBLE
32178: EQUAL
32179: IFTRUE 32183
32181: GO 32194
32183: POP
// bc_type := b_control_tower ; 25 :
32184: LD_ADDR_OWVAR 42
32188: PUSH
32189: LD_INT 36
32191: ST_TO_ADDR
32192: GO 32385
32194: LD_INT 25
32196: DOUBLE
32197: EQUAL
32198: IFTRUE 32202
32200: GO 32213
32202: POP
// bc_type := b_breastwork ; 26 :
32203: LD_ADDR_OWVAR 42
32207: PUSH
32208: LD_INT 31
32210: ST_TO_ADDR
32211: GO 32385
32213: LD_INT 26
32215: DOUBLE
32216: EQUAL
32217: IFTRUE 32221
32219: GO 32232
32221: POP
// bc_type := b_bunker ; 27 :
32222: LD_ADDR_OWVAR 42
32226: PUSH
32227: LD_INT 32
32229: ST_TO_ADDR
32230: GO 32385
32232: LD_INT 27
32234: DOUBLE
32235: EQUAL
32236: IFTRUE 32240
32238: GO 32251
32240: POP
// bc_type := b_turret ; 28 :
32241: LD_ADDR_OWVAR 42
32245: PUSH
32246: LD_INT 33
32248: ST_TO_ADDR
32249: GO 32385
32251: LD_INT 28
32253: DOUBLE
32254: EQUAL
32255: IFTRUE 32259
32257: GO 32270
32259: POP
// bc_type := b_armoury ; 29 :
32260: LD_ADDR_OWVAR 42
32264: PUSH
32265: LD_INT 4
32267: ST_TO_ADDR
32268: GO 32385
32270: LD_INT 29
32272: DOUBLE
32273: EQUAL
32274: IFTRUE 32278
32276: GO 32289
32278: POP
// bc_type := b_barracks ; 30 :
32279: LD_ADDR_OWVAR 42
32283: PUSH
32284: LD_INT 5
32286: ST_TO_ADDR
32287: GO 32385
32289: LD_INT 30
32291: DOUBLE
32292: EQUAL
32293: IFTRUE 32297
32295: GO 32308
32297: POP
// bc_type := b_solar_power ; 31 :
32298: LD_ADDR_OWVAR 42
32302: PUSH
32303: LD_INT 27
32305: ST_TO_ADDR
32306: GO 32385
32308: LD_INT 31
32310: DOUBLE
32311: EQUAL
32312: IFTRUE 32316
32314: GO 32327
32316: POP
// bc_type := b_oil_power ; 32 :
32317: LD_ADDR_OWVAR 42
32321: PUSH
32322: LD_INT 26
32324: ST_TO_ADDR
32325: GO 32385
32327: LD_INT 32
32329: DOUBLE
32330: EQUAL
32331: IFTRUE 32335
32333: GO 32346
32335: POP
// bc_type := b_siberite_power ; 33 :
32336: LD_ADDR_OWVAR 42
32340: PUSH
32341: LD_INT 28
32343: ST_TO_ADDR
32344: GO 32385
32346: LD_INT 33
32348: DOUBLE
32349: EQUAL
32350: IFTRUE 32354
32352: GO 32365
32354: POP
// bc_type := b_oil_mine ; 34 :
32355: LD_ADDR_OWVAR 42
32359: PUSH
32360: LD_INT 29
32362: ST_TO_ADDR
32363: GO 32385
32365: LD_INT 34
32367: DOUBLE
32368: EQUAL
32369: IFTRUE 32373
32371: GO 32384
32373: POP
// bc_type := b_siberite_mine ; end ;
32374: LD_ADDR_OWVAR 42
32378: PUSH
32379: LD_INT 30
32381: ST_TO_ADDR
32382: GO 32385
32384: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32385: LD_ADDR_VAR 0 8
32389: PUSH
32390: LD_VAR 0 5
32394: PPUSH
32395: LD_VAR 0 6
32399: PPUSH
32400: LD_VAR 0 3
32404: PPUSH
32405: CALL_OW 47
32409: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32410: LD_OWVAR 42
32414: PUSH
32415: LD_INT 32
32417: PUSH
32418: LD_INT 33
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: IN
32425: IFFALSE 32441
// PlaceWeaponTurret ( b , weapon ) ;
32427: LD_VAR 0 8
32431: PPUSH
32432: LD_VAR 0 4
32436: PPUSH
32437: CALL_OW 431
// end ;
32441: LD_VAR 0 7
32445: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32446: LD_INT 0
32448: PPUSH
32449: PPUSH
32450: PPUSH
32451: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32452: LD_ADDR_VAR 0 4
32456: PUSH
32457: LD_INT 22
32459: PUSH
32460: LD_OWVAR 2
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 2
32471: PUSH
32472: LD_INT 30
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 30
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: LIST
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PPUSH
32501: CALL_OW 69
32505: ST_TO_ADDR
// if not tmp then
32506: LD_VAR 0 4
32510: NOT
32511: IFFALSE 32515
// exit ;
32513: GO 32574
// for i in tmp do
32515: LD_ADDR_VAR 0 2
32519: PUSH
32520: LD_VAR 0 4
32524: PUSH
32525: FOR_IN
32526: IFFALSE 32572
// for j = 1 to 3 do
32528: LD_ADDR_VAR 0 3
32532: PUSH
32533: DOUBLE
32534: LD_INT 1
32536: DEC
32537: ST_TO_ADDR
32538: LD_INT 3
32540: PUSH
32541: FOR_TO
32542: IFFALSE 32568
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32544: LD_VAR 0 2
32548: PPUSH
32549: CALL_OW 274
32553: PPUSH
32554: LD_VAR 0 3
32558: PPUSH
32559: LD_INT 99999
32561: PPUSH
32562: CALL_OW 277
32566: GO 32541
32568: POP
32569: POP
32570: GO 32525
32572: POP
32573: POP
// end ;
32574: LD_VAR 0 1
32578: RET
// export function hHackSetLevel10 ; var i , j ; begin
32579: LD_INT 0
32581: PPUSH
32582: PPUSH
32583: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32584: LD_ADDR_VAR 0 2
32588: PUSH
32589: LD_INT 21
32591: PUSH
32592: LD_INT 1
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PPUSH
32599: CALL_OW 69
32603: PUSH
32604: FOR_IN
32605: IFFALSE 32657
// if IsSelected ( i ) then
32607: LD_VAR 0 2
32611: PPUSH
32612: CALL_OW 306
32616: IFFALSE 32655
// begin for j := 1 to 4 do
32618: LD_ADDR_VAR 0 3
32622: PUSH
32623: DOUBLE
32624: LD_INT 1
32626: DEC
32627: ST_TO_ADDR
32628: LD_INT 4
32630: PUSH
32631: FOR_TO
32632: IFFALSE 32653
// SetSkill ( i , j , 10 ) ;
32634: LD_VAR 0 2
32638: PPUSH
32639: LD_VAR 0 3
32643: PPUSH
32644: LD_INT 10
32646: PPUSH
32647: CALL_OW 237
32651: GO 32631
32653: POP
32654: POP
// end ;
32655: GO 32604
32657: POP
32658: POP
// end ;
32659: LD_VAR 0 1
32663: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32664: LD_INT 0
32666: PPUSH
32667: PPUSH
32668: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32669: LD_ADDR_VAR 0 2
32673: PUSH
32674: LD_INT 22
32676: PUSH
32677: LD_OWVAR 2
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 21
32688: PUSH
32689: LD_INT 1
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PPUSH
32700: CALL_OW 69
32704: PUSH
32705: FOR_IN
32706: IFFALSE 32747
// begin for j := 1 to 4 do
32708: LD_ADDR_VAR 0 3
32712: PUSH
32713: DOUBLE
32714: LD_INT 1
32716: DEC
32717: ST_TO_ADDR
32718: LD_INT 4
32720: PUSH
32721: FOR_TO
32722: IFFALSE 32743
// SetSkill ( i , j , 10 ) ;
32724: LD_VAR 0 2
32728: PPUSH
32729: LD_VAR 0 3
32733: PPUSH
32734: LD_INT 10
32736: PPUSH
32737: CALL_OW 237
32741: GO 32721
32743: POP
32744: POP
// end ;
32745: GO 32705
32747: POP
32748: POP
// end ;
32749: LD_VAR 0 1
32753: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32754: LD_INT 0
32756: PPUSH
// uc_side := your_side ;
32757: LD_ADDR_OWVAR 20
32761: PUSH
32762: LD_OWVAR 2
32766: ST_TO_ADDR
// uc_nation := nation ;
32767: LD_ADDR_OWVAR 21
32771: PUSH
32772: LD_VAR 0 1
32776: ST_TO_ADDR
// InitHc ;
32777: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32781: LD_INT 0
32783: PPUSH
32784: LD_VAR 0 2
32788: PPUSH
32789: LD_VAR 0 3
32793: PPUSH
32794: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32798: LD_VAR 0 4
32802: PPUSH
32803: LD_VAR 0 5
32807: PPUSH
32808: CALL_OW 428
32812: PUSH
32813: LD_INT 0
32815: EQUAL
32816: IFFALSE 32840
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32818: CALL_OW 44
32822: PPUSH
32823: LD_VAR 0 4
32827: PPUSH
32828: LD_VAR 0 5
32832: PPUSH
32833: LD_INT 1
32835: PPUSH
32836: CALL_OW 48
// end ;
32840: LD_VAR 0 6
32844: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32845: LD_INT 0
32847: PPUSH
32848: PPUSH
// uc_side := your_side ;
32849: LD_ADDR_OWVAR 20
32853: PUSH
32854: LD_OWVAR 2
32858: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32859: LD_VAR 0 1
32863: PUSH
32864: LD_INT 1
32866: PUSH
32867: LD_INT 2
32869: PUSH
32870: LD_INT 3
32872: PUSH
32873: LD_INT 4
32875: PUSH
32876: LD_INT 5
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: IN
32886: IFFALSE 32898
// uc_nation := nation_american else
32888: LD_ADDR_OWVAR 21
32892: PUSH
32893: LD_INT 1
32895: ST_TO_ADDR
32896: GO 32941
// if chassis in [ 11 , 12 , 13 , 14 ] then
32898: LD_VAR 0 1
32902: PUSH
32903: LD_INT 11
32905: PUSH
32906: LD_INT 12
32908: PUSH
32909: LD_INT 13
32911: PUSH
32912: LD_INT 14
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: IN
32921: IFFALSE 32933
// uc_nation := nation_arabian else
32923: LD_ADDR_OWVAR 21
32927: PUSH
32928: LD_INT 2
32930: ST_TO_ADDR
32931: GO 32941
// uc_nation := nation_russian ;
32933: LD_ADDR_OWVAR 21
32937: PUSH
32938: LD_INT 3
32940: ST_TO_ADDR
// vc_chassis := chassis ;
32941: LD_ADDR_OWVAR 37
32945: PUSH
32946: LD_VAR 0 1
32950: ST_TO_ADDR
// vc_engine := engine ;
32951: LD_ADDR_OWVAR 39
32955: PUSH
32956: LD_VAR 0 2
32960: ST_TO_ADDR
// vc_control := control ;
32961: LD_ADDR_OWVAR 38
32965: PUSH
32966: LD_VAR 0 3
32970: ST_TO_ADDR
// vc_weapon := weapon ;
32971: LD_ADDR_OWVAR 40
32975: PUSH
32976: LD_VAR 0 4
32980: ST_TO_ADDR
// un := CreateVehicle ;
32981: LD_ADDR_VAR 0 8
32985: PUSH
32986: CALL_OW 45
32990: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32991: LD_VAR 0 8
32995: PPUSH
32996: LD_INT 0
32998: PPUSH
32999: LD_INT 5
33001: PPUSH
33002: CALL_OW 12
33006: PPUSH
33007: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33011: LD_VAR 0 8
33015: PPUSH
33016: LD_VAR 0 5
33020: PPUSH
33021: LD_VAR 0 6
33025: PPUSH
33026: LD_INT 1
33028: PPUSH
33029: CALL_OW 48
// end ;
33033: LD_VAR 0 7
33037: RET
// export hInvincible ; every 1 do
33038: GO 33040
33040: DISABLE
// hInvincible := [ ] ;
33041: LD_ADDR_EXP 119
33045: PUSH
33046: EMPTY
33047: ST_TO_ADDR
33048: END
// every 10 do var i ;
33049: GO 33051
33051: DISABLE
33052: LD_INT 0
33054: PPUSH
// begin enable ;
33055: ENABLE
// if not hInvincible then
33056: LD_EXP 119
33060: NOT
33061: IFFALSE 33065
// exit ;
33063: GO 33109
// for i in hInvincible do
33065: LD_ADDR_VAR 0 1
33069: PUSH
33070: LD_EXP 119
33074: PUSH
33075: FOR_IN
33076: IFFALSE 33107
// if GetLives ( i ) < 1000 then
33078: LD_VAR 0 1
33082: PPUSH
33083: CALL_OW 256
33087: PUSH
33088: LD_INT 1000
33090: LESS
33091: IFFALSE 33105
// SetLives ( i , 1000 ) ;
33093: LD_VAR 0 1
33097: PPUSH
33098: LD_INT 1000
33100: PPUSH
33101: CALL_OW 234
33105: GO 33075
33107: POP
33108: POP
// end ;
33109: PPOPN 1
33111: END
// export function hHackInvincible ; var i ; begin
33112: LD_INT 0
33114: PPUSH
33115: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33116: LD_ADDR_VAR 0 2
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: LD_INT 21
33126: PUSH
33127: LD_INT 1
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 21
33136: PUSH
33137: LD_INT 2
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: LIST
33148: PPUSH
33149: CALL_OW 69
33153: PUSH
33154: FOR_IN
33155: IFFALSE 33216
// if IsSelected ( i ) then
33157: LD_VAR 0 2
33161: PPUSH
33162: CALL_OW 306
33166: IFFALSE 33214
// begin if i in hInvincible then
33168: LD_VAR 0 2
33172: PUSH
33173: LD_EXP 119
33177: IN
33178: IFFALSE 33198
// hInvincible := hInvincible diff i else
33180: LD_ADDR_EXP 119
33184: PUSH
33185: LD_EXP 119
33189: PUSH
33190: LD_VAR 0 2
33194: DIFF
33195: ST_TO_ADDR
33196: GO 33214
// hInvincible := hInvincible union i ;
33198: LD_ADDR_EXP 119
33202: PUSH
33203: LD_EXP 119
33207: PUSH
33208: LD_VAR 0 2
33212: UNION
33213: ST_TO_ADDR
// end ;
33214: GO 33154
33216: POP
33217: POP
// end ;
33218: LD_VAR 0 1
33222: RET
// export function hHackInvisible ; var i , j ; begin
33223: LD_INT 0
33225: PPUSH
33226: PPUSH
33227: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33228: LD_ADDR_VAR 0 2
33232: PUSH
33233: LD_INT 21
33235: PUSH
33236: LD_INT 1
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PPUSH
33243: CALL_OW 69
33247: PUSH
33248: FOR_IN
33249: IFFALSE 33273
// if IsSelected ( i ) then
33251: LD_VAR 0 2
33255: PPUSH
33256: CALL_OW 306
33260: IFFALSE 33271
// ComForceInvisible ( i ) ;
33262: LD_VAR 0 2
33266: PPUSH
33267: CALL_OW 496
33271: GO 33248
33273: POP
33274: POP
// end ;
33275: LD_VAR 0 1
33279: RET
// export function hHackChangeYourSide ; begin
33280: LD_INT 0
33282: PPUSH
// if your_side = 8 then
33283: LD_OWVAR 2
33287: PUSH
33288: LD_INT 8
33290: EQUAL
33291: IFFALSE 33303
// your_side := 0 else
33293: LD_ADDR_OWVAR 2
33297: PUSH
33298: LD_INT 0
33300: ST_TO_ADDR
33301: GO 33317
// your_side := your_side + 1 ;
33303: LD_ADDR_OWVAR 2
33307: PUSH
33308: LD_OWVAR 2
33312: PUSH
33313: LD_INT 1
33315: PLUS
33316: ST_TO_ADDR
// end ;
33317: LD_VAR 0 1
33321: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33322: LD_INT 0
33324: PPUSH
33325: PPUSH
33326: PPUSH
// for i in all_units do
33327: LD_ADDR_VAR 0 2
33331: PUSH
33332: LD_OWVAR 3
33336: PUSH
33337: FOR_IN
33338: IFFALSE 33416
// if IsSelected ( i ) then
33340: LD_VAR 0 2
33344: PPUSH
33345: CALL_OW 306
33349: IFFALSE 33414
// begin j := GetSide ( i ) ;
33351: LD_ADDR_VAR 0 3
33355: PUSH
33356: LD_VAR 0 2
33360: PPUSH
33361: CALL_OW 255
33365: ST_TO_ADDR
// if j = 8 then
33366: LD_VAR 0 3
33370: PUSH
33371: LD_INT 8
33373: EQUAL
33374: IFFALSE 33386
// j := 0 else
33376: LD_ADDR_VAR 0 3
33380: PUSH
33381: LD_INT 0
33383: ST_TO_ADDR
33384: GO 33400
// j := j + 1 ;
33386: LD_ADDR_VAR 0 3
33390: PUSH
33391: LD_VAR 0 3
33395: PUSH
33396: LD_INT 1
33398: PLUS
33399: ST_TO_ADDR
// SetSide ( i , j ) ;
33400: LD_VAR 0 2
33404: PPUSH
33405: LD_VAR 0 3
33409: PPUSH
33410: CALL_OW 235
// end ;
33414: GO 33337
33416: POP
33417: POP
// end ;
33418: LD_VAR 0 1
33422: RET
// export function hHackFog ; begin
33423: LD_INT 0
33425: PPUSH
// FogOff ( true ) ;
33426: LD_INT 1
33428: PPUSH
33429: CALL_OW 344
// end ;
33433: LD_VAR 0 1
33437: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33438: LD_INT 0
33440: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33441: LD_VAR 0 1
33445: PPUSH
33446: LD_VAR 0 2
33450: PPUSH
33451: LD_VAR 0 3
33455: PPUSH
33456: LD_INT 1
33458: PPUSH
33459: LD_INT 1
33461: PPUSH
33462: CALL_OW 483
// CenterOnXY ( x , y ) ;
33466: LD_VAR 0 2
33470: PPUSH
33471: LD_VAR 0 3
33475: PPUSH
33476: CALL_OW 84
// end ;
33480: LD_VAR 0 4
33484: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33485: LD_INT 0
33487: PPUSH
33488: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33489: LD_VAR 0 1
33493: NOT
33494: PUSH
33495: LD_VAR 0 2
33499: PPUSH
33500: LD_VAR 0 3
33504: PPUSH
33505: CALL_OW 488
33509: NOT
33510: OR
33511: PUSH
33512: LD_VAR 0 1
33516: PPUSH
33517: CALL_OW 266
33521: PUSH
33522: LD_INT 3
33524: NONEQUAL
33525: PUSH
33526: LD_VAR 0 1
33530: PPUSH
33531: CALL_OW 247
33535: PUSH
33536: LD_INT 1
33538: EQUAL
33539: NOT
33540: AND
33541: OR
33542: IFFALSE 33546
// exit ;
33544: GO 33695
// if GetType ( factory ) = unit_human then
33546: LD_VAR 0 1
33550: PPUSH
33551: CALL_OW 247
33555: PUSH
33556: LD_INT 1
33558: EQUAL
33559: IFFALSE 33576
// factory := IsInUnit ( factory ) ;
33561: LD_ADDR_VAR 0 1
33565: PUSH
33566: LD_VAR 0 1
33570: PPUSH
33571: CALL_OW 310
33575: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33576: LD_VAR 0 1
33580: PPUSH
33581: CALL_OW 266
33585: PUSH
33586: LD_INT 3
33588: NONEQUAL
33589: IFFALSE 33593
// exit ;
33591: GO 33695
// if HexInfo ( x , y ) = factory then
33593: LD_VAR 0 2
33597: PPUSH
33598: LD_VAR 0 3
33602: PPUSH
33603: CALL_OW 428
33607: PUSH
33608: LD_VAR 0 1
33612: EQUAL
33613: IFFALSE 33640
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33615: LD_ADDR_EXP 120
33619: PUSH
33620: LD_EXP 120
33624: PPUSH
33625: LD_VAR 0 1
33629: PPUSH
33630: LD_INT 0
33632: PPUSH
33633: CALL_OW 1
33637: ST_TO_ADDR
33638: GO 33691
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33640: LD_ADDR_EXP 120
33644: PUSH
33645: LD_EXP 120
33649: PPUSH
33650: LD_VAR 0 1
33654: PPUSH
33655: LD_VAR 0 1
33659: PPUSH
33660: CALL_OW 255
33664: PUSH
33665: LD_VAR 0 1
33669: PUSH
33670: LD_VAR 0 2
33674: PUSH
33675: LD_VAR 0 3
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: PPUSH
33686: CALL_OW 1
33690: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33691: CALL 33700 0 0
// end ;
33695: LD_VAR 0 4
33699: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33700: LD_INT 0
33702: PPUSH
33703: PPUSH
33704: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33705: LD_STRING resetFactoryWaypoint();
33707: PPUSH
33708: CALL_OW 559
// if factoryWaypoints then
33712: LD_EXP 120
33716: IFFALSE 33842
// begin list := PrepareArray ( factoryWaypoints ) ;
33718: LD_ADDR_VAR 0 3
33722: PUSH
33723: LD_EXP 120
33727: PPUSH
33728: CALL 80292 0 1
33732: ST_TO_ADDR
// for i := 1 to list do
33733: LD_ADDR_VAR 0 2
33737: PUSH
33738: DOUBLE
33739: LD_INT 1
33741: DEC
33742: ST_TO_ADDR
33743: LD_VAR 0 3
33747: PUSH
33748: FOR_TO
33749: IFFALSE 33840
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33751: LD_STRING setFactoryWaypointXY(
33753: PUSH
33754: LD_VAR 0 3
33758: PUSH
33759: LD_VAR 0 2
33763: ARRAY
33764: PUSH
33765: LD_INT 1
33767: ARRAY
33768: STR
33769: PUSH
33770: LD_STRING ,
33772: STR
33773: PUSH
33774: LD_VAR 0 3
33778: PUSH
33779: LD_VAR 0 2
33783: ARRAY
33784: PUSH
33785: LD_INT 2
33787: ARRAY
33788: STR
33789: PUSH
33790: LD_STRING ,
33792: STR
33793: PUSH
33794: LD_VAR 0 3
33798: PUSH
33799: LD_VAR 0 2
33803: ARRAY
33804: PUSH
33805: LD_INT 3
33807: ARRAY
33808: STR
33809: PUSH
33810: LD_STRING ,
33812: STR
33813: PUSH
33814: LD_VAR 0 3
33818: PUSH
33819: LD_VAR 0 2
33823: ARRAY
33824: PUSH
33825: LD_INT 4
33827: ARRAY
33828: STR
33829: PUSH
33830: LD_STRING )
33832: STR
33833: PPUSH
33834: CALL_OW 559
33838: GO 33748
33840: POP
33841: POP
// end ; end ;
33842: LD_VAR 0 1
33846: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33847: LD_INT 0
33849: PPUSH
// if HexInfo ( x , y ) = warehouse then
33850: LD_VAR 0 2
33854: PPUSH
33855: LD_VAR 0 3
33859: PPUSH
33860: CALL_OW 428
33864: PUSH
33865: LD_VAR 0 1
33869: EQUAL
33870: IFFALSE 33897
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33872: LD_ADDR_EXP 121
33876: PUSH
33877: LD_EXP 121
33881: PPUSH
33882: LD_VAR 0 1
33886: PPUSH
33887: LD_INT 0
33889: PPUSH
33890: CALL_OW 1
33894: ST_TO_ADDR
33895: GO 33948
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33897: LD_ADDR_EXP 121
33901: PUSH
33902: LD_EXP 121
33906: PPUSH
33907: LD_VAR 0 1
33911: PPUSH
33912: LD_VAR 0 1
33916: PPUSH
33917: CALL_OW 255
33921: PUSH
33922: LD_VAR 0 1
33926: PUSH
33927: LD_VAR 0 2
33931: PUSH
33932: LD_VAR 0 3
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: PPUSH
33943: CALL_OW 1
33947: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33948: CALL 33957 0 0
// end ;
33952: LD_VAR 0 4
33956: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33957: LD_INT 0
33959: PPUSH
33960: PPUSH
33961: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33962: LD_STRING resetWarehouseGatheringPoints();
33964: PPUSH
33965: CALL_OW 559
// if warehouseGatheringPoints then
33969: LD_EXP 121
33973: IFFALSE 34099
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33975: LD_ADDR_VAR 0 3
33979: PUSH
33980: LD_EXP 121
33984: PPUSH
33985: CALL 80292 0 1
33989: ST_TO_ADDR
// for i := 1 to list do
33990: LD_ADDR_VAR 0 2
33994: PUSH
33995: DOUBLE
33996: LD_INT 1
33998: DEC
33999: ST_TO_ADDR
34000: LD_VAR 0 3
34004: PUSH
34005: FOR_TO
34006: IFFALSE 34097
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34008: LD_STRING setWarehouseGatheringPointXY(
34010: PUSH
34011: LD_VAR 0 3
34015: PUSH
34016: LD_VAR 0 2
34020: ARRAY
34021: PUSH
34022: LD_INT 1
34024: ARRAY
34025: STR
34026: PUSH
34027: LD_STRING ,
34029: STR
34030: PUSH
34031: LD_VAR 0 3
34035: PUSH
34036: LD_VAR 0 2
34040: ARRAY
34041: PUSH
34042: LD_INT 2
34044: ARRAY
34045: STR
34046: PUSH
34047: LD_STRING ,
34049: STR
34050: PUSH
34051: LD_VAR 0 3
34055: PUSH
34056: LD_VAR 0 2
34060: ARRAY
34061: PUSH
34062: LD_INT 3
34064: ARRAY
34065: STR
34066: PUSH
34067: LD_STRING ,
34069: STR
34070: PUSH
34071: LD_VAR 0 3
34075: PUSH
34076: LD_VAR 0 2
34080: ARRAY
34081: PUSH
34082: LD_INT 4
34084: ARRAY
34085: STR
34086: PUSH
34087: LD_STRING )
34089: STR
34090: PPUSH
34091: CALL_OW 559
34095: GO 34005
34097: POP
34098: POP
// end ; end ;
34099: LD_VAR 0 1
34103: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34104: LD_EXP 121
34108: IFFALSE 34793
34110: GO 34112
34112: DISABLE
34113: LD_INT 0
34115: PPUSH
34116: PPUSH
34117: PPUSH
34118: PPUSH
34119: PPUSH
34120: PPUSH
34121: PPUSH
34122: PPUSH
34123: PPUSH
// begin enable ;
34124: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34125: LD_ADDR_VAR 0 3
34129: PUSH
34130: LD_EXP 121
34134: PPUSH
34135: CALL 80292 0 1
34139: ST_TO_ADDR
// if not list then
34140: LD_VAR 0 3
34144: NOT
34145: IFFALSE 34149
// exit ;
34147: GO 34793
// for i := 1 to list do
34149: LD_ADDR_VAR 0 1
34153: PUSH
34154: DOUBLE
34155: LD_INT 1
34157: DEC
34158: ST_TO_ADDR
34159: LD_VAR 0 3
34163: PUSH
34164: FOR_TO
34165: IFFALSE 34791
// begin depot := list [ i ] [ 2 ] ;
34167: LD_ADDR_VAR 0 8
34171: PUSH
34172: LD_VAR 0 3
34176: PUSH
34177: LD_VAR 0 1
34181: ARRAY
34182: PUSH
34183: LD_INT 2
34185: ARRAY
34186: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34187: LD_ADDR_VAR 0 5
34191: PUSH
34192: LD_VAR 0 3
34196: PUSH
34197: LD_VAR 0 1
34201: ARRAY
34202: PUSH
34203: LD_INT 1
34205: ARRAY
34206: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34207: LD_VAR 0 8
34211: PPUSH
34212: CALL_OW 301
34216: PUSH
34217: LD_VAR 0 5
34221: PUSH
34222: LD_VAR 0 8
34226: PPUSH
34227: CALL_OW 255
34231: NONEQUAL
34232: OR
34233: IFFALSE 34262
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34235: LD_ADDR_EXP 121
34239: PUSH
34240: LD_EXP 121
34244: PPUSH
34245: LD_VAR 0 8
34249: PPUSH
34250: LD_INT 0
34252: PPUSH
34253: CALL_OW 1
34257: ST_TO_ADDR
// exit ;
34258: POP
34259: POP
34260: GO 34793
// end ; x := list [ i ] [ 3 ] ;
34262: LD_ADDR_VAR 0 6
34266: PUSH
34267: LD_VAR 0 3
34271: PUSH
34272: LD_VAR 0 1
34276: ARRAY
34277: PUSH
34278: LD_INT 3
34280: ARRAY
34281: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34282: LD_ADDR_VAR 0 7
34286: PUSH
34287: LD_VAR 0 3
34291: PUSH
34292: LD_VAR 0 1
34296: ARRAY
34297: PUSH
34298: LD_INT 4
34300: ARRAY
34301: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34302: LD_ADDR_VAR 0 9
34306: PUSH
34307: LD_VAR 0 6
34311: PPUSH
34312: LD_VAR 0 7
34316: PPUSH
34317: LD_INT 16
34319: PPUSH
34320: CALL 78880 0 3
34324: ST_TO_ADDR
// if not cratesNearbyPoint then
34325: LD_VAR 0 9
34329: NOT
34330: IFFALSE 34336
// exit ;
34332: POP
34333: POP
34334: GO 34793
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34336: LD_ADDR_VAR 0 4
34340: PUSH
34341: LD_INT 22
34343: PUSH
34344: LD_VAR 0 5
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 3
34355: PUSH
34356: LD_INT 60
34358: PUSH
34359: EMPTY
34360: LIST
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 91
34368: PUSH
34369: LD_VAR 0 8
34373: PUSH
34374: LD_INT 6
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 2
34384: PUSH
34385: LD_INT 25
34387: PUSH
34388: LD_INT 2
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 25
34397: PUSH
34398: LD_INT 16
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: LIST
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: PPUSH
34416: CALL_OW 69
34420: PUSH
34421: LD_VAR 0 8
34425: PPUSH
34426: CALL_OW 313
34430: PPUSH
34431: LD_INT 3
34433: PUSH
34434: LD_INT 60
34436: PUSH
34437: EMPTY
34438: LIST
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 2
34446: PUSH
34447: LD_INT 25
34449: PUSH
34450: LD_INT 2
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 25
34459: PUSH
34460: LD_INT 16
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: LIST
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PPUSH
34476: CALL_OW 72
34480: UNION
34481: ST_TO_ADDR
// if tmp then
34482: LD_VAR 0 4
34486: IFFALSE 34566
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34488: LD_ADDR_VAR 0 4
34492: PUSH
34493: LD_VAR 0 4
34497: PPUSH
34498: LD_INT 3
34500: PPUSH
34501: CALL 76849 0 2
34505: ST_TO_ADDR
// for j in tmp do
34506: LD_ADDR_VAR 0 2
34510: PUSH
34511: LD_VAR 0 4
34515: PUSH
34516: FOR_IN
34517: IFFALSE 34560
// begin if IsInUnit ( j ) then
34519: LD_VAR 0 2
34523: PPUSH
34524: CALL_OW 310
34528: IFFALSE 34539
// ComExit ( j ) ;
34530: LD_VAR 0 2
34534: PPUSH
34535: CALL 76932 0 1
// AddComCollect ( j , x , y ) ;
34539: LD_VAR 0 2
34543: PPUSH
34544: LD_VAR 0 6
34548: PPUSH
34549: LD_VAR 0 7
34553: PPUSH
34554: CALL_OW 177
// end ;
34558: GO 34516
34560: POP
34561: POP
// exit ;
34562: POP
34563: POP
34564: GO 34793
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34566: LD_ADDR_VAR 0 4
34570: PUSH
34571: LD_INT 22
34573: PUSH
34574: LD_VAR 0 5
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 91
34585: PUSH
34586: LD_VAR 0 8
34590: PUSH
34591: LD_INT 8
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 2
34601: PUSH
34602: LD_INT 34
34604: PUSH
34605: LD_INT 12
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 34
34614: PUSH
34615: LD_INT 51
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 34
34624: PUSH
34625: LD_INT 32
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 34
34634: PUSH
34635: LD_INT 89
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: LIST
34653: PPUSH
34654: CALL_OW 69
34658: ST_TO_ADDR
// if tmp then
34659: LD_VAR 0 4
34663: IFFALSE 34789
// begin for j in tmp do
34665: LD_ADDR_VAR 0 2
34669: PUSH
34670: LD_VAR 0 4
34674: PUSH
34675: FOR_IN
34676: IFFALSE 34787
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34678: LD_VAR 0 2
34682: PPUSH
34683: CALL_OW 262
34687: PUSH
34688: LD_INT 3
34690: EQUAL
34691: PUSH
34692: LD_VAR 0 2
34696: PPUSH
34697: CALL_OW 261
34701: PUSH
34702: LD_INT 20
34704: GREATER
34705: OR
34706: PUSH
34707: LD_VAR 0 2
34711: PPUSH
34712: CALL_OW 314
34716: NOT
34717: AND
34718: PUSH
34719: LD_VAR 0 2
34723: PPUSH
34724: CALL_OW 263
34728: PUSH
34729: LD_INT 1
34731: NONEQUAL
34732: PUSH
34733: LD_VAR 0 2
34737: PPUSH
34738: CALL_OW 311
34742: OR
34743: AND
34744: IFFALSE 34785
// begin ComCollect ( j , x , y ) ;
34746: LD_VAR 0 2
34750: PPUSH
34751: LD_VAR 0 6
34755: PPUSH
34756: LD_VAR 0 7
34760: PPUSH
34761: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34765: LD_VAR 0 2
34769: PPUSH
34770: LD_VAR 0 8
34774: PPUSH
34775: CALL_OW 172
// exit ;
34779: POP
34780: POP
34781: POP
34782: POP
34783: GO 34793
// end ;
34785: GO 34675
34787: POP
34788: POP
// end ; end ;
34789: GO 34164
34791: POP
34792: POP
// end ; end_of_file
34793: PPOPN 9
34795: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34796: LD_INT 0
34798: PPUSH
34799: PPUSH
34800: PPUSH
34801: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34802: LD_VAR 0 1
34806: PPUSH
34807: CALL_OW 264
34811: PUSH
34812: LD_INT 91
34814: EQUAL
34815: IFFALSE 34887
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34817: LD_INT 68
34819: PPUSH
34820: LD_VAR 0 1
34824: PPUSH
34825: CALL_OW 255
34829: PPUSH
34830: CALL_OW 321
34834: PUSH
34835: LD_INT 2
34837: EQUAL
34838: IFFALSE 34850
// eff := 70 else
34840: LD_ADDR_VAR 0 4
34844: PUSH
34845: LD_INT 70
34847: ST_TO_ADDR
34848: GO 34858
// eff := 30 ;
34850: LD_ADDR_VAR 0 4
34854: PUSH
34855: LD_INT 30
34857: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34858: LD_VAR 0 1
34862: PPUSH
34863: CALL_OW 250
34867: PPUSH
34868: LD_VAR 0 1
34872: PPUSH
34873: CALL_OW 251
34877: PPUSH
34878: LD_VAR 0 4
34882: PPUSH
34883: CALL_OW 495
// end ; end ;
34887: LD_VAR 0 2
34891: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34892: LD_INT 0
34894: PPUSH
// end ;
34895: LD_VAR 0 4
34899: RET
// export function SOS_Command ( cmd ) ; begin
34900: LD_INT 0
34902: PPUSH
// end ;
34903: LD_VAR 0 2
34907: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34908: LD_INT 0
34910: PPUSH
// end ;
34911: LD_VAR 0 6
34915: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34916: LD_INT 0
34918: PPUSH
34919: PPUSH
// if not vehicle or not factory then
34920: LD_VAR 0 1
34924: NOT
34925: PUSH
34926: LD_VAR 0 2
34930: NOT
34931: OR
34932: IFFALSE 34936
// exit ;
34934: GO 35167
// if factoryWaypoints >= factory then
34936: LD_EXP 120
34940: PUSH
34941: LD_VAR 0 2
34945: GREATEREQUAL
34946: IFFALSE 35167
// if factoryWaypoints [ factory ] then
34948: LD_EXP 120
34952: PUSH
34953: LD_VAR 0 2
34957: ARRAY
34958: IFFALSE 35167
// begin if GetControl ( vehicle ) = control_manual then
34960: LD_VAR 0 1
34964: PPUSH
34965: CALL_OW 263
34969: PUSH
34970: LD_INT 1
34972: EQUAL
34973: IFFALSE 35054
// begin driver := IsDrivenBy ( vehicle ) ;
34975: LD_ADDR_VAR 0 4
34979: PUSH
34980: LD_VAR 0 1
34984: PPUSH
34985: CALL_OW 311
34989: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34990: LD_VAR 0 4
34994: PPUSH
34995: LD_EXP 120
34999: PUSH
35000: LD_VAR 0 2
35004: ARRAY
35005: PUSH
35006: LD_INT 3
35008: ARRAY
35009: PPUSH
35010: LD_EXP 120
35014: PUSH
35015: LD_VAR 0 2
35019: ARRAY
35020: PUSH
35021: LD_INT 4
35023: ARRAY
35024: PPUSH
35025: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35029: LD_VAR 0 4
35033: PPUSH
35034: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35038: LD_VAR 0 4
35042: PPUSH
35043: LD_VAR 0 2
35047: PPUSH
35048: CALL_OW 180
// end else
35052: GO 35167
// if GetControl ( vehicle ) = control_remote then
35054: LD_VAR 0 1
35058: PPUSH
35059: CALL_OW 263
35063: PUSH
35064: LD_INT 2
35066: EQUAL
35067: IFFALSE 35128
// begin wait ( 0 0$2 ) ;
35069: LD_INT 70
35071: PPUSH
35072: CALL_OW 67
// if Connect ( vehicle ) then
35076: LD_VAR 0 1
35080: PPUSH
35081: CALL 47191 0 1
35085: IFFALSE 35126
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35087: LD_VAR 0 1
35091: PPUSH
35092: LD_EXP 120
35096: PUSH
35097: LD_VAR 0 2
35101: ARRAY
35102: PUSH
35103: LD_INT 3
35105: ARRAY
35106: PPUSH
35107: LD_EXP 120
35111: PUSH
35112: LD_VAR 0 2
35116: ARRAY
35117: PUSH
35118: LD_INT 4
35120: ARRAY
35121: PPUSH
35122: CALL_OW 171
// end else
35126: GO 35167
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35128: LD_VAR 0 1
35132: PPUSH
35133: LD_EXP 120
35137: PUSH
35138: LD_VAR 0 2
35142: ARRAY
35143: PUSH
35144: LD_INT 3
35146: ARRAY
35147: PPUSH
35148: LD_EXP 120
35152: PUSH
35153: LD_VAR 0 2
35157: ARRAY
35158: PUSH
35159: LD_INT 4
35161: ARRAY
35162: PPUSH
35163: CALL_OW 171
// end ; end ;
35167: LD_VAR 0 3
35171: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35172: LD_INT 0
35174: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35175: LD_VAR 0 1
35179: PUSH
35180: LD_INT 250
35182: EQUAL
35183: PUSH
35184: LD_VAR 0 2
35188: PPUSH
35189: CALL_OW 264
35193: PUSH
35194: LD_INT 81
35196: EQUAL
35197: AND
35198: IFFALSE 35219
// MinerPlaceMine ( unit , x , y ) ;
35200: LD_VAR 0 2
35204: PPUSH
35205: LD_VAR 0 4
35209: PPUSH
35210: LD_VAR 0 5
35214: PPUSH
35215: CALL 37604 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35219: LD_VAR 0 1
35223: PUSH
35224: LD_INT 251
35226: EQUAL
35227: PUSH
35228: LD_VAR 0 2
35232: PPUSH
35233: CALL_OW 264
35237: PUSH
35238: LD_INT 81
35240: EQUAL
35241: AND
35242: IFFALSE 35263
// MinerDetonateMine ( unit , x , y ) ;
35244: LD_VAR 0 2
35248: PPUSH
35249: LD_VAR 0 4
35253: PPUSH
35254: LD_VAR 0 5
35258: PPUSH
35259: CALL 37879 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35263: LD_VAR 0 1
35267: PUSH
35268: LD_INT 252
35270: EQUAL
35271: PUSH
35272: LD_VAR 0 2
35276: PPUSH
35277: CALL_OW 264
35281: PUSH
35282: LD_INT 81
35284: EQUAL
35285: AND
35286: IFFALSE 35307
// MinerCreateMinefield ( unit , x , y ) ;
35288: LD_VAR 0 2
35292: PPUSH
35293: LD_VAR 0 4
35297: PPUSH
35298: LD_VAR 0 5
35302: PPUSH
35303: CALL 38296 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35307: LD_VAR 0 1
35311: PUSH
35312: LD_INT 253
35314: EQUAL
35315: PUSH
35316: LD_VAR 0 2
35320: PPUSH
35321: CALL_OW 257
35325: PUSH
35326: LD_INT 5
35328: EQUAL
35329: AND
35330: IFFALSE 35351
// ComBinocular ( unit , x , y ) ;
35332: LD_VAR 0 2
35336: PPUSH
35337: LD_VAR 0 4
35341: PPUSH
35342: LD_VAR 0 5
35346: PPUSH
35347: CALL 38665 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35351: LD_VAR 0 1
35355: PUSH
35356: LD_INT 254
35358: EQUAL
35359: PUSH
35360: LD_VAR 0 2
35364: PPUSH
35365: CALL_OW 264
35369: PUSH
35370: LD_INT 99
35372: EQUAL
35373: AND
35374: PUSH
35375: LD_VAR 0 3
35379: PPUSH
35380: CALL_OW 263
35384: PUSH
35385: LD_INT 3
35387: EQUAL
35388: AND
35389: IFFALSE 35405
// HackDestroyVehicle ( unit , selectedUnit ) ;
35391: LD_VAR 0 2
35395: PPUSH
35396: LD_VAR 0 3
35400: PPUSH
35401: CALL 36968 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35405: LD_VAR 0 1
35409: PUSH
35410: LD_INT 255
35412: EQUAL
35413: PUSH
35414: LD_VAR 0 2
35418: PPUSH
35419: CALL_OW 264
35423: PUSH
35424: LD_INT 14
35426: PUSH
35427: LD_INT 53
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: IN
35434: AND
35435: PUSH
35436: LD_VAR 0 4
35440: PPUSH
35441: LD_VAR 0 5
35445: PPUSH
35446: CALL_OW 488
35450: AND
35451: IFFALSE 35475
// CutTreeXYR ( unit , x , y , 12 ) ;
35453: LD_VAR 0 2
35457: PPUSH
35458: LD_VAR 0 4
35462: PPUSH
35463: LD_VAR 0 5
35467: PPUSH
35468: LD_INT 12
35470: PPUSH
35471: CALL 35538 0 4
// if cmd = 256 then
35475: LD_VAR 0 1
35479: PUSH
35480: LD_INT 256
35482: EQUAL
35483: IFFALSE 35504
// SetFactoryWaypoint ( unit , x , y ) ;
35485: LD_VAR 0 2
35489: PPUSH
35490: LD_VAR 0 4
35494: PPUSH
35495: LD_VAR 0 5
35499: PPUSH
35500: CALL 33485 0 3
// if cmd = 257 then
35504: LD_VAR 0 1
35508: PUSH
35509: LD_INT 257
35511: EQUAL
35512: IFFALSE 35533
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35514: LD_VAR 0 2
35518: PPUSH
35519: LD_VAR 0 4
35523: PPUSH
35524: LD_VAR 0 5
35528: PPUSH
35529: CALL 33847 0 3
// end ;
35533: LD_VAR 0 6
35537: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35538: LD_INT 0
35540: PPUSH
35541: PPUSH
35542: PPUSH
35543: PPUSH
35544: PPUSH
35545: PPUSH
35546: PPUSH
35547: PPUSH
35548: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35549: LD_VAR 0 1
35553: NOT
35554: PUSH
35555: LD_VAR 0 2
35559: PPUSH
35560: LD_VAR 0 3
35564: PPUSH
35565: CALL_OW 488
35569: NOT
35570: OR
35571: PUSH
35572: LD_VAR 0 4
35576: NOT
35577: OR
35578: IFFALSE 35582
// exit ;
35580: GO 35922
// list := [ ] ;
35582: LD_ADDR_VAR 0 13
35586: PUSH
35587: EMPTY
35588: ST_TO_ADDR
// if x - r < 0 then
35589: LD_VAR 0 2
35593: PUSH
35594: LD_VAR 0 4
35598: MINUS
35599: PUSH
35600: LD_INT 0
35602: LESS
35603: IFFALSE 35615
// min_x := 0 else
35605: LD_ADDR_VAR 0 7
35609: PUSH
35610: LD_INT 0
35612: ST_TO_ADDR
35613: GO 35631
// min_x := x - r ;
35615: LD_ADDR_VAR 0 7
35619: PUSH
35620: LD_VAR 0 2
35624: PUSH
35625: LD_VAR 0 4
35629: MINUS
35630: ST_TO_ADDR
// if y - r < 0 then
35631: LD_VAR 0 3
35635: PUSH
35636: LD_VAR 0 4
35640: MINUS
35641: PUSH
35642: LD_INT 0
35644: LESS
35645: IFFALSE 35657
// min_y := 0 else
35647: LD_ADDR_VAR 0 8
35651: PUSH
35652: LD_INT 0
35654: ST_TO_ADDR
35655: GO 35673
// min_y := y - r ;
35657: LD_ADDR_VAR 0 8
35661: PUSH
35662: LD_VAR 0 3
35666: PUSH
35667: LD_VAR 0 4
35671: MINUS
35672: ST_TO_ADDR
// max_x := x + r ;
35673: LD_ADDR_VAR 0 9
35677: PUSH
35678: LD_VAR 0 2
35682: PUSH
35683: LD_VAR 0 4
35687: PLUS
35688: ST_TO_ADDR
// max_y := y + r ;
35689: LD_ADDR_VAR 0 10
35693: PUSH
35694: LD_VAR 0 3
35698: PUSH
35699: LD_VAR 0 4
35703: PLUS
35704: ST_TO_ADDR
// for _x = min_x to max_x do
35705: LD_ADDR_VAR 0 11
35709: PUSH
35710: DOUBLE
35711: LD_VAR 0 7
35715: DEC
35716: ST_TO_ADDR
35717: LD_VAR 0 9
35721: PUSH
35722: FOR_TO
35723: IFFALSE 35840
// for _y = min_y to max_y do
35725: LD_ADDR_VAR 0 12
35729: PUSH
35730: DOUBLE
35731: LD_VAR 0 8
35735: DEC
35736: ST_TO_ADDR
35737: LD_VAR 0 10
35741: PUSH
35742: FOR_TO
35743: IFFALSE 35836
// begin if not ValidHex ( _x , _y ) then
35745: LD_VAR 0 11
35749: PPUSH
35750: LD_VAR 0 12
35754: PPUSH
35755: CALL_OW 488
35759: NOT
35760: IFFALSE 35764
// continue ;
35762: GO 35742
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35764: LD_VAR 0 11
35768: PPUSH
35769: LD_VAR 0 12
35773: PPUSH
35774: CALL_OW 351
35778: PUSH
35779: LD_VAR 0 11
35783: PPUSH
35784: LD_VAR 0 12
35788: PPUSH
35789: CALL_OW 554
35793: AND
35794: IFFALSE 35834
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35796: LD_ADDR_VAR 0 13
35800: PUSH
35801: LD_VAR 0 13
35805: PPUSH
35806: LD_VAR 0 13
35810: PUSH
35811: LD_INT 1
35813: PLUS
35814: PPUSH
35815: LD_VAR 0 11
35819: PUSH
35820: LD_VAR 0 12
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PPUSH
35829: CALL_OW 2
35833: ST_TO_ADDR
// end ;
35834: GO 35742
35836: POP
35837: POP
35838: GO 35722
35840: POP
35841: POP
// if not list then
35842: LD_VAR 0 13
35846: NOT
35847: IFFALSE 35851
// exit ;
35849: GO 35922
// for i in list do
35851: LD_ADDR_VAR 0 6
35855: PUSH
35856: LD_VAR 0 13
35860: PUSH
35861: FOR_IN
35862: IFFALSE 35920
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35864: LD_VAR 0 1
35868: PPUSH
35869: LD_STRING M
35871: PUSH
35872: LD_VAR 0 6
35876: PUSH
35877: LD_INT 1
35879: ARRAY
35880: PUSH
35881: LD_VAR 0 6
35885: PUSH
35886: LD_INT 2
35888: ARRAY
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: LD_INT 0
35895: PUSH
35896: LD_INT 0
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: PUSH
35911: EMPTY
35912: LIST
35913: PPUSH
35914: CALL_OW 447
35918: GO 35861
35920: POP
35921: POP
// end ;
35922: LD_VAR 0 5
35926: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35927: LD_EXP 123
35931: NOT
35932: IFFALSE 35982
35934: GO 35936
35936: DISABLE
// begin initHack := true ;
35937: LD_ADDR_EXP 123
35941: PUSH
35942: LD_INT 1
35944: ST_TO_ADDR
// hackTanks := [ ] ;
35945: LD_ADDR_EXP 124
35949: PUSH
35950: EMPTY
35951: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35952: LD_ADDR_EXP 125
35956: PUSH
35957: EMPTY
35958: ST_TO_ADDR
// hackLimit := 3 ;
35959: LD_ADDR_EXP 126
35963: PUSH
35964: LD_INT 3
35966: ST_TO_ADDR
// hackDist := 12 ;
35967: LD_ADDR_EXP 127
35971: PUSH
35972: LD_INT 12
35974: ST_TO_ADDR
// hackCounter := [ ] ;
35975: LD_ADDR_EXP 128
35979: PUSH
35980: EMPTY
35981: ST_TO_ADDR
// end ;
35982: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35983: LD_EXP 123
35987: PUSH
35988: LD_INT 34
35990: PUSH
35991: LD_INT 99
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PPUSH
35998: CALL_OW 69
36002: AND
36003: IFFALSE 36256
36005: GO 36007
36007: DISABLE
36008: LD_INT 0
36010: PPUSH
36011: PPUSH
// begin enable ;
36012: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36013: LD_ADDR_VAR 0 1
36017: PUSH
36018: LD_INT 34
36020: PUSH
36021: LD_INT 99
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PPUSH
36028: CALL_OW 69
36032: PUSH
36033: FOR_IN
36034: IFFALSE 36254
// begin if not i in hackTanks then
36036: LD_VAR 0 1
36040: PUSH
36041: LD_EXP 124
36045: IN
36046: NOT
36047: IFFALSE 36130
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36049: LD_ADDR_EXP 124
36053: PUSH
36054: LD_EXP 124
36058: PPUSH
36059: LD_EXP 124
36063: PUSH
36064: LD_INT 1
36066: PLUS
36067: PPUSH
36068: LD_VAR 0 1
36072: PPUSH
36073: CALL_OW 1
36077: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36078: LD_ADDR_EXP 125
36082: PUSH
36083: LD_EXP 125
36087: PPUSH
36088: LD_EXP 125
36092: PUSH
36093: LD_INT 1
36095: PLUS
36096: PPUSH
36097: EMPTY
36098: PPUSH
36099: CALL_OW 1
36103: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36104: LD_ADDR_EXP 128
36108: PUSH
36109: LD_EXP 128
36113: PPUSH
36114: LD_EXP 128
36118: PUSH
36119: LD_INT 1
36121: PLUS
36122: PPUSH
36123: EMPTY
36124: PPUSH
36125: CALL_OW 1
36129: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36130: LD_VAR 0 1
36134: PPUSH
36135: CALL_OW 302
36139: NOT
36140: IFFALSE 36153
// begin HackUnlinkAll ( i ) ;
36142: LD_VAR 0 1
36146: PPUSH
36147: CALL 36259 0 1
// continue ;
36151: GO 36033
// end ; HackCheckCapturedStatus ( i ) ;
36153: LD_VAR 0 1
36157: PPUSH
36158: CALL 36702 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36162: LD_ADDR_VAR 0 2
36166: PUSH
36167: LD_INT 81
36169: PUSH
36170: LD_VAR 0 1
36174: PPUSH
36175: CALL_OW 255
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 33
36186: PUSH
36187: LD_INT 3
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 91
36196: PUSH
36197: LD_VAR 0 1
36201: PUSH
36202: LD_EXP 127
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 50
36214: PUSH
36215: EMPTY
36216: LIST
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: PPUSH
36224: CALL_OW 69
36228: ST_TO_ADDR
// if not tmp then
36229: LD_VAR 0 2
36233: NOT
36234: IFFALSE 36238
// continue ;
36236: GO 36033
// HackLink ( i , tmp ) ;
36238: LD_VAR 0 1
36242: PPUSH
36243: LD_VAR 0 2
36247: PPUSH
36248: CALL 36395 0 2
// end ;
36252: GO 36033
36254: POP
36255: POP
// end ;
36256: PPOPN 2
36258: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36259: LD_INT 0
36261: PPUSH
36262: PPUSH
36263: PPUSH
// if not hack in hackTanks then
36264: LD_VAR 0 1
36268: PUSH
36269: LD_EXP 124
36273: IN
36274: NOT
36275: IFFALSE 36279
// exit ;
36277: GO 36390
// index := GetElementIndex ( hackTanks , hack ) ;
36279: LD_ADDR_VAR 0 4
36283: PUSH
36284: LD_EXP 124
36288: PPUSH
36289: LD_VAR 0 1
36293: PPUSH
36294: CALL 44007 0 2
36298: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36299: LD_EXP 125
36303: PUSH
36304: LD_VAR 0 4
36308: ARRAY
36309: IFFALSE 36390
// begin for i in hackTanksCaptured [ index ] do
36311: LD_ADDR_VAR 0 3
36315: PUSH
36316: LD_EXP 125
36320: PUSH
36321: LD_VAR 0 4
36325: ARRAY
36326: PUSH
36327: FOR_IN
36328: IFFALSE 36354
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36330: LD_VAR 0 3
36334: PUSH
36335: LD_INT 1
36337: ARRAY
36338: PPUSH
36339: LD_VAR 0 3
36343: PUSH
36344: LD_INT 2
36346: ARRAY
36347: PPUSH
36348: CALL_OW 235
36352: GO 36327
36354: POP
36355: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36356: LD_ADDR_EXP 125
36360: PUSH
36361: LD_EXP 125
36365: PPUSH
36366: LD_VAR 0 4
36370: PPUSH
36371: EMPTY
36372: PPUSH
36373: CALL_OW 1
36377: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36378: LD_VAR 0 1
36382: PPUSH
36383: LD_INT 0
36385: PPUSH
36386: CALL_OW 505
// end ; end ;
36390: LD_VAR 0 2
36394: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36395: LD_INT 0
36397: PPUSH
36398: PPUSH
36399: PPUSH
// if not hack in hackTanks or not vehicles then
36400: LD_VAR 0 1
36404: PUSH
36405: LD_EXP 124
36409: IN
36410: NOT
36411: PUSH
36412: LD_VAR 0 2
36416: NOT
36417: OR
36418: IFFALSE 36422
// exit ;
36420: GO 36697
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36422: LD_ADDR_VAR 0 2
36426: PUSH
36427: LD_VAR 0 1
36431: PPUSH
36432: LD_VAR 0 2
36436: PPUSH
36437: LD_INT 1
36439: PPUSH
36440: LD_INT 1
36442: PPUSH
36443: CALL 44657 0 4
36447: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36448: LD_ADDR_VAR 0 5
36452: PUSH
36453: LD_EXP 124
36457: PPUSH
36458: LD_VAR 0 1
36462: PPUSH
36463: CALL 44007 0 2
36467: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36468: LD_EXP 125
36472: PUSH
36473: LD_VAR 0 5
36477: ARRAY
36478: PUSH
36479: LD_EXP 126
36483: LESS
36484: IFFALSE 36673
// begin for i := 1 to vehicles do
36486: LD_ADDR_VAR 0 4
36490: PUSH
36491: DOUBLE
36492: LD_INT 1
36494: DEC
36495: ST_TO_ADDR
36496: LD_VAR 0 2
36500: PUSH
36501: FOR_TO
36502: IFFALSE 36671
// begin if hackTanksCaptured [ index ] = hackLimit then
36504: LD_EXP 125
36508: PUSH
36509: LD_VAR 0 5
36513: ARRAY
36514: PUSH
36515: LD_EXP 126
36519: EQUAL
36520: IFFALSE 36524
// break ;
36522: GO 36671
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36524: LD_ADDR_EXP 128
36528: PUSH
36529: LD_EXP 128
36533: PPUSH
36534: LD_VAR 0 5
36538: PPUSH
36539: LD_EXP 128
36543: PUSH
36544: LD_VAR 0 5
36548: ARRAY
36549: PUSH
36550: LD_INT 1
36552: PLUS
36553: PPUSH
36554: CALL_OW 1
36558: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36559: LD_ADDR_EXP 125
36563: PUSH
36564: LD_EXP 125
36568: PPUSH
36569: LD_VAR 0 5
36573: PUSH
36574: LD_EXP 125
36578: PUSH
36579: LD_VAR 0 5
36583: ARRAY
36584: PUSH
36585: LD_INT 1
36587: PLUS
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PPUSH
36593: LD_VAR 0 2
36597: PUSH
36598: LD_VAR 0 4
36602: ARRAY
36603: PUSH
36604: LD_VAR 0 2
36608: PUSH
36609: LD_VAR 0 4
36613: ARRAY
36614: PPUSH
36615: CALL_OW 255
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PPUSH
36624: CALL 44222 0 3
36628: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36629: LD_VAR 0 2
36633: PUSH
36634: LD_VAR 0 4
36638: ARRAY
36639: PPUSH
36640: LD_VAR 0 1
36644: PPUSH
36645: CALL_OW 255
36649: PPUSH
36650: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36654: LD_VAR 0 2
36658: PUSH
36659: LD_VAR 0 4
36663: ARRAY
36664: PPUSH
36665: CALL_OW 141
// end ;
36669: GO 36501
36671: POP
36672: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36673: LD_VAR 0 1
36677: PPUSH
36678: LD_EXP 125
36682: PUSH
36683: LD_VAR 0 5
36687: ARRAY
36688: PUSH
36689: LD_INT 0
36691: PLUS
36692: PPUSH
36693: CALL_OW 505
// end ;
36697: LD_VAR 0 3
36701: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36702: LD_INT 0
36704: PPUSH
36705: PPUSH
36706: PPUSH
36707: PPUSH
// if not hack in hackTanks then
36708: LD_VAR 0 1
36712: PUSH
36713: LD_EXP 124
36717: IN
36718: NOT
36719: IFFALSE 36723
// exit ;
36721: GO 36963
// index := GetElementIndex ( hackTanks , hack ) ;
36723: LD_ADDR_VAR 0 4
36727: PUSH
36728: LD_EXP 124
36732: PPUSH
36733: LD_VAR 0 1
36737: PPUSH
36738: CALL 44007 0 2
36742: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36743: LD_ADDR_VAR 0 3
36747: PUSH
36748: DOUBLE
36749: LD_EXP 125
36753: PUSH
36754: LD_VAR 0 4
36758: ARRAY
36759: INC
36760: ST_TO_ADDR
36761: LD_INT 1
36763: PUSH
36764: FOR_DOWNTO
36765: IFFALSE 36937
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36767: LD_ADDR_VAR 0 5
36771: PUSH
36772: LD_EXP 125
36776: PUSH
36777: LD_VAR 0 4
36781: ARRAY
36782: PUSH
36783: LD_VAR 0 3
36787: ARRAY
36788: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36789: LD_VAR 0 5
36793: PUSH
36794: LD_INT 1
36796: ARRAY
36797: PPUSH
36798: CALL_OW 302
36802: NOT
36803: PUSH
36804: LD_VAR 0 5
36808: PUSH
36809: LD_INT 1
36811: ARRAY
36812: PPUSH
36813: CALL_OW 255
36817: PUSH
36818: LD_VAR 0 1
36822: PPUSH
36823: CALL_OW 255
36827: NONEQUAL
36828: OR
36829: IFFALSE 36935
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36831: LD_VAR 0 5
36835: PUSH
36836: LD_INT 1
36838: ARRAY
36839: PPUSH
36840: CALL_OW 305
36844: PUSH
36845: LD_VAR 0 5
36849: PUSH
36850: LD_INT 1
36852: ARRAY
36853: PPUSH
36854: CALL_OW 255
36858: PUSH
36859: LD_VAR 0 1
36863: PPUSH
36864: CALL_OW 255
36868: EQUAL
36869: AND
36870: IFFALSE 36894
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36872: LD_VAR 0 5
36876: PUSH
36877: LD_INT 1
36879: ARRAY
36880: PPUSH
36881: LD_VAR 0 5
36885: PUSH
36886: LD_INT 2
36888: ARRAY
36889: PPUSH
36890: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36894: LD_ADDR_EXP 125
36898: PUSH
36899: LD_EXP 125
36903: PPUSH
36904: LD_VAR 0 4
36908: PPUSH
36909: LD_EXP 125
36913: PUSH
36914: LD_VAR 0 4
36918: ARRAY
36919: PPUSH
36920: LD_VAR 0 3
36924: PPUSH
36925: CALL_OW 3
36929: PPUSH
36930: CALL_OW 1
36934: ST_TO_ADDR
// end ; end ;
36935: GO 36764
36937: POP
36938: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36939: LD_VAR 0 1
36943: PPUSH
36944: LD_EXP 125
36948: PUSH
36949: LD_VAR 0 4
36953: ARRAY
36954: PUSH
36955: LD_INT 0
36957: PLUS
36958: PPUSH
36959: CALL_OW 505
// end ;
36963: LD_VAR 0 2
36967: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36968: LD_INT 0
36970: PPUSH
36971: PPUSH
36972: PPUSH
36973: PPUSH
// if not hack in hackTanks then
36974: LD_VAR 0 1
36978: PUSH
36979: LD_EXP 124
36983: IN
36984: NOT
36985: IFFALSE 36989
// exit ;
36987: GO 37074
// index := GetElementIndex ( hackTanks , hack ) ;
36989: LD_ADDR_VAR 0 5
36993: PUSH
36994: LD_EXP 124
36998: PPUSH
36999: LD_VAR 0 1
37003: PPUSH
37004: CALL 44007 0 2
37008: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37009: LD_ADDR_VAR 0 4
37013: PUSH
37014: DOUBLE
37015: LD_INT 1
37017: DEC
37018: ST_TO_ADDR
37019: LD_EXP 125
37023: PUSH
37024: LD_VAR 0 5
37028: ARRAY
37029: PUSH
37030: FOR_TO
37031: IFFALSE 37072
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37033: LD_EXP 125
37037: PUSH
37038: LD_VAR 0 5
37042: ARRAY
37043: PUSH
37044: LD_VAR 0 4
37048: ARRAY
37049: PUSH
37050: LD_INT 1
37052: ARRAY
37053: PUSH
37054: LD_VAR 0 2
37058: EQUAL
37059: IFFALSE 37070
// KillUnit ( vehicle ) ;
37061: LD_VAR 0 2
37065: PPUSH
37066: CALL_OW 66
37070: GO 37030
37072: POP
37073: POP
// end ;
37074: LD_VAR 0 3
37078: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37079: LD_EXP 129
37083: NOT
37084: IFFALSE 37119
37086: GO 37088
37088: DISABLE
// begin initMiner := true ;
37089: LD_ADDR_EXP 129
37093: PUSH
37094: LD_INT 1
37096: ST_TO_ADDR
// minersList := [ ] ;
37097: LD_ADDR_EXP 130
37101: PUSH
37102: EMPTY
37103: ST_TO_ADDR
// minerMinesList := [ ] ;
37104: LD_ADDR_EXP 131
37108: PUSH
37109: EMPTY
37110: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37111: LD_ADDR_EXP 132
37115: PUSH
37116: LD_INT 5
37118: ST_TO_ADDR
// end ;
37119: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37120: LD_EXP 129
37124: PUSH
37125: LD_INT 34
37127: PUSH
37128: LD_INT 81
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PPUSH
37135: CALL_OW 69
37139: AND
37140: IFFALSE 37601
37142: GO 37144
37144: DISABLE
37145: LD_INT 0
37147: PPUSH
37148: PPUSH
37149: PPUSH
37150: PPUSH
// begin enable ;
37151: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37152: LD_ADDR_VAR 0 1
37156: PUSH
37157: LD_INT 34
37159: PUSH
37160: LD_INT 81
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PPUSH
37167: CALL_OW 69
37171: PUSH
37172: FOR_IN
37173: IFFALSE 37245
// begin if not i in minersList then
37175: LD_VAR 0 1
37179: PUSH
37180: LD_EXP 130
37184: IN
37185: NOT
37186: IFFALSE 37243
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37188: LD_ADDR_EXP 130
37192: PUSH
37193: LD_EXP 130
37197: PPUSH
37198: LD_EXP 130
37202: PUSH
37203: LD_INT 1
37205: PLUS
37206: PPUSH
37207: LD_VAR 0 1
37211: PPUSH
37212: CALL_OW 1
37216: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37217: LD_ADDR_EXP 131
37221: PUSH
37222: LD_EXP 131
37226: PPUSH
37227: LD_EXP 131
37231: PUSH
37232: LD_INT 1
37234: PLUS
37235: PPUSH
37236: EMPTY
37237: PPUSH
37238: CALL_OW 1
37242: ST_TO_ADDR
// end end ;
37243: GO 37172
37245: POP
37246: POP
// for i := minerMinesList downto 1 do
37247: LD_ADDR_VAR 0 1
37251: PUSH
37252: DOUBLE
37253: LD_EXP 131
37257: INC
37258: ST_TO_ADDR
37259: LD_INT 1
37261: PUSH
37262: FOR_DOWNTO
37263: IFFALSE 37599
// begin if IsLive ( minersList [ i ] ) then
37265: LD_EXP 130
37269: PUSH
37270: LD_VAR 0 1
37274: ARRAY
37275: PPUSH
37276: CALL_OW 300
37280: IFFALSE 37308
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37282: LD_EXP 130
37286: PUSH
37287: LD_VAR 0 1
37291: ARRAY
37292: PPUSH
37293: LD_EXP 131
37297: PUSH
37298: LD_VAR 0 1
37302: ARRAY
37303: PPUSH
37304: CALL_OW 505
// if not minerMinesList [ i ] then
37308: LD_EXP 131
37312: PUSH
37313: LD_VAR 0 1
37317: ARRAY
37318: NOT
37319: IFFALSE 37323
// continue ;
37321: GO 37262
// for j := minerMinesList [ i ] downto 1 do
37323: LD_ADDR_VAR 0 2
37327: PUSH
37328: DOUBLE
37329: LD_EXP 131
37333: PUSH
37334: LD_VAR 0 1
37338: ARRAY
37339: INC
37340: ST_TO_ADDR
37341: LD_INT 1
37343: PUSH
37344: FOR_DOWNTO
37345: IFFALSE 37595
// begin side := GetSide ( minersList [ i ] ) ;
37347: LD_ADDR_VAR 0 3
37351: PUSH
37352: LD_EXP 130
37356: PUSH
37357: LD_VAR 0 1
37361: ARRAY
37362: PPUSH
37363: CALL_OW 255
37367: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37368: LD_ADDR_VAR 0 4
37372: PUSH
37373: LD_EXP 131
37377: PUSH
37378: LD_VAR 0 1
37382: ARRAY
37383: PUSH
37384: LD_VAR 0 2
37388: ARRAY
37389: PUSH
37390: LD_INT 1
37392: ARRAY
37393: PPUSH
37394: LD_EXP 131
37398: PUSH
37399: LD_VAR 0 1
37403: ARRAY
37404: PUSH
37405: LD_VAR 0 2
37409: ARRAY
37410: PUSH
37411: LD_INT 2
37413: ARRAY
37414: PPUSH
37415: CALL_OW 428
37419: ST_TO_ADDR
// if not tmp then
37420: LD_VAR 0 4
37424: NOT
37425: IFFALSE 37429
// continue ;
37427: GO 37344
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37429: LD_VAR 0 4
37433: PUSH
37434: LD_INT 81
37436: PUSH
37437: LD_VAR 0 3
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PPUSH
37446: CALL_OW 69
37450: IN
37451: PUSH
37452: LD_EXP 131
37456: PUSH
37457: LD_VAR 0 1
37461: ARRAY
37462: PUSH
37463: LD_VAR 0 2
37467: ARRAY
37468: PUSH
37469: LD_INT 1
37471: ARRAY
37472: PPUSH
37473: LD_EXP 131
37477: PUSH
37478: LD_VAR 0 1
37482: ARRAY
37483: PUSH
37484: LD_VAR 0 2
37488: ARRAY
37489: PUSH
37490: LD_INT 2
37492: ARRAY
37493: PPUSH
37494: CALL_OW 458
37498: AND
37499: IFFALSE 37593
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37501: LD_EXP 131
37505: PUSH
37506: LD_VAR 0 1
37510: ARRAY
37511: PUSH
37512: LD_VAR 0 2
37516: ARRAY
37517: PUSH
37518: LD_INT 1
37520: ARRAY
37521: PPUSH
37522: LD_EXP 131
37526: PUSH
37527: LD_VAR 0 1
37531: ARRAY
37532: PUSH
37533: LD_VAR 0 2
37537: ARRAY
37538: PUSH
37539: LD_INT 2
37541: ARRAY
37542: PPUSH
37543: LD_VAR 0 3
37547: PPUSH
37548: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37552: LD_ADDR_EXP 131
37556: PUSH
37557: LD_EXP 131
37561: PPUSH
37562: LD_VAR 0 1
37566: PPUSH
37567: LD_EXP 131
37571: PUSH
37572: LD_VAR 0 1
37576: ARRAY
37577: PPUSH
37578: LD_VAR 0 2
37582: PPUSH
37583: CALL_OW 3
37587: PPUSH
37588: CALL_OW 1
37592: ST_TO_ADDR
// end ; end ;
37593: GO 37344
37595: POP
37596: POP
// end ;
37597: GO 37262
37599: POP
37600: POP
// end ;
37601: PPOPN 4
37603: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37604: LD_INT 0
37606: PPUSH
37607: PPUSH
// result := false ;
37608: LD_ADDR_VAR 0 4
37612: PUSH
37613: LD_INT 0
37615: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37616: LD_VAR 0 1
37620: PPUSH
37621: CALL_OW 264
37625: PUSH
37626: LD_INT 81
37628: EQUAL
37629: NOT
37630: IFFALSE 37634
// exit ;
37632: GO 37874
// index := GetElementIndex ( minersList , unit ) ;
37634: LD_ADDR_VAR 0 5
37638: PUSH
37639: LD_EXP 130
37643: PPUSH
37644: LD_VAR 0 1
37648: PPUSH
37649: CALL 44007 0 2
37653: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37654: LD_EXP 131
37658: PUSH
37659: LD_VAR 0 5
37663: ARRAY
37664: PUSH
37665: LD_EXP 132
37669: GREATEREQUAL
37670: IFFALSE 37674
// exit ;
37672: GO 37874
// ComMoveXY ( unit , x , y ) ;
37674: LD_VAR 0 1
37678: PPUSH
37679: LD_VAR 0 2
37683: PPUSH
37684: LD_VAR 0 3
37688: PPUSH
37689: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37693: LD_INT 35
37695: PPUSH
37696: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37700: LD_VAR 0 1
37704: PPUSH
37705: LD_VAR 0 2
37709: PPUSH
37710: LD_VAR 0 3
37714: PPUSH
37715: CALL 75343 0 3
37719: NOT
37720: PUSH
37721: LD_VAR 0 1
37725: PPUSH
37726: CALL_OW 314
37730: AND
37731: IFFALSE 37735
// exit ;
37733: GO 37874
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37735: LD_VAR 0 2
37739: PPUSH
37740: LD_VAR 0 3
37744: PPUSH
37745: CALL_OW 428
37749: PUSH
37750: LD_VAR 0 1
37754: EQUAL
37755: PUSH
37756: LD_VAR 0 1
37760: PPUSH
37761: CALL_OW 314
37765: NOT
37766: AND
37767: IFFALSE 37693
// PlaySoundXY ( x , y , PlantMine ) ;
37769: LD_VAR 0 2
37773: PPUSH
37774: LD_VAR 0 3
37778: PPUSH
37779: LD_STRING PlantMine
37781: PPUSH
37782: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37786: LD_VAR 0 2
37790: PPUSH
37791: LD_VAR 0 3
37795: PPUSH
37796: LD_VAR 0 1
37800: PPUSH
37801: CALL_OW 255
37805: PPUSH
37806: LD_INT 0
37808: PPUSH
37809: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37813: LD_ADDR_EXP 131
37817: PUSH
37818: LD_EXP 131
37822: PPUSH
37823: LD_VAR 0 5
37827: PUSH
37828: LD_EXP 131
37832: PUSH
37833: LD_VAR 0 5
37837: ARRAY
37838: PUSH
37839: LD_INT 1
37841: PLUS
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PPUSH
37847: LD_VAR 0 2
37851: PUSH
37852: LD_VAR 0 3
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PPUSH
37861: CALL 44222 0 3
37865: ST_TO_ADDR
// result := true ;
37866: LD_ADDR_VAR 0 4
37870: PUSH
37871: LD_INT 1
37873: ST_TO_ADDR
// end ;
37874: LD_VAR 0 4
37878: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37879: LD_INT 0
37881: PPUSH
37882: PPUSH
37883: PPUSH
// if not unit in minersList then
37884: LD_VAR 0 1
37888: PUSH
37889: LD_EXP 130
37893: IN
37894: NOT
37895: IFFALSE 37899
// exit ;
37897: GO 38291
// index := GetElementIndex ( minersList , unit ) ;
37899: LD_ADDR_VAR 0 6
37903: PUSH
37904: LD_EXP 130
37908: PPUSH
37909: LD_VAR 0 1
37913: PPUSH
37914: CALL 44007 0 2
37918: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37919: LD_ADDR_VAR 0 5
37923: PUSH
37924: DOUBLE
37925: LD_EXP 131
37929: PUSH
37930: LD_VAR 0 6
37934: ARRAY
37935: INC
37936: ST_TO_ADDR
37937: LD_INT 1
37939: PUSH
37940: FOR_DOWNTO
37941: IFFALSE 38102
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37943: LD_EXP 131
37947: PUSH
37948: LD_VAR 0 6
37952: ARRAY
37953: PUSH
37954: LD_VAR 0 5
37958: ARRAY
37959: PUSH
37960: LD_INT 1
37962: ARRAY
37963: PUSH
37964: LD_VAR 0 2
37968: EQUAL
37969: PUSH
37970: LD_EXP 131
37974: PUSH
37975: LD_VAR 0 6
37979: ARRAY
37980: PUSH
37981: LD_VAR 0 5
37985: ARRAY
37986: PUSH
37987: LD_INT 2
37989: ARRAY
37990: PUSH
37991: LD_VAR 0 3
37995: EQUAL
37996: AND
37997: IFFALSE 38100
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37999: LD_EXP 131
38003: PUSH
38004: LD_VAR 0 6
38008: ARRAY
38009: PUSH
38010: LD_VAR 0 5
38014: ARRAY
38015: PUSH
38016: LD_INT 1
38018: ARRAY
38019: PPUSH
38020: LD_EXP 131
38024: PUSH
38025: LD_VAR 0 6
38029: ARRAY
38030: PUSH
38031: LD_VAR 0 5
38035: ARRAY
38036: PUSH
38037: LD_INT 2
38039: ARRAY
38040: PPUSH
38041: LD_VAR 0 1
38045: PPUSH
38046: CALL_OW 255
38050: PPUSH
38051: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38055: LD_ADDR_EXP 131
38059: PUSH
38060: LD_EXP 131
38064: PPUSH
38065: LD_VAR 0 6
38069: PPUSH
38070: LD_EXP 131
38074: PUSH
38075: LD_VAR 0 6
38079: ARRAY
38080: PPUSH
38081: LD_VAR 0 5
38085: PPUSH
38086: CALL_OW 3
38090: PPUSH
38091: CALL_OW 1
38095: ST_TO_ADDR
// exit ;
38096: POP
38097: POP
38098: GO 38291
// end ; end ;
38100: GO 37940
38102: POP
38103: POP
// for i := minerMinesList [ index ] downto 1 do
38104: LD_ADDR_VAR 0 5
38108: PUSH
38109: DOUBLE
38110: LD_EXP 131
38114: PUSH
38115: LD_VAR 0 6
38119: ARRAY
38120: INC
38121: ST_TO_ADDR
38122: LD_INT 1
38124: PUSH
38125: FOR_DOWNTO
38126: IFFALSE 38289
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38128: LD_EXP 131
38132: PUSH
38133: LD_VAR 0 6
38137: ARRAY
38138: PUSH
38139: LD_VAR 0 5
38143: ARRAY
38144: PUSH
38145: LD_INT 1
38147: ARRAY
38148: PPUSH
38149: LD_EXP 131
38153: PUSH
38154: LD_VAR 0 6
38158: ARRAY
38159: PUSH
38160: LD_VAR 0 5
38164: ARRAY
38165: PUSH
38166: LD_INT 2
38168: ARRAY
38169: PPUSH
38170: LD_VAR 0 2
38174: PPUSH
38175: LD_VAR 0 3
38179: PPUSH
38180: CALL_OW 298
38184: PUSH
38185: LD_INT 6
38187: LESS
38188: IFFALSE 38287
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38190: LD_EXP 131
38194: PUSH
38195: LD_VAR 0 6
38199: ARRAY
38200: PUSH
38201: LD_VAR 0 5
38205: ARRAY
38206: PUSH
38207: LD_INT 1
38209: ARRAY
38210: PPUSH
38211: LD_EXP 131
38215: PUSH
38216: LD_VAR 0 6
38220: ARRAY
38221: PUSH
38222: LD_VAR 0 5
38226: ARRAY
38227: PUSH
38228: LD_INT 2
38230: ARRAY
38231: PPUSH
38232: LD_VAR 0 1
38236: PPUSH
38237: CALL_OW 255
38241: PPUSH
38242: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38246: LD_ADDR_EXP 131
38250: PUSH
38251: LD_EXP 131
38255: PPUSH
38256: LD_VAR 0 6
38260: PPUSH
38261: LD_EXP 131
38265: PUSH
38266: LD_VAR 0 6
38270: ARRAY
38271: PPUSH
38272: LD_VAR 0 5
38276: PPUSH
38277: CALL_OW 3
38281: PPUSH
38282: CALL_OW 1
38286: ST_TO_ADDR
// end ; end ;
38287: GO 38125
38289: POP
38290: POP
// end ;
38291: LD_VAR 0 4
38295: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38296: LD_INT 0
38298: PPUSH
38299: PPUSH
38300: PPUSH
38301: PPUSH
38302: PPUSH
38303: PPUSH
38304: PPUSH
38305: PPUSH
38306: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38307: LD_VAR 0 1
38311: PPUSH
38312: CALL_OW 264
38316: PUSH
38317: LD_INT 81
38319: EQUAL
38320: NOT
38321: PUSH
38322: LD_VAR 0 1
38326: PUSH
38327: LD_EXP 130
38331: IN
38332: NOT
38333: OR
38334: IFFALSE 38338
// exit ;
38336: GO 38660
// index := GetElementIndex ( minersList , unit ) ;
38338: LD_ADDR_VAR 0 6
38342: PUSH
38343: LD_EXP 130
38347: PPUSH
38348: LD_VAR 0 1
38352: PPUSH
38353: CALL 44007 0 2
38357: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38358: LD_ADDR_VAR 0 8
38362: PUSH
38363: LD_EXP 132
38367: PUSH
38368: LD_EXP 131
38372: PUSH
38373: LD_VAR 0 6
38377: ARRAY
38378: MINUS
38379: ST_TO_ADDR
// if not minesFreeAmount then
38380: LD_VAR 0 8
38384: NOT
38385: IFFALSE 38389
// exit ;
38387: GO 38660
// tmp := [ ] ;
38389: LD_ADDR_VAR 0 7
38393: PUSH
38394: EMPTY
38395: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38396: LD_ADDR_VAR 0 5
38400: PUSH
38401: DOUBLE
38402: LD_INT 1
38404: DEC
38405: ST_TO_ADDR
38406: LD_VAR 0 8
38410: PUSH
38411: FOR_TO
38412: IFFALSE 38607
// begin _d := rand ( 0 , 5 ) ;
38414: LD_ADDR_VAR 0 11
38418: PUSH
38419: LD_INT 0
38421: PPUSH
38422: LD_INT 5
38424: PPUSH
38425: CALL_OW 12
38429: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38430: LD_ADDR_VAR 0 12
38434: PUSH
38435: LD_INT 2
38437: PPUSH
38438: LD_INT 6
38440: PPUSH
38441: CALL_OW 12
38445: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38446: LD_ADDR_VAR 0 9
38450: PUSH
38451: LD_VAR 0 2
38455: PPUSH
38456: LD_VAR 0 11
38460: PPUSH
38461: LD_VAR 0 12
38465: PPUSH
38466: CALL_OW 272
38470: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38471: LD_ADDR_VAR 0 10
38475: PUSH
38476: LD_VAR 0 3
38480: PPUSH
38481: LD_VAR 0 11
38485: PPUSH
38486: LD_VAR 0 12
38490: PPUSH
38491: CALL_OW 273
38495: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38496: LD_VAR 0 9
38500: PPUSH
38501: LD_VAR 0 10
38505: PPUSH
38506: CALL_OW 488
38510: PUSH
38511: LD_VAR 0 9
38515: PUSH
38516: LD_VAR 0 10
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_VAR 0 7
38529: IN
38530: NOT
38531: AND
38532: PUSH
38533: LD_VAR 0 9
38537: PPUSH
38538: LD_VAR 0 10
38542: PPUSH
38543: CALL_OW 458
38547: NOT
38548: AND
38549: IFFALSE 38591
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38551: LD_ADDR_VAR 0 7
38555: PUSH
38556: LD_VAR 0 7
38560: PPUSH
38561: LD_VAR 0 7
38565: PUSH
38566: LD_INT 1
38568: PLUS
38569: PPUSH
38570: LD_VAR 0 9
38574: PUSH
38575: LD_VAR 0 10
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PPUSH
38584: CALL_OW 1
38588: ST_TO_ADDR
38589: GO 38605
// i := i - 1 ;
38591: LD_ADDR_VAR 0 5
38595: PUSH
38596: LD_VAR 0 5
38600: PUSH
38601: LD_INT 1
38603: MINUS
38604: ST_TO_ADDR
// end ;
38605: GO 38411
38607: POP
38608: POP
// for i in tmp do
38609: LD_ADDR_VAR 0 5
38613: PUSH
38614: LD_VAR 0 7
38618: PUSH
38619: FOR_IN
38620: IFFALSE 38658
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38622: LD_VAR 0 1
38626: PPUSH
38627: LD_VAR 0 5
38631: PUSH
38632: LD_INT 1
38634: ARRAY
38635: PPUSH
38636: LD_VAR 0 5
38640: PUSH
38641: LD_INT 2
38643: ARRAY
38644: PPUSH
38645: CALL 37604 0 3
38649: NOT
38650: IFFALSE 38656
// exit ;
38652: POP
38653: POP
38654: GO 38660
38656: GO 38619
38658: POP
38659: POP
// end ;
38660: LD_VAR 0 4
38664: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38665: LD_INT 0
38667: PPUSH
38668: PPUSH
38669: PPUSH
38670: PPUSH
38671: PPUSH
38672: PPUSH
38673: PPUSH
// if not GetClass ( unit ) = class_sniper then
38674: LD_VAR 0 1
38678: PPUSH
38679: CALL_OW 257
38683: PUSH
38684: LD_INT 5
38686: EQUAL
38687: NOT
38688: IFFALSE 38692
// exit ;
38690: GO 39080
// dist := 8 ;
38692: LD_ADDR_VAR 0 5
38696: PUSH
38697: LD_INT 8
38699: ST_TO_ADDR
// viewRange := 12 ;
38700: LD_ADDR_VAR 0 7
38704: PUSH
38705: LD_INT 12
38707: ST_TO_ADDR
// side := GetSide ( unit ) ;
38708: LD_ADDR_VAR 0 6
38712: PUSH
38713: LD_VAR 0 1
38717: PPUSH
38718: CALL_OW 255
38722: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38723: LD_INT 61
38725: PPUSH
38726: LD_VAR 0 6
38730: PPUSH
38731: CALL_OW 321
38735: PUSH
38736: LD_INT 2
38738: EQUAL
38739: IFFALSE 38749
// viewRange := 16 ;
38741: LD_ADDR_VAR 0 7
38745: PUSH
38746: LD_INT 16
38748: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38749: LD_VAR 0 1
38753: PPUSH
38754: LD_VAR 0 2
38758: PPUSH
38759: LD_VAR 0 3
38763: PPUSH
38764: CALL_OW 297
38768: PUSH
38769: LD_VAR 0 5
38773: GREATER
38774: IFFALSE 38853
// begin ComMoveXY ( unit , x , y ) ;
38776: LD_VAR 0 1
38780: PPUSH
38781: LD_VAR 0 2
38785: PPUSH
38786: LD_VAR 0 3
38790: PPUSH
38791: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38795: LD_INT 35
38797: PPUSH
38798: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38802: LD_VAR 0 1
38806: PPUSH
38807: LD_VAR 0 2
38811: PPUSH
38812: LD_VAR 0 3
38816: PPUSH
38817: CALL 75343 0 3
38821: NOT
38822: IFFALSE 38826
// exit ;
38824: GO 39080
// until GetDistUnitXY ( unit , x , y ) < dist ;
38826: LD_VAR 0 1
38830: PPUSH
38831: LD_VAR 0 2
38835: PPUSH
38836: LD_VAR 0 3
38840: PPUSH
38841: CALL_OW 297
38845: PUSH
38846: LD_VAR 0 5
38850: LESS
38851: IFFALSE 38795
// end ; ComTurnXY ( unit , x , y ) ;
38853: LD_VAR 0 1
38857: PPUSH
38858: LD_VAR 0 2
38862: PPUSH
38863: LD_VAR 0 3
38867: PPUSH
38868: CALL_OW 118
// wait ( 5 ) ;
38872: LD_INT 5
38874: PPUSH
38875: CALL_OW 67
// _d := GetDir ( unit ) ;
38879: LD_ADDR_VAR 0 10
38883: PUSH
38884: LD_VAR 0 1
38888: PPUSH
38889: CALL_OW 254
38893: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38894: LD_ADDR_VAR 0 8
38898: PUSH
38899: LD_VAR 0 1
38903: PPUSH
38904: CALL_OW 250
38908: PPUSH
38909: LD_VAR 0 10
38913: PPUSH
38914: LD_VAR 0 5
38918: PPUSH
38919: CALL_OW 272
38923: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38924: LD_ADDR_VAR 0 9
38928: PUSH
38929: LD_VAR 0 1
38933: PPUSH
38934: CALL_OW 251
38938: PPUSH
38939: LD_VAR 0 10
38943: PPUSH
38944: LD_VAR 0 5
38948: PPUSH
38949: CALL_OW 273
38953: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38954: LD_VAR 0 8
38958: PPUSH
38959: LD_VAR 0 9
38963: PPUSH
38964: CALL_OW 488
38968: NOT
38969: IFFALSE 38973
// exit ;
38971: GO 39080
// ComAnimCustom ( unit , 1 ) ;
38973: LD_VAR 0 1
38977: PPUSH
38978: LD_INT 1
38980: PPUSH
38981: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38985: LD_VAR 0 8
38989: PPUSH
38990: LD_VAR 0 9
38994: PPUSH
38995: LD_VAR 0 6
38999: PPUSH
39000: LD_VAR 0 7
39004: PPUSH
39005: CALL_OW 330
// repeat wait ( 1 ) ;
39009: LD_INT 1
39011: PPUSH
39012: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39016: LD_VAR 0 1
39020: PPUSH
39021: CALL_OW 316
39025: PUSH
39026: LD_VAR 0 1
39030: PPUSH
39031: CALL_OW 314
39035: OR
39036: PUSH
39037: LD_VAR 0 1
39041: PPUSH
39042: CALL_OW 302
39046: NOT
39047: OR
39048: PUSH
39049: LD_VAR 0 1
39053: PPUSH
39054: CALL_OW 301
39058: OR
39059: IFFALSE 39009
// RemoveSeeing ( _x , _y , side ) ;
39061: LD_VAR 0 8
39065: PPUSH
39066: LD_VAR 0 9
39070: PPUSH
39071: LD_VAR 0 6
39075: PPUSH
39076: CALL_OW 331
// end ; end_of_file
39080: LD_VAR 0 4
39084: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39085: LD_INT 0
39087: PPUSH
39088: PPUSH
// if exist_mode then
39089: LD_VAR 0 2
39093: IFFALSE 39118
// unit := CreateCharacter ( prefix & ident ) else
39095: LD_ADDR_VAR 0 5
39099: PUSH
39100: LD_VAR 0 3
39104: PUSH
39105: LD_VAR 0 1
39109: STR
39110: PPUSH
39111: CALL_OW 34
39115: ST_TO_ADDR
39116: GO 39133
// unit := NewCharacter ( ident ) ;
39118: LD_ADDR_VAR 0 5
39122: PUSH
39123: LD_VAR 0 1
39127: PPUSH
39128: CALL_OW 25
39132: ST_TO_ADDR
// result := unit ;
39133: LD_ADDR_VAR 0 4
39137: PUSH
39138: LD_VAR 0 5
39142: ST_TO_ADDR
// end ;
39143: LD_VAR 0 4
39147: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39148: LD_INT 0
39150: PPUSH
39151: PPUSH
// if not side or not nation then
39152: LD_VAR 0 1
39156: NOT
39157: PUSH
39158: LD_VAR 0 2
39162: NOT
39163: OR
39164: IFFALSE 39168
// exit ;
39166: GO 39936
// case nation of nation_american :
39168: LD_VAR 0 2
39172: PUSH
39173: LD_INT 1
39175: DOUBLE
39176: EQUAL
39177: IFTRUE 39181
39179: GO 39395
39181: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39182: LD_ADDR_VAR 0 4
39186: PUSH
39187: LD_INT 35
39189: PUSH
39190: LD_INT 45
39192: PUSH
39193: LD_INT 46
39195: PUSH
39196: LD_INT 47
39198: PUSH
39199: LD_INT 82
39201: PUSH
39202: LD_INT 83
39204: PUSH
39205: LD_INT 84
39207: PUSH
39208: LD_INT 85
39210: PUSH
39211: LD_INT 86
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: LD_INT 2
39219: PUSH
39220: LD_INT 6
39222: PUSH
39223: LD_INT 15
39225: PUSH
39226: LD_INT 16
39228: PUSH
39229: LD_INT 7
39231: PUSH
39232: LD_INT 12
39234: PUSH
39235: LD_INT 13
39237: PUSH
39238: LD_INT 10
39240: PUSH
39241: LD_INT 14
39243: PUSH
39244: LD_INT 20
39246: PUSH
39247: LD_INT 21
39249: PUSH
39250: LD_INT 22
39252: PUSH
39253: LD_INT 25
39255: PUSH
39256: LD_INT 32
39258: PUSH
39259: LD_INT 27
39261: PUSH
39262: LD_INT 36
39264: PUSH
39265: LD_INT 69
39267: PUSH
39268: LD_INT 39
39270: PUSH
39271: LD_INT 34
39273: PUSH
39274: LD_INT 40
39276: PUSH
39277: LD_INT 48
39279: PUSH
39280: LD_INT 49
39282: PUSH
39283: LD_INT 50
39285: PUSH
39286: LD_INT 51
39288: PUSH
39289: LD_INT 52
39291: PUSH
39292: LD_INT 53
39294: PUSH
39295: LD_INT 54
39297: PUSH
39298: LD_INT 55
39300: PUSH
39301: LD_INT 56
39303: PUSH
39304: LD_INT 57
39306: PUSH
39307: LD_INT 58
39309: PUSH
39310: LD_INT 59
39312: PUSH
39313: LD_INT 60
39315: PUSH
39316: LD_INT 61
39318: PUSH
39319: LD_INT 62
39321: PUSH
39322: LD_INT 80
39324: PUSH
39325: LD_INT 82
39327: PUSH
39328: LD_INT 83
39330: PUSH
39331: LD_INT 84
39333: PUSH
39334: LD_INT 85
39336: PUSH
39337: LD_INT 86
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: ST_TO_ADDR
39393: GO 39860
39395: LD_INT 2
39397: DOUBLE
39398: EQUAL
39399: IFTRUE 39403
39401: GO 39629
39403: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39404: LD_ADDR_VAR 0 4
39408: PUSH
39409: LD_INT 35
39411: PUSH
39412: LD_INT 45
39414: PUSH
39415: LD_INT 46
39417: PUSH
39418: LD_INT 47
39420: PUSH
39421: LD_INT 82
39423: PUSH
39424: LD_INT 83
39426: PUSH
39427: LD_INT 84
39429: PUSH
39430: LD_INT 85
39432: PUSH
39433: LD_INT 87
39435: PUSH
39436: LD_INT 70
39438: PUSH
39439: LD_INT 1
39441: PUSH
39442: LD_INT 11
39444: PUSH
39445: LD_INT 3
39447: PUSH
39448: LD_INT 4
39450: PUSH
39451: LD_INT 5
39453: PUSH
39454: LD_INT 6
39456: PUSH
39457: LD_INT 15
39459: PUSH
39460: LD_INT 18
39462: PUSH
39463: LD_INT 7
39465: PUSH
39466: LD_INT 17
39468: PUSH
39469: LD_INT 8
39471: PUSH
39472: LD_INT 20
39474: PUSH
39475: LD_INT 21
39477: PUSH
39478: LD_INT 22
39480: PUSH
39481: LD_INT 72
39483: PUSH
39484: LD_INT 26
39486: PUSH
39487: LD_INT 69
39489: PUSH
39490: LD_INT 39
39492: PUSH
39493: LD_INT 40
39495: PUSH
39496: LD_INT 41
39498: PUSH
39499: LD_INT 42
39501: PUSH
39502: LD_INT 43
39504: PUSH
39505: LD_INT 48
39507: PUSH
39508: LD_INT 49
39510: PUSH
39511: LD_INT 50
39513: PUSH
39514: LD_INT 51
39516: PUSH
39517: LD_INT 52
39519: PUSH
39520: LD_INT 53
39522: PUSH
39523: LD_INT 54
39525: PUSH
39526: LD_INT 55
39528: PUSH
39529: LD_INT 56
39531: PUSH
39532: LD_INT 60
39534: PUSH
39535: LD_INT 61
39537: PUSH
39538: LD_INT 62
39540: PUSH
39541: LD_INT 66
39543: PUSH
39544: LD_INT 67
39546: PUSH
39547: LD_INT 68
39549: PUSH
39550: LD_INT 81
39552: PUSH
39553: LD_INT 82
39555: PUSH
39556: LD_INT 83
39558: PUSH
39559: LD_INT 84
39561: PUSH
39562: LD_INT 85
39564: PUSH
39565: LD_INT 87
39567: PUSH
39568: LD_INT 88
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: ST_TO_ADDR
39627: GO 39860
39629: LD_INT 3
39631: DOUBLE
39632: EQUAL
39633: IFTRUE 39637
39635: GO 39859
39637: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39638: LD_ADDR_VAR 0 4
39642: PUSH
39643: LD_INT 46
39645: PUSH
39646: LD_INT 47
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: LD_INT 2
39654: PUSH
39655: LD_INT 82
39657: PUSH
39658: LD_INT 83
39660: PUSH
39661: LD_INT 84
39663: PUSH
39664: LD_INT 85
39666: PUSH
39667: LD_INT 86
39669: PUSH
39670: LD_INT 11
39672: PUSH
39673: LD_INT 9
39675: PUSH
39676: LD_INT 20
39678: PUSH
39679: LD_INT 19
39681: PUSH
39682: LD_INT 21
39684: PUSH
39685: LD_INT 24
39687: PUSH
39688: LD_INT 22
39690: PUSH
39691: LD_INT 25
39693: PUSH
39694: LD_INT 28
39696: PUSH
39697: LD_INT 29
39699: PUSH
39700: LD_INT 30
39702: PUSH
39703: LD_INT 31
39705: PUSH
39706: LD_INT 37
39708: PUSH
39709: LD_INT 38
39711: PUSH
39712: LD_INT 32
39714: PUSH
39715: LD_INT 27
39717: PUSH
39718: LD_INT 33
39720: PUSH
39721: LD_INT 69
39723: PUSH
39724: LD_INT 39
39726: PUSH
39727: LD_INT 34
39729: PUSH
39730: LD_INT 40
39732: PUSH
39733: LD_INT 71
39735: PUSH
39736: LD_INT 23
39738: PUSH
39739: LD_INT 44
39741: PUSH
39742: LD_INT 48
39744: PUSH
39745: LD_INT 49
39747: PUSH
39748: LD_INT 50
39750: PUSH
39751: LD_INT 51
39753: PUSH
39754: LD_INT 52
39756: PUSH
39757: LD_INT 53
39759: PUSH
39760: LD_INT 54
39762: PUSH
39763: LD_INT 55
39765: PUSH
39766: LD_INT 56
39768: PUSH
39769: LD_INT 57
39771: PUSH
39772: LD_INT 58
39774: PUSH
39775: LD_INT 59
39777: PUSH
39778: LD_INT 63
39780: PUSH
39781: LD_INT 64
39783: PUSH
39784: LD_INT 65
39786: PUSH
39787: LD_INT 82
39789: PUSH
39790: LD_INT 83
39792: PUSH
39793: LD_INT 84
39795: PUSH
39796: LD_INT 85
39798: PUSH
39799: LD_INT 86
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: ST_TO_ADDR
39857: GO 39860
39859: POP
// if state > - 1 and state < 3 then
39860: LD_VAR 0 3
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: GREATER
39869: PUSH
39870: LD_VAR 0 3
39874: PUSH
39875: LD_INT 3
39877: LESS
39878: AND
39879: IFFALSE 39936
// for i in result do
39881: LD_ADDR_VAR 0 5
39885: PUSH
39886: LD_VAR 0 4
39890: PUSH
39891: FOR_IN
39892: IFFALSE 39934
// if GetTech ( i , side ) <> state then
39894: LD_VAR 0 5
39898: PPUSH
39899: LD_VAR 0 1
39903: PPUSH
39904: CALL_OW 321
39908: PUSH
39909: LD_VAR 0 3
39913: NONEQUAL
39914: IFFALSE 39932
// result := result diff i ;
39916: LD_ADDR_VAR 0 4
39920: PUSH
39921: LD_VAR 0 4
39925: PUSH
39926: LD_VAR 0 5
39930: DIFF
39931: ST_TO_ADDR
39932: GO 39891
39934: POP
39935: POP
// end ;
39936: LD_VAR 0 4
39940: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39941: LD_INT 0
39943: PPUSH
39944: PPUSH
39945: PPUSH
// result := true ;
39946: LD_ADDR_VAR 0 3
39950: PUSH
39951: LD_INT 1
39953: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39954: LD_ADDR_VAR 0 5
39958: PUSH
39959: LD_VAR 0 2
39963: PPUSH
39964: CALL_OW 480
39968: ST_TO_ADDR
// if not tmp then
39969: LD_VAR 0 5
39973: NOT
39974: IFFALSE 39978
// exit ;
39976: GO 40027
// for i in tmp do
39978: LD_ADDR_VAR 0 4
39982: PUSH
39983: LD_VAR 0 5
39987: PUSH
39988: FOR_IN
39989: IFFALSE 40025
// if GetTech ( i , side ) <> state_researched then
39991: LD_VAR 0 4
39995: PPUSH
39996: LD_VAR 0 1
40000: PPUSH
40001: CALL_OW 321
40005: PUSH
40006: LD_INT 2
40008: NONEQUAL
40009: IFFALSE 40023
// begin result := false ;
40011: LD_ADDR_VAR 0 3
40015: PUSH
40016: LD_INT 0
40018: ST_TO_ADDR
// exit ;
40019: POP
40020: POP
40021: GO 40027
// end ;
40023: GO 39988
40025: POP
40026: POP
// end ;
40027: LD_VAR 0 3
40031: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40032: LD_INT 0
40034: PPUSH
40035: PPUSH
40036: PPUSH
40037: PPUSH
40038: PPUSH
40039: PPUSH
40040: PPUSH
40041: PPUSH
40042: PPUSH
40043: PPUSH
40044: PPUSH
40045: PPUSH
40046: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40047: LD_VAR 0 1
40051: NOT
40052: PUSH
40053: LD_VAR 0 1
40057: PPUSH
40058: CALL_OW 257
40062: PUSH
40063: LD_INT 9
40065: NONEQUAL
40066: OR
40067: IFFALSE 40071
// exit ;
40069: GO 40644
// side := GetSide ( unit ) ;
40071: LD_ADDR_VAR 0 9
40075: PUSH
40076: LD_VAR 0 1
40080: PPUSH
40081: CALL_OW 255
40085: ST_TO_ADDR
// tech_space := tech_spacanom ;
40086: LD_ADDR_VAR 0 12
40090: PUSH
40091: LD_INT 29
40093: ST_TO_ADDR
// tech_time := tech_taurad ;
40094: LD_ADDR_VAR 0 13
40098: PUSH
40099: LD_INT 28
40101: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40102: LD_ADDR_VAR 0 11
40106: PUSH
40107: LD_VAR 0 1
40111: PPUSH
40112: CALL_OW 310
40116: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40117: LD_VAR 0 11
40121: PPUSH
40122: CALL_OW 247
40126: PUSH
40127: LD_INT 2
40129: EQUAL
40130: IFFALSE 40134
// exit ;
40132: GO 40644
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40134: LD_ADDR_VAR 0 8
40138: PUSH
40139: LD_INT 81
40141: PUSH
40142: LD_VAR 0 9
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 3
40153: PUSH
40154: LD_INT 21
40156: PUSH
40157: LD_INT 3
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PPUSH
40172: CALL_OW 69
40176: ST_TO_ADDR
// if not tmp then
40177: LD_VAR 0 8
40181: NOT
40182: IFFALSE 40186
// exit ;
40184: GO 40644
// if in_unit then
40186: LD_VAR 0 11
40190: IFFALSE 40214
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40192: LD_ADDR_VAR 0 10
40196: PUSH
40197: LD_VAR 0 8
40201: PPUSH
40202: LD_VAR 0 11
40206: PPUSH
40207: CALL_OW 74
40211: ST_TO_ADDR
40212: GO 40234
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40214: LD_ADDR_VAR 0 10
40218: PUSH
40219: LD_VAR 0 8
40223: PPUSH
40224: LD_VAR 0 1
40228: PPUSH
40229: CALL_OW 74
40233: ST_TO_ADDR
// if not enemy then
40234: LD_VAR 0 10
40238: NOT
40239: IFFALSE 40243
// exit ;
40241: GO 40644
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40243: LD_VAR 0 11
40247: PUSH
40248: LD_VAR 0 11
40252: PPUSH
40253: LD_VAR 0 10
40257: PPUSH
40258: CALL_OW 296
40262: PUSH
40263: LD_INT 13
40265: GREATER
40266: AND
40267: PUSH
40268: LD_VAR 0 1
40272: PPUSH
40273: LD_VAR 0 10
40277: PPUSH
40278: CALL_OW 296
40282: PUSH
40283: LD_INT 12
40285: GREATER
40286: OR
40287: IFFALSE 40291
// exit ;
40289: GO 40644
// missile := [ 1 ] ;
40291: LD_ADDR_VAR 0 14
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: EMPTY
40300: LIST
40301: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40302: LD_VAR 0 9
40306: PPUSH
40307: LD_VAR 0 12
40311: PPUSH
40312: CALL_OW 325
40316: IFFALSE 40345
// missile := Replace ( missile , missile + 1 , 2 ) ;
40318: LD_ADDR_VAR 0 14
40322: PUSH
40323: LD_VAR 0 14
40327: PPUSH
40328: LD_VAR 0 14
40332: PUSH
40333: LD_INT 1
40335: PLUS
40336: PPUSH
40337: LD_INT 2
40339: PPUSH
40340: CALL_OW 1
40344: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40345: LD_VAR 0 9
40349: PPUSH
40350: LD_VAR 0 13
40354: PPUSH
40355: CALL_OW 325
40359: PUSH
40360: LD_VAR 0 10
40364: PPUSH
40365: CALL_OW 255
40369: PPUSH
40370: LD_VAR 0 13
40374: PPUSH
40375: CALL_OW 325
40379: NOT
40380: AND
40381: IFFALSE 40410
// missile := Replace ( missile , missile + 1 , 3 ) ;
40383: LD_ADDR_VAR 0 14
40387: PUSH
40388: LD_VAR 0 14
40392: PPUSH
40393: LD_VAR 0 14
40397: PUSH
40398: LD_INT 1
40400: PLUS
40401: PPUSH
40402: LD_INT 3
40404: PPUSH
40405: CALL_OW 1
40409: ST_TO_ADDR
// if missile < 2 then
40410: LD_VAR 0 14
40414: PUSH
40415: LD_INT 2
40417: LESS
40418: IFFALSE 40422
// exit ;
40420: GO 40644
// x := GetX ( enemy ) ;
40422: LD_ADDR_VAR 0 4
40426: PUSH
40427: LD_VAR 0 10
40431: PPUSH
40432: CALL_OW 250
40436: ST_TO_ADDR
// y := GetY ( enemy ) ;
40437: LD_ADDR_VAR 0 5
40441: PUSH
40442: LD_VAR 0 10
40446: PPUSH
40447: CALL_OW 251
40451: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40452: LD_ADDR_VAR 0 6
40456: PUSH
40457: LD_VAR 0 4
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PPUSH
40466: LD_INT 1
40468: PPUSH
40469: CALL_OW 12
40473: PLUS
40474: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40475: LD_ADDR_VAR 0 7
40479: PUSH
40480: LD_VAR 0 5
40484: PUSH
40485: LD_INT 1
40487: NEG
40488: PPUSH
40489: LD_INT 1
40491: PPUSH
40492: CALL_OW 12
40496: PLUS
40497: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40498: LD_VAR 0 6
40502: PPUSH
40503: LD_VAR 0 7
40507: PPUSH
40508: CALL_OW 488
40512: NOT
40513: IFFALSE 40535
// begin _x := x ;
40515: LD_ADDR_VAR 0 6
40519: PUSH
40520: LD_VAR 0 4
40524: ST_TO_ADDR
// _y := y ;
40525: LD_ADDR_VAR 0 7
40529: PUSH
40530: LD_VAR 0 5
40534: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40535: LD_ADDR_VAR 0 3
40539: PUSH
40540: LD_INT 1
40542: PPUSH
40543: LD_VAR 0 14
40547: PPUSH
40548: CALL_OW 12
40552: ST_TO_ADDR
// case i of 1 :
40553: LD_VAR 0 3
40557: PUSH
40558: LD_INT 1
40560: DOUBLE
40561: EQUAL
40562: IFTRUE 40566
40564: GO 40583
40566: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40567: LD_VAR 0 1
40571: PPUSH
40572: LD_VAR 0 10
40576: PPUSH
40577: CALL_OW 115
40581: GO 40644
40583: LD_INT 2
40585: DOUBLE
40586: EQUAL
40587: IFTRUE 40591
40589: GO 40613
40591: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40592: LD_VAR 0 1
40596: PPUSH
40597: LD_VAR 0 6
40601: PPUSH
40602: LD_VAR 0 7
40606: PPUSH
40607: CALL_OW 153
40611: GO 40644
40613: LD_INT 3
40615: DOUBLE
40616: EQUAL
40617: IFTRUE 40621
40619: GO 40643
40621: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40622: LD_VAR 0 1
40626: PPUSH
40627: LD_VAR 0 6
40631: PPUSH
40632: LD_VAR 0 7
40636: PPUSH
40637: CALL_OW 154
40641: GO 40644
40643: POP
// end ;
40644: LD_VAR 0 2
40648: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40649: LD_INT 0
40651: PPUSH
40652: PPUSH
40653: PPUSH
40654: PPUSH
40655: PPUSH
40656: PPUSH
// if not unit or not building then
40657: LD_VAR 0 1
40661: NOT
40662: PUSH
40663: LD_VAR 0 2
40667: NOT
40668: OR
40669: IFFALSE 40673
// exit ;
40671: GO 40831
// x := GetX ( building ) ;
40673: LD_ADDR_VAR 0 5
40677: PUSH
40678: LD_VAR 0 2
40682: PPUSH
40683: CALL_OW 250
40687: ST_TO_ADDR
// y := GetY ( building ) ;
40688: LD_ADDR_VAR 0 6
40692: PUSH
40693: LD_VAR 0 2
40697: PPUSH
40698: CALL_OW 251
40702: ST_TO_ADDR
// for i = 0 to 5 do
40703: LD_ADDR_VAR 0 4
40707: PUSH
40708: DOUBLE
40709: LD_INT 0
40711: DEC
40712: ST_TO_ADDR
40713: LD_INT 5
40715: PUSH
40716: FOR_TO
40717: IFFALSE 40829
// begin _x := ShiftX ( x , i , 3 ) ;
40719: LD_ADDR_VAR 0 7
40723: PUSH
40724: LD_VAR 0 5
40728: PPUSH
40729: LD_VAR 0 4
40733: PPUSH
40734: LD_INT 3
40736: PPUSH
40737: CALL_OW 272
40741: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40742: LD_ADDR_VAR 0 8
40746: PUSH
40747: LD_VAR 0 6
40751: PPUSH
40752: LD_VAR 0 4
40756: PPUSH
40757: LD_INT 3
40759: PPUSH
40760: CALL_OW 273
40764: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40765: LD_VAR 0 7
40769: PPUSH
40770: LD_VAR 0 8
40774: PPUSH
40775: CALL_OW 488
40779: NOT
40780: IFFALSE 40784
// continue ;
40782: GO 40716
// if HexInfo ( _x , _y ) = 0 then
40784: LD_VAR 0 7
40788: PPUSH
40789: LD_VAR 0 8
40793: PPUSH
40794: CALL_OW 428
40798: PUSH
40799: LD_INT 0
40801: EQUAL
40802: IFFALSE 40827
// begin ComMoveXY ( unit , _x , _y ) ;
40804: LD_VAR 0 1
40808: PPUSH
40809: LD_VAR 0 7
40813: PPUSH
40814: LD_VAR 0 8
40818: PPUSH
40819: CALL_OW 111
// exit ;
40823: POP
40824: POP
40825: GO 40831
// end ; end ;
40827: GO 40716
40829: POP
40830: POP
// end ;
40831: LD_VAR 0 3
40835: RET
// export function ScanBase ( side , base_area ) ; begin
40836: LD_INT 0
40838: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40839: LD_ADDR_VAR 0 3
40843: PUSH
40844: LD_VAR 0 2
40848: PPUSH
40849: LD_INT 81
40851: PUSH
40852: LD_VAR 0 1
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PPUSH
40861: CALL_OW 70
40865: ST_TO_ADDR
// end ;
40866: LD_VAR 0 3
40870: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40871: LD_INT 0
40873: PPUSH
40874: PPUSH
40875: PPUSH
40876: PPUSH
// result := false ;
40877: LD_ADDR_VAR 0 2
40881: PUSH
40882: LD_INT 0
40884: ST_TO_ADDR
// side := GetSide ( unit ) ;
40885: LD_ADDR_VAR 0 3
40889: PUSH
40890: LD_VAR 0 1
40894: PPUSH
40895: CALL_OW 255
40899: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40900: LD_ADDR_VAR 0 4
40904: PUSH
40905: LD_VAR 0 1
40909: PPUSH
40910: CALL_OW 248
40914: ST_TO_ADDR
// case nat of 1 :
40915: LD_VAR 0 4
40919: PUSH
40920: LD_INT 1
40922: DOUBLE
40923: EQUAL
40924: IFTRUE 40928
40926: GO 40939
40928: POP
// tech := tech_lassight ; 2 :
40929: LD_ADDR_VAR 0 5
40933: PUSH
40934: LD_INT 12
40936: ST_TO_ADDR
40937: GO 40978
40939: LD_INT 2
40941: DOUBLE
40942: EQUAL
40943: IFTRUE 40947
40945: GO 40958
40947: POP
// tech := tech_mortar ; 3 :
40948: LD_ADDR_VAR 0 5
40952: PUSH
40953: LD_INT 41
40955: ST_TO_ADDR
40956: GO 40978
40958: LD_INT 3
40960: DOUBLE
40961: EQUAL
40962: IFTRUE 40966
40964: GO 40977
40966: POP
// tech := tech_bazooka ; end ;
40967: LD_ADDR_VAR 0 5
40971: PUSH
40972: LD_INT 44
40974: ST_TO_ADDR
40975: GO 40978
40977: POP
// if Researched ( side , tech ) then
40978: LD_VAR 0 3
40982: PPUSH
40983: LD_VAR 0 5
40987: PPUSH
40988: CALL_OW 325
40992: IFFALSE 41019
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40994: LD_ADDR_VAR 0 2
40998: PUSH
40999: LD_INT 5
41001: PUSH
41002: LD_INT 8
41004: PUSH
41005: LD_INT 9
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: LIST
41012: PUSH
41013: LD_VAR 0 4
41017: ARRAY
41018: ST_TO_ADDR
// end ;
41019: LD_VAR 0 2
41023: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41024: LD_INT 0
41026: PPUSH
41027: PPUSH
41028: PPUSH
// if not mines then
41029: LD_VAR 0 2
41033: NOT
41034: IFFALSE 41038
// exit ;
41036: GO 41182
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41038: LD_ADDR_VAR 0 5
41042: PUSH
41043: LD_INT 81
41045: PUSH
41046: LD_VAR 0 1
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 3
41057: PUSH
41058: LD_INT 21
41060: PUSH
41061: LD_INT 3
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PPUSH
41076: CALL_OW 69
41080: ST_TO_ADDR
// for i in mines do
41081: LD_ADDR_VAR 0 4
41085: PUSH
41086: LD_VAR 0 2
41090: PUSH
41091: FOR_IN
41092: IFFALSE 41180
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41094: LD_VAR 0 4
41098: PUSH
41099: LD_INT 1
41101: ARRAY
41102: PPUSH
41103: LD_VAR 0 4
41107: PUSH
41108: LD_INT 2
41110: ARRAY
41111: PPUSH
41112: CALL_OW 458
41116: NOT
41117: IFFALSE 41121
// continue ;
41119: GO 41091
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41121: LD_VAR 0 4
41125: PUSH
41126: LD_INT 1
41128: ARRAY
41129: PPUSH
41130: LD_VAR 0 4
41134: PUSH
41135: LD_INT 2
41137: ARRAY
41138: PPUSH
41139: CALL_OW 428
41143: PUSH
41144: LD_VAR 0 5
41148: IN
41149: IFFALSE 41178
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41151: LD_VAR 0 4
41155: PUSH
41156: LD_INT 1
41158: ARRAY
41159: PPUSH
41160: LD_VAR 0 4
41164: PUSH
41165: LD_INT 2
41167: ARRAY
41168: PPUSH
41169: LD_VAR 0 1
41173: PPUSH
41174: CALL_OW 456
// end ;
41178: GO 41091
41180: POP
41181: POP
// end ;
41182: LD_VAR 0 3
41186: RET
// export function Count ( array ) ; var i ; begin
41187: LD_INT 0
41189: PPUSH
41190: PPUSH
// result := 0 ;
41191: LD_ADDR_VAR 0 2
41195: PUSH
41196: LD_INT 0
41198: ST_TO_ADDR
// for i in array do
41199: LD_ADDR_VAR 0 3
41203: PUSH
41204: LD_VAR 0 1
41208: PUSH
41209: FOR_IN
41210: IFFALSE 41234
// if i then
41212: LD_VAR 0 3
41216: IFFALSE 41232
// result := result + 1 ;
41218: LD_ADDR_VAR 0 2
41222: PUSH
41223: LD_VAR 0 2
41227: PUSH
41228: LD_INT 1
41230: PLUS
41231: ST_TO_ADDR
41232: GO 41209
41234: POP
41235: POP
// end ;
41236: LD_VAR 0 2
41240: RET
// export function IsEmpty ( building ) ; begin
41241: LD_INT 0
41243: PPUSH
// if not building then
41244: LD_VAR 0 1
41248: NOT
41249: IFFALSE 41253
// exit ;
41251: GO 41296
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41253: LD_ADDR_VAR 0 2
41257: PUSH
41258: LD_VAR 0 1
41262: PUSH
41263: LD_INT 22
41265: PUSH
41266: LD_VAR 0 1
41270: PPUSH
41271: CALL_OW 255
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 58
41282: PUSH
41283: EMPTY
41284: LIST
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PPUSH
41290: CALL_OW 69
41294: IN
41295: ST_TO_ADDR
// end ;
41296: LD_VAR 0 2
41300: RET
// export function IsNotFull ( building ) ; var places ; begin
41301: LD_INT 0
41303: PPUSH
41304: PPUSH
// if not building then
41305: LD_VAR 0 1
41309: NOT
41310: IFFALSE 41314
// exit ;
41312: GO 41485
// result := false ;
41314: LD_ADDR_VAR 0 2
41318: PUSH
41319: LD_INT 0
41321: ST_TO_ADDR
// places := 0 ;
41322: LD_ADDR_VAR 0 3
41326: PUSH
41327: LD_INT 0
41329: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41330: LD_VAR 0 1
41334: PPUSH
41335: CALL_OW 266
41339: PUSH
41340: LD_INT 0
41342: DOUBLE
41343: EQUAL
41344: IFTRUE 41402
41346: LD_INT 1
41348: DOUBLE
41349: EQUAL
41350: IFTRUE 41402
41352: LD_INT 6
41354: DOUBLE
41355: EQUAL
41356: IFTRUE 41402
41358: LD_INT 7
41360: DOUBLE
41361: EQUAL
41362: IFTRUE 41402
41364: LD_INT 8
41366: DOUBLE
41367: EQUAL
41368: IFTRUE 41402
41370: LD_INT 4
41372: DOUBLE
41373: EQUAL
41374: IFTRUE 41402
41376: LD_INT 5
41378: DOUBLE
41379: EQUAL
41380: IFTRUE 41402
41382: LD_INT 2
41384: DOUBLE
41385: EQUAL
41386: IFTRUE 41402
41388: LD_INT 3
41390: DOUBLE
41391: EQUAL
41392: IFTRUE 41402
41394: LD_INT 35
41396: DOUBLE
41397: EQUAL
41398: IFTRUE 41402
41400: GO 41413
41402: POP
// places := 6 ; b_bunker , b_breastwork :
41403: LD_ADDR_VAR 0 3
41407: PUSH
41408: LD_INT 6
41410: ST_TO_ADDR
41411: GO 41458
41413: LD_INT 32
41415: DOUBLE
41416: EQUAL
41417: IFTRUE 41427
41419: LD_INT 31
41421: DOUBLE
41422: EQUAL
41423: IFTRUE 41427
41425: GO 41438
41427: POP
// places := 1 ; b_control_tower :
41428: LD_ADDR_VAR 0 3
41432: PUSH
41433: LD_INT 1
41435: ST_TO_ADDR
41436: GO 41458
41438: LD_INT 36
41440: DOUBLE
41441: EQUAL
41442: IFTRUE 41446
41444: GO 41457
41446: POP
// places := 3 ; end ;
41447: LD_ADDR_VAR 0 3
41451: PUSH
41452: LD_INT 3
41454: ST_TO_ADDR
41455: GO 41458
41457: POP
// if places then
41458: LD_VAR 0 3
41462: IFFALSE 41485
// result := UnitsInside ( building ) < places ;
41464: LD_ADDR_VAR 0 2
41468: PUSH
41469: LD_VAR 0 1
41473: PPUSH
41474: CALL_OW 313
41478: PUSH
41479: LD_VAR 0 3
41483: LESS
41484: ST_TO_ADDR
// end ;
41485: LD_VAR 0 2
41489: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41490: LD_INT 0
41492: PPUSH
41493: PPUSH
41494: PPUSH
41495: PPUSH
// tmp := [ ] ;
41496: LD_ADDR_VAR 0 3
41500: PUSH
41501: EMPTY
41502: ST_TO_ADDR
// list := [ ] ;
41503: LD_ADDR_VAR 0 5
41507: PUSH
41508: EMPTY
41509: ST_TO_ADDR
// for i = 16 to 25 do
41510: LD_ADDR_VAR 0 4
41514: PUSH
41515: DOUBLE
41516: LD_INT 16
41518: DEC
41519: ST_TO_ADDR
41520: LD_INT 25
41522: PUSH
41523: FOR_TO
41524: IFFALSE 41597
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41526: LD_ADDR_VAR 0 3
41530: PUSH
41531: LD_VAR 0 3
41535: PUSH
41536: LD_INT 22
41538: PUSH
41539: LD_VAR 0 1
41543: PPUSH
41544: CALL_OW 255
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 91
41555: PUSH
41556: LD_VAR 0 1
41560: PUSH
41561: LD_INT 6
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 30
41571: PUSH
41572: LD_VAR 0 4
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: LIST
41585: PUSH
41586: EMPTY
41587: LIST
41588: PPUSH
41589: CALL_OW 69
41593: ADD
41594: ST_TO_ADDR
41595: GO 41523
41597: POP
41598: POP
// for i = 1 to tmp do
41599: LD_ADDR_VAR 0 4
41603: PUSH
41604: DOUBLE
41605: LD_INT 1
41607: DEC
41608: ST_TO_ADDR
41609: LD_VAR 0 3
41613: PUSH
41614: FOR_TO
41615: IFFALSE 41703
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41617: LD_ADDR_VAR 0 5
41621: PUSH
41622: LD_VAR 0 5
41626: PUSH
41627: LD_VAR 0 3
41631: PUSH
41632: LD_VAR 0 4
41636: ARRAY
41637: PPUSH
41638: CALL_OW 266
41642: PUSH
41643: LD_VAR 0 3
41647: PUSH
41648: LD_VAR 0 4
41652: ARRAY
41653: PPUSH
41654: CALL_OW 250
41658: PUSH
41659: LD_VAR 0 3
41663: PUSH
41664: LD_VAR 0 4
41668: ARRAY
41669: PPUSH
41670: CALL_OW 251
41674: PUSH
41675: LD_VAR 0 3
41679: PUSH
41680: LD_VAR 0 4
41684: ARRAY
41685: PPUSH
41686: CALL_OW 254
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: PUSH
41697: EMPTY
41698: LIST
41699: ADD
41700: ST_TO_ADDR
41701: GO 41614
41703: POP
41704: POP
// result := list ;
41705: LD_ADDR_VAR 0 2
41709: PUSH
41710: LD_VAR 0 5
41714: ST_TO_ADDR
// end ;
41715: LD_VAR 0 2
41719: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41720: LD_INT 0
41722: PPUSH
41723: PPUSH
41724: PPUSH
41725: PPUSH
41726: PPUSH
41727: PPUSH
41728: PPUSH
// if not factory then
41729: LD_VAR 0 1
41733: NOT
41734: IFFALSE 41738
// exit ;
41736: GO 42331
// if control = control_apeman then
41738: LD_VAR 0 4
41742: PUSH
41743: LD_INT 5
41745: EQUAL
41746: IFFALSE 41855
// begin tmp := UnitsInside ( factory ) ;
41748: LD_ADDR_VAR 0 8
41752: PUSH
41753: LD_VAR 0 1
41757: PPUSH
41758: CALL_OW 313
41762: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41763: LD_VAR 0 8
41767: PPUSH
41768: LD_INT 25
41770: PUSH
41771: LD_INT 12
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PPUSH
41778: CALL_OW 72
41782: NOT
41783: IFFALSE 41793
// control := control_manual ;
41785: LD_ADDR_VAR 0 4
41789: PUSH
41790: LD_INT 1
41792: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41793: LD_ADDR_VAR 0 8
41797: PUSH
41798: LD_VAR 0 1
41802: PPUSH
41803: CALL 41490 0 1
41807: ST_TO_ADDR
// if tmp then
41808: LD_VAR 0 8
41812: IFFALSE 41855
// begin for i in tmp do
41814: LD_ADDR_VAR 0 7
41818: PUSH
41819: LD_VAR 0 8
41823: PUSH
41824: FOR_IN
41825: IFFALSE 41853
// if i [ 1 ] = b_ext_radio then
41827: LD_VAR 0 7
41831: PUSH
41832: LD_INT 1
41834: ARRAY
41835: PUSH
41836: LD_INT 22
41838: EQUAL
41839: IFFALSE 41851
// begin control := control_remote ;
41841: LD_ADDR_VAR 0 4
41845: PUSH
41846: LD_INT 2
41848: ST_TO_ADDR
// break ;
41849: GO 41853
// end ;
41851: GO 41824
41853: POP
41854: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41855: LD_VAR 0 1
41859: PPUSH
41860: LD_VAR 0 2
41864: PPUSH
41865: LD_VAR 0 3
41869: PPUSH
41870: LD_VAR 0 4
41874: PPUSH
41875: LD_VAR 0 5
41879: PPUSH
41880: CALL_OW 448
41884: IFFALSE 41919
// begin result := [ chassis , engine , control , weapon ] ;
41886: LD_ADDR_VAR 0 6
41890: PUSH
41891: LD_VAR 0 2
41895: PUSH
41896: LD_VAR 0 3
41900: PUSH
41901: LD_VAR 0 4
41905: PUSH
41906: LD_VAR 0 5
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: ST_TO_ADDR
// exit ;
41917: GO 42331
// end ; _chassis := AvailableChassisList ( factory ) ;
41919: LD_ADDR_VAR 0 9
41923: PUSH
41924: LD_VAR 0 1
41928: PPUSH
41929: CALL_OW 475
41933: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41934: LD_ADDR_VAR 0 11
41938: PUSH
41939: LD_VAR 0 1
41943: PPUSH
41944: CALL_OW 476
41948: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41949: LD_ADDR_VAR 0 12
41953: PUSH
41954: LD_VAR 0 1
41958: PPUSH
41959: CALL_OW 477
41963: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41964: LD_ADDR_VAR 0 10
41968: PUSH
41969: LD_VAR 0 1
41973: PPUSH
41974: CALL_OW 478
41978: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41979: LD_VAR 0 9
41983: NOT
41984: PUSH
41985: LD_VAR 0 11
41989: NOT
41990: OR
41991: PUSH
41992: LD_VAR 0 12
41996: NOT
41997: OR
41998: PUSH
41999: LD_VAR 0 10
42003: NOT
42004: OR
42005: IFFALSE 42040
// begin result := [ chassis , engine , control , weapon ] ;
42007: LD_ADDR_VAR 0 6
42011: PUSH
42012: LD_VAR 0 2
42016: PUSH
42017: LD_VAR 0 3
42021: PUSH
42022: LD_VAR 0 4
42026: PUSH
42027: LD_VAR 0 5
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: ST_TO_ADDR
// exit ;
42038: GO 42331
// end ; if not chassis in _chassis then
42040: LD_VAR 0 2
42044: PUSH
42045: LD_VAR 0 9
42049: IN
42050: NOT
42051: IFFALSE 42077
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42053: LD_ADDR_VAR 0 2
42057: PUSH
42058: LD_VAR 0 9
42062: PUSH
42063: LD_INT 1
42065: PPUSH
42066: LD_VAR 0 9
42070: PPUSH
42071: CALL_OW 12
42075: ARRAY
42076: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42077: LD_VAR 0 2
42081: PPUSH
42082: LD_VAR 0 3
42086: PPUSH
42087: CALL 42336 0 2
42091: NOT
42092: IFFALSE 42151
// repeat engine := _engine [ 1 ] ;
42094: LD_ADDR_VAR 0 3
42098: PUSH
42099: LD_VAR 0 11
42103: PUSH
42104: LD_INT 1
42106: ARRAY
42107: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42108: LD_ADDR_VAR 0 11
42112: PUSH
42113: LD_VAR 0 11
42117: PPUSH
42118: LD_INT 1
42120: PPUSH
42121: CALL_OW 3
42125: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42126: LD_VAR 0 2
42130: PPUSH
42131: LD_VAR 0 3
42135: PPUSH
42136: CALL 42336 0 2
42140: PUSH
42141: LD_VAR 0 11
42145: PUSH
42146: EMPTY
42147: EQUAL
42148: OR
42149: IFFALSE 42094
// if not control in _control then
42151: LD_VAR 0 4
42155: PUSH
42156: LD_VAR 0 12
42160: IN
42161: NOT
42162: IFFALSE 42188
// control := _control [ rand ( 1 , _control ) ] ;
42164: LD_ADDR_VAR 0 4
42168: PUSH
42169: LD_VAR 0 12
42173: PUSH
42174: LD_INT 1
42176: PPUSH
42177: LD_VAR 0 12
42181: PPUSH
42182: CALL_OW 12
42186: ARRAY
42187: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42188: LD_VAR 0 2
42192: PPUSH
42193: LD_VAR 0 5
42197: PPUSH
42198: CALL 42556 0 2
42202: NOT
42203: IFFALSE 42262
// repeat weapon := _weapon [ 1 ] ;
42205: LD_ADDR_VAR 0 5
42209: PUSH
42210: LD_VAR 0 10
42214: PUSH
42215: LD_INT 1
42217: ARRAY
42218: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42219: LD_ADDR_VAR 0 10
42223: PUSH
42224: LD_VAR 0 10
42228: PPUSH
42229: LD_INT 1
42231: PPUSH
42232: CALL_OW 3
42236: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42237: LD_VAR 0 2
42241: PPUSH
42242: LD_VAR 0 5
42246: PPUSH
42247: CALL 42556 0 2
42251: PUSH
42252: LD_VAR 0 10
42256: PUSH
42257: EMPTY
42258: EQUAL
42259: OR
42260: IFFALSE 42205
// result := [ ] ;
42262: LD_ADDR_VAR 0 6
42266: PUSH
42267: EMPTY
42268: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42269: LD_VAR 0 1
42273: PPUSH
42274: LD_VAR 0 2
42278: PPUSH
42279: LD_VAR 0 3
42283: PPUSH
42284: LD_VAR 0 4
42288: PPUSH
42289: LD_VAR 0 5
42293: PPUSH
42294: CALL_OW 448
42298: IFFALSE 42331
// result := [ chassis , engine , control , weapon ] ;
42300: LD_ADDR_VAR 0 6
42304: PUSH
42305: LD_VAR 0 2
42309: PUSH
42310: LD_VAR 0 3
42314: PUSH
42315: LD_VAR 0 4
42319: PUSH
42320: LD_VAR 0 5
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: ST_TO_ADDR
// end ;
42331: LD_VAR 0 6
42335: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42336: LD_INT 0
42338: PPUSH
// if not chassis or not engine then
42339: LD_VAR 0 1
42343: NOT
42344: PUSH
42345: LD_VAR 0 2
42349: NOT
42350: OR
42351: IFFALSE 42355
// exit ;
42353: GO 42551
// case engine of engine_solar :
42355: LD_VAR 0 2
42359: PUSH
42360: LD_INT 2
42362: DOUBLE
42363: EQUAL
42364: IFTRUE 42368
42366: GO 42406
42368: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42369: LD_ADDR_VAR 0 3
42373: PUSH
42374: LD_INT 11
42376: PUSH
42377: LD_INT 12
42379: PUSH
42380: LD_INT 13
42382: PUSH
42383: LD_INT 14
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: LD_INT 2
42391: PUSH
42392: LD_INT 3
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: ST_TO_ADDR
42404: GO 42535
42406: LD_INT 1
42408: DOUBLE
42409: EQUAL
42410: IFTRUE 42414
42412: GO 42476
42414: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42415: LD_ADDR_VAR 0 3
42419: PUSH
42420: LD_INT 11
42422: PUSH
42423: LD_INT 12
42425: PUSH
42426: LD_INT 13
42428: PUSH
42429: LD_INT 14
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 2
42437: PUSH
42438: LD_INT 3
42440: PUSH
42441: LD_INT 4
42443: PUSH
42444: LD_INT 5
42446: PUSH
42447: LD_INT 21
42449: PUSH
42450: LD_INT 23
42452: PUSH
42453: LD_INT 22
42455: PUSH
42456: LD_INT 24
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: ST_TO_ADDR
42474: GO 42535
42476: LD_INT 3
42478: DOUBLE
42479: EQUAL
42480: IFTRUE 42484
42482: GO 42534
42484: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42485: LD_ADDR_VAR 0 3
42489: PUSH
42490: LD_INT 13
42492: PUSH
42493: LD_INT 14
42495: PUSH
42496: LD_INT 2
42498: PUSH
42499: LD_INT 3
42501: PUSH
42502: LD_INT 4
42504: PUSH
42505: LD_INT 5
42507: PUSH
42508: LD_INT 21
42510: PUSH
42511: LD_INT 22
42513: PUSH
42514: LD_INT 23
42516: PUSH
42517: LD_INT 24
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: ST_TO_ADDR
42532: GO 42535
42534: POP
// result := ( chassis in result ) ;
42535: LD_ADDR_VAR 0 3
42539: PUSH
42540: LD_VAR 0 1
42544: PUSH
42545: LD_VAR 0 3
42549: IN
42550: ST_TO_ADDR
// end ;
42551: LD_VAR 0 3
42555: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42556: LD_INT 0
42558: PPUSH
// if not chassis or not weapon then
42559: LD_VAR 0 1
42563: NOT
42564: PUSH
42565: LD_VAR 0 2
42569: NOT
42570: OR
42571: IFFALSE 42575
// exit ;
42573: GO 43635
// case weapon of us_machine_gun :
42575: LD_VAR 0 2
42579: PUSH
42580: LD_INT 2
42582: DOUBLE
42583: EQUAL
42584: IFTRUE 42588
42586: GO 42618
42588: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42589: LD_ADDR_VAR 0 3
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: LD_INT 2
42599: PUSH
42600: LD_INT 3
42602: PUSH
42603: LD_INT 4
42605: PUSH
42606: LD_INT 5
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: ST_TO_ADDR
42616: GO 43619
42618: LD_INT 3
42620: DOUBLE
42621: EQUAL
42622: IFTRUE 42626
42624: GO 42656
42626: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42627: LD_ADDR_VAR 0 3
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: LD_INT 2
42637: PUSH
42638: LD_INT 3
42640: PUSH
42641: LD_INT 4
42643: PUSH
42644: LD_INT 5
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: ST_TO_ADDR
42654: GO 43619
42656: LD_INT 11
42658: DOUBLE
42659: EQUAL
42660: IFTRUE 42664
42662: GO 42694
42664: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42665: LD_ADDR_VAR 0 3
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: LD_INT 2
42675: PUSH
42676: LD_INT 3
42678: PUSH
42679: LD_INT 4
42681: PUSH
42682: LD_INT 5
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: ST_TO_ADDR
42692: GO 43619
42694: LD_INT 4
42696: DOUBLE
42697: EQUAL
42698: IFTRUE 42702
42700: GO 42728
42702: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42703: LD_ADDR_VAR 0 3
42707: PUSH
42708: LD_INT 2
42710: PUSH
42711: LD_INT 3
42713: PUSH
42714: LD_INT 4
42716: PUSH
42717: LD_INT 5
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: ST_TO_ADDR
42726: GO 43619
42728: LD_INT 5
42730: DOUBLE
42731: EQUAL
42732: IFTRUE 42736
42734: GO 42762
42736: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42737: LD_ADDR_VAR 0 3
42741: PUSH
42742: LD_INT 2
42744: PUSH
42745: LD_INT 3
42747: PUSH
42748: LD_INT 4
42750: PUSH
42751: LD_INT 5
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: ST_TO_ADDR
42760: GO 43619
42762: LD_INT 9
42764: DOUBLE
42765: EQUAL
42766: IFTRUE 42770
42768: GO 42796
42770: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42771: LD_ADDR_VAR 0 3
42775: PUSH
42776: LD_INT 2
42778: PUSH
42779: LD_INT 3
42781: PUSH
42782: LD_INT 4
42784: PUSH
42785: LD_INT 5
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: ST_TO_ADDR
42794: GO 43619
42796: LD_INT 7
42798: DOUBLE
42799: EQUAL
42800: IFTRUE 42804
42802: GO 42830
42804: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42805: LD_ADDR_VAR 0 3
42809: PUSH
42810: LD_INT 2
42812: PUSH
42813: LD_INT 3
42815: PUSH
42816: LD_INT 4
42818: PUSH
42819: LD_INT 5
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: ST_TO_ADDR
42828: GO 43619
42830: LD_INT 12
42832: DOUBLE
42833: EQUAL
42834: IFTRUE 42838
42836: GO 42864
42838: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42839: LD_ADDR_VAR 0 3
42843: PUSH
42844: LD_INT 2
42846: PUSH
42847: LD_INT 3
42849: PUSH
42850: LD_INT 4
42852: PUSH
42853: LD_INT 5
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: ST_TO_ADDR
42862: GO 43619
42864: LD_INT 13
42866: DOUBLE
42867: EQUAL
42868: IFTRUE 42872
42870: GO 42898
42872: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42873: LD_ADDR_VAR 0 3
42877: PUSH
42878: LD_INT 2
42880: PUSH
42881: LD_INT 3
42883: PUSH
42884: LD_INT 4
42886: PUSH
42887: LD_INT 5
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: ST_TO_ADDR
42896: GO 43619
42898: LD_INT 14
42900: DOUBLE
42901: EQUAL
42902: IFTRUE 42906
42904: GO 42924
42906: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42907: LD_ADDR_VAR 0 3
42911: PUSH
42912: LD_INT 4
42914: PUSH
42915: LD_INT 5
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: ST_TO_ADDR
42922: GO 43619
42924: LD_INT 6
42926: DOUBLE
42927: EQUAL
42928: IFTRUE 42932
42930: GO 42950
42932: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42933: LD_ADDR_VAR 0 3
42937: PUSH
42938: LD_INT 4
42940: PUSH
42941: LD_INT 5
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: ST_TO_ADDR
42948: GO 43619
42950: LD_INT 10
42952: DOUBLE
42953: EQUAL
42954: IFTRUE 42958
42956: GO 42976
42958: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42959: LD_ADDR_VAR 0 3
42963: PUSH
42964: LD_INT 4
42966: PUSH
42967: LD_INT 5
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: ST_TO_ADDR
42974: GO 43619
42976: LD_INT 22
42978: DOUBLE
42979: EQUAL
42980: IFTRUE 42984
42982: GO 43010
42984: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42985: LD_ADDR_VAR 0 3
42989: PUSH
42990: LD_INT 11
42992: PUSH
42993: LD_INT 12
42995: PUSH
42996: LD_INT 13
42998: PUSH
42999: LD_INT 14
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: ST_TO_ADDR
43008: GO 43619
43010: LD_INT 23
43012: DOUBLE
43013: EQUAL
43014: IFTRUE 43018
43016: GO 43044
43018: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43019: LD_ADDR_VAR 0 3
43023: PUSH
43024: LD_INT 11
43026: PUSH
43027: LD_INT 12
43029: PUSH
43030: LD_INT 13
43032: PUSH
43033: LD_INT 14
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: ST_TO_ADDR
43042: GO 43619
43044: LD_INT 24
43046: DOUBLE
43047: EQUAL
43048: IFTRUE 43052
43050: GO 43078
43052: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43053: LD_ADDR_VAR 0 3
43057: PUSH
43058: LD_INT 11
43060: PUSH
43061: LD_INT 12
43063: PUSH
43064: LD_INT 13
43066: PUSH
43067: LD_INT 14
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: ST_TO_ADDR
43076: GO 43619
43078: LD_INT 30
43080: DOUBLE
43081: EQUAL
43082: IFTRUE 43086
43084: GO 43112
43086: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43087: LD_ADDR_VAR 0 3
43091: PUSH
43092: LD_INT 11
43094: PUSH
43095: LD_INT 12
43097: PUSH
43098: LD_INT 13
43100: PUSH
43101: LD_INT 14
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: ST_TO_ADDR
43110: GO 43619
43112: LD_INT 25
43114: DOUBLE
43115: EQUAL
43116: IFTRUE 43120
43118: GO 43138
43120: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43121: LD_ADDR_VAR 0 3
43125: PUSH
43126: LD_INT 13
43128: PUSH
43129: LD_INT 14
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: ST_TO_ADDR
43136: GO 43619
43138: LD_INT 27
43140: DOUBLE
43141: EQUAL
43142: IFTRUE 43146
43144: GO 43164
43146: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43147: LD_ADDR_VAR 0 3
43151: PUSH
43152: LD_INT 13
43154: PUSH
43155: LD_INT 14
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: ST_TO_ADDR
43162: GO 43619
43164: LD_INT 92
43166: DOUBLE
43167: EQUAL
43168: IFTRUE 43172
43170: GO 43198
43172: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43173: LD_ADDR_VAR 0 3
43177: PUSH
43178: LD_INT 11
43180: PUSH
43181: LD_INT 12
43183: PUSH
43184: LD_INT 13
43186: PUSH
43187: LD_INT 14
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: ST_TO_ADDR
43196: GO 43619
43198: LD_INT 28
43200: DOUBLE
43201: EQUAL
43202: IFTRUE 43206
43204: GO 43224
43206: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43207: LD_ADDR_VAR 0 3
43211: PUSH
43212: LD_INT 13
43214: PUSH
43215: LD_INT 14
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: ST_TO_ADDR
43222: GO 43619
43224: LD_INT 29
43226: DOUBLE
43227: EQUAL
43228: IFTRUE 43232
43230: GO 43250
43232: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43233: LD_ADDR_VAR 0 3
43237: PUSH
43238: LD_INT 13
43240: PUSH
43241: LD_INT 14
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: ST_TO_ADDR
43248: GO 43619
43250: LD_INT 31
43252: DOUBLE
43253: EQUAL
43254: IFTRUE 43258
43256: GO 43276
43258: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43259: LD_ADDR_VAR 0 3
43263: PUSH
43264: LD_INT 13
43266: PUSH
43267: LD_INT 14
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: ST_TO_ADDR
43274: GO 43619
43276: LD_INT 26
43278: DOUBLE
43279: EQUAL
43280: IFTRUE 43284
43282: GO 43302
43284: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43285: LD_ADDR_VAR 0 3
43289: PUSH
43290: LD_INT 13
43292: PUSH
43293: LD_INT 14
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: ST_TO_ADDR
43300: GO 43619
43302: LD_INT 42
43304: DOUBLE
43305: EQUAL
43306: IFTRUE 43310
43308: GO 43336
43310: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43311: LD_ADDR_VAR 0 3
43315: PUSH
43316: LD_INT 21
43318: PUSH
43319: LD_INT 22
43321: PUSH
43322: LD_INT 23
43324: PUSH
43325: LD_INT 24
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: ST_TO_ADDR
43334: GO 43619
43336: LD_INT 43
43338: DOUBLE
43339: EQUAL
43340: IFTRUE 43344
43342: GO 43370
43344: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43345: LD_ADDR_VAR 0 3
43349: PUSH
43350: LD_INT 21
43352: PUSH
43353: LD_INT 22
43355: PUSH
43356: LD_INT 23
43358: PUSH
43359: LD_INT 24
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: ST_TO_ADDR
43368: GO 43619
43370: LD_INT 44
43372: DOUBLE
43373: EQUAL
43374: IFTRUE 43378
43376: GO 43404
43378: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43379: LD_ADDR_VAR 0 3
43383: PUSH
43384: LD_INT 21
43386: PUSH
43387: LD_INT 22
43389: PUSH
43390: LD_INT 23
43392: PUSH
43393: LD_INT 24
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: ST_TO_ADDR
43402: GO 43619
43404: LD_INT 45
43406: DOUBLE
43407: EQUAL
43408: IFTRUE 43412
43410: GO 43438
43412: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43413: LD_ADDR_VAR 0 3
43417: PUSH
43418: LD_INT 21
43420: PUSH
43421: LD_INT 22
43423: PUSH
43424: LD_INT 23
43426: PUSH
43427: LD_INT 24
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: ST_TO_ADDR
43436: GO 43619
43438: LD_INT 49
43440: DOUBLE
43441: EQUAL
43442: IFTRUE 43446
43444: GO 43472
43446: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43447: LD_ADDR_VAR 0 3
43451: PUSH
43452: LD_INT 21
43454: PUSH
43455: LD_INT 22
43457: PUSH
43458: LD_INT 23
43460: PUSH
43461: LD_INT 24
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: ST_TO_ADDR
43470: GO 43619
43472: LD_INT 51
43474: DOUBLE
43475: EQUAL
43476: IFTRUE 43480
43478: GO 43506
43480: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43481: LD_ADDR_VAR 0 3
43485: PUSH
43486: LD_INT 21
43488: PUSH
43489: LD_INT 22
43491: PUSH
43492: LD_INT 23
43494: PUSH
43495: LD_INT 24
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: ST_TO_ADDR
43504: GO 43619
43506: LD_INT 52
43508: DOUBLE
43509: EQUAL
43510: IFTRUE 43514
43512: GO 43540
43514: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43515: LD_ADDR_VAR 0 3
43519: PUSH
43520: LD_INT 21
43522: PUSH
43523: LD_INT 22
43525: PUSH
43526: LD_INT 23
43528: PUSH
43529: LD_INT 24
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: ST_TO_ADDR
43538: GO 43619
43540: LD_INT 53
43542: DOUBLE
43543: EQUAL
43544: IFTRUE 43548
43546: GO 43566
43548: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43549: LD_ADDR_VAR 0 3
43553: PUSH
43554: LD_INT 23
43556: PUSH
43557: LD_INT 24
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: ST_TO_ADDR
43564: GO 43619
43566: LD_INT 46
43568: DOUBLE
43569: EQUAL
43570: IFTRUE 43574
43572: GO 43592
43574: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43575: LD_ADDR_VAR 0 3
43579: PUSH
43580: LD_INT 23
43582: PUSH
43583: LD_INT 24
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: ST_TO_ADDR
43590: GO 43619
43592: LD_INT 47
43594: DOUBLE
43595: EQUAL
43596: IFTRUE 43600
43598: GO 43618
43600: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43601: LD_ADDR_VAR 0 3
43605: PUSH
43606: LD_INT 23
43608: PUSH
43609: LD_INT 24
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: ST_TO_ADDR
43616: GO 43619
43618: POP
// result := ( chassis in result ) ;
43619: LD_ADDR_VAR 0 3
43623: PUSH
43624: LD_VAR 0 1
43628: PUSH
43629: LD_VAR 0 3
43633: IN
43634: ST_TO_ADDR
// end ;
43635: LD_VAR 0 3
43639: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43640: LD_INT 0
43642: PPUSH
43643: PPUSH
43644: PPUSH
43645: PPUSH
43646: PPUSH
43647: PPUSH
43648: PPUSH
// result := array ;
43649: LD_ADDR_VAR 0 5
43653: PUSH
43654: LD_VAR 0 1
43658: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43659: LD_VAR 0 1
43663: NOT
43664: PUSH
43665: LD_VAR 0 2
43669: NOT
43670: OR
43671: PUSH
43672: LD_VAR 0 3
43676: NOT
43677: OR
43678: PUSH
43679: LD_VAR 0 2
43683: PUSH
43684: LD_VAR 0 1
43688: GREATER
43689: OR
43690: PUSH
43691: LD_VAR 0 3
43695: PUSH
43696: LD_VAR 0 1
43700: GREATER
43701: OR
43702: IFFALSE 43706
// exit ;
43704: GO 44002
// if direction then
43706: LD_VAR 0 4
43710: IFFALSE 43774
// begin d := 1 ;
43712: LD_ADDR_VAR 0 9
43716: PUSH
43717: LD_INT 1
43719: ST_TO_ADDR
// if i_from > i_to then
43720: LD_VAR 0 2
43724: PUSH
43725: LD_VAR 0 3
43729: GREATER
43730: IFFALSE 43756
// length := ( array - i_from ) + i_to else
43732: LD_ADDR_VAR 0 11
43736: PUSH
43737: LD_VAR 0 1
43741: PUSH
43742: LD_VAR 0 2
43746: MINUS
43747: PUSH
43748: LD_VAR 0 3
43752: PLUS
43753: ST_TO_ADDR
43754: GO 43772
// length := i_to - i_from ;
43756: LD_ADDR_VAR 0 11
43760: PUSH
43761: LD_VAR 0 3
43765: PUSH
43766: LD_VAR 0 2
43770: MINUS
43771: ST_TO_ADDR
// end else
43772: GO 43835
// begin d := - 1 ;
43774: LD_ADDR_VAR 0 9
43778: PUSH
43779: LD_INT 1
43781: NEG
43782: ST_TO_ADDR
// if i_from > i_to then
43783: LD_VAR 0 2
43787: PUSH
43788: LD_VAR 0 3
43792: GREATER
43793: IFFALSE 43813
// length := i_from - i_to else
43795: LD_ADDR_VAR 0 11
43799: PUSH
43800: LD_VAR 0 2
43804: PUSH
43805: LD_VAR 0 3
43809: MINUS
43810: ST_TO_ADDR
43811: GO 43835
// length := ( array - i_to ) + i_from ;
43813: LD_ADDR_VAR 0 11
43817: PUSH
43818: LD_VAR 0 1
43822: PUSH
43823: LD_VAR 0 3
43827: MINUS
43828: PUSH
43829: LD_VAR 0 2
43833: PLUS
43834: ST_TO_ADDR
// end ; if not length then
43835: LD_VAR 0 11
43839: NOT
43840: IFFALSE 43844
// exit ;
43842: GO 44002
// tmp := array ;
43844: LD_ADDR_VAR 0 10
43848: PUSH
43849: LD_VAR 0 1
43853: ST_TO_ADDR
// for i = 1 to length do
43854: LD_ADDR_VAR 0 6
43858: PUSH
43859: DOUBLE
43860: LD_INT 1
43862: DEC
43863: ST_TO_ADDR
43864: LD_VAR 0 11
43868: PUSH
43869: FOR_TO
43870: IFFALSE 43990
// begin for j = 1 to array do
43872: LD_ADDR_VAR 0 7
43876: PUSH
43877: DOUBLE
43878: LD_INT 1
43880: DEC
43881: ST_TO_ADDR
43882: LD_VAR 0 1
43886: PUSH
43887: FOR_TO
43888: IFFALSE 43976
// begin k := j + d ;
43890: LD_ADDR_VAR 0 8
43894: PUSH
43895: LD_VAR 0 7
43899: PUSH
43900: LD_VAR 0 9
43904: PLUS
43905: ST_TO_ADDR
// if k > array then
43906: LD_VAR 0 8
43910: PUSH
43911: LD_VAR 0 1
43915: GREATER
43916: IFFALSE 43926
// k := 1 ;
43918: LD_ADDR_VAR 0 8
43922: PUSH
43923: LD_INT 1
43925: ST_TO_ADDR
// if not k then
43926: LD_VAR 0 8
43930: NOT
43931: IFFALSE 43943
// k := array ;
43933: LD_ADDR_VAR 0 8
43937: PUSH
43938: LD_VAR 0 1
43942: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43943: LD_ADDR_VAR 0 10
43947: PUSH
43948: LD_VAR 0 10
43952: PPUSH
43953: LD_VAR 0 8
43957: PPUSH
43958: LD_VAR 0 1
43962: PUSH
43963: LD_VAR 0 7
43967: ARRAY
43968: PPUSH
43969: CALL_OW 1
43973: ST_TO_ADDR
// end ;
43974: GO 43887
43976: POP
43977: POP
// array := tmp ;
43978: LD_ADDR_VAR 0 1
43982: PUSH
43983: LD_VAR 0 10
43987: ST_TO_ADDR
// end ;
43988: GO 43869
43990: POP
43991: POP
// result := array ;
43992: LD_ADDR_VAR 0 5
43996: PUSH
43997: LD_VAR 0 1
44001: ST_TO_ADDR
// end ;
44002: LD_VAR 0 5
44006: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44007: LD_INT 0
44009: PPUSH
44010: PPUSH
// result := 0 ;
44011: LD_ADDR_VAR 0 3
44015: PUSH
44016: LD_INT 0
44018: ST_TO_ADDR
// if not array or not value in array then
44019: LD_VAR 0 1
44023: NOT
44024: PUSH
44025: LD_VAR 0 2
44029: PUSH
44030: LD_VAR 0 1
44034: IN
44035: NOT
44036: OR
44037: IFFALSE 44041
// exit ;
44039: GO 44095
// for i = 1 to array do
44041: LD_ADDR_VAR 0 4
44045: PUSH
44046: DOUBLE
44047: LD_INT 1
44049: DEC
44050: ST_TO_ADDR
44051: LD_VAR 0 1
44055: PUSH
44056: FOR_TO
44057: IFFALSE 44093
// if value = array [ i ] then
44059: LD_VAR 0 2
44063: PUSH
44064: LD_VAR 0 1
44068: PUSH
44069: LD_VAR 0 4
44073: ARRAY
44074: EQUAL
44075: IFFALSE 44091
// begin result := i ;
44077: LD_ADDR_VAR 0 3
44081: PUSH
44082: LD_VAR 0 4
44086: ST_TO_ADDR
// exit ;
44087: POP
44088: POP
44089: GO 44095
// end ;
44091: GO 44056
44093: POP
44094: POP
// end ;
44095: LD_VAR 0 3
44099: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44100: LD_INT 0
44102: PPUSH
// vc_chassis := chassis ;
44103: LD_ADDR_OWVAR 37
44107: PUSH
44108: LD_VAR 0 1
44112: ST_TO_ADDR
// vc_engine := engine ;
44113: LD_ADDR_OWVAR 39
44117: PUSH
44118: LD_VAR 0 2
44122: ST_TO_ADDR
// vc_control := control ;
44123: LD_ADDR_OWVAR 38
44127: PUSH
44128: LD_VAR 0 3
44132: ST_TO_ADDR
// vc_weapon := weapon ;
44133: LD_ADDR_OWVAR 40
44137: PUSH
44138: LD_VAR 0 4
44142: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44143: LD_ADDR_OWVAR 41
44147: PUSH
44148: LD_VAR 0 5
44152: ST_TO_ADDR
// end ;
44153: LD_VAR 0 6
44157: RET
// export function WantPlant ( unit ) ; var task ; begin
44158: LD_INT 0
44160: PPUSH
44161: PPUSH
// result := false ;
44162: LD_ADDR_VAR 0 2
44166: PUSH
44167: LD_INT 0
44169: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44170: LD_ADDR_VAR 0 3
44174: PUSH
44175: LD_VAR 0 1
44179: PPUSH
44180: CALL_OW 437
44184: ST_TO_ADDR
// if task then
44185: LD_VAR 0 3
44189: IFFALSE 44217
// if task [ 1 ] [ 1 ] = p then
44191: LD_VAR 0 3
44195: PUSH
44196: LD_INT 1
44198: ARRAY
44199: PUSH
44200: LD_INT 1
44202: ARRAY
44203: PUSH
44204: LD_STRING p
44206: EQUAL
44207: IFFALSE 44217
// result := true ;
44209: LD_ADDR_VAR 0 2
44213: PUSH
44214: LD_INT 1
44216: ST_TO_ADDR
// end ;
44217: LD_VAR 0 2
44221: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44222: LD_INT 0
44224: PPUSH
44225: PPUSH
44226: PPUSH
44227: PPUSH
// if pos < 1 then
44228: LD_VAR 0 2
44232: PUSH
44233: LD_INT 1
44235: LESS
44236: IFFALSE 44240
// exit ;
44238: GO 44543
// if pos = 1 then
44240: LD_VAR 0 2
44244: PUSH
44245: LD_INT 1
44247: EQUAL
44248: IFFALSE 44281
// result := Replace ( arr , pos [ 1 ] , value ) else
44250: LD_ADDR_VAR 0 4
44254: PUSH
44255: LD_VAR 0 1
44259: PPUSH
44260: LD_VAR 0 2
44264: PUSH
44265: LD_INT 1
44267: ARRAY
44268: PPUSH
44269: LD_VAR 0 3
44273: PPUSH
44274: CALL_OW 1
44278: ST_TO_ADDR
44279: GO 44543
// begin tmp := arr ;
44281: LD_ADDR_VAR 0 6
44285: PUSH
44286: LD_VAR 0 1
44290: ST_TO_ADDR
// s_arr := [ tmp ] ;
44291: LD_ADDR_VAR 0 7
44295: PUSH
44296: LD_VAR 0 6
44300: PUSH
44301: EMPTY
44302: LIST
44303: ST_TO_ADDR
// for i = 1 to pos - 1 do
44304: LD_ADDR_VAR 0 5
44308: PUSH
44309: DOUBLE
44310: LD_INT 1
44312: DEC
44313: ST_TO_ADDR
44314: LD_VAR 0 2
44318: PUSH
44319: LD_INT 1
44321: MINUS
44322: PUSH
44323: FOR_TO
44324: IFFALSE 44369
// begin tmp := tmp [ pos [ i ] ] ;
44326: LD_ADDR_VAR 0 6
44330: PUSH
44331: LD_VAR 0 6
44335: PUSH
44336: LD_VAR 0 2
44340: PUSH
44341: LD_VAR 0 5
44345: ARRAY
44346: ARRAY
44347: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44348: LD_ADDR_VAR 0 7
44352: PUSH
44353: LD_VAR 0 7
44357: PUSH
44358: LD_VAR 0 6
44362: PUSH
44363: EMPTY
44364: LIST
44365: ADD
44366: ST_TO_ADDR
// end ;
44367: GO 44323
44369: POP
44370: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44371: LD_ADDR_VAR 0 6
44375: PUSH
44376: LD_VAR 0 6
44380: PPUSH
44381: LD_VAR 0 2
44385: PUSH
44386: LD_VAR 0 2
44390: ARRAY
44391: PPUSH
44392: LD_VAR 0 3
44396: PPUSH
44397: CALL_OW 1
44401: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44402: LD_ADDR_VAR 0 7
44406: PUSH
44407: LD_VAR 0 7
44411: PPUSH
44412: LD_VAR 0 7
44416: PPUSH
44417: LD_VAR 0 6
44421: PPUSH
44422: CALL_OW 1
44426: ST_TO_ADDR
// for i = s_arr downto 2 do
44427: LD_ADDR_VAR 0 5
44431: PUSH
44432: DOUBLE
44433: LD_VAR 0 7
44437: INC
44438: ST_TO_ADDR
44439: LD_INT 2
44441: PUSH
44442: FOR_DOWNTO
44443: IFFALSE 44527
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44445: LD_ADDR_VAR 0 6
44449: PUSH
44450: LD_VAR 0 7
44454: PUSH
44455: LD_VAR 0 5
44459: PUSH
44460: LD_INT 1
44462: MINUS
44463: ARRAY
44464: PPUSH
44465: LD_VAR 0 2
44469: PUSH
44470: LD_VAR 0 5
44474: PUSH
44475: LD_INT 1
44477: MINUS
44478: ARRAY
44479: PPUSH
44480: LD_VAR 0 7
44484: PUSH
44485: LD_VAR 0 5
44489: ARRAY
44490: PPUSH
44491: CALL_OW 1
44495: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44496: LD_ADDR_VAR 0 7
44500: PUSH
44501: LD_VAR 0 7
44505: PPUSH
44506: LD_VAR 0 5
44510: PUSH
44511: LD_INT 1
44513: MINUS
44514: PPUSH
44515: LD_VAR 0 6
44519: PPUSH
44520: CALL_OW 1
44524: ST_TO_ADDR
// end ;
44525: GO 44442
44527: POP
44528: POP
// result := s_arr [ 1 ] ;
44529: LD_ADDR_VAR 0 4
44533: PUSH
44534: LD_VAR 0 7
44538: PUSH
44539: LD_INT 1
44541: ARRAY
44542: ST_TO_ADDR
// end ; end ;
44543: LD_VAR 0 4
44547: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44548: LD_INT 0
44550: PPUSH
44551: PPUSH
// if not list then
44552: LD_VAR 0 1
44556: NOT
44557: IFFALSE 44561
// exit ;
44559: GO 44652
// i := list [ pos1 ] ;
44561: LD_ADDR_VAR 0 5
44565: PUSH
44566: LD_VAR 0 1
44570: PUSH
44571: LD_VAR 0 2
44575: ARRAY
44576: ST_TO_ADDR
// if not i then
44577: LD_VAR 0 5
44581: NOT
44582: IFFALSE 44586
// exit ;
44584: GO 44652
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44586: LD_ADDR_VAR 0 1
44590: PUSH
44591: LD_VAR 0 1
44595: PPUSH
44596: LD_VAR 0 2
44600: PPUSH
44601: LD_VAR 0 1
44605: PUSH
44606: LD_VAR 0 3
44610: ARRAY
44611: PPUSH
44612: CALL_OW 1
44616: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44617: LD_ADDR_VAR 0 1
44621: PUSH
44622: LD_VAR 0 1
44626: PPUSH
44627: LD_VAR 0 3
44631: PPUSH
44632: LD_VAR 0 5
44636: PPUSH
44637: CALL_OW 1
44641: ST_TO_ADDR
// result := list ;
44642: LD_ADDR_VAR 0 4
44646: PUSH
44647: LD_VAR 0 1
44651: ST_TO_ADDR
// end ;
44652: LD_VAR 0 4
44656: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44657: LD_INT 0
44659: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44660: LD_ADDR_VAR 0 5
44664: PUSH
44665: LD_VAR 0 1
44669: PPUSH
44670: CALL_OW 250
44674: PPUSH
44675: LD_VAR 0 1
44679: PPUSH
44680: CALL_OW 251
44684: PPUSH
44685: LD_VAR 0 2
44689: PPUSH
44690: LD_VAR 0 3
44694: PPUSH
44695: LD_VAR 0 4
44699: PPUSH
44700: CALL 44710 0 5
44704: ST_TO_ADDR
// end ;
44705: LD_VAR 0 5
44709: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44710: LD_INT 0
44712: PPUSH
44713: PPUSH
44714: PPUSH
44715: PPUSH
// if not list then
44716: LD_VAR 0 3
44720: NOT
44721: IFFALSE 44725
// exit ;
44723: GO 45113
// result := [ ] ;
44725: LD_ADDR_VAR 0 6
44729: PUSH
44730: EMPTY
44731: ST_TO_ADDR
// for i in list do
44732: LD_ADDR_VAR 0 7
44736: PUSH
44737: LD_VAR 0 3
44741: PUSH
44742: FOR_IN
44743: IFFALSE 44945
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44745: LD_ADDR_VAR 0 9
44749: PUSH
44750: LD_VAR 0 7
44754: PPUSH
44755: LD_VAR 0 1
44759: PPUSH
44760: LD_VAR 0 2
44764: PPUSH
44765: CALL_OW 297
44769: ST_TO_ADDR
// if not result then
44770: LD_VAR 0 6
44774: NOT
44775: IFFALSE 44801
// result := [ [ i , tmp ] ] else
44777: LD_ADDR_VAR 0 6
44781: PUSH
44782: LD_VAR 0 7
44786: PUSH
44787: LD_VAR 0 9
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: EMPTY
44797: LIST
44798: ST_TO_ADDR
44799: GO 44943
// begin if result [ result ] [ 2 ] < tmp then
44801: LD_VAR 0 6
44805: PUSH
44806: LD_VAR 0 6
44810: ARRAY
44811: PUSH
44812: LD_INT 2
44814: ARRAY
44815: PUSH
44816: LD_VAR 0 9
44820: LESS
44821: IFFALSE 44863
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44823: LD_ADDR_VAR 0 6
44827: PUSH
44828: LD_VAR 0 6
44832: PPUSH
44833: LD_VAR 0 6
44837: PUSH
44838: LD_INT 1
44840: PLUS
44841: PPUSH
44842: LD_VAR 0 7
44846: PUSH
44847: LD_VAR 0 9
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PPUSH
44856: CALL_OW 2
44860: ST_TO_ADDR
44861: GO 44943
// for j = 1 to result do
44863: LD_ADDR_VAR 0 8
44867: PUSH
44868: DOUBLE
44869: LD_INT 1
44871: DEC
44872: ST_TO_ADDR
44873: LD_VAR 0 6
44877: PUSH
44878: FOR_TO
44879: IFFALSE 44941
// begin if tmp < result [ j ] [ 2 ] then
44881: LD_VAR 0 9
44885: PUSH
44886: LD_VAR 0 6
44890: PUSH
44891: LD_VAR 0 8
44895: ARRAY
44896: PUSH
44897: LD_INT 2
44899: ARRAY
44900: LESS
44901: IFFALSE 44939
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44903: LD_ADDR_VAR 0 6
44907: PUSH
44908: LD_VAR 0 6
44912: PPUSH
44913: LD_VAR 0 8
44917: PPUSH
44918: LD_VAR 0 7
44922: PUSH
44923: LD_VAR 0 9
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PPUSH
44932: CALL_OW 2
44936: ST_TO_ADDR
// break ;
44937: GO 44941
// end ; end ;
44939: GO 44878
44941: POP
44942: POP
// end ; end ;
44943: GO 44742
44945: POP
44946: POP
// if result and not asc then
44947: LD_VAR 0 6
44951: PUSH
44952: LD_VAR 0 4
44956: NOT
44957: AND
44958: IFFALSE 45033
// begin tmp := result ;
44960: LD_ADDR_VAR 0 9
44964: PUSH
44965: LD_VAR 0 6
44969: ST_TO_ADDR
// for i = tmp downto 1 do
44970: LD_ADDR_VAR 0 7
44974: PUSH
44975: DOUBLE
44976: LD_VAR 0 9
44980: INC
44981: ST_TO_ADDR
44982: LD_INT 1
44984: PUSH
44985: FOR_DOWNTO
44986: IFFALSE 45031
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44988: LD_ADDR_VAR 0 6
44992: PUSH
44993: LD_VAR 0 6
44997: PPUSH
44998: LD_VAR 0 9
45002: PUSH
45003: LD_VAR 0 7
45007: MINUS
45008: PUSH
45009: LD_INT 1
45011: PLUS
45012: PPUSH
45013: LD_VAR 0 9
45017: PUSH
45018: LD_VAR 0 7
45022: ARRAY
45023: PPUSH
45024: CALL_OW 1
45028: ST_TO_ADDR
45029: GO 44985
45031: POP
45032: POP
// end ; tmp := [ ] ;
45033: LD_ADDR_VAR 0 9
45037: PUSH
45038: EMPTY
45039: ST_TO_ADDR
// if mode then
45040: LD_VAR 0 5
45044: IFFALSE 45113
// begin for i = 1 to result do
45046: LD_ADDR_VAR 0 7
45050: PUSH
45051: DOUBLE
45052: LD_INT 1
45054: DEC
45055: ST_TO_ADDR
45056: LD_VAR 0 6
45060: PUSH
45061: FOR_TO
45062: IFFALSE 45101
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45064: LD_ADDR_VAR 0 9
45068: PUSH
45069: LD_VAR 0 9
45073: PPUSH
45074: LD_VAR 0 7
45078: PPUSH
45079: LD_VAR 0 6
45083: PUSH
45084: LD_VAR 0 7
45088: ARRAY
45089: PUSH
45090: LD_INT 1
45092: ARRAY
45093: PPUSH
45094: CALL_OW 1
45098: ST_TO_ADDR
45099: GO 45061
45101: POP
45102: POP
// result := tmp ;
45103: LD_ADDR_VAR 0 6
45107: PUSH
45108: LD_VAR 0 9
45112: ST_TO_ADDR
// end ; end ;
45113: LD_VAR 0 6
45117: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45118: LD_INT 0
45120: PPUSH
45121: PPUSH
45122: PPUSH
45123: PPUSH
45124: PPUSH
45125: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45126: LD_ADDR_VAR 0 5
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: ST_TO_ADDR
// if not x or not y then
45148: LD_VAR 0 2
45152: NOT
45153: PUSH
45154: LD_VAR 0 3
45158: NOT
45159: OR
45160: IFFALSE 45164
// exit ;
45162: GO 46814
// if not range then
45164: LD_VAR 0 4
45168: NOT
45169: IFFALSE 45179
// range := 10 ;
45171: LD_ADDR_VAR 0 4
45175: PUSH
45176: LD_INT 10
45178: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45179: LD_ADDR_VAR 0 8
45183: PUSH
45184: LD_INT 81
45186: PUSH
45187: LD_VAR 0 1
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 92
45198: PUSH
45199: LD_VAR 0 2
45203: PUSH
45204: LD_VAR 0 3
45208: PUSH
45209: LD_VAR 0 4
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 3
45222: PUSH
45223: LD_INT 21
45225: PUSH
45226: LD_INT 3
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: LIST
45241: PPUSH
45242: CALL_OW 69
45246: ST_TO_ADDR
// if not tmp then
45247: LD_VAR 0 8
45251: NOT
45252: IFFALSE 45256
// exit ;
45254: GO 46814
// for i in tmp do
45256: LD_ADDR_VAR 0 6
45260: PUSH
45261: LD_VAR 0 8
45265: PUSH
45266: FOR_IN
45267: IFFALSE 46789
// begin points := [ 0 , 0 , 0 ] ;
45269: LD_ADDR_VAR 0 9
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: LIST
45287: ST_TO_ADDR
// bpoints := 1 ;
45288: LD_ADDR_VAR 0 10
45292: PUSH
45293: LD_INT 1
45295: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45296: LD_VAR 0 6
45300: PPUSH
45301: CALL_OW 247
45305: PUSH
45306: LD_INT 1
45308: DOUBLE
45309: EQUAL
45310: IFTRUE 45314
45312: GO 45892
45314: POP
// begin if GetClass ( i ) = 1 then
45315: LD_VAR 0 6
45319: PPUSH
45320: CALL_OW 257
45324: PUSH
45325: LD_INT 1
45327: EQUAL
45328: IFFALSE 45349
// points := [ 10 , 5 , 3 ] ;
45330: LD_ADDR_VAR 0 9
45334: PUSH
45335: LD_INT 10
45337: PUSH
45338: LD_INT 5
45340: PUSH
45341: LD_INT 3
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: LIST
45348: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45349: LD_VAR 0 6
45353: PPUSH
45354: CALL_OW 257
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: LD_INT 3
45364: PUSH
45365: LD_INT 4
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: LIST
45372: IN
45373: IFFALSE 45394
// points := [ 3 , 2 , 1 ] ;
45375: LD_ADDR_VAR 0 9
45379: PUSH
45380: LD_INT 3
45382: PUSH
45383: LD_INT 2
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: LIST
45393: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45394: LD_VAR 0 6
45398: PPUSH
45399: CALL_OW 257
45403: PUSH
45404: LD_INT 5
45406: EQUAL
45407: IFFALSE 45428
// points := [ 130 , 5 , 2 ] ;
45409: LD_ADDR_VAR 0 9
45413: PUSH
45414: LD_INT 130
45416: PUSH
45417: LD_INT 5
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: LIST
45427: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45428: LD_VAR 0 6
45432: PPUSH
45433: CALL_OW 257
45437: PUSH
45438: LD_INT 8
45440: EQUAL
45441: IFFALSE 45462
// points := [ 35 , 35 , 30 ] ;
45443: LD_ADDR_VAR 0 9
45447: PUSH
45448: LD_INT 35
45450: PUSH
45451: LD_INT 35
45453: PUSH
45454: LD_INT 30
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: LIST
45461: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45462: LD_VAR 0 6
45466: PPUSH
45467: CALL_OW 257
45471: PUSH
45472: LD_INT 9
45474: EQUAL
45475: IFFALSE 45496
// points := [ 20 , 55 , 40 ] ;
45477: LD_ADDR_VAR 0 9
45481: PUSH
45482: LD_INT 20
45484: PUSH
45485: LD_INT 55
45487: PUSH
45488: LD_INT 40
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: LIST
45495: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45496: LD_VAR 0 6
45500: PPUSH
45501: CALL_OW 257
45505: PUSH
45506: LD_INT 12
45508: PUSH
45509: LD_INT 16
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: IN
45516: IFFALSE 45537
// points := [ 5 , 3 , 2 ] ;
45518: LD_ADDR_VAR 0 9
45522: PUSH
45523: LD_INT 5
45525: PUSH
45526: LD_INT 3
45528: PUSH
45529: LD_INT 2
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: LIST
45536: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45537: LD_VAR 0 6
45541: PPUSH
45542: CALL_OW 257
45546: PUSH
45547: LD_INT 17
45549: EQUAL
45550: IFFALSE 45571
// points := [ 100 , 50 , 75 ] ;
45552: LD_ADDR_VAR 0 9
45556: PUSH
45557: LD_INT 100
45559: PUSH
45560: LD_INT 50
45562: PUSH
45563: LD_INT 75
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: LIST
45570: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45571: LD_VAR 0 6
45575: PPUSH
45576: CALL_OW 257
45580: PUSH
45581: LD_INT 15
45583: EQUAL
45584: IFFALSE 45605
// points := [ 10 , 5 , 3 ] ;
45586: LD_ADDR_VAR 0 9
45590: PUSH
45591: LD_INT 10
45593: PUSH
45594: LD_INT 5
45596: PUSH
45597: LD_INT 3
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: LIST
45604: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45605: LD_VAR 0 6
45609: PPUSH
45610: CALL_OW 257
45614: PUSH
45615: LD_INT 14
45617: EQUAL
45618: IFFALSE 45639
// points := [ 10 , 0 , 0 ] ;
45620: LD_ADDR_VAR 0 9
45624: PUSH
45625: LD_INT 10
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: LIST
45638: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45639: LD_VAR 0 6
45643: PPUSH
45644: CALL_OW 257
45648: PUSH
45649: LD_INT 11
45651: EQUAL
45652: IFFALSE 45673
// points := [ 30 , 10 , 5 ] ;
45654: LD_ADDR_VAR 0 9
45658: PUSH
45659: LD_INT 30
45661: PUSH
45662: LD_INT 10
45664: PUSH
45665: LD_INT 5
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: LIST
45672: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45673: LD_VAR 0 1
45677: PPUSH
45678: LD_INT 5
45680: PPUSH
45681: CALL_OW 321
45685: PUSH
45686: LD_INT 2
45688: EQUAL
45689: IFFALSE 45706
// bpoints := bpoints * 1.8 ;
45691: LD_ADDR_VAR 0 10
45695: PUSH
45696: LD_VAR 0 10
45700: PUSH
45701: LD_REAL  1.80000000000000E+0000
45704: MUL
45705: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45706: LD_VAR 0 6
45710: PPUSH
45711: CALL_OW 257
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: LD_INT 3
45724: PUSH
45725: LD_INT 4
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: IN
45734: PUSH
45735: LD_VAR 0 1
45739: PPUSH
45740: LD_INT 51
45742: PPUSH
45743: CALL_OW 321
45747: PUSH
45748: LD_INT 2
45750: EQUAL
45751: AND
45752: IFFALSE 45769
// bpoints := bpoints * 1.2 ;
45754: LD_ADDR_VAR 0 10
45758: PUSH
45759: LD_VAR 0 10
45763: PUSH
45764: LD_REAL  1.20000000000000E+0000
45767: MUL
45768: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45769: LD_VAR 0 6
45773: PPUSH
45774: CALL_OW 257
45778: PUSH
45779: LD_INT 5
45781: PUSH
45782: LD_INT 7
45784: PUSH
45785: LD_INT 9
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: LIST
45792: IN
45793: PUSH
45794: LD_VAR 0 1
45798: PPUSH
45799: LD_INT 52
45801: PPUSH
45802: CALL_OW 321
45806: PUSH
45807: LD_INT 2
45809: EQUAL
45810: AND
45811: IFFALSE 45828
// bpoints := bpoints * 1.5 ;
45813: LD_ADDR_VAR 0 10
45817: PUSH
45818: LD_VAR 0 10
45822: PUSH
45823: LD_REAL  1.50000000000000E+0000
45826: MUL
45827: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45828: LD_VAR 0 1
45832: PPUSH
45833: LD_INT 66
45835: PPUSH
45836: CALL_OW 321
45840: PUSH
45841: LD_INT 2
45843: EQUAL
45844: IFFALSE 45861
// bpoints := bpoints * 1.1 ;
45846: LD_ADDR_VAR 0 10
45850: PUSH
45851: LD_VAR 0 10
45855: PUSH
45856: LD_REAL  1.10000000000000E+0000
45859: MUL
45860: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45861: LD_ADDR_VAR 0 10
45865: PUSH
45866: LD_VAR 0 10
45870: PUSH
45871: LD_VAR 0 6
45875: PPUSH
45876: LD_INT 1
45878: PPUSH
45879: CALL_OW 259
45883: PUSH
45884: LD_REAL  1.15000000000000E+0000
45887: MUL
45888: MUL
45889: ST_TO_ADDR
// end ; unit_vehicle :
45890: GO 46718
45892: LD_INT 2
45894: DOUBLE
45895: EQUAL
45896: IFTRUE 45900
45898: GO 46706
45900: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45901: LD_VAR 0 6
45905: PPUSH
45906: CALL_OW 264
45910: PUSH
45911: LD_INT 2
45913: PUSH
45914: LD_INT 42
45916: PUSH
45917: LD_INT 24
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: LIST
45924: IN
45925: IFFALSE 45946
// points := [ 25 , 5 , 3 ] ;
45927: LD_ADDR_VAR 0 9
45931: PUSH
45932: LD_INT 25
45934: PUSH
45935: LD_INT 5
45937: PUSH
45938: LD_INT 3
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: LIST
45945: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45946: LD_VAR 0 6
45950: PPUSH
45951: CALL_OW 264
45955: PUSH
45956: LD_INT 4
45958: PUSH
45959: LD_INT 43
45961: PUSH
45962: LD_INT 25
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: LIST
45969: IN
45970: IFFALSE 45991
// points := [ 40 , 15 , 5 ] ;
45972: LD_ADDR_VAR 0 9
45976: PUSH
45977: LD_INT 40
45979: PUSH
45980: LD_INT 15
45982: PUSH
45983: LD_INT 5
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: LIST
45990: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45991: LD_VAR 0 6
45995: PPUSH
45996: CALL_OW 264
46000: PUSH
46001: LD_INT 3
46003: PUSH
46004: LD_INT 23
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: IN
46011: IFFALSE 46032
// points := [ 7 , 25 , 8 ] ;
46013: LD_ADDR_VAR 0 9
46017: PUSH
46018: LD_INT 7
46020: PUSH
46021: LD_INT 25
46023: PUSH
46024: LD_INT 8
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: LIST
46031: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46032: LD_VAR 0 6
46036: PPUSH
46037: CALL_OW 264
46041: PUSH
46042: LD_INT 5
46044: PUSH
46045: LD_INT 27
46047: PUSH
46048: LD_INT 44
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: LIST
46055: IN
46056: IFFALSE 46077
// points := [ 14 , 50 , 16 ] ;
46058: LD_ADDR_VAR 0 9
46062: PUSH
46063: LD_INT 14
46065: PUSH
46066: LD_INT 50
46068: PUSH
46069: LD_INT 16
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: LIST
46076: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46077: LD_VAR 0 6
46081: PPUSH
46082: CALL_OW 264
46086: PUSH
46087: LD_INT 6
46089: PUSH
46090: LD_INT 46
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: IN
46097: IFFALSE 46118
// points := [ 32 , 120 , 70 ] ;
46099: LD_ADDR_VAR 0 9
46103: PUSH
46104: LD_INT 32
46106: PUSH
46107: LD_INT 120
46109: PUSH
46110: LD_INT 70
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: LIST
46117: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46118: LD_VAR 0 6
46122: PPUSH
46123: CALL_OW 264
46127: PUSH
46128: LD_INT 7
46130: PUSH
46131: LD_INT 28
46133: PUSH
46134: LD_INT 45
46136: PUSH
46137: LD_INT 92
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: IN
46146: IFFALSE 46167
// points := [ 35 , 20 , 45 ] ;
46148: LD_ADDR_VAR 0 9
46152: PUSH
46153: LD_INT 35
46155: PUSH
46156: LD_INT 20
46158: PUSH
46159: LD_INT 45
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: LIST
46166: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46167: LD_VAR 0 6
46171: PPUSH
46172: CALL_OW 264
46176: PUSH
46177: LD_INT 47
46179: PUSH
46180: EMPTY
46181: LIST
46182: IN
46183: IFFALSE 46204
// points := [ 67 , 45 , 75 ] ;
46185: LD_ADDR_VAR 0 9
46189: PUSH
46190: LD_INT 67
46192: PUSH
46193: LD_INT 45
46195: PUSH
46196: LD_INT 75
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: LIST
46203: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46204: LD_VAR 0 6
46208: PPUSH
46209: CALL_OW 264
46213: PUSH
46214: LD_INT 26
46216: PUSH
46217: EMPTY
46218: LIST
46219: IN
46220: IFFALSE 46241
// points := [ 120 , 30 , 80 ] ;
46222: LD_ADDR_VAR 0 9
46226: PUSH
46227: LD_INT 120
46229: PUSH
46230: LD_INT 30
46232: PUSH
46233: LD_INT 80
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46241: LD_VAR 0 6
46245: PPUSH
46246: CALL_OW 264
46250: PUSH
46251: LD_INT 22
46253: PUSH
46254: EMPTY
46255: LIST
46256: IN
46257: IFFALSE 46278
// points := [ 40 , 1 , 1 ] ;
46259: LD_ADDR_VAR 0 9
46263: PUSH
46264: LD_INT 40
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: LIST
46277: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46278: LD_VAR 0 6
46282: PPUSH
46283: CALL_OW 264
46287: PUSH
46288: LD_INT 29
46290: PUSH
46291: EMPTY
46292: LIST
46293: IN
46294: IFFALSE 46315
// points := [ 70 , 200 , 400 ] ;
46296: LD_ADDR_VAR 0 9
46300: PUSH
46301: LD_INT 70
46303: PUSH
46304: LD_INT 200
46306: PUSH
46307: LD_INT 400
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: LIST
46314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46315: LD_VAR 0 6
46319: PPUSH
46320: CALL_OW 264
46324: PUSH
46325: LD_INT 14
46327: PUSH
46328: LD_INT 53
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: IN
46335: IFFALSE 46356
// points := [ 40 , 10 , 20 ] ;
46337: LD_ADDR_VAR 0 9
46341: PUSH
46342: LD_INT 40
46344: PUSH
46345: LD_INT 10
46347: PUSH
46348: LD_INT 20
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: LIST
46355: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46356: LD_VAR 0 6
46360: PPUSH
46361: CALL_OW 264
46365: PUSH
46366: LD_INT 9
46368: PUSH
46369: EMPTY
46370: LIST
46371: IN
46372: IFFALSE 46393
// points := [ 5 , 70 , 20 ] ;
46374: LD_ADDR_VAR 0 9
46378: PUSH
46379: LD_INT 5
46381: PUSH
46382: LD_INT 70
46384: PUSH
46385: LD_INT 20
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: LIST
46392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46393: LD_VAR 0 6
46397: PPUSH
46398: CALL_OW 264
46402: PUSH
46403: LD_INT 10
46405: PUSH
46406: EMPTY
46407: LIST
46408: IN
46409: IFFALSE 46430
// points := [ 35 , 110 , 70 ] ;
46411: LD_ADDR_VAR 0 9
46415: PUSH
46416: LD_INT 35
46418: PUSH
46419: LD_INT 110
46421: PUSH
46422: LD_INT 70
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: LIST
46429: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46430: LD_VAR 0 6
46434: PPUSH
46435: CALL_OW 265
46439: PUSH
46440: LD_INT 25
46442: EQUAL
46443: IFFALSE 46464
// points := [ 80 , 65 , 100 ] ;
46445: LD_ADDR_VAR 0 9
46449: PUSH
46450: LD_INT 80
46452: PUSH
46453: LD_INT 65
46455: PUSH
46456: LD_INT 100
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: LIST
46463: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46464: LD_VAR 0 6
46468: PPUSH
46469: CALL_OW 263
46473: PUSH
46474: LD_INT 1
46476: EQUAL
46477: IFFALSE 46512
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46479: LD_ADDR_VAR 0 10
46483: PUSH
46484: LD_VAR 0 10
46488: PUSH
46489: LD_VAR 0 6
46493: PPUSH
46494: CALL_OW 311
46498: PPUSH
46499: LD_INT 3
46501: PPUSH
46502: CALL_OW 259
46506: PUSH
46507: LD_INT 4
46509: MUL
46510: MUL
46511: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46512: LD_VAR 0 6
46516: PPUSH
46517: CALL_OW 263
46521: PUSH
46522: LD_INT 2
46524: EQUAL
46525: IFFALSE 46576
// begin j := IsControledBy ( i ) ;
46527: LD_ADDR_VAR 0 7
46531: PUSH
46532: LD_VAR 0 6
46536: PPUSH
46537: CALL_OW 312
46541: ST_TO_ADDR
// if j then
46542: LD_VAR 0 7
46546: IFFALSE 46576
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46548: LD_ADDR_VAR 0 10
46552: PUSH
46553: LD_VAR 0 10
46557: PUSH
46558: LD_VAR 0 7
46562: PPUSH
46563: LD_INT 3
46565: PPUSH
46566: CALL_OW 259
46570: PUSH
46571: LD_INT 3
46573: MUL
46574: MUL
46575: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46576: LD_VAR 0 6
46580: PPUSH
46581: CALL_OW 264
46585: PUSH
46586: LD_INT 5
46588: PUSH
46589: LD_INT 6
46591: PUSH
46592: LD_INT 46
46594: PUSH
46595: LD_INT 44
46597: PUSH
46598: LD_INT 47
46600: PUSH
46601: LD_INT 45
46603: PUSH
46604: LD_INT 28
46606: PUSH
46607: LD_INT 7
46609: PUSH
46610: LD_INT 27
46612: PUSH
46613: LD_INT 29
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: IN
46628: PUSH
46629: LD_VAR 0 1
46633: PPUSH
46634: LD_INT 52
46636: PPUSH
46637: CALL_OW 321
46641: PUSH
46642: LD_INT 2
46644: EQUAL
46645: AND
46646: IFFALSE 46663
// bpoints := bpoints * 1.2 ;
46648: LD_ADDR_VAR 0 10
46652: PUSH
46653: LD_VAR 0 10
46657: PUSH
46658: LD_REAL  1.20000000000000E+0000
46661: MUL
46662: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46663: LD_VAR 0 6
46667: PPUSH
46668: CALL_OW 264
46672: PUSH
46673: LD_INT 6
46675: PUSH
46676: LD_INT 46
46678: PUSH
46679: LD_INT 47
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: LIST
46686: IN
46687: IFFALSE 46704
// bpoints := bpoints * 1.2 ;
46689: LD_ADDR_VAR 0 10
46693: PUSH
46694: LD_VAR 0 10
46698: PUSH
46699: LD_REAL  1.20000000000000E+0000
46702: MUL
46703: ST_TO_ADDR
// end ; unit_building :
46704: GO 46718
46706: LD_INT 3
46708: DOUBLE
46709: EQUAL
46710: IFTRUE 46714
46712: GO 46717
46714: POP
// ; end ;
46715: GO 46718
46717: POP
// for j = 1 to 3 do
46718: LD_ADDR_VAR 0 7
46722: PUSH
46723: DOUBLE
46724: LD_INT 1
46726: DEC
46727: ST_TO_ADDR
46728: LD_INT 3
46730: PUSH
46731: FOR_TO
46732: IFFALSE 46785
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46734: LD_ADDR_VAR 0 5
46738: PUSH
46739: LD_VAR 0 5
46743: PPUSH
46744: LD_VAR 0 7
46748: PPUSH
46749: LD_VAR 0 5
46753: PUSH
46754: LD_VAR 0 7
46758: ARRAY
46759: PUSH
46760: LD_VAR 0 9
46764: PUSH
46765: LD_VAR 0 7
46769: ARRAY
46770: PUSH
46771: LD_VAR 0 10
46775: MUL
46776: PLUS
46777: PPUSH
46778: CALL_OW 1
46782: ST_TO_ADDR
46783: GO 46731
46785: POP
46786: POP
// end ;
46787: GO 45266
46789: POP
46790: POP
// result := Replace ( result , 4 , tmp ) ;
46791: LD_ADDR_VAR 0 5
46795: PUSH
46796: LD_VAR 0 5
46800: PPUSH
46801: LD_INT 4
46803: PPUSH
46804: LD_VAR 0 8
46808: PPUSH
46809: CALL_OW 1
46813: ST_TO_ADDR
// end ;
46814: LD_VAR 0 5
46818: RET
// export function DangerAtRange ( unit , range ) ; begin
46819: LD_INT 0
46821: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46822: LD_ADDR_VAR 0 3
46826: PUSH
46827: LD_VAR 0 1
46831: PPUSH
46832: CALL_OW 255
46836: PPUSH
46837: LD_VAR 0 1
46841: PPUSH
46842: CALL_OW 250
46846: PPUSH
46847: LD_VAR 0 1
46851: PPUSH
46852: CALL_OW 251
46856: PPUSH
46857: LD_VAR 0 2
46861: PPUSH
46862: CALL 45118 0 4
46866: ST_TO_ADDR
// end ;
46867: LD_VAR 0 3
46871: RET
// export function DangerInArea ( side , area ) ; begin
46872: LD_INT 0
46874: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46875: LD_ADDR_VAR 0 3
46879: PUSH
46880: LD_VAR 0 2
46884: PPUSH
46885: LD_INT 81
46887: PUSH
46888: LD_VAR 0 1
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PPUSH
46897: CALL_OW 70
46901: ST_TO_ADDR
// end ;
46902: LD_VAR 0 3
46906: RET
// export function IsExtension ( b ) ; begin
46907: LD_INT 0
46909: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46910: LD_ADDR_VAR 0 2
46914: PUSH
46915: LD_VAR 0 1
46919: PUSH
46920: LD_INT 23
46922: PUSH
46923: LD_INT 20
46925: PUSH
46926: LD_INT 22
46928: PUSH
46929: LD_INT 17
46931: PUSH
46932: LD_INT 24
46934: PUSH
46935: LD_INT 21
46937: PUSH
46938: LD_INT 19
46940: PUSH
46941: LD_INT 16
46943: PUSH
46944: LD_INT 25
46946: PUSH
46947: LD_INT 18
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: IN
46962: ST_TO_ADDR
// end ;
46963: LD_VAR 0 2
46967: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46968: LD_INT 0
46970: PPUSH
46971: PPUSH
46972: PPUSH
// result := [ ] ;
46973: LD_ADDR_VAR 0 4
46977: PUSH
46978: EMPTY
46979: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46980: LD_ADDR_VAR 0 5
46984: PUSH
46985: LD_VAR 0 2
46989: PPUSH
46990: LD_INT 21
46992: PUSH
46993: LD_INT 3
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PPUSH
47000: CALL_OW 70
47004: ST_TO_ADDR
// if not tmp then
47005: LD_VAR 0 5
47009: NOT
47010: IFFALSE 47014
// exit ;
47012: GO 47078
// if checkLink then
47014: LD_VAR 0 3
47018: IFFALSE 47068
// begin for i in tmp do
47020: LD_ADDR_VAR 0 6
47024: PUSH
47025: LD_VAR 0 5
47029: PUSH
47030: FOR_IN
47031: IFFALSE 47066
// if GetBase ( i ) <> base then
47033: LD_VAR 0 6
47037: PPUSH
47038: CALL_OW 274
47042: PUSH
47043: LD_VAR 0 1
47047: NONEQUAL
47048: IFFALSE 47064
// ComLinkToBase ( base , i ) ;
47050: LD_VAR 0 1
47054: PPUSH
47055: LD_VAR 0 6
47059: PPUSH
47060: CALL_OW 169
47064: GO 47030
47066: POP
47067: POP
// end ; result := tmp ;
47068: LD_ADDR_VAR 0 4
47072: PUSH
47073: LD_VAR 0 5
47077: ST_TO_ADDR
// end ;
47078: LD_VAR 0 4
47082: RET
// export function ComComplete ( units , b ) ; var i ; begin
47083: LD_INT 0
47085: PPUSH
47086: PPUSH
// if not units then
47087: LD_VAR 0 1
47091: NOT
47092: IFFALSE 47096
// exit ;
47094: GO 47186
// for i in units do
47096: LD_ADDR_VAR 0 4
47100: PUSH
47101: LD_VAR 0 1
47105: PUSH
47106: FOR_IN
47107: IFFALSE 47184
// if BuildingStatus ( b ) = bs_build then
47109: LD_VAR 0 2
47113: PPUSH
47114: CALL_OW 461
47118: PUSH
47119: LD_INT 1
47121: EQUAL
47122: IFFALSE 47182
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47124: LD_VAR 0 4
47128: PPUSH
47129: LD_STRING h
47131: PUSH
47132: LD_VAR 0 2
47136: PPUSH
47137: CALL_OW 250
47141: PUSH
47142: LD_VAR 0 2
47146: PPUSH
47147: CALL_OW 251
47151: PUSH
47152: LD_VAR 0 2
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: PUSH
47175: EMPTY
47176: LIST
47177: PPUSH
47178: CALL_OW 446
47182: GO 47106
47184: POP
47185: POP
// end ;
47186: LD_VAR 0 3
47190: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47191: LD_INT 0
47193: PPUSH
47194: PPUSH
47195: PPUSH
47196: PPUSH
47197: PPUSH
47198: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47199: LD_VAR 0 1
47203: NOT
47204: PUSH
47205: LD_VAR 0 1
47209: PPUSH
47210: CALL_OW 263
47214: PUSH
47215: LD_INT 2
47217: NONEQUAL
47218: OR
47219: IFFALSE 47223
// exit ;
47221: GO 47539
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47223: LD_ADDR_VAR 0 6
47227: PUSH
47228: LD_INT 22
47230: PUSH
47231: LD_VAR 0 1
47235: PPUSH
47236: CALL_OW 255
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: LD_INT 30
47250: PUSH
47251: LD_INT 36
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 34
47260: PUSH
47261: LD_INT 31
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: LIST
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PPUSH
47277: CALL_OW 69
47281: ST_TO_ADDR
// if not tmp then
47282: LD_VAR 0 6
47286: NOT
47287: IFFALSE 47291
// exit ;
47289: GO 47539
// result := [ ] ;
47291: LD_ADDR_VAR 0 2
47295: PUSH
47296: EMPTY
47297: ST_TO_ADDR
// for i in tmp do
47298: LD_ADDR_VAR 0 3
47302: PUSH
47303: LD_VAR 0 6
47307: PUSH
47308: FOR_IN
47309: IFFALSE 47380
// begin t := UnitsInside ( i ) ;
47311: LD_ADDR_VAR 0 4
47315: PUSH
47316: LD_VAR 0 3
47320: PPUSH
47321: CALL_OW 313
47325: ST_TO_ADDR
// if t then
47326: LD_VAR 0 4
47330: IFFALSE 47378
// for j in t do
47332: LD_ADDR_VAR 0 7
47336: PUSH
47337: LD_VAR 0 4
47341: PUSH
47342: FOR_IN
47343: IFFALSE 47376
// result := Replace ( result , result + 1 , j ) ;
47345: LD_ADDR_VAR 0 2
47349: PUSH
47350: LD_VAR 0 2
47354: PPUSH
47355: LD_VAR 0 2
47359: PUSH
47360: LD_INT 1
47362: PLUS
47363: PPUSH
47364: LD_VAR 0 7
47368: PPUSH
47369: CALL_OW 1
47373: ST_TO_ADDR
47374: GO 47342
47376: POP
47377: POP
// end ;
47378: GO 47308
47380: POP
47381: POP
// if not result then
47382: LD_VAR 0 2
47386: NOT
47387: IFFALSE 47391
// exit ;
47389: GO 47539
// mech := result [ 1 ] ;
47391: LD_ADDR_VAR 0 5
47395: PUSH
47396: LD_VAR 0 2
47400: PUSH
47401: LD_INT 1
47403: ARRAY
47404: ST_TO_ADDR
// if result > 1 then
47405: LD_VAR 0 2
47409: PUSH
47410: LD_INT 1
47412: GREATER
47413: IFFALSE 47525
// begin for i = 2 to result do
47415: LD_ADDR_VAR 0 3
47419: PUSH
47420: DOUBLE
47421: LD_INT 2
47423: DEC
47424: ST_TO_ADDR
47425: LD_VAR 0 2
47429: PUSH
47430: FOR_TO
47431: IFFALSE 47523
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47433: LD_ADDR_VAR 0 4
47437: PUSH
47438: LD_VAR 0 2
47442: PUSH
47443: LD_VAR 0 3
47447: ARRAY
47448: PPUSH
47449: LD_INT 3
47451: PPUSH
47452: CALL_OW 259
47456: PUSH
47457: LD_VAR 0 2
47461: PUSH
47462: LD_VAR 0 3
47466: ARRAY
47467: PPUSH
47468: CALL_OW 432
47472: MINUS
47473: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47474: LD_VAR 0 4
47478: PUSH
47479: LD_VAR 0 5
47483: PPUSH
47484: LD_INT 3
47486: PPUSH
47487: CALL_OW 259
47491: PUSH
47492: LD_VAR 0 5
47496: PPUSH
47497: CALL_OW 432
47501: MINUS
47502: GREATEREQUAL
47503: IFFALSE 47521
// mech := result [ i ] ;
47505: LD_ADDR_VAR 0 5
47509: PUSH
47510: LD_VAR 0 2
47514: PUSH
47515: LD_VAR 0 3
47519: ARRAY
47520: ST_TO_ADDR
// end ;
47521: GO 47430
47523: POP
47524: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47525: LD_VAR 0 1
47529: PPUSH
47530: LD_VAR 0 5
47534: PPUSH
47535: CALL_OW 135
// end ;
47539: LD_VAR 0 2
47543: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47544: LD_INT 0
47546: PPUSH
47547: PPUSH
47548: PPUSH
47549: PPUSH
47550: PPUSH
47551: PPUSH
47552: PPUSH
47553: PPUSH
47554: PPUSH
47555: PPUSH
47556: PPUSH
47557: PPUSH
47558: PPUSH
// result := [ ] ;
47559: LD_ADDR_VAR 0 7
47563: PUSH
47564: EMPTY
47565: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47566: LD_VAR 0 1
47570: PPUSH
47571: CALL_OW 266
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: IN
47586: NOT
47587: IFFALSE 47591
// exit ;
47589: GO 49225
// if name then
47591: LD_VAR 0 3
47595: IFFALSE 47611
// SetBName ( base_dep , name ) ;
47597: LD_VAR 0 1
47601: PPUSH
47602: LD_VAR 0 3
47606: PPUSH
47607: CALL_OW 500
// base := GetBase ( base_dep ) ;
47611: LD_ADDR_VAR 0 15
47615: PUSH
47616: LD_VAR 0 1
47620: PPUSH
47621: CALL_OW 274
47625: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47626: LD_ADDR_VAR 0 16
47630: PUSH
47631: LD_VAR 0 1
47635: PPUSH
47636: CALL_OW 255
47640: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47641: LD_ADDR_VAR 0 17
47645: PUSH
47646: LD_VAR 0 1
47650: PPUSH
47651: CALL_OW 248
47655: ST_TO_ADDR
// if sources then
47656: LD_VAR 0 5
47660: IFFALSE 47707
// for i = 1 to 3 do
47662: LD_ADDR_VAR 0 8
47666: PUSH
47667: DOUBLE
47668: LD_INT 1
47670: DEC
47671: ST_TO_ADDR
47672: LD_INT 3
47674: PUSH
47675: FOR_TO
47676: IFFALSE 47705
// AddResourceType ( base , i , sources [ i ] ) ;
47678: LD_VAR 0 15
47682: PPUSH
47683: LD_VAR 0 8
47687: PPUSH
47688: LD_VAR 0 5
47692: PUSH
47693: LD_VAR 0 8
47697: ARRAY
47698: PPUSH
47699: CALL_OW 276
47703: GO 47675
47705: POP
47706: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47707: LD_ADDR_VAR 0 18
47711: PUSH
47712: LD_VAR 0 15
47716: PPUSH
47717: LD_VAR 0 2
47721: PPUSH
47722: LD_INT 1
47724: PPUSH
47725: CALL 46968 0 3
47729: ST_TO_ADDR
// InitHc ;
47730: CALL_OW 19
// InitUc ;
47734: CALL_OW 18
// uc_side := side ;
47738: LD_ADDR_OWVAR 20
47742: PUSH
47743: LD_VAR 0 16
47747: ST_TO_ADDR
// uc_nation := nation ;
47748: LD_ADDR_OWVAR 21
47752: PUSH
47753: LD_VAR 0 17
47757: ST_TO_ADDR
// if buildings then
47758: LD_VAR 0 18
47762: IFFALSE 49084
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47764: LD_ADDR_VAR 0 19
47768: PUSH
47769: LD_VAR 0 18
47773: PPUSH
47774: LD_INT 2
47776: PUSH
47777: LD_INT 30
47779: PUSH
47780: LD_INT 29
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 30
47789: PUSH
47790: LD_INT 30
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: LIST
47801: PPUSH
47802: CALL_OW 72
47806: ST_TO_ADDR
// if tmp then
47807: LD_VAR 0 19
47811: IFFALSE 47859
// for i in tmp do
47813: LD_ADDR_VAR 0 8
47817: PUSH
47818: LD_VAR 0 19
47822: PUSH
47823: FOR_IN
47824: IFFALSE 47857
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47826: LD_VAR 0 8
47830: PPUSH
47831: CALL_OW 250
47835: PPUSH
47836: LD_VAR 0 8
47840: PPUSH
47841: CALL_OW 251
47845: PPUSH
47846: LD_VAR 0 16
47850: PPUSH
47851: CALL_OW 441
47855: GO 47823
47857: POP
47858: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47859: LD_VAR 0 18
47863: PPUSH
47864: LD_INT 2
47866: PUSH
47867: LD_INT 30
47869: PUSH
47870: LD_INT 32
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 30
47879: PUSH
47880: LD_INT 33
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: LIST
47891: PPUSH
47892: CALL_OW 72
47896: IFFALSE 47984
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47898: LD_ADDR_VAR 0 8
47902: PUSH
47903: LD_VAR 0 18
47907: PPUSH
47908: LD_INT 2
47910: PUSH
47911: LD_INT 30
47913: PUSH
47914: LD_INT 32
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 30
47923: PUSH
47924: LD_INT 33
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: LIST
47935: PPUSH
47936: CALL_OW 72
47940: PUSH
47941: FOR_IN
47942: IFFALSE 47982
// begin if not GetBWeapon ( i ) then
47944: LD_VAR 0 8
47948: PPUSH
47949: CALL_OW 269
47953: NOT
47954: IFFALSE 47980
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47956: LD_VAR 0 8
47960: PPUSH
47961: LD_VAR 0 8
47965: PPUSH
47966: LD_VAR 0 2
47970: PPUSH
47971: CALL 49230 0 2
47975: PPUSH
47976: CALL_OW 431
// end ;
47980: GO 47941
47982: POP
47983: POP
// end ; for i = 1 to personel do
47984: LD_ADDR_VAR 0 8
47988: PUSH
47989: DOUBLE
47990: LD_INT 1
47992: DEC
47993: ST_TO_ADDR
47994: LD_VAR 0 6
47998: PUSH
47999: FOR_TO
48000: IFFALSE 49064
// begin if i > 4 then
48002: LD_VAR 0 8
48006: PUSH
48007: LD_INT 4
48009: GREATER
48010: IFFALSE 48014
// break ;
48012: GO 49064
// case i of 1 :
48014: LD_VAR 0 8
48018: PUSH
48019: LD_INT 1
48021: DOUBLE
48022: EQUAL
48023: IFTRUE 48027
48025: GO 48107
48027: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48028: LD_ADDR_VAR 0 12
48032: PUSH
48033: LD_VAR 0 18
48037: PPUSH
48038: LD_INT 22
48040: PUSH
48041: LD_VAR 0 16
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 58
48052: PUSH
48053: EMPTY
48054: LIST
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: LD_INT 30
48061: PUSH
48062: LD_INT 32
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 30
48071: PUSH
48072: LD_INT 4
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 30
48081: PUSH
48082: LD_INT 5
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: LIST
48099: PPUSH
48100: CALL_OW 72
48104: ST_TO_ADDR
48105: GO 48329
48107: LD_INT 2
48109: DOUBLE
48110: EQUAL
48111: IFTRUE 48115
48113: GO 48177
48115: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48116: LD_ADDR_VAR 0 12
48120: PUSH
48121: LD_VAR 0 18
48125: PPUSH
48126: LD_INT 22
48128: PUSH
48129: LD_VAR 0 16
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 2
48140: PUSH
48141: LD_INT 30
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 30
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: LIST
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PPUSH
48170: CALL_OW 72
48174: ST_TO_ADDR
48175: GO 48329
48177: LD_INT 3
48179: DOUBLE
48180: EQUAL
48181: IFTRUE 48185
48183: GO 48247
48185: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48186: LD_ADDR_VAR 0 12
48190: PUSH
48191: LD_VAR 0 18
48195: PPUSH
48196: LD_INT 22
48198: PUSH
48199: LD_VAR 0 16
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 2
48210: PUSH
48211: LD_INT 30
48213: PUSH
48214: LD_INT 2
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 30
48223: PUSH
48224: LD_INT 3
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: LIST
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PPUSH
48240: CALL_OW 72
48244: ST_TO_ADDR
48245: GO 48329
48247: LD_INT 4
48249: DOUBLE
48250: EQUAL
48251: IFTRUE 48255
48253: GO 48328
48255: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48256: LD_ADDR_VAR 0 12
48260: PUSH
48261: LD_VAR 0 18
48265: PPUSH
48266: LD_INT 22
48268: PUSH
48269: LD_VAR 0 16
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 2
48280: PUSH
48281: LD_INT 30
48283: PUSH
48284: LD_INT 6
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 30
48293: PUSH
48294: LD_INT 7
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 30
48303: PUSH
48304: LD_INT 8
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PPUSH
48321: CALL_OW 72
48325: ST_TO_ADDR
48326: GO 48329
48328: POP
// if i = 1 then
48329: LD_VAR 0 8
48333: PUSH
48334: LD_INT 1
48336: EQUAL
48337: IFFALSE 48448
// begin tmp := [ ] ;
48339: LD_ADDR_VAR 0 19
48343: PUSH
48344: EMPTY
48345: ST_TO_ADDR
// for j in f do
48346: LD_ADDR_VAR 0 9
48350: PUSH
48351: LD_VAR 0 12
48355: PUSH
48356: FOR_IN
48357: IFFALSE 48430
// if GetBType ( j ) = b_bunker then
48359: LD_VAR 0 9
48363: PPUSH
48364: CALL_OW 266
48368: PUSH
48369: LD_INT 32
48371: EQUAL
48372: IFFALSE 48399
// tmp := Insert ( tmp , 1 , j ) else
48374: LD_ADDR_VAR 0 19
48378: PUSH
48379: LD_VAR 0 19
48383: PPUSH
48384: LD_INT 1
48386: PPUSH
48387: LD_VAR 0 9
48391: PPUSH
48392: CALL_OW 2
48396: ST_TO_ADDR
48397: GO 48428
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48399: LD_ADDR_VAR 0 19
48403: PUSH
48404: LD_VAR 0 19
48408: PPUSH
48409: LD_VAR 0 19
48413: PUSH
48414: LD_INT 1
48416: PLUS
48417: PPUSH
48418: LD_VAR 0 9
48422: PPUSH
48423: CALL_OW 2
48427: ST_TO_ADDR
48428: GO 48356
48430: POP
48431: POP
// if tmp then
48432: LD_VAR 0 19
48436: IFFALSE 48448
// f := tmp ;
48438: LD_ADDR_VAR 0 12
48442: PUSH
48443: LD_VAR 0 19
48447: ST_TO_ADDR
// end ; x := personel [ i ] ;
48448: LD_ADDR_VAR 0 13
48452: PUSH
48453: LD_VAR 0 6
48457: PUSH
48458: LD_VAR 0 8
48462: ARRAY
48463: ST_TO_ADDR
// if x = - 1 then
48464: LD_VAR 0 13
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: EQUAL
48473: IFFALSE 48682
// begin for j in f do
48475: LD_ADDR_VAR 0 9
48479: PUSH
48480: LD_VAR 0 12
48484: PUSH
48485: FOR_IN
48486: IFFALSE 48678
// repeat InitHc ;
48488: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48492: LD_VAR 0 9
48496: PPUSH
48497: CALL_OW 266
48501: PUSH
48502: LD_INT 5
48504: EQUAL
48505: IFFALSE 48575
// begin if UnitsInside ( j ) < 3 then
48507: LD_VAR 0 9
48511: PPUSH
48512: CALL_OW 313
48516: PUSH
48517: LD_INT 3
48519: LESS
48520: IFFALSE 48556
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48522: LD_INT 0
48524: PPUSH
48525: LD_INT 5
48527: PUSH
48528: LD_INT 8
48530: PUSH
48531: LD_INT 9
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: LIST
48538: PUSH
48539: LD_VAR 0 17
48543: ARRAY
48544: PPUSH
48545: LD_VAR 0 4
48549: PPUSH
48550: CALL_OW 380
48554: GO 48573
// PrepareHuman ( false , i , skill ) ;
48556: LD_INT 0
48558: PPUSH
48559: LD_VAR 0 8
48563: PPUSH
48564: LD_VAR 0 4
48568: PPUSH
48569: CALL_OW 380
// end else
48573: GO 48592
// PrepareHuman ( false , i , skill ) ;
48575: LD_INT 0
48577: PPUSH
48578: LD_VAR 0 8
48582: PPUSH
48583: LD_VAR 0 4
48587: PPUSH
48588: CALL_OW 380
// un := CreateHuman ;
48592: LD_ADDR_VAR 0 14
48596: PUSH
48597: CALL_OW 44
48601: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48602: LD_ADDR_VAR 0 7
48606: PUSH
48607: LD_VAR 0 7
48611: PPUSH
48612: LD_INT 1
48614: PPUSH
48615: LD_VAR 0 14
48619: PPUSH
48620: CALL_OW 2
48624: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48625: LD_VAR 0 14
48629: PPUSH
48630: LD_VAR 0 9
48634: PPUSH
48635: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48639: LD_VAR 0 9
48643: PPUSH
48644: CALL_OW 313
48648: PUSH
48649: LD_INT 6
48651: EQUAL
48652: PUSH
48653: LD_VAR 0 9
48657: PPUSH
48658: CALL_OW 266
48662: PUSH
48663: LD_INT 32
48665: PUSH
48666: LD_INT 31
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: IN
48673: OR
48674: IFFALSE 48488
48676: GO 48485
48678: POP
48679: POP
// end else
48680: GO 49062
// for j = 1 to x do
48682: LD_ADDR_VAR 0 9
48686: PUSH
48687: DOUBLE
48688: LD_INT 1
48690: DEC
48691: ST_TO_ADDR
48692: LD_VAR 0 13
48696: PUSH
48697: FOR_TO
48698: IFFALSE 49060
// begin InitHc ;
48700: CALL_OW 19
// if not f then
48704: LD_VAR 0 12
48708: NOT
48709: IFFALSE 48798
// begin PrepareHuman ( false , i , skill ) ;
48711: LD_INT 0
48713: PPUSH
48714: LD_VAR 0 8
48718: PPUSH
48719: LD_VAR 0 4
48723: PPUSH
48724: CALL_OW 380
// un := CreateHuman ;
48728: LD_ADDR_VAR 0 14
48732: PUSH
48733: CALL_OW 44
48737: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48738: LD_ADDR_VAR 0 7
48742: PUSH
48743: LD_VAR 0 7
48747: PPUSH
48748: LD_INT 1
48750: PPUSH
48751: LD_VAR 0 14
48755: PPUSH
48756: CALL_OW 2
48760: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48761: LD_VAR 0 14
48765: PPUSH
48766: LD_VAR 0 1
48770: PPUSH
48771: CALL_OW 250
48775: PPUSH
48776: LD_VAR 0 1
48780: PPUSH
48781: CALL_OW 251
48785: PPUSH
48786: LD_INT 10
48788: PPUSH
48789: LD_INT 0
48791: PPUSH
48792: CALL_OW 50
// continue ;
48796: GO 48697
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48798: LD_VAR 0 12
48802: PUSH
48803: LD_INT 1
48805: ARRAY
48806: PPUSH
48807: CALL_OW 313
48811: PUSH
48812: LD_VAR 0 12
48816: PUSH
48817: LD_INT 1
48819: ARRAY
48820: PPUSH
48821: CALL_OW 266
48825: PUSH
48826: LD_INT 32
48828: PUSH
48829: LD_INT 31
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: IN
48836: AND
48837: PUSH
48838: LD_VAR 0 12
48842: PUSH
48843: LD_INT 1
48845: ARRAY
48846: PPUSH
48847: CALL_OW 313
48851: PUSH
48852: LD_INT 6
48854: EQUAL
48855: OR
48856: IFFALSE 48876
// f := Delete ( f , 1 ) ;
48858: LD_ADDR_VAR 0 12
48862: PUSH
48863: LD_VAR 0 12
48867: PPUSH
48868: LD_INT 1
48870: PPUSH
48871: CALL_OW 3
48875: ST_TO_ADDR
// if not f then
48876: LD_VAR 0 12
48880: NOT
48881: IFFALSE 48899
// begin x := x + 2 ;
48883: LD_ADDR_VAR 0 13
48887: PUSH
48888: LD_VAR 0 13
48892: PUSH
48893: LD_INT 2
48895: PLUS
48896: ST_TO_ADDR
// continue ;
48897: GO 48697
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48899: LD_VAR 0 12
48903: PUSH
48904: LD_INT 1
48906: ARRAY
48907: PPUSH
48908: CALL_OW 266
48912: PUSH
48913: LD_INT 5
48915: EQUAL
48916: IFFALSE 48990
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48918: LD_VAR 0 12
48922: PUSH
48923: LD_INT 1
48925: ARRAY
48926: PPUSH
48927: CALL_OW 313
48931: PUSH
48932: LD_INT 3
48934: LESS
48935: IFFALSE 48971
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48937: LD_INT 0
48939: PPUSH
48940: LD_INT 5
48942: PUSH
48943: LD_INT 8
48945: PUSH
48946: LD_INT 9
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: LIST
48953: PUSH
48954: LD_VAR 0 17
48958: ARRAY
48959: PPUSH
48960: LD_VAR 0 4
48964: PPUSH
48965: CALL_OW 380
48969: GO 48988
// PrepareHuman ( false , i , skill ) ;
48971: LD_INT 0
48973: PPUSH
48974: LD_VAR 0 8
48978: PPUSH
48979: LD_VAR 0 4
48983: PPUSH
48984: CALL_OW 380
// end else
48988: GO 49007
// PrepareHuman ( false , i , skill ) ;
48990: LD_INT 0
48992: PPUSH
48993: LD_VAR 0 8
48997: PPUSH
48998: LD_VAR 0 4
49002: PPUSH
49003: CALL_OW 380
// un := CreateHuman ;
49007: LD_ADDR_VAR 0 14
49011: PUSH
49012: CALL_OW 44
49016: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49017: LD_ADDR_VAR 0 7
49021: PUSH
49022: LD_VAR 0 7
49026: PPUSH
49027: LD_INT 1
49029: PPUSH
49030: LD_VAR 0 14
49034: PPUSH
49035: CALL_OW 2
49039: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49040: LD_VAR 0 14
49044: PPUSH
49045: LD_VAR 0 12
49049: PUSH
49050: LD_INT 1
49052: ARRAY
49053: PPUSH
49054: CALL_OW 52
// end ;
49058: GO 48697
49060: POP
49061: POP
// end ;
49062: GO 47999
49064: POP
49065: POP
// result := result ^ buildings ;
49066: LD_ADDR_VAR 0 7
49070: PUSH
49071: LD_VAR 0 7
49075: PUSH
49076: LD_VAR 0 18
49080: ADD
49081: ST_TO_ADDR
// end else
49082: GO 49225
// begin for i = 1 to personel do
49084: LD_ADDR_VAR 0 8
49088: PUSH
49089: DOUBLE
49090: LD_INT 1
49092: DEC
49093: ST_TO_ADDR
49094: LD_VAR 0 6
49098: PUSH
49099: FOR_TO
49100: IFFALSE 49223
// begin if i > 4 then
49102: LD_VAR 0 8
49106: PUSH
49107: LD_INT 4
49109: GREATER
49110: IFFALSE 49114
// break ;
49112: GO 49223
// x := personel [ i ] ;
49114: LD_ADDR_VAR 0 13
49118: PUSH
49119: LD_VAR 0 6
49123: PUSH
49124: LD_VAR 0 8
49128: ARRAY
49129: ST_TO_ADDR
// if x = - 1 then
49130: LD_VAR 0 13
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: EQUAL
49139: IFFALSE 49143
// continue ;
49141: GO 49099
// PrepareHuman ( false , i , skill ) ;
49143: LD_INT 0
49145: PPUSH
49146: LD_VAR 0 8
49150: PPUSH
49151: LD_VAR 0 4
49155: PPUSH
49156: CALL_OW 380
// un := CreateHuman ;
49160: LD_ADDR_VAR 0 14
49164: PUSH
49165: CALL_OW 44
49169: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49170: LD_VAR 0 14
49174: PPUSH
49175: LD_VAR 0 1
49179: PPUSH
49180: CALL_OW 250
49184: PPUSH
49185: LD_VAR 0 1
49189: PPUSH
49190: CALL_OW 251
49194: PPUSH
49195: LD_INT 10
49197: PPUSH
49198: LD_INT 0
49200: PPUSH
49201: CALL_OW 50
// result := result ^ un ;
49205: LD_ADDR_VAR 0 7
49209: PUSH
49210: LD_VAR 0 7
49214: PUSH
49215: LD_VAR 0 14
49219: ADD
49220: ST_TO_ADDR
// end ;
49221: GO 49099
49223: POP
49224: POP
// end ; end ;
49225: LD_VAR 0 7
49229: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49230: LD_INT 0
49232: PPUSH
49233: PPUSH
49234: PPUSH
49235: PPUSH
49236: PPUSH
49237: PPUSH
49238: PPUSH
49239: PPUSH
49240: PPUSH
49241: PPUSH
49242: PPUSH
49243: PPUSH
49244: PPUSH
49245: PPUSH
49246: PPUSH
49247: PPUSH
// result := false ;
49248: LD_ADDR_VAR 0 3
49252: PUSH
49253: LD_INT 0
49255: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49256: LD_VAR 0 1
49260: NOT
49261: PUSH
49262: LD_VAR 0 1
49266: PPUSH
49267: CALL_OW 266
49271: PUSH
49272: LD_INT 32
49274: PUSH
49275: LD_INT 33
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: IN
49282: NOT
49283: OR
49284: IFFALSE 49288
// exit ;
49286: GO 50397
// nat := GetNation ( tower ) ;
49288: LD_ADDR_VAR 0 12
49292: PUSH
49293: LD_VAR 0 1
49297: PPUSH
49298: CALL_OW 248
49302: ST_TO_ADDR
// side := GetSide ( tower ) ;
49303: LD_ADDR_VAR 0 16
49307: PUSH
49308: LD_VAR 0 1
49312: PPUSH
49313: CALL_OW 255
49317: ST_TO_ADDR
// x := GetX ( tower ) ;
49318: LD_ADDR_VAR 0 10
49322: PUSH
49323: LD_VAR 0 1
49327: PPUSH
49328: CALL_OW 250
49332: ST_TO_ADDR
// y := GetY ( tower ) ;
49333: LD_ADDR_VAR 0 11
49337: PUSH
49338: LD_VAR 0 1
49342: PPUSH
49343: CALL_OW 251
49347: ST_TO_ADDR
// if not x or not y then
49348: LD_VAR 0 10
49352: NOT
49353: PUSH
49354: LD_VAR 0 11
49358: NOT
49359: OR
49360: IFFALSE 49364
// exit ;
49362: GO 50397
// weapon := 0 ;
49364: LD_ADDR_VAR 0 18
49368: PUSH
49369: LD_INT 0
49371: ST_TO_ADDR
// fac_list := [ ] ;
49372: LD_ADDR_VAR 0 17
49376: PUSH
49377: EMPTY
49378: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49379: LD_ADDR_VAR 0 6
49383: PUSH
49384: LD_VAR 0 1
49388: PPUSH
49389: CALL_OW 274
49393: PPUSH
49394: LD_VAR 0 2
49398: PPUSH
49399: LD_INT 0
49401: PPUSH
49402: CALL 46968 0 3
49406: PPUSH
49407: LD_INT 30
49409: PUSH
49410: LD_INT 3
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PPUSH
49417: CALL_OW 72
49421: ST_TO_ADDR
// if not factories then
49422: LD_VAR 0 6
49426: NOT
49427: IFFALSE 49431
// exit ;
49429: GO 50397
// for i in factories do
49431: LD_ADDR_VAR 0 8
49435: PUSH
49436: LD_VAR 0 6
49440: PUSH
49441: FOR_IN
49442: IFFALSE 49467
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49444: LD_ADDR_VAR 0 17
49448: PUSH
49449: LD_VAR 0 17
49453: PUSH
49454: LD_VAR 0 8
49458: PPUSH
49459: CALL_OW 478
49463: UNION
49464: ST_TO_ADDR
49465: GO 49441
49467: POP
49468: POP
// if not fac_list then
49469: LD_VAR 0 17
49473: NOT
49474: IFFALSE 49478
// exit ;
49476: GO 50397
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49478: LD_ADDR_VAR 0 5
49482: PUSH
49483: LD_INT 4
49485: PUSH
49486: LD_INT 5
49488: PUSH
49489: LD_INT 9
49491: PUSH
49492: LD_INT 10
49494: PUSH
49495: LD_INT 6
49497: PUSH
49498: LD_INT 7
49500: PUSH
49501: LD_INT 11
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 27
49515: PUSH
49516: LD_INT 28
49518: PUSH
49519: LD_INT 26
49521: PUSH
49522: LD_INT 30
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 43
49533: PUSH
49534: LD_INT 44
49536: PUSH
49537: LD_INT 46
49539: PUSH
49540: LD_INT 45
49542: PUSH
49543: LD_INT 47
49545: PUSH
49546: LD_INT 49
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: LIST
49561: PUSH
49562: LD_VAR 0 12
49566: ARRAY
49567: ST_TO_ADDR
// list := list isect fac_list ;
49568: LD_ADDR_VAR 0 5
49572: PUSH
49573: LD_VAR 0 5
49577: PUSH
49578: LD_VAR 0 17
49582: ISECT
49583: ST_TO_ADDR
// if not list then
49584: LD_VAR 0 5
49588: NOT
49589: IFFALSE 49593
// exit ;
49591: GO 50397
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49593: LD_VAR 0 12
49597: PUSH
49598: LD_INT 3
49600: EQUAL
49601: PUSH
49602: LD_INT 49
49604: PUSH
49605: LD_VAR 0 5
49609: IN
49610: AND
49611: PUSH
49612: LD_INT 31
49614: PPUSH
49615: LD_VAR 0 16
49619: PPUSH
49620: CALL_OW 321
49624: PUSH
49625: LD_INT 2
49627: EQUAL
49628: AND
49629: IFFALSE 49689
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49631: LD_INT 22
49633: PUSH
49634: LD_VAR 0 16
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 35
49645: PUSH
49646: LD_INT 49
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 91
49655: PUSH
49656: LD_VAR 0 1
49660: PUSH
49661: LD_INT 10
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: LIST
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: LIST
49673: PPUSH
49674: CALL_OW 69
49678: NOT
49679: IFFALSE 49689
// weapon := ru_time_lapser ;
49681: LD_ADDR_VAR 0 18
49685: PUSH
49686: LD_INT 49
49688: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49689: LD_VAR 0 12
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: LD_INT 2
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: IN
49704: PUSH
49705: LD_INT 11
49707: PUSH
49708: LD_VAR 0 5
49712: IN
49713: PUSH
49714: LD_INT 30
49716: PUSH
49717: LD_VAR 0 5
49721: IN
49722: OR
49723: AND
49724: PUSH
49725: LD_INT 6
49727: PPUSH
49728: LD_VAR 0 16
49732: PPUSH
49733: CALL_OW 321
49737: PUSH
49738: LD_INT 2
49740: EQUAL
49741: AND
49742: IFFALSE 49907
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49744: LD_INT 22
49746: PUSH
49747: LD_VAR 0 16
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: LD_INT 35
49761: PUSH
49762: LD_INT 11
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 35
49771: PUSH
49772: LD_INT 30
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 91
49786: PUSH
49787: LD_VAR 0 1
49791: PUSH
49792: LD_INT 18
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: LIST
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: LIST
49804: PPUSH
49805: CALL_OW 69
49809: NOT
49810: PUSH
49811: LD_INT 22
49813: PUSH
49814: LD_VAR 0 16
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 2
49825: PUSH
49826: LD_INT 30
49828: PUSH
49829: LD_INT 32
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 30
49838: PUSH
49839: LD_INT 33
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 91
49853: PUSH
49854: LD_VAR 0 1
49858: PUSH
49859: LD_INT 12
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: LIST
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: LIST
49871: PUSH
49872: EMPTY
49873: LIST
49874: PPUSH
49875: CALL_OW 69
49879: PUSH
49880: LD_INT 2
49882: GREATER
49883: AND
49884: IFFALSE 49907
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49886: LD_ADDR_VAR 0 18
49890: PUSH
49891: LD_INT 11
49893: PUSH
49894: LD_INT 30
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_VAR 0 12
49905: ARRAY
49906: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49907: LD_VAR 0 18
49911: NOT
49912: PUSH
49913: LD_INT 40
49915: PPUSH
49916: LD_VAR 0 16
49920: PPUSH
49921: CALL_OW 321
49925: PUSH
49926: LD_INT 2
49928: EQUAL
49929: AND
49930: PUSH
49931: LD_INT 7
49933: PUSH
49934: LD_VAR 0 5
49938: IN
49939: PUSH
49940: LD_INT 28
49942: PUSH
49943: LD_VAR 0 5
49947: IN
49948: OR
49949: PUSH
49950: LD_INT 45
49952: PUSH
49953: LD_VAR 0 5
49957: IN
49958: OR
49959: AND
49960: IFFALSE 50214
// begin hex := GetHexInfo ( x , y ) ;
49962: LD_ADDR_VAR 0 4
49966: PUSH
49967: LD_VAR 0 10
49971: PPUSH
49972: LD_VAR 0 11
49976: PPUSH
49977: CALL_OW 546
49981: ST_TO_ADDR
// if hex [ 1 ] then
49982: LD_VAR 0 4
49986: PUSH
49987: LD_INT 1
49989: ARRAY
49990: IFFALSE 49994
// exit ;
49992: GO 50397
// height := hex [ 2 ] ;
49994: LD_ADDR_VAR 0 15
49998: PUSH
49999: LD_VAR 0 4
50003: PUSH
50004: LD_INT 2
50006: ARRAY
50007: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50008: LD_ADDR_VAR 0 14
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: LD_INT 3
50021: PUSH
50022: LD_INT 5
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: ST_TO_ADDR
// for i in tmp do
50031: LD_ADDR_VAR 0 8
50035: PUSH
50036: LD_VAR 0 14
50040: PUSH
50041: FOR_IN
50042: IFFALSE 50212
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50044: LD_ADDR_VAR 0 9
50048: PUSH
50049: LD_VAR 0 10
50053: PPUSH
50054: LD_VAR 0 8
50058: PPUSH
50059: LD_INT 5
50061: PPUSH
50062: CALL_OW 272
50066: PUSH
50067: LD_VAR 0 11
50071: PPUSH
50072: LD_VAR 0 8
50076: PPUSH
50077: LD_INT 5
50079: PPUSH
50080: CALL_OW 273
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50089: LD_VAR 0 9
50093: PUSH
50094: LD_INT 1
50096: ARRAY
50097: PPUSH
50098: LD_VAR 0 9
50102: PUSH
50103: LD_INT 2
50105: ARRAY
50106: PPUSH
50107: CALL_OW 488
50111: IFFALSE 50210
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50113: LD_ADDR_VAR 0 4
50117: PUSH
50118: LD_VAR 0 9
50122: PUSH
50123: LD_INT 1
50125: ARRAY
50126: PPUSH
50127: LD_VAR 0 9
50131: PUSH
50132: LD_INT 2
50134: ARRAY
50135: PPUSH
50136: CALL_OW 546
50140: ST_TO_ADDR
// if hex [ 1 ] then
50141: LD_VAR 0 4
50145: PUSH
50146: LD_INT 1
50148: ARRAY
50149: IFFALSE 50153
// continue ;
50151: GO 50041
// h := hex [ 2 ] ;
50153: LD_ADDR_VAR 0 13
50157: PUSH
50158: LD_VAR 0 4
50162: PUSH
50163: LD_INT 2
50165: ARRAY
50166: ST_TO_ADDR
// if h + 7 < height then
50167: LD_VAR 0 13
50171: PUSH
50172: LD_INT 7
50174: PLUS
50175: PUSH
50176: LD_VAR 0 15
50180: LESS
50181: IFFALSE 50210
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50183: LD_ADDR_VAR 0 18
50187: PUSH
50188: LD_INT 7
50190: PUSH
50191: LD_INT 28
50193: PUSH
50194: LD_INT 45
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: LIST
50201: PUSH
50202: LD_VAR 0 12
50206: ARRAY
50207: ST_TO_ADDR
// break ;
50208: GO 50212
// end ; end ; end ;
50210: GO 50041
50212: POP
50213: POP
// end ; if not weapon then
50214: LD_VAR 0 18
50218: NOT
50219: IFFALSE 50279
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50221: LD_ADDR_VAR 0 5
50225: PUSH
50226: LD_VAR 0 5
50230: PUSH
50231: LD_INT 11
50233: PUSH
50234: LD_INT 30
50236: PUSH
50237: LD_INT 49
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: LIST
50244: DIFF
50245: ST_TO_ADDR
// if not list then
50246: LD_VAR 0 5
50250: NOT
50251: IFFALSE 50255
// exit ;
50253: GO 50397
// weapon := list [ rand ( 1 , list ) ] ;
50255: LD_ADDR_VAR 0 18
50259: PUSH
50260: LD_VAR 0 5
50264: PUSH
50265: LD_INT 1
50267: PPUSH
50268: LD_VAR 0 5
50272: PPUSH
50273: CALL_OW 12
50277: ARRAY
50278: ST_TO_ADDR
// end ; if weapon then
50279: LD_VAR 0 18
50283: IFFALSE 50397
// begin tmp := CostOfWeapon ( weapon ) ;
50285: LD_ADDR_VAR 0 14
50289: PUSH
50290: LD_VAR 0 18
50294: PPUSH
50295: CALL_OW 451
50299: ST_TO_ADDR
// j := GetBase ( tower ) ;
50300: LD_ADDR_VAR 0 9
50304: PUSH
50305: LD_VAR 0 1
50309: PPUSH
50310: CALL_OW 274
50314: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50315: LD_VAR 0 9
50319: PPUSH
50320: LD_INT 1
50322: PPUSH
50323: CALL_OW 275
50327: PUSH
50328: LD_VAR 0 14
50332: PUSH
50333: LD_INT 1
50335: ARRAY
50336: GREATEREQUAL
50337: PUSH
50338: LD_VAR 0 9
50342: PPUSH
50343: LD_INT 2
50345: PPUSH
50346: CALL_OW 275
50350: PUSH
50351: LD_VAR 0 14
50355: PUSH
50356: LD_INT 2
50358: ARRAY
50359: GREATEREQUAL
50360: AND
50361: PUSH
50362: LD_VAR 0 9
50366: PPUSH
50367: LD_INT 3
50369: PPUSH
50370: CALL_OW 275
50374: PUSH
50375: LD_VAR 0 14
50379: PUSH
50380: LD_INT 3
50382: ARRAY
50383: GREATEREQUAL
50384: AND
50385: IFFALSE 50397
// result := weapon ;
50387: LD_ADDR_VAR 0 3
50391: PUSH
50392: LD_VAR 0 18
50396: ST_TO_ADDR
// end ; end ;
50397: LD_VAR 0 3
50401: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50402: LD_INT 0
50404: PPUSH
50405: PPUSH
// result := true ;
50406: LD_ADDR_VAR 0 3
50410: PUSH
50411: LD_INT 1
50413: ST_TO_ADDR
// if array1 = array2 then
50414: LD_VAR 0 1
50418: PUSH
50419: LD_VAR 0 2
50423: EQUAL
50424: IFFALSE 50484
// begin for i = 1 to array1 do
50426: LD_ADDR_VAR 0 4
50430: PUSH
50431: DOUBLE
50432: LD_INT 1
50434: DEC
50435: ST_TO_ADDR
50436: LD_VAR 0 1
50440: PUSH
50441: FOR_TO
50442: IFFALSE 50480
// if array1 [ i ] <> array2 [ i ] then
50444: LD_VAR 0 1
50448: PUSH
50449: LD_VAR 0 4
50453: ARRAY
50454: PUSH
50455: LD_VAR 0 2
50459: PUSH
50460: LD_VAR 0 4
50464: ARRAY
50465: NONEQUAL
50466: IFFALSE 50478
// begin result := false ;
50468: LD_ADDR_VAR 0 3
50472: PUSH
50473: LD_INT 0
50475: ST_TO_ADDR
// break ;
50476: GO 50480
// end ;
50478: GO 50441
50480: POP
50481: POP
// end else
50482: GO 50492
// result := false ;
50484: LD_ADDR_VAR 0 3
50488: PUSH
50489: LD_INT 0
50491: ST_TO_ADDR
// end ;
50492: LD_VAR 0 3
50496: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50497: LD_INT 0
50499: PPUSH
50500: PPUSH
// if not array1 or not array2 then
50501: LD_VAR 0 1
50505: NOT
50506: PUSH
50507: LD_VAR 0 2
50511: NOT
50512: OR
50513: IFFALSE 50517
// exit ;
50515: GO 50581
// result := true ;
50517: LD_ADDR_VAR 0 3
50521: PUSH
50522: LD_INT 1
50524: ST_TO_ADDR
// for i = 1 to array1 do
50525: LD_ADDR_VAR 0 4
50529: PUSH
50530: DOUBLE
50531: LD_INT 1
50533: DEC
50534: ST_TO_ADDR
50535: LD_VAR 0 1
50539: PUSH
50540: FOR_TO
50541: IFFALSE 50579
// if array1 [ i ] <> array2 [ i ] then
50543: LD_VAR 0 1
50547: PUSH
50548: LD_VAR 0 4
50552: ARRAY
50553: PUSH
50554: LD_VAR 0 2
50558: PUSH
50559: LD_VAR 0 4
50563: ARRAY
50564: NONEQUAL
50565: IFFALSE 50577
// begin result := false ;
50567: LD_ADDR_VAR 0 3
50571: PUSH
50572: LD_INT 0
50574: ST_TO_ADDR
// break ;
50575: GO 50579
// end ;
50577: GO 50540
50579: POP
50580: POP
// end ;
50581: LD_VAR 0 3
50585: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50586: LD_INT 0
50588: PPUSH
50589: PPUSH
50590: PPUSH
// pom := GetBase ( fac ) ;
50591: LD_ADDR_VAR 0 5
50595: PUSH
50596: LD_VAR 0 1
50600: PPUSH
50601: CALL_OW 274
50605: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50606: LD_ADDR_VAR 0 4
50610: PUSH
50611: LD_VAR 0 2
50615: PUSH
50616: LD_INT 1
50618: ARRAY
50619: PPUSH
50620: LD_VAR 0 2
50624: PUSH
50625: LD_INT 2
50627: ARRAY
50628: PPUSH
50629: LD_VAR 0 2
50633: PUSH
50634: LD_INT 3
50636: ARRAY
50637: PPUSH
50638: LD_VAR 0 2
50642: PUSH
50643: LD_INT 4
50645: ARRAY
50646: PPUSH
50647: CALL_OW 449
50651: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50652: LD_ADDR_VAR 0 3
50656: PUSH
50657: LD_VAR 0 5
50661: PPUSH
50662: LD_INT 1
50664: PPUSH
50665: CALL_OW 275
50669: PUSH
50670: LD_VAR 0 4
50674: PUSH
50675: LD_INT 1
50677: ARRAY
50678: GREATEREQUAL
50679: PUSH
50680: LD_VAR 0 5
50684: PPUSH
50685: LD_INT 2
50687: PPUSH
50688: CALL_OW 275
50692: PUSH
50693: LD_VAR 0 4
50697: PUSH
50698: LD_INT 2
50700: ARRAY
50701: GREATEREQUAL
50702: AND
50703: PUSH
50704: LD_VAR 0 5
50708: PPUSH
50709: LD_INT 3
50711: PPUSH
50712: CALL_OW 275
50716: PUSH
50717: LD_VAR 0 4
50721: PUSH
50722: LD_INT 3
50724: ARRAY
50725: GREATEREQUAL
50726: AND
50727: ST_TO_ADDR
// end ;
50728: LD_VAR 0 3
50732: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50733: LD_INT 0
50735: PPUSH
50736: PPUSH
50737: PPUSH
50738: PPUSH
// pom := GetBase ( building ) ;
50739: LD_ADDR_VAR 0 3
50743: PUSH
50744: LD_VAR 0 1
50748: PPUSH
50749: CALL_OW 274
50753: ST_TO_ADDR
// if not pom then
50754: LD_VAR 0 3
50758: NOT
50759: IFFALSE 50763
// exit ;
50761: GO 50933
// btype := GetBType ( building ) ;
50763: LD_ADDR_VAR 0 5
50767: PUSH
50768: LD_VAR 0 1
50772: PPUSH
50773: CALL_OW 266
50777: ST_TO_ADDR
// if btype = b_armoury then
50778: LD_VAR 0 5
50782: PUSH
50783: LD_INT 4
50785: EQUAL
50786: IFFALSE 50796
// btype := b_barracks ;
50788: LD_ADDR_VAR 0 5
50792: PUSH
50793: LD_INT 5
50795: ST_TO_ADDR
// if btype = b_depot then
50796: LD_VAR 0 5
50800: PUSH
50801: LD_INT 0
50803: EQUAL
50804: IFFALSE 50814
// btype := b_warehouse ;
50806: LD_ADDR_VAR 0 5
50810: PUSH
50811: LD_INT 1
50813: ST_TO_ADDR
// if btype = b_workshop then
50814: LD_VAR 0 5
50818: PUSH
50819: LD_INT 2
50821: EQUAL
50822: IFFALSE 50832
// btype := b_factory ;
50824: LD_ADDR_VAR 0 5
50828: PUSH
50829: LD_INT 3
50831: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50832: LD_ADDR_VAR 0 4
50836: PUSH
50837: LD_VAR 0 5
50841: PPUSH
50842: LD_VAR 0 1
50846: PPUSH
50847: CALL_OW 248
50851: PPUSH
50852: CALL_OW 450
50856: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50857: LD_ADDR_VAR 0 2
50861: PUSH
50862: LD_VAR 0 3
50866: PPUSH
50867: LD_INT 1
50869: PPUSH
50870: CALL_OW 275
50874: PUSH
50875: LD_VAR 0 4
50879: PUSH
50880: LD_INT 1
50882: ARRAY
50883: GREATEREQUAL
50884: PUSH
50885: LD_VAR 0 3
50889: PPUSH
50890: LD_INT 2
50892: PPUSH
50893: CALL_OW 275
50897: PUSH
50898: LD_VAR 0 4
50902: PUSH
50903: LD_INT 2
50905: ARRAY
50906: GREATEREQUAL
50907: AND
50908: PUSH
50909: LD_VAR 0 3
50913: PPUSH
50914: LD_INT 3
50916: PPUSH
50917: CALL_OW 275
50921: PUSH
50922: LD_VAR 0 4
50926: PUSH
50927: LD_INT 3
50929: ARRAY
50930: GREATEREQUAL
50931: AND
50932: ST_TO_ADDR
// end ;
50933: LD_VAR 0 2
50937: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50938: LD_INT 0
50940: PPUSH
50941: PPUSH
50942: PPUSH
// pom := GetBase ( building ) ;
50943: LD_ADDR_VAR 0 4
50947: PUSH
50948: LD_VAR 0 1
50952: PPUSH
50953: CALL_OW 274
50957: ST_TO_ADDR
// if not pom then
50958: LD_VAR 0 4
50962: NOT
50963: IFFALSE 50967
// exit ;
50965: GO 51068
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50967: LD_ADDR_VAR 0 5
50971: PUSH
50972: LD_VAR 0 2
50976: PPUSH
50977: LD_VAR 0 1
50981: PPUSH
50982: CALL_OW 248
50986: PPUSH
50987: CALL_OW 450
50991: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50992: LD_ADDR_VAR 0 3
50996: PUSH
50997: LD_VAR 0 4
51001: PPUSH
51002: LD_INT 1
51004: PPUSH
51005: CALL_OW 275
51009: PUSH
51010: LD_VAR 0 5
51014: PUSH
51015: LD_INT 1
51017: ARRAY
51018: GREATEREQUAL
51019: PUSH
51020: LD_VAR 0 4
51024: PPUSH
51025: LD_INT 2
51027: PPUSH
51028: CALL_OW 275
51032: PUSH
51033: LD_VAR 0 5
51037: PUSH
51038: LD_INT 2
51040: ARRAY
51041: GREATEREQUAL
51042: AND
51043: PUSH
51044: LD_VAR 0 4
51048: PPUSH
51049: LD_INT 3
51051: PPUSH
51052: CALL_OW 275
51056: PUSH
51057: LD_VAR 0 5
51061: PUSH
51062: LD_INT 3
51064: ARRAY
51065: GREATEREQUAL
51066: AND
51067: ST_TO_ADDR
// end ;
51068: LD_VAR 0 3
51072: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51073: LD_INT 0
51075: PPUSH
51076: PPUSH
51077: PPUSH
51078: PPUSH
51079: PPUSH
51080: PPUSH
51081: PPUSH
51082: PPUSH
51083: PPUSH
51084: PPUSH
51085: PPUSH
// result := false ;
51086: LD_ADDR_VAR 0 8
51090: PUSH
51091: LD_INT 0
51093: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51094: LD_VAR 0 5
51098: NOT
51099: PUSH
51100: LD_VAR 0 1
51104: NOT
51105: OR
51106: PUSH
51107: LD_VAR 0 2
51111: NOT
51112: OR
51113: PUSH
51114: LD_VAR 0 3
51118: NOT
51119: OR
51120: IFFALSE 51124
// exit ;
51122: GO 51938
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51124: LD_ADDR_VAR 0 14
51128: PUSH
51129: LD_VAR 0 1
51133: PPUSH
51134: LD_VAR 0 2
51138: PPUSH
51139: LD_VAR 0 3
51143: PPUSH
51144: LD_VAR 0 4
51148: PPUSH
51149: LD_VAR 0 5
51153: PUSH
51154: LD_INT 1
51156: ARRAY
51157: PPUSH
51158: CALL_OW 248
51162: PPUSH
51163: LD_INT 0
51165: PPUSH
51166: CALL 53171 0 6
51170: ST_TO_ADDR
// if not hexes then
51171: LD_VAR 0 14
51175: NOT
51176: IFFALSE 51180
// exit ;
51178: GO 51938
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51180: LD_ADDR_VAR 0 17
51184: PUSH
51185: LD_VAR 0 5
51189: PPUSH
51190: LD_INT 22
51192: PUSH
51193: LD_VAR 0 13
51197: PPUSH
51198: CALL_OW 255
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 2
51209: PUSH
51210: LD_INT 30
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 30
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: LIST
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PPUSH
51239: CALL_OW 72
51243: ST_TO_ADDR
// for i = 1 to hexes do
51244: LD_ADDR_VAR 0 9
51248: PUSH
51249: DOUBLE
51250: LD_INT 1
51252: DEC
51253: ST_TO_ADDR
51254: LD_VAR 0 14
51258: PUSH
51259: FOR_TO
51260: IFFALSE 51936
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51262: LD_ADDR_VAR 0 13
51266: PUSH
51267: LD_VAR 0 14
51271: PUSH
51272: LD_VAR 0 9
51276: ARRAY
51277: PUSH
51278: LD_INT 1
51280: ARRAY
51281: PPUSH
51282: LD_VAR 0 14
51286: PUSH
51287: LD_VAR 0 9
51291: ARRAY
51292: PUSH
51293: LD_INT 2
51295: ARRAY
51296: PPUSH
51297: CALL_OW 428
51301: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51302: LD_VAR 0 14
51306: PUSH
51307: LD_VAR 0 9
51311: ARRAY
51312: PUSH
51313: LD_INT 1
51315: ARRAY
51316: PPUSH
51317: LD_VAR 0 14
51321: PUSH
51322: LD_VAR 0 9
51326: ARRAY
51327: PUSH
51328: LD_INT 2
51330: ARRAY
51331: PPUSH
51332: CALL_OW 351
51336: PUSH
51337: LD_VAR 0 14
51341: PUSH
51342: LD_VAR 0 9
51346: ARRAY
51347: PUSH
51348: LD_INT 1
51350: ARRAY
51351: PPUSH
51352: LD_VAR 0 14
51356: PUSH
51357: LD_VAR 0 9
51361: ARRAY
51362: PUSH
51363: LD_INT 2
51365: ARRAY
51366: PPUSH
51367: CALL_OW 488
51371: NOT
51372: OR
51373: PUSH
51374: LD_VAR 0 13
51378: PPUSH
51379: CALL_OW 247
51383: PUSH
51384: LD_INT 3
51386: EQUAL
51387: OR
51388: IFFALSE 51394
// exit ;
51390: POP
51391: POP
51392: GO 51938
// if not tmp then
51394: LD_VAR 0 13
51398: NOT
51399: IFFALSE 51403
// continue ;
51401: GO 51259
// result := true ;
51403: LD_ADDR_VAR 0 8
51407: PUSH
51408: LD_INT 1
51410: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51411: LD_VAR 0 6
51415: PUSH
51416: LD_VAR 0 13
51420: PPUSH
51421: CALL_OW 247
51425: PUSH
51426: LD_INT 2
51428: EQUAL
51429: AND
51430: PUSH
51431: LD_VAR 0 13
51435: PPUSH
51436: CALL_OW 263
51440: PUSH
51441: LD_INT 1
51443: EQUAL
51444: AND
51445: IFFALSE 51609
// begin if IsDrivenBy ( tmp ) then
51447: LD_VAR 0 13
51451: PPUSH
51452: CALL_OW 311
51456: IFFALSE 51460
// continue ;
51458: GO 51259
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51460: LD_VAR 0 6
51464: PPUSH
51465: LD_INT 3
51467: PUSH
51468: LD_INT 60
51470: PUSH
51471: EMPTY
51472: LIST
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 3
51480: PUSH
51481: LD_INT 55
51483: PUSH
51484: EMPTY
51485: LIST
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PPUSH
51495: CALL_OW 72
51499: IFFALSE 51607
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51501: LD_ADDR_VAR 0 18
51505: PUSH
51506: LD_VAR 0 6
51510: PPUSH
51511: LD_INT 3
51513: PUSH
51514: LD_INT 60
51516: PUSH
51517: EMPTY
51518: LIST
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 3
51526: PUSH
51527: LD_INT 55
51529: PUSH
51530: EMPTY
51531: LIST
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PPUSH
51541: CALL_OW 72
51545: PUSH
51546: LD_INT 1
51548: ARRAY
51549: ST_TO_ADDR
// if IsInUnit ( driver ) then
51550: LD_VAR 0 18
51554: PPUSH
51555: CALL_OW 310
51559: IFFALSE 51570
// ComExit ( driver ) ;
51561: LD_VAR 0 18
51565: PPUSH
51566: CALL 76932 0 1
// AddComEnterUnit ( driver , tmp ) ;
51570: LD_VAR 0 18
51574: PPUSH
51575: LD_VAR 0 13
51579: PPUSH
51580: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51584: LD_VAR 0 18
51588: PPUSH
51589: LD_VAR 0 7
51593: PPUSH
51594: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51598: LD_VAR 0 18
51602: PPUSH
51603: CALL_OW 181
// end ; continue ;
51607: GO 51259
// end ; if not cleaners or not tmp in cleaners then
51609: LD_VAR 0 6
51613: NOT
51614: PUSH
51615: LD_VAR 0 13
51619: PUSH
51620: LD_VAR 0 6
51624: IN
51625: NOT
51626: OR
51627: IFFALSE 51934
// begin if dep then
51629: LD_VAR 0 17
51633: IFFALSE 51769
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51635: LD_ADDR_VAR 0 16
51639: PUSH
51640: LD_VAR 0 17
51644: PUSH
51645: LD_INT 1
51647: ARRAY
51648: PPUSH
51649: CALL_OW 250
51653: PPUSH
51654: LD_VAR 0 17
51658: PUSH
51659: LD_INT 1
51661: ARRAY
51662: PPUSH
51663: CALL_OW 254
51667: PPUSH
51668: LD_INT 5
51670: PPUSH
51671: CALL_OW 272
51675: PUSH
51676: LD_VAR 0 17
51680: PUSH
51681: LD_INT 1
51683: ARRAY
51684: PPUSH
51685: CALL_OW 251
51689: PPUSH
51690: LD_VAR 0 17
51694: PUSH
51695: LD_INT 1
51697: ARRAY
51698: PPUSH
51699: CALL_OW 254
51703: PPUSH
51704: LD_INT 5
51706: PPUSH
51707: CALL_OW 273
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51716: LD_VAR 0 16
51720: PUSH
51721: LD_INT 1
51723: ARRAY
51724: PPUSH
51725: LD_VAR 0 16
51729: PUSH
51730: LD_INT 2
51732: ARRAY
51733: PPUSH
51734: CALL_OW 488
51738: IFFALSE 51769
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51740: LD_VAR 0 13
51744: PPUSH
51745: LD_VAR 0 16
51749: PUSH
51750: LD_INT 1
51752: ARRAY
51753: PPUSH
51754: LD_VAR 0 16
51758: PUSH
51759: LD_INT 2
51761: ARRAY
51762: PPUSH
51763: CALL_OW 111
// continue ;
51767: GO 51259
// end ; end ; r := GetDir ( tmp ) ;
51769: LD_ADDR_VAR 0 15
51773: PUSH
51774: LD_VAR 0 13
51778: PPUSH
51779: CALL_OW 254
51783: ST_TO_ADDR
// if r = 5 then
51784: LD_VAR 0 15
51788: PUSH
51789: LD_INT 5
51791: EQUAL
51792: IFFALSE 51802
// r := 0 ;
51794: LD_ADDR_VAR 0 15
51798: PUSH
51799: LD_INT 0
51801: ST_TO_ADDR
// for j = r to 5 do
51802: LD_ADDR_VAR 0 10
51806: PUSH
51807: DOUBLE
51808: LD_VAR 0 15
51812: DEC
51813: ST_TO_ADDR
51814: LD_INT 5
51816: PUSH
51817: FOR_TO
51818: IFFALSE 51932
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51820: LD_ADDR_VAR 0 11
51824: PUSH
51825: LD_VAR 0 13
51829: PPUSH
51830: CALL_OW 250
51834: PPUSH
51835: LD_VAR 0 10
51839: PPUSH
51840: LD_INT 2
51842: PPUSH
51843: CALL_OW 272
51847: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51848: LD_ADDR_VAR 0 12
51852: PUSH
51853: LD_VAR 0 13
51857: PPUSH
51858: CALL_OW 251
51862: PPUSH
51863: LD_VAR 0 10
51867: PPUSH
51868: LD_INT 2
51870: PPUSH
51871: CALL_OW 273
51875: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51876: LD_VAR 0 11
51880: PPUSH
51881: LD_VAR 0 12
51885: PPUSH
51886: CALL_OW 488
51890: PUSH
51891: LD_VAR 0 11
51895: PPUSH
51896: LD_VAR 0 12
51900: PPUSH
51901: CALL_OW 428
51905: NOT
51906: AND
51907: IFFALSE 51930
// begin ComMoveXY ( tmp , _x , _y ) ;
51909: LD_VAR 0 13
51913: PPUSH
51914: LD_VAR 0 11
51918: PPUSH
51919: LD_VAR 0 12
51923: PPUSH
51924: CALL_OW 111
// break ;
51928: GO 51932
// end ; end ;
51930: GO 51817
51932: POP
51933: POP
// end ; end ;
51934: GO 51259
51936: POP
51937: POP
// end ;
51938: LD_VAR 0 8
51942: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51943: LD_INT 0
51945: PPUSH
// result := true ;
51946: LD_ADDR_VAR 0 3
51950: PUSH
51951: LD_INT 1
51953: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51954: LD_VAR 0 2
51958: PUSH
51959: LD_INT 24
51961: DOUBLE
51962: EQUAL
51963: IFTRUE 51973
51965: LD_INT 33
51967: DOUBLE
51968: EQUAL
51969: IFTRUE 51973
51971: GO 51998
51973: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51974: LD_ADDR_VAR 0 3
51978: PUSH
51979: LD_INT 32
51981: PPUSH
51982: LD_VAR 0 1
51986: PPUSH
51987: CALL_OW 321
51991: PUSH
51992: LD_INT 2
51994: EQUAL
51995: ST_TO_ADDR
51996: GO 52314
51998: LD_INT 20
52000: DOUBLE
52001: EQUAL
52002: IFTRUE 52006
52004: GO 52031
52006: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52007: LD_ADDR_VAR 0 3
52011: PUSH
52012: LD_INT 6
52014: PPUSH
52015: LD_VAR 0 1
52019: PPUSH
52020: CALL_OW 321
52024: PUSH
52025: LD_INT 2
52027: EQUAL
52028: ST_TO_ADDR
52029: GO 52314
52031: LD_INT 22
52033: DOUBLE
52034: EQUAL
52035: IFTRUE 52045
52037: LD_INT 36
52039: DOUBLE
52040: EQUAL
52041: IFTRUE 52045
52043: GO 52070
52045: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52046: LD_ADDR_VAR 0 3
52050: PUSH
52051: LD_INT 15
52053: PPUSH
52054: LD_VAR 0 1
52058: PPUSH
52059: CALL_OW 321
52063: PUSH
52064: LD_INT 2
52066: EQUAL
52067: ST_TO_ADDR
52068: GO 52314
52070: LD_INT 30
52072: DOUBLE
52073: EQUAL
52074: IFTRUE 52078
52076: GO 52103
52078: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52079: LD_ADDR_VAR 0 3
52083: PUSH
52084: LD_INT 20
52086: PPUSH
52087: LD_VAR 0 1
52091: PPUSH
52092: CALL_OW 321
52096: PUSH
52097: LD_INT 2
52099: EQUAL
52100: ST_TO_ADDR
52101: GO 52314
52103: LD_INT 28
52105: DOUBLE
52106: EQUAL
52107: IFTRUE 52117
52109: LD_INT 21
52111: DOUBLE
52112: EQUAL
52113: IFTRUE 52117
52115: GO 52142
52117: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52118: LD_ADDR_VAR 0 3
52122: PUSH
52123: LD_INT 21
52125: PPUSH
52126: LD_VAR 0 1
52130: PPUSH
52131: CALL_OW 321
52135: PUSH
52136: LD_INT 2
52138: EQUAL
52139: ST_TO_ADDR
52140: GO 52314
52142: LD_INT 16
52144: DOUBLE
52145: EQUAL
52146: IFTRUE 52150
52148: GO 52175
52150: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52151: LD_ADDR_VAR 0 3
52155: PUSH
52156: LD_INT 84
52158: PPUSH
52159: LD_VAR 0 1
52163: PPUSH
52164: CALL_OW 321
52168: PUSH
52169: LD_INT 2
52171: EQUAL
52172: ST_TO_ADDR
52173: GO 52314
52175: LD_INT 19
52177: DOUBLE
52178: EQUAL
52179: IFTRUE 52189
52181: LD_INT 23
52183: DOUBLE
52184: EQUAL
52185: IFTRUE 52189
52187: GO 52214
52189: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52190: LD_ADDR_VAR 0 3
52194: PUSH
52195: LD_INT 83
52197: PPUSH
52198: LD_VAR 0 1
52202: PPUSH
52203: CALL_OW 321
52207: PUSH
52208: LD_INT 2
52210: EQUAL
52211: ST_TO_ADDR
52212: GO 52314
52214: LD_INT 17
52216: DOUBLE
52217: EQUAL
52218: IFTRUE 52222
52220: GO 52247
52222: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52223: LD_ADDR_VAR 0 3
52227: PUSH
52228: LD_INT 39
52230: PPUSH
52231: LD_VAR 0 1
52235: PPUSH
52236: CALL_OW 321
52240: PUSH
52241: LD_INT 2
52243: EQUAL
52244: ST_TO_ADDR
52245: GO 52314
52247: LD_INT 18
52249: DOUBLE
52250: EQUAL
52251: IFTRUE 52255
52253: GO 52280
52255: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52256: LD_ADDR_VAR 0 3
52260: PUSH
52261: LD_INT 40
52263: PPUSH
52264: LD_VAR 0 1
52268: PPUSH
52269: CALL_OW 321
52273: PUSH
52274: LD_INT 2
52276: EQUAL
52277: ST_TO_ADDR
52278: GO 52314
52280: LD_INT 27
52282: DOUBLE
52283: EQUAL
52284: IFTRUE 52288
52286: GO 52313
52288: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52289: LD_ADDR_VAR 0 3
52293: PUSH
52294: LD_INT 35
52296: PPUSH
52297: LD_VAR 0 1
52301: PPUSH
52302: CALL_OW 321
52306: PUSH
52307: LD_INT 2
52309: EQUAL
52310: ST_TO_ADDR
52311: GO 52314
52313: POP
// end ;
52314: LD_VAR 0 3
52318: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52319: LD_INT 0
52321: PPUSH
52322: PPUSH
52323: PPUSH
52324: PPUSH
52325: PPUSH
52326: PPUSH
52327: PPUSH
52328: PPUSH
52329: PPUSH
52330: PPUSH
52331: PPUSH
// result := false ;
52332: LD_ADDR_VAR 0 6
52336: PUSH
52337: LD_INT 0
52339: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52340: LD_VAR 0 1
52344: NOT
52345: PUSH
52346: LD_VAR 0 1
52350: PPUSH
52351: CALL_OW 266
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: IN
52366: NOT
52367: OR
52368: PUSH
52369: LD_VAR 0 2
52373: NOT
52374: OR
52375: PUSH
52376: LD_VAR 0 5
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: LD_INT 2
52389: PUSH
52390: LD_INT 3
52392: PUSH
52393: LD_INT 4
52395: PUSH
52396: LD_INT 5
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: IN
52407: NOT
52408: OR
52409: PUSH
52410: LD_VAR 0 3
52414: PPUSH
52415: LD_VAR 0 4
52419: PPUSH
52420: CALL_OW 488
52424: NOT
52425: OR
52426: IFFALSE 52430
// exit ;
52428: GO 53166
// side := GetSide ( depot ) ;
52430: LD_ADDR_VAR 0 9
52434: PUSH
52435: LD_VAR 0 1
52439: PPUSH
52440: CALL_OW 255
52444: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52445: LD_VAR 0 9
52449: PPUSH
52450: LD_VAR 0 2
52454: PPUSH
52455: CALL 51943 0 2
52459: NOT
52460: IFFALSE 52464
// exit ;
52462: GO 53166
// pom := GetBase ( depot ) ;
52464: LD_ADDR_VAR 0 10
52468: PUSH
52469: LD_VAR 0 1
52473: PPUSH
52474: CALL_OW 274
52478: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52479: LD_ADDR_VAR 0 11
52483: PUSH
52484: LD_VAR 0 2
52488: PPUSH
52489: LD_VAR 0 1
52493: PPUSH
52494: CALL_OW 248
52498: PPUSH
52499: CALL_OW 450
52503: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52504: LD_VAR 0 10
52508: PPUSH
52509: LD_INT 1
52511: PPUSH
52512: CALL_OW 275
52516: PUSH
52517: LD_VAR 0 11
52521: PUSH
52522: LD_INT 1
52524: ARRAY
52525: GREATEREQUAL
52526: PUSH
52527: LD_VAR 0 10
52531: PPUSH
52532: LD_INT 2
52534: PPUSH
52535: CALL_OW 275
52539: PUSH
52540: LD_VAR 0 11
52544: PUSH
52545: LD_INT 2
52547: ARRAY
52548: GREATEREQUAL
52549: AND
52550: PUSH
52551: LD_VAR 0 10
52555: PPUSH
52556: LD_INT 3
52558: PPUSH
52559: CALL_OW 275
52563: PUSH
52564: LD_VAR 0 11
52568: PUSH
52569: LD_INT 3
52571: ARRAY
52572: GREATEREQUAL
52573: AND
52574: NOT
52575: IFFALSE 52579
// exit ;
52577: GO 53166
// if GetBType ( depot ) = b_depot then
52579: LD_VAR 0 1
52583: PPUSH
52584: CALL_OW 266
52588: PUSH
52589: LD_INT 0
52591: EQUAL
52592: IFFALSE 52604
// dist := 28 else
52594: LD_ADDR_VAR 0 14
52598: PUSH
52599: LD_INT 28
52601: ST_TO_ADDR
52602: GO 52612
// dist := 36 ;
52604: LD_ADDR_VAR 0 14
52608: PUSH
52609: LD_INT 36
52611: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52612: LD_VAR 0 1
52616: PPUSH
52617: LD_VAR 0 3
52621: PPUSH
52622: LD_VAR 0 4
52626: PPUSH
52627: CALL_OW 297
52631: PUSH
52632: LD_VAR 0 14
52636: GREATER
52637: IFFALSE 52641
// exit ;
52639: GO 53166
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52641: LD_ADDR_VAR 0 12
52645: PUSH
52646: LD_VAR 0 2
52650: PPUSH
52651: LD_VAR 0 3
52655: PPUSH
52656: LD_VAR 0 4
52660: PPUSH
52661: LD_VAR 0 5
52665: PPUSH
52666: LD_VAR 0 1
52670: PPUSH
52671: CALL_OW 248
52675: PPUSH
52676: LD_INT 0
52678: PPUSH
52679: CALL 53171 0 6
52683: ST_TO_ADDR
// if not hexes then
52684: LD_VAR 0 12
52688: NOT
52689: IFFALSE 52693
// exit ;
52691: GO 53166
// hex := GetHexInfo ( x , y ) ;
52693: LD_ADDR_VAR 0 15
52697: PUSH
52698: LD_VAR 0 3
52702: PPUSH
52703: LD_VAR 0 4
52707: PPUSH
52708: CALL_OW 546
52712: ST_TO_ADDR
// if hex [ 1 ] then
52713: LD_VAR 0 15
52717: PUSH
52718: LD_INT 1
52720: ARRAY
52721: IFFALSE 52725
// exit ;
52723: GO 53166
// height := hex [ 2 ] ;
52725: LD_ADDR_VAR 0 13
52729: PUSH
52730: LD_VAR 0 15
52734: PUSH
52735: LD_INT 2
52737: ARRAY
52738: ST_TO_ADDR
// for i = 1 to hexes do
52739: LD_ADDR_VAR 0 7
52743: PUSH
52744: DOUBLE
52745: LD_INT 1
52747: DEC
52748: ST_TO_ADDR
52749: LD_VAR 0 12
52753: PUSH
52754: FOR_TO
52755: IFFALSE 53085
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52757: LD_VAR 0 12
52761: PUSH
52762: LD_VAR 0 7
52766: ARRAY
52767: PUSH
52768: LD_INT 1
52770: ARRAY
52771: PPUSH
52772: LD_VAR 0 12
52776: PUSH
52777: LD_VAR 0 7
52781: ARRAY
52782: PUSH
52783: LD_INT 2
52785: ARRAY
52786: PPUSH
52787: CALL_OW 488
52791: NOT
52792: PUSH
52793: LD_VAR 0 12
52797: PUSH
52798: LD_VAR 0 7
52802: ARRAY
52803: PUSH
52804: LD_INT 1
52806: ARRAY
52807: PPUSH
52808: LD_VAR 0 12
52812: PUSH
52813: LD_VAR 0 7
52817: ARRAY
52818: PUSH
52819: LD_INT 2
52821: ARRAY
52822: PPUSH
52823: CALL_OW 428
52827: PUSH
52828: LD_INT 0
52830: GREATER
52831: OR
52832: PUSH
52833: LD_VAR 0 12
52837: PUSH
52838: LD_VAR 0 7
52842: ARRAY
52843: PUSH
52844: LD_INT 1
52846: ARRAY
52847: PPUSH
52848: LD_VAR 0 12
52852: PUSH
52853: LD_VAR 0 7
52857: ARRAY
52858: PUSH
52859: LD_INT 2
52861: ARRAY
52862: PPUSH
52863: CALL_OW 351
52867: OR
52868: IFFALSE 52874
// exit ;
52870: POP
52871: POP
52872: GO 53166
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52874: LD_ADDR_VAR 0 8
52878: PUSH
52879: LD_VAR 0 12
52883: PUSH
52884: LD_VAR 0 7
52888: ARRAY
52889: PUSH
52890: LD_INT 1
52892: ARRAY
52893: PPUSH
52894: LD_VAR 0 12
52898: PUSH
52899: LD_VAR 0 7
52903: ARRAY
52904: PUSH
52905: LD_INT 2
52907: ARRAY
52908: PPUSH
52909: CALL_OW 546
52913: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52914: LD_VAR 0 8
52918: PUSH
52919: LD_INT 1
52921: ARRAY
52922: PUSH
52923: LD_VAR 0 8
52927: PUSH
52928: LD_INT 2
52930: ARRAY
52931: PUSH
52932: LD_VAR 0 13
52936: PUSH
52937: LD_INT 2
52939: PLUS
52940: GREATER
52941: OR
52942: PUSH
52943: LD_VAR 0 8
52947: PUSH
52948: LD_INT 2
52950: ARRAY
52951: PUSH
52952: LD_VAR 0 13
52956: PUSH
52957: LD_INT 2
52959: MINUS
52960: LESS
52961: OR
52962: PUSH
52963: LD_VAR 0 8
52967: PUSH
52968: LD_INT 3
52970: ARRAY
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: LD_INT 8
52977: PUSH
52978: LD_INT 9
52980: PUSH
52981: LD_INT 10
52983: PUSH
52984: LD_INT 11
52986: PUSH
52987: LD_INT 12
52989: PUSH
52990: LD_INT 13
52992: PUSH
52993: LD_INT 16
52995: PUSH
52996: LD_INT 17
52998: PUSH
52999: LD_INT 18
53001: PUSH
53002: LD_INT 19
53004: PUSH
53005: LD_INT 20
53007: PUSH
53008: LD_INT 21
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: IN
53026: NOT
53027: OR
53028: PUSH
53029: LD_VAR 0 8
53033: PUSH
53034: LD_INT 5
53036: ARRAY
53037: NOT
53038: OR
53039: PUSH
53040: LD_VAR 0 8
53044: PUSH
53045: LD_INT 6
53047: ARRAY
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: LD_INT 7
53057: PUSH
53058: LD_INT 9
53060: PUSH
53061: LD_INT 10
53063: PUSH
53064: LD_INT 11
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: IN
53075: NOT
53076: OR
53077: IFFALSE 53083
// exit ;
53079: POP
53080: POP
53081: GO 53166
// end ;
53083: GO 52754
53085: POP
53086: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53087: LD_VAR 0 9
53091: PPUSH
53092: LD_VAR 0 3
53096: PPUSH
53097: LD_VAR 0 4
53101: PPUSH
53102: LD_INT 20
53104: PPUSH
53105: CALL 45118 0 4
53109: PUSH
53110: LD_INT 4
53112: ARRAY
53113: IFFALSE 53117
// exit ;
53115: GO 53166
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53117: LD_VAR 0 2
53121: PUSH
53122: LD_INT 29
53124: PUSH
53125: LD_INT 30
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: IN
53132: PUSH
53133: LD_VAR 0 3
53137: PPUSH
53138: LD_VAR 0 4
53142: PPUSH
53143: LD_VAR 0 9
53147: PPUSH
53148: CALL_OW 440
53152: NOT
53153: AND
53154: IFFALSE 53158
// exit ;
53156: GO 53166
// result := true ;
53158: LD_ADDR_VAR 0 6
53162: PUSH
53163: LD_INT 1
53165: ST_TO_ADDR
// end ;
53166: LD_VAR 0 6
53170: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53171: LD_INT 0
53173: PPUSH
53174: PPUSH
53175: PPUSH
53176: PPUSH
53177: PPUSH
53178: PPUSH
53179: PPUSH
53180: PPUSH
53181: PPUSH
53182: PPUSH
53183: PPUSH
53184: PPUSH
53185: PPUSH
53186: PPUSH
53187: PPUSH
53188: PPUSH
53189: PPUSH
53190: PPUSH
53191: PPUSH
53192: PPUSH
53193: PPUSH
53194: PPUSH
53195: PPUSH
53196: PPUSH
53197: PPUSH
53198: PPUSH
53199: PPUSH
53200: PPUSH
53201: PPUSH
53202: PPUSH
53203: PPUSH
53204: PPUSH
53205: PPUSH
53206: PPUSH
53207: PPUSH
53208: PPUSH
53209: PPUSH
53210: PPUSH
53211: PPUSH
53212: PPUSH
53213: PPUSH
53214: PPUSH
53215: PPUSH
53216: PPUSH
53217: PPUSH
53218: PPUSH
53219: PPUSH
53220: PPUSH
53221: PPUSH
53222: PPUSH
53223: PPUSH
53224: PPUSH
53225: PPUSH
53226: PPUSH
53227: PPUSH
53228: PPUSH
53229: PPUSH
53230: PPUSH
// result = [ ] ;
53231: LD_ADDR_VAR 0 7
53235: PUSH
53236: EMPTY
53237: ST_TO_ADDR
// temp_list = [ ] ;
53238: LD_ADDR_VAR 0 9
53242: PUSH
53243: EMPTY
53244: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53245: LD_VAR 0 4
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 2
53258: PUSH
53259: LD_INT 3
53261: PUSH
53262: LD_INT 4
53264: PUSH
53265: LD_INT 5
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: IN
53276: NOT
53277: PUSH
53278: LD_VAR 0 1
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: IN
53293: PUSH
53294: LD_VAR 0 5
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: LD_INT 3
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: LIST
53312: IN
53313: NOT
53314: AND
53315: OR
53316: IFFALSE 53320
// exit ;
53318: GO 71711
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53320: LD_VAR 0 1
53324: PUSH
53325: LD_INT 6
53327: PUSH
53328: LD_INT 7
53330: PUSH
53331: LD_INT 8
53333: PUSH
53334: LD_INT 13
53336: PUSH
53337: LD_INT 12
53339: PUSH
53340: LD_INT 15
53342: PUSH
53343: LD_INT 11
53345: PUSH
53346: LD_INT 14
53348: PUSH
53349: LD_INT 10
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: IN
53363: IFFALSE 53373
// btype = b_lab ;
53365: LD_ADDR_VAR 0 1
53369: PUSH
53370: LD_INT 6
53372: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53373: LD_VAR 0 6
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: LD_INT 2
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: LIST
53391: IN
53392: NOT
53393: PUSH
53394: LD_VAR 0 1
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: LD_INT 2
53407: PUSH
53408: LD_INT 3
53410: PUSH
53411: LD_INT 6
53413: PUSH
53414: LD_INT 36
53416: PUSH
53417: LD_INT 4
53419: PUSH
53420: LD_INT 5
53422: PUSH
53423: LD_INT 31
53425: PUSH
53426: LD_INT 32
53428: PUSH
53429: LD_INT 33
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: IN
53445: NOT
53446: PUSH
53447: LD_VAR 0 6
53451: PUSH
53452: LD_INT 1
53454: EQUAL
53455: AND
53456: OR
53457: PUSH
53458: LD_VAR 0 1
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: LD_INT 3
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: IN
53473: NOT
53474: PUSH
53475: LD_VAR 0 6
53479: PUSH
53480: LD_INT 2
53482: EQUAL
53483: AND
53484: OR
53485: IFFALSE 53495
// mode = 0 ;
53487: LD_ADDR_VAR 0 6
53491: PUSH
53492: LD_INT 0
53494: ST_TO_ADDR
// case mode of 0 :
53495: LD_VAR 0 6
53499: PUSH
53500: LD_INT 0
53502: DOUBLE
53503: EQUAL
53504: IFTRUE 53508
53506: GO 64961
53508: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53509: LD_ADDR_VAR 0 11
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: LD_INT 2
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 3
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 3
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: LD_INT 2
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53702: LD_ADDR_VAR 0 12
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: LD_INT 1
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 1
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 2
53836: NEG
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 2
53848: NEG
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 3
53859: NEG
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 3
53870: NEG
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53898: LD_ADDR_VAR 0 13
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: LD_INT 2
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 2
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 2
54021: NEG
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 2
54033: NEG
54034: PUSH
54035: LD_INT 2
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: LD_INT 3
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 3
54057: NEG
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 3
54069: NEG
54070: PUSH
54071: LD_INT 3
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54097: LD_ADDR_VAR 0 14
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 2
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: LD_INT 2
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: LD_INT 3
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: LD_INT 3
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: LD_INT 2
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54293: LD_ADDR_VAR 0 15
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 2
54416: NEG
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 2
54427: NEG
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 3
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 3
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54486: LD_ADDR_VAR 0 16
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: LD_INT 2
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 2
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 2
54589: PUSH
54590: LD_INT 2
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: LD_INT 2
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 2
54609: NEG
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 2
54621: NEG
54622: PUSH
54623: LD_INT 2
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 3
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 3
54643: PUSH
54644: LD_INT 3
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 2
54653: PUSH
54654: LD_INT 3
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54679: LD_ADDR_VAR 0 17
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 2
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 2
54814: PUSH
54815: LD_INT 2
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: LD_INT 2
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: LD_INT 2
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 2
54866: NEG
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 2
54878: NEG
54879: PUSH
54880: LD_INT 2
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54909: LD_ADDR_VAR 0 18
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: LD_INT 2
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: LD_INT 1
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 2
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 2
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: LD_INT 2
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: LD_INT 2
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: NEG
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 2
55096: NEG
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 2
55108: NEG
55109: PUSH
55110: LD_INT 2
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55139: LD_ADDR_VAR 0 19
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: LD_INT 2
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: LD_INT 2
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 2
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: LD_INT 2
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: LD_INT 2
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: NEG
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 2
55338: NEG
55339: PUSH
55340: LD_INT 2
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55369: LD_ADDR_VAR 0 20
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 1
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: NEG
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: LD_INT 2
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: LD_INT 2
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: LD_INT 2
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 2
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 2
55556: NEG
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 2
55568: NEG
55569: PUSH
55570: LD_INT 2
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55599: LD_ADDR_VAR 0 21
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: LD_INT 2
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 2
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 2
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: LD_INT 2
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 2
55775: NEG
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 2
55798: NEG
55799: PUSH
55800: LD_INT 2
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55829: LD_ADDR_VAR 0 22
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: LD_INT 2
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: LD_INT 2
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: LD_INT 2
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 2
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 2
56005: NEG
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 2
56016: NEG
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: LD_INT 2
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56059: LD_ADDR_VAR 0 23
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: LD_INT 2
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 2
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 2
56235: NEG
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: NEG
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 2
56270: NEG
56271: PUSH
56272: LD_INT 3
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: LD_INT 3
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: LD_INT 2
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 2
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56339: LD_ADDR_VAR 0 24
56343: PUSH
56344: LD_INT 0
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: LD_INT 1
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: NEG
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: LD_INT 2
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: LD_INT 2
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 2
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 2
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 2
56474: PUSH
56475: LD_INT 2
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: LD_INT 2
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 2
56515: NEG
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 2
56526: NEG
56527: PUSH
56528: LD_INT 1
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: LD_INT 2
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: LD_INT 2
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 2
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 3
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 3
56582: PUSH
56583: LD_INT 2
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56615: LD_ADDR_VAR 0 25
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 1
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 1
56696: NEG
56697: PUSH
56698: LD_INT 2
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 2
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 2
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 2
56750: PUSH
56751: LD_INT 2
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: LD_INT 2
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 2
56791: NEG
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 2
56802: NEG
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 2
56814: NEG
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 3
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 3
56836: PUSH
56837: LD_INT 2
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 2
56846: PUSH
56847: LD_INT 3
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: LD_INT 3
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56889: LD_ADDR_VAR 0 26
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: LD_INT 1
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: LD_INT 1
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 1
56958: NEG
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: LD_INT 2
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: LD_INT 2
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: PUSH
56994: LD_INT 1
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 2
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 2
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 2
57024: PUSH
57025: LD_INT 2
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: LD_INT 2
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 0
57044: PUSH
57045: LD_INT 2
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 2
57065: NEG
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 2
57076: NEG
57077: PUSH
57078: LD_INT 1
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 2
57088: NEG
57089: PUSH
57090: LD_INT 2
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 2
57100: PUSH
57101: LD_INT 3
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: LD_INT 3
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 2
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57165: LD_ADDR_VAR 0 27
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 1
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: LD_INT 2
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 2
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 2
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 2
57300: PUSH
57301: LD_INT 2
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: LD_INT 2
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: NEG
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 2
57341: NEG
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: NEG
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: LD_INT 2
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: LD_INT 2
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 3
57398: NEG
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 3
57410: NEG
57411: PUSH
57412: LD_INT 2
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57445: LD_ADDR_VAR 0 28
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 1
57514: NEG
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: LD_INT 2
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: LD_INT 2
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: PUSH
57550: LD_INT 1
57552: NEG
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 2
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: LD_INT 2
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: LD_INT 2
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 0
57600: PUSH
57601: LD_INT 2
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: NEG
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 2
57632: NEG
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 2
57644: NEG
57645: PUSH
57646: LD_INT 2
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 2
57656: NEG
57657: PUSH
57658: LD_INT 3
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: NEG
57669: PUSH
57670: LD_INT 3
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 3
57680: NEG
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 3
57692: NEG
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57727: LD_ADDR_VAR 0 29
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: LD_INT 2
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: LD_INT 2
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 2
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 2
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: LD_INT 2
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: LD_INT 2
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 2
57893: NEG
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 2
57905: NEG
57906: PUSH
57907: LD_INT 2
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 2
57917: NEG
57918: PUSH
57919: LD_INT 3
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 2
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 3
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: LD_INT 3
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: LD_INT 2
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 3
57971: NEG
57972: PUSH
57973: LD_INT 2
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58006: LD_ADDR_VAR 0 30
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: LD_INT 1
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 2
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 2
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: LD_INT 2
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: LD_INT 1
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 2
58172: NEG
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 2
58183: NEG
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 1
58195: NEG
58196: PUSH
58197: LD_INT 3
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: LD_INT 2
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 3
58218: PUSH
58219: LD_INT 2
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 2
58228: PUSH
58229: LD_INT 3
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 3
58249: NEG
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58284: LD_ADDR_VAR 0 31
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: NEG
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: LD_INT 1
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: LD_INT 2
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 2
58398: PUSH
58399: LD_INT 1
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 2
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: LD_INT 2
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: LD_INT 2
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 2
58461: NEG
58462: PUSH
58463: LD_INT 2
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 2
58473: NEG
58474: PUSH
58475: LD_INT 3
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 3
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: LD_INT 3
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: LD_INT 2
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 3
58527: NEG
58528: PUSH
58529: LD_INT 2
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58562: LD_ADDR_VAR 0 32
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: LD_INT 1
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: NEG
58644: PUSH
58645: LD_INT 2
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 2
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: PUSH
58688: LD_INT 2
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: LD_INT 2
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 2
58728: NEG
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 2
58739: NEG
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: LD_INT 3
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: LD_INT 2
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 3
58774: PUSH
58775: LD_INT 2
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: LD_INT 3
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 3
58805: NEG
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58840: LD_ADDR_VAR 0 33
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: LD_INT 1
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: NEG
58922: PUSH
58923: LD_INT 2
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 2
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: PUSH
58965: LD_INT 2
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: LD_INT 2
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 2
58995: NEG
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: NEG
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 2
59018: NEG
59019: PUSH
59020: LD_INT 2
59022: NEG
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 2
59030: NEG
59031: PUSH
59032: LD_INT 3
59034: NEG
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 2
59042: PUSH
59043: LD_INT 1
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 3
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: LD_INT 3
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 3
59084: NEG
59085: PUSH
59086: LD_INT 2
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59119: LD_ADDR_VAR 0 34
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 1
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: NEG
59201: PUSH
59202: LD_INT 2
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: LD_INT 2
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 2
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 2
59244: PUSH
59245: LD_INT 2
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: LD_INT 2
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 2
59286: NEG
59287: PUSH
59288: LD_INT 1
59290: NEG
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 2
59298: NEG
59299: PUSH
59300: LD_INT 2
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: LD_INT 3
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: LD_INT 2
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 3
59333: PUSH
59334: LD_INT 2
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 2
59343: PUSH
59344: LD_INT 3
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 2
59353: NEG
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 3
59364: NEG
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59399: LD_ADDR_VAR 0 35
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 2
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 2
59490: NEG
59491: PUSH
59492: LD_INT 1
59494: NEG
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59511: LD_ADDR_VAR 0 36
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 1
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 1
59549: PUSH
59550: LD_INT 1
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: LD_INT 1
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 1
59569: NEG
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 1
59580: NEG
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 1
59592: NEG
59593: PUSH
59594: LD_INT 2
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: LD_INT 2
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59623: LD_ADDR_VAR 0 37
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 1
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 1
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 1
59715: NEG
59716: PUSH
59717: LD_INT 1
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59735: LD_ADDR_VAR 0 38
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 0
59752: PUSH
59753: LD_INT 1
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 1
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: LD_INT 1
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: LD_INT 1
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 1
59793: NEG
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 2
59816: PUSH
59817: LD_INT 1
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 2
59826: NEG
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59847: LD_ADDR_VAR 0 39
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 0
59864: PUSH
59865: LD_INT 1
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: LD_INT 1
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: LD_INT 1
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: LD_INT 2
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: LD_INT 2
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59959: LD_ADDR_VAR 0 40
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60071: LD_ADDR_VAR 0 41
60075: PUSH
60076: LD_INT 0
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 0
60088: PUSH
60089: LD_INT 1
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 1
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 1
60109: PUSH
60110: LD_INT 1
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 0
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 1
60129: NEG
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 1
60140: NEG
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: NEG
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 2
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 2
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 2
60195: PUSH
60196: LD_INT 2
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 1
60215: NEG
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 2
60226: NEG
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 2
60237: NEG
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 2
60249: NEG
60250: PUSH
60251: LD_INT 2
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: LD_INT 3
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 2
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 3
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 3
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 3
60304: PUSH
60305: LD_INT 2
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 3
60314: PUSH
60315: LD_INT 3
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 2
60324: PUSH
60325: LD_INT 3
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 2
60334: NEG
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 3
60345: NEG
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 3
60356: NEG
60357: PUSH
60358: LD_INT 1
60360: NEG
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 3
60368: NEG
60369: PUSH
60370: LD_INT 2
60372: NEG
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 3
60380: NEG
60381: PUSH
60382: LD_INT 3
60384: NEG
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60421: LD_ADDR_VAR 0 42
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 0
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: LD_INT 2
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: LD_INT 2
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 1
60525: PUSH
60526: LD_INT 1
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 2
60536: PUSH
60537: LD_INT 1
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 2
60546: PUSH
60547: LD_INT 2
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: LD_INT 2
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: LD_INT 2
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: NEG
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 2
60587: NEG
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 2
60599: NEG
60600: PUSH
60601: LD_INT 2
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 2
60611: NEG
60612: PUSH
60613: LD_INT 3
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: LD_INT 3
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: LD_INT 3
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: LD_INT 2
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 3
60657: PUSH
60658: LD_INT 2
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 3
60667: PUSH
60668: LD_INT 3
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 2
60677: PUSH
60678: LD_INT 3
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: LD_INT 3
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: LD_INT 3
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: LD_INT 2
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 3
60718: NEG
60719: PUSH
60720: LD_INT 2
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 3
60730: NEG
60731: PUSH
60732: LD_INT 3
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60771: LD_ADDR_VAR 0 43
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 1
60829: NEG
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 1
60840: NEG
60841: PUSH
60842: LD_INT 1
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: NEG
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: LD_INT 2
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 1
60875: PUSH
60876: LD_INT 1
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 2
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 2
60896: PUSH
60897: LD_INT 1
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: LD_INT 2
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: LD_INT 2
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 2
60937: NEG
60938: PUSH
60939: LD_INT 0
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 2
60948: NEG
60949: PUSH
60950: LD_INT 1
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: LD_INT 3
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: LD_INT 3
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: LD_INT 2
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 2
60994: PUSH
60995: LD_INT 1
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 3
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 3
61015: PUSH
61016: LD_INT 1
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 1
61025: PUSH
61026: LD_INT 3
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 0
61035: PUSH
61036: LD_INT 3
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 1
61045: NEG
61046: PUSH
61047: LD_INT 2
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 2
61056: NEG
61057: PUSH
61058: LD_INT 1
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 3
61067: NEG
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 3
61078: NEG
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61119: LD_ADDR_VAR 0 44
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 0
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: LD_INT 1
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: LD_INT 2
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: PUSH
61213: LD_INT 1
61215: NEG
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 2
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 2
61233: PUSH
61234: LD_INT 1
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 2
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 1
61253: PUSH
61254: LD_INT 2
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 1
61263: NEG
61264: PUSH
61265: LD_INT 1
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 2
61274: NEG
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 2
61285: NEG
61286: PUSH
61287: LD_INT 1
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: LD_INT 2
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 2
61309: NEG
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 2
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 3
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 3
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 3
61352: PUSH
61353: LD_INT 2
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 3
61362: PUSH
61363: LD_INT 3
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 2
61372: PUSH
61373: LD_INT 3
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 2
61382: NEG
61383: PUSH
61384: LD_INT 1
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 3
61393: NEG
61394: PUSH
61395: LD_INT 0
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 3
61404: NEG
61405: PUSH
61406: LD_INT 1
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 3
61416: NEG
61417: PUSH
61418: LD_INT 2
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 3
61428: NEG
61429: PUSH
61430: LD_INT 3
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61469: LD_ADDR_VAR 0 45
61473: PUSH
61474: LD_INT 0
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: LD_INT 1
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 1
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: LD_INT 1
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 1
61527: NEG
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: LD_INT 2
61565: NEG
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 1
61573: PUSH
61574: LD_INT 1
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 2
61584: PUSH
61585: LD_INT 1
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 2
61594: PUSH
61595: LD_INT 2
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: LD_INT 2
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: LD_INT 2
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 1
61624: NEG
61625: PUSH
61626: LD_INT 1
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 2
61635: NEG
61636: PUSH
61637: LD_INT 1
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 2
61647: NEG
61648: PUSH
61649: LD_INT 2
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 2
61659: NEG
61660: PUSH
61661: LD_INT 3
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: LD_INT 3
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: LD_INT 3
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 1
61694: PUSH
61695: LD_INT 2
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 3
61705: PUSH
61706: LD_INT 2
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 3
61715: PUSH
61716: LD_INT 3
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 2
61725: PUSH
61726: LD_INT 3
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: PUSH
61736: LD_INT 3
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: LD_INT 3
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 1
61755: NEG
61756: PUSH
61757: LD_INT 2
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 3
61766: NEG
61767: PUSH
61768: LD_INT 2
61770: NEG
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 3
61778: NEG
61779: PUSH
61780: LD_INT 3
61782: NEG
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61819: LD_ADDR_VAR 0 46
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: LD_INT 1
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 1
61877: NEG
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: NEG
61901: PUSH
61902: LD_INT 2
61904: NEG
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 0
61912: PUSH
61913: LD_INT 2
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 1
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 2
61934: PUSH
61935: LD_INT 0
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 1
61954: PUSH
61955: LD_INT 2
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 2
61985: NEG
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 2
61996: NEG
61997: PUSH
61998: LD_INT 1
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: NEG
62009: PUSH
62010: LD_INT 3
62012: NEG
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: LD_INT 3
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 1
62031: PUSH
62032: LD_INT 2
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 2
62042: PUSH
62043: LD_INT 1
62045: NEG
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 3
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 3
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: LD_INT 3
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: LD_INT 3
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 1
62093: NEG
62094: PUSH
62095: LD_INT 2
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 2
62104: NEG
62105: PUSH
62106: LD_INT 1
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 3
62115: NEG
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 3
62126: NEG
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62167: LD_ADDR_VAR 0 47
62171: PUSH
62172: LD_INT 0
62174: PUSH
62175: LD_INT 0
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 1
62205: PUSH
62206: LD_INT 1
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: LD_INT 1
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: NEG
62249: PUSH
62250: LD_INT 2
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 0
62260: PUSH
62261: LD_INT 2
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: PUSH
62272: LD_INT 1
62274: NEG
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 2
62282: NEG
62283: PUSH
62284: LD_INT 1
62286: NEG
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 2
62294: NEG
62295: PUSH
62296: LD_INT 2
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62318: LD_ADDR_VAR 0 48
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: LD_INT 1
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 1
62346: PUSH
62347: LD_INT 0
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 1
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 0
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 1
62376: NEG
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 1
62387: NEG
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: LD_INT 2
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: LD_INT 2
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 2
62433: PUSH
62434: LD_INT 0
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 2
62443: PUSH
62444: LD_INT 1
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62465: LD_ADDR_VAR 0 49
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: LD_INT 0
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: LD_INT 1
62485: NEG
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 1
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: LD_INT 1
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 0
62513: PUSH
62514: LD_INT 1
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 1
62523: NEG
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 1
62534: NEG
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 1
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 2
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 2
62567: PUSH
62568: LD_INT 1
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 2
62577: PUSH
62578: LD_INT 2
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 1
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62609: LD_ADDR_VAR 0 50
62613: PUSH
62614: LD_INT 0
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: LD_INT 0
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 1
62647: PUSH
62648: LD_INT 1
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: LD_INT 1
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: NEG
62679: PUSH
62680: LD_INT 1
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 2
62690: PUSH
62691: LD_INT 1
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 2
62700: PUSH
62701: LD_INT 2
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: LD_INT 2
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: LD_INT 2
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: NEG
62731: PUSH
62732: LD_INT 1
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62753: LD_ADDR_VAR 0 51
62757: PUSH
62758: LD_INT 0
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: LD_INT 1
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 1
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 1
62791: PUSH
62792: LD_INT 1
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: LD_INT 1
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 1
62811: NEG
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 1
62822: NEG
62823: PUSH
62824: LD_INT 1
62826: NEG
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: LD_INT 2
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: LD_INT 2
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 1
62854: NEG
62855: PUSH
62856: LD_INT 1
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 2
62865: NEG
62866: PUSH
62867: LD_INT 0
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 2
62876: NEG
62877: PUSH
62878: LD_INT 1
62880: NEG
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62900: LD_ADDR_VAR 0 52
62904: PUSH
62905: LD_INT 0
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 0
62917: PUSH
62918: LD_INT 1
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 1
62928: PUSH
62929: LD_INT 0
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 1
62938: PUSH
62939: LD_INT 1
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: LD_INT 1
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 1
62958: NEG
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 1
62969: NEG
62970: PUSH
62971: LD_INT 1
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 1
62981: NEG
62982: PUSH
62983: LD_INT 2
62985: NEG
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 2
63004: NEG
63005: PUSH
63006: LD_INT 0
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 2
63015: NEG
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 2
63027: NEG
63028: PUSH
63029: LD_INT 2
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63051: LD_ADDR_VAR 0 53
63055: PUSH
63056: LD_INT 0
63058: PUSH
63059: LD_INT 0
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 0
63068: PUSH
63069: LD_INT 1
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 1
63089: PUSH
63090: LD_INT 1
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 1
63109: NEG
63110: PUSH
63111: LD_INT 0
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: LD_INT 1
63124: NEG
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 1
63132: NEG
63133: PUSH
63134: LD_INT 2
63136: NEG
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: LD_INT 2
63147: NEG
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 1
63155: PUSH
63156: LD_INT 1
63158: NEG
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 2
63166: PUSH
63167: LD_INT 0
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 2
63176: PUSH
63177: LD_INT 1
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 2
63186: PUSH
63187: LD_INT 2
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: LD_INT 2
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 0
63206: PUSH
63207: LD_INT 2
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 1
63216: NEG
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 2
63227: NEG
63228: PUSH
63229: LD_INT 0
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 2
63238: NEG
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 2
63250: NEG
63251: PUSH
63252: LD_INT 2
63254: NEG
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63281: LD_ADDR_VAR 0 54
63285: PUSH
63286: LD_INT 0
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: LD_INT 1
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 1
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 1
63319: PUSH
63320: LD_INT 1
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: LD_INT 1
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 1
63339: NEG
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: NEG
63351: PUSH
63352: LD_INT 1
63354: NEG
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 1
63362: NEG
63363: PUSH
63364: LD_INT 2
63366: NEG
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 0
63374: PUSH
63375: LD_INT 2
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: LD_INT 1
63388: NEG
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 2
63396: PUSH
63397: LD_INT 0
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 2
63406: PUSH
63407: LD_INT 1
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 2
63416: PUSH
63417: LD_INT 2
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 1
63426: PUSH
63427: LD_INT 2
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: LD_INT 2
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 1
63446: NEG
63447: PUSH
63448: LD_INT 1
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 2
63457: NEG
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 2
63468: NEG
63469: PUSH
63470: LD_INT 1
63472: NEG
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 2
63480: NEG
63481: PUSH
63482: LD_INT 2
63484: NEG
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63511: LD_ADDR_VAR 0 55
63515: PUSH
63516: LD_INT 0
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: LD_INT 1
63531: NEG
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 1
63539: PUSH
63540: LD_INT 0
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 1
63549: PUSH
63550: LD_INT 1
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 1
63569: NEG
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 1
63580: NEG
63581: PUSH
63582: LD_INT 1
63584: NEG
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 1
63592: NEG
63593: PUSH
63594: LD_INT 2
63596: NEG
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: LD_INT 2
63607: NEG
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 1
63615: PUSH
63616: LD_INT 1
63618: NEG
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 2
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 2
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 2
63646: PUSH
63647: LD_INT 2
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 1
63656: PUSH
63657: LD_INT 2
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: LD_INT 2
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 1
63676: NEG
63677: PUSH
63678: LD_INT 1
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 2
63687: NEG
63688: PUSH
63689: LD_INT 0
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 2
63698: NEG
63699: PUSH
63700: LD_INT 1
63702: NEG
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 2
63710: NEG
63711: PUSH
63712: LD_INT 2
63714: NEG
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63741: LD_ADDR_VAR 0 56
63745: PUSH
63746: LD_INT 0
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: LD_INT 1
63761: NEG
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 1
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 1
63779: PUSH
63780: LD_INT 1
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: LD_INT 1
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 1
63799: NEG
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 1
63810: NEG
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 1
63822: NEG
63823: PUSH
63824: LD_INT 2
63826: NEG
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: LD_INT 2
63837: NEG
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 1
63845: PUSH
63846: LD_INT 1
63848: NEG
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 2
63856: PUSH
63857: LD_INT 0
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 2
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 2
63876: PUSH
63877: LD_INT 2
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 1
63886: PUSH
63887: LD_INT 2
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 0
63896: PUSH
63897: LD_INT 2
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 1
63906: NEG
63907: PUSH
63908: LD_INT 1
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 2
63917: NEG
63918: PUSH
63919: LD_INT 0
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 2
63928: NEG
63929: PUSH
63930: LD_INT 1
63932: NEG
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 2
63940: NEG
63941: PUSH
63942: LD_INT 2
63944: NEG
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63971: LD_ADDR_VAR 0 57
63975: PUSH
63976: LD_INT 0
63978: PUSH
63979: LD_INT 0
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 0
63988: PUSH
63989: LD_INT 1
63991: NEG
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 1
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 1
64009: PUSH
64010: LD_INT 1
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 0
64019: PUSH
64020: LD_INT 1
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 1
64029: NEG
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 1
64040: NEG
64041: PUSH
64042: LD_INT 1
64044: NEG
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 1
64052: NEG
64053: PUSH
64054: LD_INT 2
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: LD_INT 2
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 1
64075: PUSH
64076: LD_INT 1
64078: NEG
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 2
64086: PUSH
64087: LD_INT 0
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 2
64096: PUSH
64097: LD_INT 1
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 2
64106: PUSH
64107: LD_INT 2
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 1
64116: PUSH
64117: LD_INT 2
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 0
64126: PUSH
64127: LD_INT 2
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 1
64136: NEG
64137: PUSH
64138: LD_INT 1
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 2
64147: NEG
64148: PUSH
64149: LD_INT 0
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 2
64158: NEG
64159: PUSH
64160: LD_INT 1
64162: NEG
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 2
64170: NEG
64171: PUSH
64172: LD_INT 2
64174: NEG
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64201: LD_ADDR_VAR 0 58
64205: PUSH
64206: LD_INT 0
64208: PUSH
64209: LD_INT 0
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 0
64218: PUSH
64219: LD_INT 1
64221: NEG
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 1
64229: PUSH
64230: LD_INT 0
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: PUSH
64240: LD_INT 1
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 1
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: NEG
64260: PUSH
64261: LD_INT 0
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: NEG
64271: PUSH
64272: LD_INT 1
64274: NEG
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 1
64282: NEG
64283: PUSH
64284: LD_INT 2
64286: NEG
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: LD_INT 2
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 1
64305: PUSH
64306: LD_INT 1
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 2
64316: PUSH
64317: LD_INT 0
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 2
64326: PUSH
64327: LD_INT 1
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 2
64336: PUSH
64337: LD_INT 2
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 1
64346: PUSH
64347: LD_INT 2
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 0
64356: PUSH
64357: LD_INT 2
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 1
64366: NEG
64367: PUSH
64368: LD_INT 1
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 2
64377: NEG
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 2
64388: NEG
64389: PUSH
64390: LD_INT 1
64392: NEG
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 2
64400: NEG
64401: PUSH
64402: LD_INT 2
64404: NEG
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64431: LD_ADDR_VAR 0 59
64435: PUSH
64436: LD_INT 0
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: LD_INT 1
64451: NEG
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 1
64459: PUSH
64460: LD_INT 0
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 1
64469: PUSH
64470: LD_INT 1
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: LD_INT 1
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 1
64489: NEG
64490: PUSH
64491: LD_INT 0
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 1
64500: NEG
64501: PUSH
64502: LD_INT 1
64504: NEG
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64519: LD_ADDR_VAR 0 60
64523: PUSH
64524: LD_INT 0
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: LD_INT 1
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: LD_INT 0
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 1
64557: PUSH
64558: LD_INT 1
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 0
64567: PUSH
64568: LD_INT 1
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 1
64577: NEG
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 1
64588: NEG
64589: PUSH
64590: LD_INT 1
64592: NEG
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64607: LD_ADDR_VAR 0 61
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 0
64624: PUSH
64625: LD_INT 1
64627: NEG
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: PUSH
64636: LD_INT 0
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 1
64645: PUSH
64646: LD_INT 1
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 0
64655: PUSH
64656: LD_INT 1
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 1
64665: NEG
64666: PUSH
64667: LD_INT 0
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 1
64676: NEG
64677: PUSH
64678: LD_INT 1
64680: NEG
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64695: LD_ADDR_VAR 0 62
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: LD_INT 0
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 0
64712: PUSH
64713: LD_INT 1
64715: NEG
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 1
64723: PUSH
64724: LD_INT 0
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 1
64733: PUSH
64734: LD_INT 1
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 0
64743: PUSH
64744: LD_INT 1
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 1
64753: NEG
64754: PUSH
64755: LD_INT 0
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 1
64764: NEG
64765: PUSH
64766: LD_INT 1
64768: NEG
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64783: LD_ADDR_VAR 0 63
64787: PUSH
64788: LD_INT 0
64790: PUSH
64791: LD_INT 0
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: LD_INT 1
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: LD_INT 0
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 1
64821: PUSH
64822: LD_INT 1
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 0
64831: PUSH
64832: LD_INT 1
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 1
64841: NEG
64842: PUSH
64843: LD_INT 0
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 1
64852: NEG
64853: PUSH
64854: LD_INT 1
64856: NEG
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64871: LD_ADDR_VAR 0 64
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: LD_INT 0
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: LD_INT 1
64891: NEG
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 1
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 1
64909: PUSH
64910: LD_INT 1
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 0
64919: PUSH
64920: LD_INT 1
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: NEG
64930: PUSH
64931: LD_INT 0
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 1
64940: NEG
64941: PUSH
64942: LD_INT 1
64944: NEG
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: ST_TO_ADDR
// end ; 1 :
64959: GO 70856
64961: LD_INT 1
64963: DOUBLE
64964: EQUAL
64965: IFTRUE 64969
64967: GO 67592
64969: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64970: LD_ADDR_VAR 0 11
64974: PUSH
64975: LD_INT 1
64977: NEG
64978: PUSH
64979: LD_INT 3
64981: NEG
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: LD_INT 3
64992: NEG
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 1
65000: PUSH
65001: LD_INT 2
65003: NEG
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: LIST
65013: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65014: LD_ADDR_VAR 0 12
65018: PUSH
65019: LD_INT 2
65021: PUSH
65022: LD_INT 1
65024: NEG
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 3
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 3
65042: PUSH
65043: LD_INT 1
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: LIST
65054: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65055: LD_ADDR_VAR 0 13
65059: PUSH
65060: LD_INT 3
65062: PUSH
65063: LD_INT 2
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 3
65072: PUSH
65073: LD_INT 3
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 2
65082: PUSH
65083: LD_INT 3
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: LIST
65094: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65095: LD_ADDR_VAR 0 14
65099: PUSH
65100: LD_INT 1
65102: PUSH
65103: LD_INT 3
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 0
65112: PUSH
65113: LD_INT 3
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 1
65122: NEG
65123: PUSH
65124: LD_INT 2
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: LIST
65135: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65136: LD_ADDR_VAR 0 15
65140: PUSH
65141: LD_INT 2
65143: NEG
65144: PUSH
65145: LD_INT 1
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 3
65154: NEG
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 3
65165: NEG
65166: PUSH
65167: LD_INT 1
65169: NEG
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: LIST
65179: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65180: LD_ADDR_VAR 0 16
65184: PUSH
65185: LD_INT 2
65187: NEG
65188: PUSH
65189: LD_INT 3
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 3
65199: NEG
65200: PUSH
65201: LD_INT 2
65203: NEG
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 3
65211: NEG
65212: PUSH
65213: LD_INT 3
65215: NEG
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: LIST
65225: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65226: LD_ADDR_VAR 0 17
65230: PUSH
65231: LD_INT 1
65233: NEG
65234: PUSH
65235: LD_INT 3
65237: NEG
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 0
65245: PUSH
65246: LD_INT 3
65248: NEG
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 1
65256: PUSH
65257: LD_INT 2
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: LIST
65269: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65270: LD_ADDR_VAR 0 18
65274: PUSH
65275: LD_INT 2
65277: PUSH
65278: LD_INT 1
65280: NEG
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 3
65288: PUSH
65289: LD_INT 0
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 3
65298: PUSH
65299: LD_INT 1
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: LIST
65310: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65311: LD_ADDR_VAR 0 19
65315: PUSH
65316: LD_INT 3
65318: PUSH
65319: LD_INT 2
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 3
65328: PUSH
65329: LD_INT 3
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 2
65338: PUSH
65339: LD_INT 3
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: LIST
65350: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65351: LD_ADDR_VAR 0 20
65355: PUSH
65356: LD_INT 1
65358: PUSH
65359: LD_INT 3
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: LD_INT 3
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 1
65378: NEG
65379: PUSH
65380: LD_INT 2
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: LIST
65391: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65392: LD_ADDR_VAR 0 21
65396: PUSH
65397: LD_INT 2
65399: NEG
65400: PUSH
65401: LD_INT 1
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 3
65410: NEG
65411: PUSH
65412: LD_INT 0
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 3
65421: NEG
65422: PUSH
65423: LD_INT 1
65425: NEG
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: LIST
65435: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65436: LD_ADDR_VAR 0 22
65440: PUSH
65441: LD_INT 2
65443: NEG
65444: PUSH
65445: LD_INT 3
65447: NEG
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 3
65455: NEG
65456: PUSH
65457: LD_INT 2
65459: NEG
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 3
65467: NEG
65468: PUSH
65469: LD_INT 3
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: LIST
65481: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65482: LD_ADDR_VAR 0 23
65486: PUSH
65487: LD_INT 0
65489: PUSH
65490: LD_INT 3
65492: NEG
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 1
65500: NEG
65501: PUSH
65502: LD_INT 4
65504: NEG
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 1
65512: PUSH
65513: LD_INT 3
65515: NEG
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: LIST
65525: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65526: LD_ADDR_VAR 0 24
65530: PUSH
65531: LD_INT 3
65533: PUSH
65534: LD_INT 0
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 3
65543: PUSH
65544: LD_INT 1
65546: NEG
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 4
65554: PUSH
65555: LD_INT 1
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: LIST
65566: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65567: LD_ADDR_VAR 0 25
65571: PUSH
65572: LD_INT 3
65574: PUSH
65575: LD_INT 3
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 4
65584: PUSH
65585: LD_INT 3
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 3
65594: PUSH
65595: LD_INT 4
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: LIST
65606: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65607: LD_ADDR_VAR 0 26
65611: PUSH
65612: LD_INT 0
65614: PUSH
65615: LD_INT 3
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 1
65624: PUSH
65625: LD_INT 4
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 1
65634: NEG
65635: PUSH
65636: LD_INT 3
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: LIST
65647: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65648: LD_ADDR_VAR 0 27
65652: PUSH
65653: LD_INT 3
65655: NEG
65656: PUSH
65657: LD_INT 0
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 3
65666: NEG
65667: PUSH
65668: LD_INT 1
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 4
65677: NEG
65678: PUSH
65679: LD_INT 1
65681: NEG
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: LIST
65691: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65692: LD_ADDR_VAR 0 28
65696: PUSH
65697: LD_INT 3
65699: NEG
65700: PUSH
65701: LD_INT 3
65703: NEG
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 3
65711: NEG
65712: PUSH
65713: LD_INT 4
65715: NEG
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 4
65723: NEG
65724: PUSH
65725: LD_INT 3
65727: NEG
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: LIST
65737: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65738: LD_ADDR_VAR 0 29
65742: PUSH
65743: LD_INT 1
65745: NEG
65746: PUSH
65747: LD_INT 3
65749: NEG
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 0
65757: PUSH
65758: LD_INT 3
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 1
65768: PUSH
65769: LD_INT 2
65771: NEG
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 1
65779: NEG
65780: PUSH
65781: LD_INT 4
65783: NEG
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 0
65791: PUSH
65792: LD_INT 4
65794: NEG
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 1
65802: PUSH
65803: LD_INT 3
65805: NEG
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 1
65813: NEG
65814: PUSH
65815: LD_INT 5
65817: NEG
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 0
65825: PUSH
65826: LD_INT 5
65828: NEG
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 1
65836: PUSH
65837: LD_INT 4
65839: NEG
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 1
65847: NEG
65848: PUSH
65849: LD_INT 6
65851: NEG
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 0
65859: PUSH
65860: LD_INT 6
65862: NEG
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 1
65870: PUSH
65871: LD_INT 5
65873: NEG
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65893: LD_ADDR_VAR 0 30
65897: PUSH
65898: LD_INT 2
65900: PUSH
65901: LD_INT 1
65903: NEG
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 3
65911: PUSH
65912: LD_INT 0
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 3
65921: PUSH
65922: LD_INT 1
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 3
65931: PUSH
65932: LD_INT 1
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 4
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 4
65952: PUSH
65953: LD_INT 1
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 4
65962: PUSH
65963: LD_INT 1
65965: NEG
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 5
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 5
65983: PUSH
65984: LD_INT 1
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 5
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 6
66004: PUSH
66005: LD_INT 0
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 6
66014: PUSH
66015: LD_INT 1
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66036: LD_ADDR_VAR 0 31
66040: PUSH
66041: LD_INT 3
66043: PUSH
66044: LD_INT 2
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 3
66053: PUSH
66054: LD_INT 3
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 2
66063: PUSH
66064: LD_INT 3
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 4
66073: PUSH
66074: LD_INT 3
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 4
66083: PUSH
66084: LD_INT 4
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 3
66093: PUSH
66094: LD_INT 4
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 5
66103: PUSH
66104: LD_INT 4
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 5
66113: PUSH
66114: LD_INT 5
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 4
66123: PUSH
66124: LD_INT 5
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 6
66133: PUSH
66134: LD_INT 5
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 6
66143: PUSH
66144: LD_INT 6
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 5
66153: PUSH
66154: LD_INT 6
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66175: LD_ADDR_VAR 0 32
66179: PUSH
66180: LD_INT 1
66182: PUSH
66183: LD_INT 3
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 0
66192: PUSH
66193: LD_INT 3
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 1
66202: NEG
66203: PUSH
66204: LD_INT 2
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 1
66213: PUSH
66214: LD_INT 4
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 0
66223: PUSH
66224: LD_INT 4
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 1
66233: NEG
66234: PUSH
66235: LD_INT 3
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 1
66244: PUSH
66245: LD_INT 5
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 0
66254: PUSH
66255: LD_INT 5
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 1
66264: NEG
66265: PUSH
66266: LD_INT 4
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 1
66275: PUSH
66276: LD_INT 6
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 0
66285: PUSH
66286: LD_INT 6
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 1
66295: NEG
66296: PUSH
66297: LD_INT 5
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66318: LD_ADDR_VAR 0 33
66322: PUSH
66323: LD_INT 2
66325: NEG
66326: PUSH
66327: LD_INT 1
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 3
66336: NEG
66337: PUSH
66338: LD_INT 0
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 3
66347: NEG
66348: PUSH
66349: LD_INT 1
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 3
66359: NEG
66360: PUSH
66361: LD_INT 1
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 4
66370: NEG
66371: PUSH
66372: LD_INT 0
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 4
66381: NEG
66382: PUSH
66383: LD_INT 1
66385: NEG
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: LD_INT 4
66393: NEG
66394: PUSH
66395: LD_INT 1
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 5
66404: NEG
66405: PUSH
66406: LD_INT 0
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 5
66415: NEG
66416: PUSH
66417: LD_INT 1
66419: NEG
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 5
66427: NEG
66428: PUSH
66429: LD_INT 1
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 6
66438: NEG
66439: PUSH
66440: LD_INT 0
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 6
66449: NEG
66450: PUSH
66451: LD_INT 1
66453: NEG
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66473: LD_ADDR_VAR 0 34
66477: PUSH
66478: LD_INT 2
66480: NEG
66481: PUSH
66482: LD_INT 3
66484: NEG
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 3
66492: NEG
66493: PUSH
66494: LD_INT 2
66496: NEG
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 3
66504: NEG
66505: PUSH
66506: LD_INT 3
66508: NEG
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 3
66516: NEG
66517: PUSH
66518: LD_INT 4
66520: NEG
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 4
66528: NEG
66529: PUSH
66530: LD_INT 3
66532: NEG
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 4
66540: NEG
66541: PUSH
66542: LD_INT 4
66544: NEG
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 4
66552: NEG
66553: PUSH
66554: LD_INT 5
66556: NEG
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 5
66564: NEG
66565: PUSH
66566: LD_INT 4
66568: NEG
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 5
66576: NEG
66577: PUSH
66578: LD_INT 5
66580: NEG
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 5
66588: NEG
66589: PUSH
66590: LD_INT 6
66592: NEG
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 6
66600: NEG
66601: PUSH
66602: LD_INT 5
66604: NEG
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 6
66612: NEG
66613: PUSH
66614: LD_INT 6
66616: NEG
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66636: LD_ADDR_VAR 0 41
66640: PUSH
66641: LD_INT 0
66643: PUSH
66644: LD_INT 2
66646: NEG
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 1
66654: NEG
66655: PUSH
66656: LD_INT 3
66658: NEG
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 1
66666: PUSH
66667: LD_INT 2
66669: NEG
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: LIST
66679: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66680: LD_ADDR_VAR 0 42
66684: PUSH
66685: LD_INT 2
66687: PUSH
66688: LD_INT 0
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 2
66697: PUSH
66698: LD_INT 1
66700: NEG
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 3
66708: PUSH
66709: LD_INT 1
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: LIST
66720: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66721: LD_ADDR_VAR 0 43
66725: PUSH
66726: LD_INT 2
66728: PUSH
66729: LD_INT 2
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 3
66738: PUSH
66739: LD_INT 2
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 2
66748: PUSH
66749: LD_INT 3
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: LIST
66760: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66761: LD_ADDR_VAR 0 44
66765: PUSH
66766: LD_INT 0
66768: PUSH
66769: LD_INT 2
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 1
66778: PUSH
66779: LD_INT 3
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 1
66788: NEG
66789: PUSH
66790: LD_INT 2
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: LIST
66801: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66802: LD_ADDR_VAR 0 45
66806: PUSH
66807: LD_INT 2
66809: NEG
66810: PUSH
66811: LD_INT 0
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 2
66820: NEG
66821: PUSH
66822: LD_INT 1
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 3
66831: NEG
66832: PUSH
66833: LD_INT 1
66835: NEG
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: LIST
66845: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66846: LD_ADDR_VAR 0 46
66850: PUSH
66851: LD_INT 2
66853: NEG
66854: PUSH
66855: LD_INT 2
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 2
66865: NEG
66866: PUSH
66867: LD_INT 3
66869: NEG
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 3
66877: NEG
66878: PUSH
66879: LD_INT 2
66881: NEG
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: LIST
66891: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66892: LD_ADDR_VAR 0 47
66896: PUSH
66897: LD_INT 2
66899: NEG
66900: PUSH
66901: LD_INT 3
66903: NEG
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 1
66911: NEG
66912: PUSH
66913: LD_INT 3
66915: NEG
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66925: LD_ADDR_VAR 0 48
66929: PUSH
66930: LD_INT 1
66932: PUSH
66933: LD_INT 2
66935: NEG
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 2
66943: PUSH
66944: LD_INT 1
66946: NEG
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66956: LD_ADDR_VAR 0 49
66960: PUSH
66961: LD_INT 3
66963: PUSH
66964: LD_INT 1
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 3
66973: PUSH
66974: LD_INT 2
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66985: LD_ADDR_VAR 0 50
66989: PUSH
66990: LD_INT 2
66992: PUSH
66993: LD_INT 3
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 1
67002: PUSH
67003: LD_INT 3
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67014: LD_ADDR_VAR 0 51
67018: PUSH
67019: LD_INT 1
67021: NEG
67022: PUSH
67023: LD_INT 2
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 2
67032: NEG
67033: PUSH
67034: LD_INT 1
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67045: LD_ADDR_VAR 0 52
67049: PUSH
67050: LD_INT 3
67052: NEG
67053: PUSH
67054: LD_INT 1
67056: NEG
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 3
67064: NEG
67065: PUSH
67066: LD_INT 2
67068: NEG
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67078: LD_ADDR_VAR 0 53
67082: PUSH
67083: LD_INT 1
67085: NEG
67086: PUSH
67087: LD_INT 3
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 0
67097: PUSH
67098: LD_INT 3
67100: NEG
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 1
67108: PUSH
67109: LD_INT 2
67111: NEG
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: LIST
67121: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67122: LD_ADDR_VAR 0 54
67126: PUSH
67127: LD_INT 2
67129: PUSH
67130: LD_INT 1
67132: NEG
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 3
67140: PUSH
67141: LD_INT 0
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 3
67150: PUSH
67151: LD_INT 1
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: LIST
67162: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67163: LD_ADDR_VAR 0 55
67167: PUSH
67168: LD_INT 3
67170: PUSH
67171: LD_INT 2
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 3
67180: PUSH
67181: LD_INT 3
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 2
67190: PUSH
67191: LD_INT 3
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: LIST
67202: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67203: LD_ADDR_VAR 0 56
67207: PUSH
67208: LD_INT 1
67210: PUSH
67211: LD_INT 3
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 0
67220: PUSH
67221: LD_INT 3
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 1
67230: NEG
67231: PUSH
67232: LD_INT 2
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: LIST
67243: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67244: LD_ADDR_VAR 0 57
67248: PUSH
67249: LD_INT 2
67251: NEG
67252: PUSH
67253: LD_INT 1
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 3
67262: NEG
67263: PUSH
67264: LD_INT 0
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 3
67273: NEG
67274: PUSH
67275: LD_INT 1
67277: NEG
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: LIST
67287: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67288: LD_ADDR_VAR 0 58
67292: PUSH
67293: LD_INT 2
67295: NEG
67296: PUSH
67297: LD_INT 3
67299: NEG
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 3
67307: NEG
67308: PUSH
67309: LD_INT 2
67311: NEG
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 3
67319: NEG
67320: PUSH
67321: LD_INT 3
67323: NEG
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: LIST
67333: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67334: LD_ADDR_VAR 0 59
67338: PUSH
67339: LD_INT 1
67341: NEG
67342: PUSH
67343: LD_INT 2
67345: NEG
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 0
67353: PUSH
67354: LD_INT 2
67356: NEG
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 1
67364: PUSH
67365: LD_INT 1
67367: NEG
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: LIST
67377: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67378: LD_ADDR_VAR 0 60
67382: PUSH
67383: LD_INT 1
67385: PUSH
67386: LD_INT 1
67388: NEG
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 2
67396: PUSH
67397: LD_INT 0
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 2
67406: PUSH
67407: LD_INT 1
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: LIST
67418: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67419: LD_ADDR_VAR 0 61
67423: PUSH
67424: LD_INT 2
67426: PUSH
67427: LD_INT 1
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 2
67436: PUSH
67437: LD_INT 2
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 1
67446: PUSH
67447: LD_INT 2
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: LIST
67458: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67459: LD_ADDR_VAR 0 62
67463: PUSH
67464: LD_INT 1
67466: PUSH
67467: LD_INT 2
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 0
67476: PUSH
67477: LD_INT 2
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 1
67486: NEG
67487: PUSH
67488: LD_INT 1
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: LIST
67499: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67500: LD_ADDR_VAR 0 63
67504: PUSH
67505: LD_INT 1
67507: NEG
67508: PUSH
67509: LD_INT 1
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 2
67518: NEG
67519: PUSH
67520: LD_INT 0
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 2
67529: NEG
67530: PUSH
67531: LD_INT 1
67533: NEG
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: LIST
67543: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67544: LD_ADDR_VAR 0 64
67548: PUSH
67549: LD_INT 1
67551: NEG
67552: PUSH
67553: LD_INT 2
67555: NEG
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 2
67563: NEG
67564: PUSH
67565: LD_INT 1
67567: NEG
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 2
67575: NEG
67576: PUSH
67577: LD_INT 2
67579: NEG
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: LIST
67589: ST_TO_ADDR
// end ; 2 :
67590: GO 70856
67592: LD_INT 2
67594: DOUBLE
67595: EQUAL
67596: IFTRUE 67600
67598: GO 70855
67600: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67601: LD_ADDR_VAR 0 29
67605: PUSH
67606: LD_INT 4
67608: PUSH
67609: LD_INT 0
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 4
67618: PUSH
67619: LD_INT 1
67621: NEG
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 5
67629: PUSH
67630: LD_INT 0
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 5
67639: PUSH
67640: LD_INT 1
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 4
67649: PUSH
67650: LD_INT 1
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: LD_INT 3
67659: PUSH
67660: LD_INT 0
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 3
67669: PUSH
67670: LD_INT 1
67672: NEG
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 3
67680: PUSH
67681: LD_INT 2
67683: NEG
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 5
67691: PUSH
67692: LD_INT 2
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 3
67701: PUSH
67702: LD_INT 3
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 3
67711: PUSH
67712: LD_INT 2
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 4
67721: PUSH
67722: LD_INT 3
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 4
67731: PUSH
67732: LD_INT 4
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 3
67741: PUSH
67742: LD_INT 4
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 2
67751: PUSH
67752: LD_INT 3
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 2
67761: PUSH
67762: LD_INT 2
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 4
67771: PUSH
67772: LD_INT 2
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 2
67781: PUSH
67782: LD_INT 4
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 0
67791: PUSH
67792: LD_INT 4
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 0
67801: PUSH
67802: LD_INT 3
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 1
67811: PUSH
67812: LD_INT 4
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 1
67821: PUSH
67822: LD_INT 5
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 0
67831: PUSH
67832: LD_INT 5
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 1
67841: NEG
67842: PUSH
67843: LD_INT 4
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 1
67852: NEG
67853: PUSH
67854: LD_INT 3
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 2
67863: PUSH
67864: LD_INT 5
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: LD_INT 2
67873: NEG
67874: PUSH
67875: LD_INT 3
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 3
67884: NEG
67885: PUSH
67886: LD_INT 0
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 3
67895: NEG
67896: PUSH
67897: LD_INT 1
67899: NEG
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 2
67907: NEG
67908: PUSH
67909: LD_INT 0
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 2
67918: NEG
67919: PUSH
67920: LD_INT 1
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 3
67929: NEG
67930: PUSH
67931: LD_INT 1
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 4
67940: NEG
67941: PUSH
67942: LD_INT 0
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 4
67951: NEG
67952: PUSH
67953: LD_INT 1
67955: NEG
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 4
67963: NEG
67964: PUSH
67965: LD_INT 2
67967: NEG
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 2
67975: NEG
67976: PUSH
67977: LD_INT 2
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 4
67986: NEG
67987: PUSH
67988: LD_INT 4
67990: NEG
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 4
67998: NEG
67999: PUSH
68000: LD_INT 5
68002: NEG
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 3
68010: NEG
68011: PUSH
68012: LD_INT 4
68014: NEG
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 3
68022: NEG
68023: PUSH
68024: LD_INT 3
68026: NEG
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 4
68034: NEG
68035: PUSH
68036: LD_INT 3
68038: NEG
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 5
68046: NEG
68047: PUSH
68048: LD_INT 4
68050: NEG
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 5
68058: NEG
68059: PUSH
68060: LD_INT 5
68062: NEG
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 3
68070: NEG
68071: PUSH
68072: LD_INT 5
68074: NEG
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 5
68082: NEG
68083: PUSH
68084: LD_INT 3
68086: NEG
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68139: LD_ADDR_VAR 0 30
68143: PUSH
68144: LD_INT 4
68146: PUSH
68147: LD_INT 4
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 4
68156: PUSH
68157: LD_INT 3
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 5
68166: PUSH
68167: LD_INT 4
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 5
68176: PUSH
68177: LD_INT 5
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 4
68186: PUSH
68187: LD_INT 5
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 3
68196: PUSH
68197: LD_INT 4
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 3
68206: PUSH
68207: LD_INT 3
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 5
68216: PUSH
68217: LD_INT 3
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 3
68226: PUSH
68227: LD_INT 5
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 0
68236: PUSH
68237: LD_INT 3
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 0
68246: PUSH
68247: LD_INT 2
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 1
68256: PUSH
68257: LD_INT 3
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 1
68266: PUSH
68267: LD_INT 4
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 0
68276: PUSH
68277: LD_INT 4
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 1
68286: NEG
68287: PUSH
68288: LD_INT 3
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 1
68297: NEG
68298: PUSH
68299: LD_INT 2
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 2
68308: PUSH
68309: LD_INT 4
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 2
68318: NEG
68319: PUSH
68320: LD_INT 2
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 4
68329: NEG
68330: PUSH
68331: LD_INT 0
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 4
68340: NEG
68341: PUSH
68342: LD_INT 1
68344: NEG
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 3
68352: NEG
68353: PUSH
68354: LD_INT 0
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 3
68363: NEG
68364: PUSH
68365: LD_INT 1
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 4
68374: NEG
68375: PUSH
68376: LD_INT 1
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 5
68385: NEG
68386: PUSH
68387: LD_INT 0
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 5
68396: NEG
68397: PUSH
68398: LD_INT 1
68400: NEG
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 5
68408: NEG
68409: PUSH
68410: LD_INT 2
68412: NEG
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 3
68420: NEG
68421: PUSH
68422: LD_INT 2
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: LD_INT 3
68431: NEG
68432: PUSH
68433: LD_INT 3
68435: NEG
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 3
68443: NEG
68444: PUSH
68445: LD_INT 4
68447: NEG
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: LD_INT 2
68455: NEG
68456: PUSH
68457: LD_INT 3
68459: NEG
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 2
68467: NEG
68468: PUSH
68469: LD_INT 2
68471: NEG
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 3
68479: NEG
68480: PUSH
68481: LD_INT 2
68483: NEG
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 4
68491: NEG
68492: PUSH
68493: LD_INT 3
68495: NEG
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 4
68503: NEG
68504: PUSH
68505: LD_INT 4
68507: NEG
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 2
68515: NEG
68516: PUSH
68517: LD_INT 4
68519: NEG
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 4
68527: NEG
68528: PUSH
68529: LD_INT 2
68531: NEG
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 0
68539: PUSH
68540: LD_INT 4
68542: NEG
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 0
68550: PUSH
68551: LD_INT 5
68553: NEG
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 1
68561: PUSH
68562: LD_INT 4
68564: NEG
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 1
68572: PUSH
68573: LD_INT 3
68575: NEG
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 0
68583: PUSH
68584: LD_INT 3
68586: NEG
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 1
68594: NEG
68595: PUSH
68596: LD_INT 4
68598: NEG
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 1
68606: NEG
68607: PUSH
68608: LD_INT 5
68610: NEG
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 2
68618: PUSH
68619: LD_INT 3
68621: NEG
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 2
68629: NEG
68630: PUSH
68631: LD_INT 5
68633: NEG
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68686: LD_ADDR_VAR 0 31
68690: PUSH
68691: LD_INT 0
68693: PUSH
68694: LD_INT 4
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 0
68703: PUSH
68704: LD_INT 3
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 1
68713: PUSH
68714: LD_INT 4
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 1
68723: PUSH
68724: LD_INT 5
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 0
68733: PUSH
68734: LD_INT 5
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 1
68743: NEG
68744: PUSH
68745: LD_INT 4
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 1
68754: NEG
68755: PUSH
68756: LD_INT 3
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 2
68765: PUSH
68766: LD_INT 5
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 2
68775: NEG
68776: PUSH
68777: LD_INT 3
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 3
68786: NEG
68787: PUSH
68788: LD_INT 0
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 3
68797: NEG
68798: PUSH
68799: LD_INT 1
68801: NEG
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 2
68809: NEG
68810: PUSH
68811: LD_INT 0
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 2
68820: NEG
68821: PUSH
68822: LD_INT 1
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: LD_INT 3
68831: NEG
68832: PUSH
68833: LD_INT 1
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 4
68842: NEG
68843: PUSH
68844: LD_INT 0
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 4
68853: NEG
68854: PUSH
68855: LD_INT 1
68857: NEG
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 4
68865: NEG
68866: PUSH
68867: LD_INT 2
68869: NEG
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 2
68877: NEG
68878: PUSH
68879: LD_INT 2
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 4
68888: NEG
68889: PUSH
68890: LD_INT 4
68892: NEG
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 4
68900: NEG
68901: PUSH
68902: LD_INT 5
68904: NEG
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 3
68912: NEG
68913: PUSH
68914: LD_INT 4
68916: NEG
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 3
68924: NEG
68925: PUSH
68926: LD_INT 3
68928: NEG
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 4
68936: NEG
68937: PUSH
68938: LD_INT 3
68940: NEG
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 5
68948: NEG
68949: PUSH
68950: LD_INT 4
68952: NEG
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 5
68960: NEG
68961: PUSH
68962: LD_INT 5
68964: NEG
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 3
68972: NEG
68973: PUSH
68974: LD_INT 5
68976: NEG
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 5
68984: NEG
68985: PUSH
68986: LD_INT 3
68988: NEG
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 0
68996: PUSH
68997: LD_INT 3
68999: NEG
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 0
69007: PUSH
69008: LD_INT 4
69010: NEG
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 1
69018: PUSH
69019: LD_INT 3
69021: NEG
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 1
69029: PUSH
69030: LD_INT 2
69032: NEG
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 0
69040: PUSH
69041: LD_INT 2
69043: NEG
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 1
69051: NEG
69052: PUSH
69053: LD_INT 3
69055: NEG
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 1
69063: NEG
69064: PUSH
69065: LD_INT 4
69067: NEG
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 2
69075: PUSH
69076: LD_INT 2
69078: NEG
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 2
69086: NEG
69087: PUSH
69088: LD_INT 4
69090: NEG
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 4
69098: PUSH
69099: LD_INT 0
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 4
69108: PUSH
69109: LD_INT 1
69111: NEG
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 5
69119: PUSH
69120: LD_INT 0
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 5
69129: PUSH
69130: LD_INT 1
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 4
69139: PUSH
69140: LD_INT 1
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 3
69149: PUSH
69150: LD_INT 0
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 3
69159: PUSH
69160: LD_INT 1
69162: NEG
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 3
69170: PUSH
69171: LD_INT 2
69173: NEG
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 5
69181: PUSH
69182: LD_INT 2
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69236: LD_ADDR_VAR 0 32
69240: PUSH
69241: LD_INT 4
69243: NEG
69244: PUSH
69245: LD_INT 0
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 4
69254: NEG
69255: PUSH
69256: LD_INT 1
69258: NEG
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 3
69266: NEG
69267: PUSH
69268: LD_INT 0
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 3
69277: NEG
69278: PUSH
69279: LD_INT 1
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 4
69288: NEG
69289: PUSH
69290: LD_INT 1
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: LD_INT 5
69299: NEG
69300: PUSH
69301: LD_INT 0
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 5
69310: NEG
69311: PUSH
69312: LD_INT 1
69314: NEG
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 5
69322: NEG
69323: PUSH
69324: LD_INT 2
69326: NEG
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 3
69334: NEG
69335: PUSH
69336: LD_INT 2
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PUSH
69343: LD_INT 3
69345: NEG
69346: PUSH
69347: LD_INT 3
69349: NEG
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 3
69357: NEG
69358: PUSH
69359: LD_INT 4
69361: NEG
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 2
69369: NEG
69370: PUSH
69371: LD_INT 3
69373: NEG
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 2
69381: NEG
69382: PUSH
69383: LD_INT 2
69385: NEG
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 3
69393: NEG
69394: PUSH
69395: LD_INT 2
69397: NEG
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 4
69405: NEG
69406: PUSH
69407: LD_INT 3
69409: NEG
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 4
69417: NEG
69418: PUSH
69419: LD_INT 4
69421: NEG
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 2
69429: NEG
69430: PUSH
69431: LD_INT 4
69433: NEG
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 4
69441: NEG
69442: PUSH
69443: LD_INT 2
69445: NEG
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 0
69453: PUSH
69454: LD_INT 4
69456: NEG
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 0
69464: PUSH
69465: LD_INT 5
69467: NEG
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 1
69475: PUSH
69476: LD_INT 4
69478: NEG
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 1
69486: PUSH
69487: LD_INT 3
69489: NEG
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 0
69497: PUSH
69498: LD_INT 3
69500: NEG
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 1
69508: NEG
69509: PUSH
69510: LD_INT 4
69512: NEG
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 1
69520: NEG
69521: PUSH
69522: LD_INT 5
69524: NEG
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: LD_INT 2
69532: PUSH
69533: LD_INT 3
69535: NEG
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 2
69543: NEG
69544: PUSH
69545: LD_INT 5
69547: NEG
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 3
69555: PUSH
69556: LD_INT 0
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 3
69565: PUSH
69566: LD_INT 1
69568: NEG
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 4
69576: PUSH
69577: LD_INT 0
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 4
69586: PUSH
69587: LD_INT 1
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 3
69596: PUSH
69597: LD_INT 1
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: LD_INT 2
69606: PUSH
69607: LD_INT 0
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 2
69616: PUSH
69617: LD_INT 1
69619: NEG
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 2
69627: PUSH
69628: LD_INT 2
69630: NEG
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 4
69638: PUSH
69639: LD_INT 2
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: LD_INT 4
69648: PUSH
69649: LD_INT 4
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 4
69658: PUSH
69659: LD_INT 3
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 5
69668: PUSH
69669: LD_INT 4
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: LD_INT 5
69678: PUSH
69679: LD_INT 5
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 4
69688: PUSH
69689: LD_INT 5
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 3
69698: PUSH
69699: LD_INT 4
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 3
69708: PUSH
69709: LD_INT 3
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 5
69718: PUSH
69719: LD_INT 3
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 3
69728: PUSH
69729: LD_INT 5
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69783: LD_ADDR_VAR 0 33
69787: PUSH
69788: LD_INT 4
69790: NEG
69791: PUSH
69792: LD_INT 4
69794: NEG
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 4
69802: NEG
69803: PUSH
69804: LD_INT 5
69806: NEG
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 3
69814: NEG
69815: PUSH
69816: LD_INT 4
69818: NEG
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 3
69826: NEG
69827: PUSH
69828: LD_INT 3
69830: NEG
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 4
69838: NEG
69839: PUSH
69840: LD_INT 3
69842: NEG
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PUSH
69848: LD_INT 5
69850: NEG
69851: PUSH
69852: LD_INT 4
69854: NEG
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 5
69862: NEG
69863: PUSH
69864: LD_INT 5
69866: NEG
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 3
69874: NEG
69875: PUSH
69876: LD_INT 5
69878: NEG
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 5
69886: NEG
69887: PUSH
69888: LD_INT 3
69890: NEG
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 0
69898: PUSH
69899: LD_INT 3
69901: NEG
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 0
69909: PUSH
69910: LD_INT 4
69912: NEG
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 1
69920: PUSH
69921: LD_INT 3
69923: NEG
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 1
69931: PUSH
69932: LD_INT 2
69934: NEG
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 0
69942: PUSH
69943: LD_INT 2
69945: NEG
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 1
69953: NEG
69954: PUSH
69955: LD_INT 3
69957: NEG
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 1
69965: NEG
69966: PUSH
69967: LD_INT 4
69969: NEG
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 2
69977: PUSH
69978: LD_INT 2
69980: NEG
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 2
69988: NEG
69989: PUSH
69990: LD_INT 4
69992: NEG
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 4
70000: PUSH
70001: LD_INT 0
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 4
70010: PUSH
70011: LD_INT 1
70013: NEG
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 5
70021: PUSH
70022: LD_INT 0
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 5
70031: PUSH
70032: LD_INT 1
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 4
70041: PUSH
70042: LD_INT 1
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_INT 3
70051: PUSH
70052: LD_INT 0
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 3
70061: PUSH
70062: LD_INT 1
70064: NEG
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 3
70072: PUSH
70073: LD_INT 2
70075: NEG
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: LD_INT 5
70083: PUSH
70084: LD_INT 2
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 3
70093: PUSH
70094: LD_INT 3
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 3
70103: PUSH
70104: LD_INT 2
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 4
70113: PUSH
70114: LD_INT 3
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 4
70123: PUSH
70124: LD_INT 4
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 3
70133: PUSH
70134: LD_INT 4
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 2
70143: PUSH
70144: LD_INT 3
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 2
70153: PUSH
70154: LD_INT 2
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 4
70163: PUSH
70164: LD_INT 2
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 2
70173: PUSH
70174: LD_INT 4
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 0
70183: PUSH
70184: LD_INT 4
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 0
70193: PUSH
70194: LD_INT 3
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 1
70203: PUSH
70204: LD_INT 4
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 1
70213: PUSH
70214: LD_INT 5
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 0
70223: PUSH
70224: LD_INT 5
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 1
70233: NEG
70234: PUSH
70235: LD_INT 4
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: LD_INT 1
70244: NEG
70245: PUSH
70246: LD_INT 3
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 2
70255: PUSH
70256: LD_INT 5
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 2
70265: NEG
70266: PUSH
70267: LD_INT 3
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70321: LD_ADDR_VAR 0 34
70325: PUSH
70326: LD_INT 0
70328: PUSH
70329: LD_INT 4
70331: NEG
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: LD_INT 0
70339: PUSH
70340: LD_INT 5
70342: NEG
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 1
70350: PUSH
70351: LD_INT 4
70353: NEG
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 1
70361: PUSH
70362: LD_INT 3
70364: NEG
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 0
70372: PUSH
70373: LD_INT 3
70375: NEG
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 1
70383: NEG
70384: PUSH
70385: LD_INT 4
70387: NEG
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 1
70395: NEG
70396: PUSH
70397: LD_INT 5
70399: NEG
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PUSH
70405: LD_INT 2
70407: PUSH
70408: LD_INT 3
70410: NEG
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: PUSH
70416: LD_INT 2
70418: NEG
70419: PUSH
70420: LD_INT 5
70422: NEG
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 3
70430: PUSH
70431: LD_INT 0
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 3
70440: PUSH
70441: LD_INT 1
70443: NEG
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: PUSH
70449: LD_INT 4
70451: PUSH
70452: LD_INT 0
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PUSH
70459: LD_INT 4
70461: PUSH
70462: LD_INT 1
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 3
70471: PUSH
70472: LD_INT 1
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 2
70481: PUSH
70482: LD_INT 0
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PUSH
70489: LD_INT 2
70491: PUSH
70492: LD_INT 1
70494: NEG
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 2
70502: PUSH
70503: LD_INT 2
70505: NEG
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 4
70513: PUSH
70514: LD_INT 2
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 4
70523: PUSH
70524: LD_INT 4
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 4
70533: PUSH
70534: LD_INT 3
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 5
70543: PUSH
70544: LD_INT 4
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 5
70553: PUSH
70554: LD_INT 5
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 4
70563: PUSH
70564: LD_INT 5
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 3
70573: PUSH
70574: LD_INT 4
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 3
70583: PUSH
70584: LD_INT 3
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 5
70593: PUSH
70594: LD_INT 3
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 3
70603: PUSH
70604: LD_INT 5
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PUSH
70611: LD_INT 0
70613: PUSH
70614: LD_INT 3
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 0
70623: PUSH
70624: LD_INT 2
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 1
70633: PUSH
70634: LD_INT 3
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 1
70643: PUSH
70644: LD_INT 4
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 0
70653: PUSH
70654: LD_INT 4
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 1
70663: NEG
70664: PUSH
70665: LD_INT 3
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 1
70674: NEG
70675: PUSH
70676: LD_INT 2
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: LD_INT 2
70685: PUSH
70686: LD_INT 4
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_INT 2
70695: NEG
70696: PUSH
70697: LD_INT 2
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: LD_INT 4
70706: NEG
70707: PUSH
70708: LD_INT 0
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 4
70717: NEG
70718: PUSH
70719: LD_INT 1
70721: NEG
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 3
70729: NEG
70730: PUSH
70731: LD_INT 0
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 3
70740: NEG
70741: PUSH
70742: LD_INT 1
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 4
70751: NEG
70752: PUSH
70753: LD_INT 1
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_INT 5
70762: NEG
70763: PUSH
70764: LD_INT 0
70766: PUSH
70767: EMPTY
70768: LIST
70769: LIST
70770: PUSH
70771: LD_INT 5
70773: NEG
70774: PUSH
70775: LD_INT 1
70777: NEG
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: PUSH
70783: LD_INT 5
70785: NEG
70786: PUSH
70787: LD_INT 2
70789: NEG
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 3
70797: NEG
70798: PUSH
70799: LD_INT 2
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: ST_TO_ADDR
// end ; end ;
70853: GO 70856
70855: POP
// case btype of b_depot , b_warehouse :
70856: LD_VAR 0 1
70860: PUSH
70861: LD_INT 0
70863: DOUBLE
70864: EQUAL
70865: IFTRUE 70875
70867: LD_INT 1
70869: DOUBLE
70870: EQUAL
70871: IFTRUE 70875
70873: GO 71076
70875: POP
// case nation of nation_american :
70876: LD_VAR 0 5
70880: PUSH
70881: LD_INT 1
70883: DOUBLE
70884: EQUAL
70885: IFTRUE 70889
70887: GO 70945
70889: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70890: LD_ADDR_VAR 0 9
70894: PUSH
70895: LD_VAR 0 11
70899: PUSH
70900: LD_VAR 0 12
70904: PUSH
70905: LD_VAR 0 13
70909: PUSH
70910: LD_VAR 0 14
70914: PUSH
70915: LD_VAR 0 15
70919: PUSH
70920: LD_VAR 0 16
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: PUSH
70933: LD_VAR 0 4
70937: PUSH
70938: LD_INT 1
70940: PLUS
70941: ARRAY
70942: ST_TO_ADDR
70943: GO 71074
70945: LD_INT 2
70947: DOUBLE
70948: EQUAL
70949: IFTRUE 70953
70951: GO 71009
70953: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70954: LD_ADDR_VAR 0 9
70958: PUSH
70959: LD_VAR 0 17
70963: PUSH
70964: LD_VAR 0 18
70968: PUSH
70969: LD_VAR 0 19
70973: PUSH
70974: LD_VAR 0 20
70978: PUSH
70979: LD_VAR 0 21
70983: PUSH
70984: LD_VAR 0 22
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: PUSH
70997: LD_VAR 0 4
71001: PUSH
71002: LD_INT 1
71004: PLUS
71005: ARRAY
71006: ST_TO_ADDR
71007: GO 71074
71009: LD_INT 3
71011: DOUBLE
71012: EQUAL
71013: IFTRUE 71017
71015: GO 71073
71017: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71018: LD_ADDR_VAR 0 9
71022: PUSH
71023: LD_VAR 0 23
71027: PUSH
71028: LD_VAR 0 24
71032: PUSH
71033: LD_VAR 0 25
71037: PUSH
71038: LD_VAR 0 26
71042: PUSH
71043: LD_VAR 0 27
71047: PUSH
71048: LD_VAR 0 28
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: PUSH
71061: LD_VAR 0 4
71065: PUSH
71066: LD_INT 1
71068: PLUS
71069: ARRAY
71070: ST_TO_ADDR
71071: GO 71074
71073: POP
71074: GO 71629
71076: LD_INT 2
71078: DOUBLE
71079: EQUAL
71080: IFTRUE 71090
71082: LD_INT 3
71084: DOUBLE
71085: EQUAL
71086: IFTRUE 71090
71088: GO 71146
71090: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71091: LD_ADDR_VAR 0 9
71095: PUSH
71096: LD_VAR 0 29
71100: PUSH
71101: LD_VAR 0 30
71105: PUSH
71106: LD_VAR 0 31
71110: PUSH
71111: LD_VAR 0 32
71115: PUSH
71116: LD_VAR 0 33
71120: PUSH
71121: LD_VAR 0 34
71125: PUSH
71126: EMPTY
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: PUSH
71134: LD_VAR 0 4
71138: PUSH
71139: LD_INT 1
71141: PLUS
71142: ARRAY
71143: ST_TO_ADDR
71144: GO 71629
71146: LD_INT 16
71148: DOUBLE
71149: EQUAL
71150: IFTRUE 71208
71152: LD_INT 17
71154: DOUBLE
71155: EQUAL
71156: IFTRUE 71208
71158: LD_INT 18
71160: DOUBLE
71161: EQUAL
71162: IFTRUE 71208
71164: LD_INT 19
71166: DOUBLE
71167: EQUAL
71168: IFTRUE 71208
71170: LD_INT 22
71172: DOUBLE
71173: EQUAL
71174: IFTRUE 71208
71176: LD_INT 20
71178: DOUBLE
71179: EQUAL
71180: IFTRUE 71208
71182: LD_INT 21
71184: DOUBLE
71185: EQUAL
71186: IFTRUE 71208
71188: LD_INT 23
71190: DOUBLE
71191: EQUAL
71192: IFTRUE 71208
71194: LD_INT 24
71196: DOUBLE
71197: EQUAL
71198: IFTRUE 71208
71200: LD_INT 25
71202: DOUBLE
71203: EQUAL
71204: IFTRUE 71208
71206: GO 71264
71208: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71209: LD_ADDR_VAR 0 9
71213: PUSH
71214: LD_VAR 0 35
71218: PUSH
71219: LD_VAR 0 36
71223: PUSH
71224: LD_VAR 0 37
71228: PUSH
71229: LD_VAR 0 38
71233: PUSH
71234: LD_VAR 0 39
71238: PUSH
71239: LD_VAR 0 40
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: PUSH
71252: LD_VAR 0 4
71256: PUSH
71257: LD_INT 1
71259: PLUS
71260: ARRAY
71261: ST_TO_ADDR
71262: GO 71629
71264: LD_INT 6
71266: DOUBLE
71267: EQUAL
71268: IFTRUE 71320
71270: LD_INT 7
71272: DOUBLE
71273: EQUAL
71274: IFTRUE 71320
71276: LD_INT 8
71278: DOUBLE
71279: EQUAL
71280: IFTRUE 71320
71282: LD_INT 13
71284: DOUBLE
71285: EQUAL
71286: IFTRUE 71320
71288: LD_INT 12
71290: DOUBLE
71291: EQUAL
71292: IFTRUE 71320
71294: LD_INT 15
71296: DOUBLE
71297: EQUAL
71298: IFTRUE 71320
71300: LD_INT 11
71302: DOUBLE
71303: EQUAL
71304: IFTRUE 71320
71306: LD_INT 14
71308: DOUBLE
71309: EQUAL
71310: IFTRUE 71320
71312: LD_INT 10
71314: DOUBLE
71315: EQUAL
71316: IFTRUE 71320
71318: GO 71376
71320: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71321: LD_ADDR_VAR 0 9
71325: PUSH
71326: LD_VAR 0 41
71330: PUSH
71331: LD_VAR 0 42
71335: PUSH
71336: LD_VAR 0 43
71340: PUSH
71341: LD_VAR 0 44
71345: PUSH
71346: LD_VAR 0 45
71350: PUSH
71351: LD_VAR 0 46
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: PUSH
71364: LD_VAR 0 4
71368: PUSH
71369: LD_INT 1
71371: PLUS
71372: ARRAY
71373: ST_TO_ADDR
71374: GO 71629
71376: LD_INT 36
71378: DOUBLE
71379: EQUAL
71380: IFTRUE 71384
71382: GO 71440
71384: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71385: LD_ADDR_VAR 0 9
71389: PUSH
71390: LD_VAR 0 47
71394: PUSH
71395: LD_VAR 0 48
71399: PUSH
71400: LD_VAR 0 49
71404: PUSH
71405: LD_VAR 0 50
71409: PUSH
71410: LD_VAR 0 51
71414: PUSH
71415: LD_VAR 0 52
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: PUSH
71428: LD_VAR 0 4
71432: PUSH
71433: LD_INT 1
71435: PLUS
71436: ARRAY
71437: ST_TO_ADDR
71438: GO 71629
71440: LD_INT 4
71442: DOUBLE
71443: EQUAL
71444: IFTRUE 71466
71446: LD_INT 5
71448: DOUBLE
71449: EQUAL
71450: IFTRUE 71466
71452: LD_INT 34
71454: DOUBLE
71455: EQUAL
71456: IFTRUE 71466
71458: LD_INT 37
71460: DOUBLE
71461: EQUAL
71462: IFTRUE 71466
71464: GO 71522
71466: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71467: LD_ADDR_VAR 0 9
71471: PUSH
71472: LD_VAR 0 53
71476: PUSH
71477: LD_VAR 0 54
71481: PUSH
71482: LD_VAR 0 55
71486: PUSH
71487: LD_VAR 0 56
71491: PUSH
71492: LD_VAR 0 57
71496: PUSH
71497: LD_VAR 0 58
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: PUSH
71510: LD_VAR 0 4
71514: PUSH
71515: LD_INT 1
71517: PLUS
71518: ARRAY
71519: ST_TO_ADDR
71520: GO 71629
71522: LD_INT 31
71524: DOUBLE
71525: EQUAL
71526: IFTRUE 71572
71528: LD_INT 32
71530: DOUBLE
71531: EQUAL
71532: IFTRUE 71572
71534: LD_INT 33
71536: DOUBLE
71537: EQUAL
71538: IFTRUE 71572
71540: LD_INT 27
71542: DOUBLE
71543: EQUAL
71544: IFTRUE 71572
71546: LD_INT 26
71548: DOUBLE
71549: EQUAL
71550: IFTRUE 71572
71552: LD_INT 28
71554: DOUBLE
71555: EQUAL
71556: IFTRUE 71572
71558: LD_INT 29
71560: DOUBLE
71561: EQUAL
71562: IFTRUE 71572
71564: LD_INT 30
71566: DOUBLE
71567: EQUAL
71568: IFTRUE 71572
71570: GO 71628
71572: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71573: LD_ADDR_VAR 0 9
71577: PUSH
71578: LD_VAR 0 59
71582: PUSH
71583: LD_VAR 0 60
71587: PUSH
71588: LD_VAR 0 61
71592: PUSH
71593: LD_VAR 0 62
71597: PUSH
71598: LD_VAR 0 63
71602: PUSH
71603: LD_VAR 0 64
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: PUSH
71616: LD_VAR 0 4
71620: PUSH
71621: LD_INT 1
71623: PLUS
71624: ARRAY
71625: ST_TO_ADDR
71626: GO 71629
71628: POP
// temp_list2 = [ ] ;
71629: LD_ADDR_VAR 0 10
71633: PUSH
71634: EMPTY
71635: ST_TO_ADDR
// for i in temp_list do
71636: LD_ADDR_VAR 0 8
71640: PUSH
71641: LD_VAR 0 9
71645: PUSH
71646: FOR_IN
71647: IFFALSE 71699
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71649: LD_ADDR_VAR 0 10
71653: PUSH
71654: LD_VAR 0 10
71658: PUSH
71659: LD_VAR 0 8
71663: PUSH
71664: LD_INT 1
71666: ARRAY
71667: PUSH
71668: LD_VAR 0 2
71672: PLUS
71673: PUSH
71674: LD_VAR 0 8
71678: PUSH
71679: LD_INT 2
71681: ARRAY
71682: PUSH
71683: LD_VAR 0 3
71687: PLUS
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: EMPTY
71694: LIST
71695: ADD
71696: ST_TO_ADDR
71697: GO 71646
71699: POP
71700: POP
// result = temp_list2 ;
71701: LD_ADDR_VAR 0 7
71705: PUSH
71706: LD_VAR 0 10
71710: ST_TO_ADDR
// end ;
71711: LD_VAR 0 7
71715: RET
// export function EnemyInRange ( unit , dist ) ; begin
71716: LD_INT 0
71718: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71719: LD_ADDR_VAR 0 3
71723: PUSH
71724: LD_VAR 0 1
71728: PPUSH
71729: CALL_OW 255
71733: PPUSH
71734: LD_VAR 0 1
71738: PPUSH
71739: CALL_OW 250
71743: PPUSH
71744: LD_VAR 0 1
71748: PPUSH
71749: CALL_OW 251
71753: PPUSH
71754: LD_VAR 0 2
71758: PPUSH
71759: CALL 45118 0 4
71763: PUSH
71764: LD_INT 4
71766: ARRAY
71767: ST_TO_ADDR
// end ;
71768: LD_VAR 0 3
71772: RET
// export function PlayerSeeMe ( unit ) ; begin
71773: LD_INT 0
71775: PPUSH
// result := See ( your_side , unit ) ;
71776: LD_ADDR_VAR 0 2
71780: PUSH
71781: LD_OWVAR 2
71785: PPUSH
71786: LD_VAR 0 1
71790: PPUSH
71791: CALL_OW 292
71795: ST_TO_ADDR
// end ;
71796: LD_VAR 0 2
71800: RET
// export function ReverseDir ( unit ) ; begin
71801: LD_INT 0
71803: PPUSH
// if not unit then
71804: LD_VAR 0 1
71808: NOT
71809: IFFALSE 71813
// exit ;
71811: GO 71836
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71813: LD_ADDR_VAR 0 2
71817: PUSH
71818: LD_VAR 0 1
71822: PPUSH
71823: CALL_OW 254
71827: PUSH
71828: LD_INT 3
71830: PLUS
71831: PUSH
71832: LD_INT 6
71834: MOD
71835: ST_TO_ADDR
// end ;
71836: LD_VAR 0 2
71840: RET
// export function ReverseArray ( array ) ; var i ; begin
71841: LD_INT 0
71843: PPUSH
71844: PPUSH
// if not array then
71845: LD_VAR 0 1
71849: NOT
71850: IFFALSE 71854
// exit ;
71852: GO 71909
// result := [ ] ;
71854: LD_ADDR_VAR 0 2
71858: PUSH
71859: EMPTY
71860: ST_TO_ADDR
// for i := array downto 1 do
71861: LD_ADDR_VAR 0 3
71865: PUSH
71866: DOUBLE
71867: LD_VAR 0 1
71871: INC
71872: ST_TO_ADDR
71873: LD_INT 1
71875: PUSH
71876: FOR_DOWNTO
71877: IFFALSE 71907
// result := Join ( result , array [ i ] ) ;
71879: LD_ADDR_VAR 0 2
71883: PUSH
71884: LD_VAR 0 2
71888: PPUSH
71889: LD_VAR 0 1
71893: PUSH
71894: LD_VAR 0 3
71898: ARRAY
71899: PPUSH
71900: CALL 76534 0 2
71904: ST_TO_ADDR
71905: GO 71876
71907: POP
71908: POP
// end ;
71909: LD_VAR 0 2
71913: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71914: LD_INT 0
71916: PPUSH
71917: PPUSH
71918: PPUSH
71919: PPUSH
71920: PPUSH
71921: PPUSH
// if not unit or not hexes then
71922: LD_VAR 0 1
71926: NOT
71927: PUSH
71928: LD_VAR 0 2
71932: NOT
71933: OR
71934: IFFALSE 71938
// exit ;
71936: GO 72061
// dist := 9999 ;
71938: LD_ADDR_VAR 0 5
71942: PUSH
71943: LD_INT 9999
71945: ST_TO_ADDR
// for i = 1 to hexes do
71946: LD_ADDR_VAR 0 4
71950: PUSH
71951: DOUBLE
71952: LD_INT 1
71954: DEC
71955: ST_TO_ADDR
71956: LD_VAR 0 2
71960: PUSH
71961: FOR_TO
71962: IFFALSE 72049
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71964: LD_ADDR_VAR 0 6
71968: PUSH
71969: LD_VAR 0 1
71973: PPUSH
71974: LD_VAR 0 2
71978: PUSH
71979: LD_VAR 0 4
71983: ARRAY
71984: PUSH
71985: LD_INT 1
71987: ARRAY
71988: PPUSH
71989: LD_VAR 0 2
71993: PUSH
71994: LD_VAR 0 4
71998: ARRAY
71999: PUSH
72000: LD_INT 2
72002: ARRAY
72003: PPUSH
72004: CALL_OW 297
72008: ST_TO_ADDR
// if tdist < dist then
72009: LD_VAR 0 6
72013: PUSH
72014: LD_VAR 0 5
72018: LESS
72019: IFFALSE 72047
// begin hex := hexes [ i ] ;
72021: LD_ADDR_VAR 0 8
72025: PUSH
72026: LD_VAR 0 2
72030: PUSH
72031: LD_VAR 0 4
72035: ARRAY
72036: ST_TO_ADDR
// dist := tdist ;
72037: LD_ADDR_VAR 0 5
72041: PUSH
72042: LD_VAR 0 6
72046: ST_TO_ADDR
// end ; end ;
72047: GO 71961
72049: POP
72050: POP
// result := hex ;
72051: LD_ADDR_VAR 0 3
72055: PUSH
72056: LD_VAR 0 8
72060: ST_TO_ADDR
// end ;
72061: LD_VAR 0 3
72065: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72066: LD_INT 0
72068: PPUSH
72069: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72070: LD_VAR 0 1
72074: NOT
72075: PUSH
72076: LD_VAR 0 1
72080: PUSH
72081: LD_INT 21
72083: PUSH
72084: LD_INT 2
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: LD_INT 23
72093: PUSH
72094: LD_INT 2
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: PPUSH
72105: CALL_OW 69
72109: IN
72110: NOT
72111: OR
72112: IFFALSE 72116
// exit ;
72114: GO 72163
// for i = 1 to 3 do
72116: LD_ADDR_VAR 0 3
72120: PUSH
72121: DOUBLE
72122: LD_INT 1
72124: DEC
72125: ST_TO_ADDR
72126: LD_INT 3
72128: PUSH
72129: FOR_TO
72130: IFFALSE 72161
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72132: LD_VAR 0 1
72136: PPUSH
72137: CALL_OW 250
72141: PPUSH
72142: LD_VAR 0 1
72146: PPUSH
72147: CALL_OW 251
72151: PPUSH
72152: LD_INT 1
72154: PPUSH
72155: CALL_OW 453
72159: GO 72129
72161: POP
72162: POP
// end ;
72163: LD_VAR 0 2
72167: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72168: LD_INT 0
72170: PPUSH
72171: PPUSH
72172: PPUSH
72173: PPUSH
72174: PPUSH
72175: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72176: LD_VAR 0 1
72180: NOT
72181: PUSH
72182: LD_VAR 0 2
72186: NOT
72187: OR
72188: PUSH
72189: LD_VAR 0 1
72193: PPUSH
72194: CALL_OW 314
72198: OR
72199: IFFALSE 72203
// exit ;
72201: GO 72644
// x := GetX ( enemy_unit ) ;
72203: LD_ADDR_VAR 0 7
72207: PUSH
72208: LD_VAR 0 2
72212: PPUSH
72213: CALL_OW 250
72217: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72218: LD_ADDR_VAR 0 8
72222: PUSH
72223: LD_VAR 0 2
72227: PPUSH
72228: CALL_OW 251
72232: ST_TO_ADDR
// if not x or not y then
72233: LD_VAR 0 7
72237: NOT
72238: PUSH
72239: LD_VAR 0 8
72243: NOT
72244: OR
72245: IFFALSE 72249
// exit ;
72247: GO 72644
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72249: LD_ADDR_VAR 0 6
72253: PUSH
72254: LD_VAR 0 7
72258: PPUSH
72259: LD_INT 0
72261: PPUSH
72262: LD_INT 4
72264: PPUSH
72265: CALL_OW 272
72269: PUSH
72270: LD_VAR 0 8
72274: PPUSH
72275: LD_INT 0
72277: PPUSH
72278: LD_INT 4
72280: PPUSH
72281: CALL_OW 273
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: PUSH
72290: LD_VAR 0 7
72294: PPUSH
72295: LD_INT 1
72297: PPUSH
72298: LD_INT 4
72300: PPUSH
72301: CALL_OW 272
72305: PUSH
72306: LD_VAR 0 8
72310: PPUSH
72311: LD_INT 1
72313: PPUSH
72314: LD_INT 4
72316: PPUSH
72317: CALL_OW 273
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: LD_VAR 0 7
72330: PPUSH
72331: LD_INT 2
72333: PPUSH
72334: LD_INT 4
72336: PPUSH
72337: CALL_OW 272
72341: PUSH
72342: LD_VAR 0 8
72346: PPUSH
72347: LD_INT 2
72349: PPUSH
72350: LD_INT 4
72352: PPUSH
72353: CALL_OW 273
72357: PUSH
72358: EMPTY
72359: LIST
72360: LIST
72361: PUSH
72362: LD_VAR 0 7
72366: PPUSH
72367: LD_INT 3
72369: PPUSH
72370: LD_INT 4
72372: PPUSH
72373: CALL_OW 272
72377: PUSH
72378: LD_VAR 0 8
72382: PPUSH
72383: LD_INT 3
72385: PPUSH
72386: LD_INT 4
72388: PPUSH
72389: CALL_OW 273
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_VAR 0 7
72402: PPUSH
72403: LD_INT 4
72405: PPUSH
72406: LD_INT 4
72408: PPUSH
72409: CALL_OW 272
72413: PUSH
72414: LD_VAR 0 8
72418: PPUSH
72419: LD_INT 4
72421: PPUSH
72422: LD_INT 4
72424: PPUSH
72425: CALL_OW 273
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PUSH
72434: LD_VAR 0 7
72438: PPUSH
72439: LD_INT 5
72441: PPUSH
72442: LD_INT 4
72444: PPUSH
72445: CALL_OW 272
72449: PUSH
72450: LD_VAR 0 8
72454: PPUSH
72455: LD_INT 5
72457: PPUSH
72458: LD_INT 4
72460: PPUSH
72461: CALL_OW 273
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: ST_TO_ADDR
// for i = tmp downto 1 do
72478: LD_ADDR_VAR 0 4
72482: PUSH
72483: DOUBLE
72484: LD_VAR 0 6
72488: INC
72489: ST_TO_ADDR
72490: LD_INT 1
72492: PUSH
72493: FOR_DOWNTO
72494: IFFALSE 72595
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72496: LD_VAR 0 6
72500: PUSH
72501: LD_VAR 0 4
72505: ARRAY
72506: PUSH
72507: LD_INT 1
72509: ARRAY
72510: PPUSH
72511: LD_VAR 0 6
72515: PUSH
72516: LD_VAR 0 4
72520: ARRAY
72521: PUSH
72522: LD_INT 2
72524: ARRAY
72525: PPUSH
72526: CALL_OW 488
72530: NOT
72531: PUSH
72532: LD_VAR 0 6
72536: PUSH
72537: LD_VAR 0 4
72541: ARRAY
72542: PUSH
72543: LD_INT 1
72545: ARRAY
72546: PPUSH
72547: LD_VAR 0 6
72551: PUSH
72552: LD_VAR 0 4
72556: ARRAY
72557: PUSH
72558: LD_INT 2
72560: ARRAY
72561: PPUSH
72562: CALL_OW 428
72566: PUSH
72567: LD_INT 0
72569: NONEQUAL
72570: OR
72571: IFFALSE 72593
// tmp := Delete ( tmp , i ) ;
72573: LD_ADDR_VAR 0 6
72577: PUSH
72578: LD_VAR 0 6
72582: PPUSH
72583: LD_VAR 0 4
72587: PPUSH
72588: CALL_OW 3
72592: ST_TO_ADDR
72593: GO 72493
72595: POP
72596: POP
// j := GetClosestHex ( unit , tmp ) ;
72597: LD_ADDR_VAR 0 5
72601: PUSH
72602: LD_VAR 0 1
72606: PPUSH
72607: LD_VAR 0 6
72611: PPUSH
72612: CALL 71914 0 2
72616: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72617: LD_VAR 0 1
72621: PPUSH
72622: LD_VAR 0 5
72626: PUSH
72627: LD_INT 1
72629: ARRAY
72630: PPUSH
72631: LD_VAR 0 5
72635: PUSH
72636: LD_INT 2
72638: ARRAY
72639: PPUSH
72640: CALL_OW 111
// end ;
72644: LD_VAR 0 3
72648: RET
// export function PrepareApemanSoldier ( ) ; begin
72649: LD_INT 0
72651: PPUSH
// uc_nation := 0 ;
72652: LD_ADDR_OWVAR 21
72656: PUSH
72657: LD_INT 0
72659: ST_TO_ADDR
// hc_sex := sex_male ;
72660: LD_ADDR_OWVAR 27
72664: PUSH
72665: LD_INT 1
72667: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72668: LD_ADDR_OWVAR 28
72672: PUSH
72673: LD_INT 15
72675: ST_TO_ADDR
// hc_gallery :=  ;
72676: LD_ADDR_OWVAR 33
72680: PUSH
72681: LD_STRING 
72683: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72684: LD_ADDR_OWVAR 31
72688: PUSH
72689: LD_INT 0
72691: PPUSH
72692: LD_INT 3
72694: PPUSH
72695: CALL_OW 12
72699: PUSH
72700: LD_INT 0
72702: PPUSH
72703: LD_INT 3
72705: PPUSH
72706: CALL_OW 12
72710: PUSH
72711: LD_INT 0
72713: PUSH
72714: LD_INT 0
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: ST_TO_ADDR
// end ;
72723: LD_VAR 0 1
72727: RET
// export function PrepareApemanEngineer ( ) ; begin
72728: LD_INT 0
72730: PPUSH
// uc_nation := 0 ;
72731: LD_ADDR_OWVAR 21
72735: PUSH
72736: LD_INT 0
72738: ST_TO_ADDR
// hc_sex := sex_male ;
72739: LD_ADDR_OWVAR 27
72743: PUSH
72744: LD_INT 1
72746: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72747: LD_ADDR_OWVAR 28
72751: PUSH
72752: LD_INT 16
72754: ST_TO_ADDR
// hc_gallery :=  ;
72755: LD_ADDR_OWVAR 33
72759: PUSH
72760: LD_STRING 
72762: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72763: LD_ADDR_OWVAR 31
72767: PUSH
72768: LD_INT 0
72770: PPUSH
72771: LD_INT 3
72773: PPUSH
72774: CALL_OW 12
72778: PUSH
72779: LD_INT 0
72781: PPUSH
72782: LD_INT 3
72784: PPUSH
72785: CALL_OW 12
72789: PUSH
72790: LD_INT 0
72792: PUSH
72793: LD_INT 0
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: LIST
72800: LIST
72801: ST_TO_ADDR
// end ;
72802: LD_VAR 0 1
72806: RET
// export function PrepareApeman ( agressivity ) ; begin
72807: LD_INT 0
72809: PPUSH
// uc_side := 0 ;
72810: LD_ADDR_OWVAR 20
72814: PUSH
72815: LD_INT 0
72817: ST_TO_ADDR
// uc_nation := 0 ;
72818: LD_ADDR_OWVAR 21
72822: PUSH
72823: LD_INT 0
72825: ST_TO_ADDR
// hc_sex := sex_male ;
72826: LD_ADDR_OWVAR 27
72830: PUSH
72831: LD_INT 1
72833: ST_TO_ADDR
// hc_class := class_apeman ;
72834: LD_ADDR_OWVAR 28
72838: PUSH
72839: LD_INT 12
72841: ST_TO_ADDR
// hc_gallery :=  ;
72842: LD_ADDR_OWVAR 33
72846: PUSH
72847: LD_STRING 
72849: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72850: LD_ADDR_OWVAR 35
72854: PUSH
72855: LD_VAR 0 1
72859: NEG
72860: PPUSH
72861: LD_VAR 0 1
72865: PPUSH
72866: CALL_OW 12
72870: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72871: LD_ADDR_OWVAR 31
72875: PUSH
72876: LD_INT 0
72878: PPUSH
72879: LD_INT 3
72881: PPUSH
72882: CALL_OW 12
72886: PUSH
72887: LD_INT 0
72889: PPUSH
72890: LD_INT 3
72892: PPUSH
72893: CALL_OW 12
72897: PUSH
72898: LD_INT 0
72900: PUSH
72901: LD_INT 0
72903: PUSH
72904: EMPTY
72905: LIST
72906: LIST
72907: LIST
72908: LIST
72909: ST_TO_ADDR
// end ;
72910: LD_VAR 0 2
72914: RET
// export function PrepareTiger ( agressivity ) ; begin
72915: LD_INT 0
72917: PPUSH
// uc_side := 0 ;
72918: LD_ADDR_OWVAR 20
72922: PUSH
72923: LD_INT 0
72925: ST_TO_ADDR
// uc_nation := 0 ;
72926: LD_ADDR_OWVAR 21
72930: PUSH
72931: LD_INT 0
72933: ST_TO_ADDR
// hc_class := class_tiger ;
72934: LD_ADDR_OWVAR 28
72938: PUSH
72939: LD_INT 14
72941: ST_TO_ADDR
// hc_gallery :=  ;
72942: LD_ADDR_OWVAR 33
72946: PUSH
72947: LD_STRING 
72949: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72950: LD_ADDR_OWVAR 35
72954: PUSH
72955: LD_VAR 0 1
72959: NEG
72960: PPUSH
72961: LD_VAR 0 1
72965: PPUSH
72966: CALL_OW 12
72970: ST_TO_ADDR
// end ;
72971: LD_VAR 0 2
72975: RET
// export function PrepareEnchidna ( ) ; begin
72976: LD_INT 0
72978: PPUSH
// uc_side := 0 ;
72979: LD_ADDR_OWVAR 20
72983: PUSH
72984: LD_INT 0
72986: ST_TO_ADDR
// uc_nation := 0 ;
72987: LD_ADDR_OWVAR 21
72991: PUSH
72992: LD_INT 0
72994: ST_TO_ADDR
// hc_class := class_baggie ;
72995: LD_ADDR_OWVAR 28
72999: PUSH
73000: LD_INT 13
73002: ST_TO_ADDR
// hc_gallery :=  ;
73003: LD_ADDR_OWVAR 33
73007: PUSH
73008: LD_STRING 
73010: ST_TO_ADDR
// end ;
73011: LD_VAR 0 1
73015: RET
// export function PrepareFrog ( ) ; begin
73016: LD_INT 0
73018: PPUSH
// uc_side := 0 ;
73019: LD_ADDR_OWVAR 20
73023: PUSH
73024: LD_INT 0
73026: ST_TO_ADDR
// uc_nation := 0 ;
73027: LD_ADDR_OWVAR 21
73031: PUSH
73032: LD_INT 0
73034: ST_TO_ADDR
// hc_class := class_frog ;
73035: LD_ADDR_OWVAR 28
73039: PUSH
73040: LD_INT 19
73042: ST_TO_ADDR
// hc_gallery :=  ;
73043: LD_ADDR_OWVAR 33
73047: PUSH
73048: LD_STRING 
73050: ST_TO_ADDR
// end ;
73051: LD_VAR 0 1
73055: RET
// export function PrepareFish ( ) ; begin
73056: LD_INT 0
73058: PPUSH
// uc_side := 0 ;
73059: LD_ADDR_OWVAR 20
73063: PUSH
73064: LD_INT 0
73066: ST_TO_ADDR
// uc_nation := 0 ;
73067: LD_ADDR_OWVAR 21
73071: PUSH
73072: LD_INT 0
73074: ST_TO_ADDR
// hc_class := class_fish ;
73075: LD_ADDR_OWVAR 28
73079: PUSH
73080: LD_INT 20
73082: ST_TO_ADDR
// hc_gallery :=  ;
73083: LD_ADDR_OWVAR 33
73087: PUSH
73088: LD_STRING 
73090: ST_TO_ADDR
// end ;
73091: LD_VAR 0 1
73095: RET
// export function PrepareBird ( ) ; begin
73096: LD_INT 0
73098: PPUSH
// uc_side := 0 ;
73099: LD_ADDR_OWVAR 20
73103: PUSH
73104: LD_INT 0
73106: ST_TO_ADDR
// uc_nation := 0 ;
73107: LD_ADDR_OWVAR 21
73111: PUSH
73112: LD_INT 0
73114: ST_TO_ADDR
// hc_class := class_phororhacos ;
73115: LD_ADDR_OWVAR 28
73119: PUSH
73120: LD_INT 18
73122: ST_TO_ADDR
// hc_gallery :=  ;
73123: LD_ADDR_OWVAR 33
73127: PUSH
73128: LD_STRING 
73130: ST_TO_ADDR
// end ;
73131: LD_VAR 0 1
73135: RET
// export function PrepareHorse ( ) ; begin
73136: LD_INT 0
73138: PPUSH
// uc_side := 0 ;
73139: LD_ADDR_OWVAR 20
73143: PUSH
73144: LD_INT 0
73146: ST_TO_ADDR
// uc_nation := 0 ;
73147: LD_ADDR_OWVAR 21
73151: PUSH
73152: LD_INT 0
73154: ST_TO_ADDR
// hc_class := class_horse ;
73155: LD_ADDR_OWVAR 28
73159: PUSH
73160: LD_INT 21
73162: ST_TO_ADDR
// hc_gallery :=  ;
73163: LD_ADDR_OWVAR 33
73167: PUSH
73168: LD_STRING 
73170: ST_TO_ADDR
// end ;
73171: LD_VAR 0 1
73175: RET
// export function PrepareMastodont ( ) ; begin
73176: LD_INT 0
73178: PPUSH
// uc_side := 0 ;
73179: LD_ADDR_OWVAR 20
73183: PUSH
73184: LD_INT 0
73186: ST_TO_ADDR
// uc_nation := 0 ;
73187: LD_ADDR_OWVAR 21
73191: PUSH
73192: LD_INT 0
73194: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73195: LD_ADDR_OWVAR 37
73199: PUSH
73200: LD_INT 31
73202: ST_TO_ADDR
// vc_control := control_rider ;
73203: LD_ADDR_OWVAR 38
73207: PUSH
73208: LD_INT 4
73210: ST_TO_ADDR
// end ;
73211: LD_VAR 0 1
73215: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73216: LD_INT 0
73218: PPUSH
73219: PPUSH
73220: PPUSH
// uc_side = 0 ;
73221: LD_ADDR_OWVAR 20
73225: PUSH
73226: LD_INT 0
73228: ST_TO_ADDR
// uc_nation = 0 ;
73229: LD_ADDR_OWVAR 21
73233: PUSH
73234: LD_INT 0
73236: ST_TO_ADDR
// InitHc_All ( ) ;
73237: CALL_OW 584
// InitVc ;
73241: CALL_OW 20
// if mastodonts then
73245: LD_VAR 0 6
73249: IFFALSE 73316
// for i = 1 to mastodonts do
73251: LD_ADDR_VAR 0 11
73255: PUSH
73256: DOUBLE
73257: LD_INT 1
73259: DEC
73260: ST_TO_ADDR
73261: LD_VAR 0 6
73265: PUSH
73266: FOR_TO
73267: IFFALSE 73314
// begin vc_chassis := 31 ;
73269: LD_ADDR_OWVAR 37
73273: PUSH
73274: LD_INT 31
73276: ST_TO_ADDR
// vc_control := control_rider ;
73277: LD_ADDR_OWVAR 38
73281: PUSH
73282: LD_INT 4
73284: ST_TO_ADDR
// animal := CreateVehicle ;
73285: LD_ADDR_VAR 0 12
73289: PUSH
73290: CALL_OW 45
73294: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73295: LD_VAR 0 12
73299: PPUSH
73300: LD_VAR 0 8
73304: PPUSH
73305: LD_INT 0
73307: PPUSH
73308: CALL 75451 0 3
// end ;
73312: GO 73266
73314: POP
73315: POP
// if horses then
73316: LD_VAR 0 5
73320: IFFALSE 73387
// for i = 1 to horses do
73322: LD_ADDR_VAR 0 11
73326: PUSH
73327: DOUBLE
73328: LD_INT 1
73330: DEC
73331: ST_TO_ADDR
73332: LD_VAR 0 5
73336: PUSH
73337: FOR_TO
73338: IFFALSE 73385
// begin hc_class := 21 ;
73340: LD_ADDR_OWVAR 28
73344: PUSH
73345: LD_INT 21
73347: ST_TO_ADDR
// hc_gallery :=  ;
73348: LD_ADDR_OWVAR 33
73352: PUSH
73353: LD_STRING 
73355: ST_TO_ADDR
// animal := CreateHuman ;
73356: LD_ADDR_VAR 0 12
73360: PUSH
73361: CALL_OW 44
73365: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73366: LD_VAR 0 12
73370: PPUSH
73371: LD_VAR 0 8
73375: PPUSH
73376: LD_INT 0
73378: PPUSH
73379: CALL 75451 0 3
// end ;
73383: GO 73337
73385: POP
73386: POP
// if birds then
73387: LD_VAR 0 1
73391: IFFALSE 73458
// for i = 1 to birds do
73393: LD_ADDR_VAR 0 11
73397: PUSH
73398: DOUBLE
73399: LD_INT 1
73401: DEC
73402: ST_TO_ADDR
73403: LD_VAR 0 1
73407: PUSH
73408: FOR_TO
73409: IFFALSE 73456
// begin hc_class = 18 ;
73411: LD_ADDR_OWVAR 28
73415: PUSH
73416: LD_INT 18
73418: ST_TO_ADDR
// hc_gallery =  ;
73419: LD_ADDR_OWVAR 33
73423: PUSH
73424: LD_STRING 
73426: ST_TO_ADDR
// animal := CreateHuman ;
73427: LD_ADDR_VAR 0 12
73431: PUSH
73432: CALL_OW 44
73436: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73437: LD_VAR 0 12
73441: PPUSH
73442: LD_VAR 0 8
73446: PPUSH
73447: LD_INT 0
73449: PPUSH
73450: CALL 75451 0 3
// end ;
73454: GO 73408
73456: POP
73457: POP
// if tigers then
73458: LD_VAR 0 2
73462: IFFALSE 73546
// for i = 1 to tigers do
73464: LD_ADDR_VAR 0 11
73468: PUSH
73469: DOUBLE
73470: LD_INT 1
73472: DEC
73473: ST_TO_ADDR
73474: LD_VAR 0 2
73478: PUSH
73479: FOR_TO
73480: IFFALSE 73544
// begin hc_class = class_tiger ;
73482: LD_ADDR_OWVAR 28
73486: PUSH
73487: LD_INT 14
73489: ST_TO_ADDR
// hc_gallery =  ;
73490: LD_ADDR_OWVAR 33
73494: PUSH
73495: LD_STRING 
73497: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73498: LD_ADDR_OWVAR 35
73502: PUSH
73503: LD_INT 7
73505: NEG
73506: PPUSH
73507: LD_INT 7
73509: PPUSH
73510: CALL_OW 12
73514: ST_TO_ADDR
// animal := CreateHuman ;
73515: LD_ADDR_VAR 0 12
73519: PUSH
73520: CALL_OW 44
73524: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73525: LD_VAR 0 12
73529: PPUSH
73530: LD_VAR 0 8
73534: PPUSH
73535: LD_INT 0
73537: PPUSH
73538: CALL 75451 0 3
// end ;
73542: GO 73479
73544: POP
73545: POP
// if apemans then
73546: LD_VAR 0 3
73550: IFFALSE 73673
// for i = 1 to apemans do
73552: LD_ADDR_VAR 0 11
73556: PUSH
73557: DOUBLE
73558: LD_INT 1
73560: DEC
73561: ST_TO_ADDR
73562: LD_VAR 0 3
73566: PUSH
73567: FOR_TO
73568: IFFALSE 73671
// begin hc_class = class_apeman ;
73570: LD_ADDR_OWVAR 28
73574: PUSH
73575: LD_INT 12
73577: ST_TO_ADDR
// hc_gallery =  ;
73578: LD_ADDR_OWVAR 33
73582: PUSH
73583: LD_STRING 
73585: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73586: LD_ADDR_OWVAR 35
73590: PUSH
73591: LD_INT 2
73593: NEG
73594: PPUSH
73595: LD_INT 2
73597: PPUSH
73598: CALL_OW 12
73602: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73603: LD_ADDR_OWVAR 31
73607: PUSH
73608: LD_INT 1
73610: PPUSH
73611: LD_INT 3
73613: PPUSH
73614: CALL_OW 12
73618: PUSH
73619: LD_INT 1
73621: PPUSH
73622: LD_INT 3
73624: PPUSH
73625: CALL_OW 12
73629: PUSH
73630: LD_INT 0
73632: PUSH
73633: LD_INT 0
73635: PUSH
73636: EMPTY
73637: LIST
73638: LIST
73639: LIST
73640: LIST
73641: ST_TO_ADDR
// animal := CreateHuman ;
73642: LD_ADDR_VAR 0 12
73646: PUSH
73647: CALL_OW 44
73651: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73652: LD_VAR 0 12
73656: PPUSH
73657: LD_VAR 0 8
73661: PPUSH
73662: LD_INT 0
73664: PPUSH
73665: CALL 75451 0 3
// end ;
73669: GO 73567
73671: POP
73672: POP
// if enchidnas then
73673: LD_VAR 0 4
73677: IFFALSE 73744
// for i = 1 to enchidnas do
73679: LD_ADDR_VAR 0 11
73683: PUSH
73684: DOUBLE
73685: LD_INT 1
73687: DEC
73688: ST_TO_ADDR
73689: LD_VAR 0 4
73693: PUSH
73694: FOR_TO
73695: IFFALSE 73742
// begin hc_class = 13 ;
73697: LD_ADDR_OWVAR 28
73701: PUSH
73702: LD_INT 13
73704: ST_TO_ADDR
// hc_gallery =  ;
73705: LD_ADDR_OWVAR 33
73709: PUSH
73710: LD_STRING 
73712: ST_TO_ADDR
// animal := CreateHuman ;
73713: LD_ADDR_VAR 0 12
73717: PUSH
73718: CALL_OW 44
73722: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73723: LD_VAR 0 12
73727: PPUSH
73728: LD_VAR 0 8
73732: PPUSH
73733: LD_INT 0
73735: PPUSH
73736: CALL 75451 0 3
// end ;
73740: GO 73694
73742: POP
73743: POP
// if fishes then
73744: LD_VAR 0 7
73748: IFFALSE 73815
// for i = 1 to fishes do
73750: LD_ADDR_VAR 0 11
73754: PUSH
73755: DOUBLE
73756: LD_INT 1
73758: DEC
73759: ST_TO_ADDR
73760: LD_VAR 0 7
73764: PUSH
73765: FOR_TO
73766: IFFALSE 73813
// begin hc_class = 20 ;
73768: LD_ADDR_OWVAR 28
73772: PUSH
73773: LD_INT 20
73775: ST_TO_ADDR
// hc_gallery =  ;
73776: LD_ADDR_OWVAR 33
73780: PUSH
73781: LD_STRING 
73783: ST_TO_ADDR
// animal := CreateHuman ;
73784: LD_ADDR_VAR 0 12
73788: PUSH
73789: CALL_OW 44
73793: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73794: LD_VAR 0 12
73798: PPUSH
73799: LD_VAR 0 9
73803: PPUSH
73804: LD_INT 0
73806: PPUSH
73807: CALL 75451 0 3
// end ;
73811: GO 73765
73813: POP
73814: POP
// end ;
73815: LD_VAR 0 10
73819: RET
// export function WantHeal ( sci , unit ) ; begin
73820: LD_INT 0
73822: PPUSH
// if GetTaskList ( sci ) > 0 then
73823: LD_VAR 0 1
73827: PPUSH
73828: CALL_OW 437
73832: PUSH
73833: LD_INT 0
73835: GREATER
73836: IFFALSE 73906
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73838: LD_VAR 0 1
73842: PPUSH
73843: CALL_OW 437
73847: PUSH
73848: LD_INT 1
73850: ARRAY
73851: PUSH
73852: LD_INT 1
73854: ARRAY
73855: PUSH
73856: LD_STRING l
73858: EQUAL
73859: PUSH
73860: LD_VAR 0 1
73864: PPUSH
73865: CALL_OW 437
73869: PUSH
73870: LD_INT 1
73872: ARRAY
73873: PUSH
73874: LD_INT 4
73876: ARRAY
73877: PUSH
73878: LD_VAR 0 2
73882: EQUAL
73883: AND
73884: IFFALSE 73896
// result := true else
73886: LD_ADDR_VAR 0 3
73890: PUSH
73891: LD_INT 1
73893: ST_TO_ADDR
73894: GO 73904
// result := false ;
73896: LD_ADDR_VAR 0 3
73900: PUSH
73901: LD_INT 0
73903: ST_TO_ADDR
// end else
73904: GO 73914
// result := false ;
73906: LD_ADDR_VAR 0 3
73910: PUSH
73911: LD_INT 0
73913: ST_TO_ADDR
// end ;
73914: LD_VAR 0 3
73918: RET
// export function HealTarget ( sci ) ; begin
73919: LD_INT 0
73921: PPUSH
// if not sci then
73922: LD_VAR 0 1
73926: NOT
73927: IFFALSE 73931
// exit ;
73929: GO 73996
// result := 0 ;
73931: LD_ADDR_VAR 0 2
73935: PUSH
73936: LD_INT 0
73938: ST_TO_ADDR
// if GetTaskList ( sci ) then
73939: LD_VAR 0 1
73943: PPUSH
73944: CALL_OW 437
73948: IFFALSE 73996
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73950: LD_VAR 0 1
73954: PPUSH
73955: CALL_OW 437
73959: PUSH
73960: LD_INT 1
73962: ARRAY
73963: PUSH
73964: LD_INT 1
73966: ARRAY
73967: PUSH
73968: LD_STRING l
73970: EQUAL
73971: IFFALSE 73996
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73973: LD_ADDR_VAR 0 2
73977: PUSH
73978: LD_VAR 0 1
73982: PPUSH
73983: CALL_OW 437
73987: PUSH
73988: LD_INT 1
73990: ARRAY
73991: PUSH
73992: LD_INT 4
73994: ARRAY
73995: ST_TO_ADDR
// end ;
73996: LD_VAR 0 2
74000: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74001: LD_INT 0
74003: PPUSH
74004: PPUSH
74005: PPUSH
74006: PPUSH
// if not base_units then
74007: LD_VAR 0 1
74011: NOT
74012: IFFALSE 74016
// exit ;
74014: GO 74103
// result := false ;
74016: LD_ADDR_VAR 0 2
74020: PUSH
74021: LD_INT 0
74023: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74024: LD_ADDR_VAR 0 5
74028: PUSH
74029: LD_VAR 0 1
74033: PPUSH
74034: LD_INT 21
74036: PUSH
74037: LD_INT 3
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: PPUSH
74044: CALL_OW 72
74048: ST_TO_ADDR
// if not tmp then
74049: LD_VAR 0 5
74053: NOT
74054: IFFALSE 74058
// exit ;
74056: GO 74103
// for i in tmp do
74058: LD_ADDR_VAR 0 3
74062: PUSH
74063: LD_VAR 0 5
74067: PUSH
74068: FOR_IN
74069: IFFALSE 74101
// begin result := EnemyInRange ( i , 22 ) ;
74071: LD_ADDR_VAR 0 2
74075: PUSH
74076: LD_VAR 0 3
74080: PPUSH
74081: LD_INT 22
74083: PPUSH
74084: CALL 71716 0 2
74088: ST_TO_ADDR
// if result then
74089: LD_VAR 0 2
74093: IFFALSE 74099
// exit ;
74095: POP
74096: POP
74097: GO 74103
// end ;
74099: GO 74068
74101: POP
74102: POP
// end ;
74103: LD_VAR 0 2
74107: RET
// export function FilterByTag ( units , tag ) ; begin
74108: LD_INT 0
74110: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74111: LD_ADDR_VAR 0 3
74115: PUSH
74116: LD_VAR 0 1
74120: PPUSH
74121: LD_INT 120
74123: PUSH
74124: LD_VAR 0 2
74128: PUSH
74129: EMPTY
74130: LIST
74131: LIST
74132: PPUSH
74133: CALL_OW 72
74137: ST_TO_ADDR
// end ;
74138: LD_VAR 0 3
74142: RET
// export function IsDriver ( un ) ; begin
74143: LD_INT 0
74145: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74146: LD_ADDR_VAR 0 2
74150: PUSH
74151: LD_VAR 0 1
74155: PUSH
74156: LD_INT 55
74158: PUSH
74159: EMPTY
74160: LIST
74161: PPUSH
74162: CALL_OW 69
74166: IN
74167: ST_TO_ADDR
// end ;
74168: LD_VAR 0 2
74172: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74173: LD_INT 0
74175: PPUSH
74176: PPUSH
// list := [ ] ;
74177: LD_ADDR_VAR 0 5
74181: PUSH
74182: EMPTY
74183: ST_TO_ADDR
// case d of 0 :
74184: LD_VAR 0 3
74188: PUSH
74189: LD_INT 0
74191: DOUBLE
74192: EQUAL
74193: IFTRUE 74197
74195: GO 74330
74197: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74198: LD_ADDR_VAR 0 5
74202: PUSH
74203: LD_VAR 0 1
74207: PUSH
74208: LD_INT 4
74210: MINUS
74211: PUSH
74212: LD_VAR 0 2
74216: PUSH
74217: LD_INT 4
74219: MINUS
74220: PUSH
74221: LD_INT 2
74223: PUSH
74224: EMPTY
74225: LIST
74226: LIST
74227: LIST
74228: PUSH
74229: LD_VAR 0 1
74233: PUSH
74234: LD_INT 3
74236: MINUS
74237: PUSH
74238: LD_VAR 0 2
74242: PUSH
74243: LD_INT 1
74245: PUSH
74246: EMPTY
74247: LIST
74248: LIST
74249: LIST
74250: PUSH
74251: LD_VAR 0 1
74255: PUSH
74256: LD_INT 4
74258: PLUS
74259: PUSH
74260: LD_VAR 0 2
74264: PUSH
74265: LD_INT 4
74267: PUSH
74268: EMPTY
74269: LIST
74270: LIST
74271: LIST
74272: PUSH
74273: LD_VAR 0 1
74277: PUSH
74278: LD_INT 3
74280: PLUS
74281: PUSH
74282: LD_VAR 0 2
74286: PUSH
74287: LD_INT 3
74289: PLUS
74290: PUSH
74291: LD_INT 5
74293: PUSH
74294: EMPTY
74295: LIST
74296: LIST
74297: LIST
74298: PUSH
74299: LD_VAR 0 1
74303: PUSH
74304: LD_VAR 0 2
74308: PUSH
74309: LD_INT 4
74311: PLUS
74312: PUSH
74313: LD_INT 0
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: LIST
74320: PUSH
74321: EMPTY
74322: LIST
74323: LIST
74324: LIST
74325: LIST
74326: LIST
74327: ST_TO_ADDR
// end ; 1 :
74328: GO 75028
74330: LD_INT 1
74332: DOUBLE
74333: EQUAL
74334: IFTRUE 74338
74336: GO 74471
74338: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74339: LD_ADDR_VAR 0 5
74343: PUSH
74344: LD_VAR 0 1
74348: PUSH
74349: LD_VAR 0 2
74353: PUSH
74354: LD_INT 4
74356: MINUS
74357: PUSH
74358: LD_INT 3
74360: PUSH
74361: EMPTY
74362: LIST
74363: LIST
74364: LIST
74365: PUSH
74366: LD_VAR 0 1
74370: PUSH
74371: LD_INT 3
74373: MINUS
74374: PUSH
74375: LD_VAR 0 2
74379: PUSH
74380: LD_INT 3
74382: MINUS
74383: PUSH
74384: LD_INT 2
74386: PUSH
74387: EMPTY
74388: LIST
74389: LIST
74390: LIST
74391: PUSH
74392: LD_VAR 0 1
74396: PUSH
74397: LD_INT 4
74399: MINUS
74400: PUSH
74401: LD_VAR 0 2
74405: PUSH
74406: LD_INT 1
74408: PUSH
74409: EMPTY
74410: LIST
74411: LIST
74412: LIST
74413: PUSH
74414: LD_VAR 0 1
74418: PUSH
74419: LD_VAR 0 2
74423: PUSH
74424: LD_INT 3
74426: PLUS
74427: PUSH
74428: LD_INT 0
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: LIST
74435: PUSH
74436: LD_VAR 0 1
74440: PUSH
74441: LD_INT 4
74443: PLUS
74444: PUSH
74445: LD_VAR 0 2
74449: PUSH
74450: LD_INT 4
74452: PLUS
74453: PUSH
74454: LD_INT 5
74456: PUSH
74457: EMPTY
74458: LIST
74459: LIST
74460: LIST
74461: PUSH
74462: EMPTY
74463: LIST
74464: LIST
74465: LIST
74466: LIST
74467: LIST
74468: ST_TO_ADDR
// end ; 2 :
74469: GO 75028
74471: LD_INT 2
74473: DOUBLE
74474: EQUAL
74475: IFTRUE 74479
74477: GO 74608
74479: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74480: LD_ADDR_VAR 0 5
74484: PUSH
74485: LD_VAR 0 1
74489: PUSH
74490: LD_VAR 0 2
74494: PUSH
74495: LD_INT 3
74497: MINUS
74498: PUSH
74499: LD_INT 3
74501: PUSH
74502: EMPTY
74503: LIST
74504: LIST
74505: LIST
74506: PUSH
74507: LD_VAR 0 1
74511: PUSH
74512: LD_INT 4
74514: PLUS
74515: PUSH
74516: LD_VAR 0 2
74520: PUSH
74521: LD_INT 4
74523: PUSH
74524: EMPTY
74525: LIST
74526: LIST
74527: LIST
74528: PUSH
74529: LD_VAR 0 1
74533: PUSH
74534: LD_VAR 0 2
74538: PUSH
74539: LD_INT 4
74541: PLUS
74542: PUSH
74543: LD_INT 0
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: LIST
74550: PUSH
74551: LD_VAR 0 1
74555: PUSH
74556: LD_INT 3
74558: MINUS
74559: PUSH
74560: LD_VAR 0 2
74564: PUSH
74565: LD_INT 1
74567: PUSH
74568: EMPTY
74569: LIST
74570: LIST
74571: LIST
74572: PUSH
74573: LD_VAR 0 1
74577: PUSH
74578: LD_INT 4
74580: MINUS
74581: PUSH
74582: LD_VAR 0 2
74586: PUSH
74587: LD_INT 4
74589: MINUS
74590: PUSH
74591: LD_INT 2
74593: PUSH
74594: EMPTY
74595: LIST
74596: LIST
74597: LIST
74598: PUSH
74599: EMPTY
74600: LIST
74601: LIST
74602: LIST
74603: LIST
74604: LIST
74605: ST_TO_ADDR
// end ; 3 :
74606: GO 75028
74608: LD_INT 3
74610: DOUBLE
74611: EQUAL
74612: IFTRUE 74616
74614: GO 74749
74616: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74617: LD_ADDR_VAR 0 5
74621: PUSH
74622: LD_VAR 0 1
74626: PUSH
74627: LD_INT 3
74629: PLUS
74630: PUSH
74631: LD_VAR 0 2
74635: PUSH
74636: LD_INT 4
74638: PUSH
74639: EMPTY
74640: LIST
74641: LIST
74642: LIST
74643: PUSH
74644: LD_VAR 0 1
74648: PUSH
74649: LD_INT 4
74651: PLUS
74652: PUSH
74653: LD_VAR 0 2
74657: PUSH
74658: LD_INT 4
74660: PLUS
74661: PUSH
74662: LD_INT 5
74664: PUSH
74665: EMPTY
74666: LIST
74667: LIST
74668: LIST
74669: PUSH
74670: LD_VAR 0 1
74674: PUSH
74675: LD_INT 4
74677: MINUS
74678: PUSH
74679: LD_VAR 0 2
74683: PUSH
74684: LD_INT 1
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: LIST
74691: PUSH
74692: LD_VAR 0 1
74696: PUSH
74697: LD_VAR 0 2
74701: PUSH
74702: LD_INT 4
74704: MINUS
74705: PUSH
74706: LD_INT 3
74708: PUSH
74709: EMPTY
74710: LIST
74711: LIST
74712: LIST
74713: PUSH
74714: LD_VAR 0 1
74718: PUSH
74719: LD_INT 3
74721: MINUS
74722: PUSH
74723: LD_VAR 0 2
74727: PUSH
74728: LD_INT 3
74730: MINUS
74731: PUSH
74732: LD_INT 2
74734: PUSH
74735: EMPTY
74736: LIST
74737: LIST
74738: LIST
74739: PUSH
74740: EMPTY
74741: LIST
74742: LIST
74743: LIST
74744: LIST
74745: LIST
74746: ST_TO_ADDR
// end ; 4 :
74747: GO 75028
74749: LD_INT 4
74751: DOUBLE
74752: EQUAL
74753: IFTRUE 74757
74755: GO 74890
74757: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74758: LD_ADDR_VAR 0 5
74762: PUSH
74763: LD_VAR 0 1
74767: PUSH
74768: LD_VAR 0 2
74772: PUSH
74773: LD_INT 4
74775: PLUS
74776: PUSH
74777: LD_INT 0
74779: PUSH
74780: EMPTY
74781: LIST
74782: LIST
74783: LIST
74784: PUSH
74785: LD_VAR 0 1
74789: PUSH
74790: LD_INT 3
74792: PLUS
74793: PUSH
74794: LD_VAR 0 2
74798: PUSH
74799: LD_INT 3
74801: PLUS
74802: PUSH
74803: LD_INT 5
74805: PUSH
74806: EMPTY
74807: LIST
74808: LIST
74809: LIST
74810: PUSH
74811: LD_VAR 0 1
74815: PUSH
74816: LD_INT 4
74818: PLUS
74819: PUSH
74820: LD_VAR 0 2
74824: PUSH
74825: LD_INT 4
74827: PUSH
74828: EMPTY
74829: LIST
74830: LIST
74831: LIST
74832: PUSH
74833: LD_VAR 0 1
74837: PUSH
74838: LD_VAR 0 2
74842: PUSH
74843: LD_INT 3
74845: MINUS
74846: PUSH
74847: LD_INT 3
74849: PUSH
74850: EMPTY
74851: LIST
74852: LIST
74853: LIST
74854: PUSH
74855: LD_VAR 0 1
74859: PUSH
74860: LD_INT 4
74862: MINUS
74863: PUSH
74864: LD_VAR 0 2
74868: PUSH
74869: LD_INT 4
74871: MINUS
74872: PUSH
74873: LD_INT 2
74875: PUSH
74876: EMPTY
74877: LIST
74878: LIST
74879: LIST
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: ST_TO_ADDR
// end ; 5 :
74888: GO 75028
74890: LD_INT 5
74892: DOUBLE
74893: EQUAL
74894: IFTRUE 74898
74896: GO 75027
74898: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74899: LD_ADDR_VAR 0 5
74903: PUSH
74904: LD_VAR 0 1
74908: PUSH
74909: LD_INT 4
74911: MINUS
74912: PUSH
74913: LD_VAR 0 2
74917: PUSH
74918: LD_INT 1
74920: PUSH
74921: EMPTY
74922: LIST
74923: LIST
74924: LIST
74925: PUSH
74926: LD_VAR 0 1
74930: PUSH
74931: LD_VAR 0 2
74935: PUSH
74936: LD_INT 4
74938: MINUS
74939: PUSH
74940: LD_INT 3
74942: PUSH
74943: EMPTY
74944: LIST
74945: LIST
74946: LIST
74947: PUSH
74948: LD_VAR 0 1
74952: PUSH
74953: LD_INT 4
74955: PLUS
74956: PUSH
74957: LD_VAR 0 2
74961: PUSH
74962: LD_INT 4
74964: PLUS
74965: PUSH
74966: LD_INT 5
74968: PUSH
74969: EMPTY
74970: LIST
74971: LIST
74972: LIST
74973: PUSH
74974: LD_VAR 0 1
74978: PUSH
74979: LD_INT 3
74981: PLUS
74982: PUSH
74983: LD_VAR 0 2
74987: PUSH
74988: LD_INT 4
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: LIST
74995: PUSH
74996: LD_VAR 0 1
75000: PUSH
75001: LD_VAR 0 2
75005: PUSH
75006: LD_INT 3
75008: PLUS
75009: PUSH
75010: LD_INT 0
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: LIST
75017: PUSH
75018: EMPTY
75019: LIST
75020: LIST
75021: LIST
75022: LIST
75023: LIST
75024: ST_TO_ADDR
// end ; end ;
75025: GO 75028
75027: POP
// result := list ;
75028: LD_ADDR_VAR 0 4
75032: PUSH
75033: LD_VAR 0 5
75037: ST_TO_ADDR
// end ;
75038: LD_VAR 0 4
75042: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75043: LD_INT 0
75045: PPUSH
75046: PPUSH
75047: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75048: LD_VAR 0 1
75052: NOT
75053: PUSH
75054: LD_VAR 0 2
75058: PUSH
75059: LD_INT 1
75061: PUSH
75062: LD_INT 2
75064: PUSH
75065: LD_INT 3
75067: PUSH
75068: LD_INT 4
75070: PUSH
75071: EMPTY
75072: LIST
75073: LIST
75074: LIST
75075: LIST
75076: IN
75077: NOT
75078: OR
75079: IFFALSE 75083
// exit ;
75081: GO 75175
// tmp := [ ] ;
75083: LD_ADDR_VAR 0 5
75087: PUSH
75088: EMPTY
75089: ST_TO_ADDR
// for i in units do
75090: LD_ADDR_VAR 0 4
75094: PUSH
75095: LD_VAR 0 1
75099: PUSH
75100: FOR_IN
75101: IFFALSE 75144
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75103: LD_ADDR_VAR 0 5
75107: PUSH
75108: LD_VAR 0 5
75112: PPUSH
75113: LD_VAR 0 5
75117: PUSH
75118: LD_INT 1
75120: PLUS
75121: PPUSH
75122: LD_VAR 0 4
75126: PPUSH
75127: LD_VAR 0 2
75131: PPUSH
75132: CALL_OW 259
75136: PPUSH
75137: CALL_OW 2
75141: ST_TO_ADDR
75142: GO 75100
75144: POP
75145: POP
// if not tmp then
75146: LD_VAR 0 5
75150: NOT
75151: IFFALSE 75155
// exit ;
75153: GO 75175
// result := SortListByListDesc ( units , tmp ) ;
75155: LD_ADDR_VAR 0 3
75159: PUSH
75160: LD_VAR 0 1
75164: PPUSH
75165: LD_VAR 0 5
75169: PPUSH
75170: CALL_OW 77
75174: ST_TO_ADDR
// end ;
75175: LD_VAR 0 3
75179: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75180: LD_INT 0
75182: PPUSH
75183: PPUSH
75184: PPUSH
// result := false ;
75185: LD_ADDR_VAR 0 3
75189: PUSH
75190: LD_INT 0
75192: ST_TO_ADDR
// x := GetX ( building ) ;
75193: LD_ADDR_VAR 0 4
75197: PUSH
75198: LD_VAR 0 2
75202: PPUSH
75203: CALL_OW 250
75207: ST_TO_ADDR
// y := GetY ( building ) ;
75208: LD_ADDR_VAR 0 5
75212: PUSH
75213: LD_VAR 0 2
75217: PPUSH
75218: CALL_OW 251
75222: ST_TO_ADDR
// if not building or not x or not y then
75223: LD_VAR 0 2
75227: NOT
75228: PUSH
75229: LD_VAR 0 4
75233: NOT
75234: OR
75235: PUSH
75236: LD_VAR 0 5
75240: NOT
75241: OR
75242: IFFALSE 75246
// exit ;
75244: GO 75338
// if GetTaskList ( unit ) then
75246: LD_VAR 0 1
75250: PPUSH
75251: CALL_OW 437
75255: IFFALSE 75338
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75257: LD_STRING e
75259: PUSH
75260: LD_VAR 0 1
75264: PPUSH
75265: CALL_OW 437
75269: PUSH
75270: LD_INT 1
75272: ARRAY
75273: PUSH
75274: LD_INT 1
75276: ARRAY
75277: EQUAL
75278: PUSH
75279: LD_VAR 0 4
75283: PUSH
75284: LD_VAR 0 1
75288: PPUSH
75289: CALL_OW 437
75293: PUSH
75294: LD_INT 1
75296: ARRAY
75297: PUSH
75298: LD_INT 2
75300: ARRAY
75301: EQUAL
75302: AND
75303: PUSH
75304: LD_VAR 0 5
75308: PUSH
75309: LD_VAR 0 1
75313: PPUSH
75314: CALL_OW 437
75318: PUSH
75319: LD_INT 1
75321: ARRAY
75322: PUSH
75323: LD_INT 3
75325: ARRAY
75326: EQUAL
75327: AND
75328: IFFALSE 75338
// result := true end ;
75330: LD_ADDR_VAR 0 3
75334: PUSH
75335: LD_INT 1
75337: ST_TO_ADDR
// end ;
75338: LD_VAR 0 3
75342: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75343: LD_INT 0
75345: PPUSH
// result := false ;
75346: LD_ADDR_VAR 0 4
75350: PUSH
75351: LD_INT 0
75353: ST_TO_ADDR
// if GetTaskList ( unit ) then
75354: LD_VAR 0 1
75358: PPUSH
75359: CALL_OW 437
75363: IFFALSE 75446
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75365: LD_STRING M
75367: PUSH
75368: LD_VAR 0 1
75372: PPUSH
75373: CALL_OW 437
75377: PUSH
75378: LD_INT 1
75380: ARRAY
75381: PUSH
75382: LD_INT 1
75384: ARRAY
75385: EQUAL
75386: PUSH
75387: LD_VAR 0 2
75391: PUSH
75392: LD_VAR 0 1
75396: PPUSH
75397: CALL_OW 437
75401: PUSH
75402: LD_INT 1
75404: ARRAY
75405: PUSH
75406: LD_INT 2
75408: ARRAY
75409: EQUAL
75410: AND
75411: PUSH
75412: LD_VAR 0 3
75416: PUSH
75417: LD_VAR 0 1
75421: PPUSH
75422: CALL_OW 437
75426: PUSH
75427: LD_INT 1
75429: ARRAY
75430: PUSH
75431: LD_INT 3
75433: ARRAY
75434: EQUAL
75435: AND
75436: IFFALSE 75446
// result := true ;
75438: LD_ADDR_VAR 0 4
75442: PUSH
75443: LD_INT 1
75445: ST_TO_ADDR
// end ; end ;
75446: LD_VAR 0 4
75450: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75451: LD_INT 0
75453: PPUSH
75454: PPUSH
75455: PPUSH
75456: PPUSH
// if not unit or not area then
75457: LD_VAR 0 1
75461: NOT
75462: PUSH
75463: LD_VAR 0 2
75467: NOT
75468: OR
75469: IFFALSE 75473
// exit ;
75471: GO 75637
// tmp := AreaToList ( area , i ) ;
75473: LD_ADDR_VAR 0 6
75477: PUSH
75478: LD_VAR 0 2
75482: PPUSH
75483: LD_VAR 0 5
75487: PPUSH
75488: CALL_OW 517
75492: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75493: LD_ADDR_VAR 0 5
75497: PUSH
75498: DOUBLE
75499: LD_INT 1
75501: DEC
75502: ST_TO_ADDR
75503: LD_VAR 0 6
75507: PUSH
75508: LD_INT 1
75510: ARRAY
75511: PUSH
75512: FOR_TO
75513: IFFALSE 75635
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75515: LD_ADDR_VAR 0 7
75519: PUSH
75520: LD_VAR 0 6
75524: PUSH
75525: LD_INT 1
75527: ARRAY
75528: PUSH
75529: LD_VAR 0 5
75533: ARRAY
75534: PUSH
75535: LD_VAR 0 6
75539: PUSH
75540: LD_INT 2
75542: ARRAY
75543: PUSH
75544: LD_VAR 0 5
75548: ARRAY
75549: PUSH
75550: EMPTY
75551: LIST
75552: LIST
75553: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75554: LD_VAR 0 7
75558: PUSH
75559: LD_INT 1
75561: ARRAY
75562: PPUSH
75563: LD_VAR 0 7
75567: PUSH
75568: LD_INT 2
75570: ARRAY
75571: PPUSH
75572: CALL_OW 428
75576: PUSH
75577: LD_INT 0
75579: EQUAL
75580: IFFALSE 75633
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75582: LD_VAR 0 1
75586: PPUSH
75587: LD_VAR 0 7
75591: PUSH
75592: LD_INT 1
75594: ARRAY
75595: PPUSH
75596: LD_VAR 0 7
75600: PUSH
75601: LD_INT 2
75603: ARRAY
75604: PPUSH
75605: LD_VAR 0 3
75609: PPUSH
75610: CALL_OW 48
// result := IsPlaced ( unit ) ;
75614: LD_ADDR_VAR 0 4
75618: PUSH
75619: LD_VAR 0 1
75623: PPUSH
75624: CALL_OW 305
75628: ST_TO_ADDR
// exit ;
75629: POP
75630: POP
75631: GO 75637
// end ; end ;
75633: GO 75512
75635: POP
75636: POP
// end ;
75637: LD_VAR 0 4
75641: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75642: LD_INT 0
75644: PPUSH
75645: PPUSH
75646: PPUSH
// if not side or side > 8 then
75647: LD_VAR 0 1
75651: NOT
75652: PUSH
75653: LD_VAR 0 1
75657: PUSH
75658: LD_INT 8
75660: GREATER
75661: OR
75662: IFFALSE 75666
// exit ;
75664: GO 75853
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75666: LD_ADDR_VAR 0 4
75670: PUSH
75671: LD_INT 22
75673: PUSH
75674: LD_VAR 0 1
75678: PUSH
75679: EMPTY
75680: LIST
75681: LIST
75682: PUSH
75683: LD_INT 21
75685: PUSH
75686: LD_INT 3
75688: PUSH
75689: EMPTY
75690: LIST
75691: LIST
75692: PUSH
75693: EMPTY
75694: LIST
75695: LIST
75696: PPUSH
75697: CALL_OW 69
75701: ST_TO_ADDR
// if not tmp then
75702: LD_VAR 0 4
75706: NOT
75707: IFFALSE 75711
// exit ;
75709: GO 75853
// enable_addtolog := true ;
75711: LD_ADDR_OWVAR 81
75715: PUSH
75716: LD_INT 1
75718: ST_TO_ADDR
// AddToLog ( [ ) ;
75719: LD_STRING [
75721: PPUSH
75722: CALL_OW 561
// for i in tmp do
75726: LD_ADDR_VAR 0 3
75730: PUSH
75731: LD_VAR 0 4
75735: PUSH
75736: FOR_IN
75737: IFFALSE 75844
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75739: LD_STRING [
75741: PUSH
75742: LD_VAR 0 3
75746: PPUSH
75747: CALL_OW 266
75751: STR
75752: PUSH
75753: LD_STRING , 
75755: STR
75756: PUSH
75757: LD_VAR 0 3
75761: PPUSH
75762: CALL_OW 250
75766: STR
75767: PUSH
75768: LD_STRING , 
75770: STR
75771: PUSH
75772: LD_VAR 0 3
75776: PPUSH
75777: CALL_OW 251
75781: STR
75782: PUSH
75783: LD_STRING , 
75785: STR
75786: PUSH
75787: LD_VAR 0 3
75791: PPUSH
75792: CALL_OW 254
75796: STR
75797: PUSH
75798: LD_STRING , 
75800: STR
75801: PUSH
75802: LD_VAR 0 3
75806: PPUSH
75807: LD_INT 1
75809: PPUSH
75810: CALL_OW 268
75814: STR
75815: PUSH
75816: LD_STRING , 
75818: STR
75819: PUSH
75820: LD_VAR 0 3
75824: PPUSH
75825: LD_INT 2
75827: PPUSH
75828: CALL_OW 268
75832: STR
75833: PUSH
75834: LD_STRING ],
75836: STR
75837: PPUSH
75838: CALL_OW 561
// end ;
75842: GO 75736
75844: POP
75845: POP
// AddToLog ( ]; ) ;
75846: LD_STRING ];
75848: PPUSH
75849: CALL_OW 561
// end ;
75853: LD_VAR 0 2
75857: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75858: LD_INT 0
75860: PPUSH
75861: PPUSH
75862: PPUSH
75863: PPUSH
75864: PPUSH
// if not area or not rate or not max then
75865: LD_VAR 0 1
75869: NOT
75870: PUSH
75871: LD_VAR 0 2
75875: NOT
75876: OR
75877: PUSH
75878: LD_VAR 0 4
75882: NOT
75883: OR
75884: IFFALSE 75888
// exit ;
75886: GO 76077
// while 1 do
75888: LD_INT 1
75890: IFFALSE 76077
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75892: LD_ADDR_VAR 0 9
75896: PUSH
75897: LD_VAR 0 1
75901: PPUSH
75902: LD_INT 1
75904: PPUSH
75905: CALL_OW 287
75909: PUSH
75910: LD_INT 10
75912: MUL
75913: ST_TO_ADDR
// r := rate / 10 ;
75914: LD_ADDR_VAR 0 7
75918: PUSH
75919: LD_VAR 0 2
75923: PUSH
75924: LD_INT 10
75926: DIVREAL
75927: ST_TO_ADDR
// time := 1 1$00 ;
75928: LD_ADDR_VAR 0 8
75932: PUSH
75933: LD_INT 2100
75935: ST_TO_ADDR
// if amount < min then
75936: LD_VAR 0 9
75940: PUSH
75941: LD_VAR 0 3
75945: LESS
75946: IFFALSE 75964
// r := r * 2 else
75948: LD_ADDR_VAR 0 7
75952: PUSH
75953: LD_VAR 0 7
75957: PUSH
75958: LD_INT 2
75960: MUL
75961: ST_TO_ADDR
75962: GO 75990
// if amount > max then
75964: LD_VAR 0 9
75968: PUSH
75969: LD_VAR 0 4
75973: GREATER
75974: IFFALSE 75990
// r := r / 2 ;
75976: LD_ADDR_VAR 0 7
75980: PUSH
75981: LD_VAR 0 7
75985: PUSH
75986: LD_INT 2
75988: DIVREAL
75989: ST_TO_ADDR
// time := time / r ;
75990: LD_ADDR_VAR 0 8
75994: PUSH
75995: LD_VAR 0 8
75999: PUSH
76000: LD_VAR 0 7
76004: DIVREAL
76005: ST_TO_ADDR
// if time < 0 then
76006: LD_VAR 0 8
76010: PUSH
76011: LD_INT 0
76013: LESS
76014: IFFALSE 76031
// time := time * - 1 ;
76016: LD_ADDR_VAR 0 8
76020: PUSH
76021: LD_VAR 0 8
76025: PUSH
76026: LD_INT 1
76028: NEG
76029: MUL
76030: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76031: LD_VAR 0 8
76035: PUSH
76036: LD_INT 35
76038: PPUSH
76039: LD_INT 875
76041: PPUSH
76042: CALL_OW 12
76046: PLUS
76047: PPUSH
76048: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76052: LD_INT 1
76054: PPUSH
76055: LD_INT 5
76057: PPUSH
76058: CALL_OW 12
76062: PPUSH
76063: LD_VAR 0 1
76067: PPUSH
76068: LD_INT 1
76070: PPUSH
76071: CALL_OW 55
// end ;
76075: GO 75888
// end ;
76077: LD_VAR 0 5
76081: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76082: LD_INT 0
76084: PPUSH
76085: PPUSH
76086: PPUSH
76087: PPUSH
76088: PPUSH
76089: PPUSH
76090: PPUSH
76091: PPUSH
// if not turrets or not factories then
76092: LD_VAR 0 1
76096: NOT
76097: PUSH
76098: LD_VAR 0 2
76102: NOT
76103: OR
76104: IFFALSE 76108
// exit ;
76106: GO 76415
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76108: LD_ADDR_VAR 0 10
76112: PUSH
76113: LD_INT 5
76115: PUSH
76116: LD_INT 6
76118: PUSH
76119: EMPTY
76120: LIST
76121: LIST
76122: PUSH
76123: LD_INT 2
76125: PUSH
76126: LD_INT 4
76128: PUSH
76129: EMPTY
76130: LIST
76131: LIST
76132: PUSH
76133: LD_INT 3
76135: PUSH
76136: LD_INT 5
76138: PUSH
76139: EMPTY
76140: LIST
76141: LIST
76142: PUSH
76143: EMPTY
76144: LIST
76145: LIST
76146: LIST
76147: PUSH
76148: LD_INT 24
76150: PUSH
76151: LD_INT 25
76153: PUSH
76154: EMPTY
76155: LIST
76156: LIST
76157: PUSH
76158: LD_INT 23
76160: PUSH
76161: LD_INT 27
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: PUSH
76168: EMPTY
76169: LIST
76170: LIST
76171: PUSH
76172: LD_INT 42
76174: PUSH
76175: LD_INT 43
76177: PUSH
76178: EMPTY
76179: LIST
76180: LIST
76181: PUSH
76182: LD_INT 44
76184: PUSH
76185: LD_INT 46
76187: PUSH
76188: EMPTY
76189: LIST
76190: LIST
76191: PUSH
76192: LD_INT 45
76194: PUSH
76195: LD_INT 47
76197: PUSH
76198: EMPTY
76199: LIST
76200: LIST
76201: PUSH
76202: EMPTY
76203: LIST
76204: LIST
76205: LIST
76206: PUSH
76207: EMPTY
76208: LIST
76209: LIST
76210: LIST
76211: ST_TO_ADDR
// result := [ ] ;
76212: LD_ADDR_VAR 0 3
76216: PUSH
76217: EMPTY
76218: ST_TO_ADDR
// for i in turrets do
76219: LD_ADDR_VAR 0 4
76223: PUSH
76224: LD_VAR 0 1
76228: PUSH
76229: FOR_IN
76230: IFFALSE 76413
// begin nat := GetNation ( i ) ;
76232: LD_ADDR_VAR 0 7
76236: PUSH
76237: LD_VAR 0 4
76241: PPUSH
76242: CALL_OW 248
76246: ST_TO_ADDR
// weapon := 0 ;
76247: LD_ADDR_VAR 0 8
76251: PUSH
76252: LD_INT 0
76254: ST_TO_ADDR
// if not nat then
76255: LD_VAR 0 7
76259: NOT
76260: IFFALSE 76264
// continue ;
76262: GO 76229
// for j in list [ nat ] do
76264: LD_ADDR_VAR 0 5
76268: PUSH
76269: LD_VAR 0 10
76273: PUSH
76274: LD_VAR 0 7
76278: ARRAY
76279: PUSH
76280: FOR_IN
76281: IFFALSE 76322
// if GetBWeapon ( i ) = j [ 1 ] then
76283: LD_VAR 0 4
76287: PPUSH
76288: CALL_OW 269
76292: PUSH
76293: LD_VAR 0 5
76297: PUSH
76298: LD_INT 1
76300: ARRAY
76301: EQUAL
76302: IFFALSE 76320
// begin weapon := j [ 2 ] ;
76304: LD_ADDR_VAR 0 8
76308: PUSH
76309: LD_VAR 0 5
76313: PUSH
76314: LD_INT 2
76316: ARRAY
76317: ST_TO_ADDR
// break ;
76318: GO 76322
// end ;
76320: GO 76280
76322: POP
76323: POP
// if not weapon then
76324: LD_VAR 0 8
76328: NOT
76329: IFFALSE 76333
// continue ;
76331: GO 76229
// for k in factories do
76333: LD_ADDR_VAR 0 6
76337: PUSH
76338: LD_VAR 0 2
76342: PUSH
76343: FOR_IN
76344: IFFALSE 76409
// begin weapons := AvailableWeaponList ( k ) ;
76346: LD_ADDR_VAR 0 9
76350: PUSH
76351: LD_VAR 0 6
76355: PPUSH
76356: CALL_OW 478
76360: ST_TO_ADDR
// if not weapons then
76361: LD_VAR 0 9
76365: NOT
76366: IFFALSE 76370
// continue ;
76368: GO 76343
// if weapon in weapons then
76370: LD_VAR 0 8
76374: PUSH
76375: LD_VAR 0 9
76379: IN
76380: IFFALSE 76407
// begin result := [ i , weapon ] ;
76382: LD_ADDR_VAR 0 3
76386: PUSH
76387: LD_VAR 0 4
76391: PUSH
76392: LD_VAR 0 8
76396: PUSH
76397: EMPTY
76398: LIST
76399: LIST
76400: ST_TO_ADDR
// exit ;
76401: POP
76402: POP
76403: POP
76404: POP
76405: GO 76415
// end ; end ;
76407: GO 76343
76409: POP
76410: POP
// end ;
76411: GO 76229
76413: POP
76414: POP
// end ;
76415: LD_VAR 0 3
76419: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76420: LD_INT 0
76422: PPUSH
// if not side or side > 8 then
76423: LD_VAR 0 3
76427: NOT
76428: PUSH
76429: LD_VAR 0 3
76433: PUSH
76434: LD_INT 8
76436: GREATER
76437: OR
76438: IFFALSE 76442
// exit ;
76440: GO 76501
// if not range then
76442: LD_VAR 0 4
76446: NOT
76447: IFFALSE 76458
// range := - 12 ;
76449: LD_ADDR_VAR 0 4
76453: PUSH
76454: LD_INT 12
76456: NEG
76457: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76458: LD_VAR 0 1
76462: PPUSH
76463: LD_VAR 0 2
76467: PPUSH
76468: LD_VAR 0 3
76472: PPUSH
76473: LD_VAR 0 4
76477: PPUSH
76478: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76482: LD_VAR 0 1
76486: PPUSH
76487: LD_VAR 0 2
76491: PPUSH
76492: LD_VAR 0 3
76496: PPUSH
76497: CALL_OW 331
// end ;
76501: LD_VAR 0 5
76505: RET
// export function Video ( mode ) ; begin
76506: LD_INT 0
76508: PPUSH
// ingame_video = mode ;
76509: LD_ADDR_OWVAR 52
76513: PUSH
76514: LD_VAR 0 1
76518: ST_TO_ADDR
// interface_hidden = mode ;
76519: LD_ADDR_OWVAR 54
76523: PUSH
76524: LD_VAR 0 1
76528: ST_TO_ADDR
// end ;
76529: LD_VAR 0 2
76533: RET
// export function Join ( array , element ) ; begin
76534: LD_INT 0
76536: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76537: LD_ADDR_VAR 0 3
76541: PUSH
76542: LD_VAR 0 1
76546: PPUSH
76547: LD_VAR 0 1
76551: PUSH
76552: LD_INT 1
76554: PLUS
76555: PPUSH
76556: LD_VAR 0 2
76560: PPUSH
76561: CALL_OW 1
76565: ST_TO_ADDR
// end ;
76566: LD_VAR 0 3
76570: RET
// export function JoinUnion ( array , element ) ; begin
76571: LD_INT 0
76573: PPUSH
// result := array union element ;
76574: LD_ADDR_VAR 0 3
76578: PUSH
76579: LD_VAR 0 1
76583: PUSH
76584: LD_VAR 0 2
76588: UNION
76589: ST_TO_ADDR
// end ;
76590: LD_VAR 0 3
76594: RET
// export function GetBehemoths ( side ) ; begin
76595: LD_INT 0
76597: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76598: LD_ADDR_VAR 0 2
76602: PUSH
76603: LD_INT 22
76605: PUSH
76606: LD_VAR 0 1
76610: PUSH
76611: EMPTY
76612: LIST
76613: LIST
76614: PUSH
76615: LD_INT 31
76617: PUSH
76618: LD_INT 25
76620: PUSH
76621: EMPTY
76622: LIST
76623: LIST
76624: PUSH
76625: EMPTY
76626: LIST
76627: LIST
76628: PPUSH
76629: CALL_OW 69
76633: ST_TO_ADDR
// end ;
76634: LD_VAR 0 2
76638: RET
// export function Shuffle ( array ) ; var i , index ; begin
76639: LD_INT 0
76641: PPUSH
76642: PPUSH
76643: PPUSH
// result := [ ] ;
76644: LD_ADDR_VAR 0 2
76648: PUSH
76649: EMPTY
76650: ST_TO_ADDR
// if not array then
76651: LD_VAR 0 1
76655: NOT
76656: IFFALSE 76660
// exit ;
76658: GO 76759
// Randomize ;
76660: CALL_OW 10
// for i = array downto 1 do
76664: LD_ADDR_VAR 0 3
76668: PUSH
76669: DOUBLE
76670: LD_VAR 0 1
76674: INC
76675: ST_TO_ADDR
76676: LD_INT 1
76678: PUSH
76679: FOR_DOWNTO
76680: IFFALSE 76757
// begin index := rand ( 1 , array ) ;
76682: LD_ADDR_VAR 0 4
76686: PUSH
76687: LD_INT 1
76689: PPUSH
76690: LD_VAR 0 1
76694: PPUSH
76695: CALL_OW 12
76699: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76700: LD_ADDR_VAR 0 2
76704: PUSH
76705: LD_VAR 0 2
76709: PPUSH
76710: LD_VAR 0 2
76714: PUSH
76715: LD_INT 1
76717: PLUS
76718: PPUSH
76719: LD_VAR 0 1
76723: PUSH
76724: LD_VAR 0 4
76728: ARRAY
76729: PPUSH
76730: CALL_OW 2
76734: ST_TO_ADDR
// array := Delete ( array , index ) ;
76735: LD_ADDR_VAR 0 1
76739: PUSH
76740: LD_VAR 0 1
76744: PPUSH
76745: LD_VAR 0 4
76749: PPUSH
76750: CALL_OW 3
76754: ST_TO_ADDR
// end ;
76755: GO 76679
76757: POP
76758: POP
// end ;
76759: LD_VAR 0 2
76763: RET
// export function GetBaseMaterials ( base ) ; begin
76764: LD_INT 0
76766: PPUSH
// result := [ 0 , 0 , 0 ] ;
76767: LD_ADDR_VAR 0 2
76771: PUSH
76772: LD_INT 0
76774: PUSH
76775: LD_INT 0
76777: PUSH
76778: LD_INT 0
76780: PUSH
76781: EMPTY
76782: LIST
76783: LIST
76784: LIST
76785: ST_TO_ADDR
// if not base then
76786: LD_VAR 0 1
76790: NOT
76791: IFFALSE 76795
// exit ;
76793: GO 76844
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76795: LD_ADDR_VAR 0 2
76799: PUSH
76800: LD_VAR 0 1
76804: PPUSH
76805: LD_INT 1
76807: PPUSH
76808: CALL_OW 275
76812: PUSH
76813: LD_VAR 0 1
76817: PPUSH
76818: LD_INT 2
76820: PPUSH
76821: CALL_OW 275
76825: PUSH
76826: LD_VAR 0 1
76830: PPUSH
76831: LD_INT 3
76833: PPUSH
76834: CALL_OW 275
76838: PUSH
76839: EMPTY
76840: LIST
76841: LIST
76842: LIST
76843: ST_TO_ADDR
// end ;
76844: LD_VAR 0 2
76848: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76849: LD_INT 0
76851: PPUSH
76852: PPUSH
// result := array ;
76853: LD_ADDR_VAR 0 3
76857: PUSH
76858: LD_VAR 0 1
76862: ST_TO_ADDR
// if size >= result then
76863: LD_VAR 0 2
76867: PUSH
76868: LD_VAR 0 3
76872: GREATEREQUAL
76873: IFFALSE 76877
// exit ;
76875: GO 76927
// if size then
76877: LD_VAR 0 2
76881: IFFALSE 76927
// for i := array downto size do
76883: LD_ADDR_VAR 0 4
76887: PUSH
76888: DOUBLE
76889: LD_VAR 0 1
76893: INC
76894: ST_TO_ADDR
76895: LD_VAR 0 2
76899: PUSH
76900: FOR_DOWNTO
76901: IFFALSE 76925
// result := Delete ( result , result ) ;
76903: LD_ADDR_VAR 0 3
76907: PUSH
76908: LD_VAR 0 3
76912: PPUSH
76913: LD_VAR 0 3
76917: PPUSH
76918: CALL_OW 3
76922: ST_TO_ADDR
76923: GO 76900
76925: POP
76926: POP
// end ;
76927: LD_VAR 0 3
76931: RET
// export function ComExit ( unit ) ; var tmp ; begin
76932: LD_INT 0
76934: PPUSH
76935: PPUSH
// if not IsInUnit ( unit ) then
76936: LD_VAR 0 1
76940: PPUSH
76941: CALL_OW 310
76945: NOT
76946: IFFALSE 76950
// exit ;
76948: GO 77010
// tmp := IsInUnit ( unit ) ;
76950: LD_ADDR_VAR 0 3
76954: PUSH
76955: LD_VAR 0 1
76959: PPUSH
76960: CALL_OW 310
76964: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76965: LD_VAR 0 3
76969: PPUSH
76970: CALL_OW 247
76974: PUSH
76975: LD_INT 2
76977: EQUAL
76978: IFFALSE 76991
// ComExitVehicle ( unit ) else
76980: LD_VAR 0 1
76984: PPUSH
76985: CALL_OW 121
76989: GO 77000
// ComExitBuilding ( unit ) ;
76991: LD_VAR 0 1
76995: PPUSH
76996: CALL_OW 122
// result := tmp ;
77000: LD_ADDR_VAR 0 2
77004: PUSH
77005: LD_VAR 0 3
77009: ST_TO_ADDR
// end ;
77010: LD_VAR 0 2
77014: RET
// export function ComExitAll ( units ) ; var i ; begin
77015: LD_INT 0
77017: PPUSH
77018: PPUSH
// if not units then
77019: LD_VAR 0 1
77023: NOT
77024: IFFALSE 77028
// exit ;
77026: GO 77054
// for i in units do
77028: LD_ADDR_VAR 0 3
77032: PUSH
77033: LD_VAR 0 1
77037: PUSH
77038: FOR_IN
77039: IFFALSE 77052
// ComExit ( i ) ;
77041: LD_VAR 0 3
77045: PPUSH
77046: CALL 76932 0 1
77050: GO 77038
77052: POP
77053: POP
// end ;
77054: LD_VAR 0 2
77058: RET
// export function ResetHc ; begin
77059: LD_INT 0
77061: PPUSH
// InitHc ;
77062: CALL_OW 19
// hc_importance := 0 ;
77066: LD_ADDR_OWVAR 32
77070: PUSH
77071: LD_INT 0
77073: ST_TO_ADDR
// end ;
77074: LD_VAR 0 1
77078: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77079: LD_INT 0
77081: PPUSH
77082: PPUSH
77083: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77084: LD_ADDR_VAR 0 6
77088: PUSH
77089: LD_VAR 0 1
77093: PUSH
77094: LD_VAR 0 3
77098: PLUS
77099: PUSH
77100: LD_INT 2
77102: DIV
77103: ST_TO_ADDR
// if _x < 0 then
77104: LD_VAR 0 6
77108: PUSH
77109: LD_INT 0
77111: LESS
77112: IFFALSE 77129
// _x := _x * - 1 ;
77114: LD_ADDR_VAR 0 6
77118: PUSH
77119: LD_VAR 0 6
77123: PUSH
77124: LD_INT 1
77126: NEG
77127: MUL
77128: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77129: LD_ADDR_VAR 0 7
77133: PUSH
77134: LD_VAR 0 2
77138: PUSH
77139: LD_VAR 0 4
77143: PLUS
77144: PUSH
77145: LD_INT 2
77147: DIV
77148: ST_TO_ADDR
// if _y < 0 then
77149: LD_VAR 0 7
77153: PUSH
77154: LD_INT 0
77156: LESS
77157: IFFALSE 77174
// _y := _y * - 1 ;
77159: LD_ADDR_VAR 0 7
77163: PUSH
77164: LD_VAR 0 7
77168: PUSH
77169: LD_INT 1
77171: NEG
77172: MUL
77173: ST_TO_ADDR
// result := [ _x , _y ] ;
77174: LD_ADDR_VAR 0 5
77178: PUSH
77179: LD_VAR 0 6
77183: PUSH
77184: LD_VAR 0 7
77188: PUSH
77189: EMPTY
77190: LIST
77191: LIST
77192: ST_TO_ADDR
// end ;
77193: LD_VAR 0 5
77197: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77198: LD_INT 0
77200: PPUSH
77201: PPUSH
77202: PPUSH
77203: PPUSH
// task := GetTaskList ( unit ) ;
77204: LD_ADDR_VAR 0 7
77208: PUSH
77209: LD_VAR 0 1
77213: PPUSH
77214: CALL_OW 437
77218: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77219: LD_VAR 0 7
77223: NOT
77224: PUSH
77225: LD_VAR 0 1
77229: PPUSH
77230: LD_VAR 0 2
77234: PPUSH
77235: CALL_OW 308
77239: NOT
77240: AND
77241: IFFALSE 77245
// exit ;
77243: GO 77363
// if IsInArea ( unit , area ) then
77245: LD_VAR 0 1
77249: PPUSH
77250: LD_VAR 0 2
77254: PPUSH
77255: CALL_OW 308
77259: IFFALSE 77277
// begin ComMoveToArea ( unit , goAway ) ;
77261: LD_VAR 0 1
77265: PPUSH
77266: LD_VAR 0 3
77270: PPUSH
77271: CALL_OW 113
// exit ;
77275: GO 77363
// end ; if task [ 1 ] [ 1 ] <> M then
77277: LD_VAR 0 7
77281: PUSH
77282: LD_INT 1
77284: ARRAY
77285: PUSH
77286: LD_INT 1
77288: ARRAY
77289: PUSH
77290: LD_STRING M
77292: NONEQUAL
77293: IFFALSE 77297
// exit ;
77295: GO 77363
// x := task [ 1 ] [ 2 ] ;
77297: LD_ADDR_VAR 0 5
77301: PUSH
77302: LD_VAR 0 7
77306: PUSH
77307: LD_INT 1
77309: ARRAY
77310: PUSH
77311: LD_INT 2
77313: ARRAY
77314: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77315: LD_ADDR_VAR 0 6
77319: PUSH
77320: LD_VAR 0 7
77324: PUSH
77325: LD_INT 1
77327: ARRAY
77328: PUSH
77329: LD_INT 3
77331: ARRAY
77332: ST_TO_ADDR
// if InArea ( x , y , area ) then
77333: LD_VAR 0 5
77337: PPUSH
77338: LD_VAR 0 6
77342: PPUSH
77343: LD_VAR 0 2
77347: PPUSH
77348: CALL_OW 309
77352: IFFALSE 77363
// ComStop ( unit ) ;
77354: LD_VAR 0 1
77358: PPUSH
77359: CALL_OW 141
// end ;
77363: LD_VAR 0 4
77367: RET
// export function Abs ( value ) ; begin
77368: LD_INT 0
77370: PPUSH
// result := value ;
77371: LD_ADDR_VAR 0 2
77375: PUSH
77376: LD_VAR 0 1
77380: ST_TO_ADDR
// if value < 0 then
77381: LD_VAR 0 1
77385: PUSH
77386: LD_INT 0
77388: LESS
77389: IFFALSE 77406
// result := value * - 1 ;
77391: LD_ADDR_VAR 0 2
77395: PUSH
77396: LD_VAR 0 1
77400: PUSH
77401: LD_INT 1
77403: NEG
77404: MUL
77405: ST_TO_ADDR
// end ;
77406: LD_VAR 0 2
77410: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77411: LD_INT 0
77413: PPUSH
77414: PPUSH
77415: PPUSH
77416: PPUSH
77417: PPUSH
77418: PPUSH
77419: PPUSH
77420: PPUSH
// if not unit or not building then
77421: LD_VAR 0 1
77425: NOT
77426: PUSH
77427: LD_VAR 0 2
77431: NOT
77432: OR
77433: IFFALSE 77437
// exit ;
77435: GO 77663
// x := GetX ( building ) ;
77437: LD_ADDR_VAR 0 4
77441: PUSH
77442: LD_VAR 0 2
77446: PPUSH
77447: CALL_OW 250
77451: ST_TO_ADDR
// y := GetY ( building ) ;
77452: LD_ADDR_VAR 0 6
77456: PUSH
77457: LD_VAR 0 2
77461: PPUSH
77462: CALL_OW 251
77466: ST_TO_ADDR
// d := GetDir ( building ) ;
77467: LD_ADDR_VAR 0 8
77471: PUSH
77472: LD_VAR 0 2
77476: PPUSH
77477: CALL_OW 254
77481: ST_TO_ADDR
// r := 4 ;
77482: LD_ADDR_VAR 0 9
77486: PUSH
77487: LD_INT 4
77489: ST_TO_ADDR
// for i := 1 to 5 do
77490: LD_ADDR_VAR 0 10
77494: PUSH
77495: DOUBLE
77496: LD_INT 1
77498: DEC
77499: ST_TO_ADDR
77500: LD_INT 5
77502: PUSH
77503: FOR_TO
77504: IFFALSE 77661
// begin _x := ShiftX ( x , d , r + i ) ;
77506: LD_ADDR_VAR 0 5
77510: PUSH
77511: LD_VAR 0 4
77515: PPUSH
77516: LD_VAR 0 8
77520: PPUSH
77521: LD_VAR 0 9
77525: PUSH
77526: LD_VAR 0 10
77530: PLUS
77531: PPUSH
77532: CALL_OW 272
77536: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77537: LD_ADDR_VAR 0 7
77541: PUSH
77542: LD_VAR 0 6
77546: PPUSH
77547: LD_VAR 0 8
77551: PPUSH
77552: LD_VAR 0 9
77556: PUSH
77557: LD_VAR 0 10
77561: PLUS
77562: PPUSH
77563: CALL_OW 273
77567: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77568: LD_VAR 0 5
77572: PPUSH
77573: LD_VAR 0 7
77577: PPUSH
77578: CALL_OW 488
77582: PUSH
77583: LD_VAR 0 5
77587: PPUSH
77588: LD_VAR 0 7
77592: PPUSH
77593: CALL_OW 428
77597: PPUSH
77598: CALL_OW 247
77602: PUSH
77603: LD_INT 3
77605: PUSH
77606: LD_INT 2
77608: PUSH
77609: EMPTY
77610: LIST
77611: LIST
77612: IN
77613: NOT
77614: AND
77615: IFFALSE 77659
// begin ComMoveXY ( unit , _x , _y ) ;
77617: LD_VAR 0 1
77621: PPUSH
77622: LD_VAR 0 5
77626: PPUSH
77627: LD_VAR 0 7
77631: PPUSH
77632: CALL_OW 111
// result := [ _x , _y ] ;
77636: LD_ADDR_VAR 0 3
77640: PUSH
77641: LD_VAR 0 5
77645: PUSH
77646: LD_VAR 0 7
77650: PUSH
77651: EMPTY
77652: LIST
77653: LIST
77654: ST_TO_ADDR
// exit ;
77655: POP
77656: POP
77657: GO 77663
// end ; end ;
77659: GO 77503
77661: POP
77662: POP
// end ;
77663: LD_VAR 0 3
77667: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77668: LD_INT 0
77670: PPUSH
77671: PPUSH
77672: PPUSH
// result := 0 ;
77673: LD_ADDR_VAR 0 3
77677: PUSH
77678: LD_INT 0
77680: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77681: LD_VAR 0 1
77685: PUSH
77686: LD_INT 0
77688: LESS
77689: PUSH
77690: LD_VAR 0 1
77694: PUSH
77695: LD_INT 8
77697: GREATER
77698: OR
77699: PUSH
77700: LD_VAR 0 2
77704: PUSH
77705: LD_INT 0
77707: LESS
77708: OR
77709: PUSH
77710: LD_VAR 0 2
77714: PUSH
77715: LD_INT 8
77717: GREATER
77718: OR
77719: IFFALSE 77723
// exit ;
77721: GO 77798
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77723: LD_ADDR_VAR 0 4
77727: PUSH
77728: LD_INT 22
77730: PUSH
77731: LD_VAR 0 2
77735: PUSH
77736: EMPTY
77737: LIST
77738: LIST
77739: PPUSH
77740: CALL_OW 69
77744: PUSH
77745: FOR_IN
77746: IFFALSE 77796
// begin un := UnitShoot ( i ) ;
77748: LD_ADDR_VAR 0 5
77752: PUSH
77753: LD_VAR 0 4
77757: PPUSH
77758: CALL_OW 504
77762: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77763: LD_VAR 0 5
77767: PPUSH
77768: CALL_OW 255
77772: PUSH
77773: LD_VAR 0 1
77777: EQUAL
77778: IFFALSE 77794
// begin result := un ;
77780: LD_ADDR_VAR 0 3
77784: PUSH
77785: LD_VAR 0 5
77789: ST_TO_ADDR
// exit ;
77790: POP
77791: POP
77792: GO 77798
// end ; end ;
77794: GO 77745
77796: POP
77797: POP
// end ;
77798: LD_VAR 0 3
77802: RET
// export function GetCargoBay ( units ) ; begin
77803: LD_INT 0
77805: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77806: LD_ADDR_VAR 0 2
77810: PUSH
77811: LD_VAR 0 1
77815: PPUSH
77816: LD_INT 2
77818: PUSH
77819: LD_INT 34
77821: PUSH
77822: LD_INT 12
77824: PUSH
77825: EMPTY
77826: LIST
77827: LIST
77828: PUSH
77829: LD_INT 34
77831: PUSH
77832: LD_INT 51
77834: PUSH
77835: EMPTY
77836: LIST
77837: LIST
77838: PUSH
77839: LD_INT 34
77841: PUSH
77842: LD_INT 32
77844: PUSH
77845: EMPTY
77846: LIST
77847: LIST
77848: PUSH
77849: LD_INT 34
77851: PUSH
77852: LD_INT 89
77854: PUSH
77855: EMPTY
77856: LIST
77857: LIST
77858: PUSH
77859: EMPTY
77860: LIST
77861: LIST
77862: LIST
77863: LIST
77864: LIST
77865: PPUSH
77866: CALL_OW 72
77870: ST_TO_ADDR
// end ;
77871: LD_VAR 0 2
77875: RET
// export function Negate ( value ) ; begin
77876: LD_INT 0
77878: PPUSH
// result := not value ;
77879: LD_ADDR_VAR 0 2
77883: PUSH
77884: LD_VAR 0 1
77888: NOT
77889: ST_TO_ADDR
// end ;
77890: LD_VAR 0 2
77894: RET
// export function Inc ( value ) ; begin
77895: LD_INT 0
77897: PPUSH
// result := value + 1 ;
77898: LD_ADDR_VAR 0 2
77902: PUSH
77903: LD_VAR 0 1
77907: PUSH
77908: LD_INT 1
77910: PLUS
77911: ST_TO_ADDR
// end ;
77912: LD_VAR 0 2
77916: RET
// export function Dec ( value ) ; begin
77917: LD_INT 0
77919: PPUSH
// result := value - 1 ;
77920: LD_ADDR_VAR 0 2
77924: PUSH
77925: LD_VAR 0 1
77929: PUSH
77930: LD_INT 1
77932: MINUS
77933: ST_TO_ADDR
// end ;
77934: LD_VAR 0 2
77938: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77939: LD_INT 0
77941: PPUSH
77942: PPUSH
77943: PPUSH
77944: PPUSH
77945: PPUSH
77946: PPUSH
77947: PPUSH
77948: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77949: LD_VAR 0 1
77953: PPUSH
77954: LD_VAR 0 2
77958: PPUSH
77959: CALL_OW 488
77963: NOT
77964: PUSH
77965: LD_VAR 0 3
77969: PPUSH
77970: LD_VAR 0 4
77974: PPUSH
77975: CALL_OW 488
77979: NOT
77980: OR
77981: IFFALSE 77994
// begin result := - 1 ;
77983: LD_ADDR_VAR 0 5
77987: PUSH
77988: LD_INT 1
77990: NEG
77991: ST_TO_ADDR
// exit ;
77992: GO 78229
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77994: LD_ADDR_VAR 0 12
77998: PUSH
77999: LD_VAR 0 1
78003: PPUSH
78004: LD_VAR 0 2
78008: PPUSH
78009: LD_VAR 0 3
78013: PPUSH
78014: LD_VAR 0 4
78018: PPUSH
78019: CALL 77079 0 4
78023: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78024: LD_ADDR_VAR 0 11
78028: PUSH
78029: LD_VAR 0 1
78033: PPUSH
78034: LD_VAR 0 2
78038: PPUSH
78039: LD_VAR 0 12
78043: PUSH
78044: LD_INT 1
78046: ARRAY
78047: PPUSH
78048: LD_VAR 0 12
78052: PUSH
78053: LD_INT 2
78055: ARRAY
78056: PPUSH
78057: CALL_OW 298
78061: ST_TO_ADDR
// distance := 9999 ;
78062: LD_ADDR_VAR 0 10
78066: PUSH
78067: LD_INT 9999
78069: ST_TO_ADDR
// for i := 0 to 5 do
78070: LD_ADDR_VAR 0 6
78074: PUSH
78075: DOUBLE
78076: LD_INT 0
78078: DEC
78079: ST_TO_ADDR
78080: LD_INT 5
78082: PUSH
78083: FOR_TO
78084: IFFALSE 78227
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78086: LD_ADDR_VAR 0 7
78090: PUSH
78091: LD_VAR 0 1
78095: PPUSH
78096: LD_VAR 0 6
78100: PPUSH
78101: LD_VAR 0 11
78105: PPUSH
78106: CALL_OW 272
78110: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78111: LD_ADDR_VAR 0 8
78115: PUSH
78116: LD_VAR 0 2
78120: PPUSH
78121: LD_VAR 0 6
78125: PPUSH
78126: LD_VAR 0 11
78130: PPUSH
78131: CALL_OW 273
78135: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78136: LD_VAR 0 7
78140: PPUSH
78141: LD_VAR 0 8
78145: PPUSH
78146: CALL_OW 488
78150: NOT
78151: IFFALSE 78155
// continue ;
78153: GO 78083
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78155: LD_ADDR_VAR 0 9
78159: PUSH
78160: LD_VAR 0 12
78164: PUSH
78165: LD_INT 1
78167: ARRAY
78168: PPUSH
78169: LD_VAR 0 12
78173: PUSH
78174: LD_INT 2
78176: ARRAY
78177: PPUSH
78178: LD_VAR 0 7
78182: PPUSH
78183: LD_VAR 0 8
78187: PPUSH
78188: CALL_OW 298
78192: ST_TO_ADDR
// if tmp < distance then
78193: LD_VAR 0 9
78197: PUSH
78198: LD_VAR 0 10
78202: LESS
78203: IFFALSE 78225
// begin result := i ;
78205: LD_ADDR_VAR 0 5
78209: PUSH
78210: LD_VAR 0 6
78214: ST_TO_ADDR
// distance := tmp ;
78215: LD_ADDR_VAR 0 10
78219: PUSH
78220: LD_VAR 0 9
78224: ST_TO_ADDR
// end ; end ;
78225: GO 78083
78227: POP
78228: POP
// end ;
78229: LD_VAR 0 5
78233: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78234: LD_INT 0
78236: PPUSH
78237: PPUSH
// if not driver or not IsInUnit ( driver ) then
78238: LD_VAR 0 1
78242: NOT
78243: PUSH
78244: LD_VAR 0 1
78248: PPUSH
78249: CALL_OW 310
78253: NOT
78254: OR
78255: IFFALSE 78259
// exit ;
78257: GO 78349
// vehicle := IsInUnit ( driver ) ;
78259: LD_ADDR_VAR 0 3
78263: PUSH
78264: LD_VAR 0 1
78268: PPUSH
78269: CALL_OW 310
78273: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78274: LD_VAR 0 1
78278: PPUSH
78279: LD_STRING \
78281: PUSH
78282: LD_INT 0
78284: PUSH
78285: LD_INT 0
78287: PUSH
78288: LD_INT 0
78290: PUSH
78291: LD_INT 0
78293: PUSH
78294: LD_INT 0
78296: PUSH
78297: LD_INT 0
78299: PUSH
78300: EMPTY
78301: LIST
78302: LIST
78303: LIST
78304: LIST
78305: LIST
78306: LIST
78307: LIST
78308: PUSH
78309: LD_STRING E
78311: PUSH
78312: LD_INT 0
78314: PUSH
78315: LD_INT 0
78317: PUSH
78318: LD_VAR 0 3
78322: PUSH
78323: LD_INT 0
78325: PUSH
78326: LD_INT 0
78328: PUSH
78329: LD_INT 0
78331: PUSH
78332: EMPTY
78333: LIST
78334: LIST
78335: LIST
78336: LIST
78337: LIST
78338: LIST
78339: LIST
78340: PUSH
78341: EMPTY
78342: LIST
78343: LIST
78344: PPUSH
78345: CALL_OW 446
// end ;
78349: LD_VAR 0 2
78353: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78354: LD_INT 0
78356: PPUSH
78357: PPUSH
// if not driver or not IsInUnit ( driver ) then
78358: LD_VAR 0 1
78362: NOT
78363: PUSH
78364: LD_VAR 0 1
78368: PPUSH
78369: CALL_OW 310
78373: NOT
78374: OR
78375: IFFALSE 78379
// exit ;
78377: GO 78469
// vehicle := IsInUnit ( driver ) ;
78379: LD_ADDR_VAR 0 3
78383: PUSH
78384: LD_VAR 0 1
78388: PPUSH
78389: CALL_OW 310
78393: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78394: LD_VAR 0 1
78398: PPUSH
78399: LD_STRING \
78401: PUSH
78402: LD_INT 0
78404: PUSH
78405: LD_INT 0
78407: PUSH
78408: LD_INT 0
78410: PUSH
78411: LD_INT 0
78413: PUSH
78414: LD_INT 0
78416: PUSH
78417: LD_INT 0
78419: PUSH
78420: EMPTY
78421: LIST
78422: LIST
78423: LIST
78424: LIST
78425: LIST
78426: LIST
78427: LIST
78428: PUSH
78429: LD_STRING E
78431: PUSH
78432: LD_INT 0
78434: PUSH
78435: LD_INT 0
78437: PUSH
78438: LD_VAR 0 3
78442: PUSH
78443: LD_INT 0
78445: PUSH
78446: LD_INT 0
78448: PUSH
78449: LD_INT 0
78451: PUSH
78452: EMPTY
78453: LIST
78454: LIST
78455: LIST
78456: LIST
78457: LIST
78458: LIST
78459: LIST
78460: PUSH
78461: EMPTY
78462: LIST
78463: LIST
78464: PPUSH
78465: CALL_OW 447
// end ;
78469: LD_VAR 0 2
78473: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78474: LD_INT 0
78476: PPUSH
78477: PPUSH
78478: PPUSH
// tmp := [ ] ;
78479: LD_ADDR_VAR 0 5
78483: PUSH
78484: EMPTY
78485: ST_TO_ADDR
// for i in units do
78486: LD_ADDR_VAR 0 4
78490: PUSH
78491: LD_VAR 0 1
78495: PUSH
78496: FOR_IN
78497: IFFALSE 78535
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78499: LD_ADDR_VAR 0 5
78503: PUSH
78504: LD_VAR 0 5
78508: PPUSH
78509: LD_VAR 0 5
78513: PUSH
78514: LD_INT 1
78516: PLUS
78517: PPUSH
78518: LD_VAR 0 4
78522: PPUSH
78523: CALL_OW 256
78527: PPUSH
78528: CALL_OW 2
78532: ST_TO_ADDR
78533: GO 78496
78535: POP
78536: POP
// if not tmp then
78537: LD_VAR 0 5
78541: NOT
78542: IFFALSE 78546
// exit ;
78544: GO 78594
// if asc then
78546: LD_VAR 0 2
78550: IFFALSE 78574
// result := SortListByListAsc ( units , tmp ) else
78552: LD_ADDR_VAR 0 3
78556: PUSH
78557: LD_VAR 0 1
78561: PPUSH
78562: LD_VAR 0 5
78566: PPUSH
78567: CALL_OW 76
78571: ST_TO_ADDR
78572: GO 78594
// result := SortListByListDesc ( units , tmp ) ;
78574: LD_ADDR_VAR 0 3
78578: PUSH
78579: LD_VAR 0 1
78583: PPUSH
78584: LD_VAR 0 5
78588: PPUSH
78589: CALL_OW 77
78593: ST_TO_ADDR
// end ;
78594: LD_VAR 0 3
78598: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78599: LD_INT 0
78601: PPUSH
78602: PPUSH
// task := GetTaskList ( mech ) ;
78603: LD_ADDR_VAR 0 4
78607: PUSH
78608: LD_VAR 0 1
78612: PPUSH
78613: CALL_OW 437
78617: ST_TO_ADDR
// if not task then
78618: LD_VAR 0 4
78622: NOT
78623: IFFALSE 78627
// exit ;
78625: GO 78669
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78627: LD_ADDR_VAR 0 3
78631: PUSH
78632: LD_VAR 0 4
78636: PUSH
78637: LD_INT 1
78639: ARRAY
78640: PUSH
78641: LD_INT 1
78643: ARRAY
78644: PUSH
78645: LD_STRING r
78647: EQUAL
78648: PUSH
78649: LD_VAR 0 4
78653: PUSH
78654: LD_INT 1
78656: ARRAY
78657: PUSH
78658: LD_INT 4
78660: ARRAY
78661: PUSH
78662: LD_VAR 0 2
78666: EQUAL
78667: AND
78668: ST_TO_ADDR
// end ;
78669: LD_VAR 0 3
78673: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78674: LD_INT 0
78676: PPUSH
// SetDir ( unit , d ) ;
78677: LD_VAR 0 1
78681: PPUSH
78682: LD_VAR 0 4
78686: PPUSH
78687: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78691: LD_VAR 0 1
78695: PPUSH
78696: LD_VAR 0 2
78700: PPUSH
78701: LD_VAR 0 3
78705: PPUSH
78706: LD_VAR 0 5
78710: PPUSH
78711: CALL_OW 48
// end ;
78715: LD_VAR 0 6
78719: RET
// export function ToNaturalNumber ( number ) ; begin
78720: LD_INT 0
78722: PPUSH
// result := number div 1 ;
78723: LD_ADDR_VAR 0 2
78727: PUSH
78728: LD_VAR 0 1
78732: PUSH
78733: LD_INT 1
78735: DIV
78736: ST_TO_ADDR
// if number < 0 then
78737: LD_VAR 0 1
78741: PUSH
78742: LD_INT 0
78744: LESS
78745: IFFALSE 78755
// result := 0 ;
78747: LD_ADDR_VAR 0 2
78751: PUSH
78752: LD_INT 0
78754: ST_TO_ADDR
// end ;
78755: LD_VAR 0 2
78759: RET
// export function SortByClass ( units , class ) ; var un ; begin
78760: LD_INT 0
78762: PPUSH
78763: PPUSH
// if not units or not class then
78764: LD_VAR 0 1
78768: NOT
78769: PUSH
78770: LD_VAR 0 2
78774: NOT
78775: OR
78776: IFFALSE 78780
// exit ;
78778: GO 78875
// result := [ ] ;
78780: LD_ADDR_VAR 0 3
78784: PUSH
78785: EMPTY
78786: ST_TO_ADDR
// for un in units do
78787: LD_ADDR_VAR 0 4
78791: PUSH
78792: LD_VAR 0 1
78796: PUSH
78797: FOR_IN
78798: IFFALSE 78873
// if GetClass ( un ) = class then
78800: LD_VAR 0 4
78804: PPUSH
78805: CALL_OW 257
78809: PUSH
78810: LD_VAR 0 2
78814: EQUAL
78815: IFFALSE 78842
// result := Insert ( result , 1 , un ) else
78817: LD_ADDR_VAR 0 3
78821: PUSH
78822: LD_VAR 0 3
78826: PPUSH
78827: LD_INT 1
78829: PPUSH
78830: LD_VAR 0 4
78834: PPUSH
78835: CALL_OW 2
78839: ST_TO_ADDR
78840: GO 78871
// result := Replace ( result , result + 1 , un ) ;
78842: LD_ADDR_VAR 0 3
78846: PUSH
78847: LD_VAR 0 3
78851: PPUSH
78852: LD_VAR 0 3
78856: PUSH
78857: LD_INT 1
78859: PLUS
78860: PPUSH
78861: LD_VAR 0 4
78865: PPUSH
78866: CALL_OW 1
78870: ST_TO_ADDR
78871: GO 78797
78873: POP
78874: POP
// end ;
78875: LD_VAR 0 3
78879: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78880: LD_INT 0
78882: PPUSH
78883: PPUSH
78884: PPUSH
78885: PPUSH
78886: PPUSH
78887: PPUSH
78888: PPUSH
// result := [ ] ;
78889: LD_ADDR_VAR 0 4
78893: PUSH
78894: EMPTY
78895: ST_TO_ADDR
// if x - r < 0 then
78896: LD_VAR 0 1
78900: PUSH
78901: LD_VAR 0 3
78905: MINUS
78906: PUSH
78907: LD_INT 0
78909: LESS
78910: IFFALSE 78922
// min_x := 0 else
78912: LD_ADDR_VAR 0 8
78916: PUSH
78917: LD_INT 0
78919: ST_TO_ADDR
78920: GO 78938
// min_x := x - r ;
78922: LD_ADDR_VAR 0 8
78926: PUSH
78927: LD_VAR 0 1
78931: PUSH
78932: LD_VAR 0 3
78936: MINUS
78937: ST_TO_ADDR
// if y - r < 0 then
78938: LD_VAR 0 2
78942: PUSH
78943: LD_VAR 0 3
78947: MINUS
78948: PUSH
78949: LD_INT 0
78951: LESS
78952: IFFALSE 78964
// min_y := 0 else
78954: LD_ADDR_VAR 0 7
78958: PUSH
78959: LD_INT 0
78961: ST_TO_ADDR
78962: GO 78980
// min_y := y - r ;
78964: LD_ADDR_VAR 0 7
78968: PUSH
78969: LD_VAR 0 2
78973: PUSH
78974: LD_VAR 0 3
78978: MINUS
78979: ST_TO_ADDR
// max_x := x + r ;
78980: LD_ADDR_VAR 0 9
78984: PUSH
78985: LD_VAR 0 1
78989: PUSH
78990: LD_VAR 0 3
78994: PLUS
78995: ST_TO_ADDR
// max_y := y + r ;
78996: LD_ADDR_VAR 0 10
79000: PUSH
79001: LD_VAR 0 2
79005: PUSH
79006: LD_VAR 0 3
79010: PLUS
79011: ST_TO_ADDR
// for _x = min_x to max_x do
79012: LD_ADDR_VAR 0 5
79016: PUSH
79017: DOUBLE
79018: LD_VAR 0 8
79022: DEC
79023: ST_TO_ADDR
79024: LD_VAR 0 9
79028: PUSH
79029: FOR_TO
79030: IFFALSE 79131
// for _y = min_y to max_y do
79032: LD_ADDR_VAR 0 6
79036: PUSH
79037: DOUBLE
79038: LD_VAR 0 7
79042: DEC
79043: ST_TO_ADDR
79044: LD_VAR 0 10
79048: PUSH
79049: FOR_TO
79050: IFFALSE 79127
// begin if not ValidHex ( _x , _y ) then
79052: LD_VAR 0 5
79056: PPUSH
79057: LD_VAR 0 6
79061: PPUSH
79062: CALL_OW 488
79066: NOT
79067: IFFALSE 79071
// continue ;
79069: GO 79049
// if GetResourceTypeXY ( _x , _y ) then
79071: LD_VAR 0 5
79075: PPUSH
79076: LD_VAR 0 6
79080: PPUSH
79081: CALL_OW 283
79085: IFFALSE 79125
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79087: LD_ADDR_VAR 0 4
79091: PUSH
79092: LD_VAR 0 4
79096: PPUSH
79097: LD_VAR 0 4
79101: PUSH
79102: LD_INT 1
79104: PLUS
79105: PPUSH
79106: LD_VAR 0 5
79110: PUSH
79111: LD_VAR 0 6
79115: PUSH
79116: EMPTY
79117: LIST
79118: LIST
79119: PPUSH
79120: CALL_OW 1
79124: ST_TO_ADDR
// end ;
79125: GO 79049
79127: POP
79128: POP
79129: GO 79029
79131: POP
79132: POP
// end ;
79133: LD_VAR 0 4
79137: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79138: LD_INT 0
79140: PPUSH
79141: PPUSH
79142: PPUSH
79143: PPUSH
79144: PPUSH
79145: PPUSH
79146: PPUSH
79147: PPUSH
// if not units then
79148: LD_VAR 0 1
79152: NOT
79153: IFFALSE 79157
// exit ;
79155: GO 79681
// result := UnitFilter ( units , [ f_ok ] ) ;
79157: LD_ADDR_VAR 0 3
79161: PUSH
79162: LD_VAR 0 1
79166: PPUSH
79167: LD_INT 50
79169: PUSH
79170: EMPTY
79171: LIST
79172: PPUSH
79173: CALL_OW 72
79177: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79178: LD_ADDR_VAR 0 8
79182: PUSH
79183: LD_VAR 0 1
79187: PUSH
79188: LD_INT 1
79190: ARRAY
79191: PPUSH
79192: CALL_OW 255
79196: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79197: LD_ADDR_VAR 0 10
79201: PUSH
79202: LD_INT 29
79204: PUSH
79205: LD_INT 91
79207: PUSH
79208: LD_INT 49
79210: PUSH
79211: EMPTY
79212: LIST
79213: LIST
79214: LIST
79215: ST_TO_ADDR
// if not result then
79216: LD_VAR 0 3
79220: NOT
79221: IFFALSE 79225
// exit ;
79223: GO 79681
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79225: LD_ADDR_VAR 0 5
79229: PUSH
79230: LD_INT 81
79232: PUSH
79233: LD_VAR 0 8
79237: PUSH
79238: EMPTY
79239: LIST
79240: LIST
79241: PPUSH
79242: CALL_OW 69
79246: ST_TO_ADDR
// for i in result do
79247: LD_ADDR_VAR 0 4
79251: PUSH
79252: LD_VAR 0 3
79256: PUSH
79257: FOR_IN
79258: IFFALSE 79679
// begin tag := GetTag ( i ) + 1 ;
79260: LD_ADDR_VAR 0 9
79264: PUSH
79265: LD_VAR 0 4
79269: PPUSH
79270: CALL_OW 110
79274: PUSH
79275: LD_INT 1
79277: PLUS
79278: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79279: LD_ADDR_VAR 0 7
79283: PUSH
79284: LD_VAR 0 4
79288: PPUSH
79289: CALL_OW 250
79293: PPUSH
79294: LD_VAR 0 4
79298: PPUSH
79299: CALL_OW 251
79303: PPUSH
79304: LD_INT 6
79306: PPUSH
79307: CALL 78880 0 3
79311: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79312: LD_VAR 0 4
79316: PPUSH
79317: CALL_OW 247
79321: PUSH
79322: LD_INT 2
79324: EQUAL
79325: PUSH
79326: LD_VAR 0 7
79330: AND
79331: PUSH
79332: LD_VAR 0 4
79336: PPUSH
79337: CALL_OW 264
79341: PUSH
79342: LD_VAR 0 10
79346: IN
79347: NOT
79348: AND
79349: IFFALSE 79388
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79351: LD_VAR 0 4
79355: PPUSH
79356: LD_VAR 0 7
79360: PUSH
79361: LD_INT 1
79363: ARRAY
79364: PUSH
79365: LD_INT 1
79367: ARRAY
79368: PPUSH
79369: LD_VAR 0 7
79373: PUSH
79374: LD_INT 1
79376: ARRAY
79377: PUSH
79378: LD_INT 2
79380: ARRAY
79381: PPUSH
79382: CALL_OW 116
79386: GO 79677
// if path > tag then
79388: LD_VAR 0 2
79392: PUSH
79393: LD_VAR 0 9
79397: GREATER
79398: IFFALSE 79606
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79400: LD_ADDR_VAR 0 6
79404: PUSH
79405: LD_VAR 0 5
79409: PPUSH
79410: LD_INT 91
79412: PUSH
79413: LD_VAR 0 4
79417: PUSH
79418: LD_INT 8
79420: PUSH
79421: EMPTY
79422: LIST
79423: LIST
79424: LIST
79425: PPUSH
79426: CALL_OW 72
79430: ST_TO_ADDR
// if nearEnemy then
79431: LD_VAR 0 6
79435: IFFALSE 79504
// begin if GetWeapon ( i ) = ru_time_lapser then
79437: LD_VAR 0 4
79441: PPUSH
79442: CALL_OW 264
79446: PUSH
79447: LD_INT 49
79449: EQUAL
79450: IFFALSE 79478
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79452: LD_VAR 0 4
79456: PPUSH
79457: LD_VAR 0 6
79461: PPUSH
79462: LD_VAR 0 4
79466: PPUSH
79467: CALL_OW 74
79471: PPUSH
79472: CALL_OW 112
79476: GO 79502
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79478: LD_VAR 0 4
79482: PPUSH
79483: LD_VAR 0 6
79487: PPUSH
79488: LD_VAR 0 4
79492: PPUSH
79493: CALL_OW 74
79497: PPUSH
79498: CALL_OW 115
// end else
79502: GO 79604
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79504: LD_VAR 0 4
79508: PPUSH
79509: LD_VAR 0 2
79513: PUSH
79514: LD_VAR 0 9
79518: ARRAY
79519: PUSH
79520: LD_INT 1
79522: ARRAY
79523: PPUSH
79524: LD_VAR 0 2
79528: PUSH
79529: LD_VAR 0 9
79533: ARRAY
79534: PUSH
79535: LD_INT 2
79537: ARRAY
79538: PPUSH
79539: CALL_OW 297
79543: PUSH
79544: LD_INT 6
79546: GREATER
79547: IFFALSE 79590
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79549: LD_VAR 0 4
79553: PPUSH
79554: LD_VAR 0 2
79558: PUSH
79559: LD_VAR 0 9
79563: ARRAY
79564: PUSH
79565: LD_INT 1
79567: ARRAY
79568: PPUSH
79569: LD_VAR 0 2
79573: PUSH
79574: LD_VAR 0 9
79578: ARRAY
79579: PUSH
79580: LD_INT 2
79582: ARRAY
79583: PPUSH
79584: CALL_OW 114
79588: GO 79604
// SetTag ( i , tag ) ;
79590: LD_VAR 0 4
79594: PPUSH
79595: LD_VAR 0 9
79599: PPUSH
79600: CALL_OW 109
// end else
79604: GO 79677
// if enemy then
79606: LD_VAR 0 5
79610: IFFALSE 79677
// begin if GetWeapon ( i ) = ru_time_lapser then
79612: LD_VAR 0 4
79616: PPUSH
79617: CALL_OW 264
79621: PUSH
79622: LD_INT 49
79624: EQUAL
79625: IFFALSE 79653
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79627: LD_VAR 0 4
79631: PPUSH
79632: LD_VAR 0 5
79636: PPUSH
79637: LD_VAR 0 4
79641: PPUSH
79642: CALL_OW 74
79646: PPUSH
79647: CALL_OW 112
79651: GO 79677
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79653: LD_VAR 0 4
79657: PPUSH
79658: LD_VAR 0 5
79662: PPUSH
79663: LD_VAR 0 4
79667: PPUSH
79668: CALL_OW 74
79672: PPUSH
79673: CALL_OW 115
// end ; end ;
79677: GO 79257
79679: POP
79680: POP
// end ;
79681: LD_VAR 0 3
79685: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79686: LD_INT 0
79688: PPUSH
79689: PPUSH
79690: PPUSH
// if not unit or IsInUnit ( unit ) then
79691: LD_VAR 0 1
79695: NOT
79696: PUSH
79697: LD_VAR 0 1
79701: PPUSH
79702: CALL_OW 310
79706: OR
79707: IFFALSE 79711
// exit ;
79709: GO 79802
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79711: LD_ADDR_VAR 0 4
79715: PUSH
79716: LD_VAR 0 1
79720: PPUSH
79721: CALL_OW 250
79725: PPUSH
79726: LD_VAR 0 2
79730: PPUSH
79731: LD_INT 1
79733: PPUSH
79734: CALL_OW 272
79738: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79739: LD_ADDR_VAR 0 5
79743: PUSH
79744: LD_VAR 0 1
79748: PPUSH
79749: CALL_OW 251
79753: PPUSH
79754: LD_VAR 0 2
79758: PPUSH
79759: LD_INT 1
79761: PPUSH
79762: CALL_OW 273
79766: ST_TO_ADDR
// if ValidHex ( x , y ) then
79767: LD_VAR 0 4
79771: PPUSH
79772: LD_VAR 0 5
79776: PPUSH
79777: CALL_OW 488
79781: IFFALSE 79802
// ComTurnXY ( unit , x , y ) ;
79783: LD_VAR 0 1
79787: PPUSH
79788: LD_VAR 0 4
79792: PPUSH
79793: LD_VAR 0 5
79797: PPUSH
79798: CALL_OW 118
// end ;
79802: LD_VAR 0 3
79806: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79807: LD_INT 0
79809: PPUSH
79810: PPUSH
// result := false ;
79811: LD_ADDR_VAR 0 3
79815: PUSH
79816: LD_INT 0
79818: ST_TO_ADDR
// if not units then
79819: LD_VAR 0 2
79823: NOT
79824: IFFALSE 79828
// exit ;
79826: GO 79873
// for i in units do
79828: LD_ADDR_VAR 0 4
79832: PUSH
79833: LD_VAR 0 2
79837: PUSH
79838: FOR_IN
79839: IFFALSE 79871
// if See ( side , i ) then
79841: LD_VAR 0 1
79845: PPUSH
79846: LD_VAR 0 4
79850: PPUSH
79851: CALL_OW 292
79855: IFFALSE 79869
// begin result := true ;
79857: LD_ADDR_VAR 0 3
79861: PUSH
79862: LD_INT 1
79864: ST_TO_ADDR
// exit ;
79865: POP
79866: POP
79867: GO 79873
// end ;
79869: GO 79838
79871: POP
79872: POP
// end ;
79873: LD_VAR 0 3
79877: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79878: LD_INT 0
79880: PPUSH
79881: PPUSH
79882: PPUSH
79883: PPUSH
// if not unit or not points then
79884: LD_VAR 0 1
79888: NOT
79889: PUSH
79890: LD_VAR 0 2
79894: NOT
79895: OR
79896: IFFALSE 79900
// exit ;
79898: GO 79990
// dist := 99999 ;
79900: LD_ADDR_VAR 0 5
79904: PUSH
79905: LD_INT 99999
79907: ST_TO_ADDR
// for i in points do
79908: LD_ADDR_VAR 0 4
79912: PUSH
79913: LD_VAR 0 2
79917: PUSH
79918: FOR_IN
79919: IFFALSE 79988
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79921: LD_ADDR_VAR 0 6
79925: PUSH
79926: LD_VAR 0 1
79930: PPUSH
79931: LD_VAR 0 4
79935: PUSH
79936: LD_INT 1
79938: ARRAY
79939: PPUSH
79940: LD_VAR 0 4
79944: PUSH
79945: LD_INT 2
79947: ARRAY
79948: PPUSH
79949: CALL_OW 297
79953: ST_TO_ADDR
// if tmpDist < dist then
79954: LD_VAR 0 6
79958: PUSH
79959: LD_VAR 0 5
79963: LESS
79964: IFFALSE 79986
// begin result := i ;
79966: LD_ADDR_VAR 0 3
79970: PUSH
79971: LD_VAR 0 4
79975: ST_TO_ADDR
// dist := tmpDist ;
79976: LD_ADDR_VAR 0 5
79980: PUSH
79981: LD_VAR 0 6
79985: ST_TO_ADDR
// end ; end ;
79986: GO 79918
79988: POP
79989: POP
// end ;
79990: LD_VAR 0 3
79994: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79995: LD_INT 0
79997: PPUSH
// uc_side := side ;
79998: LD_ADDR_OWVAR 20
80002: PUSH
80003: LD_VAR 0 1
80007: ST_TO_ADDR
// uc_nation := 3 ;
80008: LD_ADDR_OWVAR 21
80012: PUSH
80013: LD_INT 3
80015: ST_TO_ADDR
// vc_chassis := 25 ;
80016: LD_ADDR_OWVAR 37
80020: PUSH
80021: LD_INT 25
80023: ST_TO_ADDR
// vc_engine := engine_siberite ;
80024: LD_ADDR_OWVAR 39
80028: PUSH
80029: LD_INT 3
80031: ST_TO_ADDR
// vc_control := control_computer ;
80032: LD_ADDR_OWVAR 38
80036: PUSH
80037: LD_INT 3
80039: ST_TO_ADDR
// vc_weapon := 59 ;
80040: LD_ADDR_OWVAR 40
80044: PUSH
80045: LD_INT 59
80047: ST_TO_ADDR
// result := CreateVehicle ;
80048: LD_ADDR_VAR 0 5
80052: PUSH
80053: CALL_OW 45
80057: ST_TO_ADDR
// SetDir ( result , d ) ;
80058: LD_VAR 0 5
80062: PPUSH
80063: LD_VAR 0 4
80067: PPUSH
80068: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80072: LD_VAR 0 5
80076: PPUSH
80077: LD_VAR 0 2
80081: PPUSH
80082: LD_VAR 0 3
80086: PPUSH
80087: LD_INT 0
80089: PPUSH
80090: CALL_OW 48
// end ;
80094: LD_VAR 0 5
80098: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80099: LD_INT 0
80101: PPUSH
80102: PPUSH
80103: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80104: LD_ADDR_VAR 0 2
80108: PUSH
80109: LD_INT 0
80111: PUSH
80112: LD_INT 0
80114: PUSH
80115: LD_INT 0
80117: PUSH
80118: LD_INT 0
80120: PUSH
80121: EMPTY
80122: LIST
80123: LIST
80124: LIST
80125: LIST
80126: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80127: LD_VAR 0 1
80131: NOT
80132: PUSH
80133: LD_VAR 0 1
80137: PPUSH
80138: CALL_OW 264
80142: PUSH
80143: LD_INT 12
80145: PUSH
80146: LD_INT 51
80148: PUSH
80149: LD_INT 32
80151: PUSH
80152: LD_INT 89
80154: PUSH
80155: EMPTY
80156: LIST
80157: LIST
80158: LIST
80159: LIST
80160: IN
80161: NOT
80162: OR
80163: IFFALSE 80167
// exit ;
80165: GO 80265
// for i := 1 to 3 do
80167: LD_ADDR_VAR 0 3
80171: PUSH
80172: DOUBLE
80173: LD_INT 1
80175: DEC
80176: ST_TO_ADDR
80177: LD_INT 3
80179: PUSH
80180: FOR_TO
80181: IFFALSE 80263
// begin tmp := GetCargo ( cargo , i ) ;
80183: LD_ADDR_VAR 0 4
80187: PUSH
80188: LD_VAR 0 1
80192: PPUSH
80193: LD_VAR 0 3
80197: PPUSH
80198: CALL_OW 289
80202: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80203: LD_ADDR_VAR 0 2
80207: PUSH
80208: LD_VAR 0 2
80212: PPUSH
80213: LD_VAR 0 3
80217: PPUSH
80218: LD_VAR 0 4
80222: PPUSH
80223: CALL_OW 1
80227: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80228: LD_ADDR_VAR 0 2
80232: PUSH
80233: LD_VAR 0 2
80237: PPUSH
80238: LD_INT 4
80240: PPUSH
80241: LD_VAR 0 2
80245: PUSH
80246: LD_INT 4
80248: ARRAY
80249: PUSH
80250: LD_VAR 0 4
80254: PLUS
80255: PPUSH
80256: CALL_OW 1
80260: ST_TO_ADDR
// end ;
80261: GO 80180
80263: POP
80264: POP
// end ;
80265: LD_VAR 0 2
80269: RET
// export function Length ( array ) ; begin
80270: LD_INT 0
80272: PPUSH
// result := array + 0 ;
80273: LD_ADDR_VAR 0 2
80277: PUSH
80278: LD_VAR 0 1
80282: PUSH
80283: LD_INT 0
80285: PLUS
80286: ST_TO_ADDR
// end ;
80287: LD_VAR 0 2
80291: RET
// export function PrepareArray ( array ) ; begin
80292: LD_INT 0
80294: PPUSH
// result := array diff 0 ;
80295: LD_ADDR_VAR 0 2
80299: PUSH
80300: LD_VAR 0 1
80304: PUSH
80305: LD_INT 0
80307: DIFF
80308: ST_TO_ADDR
// if not result [ 1 ] then
80309: LD_VAR 0 2
80313: PUSH
80314: LD_INT 1
80316: ARRAY
80317: NOT
80318: IFFALSE 80338
// result := Delete ( result , 1 ) ;
80320: LD_ADDR_VAR 0 2
80324: PUSH
80325: LD_VAR 0 2
80329: PPUSH
80330: LD_INT 1
80332: PPUSH
80333: CALL_OW 3
80337: ST_TO_ADDR
// end ;
80338: LD_VAR 0 2
80342: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80343: LD_INT 0
80345: PPUSH
80346: PPUSH
80347: PPUSH
80348: PPUSH
// sibRocketRange := 25 ;
80349: LD_ADDR_VAR 0 6
80353: PUSH
80354: LD_INT 25
80356: ST_TO_ADDR
// result := false ;
80357: LD_ADDR_VAR 0 4
80361: PUSH
80362: LD_INT 0
80364: ST_TO_ADDR
// for i := 0 to 5 do
80365: LD_ADDR_VAR 0 5
80369: PUSH
80370: DOUBLE
80371: LD_INT 0
80373: DEC
80374: ST_TO_ADDR
80375: LD_INT 5
80377: PUSH
80378: FOR_TO
80379: IFFALSE 80446
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80381: LD_VAR 0 1
80385: PPUSH
80386: LD_VAR 0 5
80390: PPUSH
80391: LD_VAR 0 6
80395: PPUSH
80396: CALL_OW 272
80400: PPUSH
80401: LD_VAR 0 2
80405: PPUSH
80406: LD_VAR 0 5
80410: PPUSH
80411: LD_VAR 0 6
80415: PPUSH
80416: CALL_OW 273
80420: PPUSH
80421: LD_VAR 0 3
80425: PPUSH
80426: CALL_OW 309
80430: IFFALSE 80444
// begin result := true ;
80432: LD_ADDR_VAR 0 4
80436: PUSH
80437: LD_INT 1
80439: ST_TO_ADDR
// exit ;
80440: POP
80441: POP
80442: GO 80448
// end ;
80444: GO 80378
80446: POP
80447: POP
// end ;
80448: LD_VAR 0 4
80452: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80453: LD_INT 0
80455: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80456: LD_VAR 0 1
80460: PPUSH
80461: LD_VAR 0 2
80465: PPUSH
80466: LD_INT 0
80468: PPUSH
80469: LD_INT 0
80471: PPUSH
80472: LD_INT 1
80474: PPUSH
80475: LD_INT 0
80477: PPUSH
80478: CALL_OW 587
// end ; end_of_file
80482: LD_VAR 0 3
80486: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80487: LD_VAR 0 1
80491: PUSH
80492: LD_INT 200
80494: DOUBLE
80495: GREATEREQUAL
80496: IFFALSE 80504
80498: LD_INT 299
80500: DOUBLE
80501: LESSEQUAL
80502: IFTRUE 80506
80504: GO 80538
80506: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80507: LD_VAR 0 1
80511: PPUSH
80512: LD_VAR 0 2
80516: PPUSH
80517: LD_VAR 0 3
80521: PPUSH
80522: LD_VAR 0 4
80526: PPUSH
80527: LD_VAR 0 5
80531: PPUSH
80532: CALL 35172 0 5
80536: GO 80615
80538: LD_INT 300
80540: DOUBLE
80541: GREATEREQUAL
80542: IFFALSE 80550
80544: LD_INT 399
80546: DOUBLE
80547: LESSEQUAL
80548: IFTRUE 80552
80550: GO 80614
80552: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80553: LD_VAR 0 1
80557: PPUSH
80558: LD_VAR 0 2
80562: PPUSH
80563: LD_VAR 0 3
80567: PPUSH
80568: LD_VAR 0 4
80572: PPUSH
80573: LD_VAR 0 5
80577: PPUSH
80578: LD_VAR 0 6
80582: PPUSH
80583: LD_VAR 0 7
80587: PPUSH
80588: LD_VAR 0 8
80592: PPUSH
80593: LD_VAR 0 9
80597: PPUSH
80598: LD_VAR 0 10
80602: PPUSH
80603: LD_VAR 0 11
80607: PPUSH
80608: CALL 31505 0 11
80612: GO 80615
80614: POP
// end ;
80615: PPOPN 11
80617: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80618: LD_VAR 0 1
80622: PPUSH
80623: LD_VAR 0 2
80627: PPUSH
80628: LD_VAR 0 3
80632: PPUSH
80633: LD_VAR 0 4
80637: PPUSH
80638: LD_VAR 0 5
80642: PPUSH
80643: CALL 34908 0 5
// end ; end_of_file
80647: PPOPN 5
80649: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80650: LD_VAR 0 1
80654: PPUSH
80655: LD_VAR 0 2
80659: PPUSH
80660: LD_VAR 0 3
80664: PPUSH
80665: LD_VAR 0 4
80669: PPUSH
80670: LD_VAR 0 5
80674: PPUSH
80675: LD_VAR 0 6
80679: PPUSH
80680: CALL 19198 0 6
// end ;
80684: PPOPN 6
80686: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80687: LD_INT 0
80689: PPUSH
// begin if not units then
80690: LD_VAR 0 1
80694: NOT
80695: IFFALSE 80699
// exit ;
80697: GO 80699
// end ;
80699: PPOPN 7
80701: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80702: CALL 19169 0 0
// end ;
80706: PPOPN 1
80708: END
