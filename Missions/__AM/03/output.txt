// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 378 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 466 0 0
// PrepareRussian ;
  29: CALL 3051 0 0
// PrepareAmerican ;
  33: CALL 1137 0 0
// PrepareCornell ;
  37: CALL 2265 0 0
// PrepareWesternBase ;
  41: CALL 2494 0 0
// Action ;
  45: CALL 5299 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_OWVAR 67
 220: ARRAY
 221: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 ] [ Difficulty ] ;
 222: LD_ADDR_EXP 20
 226: PUSH
 227: LD_INT 600
 229: PUSH
 230: LD_INT 500
 232: PUSH
 233: LD_INT 400
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_OWVAR 67
 245: ARRAY
 246: ST_TO_ADDR
// end_mission_allowed := false ;
 247: LD_ADDR_EXP 21
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// save_others := [ ] ;
 255: LD_ADDR_EXP 22
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// save_group := [ ] ;
 262: LD_ADDR_EXP 23
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// show_query := true ;
 269: LD_ADDR_EXP 24
 273: PUSH
 274: LD_INT 1
 276: ST_TO_ADDR
// wait_for_them := false ;
 277: LD_ADDR_EXP 25
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// veh_on_meta := false ;
 285: LD_ADDR_EXP 28
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// send_spec_patrol := false ;
 293: LD_ADDR_EXP 30
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// prepare_siege := false ;
 301: LD_ADDR_EXP 31
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// send_attack_on_cornel := false ;
 309: LD_ADDR_EXP 32
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 317: LD_ADDR_EXP 26
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// game_end := false ;
 325: LD_ADDR_EXP 33
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// lose_counter := 0 ;
 333: LD_ADDR_EXP 34
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// powell_warn := 0 ;
 341: LD_ADDR_EXP 35
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// save_counter := 0 ;
 349: LD_ADDR_EXP 36
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// cornel_saved := false ;
 357: LD_ADDR_EXP 27
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// ach_counter := 0 ;
 365: LD_ADDR_EXP 13
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// end ;
 373: LD_VAR 0 1
 377: RET
// function SetDiplomacy ; begin
 378: LD_INT 0
 380: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 381: LD_INT 1
 383: PPUSH
 384: LD_INT 4
 386: PPUSH
 387: LD_INT 1
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 397: LD_INT 1
 399: PPUSH
 400: LD_INT 8
 402: PPUSH
 403: LD_INT 1
 405: PPUSH
 406: LD_INT 1
 408: PPUSH
 409: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 413: LD_INT 3
 415: PPUSH
 416: LD_INT 6
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: LD_INT 1
 424: PPUSH
 425: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 429: LD_INT 4
 431: PPUSH
 432: LD_INT 6
 434: PPUSH
 435: LD_INT 0
 437: PPUSH
 438: LD_INT 1
 440: PPUSH
 441: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 445: LD_INT 3
 447: PPUSH
 448: LD_INT 8
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: LD_INT 1
 456: PPUSH
 457: CALL_OW 80
// end ;
 461: LD_VAR 0 1
 465: RET
// export function DebugMode ; var i ; begin
 466: LD_INT 0
 468: PPUSH
 469: PPUSH
// FogOff ( 1 ) ;
 470: LD_INT 1
 472: PPUSH
 473: CALL_OW 344
// debug_strings := [ ] ;
 477: LD_ADDR_OWVAR 48
 481: PUSH
 482: EMPTY
 483: ST_TO_ADDR
// end ; end_of_file
 484: LD_VAR 0 1
 488: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 489: LD_INT 0
 491: PPUSH
// uc_side := side ;
 492: LD_ADDR_OWVAR 20
 496: PUSH
 497: LD_VAR 0 1
 501: ST_TO_ADDR
// uc_nation := nation ;
 502: LD_ADDR_OWVAR 21
 506: PUSH
 507: LD_VAR 0 2
 511: ST_TO_ADDR
// vc_chassis := chassis ;
 512: LD_ADDR_OWVAR 37
 516: PUSH
 517: LD_VAR 0 3
 521: ST_TO_ADDR
// vc_engine := engine ;
 522: LD_ADDR_OWVAR 39
 526: PUSH
 527: LD_VAR 0 4
 531: ST_TO_ADDR
// vc_control := control ;
 532: LD_ADDR_OWVAR 38
 536: PUSH
 537: LD_VAR 0 5
 541: ST_TO_ADDR
// vc_weapon := weapon ;
 542: LD_ADDR_OWVAR 40
 546: PUSH
 547: LD_VAR 0 6
 551: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 552: LD_ADDR_OWVAR 41
 556: PUSH
 557: LD_VAR 0 7
 561: ST_TO_ADDR
// result := CreateVehicle ;
 562: LD_ADDR_VAR 0 8
 566: PUSH
 567: CALL_OW 45
 571: ST_TO_ADDR
// end ;
 572: LD_VAR 0 8
 576: RET
// export function SayX ( units , ident ) ; var i ; begin
 577: LD_INT 0
 579: PPUSH
 580: PPUSH
// result := false ;
 581: LD_ADDR_VAR 0 3
 585: PUSH
 586: LD_INT 0
 588: ST_TO_ADDR
// if not units then
 589: LD_VAR 0 1
 593: NOT
 594: IFFALSE 598
// exit ;
 596: GO 652
// for i in units do
 598: LD_ADDR_VAR 0 4
 602: PUSH
 603: LD_VAR 0 1
 607: PUSH
 608: FOR_IN
 609: IFFALSE 650
// if IsOk ( i ) then
 611: LD_VAR 0 4
 615: PPUSH
 616: CALL_OW 302
 620: IFFALSE 648
// begin Say ( i , ident ) ;
 622: LD_VAR 0 4
 626: PPUSH
 627: LD_VAR 0 2
 631: PPUSH
 632: CALL_OW 88
// result := i ;
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: LD_VAR 0 4
 645: ST_TO_ADDR
// break ;
 646: GO 650
// end ;
 648: GO 608
 650: POP
 651: POP
// end ;
 652: LD_VAR 0 3
 656: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 657: LD_INT 0
 659: PPUSH
 660: PPUSH
 661: PPUSH
 662: PPUSH
// for i = 1 to count do
 663: LD_ADDR_VAR 0 8
 667: PUSH
 668: DOUBLE
 669: LD_INT 1
 671: DEC
 672: ST_TO_ADDR
 673: LD_VAR 0 6
 677: PUSH
 678: FOR_TO
 679: IFFALSE 760
// begin uc_side = side ;
 681: LD_ADDR_OWVAR 20
 685: PUSH
 686: LD_VAR 0 1
 690: ST_TO_ADDR
// uc_nation = nation ;
 691: LD_ADDR_OWVAR 21
 695: PUSH
 696: LD_VAR 0 2
 700: ST_TO_ADDR
// hc_gallery =  ;
 701: LD_ADDR_OWVAR 33
 705: PUSH
 706: LD_STRING 
 708: ST_TO_ADDR
// hc_name =  ;
 709: LD_ADDR_OWVAR 26
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 717: LD_INT 0
 719: PPUSH
 720: LD_VAR 0 5
 724: PPUSH
 725: LD_VAR 0 4
 729: PPUSH
 730: CALL_OW 380
// un = CreateHuman ;
 734: LD_ADDR_VAR 0 10
 738: PUSH
 739: CALL_OW 44
 743: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 744: LD_VAR 0 10
 748: PPUSH
 749: LD_VAR 0 3
 753: PPUSH
 754: CALL_OW 52
// end ;
 758: GO 678
 760: POP
 761: POP
// end ;
 762: LD_VAR 0 7
 766: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 767: LD_INT 0
 769: PPUSH
 770: PPUSH
 771: PPUSH
// uc_side := GetSide ( b ) ;
 772: LD_ADDR_OWVAR 20
 776: PUSH
 777: LD_VAR 0 2
 781: PPUSH
 782: CALL_OW 255
 786: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 787: LD_ADDR_OWVAR 21
 791: PUSH
 792: LD_VAR 0 2
 796: PPUSH
 797: CALL_OW 248
 801: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 802: LD_INT 0
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: LD_VAR 0 1
 812: PPUSH
 813: CALL_OW 380
// un = CreateHuman ;
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: CALL_OW 44
 826: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 827: LD_ADDR_VAR 0 5
 831: PUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 254
 841: PUSH
 842: LD_INT 3
 844: MINUS
 845: ST_TO_ADDR
// if dir < 0 then
 846: LD_VAR 0 5
 850: PUSH
 851: LD_INT 0
 853: LESS
 854: IFFALSE 870
// dir := 6 + dir ;
 856: LD_ADDR_VAR 0 5
 860: PUSH
 861: LD_INT 6
 863: PUSH
 864: LD_VAR 0 5
 868: PLUS
 869: ST_TO_ADDR
// SetDir ( un , dir ) ;
 870: LD_VAR 0 4
 874: PPUSH
 875: LD_VAR 0 5
 879: PPUSH
 880: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 884: LD_VAR 0 4
 888: PPUSH
 889: LD_VAR 0 2
 893: PPUSH
 894: CALL_OW 52
// end ;
 898: LD_VAR 0 3
 902: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 903: LD_INT 0
 905: PPUSH
 906: PPUSH
 907: PPUSH
// result := false ;
 908: LD_ADDR_VAR 0 2
 912: PUSH
 913: LD_INT 0
 915: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 916: LD_ADDR_VAR 0 3
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 34
 933: PUSH
 934: LD_INT 2
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: PPUSH
 945: CALL_OW 69
 949: ST_TO_ADDR
// for i in filter do
 950: LD_ADDR_VAR 0 4
 954: PUSH
 955: LD_VAR 0 3
 959: PUSH
 960: FOR_IN
 961: IFFALSE 992
// if IsDrivenBy ( i ) = unit then
 963: LD_VAR 0 4
 967: PPUSH
 968: CALL_OW 311
 972: PUSH
 973: LD_VAR 0 1
 977: EQUAL
 978: IFFALSE 990
// begin result := true ;
 980: LD_ADDR_VAR 0 2
 984: PUSH
 985: LD_INT 1
 987: ST_TO_ADDR
// break ;
 988: GO 992
// end ;
 990: GO 960
 992: POP
 993: POP
// end ;
 994: LD_VAR 0 2
 998: RET
// export function FindFreePlace ( blist ) ; var i ; begin
 999: LD_INT 0
1001: PPUSH
1002: PPUSH
// result := false ;
1003: LD_ADDR_VAR 0 2
1007: PUSH
1008: LD_INT 0
1010: ST_TO_ADDR
// if not blist then
1011: LD_VAR 0 1
1015: NOT
1016: IFFALSE 1020
// exit ;
1018: GO 1064
// for i in blist do
1020: LD_ADDR_VAR 0 3
1024: PUSH
1025: LD_VAR 0 1
1029: PUSH
1030: FOR_IN
1031: IFFALSE 1062
// if UnitsInside ( i ) < 6 then
1033: LD_VAR 0 3
1037: PPUSH
1038: CALL_OW 313
1042: PUSH
1043: LD_INT 6
1045: LESS
1046: IFFALSE 1060
// begin result := i ;
1048: LD_ADDR_VAR 0 2
1052: PUSH
1053: LD_VAR 0 3
1057: ST_TO_ADDR
// break ;
1058: GO 1062
// end ;
1060: GO 1030
1062: POP
1063: POP
// end ;
1064: LD_VAR 0 2
1068: RET
// export function CountTime ( timer , mode ) ; begin
1069: LD_INT 0
1071: PPUSH
// if not timer then
1072: LD_VAR 0 1
1076: NOT
1077: IFFALSE 1081
// exit ;
1079: GO 1132
// if mode in [ asc , up , + ] then
1081: LD_VAR 0 2
1085: PUSH
1086: LD_STRING asc
1088: PUSH
1089: LD_STRING up
1091: PUSH
1092: LD_STRING +
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: LIST
1099: IN
1100: IFFALSE 1118
// result := timer + 0 0$01 else
1102: LD_ADDR_VAR 0 3
1106: PUSH
1107: LD_VAR 0 1
1111: PUSH
1112: LD_INT 35
1114: PLUS
1115: ST_TO_ADDR
1116: GO 1132
// result := timer - 0 0$01 ;
1118: LD_ADDR_VAR 0 3
1122: PUSH
1123: LD_VAR 0 1
1127: PUSH
1128: LD_INT 35
1130: MINUS
1131: ST_TO_ADDR
// end ; end_of_file
1132: LD_VAR 0 3
1136: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// uc_side := 4 ;
1147: LD_ADDR_OWVAR 20
1151: PUSH
1152: LD_INT 4
1154: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1155: LD_ADDR_EXP 46
1159: PUSH
1160: LD_STRING Powell
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: LD_STRING 
1168: PPUSH
1169: CALL 35829 0 3
1173: ST_TO_ADDR
// uc_side := 1 ;
1174: LD_ADDR_OWVAR 20
1178: PUSH
1179: LD_INT 1
1181: ST_TO_ADDR
// uc_nation := 1 ;
1182: LD_ADDR_OWVAR 21
1186: PUSH
1187: LD_INT 1
1189: ST_TO_ADDR
// if debug then
1190: LD_EXP 1
1194: IFFALSE 1324
// begin for i = 1 to 4 do
1196: LD_ADDR_VAR 0 2
1200: PUSH
1201: DOUBLE
1202: LD_INT 1
1204: DEC
1205: ST_TO_ADDR
1206: LD_INT 4
1208: PUSH
1209: FOR_TO
1210: IFFALSE 1261
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1212: LD_INT 0
1214: PPUSH
1215: LD_INT 1
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 12
1225: PPUSH
1226: LD_INT 3
1228: PPUSH
1229: CALL_OW 380
// un := CreateHuman ;
1233: LD_ADDR_VAR 0 3
1237: PUSH
1238: CALL_OW 44
1242: ST_TO_ADDR
// others := others ^ un ;
1243: LD_ADDR_VAR 0 5
1247: PUSH
1248: LD_VAR 0 5
1252: PUSH
1253: LD_VAR 0 3
1257: ADD
1258: ST_TO_ADDR
// end ;
1259: GO 1209
1261: POP
1262: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1263: LD_ADDR_VAR 0 6
1267: PUSH
1268: LD_INT 21
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 1
1276: PUSH
1277: LD_INT 51
1279: PUSH
1280: LD_INT 90
1282: PUSH
1283: LD_INT 504
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 21
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 1
1302: PUSH
1303: LD_INT 51
1305: PUSH
1306: LD_INT 80
1308: PUSH
1309: LD_INT 750
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1324: LD_ADDR_EXP 37
1328: PUSH
1329: LD_STRING JMM
1331: PPUSH
1332: LD_EXP 1
1336: NOT
1337: PPUSH
1338: LD_EXP 3
1342: PPUSH
1343: CALL 35829 0 3
1347: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1348: LD_ADDR_EXP 38
1352: PUSH
1353: LD_STRING Bobby
1355: PPUSH
1356: LD_EXP 1
1360: NOT
1361: PPUSH
1362: LD_EXP 3
1366: PPUSH
1367: CALL 35829 0 3
1371: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1372: LD_ADDR_EXP 39
1376: PUSH
1377: LD_STRING Cyrus
1379: PPUSH
1380: LD_EXP 1
1384: NOT
1385: PPUSH
1386: LD_EXP 3
1390: PPUSH
1391: CALL 35829 0 3
1395: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1396: LD_ADDR_EXP 40
1400: PUSH
1401: LD_STRING Lisa
1403: PPUSH
1404: LD_EXP 1
1408: NOT
1409: PPUSH
1410: LD_EXP 3
1414: PPUSH
1415: CALL 35829 0 3
1419: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1420: LD_ADDR_EXP 41
1424: PUSH
1425: LD_STRING Khatam
1427: PPUSH
1428: LD_EXP 1
1432: NOT
1433: PPUSH
1434: LD_EXP 3
1438: PPUSH
1439: CALL 35829 0 3
1443: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1444: LD_ADDR_EXP 42
1448: PUSH
1449: LD_STRING Brian
1451: PPUSH
1452: LD_EXP 1
1456: NOT
1457: PPUSH
1458: LD_EXP 3
1462: PPUSH
1463: CALL 35829 0 3
1467: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1468: LD_ADDR_EXP 43
1472: PUSH
1473: LD_STRING Jerry
1475: PPUSH
1476: LD_EXP 1
1480: NOT
1481: PPUSH
1482: LD_EXP 3
1486: PPUSH
1487: CALL 35829 0 3
1491: ST_TO_ADDR
// if Bobby then
1492: LD_EXP 38
1496: IFFALSE 1527
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1498: LD_ADDR_VAR 0 4
1502: PUSH
1503: LD_VAR 0 4
1507: PPUSH
1508: LD_VAR 0 4
1512: PUSH
1513: LD_INT 1
1515: PLUS
1516: PPUSH
1517: LD_EXP 38
1521: PPUSH
1522: CALL_OW 2
1526: ST_TO_ADDR
// if Cyrus then
1527: LD_EXP 39
1531: IFFALSE 1562
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1533: LD_ADDR_VAR 0 4
1537: PUSH
1538: LD_VAR 0 4
1542: PPUSH
1543: LD_VAR 0 4
1547: PUSH
1548: LD_INT 1
1550: PLUS
1551: PPUSH
1552: LD_EXP 39
1556: PPUSH
1557: CALL_OW 2
1561: ST_TO_ADDR
// if Lisa then
1562: LD_EXP 40
1566: IFFALSE 1597
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1568: LD_ADDR_VAR 0 4
1572: PUSH
1573: LD_VAR 0 4
1577: PPUSH
1578: LD_VAR 0 4
1582: PUSH
1583: LD_INT 1
1585: PLUS
1586: PPUSH
1587: LD_EXP 40
1591: PPUSH
1592: CALL_OW 2
1596: ST_TO_ADDR
// if Khatam then
1597: LD_EXP 41
1601: IFFALSE 1632
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1603: LD_ADDR_VAR 0 4
1607: PUSH
1608: LD_VAR 0 4
1612: PPUSH
1613: LD_VAR 0 4
1617: PUSH
1618: LD_INT 1
1620: PLUS
1621: PPUSH
1622: LD_EXP 41
1626: PPUSH
1627: CALL_OW 2
1631: ST_TO_ADDR
// if Brian then
1632: LD_EXP 42
1636: IFFALSE 1667
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1638: LD_ADDR_VAR 0 4
1642: PUSH
1643: LD_VAR 0 4
1647: PPUSH
1648: LD_VAR 0 4
1652: PUSH
1653: LD_INT 1
1655: PLUS
1656: PPUSH
1657: LD_EXP 42
1661: PPUSH
1662: CALL_OW 2
1666: ST_TO_ADDR
// if Jerry then
1667: LD_EXP 43
1671: IFFALSE 1702
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_VAR 0 4
1682: PPUSH
1683: LD_VAR 0 4
1687: PUSH
1688: LD_INT 1
1690: PLUS
1691: PPUSH
1692: LD_EXP 43
1696: PPUSH
1697: CALL_OW 2
1701: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1702: LD_STRING 02_other_survivors
1704: PPUSH
1705: CALL_OW 28
1709: IFFALSE 1724
// others := CreateCharacterSet ( 02_other_survivors ) ;
1711: LD_ADDR_VAR 0 5
1715: PUSH
1716: LD_STRING 02_other_survivors
1718: PPUSH
1719: CALL_OW 31
1723: ST_TO_ADDR
// if others then
1724: LD_VAR 0 5
1728: IFFALSE 1753
// begin tmp := tmp ^ others ;
1730: LD_ADDR_VAR 0 4
1734: PUSH
1735: LD_VAR 0 4
1739: PUSH
1740: LD_VAR 0 5
1744: ADD
1745: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1746: LD_STRING 02_other_survivors
1748: PPUSH
1749: CALL_OW 40
// end ; jmm_units := tmp ;
1753: LD_ADDR_EXP 4
1757: PUSH
1758: LD_VAR 0 4
1762: ST_TO_ADDR
// if not vehicles then
1763: LD_VAR 0 6
1767: NOT
1768: IFFALSE 1786
// vehicles := LoadVariable ( 02_tanks_1 , 0 ) ;
1770: LD_ADDR_VAR 0 6
1774: PUSH
1775: LD_STRING 02_tanks_1
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 30
1785: ST_TO_ADDR
// if vehicles then
1786: LD_VAR 0 6
1790: IFFALSE 1984
// begin got_mech := false ;
1792: LD_ADDR_VAR 0 7
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
1800: LD_VAR 0 4
1804: PPUSH
1805: LD_INT 25
1807: PUSH
1808: LD_INT 3
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: PPUSH
1815: CALL_OW 72
1819: IFFALSE 1829
// got_mech := true ;
1821: LD_ADDR_VAR 0 7
1825: PUSH
1826: LD_INT 1
1828: ST_TO_ADDR
// for i = 1 to vehicles do
1829: LD_ADDR_VAR 0 2
1833: PUSH
1834: DOUBLE
1835: LD_INT 1
1837: DEC
1838: ST_TO_ADDR
1839: LD_VAR 0 6
1843: PUSH
1844: FOR_TO
1845: IFFALSE 1982
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
1847: LD_ADDR_VAR 0 3
1851: PUSH
1852: LD_INT 1
1854: PPUSH
1855: LD_INT 3
1857: PPUSH
1858: LD_VAR 0 6
1862: PUSH
1863: LD_VAR 0 2
1867: ARRAY
1868: PUSH
1869: LD_INT 1
1871: ARRAY
1872: PPUSH
1873: LD_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PUSH
1884: LD_INT 2
1886: ARRAY
1887: PPUSH
1888: LD_VAR 0 6
1892: PUSH
1893: LD_VAR 0 2
1897: ARRAY
1898: PUSH
1899: LD_INT 3
1901: ARRAY
1902: PPUSH
1903: LD_VAR 0 6
1907: PUSH
1908: LD_VAR 0 2
1912: ARRAY
1913: PUSH
1914: LD_INT 4
1916: ARRAY
1917: PPUSH
1918: LD_INT 40
1920: PPUSH
1921: CALL 489 0 7
1925: ST_TO_ADDR
// if not got_mech then
1926: LD_VAR 0 7
1930: NOT
1931: IFFALSE 1957
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
1933: LD_VAR 0 3
1937: PPUSH
1938: LD_VAR 0 6
1942: PUSH
1943: LD_VAR 0 2
1947: ARRAY
1948: PUSH
1949: LD_INT 6
1951: ARRAY
1952: PPUSH
1953: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
1957: LD_ADDR_VAR 0 4
1961: PUSH
1962: LD_VAR 0 4
1966: PPUSH
1967: LD_INT 1
1969: PPUSH
1970: LD_VAR 0 3
1974: PPUSH
1975: CALL_OW 2
1979: ST_TO_ADDR
// end ;
1980: GO 1844
1982: POP
1983: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
1984: LD_EXP 37
1988: PPUSH
1989: LD_INT 194
1991: PPUSH
1992: LD_INT 119
1994: PPUSH
1995: LD_INT 0
1997: PPUSH
1998: CALL_OW 48
// if tmp then
2002: LD_VAR 0 4
2006: IFFALSE 2194
// begin for i in tmp do
2008: LD_ADDR_VAR 0 2
2012: PUSH
2013: LD_VAR 0 4
2017: PUSH
2018: FOR_IN
2019: IFFALSE 2192
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2021: LD_VAR 0 2
2025: PPUSH
2026: CALL_OW 257
2030: PUSH
2031: LD_INT 1
2033: NONEQUAL
2034: PUSH
2035: LD_VAR 0 2
2039: PUSH
2040: LD_EXP 41
2044: NONEQUAL
2045: AND
2046: IFFALSE 2060
// SetClass ( i , 1 ) ;
2048: LD_VAR 0 2
2052: PPUSH
2053: LD_INT 1
2055: PPUSH
2056: CALL_OW 336
// if i = Khatam then
2060: LD_VAR 0 2
2064: PUSH
2065: LD_EXP 41
2069: EQUAL
2070: IFFALSE 2084
// SetClass ( i , 4 ) ;
2072: LD_VAR 0 2
2076: PPUSH
2077: LD_INT 4
2079: PPUSH
2080: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2084: LD_ADDR_VAR 0 8
2088: PUSH
2089: LD_INT 22
2091: PUSH
2092: LD_INT 1
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PUSH
2099: LD_INT 21
2101: PUSH
2102: LD_INT 2
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: LD_INT 58
2111: PUSH
2112: EMPTY
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: PPUSH
2120: CALL_OW 69
2124: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2125: LD_VAR 0 2
2129: PPUSH
2130: CALL_OW 247
2134: PUSH
2135: LD_INT 1
2137: EQUAL
2138: PUSH
2139: LD_VAR 0 8
2143: AND
2144: IFFALSE 2166
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2146: LD_VAR 0 2
2150: PPUSH
2151: LD_VAR 0 8
2155: PUSH
2156: LD_INT 1
2158: ARRAY
2159: PPUSH
2160: CALL_OW 52
2164: GO 2181
// PlaceUnitArea ( i , startArea , false ) ;
2166: LD_VAR 0 2
2170: PPUSH
2171: LD_INT 1
2173: PPUSH
2174: LD_INT 0
2176: PPUSH
2177: CALL_OW 49
// ComHold ( i ) ;
2181: LD_VAR 0 2
2185: PPUSH
2186: CALL_OW 140
// end ;
2190: GO 2018
2192: POP
2193: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2194: LD_ADDR_EXP 7
2198: PUSH
2199: LD_STRING 02_mikhailStatus_1
2201: PPUSH
2202: LD_INT 0
2204: PPUSH
2205: CALL_OW 30
2209: ST_TO_ADDR
// if not bierezov_exist and not debug then
2210: LD_EXP 7
2214: NOT
2215: PUSH
2216: LD_EXP 1
2220: NOT
2221: AND
2222: IFFALSE 2226
// exit ;
2224: GO 2260
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2226: LD_ADDR_EXP 45
2230: PUSH
2231: LD_STRING Mikhail
2233: PPUSH
2234: LD_INT 0
2236: PPUSH
2237: LD_STRING 
2239: PPUSH
2240: CALL 35829 0 3
2244: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2245: LD_EXP 45
2249: PPUSH
2250: LD_INT 1
2252: PPUSH
2253: LD_INT 0
2255: PPUSH
2256: CALL_OW 49
// end ;
2260: LD_VAR 0 1
2264: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2265: LD_INT 0
2267: PPUSH
2268: PPUSH
2269: PPUSH
2270: PPUSH
// uc_side := 4 ;
2271: LD_ADDR_OWVAR 20
2275: PUSH
2276: LD_INT 4
2278: ST_TO_ADDR
// uc_nation := 1 ;
2279: LD_ADDR_OWVAR 21
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2287: LD_ADDR_EXP 44
2291: PUSH
2292: LD_STRING Cornell
2294: PPUSH
2295: LD_INT 0
2297: PPUSH
2298: LD_STRING 
2300: PPUSH
2301: CALL 35829 0 3
2305: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2306: LD_ADDR_EXP 6
2310: PUSH
2311: LD_INT 9
2313: PUSH
2314: LD_EXP 4
2318: MINUS
2319: ST_TO_ADDR
// tmp := [ ] ;
2320: LD_ADDR_VAR 0 2
2324: PUSH
2325: EMPTY
2326: ST_TO_ADDR
// if cornel_units < 4 then
2327: LD_EXP 6
2331: PUSH
2332: LD_INT 4
2334: LESS
2335: IFFALSE 2345
// cornel_units := 4 ;
2337: LD_ADDR_EXP 6
2341: PUSH
2342: LD_INT 4
2344: ST_TO_ADDR
// for i = 1 to cornel_units do
2345: LD_ADDR_VAR 0 4
2349: PUSH
2350: DOUBLE
2351: LD_INT 1
2353: DEC
2354: ST_TO_ADDR
2355: LD_EXP 6
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2459
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2363: LD_INT 0
2365: PPUSH
2366: LD_INT 1
2368: PUSH
2369: LD_INT 1
2371: PUSH
2372: LD_INT 1
2374: PUSH
2375: LD_INT 2
2377: PUSH
2378: LD_INT 4
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: PUSH
2388: LD_VAR 0 4
2392: PUSH
2393: LD_INT 5
2395: MOD
2396: PUSH
2397: LD_INT 1
2399: PLUS
2400: ARRAY
2401: PPUSH
2402: LD_INT 2
2404: PPUSH
2405: CALL_OW 380
// un := CreateHuman ;
2409: LD_ADDR_VAR 0 3
2413: PUSH
2414: CALL_OW 44
2418: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: LD_VAR 0 2
2428: PPUSH
2429: LD_INT 1
2431: PPUSH
2432: LD_VAR 0 3
2436: PPUSH
2437: CALL_OW 2
2441: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2442: LD_VAR 0 3
2446: PPUSH
2447: LD_INT 2
2449: PPUSH
2450: LD_INT 0
2452: PPUSH
2453: CALL_OW 49
// end ;
2457: GO 2360
2459: POP
2460: POP
// cornel_units := tmp ;
2461: LD_ADDR_EXP 6
2465: PUSH
2466: LD_VAR 0 2
2470: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2471: LD_EXP 44
2475: PPUSH
2476: LD_INT 191
2478: PPUSH
2479: LD_INT 106
2481: PPUSH
2482: LD_INT 0
2484: PPUSH
2485: CALL_OW 48
// end ;
2489: LD_VAR 0 1
2493: RET
// export function PrepareWesternBase ; var i ; begin
2494: LD_INT 0
2496: PPUSH
2497: PPUSH
// uc_side := 8 ;
2498: LD_ADDR_OWVAR 20
2502: PUSH
2503: LD_INT 8
2505: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2506: LD_ADDR_EXP 47
2510: PUSH
2511: LD_STRING Lynch
2513: PPUSH
2514: LD_INT 0
2516: PPUSH
2517: LD_STRING 
2519: PPUSH
2520: CALL 35829 0 3
2524: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2525: LD_ADDR_EXP 48
2529: PUSH
2530: LD_STRING Walker
2532: PPUSH
2533: LD_INT 0
2535: PPUSH
2536: LD_STRING 
2538: PPUSH
2539: CALL 35829 0 3
2543: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2544: LD_ADDR_EXP 49
2548: PUSH
2549: LD_STRING Turner
2551: PPUSH
2552: LD_INT 0
2554: PPUSH
2555: LD_STRING 
2557: PPUSH
2558: CALL 35829 0 3
2562: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2563: LD_ADDR_EXP 50
2567: PUSH
2568: LD_STRING Jillian
2570: PPUSH
2571: LD_INT 0
2573: PPUSH
2574: LD_STRING 
2576: PPUSH
2577: CALL 35829 0 3
2581: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2582: LD_ADDR_VAR 0 2
2586: PUSH
2587: LD_EXP 47
2591: PUSH
2592: LD_EXP 48
2596: PUSH
2597: LD_EXP 49
2601: PUSH
2602: LD_EXP 50
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: FOR_IN
2614: IFFALSE 2642
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
2616: LD_VAR 0 2
2620: PPUSH
2621: LD_INT 3
2623: PPUSH
2624: LD_INT 0
2626: PPUSH
2627: CALL_OW 49
// ComHold ( i ) ;
2631: LD_VAR 0 2
2635: PPUSH
2636: CALL_OW 140
// end ;
2640: GO 2613
2642: POP
2643: POP
// end ;
2644: LD_VAR 0 1
2648: RET
// export function SelectGroup ; var units , selected , i ; begin
2649: LD_INT 0
2651: PPUSH
2652: PPUSH
2653: PPUSH
2654: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
2655: LD_ADDR_VAR 0 2
2659: PUSH
2660: LD_EXP 37
2664: PUSH
2665: LD_INT -3
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_EXP 4
2676: ADD
2677: PUSH
2678: LD_INT -2
2680: PUSH
2681: LD_INT -4
2683: PUSH
2684: LD_EXP 44
2688: PUSH
2689: LD_EXP 45
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: LIST
2698: LIST
2699: ADD
2700: PUSH
2701: LD_INT -3
2703: PUSH
2704: EMPTY
2705: LIST
2706: ADD
2707: PUSH
2708: LD_EXP 6
2712: ADD
2713: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select five characters to go with you , 4 , 4 , units , [ ] ) ;
2714: LD_ADDR_VAR 0 3
2718: PUSH
2719: LD_EXP 37
2723: PUSH
2724: LD_STRING Select five characters to go with you
2726: PPUSH
2727: LD_INT 4
2729: PPUSH
2730: LD_INT 4
2732: PPUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: EMPTY
2739: PPUSH
2740: CALL_OW 42
2744: ADD
2745: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
2746: LD_ADDR_EXP 6
2750: PUSH
2751: LD_EXP 4
2755: PUSH
2756: LD_EXP 6
2760: UNION
2761: PUSH
2762: LD_VAR 0 3
2766: DIFF
2767: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
2768: LD_ADDR_VAR 0 4
2772: PUSH
2773: LD_EXP 6
2777: PUSH
2778: LD_EXP 45
2782: ADD
2783: PUSH
2784: FOR_IN
2785: IFFALSE 2816
// if GetSide ( i ) = 1 then
2787: LD_VAR 0 4
2791: PPUSH
2792: CALL_OW 255
2796: PUSH
2797: LD_INT 1
2799: EQUAL
2800: IFFALSE 2814
// SetSide ( i , 4 ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 4
2809: PPUSH
2810: CALL_OW 235
2814: GO 2784
2816: POP
2817: POP
// for i in selected do
2818: LD_ADDR_VAR 0 4
2822: PUSH
2823: LD_VAR 0 3
2827: PUSH
2828: FOR_IN
2829: IFFALSE 2860
// if GetSide ( i ) = 4 then
2831: LD_VAR 0 4
2835: PPUSH
2836: CALL_OW 255
2840: PUSH
2841: LD_INT 4
2843: EQUAL
2844: IFFALSE 2858
// SetSide ( i , 1 ) ;
2846: LD_VAR 0 4
2850: PPUSH
2851: LD_INT 1
2853: PPUSH
2854: CALL_OW 235
2858: GO 2828
2860: POP
2861: POP
// jmm_units := jmm_units diff cornel_units ;
2862: LD_ADDR_EXP 4
2866: PUSH
2867: LD_EXP 4
2871: PUSH
2872: LD_EXP 6
2876: DIFF
2877: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
2878: LD_EXP 38
2882: PPUSH
2883: CALL_OW 255
2887: PUSH
2888: LD_INT 4
2890: EQUAL
2891: IFFALSE 2906
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
2893: LD_EXP 3
2897: PUSH
2898: LD_STRING Bobby
2900: STR
2901: PPUSH
2902: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
2906: LD_EXP 39
2910: PPUSH
2911: CALL_OW 255
2915: PUSH
2916: LD_INT 4
2918: EQUAL
2919: IFFALSE 2934
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
2921: LD_EXP 3
2925: PUSH
2926: LD_STRING Cyrus
2928: STR
2929: PPUSH
2930: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
2934: LD_EXP 40
2938: PPUSH
2939: CALL_OW 255
2943: PUSH
2944: LD_INT 4
2946: EQUAL
2947: IFFALSE 2962
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
2949: LD_EXP 3
2953: PUSH
2954: LD_STRING Lisa
2956: STR
2957: PPUSH
2958: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
2962: LD_EXP 41
2966: PPUSH
2967: CALL_OW 255
2971: PUSH
2972: LD_INT 4
2974: EQUAL
2975: IFFALSE 2990
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
2977: LD_EXP 3
2981: PUSH
2982: LD_STRING Khatam
2984: STR
2985: PPUSH
2986: CALL_OW 40
// if GetSide ( Brian ) = 4 then
2990: LD_EXP 42
2994: PPUSH
2995: CALL_OW 255
2999: PUSH
3000: LD_INT 4
3002: EQUAL
3003: IFFALSE 3018
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3005: LD_EXP 3
3009: PUSH
3010: LD_STRING Brian
3012: STR
3013: PPUSH
3014: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3018: LD_EXP 43
3022: PPUSH
3023: CALL_OW 255
3027: PUSH
3028: LD_INT 4
3030: EQUAL
3031: IFFALSE 3046
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3033: LD_EXP 3
3037: PUSH
3038: LD_STRING Jerry
3040: STR
3041: PPUSH
3042: CALL_OW 40
// end ; end_of_file
3046: LD_VAR 0 1
3050: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3051: LD_INT 0
3053: PPUSH
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
3058: PPUSH
3059: PPUSH
3060: PPUSH
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
3065: PPUSH
// ru_alert := false ;
3066: LD_ADDR_EXP 60
3070: PUSH
3071: LD_INT 0
3073: ST_TO_ADDR
// ru_produce_list := [ ] ;
3074: LD_ADDR_EXP 57
3078: PUSH
3079: EMPTY
3080: ST_TO_ADDR
// if Difficulty > 1 then
3081: LD_OWVAR 67
3085: PUSH
3086: LD_INT 1
3088: GREATER
3089: IFFALSE 3177
// begin uc_side := 3 ;
3091: LD_ADDR_OWVAR 20
3095: PUSH
3096: LD_INT 3
3098: ST_TO_ADDR
// uc_nation := 3 ;
3099: LD_ADDR_OWVAR 21
3103: PUSH
3104: LD_INT 3
3106: ST_TO_ADDR
// bc_type := b_breastwork ;
3107: LD_ADDR_OWVAR 42
3111: PUSH
3112: LD_INT 31
3114: ST_TO_ADDR
// bc_level := Difficulty ;
3115: LD_ADDR_OWVAR 43
3119: PUSH
3120: LD_OWVAR 67
3124: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3125: LD_INT 22
3127: PPUSH
3128: LD_INT 14
3130: PPUSH
3131: LD_INT 0
3133: PPUSH
3134: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3138: LD_INT 48
3140: PPUSH
3141: LD_INT 46
3143: PPUSH
3144: LD_INT 0
3146: PPUSH
3147: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3151: LD_INT 86
3153: PPUSH
3154: LD_INT 65
3156: PPUSH
3157: LD_INT 5
3159: PPUSH
3160: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3164: LD_INT 165
3166: PPUSH
3167: LD_INT 73
3169: PPUSH
3170: LD_INT 5
3172: PPUSH
3173: CALL_OW 47
// end ; if Difficulty = 3 then
3177: LD_OWVAR 67
3181: PUSH
3182: LD_INT 3
3184: EQUAL
3185: IFFALSE 3200
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3187: LD_INT 51
3189: PPUSH
3190: LD_INT 3
3192: PPUSH
3193: LD_INT 2
3195: PPUSH
3196: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3200: LD_ADDR_VAR 0 7
3204: PUSH
3205: LD_INT 22
3207: PUSH
3208: LD_INT 3
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: LD_INT 30
3220: PUSH
3221: LD_INT 31
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: LD_INT 30
3230: PUSH
3231: LD_INT 32
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PPUSH
3247: CALL_OW 69
3251: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3252: LD_ADDR_VAR 0 8
3256: PUSH
3257: LD_INT 22
3259: PUSH
3260: LD_INT 3
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: LD_INT 30
3269: PUSH
3270: LD_INT 4
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PPUSH
3281: CALL_OW 69
3285: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3286: LD_ADDR_VAR 0 10
3290: PUSH
3291: LD_INT 22
3293: PUSH
3294: LD_INT 3
3296: PUSH
3297: EMPTY
3298: LIST
3299: LIST
3300: PUSH
3301: LD_INT 30
3303: PUSH
3304: LD_INT 3
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PPUSH
3315: CALL_OW 69
3319: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3320: LD_ADDR_VAR 0 9
3324: PUSH
3325: LD_INT 22
3327: PUSH
3328: LD_INT 3
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PUSH
3335: LD_INT 30
3337: PUSH
3338: LD_INT 6
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PPUSH
3349: CALL_OW 69
3353: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3354: LD_ADDR_VAR 0 2
3358: PUSH
3359: LD_INT 22
3361: PUSH
3362: LD_INT 3
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 30
3371: PUSH
3372: LD_INT 1
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PPUSH
3383: CALL_OW 69
3387: PUSH
3388: FOR_IN
3389: IFFALSE 3433
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3391: LD_VAR 0 2
3395: PPUSH
3396: CALL_OW 274
3400: PPUSH
3401: LD_INT 1
3403: PPUSH
3404: LD_INT 1000
3406: PPUSH
3407: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3411: LD_VAR 0 2
3415: PPUSH
3416: CALL_OW 274
3420: PPUSH
3421: LD_INT 2
3423: PPUSH
3424: LD_INT 300
3426: PPUSH
3427: CALL_OW 277
// end ;
3431: GO 3388
3433: POP
3434: POP
// uc_side := 3 ;
3435: LD_ADDR_OWVAR 20
3439: PUSH
3440: LD_INT 3
3442: ST_TO_ADDR
// uc_nation := 3 ;
3443: LD_ADDR_OWVAR 21
3447: PUSH
3448: LD_INT 3
3450: ST_TO_ADDR
// skill := [ 2 , 3 , 4 ] [ Difficulty ] ;
3451: LD_ADDR_VAR 0 11
3455: PUSH
3456: LD_INT 2
3458: PUSH
3459: LD_INT 3
3461: PUSH
3462: LD_INT 4
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: LIST
3469: PUSH
3470: LD_OWVAR 67
3474: ARRAY
3475: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3476: LD_ADDR_EXP 52
3480: PUSH
3481: LD_STRING Pokryshkin
3483: PPUSH
3484: LD_INT 0
3486: PPUSH
3487: LD_STRING 
3489: PPUSH
3490: CALL 35829 0 3
3494: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3495: LD_EXP 52
3499: PPUSH
3500: LD_INT 63
3502: PPUSH
3503: LD_INT 21
3505: PPUSH
3506: LD_INT 0
3508: PPUSH
3509: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3513: LD_EXP 52
3517: PPUSH
3518: CALL_OW 140
// InitHc ;
3522: CALL_OW 19
// for i in fac do
3526: LD_ADDR_VAR 0 2
3530: PUSH
3531: LD_VAR 0 10
3535: PUSH
3536: FOR_IN
3537: IFFALSE 3590
// begin for j = 1 to 6 do
3539: LD_ADDR_VAR 0 3
3543: PUSH
3544: DOUBLE
3545: LD_INT 1
3547: DEC
3548: ST_TO_ADDR
3549: LD_INT 6
3551: PUSH
3552: FOR_TO
3553: IFFALSE 3586
// begin PrepareHuman ( false , 3 , skill ) ;
3555: LD_INT 0
3557: PPUSH
3558: LD_INT 3
3560: PPUSH
3561: LD_VAR 0 11
3565: PPUSH
3566: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3570: CALL_OW 44
3574: PPUSH
3575: LD_VAR 0 2
3579: PPUSH
3580: CALL_OW 52
// end ;
3584: GO 3552
3586: POP
3587: POP
// end ;
3588: GO 3536
3590: POP
3591: POP
// for i in lab do
3592: LD_ADDR_VAR 0 2
3596: PUSH
3597: LD_VAR 0 9
3601: PUSH
3602: FOR_IN
3603: IFFALSE 3636
// begin PrepareHuman ( false , 4 , skill ) ;
3605: LD_INT 0
3607: PPUSH
3608: LD_INT 4
3610: PPUSH
3611: LD_VAR 0 11
3615: PPUSH
3616: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3620: CALL_OW 44
3624: PPUSH
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 52
// end ;
3634: GO 3602
3636: POP
3637: POP
// for i in tw do
3638: LD_ADDR_VAR 0 2
3642: PUSH
3643: LD_VAR 0 7
3647: PUSH
3648: FOR_IN
3649: IFFALSE 3698
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
3651: LD_VAR 0 2
3655: PPUSH
3656: LD_INT 42
3658: PUSH
3659: LD_INT 43
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PUSH
3666: LD_INT 1
3668: PPUSH
3669: LD_INT 2
3671: PPUSH
3672: CALL_OW 12
3676: ARRAY
3677: PPUSH
3678: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
3682: LD_VAR 0 11
3686: PPUSH
3687: LD_VAR 0 2
3691: PPUSH
3692: CALL 767 0 2
// end ;
3696: GO 3648
3698: POP
3699: POP
// for i in bar do
3700: LD_ADDR_VAR 0 2
3704: PUSH
3705: LD_VAR 0 8
3709: PUSH
3710: FOR_IN
3711: IFFALSE 3744
// begin PrepareHuman ( false , 1 , skill ) ;
3713: LD_INT 0
3715: PPUSH
3716: LD_INT 1
3718: PPUSH
3719: LD_VAR 0 11
3723: PPUSH
3724: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3728: CALL_OW 44
3732: PPUSH
3733: LD_VAR 0 2
3737: PPUSH
3738: CALL_OW 52
// end ;
3742: GO 3710
3744: POP
3745: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
3746: LD_ADDR_VAR 0 13
3750: PUSH
3751: LD_INT 100
3753: PUSH
3754: LD_INT 9
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 135
3763: PUSH
3764: LD_INT 60
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: LD_INT 41
3773: PUSH
3774: LD_INT 6
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_INT 22
3783: PUSH
3784: LD_INT 9
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: PUSH
3791: LD_INT 84
3793: PUSH
3794: LD_INT 14
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: ST_TO_ADDR
// vehicles := [ ] ;
3808: LD_ADDR_VAR 0 12
3812: PUSH
3813: EMPTY
3814: ST_TO_ADDR
// for i in spot_xy do
3815: LD_ADDR_VAR 0 2
3819: PUSH
3820: LD_VAR 0 13
3824: PUSH
3825: FOR_IN
3826: IFFALSE 3984
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
3828: LD_ADDR_VAR 0 6
3832: PUSH
3833: LD_INT 3
3835: PPUSH
3836: LD_INT 3
3838: PPUSH
3839: LD_INT 22
3841: PPUSH
3842: LD_INT 1
3844: PPUSH
3845: LD_INT 1
3847: PPUSH
3848: LD_INT 42
3850: PUSH
3851: LD_INT 43
3853: PUSH
3854: LD_INT 44
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: LIST
3861: PUSH
3862: LD_INT 1
3864: PPUSH
3865: LD_INT 3
3867: PPUSH
3868: CALL_OW 12
3872: ARRAY
3873: PPUSH
3874: LD_INT 100
3876: PPUSH
3877: CALL 489 0 7
3881: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
3882: LD_ADDR_VAR 0 12
3886: PUSH
3887: LD_VAR 0 12
3891: PPUSH
3892: LD_VAR 0 12
3896: PUSH
3897: LD_INT 1
3899: PLUS
3900: PPUSH
3901: LD_VAR 0 6
3905: PPUSH
3906: CALL_OW 2
3910: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3911: LD_VAR 0 6
3915: PPUSH
3916: LD_INT 3
3918: PPUSH
3919: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
3923: LD_VAR 0 6
3927: PPUSH
3928: LD_VAR 0 2
3932: PUSH
3933: LD_INT 1
3935: ARRAY
3936: PPUSH
3937: LD_VAR 0 2
3941: PUSH
3942: LD_INT 2
3944: ARRAY
3945: PPUSH
3946: LD_INT 0
3948: PPUSH
3949: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 3
3958: PPUSH
3959: LD_VAR 0 11
3963: PPUSH
3964: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3968: CALL_OW 44
3972: PPUSH
3973: LD_VAR 0 6
3977: PPUSH
3978: CALL_OW 52
// end ;
3982: GO 3825
3984: POP
3985: POP
// for i = 1 to [ 5 , 7 , 8 ] [ Difficulty ] do
3986: LD_ADDR_VAR 0 2
3990: PUSH
3991: DOUBLE
3992: LD_INT 1
3994: DEC
3995: ST_TO_ADDR
3996: LD_INT 5
3998: PUSH
3999: LD_INT 7
4001: PUSH
4002: LD_INT 8
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: PUSH
4010: LD_OWVAR 67
4014: ARRAY
4015: PUSH
4016: FOR_TO
4017: IFFALSE 4077
// begin PrepareHuman ( false , 1 , skill ) ;
4019: LD_INT 0
4021: PPUSH
4022: LD_INT 1
4024: PPUSH
4025: LD_VAR 0 11
4029: PPUSH
4030: CALL_OW 380
// un := CreateHuman ;
4034: LD_ADDR_VAR 0 5
4038: PUSH
4039: CALL_OW 44
4043: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4044: LD_VAR 0 5
4048: PPUSH
4049: LD_INT 11
4051: PPUSH
4052: LD_INT 0
4054: PPUSH
4055: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4059: LD_ADDR_EXP 55
4063: PUSH
4064: LD_EXP 55
4068: PUSH
4069: LD_VAR 0 5
4073: ADD
4074: ST_TO_ADDR
// end ;
4075: GO 4016
4077: POP
4078: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4079: LD_ADDR_VAR 0 2
4083: PUSH
4084: DOUBLE
4085: LD_INT 1
4087: DEC
4088: ST_TO_ADDR
4089: LD_INT 2
4091: PUSH
4092: LD_INT 3
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: PUSH
4103: LD_OWVAR 67
4107: ARRAY
4108: PUSH
4109: FOR_TO
4110: IFFALSE 4170
// begin PrepareHuman ( false , 1 , skill ) ;
4112: LD_INT 0
4114: PPUSH
4115: LD_INT 1
4117: PPUSH
4118: LD_VAR 0 11
4122: PPUSH
4123: CALL_OW 380
// un := CreateHuman ;
4127: LD_ADDR_VAR 0 5
4131: PUSH
4132: CALL_OW 44
4136: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4137: LD_VAR 0 5
4141: PPUSH
4142: LD_INT 12
4144: PPUSH
4145: LD_INT 0
4147: PPUSH
4148: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4152: LD_ADDR_EXP 53
4156: PUSH
4157: LD_EXP 53
4161: PUSH
4162: LD_VAR 0 5
4166: ADD
4167: ST_TO_ADDR
// end ;
4168: GO 4109
4170: POP
4171: POP
// for i = 1 to 2 do
4172: LD_ADDR_VAR 0 2
4176: PUSH
4177: DOUBLE
4178: LD_INT 1
4180: DEC
4181: ST_TO_ADDR
4182: LD_INT 2
4184: PUSH
4185: FOR_TO
4186: IFFALSE 4252
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4188: LD_INT 1
4190: PPUSH
4191: LD_INT 1
4193: PPUSH
4194: LD_VAR 0 11
4198: PPUSH
4199: CALL_OW 380
// un := CreateHuman ;
4203: LD_ADDR_VAR 0 5
4207: PUSH
4208: CALL_OW 44
4212: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4213: LD_VAR 0 5
4217: PPUSH
4218: LD_INT 39
4220: PPUSH
4221: LD_INT 12
4223: PPUSH
4224: LD_INT 3
4226: PPUSH
4227: LD_INT 0
4229: PPUSH
4230: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4234: LD_ADDR_EXP 54
4238: PUSH
4239: LD_EXP 54
4243: PUSH
4244: LD_VAR 0 5
4248: ADD
4249: ST_TO_ADDR
// end ;
4250: GO 4185
4252: POP
4253: POP
// for i = 1 to 3 do
4254: LD_ADDR_VAR 0 2
4258: PUSH
4259: DOUBLE
4260: LD_INT 1
4262: DEC
4263: ST_TO_ADDR
4264: LD_INT 3
4266: PUSH
4267: FOR_TO
4268: IFFALSE 4334
// begin PrepareHuman ( false , 1 , skill ) ;
4270: LD_INT 0
4272: PPUSH
4273: LD_INT 1
4275: PPUSH
4276: LD_VAR 0 11
4280: PPUSH
4281: CALL_OW 380
// un := CreateHuman ;
4285: LD_ADDR_VAR 0 5
4289: PUSH
4290: CALL_OW 44
4294: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4295: LD_VAR 0 5
4299: PPUSH
4300: LD_INT 180
4302: PPUSH
4303: LD_INT 11
4305: PPUSH
4306: LD_INT 4
4308: PPUSH
4309: LD_INT 0
4311: PPUSH
4312: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4316: LD_ADDR_EXP 58
4320: PUSH
4321: LD_EXP 58
4325: PUSH
4326: LD_VAR 0 5
4330: ADD
4331: ST_TO_ADDR
// end ;
4332: GO 4267
4334: POP
4335: POP
// ru_vehicles := vehicles ;
4336: LD_ADDR_EXP 56
4340: PUSH
4341: LD_VAR 0 12
4345: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4346: LD_ADDR_EXP 59
4350: PUSH
4351: LD_INT 131
4353: PUSH
4354: LD_INT 121
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: LD_INT 113
4363: PUSH
4364: LD_INT 90
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 93
4373: PUSH
4374: LD_INT 62
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: LIST
4385: PUSH
4386: LD_INT 106
4388: PUSH
4389: LD_INT 54
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PUSH
4396: LD_INT 120
4398: PUSH
4399: LD_INT 80
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 143
4408: PUSH
4409: LD_INT 120
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: LIST
4420: PUSH
4421: LD_INT 154
4423: PUSH
4424: LD_INT 116
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 140
4433: PUSH
4434: LD_INT 93
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 130
4443: PUSH
4444: LD_INT 58
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: PUSH
4456: LD_INT 105
4458: PUSH
4459: LD_INT 106
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: LD_INT 134
4468: PUSH
4469: LD_INT 98
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: LD_INT 159
4478: PUSH
4479: LD_INT 113
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: ST_TO_ADDR
// if Difficulty = 1 then
4497: LD_OWVAR 67
4501: PUSH
4502: LD_INT 1
4504: EQUAL
4505: IFFALSE 4509
// exit ;
4507: GO 4564
// for i = 1 to Difficulty - 1 do
4509: LD_ADDR_VAR 0 2
4513: PUSH
4514: DOUBLE
4515: LD_INT 1
4517: DEC
4518: ST_TO_ADDR
4519: LD_OWVAR 67
4523: PUSH
4524: LD_INT 1
4526: MINUS
4527: PUSH
4528: FOR_TO
4529: IFFALSE 4562
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
4531: LD_ADDR_EXP 57
4535: PUSH
4536: LD_EXP 57
4540: PUSH
4541: LD_INT 22
4543: PUSH
4544: LD_INT 1
4546: PUSH
4547: LD_INT 1
4549: PUSH
4550: LD_INT 43
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: ADD
4559: ST_TO_ADDR
4560: GO 4528
4562: POP
4563: POP
// end ;
4564: LD_VAR 0 1
4568: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
4569: LD_INT 22
4571: PUSH
4572: LD_INT 3
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: LD_INT 21
4581: PUSH
4582: LD_INT 2
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PPUSH
4593: CALL_OW 69
4597: IFFALSE 4691
4599: GO 4601
4601: DISABLE
4602: LD_INT 0
4604: PPUSH
4605: PPUSH
// begin enable ;
4606: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4607: LD_ADDR_VAR 0 2
4611: PUSH
4612: LD_INT 22
4614: PUSH
4615: LD_INT 3
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 21
4624: PUSH
4625: LD_INT 2
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PPUSH
4636: CALL_OW 69
4640: ST_TO_ADDR
// if filter then
4641: LD_VAR 0 2
4645: IFFALSE 4691
// for i in filter do
4647: LD_ADDR_VAR 0 1
4651: PUSH
4652: LD_VAR 0 2
4656: PUSH
4657: FOR_IN
4658: IFFALSE 4689
// if GetFuel ( i ) < 20 then
4660: LD_VAR 0 1
4664: PPUSH
4665: CALL_OW 261
4669: PUSH
4670: LD_INT 20
4672: LESS
4673: IFFALSE 4687
// SetFuel ( i , 20 ) ;
4675: LD_VAR 0 1
4679: PPUSH
4680: LD_INT 20
4682: PPUSH
4683: CALL_OW 240
4687: GO 4657
4689: POP
4690: POP
// end ;
4691: PPOPN 2
4693: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
4694: LD_EXP 57
4698: IFFALSE 4917
4700: GO 4702
4702: DISABLE
4703: LD_INT 0
4705: PPUSH
4706: PPUSH
4707: PPUSH
// begin enable ;
4708: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4709: LD_ADDR_VAR 0 2
4713: PUSH
4714: LD_INT 22
4716: PUSH
4717: LD_INT 3
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 30
4726: PUSH
4727: LD_INT 3
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: PPUSH
4738: CALL_OW 69
4742: ST_TO_ADDR
// can_produce := [ ] ;
4743: LD_ADDR_VAR 0 3
4747: PUSH
4748: EMPTY
4749: ST_TO_ADDR
// if not fac then
4750: LD_VAR 0 2
4754: NOT
4755: IFFALSE 4760
// begin disable ;
4757: DISABLE
// exit ;
4758: GO 4917
// end ; for i in fac do
4760: LD_ADDR_VAR 0 1
4764: PUSH
4765: LD_VAR 0 2
4769: PUSH
4770: FOR_IN
4771: IFFALSE 4809
// if UnitsInside ( i ) then
4773: LD_VAR 0 1
4777: PPUSH
4778: CALL_OW 313
4782: IFFALSE 4807
// can_produce := Insert ( can_produce , 1 , i ) ;
4784: LD_ADDR_VAR 0 3
4788: PUSH
4789: LD_VAR 0 3
4793: PPUSH
4794: LD_INT 1
4796: PPUSH
4797: LD_VAR 0 1
4801: PPUSH
4802: CALL_OW 2
4806: ST_TO_ADDR
4807: GO 4770
4809: POP
4810: POP
// if not can_produce then
4811: LD_VAR 0 3
4815: NOT
4816: IFFALSE 4820
// exit ;
4818: GO 4917
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
4820: LD_VAR 0 3
4824: PUSH
4825: LD_INT 1
4827: PPUSH
4828: LD_VAR 0 3
4832: PPUSH
4833: CALL_OW 12
4837: ARRAY
4838: PPUSH
4839: LD_EXP 57
4843: PUSH
4844: LD_INT 1
4846: ARRAY
4847: PPUSH
4848: LD_EXP 57
4852: PUSH
4853: LD_INT 2
4855: ARRAY
4856: PPUSH
4857: LD_EXP 57
4861: PUSH
4862: LD_INT 3
4864: ARRAY
4865: PPUSH
4866: LD_EXP 57
4870: PUSH
4871: LD_INT 4
4873: ARRAY
4874: PPUSH
4875: CALL_OW 125
// for i = 1 to 4 do
4879: LD_ADDR_VAR 0 1
4883: PUSH
4884: DOUBLE
4885: LD_INT 1
4887: DEC
4888: ST_TO_ADDR
4889: LD_INT 4
4891: PUSH
4892: FOR_TO
4893: IFFALSE 4915
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
4895: LD_ADDR_EXP 57
4899: PUSH
4900: LD_EXP 57
4904: PPUSH
4905: LD_INT 1
4907: PPUSH
4908: CALL_OW 3
4912: ST_TO_ADDR
4913: GO 4892
4915: POP
4916: POP
// end ;
4917: PPOPN 3
4919: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
4920: LD_INT 0
4922: PPUSH
4923: PPUSH
4924: PPUSH
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4925: LD_ADDR_VAR 0 2
4929: PUSH
4930: DOUBLE
4931: LD_INT 1
4933: DEC
4934: ST_TO_ADDR
4935: LD_INT 2
4937: PUSH
4938: LD_INT 3
4940: PUSH
4941: LD_INT 4
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: PUSH
4949: LD_OWVAR 67
4953: ARRAY
4954: PUSH
4955: FOR_TO
4956: IFFALSE 5105
// begin PrepareHuman ( false , 3 , 3 ) ;
4958: LD_INT 0
4960: PPUSH
4961: LD_INT 3
4963: PPUSH
4964: LD_INT 3
4966: PPUSH
4967: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
4971: LD_ADDR_VAR 0 3
4975: PUSH
4976: LD_INT 3
4978: PPUSH
4979: LD_INT 3
4981: PPUSH
4982: LD_INT 22
4984: PPUSH
4985: LD_INT 1
4987: PPUSH
4988: LD_INT 1
4990: PPUSH
4991: LD_INT 43
4993: PUSH
4994: LD_INT 42
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PUSH
5001: LD_INT 1
5003: PPUSH
5004: LD_INT 2
5006: PPUSH
5007: CALL_OW 12
5011: ARRAY
5012: PPUSH
5013: LD_INT 70
5015: PPUSH
5016: CALL 489 0 7
5020: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5021: LD_VAR 0 3
5025: PPUSH
5026: LD_INT 4
5028: PPUSH
5029: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5033: LD_VAR 0 3
5037: PPUSH
5038: LD_INT 229
5040: PPUSH
5041: LD_INT 44
5043: PPUSH
5044: LD_INT 0
5046: PPUSH
5047: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5051: CALL_OW 44
5055: PPUSH
5056: LD_VAR 0 3
5060: PPUSH
5061: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5065: LD_ADDR_EXP 56
5069: PUSH
5070: LD_EXP 56
5074: PUSH
5075: LD_VAR 0 3
5079: ADD
5080: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5081: LD_VAR 0 3
5085: PPUSH
5086: LD_INT 191
5088: PPUSH
5089: LD_INT 32
5091: PPUSH
5092: CALL_OW 111
// Wait ( 0 0$02 ) ;
5096: LD_INT 70
5098: PPUSH
5099: CALL_OW 67
// end ;
5103: GO 4955
5105: POP
5106: POP
// end ;
5107: LD_VAR 0 1
5111: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5112: LD_EXP 31
5116: PUSH
5117: LD_EXP 56
5121: AND
5122: IFFALSE 5296
5124: GO 5126
5126: DISABLE
5127: LD_INT 0
5129: PPUSH
5130: PPUSH
5131: PPUSH
// begin wait ( 0 0$50 ) ;
5132: LD_INT 1750
5134: PPUSH
5135: CALL_OW 67
// tmp := ru_vehicles ;
5139: LD_ADDR_VAR 0 3
5143: PUSH
5144: LD_EXP 56
5148: ST_TO_ADDR
// if not tmp then
5149: LD_VAR 0 3
5153: NOT
5154: IFFALSE 5158
// exit ;
5156: GO 5296
// repeat wait ( 0 0$1 ) ;
5158: LD_INT 35
5160: PPUSH
5161: CALL_OW 67
// for i in tmp do
5165: LD_ADDR_VAR 0 1
5169: PUSH
5170: LD_VAR 0 3
5174: PUSH
5175: FOR_IN
5176: IFFALSE 5287
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5178: LD_ADDR_VAR 0 2
5182: PUSH
5183: LD_INT 22
5185: PUSH
5186: LD_INT 1
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: PPUSH
5193: LD_VAR 0 1
5197: PPUSH
5198: CALL_OW 74
5202: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 2
5212: PPUSH
5213: CALL_OW 296
5217: PUSH
5218: LD_INT 10
5220: GREATER
5221: IFFALSE 5240
// ComAgressiveMove ( i , 69 , 101 ) else
5223: LD_VAR 0 1
5227: PPUSH
5228: LD_INT 69
5230: PPUSH
5231: LD_INT 101
5233: PPUSH
5234: CALL_OW 114
5238: GO 5254
// ComAttackUnit ( i , enemy ) ;
5240: LD_VAR 0 1
5244: PPUSH
5245: LD_VAR 0 2
5249: PPUSH
5250: CALL_OW 115
// if GetLives ( i ) < 250 then
5254: LD_VAR 0 1
5258: PPUSH
5259: CALL_OW 256
5263: PUSH
5264: LD_INT 250
5266: LESS
5267: IFFALSE 5285
// tmp := tmp diff i ;
5269: LD_ADDR_VAR 0 3
5273: PUSH
5274: LD_VAR 0 3
5278: PUSH
5279: LD_VAR 0 1
5283: DIFF
5284: ST_TO_ADDR
// end ;
5285: GO 5175
5287: POP
5288: POP
// until not tmp ;
5289: LD_VAR 0 3
5293: NOT
5294: IFFALSE 5158
// end ; end_of_file
5296: PPOPN 3
5298: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5299: LD_INT 0
5301: PPUSH
5302: PPUSH
5303: PPUSH
5304: PPUSH
5305: PPUSH
5306: PPUSH
5307: PPUSH
// InGameOn ;
5308: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5312: LD_EXP 37
5316: PPUSH
5317: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5321: LD_EXP 37
5325: PPUSH
5326: LD_EXP 44
5330: PPUSH
5331: CALL_OW 119
// if Bierezov then
5335: LD_EXP 45
5339: IFFALSE 5355
// ComTurnUnit ( Bierezov , Cornel ) ;
5341: LD_EXP 45
5345: PPUSH
5346: LD_EXP 44
5350: PPUSH
5351: CALL_OW 119
// for i in jmm_units do
5355: LD_ADDR_VAR 0 2
5359: PUSH
5360: LD_EXP 4
5364: PUSH
5365: FOR_IN
5366: IFFALSE 5384
// ComTurnUnit ( i , Cornel ) ;
5368: LD_VAR 0 2
5372: PPUSH
5373: LD_EXP 44
5377: PPUSH
5378: CALL_OW 119
5382: GO 5365
5384: POP
5385: POP
// units := cornel_units union Cornel ;
5386: LD_ADDR_VAR 0 3
5390: PUSH
5391: LD_EXP 6
5395: PUSH
5396: LD_EXP 44
5400: UNION
5401: ST_TO_ADDR
// repeat wait ( 1 ) ;
5402: LD_INT 1
5404: PPUSH
5405: CALL_OW 67
// for i in units do
5409: LD_ADDR_VAR 0 2
5413: PUSH
5414: LD_VAR 0 3
5418: PUSH
5419: FOR_IN
5420: IFFALSE 5453
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5422: LD_VAR 0 2
5426: PPUSH
5427: LD_EXP 37
5431: PPUSH
5432: CALL_OW 250
5436: PPUSH
5437: LD_EXP 37
5441: PPUSH
5442: CALL_OW 251
5446: PPUSH
5447: CALL_OW 111
5451: GO 5419
5453: POP
5454: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5455: LD_VAR 0 3
5459: PPUSH
5460: LD_INT 92
5462: PUSH
5463: LD_EXP 37
5467: PPUSH
5468: CALL_OW 250
5472: PUSH
5473: LD_EXP 37
5477: PPUSH
5478: CALL_OW 251
5482: PUSH
5483: LD_INT 10
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: PPUSH
5492: CALL_OW 72
5496: PUSH
5497: LD_VAR 0 3
5501: EQUAL
5502: IFFALSE 5402
// for i in units do
5504: LD_ADDR_VAR 0 2
5508: PUSH
5509: LD_VAR 0 3
5513: PUSH
5514: FOR_IN
5515: IFFALSE 5533
// ComTurnUnit ( i , JMM ) ;
5517: LD_VAR 0 2
5521: PPUSH
5522: LD_EXP 37
5526: PPUSH
5527: CALL_OW 119
5531: GO 5514
5533: POP
5534: POP
// ComTurnUnit ( Cornel , JMM ) ;
5535: LD_EXP 44
5539: PPUSH
5540: LD_EXP 37
5544: PPUSH
5545: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
5549: LD_EXP 37
5553: PPUSH
5554: LD_STRING D1-JMM-1
5556: PPUSH
5557: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
5561: LD_EXP 44
5565: PPUSH
5566: LD_STRING D1-Corn-1
5568: PPUSH
5569: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
5573: LD_EXP 37
5577: PPUSH
5578: LD_EXP 44
5582: PPUSH
5583: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
5587: LD_EXP 44
5591: PPUSH
5592: LD_EXP 37
5596: PPUSH
5597: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
5601: LD_INT 35
5603: PPUSH
5604: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
5608: LD_EXP 37
5612: PPUSH
5613: LD_EXP 44
5617: PPUSH
5618: CALL_OW 296
5622: PUSH
5623: LD_INT 6
5625: LESS
5626: IFFALSE 5601
// ChangeSideFog ( 4 , 1 ) ;
5628: LD_INT 4
5630: PPUSH
5631: LD_INT 1
5633: PPUSH
5634: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
5638: LD_EXP 37
5642: PPUSH
5643: LD_EXP 44
5647: PPUSH
5648: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5652: LD_EXP 44
5656: PPUSH
5657: LD_EXP 37
5661: PPUSH
5662: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
5666: LD_EXP 37
5670: PPUSH
5671: LD_STRING D1-JMM-2
5673: PPUSH
5674: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
5678: LD_EXP 37
5682: PPUSH
5683: LD_STRING D1-JMM-2a
5685: PPUSH
5686: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
5690: LD_EXP 44
5694: PPUSH
5695: LD_STRING D1-Corn-2
5697: PPUSH
5698: CALL_OW 88
// if bierezov_exist or debug then
5702: LD_EXP 7
5706: PUSH
5707: LD_EXP 1
5711: OR
5712: IFFALSE 5953
// begin ComTurnUnit ( Cornel , Bierezov ) ;
5714: LD_EXP 44
5718: PPUSH
5719: LD_EXP 45
5723: PPUSH
5724: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
5728: LD_INT 10
5730: PPUSH
5731: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
5735: LD_EXP 44
5739: PPUSH
5740: LD_STRING D1a-Corn-1
5742: PPUSH
5743: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
5747: LD_EXP 37
5751: PPUSH
5752: LD_EXP 45
5756: PPUSH
5757: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
5761: LD_EXP 45
5765: PPUSH
5766: LD_EXP 37
5770: PPUSH
5771: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
5775: LD_EXP 37
5779: PPUSH
5780: LD_STRING D1a-JMM-1
5782: PPUSH
5783: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
5787: LD_EXP 37
5791: PPUSH
5792: LD_EXP 44
5796: PPUSH
5797: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5801: LD_EXP 44
5805: PPUSH
5806: LD_EXP 37
5810: PPUSH
5811: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
5815: LD_EXP 44
5819: PPUSH
5820: LD_STRING D1a-Corn-2
5822: PPUSH
5823: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
5827: LD_EXP 37
5831: PPUSH
5832: LD_STRING D1a-JMM-2
5834: PPUSH
5835: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
5839: LD_EXP 44
5843: PPUSH
5844: LD_STRING D1a-Corn-3
5846: PPUSH
5847: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
5851: LD_EXP 37
5855: PPUSH
5856: LD_STRING D1a-JMM-3
5858: PPUSH
5859: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
5863: LD_EXP 44
5867: PPUSH
5868: LD_STRING D1a-Corn-4
5870: PPUSH
5871: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
5875: LD_EXP 37
5879: PPUSH
5880: LD_STRING D1a-JMM-4
5882: PPUSH
5883: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
5887: LD_EXP 44
5891: PPUSH
5892: LD_STRING D1a-Corn-5
5894: PPUSH
5895: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
5899: LD_EXP 45
5903: PPUSH
5904: LD_EXP 44
5908: PPUSH
5909: CALL_OW 250
5913: PPUSH
5914: LD_EXP 44
5918: PPUSH
5919: CALL_OW 251
5923: PUSH
5924: LD_INT 2
5926: MINUS
5927: PPUSH
5928: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
5932: LD_EXP 45
5936: PPUSH
5937: LD_EXP 44
5941: PPUSH
5942: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
5946: LD_INT 10
5948: PPUSH
5949: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
5953: LD_EXP 37
5957: PPUSH
5958: LD_STRING D1b-JMM-1
5960: PPUSH
5961: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
5965: LD_EXP 44
5969: PPUSH
5970: LD_STRING D1b-Corn-1
5972: PPUSH
5973: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
5977: LD_EXP 37
5981: PPUSH
5982: LD_STRING D1b-JMM-2
5984: PPUSH
5985: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
5989: LD_EXP 44
5993: PPUSH
5994: LD_STRING D1b-Corn-2
5996: PPUSH
5997: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6001: LD_EXP 37
6005: PPUSH
6006: LD_STRING D1b-JMM-3
6008: PPUSH
6009: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6013: LD_INT 10
6015: PPUSH
6016: CALL_OW 67
// SayRadio ( Powell , D1b-Pow-3 ) ;
6020: LD_EXP 46
6024: PPUSH
6025: LD_STRING D1b-Pow-3
6027: PPUSH
6028: CALL_OW 94
// Say ( JMM , D1b-JMM-4 ) ;
6032: LD_EXP 37
6036: PPUSH
6037: LD_STRING D1b-JMM-4
6039: PPUSH
6040: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6044: LD_EXP 44
6048: PPUSH
6049: LD_STRING D1b-Corn-4
6051: PPUSH
6052: CALL_OW 88
// if Khatam then
6056: LD_EXP 41
6060: IFFALSE 6076
// Say ( Khatam , D1b-Khat-4 ) else
6062: LD_EXP 41
6066: PPUSH
6067: LD_STRING D1b-Khat-4
6069: PPUSH
6070: CALL_OW 88
6074: GO 6112
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6076: LD_EXP 6
6080: PPUSH
6081: LD_INT 26
6083: PUSH
6084: LD_INT 1
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 72
6095: PUSH
6096: LD_EXP 44
6100: PUSH
6101: EMPTY
6102: LIST
6103: DIFF
6104: PPUSH
6105: LD_STRING D1b-Sol1-4
6107: PPUSH
6108: CALL 577 0 2
// if Cyrus then
6112: LD_EXP 39
6116: IFFALSE 6130
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6118: LD_EXP 39
6122: PPUSH
6123: LD_STRING D1b-Cyrus-4
6125: PPUSH
6126: CALL_OW 88
// if Lisa then
6130: LD_EXP 40
6134: IFFALSE 6192
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6136: LD_EXP 40
6140: PPUSH
6141: LD_STRING D1b-Lisa-4
6143: PPUSH
6144: CALL_OW 88
// if Cyrus then
6148: LD_EXP 39
6152: IFFALSE 6192
// begin if not IsInUnit ( Cyrus ) then
6154: LD_EXP 39
6158: PPUSH
6159: CALL_OW 310
6163: NOT
6164: IFFALSE 6180
// ComTurnUnit ( Cyrus , Lisa ) ;
6166: LD_EXP 39
6170: PPUSH
6171: LD_EXP 40
6175: PPUSH
6176: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6180: LD_EXP 39
6184: PPUSH
6185: LD_STRING D1b-Cyrus-5
6187: PPUSH
6188: CALL_OW 88
// end ; end ; SelectGroup ;
6192: CALL 2649 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6196: LD_EXP 37
6200: PPUSH
6201: LD_STRING D1d-JMM-1
6203: PPUSH
6204: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6208: LD_EXP 44
6212: PPUSH
6213: LD_STRING D1d-Corn-1
6215: PPUSH
6216: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6220: LD_ADDR_VAR 0 2
6224: PUSH
6225: LD_EXP 4
6229: PUSH
6230: LD_EXP 6
6234: ADD
6235: PUSH
6236: LD_EXP 37
6240: ADD
6241: PUSH
6242: FOR_IN
6243: IFFALSE 6256
// ComHold ( i ) ;
6245: LD_VAR 0 2
6249: PPUSH
6250: CALL_OW 140
6254: GO 6242
6256: POP
6257: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6258: LD_ADDR_VAR 0 4
6262: PUSH
6263: LD_INT 22
6265: PUSH
6266: LD_INT 1
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 21
6275: PUSH
6276: LD_INT 2
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PPUSH
6287: CALL_OW 69
6291: ST_TO_ADDR
// if vehicles then
6292: LD_VAR 0 4
6296: IFFALSE 6634
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6298: LD_EXP 6
6302: PPUSH
6303: LD_INT 55
6305: PUSH
6306: EMPTY
6307: LIST
6308: PPUSH
6309: CALL_OW 72
6313: IFFALSE 6352
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6315: LD_ADDR_VAR 0 2
6319: PUSH
6320: LD_EXP 6
6324: PPUSH
6325: LD_INT 55
6327: PUSH
6328: EMPTY
6329: LIST
6330: PPUSH
6331: CALL_OW 72
6335: PUSH
6336: FOR_IN
6337: IFFALSE 6350
// ComExitVehicle ( i ) ;
6339: LD_VAR 0 2
6343: PPUSH
6344: CALL_OW 121
6348: GO 6336
6350: POP
6351: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6352: LD_ADDR_VAR 0 5
6356: PUSH
6357: LD_VAR 0 4
6361: PPUSH
6362: LD_INT 34
6364: PUSH
6365: LD_INT 51
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PPUSH
6372: CALL_OW 72
6376: ST_TO_ADDR
// if cargos then
6377: LD_VAR 0 5
6381: IFFALSE 6564
// begin vehicles := cargos ;
6383: LD_ADDR_VAR 0 4
6387: PUSH
6388: LD_VAR 0 5
6392: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6393: LD_ADDR_VAR 0 6
6397: PUSH
6398: LD_STRING 02_resources_4
6400: PPUSH
6401: LD_INT 0
6403: PPUSH
6404: CALL_OW 30
6408: ST_TO_ADDR
// if debug and not resources then
6409: LD_EXP 1
6413: PUSH
6414: LD_VAR 0 6
6418: NOT
6419: AND
6420: IFFALSE 6430
// resources := 160 ;
6422: LD_ADDR_VAR 0 6
6426: PUSH
6427: LD_INT 160
6429: ST_TO_ADDR
// if resources mod 10 then
6430: LD_VAR 0 6
6434: PUSH
6435: LD_INT 10
6437: MOD
6438: IFFALSE 6460
// resources := resources - resources mod 10 ;
6440: LD_ADDR_VAR 0 6
6444: PUSH
6445: LD_VAR 0 6
6449: PUSH
6450: LD_VAR 0 6
6454: PUSH
6455: LD_INT 10
6457: MOD
6458: MINUS
6459: ST_TO_ADDR
// if resources then
6460: LD_VAR 0 6
6464: IFFALSE 6564
// for i in cargos do
6466: LD_ADDR_VAR 0 2
6470: PUSH
6471: LD_VAR 0 5
6475: PUSH
6476: FOR_IN
6477: IFFALSE 6562
// begin if resources < 100 then
6479: LD_VAR 0 6
6483: PUSH
6484: LD_INT 100
6486: LESS
6487: IFFALSE 6509
// begin cargo := resources ;
6489: LD_ADDR_VAR 0 7
6493: PUSH
6494: LD_VAR 0 6
6498: ST_TO_ADDR
// resources := 0 ;
6499: LD_ADDR_VAR 0 6
6503: PUSH
6504: LD_INT 0
6506: ST_TO_ADDR
// end else
6507: GO 6531
// begin cargo := 100 ;
6509: LD_ADDR_VAR 0 7
6513: PUSH
6514: LD_INT 100
6516: ST_TO_ADDR
// resources := resources - 100 ;
6517: LD_ADDR_VAR 0 6
6521: PUSH
6522: LD_VAR 0 6
6526: PUSH
6527: LD_INT 100
6529: MINUS
6530: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
6531: LD_VAR 0 2
6535: PPUSH
6536: LD_INT 1
6538: PPUSH
6539: LD_VAR 0 7
6543: PPUSH
6544: CALL_OW 290
// if resources = 0 then
6548: LD_VAR 0 6
6552: PUSH
6553: LD_INT 0
6555: EQUAL
6556: IFFALSE 6560
// break ;
6558: GO 6562
// end ;
6560: GO 6476
6562: POP
6563: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
6564: LD_VAR 0 4
6568: PUSH
6569: LD_INT 1
6571: ARRAY
6572: PPUSH
6573: CALL_OW 311
6577: PPUSH
6578: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
6582: LD_VAR 0 4
6586: PUSH
6587: LD_INT 1
6589: ARRAY
6590: PPUSH
6591: LD_INT 4
6593: PPUSH
6594: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
6598: LD_EXP 44
6602: PPUSH
6603: LD_VAR 0 4
6607: PUSH
6608: LD_INT 1
6610: ARRAY
6611: PPUSH
6612: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
6616: LD_INT 35
6618: PPUSH
6619: CALL_OW 67
// until IsInUnit ( Cornel ) ;
6623: LD_EXP 44
6627: PPUSH
6628: CALL_OW 310
6632: IFFALSE 6616
// end ; InGameOff ;
6634: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6638: LD_STRING M1
6640: PPUSH
6641: CALL_OW 337
// SaveForQuickRestart ;
6645: CALL_OW 22
// cornel_active := true ;
6649: LD_ADDR_EXP 8
6653: PUSH
6654: LD_INT 1
6656: ST_TO_ADDR
// end ;
6657: LD_VAR 0 1
6661: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
6662: LD_EXP 37
6666: PPUSH
6667: LD_EXP 47
6671: PPUSH
6672: CALL_OW 296
6676: PUSH
6677: LD_INT 10
6679: LESS
6680: IFFALSE 8063
6682: GO 6684
6684: DISABLE
6685: LD_INT 0
6687: PPUSH
6688: PPUSH
6689: PPUSH
6690: PPUSH
6691: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
6692: LD_ADDR_VAR 0 2
6696: PUSH
6697: LD_INT 89
6699: PUSH
6700: LD_INT 34
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 138
6709: PUSH
6710: LD_INT 63
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 196
6719: PUSH
6720: LD_INT 84
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: LD_INT 135
6729: PUSH
6730: LD_INT 52
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PUSH
6737: LD_INT 103
6739: PUSH
6740: LD_INT 39
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PUSH
6747: LD_INT 58
6749: PUSH
6750: LD_INT 30
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 38
6759: PUSH
6760: LD_INT 51
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: ST_TO_ADDR
// Video ( true ) ;
6776: LD_INT 1
6778: PPUSH
6779: CALL 71790 0 1
// if jmm_units then
6783: LD_EXP 4
6787: IFFALSE 6863
// for i in jmm_units do
6789: LD_ADDR_VAR 0 1
6793: PUSH
6794: LD_EXP 4
6798: PUSH
6799: FOR_IN
6800: IFFALSE 6861
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
6802: LD_VAR 0 1
6806: PPUSH
6807: LD_EXP 37
6811: PPUSH
6812: CALL_OW 296
6816: PUSH
6817: LD_INT 10
6819: LESS
6820: PUSH
6821: LD_VAR 0 1
6825: PPUSH
6826: CALL_OW 310
6830: NOT
6831: AND
6832: IFFALSE 6850
// ComTurnUnit ( i , JMM ) else
6834: LD_VAR 0 1
6838: PPUSH
6839: LD_EXP 37
6843: PPUSH
6844: CALL_OW 119
6848: GO 6859
// ComHold ( i ) ;
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 140
// end ;
6859: GO 6799
6861: POP
6862: POP
// if IsInUnit ( JMM ) then
6863: LD_EXP 37
6867: PPUSH
6868: CALL_OW 310
6872: IFFALSE 6897
// begin ComExitVehicle ( JMM ) ;
6874: LD_EXP 37
6878: PPUSH
6879: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
6883: LD_EXP 37
6887: PPUSH
6888: LD_EXP 47
6892: PPUSH
6893: CALL_OW 172
// end ; Wait ( 10 ) ;
6897: LD_INT 10
6899: PPUSH
6900: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
6904: LD_EXP 37
6908: PPUSH
6909: LD_EXP 47
6913: PPUSH
6914: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
6918: LD_INT 35
6920: PPUSH
6921: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
6925: LD_EXP 37
6929: PPUSH
6930: LD_EXP 47
6934: PPUSH
6935: CALL_OW 296
6939: PUSH
6940: LD_INT 6
6942: LESS
6943: IFFALSE 6918
// ComTurnUnit ( JMM , Lynch ) ;
6945: LD_EXP 37
6949: PPUSH
6950: LD_EXP 47
6954: PPUSH
6955: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
6959: LD_ADDR_VAR 0 1
6963: PUSH
6964: LD_EXP 47
6968: PUSH
6969: LD_EXP 48
6973: PUSH
6974: LD_EXP 49
6978: PUSH
6979: LD_EXP 50
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: PUSH
6990: FOR_IN
6991: IFFALSE 7009
// ComTurnUnit ( i , JMM ) ;
6993: LD_VAR 0 1
6997: PPUSH
6998: LD_EXP 37
7002: PPUSH
7003: CALL_OW 119
7007: GO 6990
7009: POP
7010: POP
// Wait ( 0 0$0.3 ) ;
7011: LD_INT 10
7013: PPUSH
7014: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7018: LD_EXP 37
7022: PPUSH
7023: LD_STRING D2-JMM-1
7025: PPUSH
7026: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7030: LD_EXP 47
7034: PPUSH
7035: LD_STRING D2-Sol1-1
7037: PPUSH
7038: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7042: LD_EXP 37
7046: PPUSH
7047: LD_STRING D2-JMM-2
7049: PPUSH
7050: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7054: LD_EXP 47
7058: PPUSH
7059: LD_STRING D2-Sol1-2
7061: PPUSH
7062: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7066: LD_EXP 37
7070: PPUSH
7071: LD_STRING D2-JMM-3
7073: PPUSH
7074: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7078: LD_EXP 47
7082: PPUSH
7083: LD_STRING D2-Sol1-3
7085: PPUSH
7086: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7090: LD_ADDR_VAR 0 1
7094: PUSH
7095: LD_INT 22
7097: PUSH
7098: LD_INT 8
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PPUSH
7105: CALL_OW 69
7109: PUSH
7110: FOR_IN
7111: IFFALSE 7127
// SetSide ( i , 1 ) ;
7113: LD_VAR 0 1
7117: PPUSH
7118: LD_INT 1
7120: PPUSH
7121: CALL_OW 235
7125: GO 7110
7127: POP
7128: POP
// Say ( JMM , D2-JMM-4 ) ;
7129: LD_EXP 37
7133: PPUSH
7134: LD_STRING D2-JMM-4
7136: PPUSH
7137: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7141: LD_INT 1
7143: PPUSH
7144: LD_INT 5
7146: PPUSH
7147: CALL_OW 332
// for i = 1 to points do
7151: LD_ADDR_VAR 0 1
7155: PUSH
7156: DOUBLE
7157: LD_INT 1
7159: DEC
7160: ST_TO_ADDR
7161: LD_VAR 0 2
7165: PUSH
7166: FOR_TO
7167: IFFALSE 7342
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7169: LD_VAR 0 2
7173: PUSH
7174: LD_VAR 0 1
7178: ARRAY
7179: PUSH
7180: LD_INT 1
7182: ARRAY
7183: PPUSH
7184: LD_VAR 0 2
7188: PUSH
7189: LD_VAR 0 1
7193: ARRAY
7194: PUSH
7195: LD_INT 2
7197: ARRAY
7198: PPUSH
7199: CALL_OW 84
// if i = 1 then
7203: LD_VAR 0 1
7207: PUSH
7208: LD_INT 1
7210: EQUAL
7211: IFFALSE 7225
// Say ( Lynch , D2-Sol1-4 ) ;
7213: LD_EXP 47
7217: PPUSH
7218: LD_STRING D2-Sol1-4
7220: PPUSH
7221: CALL_OW 88
// if i = 2 then
7225: LD_VAR 0 1
7229: PUSH
7230: LD_INT 2
7232: EQUAL
7233: IFFALSE 7247
// Say ( JMM , D2-JMM-5 ) ;
7235: LD_EXP 37
7239: PPUSH
7240: LD_STRING D2-JMM-5
7242: PPUSH
7243: CALL_OW 88
// if i = 4 then
7247: LD_VAR 0 1
7251: PUSH
7252: LD_INT 4
7254: EQUAL
7255: IFFALSE 7279
// begin RevealFogArea ( 1 , troopsArea ) ;
7257: LD_INT 1
7259: PPUSH
7260: LD_INT 6
7262: PPUSH
7263: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7267: LD_EXP 47
7271: PPUSH
7272: LD_STRING D2-Sol1-5
7274: PPUSH
7275: CALL_OW 88
// end ; if i = 5 then
7279: LD_VAR 0 1
7283: PUSH
7284: LD_INT 5
7286: EQUAL
7287: IFFALSE 7301
// Say ( JMM , D2-JMM-6 ) ;
7289: LD_EXP 37
7293: PPUSH
7294: LD_STRING D2-JMM-6
7296: PPUSH
7297: CALL_OW 88
// if i = 7 then
7301: LD_VAR 0 1
7305: PUSH
7306: LD_INT 7
7308: EQUAL
7309: IFFALSE 7333
// begin RevealFogArea ( 1 , forestArea ) ;
7311: LD_INT 1
7313: PPUSH
7314: LD_INT 7
7316: PPUSH
7317: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7321: LD_EXP 47
7325: PPUSH
7326: LD_STRING D2-Sol1-6
7328: PPUSH
7329: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7333: LD_INT 46
7335: PPUSH
7336: CALL_OW 67
// end ;
7340: GO 7166
7342: POP
7343: POP
// CenterNowOnUnits ( JMM ) ;
7344: LD_EXP 37
7348: PPUSH
7349: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7353: LD_EXP 37
7357: PPUSH
7358: LD_STRING D2-JMM-7
7360: PPUSH
7361: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7365: LD_EXP 47
7369: PPUSH
7370: LD_STRING D2-Sol1-7
7372: PPUSH
7373: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7377: LD_EXP 37
7381: PPUSH
7382: LD_STRING D2-JMM-8
7384: PPUSH
7385: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7389: LD_ADDR_VAR 0 4
7393: PUSH
7394: LD_INT 22
7396: PUSH
7397: LD_INT 1
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PUSH
7404: LD_INT 30
7406: PUSH
7407: LD_INT 31
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: PPUSH
7418: CALL_OW 69
7422: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7423: LD_EXP 47
7427: PPUSH
7428: LD_VAR 0 4
7432: PUSH
7433: LD_INT 1
7435: ARRAY
7436: PPUSH
7437: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7441: LD_INT 65
7443: PPUSH
7444: LD_INT 101
7446: PPUSH
7447: CALL_OW 428
7451: IFFALSE 7474
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7453: LD_INT 65
7455: PPUSH
7456: LD_INT 101
7458: PPUSH
7459: CALL_OW 428
7463: PPUSH
7464: LD_INT 75
7466: PPUSH
7467: LD_INT 100
7469: PPUSH
7470: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7474: LD_INT 66
7476: PPUSH
7477: LD_INT 103
7479: PPUSH
7480: CALL_OW 428
7484: IFFALSE 7507
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7486: LD_INT 66
7488: PPUSH
7489: LD_INT 103
7491: PPUSH
7492: CALL_OW 428
7496: PPUSH
7497: LD_INT 75
7499: PPUSH
7500: LD_INT 100
7502: PPUSH
7503: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7507: LD_ADDR_VAR 0 5
7511: PUSH
7512: LD_INT 22
7514: PUSH
7515: LD_INT 1
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: LD_INT 21
7524: PUSH
7525: LD_INT 2
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: PUSH
7532: LD_INT 91
7534: PUSH
7535: LD_EXP 37
7539: PUSH
7540: LD_INT 7
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: PPUSH
7553: CALL_OW 69
7557: ST_TO_ADDR
// if tmp then
7558: LD_VAR 0 5
7562: IFFALSE 7579
// ComMoveXY ( tmp , 75 , 100 ) ;
7564: LD_VAR 0 5
7568: PPUSH
7569: LD_INT 75
7571: PPUSH
7572: LD_INT 100
7574: PPUSH
7575: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
7579: LD_ADDR_VAR 0 3
7583: PUSH
7584: LD_EXP 4
7588: PPUSH
7589: LD_INT 25
7591: PUSH
7592: LD_INT 1
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PPUSH
7599: CALL_OW 72
7603: PPUSH
7604: LD_EXP 37
7608: PPUSH
7609: CALL_OW 74
7613: ST_TO_ADDR
// if sol then
7614: LD_VAR 0 3
7618: IFFALSE 7678
// if GetDistUnits ( JMM , sol ) < 10 then
7620: LD_EXP 37
7624: PPUSH
7625: LD_VAR 0 3
7629: PPUSH
7630: CALL_OW 296
7634: PUSH
7635: LD_INT 10
7637: LESS
7638: IFFALSE 7678
// begin if IsInUnit ( sol ) then
7640: LD_VAR 0 3
7644: PPUSH
7645: CALL_OW 310
7649: IFFALSE 7660
// ComExitVehicle ( sol ) ;
7651: LD_VAR 0 3
7655: PPUSH
7656: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
7660: LD_VAR 0 3
7664: PPUSH
7665: LD_VAR 0 4
7669: PUSH
7670: LD_INT 2
7672: ARRAY
7673: PPUSH
7674: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
7678: LD_INT 10
7680: PPUSH
7681: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
7685: LD_EXP 37
7689: PPUSH
7690: LD_INT 65
7692: PPUSH
7693: LD_INT 101
7695: PPUSH
7696: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
7700: LD_EXP 37
7704: PPUSH
7705: LD_INT 63
7707: PPUSH
7708: LD_INT 100
7710: PPUSH
7711: CALL_OW 178
// tmp := 0 0$0 ;
7715: LD_ADDR_VAR 0 5
7719: PUSH
7720: LD_INT 0
7722: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7723: LD_INT 35
7725: PPUSH
7726: CALL_OW 67
// tmp := tmp + 0 0$1 ;
7730: LD_ADDR_VAR 0 5
7734: PUSH
7735: LD_VAR 0 5
7739: PUSH
7740: LD_INT 35
7742: PLUS
7743: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
7744: LD_EXP 37
7748: PPUSH
7749: LD_INT 65
7751: PPUSH
7752: LD_INT 101
7754: PPUSH
7755: CALL_OW 307
7759: PUSH
7760: LD_VAR 0 5
7764: PUSH
7765: LD_INT 175
7767: GREATER
7768: OR
7769: IFFALSE 7723
// Say ( JMM , D2a-JMM-1 ) ;
7771: LD_EXP 37
7775: PPUSH
7776: LD_STRING D2a-JMM-1
7778: PPUSH
7779: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
7783: LD_EXP 48
7787: PPUSH
7788: LD_INT 66
7790: PPUSH
7791: LD_INT 103
7793: PPUSH
7794: CALL_OW 111
// tmp := 0 0$0 ;
7798: LD_ADDR_VAR 0 5
7802: PUSH
7803: LD_INT 0
7805: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7806: LD_INT 35
7808: PPUSH
7809: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
7813: LD_EXP 48
7817: PPUSH
7818: LD_INT 66
7820: PPUSH
7821: LD_INT 103
7823: PPUSH
7824: CALL_OW 307
7828: PUSH
7829: LD_VAR 0 5
7833: PUSH
7834: LD_INT 175
7836: GREATER
7837: OR
7838: IFFALSE 7806
// ComTurnUnit ( Walker , JMM ) ;
7840: LD_EXP 48
7844: PPUSH
7845: LD_EXP 37
7849: PPUSH
7850: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
7854: LD_EXP 48
7858: PPUSH
7859: LD_STRING D2a-Sci1-1
7861: PPUSH
7862: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
7866: LD_EXP 37
7870: PPUSH
7871: LD_EXP 48
7875: PPUSH
7876: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
7880: LD_EXP 37
7884: PPUSH
7885: LD_STRING D2a-JMM-2
7887: PPUSH
7888: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
7892: LD_EXP 48
7896: PPUSH
7897: LD_STRING D2a-Sci1-2
7899: PPUSH
7900: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
7904: LD_EXP 37
7908: PPUSH
7909: LD_STRING D2a-JMM-3
7911: PPUSH
7912: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
7916: LD_EXP 48
7920: PPUSH
7921: LD_STRING D2a-Sci1-3
7923: PPUSH
7924: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
7928: LD_ADDR_EXP 4
7932: PUSH
7933: LD_EXP 4
7937: PUSH
7938: LD_EXP 47
7942: PUSH
7943: LD_EXP 48
7947: PUSH
7948: LD_EXP 49
7952: PUSH
7953: LD_EXP 50
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: ADD
7964: ST_TO_ADDR
// for i in jmm_units do
7965: LD_ADDR_VAR 0 1
7969: PUSH
7970: LD_EXP 4
7974: PUSH
7975: FOR_IN
7976: IFFALSE 8001
// if not IsInUnit ( i ) then
7978: LD_VAR 0 1
7982: PPUSH
7983: CALL_OW 310
7987: NOT
7988: IFFALSE 7999
// ComFree ( i ) ;
7990: LD_VAR 0 1
7994: PPUSH
7995: CALL_OW 139
7999: GO 7975
8001: POP
8002: POP
// Video ( false ) ;
8003: LD_INT 0
8005: PPUSH
8006: CALL 71790 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8010: LD_STRING MSolar1
8012: PPUSH
8013: CALL_OW 337
// jmm_on_west := true ;
8017: LD_ADDR_EXP 5
8021: PUSH
8022: LD_INT 1
8024: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8025: LD_INT 1050
8027: PPUSH
8028: CALL_OW 67
// frank_can_return := true ;
8032: LD_ADDR_EXP 12
8036: PUSH
8037: LD_INT 1
8039: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8040: LD_INT 6300
8042: PPUSH
8043: LD_INT 8400
8045: PPUSH
8046: CALL_OW 12
8050: PPUSH
8051: CALL_OW 67
// send_spec_patrol := true ;
8055: LD_ADDR_EXP 30
8059: PUSH
8060: LD_INT 1
8062: ST_TO_ADDR
// end ;
8063: PPOPN 5
8065: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8066: LD_INT 22
8068: PUSH
8069: LD_INT 1
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: PUSH
8076: LD_INT 34
8078: PUSH
8079: LD_INT 51
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 92
8088: PUSH
8089: LD_INT 63
8091: PUSH
8092: LD_INT 100
8094: PUSH
8095: LD_INT 5
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: PPUSH
8112: CALL_OW 69
8116: PUSH
8117: LD_EXP 5
8121: NOT
8122: AND
8123: IFFALSE 8236
8125: GO 8127
8127: DISABLE
8128: LD_INT 0
8130: PPUSH
8131: PPUSH
// begin enable ;
8132: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8133: LD_ADDR_VAR 0 2
8137: PUSH
8138: LD_INT 22
8140: PUSH
8141: LD_INT 1
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: LD_INT 34
8150: PUSH
8151: LD_INT 51
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 92
8160: PUSH
8161: LD_INT 63
8163: PUSH
8164: LD_INT 100
8166: PUSH
8167: LD_INT 5
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: LIST
8180: PUSH
8181: EMPTY
8182: LIST
8183: PPUSH
8184: CALL_OW 69
8188: ST_TO_ADDR
// if not filter then
8189: LD_VAR 0 2
8193: NOT
8194: IFFALSE 8198
// exit ;
8196: GO 8236
// for i in filter do
8198: LD_ADDR_VAR 0 1
8202: PUSH
8203: LD_VAR 0 2
8207: PUSH
8208: FOR_IN
8209: IFFALSE 8234
// begin SetFuel ( i , 0 ) ;
8211: LD_VAR 0 1
8215: PPUSH
8216: LD_INT 0
8218: PPUSH
8219: CALL_OW 240
// ComStop ( i ) ;
8223: LD_VAR 0 1
8227: PPUSH
8228: CALL_OW 141
// end ;
8232: GO 8208
8234: POP
8235: POP
// end ;
8236: PPOPN 2
8238: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8239: LD_EXP 30
8243: IFFALSE 9340
8245: GO 8247
8247: DISABLE
8248: LD_INT 0
8250: PPUSH
8251: PPUSH
8252: PPUSH
8253: PPUSH
8254: PPUSH
8255: PPUSH
8256: PPUSH
// begin if not ru_spec_patrol then
8257: LD_EXP 54
8261: NOT
8262: IFFALSE 8266
// exit ;
8264: GO 9340
// dead1 := false ;
8266: LD_ADDR_VAR 0 1
8270: PUSH
8271: LD_INT 0
8273: ST_TO_ADDR
// dead2 := false ;
8274: LD_ADDR_VAR 0 2
8278: PUSH
8279: LD_INT 0
8281: ST_TO_ADDR
// inarea1 := false ;
8282: LD_ADDR_VAR 0 3
8286: PUSH
8287: LD_INT 0
8289: ST_TO_ADDR
// inarea2 := false ;
8290: LD_ADDR_VAR 0 4
8294: PUSH
8295: LD_INT 0
8297: ST_TO_ADDR
// tmp := [ ] ;
8298: LD_ADDR_VAR 0 6
8302: PUSH
8303: EMPTY
8304: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8305: LD_EXP 54
8309: PPUSH
8310: LD_INT 75
8312: PPUSH
8313: LD_INT 101
8315: PPUSH
8316: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8320: LD_INT 35
8322: PPUSH
8323: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) ;
8327: LD_INT 1
8329: PPUSH
8330: LD_EXP 54
8334: PUSH
8335: LD_INT 1
8337: ARRAY
8338: PPUSH
8339: CALL_OW 292
8343: IFFALSE 8320
// ComStop ( ru_spec_patrol ) ;
8345: LD_EXP 54
8349: PPUSH
8350: CALL_OW 141
// Wait ( 0 0$02 ) ;
8354: LD_INT 70
8356: PPUSH
8357: CALL_OW 67
// DialogueOn ;
8361: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8365: LD_EXP 54
8369: PUSH
8370: LD_INT 1
8372: ARRAY
8373: PPUSH
8374: LD_STRING D8-Rus1-1
8376: PPUSH
8377: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8381: LD_EXP 37
8385: PPUSH
8386: LD_STRING D8-JMM-1
8388: PPUSH
8389: CALL_OW 88
// DialogueOff ;
8393: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8397: LD_EXP 54
8401: PPUSH
8402: LD_INT 13
8404: PPUSH
8405: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8409: LD_INT 35
8411: PPUSH
8412: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8416: LD_VAR 0 1
8420: NOT
8421: PUSH
8422: LD_EXP 54
8426: PUSH
8427: LD_INT 1
8429: ARRAY
8430: PPUSH
8431: CALL_OW 301
8435: AND
8436: IFFALSE 8446
// dead1 := true ;
8438: LD_ADDR_VAR 0 1
8442: PUSH
8443: LD_INT 1
8445: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8446: LD_VAR 0 2
8450: NOT
8451: PUSH
8452: LD_EXP 54
8456: PUSH
8457: LD_INT 2
8459: ARRAY
8460: PPUSH
8461: CALL_OW 301
8465: AND
8466: IFFALSE 8476
// dead2 := true ;
8468: LD_ADDR_VAR 0 2
8472: PUSH
8473: LD_INT 1
8475: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8476: LD_VAR 0 3
8480: NOT
8481: PUSH
8482: LD_EXP 54
8486: PUSH
8487: LD_INT 1
8489: ARRAY
8490: PPUSH
8491: LD_INT 14
8493: PPUSH
8494: CALL_OW 308
8498: AND
8499: IFFALSE 8509
// inarea1 := true ;
8501: LD_ADDR_VAR 0 3
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
8509: LD_VAR 0 4
8513: NOT
8514: PUSH
8515: LD_EXP 54
8519: PUSH
8520: LD_INT 2
8522: ARRAY
8523: PPUSH
8524: LD_INT 14
8526: PPUSH
8527: CALL_OW 308
8531: AND
8532: IFFALSE 8542
// inarea2 := true ;
8534: LD_ADDR_VAR 0 4
8538: PUSH
8539: LD_INT 1
8541: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
8542: LD_VAR 0 1
8546: PUSH
8547: LD_VAR 0 2
8551: AND
8552: PUSH
8553: LD_VAR 0 1
8557: PUSH
8558: LD_VAR 0 4
8562: AND
8563: OR
8564: PUSH
8565: LD_VAR 0 2
8569: PUSH
8570: LD_VAR 0 3
8574: AND
8575: OR
8576: PUSH
8577: LD_VAR 0 3
8581: PUSH
8582: LD_VAR 0 4
8586: AND
8587: OR
8588: IFFALSE 8409
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
8590: LD_VAR 0 3
8594: PUSH
8595: LD_VAR 0 4
8599: AND
8600: PUSH
8601: LD_VAR 0 1
8605: PUSH
8606: LD_VAR 0 4
8610: AND
8611: OR
8612: PUSH
8613: LD_VAR 0 2
8617: PUSH
8618: LD_VAR 0 3
8622: AND
8623: OR
8624: IFFALSE 9320
// begin prepare_siege := true ;
8626: LD_ADDR_EXP 31
8630: PUSH
8631: LD_INT 1
8633: ST_TO_ADDR
// DialogueOn ;
8634: CALL_OW 6
// if ( inarea1 and inarea2 ) then
8638: LD_VAR 0 3
8642: PUSH
8643: LD_VAR 0 4
8647: AND
8648: IFFALSE 8664
// Say ( JMM , D8b-JMM-1a ) else
8650: LD_EXP 37
8654: PPUSH
8655: LD_STRING D8b-JMM-1a
8657: PPUSH
8658: CALL_OW 88
8662: GO 8676
// Say ( JMM , D8b-JMM-1 ) ;
8664: LD_EXP 37
8668: PPUSH
8669: LD_STRING D8b-JMM-1
8671: PPUSH
8672: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
8676: LD_EXP 4
8680: PPUSH
8681: LD_INT 26
8683: PUSH
8684: LD_INT 1
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PPUSH
8691: CALL_OW 72
8695: PUSH
8696: LD_EXP 38
8700: PUSH
8701: LD_EXP 39
8705: PUSH
8706: LD_EXP 48
8710: PUSH
8711: LD_EXP 51
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: DIFF
8722: PPUSH
8723: LD_STRING D8b-Sol1-1
8725: PPUSH
8726: CALL 577 0 2
// if Cyrus and Cyrus in jmm_units then
8730: LD_EXP 39
8734: PUSH
8735: LD_EXP 39
8739: PUSH
8740: LD_EXP 4
8744: IN
8745: AND
8746: IFFALSE 8762
// Say ( Cyrus , D8b-Cyrus-1 ) else
8748: LD_EXP 39
8752: PPUSH
8753: LD_STRING D8b-Cyrus-1
8755: PPUSH
8756: CALL_OW 88
8760: GO 8774
// Say ( JMM , D8b-JMM-1a ) ;
8762: LD_EXP 37
8766: PPUSH
8767: LD_STRING D8b-JMM-1a
8769: PPUSH
8770: CALL_OW 88
// if Lisa and Lisa in jmm_units then
8774: LD_EXP 40
8778: PUSH
8779: LD_EXP 40
8783: PUSH
8784: LD_EXP 4
8788: IN
8789: AND
8790: IFFALSE 8804
// Say ( Lisa , D8b-Lisa-2 ) ;
8792: LD_EXP 40
8796: PPUSH
8797: LD_STRING D8b-Lisa-2
8799: PPUSH
8800: CALL_OW 88
// if Bobby and Bobby in jmm_units then
8804: LD_EXP 38
8808: PUSH
8809: LD_EXP 38
8813: PUSH
8814: LD_EXP 4
8818: IN
8819: AND
8820: IFFALSE 8836
// Say ( Bobby , D8b-Bobby-1 ) else
8822: LD_EXP 38
8826: PPUSH
8827: LD_STRING D8b-Bobby-1
8829: PPUSH
8830: CALL_OW 88
8834: GO 8896
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
8836: LD_ADDR_VAR 0 5
8840: PUSH
8841: LD_EXP 4
8845: PPUSH
8846: LD_INT 26
8848: PUSH
8849: LD_INT 1
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PPUSH
8856: CALL_OW 72
8860: PUSH
8861: LD_EXP 38
8865: PUSH
8866: LD_EXP 39
8870: PUSH
8871: LD_EXP 48
8875: PUSH
8876: LD_EXP 51
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: DIFF
8887: PPUSH
8888: LD_STRING D8b-Sol2-1
8890: PPUSH
8891: CALL 577 0 2
8895: ST_TO_ADDR
// DialogueOff ;
8896: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
8900: LD_EXP 39
8904: PUSH
8905: LD_EXP 39
8909: PUSH
8910: LD_EXP 4
8914: IN
8915: AND
8916: IFFALSE 8941
// tmp := Insert ( tmp , 1 , Cyrus ) ;
8918: LD_ADDR_VAR 0 6
8922: PUSH
8923: LD_VAR 0 6
8927: PPUSH
8928: LD_INT 1
8930: PPUSH
8931: LD_EXP 39
8935: PPUSH
8936: CALL_OW 2
8940: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
8941: LD_EXP 38
8945: PUSH
8946: LD_EXP 38
8950: PUSH
8951: LD_EXP 4
8955: IN
8956: AND
8957: IFFALSE 8982
// tmp := Insert ( tmp , 1 , Bobby ) ;
8959: LD_ADDR_VAR 0 6
8963: PUSH
8964: LD_VAR 0 6
8968: PPUSH
8969: LD_INT 1
8971: PPUSH
8972: LD_EXP 38
8976: PPUSH
8977: CALL_OW 2
8981: ST_TO_ADDR
// if sol then
8982: LD_VAR 0 5
8986: IFFALSE 9011
// tmp := Insert ( tmp , 1 , sol ) ;
8988: LD_ADDR_VAR 0 6
8992: PUSH
8993: LD_VAR 0 6
8997: PPUSH
8998: LD_INT 1
9000: PPUSH
9001: LD_VAR 0 5
9005: PPUSH
9006: CALL_OW 2
9010: ST_TO_ADDR
// if tmp then
9011: LD_VAR 0 6
9015: IFFALSE 9279
// begin SetSide ( tmp , 8 ) ;
9017: LD_VAR 0 6
9021: PPUSH
9022: LD_INT 8
9024: PPUSH
9025: CALL_OW 235
// for i in tmp do
9029: LD_ADDR_VAR 0 7
9033: PUSH
9034: LD_VAR 0 6
9038: PUSH
9039: FOR_IN
9040: IFFALSE 9131
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9042: LD_VAR 0 7
9046: PPUSH
9047: CALL_OW 310
9051: PUSH
9052: LD_VAR 0 7
9056: PPUSH
9057: CALL_OW 310
9061: PPUSH
9062: CALL_OW 266
9066: PUSH
9067: LD_INT 3
9069: EQUAL
9070: AND
9071: IFFALSE 9082
// ComExitBuilding ( i ) ;
9073: LD_VAR 0 7
9077: PPUSH
9078: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9082: LD_VAR 0 7
9086: PPUSH
9087: CALL_OW 310
9091: PUSH
9092: LD_VAR 0 7
9096: PPUSH
9097: CALL_OW 310
9101: PPUSH
9102: CALL_OW 266
9106: PUSH
9107: LD_INT 2
9109: EQUAL
9110: AND
9111: IFFALSE 9122
// ComExitVehicle ( i ) ;
9113: LD_VAR 0 7
9117: PPUSH
9118: CALL_OW 121
// wait ( 0 0$1 ) ;
9122: LD_INT 35
9124: PPUSH
9125: CALL_OW 67
// end ;
9129: GO 9039
9131: POP
9132: POP
// ComFree ( tmp ) ;
9133: LD_VAR 0 6
9137: PPUSH
9138: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9142: LD_VAR 0 6
9146: PPUSH
9147: LD_INT 15
9149: PPUSH
9150: CALL_OW 173
// AddComHold ( tmp ) ;
9154: LD_VAR 0 6
9158: PPUSH
9159: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9163: LD_INT 35
9165: PPUSH
9166: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9170: LD_VAR 0 6
9174: PUSH
9175: LD_INT 1
9177: ARRAY
9178: PPUSH
9179: CALL_OW 314
9183: NOT
9184: IFFALSE 9198
// ComMoveToArea ( tmp , cyrusEscape ) ;
9186: LD_VAR 0 6
9190: PPUSH
9191: LD_INT 15
9193: PPUSH
9194: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9198: LD_VAR 0 6
9202: PUSH
9203: LD_INT 1
9205: ARRAY
9206: PPUSH
9207: LD_INT 15
9209: PPUSH
9210: CALL_OW 308
9214: IFFALSE 9269
// begin RemoveUnit ( tmp [ 1 ] ) ;
9216: LD_VAR 0 6
9220: PUSH
9221: LD_INT 1
9223: ARRAY
9224: PPUSH
9225: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9229: LD_ADDR_EXP 4
9233: PUSH
9234: LD_EXP 4
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_INT 1
9246: ARRAY
9247: DIFF
9248: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9249: LD_ADDR_VAR 0 6
9253: PUSH
9254: LD_VAR 0 6
9258: PUSH
9259: LD_VAR 0 6
9263: PUSH
9264: LD_INT 1
9266: ARRAY
9267: DIFF
9268: ST_TO_ADDR
// end ; until tmp = 0 ;
9269: LD_VAR 0 6
9273: PUSH
9274: LD_INT 0
9276: EQUAL
9277: IFFALSE 9163
// end ; wait ( 0 0$30 ) ;
9279: LD_INT 1050
9281: PPUSH
9282: CALL_OW 67
// if ru_spec_patrol then
9286: LD_EXP 54
9290: IFFALSE 9318
// for i in ru_spec_patrol do
9292: LD_ADDR_VAR 0 7
9296: PUSH
9297: LD_EXP 54
9301: PUSH
9302: FOR_IN
9303: IFFALSE 9316
// RemoveUnit ( i ) ;
9305: LD_VAR 0 7
9309: PPUSH
9310: CALL_OW 64
9314: GO 9302
9316: POP
9317: POP
// end else
9318: GO 9340
// begin prepare_siege := false ;
9320: LD_ADDR_EXP 31
9324: PUSH
9325: LD_INT 0
9327: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9328: LD_EXP 37
9332: PPUSH
9333: LD_STRING D8a-JMM-1
9335: PPUSH
9336: CALL_OW 88
// end ; end ;
9340: PPOPN 7
9342: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9343: LD_EXP 12
9347: IFFALSE 10567
9349: GO 9351
9351: DISABLE
9352: LD_INT 0
9354: PPUSH
9355: PPUSH
9356: PPUSH
// begin uc_side := 8 ;
9357: LD_ADDR_OWVAR 20
9361: PUSH
9362: LD_INT 8
9364: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9365: LD_ADDR_VAR 0 3
9369: PUSH
9370: LD_INT 59
9372: PUSH
9373: LD_INT 71
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PUSH
9380: LD_INT 122
9382: PUSH
9383: LD_INT 117
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9394: LD_ADDR_EXP 51
9398: PUSH
9399: LD_STRING Frank
9401: PPUSH
9402: LD_INT 0
9404: PPUSH
9405: LD_STRING 
9407: PPUSH
9408: CALL 35829 0 3
9412: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9413: LD_ADDR_VAR 0 1
9417: PUSH
9418: LD_INT 1
9420: PPUSH
9421: LD_INT 2
9423: PPUSH
9424: CALL_OW 12
9428: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9429: LD_EXP 51
9433: PPUSH
9434: LD_VAR 0 3
9438: PUSH
9439: LD_VAR 0 1
9443: ARRAY
9444: PUSH
9445: LD_INT 1
9447: ARRAY
9448: PPUSH
9449: LD_VAR 0 3
9453: PUSH
9454: LD_VAR 0 1
9458: ARRAY
9459: PUSH
9460: LD_INT 2
9462: ARRAY
9463: PPUSH
9464: LD_INT 0
9466: PPUSH
9467: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9471: LD_EXP 51
9475: PPUSH
9476: LD_INT 1
9478: PPUSH
9479: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9483: LD_INT 35
9485: PPUSH
9486: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9490: LD_EXP 51
9494: PPUSH
9495: LD_EXP 37
9499: PPUSH
9500: CALL_OW 296
9504: PUSH
9505: LD_INT 8
9507: LESS
9508: PUSH
9509: LD_EXP 51
9513: PPUSH
9514: CALL_OW 256
9518: PUSH
9519: LD_INT 250
9521: GREATER
9522: AND
9523: IFFALSE 9483
// Video ( true ) ;
9525: LD_INT 1
9527: PPUSH
9528: CALL 71790 0 1
// CenterOnUnits ( JMM ) ;
9532: LD_EXP 37
9536: PPUSH
9537: CALL_OW 85
// if IsInUnit ( JMM ) then
9541: LD_EXP 37
9545: PPUSH
9546: CALL_OW 310
9550: IFFALSE 9561
// ComFree ( JMM ) ;
9552: LD_EXP 37
9556: PPUSH
9557: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
9561: LD_EXP 37
9565: PPUSH
9566: LD_EXP 51
9570: PPUSH
9571: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
9575: LD_EXP 51
9579: PPUSH
9580: LD_EXP 37
9584: PPUSH
9585: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
9589: LD_EXP 37
9593: PPUSH
9594: LD_STRING D6-JMM-1
9596: PPUSH
9597: CALL_OW 88
// p := 0 ;
9601: LD_ADDR_VAR 0 2
9605: PUSH
9606: LD_INT 0
9608: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9609: LD_INT 35
9611: PPUSH
9612: CALL_OW 67
// p := p + 1 ;
9616: LD_ADDR_VAR 0 2
9620: PUSH
9621: LD_VAR 0 2
9625: PUSH
9626: LD_INT 1
9628: PLUS
9629: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
9630: LD_EXP 37
9634: PPUSH
9635: LD_EXP 51
9639: PPUSH
9640: CALL_OW 296
9644: PUSH
9645: LD_INT 8
9647: LESS
9648: PUSH
9649: LD_VAR 0 2
9653: PUSH
9654: LD_INT 7
9656: GREATER
9657: OR
9658: IFFALSE 9609
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 then
9660: LD_EXP 40
9664: PUSH
9665: LD_EXP 40
9669: PPUSH
9670: LD_EXP 51
9674: PPUSH
9675: CALL_OW 296
9679: PUSH
9680: LD_INT 20
9682: LESS
9683: AND
9684: IFFALSE 9709
// begin ComFree ( Lisa ) ;
9686: LD_EXP 40
9690: PPUSH
9691: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
9695: LD_EXP 40
9699: PPUSH
9700: LD_EXP 51
9704: PPUSH
9705: CALL_OW 172
// end ; if Lynch then
9709: LD_EXP 47
9713: IFFALSE 9738
// begin ComFree ( Lynch ) ;
9715: LD_EXP 47
9719: PPUSH
9720: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
9724: LD_EXP 47
9728: PPUSH
9729: LD_EXP 51
9733: PPUSH
9734: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
9738: LD_EXP 37
9742: PPUSH
9743: LD_EXP 51
9747: PPUSH
9748: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
9752: LD_EXP 51
9756: PPUSH
9757: LD_EXP 37
9761: PPUSH
9762: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
9766: LD_EXP 51
9770: PPUSH
9771: LD_STRING D6-Frank-1
9773: PPUSH
9774: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
9778: LD_INT 69
9780: PPUSH
9781: LD_INT 20
9783: PPUSH
9784: LD_INT 1
9786: PPUSH
9787: LD_INT 20
9789: NEG
9790: PPUSH
9791: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
9795: LD_INT 69
9797: PPUSH
9798: LD_INT 20
9800: PPUSH
9801: LD_INT 1
9803: PPUSH
9804: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
9808: LD_INT 190
9810: PPUSH
9811: LD_INT 31
9813: PPUSH
9814: LD_INT 1
9816: PPUSH
9817: LD_INT 20
9819: NEG
9820: PPUSH
9821: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
9825: LD_INT 190
9827: PPUSH
9828: LD_INT 31
9830: PPUSH
9831: LD_INT 1
9833: PPUSH
9834: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
9838: LD_INT 69
9840: PPUSH
9841: LD_INT 20
9843: PPUSH
9844: CALL_OW 84
// Wait ( 0 0$02 ) ;
9848: LD_INT 70
9850: PPUSH
9851: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
9855: LD_EXP 37
9859: PPUSH
9860: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) then
9864: LD_EXP 40
9868: PUSH
9869: LD_EXP 40
9873: PPUSH
9874: LD_EXP 51
9878: PPUSH
9879: CALL_OW 296
9883: PUSH
9884: LD_INT 20
9886: LESS
9887: AND
9888: PUSH
9889: LD_EXP 40
9893: PPUSH
9894: CALL_OW 302
9898: AND
9899: IFFALSE 10021
// begin ComFree ( Lisa ) ;
9901: LD_EXP 40
9905: PPUSH
9906: CALL_OW 139
// p := 0 ;
9910: LD_ADDR_VAR 0 2
9914: PUSH
9915: LD_INT 0
9917: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9918: LD_INT 35
9920: PPUSH
9921: CALL_OW 67
// p := p + 1 ;
9925: LD_ADDR_VAR 0 2
9929: PUSH
9930: LD_VAR 0 2
9934: PUSH
9935: LD_INT 1
9937: PLUS
9938: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
9939: LD_EXP 40
9943: PPUSH
9944: LD_EXP 51
9948: PPUSH
9949: CALL_OW 296
9953: PUSH
9954: LD_INT 7
9956: LESS
9957: PUSH
9958: LD_VAR 0 2
9962: PUSH
9963: LD_INT 7
9965: GREATER
9966: OR
9967: IFFALSE 9918
// Say ( Lisa , D6-Lisa-1 ) ;
9969: LD_EXP 40
9973: PPUSH
9974: LD_STRING D6-Lisa-1
9976: PPUSH
9977: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
9981: LD_EXP 40
9985: PPUSH
9986: LD_EXP 51
9990: PPUSH
9991: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
9995: LD_EXP 51
9999: PPUSH
10000: LD_EXP 40
10004: PPUSH
10005: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10009: LD_EXP 51
10013: PPUSH
10014: LD_STRING D6-Frank-2
10016: PPUSH
10017: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10021: LD_EXP 47
10025: PUSH
10026: LD_EXP 47
10030: PPUSH
10031: LD_EXP 51
10035: PPUSH
10036: CALL_OW 296
10040: PUSH
10041: LD_INT 20
10043: LESS
10044: AND
10045: PUSH
10046: LD_EXP 47
10050: PPUSH
10051: CALL_OW 302
10055: AND
10056: IFFALSE 10237
// begin ComTurnUnit ( Lynch , JMM ) ;
10058: LD_EXP 47
10062: PPUSH
10063: LD_EXP 37
10067: PPUSH
10068: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10072: LD_EXP 51
10076: PPUSH
10077: LD_EXP 37
10081: PPUSH
10082: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10086: LD_EXP 47
10090: PPUSH
10091: LD_STRING D6-Sol1-2
10093: PPUSH
10094: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10098: LD_EXP 37
10102: PPUSH
10103: LD_STRING D6-JMM-2
10105: PPUSH
10106: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10110: LD_EXP 51
10114: PPUSH
10115: LD_STRING D6-Frank-3
10117: PPUSH
10118: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10122: LD_EXP 37
10126: PPUSH
10127: LD_STRING D6-JMM-3
10129: PPUSH
10130: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10134: LD_EXP 51
10138: PPUSH
10139: LD_STRING D6-Frank-4
10141: PPUSH
10142: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10146: LD_EXP 51
10150: PPUSH
10151: LD_STRING D6-Frank-4a
10153: PPUSH
10154: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10158: LD_EXP 37
10162: PPUSH
10163: LD_STRING D6-JMM-4
10165: PPUSH
10166: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10170: LD_EXP 51
10174: PPUSH
10175: LD_STRING D6-Frank-5
10177: PPUSH
10178: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10182: LD_EXP 40
10186: PUSH
10187: LD_EXP 40
10191: PPUSH
10192: CALL_OW 302
10196: AND
10197: IFFALSE 10211
// Say ( Lisa , D6-Lisa-5 ) ;
10199: LD_EXP 40
10203: PPUSH
10204: LD_STRING D6-Lisa-5
10206: PPUSH
10207: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10211: LD_EXP 51
10215: PPUSH
10216: LD_STRING D6-Frank-6
10218: PPUSH
10219: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10223: LD_EXP 37
10227: PPUSH
10228: LD_STRING D6-JMM-6
10230: PPUSH
10231: CALL_OW 88
// end else
10235: GO 10352
// begin ComTurnUnit ( Frank , JMM ) ;
10237: LD_EXP 51
10241: PPUSH
10242: LD_EXP 37
10246: PPUSH
10247: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10251: LD_EXP 51
10255: PPUSH
10256: LD_STRING D6-Frank-4
10258: PPUSH
10259: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10263: LD_EXP 51
10267: PPUSH
10268: LD_STRING D6-Frank-4a
10270: PPUSH
10271: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10275: LD_EXP 37
10279: PPUSH
10280: LD_STRING D6-JMM-4
10282: PPUSH
10283: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10287: LD_EXP 51
10291: PPUSH
10292: LD_STRING D6-Frank-5
10294: PPUSH
10295: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10299: LD_EXP 40
10303: PUSH
10304: LD_EXP 40
10308: PPUSH
10309: CALL_OW 302
10313: AND
10314: IFFALSE 10328
// Say ( Lisa , D6-Lisa-5 ) ;
10316: LD_EXP 40
10320: PPUSH
10321: LD_STRING D6-Lisa-5
10323: PPUSH
10324: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10328: LD_EXP 51
10332: PPUSH
10333: LD_STRING D6-Frank-6
10335: PPUSH
10336: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10340: LD_EXP 37
10344: PPUSH
10345: LD_STRING D6-JMM-6
10347: PPUSH
10348: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10352: LD_STRING Q1
10354: PPUSH
10355: CALL_OW 97
10359: PUSH
10360: LD_INT 1
10362: DOUBLE
10363: EQUAL
10364: IFTRUE 10368
10366: GO 10379
10368: POP
// frank_send_to_scout := true ; 2 :
10369: LD_ADDR_EXP 15
10373: PUSH
10374: LD_INT 1
10376: ST_TO_ADDR
10377: GO 10399
10379: LD_INT 2
10381: DOUBLE
10382: EQUAL
10383: IFTRUE 10387
10385: GO 10398
10387: POP
// frank_send_to_scout := false ; end ;
10388: LD_ADDR_EXP 15
10392: PUSH
10393: LD_INT 0
10395: ST_TO_ADDR
10396: GO 10399
10398: POP
// Video ( false ) ;
10399: LD_INT 0
10401: PPUSH
10402: CALL 71790 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10406: LD_EXP 37
10410: PUSH
10411: LD_EXP 40
10415: PUSH
10416: LD_EXP 47
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 139
// if frank_send_to_scout then
10430: LD_EXP 15
10434: IFFALSE 10488
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10436: LD_EXP 51
10440: PPUSH
10441: LD_INT 15
10443: PPUSH
10444: CALL_OW 113
// wait ( 0 0$01 ) ;
10448: LD_INT 35
10450: PPUSH
10451: CALL_OW 67
// until not See ( 1 , Frank ) ;
10455: LD_INT 1
10457: PPUSH
10458: LD_EXP 51
10462: PPUSH
10463: CALL_OW 292
10467: NOT
10468: IFFALSE 10436
// wait ( 0 0$02 ) ;
10470: LD_INT 70
10472: PPUSH
10473: CALL_OW 67
// RemoveUnit ( Frank ) ;
10477: LD_EXP 51
10481: PPUSH
10482: CALL_OW 64
// end else
10486: GO 10500
// SetSide ( Frank , 1 ) ;
10488: LD_EXP 51
10492: PPUSH
10493: LD_INT 1
10495: PPUSH
10496: CALL_OW 235
// send_attack_on_cornel_base := true ;
10500: LD_ADDR_EXP 26
10504: PUSH
10505: LD_INT 1
10507: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10508: LD_INT 35
10510: PPUSH
10511: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
10515: LD_ADDR_EXP 29
10519: PUSH
10520: LD_EXP 29
10524: PPUSH
10525: LD_STRING -
10527: PPUSH
10528: CALL 1069 0 2
10532: ST_TO_ADDR
// if debug then
10533: LD_EXP 1
10537: IFFALSE 10549
// debug_strings := time_to_prepare ;
10539: LD_ADDR_OWVAR 48
10543: PUSH
10544: LD_EXP 29
10548: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
10549: LD_EXP 29
10553: PUSH
10554: LD_INT 0
10556: EQUAL
10557: IFFALSE 10508
// cornel_prepared := true ;
10559: LD_ADDR_EXP 11
10563: PUSH
10564: LD_INT 1
10566: ST_TO_ADDR
// end ;
10567: PPOPN 3
10569: END
// every 0 0$01 trigger cornel_prepared do
10570: LD_EXP 11
10574: IFFALSE 10882
10576: GO 10578
10578: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
10579: LD_EXP 44
10583: PPUSH
10584: LD_STRING D3-Corn-1
10586: PPUSH
10587: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
10591: LD_STRING MOutWait
10593: PPUSH
10594: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
10598: LD_INT 35
10600: PPUSH
10601: CALL_OW 67
// until cornel_counter = 0 ;
10605: LD_EXP 10
10609: PUSH
10610: LD_INT 0
10612: EQUAL
10613: IFFALSE 10598
// SayRadio ( Cornel , D3a-Corn-1 ) ;
10615: LD_EXP 44
10619: PPUSH
10620: LD_STRING D3a-Corn-1
10622: PPUSH
10623: CALL_OW 94
// if IsOk ( Cornel ) then
10627: LD_EXP 44
10631: PPUSH
10632: CALL_OW 302
10636: IFFALSE 10650
// Say ( JMM , D3a-JMM-1 ) ;
10638: LD_EXP 37
10642: PPUSH
10643: LD_STRING D3a-JMM-1
10645: PPUSH
10646: CALL_OW 88
// end_mission_allowed := true ;
10650: LD_ADDR_EXP 21
10654: PUSH
10655: LD_INT 1
10657: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
10658: LD_STRING M2
10660: PPUSH
10661: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
10665: LD_INT 9
10667: PPUSH
10668: LD_INT 1
10670: PPUSH
10671: CALL_OW 424
// Wait ( 0 0$05 ) ;
10675: LD_INT 175
10677: PPUSH
10678: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
10682: LD_EXP 44
10686: PPUSH
10687: LD_STRING D3a-Corn-2
10689: PPUSH
10690: CALL_OW 94
// cornel_attack := true ;
10694: LD_ADDR_EXP 9
10698: PUSH
10699: LD_INT 1
10701: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
10702: LD_INT 105
10704: PPUSH
10705: CALL_OW 67
// AddMoreTanks ( ) ;
10709: CALL 4920 0 0
// if frank_send_to_scout then
10713: LD_EXP 15
10717: IFFALSE 10882
// begin InitHc ;
10719: CALL_OW 19
// InitUc ;
10723: CALL_OW 18
// uc_side := 8 ;
10727: LD_ADDR_OWVAR 20
10731: PUSH
10732: LD_INT 8
10734: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
10735: LD_ADDR_EXP 51
10739: PUSH
10740: LD_STRING Frank
10742: PPUSH
10743: LD_INT 0
10745: PPUSH
10746: LD_STRING 
10748: PPUSH
10749: CALL 35829 0 3
10753: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
10754: LD_EXP 51
10758: PPUSH
10759: LD_INT 6
10761: PPUSH
10762: LD_INT 9
10764: PPUSH
10765: LD_INT 0
10767: PPUSH
10768: CALL_OW 48
// ComCrawl ( Frank ) ;
10772: LD_EXP 51
10776: PPUSH
10777: CALL_OW 137
// repeat wait ( 10 ) ;
10781: LD_INT 10
10783: PPUSH
10784: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
10788: LD_EXP 37
10792: PPUSH
10793: LD_EXP 51
10797: PPUSH
10798: CALL_OW 296
10802: PUSH
10803: LD_INT 9
10805: LESS
10806: PUSH
10807: LD_INT 9
10809: PPUSH
10810: LD_INT 22
10812: PUSH
10813: LD_INT 1
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PPUSH
10820: CALL_OW 70
10824: OR
10825: IFFALSE 10781
// if IsDead ( Frank ) then
10827: LD_EXP 51
10831: PPUSH
10832: CALL_OW 301
10836: IFFALSE 10840
// exit ;
10838: GO 10882
// CenterOnUnits ( Frank ) ;
10840: LD_EXP 51
10844: PPUSH
10845: CALL_OW 85
// SetSide ( Frank , 1 ) ;
10849: LD_EXP 51
10853: PPUSH
10854: LD_INT 1
10856: PPUSH
10857: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
10861: LD_EXP 51
10865: PPUSH
10866: LD_STRING D6a-Frank-1
10868: PPUSH
10869: CALL_OW 88
// ComWalk ( Frank ) ;
10873: LD_EXP 51
10877: PPUSH
10878: CALL_OW 138
// end ; end ;
10882: END
// every 0 0$01 trigger solar_builded do
10883: LD_EXP 14
10887: IFFALSE 10991
10889: GO 10891
10891: DISABLE
// begin Wait ( 0 0$02 ) ;
10892: LD_INT 70
10894: PPUSH
10895: CALL_OW 67
// DialogueOn ;
10899: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
10903: LD_EXP 37
10907: PPUSH
10908: LD_STRING D2b-JMM-1
10910: PPUSH
10911: CALL_OW 88
// if Walker and IsOk ( Walker ) then
10915: LD_EXP 48
10919: PUSH
10920: LD_EXP 48
10924: PPUSH
10925: CALL_OW 302
10929: AND
10930: IFFALSE 10980
// begin Say ( Walker , D2b-Sci1-1 ) ;
10932: LD_EXP 48
10936: PPUSH
10937: LD_STRING D2b-Sci1-1
10939: PPUSH
10940: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
10944: LD_EXP 37
10948: PPUSH
10949: LD_STRING D2b-JMM-2
10951: PPUSH
10952: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
10956: LD_EXP 48
10960: PPUSH
10961: LD_STRING D2b-Sci1-2
10963: PPUSH
10964: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
10968: LD_EXP 37
10972: PPUSH
10973: LD_STRING D2b-JMM-3
10975: PPUSH
10976: CALL_OW 88
// end ; DialogueOff ;
10980: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
10984: LD_STRING MOutSol
10986: PPUSH
10987: CALL_OW 337
// end ;
10991: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
10992: LD_EXP 14
10996: PUSH
10997: LD_EXP 37
11001: PPUSH
11002: CALL_OW 302
11006: AND
11007: PUSH
11008: LD_EXP 37
11012: PPUSH
11013: CALL 903 0 1
11017: AND
11018: PUSH
11019: LD_EXP 16
11023: NOT
11024: AND
11025: IFFALSE 11096
11027: GO 11029
11029: DISABLE
11030: LD_INT 0
11032: PPUSH
// begin jmm_in_veh := true ;
11033: LD_ADDR_EXP 16
11037: PUSH
11038: LD_INT 1
11040: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11041: LD_ADDR_VAR 0 1
11045: PUSH
11046: LD_INT 0
11048: PPUSH
11049: LD_INT 1
11051: PPUSH
11052: CALL_OW 12
11056: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11057: LD_INT 70
11059: PPUSH
11060: CALL_OW 67
// if i then
11064: LD_VAR 0 1
11068: IFFALSE 11084
// Say ( JMM , D2c-JMM-1 ) else
11070: LD_EXP 37
11074: PPUSH
11075: LD_STRING D2c-JMM-1
11077: PPUSH
11078: CALL_OW 88
11082: GO 11096
// Say ( JMM , D2c-JMM-1a ) ;
11084: LD_EXP 37
11088: PPUSH
11089: LD_STRING D2c-JMM-1a
11091: PPUSH
11092: CALL_OW 88
// end ;
11096: PPOPN 1
11098: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11099: LD_EXP 14
11103: PUSH
11104: LD_EXP 38
11108: PPUSH
11109: CALL_OW 302
11113: AND
11114: PUSH
11115: LD_EXP 38
11119: PPUSH
11120: CALL 903 0 1
11124: AND
11125: PUSH
11126: LD_EXP 17
11130: NOT
11131: AND
11132: IFFALSE 11164
11134: GO 11136
11136: DISABLE
// begin bobby_in_veh := true ;
11137: LD_ADDR_EXP 17
11141: PUSH
11142: LD_INT 1
11144: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11145: LD_INT 70
11147: PPUSH
11148: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11152: LD_EXP 38
11156: PPUSH
11157: LD_STRING D2c-Bobby-1
11159: PPUSH
11160: CALL_OW 88
11164: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11165: LD_EXP 14
11169: PUSH
11170: LD_EXP 40
11174: PPUSH
11175: CALL_OW 302
11179: AND
11180: PUSH
11181: LD_EXP 40
11185: PPUSH
11186: CALL 903 0 1
11190: AND
11191: PUSH
11192: LD_EXP 19
11196: NOT
11197: AND
11198: IFFALSE 11230
11200: GO 11202
11202: DISABLE
// begin lisa_in_veh := true ;
11203: LD_ADDR_EXP 19
11207: PUSH
11208: LD_INT 1
11210: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11211: LD_INT 70
11213: PPUSH
11214: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11218: LD_EXP 40
11222: PPUSH
11223: LD_STRING D2c-Lisa-1
11225: PPUSH
11226: CALL_OW 88
11230: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11231: LD_EXP 14
11235: PUSH
11236: LD_EXP 39
11240: PPUSH
11241: CALL_OW 302
11245: AND
11246: PUSH
11247: LD_EXP 39
11251: PPUSH
11252: CALL 903 0 1
11256: AND
11257: PUSH
11258: LD_EXP 18
11262: NOT
11263: AND
11264: IFFALSE 11335
11266: GO 11268
11268: DISABLE
11269: LD_INT 0
11271: PPUSH
// begin cyrus_in_veh := true ;
11272: LD_ADDR_EXP 18
11276: PUSH
11277: LD_INT 1
11279: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11280: LD_ADDR_VAR 0 1
11284: PUSH
11285: LD_INT 0
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: CALL_OW 12
11295: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11296: LD_INT 70
11298: PPUSH
11299: CALL_OW 67
// if i then
11303: LD_VAR 0 1
11307: IFFALSE 11323
// Say ( Cyrus , D2c-Cyrus-1 ) else
11309: LD_EXP 39
11313: PPUSH
11314: LD_STRING D2c-Cyrus-1
11316: PPUSH
11317: CALL_OW 88
11321: GO 11335
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11323: LD_EXP 39
11327: PPUSH
11328: LD_STRING D2c-Cyrus-1a
11330: PPUSH
11331: CALL_OW 88
// end ;
11335: PPOPN 1
11337: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11338: LD_EXP 44
11342: PPUSH
11343: LD_INT 16
11345: PPUSH
11346: CALL_OW 308
11350: IFFALSE 11631
11352: GO 11354
11354: DISABLE
11355: LD_INT 0
11357: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11358: LD_INT 3
11360: PPUSH
11361: LD_EXP 44
11365: PPUSH
11366: CALL_OW 471
// send_attack_on_cornel := true ;
11370: LD_ADDR_EXP 32
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// if ru_vehicles then
11378: LD_EXP 56
11382: IFFALSE 11416
// for i in ru_vehicles do
11384: LD_ADDR_VAR 0 1
11388: PUSH
11389: LD_EXP 56
11393: PUSH
11394: FOR_IN
11395: IFFALSE 11414
// ComAgressiveMove ( i , 215 , 69 ) ;
11397: LD_VAR 0 1
11401: PPUSH
11402: LD_INT 215
11404: PPUSH
11405: LD_INT 69
11407: PPUSH
11408: CALL_OW 114
11412: GO 11394
11414: POP
11415: POP
// if ru_patrol then
11416: LD_EXP 53
11420: IFFALSE 11454
// for i in ru_patrol do
11422: LD_ADDR_VAR 0 1
11426: PUSH
11427: LD_EXP 53
11431: PUSH
11432: FOR_IN
11433: IFFALSE 11452
// ComAgressiveMove ( i , 215 , 69 ) ;
11435: LD_VAR 0 1
11439: PPUSH
11440: LD_INT 215
11442: PPUSH
11443: LD_INT 69
11445: PPUSH
11446: CALL_OW 114
11450: GO 11432
11452: POP
11453: POP
// if frank_send_to_scout then
11454: LD_EXP 15
11458: IFFALSE 11472
// begin SayRadio ( Frank , D3b-Frank-1 ) ;
11460: LD_EXP 51
11464: PPUSH
11465: LD_STRING D3b-Frank-1
11467: PPUSH
11468: CALL_OW 94
// end ; Wait ( 0 0$03 ) ;
11472: LD_INT 105
11474: PPUSH
11475: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11479: LD_EXP 44
11483: PPUSH
11484: LD_STRING D4-Corn-1
11486: PPUSH
11487: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11491: LD_INT 35
11493: PPUSH
11494: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11498: LD_INT 22
11500: PUSH
11501: LD_INT 4
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PUSH
11508: LD_INT 21
11510: PUSH
11511: LD_INT 1
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 3
11520: PUSH
11521: LD_INT 24
11523: PUSH
11524: LD_INT 1000
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: LIST
11539: PPUSH
11540: CALL_OW 69
11544: PUSH
11545: LD_INT 6
11547: LESS
11548: IFFALSE 11491
// if Cornel then
11550: LD_EXP 44
11554: IFFALSE 11594
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
11556: LD_EXP 44
11560: PPUSH
11561: LD_STRING D5-Corn-1
11563: PPUSH
11564: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
11568: LD_EXP 44
11572: PPUSH
11573: LD_EXP 2
11577: PUSH
11578: LD_STRING Cornel
11580: STR
11581: PPUSH
11582: CALL_OW 38
// cornel_saved := true ;
11586: LD_ADDR_EXP 27
11590: PUSH
11591: LD_INT 1
11593: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
11594: LD_INT 4
11596: PPUSH
11597: LD_INT 8
11599: PPUSH
11600: CALL_OW 343
// Wait ( 0 0$01 ) ;
11604: LD_INT 35
11606: PPUSH
11607: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
11611: LD_INT 3
11613: PPUSH
11614: LD_EXP 44
11618: PPUSH
11619: CALL_OW 472
// send_attack_on_cornel := false ;
11623: LD_ADDR_EXP 32
11627: PUSH
11628: LD_INT 0
11630: ST_TO_ADDR
// end ;
11631: PPOPN 1
11633: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
11634: LD_INT 9
11636: PPUSH
11637: LD_INT 22
11639: PUSH
11640: LD_INT 1
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PPUSH
11647: CALL_OW 70
11651: PUSH
11652: LD_EXP 33
11656: OR
11657: IFFALSE 11878
11659: GO 11661
11661: DISABLE
11662: LD_INT 0
11664: PPUSH
11665: PPUSH
// begin enable ;
11666: ENABLE
// if not jmm_on_west then
11667: LD_EXP 5
11671: NOT
11672: IFFALSE 11683
// begin YouLost ( 4 ) ;
11674: LD_STRING 4
11676: PPUSH
11677: CALL_OW 104
// exit ;
11681: GO 11878
// end ; if not game_end then
11683: LD_EXP 33
11687: NOT
11688: IFFALSE 11698
// game_end := true ;
11690: LD_ADDR_EXP 33
11694: PUSH
11695: LD_INT 1
11697: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11698: LD_ADDR_VAR 0 2
11702: PUSH
11703: LD_INT 9
11705: PPUSH
11706: LD_INT 22
11708: PUSH
11709: LD_INT 1
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PPUSH
11716: CALL_OW 70
11720: ST_TO_ADDR
// if not filter then
11721: LD_VAR 0 2
11725: NOT
11726: IFFALSE 11730
// exit ;
11728: GO 11878
// for i in filter do
11730: LD_ADDR_VAR 0 1
11734: PUSH
11735: LD_VAR 0 2
11739: PUSH
11740: FOR_IN
11741: IFFALSE 11876
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle and GetNation ( i ) = nation_american then
11743: LD_VAR 0 1
11747: PPUSH
11748: CALL_OW 302
11752: PUSH
11753: LD_VAR 0 1
11757: PPUSH
11758: CALL_OW 247
11762: PUSH
11763: LD_INT 2
11765: EQUAL
11766: AND
11767: PUSH
11768: LD_VAR 0 1
11772: PPUSH
11773: CALL_OW 248
11777: PUSH
11778: LD_INT 1
11780: EQUAL
11781: AND
11782: IFFALSE 11839
// begin if i = JMM and save_group < 4 then
11784: LD_VAR 0 1
11788: PUSH
11789: LD_EXP 37
11793: EQUAL
11794: PUSH
11795: LD_EXP 23
11799: PUSH
11800: LD_INT 4
11802: LESS
11803: AND
11804: IFFALSE 11808
// continue ;
11806: GO 11740
// veh_on_meta := true ;
11808: LD_ADDR_EXP 28
11812: PUSH
11813: LD_INT 1
11815: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
11816: LD_VAR 0 1
11820: PPUSH
11821: CALL_OW 311
11825: PPUSH
11826: CALL 11881 0 1
// RemoveUnit ( i ) ;
11830: LD_VAR 0 1
11834: PPUSH
11835: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
11839: LD_VAR 0 1
11843: PPUSH
11844: CALL_OW 302
11848: PUSH
11849: LD_VAR 0 1
11853: PPUSH
11854: CALL_OW 247
11858: PUSH
11859: LD_INT 1
11861: EQUAL
11862: AND
11863: IFFALSE 11874
// Save ( i ) ;
11865: LD_VAR 0 1
11869: PPUSH
11870: CALL 11881 0 1
// end ;
11874: GO 11740
11876: POP
11877: POP
// end ;
11878: PPOPN 2
11880: END
// export function Save ( i ) ; begin
11881: LD_INT 0
11883: PPUSH
// if i = JMM and save_group >= 4 then
11884: LD_VAR 0 1
11888: PUSH
11889: LD_EXP 37
11893: EQUAL
11894: PUSH
11895: LD_EXP 23
11899: PUSH
11900: LD_INT 4
11902: GREATEREQUAL
11903: AND
11904: IFFALSE 12040
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
11906: LD_EXP 24
11910: PUSH
11911: LD_INT 22
11913: PUSH
11914: LD_INT 1
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: LD_INT 21
11923: PUSH
11924: LD_INT 1
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: PUSH
11940: LD_INT 1
11942: GREATER
11943: AND
11944: IFFALSE 12001
// begin show_query := false ;
11946: LD_ADDR_EXP 24
11950: PUSH
11951: LD_INT 0
11953: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
11954: LD_STRING Q2
11956: PPUSH
11957: CALL_OW 97
11961: PUSH
11962: LD_INT 1
11964: DOUBLE
11965: EQUAL
11966: IFTRUE 11970
11968: GO 11981
11970: POP
// wait_for_them := true ; 2 :
11971: LD_ADDR_EXP 25
11975: PUSH
11976: LD_INT 1
11978: ST_TO_ADDR
11979: GO 12001
11981: LD_INT 2
11983: DOUBLE
11984: EQUAL
11985: IFTRUE 11989
11987: GO 12000
11989: POP
// wait_for_them := false ; end ;
11990: LD_ADDR_EXP 25
11994: PUSH
11995: LD_INT 0
11997: ST_TO_ADDR
11998: GO 12001
12000: POP
// end ; save_counter := save_counter + 1 ;
12001: LD_ADDR_EXP 36
12005: PUSH
12006: LD_EXP 36
12010: PUSH
12011: LD_INT 1
12013: PLUS
12014: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12015: LD_ADDR_EXP 23
12019: PUSH
12020: LD_EXP 23
12024: PUSH
12025: LD_EXP 37
12029: ADD
12030: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12031: LD_EXP 37
12035: PPUSH
12036: CALL_OW 64
// end ; if i = Lisa then
12040: LD_VAR 0 1
12044: PUSH
12045: LD_EXP 40
12049: EQUAL
12050: IFFALSE 12091
// begin save_counter := save_counter + 1 ;
12052: LD_ADDR_EXP 36
12056: PUSH
12057: LD_EXP 36
12061: PUSH
12062: LD_INT 1
12064: PLUS
12065: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12066: LD_ADDR_EXP 23
12070: PUSH
12071: LD_EXP 23
12075: PUSH
12076: LD_EXP 40
12080: ADD
12081: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12082: LD_EXP 40
12086: PPUSH
12087: CALL_OW 64
// end ; if i = Bobby then
12091: LD_VAR 0 1
12095: PUSH
12096: LD_EXP 38
12100: EQUAL
12101: IFFALSE 12142
// begin save_counter := save_counter + 1 ;
12103: LD_ADDR_EXP 36
12107: PUSH
12108: LD_EXP 36
12112: PUSH
12113: LD_INT 1
12115: PLUS
12116: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12117: LD_ADDR_EXP 23
12121: PUSH
12122: LD_EXP 23
12126: PUSH
12127: LD_EXP 38
12131: ADD
12132: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12133: LD_EXP 38
12137: PPUSH
12138: CALL_OW 64
// end ; if i = Cyrus then
12142: LD_VAR 0 1
12146: PUSH
12147: LD_EXP 39
12151: EQUAL
12152: IFFALSE 12193
// begin save_counter := save_counter + 1 ;
12154: LD_ADDR_EXP 36
12158: PUSH
12159: LD_EXP 36
12163: PUSH
12164: LD_INT 1
12166: PLUS
12167: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12168: LD_ADDR_EXP 23
12172: PUSH
12173: LD_EXP 23
12177: PUSH
12178: LD_EXP 39
12182: ADD
12183: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12184: LD_EXP 39
12188: PPUSH
12189: CALL_OW 64
// end ; if i = Khatam then
12193: LD_VAR 0 1
12197: PUSH
12198: LD_EXP 41
12202: EQUAL
12203: IFFALSE 12244
// begin save_counter := save_counter + 1 ;
12205: LD_ADDR_EXP 36
12209: PUSH
12210: LD_EXP 36
12214: PUSH
12215: LD_INT 1
12217: PLUS
12218: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12219: LD_ADDR_EXP 23
12223: PUSH
12224: LD_EXP 23
12228: PUSH
12229: LD_EXP 41
12233: ADD
12234: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12235: LD_EXP 41
12239: PPUSH
12240: CALL_OW 64
// end ; if i = Frank then
12244: LD_VAR 0 1
12248: PUSH
12249: LD_EXP 51
12253: EQUAL
12254: IFFALSE 12295
// begin save_counter := save_counter + 1 ;
12256: LD_ADDR_EXP 36
12260: PUSH
12261: LD_EXP 36
12265: PUSH
12266: LD_INT 1
12268: PLUS
12269: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12270: LD_ADDR_EXP 23
12274: PUSH
12275: LD_EXP 23
12279: PUSH
12280: LD_EXP 51
12284: ADD
12285: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12286: LD_EXP 51
12290: PPUSH
12291: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12295: LD_VAR 0 1
12299: PUSH
12300: LD_EXP 37
12304: NONEQUAL
12305: PUSH
12306: LD_VAR 0 1
12310: PPUSH
12311: CALL_OW 302
12315: AND
12316: PUSH
12317: LD_VAR 0 1
12321: PPUSH
12322: CALL_OW 247
12326: PUSH
12327: LD_INT 1
12329: EQUAL
12330: AND
12331: PUSH
12332: LD_VAR 0 1
12336: PUSH
12337: LD_EXP 23
12341: IN
12342: NOT
12343: AND
12344: IFFALSE 12385
// begin save_counter := save_counter + 1 ;
12346: LD_ADDR_EXP 36
12350: PUSH
12351: LD_EXP 36
12355: PUSH
12356: LD_INT 1
12358: PLUS
12359: ST_TO_ADDR
// save_others := save_others ^ i ;
12360: LD_ADDR_EXP 22
12364: PUSH
12365: LD_EXP 22
12369: PUSH
12370: LD_VAR 0 1
12374: ADD
12375: ST_TO_ADDR
// RemoveUnit ( i ) ;
12376: LD_VAR 0 1
12380: PPUSH
12381: CALL_OW 64
// end ; end ;
12385: LD_VAR 0 2
12389: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12390: LD_EXP 24
12394: NOT
12395: PUSH
12396: LD_EXP 25
12400: NOT
12401: AND
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_INT 1
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 21
12415: PUSH
12416: LD_INT 1
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 69
12431: PUSH
12432: LD_INT 0
12434: EQUAL
12435: OR
12436: IFFALSE 12445
12438: GO 12440
12440: DISABLE
// EndMission ;
12441: CALL 12446 0 0
12445: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
12450: PPUSH
12451: PPUSH
12452: PPUSH
// wait ( 0 0$01 ) ;
12453: LD_INT 35
12455: PPUSH
12456: CALL_OW 67
// if tick <= 12 12$00 then
12460: LD_OWVAR 1
12464: PUSH
12465: LD_INT 25200
12467: LESSEQUAL
12468: IFFALSE 12477
// SetAchievement ( ACH_ASPEED_3 ) ;
12470: LD_STRING ACH_ASPEED_3
12472: PPUSH
12473: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12477: LD_EXP 23
12481: PUSH
12482: LD_EXP 22
12486: ADD
12487: PPUSH
12488: LD_INT 25
12490: PUSH
12491: LD_INT 4
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PPUSH
12498: CALL_OW 72
12502: PUSH
12503: LD_INT 0
12505: EQUAL
12506: IFFALSE 12522
// begin wait ( 3 ) ;
12508: LD_INT 3
12510: PPUSH
12511: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
12515: LD_STRING ACH_NOSCI
12517: PPUSH
12518: CALL_OW 543
// end ; m1 := solar_builded ;
12522: LD_ADDR_VAR 0 3
12526: PUSH
12527: LD_EXP 14
12531: ST_TO_ADDR
// m2 := veh_on_meta ;
12532: LD_ADDR_VAR 0 4
12536: PUSH
12537: LD_EXP 28
12541: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
12542: LD_ADDR_VAR 0 5
12546: PUSH
12547: LD_EXP 34
12551: PUSH
12552: LD_INT 0
12554: EQUAL
12555: ST_TO_ADDR
// if solar_builded then
12556: LD_EXP 14
12560: IFFALSE 12574
// AddMedal ( Solar1 , 1 ) else
12562: LD_STRING Solar1
12564: PPUSH
12565: LD_INT 1
12567: PPUSH
12568: CALL_OW 101
12572: GO 12585
// AddMedal ( Solar1 , - 1 ) ;
12574: LD_STRING Solar1
12576: PPUSH
12577: LD_INT 1
12579: NEG
12580: PPUSH
12581: CALL_OW 101
// if veh_on_meta then
12585: LD_EXP 28
12589: IFFALSE 12603
// AddMedal ( Solar2 , 1 ) else
12591: LD_STRING Solar2
12593: PPUSH
12594: LD_INT 1
12596: PPUSH
12597: CALL_OW 101
12601: GO 12633
// if solar_builded then
12603: LD_EXP 14
12607: IFFALSE 12622
// AddMedal ( Solar2 , - 1 ) else
12609: LD_STRING Solar2
12611: PPUSH
12612: LD_INT 1
12614: NEG
12615: PPUSH
12616: CALL_OW 101
12620: GO 12633
// AddMedal ( Solar2 , - 2 ) ;
12622: LD_STRING Solar2
12624: PPUSH
12625: LD_INT 2
12627: NEG
12628: PPUSH
12629: CALL_OW 101
// if lose_counter = 0 then
12633: LD_EXP 34
12637: PUSH
12638: LD_INT 0
12640: EQUAL
12641: IFFALSE 12655
// AddMedal ( No , 1 ) else
12643: LD_STRING No
12645: PPUSH
12646: LD_INT 1
12648: PPUSH
12649: CALL_OW 101
12653: GO 12699
// if lose_counter > 0 and lose_counter < 4 then
12655: LD_EXP 34
12659: PUSH
12660: LD_INT 0
12662: GREATER
12663: PUSH
12664: LD_EXP 34
12668: PUSH
12669: LD_INT 4
12671: LESS
12672: AND
12673: IFFALSE 12688
// AddMedal ( No , - 1 ) else
12675: LD_STRING No
12677: PPUSH
12678: LD_INT 1
12680: NEG
12681: PPUSH
12682: CALL_OW 101
12686: GO 12699
// AddMedal ( UpTo4 , - 1 ) ;
12688: LD_STRING UpTo4
12690: PPUSH
12691: LD_INT 1
12693: NEG
12694: PPUSH
12695: CALL_OW 101
// GiveMedals ( MAIN ) ;
12699: LD_STRING MAIN
12701: PPUSH
12702: CALL_OW 102
// if Difficulty = 3 and m1 and m2 and m3 then
12706: LD_OWVAR 67
12710: PUSH
12711: LD_INT 3
12713: EQUAL
12714: PUSH
12715: LD_VAR 0 3
12719: AND
12720: PUSH
12721: LD_VAR 0 4
12725: AND
12726: PUSH
12727: LD_VAR 0 5
12731: AND
12732: IFFALSE 12744
// SetAchievementEX ( ACH_AMER , 3 ) ;
12734: LD_STRING ACH_AMER
12736: PPUSH
12737: LD_INT 3
12739: PPUSH
12740: CALL_OW 564
// if IsDead ( Pokryshkin ) then
12744: LD_EXP 52
12748: PPUSH
12749: CALL_OW 301
12753: IFFALSE 12809
// begin stop_talking := true ;
12755: LD_ADDR_OWVAR 56
12759: PUSH
12760: LD_INT 1
12762: ST_TO_ADDR
// for i in save_group ^ save_others do
12763: LD_ADDR_VAR 0 2
12767: PUSH
12768: LD_EXP 23
12772: PUSH
12773: LD_EXP 22
12777: ADD
12778: PUSH
12779: FOR_IN
12780: IFFALSE 12799
// AddExperience ( i , skill_combat , 1500 ) ;
12782: LD_VAR 0 2
12786: PPUSH
12787: LD_INT 1
12789: PPUSH
12790: LD_INT 1500
12792: PPUSH
12793: CALL_OW 492
12797: GO 12779
12799: POP
12800: POP
// stop_talking := false ;
12801: LD_ADDR_OWVAR 56
12805: PUSH
12806: LD_INT 0
12808: ST_TO_ADDR
// end ; RewardPeople ( save_group ^ save_others ) ;
12809: LD_EXP 23
12813: PUSH
12814: LD_EXP 22
12818: ADD
12819: PPUSH
12820: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
12824: LD_EXP 37
12828: PPUSH
12829: LD_EXP 2
12833: PUSH
12834: LD_STRING JMM
12836: STR
12837: PPUSH
12838: CALL_OW 38
// if Bobby in save_group then
12842: LD_EXP 38
12846: PUSH
12847: LD_EXP 23
12851: IN
12852: IFFALSE 12872
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
12854: LD_EXP 38
12858: PPUSH
12859: LD_EXP 2
12863: PUSH
12864: LD_STRING Bobby
12866: STR
12867: PPUSH
12868: CALL_OW 38
// if Cyrus in save_group then
12872: LD_EXP 39
12876: PUSH
12877: LD_EXP 23
12881: IN
12882: IFFALSE 12902
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
12884: LD_EXP 39
12888: PPUSH
12889: LD_EXP 2
12893: PUSH
12894: LD_STRING Cyrus
12896: STR
12897: PPUSH
12898: CALL_OW 38
// if Lisa in save_group then
12902: LD_EXP 40
12906: PUSH
12907: LD_EXP 23
12911: IN
12912: IFFALSE 12932
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
12914: LD_EXP 40
12918: PPUSH
12919: LD_EXP 2
12923: PUSH
12924: LD_STRING Lisa
12926: STR
12927: PPUSH
12928: CALL_OW 38
// if Frank in save_group then
12932: LD_EXP 51
12936: PUSH
12937: LD_EXP 23
12941: IN
12942: IFFALSE 12962
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
12944: LD_EXP 51
12948: PPUSH
12949: LD_EXP 2
12953: PUSH
12954: LD_STRING Frank
12956: STR
12957: PPUSH
12958: CALL_OW 38
// if Khatam in save_group then
12962: LD_EXP 41
12966: PUSH
12967: LD_EXP 23
12971: IN
12972: IFFALSE 12992
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
12974: LD_EXP 41
12978: PPUSH
12979: LD_EXP 2
12983: PUSH
12984: LD_STRING Khatam
12986: STR
12987: PPUSH
12988: CALL_OW 38
// if save_others then
12992: LD_EXP 22
12996: IFFALSE 13010
// SaveCharacters ( save_others , 03_others ) ;
12998: LD_EXP 22
13002: PPUSH
13003: LD_STRING 03_others
13005: PPUSH
13006: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13010: LD_EXP 45
13014: PUSH
13015: LD_EXP 45
13019: PPUSH
13020: CALL_OW 302
13024: AND
13025: PUSH
13026: LD_EXP 27
13030: AND
13031: IFFALSE 13043
// begin ResetFog ;
13033: CALL_OW 335
// DisplayEndingScene ;
13037: CALL 13065 0 0
// end else
13041: GO 13056
// DeleteCharacters ( mission_prefix & Cornel ) ;
13043: LD_EXP 2
13047: PUSH
13048: LD_STRING Cornel
13050: STR
13051: PPUSH
13052: CALL_OW 40
// YouWin ;
13056: CALL_OW 103
// end ;
13060: LD_VAR 0 1
13064: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13065: LD_INT 0
13067: PPUSH
13068: PPUSH
13069: PPUSH
13070: PPUSH
13071: PPUSH
13072: PPUSH
// InGameOn ;
13073: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13077: LD_INT 208
13079: PPUSH
13080: LD_INT 62
13082: PPUSH
13083: LD_INT 1
13085: PPUSH
13086: LD_INT 10
13088: NEG
13089: PPUSH
13090: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13094: LD_INT 208
13096: PPUSH
13097: LD_INT 62
13099: PPUSH
13100: LD_INT 1
13102: PPUSH
13103: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13107: LD_ADDR_VAR 0 3
13111: PUSH
13112: LD_INT 22
13114: PUSH
13115: LD_INT 3
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 2
13124: PUSH
13125: LD_INT 21
13127: PUSH
13128: LD_INT 2
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 21
13137: PUSH
13138: LD_INT 1
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PPUSH
13154: CALL_OW 69
13158: ST_TO_ADDR
// if filter then
13159: LD_VAR 0 3
13163: IFFALSE 13191
// for i in filter do
13165: LD_ADDR_VAR 0 2
13169: PUSH
13170: LD_VAR 0 3
13174: PUSH
13175: FOR_IN
13176: IFFALSE 13189
// RemoveUnit ( i ) ;
13178: LD_VAR 0 2
13182: PPUSH
13183: CALL_OW 64
13187: GO 13175
13189: POP
13190: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13191: LD_ADDR_VAR 0 3
13195: PUSH
13196: LD_INT 22
13198: PUSH
13199: LD_INT 4
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 21
13208: PUSH
13209: LD_INT 1
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PPUSH
13220: CALL_OW 69
13224: ST_TO_ADDR
// if filter then
13225: LD_VAR 0 3
13229: IFFALSE 13260
// for i in filter do
13231: LD_ADDR_VAR 0 2
13235: PUSH
13236: LD_VAR 0 3
13240: PUSH
13241: FOR_IN
13242: IFFALSE 13258
// SetLives ( i , 0 ) ;
13244: LD_VAR 0 2
13248: PPUSH
13249: LD_INT 0
13251: PPUSH
13252: CALL_OW 234
13256: GO 13241
13258: POP
13259: POP
// uc_side := 4 ;
13260: LD_ADDR_OWVAR 20
13264: PUSH
13265: LD_INT 4
13267: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13268: LD_ADDR_VAR 0 4
13272: PUSH
13273: LD_STRING Cornell
13275: PPUSH
13276: LD_INT 0
13278: PPUSH
13279: LD_STRING 
13281: PPUSH
13282: CALL 35829 0 3
13286: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13287: LD_VAR 0 4
13291: PPUSH
13292: LD_INT 208
13294: PPUSH
13295: LD_INT 62
13297: PPUSH
13298: LD_INT 0
13300: PPUSH
13301: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13305: LD_VAR 0 4
13309: PPUSH
13310: LD_INT 100
13312: PPUSH
13313: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13317: LD_INT 3
13319: PPUSH
13320: LD_VAR 0 4
13324: PPUSH
13325: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13329: LD_INT 4
13331: PPUSH
13332: LD_INT 3
13334: PPUSH
13335: LD_INT 1
13337: PPUSH
13338: LD_INT 1
13340: PPUSH
13341: CALL_OW 80
// uc_side := 3 ;
13345: LD_ADDR_OWVAR 20
13349: PUSH
13350: LD_INT 3
13352: ST_TO_ADDR
// uc_nation := 3 ;
13353: LD_ADDR_OWVAR 21
13357: PUSH
13358: LD_INT 3
13360: ST_TO_ADDR
// InitHc ;
13361: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13365: LD_ADDR_VAR 0 5
13369: PUSH
13370: LD_STRING Mikhail
13372: PPUSH
13373: LD_INT 0
13375: PPUSH
13376: LD_STRING 
13378: PPUSH
13379: CALL 35829 0 3
13383: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13384: LD_INT 1
13386: PPUSH
13387: LD_INT 1
13389: PPUSH
13390: LD_INT 0
13392: PPUSH
13393: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13397: LD_ADDR_VAR 0 6
13401: PUSH
13402: LD_VAR 0 6
13406: PUSH
13407: CALL_OW 44
13411: ADD
13412: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13413: LD_ADDR_VAR 0 6
13417: PUSH
13418: LD_VAR 0 6
13422: PUSH
13423: CALL_OW 44
13427: ADD
13428: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13429: LD_INT 2
13431: PPUSH
13432: LD_INT 4
13434: PPUSH
13435: LD_INT 0
13437: PPUSH
13438: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13442: LD_ADDR_VAR 0 6
13446: PUSH
13447: LD_VAR 0 6
13451: PUSH
13452: CALL_OW 44
13456: ADD
13457: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13458: LD_VAR 0 5
13462: PPUSH
13463: LD_INT 17
13465: PPUSH
13466: LD_INT 0
13468: PPUSH
13469: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13473: LD_VAR 0 5
13477: PPUSH
13478: LD_INT 210
13480: PPUSH
13481: LD_INT 63
13483: PPUSH
13484: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
13488: LD_VAR 0 5
13492: PPUSH
13493: LD_INT 208
13495: PPUSH
13496: LD_INT 62
13498: PPUSH
13499: CALL_OW 178
// for i in fake_russians do
13503: LD_ADDR_VAR 0 2
13507: PUSH
13508: LD_VAR 0 6
13512: PUSH
13513: FOR_IN
13514: IFFALSE 13592
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
13516: LD_VAR 0 2
13520: PPUSH
13521: LD_INT 17
13523: PPUSH
13524: LD_INT 0
13526: PPUSH
13527: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
13531: LD_VAR 0 2
13535: PPUSH
13536: LD_INT 215
13538: PPUSH
13539: LD_INT 67
13541: PPUSH
13542: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
13546: LD_VAR 0 2
13550: PPUSH
13551: LD_INT 208
13553: PPUSH
13554: LD_INT 62
13556: PPUSH
13557: CALL_OW 178
// if GetClass ( i ) = 4 then
13561: LD_VAR 0 2
13565: PPUSH
13566: CALL_OW 257
13570: PUSH
13571: LD_INT 4
13573: EQUAL
13574: IFFALSE 13590
// ComHeal ( i , fake_cornel ) ;
13576: LD_VAR 0 2
13580: PPUSH
13581: LD_VAR 0 4
13585: PPUSH
13586: CALL_OW 128
// end ;
13590: GO 13513
13592: POP
13593: POP
// Wait ( 0 0$01 ) ;
13594: LD_INT 35
13596: PPUSH
13597: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
13601: LD_INT 208
13603: PPUSH
13604: LD_INT 62
13606: PPUSH
13607: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13611: LD_INT 208
13613: PPUSH
13614: LD_INT 62
13616: PPUSH
13617: LD_INT 1
13619: PPUSH
13620: LD_INT 10
13622: NEG
13623: PPUSH
13624: CALL_OW 330
// Wait ( 0 0$15 ) ;
13628: LD_INT 525
13630: PPUSH
13631: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
13635: LD_INT 208
13637: PPUSH
13638: LD_INT 62
13640: PPUSH
13641: LD_INT 1
13643: PPUSH
13644: CALL_OW 331
// ResetFog ;
13648: CALL_OW 335
// InGameOff ;
13652: CALL_OW 9
// end ;
13656: LD_VAR 0 1
13660: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
13661: LD_INT 10
13663: PPUSH
13664: LD_INT 22
13666: PUSH
13667: LD_INT 1
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PPUSH
13674: CALL_OW 70
13678: PUSH
13679: LD_EXP 44
13683: PPUSH
13684: CALL_OW 302
13688: AND
13689: PUSH
13690: LD_INT 22
13692: PUSH
13693: LD_INT 1
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PPUSH
13700: CALL_OW 69
13704: PPUSH
13705: LD_EXP 44
13709: PPUSH
13710: CALL_OW 74
13714: PPUSH
13715: LD_EXP 44
13719: PPUSH
13720: CALL_OW 296
13724: PUSH
13725: LD_INT 30
13727: LESS
13728: OR
13729: IFFALSE 13780
13731: GO 13733
13733: DISABLE
// begin enable ;
13734: ENABLE
// powell_warn := powell_warn + 1 ;
13735: LD_ADDR_EXP 35
13739: PUSH
13740: LD_EXP 35
13744: PUSH
13745: LD_INT 1
13747: PLUS
13748: ST_TO_ADDR
// if powell_warn = 3 then
13749: LD_EXP 35
13753: PUSH
13754: LD_INT 3
13756: EQUAL
13757: IFFALSE 13768
// begin YouLost ( 5 ) ;
13759: LD_STRING 5
13761: PPUSH
13762: CALL_OW 104
// exit ;
13766: GO 13780
// end ; SayRadio ( Powell , DWarn-Pow-1 ) ;
13768: LD_EXP 46
13772: PPUSH
13773: LD_STRING DWarn-Pow-1
13775: PPUSH
13776: CALL_OW 94
// end ; end_of_file
13780: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
13781: LD_EXP 8
13785: IFFALSE 15622
13787: GO 13789
13789: DISABLE
13790: LD_INT 0
13792: PPUSH
13793: PPUSH
13794: PPUSH
13795: PPUSH
13796: PPUSH
13797: PPUSH
13798: PPUSH
13799: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
13800: LD_EXP 44
13804: PUSH
13805: LD_EXP 45
13809: ADD
13810: PUSH
13811: LD_EXP 6
13815: ADD
13816: PPUSH
13817: LD_INT 250
13819: PPUSH
13820: LD_INT 120
13822: PPUSH
13823: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
13827: LD_ADDR_VAR 0 2
13831: PUSH
13832: LD_EXP 6
13836: PPUSH
13837: LD_INT 25
13839: PUSH
13840: LD_INT 2
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PPUSH
13847: CALL_OW 72
13851: PUSH
13852: LD_EXP 45
13856: DIFF
13857: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
13858: LD_ADDR_VAR 0 3
13862: PUSH
13863: LD_EXP 6
13867: PPUSH
13868: LD_INT 21
13870: PUSH
13871: LD_INT 1
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PPUSH
13878: CALL_OW 72
13882: PUSH
13883: LD_VAR 0 2
13887: DIFF
13888: ST_TO_ADDR
// if not has_eng then
13889: LD_VAR 0 2
13893: NOT
13894: IFFALSE 13977
// begin uc_side := 4 ;
13896: LD_ADDR_OWVAR 20
13900: PUSH
13901: LD_INT 4
13903: ST_TO_ADDR
// uc_nation := 1 ;
13904: LD_ADDR_OWVAR 21
13908: PUSH
13909: LD_INT 1
13911: ST_TO_ADDR
// bc_type := b_depot ;
13912: LD_ADDR_OWVAR 42
13916: PUSH
13917: LD_INT 0
13919: ST_TO_ADDR
// bc_level := 2 ;
13920: LD_ADDR_OWVAR 43
13924: PUSH
13925: LD_INT 2
13927: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
13928: LD_ADDR_VAR 0 4
13932: PUSH
13933: LD_INT 264
13935: PPUSH
13936: LD_INT 120
13938: PPUSH
13939: LD_INT 4
13941: PPUSH
13942: CALL_OW 47
13946: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
13947: LD_INT 264
13949: PPUSH
13950: LD_INT 120
13952: PPUSH
13953: LD_INT 4
13955: PPUSH
13956: LD_INT 10
13958: NEG
13959: PPUSH
13960: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
13964: LD_INT 264
13966: PPUSH
13967: LD_INT 120
13969: PPUSH
13970: LD_INT 4
13972: PPUSH
13973: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
13977: LD_INT 35
13979: PPUSH
13980: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
13984: LD_EXP 44
13988: PPUSH
13989: LD_INT 10
13991: PPUSH
13992: CALL_OW 308
13996: PUSH
13997: LD_EXP 44
14001: PPUSH
14002: CALL_OW 310
14006: PPUSH
14007: LD_INT 10
14009: PPUSH
14010: CALL_OW 308
14014: OR
14015: IFFALSE 13977
// if has_eng and not dep then
14017: LD_VAR 0 2
14021: PUSH
14022: LD_VAR 0 4
14026: NOT
14027: AND
14028: IFFALSE 14178
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14030: LD_VAR 0 2
14034: PPUSH
14035: LD_INT 0
14037: PPUSH
14038: LD_INT 264
14040: PPUSH
14041: LD_INT 120
14043: PPUSH
14044: LD_INT 4
14046: PPUSH
14047: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14051: LD_INT 35
14053: PPUSH
14054: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14058: LD_INT 22
14060: PUSH
14061: LD_INT 4
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: LD_INT 30
14070: PUSH
14071: LD_INT 0
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PPUSH
14082: CALL_OW 69
14086: IFFALSE 14051
// ComMoveXY ( filter , 264 , 120 ) ;
14088: LD_VAR 0 3
14092: PPUSH
14093: LD_INT 264
14095: PPUSH
14096: LD_INT 120
14098: PPUSH
14099: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14103: LD_INT 35
14105: PPUSH
14106: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14110: LD_INT 22
14112: PUSH
14113: LD_INT 4
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 30
14122: PUSH
14123: LD_INT 0
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: LD_INT 3
14132: PUSH
14133: LD_INT 57
14135: PUSH
14136: EMPTY
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: PPUSH
14148: CALL_OW 69
14152: IFFALSE 14103
// ComMoveXY ( filter , 247 , 113 ) ;
14154: LD_VAR 0 3
14158: PPUSH
14159: LD_INT 247
14161: PPUSH
14162: LD_INT 113
14164: PPUSH
14165: CALL_OW 111
// Wait ( 0 0$2 ) ;
14169: LD_INT 70
14171: PPUSH
14172: CALL_OW 67
// end else
14176: GO 14190
// begin SetSide ( dep , 4 ) ;
14178: LD_VAR 0 4
14182: PPUSH
14183: LD_INT 4
14185: PPUSH
14186: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14190: LD_ADDR_VAR 0 4
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_INT 4
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 30
14207: PUSH
14208: LD_INT 0
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PPUSH
14219: CALL_OW 69
14223: PUSH
14224: LD_INT 1
14226: ARRAY
14227: ST_TO_ADDR
// if not has_eng then
14228: LD_VAR 0 2
14232: NOT
14233: IFFALSE 14320
// for i = 1 to 2 do
14235: LD_ADDR_VAR 0 1
14239: PUSH
14240: DOUBLE
14241: LD_INT 1
14243: DEC
14244: ST_TO_ADDR
14245: LD_INT 2
14247: PUSH
14248: FOR_TO
14249: IFFALSE 14318
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14251: LD_VAR 0 3
14255: PUSH
14256: LD_INT 1
14258: ARRAY
14259: PPUSH
14260: LD_VAR 0 4
14264: PPUSH
14265: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14269: LD_VAR 0 3
14273: PUSH
14274: LD_INT 1
14276: ARRAY
14277: PPUSH
14278: LD_INT 2
14280: PPUSH
14281: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14285: LD_VAR 0 3
14289: PUSH
14290: LD_INT 1
14292: ARRAY
14293: PPUSH
14294: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14298: LD_ADDR_VAR 0 3
14302: PUSH
14303: LD_VAR 0 3
14307: PPUSH
14308: LD_INT 1
14310: PPUSH
14311: CALL_OW 3
14315: ST_TO_ADDR
// end ;
14316: GO 14248
14318: POP
14319: POP
// if IsInUnit ( Cornel ) then
14320: LD_EXP 44
14324: PPUSH
14325: CALL_OW 310
14329: IFFALSE 14407
// begin cargo := IsInUnit ( Cornel ) ;
14331: LD_ADDR_VAR 0 7
14335: PUSH
14336: LD_EXP 44
14340: PPUSH
14341: CALL_OW 310
14345: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14346: LD_VAR 0 7
14350: PPUSH
14351: LD_INT 1
14353: PPUSH
14354: CALL_OW 289
14358: IFFALSE 14369
// ComUnload ( cargo ) ;
14360: LD_VAR 0 7
14364: PPUSH
14365: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14369: LD_EXP 44
14373: PPUSH
14374: LD_INT 235
14376: PPUSH
14377: LD_INT 122
14379: PPUSH
14380: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14384: LD_EXP 44
14388: PPUSH
14389: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14393: LD_EXP 44
14397: PPUSH
14398: LD_VAR 0 4
14402: PPUSH
14403: CALL_OW 180
// end ; if Bierezov then
14407: LD_EXP 45
14411: IFFALSE 14459
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14413: LD_EXP 45
14417: PPUSH
14418: LD_INT 260
14420: PPUSH
14421: LD_INT 120
14423: PPUSH
14424: CALL_OW 111
// if dep then
14428: LD_VAR 0 4
14432: IFFALSE 14450
// AddComEnterUnit ( Bierezov , dep ) else
14434: LD_EXP 45
14438: PPUSH
14439: LD_VAR 0 4
14443: PPUSH
14444: CALL_OW 180
14448: GO 14459
// AddComHold ( Bierezov ) ;
14450: LD_EXP 45
14454: PPUSH
14455: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14459: LD_INT 525
14461: PPUSH
14462: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14466: LD_ADDR_VAR 0 2
14470: PUSH
14471: LD_INT 22
14473: PUSH
14474: LD_INT 4
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: LD_INT 25
14483: PUSH
14484: LD_INT 2
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PPUSH
14495: CALL_OW 69
14499: PUSH
14500: LD_EXP 45
14504: DIFF
14505: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14506: LD_INT 35
14508: PPUSH
14509: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
14513: LD_ADDR_VAR 0 6
14517: PUSH
14518: LD_INT 10
14520: PPUSH
14521: CALL_OW 435
14525: ST_TO_ADDR
// if crates then
14526: LD_VAR 0 6
14530: IFFALSE 14559
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
14532: LD_VAR 0 2
14536: PPUSH
14537: LD_VAR 0 6
14541: PUSH
14542: LD_INT 1
14544: ARRAY
14545: PPUSH
14546: LD_VAR 0 6
14550: PUSH
14551: LD_INT 2
14553: ARRAY
14554: PPUSH
14555: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
14559: LD_VAR 0 4
14563: PPUSH
14564: CALL_OW 274
14568: PPUSH
14569: LD_INT 1
14571: PPUSH
14572: CALL_OW 275
14576: PUSH
14577: LD_INT 40
14579: GREATEREQUAL
14580: IFFALSE 14506
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
14582: LD_ADDR_VAR 0 5
14586: PUSH
14587: LD_INT 4
14589: PUSH
14590: LD_INT 256
14592: PUSH
14593: LD_INT 111
14595: PUSH
14596: LD_INT 2
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: PUSH
14605: LD_INT 31
14607: PUSH
14608: LD_INT 243
14610: PUSH
14611: LD_INT 112
14613: PUSH
14614: LD_INT 2
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 31
14625: PUSH
14626: LD_INT 254
14628: PUSH
14629: LD_INT 114
14631: PUSH
14632: LD_INT 2
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: ST_TO_ADDR
// for i in blist do
14646: LD_ADDR_VAR 0 1
14650: PUSH
14651: LD_VAR 0 5
14655: PUSH
14656: FOR_IN
14657: IFFALSE 14706
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
14659: LD_VAR 0 2
14663: PPUSH
14664: LD_VAR 0 1
14668: PUSH
14669: LD_INT 1
14671: ARRAY
14672: PPUSH
14673: LD_VAR 0 1
14677: PUSH
14678: LD_INT 2
14680: ARRAY
14681: PPUSH
14682: LD_VAR 0 1
14686: PUSH
14687: LD_INT 3
14689: ARRAY
14690: PPUSH
14691: LD_VAR 0 1
14695: PUSH
14696: LD_INT 4
14698: ARRAY
14699: PPUSH
14700: CALL_OW 205
14704: GO 14656
14706: POP
14707: POP
// repeat wait ( 0 0$01 ) ;
14708: LD_INT 35
14710: PPUSH
14711: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
14715: LD_INT 22
14717: PUSH
14718: LD_INT 4
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 30
14727: PUSH
14728: LD_INT 4
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: LD_INT 3
14737: PUSH
14738: LD_INT 57
14740: PUSH
14741: EMPTY
14742: LIST
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: LIST
14752: PPUSH
14753: CALL_OW 69
14757: IFFALSE 14708
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14759: LD_VAR 0 3
14763: PPUSH
14764: LD_INT 22
14766: PUSH
14767: LD_INT 4
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 30
14776: PUSH
14777: LD_INT 4
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PPUSH
14788: CALL_OW 69
14792: PUSH
14793: LD_INT 1
14795: ARRAY
14796: PPUSH
14797: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
14801: LD_VAR 0 3
14805: PPUSH
14806: LD_INT 1
14808: PPUSH
14809: CALL_OW 183
// if has_eng > 1 then
14813: LD_VAR 0 2
14817: PUSH
14818: LD_INT 1
14820: GREATER
14821: IFFALSE 14963
// for i = has_eng downto 2 do
14823: LD_ADDR_VAR 0 1
14827: PUSH
14828: DOUBLE
14829: LD_VAR 0 2
14833: INC
14834: ST_TO_ADDR
14835: LD_INT 2
14837: PUSH
14838: FOR_DOWNTO
14839: IFFALSE 14961
// begin if IsInUnit ( has_eng [ i ] ) then
14841: LD_VAR 0 2
14845: PUSH
14846: LD_VAR 0 1
14850: ARRAY
14851: PPUSH
14852: CALL_OW 310
14856: IFFALSE 14873
// ComExitBuilding ( has_eng [ i ] ) ;
14858: LD_VAR 0 2
14862: PUSH
14863: LD_VAR 0 1
14867: ARRAY
14868: PPUSH
14869: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14873: LD_VAR 0 2
14877: PUSH
14878: LD_VAR 0 1
14882: ARRAY
14883: PPUSH
14884: LD_INT 22
14886: PUSH
14887: LD_INT 4
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: LD_INT 30
14896: PUSH
14897: LD_INT 4
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PPUSH
14908: CALL_OW 69
14912: PUSH
14913: LD_INT 1
14915: ARRAY
14916: PPUSH
14917: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
14921: LD_VAR 0 2
14925: PUSH
14926: LD_VAR 0 1
14930: ARRAY
14931: PPUSH
14932: LD_INT 1
14934: PPUSH
14935: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
14939: LD_ADDR_VAR 0 2
14943: PUSH
14944: LD_VAR 0 2
14948: PPUSH
14949: LD_VAR 0 1
14953: PPUSH
14954: CALL_OW 3
14958: ST_TO_ADDR
// end ;
14959: GO 14838
14961: POP
14962: POP
// repeat wait ( 0 0$01 ) ;
14963: LD_INT 35
14965: PPUSH
14966: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
14970: LD_INT 22
14972: PUSH
14973: LD_INT 4
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: LD_INT 30
14982: PUSH
14983: LD_INT 31
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 3
14992: PUSH
14993: LD_INT 57
14995: PUSH
14996: EMPTY
14997: LIST
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: PPUSH
15008: CALL_OW 69
15012: PUSH
15013: LD_INT 1
15015: GREATER
15016: IFFALSE 14963
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15018: LD_ADDR_VAR 0 8
15022: PUSH
15023: LD_EXP 6
15027: PPUSH
15028: LD_INT 25
15030: PUSH
15031: LD_INT 1
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PPUSH
15038: CALL_OW 72
15042: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15043: LD_ADDR_VAR 0 1
15047: PUSH
15048: DOUBLE
15049: LD_INT 1
15051: DEC
15052: ST_TO_ADDR
15053: LD_INT 22
15055: PUSH
15056: LD_INT 4
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 30
15065: PUSH
15066: LD_INT 31
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: LD_INT 3
15075: PUSH
15076: LD_INT 57
15078: PUSH
15079: EMPTY
15080: LIST
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: LIST
15090: PPUSH
15091: CALL_OW 69
15095: PUSH
15096: FOR_TO
15097: IFFALSE 15181
// begin if not sol [ i ] then
15099: LD_VAR 0 8
15103: PUSH
15104: LD_VAR 0 1
15108: ARRAY
15109: NOT
15110: IFFALSE 15114
// break ;
15112: GO 15181
// ComExitBuilding ( sol [ i ] ) ;
15114: LD_VAR 0 8
15118: PUSH
15119: LD_VAR 0 1
15123: ARRAY
15124: PPUSH
15125: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15129: LD_VAR 0 8
15133: PUSH
15134: LD_VAR 0 1
15138: ARRAY
15139: PPUSH
15140: LD_INT 22
15142: PUSH
15143: LD_INT 4
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: PUSH
15150: LD_INT 30
15152: PUSH
15153: LD_INT 31
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PPUSH
15164: CALL_OW 69
15168: PUSH
15169: LD_VAR 0 1
15173: ARRAY
15174: PPUSH
15175: CALL_OW 180
// end ;
15179: GO 15096
15181: POP
15182: POP
// if sol > 3 then
15183: LD_VAR 0 8
15187: PUSH
15188: LD_INT 3
15190: GREATER
15191: IFFALSE 15308
// begin ComExitBuilding ( sol [ 3 ] ) ;
15193: LD_VAR 0 8
15197: PUSH
15198: LD_INT 3
15200: ARRAY
15201: PPUSH
15202: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15206: LD_VAR 0 8
15210: PUSH
15211: LD_INT 3
15213: ARRAY
15214: PPUSH
15215: LD_INT 246
15217: PPUSH
15218: LD_INT 94
15220: PPUSH
15221: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15225: LD_VAR 0 8
15229: PUSH
15230: LD_INT 3
15232: ARRAY
15233: PPUSH
15234: LD_INT 175
15236: PPUSH
15237: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15241: LD_VAR 0 8
15245: PUSH
15246: LD_INT 3
15248: ARRAY
15249: PPUSH
15250: LD_INT 224
15252: PPUSH
15253: LD_INT 90
15255: PPUSH
15256: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15260: LD_VAR 0 8
15264: PUSH
15265: LD_INT 3
15267: ARRAY
15268: PPUSH
15269: LD_INT 245
15271: PPUSH
15272: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15276: LD_VAR 0 8
15280: PUSH
15281: LD_INT 3
15283: ARRAY
15284: PPUSH
15285: LD_INT 223
15287: PPUSH
15288: LD_INT 110
15290: PPUSH
15291: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15295: LD_VAR 0 8
15299: PUSH
15300: LD_INT 3
15302: ARRAY
15303: PPUSH
15304: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15308: LD_VAR 0 2
15312: PPUSH
15313: LD_VAR 0 4
15317: PPUSH
15318: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15322: LD_INT 22
15324: PUSH
15325: LD_INT 4
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 30
15334: PUSH
15335: LD_INT 4
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PPUSH
15346: CALL_OW 69
15350: PUSH
15351: LD_INT 1
15353: ARRAY
15354: PPUSH
15355: CALL_OW 313
15359: PUSH
15360: LD_INT 6
15362: LESS
15363: IFFALSE 15427
// begin if IsInUnit ( Cornel ) then
15365: LD_EXP 44
15369: PPUSH
15370: CALL_OW 310
15374: IFFALSE 15385
// ComExitBuilding ( Cornel ) ;
15376: LD_EXP 44
15380: PPUSH
15381: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15385: LD_EXP 44
15389: PPUSH
15390: LD_INT 22
15392: PUSH
15393: LD_INT 4
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 30
15402: PUSH
15403: LD_INT 4
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PPUSH
15414: CALL_OW 69
15418: PUSH
15419: LD_INT 1
15421: ARRAY
15422: PPUSH
15423: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15427: LD_INT 35
15429: PPUSH
15430: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15434: LD_ADDR_VAR 0 3
15438: PUSH
15439: LD_INT 22
15441: PUSH
15442: LD_INT 4
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 21
15451: PUSH
15452: LD_INT 3
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: LD_INT 3
15461: PUSH
15462: LD_INT 24
15464: PUSH
15465: LD_INT 1000
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: LIST
15480: PPUSH
15481: CALL_OW 69
15485: ST_TO_ADDR
// if filter and has_eng then
15486: LD_VAR 0 3
15490: PUSH
15491: LD_VAR 0 2
15495: AND
15496: IFFALSE 15562
// begin for i in has_eng do
15498: LD_ADDR_VAR 0 1
15502: PUSH
15503: LD_VAR 0 2
15507: PUSH
15508: FOR_IN
15509: IFFALSE 15558
// begin if IsInUnit ( i ) then
15511: LD_VAR 0 1
15515: PPUSH
15516: CALL_OW 310
15520: IFFALSE 15531
// ComExitBuilding ( i ) ;
15522: LD_VAR 0 1
15526: PPUSH
15527: CALL_OW 122
// Wait ( 3 ) ;
15531: LD_INT 3
15533: PPUSH
15534: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
15538: LD_VAR 0 1
15542: PPUSH
15543: LD_VAR 0 3
15547: PUSH
15548: LD_INT 1
15550: ARRAY
15551: PPUSH
15552: CALL_OW 130
// end ;
15556: GO 15508
15558: POP
15559: POP
// end else
15560: GO 15616
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
15562: LD_VAR 0 2
15566: PUSH
15567: LD_VAR 0 2
15571: PPUSH
15572: LD_INT 56
15574: PUSH
15575: EMPTY
15576: LIST
15577: PPUSH
15578: CALL_OW 72
15582: AND
15583: IFFALSE 15616
// for i in has_eng do
15585: LD_ADDR_VAR 0 1
15589: PUSH
15590: LD_VAR 0 2
15594: PUSH
15595: FOR_IN
15596: IFFALSE 15614
// ComEnterUnit ( i , dep ) ;
15598: LD_VAR 0 1
15602: PPUSH
15603: LD_VAR 0 4
15607: PPUSH
15608: CALL_OW 120
15612: GO 15595
15614: POP
15615: POP
// until cornel_prepared ;
15616: LD_EXP 11
15620: IFFALSE 15427
// end ;
15622: PPOPN 8
15624: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
15625: LD_EXP 11
15629: IFFALSE 16028
15631: GO 15633
15633: DISABLE
15634: LD_INT 0
15636: PPUSH
15637: PPUSH
15638: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
15639: LD_ADDR_VAR 0 2
15643: PUSH
15644: LD_INT 22
15646: PUSH
15647: LD_INT 4
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 30
15656: PUSH
15657: LD_INT 4
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PPUSH
15668: CALL_OW 69
15672: PUSH
15673: LD_INT 1
15675: ARRAY
15676: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
15677: LD_EXP 6
15681: PPUSH
15682: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
15686: LD_EXP 45
15690: PUSH
15691: LD_EXP 45
15695: PPUSH
15696: CALL_OW 310
15700: AND
15701: IFFALSE 15712
// ComExitBuilding ( Bierezov ) ;
15703: LD_EXP 45
15707: PPUSH
15708: CALL_OW 122
// Wait ( 0 0$03 ) ;
15712: LD_INT 105
15714: PPUSH
15715: CALL_OW 67
// for i in cornel_units do
15719: LD_ADDR_VAR 0 1
15723: PUSH
15724: LD_EXP 6
15728: PUSH
15729: FOR_IN
15730: IFFALSE 15806
// begin if GetClass ( i ) in [ 2 , 3 ] then
15732: LD_VAR 0 1
15736: PPUSH
15737: CALL_OW 257
15741: PUSH
15742: LD_INT 2
15744: PUSH
15745: LD_INT 3
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: IN
15752: IFFALSE 15789
// begin ComEnterUnit ( i , arm ) ;
15754: LD_VAR 0 1
15758: PPUSH
15759: LD_VAR 0 2
15763: PPUSH
15764: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
15768: LD_VAR 0 1
15772: PPUSH
15773: LD_INT 1
15775: PPUSH
15776: CALL_OW 183
// AddComExitBuilding ( i ) ;
15780: LD_VAR 0 1
15784: PPUSH
15785: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
15789: LD_VAR 0 1
15793: PPUSH
15794: LD_INT 257
15796: PPUSH
15797: LD_INT 121
15799: PPUSH
15800: CALL_OW 171
// end ;
15804: GO 15729
15806: POP
15807: POP
// Wait ( 1 1$00 ) ;
15808: LD_INT 2100
15810: PPUSH
15811: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
15815: LD_ADDR_VAR 0 3
15819: PUSH
15820: LD_EXP 44
15824: PUSH
15825: LD_EXP 45
15829: ADD
15830: PUSH
15831: LD_EXP 6
15835: ADD
15836: PUSH
15837: LD_EXP 6
15841: PPUSH
15842: LD_INT 21
15844: PUSH
15845: LD_INT 2
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PPUSH
15852: CALL_OW 72
15856: DIFF
15857: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
15858: LD_VAR 0 3
15862: PPUSH
15863: LD_INT 248
15865: PPUSH
15866: LD_INT 85
15868: PPUSH
15869: CALL_OW 111
// AddComHold ( filter ) ;
15873: LD_VAR 0 3
15877: PPUSH
15878: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
15882: LD_INT 35
15884: PPUSH
15885: CALL_OW 67
// until cornel_attack ;
15889: LD_EXP 9
15893: IFFALSE 15882
// ComAgressiveMove ( filter , 209 , 63 ) ;
15895: LD_VAR 0 3
15899: PPUSH
15900: LD_INT 209
15902: PPUSH
15903: LD_INT 63
15905: PPUSH
15906: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
15910: LD_EXP 44
15914: PPUSH
15915: LD_INT 208
15917: PPUSH
15918: LD_INT 62
15920: PPUSH
15921: CALL_OW 114
// AddComHold ( Cornel ) ;
15925: LD_EXP 44
15929: PPUSH
15930: CALL_OW 200
// if Bierezov then
15934: LD_EXP 45
15938: IFFALSE 16028
// begin filter := filter diff Bierezov ;
15940: LD_ADDR_VAR 0 3
15944: PUSH
15945: LD_VAR 0 3
15949: PUSH
15950: LD_EXP 45
15954: DIFF
15955: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
15956: LD_EXP 45
15960: PPUSH
15961: LD_INT 6
15963: PPUSH
15964: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
15968: LD_EXP 45
15972: PPUSH
15973: LD_INT 235
15975: PPUSH
15976: LD_INT 60
15978: PPUSH
15979: CALL_OW 111
// AddComHold ( Bierezov ) ;
15983: LD_EXP 45
15987: PPUSH
15988: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
15992: LD_EXP 45
15996: PPUSH
15997: LD_INT 350
15999: PPUSH
16000: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16004: LD_EXP 45
16008: PPUSH
16009: LD_INT 198
16011: PPUSH
16012: LD_INT 28
16014: PPUSH
16015: CALL_OW 171
// AddComHold ( Bierezov ) ;
16019: LD_EXP 45
16023: PPUSH
16024: CALL_OW 200
// end ; end ; end_of_file
16028: PPOPN 3
16030: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16031: LD_EXP 53
16035: PUSH
16036: LD_EXP 31
16040: NOT
16041: AND
16042: PUSH
16043: LD_EXP 32
16047: NOT
16048: AND
16049: IFFALSE 16499
16051: GO 16053
16053: DISABLE
16054: LD_INT 0
16056: PPUSH
16057: PPUSH
16058: PPUSH
16059: PPUSH
// begin enable ;
16060: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16061: LD_ADDR_VAR 0 4
16065: PUSH
16066: LD_INT 81
16068: PUSH
16069: LD_INT 3
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PPUSH
16076: CALL_OW 69
16080: ST_TO_ADDR
// for i = 1 to ru_patrol do
16081: LD_ADDR_VAR 0 2
16085: PUSH
16086: DOUBLE
16087: LD_INT 1
16089: DEC
16090: ST_TO_ADDR
16091: LD_EXP 53
16095: PUSH
16096: FOR_TO
16097: IFFALSE 16497
// begin un := ru_patrol [ i ] ;
16099: LD_ADDR_VAR 0 1
16103: PUSH
16104: LD_EXP 53
16108: PUSH
16109: LD_VAR 0 2
16113: ARRAY
16114: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16115: LD_VAR 0 1
16119: PPUSH
16120: LD_INT 13
16122: PPUSH
16123: CALL_OW 308
16127: IFFALSE 16232
// begin if not ru_alert then
16129: LD_EXP 60
16133: NOT
16134: IFFALSE 16144
// ru_alert := true ;
16136: LD_ADDR_EXP 60
16140: PUSH
16141: LD_INT 1
16143: ST_TO_ADDR
// if not See ( 1 , un ) then
16144: LD_INT 1
16146: PPUSH
16147: LD_VAR 0 1
16151: PPUSH
16152: CALL_OW 292
16156: NOT
16157: IFFALSE 16171
// SetLives ( un , 1000 ) ;
16159: LD_VAR 0 1
16163: PPUSH
16164: LD_INT 1000
16166: PPUSH
16167: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16171: LD_ADDR_EXP 53
16175: PUSH
16176: LD_EXP 53
16180: PUSH
16181: LD_VAR 0 1
16185: DIFF
16186: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16187: LD_VAR 0 1
16191: PPUSH
16192: LD_INT 22
16194: PUSH
16195: LD_INT 3
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 30
16204: PUSH
16205: LD_INT 4
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PPUSH
16216: CALL_OW 69
16220: PPUSH
16221: CALL 999 0 1
16225: PPUSH
16226: CALL_OW 120
// continue ;
16230: GO 16096
// end ; if IsOk ( un ) and not HasTask ( un ) then
16232: LD_VAR 0 1
16236: PPUSH
16237: CALL_OW 302
16241: PUSH
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 314
16251: NOT
16252: AND
16253: IFFALSE 16346
// begin for j = 1 to ru_firepoints_south [ i ] do
16255: LD_ADDR_VAR 0 3
16259: PUSH
16260: DOUBLE
16261: LD_INT 1
16263: DEC
16264: ST_TO_ADDR
16265: LD_EXP 59
16269: PUSH
16270: LD_VAR 0 2
16274: ARRAY
16275: PUSH
16276: FOR_TO
16277: IFFALSE 16344
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16279: LD_VAR 0 1
16283: PPUSH
16284: LD_EXP 59
16288: PUSH
16289: LD_VAR 0 2
16293: ARRAY
16294: PUSH
16295: LD_VAR 0 3
16299: ARRAY
16300: PUSH
16301: LD_INT 1
16303: ARRAY
16304: PPUSH
16305: LD_EXP 59
16309: PUSH
16310: LD_VAR 0 2
16314: ARRAY
16315: PUSH
16316: LD_VAR 0 3
16320: ARRAY
16321: PUSH
16322: LD_INT 2
16324: ARRAY
16325: PPUSH
16326: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16330: LD_VAR 0 1
16334: PPUSH
16335: LD_INT 70
16337: PPUSH
16338: CALL_OW 202
// end ;
16342: GO 16276
16344: POP
16345: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL_OW 256
16355: PUSH
16356: LD_INT 700
16358: LESS
16359: PUSH
16360: LD_VAR 0 1
16364: PPUSH
16365: LD_INT 13
16367: PPUSH
16368: CALL_OW 308
16372: NOT
16373: AND
16374: IFFALSE 16426
// begin ComMoveToArea ( un , retreatArea ) ;
16376: LD_VAR 0 1
16380: PPUSH
16381: LD_INT 13
16383: PPUSH
16384: CALL_OW 113
// if not ru_alert_xy then
16388: LD_EXP 61
16392: NOT
16393: IFFALSE 16424
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16395: LD_ADDR_EXP 61
16399: PUSH
16400: LD_VAR 0 1
16404: PPUSH
16405: CALL_OW 250
16409: PUSH
16410: LD_VAR 0 1
16414: PPUSH
16415: CALL_OW 251
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: ST_TO_ADDR
// end else
16424: GO 16495
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16426: LD_VAR 0 1
16430: PPUSH
16431: LD_VAR 0 4
16435: PPUSH
16436: LD_VAR 0 1
16440: PPUSH
16441: CALL_OW 74
16445: PPUSH
16446: CALL_OW 296
16450: PUSH
16451: LD_INT 9
16453: LESS
16454: PUSH
16455: LD_VAR 0 1
16459: PPUSH
16460: CALL_OW 256
16464: PUSH
16465: LD_INT 500
16467: GREATER
16468: AND
16469: IFFALSE 16495
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
16471: LD_VAR 0 1
16475: PPUSH
16476: LD_VAR 0 4
16480: PPUSH
16481: LD_VAR 0 1
16485: PPUSH
16486: CALL_OW 74
16490: PPUSH
16491: CALL_OW 115
// end ;
16495: GO 16096
16497: POP
16498: POP
// end ;
16499: PPOPN 4
16501: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
16502: LD_EXP 60
16506: PUSH
16507: LD_EXP 61
16511: AND
16512: PUSH
16513: LD_EXP 31
16517: NOT
16518: AND
16519: PUSH
16520: LD_EXP 32
16524: NOT
16525: AND
16526: IFFALSE 16736
16528: GO 16530
16530: DISABLE
16531: LD_INT 0
16533: PPUSH
16534: PPUSH
// begin enable ;
16535: ENABLE
// if not ru_vehicles then
16536: LD_EXP 56
16540: NOT
16541: IFFALSE 16545
// exit ;
16543: GO 16736
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16545: LD_ADDR_VAR 0 2
16549: PUSH
16550: LD_INT 81
16552: PUSH
16553: LD_INT 3
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PPUSH
16560: CALL_OW 69
16564: ST_TO_ADDR
// if ru_vehicles then
16565: LD_EXP 56
16569: IFFALSE 16736
// begin for i in ru_vehicles do
16571: LD_ADDR_VAR 0 1
16575: PUSH
16576: LD_EXP 56
16580: PUSH
16581: FOR_IN
16582: IFFALSE 16734
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 302
16593: PUSH
16594: LD_VAR 0 1
16598: PPUSH
16599: LD_VAR 0 2
16603: PPUSH
16604: LD_VAR 0 1
16608: PPUSH
16609: CALL_OW 74
16613: PPUSH
16614: CALL_OW 296
16618: PUSH
16619: LD_INT 9
16621: LESS
16622: AND
16623: IFFALSE 16649
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
16625: LD_VAR 0 1
16629: PPUSH
16630: LD_VAR 0 2
16634: PPUSH
16635: LD_VAR 0 1
16639: PPUSH
16640: CALL_OW 74
16644: PPUSH
16645: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
16649: LD_VAR 0 1
16653: PPUSH
16654: CALL_OW 314
16658: NOT
16659: PUSH
16660: LD_VAR 0 1
16664: PPUSH
16665: CALL_OW 302
16669: AND
16670: PUSH
16671: LD_VAR 0 1
16675: PPUSH
16676: LD_EXP 61
16680: PUSH
16681: LD_INT 1
16683: ARRAY
16684: PPUSH
16685: LD_EXP 61
16689: PUSH
16690: LD_INT 2
16692: ARRAY
16693: PPUSH
16694: CALL_OW 297
16698: PUSH
16699: LD_INT 10
16701: GREATER
16702: AND
16703: IFFALSE 16732
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
16705: LD_VAR 0 1
16709: PPUSH
16710: LD_EXP 61
16714: PUSH
16715: LD_INT 1
16717: ARRAY
16718: PPUSH
16719: LD_EXP 61
16723: PUSH
16724: LD_INT 2
16726: ARRAY
16727: PPUSH
16728: CALL_OW 114
// end ;
16732: GO 16581
16734: POP
16735: POP
// end ; end ;
16736: PPOPN 2
16738: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
16739: LD_EXP 61
16743: PUSH
16744: LD_EXP 60
16748: AND
16749: PUSH
16750: LD_INT 3
16752: PPUSH
16753: CALL_OW 463
16757: NOT
16758: AND
16759: PUSH
16760: LD_EXP 31
16764: NOT
16765: AND
16766: PUSH
16767: LD_EXP 32
16771: NOT
16772: AND
16773: IFFALSE 16868
16775: GO 16777
16777: DISABLE
16778: LD_INT 0
16780: PPUSH
// begin enable ;
16781: ENABLE
// ru_alert_xy := false ;
16782: LD_ADDR_EXP 61
16786: PUSH
16787: LD_INT 0
16789: ST_TO_ADDR
// ru_alert := false ;
16790: LD_ADDR_EXP 60
16794: PUSH
16795: LD_INT 0
16797: ST_TO_ADDR
// if ru_vehicles then
16798: LD_EXP 56
16802: IFFALSE 16868
// for i in ru_vehicles do
16804: LD_ADDR_VAR 0 1
16808: PUSH
16809: LD_EXP 56
16813: PUSH
16814: FOR_IN
16815: IFFALSE 16866
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
16817: LD_VAR 0 1
16821: PPUSH
16822: CALL_OW 302
16826: PUSH
16827: LD_VAR 0 1
16831: PPUSH
16832: LD_INT 89
16834: PPUSH
16835: LD_INT 36
16837: PPUSH
16838: CALL_OW 297
16842: PUSH
16843: LD_INT 10
16845: GREATER
16846: AND
16847: IFFALSE 16864
// ComMoveXY ( i , 89 , 36 ) ;
16849: LD_VAR 0 1
16853: PPUSH
16854: LD_INT 89
16856: PPUSH
16857: LD_INT 36
16859: PPUSH
16860: CALL_OW 111
16864: GO 16814
16866: POP
16867: POP
// end ;
16868: PPOPN 1
16870: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
16871: LD_EXP 55
16875: PUSH
16876: LD_EXP 31
16880: NOT
16881: AND
16882: PUSH
16883: LD_EXP 32
16887: NOT
16888: AND
16889: IFFALSE 17173
16891: GO 16893
16893: DISABLE
16894: LD_INT 0
16896: PPUSH
16897: PPUSH
16898: PPUSH
// begin enable ;
16899: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16900: LD_ADDR_VAR 0 3
16904: PUSH
16905: LD_INT 81
16907: PUSH
16908: LD_INT 3
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PPUSH
16915: CALL_OW 69
16919: ST_TO_ADDR
// for i = 1 to ru_forest do
16920: LD_ADDR_VAR 0 1
16924: PUSH
16925: DOUBLE
16926: LD_INT 1
16928: DEC
16929: ST_TO_ADDR
16930: LD_EXP 55
16934: PUSH
16935: FOR_TO
16936: IFFALSE 17171
// begin un := ru_forest [ i ] ;
16938: LD_ADDR_VAR 0 2
16942: PUSH
16943: LD_EXP 55
16947: PUSH
16948: LD_VAR 0 1
16952: ARRAY
16953: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16954: LD_VAR 0 2
16958: PPUSH
16959: LD_INT 13
16961: PPUSH
16962: CALL_OW 308
16966: IFFALSE 17056
// begin if not See ( 1 , un ) then
16968: LD_INT 1
16970: PPUSH
16971: LD_VAR 0 2
16975: PPUSH
16976: CALL_OW 292
16980: NOT
16981: IFFALSE 16995
// SetLives ( un , 1000 ) ;
16983: LD_VAR 0 2
16987: PPUSH
16988: LD_INT 1000
16990: PPUSH
16991: CALL_OW 234
// ru_forest := ru_forest diff un ;
16995: LD_ADDR_EXP 55
16999: PUSH
17000: LD_EXP 55
17004: PUSH
17005: LD_VAR 0 2
17009: DIFF
17010: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17011: LD_VAR 0 2
17015: PPUSH
17016: LD_INT 22
17018: PUSH
17019: LD_INT 3
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 30
17028: PUSH
17029: LD_INT 4
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 69
17044: PPUSH
17045: CALL 999 0 1
17049: PPUSH
17050: CALL_OW 120
// continue ;
17054: GO 16935
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17056: LD_VAR 0 2
17060: PPUSH
17061: CALL_OW 256
17065: PUSH
17066: LD_INT 700
17068: LESS
17069: PUSH
17070: LD_VAR 0 2
17074: PPUSH
17075: LD_INT 13
17077: PPUSH
17078: CALL_OW 308
17082: NOT
17083: AND
17084: IFFALSE 17100
// ComMoveToArea ( un , retreatArea ) else
17086: LD_VAR 0 2
17090: PPUSH
17091: LD_INT 13
17093: PPUSH
17094: CALL_OW 113
17098: GO 17169
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17100: LD_VAR 0 2
17104: PPUSH
17105: LD_VAR 0 3
17109: PPUSH
17110: LD_VAR 0 2
17114: PPUSH
17115: CALL_OW 74
17119: PPUSH
17120: CALL_OW 296
17124: PUSH
17125: LD_INT 9
17127: LESS
17128: PUSH
17129: LD_VAR 0 2
17133: PPUSH
17134: CALL_OW 256
17138: PUSH
17139: LD_INT 500
17141: GREATER
17142: AND
17143: IFFALSE 17169
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17145: LD_VAR 0 2
17149: PPUSH
17150: LD_VAR 0 3
17154: PPUSH
17155: LD_VAR 0 2
17159: PPUSH
17160: CALL_OW 74
17164: PPUSH
17165: CALL_OW 115
// end ;
17169: GO 16935
17171: POP
17172: POP
// end ;
17173: PPOPN 3
17175: END
// every 0 0$10 trigger not send_attack_on_cornel do var i , filter ;
17176: LD_EXP 32
17180: NOT
17181: IFFALSE 17302
17183: GO 17185
17185: DISABLE
17186: LD_INT 0
17188: PPUSH
17189: PPUSH
// begin enable ;
17190: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
17191: LD_ADDR_VAR 0 2
17195: PUSH
17196: LD_INT 22
17198: PUSH
17199: LD_INT 3
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 21
17208: PUSH
17209: LD_INT 3
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PPUSH
17220: CALL_OW 69
17224: ST_TO_ADDR
// if filter then
17225: LD_VAR 0 2
17229: IFFALSE 17302
// for i in filter do
17231: LD_ADDR_VAR 0 1
17235: PUSH
17236: LD_VAR 0 2
17240: PUSH
17241: FOR_IN
17242: IFFALSE 17300
// if GetLives ( i ) < 990 then
17244: LD_VAR 0 1
17248: PPUSH
17249: CALL_OW 256
17253: PUSH
17254: LD_INT 990
17256: LESS
17257: IFFALSE 17298
// begin ru_alert := true ;
17259: LD_ADDR_EXP 60
17263: PUSH
17264: LD_INT 1
17266: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17267: LD_ADDR_EXP 61
17271: PUSH
17272: LD_VAR 0 1
17276: PPUSH
17277: CALL_OW 250
17281: PUSH
17282: LD_VAR 0 1
17286: PPUSH
17287: CALL_OW 251
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: ST_TO_ADDR
// break ;
17296: GO 17300
// end ;
17298: GO 17241
17300: POP
17301: POP
// end ;
17302: PPOPN 2
17304: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17305: LD_EXP 31
17309: IFFALSE 17458
17311: GO 17313
17313: DISABLE
17314: LD_INT 0
17316: PPUSH
17317: PPUSH
17318: PPUSH
17319: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17320: LD_ADDR_VAR 0 4
17324: PUSH
17325: LD_EXP 56
17329: PUSH
17330: LD_EXP 55
17334: ADD
17335: PUSH
17336: LD_EXP 53
17340: ADD
17341: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17342: LD_ADDR_VAR 0 3
17346: PUSH
17347: LD_INT 3
17349: PPUSH
17350: LD_INT 81
17352: PUSH
17353: LD_INT 3
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PPUSH
17360: CALL_OW 70
17364: ST_TO_ADDR
// if filter and enemy then
17365: LD_VAR 0 4
17369: PUSH
17370: LD_VAR 0 3
17374: AND
17375: IFFALSE 17458
// repeat wait ( 0 0$01 ) ;
17377: LD_INT 35
17379: PPUSH
17380: CALL_OW 67
// for i in filter do
17384: LD_ADDR_VAR 0 1
17388: PUSH
17389: LD_VAR 0 4
17393: PUSH
17394: FOR_IN
17395: IFFALSE 17423
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17397: LD_VAR 0 1
17401: PPUSH
17402: LD_VAR 0 3
17406: PPUSH
17407: LD_VAR 0 1
17411: PPUSH
17412: CALL_OW 74
17416: PPUSH
17417: CALL_OW 115
// end ;
17421: GO 17394
17423: POP
17424: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
17425: LD_INT 3
17427: PPUSH
17428: LD_INT 81
17430: PUSH
17431: LD_INT 3
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PPUSH
17438: CALL_OW 70
17442: PUSH
17443: LD_INT 0
17445: EQUAL
17446: PUSH
17447: LD_VAR 0 4
17451: PUSH
17452: LD_INT 0
17454: EQUAL
17455: OR
17456: IFFALSE 17377
// end ;
17458: PPOPN 4
17460: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
17461: LD_EXP 26
17465: PUSH
17466: LD_INT 22
17468: PUSH
17469: LD_INT 4
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 30
17478: PUSH
17479: LD_INT 4
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 3
17488: PUSH
17489: LD_INT 57
17491: PUSH
17492: EMPTY
17493: LIST
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: LIST
17503: PPUSH
17504: CALL_OW 69
17508: AND
17509: IFFALSE 17558
17511: GO 17513
17513: DISABLE
17514: LD_INT 0
17516: PPUSH
// begin if not ru_cornel_attack then
17517: LD_EXP 58
17521: NOT
17522: IFFALSE 17526
// exit ;
17524: GO 17558
// for i in ru_cornel_attack do
17526: LD_ADDR_VAR 0 1
17530: PUSH
17531: LD_EXP 58
17535: PUSH
17536: FOR_IN
17537: IFFALSE 17556
// ComAgressiveMove ( i , 258 , 119 ) ;
17539: LD_VAR 0 1
17543: PPUSH
17544: LD_INT 258
17546: PPUSH
17547: LD_INT 119
17549: PPUSH
17550: CALL_OW 114
17554: GO 17536
17556: POP
17557: POP
// end ; end_of_file
17558: PPOPN 1
17560: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
17561: LD_EXP 5
17565: PUSH
17566: LD_EXP 9
17570: NOT
17571: AND
17572: PUSH
17573: LD_EXP 20
17577: AND
17578: IFFALSE 17690
17580: GO 17582
17582: DISABLE
17583: LD_INT 0
17585: PPUSH
// begin enable ;
17586: ENABLE
// crates_counter := crates_counter - 50 ;
17587: LD_ADDR_EXP 20
17591: PUSH
17592: LD_EXP 20
17596: PUSH
17597: LD_INT 50
17599: MINUS
17600: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
17601: LD_INT 8
17603: PPUSH
17604: LD_INT 2
17606: PPUSH
17607: LD_INT 5
17609: PPUSH
17610: CALL_OW 12
17614: PPUSH
17615: LD_INT 1
17617: PPUSH
17618: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
17622: LD_INT 1785
17624: PPUSH
17625: LD_INT 2345
17627: PPUSH
17628: CALL_OW 12
17632: PPUSH
17633: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
17637: LD_ADDR_VAR 0 1
17641: PUSH
17642: LD_INT 1
17644: PPUSH
17645: LD_OWVAR 67
17649: PUSH
17650: LD_INT 2
17652: PLUS
17653: PPUSH
17654: CALL_OW 12
17658: ST_TO_ADDR
// if r < 3 then
17659: LD_VAR 0 1
17663: PUSH
17664: LD_INT 3
17666: LESS
17667: IFFALSE 17690
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
17669: LD_INT 4
17671: PPUSH
17672: LD_INT 1
17674: PPUSH
17675: LD_INT 5
17677: PPUSH
17678: CALL_OW 12
17682: PPUSH
17683: LD_INT 1
17685: PPUSH
17686: CALL_OW 55
// end ;
17690: PPOPN 1
17692: END
// every 0 0$01 trigger cornel_active do
17693: LD_EXP 8
17697: IFFALSE 17786
17699: GO 17701
17701: DISABLE
// begin Wait ( 0 0$03 ) ;
17702: LD_INT 105
17704: PPUSH
17705: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17709: LD_INT 2
17711: PPUSH
17712: LD_INT 5
17714: PPUSH
17715: CALL_OW 12
17719: PPUSH
17720: LD_INT 10
17722: PPUSH
17723: LD_INT 1
17725: PPUSH
17726: CALL_OW 55
// Wait ( 0 0$13 ) ;
17730: LD_INT 455
17732: PPUSH
17733: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17737: LD_INT 2
17739: PPUSH
17740: LD_INT 5
17742: PPUSH
17743: CALL_OW 12
17747: PPUSH
17748: LD_INT 10
17750: PPUSH
17751: LD_INT 1
17753: PPUSH
17754: CALL_OW 55
// Wait ( 0 0$16 ) ;
17758: LD_INT 560
17760: PPUSH
17761: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17765: LD_INT 2
17767: PPUSH
17768: LD_INT 5
17770: PPUSH
17771: CALL_OW 12
17775: PPUSH
17776: LD_INT 10
17778: PPUSH
17779: LD_INT 1
17781: PPUSH
17782: CALL_OW 55
// end ; end_of_file
17786: END
// every 0 0$01 trigger cornel_prepared do
17787: LD_EXP 11
17791: IFFALSE 17850
17793: GO 17795
17795: DISABLE
// begin enable ;
17796: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
17797: LD_ADDR_OWVAR 47
17801: PUSH
17802: LD_STRING #Am03-1
17804: PUSH
17805: LD_EXP 10
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
17814: LD_ADDR_EXP 10
17818: PUSH
17819: LD_EXP 10
17823: PPUSH
17824: LD_STRING -
17826: PPUSH
17827: CALL 1069 0 2
17831: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
17832: LD_EXP 10
17836: PUSH
17837: LD_INT 0
17839: EQUAL
17840: IFFALSE 17850
// begin Display_Strings := [ ] ;
17842: LD_ADDR_OWVAR 47
17846: PUSH
17847: EMPTY
17848: ST_TO_ADDR
// disable ;
17849: DISABLE
// end ; end ;
17850: END
// every 0 0$01 trigger debug and debug_strings do
17851: LD_EXP 1
17855: PUSH
17856: LD_OWVAR 48
17860: AND
17861: IFFALSE 17877
17863: GO 17865
17865: DISABLE
// begin enable ;
17866: ENABLE
// Display_Strings := debug_strings ;
17867: LD_ADDR_OWVAR 47
17871: PUSH
17872: LD_OWVAR 48
17876: ST_TO_ADDR
// end ; end_of_file
17877: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 1 and not solar_builded then
17878: LD_VAR 0 1
17882: PPUSH
17883: CALL_OW 255
17887: PUSH
17888: LD_INT 1
17890: EQUAL
17891: PUSH
17892: LD_EXP 14
17896: NOT
17897: AND
17898: IFFALSE 17908
// solar_builded := true ;
17900: LD_ADDR_EXP 14
17904: PUSH
17905: LD_INT 1
17907: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
17908: LD_VAR 0 1
17912: PPUSH
17913: CALL_OW 255
17917: PUSH
17918: LD_INT 1
17920: EQUAL
17921: PUSH
17922: LD_EXP 29
17926: AND
17927: IFFALSE 17960
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ;
17929: LD_ADDR_EXP 29
17933: PUSH
17934: LD_EXP 29
17938: PUSH
17939: LD_INT 1750
17941: PUSH
17942: LD_INT 1400
17944: PUSH
17945: LD_INT 1225
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: LIST
17952: PUSH
17953: LD_OWVAR 67
17957: ARRAY
17958: PLUS
17959: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 255
17969: PUSH
17970: LD_INT 3
17972: EQUAL
17973: IFFALSE 17991
// ru_vehicles := ru_vehicles ^ veh ;
17975: LD_ADDR_EXP 56
17979: PUSH
17980: LD_EXP 56
17984: PUSH
17985: LD_VAR 0 1
17989: ADD
17990: ST_TO_ADDR
// end ;
17991: PPOPN 2
17993: END
// on UnitDestroyed ( un ) do begin if un in ru_patrol then
17994: LD_VAR 0 1
17998: PUSH
17999: LD_EXP 53
18003: IN
18004: IFFALSE 18022
// ru_patrol := ru_patrol diff un ;
18006: LD_ADDR_EXP 53
18010: PUSH
18011: LD_EXP 53
18015: PUSH
18016: LD_VAR 0 1
18020: DIFF
18021: ST_TO_ADDR
// if un in ru_forest then
18022: LD_VAR 0 1
18026: PUSH
18027: LD_EXP 55
18031: IN
18032: IFFALSE 18050
// ru_forest := ru_forest diff un ;
18034: LD_ADDR_EXP 55
18038: PUSH
18039: LD_EXP 55
18043: PUSH
18044: LD_VAR 0 1
18048: DIFF
18049: ST_TO_ADDR
// if un in ru_vehicles then
18050: LD_VAR 0 1
18054: PUSH
18055: LD_EXP 56
18059: IN
18060: IFFALSE 18166
// begin ru_vehicles := ru_vehicles diff un ;
18062: LD_ADDR_EXP 56
18066: PUSH
18067: LD_EXP 56
18071: PUSH
18072: LD_VAR 0 1
18076: DIFF
18077: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18078: LD_ADDR_EXP 57
18082: PUSH
18083: LD_EXP 57
18087: PUSH
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL_OW 265
18097: PUSH
18098: LD_VAR 0 1
18102: PPUSH
18103: CALL_OW 262
18107: PUSH
18108: LD_VAR 0 1
18112: PPUSH
18113: CALL_OW 263
18117: PUSH
18118: LD_VAR 0 1
18122: PPUSH
18123: CALL_OW 264
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: ADD
18134: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18135: LD_ADDR_EXP 13
18139: PUSH
18140: LD_EXP 13
18144: PUSH
18145: LD_INT 1
18147: PLUS
18148: ST_TO_ADDR
// if ach_counter = 10 then
18149: LD_EXP 13
18153: PUSH
18154: LD_INT 10
18156: EQUAL
18157: IFFALSE 18166
// SetAchievement ( ACH_FAUST ) ;
18159: LD_STRING ACH_FAUST
18161: PPUSH
18162: CALL_OW 543
// end ; if un = Pokryshkin then
18166: LD_VAR 0 1
18170: PUSH
18171: LD_EXP 52
18175: EQUAL
18176: IFFALSE 18185
// SetAchievement ( ACH_POKR ) ;
18178: LD_STRING ACH_POKR
18180: PPUSH
18181: CALL_OW 543
// if un = JMM then
18185: LD_VAR 0 1
18189: PUSH
18190: LD_EXP 37
18194: EQUAL
18195: IFFALSE 18204
// YouLost ( 0 ) ;
18197: LD_STRING 0
18199: PPUSH
18200: CALL_OW 104
// if un = us_dep_west then
18204: LD_VAR 0 1
18208: PUSH
18209: LD_INT 1
18211: EQUAL
18212: IFFALSE 18221
// YouLost ( 2 ) ;
18214: LD_STRING 2
18216: PPUSH
18217: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18221: LD_VAR 0 1
18225: PPUSH
18226: CALL_OW 255
18230: PUSH
18231: LD_INT 8
18233: EQUAL
18234: PUSH
18235: LD_EXP 5
18239: NOT
18240: AND
18241: IFFALSE 18250
// YouLost ( 4 ) ;
18243: LD_STRING 4
18245: PPUSH
18246: CALL_OW 104
// if un in jmm_units then
18250: LD_VAR 0 1
18254: PUSH
18255: LD_EXP 4
18259: IN
18260: IFFALSE 18276
// lose_counter := lose_counter + 1 ;
18262: LD_ADDR_EXP 34
18266: PUSH
18267: LD_EXP 34
18271: PUSH
18272: LD_INT 1
18274: PLUS
18275: ST_TO_ADDR
// end ;
18276: PPOPN 1
18278: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18279: LD_INT 0
18281: PPUSH
18282: PPUSH
// begin if GetSide ( driver ) = 3 then
18283: LD_VAR 0 1
18287: PPUSH
18288: CALL_OW 255
18292: PUSH
18293: LD_INT 3
18295: EQUAL
18296: IFFALSE 18374
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18298: LD_ADDR_VAR 0 6
18302: PUSH
18303: LD_INT 22
18305: PUSH
18306: LD_INT 3
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 30
18315: PUSH
18316: LD_INT 3
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PPUSH
18327: CALL_OW 69
18331: PPUSH
18332: CALL 999 0 1
18336: ST_TO_ADDR
// if place then
18337: LD_VAR 0 6
18341: IFFALSE 18359
// ComEnterUnit ( driver , place ) else
18343: LD_VAR 0 1
18347: PPUSH
18348: LD_VAR 0 6
18352: PPUSH
18353: CALL_OW 120
18357: GO 18374
// ComMoveXY ( driver , 70 , 22 ) ;
18359: LD_VAR 0 1
18363: PPUSH
18364: LD_INT 70
18366: PPUSH
18367: LD_INT 22
18369: PPUSH
18370: CALL_OW 111
// end ; end ;
18374: PPOPN 6
18376: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
18377: LD_VAR 0 1
18381: PUSH
18382: LD_INT 1
18384: EQUAL
18385: PUSH
18386: LD_VAR 0 2
18390: PUSH
18391: LD_INT 4
18393: EQUAL
18394: PUSH
18395: LD_VAR 0 2
18399: PUSH
18400: LD_INT 8
18402: EQUAL
18403: PUSH
18404: LD_EXP 5
18408: NOT
18409: AND
18410: OR
18411: AND
18412: IFFALSE 18421
// YouLost ( 5 ) ;
18414: LD_STRING 5
18416: PPUSH
18417: CALL_OW 104
// end ;
18421: PPOPN 2
18423: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
18424: LD_EXP 36
18428: PUSH
18429: LD_INT 22
18431: PUSH
18432: LD_INT 1
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 21
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PPUSH
18453: CALL_OW 69
18457: PUSH
18458: LD_INT 22
18460: PUSH
18461: LD_INT 8
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 21
18470: PUSH
18471: LD_INT 1
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PPUSH
18482: CALL_OW 69
18486: ADD
18487: PLUS
18488: PUSH
18489: LD_INT 5
18491: LESS
18492: IFFALSE 18504
18494: GO 18496
18496: DISABLE
// YouLost ( 1 ) ;
18497: LD_STRING 1
18499: PPUSH
18500: CALL_OW 104
18504: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
18505: LD_INT 1
18507: PPUSH
18508: CALL_OW 255
18512: PUSH
18513: LD_INT 3
18515: EQUAL
18516: IFFALSE 18528
18518: GO 18520
18520: DISABLE
// YouLost ( 3 ) ; end_of_file
18521: LD_STRING 3
18523: PPUSH
18524: CALL_OW 104
18528: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
18529: LD_INT 0
18531: PPUSH
// ar_miner := 81 ;
18532: LD_ADDR_EXP 69
18536: PUSH
18537: LD_INT 81
18539: ST_TO_ADDR
// ar_crane := 88 ;
18540: LD_ADDR_EXP 68
18544: PUSH
18545: LD_INT 88
18547: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18548: LD_ADDR_EXP 63
18552: PUSH
18553: LD_INT 89
18555: ST_TO_ADDR
// us_hack := 99 ;
18556: LD_ADDR_EXP 64
18560: PUSH
18561: LD_INT 99
18563: ST_TO_ADDR
// us_artillery := 97 ;
18564: LD_ADDR_EXP 65
18568: PUSH
18569: LD_INT 97
18571: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18572: LD_ADDR_EXP 66
18576: PUSH
18577: LD_INT 91
18579: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
18580: LD_ADDR_EXP 67
18584: PUSH
18585: LD_INT 92
18587: ST_TO_ADDR
// ru_radar := 98 ;
18588: LD_ADDR_EXP 62
18592: PUSH
18593: LD_INT 98
18595: ST_TO_ADDR
// tech_Artillery := 80 ;
18596: LD_ADDR_EXP 70
18600: PUSH
18601: LD_INT 80
18603: ST_TO_ADDR
// tech_RadMat := 81 ;
18604: LD_ADDR_EXP 71
18608: PUSH
18609: LD_INT 81
18611: ST_TO_ADDR
// tech_BasicTools := 82 ;
18612: LD_ADDR_EXP 72
18616: PUSH
18617: LD_INT 82
18619: ST_TO_ADDR
// tech_Cargo := 83 ;
18620: LD_ADDR_EXP 73
18624: PUSH
18625: LD_INT 83
18627: ST_TO_ADDR
// tech_Track := 84 ;
18628: LD_ADDR_EXP 74
18632: PUSH
18633: LD_INT 84
18635: ST_TO_ADDR
// tech_Crane := 85 ;
18636: LD_ADDR_EXP 75
18640: PUSH
18641: LD_INT 85
18643: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18644: LD_ADDR_EXP 76
18648: PUSH
18649: LD_INT 86
18651: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18652: LD_ADDR_EXP 77
18656: PUSH
18657: LD_INT 87
18659: ST_TO_ADDR
// end ;
18660: LD_VAR 0 1
18664: RET
// every 1 do
18665: GO 18667
18667: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18668: CALL 18529 0 0
18672: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
18673: LD_VAR 0 2
18677: PUSH
18678: LD_INT 100
18680: EQUAL
18681: IFFALSE 19630
// begin if not StreamModeActive then
18683: LD_EXP 78
18687: NOT
18688: IFFALSE 18698
// StreamModeActive := true ;
18690: LD_ADDR_EXP 78
18694: PUSH
18695: LD_INT 1
18697: ST_TO_ADDR
// if p3 = 0 then
18698: LD_VAR 0 3
18702: PUSH
18703: LD_INT 0
18705: EQUAL
18706: IFFALSE 18712
// InitStreamMode ;
18708: CALL 19788 0 0
// if p3 = 1 then
18712: LD_VAR 0 3
18716: PUSH
18717: LD_INT 1
18719: EQUAL
18720: IFFALSE 18730
// sRocket := true ;
18722: LD_ADDR_EXP 83
18726: PUSH
18727: LD_INT 1
18729: ST_TO_ADDR
// if p3 = 2 then
18730: LD_VAR 0 3
18734: PUSH
18735: LD_INT 2
18737: EQUAL
18738: IFFALSE 18748
// sSpeed := true ;
18740: LD_ADDR_EXP 82
18744: PUSH
18745: LD_INT 1
18747: ST_TO_ADDR
// if p3 = 3 then
18748: LD_VAR 0 3
18752: PUSH
18753: LD_INT 3
18755: EQUAL
18756: IFFALSE 18766
// sEngine := true ;
18758: LD_ADDR_EXP 84
18762: PUSH
18763: LD_INT 1
18765: ST_TO_ADDR
// if p3 = 4 then
18766: LD_VAR 0 3
18770: PUSH
18771: LD_INT 4
18773: EQUAL
18774: IFFALSE 18784
// sSpec := true ;
18776: LD_ADDR_EXP 81
18780: PUSH
18781: LD_INT 1
18783: ST_TO_ADDR
// if p3 = 5 then
18784: LD_VAR 0 3
18788: PUSH
18789: LD_INT 5
18791: EQUAL
18792: IFFALSE 18802
// sLevel := true ;
18794: LD_ADDR_EXP 85
18798: PUSH
18799: LD_INT 1
18801: ST_TO_ADDR
// if p3 = 6 then
18802: LD_VAR 0 3
18806: PUSH
18807: LD_INT 6
18809: EQUAL
18810: IFFALSE 18820
// sArmoury := true ;
18812: LD_ADDR_EXP 86
18816: PUSH
18817: LD_INT 1
18819: ST_TO_ADDR
// if p3 = 7 then
18820: LD_VAR 0 3
18824: PUSH
18825: LD_INT 7
18827: EQUAL
18828: IFFALSE 18838
// sRadar := true ;
18830: LD_ADDR_EXP 87
18834: PUSH
18835: LD_INT 1
18837: ST_TO_ADDR
// if p3 = 8 then
18838: LD_VAR 0 3
18842: PUSH
18843: LD_INT 8
18845: EQUAL
18846: IFFALSE 18856
// sBunker := true ;
18848: LD_ADDR_EXP 88
18852: PUSH
18853: LD_INT 1
18855: ST_TO_ADDR
// if p3 = 9 then
18856: LD_VAR 0 3
18860: PUSH
18861: LD_INT 9
18863: EQUAL
18864: IFFALSE 18874
// sHack := true ;
18866: LD_ADDR_EXP 89
18870: PUSH
18871: LD_INT 1
18873: ST_TO_ADDR
// if p3 = 10 then
18874: LD_VAR 0 3
18878: PUSH
18879: LD_INT 10
18881: EQUAL
18882: IFFALSE 18892
// sFire := true ;
18884: LD_ADDR_EXP 90
18888: PUSH
18889: LD_INT 1
18891: ST_TO_ADDR
// if p3 = 11 then
18892: LD_VAR 0 3
18896: PUSH
18897: LD_INT 11
18899: EQUAL
18900: IFFALSE 18910
// sRefresh := true ;
18902: LD_ADDR_EXP 91
18906: PUSH
18907: LD_INT 1
18909: ST_TO_ADDR
// if p3 = 12 then
18910: LD_VAR 0 3
18914: PUSH
18915: LD_INT 12
18917: EQUAL
18918: IFFALSE 18928
// sExp := true ;
18920: LD_ADDR_EXP 92
18924: PUSH
18925: LD_INT 1
18927: ST_TO_ADDR
// if p3 = 13 then
18928: LD_VAR 0 3
18932: PUSH
18933: LD_INT 13
18935: EQUAL
18936: IFFALSE 18946
// sDepot := true ;
18938: LD_ADDR_EXP 93
18942: PUSH
18943: LD_INT 1
18945: ST_TO_ADDR
// if p3 = 14 then
18946: LD_VAR 0 3
18950: PUSH
18951: LD_INT 14
18953: EQUAL
18954: IFFALSE 18964
// sFlag := true ;
18956: LD_ADDR_EXP 94
18960: PUSH
18961: LD_INT 1
18963: ST_TO_ADDR
// if p3 = 15 then
18964: LD_VAR 0 3
18968: PUSH
18969: LD_INT 15
18971: EQUAL
18972: IFFALSE 18982
// sKamikadze := true ;
18974: LD_ADDR_EXP 102
18978: PUSH
18979: LD_INT 1
18981: ST_TO_ADDR
// if p3 = 16 then
18982: LD_VAR 0 3
18986: PUSH
18987: LD_INT 16
18989: EQUAL
18990: IFFALSE 19000
// sTroll := true ;
18992: LD_ADDR_EXP 103
18996: PUSH
18997: LD_INT 1
18999: ST_TO_ADDR
// if p3 = 17 then
19000: LD_VAR 0 3
19004: PUSH
19005: LD_INT 17
19007: EQUAL
19008: IFFALSE 19018
// sSlow := true ;
19010: LD_ADDR_EXP 104
19014: PUSH
19015: LD_INT 1
19017: ST_TO_ADDR
// if p3 = 18 then
19018: LD_VAR 0 3
19022: PUSH
19023: LD_INT 18
19025: EQUAL
19026: IFFALSE 19036
// sLack := true ;
19028: LD_ADDR_EXP 105
19032: PUSH
19033: LD_INT 1
19035: ST_TO_ADDR
// if p3 = 19 then
19036: LD_VAR 0 3
19040: PUSH
19041: LD_INT 19
19043: EQUAL
19044: IFFALSE 19054
// sTank := true ;
19046: LD_ADDR_EXP 107
19050: PUSH
19051: LD_INT 1
19053: ST_TO_ADDR
// if p3 = 20 then
19054: LD_VAR 0 3
19058: PUSH
19059: LD_INT 20
19061: EQUAL
19062: IFFALSE 19072
// sRemote := true ;
19064: LD_ADDR_EXP 108
19068: PUSH
19069: LD_INT 1
19071: ST_TO_ADDR
// if p3 = 21 then
19072: LD_VAR 0 3
19076: PUSH
19077: LD_INT 21
19079: EQUAL
19080: IFFALSE 19090
// sPowell := true ;
19082: LD_ADDR_EXP 109
19086: PUSH
19087: LD_INT 1
19089: ST_TO_ADDR
// if p3 = 22 then
19090: LD_VAR 0 3
19094: PUSH
19095: LD_INT 22
19097: EQUAL
19098: IFFALSE 19108
// sTeleport := true ;
19100: LD_ADDR_EXP 112
19104: PUSH
19105: LD_INT 1
19107: ST_TO_ADDR
// if p3 = 23 then
19108: LD_VAR 0 3
19112: PUSH
19113: LD_INT 23
19115: EQUAL
19116: IFFALSE 19126
// sOilTower := true ;
19118: LD_ADDR_EXP 114
19122: PUSH
19123: LD_INT 1
19125: ST_TO_ADDR
// if p3 = 24 then
19126: LD_VAR 0 3
19130: PUSH
19131: LD_INT 24
19133: EQUAL
19134: IFFALSE 19144
// sShovel := true ;
19136: LD_ADDR_EXP 115
19140: PUSH
19141: LD_INT 1
19143: ST_TO_ADDR
// if p3 = 25 then
19144: LD_VAR 0 3
19148: PUSH
19149: LD_INT 25
19151: EQUAL
19152: IFFALSE 19162
// sSheik := true ;
19154: LD_ADDR_EXP 116
19158: PUSH
19159: LD_INT 1
19161: ST_TO_ADDR
// if p3 = 26 then
19162: LD_VAR 0 3
19166: PUSH
19167: LD_INT 26
19169: EQUAL
19170: IFFALSE 19180
// sEarthquake := true ;
19172: LD_ADDR_EXP 118
19176: PUSH
19177: LD_INT 1
19179: ST_TO_ADDR
// if p3 = 27 then
19180: LD_VAR 0 3
19184: PUSH
19185: LD_INT 27
19187: EQUAL
19188: IFFALSE 19198
// sAI := true ;
19190: LD_ADDR_EXP 119
19194: PUSH
19195: LD_INT 1
19197: ST_TO_ADDR
// if p3 = 28 then
19198: LD_VAR 0 3
19202: PUSH
19203: LD_INT 28
19205: EQUAL
19206: IFFALSE 19216
// sCargo := true ;
19208: LD_ADDR_EXP 122
19212: PUSH
19213: LD_INT 1
19215: ST_TO_ADDR
// if p3 = 29 then
19216: LD_VAR 0 3
19220: PUSH
19221: LD_INT 29
19223: EQUAL
19224: IFFALSE 19234
// sDLaser := true ;
19226: LD_ADDR_EXP 123
19230: PUSH
19231: LD_INT 1
19233: ST_TO_ADDR
// if p3 = 30 then
19234: LD_VAR 0 3
19238: PUSH
19239: LD_INT 30
19241: EQUAL
19242: IFFALSE 19252
// sExchange := true ;
19244: LD_ADDR_EXP 124
19248: PUSH
19249: LD_INT 1
19251: ST_TO_ADDR
// if p3 = 31 then
19252: LD_VAR 0 3
19256: PUSH
19257: LD_INT 31
19259: EQUAL
19260: IFFALSE 19270
// sFac := true ;
19262: LD_ADDR_EXP 125
19266: PUSH
19267: LD_INT 1
19269: ST_TO_ADDR
// if p3 = 32 then
19270: LD_VAR 0 3
19274: PUSH
19275: LD_INT 32
19277: EQUAL
19278: IFFALSE 19288
// sPower := true ;
19280: LD_ADDR_EXP 126
19284: PUSH
19285: LD_INT 1
19287: ST_TO_ADDR
// if p3 = 33 then
19288: LD_VAR 0 3
19292: PUSH
19293: LD_INT 33
19295: EQUAL
19296: IFFALSE 19306
// sRandom := true ;
19298: LD_ADDR_EXP 127
19302: PUSH
19303: LD_INT 1
19305: ST_TO_ADDR
// if p3 = 34 then
19306: LD_VAR 0 3
19310: PUSH
19311: LD_INT 34
19313: EQUAL
19314: IFFALSE 19324
// sShield := true ;
19316: LD_ADDR_EXP 128
19320: PUSH
19321: LD_INT 1
19323: ST_TO_ADDR
// if p3 = 35 then
19324: LD_VAR 0 3
19328: PUSH
19329: LD_INT 35
19331: EQUAL
19332: IFFALSE 19342
// sTime := true ;
19334: LD_ADDR_EXP 129
19338: PUSH
19339: LD_INT 1
19341: ST_TO_ADDR
// if p3 = 36 then
19342: LD_VAR 0 3
19346: PUSH
19347: LD_INT 36
19349: EQUAL
19350: IFFALSE 19360
// sTools := true ;
19352: LD_ADDR_EXP 130
19356: PUSH
19357: LD_INT 1
19359: ST_TO_ADDR
// if p3 = 101 then
19360: LD_VAR 0 3
19364: PUSH
19365: LD_INT 101
19367: EQUAL
19368: IFFALSE 19378
// sSold := true ;
19370: LD_ADDR_EXP 95
19374: PUSH
19375: LD_INT 1
19377: ST_TO_ADDR
// if p3 = 102 then
19378: LD_VAR 0 3
19382: PUSH
19383: LD_INT 102
19385: EQUAL
19386: IFFALSE 19396
// sDiff := true ;
19388: LD_ADDR_EXP 96
19392: PUSH
19393: LD_INT 1
19395: ST_TO_ADDR
// if p3 = 103 then
19396: LD_VAR 0 3
19400: PUSH
19401: LD_INT 103
19403: EQUAL
19404: IFFALSE 19414
// sFog := true ;
19406: LD_ADDR_EXP 99
19410: PUSH
19411: LD_INT 1
19413: ST_TO_ADDR
// if p3 = 104 then
19414: LD_VAR 0 3
19418: PUSH
19419: LD_INT 104
19421: EQUAL
19422: IFFALSE 19432
// sReset := true ;
19424: LD_ADDR_EXP 100
19428: PUSH
19429: LD_INT 1
19431: ST_TO_ADDR
// if p3 = 105 then
19432: LD_VAR 0 3
19436: PUSH
19437: LD_INT 105
19439: EQUAL
19440: IFFALSE 19450
// sSun := true ;
19442: LD_ADDR_EXP 101
19446: PUSH
19447: LD_INT 1
19449: ST_TO_ADDR
// if p3 = 106 then
19450: LD_VAR 0 3
19454: PUSH
19455: LD_INT 106
19457: EQUAL
19458: IFFALSE 19468
// sTiger := true ;
19460: LD_ADDR_EXP 97
19464: PUSH
19465: LD_INT 1
19467: ST_TO_ADDR
// if p3 = 107 then
19468: LD_VAR 0 3
19472: PUSH
19473: LD_INT 107
19475: EQUAL
19476: IFFALSE 19486
// sBomb := true ;
19478: LD_ADDR_EXP 98
19482: PUSH
19483: LD_INT 1
19485: ST_TO_ADDR
// if p3 = 108 then
19486: LD_VAR 0 3
19490: PUSH
19491: LD_INT 108
19493: EQUAL
19494: IFFALSE 19504
// sWound := true ;
19496: LD_ADDR_EXP 106
19500: PUSH
19501: LD_INT 1
19503: ST_TO_ADDR
// if p3 = 109 then
19504: LD_VAR 0 3
19508: PUSH
19509: LD_INT 109
19511: EQUAL
19512: IFFALSE 19522
// sBetray := true ;
19514: LD_ADDR_EXP 110
19518: PUSH
19519: LD_INT 1
19521: ST_TO_ADDR
// if p3 = 110 then
19522: LD_VAR 0 3
19526: PUSH
19527: LD_INT 110
19529: EQUAL
19530: IFFALSE 19540
// sContamin := true ;
19532: LD_ADDR_EXP 111
19536: PUSH
19537: LD_INT 1
19539: ST_TO_ADDR
// if p3 = 111 then
19540: LD_VAR 0 3
19544: PUSH
19545: LD_INT 111
19547: EQUAL
19548: IFFALSE 19558
// sOil := true ;
19550: LD_ADDR_EXP 113
19554: PUSH
19555: LD_INT 1
19557: ST_TO_ADDR
// if p3 = 112 then
19558: LD_VAR 0 3
19562: PUSH
19563: LD_INT 112
19565: EQUAL
19566: IFFALSE 19576
// sStu := true ;
19568: LD_ADDR_EXP 117
19572: PUSH
19573: LD_INT 1
19575: ST_TO_ADDR
// if p3 = 113 then
19576: LD_VAR 0 3
19580: PUSH
19581: LD_INT 113
19583: EQUAL
19584: IFFALSE 19594
// sBazooka := true ;
19586: LD_ADDR_EXP 120
19590: PUSH
19591: LD_INT 1
19593: ST_TO_ADDR
// if p3 = 114 then
19594: LD_VAR 0 3
19598: PUSH
19599: LD_INT 114
19601: EQUAL
19602: IFFALSE 19612
// sMortar := true ;
19604: LD_ADDR_EXP 121
19608: PUSH
19609: LD_INT 1
19611: ST_TO_ADDR
// if p3 = 115 then
19612: LD_VAR 0 3
19616: PUSH
19617: LD_INT 115
19619: EQUAL
19620: IFFALSE 19630
// sRanger := true ;
19622: LD_ADDR_EXP 131
19626: PUSH
19627: LD_INT 1
19629: ST_TO_ADDR
// end ; if p2 = 101 then
19630: LD_VAR 0 2
19634: PUSH
19635: LD_INT 101
19637: EQUAL
19638: IFFALSE 19766
// begin case p3 of 1 :
19640: LD_VAR 0 3
19644: PUSH
19645: LD_INT 1
19647: DOUBLE
19648: EQUAL
19649: IFTRUE 19653
19651: GO 19660
19653: POP
// hHackUnlimitedResources ; 2 :
19654: CALL 30801 0 0
19658: GO 19766
19660: LD_INT 2
19662: DOUBLE
19663: EQUAL
19664: IFTRUE 19668
19666: GO 19675
19668: POP
// hHackSetLevel10 ; 3 :
19669: CALL 30934 0 0
19673: GO 19766
19675: LD_INT 3
19677: DOUBLE
19678: EQUAL
19679: IFTRUE 19683
19681: GO 19690
19683: POP
// hHackSetLevel10YourUnits ; 4 :
19684: CALL 31019 0 0
19688: GO 19766
19690: LD_INT 4
19692: DOUBLE
19693: EQUAL
19694: IFTRUE 19698
19696: GO 19705
19698: POP
// hHackInvincible ; 5 :
19699: CALL 31467 0 0
19703: GO 19766
19705: LD_INT 5
19707: DOUBLE
19708: EQUAL
19709: IFTRUE 19713
19711: GO 19720
19713: POP
// hHackInvisible ; 6 :
19714: CALL 31578 0 0
19718: GO 19766
19720: LD_INT 6
19722: DOUBLE
19723: EQUAL
19724: IFTRUE 19728
19726: GO 19735
19728: POP
// hHackChangeYourSide ; 7 :
19729: CALL 31635 0 0
19733: GO 19766
19735: LD_INT 7
19737: DOUBLE
19738: EQUAL
19739: IFTRUE 19743
19741: GO 19750
19743: POP
// hHackChangeUnitSide ; 8 :
19744: CALL 31677 0 0
19748: GO 19766
19750: LD_INT 8
19752: DOUBLE
19753: EQUAL
19754: IFTRUE 19758
19756: GO 19765
19758: POP
// hHackFog ; end ;
19759: CALL 31778 0 0
19763: GO 19766
19765: POP
// end ; end ;
19766: PPOPN 6
19768: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19769: GO 19771
19771: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19772: LD_STRING initStreamRollete();
19774: PPUSH
19775: CALL_OW 559
// InitStreamMode ;
19779: CALL 19788 0 0
// DefineStreamItems ( ) ;
19783: CALL 20228 0 0
// end ;
19787: END
// function InitStreamMode ; begin
19788: LD_INT 0
19790: PPUSH
// streamModeActive := false ;
19791: LD_ADDR_EXP 78
19795: PUSH
19796: LD_INT 0
19798: ST_TO_ADDR
// normalCounter := 36 ;
19799: LD_ADDR_EXP 79
19803: PUSH
19804: LD_INT 36
19806: ST_TO_ADDR
// hardcoreCounter := 16 ;
19807: LD_ADDR_EXP 80
19811: PUSH
19812: LD_INT 16
19814: ST_TO_ADDR
// sRocket := false ;
19815: LD_ADDR_EXP 83
19819: PUSH
19820: LD_INT 0
19822: ST_TO_ADDR
// sSpeed := false ;
19823: LD_ADDR_EXP 82
19827: PUSH
19828: LD_INT 0
19830: ST_TO_ADDR
// sEngine := false ;
19831: LD_ADDR_EXP 84
19835: PUSH
19836: LD_INT 0
19838: ST_TO_ADDR
// sSpec := false ;
19839: LD_ADDR_EXP 81
19843: PUSH
19844: LD_INT 0
19846: ST_TO_ADDR
// sLevel := false ;
19847: LD_ADDR_EXP 85
19851: PUSH
19852: LD_INT 0
19854: ST_TO_ADDR
// sArmoury := false ;
19855: LD_ADDR_EXP 86
19859: PUSH
19860: LD_INT 0
19862: ST_TO_ADDR
// sRadar := false ;
19863: LD_ADDR_EXP 87
19867: PUSH
19868: LD_INT 0
19870: ST_TO_ADDR
// sBunker := false ;
19871: LD_ADDR_EXP 88
19875: PUSH
19876: LD_INT 0
19878: ST_TO_ADDR
// sHack := false ;
19879: LD_ADDR_EXP 89
19883: PUSH
19884: LD_INT 0
19886: ST_TO_ADDR
// sFire := false ;
19887: LD_ADDR_EXP 90
19891: PUSH
19892: LD_INT 0
19894: ST_TO_ADDR
// sRefresh := false ;
19895: LD_ADDR_EXP 91
19899: PUSH
19900: LD_INT 0
19902: ST_TO_ADDR
// sExp := false ;
19903: LD_ADDR_EXP 92
19907: PUSH
19908: LD_INT 0
19910: ST_TO_ADDR
// sDepot := false ;
19911: LD_ADDR_EXP 93
19915: PUSH
19916: LD_INT 0
19918: ST_TO_ADDR
// sFlag := false ;
19919: LD_ADDR_EXP 94
19923: PUSH
19924: LD_INT 0
19926: ST_TO_ADDR
// sKamikadze := false ;
19927: LD_ADDR_EXP 102
19931: PUSH
19932: LD_INT 0
19934: ST_TO_ADDR
// sTroll := false ;
19935: LD_ADDR_EXP 103
19939: PUSH
19940: LD_INT 0
19942: ST_TO_ADDR
// sSlow := false ;
19943: LD_ADDR_EXP 104
19947: PUSH
19948: LD_INT 0
19950: ST_TO_ADDR
// sLack := false ;
19951: LD_ADDR_EXP 105
19955: PUSH
19956: LD_INT 0
19958: ST_TO_ADDR
// sTank := false ;
19959: LD_ADDR_EXP 107
19963: PUSH
19964: LD_INT 0
19966: ST_TO_ADDR
// sRemote := false ;
19967: LD_ADDR_EXP 108
19971: PUSH
19972: LD_INT 0
19974: ST_TO_ADDR
// sPowell := false ;
19975: LD_ADDR_EXP 109
19979: PUSH
19980: LD_INT 0
19982: ST_TO_ADDR
// sTeleport := false ;
19983: LD_ADDR_EXP 112
19987: PUSH
19988: LD_INT 0
19990: ST_TO_ADDR
// sOilTower := false ;
19991: LD_ADDR_EXP 114
19995: PUSH
19996: LD_INT 0
19998: ST_TO_ADDR
// sShovel := false ;
19999: LD_ADDR_EXP 115
20003: PUSH
20004: LD_INT 0
20006: ST_TO_ADDR
// sSheik := false ;
20007: LD_ADDR_EXP 116
20011: PUSH
20012: LD_INT 0
20014: ST_TO_ADDR
// sEarthquake := false ;
20015: LD_ADDR_EXP 118
20019: PUSH
20020: LD_INT 0
20022: ST_TO_ADDR
// sAI := false ;
20023: LD_ADDR_EXP 119
20027: PUSH
20028: LD_INT 0
20030: ST_TO_ADDR
// sCargo := false ;
20031: LD_ADDR_EXP 122
20035: PUSH
20036: LD_INT 0
20038: ST_TO_ADDR
// sDLaser := false ;
20039: LD_ADDR_EXP 123
20043: PUSH
20044: LD_INT 0
20046: ST_TO_ADDR
// sExchange := false ;
20047: LD_ADDR_EXP 124
20051: PUSH
20052: LD_INT 0
20054: ST_TO_ADDR
// sFac := false ;
20055: LD_ADDR_EXP 125
20059: PUSH
20060: LD_INT 0
20062: ST_TO_ADDR
// sPower := false ;
20063: LD_ADDR_EXP 126
20067: PUSH
20068: LD_INT 0
20070: ST_TO_ADDR
// sRandom := false ;
20071: LD_ADDR_EXP 127
20075: PUSH
20076: LD_INT 0
20078: ST_TO_ADDR
// sShield := false ;
20079: LD_ADDR_EXP 128
20083: PUSH
20084: LD_INT 0
20086: ST_TO_ADDR
// sTime := false ;
20087: LD_ADDR_EXP 129
20091: PUSH
20092: LD_INT 0
20094: ST_TO_ADDR
// sTools := false ;
20095: LD_ADDR_EXP 130
20099: PUSH
20100: LD_INT 0
20102: ST_TO_ADDR
// sSold := false ;
20103: LD_ADDR_EXP 95
20107: PUSH
20108: LD_INT 0
20110: ST_TO_ADDR
// sDiff := false ;
20111: LD_ADDR_EXP 96
20115: PUSH
20116: LD_INT 0
20118: ST_TO_ADDR
// sFog := false ;
20119: LD_ADDR_EXP 99
20123: PUSH
20124: LD_INT 0
20126: ST_TO_ADDR
// sReset := false ;
20127: LD_ADDR_EXP 100
20131: PUSH
20132: LD_INT 0
20134: ST_TO_ADDR
// sSun := false ;
20135: LD_ADDR_EXP 101
20139: PUSH
20140: LD_INT 0
20142: ST_TO_ADDR
// sTiger := false ;
20143: LD_ADDR_EXP 97
20147: PUSH
20148: LD_INT 0
20150: ST_TO_ADDR
// sBomb := false ;
20151: LD_ADDR_EXP 98
20155: PUSH
20156: LD_INT 0
20158: ST_TO_ADDR
// sWound := false ;
20159: LD_ADDR_EXP 106
20163: PUSH
20164: LD_INT 0
20166: ST_TO_ADDR
// sBetray := false ;
20167: LD_ADDR_EXP 110
20171: PUSH
20172: LD_INT 0
20174: ST_TO_ADDR
// sContamin := false ;
20175: LD_ADDR_EXP 111
20179: PUSH
20180: LD_INT 0
20182: ST_TO_ADDR
// sOil := false ;
20183: LD_ADDR_EXP 113
20187: PUSH
20188: LD_INT 0
20190: ST_TO_ADDR
// sStu := false ;
20191: LD_ADDR_EXP 117
20195: PUSH
20196: LD_INT 0
20198: ST_TO_ADDR
// sBazooka := false ;
20199: LD_ADDR_EXP 120
20203: PUSH
20204: LD_INT 0
20206: ST_TO_ADDR
// sMortar := false ;
20207: LD_ADDR_EXP 121
20211: PUSH
20212: LD_INT 0
20214: ST_TO_ADDR
// sRanger := false ;
20215: LD_ADDR_EXP 131
20219: PUSH
20220: LD_INT 0
20222: ST_TO_ADDR
// end ;
20223: LD_VAR 0 1
20227: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20228: LD_INT 0
20230: PPUSH
20231: PPUSH
20232: PPUSH
20233: PPUSH
20234: PPUSH
// result := [ ] ;
20235: LD_ADDR_VAR 0 1
20239: PUSH
20240: EMPTY
20241: ST_TO_ADDR
// if campaign_id = 1 then
20242: LD_OWVAR 69
20246: PUSH
20247: LD_INT 1
20249: EQUAL
20250: IFFALSE 23188
// begin case mission_number of 1 :
20252: LD_OWVAR 70
20256: PUSH
20257: LD_INT 1
20259: DOUBLE
20260: EQUAL
20261: IFTRUE 20265
20263: GO 20329
20265: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20266: LD_ADDR_VAR 0 1
20270: PUSH
20271: LD_INT 2
20273: PUSH
20274: LD_INT 4
20276: PUSH
20277: LD_INT 11
20279: PUSH
20280: LD_INT 12
20282: PUSH
20283: LD_INT 15
20285: PUSH
20286: LD_INT 16
20288: PUSH
20289: LD_INT 22
20291: PUSH
20292: LD_INT 23
20294: PUSH
20295: LD_INT 26
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 101
20311: PUSH
20312: LD_INT 102
20314: PUSH
20315: LD_INT 106
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: LIST
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: ST_TO_ADDR
20327: GO 23186
20329: LD_INT 2
20331: DOUBLE
20332: EQUAL
20333: IFTRUE 20337
20335: GO 20409
20337: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20338: LD_ADDR_VAR 0 1
20342: PUSH
20343: LD_INT 2
20345: PUSH
20346: LD_INT 4
20348: PUSH
20349: LD_INT 11
20351: PUSH
20352: LD_INT 12
20354: PUSH
20355: LD_INT 15
20357: PUSH
20358: LD_INT 16
20360: PUSH
20361: LD_INT 22
20363: PUSH
20364: LD_INT 23
20366: PUSH
20367: LD_INT 26
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 101
20383: PUSH
20384: LD_INT 102
20386: PUSH
20387: LD_INT 105
20389: PUSH
20390: LD_INT 106
20392: PUSH
20393: LD_INT 108
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: ST_TO_ADDR
20407: GO 23186
20409: LD_INT 3
20411: DOUBLE
20412: EQUAL
20413: IFTRUE 20417
20415: GO 20493
20417: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20418: LD_ADDR_VAR 0 1
20422: PUSH
20423: LD_INT 2
20425: PUSH
20426: LD_INT 4
20428: PUSH
20429: LD_INT 5
20431: PUSH
20432: LD_INT 11
20434: PUSH
20435: LD_INT 12
20437: PUSH
20438: LD_INT 15
20440: PUSH
20441: LD_INT 16
20443: PUSH
20444: LD_INT 22
20446: PUSH
20447: LD_INT 26
20449: PUSH
20450: LD_INT 36
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 101
20467: PUSH
20468: LD_INT 102
20470: PUSH
20471: LD_INT 105
20473: PUSH
20474: LD_INT 106
20476: PUSH
20477: LD_INT 108
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: ST_TO_ADDR
20491: GO 23186
20493: LD_INT 4
20495: DOUBLE
20496: EQUAL
20497: IFTRUE 20501
20499: GO 20585
20501: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20502: LD_ADDR_VAR 0 1
20506: PUSH
20507: LD_INT 2
20509: PUSH
20510: LD_INT 4
20512: PUSH
20513: LD_INT 5
20515: PUSH
20516: LD_INT 8
20518: PUSH
20519: LD_INT 11
20521: PUSH
20522: LD_INT 12
20524: PUSH
20525: LD_INT 15
20527: PUSH
20528: LD_INT 16
20530: PUSH
20531: LD_INT 22
20533: PUSH
20534: LD_INT 23
20536: PUSH
20537: LD_INT 26
20539: PUSH
20540: LD_INT 36
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 101
20559: PUSH
20560: LD_INT 102
20562: PUSH
20563: LD_INT 105
20565: PUSH
20566: LD_INT 106
20568: PUSH
20569: LD_INT 108
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: ST_TO_ADDR
20583: GO 23186
20585: LD_INT 5
20587: DOUBLE
20588: EQUAL
20589: IFTRUE 20593
20591: GO 20693
20593: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20594: LD_ADDR_VAR 0 1
20598: PUSH
20599: LD_INT 2
20601: PUSH
20602: LD_INT 4
20604: PUSH
20605: LD_INT 5
20607: PUSH
20608: LD_INT 6
20610: PUSH
20611: LD_INT 8
20613: PUSH
20614: LD_INT 11
20616: PUSH
20617: LD_INT 12
20619: PUSH
20620: LD_INT 15
20622: PUSH
20623: LD_INT 16
20625: PUSH
20626: LD_INT 22
20628: PUSH
20629: LD_INT 23
20631: PUSH
20632: LD_INT 25
20634: PUSH
20635: LD_INT 26
20637: PUSH
20638: LD_INT 36
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 101
20659: PUSH
20660: LD_INT 102
20662: PUSH
20663: LD_INT 105
20665: PUSH
20666: LD_INT 106
20668: PUSH
20669: LD_INT 108
20671: PUSH
20672: LD_INT 109
20674: PUSH
20675: LD_INT 112
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: ST_TO_ADDR
20691: GO 23186
20693: LD_INT 6
20695: DOUBLE
20696: EQUAL
20697: IFTRUE 20701
20699: GO 20821
20701: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20702: LD_ADDR_VAR 0 1
20706: PUSH
20707: LD_INT 2
20709: PUSH
20710: LD_INT 4
20712: PUSH
20713: LD_INT 5
20715: PUSH
20716: LD_INT 6
20718: PUSH
20719: LD_INT 8
20721: PUSH
20722: LD_INT 11
20724: PUSH
20725: LD_INT 12
20727: PUSH
20728: LD_INT 15
20730: PUSH
20731: LD_INT 16
20733: PUSH
20734: LD_INT 20
20736: PUSH
20737: LD_INT 21
20739: PUSH
20740: LD_INT 22
20742: PUSH
20743: LD_INT 23
20745: PUSH
20746: LD_INT 25
20748: PUSH
20749: LD_INT 26
20751: PUSH
20752: LD_INT 30
20754: PUSH
20755: LD_INT 31
20757: PUSH
20758: LD_INT 32
20760: PUSH
20761: LD_INT 36
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 101
20787: PUSH
20788: LD_INT 102
20790: PUSH
20791: LD_INT 105
20793: PUSH
20794: LD_INT 106
20796: PUSH
20797: LD_INT 108
20799: PUSH
20800: LD_INT 109
20802: PUSH
20803: LD_INT 112
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: ST_TO_ADDR
20819: GO 23186
20821: LD_INT 7
20823: DOUBLE
20824: EQUAL
20825: IFTRUE 20829
20827: GO 20929
20829: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20830: LD_ADDR_VAR 0 1
20834: PUSH
20835: LD_INT 2
20837: PUSH
20838: LD_INT 4
20840: PUSH
20841: LD_INT 5
20843: PUSH
20844: LD_INT 7
20846: PUSH
20847: LD_INT 11
20849: PUSH
20850: LD_INT 12
20852: PUSH
20853: LD_INT 15
20855: PUSH
20856: LD_INT 16
20858: PUSH
20859: LD_INT 20
20861: PUSH
20862: LD_INT 21
20864: PUSH
20865: LD_INT 22
20867: PUSH
20868: LD_INT 23
20870: PUSH
20871: LD_INT 25
20873: PUSH
20874: LD_INT 26
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 101
20895: PUSH
20896: LD_INT 102
20898: PUSH
20899: LD_INT 103
20901: PUSH
20902: LD_INT 105
20904: PUSH
20905: LD_INT 106
20907: PUSH
20908: LD_INT 108
20910: PUSH
20911: LD_INT 112
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: ST_TO_ADDR
20927: GO 23186
20929: LD_INT 8
20931: DOUBLE
20932: EQUAL
20933: IFTRUE 20937
20935: GO 21065
20937: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20938: LD_ADDR_VAR 0 1
20942: PUSH
20943: LD_INT 2
20945: PUSH
20946: LD_INT 4
20948: PUSH
20949: LD_INT 5
20951: PUSH
20952: LD_INT 6
20954: PUSH
20955: LD_INT 7
20957: PUSH
20958: LD_INT 8
20960: PUSH
20961: LD_INT 11
20963: PUSH
20964: LD_INT 12
20966: PUSH
20967: LD_INT 15
20969: PUSH
20970: LD_INT 16
20972: PUSH
20973: LD_INT 20
20975: PUSH
20976: LD_INT 21
20978: PUSH
20979: LD_INT 22
20981: PUSH
20982: LD_INT 23
20984: PUSH
20985: LD_INT 25
20987: PUSH
20988: LD_INT 26
20990: PUSH
20991: LD_INT 30
20993: PUSH
20994: LD_INT 31
20996: PUSH
20997: LD_INT 32
20999: PUSH
21000: LD_INT 36
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 101
21027: PUSH
21028: LD_INT 102
21030: PUSH
21031: LD_INT 103
21033: PUSH
21034: LD_INT 105
21036: PUSH
21037: LD_INT 106
21039: PUSH
21040: LD_INT 108
21042: PUSH
21043: LD_INT 109
21045: PUSH
21046: LD_INT 112
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: ST_TO_ADDR
21063: GO 23186
21065: LD_INT 9
21067: DOUBLE
21068: EQUAL
21069: IFTRUE 21073
21071: GO 21209
21073: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21074: LD_ADDR_VAR 0 1
21078: PUSH
21079: LD_INT 2
21081: PUSH
21082: LD_INT 4
21084: PUSH
21085: LD_INT 5
21087: PUSH
21088: LD_INT 6
21090: PUSH
21091: LD_INT 7
21093: PUSH
21094: LD_INT 8
21096: PUSH
21097: LD_INT 11
21099: PUSH
21100: LD_INT 12
21102: PUSH
21103: LD_INT 15
21105: PUSH
21106: LD_INT 16
21108: PUSH
21109: LD_INT 20
21111: PUSH
21112: LD_INT 21
21114: PUSH
21115: LD_INT 22
21117: PUSH
21118: LD_INT 23
21120: PUSH
21121: LD_INT 25
21123: PUSH
21124: LD_INT 26
21126: PUSH
21127: LD_INT 28
21129: PUSH
21130: LD_INT 30
21132: PUSH
21133: LD_INT 31
21135: PUSH
21136: LD_INT 32
21138: PUSH
21139: LD_INT 36
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 101
21167: PUSH
21168: LD_INT 102
21170: PUSH
21171: LD_INT 103
21173: PUSH
21174: LD_INT 105
21176: PUSH
21177: LD_INT 106
21179: PUSH
21180: LD_INT 108
21182: PUSH
21183: LD_INT 109
21185: PUSH
21186: LD_INT 112
21188: PUSH
21189: LD_INT 114
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: ST_TO_ADDR
21207: GO 23186
21209: LD_INT 10
21211: DOUBLE
21212: EQUAL
21213: IFTRUE 21217
21215: GO 21401
21217: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21218: LD_ADDR_VAR 0 1
21222: PUSH
21223: LD_INT 2
21225: PUSH
21226: LD_INT 4
21228: PUSH
21229: LD_INT 5
21231: PUSH
21232: LD_INT 6
21234: PUSH
21235: LD_INT 7
21237: PUSH
21238: LD_INT 8
21240: PUSH
21241: LD_INT 9
21243: PUSH
21244: LD_INT 10
21246: PUSH
21247: LD_INT 11
21249: PUSH
21250: LD_INT 12
21252: PUSH
21253: LD_INT 13
21255: PUSH
21256: LD_INT 14
21258: PUSH
21259: LD_INT 15
21261: PUSH
21262: LD_INT 16
21264: PUSH
21265: LD_INT 17
21267: PUSH
21268: LD_INT 18
21270: PUSH
21271: LD_INT 19
21273: PUSH
21274: LD_INT 20
21276: PUSH
21277: LD_INT 21
21279: PUSH
21280: LD_INT 22
21282: PUSH
21283: LD_INT 23
21285: PUSH
21286: LD_INT 24
21288: PUSH
21289: LD_INT 25
21291: PUSH
21292: LD_INT 26
21294: PUSH
21295: LD_INT 28
21297: PUSH
21298: LD_INT 30
21300: PUSH
21301: LD_INT 31
21303: PUSH
21304: LD_INT 32
21306: PUSH
21307: LD_INT 36
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 101
21343: PUSH
21344: LD_INT 102
21346: PUSH
21347: LD_INT 103
21349: PUSH
21350: LD_INT 104
21352: PUSH
21353: LD_INT 105
21355: PUSH
21356: LD_INT 106
21358: PUSH
21359: LD_INT 107
21361: PUSH
21362: LD_INT 108
21364: PUSH
21365: LD_INT 109
21367: PUSH
21368: LD_INT 110
21370: PUSH
21371: LD_INT 111
21373: PUSH
21374: LD_INT 112
21376: PUSH
21377: LD_INT 114
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: ST_TO_ADDR
21399: GO 23186
21401: LD_INT 11
21403: DOUBLE
21404: EQUAL
21405: IFTRUE 21409
21407: GO 21601
21409: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21410: LD_ADDR_VAR 0 1
21414: PUSH
21415: LD_INT 2
21417: PUSH
21418: LD_INT 3
21420: PUSH
21421: LD_INT 4
21423: PUSH
21424: LD_INT 5
21426: PUSH
21427: LD_INT 6
21429: PUSH
21430: LD_INT 7
21432: PUSH
21433: LD_INT 8
21435: PUSH
21436: LD_INT 9
21438: PUSH
21439: LD_INT 10
21441: PUSH
21442: LD_INT 11
21444: PUSH
21445: LD_INT 12
21447: PUSH
21448: LD_INT 13
21450: PUSH
21451: LD_INT 14
21453: PUSH
21454: LD_INT 15
21456: PUSH
21457: LD_INT 16
21459: PUSH
21460: LD_INT 17
21462: PUSH
21463: LD_INT 18
21465: PUSH
21466: LD_INT 19
21468: PUSH
21469: LD_INT 20
21471: PUSH
21472: LD_INT 21
21474: PUSH
21475: LD_INT 22
21477: PUSH
21478: LD_INT 23
21480: PUSH
21481: LD_INT 24
21483: PUSH
21484: LD_INT 25
21486: PUSH
21487: LD_INT 26
21489: PUSH
21490: LD_INT 28
21492: PUSH
21493: LD_INT 30
21495: PUSH
21496: LD_INT 31
21498: PUSH
21499: LD_INT 32
21501: PUSH
21502: LD_INT 34
21504: PUSH
21505: LD_INT 36
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 101
21543: PUSH
21544: LD_INT 102
21546: PUSH
21547: LD_INT 103
21549: PUSH
21550: LD_INT 104
21552: PUSH
21553: LD_INT 105
21555: PUSH
21556: LD_INT 106
21558: PUSH
21559: LD_INT 107
21561: PUSH
21562: LD_INT 108
21564: PUSH
21565: LD_INT 109
21567: PUSH
21568: LD_INT 110
21570: PUSH
21571: LD_INT 111
21573: PUSH
21574: LD_INT 112
21576: PUSH
21577: LD_INT 114
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: ST_TO_ADDR
21599: GO 23186
21601: LD_INT 12
21603: DOUBLE
21604: EQUAL
21605: IFTRUE 21609
21607: GO 21817
21609: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21610: LD_ADDR_VAR 0 1
21614: PUSH
21615: LD_INT 1
21617: PUSH
21618: LD_INT 2
21620: PUSH
21621: LD_INT 3
21623: PUSH
21624: LD_INT 4
21626: PUSH
21627: LD_INT 5
21629: PUSH
21630: LD_INT 6
21632: PUSH
21633: LD_INT 7
21635: PUSH
21636: LD_INT 8
21638: PUSH
21639: LD_INT 9
21641: PUSH
21642: LD_INT 10
21644: PUSH
21645: LD_INT 11
21647: PUSH
21648: LD_INT 12
21650: PUSH
21651: LD_INT 13
21653: PUSH
21654: LD_INT 14
21656: PUSH
21657: LD_INT 15
21659: PUSH
21660: LD_INT 16
21662: PUSH
21663: LD_INT 17
21665: PUSH
21666: LD_INT 18
21668: PUSH
21669: LD_INT 19
21671: PUSH
21672: LD_INT 20
21674: PUSH
21675: LD_INT 21
21677: PUSH
21678: LD_INT 22
21680: PUSH
21681: LD_INT 23
21683: PUSH
21684: LD_INT 24
21686: PUSH
21687: LD_INT 25
21689: PUSH
21690: LD_INT 26
21692: PUSH
21693: LD_INT 27
21695: PUSH
21696: LD_INT 28
21698: PUSH
21699: LD_INT 30
21701: PUSH
21702: LD_INT 31
21704: PUSH
21705: LD_INT 32
21707: PUSH
21708: LD_INT 33
21710: PUSH
21711: LD_INT 34
21713: PUSH
21714: LD_INT 36
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 101
21755: PUSH
21756: LD_INT 102
21758: PUSH
21759: LD_INT 103
21761: PUSH
21762: LD_INT 104
21764: PUSH
21765: LD_INT 105
21767: PUSH
21768: LD_INT 106
21770: PUSH
21771: LD_INT 107
21773: PUSH
21774: LD_INT 108
21776: PUSH
21777: LD_INT 109
21779: PUSH
21780: LD_INT 110
21782: PUSH
21783: LD_INT 111
21785: PUSH
21786: LD_INT 112
21788: PUSH
21789: LD_INT 113
21791: PUSH
21792: LD_INT 114
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: ST_TO_ADDR
21815: GO 23186
21817: LD_INT 13
21819: DOUBLE
21820: EQUAL
21821: IFTRUE 21825
21823: GO 22021
21825: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21826: LD_ADDR_VAR 0 1
21830: PUSH
21831: LD_INT 1
21833: PUSH
21834: LD_INT 2
21836: PUSH
21837: LD_INT 3
21839: PUSH
21840: LD_INT 4
21842: PUSH
21843: LD_INT 5
21845: PUSH
21846: LD_INT 8
21848: PUSH
21849: LD_INT 9
21851: PUSH
21852: LD_INT 10
21854: PUSH
21855: LD_INT 11
21857: PUSH
21858: LD_INT 12
21860: PUSH
21861: LD_INT 14
21863: PUSH
21864: LD_INT 15
21866: PUSH
21867: LD_INT 16
21869: PUSH
21870: LD_INT 17
21872: PUSH
21873: LD_INT 18
21875: PUSH
21876: LD_INT 19
21878: PUSH
21879: LD_INT 20
21881: PUSH
21882: LD_INT 21
21884: PUSH
21885: LD_INT 22
21887: PUSH
21888: LD_INT 23
21890: PUSH
21891: LD_INT 24
21893: PUSH
21894: LD_INT 25
21896: PUSH
21897: LD_INT 26
21899: PUSH
21900: LD_INT 27
21902: PUSH
21903: LD_INT 28
21905: PUSH
21906: LD_INT 30
21908: PUSH
21909: LD_INT 31
21911: PUSH
21912: LD_INT 32
21914: PUSH
21915: LD_INT 33
21917: PUSH
21918: LD_INT 34
21920: PUSH
21921: LD_INT 36
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 101
21959: PUSH
21960: LD_INT 102
21962: PUSH
21963: LD_INT 103
21965: PUSH
21966: LD_INT 104
21968: PUSH
21969: LD_INT 105
21971: PUSH
21972: LD_INT 106
21974: PUSH
21975: LD_INT 107
21977: PUSH
21978: LD_INT 108
21980: PUSH
21981: LD_INT 109
21983: PUSH
21984: LD_INT 110
21986: PUSH
21987: LD_INT 111
21989: PUSH
21990: LD_INT 112
21992: PUSH
21993: LD_INT 113
21995: PUSH
21996: LD_INT 114
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: ST_TO_ADDR
22019: GO 23186
22021: LD_INT 14
22023: DOUBLE
22024: EQUAL
22025: IFTRUE 22029
22027: GO 22241
22029: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22030: LD_ADDR_VAR 0 1
22034: PUSH
22035: LD_INT 1
22037: PUSH
22038: LD_INT 2
22040: PUSH
22041: LD_INT 3
22043: PUSH
22044: LD_INT 4
22046: PUSH
22047: LD_INT 5
22049: PUSH
22050: LD_INT 6
22052: PUSH
22053: LD_INT 7
22055: PUSH
22056: LD_INT 8
22058: PUSH
22059: LD_INT 9
22061: PUSH
22062: LD_INT 10
22064: PUSH
22065: LD_INT 11
22067: PUSH
22068: LD_INT 12
22070: PUSH
22071: LD_INT 13
22073: PUSH
22074: LD_INT 14
22076: PUSH
22077: LD_INT 15
22079: PUSH
22080: LD_INT 16
22082: PUSH
22083: LD_INT 17
22085: PUSH
22086: LD_INT 18
22088: PUSH
22089: LD_INT 19
22091: PUSH
22092: LD_INT 20
22094: PUSH
22095: LD_INT 21
22097: PUSH
22098: LD_INT 22
22100: PUSH
22101: LD_INT 23
22103: PUSH
22104: LD_INT 24
22106: PUSH
22107: LD_INT 25
22109: PUSH
22110: LD_INT 26
22112: PUSH
22113: LD_INT 27
22115: PUSH
22116: LD_INT 28
22118: PUSH
22119: LD_INT 29
22121: PUSH
22122: LD_INT 30
22124: PUSH
22125: LD_INT 31
22127: PUSH
22128: LD_INT 32
22130: PUSH
22131: LD_INT 33
22133: PUSH
22134: LD_INT 34
22136: PUSH
22137: LD_INT 36
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 101
22179: PUSH
22180: LD_INT 102
22182: PUSH
22183: LD_INT 103
22185: PUSH
22186: LD_INT 104
22188: PUSH
22189: LD_INT 105
22191: PUSH
22192: LD_INT 106
22194: PUSH
22195: LD_INT 107
22197: PUSH
22198: LD_INT 108
22200: PUSH
22201: LD_INT 109
22203: PUSH
22204: LD_INT 110
22206: PUSH
22207: LD_INT 111
22209: PUSH
22210: LD_INT 112
22212: PUSH
22213: LD_INT 113
22215: PUSH
22216: LD_INT 114
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: ST_TO_ADDR
22239: GO 23186
22241: LD_INT 15
22243: DOUBLE
22244: EQUAL
22245: IFTRUE 22249
22247: GO 22461
22249: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22250: LD_ADDR_VAR 0 1
22254: PUSH
22255: LD_INT 1
22257: PUSH
22258: LD_INT 2
22260: PUSH
22261: LD_INT 3
22263: PUSH
22264: LD_INT 4
22266: PUSH
22267: LD_INT 5
22269: PUSH
22270: LD_INT 6
22272: PUSH
22273: LD_INT 7
22275: PUSH
22276: LD_INT 8
22278: PUSH
22279: LD_INT 9
22281: PUSH
22282: LD_INT 10
22284: PUSH
22285: LD_INT 11
22287: PUSH
22288: LD_INT 12
22290: PUSH
22291: LD_INT 13
22293: PUSH
22294: LD_INT 14
22296: PUSH
22297: LD_INT 15
22299: PUSH
22300: LD_INT 16
22302: PUSH
22303: LD_INT 17
22305: PUSH
22306: LD_INT 18
22308: PUSH
22309: LD_INT 19
22311: PUSH
22312: LD_INT 20
22314: PUSH
22315: LD_INT 21
22317: PUSH
22318: LD_INT 22
22320: PUSH
22321: LD_INT 23
22323: PUSH
22324: LD_INT 24
22326: PUSH
22327: LD_INT 25
22329: PUSH
22330: LD_INT 26
22332: PUSH
22333: LD_INT 27
22335: PUSH
22336: LD_INT 28
22338: PUSH
22339: LD_INT 29
22341: PUSH
22342: LD_INT 30
22344: PUSH
22345: LD_INT 31
22347: PUSH
22348: LD_INT 32
22350: PUSH
22351: LD_INT 33
22353: PUSH
22354: LD_INT 34
22356: PUSH
22357: LD_INT 36
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 101
22399: PUSH
22400: LD_INT 102
22402: PUSH
22403: LD_INT 103
22405: PUSH
22406: LD_INT 104
22408: PUSH
22409: LD_INT 105
22411: PUSH
22412: LD_INT 106
22414: PUSH
22415: LD_INT 107
22417: PUSH
22418: LD_INT 108
22420: PUSH
22421: LD_INT 109
22423: PUSH
22424: LD_INT 110
22426: PUSH
22427: LD_INT 111
22429: PUSH
22430: LD_INT 112
22432: PUSH
22433: LD_INT 113
22435: PUSH
22436: LD_INT 114
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: ST_TO_ADDR
22459: GO 23186
22461: LD_INT 16
22463: DOUBLE
22464: EQUAL
22465: IFTRUE 22469
22467: GO 22593
22469: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22470: LD_ADDR_VAR 0 1
22474: PUSH
22475: LD_INT 2
22477: PUSH
22478: LD_INT 4
22480: PUSH
22481: LD_INT 5
22483: PUSH
22484: LD_INT 7
22486: PUSH
22487: LD_INT 11
22489: PUSH
22490: LD_INT 12
22492: PUSH
22493: LD_INT 15
22495: PUSH
22496: LD_INT 16
22498: PUSH
22499: LD_INT 20
22501: PUSH
22502: LD_INT 21
22504: PUSH
22505: LD_INT 22
22507: PUSH
22508: LD_INT 23
22510: PUSH
22511: LD_INT 25
22513: PUSH
22514: LD_INT 26
22516: PUSH
22517: LD_INT 30
22519: PUSH
22520: LD_INT 31
22522: PUSH
22523: LD_INT 32
22525: PUSH
22526: LD_INT 33
22528: PUSH
22529: LD_INT 34
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 101
22555: PUSH
22556: LD_INT 102
22558: PUSH
22559: LD_INT 103
22561: PUSH
22562: LD_INT 106
22564: PUSH
22565: LD_INT 108
22567: PUSH
22568: LD_INT 112
22570: PUSH
22571: LD_INT 113
22573: PUSH
22574: LD_INT 114
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: ST_TO_ADDR
22591: GO 23186
22593: LD_INT 17
22595: DOUBLE
22596: EQUAL
22597: IFTRUE 22601
22599: GO 22813
22601: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22602: LD_ADDR_VAR 0 1
22606: PUSH
22607: LD_INT 1
22609: PUSH
22610: LD_INT 2
22612: PUSH
22613: LD_INT 3
22615: PUSH
22616: LD_INT 4
22618: PUSH
22619: LD_INT 5
22621: PUSH
22622: LD_INT 6
22624: PUSH
22625: LD_INT 7
22627: PUSH
22628: LD_INT 8
22630: PUSH
22631: LD_INT 9
22633: PUSH
22634: LD_INT 10
22636: PUSH
22637: LD_INT 11
22639: PUSH
22640: LD_INT 12
22642: PUSH
22643: LD_INT 13
22645: PUSH
22646: LD_INT 14
22648: PUSH
22649: LD_INT 15
22651: PUSH
22652: LD_INT 16
22654: PUSH
22655: LD_INT 17
22657: PUSH
22658: LD_INT 18
22660: PUSH
22661: LD_INT 19
22663: PUSH
22664: LD_INT 20
22666: PUSH
22667: LD_INT 21
22669: PUSH
22670: LD_INT 22
22672: PUSH
22673: LD_INT 23
22675: PUSH
22676: LD_INT 24
22678: PUSH
22679: LD_INT 25
22681: PUSH
22682: LD_INT 26
22684: PUSH
22685: LD_INT 27
22687: PUSH
22688: LD_INT 28
22690: PUSH
22691: LD_INT 29
22693: PUSH
22694: LD_INT 30
22696: PUSH
22697: LD_INT 31
22699: PUSH
22700: LD_INT 32
22702: PUSH
22703: LD_INT 33
22705: PUSH
22706: LD_INT 34
22708: PUSH
22709: LD_INT 36
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 101
22751: PUSH
22752: LD_INT 102
22754: PUSH
22755: LD_INT 103
22757: PUSH
22758: LD_INT 104
22760: PUSH
22761: LD_INT 105
22763: PUSH
22764: LD_INT 106
22766: PUSH
22767: LD_INT 107
22769: PUSH
22770: LD_INT 108
22772: PUSH
22773: LD_INT 109
22775: PUSH
22776: LD_INT 110
22778: PUSH
22779: LD_INT 111
22781: PUSH
22782: LD_INT 112
22784: PUSH
22785: LD_INT 113
22787: PUSH
22788: LD_INT 114
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: ST_TO_ADDR
22811: GO 23186
22813: LD_INT 18
22815: DOUBLE
22816: EQUAL
22817: IFTRUE 22821
22819: GO 22957
22821: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22822: LD_ADDR_VAR 0 1
22826: PUSH
22827: LD_INT 2
22829: PUSH
22830: LD_INT 4
22832: PUSH
22833: LD_INT 5
22835: PUSH
22836: LD_INT 7
22838: PUSH
22839: LD_INT 11
22841: PUSH
22842: LD_INT 12
22844: PUSH
22845: LD_INT 15
22847: PUSH
22848: LD_INT 16
22850: PUSH
22851: LD_INT 20
22853: PUSH
22854: LD_INT 21
22856: PUSH
22857: LD_INT 22
22859: PUSH
22860: LD_INT 23
22862: PUSH
22863: LD_INT 25
22865: PUSH
22866: LD_INT 26
22868: PUSH
22869: LD_INT 30
22871: PUSH
22872: LD_INT 31
22874: PUSH
22875: LD_INT 32
22877: PUSH
22878: LD_INT 33
22880: PUSH
22881: LD_INT 34
22883: PUSH
22884: LD_INT 35
22886: PUSH
22887: LD_INT 36
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 101
22915: PUSH
22916: LD_INT 102
22918: PUSH
22919: LD_INT 103
22921: PUSH
22922: LD_INT 106
22924: PUSH
22925: LD_INT 108
22927: PUSH
22928: LD_INT 112
22930: PUSH
22931: LD_INT 113
22933: PUSH
22934: LD_INT 114
22936: PUSH
22937: LD_INT 115
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: ST_TO_ADDR
22955: GO 23186
22957: LD_INT 19
22959: DOUBLE
22960: EQUAL
22961: IFTRUE 22965
22963: GO 23185
22965: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22966: LD_ADDR_VAR 0 1
22970: PUSH
22971: LD_INT 1
22973: PUSH
22974: LD_INT 2
22976: PUSH
22977: LD_INT 3
22979: PUSH
22980: LD_INT 4
22982: PUSH
22983: LD_INT 5
22985: PUSH
22986: LD_INT 6
22988: PUSH
22989: LD_INT 7
22991: PUSH
22992: LD_INT 8
22994: PUSH
22995: LD_INT 9
22997: PUSH
22998: LD_INT 10
23000: PUSH
23001: LD_INT 11
23003: PUSH
23004: LD_INT 12
23006: PUSH
23007: LD_INT 13
23009: PUSH
23010: LD_INT 14
23012: PUSH
23013: LD_INT 15
23015: PUSH
23016: LD_INT 16
23018: PUSH
23019: LD_INT 17
23021: PUSH
23022: LD_INT 18
23024: PUSH
23025: LD_INT 19
23027: PUSH
23028: LD_INT 20
23030: PUSH
23031: LD_INT 21
23033: PUSH
23034: LD_INT 22
23036: PUSH
23037: LD_INT 23
23039: PUSH
23040: LD_INT 24
23042: PUSH
23043: LD_INT 25
23045: PUSH
23046: LD_INT 26
23048: PUSH
23049: LD_INT 27
23051: PUSH
23052: LD_INT 28
23054: PUSH
23055: LD_INT 29
23057: PUSH
23058: LD_INT 30
23060: PUSH
23061: LD_INT 31
23063: PUSH
23064: LD_INT 32
23066: PUSH
23067: LD_INT 33
23069: PUSH
23070: LD_INT 34
23072: PUSH
23073: LD_INT 35
23075: PUSH
23076: LD_INT 36
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 101
23119: PUSH
23120: LD_INT 102
23122: PUSH
23123: LD_INT 103
23125: PUSH
23126: LD_INT 104
23128: PUSH
23129: LD_INT 105
23131: PUSH
23132: LD_INT 106
23134: PUSH
23135: LD_INT 107
23137: PUSH
23138: LD_INT 108
23140: PUSH
23141: LD_INT 109
23143: PUSH
23144: LD_INT 110
23146: PUSH
23147: LD_INT 111
23149: PUSH
23150: LD_INT 112
23152: PUSH
23153: LD_INT 113
23155: PUSH
23156: LD_INT 114
23158: PUSH
23159: LD_INT 115
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: ST_TO_ADDR
23183: GO 23186
23185: POP
// end else
23186: GO 23405
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23188: LD_ADDR_VAR 0 1
23192: PUSH
23193: LD_INT 1
23195: PUSH
23196: LD_INT 2
23198: PUSH
23199: LD_INT 3
23201: PUSH
23202: LD_INT 4
23204: PUSH
23205: LD_INT 5
23207: PUSH
23208: LD_INT 6
23210: PUSH
23211: LD_INT 7
23213: PUSH
23214: LD_INT 8
23216: PUSH
23217: LD_INT 9
23219: PUSH
23220: LD_INT 10
23222: PUSH
23223: LD_INT 11
23225: PUSH
23226: LD_INT 12
23228: PUSH
23229: LD_INT 13
23231: PUSH
23232: LD_INT 14
23234: PUSH
23235: LD_INT 15
23237: PUSH
23238: LD_INT 16
23240: PUSH
23241: LD_INT 17
23243: PUSH
23244: LD_INT 18
23246: PUSH
23247: LD_INT 19
23249: PUSH
23250: LD_INT 20
23252: PUSH
23253: LD_INT 21
23255: PUSH
23256: LD_INT 22
23258: PUSH
23259: LD_INT 23
23261: PUSH
23262: LD_INT 24
23264: PUSH
23265: LD_INT 25
23267: PUSH
23268: LD_INT 26
23270: PUSH
23271: LD_INT 27
23273: PUSH
23274: LD_INT 28
23276: PUSH
23277: LD_INT 29
23279: PUSH
23280: LD_INT 30
23282: PUSH
23283: LD_INT 31
23285: PUSH
23286: LD_INT 32
23288: PUSH
23289: LD_INT 33
23291: PUSH
23292: LD_INT 34
23294: PUSH
23295: LD_INT 35
23297: PUSH
23298: LD_INT 36
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 101
23341: PUSH
23342: LD_INT 102
23344: PUSH
23345: LD_INT 103
23347: PUSH
23348: LD_INT 104
23350: PUSH
23351: LD_INT 105
23353: PUSH
23354: LD_INT 106
23356: PUSH
23357: LD_INT 107
23359: PUSH
23360: LD_INT 108
23362: PUSH
23363: LD_INT 109
23365: PUSH
23366: LD_INT 110
23368: PUSH
23369: LD_INT 111
23371: PUSH
23372: LD_INT 112
23374: PUSH
23375: LD_INT 113
23377: PUSH
23378: LD_INT 114
23380: PUSH
23381: LD_INT 115
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: ST_TO_ADDR
// if result then
23405: LD_VAR 0 1
23409: IFFALSE 23698
// begin normal :=  ;
23411: LD_ADDR_VAR 0 3
23415: PUSH
23416: LD_STRING 
23418: ST_TO_ADDR
// hardcore :=  ;
23419: LD_ADDR_VAR 0 4
23423: PUSH
23424: LD_STRING 
23426: ST_TO_ADDR
// for i = 1 to normalCounter do
23427: LD_ADDR_VAR 0 5
23431: PUSH
23432: DOUBLE
23433: LD_INT 1
23435: DEC
23436: ST_TO_ADDR
23437: LD_EXP 79
23441: PUSH
23442: FOR_TO
23443: IFFALSE 23544
// begin tmp := 0 ;
23445: LD_ADDR_VAR 0 2
23449: PUSH
23450: LD_STRING 0
23452: ST_TO_ADDR
// if result [ 1 ] then
23453: LD_VAR 0 1
23457: PUSH
23458: LD_INT 1
23460: ARRAY
23461: IFFALSE 23526
// if result [ 1 ] [ 1 ] = i then
23463: LD_VAR 0 1
23467: PUSH
23468: LD_INT 1
23470: ARRAY
23471: PUSH
23472: LD_INT 1
23474: ARRAY
23475: PUSH
23476: LD_VAR 0 5
23480: EQUAL
23481: IFFALSE 23526
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23483: LD_ADDR_VAR 0 1
23487: PUSH
23488: LD_VAR 0 1
23492: PPUSH
23493: LD_INT 1
23495: PPUSH
23496: LD_VAR 0 1
23500: PUSH
23501: LD_INT 1
23503: ARRAY
23504: PPUSH
23505: LD_INT 1
23507: PPUSH
23508: CALL_OW 3
23512: PPUSH
23513: CALL_OW 1
23517: ST_TO_ADDR
// tmp := 1 ;
23518: LD_ADDR_VAR 0 2
23522: PUSH
23523: LD_STRING 1
23525: ST_TO_ADDR
// end ; normal := normal & tmp ;
23526: LD_ADDR_VAR 0 3
23530: PUSH
23531: LD_VAR 0 3
23535: PUSH
23536: LD_VAR 0 2
23540: STR
23541: ST_TO_ADDR
// end ;
23542: GO 23442
23544: POP
23545: POP
// for i = 1 to hardcoreCounter do
23546: LD_ADDR_VAR 0 5
23550: PUSH
23551: DOUBLE
23552: LD_INT 1
23554: DEC
23555: ST_TO_ADDR
23556: LD_EXP 80
23560: PUSH
23561: FOR_TO
23562: IFFALSE 23667
// begin tmp := 0 ;
23564: LD_ADDR_VAR 0 2
23568: PUSH
23569: LD_STRING 0
23571: ST_TO_ADDR
// if result [ 2 ] then
23572: LD_VAR 0 1
23576: PUSH
23577: LD_INT 2
23579: ARRAY
23580: IFFALSE 23649
// if result [ 2 ] [ 1 ] = 100 + i then
23582: LD_VAR 0 1
23586: PUSH
23587: LD_INT 2
23589: ARRAY
23590: PUSH
23591: LD_INT 1
23593: ARRAY
23594: PUSH
23595: LD_INT 100
23597: PUSH
23598: LD_VAR 0 5
23602: PLUS
23603: EQUAL
23604: IFFALSE 23649
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23606: LD_ADDR_VAR 0 1
23610: PUSH
23611: LD_VAR 0 1
23615: PPUSH
23616: LD_INT 2
23618: PPUSH
23619: LD_VAR 0 1
23623: PUSH
23624: LD_INT 2
23626: ARRAY
23627: PPUSH
23628: LD_INT 1
23630: PPUSH
23631: CALL_OW 3
23635: PPUSH
23636: CALL_OW 1
23640: ST_TO_ADDR
// tmp := 1 ;
23641: LD_ADDR_VAR 0 2
23645: PUSH
23646: LD_STRING 1
23648: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23649: LD_ADDR_VAR 0 4
23653: PUSH
23654: LD_VAR 0 4
23658: PUSH
23659: LD_VAR 0 2
23663: STR
23664: ST_TO_ADDR
// end ;
23665: GO 23561
23667: POP
23668: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23669: LD_STRING getStreamItemsFromMission("
23671: PUSH
23672: LD_VAR 0 3
23676: STR
23677: PUSH
23678: LD_STRING ","
23680: STR
23681: PUSH
23682: LD_VAR 0 4
23686: STR
23687: PUSH
23688: LD_STRING ")
23690: STR
23691: PPUSH
23692: CALL_OW 559
// end else
23696: GO 23705
// ToLua ( getStreamItemsFromMission("","") ) ;
23698: LD_STRING getStreamItemsFromMission("","")
23700: PPUSH
23701: CALL_OW 559
// end ;
23705: LD_VAR 0 1
23709: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23710: LD_EXP 78
23714: PUSH
23715: LD_EXP 83
23719: AND
23720: IFFALSE 23844
23722: GO 23724
23724: DISABLE
23725: LD_INT 0
23727: PPUSH
23728: PPUSH
// begin enable ;
23729: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23730: LD_ADDR_VAR 0 2
23734: PUSH
23735: LD_INT 22
23737: PUSH
23738: LD_OWVAR 2
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 2
23749: PUSH
23750: LD_INT 34
23752: PUSH
23753: LD_INT 7
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 34
23762: PUSH
23763: LD_INT 45
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 34
23772: PUSH
23773: LD_INT 28
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 34
23782: PUSH
23783: LD_INT 47
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PPUSH
23801: CALL_OW 69
23805: ST_TO_ADDR
// if not tmp then
23806: LD_VAR 0 2
23810: NOT
23811: IFFALSE 23815
// exit ;
23813: GO 23844
// for i in tmp do
23815: LD_ADDR_VAR 0 1
23819: PUSH
23820: LD_VAR 0 2
23824: PUSH
23825: FOR_IN
23826: IFFALSE 23842
// begin SetLives ( i , 0 ) ;
23828: LD_VAR 0 1
23832: PPUSH
23833: LD_INT 0
23835: PPUSH
23836: CALL_OW 234
// end ;
23840: GO 23825
23842: POP
23843: POP
// end ;
23844: PPOPN 2
23846: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23847: LD_EXP 78
23851: PUSH
23852: LD_EXP 84
23856: AND
23857: IFFALSE 23941
23859: GO 23861
23861: DISABLE
23862: LD_INT 0
23864: PPUSH
23865: PPUSH
// begin enable ;
23866: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23867: LD_ADDR_VAR 0 2
23871: PUSH
23872: LD_INT 22
23874: PUSH
23875: LD_OWVAR 2
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 32
23886: PUSH
23887: LD_INT 3
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PPUSH
23898: CALL_OW 69
23902: ST_TO_ADDR
// if not tmp then
23903: LD_VAR 0 2
23907: NOT
23908: IFFALSE 23912
// exit ;
23910: GO 23941
// for i in tmp do
23912: LD_ADDR_VAR 0 1
23916: PUSH
23917: LD_VAR 0 2
23921: PUSH
23922: FOR_IN
23923: IFFALSE 23939
// begin SetLives ( i , 0 ) ;
23925: LD_VAR 0 1
23929: PPUSH
23930: LD_INT 0
23932: PPUSH
23933: CALL_OW 234
// end ;
23937: GO 23922
23939: POP
23940: POP
// end ;
23941: PPOPN 2
23943: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23944: LD_EXP 78
23948: PUSH
23949: LD_EXP 81
23953: AND
23954: IFFALSE 24047
23956: GO 23958
23958: DISABLE
23959: LD_INT 0
23961: PPUSH
// begin enable ;
23962: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23963: LD_ADDR_VAR 0 1
23967: PUSH
23968: LD_INT 22
23970: PUSH
23971: LD_OWVAR 2
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 2
23982: PUSH
23983: LD_INT 25
23985: PUSH
23986: LD_INT 5
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 25
23995: PUSH
23996: LD_INT 9
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 25
24005: PUSH
24006: LD_INT 8
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PPUSH
24023: CALL_OW 69
24027: PUSH
24028: FOR_IN
24029: IFFALSE 24045
// begin SetClass ( i , 1 ) ;
24031: LD_VAR 0 1
24035: PPUSH
24036: LD_INT 1
24038: PPUSH
24039: CALL_OW 336
// end ;
24043: GO 24028
24045: POP
24046: POP
// end ;
24047: PPOPN 1
24049: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24050: LD_EXP 78
24054: PUSH
24055: LD_EXP 82
24059: AND
24060: PUSH
24061: LD_OWVAR 65
24065: PUSH
24066: LD_INT 7
24068: LESS
24069: AND
24070: IFFALSE 24084
24072: GO 24074
24074: DISABLE
// begin enable ;
24075: ENABLE
// game_speed := 7 ;
24076: LD_ADDR_OWVAR 65
24080: PUSH
24081: LD_INT 7
24083: ST_TO_ADDR
// end ;
24084: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24085: LD_EXP 78
24089: PUSH
24090: LD_EXP 85
24094: AND
24095: IFFALSE 24297
24097: GO 24099
24099: DISABLE
24100: LD_INT 0
24102: PPUSH
24103: PPUSH
24104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24105: LD_ADDR_VAR 0 3
24109: PUSH
24110: LD_INT 81
24112: PUSH
24113: LD_OWVAR 2
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 21
24124: PUSH
24125: LD_INT 1
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PPUSH
24136: CALL_OW 69
24140: ST_TO_ADDR
// if not tmp then
24141: LD_VAR 0 3
24145: NOT
24146: IFFALSE 24150
// exit ;
24148: GO 24297
// if tmp > 5 then
24150: LD_VAR 0 3
24154: PUSH
24155: LD_INT 5
24157: GREATER
24158: IFFALSE 24170
// k := 5 else
24160: LD_ADDR_VAR 0 2
24164: PUSH
24165: LD_INT 5
24167: ST_TO_ADDR
24168: GO 24180
// k := tmp ;
24170: LD_ADDR_VAR 0 2
24174: PUSH
24175: LD_VAR 0 3
24179: ST_TO_ADDR
// for i := 1 to k do
24180: LD_ADDR_VAR 0 1
24184: PUSH
24185: DOUBLE
24186: LD_INT 1
24188: DEC
24189: ST_TO_ADDR
24190: LD_VAR 0 2
24194: PUSH
24195: FOR_TO
24196: IFFALSE 24295
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24198: LD_VAR 0 3
24202: PUSH
24203: LD_VAR 0 1
24207: ARRAY
24208: PPUSH
24209: LD_VAR 0 1
24213: PUSH
24214: LD_INT 4
24216: MOD
24217: PUSH
24218: LD_INT 1
24220: PLUS
24221: PPUSH
24222: CALL_OW 259
24226: PUSH
24227: LD_INT 10
24229: LESS
24230: IFFALSE 24293
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24232: LD_VAR 0 3
24236: PUSH
24237: LD_VAR 0 1
24241: ARRAY
24242: PPUSH
24243: LD_VAR 0 1
24247: PUSH
24248: LD_INT 4
24250: MOD
24251: PUSH
24252: LD_INT 1
24254: PLUS
24255: PPUSH
24256: LD_VAR 0 3
24260: PUSH
24261: LD_VAR 0 1
24265: ARRAY
24266: PPUSH
24267: LD_VAR 0 1
24271: PUSH
24272: LD_INT 4
24274: MOD
24275: PUSH
24276: LD_INT 1
24278: PLUS
24279: PPUSH
24280: CALL_OW 259
24284: PUSH
24285: LD_INT 1
24287: PLUS
24288: PPUSH
24289: CALL_OW 237
24293: GO 24195
24295: POP
24296: POP
// end ;
24297: PPOPN 3
24299: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24300: LD_EXP 78
24304: PUSH
24305: LD_EXP 86
24309: AND
24310: IFFALSE 24330
24312: GO 24314
24314: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24315: LD_INT 4
24317: PPUSH
24318: LD_OWVAR 2
24322: PPUSH
24323: LD_INT 0
24325: PPUSH
24326: CALL_OW 324
24330: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24331: LD_EXP 78
24335: PUSH
24336: LD_EXP 115
24340: AND
24341: IFFALSE 24361
24343: GO 24345
24345: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24346: LD_INT 19
24348: PPUSH
24349: LD_OWVAR 2
24353: PPUSH
24354: LD_INT 0
24356: PPUSH
24357: CALL_OW 324
24361: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24362: LD_EXP 78
24366: PUSH
24367: LD_EXP 87
24371: AND
24372: IFFALSE 24474
24374: GO 24376
24376: DISABLE
24377: LD_INT 0
24379: PPUSH
24380: PPUSH
// begin enable ;
24381: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24382: LD_ADDR_VAR 0 2
24386: PUSH
24387: LD_INT 22
24389: PUSH
24390: LD_OWVAR 2
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 2
24401: PUSH
24402: LD_INT 34
24404: PUSH
24405: LD_INT 11
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 34
24414: PUSH
24415: LD_INT 30
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: LIST
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PPUSH
24431: CALL_OW 69
24435: ST_TO_ADDR
// if not tmp then
24436: LD_VAR 0 2
24440: NOT
24441: IFFALSE 24445
// exit ;
24443: GO 24474
// for i in tmp do
24445: LD_ADDR_VAR 0 1
24449: PUSH
24450: LD_VAR 0 2
24454: PUSH
24455: FOR_IN
24456: IFFALSE 24472
// begin SetLives ( i , 0 ) ;
24458: LD_VAR 0 1
24462: PPUSH
24463: LD_INT 0
24465: PPUSH
24466: CALL_OW 234
// end ;
24470: GO 24455
24472: POP
24473: POP
// end ;
24474: PPOPN 2
24476: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24477: LD_EXP 78
24481: PUSH
24482: LD_EXP 88
24486: AND
24487: IFFALSE 24507
24489: GO 24491
24491: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24492: LD_INT 32
24494: PPUSH
24495: LD_OWVAR 2
24499: PPUSH
24500: LD_INT 0
24502: PPUSH
24503: CALL_OW 324
24507: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24508: LD_EXP 78
24512: PUSH
24513: LD_EXP 89
24517: AND
24518: IFFALSE 24699
24520: GO 24522
24522: DISABLE
24523: LD_INT 0
24525: PPUSH
24526: PPUSH
24527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24528: LD_ADDR_VAR 0 2
24532: PUSH
24533: LD_INT 22
24535: PUSH
24536: LD_OWVAR 2
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PUSH
24545: LD_INT 33
24547: PUSH
24548: LD_INT 3
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PPUSH
24559: CALL_OW 69
24563: ST_TO_ADDR
// if not tmp then
24564: LD_VAR 0 2
24568: NOT
24569: IFFALSE 24573
// exit ;
24571: GO 24699
// side := 0 ;
24573: LD_ADDR_VAR 0 3
24577: PUSH
24578: LD_INT 0
24580: ST_TO_ADDR
// for i := 1 to 8 do
24581: LD_ADDR_VAR 0 1
24585: PUSH
24586: DOUBLE
24587: LD_INT 1
24589: DEC
24590: ST_TO_ADDR
24591: LD_INT 8
24593: PUSH
24594: FOR_TO
24595: IFFALSE 24643
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24597: LD_OWVAR 2
24601: PUSH
24602: LD_VAR 0 1
24606: NONEQUAL
24607: PUSH
24608: LD_OWVAR 2
24612: PPUSH
24613: LD_VAR 0 1
24617: PPUSH
24618: CALL_OW 81
24622: PUSH
24623: LD_INT 2
24625: EQUAL
24626: AND
24627: IFFALSE 24641
// begin side := i ;
24629: LD_ADDR_VAR 0 3
24633: PUSH
24634: LD_VAR 0 1
24638: ST_TO_ADDR
// break ;
24639: GO 24643
// end ;
24641: GO 24594
24643: POP
24644: POP
// if not side then
24645: LD_VAR 0 3
24649: NOT
24650: IFFALSE 24654
// exit ;
24652: GO 24699
// for i := 1 to tmp do
24654: LD_ADDR_VAR 0 1
24658: PUSH
24659: DOUBLE
24660: LD_INT 1
24662: DEC
24663: ST_TO_ADDR
24664: LD_VAR 0 2
24668: PUSH
24669: FOR_TO
24670: IFFALSE 24697
// if Prob ( 60 ) then
24672: LD_INT 60
24674: PPUSH
24675: CALL_OW 13
24679: IFFALSE 24695
// SetSide ( i , side ) ;
24681: LD_VAR 0 1
24685: PPUSH
24686: LD_VAR 0 3
24690: PPUSH
24691: CALL_OW 235
24695: GO 24669
24697: POP
24698: POP
// end ;
24699: PPOPN 3
24701: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24702: LD_EXP 78
24706: PUSH
24707: LD_EXP 91
24711: AND
24712: IFFALSE 24831
24714: GO 24716
24716: DISABLE
24717: LD_INT 0
24719: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24720: LD_ADDR_VAR 0 1
24724: PUSH
24725: LD_INT 22
24727: PUSH
24728: LD_OWVAR 2
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 21
24739: PUSH
24740: LD_INT 1
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 3
24749: PUSH
24750: LD_INT 23
24752: PUSH
24753: LD_INT 0
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: LIST
24768: PPUSH
24769: CALL_OW 69
24773: PUSH
24774: FOR_IN
24775: IFFALSE 24829
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24777: LD_VAR 0 1
24781: PPUSH
24782: CALL_OW 257
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: LD_INT 2
24792: PUSH
24793: LD_INT 3
24795: PUSH
24796: LD_INT 4
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: IN
24805: IFFALSE 24827
// SetClass ( un , rand ( 1 , 4 ) ) ;
24807: LD_VAR 0 1
24811: PPUSH
24812: LD_INT 1
24814: PPUSH
24815: LD_INT 4
24817: PPUSH
24818: CALL_OW 12
24822: PPUSH
24823: CALL_OW 336
24827: GO 24774
24829: POP
24830: POP
// end ;
24831: PPOPN 1
24833: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24834: LD_EXP 78
24838: PUSH
24839: LD_EXP 90
24843: AND
24844: IFFALSE 24923
24846: GO 24848
24848: DISABLE
24849: LD_INT 0
24851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24852: LD_ADDR_VAR 0 1
24856: PUSH
24857: LD_INT 22
24859: PUSH
24860: LD_OWVAR 2
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 21
24871: PUSH
24872: LD_INT 3
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PPUSH
24883: CALL_OW 69
24887: ST_TO_ADDR
// if not tmp then
24888: LD_VAR 0 1
24892: NOT
24893: IFFALSE 24897
// exit ;
24895: GO 24923
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24897: LD_VAR 0 1
24901: PUSH
24902: LD_INT 1
24904: PPUSH
24905: LD_VAR 0 1
24909: PPUSH
24910: CALL_OW 12
24914: ARRAY
24915: PPUSH
24916: LD_INT 100
24918: PPUSH
24919: CALL_OW 234
// end ;
24923: PPOPN 1
24925: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24926: LD_EXP 78
24930: PUSH
24931: LD_EXP 92
24935: AND
24936: IFFALSE 25034
24938: GO 24940
24940: DISABLE
24941: LD_INT 0
24943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24944: LD_ADDR_VAR 0 1
24948: PUSH
24949: LD_INT 22
24951: PUSH
24952: LD_OWVAR 2
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 21
24963: PUSH
24964: LD_INT 1
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PPUSH
24975: CALL_OW 69
24979: ST_TO_ADDR
// if not tmp then
24980: LD_VAR 0 1
24984: NOT
24985: IFFALSE 24989
// exit ;
24987: GO 25034
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24989: LD_VAR 0 1
24993: PUSH
24994: LD_INT 1
24996: PPUSH
24997: LD_VAR 0 1
25001: PPUSH
25002: CALL_OW 12
25006: ARRAY
25007: PPUSH
25008: LD_INT 1
25010: PPUSH
25011: LD_INT 4
25013: PPUSH
25014: CALL_OW 12
25018: PPUSH
25019: LD_INT 3000
25021: PPUSH
25022: LD_INT 9000
25024: PPUSH
25025: CALL_OW 12
25029: PPUSH
25030: CALL_OW 492
// end ;
25034: PPOPN 1
25036: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25037: LD_EXP 78
25041: PUSH
25042: LD_EXP 93
25046: AND
25047: IFFALSE 25067
25049: GO 25051
25051: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25052: LD_INT 1
25054: PPUSH
25055: LD_OWVAR 2
25059: PPUSH
25060: LD_INT 0
25062: PPUSH
25063: CALL_OW 324
25067: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25068: LD_EXP 78
25072: PUSH
25073: LD_EXP 94
25077: AND
25078: IFFALSE 25161
25080: GO 25082
25082: DISABLE
25083: LD_INT 0
25085: PPUSH
25086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25087: LD_ADDR_VAR 0 2
25091: PUSH
25092: LD_INT 22
25094: PUSH
25095: LD_OWVAR 2
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 21
25106: PUSH
25107: LD_INT 3
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PPUSH
25118: CALL_OW 69
25122: ST_TO_ADDR
// if not tmp then
25123: LD_VAR 0 2
25127: NOT
25128: IFFALSE 25132
// exit ;
25130: GO 25161
// for i in tmp do
25132: LD_ADDR_VAR 0 1
25136: PUSH
25137: LD_VAR 0 2
25141: PUSH
25142: FOR_IN
25143: IFFALSE 25159
// SetBLevel ( i , 10 ) ;
25145: LD_VAR 0 1
25149: PPUSH
25150: LD_INT 10
25152: PPUSH
25153: CALL_OW 241
25157: GO 25142
25159: POP
25160: POP
// end ;
25161: PPOPN 2
25163: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25164: LD_EXP 78
25168: PUSH
25169: LD_EXP 95
25173: AND
25174: IFFALSE 25285
25176: GO 25178
25178: DISABLE
25179: LD_INT 0
25181: PPUSH
25182: PPUSH
25183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25184: LD_ADDR_VAR 0 3
25188: PUSH
25189: LD_INT 22
25191: PUSH
25192: LD_OWVAR 2
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 25
25203: PUSH
25204: LD_INT 1
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PPUSH
25215: CALL_OW 69
25219: ST_TO_ADDR
// if not tmp then
25220: LD_VAR 0 3
25224: NOT
25225: IFFALSE 25229
// exit ;
25227: GO 25285
// un := tmp [ rand ( 1 , tmp ) ] ;
25229: LD_ADDR_VAR 0 2
25233: PUSH
25234: LD_VAR 0 3
25238: PUSH
25239: LD_INT 1
25241: PPUSH
25242: LD_VAR 0 3
25246: PPUSH
25247: CALL_OW 12
25251: ARRAY
25252: ST_TO_ADDR
// if Crawls ( un ) then
25253: LD_VAR 0 2
25257: PPUSH
25258: CALL_OW 318
25262: IFFALSE 25273
// ComWalk ( un ) ;
25264: LD_VAR 0 2
25268: PPUSH
25269: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25273: LD_VAR 0 2
25277: PPUSH
25278: LD_INT 5
25280: PPUSH
25281: CALL_OW 336
// end ;
25285: PPOPN 3
25287: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25288: LD_EXP 78
25292: PUSH
25293: LD_EXP 96
25297: AND
25298: PUSH
25299: LD_OWVAR 67
25303: PUSH
25304: LD_INT 3
25306: LESS
25307: AND
25308: IFFALSE 25327
25310: GO 25312
25312: DISABLE
// Difficulty := Difficulty + 1 ;
25313: LD_ADDR_OWVAR 67
25317: PUSH
25318: LD_OWVAR 67
25322: PUSH
25323: LD_INT 1
25325: PLUS
25326: ST_TO_ADDR
25327: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25328: LD_EXP 78
25332: PUSH
25333: LD_EXP 97
25337: AND
25338: IFFALSE 25441
25340: GO 25342
25342: DISABLE
25343: LD_INT 0
25345: PPUSH
// begin for i := 1 to 5 do
25346: LD_ADDR_VAR 0 1
25350: PUSH
25351: DOUBLE
25352: LD_INT 1
25354: DEC
25355: ST_TO_ADDR
25356: LD_INT 5
25358: PUSH
25359: FOR_TO
25360: IFFALSE 25439
// begin uc_nation := nation_nature ;
25362: LD_ADDR_OWVAR 21
25366: PUSH
25367: LD_INT 0
25369: ST_TO_ADDR
// uc_side := 0 ;
25370: LD_ADDR_OWVAR 20
25374: PUSH
25375: LD_INT 0
25377: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25378: LD_ADDR_OWVAR 29
25382: PUSH
25383: LD_INT 12
25385: PUSH
25386: LD_INT 12
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: ST_TO_ADDR
// hc_agressivity := 20 ;
25393: LD_ADDR_OWVAR 35
25397: PUSH
25398: LD_INT 20
25400: ST_TO_ADDR
// hc_class := class_tiger ;
25401: LD_ADDR_OWVAR 28
25405: PUSH
25406: LD_INT 14
25408: ST_TO_ADDR
// hc_gallery :=  ;
25409: LD_ADDR_OWVAR 33
25413: PUSH
25414: LD_STRING 
25416: ST_TO_ADDR
// hc_name :=  ;
25417: LD_ADDR_OWVAR 26
25421: PUSH
25422: LD_STRING 
25424: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25425: CALL_OW 44
25429: PPUSH
25430: LD_INT 0
25432: PPUSH
25433: CALL_OW 51
// end ;
25437: GO 25359
25439: POP
25440: POP
// end ;
25441: PPOPN 1
25443: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25444: LD_EXP 78
25448: PUSH
25449: LD_EXP 98
25453: AND
25454: IFFALSE 25463
25456: GO 25458
25458: DISABLE
// StreamSibBomb ;
25459: CALL 25464 0 0
25463: END
// export function StreamSibBomb ; var i , x , y ; begin
25464: LD_INT 0
25466: PPUSH
25467: PPUSH
25468: PPUSH
25469: PPUSH
// result := false ;
25470: LD_ADDR_VAR 0 1
25474: PUSH
25475: LD_INT 0
25477: ST_TO_ADDR
// for i := 1 to 16 do
25478: LD_ADDR_VAR 0 2
25482: PUSH
25483: DOUBLE
25484: LD_INT 1
25486: DEC
25487: ST_TO_ADDR
25488: LD_INT 16
25490: PUSH
25491: FOR_TO
25492: IFFALSE 25691
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25494: LD_ADDR_VAR 0 3
25498: PUSH
25499: LD_INT 10
25501: PUSH
25502: LD_INT 20
25504: PUSH
25505: LD_INT 30
25507: PUSH
25508: LD_INT 40
25510: PUSH
25511: LD_INT 50
25513: PUSH
25514: LD_INT 60
25516: PUSH
25517: LD_INT 70
25519: PUSH
25520: LD_INT 80
25522: PUSH
25523: LD_INT 90
25525: PUSH
25526: LD_INT 100
25528: PUSH
25529: LD_INT 110
25531: PUSH
25532: LD_INT 120
25534: PUSH
25535: LD_INT 130
25537: PUSH
25538: LD_INT 140
25540: PUSH
25541: LD_INT 150
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 1
25563: PPUSH
25564: LD_INT 15
25566: PPUSH
25567: CALL_OW 12
25571: ARRAY
25572: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25573: LD_ADDR_VAR 0 4
25577: PUSH
25578: LD_INT 10
25580: PUSH
25581: LD_INT 20
25583: PUSH
25584: LD_INT 30
25586: PUSH
25587: LD_INT 40
25589: PUSH
25590: LD_INT 50
25592: PUSH
25593: LD_INT 60
25595: PUSH
25596: LD_INT 70
25598: PUSH
25599: LD_INT 80
25601: PUSH
25602: LD_INT 90
25604: PUSH
25605: LD_INT 100
25607: PUSH
25608: LD_INT 110
25610: PUSH
25611: LD_INT 120
25613: PUSH
25614: LD_INT 130
25616: PUSH
25617: LD_INT 140
25619: PUSH
25620: LD_INT 150
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 1
25642: PPUSH
25643: LD_INT 15
25645: PPUSH
25646: CALL_OW 12
25650: ARRAY
25651: ST_TO_ADDR
// if ValidHex ( x , y ) then
25652: LD_VAR 0 3
25656: PPUSH
25657: LD_VAR 0 4
25661: PPUSH
25662: CALL_OW 488
25666: IFFALSE 25689
// begin result := [ x , y ] ;
25668: LD_ADDR_VAR 0 1
25672: PUSH
25673: LD_VAR 0 3
25677: PUSH
25678: LD_VAR 0 4
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: ST_TO_ADDR
// break ;
25687: GO 25691
// end ; end ;
25689: GO 25491
25691: POP
25692: POP
// if result then
25693: LD_VAR 0 1
25697: IFFALSE 25757
// begin ToLua ( playSibBomb() ) ;
25699: LD_STRING playSibBomb()
25701: PPUSH
25702: CALL_OW 559
// wait ( 0 0$14 ) ;
25706: LD_INT 490
25708: PPUSH
25709: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25713: LD_VAR 0 1
25717: PUSH
25718: LD_INT 1
25720: ARRAY
25721: PPUSH
25722: LD_VAR 0 1
25726: PUSH
25727: LD_INT 2
25729: ARRAY
25730: PPUSH
25731: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25735: LD_VAR 0 1
25739: PUSH
25740: LD_INT 1
25742: ARRAY
25743: PPUSH
25744: LD_VAR 0 1
25748: PUSH
25749: LD_INT 2
25751: ARRAY
25752: PPUSH
25753: CALL_OW 429
// end ; end ;
25757: LD_VAR 0 1
25761: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25762: LD_EXP 78
25766: PUSH
25767: LD_EXP 100
25771: AND
25772: IFFALSE 25784
25774: GO 25776
25776: DISABLE
// YouLost (  ) ;
25777: LD_STRING 
25779: PPUSH
25780: CALL_OW 104
25784: END
// every 0 0$1 trigger StreamModeActive and sFog do
25785: LD_EXP 78
25789: PUSH
25790: LD_EXP 99
25794: AND
25795: IFFALSE 25809
25797: GO 25799
25799: DISABLE
// FogOff ( your_side ) ;
25800: LD_OWVAR 2
25804: PPUSH
25805: CALL_OW 344
25809: END
// every 0 0$1 trigger StreamModeActive and sSun do
25810: LD_EXP 78
25814: PUSH
25815: LD_EXP 101
25819: AND
25820: IFFALSE 25848
25822: GO 25824
25824: DISABLE
// begin solar_recharge_percent := 0 ;
25825: LD_ADDR_OWVAR 79
25829: PUSH
25830: LD_INT 0
25832: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25833: LD_INT 10500
25835: PPUSH
25836: CALL_OW 67
// solar_recharge_percent := 100 ;
25840: LD_ADDR_OWVAR 79
25844: PUSH
25845: LD_INT 100
25847: ST_TO_ADDR
// end ;
25848: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25849: LD_EXP 78
25853: PUSH
25854: LD_EXP 102
25858: AND
25859: IFFALSE 26098
25861: GO 25863
25863: DISABLE
25864: LD_INT 0
25866: PPUSH
25867: PPUSH
25868: PPUSH
// begin tmp := [ ] ;
25869: LD_ADDR_VAR 0 3
25873: PUSH
25874: EMPTY
25875: ST_TO_ADDR
// for i := 1 to 6 do
25876: LD_ADDR_VAR 0 1
25880: PUSH
25881: DOUBLE
25882: LD_INT 1
25884: DEC
25885: ST_TO_ADDR
25886: LD_INT 6
25888: PUSH
25889: FOR_TO
25890: IFFALSE 25995
// begin uc_nation := nation_nature ;
25892: LD_ADDR_OWVAR 21
25896: PUSH
25897: LD_INT 0
25899: ST_TO_ADDR
// uc_side := 0 ;
25900: LD_ADDR_OWVAR 20
25904: PUSH
25905: LD_INT 0
25907: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25908: LD_ADDR_OWVAR 29
25912: PUSH
25913: LD_INT 12
25915: PUSH
25916: LD_INT 12
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: ST_TO_ADDR
// hc_agressivity := 20 ;
25923: LD_ADDR_OWVAR 35
25927: PUSH
25928: LD_INT 20
25930: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25931: LD_ADDR_OWVAR 28
25935: PUSH
25936: LD_INT 17
25938: ST_TO_ADDR
// hc_gallery :=  ;
25939: LD_ADDR_OWVAR 33
25943: PUSH
25944: LD_STRING 
25946: ST_TO_ADDR
// hc_name :=  ;
25947: LD_ADDR_OWVAR 26
25951: PUSH
25952: LD_STRING 
25954: ST_TO_ADDR
// un := CreateHuman ;
25955: LD_ADDR_VAR 0 2
25959: PUSH
25960: CALL_OW 44
25964: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25965: LD_VAR 0 2
25969: PPUSH
25970: LD_INT 1
25972: PPUSH
25973: CALL_OW 51
// tmp := tmp ^ un ;
25977: LD_ADDR_VAR 0 3
25981: PUSH
25982: LD_VAR 0 3
25986: PUSH
25987: LD_VAR 0 2
25991: ADD
25992: ST_TO_ADDR
// end ;
25993: GO 25889
25995: POP
25996: POP
// repeat wait ( 0 0$1 ) ;
25997: LD_INT 35
25999: PPUSH
26000: CALL_OW 67
// for un in tmp do
26004: LD_ADDR_VAR 0 2
26008: PUSH
26009: LD_VAR 0 3
26013: PUSH
26014: FOR_IN
26015: IFFALSE 26089
// begin if IsDead ( un ) then
26017: LD_VAR 0 2
26021: PPUSH
26022: CALL_OW 301
26026: IFFALSE 26046
// begin tmp := tmp diff un ;
26028: LD_ADDR_VAR 0 3
26032: PUSH
26033: LD_VAR 0 3
26037: PUSH
26038: LD_VAR 0 2
26042: DIFF
26043: ST_TO_ADDR
// continue ;
26044: GO 26014
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26046: LD_VAR 0 2
26050: PPUSH
26051: LD_INT 3
26053: PUSH
26054: LD_INT 22
26056: PUSH
26057: LD_INT 0
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PPUSH
26068: CALL_OW 69
26072: PPUSH
26073: LD_VAR 0 2
26077: PPUSH
26078: CALL_OW 74
26082: PPUSH
26083: CALL_OW 115
// end ;
26087: GO 26014
26089: POP
26090: POP
// until not tmp ;
26091: LD_VAR 0 3
26095: NOT
26096: IFFALSE 25997
// end ;
26098: PPOPN 3
26100: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26101: LD_EXP 78
26105: PUSH
26106: LD_EXP 103
26110: AND
26111: IFFALSE 26165
26113: GO 26115
26115: DISABLE
// begin ToLua ( displayTroll(); ) ;
26116: LD_STRING displayTroll();
26118: PPUSH
26119: CALL_OW 559
// wait ( 3 3$00 ) ;
26123: LD_INT 6300
26125: PPUSH
26126: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26130: LD_STRING hideTroll();
26132: PPUSH
26133: CALL_OW 559
// wait ( 1 1$00 ) ;
26137: LD_INT 2100
26139: PPUSH
26140: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26144: LD_STRING displayTroll();
26146: PPUSH
26147: CALL_OW 559
// wait ( 1 1$00 ) ;
26151: LD_INT 2100
26153: PPUSH
26154: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26158: LD_STRING hideTroll();
26160: PPUSH
26161: CALL_OW 559
// end ;
26165: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26166: LD_EXP 78
26170: PUSH
26171: LD_EXP 104
26175: AND
26176: IFFALSE 26239
26178: GO 26180
26180: DISABLE
26181: LD_INT 0
26183: PPUSH
// begin p := 0 ;
26184: LD_ADDR_VAR 0 1
26188: PUSH
26189: LD_INT 0
26191: ST_TO_ADDR
// repeat game_speed := 1 ;
26192: LD_ADDR_OWVAR 65
26196: PUSH
26197: LD_INT 1
26199: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26200: LD_INT 35
26202: PPUSH
26203: CALL_OW 67
// p := p + 1 ;
26207: LD_ADDR_VAR 0 1
26211: PUSH
26212: LD_VAR 0 1
26216: PUSH
26217: LD_INT 1
26219: PLUS
26220: ST_TO_ADDR
// until p >= 60 ;
26221: LD_VAR 0 1
26225: PUSH
26226: LD_INT 60
26228: GREATEREQUAL
26229: IFFALSE 26192
// game_speed := 4 ;
26231: LD_ADDR_OWVAR 65
26235: PUSH
26236: LD_INT 4
26238: ST_TO_ADDR
// end ;
26239: PPOPN 1
26241: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26242: LD_EXP 78
26246: PUSH
26247: LD_EXP 105
26251: AND
26252: IFFALSE 26398
26254: GO 26256
26256: DISABLE
26257: LD_INT 0
26259: PPUSH
26260: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26261: LD_ADDR_VAR 0 1
26265: PUSH
26266: LD_INT 22
26268: PUSH
26269: LD_OWVAR 2
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 2
26280: PUSH
26281: LD_INT 30
26283: PUSH
26284: LD_INT 0
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 30
26293: PUSH
26294: LD_INT 1
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: LIST
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PPUSH
26310: CALL_OW 69
26314: ST_TO_ADDR
// if not depot then
26315: LD_VAR 0 1
26319: NOT
26320: IFFALSE 26324
// exit ;
26322: GO 26398
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26324: LD_ADDR_VAR 0 2
26328: PUSH
26329: LD_VAR 0 1
26333: PUSH
26334: LD_INT 1
26336: PPUSH
26337: LD_VAR 0 1
26341: PPUSH
26342: CALL_OW 12
26346: ARRAY
26347: PPUSH
26348: CALL_OW 274
26352: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26353: LD_VAR 0 2
26357: PPUSH
26358: LD_INT 1
26360: PPUSH
26361: LD_INT 0
26363: PPUSH
26364: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26368: LD_VAR 0 2
26372: PPUSH
26373: LD_INT 2
26375: PPUSH
26376: LD_INT 0
26378: PPUSH
26379: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26383: LD_VAR 0 2
26387: PPUSH
26388: LD_INT 3
26390: PPUSH
26391: LD_INT 0
26393: PPUSH
26394: CALL_OW 277
// end ;
26398: PPOPN 2
26400: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26401: LD_EXP 78
26405: PUSH
26406: LD_EXP 106
26410: AND
26411: IFFALSE 26508
26413: GO 26415
26415: DISABLE
26416: LD_INT 0
26418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26419: LD_ADDR_VAR 0 1
26423: PUSH
26424: LD_INT 22
26426: PUSH
26427: LD_OWVAR 2
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 21
26438: PUSH
26439: LD_INT 1
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 3
26448: PUSH
26449: LD_INT 23
26451: PUSH
26452: LD_INT 0
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: LIST
26467: PPUSH
26468: CALL_OW 69
26472: ST_TO_ADDR
// if not tmp then
26473: LD_VAR 0 1
26477: NOT
26478: IFFALSE 26482
// exit ;
26480: GO 26508
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26482: LD_VAR 0 1
26486: PUSH
26487: LD_INT 1
26489: PPUSH
26490: LD_VAR 0 1
26494: PPUSH
26495: CALL_OW 12
26499: ARRAY
26500: PPUSH
26501: LD_INT 200
26503: PPUSH
26504: CALL_OW 234
// end ;
26508: PPOPN 1
26510: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26511: LD_EXP 78
26515: PUSH
26516: LD_EXP 107
26520: AND
26521: IFFALSE 26600
26523: GO 26525
26525: DISABLE
26526: LD_INT 0
26528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26529: LD_ADDR_VAR 0 1
26533: PUSH
26534: LD_INT 22
26536: PUSH
26537: LD_OWVAR 2
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 21
26548: PUSH
26549: LD_INT 2
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PPUSH
26560: CALL_OW 69
26564: ST_TO_ADDR
// if not tmp then
26565: LD_VAR 0 1
26569: NOT
26570: IFFALSE 26574
// exit ;
26572: GO 26600
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26574: LD_VAR 0 1
26578: PUSH
26579: LD_INT 1
26581: PPUSH
26582: LD_VAR 0 1
26586: PPUSH
26587: CALL_OW 12
26591: ARRAY
26592: PPUSH
26593: LD_INT 60
26595: PPUSH
26596: CALL_OW 234
// end ;
26600: PPOPN 1
26602: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26603: LD_EXP 78
26607: PUSH
26608: LD_EXP 108
26612: AND
26613: IFFALSE 26712
26615: GO 26617
26617: DISABLE
26618: LD_INT 0
26620: PPUSH
26621: PPUSH
// begin enable ;
26622: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26623: LD_ADDR_VAR 0 1
26627: PUSH
26628: LD_INT 22
26630: PUSH
26631: LD_OWVAR 2
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 61
26642: PUSH
26643: EMPTY
26644: LIST
26645: PUSH
26646: LD_INT 33
26648: PUSH
26649: LD_INT 2
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: LIST
26660: PPUSH
26661: CALL_OW 69
26665: ST_TO_ADDR
// if not tmp then
26666: LD_VAR 0 1
26670: NOT
26671: IFFALSE 26675
// exit ;
26673: GO 26712
// for i in tmp do
26675: LD_ADDR_VAR 0 2
26679: PUSH
26680: LD_VAR 0 1
26684: PUSH
26685: FOR_IN
26686: IFFALSE 26710
// if IsControledBy ( i ) then
26688: LD_VAR 0 2
26692: PPUSH
26693: CALL_OW 312
26697: IFFALSE 26708
// ComUnlink ( i ) ;
26699: LD_VAR 0 2
26703: PPUSH
26704: CALL_OW 136
26708: GO 26685
26710: POP
26711: POP
// end ;
26712: PPOPN 2
26714: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26715: LD_EXP 78
26719: PUSH
26720: LD_EXP 109
26724: AND
26725: IFFALSE 26865
26727: GO 26729
26729: DISABLE
26730: LD_INT 0
26732: PPUSH
26733: PPUSH
// begin ToLua ( displayPowell(); ) ;
26734: LD_STRING displayPowell();
26736: PPUSH
26737: CALL_OW 559
// uc_side := 0 ;
26741: LD_ADDR_OWVAR 20
26745: PUSH
26746: LD_INT 0
26748: ST_TO_ADDR
// uc_nation := 2 ;
26749: LD_ADDR_OWVAR 21
26753: PUSH
26754: LD_INT 2
26756: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26757: LD_ADDR_OWVAR 37
26761: PUSH
26762: LD_INT 14
26764: ST_TO_ADDR
// vc_engine := engine_siberite ;
26765: LD_ADDR_OWVAR 39
26769: PUSH
26770: LD_INT 3
26772: ST_TO_ADDR
// vc_control := control_apeman ;
26773: LD_ADDR_OWVAR 38
26777: PUSH
26778: LD_INT 5
26780: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26781: LD_ADDR_OWVAR 40
26785: PUSH
26786: LD_INT 29
26788: ST_TO_ADDR
// un := CreateVehicle ;
26789: LD_ADDR_VAR 0 2
26793: PUSH
26794: CALL_OW 45
26798: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26799: LD_VAR 0 2
26803: PPUSH
26804: LD_INT 1
26806: PPUSH
26807: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26811: LD_INT 35
26813: PPUSH
26814: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26818: LD_VAR 0 2
26822: PPUSH
26823: LD_INT 22
26825: PUSH
26826: LD_OWVAR 2
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PPUSH
26835: CALL_OW 69
26839: PPUSH
26840: LD_VAR 0 2
26844: PPUSH
26845: CALL_OW 74
26849: PPUSH
26850: CALL_OW 115
// until IsDead ( un ) ;
26854: LD_VAR 0 2
26858: PPUSH
26859: CALL_OW 301
26863: IFFALSE 26811
// end ;
26865: PPOPN 2
26867: END
// every 0 0$1 trigger StreamModeActive and sStu do
26868: LD_EXP 78
26872: PUSH
26873: LD_EXP 117
26877: AND
26878: IFFALSE 26894
26880: GO 26882
26882: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26883: LD_STRING displayStucuk();
26885: PPUSH
26886: CALL_OW 559
// ResetFog ;
26890: CALL_OW 335
// end ;
26894: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26895: LD_EXP 78
26899: PUSH
26900: LD_EXP 110
26904: AND
26905: IFFALSE 27046
26907: GO 26909
26909: DISABLE
26910: LD_INT 0
26912: PPUSH
26913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26914: LD_ADDR_VAR 0 2
26918: PUSH
26919: LD_INT 22
26921: PUSH
26922: LD_OWVAR 2
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 21
26933: PUSH
26934: LD_INT 1
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PPUSH
26945: CALL_OW 69
26949: ST_TO_ADDR
// if not tmp then
26950: LD_VAR 0 2
26954: NOT
26955: IFFALSE 26959
// exit ;
26957: GO 27046
// un := tmp [ rand ( 1 , tmp ) ] ;
26959: LD_ADDR_VAR 0 1
26963: PUSH
26964: LD_VAR 0 2
26968: PUSH
26969: LD_INT 1
26971: PPUSH
26972: LD_VAR 0 2
26976: PPUSH
26977: CALL_OW 12
26981: ARRAY
26982: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26983: LD_VAR 0 1
26987: PPUSH
26988: LD_INT 0
26990: PPUSH
26991: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26995: LD_VAR 0 1
26999: PPUSH
27000: LD_OWVAR 3
27004: PUSH
27005: LD_VAR 0 1
27009: DIFF
27010: PPUSH
27011: LD_VAR 0 1
27015: PPUSH
27016: CALL_OW 74
27020: PPUSH
27021: CALL_OW 115
// wait ( 0 0$20 ) ;
27025: LD_INT 700
27027: PPUSH
27028: CALL_OW 67
// SetSide ( un , your_side ) ;
27032: LD_VAR 0 1
27036: PPUSH
27037: LD_OWVAR 2
27041: PPUSH
27042: CALL_OW 235
// end ;
27046: PPOPN 2
27048: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27049: LD_EXP 78
27053: PUSH
27054: LD_EXP 111
27058: AND
27059: IFFALSE 27165
27061: GO 27063
27063: DISABLE
27064: LD_INT 0
27066: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27067: LD_ADDR_VAR 0 1
27071: PUSH
27072: LD_INT 22
27074: PUSH
27075: LD_OWVAR 2
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 2
27086: PUSH
27087: LD_INT 30
27089: PUSH
27090: LD_INT 0
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 30
27099: PUSH
27100: LD_INT 1
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: LIST
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PPUSH
27116: CALL_OW 69
27120: ST_TO_ADDR
// if not depot then
27121: LD_VAR 0 1
27125: NOT
27126: IFFALSE 27130
// exit ;
27128: GO 27165
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27130: LD_VAR 0 1
27134: PUSH
27135: LD_INT 1
27137: ARRAY
27138: PPUSH
27139: CALL_OW 250
27143: PPUSH
27144: LD_VAR 0 1
27148: PUSH
27149: LD_INT 1
27151: ARRAY
27152: PPUSH
27153: CALL_OW 251
27157: PPUSH
27158: LD_INT 70
27160: PPUSH
27161: CALL_OW 495
// end ;
27165: PPOPN 1
27167: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27168: LD_EXP 78
27172: PUSH
27173: LD_EXP 112
27177: AND
27178: IFFALSE 27389
27180: GO 27182
27182: DISABLE
27183: LD_INT 0
27185: PPUSH
27186: PPUSH
27187: PPUSH
27188: PPUSH
27189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27190: LD_ADDR_VAR 0 5
27194: PUSH
27195: LD_INT 22
27197: PUSH
27198: LD_OWVAR 2
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 21
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PPUSH
27221: CALL_OW 69
27225: ST_TO_ADDR
// if not tmp then
27226: LD_VAR 0 5
27230: NOT
27231: IFFALSE 27235
// exit ;
27233: GO 27389
// for i in tmp do
27235: LD_ADDR_VAR 0 1
27239: PUSH
27240: LD_VAR 0 5
27244: PUSH
27245: FOR_IN
27246: IFFALSE 27387
// begin d := rand ( 0 , 5 ) ;
27248: LD_ADDR_VAR 0 4
27252: PUSH
27253: LD_INT 0
27255: PPUSH
27256: LD_INT 5
27258: PPUSH
27259: CALL_OW 12
27263: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27264: LD_ADDR_VAR 0 2
27268: PUSH
27269: LD_VAR 0 1
27273: PPUSH
27274: CALL_OW 250
27278: PPUSH
27279: LD_VAR 0 4
27283: PPUSH
27284: LD_INT 3
27286: PPUSH
27287: LD_INT 12
27289: PPUSH
27290: CALL_OW 12
27294: PPUSH
27295: CALL_OW 272
27299: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27300: LD_ADDR_VAR 0 3
27304: PUSH
27305: LD_VAR 0 1
27309: PPUSH
27310: CALL_OW 251
27314: PPUSH
27315: LD_VAR 0 4
27319: PPUSH
27320: LD_INT 3
27322: PPUSH
27323: LD_INT 12
27325: PPUSH
27326: CALL_OW 12
27330: PPUSH
27331: CALL_OW 273
27335: ST_TO_ADDR
// if ValidHex ( x , y ) then
27336: LD_VAR 0 2
27340: PPUSH
27341: LD_VAR 0 3
27345: PPUSH
27346: CALL_OW 488
27350: IFFALSE 27385
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27352: LD_VAR 0 1
27356: PPUSH
27357: LD_VAR 0 2
27361: PPUSH
27362: LD_VAR 0 3
27366: PPUSH
27367: LD_INT 3
27369: PPUSH
27370: LD_INT 6
27372: PPUSH
27373: CALL_OW 12
27377: PPUSH
27378: LD_INT 1
27380: PPUSH
27381: CALL_OW 483
// end ;
27385: GO 27245
27387: POP
27388: POP
// end ;
27389: PPOPN 5
27391: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27392: LD_EXP 78
27396: PUSH
27397: LD_EXP 113
27401: AND
27402: IFFALSE 27496
27404: GO 27406
27406: DISABLE
27407: LD_INT 0
27409: PPUSH
27410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27411: LD_ADDR_VAR 0 2
27415: PUSH
27416: LD_INT 22
27418: PUSH
27419: LD_OWVAR 2
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 32
27430: PUSH
27431: LD_INT 1
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 21
27440: PUSH
27441: LD_INT 2
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: LIST
27452: PPUSH
27453: CALL_OW 69
27457: ST_TO_ADDR
// if not tmp then
27458: LD_VAR 0 2
27462: NOT
27463: IFFALSE 27467
// exit ;
27465: GO 27496
// for i in tmp do
27467: LD_ADDR_VAR 0 1
27471: PUSH
27472: LD_VAR 0 2
27476: PUSH
27477: FOR_IN
27478: IFFALSE 27494
// SetFuel ( i , 0 ) ;
27480: LD_VAR 0 1
27484: PPUSH
27485: LD_INT 0
27487: PPUSH
27488: CALL_OW 240
27492: GO 27477
27494: POP
27495: POP
// end ;
27496: PPOPN 2
27498: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27499: LD_EXP 78
27503: PUSH
27504: LD_EXP 114
27508: AND
27509: IFFALSE 27575
27511: GO 27513
27513: DISABLE
27514: LD_INT 0
27516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27517: LD_ADDR_VAR 0 1
27521: PUSH
27522: LD_INT 22
27524: PUSH
27525: LD_OWVAR 2
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 30
27536: PUSH
27537: LD_INT 29
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PPUSH
27548: CALL_OW 69
27552: ST_TO_ADDR
// if not tmp then
27553: LD_VAR 0 1
27557: NOT
27558: IFFALSE 27562
// exit ;
27560: GO 27575
// DestroyUnit ( tmp [ 1 ] ) ;
27562: LD_VAR 0 1
27566: PUSH
27567: LD_INT 1
27569: ARRAY
27570: PPUSH
27571: CALL_OW 65
// end ;
27575: PPOPN 1
27577: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27578: LD_EXP 78
27582: PUSH
27583: LD_EXP 116
27587: AND
27588: IFFALSE 27717
27590: GO 27592
27592: DISABLE
27593: LD_INT 0
27595: PPUSH
// begin uc_side := 0 ;
27596: LD_ADDR_OWVAR 20
27600: PUSH
27601: LD_INT 0
27603: ST_TO_ADDR
// uc_nation := nation_arabian ;
27604: LD_ADDR_OWVAR 21
27608: PUSH
27609: LD_INT 2
27611: ST_TO_ADDR
// hc_gallery :=  ;
27612: LD_ADDR_OWVAR 33
27616: PUSH
27617: LD_STRING 
27619: ST_TO_ADDR
// hc_name :=  ;
27620: LD_ADDR_OWVAR 26
27624: PUSH
27625: LD_STRING 
27627: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27628: LD_INT 1
27630: PPUSH
27631: LD_INT 11
27633: PPUSH
27634: LD_INT 10
27636: PPUSH
27637: CALL_OW 380
// un := CreateHuman ;
27641: LD_ADDR_VAR 0 1
27645: PUSH
27646: CALL_OW 44
27650: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27651: LD_VAR 0 1
27655: PPUSH
27656: LD_INT 1
27658: PPUSH
27659: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27663: LD_INT 35
27665: PPUSH
27666: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27670: LD_VAR 0 1
27674: PPUSH
27675: LD_INT 22
27677: PUSH
27678: LD_OWVAR 2
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PPUSH
27687: CALL_OW 69
27691: PPUSH
27692: LD_VAR 0 1
27696: PPUSH
27697: CALL_OW 74
27701: PPUSH
27702: CALL_OW 115
// until IsDead ( un ) ;
27706: LD_VAR 0 1
27710: PPUSH
27711: CALL_OW 301
27715: IFFALSE 27663
// end ;
27717: PPOPN 1
27719: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27720: LD_EXP 78
27724: PUSH
27725: LD_EXP 118
27729: AND
27730: IFFALSE 27742
27732: GO 27734
27734: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27735: LD_STRING earthquake(getX(game), 0, 32)
27737: PPUSH
27738: CALL_OW 559
27742: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27743: LD_EXP 78
27747: PUSH
27748: LD_EXP 119
27752: AND
27753: IFFALSE 27844
27755: GO 27757
27757: DISABLE
27758: LD_INT 0
27760: PPUSH
// begin enable ;
27761: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27762: LD_ADDR_VAR 0 1
27766: PUSH
27767: LD_INT 22
27769: PUSH
27770: LD_OWVAR 2
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 21
27781: PUSH
27782: LD_INT 2
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 33
27791: PUSH
27792: LD_INT 3
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: LIST
27803: PPUSH
27804: CALL_OW 69
27808: ST_TO_ADDR
// if not tmp then
27809: LD_VAR 0 1
27813: NOT
27814: IFFALSE 27818
// exit ;
27816: GO 27844
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27818: LD_VAR 0 1
27822: PUSH
27823: LD_INT 1
27825: PPUSH
27826: LD_VAR 0 1
27830: PPUSH
27831: CALL_OW 12
27835: ARRAY
27836: PPUSH
27837: LD_INT 1
27839: PPUSH
27840: CALL_OW 234
// end ;
27844: PPOPN 1
27846: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27847: LD_EXP 78
27851: PUSH
27852: LD_EXP 120
27856: AND
27857: IFFALSE 27998
27859: GO 27861
27861: DISABLE
27862: LD_INT 0
27864: PPUSH
27865: PPUSH
27866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27867: LD_ADDR_VAR 0 3
27871: PUSH
27872: LD_INT 22
27874: PUSH
27875: LD_OWVAR 2
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 25
27886: PUSH
27887: LD_INT 1
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PPUSH
27898: CALL_OW 69
27902: ST_TO_ADDR
// if not tmp then
27903: LD_VAR 0 3
27907: NOT
27908: IFFALSE 27912
// exit ;
27910: GO 27998
// un := tmp [ rand ( 1 , tmp ) ] ;
27912: LD_ADDR_VAR 0 2
27916: PUSH
27917: LD_VAR 0 3
27921: PUSH
27922: LD_INT 1
27924: PPUSH
27925: LD_VAR 0 3
27929: PPUSH
27930: CALL_OW 12
27934: ARRAY
27935: ST_TO_ADDR
// if Crawls ( un ) then
27936: LD_VAR 0 2
27940: PPUSH
27941: CALL_OW 318
27945: IFFALSE 27956
// ComWalk ( un ) ;
27947: LD_VAR 0 2
27951: PPUSH
27952: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27956: LD_VAR 0 2
27960: PPUSH
27961: LD_INT 9
27963: PPUSH
27964: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27968: LD_INT 28
27970: PPUSH
27971: LD_OWVAR 2
27975: PPUSH
27976: LD_INT 2
27978: PPUSH
27979: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27983: LD_INT 29
27985: PPUSH
27986: LD_OWVAR 2
27990: PPUSH
27991: LD_INT 2
27993: PPUSH
27994: CALL_OW 322
// end ;
27998: PPOPN 3
28000: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28001: LD_EXP 78
28005: PUSH
28006: LD_EXP 121
28010: AND
28011: IFFALSE 28122
28013: GO 28015
28015: DISABLE
28016: LD_INT 0
28018: PPUSH
28019: PPUSH
28020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28021: LD_ADDR_VAR 0 3
28025: PUSH
28026: LD_INT 22
28028: PUSH
28029: LD_OWVAR 2
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 25
28040: PUSH
28041: LD_INT 1
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PPUSH
28052: CALL_OW 69
28056: ST_TO_ADDR
// if not tmp then
28057: LD_VAR 0 3
28061: NOT
28062: IFFALSE 28066
// exit ;
28064: GO 28122
// un := tmp [ rand ( 1 , tmp ) ] ;
28066: LD_ADDR_VAR 0 2
28070: PUSH
28071: LD_VAR 0 3
28075: PUSH
28076: LD_INT 1
28078: PPUSH
28079: LD_VAR 0 3
28083: PPUSH
28084: CALL_OW 12
28088: ARRAY
28089: ST_TO_ADDR
// if Crawls ( un ) then
28090: LD_VAR 0 2
28094: PPUSH
28095: CALL_OW 318
28099: IFFALSE 28110
// ComWalk ( un ) ;
28101: LD_VAR 0 2
28105: PPUSH
28106: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28110: LD_VAR 0 2
28114: PPUSH
28115: LD_INT 8
28117: PPUSH
28118: CALL_OW 336
// end ;
28122: PPOPN 3
28124: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28125: LD_EXP 78
28129: PUSH
28130: LD_EXP 122
28134: AND
28135: IFFALSE 28279
28137: GO 28139
28139: DISABLE
28140: LD_INT 0
28142: PPUSH
28143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28144: LD_ADDR_VAR 0 2
28148: PUSH
28149: LD_INT 22
28151: PUSH
28152: LD_OWVAR 2
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 21
28163: PUSH
28164: LD_INT 2
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 2
28173: PUSH
28174: LD_INT 34
28176: PUSH
28177: LD_INT 12
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 34
28186: PUSH
28187: LD_INT 51
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 34
28196: PUSH
28197: LD_INT 32
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: LIST
28214: PPUSH
28215: CALL_OW 69
28219: ST_TO_ADDR
// if not tmp then
28220: LD_VAR 0 2
28224: NOT
28225: IFFALSE 28229
// exit ;
28227: GO 28279
// for i in tmp do
28229: LD_ADDR_VAR 0 1
28233: PUSH
28234: LD_VAR 0 2
28238: PUSH
28239: FOR_IN
28240: IFFALSE 28277
// if GetCargo ( i , mat_artifact ) = 0 then
28242: LD_VAR 0 1
28246: PPUSH
28247: LD_INT 4
28249: PPUSH
28250: CALL_OW 289
28254: PUSH
28255: LD_INT 0
28257: EQUAL
28258: IFFALSE 28275
// SetCargo ( i , mat_siberit , 100 ) ;
28260: LD_VAR 0 1
28264: PPUSH
28265: LD_INT 3
28267: PPUSH
28268: LD_INT 100
28270: PPUSH
28271: CALL_OW 290
28275: GO 28239
28277: POP
28278: POP
// end ;
28279: PPOPN 2
28281: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28282: LD_EXP 78
28286: PUSH
28287: LD_EXP 123
28291: AND
28292: IFFALSE 28475
28294: GO 28296
28296: DISABLE
28297: LD_INT 0
28299: PPUSH
28300: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28301: LD_ADDR_VAR 0 2
28305: PUSH
28306: LD_INT 22
28308: PUSH
28309: LD_OWVAR 2
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PPUSH
28318: CALL_OW 69
28322: ST_TO_ADDR
// if not tmp then
28323: LD_VAR 0 2
28327: NOT
28328: IFFALSE 28332
// exit ;
28330: GO 28475
// for i := 1 to 2 do
28332: LD_ADDR_VAR 0 1
28336: PUSH
28337: DOUBLE
28338: LD_INT 1
28340: DEC
28341: ST_TO_ADDR
28342: LD_INT 2
28344: PUSH
28345: FOR_TO
28346: IFFALSE 28473
// begin uc_side := your_side ;
28348: LD_ADDR_OWVAR 20
28352: PUSH
28353: LD_OWVAR 2
28357: ST_TO_ADDR
// uc_nation := nation_american ;
28358: LD_ADDR_OWVAR 21
28362: PUSH
28363: LD_INT 1
28365: ST_TO_ADDR
// vc_chassis := us_morphling ;
28366: LD_ADDR_OWVAR 37
28370: PUSH
28371: LD_INT 5
28373: ST_TO_ADDR
// vc_engine := engine_siberite ;
28374: LD_ADDR_OWVAR 39
28378: PUSH
28379: LD_INT 3
28381: ST_TO_ADDR
// vc_control := control_computer ;
28382: LD_ADDR_OWVAR 38
28386: PUSH
28387: LD_INT 3
28389: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28390: LD_ADDR_OWVAR 40
28394: PUSH
28395: LD_INT 10
28397: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28398: LD_VAR 0 2
28402: PUSH
28403: LD_INT 1
28405: ARRAY
28406: PPUSH
28407: CALL_OW 310
28411: NOT
28412: IFFALSE 28459
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28414: CALL_OW 45
28418: PPUSH
28419: LD_VAR 0 2
28423: PUSH
28424: LD_INT 1
28426: ARRAY
28427: PPUSH
28428: CALL_OW 250
28432: PPUSH
28433: LD_VAR 0 2
28437: PUSH
28438: LD_INT 1
28440: ARRAY
28441: PPUSH
28442: CALL_OW 251
28446: PPUSH
28447: LD_INT 12
28449: PPUSH
28450: LD_INT 1
28452: PPUSH
28453: CALL_OW 50
28457: GO 28471
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28459: CALL_OW 45
28463: PPUSH
28464: LD_INT 1
28466: PPUSH
28467: CALL_OW 51
// end ;
28471: GO 28345
28473: POP
28474: POP
// end ;
28475: PPOPN 2
28477: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28478: LD_EXP 78
28482: PUSH
28483: LD_EXP 124
28487: AND
28488: IFFALSE 28710
28490: GO 28492
28492: DISABLE
28493: LD_INT 0
28495: PPUSH
28496: PPUSH
28497: PPUSH
28498: PPUSH
28499: PPUSH
28500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28501: LD_ADDR_VAR 0 6
28505: PUSH
28506: LD_INT 22
28508: PUSH
28509: LD_OWVAR 2
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 21
28520: PUSH
28521: LD_INT 1
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 3
28530: PUSH
28531: LD_INT 23
28533: PUSH
28534: LD_INT 0
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: LIST
28549: PPUSH
28550: CALL_OW 69
28554: ST_TO_ADDR
// if not tmp then
28555: LD_VAR 0 6
28559: NOT
28560: IFFALSE 28564
// exit ;
28562: GO 28710
// s1 := rand ( 1 , 4 ) ;
28564: LD_ADDR_VAR 0 2
28568: PUSH
28569: LD_INT 1
28571: PPUSH
28572: LD_INT 4
28574: PPUSH
28575: CALL_OW 12
28579: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28580: LD_ADDR_VAR 0 4
28584: PUSH
28585: LD_VAR 0 6
28589: PUSH
28590: LD_INT 1
28592: ARRAY
28593: PPUSH
28594: LD_VAR 0 2
28598: PPUSH
28599: CALL_OW 259
28603: ST_TO_ADDR
// if s1 = 1 then
28604: LD_VAR 0 2
28608: PUSH
28609: LD_INT 1
28611: EQUAL
28612: IFFALSE 28632
// s2 := rand ( 2 , 4 ) else
28614: LD_ADDR_VAR 0 3
28618: PUSH
28619: LD_INT 2
28621: PPUSH
28622: LD_INT 4
28624: PPUSH
28625: CALL_OW 12
28629: ST_TO_ADDR
28630: GO 28640
// s2 := 1 ;
28632: LD_ADDR_VAR 0 3
28636: PUSH
28637: LD_INT 1
28639: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28640: LD_ADDR_VAR 0 5
28644: PUSH
28645: LD_VAR 0 6
28649: PUSH
28650: LD_INT 1
28652: ARRAY
28653: PPUSH
28654: LD_VAR 0 3
28658: PPUSH
28659: CALL_OW 259
28663: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28664: LD_VAR 0 6
28668: PUSH
28669: LD_INT 1
28671: ARRAY
28672: PPUSH
28673: LD_VAR 0 2
28677: PPUSH
28678: LD_VAR 0 5
28682: PPUSH
28683: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28687: LD_VAR 0 6
28691: PUSH
28692: LD_INT 1
28694: ARRAY
28695: PPUSH
28696: LD_VAR 0 3
28700: PPUSH
28701: LD_VAR 0 4
28705: PPUSH
28706: CALL_OW 237
// end ;
28710: PPOPN 6
28712: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28713: LD_EXP 78
28717: PUSH
28718: LD_EXP 125
28722: AND
28723: IFFALSE 28802
28725: GO 28727
28727: DISABLE
28728: LD_INT 0
28730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28731: LD_ADDR_VAR 0 1
28735: PUSH
28736: LD_INT 22
28738: PUSH
28739: LD_OWVAR 2
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 30
28750: PUSH
28751: LD_INT 3
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PPUSH
28762: CALL_OW 69
28766: ST_TO_ADDR
// if not tmp then
28767: LD_VAR 0 1
28771: NOT
28772: IFFALSE 28776
// exit ;
28774: GO 28802
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28776: LD_VAR 0 1
28780: PUSH
28781: LD_INT 1
28783: PPUSH
28784: LD_VAR 0 1
28788: PPUSH
28789: CALL_OW 12
28793: ARRAY
28794: PPUSH
28795: LD_INT 1
28797: PPUSH
28798: CALL_OW 234
// end ;
28802: PPOPN 1
28804: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28805: LD_EXP 78
28809: PUSH
28810: LD_EXP 126
28814: AND
28815: IFFALSE 28927
28817: GO 28819
28819: DISABLE
28820: LD_INT 0
28822: PPUSH
28823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28824: LD_ADDR_VAR 0 2
28828: PUSH
28829: LD_INT 22
28831: PUSH
28832: LD_OWVAR 2
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 2
28843: PUSH
28844: LD_INT 30
28846: PUSH
28847: LD_INT 27
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 30
28856: PUSH
28857: LD_INT 26
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 30
28866: PUSH
28867: LD_INT 28
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PPUSH
28884: CALL_OW 69
28888: ST_TO_ADDR
// if not tmp then
28889: LD_VAR 0 2
28893: NOT
28894: IFFALSE 28898
// exit ;
28896: GO 28927
// for i in tmp do
28898: LD_ADDR_VAR 0 1
28902: PUSH
28903: LD_VAR 0 2
28907: PUSH
28908: FOR_IN
28909: IFFALSE 28925
// SetLives ( i , 1 ) ;
28911: LD_VAR 0 1
28915: PPUSH
28916: LD_INT 1
28918: PPUSH
28919: CALL_OW 234
28923: GO 28908
28925: POP
28926: POP
// end ;
28927: PPOPN 2
28929: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28930: LD_EXP 78
28934: PUSH
28935: LD_EXP 127
28939: AND
28940: IFFALSE 29214
28942: GO 28944
28944: DISABLE
28945: LD_INT 0
28947: PPUSH
28948: PPUSH
28949: PPUSH
// begin i := rand ( 1 , 7 ) ;
28950: LD_ADDR_VAR 0 1
28954: PUSH
28955: LD_INT 1
28957: PPUSH
28958: LD_INT 7
28960: PPUSH
28961: CALL_OW 12
28965: ST_TO_ADDR
// case i of 1 :
28966: LD_VAR 0 1
28970: PUSH
28971: LD_INT 1
28973: DOUBLE
28974: EQUAL
28975: IFTRUE 28979
28977: GO 28989
28979: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28980: LD_STRING earthquake(getX(game), 0, 32)
28982: PPUSH
28983: CALL_OW 559
28987: GO 29214
28989: LD_INT 2
28991: DOUBLE
28992: EQUAL
28993: IFTRUE 28997
28995: GO 29011
28997: POP
// begin ToLua ( displayStucuk(); ) ;
28998: LD_STRING displayStucuk();
29000: PPUSH
29001: CALL_OW 559
// ResetFog ;
29005: CALL_OW 335
// end ; 3 :
29009: GO 29214
29011: LD_INT 3
29013: DOUBLE
29014: EQUAL
29015: IFTRUE 29019
29017: GO 29123
29019: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29020: LD_ADDR_VAR 0 2
29024: PUSH
29025: LD_INT 22
29027: PUSH
29028: LD_OWVAR 2
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 25
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PPUSH
29051: CALL_OW 69
29055: ST_TO_ADDR
// if not tmp then
29056: LD_VAR 0 2
29060: NOT
29061: IFFALSE 29065
// exit ;
29063: GO 29214
// un := tmp [ rand ( 1 , tmp ) ] ;
29065: LD_ADDR_VAR 0 3
29069: PUSH
29070: LD_VAR 0 2
29074: PUSH
29075: LD_INT 1
29077: PPUSH
29078: LD_VAR 0 2
29082: PPUSH
29083: CALL_OW 12
29087: ARRAY
29088: ST_TO_ADDR
// if Crawls ( un ) then
29089: LD_VAR 0 3
29093: PPUSH
29094: CALL_OW 318
29098: IFFALSE 29109
// ComWalk ( un ) ;
29100: LD_VAR 0 3
29104: PPUSH
29105: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29109: LD_VAR 0 3
29113: PPUSH
29114: LD_INT 8
29116: PPUSH
29117: CALL_OW 336
// end ; 4 :
29121: GO 29214
29123: LD_INT 4
29125: DOUBLE
29126: EQUAL
29127: IFTRUE 29131
29129: GO 29192
29131: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29132: LD_ADDR_VAR 0 2
29136: PUSH
29137: LD_INT 22
29139: PUSH
29140: LD_OWVAR 2
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 30
29151: PUSH
29152: LD_INT 29
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PPUSH
29163: CALL_OW 69
29167: ST_TO_ADDR
// if not tmp then
29168: LD_VAR 0 2
29172: NOT
29173: IFFALSE 29177
// exit ;
29175: GO 29214
// DestroyUnit ( tmp [ 1 ] ) ;
29177: LD_VAR 0 2
29181: PUSH
29182: LD_INT 1
29184: ARRAY
29185: PPUSH
29186: CALL_OW 65
// end ; 5 .. 7 :
29190: GO 29214
29192: LD_INT 5
29194: DOUBLE
29195: GREATEREQUAL
29196: IFFALSE 29204
29198: LD_INT 7
29200: DOUBLE
29201: LESSEQUAL
29202: IFTRUE 29206
29204: GO 29213
29206: POP
// StreamSibBomb ; end ;
29207: CALL 25464 0 0
29211: GO 29214
29213: POP
// end ;
29214: PPOPN 3
29216: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29217: LD_EXP 78
29221: PUSH
29222: LD_EXP 128
29226: AND
29227: IFFALSE 29383
29229: GO 29231
29231: DISABLE
29232: LD_INT 0
29234: PPUSH
29235: PPUSH
29236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29237: LD_ADDR_VAR 0 2
29241: PUSH
29242: LD_INT 81
29244: PUSH
29245: LD_OWVAR 2
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 2
29256: PUSH
29257: LD_INT 21
29259: PUSH
29260: LD_INT 1
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 21
29269: PUSH
29270: LD_INT 2
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: LIST
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PPUSH
29286: CALL_OW 69
29290: ST_TO_ADDR
// if not tmp then
29291: LD_VAR 0 2
29295: NOT
29296: IFFALSE 29300
// exit ;
29298: GO 29383
// p := 0 ;
29300: LD_ADDR_VAR 0 3
29304: PUSH
29305: LD_INT 0
29307: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29308: LD_INT 35
29310: PPUSH
29311: CALL_OW 67
// p := p + 1 ;
29315: LD_ADDR_VAR 0 3
29319: PUSH
29320: LD_VAR 0 3
29324: PUSH
29325: LD_INT 1
29327: PLUS
29328: ST_TO_ADDR
// for i in tmp do
29329: LD_ADDR_VAR 0 1
29333: PUSH
29334: LD_VAR 0 2
29338: PUSH
29339: FOR_IN
29340: IFFALSE 29371
// if GetLives ( i ) < 1000 then
29342: LD_VAR 0 1
29346: PPUSH
29347: CALL_OW 256
29351: PUSH
29352: LD_INT 1000
29354: LESS
29355: IFFALSE 29369
// SetLives ( i , 1000 ) ;
29357: LD_VAR 0 1
29361: PPUSH
29362: LD_INT 1000
29364: PPUSH
29365: CALL_OW 234
29369: GO 29339
29371: POP
29372: POP
// until p > 20 ;
29373: LD_VAR 0 3
29377: PUSH
29378: LD_INT 20
29380: GREATER
29381: IFFALSE 29308
// end ;
29383: PPOPN 3
29385: END
// every 0 0$1 trigger StreamModeActive and sTime do
29386: LD_EXP 78
29390: PUSH
29391: LD_EXP 129
29395: AND
29396: IFFALSE 29431
29398: GO 29400
29400: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29401: LD_INT 28
29403: PPUSH
29404: LD_OWVAR 2
29408: PPUSH
29409: LD_INT 2
29411: PPUSH
29412: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29416: LD_INT 30
29418: PPUSH
29419: LD_OWVAR 2
29423: PPUSH
29424: LD_INT 2
29426: PPUSH
29427: CALL_OW 322
// end ;
29431: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29432: LD_EXP 78
29436: PUSH
29437: LD_EXP 130
29441: AND
29442: IFFALSE 29563
29444: GO 29446
29446: DISABLE
29447: LD_INT 0
29449: PPUSH
29450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29451: LD_ADDR_VAR 0 2
29455: PUSH
29456: LD_INT 22
29458: PUSH
29459: LD_OWVAR 2
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 21
29470: PUSH
29471: LD_INT 1
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 3
29480: PUSH
29481: LD_INT 23
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: LIST
29499: PPUSH
29500: CALL_OW 69
29504: ST_TO_ADDR
// if not tmp then
29505: LD_VAR 0 2
29509: NOT
29510: IFFALSE 29514
// exit ;
29512: GO 29563
// for i in tmp do
29514: LD_ADDR_VAR 0 1
29518: PUSH
29519: LD_VAR 0 2
29523: PUSH
29524: FOR_IN
29525: IFFALSE 29561
// begin if Crawls ( i ) then
29527: LD_VAR 0 1
29531: PPUSH
29532: CALL_OW 318
29536: IFFALSE 29547
// ComWalk ( i ) ;
29538: LD_VAR 0 1
29542: PPUSH
29543: CALL_OW 138
// SetClass ( i , 2 ) ;
29547: LD_VAR 0 1
29551: PPUSH
29552: LD_INT 2
29554: PPUSH
29555: CALL_OW 336
// end ;
29559: GO 29524
29561: POP
29562: POP
// end ;
29563: PPOPN 2
29565: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29566: LD_EXP 78
29570: PUSH
29571: LD_EXP 131
29575: AND
29576: IFFALSE 29857
29578: GO 29580
29580: DISABLE
29581: LD_INT 0
29583: PPUSH
29584: PPUSH
29585: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29586: LD_OWVAR 2
29590: PPUSH
29591: LD_INT 9
29593: PPUSH
29594: LD_INT 1
29596: PPUSH
29597: LD_INT 1
29599: PPUSH
29600: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29604: LD_INT 9
29606: PPUSH
29607: LD_OWVAR 2
29611: PPUSH
29612: CALL_OW 343
// uc_side := 9 ;
29616: LD_ADDR_OWVAR 20
29620: PUSH
29621: LD_INT 9
29623: ST_TO_ADDR
// uc_nation := 2 ;
29624: LD_ADDR_OWVAR 21
29628: PUSH
29629: LD_INT 2
29631: ST_TO_ADDR
// hc_name := Dark Warrior ;
29632: LD_ADDR_OWVAR 26
29636: PUSH
29637: LD_STRING Dark Warrior
29639: ST_TO_ADDR
// hc_gallery :=  ;
29640: LD_ADDR_OWVAR 33
29644: PUSH
29645: LD_STRING 
29647: ST_TO_ADDR
// hc_noskilllimit := true ;
29648: LD_ADDR_OWVAR 76
29652: PUSH
29653: LD_INT 1
29655: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29656: LD_ADDR_OWVAR 31
29660: PUSH
29661: LD_INT 30
29663: PUSH
29664: LD_INT 30
29666: PUSH
29667: LD_INT 30
29669: PUSH
29670: LD_INT 30
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: ST_TO_ADDR
// un := CreateHuman ;
29679: LD_ADDR_VAR 0 3
29683: PUSH
29684: CALL_OW 44
29688: ST_TO_ADDR
// hc_noskilllimit := false ;
29689: LD_ADDR_OWVAR 76
29693: PUSH
29694: LD_INT 0
29696: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29697: LD_VAR 0 3
29701: PPUSH
29702: LD_INT 1
29704: PPUSH
29705: CALL_OW 51
// p := 0 ;
29709: LD_ADDR_VAR 0 2
29713: PUSH
29714: LD_INT 0
29716: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29717: LD_INT 35
29719: PPUSH
29720: CALL_OW 67
// p := p + 1 ;
29724: LD_ADDR_VAR 0 2
29728: PUSH
29729: LD_VAR 0 2
29733: PUSH
29734: LD_INT 1
29736: PLUS
29737: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29738: LD_VAR 0 3
29742: PPUSH
29743: CALL_OW 256
29747: PUSH
29748: LD_INT 1000
29750: LESS
29751: IFFALSE 29765
// SetLives ( un , 1000 ) ;
29753: LD_VAR 0 3
29757: PPUSH
29758: LD_INT 1000
29760: PPUSH
29761: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29765: LD_VAR 0 3
29769: PPUSH
29770: LD_INT 81
29772: PUSH
29773: LD_OWVAR 2
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 91
29784: PUSH
29785: LD_VAR 0 3
29789: PUSH
29790: LD_INT 30
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: LIST
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PPUSH
29802: CALL_OW 69
29806: PPUSH
29807: LD_VAR 0 3
29811: PPUSH
29812: CALL_OW 74
29816: PPUSH
29817: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29821: LD_VAR 0 2
29825: PUSH
29826: LD_INT 60
29828: GREATER
29829: PUSH
29830: LD_VAR 0 3
29834: PPUSH
29835: CALL_OW 301
29839: OR
29840: IFFALSE 29717
// if un then
29842: LD_VAR 0 3
29846: IFFALSE 29857
// RemoveUnit ( un ) ;
29848: LD_VAR 0 3
29852: PPUSH
29853: CALL_OW 64
// end ;
29857: PPOPN 3
29859: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29860: LD_INT 0
29862: PPUSH
// case cmd of 301 :
29863: LD_VAR 0 1
29867: PUSH
29868: LD_INT 301
29870: DOUBLE
29871: EQUAL
29872: IFTRUE 29876
29874: GO 29908
29876: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29877: LD_VAR 0 6
29881: PPUSH
29882: LD_VAR 0 7
29886: PPUSH
29887: LD_VAR 0 8
29891: PPUSH
29892: LD_VAR 0 4
29896: PPUSH
29897: LD_VAR 0 5
29901: PPUSH
29902: CALL 31109 0 5
29906: GO 30029
29908: LD_INT 302
29910: DOUBLE
29911: EQUAL
29912: IFTRUE 29916
29914: GO 29953
29916: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29917: LD_VAR 0 6
29921: PPUSH
29922: LD_VAR 0 7
29926: PPUSH
29927: LD_VAR 0 8
29931: PPUSH
29932: LD_VAR 0 9
29936: PPUSH
29937: LD_VAR 0 4
29941: PPUSH
29942: LD_VAR 0 5
29946: PPUSH
29947: CALL 31200 0 6
29951: GO 30029
29953: LD_INT 303
29955: DOUBLE
29956: EQUAL
29957: IFTRUE 29961
29959: GO 29998
29961: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29962: LD_VAR 0 6
29966: PPUSH
29967: LD_VAR 0 7
29971: PPUSH
29972: LD_VAR 0 8
29976: PPUSH
29977: LD_VAR 0 9
29981: PPUSH
29982: LD_VAR 0 4
29986: PPUSH
29987: LD_VAR 0 5
29991: PPUSH
29992: CALL 30034 0 6
29996: GO 30029
29998: LD_INT 304
30000: DOUBLE
30001: EQUAL
30002: IFTRUE 30006
30004: GO 30028
30006: POP
// hHackTeleport ( unit , x , y ) ; end ;
30007: LD_VAR 0 2
30011: PPUSH
30012: LD_VAR 0 4
30016: PPUSH
30017: LD_VAR 0 5
30021: PPUSH
30022: CALL 31793 0 3
30026: GO 30029
30028: POP
// end ;
30029: LD_VAR 0 12
30033: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30034: LD_INT 0
30036: PPUSH
30037: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30038: LD_VAR 0 1
30042: PUSH
30043: LD_INT 1
30045: LESS
30046: PUSH
30047: LD_VAR 0 1
30051: PUSH
30052: LD_INT 3
30054: GREATER
30055: OR
30056: PUSH
30057: LD_VAR 0 5
30061: PPUSH
30062: LD_VAR 0 6
30066: PPUSH
30067: CALL_OW 428
30071: OR
30072: IFFALSE 30076
// exit ;
30074: GO 30796
// uc_side := your_side ;
30076: LD_ADDR_OWVAR 20
30080: PUSH
30081: LD_OWVAR 2
30085: ST_TO_ADDR
// uc_nation := nation ;
30086: LD_ADDR_OWVAR 21
30090: PUSH
30091: LD_VAR 0 1
30095: ST_TO_ADDR
// bc_level = 1 ;
30096: LD_ADDR_OWVAR 43
30100: PUSH
30101: LD_INT 1
30103: ST_TO_ADDR
// case btype of 1 :
30104: LD_VAR 0 2
30108: PUSH
30109: LD_INT 1
30111: DOUBLE
30112: EQUAL
30113: IFTRUE 30117
30115: GO 30128
30117: POP
// bc_type := b_depot ; 2 :
30118: LD_ADDR_OWVAR 42
30122: PUSH
30123: LD_INT 0
30125: ST_TO_ADDR
30126: GO 30740
30128: LD_INT 2
30130: DOUBLE
30131: EQUAL
30132: IFTRUE 30136
30134: GO 30147
30136: POP
// bc_type := b_warehouse ; 3 :
30137: LD_ADDR_OWVAR 42
30141: PUSH
30142: LD_INT 1
30144: ST_TO_ADDR
30145: GO 30740
30147: LD_INT 3
30149: DOUBLE
30150: EQUAL
30151: IFTRUE 30155
30153: GO 30166
30155: POP
// bc_type := b_lab ; 4 .. 9 :
30156: LD_ADDR_OWVAR 42
30160: PUSH
30161: LD_INT 6
30163: ST_TO_ADDR
30164: GO 30740
30166: LD_INT 4
30168: DOUBLE
30169: GREATEREQUAL
30170: IFFALSE 30178
30172: LD_INT 9
30174: DOUBLE
30175: LESSEQUAL
30176: IFTRUE 30180
30178: GO 30232
30180: POP
// begin bc_type := b_lab_half ;
30181: LD_ADDR_OWVAR 42
30185: PUSH
30186: LD_INT 7
30188: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30189: LD_ADDR_OWVAR 44
30193: PUSH
30194: LD_INT 10
30196: PUSH
30197: LD_INT 11
30199: PUSH
30200: LD_INT 12
30202: PUSH
30203: LD_INT 15
30205: PUSH
30206: LD_INT 14
30208: PUSH
30209: LD_INT 13
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: PUSH
30220: LD_VAR 0 2
30224: PUSH
30225: LD_INT 3
30227: MINUS
30228: ARRAY
30229: ST_TO_ADDR
// end ; 10 .. 13 :
30230: GO 30740
30232: LD_INT 10
30234: DOUBLE
30235: GREATEREQUAL
30236: IFFALSE 30244
30238: LD_INT 13
30240: DOUBLE
30241: LESSEQUAL
30242: IFTRUE 30246
30244: GO 30323
30246: POP
// begin bc_type := b_lab_full ;
30247: LD_ADDR_OWVAR 42
30251: PUSH
30252: LD_INT 8
30254: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30255: LD_ADDR_OWVAR 44
30259: PUSH
30260: LD_INT 10
30262: PUSH
30263: LD_INT 12
30265: PUSH
30266: LD_INT 14
30268: PUSH
30269: LD_INT 13
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: PUSH
30278: LD_VAR 0 2
30282: PUSH
30283: LD_INT 9
30285: MINUS
30286: ARRAY
30287: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30288: LD_ADDR_OWVAR 45
30292: PUSH
30293: LD_INT 11
30295: PUSH
30296: LD_INT 15
30298: PUSH
30299: LD_INT 12
30301: PUSH
30302: LD_INT 15
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: PUSH
30311: LD_VAR 0 2
30315: PUSH
30316: LD_INT 9
30318: MINUS
30319: ARRAY
30320: ST_TO_ADDR
// end ; 14 :
30321: GO 30740
30323: LD_INT 14
30325: DOUBLE
30326: EQUAL
30327: IFTRUE 30331
30329: GO 30342
30331: POP
// bc_type := b_workshop ; 15 :
30332: LD_ADDR_OWVAR 42
30336: PUSH
30337: LD_INT 2
30339: ST_TO_ADDR
30340: GO 30740
30342: LD_INT 15
30344: DOUBLE
30345: EQUAL
30346: IFTRUE 30350
30348: GO 30361
30350: POP
// bc_type := b_factory ; 16 :
30351: LD_ADDR_OWVAR 42
30355: PUSH
30356: LD_INT 3
30358: ST_TO_ADDR
30359: GO 30740
30361: LD_INT 16
30363: DOUBLE
30364: EQUAL
30365: IFTRUE 30369
30367: GO 30380
30369: POP
// bc_type := b_ext_gun ; 17 :
30370: LD_ADDR_OWVAR 42
30374: PUSH
30375: LD_INT 17
30377: ST_TO_ADDR
30378: GO 30740
30380: LD_INT 17
30382: DOUBLE
30383: EQUAL
30384: IFTRUE 30388
30386: GO 30416
30388: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30389: LD_ADDR_OWVAR 42
30393: PUSH
30394: LD_INT 19
30396: PUSH
30397: LD_INT 23
30399: PUSH
30400: LD_INT 19
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: LIST
30407: PUSH
30408: LD_VAR 0 1
30412: ARRAY
30413: ST_TO_ADDR
30414: GO 30740
30416: LD_INT 18
30418: DOUBLE
30419: EQUAL
30420: IFTRUE 30424
30422: GO 30435
30424: POP
// bc_type := b_ext_radar ; 19 :
30425: LD_ADDR_OWVAR 42
30429: PUSH
30430: LD_INT 20
30432: ST_TO_ADDR
30433: GO 30740
30435: LD_INT 19
30437: DOUBLE
30438: EQUAL
30439: IFTRUE 30443
30441: GO 30454
30443: POP
// bc_type := b_ext_radio ; 20 :
30444: LD_ADDR_OWVAR 42
30448: PUSH
30449: LD_INT 22
30451: ST_TO_ADDR
30452: GO 30740
30454: LD_INT 20
30456: DOUBLE
30457: EQUAL
30458: IFTRUE 30462
30460: GO 30473
30462: POP
// bc_type := b_ext_siberium ; 21 :
30463: LD_ADDR_OWVAR 42
30467: PUSH
30468: LD_INT 21
30470: ST_TO_ADDR
30471: GO 30740
30473: LD_INT 21
30475: DOUBLE
30476: EQUAL
30477: IFTRUE 30481
30479: GO 30492
30481: POP
// bc_type := b_ext_computer ; 22 :
30482: LD_ADDR_OWVAR 42
30486: PUSH
30487: LD_INT 24
30489: ST_TO_ADDR
30490: GO 30740
30492: LD_INT 22
30494: DOUBLE
30495: EQUAL
30496: IFTRUE 30500
30498: GO 30511
30500: POP
// bc_type := b_ext_track ; 23 :
30501: LD_ADDR_OWVAR 42
30505: PUSH
30506: LD_INT 16
30508: ST_TO_ADDR
30509: GO 30740
30511: LD_INT 23
30513: DOUBLE
30514: EQUAL
30515: IFTRUE 30519
30517: GO 30530
30519: POP
// bc_type := b_ext_laser ; 24 :
30520: LD_ADDR_OWVAR 42
30524: PUSH
30525: LD_INT 25
30527: ST_TO_ADDR
30528: GO 30740
30530: LD_INT 24
30532: DOUBLE
30533: EQUAL
30534: IFTRUE 30538
30536: GO 30549
30538: POP
// bc_type := b_control_tower ; 25 :
30539: LD_ADDR_OWVAR 42
30543: PUSH
30544: LD_INT 36
30546: ST_TO_ADDR
30547: GO 30740
30549: LD_INT 25
30551: DOUBLE
30552: EQUAL
30553: IFTRUE 30557
30555: GO 30568
30557: POP
// bc_type := b_breastwork ; 26 :
30558: LD_ADDR_OWVAR 42
30562: PUSH
30563: LD_INT 31
30565: ST_TO_ADDR
30566: GO 30740
30568: LD_INT 26
30570: DOUBLE
30571: EQUAL
30572: IFTRUE 30576
30574: GO 30587
30576: POP
// bc_type := b_bunker ; 27 :
30577: LD_ADDR_OWVAR 42
30581: PUSH
30582: LD_INT 32
30584: ST_TO_ADDR
30585: GO 30740
30587: LD_INT 27
30589: DOUBLE
30590: EQUAL
30591: IFTRUE 30595
30593: GO 30606
30595: POP
// bc_type := b_turret ; 28 :
30596: LD_ADDR_OWVAR 42
30600: PUSH
30601: LD_INT 33
30603: ST_TO_ADDR
30604: GO 30740
30606: LD_INT 28
30608: DOUBLE
30609: EQUAL
30610: IFTRUE 30614
30612: GO 30625
30614: POP
// bc_type := b_armoury ; 29 :
30615: LD_ADDR_OWVAR 42
30619: PUSH
30620: LD_INT 4
30622: ST_TO_ADDR
30623: GO 30740
30625: LD_INT 29
30627: DOUBLE
30628: EQUAL
30629: IFTRUE 30633
30631: GO 30644
30633: POP
// bc_type := b_barracks ; 30 :
30634: LD_ADDR_OWVAR 42
30638: PUSH
30639: LD_INT 5
30641: ST_TO_ADDR
30642: GO 30740
30644: LD_INT 30
30646: DOUBLE
30647: EQUAL
30648: IFTRUE 30652
30650: GO 30663
30652: POP
// bc_type := b_solar_power ; 31 :
30653: LD_ADDR_OWVAR 42
30657: PUSH
30658: LD_INT 27
30660: ST_TO_ADDR
30661: GO 30740
30663: LD_INT 31
30665: DOUBLE
30666: EQUAL
30667: IFTRUE 30671
30669: GO 30682
30671: POP
// bc_type := b_oil_power ; 32 :
30672: LD_ADDR_OWVAR 42
30676: PUSH
30677: LD_INT 26
30679: ST_TO_ADDR
30680: GO 30740
30682: LD_INT 32
30684: DOUBLE
30685: EQUAL
30686: IFTRUE 30690
30688: GO 30701
30690: POP
// bc_type := b_siberite_power ; 33 :
30691: LD_ADDR_OWVAR 42
30695: PUSH
30696: LD_INT 28
30698: ST_TO_ADDR
30699: GO 30740
30701: LD_INT 33
30703: DOUBLE
30704: EQUAL
30705: IFTRUE 30709
30707: GO 30720
30709: POP
// bc_type := b_oil_mine ; 34 :
30710: LD_ADDR_OWVAR 42
30714: PUSH
30715: LD_INT 29
30717: ST_TO_ADDR
30718: GO 30740
30720: LD_INT 34
30722: DOUBLE
30723: EQUAL
30724: IFTRUE 30728
30726: GO 30739
30728: POP
// bc_type := b_siberite_mine ; end ;
30729: LD_ADDR_OWVAR 42
30733: PUSH
30734: LD_INT 30
30736: ST_TO_ADDR
30737: GO 30740
30739: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30740: LD_ADDR_VAR 0 8
30744: PUSH
30745: LD_VAR 0 5
30749: PPUSH
30750: LD_VAR 0 6
30754: PPUSH
30755: LD_VAR 0 3
30759: PPUSH
30760: CALL_OW 47
30764: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30765: LD_OWVAR 42
30769: PUSH
30770: LD_INT 32
30772: PUSH
30773: LD_INT 33
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: IN
30780: IFFALSE 30796
// PlaceWeaponTurret ( b , weapon ) ;
30782: LD_VAR 0 8
30786: PPUSH
30787: LD_VAR 0 4
30791: PPUSH
30792: CALL_OW 431
// end ;
30796: LD_VAR 0 7
30800: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30801: LD_INT 0
30803: PPUSH
30804: PPUSH
30805: PPUSH
30806: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30807: LD_ADDR_VAR 0 4
30811: PUSH
30812: LD_INT 22
30814: PUSH
30815: LD_OWVAR 2
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 2
30826: PUSH
30827: LD_INT 30
30829: PUSH
30830: LD_INT 0
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 30
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: LIST
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PPUSH
30856: CALL_OW 69
30860: ST_TO_ADDR
// if not tmp then
30861: LD_VAR 0 4
30865: NOT
30866: IFFALSE 30870
// exit ;
30868: GO 30929
// for i in tmp do
30870: LD_ADDR_VAR 0 2
30874: PUSH
30875: LD_VAR 0 4
30879: PUSH
30880: FOR_IN
30881: IFFALSE 30927
// for j = 1 to 3 do
30883: LD_ADDR_VAR 0 3
30887: PUSH
30888: DOUBLE
30889: LD_INT 1
30891: DEC
30892: ST_TO_ADDR
30893: LD_INT 3
30895: PUSH
30896: FOR_TO
30897: IFFALSE 30923
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30899: LD_VAR 0 2
30903: PPUSH
30904: CALL_OW 274
30908: PPUSH
30909: LD_VAR 0 3
30913: PPUSH
30914: LD_INT 99999
30916: PPUSH
30917: CALL_OW 277
30921: GO 30896
30923: POP
30924: POP
30925: GO 30880
30927: POP
30928: POP
// end ;
30929: LD_VAR 0 1
30933: RET
// export function hHackSetLevel10 ; var i , j ; begin
30934: LD_INT 0
30936: PPUSH
30937: PPUSH
30938: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30939: LD_ADDR_VAR 0 2
30943: PUSH
30944: LD_INT 21
30946: PUSH
30947: LD_INT 1
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PPUSH
30954: CALL_OW 69
30958: PUSH
30959: FOR_IN
30960: IFFALSE 31012
// if IsSelected ( i ) then
30962: LD_VAR 0 2
30966: PPUSH
30967: CALL_OW 306
30971: IFFALSE 31010
// begin for j := 1 to 4 do
30973: LD_ADDR_VAR 0 3
30977: PUSH
30978: DOUBLE
30979: LD_INT 1
30981: DEC
30982: ST_TO_ADDR
30983: LD_INT 4
30985: PUSH
30986: FOR_TO
30987: IFFALSE 31008
// SetSkill ( i , j , 10 ) ;
30989: LD_VAR 0 2
30993: PPUSH
30994: LD_VAR 0 3
30998: PPUSH
30999: LD_INT 10
31001: PPUSH
31002: CALL_OW 237
31006: GO 30986
31008: POP
31009: POP
// end ;
31010: GO 30959
31012: POP
31013: POP
// end ;
31014: LD_VAR 0 1
31018: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31019: LD_INT 0
31021: PPUSH
31022: PPUSH
31023: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31024: LD_ADDR_VAR 0 2
31028: PUSH
31029: LD_INT 22
31031: PUSH
31032: LD_OWVAR 2
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 21
31043: PUSH
31044: LD_INT 1
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PPUSH
31055: CALL_OW 69
31059: PUSH
31060: FOR_IN
31061: IFFALSE 31102
// begin for j := 1 to 4 do
31063: LD_ADDR_VAR 0 3
31067: PUSH
31068: DOUBLE
31069: LD_INT 1
31071: DEC
31072: ST_TO_ADDR
31073: LD_INT 4
31075: PUSH
31076: FOR_TO
31077: IFFALSE 31098
// SetSkill ( i , j , 10 ) ;
31079: LD_VAR 0 2
31083: PPUSH
31084: LD_VAR 0 3
31088: PPUSH
31089: LD_INT 10
31091: PPUSH
31092: CALL_OW 237
31096: GO 31076
31098: POP
31099: POP
// end ;
31100: GO 31060
31102: POP
31103: POP
// end ;
31104: LD_VAR 0 1
31108: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31109: LD_INT 0
31111: PPUSH
// uc_side := your_side ;
31112: LD_ADDR_OWVAR 20
31116: PUSH
31117: LD_OWVAR 2
31121: ST_TO_ADDR
// uc_nation := nation ;
31122: LD_ADDR_OWVAR 21
31126: PUSH
31127: LD_VAR 0 1
31131: ST_TO_ADDR
// InitHc ;
31132: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31136: LD_INT 0
31138: PPUSH
31139: LD_VAR 0 2
31143: PPUSH
31144: LD_VAR 0 3
31148: PPUSH
31149: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31153: LD_VAR 0 4
31157: PPUSH
31158: LD_VAR 0 5
31162: PPUSH
31163: CALL_OW 428
31167: PUSH
31168: LD_INT 0
31170: EQUAL
31171: IFFALSE 31195
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31173: CALL_OW 44
31177: PPUSH
31178: LD_VAR 0 4
31182: PPUSH
31183: LD_VAR 0 5
31187: PPUSH
31188: LD_INT 1
31190: PPUSH
31191: CALL_OW 48
// end ;
31195: LD_VAR 0 6
31199: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31200: LD_INT 0
31202: PPUSH
31203: PPUSH
// uc_side := your_side ;
31204: LD_ADDR_OWVAR 20
31208: PUSH
31209: LD_OWVAR 2
31213: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31214: LD_VAR 0 1
31218: PUSH
31219: LD_INT 1
31221: PUSH
31222: LD_INT 2
31224: PUSH
31225: LD_INT 3
31227: PUSH
31228: LD_INT 4
31230: PUSH
31231: LD_INT 5
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: IN
31241: IFFALSE 31253
// uc_nation := nation_american else
31243: LD_ADDR_OWVAR 21
31247: PUSH
31248: LD_INT 1
31250: ST_TO_ADDR
31251: GO 31296
// if chassis in [ 11 , 12 , 13 , 14 ] then
31253: LD_VAR 0 1
31257: PUSH
31258: LD_INT 11
31260: PUSH
31261: LD_INT 12
31263: PUSH
31264: LD_INT 13
31266: PUSH
31267: LD_INT 14
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: IN
31276: IFFALSE 31288
// uc_nation := nation_arabian else
31278: LD_ADDR_OWVAR 21
31282: PUSH
31283: LD_INT 2
31285: ST_TO_ADDR
31286: GO 31296
// uc_nation := nation_russian ;
31288: LD_ADDR_OWVAR 21
31292: PUSH
31293: LD_INT 3
31295: ST_TO_ADDR
// vc_chassis := chassis ;
31296: LD_ADDR_OWVAR 37
31300: PUSH
31301: LD_VAR 0 1
31305: ST_TO_ADDR
// vc_engine := engine ;
31306: LD_ADDR_OWVAR 39
31310: PUSH
31311: LD_VAR 0 2
31315: ST_TO_ADDR
// vc_control := control ;
31316: LD_ADDR_OWVAR 38
31320: PUSH
31321: LD_VAR 0 3
31325: ST_TO_ADDR
// vc_weapon := weapon ;
31326: LD_ADDR_OWVAR 40
31330: PUSH
31331: LD_VAR 0 4
31335: ST_TO_ADDR
// un := CreateVehicle ;
31336: LD_ADDR_VAR 0 8
31340: PUSH
31341: CALL_OW 45
31345: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31346: LD_VAR 0 8
31350: PPUSH
31351: LD_INT 0
31353: PPUSH
31354: LD_INT 5
31356: PPUSH
31357: CALL_OW 12
31361: PPUSH
31362: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31366: LD_VAR 0 8
31370: PPUSH
31371: LD_VAR 0 5
31375: PPUSH
31376: LD_VAR 0 6
31380: PPUSH
31381: LD_INT 1
31383: PPUSH
31384: CALL_OW 48
// end ;
31388: LD_VAR 0 7
31392: RET
// export hInvincible ; every 1 do
31393: GO 31395
31395: DISABLE
// hInvincible := [ ] ;
31396: LD_ADDR_EXP 132
31400: PUSH
31401: EMPTY
31402: ST_TO_ADDR
31403: END
// every 10 do var i ;
31404: GO 31406
31406: DISABLE
31407: LD_INT 0
31409: PPUSH
// begin enable ;
31410: ENABLE
// if not hInvincible then
31411: LD_EXP 132
31415: NOT
31416: IFFALSE 31420
// exit ;
31418: GO 31464
// for i in hInvincible do
31420: LD_ADDR_VAR 0 1
31424: PUSH
31425: LD_EXP 132
31429: PUSH
31430: FOR_IN
31431: IFFALSE 31462
// if GetLives ( i ) < 1000 then
31433: LD_VAR 0 1
31437: PPUSH
31438: CALL_OW 256
31442: PUSH
31443: LD_INT 1000
31445: LESS
31446: IFFALSE 31460
// SetLives ( i , 1000 ) ;
31448: LD_VAR 0 1
31452: PPUSH
31453: LD_INT 1000
31455: PPUSH
31456: CALL_OW 234
31460: GO 31430
31462: POP
31463: POP
// end ;
31464: PPOPN 1
31466: END
// export function hHackInvincible ; var i ; begin
31467: LD_INT 0
31469: PPUSH
31470: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31471: LD_ADDR_VAR 0 2
31475: PUSH
31476: LD_INT 2
31478: PUSH
31479: LD_INT 21
31481: PUSH
31482: LD_INT 1
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 21
31491: PUSH
31492: LD_INT 2
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: LIST
31503: PPUSH
31504: CALL_OW 69
31508: PUSH
31509: FOR_IN
31510: IFFALSE 31571
// if IsSelected ( i ) then
31512: LD_VAR 0 2
31516: PPUSH
31517: CALL_OW 306
31521: IFFALSE 31569
// begin if i in hInvincible then
31523: LD_VAR 0 2
31527: PUSH
31528: LD_EXP 132
31532: IN
31533: IFFALSE 31553
// hInvincible := hInvincible diff i else
31535: LD_ADDR_EXP 132
31539: PUSH
31540: LD_EXP 132
31544: PUSH
31545: LD_VAR 0 2
31549: DIFF
31550: ST_TO_ADDR
31551: GO 31569
// hInvincible := hInvincible union i ;
31553: LD_ADDR_EXP 132
31557: PUSH
31558: LD_EXP 132
31562: PUSH
31563: LD_VAR 0 2
31567: UNION
31568: ST_TO_ADDR
// end ;
31569: GO 31509
31571: POP
31572: POP
// end ;
31573: LD_VAR 0 1
31577: RET
// export function hHackInvisible ; var i , j ; begin
31578: LD_INT 0
31580: PPUSH
31581: PPUSH
31582: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31583: LD_ADDR_VAR 0 2
31587: PUSH
31588: LD_INT 21
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PPUSH
31598: CALL_OW 69
31602: PUSH
31603: FOR_IN
31604: IFFALSE 31628
// if IsSelected ( i ) then
31606: LD_VAR 0 2
31610: PPUSH
31611: CALL_OW 306
31615: IFFALSE 31626
// ComForceInvisible ( i ) ;
31617: LD_VAR 0 2
31621: PPUSH
31622: CALL_OW 496
31626: GO 31603
31628: POP
31629: POP
// end ;
31630: LD_VAR 0 1
31634: RET
// export function hHackChangeYourSide ; begin
31635: LD_INT 0
31637: PPUSH
// if your_side = 8 then
31638: LD_OWVAR 2
31642: PUSH
31643: LD_INT 8
31645: EQUAL
31646: IFFALSE 31658
// your_side := 0 else
31648: LD_ADDR_OWVAR 2
31652: PUSH
31653: LD_INT 0
31655: ST_TO_ADDR
31656: GO 31672
// your_side := your_side + 1 ;
31658: LD_ADDR_OWVAR 2
31662: PUSH
31663: LD_OWVAR 2
31667: PUSH
31668: LD_INT 1
31670: PLUS
31671: ST_TO_ADDR
// end ;
31672: LD_VAR 0 1
31676: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31677: LD_INT 0
31679: PPUSH
31680: PPUSH
31681: PPUSH
// for i in all_units do
31682: LD_ADDR_VAR 0 2
31686: PUSH
31687: LD_OWVAR 3
31691: PUSH
31692: FOR_IN
31693: IFFALSE 31771
// if IsSelected ( i ) then
31695: LD_VAR 0 2
31699: PPUSH
31700: CALL_OW 306
31704: IFFALSE 31769
// begin j := GetSide ( i ) ;
31706: LD_ADDR_VAR 0 3
31710: PUSH
31711: LD_VAR 0 2
31715: PPUSH
31716: CALL_OW 255
31720: ST_TO_ADDR
// if j = 8 then
31721: LD_VAR 0 3
31725: PUSH
31726: LD_INT 8
31728: EQUAL
31729: IFFALSE 31741
// j := 0 else
31731: LD_ADDR_VAR 0 3
31735: PUSH
31736: LD_INT 0
31738: ST_TO_ADDR
31739: GO 31755
// j := j + 1 ;
31741: LD_ADDR_VAR 0 3
31745: PUSH
31746: LD_VAR 0 3
31750: PUSH
31751: LD_INT 1
31753: PLUS
31754: ST_TO_ADDR
// SetSide ( i , j ) ;
31755: LD_VAR 0 2
31759: PPUSH
31760: LD_VAR 0 3
31764: PPUSH
31765: CALL_OW 235
// end ;
31769: GO 31692
31771: POP
31772: POP
// end ;
31773: LD_VAR 0 1
31777: RET
// export function hHackFog ; begin
31778: LD_INT 0
31780: PPUSH
// FogOff ( true ) ;
31781: LD_INT 1
31783: PPUSH
31784: CALL_OW 344
// end ;
31788: LD_VAR 0 1
31792: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31793: LD_INT 0
31795: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31796: LD_VAR 0 1
31800: PPUSH
31801: LD_VAR 0 2
31805: PPUSH
31806: LD_VAR 0 3
31810: PPUSH
31811: LD_INT 1
31813: PPUSH
31814: LD_INT 1
31816: PPUSH
31817: CALL_OW 483
// CenterOnXY ( x , y ) ;
31821: LD_VAR 0 2
31825: PPUSH
31826: LD_VAR 0 3
31830: PPUSH
31831: CALL_OW 84
// end ; end_of_file
31835: LD_VAR 0 4
31839: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31840: LD_INT 0
31842: PPUSH
31843: PPUSH
31844: PPUSH
31845: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31846: LD_VAR 0 1
31850: PPUSH
31851: CALL_OW 264
31855: PUSH
31856: LD_EXP 66
31860: EQUAL
31861: IFFALSE 31933
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31863: LD_INT 68
31865: PPUSH
31866: LD_VAR 0 1
31870: PPUSH
31871: CALL_OW 255
31875: PPUSH
31876: CALL_OW 321
31880: PUSH
31881: LD_INT 2
31883: EQUAL
31884: IFFALSE 31896
// eff := 70 else
31886: LD_ADDR_VAR 0 4
31890: PUSH
31891: LD_INT 70
31893: ST_TO_ADDR
31894: GO 31904
// eff := 30 ;
31896: LD_ADDR_VAR 0 4
31900: PUSH
31901: LD_INT 30
31903: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31904: LD_VAR 0 1
31908: PPUSH
31909: CALL_OW 250
31913: PPUSH
31914: LD_VAR 0 1
31918: PPUSH
31919: CALL_OW 251
31923: PPUSH
31924: LD_VAR 0 4
31928: PPUSH
31929: CALL_OW 495
// end ; end ;
31933: LD_VAR 0 2
31937: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31938: LD_INT 0
31940: PPUSH
// end ;
31941: LD_VAR 0 4
31945: RET
// export function SOS_Command ( cmd ) ; begin
31946: LD_INT 0
31948: PPUSH
// end ;
31949: LD_VAR 0 2
31953: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31954: LD_INT 0
31956: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31957: LD_VAR 0 1
31961: PUSH
31962: LD_INT 250
31964: EQUAL
31965: PUSH
31966: LD_VAR 0 2
31970: PPUSH
31971: CALL_OW 264
31975: PUSH
31976: LD_EXP 69
31980: EQUAL
31981: AND
31982: IFFALSE 32003
// MinerPlaceMine ( unit , x , y ) ;
31984: LD_VAR 0 2
31988: PPUSH
31989: LD_VAR 0 4
31993: PPUSH
31994: LD_VAR 0 5
31998: PPUSH
31999: CALL 34344 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32003: LD_VAR 0 1
32007: PUSH
32008: LD_INT 251
32010: EQUAL
32011: PUSH
32012: LD_VAR 0 2
32016: PPUSH
32017: CALL_OW 264
32021: PUSH
32022: LD_EXP 69
32026: EQUAL
32027: AND
32028: IFFALSE 32049
// MinerDetonateMine ( unit , x , y ) ;
32030: LD_VAR 0 2
32034: PPUSH
32035: LD_VAR 0 4
32039: PPUSH
32040: LD_VAR 0 5
32044: PPUSH
32045: CALL 34621 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32049: LD_VAR 0 1
32053: PUSH
32054: LD_INT 252
32056: EQUAL
32057: PUSH
32058: LD_VAR 0 2
32062: PPUSH
32063: CALL_OW 264
32067: PUSH
32068: LD_EXP 69
32072: EQUAL
32073: AND
32074: IFFALSE 32095
// MinerCreateMinefield ( unit , x , y ) ;
32076: LD_VAR 0 2
32080: PPUSH
32081: LD_VAR 0 4
32085: PPUSH
32086: LD_VAR 0 5
32090: PPUSH
32091: CALL 35038 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32095: LD_VAR 0 1
32099: PUSH
32100: LD_INT 253
32102: EQUAL
32103: PUSH
32104: LD_VAR 0 2
32108: PPUSH
32109: CALL_OW 257
32113: PUSH
32114: LD_INT 5
32116: EQUAL
32117: AND
32118: IFFALSE 32139
// ComBinocular ( unit , x , y ) ;
32120: LD_VAR 0 2
32124: PPUSH
32125: LD_VAR 0 4
32129: PPUSH
32130: LD_VAR 0 5
32134: PPUSH
32135: CALL 35409 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32139: LD_VAR 0 1
32143: PUSH
32144: LD_INT 254
32146: EQUAL
32147: PUSH
32148: LD_VAR 0 2
32152: PPUSH
32153: CALL_OW 264
32157: PUSH
32158: LD_EXP 64
32162: EQUAL
32163: AND
32164: PUSH
32165: LD_VAR 0 3
32169: PPUSH
32170: CALL_OW 263
32174: PUSH
32175: LD_INT 3
32177: EQUAL
32178: AND
32179: IFFALSE 32195
// HackDestroyVehicle ( unit , selectedUnit ) ;
32181: LD_VAR 0 2
32185: PPUSH
32186: LD_VAR 0 3
32190: PPUSH
32191: CALL 33704 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32195: LD_VAR 0 1
32199: PUSH
32200: LD_INT 255
32202: EQUAL
32203: PUSH
32204: LD_VAR 0 2
32208: PPUSH
32209: CALL_OW 264
32213: PUSH
32214: LD_INT 14
32216: PUSH
32217: LD_INT 53
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: IN
32224: AND
32225: PUSH
32226: LD_VAR 0 4
32230: PPUSH
32231: LD_VAR 0 5
32235: PPUSH
32236: CALL_OW 488
32240: AND
32241: IFFALSE 32265
// CutTreeXYR ( unit , x , y , 12 ) ;
32243: LD_VAR 0 2
32247: PPUSH
32248: LD_VAR 0 4
32252: PPUSH
32253: LD_VAR 0 5
32257: PPUSH
32258: LD_INT 12
32260: PPUSH
32261: CALL 32270 0 4
// end ;
32265: LD_VAR 0 6
32269: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32270: LD_INT 0
32272: PPUSH
32273: PPUSH
32274: PPUSH
32275: PPUSH
32276: PPUSH
32277: PPUSH
32278: PPUSH
32279: PPUSH
32280: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32281: LD_VAR 0 1
32285: NOT
32286: PUSH
32287: LD_VAR 0 2
32291: PPUSH
32292: LD_VAR 0 3
32296: PPUSH
32297: CALL_OW 488
32301: NOT
32302: OR
32303: PUSH
32304: LD_VAR 0 4
32308: NOT
32309: OR
32310: IFFALSE 32314
// exit ;
32312: GO 32654
// list := [ ] ;
32314: LD_ADDR_VAR 0 13
32318: PUSH
32319: EMPTY
32320: ST_TO_ADDR
// if x - r < 0 then
32321: LD_VAR 0 2
32325: PUSH
32326: LD_VAR 0 4
32330: MINUS
32331: PUSH
32332: LD_INT 0
32334: LESS
32335: IFFALSE 32347
// min_x := 0 else
32337: LD_ADDR_VAR 0 7
32341: PUSH
32342: LD_INT 0
32344: ST_TO_ADDR
32345: GO 32363
// min_x := x - r ;
32347: LD_ADDR_VAR 0 7
32351: PUSH
32352: LD_VAR 0 2
32356: PUSH
32357: LD_VAR 0 4
32361: MINUS
32362: ST_TO_ADDR
// if y - r < 0 then
32363: LD_VAR 0 3
32367: PUSH
32368: LD_VAR 0 4
32372: MINUS
32373: PUSH
32374: LD_INT 0
32376: LESS
32377: IFFALSE 32389
// min_y := 0 else
32379: LD_ADDR_VAR 0 8
32383: PUSH
32384: LD_INT 0
32386: ST_TO_ADDR
32387: GO 32405
// min_y := y - r ;
32389: LD_ADDR_VAR 0 8
32393: PUSH
32394: LD_VAR 0 3
32398: PUSH
32399: LD_VAR 0 4
32403: MINUS
32404: ST_TO_ADDR
// max_x := x + r ;
32405: LD_ADDR_VAR 0 9
32409: PUSH
32410: LD_VAR 0 2
32414: PUSH
32415: LD_VAR 0 4
32419: PLUS
32420: ST_TO_ADDR
// max_y := y + r ;
32421: LD_ADDR_VAR 0 10
32425: PUSH
32426: LD_VAR 0 3
32430: PUSH
32431: LD_VAR 0 4
32435: PLUS
32436: ST_TO_ADDR
// for _x = min_x to max_x do
32437: LD_ADDR_VAR 0 11
32441: PUSH
32442: DOUBLE
32443: LD_VAR 0 7
32447: DEC
32448: ST_TO_ADDR
32449: LD_VAR 0 9
32453: PUSH
32454: FOR_TO
32455: IFFALSE 32572
// for _y = min_y to max_y do
32457: LD_ADDR_VAR 0 12
32461: PUSH
32462: DOUBLE
32463: LD_VAR 0 8
32467: DEC
32468: ST_TO_ADDR
32469: LD_VAR 0 10
32473: PUSH
32474: FOR_TO
32475: IFFALSE 32568
// begin if not ValidHex ( _x , _y ) then
32477: LD_VAR 0 11
32481: PPUSH
32482: LD_VAR 0 12
32486: PPUSH
32487: CALL_OW 488
32491: NOT
32492: IFFALSE 32496
// continue ;
32494: GO 32474
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32496: LD_VAR 0 11
32500: PPUSH
32501: LD_VAR 0 12
32505: PPUSH
32506: CALL_OW 351
32510: PUSH
32511: LD_VAR 0 11
32515: PPUSH
32516: LD_VAR 0 12
32520: PPUSH
32521: CALL_OW 554
32525: AND
32526: IFFALSE 32566
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32528: LD_ADDR_VAR 0 13
32532: PUSH
32533: LD_VAR 0 13
32537: PPUSH
32538: LD_VAR 0 13
32542: PUSH
32543: LD_INT 1
32545: PLUS
32546: PPUSH
32547: LD_VAR 0 11
32551: PUSH
32552: LD_VAR 0 12
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PPUSH
32561: CALL_OW 2
32565: ST_TO_ADDR
// end ;
32566: GO 32474
32568: POP
32569: POP
32570: GO 32454
32572: POP
32573: POP
// if not list then
32574: LD_VAR 0 13
32578: NOT
32579: IFFALSE 32583
// exit ;
32581: GO 32654
// for i in list do
32583: LD_ADDR_VAR 0 6
32587: PUSH
32588: LD_VAR 0 13
32592: PUSH
32593: FOR_IN
32594: IFFALSE 32652
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32596: LD_VAR 0 1
32600: PPUSH
32601: LD_STRING M
32603: PUSH
32604: LD_VAR 0 6
32608: PUSH
32609: LD_INT 1
32611: ARRAY
32612: PUSH
32613: LD_VAR 0 6
32617: PUSH
32618: LD_INT 2
32620: ARRAY
32621: PUSH
32622: LD_INT 0
32624: PUSH
32625: LD_INT 0
32627: PUSH
32628: LD_INT 0
32630: PUSH
32631: LD_INT 0
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: PUSH
32643: EMPTY
32644: LIST
32645: PPUSH
32646: CALL_OW 447
32650: GO 32593
32652: POP
32653: POP
// end ;
32654: LD_VAR 0 5
32658: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32659: LD_EXP 133
32663: NOT
32664: IFFALSE 32714
32666: GO 32668
32668: DISABLE
// begin initHack := true ;
32669: LD_ADDR_EXP 133
32673: PUSH
32674: LD_INT 1
32676: ST_TO_ADDR
// hackTanks := [ ] ;
32677: LD_ADDR_EXP 134
32681: PUSH
32682: EMPTY
32683: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32684: LD_ADDR_EXP 135
32688: PUSH
32689: EMPTY
32690: ST_TO_ADDR
// hackLimit := 3 ;
32691: LD_ADDR_EXP 136
32695: PUSH
32696: LD_INT 3
32698: ST_TO_ADDR
// hackDist := 12 ;
32699: LD_ADDR_EXP 137
32703: PUSH
32704: LD_INT 12
32706: ST_TO_ADDR
// hackCounter := [ ] ;
32707: LD_ADDR_EXP 138
32711: PUSH
32712: EMPTY
32713: ST_TO_ADDR
// end ;
32714: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32715: LD_EXP 133
32719: PUSH
32720: LD_INT 34
32722: PUSH
32723: LD_EXP 64
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PPUSH
32732: CALL_OW 69
32736: AND
32737: IFFALSE 32992
32739: GO 32741
32741: DISABLE
32742: LD_INT 0
32744: PPUSH
32745: PPUSH
// begin enable ;
32746: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32747: LD_ADDR_VAR 0 1
32751: PUSH
32752: LD_INT 34
32754: PUSH
32755: LD_EXP 64
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PPUSH
32764: CALL_OW 69
32768: PUSH
32769: FOR_IN
32770: IFFALSE 32990
// begin if not i in hackTanks then
32772: LD_VAR 0 1
32776: PUSH
32777: LD_EXP 134
32781: IN
32782: NOT
32783: IFFALSE 32866
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32785: LD_ADDR_EXP 134
32789: PUSH
32790: LD_EXP 134
32794: PPUSH
32795: LD_EXP 134
32799: PUSH
32800: LD_INT 1
32802: PLUS
32803: PPUSH
32804: LD_VAR 0 1
32808: PPUSH
32809: CALL_OW 1
32813: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32814: LD_ADDR_EXP 135
32818: PUSH
32819: LD_EXP 135
32823: PPUSH
32824: LD_EXP 135
32828: PUSH
32829: LD_INT 1
32831: PLUS
32832: PPUSH
32833: EMPTY
32834: PPUSH
32835: CALL_OW 1
32839: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32840: LD_ADDR_EXP 138
32844: PUSH
32845: LD_EXP 138
32849: PPUSH
32850: LD_EXP 138
32854: PUSH
32855: LD_INT 1
32857: PLUS
32858: PPUSH
32859: EMPTY
32860: PPUSH
32861: CALL_OW 1
32865: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32866: LD_VAR 0 1
32870: PPUSH
32871: CALL_OW 302
32875: NOT
32876: IFFALSE 32889
// begin HackUnlinkAll ( i ) ;
32878: LD_VAR 0 1
32882: PPUSH
32883: CALL 32995 0 1
// continue ;
32887: GO 32769
// end ; HackCheckCapturedStatus ( i ) ;
32889: LD_VAR 0 1
32893: PPUSH
32894: CALL 33438 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32898: LD_ADDR_VAR 0 2
32902: PUSH
32903: LD_INT 81
32905: PUSH
32906: LD_VAR 0 1
32910: PPUSH
32911: CALL_OW 255
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 33
32922: PUSH
32923: LD_INT 3
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 91
32932: PUSH
32933: LD_VAR 0 1
32937: PUSH
32938: LD_EXP 137
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 50
32950: PUSH
32951: EMPTY
32952: LIST
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: PPUSH
32960: CALL_OW 69
32964: ST_TO_ADDR
// if not tmp then
32965: LD_VAR 0 2
32969: NOT
32970: IFFALSE 32974
// continue ;
32972: GO 32769
// HackLink ( i , tmp ) ;
32974: LD_VAR 0 1
32978: PPUSH
32979: LD_VAR 0 2
32983: PPUSH
32984: CALL 33131 0 2
// end ;
32988: GO 32769
32990: POP
32991: POP
// end ;
32992: PPOPN 2
32994: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32995: LD_INT 0
32997: PPUSH
32998: PPUSH
32999: PPUSH
// if not hack in hackTanks then
33000: LD_VAR 0 1
33004: PUSH
33005: LD_EXP 134
33009: IN
33010: NOT
33011: IFFALSE 33015
// exit ;
33013: GO 33126
// index := GetElementIndex ( hackTanks , hack ) ;
33015: LD_ADDR_VAR 0 4
33019: PUSH
33020: LD_EXP 134
33024: PPUSH
33025: LD_VAR 0 1
33029: PPUSH
33030: CALL 40560 0 2
33034: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33035: LD_EXP 135
33039: PUSH
33040: LD_VAR 0 4
33044: ARRAY
33045: IFFALSE 33126
// begin for i in hackTanksCaptured [ index ] do
33047: LD_ADDR_VAR 0 3
33051: PUSH
33052: LD_EXP 135
33056: PUSH
33057: LD_VAR 0 4
33061: ARRAY
33062: PUSH
33063: FOR_IN
33064: IFFALSE 33090
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33066: LD_VAR 0 3
33070: PUSH
33071: LD_INT 1
33073: ARRAY
33074: PPUSH
33075: LD_VAR 0 3
33079: PUSH
33080: LD_INT 2
33082: ARRAY
33083: PPUSH
33084: CALL_OW 235
33088: GO 33063
33090: POP
33091: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33092: LD_ADDR_EXP 135
33096: PUSH
33097: LD_EXP 135
33101: PPUSH
33102: LD_VAR 0 4
33106: PPUSH
33107: EMPTY
33108: PPUSH
33109: CALL_OW 1
33113: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33114: LD_VAR 0 1
33118: PPUSH
33119: LD_INT 0
33121: PPUSH
33122: CALL_OW 505
// end ; end ;
33126: LD_VAR 0 2
33130: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33131: LD_INT 0
33133: PPUSH
33134: PPUSH
33135: PPUSH
// if not hack in hackTanks or not vehicles then
33136: LD_VAR 0 1
33140: PUSH
33141: LD_EXP 134
33145: IN
33146: NOT
33147: PUSH
33148: LD_VAR 0 2
33152: NOT
33153: OR
33154: IFFALSE 33158
// exit ;
33156: GO 33433
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33158: LD_ADDR_VAR 0 2
33162: PUSH
33163: LD_VAR 0 1
33167: PPUSH
33168: LD_VAR 0 2
33172: PPUSH
33173: LD_INT 1
33175: PPUSH
33176: LD_INT 1
33178: PPUSH
33179: CALL 41210 0 4
33183: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33184: LD_ADDR_VAR 0 5
33188: PUSH
33189: LD_EXP 134
33193: PPUSH
33194: LD_VAR 0 1
33198: PPUSH
33199: CALL 40560 0 2
33203: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33204: LD_EXP 135
33208: PUSH
33209: LD_VAR 0 5
33213: ARRAY
33214: PUSH
33215: LD_EXP 136
33219: LESS
33220: IFFALSE 33409
// begin for i := 1 to vehicles do
33222: LD_ADDR_VAR 0 4
33226: PUSH
33227: DOUBLE
33228: LD_INT 1
33230: DEC
33231: ST_TO_ADDR
33232: LD_VAR 0 2
33236: PUSH
33237: FOR_TO
33238: IFFALSE 33407
// begin if hackTanksCaptured [ index ] = hackLimit then
33240: LD_EXP 135
33244: PUSH
33245: LD_VAR 0 5
33249: ARRAY
33250: PUSH
33251: LD_EXP 136
33255: EQUAL
33256: IFFALSE 33260
// break ;
33258: GO 33407
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33260: LD_ADDR_EXP 138
33264: PUSH
33265: LD_EXP 138
33269: PPUSH
33270: LD_VAR 0 5
33274: PPUSH
33275: LD_EXP 138
33279: PUSH
33280: LD_VAR 0 5
33284: ARRAY
33285: PUSH
33286: LD_INT 1
33288: PLUS
33289: PPUSH
33290: CALL_OW 1
33294: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33295: LD_ADDR_EXP 135
33299: PUSH
33300: LD_EXP 135
33304: PPUSH
33305: LD_VAR 0 5
33309: PUSH
33310: LD_EXP 135
33314: PUSH
33315: LD_VAR 0 5
33319: ARRAY
33320: PUSH
33321: LD_INT 1
33323: PLUS
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PPUSH
33329: LD_VAR 0 2
33333: PUSH
33334: LD_VAR 0 4
33338: ARRAY
33339: PUSH
33340: LD_VAR 0 2
33344: PUSH
33345: LD_VAR 0 4
33349: ARRAY
33350: PPUSH
33351: CALL_OW 255
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PPUSH
33360: CALL 40775 0 3
33364: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33365: LD_VAR 0 2
33369: PUSH
33370: LD_VAR 0 4
33374: ARRAY
33375: PPUSH
33376: LD_VAR 0 1
33380: PPUSH
33381: CALL_OW 255
33385: PPUSH
33386: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33390: LD_VAR 0 2
33394: PUSH
33395: LD_VAR 0 4
33399: ARRAY
33400: PPUSH
33401: CALL_OW 141
// end ;
33405: GO 33237
33407: POP
33408: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33409: LD_VAR 0 1
33413: PPUSH
33414: LD_EXP 135
33418: PUSH
33419: LD_VAR 0 5
33423: ARRAY
33424: PUSH
33425: LD_INT 0
33427: PLUS
33428: PPUSH
33429: CALL_OW 505
// end ;
33433: LD_VAR 0 3
33437: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33438: LD_INT 0
33440: PPUSH
33441: PPUSH
33442: PPUSH
33443: PPUSH
// if not hack in hackTanks then
33444: LD_VAR 0 1
33448: PUSH
33449: LD_EXP 134
33453: IN
33454: NOT
33455: IFFALSE 33459
// exit ;
33457: GO 33699
// index := GetElementIndex ( hackTanks , hack ) ;
33459: LD_ADDR_VAR 0 4
33463: PUSH
33464: LD_EXP 134
33468: PPUSH
33469: LD_VAR 0 1
33473: PPUSH
33474: CALL 40560 0 2
33478: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33479: LD_ADDR_VAR 0 3
33483: PUSH
33484: DOUBLE
33485: LD_EXP 135
33489: PUSH
33490: LD_VAR 0 4
33494: ARRAY
33495: INC
33496: ST_TO_ADDR
33497: LD_INT 1
33499: PUSH
33500: FOR_DOWNTO
33501: IFFALSE 33673
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33503: LD_ADDR_VAR 0 5
33507: PUSH
33508: LD_EXP 135
33512: PUSH
33513: LD_VAR 0 4
33517: ARRAY
33518: PUSH
33519: LD_VAR 0 3
33523: ARRAY
33524: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33525: LD_VAR 0 5
33529: PUSH
33530: LD_INT 1
33532: ARRAY
33533: PPUSH
33534: CALL_OW 302
33538: NOT
33539: PUSH
33540: LD_VAR 0 5
33544: PUSH
33545: LD_INT 1
33547: ARRAY
33548: PPUSH
33549: CALL_OW 255
33553: PUSH
33554: LD_VAR 0 1
33558: PPUSH
33559: CALL_OW 255
33563: NONEQUAL
33564: OR
33565: IFFALSE 33671
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33567: LD_VAR 0 5
33571: PUSH
33572: LD_INT 1
33574: ARRAY
33575: PPUSH
33576: CALL_OW 305
33580: PUSH
33581: LD_VAR 0 5
33585: PUSH
33586: LD_INT 1
33588: ARRAY
33589: PPUSH
33590: CALL_OW 255
33594: PUSH
33595: LD_VAR 0 1
33599: PPUSH
33600: CALL_OW 255
33604: EQUAL
33605: AND
33606: IFFALSE 33630
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33608: LD_VAR 0 5
33612: PUSH
33613: LD_INT 1
33615: ARRAY
33616: PPUSH
33617: LD_VAR 0 5
33621: PUSH
33622: LD_INT 2
33624: ARRAY
33625: PPUSH
33626: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33630: LD_ADDR_EXP 135
33634: PUSH
33635: LD_EXP 135
33639: PPUSH
33640: LD_VAR 0 4
33644: PPUSH
33645: LD_EXP 135
33649: PUSH
33650: LD_VAR 0 4
33654: ARRAY
33655: PPUSH
33656: LD_VAR 0 3
33660: PPUSH
33661: CALL_OW 3
33665: PPUSH
33666: CALL_OW 1
33670: ST_TO_ADDR
// end ; end ;
33671: GO 33500
33673: POP
33674: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33675: LD_VAR 0 1
33679: PPUSH
33680: LD_EXP 135
33684: PUSH
33685: LD_VAR 0 4
33689: ARRAY
33690: PUSH
33691: LD_INT 0
33693: PLUS
33694: PPUSH
33695: CALL_OW 505
// end ;
33699: LD_VAR 0 2
33703: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33704: LD_INT 0
33706: PPUSH
33707: PPUSH
33708: PPUSH
33709: PPUSH
// if not hack in hackTanks then
33710: LD_VAR 0 1
33714: PUSH
33715: LD_EXP 134
33719: IN
33720: NOT
33721: IFFALSE 33725
// exit ;
33723: GO 33810
// index := GetElementIndex ( hackTanks , hack ) ;
33725: LD_ADDR_VAR 0 5
33729: PUSH
33730: LD_EXP 134
33734: PPUSH
33735: LD_VAR 0 1
33739: PPUSH
33740: CALL 40560 0 2
33744: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33745: LD_ADDR_VAR 0 4
33749: PUSH
33750: DOUBLE
33751: LD_INT 1
33753: DEC
33754: ST_TO_ADDR
33755: LD_EXP 135
33759: PUSH
33760: LD_VAR 0 5
33764: ARRAY
33765: PUSH
33766: FOR_TO
33767: IFFALSE 33808
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33769: LD_EXP 135
33773: PUSH
33774: LD_VAR 0 5
33778: ARRAY
33779: PUSH
33780: LD_VAR 0 4
33784: ARRAY
33785: PUSH
33786: LD_INT 1
33788: ARRAY
33789: PUSH
33790: LD_VAR 0 2
33794: EQUAL
33795: IFFALSE 33806
// KillUnit ( vehicle ) ;
33797: LD_VAR 0 2
33801: PPUSH
33802: CALL_OW 66
33806: GO 33766
33808: POP
33809: POP
// end ;
33810: LD_VAR 0 3
33814: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33815: LD_EXP 139
33819: NOT
33820: IFFALSE 33855
33822: GO 33824
33824: DISABLE
// begin initMiner := true ;
33825: LD_ADDR_EXP 139
33829: PUSH
33830: LD_INT 1
33832: ST_TO_ADDR
// minersList := [ ] ;
33833: LD_ADDR_EXP 140
33837: PUSH
33838: EMPTY
33839: ST_TO_ADDR
// minerMinesList := [ ] ;
33840: LD_ADDR_EXP 141
33844: PUSH
33845: EMPTY
33846: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33847: LD_ADDR_EXP 142
33851: PUSH
33852: LD_INT 5
33854: ST_TO_ADDR
// end ;
33855: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
33856: LD_EXP 139
33860: PUSH
33861: LD_INT 34
33863: PUSH
33864: LD_EXP 69
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PPUSH
33873: CALL_OW 69
33877: AND
33878: IFFALSE 34341
33880: GO 33882
33882: DISABLE
33883: LD_INT 0
33885: PPUSH
33886: PPUSH
33887: PPUSH
33888: PPUSH
// begin enable ;
33889: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33890: LD_ADDR_VAR 0 1
33894: PUSH
33895: LD_INT 34
33897: PUSH
33898: LD_EXP 69
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PPUSH
33907: CALL_OW 69
33911: PUSH
33912: FOR_IN
33913: IFFALSE 33985
// begin if not i in minersList then
33915: LD_VAR 0 1
33919: PUSH
33920: LD_EXP 140
33924: IN
33925: NOT
33926: IFFALSE 33983
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33928: LD_ADDR_EXP 140
33932: PUSH
33933: LD_EXP 140
33937: PPUSH
33938: LD_EXP 140
33942: PUSH
33943: LD_INT 1
33945: PLUS
33946: PPUSH
33947: LD_VAR 0 1
33951: PPUSH
33952: CALL_OW 1
33956: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33957: LD_ADDR_EXP 141
33961: PUSH
33962: LD_EXP 141
33966: PPUSH
33967: LD_EXP 141
33971: PUSH
33972: LD_INT 1
33974: PLUS
33975: PPUSH
33976: EMPTY
33977: PPUSH
33978: CALL_OW 1
33982: ST_TO_ADDR
// end end ;
33983: GO 33912
33985: POP
33986: POP
// for i := minerMinesList downto 1 do
33987: LD_ADDR_VAR 0 1
33991: PUSH
33992: DOUBLE
33993: LD_EXP 141
33997: INC
33998: ST_TO_ADDR
33999: LD_INT 1
34001: PUSH
34002: FOR_DOWNTO
34003: IFFALSE 34339
// begin if IsLive ( minersList [ i ] ) then
34005: LD_EXP 140
34009: PUSH
34010: LD_VAR 0 1
34014: ARRAY
34015: PPUSH
34016: CALL_OW 300
34020: IFFALSE 34048
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34022: LD_EXP 140
34026: PUSH
34027: LD_VAR 0 1
34031: ARRAY
34032: PPUSH
34033: LD_EXP 141
34037: PUSH
34038: LD_VAR 0 1
34042: ARRAY
34043: PPUSH
34044: CALL_OW 505
// if not minerMinesList [ i ] then
34048: LD_EXP 141
34052: PUSH
34053: LD_VAR 0 1
34057: ARRAY
34058: NOT
34059: IFFALSE 34063
// continue ;
34061: GO 34002
// for j := minerMinesList [ i ] downto 1 do
34063: LD_ADDR_VAR 0 2
34067: PUSH
34068: DOUBLE
34069: LD_EXP 141
34073: PUSH
34074: LD_VAR 0 1
34078: ARRAY
34079: INC
34080: ST_TO_ADDR
34081: LD_INT 1
34083: PUSH
34084: FOR_DOWNTO
34085: IFFALSE 34335
// begin side := GetSide ( minersList [ i ] ) ;
34087: LD_ADDR_VAR 0 3
34091: PUSH
34092: LD_EXP 140
34096: PUSH
34097: LD_VAR 0 1
34101: ARRAY
34102: PPUSH
34103: CALL_OW 255
34107: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34108: LD_ADDR_VAR 0 4
34112: PUSH
34113: LD_EXP 141
34117: PUSH
34118: LD_VAR 0 1
34122: ARRAY
34123: PUSH
34124: LD_VAR 0 2
34128: ARRAY
34129: PUSH
34130: LD_INT 1
34132: ARRAY
34133: PPUSH
34134: LD_EXP 141
34138: PUSH
34139: LD_VAR 0 1
34143: ARRAY
34144: PUSH
34145: LD_VAR 0 2
34149: ARRAY
34150: PUSH
34151: LD_INT 2
34153: ARRAY
34154: PPUSH
34155: CALL_OW 428
34159: ST_TO_ADDR
// if not tmp then
34160: LD_VAR 0 4
34164: NOT
34165: IFFALSE 34169
// continue ;
34167: GO 34084
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34169: LD_VAR 0 4
34173: PUSH
34174: LD_INT 81
34176: PUSH
34177: LD_VAR 0 3
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PPUSH
34186: CALL_OW 69
34190: IN
34191: PUSH
34192: LD_EXP 141
34196: PUSH
34197: LD_VAR 0 1
34201: ARRAY
34202: PUSH
34203: LD_VAR 0 2
34207: ARRAY
34208: PUSH
34209: LD_INT 1
34211: ARRAY
34212: PPUSH
34213: LD_EXP 141
34217: PUSH
34218: LD_VAR 0 1
34222: ARRAY
34223: PUSH
34224: LD_VAR 0 2
34228: ARRAY
34229: PUSH
34230: LD_INT 2
34232: ARRAY
34233: PPUSH
34234: CALL_OW 458
34238: AND
34239: IFFALSE 34333
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34241: LD_EXP 141
34245: PUSH
34246: LD_VAR 0 1
34250: ARRAY
34251: PUSH
34252: LD_VAR 0 2
34256: ARRAY
34257: PUSH
34258: LD_INT 1
34260: ARRAY
34261: PPUSH
34262: LD_EXP 141
34266: PUSH
34267: LD_VAR 0 1
34271: ARRAY
34272: PUSH
34273: LD_VAR 0 2
34277: ARRAY
34278: PUSH
34279: LD_INT 2
34281: ARRAY
34282: PPUSH
34283: LD_VAR 0 3
34287: PPUSH
34288: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34292: LD_ADDR_EXP 141
34296: PUSH
34297: LD_EXP 141
34301: PPUSH
34302: LD_VAR 0 1
34306: PPUSH
34307: LD_EXP 141
34311: PUSH
34312: LD_VAR 0 1
34316: ARRAY
34317: PPUSH
34318: LD_VAR 0 2
34322: PPUSH
34323: CALL_OW 3
34327: PPUSH
34328: CALL_OW 1
34332: ST_TO_ADDR
// end ; end ;
34333: GO 34084
34335: POP
34336: POP
// end ;
34337: GO 34002
34339: POP
34340: POP
// end ;
34341: PPOPN 4
34343: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34344: LD_INT 0
34346: PPUSH
34347: PPUSH
// result := false ;
34348: LD_ADDR_VAR 0 4
34352: PUSH
34353: LD_INT 0
34355: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34356: LD_VAR 0 1
34360: PPUSH
34361: CALL_OW 264
34365: PUSH
34366: LD_EXP 69
34370: EQUAL
34371: NOT
34372: IFFALSE 34376
// exit ;
34374: GO 34616
// index := GetElementIndex ( minersList , unit ) ;
34376: LD_ADDR_VAR 0 5
34380: PUSH
34381: LD_EXP 140
34385: PPUSH
34386: LD_VAR 0 1
34390: PPUSH
34391: CALL 40560 0 2
34395: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34396: LD_EXP 141
34400: PUSH
34401: LD_VAR 0 5
34405: ARRAY
34406: PUSH
34407: LD_EXP 142
34411: GREATEREQUAL
34412: IFFALSE 34416
// exit ;
34414: GO 34616
// ComMoveXY ( unit , x , y ) ;
34416: LD_VAR 0 1
34420: PPUSH
34421: LD_VAR 0 2
34425: PPUSH
34426: LD_VAR 0 3
34430: PPUSH
34431: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34435: LD_INT 35
34437: PPUSH
34438: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34442: LD_VAR 0 1
34446: PPUSH
34447: LD_VAR 0 2
34451: PPUSH
34452: LD_VAR 0 3
34456: PPUSH
34457: CALL 70624 0 3
34461: NOT
34462: PUSH
34463: LD_VAR 0 1
34467: PPUSH
34468: CALL_OW 314
34472: AND
34473: IFFALSE 34477
// exit ;
34475: GO 34616
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34477: LD_VAR 0 2
34481: PPUSH
34482: LD_VAR 0 3
34486: PPUSH
34487: CALL_OW 428
34491: PUSH
34492: LD_VAR 0 1
34496: EQUAL
34497: PUSH
34498: LD_VAR 0 1
34502: PPUSH
34503: CALL_OW 314
34507: NOT
34508: AND
34509: IFFALSE 34435
// PlaySoundXY ( x , y , PlantMine ) ;
34511: LD_VAR 0 2
34515: PPUSH
34516: LD_VAR 0 3
34520: PPUSH
34521: LD_STRING PlantMine
34523: PPUSH
34524: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34528: LD_VAR 0 2
34532: PPUSH
34533: LD_VAR 0 3
34537: PPUSH
34538: LD_VAR 0 1
34542: PPUSH
34543: CALL_OW 255
34547: PPUSH
34548: LD_INT 0
34550: PPUSH
34551: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34555: LD_ADDR_EXP 141
34559: PUSH
34560: LD_EXP 141
34564: PPUSH
34565: LD_VAR 0 5
34569: PUSH
34570: LD_EXP 141
34574: PUSH
34575: LD_VAR 0 5
34579: ARRAY
34580: PUSH
34581: LD_INT 1
34583: PLUS
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PPUSH
34589: LD_VAR 0 2
34593: PUSH
34594: LD_VAR 0 3
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PPUSH
34603: CALL 40775 0 3
34607: ST_TO_ADDR
// result := true ;
34608: LD_ADDR_VAR 0 4
34612: PUSH
34613: LD_INT 1
34615: ST_TO_ADDR
// end ;
34616: LD_VAR 0 4
34620: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34621: LD_INT 0
34623: PPUSH
34624: PPUSH
34625: PPUSH
// if not unit in minersList then
34626: LD_VAR 0 1
34630: PUSH
34631: LD_EXP 140
34635: IN
34636: NOT
34637: IFFALSE 34641
// exit ;
34639: GO 35033
// index := GetElementIndex ( minersList , unit ) ;
34641: LD_ADDR_VAR 0 6
34645: PUSH
34646: LD_EXP 140
34650: PPUSH
34651: LD_VAR 0 1
34655: PPUSH
34656: CALL 40560 0 2
34660: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34661: LD_ADDR_VAR 0 5
34665: PUSH
34666: DOUBLE
34667: LD_EXP 141
34671: PUSH
34672: LD_VAR 0 6
34676: ARRAY
34677: INC
34678: ST_TO_ADDR
34679: LD_INT 1
34681: PUSH
34682: FOR_DOWNTO
34683: IFFALSE 34844
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34685: LD_EXP 141
34689: PUSH
34690: LD_VAR 0 6
34694: ARRAY
34695: PUSH
34696: LD_VAR 0 5
34700: ARRAY
34701: PUSH
34702: LD_INT 1
34704: ARRAY
34705: PUSH
34706: LD_VAR 0 2
34710: EQUAL
34711: PUSH
34712: LD_EXP 141
34716: PUSH
34717: LD_VAR 0 6
34721: ARRAY
34722: PUSH
34723: LD_VAR 0 5
34727: ARRAY
34728: PUSH
34729: LD_INT 2
34731: ARRAY
34732: PUSH
34733: LD_VAR 0 3
34737: EQUAL
34738: AND
34739: IFFALSE 34842
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34741: LD_EXP 141
34745: PUSH
34746: LD_VAR 0 6
34750: ARRAY
34751: PUSH
34752: LD_VAR 0 5
34756: ARRAY
34757: PUSH
34758: LD_INT 1
34760: ARRAY
34761: PPUSH
34762: LD_EXP 141
34766: PUSH
34767: LD_VAR 0 6
34771: ARRAY
34772: PUSH
34773: LD_VAR 0 5
34777: ARRAY
34778: PUSH
34779: LD_INT 2
34781: ARRAY
34782: PPUSH
34783: LD_VAR 0 1
34787: PPUSH
34788: CALL_OW 255
34792: PPUSH
34793: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34797: LD_ADDR_EXP 141
34801: PUSH
34802: LD_EXP 141
34806: PPUSH
34807: LD_VAR 0 6
34811: PPUSH
34812: LD_EXP 141
34816: PUSH
34817: LD_VAR 0 6
34821: ARRAY
34822: PPUSH
34823: LD_VAR 0 5
34827: PPUSH
34828: CALL_OW 3
34832: PPUSH
34833: CALL_OW 1
34837: ST_TO_ADDR
// exit ;
34838: POP
34839: POP
34840: GO 35033
// end ; end ;
34842: GO 34682
34844: POP
34845: POP
// for i := minerMinesList [ index ] downto 1 do
34846: LD_ADDR_VAR 0 5
34850: PUSH
34851: DOUBLE
34852: LD_EXP 141
34856: PUSH
34857: LD_VAR 0 6
34861: ARRAY
34862: INC
34863: ST_TO_ADDR
34864: LD_INT 1
34866: PUSH
34867: FOR_DOWNTO
34868: IFFALSE 35031
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34870: LD_EXP 141
34874: PUSH
34875: LD_VAR 0 6
34879: ARRAY
34880: PUSH
34881: LD_VAR 0 5
34885: ARRAY
34886: PUSH
34887: LD_INT 1
34889: ARRAY
34890: PPUSH
34891: LD_EXP 141
34895: PUSH
34896: LD_VAR 0 6
34900: ARRAY
34901: PUSH
34902: LD_VAR 0 5
34906: ARRAY
34907: PUSH
34908: LD_INT 2
34910: ARRAY
34911: PPUSH
34912: LD_VAR 0 2
34916: PPUSH
34917: LD_VAR 0 3
34921: PPUSH
34922: CALL_OW 298
34926: PUSH
34927: LD_INT 6
34929: LESS
34930: IFFALSE 35029
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34932: LD_EXP 141
34936: PUSH
34937: LD_VAR 0 6
34941: ARRAY
34942: PUSH
34943: LD_VAR 0 5
34947: ARRAY
34948: PUSH
34949: LD_INT 1
34951: ARRAY
34952: PPUSH
34953: LD_EXP 141
34957: PUSH
34958: LD_VAR 0 6
34962: ARRAY
34963: PUSH
34964: LD_VAR 0 5
34968: ARRAY
34969: PUSH
34970: LD_INT 2
34972: ARRAY
34973: PPUSH
34974: LD_VAR 0 1
34978: PPUSH
34979: CALL_OW 255
34983: PPUSH
34984: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34988: LD_ADDR_EXP 141
34992: PUSH
34993: LD_EXP 141
34997: PPUSH
34998: LD_VAR 0 6
35002: PPUSH
35003: LD_EXP 141
35007: PUSH
35008: LD_VAR 0 6
35012: ARRAY
35013: PPUSH
35014: LD_VAR 0 5
35018: PPUSH
35019: CALL_OW 3
35023: PPUSH
35024: CALL_OW 1
35028: ST_TO_ADDR
// end ; end ;
35029: GO 34867
35031: POP
35032: POP
// end ;
35033: LD_VAR 0 4
35037: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35038: LD_INT 0
35040: PPUSH
35041: PPUSH
35042: PPUSH
35043: PPUSH
35044: PPUSH
35045: PPUSH
35046: PPUSH
35047: PPUSH
35048: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35049: LD_VAR 0 1
35053: PPUSH
35054: CALL_OW 264
35058: PUSH
35059: LD_EXP 69
35063: EQUAL
35064: NOT
35065: PUSH
35066: LD_VAR 0 1
35070: PUSH
35071: LD_EXP 140
35075: IN
35076: NOT
35077: OR
35078: IFFALSE 35082
// exit ;
35080: GO 35404
// index := GetElementIndex ( minersList , unit ) ;
35082: LD_ADDR_VAR 0 6
35086: PUSH
35087: LD_EXP 140
35091: PPUSH
35092: LD_VAR 0 1
35096: PPUSH
35097: CALL 40560 0 2
35101: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35102: LD_ADDR_VAR 0 8
35106: PUSH
35107: LD_EXP 142
35111: PUSH
35112: LD_EXP 141
35116: PUSH
35117: LD_VAR 0 6
35121: ARRAY
35122: MINUS
35123: ST_TO_ADDR
// if not minesFreeAmount then
35124: LD_VAR 0 8
35128: NOT
35129: IFFALSE 35133
// exit ;
35131: GO 35404
// tmp := [ ] ;
35133: LD_ADDR_VAR 0 7
35137: PUSH
35138: EMPTY
35139: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35140: LD_ADDR_VAR 0 5
35144: PUSH
35145: DOUBLE
35146: LD_INT 1
35148: DEC
35149: ST_TO_ADDR
35150: LD_VAR 0 8
35154: PUSH
35155: FOR_TO
35156: IFFALSE 35351
// begin _d := rand ( 0 , 5 ) ;
35158: LD_ADDR_VAR 0 11
35162: PUSH
35163: LD_INT 0
35165: PPUSH
35166: LD_INT 5
35168: PPUSH
35169: CALL_OW 12
35173: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35174: LD_ADDR_VAR 0 12
35178: PUSH
35179: LD_INT 2
35181: PPUSH
35182: LD_INT 6
35184: PPUSH
35185: CALL_OW 12
35189: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35190: LD_ADDR_VAR 0 9
35194: PUSH
35195: LD_VAR 0 2
35199: PPUSH
35200: LD_VAR 0 11
35204: PPUSH
35205: LD_VAR 0 12
35209: PPUSH
35210: CALL_OW 272
35214: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35215: LD_ADDR_VAR 0 10
35219: PUSH
35220: LD_VAR 0 3
35224: PPUSH
35225: LD_VAR 0 11
35229: PPUSH
35230: LD_VAR 0 12
35234: PPUSH
35235: CALL_OW 273
35239: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35240: LD_VAR 0 9
35244: PPUSH
35245: LD_VAR 0 10
35249: PPUSH
35250: CALL_OW 488
35254: PUSH
35255: LD_VAR 0 9
35259: PUSH
35260: LD_VAR 0 10
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_VAR 0 7
35273: IN
35274: NOT
35275: AND
35276: PUSH
35277: LD_VAR 0 9
35281: PPUSH
35282: LD_VAR 0 10
35286: PPUSH
35287: CALL_OW 458
35291: NOT
35292: AND
35293: IFFALSE 35335
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35295: LD_ADDR_VAR 0 7
35299: PUSH
35300: LD_VAR 0 7
35304: PPUSH
35305: LD_VAR 0 7
35309: PUSH
35310: LD_INT 1
35312: PLUS
35313: PPUSH
35314: LD_VAR 0 9
35318: PUSH
35319: LD_VAR 0 10
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PPUSH
35328: CALL_OW 1
35332: ST_TO_ADDR
35333: GO 35349
// i := i - 1 ;
35335: LD_ADDR_VAR 0 5
35339: PUSH
35340: LD_VAR 0 5
35344: PUSH
35345: LD_INT 1
35347: MINUS
35348: ST_TO_ADDR
// end ;
35349: GO 35155
35351: POP
35352: POP
// for i in tmp do
35353: LD_ADDR_VAR 0 5
35357: PUSH
35358: LD_VAR 0 7
35362: PUSH
35363: FOR_IN
35364: IFFALSE 35402
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35366: LD_VAR 0 1
35370: PPUSH
35371: LD_VAR 0 5
35375: PUSH
35376: LD_INT 1
35378: ARRAY
35379: PPUSH
35380: LD_VAR 0 5
35384: PUSH
35385: LD_INT 2
35387: ARRAY
35388: PPUSH
35389: CALL 34344 0 3
35393: NOT
35394: IFFALSE 35400
// exit ;
35396: POP
35397: POP
35398: GO 35404
35400: GO 35363
35402: POP
35403: POP
// end ;
35404: LD_VAR 0 4
35408: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35409: LD_INT 0
35411: PPUSH
35412: PPUSH
35413: PPUSH
35414: PPUSH
35415: PPUSH
35416: PPUSH
35417: PPUSH
// if not GetClass ( unit ) = class_sniper then
35418: LD_VAR 0 1
35422: PPUSH
35423: CALL_OW 257
35427: PUSH
35428: LD_INT 5
35430: EQUAL
35431: NOT
35432: IFFALSE 35436
// exit ;
35434: GO 35824
// dist := 8 ;
35436: LD_ADDR_VAR 0 5
35440: PUSH
35441: LD_INT 8
35443: ST_TO_ADDR
// viewRange := 12 ;
35444: LD_ADDR_VAR 0 7
35448: PUSH
35449: LD_INT 12
35451: ST_TO_ADDR
// side := GetSide ( unit ) ;
35452: LD_ADDR_VAR 0 6
35456: PUSH
35457: LD_VAR 0 1
35461: PPUSH
35462: CALL_OW 255
35466: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35467: LD_INT 61
35469: PPUSH
35470: LD_VAR 0 6
35474: PPUSH
35475: CALL_OW 321
35479: PUSH
35480: LD_INT 2
35482: EQUAL
35483: IFFALSE 35493
// viewRange := 16 ;
35485: LD_ADDR_VAR 0 7
35489: PUSH
35490: LD_INT 16
35492: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35493: LD_VAR 0 1
35497: PPUSH
35498: LD_VAR 0 2
35502: PPUSH
35503: LD_VAR 0 3
35507: PPUSH
35508: CALL_OW 297
35512: PUSH
35513: LD_VAR 0 5
35517: GREATER
35518: IFFALSE 35597
// begin ComMoveXY ( unit , x , y ) ;
35520: LD_VAR 0 1
35524: PPUSH
35525: LD_VAR 0 2
35529: PPUSH
35530: LD_VAR 0 3
35534: PPUSH
35535: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35539: LD_INT 35
35541: PPUSH
35542: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35546: LD_VAR 0 1
35550: PPUSH
35551: LD_VAR 0 2
35555: PPUSH
35556: LD_VAR 0 3
35560: PPUSH
35561: CALL 70624 0 3
35565: NOT
35566: IFFALSE 35570
// exit ;
35568: GO 35824
// until GetDistUnitXY ( unit , x , y ) < dist ;
35570: LD_VAR 0 1
35574: PPUSH
35575: LD_VAR 0 2
35579: PPUSH
35580: LD_VAR 0 3
35584: PPUSH
35585: CALL_OW 297
35589: PUSH
35590: LD_VAR 0 5
35594: LESS
35595: IFFALSE 35539
// end ; ComTurnXY ( unit , x , y ) ;
35597: LD_VAR 0 1
35601: PPUSH
35602: LD_VAR 0 2
35606: PPUSH
35607: LD_VAR 0 3
35611: PPUSH
35612: CALL_OW 118
// wait ( 5 ) ;
35616: LD_INT 5
35618: PPUSH
35619: CALL_OW 67
// _d := GetDir ( unit ) ;
35623: LD_ADDR_VAR 0 10
35627: PUSH
35628: LD_VAR 0 1
35632: PPUSH
35633: CALL_OW 254
35637: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35638: LD_ADDR_VAR 0 8
35642: PUSH
35643: LD_VAR 0 1
35647: PPUSH
35648: CALL_OW 250
35652: PPUSH
35653: LD_VAR 0 10
35657: PPUSH
35658: LD_VAR 0 5
35662: PPUSH
35663: CALL_OW 272
35667: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35668: LD_ADDR_VAR 0 9
35672: PUSH
35673: LD_VAR 0 1
35677: PPUSH
35678: CALL_OW 251
35682: PPUSH
35683: LD_VAR 0 10
35687: PPUSH
35688: LD_VAR 0 5
35692: PPUSH
35693: CALL_OW 273
35697: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35698: LD_VAR 0 8
35702: PPUSH
35703: LD_VAR 0 9
35707: PPUSH
35708: CALL_OW 488
35712: NOT
35713: IFFALSE 35717
// exit ;
35715: GO 35824
// ComAnimCustom ( unit , 1 ) ;
35717: LD_VAR 0 1
35721: PPUSH
35722: LD_INT 1
35724: PPUSH
35725: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35729: LD_VAR 0 8
35733: PPUSH
35734: LD_VAR 0 9
35738: PPUSH
35739: LD_VAR 0 6
35743: PPUSH
35744: LD_VAR 0 7
35748: PPUSH
35749: CALL_OW 330
// repeat wait ( 1 ) ;
35753: LD_INT 1
35755: PPUSH
35756: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35760: LD_VAR 0 1
35764: PPUSH
35765: CALL_OW 316
35769: PUSH
35770: LD_VAR 0 1
35774: PPUSH
35775: CALL_OW 314
35779: OR
35780: PUSH
35781: LD_VAR 0 1
35785: PPUSH
35786: CALL_OW 302
35790: NOT
35791: OR
35792: PUSH
35793: LD_VAR 0 1
35797: PPUSH
35798: CALL_OW 301
35802: OR
35803: IFFALSE 35753
// RemoveSeeing ( _x , _y , side ) ;
35805: LD_VAR 0 8
35809: PPUSH
35810: LD_VAR 0 9
35814: PPUSH
35815: LD_VAR 0 6
35819: PPUSH
35820: CALL_OW 331
// end ; end_of_file
35824: LD_VAR 0 4
35828: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35829: LD_INT 0
35831: PPUSH
35832: PPUSH
// if exist_mode then
35833: LD_VAR 0 2
35837: IFFALSE 35862
// unit := CreateCharacter ( prefix & ident ) else
35839: LD_ADDR_VAR 0 5
35843: PUSH
35844: LD_VAR 0 3
35848: PUSH
35849: LD_VAR 0 1
35853: STR
35854: PPUSH
35855: CALL_OW 34
35859: ST_TO_ADDR
35860: GO 35877
// unit := NewCharacter ( ident ) ;
35862: LD_ADDR_VAR 0 5
35866: PUSH
35867: LD_VAR 0 1
35871: PPUSH
35872: CALL_OW 25
35876: ST_TO_ADDR
// result := unit ;
35877: LD_ADDR_VAR 0 4
35881: PUSH
35882: LD_VAR 0 5
35886: ST_TO_ADDR
// end ;
35887: LD_VAR 0 4
35891: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35892: LD_INT 0
35894: PPUSH
35895: PPUSH
// if not side or not nation then
35896: LD_VAR 0 1
35900: NOT
35901: PUSH
35902: LD_VAR 0 2
35906: NOT
35907: OR
35908: IFFALSE 35912
// exit ;
35910: GO 36676
// case nation of nation_american :
35912: LD_VAR 0 2
35916: PUSH
35917: LD_INT 1
35919: DOUBLE
35920: EQUAL
35921: IFTRUE 35925
35923: GO 36139
35925: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35926: LD_ADDR_VAR 0 4
35930: PUSH
35931: LD_INT 35
35933: PUSH
35934: LD_INT 45
35936: PUSH
35937: LD_INT 46
35939: PUSH
35940: LD_INT 47
35942: PUSH
35943: LD_INT 82
35945: PUSH
35946: LD_INT 83
35948: PUSH
35949: LD_INT 84
35951: PUSH
35952: LD_INT 85
35954: PUSH
35955: LD_INT 86
35957: PUSH
35958: LD_INT 1
35960: PUSH
35961: LD_INT 2
35963: PUSH
35964: LD_INT 6
35966: PUSH
35967: LD_INT 15
35969: PUSH
35970: LD_INT 16
35972: PUSH
35973: LD_INT 7
35975: PUSH
35976: LD_INT 12
35978: PUSH
35979: LD_INT 13
35981: PUSH
35982: LD_INT 10
35984: PUSH
35985: LD_INT 14
35987: PUSH
35988: LD_INT 20
35990: PUSH
35991: LD_INT 21
35993: PUSH
35994: LD_INT 22
35996: PUSH
35997: LD_INT 25
35999: PUSH
36000: LD_INT 32
36002: PUSH
36003: LD_INT 27
36005: PUSH
36006: LD_INT 36
36008: PUSH
36009: LD_INT 69
36011: PUSH
36012: LD_INT 39
36014: PUSH
36015: LD_INT 34
36017: PUSH
36018: LD_INT 40
36020: PUSH
36021: LD_INT 48
36023: PUSH
36024: LD_INT 49
36026: PUSH
36027: LD_INT 50
36029: PUSH
36030: LD_INT 51
36032: PUSH
36033: LD_INT 52
36035: PUSH
36036: LD_INT 53
36038: PUSH
36039: LD_INT 54
36041: PUSH
36042: LD_INT 55
36044: PUSH
36045: LD_INT 56
36047: PUSH
36048: LD_INT 57
36050: PUSH
36051: LD_INT 58
36053: PUSH
36054: LD_INT 59
36056: PUSH
36057: LD_INT 60
36059: PUSH
36060: LD_INT 61
36062: PUSH
36063: LD_INT 62
36065: PUSH
36066: LD_INT 80
36068: PUSH
36069: LD_INT 82
36071: PUSH
36072: LD_INT 83
36074: PUSH
36075: LD_INT 84
36077: PUSH
36078: LD_INT 85
36080: PUSH
36081: LD_INT 86
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: ST_TO_ADDR
36137: GO 36600
36139: LD_INT 2
36141: DOUBLE
36142: EQUAL
36143: IFTRUE 36147
36145: GO 36369
36147: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
36148: LD_ADDR_VAR 0 4
36152: PUSH
36153: LD_INT 35
36155: PUSH
36156: LD_INT 45
36158: PUSH
36159: LD_INT 46
36161: PUSH
36162: LD_INT 47
36164: PUSH
36165: LD_INT 82
36167: PUSH
36168: LD_INT 83
36170: PUSH
36171: LD_INT 84
36173: PUSH
36174: LD_INT 85
36176: PUSH
36177: LD_INT 87
36179: PUSH
36180: LD_INT 70
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: LD_INT 11
36188: PUSH
36189: LD_INT 3
36191: PUSH
36192: LD_INT 4
36194: PUSH
36195: LD_INT 5
36197: PUSH
36198: LD_INT 6
36200: PUSH
36201: LD_INT 15
36203: PUSH
36204: LD_INT 18
36206: PUSH
36207: LD_INT 7
36209: PUSH
36210: LD_INT 17
36212: PUSH
36213: LD_INT 8
36215: PUSH
36216: LD_INT 20
36218: PUSH
36219: LD_INT 21
36221: PUSH
36222: LD_INT 22
36224: PUSH
36225: LD_INT 72
36227: PUSH
36228: LD_INT 26
36230: PUSH
36231: LD_INT 69
36233: PUSH
36234: LD_INT 39
36236: PUSH
36237: LD_INT 40
36239: PUSH
36240: LD_INT 41
36242: PUSH
36243: LD_INT 42
36245: PUSH
36246: LD_INT 43
36248: PUSH
36249: LD_INT 48
36251: PUSH
36252: LD_INT 49
36254: PUSH
36255: LD_INT 50
36257: PUSH
36258: LD_INT 51
36260: PUSH
36261: LD_INT 52
36263: PUSH
36264: LD_INT 53
36266: PUSH
36267: LD_INT 54
36269: PUSH
36270: LD_INT 55
36272: PUSH
36273: LD_INT 56
36275: PUSH
36276: LD_INT 60
36278: PUSH
36279: LD_INT 61
36281: PUSH
36282: LD_INT 62
36284: PUSH
36285: LD_INT 66
36287: PUSH
36288: LD_INT 67
36290: PUSH
36291: LD_INT 68
36293: PUSH
36294: LD_INT 81
36296: PUSH
36297: LD_INT 82
36299: PUSH
36300: LD_INT 83
36302: PUSH
36303: LD_INT 84
36305: PUSH
36306: LD_INT 85
36308: PUSH
36309: LD_INT 87
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: ST_TO_ADDR
36367: GO 36600
36369: LD_INT 3
36371: DOUBLE
36372: EQUAL
36373: IFTRUE 36377
36375: GO 36599
36377: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36378: LD_ADDR_VAR 0 4
36382: PUSH
36383: LD_INT 46
36385: PUSH
36386: LD_INT 47
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: LD_INT 2
36394: PUSH
36395: LD_INT 82
36397: PUSH
36398: LD_INT 83
36400: PUSH
36401: LD_INT 84
36403: PUSH
36404: LD_INT 85
36406: PUSH
36407: LD_INT 86
36409: PUSH
36410: LD_INT 11
36412: PUSH
36413: LD_INT 9
36415: PUSH
36416: LD_INT 20
36418: PUSH
36419: LD_INT 19
36421: PUSH
36422: LD_INT 21
36424: PUSH
36425: LD_INT 24
36427: PUSH
36428: LD_INT 22
36430: PUSH
36431: LD_INT 25
36433: PUSH
36434: LD_INT 28
36436: PUSH
36437: LD_INT 29
36439: PUSH
36440: LD_INT 30
36442: PUSH
36443: LD_INT 31
36445: PUSH
36446: LD_INT 37
36448: PUSH
36449: LD_INT 38
36451: PUSH
36452: LD_INT 32
36454: PUSH
36455: LD_INT 27
36457: PUSH
36458: LD_INT 33
36460: PUSH
36461: LD_INT 69
36463: PUSH
36464: LD_INT 39
36466: PUSH
36467: LD_INT 34
36469: PUSH
36470: LD_INT 40
36472: PUSH
36473: LD_INT 71
36475: PUSH
36476: LD_INT 23
36478: PUSH
36479: LD_INT 44
36481: PUSH
36482: LD_INT 48
36484: PUSH
36485: LD_INT 49
36487: PUSH
36488: LD_INT 50
36490: PUSH
36491: LD_INT 51
36493: PUSH
36494: LD_INT 52
36496: PUSH
36497: LD_INT 53
36499: PUSH
36500: LD_INT 54
36502: PUSH
36503: LD_INT 55
36505: PUSH
36506: LD_INT 56
36508: PUSH
36509: LD_INT 57
36511: PUSH
36512: LD_INT 58
36514: PUSH
36515: LD_INT 59
36517: PUSH
36518: LD_INT 63
36520: PUSH
36521: LD_INT 64
36523: PUSH
36524: LD_INT 65
36526: PUSH
36527: LD_INT 82
36529: PUSH
36530: LD_INT 83
36532: PUSH
36533: LD_INT 84
36535: PUSH
36536: LD_INT 85
36538: PUSH
36539: LD_INT 86
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: ST_TO_ADDR
36597: GO 36600
36599: POP
// if state > - 1 and state < 3 then
36600: LD_VAR 0 3
36604: PUSH
36605: LD_INT 1
36607: NEG
36608: GREATER
36609: PUSH
36610: LD_VAR 0 3
36614: PUSH
36615: LD_INT 3
36617: LESS
36618: AND
36619: IFFALSE 36676
// for i in result do
36621: LD_ADDR_VAR 0 5
36625: PUSH
36626: LD_VAR 0 4
36630: PUSH
36631: FOR_IN
36632: IFFALSE 36674
// if GetTech ( i , side ) <> state then
36634: LD_VAR 0 5
36638: PPUSH
36639: LD_VAR 0 1
36643: PPUSH
36644: CALL_OW 321
36648: PUSH
36649: LD_VAR 0 3
36653: NONEQUAL
36654: IFFALSE 36672
// result := result diff i ;
36656: LD_ADDR_VAR 0 4
36660: PUSH
36661: LD_VAR 0 4
36665: PUSH
36666: LD_VAR 0 5
36670: DIFF
36671: ST_TO_ADDR
36672: GO 36631
36674: POP
36675: POP
// end ;
36676: LD_VAR 0 4
36680: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36681: LD_INT 0
36683: PPUSH
36684: PPUSH
36685: PPUSH
// result := true ;
36686: LD_ADDR_VAR 0 3
36690: PUSH
36691: LD_INT 1
36693: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36694: LD_ADDR_VAR 0 5
36698: PUSH
36699: LD_VAR 0 2
36703: PPUSH
36704: CALL_OW 480
36708: ST_TO_ADDR
// if not tmp then
36709: LD_VAR 0 5
36713: NOT
36714: IFFALSE 36718
// exit ;
36716: GO 36767
// for i in tmp do
36718: LD_ADDR_VAR 0 4
36722: PUSH
36723: LD_VAR 0 5
36727: PUSH
36728: FOR_IN
36729: IFFALSE 36765
// if GetTech ( i , side ) <> state_researched then
36731: LD_VAR 0 4
36735: PPUSH
36736: LD_VAR 0 1
36740: PPUSH
36741: CALL_OW 321
36745: PUSH
36746: LD_INT 2
36748: NONEQUAL
36749: IFFALSE 36763
// begin result := false ;
36751: LD_ADDR_VAR 0 3
36755: PUSH
36756: LD_INT 0
36758: ST_TO_ADDR
// exit ;
36759: POP
36760: POP
36761: GO 36767
// end ;
36763: GO 36728
36765: POP
36766: POP
// end ;
36767: LD_VAR 0 3
36771: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36772: LD_INT 0
36774: PPUSH
36775: PPUSH
36776: PPUSH
36777: PPUSH
36778: PPUSH
36779: PPUSH
36780: PPUSH
36781: PPUSH
36782: PPUSH
36783: PPUSH
36784: PPUSH
36785: PPUSH
36786: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36787: LD_VAR 0 1
36791: NOT
36792: PUSH
36793: LD_VAR 0 1
36797: PPUSH
36798: CALL_OW 257
36802: PUSH
36803: LD_INT 9
36805: NONEQUAL
36806: OR
36807: IFFALSE 36811
// exit ;
36809: GO 37384
// side := GetSide ( unit ) ;
36811: LD_ADDR_VAR 0 9
36815: PUSH
36816: LD_VAR 0 1
36820: PPUSH
36821: CALL_OW 255
36825: ST_TO_ADDR
// tech_space := tech_spacanom ;
36826: LD_ADDR_VAR 0 12
36830: PUSH
36831: LD_INT 29
36833: ST_TO_ADDR
// tech_time := tech_taurad ;
36834: LD_ADDR_VAR 0 13
36838: PUSH
36839: LD_INT 28
36841: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36842: LD_ADDR_VAR 0 11
36846: PUSH
36847: LD_VAR 0 1
36851: PPUSH
36852: CALL_OW 310
36856: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36857: LD_VAR 0 11
36861: PPUSH
36862: CALL_OW 247
36866: PUSH
36867: LD_INT 2
36869: EQUAL
36870: IFFALSE 36874
// exit ;
36872: GO 37384
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36874: LD_ADDR_VAR 0 8
36878: PUSH
36879: LD_INT 81
36881: PUSH
36882: LD_VAR 0 9
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 3
36893: PUSH
36894: LD_INT 21
36896: PUSH
36897: LD_INT 3
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PPUSH
36912: CALL_OW 69
36916: ST_TO_ADDR
// if not tmp then
36917: LD_VAR 0 8
36921: NOT
36922: IFFALSE 36926
// exit ;
36924: GO 37384
// if in_unit then
36926: LD_VAR 0 11
36930: IFFALSE 36954
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36932: LD_ADDR_VAR 0 10
36936: PUSH
36937: LD_VAR 0 8
36941: PPUSH
36942: LD_VAR 0 11
36946: PPUSH
36947: CALL_OW 74
36951: ST_TO_ADDR
36952: GO 36974
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36954: LD_ADDR_VAR 0 10
36958: PUSH
36959: LD_VAR 0 8
36963: PPUSH
36964: LD_VAR 0 1
36968: PPUSH
36969: CALL_OW 74
36973: ST_TO_ADDR
// if not enemy then
36974: LD_VAR 0 10
36978: NOT
36979: IFFALSE 36983
// exit ;
36981: GO 37384
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36983: LD_VAR 0 11
36987: PUSH
36988: LD_VAR 0 11
36992: PPUSH
36993: LD_VAR 0 10
36997: PPUSH
36998: CALL_OW 296
37002: PUSH
37003: LD_INT 13
37005: GREATER
37006: AND
37007: PUSH
37008: LD_VAR 0 1
37012: PPUSH
37013: LD_VAR 0 10
37017: PPUSH
37018: CALL_OW 296
37022: PUSH
37023: LD_INT 12
37025: GREATER
37026: OR
37027: IFFALSE 37031
// exit ;
37029: GO 37384
// missile := [ 1 ] ;
37031: LD_ADDR_VAR 0 14
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: EMPTY
37040: LIST
37041: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37042: LD_VAR 0 9
37046: PPUSH
37047: LD_VAR 0 12
37051: PPUSH
37052: CALL_OW 325
37056: IFFALSE 37085
// missile := Insert ( missile , missile + 1 , 2 ) ;
37058: LD_ADDR_VAR 0 14
37062: PUSH
37063: LD_VAR 0 14
37067: PPUSH
37068: LD_VAR 0 14
37072: PUSH
37073: LD_INT 1
37075: PLUS
37076: PPUSH
37077: LD_INT 2
37079: PPUSH
37080: CALL_OW 2
37084: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37085: LD_VAR 0 9
37089: PPUSH
37090: LD_VAR 0 13
37094: PPUSH
37095: CALL_OW 325
37099: PUSH
37100: LD_VAR 0 10
37104: PPUSH
37105: CALL_OW 255
37109: PPUSH
37110: LD_VAR 0 13
37114: PPUSH
37115: CALL_OW 325
37119: NOT
37120: AND
37121: IFFALSE 37150
// missile := Insert ( missile , missile + 1 , 3 ) ;
37123: LD_ADDR_VAR 0 14
37127: PUSH
37128: LD_VAR 0 14
37132: PPUSH
37133: LD_VAR 0 14
37137: PUSH
37138: LD_INT 1
37140: PLUS
37141: PPUSH
37142: LD_INT 3
37144: PPUSH
37145: CALL_OW 2
37149: ST_TO_ADDR
// if missile < 2 then
37150: LD_VAR 0 14
37154: PUSH
37155: LD_INT 2
37157: LESS
37158: IFFALSE 37162
// exit ;
37160: GO 37384
// x := GetX ( enemy ) ;
37162: LD_ADDR_VAR 0 4
37166: PUSH
37167: LD_VAR 0 10
37171: PPUSH
37172: CALL_OW 250
37176: ST_TO_ADDR
// y := GetY ( enemy ) ;
37177: LD_ADDR_VAR 0 5
37181: PUSH
37182: LD_VAR 0 10
37186: PPUSH
37187: CALL_OW 251
37191: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37192: LD_ADDR_VAR 0 6
37196: PUSH
37197: LD_VAR 0 4
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PPUSH
37206: LD_INT 1
37208: PPUSH
37209: CALL_OW 12
37213: PLUS
37214: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37215: LD_ADDR_VAR 0 7
37219: PUSH
37220: LD_VAR 0 5
37224: PUSH
37225: LD_INT 1
37227: NEG
37228: PPUSH
37229: LD_INT 1
37231: PPUSH
37232: CALL_OW 12
37236: PLUS
37237: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37238: LD_VAR 0 6
37242: PPUSH
37243: LD_VAR 0 7
37247: PPUSH
37248: CALL_OW 488
37252: NOT
37253: IFFALSE 37275
// begin _x := x ;
37255: LD_ADDR_VAR 0 6
37259: PUSH
37260: LD_VAR 0 4
37264: ST_TO_ADDR
// _y := y ;
37265: LD_ADDR_VAR 0 7
37269: PUSH
37270: LD_VAR 0 5
37274: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37275: LD_ADDR_VAR 0 3
37279: PUSH
37280: LD_INT 1
37282: PPUSH
37283: LD_VAR 0 14
37287: PPUSH
37288: CALL_OW 12
37292: ST_TO_ADDR
// case i of 1 :
37293: LD_VAR 0 3
37297: PUSH
37298: LD_INT 1
37300: DOUBLE
37301: EQUAL
37302: IFTRUE 37306
37304: GO 37323
37306: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37307: LD_VAR 0 1
37311: PPUSH
37312: LD_VAR 0 10
37316: PPUSH
37317: CALL_OW 115
37321: GO 37384
37323: LD_INT 2
37325: DOUBLE
37326: EQUAL
37327: IFTRUE 37331
37329: GO 37353
37331: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37332: LD_VAR 0 1
37336: PPUSH
37337: LD_VAR 0 6
37341: PPUSH
37342: LD_VAR 0 7
37346: PPUSH
37347: CALL_OW 153
37351: GO 37384
37353: LD_INT 3
37355: DOUBLE
37356: EQUAL
37357: IFTRUE 37361
37359: GO 37383
37361: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37362: LD_VAR 0 1
37366: PPUSH
37367: LD_VAR 0 6
37371: PPUSH
37372: LD_VAR 0 7
37376: PPUSH
37377: CALL_OW 154
37381: GO 37384
37383: POP
// end ;
37384: LD_VAR 0 2
37388: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37389: LD_INT 0
37391: PPUSH
37392: PPUSH
37393: PPUSH
37394: PPUSH
37395: PPUSH
37396: PPUSH
// if not unit or not building then
37397: LD_VAR 0 1
37401: NOT
37402: PUSH
37403: LD_VAR 0 2
37407: NOT
37408: OR
37409: IFFALSE 37413
// exit ;
37411: GO 37571
// x := GetX ( building ) ;
37413: LD_ADDR_VAR 0 5
37417: PUSH
37418: LD_VAR 0 2
37422: PPUSH
37423: CALL_OW 250
37427: ST_TO_ADDR
// y := GetY ( building ) ;
37428: LD_ADDR_VAR 0 6
37432: PUSH
37433: LD_VAR 0 2
37437: PPUSH
37438: CALL_OW 251
37442: ST_TO_ADDR
// for i = 0 to 5 do
37443: LD_ADDR_VAR 0 4
37447: PUSH
37448: DOUBLE
37449: LD_INT 0
37451: DEC
37452: ST_TO_ADDR
37453: LD_INT 5
37455: PUSH
37456: FOR_TO
37457: IFFALSE 37569
// begin _x := ShiftX ( x , i , 3 ) ;
37459: LD_ADDR_VAR 0 7
37463: PUSH
37464: LD_VAR 0 5
37468: PPUSH
37469: LD_VAR 0 4
37473: PPUSH
37474: LD_INT 3
37476: PPUSH
37477: CALL_OW 272
37481: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37482: LD_ADDR_VAR 0 8
37486: PUSH
37487: LD_VAR 0 6
37491: PPUSH
37492: LD_VAR 0 4
37496: PPUSH
37497: LD_INT 3
37499: PPUSH
37500: CALL_OW 273
37504: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37505: LD_VAR 0 7
37509: PPUSH
37510: LD_VAR 0 8
37514: PPUSH
37515: CALL_OW 488
37519: NOT
37520: IFFALSE 37524
// continue ;
37522: GO 37456
// if HexInfo ( _x , _y ) = 0 then
37524: LD_VAR 0 7
37528: PPUSH
37529: LD_VAR 0 8
37533: PPUSH
37534: CALL_OW 428
37538: PUSH
37539: LD_INT 0
37541: EQUAL
37542: IFFALSE 37567
// begin ComMoveXY ( unit , _x , _y ) ;
37544: LD_VAR 0 1
37548: PPUSH
37549: LD_VAR 0 7
37553: PPUSH
37554: LD_VAR 0 8
37558: PPUSH
37559: CALL_OW 111
// exit ;
37563: POP
37564: POP
37565: GO 37571
// end ; end ;
37567: GO 37456
37569: POP
37570: POP
// end ;
37571: LD_VAR 0 3
37575: RET
// export function ScanBase ( side , base_area ) ; begin
37576: LD_INT 0
37578: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37579: LD_ADDR_VAR 0 3
37583: PUSH
37584: LD_VAR 0 2
37588: PPUSH
37589: LD_INT 81
37591: PUSH
37592: LD_VAR 0 1
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PPUSH
37601: CALL_OW 70
37605: ST_TO_ADDR
// end ;
37606: LD_VAR 0 3
37610: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37611: LD_INT 0
37613: PPUSH
37614: PPUSH
37615: PPUSH
37616: PPUSH
// result := false ;
37617: LD_ADDR_VAR 0 2
37621: PUSH
37622: LD_INT 0
37624: ST_TO_ADDR
// side := GetSide ( unit ) ;
37625: LD_ADDR_VAR 0 3
37629: PUSH
37630: LD_VAR 0 1
37634: PPUSH
37635: CALL_OW 255
37639: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37640: LD_ADDR_VAR 0 4
37644: PUSH
37645: LD_VAR 0 1
37649: PPUSH
37650: CALL_OW 248
37654: ST_TO_ADDR
// case nat of 1 :
37655: LD_VAR 0 4
37659: PUSH
37660: LD_INT 1
37662: DOUBLE
37663: EQUAL
37664: IFTRUE 37668
37666: GO 37679
37668: POP
// tech := tech_lassight ; 2 :
37669: LD_ADDR_VAR 0 5
37673: PUSH
37674: LD_INT 12
37676: ST_TO_ADDR
37677: GO 37718
37679: LD_INT 2
37681: DOUBLE
37682: EQUAL
37683: IFTRUE 37687
37685: GO 37698
37687: POP
// tech := tech_mortar ; 3 :
37688: LD_ADDR_VAR 0 5
37692: PUSH
37693: LD_INT 41
37695: ST_TO_ADDR
37696: GO 37718
37698: LD_INT 3
37700: DOUBLE
37701: EQUAL
37702: IFTRUE 37706
37704: GO 37717
37706: POP
// tech := tech_bazooka ; end ;
37707: LD_ADDR_VAR 0 5
37711: PUSH
37712: LD_INT 44
37714: ST_TO_ADDR
37715: GO 37718
37717: POP
// if Researched ( side , tech ) then
37718: LD_VAR 0 3
37722: PPUSH
37723: LD_VAR 0 5
37727: PPUSH
37728: CALL_OW 325
37732: IFFALSE 37759
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37734: LD_ADDR_VAR 0 2
37738: PUSH
37739: LD_INT 5
37741: PUSH
37742: LD_INT 8
37744: PUSH
37745: LD_INT 9
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: LIST
37752: PUSH
37753: LD_VAR 0 4
37757: ARRAY
37758: ST_TO_ADDR
// end ;
37759: LD_VAR 0 2
37763: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37764: LD_INT 0
37766: PPUSH
37767: PPUSH
37768: PPUSH
// if not mines then
37769: LD_VAR 0 2
37773: NOT
37774: IFFALSE 37778
// exit ;
37776: GO 37922
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37778: LD_ADDR_VAR 0 5
37782: PUSH
37783: LD_INT 81
37785: PUSH
37786: LD_VAR 0 1
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 3
37797: PUSH
37798: LD_INT 21
37800: PUSH
37801: LD_INT 3
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PPUSH
37816: CALL_OW 69
37820: ST_TO_ADDR
// for i in mines do
37821: LD_ADDR_VAR 0 4
37825: PUSH
37826: LD_VAR 0 2
37830: PUSH
37831: FOR_IN
37832: IFFALSE 37920
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37834: LD_VAR 0 4
37838: PUSH
37839: LD_INT 1
37841: ARRAY
37842: PPUSH
37843: LD_VAR 0 4
37847: PUSH
37848: LD_INT 2
37850: ARRAY
37851: PPUSH
37852: CALL_OW 458
37856: NOT
37857: IFFALSE 37861
// continue ;
37859: GO 37831
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37861: LD_VAR 0 4
37865: PUSH
37866: LD_INT 1
37868: ARRAY
37869: PPUSH
37870: LD_VAR 0 4
37874: PUSH
37875: LD_INT 2
37877: ARRAY
37878: PPUSH
37879: CALL_OW 428
37883: PUSH
37884: LD_VAR 0 5
37888: IN
37889: IFFALSE 37918
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37891: LD_VAR 0 4
37895: PUSH
37896: LD_INT 1
37898: ARRAY
37899: PPUSH
37900: LD_VAR 0 4
37904: PUSH
37905: LD_INT 2
37907: ARRAY
37908: PPUSH
37909: LD_VAR 0 1
37913: PPUSH
37914: CALL_OW 456
// end ;
37918: GO 37831
37920: POP
37921: POP
// end ;
37922: LD_VAR 0 3
37926: RET
// export function Count ( array ) ; var i ; begin
37927: LD_INT 0
37929: PPUSH
37930: PPUSH
// result := 0 ;
37931: LD_ADDR_VAR 0 2
37935: PUSH
37936: LD_INT 0
37938: ST_TO_ADDR
// for i in array do
37939: LD_ADDR_VAR 0 3
37943: PUSH
37944: LD_VAR 0 1
37948: PUSH
37949: FOR_IN
37950: IFFALSE 37974
// if i then
37952: LD_VAR 0 3
37956: IFFALSE 37972
// result := result + 1 ;
37958: LD_ADDR_VAR 0 2
37962: PUSH
37963: LD_VAR 0 2
37967: PUSH
37968: LD_INT 1
37970: PLUS
37971: ST_TO_ADDR
37972: GO 37949
37974: POP
37975: POP
// end ;
37976: LD_VAR 0 2
37980: RET
// export function IsEmpty ( building ) ; begin
37981: LD_INT 0
37983: PPUSH
// if not building then
37984: LD_VAR 0 1
37988: NOT
37989: IFFALSE 37993
// exit ;
37991: GO 38036
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37993: LD_ADDR_VAR 0 2
37997: PUSH
37998: LD_VAR 0 1
38002: PUSH
38003: LD_INT 22
38005: PUSH
38006: LD_VAR 0 1
38010: PPUSH
38011: CALL_OW 255
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 58
38022: PUSH
38023: EMPTY
38024: LIST
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PPUSH
38030: CALL_OW 69
38034: IN
38035: ST_TO_ADDR
// end ;
38036: LD_VAR 0 2
38040: RET
// export function IsNotFull ( building ) ; begin
38041: LD_INT 0
38043: PPUSH
// if not building then
38044: LD_VAR 0 1
38048: NOT
38049: IFFALSE 38053
// exit ;
38051: GO 38072
// result := UnitsInside ( building ) < 6 ;
38053: LD_ADDR_VAR 0 2
38057: PUSH
38058: LD_VAR 0 1
38062: PPUSH
38063: CALL_OW 313
38067: PUSH
38068: LD_INT 6
38070: LESS
38071: ST_TO_ADDR
// end ;
38072: LD_VAR 0 2
38076: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38077: LD_INT 0
38079: PPUSH
38080: PPUSH
38081: PPUSH
38082: PPUSH
// tmp := [ ] ;
38083: LD_ADDR_VAR 0 3
38087: PUSH
38088: EMPTY
38089: ST_TO_ADDR
// list := [ ] ;
38090: LD_ADDR_VAR 0 5
38094: PUSH
38095: EMPTY
38096: ST_TO_ADDR
// for i = 16 to 25 do
38097: LD_ADDR_VAR 0 4
38101: PUSH
38102: DOUBLE
38103: LD_INT 16
38105: DEC
38106: ST_TO_ADDR
38107: LD_INT 25
38109: PUSH
38110: FOR_TO
38111: IFFALSE 38184
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38113: LD_ADDR_VAR 0 3
38117: PUSH
38118: LD_VAR 0 3
38122: PUSH
38123: LD_INT 22
38125: PUSH
38126: LD_VAR 0 1
38130: PPUSH
38131: CALL_OW 255
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 91
38142: PUSH
38143: LD_VAR 0 1
38147: PUSH
38148: LD_INT 6
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 30
38158: PUSH
38159: LD_VAR 0 4
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: LIST
38172: PUSH
38173: EMPTY
38174: LIST
38175: PPUSH
38176: CALL_OW 69
38180: ADD
38181: ST_TO_ADDR
38182: GO 38110
38184: POP
38185: POP
// for i = 1 to tmp do
38186: LD_ADDR_VAR 0 4
38190: PUSH
38191: DOUBLE
38192: LD_INT 1
38194: DEC
38195: ST_TO_ADDR
38196: LD_VAR 0 3
38200: PUSH
38201: FOR_TO
38202: IFFALSE 38290
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38204: LD_ADDR_VAR 0 5
38208: PUSH
38209: LD_VAR 0 5
38213: PUSH
38214: LD_VAR 0 3
38218: PUSH
38219: LD_VAR 0 4
38223: ARRAY
38224: PPUSH
38225: CALL_OW 266
38229: PUSH
38230: LD_VAR 0 3
38234: PUSH
38235: LD_VAR 0 4
38239: ARRAY
38240: PPUSH
38241: CALL_OW 250
38245: PUSH
38246: LD_VAR 0 3
38250: PUSH
38251: LD_VAR 0 4
38255: ARRAY
38256: PPUSH
38257: CALL_OW 251
38261: PUSH
38262: LD_VAR 0 3
38266: PUSH
38267: LD_VAR 0 4
38271: ARRAY
38272: PPUSH
38273: CALL_OW 254
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: PUSH
38284: EMPTY
38285: LIST
38286: ADD
38287: ST_TO_ADDR
38288: GO 38201
38290: POP
38291: POP
// result := list ;
38292: LD_ADDR_VAR 0 2
38296: PUSH
38297: LD_VAR 0 5
38301: ST_TO_ADDR
// end ;
38302: LD_VAR 0 2
38306: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38307: LD_INT 0
38309: PPUSH
38310: PPUSH
38311: PPUSH
38312: PPUSH
38313: PPUSH
38314: PPUSH
38315: PPUSH
// if not factory then
38316: LD_VAR 0 1
38320: NOT
38321: IFFALSE 38325
// exit ;
38323: GO 38918
// if control = control_apeman then
38325: LD_VAR 0 4
38329: PUSH
38330: LD_INT 5
38332: EQUAL
38333: IFFALSE 38442
// begin tmp := UnitsInside ( factory ) ;
38335: LD_ADDR_VAR 0 8
38339: PUSH
38340: LD_VAR 0 1
38344: PPUSH
38345: CALL_OW 313
38349: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38350: LD_VAR 0 8
38354: PPUSH
38355: LD_INT 25
38357: PUSH
38358: LD_INT 12
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PPUSH
38365: CALL_OW 72
38369: NOT
38370: IFFALSE 38380
// control := control_manual ;
38372: LD_ADDR_VAR 0 4
38376: PUSH
38377: LD_INT 1
38379: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38380: LD_ADDR_VAR 0 8
38384: PUSH
38385: LD_VAR 0 1
38389: PPUSH
38390: CALL 38077 0 1
38394: ST_TO_ADDR
// if tmp then
38395: LD_VAR 0 8
38399: IFFALSE 38442
// begin for i in tmp do
38401: LD_ADDR_VAR 0 7
38405: PUSH
38406: LD_VAR 0 8
38410: PUSH
38411: FOR_IN
38412: IFFALSE 38440
// if i [ 1 ] = b_ext_radio then
38414: LD_VAR 0 7
38418: PUSH
38419: LD_INT 1
38421: ARRAY
38422: PUSH
38423: LD_INT 22
38425: EQUAL
38426: IFFALSE 38438
// begin control := control_remote ;
38428: LD_ADDR_VAR 0 4
38432: PUSH
38433: LD_INT 2
38435: ST_TO_ADDR
// break ;
38436: GO 38440
// end ;
38438: GO 38411
38440: POP
38441: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38442: LD_VAR 0 1
38446: PPUSH
38447: LD_VAR 0 2
38451: PPUSH
38452: LD_VAR 0 3
38456: PPUSH
38457: LD_VAR 0 4
38461: PPUSH
38462: LD_VAR 0 5
38466: PPUSH
38467: CALL_OW 448
38471: IFFALSE 38506
// begin result := [ chassis , engine , control , weapon ] ;
38473: LD_ADDR_VAR 0 6
38477: PUSH
38478: LD_VAR 0 2
38482: PUSH
38483: LD_VAR 0 3
38487: PUSH
38488: LD_VAR 0 4
38492: PUSH
38493: LD_VAR 0 5
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: ST_TO_ADDR
// exit ;
38504: GO 38918
// end ; _chassis := AvailableChassisList ( factory ) ;
38506: LD_ADDR_VAR 0 9
38510: PUSH
38511: LD_VAR 0 1
38515: PPUSH
38516: CALL_OW 475
38520: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38521: LD_ADDR_VAR 0 11
38525: PUSH
38526: LD_VAR 0 1
38530: PPUSH
38531: CALL_OW 476
38535: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38536: LD_ADDR_VAR 0 12
38540: PUSH
38541: LD_VAR 0 1
38545: PPUSH
38546: CALL_OW 477
38550: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38551: LD_ADDR_VAR 0 10
38555: PUSH
38556: LD_VAR 0 1
38560: PPUSH
38561: CALL_OW 478
38565: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38566: LD_VAR 0 9
38570: NOT
38571: PUSH
38572: LD_VAR 0 11
38576: NOT
38577: OR
38578: PUSH
38579: LD_VAR 0 12
38583: NOT
38584: OR
38585: PUSH
38586: LD_VAR 0 10
38590: NOT
38591: OR
38592: IFFALSE 38627
// begin result := [ chassis , engine , control , weapon ] ;
38594: LD_ADDR_VAR 0 6
38598: PUSH
38599: LD_VAR 0 2
38603: PUSH
38604: LD_VAR 0 3
38608: PUSH
38609: LD_VAR 0 4
38613: PUSH
38614: LD_VAR 0 5
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: ST_TO_ADDR
// exit ;
38625: GO 38918
// end ; if not chassis in _chassis then
38627: LD_VAR 0 2
38631: PUSH
38632: LD_VAR 0 9
38636: IN
38637: NOT
38638: IFFALSE 38664
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38640: LD_ADDR_VAR 0 2
38644: PUSH
38645: LD_VAR 0 9
38649: PUSH
38650: LD_INT 1
38652: PPUSH
38653: LD_VAR 0 9
38657: PPUSH
38658: CALL_OW 12
38662: ARRAY
38663: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38664: LD_VAR 0 2
38668: PPUSH
38669: LD_VAR 0 3
38673: PPUSH
38674: CALL 38923 0 2
38678: NOT
38679: IFFALSE 38738
// repeat engine := _engine [ 1 ] ;
38681: LD_ADDR_VAR 0 3
38685: PUSH
38686: LD_VAR 0 11
38690: PUSH
38691: LD_INT 1
38693: ARRAY
38694: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38695: LD_ADDR_VAR 0 11
38699: PUSH
38700: LD_VAR 0 11
38704: PPUSH
38705: LD_INT 1
38707: PPUSH
38708: CALL_OW 3
38712: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38713: LD_VAR 0 2
38717: PPUSH
38718: LD_VAR 0 3
38722: PPUSH
38723: CALL 38923 0 2
38727: PUSH
38728: LD_VAR 0 11
38732: PUSH
38733: EMPTY
38734: EQUAL
38735: OR
38736: IFFALSE 38681
// if not control in _control then
38738: LD_VAR 0 4
38742: PUSH
38743: LD_VAR 0 12
38747: IN
38748: NOT
38749: IFFALSE 38775
// control := _control [ rand ( 1 , _control ) ] ;
38751: LD_ADDR_VAR 0 4
38755: PUSH
38756: LD_VAR 0 12
38760: PUSH
38761: LD_INT 1
38763: PPUSH
38764: LD_VAR 0 12
38768: PPUSH
38769: CALL_OW 12
38773: ARRAY
38774: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38775: LD_VAR 0 2
38779: PPUSH
38780: LD_VAR 0 5
38784: PPUSH
38785: CALL 39143 0 2
38789: NOT
38790: IFFALSE 38849
// repeat weapon := _weapon [ 1 ] ;
38792: LD_ADDR_VAR 0 5
38796: PUSH
38797: LD_VAR 0 10
38801: PUSH
38802: LD_INT 1
38804: ARRAY
38805: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38806: LD_ADDR_VAR 0 10
38810: PUSH
38811: LD_VAR 0 10
38815: PPUSH
38816: LD_INT 1
38818: PPUSH
38819: CALL_OW 3
38823: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38824: LD_VAR 0 2
38828: PPUSH
38829: LD_VAR 0 5
38833: PPUSH
38834: CALL 39143 0 2
38838: PUSH
38839: LD_VAR 0 10
38843: PUSH
38844: EMPTY
38845: EQUAL
38846: OR
38847: IFFALSE 38792
// result := [ ] ;
38849: LD_ADDR_VAR 0 6
38853: PUSH
38854: EMPTY
38855: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38856: LD_VAR 0 1
38860: PPUSH
38861: LD_VAR 0 2
38865: PPUSH
38866: LD_VAR 0 3
38870: PPUSH
38871: LD_VAR 0 4
38875: PPUSH
38876: LD_VAR 0 5
38880: PPUSH
38881: CALL_OW 448
38885: IFFALSE 38918
// result := [ chassis , engine , control , weapon ] ;
38887: LD_ADDR_VAR 0 6
38891: PUSH
38892: LD_VAR 0 2
38896: PUSH
38897: LD_VAR 0 3
38901: PUSH
38902: LD_VAR 0 4
38906: PUSH
38907: LD_VAR 0 5
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: ST_TO_ADDR
// end ;
38918: LD_VAR 0 6
38922: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38923: LD_INT 0
38925: PPUSH
// if not chassis or not engine then
38926: LD_VAR 0 1
38930: NOT
38931: PUSH
38932: LD_VAR 0 2
38936: NOT
38937: OR
38938: IFFALSE 38942
// exit ;
38940: GO 39138
// case engine of engine_solar :
38942: LD_VAR 0 2
38946: PUSH
38947: LD_INT 2
38949: DOUBLE
38950: EQUAL
38951: IFTRUE 38955
38953: GO 38993
38955: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38956: LD_ADDR_VAR 0 3
38960: PUSH
38961: LD_INT 11
38963: PUSH
38964: LD_INT 12
38966: PUSH
38967: LD_INT 13
38969: PUSH
38970: LD_INT 14
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: LD_INT 2
38978: PUSH
38979: LD_INT 3
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: ST_TO_ADDR
38991: GO 39122
38993: LD_INT 1
38995: DOUBLE
38996: EQUAL
38997: IFTRUE 39001
38999: GO 39063
39001: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39002: LD_ADDR_VAR 0 3
39006: PUSH
39007: LD_INT 11
39009: PUSH
39010: LD_INT 12
39012: PUSH
39013: LD_INT 13
39015: PUSH
39016: LD_INT 14
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: LD_INT 2
39024: PUSH
39025: LD_INT 3
39027: PUSH
39028: LD_INT 4
39030: PUSH
39031: LD_INT 5
39033: PUSH
39034: LD_INT 21
39036: PUSH
39037: LD_INT 23
39039: PUSH
39040: LD_INT 22
39042: PUSH
39043: LD_INT 24
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: ST_TO_ADDR
39061: GO 39122
39063: LD_INT 3
39065: DOUBLE
39066: EQUAL
39067: IFTRUE 39071
39069: GO 39121
39071: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39072: LD_ADDR_VAR 0 3
39076: PUSH
39077: LD_INT 13
39079: PUSH
39080: LD_INT 14
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: LD_INT 3
39088: PUSH
39089: LD_INT 4
39091: PUSH
39092: LD_INT 5
39094: PUSH
39095: LD_INT 21
39097: PUSH
39098: LD_INT 22
39100: PUSH
39101: LD_INT 23
39103: PUSH
39104: LD_INT 24
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: ST_TO_ADDR
39119: GO 39122
39121: POP
// result := ( chassis in result ) ;
39122: LD_ADDR_VAR 0 3
39126: PUSH
39127: LD_VAR 0 1
39131: PUSH
39132: LD_VAR 0 3
39136: IN
39137: ST_TO_ADDR
// end ;
39138: LD_VAR 0 3
39142: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39143: LD_INT 0
39145: PPUSH
// if not chassis or not weapon then
39146: LD_VAR 0 1
39150: NOT
39151: PUSH
39152: LD_VAR 0 2
39156: NOT
39157: OR
39158: IFFALSE 39162
// exit ;
39160: GO 40188
// case weapon of us_machine_gun :
39162: LD_VAR 0 2
39166: PUSH
39167: LD_INT 2
39169: DOUBLE
39170: EQUAL
39171: IFTRUE 39175
39173: GO 39205
39175: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39176: LD_ADDR_VAR 0 3
39180: PUSH
39181: LD_INT 1
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: LD_INT 3
39189: PUSH
39190: LD_INT 4
39192: PUSH
39193: LD_INT 5
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: ST_TO_ADDR
39203: GO 40172
39205: LD_INT 3
39207: DOUBLE
39208: EQUAL
39209: IFTRUE 39213
39211: GO 39243
39213: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39214: LD_ADDR_VAR 0 3
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: LD_INT 2
39224: PUSH
39225: LD_INT 3
39227: PUSH
39228: LD_INT 4
39230: PUSH
39231: LD_INT 5
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: ST_TO_ADDR
39241: GO 40172
39243: LD_INT 11
39245: DOUBLE
39246: EQUAL
39247: IFTRUE 39251
39249: GO 39281
39251: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39252: LD_ADDR_VAR 0 3
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: LD_INT 3
39265: PUSH
39266: LD_INT 4
39268: PUSH
39269: LD_INT 5
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: ST_TO_ADDR
39279: GO 40172
39281: LD_INT 4
39283: DOUBLE
39284: EQUAL
39285: IFTRUE 39289
39287: GO 39315
39289: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39290: LD_ADDR_VAR 0 3
39294: PUSH
39295: LD_INT 2
39297: PUSH
39298: LD_INT 3
39300: PUSH
39301: LD_INT 4
39303: PUSH
39304: LD_INT 5
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: ST_TO_ADDR
39313: GO 40172
39315: LD_INT 5
39317: DOUBLE
39318: EQUAL
39319: IFTRUE 39323
39321: GO 39349
39323: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39324: LD_ADDR_VAR 0 3
39328: PUSH
39329: LD_INT 2
39331: PUSH
39332: LD_INT 3
39334: PUSH
39335: LD_INT 4
39337: PUSH
39338: LD_INT 5
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: ST_TO_ADDR
39347: GO 40172
39349: LD_INT 9
39351: DOUBLE
39352: EQUAL
39353: IFTRUE 39357
39355: GO 39383
39357: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39358: LD_ADDR_VAR 0 3
39362: PUSH
39363: LD_INT 2
39365: PUSH
39366: LD_INT 3
39368: PUSH
39369: LD_INT 4
39371: PUSH
39372: LD_INT 5
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: ST_TO_ADDR
39381: GO 40172
39383: LD_INT 7
39385: DOUBLE
39386: EQUAL
39387: IFTRUE 39391
39389: GO 39417
39391: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39392: LD_ADDR_VAR 0 3
39396: PUSH
39397: LD_INT 2
39399: PUSH
39400: LD_INT 3
39402: PUSH
39403: LD_INT 4
39405: PUSH
39406: LD_INT 5
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: ST_TO_ADDR
39415: GO 40172
39417: LD_INT 12
39419: DOUBLE
39420: EQUAL
39421: IFTRUE 39425
39423: GO 39451
39425: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39426: LD_ADDR_VAR 0 3
39430: PUSH
39431: LD_INT 2
39433: PUSH
39434: LD_INT 3
39436: PUSH
39437: LD_INT 4
39439: PUSH
39440: LD_INT 5
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: ST_TO_ADDR
39449: GO 40172
39451: LD_INT 13
39453: DOUBLE
39454: EQUAL
39455: IFTRUE 39459
39457: GO 39485
39459: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39460: LD_ADDR_VAR 0 3
39464: PUSH
39465: LD_INT 2
39467: PUSH
39468: LD_INT 3
39470: PUSH
39471: LD_INT 4
39473: PUSH
39474: LD_INT 5
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: ST_TO_ADDR
39483: GO 40172
39485: LD_INT 14
39487: DOUBLE
39488: EQUAL
39489: IFTRUE 39493
39491: GO 39511
39493: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39494: LD_ADDR_VAR 0 3
39498: PUSH
39499: LD_INT 4
39501: PUSH
39502: LD_INT 5
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: ST_TO_ADDR
39509: GO 40172
39511: LD_INT 6
39513: DOUBLE
39514: EQUAL
39515: IFTRUE 39519
39517: GO 39537
39519: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39520: LD_ADDR_VAR 0 3
39524: PUSH
39525: LD_INT 4
39527: PUSH
39528: LD_INT 5
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: ST_TO_ADDR
39535: GO 40172
39537: LD_INT 10
39539: DOUBLE
39540: EQUAL
39541: IFTRUE 39545
39543: GO 39563
39545: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39546: LD_ADDR_VAR 0 3
39550: PUSH
39551: LD_INT 4
39553: PUSH
39554: LD_INT 5
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: ST_TO_ADDR
39561: GO 40172
39563: LD_INT 22
39565: DOUBLE
39566: EQUAL
39567: IFTRUE 39571
39569: GO 39597
39571: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39572: LD_ADDR_VAR 0 3
39576: PUSH
39577: LD_INT 11
39579: PUSH
39580: LD_INT 12
39582: PUSH
39583: LD_INT 13
39585: PUSH
39586: LD_INT 14
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: ST_TO_ADDR
39595: GO 40172
39597: LD_INT 23
39599: DOUBLE
39600: EQUAL
39601: IFTRUE 39605
39603: GO 39631
39605: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39606: LD_ADDR_VAR 0 3
39610: PUSH
39611: LD_INT 11
39613: PUSH
39614: LD_INT 12
39616: PUSH
39617: LD_INT 13
39619: PUSH
39620: LD_INT 14
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: ST_TO_ADDR
39629: GO 40172
39631: LD_INT 24
39633: DOUBLE
39634: EQUAL
39635: IFTRUE 39639
39637: GO 39665
39639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39640: LD_ADDR_VAR 0 3
39644: PUSH
39645: LD_INT 11
39647: PUSH
39648: LD_INT 12
39650: PUSH
39651: LD_INT 13
39653: PUSH
39654: LD_INT 14
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: ST_TO_ADDR
39663: GO 40172
39665: LD_INT 30
39667: DOUBLE
39668: EQUAL
39669: IFTRUE 39673
39671: GO 39699
39673: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39674: LD_ADDR_VAR 0 3
39678: PUSH
39679: LD_INT 11
39681: PUSH
39682: LD_INT 12
39684: PUSH
39685: LD_INT 13
39687: PUSH
39688: LD_INT 14
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: ST_TO_ADDR
39697: GO 40172
39699: LD_INT 25
39701: DOUBLE
39702: EQUAL
39703: IFTRUE 39707
39705: GO 39725
39707: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39708: LD_ADDR_VAR 0 3
39712: PUSH
39713: LD_INT 13
39715: PUSH
39716: LD_INT 14
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: ST_TO_ADDR
39723: GO 40172
39725: LD_INT 27
39727: DOUBLE
39728: EQUAL
39729: IFTRUE 39733
39731: GO 39751
39733: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39734: LD_ADDR_VAR 0 3
39738: PUSH
39739: LD_INT 13
39741: PUSH
39742: LD_INT 14
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: ST_TO_ADDR
39749: GO 40172
39751: LD_INT 28
39753: DOUBLE
39754: EQUAL
39755: IFTRUE 39759
39757: GO 39777
39759: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39760: LD_ADDR_VAR 0 3
39764: PUSH
39765: LD_INT 13
39767: PUSH
39768: LD_INT 14
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: ST_TO_ADDR
39775: GO 40172
39777: LD_INT 29
39779: DOUBLE
39780: EQUAL
39781: IFTRUE 39785
39783: GO 39803
39785: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39786: LD_ADDR_VAR 0 3
39790: PUSH
39791: LD_INT 13
39793: PUSH
39794: LD_INT 14
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: ST_TO_ADDR
39801: GO 40172
39803: LD_INT 31
39805: DOUBLE
39806: EQUAL
39807: IFTRUE 39811
39809: GO 39829
39811: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39812: LD_ADDR_VAR 0 3
39816: PUSH
39817: LD_INT 13
39819: PUSH
39820: LD_INT 14
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: ST_TO_ADDR
39827: GO 40172
39829: LD_INT 26
39831: DOUBLE
39832: EQUAL
39833: IFTRUE 39837
39835: GO 39855
39837: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39838: LD_ADDR_VAR 0 3
39842: PUSH
39843: LD_INT 13
39845: PUSH
39846: LD_INT 14
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: ST_TO_ADDR
39853: GO 40172
39855: LD_INT 42
39857: DOUBLE
39858: EQUAL
39859: IFTRUE 39863
39861: GO 39889
39863: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39864: LD_ADDR_VAR 0 3
39868: PUSH
39869: LD_INT 21
39871: PUSH
39872: LD_INT 22
39874: PUSH
39875: LD_INT 23
39877: PUSH
39878: LD_INT 24
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: ST_TO_ADDR
39887: GO 40172
39889: LD_INT 43
39891: DOUBLE
39892: EQUAL
39893: IFTRUE 39897
39895: GO 39923
39897: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39898: LD_ADDR_VAR 0 3
39902: PUSH
39903: LD_INT 21
39905: PUSH
39906: LD_INT 22
39908: PUSH
39909: LD_INT 23
39911: PUSH
39912: LD_INT 24
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: ST_TO_ADDR
39921: GO 40172
39923: LD_INT 44
39925: DOUBLE
39926: EQUAL
39927: IFTRUE 39931
39929: GO 39957
39931: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39932: LD_ADDR_VAR 0 3
39936: PUSH
39937: LD_INT 21
39939: PUSH
39940: LD_INT 22
39942: PUSH
39943: LD_INT 23
39945: PUSH
39946: LD_INT 24
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: ST_TO_ADDR
39955: GO 40172
39957: LD_INT 45
39959: DOUBLE
39960: EQUAL
39961: IFTRUE 39965
39963: GO 39991
39965: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39966: LD_ADDR_VAR 0 3
39970: PUSH
39971: LD_INT 21
39973: PUSH
39974: LD_INT 22
39976: PUSH
39977: LD_INT 23
39979: PUSH
39980: LD_INT 24
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: ST_TO_ADDR
39989: GO 40172
39991: LD_INT 49
39993: DOUBLE
39994: EQUAL
39995: IFTRUE 39999
39997: GO 40025
39999: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40000: LD_ADDR_VAR 0 3
40004: PUSH
40005: LD_INT 21
40007: PUSH
40008: LD_INT 22
40010: PUSH
40011: LD_INT 23
40013: PUSH
40014: LD_INT 24
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: ST_TO_ADDR
40023: GO 40172
40025: LD_INT 51
40027: DOUBLE
40028: EQUAL
40029: IFTRUE 40033
40031: GO 40059
40033: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40034: LD_ADDR_VAR 0 3
40038: PUSH
40039: LD_INT 21
40041: PUSH
40042: LD_INT 22
40044: PUSH
40045: LD_INT 23
40047: PUSH
40048: LD_INT 24
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: ST_TO_ADDR
40057: GO 40172
40059: LD_INT 52
40061: DOUBLE
40062: EQUAL
40063: IFTRUE 40067
40065: GO 40093
40067: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40068: LD_ADDR_VAR 0 3
40072: PUSH
40073: LD_INT 21
40075: PUSH
40076: LD_INT 22
40078: PUSH
40079: LD_INT 23
40081: PUSH
40082: LD_INT 24
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: ST_TO_ADDR
40091: GO 40172
40093: LD_INT 53
40095: DOUBLE
40096: EQUAL
40097: IFTRUE 40101
40099: GO 40119
40101: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40102: LD_ADDR_VAR 0 3
40106: PUSH
40107: LD_INT 23
40109: PUSH
40110: LD_INT 24
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: ST_TO_ADDR
40117: GO 40172
40119: LD_INT 46
40121: DOUBLE
40122: EQUAL
40123: IFTRUE 40127
40125: GO 40145
40127: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40128: LD_ADDR_VAR 0 3
40132: PUSH
40133: LD_INT 23
40135: PUSH
40136: LD_INT 24
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: ST_TO_ADDR
40143: GO 40172
40145: LD_INT 47
40147: DOUBLE
40148: EQUAL
40149: IFTRUE 40153
40151: GO 40171
40153: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40154: LD_ADDR_VAR 0 3
40158: PUSH
40159: LD_INT 23
40161: PUSH
40162: LD_INT 24
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: ST_TO_ADDR
40169: GO 40172
40171: POP
// result := ( chassis in result ) ;
40172: LD_ADDR_VAR 0 3
40176: PUSH
40177: LD_VAR 0 1
40181: PUSH
40182: LD_VAR 0 3
40186: IN
40187: ST_TO_ADDR
// end ;
40188: LD_VAR 0 3
40192: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40193: LD_INT 0
40195: PPUSH
40196: PPUSH
40197: PPUSH
40198: PPUSH
40199: PPUSH
40200: PPUSH
40201: PPUSH
// result := array ;
40202: LD_ADDR_VAR 0 5
40206: PUSH
40207: LD_VAR 0 1
40211: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40212: LD_VAR 0 1
40216: NOT
40217: PUSH
40218: LD_VAR 0 2
40222: NOT
40223: OR
40224: PUSH
40225: LD_VAR 0 3
40229: NOT
40230: OR
40231: PUSH
40232: LD_VAR 0 2
40236: PUSH
40237: LD_VAR 0 1
40241: GREATER
40242: OR
40243: PUSH
40244: LD_VAR 0 3
40248: PUSH
40249: LD_VAR 0 1
40253: GREATER
40254: OR
40255: IFFALSE 40259
// exit ;
40257: GO 40555
// if direction then
40259: LD_VAR 0 4
40263: IFFALSE 40327
// begin d := 1 ;
40265: LD_ADDR_VAR 0 9
40269: PUSH
40270: LD_INT 1
40272: ST_TO_ADDR
// if i_from > i_to then
40273: LD_VAR 0 2
40277: PUSH
40278: LD_VAR 0 3
40282: GREATER
40283: IFFALSE 40309
// length := ( array - i_from ) + i_to else
40285: LD_ADDR_VAR 0 11
40289: PUSH
40290: LD_VAR 0 1
40294: PUSH
40295: LD_VAR 0 2
40299: MINUS
40300: PUSH
40301: LD_VAR 0 3
40305: PLUS
40306: ST_TO_ADDR
40307: GO 40325
// length := i_to - i_from ;
40309: LD_ADDR_VAR 0 11
40313: PUSH
40314: LD_VAR 0 3
40318: PUSH
40319: LD_VAR 0 2
40323: MINUS
40324: ST_TO_ADDR
// end else
40325: GO 40388
// begin d := - 1 ;
40327: LD_ADDR_VAR 0 9
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: ST_TO_ADDR
// if i_from > i_to then
40336: LD_VAR 0 2
40340: PUSH
40341: LD_VAR 0 3
40345: GREATER
40346: IFFALSE 40366
// length := i_from - i_to else
40348: LD_ADDR_VAR 0 11
40352: PUSH
40353: LD_VAR 0 2
40357: PUSH
40358: LD_VAR 0 3
40362: MINUS
40363: ST_TO_ADDR
40364: GO 40388
// length := ( array - i_to ) + i_from ;
40366: LD_ADDR_VAR 0 11
40370: PUSH
40371: LD_VAR 0 1
40375: PUSH
40376: LD_VAR 0 3
40380: MINUS
40381: PUSH
40382: LD_VAR 0 2
40386: PLUS
40387: ST_TO_ADDR
// end ; if not length then
40388: LD_VAR 0 11
40392: NOT
40393: IFFALSE 40397
// exit ;
40395: GO 40555
// tmp := array ;
40397: LD_ADDR_VAR 0 10
40401: PUSH
40402: LD_VAR 0 1
40406: ST_TO_ADDR
// for i = 1 to length do
40407: LD_ADDR_VAR 0 6
40411: PUSH
40412: DOUBLE
40413: LD_INT 1
40415: DEC
40416: ST_TO_ADDR
40417: LD_VAR 0 11
40421: PUSH
40422: FOR_TO
40423: IFFALSE 40543
// begin for j = 1 to array do
40425: LD_ADDR_VAR 0 7
40429: PUSH
40430: DOUBLE
40431: LD_INT 1
40433: DEC
40434: ST_TO_ADDR
40435: LD_VAR 0 1
40439: PUSH
40440: FOR_TO
40441: IFFALSE 40529
// begin k := j + d ;
40443: LD_ADDR_VAR 0 8
40447: PUSH
40448: LD_VAR 0 7
40452: PUSH
40453: LD_VAR 0 9
40457: PLUS
40458: ST_TO_ADDR
// if k > array then
40459: LD_VAR 0 8
40463: PUSH
40464: LD_VAR 0 1
40468: GREATER
40469: IFFALSE 40479
// k := 1 ;
40471: LD_ADDR_VAR 0 8
40475: PUSH
40476: LD_INT 1
40478: ST_TO_ADDR
// if not k then
40479: LD_VAR 0 8
40483: NOT
40484: IFFALSE 40496
// k := array ;
40486: LD_ADDR_VAR 0 8
40490: PUSH
40491: LD_VAR 0 1
40495: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40496: LD_ADDR_VAR 0 10
40500: PUSH
40501: LD_VAR 0 10
40505: PPUSH
40506: LD_VAR 0 8
40510: PPUSH
40511: LD_VAR 0 1
40515: PUSH
40516: LD_VAR 0 7
40520: ARRAY
40521: PPUSH
40522: CALL_OW 1
40526: ST_TO_ADDR
// end ;
40527: GO 40440
40529: POP
40530: POP
// array := tmp ;
40531: LD_ADDR_VAR 0 1
40535: PUSH
40536: LD_VAR 0 10
40540: ST_TO_ADDR
// end ;
40541: GO 40422
40543: POP
40544: POP
// result := array ;
40545: LD_ADDR_VAR 0 5
40549: PUSH
40550: LD_VAR 0 1
40554: ST_TO_ADDR
// end ;
40555: LD_VAR 0 5
40559: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40560: LD_INT 0
40562: PPUSH
40563: PPUSH
// result := 0 ;
40564: LD_ADDR_VAR 0 3
40568: PUSH
40569: LD_INT 0
40571: ST_TO_ADDR
// if not array or not value in array then
40572: LD_VAR 0 1
40576: NOT
40577: PUSH
40578: LD_VAR 0 2
40582: PUSH
40583: LD_VAR 0 1
40587: IN
40588: NOT
40589: OR
40590: IFFALSE 40594
// exit ;
40592: GO 40648
// for i = 1 to array do
40594: LD_ADDR_VAR 0 4
40598: PUSH
40599: DOUBLE
40600: LD_INT 1
40602: DEC
40603: ST_TO_ADDR
40604: LD_VAR 0 1
40608: PUSH
40609: FOR_TO
40610: IFFALSE 40646
// if value = array [ i ] then
40612: LD_VAR 0 2
40616: PUSH
40617: LD_VAR 0 1
40621: PUSH
40622: LD_VAR 0 4
40626: ARRAY
40627: EQUAL
40628: IFFALSE 40644
// begin result := i ;
40630: LD_ADDR_VAR 0 3
40634: PUSH
40635: LD_VAR 0 4
40639: ST_TO_ADDR
// exit ;
40640: POP
40641: POP
40642: GO 40648
// end ;
40644: GO 40609
40646: POP
40647: POP
// end ;
40648: LD_VAR 0 3
40652: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40653: LD_INT 0
40655: PPUSH
// vc_chassis := chassis ;
40656: LD_ADDR_OWVAR 37
40660: PUSH
40661: LD_VAR 0 1
40665: ST_TO_ADDR
// vc_engine := engine ;
40666: LD_ADDR_OWVAR 39
40670: PUSH
40671: LD_VAR 0 2
40675: ST_TO_ADDR
// vc_control := control ;
40676: LD_ADDR_OWVAR 38
40680: PUSH
40681: LD_VAR 0 3
40685: ST_TO_ADDR
// vc_weapon := weapon ;
40686: LD_ADDR_OWVAR 40
40690: PUSH
40691: LD_VAR 0 4
40695: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40696: LD_ADDR_OWVAR 41
40700: PUSH
40701: LD_VAR 0 5
40705: ST_TO_ADDR
// end ;
40706: LD_VAR 0 6
40710: RET
// export function WantPlant ( unit ) ; var task ; begin
40711: LD_INT 0
40713: PPUSH
40714: PPUSH
// result := false ;
40715: LD_ADDR_VAR 0 2
40719: PUSH
40720: LD_INT 0
40722: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40723: LD_ADDR_VAR 0 3
40727: PUSH
40728: LD_VAR 0 1
40732: PPUSH
40733: CALL_OW 437
40737: ST_TO_ADDR
// if task then
40738: LD_VAR 0 3
40742: IFFALSE 40770
// if task [ 1 ] [ 1 ] = p then
40744: LD_VAR 0 3
40748: PUSH
40749: LD_INT 1
40751: ARRAY
40752: PUSH
40753: LD_INT 1
40755: ARRAY
40756: PUSH
40757: LD_STRING p
40759: EQUAL
40760: IFFALSE 40770
// result := true ;
40762: LD_ADDR_VAR 0 2
40766: PUSH
40767: LD_INT 1
40769: ST_TO_ADDR
// end ;
40770: LD_VAR 0 2
40774: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40775: LD_INT 0
40777: PPUSH
40778: PPUSH
40779: PPUSH
40780: PPUSH
// if pos < 1 then
40781: LD_VAR 0 2
40785: PUSH
40786: LD_INT 1
40788: LESS
40789: IFFALSE 40793
// exit ;
40791: GO 41096
// if pos = 1 then
40793: LD_VAR 0 2
40797: PUSH
40798: LD_INT 1
40800: EQUAL
40801: IFFALSE 40834
// result := Replace ( arr , pos [ 1 ] , value ) else
40803: LD_ADDR_VAR 0 4
40807: PUSH
40808: LD_VAR 0 1
40812: PPUSH
40813: LD_VAR 0 2
40817: PUSH
40818: LD_INT 1
40820: ARRAY
40821: PPUSH
40822: LD_VAR 0 3
40826: PPUSH
40827: CALL_OW 1
40831: ST_TO_ADDR
40832: GO 41096
// begin tmp := arr ;
40834: LD_ADDR_VAR 0 6
40838: PUSH
40839: LD_VAR 0 1
40843: ST_TO_ADDR
// s_arr := [ tmp ] ;
40844: LD_ADDR_VAR 0 7
40848: PUSH
40849: LD_VAR 0 6
40853: PUSH
40854: EMPTY
40855: LIST
40856: ST_TO_ADDR
// for i = 1 to pos - 1 do
40857: LD_ADDR_VAR 0 5
40861: PUSH
40862: DOUBLE
40863: LD_INT 1
40865: DEC
40866: ST_TO_ADDR
40867: LD_VAR 0 2
40871: PUSH
40872: LD_INT 1
40874: MINUS
40875: PUSH
40876: FOR_TO
40877: IFFALSE 40922
// begin tmp := tmp [ pos [ i ] ] ;
40879: LD_ADDR_VAR 0 6
40883: PUSH
40884: LD_VAR 0 6
40888: PUSH
40889: LD_VAR 0 2
40893: PUSH
40894: LD_VAR 0 5
40898: ARRAY
40899: ARRAY
40900: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40901: LD_ADDR_VAR 0 7
40905: PUSH
40906: LD_VAR 0 7
40910: PUSH
40911: LD_VAR 0 6
40915: PUSH
40916: EMPTY
40917: LIST
40918: ADD
40919: ST_TO_ADDR
// end ;
40920: GO 40876
40922: POP
40923: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40924: LD_ADDR_VAR 0 6
40928: PUSH
40929: LD_VAR 0 6
40933: PPUSH
40934: LD_VAR 0 2
40938: PUSH
40939: LD_VAR 0 2
40943: ARRAY
40944: PPUSH
40945: LD_VAR 0 3
40949: PPUSH
40950: CALL_OW 1
40954: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40955: LD_ADDR_VAR 0 7
40959: PUSH
40960: LD_VAR 0 7
40964: PPUSH
40965: LD_VAR 0 7
40969: PPUSH
40970: LD_VAR 0 6
40974: PPUSH
40975: CALL_OW 1
40979: ST_TO_ADDR
// for i = s_arr downto 2 do
40980: LD_ADDR_VAR 0 5
40984: PUSH
40985: DOUBLE
40986: LD_VAR 0 7
40990: INC
40991: ST_TO_ADDR
40992: LD_INT 2
40994: PUSH
40995: FOR_DOWNTO
40996: IFFALSE 41080
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40998: LD_ADDR_VAR 0 6
41002: PUSH
41003: LD_VAR 0 7
41007: PUSH
41008: LD_VAR 0 5
41012: PUSH
41013: LD_INT 1
41015: MINUS
41016: ARRAY
41017: PPUSH
41018: LD_VAR 0 2
41022: PUSH
41023: LD_VAR 0 5
41027: PUSH
41028: LD_INT 1
41030: MINUS
41031: ARRAY
41032: PPUSH
41033: LD_VAR 0 7
41037: PUSH
41038: LD_VAR 0 5
41042: ARRAY
41043: PPUSH
41044: CALL_OW 1
41048: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41049: LD_ADDR_VAR 0 7
41053: PUSH
41054: LD_VAR 0 7
41058: PPUSH
41059: LD_VAR 0 5
41063: PUSH
41064: LD_INT 1
41066: MINUS
41067: PPUSH
41068: LD_VAR 0 6
41072: PPUSH
41073: CALL_OW 1
41077: ST_TO_ADDR
// end ;
41078: GO 40995
41080: POP
41081: POP
// result := s_arr [ 1 ] ;
41082: LD_ADDR_VAR 0 4
41086: PUSH
41087: LD_VAR 0 7
41091: PUSH
41092: LD_INT 1
41094: ARRAY
41095: ST_TO_ADDR
// end ; end ;
41096: LD_VAR 0 4
41100: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41101: LD_INT 0
41103: PPUSH
41104: PPUSH
// if not list then
41105: LD_VAR 0 1
41109: NOT
41110: IFFALSE 41114
// exit ;
41112: GO 41205
// i := list [ pos1 ] ;
41114: LD_ADDR_VAR 0 5
41118: PUSH
41119: LD_VAR 0 1
41123: PUSH
41124: LD_VAR 0 2
41128: ARRAY
41129: ST_TO_ADDR
// if not i then
41130: LD_VAR 0 5
41134: NOT
41135: IFFALSE 41139
// exit ;
41137: GO 41205
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41139: LD_ADDR_VAR 0 1
41143: PUSH
41144: LD_VAR 0 1
41148: PPUSH
41149: LD_VAR 0 2
41153: PPUSH
41154: LD_VAR 0 1
41158: PUSH
41159: LD_VAR 0 3
41163: ARRAY
41164: PPUSH
41165: CALL_OW 1
41169: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41170: LD_ADDR_VAR 0 1
41174: PUSH
41175: LD_VAR 0 1
41179: PPUSH
41180: LD_VAR 0 3
41184: PPUSH
41185: LD_VAR 0 5
41189: PPUSH
41190: CALL_OW 1
41194: ST_TO_ADDR
// result := list ;
41195: LD_ADDR_VAR 0 4
41199: PUSH
41200: LD_VAR 0 1
41204: ST_TO_ADDR
// end ;
41205: LD_VAR 0 4
41209: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41210: LD_INT 0
41212: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41213: LD_ADDR_VAR 0 5
41217: PUSH
41218: LD_VAR 0 1
41222: PPUSH
41223: CALL_OW 250
41227: PPUSH
41228: LD_VAR 0 1
41232: PPUSH
41233: CALL_OW 251
41237: PPUSH
41238: LD_VAR 0 2
41242: PPUSH
41243: LD_VAR 0 3
41247: PPUSH
41248: LD_VAR 0 4
41252: PPUSH
41253: CALL 41263 0 5
41257: ST_TO_ADDR
// end ;
41258: LD_VAR 0 5
41262: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41263: LD_INT 0
41265: PPUSH
41266: PPUSH
41267: PPUSH
41268: PPUSH
// if not list then
41269: LD_VAR 0 3
41273: NOT
41274: IFFALSE 41278
// exit ;
41276: GO 41666
// result := [ ] ;
41278: LD_ADDR_VAR 0 6
41282: PUSH
41283: EMPTY
41284: ST_TO_ADDR
// for i in list do
41285: LD_ADDR_VAR 0 7
41289: PUSH
41290: LD_VAR 0 3
41294: PUSH
41295: FOR_IN
41296: IFFALSE 41498
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41298: LD_ADDR_VAR 0 9
41302: PUSH
41303: LD_VAR 0 7
41307: PPUSH
41308: LD_VAR 0 1
41312: PPUSH
41313: LD_VAR 0 2
41317: PPUSH
41318: CALL_OW 297
41322: ST_TO_ADDR
// if not result then
41323: LD_VAR 0 6
41327: NOT
41328: IFFALSE 41354
// result := [ [ i , tmp ] ] else
41330: LD_ADDR_VAR 0 6
41334: PUSH
41335: LD_VAR 0 7
41339: PUSH
41340: LD_VAR 0 9
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: EMPTY
41350: LIST
41351: ST_TO_ADDR
41352: GO 41496
// begin if result [ result ] [ 2 ] < tmp then
41354: LD_VAR 0 6
41358: PUSH
41359: LD_VAR 0 6
41363: ARRAY
41364: PUSH
41365: LD_INT 2
41367: ARRAY
41368: PUSH
41369: LD_VAR 0 9
41373: LESS
41374: IFFALSE 41416
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41376: LD_ADDR_VAR 0 6
41380: PUSH
41381: LD_VAR 0 6
41385: PPUSH
41386: LD_VAR 0 6
41390: PUSH
41391: LD_INT 1
41393: PLUS
41394: PPUSH
41395: LD_VAR 0 7
41399: PUSH
41400: LD_VAR 0 9
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PPUSH
41409: CALL_OW 2
41413: ST_TO_ADDR
41414: GO 41496
// for j = 1 to result do
41416: LD_ADDR_VAR 0 8
41420: PUSH
41421: DOUBLE
41422: LD_INT 1
41424: DEC
41425: ST_TO_ADDR
41426: LD_VAR 0 6
41430: PUSH
41431: FOR_TO
41432: IFFALSE 41494
// begin if tmp < result [ j ] [ 2 ] then
41434: LD_VAR 0 9
41438: PUSH
41439: LD_VAR 0 6
41443: PUSH
41444: LD_VAR 0 8
41448: ARRAY
41449: PUSH
41450: LD_INT 2
41452: ARRAY
41453: LESS
41454: IFFALSE 41492
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41456: LD_ADDR_VAR 0 6
41460: PUSH
41461: LD_VAR 0 6
41465: PPUSH
41466: LD_VAR 0 8
41470: PPUSH
41471: LD_VAR 0 7
41475: PUSH
41476: LD_VAR 0 9
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PPUSH
41485: CALL_OW 2
41489: ST_TO_ADDR
// break ;
41490: GO 41494
// end ; end ;
41492: GO 41431
41494: POP
41495: POP
// end ; end ;
41496: GO 41295
41498: POP
41499: POP
// if result and not asc then
41500: LD_VAR 0 6
41504: PUSH
41505: LD_VAR 0 4
41509: NOT
41510: AND
41511: IFFALSE 41586
// begin tmp := result ;
41513: LD_ADDR_VAR 0 9
41517: PUSH
41518: LD_VAR 0 6
41522: ST_TO_ADDR
// for i = tmp downto 1 do
41523: LD_ADDR_VAR 0 7
41527: PUSH
41528: DOUBLE
41529: LD_VAR 0 9
41533: INC
41534: ST_TO_ADDR
41535: LD_INT 1
41537: PUSH
41538: FOR_DOWNTO
41539: IFFALSE 41584
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41541: LD_ADDR_VAR 0 6
41545: PUSH
41546: LD_VAR 0 6
41550: PPUSH
41551: LD_VAR 0 9
41555: PUSH
41556: LD_VAR 0 7
41560: MINUS
41561: PUSH
41562: LD_INT 1
41564: PLUS
41565: PPUSH
41566: LD_VAR 0 9
41570: PUSH
41571: LD_VAR 0 7
41575: ARRAY
41576: PPUSH
41577: CALL_OW 1
41581: ST_TO_ADDR
41582: GO 41538
41584: POP
41585: POP
// end ; tmp := [ ] ;
41586: LD_ADDR_VAR 0 9
41590: PUSH
41591: EMPTY
41592: ST_TO_ADDR
// if mode then
41593: LD_VAR 0 5
41597: IFFALSE 41666
// begin for i = 1 to result do
41599: LD_ADDR_VAR 0 7
41603: PUSH
41604: DOUBLE
41605: LD_INT 1
41607: DEC
41608: ST_TO_ADDR
41609: LD_VAR 0 6
41613: PUSH
41614: FOR_TO
41615: IFFALSE 41654
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41617: LD_ADDR_VAR 0 9
41621: PUSH
41622: LD_VAR 0 9
41626: PPUSH
41627: LD_VAR 0 7
41631: PPUSH
41632: LD_VAR 0 6
41636: PUSH
41637: LD_VAR 0 7
41641: ARRAY
41642: PUSH
41643: LD_INT 1
41645: ARRAY
41646: PPUSH
41647: CALL_OW 1
41651: ST_TO_ADDR
41652: GO 41614
41654: POP
41655: POP
// result := tmp ;
41656: LD_ADDR_VAR 0 6
41660: PUSH
41661: LD_VAR 0 9
41665: ST_TO_ADDR
// end ; end ;
41666: LD_VAR 0 6
41670: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41671: LD_INT 0
41673: PPUSH
41674: PPUSH
41675: PPUSH
41676: PPUSH
41677: PPUSH
41678: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41679: LD_ADDR_VAR 0 5
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: LD_INT 0
41692: PUSH
41693: EMPTY
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: ST_TO_ADDR
// if not x or not y then
41701: LD_VAR 0 2
41705: NOT
41706: PUSH
41707: LD_VAR 0 3
41711: NOT
41712: OR
41713: IFFALSE 41717
// exit ;
41715: GO 43363
// if not range then
41717: LD_VAR 0 4
41721: NOT
41722: IFFALSE 41732
// range := 10 ;
41724: LD_ADDR_VAR 0 4
41728: PUSH
41729: LD_INT 10
41731: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41732: LD_ADDR_VAR 0 8
41736: PUSH
41737: LD_INT 81
41739: PUSH
41740: LD_VAR 0 1
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 92
41751: PUSH
41752: LD_VAR 0 2
41756: PUSH
41757: LD_VAR 0 3
41761: PUSH
41762: LD_VAR 0 4
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 3
41775: PUSH
41776: LD_INT 21
41778: PUSH
41779: LD_INT 3
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: LIST
41794: PPUSH
41795: CALL_OW 69
41799: ST_TO_ADDR
// if not tmp then
41800: LD_VAR 0 8
41804: NOT
41805: IFFALSE 41809
// exit ;
41807: GO 43363
// for i in tmp do
41809: LD_ADDR_VAR 0 6
41813: PUSH
41814: LD_VAR 0 8
41818: PUSH
41819: FOR_IN
41820: IFFALSE 43338
// begin points := [ 0 , 0 , 0 ] ;
41822: LD_ADDR_VAR 0 9
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: ST_TO_ADDR
// bpoints := 1 ;
41841: LD_ADDR_VAR 0 10
41845: PUSH
41846: LD_INT 1
41848: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41849: LD_VAR 0 6
41853: PPUSH
41854: CALL_OW 247
41858: PUSH
41859: LD_INT 1
41861: DOUBLE
41862: EQUAL
41863: IFTRUE 41867
41865: GO 42445
41867: POP
// begin if GetClass ( i ) = 1 then
41868: LD_VAR 0 6
41872: PPUSH
41873: CALL_OW 257
41877: PUSH
41878: LD_INT 1
41880: EQUAL
41881: IFFALSE 41902
// points := [ 10 , 5 , 3 ] ;
41883: LD_ADDR_VAR 0 9
41887: PUSH
41888: LD_INT 10
41890: PUSH
41891: LD_INT 5
41893: PUSH
41894: LD_INT 3
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: LIST
41901: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41902: LD_VAR 0 6
41906: PPUSH
41907: CALL_OW 257
41911: PUSH
41912: LD_INT 2
41914: PUSH
41915: LD_INT 3
41917: PUSH
41918: LD_INT 4
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: LIST
41925: IN
41926: IFFALSE 41947
// points := [ 3 , 2 , 1 ] ;
41928: LD_ADDR_VAR 0 9
41932: PUSH
41933: LD_INT 3
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: LIST
41946: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41947: LD_VAR 0 6
41951: PPUSH
41952: CALL_OW 257
41956: PUSH
41957: LD_INT 5
41959: EQUAL
41960: IFFALSE 41981
// points := [ 130 , 5 , 2 ] ;
41962: LD_ADDR_VAR 0 9
41966: PUSH
41967: LD_INT 130
41969: PUSH
41970: LD_INT 5
41972: PUSH
41973: LD_INT 2
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: LIST
41980: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41981: LD_VAR 0 6
41985: PPUSH
41986: CALL_OW 257
41990: PUSH
41991: LD_INT 8
41993: EQUAL
41994: IFFALSE 42015
// points := [ 35 , 35 , 30 ] ;
41996: LD_ADDR_VAR 0 9
42000: PUSH
42001: LD_INT 35
42003: PUSH
42004: LD_INT 35
42006: PUSH
42007: LD_INT 30
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: LIST
42014: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42015: LD_VAR 0 6
42019: PPUSH
42020: CALL_OW 257
42024: PUSH
42025: LD_INT 9
42027: EQUAL
42028: IFFALSE 42049
// points := [ 20 , 55 , 40 ] ;
42030: LD_ADDR_VAR 0 9
42034: PUSH
42035: LD_INT 20
42037: PUSH
42038: LD_INT 55
42040: PUSH
42041: LD_INT 40
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: LIST
42048: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42049: LD_VAR 0 6
42053: PPUSH
42054: CALL_OW 257
42058: PUSH
42059: LD_INT 12
42061: PUSH
42062: LD_INT 16
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: IN
42069: IFFALSE 42090
// points := [ 5 , 3 , 2 ] ;
42071: LD_ADDR_VAR 0 9
42075: PUSH
42076: LD_INT 5
42078: PUSH
42079: LD_INT 3
42081: PUSH
42082: LD_INT 2
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: LIST
42089: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42090: LD_VAR 0 6
42094: PPUSH
42095: CALL_OW 257
42099: PUSH
42100: LD_INT 17
42102: EQUAL
42103: IFFALSE 42124
// points := [ 100 , 50 , 75 ] ;
42105: LD_ADDR_VAR 0 9
42109: PUSH
42110: LD_INT 100
42112: PUSH
42113: LD_INT 50
42115: PUSH
42116: LD_INT 75
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: LIST
42123: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42124: LD_VAR 0 6
42128: PPUSH
42129: CALL_OW 257
42133: PUSH
42134: LD_INT 15
42136: EQUAL
42137: IFFALSE 42158
// points := [ 10 , 5 , 3 ] ;
42139: LD_ADDR_VAR 0 9
42143: PUSH
42144: LD_INT 10
42146: PUSH
42147: LD_INT 5
42149: PUSH
42150: LD_INT 3
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: LIST
42157: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42158: LD_VAR 0 6
42162: PPUSH
42163: CALL_OW 257
42167: PUSH
42168: LD_INT 14
42170: EQUAL
42171: IFFALSE 42192
// points := [ 10 , 0 , 0 ] ;
42173: LD_ADDR_VAR 0 9
42177: PUSH
42178: LD_INT 10
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: LIST
42191: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42192: LD_VAR 0 6
42196: PPUSH
42197: CALL_OW 257
42201: PUSH
42202: LD_INT 11
42204: EQUAL
42205: IFFALSE 42226
// points := [ 30 , 10 , 5 ] ;
42207: LD_ADDR_VAR 0 9
42211: PUSH
42212: LD_INT 30
42214: PUSH
42215: LD_INT 10
42217: PUSH
42218: LD_INT 5
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: LIST
42225: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42226: LD_VAR 0 1
42230: PPUSH
42231: LD_INT 5
42233: PPUSH
42234: CALL_OW 321
42238: PUSH
42239: LD_INT 2
42241: EQUAL
42242: IFFALSE 42259
// bpoints := bpoints * 1.8 ;
42244: LD_ADDR_VAR 0 10
42248: PUSH
42249: LD_VAR 0 10
42253: PUSH
42254: LD_REAL  1.80000000000000E+0000
42257: MUL
42258: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42259: LD_VAR 0 6
42263: PPUSH
42264: CALL_OW 257
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: LD_INT 2
42274: PUSH
42275: LD_INT 3
42277: PUSH
42278: LD_INT 4
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: IN
42287: PUSH
42288: LD_VAR 0 1
42292: PPUSH
42293: LD_INT 51
42295: PPUSH
42296: CALL_OW 321
42300: PUSH
42301: LD_INT 2
42303: EQUAL
42304: AND
42305: IFFALSE 42322
// bpoints := bpoints * 1.2 ;
42307: LD_ADDR_VAR 0 10
42311: PUSH
42312: LD_VAR 0 10
42316: PUSH
42317: LD_REAL  1.20000000000000E+0000
42320: MUL
42321: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42322: LD_VAR 0 6
42326: PPUSH
42327: CALL_OW 257
42331: PUSH
42332: LD_INT 5
42334: PUSH
42335: LD_INT 7
42337: PUSH
42338: LD_INT 9
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: LIST
42345: IN
42346: PUSH
42347: LD_VAR 0 1
42351: PPUSH
42352: LD_INT 52
42354: PPUSH
42355: CALL_OW 321
42359: PUSH
42360: LD_INT 2
42362: EQUAL
42363: AND
42364: IFFALSE 42381
// bpoints := bpoints * 1.5 ;
42366: LD_ADDR_VAR 0 10
42370: PUSH
42371: LD_VAR 0 10
42375: PUSH
42376: LD_REAL  1.50000000000000E+0000
42379: MUL
42380: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42381: LD_VAR 0 1
42385: PPUSH
42386: LD_INT 66
42388: PPUSH
42389: CALL_OW 321
42393: PUSH
42394: LD_INT 2
42396: EQUAL
42397: IFFALSE 42414
// bpoints := bpoints * 1.1 ;
42399: LD_ADDR_VAR 0 10
42403: PUSH
42404: LD_VAR 0 10
42408: PUSH
42409: LD_REAL  1.10000000000000E+0000
42412: MUL
42413: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42414: LD_ADDR_VAR 0 10
42418: PUSH
42419: LD_VAR 0 10
42423: PUSH
42424: LD_VAR 0 6
42428: PPUSH
42429: LD_INT 1
42431: PPUSH
42432: CALL_OW 259
42436: PUSH
42437: LD_REAL  1.15000000000000E+0000
42440: MUL
42441: MUL
42442: ST_TO_ADDR
// end ; unit_vehicle :
42443: GO 43267
42445: LD_INT 2
42447: DOUBLE
42448: EQUAL
42449: IFTRUE 42453
42451: GO 43255
42453: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42454: LD_VAR 0 6
42458: PPUSH
42459: CALL_OW 264
42463: PUSH
42464: LD_INT 2
42466: PUSH
42467: LD_INT 42
42469: PUSH
42470: LD_INT 24
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: LIST
42477: IN
42478: IFFALSE 42499
// points := [ 25 , 5 , 3 ] ;
42480: LD_ADDR_VAR 0 9
42484: PUSH
42485: LD_INT 25
42487: PUSH
42488: LD_INT 5
42490: PUSH
42491: LD_INT 3
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: LIST
42498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42499: LD_VAR 0 6
42503: PPUSH
42504: CALL_OW 264
42508: PUSH
42509: LD_INT 4
42511: PUSH
42512: LD_INT 43
42514: PUSH
42515: LD_INT 25
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: LIST
42522: IN
42523: IFFALSE 42544
// points := [ 40 , 15 , 5 ] ;
42525: LD_ADDR_VAR 0 9
42529: PUSH
42530: LD_INT 40
42532: PUSH
42533: LD_INT 15
42535: PUSH
42536: LD_INT 5
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: LIST
42543: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42544: LD_VAR 0 6
42548: PPUSH
42549: CALL_OW 264
42553: PUSH
42554: LD_INT 3
42556: PUSH
42557: LD_INT 23
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: IN
42564: IFFALSE 42585
// points := [ 7 , 25 , 8 ] ;
42566: LD_ADDR_VAR 0 9
42570: PUSH
42571: LD_INT 7
42573: PUSH
42574: LD_INT 25
42576: PUSH
42577: LD_INT 8
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: LIST
42584: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42585: LD_VAR 0 6
42589: PPUSH
42590: CALL_OW 264
42594: PUSH
42595: LD_INT 5
42597: PUSH
42598: LD_INT 27
42600: PUSH
42601: LD_INT 44
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: LIST
42608: IN
42609: IFFALSE 42630
// points := [ 14 , 50 , 16 ] ;
42611: LD_ADDR_VAR 0 9
42615: PUSH
42616: LD_INT 14
42618: PUSH
42619: LD_INT 50
42621: PUSH
42622: LD_INT 16
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: LIST
42629: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42630: LD_VAR 0 6
42634: PPUSH
42635: CALL_OW 264
42639: PUSH
42640: LD_INT 6
42642: PUSH
42643: LD_INT 46
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: IN
42650: IFFALSE 42671
// points := [ 32 , 120 , 70 ] ;
42652: LD_ADDR_VAR 0 9
42656: PUSH
42657: LD_INT 32
42659: PUSH
42660: LD_INT 120
42662: PUSH
42663: LD_INT 70
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: LIST
42670: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
42671: LD_VAR 0 6
42675: PPUSH
42676: CALL_OW 264
42680: PUSH
42681: LD_INT 7
42683: PUSH
42684: LD_INT 28
42686: PUSH
42687: LD_INT 45
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: LIST
42694: IN
42695: IFFALSE 42716
// points := [ 35 , 20 , 45 ] ;
42697: LD_ADDR_VAR 0 9
42701: PUSH
42702: LD_INT 35
42704: PUSH
42705: LD_INT 20
42707: PUSH
42708: LD_INT 45
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: LIST
42715: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42716: LD_VAR 0 6
42720: PPUSH
42721: CALL_OW 264
42725: PUSH
42726: LD_INT 47
42728: PUSH
42729: EMPTY
42730: LIST
42731: IN
42732: IFFALSE 42753
// points := [ 67 , 45 , 75 ] ;
42734: LD_ADDR_VAR 0 9
42738: PUSH
42739: LD_INT 67
42741: PUSH
42742: LD_INT 45
42744: PUSH
42745: LD_INT 75
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: LIST
42752: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42753: LD_VAR 0 6
42757: PPUSH
42758: CALL_OW 264
42762: PUSH
42763: LD_INT 26
42765: PUSH
42766: EMPTY
42767: LIST
42768: IN
42769: IFFALSE 42790
// points := [ 120 , 30 , 80 ] ;
42771: LD_ADDR_VAR 0 9
42775: PUSH
42776: LD_INT 120
42778: PUSH
42779: LD_INT 30
42781: PUSH
42782: LD_INT 80
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: LIST
42789: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42790: LD_VAR 0 6
42794: PPUSH
42795: CALL_OW 264
42799: PUSH
42800: LD_INT 22
42802: PUSH
42803: EMPTY
42804: LIST
42805: IN
42806: IFFALSE 42827
// points := [ 40 , 1 , 1 ] ;
42808: LD_ADDR_VAR 0 9
42812: PUSH
42813: LD_INT 40
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: LIST
42826: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42827: LD_VAR 0 6
42831: PPUSH
42832: CALL_OW 264
42836: PUSH
42837: LD_INT 29
42839: PUSH
42840: EMPTY
42841: LIST
42842: IN
42843: IFFALSE 42864
// points := [ 70 , 200 , 400 ] ;
42845: LD_ADDR_VAR 0 9
42849: PUSH
42850: LD_INT 70
42852: PUSH
42853: LD_INT 200
42855: PUSH
42856: LD_INT 400
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: LIST
42863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42864: LD_VAR 0 6
42868: PPUSH
42869: CALL_OW 264
42873: PUSH
42874: LD_INT 14
42876: PUSH
42877: LD_INT 53
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: IN
42884: IFFALSE 42905
// points := [ 40 , 10 , 20 ] ;
42886: LD_ADDR_VAR 0 9
42890: PUSH
42891: LD_INT 40
42893: PUSH
42894: LD_INT 10
42896: PUSH
42897: LD_INT 20
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: LIST
42904: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42905: LD_VAR 0 6
42909: PPUSH
42910: CALL_OW 264
42914: PUSH
42915: LD_INT 9
42917: PUSH
42918: EMPTY
42919: LIST
42920: IN
42921: IFFALSE 42942
// points := [ 5 , 70 , 20 ] ;
42923: LD_ADDR_VAR 0 9
42927: PUSH
42928: LD_INT 5
42930: PUSH
42931: LD_INT 70
42933: PUSH
42934: LD_INT 20
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: LIST
42941: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42942: LD_VAR 0 6
42946: PPUSH
42947: CALL_OW 264
42951: PUSH
42952: LD_INT 10
42954: PUSH
42955: EMPTY
42956: LIST
42957: IN
42958: IFFALSE 42979
// points := [ 35 , 110 , 70 ] ;
42960: LD_ADDR_VAR 0 9
42964: PUSH
42965: LD_INT 35
42967: PUSH
42968: LD_INT 110
42970: PUSH
42971: LD_INT 70
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: LIST
42978: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42979: LD_VAR 0 6
42983: PPUSH
42984: CALL_OW 265
42988: PUSH
42989: LD_INT 25
42991: EQUAL
42992: IFFALSE 43013
// points := [ 80 , 65 , 100 ] ;
42994: LD_ADDR_VAR 0 9
42998: PUSH
42999: LD_INT 80
43001: PUSH
43002: LD_INT 65
43004: PUSH
43005: LD_INT 100
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: LIST
43012: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43013: LD_VAR 0 6
43017: PPUSH
43018: CALL_OW 263
43022: PUSH
43023: LD_INT 1
43025: EQUAL
43026: IFFALSE 43061
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43028: LD_ADDR_VAR 0 10
43032: PUSH
43033: LD_VAR 0 10
43037: PUSH
43038: LD_VAR 0 6
43042: PPUSH
43043: CALL_OW 311
43047: PPUSH
43048: LD_INT 3
43050: PPUSH
43051: CALL_OW 259
43055: PUSH
43056: LD_INT 4
43058: MUL
43059: MUL
43060: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43061: LD_VAR 0 6
43065: PPUSH
43066: CALL_OW 263
43070: PUSH
43071: LD_INT 2
43073: EQUAL
43074: IFFALSE 43125
// begin j := IsControledBy ( i ) ;
43076: LD_ADDR_VAR 0 7
43080: PUSH
43081: LD_VAR 0 6
43085: PPUSH
43086: CALL_OW 312
43090: ST_TO_ADDR
// if j then
43091: LD_VAR 0 7
43095: IFFALSE 43125
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43097: LD_ADDR_VAR 0 10
43101: PUSH
43102: LD_VAR 0 10
43106: PUSH
43107: LD_VAR 0 7
43111: PPUSH
43112: LD_INT 3
43114: PPUSH
43115: CALL_OW 259
43119: PUSH
43120: LD_INT 3
43122: MUL
43123: MUL
43124: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43125: LD_VAR 0 6
43129: PPUSH
43130: CALL_OW 264
43134: PUSH
43135: LD_INT 5
43137: PUSH
43138: LD_INT 6
43140: PUSH
43141: LD_INT 46
43143: PUSH
43144: LD_INT 44
43146: PUSH
43147: LD_INT 47
43149: PUSH
43150: LD_INT 45
43152: PUSH
43153: LD_INT 28
43155: PUSH
43156: LD_INT 7
43158: PUSH
43159: LD_INT 27
43161: PUSH
43162: LD_INT 29
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: IN
43177: PUSH
43178: LD_VAR 0 1
43182: PPUSH
43183: LD_INT 52
43185: PPUSH
43186: CALL_OW 321
43190: PUSH
43191: LD_INT 2
43193: EQUAL
43194: AND
43195: IFFALSE 43212
// bpoints := bpoints * 1.2 ;
43197: LD_ADDR_VAR 0 10
43201: PUSH
43202: LD_VAR 0 10
43206: PUSH
43207: LD_REAL  1.20000000000000E+0000
43210: MUL
43211: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43212: LD_VAR 0 6
43216: PPUSH
43217: CALL_OW 264
43221: PUSH
43222: LD_INT 6
43224: PUSH
43225: LD_INT 46
43227: PUSH
43228: LD_INT 47
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: LIST
43235: IN
43236: IFFALSE 43253
// bpoints := bpoints * 1.2 ;
43238: LD_ADDR_VAR 0 10
43242: PUSH
43243: LD_VAR 0 10
43247: PUSH
43248: LD_REAL  1.20000000000000E+0000
43251: MUL
43252: ST_TO_ADDR
// end ; unit_building :
43253: GO 43267
43255: LD_INT 3
43257: DOUBLE
43258: EQUAL
43259: IFTRUE 43263
43261: GO 43266
43263: POP
// ; end ;
43264: GO 43267
43266: POP
// for j = 1 to 3 do
43267: LD_ADDR_VAR 0 7
43271: PUSH
43272: DOUBLE
43273: LD_INT 1
43275: DEC
43276: ST_TO_ADDR
43277: LD_INT 3
43279: PUSH
43280: FOR_TO
43281: IFFALSE 43334
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43283: LD_ADDR_VAR 0 5
43287: PUSH
43288: LD_VAR 0 5
43292: PPUSH
43293: LD_VAR 0 7
43297: PPUSH
43298: LD_VAR 0 5
43302: PUSH
43303: LD_VAR 0 7
43307: ARRAY
43308: PUSH
43309: LD_VAR 0 9
43313: PUSH
43314: LD_VAR 0 7
43318: ARRAY
43319: PUSH
43320: LD_VAR 0 10
43324: MUL
43325: PLUS
43326: PPUSH
43327: CALL_OW 1
43331: ST_TO_ADDR
43332: GO 43280
43334: POP
43335: POP
// end ;
43336: GO 41819
43338: POP
43339: POP
// result := Replace ( result , 4 , tmp ) ;
43340: LD_ADDR_VAR 0 5
43344: PUSH
43345: LD_VAR 0 5
43349: PPUSH
43350: LD_INT 4
43352: PPUSH
43353: LD_VAR 0 8
43357: PPUSH
43358: CALL_OW 1
43362: ST_TO_ADDR
// end ;
43363: LD_VAR 0 5
43367: RET
// export function DangerAtRange ( unit , range ) ; begin
43368: LD_INT 0
43370: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43371: LD_ADDR_VAR 0 3
43375: PUSH
43376: LD_VAR 0 1
43380: PPUSH
43381: CALL_OW 255
43385: PPUSH
43386: LD_VAR 0 1
43390: PPUSH
43391: CALL_OW 250
43395: PPUSH
43396: LD_VAR 0 1
43400: PPUSH
43401: CALL_OW 251
43405: PPUSH
43406: LD_VAR 0 2
43410: PPUSH
43411: CALL 41671 0 4
43415: ST_TO_ADDR
// end ;
43416: LD_VAR 0 3
43420: RET
// export function DangerInArea ( side , area ) ; begin
43421: LD_INT 0
43423: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43424: LD_ADDR_VAR 0 3
43428: PUSH
43429: LD_VAR 0 2
43433: PPUSH
43434: LD_INT 81
43436: PUSH
43437: LD_VAR 0 1
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PPUSH
43446: CALL_OW 70
43450: ST_TO_ADDR
// end ;
43451: LD_VAR 0 3
43455: RET
// export function IsExtension ( b ) ; begin
43456: LD_INT 0
43458: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43459: LD_ADDR_VAR 0 2
43463: PUSH
43464: LD_VAR 0 1
43468: PUSH
43469: LD_INT 23
43471: PUSH
43472: LD_INT 20
43474: PUSH
43475: LD_INT 22
43477: PUSH
43478: LD_INT 17
43480: PUSH
43481: LD_INT 24
43483: PUSH
43484: LD_INT 21
43486: PUSH
43487: LD_INT 19
43489: PUSH
43490: LD_INT 16
43492: PUSH
43493: LD_INT 25
43495: PUSH
43496: LD_INT 18
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: IN
43511: ST_TO_ADDR
// end ;
43512: LD_VAR 0 2
43516: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
43517: LD_INT 0
43519: PPUSH
43520: PPUSH
43521: PPUSH
// result := [ ] ;
43522: LD_ADDR_VAR 0 3
43526: PUSH
43527: EMPTY
43528: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43529: LD_ADDR_VAR 0 4
43533: PUSH
43534: LD_VAR 0 2
43538: PPUSH
43539: LD_INT 21
43541: PUSH
43542: LD_INT 3
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PPUSH
43549: CALL_OW 70
43553: ST_TO_ADDR
// if not tmp then
43554: LD_VAR 0 4
43558: NOT
43559: IFFALSE 43563
// exit ;
43561: GO 43621
// for i in tmp do
43563: LD_ADDR_VAR 0 5
43567: PUSH
43568: LD_VAR 0 4
43572: PUSH
43573: FOR_IN
43574: IFFALSE 43609
// if GetBase ( i ) <> base then
43576: LD_VAR 0 5
43580: PPUSH
43581: CALL_OW 274
43585: PUSH
43586: LD_VAR 0 1
43590: NONEQUAL
43591: IFFALSE 43607
// ComLinkToBase ( base , i ) ;
43593: LD_VAR 0 1
43597: PPUSH
43598: LD_VAR 0 5
43602: PPUSH
43603: CALL_OW 169
43607: GO 43573
43609: POP
43610: POP
// result := tmp ;
43611: LD_ADDR_VAR 0 3
43615: PUSH
43616: LD_VAR 0 4
43620: ST_TO_ADDR
// end ;
43621: LD_VAR 0 3
43625: RET
// export function ComComplete ( unit , b ) ; var i ; begin
43626: LD_INT 0
43628: PPUSH
43629: PPUSH
// if BuildingStatus ( b ) = bs_build then
43630: LD_VAR 0 2
43634: PPUSH
43635: CALL_OW 461
43639: PUSH
43640: LD_INT 1
43642: EQUAL
43643: IFFALSE 43703
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43645: LD_VAR 0 1
43649: PPUSH
43650: LD_STRING h
43652: PUSH
43653: LD_VAR 0 2
43657: PPUSH
43658: CALL_OW 250
43662: PUSH
43663: LD_VAR 0 2
43667: PPUSH
43668: CALL_OW 251
43672: PUSH
43673: LD_VAR 0 2
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: PUSH
43696: EMPTY
43697: LIST
43698: PPUSH
43699: CALL_OW 446
// end ;
43703: LD_VAR 0 3
43707: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43708: LD_INT 0
43710: PPUSH
43711: PPUSH
43712: PPUSH
43713: PPUSH
43714: PPUSH
43715: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
43716: LD_VAR 0 1
43720: NOT
43721: PUSH
43722: LD_VAR 0 1
43726: PPUSH
43727: CALL_OW 263
43731: PUSH
43732: LD_INT 2
43734: EQUAL
43735: NOT
43736: OR
43737: IFFALSE 43741
// exit ;
43739: GO 44057
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43741: LD_ADDR_VAR 0 6
43745: PUSH
43746: LD_INT 22
43748: PUSH
43749: LD_VAR 0 1
43753: PPUSH
43754: CALL_OW 255
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 2
43765: PUSH
43766: LD_INT 30
43768: PUSH
43769: LD_INT 36
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 34
43778: PUSH
43779: LD_INT 31
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: LIST
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PPUSH
43795: CALL_OW 69
43799: ST_TO_ADDR
// if not tmp then
43800: LD_VAR 0 6
43804: NOT
43805: IFFALSE 43809
// exit ;
43807: GO 44057
// result := [ ] ;
43809: LD_ADDR_VAR 0 2
43813: PUSH
43814: EMPTY
43815: ST_TO_ADDR
// for i in tmp do
43816: LD_ADDR_VAR 0 3
43820: PUSH
43821: LD_VAR 0 6
43825: PUSH
43826: FOR_IN
43827: IFFALSE 43898
// begin t := UnitsInside ( i ) ;
43829: LD_ADDR_VAR 0 4
43833: PUSH
43834: LD_VAR 0 3
43838: PPUSH
43839: CALL_OW 313
43843: ST_TO_ADDR
// if t then
43844: LD_VAR 0 4
43848: IFFALSE 43896
// for j in t do
43850: LD_ADDR_VAR 0 7
43854: PUSH
43855: LD_VAR 0 4
43859: PUSH
43860: FOR_IN
43861: IFFALSE 43894
// result := Insert ( result , result + 1 , j ) ;
43863: LD_ADDR_VAR 0 2
43867: PUSH
43868: LD_VAR 0 2
43872: PPUSH
43873: LD_VAR 0 2
43877: PUSH
43878: LD_INT 1
43880: PLUS
43881: PPUSH
43882: LD_VAR 0 7
43886: PPUSH
43887: CALL_OW 2
43891: ST_TO_ADDR
43892: GO 43860
43894: POP
43895: POP
// end ;
43896: GO 43826
43898: POP
43899: POP
// if not result then
43900: LD_VAR 0 2
43904: NOT
43905: IFFALSE 43909
// exit ;
43907: GO 44057
// mech := result [ 1 ] ;
43909: LD_ADDR_VAR 0 5
43913: PUSH
43914: LD_VAR 0 2
43918: PUSH
43919: LD_INT 1
43921: ARRAY
43922: ST_TO_ADDR
// if result > 1 then
43923: LD_VAR 0 2
43927: PUSH
43928: LD_INT 1
43930: GREATER
43931: IFFALSE 44043
// for i = 2 to result do
43933: LD_ADDR_VAR 0 3
43937: PUSH
43938: DOUBLE
43939: LD_INT 2
43941: DEC
43942: ST_TO_ADDR
43943: LD_VAR 0 2
43947: PUSH
43948: FOR_TO
43949: IFFALSE 44041
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43951: LD_ADDR_VAR 0 4
43955: PUSH
43956: LD_VAR 0 2
43960: PUSH
43961: LD_VAR 0 3
43965: ARRAY
43966: PPUSH
43967: LD_INT 3
43969: PPUSH
43970: CALL_OW 259
43974: PUSH
43975: LD_VAR 0 2
43979: PUSH
43980: LD_VAR 0 3
43984: ARRAY
43985: PPUSH
43986: CALL_OW 432
43990: MINUS
43991: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43992: LD_VAR 0 4
43996: PUSH
43997: LD_VAR 0 5
44001: PPUSH
44002: LD_INT 3
44004: PPUSH
44005: CALL_OW 259
44009: PUSH
44010: LD_VAR 0 5
44014: PPUSH
44015: CALL_OW 432
44019: MINUS
44020: GREATEREQUAL
44021: IFFALSE 44039
// mech := result [ i ] ;
44023: LD_ADDR_VAR 0 5
44027: PUSH
44028: LD_VAR 0 2
44032: PUSH
44033: LD_VAR 0 3
44037: ARRAY
44038: ST_TO_ADDR
// end ;
44039: GO 43948
44041: POP
44042: POP
// ComLinkTo ( vehicle , mech ) ;
44043: LD_VAR 0 1
44047: PPUSH
44048: LD_VAR 0 5
44052: PPUSH
44053: CALL_OW 135
// end ;
44057: LD_VAR 0 2
44061: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44062: LD_INT 0
44064: PPUSH
44065: PPUSH
44066: PPUSH
44067: PPUSH
44068: PPUSH
44069: PPUSH
44070: PPUSH
44071: PPUSH
44072: PPUSH
44073: PPUSH
44074: PPUSH
44075: PPUSH
44076: PPUSH
// result := [ ] ;
44077: LD_ADDR_VAR 0 7
44081: PUSH
44082: EMPTY
44083: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44084: LD_VAR 0 1
44088: PPUSH
44089: CALL_OW 266
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: IN
44104: NOT
44105: IFFALSE 44109
// exit ;
44107: GO 45740
// if name then
44109: LD_VAR 0 3
44113: IFFALSE 44129
// SetBName ( base_dep , name ) ;
44115: LD_VAR 0 1
44119: PPUSH
44120: LD_VAR 0 3
44124: PPUSH
44125: CALL_OW 500
// base := GetBase ( base_dep ) ;
44129: LD_ADDR_VAR 0 15
44133: PUSH
44134: LD_VAR 0 1
44138: PPUSH
44139: CALL_OW 274
44143: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44144: LD_ADDR_VAR 0 16
44148: PUSH
44149: LD_VAR 0 1
44153: PPUSH
44154: CALL_OW 255
44158: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44159: LD_ADDR_VAR 0 17
44163: PUSH
44164: LD_VAR 0 1
44168: PPUSH
44169: CALL_OW 248
44173: ST_TO_ADDR
// if sources then
44174: LD_VAR 0 5
44178: IFFALSE 44225
// for i = 1 to 3 do
44180: LD_ADDR_VAR 0 8
44184: PUSH
44185: DOUBLE
44186: LD_INT 1
44188: DEC
44189: ST_TO_ADDR
44190: LD_INT 3
44192: PUSH
44193: FOR_TO
44194: IFFALSE 44223
// AddResourceType ( base , i , sources [ i ] ) ;
44196: LD_VAR 0 15
44200: PPUSH
44201: LD_VAR 0 8
44205: PPUSH
44206: LD_VAR 0 5
44210: PUSH
44211: LD_VAR 0 8
44215: ARRAY
44216: PPUSH
44217: CALL_OW 276
44221: GO 44193
44223: POP
44224: POP
// buildings := GetBaseBuildings ( base , area ) ;
44225: LD_ADDR_VAR 0 18
44229: PUSH
44230: LD_VAR 0 15
44234: PPUSH
44235: LD_VAR 0 2
44239: PPUSH
44240: CALL 43517 0 2
44244: ST_TO_ADDR
// InitHc ;
44245: CALL_OW 19
// InitUc ;
44249: CALL_OW 18
// uc_side := side ;
44253: LD_ADDR_OWVAR 20
44257: PUSH
44258: LD_VAR 0 16
44262: ST_TO_ADDR
// uc_nation := nation ;
44263: LD_ADDR_OWVAR 21
44267: PUSH
44268: LD_VAR 0 17
44272: ST_TO_ADDR
// if buildings then
44273: LD_VAR 0 18
44277: IFFALSE 45599
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44279: LD_ADDR_VAR 0 19
44283: PUSH
44284: LD_VAR 0 18
44288: PPUSH
44289: LD_INT 2
44291: PUSH
44292: LD_INT 30
44294: PUSH
44295: LD_INT 29
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 30
44304: PUSH
44305: LD_INT 30
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: LIST
44316: PPUSH
44317: CALL_OW 72
44321: ST_TO_ADDR
// if tmp then
44322: LD_VAR 0 19
44326: IFFALSE 44374
// for i in tmp do
44328: LD_ADDR_VAR 0 8
44332: PUSH
44333: LD_VAR 0 19
44337: PUSH
44338: FOR_IN
44339: IFFALSE 44372
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44341: LD_VAR 0 8
44345: PPUSH
44346: CALL_OW 250
44350: PPUSH
44351: LD_VAR 0 8
44355: PPUSH
44356: CALL_OW 251
44360: PPUSH
44361: LD_VAR 0 16
44365: PPUSH
44366: CALL_OW 441
44370: GO 44338
44372: POP
44373: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44374: LD_VAR 0 18
44378: PPUSH
44379: LD_INT 2
44381: PUSH
44382: LD_INT 30
44384: PUSH
44385: LD_INT 32
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 30
44394: PUSH
44395: LD_INT 33
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: LIST
44406: PPUSH
44407: CALL_OW 72
44411: IFFALSE 44499
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44413: LD_ADDR_VAR 0 8
44417: PUSH
44418: LD_VAR 0 18
44422: PPUSH
44423: LD_INT 2
44425: PUSH
44426: LD_INT 30
44428: PUSH
44429: LD_INT 32
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 30
44438: PUSH
44439: LD_INT 33
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: LIST
44450: PPUSH
44451: CALL_OW 72
44455: PUSH
44456: FOR_IN
44457: IFFALSE 44497
// begin if not GetBWeapon ( i ) then
44459: LD_VAR 0 8
44463: PPUSH
44464: CALL_OW 269
44468: NOT
44469: IFFALSE 44495
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44471: LD_VAR 0 8
44475: PPUSH
44476: LD_VAR 0 8
44480: PPUSH
44481: LD_VAR 0 2
44485: PPUSH
44486: CALL 45745 0 2
44490: PPUSH
44491: CALL_OW 431
// end ;
44495: GO 44456
44497: POP
44498: POP
// end ; for i = 1 to personel do
44499: LD_ADDR_VAR 0 8
44503: PUSH
44504: DOUBLE
44505: LD_INT 1
44507: DEC
44508: ST_TO_ADDR
44509: LD_VAR 0 6
44513: PUSH
44514: FOR_TO
44515: IFFALSE 45579
// begin if i > 4 then
44517: LD_VAR 0 8
44521: PUSH
44522: LD_INT 4
44524: GREATER
44525: IFFALSE 44529
// break ;
44527: GO 45579
// case i of 1 :
44529: LD_VAR 0 8
44533: PUSH
44534: LD_INT 1
44536: DOUBLE
44537: EQUAL
44538: IFTRUE 44542
44540: GO 44622
44542: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44543: LD_ADDR_VAR 0 12
44547: PUSH
44548: LD_VAR 0 18
44552: PPUSH
44553: LD_INT 22
44555: PUSH
44556: LD_VAR 0 16
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 58
44567: PUSH
44568: EMPTY
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: LD_INT 30
44576: PUSH
44577: LD_INT 32
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 30
44586: PUSH
44587: LD_INT 4
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 30
44596: PUSH
44597: LD_INT 5
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: LIST
44614: PPUSH
44615: CALL_OW 72
44619: ST_TO_ADDR
44620: GO 44844
44622: LD_INT 2
44624: DOUBLE
44625: EQUAL
44626: IFTRUE 44630
44628: GO 44692
44630: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44631: LD_ADDR_VAR 0 12
44635: PUSH
44636: LD_VAR 0 18
44640: PPUSH
44641: LD_INT 22
44643: PUSH
44644: LD_VAR 0 16
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: LD_INT 30
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 30
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: LIST
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PPUSH
44685: CALL_OW 72
44689: ST_TO_ADDR
44690: GO 44844
44692: LD_INT 3
44694: DOUBLE
44695: EQUAL
44696: IFTRUE 44700
44698: GO 44762
44700: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44701: LD_ADDR_VAR 0 12
44705: PUSH
44706: LD_VAR 0 18
44710: PPUSH
44711: LD_INT 22
44713: PUSH
44714: LD_VAR 0 16
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: LD_INT 30
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 30
44738: PUSH
44739: LD_INT 3
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: LIST
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PPUSH
44755: CALL_OW 72
44759: ST_TO_ADDR
44760: GO 44844
44762: LD_INT 4
44764: DOUBLE
44765: EQUAL
44766: IFTRUE 44770
44768: GO 44843
44770: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44771: LD_ADDR_VAR 0 12
44775: PUSH
44776: LD_VAR 0 18
44780: PPUSH
44781: LD_INT 22
44783: PUSH
44784: LD_VAR 0 16
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 2
44795: PUSH
44796: LD_INT 30
44798: PUSH
44799: LD_INT 6
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 30
44808: PUSH
44809: LD_INT 7
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 30
44818: PUSH
44819: LD_INT 8
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PPUSH
44836: CALL_OW 72
44840: ST_TO_ADDR
44841: GO 44844
44843: POP
// if i = 1 then
44844: LD_VAR 0 8
44848: PUSH
44849: LD_INT 1
44851: EQUAL
44852: IFFALSE 44963
// begin tmp := [ ] ;
44854: LD_ADDR_VAR 0 19
44858: PUSH
44859: EMPTY
44860: ST_TO_ADDR
// for j in f do
44861: LD_ADDR_VAR 0 9
44865: PUSH
44866: LD_VAR 0 12
44870: PUSH
44871: FOR_IN
44872: IFFALSE 44945
// if GetBType ( j ) = b_bunker then
44874: LD_VAR 0 9
44878: PPUSH
44879: CALL_OW 266
44883: PUSH
44884: LD_INT 32
44886: EQUAL
44887: IFFALSE 44914
// tmp := Insert ( tmp , 1 , j ) else
44889: LD_ADDR_VAR 0 19
44893: PUSH
44894: LD_VAR 0 19
44898: PPUSH
44899: LD_INT 1
44901: PPUSH
44902: LD_VAR 0 9
44906: PPUSH
44907: CALL_OW 2
44911: ST_TO_ADDR
44912: GO 44943
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44914: LD_ADDR_VAR 0 19
44918: PUSH
44919: LD_VAR 0 19
44923: PPUSH
44924: LD_VAR 0 19
44928: PUSH
44929: LD_INT 1
44931: PLUS
44932: PPUSH
44933: LD_VAR 0 9
44937: PPUSH
44938: CALL_OW 2
44942: ST_TO_ADDR
44943: GO 44871
44945: POP
44946: POP
// if tmp then
44947: LD_VAR 0 19
44951: IFFALSE 44963
// f := tmp ;
44953: LD_ADDR_VAR 0 12
44957: PUSH
44958: LD_VAR 0 19
44962: ST_TO_ADDR
// end ; x := personel [ i ] ;
44963: LD_ADDR_VAR 0 13
44967: PUSH
44968: LD_VAR 0 6
44972: PUSH
44973: LD_VAR 0 8
44977: ARRAY
44978: ST_TO_ADDR
// if x = - 1 then
44979: LD_VAR 0 13
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: EQUAL
44988: IFFALSE 45197
// begin for j in f do
44990: LD_ADDR_VAR 0 9
44994: PUSH
44995: LD_VAR 0 12
44999: PUSH
45000: FOR_IN
45001: IFFALSE 45193
// repeat InitHc ;
45003: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45007: LD_VAR 0 9
45011: PPUSH
45012: CALL_OW 266
45016: PUSH
45017: LD_INT 5
45019: EQUAL
45020: IFFALSE 45090
// begin if UnitsInside ( j ) < 3 then
45022: LD_VAR 0 9
45026: PPUSH
45027: CALL_OW 313
45031: PUSH
45032: LD_INT 3
45034: LESS
45035: IFFALSE 45071
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45037: LD_INT 0
45039: PPUSH
45040: LD_INT 5
45042: PUSH
45043: LD_INT 8
45045: PUSH
45046: LD_INT 9
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: LIST
45053: PUSH
45054: LD_VAR 0 17
45058: ARRAY
45059: PPUSH
45060: LD_VAR 0 4
45064: PPUSH
45065: CALL_OW 380
45069: GO 45088
// PrepareHuman ( false , i , skill ) ;
45071: LD_INT 0
45073: PPUSH
45074: LD_VAR 0 8
45078: PPUSH
45079: LD_VAR 0 4
45083: PPUSH
45084: CALL_OW 380
// end else
45088: GO 45107
// PrepareHuman ( false , i , skill ) ;
45090: LD_INT 0
45092: PPUSH
45093: LD_VAR 0 8
45097: PPUSH
45098: LD_VAR 0 4
45102: PPUSH
45103: CALL_OW 380
// un := CreateHuman ;
45107: LD_ADDR_VAR 0 14
45111: PUSH
45112: CALL_OW 44
45116: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45117: LD_ADDR_VAR 0 7
45121: PUSH
45122: LD_VAR 0 7
45126: PPUSH
45127: LD_INT 1
45129: PPUSH
45130: LD_VAR 0 14
45134: PPUSH
45135: CALL_OW 2
45139: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45140: LD_VAR 0 14
45144: PPUSH
45145: LD_VAR 0 9
45149: PPUSH
45150: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45154: LD_VAR 0 9
45158: PPUSH
45159: CALL_OW 313
45163: PUSH
45164: LD_INT 6
45166: EQUAL
45167: PUSH
45168: LD_VAR 0 9
45172: PPUSH
45173: CALL_OW 266
45177: PUSH
45178: LD_INT 32
45180: PUSH
45181: LD_INT 31
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: IN
45188: OR
45189: IFFALSE 45003
45191: GO 45000
45193: POP
45194: POP
// end else
45195: GO 45577
// for j = 1 to x do
45197: LD_ADDR_VAR 0 9
45201: PUSH
45202: DOUBLE
45203: LD_INT 1
45205: DEC
45206: ST_TO_ADDR
45207: LD_VAR 0 13
45211: PUSH
45212: FOR_TO
45213: IFFALSE 45575
// begin InitHc ;
45215: CALL_OW 19
// if not f then
45219: LD_VAR 0 12
45223: NOT
45224: IFFALSE 45313
// begin PrepareHuman ( false , i , skill ) ;
45226: LD_INT 0
45228: PPUSH
45229: LD_VAR 0 8
45233: PPUSH
45234: LD_VAR 0 4
45238: PPUSH
45239: CALL_OW 380
// un := CreateHuman ;
45243: LD_ADDR_VAR 0 14
45247: PUSH
45248: CALL_OW 44
45252: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45253: LD_ADDR_VAR 0 7
45257: PUSH
45258: LD_VAR 0 7
45262: PPUSH
45263: LD_INT 1
45265: PPUSH
45266: LD_VAR 0 14
45270: PPUSH
45271: CALL_OW 2
45275: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45276: LD_VAR 0 14
45280: PPUSH
45281: LD_VAR 0 1
45285: PPUSH
45286: CALL_OW 250
45290: PPUSH
45291: LD_VAR 0 1
45295: PPUSH
45296: CALL_OW 251
45300: PPUSH
45301: LD_INT 10
45303: PPUSH
45304: LD_INT 0
45306: PPUSH
45307: CALL_OW 50
// continue ;
45311: GO 45212
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45313: LD_VAR 0 12
45317: PUSH
45318: LD_INT 1
45320: ARRAY
45321: PPUSH
45322: CALL_OW 313
45326: PUSH
45327: LD_VAR 0 12
45331: PUSH
45332: LD_INT 1
45334: ARRAY
45335: PPUSH
45336: CALL_OW 266
45340: PUSH
45341: LD_INT 32
45343: PUSH
45344: LD_INT 31
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: IN
45351: AND
45352: PUSH
45353: LD_VAR 0 12
45357: PUSH
45358: LD_INT 1
45360: ARRAY
45361: PPUSH
45362: CALL_OW 313
45366: PUSH
45367: LD_INT 6
45369: EQUAL
45370: OR
45371: IFFALSE 45391
// f := Delete ( f , 1 ) ;
45373: LD_ADDR_VAR 0 12
45377: PUSH
45378: LD_VAR 0 12
45382: PPUSH
45383: LD_INT 1
45385: PPUSH
45386: CALL_OW 3
45390: ST_TO_ADDR
// if not f then
45391: LD_VAR 0 12
45395: NOT
45396: IFFALSE 45414
// begin x := x + 2 ;
45398: LD_ADDR_VAR 0 13
45402: PUSH
45403: LD_VAR 0 13
45407: PUSH
45408: LD_INT 2
45410: PLUS
45411: ST_TO_ADDR
// continue ;
45412: GO 45212
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45414: LD_VAR 0 12
45418: PUSH
45419: LD_INT 1
45421: ARRAY
45422: PPUSH
45423: CALL_OW 266
45427: PUSH
45428: LD_INT 5
45430: EQUAL
45431: IFFALSE 45505
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45433: LD_VAR 0 12
45437: PUSH
45438: LD_INT 1
45440: ARRAY
45441: PPUSH
45442: CALL_OW 313
45446: PUSH
45447: LD_INT 3
45449: LESS
45450: IFFALSE 45486
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45452: LD_INT 0
45454: PPUSH
45455: LD_INT 5
45457: PUSH
45458: LD_INT 8
45460: PUSH
45461: LD_INT 9
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: LIST
45468: PUSH
45469: LD_VAR 0 17
45473: ARRAY
45474: PPUSH
45475: LD_VAR 0 4
45479: PPUSH
45480: CALL_OW 380
45484: GO 45503
// PrepareHuman ( false , i , skill ) ;
45486: LD_INT 0
45488: PPUSH
45489: LD_VAR 0 8
45493: PPUSH
45494: LD_VAR 0 4
45498: PPUSH
45499: CALL_OW 380
// end else
45503: GO 45522
// PrepareHuman ( false , i , skill ) ;
45505: LD_INT 0
45507: PPUSH
45508: LD_VAR 0 8
45512: PPUSH
45513: LD_VAR 0 4
45517: PPUSH
45518: CALL_OW 380
// un := CreateHuman ;
45522: LD_ADDR_VAR 0 14
45526: PUSH
45527: CALL_OW 44
45531: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45532: LD_ADDR_VAR 0 7
45536: PUSH
45537: LD_VAR 0 7
45541: PPUSH
45542: LD_INT 1
45544: PPUSH
45545: LD_VAR 0 14
45549: PPUSH
45550: CALL_OW 2
45554: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45555: LD_VAR 0 14
45559: PPUSH
45560: LD_VAR 0 12
45564: PUSH
45565: LD_INT 1
45567: ARRAY
45568: PPUSH
45569: CALL_OW 52
// end ;
45573: GO 45212
45575: POP
45576: POP
// end ;
45577: GO 44514
45579: POP
45580: POP
// result := result ^ buildings ;
45581: LD_ADDR_VAR 0 7
45585: PUSH
45586: LD_VAR 0 7
45590: PUSH
45591: LD_VAR 0 18
45595: ADD
45596: ST_TO_ADDR
// end else
45597: GO 45740
// begin for i = 1 to personel do
45599: LD_ADDR_VAR 0 8
45603: PUSH
45604: DOUBLE
45605: LD_INT 1
45607: DEC
45608: ST_TO_ADDR
45609: LD_VAR 0 6
45613: PUSH
45614: FOR_TO
45615: IFFALSE 45738
// begin if i > 4 then
45617: LD_VAR 0 8
45621: PUSH
45622: LD_INT 4
45624: GREATER
45625: IFFALSE 45629
// break ;
45627: GO 45738
// x := personel [ i ] ;
45629: LD_ADDR_VAR 0 13
45633: PUSH
45634: LD_VAR 0 6
45638: PUSH
45639: LD_VAR 0 8
45643: ARRAY
45644: ST_TO_ADDR
// if x = - 1 then
45645: LD_VAR 0 13
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: EQUAL
45654: IFFALSE 45658
// continue ;
45656: GO 45614
// PrepareHuman ( false , i , skill ) ;
45658: LD_INT 0
45660: PPUSH
45661: LD_VAR 0 8
45665: PPUSH
45666: LD_VAR 0 4
45670: PPUSH
45671: CALL_OW 380
// un := CreateHuman ;
45675: LD_ADDR_VAR 0 14
45679: PUSH
45680: CALL_OW 44
45684: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45685: LD_VAR 0 14
45689: PPUSH
45690: LD_VAR 0 1
45694: PPUSH
45695: CALL_OW 250
45699: PPUSH
45700: LD_VAR 0 1
45704: PPUSH
45705: CALL_OW 251
45709: PPUSH
45710: LD_INT 10
45712: PPUSH
45713: LD_INT 0
45715: PPUSH
45716: CALL_OW 50
// result := result ^ un ;
45720: LD_ADDR_VAR 0 7
45724: PUSH
45725: LD_VAR 0 7
45729: PUSH
45730: LD_VAR 0 14
45734: ADD
45735: ST_TO_ADDR
// end ;
45736: GO 45614
45738: POP
45739: POP
// end ; end ;
45740: LD_VAR 0 7
45744: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45745: LD_INT 0
45747: PPUSH
45748: PPUSH
45749: PPUSH
45750: PPUSH
45751: PPUSH
45752: PPUSH
45753: PPUSH
45754: PPUSH
45755: PPUSH
45756: PPUSH
45757: PPUSH
45758: PPUSH
45759: PPUSH
45760: PPUSH
45761: PPUSH
45762: PPUSH
// result := false ;
45763: LD_ADDR_VAR 0 3
45767: PUSH
45768: LD_INT 0
45770: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45771: LD_VAR 0 1
45775: NOT
45776: PUSH
45777: LD_VAR 0 1
45781: PPUSH
45782: CALL_OW 266
45786: PUSH
45787: LD_INT 32
45789: PUSH
45790: LD_INT 33
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: IN
45797: NOT
45798: OR
45799: IFFALSE 45803
// exit ;
45801: GO 46939
// nat := GetNation ( tower ) ;
45803: LD_ADDR_VAR 0 12
45807: PUSH
45808: LD_VAR 0 1
45812: PPUSH
45813: CALL_OW 248
45817: ST_TO_ADDR
// side := GetSide ( tower ) ;
45818: LD_ADDR_VAR 0 16
45822: PUSH
45823: LD_VAR 0 1
45827: PPUSH
45828: CALL_OW 255
45832: ST_TO_ADDR
// x := GetX ( tower ) ;
45833: LD_ADDR_VAR 0 10
45837: PUSH
45838: LD_VAR 0 1
45842: PPUSH
45843: CALL_OW 250
45847: ST_TO_ADDR
// y := GetY ( tower ) ;
45848: LD_ADDR_VAR 0 11
45852: PUSH
45853: LD_VAR 0 1
45857: PPUSH
45858: CALL_OW 251
45862: ST_TO_ADDR
// if not x or not y then
45863: LD_VAR 0 10
45867: NOT
45868: PUSH
45869: LD_VAR 0 11
45873: NOT
45874: OR
45875: IFFALSE 45879
// exit ;
45877: GO 46939
// weapon := 0 ;
45879: LD_ADDR_VAR 0 18
45883: PUSH
45884: LD_INT 0
45886: ST_TO_ADDR
// fac_list := [ ] ;
45887: LD_ADDR_VAR 0 17
45891: PUSH
45892: EMPTY
45893: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
45894: LD_ADDR_VAR 0 6
45898: PUSH
45899: LD_VAR 0 1
45903: PPUSH
45904: CALL_OW 274
45908: PPUSH
45909: LD_VAR 0 2
45913: PPUSH
45914: CALL 43517 0 2
45918: PPUSH
45919: LD_INT 30
45921: PUSH
45922: LD_INT 3
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PPUSH
45929: CALL_OW 72
45933: ST_TO_ADDR
// if not factories then
45934: LD_VAR 0 6
45938: NOT
45939: IFFALSE 45943
// exit ;
45941: GO 46939
// for i in factories do
45943: LD_ADDR_VAR 0 8
45947: PUSH
45948: LD_VAR 0 6
45952: PUSH
45953: FOR_IN
45954: IFFALSE 45979
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45956: LD_ADDR_VAR 0 17
45960: PUSH
45961: LD_VAR 0 17
45965: PUSH
45966: LD_VAR 0 8
45970: PPUSH
45971: CALL_OW 478
45975: UNION
45976: ST_TO_ADDR
45977: GO 45953
45979: POP
45980: POP
// if not fac_list then
45981: LD_VAR 0 17
45985: NOT
45986: IFFALSE 45990
// exit ;
45988: GO 46939
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45990: LD_ADDR_VAR 0 5
45994: PUSH
45995: LD_INT 4
45997: PUSH
45998: LD_INT 5
46000: PUSH
46001: LD_INT 9
46003: PUSH
46004: LD_INT 10
46006: PUSH
46007: LD_INT 6
46009: PUSH
46010: LD_INT 7
46012: PUSH
46013: LD_INT 11
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 27
46027: PUSH
46028: LD_INT 28
46030: PUSH
46031: LD_INT 26
46033: PUSH
46034: LD_INT 30
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 43
46045: PUSH
46046: LD_INT 44
46048: PUSH
46049: LD_INT 46
46051: PUSH
46052: LD_INT 45
46054: PUSH
46055: LD_INT 47
46057: PUSH
46058: LD_INT 49
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: LIST
46073: PUSH
46074: LD_VAR 0 12
46078: ARRAY
46079: ST_TO_ADDR
// for i in list do
46080: LD_ADDR_VAR 0 8
46084: PUSH
46085: LD_VAR 0 5
46089: PUSH
46090: FOR_IN
46091: IFFALSE 46124
// if not i in fac_list then
46093: LD_VAR 0 8
46097: PUSH
46098: LD_VAR 0 17
46102: IN
46103: NOT
46104: IFFALSE 46122
// list := list diff i ;
46106: LD_ADDR_VAR 0 5
46110: PUSH
46111: LD_VAR 0 5
46115: PUSH
46116: LD_VAR 0 8
46120: DIFF
46121: ST_TO_ADDR
46122: GO 46090
46124: POP
46125: POP
// if not list then
46126: LD_VAR 0 5
46130: NOT
46131: IFFALSE 46135
// exit ;
46133: GO 46939
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46135: LD_VAR 0 12
46139: PUSH
46140: LD_INT 3
46142: EQUAL
46143: PUSH
46144: LD_INT 49
46146: PUSH
46147: LD_VAR 0 5
46151: IN
46152: AND
46153: PUSH
46154: LD_INT 31
46156: PPUSH
46157: LD_VAR 0 16
46161: PPUSH
46162: CALL_OW 321
46166: PUSH
46167: LD_INT 2
46169: EQUAL
46170: AND
46171: IFFALSE 46231
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46173: LD_INT 22
46175: PUSH
46176: LD_VAR 0 16
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 35
46187: PUSH
46188: LD_INT 49
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 91
46197: PUSH
46198: LD_VAR 0 1
46202: PUSH
46203: LD_INT 10
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: LIST
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: LIST
46215: PPUSH
46216: CALL_OW 69
46220: NOT
46221: IFFALSE 46231
// weapon := ru_time_lapser ;
46223: LD_ADDR_VAR 0 18
46227: PUSH
46228: LD_INT 49
46230: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46231: LD_VAR 0 12
46235: PUSH
46236: LD_INT 1
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: IN
46246: PUSH
46247: LD_INT 11
46249: PUSH
46250: LD_VAR 0 5
46254: IN
46255: PUSH
46256: LD_INT 30
46258: PUSH
46259: LD_VAR 0 5
46263: IN
46264: OR
46265: AND
46266: PUSH
46267: LD_INT 6
46269: PPUSH
46270: LD_VAR 0 16
46274: PPUSH
46275: CALL_OW 321
46279: PUSH
46280: LD_INT 2
46282: EQUAL
46283: AND
46284: IFFALSE 46449
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46286: LD_INT 22
46288: PUSH
46289: LD_VAR 0 16
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: PUSH
46301: LD_INT 35
46303: PUSH
46304: LD_INT 11
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 35
46313: PUSH
46314: LD_INT 30
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 91
46328: PUSH
46329: LD_VAR 0 1
46333: PUSH
46334: LD_INT 18
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: LIST
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: LIST
46346: PPUSH
46347: CALL_OW 69
46351: NOT
46352: PUSH
46353: LD_INT 22
46355: PUSH
46356: LD_VAR 0 16
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: LD_INT 30
46370: PUSH
46371: LD_INT 32
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 30
46380: PUSH
46381: LD_INT 33
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 91
46395: PUSH
46396: LD_VAR 0 1
46400: PUSH
46401: LD_INT 12
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: LIST
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: LIST
46413: PUSH
46414: EMPTY
46415: LIST
46416: PPUSH
46417: CALL_OW 69
46421: PUSH
46422: LD_INT 2
46424: GREATER
46425: AND
46426: IFFALSE 46449
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46428: LD_ADDR_VAR 0 18
46432: PUSH
46433: LD_INT 11
46435: PUSH
46436: LD_INT 30
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_VAR 0 12
46447: ARRAY
46448: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46449: LD_VAR 0 18
46453: NOT
46454: PUSH
46455: LD_INT 40
46457: PPUSH
46458: LD_VAR 0 16
46462: PPUSH
46463: CALL_OW 321
46467: PUSH
46468: LD_INT 2
46470: EQUAL
46471: AND
46472: PUSH
46473: LD_INT 7
46475: PUSH
46476: LD_VAR 0 5
46480: IN
46481: PUSH
46482: LD_INT 28
46484: PUSH
46485: LD_VAR 0 5
46489: IN
46490: OR
46491: PUSH
46492: LD_INT 45
46494: PUSH
46495: LD_VAR 0 5
46499: IN
46500: OR
46501: AND
46502: IFFALSE 46756
// begin hex := GetHexInfo ( x , y ) ;
46504: LD_ADDR_VAR 0 4
46508: PUSH
46509: LD_VAR 0 10
46513: PPUSH
46514: LD_VAR 0 11
46518: PPUSH
46519: CALL_OW 546
46523: ST_TO_ADDR
// if hex [ 1 ] then
46524: LD_VAR 0 4
46528: PUSH
46529: LD_INT 1
46531: ARRAY
46532: IFFALSE 46536
// exit ;
46534: GO 46939
// height := hex [ 2 ] ;
46536: LD_ADDR_VAR 0 15
46540: PUSH
46541: LD_VAR 0 4
46545: PUSH
46546: LD_INT 2
46548: ARRAY
46549: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46550: LD_ADDR_VAR 0 14
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: LD_INT 2
46560: PUSH
46561: LD_INT 3
46563: PUSH
46564: LD_INT 5
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: ST_TO_ADDR
// for i in tmp do
46573: LD_ADDR_VAR 0 8
46577: PUSH
46578: LD_VAR 0 14
46582: PUSH
46583: FOR_IN
46584: IFFALSE 46754
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46586: LD_ADDR_VAR 0 9
46590: PUSH
46591: LD_VAR 0 10
46595: PPUSH
46596: LD_VAR 0 8
46600: PPUSH
46601: LD_INT 5
46603: PPUSH
46604: CALL_OW 272
46608: PUSH
46609: LD_VAR 0 11
46613: PPUSH
46614: LD_VAR 0 8
46618: PPUSH
46619: LD_INT 5
46621: PPUSH
46622: CALL_OW 273
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46631: LD_VAR 0 9
46635: PUSH
46636: LD_INT 1
46638: ARRAY
46639: PPUSH
46640: LD_VAR 0 9
46644: PUSH
46645: LD_INT 2
46647: ARRAY
46648: PPUSH
46649: CALL_OW 488
46653: IFFALSE 46752
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46655: LD_ADDR_VAR 0 4
46659: PUSH
46660: LD_VAR 0 9
46664: PUSH
46665: LD_INT 1
46667: ARRAY
46668: PPUSH
46669: LD_VAR 0 9
46673: PUSH
46674: LD_INT 2
46676: ARRAY
46677: PPUSH
46678: CALL_OW 546
46682: ST_TO_ADDR
// if hex [ 1 ] then
46683: LD_VAR 0 4
46687: PUSH
46688: LD_INT 1
46690: ARRAY
46691: IFFALSE 46695
// continue ;
46693: GO 46583
// h := hex [ 2 ] ;
46695: LD_ADDR_VAR 0 13
46699: PUSH
46700: LD_VAR 0 4
46704: PUSH
46705: LD_INT 2
46707: ARRAY
46708: ST_TO_ADDR
// if h + 7 < height then
46709: LD_VAR 0 13
46713: PUSH
46714: LD_INT 7
46716: PLUS
46717: PUSH
46718: LD_VAR 0 15
46722: LESS
46723: IFFALSE 46752
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46725: LD_ADDR_VAR 0 18
46729: PUSH
46730: LD_INT 7
46732: PUSH
46733: LD_INT 28
46735: PUSH
46736: LD_INT 45
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: LIST
46743: PUSH
46744: LD_VAR 0 12
46748: ARRAY
46749: ST_TO_ADDR
// break ;
46750: GO 46754
// end ; end ; end ;
46752: GO 46583
46754: POP
46755: POP
// end ; if not weapon then
46756: LD_VAR 0 18
46760: NOT
46761: IFFALSE 46821
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46763: LD_ADDR_VAR 0 5
46767: PUSH
46768: LD_VAR 0 5
46772: PUSH
46773: LD_INT 11
46775: PUSH
46776: LD_INT 30
46778: PUSH
46779: LD_INT 49
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: LIST
46786: DIFF
46787: ST_TO_ADDR
// if not list then
46788: LD_VAR 0 5
46792: NOT
46793: IFFALSE 46797
// exit ;
46795: GO 46939
// weapon := list [ rand ( 1 , list ) ] ;
46797: LD_ADDR_VAR 0 18
46801: PUSH
46802: LD_VAR 0 5
46806: PUSH
46807: LD_INT 1
46809: PPUSH
46810: LD_VAR 0 5
46814: PPUSH
46815: CALL_OW 12
46819: ARRAY
46820: ST_TO_ADDR
// end ; if weapon then
46821: LD_VAR 0 18
46825: IFFALSE 46939
// begin tmp := CostOfWeapon ( weapon ) ;
46827: LD_ADDR_VAR 0 14
46831: PUSH
46832: LD_VAR 0 18
46836: PPUSH
46837: CALL_OW 451
46841: ST_TO_ADDR
// j := GetBase ( tower ) ;
46842: LD_ADDR_VAR 0 9
46846: PUSH
46847: LD_VAR 0 1
46851: PPUSH
46852: CALL_OW 274
46856: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46857: LD_VAR 0 9
46861: PPUSH
46862: LD_INT 1
46864: PPUSH
46865: CALL_OW 275
46869: PUSH
46870: LD_VAR 0 14
46874: PUSH
46875: LD_INT 1
46877: ARRAY
46878: GREATEREQUAL
46879: PUSH
46880: LD_VAR 0 9
46884: PPUSH
46885: LD_INT 2
46887: PPUSH
46888: CALL_OW 275
46892: PUSH
46893: LD_VAR 0 14
46897: PUSH
46898: LD_INT 2
46900: ARRAY
46901: GREATEREQUAL
46902: AND
46903: PUSH
46904: LD_VAR 0 9
46908: PPUSH
46909: LD_INT 3
46911: PPUSH
46912: CALL_OW 275
46916: PUSH
46917: LD_VAR 0 14
46921: PUSH
46922: LD_INT 3
46924: ARRAY
46925: GREATEREQUAL
46926: AND
46927: IFFALSE 46939
// result := weapon ;
46929: LD_ADDR_VAR 0 3
46933: PUSH
46934: LD_VAR 0 18
46938: ST_TO_ADDR
// end ; end ;
46939: LD_VAR 0 3
46943: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46944: LD_INT 0
46946: PPUSH
46947: PPUSH
// result := true ;
46948: LD_ADDR_VAR 0 3
46952: PUSH
46953: LD_INT 1
46955: ST_TO_ADDR
// if array1 = array2 then
46956: LD_VAR 0 1
46960: PUSH
46961: LD_VAR 0 2
46965: EQUAL
46966: IFFALSE 47026
// begin for i = 1 to array1 do
46968: LD_ADDR_VAR 0 4
46972: PUSH
46973: DOUBLE
46974: LD_INT 1
46976: DEC
46977: ST_TO_ADDR
46978: LD_VAR 0 1
46982: PUSH
46983: FOR_TO
46984: IFFALSE 47022
// if array1 [ i ] <> array2 [ i ] then
46986: LD_VAR 0 1
46990: PUSH
46991: LD_VAR 0 4
46995: ARRAY
46996: PUSH
46997: LD_VAR 0 2
47001: PUSH
47002: LD_VAR 0 4
47006: ARRAY
47007: NONEQUAL
47008: IFFALSE 47020
// begin result := false ;
47010: LD_ADDR_VAR 0 3
47014: PUSH
47015: LD_INT 0
47017: ST_TO_ADDR
// break ;
47018: GO 47022
// end ;
47020: GO 46983
47022: POP
47023: POP
// end else
47024: GO 47034
// result := false ;
47026: LD_ADDR_VAR 0 3
47030: PUSH
47031: LD_INT 0
47033: ST_TO_ADDR
// end ;
47034: LD_VAR 0 3
47038: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47039: LD_INT 0
47041: PPUSH
47042: PPUSH
47043: PPUSH
// pom := GetBase ( fac ) ;
47044: LD_ADDR_VAR 0 5
47048: PUSH
47049: LD_VAR 0 1
47053: PPUSH
47054: CALL_OW 274
47058: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47059: LD_ADDR_VAR 0 4
47063: PUSH
47064: LD_VAR 0 2
47068: PUSH
47069: LD_INT 1
47071: ARRAY
47072: PPUSH
47073: LD_VAR 0 2
47077: PUSH
47078: LD_INT 2
47080: ARRAY
47081: PPUSH
47082: LD_VAR 0 2
47086: PUSH
47087: LD_INT 3
47089: ARRAY
47090: PPUSH
47091: LD_VAR 0 2
47095: PUSH
47096: LD_INT 4
47098: ARRAY
47099: PPUSH
47100: CALL_OW 449
47104: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47105: LD_ADDR_VAR 0 3
47109: PUSH
47110: LD_VAR 0 5
47114: PPUSH
47115: LD_INT 1
47117: PPUSH
47118: CALL_OW 275
47122: PUSH
47123: LD_VAR 0 4
47127: PUSH
47128: LD_INT 1
47130: ARRAY
47131: GREATEREQUAL
47132: PUSH
47133: LD_VAR 0 5
47137: PPUSH
47138: LD_INT 2
47140: PPUSH
47141: CALL_OW 275
47145: PUSH
47146: LD_VAR 0 4
47150: PUSH
47151: LD_INT 2
47153: ARRAY
47154: GREATEREQUAL
47155: AND
47156: PUSH
47157: LD_VAR 0 5
47161: PPUSH
47162: LD_INT 3
47164: PPUSH
47165: CALL_OW 275
47169: PUSH
47170: LD_VAR 0 4
47174: PUSH
47175: LD_INT 3
47177: ARRAY
47178: GREATEREQUAL
47179: AND
47180: ST_TO_ADDR
// end ;
47181: LD_VAR 0 3
47185: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47186: LD_INT 0
47188: PPUSH
47189: PPUSH
47190: PPUSH
47191: PPUSH
// pom := GetBase ( building ) ;
47192: LD_ADDR_VAR 0 3
47196: PUSH
47197: LD_VAR 0 1
47201: PPUSH
47202: CALL_OW 274
47206: ST_TO_ADDR
// if not pom then
47207: LD_VAR 0 3
47211: NOT
47212: IFFALSE 47216
// exit ;
47214: GO 47386
// btype := GetBType ( building ) ;
47216: LD_ADDR_VAR 0 5
47220: PUSH
47221: LD_VAR 0 1
47225: PPUSH
47226: CALL_OW 266
47230: ST_TO_ADDR
// if btype = b_armoury then
47231: LD_VAR 0 5
47235: PUSH
47236: LD_INT 4
47238: EQUAL
47239: IFFALSE 47249
// btype := b_barracks ;
47241: LD_ADDR_VAR 0 5
47245: PUSH
47246: LD_INT 5
47248: ST_TO_ADDR
// if btype = b_depot then
47249: LD_VAR 0 5
47253: PUSH
47254: LD_INT 0
47256: EQUAL
47257: IFFALSE 47267
// btype := b_warehouse ;
47259: LD_ADDR_VAR 0 5
47263: PUSH
47264: LD_INT 1
47266: ST_TO_ADDR
// if btype = b_workshop then
47267: LD_VAR 0 5
47271: PUSH
47272: LD_INT 2
47274: EQUAL
47275: IFFALSE 47285
// btype := b_factory ;
47277: LD_ADDR_VAR 0 5
47281: PUSH
47282: LD_INT 3
47284: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47285: LD_ADDR_VAR 0 4
47289: PUSH
47290: LD_VAR 0 5
47294: PPUSH
47295: LD_VAR 0 1
47299: PPUSH
47300: CALL_OW 248
47304: PPUSH
47305: CALL_OW 450
47309: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47310: LD_ADDR_VAR 0 2
47314: PUSH
47315: LD_VAR 0 3
47319: PPUSH
47320: LD_INT 1
47322: PPUSH
47323: CALL_OW 275
47327: PUSH
47328: LD_VAR 0 4
47332: PUSH
47333: LD_INT 1
47335: ARRAY
47336: GREATEREQUAL
47337: PUSH
47338: LD_VAR 0 3
47342: PPUSH
47343: LD_INT 2
47345: PPUSH
47346: CALL_OW 275
47350: PUSH
47351: LD_VAR 0 4
47355: PUSH
47356: LD_INT 2
47358: ARRAY
47359: GREATEREQUAL
47360: AND
47361: PUSH
47362: LD_VAR 0 3
47366: PPUSH
47367: LD_INT 3
47369: PPUSH
47370: CALL_OW 275
47374: PUSH
47375: LD_VAR 0 4
47379: PUSH
47380: LD_INT 3
47382: ARRAY
47383: GREATEREQUAL
47384: AND
47385: ST_TO_ADDR
// end ;
47386: LD_VAR 0 2
47390: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47391: LD_INT 0
47393: PPUSH
47394: PPUSH
47395: PPUSH
// pom := GetBase ( building ) ;
47396: LD_ADDR_VAR 0 4
47400: PUSH
47401: LD_VAR 0 1
47405: PPUSH
47406: CALL_OW 274
47410: ST_TO_ADDR
// if not pom then
47411: LD_VAR 0 4
47415: NOT
47416: IFFALSE 47420
// exit ;
47418: GO 47521
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47420: LD_ADDR_VAR 0 5
47424: PUSH
47425: LD_VAR 0 2
47429: PPUSH
47430: LD_VAR 0 1
47434: PPUSH
47435: CALL_OW 248
47439: PPUSH
47440: CALL_OW 450
47444: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47445: LD_ADDR_VAR 0 3
47449: PUSH
47450: LD_VAR 0 4
47454: PPUSH
47455: LD_INT 1
47457: PPUSH
47458: CALL_OW 275
47462: PUSH
47463: LD_VAR 0 5
47467: PUSH
47468: LD_INT 1
47470: ARRAY
47471: GREATEREQUAL
47472: PUSH
47473: LD_VAR 0 4
47477: PPUSH
47478: LD_INT 2
47480: PPUSH
47481: CALL_OW 275
47485: PUSH
47486: LD_VAR 0 5
47490: PUSH
47491: LD_INT 2
47493: ARRAY
47494: GREATEREQUAL
47495: AND
47496: PUSH
47497: LD_VAR 0 4
47501: PPUSH
47502: LD_INT 3
47504: PPUSH
47505: CALL_OW 275
47509: PUSH
47510: LD_VAR 0 5
47514: PUSH
47515: LD_INT 3
47517: ARRAY
47518: GREATEREQUAL
47519: AND
47520: ST_TO_ADDR
// end ;
47521: LD_VAR 0 3
47525: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
47526: LD_INT 0
47528: PPUSH
47529: PPUSH
47530: PPUSH
47531: PPUSH
47532: PPUSH
47533: PPUSH
47534: PPUSH
47535: PPUSH
47536: PPUSH
47537: PPUSH
// result := false ;
47538: LD_ADDR_VAR 0 6
47542: PUSH
47543: LD_INT 0
47545: ST_TO_ADDR
// if not base or not btype or not x or not y then
47546: LD_VAR 0 1
47550: NOT
47551: PUSH
47552: LD_VAR 0 2
47556: NOT
47557: OR
47558: PUSH
47559: LD_VAR 0 3
47563: NOT
47564: OR
47565: PUSH
47566: LD_VAR 0 4
47570: NOT
47571: OR
47572: IFFALSE 47576
// exit ;
47574: GO 48185
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
47576: LD_ADDR_VAR 0 12
47580: PUSH
47581: LD_VAR 0 2
47585: PPUSH
47586: LD_VAR 0 3
47590: PPUSH
47591: LD_VAR 0 4
47595: PPUSH
47596: LD_VAR 0 5
47600: PPUSH
47601: LD_VAR 0 1
47605: PUSH
47606: LD_INT 1
47608: ARRAY
47609: PPUSH
47610: CALL_OW 248
47614: PPUSH
47615: LD_INT 0
47617: PPUSH
47618: CALL 49022 0 6
47622: ST_TO_ADDR
// if not hexes then
47623: LD_VAR 0 12
47627: NOT
47628: IFFALSE 47632
// exit ;
47630: GO 48185
// for i = 1 to hexes do
47632: LD_ADDR_VAR 0 7
47636: PUSH
47637: DOUBLE
47638: LD_INT 1
47640: DEC
47641: ST_TO_ADDR
47642: LD_VAR 0 12
47646: PUSH
47647: FOR_TO
47648: IFFALSE 48183
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47650: LD_ADDR_VAR 0 11
47654: PUSH
47655: LD_VAR 0 12
47659: PUSH
47660: LD_VAR 0 7
47664: ARRAY
47665: PUSH
47666: LD_INT 1
47668: ARRAY
47669: PPUSH
47670: LD_VAR 0 12
47674: PUSH
47675: LD_VAR 0 7
47679: ARRAY
47680: PUSH
47681: LD_INT 2
47683: ARRAY
47684: PPUSH
47685: CALL_OW 428
47689: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47690: LD_VAR 0 12
47694: PUSH
47695: LD_VAR 0 7
47699: ARRAY
47700: PUSH
47701: LD_INT 1
47703: ARRAY
47704: PPUSH
47705: LD_VAR 0 12
47709: PUSH
47710: LD_VAR 0 7
47714: ARRAY
47715: PUSH
47716: LD_INT 2
47718: ARRAY
47719: PPUSH
47720: CALL_OW 351
47724: PUSH
47725: LD_VAR 0 12
47729: PUSH
47730: LD_VAR 0 7
47734: ARRAY
47735: PUSH
47736: LD_INT 1
47738: ARRAY
47739: PPUSH
47740: LD_VAR 0 12
47744: PUSH
47745: LD_VAR 0 7
47749: ARRAY
47750: PUSH
47751: LD_INT 2
47753: ARRAY
47754: PPUSH
47755: CALL_OW 488
47759: NOT
47760: OR
47761: PUSH
47762: LD_VAR 0 11
47766: PPUSH
47767: CALL_OW 247
47771: PUSH
47772: LD_INT 3
47774: EQUAL
47775: OR
47776: IFFALSE 47782
// exit ;
47778: POP
47779: POP
47780: GO 48185
// if not tmp or not tmp in base then
47782: LD_VAR 0 11
47786: NOT
47787: PUSH
47788: LD_VAR 0 11
47792: PUSH
47793: LD_VAR 0 1
47797: IN
47798: NOT
47799: OR
47800: IFFALSE 47804
// continue ;
47802: GO 47647
// result := true ;
47804: LD_ADDR_VAR 0 6
47808: PUSH
47809: LD_INT 1
47811: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47812: LD_ADDR_VAR 0 15
47816: PUSH
47817: LD_VAR 0 1
47821: PPUSH
47822: LD_INT 22
47824: PUSH
47825: LD_VAR 0 11
47829: PPUSH
47830: CALL_OW 255
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 2
47841: PUSH
47842: LD_INT 30
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 30
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: LIST
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PPUSH
47871: CALL_OW 72
47875: ST_TO_ADDR
// if dep then
47876: LD_VAR 0 15
47880: IFFALSE 48016
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47882: LD_ADDR_VAR 0 14
47886: PUSH
47887: LD_VAR 0 15
47891: PUSH
47892: LD_INT 1
47894: ARRAY
47895: PPUSH
47896: CALL_OW 250
47900: PPUSH
47901: LD_VAR 0 15
47905: PUSH
47906: LD_INT 1
47908: ARRAY
47909: PPUSH
47910: CALL_OW 254
47914: PPUSH
47915: LD_INT 5
47917: PPUSH
47918: CALL_OW 272
47922: PUSH
47923: LD_VAR 0 15
47927: PUSH
47928: LD_INT 1
47930: ARRAY
47931: PPUSH
47932: CALL_OW 251
47936: PPUSH
47937: LD_VAR 0 15
47941: PUSH
47942: LD_INT 1
47944: ARRAY
47945: PPUSH
47946: CALL_OW 254
47950: PPUSH
47951: LD_INT 5
47953: PPUSH
47954: CALL_OW 273
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47963: LD_VAR 0 14
47967: PUSH
47968: LD_INT 1
47970: ARRAY
47971: PPUSH
47972: LD_VAR 0 14
47976: PUSH
47977: LD_INT 2
47979: ARRAY
47980: PPUSH
47981: CALL_OW 488
47985: IFFALSE 48016
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47987: LD_VAR 0 11
47991: PPUSH
47992: LD_VAR 0 14
47996: PUSH
47997: LD_INT 1
47999: ARRAY
48000: PPUSH
48001: LD_VAR 0 14
48005: PUSH
48006: LD_INT 2
48008: ARRAY
48009: PPUSH
48010: CALL_OW 111
// continue ;
48014: GO 47647
// end ; end ; r := GetDir ( tmp ) ;
48016: LD_ADDR_VAR 0 13
48020: PUSH
48021: LD_VAR 0 11
48025: PPUSH
48026: CALL_OW 254
48030: ST_TO_ADDR
// if r = 5 then
48031: LD_VAR 0 13
48035: PUSH
48036: LD_INT 5
48038: EQUAL
48039: IFFALSE 48049
// r := 0 ;
48041: LD_ADDR_VAR 0 13
48045: PUSH
48046: LD_INT 0
48048: ST_TO_ADDR
// for j = r to 5 do
48049: LD_ADDR_VAR 0 8
48053: PUSH
48054: DOUBLE
48055: LD_VAR 0 13
48059: DEC
48060: ST_TO_ADDR
48061: LD_INT 5
48063: PUSH
48064: FOR_TO
48065: IFFALSE 48179
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48067: LD_ADDR_VAR 0 9
48071: PUSH
48072: LD_VAR 0 11
48076: PPUSH
48077: CALL_OW 250
48081: PPUSH
48082: LD_VAR 0 8
48086: PPUSH
48087: LD_INT 2
48089: PPUSH
48090: CALL_OW 272
48094: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48095: LD_ADDR_VAR 0 10
48099: PUSH
48100: LD_VAR 0 11
48104: PPUSH
48105: CALL_OW 251
48109: PPUSH
48110: LD_VAR 0 8
48114: PPUSH
48115: LD_INT 2
48117: PPUSH
48118: CALL_OW 273
48122: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48123: LD_VAR 0 9
48127: PPUSH
48128: LD_VAR 0 10
48132: PPUSH
48133: CALL_OW 488
48137: PUSH
48138: LD_VAR 0 9
48142: PPUSH
48143: LD_VAR 0 10
48147: PPUSH
48148: CALL_OW 428
48152: NOT
48153: AND
48154: IFFALSE 48177
// begin ComMoveXY ( tmp , _x , _y ) ;
48156: LD_VAR 0 11
48160: PPUSH
48161: LD_VAR 0 9
48165: PPUSH
48166: LD_VAR 0 10
48170: PPUSH
48171: CALL_OW 111
// break ;
48175: GO 48179
// end ; end ;
48177: GO 48064
48179: POP
48180: POP
// end ;
48181: GO 47647
48183: POP
48184: POP
// end ;
48185: LD_VAR 0 6
48189: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
48190: LD_INT 0
48192: PPUSH
48193: PPUSH
48194: PPUSH
48195: PPUSH
48196: PPUSH
48197: PPUSH
48198: PPUSH
48199: PPUSH
48200: PPUSH
48201: PPUSH
// result := false ;
48202: LD_ADDR_VAR 0 6
48206: PUSH
48207: LD_INT 0
48209: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48210: LD_VAR 0 1
48214: NOT
48215: PUSH
48216: LD_VAR 0 1
48220: PPUSH
48221: CALL_OW 266
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: IN
48236: NOT
48237: OR
48238: PUSH
48239: LD_VAR 0 2
48243: NOT
48244: OR
48245: PUSH
48246: LD_VAR 0 5
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: LD_INT 2
48259: PUSH
48260: LD_INT 3
48262: PUSH
48263: LD_INT 4
48265: PUSH
48266: LD_INT 5
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: IN
48277: NOT
48278: OR
48279: PUSH
48280: LD_VAR 0 3
48284: PPUSH
48285: LD_VAR 0 4
48289: PPUSH
48290: CALL_OW 488
48294: NOT
48295: OR
48296: IFFALSE 48300
// exit ;
48298: GO 49017
// pom := GetBase ( depot ) ;
48300: LD_ADDR_VAR 0 10
48304: PUSH
48305: LD_VAR 0 1
48309: PPUSH
48310: CALL_OW 274
48314: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48315: LD_ADDR_VAR 0 11
48319: PUSH
48320: LD_VAR 0 2
48324: PPUSH
48325: LD_VAR 0 1
48329: PPUSH
48330: CALL_OW 248
48334: PPUSH
48335: CALL_OW 450
48339: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48340: LD_VAR 0 10
48344: PPUSH
48345: LD_INT 1
48347: PPUSH
48348: CALL_OW 275
48352: PUSH
48353: LD_VAR 0 11
48357: PUSH
48358: LD_INT 1
48360: ARRAY
48361: GREATEREQUAL
48362: PUSH
48363: LD_VAR 0 10
48367: PPUSH
48368: LD_INT 2
48370: PPUSH
48371: CALL_OW 275
48375: PUSH
48376: LD_VAR 0 11
48380: PUSH
48381: LD_INT 2
48383: ARRAY
48384: GREATEREQUAL
48385: AND
48386: PUSH
48387: LD_VAR 0 10
48391: PPUSH
48392: LD_INT 3
48394: PPUSH
48395: CALL_OW 275
48399: PUSH
48400: LD_VAR 0 11
48404: PUSH
48405: LD_INT 3
48407: ARRAY
48408: GREATEREQUAL
48409: AND
48410: NOT
48411: IFFALSE 48415
// exit ;
48413: GO 49017
// if GetBType ( depot ) = b_depot then
48415: LD_VAR 0 1
48419: PPUSH
48420: CALL_OW 266
48424: PUSH
48425: LD_INT 0
48427: EQUAL
48428: IFFALSE 48440
// dist := 28 else
48430: LD_ADDR_VAR 0 14
48434: PUSH
48435: LD_INT 28
48437: ST_TO_ADDR
48438: GO 48448
// dist := 36 ;
48440: LD_ADDR_VAR 0 14
48444: PUSH
48445: LD_INT 36
48447: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48448: LD_VAR 0 1
48452: PPUSH
48453: LD_VAR 0 3
48457: PPUSH
48458: LD_VAR 0 4
48462: PPUSH
48463: CALL_OW 297
48467: PUSH
48468: LD_VAR 0 14
48472: GREATER
48473: IFFALSE 48477
// exit ;
48475: GO 49017
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48477: LD_ADDR_VAR 0 12
48481: PUSH
48482: LD_VAR 0 2
48486: PPUSH
48487: LD_VAR 0 3
48491: PPUSH
48492: LD_VAR 0 4
48496: PPUSH
48497: LD_VAR 0 5
48501: PPUSH
48502: LD_VAR 0 1
48506: PPUSH
48507: CALL_OW 248
48511: PPUSH
48512: LD_INT 0
48514: PPUSH
48515: CALL 49022 0 6
48519: ST_TO_ADDR
// if not hexes then
48520: LD_VAR 0 12
48524: NOT
48525: IFFALSE 48529
// exit ;
48527: GO 49017
// hex := GetHexInfo ( x , y ) ;
48529: LD_ADDR_VAR 0 15
48533: PUSH
48534: LD_VAR 0 3
48538: PPUSH
48539: LD_VAR 0 4
48543: PPUSH
48544: CALL_OW 546
48548: ST_TO_ADDR
// if hex [ 1 ] then
48549: LD_VAR 0 15
48553: PUSH
48554: LD_INT 1
48556: ARRAY
48557: IFFALSE 48561
// exit ;
48559: GO 49017
// height := hex [ 2 ] ;
48561: LD_ADDR_VAR 0 13
48565: PUSH
48566: LD_VAR 0 15
48570: PUSH
48571: LD_INT 2
48573: ARRAY
48574: ST_TO_ADDR
// for i = 1 to hexes do
48575: LD_ADDR_VAR 0 7
48579: PUSH
48580: DOUBLE
48581: LD_INT 1
48583: DEC
48584: ST_TO_ADDR
48585: LD_VAR 0 12
48589: PUSH
48590: FOR_TO
48591: IFFALSE 48921
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48593: LD_VAR 0 12
48597: PUSH
48598: LD_VAR 0 7
48602: ARRAY
48603: PUSH
48604: LD_INT 1
48606: ARRAY
48607: PPUSH
48608: LD_VAR 0 12
48612: PUSH
48613: LD_VAR 0 7
48617: ARRAY
48618: PUSH
48619: LD_INT 2
48621: ARRAY
48622: PPUSH
48623: CALL_OW 488
48627: NOT
48628: PUSH
48629: LD_VAR 0 12
48633: PUSH
48634: LD_VAR 0 7
48638: ARRAY
48639: PUSH
48640: LD_INT 1
48642: ARRAY
48643: PPUSH
48644: LD_VAR 0 12
48648: PUSH
48649: LD_VAR 0 7
48653: ARRAY
48654: PUSH
48655: LD_INT 2
48657: ARRAY
48658: PPUSH
48659: CALL_OW 428
48663: PUSH
48664: LD_INT 0
48666: GREATER
48667: OR
48668: PUSH
48669: LD_VAR 0 12
48673: PUSH
48674: LD_VAR 0 7
48678: ARRAY
48679: PUSH
48680: LD_INT 1
48682: ARRAY
48683: PPUSH
48684: LD_VAR 0 12
48688: PUSH
48689: LD_VAR 0 7
48693: ARRAY
48694: PUSH
48695: LD_INT 2
48697: ARRAY
48698: PPUSH
48699: CALL_OW 351
48703: OR
48704: IFFALSE 48710
// exit ;
48706: POP
48707: POP
48708: GO 49017
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48710: LD_ADDR_VAR 0 8
48714: PUSH
48715: LD_VAR 0 12
48719: PUSH
48720: LD_VAR 0 7
48724: ARRAY
48725: PUSH
48726: LD_INT 1
48728: ARRAY
48729: PPUSH
48730: LD_VAR 0 12
48734: PUSH
48735: LD_VAR 0 7
48739: ARRAY
48740: PUSH
48741: LD_INT 2
48743: ARRAY
48744: PPUSH
48745: CALL_OW 546
48749: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48750: LD_VAR 0 8
48754: PUSH
48755: LD_INT 1
48757: ARRAY
48758: PUSH
48759: LD_VAR 0 8
48763: PUSH
48764: LD_INT 2
48766: ARRAY
48767: PUSH
48768: LD_VAR 0 13
48772: PUSH
48773: LD_INT 2
48775: PLUS
48776: GREATER
48777: OR
48778: PUSH
48779: LD_VAR 0 8
48783: PUSH
48784: LD_INT 2
48786: ARRAY
48787: PUSH
48788: LD_VAR 0 13
48792: PUSH
48793: LD_INT 2
48795: MINUS
48796: LESS
48797: OR
48798: PUSH
48799: LD_VAR 0 8
48803: PUSH
48804: LD_INT 3
48806: ARRAY
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: LD_INT 8
48813: PUSH
48814: LD_INT 9
48816: PUSH
48817: LD_INT 10
48819: PUSH
48820: LD_INT 11
48822: PUSH
48823: LD_INT 12
48825: PUSH
48826: LD_INT 13
48828: PUSH
48829: LD_INT 16
48831: PUSH
48832: LD_INT 17
48834: PUSH
48835: LD_INT 18
48837: PUSH
48838: LD_INT 19
48840: PUSH
48841: LD_INT 20
48843: PUSH
48844: LD_INT 21
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: IN
48862: NOT
48863: OR
48864: PUSH
48865: LD_VAR 0 8
48869: PUSH
48870: LD_INT 5
48872: ARRAY
48873: NOT
48874: OR
48875: PUSH
48876: LD_VAR 0 8
48880: PUSH
48881: LD_INT 6
48883: ARRAY
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: LD_INT 7
48893: PUSH
48894: LD_INT 9
48896: PUSH
48897: LD_INT 10
48899: PUSH
48900: LD_INT 11
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: IN
48911: NOT
48912: OR
48913: IFFALSE 48919
// exit ;
48915: POP
48916: POP
48917: GO 49017
// end ;
48919: GO 48590
48921: POP
48922: POP
// side := GetSide ( depot ) ;
48923: LD_ADDR_VAR 0 9
48927: PUSH
48928: LD_VAR 0 1
48932: PPUSH
48933: CALL_OW 255
48937: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48938: LD_VAR 0 9
48942: PPUSH
48943: LD_VAR 0 3
48947: PPUSH
48948: LD_VAR 0 4
48952: PPUSH
48953: LD_INT 20
48955: PPUSH
48956: CALL 41671 0 4
48960: PUSH
48961: LD_INT 4
48963: ARRAY
48964: IFFALSE 48968
// exit ;
48966: GO 49017
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48968: LD_VAR 0 2
48972: PUSH
48973: LD_INT 29
48975: PUSH
48976: LD_INT 30
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: IN
48983: PUSH
48984: LD_VAR 0 3
48988: PPUSH
48989: LD_VAR 0 4
48993: PPUSH
48994: LD_VAR 0 9
48998: PPUSH
48999: CALL_OW 440
49003: NOT
49004: AND
49005: IFFALSE 49009
// exit ;
49007: GO 49017
// result := true ;
49009: LD_ADDR_VAR 0 6
49013: PUSH
49014: LD_INT 1
49016: ST_TO_ADDR
// end ;
49017: LD_VAR 0 6
49021: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49022: LD_INT 0
49024: PPUSH
49025: PPUSH
49026: PPUSH
49027: PPUSH
49028: PPUSH
49029: PPUSH
49030: PPUSH
49031: PPUSH
49032: PPUSH
49033: PPUSH
49034: PPUSH
49035: PPUSH
49036: PPUSH
49037: PPUSH
49038: PPUSH
49039: PPUSH
49040: PPUSH
49041: PPUSH
49042: PPUSH
49043: PPUSH
49044: PPUSH
49045: PPUSH
49046: PPUSH
49047: PPUSH
49048: PPUSH
49049: PPUSH
49050: PPUSH
49051: PPUSH
49052: PPUSH
49053: PPUSH
49054: PPUSH
49055: PPUSH
49056: PPUSH
49057: PPUSH
49058: PPUSH
49059: PPUSH
49060: PPUSH
49061: PPUSH
49062: PPUSH
49063: PPUSH
49064: PPUSH
49065: PPUSH
49066: PPUSH
49067: PPUSH
49068: PPUSH
49069: PPUSH
49070: PPUSH
49071: PPUSH
49072: PPUSH
49073: PPUSH
49074: PPUSH
49075: PPUSH
49076: PPUSH
49077: PPUSH
49078: PPUSH
49079: PPUSH
49080: PPUSH
49081: PPUSH
// result = [ ] ;
49082: LD_ADDR_VAR 0 7
49086: PUSH
49087: EMPTY
49088: ST_TO_ADDR
// temp_list = [ ] ;
49089: LD_ADDR_VAR 0 9
49093: PUSH
49094: EMPTY
49095: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49096: LD_VAR 0 4
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: LD_INT 2
49109: PUSH
49110: LD_INT 3
49112: PUSH
49113: LD_INT 4
49115: PUSH
49116: LD_INT 5
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: IN
49127: NOT
49128: PUSH
49129: LD_VAR 0 1
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: IN
49144: PUSH
49145: LD_VAR 0 5
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: LD_INT 3
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: LIST
49163: IN
49164: NOT
49165: AND
49166: OR
49167: IFFALSE 49171
// exit ;
49169: GO 67562
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49171: LD_VAR 0 1
49175: PUSH
49176: LD_INT 6
49178: PUSH
49179: LD_INT 7
49181: PUSH
49182: LD_INT 8
49184: PUSH
49185: LD_INT 13
49187: PUSH
49188: LD_INT 12
49190: PUSH
49191: LD_INT 15
49193: PUSH
49194: LD_INT 11
49196: PUSH
49197: LD_INT 14
49199: PUSH
49200: LD_INT 10
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: IN
49214: IFFALSE 49224
// btype = b_lab ;
49216: LD_ADDR_VAR 0 1
49220: PUSH
49221: LD_INT 6
49223: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49224: LD_VAR 0 6
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 2
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: LIST
49242: IN
49243: NOT
49244: PUSH
49245: LD_VAR 0 1
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: LD_INT 2
49258: PUSH
49259: LD_INT 3
49261: PUSH
49262: LD_INT 6
49264: PUSH
49265: LD_INT 36
49267: PUSH
49268: LD_INT 4
49270: PUSH
49271: LD_INT 5
49273: PUSH
49274: LD_INT 31
49276: PUSH
49277: LD_INT 32
49279: PUSH
49280: LD_INT 33
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: IN
49296: NOT
49297: PUSH
49298: LD_VAR 0 6
49302: PUSH
49303: LD_INT 1
49305: EQUAL
49306: AND
49307: OR
49308: PUSH
49309: LD_VAR 0 1
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: LD_INT 3
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: IN
49324: NOT
49325: PUSH
49326: LD_VAR 0 6
49330: PUSH
49331: LD_INT 2
49333: EQUAL
49334: AND
49335: OR
49336: IFFALSE 49346
// mode = 0 ;
49338: LD_ADDR_VAR 0 6
49342: PUSH
49343: LD_INT 0
49345: ST_TO_ADDR
// case mode of 0 :
49346: LD_VAR 0 6
49350: PUSH
49351: LD_INT 0
49353: DOUBLE
49354: EQUAL
49355: IFTRUE 49359
49357: GO 60812
49359: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49360: LD_ADDR_VAR 0 11
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: LD_INT 2
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: LD_INT 2
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: LD_INT 3
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: LD_INT 3
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49553: LD_ADDR_VAR 0 12
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: LD_INT 1
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 2
49687: NEG
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 2
49699: NEG
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 3
49710: NEG
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 3
49721: NEG
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49749: LD_ADDR_VAR 0 13
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: LD_INT 1
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: LD_INT 2
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 2
49884: NEG
49885: PUSH
49886: LD_INT 2
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: LD_INT 3
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 3
49908: NEG
49909: PUSH
49910: LD_INT 2
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 3
49920: NEG
49921: PUSH
49922: LD_INT 3
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49948: LD_ADDR_VAR 0 14
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: LD_INT 2
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: LD_INT 2
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: LD_INT 2
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: LD_INT 2
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: LD_INT 3
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 3
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50144: LD_ADDR_VAR 0 15
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 2
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 2
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: NEG
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 2
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 3
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 3
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50337: LD_ADDR_VAR 0 16
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: LD_INT 2
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: LD_INT 2
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: LD_INT 1
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: LD_INT 2
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 3
50484: PUSH
50485: LD_INT 2
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 3
50494: PUSH
50495: LD_INT 3
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 2
50504: PUSH
50505: LD_INT 3
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50530: LD_ADDR_VAR 0 17
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: LD_INT 1
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 1
50611: NEG
50612: PUSH
50613: LD_INT 2
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 2
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 2
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 2
50665: PUSH
50666: LD_INT 2
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: LD_INT 2
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: LD_INT 2
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 2
50706: NEG
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 2
50729: NEG
50730: PUSH
50731: LD_INT 2
50733: NEG
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50760: LD_ADDR_VAR 0 18
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: LD_INT 2
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: LD_INT 2
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 2
50936: NEG
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: LD_INT 2
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50990: LD_ADDR_VAR 0 19
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: NEG
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 2
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 2
51125: PUSH
51126: LD_INT 2
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: LD_INT 2
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: LD_INT 2
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 2
51166: NEG
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: LD_INT 2
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51220: LD_ADDR_VAR 0 20
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: LD_INT 2
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: LD_INT 2
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: LD_INT 2
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: LD_INT 2
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 2
51407: NEG
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: LD_INT 2
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51450: LD_ADDR_VAR 0 21
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: LD_INT 1
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 2
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 2
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: LD_INT 2
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 2
51626: NEG
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 2
51637: NEG
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: LD_INT 2
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51680: LD_ADDR_VAR 0 22
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: LD_INT 2
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 2
51856: NEG
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 2
51867: NEG
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 2
51879: NEG
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51910: LD_ADDR_VAR 0 23
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: LD_INT 1
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: LD_INT 2
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 2
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 2
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 2
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: LD_INT 2
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 2
52097: NEG
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 2
52109: NEG
52110: PUSH
52111: LD_INT 2
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 2
52121: NEG
52122: PUSH
52123: LD_INT 3
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: LD_INT 3
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: LD_INT 2
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 2
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52190: LD_ADDR_VAR 0 24
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: LD_INT 2
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: LD_INT 2
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 2
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 2
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: PUSH
52326: LD_INT 2
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: LD_INT 2
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: LD_INT 2
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 2
52377: NEG
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: NEG
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 3
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 3
52433: PUSH
52434: LD_INT 2
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52466: LD_ADDR_VAR 0 25
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: LD_INT 2
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 0
52559: PUSH
52560: LD_INT 2
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 2
52642: NEG
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 2
52665: NEG
52666: PUSH
52667: LD_INT 2
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 3
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 3
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 2
52697: PUSH
52698: LD_INT 3
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: LD_INT 3
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52740: LD_ADDR_VAR 0 26
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: LD_INT 2
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 2
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: LD_INT 1
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 2
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: LD_INT 2
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: LD_INT 2
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: LD_INT 2
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: NEG
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 2
52927: NEG
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 2
52939: NEG
52940: PUSH
52941: LD_INT 2
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: LD_INT 3
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: LD_INT 3
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 2
52982: NEG
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53016: LD_ADDR_VAR 0 27
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: LD_INT 2
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 2
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 2
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 2
53192: NEG
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 2
53203: NEG
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 2
53215: NEG
53216: PUSH
53217: LD_INT 2
53219: NEG
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: LD_INT 2
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 2
53238: NEG
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 3
53249: NEG
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 3
53261: NEG
53262: PUSH
53263: LD_INT 2
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53296: LD_ADDR_VAR 0 28
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 2
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 2
53507: NEG
53508: PUSH
53509: LD_INT 3
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: LD_INT 3
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 3
53531: NEG
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 3
53543: NEG
53544: PUSH
53545: LD_INT 2
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53578: LD_ADDR_VAR 0 29
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: LD_INT 2
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 2
53744: NEG
53745: PUSH
53746: LD_INT 1
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 2
53756: NEG
53757: PUSH
53758: LD_INT 2
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: LD_INT 3
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 2
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 3
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: LD_INT 3
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 3
53822: NEG
53823: PUSH
53824: LD_INT 2
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53857: LD_ADDR_VAR 0 30
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: LD_INT 2
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: LD_INT 2
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 2
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: NEG
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: LD_INT 3
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 3
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: LD_INT 3
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 2
54089: NEG
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 3
54100: NEG
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54135: LD_ADDR_VAR 0 31
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: LD_INT 1
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 2
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 2
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 2
54300: NEG
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 2
54312: NEG
54313: PUSH
54314: LD_INT 2
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: LD_INT 3
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 2
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 3
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: LD_INT 3
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: NEG
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 3
54378: NEG
54379: PUSH
54380: LD_INT 2
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54413: LD_ADDR_VAR 0 32
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: LD_INT 2
54498: NEG
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: LD_INT 2
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: LD_INT 2
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: LD_INT 2
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: LD_INT 2
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 2
54579: NEG
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 2
54590: NEG
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: LD_INT 3
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: LD_INT 2
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 3
54625: PUSH
54626: LD_INT 2
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 2
54635: PUSH
54636: LD_INT 3
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 2
54645: NEG
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 3
54656: NEG
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54691: LD_ADDR_VAR 0 33
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 2
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 2
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 2
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 2
54846: NEG
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 2
54857: NEG
54858: PUSH
54859: LD_INT 1
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 2
54869: NEG
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: LD_INT 3
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 2
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 3
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: LD_INT 3
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: LD_INT 2
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 3
54935: NEG
54936: PUSH
54937: LD_INT 2
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54970: LD_ADDR_VAR 0 34
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: LD_INT 2
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: NEG
55150: PUSH
55151: LD_INT 2
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: LD_INT 3
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 3
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: PUSH
55195: LD_INT 3
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 3
55215: NEG
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55250: LD_ADDR_VAR 0 35
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 2
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 2
55341: NEG
55342: PUSH
55343: LD_INT 1
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55362: LD_ADDR_VAR 0 36
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: LD_INT 2
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: LD_INT 2
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55474: LD_ADDR_VAR 0 37
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55586: LD_ADDR_VAR 0 38
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55698: LD_ADDR_VAR 0 39
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: LD_INT 2
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55810: LD_ADDR_VAR 0 40
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: LD_INT 1
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55922: LD_ADDR_VAR 0 41
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: LD_INT 2
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 2
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 2
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 2
56046: PUSH
56047: LD_INT 2
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: LD_INT 2
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: NEG
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 2
56077: NEG
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 2
56088: NEG
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 2
56100: NEG
56101: PUSH
56102: LD_INT 2
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 2
56112: NEG
56113: PUSH
56114: LD_INT 3
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 3
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 3
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 3
56155: PUSH
56156: LD_INT 2
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 3
56165: PUSH
56166: LD_INT 3
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 2
56175: PUSH
56176: LD_INT 3
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 3
56196: NEG
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 3
56207: NEG
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 3
56219: NEG
56220: PUSH
56221: LD_INT 2
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 3
56231: NEG
56232: PUSH
56233: LD_INT 3
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56272: LD_ADDR_VAR 0 42
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: NEG
56354: PUSH
56355: LD_INT 2
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 2
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: LD_INT 2
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: LD_INT 2
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 2
56438: NEG
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 2
56450: NEG
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 2
56462: NEG
56463: PUSH
56464: LD_INT 3
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: LD_INT 3
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: LD_INT 3
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 2
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 3
56508: PUSH
56509: LD_INT 2
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 3
56518: PUSH
56519: LD_INT 3
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: LD_INT 3
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: LD_INT 3
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: LD_INT 3
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 3
56569: NEG
56570: PUSH
56571: LD_INT 2
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 3
56581: NEG
56582: PUSH
56583: LD_INT 3
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56622: LD_ADDR_VAR 0 43
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 1
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: LD_INT 2
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: LD_INT 2
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 2
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 2
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: LD_INT 2
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: LD_INT 2
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: NEG
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 2
56788: NEG
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 2
56799: NEG
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: LD_INT 3
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: LD_INT 3
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: LD_INT 2
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 2
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 3
56856: PUSH
56857: LD_INT 0
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 3
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: LD_INT 3
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: LD_INT 3
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 2
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 2
56907: NEG
56908: PUSH
56909: LD_INT 1
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 3
56918: NEG
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 3
56929: NEG
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56970: LD_ADDR_VAR 0 44
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: LD_INT 1
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: LD_INT 2
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 2
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: LD_INT 1
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 2
57125: NEG
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 2
57148: NEG
57149: PUSH
57150: LD_INT 2
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 2
57160: NEG
57161: PUSH
57162: LD_INT 3
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 2
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 3
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 3
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 3
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 3
57213: PUSH
57214: LD_INT 3
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: LD_INT 3
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 2
57233: NEG
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 3
57244: NEG
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 3
57255: NEG
57256: PUSH
57257: LD_INT 1
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 3
57267: NEG
57268: PUSH
57269: LD_INT 2
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 3
57279: NEG
57280: PUSH
57281: LD_INT 3
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57320: LD_ADDR_VAR 0 45
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 1
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: LD_INT 2
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 2
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 2
57445: PUSH
57446: LD_INT 2
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: LD_INT 2
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: LD_INT 2
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: LD_INT 1
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 2
57498: NEG
57499: PUSH
57500: LD_INT 2
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 2
57510: NEG
57511: PUSH
57512: LD_INT 3
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: LD_INT 3
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: LD_INT 3
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: LD_INT 2
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 3
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 3
57566: PUSH
57567: LD_INT 3
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 2
57576: PUSH
57577: LD_INT 3
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: LD_INT 3
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: LD_INT 3
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 3
57617: NEG
57618: PUSH
57619: LD_INT 2
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 3
57629: NEG
57630: PUSH
57631: LD_INT 3
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57670: LD_ADDR_VAR 0 46
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: LD_INT 1
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: LD_INT 1
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: LD_INT 1
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: NEG
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 1
57739: NEG
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: LD_INT 2
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: LD_INT 2
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 1
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 2
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 2
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: LD_INT 2
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: LD_INT 2
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: NEG
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 2
57847: NEG
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: LD_INT 3
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: LD_INT 3
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: LD_INT 2
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 2
57893: PUSH
57894: LD_INT 1
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 3
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 3
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: LD_INT 3
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 0
57934: PUSH
57935: LD_INT 3
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: LD_INT 2
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 2
57955: NEG
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 3
57966: NEG
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 3
57977: NEG
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58018: LD_ADDR_VAR 0 47
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: LD_INT 1
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: NEG
58100: PUSH
58101: LD_INT 2
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 2
58133: NEG
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 2
58145: NEG
58146: PUSH
58147: LD_INT 2
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58169: LD_ADDR_VAR 0 48
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: NEG
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: LD_INT 2
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 2
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 2
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58316: LD_ADDR_VAR 0 49
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 1
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 2
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 2
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 2
58428: PUSH
58429: LD_INT 2
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: LD_INT 2
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58460: LD_ADDR_VAR 0 50
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: LD_INT 1
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 2
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: LD_INT 2
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 1
58561: PUSH
58562: LD_INT 2
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_INT 2
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58604: LD_ADDR_VAR 0 51
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: LD_INT 1
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 1
58642: PUSH
58643: LD_INT 1
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: LD_INT 1
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: LD_INT 2
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: LD_INT 2
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: LD_INT 1
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 2
58716: NEG
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 2
58727: NEG
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58751: LD_ADDR_VAR 0 52
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: LD_INT 1
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: LD_INT 2
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 2
58855: NEG
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 2
58878: NEG
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58902: LD_ADDR_VAR 0 53
58906: PUSH
58907: LD_INT 0
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: LD_INT 1
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 1
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: PUSH
58941: LD_INT 1
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 2
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 2
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 2
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: LD_INT 2
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: LD_INT 2
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 2
59078: NEG
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 2
59089: NEG
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 2
59101: NEG
59102: PUSH
59103: LD_INT 2
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59132: LD_ADDR_VAR 0 54
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: LD_INT 1
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: LD_INT 0
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 0
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: LD_INT 1
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: LD_INT 2
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 1
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 2
59247: PUSH
59248: LD_INT 0
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 2
59257: PUSH
59258: LD_INT 1
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 2
59267: PUSH
59268: LD_INT 2
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: LD_INT 2
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 0
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 1
59297: NEG
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 2
59308: NEG
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 2
59319: NEG
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 2
59331: NEG
59332: PUSH
59333: LD_INT 2
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59362: LD_ADDR_VAR 0 55
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: LD_INT 1
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 1
59431: NEG
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: LD_INT 2
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: LD_INT 2
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 2
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 2
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 2
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: LD_INT 2
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 1
59527: NEG
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 2
59538: NEG
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 2
59549: NEG
59550: PUSH
59551: LD_INT 1
59553: NEG
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: LD_INT 2
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59592: LD_ADDR_VAR 0 56
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 1
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 1
59661: NEG
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: LD_INT 2
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: LD_INT 2
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 2
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 2
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 2
59727: PUSH
59728: LD_INT 2
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: PUSH
59738: LD_INT 2
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: LD_INT 2
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 2
59768: NEG
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 2
59779: NEG
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 2
59791: NEG
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59822: LD_ADDR_VAR 0 57
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 1
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: NEG
59892: PUSH
59893: LD_INT 1
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: LD_INT 2
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: LD_INT 2
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: LD_INT 1
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 2
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 2
59947: PUSH
59948: LD_INT 1
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: LD_INT 2
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: LD_INT 2
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 0
59977: PUSH
59978: LD_INT 2
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 1
59987: NEG
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: LD_INT 0
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 2
60009: NEG
60010: PUSH
60011: LD_INT 1
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 2
60021: NEG
60022: PUSH
60023: LD_INT 2
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60052: LD_ADDR_VAR 0 58
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: LD_INT 1
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: PUSH
60123: LD_INT 1
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: PUSH
60135: LD_INT 2
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: LD_INT 2
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: PUSH
60157: LD_INT 1
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 2
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 2
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 2
60187: PUSH
60188: LD_INT 2
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: LD_INT 2
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: LD_INT 2
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 2
60228: NEG
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 2
60239: NEG
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 2
60251: NEG
60252: PUSH
60253: LD_INT 2
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60282: LD_ADDR_VAR 0 59
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: LD_INT 0
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: LD_INT 0
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: LD_INT 1
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: LD_INT 1
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: LD_INT 0
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60370: LD_ADDR_VAR 0 60
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: LD_INT 0
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 1
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: PUSH
60409: LD_INT 1
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 0
60418: PUSH
60419: LD_INT 1
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 1
60428: NEG
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60458: LD_ADDR_VAR 0 61
60462: PUSH
60463: LD_INT 0
60465: PUSH
60466: LD_INT 0
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: NEG
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60546: LD_ADDR_VAR 0 62
60550: PUSH
60551: LD_INT 0
60553: PUSH
60554: LD_INT 0
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 0
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 1
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 1
60584: PUSH
60585: LD_INT 1
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: LD_INT 1
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 1
60604: NEG
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60634: LD_ADDR_VAR 0 63
60638: PUSH
60639: LD_INT 0
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 1
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: PUSH
60673: LD_INT 1
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: LD_INT 1
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: NEG
60693: PUSH
60694: LD_INT 0
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60722: LD_ADDR_VAR 0 64
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 1
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 0
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 1
60780: NEG
60781: PUSH
60782: LD_INT 0
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: ST_TO_ADDR
// end ; 1 :
60810: GO 66707
60812: LD_INT 1
60814: DOUBLE
60815: EQUAL
60816: IFTRUE 60820
60818: GO 63443
60820: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60821: LD_ADDR_VAR 0 11
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: LD_INT 3
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 0
60840: PUSH
60841: LD_INT 3
60843: NEG
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 1
60851: PUSH
60852: LD_INT 2
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: LIST
60864: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60865: LD_ADDR_VAR 0 12
60869: PUSH
60870: LD_INT 2
60872: PUSH
60873: LD_INT 1
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 3
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 3
60893: PUSH
60894: LD_INT 1
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: LIST
60905: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60906: LD_ADDR_VAR 0 13
60910: PUSH
60911: LD_INT 3
60913: PUSH
60914: LD_INT 2
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 3
60923: PUSH
60924: LD_INT 3
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 2
60933: PUSH
60934: LD_INT 3
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: LIST
60945: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60946: LD_ADDR_VAR 0 14
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: LD_INT 3
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: LD_INT 3
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: NEG
60974: PUSH
60975: LD_INT 2
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: LIST
60986: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60987: LD_ADDR_VAR 0 15
60991: PUSH
60992: LD_INT 2
60994: NEG
60995: PUSH
60996: LD_INT 1
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 3
61005: NEG
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 3
61016: NEG
61017: PUSH
61018: LD_INT 1
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: LIST
61030: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61031: LD_ADDR_VAR 0 16
61035: PUSH
61036: LD_INT 2
61038: NEG
61039: PUSH
61040: LD_INT 3
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 3
61050: NEG
61051: PUSH
61052: LD_INT 2
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 3
61062: NEG
61063: PUSH
61064: LD_INT 3
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: LIST
61076: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61077: LD_ADDR_VAR 0 17
61081: PUSH
61082: LD_INT 1
61084: NEG
61085: PUSH
61086: LD_INT 3
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 0
61096: PUSH
61097: LD_INT 3
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 1
61107: PUSH
61108: LD_INT 2
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: LIST
61120: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61121: LD_ADDR_VAR 0 18
61125: PUSH
61126: LD_INT 2
61128: PUSH
61129: LD_INT 1
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 3
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 3
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: LIST
61161: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61162: LD_ADDR_VAR 0 19
61166: PUSH
61167: LD_INT 3
61169: PUSH
61170: LD_INT 2
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 3
61179: PUSH
61180: LD_INT 3
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 2
61189: PUSH
61190: LD_INT 3
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: LIST
61201: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61202: LD_ADDR_VAR 0 20
61206: PUSH
61207: LD_INT 1
61209: PUSH
61210: LD_INT 3
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: LD_INT 3
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: LD_INT 2
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: LIST
61242: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61243: LD_ADDR_VAR 0 21
61247: PUSH
61248: LD_INT 2
61250: NEG
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 3
61261: NEG
61262: PUSH
61263: LD_INT 0
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 3
61272: NEG
61273: PUSH
61274: LD_INT 1
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: LIST
61286: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61287: LD_ADDR_VAR 0 22
61291: PUSH
61292: LD_INT 2
61294: NEG
61295: PUSH
61296: LD_INT 3
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 3
61306: NEG
61307: PUSH
61308: LD_INT 2
61310: NEG
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 3
61318: NEG
61319: PUSH
61320: LD_INT 3
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: LIST
61332: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61333: LD_ADDR_VAR 0 23
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: LD_INT 3
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 1
61351: NEG
61352: PUSH
61353: LD_INT 4
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: LD_INT 3
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: LIST
61376: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61377: LD_ADDR_VAR 0 24
61381: PUSH
61382: LD_INT 3
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 3
61394: PUSH
61395: LD_INT 1
61397: NEG
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 4
61405: PUSH
61406: LD_INT 1
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: LIST
61417: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61418: LD_ADDR_VAR 0 25
61422: PUSH
61423: LD_INT 3
61425: PUSH
61426: LD_INT 3
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 4
61435: PUSH
61436: LD_INT 3
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 3
61445: PUSH
61446: LD_INT 4
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: LIST
61457: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61458: LD_ADDR_VAR 0 26
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: LD_INT 3
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: LD_INT 4
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 1
61485: NEG
61486: PUSH
61487: LD_INT 3
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: LIST
61498: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61499: LD_ADDR_VAR 0 27
61503: PUSH
61504: LD_INT 3
61506: NEG
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 3
61517: NEG
61518: PUSH
61519: LD_INT 1
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 4
61528: NEG
61529: PUSH
61530: LD_INT 1
61532: NEG
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: LIST
61542: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61543: LD_ADDR_VAR 0 28
61547: PUSH
61548: LD_INT 3
61550: NEG
61551: PUSH
61552: LD_INT 3
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 3
61562: NEG
61563: PUSH
61564: LD_INT 4
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 4
61574: NEG
61575: PUSH
61576: LD_INT 3
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: LIST
61588: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61589: LD_ADDR_VAR 0 29
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: LD_INT 3
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: LD_INT 3
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: LD_INT 2
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 1
61630: NEG
61631: PUSH
61632: LD_INT 4
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: LD_INT 4
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 1
61653: PUSH
61654: LD_INT 3
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 1
61664: NEG
61665: PUSH
61666: LD_INT 5
61668: NEG
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 0
61676: PUSH
61677: LD_INT 5
61679: NEG
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 1
61687: PUSH
61688: LD_INT 4
61690: NEG
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 1
61698: NEG
61699: PUSH
61700: LD_INT 6
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 0
61710: PUSH
61711: LD_INT 6
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 1
61721: PUSH
61722: LD_INT 5
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61744: LD_ADDR_VAR 0 30
61748: PUSH
61749: LD_INT 2
61751: PUSH
61752: LD_INT 1
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 3
61762: PUSH
61763: LD_INT 0
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 3
61772: PUSH
61773: LD_INT 1
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 3
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 4
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 4
61803: PUSH
61804: LD_INT 1
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 4
61813: PUSH
61814: LD_INT 1
61816: NEG
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 5
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 5
61834: PUSH
61835: LD_INT 1
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 5
61844: PUSH
61845: LD_INT 1
61847: NEG
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 6
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 6
61865: PUSH
61866: LD_INT 1
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61887: LD_ADDR_VAR 0 31
61891: PUSH
61892: LD_INT 3
61894: PUSH
61895: LD_INT 2
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 3
61904: PUSH
61905: LD_INT 3
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: LD_INT 3
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 4
61924: PUSH
61925: LD_INT 3
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 4
61934: PUSH
61935: LD_INT 4
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 3
61944: PUSH
61945: LD_INT 4
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 5
61954: PUSH
61955: LD_INT 4
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 5
61964: PUSH
61965: LD_INT 5
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 4
61974: PUSH
61975: LD_INT 5
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 6
61984: PUSH
61985: LD_INT 5
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 6
61994: PUSH
61995: LD_INT 6
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 5
62004: PUSH
62005: LD_INT 6
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62026: LD_ADDR_VAR 0 32
62030: PUSH
62031: LD_INT 1
62033: PUSH
62034: LD_INT 3
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 0
62043: PUSH
62044: LD_INT 3
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 1
62053: NEG
62054: PUSH
62055: LD_INT 2
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: LD_INT 4
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 0
62074: PUSH
62075: LD_INT 4
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: LD_INT 3
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 1
62095: PUSH
62096: LD_INT 5
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 0
62105: PUSH
62106: LD_INT 5
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 1
62115: NEG
62116: PUSH
62117: LD_INT 4
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: LD_INT 6
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: LD_INT 6
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: NEG
62147: PUSH
62148: LD_INT 5
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62169: LD_ADDR_VAR 0 33
62173: PUSH
62174: LD_INT 2
62176: NEG
62177: PUSH
62178: LD_INT 1
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 3
62187: NEG
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 3
62198: NEG
62199: PUSH
62200: LD_INT 1
62202: NEG
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 3
62210: NEG
62211: PUSH
62212: LD_INT 1
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 4
62221: NEG
62222: PUSH
62223: LD_INT 0
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 4
62232: NEG
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 4
62244: NEG
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 5
62255: NEG
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 5
62266: NEG
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 5
62278: NEG
62279: PUSH
62280: LD_INT 1
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 6
62289: NEG
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 6
62300: NEG
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62324: LD_ADDR_VAR 0 34
62328: PUSH
62329: LD_INT 2
62331: NEG
62332: PUSH
62333: LD_INT 3
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 3
62343: NEG
62344: PUSH
62345: LD_INT 2
62347: NEG
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 3
62355: NEG
62356: PUSH
62357: LD_INT 3
62359: NEG
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 3
62367: NEG
62368: PUSH
62369: LD_INT 4
62371: NEG
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 4
62379: NEG
62380: PUSH
62381: LD_INT 3
62383: NEG
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 4
62391: NEG
62392: PUSH
62393: LD_INT 4
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 4
62403: NEG
62404: PUSH
62405: LD_INT 5
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 5
62415: NEG
62416: PUSH
62417: LD_INT 4
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 5
62427: NEG
62428: PUSH
62429: LD_INT 5
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 5
62439: NEG
62440: PUSH
62441: LD_INT 6
62443: NEG
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 6
62451: NEG
62452: PUSH
62453: LD_INT 5
62455: NEG
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 6
62463: NEG
62464: PUSH
62465: LD_INT 6
62467: NEG
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62487: LD_ADDR_VAR 0 41
62491: PUSH
62492: LD_INT 0
62494: PUSH
62495: LD_INT 2
62497: NEG
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: LD_INT 3
62509: NEG
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 1
62517: PUSH
62518: LD_INT 2
62520: NEG
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: LIST
62530: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62531: LD_ADDR_VAR 0 42
62535: PUSH
62536: LD_INT 2
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 2
62548: PUSH
62549: LD_INT 1
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 3
62559: PUSH
62560: LD_INT 1
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: LIST
62571: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62572: LD_ADDR_VAR 0 43
62576: PUSH
62577: LD_INT 2
62579: PUSH
62580: LD_INT 2
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 3
62589: PUSH
62590: LD_INT 2
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 2
62599: PUSH
62600: LD_INT 3
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: LIST
62611: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62612: LD_ADDR_VAR 0 44
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: LD_INT 2
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 1
62629: PUSH
62630: LD_INT 3
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: NEG
62640: PUSH
62641: LD_INT 2
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: LIST
62652: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62653: LD_ADDR_VAR 0 45
62657: PUSH
62658: LD_INT 2
62660: NEG
62661: PUSH
62662: LD_INT 0
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 2
62671: NEG
62672: PUSH
62673: LD_INT 1
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 3
62682: NEG
62683: PUSH
62684: LD_INT 1
62686: NEG
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: LIST
62696: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62697: LD_ADDR_VAR 0 46
62701: PUSH
62702: LD_INT 2
62704: NEG
62705: PUSH
62706: LD_INT 2
62708: NEG
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 2
62716: NEG
62717: PUSH
62718: LD_INT 3
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 3
62728: NEG
62729: PUSH
62730: LD_INT 2
62732: NEG
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: LIST
62742: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62743: LD_ADDR_VAR 0 47
62747: PUSH
62748: LD_INT 2
62750: NEG
62751: PUSH
62752: LD_INT 3
62754: NEG
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: LD_INT 3
62766: NEG
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62776: LD_ADDR_VAR 0 48
62780: PUSH
62781: LD_INT 1
62783: PUSH
62784: LD_INT 2
62786: NEG
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 2
62794: PUSH
62795: LD_INT 1
62797: NEG
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62807: LD_ADDR_VAR 0 49
62811: PUSH
62812: LD_INT 3
62814: PUSH
62815: LD_INT 1
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 3
62824: PUSH
62825: LD_INT 2
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62836: LD_ADDR_VAR 0 50
62840: PUSH
62841: LD_INT 2
62843: PUSH
62844: LD_INT 3
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 1
62853: PUSH
62854: LD_INT 3
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62865: LD_ADDR_VAR 0 51
62869: PUSH
62870: LD_INT 1
62872: NEG
62873: PUSH
62874: LD_INT 2
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 2
62883: NEG
62884: PUSH
62885: LD_INT 1
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62896: LD_ADDR_VAR 0 52
62900: PUSH
62901: LD_INT 3
62903: NEG
62904: PUSH
62905: LD_INT 1
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 3
62915: NEG
62916: PUSH
62917: LD_INT 2
62919: NEG
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62929: LD_ADDR_VAR 0 53
62933: PUSH
62934: LD_INT 1
62936: NEG
62937: PUSH
62938: LD_INT 3
62940: NEG
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: LD_INT 3
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 1
62959: PUSH
62960: LD_INT 2
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: LIST
62972: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62973: LD_ADDR_VAR 0 54
62977: PUSH
62978: LD_INT 2
62980: PUSH
62981: LD_INT 1
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 3
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 3
63001: PUSH
63002: LD_INT 1
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: LIST
63013: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63014: LD_ADDR_VAR 0 55
63018: PUSH
63019: LD_INT 3
63021: PUSH
63022: LD_INT 2
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 3
63031: PUSH
63032: LD_INT 3
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 2
63041: PUSH
63042: LD_INT 3
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: LIST
63053: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63054: LD_ADDR_VAR 0 56
63058: PUSH
63059: LD_INT 1
63061: PUSH
63062: LD_INT 3
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: LD_INT 3
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 1
63081: NEG
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: LIST
63094: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63095: LD_ADDR_VAR 0 57
63099: PUSH
63100: LD_INT 2
63102: NEG
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 3
63113: NEG
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 3
63124: NEG
63125: PUSH
63126: LD_INT 1
63128: NEG
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: LIST
63138: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63139: LD_ADDR_VAR 0 58
63143: PUSH
63144: LD_INT 2
63146: NEG
63147: PUSH
63148: LD_INT 3
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 3
63158: NEG
63159: PUSH
63160: LD_INT 2
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 3
63170: NEG
63171: PUSH
63172: LD_INT 3
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: LIST
63184: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63185: LD_ADDR_VAR 0 59
63189: PUSH
63190: LD_INT 1
63192: NEG
63193: PUSH
63194: LD_INT 2
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 0
63204: PUSH
63205: LD_INT 2
63207: NEG
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 1
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: LIST
63228: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63229: LD_ADDR_VAR 0 60
63233: PUSH
63234: LD_INT 1
63236: PUSH
63237: LD_INT 1
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 2
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 2
63257: PUSH
63258: LD_INT 1
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: LIST
63269: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63270: LD_ADDR_VAR 0 61
63274: PUSH
63275: LD_INT 2
63277: PUSH
63278: LD_INT 1
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 2
63287: PUSH
63288: LD_INT 2
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 1
63297: PUSH
63298: LD_INT 2
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: LIST
63309: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63310: LD_ADDR_VAR 0 62
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: LD_INT 2
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: LD_INT 2
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 1
63337: NEG
63338: PUSH
63339: LD_INT 1
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: LIST
63350: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63351: LD_ADDR_VAR 0 63
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: LD_INT 1
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 2
63369: NEG
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 2
63380: NEG
63381: PUSH
63382: LD_INT 1
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: LIST
63394: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63395: LD_ADDR_VAR 0 64
63399: PUSH
63400: LD_INT 1
63402: NEG
63403: PUSH
63404: LD_INT 2
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 2
63414: NEG
63415: PUSH
63416: LD_INT 1
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 2
63426: NEG
63427: PUSH
63428: LD_INT 2
63430: NEG
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: LIST
63440: ST_TO_ADDR
// end ; 2 :
63441: GO 66707
63443: LD_INT 2
63445: DOUBLE
63446: EQUAL
63447: IFTRUE 63451
63449: GO 66706
63451: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63452: LD_ADDR_VAR 0 29
63456: PUSH
63457: LD_INT 4
63459: PUSH
63460: LD_INT 0
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 4
63469: PUSH
63470: LD_INT 1
63472: NEG
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 5
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 5
63490: PUSH
63491: LD_INT 1
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 4
63500: PUSH
63501: LD_INT 1
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 3
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 3
63520: PUSH
63521: LD_INT 1
63523: NEG
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 3
63531: PUSH
63532: LD_INT 2
63534: NEG
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 5
63542: PUSH
63543: LD_INT 2
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 3
63552: PUSH
63553: LD_INT 3
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 3
63562: PUSH
63563: LD_INT 2
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 4
63572: PUSH
63573: LD_INT 3
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 4
63582: PUSH
63583: LD_INT 4
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 3
63592: PUSH
63593: LD_INT 4
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 2
63602: PUSH
63603: LD_INT 3
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 2
63612: PUSH
63613: LD_INT 2
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 4
63622: PUSH
63623: LD_INT 2
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 2
63632: PUSH
63633: LD_INT 4
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: LD_INT 4
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 0
63652: PUSH
63653: LD_INT 3
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 1
63662: PUSH
63663: LD_INT 4
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: LD_INT 5
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 0
63682: PUSH
63683: LD_INT 5
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: LD_INT 4
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: LD_INT 3
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 2
63714: PUSH
63715: LD_INT 5
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 2
63724: NEG
63725: PUSH
63726: LD_INT 3
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 3
63735: NEG
63736: PUSH
63737: LD_INT 0
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 3
63746: NEG
63747: PUSH
63748: LD_INT 1
63750: NEG
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 2
63758: NEG
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 2
63769: NEG
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 3
63780: NEG
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 4
63791: NEG
63792: PUSH
63793: LD_INT 0
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 4
63802: NEG
63803: PUSH
63804: LD_INT 1
63806: NEG
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 4
63814: NEG
63815: PUSH
63816: LD_INT 2
63818: NEG
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 2
63826: NEG
63827: PUSH
63828: LD_INT 2
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 4
63837: NEG
63838: PUSH
63839: LD_INT 4
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 4
63849: NEG
63850: PUSH
63851: LD_INT 5
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 3
63861: NEG
63862: PUSH
63863: LD_INT 4
63865: NEG
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 3
63873: NEG
63874: PUSH
63875: LD_INT 3
63877: NEG
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 4
63885: NEG
63886: PUSH
63887: LD_INT 3
63889: NEG
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 5
63897: NEG
63898: PUSH
63899: LD_INT 4
63901: NEG
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 5
63909: NEG
63910: PUSH
63911: LD_INT 5
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 3
63921: NEG
63922: PUSH
63923: LD_INT 5
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 5
63933: NEG
63934: PUSH
63935: LD_INT 3
63937: NEG
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63990: LD_ADDR_VAR 0 30
63994: PUSH
63995: LD_INT 4
63997: PUSH
63998: LD_INT 4
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 4
64007: PUSH
64008: LD_INT 3
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 5
64017: PUSH
64018: LD_INT 4
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 5
64027: PUSH
64028: LD_INT 5
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 4
64037: PUSH
64038: LD_INT 5
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 3
64047: PUSH
64048: LD_INT 4
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 3
64057: PUSH
64058: LD_INT 3
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 5
64067: PUSH
64068: LD_INT 3
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 3
64077: PUSH
64078: LD_INT 5
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 0
64087: PUSH
64088: LD_INT 3
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 0
64097: PUSH
64098: LD_INT 2
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: LD_INT 3
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 1
64117: PUSH
64118: LD_INT 4
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 0
64127: PUSH
64128: LD_INT 4
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 1
64137: NEG
64138: PUSH
64139: LD_INT 3
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 1
64148: NEG
64149: PUSH
64150: LD_INT 2
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 2
64159: PUSH
64160: LD_INT 4
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 2
64169: NEG
64170: PUSH
64171: LD_INT 2
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 4
64180: NEG
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 4
64191: NEG
64192: PUSH
64193: LD_INT 1
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 3
64203: NEG
64204: PUSH
64205: LD_INT 0
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 3
64214: NEG
64215: PUSH
64216: LD_INT 1
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 4
64225: NEG
64226: PUSH
64227: LD_INT 1
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 5
64236: NEG
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 5
64247: NEG
64248: PUSH
64249: LD_INT 1
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 5
64259: NEG
64260: PUSH
64261: LD_INT 2
64263: NEG
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 3
64271: NEG
64272: PUSH
64273: LD_INT 2
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 3
64282: NEG
64283: PUSH
64284: LD_INT 3
64286: NEG
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 3
64294: NEG
64295: PUSH
64296: LD_INT 4
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 2
64306: NEG
64307: PUSH
64308: LD_INT 3
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 2
64318: NEG
64319: PUSH
64320: LD_INT 2
64322: NEG
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 3
64330: NEG
64331: PUSH
64332: LD_INT 2
64334: NEG
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 4
64342: NEG
64343: PUSH
64344: LD_INT 3
64346: NEG
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 4
64354: NEG
64355: PUSH
64356: LD_INT 4
64358: NEG
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 2
64366: NEG
64367: PUSH
64368: LD_INT 4
64370: NEG
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 4
64378: NEG
64379: PUSH
64380: LD_INT 2
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 0
64390: PUSH
64391: LD_INT 4
64393: NEG
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: LD_INT 5
64404: NEG
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 1
64412: PUSH
64413: LD_INT 4
64415: NEG
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 1
64423: PUSH
64424: LD_INT 3
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: LD_INT 3
64437: NEG
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 1
64445: NEG
64446: PUSH
64447: LD_INT 4
64449: NEG
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 1
64457: NEG
64458: PUSH
64459: LD_INT 5
64461: NEG
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 2
64469: PUSH
64470: LD_INT 3
64472: NEG
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 2
64480: NEG
64481: PUSH
64482: LD_INT 5
64484: NEG
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64537: LD_ADDR_VAR 0 31
64541: PUSH
64542: LD_INT 0
64544: PUSH
64545: LD_INT 4
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 0
64554: PUSH
64555: LD_INT 3
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 1
64564: PUSH
64565: LD_INT 4
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 1
64574: PUSH
64575: LD_INT 5
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: LD_INT 5
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: LD_INT 4
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: NEG
64606: PUSH
64607: LD_INT 3
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 2
64616: PUSH
64617: LD_INT 5
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 2
64626: NEG
64627: PUSH
64628: LD_INT 3
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 3
64637: NEG
64638: PUSH
64639: LD_INT 0
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 3
64648: NEG
64649: PUSH
64650: LD_INT 1
64652: NEG
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 2
64660: NEG
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 2
64671: NEG
64672: PUSH
64673: LD_INT 1
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 3
64682: NEG
64683: PUSH
64684: LD_INT 1
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 4
64693: NEG
64694: PUSH
64695: LD_INT 0
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 4
64704: NEG
64705: PUSH
64706: LD_INT 1
64708: NEG
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 4
64716: NEG
64717: PUSH
64718: LD_INT 2
64720: NEG
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 2
64728: NEG
64729: PUSH
64730: LD_INT 2
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 4
64739: NEG
64740: PUSH
64741: LD_INT 4
64743: NEG
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 4
64751: NEG
64752: PUSH
64753: LD_INT 5
64755: NEG
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 3
64763: NEG
64764: PUSH
64765: LD_INT 4
64767: NEG
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 3
64775: NEG
64776: PUSH
64777: LD_INT 3
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 4
64787: NEG
64788: PUSH
64789: LD_INT 3
64791: NEG
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 5
64799: NEG
64800: PUSH
64801: LD_INT 4
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 5
64811: NEG
64812: PUSH
64813: LD_INT 5
64815: NEG
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 3
64823: NEG
64824: PUSH
64825: LD_INT 5
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 5
64835: NEG
64836: PUSH
64837: LD_INT 3
64839: NEG
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: LD_INT 3
64850: NEG
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: LD_INT 4
64861: NEG
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 1
64869: PUSH
64870: LD_INT 3
64872: NEG
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 1
64880: PUSH
64881: LD_INT 2
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: LD_INT 2
64894: NEG
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 1
64902: NEG
64903: PUSH
64904: LD_INT 3
64906: NEG
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 1
64914: NEG
64915: PUSH
64916: LD_INT 4
64918: NEG
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 2
64926: PUSH
64927: LD_INT 2
64929: NEG
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 2
64937: NEG
64938: PUSH
64939: LD_INT 4
64941: NEG
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 4
64949: PUSH
64950: LD_INT 0
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 4
64959: PUSH
64960: LD_INT 1
64962: NEG
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 5
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 5
64980: PUSH
64981: LD_INT 1
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 4
64990: PUSH
64991: LD_INT 1
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 3
65000: PUSH
65001: LD_INT 0
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 3
65010: PUSH
65011: LD_INT 1
65013: NEG
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 3
65021: PUSH
65022: LD_INT 2
65024: NEG
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 5
65032: PUSH
65033: LD_INT 2
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65087: LD_ADDR_VAR 0 32
65091: PUSH
65092: LD_INT 4
65094: NEG
65095: PUSH
65096: LD_INT 0
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 4
65105: NEG
65106: PUSH
65107: LD_INT 1
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 3
65117: NEG
65118: PUSH
65119: LD_INT 0
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 3
65128: NEG
65129: PUSH
65130: LD_INT 1
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 4
65139: NEG
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 5
65150: NEG
65151: PUSH
65152: LD_INT 0
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 5
65161: NEG
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 5
65173: NEG
65174: PUSH
65175: LD_INT 2
65177: NEG
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 3
65185: NEG
65186: PUSH
65187: LD_INT 2
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 3
65196: NEG
65197: PUSH
65198: LD_INT 3
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 3
65208: NEG
65209: PUSH
65210: LD_INT 4
65212: NEG
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 2
65220: NEG
65221: PUSH
65222: LD_INT 3
65224: NEG
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 2
65232: NEG
65233: PUSH
65234: LD_INT 2
65236: NEG
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 3
65244: NEG
65245: PUSH
65246: LD_INT 2
65248: NEG
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 4
65256: NEG
65257: PUSH
65258: LD_INT 3
65260: NEG
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 4
65268: NEG
65269: PUSH
65270: LD_INT 4
65272: NEG
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 2
65280: NEG
65281: PUSH
65282: LD_INT 4
65284: NEG
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 4
65292: NEG
65293: PUSH
65294: LD_INT 2
65296: NEG
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 0
65304: PUSH
65305: LD_INT 4
65307: NEG
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 0
65315: PUSH
65316: LD_INT 5
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 1
65326: PUSH
65327: LD_INT 4
65329: NEG
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 1
65337: PUSH
65338: LD_INT 3
65340: NEG
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 0
65348: PUSH
65349: LD_INT 3
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: PUSH
65361: LD_INT 4
65363: NEG
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 1
65371: NEG
65372: PUSH
65373: LD_INT 5
65375: NEG
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 2
65383: PUSH
65384: LD_INT 3
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 2
65394: NEG
65395: PUSH
65396: LD_INT 5
65398: NEG
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 3
65406: PUSH
65407: LD_INT 0
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 3
65416: PUSH
65417: LD_INT 1
65419: NEG
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 4
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 4
65437: PUSH
65438: LD_INT 1
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 3
65447: PUSH
65448: LD_INT 1
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 2
65457: PUSH
65458: LD_INT 0
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 2
65467: PUSH
65468: LD_INT 1
65470: NEG
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 2
65478: PUSH
65479: LD_INT 2
65481: NEG
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 4
65489: PUSH
65490: LD_INT 2
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 4
65499: PUSH
65500: LD_INT 4
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 4
65509: PUSH
65510: LD_INT 3
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 5
65519: PUSH
65520: LD_INT 4
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 5
65529: PUSH
65530: LD_INT 5
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 4
65539: PUSH
65540: LD_INT 5
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 3
65549: PUSH
65550: LD_INT 4
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 3
65559: PUSH
65560: LD_INT 3
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 5
65569: PUSH
65570: LD_INT 3
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 3
65579: PUSH
65580: LD_INT 5
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65634: LD_ADDR_VAR 0 33
65638: PUSH
65639: LD_INT 4
65641: NEG
65642: PUSH
65643: LD_INT 4
65645: NEG
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 4
65653: NEG
65654: PUSH
65655: LD_INT 5
65657: NEG
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 3
65665: NEG
65666: PUSH
65667: LD_INT 4
65669: NEG
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 3
65677: NEG
65678: PUSH
65679: LD_INT 3
65681: NEG
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 4
65689: NEG
65690: PUSH
65691: LD_INT 3
65693: NEG
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 5
65701: NEG
65702: PUSH
65703: LD_INT 4
65705: NEG
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 5
65713: NEG
65714: PUSH
65715: LD_INT 5
65717: NEG
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 3
65725: NEG
65726: PUSH
65727: LD_INT 5
65729: NEG
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 5
65737: NEG
65738: PUSH
65739: LD_INT 3
65741: NEG
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 0
65749: PUSH
65750: LD_INT 3
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 0
65760: PUSH
65761: LD_INT 4
65763: NEG
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 1
65771: PUSH
65772: LD_INT 3
65774: NEG
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 1
65782: PUSH
65783: LD_INT 2
65785: NEG
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 0
65793: PUSH
65794: LD_INT 2
65796: NEG
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 1
65804: NEG
65805: PUSH
65806: LD_INT 3
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 1
65816: NEG
65817: PUSH
65818: LD_INT 4
65820: NEG
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 2
65828: PUSH
65829: LD_INT 2
65831: NEG
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 2
65839: NEG
65840: PUSH
65841: LD_INT 4
65843: NEG
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 4
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 4
65861: PUSH
65862: LD_INT 1
65864: NEG
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 5
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 5
65882: PUSH
65883: LD_INT 1
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 4
65892: PUSH
65893: LD_INT 1
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 3
65902: PUSH
65903: LD_INT 0
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 3
65912: PUSH
65913: LD_INT 1
65915: NEG
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 3
65923: PUSH
65924: LD_INT 2
65926: NEG
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 5
65934: PUSH
65935: LD_INT 2
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 3
65944: PUSH
65945: LD_INT 3
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 3
65954: PUSH
65955: LD_INT 2
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 4
65964: PUSH
65965: LD_INT 3
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 4
65974: PUSH
65975: LD_INT 4
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 3
65984: PUSH
65985: LD_INT 4
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 2
65994: PUSH
65995: LD_INT 3
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 2
66004: PUSH
66005: LD_INT 2
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 4
66014: PUSH
66015: LD_INT 2
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 2
66024: PUSH
66025: LD_INT 4
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 0
66034: PUSH
66035: LD_INT 4
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 0
66044: PUSH
66045: LD_INT 3
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 1
66054: PUSH
66055: LD_INT 4
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 1
66064: PUSH
66065: LD_INT 5
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 0
66074: PUSH
66075: LD_INT 5
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 1
66084: NEG
66085: PUSH
66086: LD_INT 4
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 1
66095: NEG
66096: PUSH
66097: LD_INT 3
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 2
66106: PUSH
66107: LD_INT 5
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 2
66116: NEG
66117: PUSH
66118: LD_INT 3
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66172: LD_ADDR_VAR 0 34
66176: PUSH
66177: LD_INT 0
66179: PUSH
66180: LD_INT 4
66182: NEG
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: LD_INT 5
66193: NEG
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 1
66201: PUSH
66202: LD_INT 4
66204: NEG
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 1
66212: PUSH
66213: LD_INT 3
66215: NEG
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 0
66223: PUSH
66224: LD_INT 3
66226: NEG
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 1
66234: NEG
66235: PUSH
66236: LD_INT 4
66238: NEG
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 1
66246: NEG
66247: PUSH
66248: LD_INT 5
66250: NEG
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 2
66258: PUSH
66259: LD_INT 3
66261: NEG
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 2
66269: NEG
66270: PUSH
66271: LD_INT 5
66273: NEG
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 3
66281: PUSH
66282: LD_INT 0
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 3
66291: PUSH
66292: LD_INT 1
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 4
66302: PUSH
66303: LD_INT 0
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 4
66312: PUSH
66313: LD_INT 1
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 3
66322: PUSH
66323: LD_INT 1
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 2
66332: PUSH
66333: LD_INT 0
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 2
66342: PUSH
66343: LD_INT 1
66345: NEG
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 2
66353: PUSH
66354: LD_INT 2
66356: NEG
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 4
66364: PUSH
66365: LD_INT 2
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 4
66374: PUSH
66375: LD_INT 4
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 4
66384: PUSH
66385: LD_INT 3
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 5
66394: PUSH
66395: LD_INT 4
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 5
66404: PUSH
66405: LD_INT 5
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 4
66414: PUSH
66415: LD_INT 5
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 3
66424: PUSH
66425: LD_INT 4
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 3
66434: PUSH
66435: LD_INT 3
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 5
66444: PUSH
66445: LD_INT 3
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 3
66454: PUSH
66455: LD_INT 5
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: LD_INT 3
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 0
66474: PUSH
66475: LD_INT 2
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 1
66484: PUSH
66485: LD_INT 3
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 1
66494: PUSH
66495: LD_INT 4
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 0
66504: PUSH
66505: LD_INT 4
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: PUSH
66516: LD_INT 3
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 1
66525: NEG
66526: PUSH
66527: LD_INT 2
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 2
66536: PUSH
66537: LD_INT 4
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 2
66546: NEG
66547: PUSH
66548: LD_INT 2
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 4
66557: NEG
66558: PUSH
66559: LD_INT 0
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 4
66568: NEG
66569: PUSH
66570: LD_INT 1
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 3
66580: NEG
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 3
66591: NEG
66592: PUSH
66593: LD_INT 1
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 4
66602: NEG
66603: PUSH
66604: LD_INT 1
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 5
66613: NEG
66614: PUSH
66615: LD_INT 0
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 5
66624: NEG
66625: PUSH
66626: LD_INT 1
66628: NEG
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 5
66636: NEG
66637: PUSH
66638: LD_INT 2
66640: NEG
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 3
66648: NEG
66649: PUSH
66650: LD_INT 2
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: ST_TO_ADDR
// end ; end ;
66704: GO 66707
66706: POP
// case btype of b_depot , b_warehouse :
66707: LD_VAR 0 1
66711: PUSH
66712: LD_INT 0
66714: DOUBLE
66715: EQUAL
66716: IFTRUE 66726
66718: LD_INT 1
66720: DOUBLE
66721: EQUAL
66722: IFTRUE 66726
66724: GO 66927
66726: POP
// case nation of nation_american :
66727: LD_VAR 0 5
66731: PUSH
66732: LD_INT 1
66734: DOUBLE
66735: EQUAL
66736: IFTRUE 66740
66738: GO 66796
66740: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66741: LD_ADDR_VAR 0 9
66745: PUSH
66746: LD_VAR 0 11
66750: PUSH
66751: LD_VAR 0 12
66755: PUSH
66756: LD_VAR 0 13
66760: PUSH
66761: LD_VAR 0 14
66765: PUSH
66766: LD_VAR 0 15
66770: PUSH
66771: LD_VAR 0 16
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: PUSH
66784: LD_VAR 0 4
66788: PUSH
66789: LD_INT 1
66791: PLUS
66792: ARRAY
66793: ST_TO_ADDR
66794: GO 66925
66796: LD_INT 2
66798: DOUBLE
66799: EQUAL
66800: IFTRUE 66804
66802: GO 66860
66804: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66805: LD_ADDR_VAR 0 9
66809: PUSH
66810: LD_VAR 0 17
66814: PUSH
66815: LD_VAR 0 18
66819: PUSH
66820: LD_VAR 0 19
66824: PUSH
66825: LD_VAR 0 20
66829: PUSH
66830: LD_VAR 0 21
66834: PUSH
66835: LD_VAR 0 22
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: PUSH
66848: LD_VAR 0 4
66852: PUSH
66853: LD_INT 1
66855: PLUS
66856: ARRAY
66857: ST_TO_ADDR
66858: GO 66925
66860: LD_INT 3
66862: DOUBLE
66863: EQUAL
66864: IFTRUE 66868
66866: GO 66924
66868: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66869: LD_ADDR_VAR 0 9
66873: PUSH
66874: LD_VAR 0 23
66878: PUSH
66879: LD_VAR 0 24
66883: PUSH
66884: LD_VAR 0 25
66888: PUSH
66889: LD_VAR 0 26
66893: PUSH
66894: LD_VAR 0 27
66898: PUSH
66899: LD_VAR 0 28
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: PUSH
66912: LD_VAR 0 4
66916: PUSH
66917: LD_INT 1
66919: PLUS
66920: ARRAY
66921: ST_TO_ADDR
66922: GO 66925
66924: POP
66925: GO 67480
66927: LD_INT 2
66929: DOUBLE
66930: EQUAL
66931: IFTRUE 66941
66933: LD_INT 3
66935: DOUBLE
66936: EQUAL
66937: IFTRUE 66941
66939: GO 66997
66941: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66942: LD_ADDR_VAR 0 9
66946: PUSH
66947: LD_VAR 0 29
66951: PUSH
66952: LD_VAR 0 30
66956: PUSH
66957: LD_VAR 0 31
66961: PUSH
66962: LD_VAR 0 32
66966: PUSH
66967: LD_VAR 0 33
66971: PUSH
66972: LD_VAR 0 34
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: PUSH
66985: LD_VAR 0 4
66989: PUSH
66990: LD_INT 1
66992: PLUS
66993: ARRAY
66994: ST_TO_ADDR
66995: GO 67480
66997: LD_INT 16
66999: DOUBLE
67000: EQUAL
67001: IFTRUE 67059
67003: LD_INT 17
67005: DOUBLE
67006: EQUAL
67007: IFTRUE 67059
67009: LD_INT 18
67011: DOUBLE
67012: EQUAL
67013: IFTRUE 67059
67015: LD_INT 19
67017: DOUBLE
67018: EQUAL
67019: IFTRUE 67059
67021: LD_INT 22
67023: DOUBLE
67024: EQUAL
67025: IFTRUE 67059
67027: LD_INT 20
67029: DOUBLE
67030: EQUAL
67031: IFTRUE 67059
67033: LD_INT 21
67035: DOUBLE
67036: EQUAL
67037: IFTRUE 67059
67039: LD_INT 23
67041: DOUBLE
67042: EQUAL
67043: IFTRUE 67059
67045: LD_INT 24
67047: DOUBLE
67048: EQUAL
67049: IFTRUE 67059
67051: LD_INT 25
67053: DOUBLE
67054: EQUAL
67055: IFTRUE 67059
67057: GO 67115
67059: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67060: LD_ADDR_VAR 0 9
67064: PUSH
67065: LD_VAR 0 35
67069: PUSH
67070: LD_VAR 0 36
67074: PUSH
67075: LD_VAR 0 37
67079: PUSH
67080: LD_VAR 0 38
67084: PUSH
67085: LD_VAR 0 39
67089: PUSH
67090: LD_VAR 0 40
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: PUSH
67103: LD_VAR 0 4
67107: PUSH
67108: LD_INT 1
67110: PLUS
67111: ARRAY
67112: ST_TO_ADDR
67113: GO 67480
67115: LD_INT 6
67117: DOUBLE
67118: EQUAL
67119: IFTRUE 67171
67121: LD_INT 7
67123: DOUBLE
67124: EQUAL
67125: IFTRUE 67171
67127: LD_INT 8
67129: DOUBLE
67130: EQUAL
67131: IFTRUE 67171
67133: LD_INT 13
67135: DOUBLE
67136: EQUAL
67137: IFTRUE 67171
67139: LD_INT 12
67141: DOUBLE
67142: EQUAL
67143: IFTRUE 67171
67145: LD_INT 15
67147: DOUBLE
67148: EQUAL
67149: IFTRUE 67171
67151: LD_INT 11
67153: DOUBLE
67154: EQUAL
67155: IFTRUE 67171
67157: LD_INT 14
67159: DOUBLE
67160: EQUAL
67161: IFTRUE 67171
67163: LD_INT 10
67165: DOUBLE
67166: EQUAL
67167: IFTRUE 67171
67169: GO 67227
67171: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67172: LD_ADDR_VAR 0 9
67176: PUSH
67177: LD_VAR 0 41
67181: PUSH
67182: LD_VAR 0 42
67186: PUSH
67187: LD_VAR 0 43
67191: PUSH
67192: LD_VAR 0 44
67196: PUSH
67197: LD_VAR 0 45
67201: PUSH
67202: LD_VAR 0 46
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: PUSH
67215: LD_VAR 0 4
67219: PUSH
67220: LD_INT 1
67222: PLUS
67223: ARRAY
67224: ST_TO_ADDR
67225: GO 67480
67227: LD_INT 36
67229: DOUBLE
67230: EQUAL
67231: IFTRUE 67235
67233: GO 67291
67235: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67236: LD_ADDR_VAR 0 9
67240: PUSH
67241: LD_VAR 0 47
67245: PUSH
67246: LD_VAR 0 48
67250: PUSH
67251: LD_VAR 0 49
67255: PUSH
67256: LD_VAR 0 50
67260: PUSH
67261: LD_VAR 0 51
67265: PUSH
67266: LD_VAR 0 52
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: PUSH
67279: LD_VAR 0 4
67283: PUSH
67284: LD_INT 1
67286: PLUS
67287: ARRAY
67288: ST_TO_ADDR
67289: GO 67480
67291: LD_INT 4
67293: DOUBLE
67294: EQUAL
67295: IFTRUE 67317
67297: LD_INT 5
67299: DOUBLE
67300: EQUAL
67301: IFTRUE 67317
67303: LD_INT 34
67305: DOUBLE
67306: EQUAL
67307: IFTRUE 67317
67309: LD_INT 37
67311: DOUBLE
67312: EQUAL
67313: IFTRUE 67317
67315: GO 67373
67317: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67318: LD_ADDR_VAR 0 9
67322: PUSH
67323: LD_VAR 0 53
67327: PUSH
67328: LD_VAR 0 54
67332: PUSH
67333: LD_VAR 0 55
67337: PUSH
67338: LD_VAR 0 56
67342: PUSH
67343: LD_VAR 0 57
67347: PUSH
67348: LD_VAR 0 58
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: PUSH
67361: LD_VAR 0 4
67365: PUSH
67366: LD_INT 1
67368: PLUS
67369: ARRAY
67370: ST_TO_ADDR
67371: GO 67480
67373: LD_INT 31
67375: DOUBLE
67376: EQUAL
67377: IFTRUE 67423
67379: LD_INT 32
67381: DOUBLE
67382: EQUAL
67383: IFTRUE 67423
67385: LD_INT 33
67387: DOUBLE
67388: EQUAL
67389: IFTRUE 67423
67391: LD_INT 27
67393: DOUBLE
67394: EQUAL
67395: IFTRUE 67423
67397: LD_INT 26
67399: DOUBLE
67400: EQUAL
67401: IFTRUE 67423
67403: LD_INT 28
67405: DOUBLE
67406: EQUAL
67407: IFTRUE 67423
67409: LD_INT 29
67411: DOUBLE
67412: EQUAL
67413: IFTRUE 67423
67415: LD_INT 30
67417: DOUBLE
67418: EQUAL
67419: IFTRUE 67423
67421: GO 67479
67423: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67424: LD_ADDR_VAR 0 9
67428: PUSH
67429: LD_VAR 0 59
67433: PUSH
67434: LD_VAR 0 60
67438: PUSH
67439: LD_VAR 0 61
67443: PUSH
67444: LD_VAR 0 62
67448: PUSH
67449: LD_VAR 0 63
67453: PUSH
67454: LD_VAR 0 64
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: PUSH
67467: LD_VAR 0 4
67471: PUSH
67472: LD_INT 1
67474: PLUS
67475: ARRAY
67476: ST_TO_ADDR
67477: GO 67480
67479: POP
// temp_list2 = [ ] ;
67480: LD_ADDR_VAR 0 10
67484: PUSH
67485: EMPTY
67486: ST_TO_ADDR
// for i in temp_list do
67487: LD_ADDR_VAR 0 8
67491: PUSH
67492: LD_VAR 0 9
67496: PUSH
67497: FOR_IN
67498: IFFALSE 67550
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67500: LD_ADDR_VAR 0 10
67504: PUSH
67505: LD_VAR 0 10
67509: PUSH
67510: LD_VAR 0 8
67514: PUSH
67515: LD_INT 1
67517: ARRAY
67518: PUSH
67519: LD_VAR 0 2
67523: PLUS
67524: PUSH
67525: LD_VAR 0 8
67529: PUSH
67530: LD_INT 2
67532: ARRAY
67533: PUSH
67534: LD_VAR 0 3
67538: PLUS
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: EMPTY
67545: LIST
67546: ADD
67547: ST_TO_ADDR
67548: GO 67497
67550: POP
67551: POP
// result = temp_list2 ;
67552: LD_ADDR_VAR 0 7
67556: PUSH
67557: LD_VAR 0 10
67561: ST_TO_ADDR
// end ;
67562: LD_VAR 0 7
67566: RET
// export function EnemyInRange ( unit , dist ) ; begin
67567: LD_INT 0
67569: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67570: LD_ADDR_VAR 0 3
67574: PUSH
67575: LD_VAR 0 1
67579: PPUSH
67580: CALL_OW 255
67584: PPUSH
67585: LD_VAR 0 1
67589: PPUSH
67590: CALL_OW 250
67594: PPUSH
67595: LD_VAR 0 1
67599: PPUSH
67600: CALL_OW 251
67604: PPUSH
67605: LD_VAR 0 2
67609: PPUSH
67610: CALL 41671 0 4
67614: PUSH
67615: LD_INT 4
67617: ARRAY
67618: ST_TO_ADDR
// end ;
67619: LD_VAR 0 3
67623: RET
// export function PlayerSeeMe ( unit ) ; begin
67624: LD_INT 0
67626: PPUSH
// result := See ( your_side , unit ) ;
67627: LD_ADDR_VAR 0 2
67631: PUSH
67632: LD_OWVAR 2
67636: PPUSH
67637: LD_VAR 0 1
67641: PPUSH
67642: CALL_OW 292
67646: ST_TO_ADDR
// end ;
67647: LD_VAR 0 2
67651: RET
// export function ReverseDir ( unit ) ; begin
67652: LD_INT 0
67654: PPUSH
// if not unit then
67655: LD_VAR 0 1
67659: NOT
67660: IFFALSE 67664
// exit ;
67662: GO 67687
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67664: LD_ADDR_VAR 0 2
67668: PUSH
67669: LD_VAR 0 1
67673: PPUSH
67674: CALL_OW 254
67678: PUSH
67679: LD_INT 3
67681: PLUS
67682: PUSH
67683: LD_INT 6
67685: MOD
67686: ST_TO_ADDR
// end ;
67687: LD_VAR 0 2
67691: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
67692: LD_INT 0
67694: PPUSH
67695: PPUSH
67696: PPUSH
67697: PPUSH
67698: PPUSH
// if not hexes then
67699: LD_VAR 0 2
67703: NOT
67704: IFFALSE 67708
// exit ;
67706: GO 67856
// dist := 9999 ;
67708: LD_ADDR_VAR 0 5
67712: PUSH
67713: LD_INT 9999
67715: ST_TO_ADDR
// for i = 1 to hexes do
67716: LD_ADDR_VAR 0 4
67720: PUSH
67721: DOUBLE
67722: LD_INT 1
67724: DEC
67725: ST_TO_ADDR
67726: LD_VAR 0 2
67730: PUSH
67731: FOR_TO
67732: IFFALSE 67844
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
67734: LD_VAR 0 1
67738: PPUSH
67739: LD_VAR 0 2
67743: PUSH
67744: LD_VAR 0 4
67748: ARRAY
67749: PUSH
67750: LD_INT 1
67752: ARRAY
67753: PPUSH
67754: LD_VAR 0 2
67758: PUSH
67759: LD_VAR 0 4
67763: ARRAY
67764: PUSH
67765: LD_INT 2
67767: ARRAY
67768: PPUSH
67769: CALL_OW 297
67773: PUSH
67774: LD_VAR 0 5
67778: LESS
67779: IFFALSE 67842
// begin hex := hexes [ i ] ;
67781: LD_ADDR_VAR 0 7
67785: PUSH
67786: LD_VAR 0 2
67790: PUSH
67791: LD_VAR 0 4
67795: ARRAY
67796: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67797: LD_ADDR_VAR 0 5
67801: PUSH
67802: LD_VAR 0 1
67806: PPUSH
67807: LD_VAR 0 2
67811: PUSH
67812: LD_VAR 0 4
67816: ARRAY
67817: PUSH
67818: LD_INT 1
67820: ARRAY
67821: PPUSH
67822: LD_VAR 0 2
67826: PUSH
67827: LD_VAR 0 4
67831: ARRAY
67832: PUSH
67833: LD_INT 2
67835: ARRAY
67836: PPUSH
67837: CALL_OW 297
67841: ST_TO_ADDR
// end ; end ;
67842: GO 67731
67844: POP
67845: POP
// result := hex ;
67846: LD_ADDR_VAR 0 3
67850: PUSH
67851: LD_VAR 0 7
67855: ST_TO_ADDR
// end ;
67856: LD_VAR 0 3
67860: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67861: LD_INT 0
67863: PPUSH
67864: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67865: LD_VAR 0 1
67869: NOT
67870: PUSH
67871: LD_VAR 0 1
67875: PUSH
67876: LD_INT 21
67878: PUSH
67879: LD_INT 2
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 23
67888: PUSH
67889: LD_INT 2
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PPUSH
67900: CALL_OW 69
67904: IN
67905: NOT
67906: OR
67907: IFFALSE 67911
// exit ;
67909: GO 67958
// for i = 1 to 3 do
67911: LD_ADDR_VAR 0 3
67915: PUSH
67916: DOUBLE
67917: LD_INT 1
67919: DEC
67920: ST_TO_ADDR
67921: LD_INT 3
67923: PUSH
67924: FOR_TO
67925: IFFALSE 67956
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67927: LD_VAR 0 1
67931: PPUSH
67932: CALL_OW 250
67936: PPUSH
67937: LD_VAR 0 1
67941: PPUSH
67942: CALL_OW 251
67946: PPUSH
67947: LD_INT 1
67949: PPUSH
67950: CALL_OW 453
67954: GO 67924
67956: POP
67957: POP
// end ;
67958: LD_VAR 0 2
67962: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67963: LD_INT 0
67965: PPUSH
67966: PPUSH
67967: PPUSH
67968: PPUSH
67969: PPUSH
67970: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67971: LD_VAR 0 1
67975: NOT
67976: PUSH
67977: LD_VAR 0 2
67981: NOT
67982: OR
67983: PUSH
67984: LD_VAR 0 1
67988: PPUSH
67989: CALL_OW 314
67993: OR
67994: IFFALSE 67998
// exit ;
67996: GO 68439
// x := GetX ( enemy_unit ) ;
67998: LD_ADDR_VAR 0 7
68002: PUSH
68003: LD_VAR 0 2
68007: PPUSH
68008: CALL_OW 250
68012: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68013: LD_ADDR_VAR 0 8
68017: PUSH
68018: LD_VAR 0 2
68022: PPUSH
68023: CALL_OW 251
68027: ST_TO_ADDR
// if not x or not y then
68028: LD_VAR 0 7
68032: NOT
68033: PUSH
68034: LD_VAR 0 8
68038: NOT
68039: OR
68040: IFFALSE 68044
// exit ;
68042: GO 68439
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68044: LD_ADDR_VAR 0 6
68048: PUSH
68049: LD_VAR 0 7
68053: PPUSH
68054: LD_INT 0
68056: PPUSH
68057: LD_INT 4
68059: PPUSH
68060: CALL_OW 272
68064: PUSH
68065: LD_VAR 0 8
68069: PPUSH
68070: LD_INT 0
68072: PPUSH
68073: LD_INT 4
68075: PPUSH
68076: CALL_OW 273
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_VAR 0 7
68089: PPUSH
68090: LD_INT 1
68092: PPUSH
68093: LD_INT 4
68095: PPUSH
68096: CALL_OW 272
68100: PUSH
68101: LD_VAR 0 8
68105: PPUSH
68106: LD_INT 1
68108: PPUSH
68109: LD_INT 4
68111: PPUSH
68112: CALL_OW 273
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_VAR 0 7
68125: PPUSH
68126: LD_INT 2
68128: PPUSH
68129: LD_INT 4
68131: PPUSH
68132: CALL_OW 272
68136: PUSH
68137: LD_VAR 0 8
68141: PPUSH
68142: LD_INT 2
68144: PPUSH
68145: LD_INT 4
68147: PPUSH
68148: CALL_OW 273
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_VAR 0 7
68161: PPUSH
68162: LD_INT 3
68164: PPUSH
68165: LD_INT 4
68167: PPUSH
68168: CALL_OW 272
68172: PUSH
68173: LD_VAR 0 8
68177: PPUSH
68178: LD_INT 3
68180: PPUSH
68181: LD_INT 4
68183: PPUSH
68184: CALL_OW 273
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_VAR 0 7
68197: PPUSH
68198: LD_INT 4
68200: PPUSH
68201: LD_INT 4
68203: PPUSH
68204: CALL_OW 272
68208: PUSH
68209: LD_VAR 0 8
68213: PPUSH
68214: LD_INT 4
68216: PPUSH
68217: LD_INT 4
68219: PPUSH
68220: CALL_OW 273
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_VAR 0 7
68233: PPUSH
68234: LD_INT 5
68236: PPUSH
68237: LD_INT 4
68239: PPUSH
68240: CALL_OW 272
68244: PUSH
68245: LD_VAR 0 8
68249: PPUSH
68250: LD_INT 5
68252: PPUSH
68253: LD_INT 4
68255: PPUSH
68256: CALL_OW 273
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: ST_TO_ADDR
// for i = tmp downto 1 do
68273: LD_ADDR_VAR 0 4
68277: PUSH
68278: DOUBLE
68279: LD_VAR 0 6
68283: INC
68284: ST_TO_ADDR
68285: LD_INT 1
68287: PUSH
68288: FOR_DOWNTO
68289: IFFALSE 68390
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68291: LD_VAR 0 6
68295: PUSH
68296: LD_VAR 0 4
68300: ARRAY
68301: PUSH
68302: LD_INT 1
68304: ARRAY
68305: PPUSH
68306: LD_VAR 0 6
68310: PUSH
68311: LD_VAR 0 4
68315: ARRAY
68316: PUSH
68317: LD_INT 2
68319: ARRAY
68320: PPUSH
68321: CALL_OW 488
68325: NOT
68326: PUSH
68327: LD_VAR 0 6
68331: PUSH
68332: LD_VAR 0 4
68336: ARRAY
68337: PUSH
68338: LD_INT 1
68340: ARRAY
68341: PPUSH
68342: LD_VAR 0 6
68346: PUSH
68347: LD_VAR 0 4
68351: ARRAY
68352: PUSH
68353: LD_INT 2
68355: ARRAY
68356: PPUSH
68357: CALL_OW 428
68361: PUSH
68362: LD_INT 0
68364: NONEQUAL
68365: OR
68366: IFFALSE 68388
// tmp := Delete ( tmp , i ) ;
68368: LD_ADDR_VAR 0 6
68372: PUSH
68373: LD_VAR 0 6
68377: PPUSH
68378: LD_VAR 0 4
68382: PPUSH
68383: CALL_OW 3
68387: ST_TO_ADDR
68388: GO 68288
68390: POP
68391: POP
// j := GetClosestHex ( unit , tmp ) ;
68392: LD_ADDR_VAR 0 5
68396: PUSH
68397: LD_VAR 0 1
68401: PPUSH
68402: LD_VAR 0 6
68406: PPUSH
68407: CALL 67692 0 2
68411: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68412: LD_VAR 0 1
68416: PPUSH
68417: LD_VAR 0 5
68421: PUSH
68422: LD_INT 1
68424: ARRAY
68425: PPUSH
68426: LD_VAR 0 5
68430: PUSH
68431: LD_INT 2
68433: ARRAY
68434: PPUSH
68435: CALL_OW 111
// end ;
68439: LD_VAR 0 3
68443: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68444: LD_INT 0
68446: PPUSH
68447: PPUSH
68448: PPUSH
// uc_side = 0 ;
68449: LD_ADDR_OWVAR 20
68453: PUSH
68454: LD_INT 0
68456: ST_TO_ADDR
// uc_nation = 0 ;
68457: LD_ADDR_OWVAR 21
68461: PUSH
68462: LD_INT 0
68464: ST_TO_ADDR
// InitHc_All ( ) ;
68465: CALL_OW 584
// InitVc ;
68469: CALL_OW 20
// if mastodonts then
68473: LD_VAR 0 6
68477: IFFALSE 68544
// for i = 1 to mastodonts do
68479: LD_ADDR_VAR 0 11
68483: PUSH
68484: DOUBLE
68485: LD_INT 1
68487: DEC
68488: ST_TO_ADDR
68489: LD_VAR 0 6
68493: PUSH
68494: FOR_TO
68495: IFFALSE 68542
// begin vc_chassis := 31 ;
68497: LD_ADDR_OWVAR 37
68501: PUSH
68502: LD_INT 31
68504: ST_TO_ADDR
// vc_control := control_rider ;
68505: LD_ADDR_OWVAR 38
68509: PUSH
68510: LD_INT 4
68512: ST_TO_ADDR
// animal := CreateVehicle ;
68513: LD_ADDR_VAR 0 12
68517: PUSH
68518: CALL_OW 45
68522: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68523: LD_VAR 0 12
68527: PPUSH
68528: LD_VAR 0 8
68532: PPUSH
68533: LD_INT 0
68535: PPUSH
68536: CALL 70732 0 3
// end ;
68540: GO 68494
68542: POP
68543: POP
// if horses then
68544: LD_VAR 0 5
68548: IFFALSE 68615
// for i = 1 to horses do
68550: LD_ADDR_VAR 0 11
68554: PUSH
68555: DOUBLE
68556: LD_INT 1
68558: DEC
68559: ST_TO_ADDR
68560: LD_VAR 0 5
68564: PUSH
68565: FOR_TO
68566: IFFALSE 68613
// begin hc_class := 21 ;
68568: LD_ADDR_OWVAR 28
68572: PUSH
68573: LD_INT 21
68575: ST_TO_ADDR
// hc_gallery :=  ;
68576: LD_ADDR_OWVAR 33
68580: PUSH
68581: LD_STRING 
68583: ST_TO_ADDR
// animal := CreateHuman ;
68584: LD_ADDR_VAR 0 12
68588: PUSH
68589: CALL_OW 44
68593: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68594: LD_VAR 0 12
68598: PPUSH
68599: LD_VAR 0 8
68603: PPUSH
68604: LD_INT 0
68606: PPUSH
68607: CALL 70732 0 3
// end ;
68611: GO 68565
68613: POP
68614: POP
// if birds then
68615: LD_VAR 0 1
68619: IFFALSE 68686
// for i = 1 to birds do
68621: LD_ADDR_VAR 0 11
68625: PUSH
68626: DOUBLE
68627: LD_INT 1
68629: DEC
68630: ST_TO_ADDR
68631: LD_VAR 0 1
68635: PUSH
68636: FOR_TO
68637: IFFALSE 68684
// begin hc_class = 18 ;
68639: LD_ADDR_OWVAR 28
68643: PUSH
68644: LD_INT 18
68646: ST_TO_ADDR
// hc_gallery =  ;
68647: LD_ADDR_OWVAR 33
68651: PUSH
68652: LD_STRING 
68654: ST_TO_ADDR
// animal := CreateHuman ;
68655: LD_ADDR_VAR 0 12
68659: PUSH
68660: CALL_OW 44
68664: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68665: LD_VAR 0 12
68669: PPUSH
68670: LD_VAR 0 8
68674: PPUSH
68675: LD_INT 0
68677: PPUSH
68678: CALL 70732 0 3
// end ;
68682: GO 68636
68684: POP
68685: POP
// if tigers then
68686: LD_VAR 0 2
68690: IFFALSE 68774
// for i = 1 to tigers do
68692: LD_ADDR_VAR 0 11
68696: PUSH
68697: DOUBLE
68698: LD_INT 1
68700: DEC
68701: ST_TO_ADDR
68702: LD_VAR 0 2
68706: PUSH
68707: FOR_TO
68708: IFFALSE 68772
// begin hc_class = class_tiger ;
68710: LD_ADDR_OWVAR 28
68714: PUSH
68715: LD_INT 14
68717: ST_TO_ADDR
// hc_gallery =  ;
68718: LD_ADDR_OWVAR 33
68722: PUSH
68723: LD_STRING 
68725: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68726: LD_ADDR_OWVAR 35
68730: PUSH
68731: LD_INT 7
68733: NEG
68734: PPUSH
68735: LD_INT 7
68737: PPUSH
68738: CALL_OW 12
68742: ST_TO_ADDR
// animal := CreateHuman ;
68743: LD_ADDR_VAR 0 12
68747: PUSH
68748: CALL_OW 44
68752: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68753: LD_VAR 0 12
68757: PPUSH
68758: LD_VAR 0 8
68762: PPUSH
68763: LD_INT 0
68765: PPUSH
68766: CALL 70732 0 3
// end ;
68770: GO 68707
68772: POP
68773: POP
// if apemans then
68774: LD_VAR 0 3
68778: IFFALSE 68901
// for i = 1 to apemans do
68780: LD_ADDR_VAR 0 11
68784: PUSH
68785: DOUBLE
68786: LD_INT 1
68788: DEC
68789: ST_TO_ADDR
68790: LD_VAR 0 3
68794: PUSH
68795: FOR_TO
68796: IFFALSE 68899
// begin hc_class = class_apeman ;
68798: LD_ADDR_OWVAR 28
68802: PUSH
68803: LD_INT 12
68805: ST_TO_ADDR
// hc_gallery =  ;
68806: LD_ADDR_OWVAR 33
68810: PUSH
68811: LD_STRING 
68813: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
68814: LD_ADDR_OWVAR 35
68818: PUSH
68819: LD_INT 5
68821: NEG
68822: PPUSH
68823: LD_INT 5
68825: PPUSH
68826: CALL_OW 12
68830: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68831: LD_ADDR_OWVAR 31
68835: PUSH
68836: LD_INT 1
68838: PPUSH
68839: LD_INT 3
68841: PPUSH
68842: CALL_OW 12
68846: PUSH
68847: LD_INT 1
68849: PPUSH
68850: LD_INT 3
68852: PPUSH
68853: CALL_OW 12
68857: PUSH
68858: LD_INT 0
68860: PUSH
68861: LD_INT 0
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: ST_TO_ADDR
// animal := CreateHuman ;
68870: LD_ADDR_VAR 0 12
68874: PUSH
68875: CALL_OW 44
68879: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68880: LD_VAR 0 12
68884: PPUSH
68885: LD_VAR 0 8
68889: PPUSH
68890: LD_INT 0
68892: PPUSH
68893: CALL 70732 0 3
// end ;
68897: GO 68795
68899: POP
68900: POP
// if enchidnas then
68901: LD_VAR 0 4
68905: IFFALSE 68972
// for i = 1 to enchidnas do
68907: LD_ADDR_VAR 0 11
68911: PUSH
68912: DOUBLE
68913: LD_INT 1
68915: DEC
68916: ST_TO_ADDR
68917: LD_VAR 0 4
68921: PUSH
68922: FOR_TO
68923: IFFALSE 68970
// begin hc_class = 13 ;
68925: LD_ADDR_OWVAR 28
68929: PUSH
68930: LD_INT 13
68932: ST_TO_ADDR
// hc_gallery =  ;
68933: LD_ADDR_OWVAR 33
68937: PUSH
68938: LD_STRING 
68940: ST_TO_ADDR
// animal := CreateHuman ;
68941: LD_ADDR_VAR 0 12
68945: PUSH
68946: CALL_OW 44
68950: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68951: LD_VAR 0 12
68955: PPUSH
68956: LD_VAR 0 8
68960: PPUSH
68961: LD_INT 0
68963: PPUSH
68964: CALL 70732 0 3
// end ;
68968: GO 68922
68970: POP
68971: POP
// if fishes then
68972: LD_VAR 0 7
68976: IFFALSE 69043
// for i = 1 to fishes do
68978: LD_ADDR_VAR 0 11
68982: PUSH
68983: DOUBLE
68984: LD_INT 1
68986: DEC
68987: ST_TO_ADDR
68988: LD_VAR 0 7
68992: PUSH
68993: FOR_TO
68994: IFFALSE 69041
// begin hc_class = 20 ;
68996: LD_ADDR_OWVAR 28
69000: PUSH
69001: LD_INT 20
69003: ST_TO_ADDR
// hc_gallery =  ;
69004: LD_ADDR_OWVAR 33
69008: PUSH
69009: LD_STRING 
69011: ST_TO_ADDR
// animal := CreateHuman ;
69012: LD_ADDR_VAR 0 12
69016: PUSH
69017: CALL_OW 44
69021: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69022: LD_VAR 0 12
69026: PPUSH
69027: LD_VAR 0 9
69031: PPUSH
69032: LD_INT 0
69034: PPUSH
69035: CALL 70732 0 3
// end ;
69039: GO 68993
69041: POP
69042: POP
// end ;
69043: LD_VAR 0 10
69047: RET
// export function WantHeal ( sci , unit ) ; begin
69048: LD_INT 0
69050: PPUSH
// if GetTaskList ( sci ) > 0 then
69051: LD_VAR 0 1
69055: PPUSH
69056: CALL_OW 437
69060: PUSH
69061: LD_INT 0
69063: GREATER
69064: IFFALSE 69134
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69066: LD_VAR 0 1
69070: PPUSH
69071: CALL_OW 437
69075: PUSH
69076: LD_INT 1
69078: ARRAY
69079: PUSH
69080: LD_INT 1
69082: ARRAY
69083: PUSH
69084: LD_STRING l
69086: EQUAL
69087: PUSH
69088: LD_VAR 0 1
69092: PPUSH
69093: CALL_OW 437
69097: PUSH
69098: LD_INT 1
69100: ARRAY
69101: PUSH
69102: LD_INT 4
69104: ARRAY
69105: PUSH
69106: LD_VAR 0 2
69110: EQUAL
69111: AND
69112: IFFALSE 69124
// result := true else
69114: LD_ADDR_VAR 0 3
69118: PUSH
69119: LD_INT 1
69121: ST_TO_ADDR
69122: GO 69132
// result := false ;
69124: LD_ADDR_VAR 0 3
69128: PUSH
69129: LD_INT 0
69131: ST_TO_ADDR
// end else
69132: GO 69142
// result := false ;
69134: LD_ADDR_VAR 0 3
69138: PUSH
69139: LD_INT 0
69141: ST_TO_ADDR
// end ;
69142: LD_VAR 0 3
69146: RET
// export function HealTarget ( sci ) ; begin
69147: LD_INT 0
69149: PPUSH
// if not sci then
69150: LD_VAR 0 1
69154: NOT
69155: IFFALSE 69159
// exit ;
69157: GO 69224
// result := 0 ;
69159: LD_ADDR_VAR 0 2
69163: PUSH
69164: LD_INT 0
69166: ST_TO_ADDR
// if GetTaskList ( sci ) then
69167: LD_VAR 0 1
69171: PPUSH
69172: CALL_OW 437
69176: IFFALSE 69224
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69178: LD_VAR 0 1
69182: PPUSH
69183: CALL_OW 437
69187: PUSH
69188: LD_INT 1
69190: ARRAY
69191: PUSH
69192: LD_INT 1
69194: ARRAY
69195: PUSH
69196: LD_STRING l
69198: EQUAL
69199: IFFALSE 69224
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69201: LD_ADDR_VAR 0 2
69205: PUSH
69206: LD_VAR 0 1
69210: PPUSH
69211: CALL_OW 437
69215: PUSH
69216: LD_INT 1
69218: ARRAY
69219: PUSH
69220: LD_INT 4
69222: ARRAY
69223: ST_TO_ADDR
// end ;
69224: LD_VAR 0 2
69228: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69229: LD_INT 0
69231: PPUSH
69232: PPUSH
69233: PPUSH
69234: PPUSH
// if not base_units then
69235: LD_VAR 0 1
69239: NOT
69240: IFFALSE 69244
// exit ;
69242: GO 69331
// result := false ;
69244: LD_ADDR_VAR 0 2
69248: PUSH
69249: LD_INT 0
69251: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69252: LD_ADDR_VAR 0 5
69256: PUSH
69257: LD_VAR 0 1
69261: PPUSH
69262: LD_INT 21
69264: PUSH
69265: LD_INT 3
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PPUSH
69272: CALL_OW 72
69276: ST_TO_ADDR
// if not tmp then
69277: LD_VAR 0 5
69281: NOT
69282: IFFALSE 69286
// exit ;
69284: GO 69331
// for i in tmp do
69286: LD_ADDR_VAR 0 3
69290: PUSH
69291: LD_VAR 0 5
69295: PUSH
69296: FOR_IN
69297: IFFALSE 69329
// begin result := EnemyInRange ( i , 22 ) ;
69299: LD_ADDR_VAR 0 2
69303: PUSH
69304: LD_VAR 0 3
69308: PPUSH
69309: LD_INT 22
69311: PPUSH
69312: CALL 67567 0 2
69316: ST_TO_ADDR
// if result then
69317: LD_VAR 0 2
69321: IFFALSE 69327
// exit ;
69323: POP
69324: POP
69325: GO 69331
// end ;
69327: GO 69296
69329: POP
69330: POP
// end ;
69331: LD_VAR 0 2
69335: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
69336: LD_INT 0
69338: PPUSH
69339: PPUSH
// if not units then
69340: LD_VAR 0 1
69344: NOT
69345: IFFALSE 69349
// exit ;
69347: GO 69419
// result := [ ] ;
69349: LD_ADDR_VAR 0 3
69353: PUSH
69354: EMPTY
69355: ST_TO_ADDR
// for i in units do
69356: LD_ADDR_VAR 0 4
69360: PUSH
69361: LD_VAR 0 1
69365: PUSH
69366: FOR_IN
69367: IFFALSE 69417
// if GetTag ( i ) = tag then
69369: LD_VAR 0 4
69373: PPUSH
69374: CALL_OW 110
69378: PUSH
69379: LD_VAR 0 2
69383: EQUAL
69384: IFFALSE 69415
// result := Insert ( result , result + 1 , i ) ;
69386: LD_ADDR_VAR 0 3
69390: PUSH
69391: LD_VAR 0 3
69395: PPUSH
69396: LD_VAR 0 3
69400: PUSH
69401: LD_INT 1
69403: PLUS
69404: PPUSH
69405: LD_VAR 0 4
69409: PPUSH
69410: CALL_OW 2
69414: ST_TO_ADDR
69415: GO 69366
69417: POP
69418: POP
// end ;
69419: LD_VAR 0 3
69423: RET
// export function IsDriver ( un ) ; begin
69424: LD_INT 0
69426: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69427: LD_ADDR_VAR 0 2
69431: PUSH
69432: LD_VAR 0 1
69436: PUSH
69437: LD_INT 55
69439: PUSH
69440: EMPTY
69441: LIST
69442: PPUSH
69443: CALL_OW 69
69447: IN
69448: ST_TO_ADDR
// end ;
69449: LD_VAR 0 2
69453: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69454: LD_INT 0
69456: PPUSH
69457: PPUSH
// list := [ ] ;
69458: LD_ADDR_VAR 0 5
69462: PUSH
69463: EMPTY
69464: ST_TO_ADDR
// case d of 0 :
69465: LD_VAR 0 3
69469: PUSH
69470: LD_INT 0
69472: DOUBLE
69473: EQUAL
69474: IFTRUE 69478
69476: GO 69611
69478: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69479: LD_ADDR_VAR 0 5
69483: PUSH
69484: LD_VAR 0 1
69488: PUSH
69489: LD_INT 4
69491: MINUS
69492: PUSH
69493: LD_VAR 0 2
69497: PUSH
69498: LD_INT 4
69500: MINUS
69501: PUSH
69502: LD_INT 2
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: LIST
69509: PUSH
69510: LD_VAR 0 1
69514: PUSH
69515: LD_INT 3
69517: MINUS
69518: PUSH
69519: LD_VAR 0 2
69523: PUSH
69524: LD_INT 1
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: LIST
69531: PUSH
69532: LD_VAR 0 1
69536: PUSH
69537: LD_INT 4
69539: PLUS
69540: PUSH
69541: LD_VAR 0 2
69545: PUSH
69546: LD_INT 4
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: LIST
69553: PUSH
69554: LD_VAR 0 1
69558: PUSH
69559: LD_INT 3
69561: PLUS
69562: PUSH
69563: LD_VAR 0 2
69567: PUSH
69568: LD_INT 3
69570: PLUS
69571: PUSH
69572: LD_INT 5
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: LIST
69579: PUSH
69580: LD_VAR 0 1
69584: PUSH
69585: LD_VAR 0 2
69589: PUSH
69590: LD_INT 4
69592: PLUS
69593: PUSH
69594: LD_INT 0
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: LIST
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: ST_TO_ADDR
// end ; 1 :
69609: GO 70309
69611: LD_INT 1
69613: DOUBLE
69614: EQUAL
69615: IFTRUE 69619
69617: GO 69752
69619: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69620: LD_ADDR_VAR 0 5
69624: PUSH
69625: LD_VAR 0 1
69629: PUSH
69630: LD_VAR 0 2
69634: PUSH
69635: LD_INT 4
69637: MINUS
69638: PUSH
69639: LD_INT 3
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: LIST
69646: PUSH
69647: LD_VAR 0 1
69651: PUSH
69652: LD_INT 3
69654: MINUS
69655: PUSH
69656: LD_VAR 0 2
69660: PUSH
69661: LD_INT 3
69663: MINUS
69664: PUSH
69665: LD_INT 2
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: LIST
69672: PUSH
69673: LD_VAR 0 1
69677: PUSH
69678: LD_INT 4
69680: MINUS
69681: PUSH
69682: LD_VAR 0 2
69686: PUSH
69687: LD_INT 1
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: LIST
69694: PUSH
69695: LD_VAR 0 1
69699: PUSH
69700: LD_VAR 0 2
69704: PUSH
69705: LD_INT 3
69707: PLUS
69708: PUSH
69709: LD_INT 0
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: LIST
69716: PUSH
69717: LD_VAR 0 1
69721: PUSH
69722: LD_INT 4
69724: PLUS
69725: PUSH
69726: LD_VAR 0 2
69730: PUSH
69731: LD_INT 4
69733: PLUS
69734: PUSH
69735: LD_INT 5
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: LIST
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: ST_TO_ADDR
// end ; 2 :
69750: GO 70309
69752: LD_INT 2
69754: DOUBLE
69755: EQUAL
69756: IFTRUE 69760
69758: GO 69889
69760: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69761: LD_ADDR_VAR 0 5
69765: PUSH
69766: LD_VAR 0 1
69770: PUSH
69771: LD_VAR 0 2
69775: PUSH
69776: LD_INT 3
69778: MINUS
69779: PUSH
69780: LD_INT 3
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: LIST
69787: PUSH
69788: LD_VAR 0 1
69792: PUSH
69793: LD_INT 4
69795: PLUS
69796: PUSH
69797: LD_VAR 0 2
69801: PUSH
69802: LD_INT 4
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: LIST
69809: PUSH
69810: LD_VAR 0 1
69814: PUSH
69815: LD_VAR 0 2
69819: PUSH
69820: LD_INT 4
69822: PLUS
69823: PUSH
69824: LD_INT 0
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: LIST
69831: PUSH
69832: LD_VAR 0 1
69836: PUSH
69837: LD_INT 3
69839: MINUS
69840: PUSH
69841: LD_VAR 0 2
69845: PUSH
69846: LD_INT 1
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: LIST
69853: PUSH
69854: LD_VAR 0 1
69858: PUSH
69859: LD_INT 4
69861: MINUS
69862: PUSH
69863: LD_VAR 0 2
69867: PUSH
69868: LD_INT 4
69870: MINUS
69871: PUSH
69872: LD_INT 2
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: LIST
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: ST_TO_ADDR
// end ; 3 :
69887: GO 70309
69889: LD_INT 3
69891: DOUBLE
69892: EQUAL
69893: IFTRUE 69897
69895: GO 70030
69897: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69898: LD_ADDR_VAR 0 5
69902: PUSH
69903: LD_VAR 0 1
69907: PUSH
69908: LD_INT 3
69910: PLUS
69911: PUSH
69912: LD_VAR 0 2
69916: PUSH
69917: LD_INT 4
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: LIST
69924: PUSH
69925: LD_VAR 0 1
69929: PUSH
69930: LD_INT 4
69932: PLUS
69933: PUSH
69934: LD_VAR 0 2
69938: PUSH
69939: LD_INT 4
69941: PLUS
69942: PUSH
69943: LD_INT 5
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: LIST
69950: PUSH
69951: LD_VAR 0 1
69955: PUSH
69956: LD_INT 4
69958: MINUS
69959: PUSH
69960: LD_VAR 0 2
69964: PUSH
69965: LD_INT 1
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: LIST
69972: PUSH
69973: LD_VAR 0 1
69977: PUSH
69978: LD_VAR 0 2
69982: PUSH
69983: LD_INT 4
69985: MINUS
69986: PUSH
69987: LD_INT 3
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: LIST
69994: PUSH
69995: LD_VAR 0 1
69999: PUSH
70000: LD_INT 3
70002: MINUS
70003: PUSH
70004: LD_VAR 0 2
70008: PUSH
70009: LD_INT 3
70011: MINUS
70012: PUSH
70013: LD_INT 2
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: LIST
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: ST_TO_ADDR
// end ; 4 :
70028: GO 70309
70030: LD_INT 4
70032: DOUBLE
70033: EQUAL
70034: IFTRUE 70038
70036: GO 70171
70038: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70039: LD_ADDR_VAR 0 5
70043: PUSH
70044: LD_VAR 0 1
70048: PUSH
70049: LD_VAR 0 2
70053: PUSH
70054: LD_INT 4
70056: PLUS
70057: PUSH
70058: LD_INT 0
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: LIST
70065: PUSH
70066: LD_VAR 0 1
70070: PUSH
70071: LD_INT 3
70073: PLUS
70074: PUSH
70075: LD_VAR 0 2
70079: PUSH
70080: LD_INT 3
70082: PLUS
70083: PUSH
70084: LD_INT 5
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: LIST
70091: PUSH
70092: LD_VAR 0 1
70096: PUSH
70097: LD_INT 4
70099: PLUS
70100: PUSH
70101: LD_VAR 0 2
70105: PUSH
70106: LD_INT 4
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: LIST
70113: PUSH
70114: LD_VAR 0 1
70118: PUSH
70119: LD_VAR 0 2
70123: PUSH
70124: LD_INT 3
70126: MINUS
70127: PUSH
70128: LD_INT 3
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: LIST
70135: PUSH
70136: LD_VAR 0 1
70140: PUSH
70141: LD_INT 4
70143: MINUS
70144: PUSH
70145: LD_VAR 0 2
70149: PUSH
70150: LD_INT 4
70152: MINUS
70153: PUSH
70154: LD_INT 2
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: LIST
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: ST_TO_ADDR
// end ; 5 :
70169: GO 70309
70171: LD_INT 5
70173: DOUBLE
70174: EQUAL
70175: IFTRUE 70179
70177: GO 70308
70179: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70180: LD_ADDR_VAR 0 5
70184: PUSH
70185: LD_VAR 0 1
70189: PUSH
70190: LD_INT 4
70192: MINUS
70193: PUSH
70194: LD_VAR 0 2
70198: PUSH
70199: LD_INT 1
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: LIST
70206: PUSH
70207: LD_VAR 0 1
70211: PUSH
70212: LD_VAR 0 2
70216: PUSH
70217: LD_INT 4
70219: MINUS
70220: PUSH
70221: LD_INT 3
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: LIST
70228: PUSH
70229: LD_VAR 0 1
70233: PUSH
70234: LD_INT 4
70236: PLUS
70237: PUSH
70238: LD_VAR 0 2
70242: PUSH
70243: LD_INT 4
70245: PLUS
70246: PUSH
70247: LD_INT 5
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: LIST
70254: PUSH
70255: LD_VAR 0 1
70259: PUSH
70260: LD_INT 3
70262: PLUS
70263: PUSH
70264: LD_VAR 0 2
70268: PUSH
70269: LD_INT 4
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: LIST
70276: PUSH
70277: LD_VAR 0 1
70281: PUSH
70282: LD_VAR 0 2
70286: PUSH
70287: LD_INT 3
70289: PLUS
70290: PUSH
70291: LD_INT 0
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: LIST
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: ST_TO_ADDR
// end ; end ;
70306: GO 70309
70308: POP
// result := list ;
70309: LD_ADDR_VAR 0 4
70313: PUSH
70314: LD_VAR 0 5
70318: ST_TO_ADDR
// end ;
70319: LD_VAR 0 4
70323: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70324: LD_INT 0
70326: PPUSH
70327: PPUSH
70328: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70329: LD_VAR 0 1
70333: NOT
70334: PUSH
70335: LD_VAR 0 2
70339: PUSH
70340: LD_INT 1
70342: PUSH
70343: LD_INT 2
70345: PUSH
70346: LD_INT 3
70348: PUSH
70349: LD_INT 4
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: IN
70358: NOT
70359: OR
70360: IFFALSE 70364
// exit ;
70362: GO 70456
// tmp := [ ] ;
70364: LD_ADDR_VAR 0 5
70368: PUSH
70369: EMPTY
70370: ST_TO_ADDR
// for i in units do
70371: LD_ADDR_VAR 0 4
70375: PUSH
70376: LD_VAR 0 1
70380: PUSH
70381: FOR_IN
70382: IFFALSE 70425
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70384: LD_ADDR_VAR 0 5
70388: PUSH
70389: LD_VAR 0 5
70393: PPUSH
70394: LD_VAR 0 5
70398: PUSH
70399: LD_INT 1
70401: PLUS
70402: PPUSH
70403: LD_VAR 0 4
70407: PPUSH
70408: LD_VAR 0 2
70412: PPUSH
70413: CALL_OW 259
70417: PPUSH
70418: CALL_OW 2
70422: ST_TO_ADDR
70423: GO 70381
70425: POP
70426: POP
// if not tmp then
70427: LD_VAR 0 5
70431: NOT
70432: IFFALSE 70436
// exit ;
70434: GO 70456
// result := SortListByListDesc ( units , tmp ) ;
70436: LD_ADDR_VAR 0 3
70440: PUSH
70441: LD_VAR 0 1
70445: PPUSH
70446: LD_VAR 0 5
70450: PPUSH
70451: CALL_OW 77
70455: ST_TO_ADDR
// end ;
70456: LD_VAR 0 3
70460: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70461: LD_INT 0
70463: PPUSH
70464: PPUSH
70465: PPUSH
// result := false ;
70466: LD_ADDR_VAR 0 3
70470: PUSH
70471: LD_INT 0
70473: ST_TO_ADDR
// x := GetX ( building ) ;
70474: LD_ADDR_VAR 0 4
70478: PUSH
70479: LD_VAR 0 2
70483: PPUSH
70484: CALL_OW 250
70488: ST_TO_ADDR
// y := GetY ( building ) ;
70489: LD_ADDR_VAR 0 5
70493: PUSH
70494: LD_VAR 0 2
70498: PPUSH
70499: CALL_OW 251
70503: ST_TO_ADDR
// if not building or not x or not y then
70504: LD_VAR 0 2
70508: NOT
70509: PUSH
70510: LD_VAR 0 4
70514: NOT
70515: OR
70516: PUSH
70517: LD_VAR 0 5
70521: NOT
70522: OR
70523: IFFALSE 70527
// exit ;
70525: GO 70619
// if GetTaskList ( unit ) then
70527: LD_VAR 0 1
70531: PPUSH
70532: CALL_OW 437
70536: IFFALSE 70619
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70538: LD_STRING e
70540: PUSH
70541: LD_VAR 0 1
70545: PPUSH
70546: CALL_OW 437
70550: PUSH
70551: LD_INT 1
70553: ARRAY
70554: PUSH
70555: LD_INT 1
70557: ARRAY
70558: EQUAL
70559: PUSH
70560: LD_VAR 0 4
70564: PUSH
70565: LD_VAR 0 1
70569: PPUSH
70570: CALL_OW 437
70574: PUSH
70575: LD_INT 1
70577: ARRAY
70578: PUSH
70579: LD_INT 2
70581: ARRAY
70582: EQUAL
70583: AND
70584: PUSH
70585: LD_VAR 0 5
70589: PUSH
70590: LD_VAR 0 1
70594: PPUSH
70595: CALL_OW 437
70599: PUSH
70600: LD_INT 1
70602: ARRAY
70603: PUSH
70604: LD_INT 3
70606: ARRAY
70607: EQUAL
70608: AND
70609: IFFALSE 70619
// result := true end ;
70611: LD_ADDR_VAR 0 3
70615: PUSH
70616: LD_INT 1
70618: ST_TO_ADDR
// end ;
70619: LD_VAR 0 3
70623: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70624: LD_INT 0
70626: PPUSH
// result := false ;
70627: LD_ADDR_VAR 0 4
70631: PUSH
70632: LD_INT 0
70634: ST_TO_ADDR
// if GetTaskList ( unit ) then
70635: LD_VAR 0 1
70639: PPUSH
70640: CALL_OW 437
70644: IFFALSE 70727
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70646: LD_STRING M
70648: PUSH
70649: LD_VAR 0 1
70653: PPUSH
70654: CALL_OW 437
70658: PUSH
70659: LD_INT 1
70661: ARRAY
70662: PUSH
70663: LD_INT 1
70665: ARRAY
70666: EQUAL
70667: PUSH
70668: LD_VAR 0 2
70672: PUSH
70673: LD_VAR 0 1
70677: PPUSH
70678: CALL_OW 437
70682: PUSH
70683: LD_INT 1
70685: ARRAY
70686: PUSH
70687: LD_INT 2
70689: ARRAY
70690: EQUAL
70691: AND
70692: PUSH
70693: LD_VAR 0 3
70697: PUSH
70698: LD_VAR 0 1
70702: PPUSH
70703: CALL_OW 437
70707: PUSH
70708: LD_INT 1
70710: ARRAY
70711: PUSH
70712: LD_INT 3
70714: ARRAY
70715: EQUAL
70716: AND
70717: IFFALSE 70727
// result := true ;
70719: LD_ADDR_VAR 0 4
70723: PUSH
70724: LD_INT 1
70726: ST_TO_ADDR
// end ; end ;
70727: LD_VAR 0 4
70731: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70732: LD_INT 0
70734: PPUSH
70735: PPUSH
70736: PPUSH
70737: PPUSH
// if not unit or not area then
70738: LD_VAR 0 1
70742: NOT
70743: PUSH
70744: LD_VAR 0 2
70748: NOT
70749: OR
70750: IFFALSE 70754
// exit ;
70752: GO 70918
// tmp := AreaToList ( area , i ) ;
70754: LD_ADDR_VAR 0 6
70758: PUSH
70759: LD_VAR 0 2
70763: PPUSH
70764: LD_VAR 0 5
70768: PPUSH
70769: CALL_OW 517
70773: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70774: LD_ADDR_VAR 0 5
70778: PUSH
70779: DOUBLE
70780: LD_INT 1
70782: DEC
70783: ST_TO_ADDR
70784: LD_VAR 0 6
70788: PUSH
70789: LD_INT 1
70791: ARRAY
70792: PUSH
70793: FOR_TO
70794: IFFALSE 70916
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70796: LD_ADDR_VAR 0 7
70800: PUSH
70801: LD_VAR 0 6
70805: PUSH
70806: LD_INT 1
70808: ARRAY
70809: PUSH
70810: LD_VAR 0 5
70814: ARRAY
70815: PUSH
70816: LD_VAR 0 6
70820: PUSH
70821: LD_INT 2
70823: ARRAY
70824: PUSH
70825: LD_VAR 0 5
70829: ARRAY
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
70835: LD_VAR 0 7
70839: PUSH
70840: LD_INT 1
70842: ARRAY
70843: PPUSH
70844: LD_VAR 0 7
70848: PUSH
70849: LD_INT 2
70851: ARRAY
70852: PPUSH
70853: CALL_OW 428
70857: PUSH
70858: LD_INT 0
70860: EQUAL
70861: IFFALSE 70914
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70863: LD_VAR 0 1
70867: PPUSH
70868: LD_VAR 0 7
70872: PUSH
70873: LD_INT 1
70875: ARRAY
70876: PPUSH
70877: LD_VAR 0 7
70881: PUSH
70882: LD_INT 2
70884: ARRAY
70885: PPUSH
70886: LD_VAR 0 3
70890: PPUSH
70891: CALL_OW 48
// result := IsPlaced ( unit ) ;
70895: LD_ADDR_VAR 0 4
70899: PUSH
70900: LD_VAR 0 1
70904: PPUSH
70905: CALL_OW 305
70909: ST_TO_ADDR
// exit ;
70910: POP
70911: POP
70912: GO 70918
// end ; end ;
70914: GO 70793
70916: POP
70917: POP
// end ;
70918: LD_VAR 0 4
70922: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70923: LD_INT 0
70925: PPUSH
70926: PPUSH
70927: PPUSH
// if not side or side > 8 then
70928: LD_VAR 0 1
70932: NOT
70933: PUSH
70934: LD_VAR 0 1
70938: PUSH
70939: LD_INT 8
70941: GREATER
70942: OR
70943: IFFALSE 70947
// exit ;
70945: GO 71134
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70947: LD_ADDR_VAR 0 4
70951: PUSH
70952: LD_INT 22
70954: PUSH
70955: LD_VAR 0 1
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: LD_INT 21
70966: PUSH
70967: LD_INT 3
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PPUSH
70978: CALL_OW 69
70982: ST_TO_ADDR
// if not tmp then
70983: LD_VAR 0 4
70987: NOT
70988: IFFALSE 70992
// exit ;
70990: GO 71134
// enable_addtolog := true ;
70992: LD_ADDR_OWVAR 81
70996: PUSH
70997: LD_INT 1
70999: ST_TO_ADDR
// AddToLog ( [ ) ;
71000: LD_STRING [
71002: PPUSH
71003: CALL_OW 561
// for i in tmp do
71007: LD_ADDR_VAR 0 3
71011: PUSH
71012: LD_VAR 0 4
71016: PUSH
71017: FOR_IN
71018: IFFALSE 71125
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71020: LD_STRING [
71022: PUSH
71023: LD_VAR 0 3
71027: PPUSH
71028: CALL_OW 266
71032: STR
71033: PUSH
71034: LD_STRING , 
71036: STR
71037: PUSH
71038: LD_VAR 0 3
71042: PPUSH
71043: CALL_OW 250
71047: STR
71048: PUSH
71049: LD_STRING , 
71051: STR
71052: PUSH
71053: LD_VAR 0 3
71057: PPUSH
71058: CALL_OW 251
71062: STR
71063: PUSH
71064: LD_STRING , 
71066: STR
71067: PUSH
71068: LD_VAR 0 3
71072: PPUSH
71073: CALL_OW 254
71077: STR
71078: PUSH
71079: LD_STRING , 
71081: STR
71082: PUSH
71083: LD_VAR 0 3
71087: PPUSH
71088: LD_INT 1
71090: PPUSH
71091: CALL_OW 268
71095: STR
71096: PUSH
71097: LD_STRING , 
71099: STR
71100: PUSH
71101: LD_VAR 0 3
71105: PPUSH
71106: LD_INT 2
71108: PPUSH
71109: CALL_OW 268
71113: STR
71114: PUSH
71115: LD_STRING ],
71117: STR
71118: PPUSH
71119: CALL_OW 561
// end ;
71123: GO 71017
71125: POP
71126: POP
// AddToLog ( ]; ) ;
71127: LD_STRING ];
71129: PPUSH
71130: CALL_OW 561
// end ;
71134: LD_VAR 0 2
71138: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71139: LD_INT 0
71141: PPUSH
71142: PPUSH
71143: PPUSH
71144: PPUSH
71145: PPUSH
// if not area or not rate or not max then
71146: LD_VAR 0 1
71150: NOT
71151: PUSH
71152: LD_VAR 0 2
71156: NOT
71157: OR
71158: PUSH
71159: LD_VAR 0 4
71163: NOT
71164: OR
71165: IFFALSE 71169
// exit ;
71167: GO 71361
// while 1 do
71169: LD_INT 1
71171: IFFALSE 71361
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71173: LD_ADDR_VAR 0 9
71177: PUSH
71178: LD_VAR 0 1
71182: PPUSH
71183: LD_INT 1
71185: PPUSH
71186: CALL_OW 287
71190: PUSH
71191: LD_INT 10
71193: MUL
71194: ST_TO_ADDR
// r := rate / 10 ;
71195: LD_ADDR_VAR 0 7
71199: PUSH
71200: LD_VAR 0 2
71204: PUSH
71205: LD_INT 10
71207: DIVREAL
71208: ST_TO_ADDR
// time := 1 1$00 ;
71209: LD_ADDR_VAR 0 8
71213: PUSH
71214: LD_INT 2100
71216: ST_TO_ADDR
// if amount < min then
71217: LD_VAR 0 9
71221: PUSH
71222: LD_VAR 0 3
71226: LESS
71227: IFFALSE 71245
// r := r * 2 else
71229: LD_ADDR_VAR 0 7
71233: PUSH
71234: LD_VAR 0 7
71238: PUSH
71239: LD_INT 2
71241: MUL
71242: ST_TO_ADDR
71243: GO 71271
// if amount > max then
71245: LD_VAR 0 9
71249: PUSH
71250: LD_VAR 0 4
71254: GREATER
71255: IFFALSE 71271
// r := r / 2 ;
71257: LD_ADDR_VAR 0 7
71261: PUSH
71262: LD_VAR 0 7
71266: PUSH
71267: LD_INT 2
71269: DIVREAL
71270: ST_TO_ADDR
// time := time / r ;
71271: LD_ADDR_VAR 0 8
71275: PUSH
71276: LD_VAR 0 8
71280: PUSH
71281: LD_VAR 0 7
71285: DIVREAL
71286: ST_TO_ADDR
// if time < 0 then
71287: LD_VAR 0 8
71291: PUSH
71292: LD_INT 0
71294: LESS
71295: IFFALSE 71312
// time := time * - 1 ;
71297: LD_ADDR_VAR 0 8
71301: PUSH
71302: LD_VAR 0 8
71306: PUSH
71307: LD_INT 1
71309: NEG
71310: MUL
71311: ST_TO_ADDR
// wait ( time ) ;
71312: LD_VAR 0 8
71316: PPUSH
71317: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
71321: LD_INT 35
71323: PPUSH
71324: LD_INT 875
71326: PPUSH
71327: CALL_OW 12
71331: PPUSH
71332: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71336: LD_INT 1
71338: PPUSH
71339: LD_INT 5
71341: PPUSH
71342: CALL_OW 12
71346: PPUSH
71347: LD_VAR 0 1
71351: PPUSH
71352: LD_INT 1
71354: PPUSH
71355: CALL_OW 55
// end ;
71359: GO 71169
// end ;
71361: LD_VAR 0 5
71365: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71366: LD_INT 0
71368: PPUSH
71369: PPUSH
71370: PPUSH
71371: PPUSH
71372: PPUSH
71373: PPUSH
71374: PPUSH
71375: PPUSH
// if not turrets or not factories then
71376: LD_VAR 0 1
71380: NOT
71381: PUSH
71382: LD_VAR 0 2
71386: NOT
71387: OR
71388: IFFALSE 71392
// exit ;
71390: GO 71699
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71392: LD_ADDR_VAR 0 10
71396: PUSH
71397: LD_INT 5
71399: PUSH
71400: LD_INT 6
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: LD_INT 2
71409: PUSH
71410: LD_INT 4
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PUSH
71417: LD_INT 3
71419: PUSH
71420: LD_INT 5
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: PUSH
71427: EMPTY
71428: LIST
71429: LIST
71430: LIST
71431: PUSH
71432: LD_INT 24
71434: PUSH
71435: LD_INT 25
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: LD_INT 23
71444: PUSH
71445: LD_INT 27
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 42
71458: PUSH
71459: LD_INT 43
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: PUSH
71466: LD_INT 44
71468: PUSH
71469: LD_INT 46
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 45
71478: PUSH
71479: LD_INT 47
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: LIST
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: LIST
71495: ST_TO_ADDR
// result := [ ] ;
71496: LD_ADDR_VAR 0 3
71500: PUSH
71501: EMPTY
71502: ST_TO_ADDR
// for i in turrets do
71503: LD_ADDR_VAR 0 4
71507: PUSH
71508: LD_VAR 0 1
71512: PUSH
71513: FOR_IN
71514: IFFALSE 71697
// begin nat := GetNation ( i ) ;
71516: LD_ADDR_VAR 0 7
71520: PUSH
71521: LD_VAR 0 4
71525: PPUSH
71526: CALL_OW 248
71530: ST_TO_ADDR
// weapon := 0 ;
71531: LD_ADDR_VAR 0 8
71535: PUSH
71536: LD_INT 0
71538: ST_TO_ADDR
// if not nat then
71539: LD_VAR 0 7
71543: NOT
71544: IFFALSE 71548
// continue ;
71546: GO 71513
// for j in list [ nat ] do
71548: LD_ADDR_VAR 0 5
71552: PUSH
71553: LD_VAR 0 10
71557: PUSH
71558: LD_VAR 0 7
71562: ARRAY
71563: PUSH
71564: FOR_IN
71565: IFFALSE 71606
// if GetBWeapon ( i ) = j [ 1 ] then
71567: LD_VAR 0 4
71571: PPUSH
71572: CALL_OW 269
71576: PUSH
71577: LD_VAR 0 5
71581: PUSH
71582: LD_INT 1
71584: ARRAY
71585: EQUAL
71586: IFFALSE 71604
// begin weapon := j [ 2 ] ;
71588: LD_ADDR_VAR 0 8
71592: PUSH
71593: LD_VAR 0 5
71597: PUSH
71598: LD_INT 2
71600: ARRAY
71601: ST_TO_ADDR
// break ;
71602: GO 71606
// end ;
71604: GO 71564
71606: POP
71607: POP
// if not weapon then
71608: LD_VAR 0 8
71612: NOT
71613: IFFALSE 71617
// continue ;
71615: GO 71513
// for k in factories do
71617: LD_ADDR_VAR 0 6
71621: PUSH
71622: LD_VAR 0 2
71626: PUSH
71627: FOR_IN
71628: IFFALSE 71693
// begin weapons := AvailableWeaponList ( k ) ;
71630: LD_ADDR_VAR 0 9
71634: PUSH
71635: LD_VAR 0 6
71639: PPUSH
71640: CALL_OW 478
71644: ST_TO_ADDR
// if not weapons then
71645: LD_VAR 0 9
71649: NOT
71650: IFFALSE 71654
// continue ;
71652: GO 71627
// if weapon in weapons then
71654: LD_VAR 0 8
71658: PUSH
71659: LD_VAR 0 9
71663: IN
71664: IFFALSE 71691
// begin result := [ i , weapon ] ;
71666: LD_ADDR_VAR 0 3
71670: PUSH
71671: LD_VAR 0 4
71675: PUSH
71676: LD_VAR 0 8
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: ST_TO_ADDR
// exit ;
71685: POP
71686: POP
71687: POP
71688: POP
71689: GO 71699
// end ; end ;
71691: GO 71627
71693: POP
71694: POP
// end ;
71695: GO 71513
71697: POP
71698: POP
// end ;
71699: LD_VAR 0 3
71703: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71704: LD_INT 0
71706: PPUSH
// if not side or side > 8 then
71707: LD_VAR 0 3
71711: NOT
71712: PUSH
71713: LD_VAR 0 3
71717: PUSH
71718: LD_INT 8
71720: GREATER
71721: OR
71722: IFFALSE 71726
// exit ;
71724: GO 71785
// if not range then
71726: LD_VAR 0 4
71730: NOT
71731: IFFALSE 71742
// range := - 12 ;
71733: LD_ADDR_VAR 0 4
71737: PUSH
71738: LD_INT 12
71740: NEG
71741: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71742: LD_VAR 0 1
71746: PPUSH
71747: LD_VAR 0 2
71751: PPUSH
71752: LD_VAR 0 3
71756: PPUSH
71757: LD_VAR 0 4
71761: PPUSH
71762: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71766: LD_VAR 0 1
71770: PPUSH
71771: LD_VAR 0 2
71775: PPUSH
71776: LD_VAR 0 3
71780: PPUSH
71781: CALL_OW 331
// end ;
71785: LD_VAR 0 5
71789: RET
// export function Video ( mode ) ; begin
71790: LD_INT 0
71792: PPUSH
// ingame_video = mode ;
71793: LD_ADDR_OWVAR 52
71797: PUSH
71798: LD_VAR 0 1
71802: ST_TO_ADDR
// interface_hidden = mode ;
71803: LD_ADDR_OWVAR 54
71807: PUSH
71808: LD_VAR 0 1
71812: ST_TO_ADDR
// end ;
71813: LD_VAR 0 2
71817: RET
// export function Join ( array , element ) ; begin
71818: LD_INT 0
71820: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71821: LD_ADDR_VAR 0 3
71825: PUSH
71826: LD_VAR 0 1
71830: PPUSH
71831: LD_VAR 0 1
71835: PUSH
71836: LD_INT 1
71838: PLUS
71839: PPUSH
71840: LD_VAR 0 2
71844: PPUSH
71845: CALL_OW 1
71849: ST_TO_ADDR
// end ;
71850: LD_VAR 0 3
71854: RET
// export function JoinUnion ( array , element ) ; begin
71855: LD_INT 0
71857: PPUSH
// result := array union element ;
71858: LD_ADDR_VAR 0 3
71862: PUSH
71863: LD_VAR 0 1
71867: PUSH
71868: LD_VAR 0 2
71872: UNION
71873: ST_TO_ADDR
// end ;
71874: LD_VAR 0 3
71878: RET
// export function GetBehemoths ( side ) ; begin
71879: LD_INT 0
71881: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
71882: LD_ADDR_VAR 0 2
71886: PUSH
71887: LD_INT 22
71889: PUSH
71890: LD_VAR 0 1
71894: PUSH
71895: EMPTY
71896: LIST
71897: LIST
71898: PUSH
71899: LD_INT 31
71901: PUSH
71902: LD_INT 25
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PPUSH
71913: CALL_OW 69
71917: ST_TO_ADDR
// end ;
71918: LD_VAR 0 2
71922: RET
// export function Shuffle ( array ) ; var i , index ; begin
71923: LD_INT 0
71925: PPUSH
71926: PPUSH
71927: PPUSH
// result := [ ] ;
71928: LD_ADDR_VAR 0 2
71932: PUSH
71933: EMPTY
71934: ST_TO_ADDR
// if not array then
71935: LD_VAR 0 1
71939: NOT
71940: IFFALSE 71944
// exit ;
71942: GO 72043
// Randomize ;
71944: CALL_OW 10
// for i = array downto 1 do
71948: LD_ADDR_VAR 0 3
71952: PUSH
71953: DOUBLE
71954: LD_VAR 0 1
71958: INC
71959: ST_TO_ADDR
71960: LD_INT 1
71962: PUSH
71963: FOR_DOWNTO
71964: IFFALSE 72041
// begin index := rand ( 1 , array ) ;
71966: LD_ADDR_VAR 0 4
71970: PUSH
71971: LD_INT 1
71973: PPUSH
71974: LD_VAR 0 1
71978: PPUSH
71979: CALL_OW 12
71983: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71984: LD_ADDR_VAR 0 2
71988: PUSH
71989: LD_VAR 0 2
71993: PPUSH
71994: LD_VAR 0 2
71998: PUSH
71999: LD_INT 1
72001: PLUS
72002: PPUSH
72003: LD_VAR 0 1
72007: PUSH
72008: LD_VAR 0 4
72012: ARRAY
72013: PPUSH
72014: CALL_OW 2
72018: ST_TO_ADDR
// array := Delete ( array , index ) ;
72019: LD_ADDR_VAR 0 1
72023: PUSH
72024: LD_VAR 0 1
72028: PPUSH
72029: LD_VAR 0 4
72033: PPUSH
72034: CALL_OW 3
72038: ST_TO_ADDR
// end ;
72039: GO 71963
72041: POP
72042: POP
// end ;
72043: LD_VAR 0 2
72047: RET
// export function GetBaseMaterials ( base ) ; begin
72048: LD_INT 0
72050: PPUSH
// result := [ 0 , 0 , 0 ] ;
72051: LD_ADDR_VAR 0 2
72055: PUSH
72056: LD_INT 0
72058: PUSH
72059: LD_INT 0
72061: PUSH
72062: LD_INT 0
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: LIST
72069: ST_TO_ADDR
// if not base then
72070: LD_VAR 0 1
72074: NOT
72075: IFFALSE 72079
// exit ;
72077: GO 72128
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72079: LD_ADDR_VAR 0 2
72083: PUSH
72084: LD_VAR 0 1
72088: PPUSH
72089: LD_INT 1
72091: PPUSH
72092: CALL_OW 275
72096: PUSH
72097: LD_VAR 0 1
72101: PPUSH
72102: LD_INT 2
72104: PPUSH
72105: CALL_OW 275
72109: PUSH
72110: LD_VAR 0 1
72114: PPUSH
72115: LD_INT 3
72117: PPUSH
72118: CALL_OW 275
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: LIST
72127: ST_TO_ADDR
// end ;
72128: LD_VAR 0 2
72132: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72133: LD_INT 0
72135: PPUSH
72136: PPUSH
// result := array ;
72137: LD_ADDR_VAR 0 3
72141: PUSH
72142: LD_VAR 0 1
72146: ST_TO_ADDR
// if size > 0 then
72147: LD_VAR 0 2
72151: PUSH
72152: LD_INT 0
72154: GREATER
72155: IFFALSE 72201
// for i := array downto size do
72157: LD_ADDR_VAR 0 4
72161: PUSH
72162: DOUBLE
72163: LD_VAR 0 1
72167: INC
72168: ST_TO_ADDR
72169: LD_VAR 0 2
72173: PUSH
72174: FOR_DOWNTO
72175: IFFALSE 72199
// result := Delete ( result , result ) ;
72177: LD_ADDR_VAR 0 3
72181: PUSH
72182: LD_VAR 0 3
72186: PPUSH
72187: LD_VAR 0 3
72191: PPUSH
72192: CALL_OW 3
72196: ST_TO_ADDR
72197: GO 72174
72199: POP
72200: POP
// end ;
72201: LD_VAR 0 3
72205: RET
// export function ComExit ( unit ) ; var tmp ; begin
72206: LD_INT 0
72208: PPUSH
72209: PPUSH
// if not IsInUnit ( unit ) then
72210: LD_VAR 0 1
72214: PPUSH
72215: CALL_OW 310
72219: NOT
72220: IFFALSE 72224
// exit ;
72222: GO 72284
// tmp := IsInUnit ( unit ) ;
72224: LD_ADDR_VAR 0 3
72228: PUSH
72229: LD_VAR 0 1
72233: PPUSH
72234: CALL_OW 310
72238: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72239: LD_VAR 0 3
72243: PPUSH
72244: CALL_OW 247
72248: PUSH
72249: LD_INT 2
72251: EQUAL
72252: IFFALSE 72265
// ComExitVehicle ( unit ) else
72254: LD_VAR 0 1
72258: PPUSH
72259: CALL_OW 121
72263: GO 72274
// ComExitBuilding ( unit ) ;
72265: LD_VAR 0 1
72269: PPUSH
72270: CALL_OW 122
// result := tmp ;
72274: LD_ADDR_VAR 0 2
72278: PUSH
72279: LD_VAR 0 3
72283: ST_TO_ADDR
// end ;
72284: LD_VAR 0 2
72288: RET
// export function ResetHc ; begin
72289: LD_INT 0
72291: PPUSH
// InitHc ;
72292: CALL_OW 19
// hc_importance := 0 ;
72296: LD_ADDR_OWVAR 32
72300: PUSH
72301: LD_INT 0
72303: ST_TO_ADDR
// end ;
72304: LD_VAR 0 1
72308: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72309: LD_INT 0
72311: PPUSH
72312: PPUSH
72313: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72314: LD_ADDR_VAR 0 6
72318: PUSH
72319: LD_VAR 0 1
72323: PUSH
72324: LD_VAR 0 3
72328: PLUS
72329: PUSH
72330: LD_INT 2
72332: DIV
72333: ST_TO_ADDR
// if _x < 0 then
72334: LD_VAR 0 6
72338: PUSH
72339: LD_INT 0
72341: LESS
72342: IFFALSE 72359
// _x := _x * - 1 ;
72344: LD_ADDR_VAR 0 6
72348: PUSH
72349: LD_VAR 0 6
72353: PUSH
72354: LD_INT 1
72356: NEG
72357: MUL
72358: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72359: LD_ADDR_VAR 0 7
72363: PUSH
72364: LD_VAR 0 2
72368: PUSH
72369: LD_VAR 0 4
72373: PLUS
72374: PUSH
72375: LD_INT 2
72377: DIV
72378: ST_TO_ADDR
// if _y < 0 then
72379: LD_VAR 0 7
72383: PUSH
72384: LD_INT 0
72386: LESS
72387: IFFALSE 72404
// _y := _y * - 1 ;
72389: LD_ADDR_VAR 0 7
72393: PUSH
72394: LD_VAR 0 7
72398: PUSH
72399: LD_INT 1
72401: NEG
72402: MUL
72403: ST_TO_ADDR
// result := [ _x , _y ] ;
72404: LD_ADDR_VAR 0 5
72408: PUSH
72409: LD_VAR 0 6
72413: PUSH
72414: LD_VAR 0 7
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: ST_TO_ADDR
// end ;
72423: LD_VAR 0 5
72427: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72428: LD_INT 0
72430: PPUSH
72431: PPUSH
72432: PPUSH
72433: PPUSH
// task := GetTaskList ( unit ) ;
72434: LD_ADDR_VAR 0 7
72438: PUSH
72439: LD_VAR 0 1
72443: PPUSH
72444: CALL_OW 437
72448: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72449: LD_VAR 0 7
72453: NOT
72454: PUSH
72455: LD_VAR 0 1
72459: PPUSH
72460: LD_VAR 0 2
72464: PPUSH
72465: CALL_OW 308
72469: NOT
72470: AND
72471: IFFALSE 72475
// exit ;
72473: GO 72593
// if IsInArea ( unit , area ) then
72475: LD_VAR 0 1
72479: PPUSH
72480: LD_VAR 0 2
72484: PPUSH
72485: CALL_OW 308
72489: IFFALSE 72507
// begin ComMoveToArea ( unit , goAway ) ;
72491: LD_VAR 0 1
72495: PPUSH
72496: LD_VAR 0 3
72500: PPUSH
72501: CALL_OW 113
// exit ;
72505: GO 72593
// end ; if task [ 1 ] [ 1 ] <> M then
72507: LD_VAR 0 7
72511: PUSH
72512: LD_INT 1
72514: ARRAY
72515: PUSH
72516: LD_INT 1
72518: ARRAY
72519: PUSH
72520: LD_STRING M
72522: NONEQUAL
72523: IFFALSE 72527
// exit ;
72525: GO 72593
// x := task [ 1 ] [ 2 ] ;
72527: LD_ADDR_VAR 0 5
72531: PUSH
72532: LD_VAR 0 7
72536: PUSH
72537: LD_INT 1
72539: ARRAY
72540: PUSH
72541: LD_INT 2
72543: ARRAY
72544: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72545: LD_ADDR_VAR 0 6
72549: PUSH
72550: LD_VAR 0 7
72554: PUSH
72555: LD_INT 1
72557: ARRAY
72558: PUSH
72559: LD_INT 3
72561: ARRAY
72562: ST_TO_ADDR
// if InArea ( x , y , area ) then
72563: LD_VAR 0 5
72567: PPUSH
72568: LD_VAR 0 6
72572: PPUSH
72573: LD_VAR 0 2
72577: PPUSH
72578: CALL_OW 309
72582: IFFALSE 72593
// ComStop ( unit ) ;
72584: LD_VAR 0 1
72588: PPUSH
72589: CALL_OW 141
// end ;
72593: LD_VAR 0 4
72597: RET
// export function Abs ( value ) ; begin
72598: LD_INT 0
72600: PPUSH
// result := value ;
72601: LD_ADDR_VAR 0 2
72605: PUSH
72606: LD_VAR 0 1
72610: ST_TO_ADDR
// if value < 0 then
72611: LD_VAR 0 1
72615: PUSH
72616: LD_INT 0
72618: LESS
72619: IFFALSE 72636
// result := value * - 1 ;
72621: LD_ADDR_VAR 0 2
72625: PUSH
72626: LD_VAR 0 1
72630: PUSH
72631: LD_INT 1
72633: NEG
72634: MUL
72635: ST_TO_ADDR
// end ; end_of_file
72636: LD_VAR 0 2
72640: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72641: LD_VAR 0 1
72645: PUSH
72646: LD_INT 200
72648: DOUBLE
72649: GREATEREQUAL
72650: IFFALSE 72658
72652: LD_INT 299
72654: DOUBLE
72655: LESSEQUAL
72656: IFTRUE 72660
72658: GO 72692
72660: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72661: LD_VAR 0 1
72665: PPUSH
72666: LD_VAR 0 2
72670: PPUSH
72671: LD_VAR 0 3
72675: PPUSH
72676: LD_VAR 0 4
72680: PPUSH
72681: LD_VAR 0 5
72685: PPUSH
72686: CALL 31954 0 5
72690: GO 72769
72692: LD_INT 300
72694: DOUBLE
72695: GREATEREQUAL
72696: IFFALSE 72704
72698: LD_INT 399
72700: DOUBLE
72701: LESSEQUAL
72702: IFTRUE 72706
72704: GO 72768
72706: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72707: LD_VAR 0 1
72711: PPUSH
72712: LD_VAR 0 2
72716: PPUSH
72717: LD_VAR 0 3
72721: PPUSH
72722: LD_VAR 0 4
72726: PPUSH
72727: LD_VAR 0 5
72731: PPUSH
72732: LD_VAR 0 6
72736: PPUSH
72737: LD_VAR 0 7
72741: PPUSH
72742: LD_VAR 0 8
72746: PPUSH
72747: LD_VAR 0 9
72751: PPUSH
72752: LD_VAR 0 10
72756: PPUSH
72757: LD_VAR 0 11
72761: PPUSH
72762: CALL 29860 0 11
72766: GO 72769
72768: POP
// end ;
72769: PPOPN 11
72771: END
