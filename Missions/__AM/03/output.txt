// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3454 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2668 0 0
// PrepareWesternBase ;
  41: CALL 2897 0 0
// Action ;
  45: CALL 5785 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty , vcount , tmpv ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
// uc_side := 4 ;
1157: LD_ADDR_OWVAR 20
1161: PUSH
1162: LD_INT 4
1164: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1165: LD_ADDR_EXP 46
1169: PUSH
1170: LD_STRING Powell
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: LD_STRING 
1178: PPUSH
1179: CALL 39698 0 3
1183: ST_TO_ADDR
// uc_side := 1 ;
1184: LD_ADDR_OWVAR 20
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// uc_nation := 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// if debug then
1200: LD_EXP 1
1204: IFFALSE 1550
// begin for i = 1 to 4 do
1206: LD_ADDR_VAR 0 2
1210: PUSH
1211: DOUBLE
1212: LD_INT 1
1214: DEC
1215: ST_TO_ADDR
1216: LD_INT 4
1218: PUSH
1219: FOR_TO
1220: IFFALSE 1271
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL_OW 380
// un := CreateHuman ;
1243: LD_ADDR_VAR 0 3
1247: PUSH
1248: CALL_OW 44
1252: ST_TO_ADDR
// others := others ^ un ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_VAR 0 5
1262: PUSH
1263: LD_VAR 0 3
1267: ADD
1268: ST_TO_ADDR
// end ;
1269: GO 1219
1271: POP
1272: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1273: LD_ADDR_VAR 0 6
1277: PUSH
1278: LD_INT 21
1280: PUSH
1281: LD_INT 1
1283: PUSH
1284: LD_INT 1
1286: PUSH
1287: LD_INT 42
1289: PUSH
1290: LD_INT 0
1292: PUSH
1293: LD_INT 750
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 21
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 42
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 750
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_INT 21
1332: PUSH
1333: LD_INT 1
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: LD_INT 42
1341: PUSH
1342: LD_INT 0
1344: PUSH
1345: LD_INT 750
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 42
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 750
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 21
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 44
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: LD_INT 750
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: LD_INT 43
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 750
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 21
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: LD_INT 43
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 750
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 21
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 43
1471: PUSH
1472: LD_INT 0
1474: PUSH
1475: LD_INT 750
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 21
1488: PUSH
1489: LD_INT 1
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 90
1500: PUSH
1501: LD_INT 504
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 51
1523: PUSH
1524: LD_INT 80
1526: PUSH
1527: LD_INT 750
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1550: LD_ADDR_EXP 37
1554: PUSH
1555: LD_STRING JMM
1557: PPUSH
1558: LD_EXP 1
1562: NOT
1563: PPUSH
1564: LD_EXP 3
1568: PPUSH
1569: CALL 39698 0 3
1573: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1574: LD_ADDR_EXP 38
1578: PUSH
1579: LD_STRING Bobby
1581: PPUSH
1582: LD_EXP 1
1586: NOT
1587: PPUSH
1588: LD_EXP 3
1592: PPUSH
1593: CALL 39698 0 3
1597: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1598: LD_ADDR_EXP 39
1602: PUSH
1603: LD_STRING Cyrus
1605: PPUSH
1606: LD_EXP 1
1610: NOT
1611: PPUSH
1612: LD_EXP 3
1616: PPUSH
1617: CALL 39698 0 3
1621: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1622: LD_ADDR_EXP 40
1626: PUSH
1627: LD_STRING Lisa
1629: PPUSH
1630: LD_EXP 1
1634: NOT
1635: PPUSH
1636: LD_EXP 3
1640: PPUSH
1641: CALL 39698 0 3
1645: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1646: LD_ADDR_EXP 41
1650: PUSH
1651: LD_STRING Khatam
1653: PPUSH
1654: LD_EXP 1
1658: NOT
1659: PPUSH
1660: LD_EXP 3
1664: PPUSH
1665: CALL 39698 0 3
1669: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1670: LD_ADDR_EXP 42
1674: PUSH
1675: LD_STRING Brian
1677: PPUSH
1678: LD_EXP 1
1682: NOT
1683: PPUSH
1684: LD_EXP 3
1688: PPUSH
1689: CALL 39698 0 3
1693: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1694: LD_ADDR_EXP 43
1698: PUSH
1699: LD_STRING Jerry
1701: PPUSH
1702: LD_EXP 1
1706: NOT
1707: PPUSH
1708: LD_EXP 3
1712: PPUSH
1713: CALL 39698 0 3
1717: ST_TO_ADDR
// if Bobby then
1718: LD_EXP 38
1722: IFFALSE 1753
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1724: LD_ADDR_VAR 0 4
1728: PUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: LD_VAR 0 4
1738: PUSH
1739: LD_INT 1
1741: PLUS
1742: PPUSH
1743: LD_EXP 38
1747: PPUSH
1748: CALL_OW 2
1752: ST_TO_ADDR
// if Cyrus then
1753: LD_EXP 39
1757: IFFALSE 1788
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_VAR 0 4
1773: PUSH
1774: LD_INT 1
1776: PLUS
1777: PPUSH
1778: LD_EXP 39
1782: PPUSH
1783: CALL_OW 2
1787: ST_TO_ADDR
// if Lisa then
1788: LD_EXP 40
1792: IFFALSE 1823
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: LD_VAR 0 4
1808: PUSH
1809: LD_INT 1
1811: PLUS
1812: PPUSH
1813: LD_EXP 40
1817: PPUSH
1818: CALL_OW 2
1822: ST_TO_ADDR
// if Khatam then
1823: LD_EXP 41
1827: IFFALSE 1858
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: LD_VAR 0 4
1843: PUSH
1844: LD_INT 1
1846: PLUS
1847: PPUSH
1848: LD_EXP 41
1852: PPUSH
1853: CALL_OW 2
1857: ST_TO_ADDR
// if Brian then
1858: LD_EXP 42
1862: IFFALSE 1893
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1864: LD_ADDR_VAR 0 4
1868: PUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_VAR 0 4
1878: PUSH
1879: LD_INT 1
1881: PLUS
1882: PPUSH
1883: LD_EXP 42
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// if Jerry then
1893: LD_EXP 43
1897: IFFALSE 1928
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: PLUS
1917: PPUSH
1918: LD_EXP 43
1922: PPUSH
1923: CALL_OW 2
1927: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1928: LD_STRING 02_other_survivors
1930: PPUSH
1931: CALL_OW 28
1935: IFFALSE 1950
// others := CreateCharacterSet ( 02_other_survivors ) ;
1937: LD_ADDR_VAR 0 5
1941: PUSH
1942: LD_STRING 02_other_survivors
1944: PPUSH
1945: CALL_OW 31
1949: ST_TO_ADDR
// if others then
1950: LD_VAR 0 5
1954: IFFALSE 1979
// begin tmp := tmp ^ others ;
1956: LD_ADDR_VAR 0 4
1960: PUSH
1961: LD_VAR 0 4
1965: PUSH
1966: LD_VAR 0 5
1970: ADD
1971: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1972: LD_STRING 02_other_survivors
1974: PPUSH
1975: CALL_OW 40
// end ; jmm_units := tmp diff 0 ;
1979: LD_ADDR_EXP 4
1983: PUSH
1984: LD_VAR 0 4
1988: PUSH
1989: LD_INT 0
1991: DIFF
1992: ST_TO_ADDR
// if not vehicles then
1993: LD_VAR 0 6
1997: NOT
1998: IFFALSE 2015
// vehicles := LoadVariable ( 02_tanks_1 , [ ] ) ;
2000: LD_ADDR_VAR 0 6
2004: PUSH
2005: LD_STRING 02_tanks_1
2007: PPUSH
2008: EMPTY
2009: PPUSH
2010: CALL_OW 30
2014: ST_TO_ADDR
// if vehicles then
2015: LD_VAR 0 6
2019: IFFALSE 2387
// begin got_mech := false ;
2021: LD_ADDR_VAR 0 7
2025: PUSH
2026: LD_INT 0
2028: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 72
2048: IFFALSE 2058
// got_mech := true ;
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// vcount := Count ( vehicles ) ;
2058: LD_ADDR_VAR 0 9
2062: PUSH
2063: LD_VAR 0 6
2067: PPUSH
2068: CALL 41800 0 1
2072: ST_TO_ADDR
// if vcount > 1 then
2073: LD_VAR 0 9
2077: PUSH
2078: LD_INT 1
2080: GREATER
2081: IFFALSE 2184
// begin for i := 2 to vcount do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 2
2091: DEC
2092: ST_TO_ADDR
2093: LD_VAR 0 9
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2182
// if vehicles [ i ] [ 4 ] = ru_cargo_bay then
2101: LD_VAR 0 6
2105: PUSH
2106: LD_VAR 0 2
2110: ARRAY
2111: PUSH
2112: LD_INT 4
2114: ARRAY
2115: PUSH
2116: LD_INT 51
2118: EQUAL
2119: IFFALSE 2180
// begin tmpv := vehicles [ i ] ;
2121: LD_ADDR_VAR 0 10
2125: PUSH
2126: LD_VAR 0 6
2130: PUSH
2131: LD_VAR 0 2
2135: ARRAY
2136: ST_TO_ADDR
// vehicles := Delete ( vehicles , i ) ;
2137: LD_ADDR_VAR 0 6
2141: PUSH
2142: LD_VAR 0 6
2146: PPUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 3
2156: ST_TO_ADDR
// vehicles := Insert ( vehicles , 1 , tmpv ) ;
2157: LD_ADDR_VAR 0 6
2161: PUSH
2162: LD_VAR 0 6
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_VAR 0 10
2174: PPUSH
2175: CALL_OW 2
2179: ST_TO_ADDR
// end ;
2180: GO 2098
2182: POP
2183: POP
// end ; if vcount > 6 then
2184: LD_VAR 0 9
2188: PUSH
2189: LD_INT 6
2191: GREATER
2192: IFFALSE 2202
// vcount := 6 ;
2194: LD_ADDR_VAR 0 9
2198: PUSH
2199: LD_INT 6
2201: ST_TO_ADDR
// if jmm_units + 1 < vcount then
2202: LD_EXP 4
2206: PUSH
2207: LD_INT 1
2209: PLUS
2210: PUSH
2211: LD_VAR 0 9
2215: LESS
2216: IFFALSE 2232
// vcount := jmm_units + 1 ;
2218: LD_ADDR_VAR 0 9
2222: PUSH
2223: LD_EXP 4
2227: PUSH
2228: LD_INT 1
2230: PLUS
2231: ST_TO_ADDR
// for i := 1 to vcount do
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: DOUBLE
2238: LD_INT 1
2240: DEC
2241: ST_TO_ADDR
2242: LD_VAR 0 9
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2385
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 3
2260: PPUSH
2261: LD_VAR 0 6
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: LD_VAR 0 6
2280: PUSH
2281: LD_VAR 0 2
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 6
2295: PUSH
2296: LD_VAR 0 2
2300: ARRAY
2301: PUSH
2302: LD_INT 3
2304: ARRAY
2305: PPUSH
2306: LD_VAR 0 6
2310: PUSH
2311: LD_VAR 0 2
2315: ARRAY
2316: PUSH
2317: LD_INT 4
2319: ARRAY
2320: PPUSH
2321: LD_INT 40
2323: PPUSH
2324: CALL 497 0 7
2328: ST_TO_ADDR
// if not got_mech then
2329: LD_VAR 0 7
2333: NOT
2334: IFFALSE 2360
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_VAR 0 6
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_INT 6
2354: ARRAY
2355: PPUSH
2356: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_VAR 0 3
2377: PPUSH
2378: CALL_OW 2
2382: ST_TO_ADDR
// end ;
2383: GO 2247
2385: POP
2386: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
2387: LD_EXP 37
2391: PPUSH
2392: LD_INT 194
2394: PPUSH
2395: LD_INT 119
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 48
// if tmp then
2405: LD_VAR 0 4
2409: IFFALSE 2597
// begin for i in tmp do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_VAR 0 4
2420: PUSH
2421: FOR_IN
2422: IFFALSE 2595
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL_OW 257
2433: PUSH
2434: LD_INT 1
2436: NONEQUAL
2437: PUSH
2438: LD_VAR 0 2
2442: PUSH
2443: LD_EXP 41
2447: NONEQUAL
2448: AND
2449: IFFALSE 2463
// SetClass ( i , 1 ) ;
2451: LD_VAR 0 2
2455: PPUSH
2456: LD_INT 1
2458: PPUSH
2459: CALL_OW 336
// if i = Khatam then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_EXP 41
2472: EQUAL
2473: IFFALSE 2487
// SetClass ( i , 4 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 4
2482: PPUSH
2483: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2487: LD_ADDR_VAR 0 8
2491: PUSH
2492: LD_INT 22
2494: PUSH
2495: LD_INT 1
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 21
2504: PUSH
2505: LD_INT 2
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 58
2514: PUSH
2515: EMPTY
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2528: LD_VAR 0 2
2532: PPUSH
2533: CALL_OW 247
2537: PUSH
2538: LD_INT 1
2540: EQUAL
2541: PUSH
2542: LD_VAR 0 8
2546: AND
2547: IFFALSE 2569
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2549: LD_VAR 0 2
2553: PPUSH
2554: LD_VAR 0 8
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PPUSH
2563: CALL_OW 52
2567: GO 2584
// PlaceUnitArea ( i , startArea , false ) ;
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 0
2579: PPUSH
2580: CALL_OW 49
// ComHold ( i ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: CALL_OW 140
// end ;
2593: GO 2421
2595: POP
2596: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2597: LD_ADDR_EXP 7
2601: PUSH
2602: LD_STRING 02_mikhailStatus_1
2604: PPUSH
2605: LD_INT 0
2607: PPUSH
2608: CALL_OW 30
2612: ST_TO_ADDR
// if not bierezov_exist and not debug then
2613: LD_EXP 7
2617: NOT
2618: PUSH
2619: LD_EXP 1
2623: NOT
2624: AND
2625: IFFALSE 2629
// exit ;
2627: GO 2663
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2629: LD_ADDR_EXP 45
2633: PUSH
2634: LD_STRING Mikhail
2636: PPUSH
2637: LD_INT 0
2639: PPUSH
2640: LD_STRING 
2642: PPUSH
2643: CALL 39698 0 3
2647: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2648: LD_EXP 45
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 49
// end ;
2663: LD_VAR 0 1
2667: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
2673: PPUSH
// uc_side := 4 ;
2674: LD_ADDR_OWVAR 20
2678: PUSH
2679: LD_INT 4
2681: ST_TO_ADDR
// uc_nation := 1 ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 1
2689: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2690: LD_ADDR_EXP 44
2694: PUSH
2695: LD_STRING Cornell
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: LD_STRING 
2703: PPUSH
2704: CALL 39698 0 3
2708: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2709: LD_ADDR_EXP 6
2713: PUSH
2714: LD_INT 9
2716: PUSH
2717: LD_EXP 4
2721: MINUS
2722: ST_TO_ADDR
// tmp := [ ] ;
2723: LD_ADDR_VAR 0 2
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// if cornel_units < 4 then
2730: LD_EXP 6
2734: PUSH
2735: LD_INT 4
2737: LESS
2738: IFFALSE 2748
// cornel_units := 4 ;
2740: LD_ADDR_EXP 6
2744: PUSH
2745: LD_INT 4
2747: ST_TO_ADDR
// for i = 1 to cornel_units do
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: DOUBLE
2754: LD_INT 1
2756: DEC
2757: ST_TO_ADDR
2758: LD_EXP 6
2762: PUSH
2763: FOR_TO
2764: IFFALSE 2862
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2766: LD_INT 0
2768: PPUSH
2769: LD_INT 1
2771: PUSH
2772: LD_INT 1
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: LD_INT 4
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: PUSH
2791: LD_VAR 0 4
2795: PUSH
2796: LD_INT 5
2798: MOD
2799: PUSH
2800: LD_INT 1
2802: PLUS
2803: ARRAY
2804: PPUSH
2805: LD_INT 2
2807: PPUSH
2808: CALL_OW 380
// un := CreateHuman ;
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: CALL_OW 44
2821: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2822: LD_ADDR_VAR 0 2
2826: PUSH
2827: LD_VAR 0 2
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: LD_VAR 0 3
2839: PPUSH
2840: CALL_OW 2
2844: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2845: LD_VAR 0 3
2849: PPUSH
2850: LD_INT 2
2852: PPUSH
2853: LD_INT 0
2855: PPUSH
2856: CALL_OW 49
// end ;
2860: GO 2763
2862: POP
2863: POP
// cornel_units := tmp ;
2864: LD_ADDR_EXP 6
2868: PUSH
2869: LD_VAR 0 2
2873: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2874: LD_EXP 44
2878: PPUSH
2879: LD_INT 191
2881: PPUSH
2882: LD_INT 106
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 48
// end ;
2892: LD_VAR 0 1
2896: RET
// export function PrepareWesternBase ; var i ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
// uc_side := 8 ;
2901: LD_ADDR_OWVAR 20
2905: PUSH
2906: LD_INT 8
2908: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2909: LD_ADDR_EXP 47
2913: PUSH
2914: LD_STRING Lynch
2916: PPUSH
2917: LD_INT 0
2919: PPUSH
2920: LD_STRING 
2922: PPUSH
2923: CALL 39698 0 3
2927: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2928: LD_ADDR_EXP 48
2932: PUSH
2933: LD_STRING Walker
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: LD_STRING 
2941: PPUSH
2942: CALL 39698 0 3
2946: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2947: LD_ADDR_EXP 49
2951: PUSH
2952: LD_STRING Turner
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: LD_STRING 
2960: PPUSH
2961: CALL 39698 0 3
2965: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2966: LD_ADDR_EXP 50
2970: PUSH
2971: LD_STRING Jillian
2973: PPUSH
2974: LD_INT 0
2976: PPUSH
2977: LD_STRING 
2979: PPUSH
2980: CALL 39698 0 3
2984: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: LD_EXP 47
2994: PUSH
2995: LD_EXP 48
2999: PUSH
3000: LD_EXP 49
3004: PUSH
3005: LD_EXP 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: FOR_IN
3017: IFFALSE 3045
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 3
3026: PPUSH
3027: LD_INT 0
3029: PPUSH
3030: CALL_OW 49
// ComHold ( i ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 140
// end ;
3043: GO 3016
3045: POP
3046: POP
// end ;
3047: LD_VAR 0 1
3051: RET
// export function SelectGroup ; var units , selected , i ; begin
3052: LD_INT 0
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
3058: LD_ADDR_VAR 0 2
3062: PUSH
3063: LD_EXP 37
3067: PUSH
3068: LD_INT -3
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: LD_EXP 4
3079: ADD
3080: PUSH
3081: LD_INT -2
3083: PUSH
3084: LD_INT -4
3086: PUSH
3087: LD_EXP 44
3091: PUSH
3092: LD_EXP 45
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: ADD
3103: PUSH
3104: LD_INT -3
3106: PUSH
3107: EMPTY
3108: LIST
3109: ADD
3110: PUSH
3111: LD_EXP 6
3115: ADD
3116: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
3117: LD_ADDR_VAR 0 3
3121: PUSH
3122: LD_EXP 37
3126: PUSH
3127: LD_STRING Select four characters to go with you
3129: PPUSH
3130: LD_INT 4
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: LD_VAR 0 2
3140: PPUSH
3141: EMPTY
3142: PPUSH
3143: CALL_OW 42
3147: ADD
3148: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
3149: LD_ADDR_EXP 6
3153: PUSH
3154: LD_EXP 4
3158: PUSH
3159: LD_EXP 6
3163: UNION
3164: PUSH
3165: LD_VAR 0 3
3169: DIFF
3170: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
3171: LD_ADDR_VAR 0 4
3175: PUSH
3176: LD_EXP 6
3180: PUSH
3181: LD_EXP 45
3185: ADD
3186: PUSH
3187: FOR_IN
3188: IFFALSE 3219
// if GetSide ( i ) = 1 then
3190: LD_VAR 0 4
3194: PPUSH
3195: CALL_OW 255
3199: PUSH
3200: LD_INT 1
3202: EQUAL
3203: IFFALSE 3217
// SetSide ( i , 4 ) ;
3205: LD_VAR 0 4
3209: PPUSH
3210: LD_INT 4
3212: PPUSH
3213: CALL_OW 235
3217: GO 3187
3219: POP
3220: POP
// for i in selected do
3221: LD_ADDR_VAR 0 4
3225: PUSH
3226: LD_VAR 0 3
3230: PUSH
3231: FOR_IN
3232: IFFALSE 3263
// if GetSide ( i ) = 4 then
3234: LD_VAR 0 4
3238: PPUSH
3239: CALL_OW 255
3243: PUSH
3244: LD_INT 4
3246: EQUAL
3247: IFFALSE 3261
// SetSide ( i , 1 ) ;
3249: LD_VAR 0 4
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: CALL_OW 235
3261: GO 3231
3263: POP
3264: POP
// jmm_units := jmm_units diff cornel_units ;
3265: LD_ADDR_EXP 4
3269: PUSH
3270: LD_EXP 4
3274: PUSH
3275: LD_EXP 6
3279: DIFF
3280: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
3281: LD_EXP 38
3285: PPUSH
3286: CALL_OW 255
3290: PUSH
3291: LD_INT 4
3293: EQUAL
3294: IFFALSE 3309
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
3296: LD_EXP 3
3300: PUSH
3301: LD_STRING Bobby
3303: STR
3304: PPUSH
3305: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
3309: LD_EXP 39
3313: PPUSH
3314: CALL_OW 255
3318: PUSH
3319: LD_INT 4
3321: EQUAL
3322: IFFALSE 3337
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
3324: LD_EXP 3
3328: PUSH
3329: LD_STRING Cyrus
3331: STR
3332: PPUSH
3333: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
3337: LD_EXP 40
3341: PPUSH
3342: CALL_OW 255
3346: PUSH
3347: LD_INT 4
3349: EQUAL
3350: IFFALSE 3365
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
3352: LD_EXP 3
3356: PUSH
3357: LD_STRING Lisa
3359: STR
3360: PPUSH
3361: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
3365: LD_EXP 41
3369: PPUSH
3370: CALL_OW 255
3374: PUSH
3375: LD_INT 4
3377: EQUAL
3378: IFFALSE 3393
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
3380: LD_EXP 3
3384: PUSH
3385: LD_STRING Khatam
3387: STR
3388: PPUSH
3389: CALL_OW 40
// if GetSide ( Brian ) = 4 then
3393: LD_EXP 42
3397: PPUSH
3398: CALL_OW 255
3402: PUSH
3403: LD_INT 4
3405: EQUAL
3406: IFFALSE 3421
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3408: LD_EXP 3
3412: PUSH
3413: LD_STRING Brian
3415: STR
3416: PPUSH
3417: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3421: LD_EXP 43
3425: PPUSH
3426: CALL_OW 255
3430: PUSH
3431: LD_INT 4
3433: EQUAL
3434: IFFALSE 3449
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3436: LD_EXP 3
3440: PUSH
3441: LD_STRING Jerry
3443: STR
3444: PPUSH
3445: CALL_OW 40
// end ; end_of_file
3449: LD_VAR 0 1
3453: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3454: LD_INT 0
3456: PPUSH
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
// ru_alert := false ;
3469: LD_ADDR_EXP 60
3473: PUSH
3474: LD_INT 0
3476: ST_TO_ADDR
// ru_produce_list := [ ] ;
3477: LD_ADDR_EXP 57
3481: PUSH
3482: EMPTY
3483: ST_TO_ADDR
// if Difficulty > 1 then
3484: LD_OWVAR 67
3488: PUSH
3489: LD_INT 1
3491: GREATER
3492: IFFALSE 3616
// begin uc_side := 3 ;
3494: LD_ADDR_OWVAR 20
3498: PUSH
3499: LD_INT 3
3501: ST_TO_ADDR
// uc_nation := 3 ;
3502: LD_ADDR_OWVAR 21
3506: PUSH
3507: LD_INT 3
3509: ST_TO_ADDR
// bc_type := b_breastwork ;
3510: LD_ADDR_OWVAR 42
3514: PUSH
3515: LD_INT 31
3517: ST_TO_ADDR
// bc_level := Difficulty ;
3518: LD_ADDR_OWVAR 43
3522: PUSH
3523: LD_OWVAR 67
3527: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3528: LD_INT 22
3530: PPUSH
3531: LD_INT 14
3533: PPUSH
3534: LD_INT 0
3536: PPUSH
3537: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3541: LD_INT 48
3543: PPUSH
3544: LD_INT 46
3546: PPUSH
3547: LD_INT 0
3549: PPUSH
3550: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3554: LD_INT 86
3556: PPUSH
3557: LD_INT 65
3559: PPUSH
3560: LD_INT 5
3562: PPUSH
3563: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3567: LD_INT 165
3569: PPUSH
3570: LD_INT 73
3572: PPUSH
3573: LD_INT 5
3575: PPUSH
3576: CALL_OW 47
// if Difficulty > 2 then
3580: LD_OWVAR 67
3584: PUSH
3585: LD_INT 2
3587: GREATER
3588: IFFALSE 3616
// begin CreateAndPlaceBuildingXYD ( 152 , 114 , 4 ) ;
3590: LD_INT 152
3592: PPUSH
3593: LD_INT 114
3595: PPUSH
3596: LD_INT 4
3598: PPUSH
3599: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 157 , 97 , 4 ) ;
3603: LD_INT 157
3605: PPUSH
3606: LD_INT 97
3608: PPUSH
3609: LD_INT 4
3611: PPUSH
3612: CALL_OW 47
// end ; end ; if Difficulty >= 3 then
3616: LD_OWVAR 67
3620: PUSH
3621: LD_INT 3
3623: GREATEREQUAL
3624: IFFALSE 3639
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3626: LD_INT 51
3628: PPUSH
3629: LD_INT 3
3631: PPUSH
3632: LD_INT 2
3634: PPUSH
3635: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3639: LD_ADDR_VAR 0 7
3643: PUSH
3644: LD_INT 22
3646: PUSH
3647: LD_INT 3
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 2
3656: PUSH
3657: LD_INT 30
3659: PUSH
3660: LD_INT 31
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PUSH
3667: LD_INT 30
3669: PUSH
3670: LD_INT 32
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3691: LD_ADDR_VAR 0 8
3695: PUSH
3696: LD_INT 22
3698: PUSH
3699: LD_INT 3
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: LD_INT 30
3708: PUSH
3709: LD_INT 4
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PPUSH
3720: CALL_OW 69
3724: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3725: LD_ADDR_VAR 0 10
3729: PUSH
3730: LD_INT 22
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PUSH
3740: LD_INT 30
3742: PUSH
3743: LD_INT 3
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: PPUSH
3754: CALL_OW 69
3758: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3759: LD_ADDR_VAR 0 9
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 3
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 30
3776: PUSH
3777: LD_INT 6
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PPUSH
3788: CALL_OW 69
3792: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3793: LD_ADDR_VAR 0 2
3797: PUSH
3798: LD_INT 22
3800: PUSH
3801: LD_INT 3
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: LD_INT 30
3810: PUSH
3811: LD_INT 1
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PPUSH
3822: CALL_OW 69
3826: PUSH
3827: FOR_IN
3828: IFFALSE 3872
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3830: LD_VAR 0 2
3834: PPUSH
3835: CALL_OW 274
3839: PPUSH
3840: LD_INT 1
3842: PPUSH
3843: LD_INT 1000
3845: PPUSH
3846: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3850: LD_VAR 0 2
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 2
3862: PPUSH
3863: LD_INT 300
3865: PPUSH
3866: CALL_OW 277
// end ;
3870: GO 3827
3872: POP
3873: POP
// uc_side := 3 ;
3874: LD_ADDR_OWVAR 20
3878: PUSH
3879: LD_INT 3
3881: ST_TO_ADDR
// uc_nation := 3 ;
3882: LD_ADDR_OWVAR 21
3886: PUSH
3887: LD_INT 3
3889: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3890: LD_ADDR_VAR 0 11
3894: PUSH
3895: LD_INT 2
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: LD_INT 4
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: PUSH
3913: LD_OWVAR 67
3917: ARRAY
3918: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3919: LD_ADDR_EXP 52
3923: PUSH
3924: LD_STRING Pokryshkin
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: LD_STRING 
3932: PPUSH
3933: CALL 39698 0 3
3937: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3938: LD_EXP 52
3942: PPUSH
3943: LD_INT 63
3945: PPUSH
3946: LD_INT 21
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3956: LD_EXP 52
3960: PPUSH
3961: CALL_OW 140
// InitHc ;
3965: CALL_OW 19
// for i in fac do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: LD_VAR 0 10
3978: PUSH
3979: FOR_IN
3980: IFFALSE 4033
// begin for j = 1 to 6 do
3982: LD_ADDR_VAR 0 3
3986: PUSH
3987: DOUBLE
3988: LD_INT 1
3990: DEC
3991: ST_TO_ADDR
3992: LD_INT 6
3994: PUSH
3995: FOR_TO
3996: IFFALSE 4029
// begin PrepareHuman ( false , 3 , skill ) ;
3998: LD_INT 0
4000: PPUSH
4001: LD_INT 3
4003: PPUSH
4004: LD_VAR 0 11
4008: PPUSH
4009: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4013: CALL_OW 44
4017: PPUSH
4018: LD_VAR 0 2
4022: PPUSH
4023: CALL_OW 52
// end ;
4027: GO 3995
4029: POP
4030: POP
// end ;
4031: GO 3979
4033: POP
4034: POP
// for i in lab do
4035: LD_ADDR_VAR 0 2
4039: PUSH
4040: LD_VAR 0 9
4044: PUSH
4045: FOR_IN
4046: IFFALSE 4079
// begin PrepareHuman ( false , 4 , skill ) ;
4048: LD_INT 0
4050: PPUSH
4051: LD_INT 4
4053: PPUSH
4054: LD_VAR 0 11
4058: PPUSH
4059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4063: CALL_OW 44
4067: PPUSH
4068: LD_VAR 0 2
4072: PPUSH
4073: CALL_OW 52
// end ;
4077: GO 4045
4079: POP
4080: POP
// for i in tw do
4081: LD_ADDR_VAR 0 2
4085: PUSH
4086: LD_VAR 0 7
4090: PUSH
4091: FOR_IN
4092: IFFALSE 4141
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
4094: LD_VAR 0 2
4098: PPUSH
4099: LD_INT 42
4101: PUSH
4102: LD_INT 43
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 1
4111: PPUSH
4112: LD_INT 2
4114: PPUSH
4115: CALL_OW 12
4119: ARRAY
4120: PPUSH
4121: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
4125: LD_VAR 0 11
4129: PPUSH
4130: LD_VAR 0 2
4134: PPUSH
4135: CALL 775 0 2
// end ;
4139: GO 4091
4141: POP
4142: POP
// for i in bar do
4143: LD_ADDR_VAR 0 2
4147: PUSH
4148: LD_VAR 0 8
4152: PUSH
4153: FOR_IN
4154: IFFALSE 4187
// begin PrepareHuman ( false , 1 , skill ) ;
4156: LD_INT 0
4158: PPUSH
4159: LD_INT 1
4161: PPUSH
4162: LD_VAR 0 11
4166: PPUSH
4167: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4171: CALL_OW 44
4175: PPUSH
4176: LD_VAR 0 2
4180: PPUSH
4181: CALL_OW 52
// end ;
4185: GO 4153
4187: POP
4188: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
4189: LD_ADDR_VAR 0 13
4193: PUSH
4194: LD_INT 100
4196: PUSH
4197: LD_INT 9
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 135
4206: PUSH
4207: LD_INT 60
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: LD_INT 41
4216: PUSH
4217: LD_INT 6
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: LD_INT 22
4226: PUSH
4227: LD_INT 9
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 84
4236: PUSH
4237: LD_INT 14
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: ST_TO_ADDR
// vehicles := [ ] ;
4251: LD_ADDR_VAR 0 12
4255: PUSH
4256: EMPTY
4257: ST_TO_ADDR
// for i in spot_xy do
4258: LD_ADDR_VAR 0 2
4262: PUSH
4263: LD_VAR 0 13
4267: PUSH
4268: FOR_IN
4269: IFFALSE 4427
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
4271: LD_ADDR_VAR 0 6
4275: PUSH
4276: LD_INT 3
4278: PPUSH
4279: LD_INT 3
4281: PPUSH
4282: LD_INT 22
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 1
4290: PPUSH
4291: LD_INT 42
4293: PUSH
4294: LD_INT 43
4296: PUSH
4297: LD_INT 44
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 3
4310: PPUSH
4311: CALL_OW 12
4315: ARRAY
4316: PPUSH
4317: LD_INT 100
4319: PPUSH
4320: CALL 497 0 7
4324: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
4325: LD_ADDR_VAR 0 12
4329: PUSH
4330: LD_VAR 0 12
4334: PPUSH
4335: LD_VAR 0 12
4339: PUSH
4340: LD_INT 1
4342: PLUS
4343: PPUSH
4344: LD_VAR 0 6
4348: PPUSH
4349: CALL_OW 2
4353: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4354: LD_VAR 0 6
4358: PPUSH
4359: LD_INT 3
4361: PPUSH
4362: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
4366: LD_VAR 0 6
4370: PPUSH
4371: LD_VAR 0 2
4375: PUSH
4376: LD_INT 1
4378: ARRAY
4379: PPUSH
4380: LD_VAR 0 2
4384: PUSH
4385: LD_INT 2
4387: ARRAY
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
4396: LD_INT 0
4398: PPUSH
4399: LD_INT 3
4401: PPUSH
4402: LD_VAR 0 11
4406: PPUSH
4407: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4411: CALL_OW 44
4415: PPUSH
4416: LD_VAR 0 6
4420: PPUSH
4421: CALL_OW 52
// end ;
4425: GO 4268
4427: POP
4428: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_INT 5
4441: PUSH
4442: LD_INT 7
4444: PUSH
4445: LD_INT 8
4447: PUSH
4448: LD_INT 9
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PUSH
4463: FOR_TO
4464: IFFALSE 4524
// begin PrepareHuman ( false , 1 , skill ) ;
4466: LD_INT 0
4468: PPUSH
4469: LD_INT 1
4471: PPUSH
4472: LD_VAR 0 11
4476: PPUSH
4477: CALL_OW 380
// un := CreateHuman ;
4481: LD_ADDR_VAR 0 5
4485: PUSH
4486: CALL_OW 44
4490: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4491: LD_VAR 0 5
4495: PPUSH
4496: LD_INT 11
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4506: LD_ADDR_EXP 55
4510: PUSH
4511: LD_EXP 55
4515: PUSH
4516: LD_VAR 0 5
4520: ADD
4521: ST_TO_ADDR
// end ;
4522: GO 4463
4524: POP
4525: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 2
4538: PUSH
4539: LD_INT 3
4541: PUSH
4542: LD_INT 4
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PUSH
4554: LD_OWVAR 67
4558: ARRAY
4559: PUSH
4560: FOR_TO
4561: IFFALSE 4621
// begin PrepareHuman ( false , 1 , skill ) ;
4563: LD_INT 0
4565: PPUSH
4566: LD_INT 1
4568: PPUSH
4569: LD_VAR 0 11
4573: PPUSH
4574: CALL_OW 380
// un := CreateHuman ;
4578: LD_ADDR_VAR 0 5
4582: PUSH
4583: CALL_OW 44
4587: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4588: LD_VAR 0 5
4592: PPUSH
4593: LD_INT 12
4595: PPUSH
4596: LD_INT 0
4598: PPUSH
4599: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4603: LD_ADDR_EXP 53
4607: PUSH
4608: LD_EXP 53
4612: PUSH
4613: LD_VAR 0 5
4617: ADD
4618: ST_TO_ADDR
// end ;
4619: GO 4560
4621: POP
4622: POP
// for i = 1 to 2 do
4623: LD_ADDR_VAR 0 2
4627: PUSH
4628: DOUBLE
4629: LD_INT 1
4631: DEC
4632: ST_TO_ADDR
4633: LD_INT 2
4635: PUSH
4636: FOR_TO
4637: IFFALSE 4730
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4639: LD_INT 1
4641: PPUSH
4642: LD_INT 1
4644: PPUSH
4645: LD_VAR 0 11
4649: PPUSH
4650: CALL_OW 380
// hc_attr := [ 8 + Difficulty , 8 + Difficulty ] ;
4654: LD_ADDR_OWVAR 29
4658: PUSH
4659: LD_INT 8
4661: PUSH
4662: LD_OWVAR 67
4666: PLUS
4667: PUSH
4668: LD_INT 8
4670: PUSH
4671: LD_OWVAR 67
4675: PLUS
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: ST_TO_ADDR
// un := CreateHuman ;
4681: LD_ADDR_VAR 0 5
4685: PUSH
4686: CALL_OW 44
4690: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4691: LD_VAR 0 5
4695: PPUSH
4696: LD_INT 39
4698: PPUSH
4699: LD_INT 12
4701: PPUSH
4702: LD_INT 3
4704: PPUSH
4705: LD_INT 0
4707: PPUSH
4708: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4712: LD_ADDR_EXP 54
4716: PUSH
4717: LD_EXP 54
4721: PUSH
4722: LD_VAR 0 5
4726: ADD
4727: ST_TO_ADDR
// end ;
4728: GO 4636
4730: POP
4731: POP
// InitHc ;
4732: CALL_OW 19
// for i = 1 to 3 do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_INT 3
4748: PUSH
4749: FOR_TO
4750: IFFALSE 4816
// begin PrepareHuman ( false , 1 , skill ) ;
4752: LD_INT 0
4754: PPUSH
4755: LD_INT 1
4757: PPUSH
4758: LD_VAR 0 11
4762: PPUSH
4763: CALL_OW 380
// un := CreateHuman ;
4767: LD_ADDR_VAR 0 5
4771: PUSH
4772: CALL_OW 44
4776: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4777: LD_VAR 0 5
4781: PPUSH
4782: LD_INT 180
4784: PPUSH
4785: LD_INT 11
4787: PPUSH
4788: LD_INT 4
4790: PPUSH
4791: LD_INT 0
4793: PPUSH
4794: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4798: LD_ADDR_EXP 58
4802: PUSH
4803: LD_EXP 58
4807: PUSH
4808: LD_VAR 0 5
4812: ADD
4813: ST_TO_ADDR
// end ;
4814: GO 4749
4816: POP
4817: POP
// ru_vehicles := vehicles ;
4818: LD_ADDR_EXP 56
4822: PUSH
4823: LD_VAR 0 12
4827: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4828: LD_ADDR_EXP 59
4832: PUSH
4833: LD_INT 131
4835: PUSH
4836: LD_INT 121
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 113
4845: PUSH
4846: LD_INT 90
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 93
4855: PUSH
4856: LD_INT 62
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 106
4870: PUSH
4871: LD_INT 54
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: LD_INT 120
4880: PUSH
4881: LD_INT 80
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 143
4890: PUSH
4891: LD_INT 120
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: PUSH
4903: LD_INT 154
4905: PUSH
4906: LD_INT 116
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: LD_INT 140
4915: PUSH
4916: LD_INT 93
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: LD_INT 130
4925: PUSH
4926: LD_INT 58
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: PUSH
4938: LD_INT 105
4940: PUSH
4941: LD_INT 106
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 134
4950: PUSH
4951: LD_INT 98
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 159
4960: PUSH
4961: LD_INT 113
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: ST_TO_ADDR
// if Difficulty = 1 then
4979: LD_OWVAR 67
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: IFFALSE 4991
// exit ;
4989: GO 5046
// for i = 1 to Difficulty - 1 do
4991: LD_ADDR_VAR 0 2
4995: PUSH
4996: DOUBLE
4997: LD_INT 1
4999: DEC
5000: ST_TO_ADDR
5001: LD_OWVAR 67
5005: PUSH
5006: LD_INT 1
5008: MINUS
5009: PUSH
5010: FOR_TO
5011: IFFALSE 5044
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
5013: LD_ADDR_EXP 57
5017: PUSH
5018: LD_EXP 57
5022: PUSH
5023: LD_INT 22
5025: PUSH
5026: LD_INT 1
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: LD_INT 43
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: ADD
5041: ST_TO_ADDR
5042: GO 5010
5044: POP
5045: POP
// end ;
5046: LD_VAR 0 1
5050: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
5051: LD_INT 22
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 21
5063: PUSH
5064: LD_INT 2
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PPUSH
5075: CALL_OW 69
5079: IFFALSE 5173
5081: GO 5083
5083: DISABLE
5084: LD_INT 0
5086: PPUSH
5087: PPUSH
// begin enable ;
5088: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
5089: LD_ADDR_VAR 0 2
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_INT 3
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 2
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PPUSH
5118: CALL_OW 69
5122: ST_TO_ADDR
// if filter then
5123: LD_VAR 0 2
5127: IFFALSE 5173
// for i in filter do
5129: LD_ADDR_VAR 0 1
5133: PUSH
5134: LD_VAR 0 2
5138: PUSH
5139: FOR_IN
5140: IFFALSE 5171
// if GetFuel ( i ) < 20 then
5142: LD_VAR 0 1
5146: PPUSH
5147: CALL_OW 261
5151: PUSH
5152: LD_INT 20
5154: LESS
5155: IFFALSE 5169
// SetFuel ( i , 20 ) ;
5157: LD_VAR 0 1
5161: PPUSH
5162: LD_INT 20
5164: PPUSH
5165: CALL_OW 240
5169: GO 5139
5171: POP
5172: POP
// end ;
5173: PPOPN 2
5175: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
5176: LD_EXP 57
5180: IFFALSE 5399
5182: GO 5184
5184: DISABLE
5185: LD_INT 0
5187: PPUSH
5188: PPUSH
5189: PPUSH
// begin enable ;
5190: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
5191: LD_ADDR_VAR 0 2
5195: PUSH
5196: LD_INT 22
5198: PUSH
5199: LD_INT 3
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 30
5208: PUSH
5209: LD_INT 3
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PPUSH
5220: CALL_OW 69
5224: ST_TO_ADDR
// can_produce := [ ] ;
5225: LD_ADDR_VAR 0 3
5229: PUSH
5230: EMPTY
5231: ST_TO_ADDR
// if not fac then
5232: LD_VAR 0 2
5236: NOT
5237: IFFALSE 5242
// begin disable ;
5239: DISABLE
// exit ;
5240: GO 5399
// end ; for i in fac do
5242: LD_ADDR_VAR 0 1
5246: PUSH
5247: LD_VAR 0 2
5251: PUSH
5252: FOR_IN
5253: IFFALSE 5291
// if UnitsInside ( i ) then
5255: LD_VAR 0 1
5259: PPUSH
5260: CALL_OW 313
5264: IFFALSE 5289
// can_produce := Insert ( can_produce , 1 , i ) ;
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_VAR 0 3
5275: PPUSH
5276: LD_INT 1
5278: PPUSH
5279: LD_VAR 0 1
5283: PPUSH
5284: CALL_OW 2
5288: ST_TO_ADDR
5289: GO 5252
5291: POP
5292: POP
// if not can_produce then
5293: LD_VAR 0 3
5297: NOT
5298: IFFALSE 5302
// exit ;
5300: GO 5399
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
5302: LD_VAR 0 3
5306: PUSH
5307: LD_INT 1
5309: PPUSH
5310: LD_VAR 0 3
5314: PPUSH
5315: CALL_OW 12
5319: ARRAY
5320: PPUSH
5321: LD_EXP 57
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: LD_EXP 57
5334: PUSH
5335: LD_INT 2
5337: ARRAY
5338: PPUSH
5339: LD_EXP 57
5343: PUSH
5344: LD_INT 3
5346: ARRAY
5347: PPUSH
5348: LD_EXP 57
5352: PUSH
5353: LD_INT 4
5355: ARRAY
5356: PPUSH
5357: CALL_OW 125
// for i = 1 to 4 do
5361: LD_ADDR_VAR 0 1
5365: PUSH
5366: DOUBLE
5367: LD_INT 1
5369: DEC
5370: ST_TO_ADDR
5371: LD_INT 4
5373: PUSH
5374: FOR_TO
5375: IFFALSE 5397
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
5377: LD_ADDR_EXP 57
5381: PUSH
5382: LD_EXP 57
5386: PPUSH
5387: LD_INT 1
5389: PPUSH
5390: CALL_OW 3
5394: ST_TO_ADDR
5395: GO 5374
5397: POP
5398: POP
// end ;
5399: PPOPN 3
5401: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
5402: LD_INT 0
5404: PPUSH
5405: PPUSH
5406: PPUSH
// for i = 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
5407: LD_ADDR_VAR 0 2
5411: PUSH
5412: DOUBLE
5413: LD_INT 1
5415: DEC
5416: ST_TO_ADDR
5417: LD_INT 2
5419: PUSH
5420: LD_INT 3
5422: PUSH
5423: LD_INT 3
5425: PUSH
5426: LD_INT 3
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: LD_OWVAR 67
5439: ARRAY
5440: PUSH
5441: FOR_TO
5442: IFFALSE 5591
// begin PrepareHuman ( false , 3 , 3 ) ;
5444: LD_INT 0
5446: PPUSH
5447: LD_INT 3
5449: PPUSH
5450: LD_INT 3
5452: PPUSH
5453: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
5457: LD_ADDR_VAR 0 3
5461: PUSH
5462: LD_INT 3
5464: PPUSH
5465: LD_INT 3
5467: PPUSH
5468: LD_INT 22
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: LD_INT 1
5476: PPUSH
5477: LD_INT 43
5479: PUSH
5480: LD_INT 42
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 1
5489: PPUSH
5490: LD_INT 2
5492: PPUSH
5493: CALL_OW 12
5497: ARRAY
5498: PPUSH
5499: LD_INT 70
5501: PPUSH
5502: CALL 497 0 7
5506: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5507: LD_VAR 0 3
5511: PPUSH
5512: LD_INT 4
5514: PPUSH
5515: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5519: LD_VAR 0 3
5523: PPUSH
5524: LD_INT 229
5526: PPUSH
5527: LD_INT 44
5529: PPUSH
5530: LD_INT 0
5532: PPUSH
5533: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5537: CALL_OW 44
5541: PPUSH
5542: LD_VAR 0 3
5546: PPUSH
5547: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5551: LD_ADDR_EXP 56
5555: PUSH
5556: LD_EXP 56
5560: PUSH
5561: LD_VAR 0 3
5565: ADD
5566: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5567: LD_VAR 0 3
5571: PPUSH
5572: LD_INT 191
5574: PPUSH
5575: LD_INT 32
5577: PPUSH
5578: CALL_OW 111
// Wait ( 0 0$02 ) ;
5582: LD_INT 70
5584: PPUSH
5585: CALL_OW 67
// end ;
5589: GO 5441
5591: POP
5592: POP
// end ;
5593: LD_VAR 0 1
5597: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5598: LD_EXP 31
5602: PUSH
5603: LD_EXP 56
5607: AND
5608: IFFALSE 5782
5610: GO 5612
5612: DISABLE
5613: LD_INT 0
5615: PPUSH
5616: PPUSH
5617: PPUSH
// begin wait ( 0 0$50 ) ;
5618: LD_INT 1750
5620: PPUSH
5621: CALL_OW 67
// tmp := ru_vehicles ;
5625: LD_ADDR_VAR 0 3
5629: PUSH
5630: LD_EXP 56
5634: ST_TO_ADDR
// if not tmp then
5635: LD_VAR 0 3
5639: NOT
5640: IFFALSE 5644
// exit ;
5642: GO 5782
// repeat wait ( 0 0$1 ) ;
5644: LD_INT 35
5646: PPUSH
5647: CALL_OW 67
// for i in tmp do
5651: LD_ADDR_VAR 0 1
5655: PUSH
5656: LD_VAR 0 3
5660: PUSH
5661: FOR_IN
5662: IFFALSE 5773
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5664: LD_ADDR_VAR 0 2
5668: PUSH
5669: LD_INT 22
5671: PUSH
5672: LD_INT 1
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: LD_VAR 0 1
5683: PPUSH
5684: CALL_OW 74
5688: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5689: LD_VAR 0 1
5693: PPUSH
5694: LD_VAR 0 2
5698: PPUSH
5699: CALL_OW 296
5703: PUSH
5704: LD_INT 10
5706: GREATER
5707: IFFALSE 5726
// ComAgressiveMove ( i , 69 , 101 ) else
5709: LD_VAR 0 1
5713: PPUSH
5714: LD_INT 69
5716: PPUSH
5717: LD_INT 101
5719: PPUSH
5720: CALL_OW 114
5724: GO 5740
// ComAttackUnit ( i , enemy ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: CALL_OW 115
// if GetLives ( i ) < 250 then
5740: LD_VAR 0 1
5744: PPUSH
5745: CALL_OW 256
5749: PUSH
5750: LD_INT 250
5752: LESS
5753: IFFALSE 5771
// tmp := tmp diff i ;
5755: LD_ADDR_VAR 0 3
5759: PUSH
5760: LD_VAR 0 3
5764: PUSH
5765: LD_VAR 0 1
5769: DIFF
5770: ST_TO_ADDR
// end ;
5771: GO 5661
5773: POP
5774: POP
// until not tmp ;
5775: LD_VAR 0 3
5779: NOT
5780: IFFALSE 5644
// end ; end_of_file
5782: PPOPN 3
5784: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
// InGameOn ;
5794: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5798: LD_EXP 37
5802: PPUSH
5803: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5807: LD_EXP 37
5811: PPUSH
5812: LD_EXP 44
5816: PPUSH
5817: CALL_OW 119
// if Bierezov then
5821: LD_EXP 45
5825: IFFALSE 5841
// ComTurnUnit ( Bierezov , Cornel ) ;
5827: LD_EXP 45
5831: PPUSH
5832: LD_EXP 44
5836: PPUSH
5837: CALL_OW 119
// for i in jmm_units do
5841: LD_ADDR_VAR 0 2
5845: PUSH
5846: LD_EXP 4
5850: PUSH
5851: FOR_IN
5852: IFFALSE 5870
// ComTurnUnit ( i , Cornel ) ;
5854: LD_VAR 0 2
5858: PPUSH
5859: LD_EXP 44
5863: PPUSH
5864: CALL_OW 119
5868: GO 5851
5870: POP
5871: POP
// units := cornel_units union Cornel ;
5872: LD_ADDR_VAR 0 3
5876: PUSH
5877: LD_EXP 6
5881: PUSH
5882: LD_EXP 44
5886: UNION
5887: ST_TO_ADDR
// repeat wait ( 1 ) ;
5888: LD_INT 1
5890: PPUSH
5891: CALL_OW 67
// for i in units do
5895: LD_ADDR_VAR 0 2
5899: PUSH
5900: LD_VAR 0 3
5904: PUSH
5905: FOR_IN
5906: IFFALSE 5939
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5908: LD_VAR 0 2
5912: PPUSH
5913: LD_EXP 37
5917: PPUSH
5918: CALL_OW 250
5922: PPUSH
5923: LD_EXP 37
5927: PPUSH
5928: CALL_OW 251
5932: PPUSH
5933: CALL_OW 111
5937: GO 5905
5939: POP
5940: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5941: LD_VAR 0 3
5945: PPUSH
5946: LD_INT 92
5948: PUSH
5949: LD_EXP 37
5953: PPUSH
5954: CALL_OW 250
5958: PUSH
5959: LD_EXP 37
5963: PPUSH
5964: CALL_OW 251
5968: PUSH
5969: LD_INT 10
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PPUSH
5978: CALL_OW 72
5982: PUSH
5983: LD_VAR 0 3
5987: EQUAL
5988: IFFALSE 5888
// for i in units do
5990: LD_ADDR_VAR 0 2
5994: PUSH
5995: LD_VAR 0 3
5999: PUSH
6000: FOR_IN
6001: IFFALSE 6019
// ComTurnUnit ( i , JMM ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_EXP 37
6012: PPUSH
6013: CALL_OW 119
6017: GO 6000
6019: POP
6020: POP
// ComTurnUnit ( Cornel , JMM ) ;
6021: LD_EXP 44
6025: PPUSH
6026: LD_EXP 37
6030: PPUSH
6031: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
6035: LD_EXP 37
6039: PPUSH
6040: LD_STRING D1-JMM-1
6042: PPUSH
6043: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
6047: LD_EXP 44
6051: PPUSH
6052: LD_STRING D1-Corn-1
6054: PPUSH
6055: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
6059: LD_EXP 37
6063: PPUSH
6064: LD_EXP 44
6068: PPUSH
6069: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
6073: LD_EXP 44
6077: PPUSH
6078: LD_EXP 37
6082: PPUSH
6083: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
6087: LD_INT 35
6089: PPUSH
6090: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
6094: LD_EXP 37
6098: PPUSH
6099: LD_EXP 44
6103: PPUSH
6104: CALL_OW 296
6108: PUSH
6109: LD_INT 6
6111: LESS
6112: IFFALSE 6087
// ChangeSideFog ( 4 , 1 ) ;
6114: LD_INT 4
6116: PPUSH
6117: LD_INT 1
6119: PPUSH
6120: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
6124: LD_EXP 37
6128: PPUSH
6129: LD_EXP 44
6133: PPUSH
6134: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6138: LD_EXP 44
6142: PPUSH
6143: LD_EXP 37
6147: PPUSH
6148: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
6152: LD_EXP 37
6156: PPUSH
6157: LD_STRING D1-JMM-2
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
6164: LD_EXP 37
6168: PPUSH
6169: LD_STRING D1-JMM-2a
6171: PPUSH
6172: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
6176: LD_EXP 44
6180: PPUSH
6181: LD_STRING D1-Corn-2
6183: PPUSH
6184: CALL_OW 88
// if bierezov_exist or debug then
6188: LD_EXP 7
6192: PUSH
6193: LD_EXP 1
6197: OR
6198: IFFALSE 6439
// begin ComTurnUnit ( Cornel , Bierezov ) ;
6200: LD_EXP 44
6204: PPUSH
6205: LD_EXP 45
6209: PPUSH
6210: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
6214: LD_INT 10
6216: PPUSH
6217: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
6221: LD_EXP 44
6225: PPUSH
6226: LD_STRING D1a-Corn-1
6228: PPUSH
6229: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
6233: LD_EXP 37
6237: PPUSH
6238: LD_EXP 45
6242: PPUSH
6243: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
6247: LD_EXP 45
6251: PPUSH
6252: LD_EXP 37
6256: PPUSH
6257: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
6261: LD_EXP 37
6265: PPUSH
6266: LD_STRING D1a-JMM-1
6268: PPUSH
6269: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
6273: LD_EXP 37
6277: PPUSH
6278: LD_EXP 44
6282: PPUSH
6283: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6287: LD_EXP 44
6291: PPUSH
6292: LD_EXP 37
6296: PPUSH
6297: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
6301: LD_EXP 44
6305: PPUSH
6306: LD_STRING D1a-Corn-2
6308: PPUSH
6309: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
6313: LD_EXP 37
6317: PPUSH
6318: LD_STRING D1a-JMM-2
6320: PPUSH
6321: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
6325: LD_EXP 44
6329: PPUSH
6330: LD_STRING D1a-Corn-3
6332: PPUSH
6333: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
6337: LD_EXP 37
6341: PPUSH
6342: LD_STRING D1a-JMM-3
6344: PPUSH
6345: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
6349: LD_EXP 44
6353: PPUSH
6354: LD_STRING D1a-Corn-4
6356: PPUSH
6357: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
6361: LD_EXP 37
6365: PPUSH
6366: LD_STRING D1a-JMM-4
6368: PPUSH
6369: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
6373: LD_EXP 44
6377: PPUSH
6378: LD_STRING D1a-Corn-5
6380: PPUSH
6381: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
6385: LD_EXP 45
6389: PPUSH
6390: LD_EXP 44
6394: PPUSH
6395: CALL_OW 250
6399: PPUSH
6400: LD_EXP 44
6404: PPUSH
6405: CALL_OW 251
6409: PUSH
6410: LD_INT 2
6412: MINUS
6413: PPUSH
6414: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
6418: LD_EXP 45
6422: PPUSH
6423: LD_EXP 44
6427: PPUSH
6428: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
6432: LD_INT 10
6434: PPUSH
6435: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
6439: LD_EXP 37
6443: PPUSH
6444: LD_STRING D1b-JMM-1
6446: PPUSH
6447: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
6451: LD_EXP 44
6455: PPUSH
6456: LD_STRING D1b-Corn-1
6458: PPUSH
6459: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6463: LD_EXP 37
6467: PPUSH
6468: LD_STRING D1b-JMM-2
6470: PPUSH
6471: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6475: LD_EXP 44
6479: PPUSH
6480: LD_STRING D1b-Corn-2
6482: PPUSH
6483: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6487: LD_EXP 37
6491: PPUSH
6492: LD_STRING D1b-JMM-3
6494: PPUSH
6495: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6499: LD_INT 10
6501: PPUSH
6502: CALL_OW 67
// SayRadioNoFace ( Powell , D1b-Pow-3 ) ;
6506: LD_EXP 46
6510: PPUSH
6511: LD_STRING D1b-Pow-3
6513: PPUSH
6514: CALL_OW 586
// Say ( JMM , D1b-JMM-4 ) ;
6518: LD_EXP 37
6522: PPUSH
6523: LD_STRING D1b-JMM-4
6525: PPUSH
6526: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6530: LD_EXP 44
6534: PPUSH
6535: LD_STRING D1b-Corn-4
6537: PPUSH
6538: CALL_OW 88
// if Khatam then
6542: LD_EXP 41
6546: IFFALSE 6562
// Say ( Khatam , D1b-Khat-4 ) else
6548: LD_EXP 41
6552: PPUSH
6553: LD_STRING D1b-Khat-4
6555: PPUSH
6556: CALL_OW 88
6560: GO 6598
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6562: LD_EXP 6
6566: PPUSH
6567: LD_INT 26
6569: PUSH
6570: LD_INT 1
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PPUSH
6577: CALL_OW 72
6581: PUSH
6582: LD_EXP 44
6586: PUSH
6587: EMPTY
6588: LIST
6589: DIFF
6590: PPUSH
6591: LD_STRING D1b-Sol1-4
6593: PPUSH
6594: CALL 585 0 2
// if Cyrus then
6598: LD_EXP 39
6602: IFFALSE 6616
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6604: LD_EXP 39
6608: PPUSH
6609: LD_STRING D1b-Cyrus-4
6611: PPUSH
6612: CALL_OW 88
// if Lisa then
6616: LD_EXP 40
6620: IFFALSE 6678
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6622: LD_EXP 40
6626: PPUSH
6627: LD_STRING D1b-Lisa-4
6629: PPUSH
6630: CALL_OW 88
// if Cyrus then
6634: LD_EXP 39
6638: IFFALSE 6678
// begin if not IsInUnit ( Cyrus ) then
6640: LD_EXP 39
6644: PPUSH
6645: CALL_OW 310
6649: NOT
6650: IFFALSE 6666
// ComTurnUnit ( Cyrus , Lisa ) ;
6652: LD_EXP 39
6656: PPUSH
6657: LD_EXP 40
6661: PPUSH
6662: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6666: LD_EXP 39
6670: PPUSH
6671: LD_STRING D1b-Cyrus-5
6673: PPUSH
6674: CALL_OW 88
// end ; end ; SelectGroup ;
6678: CALL 3052 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6682: LD_EXP 37
6686: PPUSH
6687: LD_STRING D1d-JMM-1
6689: PPUSH
6690: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6694: LD_EXP 44
6698: PPUSH
6699: LD_STRING D1d-Corn-1
6701: PPUSH
6702: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6706: LD_ADDR_VAR 0 2
6710: PUSH
6711: LD_EXP 4
6715: PUSH
6716: LD_EXP 6
6720: ADD
6721: PUSH
6722: LD_EXP 37
6726: ADD
6727: PUSH
6728: FOR_IN
6729: IFFALSE 6742
// ComHold ( i ) ;
6731: LD_VAR 0 2
6735: PPUSH
6736: CALL_OW 140
6740: GO 6728
6742: POP
6743: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6744: LD_ADDR_VAR 0 4
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 1
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 21
6761: PUSH
6762: LD_INT 2
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PPUSH
6773: CALL_OW 69
6777: ST_TO_ADDR
// if vehicles then
6778: LD_VAR 0 4
6782: IFFALSE 7120
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6784: LD_EXP 6
6788: PPUSH
6789: LD_INT 55
6791: PUSH
6792: EMPTY
6793: LIST
6794: PPUSH
6795: CALL_OW 72
6799: IFFALSE 6838
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6801: LD_ADDR_VAR 0 2
6805: PUSH
6806: LD_EXP 6
6810: PPUSH
6811: LD_INT 55
6813: PUSH
6814: EMPTY
6815: LIST
6816: PPUSH
6817: CALL_OW 72
6821: PUSH
6822: FOR_IN
6823: IFFALSE 6836
// ComExitVehicle ( i ) ;
6825: LD_VAR 0 2
6829: PPUSH
6830: CALL_OW 121
6834: GO 6822
6836: POP
6837: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6838: LD_ADDR_VAR 0 5
6842: PUSH
6843: LD_VAR 0 4
6847: PPUSH
6848: LD_INT 34
6850: PUSH
6851: LD_INT 51
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 72
6862: ST_TO_ADDR
// if cargos then
6863: LD_VAR 0 5
6867: IFFALSE 7050
// begin vehicles := cargos ;
6869: LD_ADDR_VAR 0 4
6873: PUSH
6874: LD_VAR 0 5
6878: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6879: LD_ADDR_VAR 0 6
6883: PUSH
6884: LD_STRING 02_resources_4
6886: PPUSH
6887: LD_INT 0
6889: PPUSH
6890: CALL_OW 30
6894: ST_TO_ADDR
// if debug and not resources then
6895: LD_EXP 1
6899: PUSH
6900: LD_VAR 0 6
6904: NOT
6905: AND
6906: IFFALSE 6916
// resources := 160 ;
6908: LD_ADDR_VAR 0 6
6912: PUSH
6913: LD_INT 160
6915: ST_TO_ADDR
// if resources mod 10 then
6916: LD_VAR 0 6
6920: PUSH
6921: LD_INT 10
6923: MOD
6924: IFFALSE 6946
// resources := resources - resources mod 10 ;
6926: LD_ADDR_VAR 0 6
6930: PUSH
6931: LD_VAR 0 6
6935: PUSH
6936: LD_VAR 0 6
6940: PUSH
6941: LD_INT 10
6943: MOD
6944: MINUS
6945: ST_TO_ADDR
// if resources then
6946: LD_VAR 0 6
6950: IFFALSE 7050
// for i in cargos do
6952: LD_ADDR_VAR 0 2
6956: PUSH
6957: LD_VAR 0 5
6961: PUSH
6962: FOR_IN
6963: IFFALSE 7048
// begin if resources < 100 then
6965: LD_VAR 0 6
6969: PUSH
6970: LD_INT 100
6972: LESS
6973: IFFALSE 6995
// begin cargo := resources ;
6975: LD_ADDR_VAR 0 7
6979: PUSH
6980: LD_VAR 0 6
6984: ST_TO_ADDR
// resources := 0 ;
6985: LD_ADDR_VAR 0 6
6989: PUSH
6990: LD_INT 0
6992: ST_TO_ADDR
// end else
6993: GO 7017
// begin cargo := 100 ;
6995: LD_ADDR_VAR 0 7
6999: PUSH
7000: LD_INT 100
7002: ST_TO_ADDR
// resources := resources - 100 ;
7003: LD_ADDR_VAR 0 6
7007: PUSH
7008: LD_VAR 0 6
7012: PUSH
7013: LD_INT 100
7015: MINUS
7016: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
7017: LD_VAR 0 2
7021: PPUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_VAR 0 7
7029: PPUSH
7030: CALL_OW 290
// if resources = 0 then
7034: LD_VAR 0 6
7038: PUSH
7039: LD_INT 0
7041: EQUAL
7042: IFFALSE 7046
// break ;
7044: GO 7048
// end ;
7046: GO 6962
7048: POP
7049: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
7050: LD_VAR 0 4
7054: PUSH
7055: LD_INT 1
7057: ARRAY
7058: PPUSH
7059: CALL_OW 311
7063: PPUSH
7064: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
7068: LD_VAR 0 4
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: LD_INT 4
7079: PPUSH
7080: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
7084: LD_EXP 44
7088: PPUSH
7089: LD_VAR 0 4
7093: PUSH
7094: LD_INT 1
7096: ARRAY
7097: PPUSH
7098: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
7102: LD_INT 35
7104: PPUSH
7105: CALL_OW 67
// until IsInUnit ( Cornel ) ;
7109: LD_EXP 44
7113: PPUSH
7114: CALL_OW 310
7118: IFFALSE 7102
// end ; InGameOff ;
7120: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
7124: LD_STRING M1
7126: PPUSH
7127: CALL_OW 337
// SaveForQuickRestart ;
7131: CALL_OW 22
// cornel_active := true ;
7135: LD_ADDR_EXP 8
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// end ;
7143: LD_VAR 0 1
7147: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
7148: LD_EXP 37
7152: PPUSH
7153: LD_EXP 47
7157: PPUSH
7158: CALL_OW 296
7162: PUSH
7163: LD_INT 10
7165: LESS
7166: IFFALSE 8549
7168: GO 7170
7170: DISABLE
7171: LD_INT 0
7173: PPUSH
7174: PPUSH
7175: PPUSH
7176: PPUSH
7177: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
7178: LD_ADDR_VAR 0 2
7182: PUSH
7183: LD_INT 89
7185: PUSH
7186: LD_INT 34
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 138
7195: PUSH
7196: LD_INT 63
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 196
7205: PUSH
7206: LD_INT 84
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 135
7215: PUSH
7216: LD_INT 52
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 103
7225: PUSH
7226: LD_INT 39
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: LD_INT 58
7235: PUSH
7236: LD_INT 30
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 38
7245: PUSH
7246: LD_INT 51
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: ST_TO_ADDR
// Video ( true ) ;
7262: LD_INT 1
7264: PPUSH
7265: CALL 77372 0 1
// if jmm_units then
7269: LD_EXP 4
7273: IFFALSE 7349
// for i in jmm_units do
7275: LD_ADDR_VAR 0 1
7279: PUSH
7280: LD_EXP 4
7284: PUSH
7285: FOR_IN
7286: IFFALSE 7347
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_EXP 37
7297: PPUSH
7298: CALL_OW 296
7302: PUSH
7303: LD_INT 10
7305: LESS
7306: PUSH
7307: LD_VAR 0 1
7311: PPUSH
7312: CALL_OW 310
7316: NOT
7317: AND
7318: IFFALSE 7336
// ComTurnUnit ( i , JMM ) else
7320: LD_VAR 0 1
7324: PPUSH
7325: LD_EXP 37
7329: PPUSH
7330: CALL_OW 119
7334: GO 7345
// ComHold ( i ) ;
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 140
// end ;
7345: GO 7285
7347: POP
7348: POP
// if IsInUnit ( JMM ) then
7349: LD_EXP 37
7353: PPUSH
7354: CALL_OW 310
7358: IFFALSE 7383
// begin ComExitVehicle ( JMM ) ;
7360: LD_EXP 37
7364: PPUSH
7365: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
7369: LD_EXP 37
7373: PPUSH
7374: LD_EXP 47
7378: PPUSH
7379: CALL_OW 172
// end ; Wait ( 10 ) ;
7383: LD_INT 10
7385: PPUSH
7386: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
7390: LD_EXP 37
7394: PPUSH
7395: LD_EXP 47
7399: PPUSH
7400: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
7404: LD_INT 35
7406: PPUSH
7407: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
7411: LD_EXP 37
7415: PPUSH
7416: LD_EXP 47
7420: PPUSH
7421: CALL_OW 296
7425: PUSH
7426: LD_INT 6
7428: LESS
7429: IFFALSE 7404
// ComTurnUnit ( JMM , Lynch ) ;
7431: LD_EXP 37
7435: PPUSH
7436: LD_EXP 47
7440: PPUSH
7441: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
7445: LD_ADDR_VAR 0 1
7449: PUSH
7450: LD_EXP 47
7454: PUSH
7455: LD_EXP 48
7459: PUSH
7460: LD_EXP 49
7464: PUSH
7465: LD_EXP 50
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: PUSH
7476: FOR_IN
7477: IFFALSE 7495
// ComTurnUnit ( i , JMM ) ;
7479: LD_VAR 0 1
7483: PPUSH
7484: LD_EXP 37
7488: PPUSH
7489: CALL_OW 119
7493: GO 7476
7495: POP
7496: POP
// Wait ( 0 0$0.3 ) ;
7497: LD_INT 10
7499: PPUSH
7500: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7504: LD_EXP 37
7508: PPUSH
7509: LD_STRING D2-JMM-1
7511: PPUSH
7512: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7516: LD_EXP 47
7520: PPUSH
7521: LD_STRING D2-Sol1-1
7523: PPUSH
7524: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7528: LD_EXP 37
7532: PPUSH
7533: LD_STRING D2-JMM-2
7535: PPUSH
7536: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7540: LD_EXP 47
7544: PPUSH
7545: LD_STRING D2-Sol1-2
7547: PPUSH
7548: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7552: LD_EXP 37
7556: PPUSH
7557: LD_STRING D2-JMM-3
7559: PPUSH
7560: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7564: LD_EXP 47
7568: PPUSH
7569: LD_STRING D2-Sol1-3
7571: PPUSH
7572: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_INT 22
7583: PUSH
7584: LD_INT 8
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PPUSH
7591: CALL_OW 69
7595: PUSH
7596: FOR_IN
7597: IFFALSE 7613
// SetSide ( i , 1 ) ;
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_INT 1
7606: PPUSH
7607: CALL_OW 235
7611: GO 7596
7613: POP
7614: POP
// Say ( JMM , D2-JMM-4 ) ;
7615: LD_EXP 37
7619: PPUSH
7620: LD_STRING D2-JMM-4
7622: PPUSH
7623: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7627: LD_INT 1
7629: PPUSH
7630: LD_INT 5
7632: PPUSH
7633: CALL_OW 332
// for i = 1 to points do
7637: LD_ADDR_VAR 0 1
7641: PUSH
7642: DOUBLE
7643: LD_INT 1
7645: DEC
7646: ST_TO_ADDR
7647: LD_VAR 0 2
7651: PUSH
7652: FOR_TO
7653: IFFALSE 7828
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7655: LD_VAR 0 2
7659: PUSH
7660: LD_VAR 0 1
7664: ARRAY
7665: PUSH
7666: LD_INT 1
7668: ARRAY
7669: PPUSH
7670: LD_VAR 0 2
7674: PUSH
7675: LD_VAR 0 1
7679: ARRAY
7680: PUSH
7681: LD_INT 2
7683: ARRAY
7684: PPUSH
7685: CALL_OW 84
// if i = 1 then
7689: LD_VAR 0 1
7693: PUSH
7694: LD_INT 1
7696: EQUAL
7697: IFFALSE 7711
// Say ( Lynch , D2-Sol1-4 ) ;
7699: LD_EXP 47
7703: PPUSH
7704: LD_STRING D2-Sol1-4
7706: PPUSH
7707: CALL_OW 88
// if i = 2 then
7711: LD_VAR 0 1
7715: PUSH
7716: LD_INT 2
7718: EQUAL
7719: IFFALSE 7733
// Say ( JMM , D2-JMM-5 ) ;
7721: LD_EXP 37
7725: PPUSH
7726: LD_STRING D2-JMM-5
7728: PPUSH
7729: CALL_OW 88
// if i = 4 then
7733: LD_VAR 0 1
7737: PUSH
7738: LD_INT 4
7740: EQUAL
7741: IFFALSE 7765
// begin RevealFogArea ( 1 , troopsArea ) ;
7743: LD_INT 1
7745: PPUSH
7746: LD_INT 6
7748: PPUSH
7749: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7753: LD_EXP 47
7757: PPUSH
7758: LD_STRING D2-Sol1-5
7760: PPUSH
7761: CALL_OW 88
// end ; if i = 5 then
7765: LD_VAR 0 1
7769: PUSH
7770: LD_INT 5
7772: EQUAL
7773: IFFALSE 7787
// Say ( JMM , D2-JMM-6 ) ;
7775: LD_EXP 37
7779: PPUSH
7780: LD_STRING D2-JMM-6
7782: PPUSH
7783: CALL_OW 88
// if i = 7 then
7787: LD_VAR 0 1
7791: PUSH
7792: LD_INT 7
7794: EQUAL
7795: IFFALSE 7819
// begin RevealFogArea ( 1 , forestArea ) ;
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 7
7802: PPUSH
7803: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7807: LD_EXP 47
7811: PPUSH
7812: LD_STRING D2-Sol1-6
7814: PPUSH
7815: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7819: LD_INT 46
7821: PPUSH
7822: CALL_OW 67
// end ;
7826: GO 7652
7828: POP
7829: POP
// CenterNowOnUnits ( JMM ) ;
7830: LD_EXP 37
7834: PPUSH
7835: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7839: LD_EXP 37
7843: PPUSH
7844: LD_STRING D2-JMM-7
7846: PPUSH
7847: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7851: LD_EXP 47
7855: PPUSH
7856: LD_STRING D2-Sol1-7
7858: PPUSH
7859: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7863: LD_EXP 37
7867: PPUSH
7868: LD_STRING D2-JMM-8
7870: PPUSH
7871: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7875: LD_ADDR_VAR 0 4
7879: PUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 30
7892: PUSH
7893: LD_INT 31
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 69
7908: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7909: LD_EXP 47
7913: PPUSH
7914: LD_VAR 0 4
7918: PUSH
7919: LD_INT 1
7921: ARRAY
7922: PPUSH
7923: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7927: LD_INT 65
7929: PPUSH
7930: LD_INT 101
7932: PPUSH
7933: CALL_OW 428
7937: IFFALSE 7960
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7939: LD_INT 65
7941: PPUSH
7942: LD_INT 101
7944: PPUSH
7945: CALL_OW 428
7949: PPUSH
7950: LD_INT 75
7952: PPUSH
7953: LD_INT 100
7955: PPUSH
7956: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7960: LD_INT 66
7962: PPUSH
7963: LD_INT 103
7965: PPUSH
7966: CALL_OW 428
7970: IFFALSE 7993
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7972: LD_INT 66
7974: PPUSH
7975: LD_INT 103
7977: PPUSH
7978: CALL_OW 428
7982: PPUSH
7983: LD_INT 75
7985: PPUSH
7986: LD_INT 100
7988: PPUSH
7989: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7993: LD_ADDR_VAR 0 5
7997: PUSH
7998: LD_INT 22
8000: PUSH
8001: LD_INT 1
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 21
8010: PUSH
8011: LD_INT 2
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: LD_INT 91
8020: PUSH
8021: LD_EXP 37
8025: PUSH
8026: LD_INT 7
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: PPUSH
8039: CALL_OW 69
8043: ST_TO_ADDR
// if tmp then
8044: LD_VAR 0 5
8048: IFFALSE 8065
// ComMoveXY ( tmp , 75 , 100 ) ;
8050: LD_VAR 0 5
8054: PPUSH
8055: LD_INT 75
8057: PPUSH
8058: LD_INT 100
8060: PPUSH
8061: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: LD_EXP 4
8074: PPUSH
8075: LD_INT 25
8077: PUSH
8078: LD_INT 1
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PPUSH
8085: CALL_OW 72
8089: PPUSH
8090: LD_EXP 37
8094: PPUSH
8095: CALL_OW 74
8099: ST_TO_ADDR
// if sol then
8100: LD_VAR 0 3
8104: IFFALSE 8164
// if GetDistUnits ( JMM , sol ) < 10 then
8106: LD_EXP 37
8110: PPUSH
8111: LD_VAR 0 3
8115: PPUSH
8116: CALL_OW 296
8120: PUSH
8121: LD_INT 10
8123: LESS
8124: IFFALSE 8164
// begin if IsInUnit ( sol ) then
8126: LD_VAR 0 3
8130: PPUSH
8131: CALL_OW 310
8135: IFFALSE 8146
// ComExitVehicle ( sol ) ;
8137: LD_VAR 0 3
8141: PPUSH
8142: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
8146: LD_VAR 0 3
8150: PPUSH
8151: LD_VAR 0 4
8155: PUSH
8156: LD_INT 2
8158: ARRAY
8159: PPUSH
8160: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
8164: LD_INT 10
8166: PPUSH
8167: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
8171: LD_EXP 37
8175: PPUSH
8176: LD_INT 65
8178: PPUSH
8179: LD_INT 101
8181: PPUSH
8182: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
8186: LD_EXP 37
8190: PPUSH
8191: LD_INT 63
8193: PPUSH
8194: LD_INT 100
8196: PPUSH
8197: CALL_OW 178
// tmp := 0 0$0 ;
8201: LD_ADDR_VAR 0 5
8205: PUSH
8206: LD_INT 0
8208: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8209: LD_INT 35
8211: PPUSH
8212: CALL_OW 67
// tmp := tmp + 0 0$1 ;
8216: LD_ADDR_VAR 0 5
8220: PUSH
8221: LD_VAR 0 5
8225: PUSH
8226: LD_INT 35
8228: PLUS
8229: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
8230: LD_EXP 37
8234: PPUSH
8235: LD_INT 65
8237: PPUSH
8238: LD_INT 101
8240: PPUSH
8241: CALL_OW 307
8245: PUSH
8246: LD_VAR 0 5
8250: PUSH
8251: LD_INT 175
8253: GREATER
8254: OR
8255: IFFALSE 8209
// Say ( JMM , D2a-JMM-1 ) ;
8257: LD_EXP 37
8261: PPUSH
8262: LD_STRING D2a-JMM-1
8264: PPUSH
8265: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
8269: LD_EXP 48
8273: PPUSH
8274: LD_INT 66
8276: PPUSH
8277: LD_INT 103
8279: PPUSH
8280: CALL_OW 111
// tmp := 0 0$0 ;
8284: LD_ADDR_VAR 0 5
8288: PUSH
8289: LD_INT 0
8291: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8292: LD_INT 35
8294: PPUSH
8295: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
8299: LD_EXP 48
8303: PPUSH
8304: LD_INT 66
8306: PPUSH
8307: LD_INT 103
8309: PPUSH
8310: CALL_OW 307
8314: PUSH
8315: LD_VAR 0 5
8319: PUSH
8320: LD_INT 175
8322: GREATER
8323: OR
8324: IFFALSE 8292
// ComTurnUnit ( Walker , JMM ) ;
8326: LD_EXP 48
8330: PPUSH
8331: LD_EXP 37
8335: PPUSH
8336: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
8340: LD_EXP 48
8344: PPUSH
8345: LD_STRING D2a-Sci1-1
8347: PPUSH
8348: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
8352: LD_EXP 37
8356: PPUSH
8357: LD_EXP 48
8361: PPUSH
8362: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
8366: LD_EXP 37
8370: PPUSH
8371: LD_STRING D2a-JMM-2
8373: PPUSH
8374: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
8378: LD_EXP 48
8382: PPUSH
8383: LD_STRING D2a-Sci1-2
8385: PPUSH
8386: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
8390: LD_EXP 37
8394: PPUSH
8395: LD_STRING D2a-JMM-3
8397: PPUSH
8398: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
8402: LD_EXP 48
8406: PPUSH
8407: LD_STRING D2a-Sci1-3
8409: PPUSH
8410: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
8414: LD_ADDR_EXP 4
8418: PUSH
8419: LD_EXP 4
8423: PUSH
8424: LD_EXP 47
8428: PUSH
8429: LD_EXP 48
8433: PUSH
8434: LD_EXP 49
8438: PUSH
8439: LD_EXP 50
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: ADD
8450: ST_TO_ADDR
// for i in jmm_units do
8451: LD_ADDR_VAR 0 1
8455: PUSH
8456: LD_EXP 4
8460: PUSH
8461: FOR_IN
8462: IFFALSE 8487
// if not IsInUnit ( i ) then
8464: LD_VAR 0 1
8468: PPUSH
8469: CALL_OW 310
8473: NOT
8474: IFFALSE 8485
// ComFree ( i ) ;
8476: LD_VAR 0 1
8480: PPUSH
8481: CALL_OW 139
8485: GO 8461
8487: POP
8488: POP
// Video ( false ) ;
8489: LD_INT 0
8491: PPUSH
8492: CALL 77372 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8496: LD_STRING MSolar1
8498: PPUSH
8499: CALL_OW 337
// jmm_on_west := true ;
8503: LD_ADDR_EXP 5
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8511: LD_INT 1050
8513: PPUSH
8514: CALL_OW 67
// frank_can_return := true ;
8518: LD_ADDR_EXP 12
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8526: LD_INT 6300
8528: PPUSH
8529: LD_INT 8400
8531: PPUSH
8532: CALL_OW 12
8536: PPUSH
8537: CALL_OW 67
// send_spec_patrol := true ;
8541: LD_ADDR_EXP 30
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// end ;
8549: PPOPN 5
8551: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8552: LD_INT 22
8554: PUSH
8555: LD_INT 1
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 34
8564: PUSH
8565: LD_INT 51
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 92
8574: PUSH
8575: LD_INT 63
8577: PUSH
8578: LD_INT 100
8580: PUSH
8581: LD_INT 5
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: PPUSH
8598: CALL_OW 69
8602: PUSH
8603: LD_EXP 5
8607: NOT
8608: AND
8609: IFFALSE 8722
8611: GO 8613
8613: DISABLE
8614: LD_INT 0
8616: PPUSH
8617: PPUSH
// begin enable ;
8618: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8619: LD_ADDR_VAR 0 2
8623: PUSH
8624: LD_INT 22
8626: PUSH
8627: LD_INT 1
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 34
8636: PUSH
8637: LD_INT 51
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 92
8646: PUSH
8647: LD_INT 63
8649: PUSH
8650: LD_INT 100
8652: PUSH
8653: LD_INT 5
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: LIST
8666: PUSH
8667: EMPTY
8668: LIST
8669: PPUSH
8670: CALL_OW 69
8674: ST_TO_ADDR
// if not filter then
8675: LD_VAR 0 2
8679: NOT
8680: IFFALSE 8684
// exit ;
8682: GO 8722
// for i in filter do
8684: LD_ADDR_VAR 0 1
8688: PUSH
8689: LD_VAR 0 2
8693: PUSH
8694: FOR_IN
8695: IFFALSE 8720
// begin SetFuel ( i , 0 ) ;
8697: LD_VAR 0 1
8701: PPUSH
8702: LD_INT 0
8704: PPUSH
8705: CALL_OW 240
// ComStop ( i ) ;
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 141
// end ;
8718: GO 8694
8720: POP
8721: POP
// end ;
8722: PPOPN 2
8724: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8725: LD_EXP 30
8729: IFFALSE 9784
8731: GO 8733
8733: DISABLE
8734: LD_INT 0
8736: PPUSH
8737: PPUSH
8738: PPUSH
8739: PPUSH
8740: PPUSH
8741: PPUSH
8742: PPUSH
// begin if not ru_spec_patrol then
8743: LD_EXP 54
8747: NOT
8748: IFFALSE 8752
// exit ;
8750: GO 9784
// dead1 := false ;
8752: LD_ADDR_VAR 0 1
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// dead2 := false ;
8760: LD_ADDR_VAR 0 2
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// inarea1 := false ;
8768: LD_ADDR_VAR 0 3
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// inarea2 := false ;
8776: LD_ADDR_VAR 0 4
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// tmp := [ ] ;
8784: LD_ADDR_VAR 0 6
8788: PUSH
8789: EMPTY
8790: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8791: LD_EXP 54
8795: PPUSH
8796: LD_INT 75
8798: PPUSH
8799: LD_INT 101
8801: PPUSH
8802: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8806: LD_INT 35
8808: PPUSH
8809: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8813: LD_INT 1
8815: PPUSH
8816: LD_EXP 54
8820: PUSH
8821: LD_INT 1
8823: ARRAY
8824: PPUSH
8825: CALL_OW 292
8829: PUSH
8830: LD_EXP 54
8834: PPUSH
8835: LD_INT 92
8837: PUSH
8838: LD_INT 75
8840: PUSH
8841: LD_INT 101
8843: PUSH
8844: LD_INT 4
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 72
8857: OR
8858: IFFALSE 8806
// ComStop ( ru_spec_patrol ) ;
8860: LD_EXP 54
8864: PPUSH
8865: CALL_OW 141
// Wait ( 0 0$02 ) ;
8869: LD_INT 70
8871: PPUSH
8872: CALL_OW 67
// DialogueOn ;
8876: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8880: LD_EXP 54
8884: PUSH
8885: LD_INT 1
8887: ARRAY
8888: PPUSH
8889: LD_STRING D8-Rus1-1
8891: PPUSH
8892: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8896: LD_EXP 37
8900: PPUSH
8901: LD_STRING D8-JMM-1
8903: PPUSH
8904: CALL_OW 88
// DialogueOff ;
8908: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8912: LD_EXP 54
8916: PPUSH
8917: LD_INT 13
8919: PPUSH
8920: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8924: LD_INT 35
8926: PPUSH
8927: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8931: LD_VAR 0 1
8935: NOT
8936: PUSH
8937: LD_EXP 54
8941: PUSH
8942: LD_INT 1
8944: ARRAY
8945: PPUSH
8946: CALL_OW 301
8950: AND
8951: IFFALSE 8961
// dead1 := true ;
8953: LD_ADDR_VAR 0 1
8957: PUSH
8958: LD_INT 1
8960: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8961: LD_VAR 0 2
8965: NOT
8966: PUSH
8967: LD_EXP 54
8971: PUSH
8972: LD_INT 2
8974: ARRAY
8975: PPUSH
8976: CALL_OW 301
8980: AND
8981: IFFALSE 8991
// dead2 := true ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 1
8990: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8991: LD_VAR 0 3
8995: NOT
8996: PUSH
8997: LD_EXP 54
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: LD_INT 14
9008: PPUSH
9009: CALL_OW 308
9013: AND
9014: IFFALSE 9024
// inarea1 := true ;
9016: LD_ADDR_VAR 0 3
9020: PUSH
9021: LD_INT 1
9023: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
9024: LD_VAR 0 4
9028: NOT
9029: PUSH
9030: LD_EXP 54
9034: PUSH
9035: LD_INT 2
9037: ARRAY
9038: PPUSH
9039: LD_INT 14
9041: PPUSH
9042: CALL_OW 308
9046: AND
9047: IFFALSE 9057
// inarea2 := true ;
9049: LD_ADDR_VAR 0 4
9053: PUSH
9054: LD_INT 1
9056: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
9057: LD_VAR 0 1
9061: PUSH
9062: LD_VAR 0 2
9066: AND
9067: PUSH
9068: LD_VAR 0 1
9072: PUSH
9073: LD_VAR 0 4
9077: AND
9078: OR
9079: PUSH
9080: LD_VAR 0 2
9084: PUSH
9085: LD_VAR 0 3
9089: AND
9090: OR
9091: PUSH
9092: LD_VAR 0 3
9096: PUSH
9097: LD_VAR 0 4
9101: AND
9102: OR
9103: IFFALSE 8924
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
9105: LD_VAR 0 3
9109: PUSH
9110: LD_VAR 0 4
9114: AND
9115: PUSH
9116: LD_VAR 0 1
9120: PUSH
9121: LD_VAR 0 4
9125: AND
9126: OR
9127: PUSH
9128: LD_VAR 0 2
9132: PUSH
9133: LD_VAR 0 3
9137: AND
9138: OR
9139: IFFALSE 9764
// begin prepare_siege := true ;
9141: LD_ADDR_EXP 31
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// DialogueOn ;
9149: CALL_OW 6
// if ( inarea1 and inarea2 ) then
9153: LD_VAR 0 3
9157: PUSH
9158: LD_VAR 0 4
9162: AND
9163: IFFALSE 9179
// Say ( JMM , D8b-JMM-1a ) else
9165: LD_EXP 37
9169: PPUSH
9170: LD_STRING D8b-JMM-1a
9172: PPUSH
9173: CALL_OW 88
9177: GO 9191
// Say ( JMM , D8b-JMM-1 ) ;
9179: LD_EXP 37
9183: PPUSH
9184: LD_STRING D8b-JMM-1
9186: PPUSH
9187: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
9191: LD_EXP 4
9195: PPUSH
9196: LD_INT 26
9198: PUSH
9199: LD_INT 1
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PPUSH
9206: CALL_OW 72
9210: PUSH
9211: LD_EXP 38
9215: PUSH
9216: LD_EXP 39
9220: PUSH
9221: LD_EXP 48
9225: PUSH
9226: LD_EXP 51
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: DIFF
9237: PPUSH
9238: LD_STRING D8b-Sol1-1
9240: PPUSH
9241: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
9245: LD_EXP 39
9249: PUSH
9250: LD_EXP 39
9254: PUSH
9255: LD_EXP 4
9259: IN
9260: AND
9261: IFFALSE 9277
// Say ( Cyrus , D8b-Cyrus-1 ) else
9263: LD_EXP 39
9267: PPUSH
9268: LD_STRING D8b-Cyrus-1
9270: PPUSH
9271: CALL_OW 88
9275: GO 9289
// Say ( JMM , D8b-JMM-1a ) ;
9277: LD_EXP 37
9281: PPUSH
9282: LD_STRING D8b-JMM-1a
9284: PPUSH
9285: CALL_OW 88
// if Lisa and Lisa in jmm_units then
9289: LD_EXP 40
9293: PUSH
9294: LD_EXP 40
9298: PUSH
9299: LD_EXP 4
9303: IN
9304: AND
9305: IFFALSE 9319
// Say ( Lisa , D8b-Lisa-2 ) ;
9307: LD_EXP 40
9311: PPUSH
9312: LD_STRING D8b-Lisa-2
9314: PPUSH
9315: CALL_OW 88
// if Bobby and Bobby in jmm_units then
9319: LD_EXP 38
9323: PUSH
9324: LD_EXP 38
9328: PUSH
9329: LD_EXP 4
9333: IN
9334: AND
9335: IFFALSE 9351
// Say ( Bobby , D8b-Bobby-1 ) else
9337: LD_EXP 38
9341: PPUSH
9342: LD_STRING D8b-Bobby-1
9344: PPUSH
9345: CALL_OW 88
9349: GO 9411
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
9351: LD_ADDR_VAR 0 5
9355: PUSH
9356: LD_EXP 4
9360: PPUSH
9361: LD_INT 26
9363: PUSH
9364: LD_INT 1
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PPUSH
9371: CALL_OW 72
9375: PUSH
9376: LD_EXP 38
9380: PUSH
9381: LD_EXP 39
9385: PUSH
9386: LD_EXP 48
9390: PUSH
9391: LD_EXP 51
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: DIFF
9402: PPUSH
9403: LD_STRING D8b-Sol2-1
9405: PPUSH
9406: CALL 585 0 2
9410: ST_TO_ADDR
// DialogueOff ;
9411: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
9415: LD_EXP 39
9419: PUSH
9420: LD_EXP 39
9424: PUSH
9425: LD_EXP 4
9429: IN
9430: AND
9431: IFFALSE 9456
// tmp := Insert ( tmp , 1 , Cyrus ) ;
9433: LD_ADDR_VAR 0 6
9437: PUSH
9438: LD_VAR 0 6
9442: PPUSH
9443: LD_INT 1
9445: PPUSH
9446: LD_EXP 39
9450: PPUSH
9451: CALL_OW 2
9455: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
9456: LD_EXP 38
9460: PUSH
9461: LD_EXP 38
9465: PUSH
9466: LD_EXP 4
9470: IN
9471: AND
9472: IFFALSE 9497
// tmp := Insert ( tmp , 1 , Bobby ) ;
9474: LD_ADDR_VAR 0 6
9478: PUSH
9479: LD_VAR 0 6
9483: PPUSH
9484: LD_INT 1
9486: PPUSH
9487: LD_EXP 38
9491: PPUSH
9492: CALL_OW 2
9496: ST_TO_ADDR
// if sol then
9497: LD_VAR 0 5
9501: IFFALSE 9526
// tmp := Insert ( tmp , 1 , sol ) ;
9503: LD_ADDR_VAR 0 6
9507: PUSH
9508: LD_VAR 0 6
9512: PPUSH
9513: LD_INT 1
9515: PPUSH
9516: LD_VAR 0 5
9520: PPUSH
9521: CALL_OW 2
9525: ST_TO_ADDR
// if tmp then
9526: LD_VAR 0 6
9530: IFFALSE 9723
// begin SetSide ( tmp , 8 ) ;
9532: LD_VAR 0 6
9536: PPUSH
9537: LD_INT 8
9539: PPUSH
9540: CALL_OW 235
// for i in tmp do
9544: LD_ADDR_VAR 0 7
9548: PUSH
9549: LD_VAR 0 6
9553: PUSH
9554: FOR_IN
9555: IFFALSE 9568
// ComExit ( i ) ;
9557: LD_VAR 0 7
9561: PPUSH
9562: CALL 77798 0 1
9566: GO 9554
9568: POP
9569: POP
// wait ( 0 0$0.3 ) ;
9570: LD_INT 10
9572: PPUSH
9573: CALL_OW 67
// ComFree ( tmp ) ;
9577: LD_VAR 0 6
9581: PPUSH
9582: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9586: LD_VAR 0 6
9590: PPUSH
9591: LD_INT 15
9593: PPUSH
9594: CALL_OW 173
// AddComHold ( tmp ) ;
9598: LD_VAR 0 6
9602: PPUSH
9603: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9607: LD_INT 35
9609: PPUSH
9610: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9614: LD_VAR 0 6
9618: PUSH
9619: LD_INT 1
9621: ARRAY
9622: PPUSH
9623: CALL_OW 314
9627: NOT
9628: IFFALSE 9642
// ComMoveToArea ( tmp , cyrusEscape ) ;
9630: LD_VAR 0 6
9634: PPUSH
9635: LD_INT 15
9637: PPUSH
9638: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9642: LD_VAR 0 6
9646: PUSH
9647: LD_INT 1
9649: ARRAY
9650: PPUSH
9651: LD_INT 15
9653: PPUSH
9654: CALL_OW 308
9658: IFFALSE 9713
// begin RemoveUnit ( tmp [ 1 ] ) ;
9660: LD_VAR 0 6
9664: PUSH
9665: LD_INT 1
9667: ARRAY
9668: PPUSH
9669: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9673: LD_ADDR_EXP 4
9677: PUSH
9678: LD_EXP 4
9682: PUSH
9683: LD_VAR 0 6
9687: PUSH
9688: LD_INT 1
9690: ARRAY
9691: DIFF
9692: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9693: LD_ADDR_VAR 0 6
9697: PUSH
9698: LD_VAR 0 6
9702: PUSH
9703: LD_VAR 0 6
9707: PUSH
9708: LD_INT 1
9710: ARRAY
9711: DIFF
9712: ST_TO_ADDR
// end ; until tmp = 0 ;
9713: LD_VAR 0 6
9717: PUSH
9718: LD_INT 0
9720: EQUAL
9721: IFFALSE 9607
// end ; wait ( 0 0$30 ) ;
9723: LD_INT 1050
9725: PPUSH
9726: CALL_OW 67
// if ru_spec_patrol then
9730: LD_EXP 54
9734: IFFALSE 9762
// for i in ru_spec_patrol do
9736: LD_ADDR_VAR 0 7
9740: PUSH
9741: LD_EXP 54
9745: PUSH
9746: FOR_IN
9747: IFFALSE 9760
// RemoveUnit ( i ) ;
9749: LD_VAR 0 7
9753: PPUSH
9754: CALL_OW 64
9758: GO 9746
9760: POP
9761: POP
// end else
9762: GO 9784
// begin prepare_siege := false ;
9764: LD_ADDR_EXP 31
9768: PUSH
9769: LD_INT 0
9771: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9772: LD_EXP 37
9776: PPUSH
9777: LD_STRING D8a-JMM-1
9779: PPUSH
9780: CALL_OW 88
// end ; end ;
9784: PPOPN 7
9786: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9787: LD_EXP 12
9791: IFFALSE 11059
9793: GO 9795
9795: DISABLE
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
9800: PPUSH
// begin uc_side := 8 ;
9801: LD_ADDR_OWVAR 20
9805: PUSH
9806: LD_INT 8
9808: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9809: LD_ADDR_VAR 0 3
9813: PUSH
9814: LD_INT 59
9816: PUSH
9817: LD_INT 71
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 122
9826: PUSH
9827: LD_INT 117
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9838: LD_ADDR_EXP 51
9842: PUSH
9843: LD_STRING Frank
9845: PPUSH
9846: LD_INT 0
9848: PPUSH
9849: LD_STRING 
9851: PPUSH
9852: CALL 39698 0 3
9856: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9857: LD_ADDR_VAR 0 1
9861: PUSH
9862: LD_INT 1
9864: PPUSH
9865: LD_INT 2
9867: PPUSH
9868: CALL_OW 12
9872: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9873: LD_EXP 51
9877: PPUSH
9878: LD_VAR 0 3
9882: PUSH
9883: LD_VAR 0 1
9887: ARRAY
9888: PUSH
9889: LD_INT 1
9891: ARRAY
9892: PPUSH
9893: LD_VAR 0 3
9897: PUSH
9898: LD_VAR 0 1
9902: ARRAY
9903: PUSH
9904: LD_INT 2
9906: ARRAY
9907: PPUSH
9908: LD_INT 0
9910: PPUSH
9911: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9915: LD_EXP 51
9919: PPUSH
9920: LD_INT 1
9922: PPUSH
9923: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9927: LD_INT 35
9929: PPUSH
9930: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9934: LD_EXP 51
9938: PPUSH
9939: LD_EXP 37
9943: PPUSH
9944: CALL_OW 296
9948: PUSH
9949: LD_INT 8
9951: LESS
9952: PUSH
9953: LD_EXP 51
9957: PPUSH
9958: CALL_OW 256
9962: PUSH
9963: LD_INT 250
9965: GREATER
9966: AND
9967: IFFALSE 9927
// Video ( true ) ;
9969: LD_INT 1
9971: PPUSH
9972: CALL 77372 0 1
// CenterOnUnits ( JMM ) ;
9976: LD_EXP 37
9980: PPUSH
9981: CALL_OW 85
// if IsInUnit ( JMM ) then
9985: LD_EXP 37
9989: PPUSH
9990: CALL_OW 310
9994: IFFALSE 10005
// ComFree ( JMM ) ;
9996: LD_EXP 37
10000: PPUSH
10001: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
10005: LD_EXP 37
10009: PPUSH
10010: LD_EXP 51
10014: PPUSH
10015: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
10019: LD_EXP 51
10023: PPUSH
10024: LD_EXP 37
10028: PPUSH
10029: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
10033: LD_EXP 37
10037: PPUSH
10038: LD_STRING D6-JMM-1
10040: PPUSH
10041: CALL_OW 88
// p := 0 ;
10045: LD_ADDR_VAR 0 2
10049: PUSH
10050: LD_INT 0
10052: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10053: LD_INT 35
10055: PPUSH
10056: CALL_OW 67
// p := p + 1 ;
10060: LD_ADDR_VAR 0 2
10064: PUSH
10065: LD_VAR 0 2
10069: PUSH
10070: LD_INT 1
10072: PLUS
10073: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
10074: LD_EXP 37
10078: PPUSH
10079: LD_EXP 51
10083: PPUSH
10084: CALL_OW 296
10088: PUSH
10089: LD_INT 8
10091: LESS
10092: PUSH
10093: LD_VAR 0 2
10097: PUSH
10098: LD_INT 7
10100: GREATER
10101: OR
10102: IFFALSE 10053
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
10104: LD_EXP 40
10108: PUSH
10109: LD_EXP 40
10113: PPUSH
10114: LD_EXP 51
10118: PPUSH
10119: CALL_OW 296
10123: PUSH
10124: LD_INT 20
10126: LESS
10127: AND
10128: PUSH
10129: LD_EXP 40
10133: PUSH
10134: LD_EXP 4
10138: IN
10139: AND
10140: IFFALSE 10165
// begin ComFree ( Lisa ) ;
10142: LD_EXP 40
10146: PPUSH
10147: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
10151: LD_EXP 40
10155: PPUSH
10156: LD_EXP 51
10160: PPUSH
10161: CALL_OW 172
// end ; if Lynch then
10165: LD_EXP 47
10169: IFFALSE 10194
// begin ComFree ( Lynch ) ;
10171: LD_EXP 47
10175: PPUSH
10176: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
10180: LD_EXP 47
10184: PPUSH
10185: LD_EXP 51
10189: PPUSH
10190: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
10194: LD_EXP 37
10198: PPUSH
10199: LD_EXP 51
10203: PPUSH
10204: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10208: LD_EXP 51
10212: PPUSH
10213: LD_EXP 37
10217: PPUSH
10218: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
10222: LD_EXP 51
10226: PPUSH
10227: LD_STRING D6-Frank-1
10229: PPUSH
10230: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
10234: LD_INT 69
10236: PPUSH
10237: LD_INT 20
10239: PPUSH
10240: LD_INT 1
10242: PPUSH
10243: LD_INT 20
10245: NEG
10246: PPUSH
10247: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
10251: LD_INT 69
10253: PPUSH
10254: LD_INT 20
10256: PPUSH
10257: LD_INT 1
10259: PPUSH
10260: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
10264: LD_INT 190
10266: PPUSH
10267: LD_INT 31
10269: PPUSH
10270: LD_INT 1
10272: PPUSH
10273: LD_INT 20
10275: NEG
10276: PPUSH
10277: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
10281: LD_INT 190
10283: PPUSH
10284: LD_INT 31
10286: PPUSH
10287: LD_INT 1
10289: PPUSH
10290: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
10294: LD_INT 69
10296: PPUSH
10297: LD_INT 20
10299: PPUSH
10300: CALL_OW 84
// Wait ( 0 0$02 ) ;
10304: LD_INT 70
10306: PPUSH
10307: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
10311: LD_EXP 37
10315: PPUSH
10316: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
10320: LD_EXP 40
10324: PUSH
10325: LD_EXP 40
10329: PPUSH
10330: LD_EXP 51
10334: PPUSH
10335: CALL_OW 296
10339: PUSH
10340: LD_INT 20
10342: LESS
10343: AND
10344: PUSH
10345: LD_EXP 40
10349: PPUSH
10350: CALL_OW 302
10354: AND
10355: PUSH
10356: LD_EXP 40
10360: PUSH
10361: LD_EXP 4
10365: IN
10366: AND
10367: IFFALSE 10489
// begin ComFree ( Lisa ) ;
10369: LD_EXP 40
10373: PPUSH
10374: CALL_OW 139
// p := 0 ;
10378: LD_ADDR_VAR 0 2
10382: PUSH
10383: LD_INT 0
10385: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10386: LD_INT 35
10388: PPUSH
10389: CALL_OW 67
// p := p + 1 ;
10393: LD_ADDR_VAR 0 2
10397: PUSH
10398: LD_VAR 0 2
10402: PUSH
10403: LD_INT 1
10405: PLUS
10406: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10407: LD_EXP 40
10411: PPUSH
10412: LD_EXP 51
10416: PPUSH
10417: CALL_OW 296
10421: PUSH
10422: LD_INT 7
10424: LESS
10425: PUSH
10426: LD_VAR 0 2
10430: PUSH
10431: LD_INT 7
10433: GREATER
10434: OR
10435: IFFALSE 10386
// Say ( Lisa , D6-Lisa-1 ) ;
10437: LD_EXP 40
10441: PPUSH
10442: LD_STRING D6-Lisa-1
10444: PPUSH
10445: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10449: LD_EXP 40
10453: PPUSH
10454: LD_EXP 51
10458: PPUSH
10459: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10463: LD_EXP 51
10467: PPUSH
10468: LD_EXP 40
10472: PPUSH
10473: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10477: LD_EXP 51
10481: PPUSH
10482: LD_STRING D6-Frank-2
10484: PPUSH
10485: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10489: LD_EXP 47
10493: PUSH
10494: LD_EXP 47
10498: PPUSH
10499: LD_EXP 51
10503: PPUSH
10504: CALL_OW 296
10508: PUSH
10509: LD_INT 20
10511: LESS
10512: AND
10513: PUSH
10514: LD_EXP 47
10518: PPUSH
10519: CALL_OW 302
10523: AND
10524: IFFALSE 10717
// begin ComTurnUnit ( Lynch , JMM ) ;
10526: LD_EXP 47
10530: PPUSH
10531: LD_EXP 37
10535: PPUSH
10536: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10540: LD_EXP 51
10544: PPUSH
10545: LD_EXP 37
10549: PPUSH
10550: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10554: LD_EXP 47
10558: PPUSH
10559: LD_STRING D6-Sol1-2
10561: PPUSH
10562: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10566: LD_EXP 37
10570: PPUSH
10571: LD_STRING D6-JMM-2
10573: PPUSH
10574: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10578: LD_EXP 51
10582: PPUSH
10583: LD_STRING D6-Frank-3
10585: PPUSH
10586: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10590: LD_EXP 37
10594: PPUSH
10595: LD_STRING D6-JMM-3
10597: PPUSH
10598: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10602: LD_EXP 51
10606: PPUSH
10607: LD_STRING D6-Frank-4
10609: PPUSH
10610: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10614: LD_EXP 51
10618: PPUSH
10619: LD_STRING D6-Frank-4a
10621: PPUSH
10622: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10626: LD_EXP 37
10630: PPUSH
10631: LD_STRING D6-JMM-4
10633: PPUSH
10634: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10638: LD_EXP 51
10642: PPUSH
10643: LD_STRING D6-Frank-5
10645: PPUSH
10646: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10650: LD_EXP 40
10654: PUSH
10655: LD_EXP 40
10659: PPUSH
10660: CALL_OW 302
10664: AND
10665: PUSH
10666: LD_EXP 40
10670: PUSH
10671: LD_EXP 4
10675: IN
10676: AND
10677: IFFALSE 10691
// Say ( Lisa , D6-Lisa-5 ) ;
10679: LD_EXP 40
10683: PPUSH
10684: LD_STRING D6-Lisa-5
10686: PPUSH
10687: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10691: LD_EXP 51
10695: PPUSH
10696: LD_STRING D6-Frank-6
10698: PPUSH
10699: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10703: LD_EXP 37
10707: PPUSH
10708: LD_STRING D6-JMM-6
10710: PPUSH
10711: CALL_OW 88
// end else
10715: GO 10844
// begin ComTurnUnit ( Frank , JMM ) ;
10717: LD_EXP 51
10721: PPUSH
10722: LD_EXP 37
10726: PPUSH
10727: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10731: LD_EXP 51
10735: PPUSH
10736: LD_STRING D6-Frank-4
10738: PPUSH
10739: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10743: LD_EXP 51
10747: PPUSH
10748: LD_STRING D6-Frank-4a
10750: PPUSH
10751: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10755: LD_EXP 37
10759: PPUSH
10760: LD_STRING D6-JMM-4
10762: PPUSH
10763: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10767: LD_EXP 51
10771: PPUSH
10772: LD_STRING D6-Frank-5
10774: PPUSH
10775: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10779: LD_EXP 40
10783: PUSH
10784: LD_EXP 40
10788: PPUSH
10789: CALL_OW 302
10793: AND
10794: PUSH
10795: LD_EXP 40
10799: PUSH
10800: LD_EXP 4
10804: IN
10805: AND
10806: IFFALSE 10820
// Say ( Lisa , D6-Lisa-5 ) ;
10808: LD_EXP 40
10812: PPUSH
10813: LD_STRING D6-Lisa-5
10815: PPUSH
10816: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10820: LD_EXP 51
10824: PPUSH
10825: LD_STRING D6-Frank-6
10827: PPUSH
10828: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10832: LD_EXP 37
10836: PPUSH
10837: LD_STRING D6-JMM-6
10839: PPUSH
10840: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10844: LD_STRING Q1
10846: PPUSH
10847: CALL_OW 97
10851: PUSH
10852: LD_INT 1
10854: DOUBLE
10855: EQUAL
10856: IFTRUE 10860
10858: GO 10871
10860: POP
// frank_send_to_scout := true ; 2 :
10861: LD_ADDR_EXP 15
10865: PUSH
10866: LD_INT 1
10868: ST_TO_ADDR
10869: GO 10891
10871: LD_INT 2
10873: DOUBLE
10874: EQUAL
10875: IFTRUE 10879
10877: GO 10890
10879: POP
// frank_send_to_scout := false ; end ;
10880: LD_ADDR_EXP 15
10884: PUSH
10885: LD_INT 0
10887: ST_TO_ADDR
10888: GO 10891
10890: POP
// Video ( false ) ;
10891: LD_INT 0
10893: PPUSH
10894: CALL 77372 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10898: LD_EXP 37
10902: PUSH
10903: LD_EXP 40
10907: PUSH
10908: LD_EXP 47
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: LIST
10917: PPUSH
10918: CALL_OW 139
// if frank_send_to_scout then
10922: LD_EXP 15
10926: IFFALSE 10980
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10928: LD_EXP 51
10932: PPUSH
10933: LD_INT 15
10935: PPUSH
10936: CALL_OW 113
// wait ( 0 0$01 ) ;
10940: LD_INT 35
10942: PPUSH
10943: CALL_OW 67
// until not See ( 1 , Frank ) ;
10947: LD_INT 1
10949: PPUSH
10950: LD_EXP 51
10954: PPUSH
10955: CALL_OW 292
10959: NOT
10960: IFFALSE 10928
// wait ( 0 0$02 ) ;
10962: LD_INT 70
10964: PPUSH
10965: CALL_OW 67
// RemoveUnit ( Frank ) ;
10969: LD_EXP 51
10973: PPUSH
10974: CALL_OW 64
// end else
10978: GO 10992
// SetSide ( Frank , 1 ) ;
10980: LD_EXP 51
10984: PPUSH
10985: LD_INT 1
10987: PPUSH
10988: CALL_OW 235
// send_attack_on_cornel_base := true ;
10992: LD_ADDR_EXP 26
10996: PUSH
10997: LD_INT 1
10999: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11000: LD_INT 35
11002: PPUSH
11003: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
11007: LD_ADDR_EXP 29
11011: PUSH
11012: LD_EXP 29
11016: PPUSH
11017: LD_STRING -
11019: PPUSH
11020: CALL 1077 0 2
11024: ST_TO_ADDR
// if debug then
11025: LD_EXP 1
11029: IFFALSE 11041
// debug_strings := time_to_prepare ;
11031: LD_ADDR_OWVAR 48
11035: PUSH
11036: LD_EXP 29
11040: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
11041: LD_EXP 29
11045: PUSH
11046: LD_INT 0
11048: EQUAL
11049: IFFALSE 11000
// cornel_prepared := true ;
11051: LD_ADDR_EXP 11
11055: PUSH
11056: LD_INT 1
11058: ST_TO_ADDR
// end ;
11059: PPOPN 3
11061: END
// every 0 0$01 trigger cornel_prepared do
11062: LD_EXP 11
11066: IFFALSE 11374
11068: GO 11070
11070: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
11071: LD_EXP 44
11075: PPUSH
11076: LD_STRING D3-Corn-1
11078: PPUSH
11079: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
11083: LD_STRING MOutWait
11085: PPUSH
11086: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
11090: LD_INT 35
11092: PPUSH
11093: CALL_OW 67
// until cornel_counter = 0 ;
11097: LD_EXP 10
11101: PUSH
11102: LD_INT 0
11104: EQUAL
11105: IFFALSE 11090
// SayRadio ( Cornel , D3a-Corn-1 ) ;
11107: LD_EXP 44
11111: PPUSH
11112: LD_STRING D3a-Corn-1
11114: PPUSH
11115: CALL_OW 94
// if IsOk ( Cornel ) then
11119: LD_EXP 44
11123: PPUSH
11124: CALL_OW 302
11128: IFFALSE 11142
// Say ( JMM , D3a-JMM-1 ) ;
11130: LD_EXP 37
11134: PPUSH
11135: LD_STRING D3a-JMM-1
11137: PPUSH
11138: CALL_OW 88
// end_mission_allowed := true ;
11142: LD_ADDR_EXP 21
11146: PUSH
11147: LD_INT 1
11149: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11150: LD_STRING M2
11152: PPUSH
11153: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
11157: LD_INT 9
11159: PPUSH
11160: LD_INT 1
11162: PPUSH
11163: CALL_OW 424
// Wait ( 0 0$05 ) ;
11167: LD_INT 175
11169: PPUSH
11170: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
11174: LD_EXP 44
11178: PPUSH
11179: LD_STRING D3a-Corn-2
11181: PPUSH
11182: CALL_OW 94
// cornel_attack := true ;
11186: LD_ADDR_EXP 9
11190: PUSH
11191: LD_INT 1
11193: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
11194: LD_INT 105
11196: PPUSH
11197: CALL_OW 67
// AddMoreTanks ( ) ;
11201: CALL 5402 0 0
// if frank_send_to_scout then
11205: LD_EXP 15
11209: IFFALSE 11374
// begin InitHc ;
11211: CALL_OW 19
// InitUc ;
11215: CALL_OW 18
// uc_side := 8 ;
11219: LD_ADDR_OWVAR 20
11223: PUSH
11224: LD_INT 8
11226: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
11227: LD_ADDR_EXP 51
11231: PUSH
11232: LD_STRING Frank
11234: PPUSH
11235: LD_INT 0
11237: PPUSH
11238: LD_STRING 
11240: PPUSH
11241: CALL 39698 0 3
11245: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
11246: LD_EXP 51
11250: PPUSH
11251: LD_INT 6
11253: PPUSH
11254: LD_INT 9
11256: PPUSH
11257: LD_INT 0
11259: PPUSH
11260: CALL_OW 48
// ComCrawl ( Frank ) ;
11264: LD_EXP 51
11268: PPUSH
11269: CALL_OW 137
// repeat wait ( 10 ) ;
11273: LD_INT 10
11275: PPUSH
11276: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11280: LD_EXP 37
11284: PPUSH
11285: LD_EXP 51
11289: PPUSH
11290: CALL_OW 296
11294: PUSH
11295: LD_INT 9
11297: LESS
11298: PUSH
11299: LD_INT 9
11301: PPUSH
11302: LD_INT 22
11304: PUSH
11305: LD_INT 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PPUSH
11312: CALL_OW 70
11316: OR
11317: IFFALSE 11273
// if IsDead ( Frank ) then
11319: LD_EXP 51
11323: PPUSH
11324: CALL_OW 301
11328: IFFALSE 11332
// exit ;
11330: GO 11374
// CenterOnUnits ( Frank ) ;
11332: LD_EXP 51
11336: PPUSH
11337: CALL_OW 85
// SetSide ( Frank , 1 ) ;
11341: LD_EXP 51
11345: PPUSH
11346: LD_INT 1
11348: PPUSH
11349: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
11353: LD_EXP 51
11357: PPUSH
11358: LD_STRING D6a-Frank-1
11360: PPUSH
11361: CALL_OW 88
// ComWalk ( Frank ) ;
11365: LD_EXP 51
11369: PPUSH
11370: CALL_OW 138
// end ; end ;
11374: END
// every 0 0$01 trigger solar_builded do
11375: LD_EXP 14
11379: IFFALSE 11483
11381: GO 11383
11383: DISABLE
// begin Wait ( 0 0$02 ) ;
11384: LD_INT 70
11386: PPUSH
11387: CALL_OW 67
// DialogueOn ;
11391: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11395: LD_EXP 37
11399: PPUSH
11400: LD_STRING D2b-JMM-1
11402: PPUSH
11403: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11407: LD_EXP 48
11411: PUSH
11412: LD_EXP 48
11416: PPUSH
11417: CALL_OW 302
11421: AND
11422: IFFALSE 11472
// begin Say ( Walker , D2b-Sci1-1 ) ;
11424: LD_EXP 48
11428: PPUSH
11429: LD_STRING D2b-Sci1-1
11431: PPUSH
11432: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11436: LD_EXP 37
11440: PPUSH
11441: LD_STRING D2b-JMM-2
11443: PPUSH
11444: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11448: LD_EXP 48
11452: PPUSH
11453: LD_STRING D2b-Sci1-2
11455: PPUSH
11456: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11460: LD_EXP 37
11464: PPUSH
11465: LD_STRING D2b-JMM-3
11467: PPUSH
11468: CALL_OW 88
// end ; DialogueOff ;
11472: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11476: LD_STRING MOutSol
11478: PPUSH
11479: CALL_OW 337
// end ;
11483: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11484: LD_EXP 14
11488: PUSH
11489: LD_EXP 37
11493: PPUSH
11494: CALL_OW 302
11498: AND
11499: PUSH
11500: LD_EXP 37
11504: PPUSH
11505: CALL 911 0 1
11509: AND
11510: PUSH
11511: LD_EXP 16
11515: NOT
11516: AND
11517: IFFALSE 11588
11519: GO 11521
11521: DISABLE
11522: LD_INT 0
11524: PPUSH
// begin jmm_in_veh := true ;
11525: LD_ADDR_EXP 16
11529: PUSH
11530: LD_INT 1
11532: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11533: LD_ADDR_VAR 0 1
11537: PUSH
11538: LD_INT 0
11540: PPUSH
11541: LD_INT 1
11543: PPUSH
11544: CALL_OW 12
11548: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11549: LD_INT 70
11551: PPUSH
11552: CALL_OW 67
// if i then
11556: LD_VAR 0 1
11560: IFFALSE 11576
// Say ( JMM , D2c-JMM-1 ) else
11562: LD_EXP 37
11566: PPUSH
11567: LD_STRING D2c-JMM-1
11569: PPUSH
11570: CALL_OW 88
11574: GO 11588
// Say ( JMM , D2c-JMM-1a ) ;
11576: LD_EXP 37
11580: PPUSH
11581: LD_STRING D2c-JMM-1a
11583: PPUSH
11584: CALL_OW 88
// end ;
11588: PPOPN 1
11590: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11591: LD_EXP 14
11595: PUSH
11596: LD_EXP 38
11600: PPUSH
11601: CALL_OW 302
11605: AND
11606: PUSH
11607: LD_EXP 38
11611: PPUSH
11612: CALL 911 0 1
11616: AND
11617: PUSH
11618: LD_EXP 17
11622: NOT
11623: AND
11624: IFFALSE 11656
11626: GO 11628
11628: DISABLE
// begin bobby_in_veh := true ;
11629: LD_ADDR_EXP 17
11633: PUSH
11634: LD_INT 1
11636: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11637: LD_INT 70
11639: PPUSH
11640: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11644: LD_EXP 38
11648: PPUSH
11649: LD_STRING D2c-Bobby-1
11651: PPUSH
11652: CALL_OW 88
11656: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11657: LD_EXP 14
11661: PUSH
11662: LD_EXP 40
11666: PPUSH
11667: CALL_OW 302
11671: AND
11672: PUSH
11673: LD_EXP 40
11677: PPUSH
11678: CALL 911 0 1
11682: AND
11683: PUSH
11684: LD_EXP 19
11688: NOT
11689: AND
11690: IFFALSE 11722
11692: GO 11694
11694: DISABLE
// begin lisa_in_veh := true ;
11695: LD_ADDR_EXP 19
11699: PUSH
11700: LD_INT 1
11702: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11703: LD_INT 70
11705: PPUSH
11706: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11710: LD_EXP 40
11714: PPUSH
11715: LD_STRING D2c-Lisa-1
11717: PPUSH
11718: CALL_OW 88
11722: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11723: LD_EXP 14
11727: PUSH
11728: LD_EXP 39
11732: PPUSH
11733: CALL_OW 302
11737: AND
11738: PUSH
11739: LD_EXP 39
11743: PPUSH
11744: CALL 911 0 1
11748: AND
11749: PUSH
11750: LD_EXP 18
11754: NOT
11755: AND
11756: IFFALSE 11827
11758: GO 11760
11760: DISABLE
11761: LD_INT 0
11763: PPUSH
// begin cyrus_in_veh := true ;
11764: LD_ADDR_EXP 18
11768: PUSH
11769: LD_INT 1
11771: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_INT 0
11779: PPUSH
11780: LD_INT 1
11782: PPUSH
11783: CALL_OW 12
11787: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11788: LD_INT 70
11790: PPUSH
11791: CALL_OW 67
// if i then
11795: LD_VAR 0 1
11799: IFFALSE 11815
// Say ( Cyrus , D2c-Cyrus-1 ) else
11801: LD_EXP 39
11805: PPUSH
11806: LD_STRING D2c-Cyrus-1
11808: PPUSH
11809: CALL_OW 88
11813: GO 11827
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11815: LD_EXP 39
11819: PPUSH
11820: LD_STRING D2c-Cyrus-1a
11822: PPUSH
11823: CALL_OW 88
// end ;
11827: PPOPN 1
11829: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11830: LD_EXP 44
11834: PPUSH
11835: LD_INT 16
11837: PPUSH
11838: CALL_OW 308
11842: IFFALSE 12123
11844: GO 11846
11846: DISABLE
11847: LD_INT 0
11849: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11850: LD_INT 3
11852: PPUSH
11853: LD_EXP 44
11857: PPUSH
11858: CALL_OW 471
// send_attack_on_cornel := true ;
11862: LD_ADDR_EXP 32
11866: PUSH
11867: LD_INT 1
11869: ST_TO_ADDR
// if ru_vehicles then
11870: LD_EXP 56
11874: IFFALSE 11908
// for i in ru_vehicles do
11876: LD_ADDR_VAR 0 1
11880: PUSH
11881: LD_EXP 56
11885: PUSH
11886: FOR_IN
11887: IFFALSE 11906
// ComAgressiveMove ( i , 215 , 69 ) ;
11889: LD_VAR 0 1
11893: PPUSH
11894: LD_INT 215
11896: PPUSH
11897: LD_INT 69
11899: PPUSH
11900: CALL_OW 114
11904: GO 11886
11906: POP
11907: POP
// if ru_patrol then
11908: LD_EXP 53
11912: IFFALSE 11946
// for i in ru_patrol do
11914: LD_ADDR_VAR 0 1
11918: PUSH
11919: LD_EXP 53
11923: PUSH
11924: FOR_IN
11925: IFFALSE 11944
// ComAgressiveMove ( i , 215 , 69 ) ;
11927: LD_VAR 0 1
11931: PPUSH
11932: LD_INT 215
11934: PPUSH
11935: LD_INT 69
11937: PPUSH
11938: CALL_OW 114
11942: GO 11924
11944: POP
11945: POP
// if frank_send_to_scout then
11946: LD_EXP 15
11950: IFFALSE 11964
// SayRadio ( Frank , D3b-Frank-1 ) ;
11952: LD_EXP 51
11956: PPUSH
11957: LD_STRING D3b-Frank-1
11959: PPUSH
11960: CALL_OW 94
// wait ( 0 0$03 ) ;
11964: LD_INT 105
11966: PPUSH
11967: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11971: LD_EXP 44
11975: PPUSH
11976: LD_STRING D4-Corn-1
11978: PPUSH
11979: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11983: LD_INT 35
11985: PPUSH
11986: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11990: LD_INT 22
11992: PUSH
11993: LD_INT 4
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 21
12002: PUSH
12003: LD_INT 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 3
12012: PUSH
12013: LD_INT 24
12015: PUSH
12016: LD_INT 1000
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: PPUSH
12032: CALL_OW 69
12036: PUSH
12037: LD_INT 6
12039: LESS
12040: IFFALSE 11983
// if Cornel then
12042: LD_EXP 44
12046: IFFALSE 12086
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
12048: LD_EXP 44
12052: PPUSH
12053: LD_STRING D5-Corn-1
12055: PPUSH
12056: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
12060: LD_EXP 44
12064: PPUSH
12065: LD_EXP 2
12069: PUSH
12070: LD_STRING Cornel
12072: STR
12073: PPUSH
12074: CALL_OW 38
// cornel_saved := true ;
12078: LD_ADDR_EXP 27
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
12086: LD_INT 4
12088: PPUSH
12089: LD_INT 8
12091: PPUSH
12092: CALL_OW 343
// wait ( 0 0$01 ) ;
12096: LD_INT 35
12098: PPUSH
12099: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
12103: LD_INT 3
12105: PPUSH
12106: LD_EXP 44
12110: PPUSH
12111: CALL_OW 472
// send_attack_on_cornel := false ;
12115: LD_ADDR_EXP 32
12119: PUSH
12120: LD_INT 0
12122: ST_TO_ADDR
// end ;
12123: PPOPN 1
12125: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
12126: LD_INT 9
12128: PPUSH
12129: LD_INT 22
12131: PUSH
12132: LD_INT 1
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PPUSH
12139: CALL_OW 70
12143: PUSH
12144: LD_EXP 33
12148: OR
12149: IFFALSE 12370
12151: GO 12153
12153: DISABLE
12154: LD_INT 0
12156: PPUSH
12157: PPUSH
// begin enable ;
12158: ENABLE
// if not jmm_on_west then
12159: LD_EXP 5
12163: NOT
12164: IFFALSE 12175
// begin YouLost ( 4 ) ;
12166: LD_STRING 4
12168: PPUSH
12169: CALL_OW 104
// exit ;
12173: GO 12370
// end ; if not game_end then
12175: LD_EXP 33
12179: NOT
12180: IFFALSE 12190
// game_end := true ;
12182: LD_ADDR_EXP 33
12186: PUSH
12187: LD_INT 1
12189: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
12190: LD_ADDR_VAR 0 2
12194: PUSH
12195: LD_INT 9
12197: PPUSH
12198: LD_INT 22
12200: PUSH
12201: LD_INT 1
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PPUSH
12208: CALL_OW 70
12212: ST_TO_ADDR
// if not filter then
12213: LD_VAR 0 2
12217: NOT
12218: IFFALSE 12222
// exit ;
12220: GO 12370
// for i in filter do
12222: LD_ADDR_VAR 0 1
12226: PUSH
12227: LD_VAR 0 2
12231: PUSH
12232: FOR_IN
12233: IFFALSE 12368
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
12235: LD_VAR 0 1
12239: PPUSH
12240: CALL_OW 302
12244: PUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 247
12254: PUSH
12255: LD_INT 2
12257: EQUAL
12258: AND
12259: IFFALSE 12331
// begin if i = JMM and save_group < 4 then
12261: LD_VAR 0 1
12265: PUSH
12266: LD_EXP 37
12270: EQUAL
12271: PUSH
12272: LD_EXP 23
12276: PUSH
12277: LD_INT 4
12279: LESS
12280: AND
12281: IFFALSE 12285
// continue ;
12283: GO 12232
// if GetNation ( i ) = nation_american then
12285: LD_VAR 0 1
12289: PPUSH
12290: CALL_OW 248
12294: PUSH
12295: LD_INT 1
12297: EQUAL
12298: IFFALSE 12308
// veh_on_meta := true ;
12300: LD_ADDR_EXP 28
12304: PUSH
12305: LD_INT 1
12307: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
12308: LD_VAR 0 1
12312: PPUSH
12313: CALL_OW 311
12317: PPUSH
12318: CALL 12373 0 1
// RemoveUnit ( i ) ;
12322: LD_VAR 0 1
12326: PPUSH
12327: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
12331: LD_VAR 0 1
12335: PPUSH
12336: CALL_OW 302
12340: PUSH
12341: LD_VAR 0 1
12345: PPUSH
12346: CALL_OW 247
12350: PUSH
12351: LD_INT 1
12353: EQUAL
12354: AND
12355: IFFALSE 12366
// Save ( i ) ;
12357: LD_VAR 0 1
12361: PPUSH
12362: CALL 12373 0 1
// end ;
12366: GO 12232
12368: POP
12369: POP
// end ;
12370: PPOPN 2
12372: END
// export function Save ( i ) ; begin
12373: LD_INT 0
12375: PPUSH
// if i = JMM and save_counter >= 4 then
12376: LD_VAR 0 1
12380: PUSH
12381: LD_EXP 37
12385: EQUAL
12386: PUSH
12387: LD_EXP 36
12391: PUSH
12392: LD_INT 4
12394: GREATEREQUAL
12395: AND
12396: IFFALSE 12532
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12398: LD_EXP 24
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_INT 1
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 21
12415: PUSH
12416: LD_INT 1
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 69
12431: PUSH
12432: LD_INT 1
12434: GREATER
12435: AND
12436: IFFALSE 12493
// begin show_query := false ;
12438: LD_ADDR_EXP 24
12442: PUSH
12443: LD_INT 0
12445: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12446: LD_STRING Q2
12448: PPUSH
12449: CALL_OW 97
12453: PUSH
12454: LD_INT 1
12456: DOUBLE
12457: EQUAL
12458: IFTRUE 12462
12460: GO 12473
12462: POP
// wait_for_them := true ; 2 :
12463: LD_ADDR_EXP 25
12467: PUSH
12468: LD_INT 1
12470: ST_TO_ADDR
12471: GO 12493
12473: LD_INT 2
12475: DOUBLE
12476: EQUAL
12477: IFTRUE 12481
12479: GO 12492
12481: POP
// wait_for_them := false ; end ;
12482: LD_ADDR_EXP 25
12486: PUSH
12487: LD_INT 0
12489: ST_TO_ADDR
12490: GO 12493
12492: POP
// end ; save_counter := save_counter + 1 ;
12493: LD_ADDR_EXP 36
12497: PUSH
12498: LD_EXP 36
12502: PUSH
12503: LD_INT 1
12505: PLUS
12506: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12507: LD_ADDR_EXP 23
12511: PUSH
12512: LD_EXP 23
12516: PUSH
12517: LD_EXP 37
12521: ADD
12522: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12523: LD_EXP 37
12527: PPUSH
12528: CALL_OW 64
// end ; if i = Lisa then
12532: LD_VAR 0 1
12536: PUSH
12537: LD_EXP 40
12541: EQUAL
12542: IFFALSE 12583
// begin save_counter := save_counter + 1 ;
12544: LD_ADDR_EXP 36
12548: PUSH
12549: LD_EXP 36
12553: PUSH
12554: LD_INT 1
12556: PLUS
12557: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12558: LD_ADDR_EXP 23
12562: PUSH
12563: LD_EXP 23
12567: PUSH
12568: LD_EXP 40
12572: ADD
12573: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12574: LD_EXP 40
12578: PPUSH
12579: CALL_OW 64
// end ; if i = Bobby then
12583: LD_VAR 0 1
12587: PUSH
12588: LD_EXP 38
12592: EQUAL
12593: IFFALSE 12634
// begin save_counter := save_counter + 1 ;
12595: LD_ADDR_EXP 36
12599: PUSH
12600: LD_EXP 36
12604: PUSH
12605: LD_INT 1
12607: PLUS
12608: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12609: LD_ADDR_EXP 23
12613: PUSH
12614: LD_EXP 23
12618: PUSH
12619: LD_EXP 38
12623: ADD
12624: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12625: LD_EXP 38
12629: PPUSH
12630: CALL_OW 64
// end ; if i = Cyrus then
12634: LD_VAR 0 1
12638: PUSH
12639: LD_EXP 39
12643: EQUAL
12644: IFFALSE 12685
// begin save_counter := save_counter + 1 ;
12646: LD_ADDR_EXP 36
12650: PUSH
12651: LD_EXP 36
12655: PUSH
12656: LD_INT 1
12658: PLUS
12659: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12660: LD_ADDR_EXP 23
12664: PUSH
12665: LD_EXP 23
12669: PUSH
12670: LD_EXP 39
12674: ADD
12675: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12676: LD_EXP 39
12680: PPUSH
12681: CALL_OW 64
// end ; if i = Khatam then
12685: LD_VAR 0 1
12689: PUSH
12690: LD_EXP 41
12694: EQUAL
12695: IFFALSE 12736
// begin save_counter := save_counter + 1 ;
12697: LD_ADDR_EXP 36
12701: PUSH
12702: LD_EXP 36
12706: PUSH
12707: LD_INT 1
12709: PLUS
12710: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12711: LD_ADDR_EXP 23
12715: PUSH
12716: LD_EXP 23
12720: PUSH
12721: LD_EXP 41
12725: ADD
12726: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12727: LD_EXP 41
12731: PPUSH
12732: CALL_OW 64
// end ; if i = Frank then
12736: LD_VAR 0 1
12740: PUSH
12741: LD_EXP 51
12745: EQUAL
12746: IFFALSE 12787
// begin save_counter := save_counter + 1 ;
12748: LD_ADDR_EXP 36
12752: PUSH
12753: LD_EXP 36
12757: PUSH
12758: LD_INT 1
12760: PLUS
12761: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12762: LD_ADDR_EXP 23
12766: PUSH
12767: LD_EXP 23
12771: PUSH
12772: LD_EXP 51
12776: ADD
12777: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12778: LD_EXP 51
12782: PPUSH
12783: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12787: LD_VAR 0 1
12791: PUSH
12792: LD_EXP 37
12796: NONEQUAL
12797: PUSH
12798: LD_VAR 0 1
12802: PPUSH
12803: CALL_OW 302
12807: AND
12808: PUSH
12809: LD_VAR 0 1
12813: PPUSH
12814: CALL_OW 247
12818: PUSH
12819: LD_INT 1
12821: EQUAL
12822: AND
12823: PUSH
12824: LD_VAR 0 1
12828: PUSH
12829: LD_EXP 23
12833: IN
12834: NOT
12835: AND
12836: IFFALSE 12877
// begin save_counter := save_counter + 1 ;
12838: LD_ADDR_EXP 36
12842: PUSH
12843: LD_EXP 36
12847: PUSH
12848: LD_INT 1
12850: PLUS
12851: ST_TO_ADDR
// save_others := save_others ^ i ;
12852: LD_ADDR_EXP 22
12856: PUSH
12857: LD_EXP 22
12861: PUSH
12862: LD_VAR 0 1
12866: ADD
12867: ST_TO_ADDR
// RemoveUnit ( i ) ;
12868: LD_VAR 0 1
12872: PPUSH
12873: CALL_OW 64
// end ; end ;
12877: LD_VAR 0 2
12881: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12882: LD_EXP 24
12886: NOT
12887: PUSH
12888: LD_EXP 25
12892: NOT
12893: AND
12894: PUSH
12895: LD_INT 22
12897: PUSH
12898: LD_INT 1
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 21
12907: PUSH
12908: LD_INT 1
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PPUSH
12919: CALL_OW 69
12923: PUSH
12924: LD_INT 0
12926: EQUAL
12927: OR
12928: IFFALSE 12937
12930: GO 12932
12932: DISABLE
// EndMission ;
12933: CALL 12938 0 0
12937: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12938: LD_INT 0
12940: PPUSH
12941: PPUSH
12942: PPUSH
12943: PPUSH
12944: PPUSH
// wait ( 0 0$01 ) ;
12945: LD_INT 35
12947: PPUSH
12948: CALL_OW 67
// if tick <= 12 12$00 then
12952: LD_OWVAR 1
12956: PUSH
12957: LD_INT 25200
12959: LESSEQUAL
12960: IFFALSE 12969
// SetAchievement ( ACH_ASPEED_3 ) ;
12962: LD_STRING ACH_ASPEED_3
12964: PPUSH
12965: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12969: LD_EXP 23
12973: PUSH
12974: LD_EXP 22
12978: ADD
12979: PPUSH
12980: LD_INT 25
12982: PUSH
12983: LD_INT 4
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PPUSH
12990: CALL_OW 72
12994: PUSH
12995: LD_INT 0
12997: EQUAL
12998: IFFALSE 13014
// begin wait ( 3 ) ;
13000: LD_INT 3
13002: PPUSH
13003: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
13007: LD_STRING ACH_NOSCI
13009: PPUSH
13010: CALL_OW 543
// end ; m1 := solar_builded ;
13014: LD_ADDR_VAR 0 3
13018: PUSH
13019: LD_EXP 14
13023: ST_TO_ADDR
// m2 := veh_on_meta ;
13024: LD_ADDR_VAR 0 4
13028: PUSH
13029: LD_EXP 28
13033: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
13034: LD_ADDR_VAR 0 5
13038: PUSH
13039: LD_EXP 34
13043: PUSH
13044: LD_INT 0
13046: EQUAL
13047: ST_TO_ADDR
// if solar_builded then
13048: LD_EXP 14
13052: IFFALSE 13066
// AddMedal ( Solar1 , 1 ) else
13054: LD_STRING Solar1
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 101
13064: GO 13077
// AddMedal ( Solar1 , - 1 ) ;
13066: LD_STRING Solar1
13068: PPUSH
13069: LD_INT 1
13071: NEG
13072: PPUSH
13073: CALL_OW 101
// if veh_on_meta then
13077: LD_EXP 28
13081: IFFALSE 13095
// AddMedal ( Solar2 , 1 ) else
13083: LD_STRING Solar2
13085: PPUSH
13086: LD_INT 1
13088: PPUSH
13089: CALL_OW 101
13093: GO 13125
// if solar_builded then
13095: LD_EXP 14
13099: IFFALSE 13114
// AddMedal ( Solar2 , - 1 ) else
13101: LD_STRING Solar2
13103: PPUSH
13104: LD_INT 1
13106: NEG
13107: PPUSH
13108: CALL_OW 101
13112: GO 13125
// AddMedal ( Solar2 , - 2 ) ;
13114: LD_STRING Solar2
13116: PPUSH
13117: LD_INT 2
13119: NEG
13120: PPUSH
13121: CALL_OW 101
// if lose_counter = 0 then
13125: LD_EXP 34
13129: PUSH
13130: LD_INT 0
13132: EQUAL
13133: IFFALSE 13147
// AddMedal ( No , 1 ) else
13135: LD_STRING No
13137: PPUSH
13138: LD_INT 1
13140: PPUSH
13141: CALL_OW 101
13145: GO 13191
// if lose_counter > 0 and lose_counter < 4 then
13147: LD_EXP 34
13151: PUSH
13152: LD_INT 0
13154: GREATER
13155: PUSH
13156: LD_EXP 34
13160: PUSH
13161: LD_INT 4
13163: LESS
13164: AND
13165: IFFALSE 13180
// AddMedal ( No , - 1 ) else
13167: LD_STRING No
13169: PPUSH
13170: LD_INT 1
13172: NEG
13173: PPUSH
13174: CALL_OW 101
13178: GO 13191
// AddMedal ( UpTo4 , - 1 ) ;
13180: LD_STRING UpTo4
13182: PPUSH
13183: LD_INT 1
13185: NEG
13186: PPUSH
13187: CALL_OW 101
// GiveMedals ( MAIN ) ;
13191: LD_STRING MAIN
13193: PPUSH
13194: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
13198: LD_OWVAR 67
13202: PUSH
13203: LD_INT 3
13205: GREATEREQUAL
13206: PUSH
13207: LD_VAR 0 3
13211: AND
13212: PUSH
13213: LD_VAR 0 4
13217: AND
13218: PUSH
13219: LD_VAR 0 5
13223: AND
13224: IFFALSE 13236
// SetAchievementEX ( ACH_AMER , 3 ) ;
13226: LD_STRING ACH_AMER
13228: PPUSH
13229: LD_INT 3
13231: PPUSH
13232: CALL_OW 564
// if IsDead ( Pokryshkin ) then
13236: LD_EXP 52
13240: PPUSH
13241: CALL_OW 301
13245: IFFALSE 13301
// begin stop_talking := true ;
13247: LD_ADDR_OWVAR 56
13251: PUSH
13252: LD_INT 1
13254: ST_TO_ADDR
// for i in save_group union save_others do
13255: LD_ADDR_VAR 0 2
13259: PUSH
13260: LD_EXP 23
13264: PUSH
13265: LD_EXP 22
13269: UNION
13270: PUSH
13271: FOR_IN
13272: IFFALSE 13291
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
13274: LD_VAR 0 2
13278: PPUSH
13279: LD_INT 1
13281: PPUSH
13282: LD_INT 1500
13284: PPUSH
13285: CALL_OW 591
13289: GO 13271
13291: POP
13292: POP
// stop_talking := false ;
13293: LD_ADDR_OWVAR 56
13297: PUSH
13298: LD_INT 0
13300: ST_TO_ADDR
// end ; RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_american ] ] ) ) ;
13301: LD_INT 22
13303: PUSH
13304: LD_INT 1
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PUSH
13311: LD_INT 23
13313: PUSH
13314: LD_INT 1
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PPUSH
13325: CALL_OW 69
13329: PPUSH
13330: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
13334: LD_EXP 37
13338: PPUSH
13339: LD_EXP 2
13343: PUSH
13344: LD_STRING JMM
13346: STR
13347: PPUSH
13348: CALL_OW 38
// if Bobby in save_group then
13352: LD_EXP 38
13356: PUSH
13357: LD_EXP 23
13361: IN
13362: IFFALSE 13382
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
13364: LD_EXP 38
13368: PPUSH
13369: LD_EXP 2
13373: PUSH
13374: LD_STRING Bobby
13376: STR
13377: PPUSH
13378: CALL_OW 38
// if Cyrus in save_group then
13382: LD_EXP 39
13386: PUSH
13387: LD_EXP 23
13391: IN
13392: IFFALSE 13412
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
13394: LD_EXP 39
13398: PPUSH
13399: LD_EXP 2
13403: PUSH
13404: LD_STRING Cyrus
13406: STR
13407: PPUSH
13408: CALL_OW 38
// if Lisa in save_group then
13412: LD_EXP 40
13416: PUSH
13417: LD_EXP 23
13421: IN
13422: IFFALSE 13442
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13424: LD_EXP 40
13428: PPUSH
13429: LD_EXP 2
13433: PUSH
13434: LD_STRING Lisa
13436: STR
13437: PPUSH
13438: CALL_OW 38
// if Frank in save_group then
13442: LD_EXP 51
13446: PUSH
13447: LD_EXP 23
13451: IN
13452: IFFALSE 13479
// begin ToLua ( enableBioCharacter(BIO_FRANK) ) ;
13454: LD_STRING enableBioCharacter(BIO_FRANK)
13456: PPUSH
13457: CALL_OW 559
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13461: LD_EXP 51
13465: PPUSH
13466: LD_EXP 2
13470: PUSH
13471: LD_STRING Frank
13473: STR
13474: PPUSH
13475: CALL_OW 38
// end ; if Khatam in save_group then
13479: LD_EXP 41
13483: PUSH
13484: LD_EXP 23
13488: IN
13489: IFFALSE 13509
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13491: LD_EXP 41
13495: PPUSH
13496: LD_EXP 2
13500: PUSH
13501: LD_STRING Khatam
13503: STR
13504: PPUSH
13505: CALL_OW 38
// if save_others then
13509: LD_EXP 22
13513: IFFALSE 13527
// SaveCharacters ( save_others , 03_others ) ;
13515: LD_EXP 22
13519: PPUSH
13520: LD_STRING 03_others
13522: PPUSH
13523: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ANDY) ) ;
13527: LD_STRING enableBioCharacter(BIO_ANDY)
13529: PPUSH
13530: CALL_OW 559
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13534: LD_EXP 45
13538: PUSH
13539: LD_EXP 45
13543: PPUSH
13544: CALL_OW 302
13548: AND
13549: PUSH
13550: LD_EXP 27
13554: AND
13555: IFFALSE 13567
// begin ResetFog ;
13557: CALL_OW 335
// DisplayEndingScene ;
13561: CALL 13589 0 0
// end else
13565: GO 13580
// DeleteCharacters ( mission_prefix & Cornel ) ;
13567: LD_EXP 2
13571: PUSH
13572: LD_STRING Cornel
13574: STR
13575: PPUSH
13576: CALL_OW 40
// YouWin ;
13580: CALL_OW 103
// end ;
13584: LD_VAR 0 1
13588: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13589: LD_INT 0
13591: PPUSH
13592: PPUSH
13593: PPUSH
13594: PPUSH
13595: PPUSH
13596: PPUSH
// InGameOn ;
13597: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13601: LD_INT 208
13603: PPUSH
13604: LD_INT 62
13606: PPUSH
13607: LD_INT 1
13609: PPUSH
13610: LD_INT 10
13612: NEG
13613: PPUSH
13614: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13618: LD_INT 208
13620: PPUSH
13621: LD_INT 62
13623: PPUSH
13624: LD_INT 1
13626: PPUSH
13627: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13631: LD_ADDR_VAR 0 3
13635: PUSH
13636: LD_INT 22
13638: PUSH
13639: LD_INT 3
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: LD_INT 2
13648: PUSH
13649: LD_INT 21
13651: PUSH
13652: LD_INT 2
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: LD_INT 21
13661: PUSH
13662: LD_INT 1
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PPUSH
13678: CALL_OW 69
13682: ST_TO_ADDR
// if filter then
13683: LD_VAR 0 3
13687: IFFALSE 13715
// for i in filter do
13689: LD_ADDR_VAR 0 2
13693: PUSH
13694: LD_VAR 0 3
13698: PUSH
13699: FOR_IN
13700: IFFALSE 13713
// RemoveUnit ( i ) ;
13702: LD_VAR 0 2
13706: PPUSH
13707: CALL_OW 64
13711: GO 13699
13713: POP
13714: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13715: LD_ADDR_VAR 0 3
13719: PUSH
13720: LD_INT 22
13722: PUSH
13723: LD_INT 4
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 21
13732: PUSH
13733: LD_INT 1
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PPUSH
13744: CALL_OW 69
13748: ST_TO_ADDR
// if filter then
13749: LD_VAR 0 3
13753: IFFALSE 13784
// for i in filter do
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_VAR 0 3
13764: PUSH
13765: FOR_IN
13766: IFFALSE 13782
// SetLives ( i , 0 ) ;
13768: LD_VAR 0 2
13772: PPUSH
13773: LD_INT 0
13775: PPUSH
13776: CALL_OW 234
13780: GO 13765
13782: POP
13783: POP
// uc_side := 4 ;
13784: LD_ADDR_OWVAR 20
13788: PUSH
13789: LD_INT 4
13791: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13792: LD_ADDR_VAR 0 4
13796: PUSH
13797: LD_STRING Cornell
13799: PPUSH
13800: LD_INT 0
13802: PPUSH
13803: LD_STRING 
13805: PPUSH
13806: CALL 39698 0 3
13810: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13811: LD_VAR 0 4
13815: PPUSH
13816: LD_INT 208
13818: PPUSH
13819: LD_INT 62
13821: PPUSH
13822: LD_INT 0
13824: PPUSH
13825: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13829: LD_VAR 0 4
13833: PPUSH
13834: LD_INT 100
13836: PPUSH
13837: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13841: LD_INT 3
13843: PPUSH
13844: LD_VAR 0 4
13848: PPUSH
13849: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13853: LD_INT 4
13855: PPUSH
13856: LD_INT 3
13858: PPUSH
13859: LD_INT 1
13861: PPUSH
13862: LD_INT 1
13864: PPUSH
13865: CALL_OW 80
// uc_side := 3 ;
13869: LD_ADDR_OWVAR 20
13873: PUSH
13874: LD_INT 3
13876: ST_TO_ADDR
// uc_nation := 3 ;
13877: LD_ADDR_OWVAR 21
13881: PUSH
13882: LD_INT 3
13884: ST_TO_ADDR
// InitHc ;
13885: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13889: LD_ADDR_VAR 0 5
13893: PUSH
13894: LD_STRING Mikhail
13896: PPUSH
13897: LD_INT 0
13899: PPUSH
13900: LD_STRING 
13902: PPUSH
13903: CALL 39698 0 3
13907: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13908: LD_INT 1
13910: PPUSH
13911: LD_INT 1
13913: PPUSH
13914: LD_INT 0
13916: PPUSH
13917: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13921: LD_ADDR_VAR 0 6
13925: PUSH
13926: LD_VAR 0 6
13930: PUSH
13931: CALL_OW 44
13935: ADD
13936: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13937: LD_ADDR_VAR 0 6
13941: PUSH
13942: LD_VAR 0 6
13946: PUSH
13947: CALL_OW 44
13951: ADD
13952: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13953: LD_INT 2
13955: PPUSH
13956: LD_INT 4
13958: PPUSH
13959: LD_INT 0
13961: PPUSH
13962: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13966: LD_ADDR_VAR 0 6
13970: PUSH
13971: LD_VAR 0 6
13975: PUSH
13976: CALL_OW 44
13980: ADD
13981: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13982: LD_VAR 0 5
13986: PPUSH
13987: LD_INT 17
13989: PPUSH
13990: LD_INT 0
13992: PPUSH
13993: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13997: LD_VAR 0 5
14001: PPUSH
14002: LD_INT 210
14004: PPUSH
14005: LD_INT 63
14007: PPUSH
14008: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
14012: LD_VAR 0 5
14016: PPUSH
14017: LD_INT 208
14019: PPUSH
14020: LD_INT 62
14022: PPUSH
14023: CALL_OW 178
// for i in fake_russians do
14027: LD_ADDR_VAR 0 2
14031: PUSH
14032: LD_VAR 0 6
14036: PUSH
14037: FOR_IN
14038: IFFALSE 14116
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
14040: LD_VAR 0 2
14044: PPUSH
14045: LD_INT 17
14047: PPUSH
14048: LD_INT 0
14050: PPUSH
14051: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
14055: LD_VAR 0 2
14059: PPUSH
14060: LD_INT 215
14062: PPUSH
14063: LD_INT 67
14065: PPUSH
14066: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
14070: LD_VAR 0 2
14074: PPUSH
14075: LD_INT 208
14077: PPUSH
14078: LD_INT 62
14080: PPUSH
14081: CALL_OW 178
// if GetClass ( i ) = 4 then
14085: LD_VAR 0 2
14089: PPUSH
14090: CALL_OW 257
14094: PUSH
14095: LD_INT 4
14097: EQUAL
14098: IFFALSE 14114
// ComHeal ( i , fake_cornel ) ;
14100: LD_VAR 0 2
14104: PPUSH
14105: LD_VAR 0 4
14109: PPUSH
14110: CALL_OW 128
// end ;
14114: GO 14037
14116: POP
14117: POP
// Wait ( 0 0$01 ) ;
14118: LD_INT 35
14120: PPUSH
14121: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
14125: LD_INT 208
14127: PPUSH
14128: LD_INT 62
14130: PPUSH
14131: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
14135: LD_INT 208
14137: PPUSH
14138: LD_INT 62
14140: PPUSH
14141: LD_INT 1
14143: PPUSH
14144: LD_INT 10
14146: NEG
14147: PPUSH
14148: CALL_OW 330
// Wait ( 0 0$15 ) ;
14152: LD_INT 525
14154: PPUSH
14155: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
14159: LD_INT 208
14161: PPUSH
14162: LD_INT 62
14164: PPUSH
14165: LD_INT 1
14167: PPUSH
14168: CALL_OW 331
// ResetFog ;
14172: CALL_OW 335
// InGameOff ;
14176: CALL_OW 9
// end ;
14180: LD_VAR 0 1
14184: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
14185: LD_INT 10
14187: PPUSH
14188: LD_INT 22
14190: PUSH
14191: LD_INT 1
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PPUSH
14198: CALL_OW 70
14202: PUSH
14203: LD_EXP 44
14207: PPUSH
14208: CALL_OW 302
14212: AND
14213: PUSH
14214: LD_INT 22
14216: PUSH
14217: LD_INT 1
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PPUSH
14224: CALL_OW 69
14228: PPUSH
14229: LD_EXP 44
14233: PPUSH
14234: CALL_OW 74
14238: PPUSH
14239: LD_EXP 44
14243: PPUSH
14244: CALL_OW 296
14248: PUSH
14249: LD_INT 30
14251: LESS
14252: OR
14253: IFFALSE 14304
14255: GO 14257
14257: DISABLE
// begin enable ;
14258: ENABLE
// powell_warn := powell_warn + 1 ;
14259: LD_ADDR_EXP 35
14263: PUSH
14264: LD_EXP 35
14268: PUSH
14269: LD_INT 1
14271: PLUS
14272: ST_TO_ADDR
// if powell_warn = 3 then
14273: LD_EXP 35
14277: PUSH
14278: LD_INT 3
14280: EQUAL
14281: IFFALSE 14292
// begin YouLost ( 5 ) ;
14283: LD_STRING 5
14285: PPUSH
14286: CALL_OW 104
// exit ;
14290: GO 14304
// end ; SayRadioNoFace ( Powell , DWarn-Pow-1 ) ;
14292: LD_EXP 46
14296: PPUSH
14297: LD_STRING DWarn-Pow-1
14299: PPUSH
14300: CALL_OW 586
// end ; end_of_file
14304: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
14305: LD_EXP 8
14309: IFFALSE 16146
14311: GO 14313
14313: DISABLE
14314: LD_INT 0
14316: PPUSH
14317: PPUSH
14318: PPUSH
14319: PPUSH
14320: PPUSH
14321: PPUSH
14322: PPUSH
14323: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
14324: LD_EXP 44
14328: PUSH
14329: LD_EXP 45
14333: ADD
14334: PUSH
14335: LD_EXP 6
14339: ADD
14340: PPUSH
14341: LD_INT 250
14343: PPUSH
14344: LD_INT 120
14346: PPUSH
14347: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
14351: LD_ADDR_VAR 0 2
14355: PUSH
14356: LD_EXP 6
14360: PPUSH
14361: LD_INT 25
14363: PUSH
14364: LD_INT 2
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PPUSH
14371: CALL_OW 72
14375: PUSH
14376: LD_EXP 45
14380: DIFF
14381: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
14382: LD_ADDR_VAR 0 3
14386: PUSH
14387: LD_EXP 6
14391: PPUSH
14392: LD_INT 21
14394: PUSH
14395: LD_INT 1
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PPUSH
14402: CALL_OW 72
14406: PUSH
14407: LD_VAR 0 2
14411: DIFF
14412: ST_TO_ADDR
// if not has_eng then
14413: LD_VAR 0 2
14417: NOT
14418: IFFALSE 14501
// begin uc_side := 4 ;
14420: LD_ADDR_OWVAR 20
14424: PUSH
14425: LD_INT 4
14427: ST_TO_ADDR
// uc_nation := 1 ;
14428: LD_ADDR_OWVAR 21
14432: PUSH
14433: LD_INT 1
14435: ST_TO_ADDR
// bc_type := b_depot ;
14436: LD_ADDR_OWVAR 42
14440: PUSH
14441: LD_INT 0
14443: ST_TO_ADDR
// bc_level := 2 ;
14444: LD_ADDR_OWVAR 43
14448: PUSH
14449: LD_INT 2
14451: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14452: LD_ADDR_VAR 0 4
14456: PUSH
14457: LD_INT 264
14459: PPUSH
14460: LD_INT 120
14462: PPUSH
14463: LD_INT 4
14465: PPUSH
14466: CALL_OW 47
14470: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14471: LD_INT 264
14473: PPUSH
14474: LD_INT 120
14476: PPUSH
14477: LD_INT 4
14479: PPUSH
14480: LD_INT 10
14482: NEG
14483: PPUSH
14484: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14488: LD_INT 264
14490: PPUSH
14491: LD_INT 120
14493: PPUSH
14494: LD_INT 4
14496: PPUSH
14497: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14501: LD_INT 35
14503: PPUSH
14504: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14508: LD_EXP 44
14512: PPUSH
14513: LD_INT 10
14515: PPUSH
14516: CALL_OW 308
14520: PUSH
14521: LD_EXP 44
14525: PPUSH
14526: CALL_OW 310
14530: PPUSH
14531: LD_INT 10
14533: PPUSH
14534: CALL_OW 308
14538: OR
14539: IFFALSE 14501
// if has_eng and not dep then
14541: LD_VAR 0 2
14545: PUSH
14546: LD_VAR 0 4
14550: NOT
14551: AND
14552: IFFALSE 14702
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14554: LD_VAR 0 2
14558: PPUSH
14559: LD_INT 0
14561: PPUSH
14562: LD_INT 264
14564: PPUSH
14565: LD_INT 120
14567: PPUSH
14568: LD_INT 4
14570: PPUSH
14571: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14575: LD_INT 35
14577: PPUSH
14578: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14582: LD_INT 22
14584: PUSH
14585: LD_INT 4
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: LD_INT 30
14594: PUSH
14595: LD_INT 0
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PPUSH
14606: CALL_OW 69
14610: IFFALSE 14575
// ComMoveXY ( filter , 264 , 120 ) ;
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_INT 264
14619: PPUSH
14620: LD_INT 120
14622: PPUSH
14623: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14627: LD_INT 35
14629: PPUSH
14630: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14634: LD_INT 22
14636: PUSH
14637: LD_INT 4
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 30
14646: PUSH
14647: LD_INT 0
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 3
14656: PUSH
14657: LD_INT 57
14659: PUSH
14660: EMPTY
14661: LIST
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: LIST
14671: PPUSH
14672: CALL_OW 69
14676: IFFALSE 14627
// ComMoveXY ( filter , 247 , 113 ) ;
14678: LD_VAR 0 3
14682: PPUSH
14683: LD_INT 247
14685: PPUSH
14686: LD_INT 113
14688: PPUSH
14689: CALL_OW 111
// Wait ( 0 0$2 ) ;
14693: LD_INT 70
14695: PPUSH
14696: CALL_OW 67
// end else
14700: GO 14714
// begin SetSide ( dep , 4 ) ;
14702: LD_VAR 0 4
14706: PPUSH
14707: LD_INT 4
14709: PPUSH
14710: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14714: LD_ADDR_VAR 0 4
14718: PUSH
14719: LD_INT 22
14721: PUSH
14722: LD_INT 4
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 30
14731: PUSH
14732: LD_INT 0
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PPUSH
14743: CALL_OW 69
14747: PUSH
14748: LD_INT 1
14750: ARRAY
14751: ST_TO_ADDR
// if not has_eng then
14752: LD_VAR 0 2
14756: NOT
14757: IFFALSE 14844
// for i = 1 to 2 do
14759: LD_ADDR_VAR 0 1
14763: PUSH
14764: DOUBLE
14765: LD_INT 1
14767: DEC
14768: ST_TO_ADDR
14769: LD_INT 2
14771: PUSH
14772: FOR_TO
14773: IFFALSE 14842
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14775: LD_VAR 0 3
14779: PUSH
14780: LD_INT 1
14782: ARRAY
14783: PPUSH
14784: LD_VAR 0 4
14788: PPUSH
14789: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14793: LD_VAR 0 3
14797: PUSH
14798: LD_INT 1
14800: ARRAY
14801: PPUSH
14802: LD_INT 2
14804: PPUSH
14805: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14809: LD_VAR 0 3
14813: PUSH
14814: LD_INT 1
14816: ARRAY
14817: PPUSH
14818: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14822: LD_ADDR_VAR 0 3
14826: PUSH
14827: LD_VAR 0 3
14831: PPUSH
14832: LD_INT 1
14834: PPUSH
14835: CALL_OW 3
14839: ST_TO_ADDR
// end ;
14840: GO 14772
14842: POP
14843: POP
// if IsInUnit ( Cornel ) then
14844: LD_EXP 44
14848: PPUSH
14849: CALL_OW 310
14853: IFFALSE 14931
// begin cargo := IsInUnit ( Cornel ) ;
14855: LD_ADDR_VAR 0 7
14859: PUSH
14860: LD_EXP 44
14864: PPUSH
14865: CALL_OW 310
14869: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14870: LD_VAR 0 7
14874: PPUSH
14875: LD_INT 1
14877: PPUSH
14878: CALL_OW 289
14882: IFFALSE 14893
// ComUnload ( cargo ) ;
14884: LD_VAR 0 7
14888: PPUSH
14889: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14893: LD_EXP 44
14897: PPUSH
14898: LD_INT 235
14900: PPUSH
14901: LD_INT 122
14903: PPUSH
14904: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14908: LD_EXP 44
14912: PPUSH
14913: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14917: LD_EXP 44
14921: PPUSH
14922: LD_VAR 0 4
14926: PPUSH
14927: CALL_OW 180
// end ; if Bierezov then
14931: LD_EXP 45
14935: IFFALSE 14983
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14937: LD_EXP 45
14941: PPUSH
14942: LD_INT 260
14944: PPUSH
14945: LD_INT 120
14947: PPUSH
14948: CALL_OW 111
// if dep then
14952: LD_VAR 0 4
14956: IFFALSE 14974
// AddComEnterUnit ( Bierezov , dep ) else
14958: LD_EXP 45
14962: PPUSH
14963: LD_VAR 0 4
14967: PPUSH
14968: CALL_OW 180
14972: GO 14983
// AddComHold ( Bierezov ) ;
14974: LD_EXP 45
14978: PPUSH
14979: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14983: LD_INT 525
14985: PPUSH
14986: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14990: LD_ADDR_VAR 0 2
14994: PUSH
14995: LD_INT 22
14997: PUSH
14998: LD_INT 4
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 25
15007: PUSH
15008: LD_INT 2
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PPUSH
15019: CALL_OW 69
15023: PUSH
15024: LD_EXP 45
15028: DIFF
15029: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15030: LD_INT 35
15032: PPUSH
15033: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
15037: LD_ADDR_VAR 0 6
15041: PUSH
15042: LD_INT 10
15044: PPUSH
15045: CALL_OW 435
15049: ST_TO_ADDR
// if crates then
15050: LD_VAR 0 6
15054: IFFALSE 15083
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
15056: LD_VAR 0 2
15060: PPUSH
15061: LD_VAR 0 6
15065: PUSH
15066: LD_INT 1
15068: ARRAY
15069: PPUSH
15070: LD_VAR 0 6
15074: PUSH
15075: LD_INT 2
15077: ARRAY
15078: PPUSH
15079: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
15083: LD_VAR 0 4
15087: PPUSH
15088: CALL_OW 274
15092: PPUSH
15093: LD_INT 1
15095: PPUSH
15096: CALL_OW 275
15100: PUSH
15101: LD_INT 40
15103: GREATEREQUAL
15104: IFFALSE 15030
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
15106: LD_ADDR_VAR 0 5
15110: PUSH
15111: LD_INT 4
15113: PUSH
15114: LD_INT 256
15116: PUSH
15117: LD_INT 111
15119: PUSH
15120: LD_INT 2
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 31
15131: PUSH
15132: LD_INT 243
15134: PUSH
15135: LD_INT 112
15137: PUSH
15138: LD_INT 2
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: PUSH
15147: LD_INT 31
15149: PUSH
15150: LD_INT 254
15152: PUSH
15153: LD_INT 114
15155: PUSH
15156: LD_INT 2
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: LIST
15169: ST_TO_ADDR
// for i in blist do
15170: LD_ADDR_VAR 0 1
15174: PUSH
15175: LD_VAR 0 5
15179: PUSH
15180: FOR_IN
15181: IFFALSE 15230
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
15183: LD_VAR 0 2
15187: PPUSH
15188: LD_VAR 0 1
15192: PUSH
15193: LD_INT 1
15195: ARRAY
15196: PPUSH
15197: LD_VAR 0 1
15201: PUSH
15202: LD_INT 2
15204: ARRAY
15205: PPUSH
15206: LD_VAR 0 1
15210: PUSH
15211: LD_INT 3
15213: ARRAY
15214: PPUSH
15215: LD_VAR 0 1
15219: PUSH
15220: LD_INT 4
15222: ARRAY
15223: PPUSH
15224: CALL_OW 205
15228: GO 15180
15230: POP
15231: POP
// repeat wait ( 0 0$01 ) ;
15232: LD_INT 35
15234: PPUSH
15235: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
15239: LD_INT 22
15241: PUSH
15242: LD_INT 4
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PUSH
15249: LD_INT 30
15251: PUSH
15252: LD_INT 4
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: LD_INT 3
15261: PUSH
15262: LD_INT 57
15264: PUSH
15265: EMPTY
15266: LIST
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: LIST
15276: PPUSH
15277: CALL_OW 69
15281: IFFALSE 15232
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15283: LD_VAR 0 3
15287: PPUSH
15288: LD_INT 22
15290: PUSH
15291: LD_INT 4
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 30
15300: PUSH
15301: LD_INT 4
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PPUSH
15312: CALL_OW 69
15316: PUSH
15317: LD_INT 1
15319: ARRAY
15320: PPUSH
15321: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
15325: LD_VAR 0 3
15329: PPUSH
15330: LD_INT 1
15332: PPUSH
15333: CALL_OW 183
// if has_eng > 1 then
15337: LD_VAR 0 2
15341: PUSH
15342: LD_INT 1
15344: GREATER
15345: IFFALSE 15487
// for i = has_eng downto 2 do
15347: LD_ADDR_VAR 0 1
15351: PUSH
15352: DOUBLE
15353: LD_VAR 0 2
15357: INC
15358: ST_TO_ADDR
15359: LD_INT 2
15361: PUSH
15362: FOR_DOWNTO
15363: IFFALSE 15485
// begin if IsInUnit ( has_eng [ i ] ) then
15365: LD_VAR 0 2
15369: PUSH
15370: LD_VAR 0 1
15374: ARRAY
15375: PPUSH
15376: CALL_OW 310
15380: IFFALSE 15397
// ComExitBuilding ( has_eng [ i ] ) ;
15382: LD_VAR 0 2
15386: PUSH
15387: LD_VAR 0 1
15391: ARRAY
15392: PPUSH
15393: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15397: LD_VAR 0 2
15401: PUSH
15402: LD_VAR 0 1
15406: ARRAY
15407: PPUSH
15408: LD_INT 22
15410: PUSH
15411: LD_INT 4
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 30
15420: PUSH
15421: LD_INT 4
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PPUSH
15432: CALL_OW 69
15436: PUSH
15437: LD_INT 1
15439: ARRAY
15440: PPUSH
15441: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15445: LD_VAR 0 2
15449: PUSH
15450: LD_VAR 0 1
15454: ARRAY
15455: PPUSH
15456: LD_INT 1
15458: PPUSH
15459: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15463: LD_ADDR_VAR 0 2
15467: PUSH
15468: LD_VAR 0 2
15472: PPUSH
15473: LD_VAR 0 1
15477: PPUSH
15478: CALL_OW 3
15482: ST_TO_ADDR
// end ;
15483: GO 15362
15485: POP
15486: POP
// repeat wait ( 0 0$01 ) ;
15487: LD_INT 35
15489: PPUSH
15490: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15494: LD_INT 22
15496: PUSH
15497: LD_INT 4
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 30
15506: PUSH
15507: LD_INT 31
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 3
15516: PUSH
15517: LD_INT 57
15519: PUSH
15520: EMPTY
15521: LIST
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PPUSH
15532: CALL_OW 69
15536: PUSH
15537: LD_INT 1
15539: GREATER
15540: IFFALSE 15487
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15542: LD_ADDR_VAR 0 8
15546: PUSH
15547: LD_EXP 6
15551: PPUSH
15552: LD_INT 25
15554: PUSH
15555: LD_INT 1
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PPUSH
15562: CALL_OW 72
15566: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15567: LD_ADDR_VAR 0 1
15571: PUSH
15572: DOUBLE
15573: LD_INT 1
15575: DEC
15576: ST_TO_ADDR
15577: LD_INT 22
15579: PUSH
15580: LD_INT 4
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 30
15589: PUSH
15590: LD_INT 31
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 3
15599: PUSH
15600: LD_INT 57
15602: PUSH
15603: EMPTY
15604: LIST
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: PPUSH
15615: CALL_OW 69
15619: PUSH
15620: FOR_TO
15621: IFFALSE 15705
// begin if not sol [ i ] then
15623: LD_VAR 0 8
15627: PUSH
15628: LD_VAR 0 1
15632: ARRAY
15633: NOT
15634: IFFALSE 15638
// break ;
15636: GO 15705
// ComExitBuilding ( sol [ i ] ) ;
15638: LD_VAR 0 8
15642: PUSH
15643: LD_VAR 0 1
15647: ARRAY
15648: PPUSH
15649: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15653: LD_VAR 0 8
15657: PUSH
15658: LD_VAR 0 1
15662: ARRAY
15663: PPUSH
15664: LD_INT 22
15666: PUSH
15667: LD_INT 4
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 30
15676: PUSH
15677: LD_INT 31
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PPUSH
15688: CALL_OW 69
15692: PUSH
15693: LD_VAR 0 1
15697: ARRAY
15698: PPUSH
15699: CALL_OW 180
// end ;
15703: GO 15620
15705: POP
15706: POP
// if sol > 3 then
15707: LD_VAR 0 8
15711: PUSH
15712: LD_INT 3
15714: GREATER
15715: IFFALSE 15832
// begin ComExitBuilding ( sol [ 3 ] ) ;
15717: LD_VAR 0 8
15721: PUSH
15722: LD_INT 3
15724: ARRAY
15725: PPUSH
15726: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15730: LD_VAR 0 8
15734: PUSH
15735: LD_INT 3
15737: ARRAY
15738: PPUSH
15739: LD_INT 246
15741: PPUSH
15742: LD_INT 94
15744: PPUSH
15745: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15749: LD_VAR 0 8
15753: PUSH
15754: LD_INT 3
15756: ARRAY
15757: PPUSH
15758: LD_INT 175
15760: PPUSH
15761: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15765: LD_VAR 0 8
15769: PUSH
15770: LD_INT 3
15772: ARRAY
15773: PPUSH
15774: LD_INT 224
15776: PPUSH
15777: LD_INT 90
15779: PPUSH
15780: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15784: LD_VAR 0 8
15788: PUSH
15789: LD_INT 3
15791: ARRAY
15792: PPUSH
15793: LD_INT 245
15795: PPUSH
15796: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15800: LD_VAR 0 8
15804: PUSH
15805: LD_INT 3
15807: ARRAY
15808: PPUSH
15809: LD_INT 223
15811: PPUSH
15812: LD_INT 110
15814: PPUSH
15815: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15819: LD_VAR 0 8
15823: PUSH
15824: LD_INT 3
15826: ARRAY
15827: PPUSH
15828: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15832: LD_VAR 0 2
15836: PPUSH
15837: LD_VAR 0 4
15841: PPUSH
15842: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15846: LD_INT 22
15848: PUSH
15849: LD_INT 4
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 30
15858: PUSH
15859: LD_INT 4
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PPUSH
15870: CALL_OW 69
15874: PUSH
15875: LD_INT 1
15877: ARRAY
15878: PPUSH
15879: CALL_OW 313
15883: PUSH
15884: LD_INT 6
15886: LESS
15887: IFFALSE 15951
// begin if IsInUnit ( Cornel ) then
15889: LD_EXP 44
15893: PPUSH
15894: CALL_OW 310
15898: IFFALSE 15909
// ComExitBuilding ( Cornel ) ;
15900: LD_EXP 44
15904: PPUSH
15905: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15909: LD_EXP 44
15913: PPUSH
15914: LD_INT 22
15916: PUSH
15917: LD_INT 4
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 30
15926: PUSH
15927: LD_INT 4
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PPUSH
15938: CALL_OW 69
15942: PUSH
15943: LD_INT 1
15945: ARRAY
15946: PPUSH
15947: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15951: LD_INT 35
15953: PPUSH
15954: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15958: LD_ADDR_VAR 0 3
15962: PUSH
15963: LD_INT 22
15965: PUSH
15966: LD_INT 4
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 21
15975: PUSH
15976: LD_INT 3
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: LD_INT 3
15985: PUSH
15986: LD_INT 24
15988: PUSH
15989: LD_INT 1000
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: LIST
16004: PPUSH
16005: CALL_OW 69
16009: ST_TO_ADDR
// if filter and has_eng then
16010: LD_VAR 0 3
16014: PUSH
16015: LD_VAR 0 2
16019: AND
16020: IFFALSE 16086
// begin for i in has_eng do
16022: LD_ADDR_VAR 0 1
16026: PUSH
16027: LD_VAR 0 2
16031: PUSH
16032: FOR_IN
16033: IFFALSE 16082
// begin if IsInUnit ( i ) then
16035: LD_VAR 0 1
16039: PPUSH
16040: CALL_OW 310
16044: IFFALSE 16055
// ComExitBuilding ( i ) ;
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 122
// Wait ( 3 ) ;
16055: LD_INT 3
16057: PPUSH
16058: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
16062: LD_VAR 0 1
16066: PPUSH
16067: LD_VAR 0 3
16071: PUSH
16072: LD_INT 1
16074: ARRAY
16075: PPUSH
16076: CALL_OW 130
// end ;
16080: GO 16032
16082: POP
16083: POP
// end else
16084: GO 16140
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
16086: LD_VAR 0 2
16090: PUSH
16091: LD_VAR 0 2
16095: PPUSH
16096: LD_INT 56
16098: PUSH
16099: EMPTY
16100: LIST
16101: PPUSH
16102: CALL_OW 72
16106: AND
16107: IFFALSE 16140
// for i in has_eng do
16109: LD_ADDR_VAR 0 1
16113: PUSH
16114: LD_VAR 0 2
16118: PUSH
16119: FOR_IN
16120: IFFALSE 16138
// ComEnterUnit ( i , dep ) ;
16122: LD_VAR 0 1
16126: PPUSH
16127: LD_VAR 0 4
16131: PPUSH
16132: CALL_OW 120
16136: GO 16119
16138: POP
16139: POP
// until cornel_prepared ;
16140: LD_EXP 11
16144: IFFALSE 15951
// end ;
16146: PPOPN 8
16148: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
16149: LD_EXP 11
16153: IFFALSE 16589
16155: GO 16157
16157: DISABLE
16158: LD_INT 0
16160: PPUSH
16161: PPUSH
16162: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
16163: LD_ADDR_VAR 0 2
16167: PUSH
16168: LD_INT 22
16170: PUSH
16171: LD_INT 4
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 30
16180: PUSH
16181: LD_INT 4
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PPUSH
16192: CALL_OW 69
16196: PUSH
16197: LD_INT 1
16199: ARRAY
16200: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
16201: LD_EXP 6
16205: PPUSH
16206: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
16210: LD_EXP 45
16214: PUSH
16215: LD_EXP 45
16219: PPUSH
16220: CALL_OW 310
16224: AND
16225: IFFALSE 16236
// ComExitBuilding ( Bierezov ) ;
16227: LD_EXP 45
16231: PPUSH
16232: CALL_OW 122
// Wait ( 0 0$03 ) ;
16236: LD_INT 105
16238: PPUSH
16239: CALL_OW 67
// for i in cornel_units do
16243: LD_ADDR_VAR 0 1
16247: PUSH
16248: LD_EXP 6
16252: PUSH
16253: FOR_IN
16254: IFFALSE 16330
// begin if GetClass ( i ) in [ 2 , 3 ] then
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL_OW 257
16265: PUSH
16266: LD_INT 2
16268: PUSH
16269: LD_INT 3
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: IN
16276: IFFALSE 16313
// begin ComEnterUnit ( i , arm ) ;
16278: LD_VAR 0 1
16282: PPUSH
16283: LD_VAR 0 2
16287: PPUSH
16288: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
16292: LD_VAR 0 1
16296: PPUSH
16297: LD_INT 1
16299: PPUSH
16300: CALL_OW 183
// AddComExitBuilding ( i ) ;
16304: LD_VAR 0 1
16308: PPUSH
16309: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
16313: LD_VAR 0 1
16317: PPUSH
16318: LD_INT 257
16320: PPUSH
16321: LD_INT 121
16323: PPUSH
16324: CALL_OW 171
// end ;
16328: GO 16253
16330: POP
16331: POP
// Wait ( 1 1$00 ) ;
16332: LD_INT 2100
16334: PPUSH
16335: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
16339: LD_ADDR_VAR 0 3
16343: PUSH
16344: LD_EXP 44
16348: PUSH
16349: LD_EXP 45
16353: ADD
16354: PUSH
16355: LD_EXP 6
16359: ADD
16360: PUSH
16361: LD_EXP 6
16365: PPUSH
16366: LD_INT 21
16368: PUSH
16369: LD_INT 2
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PPUSH
16376: CALL_OW 72
16380: DIFF
16381: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
16382: LD_VAR 0 3
16386: PPUSH
16387: LD_INT 248
16389: PPUSH
16390: LD_INT 85
16392: PPUSH
16393: CALL_OW 111
// AddComHold ( filter ) ;
16397: LD_VAR 0 3
16401: PPUSH
16402: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
16406: LD_INT 35
16408: PPUSH
16409: CALL_OW 67
// until cornel_attack ;
16413: LD_EXP 9
16417: IFFALSE 16406
// ComAgressiveMove ( filter , 209 , 63 ) ;
16419: LD_VAR 0 3
16423: PPUSH
16424: LD_INT 209
16426: PPUSH
16427: LD_INT 63
16429: PPUSH
16430: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16434: LD_EXP 44
16438: PPUSH
16439: LD_INT 208
16441: PPUSH
16442: LD_INT 62
16444: PPUSH
16445: CALL_OW 114
// AddComHold ( Cornel ) ;
16449: LD_EXP 44
16453: PPUSH
16454: CALL_OW 200
// if Bierezov then
16458: LD_EXP 45
16462: IFFALSE 16552
// begin filter := filter diff Bierezov ;
16464: LD_ADDR_VAR 0 3
16468: PUSH
16469: LD_VAR 0 3
16473: PUSH
16474: LD_EXP 45
16478: DIFF
16479: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16480: LD_EXP 45
16484: PPUSH
16485: LD_INT 6
16487: PPUSH
16488: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16492: LD_EXP 45
16496: PPUSH
16497: LD_INT 235
16499: PPUSH
16500: LD_INT 60
16502: PPUSH
16503: CALL_OW 111
// AddComHold ( Bierezov ) ;
16507: LD_EXP 45
16511: PPUSH
16512: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16516: LD_EXP 45
16520: PPUSH
16521: LD_INT 350
16523: PPUSH
16524: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16528: LD_EXP 45
16532: PPUSH
16533: LD_INT 198
16535: PPUSH
16536: LD_INT 28
16538: PPUSH
16539: CALL_OW 171
// AddComHold ( Bierezov ) ;
16543: LD_EXP 45
16547: PPUSH
16548: CALL_OW 200
// end ; repeat wait ( 0 0$2 ) ;
16552: LD_INT 70
16554: PPUSH
16555: CALL_OW 67
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16559: LD_EXP 44
16563: PPUSH
16564: LD_INT 208
16566: PPUSH
16567: LD_INT 62
16569: PPUSH
16570: CALL_OW 114
// until not IsInArea ( Cornel , cornelKappaArea ) ;
16574: LD_EXP 44
16578: PPUSH
16579: LD_INT 16
16581: PPUSH
16582: CALL_OW 308
16586: NOT
16587: IFFALSE 16552
// end ; end_of_file
16589: PPOPN 3
16591: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16592: LD_EXP 53
16596: PUSH
16597: LD_EXP 31
16601: NOT
16602: AND
16603: PUSH
16604: LD_EXP 32
16608: NOT
16609: AND
16610: IFFALSE 17060
16612: GO 16614
16614: DISABLE
16615: LD_INT 0
16617: PPUSH
16618: PPUSH
16619: PPUSH
16620: PPUSH
// begin enable ;
16621: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16622: LD_ADDR_VAR 0 4
16626: PUSH
16627: LD_INT 81
16629: PUSH
16630: LD_INT 3
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PPUSH
16637: CALL_OW 69
16641: ST_TO_ADDR
// for i = 1 to ru_patrol do
16642: LD_ADDR_VAR 0 2
16646: PUSH
16647: DOUBLE
16648: LD_INT 1
16650: DEC
16651: ST_TO_ADDR
16652: LD_EXP 53
16656: PUSH
16657: FOR_TO
16658: IFFALSE 17058
// begin un := ru_patrol [ i ] ;
16660: LD_ADDR_VAR 0 1
16664: PUSH
16665: LD_EXP 53
16669: PUSH
16670: LD_VAR 0 2
16674: ARRAY
16675: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16676: LD_VAR 0 1
16680: PPUSH
16681: LD_INT 13
16683: PPUSH
16684: CALL_OW 308
16688: IFFALSE 16793
// begin if not ru_alert then
16690: LD_EXP 60
16694: NOT
16695: IFFALSE 16705
// ru_alert := true ;
16697: LD_ADDR_EXP 60
16701: PUSH
16702: LD_INT 1
16704: ST_TO_ADDR
// if not See ( 1 , un ) then
16705: LD_INT 1
16707: PPUSH
16708: LD_VAR 0 1
16712: PPUSH
16713: CALL_OW 292
16717: NOT
16718: IFFALSE 16732
// SetLives ( un , 1000 ) ;
16720: LD_VAR 0 1
16724: PPUSH
16725: LD_INT 1000
16727: PPUSH
16728: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16732: LD_ADDR_EXP 53
16736: PUSH
16737: LD_EXP 53
16741: PUSH
16742: LD_VAR 0 1
16746: DIFF
16747: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16748: LD_VAR 0 1
16752: PPUSH
16753: LD_INT 22
16755: PUSH
16756: LD_INT 3
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: LD_INT 30
16765: PUSH
16766: LD_INT 4
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PPUSH
16777: CALL_OW 69
16781: PPUSH
16782: CALL 1007 0 1
16786: PPUSH
16787: CALL_OW 120
// continue ;
16791: GO 16657
// end ; if IsOk ( un ) and not HasTask ( un ) then
16793: LD_VAR 0 1
16797: PPUSH
16798: CALL_OW 302
16802: PUSH
16803: LD_VAR 0 1
16807: PPUSH
16808: CALL_OW 314
16812: NOT
16813: AND
16814: IFFALSE 16907
// begin for j = 1 to ru_firepoints_south [ i ] do
16816: LD_ADDR_VAR 0 3
16820: PUSH
16821: DOUBLE
16822: LD_INT 1
16824: DEC
16825: ST_TO_ADDR
16826: LD_EXP 59
16830: PUSH
16831: LD_VAR 0 2
16835: ARRAY
16836: PUSH
16837: FOR_TO
16838: IFFALSE 16905
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16840: LD_VAR 0 1
16844: PPUSH
16845: LD_EXP 59
16849: PUSH
16850: LD_VAR 0 2
16854: ARRAY
16855: PUSH
16856: LD_VAR 0 3
16860: ARRAY
16861: PUSH
16862: LD_INT 1
16864: ARRAY
16865: PPUSH
16866: LD_EXP 59
16870: PUSH
16871: LD_VAR 0 2
16875: ARRAY
16876: PUSH
16877: LD_VAR 0 3
16881: ARRAY
16882: PUSH
16883: LD_INT 2
16885: ARRAY
16886: PPUSH
16887: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16891: LD_VAR 0 1
16895: PPUSH
16896: LD_INT 70
16898: PPUSH
16899: CALL_OW 202
// end ;
16903: GO 16837
16905: POP
16906: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16907: LD_VAR 0 1
16911: PPUSH
16912: CALL_OW 256
16916: PUSH
16917: LD_INT 700
16919: LESS
16920: PUSH
16921: LD_VAR 0 1
16925: PPUSH
16926: LD_INT 13
16928: PPUSH
16929: CALL_OW 308
16933: NOT
16934: AND
16935: IFFALSE 16987
// begin ComMoveToArea ( un , retreatArea ) ;
16937: LD_VAR 0 1
16941: PPUSH
16942: LD_INT 13
16944: PPUSH
16945: CALL_OW 113
// if not ru_alert_xy then
16949: LD_EXP 61
16953: NOT
16954: IFFALSE 16985
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16956: LD_ADDR_EXP 61
16960: PUSH
16961: LD_VAR 0 1
16965: PPUSH
16966: CALL_OW 250
16970: PUSH
16971: LD_VAR 0 1
16975: PPUSH
16976: CALL_OW 251
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: ST_TO_ADDR
// end else
16985: GO 17056
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16987: LD_VAR 0 1
16991: PPUSH
16992: LD_VAR 0 4
16996: PPUSH
16997: LD_VAR 0 1
17001: PPUSH
17002: CALL_OW 74
17006: PPUSH
17007: CALL_OW 296
17011: PUSH
17012: LD_INT 9
17014: LESS
17015: PUSH
17016: LD_VAR 0 1
17020: PPUSH
17021: CALL_OW 256
17025: PUSH
17026: LD_INT 500
17028: GREATER
17029: AND
17030: IFFALSE 17056
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17032: LD_VAR 0 1
17036: PPUSH
17037: LD_VAR 0 4
17041: PPUSH
17042: LD_VAR 0 1
17046: PPUSH
17047: CALL_OW 74
17051: PPUSH
17052: CALL_OW 115
// end ;
17056: GO 16657
17058: POP
17059: POP
// end ;
17060: PPOPN 4
17062: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
17063: LD_EXP 60
17067: PUSH
17068: LD_EXP 61
17072: AND
17073: PUSH
17074: LD_EXP 31
17078: NOT
17079: AND
17080: PUSH
17081: LD_EXP 32
17085: NOT
17086: AND
17087: IFFALSE 17297
17089: GO 17091
17091: DISABLE
17092: LD_INT 0
17094: PPUSH
17095: PPUSH
// begin enable ;
17096: ENABLE
// if not ru_vehicles then
17097: LD_EXP 56
17101: NOT
17102: IFFALSE 17106
// exit ;
17104: GO 17297
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17106: LD_ADDR_VAR 0 2
17110: PUSH
17111: LD_INT 81
17113: PUSH
17114: LD_INT 3
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PPUSH
17121: CALL_OW 69
17125: ST_TO_ADDR
// if ru_vehicles then
17126: LD_EXP 56
17130: IFFALSE 17297
// begin for i in ru_vehicles do
17132: LD_ADDR_VAR 0 1
17136: PUSH
17137: LD_EXP 56
17141: PUSH
17142: FOR_IN
17143: IFFALSE 17295
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
17145: LD_VAR 0 1
17149: PPUSH
17150: CALL_OW 302
17154: PUSH
17155: LD_VAR 0 1
17159: PPUSH
17160: LD_VAR 0 2
17164: PPUSH
17165: LD_VAR 0 1
17169: PPUSH
17170: CALL_OW 74
17174: PPUSH
17175: CALL_OW 296
17179: PUSH
17180: LD_INT 9
17182: LESS
17183: AND
17184: IFFALSE 17210
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17186: LD_VAR 0 1
17190: PPUSH
17191: LD_VAR 0 2
17195: PPUSH
17196: LD_VAR 0 1
17200: PPUSH
17201: CALL_OW 74
17205: PPUSH
17206: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
17210: LD_VAR 0 1
17214: PPUSH
17215: CALL_OW 314
17219: NOT
17220: PUSH
17221: LD_VAR 0 1
17225: PPUSH
17226: CALL_OW 302
17230: AND
17231: PUSH
17232: LD_VAR 0 1
17236: PPUSH
17237: LD_EXP 61
17241: PUSH
17242: LD_INT 1
17244: ARRAY
17245: PPUSH
17246: LD_EXP 61
17250: PUSH
17251: LD_INT 2
17253: ARRAY
17254: PPUSH
17255: CALL_OW 297
17259: PUSH
17260: LD_INT 10
17262: GREATER
17263: AND
17264: IFFALSE 17293
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
17266: LD_VAR 0 1
17270: PPUSH
17271: LD_EXP 61
17275: PUSH
17276: LD_INT 1
17278: ARRAY
17279: PPUSH
17280: LD_EXP 61
17284: PUSH
17285: LD_INT 2
17287: ARRAY
17288: PPUSH
17289: CALL_OW 114
// end ;
17293: GO 17142
17295: POP
17296: POP
// end ; end ;
17297: PPOPN 2
17299: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
17300: LD_EXP 61
17304: PUSH
17305: LD_EXP 60
17309: AND
17310: PUSH
17311: LD_INT 3
17313: PPUSH
17314: CALL_OW 463
17318: NOT
17319: AND
17320: PUSH
17321: LD_EXP 31
17325: NOT
17326: AND
17327: PUSH
17328: LD_EXP 32
17332: NOT
17333: AND
17334: IFFALSE 17429
17336: GO 17338
17338: DISABLE
17339: LD_INT 0
17341: PPUSH
// begin enable ;
17342: ENABLE
// ru_alert_xy := false ;
17343: LD_ADDR_EXP 61
17347: PUSH
17348: LD_INT 0
17350: ST_TO_ADDR
// ru_alert := false ;
17351: LD_ADDR_EXP 60
17355: PUSH
17356: LD_INT 0
17358: ST_TO_ADDR
// if ru_vehicles then
17359: LD_EXP 56
17363: IFFALSE 17429
// for i in ru_vehicles do
17365: LD_ADDR_VAR 0 1
17369: PUSH
17370: LD_EXP 56
17374: PUSH
17375: FOR_IN
17376: IFFALSE 17427
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
17378: LD_VAR 0 1
17382: PPUSH
17383: CALL_OW 302
17387: PUSH
17388: LD_VAR 0 1
17392: PPUSH
17393: LD_INT 89
17395: PPUSH
17396: LD_INT 36
17398: PPUSH
17399: CALL_OW 297
17403: PUSH
17404: LD_INT 10
17406: GREATER
17407: AND
17408: IFFALSE 17425
// ComMoveXY ( i , 89 , 36 ) ;
17410: LD_VAR 0 1
17414: PPUSH
17415: LD_INT 89
17417: PPUSH
17418: LD_INT 36
17420: PPUSH
17421: CALL_OW 111
17425: GO 17375
17427: POP
17428: POP
// end ;
17429: PPOPN 1
17431: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
17432: LD_EXP 55
17436: PUSH
17437: LD_EXP 31
17441: NOT
17442: AND
17443: PUSH
17444: LD_EXP 32
17448: NOT
17449: AND
17450: IFFALSE 17734
17452: GO 17454
17454: DISABLE
17455: LD_INT 0
17457: PPUSH
17458: PPUSH
17459: PPUSH
// begin enable ;
17460: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17461: LD_ADDR_VAR 0 3
17465: PUSH
17466: LD_INT 81
17468: PUSH
17469: LD_INT 3
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PPUSH
17476: CALL_OW 69
17480: ST_TO_ADDR
// for i = 1 to ru_forest do
17481: LD_ADDR_VAR 0 1
17485: PUSH
17486: DOUBLE
17487: LD_INT 1
17489: DEC
17490: ST_TO_ADDR
17491: LD_EXP 55
17495: PUSH
17496: FOR_TO
17497: IFFALSE 17732
// begin un := ru_forest [ i ] ;
17499: LD_ADDR_VAR 0 2
17503: PUSH
17504: LD_EXP 55
17508: PUSH
17509: LD_VAR 0 1
17513: ARRAY
17514: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17515: LD_VAR 0 2
17519: PPUSH
17520: LD_INT 13
17522: PPUSH
17523: CALL_OW 308
17527: IFFALSE 17617
// begin if not See ( 1 , un ) then
17529: LD_INT 1
17531: PPUSH
17532: LD_VAR 0 2
17536: PPUSH
17537: CALL_OW 292
17541: NOT
17542: IFFALSE 17556
// SetLives ( un , 1000 ) ;
17544: LD_VAR 0 2
17548: PPUSH
17549: LD_INT 1000
17551: PPUSH
17552: CALL_OW 234
// ru_forest := ru_forest diff un ;
17556: LD_ADDR_EXP 55
17560: PUSH
17561: LD_EXP 55
17565: PUSH
17566: LD_VAR 0 2
17570: DIFF
17571: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17572: LD_VAR 0 2
17576: PPUSH
17577: LD_INT 22
17579: PUSH
17580: LD_INT 3
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 30
17589: PUSH
17590: LD_INT 4
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PPUSH
17601: CALL_OW 69
17605: PPUSH
17606: CALL 1007 0 1
17610: PPUSH
17611: CALL_OW 120
// continue ;
17615: GO 17496
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17617: LD_VAR 0 2
17621: PPUSH
17622: CALL_OW 256
17626: PUSH
17627: LD_INT 700
17629: LESS
17630: PUSH
17631: LD_VAR 0 2
17635: PPUSH
17636: LD_INT 13
17638: PPUSH
17639: CALL_OW 308
17643: NOT
17644: AND
17645: IFFALSE 17661
// ComMoveToArea ( un , retreatArea ) else
17647: LD_VAR 0 2
17651: PPUSH
17652: LD_INT 13
17654: PPUSH
17655: CALL_OW 113
17659: GO 17730
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17661: LD_VAR 0 2
17665: PPUSH
17666: LD_VAR 0 3
17670: PPUSH
17671: LD_VAR 0 2
17675: PPUSH
17676: CALL_OW 74
17680: PPUSH
17681: CALL_OW 296
17685: PUSH
17686: LD_INT 9
17688: LESS
17689: PUSH
17690: LD_VAR 0 2
17694: PPUSH
17695: CALL_OW 256
17699: PUSH
17700: LD_INT 500
17702: GREATER
17703: AND
17704: IFFALSE 17730
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17706: LD_VAR 0 2
17710: PPUSH
17711: LD_VAR 0 3
17715: PPUSH
17716: LD_VAR 0 2
17720: PPUSH
17721: CALL_OW 74
17725: PPUSH
17726: CALL_OW 115
// end ;
17730: GO 17496
17732: POP
17733: POP
// end ;
17734: PPOPN 3
17736: END
// every 0 0$10 trigger not send_attack_on_cornel or IsDead ( Cornel ) do var i , filter ;
17737: LD_EXP 32
17741: NOT
17742: PUSH
17743: LD_EXP 44
17747: PPUSH
17748: CALL_OW 301
17752: OR
17753: IFFALSE 17914
17755: GO 17757
17757: DISABLE
17758: LD_INT 0
17760: PPUSH
17761: PPUSH
// begin enable ;
17762: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_inarea , ignoreBuildingsArea ] ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 990 ] ] ] ) ;
17763: LD_ADDR_VAR 0 2
17767: PUSH
17768: LD_INT 22
17770: PUSH
17771: LD_INT 3
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 3
17780: PUSH
17781: LD_INT 95
17783: PUSH
17784: LD_INT 18
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: LD_INT 21
17797: PUSH
17798: LD_INT 3
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 3
17807: PUSH
17808: LD_INT 24
17810: PUSH
17811: LD_INT 990
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: PPUSH
17828: CALL_OW 69
17832: ST_TO_ADDR
// if filter then
17833: LD_VAR 0 2
17837: IFFALSE 17914
// for i in filter do
17839: LD_ADDR_VAR 0 1
17843: PUSH
17844: LD_VAR 0 2
17848: PUSH
17849: FOR_IN
17850: IFFALSE 17912
// if GetY ( i ) > 70 then
17852: LD_VAR 0 1
17856: PPUSH
17857: CALL_OW 251
17861: PUSH
17862: LD_INT 70
17864: GREATER
17865: IFFALSE 17871
// continue else
17867: GO 17849
17869: GO 17910
// begin ru_alert := true ;
17871: LD_ADDR_EXP 60
17875: PUSH
17876: LD_INT 1
17878: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17879: LD_ADDR_EXP 61
17883: PUSH
17884: LD_VAR 0 1
17888: PPUSH
17889: CALL_OW 250
17893: PUSH
17894: LD_VAR 0 1
17898: PPUSH
17899: CALL_OW 251
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: ST_TO_ADDR
// break ;
17908: GO 17912
// end ;
17910: GO 17849
17912: POP
17913: POP
// end ;
17914: PPOPN 2
17916: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17917: LD_EXP 31
17921: IFFALSE 18070
17923: GO 17925
17925: DISABLE
17926: LD_INT 0
17928: PPUSH
17929: PPUSH
17930: PPUSH
17931: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17932: LD_ADDR_VAR 0 4
17936: PUSH
17937: LD_EXP 56
17941: PUSH
17942: LD_EXP 55
17946: ADD
17947: PUSH
17948: LD_EXP 53
17952: ADD
17953: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17954: LD_ADDR_VAR 0 3
17958: PUSH
17959: LD_INT 3
17961: PPUSH
17962: LD_INT 81
17964: PUSH
17965: LD_INT 3
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PPUSH
17972: CALL_OW 70
17976: ST_TO_ADDR
// if filter and enemy then
17977: LD_VAR 0 4
17981: PUSH
17982: LD_VAR 0 3
17986: AND
17987: IFFALSE 18070
// repeat wait ( 0 0$01 ) ;
17989: LD_INT 35
17991: PPUSH
17992: CALL_OW 67
// for i in filter do
17996: LD_ADDR_VAR 0 1
18000: PUSH
18001: LD_VAR 0 4
18005: PUSH
18006: FOR_IN
18007: IFFALSE 18035
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
18009: LD_VAR 0 1
18013: PPUSH
18014: LD_VAR 0 3
18018: PPUSH
18019: LD_VAR 0 1
18023: PPUSH
18024: CALL_OW 74
18028: PPUSH
18029: CALL_OW 115
// end ;
18033: GO 18006
18035: POP
18036: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
18037: LD_INT 3
18039: PPUSH
18040: LD_INT 81
18042: PUSH
18043: LD_INT 3
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PPUSH
18050: CALL_OW 70
18054: PUSH
18055: LD_INT 0
18057: EQUAL
18058: PUSH
18059: LD_VAR 0 4
18063: PUSH
18064: LD_INT 0
18066: EQUAL
18067: OR
18068: IFFALSE 17989
// end ;
18070: PPOPN 4
18072: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
18073: LD_EXP 26
18077: PUSH
18078: LD_INT 22
18080: PUSH
18081: LD_INT 4
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 30
18090: PUSH
18091: LD_INT 4
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 3
18100: PUSH
18101: LD_INT 57
18103: PUSH
18104: EMPTY
18105: LIST
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: LIST
18115: PPUSH
18116: CALL_OW 69
18120: AND
18121: IFFALSE 18170
18123: GO 18125
18125: DISABLE
18126: LD_INT 0
18128: PPUSH
// begin if not ru_cornel_attack then
18129: LD_EXP 58
18133: NOT
18134: IFFALSE 18138
// exit ;
18136: GO 18170
// for i in ru_cornel_attack do
18138: LD_ADDR_VAR 0 1
18142: PUSH
18143: LD_EXP 58
18147: PUSH
18148: FOR_IN
18149: IFFALSE 18168
// ComAgressiveMove ( i , 258 , 119 ) ;
18151: LD_VAR 0 1
18155: PPUSH
18156: LD_INT 258
18158: PPUSH
18159: LD_INT 119
18161: PPUSH
18162: CALL_OW 114
18166: GO 18148
18168: POP
18169: POP
// end ; end_of_file
18170: PPOPN 1
18172: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
18173: LD_EXP 5
18177: PUSH
18178: LD_EXP 9
18182: NOT
18183: AND
18184: PUSH
18185: LD_EXP 20
18189: AND
18190: IFFALSE 18302
18192: GO 18194
18194: DISABLE
18195: LD_INT 0
18197: PPUSH
// begin enable ;
18198: ENABLE
// crates_counter := crates_counter - 50 ;
18199: LD_ADDR_EXP 20
18203: PUSH
18204: LD_EXP 20
18208: PUSH
18209: LD_INT 50
18211: MINUS
18212: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
18213: LD_INT 8
18215: PPUSH
18216: LD_INT 2
18218: PPUSH
18219: LD_INT 5
18221: PPUSH
18222: CALL_OW 12
18226: PPUSH
18227: LD_INT 1
18229: PPUSH
18230: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
18234: LD_INT 1785
18236: PPUSH
18237: LD_INT 2345
18239: PPUSH
18240: CALL_OW 12
18244: PPUSH
18245: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
18249: LD_ADDR_VAR 0 1
18253: PUSH
18254: LD_INT 1
18256: PPUSH
18257: LD_OWVAR 67
18261: PUSH
18262: LD_INT 2
18264: PLUS
18265: PPUSH
18266: CALL_OW 12
18270: ST_TO_ADDR
// if r < 3 then
18271: LD_VAR 0 1
18275: PUSH
18276: LD_INT 3
18278: LESS
18279: IFFALSE 18302
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
18281: LD_INT 4
18283: PPUSH
18284: LD_INT 1
18286: PPUSH
18287: LD_INT 5
18289: PPUSH
18290: CALL_OW 12
18294: PPUSH
18295: LD_INT 1
18297: PPUSH
18298: CALL_OW 55
// end ;
18302: PPOPN 1
18304: END
// every 0 0$01 trigger cornel_active do
18305: LD_EXP 8
18309: IFFALSE 18398
18311: GO 18313
18313: DISABLE
// begin Wait ( 0 0$03 ) ;
18314: LD_INT 105
18316: PPUSH
18317: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18321: LD_INT 2
18323: PPUSH
18324: LD_INT 5
18326: PPUSH
18327: CALL_OW 12
18331: PPUSH
18332: LD_INT 10
18334: PPUSH
18335: LD_INT 1
18337: PPUSH
18338: CALL_OW 55
// Wait ( 0 0$13 ) ;
18342: LD_INT 455
18344: PPUSH
18345: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18349: LD_INT 2
18351: PPUSH
18352: LD_INT 5
18354: PPUSH
18355: CALL_OW 12
18359: PPUSH
18360: LD_INT 10
18362: PPUSH
18363: LD_INT 1
18365: PPUSH
18366: CALL_OW 55
// Wait ( 0 0$16 ) ;
18370: LD_INT 560
18372: PPUSH
18373: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18377: LD_INT 2
18379: PPUSH
18380: LD_INT 5
18382: PPUSH
18383: CALL_OW 12
18387: PPUSH
18388: LD_INT 10
18390: PPUSH
18391: LD_INT 1
18393: PPUSH
18394: CALL_OW 55
// end ; end_of_file
18398: END
// every 0 0$01 trigger cornel_prepared do
18399: LD_EXP 11
18403: IFFALSE 18462
18405: GO 18407
18407: DISABLE
// begin enable ;
18408: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
18409: LD_ADDR_OWVAR 47
18413: PUSH
18414: LD_STRING #Am03-1
18416: PUSH
18417: LD_EXP 10
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
18426: LD_ADDR_EXP 10
18430: PUSH
18431: LD_EXP 10
18435: PPUSH
18436: LD_STRING -
18438: PPUSH
18439: CALL 1077 0 2
18443: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
18444: LD_EXP 10
18448: PUSH
18449: LD_INT 0
18451: EQUAL
18452: IFFALSE 18462
// begin Display_Strings := [ ] ;
18454: LD_ADDR_OWVAR 47
18458: PUSH
18459: EMPTY
18460: ST_TO_ADDR
// disable ;
18461: DISABLE
// end ; end ;
18462: END
// every 0 0$01 trigger debug and debug_strings do
18463: LD_EXP 1
18467: PUSH
18468: LD_OWVAR 48
18472: AND
18473: IFFALSE 18489
18475: GO 18477
18477: DISABLE
// begin enable ;
18478: ENABLE
// Display_Strings := debug_strings ;
18479: LD_ADDR_OWVAR 47
18483: PUSH
18484: LD_OWVAR 48
18488: ST_TO_ADDR
// end ; end_of_file
18489: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
18490: LD_VAR 0 1
18494: PPUSH
18495: LD_VAR 0 2
18499: PPUSH
18500: CALL 35090 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 255
18513: PUSH
18514: LD_INT 1
18516: EQUAL
18517: PUSH
18518: LD_EXP 14
18522: NOT
18523: AND
18524: IFFALSE 18534
// solar_builded := true ;
18526: LD_ADDR_EXP 14
18530: PUSH
18531: LD_INT 1
18533: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18534: LD_VAR 0 1
18538: PPUSH
18539: CALL_OW 255
18543: PUSH
18544: LD_INT 1
18546: EQUAL
18547: PUSH
18548: LD_EXP 29
18552: AND
18553: IFFALSE 18590
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18555: LD_ADDR_EXP 29
18559: PUSH
18560: LD_EXP 29
18564: PUSH
18565: LD_INT 1750
18567: PUSH
18568: LD_INT 1400
18570: PUSH
18571: LD_INT 1225
18573: PUSH
18574: LD_INT 1050
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: PUSH
18583: LD_OWVAR 67
18587: ARRAY
18588: PLUS
18589: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18590: LD_VAR 0 1
18594: PPUSH
18595: CALL_OW 255
18599: PUSH
18600: LD_INT 3
18602: EQUAL
18603: IFFALSE 18621
// ru_vehicles := ru_vehicles ^ veh ;
18605: LD_ADDR_EXP 56
18609: PUSH
18610: LD_EXP 56
18614: PUSH
18615: LD_VAR 0 1
18619: ADD
18620: ST_TO_ADDR
// end ;
18621: PPOPN 2
18623: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL 34970 0 1
// if un in ru_patrol then
18633: LD_VAR 0 1
18637: PUSH
18638: LD_EXP 53
18642: IN
18643: IFFALSE 18661
// ru_patrol := ru_patrol diff un ;
18645: LD_ADDR_EXP 53
18649: PUSH
18650: LD_EXP 53
18654: PUSH
18655: LD_VAR 0 1
18659: DIFF
18660: ST_TO_ADDR
// if un in ru_forest then
18661: LD_VAR 0 1
18665: PUSH
18666: LD_EXP 55
18670: IN
18671: IFFALSE 18689
// ru_forest := ru_forest diff un ;
18673: LD_ADDR_EXP 55
18677: PUSH
18678: LD_EXP 55
18682: PUSH
18683: LD_VAR 0 1
18687: DIFF
18688: ST_TO_ADDR
// if un in ru_vehicles then
18689: LD_VAR 0 1
18693: PUSH
18694: LD_EXP 56
18698: IN
18699: IFFALSE 18805
// begin ru_vehicles := ru_vehicles diff un ;
18701: LD_ADDR_EXP 56
18705: PUSH
18706: LD_EXP 56
18710: PUSH
18711: LD_VAR 0 1
18715: DIFF
18716: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18717: LD_ADDR_EXP 57
18721: PUSH
18722: LD_EXP 57
18726: PUSH
18727: LD_VAR 0 1
18731: PPUSH
18732: CALL_OW 265
18736: PUSH
18737: LD_VAR 0 1
18741: PPUSH
18742: CALL_OW 262
18746: PUSH
18747: LD_VAR 0 1
18751: PPUSH
18752: CALL_OW 263
18756: PUSH
18757: LD_VAR 0 1
18761: PPUSH
18762: CALL_OW 264
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: ADD
18773: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18774: LD_ADDR_EXP 13
18778: PUSH
18779: LD_EXP 13
18783: PUSH
18784: LD_INT 1
18786: PLUS
18787: ST_TO_ADDR
// if ach_counter = 10 then
18788: LD_EXP 13
18792: PUSH
18793: LD_INT 10
18795: EQUAL
18796: IFFALSE 18805
// SetAchievement ( ACH_FAUST ) ;
18798: LD_STRING ACH_FAUST
18800: PPUSH
18801: CALL_OW 543
// end ; if un = Pokryshkin then
18805: LD_VAR 0 1
18809: PUSH
18810: LD_EXP 52
18814: EQUAL
18815: IFFALSE 18824
// SetAchievement ( ACH_POKR ) ;
18817: LD_STRING ACH_POKR
18819: PPUSH
18820: CALL_OW 543
// if un = JMM then
18824: LD_VAR 0 1
18828: PUSH
18829: LD_EXP 37
18833: EQUAL
18834: IFFALSE 18843
// YouLost ( 0 ) ;
18836: LD_STRING 0
18838: PPUSH
18839: CALL_OW 104
// if un = us_dep_west then
18843: LD_VAR 0 1
18847: PUSH
18848: LD_INT 1
18850: EQUAL
18851: IFFALSE 18860
// YouLost ( 2 ) ;
18853: LD_STRING 2
18855: PPUSH
18856: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18860: LD_VAR 0 1
18864: PPUSH
18865: CALL_OW 255
18869: PUSH
18870: LD_INT 8
18872: EQUAL
18873: PUSH
18874: LD_EXP 5
18878: NOT
18879: AND
18880: IFFALSE 18889
// YouLost ( 4 ) ;
18882: LD_STRING 4
18884: PPUSH
18885: CALL_OW 104
// if un in jmm_units then
18889: LD_VAR 0 1
18893: PUSH
18894: LD_EXP 4
18898: IN
18899: IFFALSE 18915
// lose_counter := lose_counter + 1 ;
18901: LD_ADDR_EXP 34
18905: PUSH
18906: LD_EXP 34
18910: PUSH
18911: LD_INT 1
18913: PLUS
18914: ST_TO_ADDR
// end ;
18915: PPOPN 1
18917: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18918: LD_INT 0
18920: PPUSH
18921: PPUSH
// begin if GetSide ( driver ) = 3 then
18922: LD_VAR 0 1
18926: PPUSH
18927: CALL_OW 255
18931: PUSH
18932: LD_INT 3
18934: EQUAL
18935: IFFALSE 19013
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18937: LD_ADDR_VAR 0 6
18941: PUSH
18942: LD_INT 22
18944: PUSH
18945: LD_INT 3
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 30
18954: PUSH
18955: LD_INT 3
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PPUSH
18966: CALL_OW 69
18970: PPUSH
18971: CALL 1007 0 1
18975: ST_TO_ADDR
// if place then
18976: LD_VAR 0 6
18980: IFFALSE 18998
// ComEnterUnit ( driver , place ) else
18982: LD_VAR 0 1
18986: PPUSH
18987: LD_VAR 0 6
18991: PPUSH
18992: CALL_OW 120
18996: GO 19013
// ComMoveXY ( driver , 70 , 22 ) ;
18998: LD_VAR 0 1
19002: PPUSH
19003: LD_INT 70
19005: PPUSH
19006: LD_INT 22
19008: PPUSH
19009: CALL_OW 111
// end ; end ;
19013: PPOPN 6
19015: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
19016: LD_VAR 0 1
19020: PUSH
19021: LD_INT 1
19023: EQUAL
19024: PUSH
19025: LD_VAR 0 2
19029: PUSH
19030: LD_INT 4
19032: EQUAL
19033: PUSH
19034: LD_VAR 0 2
19038: PUSH
19039: LD_INT 8
19041: EQUAL
19042: PUSH
19043: LD_EXP 5
19047: NOT
19048: AND
19049: OR
19050: AND
19051: IFFALSE 19060
// YouLost ( 5 ) ;
19053: LD_STRING 5
19055: PPUSH
19056: CALL_OW 104
// end ;
19060: PPOPN 2
19062: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
19063: LD_EXP 36
19067: PUSH
19068: LD_INT 22
19070: PUSH
19071: LD_INT 1
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: LD_INT 21
19080: PUSH
19081: LD_INT 1
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PPUSH
19092: CALL_OW 69
19096: PUSH
19097: LD_INT 22
19099: PUSH
19100: LD_INT 8
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 21
19109: PUSH
19110: LD_INT 1
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PPUSH
19121: CALL_OW 69
19125: ADD
19126: PLUS
19127: PUSH
19128: LD_INT 5
19130: LESS
19131: IFFALSE 19143
19133: GO 19135
19135: DISABLE
// YouLost ( 1 ) ;
19136: LD_STRING 1
19138: PPUSH
19139: CALL_OW 104
19143: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
19144: LD_INT 1
19146: PPUSH
19147: CALL_OW 255
19151: PUSH
19152: LD_INT 3
19154: EQUAL
19155: IFFALSE 19167
19157: GO 19159
19159: DISABLE
// YouLost ( 3 ) ; end_of_file end_of_file
19160: LD_STRING 3
19162: PPUSH
19163: CALL_OW 104
19167: END
// export globalGameSaveCounter ; every 0 0$1 do
19168: GO 19170
19170: DISABLE
// begin enable ;
19171: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19172: LD_STRING updateTimer(
19174: PUSH
19175: LD_OWVAR 1
19179: STR
19180: PUSH
19181: LD_STRING );
19183: STR
19184: PPUSH
19185: CALL_OW 559
// end ;
19189: END
// every 0 0$1 do
19190: GO 19192
19192: DISABLE
// begin globalGameSaveCounter := 0 ;
19193: LD_ADDR_EXP 62
19197: PUSH
19198: LD_INT 0
19200: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19201: LD_STRING setGameSaveCounter(0)
19203: PPUSH
19204: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19208: LD_STRING initStreamRollete();
19210: PPUSH
19211: CALL_OW 559
// InitStreamMode ;
19215: CALL 20541 0 0
// DefineStreamItems ( false ) ;
19219: LD_INT 0
19221: PPUSH
19222: CALL 21005 0 1
// end ;
19226: END
// export function SOS_MapStart ( ) ; begin
19227: LD_INT 0
19229: PPUSH
// if streamModeActive then
19230: LD_EXP 63
19234: IFFALSE 19243
// DefineStreamItems ( true ) ;
19236: LD_INT 1
19238: PPUSH
19239: CALL 21005 0 1
// UpdateLuaVariables ( ) ;
19243: CALL 19260 0 0
// UpdateFactoryWaypoints ( ) ;
19247: CALL 33874 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19251: CALL 34131 0 0
// end ;
19255: LD_VAR 0 1
19259: RET
// function UpdateLuaVariables ( ) ; begin
19260: LD_INT 0
19262: PPUSH
// if globalGameSaveCounter then
19263: LD_EXP 62
19267: IFFALSE 19301
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19269: LD_ADDR_EXP 62
19273: PUSH
19274: LD_EXP 62
19278: PPUSH
19279: CALL 78761 0 1
19283: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19284: LD_STRING setGameSaveCounter(
19286: PUSH
19287: LD_EXP 62
19291: STR
19292: PUSH
19293: LD_STRING )
19295: STR
19296: PPUSH
19297: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19301: LD_STRING setGameDifficulty(
19303: PUSH
19304: LD_OWVAR 67
19308: STR
19309: PUSH
19310: LD_STRING )
19312: STR
19313: PPUSH
19314: CALL_OW 559
// end ;
19318: LD_VAR 0 1
19322: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19323: LD_INT 0
19325: PPUSH
// if p2 = stream_mode then
19326: LD_VAR 0 2
19330: PUSH
19331: LD_INT 100
19333: EQUAL
19334: IFFALSE 20337
// begin if not StreamModeActive then
19336: LD_EXP 63
19340: NOT
19341: IFFALSE 19351
// StreamModeActive := true ;
19343: LD_ADDR_EXP 63
19347: PUSH
19348: LD_INT 1
19350: ST_TO_ADDR
// if p3 = 0 then
19351: LD_VAR 0 3
19355: PUSH
19356: LD_INT 0
19358: EQUAL
19359: IFFALSE 19365
// InitStreamMode ;
19361: CALL 20541 0 0
// if p3 = 1 then
19365: LD_VAR 0 3
19369: PUSH
19370: LD_INT 1
19372: EQUAL
19373: IFFALSE 19383
// sRocket := true ;
19375: LD_ADDR_EXP 68
19379: PUSH
19380: LD_INT 1
19382: ST_TO_ADDR
// if p3 = 2 then
19383: LD_VAR 0 3
19387: PUSH
19388: LD_INT 2
19390: EQUAL
19391: IFFALSE 19401
// sSpeed := true ;
19393: LD_ADDR_EXP 67
19397: PUSH
19398: LD_INT 1
19400: ST_TO_ADDR
// if p3 = 3 then
19401: LD_VAR 0 3
19405: PUSH
19406: LD_INT 3
19408: EQUAL
19409: IFFALSE 19419
// sEngine := true ;
19411: LD_ADDR_EXP 69
19415: PUSH
19416: LD_INT 1
19418: ST_TO_ADDR
// if p3 = 4 then
19419: LD_VAR 0 3
19423: PUSH
19424: LD_INT 4
19426: EQUAL
19427: IFFALSE 19437
// sSpec := true ;
19429: LD_ADDR_EXP 66
19433: PUSH
19434: LD_INT 1
19436: ST_TO_ADDR
// if p3 = 5 then
19437: LD_VAR 0 3
19441: PUSH
19442: LD_INT 5
19444: EQUAL
19445: IFFALSE 19455
// sLevel := true ;
19447: LD_ADDR_EXP 70
19451: PUSH
19452: LD_INT 1
19454: ST_TO_ADDR
// if p3 = 6 then
19455: LD_VAR 0 3
19459: PUSH
19460: LD_INT 6
19462: EQUAL
19463: IFFALSE 19473
// sArmoury := true ;
19465: LD_ADDR_EXP 71
19469: PUSH
19470: LD_INT 1
19472: ST_TO_ADDR
// if p3 = 7 then
19473: LD_VAR 0 3
19477: PUSH
19478: LD_INT 7
19480: EQUAL
19481: IFFALSE 19491
// sRadar := true ;
19483: LD_ADDR_EXP 72
19487: PUSH
19488: LD_INT 1
19490: ST_TO_ADDR
// if p3 = 8 then
19491: LD_VAR 0 3
19495: PUSH
19496: LD_INT 8
19498: EQUAL
19499: IFFALSE 19509
// sBunker := true ;
19501: LD_ADDR_EXP 73
19505: PUSH
19506: LD_INT 1
19508: ST_TO_ADDR
// if p3 = 9 then
19509: LD_VAR 0 3
19513: PUSH
19514: LD_INT 9
19516: EQUAL
19517: IFFALSE 19527
// sHack := true ;
19519: LD_ADDR_EXP 74
19523: PUSH
19524: LD_INT 1
19526: ST_TO_ADDR
// if p3 = 10 then
19527: LD_VAR 0 3
19531: PUSH
19532: LD_INT 10
19534: EQUAL
19535: IFFALSE 19545
// sFire := true ;
19537: LD_ADDR_EXP 75
19541: PUSH
19542: LD_INT 1
19544: ST_TO_ADDR
// if p3 = 11 then
19545: LD_VAR 0 3
19549: PUSH
19550: LD_INT 11
19552: EQUAL
19553: IFFALSE 19563
// sRefresh := true ;
19555: LD_ADDR_EXP 76
19559: PUSH
19560: LD_INT 1
19562: ST_TO_ADDR
// if p3 = 12 then
19563: LD_VAR 0 3
19567: PUSH
19568: LD_INT 12
19570: EQUAL
19571: IFFALSE 19581
// sExp := true ;
19573: LD_ADDR_EXP 77
19577: PUSH
19578: LD_INT 1
19580: ST_TO_ADDR
// if p3 = 13 then
19581: LD_VAR 0 3
19585: PUSH
19586: LD_INT 13
19588: EQUAL
19589: IFFALSE 19599
// sDepot := true ;
19591: LD_ADDR_EXP 78
19595: PUSH
19596: LD_INT 1
19598: ST_TO_ADDR
// if p3 = 14 then
19599: LD_VAR 0 3
19603: PUSH
19604: LD_INT 14
19606: EQUAL
19607: IFFALSE 19617
// sFlag := true ;
19609: LD_ADDR_EXP 79
19613: PUSH
19614: LD_INT 1
19616: ST_TO_ADDR
// if p3 = 15 then
19617: LD_VAR 0 3
19621: PUSH
19622: LD_INT 15
19624: EQUAL
19625: IFFALSE 19635
// sKamikadze := true ;
19627: LD_ADDR_EXP 87
19631: PUSH
19632: LD_INT 1
19634: ST_TO_ADDR
// if p3 = 16 then
19635: LD_VAR 0 3
19639: PUSH
19640: LD_INT 16
19642: EQUAL
19643: IFFALSE 19653
// sTroll := true ;
19645: LD_ADDR_EXP 88
19649: PUSH
19650: LD_INT 1
19652: ST_TO_ADDR
// if p3 = 17 then
19653: LD_VAR 0 3
19657: PUSH
19658: LD_INT 17
19660: EQUAL
19661: IFFALSE 19671
// sSlow := true ;
19663: LD_ADDR_EXP 89
19667: PUSH
19668: LD_INT 1
19670: ST_TO_ADDR
// if p3 = 18 then
19671: LD_VAR 0 3
19675: PUSH
19676: LD_INT 18
19678: EQUAL
19679: IFFALSE 19689
// sLack := true ;
19681: LD_ADDR_EXP 90
19685: PUSH
19686: LD_INT 1
19688: ST_TO_ADDR
// if p3 = 19 then
19689: LD_VAR 0 3
19693: PUSH
19694: LD_INT 19
19696: EQUAL
19697: IFFALSE 19707
// sTank := true ;
19699: LD_ADDR_EXP 92
19703: PUSH
19704: LD_INT 1
19706: ST_TO_ADDR
// if p3 = 20 then
19707: LD_VAR 0 3
19711: PUSH
19712: LD_INT 20
19714: EQUAL
19715: IFFALSE 19725
// sRemote := true ;
19717: LD_ADDR_EXP 93
19721: PUSH
19722: LD_INT 1
19724: ST_TO_ADDR
// if p3 = 21 then
19725: LD_VAR 0 3
19729: PUSH
19730: LD_INT 21
19732: EQUAL
19733: IFFALSE 19743
// sPowell := true ;
19735: LD_ADDR_EXP 94
19739: PUSH
19740: LD_INT 1
19742: ST_TO_ADDR
// if p3 = 22 then
19743: LD_VAR 0 3
19747: PUSH
19748: LD_INT 22
19750: EQUAL
19751: IFFALSE 19761
// sTeleport := true ;
19753: LD_ADDR_EXP 97
19757: PUSH
19758: LD_INT 1
19760: ST_TO_ADDR
// if p3 = 23 then
19761: LD_VAR 0 3
19765: PUSH
19766: LD_INT 23
19768: EQUAL
19769: IFFALSE 19779
// sOilTower := true ;
19771: LD_ADDR_EXP 99
19775: PUSH
19776: LD_INT 1
19778: ST_TO_ADDR
// if p3 = 24 then
19779: LD_VAR 0 3
19783: PUSH
19784: LD_INT 24
19786: EQUAL
19787: IFFALSE 19797
// sShovel := true ;
19789: LD_ADDR_EXP 100
19793: PUSH
19794: LD_INT 1
19796: ST_TO_ADDR
// if p3 = 25 then
19797: LD_VAR 0 3
19801: PUSH
19802: LD_INT 25
19804: EQUAL
19805: IFFALSE 19815
// sSheik := true ;
19807: LD_ADDR_EXP 101
19811: PUSH
19812: LD_INT 1
19814: ST_TO_ADDR
// if p3 = 26 then
19815: LD_VAR 0 3
19819: PUSH
19820: LD_INT 26
19822: EQUAL
19823: IFFALSE 19833
// sEarthquake := true ;
19825: LD_ADDR_EXP 103
19829: PUSH
19830: LD_INT 1
19832: ST_TO_ADDR
// if p3 = 27 then
19833: LD_VAR 0 3
19837: PUSH
19838: LD_INT 27
19840: EQUAL
19841: IFFALSE 19851
// sAI := true ;
19843: LD_ADDR_EXP 104
19847: PUSH
19848: LD_INT 1
19850: ST_TO_ADDR
// if p3 = 28 then
19851: LD_VAR 0 3
19855: PUSH
19856: LD_INT 28
19858: EQUAL
19859: IFFALSE 19869
// sCargo := true ;
19861: LD_ADDR_EXP 107
19865: PUSH
19866: LD_INT 1
19868: ST_TO_ADDR
// if p3 = 29 then
19869: LD_VAR 0 3
19873: PUSH
19874: LD_INT 29
19876: EQUAL
19877: IFFALSE 19887
// sDLaser := true ;
19879: LD_ADDR_EXP 108
19883: PUSH
19884: LD_INT 1
19886: ST_TO_ADDR
// if p3 = 30 then
19887: LD_VAR 0 3
19891: PUSH
19892: LD_INT 30
19894: EQUAL
19895: IFFALSE 19905
// sExchange := true ;
19897: LD_ADDR_EXP 109
19901: PUSH
19902: LD_INT 1
19904: ST_TO_ADDR
// if p3 = 31 then
19905: LD_VAR 0 3
19909: PUSH
19910: LD_INT 31
19912: EQUAL
19913: IFFALSE 19923
// sFac := true ;
19915: LD_ADDR_EXP 110
19919: PUSH
19920: LD_INT 1
19922: ST_TO_ADDR
// if p3 = 32 then
19923: LD_VAR 0 3
19927: PUSH
19928: LD_INT 32
19930: EQUAL
19931: IFFALSE 19941
// sPower := true ;
19933: LD_ADDR_EXP 111
19937: PUSH
19938: LD_INT 1
19940: ST_TO_ADDR
// if p3 = 33 then
19941: LD_VAR 0 3
19945: PUSH
19946: LD_INT 33
19948: EQUAL
19949: IFFALSE 19959
// sRandom := true ;
19951: LD_ADDR_EXP 112
19955: PUSH
19956: LD_INT 1
19958: ST_TO_ADDR
// if p3 = 34 then
19959: LD_VAR 0 3
19963: PUSH
19964: LD_INT 34
19966: EQUAL
19967: IFFALSE 19977
// sShield := true ;
19969: LD_ADDR_EXP 113
19973: PUSH
19974: LD_INT 1
19976: ST_TO_ADDR
// if p3 = 35 then
19977: LD_VAR 0 3
19981: PUSH
19982: LD_INT 35
19984: EQUAL
19985: IFFALSE 19995
// sTime := true ;
19987: LD_ADDR_EXP 114
19991: PUSH
19992: LD_INT 1
19994: ST_TO_ADDR
// if p3 = 36 then
19995: LD_VAR 0 3
19999: PUSH
20000: LD_INT 36
20002: EQUAL
20003: IFFALSE 20013
// sTools := true ;
20005: LD_ADDR_EXP 115
20009: PUSH
20010: LD_INT 1
20012: ST_TO_ADDR
// if p3 = 101 then
20013: LD_VAR 0 3
20017: PUSH
20018: LD_INT 101
20020: EQUAL
20021: IFFALSE 20031
// sSold := true ;
20023: LD_ADDR_EXP 80
20027: PUSH
20028: LD_INT 1
20030: ST_TO_ADDR
// if p3 = 102 then
20031: LD_VAR 0 3
20035: PUSH
20036: LD_INT 102
20038: EQUAL
20039: IFFALSE 20049
// sDiff := true ;
20041: LD_ADDR_EXP 81
20045: PUSH
20046: LD_INT 1
20048: ST_TO_ADDR
// if p3 = 103 then
20049: LD_VAR 0 3
20053: PUSH
20054: LD_INT 103
20056: EQUAL
20057: IFFALSE 20067
// sFog := true ;
20059: LD_ADDR_EXP 84
20063: PUSH
20064: LD_INT 1
20066: ST_TO_ADDR
// if p3 = 104 then
20067: LD_VAR 0 3
20071: PUSH
20072: LD_INT 104
20074: EQUAL
20075: IFFALSE 20085
// sReset := true ;
20077: LD_ADDR_EXP 85
20081: PUSH
20082: LD_INT 1
20084: ST_TO_ADDR
// if p3 = 105 then
20085: LD_VAR 0 3
20089: PUSH
20090: LD_INT 105
20092: EQUAL
20093: IFFALSE 20103
// sSun := true ;
20095: LD_ADDR_EXP 86
20099: PUSH
20100: LD_INT 1
20102: ST_TO_ADDR
// if p3 = 106 then
20103: LD_VAR 0 3
20107: PUSH
20108: LD_INT 106
20110: EQUAL
20111: IFFALSE 20121
// sTiger := true ;
20113: LD_ADDR_EXP 82
20117: PUSH
20118: LD_INT 1
20120: ST_TO_ADDR
// if p3 = 107 then
20121: LD_VAR 0 3
20125: PUSH
20126: LD_INT 107
20128: EQUAL
20129: IFFALSE 20139
// sBomb := true ;
20131: LD_ADDR_EXP 83
20135: PUSH
20136: LD_INT 1
20138: ST_TO_ADDR
// if p3 = 108 then
20139: LD_VAR 0 3
20143: PUSH
20144: LD_INT 108
20146: EQUAL
20147: IFFALSE 20157
// sWound := true ;
20149: LD_ADDR_EXP 91
20153: PUSH
20154: LD_INT 1
20156: ST_TO_ADDR
// if p3 = 109 then
20157: LD_VAR 0 3
20161: PUSH
20162: LD_INT 109
20164: EQUAL
20165: IFFALSE 20175
// sBetray := true ;
20167: LD_ADDR_EXP 95
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// if p3 = 110 then
20175: LD_VAR 0 3
20179: PUSH
20180: LD_INT 110
20182: EQUAL
20183: IFFALSE 20193
// sContamin := true ;
20185: LD_ADDR_EXP 96
20189: PUSH
20190: LD_INT 1
20192: ST_TO_ADDR
// if p3 = 111 then
20193: LD_VAR 0 3
20197: PUSH
20198: LD_INT 111
20200: EQUAL
20201: IFFALSE 20211
// sOil := true ;
20203: LD_ADDR_EXP 98
20207: PUSH
20208: LD_INT 1
20210: ST_TO_ADDR
// if p3 = 112 then
20211: LD_VAR 0 3
20215: PUSH
20216: LD_INT 112
20218: EQUAL
20219: IFFALSE 20229
// sStu := true ;
20221: LD_ADDR_EXP 102
20225: PUSH
20226: LD_INT 1
20228: ST_TO_ADDR
// if p3 = 113 then
20229: LD_VAR 0 3
20233: PUSH
20234: LD_INT 113
20236: EQUAL
20237: IFFALSE 20247
// sBazooka := true ;
20239: LD_ADDR_EXP 105
20243: PUSH
20244: LD_INT 1
20246: ST_TO_ADDR
// if p3 = 114 then
20247: LD_VAR 0 3
20251: PUSH
20252: LD_INT 114
20254: EQUAL
20255: IFFALSE 20265
// sMortar := true ;
20257: LD_ADDR_EXP 106
20261: PUSH
20262: LD_INT 1
20264: ST_TO_ADDR
// if p3 = 115 then
20265: LD_VAR 0 3
20269: PUSH
20270: LD_INT 115
20272: EQUAL
20273: IFFALSE 20283
// sRanger := true ;
20275: LD_ADDR_EXP 116
20279: PUSH
20280: LD_INT 1
20282: ST_TO_ADDR
// if p3 = 116 then
20283: LD_VAR 0 3
20287: PUSH
20288: LD_INT 116
20290: EQUAL
20291: IFFALSE 20301
// sComputer := true ;
20293: LD_ADDR_EXP 117
20297: PUSH
20298: LD_INT 1
20300: ST_TO_ADDR
// if p3 = 117 then
20301: LD_VAR 0 3
20305: PUSH
20306: LD_INT 117
20308: EQUAL
20309: IFFALSE 20319
// s30 := true ;
20311: LD_ADDR_EXP 118
20315: PUSH
20316: LD_INT 1
20318: ST_TO_ADDR
// if p3 = 118 then
20319: LD_VAR 0 3
20323: PUSH
20324: LD_INT 118
20326: EQUAL
20327: IFFALSE 20337
// s60 := true ;
20329: LD_ADDR_EXP 119
20333: PUSH
20334: LD_INT 1
20336: ST_TO_ADDR
// end ; if p2 = hack_mode then
20337: LD_VAR 0 2
20341: PUSH
20342: LD_INT 101
20344: EQUAL
20345: IFFALSE 20473
// begin case p3 of 1 :
20347: LD_VAR 0 3
20351: PUSH
20352: LD_INT 1
20354: DOUBLE
20355: EQUAL
20356: IFTRUE 20360
20358: GO 20367
20360: POP
// hHackUnlimitedResources ; 2 :
20361: CALL 32620 0 0
20365: GO 20473
20367: LD_INT 2
20369: DOUBLE
20370: EQUAL
20371: IFTRUE 20375
20373: GO 20382
20375: POP
// hHackSetLevel10 ; 3 :
20376: CALL 32753 0 0
20380: GO 20473
20382: LD_INT 3
20384: DOUBLE
20385: EQUAL
20386: IFTRUE 20390
20388: GO 20397
20390: POP
// hHackSetLevel10YourUnits ; 4 :
20391: CALL 32838 0 0
20395: GO 20473
20397: LD_INT 4
20399: DOUBLE
20400: EQUAL
20401: IFTRUE 20405
20403: GO 20412
20405: POP
// hHackInvincible ; 5 :
20406: CALL 33286 0 0
20410: GO 20473
20412: LD_INT 5
20414: DOUBLE
20415: EQUAL
20416: IFTRUE 20420
20418: GO 20427
20420: POP
// hHackInvisible ; 6 :
20421: CALL 33397 0 0
20425: GO 20473
20427: LD_INT 6
20429: DOUBLE
20430: EQUAL
20431: IFTRUE 20435
20433: GO 20442
20435: POP
// hHackChangeYourSide ; 7 :
20436: CALL 33454 0 0
20440: GO 20473
20442: LD_INT 7
20444: DOUBLE
20445: EQUAL
20446: IFTRUE 20450
20448: GO 20457
20450: POP
// hHackChangeUnitSide ; 8 :
20451: CALL 33496 0 0
20455: GO 20473
20457: LD_INT 8
20459: DOUBLE
20460: EQUAL
20461: IFTRUE 20465
20463: GO 20472
20465: POP
// hHackFog ; end ;
20466: CALL 33597 0 0
20470: GO 20473
20472: POP
// end ; if p2 = game_save_mode then
20473: LD_VAR 0 2
20477: PUSH
20478: LD_INT 102
20480: EQUAL
20481: IFFALSE 20536
// begin if p3 = 1 then
20483: LD_VAR 0 3
20487: PUSH
20488: LD_INT 1
20490: EQUAL
20491: IFFALSE 20503
// globalGameSaveCounter := p4 ;
20493: LD_ADDR_EXP 62
20497: PUSH
20498: LD_VAR 0 4
20502: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20503: LD_VAR 0 3
20507: PUSH
20508: LD_INT 2
20510: EQUAL
20511: PUSH
20512: LD_EXP 62
20516: AND
20517: IFFALSE 20536
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20519: LD_STRING setGameSaveCounter(
20521: PUSH
20522: LD_EXP 62
20526: STR
20527: PUSH
20528: LD_STRING )
20530: STR
20531: PPUSH
20532: CALL_OW 559
// end ; end ;
20536: LD_VAR 0 7
20540: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20541: LD_INT 0
20543: PPUSH
// streamModeActive := false ;
20544: LD_ADDR_EXP 63
20548: PUSH
20549: LD_INT 0
20551: ST_TO_ADDR
// normalCounter := 36 ;
20552: LD_ADDR_EXP 64
20556: PUSH
20557: LD_INT 36
20559: ST_TO_ADDR
// hardcoreCounter := 18 ;
20560: LD_ADDR_EXP 65
20564: PUSH
20565: LD_INT 18
20567: ST_TO_ADDR
// sRocket := false ;
20568: LD_ADDR_EXP 68
20572: PUSH
20573: LD_INT 0
20575: ST_TO_ADDR
// sSpeed := false ;
20576: LD_ADDR_EXP 67
20580: PUSH
20581: LD_INT 0
20583: ST_TO_ADDR
// sEngine := false ;
20584: LD_ADDR_EXP 69
20588: PUSH
20589: LD_INT 0
20591: ST_TO_ADDR
// sSpec := false ;
20592: LD_ADDR_EXP 66
20596: PUSH
20597: LD_INT 0
20599: ST_TO_ADDR
// sLevel := false ;
20600: LD_ADDR_EXP 70
20604: PUSH
20605: LD_INT 0
20607: ST_TO_ADDR
// sArmoury := false ;
20608: LD_ADDR_EXP 71
20612: PUSH
20613: LD_INT 0
20615: ST_TO_ADDR
// sRadar := false ;
20616: LD_ADDR_EXP 72
20620: PUSH
20621: LD_INT 0
20623: ST_TO_ADDR
// sBunker := false ;
20624: LD_ADDR_EXP 73
20628: PUSH
20629: LD_INT 0
20631: ST_TO_ADDR
// sHack := false ;
20632: LD_ADDR_EXP 74
20636: PUSH
20637: LD_INT 0
20639: ST_TO_ADDR
// sFire := false ;
20640: LD_ADDR_EXP 75
20644: PUSH
20645: LD_INT 0
20647: ST_TO_ADDR
// sRefresh := false ;
20648: LD_ADDR_EXP 76
20652: PUSH
20653: LD_INT 0
20655: ST_TO_ADDR
// sExp := false ;
20656: LD_ADDR_EXP 77
20660: PUSH
20661: LD_INT 0
20663: ST_TO_ADDR
// sDepot := false ;
20664: LD_ADDR_EXP 78
20668: PUSH
20669: LD_INT 0
20671: ST_TO_ADDR
// sFlag := false ;
20672: LD_ADDR_EXP 79
20676: PUSH
20677: LD_INT 0
20679: ST_TO_ADDR
// sKamikadze := false ;
20680: LD_ADDR_EXP 87
20684: PUSH
20685: LD_INT 0
20687: ST_TO_ADDR
// sTroll := false ;
20688: LD_ADDR_EXP 88
20692: PUSH
20693: LD_INT 0
20695: ST_TO_ADDR
// sSlow := false ;
20696: LD_ADDR_EXP 89
20700: PUSH
20701: LD_INT 0
20703: ST_TO_ADDR
// sLack := false ;
20704: LD_ADDR_EXP 90
20708: PUSH
20709: LD_INT 0
20711: ST_TO_ADDR
// sTank := false ;
20712: LD_ADDR_EXP 92
20716: PUSH
20717: LD_INT 0
20719: ST_TO_ADDR
// sRemote := false ;
20720: LD_ADDR_EXP 93
20724: PUSH
20725: LD_INT 0
20727: ST_TO_ADDR
// sPowell := false ;
20728: LD_ADDR_EXP 94
20732: PUSH
20733: LD_INT 0
20735: ST_TO_ADDR
// sTeleport := false ;
20736: LD_ADDR_EXP 97
20740: PUSH
20741: LD_INT 0
20743: ST_TO_ADDR
// sOilTower := false ;
20744: LD_ADDR_EXP 99
20748: PUSH
20749: LD_INT 0
20751: ST_TO_ADDR
// sShovel := false ;
20752: LD_ADDR_EXP 100
20756: PUSH
20757: LD_INT 0
20759: ST_TO_ADDR
// sSheik := false ;
20760: LD_ADDR_EXP 101
20764: PUSH
20765: LD_INT 0
20767: ST_TO_ADDR
// sEarthquake := false ;
20768: LD_ADDR_EXP 103
20772: PUSH
20773: LD_INT 0
20775: ST_TO_ADDR
// sAI := false ;
20776: LD_ADDR_EXP 104
20780: PUSH
20781: LD_INT 0
20783: ST_TO_ADDR
// sCargo := false ;
20784: LD_ADDR_EXP 107
20788: PUSH
20789: LD_INT 0
20791: ST_TO_ADDR
// sDLaser := false ;
20792: LD_ADDR_EXP 108
20796: PUSH
20797: LD_INT 0
20799: ST_TO_ADDR
// sExchange := false ;
20800: LD_ADDR_EXP 109
20804: PUSH
20805: LD_INT 0
20807: ST_TO_ADDR
// sFac := false ;
20808: LD_ADDR_EXP 110
20812: PUSH
20813: LD_INT 0
20815: ST_TO_ADDR
// sPower := false ;
20816: LD_ADDR_EXP 111
20820: PUSH
20821: LD_INT 0
20823: ST_TO_ADDR
// sRandom := false ;
20824: LD_ADDR_EXP 112
20828: PUSH
20829: LD_INT 0
20831: ST_TO_ADDR
// sShield := false ;
20832: LD_ADDR_EXP 113
20836: PUSH
20837: LD_INT 0
20839: ST_TO_ADDR
// sTime := false ;
20840: LD_ADDR_EXP 114
20844: PUSH
20845: LD_INT 0
20847: ST_TO_ADDR
// sTools := false ;
20848: LD_ADDR_EXP 115
20852: PUSH
20853: LD_INT 0
20855: ST_TO_ADDR
// sSold := false ;
20856: LD_ADDR_EXP 80
20860: PUSH
20861: LD_INT 0
20863: ST_TO_ADDR
// sDiff := false ;
20864: LD_ADDR_EXP 81
20868: PUSH
20869: LD_INT 0
20871: ST_TO_ADDR
// sFog := false ;
20872: LD_ADDR_EXP 84
20876: PUSH
20877: LD_INT 0
20879: ST_TO_ADDR
// sReset := false ;
20880: LD_ADDR_EXP 85
20884: PUSH
20885: LD_INT 0
20887: ST_TO_ADDR
// sSun := false ;
20888: LD_ADDR_EXP 86
20892: PUSH
20893: LD_INT 0
20895: ST_TO_ADDR
// sTiger := false ;
20896: LD_ADDR_EXP 82
20900: PUSH
20901: LD_INT 0
20903: ST_TO_ADDR
// sBomb := false ;
20904: LD_ADDR_EXP 83
20908: PUSH
20909: LD_INT 0
20911: ST_TO_ADDR
// sWound := false ;
20912: LD_ADDR_EXP 91
20916: PUSH
20917: LD_INT 0
20919: ST_TO_ADDR
// sBetray := false ;
20920: LD_ADDR_EXP 95
20924: PUSH
20925: LD_INT 0
20927: ST_TO_ADDR
// sContamin := false ;
20928: LD_ADDR_EXP 96
20932: PUSH
20933: LD_INT 0
20935: ST_TO_ADDR
// sOil := false ;
20936: LD_ADDR_EXP 98
20940: PUSH
20941: LD_INT 0
20943: ST_TO_ADDR
// sStu := false ;
20944: LD_ADDR_EXP 102
20948: PUSH
20949: LD_INT 0
20951: ST_TO_ADDR
// sBazooka := false ;
20952: LD_ADDR_EXP 105
20956: PUSH
20957: LD_INT 0
20959: ST_TO_ADDR
// sMortar := false ;
20960: LD_ADDR_EXP 106
20964: PUSH
20965: LD_INT 0
20967: ST_TO_ADDR
// sRanger := false ;
20968: LD_ADDR_EXP 116
20972: PUSH
20973: LD_INT 0
20975: ST_TO_ADDR
// sComputer := false ;
20976: LD_ADDR_EXP 117
20980: PUSH
20981: LD_INT 0
20983: ST_TO_ADDR
// s30 := false ;
20984: LD_ADDR_EXP 118
20988: PUSH
20989: LD_INT 0
20991: ST_TO_ADDR
// s60 := false ;
20992: LD_ADDR_EXP 119
20996: PUSH
20997: LD_INT 0
20999: ST_TO_ADDR
// end ;
21000: LD_VAR 0 1
21004: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21005: LD_INT 0
21007: PPUSH
21008: PPUSH
21009: PPUSH
21010: PPUSH
21011: PPUSH
21012: PPUSH
21013: PPUSH
// result := [ ] ;
21014: LD_ADDR_VAR 0 2
21018: PUSH
21019: EMPTY
21020: ST_TO_ADDR
// if campaign_id = 1 then
21021: LD_OWVAR 69
21025: PUSH
21026: LD_INT 1
21028: EQUAL
21029: IFFALSE 24195
// begin case mission_number of 1 :
21031: LD_OWVAR 70
21035: PUSH
21036: LD_INT 1
21038: DOUBLE
21039: EQUAL
21040: IFTRUE 21044
21042: GO 21120
21044: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21045: LD_ADDR_VAR 0 2
21049: PUSH
21050: LD_INT 2
21052: PUSH
21053: LD_INT 4
21055: PUSH
21056: LD_INT 11
21058: PUSH
21059: LD_INT 12
21061: PUSH
21062: LD_INT 15
21064: PUSH
21065: LD_INT 16
21067: PUSH
21068: LD_INT 22
21070: PUSH
21071: LD_INT 23
21073: PUSH
21074: LD_INT 26
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 101
21090: PUSH
21091: LD_INT 102
21093: PUSH
21094: LD_INT 106
21096: PUSH
21097: LD_INT 116
21099: PUSH
21100: LD_INT 117
21102: PUSH
21103: LD_INT 118
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: ST_TO_ADDR
21118: GO 24193
21120: LD_INT 2
21122: DOUBLE
21123: EQUAL
21124: IFTRUE 21128
21126: GO 21212
21128: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21129: LD_ADDR_VAR 0 2
21133: PUSH
21134: LD_INT 2
21136: PUSH
21137: LD_INT 4
21139: PUSH
21140: LD_INT 11
21142: PUSH
21143: LD_INT 12
21145: PUSH
21146: LD_INT 15
21148: PUSH
21149: LD_INT 16
21151: PUSH
21152: LD_INT 22
21154: PUSH
21155: LD_INT 23
21157: PUSH
21158: LD_INT 26
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 101
21174: PUSH
21175: LD_INT 102
21177: PUSH
21178: LD_INT 105
21180: PUSH
21181: LD_INT 106
21183: PUSH
21184: LD_INT 108
21186: PUSH
21187: LD_INT 116
21189: PUSH
21190: LD_INT 117
21192: PUSH
21193: LD_INT 118
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: ST_TO_ADDR
21210: GO 24193
21212: LD_INT 3
21214: DOUBLE
21215: EQUAL
21216: IFTRUE 21220
21218: GO 21308
21220: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21221: LD_ADDR_VAR 0 2
21225: PUSH
21226: LD_INT 2
21228: PUSH
21229: LD_INT 4
21231: PUSH
21232: LD_INT 5
21234: PUSH
21235: LD_INT 11
21237: PUSH
21238: LD_INT 12
21240: PUSH
21241: LD_INT 15
21243: PUSH
21244: LD_INT 16
21246: PUSH
21247: LD_INT 22
21249: PUSH
21250: LD_INT 26
21252: PUSH
21253: LD_INT 36
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 101
21270: PUSH
21271: LD_INT 102
21273: PUSH
21274: LD_INT 105
21276: PUSH
21277: LD_INT 106
21279: PUSH
21280: LD_INT 108
21282: PUSH
21283: LD_INT 116
21285: PUSH
21286: LD_INT 117
21288: PUSH
21289: LD_INT 118
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: ST_TO_ADDR
21306: GO 24193
21308: LD_INT 4
21310: DOUBLE
21311: EQUAL
21312: IFTRUE 21316
21314: GO 21412
21316: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21317: LD_ADDR_VAR 0 2
21321: PUSH
21322: LD_INT 2
21324: PUSH
21325: LD_INT 4
21327: PUSH
21328: LD_INT 5
21330: PUSH
21331: LD_INT 8
21333: PUSH
21334: LD_INT 11
21336: PUSH
21337: LD_INT 12
21339: PUSH
21340: LD_INT 15
21342: PUSH
21343: LD_INT 16
21345: PUSH
21346: LD_INT 22
21348: PUSH
21349: LD_INT 23
21351: PUSH
21352: LD_INT 26
21354: PUSH
21355: LD_INT 36
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 101
21374: PUSH
21375: LD_INT 102
21377: PUSH
21378: LD_INT 105
21380: PUSH
21381: LD_INT 106
21383: PUSH
21384: LD_INT 108
21386: PUSH
21387: LD_INT 116
21389: PUSH
21390: LD_INT 117
21392: PUSH
21393: LD_INT 118
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: ST_TO_ADDR
21410: GO 24193
21412: LD_INT 5
21414: DOUBLE
21415: EQUAL
21416: IFTRUE 21420
21418: GO 21532
21420: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21421: LD_ADDR_VAR 0 2
21425: PUSH
21426: LD_INT 2
21428: PUSH
21429: LD_INT 4
21431: PUSH
21432: LD_INT 5
21434: PUSH
21435: LD_INT 6
21437: PUSH
21438: LD_INT 8
21440: PUSH
21441: LD_INT 11
21443: PUSH
21444: LD_INT 12
21446: PUSH
21447: LD_INT 15
21449: PUSH
21450: LD_INT 16
21452: PUSH
21453: LD_INT 22
21455: PUSH
21456: LD_INT 23
21458: PUSH
21459: LD_INT 25
21461: PUSH
21462: LD_INT 26
21464: PUSH
21465: LD_INT 36
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 101
21486: PUSH
21487: LD_INT 102
21489: PUSH
21490: LD_INT 105
21492: PUSH
21493: LD_INT 106
21495: PUSH
21496: LD_INT 108
21498: PUSH
21499: LD_INT 109
21501: PUSH
21502: LD_INT 112
21504: PUSH
21505: LD_INT 116
21507: PUSH
21508: LD_INT 117
21510: PUSH
21511: LD_INT 118
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: ST_TO_ADDR
21530: GO 24193
21532: LD_INT 6
21534: DOUBLE
21535: EQUAL
21536: IFTRUE 21540
21538: GO 21672
21540: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21541: LD_ADDR_VAR 0 2
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: LD_INT 4
21551: PUSH
21552: LD_INT 5
21554: PUSH
21555: LD_INT 6
21557: PUSH
21558: LD_INT 8
21560: PUSH
21561: LD_INT 11
21563: PUSH
21564: LD_INT 12
21566: PUSH
21567: LD_INT 15
21569: PUSH
21570: LD_INT 16
21572: PUSH
21573: LD_INT 20
21575: PUSH
21576: LD_INT 21
21578: PUSH
21579: LD_INT 22
21581: PUSH
21582: LD_INT 23
21584: PUSH
21585: LD_INT 25
21587: PUSH
21588: LD_INT 26
21590: PUSH
21591: LD_INT 30
21593: PUSH
21594: LD_INT 31
21596: PUSH
21597: LD_INT 32
21599: PUSH
21600: LD_INT 36
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 101
21626: PUSH
21627: LD_INT 102
21629: PUSH
21630: LD_INT 105
21632: PUSH
21633: LD_INT 106
21635: PUSH
21636: LD_INT 108
21638: PUSH
21639: LD_INT 109
21641: PUSH
21642: LD_INT 112
21644: PUSH
21645: LD_INT 116
21647: PUSH
21648: LD_INT 117
21650: PUSH
21651: LD_INT 118
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: ST_TO_ADDR
21670: GO 24193
21672: LD_INT 7
21674: DOUBLE
21675: EQUAL
21676: IFTRUE 21680
21678: GO 21792
21680: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21681: LD_ADDR_VAR 0 2
21685: PUSH
21686: LD_INT 2
21688: PUSH
21689: LD_INT 4
21691: PUSH
21692: LD_INT 5
21694: PUSH
21695: LD_INT 7
21697: PUSH
21698: LD_INT 11
21700: PUSH
21701: LD_INT 12
21703: PUSH
21704: LD_INT 15
21706: PUSH
21707: LD_INT 16
21709: PUSH
21710: LD_INT 20
21712: PUSH
21713: LD_INT 21
21715: PUSH
21716: LD_INT 22
21718: PUSH
21719: LD_INT 23
21721: PUSH
21722: LD_INT 25
21724: PUSH
21725: LD_INT 26
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 101
21746: PUSH
21747: LD_INT 102
21749: PUSH
21750: LD_INT 103
21752: PUSH
21753: LD_INT 105
21755: PUSH
21756: LD_INT 106
21758: PUSH
21759: LD_INT 108
21761: PUSH
21762: LD_INT 112
21764: PUSH
21765: LD_INT 116
21767: PUSH
21768: LD_INT 117
21770: PUSH
21771: LD_INT 118
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: ST_TO_ADDR
21790: GO 24193
21792: LD_INT 8
21794: DOUBLE
21795: EQUAL
21796: IFTRUE 21800
21798: GO 21940
21800: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21801: LD_ADDR_VAR 0 2
21805: PUSH
21806: LD_INT 2
21808: PUSH
21809: LD_INT 4
21811: PUSH
21812: LD_INT 5
21814: PUSH
21815: LD_INT 6
21817: PUSH
21818: LD_INT 7
21820: PUSH
21821: LD_INT 8
21823: PUSH
21824: LD_INT 11
21826: PUSH
21827: LD_INT 12
21829: PUSH
21830: LD_INT 15
21832: PUSH
21833: LD_INT 16
21835: PUSH
21836: LD_INT 20
21838: PUSH
21839: LD_INT 21
21841: PUSH
21842: LD_INT 22
21844: PUSH
21845: LD_INT 23
21847: PUSH
21848: LD_INT 25
21850: PUSH
21851: LD_INT 26
21853: PUSH
21854: LD_INT 30
21856: PUSH
21857: LD_INT 31
21859: PUSH
21860: LD_INT 32
21862: PUSH
21863: LD_INT 36
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 101
21890: PUSH
21891: LD_INT 102
21893: PUSH
21894: LD_INT 103
21896: PUSH
21897: LD_INT 105
21899: PUSH
21900: LD_INT 106
21902: PUSH
21903: LD_INT 108
21905: PUSH
21906: LD_INT 109
21908: PUSH
21909: LD_INT 112
21911: PUSH
21912: LD_INT 116
21914: PUSH
21915: LD_INT 117
21917: PUSH
21918: LD_INT 118
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: ST_TO_ADDR
21938: GO 24193
21940: LD_INT 9
21942: DOUBLE
21943: EQUAL
21944: IFTRUE 21948
21946: GO 22096
21948: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21949: LD_ADDR_VAR 0 2
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: LD_INT 4
21959: PUSH
21960: LD_INT 5
21962: PUSH
21963: LD_INT 6
21965: PUSH
21966: LD_INT 7
21968: PUSH
21969: LD_INT 8
21971: PUSH
21972: LD_INT 11
21974: PUSH
21975: LD_INT 12
21977: PUSH
21978: LD_INT 15
21980: PUSH
21981: LD_INT 16
21983: PUSH
21984: LD_INT 20
21986: PUSH
21987: LD_INT 21
21989: PUSH
21990: LD_INT 22
21992: PUSH
21993: LD_INT 23
21995: PUSH
21996: LD_INT 25
21998: PUSH
21999: LD_INT 26
22001: PUSH
22002: LD_INT 28
22004: PUSH
22005: LD_INT 30
22007: PUSH
22008: LD_INT 31
22010: PUSH
22011: LD_INT 32
22013: PUSH
22014: LD_INT 36
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 101
22042: PUSH
22043: LD_INT 102
22045: PUSH
22046: LD_INT 103
22048: PUSH
22049: LD_INT 105
22051: PUSH
22052: LD_INT 106
22054: PUSH
22055: LD_INT 108
22057: PUSH
22058: LD_INT 109
22060: PUSH
22061: LD_INT 112
22063: PUSH
22064: LD_INT 114
22066: PUSH
22067: LD_INT 116
22069: PUSH
22070: LD_INT 117
22072: PUSH
22073: LD_INT 118
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: ST_TO_ADDR
22094: GO 24193
22096: LD_INT 10
22098: DOUBLE
22099: EQUAL
22100: IFTRUE 22104
22102: GO 22300
22104: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22105: LD_ADDR_VAR 0 2
22109: PUSH
22110: LD_INT 2
22112: PUSH
22113: LD_INT 4
22115: PUSH
22116: LD_INT 5
22118: PUSH
22119: LD_INT 6
22121: PUSH
22122: LD_INT 7
22124: PUSH
22125: LD_INT 8
22127: PUSH
22128: LD_INT 9
22130: PUSH
22131: LD_INT 10
22133: PUSH
22134: LD_INT 11
22136: PUSH
22137: LD_INT 12
22139: PUSH
22140: LD_INT 13
22142: PUSH
22143: LD_INT 14
22145: PUSH
22146: LD_INT 15
22148: PUSH
22149: LD_INT 16
22151: PUSH
22152: LD_INT 17
22154: PUSH
22155: LD_INT 18
22157: PUSH
22158: LD_INT 19
22160: PUSH
22161: LD_INT 20
22163: PUSH
22164: LD_INT 21
22166: PUSH
22167: LD_INT 22
22169: PUSH
22170: LD_INT 23
22172: PUSH
22173: LD_INT 24
22175: PUSH
22176: LD_INT 25
22178: PUSH
22179: LD_INT 26
22181: PUSH
22182: LD_INT 28
22184: PUSH
22185: LD_INT 30
22187: PUSH
22188: LD_INT 31
22190: PUSH
22191: LD_INT 32
22193: PUSH
22194: LD_INT 36
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 101
22230: PUSH
22231: LD_INT 102
22233: PUSH
22234: LD_INT 103
22236: PUSH
22237: LD_INT 104
22239: PUSH
22240: LD_INT 105
22242: PUSH
22243: LD_INT 106
22245: PUSH
22246: LD_INT 107
22248: PUSH
22249: LD_INT 108
22251: PUSH
22252: LD_INT 109
22254: PUSH
22255: LD_INT 110
22257: PUSH
22258: LD_INT 111
22260: PUSH
22261: LD_INT 112
22263: PUSH
22264: LD_INT 114
22266: PUSH
22267: LD_INT 116
22269: PUSH
22270: LD_INT 117
22272: PUSH
22273: LD_INT 118
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: ST_TO_ADDR
22298: GO 24193
22300: LD_INT 11
22302: DOUBLE
22303: EQUAL
22304: IFTRUE 22308
22306: GO 22512
22308: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22309: LD_ADDR_VAR 0 2
22313: PUSH
22314: LD_INT 2
22316: PUSH
22317: LD_INT 3
22319: PUSH
22320: LD_INT 4
22322: PUSH
22323: LD_INT 5
22325: PUSH
22326: LD_INT 6
22328: PUSH
22329: LD_INT 7
22331: PUSH
22332: LD_INT 8
22334: PUSH
22335: LD_INT 9
22337: PUSH
22338: LD_INT 10
22340: PUSH
22341: LD_INT 11
22343: PUSH
22344: LD_INT 12
22346: PUSH
22347: LD_INT 13
22349: PUSH
22350: LD_INT 14
22352: PUSH
22353: LD_INT 15
22355: PUSH
22356: LD_INT 16
22358: PUSH
22359: LD_INT 17
22361: PUSH
22362: LD_INT 18
22364: PUSH
22365: LD_INT 19
22367: PUSH
22368: LD_INT 20
22370: PUSH
22371: LD_INT 21
22373: PUSH
22374: LD_INT 22
22376: PUSH
22377: LD_INT 23
22379: PUSH
22380: LD_INT 24
22382: PUSH
22383: LD_INT 25
22385: PUSH
22386: LD_INT 26
22388: PUSH
22389: LD_INT 28
22391: PUSH
22392: LD_INT 30
22394: PUSH
22395: LD_INT 31
22397: PUSH
22398: LD_INT 32
22400: PUSH
22401: LD_INT 34
22403: PUSH
22404: LD_INT 36
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 101
22442: PUSH
22443: LD_INT 102
22445: PUSH
22446: LD_INT 103
22448: PUSH
22449: LD_INT 104
22451: PUSH
22452: LD_INT 105
22454: PUSH
22455: LD_INT 106
22457: PUSH
22458: LD_INT 107
22460: PUSH
22461: LD_INT 108
22463: PUSH
22464: LD_INT 109
22466: PUSH
22467: LD_INT 110
22469: PUSH
22470: LD_INT 111
22472: PUSH
22473: LD_INT 112
22475: PUSH
22476: LD_INT 114
22478: PUSH
22479: LD_INT 116
22481: PUSH
22482: LD_INT 117
22484: PUSH
22485: LD_INT 118
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: ST_TO_ADDR
22510: GO 24193
22512: LD_INT 12
22514: DOUBLE
22515: EQUAL
22516: IFTRUE 22520
22518: GO 22740
22520: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22521: LD_ADDR_VAR 0 2
22525: PUSH
22526: LD_INT 1
22528: PUSH
22529: LD_INT 2
22531: PUSH
22532: LD_INT 3
22534: PUSH
22535: LD_INT 4
22537: PUSH
22538: LD_INT 5
22540: PUSH
22541: LD_INT 6
22543: PUSH
22544: LD_INT 7
22546: PUSH
22547: LD_INT 8
22549: PUSH
22550: LD_INT 9
22552: PUSH
22553: LD_INT 10
22555: PUSH
22556: LD_INT 11
22558: PUSH
22559: LD_INT 12
22561: PUSH
22562: LD_INT 13
22564: PUSH
22565: LD_INT 14
22567: PUSH
22568: LD_INT 15
22570: PUSH
22571: LD_INT 16
22573: PUSH
22574: LD_INT 17
22576: PUSH
22577: LD_INT 18
22579: PUSH
22580: LD_INT 19
22582: PUSH
22583: LD_INT 20
22585: PUSH
22586: LD_INT 21
22588: PUSH
22589: LD_INT 22
22591: PUSH
22592: LD_INT 23
22594: PUSH
22595: LD_INT 24
22597: PUSH
22598: LD_INT 25
22600: PUSH
22601: LD_INT 26
22603: PUSH
22604: LD_INT 27
22606: PUSH
22607: LD_INT 28
22609: PUSH
22610: LD_INT 30
22612: PUSH
22613: LD_INT 31
22615: PUSH
22616: LD_INT 32
22618: PUSH
22619: LD_INT 33
22621: PUSH
22622: LD_INT 34
22624: PUSH
22625: LD_INT 36
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 101
22666: PUSH
22667: LD_INT 102
22669: PUSH
22670: LD_INT 103
22672: PUSH
22673: LD_INT 104
22675: PUSH
22676: LD_INT 105
22678: PUSH
22679: LD_INT 106
22681: PUSH
22682: LD_INT 107
22684: PUSH
22685: LD_INT 108
22687: PUSH
22688: LD_INT 109
22690: PUSH
22691: LD_INT 110
22693: PUSH
22694: LD_INT 111
22696: PUSH
22697: LD_INT 112
22699: PUSH
22700: LD_INT 113
22702: PUSH
22703: LD_INT 114
22705: PUSH
22706: LD_INT 116
22708: PUSH
22709: LD_INT 117
22711: PUSH
22712: LD_INT 118
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: ST_TO_ADDR
22738: GO 24193
22740: LD_INT 13
22742: DOUBLE
22743: EQUAL
22744: IFTRUE 22748
22746: GO 22956
22748: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22749: LD_ADDR_VAR 0 2
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: LD_INT 2
22759: PUSH
22760: LD_INT 3
22762: PUSH
22763: LD_INT 4
22765: PUSH
22766: LD_INT 5
22768: PUSH
22769: LD_INT 8
22771: PUSH
22772: LD_INT 9
22774: PUSH
22775: LD_INT 10
22777: PUSH
22778: LD_INT 11
22780: PUSH
22781: LD_INT 12
22783: PUSH
22784: LD_INT 14
22786: PUSH
22787: LD_INT 15
22789: PUSH
22790: LD_INT 16
22792: PUSH
22793: LD_INT 17
22795: PUSH
22796: LD_INT 18
22798: PUSH
22799: LD_INT 19
22801: PUSH
22802: LD_INT 20
22804: PUSH
22805: LD_INT 21
22807: PUSH
22808: LD_INT 22
22810: PUSH
22811: LD_INT 23
22813: PUSH
22814: LD_INT 24
22816: PUSH
22817: LD_INT 25
22819: PUSH
22820: LD_INT 26
22822: PUSH
22823: LD_INT 27
22825: PUSH
22826: LD_INT 28
22828: PUSH
22829: LD_INT 30
22831: PUSH
22832: LD_INT 31
22834: PUSH
22835: LD_INT 32
22837: PUSH
22838: LD_INT 33
22840: PUSH
22841: LD_INT 34
22843: PUSH
22844: LD_INT 36
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 101
22882: PUSH
22883: LD_INT 102
22885: PUSH
22886: LD_INT 103
22888: PUSH
22889: LD_INT 104
22891: PUSH
22892: LD_INT 105
22894: PUSH
22895: LD_INT 106
22897: PUSH
22898: LD_INT 107
22900: PUSH
22901: LD_INT 108
22903: PUSH
22904: LD_INT 109
22906: PUSH
22907: LD_INT 110
22909: PUSH
22910: LD_INT 111
22912: PUSH
22913: LD_INT 112
22915: PUSH
22916: LD_INT 113
22918: PUSH
22919: LD_INT 114
22921: PUSH
22922: LD_INT 116
22924: PUSH
22925: LD_INT 117
22927: PUSH
22928: LD_INT 118
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: ST_TO_ADDR
22954: GO 24193
22956: LD_INT 14
22958: DOUBLE
22959: EQUAL
22960: IFTRUE 22964
22962: GO 23188
22964: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22965: LD_ADDR_VAR 0 2
22969: PUSH
22970: LD_INT 1
22972: PUSH
22973: LD_INT 2
22975: PUSH
22976: LD_INT 3
22978: PUSH
22979: LD_INT 4
22981: PUSH
22982: LD_INT 5
22984: PUSH
22985: LD_INT 6
22987: PUSH
22988: LD_INT 7
22990: PUSH
22991: LD_INT 8
22993: PUSH
22994: LD_INT 9
22996: PUSH
22997: LD_INT 10
22999: PUSH
23000: LD_INT 11
23002: PUSH
23003: LD_INT 12
23005: PUSH
23006: LD_INT 13
23008: PUSH
23009: LD_INT 14
23011: PUSH
23012: LD_INT 15
23014: PUSH
23015: LD_INT 16
23017: PUSH
23018: LD_INT 17
23020: PUSH
23021: LD_INT 18
23023: PUSH
23024: LD_INT 19
23026: PUSH
23027: LD_INT 20
23029: PUSH
23030: LD_INT 21
23032: PUSH
23033: LD_INT 22
23035: PUSH
23036: LD_INT 23
23038: PUSH
23039: LD_INT 24
23041: PUSH
23042: LD_INT 25
23044: PUSH
23045: LD_INT 26
23047: PUSH
23048: LD_INT 27
23050: PUSH
23051: LD_INT 28
23053: PUSH
23054: LD_INT 29
23056: PUSH
23057: LD_INT 30
23059: PUSH
23060: LD_INT 31
23062: PUSH
23063: LD_INT 32
23065: PUSH
23066: LD_INT 33
23068: PUSH
23069: LD_INT 34
23071: PUSH
23072: LD_INT 36
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 101
23114: PUSH
23115: LD_INT 102
23117: PUSH
23118: LD_INT 103
23120: PUSH
23121: LD_INT 104
23123: PUSH
23124: LD_INT 105
23126: PUSH
23127: LD_INT 106
23129: PUSH
23130: LD_INT 107
23132: PUSH
23133: LD_INT 108
23135: PUSH
23136: LD_INT 109
23138: PUSH
23139: LD_INT 110
23141: PUSH
23142: LD_INT 111
23144: PUSH
23145: LD_INT 112
23147: PUSH
23148: LD_INT 113
23150: PUSH
23151: LD_INT 114
23153: PUSH
23154: LD_INT 116
23156: PUSH
23157: LD_INT 117
23159: PUSH
23160: LD_INT 118
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: ST_TO_ADDR
23186: GO 24193
23188: LD_INT 15
23190: DOUBLE
23191: EQUAL
23192: IFTRUE 23196
23194: GO 23420
23196: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23197: LD_ADDR_VAR 0 2
23201: PUSH
23202: LD_INT 1
23204: PUSH
23205: LD_INT 2
23207: PUSH
23208: LD_INT 3
23210: PUSH
23211: LD_INT 4
23213: PUSH
23214: LD_INT 5
23216: PUSH
23217: LD_INT 6
23219: PUSH
23220: LD_INT 7
23222: PUSH
23223: LD_INT 8
23225: PUSH
23226: LD_INT 9
23228: PUSH
23229: LD_INT 10
23231: PUSH
23232: LD_INT 11
23234: PUSH
23235: LD_INT 12
23237: PUSH
23238: LD_INT 13
23240: PUSH
23241: LD_INT 14
23243: PUSH
23244: LD_INT 15
23246: PUSH
23247: LD_INT 16
23249: PUSH
23250: LD_INT 17
23252: PUSH
23253: LD_INT 18
23255: PUSH
23256: LD_INT 19
23258: PUSH
23259: LD_INT 20
23261: PUSH
23262: LD_INT 21
23264: PUSH
23265: LD_INT 22
23267: PUSH
23268: LD_INT 23
23270: PUSH
23271: LD_INT 24
23273: PUSH
23274: LD_INT 25
23276: PUSH
23277: LD_INT 26
23279: PUSH
23280: LD_INT 27
23282: PUSH
23283: LD_INT 28
23285: PUSH
23286: LD_INT 29
23288: PUSH
23289: LD_INT 30
23291: PUSH
23292: LD_INT 31
23294: PUSH
23295: LD_INT 32
23297: PUSH
23298: LD_INT 33
23300: PUSH
23301: LD_INT 34
23303: PUSH
23304: LD_INT 36
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 101
23346: PUSH
23347: LD_INT 102
23349: PUSH
23350: LD_INT 103
23352: PUSH
23353: LD_INT 104
23355: PUSH
23356: LD_INT 105
23358: PUSH
23359: LD_INT 106
23361: PUSH
23362: LD_INT 107
23364: PUSH
23365: LD_INT 108
23367: PUSH
23368: LD_INT 109
23370: PUSH
23371: LD_INT 110
23373: PUSH
23374: LD_INT 111
23376: PUSH
23377: LD_INT 112
23379: PUSH
23380: LD_INT 113
23382: PUSH
23383: LD_INT 114
23385: PUSH
23386: LD_INT 116
23388: PUSH
23389: LD_INT 117
23391: PUSH
23392: LD_INT 118
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: ST_TO_ADDR
23418: GO 24193
23420: LD_INT 16
23422: DOUBLE
23423: EQUAL
23424: IFTRUE 23428
23426: GO 23564
23428: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23429: LD_ADDR_VAR 0 2
23433: PUSH
23434: LD_INT 2
23436: PUSH
23437: LD_INT 4
23439: PUSH
23440: LD_INT 5
23442: PUSH
23443: LD_INT 7
23445: PUSH
23446: LD_INT 11
23448: PUSH
23449: LD_INT 12
23451: PUSH
23452: LD_INT 15
23454: PUSH
23455: LD_INT 16
23457: PUSH
23458: LD_INT 20
23460: PUSH
23461: LD_INT 21
23463: PUSH
23464: LD_INT 22
23466: PUSH
23467: LD_INT 23
23469: PUSH
23470: LD_INT 25
23472: PUSH
23473: LD_INT 26
23475: PUSH
23476: LD_INT 30
23478: PUSH
23479: LD_INT 31
23481: PUSH
23482: LD_INT 32
23484: PUSH
23485: LD_INT 33
23487: PUSH
23488: LD_INT 34
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 101
23514: PUSH
23515: LD_INT 102
23517: PUSH
23518: LD_INT 103
23520: PUSH
23521: LD_INT 106
23523: PUSH
23524: LD_INT 108
23526: PUSH
23527: LD_INT 112
23529: PUSH
23530: LD_INT 113
23532: PUSH
23533: LD_INT 114
23535: PUSH
23536: LD_INT 116
23538: PUSH
23539: LD_INT 117
23541: PUSH
23542: LD_INT 118
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: ST_TO_ADDR
23562: GO 24193
23564: LD_INT 17
23566: DOUBLE
23567: EQUAL
23568: IFTRUE 23572
23570: GO 23796
23572: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23573: LD_ADDR_VAR 0 2
23577: PUSH
23578: LD_INT 1
23580: PUSH
23581: LD_INT 2
23583: PUSH
23584: LD_INT 3
23586: PUSH
23587: LD_INT 4
23589: PUSH
23590: LD_INT 5
23592: PUSH
23593: LD_INT 6
23595: PUSH
23596: LD_INT 7
23598: PUSH
23599: LD_INT 8
23601: PUSH
23602: LD_INT 9
23604: PUSH
23605: LD_INT 10
23607: PUSH
23608: LD_INT 11
23610: PUSH
23611: LD_INT 12
23613: PUSH
23614: LD_INT 13
23616: PUSH
23617: LD_INT 14
23619: PUSH
23620: LD_INT 15
23622: PUSH
23623: LD_INT 16
23625: PUSH
23626: LD_INT 17
23628: PUSH
23629: LD_INT 18
23631: PUSH
23632: LD_INT 19
23634: PUSH
23635: LD_INT 20
23637: PUSH
23638: LD_INT 21
23640: PUSH
23641: LD_INT 22
23643: PUSH
23644: LD_INT 23
23646: PUSH
23647: LD_INT 24
23649: PUSH
23650: LD_INT 25
23652: PUSH
23653: LD_INT 26
23655: PUSH
23656: LD_INT 27
23658: PUSH
23659: LD_INT 28
23661: PUSH
23662: LD_INT 29
23664: PUSH
23665: LD_INT 30
23667: PUSH
23668: LD_INT 31
23670: PUSH
23671: LD_INT 32
23673: PUSH
23674: LD_INT 33
23676: PUSH
23677: LD_INT 34
23679: PUSH
23680: LD_INT 36
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 101
23722: PUSH
23723: LD_INT 102
23725: PUSH
23726: LD_INT 103
23728: PUSH
23729: LD_INT 104
23731: PUSH
23732: LD_INT 105
23734: PUSH
23735: LD_INT 106
23737: PUSH
23738: LD_INT 107
23740: PUSH
23741: LD_INT 108
23743: PUSH
23744: LD_INT 109
23746: PUSH
23747: LD_INT 110
23749: PUSH
23750: LD_INT 111
23752: PUSH
23753: LD_INT 112
23755: PUSH
23756: LD_INT 113
23758: PUSH
23759: LD_INT 114
23761: PUSH
23762: LD_INT 116
23764: PUSH
23765: LD_INT 117
23767: PUSH
23768: LD_INT 118
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: ST_TO_ADDR
23794: GO 24193
23796: LD_INT 18
23798: DOUBLE
23799: EQUAL
23800: IFTRUE 23804
23802: GO 23952
23804: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23805: LD_ADDR_VAR 0 2
23809: PUSH
23810: LD_INT 2
23812: PUSH
23813: LD_INT 4
23815: PUSH
23816: LD_INT 5
23818: PUSH
23819: LD_INT 7
23821: PUSH
23822: LD_INT 11
23824: PUSH
23825: LD_INT 12
23827: PUSH
23828: LD_INT 15
23830: PUSH
23831: LD_INT 16
23833: PUSH
23834: LD_INT 20
23836: PUSH
23837: LD_INT 21
23839: PUSH
23840: LD_INT 22
23842: PUSH
23843: LD_INT 23
23845: PUSH
23846: LD_INT 25
23848: PUSH
23849: LD_INT 26
23851: PUSH
23852: LD_INT 30
23854: PUSH
23855: LD_INT 31
23857: PUSH
23858: LD_INT 32
23860: PUSH
23861: LD_INT 33
23863: PUSH
23864: LD_INT 34
23866: PUSH
23867: LD_INT 35
23869: PUSH
23870: LD_INT 36
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 101
23898: PUSH
23899: LD_INT 102
23901: PUSH
23902: LD_INT 103
23904: PUSH
23905: LD_INT 106
23907: PUSH
23908: LD_INT 108
23910: PUSH
23911: LD_INT 112
23913: PUSH
23914: LD_INT 113
23916: PUSH
23917: LD_INT 114
23919: PUSH
23920: LD_INT 115
23922: PUSH
23923: LD_INT 116
23925: PUSH
23926: LD_INT 117
23928: PUSH
23929: LD_INT 118
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: ST_TO_ADDR
23950: GO 24193
23952: LD_INT 19
23954: DOUBLE
23955: EQUAL
23956: IFTRUE 23960
23958: GO 24192
23960: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23961: LD_ADDR_VAR 0 2
23965: PUSH
23966: LD_INT 1
23968: PUSH
23969: LD_INT 2
23971: PUSH
23972: LD_INT 3
23974: PUSH
23975: LD_INT 4
23977: PUSH
23978: LD_INT 5
23980: PUSH
23981: LD_INT 6
23983: PUSH
23984: LD_INT 7
23986: PUSH
23987: LD_INT 8
23989: PUSH
23990: LD_INT 9
23992: PUSH
23993: LD_INT 10
23995: PUSH
23996: LD_INT 11
23998: PUSH
23999: LD_INT 12
24001: PUSH
24002: LD_INT 13
24004: PUSH
24005: LD_INT 14
24007: PUSH
24008: LD_INT 15
24010: PUSH
24011: LD_INT 16
24013: PUSH
24014: LD_INT 17
24016: PUSH
24017: LD_INT 18
24019: PUSH
24020: LD_INT 19
24022: PUSH
24023: LD_INT 20
24025: PUSH
24026: LD_INT 21
24028: PUSH
24029: LD_INT 22
24031: PUSH
24032: LD_INT 23
24034: PUSH
24035: LD_INT 24
24037: PUSH
24038: LD_INT 25
24040: PUSH
24041: LD_INT 26
24043: PUSH
24044: LD_INT 27
24046: PUSH
24047: LD_INT 28
24049: PUSH
24050: LD_INT 29
24052: PUSH
24053: LD_INT 30
24055: PUSH
24056: LD_INT 31
24058: PUSH
24059: LD_INT 32
24061: PUSH
24062: LD_INT 33
24064: PUSH
24065: LD_INT 34
24067: PUSH
24068: LD_INT 35
24070: PUSH
24071: LD_INT 36
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 101
24114: PUSH
24115: LD_INT 102
24117: PUSH
24118: LD_INT 103
24120: PUSH
24121: LD_INT 104
24123: PUSH
24124: LD_INT 105
24126: PUSH
24127: LD_INT 106
24129: PUSH
24130: LD_INT 107
24132: PUSH
24133: LD_INT 108
24135: PUSH
24136: LD_INT 109
24138: PUSH
24139: LD_INT 110
24141: PUSH
24142: LD_INT 111
24144: PUSH
24145: LD_INT 112
24147: PUSH
24148: LD_INT 113
24150: PUSH
24151: LD_INT 114
24153: PUSH
24154: LD_INT 115
24156: PUSH
24157: LD_INT 116
24159: PUSH
24160: LD_INT 117
24162: PUSH
24163: LD_INT 118
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: ST_TO_ADDR
24190: GO 24193
24192: POP
// end else
24193: GO 24424
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24195: LD_ADDR_VAR 0 2
24199: PUSH
24200: LD_INT 1
24202: PUSH
24203: LD_INT 2
24205: PUSH
24206: LD_INT 3
24208: PUSH
24209: LD_INT 4
24211: PUSH
24212: LD_INT 5
24214: PUSH
24215: LD_INT 6
24217: PUSH
24218: LD_INT 7
24220: PUSH
24221: LD_INT 8
24223: PUSH
24224: LD_INT 9
24226: PUSH
24227: LD_INT 10
24229: PUSH
24230: LD_INT 11
24232: PUSH
24233: LD_INT 12
24235: PUSH
24236: LD_INT 13
24238: PUSH
24239: LD_INT 14
24241: PUSH
24242: LD_INT 15
24244: PUSH
24245: LD_INT 16
24247: PUSH
24248: LD_INT 17
24250: PUSH
24251: LD_INT 18
24253: PUSH
24254: LD_INT 19
24256: PUSH
24257: LD_INT 20
24259: PUSH
24260: LD_INT 21
24262: PUSH
24263: LD_INT 22
24265: PUSH
24266: LD_INT 23
24268: PUSH
24269: LD_INT 24
24271: PUSH
24272: LD_INT 25
24274: PUSH
24275: LD_INT 26
24277: PUSH
24278: LD_INT 27
24280: PUSH
24281: LD_INT 28
24283: PUSH
24284: LD_INT 29
24286: PUSH
24287: LD_INT 30
24289: PUSH
24290: LD_INT 31
24292: PUSH
24293: LD_INT 32
24295: PUSH
24296: LD_INT 33
24298: PUSH
24299: LD_INT 34
24301: PUSH
24302: LD_INT 35
24304: PUSH
24305: LD_INT 36
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 101
24348: PUSH
24349: LD_INT 102
24351: PUSH
24352: LD_INT 103
24354: PUSH
24355: LD_INT 104
24357: PUSH
24358: LD_INT 105
24360: PUSH
24361: LD_INT 106
24363: PUSH
24364: LD_INT 107
24366: PUSH
24367: LD_INT 108
24369: PUSH
24370: LD_INT 109
24372: PUSH
24373: LD_INT 110
24375: PUSH
24376: LD_INT 111
24378: PUSH
24379: LD_INT 112
24381: PUSH
24382: LD_INT 113
24384: PUSH
24385: LD_INT 114
24387: PUSH
24388: LD_INT 115
24390: PUSH
24391: LD_INT 116
24393: PUSH
24394: LD_INT 117
24396: PUSH
24397: LD_INT 118
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: ST_TO_ADDR
// if result then
24424: LD_VAR 0 2
24428: IFFALSE 25214
// begin normal :=  ;
24430: LD_ADDR_VAR 0 5
24434: PUSH
24435: LD_STRING 
24437: ST_TO_ADDR
// hardcore :=  ;
24438: LD_ADDR_VAR 0 6
24442: PUSH
24443: LD_STRING 
24445: ST_TO_ADDR
// active :=  ;
24446: LD_ADDR_VAR 0 7
24450: PUSH
24451: LD_STRING 
24453: ST_TO_ADDR
// for i = 1 to normalCounter do
24454: LD_ADDR_VAR 0 8
24458: PUSH
24459: DOUBLE
24460: LD_INT 1
24462: DEC
24463: ST_TO_ADDR
24464: LD_EXP 64
24468: PUSH
24469: FOR_TO
24470: IFFALSE 24571
// begin tmp := 0 ;
24472: LD_ADDR_VAR 0 3
24476: PUSH
24477: LD_STRING 0
24479: ST_TO_ADDR
// if result [ 1 ] then
24480: LD_VAR 0 2
24484: PUSH
24485: LD_INT 1
24487: ARRAY
24488: IFFALSE 24553
// if result [ 1 ] [ 1 ] = i then
24490: LD_VAR 0 2
24494: PUSH
24495: LD_INT 1
24497: ARRAY
24498: PUSH
24499: LD_INT 1
24501: ARRAY
24502: PUSH
24503: LD_VAR 0 8
24507: EQUAL
24508: IFFALSE 24553
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24510: LD_ADDR_VAR 0 2
24514: PUSH
24515: LD_VAR 0 2
24519: PPUSH
24520: LD_INT 1
24522: PPUSH
24523: LD_VAR 0 2
24527: PUSH
24528: LD_INT 1
24530: ARRAY
24531: PPUSH
24532: LD_INT 1
24534: PPUSH
24535: CALL_OW 3
24539: PPUSH
24540: CALL_OW 1
24544: ST_TO_ADDR
// tmp := 1 ;
24545: LD_ADDR_VAR 0 3
24549: PUSH
24550: LD_STRING 1
24552: ST_TO_ADDR
// end ; normal := normal & tmp ;
24553: LD_ADDR_VAR 0 5
24557: PUSH
24558: LD_VAR 0 5
24562: PUSH
24563: LD_VAR 0 3
24567: STR
24568: ST_TO_ADDR
// end ;
24569: GO 24469
24571: POP
24572: POP
// for i = 1 to hardcoreCounter do
24573: LD_ADDR_VAR 0 8
24577: PUSH
24578: DOUBLE
24579: LD_INT 1
24581: DEC
24582: ST_TO_ADDR
24583: LD_EXP 65
24587: PUSH
24588: FOR_TO
24589: IFFALSE 24694
// begin tmp := 0 ;
24591: LD_ADDR_VAR 0 3
24595: PUSH
24596: LD_STRING 0
24598: ST_TO_ADDR
// if result [ 2 ] then
24599: LD_VAR 0 2
24603: PUSH
24604: LD_INT 2
24606: ARRAY
24607: IFFALSE 24676
// if result [ 2 ] [ 1 ] = 100 + i then
24609: LD_VAR 0 2
24613: PUSH
24614: LD_INT 2
24616: ARRAY
24617: PUSH
24618: LD_INT 1
24620: ARRAY
24621: PUSH
24622: LD_INT 100
24624: PUSH
24625: LD_VAR 0 8
24629: PLUS
24630: EQUAL
24631: IFFALSE 24676
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24633: LD_ADDR_VAR 0 2
24637: PUSH
24638: LD_VAR 0 2
24642: PPUSH
24643: LD_INT 2
24645: PPUSH
24646: LD_VAR 0 2
24650: PUSH
24651: LD_INT 2
24653: ARRAY
24654: PPUSH
24655: LD_INT 1
24657: PPUSH
24658: CALL_OW 3
24662: PPUSH
24663: CALL_OW 1
24667: ST_TO_ADDR
// tmp := 1 ;
24668: LD_ADDR_VAR 0 3
24672: PUSH
24673: LD_STRING 1
24675: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24676: LD_ADDR_VAR 0 6
24680: PUSH
24681: LD_VAR 0 6
24685: PUSH
24686: LD_VAR 0 3
24690: STR
24691: ST_TO_ADDR
// end ;
24692: GO 24588
24694: POP
24695: POP
// if isGameLoad then
24696: LD_VAR 0 1
24700: IFFALSE 25175
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24702: LD_ADDR_VAR 0 4
24706: PUSH
24707: LD_EXP 68
24711: PUSH
24712: LD_EXP 67
24716: PUSH
24717: LD_EXP 69
24721: PUSH
24722: LD_EXP 66
24726: PUSH
24727: LD_EXP 70
24731: PUSH
24732: LD_EXP 71
24736: PUSH
24737: LD_EXP 72
24741: PUSH
24742: LD_EXP 73
24746: PUSH
24747: LD_EXP 74
24751: PUSH
24752: LD_EXP 75
24756: PUSH
24757: LD_EXP 76
24761: PUSH
24762: LD_EXP 77
24766: PUSH
24767: LD_EXP 78
24771: PUSH
24772: LD_EXP 79
24776: PUSH
24777: LD_EXP 87
24781: PUSH
24782: LD_EXP 88
24786: PUSH
24787: LD_EXP 89
24791: PUSH
24792: LD_EXP 90
24796: PUSH
24797: LD_EXP 92
24801: PUSH
24802: LD_EXP 93
24806: PUSH
24807: LD_EXP 94
24811: PUSH
24812: LD_EXP 97
24816: PUSH
24817: LD_EXP 99
24821: PUSH
24822: LD_EXP 100
24826: PUSH
24827: LD_EXP 101
24831: PUSH
24832: LD_EXP 103
24836: PUSH
24837: LD_EXP 104
24841: PUSH
24842: LD_EXP 107
24846: PUSH
24847: LD_EXP 108
24851: PUSH
24852: LD_EXP 109
24856: PUSH
24857: LD_EXP 110
24861: PUSH
24862: LD_EXP 111
24866: PUSH
24867: LD_EXP 112
24871: PUSH
24872: LD_EXP 113
24876: PUSH
24877: LD_EXP 114
24881: PUSH
24882: LD_EXP 115
24886: PUSH
24887: LD_EXP 80
24891: PUSH
24892: LD_EXP 81
24896: PUSH
24897: LD_EXP 84
24901: PUSH
24902: LD_EXP 85
24906: PUSH
24907: LD_EXP 86
24911: PUSH
24912: LD_EXP 82
24916: PUSH
24917: LD_EXP 83
24921: PUSH
24922: LD_EXP 91
24926: PUSH
24927: LD_EXP 95
24931: PUSH
24932: LD_EXP 96
24936: PUSH
24937: LD_EXP 98
24941: PUSH
24942: LD_EXP 102
24946: PUSH
24947: LD_EXP 105
24951: PUSH
24952: LD_EXP 106
24956: PUSH
24957: LD_EXP 116
24961: PUSH
24962: LD_EXP 117
24966: PUSH
24967: LD_EXP 118
24971: PUSH
24972: LD_EXP 119
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: ST_TO_ADDR
// tmp :=  ;
25033: LD_ADDR_VAR 0 3
25037: PUSH
25038: LD_STRING 
25040: ST_TO_ADDR
// for i = 1 to normalCounter do
25041: LD_ADDR_VAR 0 8
25045: PUSH
25046: DOUBLE
25047: LD_INT 1
25049: DEC
25050: ST_TO_ADDR
25051: LD_EXP 64
25055: PUSH
25056: FOR_TO
25057: IFFALSE 25093
// begin if flags [ i ] then
25059: LD_VAR 0 4
25063: PUSH
25064: LD_VAR 0 8
25068: ARRAY
25069: IFFALSE 25091
// tmp := tmp & i & ; ;
25071: LD_ADDR_VAR 0 3
25075: PUSH
25076: LD_VAR 0 3
25080: PUSH
25081: LD_VAR 0 8
25085: STR
25086: PUSH
25087: LD_STRING ;
25089: STR
25090: ST_TO_ADDR
// end ;
25091: GO 25056
25093: POP
25094: POP
// for i = 1 to hardcoreCounter do
25095: LD_ADDR_VAR 0 8
25099: PUSH
25100: DOUBLE
25101: LD_INT 1
25103: DEC
25104: ST_TO_ADDR
25105: LD_EXP 65
25109: PUSH
25110: FOR_TO
25111: IFFALSE 25157
// begin if flags [ normalCounter + i ] then
25113: LD_VAR 0 4
25117: PUSH
25118: LD_EXP 64
25122: PUSH
25123: LD_VAR 0 8
25127: PLUS
25128: ARRAY
25129: IFFALSE 25155
// tmp := tmp & ( 100 + i ) & ; ;
25131: LD_ADDR_VAR 0 3
25135: PUSH
25136: LD_VAR 0 3
25140: PUSH
25141: LD_INT 100
25143: PUSH
25144: LD_VAR 0 8
25148: PLUS
25149: STR
25150: PUSH
25151: LD_STRING ;
25153: STR
25154: ST_TO_ADDR
// end ;
25155: GO 25110
25157: POP
25158: POP
// if tmp then
25159: LD_VAR 0 3
25163: IFFALSE 25175
// active := tmp ;
25165: LD_ADDR_VAR 0 7
25169: PUSH
25170: LD_VAR 0 3
25174: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25175: LD_STRING getStreamItemsFromMission("
25177: PUSH
25178: LD_VAR 0 5
25182: STR
25183: PUSH
25184: LD_STRING ","
25186: STR
25187: PUSH
25188: LD_VAR 0 6
25192: STR
25193: PUSH
25194: LD_STRING ","
25196: STR
25197: PUSH
25198: LD_VAR 0 7
25202: STR
25203: PUSH
25204: LD_STRING ")
25206: STR
25207: PPUSH
25208: CALL_OW 559
// end else
25212: GO 25221
// ToLua ( getStreamItemsFromMission("","","") ) ;
25214: LD_STRING getStreamItemsFromMission("","","")
25216: PPUSH
25217: CALL_OW 559
// end ;
25221: LD_VAR 0 2
25225: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25226: LD_EXP 63
25230: PUSH
25231: LD_EXP 68
25235: AND
25236: IFFALSE 25360
25238: GO 25240
25240: DISABLE
25241: LD_INT 0
25243: PPUSH
25244: PPUSH
// begin enable ;
25245: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25246: LD_ADDR_VAR 0 2
25250: PUSH
25251: LD_INT 22
25253: PUSH
25254: LD_OWVAR 2
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: LD_INT 34
25268: PUSH
25269: LD_INT 7
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 34
25278: PUSH
25279: LD_INT 45
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 34
25288: PUSH
25289: LD_INT 28
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 34
25298: PUSH
25299: LD_INT 47
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PPUSH
25317: CALL_OW 69
25321: ST_TO_ADDR
// if not tmp then
25322: LD_VAR 0 2
25326: NOT
25327: IFFALSE 25331
// exit ;
25329: GO 25360
// for i in tmp do
25331: LD_ADDR_VAR 0 1
25335: PUSH
25336: LD_VAR 0 2
25340: PUSH
25341: FOR_IN
25342: IFFALSE 25358
// begin SetLives ( i , 0 ) ;
25344: LD_VAR 0 1
25348: PPUSH
25349: LD_INT 0
25351: PPUSH
25352: CALL_OW 234
// end ;
25356: GO 25341
25358: POP
25359: POP
// end ;
25360: PPOPN 2
25362: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25363: LD_EXP 63
25367: PUSH
25368: LD_EXP 69
25372: AND
25373: IFFALSE 25457
25375: GO 25377
25377: DISABLE
25378: LD_INT 0
25380: PPUSH
25381: PPUSH
// begin enable ;
25382: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25383: LD_ADDR_VAR 0 2
25387: PUSH
25388: LD_INT 22
25390: PUSH
25391: LD_OWVAR 2
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 32
25402: PUSH
25403: LD_INT 3
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PPUSH
25414: CALL_OW 69
25418: ST_TO_ADDR
// if not tmp then
25419: LD_VAR 0 2
25423: NOT
25424: IFFALSE 25428
// exit ;
25426: GO 25457
// for i in tmp do
25428: LD_ADDR_VAR 0 1
25432: PUSH
25433: LD_VAR 0 2
25437: PUSH
25438: FOR_IN
25439: IFFALSE 25455
// begin SetLives ( i , 0 ) ;
25441: LD_VAR 0 1
25445: PPUSH
25446: LD_INT 0
25448: PPUSH
25449: CALL_OW 234
// end ;
25453: GO 25438
25455: POP
25456: POP
// end ;
25457: PPOPN 2
25459: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25460: LD_EXP 63
25464: PUSH
25465: LD_EXP 66
25469: AND
25470: IFFALSE 25563
25472: GO 25474
25474: DISABLE
25475: LD_INT 0
25477: PPUSH
// begin enable ;
25478: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25479: LD_ADDR_VAR 0 1
25483: PUSH
25484: LD_INT 22
25486: PUSH
25487: LD_OWVAR 2
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 2
25498: PUSH
25499: LD_INT 25
25501: PUSH
25502: LD_INT 5
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 25
25511: PUSH
25512: LD_INT 9
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 25
25521: PUSH
25522: LD_INT 8
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PPUSH
25539: CALL_OW 69
25543: PUSH
25544: FOR_IN
25545: IFFALSE 25561
// begin SetClass ( i , 1 ) ;
25547: LD_VAR 0 1
25551: PPUSH
25552: LD_INT 1
25554: PPUSH
25555: CALL_OW 336
// end ;
25559: GO 25544
25561: POP
25562: POP
// end ;
25563: PPOPN 1
25565: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25566: LD_EXP 63
25570: PUSH
25571: LD_EXP 67
25575: AND
25576: PUSH
25577: LD_OWVAR 65
25581: PUSH
25582: LD_INT 7
25584: LESS
25585: AND
25586: IFFALSE 25600
25588: GO 25590
25590: DISABLE
// begin enable ;
25591: ENABLE
// game_speed := 7 ;
25592: LD_ADDR_OWVAR 65
25596: PUSH
25597: LD_INT 7
25599: ST_TO_ADDR
// end ;
25600: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25601: LD_EXP 63
25605: PUSH
25606: LD_EXP 70
25610: AND
25611: IFFALSE 25813
25613: GO 25615
25615: DISABLE
25616: LD_INT 0
25618: PPUSH
25619: PPUSH
25620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25621: LD_ADDR_VAR 0 3
25625: PUSH
25626: LD_INT 81
25628: PUSH
25629: LD_OWVAR 2
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 21
25640: PUSH
25641: LD_INT 1
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PPUSH
25652: CALL_OW 69
25656: ST_TO_ADDR
// if not tmp then
25657: LD_VAR 0 3
25661: NOT
25662: IFFALSE 25666
// exit ;
25664: GO 25813
// if tmp > 5 then
25666: LD_VAR 0 3
25670: PUSH
25671: LD_INT 5
25673: GREATER
25674: IFFALSE 25686
// k := 5 else
25676: LD_ADDR_VAR 0 2
25680: PUSH
25681: LD_INT 5
25683: ST_TO_ADDR
25684: GO 25696
// k := tmp ;
25686: LD_ADDR_VAR 0 2
25690: PUSH
25691: LD_VAR 0 3
25695: ST_TO_ADDR
// for i := 1 to k do
25696: LD_ADDR_VAR 0 1
25700: PUSH
25701: DOUBLE
25702: LD_INT 1
25704: DEC
25705: ST_TO_ADDR
25706: LD_VAR 0 2
25710: PUSH
25711: FOR_TO
25712: IFFALSE 25811
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25714: LD_VAR 0 3
25718: PUSH
25719: LD_VAR 0 1
25723: ARRAY
25724: PPUSH
25725: LD_VAR 0 1
25729: PUSH
25730: LD_INT 4
25732: MOD
25733: PUSH
25734: LD_INT 1
25736: PLUS
25737: PPUSH
25738: CALL_OW 259
25742: PUSH
25743: LD_INT 10
25745: LESS
25746: IFFALSE 25809
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25748: LD_VAR 0 3
25752: PUSH
25753: LD_VAR 0 1
25757: ARRAY
25758: PPUSH
25759: LD_VAR 0 1
25763: PUSH
25764: LD_INT 4
25766: MOD
25767: PUSH
25768: LD_INT 1
25770: PLUS
25771: PPUSH
25772: LD_VAR 0 3
25776: PUSH
25777: LD_VAR 0 1
25781: ARRAY
25782: PPUSH
25783: LD_VAR 0 1
25787: PUSH
25788: LD_INT 4
25790: MOD
25791: PUSH
25792: LD_INT 1
25794: PLUS
25795: PPUSH
25796: CALL_OW 259
25800: PUSH
25801: LD_INT 1
25803: PLUS
25804: PPUSH
25805: CALL_OW 237
25809: GO 25711
25811: POP
25812: POP
// end ;
25813: PPOPN 3
25815: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25816: LD_EXP 63
25820: PUSH
25821: LD_EXP 71
25825: AND
25826: IFFALSE 25846
25828: GO 25830
25830: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25831: LD_INT 4
25833: PPUSH
25834: LD_OWVAR 2
25838: PPUSH
25839: LD_INT 0
25841: PPUSH
25842: CALL_OW 324
25846: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25847: LD_EXP 63
25851: PUSH
25852: LD_EXP 100
25856: AND
25857: IFFALSE 25877
25859: GO 25861
25861: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25862: LD_INT 19
25864: PPUSH
25865: LD_OWVAR 2
25869: PPUSH
25870: LD_INT 0
25872: PPUSH
25873: CALL_OW 324
25877: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25878: LD_EXP 63
25882: PUSH
25883: LD_EXP 72
25887: AND
25888: IFFALSE 25990
25890: GO 25892
25892: DISABLE
25893: LD_INT 0
25895: PPUSH
25896: PPUSH
// begin enable ;
25897: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25898: LD_ADDR_VAR 0 2
25902: PUSH
25903: LD_INT 22
25905: PUSH
25906: LD_OWVAR 2
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 2
25917: PUSH
25918: LD_INT 34
25920: PUSH
25921: LD_INT 11
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 34
25930: PUSH
25931: LD_INT 30
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: LIST
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PPUSH
25947: CALL_OW 69
25951: ST_TO_ADDR
// if not tmp then
25952: LD_VAR 0 2
25956: NOT
25957: IFFALSE 25961
// exit ;
25959: GO 25990
// for i in tmp do
25961: LD_ADDR_VAR 0 1
25965: PUSH
25966: LD_VAR 0 2
25970: PUSH
25971: FOR_IN
25972: IFFALSE 25988
// begin SetLives ( i , 0 ) ;
25974: LD_VAR 0 1
25978: PPUSH
25979: LD_INT 0
25981: PPUSH
25982: CALL_OW 234
// end ;
25986: GO 25971
25988: POP
25989: POP
// end ;
25990: PPOPN 2
25992: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25993: LD_EXP 63
25997: PUSH
25998: LD_EXP 73
26002: AND
26003: IFFALSE 26023
26005: GO 26007
26007: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26008: LD_INT 32
26010: PPUSH
26011: LD_OWVAR 2
26015: PPUSH
26016: LD_INT 0
26018: PPUSH
26019: CALL_OW 324
26023: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26024: LD_EXP 63
26028: PUSH
26029: LD_EXP 74
26033: AND
26034: IFFALSE 26215
26036: GO 26038
26038: DISABLE
26039: LD_INT 0
26041: PPUSH
26042: PPUSH
26043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26044: LD_ADDR_VAR 0 2
26048: PUSH
26049: LD_INT 22
26051: PUSH
26052: LD_OWVAR 2
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 33
26063: PUSH
26064: LD_INT 3
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PPUSH
26075: CALL_OW 69
26079: ST_TO_ADDR
// if not tmp then
26080: LD_VAR 0 2
26084: NOT
26085: IFFALSE 26089
// exit ;
26087: GO 26215
// side := 0 ;
26089: LD_ADDR_VAR 0 3
26093: PUSH
26094: LD_INT 0
26096: ST_TO_ADDR
// for i := 1 to 8 do
26097: LD_ADDR_VAR 0 1
26101: PUSH
26102: DOUBLE
26103: LD_INT 1
26105: DEC
26106: ST_TO_ADDR
26107: LD_INT 8
26109: PUSH
26110: FOR_TO
26111: IFFALSE 26159
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26113: LD_OWVAR 2
26117: PUSH
26118: LD_VAR 0 1
26122: NONEQUAL
26123: PUSH
26124: LD_OWVAR 2
26128: PPUSH
26129: LD_VAR 0 1
26133: PPUSH
26134: CALL_OW 81
26138: PUSH
26139: LD_INT 2
26141: EQUAL
26142: AND
26143: IFFALSE 26157
// begin side := i ;
26145: LD_ADDR_VAR 0 3
26149: PUSH
26150: LD_VAR 0 1
26154: ST_TO_ADDR
// break ;
26155: GO 26159
// end ;
26157: GO 26110
26159: POP
26160: POP
// if not side then
26161: LD_VAR 0 3
26165: NOT
26166: IFFALSE 26170
// exit ;
26168: GO 26215
// for i := 1 to tmp do
26170: LD_ADDR_VAR 0 1
26174: PUSH
26175: DOUBLE
26176: LD_INT 1
26178: DEC
26179: ST_TO_ADDR
26180: LD_VAR 0 2
26184: PUSH
26185: FOR_TO
26186: IFFALSE 26213
// if Prob ( 60 ) then
26188: LD_INT 60
26190: PPUSH
26191: CALL_OW 13
26195: IFFALSE 26211
// SetSide ( i , side ) ;
26197: LD_VAR 0 1
26201: PPUSH
26202: LD_VAR 0 3
26206: PPUSH
26207: CALL_OW 235
26211: GO 26185
26213: POP
26214: POP
// end ;
26215: PPOPN 3
26217: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26218: LD_EXP 63
26222: PUSH
26223: LD_EXP 76
26227: AND
26228: IFFALSE 26347
26230: GO 26232
26232: DISABLE
26233: LD_INT 0
26235: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26236: LD_ADDR_VAR 0 1
26240: PUSH
26241: LD_INT 22
26243: PUSH
26244: LD_OWVAR 2
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 21
26255: PUSH
26256: LD_INT 1
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 3
26265: PUSH
26266: LD_INT 23
26268: PUSH
26269: LD_INT 0
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: LIST
26284: PPUSH
26285: CALL_OW 69
26289: PUSH
26290: FOR_IN
26291: IFFALSE 26345
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26293: LD_VAR 0 1
26297: PPUSH
26298: CALL_OW 257
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: LD_INT 2
26308: PUSH
26309: LD_INT 3
26311: PUSH
26312: LD_INT 4
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: IN
26321: IFFALSE 26343
// SetClass ( un , rand ( 1 , 4 ) ) ;
26323: LD_VAR 0 1
26327: PPUSH
26328: LD_INT 1
26330: PPUSH
26331: LD_INT 4
26333: PPUSH
26334: CALL_OW 12
26338: PPUSH
26339: CALL_OW 336
26343: GO 26290
26345: POP
26346: POP
// end ;
26347: PPOPN 1
26349: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26350: LD_EXP 63
26354: PUSH
26355: LD_EXP 75
26359: AND
26360: IFFALSE 26439
26362: GO 26364
26364: DISABLE
26365: LD_INT 0
26367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26368: LD_ADDR_VAR 0 1
26372: PUSH
26373: LD_INT 22
26375: PUSH
26376: LD_OWVAR 2
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 21
26387: PUSH
26388: LD_INT 3
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PPUSH
26399: CALL_OW 69
26403: ST_TO_ADDR
// if not tmp then
26404: LD_VAR 0 1
26408: NOT
26409: IFFALSE 26413
// exit ;
26411: GO 26439
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26413: LD_VAR 0 1
26417: PUSH
26418: LD_INT 1
26420: PPUSH
26421: LD_VAR 0 1
26425: PPUSH
26426: CALL_OW 12
26430: ARRAY
26431: PPUSH
26432: LD_INT 100
26434: PPUSH
26435: CALL_OW 234
// end ;
26439: PPOPN 1
26441: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26442: LD_EXP 63
26446: PUSH
26447: LD_EXP 77
26451: AND
26452: IFFALSE 26550
26454: GO 26456
26456: DISABLE
26457: LD_INT 0
26459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26460: LD_ADDR_VAR 0 1
26464: PUSH
26465: LD_INT 22
26467: PUSH
26468: LD_OWVAR 2
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 21
26479: PUSH
26480: LD_INT 1
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PPUSH
26491: CALL_OW 69
26495: ST_TO_ADDR
// if not tmp then
26496: LD_VAR 0 1
26500: NOT
26501: IFFALSE 26505
// exit ;
26503: GO 26550
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26505: LD_VAR 0 1
26509: PUSH
26510: LD_INT 1
26512: PPUSH
26513: LD_VAR 0 1
26517: PPUSH
26518: CALL_OW 12
26522: ARRAY
26523: PPUSH
26524: LD_INT 1
26526: PPUSH
26527: LD_INT 4
26529: PPUSH
26530: CALL_OW 12
26534: PPUSH
26535: LD_INT 3000
26537: PPUSH
26538: LD_INT 9000
26540: PPUSH
26541: CALL_OW 12
26545: PPUSH
26546: CALL_OW 492
// end ;
26550: PPOPN 1
26552: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26553: LD_EXP 63
26557: PUSH
26558: LD_EXP 78
26562: AND
26563: IFFALSE 26583
26565: GO 26567
26567: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26568: LD_INT 1
26570: PPUSH
26571: LD_OWVAR 2
26575: PPUSH
26576: LD_INT 0
26578: PPUSH
26579: CALL_OW 324
26583: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26584: LD_EXP 63
26588: PUSH
26589: LD_EXP 79
26593: AND
26594: IFFALSE 26677
26596: GO 26598
26598: DISABLE
26599: LD_INT 0
26601: PPUSH
26602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26603: LD_ADDR_VAR 0 2
26607: PUSH
26608: LD_INT 22
26610: PUSH
26611: LD_OWVAR 2
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 21
26622: PUSH
26623: LD_INT 3
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PPUSH
26634: CALL_OW 69
26638: ST_TO_ADDR
// if not tmp then
26639: LD_VAR 0 2
26643: NOT
26644: IFFALSE 26648
// exit ;
26646: GO 26677
// for i in tmp do
26648: LD_ADDR_VAR 0 1
26652: PUSH
26653: LD_VAR 0 2
26657: PUSH
26658: FOR_IN
26659: IFFALSE 26675
// SetBLevel ( i , 10 ) ;
26661: LD_VAR 0 1
26665: PPUSH
26666: LD_INT 10
26668: PPUSH
26669: CALL_OW 241
26673: GO 26658
26675: POP
26676: POP
// end ;
26677: PPOPN 2
26679: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26680: LD_EXP 63
26684: PUSH
26685: LD_EXP 80
26689: AND
26690: IFFALSE 26801
26692: GO 26694
26694: DISABLE
26695: LD_INT 0
26697: PPUSH
26698: PPUSH
26699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26700: LD_ADDR_VAR 0 3
26704: PUSH
26705: LD_INT 22
26707: PUSH
26708: LD_OWVAR 2
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 25
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PPUSH
26731: CALL_OW 69
26735: ST_TO_ADDR
// if not tmp then
26736: LD_VAR 0 3
26740: NOT
26741: IFFALSE 26745
// exit ;
26743: GO 26801
// un := tmp [ rand ( 1 , tmp ) ] ;
26745: LD_ADDR_VAR 0 2
26749: PUSH
26750: LD_VAR 0 3
26754: PUSH
26755: LD_INT 1
26757: PPUSH
26758: LD_VAR 0 3
26762: PPUSH
26763: CALL_OW 12
26767: ARRAY
26768: ST_TO_ADDR
// if Crawls ( un ) then
26769: LD_VAR 0 2
26773: PPUSH
26774: CALL_OW 318
26778: IFFALSE 26789
// ComWalk ( un ) ;
26780: LD_VAR 0 2
26784: PPUSH
26785: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26789: LD_VAR 0 2
26793: PPUSH
26794: LD_INT 5
26796: PPUSH
26797: CALL_OW 336
// end ;
26801: PPOPN 3
26803: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26804: LD_EXP 63
26808: PUSH
26809: LD_EXP 81
26813: AND
26814: PUSH
26815: LD_OWVAR 67
26819: PUSH
26820: LD_INT 4
26822: LESS
26823: AND
26824: IFFALSE 26843
26826: GO 26828
26828: DISABLE
// begin Difficulty := Difficulty + 1 ;
26829: LD_ADDR_OWVAR 67
26833: PUSH
26834: LD_OWVAR 67
26838: PUSH
26839: LD_INT 1
26841: PLUS
26842: ST_TO_ADDR
// end ;
26843: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26844: LD_EXP 63
26848: PUSH
26849: LD_EXP 82
26853: AND
26854: IFFALSE 26957
26856: GO 26858
26858: DISABLE
26859: LD_INT 0
26861: PPUSH
// begin for i := 1 to 5 do
26862: LD_ADDR_VAR 0 1
26866: PUSH
26867: DOUBLE
26868: LD_INT 1
26870: DEC
26871: ST_TO_ADDR
26872: LD_INT 5
26874: PUSH
26875: FOR_TO
26876: IFFALSE 26955
// begin uc_nation := nation_nature ;
26878: LD_ADDR_OWVAR 21
26882: PUSH
26883: LD_INT 0
26885: ST_TO_ADDR
// uc_side := 0 ;
26886: LD_ADDR_OWVAR 20
26890: PUSH
26891: LD_INT 0
26893: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26894: LD_ADDR_OWVAR 29
26898: PUSH
26899: LD_INT 12
26901: PUSH
26902: LD_INT 12
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: ST_TO_ADDR
// hc_agressivity := 20 ;
26909: LD_ADDR_OWVAR 35
26913: PUSH
26914: LD_INT 20
26916: ST_TO_ADDR
// hc_class := class_tiger ;
26917: LD_ADDR_OWVAR 28
26921: PUSH
26922: LD_INT 14
26924: ST_TO_ADDR
// hc_gallery :=  ;
26925: LD_ADDR_OWVAR 33
26929: PUSH
26930: LD_STRING 
26932: ST_TO_ADDR
// hc_name :=  ;
26933: LD_ADDR_OWVAR 26
26937: PUSH
26938: LD_STRING 
26940: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26941: CALL_OW 44
26945: PPUSH
26946: LD_INT 0
26948: PPUSH
26949: CALL_OW 51
// end ;
26953: GO 26875
26955: POP
26956: POP
// end ;
26957: PPOPN 1
26959: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26960: LD_EXP 63
26964: PUSH
26965: LD_EXP 83
26969: AND
26970: IFFALSE 26979
26972: GO 26974
26974: DISABLE
// StreamSibBomb ;
26975: CALL 26980 0 0
26979: END
// export function StreamSibBomb ; var i , x , y ; begin
26980: LD_INT 0
26982: PPUSH
26983: PPUSH
26984: PPUSH
26985: PPUSH
// result := false ;
26986: LD_ADDR_VAR 0 1
26990: PUSH
26991: LD_INT 0
26993: ST_TO_ADDR
// for i := 1 to 16 do
26994: LD_ADDR_VAR 0 2
26998: PUSH
26999: DOUBLE
27000: LD_INT 1
27002: DEC
27003: ST_TO_ADDR
27004: LD_INT 16
27006: PUSH
27007: FOR_TO
27008: IFFALSE 27207
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27010: LD_ADDR_VAR 0 3
27014: PUSH
27015: LD_INT 10
27017: PUSH
27018: LD_INT 20
27020: PUSH
27021: LD_INT 30
27023: PUSH
27024: LD_INT 40
27026: PUSH
27027: LD_INT 50
27029: PUSH
27030: LD_INT 60
27032: PUSH
27033: LD_INT 70
27035: PUSH
27036: LD_INT 80
27038: PUSH
27039: LD_INT 90
27041: PUSH
27042: LD_INT 100
27044: PUSH
27045: LD_INT 110
27047: PUSH
27048: LD_INT 120
27050: PUSH
27051: LD_INT 130
27053: PUSH
27054: LD_INT 140
27056: PUSH
27057: LD_INT 150
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 1
27079: PPUSH
27080: LD_INT 15
27082: PPUSH
27083: CALL_OW 12
27087: ARRAY
27088: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27089: LD_ADDR_VAR 0 4
27093: PUSH
27094: LD_INT 10
27096: PUSH
27097: LD_INT 20
27099: PUSH
27100: LD_INT 30
27102: PUSH
27103: LD_INT 40
27105: PUSH
27106: LD_INT 50
27108: PUSH
27109: LD_INT 60
27111: PUSH
27112: LD_INT 70
27114: PUSH
27115: LD_INT 80
27117: PUSH
27118: LD_INT 90
27120: PUSH
27121: LD_INT 100
27123: PUSH
27124: LD_INT 110
27126: PUSH
27127: LD_INT 120
27129: PUSH
27130: LD_INT 130
27132: PUSH
27133: LD_INT 140
27135: PUSH
27136: LD_INT 150
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: PPUSH
27159: LD_INT 15
27161: PPUSH
27162: CALL_OW 12
27166: ARRAY
27167: ST_TO_ADDR
// if ValidHex ( x , y ) then
27168: LD_VAR 0 3
27172: PPUSH
27173: LD_VAR 0 4
27177: PPUSH
27178: CALL_OW 488
27182: IFFALSE 27205
// begin result := [ x , y ] ;
27184: LD_ADDR_VAR 0 1
27188: PUSH
27189: LD_VAR 0 3
27193: PUSH
27194: LD_VAR 0 4
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: ST_TO_ADDR
// break ;
27203: GO 27207
// end ; end ;
27205: GO 27007
27207: POP
27208: POP
// if result then
27209: LD_VAR 0 1
27213: IFFALSE 27273
// begin ToLua ( playSibBomb() ) ;
27215: LD_STRING playSibBomb()
27217: PPUSH
27218: CALL_OW 559
// wait ( 0 0$14 ) ;
27222: LD_INT 490
27224: PPUSH
27225: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27229: LD_VAR 0 1
27233: PUSH
27234: LD_INT 1
27236: ARRAY
27237: PPUSH
27238: LD_VAR 0 1
27242: PUSH
27243: LD_INT 2
27245: ARRAY
27246: PPUSH
27247: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27251: LD_VAR 0 1
27255: PUSH
27256: LD_INT 1
27258: ARRAY
27259: PPUSH
27260: LD_VAR 0 1
27264: PUSH
27265: LD_INT 2
27267: ARRAY
27268: PPUSH
27269: CALL_OW 429
// end ; end ;
27273: LD_VAR 0 1
27277: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27278: LD_EXP 63
27282: PUSH
27283: LD_EXP 85
27287: AND
27288: IFFALSE 27300
27290: GO 27292
27292: DISABLE
// YouLost (  ) ;
27293: LD_STRING 
27295: PPUSH
27296: CALL_OW 104
27300: END
// every 0 0$1 trigger StreamModeActive and sFog do
27301: LD_EXP 63
27305: PUSH
27306: LD_EXP 84
27310: AND
27311: IFFALSE 27325
27313: GO 27315
27315: DISABLE
// FogOff ( your_side ) ;
27316: LD_OWVAR 2
27320: PPUSH
27321: CALL_OW 344
27325: END
// every 0 0$1 trigger StreamModeActive and sSun do
27326: LD_EXP 63
27330: PUSH
27331: LD_EXP 86
27335: AND
27336: IFFALSE 27364
27338: GO 27340
27340: DISABLE
// begin solar_recharge_percent := 0 ;
27341: LD_ADDR_OWVAR 79
27345: PUSH
27346: LD_INT 0
27348: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27349: LD_INT 10500
27351: PPUSH
27352: CALL_OW 67
// solar_recharge_percent := 100 ;
27356: LD_ADDR_OWVAR 79
27360: PUSH
27361: LD_INT 100
27363: ST_TO_ADDR
// end ;
27364: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27365: LD_EXP 63
27369: PUSH
27370: LD_EXP 87
27374: AND
27375: IFFALSE 27614
27377: GO 27379
27379: DISABLE
27380: LD_INT 0
27382: PPUSH
27383: PPUSH
27384: PPUSH
// begin tmp := [ ] ;
27385: LD_ADDR_VAR 0 3
27389: PUSH
27390: EMPTY
27391: ST_TO_ADDR
// for i := 1 to 6 do
27392: LD_ADDR_VAR 0 1
27396: PUSH
27397: DOUBLE
27398: LD_INT 1
27400: DEC
27401: ST_TO_ADDR
27402: LD_INT 6
27404: PUSH
27405: FOR_TO
27406: IFFALSE 27511
// begin uc_nation := nation_nature ;
27408: LD_ADDR_OWVAR 21
27412: PUSH
27413: LD_INT 0
27415: ST_TO_ADDR
// uc_side := 0 ;
27416: LD_ADDR_OWVAR 20
27420: PUSH
27421: LD_INT 0
27423: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27424: LD_ADDR_OWVAR 29
27428: PUSH
27429: LD_INT 12
27431: PUSH
27432: LD_INT 12
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: ST_TO_ADDR
// hc_agressivity := 20 ;
27439: LD_ADDR_OWVAR 35
27443: PUSH
27444: LD_INT 20
27446: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27447: LD_ADDR_OWVAR 28
27451: PUSH
27452: LD_INT 17
27454: ST_TO_ADDR
// hc_gallery :=  ;
27455: LD_ADDR_OWVAR 33
27459: PUSH
27460: LD_STRING 
27462: ST_TO_ADDR
// hc_name :=  ;
27463: LD_ADDR_OWVAR 26
27467: PUSH
27468: LD_STRING 
27470: ST_TO_ADDR
// un := CreateHuman ;
27471: LD_ADDR_VAR 0 2
27475: PUSH
27476: CALL_OW 44
27480: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27481: LD_VAR 0 2
27485: PPUSH
27486: LD_INT 1
27488: PPUSH
27489: CALL_OW 51
// tmp := tmp ^ un ;
27493: LD_ADDR_VAR 0 3
27497: PUSH
27498: LD_VAR 0 3
27502: PUSH
27503: LD_VAR 0 2
27507: ADD
27508: ST_TO_ADDR
// end ;
27509: GO 27405
27511: POP
27512: POP
// repeat wait ( 0 0$1 ) ;
27513: LD_INT 35
27515: PPUSH
27516: CALL_OW 67
// for un in tmp do
27520: LD_ADDR_VAR 0 2
27524: PUSH
27525: LD_VAR 0 3
27529: PUSH
27530: FOR_IN
27531: IFFALSE 27605
// begin if IsDead ( un ) then
27533: LD_VAR 0 2
27537: PPUSH
27538: CALL_OW 301
27542: IFFALSE 27562
// begin tmp := tmp diff un ;
27544: LD_ADDR_VAR 0 3
27548: PUSH
27549: LD_VAR 0 3
27553: PUSH
27554: LD_VAR 0 2
27558: DIFF
27559: ST_TO_ADDR
// continue ;
27560: GO 27530
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27562: LD_VAR 0 2
27566: PPUSH
27567: LD_INT 3
27569: PUSH
27570: LD_INT 22
27572: PUSH
27573: LD_INT 0
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PPUSH
27584: CALL_OW 69
27588: PPUSH
27589: LD_VAR 0 2
27593: PPUSH
27594: CALL_OW 74
27598: PPUSH
27599: CALL_OW 115
// end ;
27603: GO 27530
27605: POP
27606: POP
// until not tmp ;
27607: LD_VAR 0 3
27611: NOT
27612: IFFALSE 27513
// end ;
27614: PPOPN 3
27616: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27617: LD_EXP 63
27621: PUSH
27622: LD_EXP 88
27626: AND
27627: IFFALSE 27681
27629: GO 27631
27631: DISABLE
// begin ToLua ( displayTroll(); ) ;
27632: LD_STRING displayTroll();
27634: PPUSH
27635: CALL_OW 559
// wait ( 3 3$00 ) ;
27639: LD_INT 6300
27641: PPUSH
27642: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27646: LD_STRING hideTroll();
27648: PPUSH
27649: CALL_OW 559
// wait ( 1 1$00 ) ;
27653: LD_INT 2100
27655: PPUSH
27656: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27660: LD_STRING displayTroll();
27662: PPUSH
27663: CALL_OW 559
// wait ( 1 1$00 ) ;
27667: LD_INT 2100
27669: PPUSH
27670: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27674: LD_STRING hideTroll();
27676: PPUSH
27677: CALL_OW 559
// end ;
27681: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27682: LD_EXP 63
27686: PUSH
27687: LD_EXP 89
27691: AND
27692: IFFALSE 27755
27694: GO 27696
27696: DISABLE
27697: LD_INT 0
27699: PPUSH
// begin p := 0 ;
27700: LD_ADDR_VAR 0 1
27704: PUSH
27705: LD_INT 0
27707: ST_TO_ADDR
// repeat game_speed := 1 ;
27708: LD_ADDR_OWVAR 65
27712: PUSH
27713: LD_INT 1
27715: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27716: LD_INT 35
27718: PPUSH
27719: CALL_OW 67
// p := p + 1 ;
27723: LD_ADDR_VAR 0 1
27727: PUSH
27728: LD_VAR 0 1
27732: PUSH
27733: LD_INT 1
27735: PLUS
27736: ST_TO_ADDR
// until p >= 60 ;
27737: LD_VAR 0 1
27741: PUSH
27742: LD_INT 60
27744: GREATEREQUAL
27745: IFFALSE 27708
// game_speed := 4 ;
27747: LD_ADDR_OWVAR 65
27751: PUSH
27752: LD_INT 4
27754: ST_TO_ADDR
// end ;
27755: PPOPN 1
27757: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27758: LD_EXP 63
27762: PUSH
27763: LD_EXP 90
27767: AND
27768: IFFALSE 27914
27770: GO 27772
27772: DISABLE
27773: LD_INT 0
27775: PPUSH
27776: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27777: LD_ADDR_VAR 0 1
27781: PUSH
27782: LD_INT 22
27784: PUSH
27785: LD_OWVAR 2
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 2
27796: PUSH
27797: LD_INT 30
27799: PUSH
27800: LD_INT 0
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 30
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: LIST
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PPUSH
27826: CALL_OW 69
27830: ST_TO_ADDR
// if not depot then
27831: LD_VAR 0 1
27835: NOT
27836: IFFALSE 27840
// exit ;
27838: GO 27914
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27840: LD_ADDR_VAR 0 2
27844: PUSH
27845: LD_VAR 0 1
27849: PUSH
27850: LD_INT 1
27852: PPUSH
27853: LD_VAR 0 1
27857: PPUSH
27858: CALL_OW 12
27862: ARRAY
27863: PPUSH
27864: CALL_OW 274
27868: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27869: LD_VAR 0 2
27873: PPUSH
27874: LD_INT 1
27876: PPUSH
27877: LD_INT 0
27879: PPUSH
27880: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27884: LD_VAR 0 2
27888: PPUSH
27889: LD_INT 2
27891: PPUSH
27892: LD_INT 0
27894: PPUSH
27895: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27899: LD_VAR 0 2
27903: PPUSH
27904: LD_INT 3
27906: PPUSH
27907: LD_INT 0
27909: PPUSH
27910: CALL_OW 277
// end ;
27914: PPOPN 2
27916: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27917: LD_EXP 63
27921: PUSH
27922: LD_EXP 91
27926: AND
27927: IFFALSE 28024
27929: GO 27931
27931: DISABLE
27932: LD_INT 0
27934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27935: LD_ADDR_VAR 0 1
27939: PUSH
27940: LD_INT 22
27942: PUSH
27943: LD_OWVAR 2
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 21
27954: PUSH
27955: LD_INT 1
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 3
27964: PUSH
27965: LD_INT 23
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: LIST
27983: PPUSH
27984: CALL_OW 69
27988: ST_TO_ADDR
// if not tmp then
27989: LD_VAR 0 1
27993: NOT
27994: IFFALSE 27998
// exit ;
27996: GO 28024
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27998: LD_VAR 0 1
28002: PUSH
28003: LD_INT 1
28005: PPUSH
28006: LD_VAR 0 1
28010: PPUSH
28011: CALL_OW 12
28015: ARRAY
28016: PPUSH
28017: LD_INT 200
28019: PPUSH
28020: CALL_OW 234
// end ;
28024: PPOPN 1
28026: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28027: LD_EXP 63
28031: PUSH
28032: LD_EXP 92
28036: AND
28037: IFFALSE 28116
28039: GO 28041
28041: DISABLE
28042: LD_INT 0
28044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28045: LD_ADDR_VAR 0 1
28049: PUSH
28050: LD_INT 22
28052: PUSH
28053: LD_OWVAR 2
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 21
28064: PUSH
28065: LD_INT 2
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PPUSH
28076: CALL_OW 69
28080: ST_TO_ADDR
// if not tmp then
28081: LD_VAR 0 1
28085: NOT
28086: IFFALSE 28090
// exit ;
28088: GO 28116
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28090: LD_VAR 0 1
28094: PUSH
28095: LD_INT 1
28097: PPUSH
28098: LD_VAR 0 1
28102: PPUSH
28103: CALL_OW 12
28107: ARRAY
28108: PPUSH
28109: LD_INT 60
28111: PPUSH
28112: CALL_OW 234
// end ;
28116: PPOPN 1
28118: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28119: LD_EXP 63
28123: PUSH
28124: LD_EXP 93
28128: AND
28129: IFFALSE 28228
28131: GO 28133
28133: DISABLE
28134: LD_INT 0
28136: PPUSH
28137: PPUSH
// begin enable ;
28138: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28139: LD_ADDR_VAR 0 1
28143: PUSH
28144: LD_INT 22
28146: PUSH
28147: LD_OWVAR 2
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 61
28158: PUSH
28159: EMPTY
28160: LIST
28161: PUSH
28162: LD_INT 33
28164: PUSH
28165: LD_INT 2
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: LIST
28176: PPUSH
28177: CALL_OW 69
28181: ST_TO_ADDR
// if not tmp then
28182: LD_VAR 0 1
28186: NOT
28187: IFFALSE 28191
// exit ;
28189: GO 28228
// for i in tmp do
28191: LD_ADDR_VAR 0 2
28195: PUSH
28196: LD_VAR 0 1
28200: PUSH
28201: FOR_IN
28202: IFFALSE 28226
// if IsControledBy ( i ) then
28204: LD_VAR 0 2
28208: PPUSH
28209: CALL_OW 312
28213: IFFALSE 28224
// ComUnlink ( i ) ;
28215: LD_VAR 0 2
28219: PPUSH
28220: CALL_OW 136
28224: GO 28201
28226: POP
28227: POP
// end ;
28228: PPOPN 2
28230: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28231: LD_EXP 63
28235: PUSH
28236: LD_EXP 94
28240: AND
28241: IFFALSE 28381
28243: GO 28245
28245: DISABLE
28246: LD_INT 0
28248: PPUSH
28249: PPUSH
// begin ToLua ( displayPowell(); ) ;
28250: LD_STRING displayPowell();
28252: PPUSH
28253: CALL_OW 559
// uc_side := 0 ;
28257: LD_ADDR_OWVAR 20
28261: PUSH
28262: LD_INT 0
28264: ST_TO_ADDR
// uc_nation := 2 ;
28265: LD_ADDR_OWVAR 21
28269: PUSH
28270: LD_INT 2
28272: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28273: LD_ADDR_OWVAR 37
28277: PUSH
28278: LD_INT 14
28280: ST_TO_ADDR
// vc_engine := engine_siberite ;
28281: LD_ADDR_OWVAR 39
28285: PUSH
28286: LD_INT 3
28288: ST_TO_ADDR
// vc_control := control_apeman ;
28289: LD_ADDR_OWVAR 38
28293: PUSH
28294: LD_INT 5
28296: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28297: LD_ADDR_OWVAR 40
28301: PUSH
28302: LD_INT 29
28304: ST_TO_ADDR
// un := CreateVehicle ;
28305: LD_ADDR_VAR 0 2
28309: PUSH
28310: CALL_OW 45
28314: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28315: LD_VAR 0 2
28319: PPUSH
28320: LD_INT 1
28322: PPUSH
28323: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28327: LD_INT 35
28329: PPUSH
28330: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28334: LD_VAR 0 2
28338: PPUSH
28339: LD_INT 22
28341: PUSH
28342: LD_OWVAR 2
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PPUSH
28351: CALL_OW 69
28355: PPUSH
28356: LD_VAR 0 2
28360: PPUSH
28361: CALL_OW 74
28365: PPUSH
28366: CALL_OW 115
// until IsDead ( un ) ;
28370: LD_VAR 0 2
28374: PPUSH
28375: CALL_OW 301
28379: IFFALSE 28327
// end ;
28381: PPOPN 2
28383: END
// every 0 0$1 trigger StreamModeActive and sStu do
28384: LD_EXP 63
28388: PUSH
28389: LD_EXP 102
28393: AND
28394: IFFALSE 28410
28396: GO 28398
28398: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28399: LD_STRING displayStucuk();
28401: PPUSH
28402: CALL_OW 559
// ResetFog ;
28406: CALL_OW 335
// end ;
28410: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28411: LD_EXP 63
28415: PUSH
28416: LD_EXP 95
28420: AND
28421: IFFALSE 28562
28423: GO 28425
28425: DISABLE
28426: LD_INT 0
28428: PPUSH
28429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28430: LD_ADDR_VAR 0 2
28434: PUSH
28435: LD_INT 22
28437: PUSH
28438: LD_OWVAR 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 21
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 69
28465: ST_TO_ADDR
// if not tmp then
28466: LD_VAR 0 2
28470: NOT
28471: IFFALSE 28475
// exit ;
28473: GO 28562
// un := tmp [ rand ( 1 , tmp ) ] ;
28475: LD_ADDR_VAR 0 1
28479: PUSH
28480: LD_VAR 0 2
28484: PUSH
28485: LD_INT 1
28487: PPUSH
28488: LD_VAR 0 2
28492: PPUSH
28493: CALL_OW 12
28497: ARRAY
28498: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28499: LD_VAR 0 1
28503: PPUSH
28504: LD_INT 0
28506: PPUSH
28507: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28511: LD_VAR 0 1
28515: PPUSH
28516: LD_OWVAR 3
28520: PUSH
28521: LD_VAR 0 1
28525: DIFF
28526: PPUSH
28527: LD_VAR 0 1
28531: PPUSH
28532: CALL_OW 74
28536: PPUSH
28537: CALL_OW 115
// wait ( 0 0$20 ) ;
28541: LD_INT 700
28543: PPUSH
28544: CALL_OW 67
// SetSide ( un , your_side ) ;
28548: LD_VAR 0 1
28552: PPUSH
28553: LD_OWVAR 2
28557: PPUSH
28558: CALL_OW 235
// end ;
28562: PPOPN 2
28564: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28565: LD_EXP 63
28569: PUSH
28570: LD_EXP 96
28574: AND
28575: IFFALSE 28681
28577: GO 28579
28579: DISABLE
28580: LD_INT 0
28582: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28583: LD_ADDR_VAR 0 1
28587: PUSH
28588: LD_INT 22
28590: PUSH
28591: LD_OWVAR 2
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 2
28602: PUSH
28603: LD_INT 30
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 30
28615: PUSH
28616: LD_INT 1
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: LIST
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PPUSH
28632: CALL_OW 69
28636: ST_TO_ADDR
// if not depot then
28637: LD_VAR 0 1
28641: NOT
28642: IFFALSE 28646
// exit ;
28644: GO 28681
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28646: LD_VAR 0 1
28650: PUSH
28651: LD_INT 1
28653: ARRAY
28654: PPUSH
28655: CALL_OW 250
28659: PPUSH
28660: LD_VAR 0 1
28664: PUSH
28665: LD_INT 1
28667: ARRAY
28668: PPUSH
28669: CALL_OW 251
28673: PPUSH
28674: LD_INT 70
28676: PPUSH
28677: CALL_OW 495
// end ;
28681: PPOPN 1
28683: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28684: LD_EXP 63
28688: PUSH
28689: LD_EXP 97
28693: AND
28694: IFFALSE 28905
28696: GO 28698
28698: DISABLE
28699: LD_INT 0
28701: PPUSH
28702: PPUSH
28703: PPUSH
28704: PPUSH
28705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28706: LD_ADDR_VAR 0 5
28710: PUSH
28711: LD_INT 22
28713: PUSH
28714: LD_OWVAR 2
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 21
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PPUSH
28737: CALL_OW 69
28741: ST_TO_ADDR
// if not tmp then
28742: LD_VAR 0 5
28746: NOT
28747: IFFALSE 28751
// exit ;
28749: GO 28905
// for i in tmp do
28751: LD_ADDR_VAR 0 1
28755: PUSH
28756: LD_VAR 0 5
28760: PUSH
28761: FOR_IN
28762: IFFALSE 28903
// begin d := rand ( 0 , 5 ) ;
28764: LD_ADDR_VAR 0 4
28768: PUSH
28769: LD_INT 0
28771: PPUSH
28772: LD_INT 5
28774: PPUSH
28775: CALL_OW 12
28779: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28780: LD_ADDR_VAR 0 2
28784: PUSH
28785: LD_VAR 0 1
28789: PPUSH
28790: CALL_OW 250
28794: PPUSH
28795: LD_VAR 0 4
28799: PPUSH
28800: LD_INT 3
28802: PPUSH
28803: LD_INT 12
28805: PPUSH
28806: CALL_OW 12
28810: PPUSH
28811: CALL_OW 272
28815: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28816: LD_ADDR_VAR 0 3
28820: PUSH
28821: LD_VAR 0 1
28825: PPUSH
28826: CALL_OW 251
28830: PPUSH
28831: LD_VAR 0 4
28835: PPUSH
28836: LD_INT 3
28838: PPUSH
28839: LD_INT 12
28841: PPUSH
28842: CALL_OW 12
28846: PPUSH
28847: CALL_OW 273
28851: ST_TO_ADDR
// if ValidHex ( x , y ) then
28852: LD_VAR 0 2
28856: PPUSH
28857: LD_VAR 0 3
28861: PPUSH
28862: CALL_OW 488
28866: IFFALSE 28901
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28868: LD_VAR 0 1
28872: PPUSH
28873: LD_VAR 0 2
28877: PPUSH
28878: LD_VAR 0 3
28882: PPUSH
28883: LD_INT 3
28885: PPUSH
28886: LD_INT 6
28888: PPUSH
28889: CALL_OW 12
28893: PPUSH
28894: LD_INT 1
28896: PPUSH
28897: CALL_OW 483
// end ;
28901: GO 28761
28903: POP
28904: POP
// end ;
28905: PPOPN 5
28907: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28908: LD_EXP 63
28912: PUSH
28913: LD_EXP 98
28917: AND
28918: IFFALSE 29012
28920: GO 28922
28922: DISABLE
28923: LD_INT 0
28925: PPUSH
28926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28927: LD_ADDR_VAR 0 2
28931: PUSH
28932: LD_INT 22
28934: PUSH
28935: LD_OWVAR 2
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 32
28946: PUSH
28947: LD_INT 1
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 21
28956: PUSH
28957: LD_INT 2
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: LIST
28968: PPUSH
28969: CALL_OW 69
28973: ST_TO_ADDR
// if not tmp then
28974: LD_VAR 0 2
28978: NOT
28979: IFFALSE 28983
// exit ;
28981: GO 29012
// for i in tmp do
28983: LD_ADDR_VAR 0 1
28987: PUSH
28988: LD_VAR 0 2
28992: PUSH
28993: FOR_IN
28994: IFFALSE 29010
// SetFuel ( i , 0 ) ;
28996: LD_VAR 0 1
29000: PPUSH
29001: LD_INT 0
29003: PPUSH
29004: CALL_OW 240
29008: GO 28993
29010: POP
29011: POP
// end ;
29012: PPOPN 2
29014: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29015: LD_EXP 63
29019: PUSH
29020: LD_EXP 99
29024: AND
29025: IFFALSE 29091
29027: GO 29029
29029: DISABLE
29030: LD_INT 0
29032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29033: LD_ADDR_VAR 0 1
29037: PUSH
29038: LD_INT 22
29040: PUSH
29041: LD_OWVAR 2
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 30
29052: PUSH
29053: LD_INT 29
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PPUSH
29064: CALL_OW 69
29068: ST_TO_ADDR
// if not tmp then
29069: LD_VAR 0 1
29073: NOT
29074: IFFALSE 29078
// exit ;
29076: GO 29091
// DestroyUnit ( tmp [ 1 ] ) ;
29078: LD_VAR 0 1
29082: PUSH
29083: LD_INT 1
29085: ARRAY
29086: PPUSH
29087: CALL_OW 65
// end ;
29091: PPOPN 1
29093: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29094: LD_EXP 63
29098: PUSH
29099: LD_EXP 101
29103: AND
29104: IFFALSE 29233
29106: GO 29108
29108: DISABLE
29109: LD_INT 0
29111: PPUSH
// begin uc_side := 0 ;
29112: LD_ADDR_OWVAR 20
29116: PUSH
29117: LD_INT 0
29119: ST_TO_ADDR
// uc_nation := nation_arabian ;
29120: LD_ADDR_OWVAR 21
29124: PUSH
29125: LD_INT 2
29127: ST_TO_ADDR
// hc_gallery :=  ;
29128: LD_ADDR_OWVAR 33
29132: PUSH
29133: LD_STRING 
29135: ST_TO_ADDR
// hc_name :=  ;
29136: LD_ADDR_OWVAR 26
29140: PUSH
29141: LD_STRING 
29143: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29144: LD_INT 1
29146: PPUSH
29147: LD_INT 11
29149: PPUSH
29150: LD_INT 10
29152: PPUSH
29153: CALL_OW 380
// un := CreateHuman ;
29157: LD_ADDR_VAR 0 1
29161: PUSH
29162: CALL_OW 44
29166: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29167: LD_VAR 0 1
29171: PPUSH
29172: LD_INT 1
29174: PPUSH
29175: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29179: LD_INT 35
29181: PPUSH
29182: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29186: LD_VAR 0 1
29190: PPUSH
29191: LD_INT 22
29193: PUSH
29194: LD_OWVAR 2
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PPUSH
29203: CALL_OW 69
29207: PPUSH
29208: LD_VAR 0 1
29212: PPUSH
29213: CALL_OW 74
29217: PPUSH
29218: CALL_OW 115
// until IsDead ( un ) ;
29222: LD_VAR 0 1
29226: PPUSH
29227: CALL_OW 301
29231: IFFALSE 29179
// end ;
29233: PPOPN 1
29235: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29236: LD_EXP 63
29240: PUSH
29241: LD_EXP 103
29245: AND
29246: IFFALSE 29258
29248: GO 29250
29250: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29251: LD_STRING earthquake(getX(game), 0, 32)
29253: PPUSH
29254: CALL_OW 559
29258: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29259: LD_EXP 63
29263: PUSH
29264: LD_EXP 104
29268: AND
29269: IFFALSE 29360
29271: GO 29273
29273: DISABLE
29274: LD_INT 0
29276: PPUSH
// begin enable ;
29277: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29278: LD_ADDR_VAR 0 1
29282: PUSH
29283: LD_INT 22
29285: PUSH
29286: LD_OWVAR 2
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 21
29297: PUSH
29298: LD_INT 2
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 33
29307: PUSH
29308: LD_INT 3
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: LIST
29319: PPUSH
29320: CALL_OW 69
29324: ST_TO_ADDR
// if not tmp then
29325: LD_VAR 0 1
29329: NOT
29330: IFFALSE 29334
// exit ;
29332: GO 29360
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29334: LD_VAR 0 1
29338: PUSH
29339: LD_INT 1
29341: PPUSH
29342: LD_VAR 0 1
29346: PPUSH
29347: CALL_OW 12
29351: ARRAY
29352: PPUSH
29353: LD_INT 1
29355: PPUSH
29356: CALL_OW 234
// end ;
29360: PPOPN 1
29362: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29363: LD_EXP 63
29367: PUSH
29368: LD_EXP 105
29372: AND
29373: IFFALSE 29514
29375: GO 29377
29377: DISABLE
29378: LD_INT 0
29380: PPUSH
29381: PPUSH
29382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29383: LD_ADDR_VAR 0 3
29387: PUSH
29388: LD_INT 22
29390: PUSH
29391: LD_OWVAR 2
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 25
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PPUSH
29414: CALL_OW 69
29418: ST_TO_ADDR
// if not tmp then
29419: LD_VAR 0 3
29423: NOT
29424: IFFALSE 29428
// exit ;
29426: GO 29514
// un := tmp [ rand ( 1 , tmp ) ] ;
29428: LD_ADDR_VAR 0 2
29432: PUSH
29433: LD_VAR 0 3
29437: PUSH
29438: LD_INT 1
29440: PPUSH
29441: LD_VAR 0 3
29445: PPUSH
29446: CALL_OW 12
29450: ARRAY
29451: ST_TO_ADDR
// if Crawls ( un ) then
29452: LD_VAR 0 2
29456: PPUSH
29457: CALL_OW 318
29461: IFFALSE 29472
// ComWalk ( un ) ;
29463: LD_VAR 0 2
29467: PPUSH
29468: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29472: LD_VAR 0 2
29476: PPUSH
29477: LD_INT 9
29479: PPUSH
29480: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29484: LD_INT 28
29486: PPUSH
29487: LD_OWVAR 2
29491: PPUSH
29492: LD_INT 2
29494: PPUSH
29495: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29499: LD_INT 29
29501: PPUSH
29502: LD_OWVAR 2
29506: PPUSH
29507: LD_INT 2
29509: PPUSH
29510: CALL_OW 322
// end ;
29514: PPOPN 3
29516: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29517: LD_EXP 63
29521: PUSH
29522: LD_EXP 106
29526: AND
29527: IFFALSE 29638
29529: GO 29531
29531: DISABLE
29532: LD_INT 0
29534: PPUSH
29535: PPUSH
29536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29537: LD_ADDR_VAR 0 3
29541: PUSH
29542: LD_INT 22
29544: PUSH
29545: LD_OWVAR 2
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 25
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PPUSH
29568: CALL_OW 69
29572: ST_TO_ADDR
// if not tmp then
29573: LD_VAR 0 3
29577: NOT
29578: IFFALSE 29582
// exit ;
29580: GO 29638
// un := tmp [ rand ( 1 , tmp ) ] ;
29582: LD_ADDR_VAR 0 2
29586: PUSH
29587: LD_VAR 0 3
29591: PUSH
29592: LD_INT 1
29594: PPUSH
29595: LD_VAR 0 3
29599: PPUSH
29600: CALL_OW 12
29604: ARRAY
29605: ST_TO_ADDR
// if Crawls ( un ) then
29606: LD_VAR 0 2
29610: PPUSH
29611: CALL_OW 318
29615: IFFALSE 29626
// ComWalk ( un ) ;
29617: LD_VAR 0 2
29621: PPUSH
29622: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29626: LD_VAR 0 2
29630: PPUSH
29631: LD_INT 8
29633: PPUSH
29634: CALL_OW 336
// end ;
29638: PPOPN 3
29640: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29641: LD_EXP 63
29645: PUSH
29646: LD_EXP 107
29650: AND
29651: IFFALSE 29795
29653: GO 29655
29655: DISABLE
29656: LD_INT 0
29658: PPUSH
29659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29660: LD_ADDR_VAR 0 2
29664: PUSH
29665: LD_INT 22
29667: PUSH
29668: LD_OWVAR 2
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 21
29679: PUSH
29680: LD_INT 2
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 2
29689: PUSH
29690: LD_INT 34
29692: PUSH
29693: LD_INT 12
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 34
29702: PUSH
29703: LD_INT 51
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 34
29712: PUSH
29713: LD_INT 32
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: LIST
29730: PPUSH
29731: CALL_OW 69
29735: ST_TO_ADDR
// if not tmp then
29736: LD_VAR 0 2
29740: NOT
29741: IFFALSE 29745
// exit ;
29743: GO 29795
// for i in tmp do
29745: LD_ADDR_VAR 0 1
29749: PUSH
29750: LD_VAR 0 2
29754: PUSH
29755: FOR_IN
29756: IFFALSE 29793
// if GetCargo ( i , mat_artifact ) = 0 then
29758: LD_VAR 0 1
29762: PPUSH
29763: LD_INT 4
29765: PPUSH
29766: CALL_OW 289
29770: PUSH
29771: LD_INT 0
29773: EQUAL
29774: IFFALSE 29791
// SetCargo ( i , mat_siberit , 100 ) ;
29776: LD_VAR 0 1
29780: PPUSH
29781: LD_INT 3
29783: PPUSH
29784: LD_INT 100
29786: PPUSH
29787: CALL_OW 290
29791: GO 29755
29793: POP
29794: POP
// end ;
29795: PPOPN 2
29797: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29798: LD_EXP 63
29802: PUSH
29803: LD_EXP 108
29807: AND
29808: IFFALSE 29991
29810: GO 29812
29812: DISABLE
29813: LD_INT 0
29815: PPUSH
29816: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29817: LD_ADDR_VAR 0 2
29821: PUSH
29822: LD_INT 22
29824: PUSH
29825: LD_OWVAR 2
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PPUSH
29834: CALL_OW 69
29838: ST_TO_ADDR
// if not tmp then
29839: LD_VAR 0 2
29843: NOT
29844: IFFALSE 29848
// exit ;
29846: GO 29991
// for i := 1 to 2 do
29848: LD_ADDR_VAR 0 1
29852: PUSH
29853: DOUBLE
29854: LD_INT 1
29856: DEC
29857: ST_TO_ADDR
29858: LD_INT 2
29860: PUSH
29861: FOR_TO
29862: IFFALSE 29989
// begin uc_side := your_side ;
29864: LD_ADDR_OWVAR 20
29868: PUSH
29869: LD_OWVAR 2
29873: ST_TO_ADDR
// uc_nation := nation_american ;
29874: LD_ADDR_OWVAR 21
29878: PUSH
29879: LD_INT 1
29881: ST_TO_ADDR
// vc_chassis := us_morphling ;
29882: LD_ADDR_OWVAR 37
29886: PUSH
29887: LD_INT 5
29889: ST_TO_ADDR
// vc_engine := engine_siberite ;
29890: LD_ADDR_OWVAR 39
29894: PUSH
29895: LD_INT 3
29897: ST_TO_ADDR
// vc_control := control_computer ;
29898: LD_ADDR_OWVAR 38
29902: PUSH
29903: LD_INT 3
29905: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29906: LD_ADDR_OWVAR 40
29910: PUSH
29911: LD_INT 10
29913: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29914: LD_VAR 0 2
29918: PUSH
29919: LD_INT 1
29921: ARRAY
29922: PPUSH
29923: CALL_OW 310
29927: NOT
29928: IFFALSE 29975
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29930: CALL_OW 45
29934: PPUSH
29935: LD_VAR 0 2
29939: PUSH
29940: LD_INT 1
29942: ARRAY
29943: PPUSH
29944: CALL_OW 250
29948: PPUSH
29949: LD_VAR 0 2
29953: PUSH
29954: LD_INT 1
29956: ARRAY
29957: PPUSH
29958: CALL_OW 251
29962: PPUSH
29963: LD_INT 12
29965: PPUSH
29966: LD_INT 1
29968: PPUSH
29969: CALL_OW 50
29973: GO 29987
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29975: CALL_OW 45
29979: PPUSH
29980: LD_INT 1
29982: PPUSH
29983: CALL_OW 51
// end ;
29987: GO 29861
29989: POP
29990: POP
// end ;
29991: PPOPN 2
29993: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29994: LD_EXP 63
29998: PUSH
29999: LD_EXP 109
30003: AND
30004: IFFALSE 30226
30006: GO 30008
30008: DISABLE
30009: LD_INT 0
30011: PPUSH
30012: PPUSH
30013: PPUSH
30014: PPUSH
30015: PPUSH
30016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30017: LD_ADDR_VAR 0 6
30021: PUSH
30022: LD_INT 22
30024: PUSH
30025: LD_OWVAR 2
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 21
30036: PUSH
30037: LD_INT 1
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 3
30046: PUSH
30047: LD_INT 23
30049: PUSH
30050: LD_INT 0
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: LIST
30065: PPUSH
30066: CALL_OW 69
30070: ST_TO_ADDR
// if not tmp then
30071: LD_VAR 0 6
30075: NOT
30076: IFFALSE 30080
// exit ;
30078: GO 30226
// s1 := rand ( 1 , 4 ) ;
30080: LD_ADDR_VAR 0 2
30084: PUSH
30085: LD_INT 1
30087: PPUSH
30088: LD_INT 4
30090: PPUSH
30091: CALL_OW 12
30095: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30096: LD_ADDR_VAR 0 4
30100: PUSH
30101: LD_VAR 0 6
30105: PUSH
30106: LD_INT 1
30108: ARRAY
30109: PPUSH
30110: LD_VAR 0 2
30114: PPUSH
30115: CALL_OW 259
30119: ST_TO_ADDR
// if s1 = 1 then
30120: LD_VAR 0 2
30124: PUSH
30125: LD_INT 1
30127: EQUAL
30128: IFFALSE 30148
// s2 := rand ( 2 , 4 ) else
30130: LD_ADDR_VAR 0 3
30134: PUSH
30135: LD_INT 2
30137: PPUSH
30138: LD_INT 4
30140: PPUSH
30141: CALL_OW 12
30145: ST_TO_ADDR
30146: GO 30156
// s2 := 1 ;
30148: LD_ADDR_VAR 0 3
30152: PUSH
30153: LD_INT 1
30155: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30156: LD_ADDR_VAR 0 5
30160: PUSH
30161: LD_VAR 0 6
30165: PUSH
30166: LD_INT 1
30168: ARRAY
30169: PPUSH
30170: LD_VAR 0 3
30174: PPUSH
30175: CALL_OW 259
30179: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30180: LD_VAR 0 6
30184: PUSH
30185: LD_INT 1
30187: ARRAY
30188: PPUSH
30189: LD_VAR 0 2
30193: PPUSH
30194: LD_VAR 0 5
30198: PPUSH
30199: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30203: LD_VAR 0 6
30207: PUSH
30208: LD_INT 1
30210: ARRAY
30211: PPUSH
30212: LD_VAR 0 3
30216: PPUSH
30217: LD_VAR 0 4
30221: PPUSH
30222: CALL_OW 237
// end ;
30226: PPOPN 6
30228: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30229: LD_EXP 63
30233: PUSH
30234: LD_EXP 110
30238: AND
30239: IFFALSE 30318
30241: GO 30243
30243: DISABLE
30244: LD_INT 0
30246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30247: LD_ADDR_VAR 0 1
30251: PUSH
30252: LD_INT 22
30254: PUSH
30255: LD_OWVAR 2
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 30
30266: PUSH
30267: LD_INT 3
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PPUSH
30278: CALL_OW 69
30282: ST_TO_ADDR
// if not tmp then
30283: LD_VAR 0 1
30287: NOT
30288: IFFALSE 30292
// exit ;
30290: GO 30318
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30292: LD_VAR 0 1
30296: PUSH
30297: LD_INT 1
30299: PPUSH
30300: LD_VAR 0 1
30304: PPUSH
30305: CALL_OW 12
30309: ARRAY
30310: PPUSH
30311: LD_INT 1
30313: PPUSH
30314: CALL_OW 234
// end ;
30318: PPOPN 1
30320: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30321: LD_EXP 63
30325: PUSH
30326: LD_EXP 111
30330: AND
30331: IFFALSE 30443
30333: GO 30335
30335: DISABLE
30336: LD_INT 0
30338: PPUSH
30339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30340: LD_ADDR_VAR 0 2
30344: PUSH
30345: LD_INT 22
30347: PUSH
30348: LD_OWVAR 2
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 2
30359: PUSH
30360: LD_INT 30
30362: PUSH
30363: LD_INT 27
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 30
30372: PUSH
30373: LD_INT 26
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 30
30382: PUSH
30383: LD_INT 28
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PPUSH
30400: CALL_OW 69
30404: ST_TO_ADDR
// if not tmp then
30405: LD_VAR 0 2
30409: NOT
30410: IFFALSE 30414
// exit ;
30412: GO 30443
// for i in tmp do
30414: LD_ADDR_VAR 0 1
30418: PUSH
30419: LD_VAR 0 2
30423: PUSH
30424: FOR_IN
30425: IFFALSE 30441
// SetLives ( i , 1 ) ;
30427: LD_VAR 0 1
30431: PPUSH
30432: LD_INT 1
30434: PPUSH
30435: CALL_OW 234
30439: GO 30424
30441: POP
30442: POP
// end ;
30443: PPOPN 2
30445: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30446: LD_EXP 63
30450: PUSH
30451: LD_EXP 112
30455: AND
30456: IFFALSE 30743
30458: GO 30460
30460: DISABLE
30461: LD_INT 0
30463: PPUSH
30464: PPUSH
30465: PPUSH
// begin i := rand ( 1 , 7 ) ;
30466: LD_ADDR_VAR 0 1
30470: PUSH
30471: LD_INT 1
30473: PPUSH
30474: LD_INT 7
30476: PPUSH
30477: CALL_OW 12
30481: ST_TO_ADDR
// case i of 1 :
30482: LD_VAR 0 1
30486: PUSH
30487: LD_INT 1
30489: DOUBLE
30490: EQUAL
30491: IFTRUE 30495
30493: GO 30505
30495: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30496: LD_STRING earthquake(getX(game), 0, 32)
30498: PPUSH
30499: CALL_OW 559
30503: GO 30743
30505: LD_INT 2
30507: DOUBLE
30508: EQUAL
30509: IFTRUE 30513
30511: GO 30527
30513: POP
// begin ToLua ( displayStucuk(); ) ;
30514: LD_STRING displayStucuk();
30516: PPUSH
30517: CALL_OW 559
// ResetFog ;
30521: CALL_OW 335
// end ; 3 :
30525: GO 30743
30527: LD_INT 3
30529: DOUBLE
30530: EQUAL
30531: IFTRUE 30535
30533: GO 30639
30535: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30536: LD_ADDR_VAR 0 2
30540: PUSH
30541: LD_INT 22
30543: PUSH
30544: LD_OWVAR 2
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 25
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PPUSH
30567: CALL_OW 69
30571: ST_TO_ADDR
// if not tmp then
30572: LD_VAR 0 2
30576: NOT
30577: IFFALSE 30581
// exit ;
30579: GO 30743
// un := tmp [ rand ( 1 , tmp ) ] ;
30581: LD_ADDR_VAR 0 3
30585: PUSH
30586: LD_VAR 0 2
30590: PUSH
30591: LD_INT 1
30593: PPUSH
30594: LD_VAR 0 2
30598: PPUSH
30599: CALL_OW 12
30603: ARRAY
30604: ST_TO_ADDR
// if Crawls ( un ) then
30605: LD_VAR 0 3
30609: PPUSH
30610: CALL_OW 318
30614: IFFALSE 30625
// ComWalk ( un ) ;
30616: LD_VAR 0 3
30620: PPUSH
30621: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30625: LD_VAR 0 3
30629: PPUSH
30630: LD_INT 8
30632: PPUSH
30633: CALL_OW 336
// end ; 4 :
30637: GO 30743
30639: LD_INT 4
30641: DOUBLE
30642: EQUAL
30643: IFTRUE 30647
30645: GO 30721
30647: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30648: LD_ADDR_VAR 0 2
30652: PUSH
30653: LD_INT 22
30655: PUSH
30656: LD_OWVAR 2
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 30
30667: PUSH
30668: LD_INT 29
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PPUSH
30679: CALL_OW 69
30683: ST_TO_ADDR
// if not tmp then
30684: LD_VAR 0 2
30688: NOT
30689: IFFALSE 30693
// exit ;
30691: GO 30743
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30693: LD_VAR 0 2
30697: PUSH
30698: LD_INT 1
30700: ARRAY
30701: PPUSH
30702: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30706: LD_VAR 0 2
30710: PUSH
30711: LD_INT 1
30713: ARRAY
30714: PPUSH
30715: CALL_OW 65
// end ; 5 .. 7 :
30719: GO 30743
30721: LD_INT 5
30723: DOUBLE
30724: GREATEREQUAL
30725: IFFALSE 30733
30727: LD_INT 7
30729: DOUBLE
30730: LESSEQUAL
30731: IFTRUE 30735
30733: GO 30742
30735: POP
// StreamSibBomb ; end ;
30736: CALL 26980 0 0
30740: GO 30743
30742: POP
// end ;
30743: PPOPN 3
30745: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30746: LD_EXP 63
30750: PUSH
30751: LD_EXP 113
30755: AND
30756: IFFALSE 30912
30758: GO 30760
30760: DISABLE
30761: LD_INT 0
30763: PPUSH
30764: PPUSH
30765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30766: LD_ADDR_VAR 0 2
30770: PUSH
30771: LD_INT 81
30773: PUSH
30774: LD_OWVAR 2
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: LD_INT 21
30788: PUSH
30789: LD_INT 1
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 21
30798: PUSH
30799: LD_INT 2
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: LIST
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PPUSH
30815: CALL_OW 69
30819: ST_TO_ADDR
// if not tmp then
30820: LD_VAR 0 2
30824: NOT
30825: IFFALSE 30829
// exit ;
30827: GO 30912
// p := 0 ;
30829: LD_ADDR_VAR 0 3
30833: PUSH
30834: LD_INT 0
30836: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30837: LD_INT 35
30839: PPUSH
30840: CALL_OW 67
// p := p + 1 ;
30844: LD_ADDR_VAR 0 3
30848: PUSH
30849: LD_VAR 0 3
30853: PUSH
30854: LD_INT 1
30856: PLUS
30857: ST_TO_ADDR
// for i in tmp do
30858: LD_ADDR_VAR 0 1
30862: PUSH
30863: LD_VAR 0 2
30867: PUSH
30868: FOR_IN
30869: IFFALSE 30900
// if GetLives ( i ) < 1000 then
30871: LD_VAR 0 1
30875: PPUSH
30876: CALL_OW 256
30880: PUSH
30881: LD_INT 1000
30883: LESS
30884: IFFALSE 30898
// SetLives ( i , 1000 ) ;
30886: LD_VAR 0 1
30890: PPUSH
30891: LD_INT 1000
30893: PPUSH
30894: CALL_OW 234
30898: GO 30868
30900: POP
30901: POP
// until p > 20 ;
30902: LD_VAR 0 3
30906: PUSH
30907: LD_INT 20
30909: GREATER
30910: IFFALSE 30837
// end ;
30912: PPOPN 3
30914: END
// every 0 0$1 trigger StreamModeActive and sTime do
30915: LD_EXP 63
30919: PUSH
30920: LD_EXP 114
30924: AND
30925: IFFALSE 30960
30927: GO 30929
30929: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30930: LD_INT 28
30932: PPUSH
30933: LD_OWVAR 2
30937: PPUSH
30938: LD_INT 2
30940: PPUSH
30941: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30945: LD_INT 30
30947: PPUSH
30948: LD_OWVAR 2
30952: PPUSH
30953: LD_INT 2
30955: PPUSH
30956: CALL_OW 322
// end ;
30960: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30961: LD_EXP 63
30965: PUSH
30966: LD_EXP 115
30970: AND
30971: IFFALSE 31092
30973: GO 30975
30975: DISABLE
30976: LD_INT 0
30978: PPUSH
30979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30980: LD_ADDR_VAR 0 2
30984: PUSH
30985: LD_INT 22
30987: PUSH
30988: LD_OWVAR 2
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 21
30999: PUSH
31000: LD_INT 1
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 3
31009: PUSH
31010: LD_INT 23
31012: PUSH
31013: LD_INT 0
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: LIST
31028: PPUSH
31029: CALL_OW 69
31033: ST_TO_ADDR
// if not tmp then
31034: LD_VAR 0 2
31038: NOT
31039: IFFALSE 31043
// exit ;
31041: GO 31092
// for i in tmp do
31043: LD_ADDR_VAR 0 1
31047: PUSH
31048: LD_VAR 0 2
31052: PUSH
31053: FOR_IN
31054: IFFALSE 31090
// begin if Crawls ( i ) then
31056: LD_VAR 0 1
31060: PPUSH
31061: CALL_OW 318
31065: IFFALSE 31076
// ComWalk ( i ) ;
31067: LD_VAR 0 1
31071: PPUSH
31072: CALL_OW 138
// SetClass ( i , 2 ) ;
31076: LD_VAR 0 1
31080: PPUSH
31081: LD_INT 2
31083: PPUSH
31084: CALL_OW 336
// end ;
31088: GO 31053
31090: POP
31091: POP
// end ;
31092: PPOPN 2
31094: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31095: LD_EXP 63
31099: PUSH
31100: LD_EXP 116
31104: AND
31105: IFFALSE 31393
31107: GO 31109
31109: DISABLE
31110: LD_INT 0
31112: PPUSH
31113: PPUSH
31114: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31115: LD_OWVAR 2
31119: PPUSH
31120: LD_INT 9
31122: PPUSH
31123: LD_INT 1
31125: PPUSH
31126: LD_INT 1
31128: PPUSH
31129: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31133: LD_INT 9
31135: PPUSH
31136: LD_OWVAR 2
31140: PPUSH
31141: CALL_OW 343
// uc_side := 9 ;
31145: LD_ADDR_OWVAR 20
31149: PUSH
31150: LD_INT 9
31152: ST_TO_ADDR
// uc_nation := 2 ;
31153: LD_ADDR_OWVAR 21
31157: PUSH
31158: LD_INT 2
31160: ST_TO_ADDR
// hc_name := Dark Warrior ;
31161: LD_ADDR_OWVAR 26
31165: PUSH
31166: LD_STRING Dark Warrior
31168: ST_TO_ADDR
// hc_gallery :=  ;
31169: LD_ADDR_OWVAR 33
31173: PUSH
31174: LD_STRING 
31176: ST_TO_ADDR
// hc_noskilllimit := true ;
31177: LD_ADDR_OWVAR 76
31181: PUSH
31182: LD_INT 1
31184: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31185: LD_ADDR_OWVAR 31
31189: PUSH
31190: LD_INT 30
31192: PUSH
31193: LD_INT 30
31195: PUSH
31196: LD_INT 30
31198: PUSH
31199: LD_INT 30
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: ST_TO_ADDR
// un := CreateHuman ;
31208: LD_ADDR_VAR 0 3
31212: PUSH
31213: CALL_OW 44
31217: ST_TO_ADDR
// hc_noskilllimit := false ;
31218: LD_ADDR_OWVAR 76
31222: PUSH
31223: LD_INT 0
31225: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31226: LD_VAR 0 3
31230: PPUSH
31231: LD_INT 1
31233: PPUSH
31234: CALL_OW 51
// ToLua ( playRanger() ) ;
31238: LD_STRING playRanger()
31240: PPUSH
31241: CALL_OW 559
// p := 0 ;
31245: LD_ADDR_VAR 0 2
31249: PUSH
31250: LD_INT 0
31252: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31253: LD_INT 35
31255: PPUSH
31256: CALL_OW 67
// p := p + 1 ;
31260: LD_ADDR_VAR 0 2
31264: PUSH
31265: LD_VAR 0 2
31269: PUSH
31270: LD_INT 1
31272: PLUS
31273: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31274: LD_VAR 0 3
31278: PPUSH
31279: CALL_OW 256
31283: PUSH
31284: LD_INT 1000
31286: LESS
31287: IFFALSE 31301
// SetLives ( un , 1000 ) ;
31289: LD_VAR 0 3
31293: PPUSH
31294: LD_INT 1000
31296: PPUSH
31297: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31301: LD_VAR 0 3
31305: PPUSH
31306: LD_INT 81
31308: PUSH
31309: LD_OWVAR 2
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 91
31320: PUSH
31321: LD_VAR 0 3
31325: PUSH
31326: LD_INT 30
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: LIST
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PPUSH
31338: CALL_OW 69
31342: PPUSH
31343: LD_VAR 0 3
31347: PPUSH
31348: CALL_OW 74
31352: PPUSH
31353: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31357: LD_VAR 0 2
31361: PUSH
31362: LD_INT 80
31364: GREATER
31365: PUSH
31366: LD_VAR 0 3
31370: PPUSH
31371: CALL_OW 301
31375: OR
31376: IFFALSE 31253
// if un then
31378: LD_VAR 0 3
31382: IFFALSE 31393
// RemoveUnit ( un ) ;
31384: LD_VAR 0 3
31388: PPUSH
31389: CALL_OW 64
// end ;
31393: PPOPN 3
31395: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31396: LD_EXP 117
31400: IFFALSE 31516
31402: GO 31404
31404: DISABLE
31405: LD_INT 0
31407: PPUSH
31408: PPUSH
31409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31410: LD_ADDR_VAR 0 2
31414: PUSH
31415: LD_INT 81
31417: PUSH
31418: LD_OWVAR 2
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 21
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PPUSH
31441: CALL_OW 69
31445: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31446: LD_STRING playComputer()
31448: PPUSH
31449: CALL_OW 559
// if not tmp then
31453: LD_VAR 0 2
31457: NOT
31458: IFFALSE 31462
// exit ;
31460: GO 31516
// for i in tmp do
31462: LD_ADDR_VAR 0 1
31466: PUSH
31467: LD_VAR 0 2
31471: PUSH
31472: FOR_IN
31473: IFFALSE 31514
// for j := 1 to 4 do
31475: LD_ADDR_VAR 0 3
31479: PUSH
31480: DOUBLE
31481: LD_INT 1
31483: DEC
31484: ST_TO_ADDR
31485: LD_INT 4
31487: PUSH
31488: FOR_TO
31489: IFFALSE 31510
// SetSkill ( i , j , 10 ) ;
31491: LD_VAR 0 1
31495: PPUSH
31496: LD_VAR 0 3
31500: PPUSH
31501: LD_INT 10
31503: PPUSH
31504: CALL_OW 237
31508: GO 31488
31510: POP
31511: POP
31512: GO 31472
31514: POP
31515: POP
// end ;
31516: PPOPN 3
31518: END
// every 0 0$1 trigger s30 do var i , tmp ;
31519: LD_EXP 118
31523: IFFALSE 31592
31525: GO 31527
31527: DISABLE
31528: LD_INT 0
31530: PPUSH
31531: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31532: LD_ADDR_VAR 0 2
31536: PUSH
31537: LD_INT 22
31539: PUSH
31540: LD_OWVAR 2
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PPUSH
31549: CALL_OW 69
31553: ST_TO_ADDR
// if not tmp then
31554: LD_VAR 0 2
31558: NOT
31559: IFFALSE 31563
// exit ;
31561: GO 31592
// for i in tmp do
31563: LD_ADDR_VAR 0 1
31567: PUSH
31568: LD_VAR 0 2
31572: PUSH
31573: FOR_IN
31574: IFFALSE 31590
// SetLives ( i , 300 ) ;
31576: LD_VAR 0 1
31580: PPUSH
31581: LD_INT 300
31583: PPUSH
31584: CALL_OW 234
31588: GO 31573
31590: POP
31591: POP
// end ;
31592: PPOPN 2
31594: END
// every 0 0$1 trigger s60 do var i , tmp ;
31595: LD_EXP 119
31599: IFFALSE 31668
31601: GO 31603
31603: DISABLE
31604: LD_INT 0
31606: PPUSH
31607: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31608: LD_ADDR_VAR 0 2
31612: PUSH
31613: LD_INT 22
31615: PUSH
31616: LD_OWVAR 2
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PPUSH
31625: CALL_OW 69
31629: ST_TO_ADDR
// if not tmp then
31630: LD_VAR 0 2
31634: NOT
31635: IFFALSE 31639
// exit ;
31637: GO 31668
// for i in tmp do
31639: LD_ADDR_VAR 0 1
31643: PUSH
31644: LD_VAR 0 2
31648: PUSH
31649: FOR_IN
31650: IFFALSE 31666
// SetLives ( i , 600 ) ;
31652: LD_VAR 0 1
31656: PPUSH
31657: LD_INT 600
31659: PPUSH
31660: CALL_OW 234
31664: GO 31649
31666: POP
31667: POP
// end ;
31668: PPOPN 2
31670: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31671: LD_INT 0
31673: PPUSH
// case cmd of 301 :
31674: LD_VAR 0 1
31678: PUSH
31679: LD_INT 301
31681: DOUBLE
31682: EQUAL
31683: IFTRUE 31687
31685: GO 31719
31687: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31688: LD_VAR 0 6
31692: PPUSH
31693: LD_VAR 0 7
31697: PPUSH
31698: LD_VAR 0 8
31702: PPUSH
31703: LD_VAR 0 4
31707: PPUSH
31708: LD_VAR 0 5
31712: PPUSH
31713: CALL 32928 0 5
31717: GO 31840
31719: LD_INT 302
31721: DOUBLE
31722: EQUAL
31723: IFTRUE 31727
31725: GO 31764
31727: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31728: LD_VAR 0 6
31732: PPUSH
31733: LD_VAR 0 7
31737: PPUSH
31738: LD_VAR 0 8
31742: PPUSH
31743: LD_VAR 0 9
31747: PPUSH
31748: LD_VAR 0 4
31752: PPUSH
31753: LD_VAR 0 5
31757: PPUSH
31758: CALL 33019 0 6
31762: GO 31840
31764: LD_INT 303
31766: DOUBLE
31767: EQUAL
31768: IFTRUE 31772
31770: GO 31809
31772: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31773: LD_VAR 0 6
31777: PPUSH
31778: LD_VAR 0 7
31782: PPUSH
31783: LD_VAR 0 8
31787: PPUSH
31788: LD_VAR 0 9
31792: PPUSH
31793: LD_VAR 0 4
31797: PPUSH
31798: LD_VAR 0 5
31802: PPUSH
31803: CALL 31845 0 6
31807: GO 31840
31809: LD_INT 304
31811: DOUBLE
31812: EQUAL
31813: IFTRUE 31817
31815: GO 31839
31817: POP
// hHackTeleport ( unit , x , y ) ; end ;
31818: LD_VAR 0 2
31822: PPUSH
31823: LD_VAR 0 4
31827: PPUSH
31828: LD_VAR 0 5
31832: PPUSH
31833: CALL 33612 0 3
31837: GO 31840
31839: POP
// end ;
31840: LD_VAR 0 12
31844: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31845: LD_INT 0
31847: PPUSH
31848: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31849: LD_VAR 0 1
31853: PUSH
31854: LD_INT 1
31856: LESS
31857: PUSH
31858: LD_VAR 0 1
31862: PUSH
31863: LD_INT 3
31865: GREATER
31866: OR
31867: PUSH
31868: LD_VAR 0 5
31872: PPUSH
31873: LD_VAR 0 6
31877: PPUSH
31878: CALL_OW 428
31882: OR
31883: IFFALSE 31887
// exit ;
31885: GO 32615
// uc_side := your_side ;
31887: LD_ADDR_OWVAR 20
31891: PUSH
31892: LD_OWVAR 2
31896: ST_TO_ADDR
// uc_nation := nation ;
31897: LD_ADDR_OWVAR 21
31901: PUSH
31902: LD_VAR 0 1
31906: ST_TO_ADDR
// bc_level = 1 ;
31907: LD_ADDR_OWVAR 43
31911: PUSH
31912: LD_INT 1
31914: ST_TO_ADDR
// case btype of 1 :
31915: LD_VAR 0 2
31919: PUSH
31920: LD_INT 1
31922: DOUBLE
31923: EQUAL
31924: IFTRUE 31928
31926: GO 31939
31928: POP
// bc_type := b_depot ; 2 :
31929: LD_ADDR_OWVAR 42
31933: PUSH
31934: LD_INT 0
31936: ST_TO_ADDR
31937: GO 32559
31939: LD_INT 2
31941: DOUBLE
31942: EQUAL
31943: IFTRUE 31947
31945: GO 31958
31947: POP
// bc_type := b_warehouse ; 3 :
31948: LD_ADDR_OWVAR 42
31952: PUSH
31953: LD_INT 1
31955: ST_TO_ADDR
31956: GO 32559
31958: LD_INT 3
31960: DOUBLE
31961: EQUAL
31962: IFTRUE 31966
31964: GO 31977
31966: POP
// bc_type := b_lab ; 4 .. 9 :
31967: LD_ADDR_OWVAR 42
31971: PUSH
31972: LD_INT 6
31974: ST_TO_ADDR
31975: GO 32559
31977: LD_INT 4
31979: DOUBLE
31980: GREATEREQUAL
31981: IFFALSE 31989
31983: LD_INT 9
31985: DOUBLE
31986: LESSEQUAL
31987: IFTRUE 31991
31989: GO 32051
31991: POP
// begin bc_type := b_lab_half ;
31992: LD_ADDR_OWVAR 42
31996: PUSH
31997: LD_INT 7
31999: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32000: LD_ADDR_OWVAR 44
32004: PUSH
32005: LD_INT 10
32007: PUSH
32008: LD_INT 11
32010: PUSH
32011: LD_INT 12
32013: PUSH
32014: LD_INT 15
32016: PUSH
32017: LD_INT 14
32019: PUSH
32020: LD_INT 13
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: PUSH
32031: LD_VAR 0 2
32035: PUSH
32036: LD_INT 3
32038: MINUS
32039: ARRAY
32040: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32041: LD_ADDR_OWVAR 45
32045: PUSH
32046: LD_INT 9
32048: ST_TO_ADDR
// end ; 10 .. 13 :
32049: GO 32559
32051: LD_INT 10
32053: DOUBLE
32054: GREATEREQUAL
32055: IFFALSE 32063
32057: LD_INT 13
32059: DOUBLE
32060: LESSEQUAL
32061: IFTRUE 32065
32063: GO 32142
32065: POP
// begin bc_type := b_lab_full ;
32066: LD_ADDR_OWVAR 42
32070: PUSH
32071: LD_INT 8
32073: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32074: LD_ADDR_OWVAR 44
32078: PUSH
32079: LD_INT 10
32081: PUSH
32082: LD_INT 12
32084: PUSH
32085: LD_INT 14
32087: PUSH
32088: LD_INT 13
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: PUSH
32097: LD_VAR 0 2
32101: PUSH
32102: LD_INT 9
32104: MINUS
32105: ARRAY
32106: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32107: LD_ADDR_OWVAR 45
32111: PUSH
32112: LD_INT 11
32114: PUSH
32115: LD_INT 15
32117: PUSH
32118: LD_INT 12
32120: PUSH
32121: LD_INT 15
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: PUSH
32130: LD_VAR 0 2
32134: PUSH
32135: LD_INT 9
32137: MINUS
32138: ARRAY
32139: ST_TO_ADDR
// end ; 14 :
32140: GO 32559
32142: LD_INT 14
32144: DOUBLE
32145: EQUAL
32146: IFTRUE 32150
32148: GO 32161
32150: POP
// bc_type := b_workshop ; 15 :
32151: LD_ADDR_OWVAR 42
32155: PUSH
32156: LD_INT 2
32158: ST_TO_ADDR
32159: GO 32559
32161: LD_INT 15
32163: DOUBLE
32164: EQUAL
32165: IFTRUE 32169
32167: GO 32180
32169: POP
// bc_type := b_factory ; 16 :
32170: LD_ADDR_OWVAR 42
32174: PUSH
32175: LD_INT 3
32177: ST_TO_ADDR
32178: GO 32559
32180: LD_INT 16
32182: DOUBLE
32183: EQUAL
32184: IFTRUE 32188
32186: GO 32199
32188: POP
// bc_type := b_ext_gun ; 17 :
32189: LD_ADDR_OWVAR 42
32193: PUSH
32194: LD_INT 17
32196: ST_TO_ADDR
32197: GO 32559
32199: LD_INT 17
32201: DOUBLE
32202: EQUAL
32203: IFTRUE 32207
32205: GO 32235
32207: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32208: LD_ADDR_OWVAR 42
32212: PUSH
32213: LD_INT 19
32215: PUSH
32216: LD_INT 23
32218: PUSH
32219: LD_INT 19
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: LIST
32226: PUSH
32227: LD_VAR 0 1
32231: ARRAY
32232: ST_TO_ADDR
32233: GO 32559
32235: LD_INT 18
32237: DOUBLE
32238: EQUAL
32239: IFTRUE 32243
32241: GO 32254
32243: POP
// bc_type := b_ext_radar ; 19 :
32244: LD_ADDR_OWVAR 42
32248: PUSH
32249: LD_INT 20
32251: ST_TO_ADDR
32252: GO 32559
32254: LD_INT 19
32256: DOUBLE
32257: EQUAL
32258: IFTRUE 32262
32260: GO 32273
32262: POP
// bc_type := b_ext_radio ; 20 :
32263: LD_ADDR_OWVAR 42
32267: PUSH
32268: LD_INT 22
32270: ST_TO_ADDR
32271: GO 32559
32273: LD_INT 20
32275: DOUBLE
32276: EQUAL
32277: IFTRUE 32281
32279: GO 32292
32281: POP
// bc_type := b_ext_siberium ; 21 :
32282: LD_ADDR_OWVAR 42
32286: PUSH
32287: LD_INT 21
32289: ST_TO_ADDR
32290: GO 32559
32292: LD_INT 21
32294: DOUBLE
32295: EQUAL
32296: IFTRUE 32300
32298: GO 32311
32300: POP
// bc_type := b_ext_computer ; 22 :
32301: LD_ADDR_OWVAR 42
32305: PUSH
32306: LD_INT 24
32308: ST_TO_ADDR
32309: GO 32559
32311: LD_INT 22
32313: DOUBLE
32314: EQUAL
32315: IFTRUE 32319
32317: GO 32330
32319: POP
// bc_type := b_ext_track ; 23 :
32320: LD_ADDR_OWVAR 42
32324: PUSH
32325: LD_INT 16
32327: ST_TO_ADDR
32328: GO 32559
32330: LD_INT 23
32332: DOUBLE
32333: EQUAL
32334: IFTRUE 32338
32336: GO 32349
32338: POP
// bc_type := b_ext_laser ; 24 :
32339: LD_ADDR_OWVAR 42
32343: PUSH
32344: LD_INT 25
32346: ST_TO_ADDR
32347: GO 32559
32349: LD_INT 24
32351: DOUBLE
32352: EQUAL
32353: IFTRUE 32357
32355: GO 32368
32357: POP
// bc_type := b_control_tower ; 25 :
32358: LD_ADDR_OWVAR 42
32362: PUSH
32363: LD_INT 36
32365: ST_TO_ADDR
32366: GO 32559
32368: LD_INT 25
32370: DOUBLE
32371: EQUAL
32372: IFTRUE 32376
32374: GO 32387
32376: POP
// bc_type := b_breastwork ; 26 :
32377: LD_ADDR_OWVAR 42
32381: PUSH
32382: LD_INT 31
32384: ST_TO_ADDR
32385: GO 32559
32387: LD_INT 26
32389: DOUBLE
32390: EQUAL
32391: IFTRUE 32395
32393: GO 32406
32395: POP
// bc_type := b_bunker ; 27 :
32396: LD_ADDR_OWVAR 42
32400: PUSH
32401: LD_INT 32
32403: ST_TO_ADDR
32404: GO 32559
32406: LD_INT 27
32408: DOUBLE
32409: EQUAL
32410: IFTRUE 32414
32412: GO 32425
32414: POP
// bc_type := b_turret ; 28 :
32415: LD_ADDR_OWVAR 42
32419: PUSH
32420: LD_INT 33
32422: ST_TO_ADDR
32423: GO 32559
32425: LD_INT 28
32427: DOUBLE
32428: EQUAL
32429: IFTRUE 32433
32431: GO 32444
32433: POP
// bc_type := b_armoury ; 29 :
32434: LD_ADDR_OWVAR 42
32438: PUSH
32439: LD_INT 4
32441: ST_TO_ADDR
32442: GO 32559
32444: LD_INT 29
32446: DOUBLE
32447: EQUAL
32448: IFTRUE 32452
32450: GO 32463
32452: POP
// bc_type := b_barracks ; 30 :
32453: LD_ADDR_OWVAR 42
32457: PUSH
32458: LD_INT 5
32460: ST_TO_ADDR
32461: GO 32559
32463: LD_INT 30
32465: DOUBLE
32466: EQUAL
32467: IFTRUE 32471
32469: GO 32482
32471: POP
// bc_type := b_solar_power ; 31 :
32472: LD_ADDR_OWVAR 42
32476: PUSH
32477: LD_INT 27
32479: ST_TO_ADDR
32480: GO 32559
32482: LD_INT 31
32484: DOUBLE
32485: EQUAL
32486: IFTRUE 32490
32488: GO 32501
32490: POP
// bc_type := b_oil_power ; 32 :
32491: LD_ADDR_OWVAR 42
32495: PUSH
32496: LD_INT 26
32498: ST_TO_ADDR
32499: GO 32559
32501: LD_INT 32
32503: DOUBLE
32504: EQUAL
32505: IFTRUE 32509
32507: GO 32520
32509: POP
// bc_type := b_siberite_power ; 33 :
32510: LD_ADDR_OWVAR 42
32514: PUSH
32515: LD_INT 28
32517: ST_TO_ADDR
32518: GO 32559
32520: LD_INT 33
32522: DOUBLE
32523: EQUAL
32524: IFTRUE 32528
32526: GO 32539
32528: POP
// bc_type := b_oil_mine ; 34 :
32529: LD_ADDR_OWVAR 42
32533: PUSH
32534: LD_INT 29
32536: ST_TO_ADDR
32537: GO 32559
32539: LD_INT 34
32541: DOUBLE
32542: EQUAL
32543: IFTRUE 32547
32545: GO 32558
32547: POP
// bc_type := b_siberite_mine ; end ;
32548: LD_ADDR_OWVAR 42
32552: PUSH
32553: LD_INT 30
32555: ST_TO_ADDR
32556: GO 32559
32558: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32559: LD_ADDR_VAR 0 8
32563: PUSH
32564: LD_VAR 0 5
32568: PPUSH
32569: LD_VAR 0 6
32573: PPUSH
32574: LD_VAR 0 3
32578: PPUSH
32579: CALL_OW 47
32583: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32584: LD_OWVAR 42
32588: PUSH
32589: LD_INT 32
32591: PUSH
32592: LD_INT 33
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: IN
32599: IFFALSE 32615
// PlaceWeaponTurret ( b , weapon ) ;
32601: LD_VAR 0 8
32605: PPUSH
32606: LD_VAR 0 4
32610: PPUSH
32611: CALL_OW 431
// end ;
32615: LD_VAR 0 7
32619: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32620: LD_INT 0
32622: PPUSH
32623: PPUSH
32624: PPUSH
32625: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32626: LD_ADDR_VAR 0 4
32630: PUSH
32631: LD_INT 22
32633: PUSH
32634: LD_OWVAR 2
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 2
32645: PUSH
32646: LD_INT 30
32648: PUSH
32649: LD_INT 0
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 30
32658: PUSH
32659: LD_INT 1
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: LIST
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PPUSH
32675: CALL_OW 69
32679: ST_TO_ADDR
// if not tmp then
32680: LD_VAR 0 4
32684: NOT
32685: IFFALSE 32689
// exit ;
32687: GO 32748
// for i in tmp do
32689: LD_ADDR_VAR 0 2
32693: PUSH
32694: LD_VAR 0 4
32698: PUSH
32699: FOR_IN
32700: IFFALSE 32746
// for j = 1 to 3 do
32702: LD_ADDR_VAR 0 3
32706: PUSH
32707: DOUBLE
32708: LD_INT 1
32710: DEC
32711: ST_TO_ADDR
32712: LD_INT 3
32714: PUSH
32715: FOR_TO
32716: IFFALSE 32742
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32718: LD_VAR 0 2
32722: PPUSH
32723: CALL_OW 274
32727: PPUSH
32728: LD_VAR 0 3
32732: PPUSH
32733: LD_INT 99999
32735: PPUSH
32736: CALL_OW 277
32740: GO 32715
32742: POP
32743: POP
32744: GO 32699
32746: POP
32747: POP
// end ;
32748: LD_VAR 0 1
32752: RET
// export function hHackSetLevel10 ; var i , j ; begin
32753: LD_INT 0
32755: PPUSH
32756: PPUSH
32757: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32758: LD_ADDR_VAR 0 2
32762: PUSH
32763: LD_INT 21
32765: PUSH
32766: LD_INT 1
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PPUSH
32773: CALL_OW 69
32777: PUSH
32778: FOR_IN
32779: IFFALSE 32831
// if IsSelected ( i ) then
32781: LD_VAR 0 2
32785: PPUSH
32786: CALL_OW 306
32790: IFFALSE 32829
// begin for j := 1 to 4 do
32792: LD_ADDR_VAR 0 3
32796: PUSH
32797: DOUBLE
32798: LD_INT 1
32800: DEC
32801: ST_TO_ADDR
32802: LD_INT 4
32804: PUSH
32805: FOR_TO
32806: IFFALSE 32827
// SetSkill ( i , j , 10 ) ;
32808: LD_VAR 0 2
32812: PPUSH
32813: LD_VAR 0 3
32817: PPUSH
32818: LD_INT 10
32820: PPUSH
32821: CALL_OW 237
32825: GO 32805
32827: POP
32828: POP
// end ;
32829: GO 32778
32831: POP
32832: POP
// end ;
32833: LD_VAR 0 1
32837: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32838: LD_INT 0
32840: PPUSH
32841: PPUSH
32842: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32843: LD_ADDR_VAR 0 2
32847: PUSH
32848: LD_INT 22
32850: PUSH
32851: LD_OWVAR 2
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 21
32862: PUSH
32863: LD_INT 1
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PPUSH
32874: CALL_OW 69
32878: PUSH
32879: FOR_IN
32880: IFFALSE 32921
// begin for j := 1 to 4 do
32882: LD_ADDR_VAR 0 3
32886: PUSH
32887: DOUBLE
32888: LD_INT 1
32890: DEC
32891: ST_TO_ADDR
32892: LD_INT 4
32894: PUSH
32895: FOR_TO
32896: IFFALSE 32917
// SetSkill ( i , j , 10 ) ;
32898: LD_VAR 0 2
32902: PPUSH
32903: LD_VAR 0 3
32907: PPUSH
32908: LD_INT 10
32910: PPUSH
32911: CALL_OW 237
32915: GO 32895
32917: POP
32918: POP
// end ;
32919: GO 32879
32921: POP
32922: POP
// end ;
32923: LD_VAR 0 1
32927: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32928: LD_INT 0
32930: PPUSH
// uc_side := your_side ;
32931: LD_ADDR_OWVAR 20
32935: PUSH
32936: LD_OWVAR 2
32940: ST_TO_ADDR
// uc_nation := nation ;
32941: LD_ADDR_OWVAR 21
32945: PUSH
32946: LD_VAR 0 1
32950: ST_TO_ADDR
// InitHc ;
32951: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32955: LD_INT 0
32957: PPUSH
32958: LD_VAR 0 2
32962: PPUSH
32963: LD_VAR 0 3
32967: PPUSH
32968: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32972: LD_VAR 0 4
32976: PPUSH
32977: LD_VAR 0 5
32981: PPUSH
32982: CALL_OW 428
32986: PUSH
32987: LD_INT 0
32989: EQUAL
32990: IFFALSE 33014
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32992: CALL_OW 44
32996: PPUSH
32997: LD_VAR 0 4
33001: PPUSH
33002: LD_VAR 0 5
33006: PPUSH
33007: LD_INT 1
33009: PPUSH
33010: CALL_OW 48
// end ;
33014: LD_VAR 0 6
33018: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33019: LD_INT 0
33021: PPUSH
33022: PPUSH
// uc_side := your_side ;
33023: LD_ADDR_OWVAR 20
33027: PUSH
33028: LD_OWVAR 2
33032: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33033: LD_VAR 0 1
33037: PUSH
33038: LD_INT 1
33040: PUSH
33041: LD_INT 2
33043: PUSH
33044: LD_INT 3
33046: PUSH
33047: LD_INT 4
33049: PUSH
33050: LD_INT 5
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: IN
33060: IFFALSE 33072
// uc_nation := nation_american else
33062: LD_ADDR_OWVAR 21
33066: PUSH
33067: LD_INT 1
33069: ST_TO_ADDR
33070: GO 33115
// if chassis in [ 11 , 12 , 13 , 14 ] then
33072: LD_VAR 0 1
33076: PUSH
33077: LD_INT 11
33079: PUSH
33080: LD_INT 12
33082: PUSH
33083: LD_INT 13
33085: PUSH
33086: LD_INT 14
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: IN
33095: IFFALSE 33107
// uc_nation := nation_arabian else
33097: LD_ADDR_OWVAR 21
33101: PUSH
33102: LD_INT 2
33104: ST_TO_ADDR
33105: GO 33115
// uc_nation := nation_russian ;
33107: LD_ADDR_OWVAR 21
33111: PUSH
33112: LD_INT 3
33114: ST_TO_ADDR
// vc_chassis := chassis ;
33115: LD_ADDR_OWVAR 37
33119: PUSH
33120: LD_VAR 0 1
33124: ST_TO_ADDR
// vc_engine := engine ;
33125: LD_ADDR_OWVAR 39
33129: PUSH
33130: LD_VAR 0 2
33134: ST_TO_ADDR
// vc_control := control ;
33135: LD_ADDR_OWVAR 38
33139: PUSH
33140: LD_VAR 0 3
33144: ST_TO_ADDR
// vc_weapon := weapon ;
33145: LD_ADDR_OWVAR 40
33149: PUSH
33150: LD_VAR 0 4
33154: ST_TO_ADDR
// un := CreateVehicle ;
33155: LD_ADDR_VAR 0 8
33159: PUSH
33160: CALL_OW 45
33164: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33165: LD_VAR 0 8
33169: PPUSH
33170: LD_INT 0
33172: PPUSH
33173: LD_INT 5
33175: PPUSH
33176: CALL_OW 12
33180: PPUSH
33181: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33185: LD_VAR 0 8
33189: PPUSH
33190: LD_VAR 0 5
33194: PPUSH
33195: LD_VAR 0 6
33199: PPUSH
33200: LD_INT 1
33202: PPUSH
33203: CALL_OW 48
// end ;
33207: LD_VAR 0 7
33211: RET
// export hInvincible ; every 1 do
33212: GO 33214
33214: DISABLE
// hInvincible := [ ] ;
33215: LD_ADDR_EXP 120
33219: PUSH
33220: EMPTY
33221: ST_TO_ADDR
33222: END
// every 10 do var i ;
33223: GO 33225
33225: DISABLE
33226: LD_INT 0
33228: PPUSH
// begin enable ;
33229: ENABLE
// if not hInvincible then
33230: LD_EXP 120
33234: NOT
33235: IFFALSE 33239
// exit ;
33237: GO 33283
// for i in hInvincible do
33239: LD_ADDR_VAR 0 1
33243: PUSH
33244: LD_EXP 120
33248: PUSH
33249: FOR_IN
33250: IFFALSE 33281
// if GetLives ( i ) < 1000 then
33252: LD_VAR 0 1
33256: PPUSH
33257: CALL_OW 256
33261: PUSH
33262: LD_INT 1000
33264: LESS
33265: IFFALSE 33279
// SetLives ( i , 1000 ) ;
33267: LD_VAR 0 1
33271: PPUSH
33272: LD_INT 1000
33274: PPUSH
33275: CALL_OW 234
33279: GO 33249
33281: POP
33282: POP
// end ;
33283: PPOPN 1
33285: END
// export function hHackInvincible ; var i ; begin
33286: LD_INT 0
33288: PPUSH
33289: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33290: LD_ADDR_VAR 0 2
33294: PUSH
33295: LD_INT 2
33297: PUSH
33298: LD_INT 21
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 21
33310: PUSH
33311: LD_INT 2
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: LIST
33322: PPUSH
33323: CALL_OW 69
33327: PUSH
33328: FOR_IN
33329: IFFALSE 33390
// if IsSelected ( i ) then
33331: LD_VAR 0 2
33335: PPUSH
33336: CALL_OW 306
33340: IFFALSE 33388
// begin if i in hInvincible then
33342: LD_VAR 0 2
33346: PUSH
33347: LD_EXP 120
33351: IN
33352: IFFALSE 33372
// hInvincible := hInvincible diff i else
33354: LD_ADDR_EXP 120
33358: PUSH
33359: LD_EXP 120
33363: PUSH
33364: LD_VAR 0 2
33368: DIFF
33369: ST_TO_ADDR
33370: GO 33388
// hInvincible := hInvincible union i ;
33372: LD_ADDR_EXP 120
33376: PUSH
33377: LD_EXP 120
33381: PUSH
33382: LD_VAR 0 2
33386: UNION
33387: ST_TO_ADDR
// end ;
33388: GO 33328
33390: POP
33391: POP
// end ;
33392: LD_VAR 0 1
33396: RET
// export function hHackInvisible ; var i , j ; begin
33397: LD_INT 0
33399: PPUSH
33400: PPUSH
33401: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33402: LD_ADDR_VAR 0 2
33406: PUSH
33407: LD_INT 21
33409: PUSH
33410: LD_INT 1
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PPUSH
33417: CALL_OW 69
33421: PUSH
33422: FOR_IN
33423: IFFALSE 33447
// if IsSelected ( i ) then
33425: LD_VAR 0 2
33429: PPUSH
33430: CALL_OW 306
33434: IFFALSE 33445
// ComForceInvisible ( i ) ;
33436: LD_VAR 0 2
33440: PPUSH
33441: CALL_OW 496
33445: GO 33422
33447: POP
33448: POP
// end ;
33449: LD_VAR 0 1
33453: RET
// export function hHackChangeYourSide ; begin
33454: LD_INT 0
33456: PPUSH
// if your_side = 8 then
33457: LD_OWVAR 2
33461: PUSH
33462: LD_INT 8
33464: EQUAL
33465: IFFALSE 33477
// your_side := 0 else
33467: LD_ADDR_OWVAR 2
33471: PUSH
33472: LD_INT 0
33474: ST_TO_ADDR
33475: GO 33491
// your_side := your_side + 1 ;
33477: LD_ADDR_OWVAR 2
33481: PUSH
33482: LD_OWVAR 2
33486: PUSH
33487: LD_INT 1
33489: PLUS
33490: ST_TO_ADDR
// end ;
33491: LD_VAR 0 1
33495: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33496: LD_INT 0
33498: PPUSH
33499: PPUSH
33500: PPUSH
// for i in all_units do
33501: LD_ADDR_VAR 0 2
33505: PUSH
33506: LD_OWVAR 3
33510: PUSH
33511: FOR_IN
33512: IFFALSE 33590
// if IsSelected ( i ) then
33514: LD_VAR 0 2
33518: PPUSH
33519: CALL_OW 306
33523: IFFALSE 33588
// begin j := GetSide ( i ) ;
33525: LD_ADDR_VAR 0 3
33529: PUSH
33530: LD_VAR 0 2
33534: PPUSH
33535: CALL_OW 255
33539: ST_TO_ADDR
// if j = 8 then
33540: LD_VAR 0 3
33544: PUSH
33545: LD_INT 8
33547: EQUAL
33548: IFFALSE 33560
// j := 0 else
33550: LD_ADDR_VAR 0 3
33554: PUSH
33555: LD_INT 0
33557: ST_TO_ADDR
33558: GO 33574
// j := j + 1 ;
33560: LD_ADDR_VAR 0 3
33564: PUSH
33565: LD_VAR 0 3
33569: PUSH
33570: LD_INT 1
33572: PLUS
33573: ST_TO_ADDR
// SetSide ( i , j ) ;
33574: LD_VAR 0 2
33578: PPUSH
33579: LD_VAR 0 3
33583: PPUSH
33584: CALL_OW 235
// end ;
33588: GO 33511
33590: POP
33591: POP
// end ;
33592: LD_VAR 0 1
33596: RET
// export function hHackFog ; begin
33597: LD_INT 0
33599: PPUSH
// FogOff ( true ) ;
33600: LD_INT 1
33602: PPUSH
33603: CALL_OW 344
// end ;
33607: LD_VAR 0 1
33611: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33612: LD_INT 0
33614: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33615: LD_VAR 0 1
33619: PPUSH
33620: LD_VAR 0 2
33624: PPUSH
33625: LD_VAR 0 3
33629: PPUSH
33630: LD_INT 1
33632: PPUSH
33633: LD_INT 1
33635: PPUSH
33636: CALL_OW 483
// CenterOnXY ( x , y ) ;
33640: LD_VAR 0 2
33644: PPUSH
33645: LD_VAR 0 3
33649: PPUSH
33650: CALL_OW 84
// end ;
33654: LD_VAR 0 4
33658: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33659: LD_INT 0
33661: PPUSH
33662: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33663: LD_VAR 0 1
33667: NOT
33668: PUSH
33669: LD_VAR 0 2
33673: PPUSH
33674: LD_VAR 0 3
33678: PPUSH
33679: CALL_OW 488
33683: NOT
33684: OR
33685: PUSH
33686: LD_VAR 0 1
33690: PPUSH
33691: CALL_OW 266
33695: PUSH
33696: LD_INT 3
33698: NONEQUAL
33699: PUSH
33700: LD_VAR 0 1
33704: PPUSH
33705: CALL_OW 247
33709: PUSH
33710: LD_INT 1
33712: EQUAL
33713: NOT
33714: AND
33715: OR
33716: IFFALSE 33720
// exit ;
33718: GO 33869
// if GetType ( factory ) = unit_human then
33720: LD_VAR 0 1
33724: PPUSH
33725: CALL_OW 247
33729: PUSH
33730: LD_INT 1
33732: EQUAL
33733: IFFALSE 33750
// factory := IsInUnit ( factory ) ;
33735: LD_ADDR_VAR 0 1
33739: PUSH
33740: LD_VAR 0 1
33744: PPUSH
33745: CALL_OW 310
33749: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33750: LD_VAR 0 1
33754: PPUSH
33755: CALL_OW 266
33759: PUSH
33760: LD_INT 3
33762: NONEQUAL
33763: IFFALSE 33767
// exit ;
33765: GO 33869
// if HexInfo ( x , y ) = factory then
33767: LD_VAR 0 2
33771: PPUSH
33772: LD_VAR 0 3
33776: PPUSH
33777: CALL_OW 428
33781: PUSH
33782: LD_VAR 0 1
33786: EQUAL
33787: IFFALSE 33814
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33789: LD_ADDR_EXP 121
33793: PUSH
33794: LD_EXP 121
33798: PPUSH
33799: LD_VAR 0 1
33803: PPUSH
33804: LD_INT 0
33806: PPUSH
33807: CALL_OW 1
33811: ST_TO_ADDR
33812: GO 33865
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33814: LD_ADDR_EXP 121
33818: PUSH
33819: LD_EXP 121
33823: PPUSH
33824: LD_VAR 0 1
33828: PPUSH
33829: LD_VAR 0 1
33833: PPUSH
33834: CALL_OW 255
33838: PUSH
33839: LD_VAR 0 1
33843: PUSH
33844: LD_VAR 0 2
33848: PUSH
33849: LD_VAR 0 3
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: PPUSH
33860: CALL_OW 1
33864: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33865: CALL 33874 0 0
// end ;
33869: LD_VAR 0 4
33873: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33874: LD_INT 0
33876: PPUSH
33877: PPUSH
33878: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33879: LD_STRING resetFactoryWaypoint();
33881: PPUSH
33882: CALL_OW 559
// if factoryWaypoints then
33886: LD_EXP 121
33890: IFFALSE 34016
// begin list := PrepareArray ( factoryWaypoints ) ;
33892: LD_ADDR_VAR 0 3
33896: PUSH
33897: LD_EXP 121
33901: PPUSH
33902: CALL 81158 0 1
33906: ST_TO_ADDR
// for i := 1 to list do
33907: LD_ADDR_VAR 0 2
33911: PUSH
33912: DOUBLE
33913: LD_INT 1
33915: DEC
33916: ST_TO_ADDR
33917: LD_VAR 0 3
33921: PUSH
33922: FOR_TO
33923: IFFALSE 34014
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33925: LD_STRING setFactoryWaypointXY(
33927: PUSH
33928: LD_VAR 0 3
33932: PUSH
33933: LD_VAR 0 2
33937: ARRAY
33938: PUSH
33939: LD_INT 1
33941: ARRAY
33942: STR
33943: PUSH
33944: LD_STRING ,
33946: STR
33947: PUSH
33948: LD_VAR 0 3
33952: PUSH
33953: LD_VAR 0 2
33957: ARRAY
33958: PUSH
33959: LD_INT 2
33961: ARRAY
33962: STR
33963: PUSH
33964: LD_STRING ,
33966: STR
33967: PUSH
33968: LD_VAR 0 3
33972: PUSH
33973: LD_VAR 0 2
33977: ARRAY
33978: PUSH
33979: LD_INT 3
33981: ARRAY
33982: STR
33983: PUSH
33984: LD_STRING ,
33986: STR
33987: PUSH
33988: LD_VAR 0 3
33992: PUSH
33993: LD_VAR 0 2
33997: ARRAY
33998: PUSH
33999: LD_INT 4
34001: ARRAY
34002: STR
34003: PUSH
34004: LD_STRING )
34006: STR
34007: PPUSH
34008: CALL_OW 559
34012: GO 33922
34014: POP
34015: POP
// end ; end ;
34016: LD_VAR 0 1
34020: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34021: LD_INT 0
34023: PPUSH
// if HexInfo ( x , y ) = warehouse then
34024: LD_VAR 0 2
34028: PPUSH
34029: LD_VAR 0 3
34033: PPUSH
34034: CALL_OW 428
34038: PUSH
34039: LD_VAR 0 1
34043: EQUAL
34044: IFFALSE 34071
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34046: LD_ADDR_EXP 122
34050: PUSH
34051: LD_EXP 122
34055: PPUSH
34056: LD_VAR 0 1
34060: PPUSH
34061: LD_INT 0
34063: PPUSH
34064: CALL_OW 1
34068: ST_TO_ADDR
34069: GO 34122
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34071: LD_ADDR_EXP 122
34075: PUSH
34076: LD_EXP 122
34080: PPUSH
34081: LD_VAR 0 1
34085: PPUSH
34086: LD_VAR 0 1
34090: PPUSH
34091: CALL_OW 255
34095: PUSH
34096: LD_VAR 0 1
34100: PUSH
34101: LD_VAR 0 2
34105: PUSH
34106: LD_VAR 0 3
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: PPUSH
34117: CALL_OW 1
34121: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34122: CALL 34131 0 0
// end ;
34126: LD_VAR 0 4
34130: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34131: LD_INT 0
34133: PPUSH
34134: PPUSH
34135: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34136: LD_STRING resetWarehouseGatheringPoints();
34138: PPUSH
34139: CALL_OW 559
// if warehouseGatheringPoints then
34143: LD_EXP 122
34147: IFFALSE 34273
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34149: LD_ADDR_VAR 0 3
34153: PUSH
34154: LD_EXP 122
34158: PPUSH
34159: CALL 81158 0 1
34163: ST_TO_ADDR
// for i := 1 to list do
34164: LD_ADDR_VAR 0 2
34168: PUSH
34169: DOUBLE
34170: LD_INT 1
34172: DEC
34173: ST_TO_ADDR
34174: LD_VAR 0 3
34178: PUSH
34179: FOR_TO
34180: IFFALSE 34271
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34182: LD_STRING setWarehouseGatheringPointXY(
34184: PUSH
34185: LD_VAR 0 3
34189: PUSH
34190: LD_VAR 0 2
34194: ARRAY
34195: PUSH
34196: LD_INT 1
34198: ARRAY
34199: STR
34200: PUSH
34201: LD_STRING ,
34203: STR
34204: PUSH
34205: LD_VAR 0 3
34209: PUSH
34210: LD_VAR 0 2
34214: ARRAY
34215: PUSH
34216: LD_INT 2
34218: ARRAY
34219: STR
34220: PUSH
34221: LD_STRING ,
34223: STR
34224: PUSH
34225: LD_VAR 0 3
34229: PUSH
34230: LD_VAR 0 2
34234: ARRAY
34235: PUSH
34236: LD_INT 3
34238: ARRAY
34239: STR
34240: PUSH
34241: LD_STRING ,
34243: STR
34244: PUSH
34245: LD_VAR 0 3
34249: PUSH
34250: LD_VAR 0 2
34254: ARRAY
34255: PUSH
34256: LD_INT 4
34258: ARRAY
34259: STR
34260: PUSH
34261: LD_STRING )
34263: STR
34264: PPUSH
34265: CALL_OW 559
34269: GO 34179
34271: POP
34272: POP
// end ; end ;
34273: LD_VAR 0 1
34277: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34278: LD_EXP 122
34282: IFFALSE 34967
34284: GO 34286
34286: DISABLE
34287: LD_INT 0
34289: PPUSH
34290: PPUSH
34291: PPUSH
34292: PPUSH
34293: PPUSH
34294: PPUSH
34295: PPUSH
34296: PPUSH
34297: PPUSH
// begin enable ;
34298: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34299: LD_ADDR_VAR 0 3
34303: PUSH
34304: LD_EXP 122
34308: PPUSH
34309: CALL 81158 0 1
34313: ST_TO_ADDR
// if not list then
34314: LD_VAR 0 3
34318: NOT
34319: IFFALSE 34323
// exit ;
34321: GO 34967
// for i := 1 to list do
34323: LD_ADDR_VAR 0 1
34327: PUSH
34328: DOUBLE
34329: LD_INT 1
34331: DEC
34332: ST_TO_ADDR
34333: LD_VAR 0 3
34337: PUSH
34338: FOR_TO
34339: IFFALSE 34965
// begin depot := list [ i ] [ 2 ] ;
34341: LD_ADDR_VAR 0 8
34345: PUSH
34346: LD_VAR 0 3
34350: PUSH
34351: LD_VAR 0 1
34355: ARRAY
34356: PUSH
34357: LD_INT 2
34359: ARRAY
34360: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34361: LD_ADDR_VAR 0 5
34365: PUSH
34366: LD_VAR 0 3
34370: PUSH
34371: LD_VAR 0 1
34375: ARRAY
34376: PUSH
34377: LD_INT 1
34379: ARRAY
34380: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34381: LD_VAR 0 8
34385: PPUSH
34386: CALL_OW 301
34390: PUSH
34391: LD_VAR 0 5
34395: PUSH
34396: LD_VAR 0 8
34400: PPUSH
34401: CALL_OW 255
34405: NONEQUAL
34406: OR
34407: IFFALSE 34436
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34409: LD_ADDR_EXP 122
34413: PUSH
34414: LD_EXP 122
34418: PPUSH
34419: LD_VAR 0 8
34423: PPUSH
34424: LD_INT 0
34426: PPUSH
34427: CALL_OW 1
34431: ST_TO_ADDR
// exit ;
34432: POP
34433: POP
34434: GO 34967
// end ; x := list [ i ] [ 3 ] ;
34436: LD_ADDR_VAR 0 6
34440: PUSH
34441: LD_VAR 0 3
34445: PUSH
34446: LD_VAR 0 1
34450: ARRAY
34451: PUSH
34452: LD_INT 3
34454: ARRAY
34455: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34456: LD_ADDR_VAR 0 7
34460: PUSH
34461: LD_VAR 0 3
34465: PUSH
34466: LD_VAR 0 1
34470: ARRAY
34471: PUSH
34472: LD_INT 4
34474: ARRAY
34475: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34476: LD_ADDR_VAR 0 9
34480: PUSH
34481: LD_VAR 0 6
34485: PPUSH
34486: LD_VAR 0 7
34490: PPUSH
34491: LD_INT 16
34493: PPUSH
34494: CALL 79746 0 3
34498: ST_TO_ADDR
// if not cratesNearbyPoint then
34499: LD_VAR 0 9
34503: NOT
34504: IFFALSE 34510
// exit ;
34506: POP
34507: POP
34508: GO 34967
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34510: LD_ADDR_VAR 0 4
34514: PUSH
34515: LD_INT 22
34517: PUSH
34518: LD_VAR 0 5
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 3
34529: PUSH
34530: LD_INT 60
34532: PUSH
34533: EMPTY
34534: LIST
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 91
34542: PUSH
34543: LD_VAR 0 8
34547: PUSH
34548: LD_INT 6
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 2
34558: PUSH
34559: LD_INT 25
34561: PUSH
34562: LD_INT 2
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 25
34571: PUSH
34572: LD_INT 16
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: LIST
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: PPUSH
34590: CALL_OW 69
34594: PUSH
34595: LD_VAR 0 8
34599: PPUSH
34600: CALL_OW 313
34604: PPUSH
34605: LD_INT 3
34607: PUSH
34608: LD_INT 60
34610: PUSH
34611: EMPTY
34612: LIST
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 2
34620: PUSH
34621: LD_INT 25
34623: PUSH
34624: LD_INT 2
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 25
34633: PUSH
34634: LD_INT 16
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: LIST
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PPUSH
34650: CALL_OW 72
34654: UNION
34655: ST_TO_ADDR
// if tmp then
34656: LD_VAR 0 4
34660: IFFALSE 34740
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34662: LD_ADDR_VAR 0 4
34666: PUSH
34667: LD_VAR 0 4
34671: PPUSH
34672: LD_INT 3
34674: PPUSH
34675: CALL 77715 0 2
34679: ST_TO_ADDR
// for j in tmp do
34680: LD_ADDR_VAR 0 2
34684: PUSH
34685: LD_VAR 0 4
34689: PUSH
34690: FOR_IN
34691: IFFALSE 34734
// begin if IsInUnit ( j ) then
34693: LD_VAR 0 2
34697: PPUSH
34698: CALL_OW 310
34702: IFFALSE 34713
// ComExit ( j ) ;
34704: LD_VAR 0 2
34708: PPUSH
34709: CALL 77798 0 1
// AddComCollect ( j , x , y ) ;
34713: LD_VAR 0 2
34717: PPUSH
34718: LD_VAR 0 6
34722: PPUSH
34723: LD_VAR 0 7
34727: PPUSH
34728: CALL_OW 177
// end ;
34732: GO 34690
34734: POP
34735: POP
// exit ;
34736: POP
34737: POP
34738: GO 34967
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34740: LD_ADDR_VAR 0 4
34744: PUSH
34745: LD_INT 22
34747: PUSH
34748: LD_VAR 0 5
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 91
34759: PUSH
34760: LD_VAR 0 8
34764: PUSH
34765: LD_INT 8
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: LD_INT 34
34778: PUSH
34779: LD_INT 12
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 34
34788: PUSH
34789: LD_INT 51
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 34
34798: PUSH
34799: LD_INT 32
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 34
34808: PUSH
34809: LD_INT 89
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: LIST
34827: PPUSH
34828: CALL_OW 69
34832: ST_TO_ADDR
// if tmp then
34833: LD_VAR 0 4
34837: IFFALSE 34963
// begin for j in tmp do
34839: LD_ADDR_VAR 0 2
34843: PUSH
34844: LD_VAR 0 4
34848: PUSH
34849: FOR_IN
34850: IFFALSE 34961
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34852: LD_VAR 0 2
34856: PPUSH
34857: CALL_OW 262
34861: PUSH
34862: LD_INT 3
34864: EQUAL
34865: PUSH
34866: LD_VAR 0 2
34870: PPUSH
34871: CALL_OW 261
34875: PUSH
34876: LD_INT 20
34878: GREATER
34879: OR
34880: PUSH
34881: LD_VAR 0 2
34885: PPUSH
34886: CALL_OW 314
34890: NOT
34891: AND
34892: PUSH
34893: LD_VAR 0 2
34897: PPUSH
34898: CALL_OW 263
34902: PUSH
34903: LD_INT 1
34905: NONEQUAL
34906: PUSH
34907: LD_VAR 0 2
34911: PPUSH
34912: CALL_OW 311
34916: OR
34917: AND
34918: IFFALSE 34959
// begin ComCollect ( j , x , y ) ;
34920: LD_VAR 0 2
34924: PPUSH
34925: LD_VAR 0 6
34929: PPUSH
34930: LD_VAR 0 7
34934: PPUSH
34935: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34939: LD_VAR 0 2
34943: PPUSH
34944: LD_VAR 0 8
34948: PPUSH
34949: CALL_OW 172
// exit ;
34953: POP
34954: POP
34955: POP
34956: POP
34957: GO 34967
// end ;
34959: GO 34849
34961: POP
34962: POP
// end ; end ;
34963: GO 34338
34965: POP
34966: POP
// end ; end_of_file
34967: PPOPN 9
34969: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34970: LD_INT 0
34972: PPUSH
34973: PPUSH
34974: PPUSH
34975: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34976: LD_VAR 0 1
34980: PPUSH
34981: CALL_OW 264
34985: PUSH
34986: LD_INT 91
34988: EQUAL
34989: IFFALSE 35061
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34991: LD_INT 68
34993: PPUSH
34994: LD_VAR 0 1
34998: PPUSH
34999: CALL_OW 255
35003: PPUSH
35004: CALL_OW 321
35008: PUSH
35009: LD_INT 2
35011: EQUAL
35012: IFFALSE 35024
// eff := 70 else
35014: LD_ADDR_VAR 0 4
35018: PUSH
35019: LD_INT 70
35021: ST_TO_ADDR
35022: GO 35032
// eff := 30 ;
35024: LD_ADDR_VAR 0 4
35028: PUSH
35029: LD_INT 30
35031: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35032: LD_VAR 0 1
35036: PPUSH
35037: CALL_OW 250
35041: PPUSH
35042: LD_VAR 0 1
35046: PPUSH
35047: CALL_OW 251
35051: PPUSH
35052: LD_VAR 0 4
35056: PPUSH
35057: CALL_OW 495
// end ; end ;
35061: LD_VAR 0 2
35065: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35066: LD_INT 0
35068: PPUSH
// end ;
35069: LD_VAR 0 4
35073: RET
// export function SOS_Command ( cmd ) ; begin
35074: LD_INT 0
35076: PPUSH
// end ;
35077: LD_VAR 0 2
35081: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35082: LD_INT 0
35084: PPUSH
// end ;
35085: LD_VAR 0 6
35089: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35090: LD_INT 0
35092: PPUSH
35093: PPUSH
// if not vehicle or not factory then
35094: LD_VAR 0 1
35098: NOT
35099: PUSH
35100: LD_VAR 0 2
35104: NOT
35105: OR
35106: IFFALSE 35110
// exit ;
35108: GO 35341
// if factoryWaypoints >= factory then
35110: LD_EXP 121
35114: PUSH
35115: LD_VAR 0 2
35119: GREATEREQUAL
35120: IFFALSE 35341
// if factoryWaypoints [ factory ] then
35122: LD_EXP 121
35126: PUSH
35127: LD_VAR 0 2
35131: ARRAY
35132: IFFALSE 35341
// begin if GetControl ( vehicle ) = control_manual then
35134: LD_VAR 0 1
35138: PPUSH
35139: CALL_OW 263
35143: PUSH
35144: LD_INT 1
35146: EQUAL
35147: IFFALSE 35228
// begin driver := IsDrivenBy ( vehicle ) ;
35149: LD_ADDR_VAR 0 4
35153: PUSH
35154: LD_VAR 0 1
35158: PPUSH
35159: CALL_OW 311
35163: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35164: LD_VAR 0 4
35168: PPUSH
35169: LD_EXP 121
35173: PUSH
35174: LD_VAR 0 2
35178: ARRAY
35179: PUSH
35180: LD_INT 3
35182: ARRAY
35183: PPUSH
35184: LD_EXP 121
35188: PUSH
35189: LD_VAR 0 2
35193: ARRAY
35194: PUSH
35195: LD_INT 4
35197: ARRAY
35198: PPUSH
35199: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35203: LD_VAR 0 4
35207: PPUSH
35208: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35212: LD_VAR 0 4
35216: PPUSH
35217: LD_VAR 0 2
35221: PPUSH
35222: CALL_OW 180
// end else
35226: GO 35341
// if GetControl ( vehicle ) = control_remote then
35228: LD_VAR 0 1
35232: PPUSH
35233: CALL_OW 263
35237: PUSH
35238: LD_INT 2
35240: EQUAL
35241: IFFALSE 35302
// begin wait ( 0 0$2 ) ;
35243: LD_INT 70
35245: PPUSH
35246: CALL_OW 67
// if Connect ( vehicle ) then
35250: LD_VAR 0 1
35254: PPUSH
35255: CALL 48006 0 1
35259: IFFALSE 35300
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35261: LD_VAR 0 1
35265: PPUSH
35266: LD_EXP 121
35270: PUSH
35271: LD_VAR 0 2
35275: ARRAY
35276: PUSH
35277: LD_INT 3
35279: ARRAY
35280: PPUSH
35281: LD_EXP 121
35285: PUSH
35286: LD_VAR 0 2
35290: ARRAY
35291: PUSH
35292: LD_INT 4
35294: ARRAY
35295: PPUSH
35296: CALL_OW 171
// end else
35300: GO 35341
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35302: LD_VAR 0 1
35306: PPUSH
35307: LD_EXP 121
35311: PUSH
35312: LD_VAR 0 2
35316: ARRAY
35317: PUSH
35318: LD_INT 3
35320: ARRAY
35321: PPUSH
35322: LD_EXP 121
35326: PUSH
35327: LD_VAR 0 2
35331: ARRAY
35332: PUSH
35333: LD_INT 4
35335: ARRAY
35336: PPUSH
35337: CALL_OW 171
// end ; end ;
35341: LD_VAR 0 3
35345: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35346: LD_INT 0
35348: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35349: LD_VAR 0 1
35353: PUSH
35354: LD_INT 250
35356: EQUAL
35357: PUSH
35358: LD_VAR 0 2
35362: PPUSH
35363: CALL_OW 264
35367: PUSH
35368: LD_INT 81
35370: EQUAL
35371: AND
35372: IFFALSE 35393
// MinerPlaceMine ( unit , x , y ) ;
35374: LD_VAR 0 2
35378: PPUSH
35379: LD_VAR 0 4
35383: PPUSH
35384: LD_VAR 0 5
35388: PPUSH
35389: CALL 38217 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35393: LD_VAR 0 1
35397: PUSH
35398: LD_INT 251
35400: EQUAL
35401: PUSH
35402: LD_VAR 0 2
35406: PPUSH
35407: CALL_OW 264
35411: PUSH
35412: LD_INT 81
35414: EQUAL
35415: AND
35416: IFFALSE 35437
// MinerDetonateMine ( unit , x , y ) ;
35418: LD_VAR 0 2
35422: PPUSH
35423: LD_VAR 0 4
35427: PPUSH
35428: LD_VAR 0 5
35432: PPUSH
35433: CALL 38492 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35437: LD_VAR 0 1
35441: PUSH
35442: LD_INT 252
35444: EQUAL
35445: PUSH
35446: LD_VAR 0 2
35450: PPUSH
35451: CALL_OW 264
35455: PUSH
35456: LD_INT 81
35458: EQUAL
35459: AND
35460: IFFALSE 35481
// MinerCreateMinefield ( unit , x , y ) ;
35462: LD_VAR 0 2
35466: PPUSH
35467: LD_VAR 0 4
35471: PPUSH
35472: LD_VAR 0 5
35476: PPUSH
35477: CALL 38909 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35481: LD_VAR 0 1
35485: PUSH
35486: LD_INT 253
35488: EQUAL
35489: PUSH
35490: LD_VAR 0 2
35494: PPUSH
35495: CALL_OW 257
35499: PUSH
35500: LD_INT 5
35502: EQUAL
35503: AND
35504: IFFALSE 35525
// ComBinocular ( unit , x , y ) ;
35506: LD_VAR 0 2
35510: PPUSH
35511: LD_VAR 0 4
35515: PPUSH
35516: LD_VAR 0 5
35520: PPUSH
35521: CALL 39278 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35525: LD_VAR 0 1
35529: PUSH
35530: LD_INT 254
35532: EQUAL
35533: PUSH
35534: LD_VAR 0 2
35538: PPUSH
35539: CALL_OW 264
35543: PUSH
35544: LD_INT 99
35546: EQUAL
35547: AND
35548: PUSH
35549: LD_VAR 0 3
35553: PPUSH
35554: CALL_OW 263
35558: PUSH
35559: LD_INT 3
35561: EQUAL
35562: AND
35563: IFFALSE 35579
// HackDestroyVehicle ( unit , selectedUnit ) ;
35565: LD_VAR 0 2
35569: PPUSH
35570: LD_VAR 0 3
35574: PPUSH
35575: CALL 37581 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35579: LD_VAR 0 1
35583: PUSH
35584: LD_INT 255
35586: EQUAL
35587: PUSH
35588: LD_VAR 0 2
35592: PPUSH
35593: CALL_OW 264
35597: PUSH
35598: LD_INT 14
35600: PUSH
35601: LD_INT 53
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: IN
35608: AND
35609: PUSH
35610: LD_VAR 0 4
35614: PPUSH
35615: LD_VAR 0 5
35619: PPUSH
35620: CALL_OW 488
35624: AND
35625: IFFALSE 35649
// CutTreeXYR ( unit , x , y , 12 ) ;
35627: LD_VAR 0 2
35631: PPUSH
35632: LD_VAR 0 4
35636: PPUSH
35637: LD_VAR 0 5
35641: PPUSH
35642: LD_INT 12
35644: PPUSH
35645: CALL 35744 0 4
// if cmd = 256 then
35649: LD_VAR 0 1
35653: PUSH
35654: LD_INT 256
35656: EQUAL
35657: IFFALSE 35678
// SetFactoryWaypoint ( unit , x , y ) ;
35659: LD_VAR 0 2
35663: PPUSH
35664: LD_VAR 0 4
35668: PPUSH
35669: LD_VAR 0 5
35673: PPUSH
35674: CALL 33659 0 3
// if cmd = 257 then
35678: LD_VAR 0 1
35682: PUSH
35683: LD_INT 257
35685: EQUAL
35686: IFFALSE 35707
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35688: LD_VAR 0 2
35692: PPUSH
35693: LD_VAR 0 4
35697: PPUSH
35698: LD_VAR 0 5
35702: PPUSH
35703: CALL 34021 0 3
// if cmd = 258 then
35707: LD_VAR 0 1
35711: PUSH
35712: LD_INT 258
35714: EQUAL
35715: IFFALSE 35739
// BurnTreeXYR ( unit , x , y , 8 ) ;
35717: LD_VAR 0 2
35721: PPUSH
35722: LD_VAR 0 4
35726: PPUSH
35727: LD_VAR 0 5
35731: PPUSH
35732: LD_INT 8
35734: PPUSH
35735: CALL 36138 0 4
// end ;
35739: LD_VAR 0 6
35743: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35744: LD_INT 0
35746: PPUSH
35747: PPUSH
35748: PPUSH
35749: PPUSH
35750: PPUSH
35751: PPUSH
35752: PPUSH
35753: PPUSH
35754: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
35755: LD_VAR 0 1
35759: PPUSH
35760: CALL_OW 302
35764: NOT
35765: PUSH
35766: LD_VAR 0 2
35770: PPUSH
35771: LD_VAR 0 3
35775: PPUSH
35776: CALL_OW 488
35780: NOT
35781: OR
35782: PUSH
35783: LD_VAR 0 4
35787: NOT
35788: OR
35789: IFFALSE 35793
// exit ;
35791: GO 36133
// list := [ ] ;
35793: LD_ADDR_VAR 0 13
35797: PUSH
35798: EMPTY
35799: ST_TO_ADDR
// if x - r < 0 then
35800: LD_VAR 0 2
35804: PUSH
35805: LD_VAR 0 4
35809: MINUS
35810: PUSH
35811: LD_INT 0
35813: LESS
35814: IFFALSE 35826
// min_x := 0 else
35816: LD_ADDR_VAR 0 7
35820: PUSH
35821: LD_INT 0
35823: ST_TO_ADDR
35824: GO 35842
// min_x := x - r ;
35826: LD_ADDR_VAR 0 7
35830: PUSH
35831: LD_VAR 0 2
35835: PUSH
35836: LD_VAR 0 4
35840: MINUS
35841: ST_TO_ADDR
// if y - r < 0 then
35842: LD_VAR 0 3
35846: PUSH
35847: LD_VAR 0 4
35851: MINUS
35852: PUSH
35853: LD_INT 0
35855: LESS
35856: IFFALSE 35868
// min_y := 0 else
35858: LD_ADDR_VAR 0 8
35862: PUSH
35863: LD_INT 0
35865: ST_TO_ADDR
35866: GO 35884
// min_y := y - r ;
35868: LD_ADDR_VAR 0 8
35872: PUSH
35873: LD_VAR 0 3
35877: PUSH
35878: LD_VAR 0 4
35882: MINUS
35883: ST_TO_ADDR
// max_x := x + r ;
35884: LD_ADDR_VAR 0 9
35888: PUSH
35889: LD_VAR 0 2
35893: PUSH
35894: LD_VAR 0 4
35898: PLUS
35899: ST_TO_ADDR
// max_y := y + r ;
35900: LD_ADDR_VAR 0 10
35904: PUSH
35905: LD_VAR 0 3
35909: PUSH
35910: LD_VAR 0 4
35914: PLUS
35915: ST_TO_ADDR
// for _x = min_x to max_x do
35916: LD_ADDR_VAR 0 11
35920: PUSH
35921: DOUBLE
35922: LD_VAR 0 7
35926: DEC
35927: ST_TO_ADDR
35928: LD_VAR 0 9
35932: PUSH
35933: FOR_TO
35934: IFFALSE 36051
// for _y = min_y to max_y do
35936: LD_ADDR_VAR 0 12
35940: PUSH
35941: DOUBLE
35942: LD_VAR 0 8
35946: DEC
35947: ST_TO_ADDR
35948: LD_VAR 0 10
35952: PUSH
35953: FOR_TO
35954: IFFALSE 36047
// begin if not ValidHex ( _x , _y ) then
35956: LD_VAR 0 11
35960: PPUSH
35961: LD_VAR 0 12
35965: PPUSH
35966: CALL_OW 488
35970: NOT
35971: IFFALSE 35975
// continue ;
35973: GO 35953
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35975: LD_VAR 0 11
35979: PPUSH
35980: LD_VAR 0 12
35984: PPUSH
35985: CALL_OW 351
35989: PUSH
35990: LD_VAR 0 11
35994: PPUSH
35995: LD_VAR 0 12
35999: PPUSH
36000: CALL_OW 554
36004: AND
36005: IFFALSE 36045
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36007: LD_ADDR_VAR 0 13
36011: PUSH
36012: LD_VAR 0 13
36016: PPUSH
36017: LD_VAR 0 13
36021: PUSH
36022: LD_INT 1
36024: PLUS
36025: PPUSH
36026: LD_VAR 0 11
36030: PUSH
36031: LD_VAR 0 12
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PPUSH
36040: CALL_OW 2
36044: ST_TO_ADDR
// end ;
36045: GO 35953
36047: POP
36048: POP
36049: GO 35933
36051: POP
36052: POP
// if not list then
36053: LD_VAR 0 13
36057: NOT
36058: IFFALSE 36062
// exit ;
36060: GO 36133
// for i in list do
36062: LD_ADDR_VAR 0 6
36066: PUSH
36067: LD_VAR 0 13
36071: PUSH
36072: FOR_IN
36073: IFFALSE 36131
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36075: LD_VAR 0 1
36079: PPUSH
36080: LD_STRING M
36082: PUSH
36083: LD_VAR 0 6
36087: PUSH
36088: LD_INT 1
36090: ARRAY
36091: PUSH
36092: LD_VAR 0 6
36096: PUSH
36097: LD_INT 2
36099: ARRAY
36100: PUSH
36101: LD_INT 0
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: PUSH
36122: EMPTY
36123: LIST
36124: PPUSH
36125: CALL_OW 447
36129: GO 36072
36131: POP
36132: POP
// end ;
36133: LD_VAR 0 5
36137: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36138: LD_INT 0
36140: PPUSH
36141: PPUSH
36142: PPUSH
36143: PPUSH
36144: PPUSH
36145: PPUSH
36146: PPUSH
36147: PPUSH
36148: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36149: LD_VAR 0 1
36153: PPUSH
36154: CALL_OW 302
36158: NOT
36159: PUSH
36160: LD_VAR 0 2
36164: PPUSH
36165: LD_VAR 0 3
36169: PPUSH
36170: CALL_OW 488
36174: NOT
36175: OR
36176: PUSH
36177: LD_VAR 0 4
36181: NOT
36182: OR
36183: IFFALSE 36187
// exit ;
36185: GO 36535
// list := [ ] ;
36187: LD_ADDR_VAR 0 13
36191: PUSH
36192: EMPTY
36193: ST_TO_ADDR
// if x - r < 0 then
36194: LD_VAR 0 2
36198: PUSH
36199: LD_VAR 0 4
36203: MINUS
36204: PUSH
36205: LD_INT 0
36207: LESS
36208: IFFALSE 36220
// min_x := 0 else
36210: LD_ADDR_VAR 0 7
36214: PUSH
36215: LD_INT 0
36217: ST_TO_ADDR
36218: GO 36236
// min_x := x - r ;
36220: LD_ADDR_VAR 0 7
36224: PUSH
36225: LD_VAR 0 2
36229: PUSH
36230: LD_VAR 0 4
36234: MINUS
36235: ST_TO_ADDR
// if y - r < 0 then
36236: LD_VAR 0 3
36240: PUSH
36241: LD_VAR 0 4
36245: MINUS
36246: PUSH
36247: LD_INT 0
36249: LESS
36250: IFFALSE 36262
// min_y := 0 else
36252: LD_ADDR_VAR 0 8
36256: PUSH
36257: LD_INT 0
36259: ST_TO_ADDR
36260: GO 36278
// min_y := y - r ;
36262: LD_ADDR_VAR 0 8
36266: PUSH
36267: LD_VAR 0 3
36271: PUSH
36272: LD_VAR 0 4
36276: MINUS
36277: ST_TO_ADDR
// max_x := x + r ;
36278: LD_ADDR_VAR 0 9
36282: PUSH
36283: LD_VAR 0 2
36287: PUSH
36288: LD_VAR 0 4
36292: PLUS
36293: ST_TO_ADDR
// max_y := y + r ;
36294: LD_ADDR_VAR 0 10
36298: PUSH
36299: LD_VAR 0 3
36303: PUSH
36304: LD_VAR 0 4
36308: PLUS
36309: ST_TO_ADDR
// for _x = min_x to max_x do
36310: LD_ADDR_VAR 0 11
36314: PUSH
36315: DOUBLE
36316: LD_VAR 0 7
36320: DEC
36321: ST_TO_ADDR
36322: LD_VAR 0 9
36326: PUSH
36327: FOR_TO
36328: IFFALSE 36445
// for _y = min_y to max_y do
36330: LD_ADDR_VAR 0 12
36334: PUSH
36335: DOUBLE
36336: LD_VAR 0 8
36340: DEC
36341: ST_TO_ADDR
36342: LD_VAR 0 10
36346: PUSH
36347: FOR_TO
36348: IFFALSE 36441
// begin if not ValidHex ( _x , _y ) then
36350: LD_VAR 0 11
36354: PPUSH
36355: LD_VAR 0 12
36359: PPUSH
36360: CALL_OW 488
36364: NOT
36365: IFFALSE 36369
// continue ;
36367: GO 36347
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36369: LD_VAR 0 11
36373: PPUSH
36374: LD_VAR 0 12
36378: PPUSH
36379: CALL_OW 351
36383: PUSH
36384: LD_VAR 0 11
36388: PPUSH
36389: LD_VAR 0 12
36393: PPUSH
36394: CALL_OW 554
36398: AND
36399: IFFALSE 36439
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36401: LD_ADDR_VAR 0 13
36405: PUSH
36406: LD_VAR 0 13
36410: PPUSH
36411: LD_VAR 0 13
36415: PUSH
36416: LD_INT 1
36418: PLUS
36419: PPUSH
36420: LD_VAR 0 11
36424: PUSH
36425: LD_VAR 0 12
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PPUSH
36434: CALL_OW 2
36438: ST_TO_ADDR
// end ;
36439: GO 36347
36441: POP
36442: POP
36443: GO 36327
36445: POP
36446: POP
// if not list then
36447: LD_VAR 0 13
36451: NOT
36452: IFFALSE 36456
// exit ;
36454: GO 36535
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
36456: LD_ADDR_VAR 0 13
36460: PUSH
36461: LD_VAR 0 1
36465: PPUSH
36466: LD_VAR 0 13
36470: PPUSH
36471: LD_INT 1
36473: PPUSH
36474: LD_INT 1
36476: PPUSH
36477: CALL 45148 0 4
36481: ST_TO_ADDR
// ComStop ( flame ) ;
36482: LD_VAR 0 1
36486: PPUSH
36487: CALL_OW 141
// for i in list do
36491: LD_ADDR_VAR 0 6
36495: PUSH
36496: LD_VAR 0 13
36500: PUSH
36501: FOR_IN
36502: IFFALSE 36533
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
36504: LD_VAR 0 1
36508: PPUSH
36509: LD_VAR 0 6
36513: PUSH
36514: LD_INT 1
36516: ARRAY
36517: PPUSH
36518: LD_VAR 0 6
36522: PUSH
36523: LD_INT 2
36525: ARRAY
36526: PPUSH
36527: CALL_OW 176
36531: GO 36501
36533: POP
36534: POP
// end ;
36535: LD_VAR 0 5
36539: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36540: LD_EXP 124
36544: NOT
36545: IFFALSE 36595
36547: GO 36549
36549: DISABLE
// begin initHack := true ;
36550: LD_ADDR_EXP 124
36554: PUSH
36555: LD_INT 1
36557: ST_TO_ADDR
// hackTanks := [ ] ;
36558: LD_ADDR_EXP 125
36562: PUSH
36563: EMPTY
36564: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36565: LD_ADDR_EXP 126
36569: PUSH
36570: EMPTY
36571: ST_TO_ADDR
// hackLimit := 3 ;
36572: LD_ADDR_EXP 127
36576: PUSH
36577: LD_INT 3
36579: ST_TO_ADDR
// hackDist := 12 ;
36580: LD_ADDR_EXP 128
36584: PUSH
36585: LD_INT 12
36587: ST_TO_ADDR
// hackCounter := [ ] ;
36588: LD_ADDR_EXP 129
36592: PUSH
36593: EMPTY
36594: ST_TO_ADDR
// end ;
36595: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36596: LD_EXP 124
36600: PUSH
36601: LD_INT 34
36603: PUSH
36604: LD_INT 99
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PPUSH
36611: CALL_OW 69
36615: AND
36616: IFFALSE 36869
36618: GO 36620
36620: DISABLE
36621: LD_INT 0
36623: PPUSH
36624: PPUSH
// begin enable ;
36625: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36626: LD_ADDR_VAR 0 1
36630: PUSH
36631: LD_INT 34
36633: PUSH
36634: LD_INT 99
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PPUSH
36641: CALL_OW 69
36645: PUSH
36646: FOR_IN
36647: IFFALSE 36867
// begin if not i in hackTanks then
36649: LD_VAR 0 1
36653: PUSH
36654: LD_EXP 125
36658: IN
36659: NOT
36660: IFFALSE 36743
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36662: LD_ADDR_EXP 125
36666: PUSH
36667: LD_EXP 125
36671: PPUSH
36672: LD_EXP 125
36676: PUSH
36677: LD_INT 1
36679: PLUS
36680: PPUSH
36681: LD_VAR 0 1
36685: PPUSH
36686: CALL_OW 1
36690: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36691: LD_ADDR_EXP 126
36695: PUSH
36696: LD_EXP 126
36700: PPUSH
36701: LD_EXP 126
36705: PUSH
36706: LD_INT 1
36708: PLUS
36709: PPUSH
36710: EMPTY
36711: PPUSH
36712: CALL_OW 1
36716: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36717: LD_ADDR_EXP 129
36721: PUSH
36722: LD_EXP 129
36726: PPUSH
36727: LD_EXP 129
36731: PUSH
36732: LD_INT 1
36734: PLUS
36735: PPUSH
36736: EMPTY
36737: PPUSH
36738: CALL_OW 1
36742: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36743: LD_VAR 0 1
36747: PPUSH
36748: CALL_OW 302
36752: NOT
36753: IFFALSE 36766
// begin HackUnlinkAll ( i ) ;
36755: LD_VAR 0 1
36759: PPUSH
36760: CALL 36872 0 1
// continue ;
36764: GO 36646
// end ; HackCheckCapturedStatus ( i ) ;
36766: LD_VAR 0 1
36770: PPUSH
36771: CALL 37315 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36775: LD_ADDR_VAR 0 2
36779: PUSH
36780: LD_INT 81
36782: PUSH
36783: LD_VAR 0 1
36787: PPUSH
36788: CALL_OW 255
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 33
36799: PUSH
36800: LD_INT 3
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 91
36809: PUSH
36810: LD_VAR 0 1
36814: PUSH
36815: LD_EXP 128
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 50
36827: PUSH
36828: EMPTY
36829: LIST
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: PPUSH
36837: CALL_OW 69
36841: ST_TO_ADDR
// if not tmp then
36842: LD_VAR 0 2
36846: NOT
36847: IFFALSE 36851
// continue ;
36849: GO 36646
// HackLink ( i , tmp ) ;
36851: LD_VAR 0 1
36855: PPUSH
36856: LD_VAR 0 2
36860: PPUSH
36861: CALL 37008 0 2
// end ;
36865: GO 36646
36867: POP
36868: POP
// end ;
36869: PPOPN 2
36871: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36872: LD_INT 0
36874: PPUSH
36875: PPUSH
36876: PPUSH
// if not hack in hackTanks then
36877: LD_VAR 0 1
36881: PUSH
36882: LD_EXP 125
36886: IN
36887: NOT
36888: IFFALSE 36892
// exit ;
36890: GO 37003
// index := GetElementIndex ( hackTanks , hack ) ;
36892: LD_ADDR_VAR 0 4
36896: PUSH
36897: LD_EXP 125
36901: PPUSH
36902: LD_VAR 0 1
36906: PPUSH
36907: CALL 44445 0 2
36911: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36912: LD_EXP 126
36916: PUSH
36917: LD_VAR 0 4
36921: ARRAY
36922: IFFALSE 37003
// begin for i in hackTanksCaptured [ index ] do
36924: LD_ADDR_VAR 0 3
36928: PUSH
36929: LD_EXP 126
36933: PUSH
36934: LD_VAR 0 4
36938: ARRAY
36939: PUSH
36940: FOR_IN
36941: IFFALSE 36967
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36943: LD_VAR 0 3
36947: PUSH
36948: LD_INT 1
36950: ARRAY
36951: PPUSH
36952: LD_VAR 0 3
36956: PUSH
36957: LD_INT 2
36959: ARRAY
36960: PPUSH
36961: CALL_OW 235
36965: GO 36940
36967: POP
36968: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36969: LD_ADDR_EXP 126
36973: PUSH
36974: LD_EXP 126
36978: PPUSH
36979: LD_VAR 0 4
36983: PPUSH
36984: EMPTY
36985: PPUSH
36986: CALL_OW 1
36990: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36991: LD_VAR 0 1
36995: PPUSH
36996: LD_INT 0
36998: PPUSH
36999: CALL_OW 505
// end ; end ;
37003: LD_VAR 0 2
37007: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37008: LD_INT 0
37010: PPUSH
37011: PPUSH
37012: PPUSH
// if not hack in hackTanks or not vehicles then
37013: LD_VAR 0 1
37017: PUSH
37018: LD_EXP 125
37022: IN
37023: NOT
37024: PUSH
37025: LD_VAR 0 2
37029: NOT
37030: OR
37031: IFFALSE 37035
// exit ;
37033: GO 37310
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37035: LD_ADDR_VAR 0 2
37039: PUSH
37040: LD_VAR 0 1
37044: PPUSH
37045: LD_VAR 0 2
37049: PPUSH
37050: LD_INT 1
37052: PPUSH
37053: LD_INT 1
37055: PPUSH
37056: CALL 45095 0 4
37060: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37061: LD_ADDR_VAR 0 5
37065: PUSH
37066: LD_EXP 125
37070: PPUSH
37071: LD_VAR 0 1
37075: PPUSH
37076: CALL 44445 0 2
37080: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37081: LD_EXP 126
37085: PUSH
37086: LD_VAR 0 5
37090: ARRAY
37091: PUSH
37092: LD_EXP 127
37096: LESS
37097: IFFALSE 37286
// begin for i := 1 to vehicles do
37099: LD_ADDR_VAR 0 4
37103: PUSH
37104: DOUBLE
37105: LD_INT 1
37107: DEC
37108: ST_TO_ADDR
37109: LD_VAR 0 2
37113: PUSH
37114: FOR_TO
37115: IFFALSE 37284
// begin if hackTanksCaptured [ index ] = hackLimit then
37117: LD_EXP 126
37121: PUSH
37122: LD_VAR 0 5
37126: ARRAY
37127: PUSH
37128: LD_EXP 127
37132: EQUAL
37133: IFFALSE 37137
// break ;
37135: GO 37284
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37137: LD_ADDR_EXP 129
37141: PUSH
37142: LD_EXP 129
37146: PPUSH
37147: LD_VAR 0 5
37151: PPUSH
37152: LD_EXP 129
37156: PUSH
37157: LD_VAR 0 5
37161: ARRAY
37162: PUSH
37163: LD_INT 1
37165: PLUS
37166: PPUSH
37167: CALL_OW 1
37171: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37172: LD_ADDR_EXP 126
37176: PUSH
37177: LD_EXP 126
37181: PPUSH
37182: LD_VAR 0 5
37186: PUSH
37187: LD_EXP 126
37191: PUSH
37192: LD_VAR 0 5
37196: ARRAY
37197: PUSH
37198: LD_INT 1
37200: PLUS
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PPUSH
37206: LD_VAR 0 2
37210: PUSH
37211: LD_VAR 0 4
37215: ARRAY
37216: PUSH
37217: LD_VAR 0 2
37221: PUSH
37222: LD_VAR 0 4
37226: ARRAY
37227: PPUSH
37228: CALL_OW 255
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PPUSH
37237: CALL 44660 0 3
37241: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37242: LD_VAR 0 2
37246: PUSH
37247: LD_VAR 0 4
37251: ARRAY
37252: PPUSH
37253: LD_VAR 0 1
37257: PPUSH
37258: CALL_OW 255
37262: PPUSH
37263: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37267: LD_VAR 0 2
37271: PUSH
37272: LD_VAR 0 4
37276: ARRAY
37277: PPUSH
37278: CALL_OW 141
// end ;
37282: GO 37114
37284: POP
37285: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37286: LD_VAR 0 1
37290: PPUSH
37291: LD_EXP 126
37295: PUSH
37296: LD_VAR 0 5
37300: ARRAY
37301: PUSH
37302: LD_INT 0
37304: PLUS
37305: PPUSH
37306: CALL_OW 505
// end ;
37310: LD_VAR 0 3
37314: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37315: LD_INT 0
37317: PPUSH
37318: PPUSH
37319: PPUSH
37320: PPUSH
// if not hack in hackTanks then
37321: LD_VAR 0 1
37325: PUSH
37326: LD_EXP 125
37330: IN
37331: NOT
37332: IFFALSE 37336
// exit ;
37334: GO 37576
// index := GetElementIndex ( hackTanks , hack ) ;
37336: LD_ADDR_VAR 0 4
37340: PUSH
37341: LD_EXP 125
37345: PPUSH
37346: LD_VAR 0 1
37350: PPUSH
37351: CALL 44445 0 2
37355: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37356: LD_ADDR_VAR 0 3
37360: PUSH
37361: DOUBLE
37362: LD_EXP 126
37366: PUSH
37367: LD_VAR 0 4
37371: ARRAY
37372: INC
37373: ST_TO_ADDR
37374: LD_INT 1
37376: PUSH
37377: FOR_DOWNTO
37378: IFFALSE 37550
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37380: LD_ADDR_VAR 0 5
37384: PUSH
37385: LD_EXP 126
37389: PUSH
37390: LD_VAR 0 4
37394: ARRAY
37395: PUSH
37396: LD_VAR 0 3
37400: ARRAY
37401: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37402: LD_VAR 0 5
37406: PUSH
37407: LD_INT 1
37409: ARRAY
37410: PPUSH
37411: CALL_OW 302
37415: NOT
37416: PUSH
37417: LD_VAR 0 5
37421: PUSH
37422: LD_INT 1
37424: ARRAY
37425: PPUSH
37426: CALL_OW 255
37430: PUSH
37431: LD_VAR 0 1
37435: PPUSH
37436: CALL_OW 255
37440: NONEQUAL
37441: OR
37442: IFFALSE 37548
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37444: LD_VAR 0 5
37448: PUSH
37449: LD_INT 1
37451: ARRAY
37452: PPUSH
37453: CALL_OW 305
37457: PUSH
37458: LD_VAR 0 5
37462: PUSH
37463: LD_INT 1
37465: ARRAY
37466: PPUSH
37467: CALL_OW 255
37471: PUSH
37472: LD_VAR 0 1
37476: PPUSH
37477: CALL_OW 255
37481: EQUAL
37482: AND
37483: IFFALSE 37507
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37485: LD_VAR 0 5
37489: PUSH
37490: LD_INT 1
37492: ARRAY
37493: PPUSH
37494: LD_VAR 0 5
37498: PUSH
37499: LD_INT 2
37501: ARRAY
37502: PPUSH
37503: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37507: LD_ADDR_EXP 126
37511: PUSH
37512: LD_EXP 126
37516: PPUSH
37517: LD_VAR 0 4
37521: PPUSH
37522: LD_EXP 126
37526: PUSH
37527: LD_VAR 0 4
37531: ARRAY
37532: PPUSH
37533: LD_VAR 0 3
37537: PPUSH
37538: CALL_OW 3
37542: PPUSH
37543: CALL_OW 1
37547: ST_TO_ADDR
// end ; end ;
37548: GO 37377
37550: POP
37551: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37552: LD_VAR 0 1
37556: PPUSH
37557: LD_EXP 126
37561: PUSH
37562: LD_VAR 0 4
37566: ARRAY
37567: PUSH
37568: LD_INT 0
37570: PLUS
37571: PPUSH
37572: CALL_OW 505
// end ;
37576: LD_VAR 0 2
37580: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37581: LD_INT 0
37583: PPUSH
37584: PPUSH
37585: PPUSH
37586: PPUSH
// if not hack in hackTanks then
37587: LD_VAR 0 1
37591: PUSH
37592: LD_EXP 125
37596: IN
37597: NOT
37598: IFFALSE 37602
// exit ;
37600: GO 37687
// index := GetElementIndex ( hackTanks , hack ) ;
37602: LD_ADDR_VAR 0 5
37606: PUSH
37607: LD_EXP 125
37611: PPUSH
37612: LD_VAR 0 1
37616: PPUSH
37617: CALL 44445 0 2
37621: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37622: LD_ADDR_VAR 0 4
37626: PUSH
37627: DOUBLE
37628: LD_INT 1
37630: DEC
37631: ST_TO_ADDR
37632: LD_EXP 126
37636: PUSH
37637: LD_VAR 0 5
37641: ARRAY
37642: PUSH
37643: FOR_TO
37644: IFFALSE 37685
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37646: LD_EXP 126
37650: PUSH
37651: LD_VAR 0 5
37655: ARRAY
37656: PUSH
37657: LD_VAR 0 4
37661: ARRAY
37662: PUSH
37663: LD_INT 1
37665: ARRAY
37666: PUSH
37667: LD_VAR 0 2
37671: EQUAL
37672: IFFALSE 37683
// KillUnit ( vehicle ) ;
37674: LD_VAR 0 2
37678: PPUSH
37679: CALL_OW 66
37683: GO 37643
37685: POP
37686: POP
// end ;
37687: LD_VAR 0 3
37691: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37692: LD_EXP 130
37696: NOT
37697: IFFALSE 37732
37699: GO 37701
37701: DISABLE
// begin initMiner := true ;
37702: LD_ADDR_EXP 130
37706: PUSH
37707: LD_INT 1
37709: ST_TO_ADDR
// minersList := [ ] ;
37710: LD_ADDR_EXP 131
37714: PUSH
37715: EMPTY
37716: ST_TO_ADDR
// minerMinesList := [ ] ;
37717: LD_ADDR_EXP 132
37721: PUSH
37722: EMPTY
37723: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37724: LD_ADDR_EXP 133
37728: PUSH
37729: LD_INT 5
37731: ST_TO_ADDR
// end ;
37732: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37733: LD_EXP 130
37737: PUSH
37738: LD_INT 34
37740: PUSH
37741: LD_INT 81
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PPUSH
37748: CALL_OW 69
37752: AND
37753: IFFALSE 38214
37755: GO 37757
37757: DISABLE
37758: LD_INT 0
37760: PPUSH
37761: PPUSH
37762: PPUSH
37763: PPUSH
// begin enable ;
37764: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37765: LD_ADDR_VAR 0 1
37769: PUSH
37770: LD_INT 34
37772: PUSH
37773: LD_INT 81
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PPUSH
37780: CALL_OW 69
37784: PUSH
37785: FOR_IN
37786: IFFALSE 37858
// begin if not i in minersList then
37788: LD_VAR 0 1
37792: PUSH
37793: LD_EXP 131
37797: IN
37798: NOT
37799: IFFALSE 37856
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37801: LD_ADDR_EXP 131
37805: PUSH
37806: LD_EXP 131
37810: PPUSH
37811: LD_EXP 131
37815: PUSH
37816: LD_INT 1
37818: PLUS
37819: PPUSH
37820: LD_VAR 0 1
37824: PPUSH
37825: CALL_OW 1
37829: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37830: LD_ADDR_EXP 132
37834: PUSH
37835: LD_EXP 132
37839: PPUSH
37840: LD_EXP 132
37844: PUSH
37845: LD_INT 1
37847: PLUS
37848: PPUSH
37849: EMPTY
37850: PPUSH
37851: CALL_OW 1
37855: ST_TO_ADDR
// end end ;
37856: GO 37785
37858: POP
37859: POP
// for i := minerMinesList downto 1 do
37860: LD_ADDR_VAR 0 1
37864: PUSH
37865: DOUBLE
37866: LD_EXP 132
37870: INC
37871: ST_TO_ADDR
37872: LD_INT 1
37874: PUSH
37875: FOR_DOWNTO
37876: IFFALSE 38212
// begin if IsLive ( minersList [ i ] ) then
37878: LD_EXP 131
37882: PUSH
37883: LD_VAR 0 1
37887: ARRAY
37888: PPUSH
37889: CALL_OW 300
37893: IFFALSE 37921
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37895: LD_EXP 131
37899: PUSH
37900: LD_VAR 0 1
37904: ARRAY
37905: PPUSH
37906: LD_EXP 132
37910: PUSH
37911: LD_VAR 0 1
37915: ARRAY
37916: PPUSH
37917: CALL_OW 505
// if not minerMinesList [ i ] then
37921: LD_EXP 132
37925: PUSH
37926: LD_VAR 0 1
37930: ARRAY
37931: NOT
37932: IFFALSE 37936
// continue ;
37934: GO 37875
// for j := minerMinesList [ i ] downto 1 do
37936: LD_ADDR_VAR 0 2
37940: PUSH
37941: DOUBLE
37942: LD_EXP 132
37946: PUSH
37947: LD_VAR 0 1
37951: ARRAY
37952: INC
37953: ST_TO_ADDR
37954: LD_INT 1
37956: PUSH
37957: FOR_DOWNTO
37958: IFFALSE 38208
// begin side := GetSide ( minersList [ i ] ) ;
37960: LD_ADDR_VAR 0 3
37964: PUSH
37965: LD_EXP 131
37969: PUSH
37970: LD_VAR 0 1
37974: ARRAY
37975: PPUSH
37976: CALL_OW 255
37980: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37981: LD_ADDR_VAR 0 4
37985: PUSH
37986: LD_EXP 132
37990: PUSH
37991: LD_VAR 0 1
37995: ARRAY
37996: PUSH
37997: LD_VAR 0 2
38001: ARRAY
38002: PUSH
38003: LD_INT 1
38005: ARRAY
38006: PPUSH
38007: LD_EXP 132
38011: PUSH
38012: LD_VAR 0 1
38016: ARRAY
38017: PUSH
38018: LD_VAR 0 2
38022: ARRAY
38023: PUSH
38024: LD_INT 2
38026: ARRAY
38027: PPUSH
38028: CALL_OW 428
38032: ST_TO_ADDR
// if not tmp then
38033: LD_VAR 0 4
38037: NOT
38038: IFFALSE 38042
// continue ;
38040: GO 37957
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38042: LD_VAR 0 4
38046: PUSH
38047: LD_INT 81
38049: PUSH
38050: LD_VAR 0 3
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PPUSH
38059: CALL_OW 69
38063: IN
38064: PUSH
38065: LD_EXP 132
38069: PUSH
38070: LD_VAR 0 1
38074: ARRAY
38075: PUSH
38076: LD_VAR 0 2
38080: ARRAY
38081: PUSH
38082: LD_INT 1
38084: ARRAY
38085: PPUSH
38086: LD_EXP 132
38090: PUSH
38091: LD_VAR 0 1
38095: ARRAY
38096: PUSH
38097: LD_VAR 0 2
38101: ARRAY
38102: PUSH
38103: LD_INT 2
38105: ARRAY
38106: PPUSH
38107: CALL_OW 458
38111: AND
38112: IFFALSE 38206
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38114: LD_EXP 132
38118: PUSH
38119: LD_VAR 0 1
38123: ARRAY
38124: PUSH
38125: LD_VAR 0 2
38129: ARRAY
38130: PUSH
38131: LD_INT 1
38133: ARRAY
38134: PPUSH
38135: LD_EXP 132
38139: PUSH
38140: LD_VAR 0 1
38144: ARRAY
38145: PUSH
38146: LD_VAR 0 2
38150: ARRAY
38151: PUSH
38152: LD_INT 2
38154: ARRAY
38155: PPUSH
38156: LD_VAR 0 3
38160: PPUSH
38161: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38165: LD_ADDR_EXP 132
38169: PUSH
38170: LD_EXP 132
38174: PPUSH
38175: LD_VAR 0 1
38179: PPUSH
38180: LD_EXP 132
38184: PUSH
38185: LD_VAR 0 1
38189: ARRAY
38190: PPUSH
38191: LD_VAR 0 2
38195: PPUSH
38196: CALL_OW 3
38200: PPUSH
38201: CALL_OW 1
38205: ST_TO_ADDR
// end ; end ;
38206: GO 37957
38208: POP
38209: POP
// end ;
38210: GO 37875
38212: POP
38213: POP
// end ;
38214: PPOPN 4
38216: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38217: LD_INT 0
38219: PPUSH
38220: PPUSH
// result := false ;
38221: LD_ADDR_VAR 0 4
38225: PUSH
38226: LD_INT 0
38228: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38229: LD_VAR 0 1
38233: PPUSH
38234: CALL_OW 264
38238: PUSH
38239: LD_INT 81
38241: EQUAL
38242: NOT
38243: IFFALSE 38247
// exit ;
38245: GO 38487
// index := GetElementIndex ( minersList , unit ) ;
38247: LD_ADDR_VAR 0 5
38251: PUSH
38252: LD_EXP 131
38256: PPUSH
38257: LD_VAR 0 1
38261: PPUSH
38262: CALL 44445 0 2
38266: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38267: LD_EXP 132
38271: PUSH
38272: LD_VAR 0 5
38276: ARRAY
38277: PUSH
38278: LD_EXP 133
38282: GREATEREQUAL
38283: IFFALSE 38287
// exit ;
38285: GO 38487
// ComMoveXY ( unit , x , y ) ;
38287: LD_VAR 0 1
38291: PPUSH
38292: LD_VAR 0 2
38296: PPUSH
38297: LD_VAR 0 3
38301: PPUSH
38302: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38306: LD_INT 35
38308: PPUSH
38309: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38313: LD_VAR 0 1
38317: PPUSH
38318: LD_VAR 0 2
38322: PPUSH
38323: LD_VAR 0 3
38327: PPUSH
38328: CALL 76197 0 3
38332: NOT
38333: PUSH
38334: LD_VAR 0 1
38338: PPUSH
38339: CALL_OW 314
38343: AND
38344: IFFALSE 38348
// exit ;
38346: GO 38487
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38348: LD_VAR 0 2
38352: PPUSH
38353: LD_VAR 0 3
38357: PPUSH
38358: CALL_OW 428
38362: PUSH
38363: LD_VAR 0 1
38367: EQUAL
38368: PUSH
38369: LD_VAR 0 1
38373: PPUSH
38374: CALL_OW 314
38378: NOT
38379: AND
38380: IFFALSE 38306
// PlaySoundXY ( x , y , PlantMine ) ;
38382: LD_VAR 0 2
38386: PPUSH
38387: LD_VAR 0 3
38391: PPUSH
38392: LD_STRING PlantMine
38394: PPUSH
38395: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38399: LD_VAR 0 2
38403: PPUSH
38404: LD_VAR 0 3
38408: PPUSH
38409: LD_VAR 0 1
38413: PPUSH
38414: CALL_OW 255
38418: PPUSH
38419: LD_INT 0
38421: PPUSH
38422: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38426: LD_ADDR_EXP 132
38430: PUSH
38431: LD_EXP 132
38435: PPUSH
38436: LD_VAR 0 5
38440: PUSH
38441: LD_EXP 132
38445: PUSH
38446: LD_VAR 0 5
38450: ARRAY
38451: PUSH
38452: LD_INT 1
38454: PLUS
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PPUSH
38460: LD_VAR 0 2
38464: PUSH
38465: LD_VAR 0 3
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PPUSH
38474: CALL 44660 0 3
38478: ST_TO_ADDR
// result := true ;
38479: LD_ADDR_VAR 0 4
38483: PUSH
38484: LD_INT 1
38486: ST_TO_ADDR
// end ;
38487: LD_VAR 0 4
38491: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38492: LD_INT 0
38494: PPUSH
38495: PPUSH
38496: PPUSH
// if not unit in minersList then
38497: LD_VAR 0 1
38501: PUSH
38502: LD_EXP 131
38506: IN
38507: NOT
38508: IFFALSE 38512
// exit ;
38510: GO 38904
// index := GetElementIndex ( minersList , unit ) ;
38512: LD_ADDR_VAR 0 6
38516: PUSH
38517: LD_EXP 131
38521: PPUSH
38522: LD_VAR 0 1
38526: PPUSH
38527: CALL 44445 0 2
38531: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38532: LD_ADDR_VAR 0 5
38536: PUSH
38537: DOUBLE
38538: LD_EXP 132
38542: PUSH
38543: LD_VAR 0 6
38547: ARRAY
38548: INC
38549: ST_TO_ADDR
38550: LD_INT 1
38552: PUSH
38553: FOR_DOWNTO
38554: IFFALSE 38715
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38556: LD_EXP 132
38560: PUSH
38561: LD_VAR 0 6
38565: ARRAY
38566: PUSH
38567: LD_VAR 0 5
38571: ARRAY
38572: PUSH
38573: LD_INT 1
38575: ARRAY
38576: PUSH
38577: LD_VAR 0 2
38581: EQUAL
38582: PUSH
38583: LD_EXP 132
38587: PUSH
38588: LD_VAR 0 6
38592: ARRAY
38593: PUSH
38594: LD_VAR 0 5
38598: ARRAY
38599: PUSH
38600: LD_INT 2
38602: ARRAY
38603: PUSH
38604: LD_VAR 0 3
38608: EQUAL
38609: AND
38610: IFFALSE 38713
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38612: LD_EXP 132
38616: PUSH
38617: LD_VAR 0 6
38621: ARRAY
38622: PUSH
38623: LD_VAR 0 5
38627: ARRAY
38628: PUSH
38629: LD_INT 1
38631: ARRAY
38632: PPUSH
38633: LD_EXP 132
38637: PUSH
38638: LD_VAR 0 6
38642: ARRAY
38643: PUSH
38644: LD_VAR 0 5
38648: ARRAY
38649: PUSH
38650: LD_INT 2
38652: ARRAY
38653: PPUSH
38654: LD_VAR 0 1
38658: PPUSH
38659: CALL_OW 255
38663: PPUSH
38664: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38668: LD_ADDR_EXP 132
38672: PUSH
38673: LD_EXP 132
38677: PPUSH
38678: LD_VAR 0 6
38682: PPUSH
38683: LD_EXP 132
38687: PUSH
38688: LD_VAR 0 6
38692: ARRAY
38693: PPUSH
38694: LD_VAR 0 5
38698: PPUSH
38699: CALL_OW 3
38703: PPUSH
38704: CALL_OW 1
38708: ST_TO_ADDR
// exit ;
38709: POP
38710: POP
38711: GO 38904
// end ; end ;
38713: GO 38553
38715: POP
38716: POP
// for i := minerMinesList [ index ] downto 1 do
38717: LD_ADDR_VAR 0 5
38721: PUSH
38722: DOUBLE
38723: LD_EXP 132
38727: PUSH
38728: LD_VAR 0 6
38732: ARRAY
38733: INC
38734: ST_TO_ADDR
38735: LD_INT 1
38737: PUSH
38738: FOR_DOWNTO
38739: IFFALSE 38902
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38741: LD_EXP 132
38745: PUSH
38746: LD_VAR 0 6
38750: ARRAY
38751: PUSH
38752: LD_VAR 0 5
38756: ARRAY
38757: PUSH
38758: LD_INT 1
38760: ARRAY
38761: PPUSH
38762: LD_EXP 132
38766: PUSH
38767: LD_VAR 0 6
38771: ARRAY
38772: PUSH
38773: LD_VAR 0 5
38777: ARRAY
38778: PUSH
38779: LD_INT 2
38781: ARRAY
38782: PPUSH
38783: LD_VAR 0 2
38787: PPUSH
38788: LD_VAR 0 3
38792: PPUSH
38793: CALL_OW 298
38797: PUSH
38798: LD_INT 6
38800: LESS
38801: IFFALSE 38900
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38803: LD_EXP 132
38807: PUSH
38808: LD_VAR 0 6
38812: ARRAY
38813: PUSH
38814: LD_VAR 0 5
38818: ARRAY
38819: PUSH
38820: LD_INT 1
38822: ARRAY
38823: PPUSH
38824: LD_EXP 132
38828: PUSH
38829: LD_VAR 0 6
38833: ARRAY
38834: PUSH
38835: LD_VAR 0 5
38839: ARRAY
38840: PUSH
38841: LD_INT 2
38843: ARRAY
38844: PPUSH
38845: LD_VAR 0 1
38849: PPUSH
38850: CALL_OW 255
38854: PPUSH
38855: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38859: LD_ADDR_EXP 132
38863: PUSH
38864: LD_EXP 132
38868: PPUSH
38869: LD_VAR 0 6
38873: PPUSH
38874: LD_EXP 132
38878: PUSH
38879: LD_VAR 0 6
38883: ARRAY
38884: PPUSH
38885: LD_VAR 0 5
38889: PPUSH
38890: CALL_OW 3
38894: PPUSH
38895: CALL_OW 1
38899: ST_TO_ADDR
// end ; end ;
38900: GO 38738
38902: POP
38903: POP
// end ;
38904: LD_VAR 0 4
38908: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38909: LD_INT 0
38911: PPUSH
38912: PPUSH
38913: PPUSH
38914: PPUSH
38915: PPUSH
38916: PPUSH
38917: PPUSH
38918: PPUSH
38919: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38920: LD_VAR 0 1
38924: PPUSH
38925: CALL_OW 264
38929: PUSH
38930: LD_INT 81
38932: EQUAL
38933: NOT
38934: PUSH
38935: LD_VAR 0 1
38939: PUSH
38940: LD_EXP 131
38944: IN
38945: NOT
38946: OR
38947: IFFALSE 38951
// exit ;
38949: GO 39273
// index := GetElementIndex ( minersList , unit ) ;
38951: LD_ADDR_VAR 0 6
38955: PUSH
38956: LD_EXP 131
38960: PPUSH
38961: LD_VAR 0 1
38965: PPUSH
38966: CALL 44445 0 2
38970: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38971: LD_ADDR_VAR 0 8
38975: PUSH
38976: LD_EXP 133
38980: PUSH
38981: LD_EXP 132
38985: PUSH
38986: LD_VAR 0 6
38990: ARRAY
38991: MINUS
38992: ST_TO_ADDR
// if not minesFreeAmount then
38993: LD_VAR 0 8
38997: NOT
38998: IFFALSE 39002
// exit ;
39000: GO 39273
// tmp := [ ] ;
39002: LD_ADDR_VAR 0 7
39006: PUSH
39007: EMPTY
39008: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39009: LD_ADDR_VAR 0 5
39013: PUSH
39014: DOUBLE
39015: LD_INT 1
39017: DEC
39018: ST_TO_ADDR
39019: LD_VAR 0 8
39023: PUSH
39024: FOR_TO
39025: IFFALSE 39220
// begin _d := rand ( 0 , 5 ) ;
39027: LD_ADDR_VAR 0 11
39031: PUSH
39032: LD_INT 0
39034: PPUSH
39035: LD_INT 5
39037: PPUSH
39038: CALL_OW 12
39042: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39043: LD_ADDR_VAR 0 12
39047: PUSH
39048: LD_INT 2
39050: PPUSH
39051: LD_INT 6
39053: PPUSH
39054: CALL_OW 12
39058: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39059: LD_ADDR_VAR 0 9
39063: PUSH
39064: LD_VAR 0 2
39068: PPUSH
39069: LD_VAR 0 11
39073: PPUSH
39074: LD_VAR 0 12
39078: PPUSH
39079: CALL_OW 272
39083: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39084: LD_ADDR_VAR 0 10
39088: PUSH
39089: LD_VAR 0 3
39093: PPUSH
39094: LD_VAR 0 11
39098: PPUSH
39099: LD_VAR 0 12
39103: PPUSH
39104: CALL_OW 273
39108: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39109: LD_VAR 0 9
39113: PPUSH
39114: LD_VAR 0 10
39118: PPUSH
39119: CALL_OW 488
39123: PUSH
39124: LD_VAR 0 9
39128: PUSH
39129: LD_VAR 0 10
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_VAR 0 7
39142: IN
39143: NOT
39144: AND
39145: PUSH
39146: LD_VAR 0 9
39150: PPUSH
39151: LD_VAR 0 10
39155: PPUSH
39156: CALL_OW 458
39160: NOT
39161: AND
39162: IFFALSE 39204
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39164: LD_ADDR_VAR 0 7
39168: PUSH
39169: LD_VAR 0 7
39173: PPUSH
39174: LD_VAR 0 7
39178: PUSH
39179: LD_INT 1
39181: PLUS
39182: PPUSH
39183: LD_VAR 0 9
39187: PUSH
39188: LD_VAR 0 10
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PPUSH
39197: CALL_OW 1
39201: ST_TO_ADDR
39202: GO 39218
// i := i - 1 ;
39204: LD_ADDR_VAR 0 5
39208: PUSH
39209: LD_VAR 0 5
39213: PUSH
39214: LD_INT 1
39216: MINUS
39217: ST_TO_ADDR
// end ;
39218: GO 39024
39220: POP
39221: POP
// for i in tmp do
39222: LD_ADDR_VAR 0 5
39226: PUSH
39227: LD_VAR 0 7
39231: PUSH
39232: FOR_IN
39233: IFFALSE 39271
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39235: LD_VAR 0 1
39239: PPUSH
39240: LD_VAR 0 5
39244: PUSH
39245: LD_INT 1
39247: ARRAY
39248: PPUSH
39249: LD_VAR 0 5
39253: PUSH
39254: LD_INT 2
39256: ARRAY
39257: PPUSH
39258: CALL 38217 0 3
39262: NOT
39263: IFFALSE 39269
// exit ;
39265: POP
39266: POP
39267: GO 39273
39269: GO 39232
39271: POP
39272: POP
// end ;
39273: LD_VAR 0 4
39277: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39278: LD_INT 0
39280: PPUSH
39281: PPUSH
39282: PPUSH
39283: PPUSH
39284: PPUSH
39285: PPUSH
39286: PPUSH
// if not GetClass ( unit ) = class_sniper then
39287: LD_VAR 0 1
39291: PPUSH
39292: CALL_OW 257
39296: PUSH
39297: LD_INT 5
39299: EQUAL
39300: NOT
39301: IFFALSE 39305
// exit ;
39303: GO 39693
// dist := 8 ;
39305: LD_ADDR_VAR 0 5
39309: PUSH
39310: LD_INT 8
39312: ST_TO_ADDR
// viewRange := 12 ;
39313: LD_ADDR_VAR 0 7
39317: PUSH
39318: LD_INT 12
39320: ST_TO_ADDR
// side := GetSide ( unit ) ;
39321: LD_ADDR_VAR 0 6
39325: PUSH
39326: LD_VAR 0 1
39330: PPUSH
39331: CALL_OW 255
39335: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39336: LD_INT 61
39338: PPUSH
39339: LD_VAR 0 6
39343: PPUSH
39344: CALL_OW 321
39348: PUSH
39349: LD_INT 2
39351: EQUAL
39352: IFFALSE 39362
// viewRange := 16 ;
39354: LD_ADDR_VAR 0 7
39358: PUSH
39359: LD_INT 16
39361: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39362: LD_VAR 0 1
39366: PPUSH
39367: LD_VAR 0 2
39371: PPUSH
39372: LD_VAR 0 3
39376: PPUSH
39377: CALL_OW 297
39381: PUSH
39382: LD_VAR 0 5
39386: GREATER
39387: IFFALSE 39466
// begin ComMoveXY ( unit , x , y ) ;
39389: LD_VAR 0 1
39393: PPUSH
39394: LD_VAR 0 2
39398: PPUSH
39399: LD_VAR 0 3
39403: PPUSH
39404: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39408: LD_INT 35
39410: PPUSH
39411: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39415: LD_VAR 0 1
39419: PPUSH
39420: LD_VAR 0 2
39424: PPUSH
39425: LD_VAR 0 3
39429: PPUSH
39430: CALL 76197 0 3
39434: NOT
39435: IFFALSE 39439
// exit ;
39437: GO 39693
// until GetDistUnitXY ( unit , x , y ) < dist ;
39439: LD_VAR 0 1
39443: PPUSH
39444: LD_VAR 0 2
39448: PPUSH
39449: LD_VAR 0 3
39453: PPUSH
39454: CALL_OW 297
39458: PUSH
39459: LD_VAR 0 5
39463: LESS
39464: IFFALSE 39408
// end ; ComTurnXY ( unit , x , y ) ;
39466: LD_VAR 0 1
39470: PPUSH
39471: LD_VAR 0 2
39475: PPUSH
39476: LD_VAR 0 3
39480: PPUSH
39481: CALL_OW 118
// wait ( 5 ) ;
39485: LD_INT 5
39487: PPUSH
39488: CALL_OW 67
// _d := GetDir ( unit ) ;
39492: LD_ADDR_VAR 0 10
39496: PUSH
39497: LD_VAR 0 1
39501: PPUSH
39502: CALL_OW 254
39506: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39507: LD_ADDR_VAR 0 8
39511: PUSH
39512: LD_VAR 0 1
39516: PPUSH
39517: CALL_OW 250
39521: PPUSH
39522: LD_VAR 0 10
39526: PPUSH
39527: LD_VAR 0 5
39531: PPUSH
39532: CALL_OW 272
39536: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39537: LD_ADDR_VAR 0 9
39541: PUSH
39542: LD_VAR 0 1
39546: PPUSH
39547: CALL_OW 251
39551: PPUSH
39552: LD_VAR 0 10
39556: PPUSH
39557: LD_VAR 0 5
39561: PPUSH
39562: CALL_OW 273
39566: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39567: LD_VAR 0 8
39571: PPUSH
39572: LD_VAR 0 9
39576: PPUSH
39577: CALL_OW 488
39581: NOT
39582: IFFALSE 39586
// exit ;
39584: GO 39693
// ComAnimCustom ( unit , 1 ) ;
39586: LD_VAR 0 1
39590: PPUSH
39591: LD_INT 1
39593: PPUSH
39594: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39598: LD_VAR 0 8
39602: PPUSH
39603: LD_VAR 0 9
39607: PPUSH
39608: LD_VAR 0 6
39612: PPUSH
39613: LD_VAR 0 7
39617: PPUSH
39618: CALL_OW 330
// repeat wait ( 1 ) ;
39622: LD_INT 1
39624: PPUSH
39625: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39629: LD_VAR 0 1
39633: PPUSH
39634: CALL_OW 316
39638: PUSH
39639: LD_VAR 0 1
39643: PPUSH
39644: CALL_OW 314
39648: OR
39649: PUSH
39650: LD_VAR 0 1
39654: PPUSH
39655: CALL_OW 302
39659: NOT
39660: OR
39661: PUSH
39662: LD_VAR 0 1
39666: PPUSH
39667: CALL_OW 301
39671: OR
39672: IFFALSE 39622
// RemoveSeeing ( _x , _y , side ) ;
39674: LD_VAR 0 8
39678: PPUSH
39679: LD_VAR 0 9
39683: PPUSH
39684: LD_VAR 0 6
39688: PPUSH
39689: CALL_OW 331
// end ; end_of_file
39693: LD_VAR 0 4
39697: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39698: LD_INT 0
39700: PPUSH
39701: PPUSH
// if exist_mode then
39702: LD_VAR 0 2
39706: IFFALSE 39731
// unit := CreateCharacter ( prefix & ident ) else
39708: LD_ADDR_VAR 0 5
39712: PUSH
39713: LD_VAR 0 3
39717: PUSH
39718: LD_VAR 0 1
39722: STR
39723: PPUSH
39724: CALL_OW 34
39728: ST_TO_ADDR
39729: GO 39746
// unit := NewCharacter ( ident ) ;
39731: LD_ADDR_VAR 0 5
39735: PUSH
39736: LD_VAR 0 1
39740: PPUSH
39741: CALL_OW 25
39745: ST_TO_ADDR
// result := unit ;
39746: LD_ADDR_VAR 0 4
39750: PUSH
39751: LD_VAR 0 5
39755: ST_TO_ADDR
// end ;
39756: LD_VAR 0 4
39760: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39761: LD_INT 0
39763: PPUSH
39764: PPUSH
// if not side or not nation then
39765: LD_VAR 0 1
39769: NOT
39770: PUSH
39771: LD_VAR 0 2
39775: NOT
39776: OR
39777: IFFALSE 39781
// exit ;
39779: GO 40549
// case nation of nation_american :
39781: LD_VAR 0 2
39785: PUSH
39786: LD_INT 1
39788: DOUBLE
39789: EQUAL
39790: IFTRUE 39794
39792: GO 40008
39794: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39795: LD_ADDR_VAR 0 4
39799: PUSH
39800: LD_INT 35
39802: PUSH
39803: LD_INT 45
39805: PUSH
39806: LD_INT 46
39808: PUSH
39809: LD_INT 47
39811: PUSH
39812: LD_INT 82
39814: PUSH
39815: LD_INT 83
39817: PUSH
39818: LD_INT 84
39820: PUSH
39821: LD_INT 85
39823: PUSH
39824: LD_INT 86
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: LD_INT 2
39832: PUSH
39833: LD_INT 6
39835: PUSH
39836: LD_INT 15
39838: PUSH
39839: LD_INT 16
39841: PUSH
39842: LD_INT 7
39844: PUSH
39845: LD_INT 12
39847: PUSH
39848: LD_INT 13
39850: PUSH
39851: LD_INT 10
39853: PUSH
39854: LD_INT 14
39856: PUSH
39857: LD_INT 20
39859: PUSH
39860: LD_INT 21
39862: PUSH
39863: LD_INT 22
39865: PUSH
39866: LD_INT 25
39868: PUSH
39869: LD_INT 32
39871: PUSH
39872: LD_INT 27
39874: PUSH
39875: LD_INT 36
39877: PUSH
39878: LD_INT 69
39880: PUSH
39881: LD_INT 39
39883: PUSH
39884: LD_INT 34
39886: PUSH
39887: LD_INT 40
39889: PUSH
39890: LD_INT 48
39892: PUSH
39893: LD_INT 49
39895: PUSH
39896: LD_INT 50
39898: PUSH
39899: LD_INT 51
39901: PUSH
39902: LD_INT 52
39904: PUSH
39905: LD_INT 53
39907: PUSH
39908: LD_INT 54
39910: PUSH
39911: LD_INT 55
39913: PUSH
39914: LD_INT 56
39916: PUSH
39917: LD_INT 57
39919: PUSH
39920: LD_INT 58
39922: PUSH
39923: LD_INT 59
39925: PUSH
39926: LD_INT 60
39928: PUSH
39929: LD_INT 61
39931: PUSH
39932: LD_INT 62
39934: PUSH
39935: LD_INT 80
39937: PUSH
39938: LD_INT 82
39940: PUSH
39941: LD_INT 83
39943: PUSH
39944: LD_INT 84
39946: PUSH
39947: LD_INT 85
39949: PUSH
39950: LD_INT 86
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: ST_TO_ADDR
40006: GO 40473
40008: LD_INT 2
40010: DOUBLE
40011: EQUAL
40012: IFTRUE 40016
40014: GO 40242
40016: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40017: LD_ADDR_VAR 0 4
40021: PUSH
40022: LD_INT 35
40024: PUSH
40025: LD_INT 45
40027: PUSH
40028: LD_INT 46
40030: PUSH
40031: LD_INT 47
40033: PUSH
40034: LD_INT 82
40036: PUSH
40037: LD_INT 83
40039: PUSH
40040: LD_INT 84
40042: PUSH
40043: LD_INT 85
40045: PUSH
40046: LD_INT 87
40048: PUSH
40049: LD_INT 70
40051: PUSH
40052: LD_INT 1
40054: PUSH
40055: LD_INT 11
40057: PUSH
40058: LD_INT 3
40060: PUSH
40061: LD_INT 4
40063: PUSH
40064: LD_INT 5
40066: PUSH
40067: LD_INT 6
40069: PUSH
40070: LD_INT 15
40072: PUSH
40073: LD_INT 18
40075: PUSH
40076: LD_INT 7
40078: PUSH
40079: LD_INT 17
40081: PUSH
40082: LD_INT 8
40084: PUSH
40085: LD_INT 20
40087: PUSH
40088: LD_INT 21
40090: PUSH
40091: LD_INT 22
40093: PUSH
40094: LD_INT 72
40096: PUSH
40097: LD_INT 26
40099: PUSH
40100: LD_INT 69
40102: PUSH
40103: LD_INT 39
40105: PUSH
40106: LD_INT 40
40108: PUSH
40109: LD_INT 41
40111: PUSH
40112: LD_INT 42
40114: PUSH
40115: LD_INT 43
40117: PUSH
40118: LD_INT 48
40120: PUSH
40121: LD_INT 49
40123: PUSH
40124: LD_INT 50
40126: PUSH
40127: LD_INT 51
40129: PUSH
40130: LD_INT 52
40132: PUSH
40133: LD_INT 53
40135: PUSH
40136: LD_INT 54
40138: PUSH
40139: LD_INT 55
40141: PUSH
40142: LD_INT 56
40144: PUSH
40145: LD_INT 60
40147: PUSH
40148: LD_INT 61
40150: PUSH
40151: LD_INT 62
40153: PUSH
40154: LD_INT 66
40156: PUSH
40157: LD_INT 67
40159: PUSH
40160: LD_INT 68
40162: PUSH
40163: LD_INT 81
40165: PUSH
40166: LD_INT 82
40168: PUSH
40169: LD_INT 83
40171: PUSH
40172: LD_INT 84
40174: PUSH
40175: LD_INT 85
40177: PUSH
40178: LD_INT 87
40180: PUSH
40181: LD_INT 88
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: ST_TO_ADDR
40240: GO 40473
40242: LD_INT 3
40244: DOUBLE
40245: EQUAL
40246: IFTRUE 40250
40248: GO 40472
40250: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40251: LD_ADDR_VAR 0 4
40255: PUSH
40256: LD_INT 46
40258: PUSH
40259: LD_INT 47
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: LD_INT 2
40267: PUSH
40268: LD_INT 82
40270: PUSH
40271: LD_INT 83
40273: PUSH
40274: LD_INT 84
40276: PUSH
40277: LD_INT 85
40279: PUSH
40280: LD_INT 86
40282: PUSH
40283: LD_INT 11
40285: PUSH
40286: LD_INT 9
40288: PUSH
40289: LD_INT 20
40291: PUSH
40292: LD_INT 19
40294: PUSH
40295: LD_INT 21
40297: PUSH
40298: LD_INT 24
40300: PUSH
40301: LD_INT 22
40303: PUSH
40304: LD_INT 25
40306: PUSH
40307: LD_INT 28
40309: PUSH
40310: LD_INT 29
40312: PUSH
40313: LD_INT 30
40315: PUSH
40316: LD_INT 31
40318: PUSH
40319: LD_INT 37
40321: PUSH
40322: LD_INT 38
40324: PUSH
40325: LD_INT 32
40327: PUSH
40328: LD_INT 27
40330: PUSH
40331: LD_INT 33
40333: PUSH
40334: LD_INT 69
40336: PUSH
40337: LD_INT 39
40339: PUSH
40340: LD_INT 34
40342: PUSH
40343: LD_INT 40
40345: PUSH
40346: LD_INT 71
40348: PUSH
40349: LD_INT 23
40351: PUSH
40352: LD_INT 44
40354: PUSH
40355: LD_INT 48
40357: PUSH
40358: LD_INT 49
40360: PUSH
40361: LD_INT 50
40363: PUSH
40364: LD_INT 51
40366: PUSH
40367: LD_INT 52
40369: PUSH
40370: LD_INT 53
40372: PUSH
40373: LD_INT 54
40375: PUSH
40376: LD_INT 55
40378: PUSH
40379: LD_INT 56
40381: PUSH
40382: LD_INT 57
40384: PUSH
40385: LD_INT 58
40387: PUSH
40388: LD_INT 59
40390: PUSH
40391: LD_INT 63
40393: PUSH
40394: LD_INT 64
40396: PUSH
40397: LD_INT 65
40399: PUSH
40400: LD_INT 82
40402: PUSH
40403: LD_INT 83
40405: PUSH
40406: LD_INT 84
40408: PUSH
40409: LD_INT 85
40411: PUSH
40412: LD_INT 86
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: ST_TO_ADDR
40470: GO 40473
40472: POP
// if state > - 1 and state < 3 then
40473: LD_VAR 0 3
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: GREATER
40482: PUSH
40483: LD_VAR 0 3
40487: PUSH
40488: LD_INT 3
40490: LESS
40491: AND
40492: IFFALSE 40549
// for i in result do
40494: LD_ADDR_VAR 0 5
40498: PUSH
40499: LD_VAR 0 4
40503: PUSH
40504: FOR_IN
40505: IFFALSE 40547
// if GetTech ( i , side ) <> state then
40507: LD_VAR 0 5
40511: PPUSH
40512: LD_VAR 0 1
40516: PPUSH
40517: CALL_OW 321
40521: PUSH
40522: LD_VAR 0 3
40526: NONEQUAL
40527: IFFALSE 40545
// result := result diff i ;
40529: LD_ADDR_VAR 0 4
40533: PUSH
40534: LD_VAR 0 4
40538: PUSH
40539: LD_VAR 0 5
40543: DIFF
40544: ST_TO_ADDR
40545: GO 40504
40547: POP
40548: POP
// end ;
40549: LD_VAR 0 4
40553: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40554: LD_INT 0
40556: PPUSH
40557: PPUSH
40558: PPUSH
// result := true ;
40559: LD_ADDR_VAR 0 3
40563: PUSH
40564: LD_INT 1
40566: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40567: LD_ADDR_VAR 0 5
40571: PUSH
40572: LD_VAR 0 2
40576: PPUSH
40577: CALL_OW 480
40581: ST_TO_ADDR
// if not tmp then
40582: LD_VAR 0 5
40586: NOT
40587: IFFALSE 40591
// exit ;
40589: GO 40640
// for i in tmp do
40591: LD_ADDR_VAR 0 4
40595: PUSH
40596: LD_VAR 0 5
40600: PUSH
40601: FOR_IN
40602: IFFALSE 40638
// if GetTech ( i , side ) <> state_researched then
40604: LD_VAR 0 4
40608: PPUSH
40609: LD_VAR 0 1
40613: PPUSH
40614: CALL_OW 321
40618: PUSH
40619: LD_INT 2
40621: NONEQUAL
40622: IFFALSE 40636
// begin result := false ;
40624: LD_ADDR_VAR 0 3
40628: PUSH
40629: LD_INT 0
40631: ST_TO_ADDR
// exit ;
40632: POP
40633: POP
40634: GO 40640
// end ;
40636: GO 40601
40638: POP
40639: POP
// end ;
40640: LD_VAR 0 3
40644: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40645: LD_INT 0
40647: PPUSH
40648: PPUSH
40649: PPUSH
40650: PPUSH
40651: PPUSH
40652: PPUSH
40653: PPUSH
40654: PPUSH
40655: PPUSH
40656: PPUSH
40657: PPUSH
40658: PPUSH
40659: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40660: LD_VAR 0 1
40664: NOT
40665: PUSH
40666: LD_VAR 0 1
40670: PPUSH
40671: CALL_OW 257
40675: PUSH
40676: LD_INT 9
40678: NONEQUAL
40679: OR
40680: IFFALSE 40684
// exit ;
40682: GO 41257
// side := GetSide ( unit ) ;
40684: LD_ADDR_VAR 0 9
40688: PUSH
40689: LD_VAR 0 1
40693: PPUSH
40694: CALL_OW 255
40698: ST_TO_ADDR
// tech_space := tech_spacanom ;
40699: LD_ADDR_VAR 0 12
40703: PUSH
40704: LD_INT 29
40706: ST_TO_ADDR
// tech_time := tech_taurad ;
40707: LD_ADDR_VAR 0 13
40711: PUSH
40712: LD_INT 28
40714: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40715: LD_ADDR_VAR 0 11
40719: PUSH
40720: LD_VAR 0 1
40724: PPUSH
40725: CALL_OW 310
40729: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40730: LD_VAR 0 11
40734: PPUSH
40735: CALL_OW 247
40739: PUSH
40740: LD_INT 2
40742: EQUAL
40743: IFFALSE 40747
// exit ;
40745: GO 41257
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40747: LD_ADDR_VAR 0 8
40751: PUSH
40752: LD_INT 81
40754: PUSH
40755: LD_VAR 0 9
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 3
40766: PUSH
40767: LD_INT 21
40769: PUSH
40770: LD_INT 3
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PPUSH
40785: CALL_OW 69
40789: ST_TO_ADDR
// if not tmp then
40790: LD_VAR 0 8
40794: NOT
40795: IFFALSE 40799
// exit ;
40797: GO 41257
// if in_unit then
40799: LD_VAR 0 11
40803: IFFALSE 40827
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40805: LD_ADDR_VAR 0 10
40809: PUSH
40810: LD_VAR 0 8
40814: PPUSH
40815: LD_VAR 0 11
40819: PPUSH
40820: CALL_OW 74
40824: ST_TO_ADDR
40825: GO 40847
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40827: LD_ADDR_VAR 0 10
40831: PUSH
40832: LD_VAR 0 8
40836: PPUSH
40837: LD_VAR 0 1
40841: PPUSH
40842: CALL_OW 74
40846: ST_TO_ADDR
// if not enemy then
40847: LD_VAR 0 10
40851: NOT
40852: IFFALSE 40856
// exit ;
40854: GO 41257
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40856: LD_VAR 0 11
40860: PUSH
40861: LD_VAR 0 11
40865: PPUSH
40866: LD_VAR 0 10
40870: PPUSH
40871: CALL_OW 296
40875: PUSH
40876: LD_INT 13
40878: GREATER
40879: AND
40880: PUSH
40881: LD_VAR 0 1
40885: PPUSH
40886: LD_VAR 0 10
40890: PPUSH
40891: CALL_OW 296
40895: PUSH
40896: LD_INT 12
40898: GREATER
40899: OR
40900: IFFALSE 40904
// exit ;
40902: GO 41257
// missile := [ 1 ] ;
40904: LD_ADDR_VAR 0 14
40908: PUSH
40909: LD_INT 1
40911: PUSH
40912: EMPTY
40913: LIST
40914: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40915: LD_VAR 0 9
40919: PPUSH
40920: LD_VAR 0 12
40924: PPUSH
40925: CALL_OW 325
40929: IFFALSE 40958
// missile := Replace ( missile , missile + 1 , 2 ) ;
40931: LD_ADDR_VAR 0 14
40935: PUSH
40936: LD_VAR 0 14
40940: PPUSH
40941: LD_VAR 0 14
40945: PUSH
40946: LD_INT 1
40948: PLUS
40949: PPUSH
40950: LD_INT 2
40952: PPUSH
40953: CALL_OW 1
40957: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40958: LD_VAR 0 9
40962: PPUSH
40963: LD_VAR 0 13
40967: PPUSH
40968: CALL_OW 325
40972: PUSH
40973: LD_VAR 0 10
40977: PPUSH
40978: CALL_OW 255
40982: PPUSH
40983: LD_VAR 0 13
40987: PPUSH
40988: CALL_OW 325
40992: NOT
40993: AND
40994: IFFALSE 41023
// missile := Replace ( missile , missile + 1 , 3 ) ;
40996: LD_ADDR_VAR 0 14
41000: PUSH
41001: LD_VAR 0 14
41005: PPUSH
41006: LD_VAR 0 14
41010: PUSH
41011: LD_INT 1
41013: PLUS
41014: PPUSH
41015: LD_INT 3
41017: PPUSH
41018: CALL_OW 1
41022: ST_TO_ADDR
// if missile < 2 then
41023: LD_VAR 0 14
41027: PUSH
41028: LD_INT 2
41030: LESS
41031: IFFALSE 41035
// exit ;
41033: GO 41257
// x := GetX ( enemy ) ;
41035: LD_ADDR_VAR 0 4
41039: PUSH
41040: LD_VAR 0 10
41044: PPUSH
41045: CALL_OW 250
41049: ST_TO_ADDR
// y := GetY ( enemy ) ;
41050: LD_ADDR_VAR 0 5
41054: PUSH
41055: LD_VAR 0 10
41059: PPUSH
41060: CALL_OW 251
41064: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41065: LD_ADDR_VAR 0 6
41069: PUSH
41070: LD_VAR 0 4
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PPUSH
41079: LD_INT 1
41081: PPUSH
41082: CALL_OW 12
41086: PLUS
41087: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41088: LD_ADDR_VAR 0 7
41092: PUSH
41093: LD_VAR 0 5
41097: PUSH
41098: LD_INT 1
41100: NEG
41101: PPUSH
41102: LD_INT 1
41104: PPUSH
41105: CALL_OW 12
41109: PLUS
41110: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41111: LD_VAR 0 6
41115: PPUSH
41116: LD_VAR 0 7
41120: PPUSH
41121: CALL_OW 488
41125: NOT
41126: IFFALSE 41148
// begin _x := x ;
41128: LD_ADDR_VAR 0 6
41132: PUSH
41133: LD_VAR 0 4
41137: ST_TO_ADDR
// _y := y ;
41138: LD_ADDR_VAR 0 7
41142: PUSH
41143: LD_VAR 0 5
41147: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41148: LD_ADDR_VAR 0 3
41152: PUSH
41153: LD_INT 1
41155: PPUSH
41156: LD_VAR 0 14
41160: PPUSH
41161: CALL_OW 12
41165: ST_TO_ADDR
// case i of 1 :
41166: LD_VAR 0 3
41170: PUSH
41171: LD_INT 1
41173: DOUBLE
41174: EQUAL
41175: IFTRUE 41179
41177: GO 41196
41179: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41180: LD_VAR 0 1
41184: PPUSH
41185: LD_VAR 0 10
41189: PPUSH
41190: CALL_OW 115
41194: GO 41257
41196: LD_INT 2
41198: DOUBLE
41199: EQUAL
41200: IFTRUE 41204
41202: GO 41226
41204: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41205: LD_VAR 0 1
41209: PPUSH
41210: LD_VAR 0 6
41214: PPUSH
41215: LD_VAR 0 7
41219: PPUSH
41220: CALL_OW 153
41224: GO 41257
41226: LD_INT 3
41228: DOUBLE
41229: EQUAL
41230: IFTRUE 41234
41232: GO 41256
41234: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41235: LD_VAR 0 1
41239: PPUSH
41240: LD_VAR 0 6
41244: PPUSH
41245: LD_VAR 0 7
41249: PPUSH
41250: CALL_OW 154
41254: GO 41257
41256: POP
// end ;
41257: LD_VAR 0 2
41261: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41262: LD_INT 0
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
41268: PPUSH
41269: PPUSH
// if not unit or not building then
41270: LD_VAR 0 1
41274: NOT
41275: PUSH
41276: LD_VAR 0 2
41280: NOT
41281: OR
41282: IFFALSE 41286
// exit ;
41284: GO 41444
// x := GetX ( building ) ;
41286: LD_ADDR_VAR 0 5
41290: PUSH
41291: LD_VAR 0 2
41295: PPUSH
41296: CALL_OW 250
41300: ST_TO_ADDR
// y := GetY ( building ) ;
41301: LD_ADDR_VAR 0 6
41305: PUSH
41306: LD_VAR 0 2
41310: PPUSH
41311: CALL_OW 251
41315: ST_TO_ADDR
// for i = 0 to 5 do
41316: LD_ADDR_VAR 0 4
41320: PUSH
41321: DOUBLE
41322: LD_INT 0
41324: DEC
41325: ST_TO_ADDR
41326: LD_INT 5
41328: PUSH
41329: FOR_TO
41330: IFFALSE 41442
// begin _x := ShiftX ( x , i , 3 ) ;
41332: LD_ADDR_VAR 0 7
41336: PUSH
41337: LD_VAR 0 5
41341: PPUSH
41342: LD_VAR 0 4
41346: PPUSH
41347: LD_INT 3
41349: PPUSH
41350: CALL_OW 272
41354: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41355: LD_ADDR_VAR 0 8
41359: PUSH
41360: LD_VAR 0 6
41364: PPUSH
41365: LD_VAR 0 4
41369: PPUSH
41370: LD_INT 3
41372: PPUSH
41373: CALL_OW 273
41377: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41378: LD_VAR 0 7
41382: PPUSH
41383: LD_VAR 0 8
41387: PPUSH
41388: CALL_OW 488
41392: NOT
41393: IFFALSE 41397
// continue ;
41395: GO 41329
// if HexInfo ( _x , _y ) = 0 then
41397: LD_VAR 0 7
41401: PPUSH
41402: LD_VAR 0 8
41406: PPUSH
41407: CALL_OW 428
41411: PUSH
41412: LD_INT 0
41414: EQUAL
41415: IFFALSE 41440
// begin ComMoveXY ( unit , _x , _y ) ;
41417: LD_VAR 0 1
41421: PPUSH
41422: LD_VAR 0 7
41426: PPUSH
41427: LD_VAR 0 8
41431: PPUSH
41432: CALL_OW 111
// exit ;
41436: POP
41437: POP
41438: GO 41444
// end ; end ;
41440: GO 41329
41442: POP
41443: POP
// end ;
41444: LD_VAR 0 3
41448: RET
// export function ScanBase ( side , base_area ) ; begin
41449: LD_INT 0
41451: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41452: LD_ADDR_VAR 0 3
41456: PUSH
41457: LD_VAR 0 2
41461: PPUSH
41462: LD_INT 81
41464: PUSH
41465: LD_VAR 0 1
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PPUSH
41474: CALL_OW 70
41478: ST_TO_ADDR
// end ;
41479: LD_VAR 0 3
41483: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41484: LD_INT 0
41486: PPUSH
41487: PPUSH
41488: PPUSH
41489: PPUSH
// result := false ;
41490: LD_ADDR_VAR 0 2
41494: PUSH
41495: LD_INT 0
41497: ST_TO_ADDR
// side := GetSide ( unit ) ;
41498: LD_ADDR_VAR 0 3
41502: PUSH
41503: LD_VAR 0 1
41507: PPUSH
41508: CALL_OW 255
41512: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41513: LD_ADDR_VAR 0 4
41517: PUSH
41518: LD_VAR 0 1
41522: PPUSH
41523: CALL_OW 248
41527: ST_TO_ADDR
// case nat of 1 :
41528: LD_VAR 0 4
41532: PUSH
41533: LD_INT 1
41535: DOUBLE
41536: EQUAL
41537: IFTRUE 41541
41539: GO 41552
41541: POP
// tech := tech_lassight ; 2 :
41542: LD_ADDR_VAR 0 5
41546: PUSH
41547: LD_INT 12
41549: ST_TO_ADDR
41550: GO 41591
41552: LD_INT 2
41554: DOUBLE
41555: EQUAL
41556: IFTRUE 41560
41558: GO 41571
41560: POP
// tech := tech_mortar ; 3 :
41561: LD_ADDR_VAR 0 5
41565: PUSH
41566: LD_INT 41
41568: ST_TO_ADDR
41569: GO 41591
41571: LD_INT 3
41573: DOUBLE
41574: EQUAL
41575: IFTRUE 41579
41577: GO 41590
41579: POP
// tech := tech_bazooka ; end ;
41580: LD_ADDR_VAR 0 5
41584: PUSH
41585: LD_INT 44
41587: ST_TO_ADDR
41588: GO 41591
41590: POP
// if Researched ( side , tech ) then
41591: LD_VAR 0 3
41595: PPUSH
41596: LD_VAR 0 5
41600: PPUSH
41601: CALL_OW 325
41605: IFFALSE 41632
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41607: LD_ADDR_VAR 0 2
41611: PUSH
41612: LD_INT 5
41614: PUSH
41615: LD_INT 8
41617: PUSH
41618: LD_INT 9
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: LIST
41625: PUSH
41626: LD_VAR 0 4
41630: ARRAY
41631: ST_TO_ADDR
// end ;
41632: LD_VAR 0 2
41636: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41637: LD_INT 0
41639: PPUSH
41640: PPUSH
41641: PPUSH
// if not mines then
41642: LD_VAR 0 2
41646: NOT
41647: IFFALSE 41651
// exit ;
41649: GO 41795
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41651: LD_ADDR_VAR 0 5
41655: PUSH
41656: LD_INT 81
41658: PUSH
41659: LD_VAR 0 1
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 3
41670: PUSH
41671: LD_INT 21
41673: PUSH
41674: LD_INT 3
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PPUSH
41689: CALL_OW 69
41693: ST_TO_ADDR
// for i in mines do
41694: LD_ADDR_VAR 0 4
41698: PUSH
41699: LD_VAR 0 2
41703: PUSH
41704: FOR_IN
41705: IFFALSE 41793
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41707: LD_VAR 0 4
41711: PUSH
41712: LD_INT 1
41714: ARRAY
41715: PPUSH
41716: LD_VAR 0 4
41720: PUSH
41721: LD_INT 2
41723: ARRAY
41724: PPUSH
41725: CALL_OW 458
41729: NOT
41730: IFFALSE 41734
// continue ;
41732: GO 41704
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41734: LD_VAR 0 4
41738: PUSH
41739: LD_INT 1
41741: ARRAY
41742: PPUSH
41743: LD_VAR 0 4
41747: PUSH
41748: LD_INT 2
41750: ARRAY
41751: PPUSH
41752: CALL_OW 428
41756: PUSH
41757: LD_VAR 0 5
41761: IN
41762: IFFALSE 41791
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41764: LD_VAR 0 4
41768: PUSH
41769: LD_INT 1
41771: ARRAY
41772: PPUSH
41773: LD_VAR 0 4
41777: PUSH
41778: LD_INT 2
41780: ARRAY
41781: PPUSH
41782: LD_VAR 0 1
41786: PPUSH
41787: CALL_OW 456
// end ;
41791: GO 41704
41793: POP
41794: POP
// end ;
41795: LD_VAR 0 3
41799: RET
// export function Count ( array ) ; begin
41800: LD_INT 0
41802: PPUSH
// result := array + 0 ;
41803: LD_ADDR_VAR 0 2
41807: PUSH
41808: LD_VAR 0 1
41812: PUSH
41813: LD_INT 0
41815: PLUS
41816: ST_TO_ADDR
// end ;
41817: LD_VAR 0 2
41821: RET
// export function IsEmpty ( building ) ; begin
41822: LD_INT 0
41824: PPUSH
// if not building then
41825: LD_VAR 0 1
41829: NOT
41830: IFFALSE 41834
// exit ;
41832: GO 41877
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41834: LD_ADDR_VAR 0 2
41838: PUSH
41839: LD_VAR 0 1
41843: PUSH
41844: LD_INT 22
41846: PUSH
41847: LD_VAR 0 1
41851: PPUSH
41852: CALL_OW 255
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 58
41863: PUSH
41864: EMPTY
41865: LIST
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PPUSH
41871: CALL_OW 69
41875: IN
41876: ST_TO_ADDR
// end ;
41877: LD_VAR 0 2
41881: RET
// export function IsNotFull ( building ) ; var places ; begin
41882: LD_INT 0
41884: PPUSH
41885: PPUSH
// if not building then
41886: LD_VAR 0 1
41890: NOT
41891: IFFALSE 41895
// exit ;
41893: GO 41923
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
41895: LD_ADDR_VAR 0 2
41899: PUSH
41900: LD_VAR 0 1
41904: PPUSH
41905: LD_INT 3
41907: PUSH
41908: LD_INT 62
41910: PUSH
41911: EMPTY
41912: LIST
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PPUSH
41918: CALL_OW 72
41922: ST_TO_ADDR
// end ;
41923: LD_VAR 0 2
41927: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41928: LD_INT 0
41930: PPUSH
41931: PPUSH
41932: PPUSH
41933: PPUSH
// tmp := [ ] ;
41934: LD_ADDR_VAR 0 3
41938: PUSH
41939: EMPTY
41940: ST_TO_ADDR
// list := [ ] ;
41941: LD_ADDR_VAR 0 5
41945: PUSH
41946: EMPTY
41947: ST_TO_ADDR
// for i = 16 to 25 do
41948: LD_ADDR_VAR 0 4
41952: PUSH
41953: DOUBLE
41954: LD_INT 16
41956: DEC
41957: ST_TO_ADDR
41958: LD_INT 25
41960: PUSH
41961: FOR_TO
41962: IFFALSE 42035
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41964: LD_ADDR_VAR 0 3
41968: PUSH
41969: LD_VAR 0 3
41973: PUSH
41974: LD_INT 22
41976: PUSH
41977: LD_VAR 0 1
41981: PPUSH
41982: CALL_OW 255
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 91
41993: PUSH
41994: LD_VAR 0 1
41998: PUSH
41999: LD_INT 6
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 30
42009: PUSH
42010: LD_VAR 0 4
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: LIST
42023: PUSH
42024: EMPTY
42025: LIST
42026: PPUSH
42027: CALL_OW 69
42031: ADD
42032: ST_TO_ADDR
42033: GO 41961
42035: POP
42036: POP
// for i = 1 to tmp do
42037: LD_ADDR_VAR 0 4
42041: PUSH
42042: DOUBLE
42043: LD_INT 1
42045: DEC
42046: ST_TO_ADDR
42047: LD_VAR 0 3
42051: PUSH
42052: FOR_TO
42053: IFFALSE 42141
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42055: LD_ADDR_VAR 0 5
42059: PUSH
42060: LD_VAR 0 5
42064: PUSH
42065: LD_VAR 0 3
42069: PUSH
42070: LD_VAR 0 4
42074: ARRAY
42075: PPUSH
42076: CALL_OW 266
42080: PUSH
42081: LD_VAR 0 3
42085: PUSH
42086: LD_VAR 0 4
42090: ARRAY
42091: PPUSH
42092: CALL_OW 250
42096: PUSH
42097: LD_VAR 0 3
42101: PUSH
42102: LD_VAR 0 4
42106: ARRAY
42107: PPUSH
42108: CALL_OW 251
42112: PUSH
42113: LD_VAR 0 3
42117: PUSH
42118: LD_VAR 0 4
42122: ARRAY
42123: PPUSH
42124: CALL_OW 254
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: PUSH
42135: EMPTY
42136: LIST
42137: ADD
42138: ST_TO_ADDR
42139: GO 42052
42141: POP
42142: POP
// result := list ;
42143: LD_ADDR_VAR 0 2
42147: PUSH
42148: LD_VAR 0 5
42152: ST_TO_ADDR
// end ;
42153: LD_VAR 0 2
42157: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42158: LD_INT 0
42160: PPUSH
42161: PPUSH
42162: PPUSH
42163: PPUSH
42164: PPUSH
42165: PPUSH
42166: PPUSH
// if not factory then
42167: LD_VAR 0 1
42171: NOT
42172: IFFALSE 42176
// exit ;
42174: GO 42769
// if control = control_apeman then
42176: LD_VAR 0 4
42180: PUSH
42181: LD_INT 5
42183: EQUAL
42184: IFFALSE 42293
// begin tmp := UnitsInside ( factory ) ;
42186: LD_ADDR_VAR 0 8
42190: PUSH
42191: LD_VAR 0 1
42195: PPUSH
42196: CALL_OW 313
42200: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42201: LD_VAR 0 8
42205: PPUSH
42206: LD_INT 25
42208: PUSH
42209: LD_INT 12
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PPUSH
42216: CALL_OW 72
42220: NOT
42221: IFFALSE 42231
// control := control_manual ;
42223: LD_ADDR_VAR 0 4
42227: PUSH
42228: LD_INT 1
42230: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42231: LD_ADDR_VAR 0 8
42235: PUSH
42236: LD_VAR 0 1
42240: PPUSH
42241: CALL 41928 0 1
42245: ST_TO_ADDR
// if tmp then
42246: LD_VAR 0 8
42250: IFFALSE 42293
// begin for i in tmp do
42252: LD_ADDR_VAR 0 7
42256: PUSH
42257: LD_VAR 0 8
42261: PUSH
42262: FOR_IN
42263: IFFALSE 42291
// if i [ 1 ] = b_ext_radio then
42265: LD_VAR 0 7
42269: PUSH
42270: LD_INT 1
42272: ARRAY
42273: PUSH
42274: LD_INT 22
42276: EQUAL
42277: IFFALSE 42289
// begin control := control_remote ;
42279: LD_ADDR_VAR 0 4
42283: PUSH
42284: LD_INT 2
42286: ST_TO_ADDR
// break ;
42287: GO 42291
// end ;
42289: GO 42262
42291: POP
42292: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42293: LD_VAR 0 1
42297: PPUSH
42298: LD_VAR 0 2
42302: PPUSH
42303: LD_VAR 0 3
42307: PPUSH
42308: LD_VAR 0 4
42312: PPUSH
42313: LD_VAR 0 5
42317: PPUSH
42318: CALL_OW 448
42322: IFFALSE 42357
// begin result := [ chassis , engine , control , weapon ] ;
42324: LD_ADDR_VAR 0 6
42328: PUSH
42329: LD_VAR 0 2
42333: PUSH
42334: LD_VAR 0 3
42338: PUSH
42339: LD_VAR 0 4
42343: PUSH
42344: LD_VAR 0 5
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: ST_TO_ADDR
// exit ;
42355: GO 42769
// end ; _chassis := AvailableChassisList ( factory ) ;
42357: LD_ADDR_VAR 0 9
42361: PUSH
42362: LD_VAR 0 1
42366: PPUSH
42367: CALL_OW 475
42371: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42372: LD_ADDR_VAR 0 11
42376: PUSH
42377: LD_VAR 0 1
42381: PPUSH
42382: CALL_OW 476
42386: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42387: LD_ADDR_VAR 0 12
42391: PUSH
42392: LD_VAR 0 1
42396: PPUSH
42397: CALL_OW 477
42401: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42402: LD_ADDR_VAR 0 10
42406: PUSH
42407: LD_VAR 0 1
42411: PPUSH
42412: CALL_OW 478
42416: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42417: LD_VAR 0 9
42421: NOT
42422: PUSH
42423: LD_VAR 0 11
42427: NOT
42428: OR
42429: PUSH
42430: LD_VAR 0 12
42434: NOT
42435: OR
42436: PUSH
42437: LD_VAR 0 10
42441: NOT
42442: OR
42443: IFFALSE 42478
// begin result := [ chassis , engine , control , weapon ] ;
42445: LD_ADDR_VAR 0 6
42449: PUSH
42450: LD_VAR 0 2
42454: PUSH
42455: LD_VAR 0 3
42459: PUSH
42460: LD_VAR 0 4
42464: PUSH
42465: LD_VAR 0 5
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: ST_TO_ADDR
// exit ;
42476: GO 42769
// end ; if not chassis in _chassis then
42478: LD_VAR 0 2
42482: PUSH
42483: LD_VAR 0 9
42487: IN
42488: NOT
42489: IFFALSE 42515
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42491: LD_ADDR_VAR 0 2
42495: PUSH
42496: LD_VAR 0 9
42500: PUSH
42501: LD_INT 1
42503: PPUSH
42504: LD_VAR 0 9
42508: PPUSH
42509: CALL_OW 12
42513: ARRAY
42514: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42515: LD_VAR 0 2
42519: PPUSH
42520: LD_VAR 0 3
42524: PPUSH
42525: CALL 42774 0 2
42529: NOT
42530: IFFALSE 42589
// repeat engine := _engine [ 1 ] ;
42532: LD_ADDR_VAR 0 3
42536: PUSH
42537: LD_VAR 0 11
42541: PUSH
42542: LD_INT 1
42544: ARRAY
42545: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42546: LD_ADDR_VAR 0 11
42550: PUSH
42551: LD_VAR 0 11
42555: PPUSH
42556: LD_INT 1
42558: PPUSH
42559: CALL_OW 3
42563: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42564: LD_VAR 0 2
42568: PPUSH
42569: LD_VAR 0 3
42573: PPUSH
42574: CALL 42774 0 2
42578: PUSH
42579: LD_VAR 0 11
42583: PUSH
42584: EMPTY
42585: EQUAL
42586: OR
42587: IFFALSE 42532
// if not control in _control then
42589: LD_VAR 0 4
42593: PUSH
42594: LD_VAR 0 12
42598: IN
42599: NOT
42600: IFFALSE 42626
// control := _control [ rand ( 1 , _control ) ] ;
42602: LD_ADDR_VAR 0 4
42606: PUSH
42607: LD_VAR 0 12
42611: PUSH
42612: LD_INT 1
42614: PPUSH
42615: LD_VAR 0 12
42619: PPUSH
42620: CALL_OW 12
42624: ARRAY
42625: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42626: LD_VAR 0 2
42630: PPUSH
42631: LD_VAR 0 5
42635: PPUSH
42636: CALL 42994 0 2
42640: NOT
42641: IFFALSE 42700
// repeat weapon := _weapon [ 1 ] ;
42643: LD_ADDR_VAR 0 5
42647: PUSH
42648: LD_VAR 0 10
42652: PUSH
42653: LD_INT 1
42655: ARRAY
42656: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42657: LD_ADDR_VAR 0 10
42661: PUSH
42662: LD_VAR 0 10
42666: PPUSH
42667: LD_INT 1
42669: PPUSH
42670: CALL_OW 3
42674: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42675: LD_VAR 0 2
42679: PPUSH
42680: LD_VAR 0 5
42684: PPUSH
42685: CALL 42994 0 2
42689: PUSH
42690: LD_VAR 0 10
42694: PUSH
42695: EMPTY
42696: EQUAL
42697: OR
42698: IFFALSE 42643
// result := [ ] ;
42700: LD_ADDR_VAR 0 6
42704: PUSH
42705: EMPTY
42706: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42707: LD_VAR 0 1
42711: PPUSH
42712: LD_VAR 0 2
42716: PPUSH
42717: LD_VAR 0 3
42721: PPUSH
42722: LD_VAR 0 4
42726: PPUSH
42727: LD_VAR 0 5
42731: PPUSH
42732: CALL_OW 448
42736: IFFALSE 42769
// result := [ chassis , engine , control , weapon ] ;
42738: LD_ADDR_VAR 0 6
42742: PUSH
42743: LD_VAR 0 2
42747: PUSH
42748: LD_VAR 0 3
42752: PUSH
42753: LD_VAR 0 4
42757: PUSH
42758: LD_VAR 0 5
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: ST_TO_ADDR
// end ;
42769: LD_VAR 0 6
42773: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42774: LD_INT 0
42776: PPUSH
// if not chassis or not engine then
42777: LD_VAR 0 1
42781: NOT
42782: PUSH
42783: LD_VAR 0 2
42787: NOT
42788: OR
42789: IFFALSE 42793
// exit ;
42791: GO 42989
// case engine of engine_solar :
42793: LD_VAR 0 2
42797: PUSH
42798: LD_INT 2
42800: DOUBLE
42801: EQUAL
42802: IFTRUE 42806
42804: GO 42844
42806: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42807: LD_ADDR_VAR 0 3
42811: PUSH
42812: LD_INT 11
42814: PUSH
42815: LD_INT 12
42817: PUSH
42818: LD_INT 13
42820: PUSH
42821: LD_INT 14
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: LD_INT 2
42829: PUSH
42830: LD_INT 3
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: ST_TO_ADDR
42842: GO 42973
42844: LD_INT 1
42846: DOUBLE
42847: EQUAL
42848: IFTRUE 42852
42850: GO 42914
42852: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42853: LD_ADDR_VAR 0 3
42857: PUSH
42858: LD_INT 11
42860: PUSH
42861: LD_INT 12
42863: PUSH
42864: LD_INT 13
42866: PUSH
42867: LD_INT 14
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: LD_INT 2
42875: PUSH
42876: LD_INT 3
42878: PUSH
42879: LD_INT 4
42881: PUSH
42882: LD_INT 5
42884: PUSH
42885: LD_INT 21
42887: PUSH
42888: LD_INT 23
42890: PUSH
42891: LD_INT 22
42893: PUSH
42894: LD_INT 24
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: ST_TO_ADDR
42912: GO 42973
42914: LD_INT 3
42916: DOUBLE
42917: EQUAL
42918: IFTRUE 42922
42920: GO 42972
42922: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42923: LD_ADDR_VAR 0 3
42927: PUSH
42928: LD_INT 13
42930: PUSH
42931: LD_INT 14
42933: PUSH
42934: LD_INT 2
42936: PUSH
42937: LD_INT 3
42939: PUSH
42940: LD_INT 4
42942: PUSH
42943: LD_INT 5
42945: PUSH
42946: LD_INT 21
42948: PUSH
42949: LD_INT 22
42951: PUSH
42952: LD_INT 23
42954: PUSH
42955: LD_INT 24
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: ST_TO_ADDR
42970: GO 42973
42972: POP
// result := ( chassis in result ) ;
42973: LD_ADDR_VAR 0 3
42977: PUSH
42978: LD_VAR 0 1
42982: PUSH
42983: LD_VAR 0 3
42987: IN
42988: ST_TO_ADDR
// end ;
42989: LD_VAR 0 3
42993: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42994: LD_INT 0
42996: PPUSH
// if not chassis or not weapon then
42997: LD_VAR 0 1
43001: NOT
43002: PUSH
43003: LD_VAR 0 2
43007: NOT
43008: OR
43009: IFFALSE 43013
// exit ;
43011: GO 44073
// case weapon of us_machine_gun :
43013: LD_VAR 0 2
43017: PUSH
43018: LD_INT 2
43020: DOUBLE
43021: EQUAL
43022: IFTRUE 43026
43024: GO 43056
43026: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43027: LD_ADDR_VAR 0 3
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: LD_INT 3
43040: PUSH
43041: LD_INT 4
43043: PUSH
43044: LD_INT 5
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: ST_TO_ADDR
43054: GO 44057
43056: LD_INT 3
43058: DOUBLE
43059: EQUAL
43060: IFTRUE 43064
43062: GO 43094
43064: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43065: LD_ADDR_VAR 0 3
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: LD_INT 3
43078: PUSH
43079: LD_INT 4
43081: PUSH
43082: LD_INT 5
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: ST_TO_ADDR
43092: GO 44057
43094: LD_INT 11
43096: DOUBLE
43097: EQUAL
43098: IFTRUE 43102
43100: GO 43132
43102: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43103: LD_ADDR_VAR 0 3
43107: PUSH
43108: LD_INT 1
43110: PUSH
43111: LD_INT 2
43113: PUSH
43114: LD_INT 3
43116: PUSH
43117: LD_INT 4
43119: PUSH
43120: LD_INT 5
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: ST_TO_ADDR
43130: GO 44057
43132: LD_INT 4
43134: DOUBLE
43135: EQUAL
43136: IFTRUE 43140
43138: GO 43166
43140: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43141: LD_ADDR_VAR 0 3
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: LD_INT 3
43151: PUSH
43152: LD_INT 4
43154: PUSH
43155: LD_INT 5
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: ST_TO_ADDR
43164: GO 44057
43166: LD_INT 5
43168: DOUBLE
43169: EQUAL
43170: IFTRUE 43174
43172: GO 43200
43174: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43175: LD_ADDR_VAR 0 3
43179: PUSH
43180: LD_INT 2
43182: PUSH
43183: LD_INT 3
43185: PUSH
43186: LD_INT 4
43188: PUSH
43189: LD_INT 5
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: ST_TO_ADDR
43198: GO 44057
43200: LD_INT 9
43202: DOUBLE
43203: EQUAL
43204: IFTRUE 43208
43206: GO 43234
43208: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43209: LD_ADDR_VAR 0 3
43213: PUSH
43214: LD_INT 2
43216: PUSH
43217: LD_INT 3
43219: PUSH
43220: LD_INT 4
43222: PUSH
43223: LD_INT 5
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: ST_TO_ADDR
43232: GO 44057
43234: LD_INT 7
43236: DOUBLE
43237: EQUAL
43238: IFTRUE 43242
43240: GO 43268
43242: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43243: LD_ADDR_VAR 0 3
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: LD_INT 3
43253: PUSH
43254: LD_INT 4
43256: PUSH
43257: LD_INT 5
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: ST_TO_ADDR
43266: GO 44057
43268: LD_INT 12
43270: DOUBLE
43271: EQUAL
43272: IFTRUE 43276
43274: GO 43302
43276: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43277: LD_ADDR_VAR 0 3
43281: PUSH
43282: LD_INT 2
43284: PUSH
43285: LD_INT 3
43287: PUSH
43288: LD_INT 4
43290: PUSH
43291: LD_INT 5
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: ST_TO_ADDR
43300: GO 44057
43302: LD_INT 13
43304: DOUBLE
43305: EQUAL
43306: IFTRUE 43310
43308: GO 43336
43310: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43311: LD_ADDR_VAR 0 3
43315: PUSH
43316: LD_INT 2
43318: PUSH
43319: LD_INT 3
43321: PUSH
43322: LD_INT 4
43324: PUSH
43325: LD_INT 5
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: ST_TO_ADDR
43334: GO 44057
43336: LD_INT 14
43338: DOUBLE
43339: EQUAL
43340: IFTRUE 43344
43342: GO 43362
43344: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43345: LD_ADDR_VAR 0 3
43349: PUSH
43350: LD_INT 4
43352: PUSH
43353: LD_INT 5
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: ST_TO_ADDR
43360: GO 44057
43362: LD_INT 6
43364: DOUBLE
43365: EQUAL
43366: IFTRUE 43370
43368: GO 43388
43370: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43371: LD_ADDR_VAR 0 3
43375: PUSH
43376: LD_INT 4
43378: PUSH
43379: LD_INT 5
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: ST_TO_ADDR
43386: GO 44057
43388: LD_INT 10
43390: DOUBLE
43391: EQUAL
43392: IFTRUE 43396
43394: GO 43414
43396: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43397: LD_ADDR_VAR 0 3
43401: PUSH
43402: LD_INT 4
43404: PUSH
43405: LD_INT 5
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: ST_TO_ADDR
43412: GO 44057
43414: LD_INT 22
43416: DOUBLE
43417: EQUAL
43418: IFTRUE 43422
43420: GO 43448
43422: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43423: LD_ADDR_VAR 0 3
43427: PUSH
43428: LD_INT 11
43430: PUSH
43431: LD_INT 12
43433: PUSH
43434: LD_INT 13
43436: PUSH
43437: LD_INT 14
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: ST_TO_ADDR
43446: GO 44057
43448: LD_INT 23
43450: DOUBLE
43451: EQUAL
43452: IFTRUE 43456
43454: GO 43482
43456: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43457: LD_ADDR_VAR 0 3
43461: PUSH
43462: LD_INT 11
43464: PUSH
43465: LD_INT 12
43467: PUSH
43468: LD_INT 13
43470: PUSH
43471: LD_INT 14
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: ST_TO_ADDR
43480: GO 44057
43482: LD_INT 24
43484: DOUBLE
43485: EQUAL
43486: IFTRUE 43490
43488: GO 43516
43490: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43491: LD_ADDR_VAR 0 3
43495: PUSH
43496: LD_INT 11
43498: PUSH
43499: LD_INT 12
43501: PUSH
43502: LD_INT 13
43504: PUSH
43505: LD_INT 14
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: ST_TO_ADDR
43514: GO 44057
43516: LD_INT 30
43518: DOUBLE
43519: EQUAL
43520: IFTRUE 43524
43522: GO 43550
43524: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43525: LD_ADDR_VAR 0 3
43529: PUSH
43530: LD_INT 11
43532: PUSH
43533: LD_INT 12
43535: PUSH
43536: LD_INT 13
43538: PUSH
43539: LD_INT 14
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: ST_TO_ADDR
43548: GO 44057
43550: LD_INT 25
43552: DOUBLE
43553: EQUAL
43554: IFTRUE 43558
43556: GO 43576
43558: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43559: LD_ADDR_VAR 0 3
43563: PUSH
43564: LD_INT 13
43566: PUSH
43567: LD_INT 14
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: ST_TO_ADDR
43574: GO 44057
43576: LD_INT 27
43578: DOUBLE
43579: EQUAL
43580: IFTRUE 43584
43582: GO 43602
43584: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43585: LD_ADDR_VAR 0 3
43589: PUSH
43590: LD_INT 13
43592: PUSH
43593: LD_INT 14
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: ST_TO_ADDR
43600: GO 44057
43602: LD_INT 92
43604: DOUBLE
43605: EQUAL
43606: IFTRUE 43610
43608: GO 43636
43610: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43611: LD_ADDR_VAR 0 3
43615: PUSH
43616: LD_INT 11
43618: PUSH
43619: LD_INT 12
43621: PUSH
43622: LD_INT 13
43624: PUSH
43625: LD_INT 14
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: ST_TO_ADDR
43634: GO 44057
43636: LD_INT 28
43638: DOUBLE
43639: EQUAL
43640: IFTRUE 43644
43642: GO 43662
43644: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43645: LD_ADDR_VAR 0 3
43649: PUSH
43650: LD_INT 13
43652: PUSH
43653: LD_INT 14
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: ST_TO_ADDR
43660: GO 44057
43662: LD_INT 29
43664: DOUBLE
43665: EQUAL
43666: IFTRUE 43670
43668: GO 43688
43670: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43671: LD_ADDR_VAR 0 3
43675: PUSH
43676: LD_INT 13
43678: PUSH
43679: LD_INT 14
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: ST_TO_ADDR
43686: GO 44057
43688: LD_INT 31
43690: DOUBLE
43691: EQUAL
43692: IFTRUE 43696
43694: GO 43714
43696: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43697: LD_ADDR_VAR 0 3
43701: PUSH
43702: LD_INT 13
43704: PUSH
43705: LD_INT 14
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: ST_TO_ADDR
43712: GO 44057
43714: LD_INT 26
43716: DOUBLE
43717: EQUAL
43718: IFTRUE 43722
43720: GO 43740
43722: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43723: LD_ADDR_VAR 0 3
43727: PUSH
43728: LD_INT 13
43730: PUSH
43731: LD_INT 14
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: ST_TO_ADDR
43738: GO 44057
43740: LD_INT 42
43742: DOUBLE
43743: EQUAL
43744: IFTRUE 43748
43746: GO 43774
43748: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43749: LD_ADDR_VAR 0 3
43753: PUSH
43754: LD_INT 21
43756: PUSH
43757: LD_INT 22
43759: PUSH
43760: LD_INT 23
43762: PUSH
43763: LD_INT 24
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: ST_TO_ADDR
43772: GO 44057
43774: LD_INT 43
43776: DOUBLE
43777: EQUAL
43778: IFTRUE 43782
43780: GO 43808
43782: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43783: LD_ADDR_VAR 0 3
43787: PUSH
43788: LD_INT 21
43790: PUSH
43791: LD_INT 22
43793: PUSH
43794: LD_INT 23
43796: PUSH
43797: LD_INT 24
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: ST_TO_ADDR
43806: GO 44057
43808: LD_INT 44
43810: DOUBLE
43811: EQUAL
43812: IFTRUE 43816
43814: GO 43842
43816: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43817: LD_ADDR_VAR 0 3
43821: PUSH
43822: LD_INT 21
43824: PUSH
43825: LD_INT 22
43827: PUSH
43828: LD_INT 23
43830: PUSH
43831: LD_INT 24
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: ST_TO_ADDR
43840: GO 44057
43842: LD_INT 45
43844: DOUBLE
43845: EQUAL
43846: IFTRUE 43850
43848: GO 43876
43850: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43851: LD_ADDR_VAR 0 3
43855: PUSH
43856: LD_INT 21
43858: PUSH
43859: LD_INT 22
43861: PUSH
43862: LD_INT 23
43864: PUSH
43865: LD_INT 24
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: ST_TO_ADDR
43874: GO 44057
43876: LD_INT 49
43878: DOUBLE
43879: EQUAL
43880: IFTRUE 43884
43882: GO 43910
43884: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43885: LD_ADDR_VAR 0 3
43889: PUSH
43890: LD_INT 21
43892: PUSH
43893: LD_INT 22
43895: PUSH
43896: LD_INT 23
43898: PUSH
43899: LD_INT 24
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: ST_TO_ADDR
43908: GO 44057
43910: LD_INT 51
43912: DOUBLE
43913: EQUAL
43914: IFTRUE 43918
43916: GO 43944
43918: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43919: LD_ADDR_VAR 0 3
43923: PUSH
43924: LD_INT 21
43926: PUSH
43927: LD_INT 22
43929: PUSH
43930: LD_INT 23
43932: PUSH
43933: LD_INT 24
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: ST_TO_ADDR
43942: GO 44057
43944: LD_INT 52
43946: DOUBLE
43947: EQUAL
43948: IFTRUE 43952
43950: GO 43978
43952: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43953: LD_ADDR_VAR 0 3
43957: PUSH
43958: LD_INT 21
43960: PUSH
43961: LD_INT 22
43963: PUSH
43964: LD_INT 23
43966: PUSH
43967: LD_INT 24
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: ST_TO_ADDR
43976: GO 44057
43978: LD_INT 53
43980: DOUBLE
43981: EQUAL
43982: IFTRUE 43986
43984: GO 44004
43986: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43987: LD_ADDR_VAR 0 3
43991: PUSH
43992: LD_INT 23
43994: PUSH
43995: LD_INT 24
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: ST_TO_ADDR
44002: GO 44057
44004: LD_INT 46
44006: DOUBLE
44007: EQUAL
44008: IFTRUE 44012
44010: GO 44030
44012: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44013: LD_ADDR_VAR 0 3
44017: PUSH
44018: LD_INT 23
44020: PUSH
44021: LD_INT 24
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: ST_TO_ADDR
44028: GO 44057
44030: LD_INT 47
44032: DOUBLE
44033: EQUAL
44034: IFTRUE 44038
44036: GO 44056
44038: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44039: LD_ADDR_VAR 0 3
44043: PUSH
44044: LD_INT 23
44046: PUSH
44047: LD_INT 24
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: ST_TO_ADDR
44054: GO 44057
44056: POP
// result := ( chassis in result ) ;
44057: LD_ADDR_VAR 0 3
44061: PUSH
44062: LD_VAR 0 1
44066: PUSH
44067: LD_VAR 0 3
44071: IN
44072: ST_TO_ADDR
// end ;
44073: LD_VAR 0 3
44077: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44078: LD_INT 0
44080: PPUSH
44081: PPUSH
44082: PPUSH
44083: PPUSH
44084: PPUSH
44085: PPUSH
44086: PPUSH
// result := array ;
44087: LD_ADDR_VAR 0 5
44091: PUSH
44092: LD_VAR 0 1
44096: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44097: LD_VAR 0 1
44101: NOT
44102: PUSH
44103: LD_VAR 0 2
44107: NOT
44108: OR
44109: PUSH
44110: LD_VAR 0 3
44114: NOT
44115: OR
44116: PUSH
44117: LD_VAR 0 2
44121: PUSH
44122: LD_VAR 0 1
44126: GREATER
44127: OR
44128: PUSH
44129: LD_VAR 0 3
44133: PUSH
44134: LD_VAR 0 1
44138: GREATER
44139: OR
44140: IFFALSE 44144
// exit ;
44142: GO 44440
// if direction then
44144: LD_VAR 0 4
44148: IFFALSE 44212
// begin d := 1 ;
44150: LD_ADDR_VAR 0 9
44154: PUSH
44155: LD_INT 1
44157: ST_TO_ADDR
// if i_from > i_to then
44158: LD_VAR 0 2
44162: PUSH
44163: LD_VAR 0 3
44167: GREATER
44168: IFFALSE 44194
// length := ( array - i_from ) + i_to else
44170: LD_ADDR_VAR 0 11
44174: PUSH
44175: LD_VAR 0 1
44179: PUSH
44180: LD_VAR 0 2
44184: MINUS
44185: PUSH
44186: LD_VAR 0 3
44190: PLUS
44191: ST_TO_ADDR
44192: GO 44210
// length := i_to - i_from ;
44194: LD_ADDR_VAR 0 11
44198: PUSH
44199: LD_VAR 0 3
44203: PUSH
44204: LD_VAR 0 2
44208: MINUS
44209: ST_TO_ADDR
// end else
44210: GO 44273
// begin d := - 1 ;
44212: LD_ADDR_VAR 0 9
44216: PUSH
44217: LD_INT 1
44219: NEG
44220: ST_TO_ADDR
// if i_from > i_to then
44221: LD_VAR 0 2
44225: PUSH
44226: LD_VAR 0 3
44230: GREATER
44231: IFFALSE 44251
// length := i_from - i_to else
44233: LD_ADDR_VAR 0 11
44237: PUSH
44238: LD_VAR 0 2
44242: PUSH
44243: LD_VAR 0 3
44247: MINUS
44248: ST_TO_ADDR
44249: GO 44273
// length := ( array - i_to ) + i_from ;
44251: LD_ADDR_VAR 0 11
44255: PUSH
44256: LD_VAR 0 1
44260: PUSH
44261: LD_VAR 0 3
44265: MINUS
44266: PUSH
44267: LD_VAR 0 2
44271: PLUS
44272: ST_TO_ADDR
// end ; if not length then
44273: LD_VAR 0 11
44277: NOT
44278: IFFALSE 44282
// exit ;
44280: GO 44440
// tmp := array ;
44282: LD_ADDR_VAR 0 10
44286: PUSH
44287: LD_VAR 0 1
44291: ST_TO_ADDR
// for i = 1 to length do
44292: LD_ADDR_VAR 0 6
44296: PUSH
44297: DOUBLE
44298: LD_INT 1
44300: DEC
44301: ST_TO_ADDR
44302: LD_VAR 0 11
44306: PUSH
44307: FOR_TO
44308: IFFALSE 44428
// begin for j = 1 to array do
44310: LD_ADDR_VAR 0 7
44314: PUSH
44315: DOUBLE
44316: LD_INT 1
44318: DEC
44319: ST_TO_ADDR
44320: LD_VAR 0 1
44324: PUSH
44325: FOR_TO
44326: IFFALSE 44414
// begin k := j + d ;
44328: LD_ADDR_VAR 0 8
44332: PUSH
44333: LD_VAR 0 7
44337: PUSH
44338: LD_VAR 0 9
44342: PLUS
44343: ST_TO_ADDR
// if k > array then
44344: LD_VAR 0 8
44348: PUSH
44349: LD_VAR 0 1
44353: GREATER
44354: IFFALSE 44364
// k := 1 ;
44356: LD_ADDR_VAR 0 8
44360: PUSH
44361: LD_INT 1
44363: ST_TO_ADDR
// if not k then
44364: LD_VAR 0 8
44368: NOT
44369: IFFALSE 44381
// k := array ;
44371: LD_ADDR_VAR 0 8
44375: PUSH
44376: LD_VAR 0 1
44380: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44381: LD_ADDR_VAR 0 10
44385: PUSH
44386: LD_VAR 0 10
44390: PPUSH
44391: LD_VAR 0 8
44395: PPUSH
44396: LD_VAR 0 1
44400: PUSH
44401: LD_VAR 0 7
44405: ARRAY
44406: PPUSH
44407: CALL_OW 1
44411: ST_TO_ADDR
// end ;
44412: GO 44325
44414: POP
44415: POP
// array := tmp ;
44416: LD_ADDR_VAR 0 1
44420: PUSH
44421: LD_VAR 0 10
44425: ST_TO_ADDR
// end ;
44426: GO 44307
44428: POP
44429: POP
// result := array ;
44430: LD_ADDR_VAR 0 5
44434: PUSH
44435: LD_VAR 0 1
44439: ST_TO_ADDR
// end ;
44440: LD_VAR 0 5
44444: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44445: LD_INT 0
44447: PPUSH
44448: PPUSH
// result := 0 ;
44449: LD_ADDR_VAR 0 3
44453: PUSH
44454: LD_INT 0
44456: ST_TO_ADDR
// if not array or not value in array then
44457: LD_VAR 0 1
44461: NOT
44462: PUSH
44463: LD_VAR 0 2
44467: PUSH
44468: LD_VAR 0 1
44472: IN
44473: NOT
44474: OR
44475: IFFALSE 44479
// exit ;
44477: GO 44533
// for i = 1 to array do
44479: LD_ADDR_VAR 0 4
44483: PUSH
44484: DOUBLE
44485: LD_INT 1
44487: DEC
44488: ST_TO_ADDR
44489: LD_VAR 0 1
44493: PUSH
44494: FOR_TO
44495: IFFALSE 44531
// if value = array [ i ] then
44497: LD_VAR 0 2
44501: PUSH
44502: LD_VAR 0 1
44506: PUSH
44507: LD_VAR 0 4
44511: ARRAY
44512: EQUAL
44513: IFFALSE 44529
// begin result := i ;
44515: LD_ADDR_VAR 0 3
44519: PUSH
44520: LD_VAR 0 4
44524: ST_TO_ADDR
// exit ;
44525: POP
44526: POP
44527: GO 44533
// end ;
44529: GO 44494
44531: POP
44532: POP
// end ;
44533: LD_VAR 0 3
44537: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44538: LD_INT 0
44540: PPUSH
// vc_chassis := chassis ;
44541: LD_ADDR_OWVAR 37
44545: PUSH
44546: LD_VAR 0 1
44550: ST_TO_ADDR
// vc_engine := engine ;
44551: LD_ADDR_OWVAR 39
44555: PUSH
44556: LD_VAR 0 2
44560: ST_TO_ADDR
// vc_control := control ;
44561: LD_ADDR_OWVAR 38
44565: PUSH
44566: LD_VAR 0 3
44570: ST_TO_ADDR
// vc_weapon := weapon ;
44571: LD_ADDR_OWVAR 40
44575: PUSH
44576: LD_VAR 0 4
44580: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44581: LD_ADDR_OWVAR 41
44585: PUSH
44586: LD_VAR 0 5
44590: ST_TO_ADDR
// end ;
44591: LD_VAR 0 6
44595: RET
// export function WantPlant ( unit ) ; var task ; begin
44596: LD_INT 0
44598: PPUSH
44599: PPUSH
// result := false ;
44600: LD_ADDR_VAR 0 2
44604: PUSH
44605: LD_INT 0
44607: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44608: LD_ADDR_VAR 0 3
44612: PUSH
44613: LD_VAR 0 1
44617: PPUSH
44618: CALL_OW 437
44622: ST_TO_ADDR
// if task then
44623: LD_VAR 0 3
44627: IFFALSE 44655
// if task [ 1 ] [ 1 ] = p then
44629: LD_VAR 0 3
44633: PUSH
44634: LD_INT 1
44636: ARRAY
44637: PUSH
44638: LD_INT 1
44640: ARRAY
44641: PUSH
44642: LD_STRING p
44644: EQUAL
44645: IFFALSE 44655
// result := true ;
44647: LD_ADDR_VAR 0 2
44651: PUSH
44652: LD_INT 1
44654: ST_TO_ADDR
// end ;
44655: LD_VAR 0 2
44659: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44660: LD_INT 0
44662: PPUSH
44663: PPUSH
44664: PPUSH
44665: PPUSH
// if pos < 1 then
44666: LD_VAR 0 2
44670: PUSH
44671: LD_INT 1
44673: LESS
44674: IFFALSE 44678
// exit ;
44676: GO 44981
// if pos = 1 then
44678: LD_VAR 0 2
44682: PUSH
44683: LD_INT 1
44685: EQUAL
44686: IFFALSE 44719
// result := Replace ( arr , pos [ 1 ] , value ) else
44688: LD_ADDR_VAR 0 4
44692: PUSH
44693: LD_VAR 0 1
44697: PPUSH
44698: LD_VAR 0 2
44702: PUSH
44703: LD_INT 1
44705: ARRAY
44706: PPUSH
44707: LD_VAR 0 3
44711: PPUSH
44712: CALL_OW 1
44716: ST_TO_ADDR
44717: GO 44981
// begin tmp := arr ;
44719: LD_ADDR_VAR 0 6
44723: PUSH
44724: LD_VAR 0 1
44728: ST_TO_ADDR
// s_arr := [ tmp ] ;
44729: LD_ADDR_VAR 0 7
44733: PUSH
44734: LD_VAR 0 6
44738: PUSH
44739: EMPTY
44740: LIST
44741: ST_TO_ADDR
// for i = 1 to pos - 1 do
44742: LD_ADDR_VAR 0 5
44746: PUSH
44747: DOUBLE
44748: LD_INT 1
44750: DEC
44751: ST_TO_ADDR
44752: LD_VAR 0 2
44756: PUSH
44757: LD_INT 1
44759: MINUS
44760: PUSH
44761: FOR_TO
44762: IFFALSE 44807
// begin tmp := tmp [ pos [ i ] ] ;
44764: LD_ADDR_VAR 0 6
44768: PUSH
44769: LD_VAR 0 6
44773: PUSH
44774: LD_VAR 0 2
44778: PUSH
44779: LD_VAR 0 5
44783: ARRAY
44784: ARRAY
44785: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44786: LD_ADDR_VAR 0 7
44790: PUSH
44791: LD_VAR 0 7
44795: PUSH
44796: LD_VAR 0 6
44800: PUSH
44801: EMPTY
44802: LIST
44803: ADD
44804: ST_TO_ADDR
// end ;
44805: GO 44761
44807: POP
44808: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44809: LD_ADDR_VAR 0 6
44813: PUSH
44814: LD_VAR 0 6
44818: PPUSH
44819: LD_VAR 0 2
44823: PUSH
44824: LD_VAR 0 2
44828: ARRAY
44829: PPUSH
44830: LD_VAR 0 3
44834: PPUSH
44835: CALL_OW 1
44839: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44840: LD_ADDR_VAR 0 7
44844: PUSH
44845: LD_VAR 0 7
44849: PPUSH
44850: LD_VAR 0 7
44854: PPUSH
44855: LD_VAR 0 6
44859: PPUSH
44860: CALL_OW 1
44864: ST_TO_ADDR
// for i = s_arr downto 2 do
44865: LD_ADDR_VAR 0 5
44869: PUSH
44870: DOUBLE
44871: LD_VAR 0 7
44875: INC
44876: ST_TO_ADDR
44877: LD_INT 2
44879: PUSH
44880: FOR_DOWNTO
44881: IFFALSE 44965
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44883: LD_ADDR_VAR 0 6
44887: PUSH
44888: LD_VAR 0 7
44892: PUSH
44893: LD_VAR 0 5
44897: PUSH
44898: LD_INT 1
44900: MINUS
44901: ARRAY
44902: PPUSH
44903: LD_VAR 0 2
44907: PUSH
44908: LD_VAR 0 5
44912: PUSH
44913: LD_INT 1
44915: MINUS
44916: ARRAY
44917: PPUSH
44918: LD_VAR 0 7
44922: PUSH
44923: LD_VAR 0 5
44927: ARRAY
44928: PPUSH
44929: CALL_OW 1
44933: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44934: LD_ADDR_VAR 0 7
44938: PUSH
44939: LD_VAR 0 7
44943: PPUSH
44944: LD_VAR 0 5
44948: PUSH
44949: LD_INT 1
44951: MINUS
44952: PPUSH
44953: LD_VAR 0 6
44957: PPUSH
44958: CALL_OW 1
44962: ST_TO_ADDR
// end ;
44963: GO 44880
44965: POP
44966: POP
// result := s_arr [ 1 ] ;
44967: LD_ADDR_VAR 0 4
44971: PUSH
44972: LD_VAR 0 7
44976: PUSH
44977: LD_INT 1
44979: ARRAY
44980: ST_TO_ADDR
// end ; end ;
44981: LD_VAR 0 4
44985: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44986: LD_INT 0
44988: PPUSH
44989: PPUSH
// if not list then
44990: LD_VAR 0 1
44994: NOT
44995: IFFALSE 44999
// exit ;
44997: GO 45090
// i := list [ pos1 ] ;
44999: LD_ADDR_VAR 0 5
45003: PUSH
45004: LD_VAR 0 1
45008: PUSH
45009: LD_VAR 0 2
45013: ARRAY
45014: ST_TO_ADDR
// if not i then
45015: LD_VAR 0 5
45019: NOT
45020: IFFALSE 45024
// exit ;
45022: GO 45090
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45024: LD_ADDR_VAR 0 1
45028: PUSH
45029: LD_VAR 0 1
45033: PPUSH
45034: LD_VAR 0 2
45038: PPUSH
45039: LD_VAR 0 1
45043: PUSH
45044: LD_VAR 0 3
45048: ARRAY
45049: PPUSH
45050: CALL_OW 1
45054: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45055: LD_ADDR_VAR 0 1
45059: PUSH
45060: LD_VAR 0 1
45064: PPUSH
45065: LD_VAR 0 3
45069: PPUSH
45070: LD_VAR 0 5
45074: PPUSH
45075: CALL_OW 1
45079: ST_TO_ADDR
// result := list ;
45080: LD_ADDR_VAR 0 4
45084: PUSH
45085: LD_VAR 0 1
45089: ST_TO_ADDR
// end ;
45090: LD_VAR 0 4
45094: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45095: LD_INT 0
45097: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45098: LD_ADDR_VAR 0 5
45102: PUSH
45103: LD_VAR 0 1
45107: PPUSH
45108: CALL_OW 250
45112: PPUSH
45113: LD_VAR 0 1
45117: PPUSH
45118: CALL_OW 251
45122: PPUSH
45123: LD_VAR 0 2
45127: PPUSH
45128: LD_VAR 0 3
45132: PPUSH
45133: LD_VAR 0 4
45137: PPUSH
45138: CALL 45516 0 5
45142: ST_TO_ADDR
// end ;
45143: LD_VAR 0 5
45147: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
45148: LD_INT 0
45150: PPUSH
45151: PPUSH
45152: PPUSH
45153: PPUSH
// if not list or not unit then
45154: LD_VAR 0 2
45158: NOT
45159: PUSH
45160: LD_VAR 0 1
45164: NOT
45165: OR
45166: IFFALSE 45170
// exit ;
45168: GO 45511
// result := [ ] ;
45170: LD_ADDR_VAR 0 5
45174: PUSH
45175: EMPTY
45176: ST_TO_ADDR
// for i in list do
45177: LD_ADDR_VAR 0 6
45181: PUSH
45182: LD_VAR 0 2
45186: PUSH
45187: FOR_IN
45188: IFFALSE 45406
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45190: LD_ADDR_VAR 0 8
45194: PUSH
45195: LD_VAR 0 1
45199: PPUSH
45200: LD_VAR 0 6
45204: PUSH
45205: LD_INT 1
45207: ARRAY
45208: PPUSH
45209: LD_VAR 0 6
45213: PUSH
45214: LD_INT 2
45216: ARRAY
45217: PPUSH
45218: CALL_OW 297
45222: ST_TO_ADDR
// if not Count ( result ) then
45223: LD_VAR 0 5
45227: PPUSH
45228: CALL 41800 0 1
45232: NOT
45233: IFFALSE 45266
// begin result := Join ( result , [ i , tmp ] ) ;
45235: LD_ADDR_VAR 0 5
45239: PUSH
45240: LD_VAR 0 5
45244: PPUSH
45245: LD_VAR 0 6
45249: PUSH
45250: LD_VAR 0 8
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PPUSH
45259: CALL 77400 0 2
45263: ST_TO_ADDR
// continue ;
45264: GO 45187
// end ; if result [ result ] [ 2 ] <= tmp then
45266: LD_VAR 0 5
45270: PUSH
45271: LD_VAR 0 5
45275: ARRAY
45276: PUSH
45277: LD_INT 2
45279: ARRAY
45280: PUSH
45281: LD_VAR 0 8
45285: LESSEQUAL
45286: IFFALSE 45319
// result := Join ( result , [ i , tmp ] ) else
45288: LD_ADDR_VAR 0 5
45292: PUSH
45293: LD_VAR 0 5
45297: PPUSH
45298: LD_VAR 0 6
45302: PUSH
45303: LD_VAR 0 8
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PPUSH
45312: CALL 77400 0 2
45316: ST_TO_ADDR
45317: GO 45404
// begin for j := 1 to Count ( result ) do
45319: LD_ADDR_VAR 0 7
45323: PUSH
45324: DOUBLE
45325: LD_INT 1
45327: DEC
45328: ST_TO_ADDR
45329: LD_VAR 0 5
45333: PPUSH
45334: CALL 41800 0 1
45338: PUSH
45339: FOR_TO
45340: IFFALSE 45402
// begin if tmp < result [ j ] [ 2 ] then
45342: LD_VAR 0 8
45346: PUSH
45347: LD_VAR 0 5
45351: PUSH
45352: LD_VAR 0 7
45356: ARRAY
45357: PUSH
45358: LD_INT 2
45360: ARRAY
45361: LESS
45362: IFFALSE 45400
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45364: LD_ADDR_VAR 0 5
45368: PUSH
45369: LD_VAR 0 5
45373: PPUSH
45374: LD_VAR 0 7
45378: PPUSH
45379: LD_VAR 0 6
45383: PUSH
45384: LD_VAR 0 8
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PPUSH
45393: CALL_OW 2
45397: ST_TO_ADDR
// break ;
45398: GO 45402
// end ; end ;
45400: GO 45339
45402: POP
45403: POP
// end ; end ;
45404: GO 45187
45406: POP
45407: POP
// if result and not asc then
45408: LD_VAR 0 5
45412: PUSH
45413: LD_VAR 0 3
45417: NOT
45418: AND
45419: IFFALSE 45436
// result := ReverseArray ( result ) ;
45421: LD_ADDR_VAR 0 5
45425: PUSH
45426: LD_VAR 0 5
45430: PPUSH
45431: CALL 72676 0 1
45435: ST_TO_ADDR
// tmp := [ ] ;
45436: LD_ADDR_VAR 0 8
45440: PUSH
45441: EMPTY
45442: ST_TO_ADDR
// if mode then
45443: LD_VAR 0 4
45447: IFFALSE 45511
// begin for i := 1 to result do
45449: LD_ADDR_VAR 0 6
45453: PUSH
45454: DOUBLE
45455: LD_INT 1
45457: DEC
45458: ST_TO_ADDR
45459: LD_VAR 0 5
45463: PUSH
45464: FOR_TO
45465: IFFALSE 45499
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
45467: LD_ADDR_VAR 0 8
45471: PUSH
45472: LD_VAR 0 8
45476: PPUSH
45477: LD_VAR 0 5
45481: PUSH
45482: LD_VAR 0 6
45486: ARRAY
45487: PUSH
45488: LD_INT 1
45490: ARRAY
45491: PPUSH
45492: CALL 77400 0 2
45496: ST_TO_ADDR
45497: GO 45464
45499: POP
45500: POP
// result := tmp ;
45501: LD_ADDR_VAR 0 5
45505: PUSH
45506: LD_VAR 0 8
45510: ST_TO_ADDR
// end ; end ;
45511: LD_VAR 0 5
45515: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45516: LD_INT 0
45518: PPUSH
45519: PPUSH
45520: PPUSH
45521: PPUSH
// if not list then
45522: LD_VAR 0 3
45526: NOT
45527: IFFALSE 45531
// exit ;
45529: GO 45919
// result := [ ] ;
45531: LD_ADDR_VAR 0 6
45535: PUSH
45536: EMPTY
45537: ST_TO_ADDR
// for i in list do
45538: LD_ADDR_VAR 0 7
45542: PUSH
45543: LD_VAR 0 3
45547: PUSH
45548: FOR_IN
45549: IFFALSE 45751
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45551: LD_ADDR_VAR 0 9
45555: PUSH
45556: LD_VAR 0 7
45560: PPUSH
45561: LD_VAR 0 1
45565: PPUSH
45566: LD_VAR 0 2
45570: PPUSH
45571: CALL_OW 297
45575: ST_TO_ADDR
// if not result then
45576: LD_VAR 0 6
45580: NOT
45581: IFFALSE 45607
// result := [ [ i , tmp ] ] else
45583: LD_ADDR_VAR 0 6
45587: PUSH
45588: LD_VAR 0 7
45592: PUSH
45593: LD_VAR 0 9
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: EMPTY
45603: LIST
45604: ST_TO_ADDR
45605: GO 45749
// begin if result [ result ] [ 2 ] < tmp then
45607: LD_VAR 0 6
45611: PUSH
45612: LD_VAR 0 6
45616: ARRAY
45617: PUSH
45618: LD_INT 2
45620: ARRAY
45621: PUSH
45622: LD_VAR 0 9
45626: LESS
45627: IFFALSE 45669
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45629: LD_ADDR_VAR 0 6
45633: PUSH
45634: LD_VAR 0 6
45638: PPUSH
45639: LD_VAR 0 6
45643: PUSH
45644: LD_INT 1
45646: PLUS
45647: PPUSH
45648: LD_VAR 0 7
45652: PUSH
45653: LD_VAR 0 9
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PPUSH
45662: CALL_OW 2
45666: ST_TO_ADDR
45667: GO 45749
// for j = 1 to result do
45669: LD_ADDR_VAR 0 8
45673: PUSH
45674: DOUBLE
45675: LD_INT 1
45677: DEC
45678: ST_TO_ADDR
45679: LD_VAR 0 6
45683: PUSH
45684: FOR_TO
45685: IFFALSE 45747
// begin if tmp < result [ j ] [ 2 ] then
45687: LD_VAR 0 9
45691: PUSH
45692: LD_VAR 0 6
45696: PUSH
45697: LD_VAR 0 8
45701: ARRAY
45702: PUSH
45703: LD_INT 2
45705: ARRAY
45706: LESS
45707: IFFALSE 45745
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45709: LD_ADDR_VAR 0 6
45713: PUSH
45714: LD_VAR 0 6
45718: PPUSH
45719: LD_VAR 0 8
45723: PPUSH
45724: LD_VAR 0 7
45728: PUSH
45729: LD_VAR 0 9
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PPUSH
45738: CALL_OW 2
45742: ST_TO_ADDR
// break ;
45743: GO 45747
// end ; end ;
45745: GO 45684
45747: POP
45748: POP
// end ; end ;
45749: GO 45548
45751: POP
45752: POP
// if result and not asc then
45753: LD_VAR 0 6
45757: PUSH
45758: LD_VAR 0 4
45762: NOT
45763: AND
45764: IFFALSE 45839
// begin tmp := result ;
45766: LD_ADDR_VAR 0 9
45770: PUSH
45771: LD_VAR 0 6
45775: ST_TO_ADDR
// for i = tmp downto 1 do
45776: LD_ADDR_VAR 0 7
45780: PUSH
45781: DOUBLE
45782: LD_VAR 0 9
45786: INC
45787: ST_TO_ADDR
45788: LD_INT 1
45790: PUSH
45791: FOR_DOWNTO
45792: IFFALSE 45837
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45794: LD_ADDR_VAR 0 6
45798: PUSH
45799: LD_VAR 0 6
45803: PPUSH
45804: LD_VAR 0 9
45808: PUSH
45809: LD_VAR 0 7
45813: MINUS
45814: PUSH
45815: LD_INT 1
45817: PLUS
45818: PPUSH
45819: LD_VAR 0 9
45823: PUSH
45824: LD_VAR 0 7
45828: ARRAY
45829: PPUSH
45830: CALL_OW 1
45834: ST_TO_ADDR
45835: GO 45791
45837: POP
45838: POP
// end ; tmp := [ ] ;
45839: LD_ADDR_VAR 0 9
45843: PUSH
45844: EMPTY
45845: ST_TO_ADDR
// if mode then
45846: LD_VAR 0 5
45850: IFFALSE 45919
// begin for i = 1 to result do
45852: LD_ADDR_VAR 0 7
45856: PUSH
45857: DOUBLE
45858: LD_INT 1
45860: DEC
45861: ST_TO_ADDR
45862: LD_VAR 0 6
45866: PUSH
45867: FOR_TO
45868: IFFALSE 45907
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45870: LD_ADDR_VAR 0 9
45874: PUSH
45875: LD_VAR 0 9
45879: PPUSH
45880: LD_VAR 0 7
45884: PPUSH
45885: LD_VAR 0 6
45889: PUSH
45890: LD_VAR 0 7
45894: ARRAY
45895: PUSH
45896: LD_INT 1
45898: ARRAY
45899: PPUSH
45900: CALL_OW 1
45904: ST_TO_ADDR
45905: GO 45867
45907: POP
45908: POP
// result := tmp ;
45909: LD_ADDR_VAR 0 6
45913: PUSH
45914: LD_VAR 0 9
45918: ST_TO_ADDR
// end ; end ;
45919: LD_VAR 0 6
45923: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45924: LD_INT 0
45926: PPUSH
45927: PPUSH
45928: PPUSH
45929: PPUSH
45930: PPUSH
45931: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45932: LD_ADDR_VAR 0 5
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: EMPTY
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: ST_TO_ADDR
// if not x or not y then
45954: LD_VAR 0 2
45958: NOT
45959: PUSH
45960: LD_VAR 0 3
45964: NOT
45965: OR
45966: IFFALSE 45970
// exit ;
45968: GO 47620
// if not range then
45970: LD_VAR 0 4
45974: NOT
45975: IFFALSE 45985
// range := 10 ;
45977: LD_ADDR_VAR 0 4
45981: PUSH
45982: LD_INT 10
45984: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45985: LD_ADDR_VAR 0 8
45989: PUSH
45990: LD_INT 81
45992: PUSH
45993: LD_VAR 0 1
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 92
46004: PUSH
46005: LD_VAR 0 2
46009: PUSH
46010: LD_VAR 0 3
46014: PUSH
46015: LD_VAR 0 4
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 3
46028: PUSH
46029: LD_INT 21
46031: PUSH
46032: LD_INT 3
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: LIST
46047: PPUSH
46048: CALL_OW 69
46052: ST_TO_ADDR
// if not tmp then
46053: LD_VAR 0 8
46057: NOT
46058: IFFALSE 46062
// exit ;
46060: GO 47620
// for i in tmp do
46062: LD_ADDR_VAR 0 6
46066: PUSH
46067: LD_VAR 0 8
46071: PUSH
46072: FOR_IN
46073: IFFALSE 47595
// begin points := [ 0 , 0 , 0 ] ;
46075: LD_ADDR_VAR 0 9
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: LIST
46093: ST_TO_ADDR
// bpoints := 1 ;
46094: LD_ADDR_VAR 0 10
46098: PUSH
46099: LD_INT 1
46101: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46102: LD_VAR 0 6
46106: PPUSH
46107: CALL_OW 247
46111: PUSH
46112: LD_INT 1
46114: DOUBLE
46115: EQUAL
46116: IFTRUE 46120
46118: GO 46698
46120: POP
// begin if GetClass ( i ) = 1 then
46121: LD_VAR 0 6
46125: PPUSH
46126: CALL_OW 257
46130: PUSH
46131: LD_INT 1
46133: EQUAL
46134: IFFALSE 46155
// points := [ 10 , 5 , 3 ] ;
46136: LD_ADDR_VAR 0 9
46140: PUSH
46141: LD_INT 10
46143: PUSH
46144: LD_INT 5
46146: PUSH
46147: LD_INT 3
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: LIST
46154: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46155: LD_VAR 0 6
46159: PPUSH
46160: CALL_OW 257
46164: PUSH
46165: LD_INT 2
46167: PUSH
46168: LD_INT 3
46170: PUSH
46171: LD_INT 4
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: LIST
46178: IN
46179: IFFALSE 46200
// points := [ 3 , 2 , 1 ] ;
46181: LD_ADDR_VAR 0 9
46185: PUSH
46186: LD_INT 3
46188: PUSH
46189: LD_INT 2
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: LIST
46199: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46200: LD_VAR 0 6
46204: PPUSH
46205: CALL_OW 257
46209: PUSH
46210: LD_INT 5
46212: EQUAL
46213: IFFALSE 46234
// points := [ 130 , 5 , 2 ] ;
46215: LD_ADDR_VAR 0 9
46219: PUSH
46220: LD_INT 130
46222: PUSH
46223: LD_INT 5
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: LIST
46233: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46234: LD_VAR 0 6
46238: PPUSH
46239: CALL_OW 257
46243: PUSH
46244: LD_INT 8
46246: EQUAL
46247: IFFALSE 46268
// points := [ 35 , 35 , 30 ] ;
46249: LD_ADDR_VAR 0 9
46253: PUSH
46254: LD_INT 35
46256: PUSH
46257: LD_INT 35
46259: PUSH
46260: LD_INT 30
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: LIST
46267: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46268: LD_VAR 0 6
46272: PPUSH
46273: CALL_OW 257
46277: PUSH
46278: LD_INT 9
46280: EQUAL
46281: IFFALSE 46302
// points := [ 20 , 55 , 40 ] ;
46283: LD_ADDR_VAR 0 9
46287: PUSH
46288: LD_INT 20
46290: PUSH
46291: LD_INT 55
46293: PUSH
46294: LD_INT 40
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: LIST
46301: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46302: LD_VAR 0 6
46306: PPUSH
46307: CALL_OW 257
46311: PUSH
46312: LD_INT 12
46314: PUSH
46315: LD_INT 16
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: IN
46322: IFFALSE 46343
// points := [ 5 , 3 , 2 ] ;
46324: LD_ADDR_VAR 0 9
46328: PUSH
46329: LD_INT 5
46331: PUSH
46332: LD_INT 3
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: LIST
46342: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46343: LD_VAR 0 6
46347: PPUSH
46348: CALL_OW 257
46352: PUSH
46353: LD_INT 17
46355: EQUAL
46356: IFFALSE 46377
// points := [ 100 , 50 , 75 ] ;
46358: LD_ADDR_VAR 0 9
46362: PUSH
46363: LD_INT 100
46365: PUSH
46366: LD_INT 50
46368: PUSH
46369: LD_INT 75
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: LIST
46376: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46377: LD_VAR 0 6
46381: PPUSH
46382: CALL_OW 257
46386: PUSH
46387: LD_INT 15
46389: EQUAL
46390: IFFALSE 46411
// points := [ 10 , 5 , 3 ] ;
46392: LD_ADDR_VAR 0 9
46396: PUSH
46397: LD_INT 10
46399: PUSH
46400: LD_INT 5
46402: PUSH
46403: LD_INT 3
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: LIST
46410: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46411: LD_VAR 0 6
46415: PPUSH
46416: CALL_OW 257
46420: PUSH
46421: LD_INT 14
46423: EQUAL
46424: IFFALSE 46445
// points := [ 10 , 0 , 0 ] ;
46426: LD_ADDR_VAR 0 9
46430: PUSH
46431: LD_INT 10
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: LIST
46444: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46445: LD_VAR 0 6
46449: PPUSH
46450: CALL_OW 257
46454: PUSH
46455: LD_INT 11
46457: EQUAL
46458: IFFALSE 46479
// points := [ 30 , 10 , 5 ] ;
46460: LD_ADDR_VAR 0 9
46464: PUSH
46465: LD_INT 30
46467: PUSH
46468: LD_INT 10
46470: PUSH
46471: LD_INT 5
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: LIST
46478: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46479: LD_VAR 0 1
46483: PPUSH
46484: LD_INT 5
46486: PPUSH
46487: CALL_OW 321
46491: PUSH
46492: LD_INT 2
46494: EQUAL
46495: IFFALSE 46512
// bpoints := bpoints * 1.8 ;
46497: LD_ADDR_VAR 0 10
46501: PUSH
46502: LD_VAR 0 10
46506: PUSH
46507: LD_REAL  1.80000000000000E+0000
46510: MUL
46511: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46512: LD_VAR 0 6
46516: PPUSH
46517: CALL_OW 257
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: LD_INT 3
46530: PUSH
46531: LD_INT 4
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: IN
46540: PUSH
46541: LD_VAR 0 1
46545: PPUSH
46546: LD_INT 51
46548: PPUSH
46549: CALL_OW 321
46553: PUSH
46554: LD_INT 2
46556: EQUAL
46557: AND
46558: IFFALSE 46575
// bpoints := bpoints * 1.2 ;
46560: LD_ADDR_VAR 0 10
46564: PUSH
46565: LD_VAR 0 10
46569: PUSH
46570: LD_REAL  1.20000000000000E+0000
46573: MUL
46574: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46575: LD_VAR 0 6
46579: PPUSH
46580: CALL_OW 257
46584: PUSH
46585: LD_INT 5
46587: PUSH
46588: LD_INT 7
46590: PUSH
46591: LD_INT 9
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: LIST
46598: IN
46599: PUSH
46600: LD_VAR 0 1
46604: PPUSH
46605: LD_INT 52
46607: PPUSH
46608: CALL_OW 321
46612: PUSH
46613: LD_INT 2
46615: EQUAL
46616: AND
46617: IFFALSE 46634
// bpoints := bpoints * 1.5 ;
46619: LD_ADDR_VAR 0 10
46623: PUSH
46624: LD_VAR 0 10
46628: PUSH
46629: LD_REAL  1.50000000000000E+0000
46632: MUL
46633: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46634: LD_VAR 0 1
46638: PPUSH
46639: LD_INT 66
46641: PPUSH
46642: CALL_OW 321
46646: PUSH
46647: LD_INT 2
46649: EQUAL
46650: IFFALSE 46667
// bpoints := bpoints * 1.1 ;
46652: LD_ADDR_VAR 0 10
46656: PUSH
46657: LD_VAR 0 10
46661: PUSH
46662: LD_REAL  1.10000000000000E+0000
46665: MUL
46666: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46667: LD_ADDR_VAR 0 10
46671: PUSH
46672: LD_VAR 0 10
46676: PUSH
46677: LD_VAR 0 6
46681: PPUSH
46682: LD_INT 1
46684: PPUSH
46685: CALL_OW 259
46689: PUSH
46690: LD_REAL  1.15000000000000E+0000
46693: MUL
46694: MUL
46695: ST_TO_ADDR
// end ; unit_vehicle :
46696: GO 47524
46698: LD_INT 2
46700: DOUBLE
46701: EQUAL
46702: IFTRUE 46706
46704: GO 47512
46706: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46707: LD_VAR 0 6
46711: PPUSH
46712: CALL_OW 264
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: LD_INT 42
46722: PUSH
46723: LD_INT 24
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: LIST
46730: IN
46731: IFFALSE 46752
// points := [ 25 , 5 , 3 ] ;
46733: LD_ADDR_VAR 0 9
46737: PUSH
46738: LD_INT 25
46740: PUSH
46741: LD_INT 5
46743: PUSH
46744: LD_INT 3
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: LIST
46751: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46752: LD_VAR 0 6
46756: PPUSH
46757: CALL_OW 264
46761: PUSH
46762: LD_INT 4
46764: PUSH
46765: LD_INT 43
46767: PUSH
46768: LD_INT 25
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: LIST
46775: IN
46776: IFFALSE 46797
// points := [ 40 , 15 , 5 ] ;
46778: LD_ADDR_VAR 0 9
46782: PUSH
46783: LD_INT 40
46785: PUSH
46786: LD_INT 15
46788: PUSH
46789: LD_INT 5
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: LIST
46796: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46797: LD_VAR 0 6
46801: PPUSH
46802: CALL_OW 264
46806: PUSH
46807: LD_INT 3
46809: PUSH
46810: LD_INT 23
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: IN
46817: IFFALSE 46838
// points := [ 7 , 25 , 8 ] ;
46819: LD_ADDR_VAR 0 9
46823: PUSH
46824: LD_INT 7
46826: PUSH
46827: LD_INT 25
46829: PUSH
46830: LD_INT 8
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: LIST
46837: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46838: LD_VAR 0 6
46842: PPUSH
46843: CALL_OW 264
46847: PUSH
46848: LD_INT 5
46850: PUSH
46851: LD_INT 27
46853: PUSH
46854: LD_INT 44
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: LIST
46861: IN
46862: IFFALSE 46883
// points := [ 14 , 50 , 16 ] ;
46864: LD_ADDR_VAR 0 9
46868: PUSH
46869: LD_INT 14
46871: PUSH
46872: LD_INT 50
46874: PUSH
46875: LD_INT 16
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: LIST
46882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46883: LD_VAR 0 6
46887: PPUSH
46888: CALL_OW 264
46892: PUSH
46893: LD_INT 6
46895: PUSH
46896: LD_INT 46
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: IN
46903: IFFALSE 46924
// points := [ 32 , 120 , 70 ] ;
46905: LD_ADDR_VAR 0 9
46909: PUSH
46910: LD_INT 32
46912: PUSH
46913: LD_INT 120
46915: PUSH
46916: LD_INT 70
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: LIST
46923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46924: LD_VAR 0 6
46928: PPUSH
46929: CALL_OW 264
46933: PUSH
46934: LD_INT 7
46936: PUSH
46937: LD_INT 28
46939: PUSH
46940: LD_INT 45
46942: PUSH
46943: LD_INT 92
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: IN
46952: IFFALSE 46973
// points := [ 35 , 20 , 45 ] ;
46954: LD_ADDR_VAR 0 9
46958: PUSH
46959: LD_INT 35
46961: PUSH
46962: LD_INT 20
46964: PUSH
46965: LD_INT 45
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: LIST
46972: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46973: LD_VAR 0 6
46977: PPUSH
46978: CALL_OW 264
46982: PUSH
46983: LD_INT 47
46985: PUSH
46986: EMPTY
46987: LIST
46988: IN
46989: IFFALSE 47010
// points := [ 67 , 45 , 75 ] ;
46991: LD_ADDR_VAR 0 9
46995: PUSH
46996: LD_INT 67
46998: PUSH
46999: LD_INT 45
47001: PUSH
47002: LD_INT 75
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: LIST
47009: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47010: LD_VAR 0 6
47014: PPUSH
47015: CALL_OW 264
47019: PUSH
47020: LD_INT 26
47022: PUSH
47023: EMPTY
47024: LIST
47025: IN
47026: IFFALSE 47047
// points := [ 120 , 30 , 80 ] ;
47028: LD_ADDR_VAR 0 9
47032: PUSH
47033: LD_INT 120
47035: PUSH
47036: LD_INT 30
47038: PUSH
47039: LD_INT 80
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: LIST
47046: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47047: LD_VAR 0 6
47051: PPUSH
47052: CALL_OW 264
47056: PUSH
47057: LD_INT 22
47059: PUSH
47060: EMPTY
47061: LIST
47062: IN
47063: IFFALSE 47084
// points := [ 40 , 1 , 1 ] ;
47065: LD_ADDR_VAR 0 9
47069: PUSH
47070: LD_INT 40
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: LIST
47083: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47084: LD_VAR 0 6
47088: PPUSH
47089: CALL_OW 264
47093: PUSH
47094: LD_INT 29
47096: PUSH
47097: EMPTY
47098: LIST
47099: IN
47100: IFFALSE 47121
// points := [ 70 , 200 , 400 ] ;
47102: LD_ADDR_VAR 0 9
47106: PUSH
47107: LD_INT 70
47109: PUSH
47110: LD_INT 200
47112: PUSH
47113: LD_INT 400
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: LIST
47120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47121: LD_VAR 0 6
47125: PPUSH
47126: CALL_OW 264
47130: PUSH
47131: LD_INT 14
47133: PUSH
47134: LD_INT 53
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: IN
47141: IFFALSE 47162
// points := [ 40 , 10 , 20 ] ;
47143: LD_ADDR_VAR 0 9
47147: PUSH
47148: LD_INT 40
47150: PUSH
47151: LD_INT 10
47153: PUSH
47154: LD_INT 20
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: LIST
47161: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47162: LD_VAR 0 6
47166: PPUSH
47167: CALL_OW 264
47171: PUSH
47172: LD_INT 9
47174: PUSH
47175: EMPTY
47176: LIST
47177: IN
47178: IFFALSE 47199
// points := [ 5 , 70 , 20 ] ;
47180: LD_ADDR_VAR 0 9
47184: PUSH
47185: LD_INT 5
47187: PUSH
47188: LD_INT 70
47190: PUSH
47191: LD_INT 20
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: LIST
47198: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47199: LD_VAR 0 6
47203: PPUSH
47204: CALL_OW 264
47208: PUSH
47209: LD_INT 10
47211: PUSH
47212: EMPTY
47213: LIST
47214: IN
47215: IFFALSE 47236
// points := [ 35 , 110 , 70 ] ;
47217: LD_ADDR_VAR 0 9
47221: PUSH
47222: LD_INT 35
47224: PUSH
47225: LD_INT 110
47227: PUSH
47228: LD_INT 70
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: LIST
47235: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47236: LD_VAR 0 6
47240: PPUSH
47241: CALL_OW 265
47245: PUSH
47246: LD_INT 25
47248: EQUAL
47249: IFFALSE 47270
// points := [ 80 , 65 , 100 ] ;
47251: LD_ADDR_VAR 0 9
47255: PUSH
47256: LD_INT 80
47258: PUSH
47259: LD_INT 65
47261: PUSH
47262: LD_INT 100
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: LIST
47269: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47270: LD_VAR 0 6
47274: PPUSH
47275: CALL_OW 263
47279: PUSH
47280: LD_INT 1
47282: EQUAL
47283: IFFALSE 47318
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47285: LD_ADDR_VAR 0 10
47289: PUSH
47290: LD_VAR 0 10
47294: PUSH
47295: LD_VAR 0 6
47299: PPUSH
47300: CALL_OW 311
47304: PPUSH
47305: LD_INT 3
47307: PPUSH
47308: CALL_OW 259
47312: PUSH
47313: LD_INT 4
47315: MUL
47316: MUL
47317: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47318: LD_VAR 0 6
47322: PPUSH
47323: CALL_OW 263
47327: PUSH
47328: LD_INT 2
47330: EQUAL
47331: IFFALSE 47382
// begin j := IsControledBy ( i ) ;
47333: LD_ADDR_VAR 0 7
47337: PUSH
47338: LD_VAR 0 6
47342: PPUSH
47343: CALL_OW 312
47347: ST_TO_ADDR
// if j then
47348: LD_VAR 0 7
47352: IFFALSE 47382
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47354: LD_ADDR_VAR 0 10
47358: PUSH
47359: LD_VAR 0 10
47363: PUSH
47364: LD_VAR 0 7
47368: PPUSH
47369: LD_INT 3
47371: PPUSH
47372: CALL_OW 259
47376: PUSH
47377: LD_INT 3
47379: MUL
47380: MUL
47381: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47382: LD_VAR 0 6
47386: PPUSH
47387: CALL_OW 264
47391: PUSH
47392: LD_INT 5
47394: PUSH
47395: LD_INT 6
47397: PUSH
47398: LD_INT 46
47400: PUSH
47401: LD_INT 44
47403: PUSH
47404: LD_INT 47
47406: PUSH
47407: LD_INT 45
47409: PUSH
47410: LD_INT 28
47412: PUSH
47413: LD_INT 7
47415: PUSH
47416: LD_INT 27
47418: PUSH
47419: LD_INT 29
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: IN
47434: PUSH
47435: LD_VAR 0 1
47439: PPUSH
47440: LD_INT 52
47442: PPUSH
47443: CALL_OW 321
47447: PUSH
47448: LD_INT 2
47450: EQUAL
47451: AND
47452: IFFALSE 47469
// bpoints := bpoints * 1.2 ;
47454: LD_ADDR_VAR 0 10
47458: PUSH
47459: LD_VAR 0 10
47463: PUSH
47464: LD_REAL  1.20000000000000E+0000
47467: MUL
47468: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47469: LD_VAR 0 6
47473: PPUSH
47474: CALL_OW 264
47478: PUSH
47479: LD_INT 6
47481: PUSH
47482: LD_INT 46
47484: PUSH
47485: LD_INT 47
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: LIST
47492: IN
47493: IFFALSE 47510
// bpoints := bpoints * 1.2 ;
47495: LD_ADDR_VAR 0 10
47499: PUSH
47500: LD_VAR 0 10
47504: PUSH
47505: LD_REAL  1.20000000000000E+0000
47508: MUL
47509: ST_TO_ADDR
// end ; unit_building :
47510: GO 47524
47512: LD_INT 3
47514: DOUBLE
47515: EQUAL
47516: IFTRUE 47520
47518: GO 47523
47520: POP
// ; end ;
47521: GO 47524
47523: POP
// for j = 1 to 3 do
47524: LD_ADDR_VAR 0 7
47528: PUSH
47529: DOUBLE
47530: LD_INT 1
47532: DEC
47533: ST_TO_ADDR
47534: LD_INT 3
47536: PUSH
47537: FOR_TO
47538: IFFALSE 47591
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47540: LD_ADDR_VAR 0 5
47544: PUSH
47545: LD_VAR 0 5
47549: PPUSH
47550: LD_VAR 0 7
47554: PPUSH
47555: LD_VAR 0 5
47559: PUSH
47560: LD_VAR 0 7
47564: ARRAY
47565: PUSH
47566: LD_VAR 0 9
47570: PUSH
47571: LD_VAR 0 7
47575: ARRAY
47576: PUSH
47577: LD_VAR 0 10
47581: MUL
47582: PLUS
47583: PPUSH
47584: CALL_OW 1
47588: ST_TO_ADDR
47589: GO 47537
47591: POP
47592: POP
// end ;
47593: GO 46072
47595: POP
47596: POP
// result := Replace ( result , 4 , tmp ) ;
47597: LD_ADDR_VAR 0 5
47601: PUSH
47602: LD_VAR 0 5
47606: PPUSH
47607: LD_INT 4
47609: PPUSH
47610: LD_VAR 0 8
47614: PPUSH
47615: CALL_OW 1
47619: ST_TO_ADDR
// end ;
47620: LD_VAR 0 5
47624: RET
// export function DangerAtRange ( unit , range ) ; begin
47625: LD_INT 0
47627: PPUSH
// if not unit then
47628: LD_VAR 0 1
47632: NOT
47633: IFFALSE 47637
// exit ;
47635: GO 47682
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47637: LD_ADDR_VAR 0 3
47641: PUSH
47642: LD_VAR 0 1
47646: PPUSH
47647: CALL_OW 255
47651: PPUSH
47652: LD_VAR 0 1
47656: PPUSH
47657: CALL_OW 250
47661: PPUSH
47662: LD_VAR 0 1
47666: PPUSH
47667: CALL_OW 251
47671: PPUSH
47672: LD_VAR 0 2
47676: PPUSH
47677: CALL 45924 0 4
47681: ST_TO_ADDR
// end ;
47682: LD_VAR 0 3
47686: RET
// export function DangerInArea ( side , area ) ; begin
47687: LD_INT 0
47689: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47690: LD_ADDR_VAR 0 3
47694: PUSH
47695: LD_VAR 0 2
47699: PPUSH
47700: LD_INT 81
47702: PUSH
47703: LD_VAR 0 1
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PPUSH
47712: CALL_OW 70
47716: ST_TO_ADDR
// end ;
47717: LD_VAR 0 3
47721: RET
// export function IsExtension ( b ) ; begin
47722: LD_INT 0
47724: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47725: LD_ADDR_VAR 0 2
47729: PUSH
47730: LD_VAR 0 1
47734: PUSH
47735: LD_INT 23
47737: PUSH
47738: LD_INT 20
47740: PUSH
47741: LD_INT 22
47743: PUSH
47744: LD_INT 17
47746: PUSH
47747: LD_INT 24
47749: PUSH
47750: LD_INT 21
47752: PUSH
47753: LD_INT 19
47755: PUSH
47756: LD_INT 16
47758: PUSH
47759: LD_INT 25
47761: PUSH
47762: LD_INT 18
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: IN
47777: ST_TO_ADDR
// end ;
47778: LD_VAR 0 2
47782: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47783: LD_INT 0
47785: PPUSH
47786: PPUSH
47787: PPUSH
// result := [ ] ;
47788: LD_ADDR_VAR 0 4
47792: PUSH
47793: EMPTY
47794: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47795: LD_ADDR_VAR 0 5
47799: PUSH
47800: LD_VAR 0 2
47804: PPUSH
47805: LD_INT 21
47807: PUSH
47808: LD_INT 3
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PPUSH
47815: CALL_OW 70
47819: ST_TO_ADDR
// if not tmp then
47820: LD_VAR 0 5
47824: NOT
47825: IFFALSE 47829
// exit ;
47827: GO 47893
// if checkLink then
47829: LD_VAR 0 3
47833: IFFALSE 47883
// begin for i in tmp do
47835: LD_ADDR_VAR 0 6
47839: PUSH
47840: LD_VAR 0 5
47844: PUSH
47845: FOR_IN
47846: IFFALSE 47881
// if GetBase ( i ) <> base then
47848: LD_VAR 0 6
47852: PPUSH
47853: CALL_OW 274
47857: PUSH
47858: LD_VAR 0 1
47862: NONEQUAL
47863: IFFALSE 47879
// ComLinkToBase ( base , i ) ;
47865: LD_VAR 0 1
47869: PPUSH
47870: LD_VAR 0 6
47874: PPUSH
47875: CALL_OW 169
47879: GO 47845
47881: POP
47882: POP
// end ; result := tmp ;
47883: LD_ADDR_VAR 0 4
47887: PUSH
47888: LD_VAR 0 5
47892: ST_TO_ADDR
// end ;
47893: LD_VAR 0 4
47897: RET
// export function ComComplete ( units , b ) ; var i ; begin
47898: LD_INT 0
47900: PPUSH
47901: PPUSH
// if not units then
47902: LD_VAR 0 1
47906: NOT
47907: IFFALSE 47911
// exit ;
47909: GO 48001
// for i in units do
47911: LD_ADDR_VAR 0 4
47915: PUSH
47916: LD_VAR 0 1
47920: PUSH
47921: FOR_IN
47922: IFFALSE 47999
// if BuildingStatus ( b ) = bs_build then
47924: LD_VAR 0 2
47928: PPUSH
47929: CALL_OW 461
47933: PUSH
47934: LD_INT 1
47936: EQUAL
47937: IFFALSE 47997
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47939: LD_VAR 0 4
47943: PPUSH
47944: LD_STRING h
47946: PUSH
47947: LD_VAR 0 2
47951: PPUSH
47952: CALL_OW 250
47956: PUSH
47957: LD_VAR 0 2
47961: PPUSH
47962: CALL_OW 251
47966: PUSH
47967: LD_VAR 0 2
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: PUSH
47990: EMPTY
47991: LIST
47992: PPUSH
47993: CALL_OW 446
47997: GO 47921
47999: POP
48000: POP
// end ;
48001: LD_VAR 0 3
48005: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48006: LD_INT 0
48008: PPUSH
48009: PPUSH
48010: PPUSH
48011: PPUSH
48012: PPUSH
48013: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48014: LD_VAR 0 1
48018: NOT
48019: PUSH
48020: LD_VAR 0 1
48024: PPUSH
48025: CALL_OW 263
48029: PUSH
48030: LD_INT 2
48032: NONEQUAL
48033: OR
48034: IFFALSE 48038
// exit ;
48036: GO 48354
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48038: LD_ADDR_VAR 0 6
48042: PUSH
48043: LD_INT 22
48045: PUSH
48046: LD_VAR 0 1
48050: PPUSH
48051: CALL_OW 255
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 2
48062: PUSH
48063: LD_INT 30
48065: PUSH
48066: LD_INT 36
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 34
48075: PUSH
48076: LD_INT 31
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: LIST
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PPUSH
48092: CALL_OW 69
48096: ST_TO_ADDR
// if not tmp then
48097: LD_VAR 0 6
48101: NOT
48102: IFFALSE 48106
// exit ;
48104: GO 48354
// result := [ ] ;
48106: LD_ADDR_VAR 0 2
48110: PUSH
48111: EMPTY
48112: ST_TO_ADDR
// for i in tmp do
48113: LD_ADDR_VAR 0 3
48117: PUSH
48118: LD_VAR 0 6
48122: PUSH
48123: FOR_IN
48124: IFFALSE 48195
// begin t := UnitsInside ( i ) ;
48126: LD_ADDR_VAR 0 4
48130: PUSH
48131: LD_VAR 0 3
48135: PPUSH
48136: CALL_OW 313
48140: ST_TO_ADDR
// if t then
48141: LD_VAR 0 4
48145: IFFALSE 48193
// for j in t do
48147: LD_ADDR_VAR 0 7
48151: PUSH
48152: LD_VAR 0 4
48156: PUSH
48157: FOR_IN
48158: IFFALSE 48191
// result := Replace ( result , result + 1 , j ) ;
48160: LD_ADDR_VAR 0 2
48164: PUSH
48165: LD_VAR 0 2
48169: PPUSH
48170: LD_VAR 0 2
48174: PUSH
48175: LD_INT 1
48177: PLUS
48178: PPUSH
48179: LD_VAR 0 7
48183: PPUSH
48184: CALL_OW 1
48188: ST_TO_ADDR
48189: GO 48157
48191: POP
48192: POP
// end ;
48193: GO 48123
48195: POP
48196: POP
// if not result then
48197: LD_VAR 0 2
48201: NOT
48202: IFFALSE 48206
// exit ;
48204: GO 48354
// mech := result [ 1 ] ;
48206: LD_ADDR_VAR 0 5
48210: PUSH
48211: LD_VAR 0 2
48215: PUSH
48216: LD_INT 1
48218: ARRAY
48219: ST_TO_ADDR
// if result > 1 then
48220: LD_VAR 0 2
48224: PUSH
48225: LD_INT 1
48227: GREATER
48228: IFFALSE 48340
// begin for i = 2 to result do
48230: LD_ADDR_VAR 0 3
48234: PUSH
48235: DOUBLE
48236: LD_INT 2
48238: DEC
48239: ST_TO_ADDR
48240: LD_VAR 0 2
48244: PUSH
48245: FOR_TO
48246: IFFALSE 48338
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48248: LD_ADDR_VAR 0 4
48252: PUSH
48253: LD_VAR 0 2
48257: PUSH
48258: LD_VAR 0 3
48262: ARRAY
48263: PPUSH
48264: LD_INT 3
48266: PPUSH
48267: CALL_OW 259
48271: PUSH
48272: LD_VAR 0 2
48276: PUSH
48277: LD_VAR 0 3
48281: ARRAY
48282: PPUSH
48283: CALL_OW 432
48287: MINUS
48288: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48289: LD_VAR 0 4
48293: PUSH
48294: LD_VAR 0 5
48298: PPUSH
48299: LD_INT 3
48301: PPUSH
48302: CALL_OW 259
48306: PUSH
48307: LD_VAR 0 5
48311: PPUSH
48312: CALL_OW 432
48316: MINUS
48317: GREATEREQUAL
48318: IFFALSE 48336
// mech := result [ i ] ;
48320: LD_ADDR_VAR 0 5
48324: PUSH
48325: LD_VAR 0 2
48329: PUSH
48330: LD_VAR 0 3
48334: ARRAY
48335: ST_TO_ADDR
// end ;
48336: GO 48245
48338: POP
48339: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48340: LD_VAR 0 1
48344: PPUSH
48345: LD_VAR 0 5
48349: PPUSH
48350: CALL_OW 135
// end ;
48354: LD_VAR 0 2
48358: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48359: LD_INT 0
48361: PPUSH
48362: PPUSH
48363: PPUSH
48364: PPUSH
48365: PPUSH
48366: PPUSH
48367: PPUSH
48368: PPUSH
48369: PPUSH
48370: PPUSH
48371: PPUSH
48372: PPUSH
48373: PPUSH
// result := [ ] ;
48374: LD_ADDR_VAR 0 7
48378: PUSH
48379: EMPTY
48380: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48381: LD_VAR 0 1
48385: PPUSH
48386: CALL_OW 266
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: IN
48401: NOT
48402: IFFALSE 48406
// exit ;
48404: GO 50040
// if name then
48406: LD_VAR 0 3
48410: IFFALSE 48426
// SetBName ( base_dep , name ) ;
48412: LD_VAR 0 1
48416: PPUSH
48417: LD_VAR 0 3
48421: PPUSH
48422: CALL_OW 500
// base := GetBase ( base_dep ) ;
48426: LD_ADDR_VAR 0 15
48430: PUSH
48431: LD_VAR 0 1
48435: PPUSH
48436: CALL_OW 274
48440: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48441: LD_ADDR_VAR 0 16
48445: PUSH
48446: LD_VAR 0 1
48450: PPUSH
48451: CALL_OW 255
48455: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48456: LD_ADDR_VAR 0 17
48460: PUSH
48461: LD_VAR 0 1
48465: PPUSH
48466: CALL_OW 248
48470: ST_TO_ADDR
// if sources then
48471: LD_VAR 0 5
48475: IFFALSE 48522
// for i = 1 to 3 do
48477: LD_ADDR_VAR 0 8
48481: PUSH
48482: DOUBLE
48483: LD_INT 1
48485: DEC
48486: ST_TO_ADDR
48487: LD_INT 3
48489: PUSH
48490: FOR_TO
48491: IFFALSE 48520
// AddResourceType ( base , i , sources [ i ] ) ;
48493: LD_VAR 0 15
48497: PPUSH
48498: LD_VAR 0 8
48502: PPUSH
48503: LD_VAR 0 5
48507: PUSH
48508: LD_VAR 0 8
48512: ARRAY
48513: PPUSH
48514: CALL_OW 276
48518: GO 48490
48520: POP
48521: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48522: LD_ADDR_VAR 0 18
48526: PUSH
48527: LD_VAR 0 15
48531: PPUSH
48532: LD_VAR 0 2
48536: PPUSH
48537: LD_INT 1
48539: PPUSH
48540: CALL 47783 0 3
48544: ST_TO_ADDR
// InitHc ;
48545: CALL_OW 19
// InitUc ;
48549: CALL_OW 18
// uc_side := side ;
48553: LD_ADDR_OWVAR 20
48557: PUSH
48558: LD_VAR 0 16
48562: ST_TO_ADDR
// uc_nation := nation ;
48563: LD_ADDR_OWVAR 21
48567: PUSH
48568: LD_VAR 0 17
48572: ST_TO_ADDR
// if buildings then
48573: LD_VAR 0 18
48577: IFFALSE 49899
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48579: LD_ADDR_VAR 0 19
48583: PUSH
48584: LD_VAR 0 18
48588: PPUSH
48589: LD_INT 2
48591: PUSH
48592: LD_INT 30
48594: PUSH
48595: LD_INT 29
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 30
48604: PUSH
48605: LD_INT 30
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: LIST
48616: PPUSH
48617: CALL_OW 72
48621: ST_TO_ADDR
// if tmp then
48622: LD_VAR 0 19
48626: IFFALSE 48674
// for i in tmp do
48628: LD_ADDR_VAR 0 8
48632: PUSH
48633: LD_VAR 0 19
48637: PUSH
48638: FOR_IN
48639: IFFALSE 48672
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48641: LD_VAR 0 8
48645: PPUSH
48646: CALL_OW 250
48650: PPUSH
48651: LD_VAR 0 8
48655: PPUSH
48656: CALL_OW 251
48660: PPUSH
48661: LD_VAR 0 16
48665: PPUSH
48666: CALL_OW 441
48670: GO 48638
48672: POP
48673: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48674: LD_VAR 0 18
48678: PPUSH
48679: LD_INT 2
48681: PUSH
48682: LD_INT 30
48684: PUSH
48685: LD_INT 32
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 30
48694: PUSH
48695: LD_INT 33
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: LIST
48706: PPUSH
48707: CALL_OW 72
48711: IFFALSE 48799
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48713: LD_ADDR_VAR 0 8
48717: PUSH
48718: LD_VAR 0 18
48722: PPUSH
48723: LD_INT 2
48725: PUSH
48726: LD_INT 30
48728: PUSH
48729: LD_INT 32
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 30
48738: PUSH
48739: LD_INT 33
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: LIST
48750: PPUSH
48751: CALL_OW 72
48755: PUSH
48756: FOR_IN
48757: IFFALSE 48797
// begin if not GetBWeapon ( i ) then
48759: LD_VAR 0 8
48763: PPUSH
48764: CALL_OW 269
48768: NOT
48769: IFFALSE 48795
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48771: LD_VAR 0 8
48775: PPUSH
48776: LD_VAR 0 8
48780: PPUSH
48781: LD_VAR 0 2
48785: PPUSH
48786: CALL 50045 0 2
48790: PPUSH
48791: CALL_OW 431
// end ;
48795: GO 48756
48797: POP
48798: POP
// end ; for i = 1 to personel do
48799: LD_ADDR_VAR 0 8
48803: PUSH
48804: DOUBLE
48805: LD_INT 1
48807: DEC
48808: ST_TO_ADDR
48809: LD_VAR 0 6
48813: PUSH
48814: FOR_TO
48815: IFFALSE 49879
// begin if i > 4 then
48817: LD_VAR 0 8
48821: PUSH
48822: LD_INT 4
48824: GREATER
48825: IFFALSE 48829
// break ;
48827: GO 49879
// case i of 1 :
48829: LD_VAR 0 8
48833: PUSH
48834: LD_INT 1
48836: DOUBLE
48837: EQUAL
48838: IFTRUE 48842
48840: GO 48922
48842: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48843: LD_ADDR_VAR 0 12
48847: PUSH
48848: LD_VAR 0 18
48852: PPUSH
48853: LD_INT 22
48855: PUSH
48856: LD_VAR 0 16
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 58
48867: PUSH
48868: EMPTY
48869: LIST
48870: PUSH
48871: LD_INT 2
48873: PUSH
48874: LD_INT 30
48876: PUSH
48877: LD_INT 32
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 30
48886: PUSH
48887: LD_INT 4
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 30
48896: PUSH
48897: LD_INT 5
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: LIST
48914: PPUSH
48915: CALL_OW 72
48919: ST_TO_ADDR
48920: GO 49144
48922: LD_INT 2
48924: DOUBLE
48925: EQUAL
48926: IFTRUE 48930
48928: GO 48992
48930: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48931: LD_ADDR_VAR 0 12
48935: PUSH
48936: LD_VAR 0 18
48940: PPUSH
48941: LD_INT 22
48943: PUSH
48944: LD_VAR 0 16
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: LD_INT 30
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 30
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PPUSH
48985: CALL_OW 72
48989: ST_TO_ADDR
48990: GO 49144
48992: LD_INT 3
48994: DOUBLE
48995: EQUAL
48996: IFTRUE 49000
48998: GO 49062
49000: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49001: LD_ADDR_VAR 0 12
49005: PUSH
49006: LD_VAR 0 18
49010: PPUSH
49011: LD_INT 22
49013: PUSH
49014: LD_VAR 0 16
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: LD_INT 30
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 30
49038: PUSH
49039: LD_INT 3
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: LIST
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PPUSH
49055: CALL_OW 72
49059: ST_TO_ADDR
49060: GO 49144
49062: LD_INT 4
49064: DOUBLE
49065: EQUAL
49066: IFTRUE 49070
49068: GO 49143
49070: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49071: LD_ADDR_VAR 0 12
49075: PUSH
49076: LD_VAR 0 18
49080: PPUSH
49081: LD_INT 22
49083: PUSH
49084: LD_VAR 0 16
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: LD_INT 30
49098: PUSH
49099: LD_INT 6
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 30
49108: PUSH
49109: LD_INT 7
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 30
49118: PUSH
49119: LD_INT 8
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PPUSH
49136: CALL_OW 72
49140: ST_TO_ADDR
49141: GO 49144
49143: POP
// if i = 1 then
49144: LD_VAR 0 8
49148: PUSH
49149: LD_INT 1
49151: EQUAL
49152: IFFALSE 49263
// begin tmp := [ ] ;
49154: LD_ADDR_VAR 0 19
49158: PUSH
49159: EMPTY
49160: ST_TO_ADDR
// for j in f do
49161: LD_ADDR_VAR 0 9
49165: PUSH
49166: LD_VAR 0 12
49170: PUSH
49171: FOR_IN
49172: IFFALSE 49245
// if GetBType ( j ) = b_bunker then
49174: LD_VAR 0 9
49178: PPUSH
49179: CALL_OW 266
49183: PUSH
49184: LD_INT 32
49186: EQUAL
49187: IFFALSE 49214
// tmp := Insert ( tmp , 1 , j ) else
49189: LD_ADDR_VAR 0 19
49193: PUSH
49194: LD_VAR 0 19
49198: PPUSH
49199: LD_INT 1
49201: PPUSH
49202: LD_VAR 0 9
49206: PPUSH
49207: CALL_OW 2
49211: ST_TO_ADDR
49212: GO 49243
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49214: LD_ADDR_VAR 0 19
49218: PUSH
49219: LD_VAR 0 19
49223: PPUSH
49224: LD_VAR 0 19
49228: PUSH
49229: LD_INT 1
49231: PLUS
49232: PPUSH
49233: LD_VAR 0 9
49237: PPUSH
49238: CALL_OW 2
49242: ST_TO_ADDR
49243: GO 49171
49245: POP
49246: POP
// if tmp then
49247: LD_VAR 0 19
49251: IFFALSE 49263
// f := tmp ;
49253: LD_ADDR_VAR 0 12
49257: PUSH
49258: LD_VAR 0 19
49262: ST_TO_ADDR
// end ; x := personel [ i ] ;
49263: LD_ADDR_VAR 0 13
49267: PUSH
49268: LD_VAR 0 6
49272: PUSH
49273: LD_VAR 0 8
49277: ARRAY
49278: ST_TO_ADDR
// if x = - 1 then
49279: LD_VAR 0 13
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: EQUAL
49288: IFFALSE 49497
// begin for j in f do
49290: LD_ADDR_VAR 0 9
49294: PUSH
49295: LD_VAR 0 12
49299: PUSH
49300: FOR_IN
49301: IFFALSE 49493
// repeat InitHc ;
49303: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49307: LD_VAR 0 9
49311: PPUSH
49312: CALL_OW 266
49316: PUSH
49317: LD_INT 5
49319: EQUAL
49320: IFFALSE 49390
// begin if UnitsInside ( j ) < 3 then
49322: LD_VAR 0 9
49326: PPUSH
49327: CALL_OW 313
49331: PUSH
49332: LD_INT 3
49334: LESS
49335: IFFALSE 49371
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49337: LD_INT 0
49339: PPUSH
49340: LD_INT 5
49342: PUSH
49343: LD_INT 8
49345: PUSH
49346: LD_INT 9
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: LIST
49353: PUSH
49354: LD_VAR 0 17
49358: ARRAY
49359: PPUSH
49360: LD_VAR 0 4
49364: PPUSH
49365: CALL_OW 380
49369: GO 49388
// PrepareHuman ( false , i , skill ) ;
49371: LD_INT 0
49373: PPUSH
49374: LD_VAR 0 8
49378: PPUSH
49379: LD_VAR 0 4
49383: PPUSH
49384: CALL_OW 380
// end else
49388: GO 49407
// PrepareHuman ( false , i , skill ) ;
49390: LD_INT 0
49392: PPUSH
49393: LD_VAR 0 8
49397: PPUSH
49398: LD_VAR 0 4
49402: PPUSH
49403: CALL_OW 380
// un := CreateHuman ;
49407: LD_ADDR_VAR 0 14
49411: PUSH
49412: CALL_OW 44
49416: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49417: LD_ADDR_VAR 0 7
49421: PUSH
49422: LD_VAR 0 7
49426: PPUSH
49427: LD_INT 1
49429: PPUSH
49430: LD_VAR 0 14
49434: PPUSH
49435: CALL_OW 2
49439: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49440: LD_VAR 0 14
49444: PPUSH
49445: LD_VAR 0 9
49449: PPUSH
49450: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49454: LD_VAR 0 9
49458: PPUSH
49459: CALL_OW 313
49463: PUSH
49464: LD_INT 6
49466: EQUAL
49467: PUSH
49468: LD_VAR 0 9
49472: PPUSH
49473: CALL_OW 266
49477: PUSH
49478: LD_INT 32
49480: PUSH
49481: LD_INT 31
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: IN
49488: OR
49489: IFFALSE 49303
49491: GO 49300
49493: POP
49494: POP
// end else
49495: GO 49877
// for j = 1 to x do
49497: LD_ADDR_VAR 0 9
49501: PUSH
49502: DOUBLE
49503: LD_INT 1
49505: DEC
49506: ST_TO_ADDR
49507: LD_VAR 0 13
49511: PUSH
49512: FOR_TO
49513: IFFALSE 49875
// begin InitHc ;
49515: CALL_OW 19
// if not f then
49519: LD_VAR 0 12
49523: NOT
49524: IFFALSE 49613
// begin PrepareHuman ( false , i , skill ) ;
49526: LD_INT 0
49528: PPUSH
49529: LD_VAR 0 8
49533: PPUSH
49534: LD_VAR 0 4
49538: PPUSH
49539: CALL_OW 380
// un := CreateHuman ;
49543: LD_ADDR_VAR 0 14
49547: PUSH
49548: CALL_OW 44
49552: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49553: LD_ADDR_VAR 0 7
49557: PUSH
49558: LD_VAR 0 7
49562: PPUSH
49563: LD_INT 1
49565: PPUSH
49566: LD_VAR 0 14
49570: PPUSH
49571: CALL_OW 2
49575: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49576: LD_VAR 0 14
49580: PPUSH
49581: LD_VAR 0 1
49585: PPUSH
49586: CALL_OW 250
49590: PPUSH
49591: LD_VAR 0 1
49595: PPUSH
49596: CALL_OW 251
49600: PPUSH
49601: LD_INT 10
49603: PPUSH
49604: LD_INT 0
49606: PPUSH
49607: CALL_OW 50
// continue ;
49611: GO 49512
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49613: LD_VAR 0 12
49617: PUSH
49618: LD_INT 1
49620: ARRAY
49621: PPUSH
49622: CALL_OW 313
49626: PUSH
49627: LD_VAR 0 12
49631: PUSH
49632: LD_INT 1
49634: ARRAY
49635: PPUSH
49636: CALL_OW 266
49640: PUSH
49641: LD_INT 32
49643: PUSH
49644: LD_INT 31
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: IN
49651: AND
49652: PUSH
49653: LD_VAR 0 12
49657: PUSH
49658: LD_INT 1
49660: ARRAY
49661: PPUSH
49662: CALL_OW 313
49666: PUSH
49667: LD_INT 6
49669: EQUAL
49670: OR
49671: IFFALSE 49691
// f := Delete ( f , 1 ) ;
49673: LD_ADDR_VAR 0 12
49677: PUSH
49678: LD_VAR 0 12
49682: PPUSH
49683: LD_INT 1
49685: PPUSH
49686: CALL_OW 3
49690: ST_TO_ADDR
// if not f then
49691: LD_VAR 0 12
49695: NOT
49696: IFFALSE 49714
// begin x := x + 2 ;
49698: LD_ADDR_VAR 0 13
49702: PUSH
49703: LD_VAR 0 13
49707: PUSH
49708: LD_INT 2
49710: PLUS
49711: ST_TO_ADDR
// continue ;
49712: GO 49512
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49714: LD_VAR 0 12
49718: PUSH
49719: LD_INT 1
49721: ARRAY
49722: PPUSH
49723: CALL_OW 266
49727: PUSH
49728: LD_INT 5
49730: EQUAL
49731: IFFALSE 49805
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49733: LD_VAR 0 12
49737: PUSH
49738: LD_INT 1
49740: ARRAY
49741: PPUSH
49742: CALL_OW 313
49746: PUSH
49747: LD_INT 3
49749: LESS
49750: IFFALSE 49786
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49752: LD_INT 0
49754: PPUSH
49755: LD_INT 5
49757: PUSH
49758: LD_INT 8
49760: PUSH
49761: LD_INT 9
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: LIST
49768: PUSH
49769: LD_VAR 0 17
49773: ARRAY
49774: PPUSH
49775: LD_VAR 0 4
49779: PPUSH
49780: CALL_OW 380
49784: GO 49803
// PrepareHuman ( false , i , skill ) ;
49786: LD_INT 0
49788: PPUSH
49789: LD_VAR 0 8
49793: PPUSH
49794: LD_VAR 0 4
49798: PPUSH
49799: CALL_OW 380
// end else
49803: GO 49822
// PrepareHuman ( false , i , skill ) ;
49805: LD_INT 0
49807: PPUSH
49808: LD_VAR 0 8
49812: PPUSH
49813: LD_VAR 0 4
49817: PPUSH
49818: CALL_OW 380
// un := CreateHuman ;
49822: LD_ADDR_VAR 0 14
49826: PUSH
49827: CALL_OW 44
49831: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49832: LD_ADDR_VAR 0 7
49836: PUSH
49837: LD_VAR 0 7
49841: PPUSH
49842: LD_INT 1
49844: PPUSH
49845: LD_VAR 0 14
49849: PPUSH
49850: CALL_OW 2
49854: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49855: LD_VAR 0 14
49859: PPUSH
49860: LD_VAR 0 12
49864: PUSH
49865: LD_INT 1
49867: ARRAY
49868: PPUSH
49869: CALL_OW 52
// end ;
49873: GO 49512
49875: POP
49876: POP
// end ;
49877: GO 48814
49879: POP
49880: POP
// result := result ^ buildings ;
49881: LD_ADDR_VAR 0 7
49885: PUSH
49886: LD_VAR 0 7
49890: PUSH
49891: LD_VAR 0 18
49895: ADD
49896: ST_TO_ADDR
// end else
49897: GO 50040
// begin for i = 1 to personel do
49899: LD_ADDR_VAR 0 8
49903: PUSH
49904: DOUBLE
49905: LD_INT 1
49907: DEC
49908: ST_TO_ADDR
49909: LD_VAR 0 6
49913: PUSH
49914: FOR_TO
49915: IFFALSE 50038
// begin if i > 4 then
49917: LD_VAR 0 8
49921: PUSH
49922: LD_INT 4
49924: GREATER
49925: IFFALSE 49929
// break ;
49927: GO 50038
// x := personel [ i ] ;
49929: LD_ADDR_VAR 0 13
49933: PUSH
49934: LD_VAR 0 6
49938: PUSH
49939: LD_VAR 0 8
49943: ARRAY
49944: ST_TO_ADDR
// if x = - 1 then
49945: LD_VAR 0 13
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: EQUAL
49954: IFFALSE 49958
// continue ;
49956: GO 49914
// PrepareHuman ( false , i , skill ) ;
49958: LD_INT 0
49960: PPUSH
49961: LD_VAR 0 8
49965: PPUSH
49966: LD_VAR 0 4
49970: PPUSH
49971: CALL_OW 380
// un := CreateHuman ;
49975: LD_ADDR_VAR 0 14
49979: PUSH
49980: CALL_OW 44
49984: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49985: LD_VAR 0 14
49989: PPUSH
49990: LD_VAR 0 1
49994: PPUSH
49995: CALL_OW 250
49999: PPUSH
50000: LD_VAR 0 1
50004: PPUSH
50005: CALL_OW 251
50009: PPUSH
50010: LD_INT 10
50012: PPUSH
50013: LD_INT 0
50015: PPUSH
50016: CALL_OW 50
// result := result ^ un ;
50020: LD_ADDR_VAR 0 7
50024: PUSH
50025: LD_VAR 0 7
50029: PUSH
50030: LD_VAR 0 14
50034: ADD
50035: ST_TO_ADDR
// end ;
50036: GO 49914
50038: POP
50039: POP
// end ; end ;
50040: LD_VAR 0 7
50044: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50045: LD_INT 0
50047: PPUSH
50048: PPUSH
50049: PPUSH
50050: PPUSH
50051: PPUSH
50052: PPUSH
50053: PPUSH
50054: PPUSH
50055: PPUSH
50056: PPUSH
50057: PPUSH
50058: PPUSH
50059: PPUSH
50060: PPUSH
50061: PPUSH
50062: PPUSH
// result := false ;
50063: LD_ADDR_VAR 0 3
50067: PUSH
50068: LD_INT 0
50070: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50071: LD_VAR 0 1
50075: NOT
50076: PUSH
50077: LD_VAR 0 1
50081: PPUSH
50082: CALL_OW 266
50086: PUSH
50087: LD_INT 32
50089: PUSH
50090: LD_INT 33
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: IN
50097: NOT
50098: OR
50099: IFFALSE 50103
// exit ;
50101: GO 51212
// nat := GetNation ( tower ) ;
50103: LD_ADDR_VAR 0 12
50107: PUSH
50108: LD_VAR 0 1
50112: PPUSH
50113: CALL_OW 248
50117: ST_TO_ADDR
// side := GetSide ( tower ) ;
50118: LD_ADDR_VAR 0 16
50122: PUSH
50123: LD_VAR 0 1
50127: PPUSH
50128: CALL_OW 255
50132: ST_TO_ADDR
// x := GetX ( tower ) ;
50133: LD_ADDR_VAR 0 10
50137: PUSH
50138: LD_VAR 0 1
50142: PPUSH
50143: CALL_OW 250
50147: ST_TO_ADDR
// y := GetY ( tower ) ;
50148: LD_ADDR_VAR 0 11
50152: PUSH
50153: LD_VAR 0 1
50157: PPUSH
50158: CALL_OW 251
50162: ST_TO_ADDR
// if not x or not y then
50163: LD_VAR 0 10
50167: NOT
50168: PUSH
50169: LD_VAR 0 11
50173: NOT
50174: OR
50175: IFFALSE 50179
// exit ;
50177: GO 51212
// weapon := 0 ;
50179: LD_ADDR_VAR 0 18
50183: PUSH
50184: LD_INT 0
50186: ST_TO_ADDR
// fac_list := [ ] ;
50187: LD_ADDR_VAR 0 17
50191: PUSH
50192: EMPTY
50193: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50194: LD_ADDR_VAR 0 6
50198: PUSH
50199: LD_VAR 0 1
50203: PPUSH
50204: CALL_OW 274
50208: PPUSH
50209: LD_VAR 0 2
50213: PPUSH
50214: LD_INT 0
50216: PPUSH
50217: CALL 47783 0 3
50221: PPUSH
50222: LD_INT 30
50224: PUSH
50225: LD_INT 3
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PPUSH
50232: CALL_OW 72
50236: ST_TO_ADDR
// if not factories then
50237: LD_VAR 0 6
50241: NOT
50242: IFFALSE 50246
// exit ;
50244: GO 51212
// for i in factories do
50246: LD_ADDR_VAR 0 8
50250: PUSH
50251: LD_VAR 0 6
50255: PUSH
50256: FOR_IN
50257: IFFALSE 50282
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50259: LD_ADDR_VAR 0 17
50263: PUSH
50264: LD_VAR 0 17
50268: PUSH
50269: LD_VAR 0 8
50273: PPUSH
50274: CALL_OW 478
50278: UNION
50279: ST_TO_ADDR
50280: GO 50256
50282: POP
50283: POP
// if not fac_list then
50284: LD_VAR 0 17
50288: NOT
50289: IFFALSE 50293
// exit ;
50291: GO 51212
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50293: LD_ADDR_VAR 0 5
50297: PUSH
50298: LD_INT 4
50300: PUSH
50301: LD_INT 5
50303: PUSH
50304: LD_INT 9
50306: PUSH
50307: LD_INT 10
50309: PUSH
50310: LD_INT 6
50312: PUSH
50313: LD_INT 7
50315: PUSH
50316: LD_INT 11
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 27
50330: PUSH
50331: LD_INT 28
50333: PUSH
50334: LD_INT 26
50336: PUSH
50337: LD_INT 30
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 43
50348: PUSH
50349: LD_INT 44
50351: PUSH
50352: LD_INT 46
50354: PUSH
50355: LD_INT 45
50357: PUSH
50358: LD_INT 47
50360: PUSH
50361: LD_INT 49
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: LIST
50376: PUSH
50377: LD_VAR 0 12
50381: ARRAY
50382: ST_TO_ADDR
// list := list isect fac_list ;
50383: LD_ADDR_VAR 0 5
50387: PUSH
50388: LD_VAR 0 5
50392: PUSH
50393: LD_VAR 0 17
50397: ISECT
50398: ST_TO_ADDR
// if not list then
50399: LD_VAR 0 5
50403: NOT
50404: IFFALSE 50408
// exit ;
50406: GO 51212
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50408: LD_VAR 0 12
50412: PUSH
50413: LD_INT 3
50415: EQUAL
50416: PUSH
50417: LD_INT 49
50419: PUSH
50420: LD_VAR 0 5
50424: IN
50425: AND
50426: PUSH
50427: LD_INT 31
50429: PPUSH
50430: LD_VAR 0 16
50434: PPUSH
50435: CALL_OW 321
50439: PUSH
50440: LD_INT 2
50442: EQUAL
50443: AND
50444: IFFALSE 50504
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50446: LD_INT 22
50448: PUSH
50449: LD_VAR 0 16
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 35
50460: PUSH
50461: LD_INT 49
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 91
50470: PUSH
50471: LD_VAR 0 1
50475: PUSH
50476: LD_INT 10
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: LIST
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: LIST
50488: PPUSH
50489: CALL_OW 69
50493: NOT
50494: IFFALSE 50504
// weapon := ru_time_lapser ;
50496: LD_ADDR_VAR 0 18
50500: PUSH
50501: LD_INT 49
50503: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50504: LD_VAR 0 12
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: LD_INT 2
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: IN
50519: PUSH
50520: LD_INT 11
50522: PUSH
50523: LD_VAR 0 5
50527: IN
50528: PUSH
50529: LD_INT 30
50531: PUSH
50532: LD_VAR 0 5
50536: IN
50537: OR
50538: AND
50539: PUSH
50540: LD_INT 6
50542: PPUSH
50543: LD_VAR 0 16
50547: PPUSH
50548: CALL_OW 321
50552: PUSH
50553: LD_INT 2
50555: EQUAL
50556: AND
50557: IFFALSE 50722
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50559: LD_INT 22
50561: PUSH
50562: LD_VAR 0 16
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: LD_INT 35
50576: PUSH
50577: LD_INT 11
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 35
50586: PUSH
50587: LD_INT 30
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 91
50601: PUSH
50602: LD_VAR 0 1
50606: PUSH
50607: LD_INT 18
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: LIST
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: LIST
50619: PPUSH
50620: CALL_OW 69
50624: NOT
50625: PUSH
50626: LD_INT 22
50628: PUSH
50629: LD_VAR 0 16
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: LD_INT 30
50643: PUSH
50644: LD_INT 32
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 30
50653: PUSH
50654: LD_INT 33
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 91
50668: PUSH
50669: LD_VAR 0 1
50673: PUSH
50674: LD_INT 12
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: LIST
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: LIST
50686: PUSH
50687: EMPTY
50688: LIST
50689: PPUSH
50690: CALL_OW 69
50694: PUSH
50695: LD_INT 2
50697: GREATER
50698: AND
50699: IFFALSE 50722
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50701: LD_ADDR_VAR 0 18
50705: PUSH
50706: LD_INT 11
50708: PUSH
50709: LD_INT 30
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_VAR 0 12
50720: ARRAY
50721: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50722: LD_VAR 0 18
50726: NOT
50727: PUSH
50728: LD_INT 40
50730: PPUSH
50731: LD_VAR 0 16
50735: PPUSH
50736: CALL_OW 321
50740: PUSH
50741: LD_INT 2
50743: EQUAL
50744: AND
50745: PUSH
50746: LD_INT 7
50748: PUSH
50749: LD_VAR 0 5
50753: IN
50754: PUSH
50755: LD_INT 28
50757: PUSH
50758: LD_VAR 0 5
50762: IN
50763: OR
50764: PUSH
50765: LD_INT 45
50767: PUSH
50768: LD_VAR 0 5
50772: IN
50773: OR
50774: AND
50775: IFFALSE 51029
// begin hex := GetHexInfo ( x , y ) ;
50777: LD_ADDR_VAR 0 4
50781: PUSH
50782: LD_VAR 0 10
50786: PPUSH
50787: LD_VAR 0 11
50791: PPUSH
50792: CALL_OW 546
50796: ST_TO_ADDR
// if hex [ 1 ] then
50797: LD_VAR 0 4
50801: PUSH
50802: LD_INT 1
50804: ARRAY
50805: IFFALSE 50809
// exit ;
50807: GO 51212
// height := hex [ 2 ] ;
50809: LD_ADDR_VAR 0 15
50813: PUSH
50814: LD_VAR 0 4
50818: PUSH
50819: LD_INT 2
50821: ARRAY
50822: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50823: LD_ADDR_VAR 0 14
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: LD_INT 2
50833: PUSH
50834: LD_INT 3
50836: PUSH
50837: LD_INT 5
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: ST_TO_ADDR
// for i in tmp do
50846: LD_ADDR_VAR 0 8
50850: PUSH
50851: LD_VAR 0 14
50855: PUSH
50856: FOR_IN
50857: IFFALSE 51027
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50859: LD_ADDR_VAR 0 9
50863: PUSH
50864: LD_VAR 0 10
50868: PPUSH
50869: LD_VAR 0 8
50873: PPUSH
50874: LD_INT 5
50876: PPUSH
50877: CALL_OW 272
50881: PUSH
50882: LD_VAR 0 11
50886: PPUSH
50887: LD_VAR 0 8
50891: PPUSH
50892: LD_INT 5
50894: PPUSH
50895: CALL_OW 273
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50904: LD_VAR 0 9
50908: PUSH
50909: LD_INT 1
50911: ARRAY
50912: PPUSH
50913: LD_VAR 0 9
50917: PUSH
50918: LD_INT 2
50920: ARRAY
50921: PPUSH
50922: CALL_OW 488
50926: IFFALSE 51025
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50928: LD_ADDR_VAR 0 4
50932: PUSH
50933: LD_VAR 0 9
50937: PUSH
50938: LD_INT 1
50940: ARRAY
50941: PPUSH
50942: LD_VAR 0 9
50946: PUSH
50947: LD_INT 2
50949: ARRAY
50950: PPUSH
50951: CALL_OW 546
50955: ST_TO_ADDR
// if hex [ 1 ] then
50956: LD_VAR 0 4
50960: PUSH
50961: LD_INT 1
50963: ARRAY
50964: IFFALSE 50968
// continue ;
50966: GO 50856
// h := hex [ 2 ] ;
50968: LD_ADDR_VAR 0 13
50972: PUSH
50973: LD_VAR 0 4
50977: PUSH
50978: LD_INT 2
50980: ARRAY
50981: ST_TO_ADDR
// if h + 7 < height then
50982: LD_VAR 0 13
50986: PUSH
50987: LD_INT 7
50989: PLUS
50990: PUSH
50991: LD_VAR 0 15
50995: LESS
50996: IFFALSE 51025
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50998: LD_ADDR_VAR 0 18
51002: PUSH
51003: LD_INT 7
51005: PUSH
51006: LD_INT 28
51008: PUSH
51009: LD_INT 45
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: LIST
51016: PUSH
51017: LD_VAR 0 12
51021: ARRAY
51022: ST_TO_ADDR
// break ;
51023: GO 51027
// end ; end ; end ;
51025: GO 50856
51027: POP
51028: POP
// end ; if not weapon then
51029: LD_VAR 0 18
51033: NOT
51034: IFFALSE 51094
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51036: LD_ADDR_VAR 0 5
51040: PUSH
51041: LD_VAR 0 5
51045: PUSH
51046: LD_INT 11
51048: PUSH
51049: LD_INT 30
51051: PUSH
51052: LD_INT 49
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: LIST
51059: DIFF
51060: ST_TO_ADDR
// if not list then
51061: LD_VAR 0 5
51065: NOT
51066: IFFALSE 51070
// exit ;
51068: GO 51212
// weapon := list [ rand ( 1 , list ) ] ;
51070: LD_ADDR_VAR 0 18
51074: PUSH
51075: LD_VAR 0 5
51079: PUSH
51080: LD_INT 1
51082: PPUSH
51083: LD_VAR 0 5
51087: PPUSH
51088: CALL_OW 12
51092: ARRAY
51093: ST_TO_ADDR
// end ; if weapon then
51094: LD_VAR 0 18
51098: IFFALSE 51212
// begin tmp := CostOfWeapon ( weapon ) ;
51100: LD_ADDR_VAR 0 14
51104: PUSH
51105: LD_VAR 0 18
51109: PPUSH
51110: CALL_OW 451
51114: ST_TO_ADDR
// j := GetBase ( tower ) ;
51115: LD_ADDR_VAR 0 9
51119: PUSH
51120: LD_VAR 0 1
51124: PPUSH
51125: CALL_OW 274
51129: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51130: LD_VAR 0 9
51134: PPUSH
51135: LD_INT 1
51137: PPUSH
51138: CALL_OW 275
51142: PUSH
51143: LD_VAR 0 14
51147: PUSH
51148: LD_INT 1
51150: ARRAY
51151: GREATEREQUAL
51152: PUSH
51153: LD_VAR 0 9
51157: PPUSH
51158: LD_INT 2
51160: PPUSH
51161: CALL_OW 275
51165: PUSH
51166: LD_VAR 0 14
51170: PUSH
51171: LD_INT 2
51173: ARRAY
51174: GREATEREQUAL
51175: AND
51176: PUSH
51177: LD_VAR 0 9
51181: PPUSH
51182: LD_INT 3
51184: PPUSH
51185: CALL_OW 275
51189: PUSH
51190: LD_VAR 0 14
51194: PUSH
51195: LD_INT 3
51197: ARRAY
51198: GREATEREQUAL
51199: AND
51200: IFFALSE 51212
// result := weapon ;
51202: LD_ADDR_VAR 0 3
51206: PUSH
51207: LD_VAR 0 18
51211: ST_TO_ADDR
// end ; end ;
51212: LD_VAR 0 3
51216: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51217: LD_INT 0
51219: PPUSH
51220: PPUSH
// result := true ;
51221: LD_ADDR_VAR 0 3
51225: PUSH
51226: LD_INT 1
51228: ST_TO_ADDR
// if array1 = array2 then
51229: LD_VAR 0 1
51233: PUSH
51234: LD_VAR 0 2
51238: EQUAL
51239: IFFALSE 51299
// begin for i = 1 to array1 do
51241: LD_ADDR_VAR 0 4
51245: PUSH
51246: DOUBLE
51247: LD_INT 1
51249: DEC
51250: ST_TO_ADDR
51251: LD_VAR 0 1
51255: PUSH
51256: FOR_TO
51257: IFFALSE 51295
// if array1 [ i ] <> array2 [ i ] then
51259: LD_VAR 0 1
51263: PUSH
51264: LD_VAR 0 4
51268: ARRAY
51269: PUSH
51270: LD_VAR 0 2
51274: PUSH
51275: LD_VAR 0 4
51279: ARRAY
51280: NONEQUAL
51281: IFFALSE 51293
// begin result := false ;
51283: LD_ADDR_VAR 0 3
51287: PUSH
51288: LD_INT 0
51290: ST_TO_ADDR
// break ;
51291: GO 51295
// end ;
51293: GO 51256
51295: POP
51296: POP
// end else
51297: GO 51307
// result := false ;
51299: LD_ADDR_VAR 0 3
51303: PUSH
51304: LD_INT 0
51306: ST_TO_ADDR
// end ;
51307: LD_VAR 0 3
51311: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51312: LD_INT 0
51314: PPUSH
51315: PPUSH
// if not array1 or not array2 then
51316: LD_VAR 0 1
51320: NOT
51321: PUSH
51322: LD_VAR 0 2
51326: NOT
51327: OR
51328: IFFALSE 51332
// exit ;
51330: GO 51396
// result := true ;
51332: LD_ADDR_VAR 0 3
51336: PUSH
51337: LD_INT 1
51339: ST_TO_ADDR
// for i = 1 to array1 do
51340: LD_ADDR_VAR 0 4
51344: PUSH
51345: DOUBLE
51346: LD_INT 1
51348: DEC
51349: ST_TO_ADDR
51350: LD_VAR 0 1
51354: PUSH
51355: FOR_TO
51356: IFFALSE 51394
// if array1 [ i ] <> array2 [ i ] then
51358: LD_VAR 0 1
51362: PUSH
51363: LD_VAR 0 4
51367: ARRAY
51368: PUSH
51369: LD_VAR 0 2
51373: PUSH
51374: LD_VAR 0 4
51378: ARRAY
51379: NONEQUAL
51380: IFFALSE 51392
// begin result := false ;
51382: LD_ADDR_VAR 0 3
51386: PUSH
51387: LD_INT 0
51389: ST_TO_ADDR
// break ;
51390: GO 51394
// end ;
51392: GO 51355
51394: POP
51395: POP
// end ;
51396: LD_VAR 0 3
51400: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51401: LD_INT 0
51403: PPUSH
51404: PPUSH
51405: PPUSH
// pom := GetBase ( fac ) ;
51406: LD_ADDR_VAR 0 5
51410: PUSH
51411: LD_VAR 0 1
51415: PPUSH
51416: CALL_OW 274
51420: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51421: LD_ADDR_VAR 0 4
51425: PUSH
51426: LD_VAR 0 2
51430: PUSH
51431: LD_INT 1
51433: ARRAY
51434: PPUSH
51435: LD_VAR 0 2
51439: PUSH
51440: LD_INT 2
51442: ARRAY
51443: PPUSH
51444: LD_VAR 0 2
51448: PUSH
51449: LD_INT 3
51451: ARRAY
51452: PPUSH
51453: LD_VAR 0 2
51457: PUSH
51458: LD_INT 4
51460: ARRAY
51461: PPUSH
51462: CALL_OW 449
51466: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51467: LD_ADDR_VAR 0 3
51471: PUSH
51472: LD_VAR 0 5
51476: PPUSH
51477: LD_INT 1
51479: PPUSH
51480: CALL_OW 275
51484: PUSH
51485: LD_VAR 0 4
51489: PUSH
51490: LD_INT 1
51492: ARRAY
51493: GREATEREQUAL
51494: PUSH
51495: LD_VAR 0 5
51499: PPUSH
51500: LD_INT 2
51502: PPUSH
51503: CALL_OW 275
51507: PUSH
51508: LD_VAR 0 4
51512: PUSH
51513: LD_INT 2
51515: ARRAY
51516: GREATEREQUAL
51517: AND
51518: PUSH
51519: LD_VAR 0 5
51523: PPUSH
51524: LD_INT 3
51526: PPUSH
51527: CALL_OW 275
51531: PUSH
51532: LD_VAR 0 4
51536: PUSH
51537: LD_INT 3
51539: ARRAY
51540: GREATEREQUAL
51541: AND
51542: ST_TO_ADDR
// end ;
51543: LD_VAR 0 3
51547: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51548: LD_INT 0
51550: PPUSH
51551: PPUSH
51552: PPUSH
51553: PPUSH
// pom := GetBase ( building ) ;
51554: LD_ADDR_VAR 0 3
51558: PUSH
51559: LD_VAR 0 1
51563: PPUSH
51564: CALL_OW 274
51568: ST_TO_ADDR
// if not pom then
51569: LD_VAR 0 3
51573: NOT
51574: IFFALSE 51578
// exit ;
51576: GO 51748
// btype := GetBType ( building ) ;
51578: LD_ADDR_VAR 0 5
51582: PUSH
51583: LD_VAR 0 1
51587: PPUSH
51588: CALL_OW 266
51592: ST_TO_ADDR
// if btype = b_armoury then
51593: LD_VAR 0 5
51597: PUSH
51598: LD_INT 4
51600: EQUAL
51601: IFFALSE 51611
// btype := b_barracks ;
51603: LD_ADDR_VAR 0 5
51607: PUSH
51608: LD_INT 5
51610: ST_TO_ADDR
// if btype = b_depot then
51611: LD_VAR 0 5
51615: PUSH
51616: LD_INT 0
51618: EQUAL
51619: IFFALSE 51629
// btype := b_warehouse ;
51621: LD_ADDR_VAR 0 5
51625: PUSH
51626: LD_INT 1
51628: ST_TO_ADDR
// if btype = b_workshop then
51629: LD_VAR 0 5
51633: PUSH
51634: LD_INT 2
51636: EQUAL
51637: IFFALSE 51647
// btype := b_factory ;
51639: LD_ADDR_VAR 0 5
51643: PUSH
51644: LD_INT 3
51646: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51647: LD_ADDR_VAR 0 4
51651: PUSH
51652: LD_VAR 0 5
51656: PPUSH
51657: LD_VAR 0 1
51661: PPUSH
51662: CALL_OW 248
51666: PPUSH
51667: CALL_OW 450
51671: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51672: LD_ADDR_VAR 0 2
51676: PUSH
51677: LD_VAR 0 3
51681: PPUSH
51682: LD_INT 1
51684: PPUSH
51685: CALL_OW 275
51689: PUSH
51690: LD_VAR 0 4
51694: PUSH
51695: LD_INT 1
51697: ARRAY
51698: GREATEREQUAL
51699: PUSH
51700: LD_VAR 0 3
51704: PPUSH
51705: LD_INT 2
51707: PPUSH
51708: CALL_OW 275
51712: PUSH
51713: LD_VAR 0 4
51717: PUSH
51718: LD_INT 2
51720: ARRAY
51721: GREATEREQUAL
51722: AND
51723: PUSH
51724: LD_VAR 0 3
51728: PPUSH
51729: LD_INT 3
51731: PPUSH
51732: CALL_OW 275
51736: PUSH
51737: LD_VAR 0 4
51741: PUSH
51742: LD_INT 3
51744: ARRAY
51745: GREATEREQUAL
51746: AND
51747: ST_TO_ADDR
// end ;
51748: LD_VAR 0 2
51752: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51753: LD_INT 0
51755: PPUSH
51756: PPUSH
51757: PPUSH
// pom := GetBase ( building ) ;
51758: LD_ADDR_VAR 0 4
51762: PUSH
51763: LD_VAR 0 1
51767: PPUSH
51768: CALL_OW 274
51772: ST_TO_ADDR
// if not pom then
51773: LD_VAR 0 4
51777: NOT
51778: IFFALSE 51782
// exit ;
51780: GO 51883
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51782: LD_ADDR_VAR 0 5
51786: PUSH
51787: LD_VAR 0 2
51791: PPUSH
51792: LD_VAR 0 1
51796: PPUSH
51797: CALL_OW 248
51801: PPUSH
51802: CALL_OW 450
51806: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51807: LD_ADDR_VAR 0 3
51811: PUSH
51812: LD_VAR 0 4
51816: PPUSH
51817: LD_INT 1
51819: PPUSH
51820: CALL_OW 275
51824: PUSH
51825: LD_VAR 0 5
51829: PUSH
51830: LD_INT 1
51832: ARRAY
51833: GREATEREQUAL
51834: PUSH
51835: LD_VAR 0 4
51839: PPUSH
51840: LD_INT 2
51842: PPUSH
51843: CALL_OW 275
51847: PUSH
51848: LD_VAR 0 5
51852: PUSH
51853: LD_INT 2
51855: ARRAY
51856: GREATEREQUAL
51857: AND
51858: PUSH
51859: LD_VAR 0 4
51863: PPUSH
51864: LD_INT 3
51866: PPUSH
51867: CALL_OW 275
51871: PUSH
51872: LD_VAR 0 5
51876: PUSH
51877: LD_INT 3
51879: ARRAY
51880: GREATEREQUAL
51881: AND
51882: ST_TO_ADDR
// end ;
51883: LD_VAR 0 3
51887: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51888: LD_INT 0
51890: PPUSH
51891: PPUSH
51892: PPUSH
51893: PPUSH
51894: PPUSH
51895: PPUSH
51896: PPUSH
51897: PPUSH
51898: PPUSH
51899: PPUSH
51900: PPUSH
// result := false ;
51901: LD_ADDR_VAR 0 8
51905: PUSH
51906: LD_INT 0
51908: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51909: LD_VAR 0 5
51913: NOT
51914: PUSH
51915: LD_VAR 0 1
51919: NOT
51920: OR
51921: PUSH
51922: LD_VAR 0 2
51926: NOT
51927: OR
51928: PUSH
51929: LD_VAR 0 3
51933: NOT
51934: OR
51935: IFFALSE 51939
// exit ;
51937: GO 52753
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51939: LD_ADDR_VAR 0 14
51943: PUSH
51944: LD_VAR 0 1
51948: PPUSH
51949: LD_VAR 0 2
51953: PPUSH
51954: LD_VAR 0 3
51958: PPUSH
51959: LD_VAR 0 4
51963: PPUSH
51964: LD_VAR 0 5
51968: PUSH
51969: LD_INT 1
51971: ARRAY
51972: PPUSH
51973: CALL_OW 248
51977: PPUSH
51978: LD_INT 0
51980: PPUSH
51981: CALL 54006 0 6
51985: ST_TO_ADDR
// if not hexes then
51986: LD_VAR 0 14
51990: NOT
51991: IFFALSE 51995
// exit ;
51993: GO 52753
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51995: LD_ADDR_VAR 0 17
51999: PUSH
52000: LD_VAR 0 5
52004: PPUSH
52005: LD_INT 22
52007: PUSH
52008: LD_VAR 0 13
52012: PPUSH
52013: CALL_OW 255
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: LD_INT 30
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 30
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: LIST
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PPUSH
52054: CALL_OW 72
52058: ST_TO_ADDR
// for i = 1 to hexes do
52059: LD_ADDR_VAR 0 9
52063: PUSH
52064: DOUBLE
52065: LD_INT 1
52067: DEC
52068: ST_TO_ADDR
52069: LD_VAR 0 14
52073: PUSH
52074: FOR_TO
52075: IFFALSE 52751
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52077: LD_ADDR_VAR 0 13
52081: PUSH
52082: LD_VAR 0 14
52086: PUSH
52087: LD_VAR 0 9
52091: ARRAY
52092: PUSH
52093: LD_INT 1
52095: ARRAY
52096: PPUSH
52097: LD_VAR 0 14
52101: PUSH
52102: LD_VAR 0 9
52106: ARRAY
52107: PUSH
52108: LD_INT 2
52110: ARRAY
52111: PPUSH
52112: CALL_OW 428
52116: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52117: LD_VAR 0 14
52121: PUSH
52122: LD_VAR 0 9
52126: ARRAY
52127: PUSH
52128: LD_INT 1
52130: ARRAY
52131: PPUSH
52132: LD_VAR 0 14
52136: PUSH
52137: LD_VAR 0 9
52141: ARRAY
52142: PUSH
52143: LD_INT 2
52145: ARRAY
52146: PPUSH
52147: CALL_OW 351
52151: PUSH
52152: LD_VAR 0 14
52156: PUSH
52157: LD_VAR 0 9
52161: ARRAY
52162: PUSH
52163: LD_INT 1
52165: ARRAY
52166: PPUSH
52167: LD_VAR 0 14
52171: PUSH
52172: LD_VAR 0 9
52176: ARRAY
52177: PUSH
52178: LD_INT 2
52180: ARRAY
52181: PPUSH
52182: CALL_OW 488
52186: NOT
52187: OR
52188: PUSH
52189: LD_VAR 0 13
52193: PPUSH
52194: CALL_OW 247
52198: PUSH
52199: LD_INT 3
52201: EQUAL
52202: OR
52203: IFFALSE 52209
// exit ;
52205: POP
52206: POP
52207: GO 52753
// if not tmp then
52209: LD_VAR 0 13
52213: NOT
52214: IFFALSE 52218
// continue ;
52216: GO 52074
// result := true ;
52218: LD_ADDR_VAR 0 8
52222: PUSH
52223: LD_INT 1
52225: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52226: LD_VAR 0 6
52230: PUSH
52231: LD_VAR 0 13
52235: PPUSH
52236: CALL_OW 247
52240: PUSH
52241: LD_INT 2
52243: EQUAL
52244: AND
52245: PUSH
52246: LD_VAR 0 13
52250: PPUSH
52251: CALL_OW 263
52255: PUSH
52256: LD_INT 1
52258: EQUAL
52259: AND
52260: IFFALSE 52424
// begin if IsDrivenBy ( tmp ) then
52262: LD_VAR 0 13
52266: PPUSH
52267: CALL_OW 311
52271: IFFALSE 52275
// continue ;
52273: GO 52074
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52275: LD_VAR 0 6
52279: PPUSH
52280: LD_INT 3
52282: PUSH
52283: LD_INT 60
52285: PUSH
52286: EMPTY
52287: LIST
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 3
52295: PUSH
52296: LD_INT 55
52298: PUSH
52299: EMPTY
52300: LIST
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PPUSH
52310: CALL_OW 72
52314: IFFALSE 52422
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52316: LD_ADDR_VAR 0 18
52320: PUSH
52321: LD_VAR 0 6
52325: PPUSH
52326: LD_INT 3
52328: PUSH
52329: LD_INT 60
52331: PUSH
52332: EMPTY
52333: LIST
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 3
52341: PUSH
52342: LD_INT 55
52344: PUSH
52345: EMPTY
52346: LIST
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PPUSH
52356: CALL_OW 72
52360: PUSH
52361: LD_INT 1
52363: ARRAY
52364: ST_TO_ADDR
// if IsInUnit ( driver ) then
52365: LD_VAR 0 18
52369: PPUSH
52370: CALL_OW 310
52374: IFFALSE 52385
// ComExit ( driver ) ;
52376: LD_VAR 0 18
52380: PPUSH
52381: CALL 77798 0 1
// AddComEnterUnit ( driver , tmp ) ;
52385: LD_VAR 0 18
52389: PPUSH
52390: LD_VAR 0 13
52394: PPUSH
52395: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52399: LD_VAR 0 18
52403: PPUSH
52404: LD_VAR 0 7
52408: PPUSH
52409: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52413: LD_VAR 0 18
52417: PPUSH
52418: CALL_OW 181
// end ; continue ;
52422: GO 52074
// end ; if not cleaners or not tmp in cleaners then
52424: LD_VAR 0 6
52428: NOT
52429: PUSH
52430: LD_VAR 0 13
52434: PUSH
52435: LD_VAR 0 6
52439: IN
52440: NOT
52441: OR
52442: IFFALSE 52749
// begin if dep then
52444: LD_VAR 0 17
52448: IFFALSE 52584
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52450: LD_ADDR_VAR 0 16
52454: PUSH
52455: LD_VAR 0 17
52459: PUSH
52460: LD_INT 1
52462: ARRAY
52463: PPUSH
52464: CALL_OW 250
52468: PPUSH
52469: LD_VAR 0 17
52473: PUSH
52474: LD_INT 1
52476: ARRAY
52477: PPUSH
52478: CALL_OW 254
52482: PPUSH
52483: LD_INT 5
52485: PPUSH
52486: CALL_OW 272
52490: PUSH
52491: LD_VAR 0 17
52495: PUSH
52496: LD_INT 1
52498: ARRAY
52499: PPUSH
52500: CALL_OW 251
52504: PPUSH
52505: LD_VAR 0 17
52509: PUSH
52510: LD_INT 1
52512: ARRAY
52513: PPUSH
52514: CALL_OW 254
52518: PPUSH
52519: LD_INT 5
52521: PPUSH
52522: CALL_OW 273
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52531: LD_VAR 0 16
52535: PUSH
52536: LD_INT 1
52538: ARRAY
52539: PPUSH
52540: LD_VAR 0 16
52544: PUSH
52545: LD_INT 2
52547: ARRAY
52548: PPUSH
52549: CALL_OW 488
52553: IFFALSE 52584
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52555: LD_VAR 0 13
52559: PPUSH
52560: LD_VAR 0 16
52564: PUSH
52565: LD_INT 1
52567: ARRAY
52568: PPUSH
52569: LD_VAR 0 16
52573: PUSH
52574: LD_INT 2
52576: ARRAY
52577: PPUSH
52578: CALL_OW 111
// continue ;
52582: GO 52074
// end ; end ; r := GetDir ( tmp ) ;
52584: LD_ADDR_VAR 0 15
52588: PUSH
52589: LD_VAR 0 13
52593: PPUSH
52594: CALL_OW 254
52598: ST_TO_ADDR
// if r = 5 then
52599: LD_VAR 0 15
52603: PUSH
52604: LD_INT 5
52606: EQUAL
52607: IFFALSE 52617
// r := 0 ;
52609: LD_ADDR_VAR 0 15
52613: PUSH
52614: LD_INT 0
52616: ST_TO_ADDR
// for j = r to 5 do
52617: LD_ADDR_VAR 0 10
52621: PUSH
52622: DOUBLE
52623: LD_VAR 0 15
52627: DEC
52628: ST_TO_ADDR
52629: LD_INT 5
52631: PUSH
52632: FOR_TO
52633: IFFALSE 52747
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52635: LD_ADDR_VAR 0 11
52639: PUSH
52640: LD_VAR 0 13
52644: PPUSH
52645: CALL_OW 250
52649: PPUSH
52650: LD_VAR 0 10
52654: PPUSH
52655: LD_INT 2
52657: PPUSH
52658: CALL_OW 272
52662: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52663: LD_ADDR_VAR 0 12
52667: PUSH
52668: LD_VAR 0 13
52672: PPUSH
52673: CALL_OW 251
52677: PPUSH
52678: LD_VAR 0 10
52682: PPUSH
52683: LD_INT 2
52685: PPUSH
52686: CALL_OW 273
52690: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52691: LD_VAR 0 11
52695: PPUSH
52696: LD_VAR 0 12
52700: PPUSH
52701: CALL_OW 488
52705: PUSH
52706: LD_VAR 0 11
52710: PPUSH
52711: LD_VAR 0 12
52715: PPUSH
52716: CALL_OW 428
52720: NOT
52721: AND
52722: IFFALSE 52745
// begin ComMoveXY ( tmp , _x , _y ) ;
52724: LD_VAR 0 13
52728: PPUSH
52729: LD_VAR 0 11
52733: PPUSH
52734: LD_VAR 0 12
52738: PPUSH
52739: CALL_OW 111
// break ;
52743: GO 52747
// end ; end ;
52745: GO 52632
52747: POP
52748: POP
// end ; end ;
52749: GO 52074
52751: POP
52752: POP
// end ;
52753: LD_VAR 0 8
52757: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52758: LD_INT 0
52760: PPUSH
// result := true ;
52761: LD_ADDR_VAR 0 3
52765: PUSH
52766: LD_INT 1
52768: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52769: LD_VAR 0 2
52773: PUSH
52774: LD_INT 24
52776: DOUBLE
52777: EQUAL
52778: IFTRUE 52788
52780: LD_INT 33
52782: DOUBLE
52783: EQUAL
52784: IFTRUE 52788
52786: GO 52813
52788: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52789: LD_ADDR_VAR 0 3
52793: PUSH
52794: LD_INT 32
52796: PPUSH
52797: LD_VAR 0 1
52801: PPUSH
52802: CALL_OW 321
52806: PUSH
52807: LD_INT 2
52809: EQUAL
52810: ST_TO_ADDR
52811: GO 53129
52813: LD_INT 20
52815: DOUBLE
52816: EQUAL
52817: IFTRUE 52821
52819: GO 52846
52821: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52822: LD_ADDR_VAR 0 3
52826: PUSH
52827: LD_INT 6
52829: PPUSH
52830: LD_VAR 0 1
52834: PPUSH
52835: CALL_OW 321
52839: PUSH
52840: LD_INT 2
52842: EQUAL
52843: ST_TO_ADDR
52844: GO 53129
52846: LD_INT 22
52848: DOUBLE
52849: EQUAL
52850: IFTRUE 52860
52852: LD_INT 36
52854: DOUBLE
52855: EQUAL
52856: IFTRUE 52860
52858: GO 52885
52860: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52861: LD_ADDR_VAR 0 3
52865: PUSH
52866: LD_INT 15
52868: PPUSH
52869: LD_VAR 0 1
52873: PPUSH
52874: CALL_OW 321
52878: PUSH
52879: LD_INT 2
52881: EQUAL
52882: ST_TO_ADDR
52883: GO 53129
52885: LD_INT 30
52887: DOUBLE
52888: EQUAL
52889: IFTRUE 52893
52891: GO 52918
52893: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52894: LD_ADDR_VAR 0 3
52898: PUSH
52899: LD_INT 20
52901: PPUSH
52902: LD_VAR 0 1
52906: PPUSH
52907: CALL_OW 321
52911: PUSH
52912: LD_INT 2
52914: EQUAL
52915: ST_TO_ADDR
52916: GO 53129
52918: LD_INT 28
52920: DOUBLE
52921: EQUAL
52922: IFTRUE 52932
52924: LD_INT 21
52926: DOUBLE
52927: EQUAL
52928: IFTRUE 52932
52930: GO 52957
52932: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52933: LD_ADDR_VAR 0 3
52937: PUSH
52938: LD_INT 21
52940: PPUSH
52941: LD_VAR 0 1
52945: PPUSH
52946: CALL_OW 321
52950: PUSH
52951: LD_INT 2
52953: EQUAL
52954: ST_TO_ADDR
52955: GO 53129
52957: LD_INT 16
52959: DOUBLE
52960: EQUAL
52961: IFTRUE 52965
52963: GO 52990
52965: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52966: LD_ADDR_VAR 0 3
52970: PUSH
52971: LD_INT 84
52973: PPUSH
52974: LD_VAR 0 1
52978: PPUSH
52979: CALL_OW 321
52983: PUSH
52984: LD_INT 2
52986: EQUAL
52987: ST_TO_ADDR
52988: GO 53129
52990: LD_INT 19
52992: DOUBLE
52993: EQUAL
52994: IFTRUE 53004
52996: LD_INT 23
52998: DOUBLE
52999: EQUAL
53000: IFTRUE 53004
53002: GO 53029
53004: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53005: LD_ADDR_VAR 0 3
53009: PUSH
53010: LD_INT 83
53012: PPUSH
53013: LD_VAR 0 1
53017: PPUSH
53018: CALL_OW 321
53022: PUSH
53023: LD_INT 2
53025: EQUAL
53026: ST_TO_ADDR
53027: GO 53129
53029: LD_INT 17
53031: DOUBLE
53032: EQUAL
53033: IFTRUE 53037
53035: GO 53062
53037: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53038: LD_ADDR_VAR 0 3
53042: PUSH
53043: LD_INT 39
53045: PPUSH
53046: LD_VAR 0 1
53050: PPUSH
53051: CALL_OW 321
53055: PUSH
53056: LD_INT 2
53058: EQUAL
53059: ST_TO_ADDR
53060: GO 53129
53062: LD_INT 18
53064: DOUBLE
53065: EQUAL
53066: IFTRUE 53070
53068: GO 53095
53070: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53071: LD_ADDR_VAR 0 3
53075: PUSH
53076: LD_INT 40
53078: PPUSH
53079: LD_VAR 0 1
53083: PPUSH
53084: CALL_OW 321
53088: PUSH
53089: LD_INT 2
53091: EQUAL
53092: ST_TO_ADDR
53093: GO 53129
53095: LD_INT 27
53097: DOUBLE
53098: EQUAL
53099: IFTRUE 53103
53101: GO 53128
53103: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53104: LD_ADDR_VAR 0 3
53108: PUSH
53109: LD_INT 35
53111: PPUSH
53112: LD_VAR 0 1
53116: PPUSH
53117: CALL_OW 321
53121: PUSH
53122: LD_INT 2
53124: EQUAL
53125: ST_TO_ADDR
53126: GO 53129
53128: POP
// end ;
53129: LD_VAR 0 3
53133: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53134: LD_INT 0
53136: PPUSH
53137: PPUSH
53138: PPUSH
53139: PPUSH
53140: PPUSH
53141: PPUSH
53142: PPUSH
53143: PPUSH
53144: PPUSH
53145: PPUSH
53146: PPUSH
// result := false ;
53147: LD_ADDR_VAR 0 6
53151: PUSH
53152: LD_INT 0
53154: ST_TO_ADDR
// if btype = b_depot then
53155: LD_VAR 0 2
53159: PUSH
53160: LD_INT 0
53162: EQUAL
53163: IFFALSE 53175
// begin result := true ;
53165: LD_ADDR_VAR 0 6
53169: PUSH
53170: LD_INT 1
53172: ST_TO_ADDR
// exit ;
53173: GO 54001
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53175: LD_VAR 0 1
53179: NOT
53180: PUSH
53181: LD_VAR 0 1
53185: PPUSH
53186: CALL_OW 266
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: IN
53201: NOT
53202: OR
53203: PUSH
53204: LD_VAR 0 2
53208: NOT
53209: OR
53210: PUSH
53211: LD_VAR 0 5
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: LD_INT 3
53227: PUSH
53228: LD_INT 4
53230: PUSH
53231: LD_INT 5
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: IN
53242: NOT
53243: OR
53244: PUSH
53245: LD_VAR 0 3
53249: PPUSH
53250: LD_VAR 0 4
53254: PPUSH
53255: CALL_OW 488
53259: NOT
53260: OR
53261: IFFALSE 53265
// exit ;
53263: GO 54001
// side := GetSide ( depot ) ;
53265: LD_ADDR_VAR 0 9
53269: PUSH
53270: LD_VAR 0 1
53274: PPUSH
53275: CALL_OW 255
53279: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53280: LD_VAR 0 9
53284: PPUSH
53285: LD_VAR 0 2
53289: PPUSH
53290: CALL 52758 0 2
53294: NOT
53295: IFFALSE 53299
// exit ;
53297: GO 54001
// pom := GetBase ( depot ) ;
53299: LD_ADDR_VAR 0 10
53303: PUSH
53304: LD_VAR 0 1
53308: PPUSH
53309: CALL_OW 274
53313: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53314: LD_ADDR_VAR 0 11
53318: PUSH
53319: LD_VAR 0 2
53323: PPUSH
53324: LD_VAR 0 1
53328: PPUSH
53329: CALL_OW 248
53333: PPUSH
53334: CALL_OW 450
53338: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53339: LD_VAR 0 10
53343: PPUSH
53344: LD_INT 1
53346: PPUSH
53347: CALL_OW 275
53351: PUSH
53352: LD_VAR 0 11
53356: PUSH
53357: LD_INT 1
53359: ARRAY
53360: GREATEREQUAL
53361: PUSH
53362: LD_VAR 0 10
53366: PPUSH
53367: LD_INT 2
53369: PPUSH
53370: CALL_OW 275
53374: PUSH
53375: LD_VAR 0 11
53379: PUSH
53380: LD_INT 2
53382: ARRAY
53383: GREATEREQUAL
53384: AND
53385: PUSH
53386: LD_VAR 0 10
53390: PPUSH
53391: LD_INT 3
53393: PPUSH
53394: CALL_OW 275
53398: PUSH
53399: LD_VAR 0 11
53403: PUSH
53404: LD_INT 3
53406: ARRAY
53407: GREATEREQUAL
53408: AND
53409: NOT
53410: IFFALSE 53414
// exit ;
53412: GO 54001
// if GetBType ( depot ) = b_depot then
53414: LD_VAR 0 1
53418: PPUSH
53419: CALL_OW 266
53423: PUSH
53424: LD_INT 0
53426: EQUAL
53427: IFFALSE 53439
// dist := 28 else
53429: LD_ADDR_VAR 0 14
53433: PUSH
53434: LD_INT 28
53436: ST_TO_ADDR
53437: GO 53447
// dist := 36 ;
53439: LD_ADDR_VAR 0 14
53443: PUSH
53444: LD_INT 36
53446: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53447: LD_VAR 0 1
53451: PPUSH
53452: LD_VAR 0 3
53456: PPUSH
53457: LD_VAR 0 4
53461: PPUSH
53462: CALL_OW 297
53466: PUSH
53467: LD_VAR 0 14
53471: GREATER
53472: IFFALSE 53476
// exit ;
53474: GO 54001
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53476: LD_ADDR_VAR 0 12
53480: PUSH
53481: LD_VAR 0 2
53485: PPUSH
53486: LD_VAR 0 3
53490: PPUSH
53491: LD_VAR 0 4
53495: PPUSH
53496: LD_VAR 0 5
53500: PPUSH
53501: LD_VAR 0 1
53505: PPUSH
53506: CALL_OW 248
53510: PPUSH
53511: LD_INT 0
53513: PPUSH
53514: CALL 54006 0 6
53518: ST_TO_ADDR
// if not hexes then
53519: LD_VAR 0 12
53523: NOT
53524: IFFALSE 53528
// exit ;
53526: GO 54001
// hex := GetHexInfo ( x , y ) ;
53528: LD_ADDR_VAR 0 15
53532: PUSH
53533: LD_VAR 0 3
53537: PPUSH
53538: LD_VAR 0 4
53542: PPUSH
53543: CALL_OW 546
53547: ST_TO_ADDR
// if hex [ 1 ] then
53548: LD_VAR 0 15
53552: PUSH
53553: LD_INT 1
53555: ARRAY
53556: IFFALSE 53560
// exit ;
53558: GO 54001
// height := hex [ 2 ] ;
53560: LD_ADDR_VAR 0 13
53564: PUSH
53565: LD_VAR 0 15
53569: PUSH
53570: LD_INT 2
53572: ARRAY
53573: ST_TO_ADDR
// for i = 1 to hexes do
53574: LD_ADDR_VAR 0 7
53578: PUSH
53579: DOUBLE
53580: LD_INT 1
53582: DEC
53583: ST_TO_ADDR
53584: LD_VAR 0 12
53588: PUSH
53589: FOR_TO
53590: IFFALSE 53920
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53592: LD_VAR 0 12
53596: PUSH
53597: LD_VAR 0 7
53601: ARRAY
53602: PUSH
53603: LD_INT 1
53605: ARRAY
53606: PPUSH
53607: LD_VAR 0 12
53611: PUSH
53612: LD_VAR 0 7
53616: ARRAY
53617: PUSH
53618: LD_INT 2
53620: ARRAY
53621: PPUSH
53622: CALL_OW 488
53626: NOT
53627: PUSH
53628: LD_VAR 0 12
53632: PUSH
53633: LD_VAR 0 7
53637: ARRAY
53638: PUSH
53639: LD_INT 1
53641: ARRAY
53642: PPUSH
53643: LD_VAR 0 12
53647: PUSH
53648: LD_VAR 0 7
53652: ARRAY
53653: PUSH
53654: LD_INT 2
53656: ARRAY
53657: PPUSH
53658: CALL_OW 428
53662: PUSH
53663: LD_INT 0
53665: GREATER
53666: OR
53667: PUSH
53668: LD_VAR 0 12
53672: PUSH
53673: LD_VAR 0 7
53677: ARRAY
53678: PUSH
53679: LD_INT 1
53681: ARRAY
53682: PPUSH
53683: LD_VAR 0 12
53687: PUSH
53688: LD_VAR 0 7
53692: ARRAY
53693: PUSH
53694: LD_INT 2
53696: ARRAY
53697: PPUSH
53698: CALL_OW 351
53702: OR
53703: IFFALSE 53709
// exit ;
53705: POP
53706: POP
53707: GO 54001
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53709: LD_ADDR_VAR 0 8
53713: PUSH
53714: LD_VAR 0 12
53718: PUSH
53719: LD_VAR 0 7
53723: ARRAY
53724: PUSH
53725: LD_INT 1
53727: ARRAY
53728: PPUSH
53729: LD_VAR 0 12
53733: PUSH
53734: LD_VAR 0 7
53738: ARRAY
53739: PUSH
53740: LD_INT 2
53742: ARRAY
53743: PPUSH
53744: CALL_OW 546
53748: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53749: LD_VAR 0 8
53753: PUSH
53754: LD_INT 1
53756: ARRAY
53757: PUSH
53758: LD_VAR 0 8
53762: PUSH
53763: LD_INT 2
53765: ARRAY
53766: PUSH
53767: LD_VAR 0 13
53771: PUSH
53772: LD_INT 2
53774: PLUS
53775: GREATER
53776: OR
53777: PUSH
53778: LD_VAR 0 8
53782: PUSH
53783: LD_INT 2
53785: ARRAY
53786: PUSH
53787: LD_VAR 0 13
53791: PUSH
53792: LD_INT 2
53794: MINUS
53795: LESS
53796: OR
53797: PUSH
53798: LD_VAR 0 8
53802: PUSH
53803: LD_INT 3
53805: ARRAY
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: LD_INT 8
53812: PUSH
53813: LD_INT 9
53815: PUSH
53816: LD_INT 10
53818: PUSH
53819: LD_INT 11
53821: PUSH
53822: LD_INT 12
53824: PUSH
53825: LD_INT 13
53827: PUSH
53828: LD_INT 16
53830: PUSH
53831: LD_INT 17
53833: PUSH
53834: LD_INT 18
53836: PUSH
53837: LD_INT 19
53839: PUSH
53840: LD_INT 20
53842: PUSH
53843: LD_INT 21
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: IN
53861: NOT
53862: OR
53863: PUSH
53864: LD_VAR 0 8
53868: PUSH
53869: LD_INT 5
53871: ARRAY
53872: NOT
53873: OR
53874: PUSH
53875: LD_VAR 0 8
53879: PUSH
53880: LD_INT 6
53882: ARRAY
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: LD_INT 2
53889: PUSH
53890: LD_INT 7
53892: PUSH
53893: LD_INT 9
53895: PUSH
53896: LD_INT 10
53898: PUSH
53899: LD_INT 11
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: IN
53910: NOT
53911: OR
53912: IFFALSE 53918
// exit ;
53914: POP
53915: POP
53916: GO 54001
// end ;
53918: GO 53589
53920: POP
53921: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53922: LD_VAR 0 9
53926: PPUSH
53927: LD_VAR 0 3
53931: PPUSH
53932: LD_VAR 0 4
53936: PPUSH
53937: LD_INT 20
53939: PPUSH
53940: CALL 45924 0 4
53944: PUSH
53945: LD_INT 4
53947: ARRAY
53948: IFFALSE 53952
// exit ;
53950: GO 54001
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53952: LD_VAR 0 2
53956: PUSH
53957: LD_INT 29
53959: PUSH
53960: LD_INT 30
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: IN
53967: PUSH
53968: LD_VAR 0 3
53972: PPUSH
53973: LD_VAR 0 4
53977: PPUSH
53978: LD_VAR 0 9
53982: PPUSH
53983: CALL_OW 440
53987: NOT
53988: AND
53989: IFFALSE 53993
// exit ;
53991: GO 54001
// result := true ;
53993: LD_ADDR_VAR 0 6
53997: PUSH
53998: LD_INT 1
54000: ST_TO_ADDR
// end ;
54001: LD_VAR 0 6
54005: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54006: LD_INT 0
54008: PPUSH
54009: PPUSH
54010: PPUSH
54011: PPUSH
54012: PPUSH
54013: PPUSH
54014: PPUSH
54015: PPUSH
54016: PPUSH
54017: PPUSH
54018: PPUSH
54019: PPUSH
54020: PPUSH
54021: PPUSH
54022: PPUSH
54023: PPUSH
54024: PPUSH
54025: PPUSH
54026: PPUSH
54027: PPUSH
54028: PPUSH
54029: PPUSH
54030: PPUSH
54031: PPUSH
54032: PPUSH
54033: PPUSH
54034: PPUSH
54035: PPUSH
54036: PPUSH
54037: PPUSH
54038: PPUSH
54039: PPUSH
54040: PPUSH
54041: PPUSH
54042: PPUSH
54043: PPUSH
54044: PPUSH
54045: PPUSH
54046: PPUSH
54047: PPUSH
54048: PPUSH
54049: PPUSH
54050: PPUSH
54051: PPUSH
54052: PPUSH
54053: PPUSH
54054: PPUSH
54055: PPUSH
54056: PPUSH
54057: PPUSH
54058: PPUSH
54059: PPUSH
54060: PPUSH
54061: PPUSH
54062: PPUSH
54063: PPUSH
54064: PPUSH
54065: PPUSH
// result = [ ] ;
54066: LD_ADDR_VAR 0 7
54070: PUSH
54071: EMPTY
54072: ST_TO_ADDR
// temp_list = [ ] ;
54073: LD_ADDR_VAR 0 9
54077: PUSH
54078: EMPTY
54079: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54080: LD_VAR 0 4
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: LD_INT 2
54093: PUSH
54094: LD_INT 3
54096: PUSH
54097: LD_INT 4
54099: PUSH
54100: LD_INT 5
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: IN
54111: NOT
54112: PUSH
54113: LD_VAR 0 1
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: IN
54128: PUSH
54129: LD_VAR 0 5
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: LD_INT 2
54139: PUSH
54140: LD_INT 3
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: LIST
54147: IN
54148: NOT
54149: AND
54150: OR
54151: IFFALSE 54155
// exit ;
54153: GO 72546
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54155: LD_VAR 0 1
54159: PUSH
54160: LD_INT 6
54162: PUSH
54163: LD_INT 7
54165: PUSH
54166: LD_INT 8
54168: PUSH
54169: LD_INT 13
54171: PUSH
54172: LD_INT 12
54174: PUSH
54175: LD_INT 15
54177: PUSH
54178: LD_INT 11
54180: PUSH
54181: LD_INT 14
54183: PUSH
54184: LD_INT 10
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: IN
54198: IFFALSE 54208
// btype = b_lab ;
54200: LD_ADDR_VAR 0 1
54204: PUSH
54205: LD_INT 6
54207: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54208: LD_VAR 0 6
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: LD_INT 2
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: LIST
54226: IN
54227: NOT
54228: PUSH
54229: LD_VAR 0 1
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: LD_INT 2
54242: PUSH
54243: LD_INT 3
54245: PUSH
54246: LD_INT 6
54248: PUSH
54249: LD_INT 36
54251: PUSH
54252: LD_INT 4
54254: PUSH
54255: LD_INT 5
54257: PUSH
54258: LD_INT 31
54260: PUSH
54261: LD_INT 32
54263: PUSH
54264: LD_INT 33
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: IN
54280: NOT
54281: PUSH
54282: LD_VAR 0 6
54286: PUSH
54287: LD_INT 1
54289: EQUAL
54290: AND
54291: OR
54292: PUSH
54293: LD_VAR 0 1
54297: PUSH
54298: LD_INT 2
54300: PUSH
54301: LD_INT 3
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: IN
54308: NOT
54309: PUSH
54310: LD_VAR 0 6
54314: PUSH
54315: LD_INT 2
54317: EQUAL
54318: AND
54319: OR
54320: IFFALSE 54330
// mode = 0 ;
54322: LD_ADDR_VAR 0 6
54326: PUSH
54327: LD_INT 0
54329: ST_TO_ADDR
// case mode of 0 :
54330: LD_VAR 0 6
54334: PUSH
54335: LD_INT 0
54337: DOUBLE
54338: EQUAL
54339: IFTRUE 54343
54341: GO 65796
54343: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54344: LD_ADDR_VAR 0 11
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: LD_INT 2
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: LD_INT 2
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: LD_INT 2
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: LD_INT 2
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: LD_INT 3
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 3
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54537: LD_ADDR_VAR 0 12
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 2
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 3
54694: NEG
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 3
54705: NEG
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54733: LD_ADDR_VAR 0 13
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: LD_INT 2
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: LD_INT 2
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 2
54856: NEG
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: NEG
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: LD_INT 3
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 3
54892: NEG
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 3
54904: NEG
54905: PUSH
54906: LD_INT 3
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54932: LD_ADDR_VAR 0 14
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: LD_INT 2
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: LD_INT 3
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: LD_INT 3
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: LD_INT 2
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55128: LD_ADDR_VAR 0 15
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 2
55251: NEG
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 2
55262: NEG
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 3
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 3
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55321: LD_ADDR_VAR 0 16
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: LD_INT 1
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: LD_INT 2
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: LD_INT 2
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 2
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 2
55444: NEG
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: LD_INT 2
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 3
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 3
55478: PUSH
55479: LD_INT 3
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: LD_INT 3
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55514: LD_ADDR_VAR 0 17
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: LD_INT 2
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: LD_INT 2
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 2
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: LD_INT 2
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 2
55713: NEG
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55744: LD_ADDR_VAR 0 18
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: LD_INT 2
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 2
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 2
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 2
55920: NEG
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 2
55943: NEG
55944: PUSH
55945: LD_INT 2
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55974: LD_ADDR_VAR 0 19
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: LD_INT 1
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: LD_INT 2
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: LD_INT 2
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 2
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 2
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: PUSH
56110: LD_INT 2
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 2
56150: NEG
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 2
56161: NEG
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 2
56173: NEG
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56204: LD_ADDR_VAR 0 20
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: LD_INT 2
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: LD_INT 2
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 2
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 2
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 2
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: LD_INT 2
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: LD_INT 2
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 2
56380: NEG
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 2
56391: NEG
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 2
56403: NEG
56404: PUSH
56405: LD_INT 2
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56434: LD_ADDR_VAR 0 21
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: LD_INT 2
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: LD_INT 2
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: LD_INT 1
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: LD_INT 0
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 2
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: LD_INT 2
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 2
56610: NEG
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: NEG
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 2
56633: NEG
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56664: LD_ADDR_VAR 0 22
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: LD_INT 2
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: LD_INT 2
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 2
56789: PUSH
56790: LD_INT 1
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: LD_INT 2
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: LD_INT 2
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 2
56840: NEG
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 2
56851: NEG
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: LD_INT 2
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56894: LD_ADDR_VAR 0 23
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 2
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 2
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 2
57029: PUSH
57030: LD_INT 2
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 2
57081: NEG
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 2
57093: NEG
57094: PUSH
57095: LD_INT 2
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 2
57105: NEG
57106: PUSH
57107: LD_INT 3
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: LD_INT 3
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: LD_INT 2
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57174: LD_ADDR_VAR 0 24
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: LD_INT 2
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: LD_INT 2
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 2
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 2
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: LD_INT 2
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 2
57350: NEG
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 2
57361: NEG
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 2
57373: NEG
57374: PUSH
57375: LD_INT 2
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: LD_INT 2
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 3
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 3
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57450: LD_ADDR_VAR 0 25
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: LD_INT 2
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: LD_INT 2
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 2
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: LD_INT 2
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: NEG
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 2
57637: NEG
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 2
57649: NEG
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 3
57661: PUSH
57662: LD_INT 1
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 3
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: LD_INT 3
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: LD_INT 3
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57724: LD_ADDR_VAR 0 26
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: LD_INT 1
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: LD_INT 2
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: LD_INT 2
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 2
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 2
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 2
57859: PUSH
57860: LD_INT 2
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: LD_INT 2
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: LD_INT 2
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 2
57900: NEG
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 2
57911: NEG
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 2
57923: NEG
57924: PUSH
57925: LD_INT 2
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 2
57935: PUSH
57936: LD_INT 3
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: LD_INT 3
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: LD_INT 2
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 2
57966: NEG
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58000: LD_ADDR_VAR 0 27
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: LD_INT 1
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: LD_INT 2
58085: NEG
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: LD_INT 2
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 2
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 2
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 2
58135: PUSH
58136: LD_INT 2
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: LD_INT 2
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: LD_INT 2
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 1
58165: NEG
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 2
58176: NEG
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 2
58187: NEG
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 2
58199: NEG
58200: PUSH
58201: LD_INT 2
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 2
58222: NEG
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 3
58233: NEG
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 3
58245: NEG
58246: PUSH
58247: LD_INT 2
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58280: LD_ADDR_VAR 0 28
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: LD_INT 0
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: LD_INT 1
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 1
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 1
58338: NEG
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 1
58361: NEG
58362: PUSH
58363: LD_INT 2
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 2
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 2
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: LD_INT 2
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: LD_INT 2
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: LD_INT 2
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 2
58456: NEG
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 2
58467: NEG
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 2
58479: NEG
58480: PUSH
58481: LD_INT 2
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: NEG
58492: PUSH
58493: LD_INT 3
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: LD_INT 3
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 3
58515: NEG
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 3
58527: NEG
58528: PUSH
58529: LD_INT 2
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58562: LD_ADDR_VAR 0 29
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: LD_INT 1
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: NEG
58644: PUSH
58645: LD_INT 2
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 2
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: LD_INT 2
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 2
58728: NEG
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 2
58740: NEG
58741: PUSH
58742: LD_INT 2
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 2
58752: NEG
58753: PUSH
58754: LD_INT 3
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 2
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 3
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: LD_INT 3
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: LD_INT 2
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 3
58806: NEG
58807: PUSH
58808: LD_INT 2
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58841: LD_ADDR_VAR 0 30
58845: PUSH
58846: LD_INT 0
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 1
58922: NEG
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 2
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 2
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 2
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 2
58976: PUSH
58977: LD_INT 2
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: LD_INT 2
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: LD_INT 1
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 2
59007: NEG
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 2
59018: NEG
59019: PUSH
59020: LD_INT 1
59022: NEG
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: NEG
59031: PUSH
59032: LD_INT 3
59034: NEG
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 3
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: LD_INT 3
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: NEG
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 3
59084: NEG
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59119: LD_ADDR_VAR 0 31
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 1
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: NEG
59201: PUSH
59202: LD_INT 2
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: LD_INT 1
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 2
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 2
59233: PUSH
59234: LD_INT 1
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 2
59243: PUSH
59244: LD_INT 2
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: LD_INT 2
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 0
59263: PUSH
59264: LD_INT 2
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: NEG
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 2
59296: NEG
59297: PUSH
59298: LD_INT 2
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 2
59308: NEG
59309: PUSH
59310: LD_INT 3
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 2
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 3
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: LD_INT 3
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: LD_INT 2
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 3
59362: NEG
59363: PUSH
59364: LD_INT 2
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59397: LD_ADDR_VAR 0 32
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: LD_INT 1
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: LD_INT 2
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: LD_INT 2
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 2
59512: PUSH
59513: LD_INT 1
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: LD_INT 2
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: LD_INT 2
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: LD_INT 2
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: LD_INT 1
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 2
59563: NEG
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 2
59574: NEG
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: LD_INT 3
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 3
59609: PUSH
59610: LD_INT 2
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 2
59619: PUSH
59620: LD_INT 3
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 2
59629: NEG
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 3
59640: NEG
59641: PUSH
59642: LD_INT 1
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59675: LD_ADDR_VAR 0 33
59679: PUSH
59680: LD_INT 0
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: LD_INT 1
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 1
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 1
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 1
59733: NEG
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 1
59756: NEG
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 2
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 2
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: LD_INT 2
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: LD_INT 2
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 1
59819: NEG
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 2
59830: NEG
59831: PUSH
59832: LD_INT 0
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: NEG
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 2
59853: NEG
59854: PUSH
59855: LD_INT 2
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 2
59865: NEG
59866: PUSH
59867: LD_INT 3
59869: NEG
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 2
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 3
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 1
59898: PUSH
59899: LD_INT 3
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: LD_INT 2
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 3
59919: NEG
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59954: LD_ADDR_VAR 0 34
59958: PUSH
59959: LD_INT 0
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 0
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 1
60012: NEG
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: LD_INT 2
60039: NEG
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: LD_INT 2
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: LD_INT 1
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 2
60069: PUSH
60070: LD_INT 1
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 2
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 1
60089: PUSH
60090: LD_INT 2
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: LD_INT 1
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 2
60110: NEG
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: LD_INT 1
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 2
60133: NEG
60134: PUSH
60135: LD_INT 2
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: LD_INT 3
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: LD_INT 2
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 3
60168: PUSH
60169: LD_INT 2
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 2
60178: PUSH
60179: LD_INT 3
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 2
60188: NEG
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 3
60199: NEG
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60234: LD_ADDR_VAR 0 35
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 1
60303: NEG
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: PUSH
60316: LD_INT 1
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 2
60325: NEG
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60346: LD_ADDR_VAR 0 36
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 1
60384: PUSH
60385: LD_INT 1
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 0
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 1
60404: NEG
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 1
60415: NEG
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: LD_INT 2
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60458: LD_ADDR_VAR 0 37
60462: PUSH
60463: LD_INT 0
60465: PUSH
60466: LD_INT 0
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: NEG
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: PUSH
60540: LD_INT 1
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: LD_INT 1
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60570: LD_ADDR_VAR 0 38
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: LD_INT 1
60590: NEG
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 1
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: LD_INT 1
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 2
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 2
60661: NEG
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60682: LD_ADDR_VAR 0 39
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: LD_INT 1
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: LD_INT 1
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: LD_INT 2
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: PUSH
60776: LD_INT 2
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60794: LD_ADDR_VAR 0 40
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: LD_INT 0
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 0
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: LD_INT 1
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: LD_INT 1
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: NEG
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 1
60875: PUSH
60876: LD_INT 1
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 1
60886: NEG
60887: PUSH
60888: LD_INT 1
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60906: LD_ADDR_VAR 0 41
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 1
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 1
60975: NEG
60976: PUSH
60977: LD_INT 1
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: NEG
60988: PUSH
60989: LD_INT 2
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 2
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 2
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 2
61030: PUSH
61031: LD_INT 2
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 2
61061: NEG
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 2
61072: NEG
61073: PUSH
61074: LD_INT 1
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 2
61084: NEG
61085: PUSH
61086: LD_INT 2
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 2
61096: NEG
61097: PUSH
61098: LD_INT 3
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 3
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 3
61129: PUSH
61130: LD_INT 1
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 3
61139: PUSH
61140: LD_INT 2
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 3
61149: PUSH
61150: LD_INT 3
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 2
61159: PUSH
61160: LD_INT 3
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 2
61169: NEG
61170: PUSH
61171: LD_INT 1
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 3
61180: NEG
61181: PUSH
61182: LD_INT 0
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 3
61191: NEG
61192: PUSH
61193: LD_INT 1
61195: NEG
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 3
61203: NEG
61204: PUSH
61205: LD_INT 2
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 3
61215: NEG
61216: PUSH
61217: LD_INT 3
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61256: LD_ADDR_VAR 0 42
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: LD_INT 1
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: LD_INT 0
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 1
61325: NEG
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 1
61337: NEG
61338: PUSH
61339: LD_INT 2
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: LD_INT 2
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 2
61371: PUSH
61372: LD_INT 1
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 2
61381: PUSH
61382: LD_INT 2
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 1
61391: PUSH
61392: LD_INT 2
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: LD_INT 2
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: LD_INT 1
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: NEG
61423: PUSH
61424: LD_INT 1
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 2
61434: NEG
61435: PUSH
61436: LD_INT 2
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 2
61446: NEG
61447: PUSH
61448: LD_INT 3
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: LD_INT 3
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: LD_INT 3
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: LD_INT 2
61484: NEG
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 3
61492: PUSH
61493: LD_INT 2
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 3
61502: PUSH
61503: LD_INT 3
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 2
61512: PUSH
61513: LD_INT 3
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: LD_INT 3
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: LD_INT 3
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: LD_INT 2
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 3
61553: NEG
61554: PUSH
61555: LD_INT 2
61557: NEG
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 3
61565: NEG
61566: PUSH
61567: LD_INT 3
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61606: LD_ADDR_VAR 0 43
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: LD_INT 1
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: LD_INT 1
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: LD_INT 1
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 1
61664: NEG
61665: PUSH
61666: LD_INT 0
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 1
61675: NEG
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 1
61687: NEG
61688: PUSH
61689: LD_INT 2
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: LD_INT 2
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 2
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 2
61731: PUSH
61732: LD_INT 1
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 1
61741: PUSH
61742: LD_INT 2
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: LD_INT 2
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: LD_INT 1
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 2
61772: NEG
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 2
61783: NEG
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 1
61795: NEG
61796: PUSH
61797: LD_INT 3
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: LD_INT 3
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: LD_INT 2
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 2
61829: PUSH
61830: LD_INT 1
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 3
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 3
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: LD_INT 3
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: LD_INT 3
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: LD_INT 2
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 2
61891: NEG
61892: PUSH
61893: LD_INT 1
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 3
61902: NEG
61903: PUSH
61904: LD_INT 0
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 3
61913: NEG
61914: PUSH
61915: LD_INT 1
61917: NEG
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61954: LD_ADDR_VAR 0 44
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: LD_INT 1
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: NEG
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: NEG
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 1
62035: NEG
62036: PUSH
62037: LD_INT 2
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: LD_INT 1
62050: NEG
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 2
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 2
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 2
62078: PUSH
62079: LD_INT 2
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 1
62088: PUSH
62089: LD_INT 2
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: LD_INT 1
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 2
62109: NEG
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 2
62120: NEG
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 2
62132: NEG
62133: PUSH
62134: LD_INT 2
62136: NEG
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 2
62144: NEG
62145: PUSH
62146: LD_INT 3
62148: NEG
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 2
62156: PUSH
62157: LD_INT 1
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 3
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 3
62177: PUSH
62178: LD_INT 1
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 3
62187: PUSH
62188: LD_INT 2
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 3
62197: PUSH
62198: LD_INT 3
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 2
62207: PUSH
62208: LD_INT 3
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 2
62217: NEG
62218: PUSH
62219: LD_INT 1
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 3
62228: NEG
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 3
62239: NEG
62240: PUSH
62241: LD_INT 1
62243: NEG
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 3
62251: NEG
62252: PUSH
62253: LD_INT 2
62255: NEG
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 3
62263: NEG
62264: PUSH
62265: LD_INT 3
62267: NEG
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62304: LD_ADDR_VAR 0 45
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: LD_INT 0
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: LD_INT 1
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: LD_INT 1
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: LD_INT 1
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 1
62362: NEG
62363: PUSH
62364: LD_INT 0
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 1
62373: NEG
62374: PUSH
62375: LD_INT 1
62377: NEG
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 1
62385: NEG
62386: PUSH
62387: LD_INT 2
62389: NEG
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: LD_INT 2
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: LD_INT 1
62411: NEG
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 2
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 2
62429: PUSH
62430: LD_INT 2
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 1
62439: PUSH
62440: LD_INT 2
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 0
62449: PUSH
62450: LD_INT 2
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 1
62459: NEG
62460: PUSH
62461: LD_INT 1
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 2
62470: NEG
62471: PUSH
62472: LD_INT 1
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 2
62482: NEG
62483: PUSH
62484: LD_INT 2
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 2
62494: NEG
62495: PUSH
62496: LD_INT 3
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 1
62506: NEG
62507: PUSH
62508: LD_INT 3
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 0
62518: PUSH
62519: LD_INT 3
62521: NEG
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 1
62529: PUSH
62530: LD_INT 2
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 3
62540: PUSH
62541: LD_INT 2
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 3
62550: PUSH
62551: LD_INT 3
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 2
62560: PUSH
62561: LD_INT 3
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 1
62570: PUSH
62571: LD_INT 3
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 0
62580: PUSH
62581: LD_INT 3
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: LD_INT 2
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 3
62601: NEG
62602: PUSH
62603: LD_INT 2
62605: NEG
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 3
62613: NEG
62614: PUSH
62615: LD_INT 3
62617: NEG
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62654: LD_ADDR_VAR 0 46
62658: PUSH
62659: LD_INT 0
62661: PUSH
62662: LD_INT 0
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: LD_INT 1
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 1
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 1
62712: NEG
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: NEG
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 1
62735: NEG
62736: PUSH
62737: LD_INT 2
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 0
62747: PUSH
62748: LD_INT 2
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 2
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 2
62779: PUSH
62780: LD_INT 1
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 1
62789: PUSH
62790: LD_INT 2
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: LD_INT 2
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 1
62809: NEG
62810: PUSH
62811: LD_INT 1
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 2
62820: NEG
62821: PUSH
62822: LD_INT 0
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 2
62831: NEG
62832: PUSH
62833: LD_INT 1
62835: NEG
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 1
62843: NEG
62844: PUSH
62845: LD_INT 3
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 0
62855: PUSH
62856: LD_INT 3
62858: NEG
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 1
62866: PUSH
62867: LD_INT 2
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 2
62877: PUSH
62878: LD_INT 1
62880: NEG
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 3
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 3
62898: PUSH
62899: LD_INT 1
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 1
62908: PUSH
62909: LD_INT 3
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 0
62918: PUSH
62919: LD_INT 3
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 1
62928: NEG
62929: PUSH
62930: LD_INT 2
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 2
62939: NEG
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 3
62950: NEG
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 3
62961: NEG
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63002: LD_ADDR_VAR 0 47
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: LD_INT 1
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 1
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: LD_INT 1
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 0
63050: PUSH
63051: LD_INT 1
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 1
63060: NEG
63061: PUSH
63062: LD_INT 0
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 1
63071: NEG
63072: PUSH
63073: LD_INT 1
63075: NEG
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 1
63083: NEG
63084: PUSH
63085: LD_INT 2
63087: NEG
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 0
63095: PUSH
63096: LD_INT 2
63098: NEG
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: LD_INT 1
63109: NEG
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 2
63117: NEG
63118: PUSH
63119: LD_INT 1
63121: NEG
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 2
63129: NEG
63130: PUSH
63131: LD_INT 2
63133: NEG
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63153: LD_ADDR_VAR 0 48
63157: PUSH
63158: LD_INT 0
63160: PUSH
63161: LD_INT 0
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: LD_INT 0
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 1
63191: PUSH
63192: LD_INT 1
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: LD_INT 1
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: NEG
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 1
63222: NEG
63223: PUSH
63224: LD_INT 1
63226: NEG
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 1
63234: NEG
63235: PUSH
63236: LD_INT 2
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 0
63246: PUSH
63247: LD_INT 2
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 1
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 2
63268: PUSH
63269: LD_INT 0
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 2
63278: PUSH
63279: LD_INT 1
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63300: LD_ADDR_VAR 0 49
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 0
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 1
63338: PUSH
63339: LD_INT 1
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 0
63348: PUSH
63349: LD_INT 1
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: LD_INT 0
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 1
63369: NEG
63370: PUSH
63371: LD_INT 1
63373: NEG
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 1
63381: PUSH
63382: LD_INT 1
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 2
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 2
63402: PUSH
63403: LD_INT 1
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 2
63412: PUSH
63413: LD_INT 2
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 1
63422: PUSH
63423: LD_INT 2
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63444: LD_ADDR_VAR 0 50
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: LD_INT 1
63464: NEG
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 1
63472: PUSH
63473: LD_INT 0
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 1
63482: PUSH
63483: LD_INT 1
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: LD_INT 1
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 1
63502: NEG
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: PUSH
63515: LD_INT 1
63517: NEG
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 2
63525: PUSH
63526: LD_INT 1
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 2
63535: PUSH
63536: LD_INT 2
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: LD_INT 2
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: NEG
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63588: LD_ADDR_VAR 0 51
63592: PUSH
63593: LD_INT 0
63595: PUSH
63596: LD_INT 0
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: LD_INT 1
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 1
63616: PUSH
63617: LD_INT 0
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: LD_INT 1
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 1
63646: NEG
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 1
63657: NEG
63658: PUSH
63659: LD_INT 1
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 1
63669: PUSH
63670: LD_INT 2
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 0
63679: PUSH
63680: LD_INT 2
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 1
63689: NEG
63690: PUSH
63691: LD_INT 1
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 2
63700: NEG
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 2
63711: NEG
63712: PUSH
63713: LD_INT 1
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63735: LD_ADDR_VAR 0 52
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: LD_INT 0
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 0
63752: PUSH
63753: LD_INT 1
63755: NEG
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 1
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: LD_INT 1
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: LD_INT 1
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 1
63793: NEG
63794: PUSH
63795: LD_INT 0
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 1
63804: NEG
63805: PUSH
63806: LD_INT 1
63808: NEG
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 1
63816: NEG
63817: PUSH
63818: LD_INT 2
63820: NEG
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: LD_INT 1
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 2
63839: NEG
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 2
63850: NEG
63851: PUSH
63852: LD_INT 1
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 2
63862: NEG
63863: PUSH
63864: LD_INT 2
63866: NEG
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63886: LD_ADDR_VAR 0 53
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: LD_INT 0
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 0
63903: PUSH
63904: LD_INT 1
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 1
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 1
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 0
63934: PUSH
63935: LD_INT 1
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 1
63944: NEG
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 1
63955: NEG
63956: PUSH
63957: LD_INT 1
63959: NEG
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 1
63967: NEG
63968: PUSH
63969: LD_INT 2
63971: NEG
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: LD_INT 2
63982: NEG
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: LD_INT 1
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 2
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 2
64011: PUSH
64012: LD_INT 1
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 2
64021: PUSH
64022: LD_INT 2
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 1
64031: PUSH
64032: LD_INT 2
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 0
64041: PUSH
64042: LD_INT 2
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 1
64051: NEG
64052: PUSH
64053: LD_INT 1
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 2
64062: NEG
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 2
64073: NEG
64074: PUSH
64075: LD_INT 1
64077: NEG
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 2
64085: NEG
64086: PUSH
64087: LD_INT 2
64089: NEG
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64116: LD_ADDR_VAR 0 54
64120: PUSH
64121: LD_INT 0
64123: PUSH
64124: LD_INT 0
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 0
64133: PUSH
64134: LD_INT 1
64136: NEG
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 1
64144: PUSH
64145: LD_INT 0
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: LD_INT 1
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: LD_INT 1
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 1
64174: NEG
64175: PUSH
64176: LD_INT 0
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 1
64185: NEG
64186: PUSH
64187: LD_INT 1
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 1
64197: NEG
64198: PUSH
64199: LD_INT 2
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 0
64209: PUSH
64210: LD_INT 2
64212: NEG
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: LD_INT 1
64223: NEG
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 2
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 2
64241: PUSH
64242: LD_INT 1
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 2
64251: PUSH
64252: LD_INT 2
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 1
64261: PUSH
64262: LD_INT 2
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 0
64271: PUSH
64272: LD_INT 2
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 1
64281: NEG
64282: PUSH
64283: LD_INT 1
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 2
64292: NEG
64293: PUSH
64294: LD_INT 0
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 2
64303: NEG
64304: PUSH
64305: LD_INT 1
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 2
64315: NEG
64316: PUSH
64317: LD_INT 2
64319: NEG
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64346: LD_ADDR_VAR 0 55
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: LD_INT 0
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 0
64363: PUSH
64364: LD_INT 1
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 1
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: LD_INT 1
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 0
64394: PUSH
64395: LD_INT 1
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 1
64404: NEG
64405: PUSH
64406: LD_INT 0
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 1
64415: NEG
64416: PUSH
64417: LD_INT 1
64419: NEG
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 1
64427: NEG
64428: PUSH
64429: LD_INT 2
64431: NEG
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: LD_INT 2
64442: NEG
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 2
64461: PUSH
64462: LD_INT 0
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 2
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 2
64481: PUSH
64482: LD_INT 2
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 1
64491: PUSH
64492: LD_INT 2
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 0
64501: PUSH
64502: LD_INT 2
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 1
64511: NEG
64512: PUSH
64513: LD_INT 1
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 2
64522: NEG
64523: PUSH
64524: LD_INT 0
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 2
64533: NEG
64534: PUSH
64535: LD_INT 1
64537: NEG
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 2
64545: NEG
64546: PUSH
64547: LD_INT 2
64549: NEG
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64576: LD_ADDR_VAR 0 56
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: LD_INT 0
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: LD_INT 1
64596: NEG
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 1
64604: PUSH
64605: LD_INT 0
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 1
64614: PUSH
64615: LD_INT 1
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 0
64624: PUSH
64625: LD_INT 1
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 1
64634: NEG
64635: PUSH
64636: LD_INT 0
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 1
64645: NEG
64646: PUSH
64647: LD_INT 1
64649: NEG
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 1
64657: NEG
64658: PUSH
64659: LD_INT 2
64661: NEG
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 0
64669: PUSH
64670: LD_INT 2
64672: NEG
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 1
64680: PUSH
64681: LD_INT 1
64683: NEG
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 2
64691: PUSH
64692: LD_INT 0
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 2
64701: PUSH
64702: LD_INT 1
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 2
64711: PUSH
64712: LD_INT 2
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 1
64721: PUSH
64722: LD_INT 2
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 0
64731: PUSH
64732: LD_INT 2
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 1
64741: NEG
64742: PUSH
64743: LD_INT 1
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 2
64752: NEG
64753: PUSH
64754: LD_INT 0
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 2
64763: NEG
64764: PUSH
64765: LD_INT 1
64767: NEG
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 2
64775: NEG
64776: PUSH
64777: LD_INT 2
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64806: LD_ADDR_VAR 0 57
64810: PUSH
64811: LD_INT 0
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 0
64823: PUSH
64824: LD_INT 1
64826: NEG
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 1
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: LD_INT 1
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 0
64854: PUSH
64855: LD_INT 1
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 1
64864: NEG
64865: PUSH
64866: LD_INT 0
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: LD_INT 1
64879: NEG
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 1
64887: NEG
64888: PUSH
64889: LD_INT 2
64891: NEG
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: LD_INT 2
64902: NEG
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 1
64910: PUSH
64911: LD_INT 1
64913: NEG
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 2
64921: PUSH
64922: LD_INT 0
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 2
64931: PUSH
64932: LD_INT 1
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 2
64941: PUSH
64942: LD_INT 2
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 1
64951: PUSH
64952: LD_INT 2
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: LD_INT 2
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 1
64971: NEG
64972: PUSH
64973: LD_INT 1
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 2
64982: NEG
64983: PUSH
64984: LD_INT 0
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 2
64993: NEG
64994: PUSH
64995: LD_INT 1
64997: NEG
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 2
65005: NEG
65006: PUSH
65007: LD_INT 2
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65036: LD_ADDR_VAR 0 58
65040: PUSH
65041: LD_INT 0
65043: PUSH
65044: LD_INT 0
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 0
65053: PUSH
65054: LD_INT 1
65056: NEG
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 1
65064: PUSH
65065: LD_INT 0
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 1
65074: PUSH
65075: LD_INT 1
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: LD_INT 1
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 1
65094: NEG
65095: PUSH
65096: LD_INT 0
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 1
65105: NEG
65106: PUSH
65107: LD_INT 1
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 1
65117: NEG
65118: PUSH
65119: LD_INT 2
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 0
65129: PUSH
65130: LD_INT 2
65132: NEG
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 1
65140: PUSH
65141: LD_INT 1
65143: NEG
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 2
65151: PUSH
65152: LD_INT 0
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 2
65161: PUSH
65162: LD_INT 1
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 2
65171: PUSH
65172: LD_INT 2
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 1
65181: PUSH
65182: LD_INT 2
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 0
65191: PUSH
65192: LD_INT 2
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 1
65201: NEG
65202: PUSH
65203: LD_INT 1
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 2
65212: NEG
65213: PUSH
65214: LD_INT 0
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 2
65223: NEG
65224: PUSH
65225: LD_INT 1
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 2
65235: NEG
65236: PUSH
65237: LD_INT 2
65239: NEG
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65266: LD_ADDR_VAR 0 59
65270: PUSH
65271: LD_INT 0
65273: PUSH
65274: LD_INT 0
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 0
65283: PUSH
65284: LD_INT 1
65286: NEG
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 1
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 1
65304: PUSH
65305: LD_INT 1
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 0
65314: PUSH
65315: LD_INT 1
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 1
65324: NEG
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 1
65335: NEG
65336: PUSH
65337: LD_INT 1
65339: NEG
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65354: LD_ADDR_VAR 0 60
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: LD_INT 0
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 0
65371: PUSH
65372: LD_INT 1
65374: NEG
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 1
65392: PUSH
65393: LD_INT 1
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 0
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 1
65412: NEG
65413: PUSH
65414: LD_INT 0
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 1
65423: NEG
65424: PUSH
65425: LD_INT 1
65427: NEG
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65442: LD_ADDR_VAR 0 61
65446: PUSH
65447: LD_INT 0
65449: PUSH
65450: LD_INT 0
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 0
65459: PUSH
65460: LD_INT 1
65462: NEG
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 1
65470: PUSH
65471: LD_INT 0
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 1
65480: PUSH
65481: LD_INT 1
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 0
65490: PUSH
65491: LD_INT 1
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 1
65500: NEG
65501: PUSH
65502: LD_INT 0
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 1
65511: NEG
65512: PUSH
65513: LD_INT 1
65515: NEG
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65530: LD_ADDR_VAR 0 62
65534: PUSH
65535: LD_INT 0
65537: PUSH
65538: LD_INT 0
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 0
65547: PUSH
65548: LD_INT 1
65550: NEG
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 1
65558: PUSH
65559: LD_INT 0
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 1
65568: PUSH
65569: LD_INT 1
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 0
65578: PUSH
65579: LD_INT 1
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 1
65588: NEG
65589: PUSH
65590: LD_INT 0
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 1
65599: NEG
65600: PUSH
65601: LD_INT 1
65603: NEG
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65618: LD_ADDR_VAR 0 63
65622: PUSH
65623: LD_INT 0
65625: PUSH
65626: LD_INT 0
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 0
65635: PUSH
65636: LD_INT 1
65638: NEG
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 1
65646: PUSH
65647: LD_INT 0
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 1
65656: PUSH
65657: LD_INT 1
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 0
65666: PUSH
65667: LD_INT 1
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 1
65676: NEG
65677: PUSH
65678: LD_INT 0
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 1
65687: NEG
65688: PUSH
65689: LD_INT 1
65691: NEG
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65706: LD_ADDR_VAR 0 64
65710: PUSH
65711: LD_INT 0
65713: PUSH
65714: LD_INT 0
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 0
65723: PUSH
65724: LD_INT 1
65726: NEG
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 1
65734: PUSH
65735: LD_INT 0
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 1
65744: PUSH
65745: LD_INT 1
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 0
65754: PUSH
65755: LD_INT 1
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 1
65764: NEG
65765: PUSH
65766: LD_INT 0
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 1
65775: NEG
65776: PUSH
65777: LD_INT 1
65779: NEG
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: ST_TO_ADDR
// end ; 1 :
65794: GO 71691
65796: LD_INT 1
65798: DOUBLE
65799: EQUAL
65800: IFTRUE 65804
65802: GO 68427
65804: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65805: LD_ADDR_VAR 0 11
65809: PUSH
65810: LD_INT 1
65812: NEG
65813: PUSH
65814: LD_INT 3
65816: NEG
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 0
65824: PUSH
65825: LD_INT 3
65827: NEG
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 1
65835: PUSH
65836: LD_INT 2
65838: NEG
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: LIST
65848: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65849: LD_ADDR_VAR 0 12
65853: PUSH
65854: LD_INT 2
65856: PUSH
65857: LD_INT 1
65859: NEG
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 3
65867: PUSH
65868: LD_INT 0
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 3
65877: PUSH
65878: LD_INT 1
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: LIST
65889: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65890: LD_ADDR_VAR 0 13
65894: PUSH
65895: LD_INT 3
65897: PUSH
65898: LD_INT 2
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 3
65907: PUSH
65908: LD_INT 3
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 2
65917: PUSH
65918: LD_INT 3
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: LIST
65929: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65930: LD_ADDR_VAR 0 14
65934: PUSH
65935: LD_INT 1
65937: PUSH
65938: LD_INT 3
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 0
65947: PUSH
65948: LD_INT 3
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 1
65957: NEG
65958: PUSH
65959: LD_INT 2
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: LIST
65970: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65971: LD_ADDR_VAR 0 15
65975: PUSH
65976: LD_INT 2
65978: NEG
65979: PUSH
65980: LD_INT 1
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 3
65989: NEG
65990: PUSH
65991: LD_INT 0
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 3
66000: NEG
66001: PUSH
66002: LD_INT 1
66004: NEG
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: LIST
66014: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66015: LD_ADDR_VAR 0 16
66019: PUSH
66020: LD_INT 2
66022: NEG
66023: PUSH
66024: LD_INT 3
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 3
66034: NEG
66035: PUSH
66036: LD_INT 2
66038: NEG
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 3
66046: NEG
66047: PUSH
66048: LD_INT 3
66050: NEG
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: LIST
66060: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66061: LD_ADDR_VAR 0 17
66065: PUSH
66066: LD_INT 1
66068: NEG
66069: PUSH
66070: LD_INT 3
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 0
66080: PUSH
66081: LD_INT 3
66083: NEG
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 1
66091: PUSH
66092: LD_INT 2
66094: NEG
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: LIST
66104: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66105: LD_ADDR_VAR 0 18
66109: PUSH
66110: LD_INT 2
66112: PUSH
66113: LD_INT 1
66115: NEG
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 3
66123: PUSH
66124: LD_INT 0
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 3
66133: PUSH
66134: LD_INT 1
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: LIST
66145: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66146: LD_ADDR_VAR 0 19
66150: PUSH
66151: LD_INT 3
66153: PUSH
66154: LD_INT 2
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 3
66163: PUSH
66164: LD_INT 3
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 2
66173: PUSH
66174: LD_INT 3
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: LIST
66185: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66186: LD_ADDR_VAR 0 20
66190: PUSH
66191: LD_INT 1
66193: PUSH
66194: LD_INT 3
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 0
66203: PUSH
66204: LD_INT 3
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 1
66213: NEG
66214: PUSH
66215: LD_INT 2
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: LIST
66226: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66227: LD_ADDR_VAR 0 21
66231: PUSH
66232: LD_INT 2
66234: NEG
66235: PUSH
66236: LD_INT 1
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 3
66245: NEG
66246: PUSH
66247: LD_INT 0
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 3
66256: NEG
66257: PUSH
66258: LD_INT 1
66260: NEG
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: LIST
66270: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66271: LD_ADDR_VAR 0 22
66275: PUSH
66276: LD_INT 2
66278: NEG
66279: PUSH
66280: LD_INT 3
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 3
66290: NEG
66291: PUSH
66292: LD_INT 2
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 3
66302: NEG
66303: PUSH
66304: LD_INT 3
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: LIST
66316: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66317: LD_ADDR_VAR 0 23
66321: PUSH
66322: LD_INT 0
66324: PUSH
66325: LD_INT 3
66327: NEG
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 1
66335: NEG
66336: PUSH
66337: LD_INT 4
66339: NEG
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 1
66347: PUSH
66348: LD_INT 3
66350: NEG
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: LIST
66360: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66361: LD_ADDR_VAR 0 24
66365: PUSH
66366: LD_INT 3
66368: PUSH
66369: LD_INT 0
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 3
66378: PUSH
66379: LD_INT 1
66381: NEG
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 4
66389: PUSH
66390: LD_INT 1
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: LIST
66401: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66402: LD_ADDR_VAR 0 25
66406: PUSH
66407: LD_INT 3
66409: PUSH
66410: LD_INT 3
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 4
66419: PUSH
66420: LD_INT 3
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 3
66429: PUSH
66430: LD_INT 4
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: LIST
66441: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66442: LD_ADDR_VAR 0 26
66446: PUSH
66447: LD_INT 0
66449: PUSH
66450: LD_INT 3
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 1
66459: PUSH
66460: LD_INT 4
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 1
66469: NEG
66470: PUSH
66471: LD_INT 3
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: LIST
66482: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66483: LD_ADDR_VAR 0 27
66487: PUSH
66488: LD_INT 3
66490: NEG
66491: PUSH
66492: LD_INT 0
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 3
66501: NEG
66502: PUSH
66503: LD_INT 1
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 4
66512: NEG
66513: PUSH
66514: LD_INT 1
66516: NEG
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: LIST
66526: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66527: LD_ADDR_VAR 0 28
66531: PUSH
66532: LD_INT 3
66534: NEG
66535: PUSH
66536: LD_INT 3
66538: NEG
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 3
66546: NEG
66547: PUSH
66548: LD_INT 4
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 4
66558: NEG
66559: PUSH
66560: LD_INT 3
66562: NEG
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: LIST
66572: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66573: LD_ADDR_VAR 0 29
66577: PUSH
66578: LD_INT 1
66580: NEG
66581: PUSH
66582: LD_INT 3
66584: NEG
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 0
66592: PUSH
66593: LD_INT 3
66595: NEG
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 1
66603: PUSH
66604: LD_INT 2
66606: NEG
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 1
66614: NEG
66615: PUSH
66616: LD_INT 4
66618: NEG
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 0
66626: PUSH
66627: LD_INT 4
66629: NEG
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 1
66637: PUSH
66638: LD_INT 3
66640: NEG
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 1
66648: NEG
66649: PUSH
66650: LD_INT 5
66652: NEG
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: LD_INT 5
66663: NEG
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 1
66671: PUSH
66672: LD_INT 4
66674: NEG
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 1
66682: NEG
66683: PUSH
66684: LD_INT 6
66686: NEG
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 0
66694: PUSH
66695: LD_INT 6
66697: NEG
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 1
66705: PUSH
66706: LD_INT 5
66708: NEG
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66728: LD_ADDR_VAR 0 30
66732: PUSH
66733: LD_INT 2
66735: PUSH
66736: LD_INT 1
66738: NEG
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 3
66746: PUSH
66747: LD_INT 0
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 3
66756: PUSH
66757: LD_INT 1
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 3
66766: PUSH
66767: LD_INT 1
66769: NEG
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 4
66777: PUSH
66778: LD_INT 0
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 4
66787: PUSH
66788: LD_INT 1
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 4
66797: PUSH
66798: LD_INT 1
66800: NEG
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 5
66808: PUSH
66809: LD_INT 0
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 5
66818: PUSH
66819: LD_INT 1
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 5
66828: PUSH
66829: LD_INT 1
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 6
66839: PUSH
66840: LD_INT 0
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 6
66849: PUSH
66850: LD_INT 1
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66871: LD_ADDR_VAR 0 31
66875: PUSH
66876: LD_INT 3
66878: PUSH
66879: LD_INT 2
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 3
66888: PUSH
66889: LD_INT 3
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 2
66898: PUSH
66899: LD_INT 3
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 4
66908: PUSH
66909: LD_INT 3
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 4
66918: PUSH
66919: LD_INT 4
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 3
66928: PUSH
66929: LD_INT 4
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 5
66938: PUSH
66939: LD_INT 4
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 5
66948: PUSH
66949: LD_INT 5
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 4
66958: PUSH
66959: LD_INT 5
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 6
66968: PUSH
66969: LD_INT 5
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 6
66978: PUSH
66979: LD_INT 6
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 5
66988: PUSH
66989: LD_INT 6
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67010: LD_ADDR_VAR 0 32
67014: PUSH
67015: LD_INT 1
67017: PUSH
67018: LD_INT 3
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 0
67027: PUSH
67028: LD_INT 3
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 1
67037: NEG
67038: PUSH
67039: LD_INT 2
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 1
67048: PUSH
67049: LD_INT 4
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 0
67058: PUSH
67059: LD_INT 4
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: LD_INT 1
67068: NEG
67069: PUSH
67070: LD_INT 3
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 1
67079: PUSH
67080: LD_INT 5
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 0
67089: PUSH
67090: LD_INT 5
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 1
67099: NEG
67100: PUSH
67101: LD_INT 4
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 1
67110: PUSH
67111: LD_INT 6
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 0
67120: PUSH
67121: LD_INT 6
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 1
67130: NEG
67131: PUSH
67132: LD_INT 5
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67153: LD_ADDR_VAR 0 33
67157: PUSH
67158: LD_INT 2
67160: NEG
67161: PUSH
67162: LD_INT 1
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 3
67171: NEG
67172: PUSH
67173: LD_INT 0
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 3
67182: NEG
67183: PUSH
67184: LD_INT 1
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 3
67194: NEG
67195: PUSH
67196: LD_INT 1
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 4
67205: NEG
67206: PUSH
67207: LD_INT 0
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 4
67216: NEG
67217: PUSH
67218: LD_INT 1
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 4
67228: NEG
67229: PUSH
67230: LD_INT 1
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 5
67239: NEG
67240: PUSH
67241: LD_INT 0
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 5
67250: NEG
67251: PUSH
67252: LD_INT 1
67254: NEG
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 5
67262: NEG
67263: PUSH
67264: LD_INT 1
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 6
67273: NEG
67274: PUSH
67275: LD_INT 0
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 6
67284: NEG
67285: PUSH
67286: LD_INT 1
67288: NEG
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67308: LD_ADDR_VAR 0 34
67312: PUSH
67313: LD_INT 2
67315: NEG
67316: PUSH
67317: LD_INT 3
67319: NEG
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 3
67327: NEG
67328: PUSH
67329: LD_INT 2
67331: NEG
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 3
67339: NEG
67340: PUSH
67341: LD_INT 3
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 3
67351: NEG
67352: PUSH
67353: LD_INT 4
67355: NEG
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 4
67363: NEG
67364: PUSH
67365: LD_INT 3
67367: NEG
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 4
67375: NEG
67376: PUSH
67377: LD_INT 4
67379: NEG
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 4
67387: NEG
67388: PUSH
67389: LD_INT 5
67391: NEG
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 5
67399: NEG
67400: PUSH
67401: LD_INT 4
67403: NEG
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 5
67411: NEG
67412: PUSH
67413: LD_INT 5
67415: NEG
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 5
67423: NEG
67424: PUSH
67425: LD_INT 6
67427: NEG
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 6
67435: NEG
67436: PUSH
67437: LD_INT 5
67439: NEG
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 6
67447: NEG
67448: PUSH
67449: LD_INT 6
67451: NEG
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67471: LD_ADDR_VAR 0 41
67475: PUSH
67476: LD_INT 0
67478: PUSH
67479: LD_INT 2
67481: NEG
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 1
67489: NEG
67490: PUSH
67491: LD_INT 3
67493: NEG
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 1
67501: PUSH
67502: LD_INT 2
67504: NEG
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: LIST
67514: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67515: LD_ADDR_VAR 0 42
67519: PUSH
67520: LD_INT 2
67522: PUSH
67523: LD_INT 0
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 2
67532: PUSH
67533: LD_INT 1
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 3
67543: PUSH
67544: LD_INT 1
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: LIST
67555: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67556: LD_ADDR_VAR 0 43
67560: PUSH
67561: LD_INT 2
67563: PUSH
67564: LD_INT 2
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 3
67573: PUSH
67574: LD_INT 2
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 2
67583: PUSH
67584: LD_INT 3
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: LIST
67595: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67596: LD_ADDR_VAR 0 44
67600: PUSH
67601: LD_INT 0
67603: PUSH
67604: LD_INT 2
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 1
67613: PUSH
67614: LD_INT 3
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 1
67623: NEG
67624: PUSH
67625: LD_INT 2
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: LIST
67636: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67637: LD_ADDR_VAR 0 45
67641: PUSH
67642: LD_INT 2
67644: NEG
67645: PUSH
67646: LD_INT 0
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 2
67655: NEG
67656: PUSH
67657: LD_INT 1
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 3
67666: NEG
67667: PUSH
67668: LD_INT 1
67670: NEG
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: LIST
67680: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67681: LD_ADDR_VAR 0 46
67685: PUSH
67686: LD_INT 2
67688: NEG
67689: PUSH
67690: LD_INT 2
67692: NEG
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 2
67700: NEG
67701: PUSH
67702: LD_INT 3
67704: NEG
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 3
67712: NEG
67713: PUSH
67714: LD_INT 2
67716: NEG
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: LIST
67726: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67727: LD_ADDR_VAR 0 47
67731: PUSH
67732: LD_INT 2
67734: NEG
67735: PUSH
67736: LD_INT 3
67738: NEG
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 1
67746: NEG
67747: PUSH
67748: LD_INT 3
67750: NEG
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67760: LD_ADDR_VAR 0 48
67764: PUSH
67765: LD_INT 1
67767: PUSH
67768: LD_INT 2
67770: NEG
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 2
67778: PUSH
67779: LD_INT 1
67781: NEG
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67791: LD_ADDR_VAR 0 49
67795: PUSH
67796: LD_INT 3
67798: PUSH
67799: LD_INT 1
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 3
67808: PUSH
67809: LD_INT 2
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67820: LD_ADDR_VAR 0 50
67824: PUSH
67825: LD_INT 2
67827: PUSH
67828: LD_INT 3
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 1
67837: PUSH
67838: LD_INT 3
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67849: LD_ADDR_VAR 0 51
67853: PUSH
67854: LD_INT 1
67856: NEG
67857: PUSH
67858: LD_INT 2
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 2
67867: NEG
67868: PUSH
67869: LD_INT 1
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67880: LD_ADDR_VAR 0 52
67884: PUSH
67885: LD_INT 3
67887: NEG
67888: PUSH
67889: LD_INT 1
67891: NEG
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 3
67899: NEG
67900: PUSH
67901: LD_INT 2
67903: NEG
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67913: LD_ADDR_VAR 0 53
67917: PUSH
67918: LD_INT 1
67920: NEG
67921: PUSH
67922: LD_INT 3
67924: NEG
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 0
67932: PUSH
67933: LD_INT 3
67935: NEG
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 1
67943: PUSH
67944: LD_INT 2
67946: NEG
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: LIST
67956: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67957: LD_ADDR_VAR 0 54
67961: PUSH
67962: LD_INT 2
67964: PUSH
67965: LD_INT 1
67967: NEG
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 3
67975: PUSH
67976: LD_INT 0
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 3
67985: PUSH
67986: LD_INT 1
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: LIST
67997: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67998: LD_ADDR_VAR 0 55
68002: PUSH
68003: LD_INT 3
68005: PUSH
68006: LD_INT 2
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 3
68015: PUSH
68016: LD_INT 3
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 2
68025: PUSH
68026: LD_INT 3
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: LIST
68037: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68038: LD_ADDR_VAR 0 56
68042: PUSH
68043: LD_INT 1
68045: PUSH
68046: LD_INT 3
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 0
68055: PUSH
68056: LD_INT 3
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 1
68065: NEG
68066: PUSH
68067: LD_INT 2
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: LIST
68078: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68079: LD_ADDR_VAR 0 57
68083: PUSH
68084: LD_INT 2
68086: NEG
68087: PUSH
68088: LD_INT 1
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 3
68097: NEG
68098: PUSH
68099: LD_INT 0
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 3
68108: NEG
68109: PUSH
68110: LD_INT 1
68112: NEG
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: LIST
68122: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68123: LD_ADDR_VAR 0 58
68127: PUSH
68128: LD_INT 2
68130: NEG
68131: PUSH
68132: LD_INT 3
68134: NEG
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 3
68142: NEG
68143: PUSH
68144: LD_INT 2
68146: NEG
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 3
68154: NEG
68155: PUSH
68156: LD_INT 3
68158: NEG
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: LIST
68168: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68169: LD_ADDR_VAR 0 59
68173: PUSH
68174: LD_INT 1
68176: NEG
68177: PUSH
68178: LD_INT 2
68180: NEG
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 0
68188: PUSH
68189: LD_INT 2
68191: NEG
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 1
68199: PUSH
68200: LD_INT 1
68202: NEG
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: LIST
68212: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68213: LD_ADDR_VAR 0 60
68217: PUSH
68218: LD_INT 1
68220: PUSH
68221: LD_INT 1
68223: NEG
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 2
68231: PUSH
68232: LD_INT 0
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 2
68241: PUSH
68242: LD_INT 1
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: LIST
68253: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68254: LD_ADDR_VAR 0 61
68258: PUSH
68259: LD_INT 2
68261: PUSH
68262: LD_INT 1
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 2
68271: PUSH
68272: LD_INT 2
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 1
68281: PUSH
68282: LD_INT 2
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: LIST
68293: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68294: LD_ADDR_VAR 0 62
68298: PUSH
68299: LD_INT 1
68301: PUSH
68302: LD_INT 2
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 0
68311: PUSH
68312: LD_INT 2
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 1
68321: NEG
68322: PUSH
68323: LD_INT 1
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: LIST
68334: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68335: LD_ADDR_VAR 0 63
68339: PUSH
68340: LD_INT 1
68342: NEG
68343: PUSH
68344: LD_INT 1
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 2
68353: NEG
68354: PUSH
68355: LD_INT 0
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 2
68364: NEG
68365: PUSH
68366: LD_INT 1
68368: NEG
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: LIST
68378: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68379: LD_ADDR_VAR 0 64
68383: PUSH
68384: LD_INT 1
68386: NEG
68387: PUSH
68388: LD_INT 2
68390: NEG
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 2
68398: NEG
68399: PUSH
68400: LD_INT 1
68402: NEG
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 2
68410: NEG
68411: PUSH
68412: LD_INT 2
68414: NEG
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: LIST
68424: ST_TO_ADDR
// end ; 2 :
68425: GO 71691
68427: LD_INT 2
68429: DOUBLE
68430: EQUAL
68431: IFTRUE 68435
68433: GO 71690
68435: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68436: LD_ADDR_VAR 0 29
68440: PUSH
68441: LD_INT 4
68443: PUSH
68444: LD_INT 0
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 4
68453: PUSH
68454: LD_INT 1
68456: NEG
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 5
68464: PUSH
68465: LD_INT 0
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 5
68474: PUSH
68475: LD_INT 1
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PUSH
68482: LD_INT 4
68484: PUSH
68485: LD_INT 1
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 3
68494: PUSH
68495: LD_INT 0
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 3
68504: PUSH
68505: LD_INT 1
68507: NEG
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 3
68515: PUSH
68516: LD_INT 2
68518: NEG
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 5
68526: PUSH
68527: LD_INT 2
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 3
68536: PUSH
68537: LD_INT 3
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 3
68546: PUSH
68547: LD_INT 2
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 4
68556: PUSH
68557: LD_INT 3
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: LD_INT 4
68566: PUSH
68567: LD_INT 4
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 3
68576: PUSH
68577: LD_INT 4
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 2
68586: PUSH
68587: LD_INT 3
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 2
68596: PUSH
68597: LD_INT 2
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 4
68606: PUSH
68607: LD_INT 2
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 2
68616: PUSH
68617: LD_INT 4
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 0
68626: PUSH
68627: LD_INT 4
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 0
68636: PUSH
68637: LD_INT 3
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 1
68646: PUSH
68647: LD_INT 4
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 1
68656: PUSH
68657: LD_INT 5
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 0
68666: PUSH
68667: LD_INT 5
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 1
68676: NEG
68677: PUSH
68678: LD_INT 4
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 1
68687: NEG
68688: PUSH
68689: LD_INT 3
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 2
68698: PUSH
68699: LD_INT 5
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 2
68708: NEG
68709: PUSH
68710: LD_INT 3
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 3
68719: NEG
68720: PUSH
68721: LD_INT 0
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 3
68730: NEG
68731: PUSH
68732: LD_INT 1
68734: NEG
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 2
68742: NEG
68743: PUSH
68744: LD_INT 0
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 2
68753: NEG
68754: PUSH
68755: LD_INT 1
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 3
68764: NEG
68765: PUSH
68766: LD_INT 1
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 4
68775: NEG
68776: PUSH
68777: LD_INT 0
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 4
68786: NEG
68787: PUSH
68788: LD_INT 1
68790: NEG
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 4
68798: NEG
68799: PUSH
68800: LD_INT 2
68802: NEG
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 2
68810: NEG
68811: PUSH
68812: LD_INT 2
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 4
68821: NEG
68822: PUSH
68823: LD_INT 4
68825: NEG
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 4
68833: NEG
68834: PUSH
68835: LD_INT 5
68837: NEG
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 3
68845: NEG
68846: PUSH
68847: LD_INT 4
68849: NEG
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 3
68857: NEG
68858: PUSH
68859: LD_INT 3
68861: NEG
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 4
68869: NEG
68870: PUSH
68871: LD_INT 3
68873: NEG
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 5
68881: NEG
68882: PUSH
68883: LD_INT 4
68885: NEG
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 5
68893: NEG
68894: PUSH
68895: LD_INT 5
68897: NEG
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 3
68905: NEG
68906: PUSH
68907: LD_INT 5
68909: NEG
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 5
68917: NEG
68918: PUSH
68919: LD_INT 3
68921: NEG
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68974: LD_ADDR_VAR 0 30
68978: PUSH
68979: LD_INT 4
68981: PUSH
68982: LD_INT 4
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 4
68991: PUSH
68992: LD_INT 3
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 5
69001: PUSH
69002: LD_INT 4
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 5
69011: PUSH
69012: LD_INT 5
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 4
69021: PUSH
69022: LD_INT 5
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 3
69031: PUSH
69032: LD_INT 4
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 3
69041: PUSH
69042: LD_INT 3
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 5
69051: PUSH
69052: LD_INT 3
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 3
69061: PUSH
69062: LD_INT 5
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 0
69071: PUSH
69072: LD_INT 3
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 0
69081: PUSH
69082: LD_INT 2
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 1
69091: PUSH
69092: LD_INT 3
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_INT 1
69101: PUSH
69102: LD_INT 4
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 0
69111: PUSH
69112: LD_INT 4
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: LD_INT 1
69121: NEG
69122: PUSH
69123: LD_INT 3
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 1
69132: NEG
69133: PUSH
69134: LD_INT 2
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 2
69143: PUSH
69144: LD_INT 4
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 2
69153: NEG
69154: PUSH
69155: LD_INT 2
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 4
69164: NEG
69165: PUSH
69166: LD_INT 0
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 4
69175: NEG
69176: PUSH
69177: LD_INT 1
69179: NEG
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 3
69187: NEG
69188: PUSH
69189: LD_INT 0
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 3
69198: NEG
69199: PUSH
69200: LD_INT 1
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 4
69209: NEG
69210: PUSH
69211: LD_INT 1
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 5
69220: NEG
69221: PUSH
69222: LD_INT 0
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 5
69231: NEG
69232: PUSH
69233: LD_INT 1
69235: NEG
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: LD_INT 5
69243: NEG
69244: PUSH
69245: LD_INT 2
69247: NEG
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 3
69255: NEG
69256: PUSH
69257: LD_INT 2
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 3
69266: NEG
69267: PUSH
69268: LD_INT 3
69270: NEG
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 3
69278: NEG
69279: PUSH
69280: LD_INT 4
69282: NEG
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 2
69290: NEG
69291: PUSH
69292: LD_INT 3
69294: NEG
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 2
69302: NEG
69303: PUSH
69304: LD_INT 2
69306: NEG
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 3
69314: NEG
69315: PUSH
69316: LD_INT 2
69318: NEG
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 4
69326: NEG
69327: PUSH
69328: LD_INT 3
69330: NEG
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 4
69338: NEG
69339: PUSH
69340: LD_INT 4
69342: NEG
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 2
69350: NEG
69351: PUSH
69352: LD_INT 4
69354: NEG
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 4
69362: NEG
69363: PUSH
69364: LD_INT 2
69366: NEG
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 0
69374: PUSH
69375: LD_INT 4
69377: NEG
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 0
69385: PUSH
69386: LD_INT 5
69388: NEG
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 1
69396: PUSH
69397: LD_INT 4
69399: NEG
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: LD_INT 1
69407: PUSH
69408: LD_INT 3
69410: NEG
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 0
69418: PUSH
69419: LD_INT 3
69421: NEG
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 1
69429: NEG
69430: PUSH
69431: LD_INT 4
69433: NEG
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 1
69441: NEG
69442: PUSH
69443: LD_INT 5
69445: NEG
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 2
69453: PUSH
69454: LD_INT 3
69456: NEG
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 2
69464: NEG
69465: PUSH
69466: LD_INT 5
69468: NEG
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69521: LD_ADDR_VAR 0 31
69525: PUSH
69526: LD_INT 0
69528: PUSH
69529: LD_INT 4
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 0
69538: PUSH
69539: LD_INT 3
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 1
69548: PUSH
69549: LD_INT 4
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 1
69558: PUSH
69559: LD_INT 5
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 0
69568: PUSH
69569: LD_INT 5
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 1
69578: NEG
69579: PUSH
69580: LD_INT 4
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 1
69589: NEG
69590: PUSH
69591: LD_INT 3
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 2
69600: PUSH
69601: LD_INT 5
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 2
69610: NEG
69611: PUSH
69612: LD_INT 3
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_INT 3
69621: NEG
69622: PUSH
69623: LD_INT 0
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 3
69632: NEG
69633: PUSH
69634: LD_INT 1
69636: NEG
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 2
69644: NEG
69645: PUSH
69646: LD_INT 0
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 2
69655: NEG
69656: PUSH
69657: LD_INT 1
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: LD_INT 3
69666: NEG
69667: PUSH
69668: LD_INT 1
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: LD_INT 4
69677: NEG
69678: PUSH
69679: LD_INT 0
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 4
69688: NEG
69689: PUSH
69690: LD_INT 1
69692: NEG
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 4
69700: NEG
69701: PUSH
69702: LD_INT 2
69704: NEG
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 2
69712: NEG
69713: PUSH
69714: LD_INT 2
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 4
69723: NEG
69724: PUSH
69725: LD_INT 4
69727: NEG
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PUSH
69733: LD_INT 4
69735: NEG
69736: PUSH
69737: LD_INT 5
69739: NEG
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 3
69747: NEG
69748: PUSH
69749: LD_INT 4
69751: NEG
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 3
69759: NEG
69760: PUSH
69761: LD_INT 3
69763: NEG
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 4
69771: NEG
69772: PUSH
69773: LD_INT 3
69775: NEG
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_INT 5
69783: NEG
69784: PUSH
69785: LD_INT 4
69787: NEG
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 5
69795: NEG
69796: PUSH
69797: LD_INT 5
69799: NEG
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 3
69807: NEG
69808: PUSH
69809: LD_INT 5
69811: NEG
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 5
69819: NEG
69820: PUSH
69821: LD_INT 3
69823: NEG
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 0
69831: PUSH
69832: LD_INT 3
69834: NEG
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 0
69842: PUSH
69843: LD_INT 4
69845: NEG
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 1
69853: PUSH
69854: LD_INT 3
69856: NEG
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 1
69864: PUSH
69865: LD_INT 2
69867: NEG
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 0
69875: PUSH
69876: LD_INT 2
69878: NEG
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 1
69886: NEG
69887: PUSH
69888: LD_INT 3
69890: NEG
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 1
69898: NEG
69899: PUSH
69900: LD_INT 4
69902: NEG
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: LD_INT 2
69910: PUSH
69911: LD_INT 2
69913: NEG
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 2
69921: NEG
69922: PUSH
69923: LD_INT 4
69925: NEG
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 4
69933: PUSH
69934: LD_INT 0
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 4
69943: PUSH
69944: LD_INT 1
69946: NEG
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 5
69954: PUSH
69955: LD_INT 0
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 5
69964: PUSH
69965: LD_INT 1
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 4
69974: PUSH
69975: LD_INT 1
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 3
69984: PUSH
69985: LD_INT 0
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 3
69994: PUSH
69995: LD_INT 1
69997: NEG
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 3
70005: PUSH
70006: LD_INT 2
70008: NEG
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 5
70016: PUSH
70017: LD_INT 2
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70071: LD_ADDR_VAR 0 32
70075: PUSH
70076: LD_INT 4
70078: NEG
70079: PUSH
70080: LD_INT 0
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 4
70089: NEG
70090: PUSH
70091: LD_INT 1
70093: NEG
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 3
70101: NEG
70102: PUSH
70103: LD_INT 0
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 3
70112: NEG
70113: PUSH
70114: LD_INT 1
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 4
70123: NEG
70124: PUSH
70125: LD_INT 1
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 5
70134: NEG
70135: PUSH
70136: LD_INT 0
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 5
70145: NEG
70146: PUSH
70147: LD_INT 1
70149: NEG
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 5
70157: NEG
70158: PUSH
70159: LD_INT 2
70161: NEG
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: LD_INT 3
70169: NEG
70170: PUSH
70171: LD_INT 2
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: LD_INT 3
70180: NEG
70181: PUSH
70182: LD_INT 3
70184: NEG
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: PUSH
70190: LD_INT 3
70192: NEG
70193: PUSH
70194: LD_INT 4
70196: NEG
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 2
70204: NEG
70205: PUSH
70206: LD_INT 3
70208: NEG
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 2
70216: NEG
70217: PUSH
70218: LD_INT 2
70220: NEG
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 3
70228: NEG
70229: PUSH
70230: LD_INT 2
70232: NEG
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 4
70240: NEG
70241: PUSH
70242: LD_INT 3
70244: NEG
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: PUSH
70250: LD_INT 4
70252: NEG
70253: PUSH
70254: LD_INT 4
70256: NEG
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 2
70264: NEG
70265: PUSH
70266: LD_INT 4
70268: NEG
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 4
70276: NEG
70277: PUSH
70278: LD_INT 2
70280: NEG
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PUSH
70286: LD_INT 0
70288: PUSH
70289: LD_INT 4
70291: NEG
70292: PUSH
70293: EMPTY
70294: LIST
70295: LIST
70296: PUSH
70297: LD_INT 0
70299: PUSH
70300: LD_INT 5
70302: NEG
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 1
70310: PUSH
70311: LD_INT 4
70313: NEG
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 1
70321: PUSH
70322: LD_INT 3
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 0
70332: PUSH
70333: LD_INT 3
70335: NEG
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 1
70343: NEG
70344: PUSH
70345: LD_INT 4
70347: NEG
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 1
70355: NEG
70356: PUSH
70357: LD_INT 5
70359: NEG
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 2
70367: PUSH
70368: LD_INT 3
70370: NEG
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: LD_INT 2
70378: NEG
70379: PUSH
70380: LD_INT 5
70382: NEG
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 3
70390: PUSH
70391: LD_INT 0
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 3
70400: PUSH
70401: LD_INT 1
70403: NEG
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 4
70411: PUSH
70412: LD_INT 0
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 4
70421: PUSH
70422: LD_INT 1
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 3
70431: PUSH
70432: LD_INT 1
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PUSH
70439: LD_INT 2
70441: PUSH
70442: LD_INT 0
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: PUSH
70449: LD_INT 2
70451: PUSH
70452: LD_INT 1
70454: NEG
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: LD_INT 2
70462: PUSH
70463: LD_INT 2
70465: NEG
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: PUSH
70471: LD_INT 4
70473: PUSH
70474: LD_INT 2
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 4
70483: PUSH
70484: LD_INT 4
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 4
70493: PUSH
70494: LD_INT 3
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: LD_INT 5
70503: PUSH
70504: LD_INT 4
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 5
70513: PUSH
70514: LD_INT 5
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 4
70523: PUSH
70524: LD_INT 5
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 3
70533: PUSH
70534: LD_INT 4
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 3
70543: PUSH
70544: LD_INT 3
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 5
70553: PUSH
70554: LD_INT 3
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 3
70563: PUSH
70564: LD_INT 5
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70618: LD_ADDR_VAR 0 33
70622: PUSH
70623: LD_INT 4
70625: NEG
70626: PUSH
70627: LD_INT 4
70629: NEG
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: PUSH
70635: LD_INT 4
70637: NEG
70638: PUSH
70639: LD_INT 5
70641: NEG
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: PUSH
70647: LD_INT 3
70649: NEG
70650: PUSH
70651: LD_INT 4
70653: NEG
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: LD_INT 3
70661: NEG
70662: PUSH
70663: LD_INT 3
70665: NEG
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: LD_INT 4
70673: NEG
70674: PUSH
70675: LD_INT 3
70677: NEG
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: LD_INT 5
70685: NEG
70686: PUSH
70687: LD_INT 4
70689: NEG
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: PUSH
70695: LD_INT 5
70697: NEG
70698: PUSH
70699: LD_INT 5
70701: NEG
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PUSH
70707: LD_INT 3
70709: NEG
70710: PUSH
70711: LD_INT 5
70713: NEG
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: LD_INT 5
70721: NEG
70722: PUSH
70723: LD_INT 3
70725: NEG
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 0
70733: PUSH
70734: LD_INT 3
70736: NEG
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 0
70744: PUSH
70745: LD_INT 4
70747: NEG
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 1
70755: PUSH
70756: LD_INT 3
70758: NEG
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 1
70766: PUSH
70767: LD_INT 2
70769: NEG
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 0
70777: PUSH
70778: LD_INT 2
70780: NEG
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: LD_INT 1
70788: NEG
70789: PUSH
70790: LD_INT 3
70792: NEG
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 1
70800: NEG
70801: PUSH
70802: LD_INT 4
70804: NEG
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: LD_INT 2
70812: PUSH
70813: LD_INT 2
70815: NEG
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 2
70823: NEG
70824: PUSH
70825: LD_INT 4
70827: NEG
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 4
70835: PUSH
70836: LD_INT 0
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: PUSH
70843: LD_INT 4
70845: PUSH
70846: LD_INT 1
70848: NEG
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 5
70856: PUSH
70857: LD_INT 0
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: LD_INT 5
70866: PUSH
70867: LD_INT 1
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 4
70876: PUSH
70877: LD_INT 1
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 3
70886: PUSH
70887: LD_INT 0
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: PUSH
70894: LD_INT 3
70896: PUSH
70897: LD_INT 1
70899: NEG
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: PUSH
70905: LD_INT 3
70907: PUSH
70908: LD_INT 2
70910: NEG
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 5
70918: PUSH
70919: LD_INT 2
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: LD_INT 3
70928: PUSH
70929: LD_INT 3
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 3
70938: PUSH
70939: LD_INT 2
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 4
70948: PUSH
70949: LD_INT 3
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 4
70958: PUSH
70959: LD_INT 4
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 3
70968: PUSH
70969: LD_INT 4
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 2
70978: PUSH
70979: LD_INT 3
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: PUSH
70986: LD_INT 2
70988: PUSH
70989: LD_INT 2
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: LD_INT 4
70998: PUSH
70999: LD_INT 2
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 2
71008: PUSH
71009: LD_INT 4
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: PUSH
71016: LD_INT 0
71018: PUSH
71019: LD_INT 4
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: LD_INT 0
71028: PUSH
71029: LD_INT 3
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 1
71038: PUSH
71039: LD_INT 4
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 1
71048: PUSH
71049: LD_INT 5
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 0
71058: PUSH
71059: LD_INT 5
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 1
71068: NEG
71069: PUSH
71070: LD_INT 4
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 1
71079: NEG
71080: PUSH
71081: LD_INT 3
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: PUSH
71088: LD_INT 2
71090: PUSH
71091: LD_INT 5
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: PUSH
71098: LD_INT 2
71100: NEG
71101: PUSH
71102: LD_INT 3
71104: PUSH
71105: EMPTY
71106: LIST
71107: LIST
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: LIST
71136: LIST
71137: LIST
71138: LIST
71139: LIST
71140: LIST
71141: LIST
71142: LIST
71143: LIST
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71156: LD_ADDR_VAR 0 34
71160: PUSH
71161: LD_INT 0
71163: PUSH
71164: LD_INT 4
71166: NEG
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: LD_INT 0
71174: PUSH
71175: LD_INT 5
71177: NEG
71178: PUSH
71179: EMPTY
71180: LIST
71181: LIST
71182: PUSH
71183: LD_INT 1
71185: PUSH
71186: LD_INT 4
71188: NEG
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 1
71196: PUSH
71197: LD_INT 3
71199: NEG
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: LD_INT 0
71207: PUSH
71208: LD_INT 3
71210: NEG
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: LD_INT 1
71218: NEG
71219: PUSH
71220: LD_INT 4
71222: NEG
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PUSH
71228: LD_INT 1
71230: NEG
71231: PUSH
71232: LD_INT 5
71234: NEG
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: LD_INT 2
71242: PUSH
71243: LD_INT 3
71245: NEG
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: PUSH
71251: LD_INT 2
71253: NEG
71254: PUSH
71255: LD_INT 5
71257: NEG
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: PUSH
71263: LD_INT 3
71265: PUSH
71266: LD_INT 0
71268: PUSH
71269: EMPTY
71270: LIST
71271: LIST
71272: PUSH
71273: LD_INT 3
71275: PUSH
71276: LD_INT 1
71278: NEG
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 4
71286: PUSH
71287: LD_INT 0
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: LD_INT 4
71296: PUSH
71297: LD_INT 1
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: PUSH
71304: LD_INT 3
71306: PUSH
71307: LD_INT 1
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: PUSH
71314: LD_INT 2
71316: PUSH
71317: LD_INT 0
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: PUSH
71324: LD_INT 2
71326: PUSH
71327: LD_INT 1
71329: NEG
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: PUSH
71335: LD_INT 2
71337: PUSH
71338: LD_INT 2
71340: NEG
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 4
71348: PUSH
71349: LD_INT 2
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 4
71358: PUSH
71359: LD_INT 4
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 4
71368: PUSH
71369: LD_INT 3
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: PUSH
71376: LD_INT 5
71378: PUSH
71379: LD_INT 4
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: PUSH
71386: LD_INT 5
71388: PUSH
71389: LD_INT 5
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 4
71398: PUSH
71399: LD_INT 5
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: PUSH
71406: LD_INT 3
71408: PUSH
71409: LD_INT 4
71411: PUSH
71412: EMPTY
71413: LIST
71414: LIST
71415: PUSH
71416: LD_INT 3
71418: PUSH
71419: LD_INT 3
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: PUSH
71426: LD_INT 5
71428: PUSH
71429: LD_INT 3
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: PUSH
71436: LD_INT 3
71438: PUSH
71439: LD_INT 5
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 0
71448: PUSH
71449: LD_INT 3
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 0
71458: PUSH
71459: LD_INT 2
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: PUSH
71466: LD_INT 1
71468: PUSH
71469: LD_INT 3
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 1
71478: PUSH
71479: LD_INT 4
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 0
71488: PUSH
71489: LD_INT 4
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: PUSH
71496: LD_INT 1
71498: NEG
71499: PUSH
71500: LD_INT 3
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PUSH
71507: LD_INT 1
71509: NEG
71510: PUSH
71511: LD_INT 2
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: PUSH
71518: LD_INT 2
71520: PUSH
71521: LD_INT 4
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 2
71530: NEG
71531: PUSH
71532: LD_INT 2
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 4
71541: NEG
71542: PUSH
71543: LD_INT 0
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: PUSH
71550: LD_INT 4
71552: NEG
71553: PUSH
71554: LD_INT 1
71556: NEG
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 3
71564: NEG
71565: PUSH
71566: LD_INT 0
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PUSH
71573: LD_INT 3
71575: NEG
71576: PUSH
71577: LD_INT 1
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: PUSH
71584: LD_INT 4
71586: NEG
71587: PUSH
71588: LD_INT 1
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PUSH
71595: LD_INT 5
71597: NEG
71598: PUSH
71599: LD_INT 0
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 5
71608: NEG
71609: PUSH
71610: LD_INT 1
71612: NEG
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: PUSH
71618: LD_INT 5
71620: NEG
71621: PUSH
71622: LD_INT 2
71624: NEG
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 3
71632: NEG
71633: PUSH
71634: LD_INT 2
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: LIST
71681: LIST
71682: LIST
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: ST_TO_ADDR
// end ; end ;
71688: GO 71691
71690: POP
// case btype of b_depot , b_warehouse :
71691: LD_VAR 0 1
71695: PUSH
71696: LD_INT 0
71698: DOUBLE
71699: EQUAL
71700: IFTRUE 71710
71702: LD_INT 1
71704: DOUBLE
71705: EQUAL
71706: IFTRUE 71710
71708: GO 71911
71710: POP
// case nation of nation_american :
71711: LD_VAR 0 5
71715: PUSH
71716: LD_INT 1
71718: DOUBLE
71719: EQUAL
71720: IFTRUE 71724
71722: GO 71780
71724: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71725: LD_ADDR_VAR 0 9
71729: PUSH
71730: LD_VAR 0 11
71734: PUSH
71735: LD_VAR 0 12
71739: PUSH
71740: LD_VAR 0 13
71744: PUSH
71745: LD_VAR 0 14
71749: PUSH
71750: LD_VAR 0 15
71754: PUSH
71755: LD_VAR 0 16
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: LIST
71764: LIST
71765: LIST
71766: LIST
71767: PUSH
71768: LD_VAR 0 4
71772: PUSH
71773: LD_INT 1
71775: PLUS
71776: ARRAY
71777: ST_TO_ADDR
71778: GO 71909
71780: LD_INT 2
71782: DOUBLE
71783: EQUAL
71784: IFTRUE 71788
71786: GO 71844
71788: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71789: LD_ADDR_VAR 0 9
71793: PUSH
71794: LD_VAR 0 17
71798: PUSH
71799: LD_VAR 0 18
71803: PUSH
71804: LD_VAR 0 19
71808: PUSH
71809: LD_VAR 0 20
71813: PUSH
71814: LD_VAR 0 21
71818: PUSH
71819: LD_VAR 0 22
71823: PUSH
71824: EMPTY
71825: LIST
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: PUSH
71832: LD_VAR 0 4
71836: PUSH
71837: LD_INT 1
71839: PLUS
71840: ARRAY
71841: ST_TO_ADDR
71842: GO 71909
71844: LD_INT 3
71846: DOUBLE
71847: EQUAL
71848: IFTRUE 71852
71850: GO 71908
71852: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71853: LD_ADDR_VAR 0 9
71857: PUSH
71858: LD_VAR 0 23
71862: PUSH
71863: LD_VAR 0 24
71867: PUSH
71868: LD_VAR 0 25
71872: PUSH
71873: LD_VAR 0 26
71877: PUSH
71878: LD_VAR 0 27
71882: PUSH
71883: LD_VAR 0 28
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: LIST
71894: LIST
71895: PUSH
71896: LD_VAR 0 4
71900: PUSH
71901: LD_INT 1
71903: PLUS
71904: ARRAY
71905: ST_TO_ADDR
71906: GO 71909
71908: POP
71909: GO 72464
71911: LD_INT 2
71913: DOUBLE
71914: EQUAL
71915: IFTRUE 71925
71917: LD_INT 3
71919: DOUBLE
71920: EQUAL
71921: IFTRUE 71925
71923: GO 71981
71925: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71926: LD_ADDR_VAR 0 9
71930: PUSH
71931: LD_VAR 0 29
71935: PUSH
71936: LD_VAR 0 30
71940: PUSH
71941: LD_VAR 0 31
71945: PUSH
71946: LD_VAR 0 32
71950: PUSH
71951: LD_VAR 0 33
71955: PUSH
71956: LD_VAR 0 34
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: PUSH
71969: LD_VAR 0 4
71973: PUSH
71974: LD_INT 1
71976: PLUS
71977: ARRAY
71978: ST_TO_ADDR
71979: GO 72464
71981: LD_INT 16
71983: DOUBLE
71984: EQUAL
71985: IFTRUE 72043
71987: LD_INT 17
71989: DOUBLE
71990: EQUAL
71991: IFTRUE 72043
71993: LD_INT 18
71995: DOUBLE
71996: EQUAL
71997: IFTRUE 72043
71999: LD_INT 19
72001: DOUBLE
72002: EQUAL
72003: IFTRUE 72043
72005: LD_INT 22
72007: DOUBLE
72008: EQUAL
72009: IFTRUE 72043
72011: LD_INT 20
72013: DOUBLE
72014: EQUAL
72015: IFTRUE 72043
72017: LD_INT 21
72019: DOUBLE
72020: EQUAL
72021: IFTRUE 72043
72023: LD_INT 23
72025: DOUBLE
72026: EQUAL
72027: IFTRUE 72043
72029: LD_INT 24
72031: DOUBLE
72032: EQUAL
72033: IFTRUE 72043
72035: LD_INT 25
72037: DOUBLE
72038: EQUAL
72039: IFTRUE 72043
72041: GO 72099
72043: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72044: LD_ADDR_VAR 0 9
72048: PUSH
72049: LD_VAR 0 35
72053: PUSH
72054: LD_VAR 0 36
72058: PUSH
72059: LD_VAR 0 37
72063: PUSH
72064: LD_VAR 0 38
72068: PUSH
72069: LD_VAR 0 39
72073: PUSH
72074: LD_VAR 0 40
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: PUSH
72087: LD_VAR 0 4
72091: PUSH
72092: LD_INT 1
72094: PLUS
72095: ARRAY
72096: ST_TO_ADDR
72097: GO 72464
72099: LD_INT 6
72101: DOUBLE
72102: EQUAL
72103: IFTRUE 72155
72105: LD_INT 7
72107: DOUBLE
72108: EQUAL
72109: IFTRUE 72155
72111: LD_INT 8
72113: DOUBLE
72114: EQUAL
72115: IFTRUE 72155
72117: LD_INT 13
72119: DOUBLE
72120: EQUAL
72121: IFTRUE 72155
72123: LD_INT 12
72125: DOUBLE
72126: EQUAL
72127: IFTRUE 72155
72129: LD_INT 15
72131: DOUBLE
72132: EQUAL
72133: IFTRUE 72155
72135: LD_INT 11
72137: DOUBLE
72138: EQUAL
72139: IFTRUE 72155
72141: LD_INT 14
72143: DOUBLE
72144: EQUAL
72145: IFTRUE 72155
72147: LD_INT 10
72149: DOUBLE
72150: EQUAL
72151: IFTRUE 72155
72153: GO 72211
72155: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72156: LD_ADDR_VAR 0 9
72160: PUSH
72161: LD_VAR 0 41
72165: PUSH
72166: LD_VAR 0 42
72170: PUSH
72171: LD_VAR 0 43
72175: PUSH
72176: LD_VAR 0 44
72180: PUSH
72181: LD_VAR 0 45
72185: PUSH
72186: LD_VAR 0 46
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: PUSH
72199: LD_VAR 0 4
72203: PUSH
72204: LD_INT 1
72206: PLUS
72207: ARRAY
72208: ST_TO_ADDR
72209: GO 72464
72211: LD_INT 36
72213: DOUBLE
72214: EQUAL
72215: IFTRUE 72219
72217: GO 72275
72219: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72220: LD_ADDR_VAR 0 9
72224: PUSH
72225: LD_VAR 0 47
72229: PUSH
72230: LD_VAR 0 48
72234: PUSH
72235: LD_VAR 0 49
72239: PUSH
72240: LD_VAR 0 50
72244: PUSH
72245: LD_VAR 0 51
72249: PUSH
72250: LD_VAR 0 52
72254: PUSH
72255: EMPTY
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: PUSH
72263: LD_VAR 0 4
72267: PUSH
72268: LD_INT 1
72270: PLUS
72271: ARRAY
72272: ST_TO_ADDR
72273: GO 72464
72275: LD_INT 4
72277: DOUBLE
72278: EQUAL
72279: IFTRUE 72301
72281: LD_INT 5
72283: DOUBLE
72284: EQUAL
72285: IFTRUE 72301
72287: LD_INT 34
72289: DOUBLE
72290: EQUAL
72291: IFTRUE 72301
72293: LD_INT 37
72295: DOUBLE
72296: EQUAL
72297: IFTRUE 72301
72299: GO 72357
72301: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72302: LD_ADDR_VAR 0 9
72306: PUSH
72307: LD_VAR 0 53
72311: PUSH
72312: LD_VAR 0 54
72316: PUSH
72317: LD_VAR 0 55
72321: PUSH
72322: LD_VAR 0 56
72326: PUSH
72327: LD_VAR 0 57
72331: PUSH
72332: LD_VAR 0 58
72336: PUSH
72337: EMPTY
72338: LIST
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: PUSH
72345: LD_VAR 0 4
72349: PUSH
72350: LD_INT 1
72352: PLUS
72353: ARRAY
72354: ST_TO_ADDR
72355: GO 72464
72357: LD_INT 31
72359: DOUBLE
72360: EQUAL
72361: IFTRUE 72407
72363: LD_INT 32
72365: DOUBLE
72366: EQUAL
72367: IFTRUE 72407
72369: LD_INT 33
72371: DOUBLE
72372: EQUAL
72373: IFTRUE 72407
72375: LD_INT 27
72377: DOUBLE
72378: EQUAL
72379: IFTRUE 72407
72381: LD_INT 26
72383: DOUBLE
72384: EQUAL
72385: IFTRUE 72407
72387: LD_INT 28
72389: DOUBLE
72390: EQUAL
72391: IFTRUE 72407
72393: LD_INT 29
72395: DOUBLE
72396: EQUAL
72397: IFTRUE 72407
72399: LD_INT 30
72401: DOUBLE
72402: EQUAL
72403: IFTRUE 72407
72405: GO 72463
72407: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72408: LD_ADDR_VAR 0 9
72412: PUSH
72413: LD_VAR 0 59
72417: PUSH
72418: LD_VAR 0 60
72422: PUSH
72423: LD_VAR 0 61
72427: PUSH
72428: LD_VAR 0 62
72432: PUSH
72433: LD_VAR 0 63
72437: PUSH
72438: LD_VAR 0 64
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: LIST
72447: LIST
72448: LIST
72449: LIST
72450: PUSH
72451: LD_VAR 0 4
72455: PUSH
72456: LD_INT 1
72458: PLUS
72459: ARRAY
72460: ST_TO_ADDR
72461: GO 72464
72463: POP
// temp_list2 = [ ] ;
72464: LD_ADDR_VAR 0 10
72468: PUSH
72469: EMPTY
72470: ST_TO_ADDR
// for i in temp_list do
72471: LD_ADDR_VAR 0 8
72475: PUSH
72476: LD_VAR 0 9
72480: PUSH
72481: FOR_IN
72482: IFFALSE 72534
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72484: LD_ADDR_VAR 0 10
72488: PUSH
72489: LD_VAR 0 10
72493: PUSH
72494: LD_VAR 0 8
72498: PUSH
72499: LD_INT 1
72501: ARRAY
72502: PUSH
72503: LD_VAR 0 2
72507: PLUS
72508: PUSH
72509: LD_VAR 0 8
72513: PUSH
72514: LD_INT 2
72516: ARRAY
72517: PUSH
72518: LD_VAR 0 3
72522: PLUS
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: PUSH
72528: EMPTY
72529: LIST
72530: ADD
72531: ST_TO_ADDR
72532: GO 72481
72534: POP
72535: POP
// result = temp_list2 ;
72536: LD_ADDR_VAR 0 7
72540: PUSH
72541: LD_VAR 0 10
72545: ST_TO_ADDR
// end ;
72546: LD_VAR 0 7
72550: RET
// export function EnemyInRange ( unit , dist ) ; begin
72551: LD_INT 0
72553: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72554: LD_ADDR_VAR 0 3
72558: PUSH
72559: LD_VAR 0 1
72563: PPUSH
72564: CALL_OW 255
72568: PPUSH
72569: LD_VAR 0 1
72573: PPUSH
72574: CALL_OW 250
72578: PPUSH
72579: LD_VAR 0 1
72583: PPUSH
72584: CALL_OW 251
72588: PPUSH
72589: LD_VAR 0 2
72593: PPUSH
72594: CALL 45924 0 4
72598: PUSH
72599: LD_INT 4
72601: ARRAY
72602: ST_TO_ADDR
// end ;
72603: LD_VAR 0 3
72607: RET
// export function PlayerSeeMe ( unit ) ; begin
72608: LD_INT 0
72610: PPUSH
// result := See ( your_side , unit ) ;
72611: LD_ADDR_VAR 0 2
72615: PUSH
72616: LD_OWVAR 2
72620: PPUSH
72621: LD_VAR 0 1
72625: PPUSH
72626: CALL_OW 292
72630: ST_TO_ADDR
// end ;
72631: LD_VAR 0 2
72635: RET
// export function ReverseDir ( unit ) ; begin
72636: LD_INT 0
72638: PPUSH
// if not unit then
72639: LD_VAR 0 1
72643: NOT
72644: IFFALSE 72648
// exit ;
72646: GO 72671
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72648: LD_ADDR_VAR 0 2
72652: PUSH
72653: LD_VAR 0 1
72657: PPUSH
72658: CALL_OW 254
72662: PUSH
72663: LD_INT 3
72665: PLUS
72666: PUSH
72667: LD_INT 6
72669: MOD
72670: ST_TO_ADDR
// end ;
72671: LD_VAR 0 2
72675: RET
// export function ReverseArray ( array ) ; var i ; begin
72676: LD_INT 0
72678: PPUSH
72679: PPUSH
// if not array then
72680: LD_VAR 0 1
72684: NOT
72685: IFFALSE 72689
// exit ;
72687: GO 72744
// result := [ ] ;
72689: LD_ADDR_VAR 0 2
72693: PUSH
72694: EMPTY
72695: ST_TO_ADDR
// for i := array downto 1 do
72696: LD_ADDR_VAR 0 3
72700: PUSH
72701: DOUBLE
72702: LD_VAR 0 1
72706: INC
72707: ST_TO_ADDR
72708: LD_INT 1
72710: PUSH
72711: FOR_DOWNTO
72712: IFFALSE 72742
// result := Join ( result , array [ i ] ) ;
72714: LD_ADDR_VAR 0 2
72718: PUSH
72719: LD_VAR 0 2
72723: PPUSH
72724: LD_VAR 0 1
72728: PUSH
72729: LD_VAR 0 3
72733: ARRAY
72734: PPUSH
72735: CALL 77400 0 2
72739: ST_TO_ADDR
72740: GO 72711
72742: POP
72743: POP
// end ;
72744: LD_VAR 0 2
72748: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72749: LD_INT 0
72751: PPUSH
72752: PPUSH
72753: PPUSH
72754: PPUSH
72755: PPUSH
72756: PPUSH
// if not unit or not hexes then
72757: LD_VAR 0 1
72761: NOT
72762: PUSH
72763: LD_VAR 0 2
72767: NOT
72768: OR
72769: IFFALSE 72773
// exit ;
72771: GO 72896
// dist := 9999 ;
72773: LD_ADDR_VAR 0 5
72777: PUSH
72778: LD_INT 9999
72780: ST_TO_ADDR
// for i = 1 to hexes do
72781: LD_ADDR_VAR 0 4
72785: PUSH
72786: DOUBLE
72787: LD_INT 1
72789: DEC
72790: ST_TO_ADDR
72791: LD_VAR 0 2
72795: PUSH
72796: FOR_TO
72797: IFFALSE 72884
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72799: LD_ADDR_VAR 0 6
72803: PUSH
72804: LD_VAR 0 1
72808: PPUSH
72809: LD_VAR 0 2
72813: PUSH
72814: LD_VAR 0 4
72818: ARRAY
72819: PUSH
72820: LD_INT 1
72822: ARRAY
72823: PPUSH
72824: LD_VAR 0 2
72828: PUSH
72829: LD_VAR 0 4
72833: ARRAY
72834: PUSH
72835: LD_INT 2
72837: ARRAY
72838: PPUSH
72839: CALL_OW 297
72843: ST_TO_ADDR
// if tdist < dist then
72844: LD_VAR 0 6
72848: PUSH
72849: LD_VAR 0 5
72853: LESS
72854: IFFALSE 72882
// begin hex := hexes [ i ] ;
72856: LD_ADDR_VAR 0 8
72860: PUSH
72861: LD_VAR 0 2
72865: PUSH
72866: LD_VAR 0 4
72870: ARRAY
72871: ST_TO_ADDR
// dist := tdist ;
72872: LD_ADDR_VAR 0 5
72876: PUSH
72877: LD_VAR 0 6
72881: ST_TO_ADDR
// end ; end ;
72882: GO 72796
72884: POP
72885: POP
// result := hex ;
72886: LD_ADDR_VAR 0 3
72890: PUSH
72891: LD_VAR 0 8
72895: ST_TO_ADDR
// end ;
72896: LD_VAR 0 3
72900: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72901: LD_INT 0
72903: PPUSH
72904: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72905: LD_VAR 0 1
72909: NOT
72910: PUSH
72911: LD_VAR 0 1
72915: PUSH
72916: LD_INT 21
72918: PUSH
72919: LD_INT 2
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: LD_INT 23
72928: PUSH
72929: LD_INT 2
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: EMPTY
72937: LIST
72938: LIST
72939: PPUSH
72940: CALL_OW 69
72944: IN
72945: NOT
72946: OR
72947: IFFALSE 72951
// exit ;
72949: GO 72998
// for i = 1 to 3 do
72951: LD_ADDR_VAR 0 3
72955: PUSH
72956: DOUBLE
72957: LD_INT 1
72959: DEC
72960: ST_TO_ADDR
72961: LD_INT 3
72963: PUSH
72964: FOR_TO
72965: IFFALSE 72996
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72967: LD_VAR 0 1
72971: PPUSH
72972: CALL_OW 250
72976: PPUSH
72977: LD_VAR 0 1
72981: PPUSH
72982: CALL_OW 251
72986: PPUSH
72987: LD_INT 1
72989: PPUSH
72990: CALL_OW 453
72994: GO 72964
72996: POP
72997: POP
// end ;
72998: LD_VAR 0 2
73002: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73003: LD_INT 0
73005: PPUSH
73006: PPUSH
73007: PPUSH
73008: PPUSH
73009: PPUSH
73010: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73011: LD_VAR 0 1
73015: NOT
73016: PUSH
73017: LD_VAR 0 2
73021: NOT
73022: OR
73023: PUSH
73024: LD_VAR 0 1
73028: PPUSH
73029: CALL_OW 314
73033: OR
73034: IFFALSE 73038
// exit ;
73036: GO 73505
// if GetLives ( i ) < 250 then
73038: LD_VAR 0 4
73042: PPUSH
73043: CALL_OW 256
73047: PUSH
73048: LD_INT 250
73050: LESS
73051: IFFALSE 73064
// begin ComAutodestruct ( i ) ;
73053: LD_VAR 0 4
73057: PPUSH
73058: CALL 72901 0 1
// exit ;
73062: GO 73505
// end ; x := GetX ( enemy_unit ) ;
73064: LD_ADDR_VAR 0 7
73068: PUSH
73069: LD_VAR 0 2
73073: PPUSH
73074: CALL_OW 250
73078: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73079: LD_ADDR_VAR 0 8
73083: PUSH
73084: LD_VAR 0 2
73088: PPUSH
73089: CALL_OW 251
73093: ST_TO_ADDR
// if not x or not y then
73094: LD_VAR 0 7
73098: NOT
73099: PUSH
73100: LD_VAR 0 8
73104: NOT
73105: OR
73106: IFFALSE 73110
// exit ;
73108: GO 73505
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73110: LD_ADDR_VAR 0 6
73114: PUSH
73115: LD_VAR 0 7
73119: PPUSH
73120: LD_INT 0
73122: PPUSH
73123: LD_INT 4
73125: PPUSH
73126: CALL_OW 272
73130: PUSH
73131: LD_VAR 0 8
73135: PPUSH
73136: LD_INT 0
73138: PPUSH
73139: LD_INT 4
73141: PPUSH
73142: CALL_OW 273
73146: PUSH
73147: EMPTY
73148: LIST
73149: LIST
73150: PUSH
73151: LD_VAR 0 7
73155: PPUSH
73156: LD_INT 1
73158: PPUSH
73159: LD_INT 4
73161: PPUSH
73162: CALL_OW 272
73166: PUSH
73167: LD_VAR 0 8
73171: PPUSH
73172: LD_INT 1
73174: PPUSH
73175: LD_INT 4
73177: PPUSH
73178: CALL_OW 273
73182: PUSH
73183: EMPTY
73184: LIST
73185: LIST
73186: PUSH
73187: LD_VAR 0 7
73191: PPUSH
73192: LD_INT 2
73194: PPUSH
73195: LD_INT 4
73197: PPUSH
73198: CALL_OW 272
73202: PUSH
73203: LD_VAR 0 8
73207: PPUSH
73208: LD_INT 2
73210: PPUSH
73211: LD_INT 4
73213: PPUSH
73214: CALL_OW 273
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: PUSH
73223: LD_VAR 0 7
73227: PPUSH
73228: LD_INT 3
73230: PPUSH
73231: LD_INT 4
73233: PPUSH
73234: CALL_OW 272
73238: PUSH
73239: LD_VAR 0 8
73243: PPUSH
73244: LD_INT 3
73246: PPUSH
73247: LD_INT 4
73249: PPUSH
73250: CALL_OW 273
73254: PUSH
73255: EMPTY
73256: LIST
73257: LIST
73258: PUSH
73259: LD_VAR 0 7
73263: PPUSH
73264: LD_INT 4
73266: PPUSH
73267: LD_INT 4
73269: PPUSH
73270: CALL_OW 272
73274: PUSH
73275: LD_VAR 0 8
73279: PPUSH
73280: LD_INT 4
73282: PPUSH
73283: LD_INT 4
73285: PPUSH
73286: CALL_OW 273
73290: PUSH
73291: EMPTY
73292: LIST
73293: LIST
73294: PUSH
73295: LD_VAR 0 7
73299: PPUSH
73300: LD_INT 5
73302: PPUSH
73303: LD_INT 4
73305: PPUSH
73306: CALL_OW 272
73310: PUSH
73311: LD_VAR 0 8
73315: PPUSH
73316: LD_INT 5
73318: PPUSH
73319: LD_INT 4
73321: PPUSH
73322: CALL_OW 273
73326: PUSH
73327: EMPTY
73328: LIST
73329: LIST
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: ST_TO_ADDR
// for i = tmp downto 1 do
73339: LD_ADDR_VAR 0 4
73343: PUSH
73344: DOUBLE
73345: LD_VAR 0 6
73349: INC
73350: ST_TO_ADDR
73351: LD_INT 1
73353: PUSH
73354: FOR_DOWNTO
73355: IFFALSE 73456
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73357: LD_VAR 0 6
73361: PUSH
73362: LD_VAR 0 4
73366: ARRAY
73367: PUSH
73368: LD_INT 1
73370: ARRAY
73371: PPUSH
73372: LD_VAR 0 6
73376: PUSH
73377: LD_VAR 0 4
73381: ARRAY
73382: PUSH
73383: LD_INT 2
73385: ARRAY
73386: PPUSH
73387: CALL_OW 488
73391: NOT
73392: PUSH
73393: LD_VAR 0 6
73397: PUSH
73398: LD_VAR 0 4
73402: ARRAY
73403: PUSH
73404: LD_INT 1
73406: ARRAY
73407: PPUSH
73408: LD_VAR 0 6
73412: PUSH
73413: LD_VAR 0 4
73417: ARRAY
73418: PUSH
73419: LD_INT 2
73421: ARRAY
73422: PPUSH
73423: CALL_OW 428
73427: PUSH
73428: LD_INT 0
73430: NONEQUAL
73431: OR
73432: IFFALSE 73454
// tmp := Delete ( tmp , i ) ;
73434: LD_ADDR_VAR 0 6
73438: PUSH
73439: LD_VAR 0 6
73443: PPUSH
73444: LD_VAR 0 4
73448: PPUSH
73449: CALL_OW 3
73453: ST_TO_ADDR
73454: GO 73354
73456: POP
73457: POP
// j := GetClosestHex ( unit , tmp ) ;
73458: LD_ADDR_VAR 0 5
73462: PUSH
73463: LD_VAR 0 1
73467: PPUSH
73468: LD_VAR 0 6
73472: PPUSH
73473: CALL 72749 0 2
73477: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73478: LD_VAR 0 1
73482: PPUSH
73483: LD_VAR 0 5
73487: PUSH
73488: LD_INT 1
73490: ARRAY
73491: PPUSH
73492: LD_VAR 0 5
73496: PUSH
73497: LD_INT 2
73499: ARRAY
73500: PPUSH
73501: CALL_OW 111
// end ;
73505: LD_VAR 0 3
73509: RET
// export function PrepareApemanSoldier ( ) ; begin
73510: LD_INT 0
73512: PPUSH
// uc_nation := 0 ;
73513: LD_ADDR_OWVAR 21
73517: PUSH
73518: LD_INT 0
73520: ST_TO_ADDR
// hc_sex := sex_male ;
73521: LD_ADDR_OWVAR 27
73525: PUSH
73526: LD_INT 1
73528: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73529: LD_ADDR_OWVAR 28
73533: PUSH
73534: LD_INT 15
73536: ST_TO_ADDR
// hc_gallery :=  ;
73537: LD_ADDR_OWVAR 33
73541: PUSH
73542: LD_STRING 
73544: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73545: LD_ADDR_OWVAR 31
73549: PUSH
73550: LD_INT 0
73552: PPUSH
73553: LD_INT 3
73555: PPUSH
73556: CALL_OW 12
73560: PUSH
73561: LD_INT 0
73563: PPUSH
73564: LD_INT 3
73566: PPUSH
73567: CALL_OW 12
73571: PUSH
73572: LD_INT 0
73574: PUSH
73575: LD_INT 0
73577: PUSH
73578: EMPTY
73579: LIST
73580: LIST
73581: LIST
73582: LIST
73583: ST_TO_ADDR
// end ;
73584: LD_VAR 0 1
73588: RET
// export function PrepareApemanEngineer ( ) ; begin
73589: LD_INT 0
73591: PPUSH
// uc_nation := 0 ;
73592: LD_ADDR_OWVAR 21
73596: PUSH
73597: LD_INT 0
73599: ST_TO_ADDR
// hc_sex := sex_male ;
73600: LD_ADDR_OWVAR 27
73604: PUSH
73605: LD_INT 1
73607: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73608: LD_ADDR_OWVAR 28
73612: PUSH
73613: LD_INT 16
73615: ST_TO_ADDR
// hc_gallery :=  ;
73616: LD_ADDR_OWVAR 33
73620: PUSH
73621: LD_STRING 
73623: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73624: LD_ADDR_OWVAR 31
73628: PUSH
73629: LD_INT 0
73631: PPUSH
73632: LD_INT 3
73634: PPUSH
73635: CALL_OW 12
73639: PUSH
73640: LD_INT 0
73642: PPUSH
73643: LD_INT 3
73645: PPUSH
73646: CALL_OW 12
73650: PUSH
73651: LD_INT 0
73653: PUSH
73654: LD_INT 0
73656: PUSH
73657: EMPTY
73658: LIST
73659: LIST
73660: LIST
73661: LIST
73662: ST_TO_ADDR
// end ;
73663: LD_VAR 0 1
73667: RET
// export function PrepareApeman ( agressivity ) ; begin
73668: LD_INT 0
73670: PPUSH
// uc_side := 0 ;
73671: LD_ADDR_OWVAR 20
73675: PUSH
73676: LD_INT 0
73678: ST_TO_ADDR
// uc_nation := 0 ;
73679: LD_ADDR_OWVAR 21
73683: PUSH
73684: LD_INT 0
73686: ST_TO_ADDR
// hc_sex := sex_male ;
73687: LD_ADDR_OWVAR 27
73691: PUSH
73692: LD_INT 1
73694: ST_TO_ADDR
// hc_class := class_apeman ;
73695: LD_ADDR_OWVAR 28
73699: PUSH
73700: LD_INT 12
73702: ST_TO_ADDR
// hc_gallery :=  ;
73703: LD_ADDR_OWVAR 33
73707: PUSH
73708: LD_STRING 
73710: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73711: LD_ADDR_OWVAR 35
73715: PUSH
73716: LD_VAR 0 1
73720: NEG
73721: PPUSH
73722: LD_VAR 0 1
73726: PPUSH
73727: CALL_OW 12
73731: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73732: LD_ADDR_OWVAR 31
73736: PUSH
73737: LD_INT 0
73739: PPUSH
73740: LD_INT 3
73742: PPUSH
73743: CALL_OW 12
73747: PUSH
73748: LD_INT 0
73750: PPUSH
73751: LD_INT 3
73753: PPUSH
73754: CALL_OW 12
73758: PUSH
73759: LD_INT 0
73761: PUSH
73762: LD_INT 0
73764: PUSH
73765: EMPTY
73766: LIST
73767: LIST
73768: LIST
73769: LIST
73770: ST_TO_ADDR
// end ;
73771: LD_VAR 0 2
73775: RET
// export function PrepareTiger ( agressivity ) ; begin
73776: LD_INT 0
73778: PPUSH
// uc_side := 0 ;
73779: LD_ADDR_OWVAR 20
73783: PUSH
73784: LD_INT 0
73786: ST_TO_ADDR
// uc_nation := 0 ;
73787: LD_ADDR_OWVAR 21
73791: PUSH
73792: LD_INT 0
73794: ST_TO_ADDR
// hc_class := class_tiger ;
73795: LD_ADDR_OWVAR 28
73799: PUSH
73800: LD_INT 14
73802: ST_TO_ADDR
// hc_gallery :=  ;
73803: LD_ADDR_OWVAR 33
73807: PUSH
73808: LD_STRING 
73810: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73811: LD_ADDR_OWVAR 35
73815: PUSH
73816: LD_VAR 0 1
73820: NEG
73821: PPUSH
73822: LD_VAR 0 1
73826: PPUSH
73827: CALL_OW 12
73831: ST_TO_ADDR
// end ;
73832: LD_VAR 0 2
73836: RET
// export function PrepareEnchidna ( ) ; begin
73837: LD_INT 0
73839: PPUSH
// uc_side := 0 ;
73840: LD_ADDR_OWVAR 20
73844: PUSH
73845: LD_INT 0
73847: ST_TO_ADDR
// uc_nation := 0 ;
73848: LD_ADDR_OWVAR 21
73852: PUSH
73853: LD_INT 0
73855: ST_TO_ADDR
// hc_class := class_baggie ;
73856: LD_ADDR_OWVAR 28
73860: PUSH
73861: LD_INT 13
73863: ST_TO_ADDR
// hc_gallery :=  ;
73864: LD_ADDR_OWVAR 33
73868: PUSH
73869: LD_STRING 
73871: ST_TO_ADDR
// end ;
73872: LD_VAR 0 1
73876: RET
// export function PrepareFrog ( ) ; begin
73877: LD_INT 0
73879: PPUSH
// uc_side := 0 ;
73880: LD_ADDR_OWVAR 20
73884: PUSH
73885: LD_INT 0
73887: ST_TO_ADDR
// uc_nation := 0 ;
73888: LD_ADDR_OWVAR 21
73892: PUSH
73893: LD_INT 0
73895: ST_TO_ADDR
// hc_class := class_frog ;
73896: LD_ADDR_OWVAR 28
73900: PUSH
73901: LD_INT 19
73903: ST_TO_ADDR
// hc_gallery :=  ;
73904: LD_ADDR_OWVAR 33
73908: PUSH
73909: LD_STRING 
73911: ST_TO_ADDR
// end ;
73912: LD_VAR 0 1
73916: RET
// export function PrepareFish ( ) ; begin
73917: LD_INT 0
73919: PPUSH
// uc_side := 0 ;
73920: LD_ADDR_OWVAR 20
73924: PUSH
73925: LD_INT 0
73927: ST_TO_ADDR
// uc_nation := 0 ;
73928: LD_ADDR_OWVAR 21
73932: PUSH
73933: LD_INT 0
73935: ST_TO_ADDR
// hc_class := class_fish ;
73936: LD_ADDR_OWVAR 28
73940: PUSH
73941: LD_INT 20
73943: ST_TO_ADDR
// hc_gallery :=  ;
73944: LD_ADDR_OWVAR 33
73948: PUSH
73949: LD_STRING 
73951: ST_TO_ADDR
// end ;
73952: LD_VAR 0 1
73956: RET
// export function PrepareBird ( ) ; begin
73957: LD_INT 0
73959: PPUSH
// uc_side := 0 ;
73960: LD_ADDR_OWVAR 20
73964: PUSH
73965: LD_INT 0
73967: ST_TO_ADDR
// uc_nation := 0 ;
73968: LD_ADDR_OWVAR 21
73972: PUSH
73973: LD_INT 0
73975: ST_TO_ADDR
// hc_class := class_phororhacos ;
73976: LD_ADDR_OWVAR 28
73980: PUSH
73981: LD_INT 18
73983: ST_TO_ADDR
// hc_gallery :=  ;
73984: LD_ADDR_OWVAR 33
73988: PUSH
73989: LD_STRING 
73991: ST_TO_ADDR
// end ;
73992: LD_VAR 0 1
73996: RET
// export function PrepareHorse ( ) ; begin
73997: LD_INT 0
73999: PPUSH
// uc_side := 0 ;
74000: LD_ADDR_OWVAR 20
74004: PUSH
74005: LD_INT 0
74007: ST_TO_ADDR
// uc_nation := 0 ;
74008: LD_ADDR_OWVAR 21
74012: PUSH
74013: LD_INT 0
74015: ST_TO_ADDR
// hc_class := class_horse ;
74016: LD_ADDR_OWVAR 28
74020: PUSH
74021: LD_INT 21
74023: ST_TO_ADDR
// hc_gallery :=  ;
74024: LD_ADDR_OWVAR 33
74028: PUSH
74029: LD_STRING 
74031: ST_TO_ADDR
// end ;
74032: LD_VAR 0 1
74036: RET
// export function PrepareMastodont ( ) ; begin
74037: LD_INT 0
74039: PPUSH
// uc_side := 0 ;
74040: LD_ADDR_OWVAR 20
74044: PUSH
74045: LD_INT 0
74047: ST_TO_ADDR
// uc_nation := 0 ;
74048: LD_ADDR_OWVAR 21
74052: PUSH
74053: LD_INT 0
74055: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74056: LD_ADDR_OWVAR 37
74060: PUSH
74061: LD_INT 31
74063: ST_TO_ADDR
// vc_control := control_rider ;
74064: LD_ADDR_OWVAR 38
74068: PUSH
74069: LD_INT 4
74071: ST_TO_ADDR
// end ;
74072: LD_VAR 0 1
74076: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74077: LD_INT 0
74079: PPUSH
74080: PPUSH
74081: PPUSH
// uc_side = 0 ;
74082: LD_ADDR_OWVAR 20
74086: PUSH
74087: LD_INT 0
74089: ST_TO_ADDR
// uc_nation = 0 ;
74090: LD_ADDR_OWVAR 21
74094: PUSH
74095: LD_INT 0
74097: ST_TO_ADDR
// InitHc_All ( ) ;
74098: CALL_OW 584
// InitVc ;
74102: CALL_OW 20
// if mastodonts then
74106: LD_VAR 0 6
74110: IFFALSE 74177
// for i = 1 to mastodonts do
74112: LD_ADDR_VAR 0 11
74116: PUSH
74117: DOUBLE
74118: LD_INT 1
74120: DEC
74121: ST_TO_ADDR
74122: LD_VAR 0 6
74126: PUSH
74127: FOR_TO
74128: IFFALSE 74175
// begin vc_chassis := 31 ;
74130: LD_ADDR_OWVAR 37
74134: PUSH
74135: LD_INT 31
74137: ST_TO_ADDR
// vc_control := control_rider ;
74138: LD_ADDR_OWVAR 38
74142: PUSH
74143: LD_INT 4
74145: ST_TO_ADDR
// animal := CreateVehicle ;
74146: LD_ADDR_VAR 0 12
74150: PUSH
74151: CALL_OW 45
74155: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74156: LD_VAR 0 12
74160: PPUSH
74161: LD_VAR 0 8
74165: PPUSH
74166: LD_INT 0
74168: PPUSH
74169: CALL 76305 0 3
// end ;
74173: GO 74127
74175: POP
74176: POP
// if horses then
74177: LD_VAR 0 5
74181: IFFALSE 74248
// for i = 1 to horses do
74183: LD_ADDR_VAR 0 11
74187: PUSH
74188: DOUBLE
74189: LD_INT 1
74191: DEC
74192: ST_TO_ADDR
74193: LD_VAR 0 5
74197: PUSH
74198: FOR_TO
74199: IFFALSE 74246
// begin hc_class := 21 ;
74201: LD_ADDR_OWVAR 28
74205: PUSH
74206: LD_INT 21
74208: ST_TO_ADDR
// hc_gallery :=  ;
74209: LD_ADDR_OWVAR 33
74213: PUSH
74214: LD_STRING 
74216: ST_TO_ADDR
// animal := CreateHuman ;
74217: LD_ADDR_VAR 0 12
74221: PUSH
74222: CALL_OW 44
74226: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74227: LD_VAR 0 12
74231: PPUSH
74232: LD_VAR 0 8
74236: PPUSH
74237: LD_INT 0
74239: PPUSH
74240: CALL 76305 0 3
// end ;
74244: GO 74198
74246: POP
74247: POP
// if birds then
74248: LD_VAR 0 1
74252: IFFALSE 74319
// for i = 1 to birds do
74254: LD_ADDR_VAR 0 11
74258: PUSH
74259: DOUBLE
74260: LD_INT 1
74262: DEC
74263: ST_TO_ADDR
74264: LD_VAR 0 1
74268: PUSH
74269: FOR_TO
74270: IFFALSE 74317
// begin hc_class := 18 ;
74272: LD_ADDR_OWVAR 28
74276: PUSH
74277: LD_INT 18
74279: ST_TO_ADDR
// hc_gallery =  ;
74280: LD_ADDR_OWVAR 33
74284: PUSH
74285: LD_STRING 
74287: ST_TO_ADDR
// animal := CreateHuman ;
74288: LD_ADDR_VAR 0 12
74292: PUSH
74293: CALL_OW 44
74297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74298: LD_VAR 0 12
74302: PPUSH
74303: LD_VAR 0 8
74307: PPUSH
74308: LD_INT 0
74310: PPUSH
74311: CALL 76305 0 3
// end ;
74315: GO 74269
74317: POP
74318: POP
// if tigers then
74319: LD_VAR 0 2
74323: IFFALSE 74407
// for i = 1 to tigers do
74325: LD_ADDR_VAR 0 11
74329: PUSH
74330: DOUBLE
74331: LD_INT 1
74333: DEC
74334: ST_TO_ADDR
74335: LD_VAR 0 2
74339: PUSH
74340: FOR_TO
74341: IFFALSE 74405
// begin hc_class = class_tiger ;
74343: LD_ADDR_OWVAR 28
74347: PUSH
74348: LD_INT 14
74350: ST_TO_ADDR
// hc_gallery =  ;
74351: LD_ADDR_OWVAR 33
74355: PUSH
74356: LD_STRING 
74358: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74359: LD_ADDR_OWVAR 35
74363: PUSH
74364: LD_INT 7
74366: NEG
74367: PPUSH
74368: LD_INT 7
74370: PPUSH
74371: CALL_OW 12
74375: ST_TO_ADDR
// animal := CreateHuman ;
74376: LD_ADDR_VAR 0 12
74380: PUSH
74381: CALL_OW 44
74385: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74386: LD_VAR 0 12
74390: PPUSH
74391: LD_VAR 0 8
74395: PPUSH
74396: LD_INT 0
74398: PPUSH
74399: CALL 76305 0 3
// end ;
74403: GO 74340
74405: POP
74406: POP
// if apemans then
74407: LD_VAR 0 3
74411: IFFALSE 74534
// for i = 1 to apemans do
74413: LD_ADDR_VAR 0 11
74417: PUSH
74418: DOUBLE
74419: LD_INT 1
74421: DEC
74422: ST_TO_ADDR
74423: LD_VAR 0 3
74427: PUSH
74428: FOR_TO
74429: IFFALSE 74532
// begin hc_class = class_apeman ;
74431: LD_ADDR_OWVAR 28
74435: PUSH
74436: LD_INT 12
74438: ST_TO_ADDR
// hc_gallery =  ;
74439: LD_ADDR_OWVAR 33
74443: PUSH
74444: LD_STRING 
74446: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74447: LD_ADDR_OWVAR 35
74451: PUSH
74452: LD_INT 2
74454: NEG
74455: PPUSH
74456: LD_INT 2
74458: PPUSH
74459: CALL_OW 12
74463: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74464: LD_ADDR_OWVAR 31
74468: PUSH
74469: LD_INT 1
74471: PPUSH
74472: LD_INT 3
74474: PPUSH
74475: CALL_OW 12
74479: PUSH
74480: LD_INT 1
74482: PPUSH
74483: LD_INT 3
74485: PPUSH
74486: CALL_OW 12
74490: PUSH
74491: LD_INT 0
74493: PUSH
74494: LD_INT 0
74496: PUSH
74497: EMPTY
74498: LIST
74499: LIST
74500: LIST
74501: LIST
74502: ST_TO_ADDR
// animal := CreateHuman ;
74503: LD_ADDR_VAR 0 12
74507: PUSH
74508: CALL_OW 44
74512: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74513: LD_VAR 0 12
74517: PPUSH
74518: LD_VAR 0 8
74522: PPUSH
74523: LD_INT 0
74525: PPUSH
74526: CALL 76305 0 3
// end ;
74530: GO 74428
74532: POP
74533: POP
// if enchidnas then
74534: LD_VAR 0 4
74538: IFFALSE 74605
// for i = 1 to enchidnas do
74540: LD_ADDR_VAR 0 11
74544: PUSH
74545: DOUBLE
74546: LD_INT 1
74548: DEC
74549: ST_TO_ADDR
74550: LD_VAR 0 4
74554: PUSH
74555: FOR_TO
74556: IFFALSE 74603
// begin hc_class = 13 ;
74558: LD_ADDR_OWVAR 28
74562: PUSH
74563: LD_INT 13
74565: ST_TO_ADDR
// hc_gallery =  ;
74566: LD_ADDR_OWVAR 33
74570: PUSH
74571: LD_STRING 
74573: ST_TO_ADDR
// animal := CreateHuman ;
74574: LD_ADDR_VAR 0 12
74578: PUSH
74579: CALL_OW 44
74583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74584: LD_VAR 0 12
74588: PPUSH
74589: LD_VAR 0 8
74593: PPUSH
74594: LD_INT 0
74596: PPUSH
74597: CALL 76305 0 3
// end ;
74601: GO 74555
74603: POP
74604: POP
// if fishes then
74605: LD_VAR 0 7
74609: IFFALSE 74676
// for i = 1 to fishes do
74611: LD_ADDR_VAR 0 11
74615: PUSH
74616: DOUBLE
74617: LD_INT 1
74619: DEC
74620: ST_TO_ADDR
74621: LD_VAR 0 7
74625: PUSH
74626: FOR_TO
74627: IFFALSE 74674
// begin hc_class = 20 ;
74629: LD_ADDR_OWVAR 28
74633: PUSH
74634: LD_INT 20
74636: ST_TO_ADDR
// hc_gallery =  ;
74637: LD_ADDR_OWVAR 33
74641: PUSH
74642: LD_STRING 
74644: ST_TO_ADDR
// animal := CreateHuman ;
74645: LD_ADDR_VAR 0 12
74649: PUSH
74650: CALL_OW 44
74654: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74655: LD_VAR 0 12
74659: PPUSH
74660: LD_VAR 0 9
74664: PPUSH
74665: LD_INT 0
74667: PPUSH
74668: CALL 76305 0 3
// end ;
74672: GO 74626
74674: POP
74675: POP
// end ;
74676: LD_VAR 0 10
74680: RET
// export function WantHeal ( sci , unit ) ; begin
74681: LD_INT 0
74683: PPUSH
// if GetTaskList ( sci ) > 0 then
74684: LD_VAR 0 1
74688: PPUSH
74689: CALL_OW 437
74693: PUSH
74694: LD_INT 0
74696: GREATER
74697: IFFALSE 74767
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74699: LD_VAR 0 1
74703: PPUSH
74704: CALL_OW 437
74708: PUSH
74709: LD_INT 1
74711: ARRAY
74712: PUSH
74713: LD_INT 1
74715: ARRAY
74716: PUSH
74717: LD_STRING l
74719: EQUAL
74720: PUSH
74721: LD_VAR 0 1
74725: PPUSH
74726: CALL_OW 437
74730: PUSH
74731: LD_INT 1
74733: ARRAY
74734: PUSH
74735: LD_INT 4
74737: ARRAY
74738: PUSH
74739: LD_VAR 0 2
74743: EQUAL
74744: AND
74745: IFFALSE 74757
// result := true else
74747: LD_ADDR_VAR 0 3
74751: PUSH
74752: LD_INT 1
74754: ST_TO_ADDR
74755: GO 74765
// result := false ;
74757: LD_ADDR_VAR 0 3
74761: PUSH
74762: LD_INT 0
74764: ST_TO_ADDR
// end else
74765: GO 74775
// result := false ;
74767: LD_ADDR_VAR 0 3
74771: PUSH
74772: LD_INT 0
74774: ST_TO_ADDR
// end ;
74775: LD_VAR 0 3
74779: RET
// export function HealTarget ( sci ) ; begin
74780: LD_INT 0
74782: PPUSH
// if not sci then
74783: LD_VAR 0 1
74787: NOT
74788: IFFALSE 74792
// exit ;
74790: GO 74857
// result := 0 ;
74792: LD_ADDR_VAR 0 2
74796: PUSH
74797: LD_INT 0
74799: ST_TO_ADDR
// if GetTaskList ( sci ) then
74800: LD_VAR 0 1
74804: PPUSH
74805: CALL_OW 437
74809: IFFALSE 74857
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74811: LD_VAR 0 1
74815: PPUSH
74816: CALL_OW 437
74820: PUSH
74821: LD_INT 1
74823: ARRAY
74824: PUSH
74825: LD_INT 1
74827: ARRAY
74828: PUSH
74829: LD_STRING l
74831: EQUAL
74832: IFFALSE 74857
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74834: LD_ADDR_VAR 0 2
74838: PUSH
74839: LD_VAR 0 1
74843: PPUSH
74844: CALL_OW 437
74848: PUSH
74849: LD_INT 1
74851: ARRAY
74852: PUSH
74853: LD_INT 4
74855: ARRAY
74856: ST_TO_ADDR
// end ;
74857: LD_VAR 0 2
74861: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74862: LD_INT 0
74864: PPUSH
74865: PPUSH
74866: PPUSH
74867: PPUSH
// if not base_units then
74868: LD_VAR 0 1
74872: NOT
74873: IFFALSE 74877
// exit ;
74875: GO 74964
// result := false ;
74877: LD_ADDR_VAR 0 2
74881: PUSH
74882: LD_INT 0
74884: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74885: LD_ADDR_VAR 0 5
74889: PUSH
74890: LD_VAR 0 1
74894: PPUSH
74895: LD_INT 21
74897: PUSH
74898: LD_INT 3
74900: PUSH
74901: EMPTY
74902: LIST
74903: LIST
74904: PPUSH
74905: CALL_OW 72
74909: ST_TO_ADDR
// if not tmp then
74910: LD_VAR 0 5
74914: NOT
74915: IFFALSE 74919
// exit ;
74917: GO 74964
// for i in tmp do
74919: LD_ADDR_VAR 0 3
74923: PUSH
74924: LD_VAR 0 5
74928: PUSH
74929: FOR_IN
74930: IFFALSE 74962
// begin result := EnemyInRange ( i , 22 ) ;
74932: LD_ADDR_VAR 0 2
74936: PUSH
74937: LD_VAR 0 3
74941: PPUSH
74942: LD_INT 22
74944: PPUSH
74945: CALL 72551 0 2
74949: ST_TO_ADDR
// if result then
74950: LD_VAR 0 2
74954: IFFALSE 74960
// exit ;
74956: POP
74957: POP
74958: GO 74964
// end ;
74960: GO 74929
74962: POP
74963: POP
// end ;
74964: LD_VAR 0 2
74968: RET
// export function FilterByTag ( units , tag ) ; begin
74969: LD_INT 0
74971: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74972: LD_ADDR_VAR 0 3
74976: PUSH
74977: LD_VAR 0 1
74981: PPUSH
74982: LD_INT 120
74984: PUSH
74985: LD_VAR 0 2
74989: PUSH
74990: EMPTY
74991: LIST
74992: LIST
74993: PPUSH
74994: CALL_OW 72
74998: ST_TO_ADDR
// end ;
74999: LD_VAR 0 3
75003: RET
// export function IsDriver ( un ) ; begin
75004: LD_INT 0
75006: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75007: LD_ADDR_VAR 0 2
75011: PUSH
75012: LD_VAR 0 1
75016: PUSH
75017: LD_INT 55
75019: PUSH
75020: EMPTY
75021: LIST
75022: PPUSH
75023: CALL_OW 69
75027: IN
75028: ST_TO_ADDR
// end ;
75029: LD_VAR 0 2
75033: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75034: LD_INT 0
75036: PPUSH
75037: PPUSH
// list := [ ] ;
75038: LD_ADDR_VAR 0 5
75042: PUSH
75043: EMPTY
75044: ST_TO_ADDR
// case d of 0 :
75045: LD_VAR 0 3
75049: PUSH
75050: LD_INT 0
75052: DOUBLE
75053: EQUAL
75054: IFTRUE 75058
75056: GO 75191
75058: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75059: LD_ADDR_VAR 0 5
75063: PUSH
75064: LD_VAR 0 1
75068: PUSH
75069: LD_INT 4
75071: MINUS
75072: PUSH
75073: LD_VAR 0 2
75077: PUSH
75078: LD_INT 4
75080: MINUS
75081: PUSH
75082: LD_INT 2
75084: PUSH
75085: EMPTY
75086: LIST
75087: LIST
75088: LIST
75089: PUSH
75090: LD_VAR 0 1
75094: PUSH
75095: LD_INT 3
75097: MINUS
75098: PUSH
75099: LD_VAR 0 2
75103: PUSH
75104: LD_INT 1
75106: PUSH
75107: EMPTY
75108: LIST
75109: LIST
75110: LIST
75111: PUSH
75112: LD_VAR 0 1
75116: PUSH
75117: LD_INT 4
75119: PLUS
75120: PUSH
75121: LD_VAR 0 2
75125: PUSH
75126: LD_INT 4
75128: PUSH
75129: EMPTY
75130: LIST
75131: LIST
75132: LIST
75133: PUSH
75134: LD_VAR 0 1
75138: PUSH
75139: LD_INT 3
75141: PLUS
75142: PUSH
75143: LD_VAR 0 2
75147: PUSH
75148: LD_INT 3
75150: PLUS
75151: PUSH
75152: LD_INT 5
75154: PUSH
75155: EMPTY
75156: LIST
75157: LIST
75158: LIST
75159: PUSH
75160: LD_VAR 0 1
75164: PUSH
75165: LD_VAR 0 2
75169: PUSH
75170: LD_INT 4
75172: PLUS
75173: PUSH
75174: LD_INT 0
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: LIST
75181: PUSH
75182: EMPTY
75183: LIST
75184: LIST
75185: LIST
75186: LIST
75187: LIST
75188: ST_TO_ADDR
// end ; 1 :
75189: GO 75889
75191: LD_INT 1
75193: DOUBLE
75194: EQUAL
75195: IFTRUE 75199
75197: GO 75332
75199: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75200: LD_ADDR_VAR 0 5
75204: PUSH
75205: LD_VAR 0 1
75209: PUSH
75210: LD_VAR 0 2
75214: PUSH
75215: LD_INT 4
75217: MINUS
75218: PUSH
75219: LD_INT 3
75221: PUSH
75222: EMPTY
75223: LIST
75224: LIST
75225: LIST
75226: PUSH
75227: LD_VAR 0 1
75231: PUSH
75232: LD_INT 3
75234: MINUS
75235: PUSH
75236: LD_VAR 0 2
75240: PUSH
75241: LD_INT 3
75243: MINUS
75244: PUSH
75245: LD_INT 2
75247: PUSH
75248: EMPTY
75249: LIST
75250: LIST
75251: LIST
75252: PUSH
75253: LD_VAR 0 1
75257: PUSH
75258: LD_INT 4
75260: MINUS
75261: PUSH
75262: LD_VAR 0 2
75266: PUSH
75267: LD_INT 1
75269: PUSH
75270: EMPTY
75271: LIST
75272: LIST
75273: LIST
75274: PUSH
75275: LD_VAR 0 1
75279: PUSH
75280: LD_VAR 0 2
75284: PUSH
75285: LD_INT 3
75287: PLUS
75288: PUSH
75289: LD_INT 0
75291: PUSH
75292: EMPTY
75293: LIST
75294: LIST
75295: LIST
75296: PUSH
75297: LD_VAR 0 1
75301: PUSH
75302: LD_INT 4
75304: PLUS
75305: PUSH
75306: LD_VAR 0 2
75310: PUSH
75311: LD_INT 4
75313: PLUS
75314: PUSH
75315: LD_INT 5
75317: PUSH
75318: EMPTY
75319: LIST
75320: LIST
75321: LIST
75322: PUSH
75323: EMPTY
75324: LIST
75325: LIST
75326: LIST
75327: LIST
75328: LIST
75329: ST_TO_ADDR
// end ; 2 :
75330: GO 75889
75332: LD_INT 2
75334: DOUBLE
75335: EQUAL
75336: IFTRUE 75340
75338: GO 75469
75340: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75341: LD_ADDR_VAR 0 5
75345: PUSH
75346: LD_VAR 0 1
75350: PUSH
75351: LD_VAR 0 2
75355: PUSH
75356: LD_INT 3
75358: MINUS
75359: PUSH
75360: LD_INT 3
75362: PUSH
75363: EMPTY
75364: LIST
75365: LIST
75366: LIST
75367: PUSH
75368: LD_VAR 0 1
75372: PUSH
75373: LD_INT 4
75375: PLUS
75376: PUSH
75377: LD_VAR 0 2
75381: PUSH
75382: LD_INT 4
75384: PUSH
75385: EMPTY
75386: LIST
75387: LIST
75388: LIST
75389: PUSH
75390: LD_VAR 0 1
75394: PUSH
75395: LD_VAR 0 2
75399: PUSH
75400: LD_INT 4
75402: PLUS
75403: PUSH
75404: LD_INT 0
75406: PUSH
75407: EMPTY
75408: LIST
75409: LIST
75410: LIST
75411: PUSH
75412: LD_VAR 0 1
75416: PUSH
75417: LD_INT 3
75419: MINUS
75420: PUSH
75421: LD_VAR 0 2
75425: PUSH
75426: LD_INT 1
75428: PUSH
75429: EMPTY
75430: LIST
75431: LIST
75432: LIST
75433: PUSH
75434: LD_VAR 0 1
75438: PUSH
75439: LD_INT 4
75441: MINUS
75442: PUSH
75443: LD_VAR 0 2
75447: PUSH
75448: LD_INT 4
75450: MINUS
75451: PUSH
75452: LD_INT 2
75454: PUSH
75455: EMPTY
75456: LIST
75457: LIST
75458: LIST
75459: PUSH
75460: EMPTY
75461: LIST
75462: LIST
75463: LIST
75464: LIST
75465: LIST
75466: ST_TO_ADDR
// end ; 3 :
75467: GO 75889
75469: LD_INT 3
75471: DOUBLE
75472: EQUAL
75473: IFTRUE 75477
75475: GO 75610
75477: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75478: LD_ADDR_VAR 0 5
75482: PUSH
75483: LD_VAR 0 1
75487: PUSH
75488: LD_INT 3
75490: PLUS
75491: PUSH
75492: LD_VAR 0 2
75496: PUSH
75497: LD_INT 4
75499: PUSH
75500: EMPTY
75501: LIST
75502: LIST
75503: LIST
75504: PUSH
75505: LD_VAR 0 1
75509: PUSH
75510: LD_INT 4
75512: PLUS
75513: PUSH
75514: LD_VAR 0 2
75518: PUSH
75519: LD_INT 4
75521: PLUS
75522: PUSH
75523: LD_INT 5
75525: PUSH
75526: EMPTY
75527: LIST
75528: LIST
75529: LIST
75530: PUSH
75531: LD_VAR 0 1
75535: PUSH
75536: LD_INT 4
75538: MINUS
75539: PUSH
75540: LD_VAR 0 2
75544: PUSH
75545: LD_INT 1
75547: PUSH
75548: EMPTY
75549: LIST
75550: LIST
75551: LIST
75552: PUSH
75553: LD_VAR 0 1
75557: PUSH
75558: LD_VAR 0 2
75562: PUSH
75563: LD_INT 4
75565: MINUS
75566: PUSH
75567: LD_INT 3
75569: PUSH
75570: EMPTY
75571: LIST
75572: LIST
75573: LIST
75574: PUSH
75575: LD_VAR 0 1
75579: PUSH
75580: LD_INT 3
75582: MINUS
75583: PUSH
75584: LD_VAR 0 2
75588: PUSH
75589: LD_INT 3
75591: MINUS
75592: PUSH
75593: LD_INT 2
75595: PUSH
75596: EMPTY
75597: LIST
75598: LIST
75599: LIST
75600: PUSH
75601: EMPTY
75602: LIST
75603: LIST
75604: LIST
75605: LIST
75606: LIST
75607: ST_TO_ADDR
// end ; 4 :
75608: GO 75889
75610: LD_INT 4
75612: DOUBLE
75613: EQUAL
75614: IFTRUE 75618
75616: GO 75751
75618: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75619: LD_ADDR_VAR 0 5
75623: PUSH
75624: LD_VAR 0 1
75628: PUSH
75629: LD_VAR 0 2
75633: PUSH
75634: LD_INT 4
75636: PLUS
75637: PUSH
75638: LD_INT 0
75640: PUSH
75641: EMPTY
75642: LIST
75643: LIST
75644: LIST
75645: PUSH
75646: LD_VAR 0 1
75650: PUSH
75651: LD_INT 3
75653: PLUS
75654: PUSH
75655: LD_VAR 0 2
75659: PUSH
75660: LD_INT 3
75662: PLUS
75663: PUSH
75664: LD_INT 5
75666: PUSH
75667: EMPTY
75668: LIST
75669: LIST
75670: LIST
75671: PUSH
75672: LD_VAR 0 1
75676: PUSH
75677: LD_INT 4
75679: PLUS
75680: PUSH
75681: LD_VAR 0 2
75685: PUSH
75686: LD_INT 4
75688: PUSH
75689: EMPTY
75690: LIST
75691: LIST
75692: LIST
75693: PUSH
75694: LD_VAR 0 1
75698: PUSH
75699: LD_VAR 0 2
75703: PUSH
75704: LD_INT 3
75706: MINUS
75707: PUSH
75708: LD_INT 3
75710: PUSH
75711: EMPTY
75712: LIST
75713: LIST
75714: LIST
75715: PUSH
75716: LD_VAR 0 1
75720: PUSH
75721: LD_INT 4
75723: MINUS
75724: PUSH
75725: LD_VAR 0 2
75729: PUSH
75730: LD_INT 4
75732: MINUS
75733: PUSH
75734: LD_INT 2
75736: PUSH
75737: EMPTY
75738: LIST
75739: LIST
75740: LIST
75741: PUSH
75742: EMPTY
75743: LIST
75744: LIST
75745: LIST
75746: LIST
75747: LIST
75748: ST_TO_ADDR
// end ; 5 :
75749: GO 75889
75751: LD_INT 5
75753: DOUBLE
75754: EQUAL
75755: IFTRUE 75759
75757: GO 75888
75759: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75760: LD_ADDR_VAR 0 5
75764: PUSH
75765: LD_VAR 0 1
75769: PUSH
75770: LD_INT 4
75772: MINUS
75773: PUSH
75774: LD_VAR 0 2
75778: PUSH
75779: LD_INT 1
75781: PUSH
75782: EMPTY
75783: LIST
75784: LIST
75785: LIST
75786: PUSH
75787: LD_VAR 0 1
75791: PUSH
75792: LD_VAR 0 2
75796: PUSH
75797: LD_INT 4
75799: MINUS
75800: PUSH
75801: LD_INT 3
75803: PUSH
75804: EMPTY
75805: LIST
75806: LIST
75807: LIST
75808: PUSH
75809: LD_VAR 0 1
75813: PUSH
75814: LD_INT 4
75816: PLUS
75817: PUSH
75818: LD_VAR 0 2
75822: PUSH
75823: LD_INT 4
75825: PLUS
75826: PUSH
75827: LD_INT 5
75829: PUSH
75830: EMPTY
75831: LIST
75832: LIST
75833: LIST
75834: PUSH
75835: LD_VAR 0 1
75839: PUSH
75840: LD_INT 3
75842: PLUS
75843: PUSH
75844: LD_VAR 0 2
75848: PUSH
75849: LD_INT 4
75851: PUSH
75852: EMPTY
75853: LIST
75854: LIST
75855: LIST
75856: PUSH
75857: LD_VAR 0 1
75861: PUSH
75862: LD_VAR 0 2
75866: PUSH
75867: LD_INT 3
75869: PLUS
75870: PUSH
75871: LD_INT 0
75873: PUSH
75874: EMPTY
75875: LIST
75876: LIST
75877: LIST
75878: PUSH
75879: EMPTY
75880: LIST
75881: LIST
75882: LIST
75883: LIST
75884: LIST
75885: ST_TO_ADDR
// end ; end ;
75886: GO 75889
75888: POP
// result := list ;
75889: LD_ADDR_VAR 0 4
75893: PUSH
75894: LD_VAR 0 5
75898: ST_TO_ADDR
// end ;
75899: LD_VAR 0 4
75903: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75904: LD_INT 0
75906: PPUSH
75907: PPUSH
75908: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75909: LD_VAR 0 1
75913: NOT
75914: PUSH
75915: LD_VAR 0 2
75919: PUSH
75920: LD_INT 1
75922: PUSH
75923: LD_INT 2
75925: PUSH
75926: LD_INT 3
75928: PUSH
75929: LD_INT 4
75931: PUSH
75932: EMPTY
75933: LIST
75934: LIST
75935: LIST
75936: LIST
75937: IN
75938: NOT
75939: OR
75940: IFFALSE 75944
// exit ;
75942: GO 76027
// tmp := [ ] ;
75944: LD_ADDR_VAR 0 5
75948: PUSH
75949: EMPTY
75950: ST_TO_ADDR
// for i in units do
75951: LD_ADDR_VAR 0 4
75955: PUSH
75956: LD_VAR 0 1
75960: PUSH
75961: FOR_IN
75962: IFFALSE 75996
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75964: LD_ADDR_VAR 0 5
75968: PUSH
75969: LD_VAR 0 5
75973: PPUSH
75974: LD_VAR 0 4
75978: PPUSH
75979: LD_VAR 0 2
75983: PPUSH
75984: CALL_OW 259
75988: PPUSH
75989: CALL 77400 0 2
75993: ST_TO_ADDR
75994: GO 75961
75996: POP
75997: POP
// if not tmp then
75998: LD_VAR 0 5
76002: NOT
76003: IFFALSE 76007
// exit ;
76005: GO 76027
// result := SortListByListDesc ( units , tmp ) ;
76007: LD_ADDR_VAR 0 3
76011: PUSH
76012: LD_VAR 0 1
76016: PPUSH
76017: LD_VAR 0 5
76021: PPUSH
76022: CALL_OW 77
76026: ST_TO_ADDR
// end ;
76027: LD_VAR 0 3
76031: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76032: LD_INT 0
76034: PPUSH
76035: PPUSH
76036: PPUSH
// result := false ;
76037: LD_ADDR_VAR 0 3
76041: PUSH
76042: LD_INT 0
76044: ST_TO_ADDR
// if not building then
76045: LD_VAR 0 2
76049: NOT
76050: IFFALSE 76054
// exit ;
76052: GO 76192
// x := GetX ( building ) ;
76054: LD_ADDR_VAR 0 4
76058: PUSH
76059: LD_VAR 0 2
76063: PPUSH
76064: CALL_OW 250
76068: ST_TO_ADDR
// y := GetY ( building ) ;
76069: LD_ADDR_VAR 0 5
76073: PUSH
76074: LD_VAR 0 2
76078: PPUSH
76079: CALL_OW 251
76083: ST_TO_ADDR
// if not x or not y then
76084: LD_VAR 0 4
76088: NOT
76089: PUSH
76090: LD_VAR 0 5
76094: NOT
76095: OR
76096: IFFALSE 76100
// exit ;
76098: GO 76192
// if GetTaskList ( unit ) then
76100: LD_VAR 0 1
76104: PPUSH
76105: CALL_OW 437
76109: IFFALSE 76192
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76111: LD_STRING e
76113: PUSH
76114: LD_VAR 0 1
76118: PPUSH
76119: CALL_OW 437
76123: PUSH
76124: LD_INT 1
76126: ARRAY
76127: PUSH
76128: LD_INT 1
76130: ARRAY
76131: EQUAL
76132: PUSH
76133: LD_VAR 0 4
76137: PUSH
76138: LD_VAR 0 1
76142: PPUSH
76143: CALL_OW 437
76147: PUSH
76148: LD_INT 1
76150: ARRAY
76151: PUSH
76152: LD_INT 2
76154: ARRAY
76155: EQUAL
76156: AND
76157: PUSH
76158: LD_VAR 0 5
76162: PUSH
76163: LD_VAR 0 1
76167: PPUSH
76168: CALL_OW 437
76172: PUSH
76173: LD_INT 1
76175: ARRAY
76176: PUSH
76177: LD_INT 3
76179: ARRAY
76180: EQUAL
76181: AND
76182: IFFALSE 76192
// result := true end ;
76184: LD_ADDR_VAR 0 3
76188: PUSH
76189: LD_INT 1
76191: ST_TO_ADDR
// end ;
76192: LD_VAR 0 3
76196: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76197: LD_INT 0
76199: PPUSH
// result := false ;
76200: LD_ADDR_VAR 0 4
76204: PUSH
76205: LD_INT 0
76207: ST_TO_ADDR
// if GetTaskList ( unit ) then
76208: LD_VAR 0 1
76212: PPUSH
76213: CALL_OW 437
76217: IFFALSE 76300
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76219: LD_STRING M
76221: PUSH
76222: LD_VAR 0 1
76226: PPUSH
76227: CALL_OW 437
76231: PUSH
76232: LD_INT 1
76234: ARRAY
76235: PUSH
76236: LD_INT 1
76238: ARRAY
76239: EQUAL
76240: PUSH
76241: LD_VAR 0 2
76245: PUSH
76246: LD_VAR 0 1
76250: PPUSH
76251: CALL_OW 437
76255: PUSH
76256: LD_INT 1
76258: ARRAY
76259: PUSH
76260: LD_INT 2
76262: ARRAY
76263: EQUAL
76264: AND
76265: PUSH
76266: LD_VAR 0 3
76270: PUSH
76271: LD_VAR 0 1
76275: PPUSH
76276: CALL_OW 437
76280: PUSH
76281: LD_INT 1
76283: ARRAY
76284: PUSH
76285: LD_INT 3
76287: ARRAY
76288: EQUAL
76289: AND
76290: IFFALSE 76300
// result := true ;
76292: LD_ADDR_VAR 0 4
76296: PUSH
76297: LD_INT 1
76299: ST_TO_ADDR
// end ; end ;
76300: LD_VAR 0 4
76304: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76305: LD_INT 0
76307: PPUSH
76308: PPUSH
76309: PPUSH
76310: PPUSH
// if not unit or not area then
76311: LD_VAR 0 1
76315: NOT
76316: PUSH
76317: LD_VAR 0 2
76321: NOT
76322: OR
76323: IFFALSE 76327
// exit ;
76325: GO 76503
// tmp := AreaToList ( area , i ) ;
76327: LD_ADDR_VAR 0 6
76331: PUSH
76332: LD_VAR 0 2
76336: PPUSH
76337: LD_VAR 0 5
76341: PPUSH
76342: CALL_OW 517
76346: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76347: LD_ADDR_VAR 0 5
76351: PUSH
76352: DOUBLE
76353: LD_INT 1
76355: DEC
76356: ST_TO_ADDR
76357: LD_VAR 0 6
76361: PUSH
76362: LD_INT 1
76364: ARRAY
76365: PUSH
76366: FOR_TO
76367: IFFALSE 76501
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76369: LD_ADDR_VAR 0 7
76373: PUSH
76374: LD_VAR 0 6
76378: PUSH
76379: LD_INT 1
76381: ARRAY
76382: PUSH
76383: LD_VAR 0 5
76387: ARRAY
76388: PUSH
76389: LD_VAR 0 6
76393: PUSH
76394: LD_INT 2
76396: ARRAY
76397: PUSH
76398: LD_VAR 0 5
76402: ARRAY
76403: PUSH
76404: EMPTY
76405: LIST
76406: LIST
76407: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
76408: LD_INT 92
76410: PUSH
76411: LD_VAR 0 7
76415: PUSH
76416: LD_INT 1
76418: ARRAY
76419: PUSH
76420: LD_VAR 0 7
76424: PUSH
76425: LD_INT 2
76427: ARRAY
76428: PUSH
76429: LD_INT 2
76431: PUSH
76432: EMPTY
76433: LIST
76434: LIST
76435: LIST
76436: LIST
76437: PPUSH
76438: CALL_OW 69
76442: PUSH
76443: LD_INT 0
76445: EQUAL
76446: IFFALSE 76499
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76448: LD_VAR 0 1
76452: PPUSH
76453: LD_VAR 0 7
76457: PUSH
76458: LD_INT 1
76460: ARRAY
76461: PPUSH
76462: LD_VAR 0 7
76466: PUSH
76467: LD_INT 2
76469: ARRAY
76470: PPUSH
76471: LD_VAR 0 3
76475: PPUSH
76476: CALL_OW 48
// result := IsPlaced ( unit ) ;
76480: LD_ADDR_VAR 0 4
76484: PUSH
76485: LD_VAR 0 1
76489: PPUSH
76490: CALL_OW 305
76494: ST_TO_ADDR
// exit ;
76495: POP
76496: POP
76497: GO 76503
// end ; end ;
76499: GO 76366
76501: POP
76502: POP
// end ;
76503: LD_VAR 0 4
76507: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76508: LD_INT 0
76510: PPUSH
76511: PPUSH
76512: PPUSH
// if not side or side > 8 then
76513: LD_VAR 0 1
76517: NOT
76518: PUSH
76519: LD_VAR 0 1
76523: PUSH
76524: LD_INT 8
76526: GREATER
76527: OR
76528: IFFALSE 76532
// exit ;
76530: GO 76719
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76532: LD_ADDR_VAR 0 4
76536: PUSH
76537: LD_INT 22
76539: PUSH
76540: LD_VAR 0 1
76544: PUSH
76545: EMPTY
76546: LIST
76547: LIST
76548: PUSH
76549: LD_INT 21
76551: PUSH
76552: LD_INT 3
76554: PUSH
76555: EMPTY
76556: LIST
76557: LIST
76558: PUSH
76559: EMPTY
76560: LIST
76561: LIST
76562: PPUSH
76563: CALL_OW 69
76567: ST_TO_ADDR
// if not tmp then
76568: LD_VAR 0 4
76572: NOT
76573: IFFALSE 76577
// exit ;
76575: GO 76719
// enable_addtolog := true ;
76577: LD_ADDR_OWVAR 81
76581: PUSH
76582: LD_INT 1
76584: ST_TO_ADDR
// AddToLog ( [ ) ;
76585: LD_STRING [
76587: PPUSH
76588: CALL_OW 561
// for i in tmp do
76592: LD_ADDR_VAR 0 3
76596: PUSH
76597: LD_VAR 0 4
76601: PUSH
76602: FOR_IN
76603: IFFALSE 76710
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76605: LD_STRING [
76607: PUSH
76608: LD_VAR 0 3
76612: PPUSH
76613: CALL_OW 266
76617: STR
76618: PUSH
76619: LD_STRING , 
76621: STR
76622: PUSH
76623: LD_VAR 0 3
76627: PPUSH
76628: CALL_OW 250
76632: STR
76633: PUSH
76634: LD_STRING , 
76636: STR
76637: PUSH
76638: LD_VAR 0 3
76642: PPUSH
76643: CALL_OW 251
76647: STR
76648: PUSH
76649: LD_STRING , 
76651: STR
76652: PUSH
76653: LD_VAR 0 3
76657: PPUSH
76658: CALL_OW 254
76662: STR
76663: PUSH
76664: LD_STRING , 
76666: STR
76667: PUSH
76668: LD_VAR 0 3
76672: PPUSH
76673: LD_INT 1
76675: PPUSH
76676: CALL_OW 268
76680: STR
76681: PUSH
76682: LD_STRING , 
76684: STR
76685: PUSH
76686: LD_VAR 0 3
76690: PPUSH
76691: LD_INT 2
76693: PPUSH
76694: CALL_OW 268
76698: STR
76699: PUSH
76700: LD_STRING ],
76702: STR
76703: PPUSH
76704: CALL_OW 561
// end ;
76708: GO 76602
76710: POP
76711: POP
// AddToLog ( ]; ) ;
76712: LD_STRING ];
76714: PPUSH
76715: CALL_OW 561
// end ;
76719: LD_VAR 0 2
76723: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76724: LD_INT 0
76726: PPUSH
76727: PPUSH
76728: PPUSH
76729: PPUSH
76730: PPUSH
// if not area or not rate or not max then
76731: LD_VAR 0 1
76735: NOT
76736: PUSH
76737: LD_VAR 0 2
76741: NOT
76742: OR
76743: PUSH
76744: LD_VAR 0 4
76748: NOT
76749: OR
76750: IFFALSE 76754
// exit ;
76752: GO 76943
// while 1 do
76754: LD_INT 1
76756: IFFALSE 76943
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76758: LD_ADDR_VAR 0 9
76762: PUSH
76763: LD_VAR 0 1
76767: PPUSH
76768: LD_INT 1
76770: PPUSH
76771: CALL_OW 287
76775: PUSH
76776: LD_INT 10
76778: MUL
76779: ST_TO_ADDR
// r := rate / 10 ;
76780: LD_ADDR_VAR 0 7
76784: PUSH
76785: LD_VAR 0 2
76789: PUSH
76790: LD_INT 10
76792: DIVREAL
76793: ST_TO_ADDR
// time := 1 1$00 ;
76794: LD_ADDR_VAR 0 8
76798: PUSH
76799: LD_INT 2100
76801: ST_TO_ADDR
// if amount < min then
76802: LD_VAR 0 9
76806: PUSH
76807: LD_VAR 0 3
76811: LESS
76812: IFFALSE 76830
// r := r * 2 else
76814: LD_ADDR_VAR 0 7
76818: PUSH
76819: LD_VAR 0 7
76823: PUSH
76824: LD_INT 2
76826: MUL
76827: ST_TO_ADDR
76828: GO 76856
// if amount > max then
76830: LD_VAR 0 9
76834: PUSH
76835: LD_VAR 0 4
76839: GREATER
76840: IFFALSE 76856
// r := r / 2 ;
76842: LD_ADDR_VAR 0 7
76846: PUSH
76847: LD_VAR 0 7
76851: PUSH
76852: LD_INT 2
76854: DIVREAL
76855: ST_TO_ADDR
// time := time / r ;
76856: LD_ADDR_VAR 0 8
76860: PUSH
76861: LD_VAR 0 8
76865: PUSH
76866: LD_VAR 0 7
76870: DIVREAL
76871: ST_TO_ADDR
// if time < 0 then
76872: LD_VAR 0 8
76876: PUSH
76877: LD_INT 0
76879: LESS
76880: IFFALSE 76897
// time := time * - 1 ;
76882: LD_ADDR_VAR 0 8
76886: PUSH
76887: LD_VAR 0 8
76891: PUSH
76892: LD_INT 1
76894: NEG
76895: MUL
76896: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76897: LD_VAR 0 8
76901: PUSH
76902: LD_INT 35
76904: PPUSH
76905: LD_INT 875
76907: PPUSH
76908: CALL_OW 12
76912: PLUS
76913: PPUSH
76914: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76918: LD_INT 1
76920: PPUSH
76921: LD_INT 5
76923: PPUSH
76924: CALL_OW 12
76928: PPUSH
76929: LD_VAR 0 1
76933: PPUSH
76934: LD_INT 1
76936: PPUSH
76937: CALL_OW 55
// end ;
76941: GO 76754
// end ;
76943: LD_VAR 0 5
76947: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76948: LD_INT 0
76950: PPUSH
76951: PPUSH
76952: PPUSH
76953: PPUSH
76954: PPUSH
76955: PPUSH
76956: PPUSH
76957: PPUSH
// if not turrets or not factories then
76958: LD_VAR 0 1
76962: NOT
76963: PUSH
76964: LD_VAR 0 2
76968: NOT
76969: OR
76970: IFFALSE 76974
// exit ;
76972: GO 77281
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76974: LD_ADDR_VAR 0 10
76978: PUSH
76979: LD_INT 5
76981: PUSH
76982: LD_INT 6
76984: PUSH
76985: EMPTY
76986: LIST
76987: LIST
76988: PUSH
76989: LD_INT 2
76991: PUSH
76992: LD_INT 4
76994: PUSH
76995: EMPTY
76996: LIST
76997: LIST
76998: PUSH
76999: LD_INT 3
77001: PUSH
77002: LD_INT 5
77004: PUSH
77005: EMPTY
77006: LIST
77007: LIST
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: LIST
77013: PUSH
77014: LD_INT 24
77016: PUSH
77017: LD_INT 25
77019: PUSH
77020: EMPTY
77021: LIST
77022: LIST
77023: PUSH
77024: LD_INT 23
77026: PUSH
77027: LD_INT 27
77029: PUSH
77030: EMPTY
77031: LIST
77032: LIST
77033: PUSH
77034: EMPTY
77035: LIST
77036: LIST
77037: PUSH
77038: LD_INT 42
77040: PUSH
77041: LD_INT 43
77043: PUSH
77044: EMPTY
77045: LIST
77046: LIST
77047: PUSH
77048: LD_INT 44
77050: PUSH
77051: LD_INT 46
77053: PUSH
77054: EMPTY
77055: LIST
77056: LIST
77057: PUSH
77058: LD_INT 45
77060: PUSH
77061: LD_INT 47
77063: PUSH
77064: EMPTY
77065: LIST
77066: LIST
77067: PUSH
77068: EMPTY
77069: LIST
77070: LIST
77071: LIST
77072: PUSH
77073: EMPTY
77074: LIST
77075: LIST
77076: LIST
77077: ST_TO_ADDR
// result := [ ] ;
77078: LD_ADDR_VAR 0 3
77082: PUSH
77083: EMPTY
77084: ST_TO_ADDR
// for i in turrets do
77085: LD_ADDR_VAR 0 4
77089: PUSH
77090: LD_VAR 0 1
77094: PUSH
77095: FOR_IN
77096: IFFALSE 77279
// begin nat := GetNation ( i ) ;
77098: LD_ADDR_VAR 0 7
77102: PUSH
77103: LD_VAR 0 4
77107: PPUSH
77108: CALL_OW 248
77112: ST_TO_ADDR
// weapon := 0 ;
77113: LD_ADDR_VAR 0 8
77117: PUSH
77118: LD_INT 0
77120: ST_TO_ADDR
// if not nat then
77121: LD_VAR 0 7
77125: NOT
77126: IFFALSE 77130
// continue ;
77128: GO 77095
// for j in list [ nat ] do
77130: LD_ADDR_VAR 0 5
77134: PUSH
77135: LD_VAR 0 10
77139: PUSH
77140: LD_VAR 0 7
77144: ARRAY
77145: PUSH
77146: FOR_IN
77147: IFFALSE 77188
// if GetBWeapon ( i ) = j [ 1 ] then
77149: LD_VAR 0 4
77153: PPUSH
77154: CALL_OW 269
77158: PUSH
77159: LD_VAR 0 5
77163: PUSH
77164: LD_INT 1
77166: ARRAY
77167: EQUAL
77168: IFFALSE 77186
// begin weapon := j [ 2 ] ;
77170: LD_ADDR_VAR 0 8
77174: PUSH
77175: LD_VAR 0 5
77179: PUSH
77180: LD_INT 2
77182: ARRAY
77183: ST_TO_ADDR
// break ;
77184: GO 77188
// end ;
77186: GO 77146
77188: POP
77189: POP
// if not weapon then
77190: LD_VAR 0 8
77194: NOT
77195: IFFALSE 77199
// continue ;
77197: GO 77095
// for k in factories do
77199: LD_ADDR_VAR 0 6
77203: PUSH
77204: LD_VAR 0 2
77208: PUSH
77209: FOR_IN
77210: IFFALSE 77275
// begin weapons := AvailableWeaponList ( k ) ;
77212: LD_ADDR_VAR 0 9
77216: PUSH
77217: LD_VAR 0 6
77221: PPUSH
77222: CALL_OW 478
77226: ST_TO_ADDR
// if not weapons then
77227: LD_VAR 0 9
77231: NOT
77232: IFFALSE 77236
// continue ;
77234: GO 77209
// if weapon in weapons then
77236: LD_VAR 0 8
77240: PUSH
77241: LD_VAR 0 9
77245: IN
77246: IFFALSE 77273
// begin result := [ i , weapon ] ;
77248: LD_ADDR_VAR 0 3
77252: PUSH
77253: LD_VAR 0 4
77257: PUSH
77258: LD_VAR 0 8
77262: PUSH
77263: EMPTY
77264: LIST
77265: LIST
77266: ST_TO_ADDR
// exit ;
77267: POP
77268: POP
77269: POP
77270: POP
77271: GO 77281
// end ; end ;
77273: GO 77209
77275: POP
77276: POP
// end ;
77277: GO 77095
77279: POP
77280: POP
// end ;
77281: LD_VAR 0 3
77285: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77286: LD_INT 0
77288: PPUSH
// if not side or side > 8 then
77289: LD_VAR 0 3
77293: NOT
77294: PUSH
77295: LD_VAR 0 3
77299: PUSH
77300: LD_INT 8
77302: GREATER
77303: OR
77304: IFFALSE 77308
// exit ;
77306: GO 77367
// if not range then
77308: LD_VAR 0 4
77312: NOT
77313: IFFALSE 77324
// range := - 12 ;
77315: LD_ADDR_VAR 0 4
77319: PUSH
77320: LD_INT 12
77322: NEG
77323: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77324: LD_VAR 0 1
77328: PPUSH
77329: LD_VAR 0 2
77333: PPUSH
77334: LD_VAR 0 3
77338: PPUSH
77339: LD_VAR 0 4
77343: PPUSH
77344: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77348: LD_VAR 0 1
77352: PPUSH
77353: LD_VAR 0 2
77357: PPUSH
77358: LD_VAR 0 3
77362: PPUSH
77363: CALL_OW 331
// end ;
77367: LD_VAR 0 5
77371: RET
// export function Video ( mode ) ; begin
77372: LD_INT 0
77374: PPUSH
// ingame_video = mode ;
77375: LD_ADDR_OWVAR 52
77379: PUSH
77380: LD_VAR 0 1
77384: ST_TO_ADDR
// interface_hidden = mode ;
77385: LD_ADDR_OWVAR 54
77389: PUSH
77390: LD_VAR 0 1
77394: ST_TO_ADDR
// end ;
77395: LD_VAR 0 2
77399: RET
// export function Join ( array , element ) ; begin
77400: LD_INT 0
77402: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77403: LD_ADDR_VAR 0 3
77407: PUSH
77408: LD_VAR 0 1
77412: PPUSH
77413: LD_VAR 0 1
77417: PUSH
77418: LD_INT 1
77420: PLUS
77421: PPUSH
77422: LD_VAR 0 2
77426: PPUSH
77427: CALL_OW 1
77431: ST_TO_ADDR
// end ;
77432: LD_VAR 0 3
77436: RET
// export function JoinUnion ( array , element ) ; begin
77437: LD_INT 0
77439: PPUSH
// result := array union element ;
77440: LD_ADDR_VAR 0 3
77444: PUSH
77445: LD_VAR 0 1
77449: PUSH
77450: LD_VAR 0 2
77454: UNION
77455: ST_TO_ADDR
// end ;
77456: LD_VAR 0 3
77460: RET
// export function GetBehemoths ( side ) ; begin
77461: LD_INT 0
77463: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77464: LD_ADDR_VAR 0 2
77468: PUSH
77469: LD_INT 22
77471: PUSH
77472: LD_VAR 0 1
77476: PUSH
77477: EMPTY
77478: LIST
77479: LIST
77480: PUSH
77481: LD_INT 31
77483: PUSH
77484: LD_INT 25
77486: PUSH
77487: EMPTY
77488: LIST
77489: LIST
77490: PUSH
77491: EMPTY
77492: LIST
77493: LIST
77494: PPUSH
77495: CALL_OW 69
77499: ST_TO_ADDR
// end ;
77500: LD_VAR 0 2
77504: RET
// export function Shuffle ( array ) ; var i , index ; begin
77505: LD_INT 0
77507: PPUSH
77508: PPUSH
77509: PPUSH
// result := [ ] ;
77510: LD_ADDR_VAR 0 2
77514: PUSH
77515: EMPTY
77516: ST_TO_ADDR
// if not array then
77517: LD_VAR 0 1
77521: NOT
77522: IFFALSE 77526
// exit ;
77524: GO 77625
// Randomize ;
77526: CALL_OW 10
// for i = array downto 1 do
77530: LD_ADDR_VAR 0 3
77534: PUSH
77535: DOUBLE
77536: LD_VAR 0 1
77540: INC
77541: ST_TO_ADDR
77542: LD_INT 1
77544: PUSH
77545: FOR_DOWNTO
77546: IFFALSE 77623
// begin index := rand ( 1 , array ) ;
77548: LD_ADDR_VAR 0 4
77552: PUSH
77553: LD_INT 1
77555: PPUSH
77556: LD_VAR 0 1
77560: PPUSH
77561: CALL_OW 12
77565: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77566: LD_ADDR_VAR 0 2
77570: PUSH
77571: LD_VAR 0 2
77575: PPUSH
77576: LD_VAR 0 2
77580: PUSH
77581: LD_INT 1
77583: PLUS
77584: PPUSH
77585: LD_VAR 0 1
77589: PUSH
77590: LD_VAR 0 4
77594: ARRAY
77595: PPUSH
77596: CALL_OW 2
77600: ST_TO_ADDR
// array := Delete ( array , index ) ;
77601: LD_ADDR_VAR 0 1
77605: PUSH
77606: LD_VAR 0 1
77610: PPUSH
77611: LD_VAR 0 4
77615: PPUSH
77616: CALL_OW 3
77620: ST_TO_ADDR
// end ;
77621: GO 77545
77623: POP
77624: POP
// end ;
77625: LD_VAR 0 2
77629: RET
// export function GetBaseMaterials ( base ) ; begin
77630: LD_INT 0
77632: PPUSH
// result := [ 0 , 0 , 0 ] ;
77633: LD_ADDR_VAR 0 2
77637: PUSH
77638: LD_INT 0
77640: PUSH
77641: LD_INT 0
77643: PUSH
77644: LD_INT 0
77646: PUSH
77647: EMPTY
77648: LIST
77649: LIST
77650: LIST
77651: ST_TO_ADDR
// if not base then
77652: LD_VAR 0 1
77656: NOT
77657: IFFALSE 77661
// exit ;
77659: GO 77710
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77661: LD_ADDR_VAR 0 2
77665: PUSH
77666: LD_VAR 0 1
77670: PPUSH
77671: LD_INT 1
77673: PPUSH
77674: CALL_OW 275
77678: PUSH
77679: LD_VAR 0 1
77683: PPUSH
77684: LD_INT 2
77686: PPUSH
77687: CALL_OW 275
77691: PUSH
77692: LD_VAR 0 1
77696: PPUSH
77697: LD_INT 3
77699: PPUSH
77700: CALL_OW 275
77704: PUSH
77705: EMPTY
77706: LIST
77707: LIST
77708: LIST
77709: ST_TO_ADDR
// end ;
77710: LD_VAR 0 2
77714: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77715: LD_INT 0
77717: PPUSH
77718: PPUSH
// result := array ;
77719: LD_ADDR_VAR 0 3
77723: PUSH
77724: LD_VAR 0 1
77728: ST_TO_ADDR
// if size >= result then
77729: LD_VAR 0 2
77733: PUSH
77734: LD_VAR 0 3
77738: GREATEREQUAL
77739: IFFALSE 77743
// exit ;
77741: GO 77793
// if size then
77743: LD_VAR 0 2
77747: IFFALSE 77793
// for i := array downto size do
77749: LD_ADDR_VAR 0 4
77753: PUSH
77754: DOUBLE
77755: LD_VAR 0 1
77759: INC
77760: ST_TO_ADDR
77761: LD_VAR 0 2
77765: PUSH
77766: FOR_DOWNTO
77767: IFFALSE 77791
// result := Delete ( result , result ) ;
77769: LD_ADDR_VAR 0 3
77773: PUSH
77774: LD_VAR 0 3
77778: PPUSH
77779: LD_VAR 0 3
77783: PPUSH
77784: CALL_OW 3
77788: ST_TO_ADDR
77789: GO 77766
77791: POP
77792: POP
// end ;
77793: LD_VAR 0 3
77797: RET
// export function ComExit ( unit ) ; var tmp ; begin
77798: LD_INT 0
77800: PPUSH
77801: PPUSH
// if not IsInUnit ( unit ) then
77802: LD_VAR 0 1
77806: PPUSH
77807: CALL_OW 310
77811: NOT
77812: IFFALSE 77816
// exit ;
77814: GO 77876
// tmp := IsInUnit ( unit ) ;
77816: LD_ADDR_VAR 0 3
77820: PUSH
77821: LD_VAR 0 1
77825: PPUSH
77826: CALL_OW 310
77830: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77831: LD_VAR 0 3
77835: PPUSH
77836: CALL_OW 247
77840: PUSH
77841: LD_INT 2
77843: EQUAL
77844: IFFALSE 77857
// ComExitVehicle ( unit ) else
77846: LD_VAR 0 1
77850: PPUSH
77851: CALL_OW 121
77855: GO 77866
// ComExitBuilding ( unit ) ;
77857: LD_VAR 0 1
77861: PPUSH
77862: CALL_OW 122
// result := tmp ;
77866: LD_ADDR_VAR 0 2
77870: PUSH
77871: LD_VAR 0 3
77875: ST_TO_ADDR
// end ;
77876: LD_VAR 0 2
77880: RET
// export function ComExitAll ( units ) ; var i ; begin
77881: LD_INT 0
77883: PPUSH
77884: PPUSH
// if not units then
77885: LD_VAR 0 1
77889: NOT
77890: IFFALSE 77894
// exit ;
77892: GO 77920
// for i in units do
77894: LD_ADDR_VAR 0 3
77898: PUSH
77899: LD_VAR 0 1
77903: PUSH
77904: FOR_IN
77905: IFFALSE 77918
// ComExit ( i ) ;
77907: LD_VAR 0 3
77911: PPUSH
77912: CALL 77798 0 1
77916: GO 77904
77918: POP
77919: POP
// end ;
77920: LD_VAR 0 2
77924: RET
// export function ResetHc ; begin
77925: LD_INT 0
77927: PPUSH
// InitHc ;
77928: CALL_OW 19
// hc_importance := 0 ;
77932: LD_ADDR_OWVAR 32
77936: PUSH
77937: LD_INT 0
77939: ST_TO_ADDR
// end ;
77940: LD_VAR 0 1
77944: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77945: LD_INT 0
77947: PPUSH
77948: PPUSH
77949: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77950: LD_ADDR_VAR 0 6
77954: PUSH
77955: LD_VAR 0 1
77959: PUSH
77960: LD_VAR 0 3
77964: PLUS
77965: PUSH
77966: LD_INT 2
77968: DIV
77969: ST_TO_ADDR
// if _x < 0 then
77970: LD_VAR 0 6
77974: PUSH
77975: LD_INT 0
77977: LESS
77978: IFFALSE 77995
// _x := _x * - 1 ;
77980: LD_ADDR_VAR 0 6
77984: PUSH
77985: LD_VAR 0 6
77989: PUSH
77990: LD_INT 1
77992: NEG
77993: MUL
77994: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77995: LD_ADDR_VAR 0 7
77999: PUSH
78000: LD_VAR 0 2
78004: PUSH
78005: LD_VAR 0 4
78009: PLUS
78010: PUSH
78011: LD_INT 2
78013: DIV
78014: ST_TO_ADDR
// if _y < 0 then
78015: LD_VAR 0 7
78019: PUSH
78020: LD_INT 0
78022: LESS
78023: IFFALSE 78040
// _y := _y * - 1 ;
78025: LD_ADDR_VAR 0 7
78029: PUSH
78030: LD_VAR 0 7
78034: PUSH
78035: LD_INT 1
78037: NEG
78038: MUL
78039: ST_TO_ADDR
// result := [ _x , _y ] ;
78040: LD_ADDR_VAR 0 5
78044: PUSH
78045: LD_VAR 0 6
78049: PUSH
78050: LD_VAR 0 7
78054: PUSH
78055: EMPTY
78056: LIST
78057: LIST
78058: ST_TO_ADDR
// end ;
78059: LD_VAR 0 5
78063: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78064: LD_INT 0
78066: PPUSH
78067: PPUSH
78068: PPUSH
78069: PPUSH
// task := GetTaskList ( unit ) ;
78070: LD_ADDR_VAR 0 7
78074: PUSH
78075: LD_VAR 0 1
78079: PPUSH
78080: CALL_OW 437
78084: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78085: LD_VAR 0 7
78089: NOT
78090: PUSH
78091: LD_VAR 0 1
78095: PPUSH
78096: LD_VAR 0 2
78100: PPUSH
78101: CALL_OW 308
78105: NOT
78106: AND
78107: IFFALSE 78111
// exit ;
78109: GO 78229
// if IsInArea ( unit , area ) then
78111: LD_VAR 0 1
78115: PPUSH
78116: LD_VAR 0 2
78120: PPUSH
78121: CALL_OW 308
78125: IFFALSE 78143
// begin ComMoveToArea ( unit , goAway ) ;
78127: LD_VAR 0 1
78131: PPUSH
78132: LD_VAR 0 3
78136: PPUSH
78137: CALL_OW 113
// exit ;
78141: GO 78229
// end ; if task [ 1 ] [ 1 ] <> M then
78143: LD_VAR 0 7
78147: PUSH
78148: LD_INT 1
78150: ARRAY
78151: PUSH
78152: LD_INT 1
78154: ARRAY
78155: PUSH
78156: LD_STRING M
78158: NONEQUAL
78159: IFFALSE 78163
// exit ;
78161: GO 78229
// x := task [ 1 ] [ 2 ] ;
78163: LD_ADDR_VAR 0 5
78167: PUSH
78168: LD_VAR 0 7
78172: PUSH
78173: LD_INT 1
78175: ARRAY
78176: PUSH
78177: LD_INT 2
78179: ARRAY
78180: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78181: LD_ADDR_VAR 0 6
78185: PUSH
78186: LD_VAR 0 7
78190: PUSH
78191: LD_INT 1
78193: ARRAY
78194: PUSH
78195: LD_INT 3
78197: ARRAY
78198: ST_TO_ADDR
// if InArea ( x , y , area ) then
78199: LD_VAR 0 5
78203: PPUSH
78204: LD_VAR 0 6
78208: PPUSH
78209: LD_VAR 0 2
78213: PPUSH
78214: CALL_OW 309
78218: IFFALSE 78229
// ComStop ( unit ) ;
78220: LD_VAR 0 1
78224: PPUSH
78225: CALL_OW 141
// end ;
78229: LD_VAR 0 4
78233: RET
// export function Abs ( value ) ; begin
78234: LD_INT 0
78236: PPUSH
// result := value ;
78237: LD_ADDR_VAR 0 2
78241: PUSH
78242: LD_VAR 0 1
78246: ST_TO_ADDR
// if value < 0 then
78247: LD_VAR 0 1
78251: PUSH
78252: LD_INT 0
78254: LESS
78255: IFFALSE 78272
// result := value * - 1 ;
78257: LD_ADDR_VAR 0 2
78261: PUSH
78262: LD_VAR 0 1
78266: PUSH
78267: LD_INT 1
78269: NEG
78270: MUL
78271: ST_TO_ADDR
// end ;
78272: LD_VAR 0 2
78276: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78277: LD_INT 0
78279: PPUSH
78280: PPUSH
78281: PPUSH
78282: PPUSH
78283: PPUSH
78284: PPUSH
78285: PPUSH
78286: PPUSH
// if not unit or not building then
78287: LD_VAR 0 1
78291: NOT
78292: PUSH
78293: LD_VAR 0 2
78297: NOT
78298: OR
78299: IFFALSE 78303
// exit ;
78301: GO 78529
// x := GetX ( building ) ;
78303: LD_ADDR_VAR 0 4
78307: PUSH
78308: LD_VAR 0 2
78312: PPUSH
78313: CALL_OW 250
78317: ST_TO_ADDR
// y := GetY ( building ) ;
78318: LD_ADDR_VAR 0 6
78322: PUSH
78323: LD_VAR 0 2
78327: PPUSH
78328: CALL_OW 251
78332: ST_TO_ADDR
// d := GetDir ( building ) ;
78333: LD_ADDR_VAR 0 8
78337: PUSH
78338: LD_VAR 0 2
78342: PPUSH
78343: CALL_OW 254
78347: ST_TO_ADDR
// r := 4 ;
78348: LD_ADDR_VAR 0 9
78352: PUSH
78353: LD_INT 4
78355: ST_TO_ADDR
// for i := 1 to 5 do
78356: LD_ADDR_VAR 0 10
78360: PUSH
78361: DOUBLE
78362: LD_INT 1
78364: DEC
78365: ST_TO_ADDR
78366: LD_INT 5
78368: PUSH
78369: FOR_TO
78370: IFFALSE 78527
// begin _x := ShiftX ( x , d , r + i ) ;
78372: LD_ADDR_VAR 0 5
78376: PUSH
78377: LD_VAR 0 4
78381: PPUSH
78382: LD_VAR 0 8
78386: PPUSH
78387: LD_VAR 0 9
78391: PUSH
78392: LD_VAR 0 10
78396: PLUS
78397: PPUSH
78398: CALL_OW 272
78402: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78403: LD_ADDR_VAR 0 7
78407: PUSH
78408: LD_VAR 0 6
78412: PPUSH
78413: LD_VAR 0 8
78417: PPUSH
78418: LD_VAR 0 9
78422: PUSH
78423: LD_VAR 0 10
78427: PLUS
78428: PPUSH
78429: CALL_OW 273
78433: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78434: LD_VAR 0 5
78438: PPUSH
78439: LD_VAR 0 7
78443: PPUSH
78444: CALL_OW 488
78448: PUSH
78449: LD_VAR 0 5
78453: PPUSH
78454: LD_VAR 0 7
78458: PPUSH
78459: CALL_OW 428
78463: PPUSH
78464: CALL_OW 247
78468: PUSH
78469: LD_INT 3
78471: PUSH
78472: LD_INT 2
78474: PUSH
78475: EMPTY
78476: LIST
78477: LIST
78478: IN
78479: NOT
78480: AND
78481: IFFALSE 78525
// begin ComMoveXY ( unit , _x , _y ) ;
78483: LD_VAR 0 1
78487: PPUSH
78488: LD_VAR 0 5
78492: PPUSH
78493: LD_VAR 0 7
78497: PPUSH
78498: CALL_OW 111
// result := [ _x , _y ] ;
78502: LD_ADDR_VAR 0 3
78506: PUSH
78507: LD_VAR 0 5
78511: PUSH
78512: LD_VAR 0 7
78516: PUSH
78517: EMPTY
78518: LIST
78519: LIST
78520: ST_TO_ADDR
// exit ;
78521: POP
78522: POP
78523: GO 78529
// end ; end ;
78525: GO 78369
78527: POP
78528: POP
// end ;
78529: LD_VAR 0 3
78533: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78534: LD_INT 0
78536: PPUSH
78537: PPUSH
78538: PPUSH
// result := 0 ;
78539: LD_ADDR_VAR 0 3
78543: PUSH
78544: LD_INT 0
78546: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78547: LD_VAR 0 1
78551: PUSH
78552: LD_INT 0
78554: LESS
78555: PUSH
78556: LD_VAR 0 1
78560: PUSH
78561: LD_INT 8
78563: GREATER
78564: OR
78565: PUSH
78566: LD_VAR 0 2
78570: PUSH
78571: LD_INT 0
78573: LESS
78574: OR
78575: PUSH
78576: LD_VAR 0 2
78580: PUSH
78581: LD_INT 8
78583: GREATER
78584: OR
78585: IFFALSE 78589
// exit ;
78587: GO 78664
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78589: LD_ADDR_VAR 0 4
78593: PUSH
78594: LD_INT 22
78596: PUSH
78597: LD_VAR 0 2
78601: PUSH
78602: EMPTY
78603: LIST
78604: LIST
78605: PPUSH
78606: CALL_OW 69
78610: PUSH
78611: FOR_IN
78612: IFFALSE 78662
// begin un := UnitShoot ( i ) ;
78614: LD_ADDR_VAR 0 5
78618: PUSH
78619: LD_VAR 0 4
78623: PPUSH
78624: CALL_OW 504
78628: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78629: LD_VAR 0 5
78633: PPUSH
78634: CALL_OW 255
78638: PUSH
78639: LD_VAR 0 1
78643: EQUAL
78644: IFFALSE 78660
// begin result := un ;
78646: LD_ADDR_VAR 0 3
78650: PUSH
78651: LD_VAR 0 5
78655: ST_TO_ADDR
// exit ;
78656: POP
78657: POP
78658: GO 78664
// end ; end ;
78660: GO 78611
78662: POP
78663: POP
// end ;
78664: LD_VAR 0 3
78668: RET
// export function GetCargoBay ( units ) ; begin
78669: LD_INT 0
78671: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78672: LD_ADDR_VAR 0 2
78676: PUSH
78677: LD_VAR 0 1
78681: PPUSH
78682: LD_INT 2
78684: PUSH
78685: LD_INT 34
78687: PUSH
78688: LD_INT 12
78690: PUSH
78691: EMPTY
78692: LIST
78693: LIST
78694: PUSH
78695: LD_INT 34
78697: PUSH
78698: LD_INT 51
78700: PUSH
78701: EMPTY
78702: LIST
78703: LIST
78704: PUSH
78705: LD_INT 34
78707: PUSH
78708: LD_INT 32
78710: PUSH
78711: EMPTY
78712: LIST
78713: LIST
78714: PUSH
78715: LD_INT 34
78717: PUSH
78718: LD_INT 89
78720: PUSH
78721: EMPTY
78722: LIST
78723: LIST
78724: PUSH
78725: EMPTY
78726: LIST
78727: LIST
78728: LIST
78729: LIST
78730: LIST
78731: PPUSH
78732: CALL_OW 72
78736: ST_TO_ADDR
// end ;
78737: LD_VAR 0 2
78741: RET
// export function Negate ( value ) ; begin
78742: LD_INT 0
78744: PPUSH
// result := not value ;
78745: LD_ADDR_VAR 0 2
78749: PUSH
78750: LD_VAR 0 1
78754: NOT
78755: ST_TO_ADDR
// end ;
78756: LD_VAR 0 2
78760: RET
// export function Inc ( value ) ; begin
78761: LD_INT 0
78763: PPUSH
// result := value + 1 ;
78764: LD_ADDR_VAR 0 2
78768: PUSH
78769: LD_VAR 0 1
78773: PUSH
78774: LD_INT 1
78776: PLUS
78777: ST_TO_ADDR
// end ;
78778: LD_VAR 0 2
78782: RET
// export function Dec ( value ) ; begin
78783: LD_INT 0
78785: PPUSH
// result := value - 1 ;
78786: LD_ADDR_VAR 0 2
78790: PUSH
78791: LD_VAR 0 1
78795: PUSH
78796: LD_INT 1
78798: MINUS
78799: ST_TO_ADDR
// end ;
78800: LD_VAR 0 2
78804: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78805: LD_INT 0
78807: PPUSH
78808: PPUSH
78809: PPUSH
78810: PPUSH
78811: PPUSH
78812: PPUSH
78813: PPUSH
78814: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78815: LD_VAR 0 1
78819: PPUSH
78820: LD_VAR 0 2
78824: PPUSH
78825: CALL_OW 488
78829: NOT
78830: PUSH
78831: LD_VAR 0 3
78835: PPUSH
78836: LD_VAR 0 4
78840: PPUSH
78841: CALL_OW 488
78845: NOT
78846: OR
78847: IFFALSE 78860
// begin result := - 1 ;
78849: LD_ADDR_VAR 0 5
78853: PUSH
78854: LD_INT 1
78856: NEG
78857: ST_TO_ADDR
// exit ;
78858: GO 79095
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78860: LD_ADDR_VAR 0 12
78864: PUSH
78865: LD_VAR 0 1
78869: PPUSH
78870: LD_VAR 0 2
78874: PPUSH
78875: LD_VAR 0 3
78879: PPUSH
78880: LD_VAR 0 4
78884: PPUSH
78885: CALL 77945 0 4
78889: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78890: LD_ADDR_VAR 0 11
78894: PUSH
78895: LD_VAR 0 1
78899: PPUSH
78900: LD_VAR 0 2
78904: PPUSH
78905: LD_VAR 0 12
78909: PUSH
78910: LD_INT 1
78912: ARRAY
78913: PPUSH
78914: LD_VAR 0 12
78918: PUSH
78919: LD_INT 2
78921: ARRAY
78922: PPUSH
78923: CALL_OW 298
78927: ST_TO_ADDR
// distance := 9999 ;
78928: LD_ADDR_VAR 0 10
78932: PUSH
78933: LD_INT 9999
78935: ST_TO_ADDR
// for i := 0 to 5 do
78936: LD_ADDR_VAR 0 6
78940: PUSH
78941: DOUBLE
78942: LD_INT 0
78944: DEC
78945: ST_TO_ADDR
78946: LD_INT 5
78948: PUSH
78949: FOR_TO
78950: IFFALSE 79093
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78952: LD_ADDR_VAR 0 7
78956: PUSH
78957: LD_VAR 0 1
78961: PPUSH
78962: LD_VAR 0 6
78966: PPUSH
78967: LD_VAR 0 11
78971: PPUSH
78972: CALL_OW 272
78976: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78977: LD_ADDR_VAR 0 8
78981: PUSH
78982: LD_VAR 0 2
78986: PPUSH
78987: LD_VAR 0 6
78991: PPUSH
78992: LD_VAR 0 11
78996: PPUSH
78997: CALL_OW 273
79001: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79002: LD_VAR 0 7
79006: PPUSH
79007: LD_VAR 0 8
79011: PPUSH
79012: CALL_OW 488
79016: NOT
79017: IFFALSE 79021
// continue ;
79019: GO 78949
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79021: LD_ADDR_VAR 0 9
79025: PUSH
79026: LD_VAR 0 12
79030: PUSH
79031: LD_INT 1
79033: ARRAY
79034: PPUSH
79035: LD_VAR 0 12
79039: PUSH
79040: LD_INT 2
79042: ARRAY
79043: PPUSH
79044: LD_VAR 0 7
79048: PPUSH
79049: LD_VAR 0 8
79053: PPUSH
79054: CALL_OW 298
79058: ST_TO_ADDR
// if tmp < distance then
79059: LD_VAR 0 9
79063: PUSH
79064: LD_VAR 0 10
79068: LESS
79069: IFFALSE 79091
// begin result := i ;
79071: LD_ADDR_VAR 0 5
79075: PUSH
79076: LD_VAR 0 6
79080: ST_TO_ADDR
// distance := tmp ;
79081: LD_ADDR_VAR 0 10
79085: PUSH
79086: LD_VAR 0 9
79090: ST_TO_ADDR
// end ; end ;
79091: GO 78949
79093: POP
79094: POP
// end ;
79095: LD_VAR 0 5
79099: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79100: LD_INT 0
79102: PPUSH
79103: PPUSH
// if not driver or not IsInUnit ( driver ) then
79104: LD_VAR 0 1
79108: NOT
79109: PUSH
79110: LD_VAR 0 1
79114: PPUSH
79115: CALL_OW 310
79119: NOT
79120: OR
79121: IFFALSE 79125
// exit ;
79123: GO 79215
// vehicle := IsInUnit ( driver ) ;
79125: LD_ADDR_VAR 0 3
79129: PUSH
79130: LD_VAR 0 1
79134: PPUSH
79135: CALL_OW 310
79139: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79140: LD_VAR 0 1
79144: PPUSH
79145: LD_STRING \
79147: PUSH
79148: LD_INT 0
79150: PUSH
79151: LD_INT 0
79153: PUSH
79154: LD_INT 0
79156: PUSH
79157: LD_INT 0
79159: PUSH
79160: LD_INT 0
79162: PUSH
79163: LD_INT 0
79165: PUSH
79166: EMPTY
79167: LIST
79168: LIST
79169: LIST
79170: LIST
79171: LIST
79172: LIST
79173: LIST
79174: PUSH
79175: LD_STRING E
79177: PUSH
79178: LD_INT 0
79180: PUSH
79181: LD_INT 0
79183: PUSH
79184: LD_VAR 0 3
79188: PUSH
79189: LD_INT 0
79191: PUSH
79192: LD_INT 0
79194: PUSH
79195: LD_INT 0
79197: PUSH
79198: EMPTY
79199: LIST
79200: LIST
79201: LIST
79202: LIST
79203: LIST
79204: LIST
79205: LIST
79206: PUSH
79207: EMPTY
79208: LIST
79209: LIST
79210: PPUSH
79211: CALL_OW 446
// end ;
79215: LD_VAR 0 2
79219: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79220: LD_INT 0
79222: PPUSH
79223: PPUSH
// if not driver or not IsInUnit ( driver ) then
79224: LD_VAR 0 1
79228: NOT
79229: PUSH
79230: LD_VAR 0 1
79234: PPUSH
79235: CALL_OW 310
79239: NOT
79240: OR
79241: IFFALSE 79245
// exit ;
79243: GO 79335
// vehicle := IsInUnit ( driver ) ;
79245: LD_ADDR_VAR 0 3
79249: PUSH
79250: LD_VAR 0 1
79254: PPUSH
79255: CALL_OW 310
79259: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79260: LD_VAR 0 1
79264: PPUSH
79265: LD_STRING \
79267: PUSH
79268: LD_INT 0
79270: PUSH
79271: LD_INT 0
79273: PUSH
79274: LD_INT 0
79276: PUSH
79277: LD_INT 0
79279: PUSH
79280: LD_INT 0
79282: PUSH
79283: LD_INT 0
79285: PUSH
79286: EMPTY
79287: LIST
79288: LIST
79289: LIST
79290: LIST
79291: LIST
79292: LIST
79293: LIST
79294: PUSH
79295: LD_STRING E
79297: PUSH
79298: LD_INT 0
79300: PUSH
79301: LD_INT 0
79303: PUSH
79304: LD_VAR 0 3
79308: PUSH
79309: LD_INT 0
79311: PUSH
79312: LD_INT 0
79314: PUSH
79315: LD_INT 0
79317: PUSH
79318: EMPTY
79319: LIST
79320: LIST
79321: LIST
79322: LIST
79323: LIST
79324: LIST
79325: LIST
79326: PUSH
79327: EMPTY
79328: LIST
79329: LIST
79330: PPUSH
79331: CALL_OW 447
// end ;
79335: LD_VAR 0 2
79339: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79340: LD_INT 0
79342: PPUSH
79343: PPUSH
79344: PPUSH
// tmp := [ ] ;
79345: LD_ADDR_VAR 0 5
79349: PUSH
79350: EMPTY
79351: ST_TO_ADDR
// for i in units do
79352: LD_ADDR_VAR 0 4
79356: PUSH
79357: LD_VAR 0 1
79361: PUSH
79362: FOR_IN
79363: IFFALSE 79401
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79365: LD_ADDR_VAR 0 5
79369: PUSH
79370: LD_VAR 0 5
79374: PPUSH
79375: LD_VAR 0 5
79379: PUSH
79380: LD_INT 1
79382: PLUS
79383: PPUSH
79384: LD_VAR 0 4
79388: PPUSH
79389: CALL_OW 256
79393: PPUSH
79394: CALL_OW 2
79398: ST_TO_ADDR
79399: GO 79362
79401: POP
79402: POP
// if not tmp then
79403: LD_VAR 0 5
79407: NOT
79408: IFFALSE 79412
// exit ;
79410: GO 79460
// if asc then
79412: LD_VAR 0 2
79416: IFFALSE 79440
// result := SortListByListAsc ( units , tmp ) else
79418: LD_ADDR_VAR 0 3
79422: PUSH
79423: LD_VAR 0 1
79427: PPUSH
79428: LD_VAR 0 5
79432: PPUSH
79433: CALL_OW 76
79437: ST_TO_ADDR
79438: GO 79460
// result := SortListByListDesc ( units , tmp ) ;
79440: LD_ADDR_VAR 0 3
79444: PUSH
79445: LD_VAR 0 1
79449: PPUSH
79450: LD_VAR 0 5
79454: PPUSH
79455: CALL_OW 77
79459: ST_TO_ADDR
// end ;
79460: LD_VAR 0 3
79464: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79465: LD_INT 0
79467: PPUSH
79468: PPUSH
// task := GetTaskList ( mech ) ;
79469: LD_ADDR_VAR 0 4
79473: PUSH
79474: LD_VAR 0 1
79478: PPUSH
79479: CALL_OW 437
79483: ST_TO_ADDR
// if not task then
79484: LD_VAR 0 4
79488: NOT
79489: IFFALSE 79493
// exit ;
79491: GO 79535
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79493: LD_ADDR_VAR 0 3
79497: PUSH
79498: LD_VAR 0 4
79502: PUSH
79503: LD_INT 1
79505: ARRAY
79506: PUSH
79507: LD_INT 1
79509: ARRAY
79510: PUSH
79511: LD_STRING r
79513: EQUAL
79514: PUSH
79515: LD_VAR 0 4
79519: PUSH
79520: LD_INT 1
79522: ARRAY
79523: PUSH
79524: LD_INT 4
79526: ARRAY
79527: PUSH
79528: LD_VAR 0 2
79532: EQUAL
79533: AND
79534: ST_TO_ADDR
// end ;
79535: LD_VAR 0 3
79539: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79540: LD_INT 0
79542: PPUSH
// SetDir ( unit , d ) ;
79543: LD_VAR 0 1
79547: PPUSH
79548: LD_VAR 0 4
79552: PPUSH
79553: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79557: LD_VAR 0 1
79561: PPUSH
79562: LD_VAR 0 2
79566: PPUSH
79567: LD_VAR 0 3
79571: PPUSH
79572: LD_VAR 0 5
79576: PPUSH
79577: CALL_OW 48
// end ;
79581: LD_VAR 0 6
79585: RET
// export function ToNaturalNumber ( number ) ; begin
79586: LD_INT 0
79588: PPUSH
// result := number div 1 ;
79589: LD_ADDR_VAR 0 2
79593: PUSH
79594: LD_VAR 0 1
79598: PUSH
79599: LD_INT 1
79601: DIV
79602: ST_TO_ADDR
// if number < 0 then
79603: LD_VAR 0 1
79607: PUSH
79608: LD_INT 0
79610: LESS
79611: IFFALSE 79621
// result := 0 ;
79613: LD_ADDR_VAR 0 2
79617: PUSH
79618: LD_INT 0
79620: ST_TO_ADDR
// end ;
79621: LD_VAR 0 2
79625: RET
// export function SortByClass ( units , class ) ; var un ; begin
79626: LD_INT 0
79628: PPUSH
79629: PPUSH
// if not units or not class then
79630: LD_VAR 0 1
79634: NOT
79635: PUSH
79636: LD_VAR 0 2
79640: NOT
79641: OR
79642: IFFALSE 79646
// exit ;
79644: GO 79741
// result := [ ] ;
79646: LD_ADDR_VAR 0 3
79650: PUSH
79651: EMPTY
79652: ST_TO_ADDR
// for un in units do
79653: LD_ADDR_VAR 0 4
79657: PUSH
79658: LD_VAR 0 1
79662: PUSH
79663: FOR_IN
79664: IFFALSE 79739
// if GetClass ( un ) = class then
79666: LD_VAR 0 4
79670: PPUSH
79671: CALL_OW 257
79675: PUSH
79676: LD_VAR 0 2
79680: EQUAL
79681: IFFALSE 79708
// result := Insert ( result , 1 , un ) else
79683: LD_ADDR_VAR 0 3
79687: PUSH
79688: LD_VAR 0 3
79692: PPUSH
79693: LD_INT 1
79695: PPUSH
79696: LD_VAR 0 4
79700: PPUSH
79701: CALL_OW 2
79705: ST_TO_ADDR
79706: GO 79737
// result := Replace ( result , result + 1 , un ) ;
79708: LD_ADDR_VAR 0 3
79712: PUSH
79713: LD_VAR 0 3
79717: PPUSH
79718: LD_VAR 0 3
79722: PUSH
79723: LD_INT 1
79725: PLUS
79726: PPUSH
79727: LD_VAR 0 4
79731: PPUSH
79732: CALL_OW 1
79736: ST_TO_ADDR
79737: GO 79663
79739: POP
79740: POP
// end ;
79741: LD_VAR 0 3
79745: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79746: LD_INT 0
79748: PPUSH
79749: PPUSH
79750: PPUSH
79751: PPUSH
79752: PPUSH
79753: PPUSH
79754: PPUSH
// result := [ ] ;
79755: LD_ADDR_VAR 0 4
79759: PUSH
79760: EMPTY
79761: ST_TO_ADDR
// if x - r < 0 then
79762: LD_VAR 0 1
79766: PUSH
79767: LD_VAR 0 3
79771: MINUS
79772: PUSH
79773: LD_INT 0
79775: LESS
79776: IFFALSE 79788
// min_x := 0 else
79778: LD_ADDR_VAR 0 8
79782: PUSH
79783: LD_INT 0
79785: ST_TO_ADDR
79786: GO 79804
// min_x := x - r ;
79788: LD_ADDR_VAR 0 8
79792: PUSH
79793: LD_VAR 0 1
79797: PUSH
79798: LD_VAR 0 3
79802: MINUS
79803: ST_TO_ADDR
// if y - r < 0 then
79804: LD_VAR 0 2
79808: PUSH
79809: LD_VAR 0 3
79813: MINUS
79814: PUSH
79815: LD_INT 0
79817: LESS
79818: IFFALSE 79830
// min_y := 0 else
79820: LD_ADDR_VAR 0 7
79824: PUSH
79825: LD_INT 0
79827: ST_TO_ADDR
79828: GO 79846
// min_y := y - r ;
79830: LD_ADDR_VAR 0 7
79834: PUSH
79835: LD_VAR 0 2
79839: PUSH
79840: LD_VAR 0 3
79844: MINUS
79845: ST_TO_ADDR
// max_x := x + r ;
79846: LD_ADDR_VAR 0 9
79850: PUSH
79851: LD_VAR 0 1
79855: PUSH
79856: LD_VAR 0 3
79860: PLUS
79861: ST_TO_ADDR
// max_y := y + r ;
79862: LD_ADDR_VAR 0 10
79866: PUSH
79867: LD_VAR 0 2
79871: PUSH
79872: LD_VAR 0 3
79876: PLUS
79877: ST_TO_ADDR
// for _x = min_x to max_x do
79878: LD_ADDR_VAR 0 5
79882: PUSH
79883: DOUBLE
79884: LD_VAR 0 8
79888: DEC
79889: ST_TO_ADDR
79890: LD_VAR 0 9
79894: PUSH
79895: FOR_TO
79896: IFFALSE 79997
// for _y = min_y to max_y do
79898: LD_ADDR_VAR 0 6
79902: PUSH
79903: DOUBLE
79904: LD_VAR 0 7
79908: DEC
79909: ST_TO_ADDR
79910: LD_VAR 0 10
79914: PUSH
79915: FOR_TO
79916: IFFALSE 79993
// begin if not ValidHex ( _x , _y ) then
79918: LD_VAR 0 5
79922: PPUSH
79923: LD_VAR 0 6
79927: PPUSH
79928: CALL_OW 488
79932: NOT
79933: IFFALSE 79937
// continue ;
79935: GO 79915
// if GetResourceTypeXY ( _x , _y ) then
79937: LD_VAR 0 5
79941: PPUSH
79942: LD_VAR 0 6
79946: PPUSH
79947: CALL_OW 283
79951: IFFALSE 79991
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79953: LD_ADDR_VAR 0 4
79957: PUSH
79958: LD_VAR 0 4
79962: PPUSH
79963: LD_VAR 0 4
79967: PUSH
79968: LD_INT 1
79970: PLUS
79971: PPUSH
79972: LD_VAR 0 5
79976: PUSH
79977: LD_VAR 0 6
79981: PUSH
79982: EMPTY
79983: LIST
79984: LIST
79985: PPUSH
79986: CALL_OW 1
79990: ST_TO_ADDR
// end ;
79991: GO 79915
79993: POP
79994: POP
79995: GO 79895
79997: POP
79998: POP
// end ;
79999: LD_VAR 0 4
80003: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80004: LD_INT 0
80006: PPUSH
80007: PPUSH
80008: PPUSH
80009: PPUSH
80010: PPUSH
80011: PPUSH
80012: PPUSH
80013: PPUSH
// if not units then
80014: LD_VAR 0 1
80018: NOT
80019: IFFALSE 80023
// exit ;
80021: GO 80547
// result := UnitFilter ( units , [ f_ok ] ) ;
80023: LD_ADDR_VAR 0 3
80027: PUSH
80028: LD_VAR 0 1
80032: PPUSH
80033: LD_INT 50
80035: PUSH
80036: EMPTY
80037: LIST
80038: PPUSH
80039: CALL_OW 72
80043: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80044: LD_ADDR_VAR 0 8
80048: PUSH
80049: LD_VAR 0 1
80053: PUSH
80054: LD_INT 1
80056: ARRAY
80057: PPUSH
80058: CALL_OW 255
80062: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80063: LD_ADDR_VAR 0 10
80067: PUSH
80068: LD_INT 29
80070: PUSH
80071: LD_INT 91
80073: PUSH
80074: LD_INT 49
80076: PUSH
80077: EMPTY
80078: LIST
80079: LIST
80080: LIST
80081: ST_TO_ADDR
// if not result then
80082: LD_VAR 0 3
80086: NOT
80087: IFFALSE 80091
// exit ;
80089: GO 80547
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80091: LD_ADDR_VAR 0 5
80095: PUSH
80096: LD_INT 81
80098: PUSH
80099: LD_VAR 0 8
80103: PUSH
80104: EMPTY
80105: LIST
80106: LIST
80107: PPUSH
80108: CALL_OW 69
80112: ST_TO_ADDR
// for i in result do
80113: LD_ADDR_VAR 0 4
80117: PUSH
80118: LD_VAR 0 3
80122: PUSH
80123: FOR_IN
80124: IFFALSE 80545
// begin tag := GetTag ( i ) + 1 ;
80126: LD_ADDR_VAR 0 9
80130: PUSH
80131: LD_VAR 0 4
80135: PPUSH
80136: CALL_OW 110
80140: PUSH
80141: LD_INT 1
80143: PLUS
80144: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80145: LD_ADDR_VAR 0 7
80149: PUSH
80150: LD_VAR 0 4
80154: PPUSH
80155: CALL_OW 250
80159: PPUSH
80160: LD_VAR 0 4
80164: PPUSH
80165: CALL_OW 251
80169: PPUSH
80170: LD_INT 6
80172: PPUSH
80173: CALL 79746 0 3
80177: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80178: LD_VAR 0 4
80182: PPUSH
80183: CALL_OW 247
80187: PUSH
80188: LD_INT 2
80190: EQUAL
80191: PUSH
80192: LD_VAR 0 7
80196: AND
80197: PUSH
80198: LD_VAR 0 4
80202: PPUSH
80203: CALL_OW 264
80207: PUSH
80208: LD_VAR 0 10
80212: IN
80213: NOT
80214: AND
80215: IFFALSE 80254
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80217: LD_VAR 0 4
80221: PPUSH
80222: LD_VAR 0 7
80226: PUSH
80227: LD_INT 1
80229: ARRAY
80230: PUSH
80231: LD_INT 1
80233: ARRAY
80234: PPUSH
80235: LD_VAR 0 7
80239: PUSH
80240: LD_INT 1
80242: ARRAY
80243: PUSH
80244: LD_INT 2
80246: ARRAY
80247: PPUSH
80248: CALL_OW 116
80252: GO 80543
// if path > tag then
80254: LD_VAR 0 2
80258: PUSH
80259: LD_VAR 0 9
80263: GREATER
80264: IFFALSE 80472
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80266: LD_ADDR_VAR 0 6
80270: PUSH
80271: LD_VAR 0 5
80275: PPUSH
80276: LD_INT 91
80278: PUSH
80279: LD_VAR 0 4
80283: PUSH
80284: LD_INT 8
80286: PUSH
80287: EMPTY
80288: LIST
80289: LIST
80290: LIST
80291: PPUSH
80292: CALL_OW 72
80296: ST_TO_ADDR
// if nearEnemy then
80297: LD_VAR 0 6
80301: IFFALSE 80370
// begin if GetWeapon ( i ) = ru_time_lapser then
80303: LD_VAR 0 4
80307: PPUSH
80308: CALL_OW 264
80312: PUSH
80313: LD_INT 49
80315: EQUAL
80316: IFFALSE 80344
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80318: LD_VAR 0 4
80322: PPUSH
80323: LD_VAR 0 6
80327: PPUSH
80328: LD_VAR 0 4
80332: PPUSH
80333: CALL_OW 74
80337: PPUSH
80338: CALL_OW 112
80342: GO 80368
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80344: LD_VAR 0 4
80348: PPUSH
80349: LD_VAR 0 6
80353: PPUSH
80354: LD_VAR 0 4
80358: PPUSH
80359: CALL_OW 74
80363: PPUSH
80364: CALL 81472 0 2
// end else
80368: GO 80470
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80370: LD_VAR 0 4
80374: PPUSH
80375: LD_VAR 0 2
80379: PUSH
80380: LD_VAR 0 9
80384: ARRAY
80385: PUSH
80386: LD_INT 1
80388: ARRAY
80389: PPUSH
80390: LD_VAR 0 2
80394: PUSH
80395: LD_VAR 0 9
80399: ARRAY
80400: PUSH
80401: LD_INT 2
80403: ARRAY
80404: PPUSH
80405: CALL_OW 297
80409: PUSH
80410: LD_INT 6
80412: GREATER
80413: IFFALSE 80456
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80415: LD_VAR 0 4
80419: PPUSH
80420: LD_VAR 0 2
80424: PUSH
80425: LD_VAR 0 9
80429: ARRAY
80430: PUSH
80431: LD_INT 1
80433: ARRAY
80434: PPUSH
80435: LD_VAR 0 2
80439: PUSH
80440: LD_VAR 0 9
80444: ARRAY
80445: PUSH
80446: LD_INT 2
80448: ARRAY
80449: PPUSH
80450: CALL_OW 114
80454: GO 80470
// SetTag ( i , tag ) ;
80456: LD_VAR 0 4
80460: PPUSH
80461: LD_VAR 0 9
80465: PPUSH
80466: CALL_OW 109
// end else
80470: GO 80543
// if enemy then
80472: LD_VAR 0 5
80476: IFFALSE 80543
// begin if GetWeapon ( i ) = ru_time_lapser then
80478: LD_VAR 0 4
80482: PPUSH
80483: CALL_OW 264
80487: PUSH
80488: LD_INT 49
80490: EQUAL
80491: IFFALSE 80519
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80493: LD_VAR 0 4
80497: PPUSH
80498: LD_VAR 0 5
80502: PPUSH
80503: LD_VAR 0 4
80507: PPUSH
80508: CALL_OW 74
80512: PPUSH
80513: CALL_OW 112
80517: GO 80543
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80519: LD_VAR 0 4
80523: PPUSH
80524: LD_VAR 0 5
80528: PPUSH
80529: LD_VAR 0 4
80533: PPUSH
80534: CALL_OW 74
80538: PPUSH
80539: CALL 81472 0 2
// end ; end ;
80543: GO 80123
80545: POP
80546: POP
// end ;
80547: LD_VAR 0 3
80551: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80552: LD_INT 0
80554: PPUSH
80555: PPUSH
80556: PPUSH
// if not unit or IsInUnit ( unit ) then
80557: LD_VAR 0 1
80561: NOT
80562: PUSH
80563: LD_VAR 0 1
80567: PPUSH
80568: CALL_OW 310
80572: OR
80573: IFFALSE 80577
// exit ;
80575: GO 80668
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80577: LD_ADDR_VAR 0 4
80581: PUSH
80582: LD_VAR 0 1
80586: PPUSH
80587: CALL_OW 250
80591: PPUSH
80592: LD_VAR 0 2
80596: PPUSH
80597: LD_INT 1
80599: PPUSH
80600: CALL_OW 272
80604: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80605: LD_ADDR_VAR 0 5
80609: PUSH
80610: LD_VAR 0 1
80614: PPUSH
80615: CALL_OW 251
80619: PPUSH
80620: LD_VAR 0 2
80624: PPUSH
80625: LD_INT 1
80627: PPUSH
80628: CALL_OW 273
80632: ST_TO_ADDR
// if ValidHex ( x , y ) then
80633: LD_VAR 0 4
80637: PPUSH
80638: LD_VAR 0 5
80642: PPUSH
80643: CALL_OW 488
80647: IFFALSE 80668
// ComTurnXY ( unit , x , y ) ;
80649: LD_VAR 0 1
80653: PPUSH
80654: LD_VAR 0 4
80658: PPUSH
80659: LD_VAR 0 5
80663: PPUSH
80664: CALL_OW 118
// end ;
80668: LD_VAR 0 3
80672: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80673: LD_INT 0
80675: PPUSH
80676: PPUSH
// result := false ;
80677: LD_ADDR_VAR 0 3
80681: PUSH
80682: LD_INT 0
80684: ST_TO_ADDR
// if not units then
80685: LD_VAR 0 2
80689: NOT
80690: IFFALSE 80694
// exit ;
80692: GO 80739
// for i in units do
80694: LD_ADDR_VAR 0 4
80698: PUSH
80699: LD_VAR 0 2
80703: PUSH
80704: FOR_IN
80705: IFFALSE 80737
// if See ( side , i ) then
80707: LD_VAR 0 1
80711: PPUSH
80712: LD_VAR 0 4
80716: PPUSH
80717: CALL_OW 292
80721: IFFALSE 80735
// begin result := true ;
80723: LD_ADDR_VAR 0 3
80727: PUSH
80728: LD_INT 1
80730: ST_TO_ADDR
// exit ;
80731: POP
80732: POP
80733: GO 80739
// end ;
80735: GO 80704
80737: POP
80738: POP
// end ;
80739: LD_VAR 0 3
80743: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80744: LD_INT 0
80746: PPUSH
80747: PPUSH
80748: PPUSH
80749: PPUSH
// if not unit or not points then
80750: LD_VAR 0 1
80754: NOT
80755: PUSH
80756: LD_VAR 0 2
80760: NOT
80761: OR
80762: IFFALSE 80766
// exit ;
80764: GO 80856
// dist := 99999 ;
80766: LD_ADDR_VAR 0 5
80770: PUSH
80771: LD_INT 99999
80773: ST_TO_ADDR
// for i in points do
80774: LD_ADDR_VAR 0 4
80778: PUSH
80779: LD_VAR 0 2
80783: PUSH
80784: FOR_IN
80785: IFFALSE 80854
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80787: LD_ADDR_VAR 0 6
80791: PUSH
80792: LD_VAR 0 1
80796: PPUSH
80797: LD_VAR 0 4
80801: PUSH
80802: LD_INT 1
80804: ARRAY
80805: PPUSH
80806: LD_VAR 0 4
80810: PUSH
80811: LD_INT 2
80813: ARRAY
80814: PPUSH
80815: CALL_OW 297
80819: ST_TO_ADDR
// if tmpDist < dist then
80820: LD_VAR 0 6
80824: PUSH
80825: LD_VAR 0 5
80829: LESS
80830: IFFALSE 80852
// begin result := i ;
80832: LD_ADDR_VAR 0 3
80836: PUSH
80837: LD_VAR 0 4
80841: ST_TO_ADDR
// dist := tmpDist ;
80842: LD_ADDR_VAR 0 5
80846: PUSH
80847: LD_VAR 0 6
80851: ST_TO_ADDR
// end ; end ;
80852: GO 80784
80854: POP
80855: POP
// end ;
80856: LD_VAR 0 3
80860: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80861: LD_INT 0
80863: PPUSH
// uc_side := side ;
80864: LD_ADDR_OWVAR 20
80868: PUSH
80869: LD_VAR 0 1
80873: ST_TO_ADDR
// uc_nation := 3 ;
80874: LD_ADDR_OWVAR 21
80878: PUSH
80879: LD_INT 3
80881: ST_TO_ADDR
// vc_chassis := 25 ;
80882: LD_ADDR_OWVAR 37
80886: PUSH
80887: LD_INT 25
80889: ST_TO_ADDR
// vc_engine := engine_siberite ;
80890: LD_ADDR_OWVAR 39
80894: PUSH
80895: LD_INT 3
80897: ST_TO_ADDR
// vc_control := control_computer ;
80898: LD_ADDR_OWVAR 38
80902: PUSH
80903: LD_INT 3
80905: ST_TO_ADDR
// vc_weapon := 59 ;
80906: LD_ADDR_OWVAR 40
80910: PUSH
80911: LD_INT 59
80913: ST_TO_ADDR
// result := CreateVehicle ;
80914: LD_ADDR_VAR 0 5
80918: PUSH
80919: CALL_OW 45
80923: ST_TO_ADDR
// SetDir ( result , d ) ;
80924: LD_VAR 0 5
80928: PPUSH
80929: LD_VAR 0 4
80933: PPUSH
80934: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80938: LD_VAR 0 5
80942: PPUSH
80943: LD_VAR 0 2
80947: PPUSH
80948: LD_VAR 0 3
80952: PPUSH
80953: LD_INT 0
80955: PPUSH
80956: CALL_OW 48
// end ;
80960: LD_VAR 0 5
80964: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80965: LD_INT 0
80967: PPUSH
80968: PPUSH
80969: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80970: LD_ADDR_VAR 0 2
80974: PUSH
80975: LD_INT 0
80977: PUSH
80978: LD_INT 0
80980: PUSH
80981: LD_INT 0
80983: PUSH
80984: LD_INT 0
80986: PUSH
80987: EMPTY
80988: LIST
80989: LIST
80990: LIST
80991: LIST
80992: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80993: LD_VAR 0 1
80997: NOT
80998: PUSH
80999: LD_VAR 0 1
81003: PPUSH
81004: CALL_OW 264
81008: PUSH
81009: LD_INT 12
81011: PUSH
81012: LD_INT 51
81014: PUSH
81015: LD_INT 32
81017: PUSH
81018: LD_INT 89
81020: PUSH
81021: EMPTY
81022: LIST
81023: LIST
81024: LIST
81025: LIST
81026: IN
81027: NOT
81028: OR
81029: IFFALSE 81033
// exit ;
81031: GO 81131
// for i := 1 to 3 do
81033: LD_ADDR_VAR 0 3
81037: PUSH
81038: DOUBLE
81039: LD_INT 1
81041: DEC
81042: ST_TO_ADDR
81043: LD_INT 3
81045: PUSH
81046: FOR_TO
81047: IFFALSE 81129
// begin tmp := GetCargo ( cargo , i ) ;
81049: LD_ADDR_VAR 0 4
81053: PUSH
81054: LD_VAR 0 1
81058: PPUSH
81059: LD_VAR 0 3
81063: PPUSH
81064: CALL_OW 289
81068: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81069: LD_ADDR_VAR 0 2
81073: PUSH
81074: LD_VAR 0 2
81078: PPUSH
81079: LD_VAR 0 3
81083: PPUSH
81084: LD_VAR 0 4
81088: PPUSH
81089: CALL_OW 1
81093: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81094: LD_ADDR_VAR 0 2
81098: PUSH
81099: LD_VAR 0 2
81103: PPUSH
81104: LD_INT 4
81106: PPUSH
81107: LD_VAR 0 2
81111: PUSH
81112: LD_INT 4
81114: ARRAY
81115: PUSH
81116: LD_VAR 0 4
81120: PLUS
81121: PPUSH
81122: CALL_OW 1
81126: ST_TO_ADDR
// end ;
81127: GO 81046
81129: POP
81130: POP
// end ;
81131: LD_VAR 0 2
81135: RET
// export function Length ( array ) ; begin
81136: LD_INT 0
81138: PPUSH
// result := array + 0 ;
81139: LD_ADDR_VAR 0 2
81143: PUSH
81144: LD_VAR 0 1
81148: PUSH
81149: LD_INT 0
81151: PLUS
81152: ST_TO_ADDR
// end ;
81153: LD_VAR 0 2
81157: RET
// export function PrepareArray ( array ) ; begin
81158: LD_INT 0
81160: PPUSH
// result := array diff 0 ;
81161: LD_ADDR_VAR 0 2
81165: PUSH
81166: LD_VAR 0 1
81170: PUSH
81171: LD_INT 0
81173: DIFF
81174: ST_TO_ADDR
// if not result [ 1 ] then
81175: LD_VAR 0 2
81179: PUSH
81180: LD_INT 1
81182: ARRAY
81183: NOT
81184: IFFALSE 81204
// result := Delete ( result , 1 ) ;
81186: LD_ADDR_VAR 0 2
81190: PUSH
81191: LD_VAR 0 2
81195: PPUSH
81196: LD_INT 1
81198: PPUSH
81199: CALL_OW 3
81203: ST_TO_ADDR
// end ;
81204: LD_VAR 0 2
81208: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81209: LD_INT 0
81211: PPUSH
81212: PPUSH
81213: PPUSH
81214: PPUSH
// sibRocketRange := 25 ;
81215: LD_ADDR_VAR 0 6
81219: PUSH
81220: LD_INT 25
81222: ST_TO_ADDR
// result := false ;
81223: LD_ADDR_VAR 0 4
81227: PUSH
81228: LD_INT 0
81230: ST_TO_ADDR
// for i := 0 to 5 do
81231: LD_ADDR_VAR 0 5
81235: PUSH
81236: DOUBLE
81237: LD_INT 0
81239: DEC
81240: ST_TO_ADDR
81241: LD_INT 5
81243: PUSH
81244: FOR_TO
81245: IFFALSE 81312
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81247: LD_VAR 0 1
81251: PPUSH
81252: LD_VAR 0 5
81256: PPUSH
81257: LD_VAR 0 6
81261: PPUSH
81262: CALL_OW 272
81266: PPUSH
81267: LD_VAR 0 2
81271: PPUSH
81272: LD_VAR 0 5
81276: PPUSH
81277: LD_VAR 0 6
81281: PPUSH
81282: CALL_OW 273
81286: PPUSH
81287: LD_VAR 0 3
81291: PPUSH
81292: CALL_OW 309
81296: IFFALSE 81310
// begin result := true ;
81298: LD_ADDR_VAR 0 4
81302: PUSH
81303: LD_INT 1
81305: ST_TO_ADDR
// exit ;
81306: POP
81307: POP
81308: GO 81314
// end ;
81310: GO 81244
81312: POP
81313: POP
// end ;
81314: LD_VAR 0 4
81318: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81319: LD_INT 0
81321: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81322: LD_VAR 0 1
81326: PPUSH
81327: LD_VAR 0 2
81331: PPUSH
81332: LD_INT 0
81334: PPUSH
81335: LD_INT 0
81337: PPUSH
81338: LD_INT 1
81340: PPUSH
81341: LD_INT 0
81343: PPUSH
81344: CALL_OW 587
// end ;
81348: LD_VAR 0 3
81352: RET
// export function CenterOnNow ( unit ) ; begin
81353: LD_INT 0
81355: PPUSH
// result := IsInUnit ( unit ) ;
81356: LD_ADDR_VAR 0 2
81360: PUSH
81361: LD_VAR 0 1
81365: PPUSH
81366: CALL_OW 310
81370: ST_TO_ADDR
// if not result then
81371: LD_VAR 0 2
81375: NOT
81376: IFFALSE 81388
// result := unit ;
81378: LD_ADDR_VAR 0 2
81382: PUSH
81383: LD_VAR 0 1
81387: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81388: LD_VAR 0 1
81392: PPUSH
81393: CALL_OW 87
// end ;
81397: LD_VAR 0 2
81401: RET
// export function ComMoveHex ( unit , hex ) ; begin
81402: LD_INT 0
81404: PPUSH
// if not hex then
81405: LD_VAR 0 2
81409: NOT
81410: IFFALSE 81414
// exit ;
81412: GO 81467
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81414: LD_VAR 0 2
81418: PUSH
81419: LD_INT 1
81421: ARRAY
81422: PPUSH
81423: LD_VAR 0 2
81427: PUSH
81428: LD_INT 2
81430: ARRAY
81431: PPUSH
81432: CALL_OW 428
81436: IFFALSE 81440
// exit ;
81438: GO 81467
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81440: LD_VAR 0 1
81444: PPUSH
81445: LD_VAR 0 2
81449: PUSH
81450: LD_INT 1
81452: ARRAY
81453: PPUSH
81454: LD_VAR 0 2
81458: PUSH
81459: LD_INT 2
81461: ARRAY
81462: PPUSH
81463: CALL_OW 111
// end ;
81467: LD_VAR 0 3
81471: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
81472: LD_INT 0
81474: PPUSH
81475: PPUSH
81476: PPUSH
// if not unit or not enemy then
81477: LD_VAR 0 1
81481: NOT
81482: PUSH
81483: LD_VAR 0 2
81487: NOT
81488: OR
81489: IFFALSE 81493
// exit ;
81491: GO 81617
// x := GetX ( enemy ) ;
81493: LD_ADDR_VAR 0 4
81497: PUSH
81498: LD_VAR 0 2
81502: PPUSH
81503: CALL_OW 250
81507: ST_TO_ADDR
// y := GetY ( enemy ) ;
81508: LD_ADDR_VAR 0 5
81512: PUSH
81513: LD_VAR 0 2
81517: PPUSH
81518: CALL_OW 251
81522: ST_TO_ADDR
// if ValidHex ( x , y ) then
81523: LD_VAR 0 4
81527: PPUSH
81528: LD_VAR 0 5
81532: PPUSH
81533: CALL_OW 488
81537: IFFALSE 81617
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
81539: LD_VAR 0 2
81543: PPUSH
81544: CALL_OW 247
81548: PUSH
81549: LD_INT 3
81551: PUSH
81552: LD_INT 2
81554: PUSH
81555: EMPTY
81556: LIST
81557: LIST
81558: IN
81559: PUSH
81560: LD_VAR 0 1
81564: PPUSH
81565: CALL_OW 255
81569: PPUSH
81570: LD_VAR 0 2
81574: PPUSH
81575: CALL_OW 292
81579: AND
81580: IFFALSE 81598
// ComAttackUnit ( unit , enemy ) else
81582: LD_VAR 0 1
81586: PPUSH
81587: LD_VAR 0 2
81591: PPUSH
81592: CALL_OW 115
81596: GO 81617
// ComAgressiveMove ( unit , x , y ) ;
81598: LD_VAR 0 1
81602: PPUSH
81603: LD_VAR 0 4
81607: PPUSH
81608: LD_VAR 0 5
81612: PPUSH
81613: CALL_OW 114
// end ; end_of_file
81617: LD_VAR 0 3
81621: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81622: LD_VAR 0 1
81626: PUSH
81627: LD_INT 200
81629: DOUBLE
81630: GREATEREQUAL
81631: IFFALSE 81639
81633: LD_INT 299
81635: DOUBLE
81636: LESSEQUAL
81637: IFTRUE 81641
81639: GO 81673
81641: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81642: LD_VAR 0 1
81646: PPUSH
81647: LD_VAR 0 2
81651: PPUSH
81652: LD_VAR 0 3
81656: PPUSH
81657: LD_VAR 0 4
81661: PPUSH
81662: LD_VAR 0 5
81666: PPUSH
81667: CALL 35346 0 5
81671: GO 81750
81673: LD_INT 300
81675: DOUBLE
81676: GREATEREQUAL
81677: IFFALSE 81685
81679: LD_INT 399
81681: DOUBLE
81682: LESSEQUAL
81683: IFTRUE 81687
81685: GO 81749
81687: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81688: LD_VAR 0 1
81692: PPUSH
81693: LD_VAR 0 2
81697: PPUSH
81698: LD_VAR 0 3
81702: PPUSH
81703: LD_VAR 0 4
81707: PPUSH
81708: LD_VAR 0 5
81712: PPUSH
81713: LD_VAR 0 6
81717: PPUSH
81718: LD_VAR 0 7
81722: PPUSH
81723: LD_VAR 0 8
81727: PPUSH
81728: LD_VAR 0 9
81732: PPUSH
81733: LD_VAR 0 10
81737: PPUSH
81738: LD_VAR 0 11
81742: PPUSH
81743: CALL 31671 0 11
81747: GO 81750
81749: POP
// end ;
81750: PPOPN 11
81752: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81753: LD_VAR 0 1
81757: PPUSH
81758: LD_VAR 0 2
81762: PPUSH
81763: LD_VAR 0 3
81767: PPUSH
81768: LD_VAR 0 4
81772: PPUSH
81773: LD_VAR 0 5
81777: PPUSH
81778: CALL 35082 0 5
// end ; end_of_file
81782: PPOPN 5
81784: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81785: LD_VAR 0 1
81789: PPUSH
81790: LD_VAR 0 2
81794: PPUSH
81795: LD_VAR 0 3
81799: PPUSH
81800: LD_VAR 0 4
81804: PPUSH
81805: LD_VAR 0 5
81809: PPUSH
81810: LD_VAR 0 6
81814: PPUSH
81815: CALL 19323 0 6
// end ;
81819: PPOPN 6
81821: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81822: LD_INT 0
81824: PPUSH
// begin if not units then
81825: LD_VAR 0 1
81829: NOT
81830: IFFALSE 81834
// exit ;
81832: GO 81834
// end ;
81834: PPOPN 7
81836: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81837: CALL 19227 0 0
// end ;
81841: PPOPN 1
81843: END
