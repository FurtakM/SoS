// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3454 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2668 0 0
// PrepareWesternBase ;
  41: CALL 2897 0 0
// Action ;
  45: CALL 5785 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty , vcount , tmpv ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
// uc_side := 4 ;
1157: LD_ADDR_OWVAR 20
1161: PUSH
1162: LD_INT 4
1164: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1165: LD_ADDR_EXP 46
1169: PUSH
1170: LD_STRING Powell
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: LD_STRING 
1178: PPUSH
1179: CALL 39963 0 3
1183: ST_TO_ADDR
// uc_side := 1 ;
1184: LD_ADDR_OWVAR 20
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// uc_nation := 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// if debug then
1200: LD_EXP 1
1204: IFFALSE 1550
// begin for i = 1 to 4 do
1206: LD_ADDR_VAR 0 2
1210: PUSH
1211: DOUBLE
1212: LD_INT 1
1214: DEC
1215: ST_TO_ADDR
1216: LD_INT 4
1218: PUSH
1219: FOR_TO
1220: IFFALSE 1271
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL_OW 380
// un := CreateHuman ;
1243: LD_ADDR_VAR 0 3
1247: PUSH
1248: CALL_OW 44
1252: ST_TO_ADDR
// others := others ^ un ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_VAR 0 5
1262: PUSH
1263: LD_VAR 0 3
1267: ADD
1268: ST_TO_ADDR
// end ;
1269: GO 1219
1271: POP
1272: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun , 0 , 750 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1273: LD_ADDR_VAR 0 6
1277: PUSH
1278: LD_INT 21
1280: PUSH
1281: LD_INT 1
1283: PUSH
1284: LD_INT 1
1286: PUSH
1287: LD_INT 42
1289: PUSH
1290: LD_INT 0
1292: PUSH
1293: LD_INT 750
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 21
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 42
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 750
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_INT 21
1332: PUSH
1333: LD_INT 1
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: LD_INT 42
1341: PUSH
1342: LD_INT 0
1344: PUSH
1345: LD_INT 750
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 42
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 750
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 21
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 44
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: LD_INT 750
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: LD_INT 43
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 750
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 21
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: LD_INT 43
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 750
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 21
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 43
1471: PUSH
1472: LD_INT 0
1474: PUSH
1475: LD_INT 750
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 21
1488: PUSH
1489: LD_INT 1
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 90
1500: PUSH
1501: LD_INT 504
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 51
1523: PUSH
1524: LD_INT 80
1526: PUSH
1527: LD_INT 750
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1550: LD_ADDR_EXP 37
1554: PUSH
1555: LD_STRING JMM
1557: PPUSH
1558: LD_EXP 1
1562: NOT
1563: PPUSH
1564: LD_EXP 3
1568: PPUSH
1569: CALL 39963 0 3
1573: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1574: LD_ADDR_EXP 38
1578: PUSH
1579: LD_STRING Bobby
1581: PPUSH
1582: LD_EXP 1
1586: NOT
1587: PPUSH
1588: LD_EXP 3
1592: PPUSH
1593: CALL 39963 0 3
1597: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1598: LD_ADDR_EXP 39
1602: PUSH
1603: LD_STRING Cyrus
1605: PPUSH
1606: LD_EXP 1
1610: NOT
1611: PPUSH
1612: LD_EXP 3
1616: PPUSH
1617: CALL 39963 0 3
1621: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1622: LD_ADDR_EXP 40
1626: PUSH
1627: LD_STRING Lisa
1629: PPUSH
1630: LD_EXP 1
1634: NOT
1635: PPUSH
1636: LD_EXP 3
1640: PPUSH
1641: CALL 39963 0 3
1645: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1646: LD_ADDR_EXP 41
1650: PUSH
1651: LD_STRING Khatam
1653: PPUSH
1654: LD_EXP 1
1658: NOT
1659: PPUSH
1660: LD_EXP 3
1664: PPUSH
1665: CALL 39963 0 3
1669: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1670: LD_ADDR_EXP 42
1674: PUSH
1675: LD_STRING Brian
1677: PPUSH
1678: LD_EXP 1
1682: NOT
1683: PPUSH
1684: LD_EXP 3
1688: PPUSH
1689: CALL 39963 0 3
1693: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1694: LD_ADDR_EXP 43
1698: PUSH
1699: LD_STRING Jerry
1701: PPUSH
1702: LD_EXP 1
1706: NOT
1707: PPUSH
1708: LD_EXP 3
1712: PPUSH
1713: CALL 39963 0 3
1717: ST_TO_ADDR
// if Bobby then
1718: LD_EXP 38
1722: IFFALSE 1753
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1724: LD_ADDR_VAR 0 4
1728: PUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: LD_VAR 0 4
1738: PUSH
1739: LD_INT 1
1741: PLUS
1742: PPUSH
1743: LD_EXP 38
1747: PPUSH
1748: CALL_OW 2
1752: ST_TO_ADDR
// if Cyrus then
1753: LD_EXP 39
1757: IFFALSE 1788
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_VAR 0 4
1773: PUSH
1774: LD_INT 1
1776: PLUS
1777: PPUSH
1778: LD_EXP 39
1782: PPUSH
1783: CALL_OW 2
1787: ST_TO_ADDR
// if Lisa then
1788: LD_EXP 40
1792: IFFALSE 1823
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: LD_VAR 0 4
1808: PUSH
1809: LD_INT 1
1811: PLUS
1812: PPUSH
1813: LD_EXP 40
1817: PPUSH
1818: CALL_OW 2
1822: ST_TO_ADDR
// if Khatam then
1823: LD_EXP 41
1827: IFFALSE 1858
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: LD_VAR 0 4
1843: PUSH
1844: LD_INT 1
1846: PLUS
1847: PPUSH
1848: LD_EXP 41
1852: PPUSH
1853: CALL_OW 2
1857: ST_TO_ADDR
// if Brian then
1858: LD_EXP 42
1862: IFFALSE 1893
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1864: LD_ADDR_VAR 0 4
1868: PUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_VAR 0 4
1878: PUSH
1879: LD_INT 1
1881: PLUS
1882: PPUSH
1883: LD_EXP 42
1887: PPUSH
1888: CALL_OW 2
1892: ST_TO_ADDR
// if Jerry then
1893: LD_EXP 43
1897: IFFALSE 1928
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: PLUS
1917: PPUSH
1918: LD_EXP 43
1922: PPUSH
1923: CALL_OW 2
1927: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1928: LD_STRING 02_other_survivors
1930: PPUSH
1931: CALL_OW 28
1935: IFFALSE 1950
// others := CreateCharacterSet ( 02_other_survivors ) ;
1937: LD_ADDR_VAR 0 5
1941: PUSH
1942: LD_STRING 02_other_survivors
1944: PPUSH
1945: CALL_OW 31
1949: ST_TO_ADDR
// if others then
1950: LD_VAR 0 5
1954: IFFALSE 1979
// begin tmp := tmp ^ others ;
1956: LD_ADDR_VAR 0 4
1960: PUSH
1961: LD_VAR 0 4
1965: PUSH
1966: LD_VAR 0 5
1970: ADD
1971: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1972: LD_STRING 02_other_survivors
1974: PPUSH
1975: CALL_OW 40
// end ; jmm_units := tmp diff 0 ;
1979: LD_ADDR_EXP 4
1983: PUSH
1984: LD_VAR 0 4
1988: PUSH
1989: LD_INT 0
1991: DIFF
1992: ST_TO_ADDR
// if not vehicles then
1993: LD_VAR 0 6
1997: NOT
1998: IFFALSE 2015
// vehicles := LoadVariable ( 02_tanks_1 , [ ] ) ;
2000: LD_ADDR_VAR 0 6
2004: PUSH
2005: LD_STRING 02_tanks_1
2007: PPUSH
2008: EMPTY
2009: PPUSH
2010: CALL_OW 30
2014: ST_TO_ADDR
// if vehicles then
2015: LD_VAR 0 6
2019: IFFALSE 2387
// begin got_mech := false ;
2021: LD_ADDR_VAR 0 7
2025: PUSH
2026: LD_INT 0
2028: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 72
2048: IFFALSE 2058
// got_mech := true ;
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// vcount := Count ( vehicles ) ;
2058: LD_ADDR_VAR 0 9
2062: PUSH
2063: LD_VAR 0 6
2067: PPUSH
2068: CALL 42065 0 1
2072: ST_TO_ADDR
// if vcount > 1 then
2073: LD_VAR 0 9
2077: PUSH
2078: LD_INT 1
2080: GREATER
2081: IFFALSE 2184
// begin for i := 2 to vcount do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 2
2091: DEC
2092: ST_TO_ADDR
2093: LD_VAR 0 9
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2182
// if vehicles [ i ] [ 4 ] = ru_cargo_bay then
2101: LD_VAR 0 6
2105: PUSH
2106: LD_VAR 0 2
2110: ARRAY
2111: PUSH
2112: LD_INT 4
2114: ARRAY
2115: PUSH
2116: LD_INT 51
2118: EQUAL
2119: IFFALSE 2180
// begin tmpv := vehicles [ i ] ;
2121: LD_ADDR_VAR 0 10
2125: PUSH
2126: LD_VAR 0 6
2130: PUSH
2131: LD_VAR 0 2
2135: ARRAY
2136: ST_TO_ADDR
// vehicles := Delete ( vehicles , i ) ;
2137: LD_ADDR_VAR 0 6
2141: PUSH
2142: LD_VAR 0 6
2146: PPUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 3
2156: ST_TO_ADDR
// vehicles := Insert ( vehicles , 1 , tmpv ) ;
2157: LD_ADDR_VAR 0 6
2161: PUSH
2162: LD_VAR 0 6
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_VAR 0 10
2174: PPUSH
2175: CALL_OW 2
2179: ST_TO_ADDR
// end ;
2180: GO 2098
2182: POP
2183: POP
// end ; if vcount > 6 then
2184: LD_VAR 0 9
2188: PUSH
2189: LD_INT 6
2191: GREATER
2192: IFFALSE 2202
// vcount := 6 ;
2194: LD_ADDR_VAR 0 9
2198: PUSH
2199: LD_INT 6
2201: ST_TO_ADDR
// if jmm_units + 1 < vcount then
2202: LD_EXP 4
2206: PUSH
2207: LD_INT 1
2209: PLUS
2210: PUSH
2211: LD_VAR 0 9
2215: LESS
2216: IFFALSE 2232
// vcount := jmm_units + 1 ;
2218: LD_ADDR_VAR 0 9
2222: PUSH
2223: LD_EXP 4
2227: PUSH
2228: LD_INT 1
2230: PLUS
2231: ST_TO_ADDR
// for i := 1 to vcount do
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: DOUBLE
2238: LD_INT 1
2240: DEC
2241: ST_TO_ADDR
2242: LD_VAR 0 9
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2385
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 3
2260: PPUSH
2261: LD_VAR 0 6
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: LD_VAR 0 6
2280: PUSH
2281: LD_VAR 0 2
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 6
2295: PUSH
2296: LD_VAR 0 2
2300: ARRAY
2301: PUSH
2302: LD_INT 3
2304: ARRAY
2305: PPUSH
2306: LD_VAR 0 6
2310: PUSH
2311: LD_VAR 0 2
2315: ARRAY
2316: PUSH
2317: LD_INT 4
2319: ARRAY
2320: PPUSH
2321: LD_INT 40
2323: PPUSH
2324: CALL 497 0 7
2328: ST_TO_ADDR
// if not got_mech then
2329: LD_VAR 0 7
2333: NOT
2334: IFFALSE 2360
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_VAR 0 6
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_INT 6
2354: ARRAY
2355: PPUSH
2356: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_VAR 0 3
2377: PPUSH
2378: CALL_OW 2
2382: ST_TO_ADDR
// end ;
2383: GO 2247
2385: POP
2386: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
2387: LD_EXP 37
2391: PPUSH
2392: LD_INT 194
2394: PPUSH
2395: LD_INT 119
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 48
// if tmp then
2405: LD_VAR 0 4
2409: IFFALSE 2597
// begin for i in tmp do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_VAR 0 4
2420: PUSH
2421: FOR_IN
2422: IFFALSE 2595
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL_OW 257
2433: PUSH
2434: LD_INT 1
2436: NONEQUAL
2437: PUSH
2438: LD_VAR 0 2
2442: PUSH
2443: LD_EXP 41
2447: NONEQUAL
2448: AND
2449: IFFALSE 2463
// SetClass ( i , 1 ) ;
2451: LD_VAR 0 2
2455: PPUSH
2456: LD_INT 1
2458: PPUSH
2459: CALL_OW 336
// if i = Khatam then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_EXP 41
2472: EQUAL
2473: IFFALSE 2487
// SetClass ( i , 4 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 4
2482: PPUSH
2483: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2487: LD_ADDR_VAR 0 8
2491: PUSH
2492: LD_INT 22
2494: PUSH
2495: LD_INT 1
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 21
2504: PUSH
2505: LD_INT 2
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 58
2514: PUSH
2515: EMPTY
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2528: LD_VAR 0 2
2532: PPUSH
2533: CALL_OW 247
2537: PUSH
2538: LD_INT 1
2540: EQUAL
2541: PUSH
2542: LD_VAR 0 8
2546: AND
2547: IFFALSE 2569
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2549: LD_VAR 0 2
2553: PPUSH
2554: LD_VAR 0 8
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PPUSH
2563: CALL_OW 52
2567: GO 2584
// PlaceUnitArea ( i , startArea , false ) ;
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 0
2579: PPUSH
2580: CALL_OW 49
// ComHold ( i ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: CALL_OW 140
// end ;
2593: GO 2421
2595: POP
2596: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2597: LD_ADDR_EXP 7
2601: PUSH
2602: LD_STRING 02_mikhailStatus_1
2604: PPUSH
2605: LD_INT 0
2607: PPUSH
2608: CALL_OW 30
2612: ST_TO_ADDR
// if not bierezov_exist and not debug then
2613: LD_EXP 7
2617: NOT
2618: PUSH
2619: LD_EXP 1
2623: NOT
2624: AND
2625: IFFALSE 2629
// exit ;
2627: GO 2663
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2629: LD_ADDR_EXP 45
2633: PUSH
2634: LD_STRING Mikhail
2636: PPUSH
2637: LD_INT 0
2639: PPUSH
2640: LD_STRING 
2642: PPUSH
2643: CALL 39963 0 3
2647: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2648: LD_EXP 45
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 49
// end ;
2663: LD_VAR 0 1
2667: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
2673: PPUSH
// uc_side := 4 ;
2674: LD_ADDR_OWVAR 20
2678: PUSH
2679: LD_INT 4
2681: ST_TO_ADDR
// uc_nation := 1 ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 1
2689: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2690: LD_ADDR_EXP 44
2694: PUSH
2695: LD_STRING Cornell
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: LD_STRING 
2703: PPUSH
2704: CALL 39963 0 3
2708: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2709: LD_ADDR_EXP 6
2713: PUSH
2714: LD_INT 9
2716: PUSH
2717: LD_EXP 4
2721: MINUS
2722: ST_TO_ADDR
// tmp := [ ] ;
2723: LD_ADDR_VAR 0 2
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// if cornel_units < 4 then
2730: LD_EXP 6
2734: PUSH
2735: LD_INT 4
2737: LESS
2738: IFFALSE 2748
// cornel_units := 4 ;
2740: LD_ADDR_EXP 6
2744: PUSH
2745: LD_INT 4
2747: ST_TO_ADDR
// for i = 1 to cornel_units do
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: DOUBLE
2754: LD_INT 1
2756: DEC
2757: ST_TO_ADDR
2758: LD_EXP 6
2762: PUSH
2763: FOR_TO
2764: IFFALSE 2862
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2766: LD_INT 0
2768: PPUSH
2769: LD_INT 1
2771: PUSH
2772: LD_INT 1
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: LD_INT 4
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: PUSH
2791: LD_VAR 0 4
2795: PUSH
2796: LD_INT 5
2798: MOD
2799: PUSH
2800: LD_INT 1
2802: PLUS
2803: ARRAY
2804: PPUSH
2805: LD_INT 2
2807: PPUSH
2808: CALL_OW 380
// un := CreateHuman ;
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: CALL_OW 44
2821: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2822: LD_ADDR_VAR 0 2
2826: PUSH
2827: LD_VAR 0 2
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: LD_VAR 0 3
2839: PPUSH
2840: CALL_OW 2
2844: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2845: LD_VAR 0 3
2849: PPUSH
2850: LD_INT 2
2852: PPUSH
2853: LD_INT 0
2855: PPUSH
2856: CALL_OW 49
// end ;
2860: GO 2763
2862: POP
2863: POP
// cornel_units := tmp ;
2864: LD_ADDR_EXP 6
2868: PUSH
2869: LD_VAR 0 2
2873: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2874: LD_EXP 44
2878: PPUSH
2879: LD_INT 191
2881: PPUSH
2882: LD_INT 106
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 48
// end ;
2892: LD_VAR 0 1
2896: RET
// export function PrepareWesternBase ; var i ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
// uc_side := 8 ;
2901: LD_ADDR_OWVAR 20
2905: PUSH
2906: LD_INT 8
2908: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2909: LD_ADDR_EXP 47
2913: PUSH
2914: LD_STRING Lynch
2916: PPUSH
2917: LD_INT 0
2919: PPUSH
2920: LD_STRING 
2922: PPUSH
2923: CALL 39963 0 3
2927: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2928: LD_ADDR_EXP 48
2932: PUSH
2933: LD_STRING Walker
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: LD_STRING 
2941: PPUSH
2942: CALL 39963 0 3
2946: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2947: LD_ADDR_EXP 49
2951: PUSH
2952: LD_STRING Turner
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: LD_STRING 
2960: PPUSH
2961: CALL 39963 0 3
2965: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2966: LD_ADDR_EXP 50
2970: PUSH
2971: LD_STRING Jillian
2973: PPUSH
2974: LD_INT 0
2976: PPUSH
2977: LD_STRING 
2979: PPUSH
2980: CALL 39963 0 3
2984: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: LD_EXP 47
2994: PUSH
2995: LD_EXP 48
2999: PUSH
3000: LD_EXP 49
3004: PUSH
3005: LD_EXP 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: FOR_IN
3017: IFFALSE 3045
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 3
3026: PPUSH
3027: LD_INT 0
3029: PPUSH
3030: CALL_OW 49
// ComHold ( i ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 140
// end ;
3043: GO 3016
3045: POP
3046: POP
// end ;
3047: LD_VAR 0 1
3051: RET
// export function SelectGroup ; var units , selected , i ; begin
3052: LD_INT 0
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
3058: LD_ADDR_VAR 0 2
3062: PUSH
3063: LD_EXP 37
3067: PUSH
3068: LD_INT -3
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: LD_EXP 4
3079: ADD
3080: PUSH
3081: LD_INT -2
3083: PUSH
3084: LD_INT -4
3086: PUSH
3087: LD_EXP 44
3091: PUSH
3092: LD_EXP 45
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: ADD
3103: PUSH
3104: LD_INT -3
3106: PUSH
3107: EMPTY
3108: LIST
3109: ADD
3110: PUSH
3111: LD_EXP 6
3115: ADD
3116: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
3117: LD_ADDR_VAR 0 3
3121: PUSH
3122: LD_EXP 37
3126: PUSH
3127: LD_STRING Select four characters to go with you
3129: PPUSH
3130: LD_INT 4
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: LD_VAR 0 2
3140: PPUSH
3141: EMPTY
3142: PPUSH
3143: CALL_OW 42
3147: ADD
3148: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
3149: LD_ADDR_EXP 6
3153: PUSH
3154: LD_EXP 4
3158: PUSH
3159: LD_EXP 6
3163: UNION
3164: PUSH
3165: LD_VAR 0 3
3169: DIFF
3170: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
3171: LD_ADDR_VAR 0 4
3175: PUSH
3176: LD_EXP 6
3180: PUSH
3181: LD_EXP 45
3185: ADD
3186: PUSH
3187: FOR_IN
3188: IFFALSE 3219
// if GetSide ( i ) = 1 then
3190: LD_VAR 0 4
3194: PPUSH
3195: CALL_OW 255
3199: PUSH
3200: LD_INT 1
3202: EQUAL
3203: IFFALSE 3217
// SetSide ( i , 4 ) ;
3205: LD_VAR 0 4
3209: PPUSH
3210: LD_INT 4
3212: PPUSH
3213: CALL_OW 235
3217: GO 3187
3219: POP
3220: POP
// for i in selected do
3221: LD_ADDR_VAR 0 4
3225: PUSH
3226: LD_VAR 0 3
3230: PUSH
3231: FOR_IN
3232: IFFALSE 3263
// if GetSide ( i ) = 4 then
3234: LD_VAR 0 4
3238: PPUSH
3239: CALL_OW 255
3243: PUSH
3244: LD_INT 4
3246: EQUAL
3247: IFFALSE 3261
// SetSide ( i , 1 ) ;
3249: LD_VAR 0 4
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: CALL_OW 235
3261: GO 3231
3263: POP
3264: POP
// jmm_units := jmm_units diff cornel_units ;
3265: LD_ADDR_EXP 4
3269: PUSH
3270: LD_EXP 4
3274: PUSH
3275: LD_EXP 6
3279: DIFF
3280: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
3281: LD_EXP 38
3285: PPUSH
3286: CALL_OW 255
3290: PUSH
3291: LD_INT 4
3293: EQUAL
3294: IFFALSE 3309
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
3296: LD_EXP 3
3300: PUSH
3301: LD_STRING Bobby
3303: STR
3304: PPUSH
3305: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
3309: LD_EXP 39
3313: PPUSH
3314: CALL_OW 255
3318: PUSH
3319: LD_INT 4
3321: EQUAL
3322: IFFALSE 3337
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
3324: LD_EXP 3
3328: PUSH
3329: LD_STRING Cyrus
3331: STR
3332: PPUSH
3333: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
3337: LD_EXP 40
3341: PPUSH
3342: CALL_OW 255
3346: PUSH
3347: LD_INT 4
3349: EQUAL
3350: IFFALSE 3365
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
3352: LD_EXP 3
3356: PUSH
3357: LD_STRING Lisa
3359: STR
3360: PPUSH
3361: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
3365: LD_EXP 41
3369: PPUSH
3370: CALL_OW 255
3374: PUSH
3375: LD_INT 4
3377: EQUAL
3378: IFFALSE 3393
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
3380: LD_EXP 3
3384: PUSH
3385: LD_STRING Khatam
3387: STR
3388: PPUSH
3389: CALL_OW 40
// if GetSide ( Brian ) = 4 then
3393: LD_EXP 42
3397: PPUSH
3398: CALL_OW 255
3402: PUSH
3403: LD_INT 4
3405: EQUAL
3406: IFFALSE 3421
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3408: LD_EXP 3
3412: PUSH
3413: LD_STRING Brian
3415: STR
3416: PPUSH
3417: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3421: LD_EXP 43
3425: PPUSH
3426: CALL_OW 255
3430: PUSH
3431: LD_INT 4
3433: EQUAL
3434: IFFALSE 3449
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3436: LD_EXP 3
3440: PUSH
3441: LD_STRING Jerry
3443: STR
3444: PPUSH
3445: CALL_OW 40
// end ; end_of_file
3449: LD_VAR 0 1
3453: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3454: LD_INT 0
3456: PPUSH
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
// ru_alert := false ;
3469: LD_ADDR_EXP 60
3473: PUSH
3474: LD_INT 0
3476: ST_TO_ADDR
// ru_produce_list := [ ] ;
3477: LD_ADDR_EXP 57
3481: PUSH
3482: EMPTY
3483: ST_TO_ADDR
// if Difficulty > 1 then
3484: LD_OWVAR 67
3488: PUSH
3489: LD_INT 1
3491: GREATER
3492: IFFALSE 3616
// begin uc_side := 3 ;
3494: LD_ADDR_OWVAR 20
3498: PUSH
3499: LD_INT 3
3501: ST_TO_ADDR
// uc_nation := 3 ;
3502: LD_ADDR_OWVAR 21
3506: PUSH
3507: LD_INT 3
3509: ST_TO_ADDR
// bc_type := b_breastwork ;
3510: LD_ADDR_OWVAR 42
3514: PUSH
3515: LD_INT 31
3517: ST_TO_ADDR
// bc_level := Difficulty ;
3518: LD_ADDR_OWVAR 43
3522: PUSH
3523: LD_OWVAR 67
3527: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3528: LD_INT 22
3530: PPUSH
3531: LD_INT 14
3533: PPUSH
3534: LD_INT 0
3536: PPUSH
3537: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3541: LD_INT 48
3543: PPUSH
3544: LD_INT 46
3546: PPUSH
3547: LD_INT 0
3549: PPUSH
3550: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3554: LD_INT 86
3556: PPUSH
3557: LD_INT 65
3559: PPUSH
3560: LD_INT 5
3562: PPUSH
3563: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3567: LD_INT 165
3569: PPUSH
3570: LD_INT 73
3572: PPUSH
3573: LD_INT 5
3575: PPUSH
3576: CALL_OW 47
// if Difficulty > 2 then
3580: LD_OWVAR 67
3584: PUSH
3585: LD_INT 2
3587: GREATER
3588: IFFALSE 3616
// begin CreateAndPlaceBuildingXYD ( 152 , 114 , 4 ) ;
3590: LD_INT 152
3592: PPUSH
3593: LD_INT 114
3595: PPUSH
3596: LD_INT 4
3598: PPUSH
3599: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 157 , 97 , 4 ) ;
3603: LD_INT 157
3605: PPUSH
3606: LD_INT 97
3608: PPUSH
3609: LD_INT 4
3611: PPUSH
3612: CALL_OW 47
// end ; end ; if Difficulty >= 3 then
3616: LD_OWVAR 67
3620: PUSH
3621: LD_INT 3
3623: GREATEREQUAL
3624: IFFALSE 3639
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3626: LD_INT 51
3628: PPUSH
3629: LD_INT 3
3631: PPUSH
3632: LD_INT 2
3634: PPUSH
3635: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3639: LD_ADDR_VAR 0 7
3643: PUSH
3644: LD_INT 22
3646: PUSH
3647: LD_INT 3
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 2
3656: PUSH
3657: LD_INT 30
3659: PUSH
3660: LD_INT 31
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PUSH
3667: LD_INT 30
3669: PUSH
3670: LD_INT 32
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3691: LD_ADDR_VAR 0 8
3695: PUSH
3696: LD_INT 22
3698: PUSH
3699: LD_INT 3
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: LD_INT 30
3708: PUSH
3709: LD_INT 4
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PPUSH
3720: CALL_OW 69
3724: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3725: LD_ADDR_VAR 0 10
3729: PUSH
3730: LD_INT 22
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PUSH
3740: LD_INT 30
3742: PUSH
3743: LD_INT 3
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: PPUSH
3754: CALL_OW 69
3758: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3759: LD_ADDR_VAR 0 9
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 3
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 30
3776: PUSH
3777: LD_INT 6
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PPUSH
3788: CALL_OW 69
3792: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3793: LD_ADDR_VAR 0 2
3797: PUSH
3798: LD_INT 22
3800: PUSH
3801: LD_INT 3
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: LD_INT 30
3810: PUSH
3811: LD_INT 1
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PPUSH
3822: CALL_OW 69
3826: PUSH
3827: FOR_IN
3828: IFFALSE 3872
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3830: LD_VAR 0 2
3834: PPUSH
3835: CALL_OW 274
3839: PPUSH
3840: LD_INT 1
3842: PPUSH
3843: LD_INT 1000
3845: PPUSH
3846: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3850: LD_VAR 0 2
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 2
3862: PPUSH
3863: LD_INT 300
3865: PPUSH
3866: CALL_OW 277
// end ;
3870: GO 3827
3872: POP
3873: POP
// uc_side := 3 ;
3874: LD_ADDR_OWVAR 20
3878: PUSH
3879: LD_INT 3
3881: ST_TO_ADDR
// uc_nation := 3 ;
3882: LD_ADDR_OWVAR 21
3886: PUSH
3887: LD_INT 3
3889: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3890: LD_ADDR_VAR 0 11
3894: PUSH
3895: LD_INT 2
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: LD_INT 4
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: PUSH
3913: LD_OWVAR 67
3917: ARRAY
3918: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3919: LD_ADDR_EXP 52
3923: PUSH
3924: LD_STRING Pokryshkin
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: LD_STRING 
3932: PPUSH
3933: CALL 39963 0 3
3937: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3938: LD_EXP 52
3942: PPUSH
3943: LD_INT 63
3945: PPUSH
3946: LD_INT 21
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3956: LD_EXP 52
3960: PPUSH
3961: CALL_OW 140
// InitHc ;
3965: CALL_OW 19
// for i in fac do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: LD_VAR 0 10
3978: PUSH
3979: FOR_IN
3980: IFFALSE 4033
// begin for j = 1 to 6 do
3982: LD_ADDR_VAR 0 3
3986: PUSH
3987: DOUBLE
3988: LD_INT 1
3990: DEC
3991: ST_TO_ADDR
3992: LD_INT 6
3994: PUSH
3995: FOR_TO
3996: IFFALSE 4029
// begin PrepareHuman ( false , 3 , skill ) ;
3998: LD_INT 0
4000: PPUSH
4001: LD_INT 3
4003: PPUSH
4004: LD_VAR 0 11
4008: PPUSH
4009: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4013: CALL_OW 44
4017: PPUSH
4018: LD_VAR 0 2
4022: PPUSH
4023: CALL_OW 52
// end ;
4027: GO 3995
4029: POP
4030: POP
// end ;
4031: GO 3979
4033: POP
4034: POP
// for i in lab do
4035: LD_ADDR_VAR 0 2
4039: PUSH
4040: LD_VAR 0 9
4044: PUSH
4045: FOR_IN
4046: IFFALSE 4079
// begin PrepareHuman ( false , 4 , skill ) ;
4048: LD_INT 0
4050: PPUSH
4051: LD_INT 4
4053: PPUSH
4054: LD_VAR 0 11
4058: PPUSH
4059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4063: CALL_OW 44
4067: PPUSH
4068: LD_VAR 0 2
4072: PPUSH
4073: CALL_OW 52
// end ;
4077: GO 4045
4079: POP
4080: POP
// for i in tw do
4081: LD_ADDR_VAR 0 2
4085: PUSH
4086: LD_VAR 0 7
4090: PUSH
4091: FOR_IN
4092: IFFALSE 4141
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
4094: LD_VAR 0 2
4098: PPUSH
4099: LD_INT 42
4101: PUSH
4102: LD_INT 43
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 1
4111: PPUSH
4112: LD_INT 2
4114: PPUSH
4115: CALL_OW 12
4119: ARRAY
4120: PPUSH
4121: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
4125: LD_VAR 0 11
4129: PPUSH
4130: LD_VAR 0 2
4134: PPUSH
4135: CALL 775 0 2
// end ;
4139: GO 4091
4141: POP
4142: POP
// for i in bar do
4143: LD_ADDR_VAR 0 2
4147: PUSH
4148: LD_VAR 0 8
4152: PUSH
4153: FOR_IN
4154: IFFALSE 4187
// begin PrepareHuman ( false , 1 , skill ) ;
4156: LD_INT 0
4158: PPUSH
4159: LD_INT 1
4161: PPUSH
4162: LD_VAR 0 11
4166: PPUSH
4167: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4171: CALL_OW 44
4175: PPUSH
4176: LD_VAR 0 2
4180: PPUSH
4181: CALL_OW 52
// end ;
4185: GO 4153
4187: POP
4188: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
4189: LD_ADDR_VAR 0 13
4193: PUSH
4194: LD_INT 100
4196: PUSH
4197: LD_INT 9
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 135
4206: PUSH
4207: LD_INT 60
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: LD_INT 41
4216: PUSH
4217: LD_INT 6
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: LD_INT 22
4226: PUSH
4227: LD_INT 9
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 84
4236: PUSH
4237: LD_INT 14
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: ST_TO_ADDR
// vehicles := [ ] ;
4251: LD_ADDR_VAR 0 12
4255: PUSH
4256: EMPTY
4257: ST_TO_ADDR
// for i in spot_xy do
4258: LD_ADDR_VAR 0 2
4262: PUSH
4263: LD_VAR 0 13
4267: PUSH
4268: FOR_IN
4269: IFFALSE 4427
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
4271: LD_ADDR_VAR 0 6
4275: PUSH
4276: LD_INT 3
4278: PPUSH
4279: LD_INT 3
4281: PPUSH
4282: LD_INT 22
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 1
4290: PPUSH
4291: LD_INT 42
4293: PUSH
4294: LD_INT 43
4296: PUSH
4297: LD_INT 44
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 3
4310: PPUSH
4311: CALL_OW 12
4315: ARRAY
4316: PPUSH
4317: LD_INT 100
4319: PPUSH
4320: CALL 497 0 7
4324: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
4325: LD_ADDR_VAR 0 12
4329: PUSH
4330: LD_VAR 0 12
4334: PPUSH
4335: LD_VAR 0 12
4339: PUSH
4340: LD_INT 1
4342: PLUS
4343: PPUSH
4344: LD_VAR 0 6
4348: PPUSH
4349: CALL_OW 2
4353: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4354: LD_VAR 0 6
4358: PPUSH
4359: LD_INT 3
4361: PPUSH
4362: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
4366: LD_VAR 0 6
4370: PPUSH
4371: LD_VAR 0 2
4375: PUSH
4376: LD_INT 1
4378: ARRAY
4379: PPUSH
4380: LD_VAR 0 2
4384: PUSH
4385: LD_INT 2
4387: ARRAY
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
4396: LD_INT 0
4398: PPUSH
4399: LD_INT 3
4401: PPUSH
4402: LD_VAR 0 11
4406: PPUSH
4407: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4411: CALL_OW 44
4415: PPUSH
4416: LD_VAR 0 6
4420: PPUSH
4421: CALL_OW 52
// end ;
4425: GO 4268
4427: POP
4428: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: DOUBLE
4435: LD_INT 1
4437: DEC
4438: ST_TO_ADDR
4439: LD_INT 5
4441: PUSH
4442: LD_INT 7
4444: PUSH
4445: LD_INT 8
4447: PUSH
4448: LD_INT 9
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PUSH
4463: FOR_TO
4464: IFFALSE 4524
// begin PrepareHuman ( false , 1 , skill ) ;
4466: LD_INT 0
4468: PPUSH
4469: LD_INT 1
4471: PPUSH
4472: LD_VAR 0 11
4476: PPUSH
4477: CALL_OW 380
// un := CreateHuman ;
4481: LD_ADDR_VAR 0 5
4485: PUSH
4486: CALL_OW 44
4490: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4491: LD_VAR 0 5
4495: PPUSH
4496: LD_INT 11
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4506: LD_ADDR_EXP 55
4510: PUSH
4511: LD_EXP 55
4515: PUSH
4516: LD_VAR 0 5
4520: ADD
4521: ST_TO_ADDR
// end ;
4522: GO 4463
4524: POP
4525: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 2
4538: PUSH
4539: LD_INT 3
4541: PUSH
4542: LD_INT 4
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PUSH
4554: LD_OWVAR 67
4558: ARRAY
4559: PUSH
4560: FOR_TO
4561: IFFALSE 4621
// begin PrepareHuman ( false , 1 , skill ) ;
4563: LD_INT 0
4565: PPUSH
4566: LD_INT 1
4568: PPUSH
4569: LD_VAR 0 11
4573: PPUSH
4574: CALL_OW 380
// un := CreateHuman ;
4578: LD_ADDR_VAR 0 5
4582: PUSH
4583: CALL_OW 44
4587: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4588: LD_VAR 0 5
4592: PPUSH
4593: LD_INT 12
4595: PPUSH
4596: LD_INT 0
4598: PPUSH
4599: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4603: LD_ADDR_EXP 53
4607: PUSH
4608: LD_EXP 53
4612: PUSH
4613: LD_VAR 0 5
4617: ADD
4618: ST_TO_ADDR
// end ;
4619: GO 4560
4621: POP
4622: POP
// for i = 1 to 2 do
4623: LD_ADDR_VAR 0 2
4627: PUSH
4628: DOUBLE
4629: LD_INT 1
4631: DEC
4632: ST_TO_ADDR
4633: LD_INT 2
4635: PUSH
4636: FOR_TO
4637: IFFALSE 4730
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4639: LD_INT 1
4641: PPUSH
4642: LD_INT 1
4644: PPUSH
4645: LD_VAR 0 11
4649: PPUSH
4650: CALL_OW 380
// hc_attr := [ 8 + Difficulty , 8 + Difficulty ] ;
4654: LD_ADDR_OWVAR 29
4658: PUSH
4659: LD_INT 8
4661: PUSH
4662: LD_OWVAR 67
4666: PLUS
4667: PUSH
4668: LD_INT 8
4670: PUSH
4671: LD_OWVAR 67
4675: PLUS
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: ST_TO_ADDR
// un := CreateHuman ;
4681: LD_ADDR_VAR 0 5
4685: PUSH
4686: CALL_OW 44
4690: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4691: LD_VAR 0 5
4695: PPUSH
4696: LD_INT 39
4698: PPUSH
4699: LD_INT 12
4701: PPUSH
4702: LD_INT 3
4704: PPUSH
4705: LD_INT 0
4707: PPUSH
4708: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4712: LD_ADDR_EXP 54
4716: PUSH
4717: LD_EXP 54
4721: PUSH
4722: LD_VAR 0 5
4726: ADD
4727: ST_TO_ADDR
// end ;
4728: GO 4636
4730: POP
4731: POP
// InitHc ;
4732: CALL_OW 19
// for i = 1 to 3 do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_INT 3
4748: PUSH
4749: FOR_TO
4750: IFFALSE 4816
// begin PrepareHuman ( false , 1 , skill ) ;
4752: LD_INT 0
4754: PPUSH
4755: LD_INT 1
4757: PPUSH
4758: LD_VAR 0 11
4762: PPUSH
4763: CALL_OW 380
// un := CreateHuman ;
4767: LD_ADDR_VAR 0 5
4771: PUSH
4772: CALL_OW 44
4776: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4777: LD_VAR 0 5
4781: PPUSH
4782: LD_INT 180
4784: PPUSH
4785: LD_INT 11
4787: PPUSH
4788: LD_INT 4
4790: PPUSH
4791: LD_INT 0
4793: PPUSH
4794: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4798: LD_ADDR_EXP 58
4802: PUSH
4803: LD_EXP 58
4807: PUSH
4808: LD_VAR 0 5
4812: ADD
4813: ST_TO_ADDR
// end ;
4814: GO 4749
4816: POP
4817: POP
// ru_vehicles := vehicles ;
4818: LD_ADDR_EXP 56
4822: PUSH
4823: LD_VAR 0 12
4827: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4828: LD_ADDR_EXP 59
4832: PUSH
4833: LD_INT 131
4835: PUSH
4836: LD_INT 121
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 113
4845: PUSH
4846: LD_INT 90
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 93
4855: PUSH
4856: LD_INT 62
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 106
4870: PUSH
4871: LD_INT 54
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: LD_INT 120
4880: PUSH
4881: LD_INT 80
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 143
4890: PUSH
4891: LD_INT 120
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: PUSH
4903: LD_INT 154
4905: PUSH
4906: LD_INT 116
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: LD_INT 140
4915: PUSH
4916: LD_INT 93
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: LD_INT 130
4925: PUSH
4926: LD_INT 58
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: PUSH
4938: LD_INT 105
4940: PUSH
4941: LD_INT 106
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 134
4950: PUSH
4951: LD_INT 98
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 159
4960: PUSH
4961: LD_INT 113
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: ST_TO_ADDR
// if Difficulty = 1 then
4979: LD_OWVAR 67
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: IFFALSE 4991
// exit ;
4989: GO 5046
// for i = 1 to Difficulty - 1 do
4991: LD_ADDR_VAR 0 2
4995: PUSH
4996: DOUBLE
4997: LD_INT 1
4999: DEC
5000: ST_TO_ADDR
5001: LD_OWVAR 67
5005: PUSH
5006: LD_INT 1
5008: MINUS
5009: PUSH
5010: FOR_TO
5011: IFFALSE 5044
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
5013: LD_ADDR_EXP 57
5017: PUSH
5018: LD_EXP 57
5022: PUSH
5023: LD_INT 22
5025: PUSH
5026: LD_INT 1
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: LD_INT 43
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: ADD
5041: ST_TO_ADDR
5042: GO 5010
5044: POP
5045: POP
// end ;
5046: LD_VAR 0 1
5050: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
5051: LD_INT 22
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 21
5063: PUSH
5064: LD_INT 2
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PPUSH
5075: CALL_OW 69
5079: IFFALSE 5173
5081: GO 5083
5083: DISABLE
5084: LD_INT 0
5086: PPUSH
5087: PPUSH
// begin enable ;
5088: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
5089: LD_ADDR_VAR 0 2
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_INT 3
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 2
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PPUSH
5118: CALL_OW 69
5122: ST_TO_ADDR
// if filter then
5123: LD_VAR 0 2
5127: IFFALSE 5173
// for i in filter do
5129: LD_ADDR_VAR 0 1
5133: PUSH
5134: LD_VAR 0 2
5138: PUSH
5139: FOR_IN
5140: IFFALSE 5171
// if GetFuel ( i ) < 20 then
5142: LD_VAR 0 1
5146: PPUSH
5147: CALL_OW 261
5151: PUSH
5152: LD_INT 20
5154: LESS
5155: IFFALSE 5169
// SetFuel ( i , 20 ) ;
5157: LD_VAR 0 1
5161: PPUSH
5162: LD_INT 20
5164: PPUSH
5165: CALL_OW 240
5169: GO 5139
5171: POP
5172: POP
// end ;
5173: PPOPN 2
5175: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
5176: LD_EXP 57
5180: IFFALSE 5399
5182: GO 5184
5184: DISABLE
5185: LD_INT 0
5187: PPUSH
5188: PPUSH
5189: PPUSH
// begin enable ;
5190: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
5191: LD_ADDR_VAR 0 2
5195: PUSH
5196: LD_INT 22
5198: PUSH
5199: LD_INT 3
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 30
5208: PUSH
5209: LD_INT 3
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PPUSH
5220: CALL_OW 69
5224: ST_TO_ADDR
// can_produce := [ ] ;
5225: LD_ADDR_VAR 0 3
5229: PUSH
5230: EMPTY
5231: ST_TO_ADDR
// if not fac then
5232: LD_VAR 0 2
5236: NOT
5237: IFFALSE 5242
// begin disable ;
5239: DISABLE
// exit ;
5240: GO 5399
// end ; for i in fac do
5242: LD_ADDR_VAR 0 1
5246: PUSH
5247: LD_VAR 0 2
5251: PUSH
5252: FOR_IN
5253: IFFALSE 5291
// if UnitsInside ( i ) then
5255: LD_VAR 0 1
5259: PPUSH
5260: CALL_OW 313
5264: IFFALSE 5289
// can_produce := Insert ( can_produce , 1 , i ) ;
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_VAR 0 3
5275: PPUSH
5276: LD_INT 1
5278: PPUSH
5279: LD_VAR 0 1
5283: PPUSH
5284: CALL_OW 2
5288: ST_TO_ADDR
5289: GO 5252
5291: POP
5292: POP
// if not can_produce then
5293: LD_VAR 0 3
5297: NOT
5298: IFFALSE 5302
// exit ;
5300: GO 5399
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
5302: LD_VAR 0 3
5306: PUSH
5307: LD_INT 1
5309: PPUSH
5310: LD_VAR 0 3
5314: PPUSH
5315: CALL_OW 12
5319: ARRAY
5320: PPUSH
5321: LD_EXP 57
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: LD_EXP 57
5334: PUSH
5335: LD_INT 2
5337: ARRAY
5338: PPUSH
5339: LD_EXP 57
5343: PUSH
5344: LD_INT 3
5346: ARRAY
5347: PPUSH
5348: LD_EXP 57
5352: PUSH
5353: LD_INT 4
5355: ARRAY
5356: PPUSH
5357: CALL_OW 125
// for i = 1 to 4 do
5361: LD_ADDR_VAR 0 1
5365: PUSH
5366: DOUBLE
5367: LD_INT 1
5369: DEC
5370: ST_TO_ADDR
5371: LD_INT 4
5373: PUSH
5374: FOR_TO
5375: IFFALSE 5397
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
5377: LD_ADDR_EXP 57
5381: PUSH
5382: LD_EXP 57
5386: PPUSH
5387: LD_INT 1
5389: PPUSH
5390: CALL_OW 3
5394: ST_TO_ADDR
5395: GO 5374
5397: POP
5398: POP
// end ;
5399: PPOPN 3
5401: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
5402: LD_INT 0
5404: PPUSH
5405: PPUSH
5406: PPUSH
// for i = 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
5407: LD_ADDR_VAR 0 2
5411: PUSH
5412: DOUBLE
5413: LD_INT 1
5415: DEC
5416: ST_TO_ADDR
5417: LD_INT 2
5419: PUSH
5420: LD_INT 3
5422: PUSH
5423: LD_INT 3
5425: PUSH
5426: LD_INT 3
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: LD_OWVAR 67
5439: ARRAY
5440: PUSH
5441: FOR_TO
5442: IFFALSE 5591
// begin PrepareHuman ( false , 3 , 3 ) ;
5444: LD_INT 0
5446: PPUSH
5447: LD_INT 3
5449: PPUSH
5450: LD_INT 3
5452: PPUSH
5453: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
5457: LD_ADDR_VAR 0 3
5461: PUSH
5462: LD_INT 3
5464: PPUSH
5465: LD_INT 3
5467: PPUSH
5468: LD_INT 22
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: LD_INT 1
5476: PPUSH
5477: LD_INT 43
5479: PUSH
5480: LD_INT 42
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 1
5489: PPUSH
5490: LD_INT 2
5492: PPUSH
5493: CALL_OW 12
5497: ARRAY
5498: PPUSH
5499: LD_INT 70
5501: PPUSH
5502: CALL 497 0 7
5506: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5507: LD_VAR 0 3
5511: PPUSH
5512: LD_INT 4
5514: PPUSH
5515: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5519: LD_VAR 0 3
5523: PPUSH
5524: LD_INT 229
5526: PPUSH
5527: LD_INT 44
5529: PPUSH
5530: LD_INT 0
5532: PPUSH
5533: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5537: CALL_OW 44
5541: PPUSH
5542: LD_VAR 0 3
5546: PPUSH
5547: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5551: LD_ADDR_EXP 56
5555: PUSH
5556: LD_EXP 56
5560: PUSH
5561: LD_VAR 0 3
5565: ADD
5566: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5567: LD_VAR 0 3
5571: PPUSH
5572: LD_INT 191
5574: PPUSH
5575: LD_INT 32
5577: PPUSH
5578: CALL_OW 111
// Wait ( 0 0$02 ) ;
5582: LD_INT 70
5584: PPUSH
5585: CALL_OW 67
// end ;
5589: GO 5441
5591: POP
5592: POP
// end ;
5593: LD_VAR 0 1
5597: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5598: LD_EXP 31
5602: PUSH
5603: LD_EXP 56
5607: AND
5608: IFFALSE 5782
5610: GO 5612
5612: DISABLE
5613: LD_INT 0
5615: PPUSH
5616: PPUSH
5617: PPUSH
// begin wait ( 0 0$50 ) ;
5618: LD_INT 1750
5620: PPUSH
5621: CALL_OW 67
// tmp := ru_vehicles ;
5625: LD_ADDR_VAR 0 3
5629: PUSH
5630: LD_EXP 56
5634: ST_TO_ADDR
// if not tmp then
5635: LD_VAR 0 3
5639: NOT
5640: IFFALSE 5644
// exit ;
5642: GO 5782
// repeat wait ( 0 0$1 ) ;
5644: LD_INT 35
5646: PPUSH
5647: CALL_OW 67
// for i in tmp do
5651: LD_ADDR_VAR 0 1
5655: PUSH
5656: LD_VAR 0 3
5660: PUSH
5661: FOR_IN
5662: IFFALSE 5773
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5664: LD_ADDR_VAR 0 2
5668: PUSH
5669: LD_INT 22
5671: PUSH
5672: LD_INT 1
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: LD_VAR 0 1
5683: PPUSH
5684: CALL_OW 74
5688: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5689: LD_VAR 0 1
5693: PPUSH
5694: LD_VAR 0 2
5698: PPUSH
5699: CALL_OW 296
5703: PUSH
5704: LD_INT 10
5706: GREATER
5707: IFFALSE 5726
// ComAgressiveMove ( i , 69 , 101 ) else
5709: LD_VAR 0 1
5713: PPUSH
5714: LD_INT 69
5716: PPUSH
5717: LD_INT 101
5719: PPUSH
5720: CALL_OW 114
5724: GO 5740
// ComAttackUnit ( i , enemy ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: CALL_OW 115
// if GetLives ( i ) < 250 then
5740: LD_VAR 0 1
5744: PPUSH
5745: CALL_OW 256
5749: PUSH
5750: LD_INT 250
5752: LESS
5753: IFFALSE 5771
// tmp := tmp diff i ;
5755: LD_ADDR_VAR 0 3
5759: PUSH
5760: LD_VAR 0 3
5764: PUSH
5765: LD_VAR 0 1
5769: DIFF
5770: ST_TO_ADDR
// end ;
5771: GO 5661
5773: POP
5774: POP
// until not tmp ;
5775: LD_VAR 0 3
5779: NOT
5780: IFFALSE 5644
// end ; end_of_file
5782: PPOPN 3
5784: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
// InGameOn ;
5794: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5798: LD_EXP 37
5802: PPUSH
5803: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5807: LD_EXP 37
5811: PPUSH
5812: LD_EXP 44
5816: PPUSH
5817: CALL_OW 119
// if Bierezov then
5821: LD_EXP 45
5825: IFFALSE 5841
// ComTurnUnit ( Bierezov , Cornel ) ;
5827: LD_EXP 45
5831: PPUSH
5832: LD_EXP 44
5836: PPUSH
5837: CALL_OW 119
// for i in jmm_units do
5841: LD_ADDR_VAR 0 2
5845: PUSH
5846: LD_EXP 4
5850: PUSH
5851: FOR_IN
5852: IFFALSE 5870
// ComTurnUnit ( i , Cornel ) ;
5854: LD_VAR 0 2
5858: PPUSH
5859: LD_EXP 44
5863: PPUSH
5864: CALL_OW 119
5868: GO 5851
5870: POP
5871: POP
// units := cornel_units union Cornel ;
5872: LD_ADDR_VAR 0 3
5876: PUSH
5877: LD_EXP 6
5881: PUSH
5882: LD_EXP 44
5886: UNION
5887: ST_TO_ADDR
// repeat wait ( 1 ) ;
5888: LD_INT 1
5890: PPUSH
5891: CALL_OW 67
// for i in units do
5895: LD_ADDR_VAR 0 2
5899: PUSH
5900: LD_VAR 0 3
5904: PUSH
5905: FOR_IN
5906: IFFALSE 5939
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5908: LD_VAR 0 2
5912: PPUSH
5913: LD_EXP 37
5917: PPUSH
5918: CALL_OW 250
5922: PPUSH
5923: LD_EXP 37
5927: PPUSH
5928: CALL_OW 251
5932: PPUSH
5933: CALL_OW 111
5937: GO 5905
5939: POP
5940: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5941: LD_VAR 0 3
5945: PPUSH
5946: LD_INT 92
5948: PUSH
5949: LD_EXP 37
5953: PPUSH
5954: CALL_OW 250
5958: PUSH
5959: LD_EXP 37
5963: PPUSH
5964: CALL_OW 251
5968: PUSH
5969: LD_INT 10
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PPUSH
5978: CALL_OW 72
5982: PUSH
5983: LD_VAR 0 3
5987: EQUAL
5988: IFFALSE 5888
// for i in units do
5990: LD_ADDR_VAR 0 2
5994: PUSH
5995: LD_VAR 0 3
5999: PUSH
6000: FOR_IN
6001: IFFALSE 6019
// ComTurnUnit ( i , JMM ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_EXP 37
6012: PPUSH
6013: CALL_OW 119
6017: GO 6000
6019: POP
6020: POP
// ComTurnUnit ( Cornel , JMM ) ;
6021: LD_EXP 44
6025: PPUSH
6026: LD_EXP 37
6030: PPUSH
6031: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
6035: LD_EXP 37
6039: PPUSH
6040: LD_STRING D1-JMM-1
6042: PPUSH
6043: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
6047: LD_EXP 44
6051: PPUSH
6052: LD_STRING D1-Corn-1
6054: PPUSH
6055: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
6059: LD_EXP 37
6063: PPUSH
6064: LD_EXP 44
6068: PPUSH
6069: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
6073: LD_EXP 44
6077: PPUSH
6078: LD_EXP 37
6082: PPUSH
6083: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
6087: LD_INT 35
6089: PPUSH
6090: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
6094: LD_EXP 37
6098: PPUSH
6099: LD_EXP 44
6103: PPUSH
6104: CALL_OW 296
6108: PUSH
6109: LD_INT 6
6111: LESS
6112: IFFALSE 6087
// ChangeSideFog ( 4 , 1 ) ;
6114: LD_INT 4
6116: PPUSH
6117: LD_INT 1
6119: PPUSH
6120: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
6124: LD_EXP 37
6128: PPUSH
6129: LD_EXP 44
6133: PPUSH
6134: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6138: LD_EXP 44
6142: PPUSH
6143: LD_EXP 37
6147: PPUSH
6148: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
6152: LD_EXP 37
6156: PPUSH
6157: LD_STRING D1-JMM-2
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
6164: LD_EXP 37
6168: PPUSH
6169: LD_STRING D1-JMM-2a
6171: PPUSH
6172: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
6176: LD_EXP 44
6180: PPUSH
6181: LD_STRING D1-Corn-2
6183: PPUSH
6184: CALL_OW 88
// if bierezov_exist or debug then
6188: LD_EXP 7
6192: PUSH
6193: LD_EXP 1
6197: OR
6198: IFFALSE 6439
// begin ComTurnUnit ( Cornel , Bierezov ) ;
6200: LD_EXP 44
6204: PPUSH
6205: LD_EXP 45
6209: PPUSH
6210: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
6214: LD_INT 10
6216: PPUSH
6217: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
6221: LD_EXP 44
6225: PPUSH
6226: LD_STRING D1a-Corn-1
6228: PPUSH
6229: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
6233: LD_EXP 37
6237: PPUSH
6238: LD_EXP 45
6242: PPUSH
6243: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
6247: LD_EXP 45
6251: PPUSH
6252: LD_EXP 37
6256: PPUSH
6257: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
6261: LD_EXP 37
6265: PPUSH
6266: LD_STRING D1a-JMM-1
6268: PPUSH
6269: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
6273: LD_EXP 37
6277: PPUSH
6278: LD_EXP 44
6282: PPUSH
6283: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
6287: LD_EXP 44
6291: PPUSH
6292: LD_EXP 37
6296: PPUSH
6297: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
6301: LD_EXP 44
6305: PPUSH
6306: LD_STRING D1a-Corn-2
6308: PPUSH
6309: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
6313: LD_EXP 37
6317: PPUSH
6318: LD_STRING D1a-JMM-2
6320: PPUSH
6321: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
6325: LD_EXP 44
6329: PPUSH
6330: LD_STRING D1a-Corn-3
6332: PPUSH
6333: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
6337: LD_EXP 37
6341: PPUSH
6342: LD_STRING D1a-JMM-3
6344: PPUSH
6345: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
6349: LD_EXP 44
6353: PPUSH
6354: LD_STRING D1a-Corn-4
6356: PPUSH
6357: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
6361: LD_EXP 37
6365: PPUSH
6366: LD_STRING D1a-JMM-4
6368: PPUSH
6369: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
6373: LD_EXP 44
6377: PPUSH
6378: LD_STRING D1a-Corn-5
6380: PPUSH
6381: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
6385: LD_EXP 45
6389: PPUSH
6390: LD_EXP 44
6394: PPUSH
6395: CALL_OW 250
6399: PPUSH
6400: LD_EXP 44
6404: PPUSH
6405: CALL_OW 251
6409: PUSH
6410: LD_INT 2
6412: MINUS
6413: PPUSH
6414: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
6418: LD_EXP 45
6422: PPUSH
6423: LD_EXP 44
6427: PPUSH
6428: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
6432: LD_INT 10
6434: PPUSH
6435: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
6439: LD_EXP 37
6443: PPUSH
6444: LD_STRING D1b-JMM-1
6446: PPUSH
6447: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
6451: LD_EXP 44
6455: PPUSH
6456: LD_STRING D1b-Corn-1
6458: PPUSH
6459: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6463: LD_EXP 37
6467: PPUSH
6468: LD_STRING D1b-JMM-2
6470: PPUSH
6471: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6475: LD_EXP 44
6479: PPUSH
6480: LD_STRING D1b-Corn-2
6482: PPUSH
6483: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6487: LD_EXP 37
6491: PPUSH
6492: LD_STRING D1b-JMM-3
6494: PPUSH
6495: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6499: LD_INT 10
6501: PPUSH
6502: CALL_OW 67
// SayRadioNoFace ( Powell , D1b-Pow-3 ) ;
6506: LD_EXP 46
6510: PPUSH
6511: LD_STRING D1b-Pow-3
6513: PPUSH
6514: CALL_OW 586
// Say ( JMM , D1b-JMM-4 ) ;
6518: LD_EXP 37
6522: PPUSH
6523: LD_STRING D1b-JMM-4
6525: PPUSH
6526: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6530: LD_EXP 44
6534: PPUSH
6535: LD_STRING D1b-Corn-4
6537: PPUSH
6538: CALL_OW 88
// if Khatam then
6542: LD_EXP 41
6546: IFFALSE 6562
// Say ( Khatam , D1b-Khat-4 ) else
6548: LD_EXP 41
6552: PPUSH
6553: LD_STRING D1b-Khat-4
6555: PPUSH
6556: CALL_OW 88
6560: GO 6598
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6562: LD_EXP 6
6566: PPUSH
6567: LD_INT 26
6569: PUSH
6570: LD_INT 1
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PPUSH
6577: CALL_OW 72
6581: PUSH
6582: LD_EXP 44
6586: PUSH
6587: EMPTY
6588: LIST
6589: DIFF
6590: PPUSH
6591: LD_STRING D1b-Sol1-4
6593: PPUSH
6594: CALL 585 0 2
// if Cyrus then
6598: LD_EXP 39
6602: IFFALSE 6616
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6604: LD_EXP 39
6608: PPUSH
6609: LD_STRING D1b-Cyrus-4
6611: PPUSH
6612: CALL_OW 88
// if Lisa then
6616: LD_EXP 40
6620: IFFALSE 6678
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6622: LD_EXP 40
6626: PPUSH
6627: LD_STRING D1b-Lisa-4
6629: PPUSH
6630: CALL_OW 88
// if Cyrus then
6634: LD_EXP 39
6638: IFFALSE 6678
// begin if not IsInUnit ( Cyrus ) then
6640: LD_EXP 39
6644: PPUSH
6645: CALL_OW 310
6649: NOT
6650: IFFALSE 6666
// ComTurnUnit ( Cyrus , Lisa ) ;
6652: LD_EXP 39
6656: PPUSH
6657: LD_EXP 40
6661: PPUSH
6662: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6666: LD_EXP 39
6670: PPUSH
6671: LD_STRING D1b-Cyrus-5
6673: PPUSH
6674: CALL_OW 88
// end ; end ; SelectGroup ;
6678: CALL 3052 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6682: LD_EXP 37
6686: PPUSH
6687: LD_STRING D1d-JMM-1
6689: PPUSH
6690: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6694: LD_EXP 44
6698: PPUSH
6699: LD_STRING D1d-Corn-1
6701: PPUSH
6702: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6706: LD_ADDR_VAR 0 2
6710: PUSH
6711: LD_EXP 4
6715: PUSH
6716: LD_EXP 6
6720: ADD
6721: PUSH
6722: LD_EXP 37
6726: ADD
6727: PUSH
6728: FOR_IN
6729: IFFALSE 6742
// ComHold ( i ) ;
6731: LD_VAR 0 2
6735: PPUSH
6736: CALL_OW 140
6740: GO 6728
6742: POP
6743: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6744: LD_ADDR_VAR 0 4
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 1
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 21
6761: PUSH
6762: LD_INT 2
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PPUSH
6773: CALL_OW 69
6777: ST_TO_ADDR
// if vehicles then
6778: LD_VAR 0 4
6782: IFFALSE 7120
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6784: LD_EXP 6
6788: PPUSH
6789: LD_INT 55
6791: PUSH
6792: EMPTY
6793: LIST
6794: PPUSH
6795: CALL_OW 72
6799: IFFALSE 6838
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6801: LD_ADDR_VAR 0 2
6805: PUSH
6806: LD_EXP 6
6810: PPUSH
6811: LD_INT 55
6813: PUSH
6814: EMPTY
6815: LIST
6816: PPUSH
6817: CALL_OW 72
6821: PUSH
6822: FOR_IN
6823: IFFALSE 6836
// ComExitVehicle ( i ) ;
6825: LD_VAR 0 2
6829: PPUSH
6830: CALL_OW 121
6834: GO 6822
6836: POP
6837: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6838: LD_ADDR_VAR 0 5
6842: PUSH
6843: LD_VAR 0 4
6847: PPUSH
6848: LD_INT 34
6850: PUSH
6851: LD_INT 51
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 72
6862: ST_TO_ADDR
// if cargos then
6863: LD_VAR 0 5
6867: IFFALSE 7050
// begin vehicles := cargos ;
6869: LD_ADDR_VAR 0 4
6873: PUSH
6874: LD_VAR 0 5
6878: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6879: LD_ADDR_VAR 0 6
6883: PUSH
6884: LD_STRING 02_resources_4
6886: PPUSH
6887: LD_INT 0
6889: PPUSH
6890: CALL_OW 30
6894: ST_TO_ADDR
// if debug and not resources then
6895: LD_EXP 1
6899: PUSH
6900: LD_VAR 0 6
6904: NOT
6905: AND
6906: IFFALSE 6916
// resources := 160 ;
6908: LD_ADDR_VAR 0 6
6912: PUSH
6913: LD_INT 160
6915: ST_TO_ADDR
// if resources mod 10 then
6916: LD_VAR 0 6
6920: PUSH
6921: LD_INT 10
6923: MOD
6924: IFFALSE 6946
// resources := resources - resources mod 10 ;
6926: LD_ADDR_VAR 0 6
6930: PUSH
6931: LD_VAR 0 6
6935: PUSH
6936: LD_VAR 0 6
6940: PUSH
6941: LD_INT 10
6943: MOD
6944: MINUS
6945: ST_TO_ADDR
// if resources then
6946: LD_VAR 0 6
6950: IFFALSE 7050
// for i in cargos do
6952: LD_ADDR_VAR 0 2
6956: PUSH
6957: LD_VAR 0 5
6961: PUSH
6962: FOR_IN
6963: IFFALSE 7048
// begin if resources < 100 then
6965: LD_VAR 0 6
6969: PUSH
6970: LD_INT 100
6972: LESS
6973: IFFALSE 6995
// begin cargo := resources ;
6975: LD_ADDR_VAR 0 7
6979: PUSH
6980: LD_VAR 0 6
6984: ST_TO_ADDR
// resources := 0 ;
6985: LD_ADDR_VAR 0 6
6989: PUSH
6990: LD_INT 0
6992: ST_TO_ADDR
// end else
6993: GO 7017
// begin cargo := 100 ;
6995: LD_ADDR_VAR 0 7
6999: PUSH
7000: LD_INT 100
7002: ST_TO_ADDR
// resources := resources - 100 ;
7003: LD_ADDR_VAR 0 6
7007: PUSH
7008: LD_VAR 0 6
7012: PUSH
7013: LD_INT 100
7015: MINUS
7016: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
7017: LD_VAR 0 2
7021: PPUSH
7022: LD_INT 1
7024: PPUSH
7025: LD_VAR 0 7
7029: PPUSH
7030: CALL_OW 290
// if resources = 0 then
7034: LD_VAR 0 6
7038: PUSH
7039: LD_INT 0
7041: EQUAL
7042: IFFALSE 7046
// break ;
7044: GO 7048
// end ;
7046: GO 6962
7048: POP
7049: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
7050: LD_VAR 0 4
7054: PUSH
7055: LD_INT 1
7057: ARRAY
7058: PPUSH
7059: CALL_OW 311
7063: PPUSH
7064: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
7068: LD_VAR 0 4
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: LD_INT 4
7079: PPUSH
7080: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
7084: LD_EXP 44
7088: PPUSH
7089: LD_VAR 0 4
7093: PUSH
7094: LD_INT 1
7096: ARRAY
7097: PPUSH
7098: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
7102: LD_INT 35
7104: PPUSH
7105: CALL_OW 67
// until IsInUnit ( Cornel ) ;
7109: LD_EXP 44
7113: PPUSH
7114: CALL_OW 310
7118: IFFALSE 7102
// end ; InGameOff ;
7120: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
7124: LD_STRING M1
7126: PPUSH
7127: CALL_OW 337
// SaveForQuickRestart ;
7131: CALL_OW 22
// cornel_active := true ;
7135: LD_ADDR_EXP 8
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// end ;
7143: LD_VAR 0 1
7147: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
7148: LD_EXP 37
7152: PPUSH
7153: LD_EXP 47
7157: PPUSH
7158: CALL_OW 296
7162: PUSH
7163: LD_INT 10
7165: LESS
7166: IFFALSE 8549
7168: GO 7170
7170: DISABLE
7171: LD_INT 0
7173: PPUSH
7174: PPUSH
7175: PPUSH
7176: PPUSH
7177: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
7178: LD_ADDR_VAR 0 2
7182: PUSH
7183: LD_INT 89
7185: PUSH
7186: LD_INT 34
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 138
7195: PUSH
7196: LD_INT 63
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 196
7205: PUSH
7206: LD_INT 84
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 135
7215: PUSH
7216: LD_INT 52
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 103
7225: PUSH
7226: LD_INT 39
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: LD_INT 58
7235: PUSH
7236: LD_INT 30
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 38
7245: PUSH
7246: LD_INT 51
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: ST_TO_ADDR
// Video ( true ) ;
7262: LD_INT 1
7264: PPUSH
7265: CALL 77637 0 1
// if jmm_units then
7269: LD_EXP 4
7273: IFFALSE 7349
// for i in jmm_units do
7275: LD_ADDR_VAR 0 1
7279: PUSH
7280: LD_EXP 4
7284: PUSH
7285: FOR_IN
7286: IFFALSE 7347
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_EXP 37
7297: PPUSH
7298: CALL_OW 296
7302: PUSH
7303: LD_INT 10
7305: LESS
7306: PUSH
7307: LD_VAR 0 1
7311: PPUSH
7312: CALL_OW 310
7316: NOT
7317: AND
7318: IFFALSE 7336
// ComTurnUnit ( i , JMM ) else
7320: LD_VAR 0 1
7324: PPUSH
7325: LD_EXP 37
7329: PPUSH
7330: CALL_OW 119
7334: GO 7345
// ComHold ( i ) ;
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 140
// end ;
7345: GO 7285
7347: POP
7348: POP
// if IsInUnit ( JMM ) then
7349: LD_EXP 37
7353: PPUSH
7354: CALL_OW 310
7358: IFFALSE 7383
// begin ComExitVehicle ( JMM ) ;
7360: LD_EXP 37
7364: PPUSH
7365: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
7369: LD_EXP 37
7373: PPUSH
7374: LD_EXP 47
7378: PPUSH
7379: CALL_OW 172
// end ; Wait ( 10 ) ;
7383: LD_INT 10
7385: PPUSH
7386: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
7390: LD_EXP 37
7394: PPUSH
7395: LD_EXP 47
7399: PPUSH
7400: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
7404: LD_INT 35
7406: PPUSH
7407: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
7411: LD_EXP 37
7415: PPUSH
7416: LD_EXP 47
7420: PPUSH
7421: CALL_OW 296
7425: PUSH
7426: LD_INT 6
7428: LESS
7429: IFFALSE 7404
// ComTurnUnit ( JMM , Lynch ) ;
7431: LD_EXP 37
7435: PPUSH
7436: LD_EXP 47
7440: PPUSH
7441: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
7445: LD_ADDR_VAR 0 1
7449: PUSH
7450: LD_EXP 47
7454: PUSH
7455: LD_EXP 48
7459: PUSH
7460: LD_EXP 49
7464: PUSH
7465: LD_EXP 50
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: PUSH
7476: FOR_IN
7477: IFFALSE 7495
// ComTurnUnit ( i , JMM ) ;
7479: LD_VAR 0 1
7483: PPUSH
7484: LD_EXP 37
7488: PPUSH
7489: CALL_OW 119
7493: GO 7476
7495: POP
7496: POP
// Wait ( 0 0$0.3 ) ;
7497: LD_INT 10
7499: PPUSH
7500: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7504: LD_EXP 37
7508: PPUSH
7509: LD_STRING D2-JMM-1
7511: PPUSH
7512: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7516: LD_EXP 47
7520: PPUSH
7521: LD_STRING D2-Sol1-1
7523: PPUSH
7524: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7528: LD_EXP 37
7532: PPUSH
7533: LD_STRING D2-JMM-2
7535: PPUSH
7536: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7540: LD_EXP 47
7544: PPUSH
7545: LD_STRING D2-Sol1-2
7547: PPUSH
7548: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7552: LD_EXP 37
7556: PPUSH
7557: LD_STRING D2-JMM-3
7559: PPUSH
7560: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7564: LD_EXP 47
7568: PPUSH
7569: LD_STRING D2-Sol1-3
7571: PPUSH
7572: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_INT 22
7583: PUSH
7584: LD_INT 8
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PPUSH
7591: CALL_OW 69
7595: PUSH
7596: FOR_IN
7597: IFFALSE 7613
// SetSide ( i , 1 ) ;
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_INT 1
7606: PPUSH
7607: CALL_OW 235
7611: GO 7596
7613: POP
7614: POP
// Say ( JMM , D2-JMM-4 ) ;
7615: LD_EXP 37
7619: PPUSH
7620: LD_STRING D2-JMM-4
7622: PPUSH
7623: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7627: LD_INT 1
7629: PPUSH
7630: LD_INT 5
7632: PPUSH
7633: CALL_OW 332
// for i = 1 to points do
7637: LD_ADDR_VAR 0 1
7641: PUSH
7642: DOUBLE
7643: LD_INT 1
7645: DEC
7646: ST_TO_ADDR
7647: LD_VAR 0 2
7651: PUSH
7652: FOR_TO
7653: IFFALSE 7828
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7655: LD_VAR 0 2
7659: PUSH
7660: LD_VAR 0 1
7664: ARRAY
7665: PUSH
7666: LD_INT 1
7668: ARRAY
7669: PPUSH
7670: LD_VAR 0 2
7674: PUSH
7675: LD_VAR 0 1
7679: ARRAY
7680: PUSH
7681: LD_INT 2
7683: ARRAY
7684: PPUSH
7685: CALL_OW 84
// if i = 1 then
7689: LD_VAR 0 1
7693: PUSH
7694: LD_INT 1
7696: EQUAL
7697: IFFALSE 7711
// Say ( Lynch , D2-Sol1-4 ) ;
7699: LD_EXP 47
7703: PPUSH
7704: LD_STRING D2-Sol1-4
7706: PPUSH
7707: CALL_OW 88
// if i = 2 then
7711: LD_VAR 0 1
7715: PUSH
7716: LD_INT 2
7718: EQUAL
7719: IFFALSE 7733
// Say ( JMM , D2-JMM-5 ) ;
7721: LD_EXP 37
7725: PPUSH
7726: LD_STRING D2-JMM-5
7728: PPUSH
7729: CALL_OW 88
// if i = 4 then
7733: LD_VAR 0 1
7737: PUSH
7738: LD_INT 4
7740: EQUAL
7741: IFFALSE 7765
// begin RevealFogArea ( 1 , troopsArea ) ;
7743: LD_INT 1
7745: PPUSH
7746: LD_INT 6
7748: PPUSH
7749: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7753: LD_EXP 47
7757: PPUSH
7758: LD_STRING D2-Sol1-5
7760: PPUSH
7761: CALL_OW 88
// end ; if i = 5 then
7765: LD_VAR 0 1
7769: PUSH
7770: LD_INT 5
7772: EQUAL
7773: IFFALSE 7787
// Say ( JMM , D2-JMM-6 ) ;
7775: LD_EXP 37
7779: PPUSH
7780: LD_STRING D2-JMM-6
7782: PPUSH
7783: CALL_OW 88
// if i = 7 then
7787: LD_VAR 0 1
7791: PUSH
7792: LD_INT 7
7794: EQUAL
7795: IFFALSE 7819
// begin RevealFogArea ( 1 , forestArea ) ;
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 7
7802: PPUSH
7803: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7807: LD_EXP 47
7811: PPUSH
7812: LD_STRING D2-Sol1-6
7814: PPUSH
7815: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7819: LD_INT 46
7821: PPUSH
7822: CALL_OW 67
// end ;
7826: GO 7652
7828: POP
7829: POP
// CenterNowOnUnits ( JMM ) ;
7830: LD_EXP 37
7834: PPUSH
7835: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7839: LD_EXP 37
7843: PPUSH
7844: LD_STRING D2-JMM-7
7846: PPUSH
7847: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7851: LD_EXP 47
7855: PPUSH
7856: LD_STRING D2-Sol1-7
7858: PPUSH
7859: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7863: LD_EXP 37
7867: PPUSH
7868: LD_STRING D2-JMM-8
7870: PPUSH
7871: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7875: LD_ADDR_VAR 0 4
7879: PUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 30
7892: PUSH
7893: LD_INT 31
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 69
7908: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7909: LD_EXP 47
7913: PPUSH
7914: LD_VAR 0 4
7918: PUSH
7919: LD_INT 1
7921: ARRAY
7922: PPUSH
7923: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7927: LD_INT 65
7929: PPUSH
7930: LD_INT 101
7932: PPUSH
7933: CALL_OW 428
7937: IFFALSE 7960
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7939: LD_INT 65
7941: PPUSH
7942: LD_INT 101
7944: PPUSH
7945: CALL_OW 428
7949: PPUSH
7950: LD_INT 75
7952: PPUSH
7953: LD_INT 100
7955: PPUSH
7956: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7960: LD_INT 66
7962: PPUSH
7963: LD_INT 103
7965: PPUSH
7966: CALL_OW 428
7970: IFFALSE 7993
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7972: LD_INT 66
7974: PPUSH
7975: LD_INT 103
7977: PPUSH
7978: CALL_OW 428
7982: PPUSH
7983: LD_INT 75
7985: PPUSH
7986: LD_INT 100
7988: PPUSH
7989: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7993: LD_ADDR_VAR 0 5
7997: PUSH
7998: LD_INT 22
8000: PUSH
8001: LD_INT 1
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 21
8010: PUSH
8011: LD_INT 2
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: LD_INT 91
8020: PUSH
8021: LD_EXP 37
8025: PUSH
8026: LD_INT 7
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: PPUSH
8039: CALL_OW 69
8043: ST_TO_ADDR
// if tmp then
8044: LD_VAR 0 5
8048: IFFALSE 8065
// ComMoveXY ( tmp , 75 , 100 ) ;
8050: LD_VAR 0 5
8054: PPUSH
8055: LD_INT 75
8057: PPUSH
8058: LD_INT 100
8060: PPUSH
8061: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: LD_EXP 4
8074: PPUSH
8075: LD_INT 25
8077: PUSH
8078: LD_INT 1
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PPUSH
8085: CALL_OW 72
8089: PPUSH
8090: LD_EXP 37
8094: PPUSH
8095: CALL_OW 74
8099: ST_TO_ADDR
// if sol then
8100: LD_VAR 0 3
8104: IFFALSE 8164
// if GetDistUnits ( JMM , sol ) < 10 then
8106: LD_EXP 37
8110: PPUSH
8111: LD_VAR 0 3
8115: PPUSH
8116: CALL_OW 296
8120: PUSH
8121: LD_INT 10
8123: LESS
8124: IFFALSE 8164
// begin if IsInUnit ( sol ) then
8126: LD_VAR 0 3
8130: PPUSH
8131: CALL_OW 310
8135: IFFALSE 8146
// ComExitVehicle ( sol ) ;
8137: LD_VAR 0 3
8141: PPUSH
8142: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
8146: LD_VAR 0 3
8150: PPUSH
8151: LD_VAR 0 4
8155: PUSH
8156: LD_INT 2
8158: ARRAY
8159: PPUSH
8160: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
8164: LD_INT 10
8166: PPUSH
8167: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
8171: LD_EXP 37
8175: PPUSH
8176: LD_INT 65
8178: PPUSH
8179: LD_INT 101
8181: PPUSH
8182: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
8186: LD_EXP 37
8190: PPUSH
8191: LD_INT 63
8193: PPUSH
8194: LD_INT 100
8196: PPUSH
8197: CALL_OW 178
// tmp := 0 0$0 ;
8201: LD_ADDR_VAR 0 5
8205: PUSH
8206: LD_INT 0
8208: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8209: LD_INT 35
8211: PPUSH
8212: CALL_OW 67
// tmp := tmp + 0 0$1 ;
8216: LD_ADDR_VAR 0 5
8220: PUSH
8221: LD_VAR 0 5
8225: PUSH
8226: LD_INT 35
8228: PLUS
8229: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
8230: LD_EXP 37
8234: PPUSH
8235: LD_INT 65
8237: PPUSH
8238: LD_INT 101
8240: PPUSH
8241: CALL_OW 307
8245: PUSH
8246: LD_VAR 0 5
8250: PUSH
8251: LD_INT 175
8253: GREATER
8254: OR
8255: IFFALSE 8209
// Say ( JMM , D2a-JMM-1 ) ;
8257: LD_EXP 37
8261: PPUSH
8262: LD_STRING D2a-JMM-1
8264: PPUSH
8265: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
8269: LD_EXP 48
8273: PPUSH
8274: LD_INT 66
8276: PPUSH
8277: LD_INT 103
8279: PPUSH
8280: CALL_OW 111
// tmp := 0 0$0 ;
8284: LD_ADDR_VAR 0 5
8288: PUSH
8289: LD_INT 0
8291: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8292: LD_INT 35
8294: PPUSH
8295: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
8299: LD_EXP 48
8303: PPUSH
8304: LD_INT 66
8306: PPUSH
8307: LD_INT 103
8309: PPUSH
8310: CALL_OW 307
8314: PUSH
8315: LD_VAR 0 5
8319: PUSH
8320: LD_INT 175
8322: GREATER
8323: OR
8324: IFFALSE 8292
// ComTurnUnit ( Walker , JMM ) ;
8326: LD_EXP 48
8330: PPUSH
8331: LD_EXP 37
8335: PPUSH
8336: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
8340: LD_EXP 48
8344: PPUSH
8345: LD_STRING D2a-Sci1-1
8347: PPUSH
8348: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
8352: LD_EXP 37
8356: PPUSH
8357: LD_EXP 48
8361: PPUSH
8362: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
8366: LD_EXP 37
8370: PPUSH
8371: LD_STRING D2a-JMM-2
8373: PPUSH
8374: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
8378: LD_EXP 48
8382: PPUSH
8383: LD_STRING D2a-Sci1-2
8385: PPUSH
8386: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
8390: LD_EXP 37
8394: PPUSH
8395: LD_STRING D2a-JMM-3
8397: PPUSH
8398: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
8402: LD_EXP 48
8406: PPUSH
8407: LD_STRING D2a-Sci1-3
8409: PPUSH
8410: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
8414: LD_ADDR_EXP 4
8418: PUSH
8419: LD_EXP 4
8423: PUSH
8424: LD_EXP 47
8428: PUSH
8429: LD_EXP 48
8433: PUSH
8434: LD_EXP 49
8438: PUSH
8439: LD_EXP 50
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: ADD
8450: ST_TO_ADDR
// for i in jmm_units do
8451: LD_ADDR_VAR 0 1
8455: PUSH
8456: LD_EXP 4
8460: PUSH
8461: FOR_IN
8462: IFFALSE 8487
// if not IsInUnit ( i ) then
8464: LD_VAR 0 1
8468: PPUSH
8469: CALL_OW 310
8473: NOT
8474: IFFALSE 8485
// ComFree ( i ) ;
8476: LD_VAR 0 1
8480: PPUSH
8481: CALL_OW 139
8485: GO 8461
8487: POP
8488: POP
// Video ( false ) ;
8489: LD_INT 0
8491: PPUSH
8492: CALL 77637 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8496: LD_STRING MSolar1
8498: PPUSH
8499: CALL_OW 337
// jmm_on_west := true ;
8503: LD_ADDR_EXP 5
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8511: LD_INT 1050
8513: PPUSH
8514: CALL_OW 67
// frank_can_return := true ;
8518: LD_ADDR_EXP 12
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8526: LD_INT 6300
8528: PPUSH
8529: LD_INT 8400
8531: PPUSH
8532: CALL_OW 12
8536: PPUSH
8537: CALL_OW 67
// send_spec_patrol := true ;
8541: LD_ADDR_EXP 30
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// end ;
8549: PPOPN 5
8551: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8552: LD_INT 22
8554: PUSH
8555: LD_INT 1
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 34
8564: PUSH
8565: LD_INT 51
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 92
8574: PUSH
8575: LD_INT 63
8577: PUSH
8578: LD_INT 100
8580: PUSH
8581: LD_INT 5
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: PPUSH
8598: CALL_OW 69
8602: PUSH
8603: LD_EXP 5
8607: NOT
8608: AND
8609: IFFALSE 8722
8611: GO 8613
8613: DISABLE
8614: LD_INT 0
8616: PPUSH
8617: PPUSH
// begin enable ;
8618: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8619: LD_ADDR_VAR 0 2
8623: PUSH
8624: LD_INT 22
8626: PUSH
8627: LD_INT 1
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 34
8636: PUSH
8637: LD_INT 51
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 92
8646: PUSH
8647: LD_INT 63
8649: PUSH
8650: LD_INT 100
8652: PUSH
8653: LD_INT 5
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: LIST
8666: PUSH
8667: EMPTY
8668: LIST
8669: PPUSH
8670: CALL_OW 69
8674: ST_TO_ADDR
// if not filter then
8675: LD_VAR 0 2
8679: NOT
8680: IFFALSE 8684
// exit ;
8682: GO 8722
// for i in filter do
8684: LD_ADDR_VAR 0 1
8688: PUSH
8689: LD_VAR 0 2
8693: PUSH
8694: FOR_IN
8695: IFFALSE 8720
// begin SetFuel ( i , 0 ) ;
8697: LD_VAR 0 1
8701: PPUSH
8702: LD_INT 0
8704: PPUSH
8705: CALL_OW 240
// ComStop ( i ) ;
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 141
// end ;
8718: GO 8694
8720: POP
8721: POP
// end ;
8722: PPOPN 2
8724: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8725: LD_EXP 30
8729: IFFALSE 9784
8731: GO 8733
8733: DISABLE
8734: LD_INT 0
8736: PPUSH
8737: PPUSH
8738: PPUSH
8739: PPUSH
8740: PPUSH
8741: PPUSH
8742: PPUSH
// begin if not ru_spec_patrol then
8743: LD_EXP 54
8747: NOT
8748: IFFALSE 8752
// exit ;
8750: GO 9784
// dead1 := false ;
8752: LD_ADDR_VAR 0 1
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// dead2 := false ;
8760: LD_ADDR_VAR 0 2
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// inarea1 := false ;
8768: LD_ADDR_VAR 0 3
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// inarea2 := false ;
8776: LD_ADDR_VAR 0 4
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// tmp := [ ] ;
8784: LD_ADDR_VAR 0 6
8788: PUSH
8789: EMPTY
8790: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8791: LD_EXP 54
8795: PPUSH
8796: LD_INT 75
8798: PPUSH
8799: LD_INT 101
8801: PPUSH
8802: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8806: LD_INT 35
8808: PPUSH
8809: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) or UnitFilter ( ru_spec_patrol , [ f_distxy , 75 , 101 , 4 ] ) ;
8813: LD_INT 1
8815: PPUSH
8816: LD_EXP 54
8820: PUSH
8821: LD_INT 1
8823: ARRAY
8824: PPUSH
8825: CALL_OW 292
8829: PUSH
8830: LD_EXP 54
8834: PPUSH
8835: LD_INT 92
8837: PUSH
8838: LD_INT 75
8840: PUSH
8841: LD_INT 101
8843: PUSH
8844: LD_INT 4
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 72
8857: OR
8858: IFFALSE 8806
// ComStop ( ru_spec_patrol ) ;
8860: LD_EXP 54
8864: PPUSH
8865: CALL_OW 141
// Wait ( 0 0$02 ) ;
8869: LD_INT 70
8871: PPUSH
8872: CALL_OW 67
// DialogueOn ;
8876: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8880: LD_EXP 54
8884: PUSH
8885: LD_INT 1
8887: ARRAY
8888: PPUSH
8889: LD_STRING D8-Rus1-1
8891: PPUSH
8892: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8896: LD_EXP 37
8900: PPUSH
8901: LD_STRING D8-JMM-1
8903: PPUSH
8904: CALL_OW 88
// DialogueOff ;
8908: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8912: LD_EXP 54
8916: PPUSH
8917: LD_INT 13
8919: PPUSH
8920: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8924: LD_INT 35
8926: PPUSH
8927: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8931: LD_VAR 0 1
8935: NOT
8936: PUSH
8937: LD_EXP 54
8941: PUSH
8942: LD_INT 1
8944: ARRAY
8945: PPUSH
8946: CALL_OW 301
8950: AND
8951: IFFALSE 8961
// dead1 := true ;
8953: LD_ADDR_VAR 0 1
8957: PUSH
8958: LD_INT 1
8960: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8961: LD_VAR 0 2
8965: NOT
8966: PUSH
8967: LD_EXP 54
8971: PUSH
8972: LD_INT 2
8974: ARRAY
8975: PPUSH
8976: CALL_OW 301
8980: AND
8981: IFFALSE 8991
// dead2 := true ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 1
8990: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8991: LD_VAR 0 3
8995: NOT
8996: PUSH
8997: LD_EXP 54
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: LD_INT 14
9008: PPUSH
9009: CALL_OW 308
9013: AND
9014: IFFALSE 9024
// inarea1 := true ;
9016: LD_ADDR_VAR 0 3
9020: PUSH
9021: LD_INT 1
9023: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
9024: LD_VAR 0 4
9028: NOT
9029: PUSH
9030: LD_EXP 54
9034: PUSH
9035: LD_INT 2
9037: ARRAY
9038: PPUSH
9039: LD_INT 14
9041: PPUSH
9042: CALL_OW 308
9046: AND
9047: IFFALSE 9057
// inarea2 := true ;
9049: LD_ADDR_VAR 0 4
9053: PUSH
9054: LD_INT 1
9056: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
9057: LD_VAR 0 1
9061: PUSH
9062: LD_VAR 0 2
9066: AND
9067: PUSH
9068: LD_VAR 0 1
9072: PUSH
9073: LD_VAR 0 4
9077: AND
9078: OR
9079: PUSH
9080: LD_VAR 0 2
9084: PUSH
9085: LD_VAR 0 3
9089: AND
9090: OR
9091: PUSH
9092: LD_VAR 0 3
9096: PUSH
9097: LD_VAR 0 4
9101: AND
9102: OR
9103: IFFALSE 8924
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
9105: LD_VAR 0 3
9109: PUSH
9110: LD_VAR 0 4
9114: AND
9115: PUSH
9116: LD_VAR 0 1
9120: PUSH
9121: LD_VAR 0 4
9125: AND
9126: OR
9127: PUSH
9128: LD_VAR 0 2
9132: PUSH
9133: LD_VAR 0 3
9137: AND
9138: OR
9139: IFFALSE 9764
// begin prepare_siege := true ;
9141: LD_ADDR_EXP 31
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// DialogueOn ;
9149: CALL_OW 6
// if ( inarea1 and inarea2 ) then
9153: LD_VAR 0 3
9157: PUSH
9158: LD_VAR 0 4
9162: AND
9163: IFFALSE 9179
// Say ( JMM , D8b-JMM-1a ) else
9165: LD_EXP 37
9169: PPUSH
9170: LD_STRING D8b-JMM-1a
9172: PPUSH
9173: CALL_OW 88
9177: GO 9191
// Say ( JMM , D8b-JMM-1 ) ;
9179: LD_EXP 37
9183: PPUSH
9184: LD_STRING D8b-JMM-1
9186: PPUSH
9187: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
9191: LD_EXP 4
9195: PPUSH
9196: LD_INT 26
9198: PUSH
9199: LD_INT 1
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PPUSH
9206: CALL_OW 72
9210: PUSH
9211: LD_EXP 38
9215: PUSH
9216: LD_EXP 39
9220: PUSH
9221: LD_EXP 48
9225: PUSH
9226: LD_EXP 51
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: DIFF
9237: PPUSH
9238: LD_STRING D8b-Sol1-1
9240: PPUSH
9241: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
9245: LD_EXP 39
9249: PUSH
9250: LD_EXP 39
9254: PUSH
9255: LD_EXP 4
9259: IN
9260: AND
9261: IFFALSE 9277
// Say ( Cyrus , D8b-Cyrus-1 ) else
9263: LD_EXP 39
9267: PPUSH
9268: LD_STRING D8b-Cyrus-1
9270: PPUSH
9271: CALL_OW 88
9275: GO 9289
// Say ( JMM , D8b-JMM-1a ) ;
9277: LD_EXP 37
9281: PPUSH
9282: LD_STRING D8b-JMM-1a
9284: PPUSH
9285: CALL_OW 88
// if Lisa and Lisa in jmm_units then
9289: LD_EXP 40
9293: PUSH
9294: LD_EXP 40
9298: PUSH
9299: LD_EXP 4
9303: IN
9304: AND
9305: IFFALSE 9319
// Say ( Lisa , D8b-Lisa-2 ) ;
9307: LD_EXP 40
9311: PPUSH
9312: LD_STRING D8b-Lisa-2
9314: PPUSH
9315: CALL_OW 88
// if Bobby and Bobby in jmm_units then
9319: LD_EXP 38
9323: PUSH
9324: LD_EXP 38
9328: PUSH
9329: LD_EXP 4
9333: IN
9334: AND
9335: IFFALSE 9351
// Say ( Bobby , D8b-Bobby-1 ) else
9337: LD_EXP 38
9341: PPUSH
9342: LD_STRING D8b-Bobby-1
9344: PPUSH
9345: CALL_OW 88
9349: GO 9411
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
9351: LD_ADDR_VAR 0 5
9355: PUSH
9356: LD_EXP 4
9360: PPUSH
9361: LD_INT 26
9363: PUSH
9364: LD_INT 1
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PPUSH
9371: CALL_OW 72
9375: PUSH
9376: LD_EXP 38
9380: PUSH
9381: LD_EXP 39
9385: PUSH
9386: LD_EXP 48
9390: PUSH
9391: LD_EXP 51
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: DIFF
9402: PPUSH
9403: LD_STRING D8b-Sol2-1
9405: PPUSH
9406: CALL 585 0 2
9410: ST_TO_ADDR
// DialogueOff ;
9411: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
9415: LD_EXP 39
9419: PUSH
9420: LD_EXP 39
9424: PUSH
9425: LD_EXP 4
9429: IN
9430: AND
9431: IFFALSE 9456
// tmp := Insert ( tmp , 1 , Cyrus ) ;
9433: LD_ADDR_VAR 0 6
9437: PUSH
9438: LD_VAR 0 6
9442: PPUSH
9443: LD_INT 1
9445: PPUSH
9446: LD_EXP 39
9450: PPUSH
9451: CALL_OW 2
9455: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
9456: LD_EXP 38
9460: PUSH
9461: LD_EXP 38
9465: PUSH
9466: LD_EXP 4
9470: IN
9471: AND
9472: IFFALSE 9497
// tmp := Insert ( tmp , 1 , Bobby ) ;
9474: LD_ADDR_VAR 0 6
9478: PUSH
9479: LD_VAR 0 6
9483: PPUSH
9484: LD_INT 1
9486: PPUSH
9487: LD_EXP 38
9491: PPUSH
9492: CALL_OW 2
9496: ST_TO_ADDR
// if sol then
9497: LD_VAR 0 5
9501: IFFALSE 9526
// tmp := Insert ( tmp , 1 , sol ) ;
9503: LD_ADDR_VAR 0 6
9507: PUSH
9508: LD_VAR 0 6
9512: PPUSH
9513: LD_INT 1
9515: PPUSH
9516: LD_VAR 0 5
9520: PPUSH
9521: CALL_OW 2
9525: ST_TO_ADDR
// if tmp then
9526: LD_VAR 0 6
9530: IFFALSE 9723
// begin SetSide ( tmp , 8 ) ;
9532: LD_VAR 0 6
9536: PPUSH
9537: LD_INT 8
9539: PPUSH
9540: CALL_OW 235
// for i in tmp do
9544: LD_ADDR_VAR 0 7
9548: PUSH
9549: LD_VAR 0 6
9553: PUSH
9554: FOR_IN
9555: IFFALSE 9568
// ComExit ( i ) ;
9557: LD_VAR 0 7
9561: PPUSH
9562: CALL 78063 0 1
9566: GO 9554
9568: POP
9569: POP
// wait ( 0 0$0.3 ) ;
9570: LD_INT 10
9572: PPUSH
9573: CALL_OW 67
// ComFree ( tmp ) ;
9577: LD_VAR 0 6
9581: PPUSH
9582: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9586: LD_VAR 0 6
9590: PPUSH
9591: LD_INT 15
9593: PPUSH
9594: CALL_OW 173
// AddComHold ( tmp ) ;
9598: LD_VAR 0 6
9602: PPUSH
9603: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9607: LD_INT 35
9609: PPUSH
9610: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9614: LD_VAR 0 6
9618: PUSH
9619: LD_INT 1
9621: ARRAY
9622: PPUSH
9623: CALL_OW 314
9627: NOT
9628: IFFALSE 9642
// ComMoveToArea ( tmp , cyrusEscape ) ;
9630: LD_VAR 0 6
9634: PPUSH
9635: LD_INT 15
9637: PPUSH
9638: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9642: LD_VAR 0 6
9646: PUSH
9647: LD_INT 1
9649: ARRAY
9650: PPUSH
9651: LD_INT 15
9653: PPUSH
9654: CALL_OW 308
9658: IFFALSE 9713
// begin RemoveUnit ( tmp [ 1 ] ) ;
9660: LD_VAR 0 6
9664: PUSH
9665: LD_INT 1
9667: ARRAY
9668: PPUSH
9669: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9673: LD_ADDR_EXP 4
9677: PUSH
9678: LD_EXP 4
9682: PUSH
9683: LD_VAR 0 6
9687: PUSH
9688: LD_INT 1
9690: ARRAY
9691: DIFF
9692: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9693: LD_ADDR_VAR 0 6
9697: PUSH
9698: LD_VAR 0 6
9702: PUSH
9703: LD_VAR 0 6
9707: PUSH
9708: LD_INT 1
9710: ARRAY
9711: DIFF
9712: ST_TO_ADDR
// end ; until tmp = 0 ;
9713: LD_VAR 0 6
9717: PUSH
9718: LD_INT 0
9720: EQUAL
9721: IFFALSE 9607
// end ; wait ( 0 0$30 ) ;
9723: LD_INT 1050
9725: PPUSH
9726: CALL_OW 67
// if ru_spec_patrol then
9730: LD_EXP 54
9734: IFFALSE 9762
// for i in ru_spec_patrol do
9736: LD_ADDR_VAR 0 7
9740: PUSH
9741: LD_EXP 54
9745: PUSH
9746: FOR_IN
9747: IFFALSE 9760
// RemoveUnit ( i ) ;
9749: LD_VAR 0 7
9753: PPUSH
9754: CALL_OW 64
9758: GO 9746
9760: POP
9761: POP
// end else
9762: GO 9784
// begin prepare_siege := false ;
9764: LD_ADDR_EXP 31
9768: PUSH
9769: LD_INT 0
9771: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9772: LD_EXP 37
9776: PPUSH
9777: LD_STRING D8a-JMM-1
9779: PPUSH
9780: CALL_OW 88
// end ; end ;
9784: PPOPN 7
9786: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9787: LD_EXP 12
9791: IFFALSE 11059
9793: GO 9795
9795: DISABLE
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
9800: PPUSH
// begin uc_side := 8 ;
9801: LD_ADDR_OWVAR 20
9805: PUSH
9806: LD_INT 8
9808: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9809: LD_ADDR_VAR 0 3
9813: PUSH
9814: LD_INT 59
9816: PUSH
9817: LD_INT 71
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 122
9826: PUSH
9827: LD_INT 117
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9838: LD_ADDR_EXP 51
9842: PUSH
9843: LD_STRING Frank
9845: PPUSH
9846: LD_INT 0
9848: PPUSH
9849: LD_STRING 
9851: PPUSH
9852: CALL 39963 0 3
9856: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9857: LD_ADDR_VAR 0 1
9861: PUSH
9862: LD_INT 1
9864: PPUSH
9865: LD_INT 2
9867: PPUSH
9868: CALL_OW 12
9872: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9873: LD_EXP 51
9877: PPUSH
9878: LD_VAR 0 3
9882: PUSH
9883: LD_VAR 0 1
9887: ARRAY
9888: PUSH
9889: LD_INT 1
9891: ARRAY
9892: PPUSH
9893: LD_VAR 0 3
9897: PUSH
9898: LD_VAR 0 1
9902: ARRAY
9903: PUSH
9904: LD_INT 2
9906: ARRAY
9907: PPUSH
9908: LD_INT 0
9910: PPUSH
9911: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9915: LD_EXP 51
9919: PPUSH
9920: LD_INT 1
9922: PPUSH
9923: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9927: LD_INT 35
9929: PPUSH
9930: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9934: LD_EXP 51
9938: PPUSH
9939: LD_EXP 37
9943: PPUSH
9944: CALL_OW 296
9948: PUSH
9949: LD_INT 8
9951: LESS
9952: PUSH
9953: LD_EXP 51
9957: PPUSH
9958: CALL_OW 256
9962: PUSH
9963: LD_INT 250
9965: GREATER
9966: AND
9967: IFFALSE 9927
// Video ( true ) ;
9969: LD_INT 1
9971: PPUSH
9972: CALL 77637 0 1
// CenterOnUnits ( JMM ) ;
9976: LD_EXP 37
9980: PPUSH
9981: CALL_OW 85
// if IsInUnit ( JMM ) then
9985: LD_EXP 37
9989: PPUSH
9990: CALL_OW 310
9994: IFFALSE 10005
// ComFree ( JMM ) ;
9996: LD_EXP 37
10000: PPUSH
10001: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
10005: LD_EXP 37
10009: PPUSH
10010: LD_EXP 51
10014: PPUSH
10015: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
10019: LD_EXP 51
10023: PPUSH
10024: LD_EXP 37
10028: PPUSH
10029: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
10033: LD_EXP 37
10037: PPUSH
10038: LD_STRING D6-JMM-1
10040: PPUSH
10041: CALL_OW 88
// p := 0 ;
10045: LD_ADDR_VAR 0 2
10049: PUSH
10050: LD_INT 0
10052: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10053: LD_INT 35
10055: PPUSH
10056: CALL_OW 67
// p := p + 1 ;
10060: LD_ADDR_VAR 0 2
10064: PUSH
10065: LD_VAR 0 2
10069: PUSH
10070: LD_INT 1
10072: PLUS
10073: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
10074: LD_EXP 37
10078: PPUSH
10079: LD_EXP 51
10083: PPUSH
10084: CALL_OW 296
10088: PUSH
10089: LD_INT 8
10091: LESS
10092: PUSH
10093: LD_VAR 0 2
10097: PUSH
10098: LD_INT 7
10100: GREATER
10101: OR
10102: IFFALSE 10053
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and Lisa in jmm_units then
10104: LD_EXP 40
10108: PUSH
10109: LD_EXP 40
10113: PPUSH
10114: LD_EXP 51
10118: PPUSH
10119: CALL_OW 296
10123: PUSH
10124: LD_INT 20
10126: LESS
10127: AND
10128: PUSH
10129: LD_EXP 40
10133: PUSH
10134: LD_EXP 4
10138: IN
10139: AND
10140: IFFALSE 10165
// begin ComFree ( Lisa ) ;
10142: LD_EXP 40
10146: PPUSH
10147: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
10151: LD_EXP 40
10155: PPUSH
10156: LD_EXP 51
10160: PPUSH
10161: CALL_OW 172
// end ; if Lynch then
10165: LD_EXP 47
10169: IFFALSE 10194
// begin ComFree ( Lynch ) ;
10171: LD_EXP 47
10175: PPUSH
10176: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
10180: LD_EXP 47
10184: PPUSH
10185: LD_EXP 51
10189: PPUSH
10190: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
10194: LD_EXP 37
10198: PPUSH
10199: LD_EXP 51
10203: PPUSH
10204: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10208: LD_EXP 51
10212: PPUSH
10213: LD_EXP 37
10217: PPUSH
10218: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
10222: LD_EXP 51
10226: PPUSH
10227: LD_STRING D6-Frank-1
10229: PPUSH
10230: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
10234: LD_INT 69
10236: PPUSH
10237: LD_INT 20
10239: PPUSH
10240: LD_INT 1
10242: PPUSH
10243: LD_INT 20
10245: NEG
10246: PPUSH
10247: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
10251: LD_INT 69
10253: PPUSH
10254: LD_INT 20
10256: PPUSH
10257: LD_INT 1
10259: PPUSH
10260: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
10264: LD_INT 190
10266: PPUSH
10267: LD_INT 31
10269: PPUSH
10270: LD_INT 1
10272: PPUSH
10273: LD_INT 20
10275: NEG
10276: PPUSH
10277: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
10281: LD_INT 190
10283: PPUSH
10284: LD_INT 31
10286: PPUSH
10287: LD_INT 1
10289: PPUSH
10290: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
10294: LD_INT 69
10296: PPUSH
10297: LD_INT 20
10299: PPUSH
10300: CALL_OW 84
// Wait ( 0 0$02 ) ;
10304: LD_INT 70
10306: PPUSH
10307: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
10311: LD_EXP 37
10315: PPUSH
10316: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) and Lisa in jmm_units then
10320: LD_EXP 40
10324: PUSH
10325: LD_EXP 40
10329: PPUSH
10330: LD_EXP 51
10334: PPUSH
10335: CALL_OW 296
10339: PUSH
10340: LD_INT 20
10342: LESS
10343: AND
10344: PUSH
10345: LD_EXP 40
10349: PPUSH
10350: CALL_OW 302
10354: AND
10355: PUSH
10356: LD_EXP 40
10360: PUSH
10361: LD_EXP 4
10365: IN
10366: AND
10367: IFFALSE 10489
// begin ComFree ( Lisa ) ;
10369: LD_EXP 40
10373: PPUSH
10374: CALL_OW 139
// p := 0 ;
10378: LD_ADDR_VAR 0 2
10382: PUSH
10383: LD_INT 0
10385: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10386: LD_INT 35
10388: PPUSH
10389: CALL_OW 67
// p := p + 1 ;
10393: LD_ADDR_VAR 0 2
10397: PUSH
10398: LD_VAR 0 2
10402: PUSH
10403: LD_INT 1
10405: PLUS
10406: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
10407: LD_EXP 40
10411: PPUSH
10412: LD_EXP 51
10416: PPUSH
10417: CALL_OW 296
10421: PUSH
10422: LD_INT 7
10424: LESS
10425: PUSH
10426: LD_VAR 0 2
10430: PUSH
10431: LD_INT 7
10433: GREATER
10434: OR
10435: IFFALSE 10386
// Say ( Lisa , D6-Lisa-1 ) ;
10437: LD_EXP 40
10441: PPUSH
10442: LD_STRING D6-Lisa-1
10444: PPUSH
10445: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10449: LD_EXP 40
10453: PPUSH
10454: LD_EXP 51
10458: PPUSH
10459: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10463: LD_EXP 51
10467: PPUSH
10468: LD_EXP 40
10472: PPUSH
10473: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10477: LD_EXP 51
10481: PPUSH
10482: LD_STRING D6-Frank-2
10484: PPUSH
10485: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10489: LD_EXP 47
10493: PUSH
10494: LD_EXP 47
10498: PPUSH
10499: LD_EXP 51
10503: PPUSH
10504: CALL_OW 296
10508: PUSH
10509: LD_INT 20
10511: LESS
10512: AND
10513: PUSH
10514: LD_EXP 47
10518: PPUSH
10519: CALL_OW 302
10523: AND
10524: IFFALSE 10717
// begin ComTurnUnit ( Lynch , JMM ) ;
10526: LD_EXP 47
10530: PPUSH
10531: LD_EXP 37
10535: PPUSH
10536: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10540: LD_EXP 51
10544: PPUSH
10545: LD_EXP 37
10549: PPUSH
10550: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10554: LD_EXP 47
10558: PPUSH
10559: LD_STRING D6-Sol1-2
10561: PPUSH
10562: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10566: LD_EXP 37
10570: PPUSH
10571: LD_STRING D6-JMM-2
10573: PPUSH
10574: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10578: LD_EXP 51
10582: PPUSH
10583: LD_STRING D6-Frank-3
10585: PPUSH
10586: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10590: LD_EXP 37
10594: PPUSH
10595: LD_STRING D6-JMM-3
10597: PPUSH
10598: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10602: LD_EXP 51
10606: PPUSH
10607: LD_STRING D6-Frank-4
10609: PPUSH
10610: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10614: LD_EXP 51
10618: PPUSH
10619: LD_STRING D6-Frank-4a
10621: PPUSH
10622: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10626: LD_EXP 37
10630: PPUSH
10631: LD_STRING D6-JMM-4
10633: PPUSH
10634: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10638: LD_EXP 51
10642: PPUSH
10643: LD_STRING D6-Frank-5
10645: PPUSH
10646: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10650: LD_EXP 40
10654: PUSH
10655: LD_EXP 40
10659: PPUSH
10660: CALL_OW 302
10664: AND
10665: PUSH
10666: LD_EXP 40
10670: PUSH
10671: LD_EXP 4
10675: IN
10676: AND
10677: IFFALSE 10691
// Say ( Lisa , D6-Lisa-5 ) ;
10679: LD_EXP 40
10683: PPUSH
10684: LD_STRING D6-Lisa-5
10686: PPUSH
10687: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10691: LD_EXP 51
10695: PPUSH
10696: LD_STRING D6-Frank-6
10698: PPUSH
10699: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10703: LD_EXP 37
10707: PPUSH
10708: LD_STRING D6-JMM-6
10710: PPUSH
10711: CALL_OW 88
// end else
10715: GO 10844
// begin ComTurnUnit ( Frank , JMM ) ;
10717: LD_EXP 51
10721: PPUSH
10722: LD_EXP 37
10726: PPUSH
10727: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10731: LD_EXP 51
10735: PPUSH
10736: LD_STRING D6-Frank-4
10738: PPUSH
10739: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10743: LD_EXP 51
10747: PPUSH
10748: LD_STRING D6-Frank-4a
10750: PPUSH
10751: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10755: LD_EXP 37
10759: PPUSH
10760: LD_STRING D6-JMM-4
10762: PPUSH
10763: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10767: LD_EXP 51
10771: PPUSH
10772: LD_STRING D6-Frank-5
10774: PPUSH
10775: CALL_OW 88
// if Lisa and IsOk ( Lisa ) and Lisa in jmm_units then
10779: LD_EXP 40
10783: PUSH
10784: LD_EXP 40
10788: PPUSH
10789: CALL_OW 302
10793: AND
10794: PUSH
10795: LD_EXP 40
10799: PUSH
10800: LD_EXP 4
10804: IN
10805: AND
10806: IFFALSE 10820
// Say ( Lisa , D6-Lisa-5 ) ;
10808: LD_EXP 40
10812: PPUSH
10813: LD_STRING D6-Lisa-5
10815: PPUSH
10816: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10820: LD_EXP 51
10824: PPUSH
10825: LD_STRING D6-Frank-6
10827: PPUSH
10828: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10832: LD_EXP 37
10836: PPUSH
10837: LD_STRING D6-JMM-6
10839: PPUSH
10840: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10844: LD_STRING Q1
10846: PPUSH
10847: CALL_OW 97
10851: PUSH
10852: LD_INT 1
10854: DOUBLE
10855: EQUAL
10856: IFTRUE 10860
10858: GO 10871
10860: POP
// frank_send_to_scout := true ; 2 :
10861: LD_ADDR_EXP 15
10865: PUSH
10866: LD_INT 1
10868: ST_TO_ADDR
10869: GO 10891
10871: LD_INT 2
10873: DOUBLE
10874: EQUAL
10875: IFTRUE 10879
10877: GO 10890
10879: POP
// frank_send_to_scout := false ; end ;
10880: LD_ADDR_EXP 15
10884: PUSH
10885: LD_INT 0
10887: ST_TO_ADDR
10888: GO 10891
10890: POP
// Video ( false ) ;
10891: LD_INT 0
10893: PPUSH
10894: CALL 77637 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10898: LD_EXP 37
10902: PUSH
10903: LD_EXP 40
10907: PUSH
10908: LD_EXP 47
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: LIST
10917: PPUSH
10918: CALL_OW 139
// if frank_send_to_scout then
10922: LD_EXP 15
10926: IFFALSE 10980
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10928: LD_EXP 51
10932: PPUSH
10933: LD_INT 15
10935: PPUSH
10936: CALL_OW 113
// wait ( 0 0$01 ) ;
10940: LD_INT 35
10942: PPUSH
10943: CALL_OW 67
// until not See ( 1 , Frank ) ;
10947: LD_INT 1
10949: PPUSH
10950: LD_EXP 51
10954: PPUSH
10955: CALL_OW 292
10959: NOT
10960: IFFALSE 10928
// wait ( 0 0$02 ) ;
10962: LD_INT 70
10964: PPUSH
10965: CALL_OW 67
// RemoveUnit ( Frank ) ;
10969: LD_EXP 51
10973: PPUSH
10974: CALL_OW 64
// end else
10978: GO 10992
// SetSide ( Frank , 1 ) ;
10980: LD_EXP 51
10984: PPUSH
10985: LD_INT 1
10987: PPUSH
10988: CALL_OW 235
// send_attack_on_cornel_base := true ;
10992: LD_ADDR_EXP 26
10996: PUSH
10997: LD_INT 1
10999: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11000: LD_INT 35
11002: PPUSH
11003: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
11007: LD_ADDR_EXP 29
11011: PUSH
11012: LD_EXP 29
11016: PPUSH
11017: LD_STRING -
11019: PPUSH
11020: CALL 1077 0 2
11024: ST_TO_ADDR
// if debug then
11025: LD_EXP 1
11029: IFFALSE 11041
// debug_strings := time_to_prepare ;
11031: LD_ADDR_OWVAR 48
11035: PUSH
11036: LD_EXP 29
11040: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
11041: LD_EXP 29
11045: PUSH
11046: LD_INT 0
11048: EQUAL
11049: IFFALSE 11000
// cornel_prepared := true ;
11051: LD_ADDR_EXP 11
11055: PUSH
11056: LD_INT 1
11058: ST_TO_ADDR
// end ;
11059: PPOPN 3
11061: END
// every 0 0$01 trigger cornel_prepared do
11062: LD_EXP 11
11066: IFFALSE 11374
11068: GO 11070
11070: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
11071: LD_EXP 44
11075: PPUSH
11076: LD_STRING D3-Corn-1
11078: PPUSH
11079: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
11083: LD_STRING MOutWait
11085: PPUSH
11086: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
11090: LD_INT 35
11092: PPUSH
11093: CALL_OW 67
// until cornel_counter = 0 ;
11097: LD_EXP 10
11101: PUSH
11102: LD_INT 0
11104: EQUAL
11105: IFFALSE 11090
// SayRadio ( Cornel , D3a-Corn-1 ) ;
11107: LD_EXP 44
11111: PPUSH
11112: LD_STRING D3a-Corn-1
11114: PPUSH
11115: CALL_OW 94
// if IsOk ( Cornel ) then
11119: LD_EXP 44
11123: PPUSH
11124: CALL_OW 302
11128: IFFALSE 11142
// Say ( JMM , D3a-JMM-1 ) ;
11130: LD_EXP 37
11134: PPUSH
11135: LD_STRING D3a-JMM-1
11137: PPUSH
11138: CALL_OW 88
// end_mission_allowed := true ;
11142: LD_ADDR_EXP 21
11146: PUSH
11147: LD_INT 1
11149: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11150: LD_STRING M2
11152: PPUSH
11153: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
11157: LD_INT 9
11159: PPUSH
11160: LD_INT 1
11162: PPUSH
11163: CALL_OW 424
// Wait ( 0 0$05 ) ;
11167: LD_INT 175
11169: PPUSH
11170: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
11174: LD_EXP 44
11178: PPUSH
11179: LD_STRING D3a-Corn-2
11181: PPUSH
11182: CALL_OW 94
// cornel_attack := true ;
11186: LD_ADDR_EXP 9
11190: PUSH
11191: LD_INT 1
11193: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
11194: LD_INT 105
11196: PPUSH
11197: CALL_OW 67
// AddMoreTanks ( ) ;
11201: CALL 5402 0 0
// if frank_send_to_scout then
11205: LD_EXP 15
11209: IFFALSE 11374
// begin InitHc ;
11211: CALL_OW 19
// InitUc ;
11215: CALL_OW 18
// uc_side := 8 ;
11219: LD_ADDR_OWVAR 20
11223: PUSH
11224: LD_INT 8
11226: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
11227: LD_ADDR_EXP 51
11231: PUSH
11232: LD_STRING Frank
11234: PPUSH
11235: LD_INT 0
11237: PPUSH
11238: LD_STRING 
11240: PPUSH
11241: CALL 39963 0 3
11245: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
11246: LD_EXP 51
11250: PPUSH
11251: LD_INT 6
11253: PPUSH
11254: LD_INT 9
11256: PPUSH
11257: LD_INT 0
11259: PPUSH
11260: CALL_OW 48
// ComCrawl ( Frank ) ;
11264: LD_EXP 51
11268: PPUSH
11269: CALL_OW 137
// repeat wait ( 10 ) ;
11273: LD_INT 10
11275: PPUSH
11276: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11280: LD_EXP 37
11284: PPUSH
11285: LD_EXP 51
11289: PPUSH
11290: CALL_OW 296
11294: PUSH
11295: LD_INT 9
11297: LESS
11298: PUSH
11299: LD_INT 9
11301: PPUSH
11302: LD_INT 22
11304: PUSH
11305: LD_INT 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PPUSH
11312: CALL_OW 70
11316: OR
11317: IFFALSE 11273
// if IsDead ( Frank ) then
11319: LD_EXP 51
11323: PPUSH
11324: CALL_OW 301
11328: IFFALSE 11332
// exit ;
11330: GO 11374
// CenterOnUnits ( Frank ) ;
11332: LD_EXP 51
11336: PPUSH
11337: CALL_OW 85
// SetSide ( Frank , 1 ) ;
11341: LD_EXP 51
11345: PPUSH
11346: LD_INT 1
11348: PPUSH
11349: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
11353: LD_EXP 51
11357: PPUSH
11358: LD_STRING D6a-Frank-1
11360: PPUSH
11361: CALL_OW 88
// ComWalk ( Frank ) ;
11365: LD_EXP 51
11369: PPUSH
11370: CALL_OW 138
// end ; end ;
11374: END
// every 0 0$01 trigger solar_builded do
11375: LD_EXP 14
11379: IFFALSE 11483
11381: GO 11383
11383: DISABLE
// begin Wait ( 0 0$02 ) ;
11384: LD_INT 70
11386: PPUSH
11387: CALL_OW 67
// DialogueOn ;
11391: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
11395: LD_EXP 37
11399: PPUSH
11400: LD_STRING D2b-JMM-1
11402: PPUSH
11403: CALL_OW 88
// if Walker and IsOk ( Walker ) then
11407: LD_EXP 48
11411: PUSH
11412: LD_EXP 48
11416: PPUSH
11417: CALL_OW 302
11421: AND
11422: IFFALSE 11472
// begin Say ( Walker , D2b-Sci1-1 ) ;
11424: LD_EXP 48
11428: PPUSH
11429: LD_STRING D2b-Sci1-1
11431: PPUSH
11432: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
11436: LD_EXP 37
11440: PPUSH
11441: LD_STRING D2b-JMM-2
11443: PPUSH
11444: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
11448: LD_EXP 48
11452: PPUSH
11453: LD_STRING D2b-Sci1-2
11455: PPUSH
11456: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
11460: LD_EXP 37
11464: PPUSH
11465: LD_STRING D2b-JMM-3
11467: PPUSH
11468: CALL_OW 88
// end ; DialogueOff ;
11472: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11476: LD_STRING MOutSol
11478: PPUSH
11479: CALL_OW 337
// end ;
11483: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11484: LD_EXP 14
11488: PUSH
11489: LD_EXP 37
11493: PPUSH
11494: CALL_OW 302
11498: AND
11499: PUSH
11500: LD_EXP 37
11504: PPUSH
11505: CALL 911 0 1
11509: AND
11510: PUSH
11511: LD_EXP 16
11515: NOT
11516: AND
11517: IFFALSE 11588
11519: GO 11521
11521: DISABLE
11522: LD_INT 0
11524: PPUSH
// begin jmm_in_veh := true ;
11525: LD_ADDR_EXP 16
11529: PUSH
11530: LD_INT 1
11532: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11533: LD_ADDR_VAR 0 1
11537: PUSH
11538: LD_INT 0
11540: PPUSH
11541: LD_INT 1
11543: PPUSH
11544: CALL_OW 12
11548: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11549: LD_INT 70
11551: PPUSH
11552: CALL_OW 67
// if i then
11556: LD_VAR 0 1
11560: IFFALSE 11576
// Say ( JMM , D2c-JMM-1 ) else
11562: LD_EXP 37
11566: PPUSH
11567: LD_STRING D2c-JMM-1
11569: PPUSH
11570: CALL_OW 88
11574: GO 11588
// Say ( JMM , D2c-JMM-1a ) ;
11576: LD_EXP 37
11580: PPUSH
11581: LD_STRING D2c-JMM-1a
11583: PPUSH
11584: CALL_OW 88
// end ;
11588: PPOPN 1
11590: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11591: LD_EXP 14
11595: PUSH
11596: LD_EXP 38
11600: PPUSH
11601: CALL_OW 302
11605: AND
11606: PUSH
11607: LD_EXP 38
11611: PPUSH
11612: CALL 911 0 1
11616: AND
11617: PUSH
11618: LD_EXP 17
11622: NOT
11623: AND
11624: IFFALSE 11656
11626: GO 11628
11628: DISABLE
// begin bobby_in_veh := true ;
11629: LD_ADDR_EXP 17
11633: PUSH
11634: LD_INT 1
11636: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11637: LD_INT 70
11639: PPUSH
11640: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11644: LD_EXP 38
11648: PPUSH
11649: LD_STRING D2c-Bobby-1
11651: PPUSH
11652: CALL_OW 88
11656: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11657: LD_EXP 14
11661: PUSH
11662: LD_EXP 40
11666: PPUSH
11667: CALL_OW 302
11671: AND
11672: PUSH
11673: LD_EXP 40
11677: PPUSH
11678: CALL 911 0 1
11682: AND
11683: PUSH
11684: LD_EXP 19
11688: NOT
11689: AND
11690: IFFALSE 11722
11692: GO 11694
11694: DISABLE
// begin lisa_in_veh := true ;
11695: LD_ADDR_EXP 19
11699: PUSH
11700: LD_INT 1
11702: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11703: LD_INT 70
11705: PPUSH
11706: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11710: LD_EXP 40
11714: PPUSH
11715: LD_STRING D2c-Lisa-1
11717: PPUSH
11718: CALL_OW 88
11722: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11723: LD_EXP 14
11727: PUSH
11728: LD_EXP 39
11732: PPUSH
11733: CALL_OW 302
11737: AND
11738: PUSH
11739: LD_EXP 39
11743: PPUSH
11744: CALL 911 0 1
11748: AND
11749: PUSH
11750: LD_EXP 18
11754: NOT
11755: AND
11756: IFFALSE 11827
11758: GO 11760
11760: DISABLE
11761: LD_INT 0
11763: PPUSH
// begin cyrus_in_veh := true ;
11764: LD_ADDR_EXP 18
11768: PUSH
11769: LD_INT 1
11771: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_INT 0
11779: PPUSH
11780: LD_INT 1
11782: PPUSH
11783: CALL_OW 12
11787: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11788: LD_INT 70
11790: PPUSH
11791: CALL_OW 67
// if i then
11795: LD_VAR 0 1
11799: IFFALSE 11815
// Say ( Cyrus , D2c-Cyrus-1 ) else
11801: LD_EXP 39
11805: PPUSH
11806: LD_STRING D2c-Cyrus-1
11808: PPUSH
11809: CALL_OW 88
11813: GO 11827
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11815: LD_EXP 39
11819: PPUSH
11820: LD_STRING D2c-Cyrus-1a
11822: PPUSH
11823: CALL_OW 88
// end ;
11827: PPOPN 1
11829: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11830: LD_EXP 44
11834: PPUSH
11835: LD_INT 16
11837: PPUSH
11838: CALL_OW 308
11842: IFFALSE 12123
11844: GO 11846
11846: DISABLE
11847: LD_INT 0
11849: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11850: LD_INT 3
11852: PPUSH
11853: LD_EXP 44
11857: PPUSH
11858: CALL_OW 471
// send_attack_on_cornel := true ;
11862: LD_ADDR_EXP 32
11866: PUSH
11867: LD_INT 1
11869: ST_TO_ADDR
// if ru_vehicles then
11870: LD_EXP 56
11874: IFFALSE 11908
// for i in ru_vehicles do
11876: LD_ADDR_VAR 0 1
11880: PUSH
11881: LD_EXP 56
11885: PUSH
11886: FOR_IN
11887: IFFALSE 11906
// ComAgressiveMove ( i , 215 , 69 ) ;
11889: LD_VAR 0 1
11893: PPUSH
11894: LD_INT 215
11896: PPUSH
11897: LD_INT 69
11899: PPUSH
11900: CALL_OW 114
11904: GO 11886
11906: POP
11907: POP
// if ru_patrol then
11908: LD_EXP 53
11912: IFFALSE 11946
// for i in ru_patrol do
11914: LD_ADDR_VAR 0 1
11918: PUSH
11919: LD_EXP 53
11923: PUSH
11924: FOR_IN
11925: IFFALSE 11944
// ComAgressiveMove ( i , 215 , 69 ) ;
11927: LD_VAR 0 1
11931: PPUSH
11932: LD_INT 215
11934: PPUSH
11935: LD_INT 69
11937: PPUSH
11938: CALL_OW 114
11942: GO 11924
11944: POP
11945: POP
// if frank_send_to_scout then
11946: LD_EXP 15
11950: IFFALSE 11964
// SayRadio ( Frank , D3b-Frank-1 ) ;
11952: LD_EXP 51
11956: PPUSH
11957: LD_STRING D3b-Frank-1
11959: PPUSH
11960: CALL_OW 94
// wait ( 0 0$03 ) ;
11964: LD_INT 105
11966: PPUSH
11967: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11971: LD_EXP 44
11975: PPUSH
11976: LD_STRING D4-Corn-1
11978: PPUSH
11979: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11983: LD_INT 35
11985: PPUSH
11986: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11990: LD_INT 22
11992: PUSH
11993: LD_INT 4
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 21
12002: PUSH
12003: LD_INT 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 3
12012: PUSH
12013: LD_INT 24
12015: PUSH
12016: LD_INT 1000
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: PPUSH
12032: CALL_OW 69
12036: PUSH
12037: LD_INT 6
12039: LESS
12040: IFFALSE 11983
// if Cornel then
12042: LD_EXP 44
12046: IFFALSE 12086
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
12048: LD_EXP 44
12052: PPUSH
12053: LD_STRING D5-Corn-1
12055: PPUSH
12056: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
12060: LD_EXP 44
12064: PPUSH
12065: LD_EXP 2
12069: PUSH
12070: LD_STRING Cornel
12072: STR
12073: PPUSH
12074: CALL_OW 38
// cornel_saved := true ;
12078: LD_ADDR_EXP 27
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
12086: LD_INT 4
12088: PPUSH
12089: LD_INT 8
12091: PPUSH
12092: CALL_OW 343
// wait ( 0 0$01 ) ;
12096: LD_INT 35
12098: PPUSH
12099: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
12103: LD_INT 3
12105: PPUSH
12106: LD_EXP 44
12110: PPUSH
12111: CALL_OW 472
// send_attack_on_cornel := false ;
12115: LD_ADDR_EXP 32
12119: PUSH
12120: LD_INT 0
12122: ST_TO_ADDR
// end ;
12123: PPOPN 1
12125: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
12126: LD_INT 9
12128: PPUSH
12129: LD_INT 22
12131: PUSH
12132: LD_INT 1
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PPUSH
12139: CALL_OW 70
12143: PUSH
12144: LD_EXP 33
12148: OR
12149: IFFALSE 12370
12151: GO 12153
12153: DISABLE
12154: LD_INT 0
12156: PPUSH
12157: PPUSH
// begin enable ;
12158: ENABLE
// if not jmm_on_west then
12159: LD_EXP 5
12163: NOT
12164: IFFALSE 12175
// begin YouLost ( 4 ) ;
12166: LD_STRING 4
12168: PPUSH
12169: CALL_OW 104
// exit ;
12173: GO 12370
// end ; if not game_end then
12175: LD_EXP 33
12179: NOT
12180: IFFALSE 12190
// game_end := true ;
12182: LD_ADDR_EXP 33
12186: PUSH
12187: LD_INT 1
12189: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
12190: LD_ADDR_VAR 0 2
12194: PUSH
12195: LD_INT 9
12197: PPUSH
12198: LD_INT 22
12200: PUSH
12201: LD_INT 1
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PPUSH
12208: CALL_OW 70
12212: ST_TO_ADDR
// if not filter then
12213: LD_VAR 0 2
12217: NOT
12218: IFFALSE 12222
// exit ;
12220: GO 12370
// for i in filter do
12222: LD_ADDR_VAR 0 1
12226: PUSH
12227: LD_VAR 0 2
12231: PUSH
12232: FOR_IN
12233: IFFALSE 12368
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle then
12235: LD_VAR 0 1
12239: PPUSH
12240: CALL_OW 302
12244: PUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 247
12254: PUSH
12255: LD_INT 2
12257: EQUAL
12258: AND
12259: IFFALSE 12331
// begin if i = JMM and save_group < 4 then
12261: LD_VAR 0 1
12265: PUSH
12266: LD_EXP 37
12270: EQUAL
12271: PUSH
12272: LD_EXP 23
12276: PUSH
12277: LD_INT 4
12279: LESS
12280: AND
12281: IFFALSE 12285
// continue ;
12283: GO 12232
// if GetNation ( i ) = nation_american then
12285: LD_VAR 0 1
12289: PPUSH
12290: CALL_OW 248
12294: PUSH
12295: LD_INT 1
12297: EQUAL
12298: IFFALSE 12308
// veh_on_meta := true ;
12300: LD_ADDR_EXP 28
12304: PUSH
12305: LD_INT 1
12307: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
12308: LD_VAR 0 1
12312: PPUSH
12313: CALL_OW 311
12317: PPUSH
12318: CALL 12373 0 1
// RemoveUnit ( i ) ;
12322: LD_VAR 0 1
12326: PPUSH
12327: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
12331: LD_VAR 0 1
12335: PPUSH
12336: CALL_OW 302
12340: PUSH
12341: LD_VAR 0 1
12345: PPUSH
12346: CALL_OW 247
12350: PUSH
12351: LD_INT 1
12353: EQUAL
12354: AND
12355: IFFALSE 12366
// Save ( i ) ;
12357: LD_VAR 0 1
12361: PPUSH
12362: CALL 12373 0 1
// end ;
12366: GO 12232
12368: POP
12369: POP
// end ;
12370: PPOPN 2
12372: END
// export function Save ( i ) ; begin
12373: LD_INT 0
12375: PPUSH
// if i = JMM and save_counter >= 4 then
12376: LD_VAR 0 1
12380: PUSH
12381: LD_EXP 37
12385: EQUAL
12386: PUSH
12387: LD_EXP 36
12391: PUSH
12392: LD_INT 4
12394: GREATEREQUAL
12395: AND
12396: IFFALSE 12532
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
12398: LD_EXP 24
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_INT 1
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 21
12415: PUSH
12416: LD_INT 1
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 69
12431: PUSH
12432: LD_INT 1
12434: GREATER
12435: AND
12436: IFFALSE 12493
// begin show_query := false ;
12438: LD_ADDR_EXP 24
12442: PUSH
12443: LD_INT 0
12445: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
12446: LD_STRING Q2
12448: PPUSH
12449: CALL_OW 97
12453: PUSH
12454: LD_INT 1
12456: DOUBLE
12457: EQUAL
12458: IFTRUE 12462
12460: GO 12473
12462: POP
// wait_for_them := true ; 2 :
12463: LD_ADDR_EXP 25
12467: PUSH
12468: LD_INT 1
12470: ST_TO_ADDR
12471: GO 12493
12473: LD_INT 2
12475: DOUBLE
12476: EQUAL
12477: IFTRUE 12481
12479: GO 12492
12481: POP
// wait_for_them := false ; end ;
12482: LD_ADDR_EXP 25
12486: PUSH
12487: LD_INT 0
12489: ST_TO_ADDR
12490: GO 12493
12492: POP
// end ; save_counter := save_counter + 1 ;
12493: LD_ADDR_EXP 36
12497: PUSH
12498: LD_EXP 36
12502: PUSH
12503: LD_INT 1
12505: PLUS
12506: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12507: LD_ADDR_EXP 23
12511: PUSH
12512: LD_EXP 23
12516: PUSH
12517: LD_EXP 37
12521: ADD
12522: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12523: LD_EXP 37
12527: PPUSH
12528: CALL_OW 64
// end ; if i = Lisa then
12532: LD_VAR 0 1
12536: PUSH
12537: LD_EXP 40
12541: EQUAL
12542: IFFALSE 12583
// begin save_counter := save_counter + 1 ;
12544: LD_ADDR_EXP 36
12548: PUSH
12549: LD_EXP 36
12553: PUSH
12554: LD_INT 1
12556: PLUS
12557: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12558: LD_ADDR_EXP 23
12562: PUSH
12563: LD_EXP 23
12567: PUSH
12568: LD_EXP 40
12572: ADD
12573: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12574: LD_EXP 40
12578: PPUSH
12579: CALL_OW 64
// end ; if i = Bobby then
12583: LD_VAR 0 1
12587: PUSH
12588: LD_EXP 38
12592: EQUAL
12593: IFFALSE 12634
// begin save_counter := save_counter + 1 ;
12595: LD_ADDR_EXP 36
12599: PUSH
12600: LD_EXP 36
12604: PUSH
12605: LD_INT 1
12607: PLUS
12608: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12609: LD_ADDR_EXP 23
12613: PUSH
12614: LD_EXP 23
12618: PUSH
12619: LD_EXP 38
12623: ADD
12624: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12625: LD_EXP 38
12629: PPUSH
12630: CALL_OW 64
// end ; if i = Cyrus then
12634: LD_VAR 0 1
12638: PUSH
12639: LD_EXP 39
12643: EQUAL
12644: IFFALSE 12685
// begin save_counter := save_counter + 1 ;
12646: LD_ADDR_EXP 36
12650: PUSH
12651: LD_EXP 36
12655: PUSH
12656: LD_INT 1
12658: PLUS
12659: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12660: LD_ADDR_EXP 23
12664: PUSH
12665: LD_EXP 23
12669: PUSH
12670: LD_EXP 39
12674: ADD
12675: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12676: LD_EXP 39
12680: PPUSH
12681: CALL_OW 64
// end ; if i = Khatam then
12685: LD_VAR 0 1
12689: PUSH
12690: LD_EXP 41
12694: EQUAL
12695: IFFALSE 12736
// begin save_counter := save_counter + 1 ;
12697: LD_ADDR_EXP 36
12701: PUSH
12702: LD_EXP 36
12706: PUSH
12707: LD_INT 1
12709: PLUS
12710: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12711: LD_ADDR_EXP 23
12715: PUSH
12716: LD_EXP 23
12720: PUSH
12721: LD_EXP 41
12725: ADD
12726: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12727: LD_EXP 41
12731: PPUSH
12732: CALL_OW 64
// end ; if i = Frank then
12736: LD_VAR 0 1
12740: PUSH
12741: LD_EXP 51
12745: EQUAL
12746: IFFALSE 12787
// begin save_counter := save_counter + 1 ;
12748: LD_ADDR_EXP 36
12752: PUSH
12753: LD_EXP 36
12757: PUSH
12758: LD_INT 1
12760: PLUS
12761: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12762: LD_ADDR_EXP 23
12766: PUSH
12767: LD_EXP 23
12771: PUSH
12772: LD_EXP 51
12776: ADD
12777: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12778: LD_EXP 51
12782: PPUSH
12783: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12787: LD_VAR 0 1
12791: PUSH
12792: LD_EXP 37
12796: NONEQUAL
12797: PUSH
12798: LD_VAR 0 1
12802: PPUSH
12803: CALL_OW 302
12807: AND
12808: PUSH
12809: LD_VAR 0 1
12813: PPUSH
12814: CALL_OW 247
12818: PUSH
12819: LD_INT 1
12821: EQUAL
12822: AND
12823: PUSH
12824: LD_VAR 0 1
12828: PUSH
12829: LD_EXP 23
12833: IN
12834: NOT
12835: AND
12836: IFFALSE 12877
// begin save_counter := save_counter + 1 ;
12838: LD_ADDR_EXP 36
12842: PUSH
12843: LD_EXP 36
12847: PUSH
12848: LD_INT 1
12850: PLUS
12851: ST_TO_ADDR
// save_others := save_others ^ i ;
12852: LD_ADDR_EXP 22
12856: PUSH
12857: LD_EXP 22
12861: PUSH
12862: LD_VAR 0 1
12866: ADD
12867: ST_TO_ADDR
// RemoveUnit ( i ) ;
12868: LD_VAR 0 1
12872: PPUSH
12873: CALL_OW 64
// end ; end ;
12877: LD_VAR 0 2
12881: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12882: LD_EXP 24
12886: NOT
12887: PUSH
12888: LD_EXP 25
12892: NOT
12893: AND
12894: PUSH
12895: LD_INT 22
12897: PUSH
12898: LD_INT 1
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 21
12907: PUSH
12908: LD_INT 1
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PPUSH
12919: CALL_OW 69
12923: PUSH
12924: LD_INT 0
12926: EQUAL
12927: OR
12928: IFFALSE 12937
12930: GO 12932
12932: DISABLE
// EndMission ;
12933: CALL 12938 0 0
12937: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12938: LD_INT 0
12940: PPUSH
12941: PPUSH
12942: PPUSH
12943: PPUSH
12944: PPUSH
// wait ( 0 0$01 ) ;
12945: LD_INT 35
12947: PPUSH
12948: CALL_OW 67
// if tick <= 12 12$00 then
12952: LD_OWVAR 1
12956: PUSH
12957: LD_INT 25200
12959: LESSEQUAL
12960: IFFALSE 12969
// SetAchievement ( ACH_ASPEED_3 ) ;
12962: LD_STRING ACH_ASPEED_3
12964: PPUSH
12965: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12969: LD_EXP 23
12973: PUSH
12974: LD_EXP 22
12978: ADD
12979: PPUSH
12980: LD_INT 25
12982: PUSH
12983: LD_INT 4
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PPUSH
12990: CALL_OW 72
12994: PUSH
12995: LD_INT 0
12997: EQUAL
12998: IFFALSE 13014
// begin wait ( 3 ) ;
13000: LD_INT 3
13002: PPUSH
13003: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
13007: LD_STRING ACH_NOSCI
13009: PPUSH
13010: CALL_OW 543
// end ; m1 := solar_builded ;
13014: LD_ADDR_VAR 0 3
13018: PUSH
13019: LD_EXP 14
13023: ST_TO_ADDR
// m2 := veh_on_meta ;
13024: LD_ADDR_VAR 0 4
13028: PUSH
13029: LD_EXP 28
13033: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
13034: LD_ADDR_VAR 0 5
13038: PUSH
13039: LD_EXP 34
13043: PUSH
13044: LD_INT 0
13046: EQUAL
13047: ST_TO_ADDR
// if solar_builded then
13048: LD_EXP 14
13052: IFFALSE 13066
// AddMedal ( Solar1 , 1 ) else
13054: LD_STRING Solar1
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 101
13064: GO 13077
// AddMedal ( Solar1 , - 1 ) ;
13066: LD_STRING Solar1
13068: PPUSH
13069: LD_INT 1
13071: NEG
13072: PPUSH
13073: CALL_OW 101
// if veh_on_meta then
13077: LD_EXP 28
13081: IFFALSE 13095
// AddMedal ( Solar2 , 1 ) else
13083: LD_STRING Solar2
13085: PPUSH
13086: LD_INT 1
13088: PPUSH
13089: CALL_OW 101
13093: GO 13125
// if solar_builded then
13095: LD_EXP 14
13099: IFFALSE 13114
// AddMedal ( Solar2 , - 1 ) else
13101: LD_STRING Solar2
13103: PPUSH
13104: LD_INT 1
13106: NEG
13107: PPUSH
13108: CALL_OW 101
13112: GO 13125
// AddMedal ( Solar2 , - 2 ) ;
13114: LD_STRING Solar2
13116: PPUSH
13117: LD_INT 2
13119: NEG
13120: PPUSH
13121: CALL_OW 101
// if lose_counter = 0 then
13125: LD_EXP 34
13129: PUSH
13130: LD_INT 0
13132: EQUAL
13133: IFFALSE 13147
// AddMedal ( No , 1 ) else
13135: LD_STRING No
13137: PPUSH
13138: LD_INT 1
13140: PPUSH
13141: CALL_OW 101
13145: GO 13191
// if lose_counter > 0 and lose_counter < 5 then
13147: LD_EXP 34
13151: PUSH
13152: LD_INT 0
13154: GREATER
13155: PUSH
13156: LD_EXP 34
13160: PUSH
13161: LD_INT 5
13163: LESS
13164: AND
13165: IFFALSE 13180
// AddMedal ( No , - 1 ) else
13167: LD_STRING No
13169: PPUSH
13170: LD_INT 1
13172: NEG
13173: PPUSH
13174: CALL_OW 101
13178: GO 13191
// AddMedal ( UpTo4 , - 1 ) ;
13180: LD_STRING UpTo4
13182: PPUSH
13183: LD_INT 1
13185: NEG
13186: PPUSH
13187: CALL_OW 101
// GiveMedals ( MAIN ) ;
13191: LD_STRING MAIN
13193: PPUSH
13194: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
13198: LD_OWVAR 67
13202: PUSH
13203: LD_INT 3
13205: GREATEREQUAL
13206: PUSH
13207: LD_VAR 0 3
13211: AND
13212: PUSH
13213: LD_VAR 0 4
13217: AND
13218: PUSH
13219: LD_VAR 0 5
13223: AND
13224: IFFALSE 13236
// SetAchievementEX ( ACH_AMER , 3 ) ;
13226: LD_STRING ACH_AMER
13228: PPUSH
13229: LD_INT 3
13231: PPUSH
13232: CALL_OW 564
// if IsDead ( Pokryshkin ) then
13236: LD_EXP 52
13240: PPUSH
13241: CALL_OW 301
13245: IFFALSE 13301
// begin stop_talking := true ;
13247: LD_ADDR_OWVAR 56
13251: PUSH
13252: LD_INT 1
13254: ST_TO_ADDR
// for i in save_group union save_others do
13255: LD_ADDR_VAR 0 2
13259: PUSH
13260: LD_EXP 23
13264: PUSH
13265: LD_EXP 22
13269: UNION
13270: PUSH
13271: FOR_IN
13272: IFFALSE 13291
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
13274: LD_VAR 0 2
13278: PPUSH
13279: LD_INT 1
13281: PPUSH
13282: LD_INT 1500
13284: PPUSH
13285: CALL_OW 591
13289: GO 13271
13291: POP
13292: POP
// stop_talking := false ;
13293: LD_ADDR_OWVAR 56
13297: PUSH
13298: LD_INT 0
13300: ST_TO_ADDR
// end ; RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_american ] ] ) ) ;
13301: LD_INT 22
13303: PUSH
13304: LD_INT 1
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PUSH
13311: LD_INT 23
13313: PUSH
13314: LD_INT 1
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PPUSH
13325: CALL_OW 69
13329: PPUSH
13330: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
13334: LD_EXP 37
13338: PPUSH
13339: LD_EXP 2
13343: PUSH
13344: LD_STRING JMM
13346: STR
13347: PPUSH
13348: CALL_OW 38
// if Bobby in save_group then
13352: LD_EXP 38
13356: PUSH
13357: LD_EXP 23
13361: IN
13362: IFFALSE 13382
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
13364: LD_EXP 38
13368: PPUSH
13369: LD_EXP 2
13373: PUSH
13374: LD_STRING Bobby
13376: STR
13377: PPUSH
13378: CALL_OW 38
// if Cyrus in save_group then
13382: LD_EXP 39
13386: PUSH
13387: LD_EXP 23
13391: IN
13392: IFFALSE 13412
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
13394: LD_EXP 39
13398: PPUSH
13399: LD_EXP 2
13403: PUSH
13404: LD_STRING Cyrus
13406: STR
13407: PPUSH
13408: CALL_OW 38
// if Lisa in save_group then
13412: LD_EXP 40
13416: PUSH
13417: LD_EXP 23
13421: IN
13422: IFFALSE 13442
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
13424: LD_EXP 40
13428: PPUSH
13429: LD_EXP 2
13433: PUSH
13434: LD_STRING Lisa
13436: STR
13437: PPUSH
13438: CALL_OW 38
// if Frank in save_group then
13442: LD_EXP 51
13446: PUSH
13447: LD_EXP 23
13451: IN
13452: IFFALSE 13479
// begin ToLua ( enableBioCharacter(BIO_FRANK) ) ;
13454: LD_STRING enableBioCharacter(BIO_FRANK)
13456: PPUSH
13457: CALL_OW 559
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
13461: LD_EXP 51
13465: PPUSH
13466: LD_EXP 2
13470: PUSH
13471: LD_STRING Frank
13473: STR
13474: PPUSH
13475: CALL_OW 38
// end ; if Khatam in save_group then
13479: LD_EXP 41
13483: PUSH
13484: LD_EXP 23
13488: IN
13489: IFFALSE 13509
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
13491: LD_EXP 41
13495: PPUSH
13496: LD_EXP 2
13500: PUSH
13501: LD_STRING Khatam
13503: STR
13504: PPUSH
13505: CALL_OW 38
// if save_others then
13509: LD_EXP 22
13513: IFFALSE 13527
// SaveCharacters ( save_others , 03_others ) ;
13515: LD_EXP 22
13519: PPUSH
13520: LD_STRING 03_others
13522: PPUSH
13523: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ANDY) ) ;
13527: LD_STRING enableBioCharacter(BIO_ANDY)
13529: PPUSH
13530: CALL_OW 559
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13534: LD_EXP 45
13538: PUSH
13539: LD_EXP 45
13543: PPUSH
13544: CALL_OW 302
13548: AND
13549: PUSH
13550: LD_EXP 27
13554: AND
13555: IFFALSE 13567
// begin ResetFog ;
13557: CALL_OW 335
// DisplayEndingScene ;
13561: CALL 13589 0 0
// end else
13565: GO 13580
// DeleteCharacters ( mission_prefix & Cornel ) ;
13567: LD_EXP 2
13571: PUSH
13572: LD_STRING Cornel
13574: STR
13575: PPUSH
13576: CALL_OW 40
// YouWin ;
13580: CALL_OW 103
// end ;
13584: LD_VAR 0 1
13588: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13589: LD_INT 0
13591: PPUSH
13592: PPUSH
13593: PPUSH
13594: PPUSH
13595: PPUSH
13596: PPUSH
// InGameOn ;
13597: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13601: LD_INT 208
13603: PPUSH
13604: LD_INT 62
13606: PPUSH
13607: LD_INT 1
13609: PPUSH
13610: LD_INT 10
13612: NEG
13613: PPUSH
13614: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13618: LD_INT 208
13620: PPUSH
13621: LD_INT 62
13623: PPUSH
13624: LD_INT 1
13626: PPUSH
13627: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13631: LD_ADDR_VAR 0 3
13635: PUSH
13636: LD_INT 22
13638: PUSH
13639: LD_INT 3
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: LD_INT 2
13648: PUSH
13649: LD_INT 21
13651: PUSH
13652: LD_INT 2
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: LD_INT 21
13661: PUSH
13662: LD_INT 1
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PPUSH
13678: CALL_OW 69
13682: ST_TO_ADDR
// if filter then
13683: LD_VAR 0 3
13687: IFFALSE 13715
// for i in filter do
13689: LD_ADDR_VAR 0 2
13693: PUSH
13694: LD_VAR 0 3
13698: PUSH
13699: FOR_IN
13700: IFFALSE 13713
// RemoveUnit ( i ) ;
13702: LD_VAR 0 2
13706: PPUSH
13707: CALL_OW 64
13711: GO 13699
13713: POP
13714: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13715: LD_ADDR_VAR 0 3
13719: PUSH
13720: LD_INT 22
13722: PUSH
13723: LD_INT 4
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 21
13732: PUSH
13733: LD_INT 1
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PPUSH
13744: CALL_OW 69
13748: ST_TO_ADDR
// if filter then
13749: LD_VAR 0 3
13753: IFFALSE 13784
// for i in filter do
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_VAR 0 3
13764: PUSH
13765: FOR_IN
13766: IFFALSE 13782
// SetLives ( i , 0 ) ;
13768: LD_VAR 0 2
13772: PPUSH
13773: LD_INT 0
13775: PPUSH
13776: CALL_OW 234
13780: GO 13765
13782: POP
13783: POP
// uc_side := 4 ;
13784: LD_ADDR_OWVAR 20
13788: PUSH
13789: LD_INT 4
13791: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13792: LD_ADDR_VAR 0 4
13796: PUSH
13797: LD_STRING Cornell
13799: PPUSH
13800: LD_INT 0
13802: PPUSH
13803: LD_STRING 
13805: PPUSH
13806: CALL 39963 0 3
13810: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13811: LD_VAR 0 4
13815: PPUSH
13816: LD_INT 208
13818: PPUSH
13819: LD_INT 62
13821: PPUSH
13822: LD_INT 0
13824: PPUSH
13825: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13829: LD_VAR 0 4
13833: PPUSH
13834: LD_INT 100
13836: PPUSH
13837: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13841: LD_INT 3
13843: PPUSH
13844: LD_VAR 0 4
13848: PPUSH
13849: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13853: LD_INT 4
13855: PPUSH
13856: LD_INT 3
13858: PPUSH
13859: LD_INT 1
13861: PPUSH
13862: LD_INT 1
13864: PPUSH
13865: CALL_OW 80
// uc_side := 3 ;
13869: LD_ADDR_OWVAR 20
13873: PUSH
13874: LD_INT 3
13876: ST_TO_ADDR
// uc_nation := 3 ;
13877: LD_ADDR_OWVAR 21
13881: PUSH
13882: LD_INT 3
13884: ST_TO_ADDR
// InitHc ;
13885: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13889: LD_ADDR_VAR 0 5
13893: PUSH
13894: LD_STRING Mikhail
13896: PPUSH
13897: LD_INT 0
13899: PPUSH
13900: LD_STRING 
13902: PPUSH
13903: CALL 39963 0 3
13907: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13908: LD_INT 1
13910: PPUSH
13911: LD_INT 1
13913: PPUSH
13914: LD_INT 0
13916: PPUSH
13917: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13921: LD_ADDR_VAR 0 6
13925: PUSH
13926: LD_VAR 0 6
13930: PUSH
13931: CALL_OW 44
13935: ADD
13936: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13937: LD_ADDR_VAR 0 6
13941: PUSH
13942: LD_VAR 0 6
13946: PUSH
13947: CALL_OW 44
13951: ADD
13952: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13953: LD_INT 2
13955: PPUSH
13956: LD_INT 4
13958: PPUSH
13959: LD_INT 0
13961: PPUSH
13962: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13966: LD_ADDR_VAR 0 6
13970: PUSH
13971: LD_VAR 0 6
13975: PUSH
13976: CALL_OW 44
13980: ADD
13981: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13982: LD_VAR 0 5
13986: PPUSH
13987: LD_INT 17
13989: PPUSH
13990: LD_INT 0
13992: PPUSH
13993: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13997: LD_VAR 0 5
14001: PPUSH
14002: LD_INT 210
14004: PPUSH
14005: LD_INT 63
14007: PPUSH
14008: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
14012: LD_VAR 0 5
14016: PPUSH
14017: LD_INT 208
14019: PPUSH
14020: LD_INT 62
14022: PPUSH
14023: CALL_OW 178
// for i in fake_russians do
14027: LD_ADDR_VAR 0 2
14031: PUSH
14032: LD_VAR 0 6
14036: PUSH
14037: FOR_IN
14038: IFFALSE 14116
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
14040: LD_VAR 0 2
14044: PPUSH
14045: LD_INT 17
14047: PPUSH
14048: LD_INT 0
14050: PPUSH
14051: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
14055: LD_VAR 0 2
14059: PPUSH
14060: LD_INT 215
14062: PPUSH
14063: LD_INT 67
14065: PPUSH
14066: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
14070: LD_VAR 0 2
14074: PPUSH
14075: LD_INT 208
14077: PPUSH
14078: LD_INT 62
14080: PPUSH
14081: CALL_OW 178
// if GetClass ( i ) = 4 then
14085: LD_VAR 0 2
14089: PPUSH
14090: CALL_OW 257
14094: PUSH
14095: LD_INT 4
14097: EQUAL
14098: IFFALSE 14114
// ComHeal ( i , fake_cornel ) ;
14100: LD_VAR 0 2
14104: PPUSH
14105: LD_VAR 0 4
14109: PPUSH
14110: CALL_OW 128
// end ;
14114: GO 14037
14116: POP
14117: POP
// Wait ( 0 0$01 ) ;
14118: LD_INT 35
14120: PPUSH
14121: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
14125: LD_INT 208
14127: PPUSH
14128: LD_INT 62
14130: PPUSH
14131: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
14135: LD_INT 208
14137: PPUSH
14138: LD_INT 62
14140: PPUSH
14141: LD_INT 1
14143: PPUSH
14144: LD_INT 10
14146: NEG
14147: PPUSH
14148: CALL_OW 330
// Wait ( 0 0$15 ) ;
14152: LD_INT 525
14154: PPUSH
14155: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
14159: LD_INT 208
14161: PPUSH
14162: LD_INT 62
14164: PPUSH
14165: LD_INT 1
14167: PPUSH
14168: CALL_OW 331
// ResetFog ;
14172: CALL_OW 335
// InGameOff ;
14176: CALL_OW 9
// end ;
14180: LD_VAR 0 1
14184: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
14185: LD_INT 10
14187: PPUSH
14188: LD_INT 22
14190: PUSH
14191: LD_INT 1
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PPUSH
14198: CALL_OW 70
14202: PUSH
14203: LD_EXP 44
14207: PPUSH
14208: CALL_OW 302
14212: AND
14213: PUSH
14214: LD_INT 22
14216: PUSH
14217: LD_INT 1
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PPUSH
14224: CALL_OW 69
14228: PPUSH
14229: LD_EXP 44
14233: PPUSH
14234: CALL_OW 74
14238: PPUSH
14239: LD_EXP 44
14243: PPUSH
14244: CALL_OW 296
14248: PUSH
14249: LD_INT 30
14251: LESS
14252: OR
14253: IFFALSE 14304
14255: GO 14257
14257: DISABLE
// begin enable ;
14258: ENABLE
// powell_warn := powell_warn + 1 ;
14259: LD_ADDR_EXP 35
14263: PUSH
14264: LD_EXP 35
14268: PUSH
14269: LD_INT 1
14271: PLUS
14272: ST_TO_ADDR
// if powell_warn = 3 then
14273: LD_EXP 35
14277: PUSH
14278: LD_INT 3
14280: EQUAL
14281: IFFALSE 14292
// begin YouLost ( 5 ) ;
14283: LD_STRING 5
14285: PPUSH
14286: CALL_OW 104
// exit ;
14290: GO 14304
// end ; SayRadioNoFace ( Powell , DWarn-Pow-1 ) ;
14292: LD_EXP 46
14296: PPUSH
14297: LD_STRING DWarn-Pow-1
14299: PPUSH
14300: CALL_OW 586
// end ; end_of_file
14304: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
14305: LD_EXP 8
14309: IFFALSE 16146
14311: GO 14313
14313: DISABLE
14314: LD_INT 0
14316: PPUSH
14317: PPUSH
14318: PPUSH
14319: PPUSH
14320: PPUSH
14321: PPUSH
14322: PPUSH
14323: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
14324: LD_EXP 44
14328: PUSH
14329: LD_EXP 45
14333: ADD
14334: PUSH
14335: LD_EXP 6
14339: ADD
14340: PPUSH
14341: LD_INT 250
14343: PPUSH
14344: LD_INT 120
14346: PPUSH
14347: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
14351: LD_ADDR_VAR 0 2
14355: PUSH
14356: LD_EXP 6
14360: PPUSH
14361: LD_INT 25
14363: PUSH
14364: LD_INT 2
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PPUSH
14371: CALL_OW 72
14375: PUSH
14376: LD_EXP 45
14380: DIFF
14381: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
14382: LD_ADDR_VAR 0 3
14386: PUSH
14387: LD_EXP 6
14391: PPUSH
14392: LD_INT 21
14394: PUSH
14395: LD_INT 1
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PPUSH
14402: CALL_OW 72
14406: PUSH
14407: LD_VAR 0 2
14411: DIFF
14412: ST_TO_ADDR
// if not has_eng then
14413: LD_VAR 0 2
14417: NOT
14418: IFFALSE 14501
// begin uc_side := 4 ;
14420: LD_ADDR_OWVAR 20
14424: PUSH
14425: LD_INT 4
14427: ST_TO_ADDR
// uc_nation := 1 ;
14428: LD_ADDR_OWVAR 21
14432: PUSH
14433: LD_INT 1
14435: ST_TO_ADDR
// bc_type := b_depot ;
14436: LD_ADDR_OWVAR 42
14440: PUSH
14441: LD_INT 0
14443: ST_TO_ADDR
// bc_level := 2 ;
14444: LD_ADDR_OWVAR 43
14448: PUSH
14449: LD_INT 2
14451: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
14452: LD_ADDR_VAR 0 4
14456: PUSH
14457: LD_INT 264
14459: PPUSH
14460: LD_INT 120
14462: PPUSH
14463: LD_INT 4
14465: PPUSH
14466: CALL_OW 47
14470: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
14471: LD_INT 264
14473: PPUSH
14474: LD_INT 120
14476: PPUSH
14477: LD_INT 4
14479: PPUSH
14480: LD_INT 10
14482: NEG
14483: PPUSH
14484: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
14488: LD_INT 264
14490: PPUSH
14491: LD_INT 120
14493: PPUSH
14494: LD_INT 4
14496: PPUSH
14497: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14501: LD_INT 35
14503: PPUSH
14504: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14508: LD_EXP 44
14512: PPUSH
14513: LD_INT 10
14515: PPUSH
14516: CALL_OW 308
14520: PUSH
14521: LD_EXP 44
14525: PPUSH
14526: CALL_OW 310
14530: PPUSH
14531: LD_INT 10
14533: PPUSH
14534: CALL_OW 308
14538: OR
14539: IFFALSE 14501
// if has_eng and not dep then
14541: LD_VAR 0 2
14545: PUSH
14546: LD_VAR 0 4
14550: NOT
14551: AND
14552: IFFALSE 14702
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14554: LD_VAR 0 2
14558: PPUSH
14559: LD_INT 0
14561: PPUSH
14562: LD_INT 264
14564: PPUSH
14565: LD_INT 120
14567: PPUSH
14568: LD_INT 4
14570: PPUSH
14571: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14575: LD_INT 35
14577: PPUSH
14578: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14582: LD_INT 22
14584: PUSH
14585: LD_INT 4
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: LD_INT 30
14594: PUSH
14595: LD_INT 0
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PPUSH
14606: CALL_OW 69
14610: IFFALSE 14575
// ComMoveXY ( filter , 264 , 120 ) ;
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_INT 264
14619: PPUSH
14620: LD_INT 120
14622: PPUSH
14623: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14627: LD_INT 35
14629: PPUSH
14630: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14634: LD_INT 22
14636: PUSH
14637: LD_INT 4
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 30
14646: PUSH
14647: LD_INT 0
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 3
14656: PUSH
14657: LD_INT 57
14659: PUSH
14660: EMPTY
14661: LIST
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: LIST
14671: PPUSH
14672: CALL_OW 69
14676: IFFALSE 14627
// ComMoveXY ( filter , 247 , 113 ) ;
14678: LD_VAR 0 3
14682: PPUSH
14683: LD_INT 247
14685: PPUSH
14686: LD_INT 113
14688: PPUSH
14689: CALL_OW 111
// Wait ( 0 0$2 ) ;
14693: LD_INT 70
14695: PPUSH
14696: CALL_OW 67
// end else
14700: GO 14714
// begin SetSide ( dep , 4 ) ;
14702: LD_VAR 0 4
14706: PPUSH
14707: LD_INT 4
14709: PPUSH
14710: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14714: LD_ADDR_VAR 0 4
14718: PUSH
14719: LD_INT 22
14721: PUSH
14722: LD_INT 4
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 30
14731: PUSH
14732: LD_INT 0
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PPUSH
14743: CALL_OW 69
14747: PUSH
14748: LD_INT 1
14750: ARRAY
14751: ST_TO_ADDR
// if not has_eng then
14752: LD_VAR 0 2
14756: NOT
14757: IFFALSE 14844
// for i = 1 to 2 do
14759: LD_ADDR_VAR 0 1
14763: PUSH
14764: DOUBLE
14765: LD_INT 1
14767: DEC
14768: ST_TO_ADDR
14769: LD_INT 2
14771: PUSH
14772: FOR_TO
14773: IFFALSE 14842
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14775: LD_VAR 0 3
14779: PUSH
14780: LD_INT 1
14782: ARRAY
14783: PPUSH
14784: LD_VAR 0 4
14788: PPUSH
14789: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14793: LD_VAR 0 3
14797: PUSH
14798: LD_INT 1
14800: ARRAY
14801: PPUSH
14802: LD_INT 2
14804: PPUSH
14805: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14809: LD_VAR 0 3
14813: PUSH
14814: LD_INT 1
14816: ARRAY
14817: PPUSH
14818: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14822: LD_ADDR_VAR 0 3
14826: PUSH
14827: LD_VAR 0 3
14831: PPUSH
14832: LD_INT 1
14834: PPUSH
14835: CALL_OW 3
14839: ST_TO_ADDR
// end ;
14840: GO 14772
14842: POP
14843: POP
// if IsInUnit ( Cornel ) then
14844: LD_EXP 44
14848: PPUSH
14849: CALL_OW 310
14853: IFFALSE 14931
// begin cargo := IsInUnit ( Cornel ) ;
14855: LD_ADDR_VAR 0 7
14859: PUSH
14860: LD_EXP 44
14864: PPUSH
14865: CALL_OW 310
14869: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14870: LD_VAR 0 7
14874: PPUSH
14875: LD_INT 1
14877: PPUSH
14878: CALL_OW 289
14882: IFFALSE 14893
// ComUnload ( cargo ) ;
14884: LD_VAR 0 7
14888: PPUSH
14889: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14893: LD_EXP 44
14897: PPUSH
14898: LD_INT 235
14900: PPUSH
14901: LD_INT 122
14903: PPUSH
14904: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14908: LD_EXP 44
14912: PPUSH
14913: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14917: LD_EXP 44
14921: PPUSH
14922: LD_VAR 0 4
14926: PPUSH
14927: CALL_OW 180
// end ; if Bierezov then
14931: LD_EXP 45
14935: IFFALSE 14983
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14937: LD_EXP 45
14941: PPUSH
14942: LD_INT 260
14944: PPUSH
14945: LD_INT 120
14947: PPUSH
14948: CALL_OW 111
// if dep then
14952: LD_VAR 0 4
14956: IFFALSE 14974
// AddComEnterUnit ( Bierezov , dep ) else
14958: LD_EXP 45
14962: PPUSH
14963: LD_VAR 0 4
14967: PPUSH
14968: CALL_OW 180
14972: GO 14983
// AddComHold ( Bierezov ) ;
14974: LD_EXP 45
14978: PPUSH
14979: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14983: LD_INT 525
14985: PPUSH
14986: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14990: LD_ADDR_VAR 0 2
14994: PUSH
14995: LD_INT 22
14997: PUSH
14998: LD_INT 4
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 25
15007: PUSH
15008: LD_INT 2
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PPUSH
15019: CALL_OW 69
15023: PUSH
15024: LD_EXP 45
15028: DIFF
15029: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15030: LD_INT 35
15032: PPUSH
15033: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
15037: LD_ADDR_VAR 0 6
15041: PUSH
15042: LD_INT 10
15044: PPUSH
15045: CALL_OW 435
15049: ST_TO_ADDR
// if crates then
15050: LD_VAR 0 6
15054: IFFALSE 15083
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
15056: LD_VAR 0 2
15060: PPUSH
15061: LD_VAR 0 6
15065: PUSH
15066: LD_INT 1
15068: ARRAY
15069: PPUSH
15070: LD_VAR 0 6
15074: PUSH
15075: LD_INT 2
15077: ARRAY
15078: PPUSH
15079: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
15083: LD_VAR 0 4
15087: PPUSH
15088: CALL_OW 274
15092: PPUSH
15093: LD_INT 1
15095: PPUSH
15096: CALL_OW 275
15100: PUSH
15101: LD_INT 40
15103: GREATEREQUAL
15104: IFFALSE 15030
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
15106: LD_ADDR_VAR 0 5
15110: PUSH
15111: LD_INT 4
15113: PUSH
15114: LD_INT 256
15116: PUSH
15117: LD_INT 111
15119: PUSH
15120: LD_INT 2
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 31
15131: PUSH
15132: LD_INT 243
15134: PUSH
15135: LD_INT 112
15137: PUSH
15138: LD_INT 2
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: PUSH
15147: LD_INT 31
15149: PUSH
15150: LD_INT 254
15152: PUSH
15153: LD_INT 114
15155: PUSH
15156: LD_INT 2
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: LIST
15169: ST_TO_ADDR
// for i in blist do
15170: LD_ADDR_VAR 0 1
15174: PUSH
15175: LD_VAR 0 5
15179: PUSH
15180: FOR_IN
15181: IFFALSE 15230
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
15183: LD_VAR 0 2
15187: PPUSH
15188: LD_VAR 0 1
15192: PUSH
15193: LD_INT 1
15195: ARRAY
15196: PPUSH
15197: LD_VAR 0 1
15201: PUSH
15202: LD_INT 2
15204: ARRAY
15205: PPUSH
15206: LD_VAR 0 1
15210: PUSH
15211: LD_INT 3
15213: ARRAY
15214: PPUSH
15215: LD_VAR 0 1
15219: PUSH
15220: LD_INT 4
15222: ARRAY
15223: PPUSH
15224: CALL_OW 205
15228: GO 15180
15230: POP
15231: POP
// repeat wait ( 0 0$01 ) ;
15232: LD_INT 35
15234: PPUSH
15235: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
15239: LD_INT 22
15241: PUSH
15242: LD_INT 4
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PUSH
15249: LD_INT 30
15251: PUSH
15252: LD_INT 4
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: LD_INT 3
15261: PUSH
15262: LD_INT 57
15264: PUSH
15265: EMPTY
15266: LIST
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: LIST
15276: PPUSH
15277: CALL_OW 69
15281: IFFALSE 15232
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15283: LD_VAR 0 3
15287: PPUSH
15288: LD_INT 22
15290: PUSH
15291: LD_INT 4
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 30
15300: PUSH
15301: LD_INT 4
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PPUSH
15312: CALL_OW 69
15316: PUSH
15317: LD_INT 1
15319: ARRAY
15320: PPUSH
15321: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
15325: LD_VAR 0 3
15329: PPUSH
15330: LD_INT 1
15332: PPUSH
15333: CALL_OW 183
// if has_eng > 1 then
15337: LD_VAR 0 2
15341: PUSH
15342: LD_INT 1
15344: GREATER
15345: IFFALSE 15487
// for i = has_eng downto 2 do
15347: LD_ADDR_VAR 0 1
15351: PUSH
15352: DOUBLE
15353: LD_VAR 0 2
15357: INC
15358: ST_TO_ADDR
15359: LD_INT 2
15361: PUSH
15362: FOR_DOWNTO
15363: IFFALSE 15485
// begin if IsInUnit ( has_eng [ i ] ) then
15365: LD_VAR 0 2
15369: PUSH
15370: LD_VAR 0 1
15374: ARRAY
15375: PPUSH
15376: CALL_OW 310
15380: IFFALSE 15397
// ComExitBuilding ( has_eng [ i ] ) ;
15382: LD_VAR 0 2
15386: PUSH
15387: LD_VAR 0 1
15391: ARRAY
15392: PPUSH
15393: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15397: LD_VAR 0 2
15401: PUSH
15402: LD_VAR 0 1
15406: ARRAY
15407: PPUSH
15408: LD_INT 22
15410: PUSH
15411: LD_INT 4
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 30
15420: PUSH
15421: LD_INT 4
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PPUSH
15432: CALL_OW 69
15436: PUSH
15437: LD_INT 1
15439: ARRAY
15440: PPUSH
15441: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
15445: LD_VAR 0 2
15449: PUSH
15450: LD_VAR 0 1
15454: ARRAY
15455: PPUSH
15456: LD_INT 1
15458: PPUSH
15459: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
15463: LD_ADDR_VAR 0 2
15467: PUSH
15468: LD_VAR 0 2
15472: PPUSH
15473: LD_VAR 0 1
15477: PPUSH
15478: CALL_OW 3
15482: ST_TO_ADDR
// end ;
15483: GO 15362
15485: POP
15486: POP
// repeat wait ( 0 0$01 ) ;
15487: LD_INT 35
15489: PPUSH
15490: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
15494: LD_INT 22
15496: PUSH
15497: LD_INT 4
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 30
15506: PUSH
15507: LD_INT 31
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 3
15516: PUSH
15517: LD_INT 57
15519: PUSH
15520: EMPTY
15521: LIST
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PPUSH
15532: CALL_OW 69
15536: PUSH
15537: LD_INT 1
15539: GREATER
15540: IFFALSE 15487
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15542: LD_ADDR_VAR 0 8
15546: PUSH
15547: LD_EXP 6
15551: PPUSH
15552: LD_INT 25
15554: PUSH
15555: LD_INT 1
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PPUSH
15562: CALL_OW 72
15566: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15567: LD_ADDR_VAR 0 1
15571: PUSH
15572: DOUBLE
15573: LD_INT 1
15575: DEC
15576: ST_TO_ADDR
15577: LD_INT 22
15579: PUSH
15580: LD_INT 4
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 30
15589: PUSH
15590: LD_INT 31
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 3
15599: PUSH
15600: LD_INT 57
15602: PUSH
15603: EMPTY
15604: LIST
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: PPUSH
15615: CALL_OW 69
15619: PUSH
15620: FOR_TO
15621: IFFALSE 15705
// begin if not sol [ i ] then
15623: LD_VAR 0 8
15627: PUSH
15628: LD_VAR 0 1
15632: ARRAY
15633: NOT
15634: IFFALSE 15638
// break ;
15636: GO 15705
// ComExitBuilding ( sol [ i ] ) ;
15638: LD_VAR 0 8
15642: PUSH
15643: LD_VAR 0 1
15647: ARRAY
15648: PPUSH
15649: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15653: LD_VAR 0 8
15657: PUSH
15658: LD_VAR 0 1
15662: ARRAY
15663: PPUSH
15664: LD_INT 22
15666: PUSH
15667: LD_INT 4
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 30
15676: PUSH
15677: LD_INT 31
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PPUSH
15688: CALL_OW 69
15692: PUSH
15693: LD_VAR 0 1
15697: ARRAY
15698: PPUSH
15699: CALL_OW 180
// end ;
15703: GO 15620
15705: POP
15706: POP
// if sol > 3 then
15707: LD_VAR 0 8
15711: PUSH
15712: LD_INT 3
15714: GREATER
15715: IFFALSE 15832
// begin ComExitBuilding ( sol [ 3 ] ) ;
15717: LD_VAR 0 8
15721: PUSH
15722: LD_INT 3
15724: ARRAY
15725: PPUSH
15726: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15730: LD_VAR 0 8
15734: PUSH
15735: LD_INT 3
15737: ARRAY
15738: PPUSH
15739: LD_INT 246
15741: PPUSH
15742: LD_INT 94
15744: PPUSH
15745: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15749: LD_VAR 0 8
15753: PUSH
15754: LD_INT 3
15756: ARRAY
15757: PPUSH
15758: LD_INT 175
15760: PPUSH
15761: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15765: LD_VAR 0 8
15769: PUSH
15770: LD_INT 3
15772: ARRAY
15773: PPUSH
15774: LD_INT 224
15776: PPUSH
15777: LD_INT 90
15779: PPUSH
15780: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15784: LD_VAR 0 8
15788: PUSH
15789: LD_INT 3
15791: ARRAY
15792: PPUSH
15793: LD_INT 245
15795: PPUSH
15796: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15800: LD_VAR 0 8
15804: PUSH
15805: LD_INT 3
15807: ARRAY
15808: PPUSH
15809: LD_INT 223
15811: PPUSH
15812: LD_INT 110
15814: PPUSH
15815: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15819: LD_VAR 0 8
15823: PUSH
15824: LD_INT 3
15826: ARRAY
15827: PPUSH
15828: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15832: LD_VAR 0 2
15836: PPUSH
15837: LD_VAR 0 4
15841: PPUSH
15842: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15846: LD_INT 22
15848: PUSH
15849: LD_INT 4
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 30
15858: PUSH
15859: LD_INT 4
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PPUSH
15870: CALL_OW 69
15874: PUSH
15875: LD_INT 1
15877: ARRAY
15878: PPUSH
15879: CALL_OW 313
15883: PUSH
15884: LD_INT 6
15886: LESS
15887: IFFALSE 15951
// begin if IsInUnit ( Cornel ) then
15889: LD_EXP 44
15893: PPUSH
15894: CALL_OW 310
15898: IFFALSE 15909
// ComExitBuilding ( Cornel ) ;
15900: LD_EXP 44
15904: PPUSH
15905: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15909: LD_EXP 44
15913: PPUSH
15914: LD_INT 22
15916: PUSH
15917: LD_INT 4
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 30
15926: PUSH
15927: LD_INT 4
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PPUSH
15938: CALL_OW 69
15942: PUSH
15943: LD_INT 1
15945: ARRAY
15946: PPUSH
15947: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15951: LD_INT 35
15953: PPUSH
15954: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15958: LD_ADDR_VAR 0 3
15962: PUSH
15963: LD_INT 22
15965: PUSH
15966: LD_INT 4
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 21
15975: PUSH
15976: LD_INT 3
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: LD_INT 3
15985: PUSH
15986: LD_INT 24
15988: PUSH
15989: LD_INT 1000
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: LIST
16004: PPUSH
16005: CALL_OW 69
16009: ST_TO_ADDR
// if filter and has_eng then
16010: LD_VAR 0 3
16014: PUSH
16015: LD_VAR 0 2
16019: AND
16020: IFFALSE 16086
// begin for i in has_eng do
16022: LD_ADDR_VAR 0 1
16026: PUSH
16027: LD_VAR 0 2
16031: PUSH
16032: FOR_IN
16033: IFFALSE 16082
// begin if IsInUnit ( i ) then
16035: LD_VAR 0 1
16039: PPUSH
16040: CALL_OW 310
16044: IFFALSE 16055
// ComExitBuilding ( i ) ;
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 122
// Wait ( 3 ) ;
16055: LD_INT 3
16057: PPUSH
16058: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
16062: LD_VAR 0 1
16066: PPUSH
16067: LD_VAR 0 3
16071: PUSH
16072: LD_INT 1
16074: ARRAY
16075: PPUSH
16076: CALL_OW 130
// end ;
16080: GO 16032
16082: POP
16083: POP
// end else
16084: GO 16140
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
16086: LD_VAR 0 2
16090: PUSH
16091: LD_VAR 0 2
16095: PPUSH
16096: LD_INT 56
16098: PUSH
16099: EMPTY
16100: LIST
16101: PPUSH
16102: CALL_OW 72
16106: AND
16107: IFFALSE 16140
// for i in has_eng do
16109: LD_ADDR_VAR 0 1
16113: PUSH
16114: LD_VAR 0 2
16118: PUSH
16119: FOR_IN
16120: IFFALSE 16138
// ComEnterUnit ( i , dep ) ;
16122: LD_VAR 0 1
16126: PPUSH
16127: LD_VAR 0 4
16131: PPUSH
16132: CALL_OW 120
16136: GO 16119
16138: POP
16139: POP
// until cornel_prepared ;
16140: LD_EXP 11
16144: IFFALSE 15951
// end ;
16146: PPOPN 8
16148: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
16149: LD_EXP 11
16153: IFFALSE 16688
16155: GO 16157
16157: DISABLE
16158: LD_INT 0
16160: PPUSH
16161: PPUSH
16162: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
16163: LD_ADDR_VAR 0 2
16167: PUSH
16168: LD_INT 22
16170: PUSH
16171: LD_INT 4
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 30
16180: PUSH
16181: LD_INT 4
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PPUSH
16192: CALL_OW 69
16196: PUSH
16197: LD_INT 1
16199: ARRAY
16200: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
16201: LD_EXP 6
16205: PPUSH
16206: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
16210: LD_EXP 45
16214: PUSH
16215: LD_EXP 45
16219: PPUSH
16220: CALL_OW 310
16224: AND
16225: IFFALSE 16236
// ComExitBuilding ( Bierezov ) ;
16227: LD_EXP 45
16231: PPUSH
16232: CALL_OW 122
// Wait ( 0 0$03 ) ;
16236: LD_INT 105
16238: PPUSH
16239: CALL_OW 67
// for i in cornel_units do
16243: LD_ADDR_VAR 0 1
16247: PUSH
16248: LD_EXP 6
16252: PUSH
16253: FOR_IN
16254: IFFALSE 16330
// begin if GetClass ( i ) in [ 2 , 3 ] then
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL_OW 257
16265: PUSH
16266: LD_INT 2
16268: PUSH
16269: LD_INT 3
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: IN
16276: IFFALSE 16313
// begin ComEnterUnit ( i , arm ) ;
16278: LD_VAR 0 1
16282: PPUSH
16283: LD_VAR 0 2
16287: PPUSH
16288: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
16292: LD_VAR 0 1
16296: PPUSH
16297: LD_INT 1
16299: PPUSH
16300: CALL_OW 183
// AddComExitBuilding ( i ) ;
16304: LD_VAR 0 1
16308: PPUSH
16309: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
16313: LD_VAR 0 1
16317: PPUSH
16318: LD_INT 257
16320: PPUSH
16321: LD_INT 121
16323: PPUSH
16324: CALL_OW 171
// end ;
16328: GO 16253
16330: POP
16331: POP
// Wait ( 1 1$00 ) ;
16332: LD_INT 2100
16334: PPUSH
16335: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
16339: LD_ADDR_VAR 0 3
16343: PUSH
16344: LD_EXP 44
16348: PUSH
16349: LD_EXP 45
16353: ADD
16354: PUSH
16355: LD_EXP 6
16359: ADD
16360: PUSH
16361: LD_EXP 6
16365: PPUSH
16366: LD_INT 21
16368: PUSH
16369: LD_INT 2
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PPUSH
16376: CALL_OW 72
16380: DIFF
16381: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
16382: LD_VAR 0 3
16386: PPUSH
16387: LD_INT 248
16389: PPUSH
16390: LD_INT 85
16392: PPUSH
16393: CALL_OW 111
// AddComHold ( filter ) ;
16397: LD_VAR 0 3
16401: PPUSH
16402: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
16406: LD_INT 35
16408: PPUSH
16409: CALL_OW 67
// until cornel_attack ;
16413: LD_EXP 9
16417: IFFALSE 16406
// ComAgressiveMove ( filter , 209 , 63 ) ;
16419: LD_VAR 0 3
16423: PPUSH
16424: LD_INT 209
16426: PPUSH
16427: LD_INT 63
16429: PPUSH
16430: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16434: LD_EXP 44
16438: PPUSH
16439: LD_INT 208
16441: PPUSH
16442: LD_INT 62
16444: PPUSH
16445: CALL_OW 114
// AddComHold ( Cornel ) ;
16449: LD_EXP 44
16453: PPUSH
16454: CALL_OW 200
// if Bierezov then
16458: LD_EXP 45
16462: IFFALSE 16552
// begin filter := filter diff Bierezov ;
16464: LD_ADDR_VAR 0 3
16468: PUSH
16469: LD_VAR 0 3
16473: PUSH
16474: LD_EXP 45
16478: DIFF
16479: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
16480: LD_EXP 45
16484: PPUSH
16485: LD_INT 6
16487: PPUSH
16488: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
16492: LD_EXP 45
16496: PPUSH
16497: LD_INT 235
16499: PPUSH
16500: LD_INT 60
16502: PPUSH
16503: CALL_OW 111
// AddComHold ( Bierezov ) ;
16507: LD_EXP 45
16511: PPUSH
16512: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16516: LD_EXP 45
16520: PPUSH
16521: LD_INT 350
16523: PPUSH
16524: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16528: LD_EXP 45
16532: PPUSH
16533: LD_INT 198
16535: PPUSH
16536: LD_INT 28
16538: PPUSH
16539: CALL_OW 171
// AddComHold ( Bierezov ) ;
16543: LD_EXP 45
16547: PPUSH
16548: CALL_OW 200
// end ; filter := filter diff Cornel ;
16552: LD_ADDR_VAR 0 3
16556: PUSH
16557: LD_VAR 0 3
16561: PUSH
16562: LD_EXP 44
16566: DIFF
16567: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16568: LD_INT 70
16570: PPUSH
16571: CALL_OW 67
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
16575: LD_EXP 44
16579: PPUSH
16580: LD_INT 208
16582: PPUSH
16583: LD_INT 62
16585: PPUSH
16586: CALL_OW 114
// until not IsInArea ( Cornel , cornelKappaArea ) ;
16590: LD_EXP 44
16594: PPUSH
16595: LD_INT 16
16597: PPUSH
16598: CALL_OW 308
16602: NOT
16603: IFFALSE 16568
// wait ( 0 0$2 ) ;
16605: LD_INT 70
16607: PPUSH
16608: CALL_OW 67
// ComMoveXY ( filter [ 1 ] , 195 , 57 ) ;
16612: LD_VAR 0 3
16616: PUSH
16617: LD_INT 1
16619: ARRAY
16620: PPUSH
16621: LD_INT 195
16623: PPUSH
16624: LD_INT 57
16626: PPUSH
16627: CALL_OW 111
// ComMoveXY ( filter [ 2 ] , 217 , 53 ) ;
16631: LD_VAR 0 3
16635: PUSH
16636: LD_INT 2
16638: ARRAY
16639: PPUSH
16640: LD_INT 217
16642: PPUSH
16643: LD_INT 53
16645: PPUSH
16646: CALL_OW 111
// ComMoveXY ( filter [ 3 ] , 199 , 48 ) ;
16650: LD_VAR 0 3
16654: PUSH
16655: LD_INT 3
16657: ARRAY
16658: PPUSH
16659: LD_INT 199
16661: PPUSH
16662: LD_INT 48
16664: PPUSH
16665: CALL_OW 111
// ComMoveXY ( filter [ 4 ] , 179 , 48 ) ;
16669: LD_VAR 0 3
16673: PUSH
16674: LD_INT 4
16676: ARRAY
16677: PPUSH
16678: LD_INT 179
16680: PPUSH
16681: LD_INT 48
16683: PPUSH
16684: CALL_OW 111
// end ; end_of_file
16688: PPOPN 3
16690: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16691: LD_EXP 53
16695: PUSH
16696: LD_EXP 31
16700: NOT
16701: AND
16702: PUSH
16703: LD_EXP 32
16707: NOT
16708: AND
16709: IFFALSE 17159
16711: GO 16713
16713: DISABLE
16714: LD_INT 0
16716: PPUSH
16717: PPUSH
16718: PPUSH
16719: PPUSH
// begin enable ;
16720: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16721: LD_ADDR_VAR 0 4
16725: PUSH
16726: LD_INT 81
16728: PUSH
16729: LD_INT 3
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PPUSH
16736: CALL_OW 69
16740: ST_TO_ADDR
// for i = 1 to ru_patrol do
16741: LD_ADDR_VAR 0 2
16745: PUSH
16746: DOUBLE
16747: LD_INT 1
16749: DEC
16750: ST_TO_ADDR
16751: LD_EXP 53
16755: PUSH
16756: FOR_TO
16757: IFFALSE 17157
// begin un := ru_patrol [ i ] ;
16759: LD_ADDR_VAR 0 1
16763: PUSH
16764: LD_EXP 53
16768: PUSH
16769: LD_VAR 0 2
16773: ARRAY
16774: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16775: LD_VAR 0 1
16779: PPUSH
16780: LD_INT 13
16782: PPUSH
16783: CALL_OW 308
16787: IFFALSE 16892
// begin if not ru_alert then
16789: LD_EXP 60
16793: NOT
16794: IFFALSE 16804
// ru_alert := true ;
16796: LD_ADDR_EXP 60
16800: PUSH
16801: LD_INT 1
16803: ST_TO_ADDR
// if not See ( 1 , un ) then
16804: LD_INT 1
16806: PPUSH
16807: LD_VAR 0 1
16811: PPUSH
16812: CALL_OW 292
16816: NOT
16817: IFFALSE 16831
// SetLives ( un , 1000 ) ;
16819: LD_VAR 0 1
16823: PPUSH
16824: LD_INT 1000
16826: PPUSH
16827: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16831: LD_ADDR_EXP 53
16835: PUSH
16836: LD_EXP 53
16840: PUSH
16841: LD_VAR 0 1
16845: DIFF
16846: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16847: LD_VAR 0 1
16851: PPUSH
16852: LD_INT 22
16854: PUSH
16855: LD_INT 3
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 30
16864: PUSH
16865: LD_INT 4
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PPUSH
16876: CALL_OW 69
16880: PPUSH
16881: CALL 1007 0 1
16885: PPUSH
16886: CALL_OW 120
// continue ;
16890: GO 16756
// end ; if IsOk ( un ) and not HasTask ( un ) then
16892: LD_VAR 0 1
16896: PPUSH
16897: CALL_OW 302
16901: PUSH
16902: LD_VAR 0 1
16906: PPUSH
16907: CALL_OW 314
16911: NOT
16912: AND
16913: IFFALSE 17006
// begin for j = 1 to ru_firepoints_south [ i ] do
16915: LD_ADDR_VAR 0 3
16919: PUSH
16920: DOUBLE
16921: LD_INT 1
16923: DEC
16924: ST_TO_ADDR
16925: LD_EXP 59
16929: PUSH
16930: LD_VAR 0 2
16934: ARRAY
16935: PUSH
16936: FOR_TO
16937: IFFALSE 17004
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16939: LD_VAR 0 1
16943: PPUSH
16944: LD_EXP 59
16948: PUSH
16949: LD_VAR 0 2
16953: ARRAY
16954: PUSH
16955: LD_VAR 0 3
16959: ARRAY
16960: PUSH
16961: LD_INT 1
16963: ARRAY
16964: PPUSH
16965: LD_EXP 59
16969: PUSH
16970: LD_VAR 0 2
16974: ARRAY
16975: PUSH
16976: LD_VAR 0 3
16980: ARRAY
16981: PUSH
16982: LD_INT 2
16984: ARRAY
16985: PPUSH
16986: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16990: LD_VAR 0 1
16994: PPUSH
16995: LD_INT 70
16997: PPUSH
16998: CALL_OW 202
// end ;
17002: GO 16936
17004: POP
17005: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17006: LD_VAR 0 1
17010: PPUSH
17011: CALL_OW 256
17015: PUSH
17016: LD_INT 700
17018: LESS
17019: PUSH
17020: LD_VAR 0 1
17024: PPUSH
17025: LD_INT 13
17027: PPUSH
17028: CALL_OW 308
17032: NOT
17033: AND
17034: IFFALSE 17086
// begin ComMoveToArea ( un , retreatArea ) ;
17036: LD_VAR 0 1
17040: PPUSH
17041: LD_INT 13
17043: PPUSH
17044: CALL_OW 113
// if not ru_alert_xy then
17048: LD_EXP 61
17052: NOT
17053: IFFALSE 17084
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
17055: LD_ADDR_EXP 61
17059: PUSH
17060: LD_VAR 0 1
17064: PPUSH
17065: CALL_OW 250
17069: PUSH
17070: LD_VAR 0 1
17074: PPUSH
17075: CALL_OW 251
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: ST_TO_ADDR
// end else
17084: GO 17155
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17086: LD_VAR 0 1
17090: PPUSH
17091: LD_VAR 0 4
17095: PPUSH
17096: LD_VAR 0 1
17100: PPUSH
17101: CALL_OW 74
17105: PPUSH
17106: CALL_OW 296
17110: PUSH
17111: LD_INT 9
17113: LESS
17114: PUSH
17115: LD_VAR 0 1
17119: PPUSH
17120: CALL_OW 256
17124: PUSH
17125: LD_INT 500
17127: GREATER
17128: AND
17129: IFFALSE 17155
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17131: LD_VAR 0 1
17135: PPUSH
17136: LD_VAR 0 4
17140: PPUSH
17141: LD_VAR 0 1
17145: PPUSH
17146: CALL_OW 74
17150: PPUSH
17151: CALL_OW 115
// end ;
17155: GO 16756
17157: POP
17158: POP
// end ;
17159: PPOPN 4
17161: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
17162: LD_EXP 60
17166: PUSH
17167: LD_EXP 61
17171: AND
17172: PUSH
17173: LD_EXP 31
17177: NOT
17178: AND
17179: PUSH
17180: LD_EXP 32
17184: NOT
17185: AND
17186: IFFALSE 17396
17188: GO 17190
17190: DISABLE
17191: LD_INT 0
17193: PPUSH
17194: PPUSH
// begin enable ;
17195: ENABLE
// if not ru_vehicles then
17196: LD_EXP 56
17200: NOT
17201: IFFALSE 17205
// exit ;
17203: GO 17396
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17205: LD_ADDR_VAR 0 2
17209: PUSH
17210: LD_INT 81
17212: PUSH
17213: LD_INT 3
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PPUSH
17220: CALL_OW 69
17224: ST_TO_ADDR
// if ru_vehicles then
17225: LD_EXP 56
17229: IFFALSE 17396
// begin for i in ru_vehicles do
17231: LD_ADDR_VAR 0 1
17235: PUSH
17236: LD_EXP 56
17240: PUSH
17241: FOR_IN
17242: IFFALSE 17394
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
17244: LD_VAR 0 1
17248: PPUSH
17249: CALL_OW 302
17253: PUSH
17254: LD_VAR 0 1
17258: PPUSH
17259: LD_VAR 0 2
17263: PPUSH
17264: LD_VAR 0 1
17268: PPUSH
17269: CALL_OW 74
17273: PPUSH
17274: CALL_OW 296
17278: PUSH
17279: LD_INT 9
17281: LESS
17282: AND
17283: IFFALSE 17309
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17285: LD_VAR 0 1
17289: PPUSH
17290: LD_VAR 0 2
17294: PPUSH
17295: LD_VAR 0 1
17299: PPUSH
17300: CALL_OW 74
17304: PPUSH
17305: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
17309: LD_VAR 0 1
17313: PPUSH
17314: CALL_OW 314
17318: NOT
17319: PUSH
17320: LD_VAR 0 1
17324: PPUSH
17325: CALL_OW 302
17329: AND
17330: PUSH
17331: LD_VAR 0 1
17335: PPUSH
17336: LD_EXP 61
17340: PUSH
17341: LD_INT 1
17343: ARRAY
17344: PPUSH
17345: LD_EXP 61
17349: PUSH
17350: LD_INT 2
17352: ARRAY
17353: PPUSH
17354: CALL_OW 297
17358: PUSH
17359: LD_INT 10
17361: GREATER
17362: AND
17363: IFFALSE 17392
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
17365: LD_VAR 0 1
17369: PPUSH
17370: LD_EXP 61
17374: PUSH
17375: LD_INT 1
17377: ARRAY
17378: PPUSH
17379: LD_EXP 61
17383: PUSH
17384: LD_INT 2
17386: ARRAY
17387: PPUSH
17388: CALL_OW 114
// end ;
17392: GO 17241
17394: POP
17395: POP
// end ; end ;
17396: PPOPN 2
17398: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
17399: LD_EXP 61
17403: PUSH
17404: LD_EXP 60
17408: AND
17409: PUSH
17410: LD_INT 3
17412: PPUSH
17413: CALL_OW 463
17417: NOT
17418: AND
17419: PUSH
17420: LD_EXP 31
17424: NOT
17425: AND
17426: PUSH
17427: LD_EXP 32
17431: NOT
17432: AND
17433: IFFALSE 17528
17435: GO 17437
17437: DISABLE
17438: LD_INT 0
17440: PPUSH
// begin enable ;
17441: ENABLE
// ru_alert_xy := false ;
17442: LD_ADDR_EXP 61
17446: PUSH
17447: LD_INT 0
17449: ST_TO_ADDR
// ru_alert := false ;
17450: LD_ADDR_EXP 60
17454: PUSH
17455: LD_INT 0
17457: ST_TO_ADDR
// if ru_vehicles then
17458: LD_EXP 56
17462: IFFALSE 17528
// for i in ru_vehicles do
17464: LD_ADDR_VAR 0 1
17468: PUSH
17469: LD_EXP 56
17473: PUSH
17474: FOR_IN
17475: IFFALSE 17526
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
17477: LD_VAR 0 1
17481: PPUSH
17482: CALL_OW 302
17486: PUSH
17487: LD_VAR 0 1
17491: PPUSH
17492: LD_INT 89
17494: PPUSH
17495: LD_INT 36
17497: PPUSH
17498: CALL_OW 297
17502: PUSH
17503: LD_INT 10
17505: GREATER
17506: AND
17507: IFFALSE 17524
// ComMoveXY ( i , 89 , 36 ) ;
17509: LD_VAR 0 1
17513: PPUSH
17514: LD_INT 89
17516: PPUSH
17517: LD_INT 36
17519: PPUSH
17520: CALL_OW 111
17524: GO 17474
17526: POP
17527: POP
// end ;
17528: PPOPN 1
17530: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
17531: LD_EXP 55
17535: PUSH
17536: LD_EXP 31
17540: NOT
17541: AND
17542: PUSH
17543: LD_EXP 32
17547: NOT
17548: AND
17549: IFFALSE 17833
17551: GO 17553
17553: DISABLE
17554: LD_INT 0
17556: PPUSH
17557: PPUSH
17558: PPUSH
// begin enable ;
17559: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17560: LD_ADDR_VAR 0 3
17564: PUSH
17565: LD_INT 81
17567: PUSH
17568: LD_INT 3
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PPUSH
17575: CALL_OW 69
17579: ST_TO_ADDR
// for i = 1 to ru_forest do
17580: LD_ADDR_VAR 0 1
17584: PUSH
17585: DOUBLE
17586: LD_INT 1
17588: DEC
17589: ST_TO_ADDR
17590: LD_EXP 55
17594: PUSH
17595: FOR_TO
17596: IFFALSE 17831
// begin un := ru_forest [ i ] ;
17598: LD_ADDR_VAR 0 2
17602: PUSH
17603: LD_EXP 55
17607: PUSH
17608: LD_VAR 0 1
17612: ARRAY
17613: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
17614: LD_VAR 0 2
17618: PPUSH
17619: LD_INT 13
17621: PPUSH
17622: CALL_OW 308
17626: IFFALSE 17716
// begin if not See ( 1 , un ) then
17628: LD_INT 1
17630: PPUSH
17631: LD_VAR 0 2
17635: PPUSH
17636: CALL_OW 292
17640: NOT
17641: IFFALSE 17655
// SetLives ( un , 1000 ) ;
17643: LD_VAR 0 2
17647: PPUSH
17648: LD_INT 1000
17650: PPUSH
17651: CALL_OW 234
// ru_forest := ru_forest diff un ;
17655: LD_ADDR_EXP 55
17659: PUSH
17660: LD_EXP 55
17664: PUSH
17665: LD_VAR 0 2
17669: DIFF
17670: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17671: LD_VAR 0 2
17675: PPUSH
17676: LD_INT 22
17678: PUSH
17679: LD_INT 3
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: LD_INT 30
17688: PUSH
17689: LD_INT 4
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PPUSH
17700: CALL_OW 69
17704: PPUSH
17705: CALL 1007 0 1
17709: PPUSH
17710: CALL_OW 120
// continue ;
17714: GO 17595
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17716: LD_VAR 0 2
17720: PPUSH
17721: CALL_OW 256
17725: PUSH
17726: LD_INT 700
17728: LESS
17729: PUSH
17730: LD_VAR 0 2
17734: PPUSH
17735: LD_INT 13
17737: PPUSH
17738: CALL_OW 308
17742: NOT
17743: AND
17744: IFFALSE 17760
// ComMoveToArea ( un , retreatArea ) else
17746: LD_VAR 0 2
17750: PPUSH
17751: LD_INT 13
17753: PPUSH
17754: CALL_OW 113
17758: GO 17829
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17760: LD_VAR 0 2
17764: PPUSH
17765: LD_VAR 0 3
17769: PPUSH
17770: LD_VAR 0 2
17774: PPUSH
17775: CALL_OW 74
17779: PPUSH
17780: CALL_OW 296
17784: PUSH
17785: LD_INT 9
17787: LESS
17788: PUSH
17789: LD_VAR 0 2
17793: PPUSH
17794: CALL_OW 256
17798: PUSH
17799: LD_INT 500
17801: GREATER
17802: AND
17803: IFFALSE 17829
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17805: LD_VAR 0 2
17809: PPUSH
17810: LD_VAR 0 3
17814: PPUSH
17815: LD_VAR 0 2
17819: PPUSH
17820: CALL_OW 74
17824: PPUSH
17825: CALL_OW 115
// end ;
17829: GO 17595
17831: POP
17832: POP
// end ;
17833: PPOPN 3
17835: END
// every 0 0$10 trigger not send_attack_on_cornel or IsDead ( Cornel ) do var i , filter ;
17836: LD_EXP 32
17840: NOT
17841: PUSH
17842: LD_EXP 44
17846: PPUSH
17847: CALL_OW 301
17851: OR
17852: IFFALSE 18013
17854: GO 17856
17856: DISABLE
17857: LD_INT 0
17859: PPUSH
17860: PPUSH
// begin enable ;
17861: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_inarea , ignoreBuildingsArea ] ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 990 ] ] ] ) ;
17862: LD_ADDR_VAR 0 2
17866: PUSH
17867: LD_INT 22
17869: PUSH
17870: LD_INT 3
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 3
17879: PUSH
17880: LD_INT 95
17882: PUSH
17883: LD_INT 18
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 21
17896: PUSH
17897: LD_INT 3
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 3
17906: PUSH
17907: LD_INT 24
17909: PUSH
17910: LD_INT 990
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: PPUSH
17927: CALL_OW 69
17931: ST_TO_ADDR
// if filter then
17932: LD_VAR 0 2
17936: IFFALSE 18013
// for i in filter do
17938: LD_ADDR_VAR 0 1
17942: PUSH
17943: LD_VAR 0 2
17947: PUSH
17948: FOR_IN
17949: IFFALSE 18011
// if GetY ( i ) > 70 then
17951: LD_VAR 0 1
17955: PPUSH
17956: CALL_OW 251
17960: PUSH
17961: LD_INT 70
17963: GREATER
17964: IFFALSE 17970
// continue else
17966: GO 17948
17968: GO 18009
// begin ru_alert := true ;
17970: LD_ADDR_EXP 60
17974: PUSH
17975: LD_INT 1
17977: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17978: LD_ADDR_EXP 61
17982: PUSH
17983: LD_VAR 0 1
17987: PPUSH
17988: CALL_OW 250
17992: PUSH
17993: LD_VAR 0 1
17997: PPUSH
17998: CALL_OW 251
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: ST_TO_ADDR
// break ;
18007: GO 18011
// end ;
18009: GO 17948
18011: POP
18012: POP
// end ;
18013: PPOPN 2
18015: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
18016: LD_EXP 31
18020: IFFALSE 18169
18022: GO 18024
18024: DISABLE
18025: LD_INT 0
18027: PPUSH
18028: PPUSH
18029: PPUSH
18030: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
18031: LD_ADDR_VAR 0 4
18035: PUSH
18036: LD_EXP 56
18040: PUSH
18041: LD_EXP 55
18045: ADD
18046: PUSH
18047: LD_EXP 53
18051: ADD
18052: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
18053: LD_ADDR_VAR 0 3
18057: PUSH
18058: LD_INT 3
18060: PPUSH
18061: LD_INT 81
18063: PUSH
18064: LD_INT 3
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PPUSH
18071: CALL_OW 70
18075: ST_TO_ADDR
// if filter and enemy then
18076: LD_VAR 0 4
18080: PUSH
18081: LD_VAR 0 3
18085: AND
18086: IFFALSE 18169
// repeat wait ( 0 0$01 ) ;
18088: LD_INT 35
18090: PPUSH
18091: CALL_OW 67
// for i in filter do
18095: LD_ADDR_VAR 0 1
18099: PUSH
18100: LD_VAR 0 4
18104: PUSH
18105: FOR_IN
18106: IFFALSE 18134
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
18108: LD_VAR 0 1
18112: PPUSH
18113: LD_VAR 0 3
18117: PPUSH
18118: LD_VAR 0 1
18122: PPUSH
18123: CALL_OW 74
18127: PPUSH
18128: CALL_OW 115
// end ;
18132: GO 18105
18134: POP
18135: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
18136: LD_INT 3
18138: PPUSH
18139: LD_INT 81
18141: PUSH
18142: LD_INT 3
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PPUSH
18149: CALL_OW 70
18153: PUSH
18154: LD_INT 0
18156: EQUAL
18157: PUSH
18158: LD_VAR 0 4
18162: PUSH
18163: LD_INT 0
18165: EQUAL
18166: OR
18167: IFFALSE 18088
// end ;
18169: PPOPN 4
18171: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
18172: LD_EXP 26
18176: PUSH
18177: LD_INT 22
18179: PUSH
18180: LD_INT 4
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 30
18189: PUSH
18190: LD_INT 4
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 3
18199: PUSH
18200: LD_INT 57
18202: PUSH
18203: EMPTY
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: LIST
18214: PPUSH
18215: CALL_OW 69
18219: AND
18220: IFFALSE 18269
18222: GO 18224
18224: DISABLE
18225: LD_INT 0
18227: PPUSH
// begin if not ru_cornel_attack then
18228: LD_EXP 58
18232: NOT
18233: IFFALSE 18237
// exit ;
18235: GO 18269
// for i in ru_cornel_attack do
18237: LD_ADDR_VAR 0 1
18241: PUSH
18242: LD_EXP 58
18246: PUSH
18247: FOR_IN
18248: IFFALSE 18267
// ComAgressiveMove ( i , 258 , 119 ) ;
18250: LD_VAR 0 1
18254: PPUSH
18255: LD_INT 258
18257: PPUSH
18258: LD_INT 119
18260: PPUSH
18261: CALL_OW 114
18265: GO 18247
18267: POP
18268: POP
// end ; end_of_file
18269: PPOPN 1
18271: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
18272: LD_EXP 5
18276: PUSH
18277: LD_EXP 9
18281: NOT
18282: AND
18283: PUSH
18284: LD_EXP 20
18288: AND
18289: IFFALSE 18401
18291: GO 18293
18293: DISABLE
18294: LD_INT 0
18296: PPUSH
// begin enable ;
18297: ENABLE
// crates_counter := crates_counter - 50 ;
18298: LD_ADDR_EXP 20
18302: PUSH
18303: LD_EXP 20
18307: PUSH
18308: LD_INT 50
18310: MINUS
18311: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
18312: LD_INT 8
18314: PPUSH
18315: LD_INT 2
18317: PPUSH
18318: LD_INT 5
18320: PPUSH
18321: CALL_OW 12
18325: PPUSH
18326: LD_INT 1
18328: PPUSH
18329: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
18333: LD_INT 1785
18335: PPUSH
18336: LD_INT 2345
18338: PPUSH
18339: CALL_OW 12
18343: PPUSH
18344: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
18348: LD_ADDR_VAR 0 1
18352: PUSH
18353: LD_INT 1
18355: PPUSH
18356: LD_OWVAR 67
18360: PUSH
18361: LD_INT 2
18363: PLUS
18364: PPUSH
18365: CALL_OW 12
18369: ST_TO_ADDR
// if r < 3 then
18370: LD_VAR 0 1
18374: PUSH
18375: LD_INT 3
18377: LESS
18378: IFFALSE 18401
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
18380: LD_INT 4
18382: PPUSH
18383: LD_INT 1
18385: PPUSH
18386: LD_INT 5
18388: PPUSH
18389: CALL_OW 12
18393: PPUSH
18394: LD_INT 1
18396: PPUSH
18397: CALL_OW 55
// end ;
18401: PPOPN 1
18403: END
// every 0 0$01 trigger cornel_active do
18404: LD_EXP 8
18408: IFFALSE 18497
18410: GO 18412
18412: DISABLE
// begin Wait ( 0 0$03 ) ;
18413: LD_INT 105
18415: PPUSH
18416: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18420: LD_INT 2
18422: PPUSH
18423: LD_INT 5
18425: PPUSH
18426: CALL_OW 12
18430: PPUSH
18431: LD_INT 10
18433: PPUSH
18434: LD_INT 1
18436: PPUSH
18437: CALL_OW 55
// Wait ( 0 0$13 ) ;
18441: LD_INT 455
18443: PPUSH
18444: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18448: LD_INT 2
18450: PPUSH
18451: LD_INT 5
18453: PPUSH
18454: CALL_OW 12
18458: PPUSH
18459: LD_INT 10
18461: PPUSH
18462: LD_INT 1
18464: PPUSH
18465: CALL_OW 55
// Wait ( 0 0$16 ) ;
18469: LD_INT 560
18471: PPUSH
18472: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
18476: LD_INT 2
18478: PPUSH
18479: LD_INT 5
18481: PPUSH
18482: CALL_OW 12
18486: PPUSH
18487: LD_INT 10
18489: PPUSH
18490: LD_INT 1
18492: PPUSH
18493: CALL_OW 55
// end ; end_of_file
18497: END
// every 0 0$01 trigger cornel_prepared do
18498: LD_EXP 11
18502: IFFALSE 18561
18504: GO 18506
18506: DISABLE
// begin enable ;
18507: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
18508: LD_ADDR_OWVAR 47
18512: PUSH
18513: LD_STRING #Am03-1
18515: PUSH
18516: LD_EXP 10
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
18525: LD_ADDR_EXP 10
18529: PUSH
18530: LD_EXP 10
18534: PPUSH
18535: LD_STRING -
18537: PPUSH
18538: CALL 1077 0 2
18542: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
18543: LD_EXP 10
18547: PUSH
18548: LD_INT 0
18550: EQUAL
18551: IFFALSE 18561
// begin Display_Strings := [ ] ;
18553: LD_ADDR_OWVAR 47
18557: PUSH
18558: EMPTY
18559: ST_TO_ADDR
// disable ;
18560: DISABLE
// end ; end ;
18561: END
// every 0 0$01 trigger debug and debug_strings do
18562: LD_EXP 1
18566: PUSH
18567: LD_OWVAR 48
18571: AND
18572: IFFALSE 18588
18574: GO 18576
18576: DISABLE
// begin enable ;
18577: ENABLE
// Display_Strings := debug_strings ;
18578: LD_ADDR_OWVAR 47
18582: PUSH
18583: LD_OWVAR 48
18587: ST_TO_ADDR
// end ; end_of_file
18588: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
18589: LD_VAR 0 1
18593: PPUSH
18594: LD_VAR 0 2
18598: PPUSH
18599: CALL 35189 0 2
// if GetSide ( veh ) = 1 and not solar_builded then
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 255
18612: PUSH
18613: LD_INT 1
18615: EQUAL
18616: PUSH
18617: LD_EXP 14
18621: NOT
18622: AND
18623: IFFALSE 18633
// solar_builded := true ;
18625: LD_ADDR_EXP 14
18629: PUSH
18630: LD_INT 1
18632: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
18633: LD_VAR 0 1
18637: PPUSH
18638: CALL_OW 255
18642: PUSH
18643: LD_INT 1
18645: EQUAL
18646: PUSH
18647: LD_EXP 29
18651: AND
18652: IFFALSE 18689
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
18654: LD_ADDR_EXP 29
18658: PUSH
18659: LD_EXP 29
18663: PUSH
18664: LD_INT 1750
18666: PUSH
18667: LD_INT 1400
18669: PUSH
18670: LD_INT 1225
18672: PUSH
18673: LD_INT 1050
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: PUSH
18682: LD_OWVAR 67
18686: ARRAY
18687: PLUS
18688: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
18689: LD_VAR 0 1
18693: PPUSH
18694: CALL_OW 255
18698: PUSH
18699: LD_INT 3
18701: EQUAL
18702: IFFALSE 18720
// ru_vehicles := ru_vehicles ^ veh ;
18704: LD_ADDR_EXP 56
18708: PUSH
18709: LD_EXP 56
18713: PUSH
18714: LD_VAR 0 1
18718: ADD
18719: ST_TO_ADDR
// end ;
18720: PPOPN 2
18722: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18723: LD_VAR 0 1
18727: PPUSH
18728: CALL 35069 0 1
// if un in ru_patrol then
18732: LD_VAR 0 1
18736: PUSH
18737: LD_EXP 53
18741: IN
18742: IFFALSE 18760
// ru_patrol := ru_patrol diff un ;
18744: LD_ADDR_EXP 53
18748: PUSH
18749: LD_EXP 53
18753: PUSH
18754: LD_VAR 0 1
18758: DIFF
18759: ST_TO_ADDR
// if un in ru_forest then
18760: LD_VAR 0 1
18764: PUSH
18765: LD_EXP 55
18769: IN
18770: IFFALSE 18788
// ru_forest := ru_forest diff un ;
18772: LD_ADDR_EXP 55
18776: PUSH
18777: LD_EXP 55
18781: PUSH
18782: LD_VAR 0 1
18786: DIFF
18787: ST_TO_ADDR
// if un in ru_vehicles then
18788: LD_VAR 0 1
18792: PUSH
18793: LD_EXP 56
18797: IN
18798: IFFALSE 18904
// begin ru_vehicles := ru_vehicles diff un ;
18800: LD_ADDR_EXP 56
18804: PUSH
18805: LD_EXP 56
18809: PUSH
18810: LD_VAR 0 1
18814: DIFF
18815: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18816: LD_ADDR_EXP 57
18820: PUSH
18821: LD_EXP 57
18825: PUSH
18826: LD_VAR 0 1
18830: PPUSH
18831: CALL_OW 265
18835: PUSH
18836: LD_VAR 0 1
18840: PPUSH
18841: CALL_OW 262
18845: PUSH
18846: LD_VAR 0 1
18850: PPUSH
18851: CALL_OW 263
18855: PUSH
18856: LD_VAR 0 1
18860: PPUSH
18861: CALL_OW 264
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: ADD
18872: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18873: LD_ADDR_EXP 13
18877: PUSH
18878: LD_EXP 13
18882: PUSH
18883: LD_INT 1
18885: PLUS
18886: ST_TO_ADDR
// if ach_counter = 10 then
18887: LD_EXP 13
18891: PUSH
18892: LD_INT 10
18894: EQUAL
18895: IFFALSE 18904
// SetAchievement ( ACH_FAUST ) ;
18897: LD_STRING ACH_FAUST
18899: PPUSH
18900: CALL_OW 543
// end ; if un = Pokryshkin then
18904: LD_VAR 0 1
18908: PUSH
18909: LD_EXP 52
18913: EQUAL
18914: IFFALSE 18923
// SetAchievement ( ACH_POKR ) ;
18916: LD_STRING ACH_POKR
18918: PPUSH
18919: CALL_OW 543
// if un = JMM then
18923: LD_VAR 0 1
18927: PUSH
18928: LD_EXP 37
18932: EQUAL
18933: IFFALSE 18942
// YouLost ( 0 ) ;
18935: LD_STRING 0
18937: PPUSH
18938: CALL_OW 104
// if un = us_dep_west then
18942: LD_VAR 0 1
18946: PUSH
18947: LD_INT 1
18949: EQUAL
18950: IFFALSE 18959
// YouLost ( 2 ) ;
18952: LD_STRING 2
18954: PPUSH
18955: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18959: LD_VAR 0 1
18963: PPUSH
18964: CALL_OW 255
18968: PUSH
18969: LD_INT 8
18971: EQUAL
18972: PUSH
18973: LD_EXP 5
18977: NOT
18978: AND
18979: IFFALSE 18988
// YouLost ( 4 ) ;
18981: LD_STRING 4
18983: PPUSH
18984: CALL_OW 104
// if un in jmm_units then
18988: LD_VAR 0 1
18992: PUSH
18993: LD_EXP 4
18997: IN
18998: IFFALSE 19014
// lose_counter := lose_counter + 1 ;
19000: LD_ADDR_EXP 34
19004: PUSH
19005: LD_EXP 34
19009: PUSH
19010: LD_INT 1
19012: PLUS
19013: ST_TO_ADDR
// end ;
19014: PPOPN 1
19016: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
19017: LD_INT 0
19019: PPUSH
19020: PPUSH
// begin if GetSide ( driver ) = 3 then
19021: LD_VAR 0 1
19025: PPUSH
19026: CALL_OW 255
19030: PUSH
19031: LD_INT 3
19033: EQUAL
19034: IFFALSE 19112
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
19036: LD_ADDR_VAR 0 6
19040: PUSH
19041: LD_INT 22
19043: PUSH
19044: LD_INT 3
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 30
19053: PUSH
19054: LD_INT 3
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PPUSH
19065: CALL_OW 69
19069: PPUSH
19070: CALL 1007 0 1
19074: ST_TO_ADDR
// if place then
19075: LD_VAR 0 6
19079: IFFALSE 19097
// ComEnterUnit ( driver , place ) else
19081: LD_VAR 0 1
19085: PPUSH
19086: LD_VAR 0 6
19090: PPUSH
19091: CALL_OW 120
19095: GO 19112
// ComMoveXY ( driver , 70 , 22 ) ;
19097: LD_VAR 0 1
19101: PPUSH
19102: LD_INT 70
19104: PPUSH
19105: LD_INT 22
19107: PPUSH
19108: CALL_OW 111
// end ; end ;
19112: PPOPN 6
19114: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
19115: LD_VAR 0 1
19119: PUSH
19120: LD_INT 1
19122: EQUAL
19123: PUSH
19124: LD_VAR 0 2
19128: PUSH
19129: LD_INT 4
19131: EQUAL
19132: PUSH
19133: LD_VAR 0 2
19137: PUSH
19138: LD_INT 8
19140: EQUAL
19141: PUSH
19142: LD_EXP 5
19146: NOT
19147: AND
19148: OR
19149: AND
19150: IFFALSE 19159
// YouLost ( 5 ) ;
19152: LD_STRING 5
19154: PPUSH
19155: CALL_OW 104
// end ;
19159: PPOPN 2
19161: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
19162: LD_EXP 36
19166: PUSH
19167: LD_INT 22
19169: PUSH
19170: LD_INT 1
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 21
19179: PUSH
19180: LD_INT 1
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PPUSH
19191: CALL_OW 69
19195: PUSH
19196: LD_INT 22
19198: PUSH
19199: LD_INT 8
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 21
19208: PUSH
19209: LD_INT 1
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PPUSH
19220: CALL_OW 69
19224: ADD
19225: PLUS
19226: PUSH
19227: LD_INT 5
19229: LESS
19230: IFFALSE 19242
19232: GO 19234
19234: DISABLE
// YouLost ( 1 ) ;
19235: LD_STRING 1
19237: PPUSH
19238: CALL_OW 104
19242: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
19243: LD_INT 1
19245: PPUSH
19246: CALL_OW 255
19250: PUSH
19251: LD_INT 3
19253: EQUAL
19254: IFFALSE 19266
19256: GO 19258
19258: DISABLE
// YouLost ( 3 ) ; end_of_file end_of_file
19259: LD_STRING 3
19261: PPUSH
19262: CALL_OW 104
19266: END
// export globalGameSaveCounter ; every 0 0$1 do
19267: GO 19269
19269: DISABLE
// begin enable ;
19270: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19271: LD_STRING updateTimer(
19273: PUSH
19274: LD_OWVAR 1
19278: STR
19279: PUSH
19280: LD_STRING );
19282: STR
19283: PPUSH
19284: CALL_OW 559
// end ;
19288: END
// every 0 0$1 do
19289: GO 19291
19291: DISABLE
// begin globalGameSaveCounter := 0 ;
19292: LD_ADDR_EXP 62
19296: PUSH
19297: LD_INT 0
19299: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19300: LD_STRING setGameSaveCounter(0)
19302: PPUSH
19303: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19307: LD_STRING initStreamRollete();
19309: PPUSH
19310: CALL_OW 559
// InitStreamMode ;
19314: CALL 20640 0 0
// DefineStreamItems ( false ) ;
19318: LD_INT 0
19320: PPUSH
19321: CALL 21104 0 1
// end ;
19325: END
// export function SOS_MapStart ( ) ; begin
19326: LD_INT 0
19328: PPUSH
// if streamModeActive then
19329: LD_EXP 63
19333: IFFALSE 19342
// DefineStreamItems ( true ) ;
19335: LD_INT 1
19337: PPUSH
19338: CALL 21104 0 1
// UpdateLuaVariables ( ) ;
19342: CALL 19359 0 0
// UpdateFactoryWaypoints ( ) ;
19346: CALL 33973 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19350: CALL 34230 0 0
// end ;
19354: LD_VAR 0 1
19358: RET
// function UpdateLuaVariables ( ) ; begin
19359: LD_INT 0
19361: PPUSH
// if globalGameSaveCounter then
19362: LD_EXP 62
19366: IFFALSE 19400
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19368: LD_ADDR_EXP 62
19372: PUSH
19373: LD_EXP 62
19377: PPUSH
19378: CALL 79026 0 1
19382: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19383: LD_STRING setGameSaveCounter(
19385: PUSH
19386: LD_EXP 62
19390: STR
19391: PUSH
19392: LD_STRING )
19394: STR
19395: PPUSH
19396: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19400: LD_STRING setGameDifficulty(
19402: PUSH
19403: LD_OWVAR 67
19407: STR
19408: PUSH
19409: LD_STRING )
19411: STR
19412: PPUSH
19413: CALL_OW 559
// end ;
19417: LD_VAR 0 1
19421: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19422: LD_INT 0
19424: PPUSH
// if p2 = stream_mode then
19425: LD_VAR 0 2
19429: PUSH
19430: LD_INT 100
19432: EQUAL
19433: IFFALSE 20436
// begin if not StreamModeActive then
19435: LD_EXP 63
19439: NOT
19440: IFFALSE 19450
// StreamModeActive := true ;
19442: LD_ADDR_EXP 63
19446: PUSH
19447: LD_INT 1
19449: ST_TO_ADDR
// if p3 = 0 then
19450: LD_VAR 0 3
19454: PUSH
19455: LD_INT 0
19457: EQUAL
19458: IFFALSE 19464
// InitStreamMode ;
19460: CALL 20640 0 0
// if p3 = 1 then
19464: LD_VAR 0 3
19468: PUSH
19469: LD_INT 1
19471: EQUAL
19472: IFFALSE 19482
// sRocket := true ;
19474: LD_ADDR_EXP 68
19478: PUSH
19479: LD_INT 1
19481: ST_TO_ADDR
// if p3 = 2 then
19482: LD_VAR 0 3
19486: PUSH
19487: LD_INT 2
19489: EQUAL
19490: IFFALSE 19500
// sSpeed := true ;
19492: LD_ADDR_EXP 67
19496: PUSH
19497: LD_INT 1
19499: ST_TO_ADDR
// if p3 = 3 then
19500: LD_VAR 0 3
19504: PUSH
19505: LD_INT 3
19507: EQUAL
19508: IFFALSE 19518
// sEngine := true ;
19510: LD_ADDR_EXP 69
19514: PUSH
19515: LD_INT 1
19517: ST_TO_ADDR
// if p3 = 4 then
19518: LD_VAR 0 3
19522: PUSH
19523: LD_INT 4
19525: EQUAL
19526: IFFALSE 19536
// sSpec := true ;
19528: LD_ADDR_EXP 66
19532: PUSH
19533: LD_INT 1
19535: ST_TO_ADDR
// if p3 = 5 then
19536: LD_VAR 0 3
19540: PUSH
19541: LD_INT 5
19543: EQUAL
19544: IFFALSE 19554
// sLevel := true ;
19546: LD_ADDR_EXP 70
19550: PUSH
19551: LD_INT 1
19553: ST_TO_ADDR
// if p3 = 6 then
19554: LD_VAR 0 3
19558: PUSH
19559: LD_INT 6
19561: EQUAL
19562: IFFALSE 19572
// sArmoury := true ;
19564: LD_ADDR_EXP 71
19568: PUSH
19569: LD_INT 1
19571: ST_TO_ADDR
// if p3 = 7 then
19572: LD_VAR 0 3
19576: PUSH
19577: LD_INT 7
19579: EQUAL
19580: IFFALSE 19590
// sRadar := true ;
19582: LD_ADDR_EXP 72
19586: PUSH
19587: LD_INT 1
19589: ST_TO_ADDR
// if p3 = 8 then
19590: LD_VAR 0 3
19594: PUSH
19595: LD_INT 8
19597: EQUAL
19598: IFFALSE 19608
// sBunker := true ;
19600: LD_ADDR_EXP 73
19604: PUSH
19605: LD_INT 1
19607: ST_TO_ADDR
// if p3 = 9 then
19608: LD_VAR 0 3
19612: PUSH
19613: LD_INT 9
19615: EQUAL
19616: IFFALSE 19626
// sHack := true ;
19618: LD_ADDR_EXP 74
19622: PUSH
19623: LD_INT 1
19625: ST_TO_ADDR
// if p3 = 10 then
19626: LD_VAR 0 3
19630: PUSH
19631: LD_INT 10
19633: EQUAL
19634: IFFALSE 19644
// sFire := true ;
19636: LD_ADDR_EXP 75
19640: PUSH
19641: LD_INT 1
19643: ST_TO_ADDR
// if p3 = 11 then
19644: LD_VAR 0 3
19648: PUSH
19649: LD_INT 11
19651: EQUAL
19652: IFFALSE 19662
// sRefresh := true ;
19654: LD_ADDR_EXP 76
19658: PUSH
19659: LD_INT 1
19661: ST_TO_ADDR
// if p3 = 12 then
19662: LD_VAR 0 3
19666: PUSH
19667: LD_INT 12
19669: EQUAL
19670: IFFALSE 19680
// sExp := true ;
19672: LD_ADDR_EXP 77
19676: PUSH
19677: LD_INT 1
19679: ST_TO_ADDR
// if p3 = 13 then
19680: LD_VAR 0 3
19684: PUSH
19685: LD_INT 13
19687: EQUAL
19688: IFFALSE 19698
// sDepot := true ;
19690: LD_ADDR_EXP 78
19694: PUSH
19695: LD_INT 1
19697: ST_TO_ADDR
// if p3 = 14 then
19698: LD_VAR 0 3
19702: PUSH
19703: LD_INT 14
19705: EQUAL
19706: IFFALSE 19716
// sFlag := true ;
19708: LD_ADDR_EXP 79
19712: PUSH
19713: LD_INT 1
19715: ST_TO_ADDR
// if p3 = 15 then
19716: LD_VAR 0 3
19720: PUSH
19721: LD_INT 15
19723: EQUAL
19724: IFFALSE 19734
// sKamikadze := true ;
19726: LD_ADDR_EXP 87
19730: PUSH
19731: LD_INT 1
19733: ST_TO_ADDR
// if p3 = 16 then
19734: LD_VAR 0 3
19738: PUSH
19739: LD_INT 16
19741: EQUAL
19742: IFFALSE 19752
// sTroll := true ;
19744: LD_ADDR_EXP 88
19748: PUSH
19749: LD_INT 1
19751: ST_TO_ADDR
// if p3 = 17 then
19752: LD_VAR 0 3
19756: PUSH
19757: LD_INT 17
19759: EQUAL
19760: IFFALSE 19770
// sSlow := true ;
19762: LD_ADDR_EXP 89
19766: PUSH
19767: LD_INT 1
19769: ST_TO_ADDR
// if p3 = 18 then
19770: LD_VAR 0 3
19774: PUSH
19775: LD_INT 18
19777: EQUAL
19778: IFFALSE 19788
// sLack := true ;
19780: LD_ADDR_EXP 90
19784: PUSH
19785: LD_INT 1
19787: ST_TO_ADDR
// if p3 = 19 then
19788: LD_VAR 0 3
19792: PUSH
19793: LD_INT 19
19795: EQUAL
19796: IFFALSE 19806
// sTank := true ;
19798: LD_ADDR_EXP 92
19802: PUSH
19803: LD_INT 1
19805: ST_TO_ADDR
// if p3 = 20 then
19806: LD_VAR 0 3
19810: PUSH
19811: LD_INT 20
19813: EQUAL
19814: IFFALSE 19824
// sRemote := true ;
19816: LD_ADDR_EXP 93
19820: PUSH
19821: LD_INT 1
19823: ST_TO_ADDR
// if p3 = 21 then
19824: LD_VAR 0 3
19828: PUSH
19829: LD_INT 21
19831: EQUAL
19832: IFFALSE 19842
// sPowell := true ;
19834: LD_ADDR_EXP 94
19838: PUSH
19839: LD_INT 1
19841: ST_TO_ADDR
// if p3 = 22 then
19842: LD_VAR 0 3
19846: PUSH
19847: LD_INT 22
19849: EQUAL
19850: IFFALSE 19860
// sTeleport := true ;
19852: LD_ADDR_EXP 97
19856: PUSH
19857: LD_INT 1
19859: ST_TO_ADDR
// if p3 = 23 then
19860: LD_VAR 0 3
19864: PUSH
19865: LD_INT 23
19867: EQUAL
19868: IFFALSE 19878
// sOilTower := true ;
19870: LD_ADDR_EXP 99
19874: PUSH
19875: LD_INT 1
19877: ST_TO_ADDR
// if p3 = 24 then
19878: LD_VAR 0 3
19882: PUSH
19883: LD_INT 24
19885: EQUAL
19886: IFFALSE 19896
// sShovel := true ;
19888: LD_ADDR_EXP 100
19892: PUSH
19893: LD_INT 1
19895: ST_TO_ADDR
// if p3 = 25 then
19896: LD_VAR 0 3
19900: PUSH
19901: LD_INT 25
19903: EQUAL
19904: IFFALSE 19914
// sSheik := true ;
19906: LD_ADDR_EXP 101
19910: PUSH
19911: LD_INT 1
19913: ST_TO_ADDR
// if p3 = 26 then
19914: LD_VAR 0 3
19918: PUSH
19919: LD_INT 26
19921: EQUAL
19922: IFFALSE 19932
// sEarthquake := true ;
19924: LD_ADDR_EXP 103
19928: PUSH
19929: LD_INT 1
19931: ST_TO_ADDR
// if p3 = 27 then
19932: LD_VAR 0 3
19936: PUSH
19937: LD_INT 27
19939: EQUAL
19940: IFFALSE 19950
// sAI := true ;
19942: LD_ADDR_EXP 104
19946: PUSH
19947: LD_INT 1
19949: ST_TO_ADDR
// if p3 = 28 then
19950: LD_VAR 0 3
19954: PUSH
19955: LD_INT 28
19957: EQUAL
19958: IFFALSE 19968
// sCargo := true ;
19960: LD_ADDR_EXP 107
19964: PUSH
19965: LD_INT 1
19967: ST_TO_ADDR
// if p3 = 29 then
19968: LD_VAR 0 3
19972: PUSH
19973: LD_INT 29
19975: EQUAL
19976: IFFALSE 19986
// sDLaser := true ;
19978: LD_ADDR_EXP 108
19982: PUSH
19983: LD_INT 1
19985: ST_TO_ADDR
// if p3 = 30 then
19986: LD_VAR 0 3
19990: PUSH
19991: LD_INT 30
19993: EQUAL
19994: IFFALSE 20004
// sExchange := true ;
19996: LD_ADDR_EXP 109
20000: PUSH
20001: LD_INT 1
20003: ST_TO_ADDR
// if p3 = 31 then
20004: LD_VAR 0 3
20008: PUSH
20009: LD_INT 31
20011: EQUAL
20012: IFFALSE 20022
// sFac := true ;
20014: LD_ADDR_EXP 110
20018: PUSH
20019: LD_INT 1
20021: ST_TO_ADDR
// if p3 = 32 then
20022: LD_VAR 0 3
20026: PUSH
20027: LD_INT 32
20029: EQUAL
20030: IFFALSE 20040
// sPower := true ;
20032: LD_ADDR_EXP 111
20036: PUSH
20037: LD_INT 1
20039: ST_TO_ADDR
// if p3 = 33 then
20040: LD_VAR 0 3
20044: PUSH
20045: LD_INT 33
20047: EQUAL
20048: IFFALSE 20058
// sRandom := true ;
20050: LD_ADDR_EXP 112
20054: PUSH
20055: LD_INT 1
20057: ST_TO_ADDR
// if p3 = 34 then
20058: LD_VAR 0 3
20062: PUSH
20063: LD_INT 34
20065: EQUAL
20066: IFFALSE 20076
// sShield := true ;
20068: LD_ADDR_EXP 113
20072: PUSH
20073: LD_INT 1
20075: ST_TO_ADDR
// if p3 = 35 then
20076: LD_VAR 0 3
20080: PUSH
20081: LD_INT 35
20083: EQUAL
20084: IFFALSE 20094
// sTime := true ;
20086: LD_ADDR_EXP 114
20090: PUSH
20091: LD_INT 1
20093: ST_TO_ADDR
// if p3 = 36 then
20094: LD_VAR 0 3
20098: PUSH
20099: LD_INT 36
20101: EQUAL
20102: IFFALSE 20112
// sTools := true ;
20104: LD_ADDR_EXP 115
20108: PUSH
20109: LD_INT 1
20111: ST_TO_ADDR
// if p3 = 101 then
20112: LD_VAR 0 3
20116: PUSH
20117: LD_INT 101
20119: EQUAL
20120: IFFALSE 20130
// sSold := true ;
20122: LD_ADDR_EXP 80
20126: PUSH
20127: LD_INT 1
20129: ST_TO_ADDR
// if p3 = 102 then
20130: LD_VAR 0 3
20134: PUSH
20135: LD_INT 102
20137: EQUAL
20138: IFFALSE 20148
// sDiff := true ;
20140: LD_ADDR_EXP 81
20144: PUSH
20145: LD_INT 1
20147: ST_TO_ADDR
// if p3 = 103 then
20148: LD_VAR 0 3
20152: PUSH
20153: LD_INT 103
20155: EQUAL
20156: IFFALSE 20166
// sFog := true ;
20158: LD_ADDR_EXP 84
20162: PUSH
20163: LD_INT 1
20165: ST_TO_ADDR
// if p3 = 104 then
20166: LD_VAR 0 3
20170: PUSH
20171: LD_INT 104
20173: EQUAL
20174: IFFALSE 20184
// sReset := true ;
20176: LD_ADDR_EXP 85
20180: PUSH
20181: LD_INT 1
20183: ST_TO_ADDR
// if p3 = 105 then
20184: LD_VAR 0 3
20188: PUSH
20189: LD_INT 105
20191: EQUAL
20192: IFFALSE 20202
// sSun := true ;
20194: LD_ADDR_EXP 86
20198: PUSH
20199: LD_INT 1
20201: ST_TO_ADDR
// if p3 = 106 then
20202: LD_VAR 0 3
20206: PUSH
20207: LD_INT 106
20209: EQUAL
20210: IFFALSE 20220
// sTiger := true ;
20212: LD_ADDR_EXP 82
20216: PUSH
20217: LD_INT 1
20219: ST_TO_ADDR
// if p3 = 107 then
20220: LD_VAR 0 3
20224: PUSH
20225: LD_INT 107
20227: EQUAL
20228: IFFALSE 20238
// sBomb := true ;
20230: LD_ADDR_EXP 83
20234: PUSH
20235: LD_INT 1
20237: ST_TO_ADDR
// if p3 = 108 then
20238: LD_VAR 0 3
20242: PUSH
20243: LD_INT 108
20245: EQUAL
20246: IFFALSE 20256
// sWound := true ;
20248: LD_ADDR_EXP 91
20252: PUSH
20253: LD_INT 1
20255: ST_TO_ADDR
// if p3 = 109 then
20256: LD_VAR 0 3
20260: PUSH
20261: LD_INT 109
20263: EQUAL
20264: IFFALSE 20274
// sBetray := true ;
20266: LD_ADDR_EXP 95
20270: PUSH
20271: LD_INT 1
20273: ST_TO_ADDR
// if p3 = 110 then
20274: LD_VAR 0 3
20278: PUSH
20279: LD_INT 110
20281: EQUAL
20282: IFFALSE 20292
// sContamin := true ;
20284: LD_ADDR_EXP 96
20288: PUSH
20289: LD_INT 1
20291: ST_TO_ADDR
// if p3 = 111 then
20292: LD_VAR 0 3
20296: PUSH
20297: LD_INT 111
20299: EQUAL
20300: IFFALSE 20310
// sOil := true ;
20302: LD_ADDR_EXP 98
20306: PUSH
20307: LD_INT 1
20309: ST_TO_ADDR
// if p3 = 112 then
20310: LD_VAR 0 3
20314: PUSH
20315: LD_INT 112
20317: EQUAL
20318: IFFALSE 20328
// sStu := true ;
20320: LD_ADDR_EXP 102
20324: PUSH
20325: LD_INT 1
20327: ST_TO_ADDR
// if p3 = 113 then
20328: LD_VAR 0 3
20332: PUSH
20333: LD_INT 113
20335: EQUAL
20336: IFFALSE 20346
// sBazooka := true ;
20338: LD_ADDR_EXP 105
20342: PUSH
20343: LD_INT 1
20345: ST_TO_ADDR
// if p3 = 114 then
20346: LD_VAR 0 3
20350: PUSH
20351: LD_INT 114
20353: EQUAL
20354: IFFALSE 20364
// sMortar := true ;
20356: LD_ADDR_EXP 106
20360: PUSH
20361: LD_INT 1
20363: ST_TO_ADDR
// if p3 = 115 then
20364: LD_VAR 0 3
20368: PUSH
20369: LD_INT 115
20371: EQUAL
20372: IFFALSE 20382
// sRanger := true ;
20374: LD_ADDR_EXP 116
20378: PUSH
20379: LD_INT 1
20381: ST_TO_ADDR
// if p3 = 116 then
20382: LD_VAR 0 3
20386: PUSH
20387: LD_INT 116
20389: EQUAL
20390: IFFALSE 20400
// sComputer := true ;
20392: LD_ADDR_EXP 117
20396: PUSH
20397: LD_INT 1
20399: ST_TO_ADDR
// if p3 = 117 then
20400: LD_VAR 0 3
20404: PUSH
20405: LD_INT 117
20407: EQUAL
20408: IFFALSE 20418
// s30 := true ;
20410: LD_ADDR_EXP 118
20414: PUSH
20415: LD_INT 1
20417: ST_TO_ADDR
// if p3 = 118 then
20418: LD_VAR 0 3
20422: PUSH
20423: LD_INT 118
20425: EQUAL
20426: IFFALSE 20436
// s60 := true ;
20428: LD_ADDR_EXP 119
20432: PUSH
20433: LD_INT 1
20435: ST_TO_ADDR
// end ; if p2 = hack_mode then
20436: LD_VAR 0 2
20440: PUSH
20441: LD_INT 101
20443: EQUAL
20444: IFFALSE 20572
// begin case p3 of 1 :
20446: LD_VAR 0 3
20450: PUSH
20451: LD_INT 1
20453: DOUBLE
20454: EQUAL
20455: IFTRUE 20459
20457: GO 20466
20459: POP
// hHackUnlimitedResources ; 2 :
20460: CALL 32719 0 0
20464: GO 20572
20466: LD_INT 2
20468: DOUBLE
20469: EQUAL
20470: IFTRUE 20474
20472: GO 20481
20474: POP
// hHackSetLevel10 ; 3 :
20475: CALL 32852 0 0
20479: GO 20572
20481: LD_INT 3
20483: DOUBLE
20484: EQUAL
20485: IFTRUE 20489
20487: GO 20496
20489: POP
// hHackSetLevel10YourUnits ; 4 :
20490: CALL 32937 0 0
20494: GO 20572
20496: LD_INT 4
20498: DOUBLE
20499: EQUAL
20500: IFTRUE 20504
20502: GO 20511
20504: POP
// hHackInvincible ; 5 :
20505: CALL 33385 0 0
20509: GO 20572
20511: LD_INT 5
20513: DOUBLE
20514: EQUAL
20515: IFTRUE 20519
20517: GO 20526
20519: POP
// hHackInvisible ; 6 :
20520: CALL 33496 0 0
20524: GO 20572
20526: LD_INT 6
20528: DOUBLE
20529: EQUAL
20530: IFTRUE 20534
20532: GO 20541
20534: POP
// hHackChangeYourSide ; 7 :
20535: CALL 33553 0 0
20539: GO 20572
20541: LD_INT 7
20543: DOUBLE
20544: EQUAL
20545: IFTRUE 20549
20547: GO 20556
20549: POP
// hHackChangeUnitSide ; 8 :
20550: CALL 33595 0 0
20554: GO 20572
20556: LD_INT 8
20558: DOUBLE
20559: EQUAL
20560: IFTRUE 20564
20562: GO 20571
20564: POP
// hHackFog ; end ;
20565: CALL 33696 0 0
20569: GO 20572
20571: POP
// end ; if p2 = game_save_mode then
20572: LD_VAR 0 2
20576: PUSH
20577: LD_INT 102
20579: EQUAL
20580: IFFALSE 20635
// begin if p3 = 1 then
20582: LD_VAR 0 3
20586: PUSH
20587: LD_INT 1
20589: EQUAL
20590: IFFALSE 20602
// globalGameSaveCounter := p4 ;
20592: LD_ADDR_EXP 62
20596: PUSH
20597: LD_VAR 0 4
20601: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20602: LD_VAR 0 3
20606: PUSH
20607: LD_INT 2
20609: EQUAL
20610: PUSH
20611: LD_EXP 62
20615: AND
20616: IFFALSE 20635
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20618: LD_STRING setGameSaveCounter(
20620: PUSH
20621: LD_EXP 62
20625: STR
20626: PUSH
20627: LD_STRING )
20629: STR
20630: PPUSH
20631: CALL_OW 559
// end ; end ;
20635: LD_VAR 0 7
20639: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20640: LD_INT 0
20642: PPUSH
// streamModeActive := false ;
20643: LD_ADDR_EXP 63
20647: PUSH
20648: LD_INT 0
20650: ST_TO_ADDR
// normalCounter := 36 ;
20651: LD_ADDR_EXP 64
20655: PUSH
20656: LD_INT 36
20658: ST_TO_ADDR
// hardcoreCounter := 18 ;
20659: LD_ADDR_EXP 65
20663: PUSH
20664: LD_INT 18
20666: ST_TO_ADDR
// sRocket := false ;
20667: LD_ADDR_EXP 68
20671: PUSH
20672: LD_INT 0
20674: ST_TO_ADDR
// sSpeed := false ;
20675: LD_ADDR_EXP 67
20679: PUSH
20680: LD_INT 0
20682: ST_TO_ADDR
// sEngine := false ;
20683: LD_ADDR_EXP 69
20687: PUSH
20688: LD_INT 0
20690: ST_TO_ADDR
// sSpec := false ;
20691: LD_ADDR_EXP 66
20695: PUSH
20696: LD_INT 0
20698: ST_TO_ADDR
// sLevel := false ;
20699: LD_ADDR_EXP 70
20703: PUSH
20704: LD_INT 0
20706: ST_TO_ADDR
// sArmoury := false ;
20707: LD_ADDR_EXP 71
20711: PUSH
20712: LD_INT 0
20714: ST_TO_ADDR
// sRadar := false ;
20715: LD_ADDR_EXP 72
20719: PUSH
20720: LD_INT 0
20722: ST_TO_ADDR
// sBunker := false ;
20723: LD_ADDR_EXP 73
20727: PUSH
20728: LD_INT 0
20730: ST_TO_ADDR
// sHack := false ;
20731: LD_ADDR_EXP 74
20735: PUSH
20736: LD_INT 0
20738: ST_TO_ADDR
// sFire := false ;
20739: LD_ADDR_EXP 75
20743: PUSH
20744: LD_INT 0
20746: ST_TO_ADDR
// sRefresh := false ;
20747: LD_ADDR_EXP 76
20751: PUSH
20752: LD_INT 0
20754: ST_TO_ADDR
// sExp := false ;
20755: LD_ADDR_EXP 77
20759: PUSH
20760: LD_INT 0
20762: ST_TO_ADDR
// sDepot := false ;
20763: LD_ADDR_EXP 78
20767: PUSH
20768: LD_INT 0
20770: ST_TO_ADDR
// sFlag := false ;
20771: LD_ADDR_EXP 79
20775: PUSH
20776: LD_INT 0
20778: ST_TO_ADDR
// sKamikadze := false ;
20779: LD_ADDR_EXP 87
20783: PUSH
20784: LD_INT 0
20786: ST_TO_ADDR
// sTroll := false ;
20787: LD_ADDR_EXP 88
20791: PUSH
20792: LD_INT 0
20794: ST_TO_ADDR
// sSlow := false ;
20795: LD_ADDR_EXP 89
20799: PUSH
20800: LD_INT 0
20802: ST_TO_ADDR
// sLack := false ;
20803: LD_ADDR_EXP 90
20807: PUSH
20808: LD_INT 0
20810: ST_TO_ADDR
// sTank := false ;
20811: LD_ADDR_EXP 92
20815: PUSH
20816: LD_INT 0
20818: ST_TO_ADDR
// sRemote := false ;
20819: LD_ADDR_EXP 93
20823: PUSH
20824: LD_INT 0
20826: ST_TO_ADDR
// sPowell := false ;
20827: LD_ADDR_EXP 94
20831: PUSH
20832: LD_INT 0
20834: ST_TO_ADDR
// sTeleport := false ;
20835: LD_ADDR_EXP 97
20839: PUSH
20840: LD_INT 0
20842: ST_TO_ADDR
// sOilTower := false ;
20843: LD_ADDR_EXP 99
20847: PUSH
20848: LD_INT 0
20850: ST_TO_ADDR
// sShovel := false ;
20851: LD_ADDR_EXP 100
20855: PUSH
20856: LD_INT 0
20858: ST_TO_ADDR
// sSheik := false ;
20859: LD_ADDR_EXP 101
20863: PUSH
20864: LD_INT 0
20866: ST_TO_ADDR
// sEarthquake := false ;
20867: LD_ADDR_EXP 103
20871: PUSH
20872: LD_INT 0
20874: ST_TO_ADDR
// sAI := false ;
20875: LD_ADDR_EXP 104
20879: PUSH
20880: LD_INT 0
20882: ST_TO_ADDR
// sCargo := false ;
20883: LD_ADDR_EXP 107
20887: PUSH
20888: LD_INT 0
20890: ST_TO_ADDR
// sDLaser := false ;
20891: LD_ADDR_EXP 108
20895: PUSH
20896: LD_INT 0
20898: ST_TO_ADDR
// sExchange := false ;
20899: LD_ADDR_EXP 109
20903: PUSH
20904: LD_INT 0
20906: ST_TO_ADDR
// sFac := false ;
20907: LD_ADDR_EXP 110
20911: PUSH
20912: LD_INT 0
20914: ST_TO_ADDR
// sPower := false ;
20915: LD_ADDR_EXP 111
20919: PUSH
20920: LD_INT 0
20922: ST_TO_ADDR
// sRandom := false ;
20923: LD_ADDR_EXP 112
20927: PUSH
20928: LD_INT 0
20930: ST_TO_ADDR
// sShield := false ;
20931: LD_ADDR_EXP 113
20935: PUSH
20936: LD_INT 0
20938: ST_TO_ADDR
// sTime := false ;
20939: LD_ADDR_EXP 114
20943: PUSH
20944: LD_INT 0
20946: ST_TO_ADDR
// sTools := false ;
20947: LD_ADDR_EXP 115
20951: PUSH
20952: LD_INT 0
20954: ST_TO_ADDR
// sSold := false ;
20955: LD_ADDR_EXP 80
20959: PUSH
20960: LD_INT 0
20962: ST_TO_ADDR
// sDiff := false ;
20963: LD_ADDR_EXP 81
20967: PUSH
20968: LD_INT 0
20970: ST_TO_ADDR
// sFog := false ;
20971: LD_ADDR_EXP 84
20975: PUSH
20976: LD_INT 0
20978: ST_TO_ADDR
// sReset := false ;
20979: LD_ADDR_EXP 85
20983: PUSH
20984: LD_INT 0
20986: ST_TO_ADDR
// sSun := false ;
20987: LD_ADDR_EXP 86
20991: PUSH
20992: LD_INT 0
20994: ST_TO_ADDR
// sTiger := false ;
20995: LD_ADDR_EXP 82
20999: PUSH
21000: LD_INT 0
21002: ST_TO_ADDR
// sBomb := false ;
21003: LD_ADDR_EXP 83
21007: PUSH
21008: LD_INT 0
21010: ST_TO_ADDR
// sWound := false ;
21011: LD_ADDR_EXP 91
21015: PUSH
21016: LD_INT 0
21018: ST_TO_ADDR
// sBetray := false ;
21019: LD_ADDR_EXP 95
21023: PUSH
21024: LD_INT 0
21026: ST_TO_ADDR
// sContamin := false ;
21027: LD_ADDR_EXP 96
21031: PUSH
21032: LD_INT 0
21034: ST_TO_ADDR
// sOil := false ;
21035: LD_ADDR_EXP 98
21039: PUSH
21040: LD_INT 0
21042: ST_TO_ADDR
// sStu := false ;
21043: LD_ADDR_EXP 102
21047: PUSH
21048: LD_INT 0
21050: ST_TO_ADDR
// sBazooka := false ;
21051: LD_ADDR_EXP 105
21055: PUSH
21056: LD_INT 0
21058: ST_TO_ADDR
// sMortar := false ;
21059: LD_ADDR_EXP 106
21063: PUSH
21064: LD_INT 0
21066: ST_TO_ADDR
// sRanger := false ;
21067: LD_ADDR_EXP 116
21071: PUSH
21072: LD_INT 0
21074: ST_TO_ADDR
// sComputer := false ;
21075: LD_ADDR_EXP 117
21079: PUSH
21080: LD_INT 0
21082: ST_TO_ADDR
// s30 := false ;
21083: LD_ADDR_EXP 118
21087: PUSH
21088: LD_INT 0
21090: ST_TO_ADDR
// s60 := false ;
21091: LD_ADDR_EXP 119
21095: PUSH
21096: LD_INT 0
21098: ST_TO_ADDR
// end ;
21099: LD_VAR 0 1
21103: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21104: LD_INT 0
21106: PPUSH
21107: PPUSH
21108: PPUSH
21109: PPUSH
21110: PPUSH
21111: PPUSH
21112: PPUSH
// result := [ ] ;
21113: LD_ADDR_VAR 0 2
21117: PUSH
21118: EMPTY
21119: ST_TO_ADDR
// if campaign_id = 1 then
21120: LD_OWVAR 69
21124: PUSH
21125: LD_INT 1
21127: EQUAL
21128: IFFALSE 24294
// begin case mission_number of 1 :
21130: LD_OWVAR 70
21134: PUSH
21135: LD_INT 1
21137: DOUBLE
21138: EQUAL
21139: IFTRUE 21143
21141: GO 21219
21143: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21144: LD_ADDR_VAR 0 2
21148: PUSH
21149: LD_INT 2
21151: PUSH
21152: LD_INT 4
21154: PUSH
21155: LD_INT 11
21157: PUSH
21158: LD_INT 12
21160: PUSH
21161: LD_INT 15
21163: PUSH
21164: LD_INT 16
21166: PUSH
21167: LD_INT 22
21169: PUSH
21170: LD_INT 23
21172: PUSH
21173: LD_INT 26
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 101
21189: PUSH
21190: LD_INT 102
21192: PUSH
21193: LD_INT 106
21195: PUSH
21196: LD_INT 116
21198: PUSH
21199: LD_INT 117
21201: PUSH
21202: LD_INT 118
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: ST_TO_ADDR
21217: GO 24292
21219: LD_INT 2
21221: DOUBLE
21222: EQUAL
21223: IFTRUE 21227
21225: GO 21311
21227: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21228: LD_ADDR_VAR 0 2
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: LD_INT 4
21238: PUSH
21239: LD_INT 11
21241: PUSH
21242: LD_INT 12
21244: PUSH
21245: LD_INT 15
21247: PUSH
21248: LD_INT 16
21250: PUSH
21251: LD_INT 22
21253: PUSH
21254: LD_INT 23
21256: PUSH
21257: LD_INT 26
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 101
21273: PUSH
21274: LD_INT 102
21276: PUSH
21277: LD_INT 105
21279: PUSH
21280: LD_INT 106
21282: PUSH
21283: LD_INT 108
21285: PUSH
21286: LD_INT 116
21288: PUSH
21289: LD_INT 117
21291: PUSH
21292: LD_INT 118
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: ST_TO_ADDR
21309: GO 24292
21311: LD_INT 3
21313: DOUBLE
21314: EQUAL
21315: IFTRUE 21319
21317: GO 21407
21319: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21320: LD_ADDR_VAR 0 2
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 4
21330: PUSH
21331: LD_INT 5
21333: PUSH
21334: LD_INT 11
21336: PUSH
21337: LD_INT 12
21339: PUSH
21340: LD_INT 15
21342: PUSH
21343: LD_INT 16
21345: PUSH
21346: LD_INT 22
21348: PUSH
21349: LD_INT 26
21351: PUSH
21352: LD_INT 36
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 101
21369: PUSH
21370: LD_INT 102
21372: PUSH
21373: LD_INT 105
21375: PUSH
21376: LD_INT 106
21378: PUSH
21379: LD_INT 108
21381: PUSH
21382: LD_INT 116
21384: PUSH
21385: LD_INT 117
21387: PUSH
21388: LD_INT 118
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: ST_TO_ADDR
21405: GO 24292
21407: LD_INT 4
21409: DOUBLE
21410: EQUAL
21411: IFTRUE 21415
21413: GO 21511
21415: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21416: LD_ADDR_VAR 0 2
21420: PUSH
21421: LD_INT 2
21423: PUSH
21424: LD_INT 4
21426: PUSH
21427: LD_INT 5
21429: PUSH
21430: LD_INT 8
21432: PUSH
21433: LD_INT 11
21435: PUSH
21436: LD_INT 12
21438: PUSH
21439: LD_INT 15
21441: PUSH
21442: LD_INT 16
21444: PUSH
21445: LD_INT 22
21447: PUSH
21448: LD_INT 23
21450: PUSH
21451: LD_INT 26
21453: PUSH
21454: LD_INT 36
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 101
21473: PUSH
21474: LD_INT 102
21476: PUSH
21477: LD_INT 105
21479: PUSH
21480: LD_INT 106
21482: PUSH
21483: LD_INT 108
21485: PUSH
21486: LD_INT 116
21488: PUSH
21489: LD_INT 117
21491: PUSH
21492: LD_INT 118
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: ST_TO_ADDR
21509: GO 24292
21511: LD_INT 5
21513: DOUBLE
21514: EQUAL
21515: IFTRUE 21519
21517: GO 21631
21519: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21520: LD_ADDR_VAR 0 2
21524: PUSH
21525: LD_INT 2
21527: PUSH
21528: LD_INT 4
21530: PUSH
21531: LD_INT 5
21533: PUSH
21534: LD_INT 6
21536: PUSH
21537: LD_INT 8
21539: PUSH
21540: LD_INT 11
21542: PUSH
21543: LD_INT 12
21545: PUSH
21546: LD_INT 15
21548: PUSH
21549: LD_INT 16
21551: PUSH
21552: LD_INT 22
21554: PUSH
21555: LD_INT 23
21557: PUSH
21558: LD_INT 25
21560: PUSH
21561: LD_INT 26
21563: PUSH
21564: LD_INT 36
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 101
21585: PUSH
21586: LD_INT 102
21588: PUSH
21589: LD_INT 105
21591: PUSH
21592: LD_INT 106
21594: PUSH
21595: LD_INT 108
21597: PUSH
21598: LD_INT 109
21600: PUSH
21601: LD_INT 112
21603: PUSH
21604: LD_INT 116
21606: PUSH
21607: LD_INT 117
21609: PUSH
21610: LD_INT 118
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: ST_TO_ADDR
21629: GO 24292
21631: LD_INT 6
21633: DOUBLE
21634: EQUAL
21635: IFTRUE 21639
21637: GO 21771
21639: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21640: LD_ADDR_VAR 0 2
21644: PUSH
21645: LD_INT 2
21647: PUSH
21648: LD_INT 4
21650: PUSH
21651: LD_INT 5
21653: PUSH
21654: LD_INT 6
21656: PUSH
21657: LD_INT 8
21659: PUSH
21660: LD_INT 11
21662: PUSH
21663: LD_INT 12
21665: PUSH
21666: LD_INT 15
21668: PUSH
21669: LD_INT 16
21671: PUSH
21672: LD_INT 20
21674: PUSH
21675: LD_INT 21
21677: PUSH
21678: LD_INT 22
21680: PUSH
21681: LD_INT 23
21683: PUSH
21684: LD_INT 25
21686: PUSH
21687: LD_INT 26
21689: PUSH
21690: LD_INT 30
21692: PUSH
21693: LD_INT 31
21695: PUSH
21696: LD_INT 32
21698: PUSH
21699: LD_INT 36
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 101
21725: PUSH
21726: LD_INT 102
21728: PUSH
21729: LD_INT 105
21731: PUSH
21732: LD_INT 106
21734: PUSH
21735: LD_INT 108
21737: PUSH
21738: LD_INT 109
21740: PUSH
21741: LD_INT 112
21743: PUSH
21744: LD_INT 116
21746: PUSH
21747: LD_INT 117
21749: PUSH
21750: LD_INT 118
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: ST_TO_ADDR
21769: GO 24292
21771: LD_INT 7
21773: DOUBLE
21774: EQUAL
21775: IFTRUE 21779
21777: GO 21891
21779: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21780: LD_ADDR_VAR 0 2
21784: PUSH
21785: LD_INT 2
21787: PUSH
21788: LD_INT 4
21790: PUSH
21791: LD_INT 5
21793: PUSH
21794: LD_INT 7
21796: PUSH
21797: LD_INT 11
21799: PUSH
21800: LD_INT 12
21802: PUSH
21803: LD_INT 15
21805: PUSH
21806: LD_INT 16
21808: PUSH
21809: LD_INT 20
21811: PUSH
21812: LD_INT 21
21814: PUSH
21815: LD_INT 22
21817: PUSH
21818: LD_INT 23
21820: PUSH
21821: LD_INT 25
21823: PUSH
21824: LD_INT 26
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 101
21845: PUSH
21846: LD_INT 102
21848: PUSH
21849: LD_INT 103
21851: PUSH
21852: LD_INT 105
21854: PUSH
21855: LD_INT 106
21857: PUSH
21858: LD_INT 108
21860: PUSH
21861: LD_INT 112
21863: PUSH
21864: LD_INT 116
21866: PUSH
21867: LD_INT 117
21869: PUSH
21870: LD_INT 118
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: ST_TO_ADDR
21889: GO 24292
21891: LD_INT 8
21893: DOUBLE
21894: EQUAL
21895: IFTRUE 21899
21897: GO 22039
21899: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21900: LD_ADDR_VAR 0 2
21904: PUSH
21905: LD_INT 2
21907: PUSH
21908: LD_INT 4
21910: PUSH
21911: LD_INT 5
21913: PUSH
21914: LD_INT 6
21916: PUSH
21917: LD_INT 7
21919: PUSH
21920: LD_INT 8
21922: PUSH
21923: LD_INT 11
21925: PUSH
21926: LD_INT 12
21928: PUSH
21929: LD_INT 15
21931: PUSH
21932: LD_INT 16
21934: PUSH
21935: LD_INT 20
21937: PUSH
21938: LD_INT 21
21940: PUSH
21941: LD_INT 22
21943: PUSH
21944: LD_INT 23
21946: PUSH
21947: LD_INT 25
21949: PUSH
21950: LD_INT 26
21952: PUSH
21953: LD_INT 30
21955: PUSH
21956: LD_INT 31
21958: PUSH
21959: LD_INT 32
21961: PUSH
21962: LD_INT 36
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 101
21989: PUSH
21990: LD_INT 102
21992: PUSH
21993: LD_INT 103
21995: PUSH
21996: LD_INT 105
21998: PUSH
21999: LD_INT 106
22001: PUSH
22002: LD_INT 108
22004: PUSH
22005: LD_INT 109
22007: PUSH
22008: LD_INT 112
22010: PUSH
22011: LD_INT 116
22013: PUSH
22014: LD_INT 117
22016: PUSH
22017: LD_INT 118
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: ST_TO_ADDR
22037: GO 24292
22039: LD_INT 9
22041: DOUBLE
22042: EQUAL
22043: IFTRUE 22047
22045: GO 22195
22047: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22048: LD_ADDR_VAR 0 2
22052: PUSH
22053: LD_INT 2
22055: PUSH
22056: LD_INT 4
22058: PUSH
22059: LD_INT 5
22061: PUSH
22062: LD_INT 6
22064: PUSH
22065: LD_INT 7
22067: PUSH
22068: LD_INT 8
22070: PUSH
22071: LD_INT 11
22073: PUSH
22074: LD_INT 12
22076: PUSH
22077: LD_INT 15
22079: PUSH
22080: LD_INT 16
22082: PUSH
22083: LD_INT 20
22085: PUSH
22086: LD_INT 21
22088: PUSH
22089: LD_INT 22
22091: PUSH
22092: LD_INT 23
22094: PUSH
22095: LD_INT 25
22097: PUSH
22098: LD_INT 26
22100: PUSH
22101: LD_INT 28
22103: PUSH
22104: LD_INT 30
22106: PUSH
22107: LD_INT 31
22109: PUSH
22110: LD_INT 32
22112: PUSH
22113: LD_INT 36
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 101
22141: PUSH
22142: LD_INT 102
22144: PUSH
22145: LD_INT 103
22147: PUSH
22148: LD_INT 105
22150: PUSH
22151: LD_INT 106
22153: PUSH
22154: LD_INT 108
22156: PUSH
22157: LD_INT 109
22159: PUSH
22160: LD_INT 112
22162: PUSH
22163: LD_INT 114
22165: PUSH
22166: LD_INT 116
22168: PUSH
22169: LD_INT 117
22171: PUSH
22172: LD_INT 118
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: ST_TO_ADDR
22193: GO 24292
22195: LD_INT 10
22197: DOUBLE
22198: EQUAL
22199: IFTRUE 22203
22201: GO 22399
22203: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22204: LD_ADDR_VAR 0 2
22208: PUSH
22209: LD_INT 2
22211: PUSH
22212: LD_INT 4
22214: PUSH
22215: LD_INT 5
22217: PUSH
22218: LD_INT 6
22220: PUSH
22221: LD_INT 7
22223: PUSH
22224: LD_INT 8
22226: PUSH
22227: LD_INT 9
22229: PUSH
22230: LD_INT 10
22232: PUSH
22233: LD_INT 11
22235: PUSH
22236: LD_INT 12
22238: PUSH
22239: LD_INT 13
22241: PUSH
22242: LD_INT 14
22244: PUSH
22245: LD_INT 15
22247: PUSH
22248: LD_INT 16
22250: PUSH
22251: LD_INT 17
22253: PUSH
22254: LD_INT 18
22256: PUSH
22257: LD_INT 19
22259: PUSH
22260: LD_INT 20
22262: PUSH
22263: LD_INT 21
22265: PUSH
22266: LD_INT 22
22268: PUSH
22269: LD_INT 23
22271: PUSH
22272: LD_INT 24
22274: PUSH
22275: LD_INT 25
22277: PUSH
22278: LD_INT 26
22280: PUSH
22281: LD_INT 28
22283: PUSH
22284: LD_INT 30
22286: PUSH
22287: LD_INT 31
22289: PUSH
22290: LD_INT 32
22292: PUSH
22293: LD_INT 36
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 101
22329: PUSH
22330: LD_INT 102
22332: PUSH
22333: LD_INT 103
22335: PUSH
22336: LD_INT 104
22338: PUSH
22339: LD_INT 105
22341: PUSH
22342: LD_INT 106
22344: PUSH
22345: LD_INT 107
22347: PUSH
22348: LD_INT 108
22350: PUSH
22351: LD_INT 109
22353: PUSH
22354: LD_INT 110
22356: PUSH
22357: LD_INT 111
22359: PUSH
22360: LD_INT 112
22362: PUSH
22363: LD_INT 114
22365: PUSH
22366: LD_INT 116
22368: PUSH
22369: LD_INT 117
22371: PUSH
22372: LD_INT 118
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: ST_TO_ADDR
22397: GO 24292
22399: LD_INT 11
22401: DOUBLE
22402: EQUAL
22403: IFTRUE 22407
22405: GO 22611
22407: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22408: LD_ADDR_VAR 0 2
22412: PUSH
22413: LD_INT 2
22415: PUSH
22416: LD_INT 3
22418: PUSH
22419: LD_INT 4
22421: PUSH
22422: LD_INT 5
22424: PUSH
22425: LD_INT 6
22427: PUSH
22428: LD_INT 7
22430: PUSH
22431: LD_INT 8
22433: PUSH
22434: LD_INT 9
22436: PUSH
22437: LD_INT 10
22439: PUSH
22440: LD_INT 11
22442: PUSH
22443: LD_INT 12
22445: PUSH
22446: LD_INT 13
22448: PUSH
22449: LD_INT 14
22451: PUSH
22452: LD_INT 15
22454: PUSH
22455: LD_INT 16
22457: PUSH
22458: LD_INT 17
22460: PUSH
22461: LD_INT 18
22463: PUSH
22464: LD_INT 19
22466: PUSH
22467: LD_INT 20
22469: PUSH
22470: LD_INT 21
22472: PUSH
22473: LD_INT 22
22475: PUSH
22476: LD_INT 23
22478: PUSH
22479: LD_INT 24
22481: PUSH
22482: LD_INT 25
22484: PUSH
22485: LD_INT 26
22487: PUSH
22488: LD_INT 28
22490: PUSH
22491: LD_INT 30
22493: PUSH
22494: LD_INT 31
22496: PUSH
22497: LD_INT 32
22499: PUSH
22500: LD_INT 34
22502: PUSH
22503: LD_INT 36
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 101
22541: PUSH
22542: LD_INT 102
22544: PUSH
22545: LD_INT 103
22547: PUSH
22548: LD_INT 104
22550: PUSH
22551: LD_INT 105
22553: PUSH
22554: LD_INT 106
22556: PUSH
22557: LD_INT 107
22559: PUSH
22560: LD_INT 108
22562: PUSH
22563: LD_INT 109
22565: PUSH
22566: LD_INT 110
22568: PUSH
22569: LD_INT 111
22571: PUSH
22572: LD_INT 112
22574: PUSH
22575: LD_INT 114
22577: PUSH
22578: LD_INT 116
22580: PUSH
22581: LD_INT 117
22583: PUSH
22584: LD_INT 118
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: ST_TO_ADDR
22609: GO 24292
22611: LD_INT 12
22613: DOUBLE
22614: EQUAL
22615: IFTRUE 22619
22617: GO 22839
22619: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22620: LD_ADDR_VAR 0 2
22624: PUSH
22625: LD_INT 1
22627: PUSH
22628: LD_INT 2
22630: PUSH
22631: LD_INT 3
22633: PUSH
22634: LD_INT 4
22636: PUSH
22637: LD_INT 5
22639: PUSH
22640: LD_INT 6
22642: PUSH
22643: LD_INT 7
22645: PUSH
22646: LD_INT 8
22648: PUSH
22649: LD_INT 9
22651: PUSH
22652: LD_INT 10
22654: PUSH
22655: LD_INT 11
22657: PUSH
22658: LD_INT 12
22660: PUSH
22661: LD_INT 13
22663: PUSH
22664: LD_INT 14
22666: PUSH
22667: LD_INT 15
22669: PUSH
22670: LD_INT 16
22672: PUSH
22673: LD_INT 17
22675: PUSH
22676: LD_INT 18
22678: PUSH
22679: LD_INT 19
22681: PUSH
22682: LD_INT 20
22684: PUSH
22685: LD_INT 21
22687: PUSH
22688: LD_INT 22
22690: PUSH
22691: LD_INT 23
22693: PUSH
22694: LD_INT 24
22696: PUSH
22697: LD_INT 25
22699: PUSH
22700: LD_INT 26
22702: PUSH
22703: LD_INT 27
22705: PUSH
22706: LD_INT 28
22708: PUSH
22709: LD_INT 30
22711: PUSH
22712: LD_INT 31
22714: PUSH
22715: LD_INT 32
22717: PUSH
22718: LD_INT 33
22720: PUSH
22721: LD_INT 34
22723: PUSH
22724: LD_INT 36
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 101
22765: PUSH
22766: LD_INT 102
22768: PUSH
22769: LD_INT 103
22771: PUSH
22772: LD_INT 104
22774: PUSH
22775: LD_INT 105
22777: PUSH
22778: LD_INT 106
22780: PUSH
22781: LD_INT 107
22783: PUSH
22784: LD_INT 108
22786: PUSH
22787: LD_INT 109
22789: PUSH
22790: LD_INT 110
22792: PUSH
22793: LD_INT 111
22795: PUSH
22796: LD_INT 112
22798: PUSH
22799: LD_INT 113
22801: PUSH
22802: LD_INT 114
22804: PUSH
22805: LD_INT 116
22807: PUSH
22808: LD_INT 117
22810: PUSH
22811: LD_INT 118
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: ST_TO_ADDR
22837: GO 24292
22839: LD_INT 13
22841: DOUBLE
22842: EQUAL
22843: IFTRUE 22847
22845: GO 23055
22847: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22848: LD_ADDR_VAR 0 2
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: LD_INT 2
22858: PUSH
22859: LD_INT 3
22861: PUSH
22862: LD_INT 4
22864: PUSH
22865: LD_INT 5
22867: PUSH
22868: LD_INT 8
22870: PUSH
22871: LD_INT 9
22873: PUSH
22874: LD_INT 10
22876: PUSH
22877: LD_INT 11
22879: PUSH
22880: LD_INT 12
22882: PUSH
22883: LD_INT 14
22885: PUSH
22886: LD_INT 15
22888: PUSH
22889: LD_INT 16
22891: PUSH
22892: LD_INT 17
22894: PUSH
22895: LD_INT 18
22897: PUSH
22898: LD_INT 19
22900: PUSH
22901: LD_INT 20
22903: PUSH
22904: LD_INT 21
22906: PUSH
22907: LD_INT 22
22909: PUSH
22910: LD_INT 23
22912: PUSH
22913: LD_INT 24
22915: PUSH
22916: LD_INT 25
22918: PUSH
22919: LD_INT 26
22921: PUSH
22922: LD_INT 27
22924: PUSH
22925: LD_INT 28
22927: PUSH
22928: LD_INT 30
22930: PUSH
22931: LD_INT 31
22933: PUSH
22934: LD_INT 32
22936: PUSH
22937: LD_INT 33
22939: PUSH
22940: LD_INT 34
22942: PUSH
22943: LD_INT 36
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 101
22981: PUSH
22982: LD_INT 102
22984: PUSH
22985: LD_INT 103
22987: PUSH
22988: LD_INT 104
22990: PUSH
22991: LD_INT 105
22993: PUSH
22994: LD_INT 106
22996: PUSH
22997: LD_INT 107
22999: PUSH
23000: LD_INT 108
23002: PUSH
23003: LD_INT 109
23005: PUSH
23006: LD_INT 110
23008: PUSH
23009: LD_INT 111
23011: PUSH
23012: LD_INT 112
23014: PUSH
23015: LD_INT 113
23017: PUSH
23018: LD_INT 114
23020: PUSH
23021: LD_INT 116
23023: PUSH
23024: LD_INT 117
23026: PUSH
23027: LD_INT 118
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: ST_TO_ADDR
23053: GO 24292
23055: LD_INT 14
23057: DOUBLE
23058: EQUAL
23059: IFTRUE 23063
23061: GO 23287
23063: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23064: LD_ADDR_VAR 0 2
23068: PUSH
23069: LD_INT 1
23071: PUSH
23072: LD_INT 2
23074: PUSH
23075: LD_INT 3
23077: PUSH
23078: LD_INT 4
23080: PUSH
23081: LD_INT 5
23083: PUSH
23084: LD_INT 6
23086: PUSH
23087: LD_INT 7
23089: PUSH
23090: LD_INT 8
23092: PUSH
23093: LD_INT 9
23095: PUSH
23096: LD_INT 10
23098: PUSH
23099: LD_INT 11
23101: PUSH
23102: LD_INT 12
23104: PUSH
23105: LD_INT 13
23107: PUSH
23108: LD_INT 14
23110: PUSH
23111: LD_INT 15
23113: PUSH
23114: LD_INT 16
23116: PUSH
23117: LD_INT 17
23119: PUSH
23120: LD_INT 18
23122: PUSH
23123: LD_INT 19
23125: PUSH
23126: LD_INT 20
23128: PUSH
23129: LD_INT 21
23131: PUSH
23132: LD_INT 22
23134: PUSH
23135: LD_INT 23
23137: PUSH
23138: LD_INT 24
23140: PUSH
23141: LD_INT 25
23143: PUSH
23144: LD_INT 26
23146: PUSH
23147: LD_INT 27
23149: PUSH
23150: LD_INT 28
23152: PUSH
23153: LD_INT 29
23155: PUSH
23156: LD_INT 30
23158: PUSH
23159: LD_INT 31
23161: PUSH
23162: LD_INT 32
23164: PUSH
23165: LD_INT 33
23167: PUSH
23168: LD_INT 34
23170: PUSH
23171: LD_INT 36
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 101
23213: PUSH
23214: LD_INT 102
23216: PUSH
23217: LD_INT 103
23219: PUSH
23220: LD_INT 104
23222: PUSH
23223: LD_INT 105
23225: PUSH
23226: LD_INT 106
23228: PUSH
23229: LD_INT 107
23231: PUSH
23232: LD_INT 108
23234: PUSH
23235: LD_INT 109
23237: PUSH
23238: LD_INT 110
23240: PUSH
23241: LD_INT 111
23243: PUSH
23244: LD_INT 112
23246: PUSH
23247: LD_INT 113
23249: PUSH
23250: LD_INT 114
23252: PUSH
23253: LD_INT 116
23255: PUSH
23256: LD_INT 117
23258: PUSH
23259: LD_INT 118
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: ST_TO_ADDR
23285: GO 24292
23287: LD_INT 15
23289: DOUBLE
23290: EQUAL
23291: IFTRUE 23295
23293: GO 23519
23295: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23296: LD_ADDR_VAR 0 2
23300: PUSH
23301: LD_INT 1
23303: PUSH
23304: LD_INT 2
23306: PUSH
23307: LD_INT 3
23309: PUSH
23310: LD_INT 4
23312: PUSH
23313: LD_INT 5
23315: PUSH
23316: LD_INT 6
23318: PUSH
23319: LD_INT 7
23321: PUSH
23322: LD_INT 8
23324: PUSH
23325: LD_INT 9
23327: PUSH
23328: LD_INT 10
23330: PUSH
23331: LD_INT 11
23333: PUSH
23334: LD_INT 12
23336: PUSH
23337: LD_INT 13
23339: PUSH
23340: LD_INT 14
23342: PUSH
23343: LD_INT 15
23345: PUSH
23346: LD_INT 16
23348: PUSH
23349: LD_INT 17
23351: PUSH
23352: LD_INT 18
23354: PUSH
23355: LD_INT 19
23357: PUSH
23358: LD_INT 20
23360: PUSH
23361: LD_INT 21
23363: PUSH
23364: LD_INT 22
23366: PUSH
23367: LD_INT 23
23369: PUSH
23370: LD_INT 24
23372: PUSH
23373: LD_INT 25
23375: PUSH
23376: LD_INT 26
23378: PUSH
23379: LD_INT 27
23381: PUSH
23382: LD_INT 28
23384: PUSH
23385: LD_INT 29
23387: PUSH
23388: LD_INT 30
23390: PUSH
23391: LD_INT 31
23393: PUSH
23394: LD_INT 32
23396: PUSH
23397: LD_INT 33
23399: PUSH
23400: LD_INT 34
23402: PUSH
23403: LD_INT 36
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 101
23445: PUSH
23446: LD_INT 102
23448: PUSH
23449: LD_INT 103
23451: PUSH
23452: LD_INT 104
23454: PUSH
23455: LD_INT 105
23457: PUSH
23458: LD_INT 106
23460: PUSH
23461: LD_INT 107
23463: PUSH
23464: LD_INT 108
23466: PUSH
23467: LD_INT 109
23469: PUSH
23470: LD_INT 110
23472: PUSH
23473: LD_INT 111
23475: PUSH
23476: LD_INT 112
23478: PUSH
23479: LD_INT 113
23481: PUSH
23482: LD_INT 114
23484: PUSH
23485: LD_INT 116
23487: PUSH
23488: LD_INT 117
23490: PUSH
23491: LD_INT 118
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: ST_TO_ADDR
23517: GO 24292
23519: LD_INT 16
23521: DOUBLE
23522: EQUAL
23523: IFTRUE 23527
23525: GO 23663
23527: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23528: LD_ADDR_VAR 0 2
23532: PUSH
23533: LD_INT 2
23535: PUSH
23536: LD_INT 4
23538: PUSH
23539: LD_INT 5
23541: PUSH
23542: LD_INT 7
23544: PUSH
23545: LD_INT 11
23547: PUSH
23548: LD_INT 12
23550: PUSH
23551: LD_INT 15
23553: PUSH
23554: LD_INT 16
23556: PUSH
23557: LD_INT 20
23559: PUSH
23560: LD_INT 21
23562: PUSH
23563: LD_INT 22
23565: PUSH
23566: LD_INT 23
23568: PUSH
23569: LD_INT 25
23571: PUSH
23572: LD_INT 26
23574: PUSH
23575: LD_INT 30
23577: PUSH
23578: LD_INT 31
23580: PUSH
23581: LD_INT 32
23583: PUSH
23584: LD_INT 33
23586: PUSH
23587: LD_INT 34
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 101
23613: PUSH
23614: LD_INT 102
23616: PUSH
23617: LD_INT 103
23619: PUSH
23620: LD_INT 106
23622: PUSH
23623: LD_INT 108
23625: PUSH
23626: LD_INT 112
23628: PUSH
23629: LD_INT 113
23631: PUSH
23632: LD_INT 114
23634: PUSH
23635: LD_INT 116
23637: PUSH
23638: LD_INT 117
23640: PUSH
23641: LD_INT 118
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: ST_TO_ADDR
23661: GO 24292
23663: LD_INT 17
23665: DOUBLE
23666: EQUAL
23667: IFTRUE 23671
23669: GO 23895
23671: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23672: LD_ADDR_VAR 0 2
23676: PUSH
23677: LD_INT 1
23679: PUSH
23680: LD_INT 2
23682: PUSH
23683: LD_INT 3
23685: PUSH
23686: LD_INT 4
23688: PUSH
23689: LD_INT 5
23691: PUSH
23692: LD_INT 6
23694: PUSH
23695: LD_INT 7
23697: PUSH
23698: LD_INT 8
23700: PUSH
23701: LD_INT 9
23703: PUSH
23704: LD_INT 10
23706: PUSH
23707: LD_INT 11
23709: PUSH
23710: LD_INT 12
23712: PUSH
23713: LD_INT 13
23715: PUSH
23716: LD_INT 14
23718: PUSH
23719: LD_INT 15
23721: PUSH
23722: LD_INT 16
23724: PUSH
23725: LD_INT 17
23727: PUSH
23728: LD_INT 18
23730: PUSH
23731: LD_INT 19
23733: PUSH
23734: LD_INT 20
23736: PUSH
23737: LD_INT 21
23739: PUSH
23740: LD_INT 22
23742: PUSH
23743: LD_INT 23
23745: PUSH
23746: LD_INT 24
23748: PUSH
23749: LD_INT 25
23751: PUSH
23752: LD_INT 26
23754: PUSH
23755: LD_INT 27
23757: PUSH
23758: LD_INT 28
23760: PUSH
23761: LD_INT 29
23763: PUSH
23764: LD_INT 30
23766: PUSH
23767: LD_INT 31
23769: PUSH
23770: LD_INT 32
23772: PUSH
23773: LD_INT 33
23775: PUSH
23776: LD_INT 34
23778: PUSH
23779: LD_INT 36
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 101
23821: PUSH
23822: LD_INT 102
23824: PUSH
23825: LD_INT 103
23827: PUSH
23828: LD_INT 104
23830: PUSH
23831: LD_INT 105
23833: PUSH
23834: LD_INT 106
23836: PUSH
23837: LD_INT 107
23839: PUSH
23840: LD_INT 108
23842: PUSH
23843: LD_INT 109
23845: PUSH
23846: LD_INT 110
23848: PUSH
23849: LD_INT 111
23851: PUSH
23852: LD_INT 112
23854: PUSH
23855: LD_INT 113
23857: PUSH
23858: LD_INT 114
23860: PUSH
23861: LD_INT 116
23863: PUSH
23864: LD_INT 117
23866: PUSH
23867: LD_INT 118
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: ST_TO_ADDR
23893: GO 24292
23895: LD_INT 18
23897: DOUBLE
23898: EQUAL
23899: IFTRUE 23903
23901: GO 24051
23903: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23904: LD_ADDR_VAR 0 2
23908: PUSH
23909: LD_INT 2
23911: PUSH
23912: LD_INT 4
23914: PUSH
23915: LD_INT 5
23917: PUSH
23918: LD_INT 7
23920: PUSH
23921: LD_INT 11
23923: PUSH
23924: LD_INT 12
23926: PUSH
23927: LD_INT 15
23929: PUSH
23930: LD_INT 16
23932: PUSH
23933: LD_INT 20
23935: PUSH
23936: LD_INT 21
23938: PUSH
23939: LD_INT 22
23941: PUSH
23942: LD_INT 23
23944: PUSH
23945: LD_INT 25
23947: PUSH
23948: LD_INT 26
23950: PUSH
23951: LD_INT 30
23953: PUSH
23954: LD_INT 31
23956: PUSH
23957: LD_INT 32
23959: PUSH
23960: LD_INT 33
23962: PUSH
23963: LD_INT 34
23965: PUSH
23966: LD_INT 35
23968: PUSH
23969: LD_INT 36
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 101
23997: PUSH
23998: LD_INT 102
24000: PUSH
24001: LD_INT 103
24003: PUSH
24004: LD_INT 106
24006: PUSH
24007: LD_INT 108
24009: PUSH
24010: LD_INT 112
24012: PUSH
24013: LD_INT 113
24015: PUSH
24016: LD_INT 114
24018: PUSH
24019: LD_INT 115
24021: PUSH
24022: LD_INT 116
24024: PUSH
24025: LD_INT 117
24027: PUSH
24028: LD_INT 118
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: ST_TO_ADDR
24049: GO 24292
24051: LD_INT 19
24053: DOUBLE
24054: EQUAL
24055: IFTRUE 24059
24057: GO 24291
24059: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24060: LD_ADDR_VAR 0 2
24064: PUSH
24065: LD_INT 1
24067: PUSH
24068: LD_INT 2
24070: PUSH
24071: LD_INT 3
24073: PUSH
24074: LD_INT 4
24076: PUSH
24077: LD_INT 5
24079: PUSH
24080: LD_INT 6
24082: PUSH
24083: LD_INT 7
24085: PUSH
24086: LD_INT 8
24088: PUSH
24089: LD_INT 9
24091: PUSH
24092: LD_INT 10
24094: PUSH
24095: LD_INT 11
24097: PUSH
24098: LD_INT 12
24100: PUSH
24101: LD_INT 13
24103: PUSH
24104: LD_INT 14
24106: PUSH
24107: LD_INT 15
24109: PUSH
24110: LD_INT 16
24112: PUSH
24113: LD_INT 17
24115: PUSH
24116: LD_INT 18
24118: PUSH
24119: LD_INT 19
24121: PUSH
24122: LD_INT 20
24124: PUSH
24125: LD_INT 21
24127: PUSH
24128: LD_INT 22
24130: PUSH
24131: LD_INT 23
24133: PUSH
24134: LD_INT 24
24136: PUSH
24137: LD_INT 25
24139: PUSH
24140: LD_INT 26
24142: PUSH
24143: LD_INT 27
24145: PUSH
24146: LD_INT 28
24148: PUSH
24149: LD_INT 29
24151: PUSH
24152: LD_INT 30
24154: PUSH
24155: LD_INT 31
24157: PUSH
24158: LD_INT 32
24160: PUSH
24161: LD_INT 33
24163: PUSH
24164: LD_INT 34
24166: PUSH
24167: LD_INT 35
24169: PUSH
24170: LD_INT 36
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 101
24213: PUSH
24214: LD_INT 102
24216: PUSH
24217: LD_INT 103
24219: PUSH
24220: LD_INT 104
24222: PUSH
24223: LD_INT 105
24225: PUSH
24226: LD_INT 106
24228: PUSH
24229: LD_INT 107
24231: PUSH
24232: LD_INT 108
24234: PUSH
24235: LD_INT 109
24237: PUSH
24238: LD_INT 110
24240: PUSH
24241: LD_INT 111
24243: PUSH
24244: LD_INT 112
24246: PUSH
24247: LD_INT 113
24249: PUSH
24250: LD_INT 114
24252: PUSH
24253: LD_INT 115
24255: PUSH
24256: LD_INT 116
24258: PUSH
24259: LD_INT 117
24261: PUSH
24262: LD_INT 118
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: ST_TO_ADDR
24289: GO 24292
24291: POP
// end else
24292: GO 24523
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24294: LD_ADDR_VAR 0 2
24298: PUSH
24299: LD_INT 1
24301: PUSH
24302: LD_INT 2
24304: PUSH
24305: LD_INT 3
24307: PUSH
24308: LD_INT 4
24310: PUSH
24311: LD_INT 5
24313: PUSH
24314: LD_INT 6
24316: PUSH
24317: LD_INT 7
24319: PUSH
24320: LD_INT 8
24322: PUSH
24323: LD_INT 9
24325: PUSH
24326: LD_INT 10
24328: PUSH
24329: LD_INT 11
24331: PUSH
24332: LD_INT 12
24334: PUSH
24335: LD_INT 13
24337: PUSH
24338: LD_INT 14
24340: PUSH
24341: LD_INT 15
24343: PUSH
24344: LD_INT 16
24346: PUSH
24347: LD_INT 17
24349: PUSH
24350: LD_INT 18
24352: PUSH
24353: LD_INT 19
24355: PUSH
24356: LD_INT 20
24358: PUSH
24359: LD_INT 21
24361: PUSH
24362: LD_INT 22
24364: PUSH
24365: LD_INT 23
24367: PUSH
24368: LD_INT 24
24370: PUSH
24371: LD_INT 25
24373: PUSH
24374: LD_INT 26
24376: PUSH
24377: LD_INT 27
24379: PUSH
24380: LD_INT 28
24382: PUSH
24383: LD_INT 29
24385: PUSH
24386: LD_INT 30
24388: PUSH
24389: LD_INT 31
24391: PUSH
24392: LD_INT 32
24394: PUSH
24395: LD_INT 33
24397: PUSH
24398: LD_INT 34
24400: PUSH
24401: LD_INT 35
24403: PUSH
24404: LD_INT 36
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 101
24447: PUSH
24448: LD_INT 102
24450: PUSH
24451: LD_INT 103
24453: PUSH
24454: LD_INT 104
24456: PUSH
24457: LD_INT 105
24459: PUSH
24460: LD_INT 106
24462: PUSH
24463: LD_INT 107
24465: PUSH
24466: LD_INT 108
24468: PUSH
24469: LD_INT 109
24471: PUSH
24472: LD_INT 110
24474: PUSH
24475: LD_INT 111
24477: PUSH
24478: LD_INT 112
24480: PUSH
24481: LD_INT 113
24483: PUSH
24484: LD_INT 114
24486: PUSH
24487: LD_INT 115
24489: PUSH
24490: LD_INT 116
24492: PUSH
24493: LD_INT 117
24495: PUSH
24496: LD_INT 118
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: ST_TO_ADDR
// if result then
24523: LD_VAR 0 2
24527: IFFALSE 25313
// begin normal :=  ;
24529: LD_ADDR_VAR 0 5
24533: PUSH
24534: LD_STRING 
24536: ST_TO_ADDR
// hardcore :=  ;
24537: LD_ADDR_VAR 0 6
24541: PUSH
24542: LD_STRING 
24544: ST_TO_ADDR
// active :=  ;
24545: LD_ADDR_VAR 0 7
24549: PUSH
24550: LD_STRING 
24552: ST_TO_ADDR
// for i = 1 to normalCounter do
24553: LD_ADDR_VAR 0 8
24557: PUSH
24558: DOUBLE
24559: LD_INT 1
24561: DEC
24562: ST_TO_ADDR
24563: LD_EXP 64
24567: PUSH
24568: FOR_TO
24569: IFFALSE 24670
// begin tmp := 0 ;
24571: LD_ADDR_VAR 0 3
24575: PUSH
24576: LD_STRING 0
24578: ST_TO_ADDR
// if result [ 1 ] then
24579: LD_VAR 0 2
24583: PUSH
24584: LD_INT 1
24586: ARRAY
24587: IFFALSE 24652
// if result [ 1 ] [ 1 ] = i then
24589: LD_VAR 0 2
24593: PUSH
24594: LD_INT 1
24596: ARRAY
24597: PUSH
24598: LD_INT 1
24600: ARRAY
24601: PUSH
24602: LD_VAR 0 8
24606: EQUAL
24607: IFFALSE 24652
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24609: LD_ADDR_VAR 0 2
24613: PUSH
24614: LD_VAR 0 2
24618: PPUSH
24619: LD_INT 1
24621: PPUSH
24622: LD_VAR 0 2
24626: PUSH
24627: LD_INT 1
24629: ARRAY
24630: PPUSH
24631: LD_INT 1
24633: PPUSH
24634: CALL_OW 3
24638: PPUSH
24639: CALL_OW 1
24643: ST_TO_ADDR
// tmp := 1 ;
24644: LD_ADDR_VAR 0 3
24648: PUSH
24649: LD_STRING 1
24651: ST_TO_ADDR
// end ; normal := normal & tmp ;
24652: LD_ADDR_VAR 0 5
24656: PUSH
24657: LD_VAR 0 5
24661: PUSH
24662: LD_VAR 0 3
24666: STR
24667: ST_TO_ADDR
// end ;
24668: GO 24568
24670: POP
24671: POP
// for i = 1 to hardcoreCounter do
24672: LD_ADDR_VAR 0 8
24676: PUSH
24677: DOUBLE
24678: LD_INT 1
24680: DEC
24681: ST_TO_ADDR
24682: LD_EXP 65
24686: PUSH
24687: FOR_TO
24688: IFFALSE 24793
// begin tmp := 0 ;
24690: LD_ADDR_VAR 0 3
24694: PUSH
24695: LD_STRING 0
24697: ST_TO_ADDR
// if result [ 2 ] then
24698: LD_VAR 0 2
24702: PUSH
24703: LD_INT 2
24705: ARRAY
24706: IFFALSE 24775
// if result [ 2 ] [ 1 ] = 100 + i then
24708: LD_VAR 0 2
24712: PUSH
24713: LD_INT 2
24715: ARRAY
24716: PUSH
24717: LD_INT 1
24719: ARRAY
24720: PUSH
24721: LD_INT 100
24723: PUSH
24724: LD_VAR 0 8
24728: PLUS
24729: EQUAL
24730: IFFALSE 24775
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24732: LD_ADDR_VAR 0 2
24736: PUSH
24737: LD_VAR 0 2
24741: PPUSH
24742: LD_INT 2
24744: PPUSH
24745: LD_VAR 0 2
24749: PUSH
24750: LD_INT 2
24752: ARRAY
24753: PPUSH
24754: LD_INT 1
24756: PPUSH
24757: CALL_OW 3
24761: PPUSH
24762: CALL_OW 1
24766: ST_TO_ADDR
// tmp := 1 ;
24767: LD_ADDR_VAR 0 3
24771: PUSH
24772: LD_STRING 1
24774: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24775: LD_ADDR_VAR 0 6
24779: PUSH
24780: LD_VAR 0 6
24784: PUSH
24785: LD_VAR 0 3
24789: STR
24790: ST_TO_ADDR
// end ;
24791: GO 24687
24793: POP
24794: POP
// if isGameLoad then
24795: LD_VAR 0 1
24799: IFFALSE 25274
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24801: LD_ADDR_VAR 0 4
24805: PUSH
24806: LD_EXP 68
24810: PUSH
24811: LD_EXP 67
24815: PUSH
24816: LD_EXP 69
24820: PUSH
24821: LD_EXP 66
24825: PUSH
24826: LD_EXP 70
24830: PUSH
24831: LD_EXP 71
24835: PUSH
24836: LD_EXP 72
24840: PUSH
24841: LD_EXP 73
24845: PUSH
24846: LD_EXP 74
24850: PUSH
24851: LD_EXP 75
24855: PUSH
24856: LD_EXP 76
24860: PUSH
24861: LD_EXP 77
24865: PUSH
24866: LD_EXP 78
24870: PUSH
24871: LD_EXP 79
24875: PUSH
24876: LD_EXP 87
24880: PUSH
24881: LD_EXP 88
24885: PUSH
24886: LD_EXP 89
24890: PUSH
24891: LD_EXP 90
24895: PUSH
24896: LD_EXP 92
24900: PUSH
24901: LD_EXP 93
24905: PUSH
24906: LD_EXP 94
24910: PUSH
24911: LD_EXP 97
24915: PUSH
24916: LD_EXP 99
24920: PUSH
24921: LD_EXP 100
24925: PUSH
24926: LD_EXP 101
24930: PUSH
24931: LD_EXP 103
24935: PUSH
24936: LD_EXP 104
24940: PUSH
24941: LD_EXP 107
24945: PUSH
24946: LD_EXP 108
24950: PUSH
24951: LD_EXP 109
24955: PUSH
24956: LD_EXP 110
24960: PUSH
24961: LD_EXP 111
24965: PUSH
24966: LD_EXP 112
24970: PUSH
24971: LD_EXP 113
24975: PUSH
24976: LD_EXP 114
24980: PUSH
24981: LD_EXP 115
24985: PUSH
24986: LD_EXP 80
24990: PUSH
24991: LD_EXP 81
24995: PUSH
24996: LD_EXP 84
25000: PUSH
25001: LD_EXP 85
25005: PUSH
25006: LD_EXP 86
25010: PUSH
25011: LD_EXP 82
25015: PUSH
25016: LD_EXP 83
25020: PUSH
25021: LD_EXP 91
25025: PUSH
25026: LD_EXP 95
25030: PUSH
25031: LD_EXP 96
25035: PUSH
25036: LD_EXP 98
25040: PUSH
25041: LD_EXP 102
25045: PUSH
25046: LD_EXP 105
25050: PUSH
25051: LD_EXP 106
25055: PUSH
25056: LD_EXP 116
25060: PUSH
25061: LD_EXP 117
25065: PUSH
25066: LD_EXP 118
25070: PUSH
25071: LD_EXP 119
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: ST_TO_ADDR
// tmp :=  ;
25132: LD_ADDR_VAR 0 3
25136: PUSH
25137: LD_STRING 
25139: ST_TO_ADDR
// for i = 1 to normalCounter do
25140: LD_ADDR_VAR 0 8
25144: PUSH
25145: DOUBLE
25146: LD_INT 1
25148: DEC
25149: ST_TO_ADDR
25150: LD_EXP 64
25154: PUSH
25155: FOR_TO
25156: IFFALSE 25192
// begin if flags [ i ] then
25158: LD_VAR 0 4
25162: PUSH
25163: LD_VAR 0 8
25167: ARRAY
25168: IFFALSE 25190
// tmp := tmp & i & ; ;
25170: LD_ADDR_VAR 0 3
25174: PUSH
25175: LD_VAR 0 3
25179: PUSH
25180: LD_VAR 0 8
25184: STR
25185: PUSH
25186: LD_STRING ;
25188: STR
25189: ST_TO_ADDR
// end ;
25190: GO 25155
25192: POP
25193: POP
// for i = 1 to hardcoreCounter do
25194: LD_ADDR_VAR 0 8
25198: PUSH
25199: DOUBLE
25200: LD_INT 1
25202: DEC
25203: ST_TO_ADDR
25204: LD_EXP 65
25208: PUSH
25209: FOR_TO
25210: IFFALSE 25256
// begin if flags [ normalCounter + i ] then
25212: LD_VAR 0 4
25216: PUSH
25217: LD_EXP 64
25221: PUSH
25222: LD_VAR 0 8
25226: PLUS
25227: ARRAY
25228: IFFALSE 25254
// tmp := tmp & ( 100 + i ) & ; ;
25230: LD_ADDR_VAR 0 3
25234: PUSH
25235: LD_VAR 0 3
25239: PUSH
25240: LD_INT 100
25242: PUSH
25243: LD_VAR 0 8
25247: PLUS
25248: STR
25249: PUSH
25250: LD_STRING ;
25252: STR
25253: ST_TO_ADDR
// end ;
25254: GO 25209
25256: POP
25257: POP
// if tmp then
25258: LD_VAR 0 3
25262: IFFALSE 25274
// active := tmp ;
25264: LD_ADDR_VAR 0 7
25268: PUSH
25269: LD_VAR 0 3
25273: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25274: LD_STRING getStreamItemsFromMission("
25276: PUSH
25277: LD_VAR 0 5
25281: STR
25282: PUSH
25283: LD_STRING ","
25285: STR
25286: PUSH
25287: LD_VAR 0 6
25291: STR
25292: PUSH
25293: LD_STRING ","
25295: STR
25296: PUSH
25297: LD_VAR 0 7
25301: STR
25302: PUSH
25303: LD_STRING ")
25305: STR
25306: PPUSH
25307: CALL_OW 559
// end else
25311: GO 25320
// ToLua ( getStreamItemsFromMission("","","") ) ;
25313: LD_STRING getStreamItemsFromMission("","","")
25315: PPUSH
25316: CALL_OW 559
// end ;
25320: LD_VAR 0 2
25324: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25325: LD_EXP 63
25329: PUSH
25330: LD_EXP 68
25334: AND
25335: IFFALSE 25459
25337: GO 25339
25339: DISABLE
25340: LD_INT 0
25342: PPUSH
25343: PPUSH
// begin enable ;
25344: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25345: LD_ADDR_VAR 0 2
25349: PUSH
25350: LD_INT 22
25352: PUSH
25353: LD_OWVAR 2
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 2
25364: PUSH
25365: LD_INT 34
25367: PUSH
25368: LD_INT 7
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 34
25377: PUSH
25378: LD_INT 45
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 34
25387: PUSH
25388: LD_INT 28
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 34
25397: PUSH
25398: LD_INT 47
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PPUSH
25416: CALL_OW 69
25420: ST_TO_ADDR
// if not tmp then
25421: LD_VAR 0 2
25425: NOT
25426: IFFALSE 25430
// exit ;
25428: GO 25459
// for i in tmp do
25430: LD_ADDR_VAR 0 1
25434: PUSH
25435: LD_VAR 0 2
25439: PUSH
25440: FOR_IN
25441: IFFALSE 25457
// begin SetLives ( i , 0 ) ;
25443: LD_VAR 0 1
25447: PPUSH
25448: LD_INT 0
25450: PPUSH
25451: CALL_OW 234
// end ;
25455: GO 25440
25457: POP
25458: POP
// end ;
25459: PPOPN 2
25461: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25462: LD_EXP 63
25466: PUSH
25467: LD_EXP 69
25471: AND
25472: IFFALSE 25556
25474: GO 25476
25476: DISABLE
25477: LD_INT 0
25479: PPUSH
25480: PPUSH
// begin enable ;
25481: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25482: LD_ADDR_VAR 0 2
25486: PUSH
25487: LD_INT 22
25489: PUSH
25490: LD_OWVAR 2
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 32
25501: PUSH
25502: LD_INT 3
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PPUSH
25513: CALL_OW 69
25517: ST_TO_ADDR
// if not tmp then
25518: LD_VAR 0 2
25522: NOT
25523: IFFALSE 25527
// exit ;
25525: GO 25556
// for i in tmp do
25527: LD_ADDR_VAR 0 1
25531: PUSH
25532: LD_VAR 0 2
25536: PUSH
25537: FOR_IN
25538: IFFALSE 25554
// begin SetLives ( i , 0 ) ;
25540: LD_VAR 0 1
25544: PPUSH
25545: LD_INT 0
25547: PPUSH
25548: CALL_OW 234
// end ;
25552: GO 25537
25554: POP
25555: POP
// end ;
25556: PPOPN 2
25558: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25559: LD_EXP 63
25563: PUSH
25564: LD_EXP 66
25568: AND
25569: IFFALSE 25662
25571: GO 25573
25573: DISABLE
25574: LD_INT 0
25576: PPUSH
// begin enable ;
25577: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25578: LD_ADDR_VAR 0 1
25582: PUSH
25583: LD_INT 22
25585: PUSH
25586: LD_OWVAR 2
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 2
25597: PUSH
25598: LD_INT 25
25600: PUSH
25601: LD_INT 5
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 25
25610: PUSH
25611: LD_INT 9
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 25
25620: PUSH
25621: LD_INT 8
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PPUSH
25638: CALL_OW 69
25642: PUSH
25643: FOR_IN
25644: IFFALSE 25660
// begin SetClass ( i , 1 ) ;
25646: LD_VAR 0 1
25650: PPUSH
25651: LD_INT 1
25653: PPUSH
25654: CALL_OW 336
// end ;
25658: GO 25643
25660: POP
25661: POP
// end ;
25662: PPOPN 1
25664: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25665: LD_EXP 63
25669: PUSH
25670: LD_EXP 67
25674: AND
25675: PUSH
25676: LD_OWVAR 65
25680: PUSH
25681: LD_INT 7
25683: LESS
25684: AND
25685: IFFALSE 25699
25687: GO 25689
25689: DISABLE
// begin enable ;
25690: ENABLE
// game_speed := 7 ;
25691: LD_ADDR_OWVAR 65
25695: PUSH
25696: LD_INT 7
25698: ST_TO_ADDR
// end ;
25699: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25700: LD_EXP 63
25704: PUSH
25705: LD_EXP 70
25709: AND
25710: IFFALSE 25912
25712: GO 25714
25714: DISABLE
25715: LD_INT 0
25717: PPUSH
25718: PPUSH
25719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25720: LD_ADDR_VAR 0 3
25724: PUSH
25725: LD_INT 81
25727: PUSH
25728: LD_OWVAR 2
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 21
25739: PUSH
25740: LD_INT 1
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PPUSH
25751: CALL_OW 69
25755: ST_TO_ADDR
// if not tmp then
25756: LD_VAR 0 3
25760: NOT
25761: IFFALSE 25765
// exit ;
25763: GO 25912
// if tmp > 5 then
25765: LD_VAR 0 3
25769: PUSH
25770: LD_INT 5
25772: GREATER
25773: IFFALSE 25785
// k := 5 else
25775: LD_ADDR_VAR 0 2
25779: PUSH
25780: LD_INT 5
25782: ST_TO_ADDR
25783: GO 25795
// k := tmp ;
25785: LD_ADDR_VAR 0 2
25789: PUSH
25790: LD_VAR 0 3
25794: ST_TO_ADDR
// for i := 1 to k do
25795: LD_ADDR_VAR 0 1
25799: PUSH
25800: DOUBLE
25801: LD_INT 1
25803: DEC
25804: ST_TO_ADDR
25805: LD_VAR 0 2
25809: PUSH
25810: FOR_TO
25811: IFFALSE 25910
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25813: LD_VAR 0 3
25817: PUSH
25818: LD_VAR 0 1
25822: ARRAY
25823: PPUSH
25824: LD_VAR 0 1
25828: PUSH
25829: LD_INT 4
25831: MOD
25832: PUSH
25833: LD_INT 1
25835: PLUS
25836: PPUSH
25837: CALL_OW 259
25841: PUSH
25842: LD_INT 10
25844: LESS
25845: IFFALSE 25908
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25847: LD_VAR 0 3
25851: PUSH
25852: LD_VAR 0 1
25856: ARRAY
25857: PPUSH
25858: LD_VAR 0 1
25862: PUSH
25863: LD_INT 4
25865: MOD
25866: PUSH
25867: LD_INT 1
25869: PLUS
25870: PPUSH
25871: LD_VAR 0 3
25875: PUSH
25876: LD_VAR 0 1
25880: ARRAY
25881: PPUSH
25882: LD_VAR 0 1
25886: PUSH
25887: LD_INT 4
25889: MOD
25890: PUSH
25891: LD_INT 1
25893: PLUS
25894: PPUSH
25895: CALL_OW 259
25899: PUSH
25900: LD_INT 1
25902: PLUS
25903: PPUSH
25904: CALL_OW 237
25908: GO 25810
25910: POP
25911: POP
// end ;
25912: PPOPN 3
25914: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25915: LD_EXP 63
25919: PUSH
25920: LD_EXP 71
25924: AND
25925: IFFALSE 25945
25927: GO 25929
25929: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25930: LD_INT 4
25932: PPUSH
25933: LD_OWVAR 2
25937: PPUSH
25938: LD_INT 0
25940: PPUSH
25941: CALL_OW 324
25945: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25946: LD_EXP 63
25950: PUSH
25951: LD_EXP 100
25955: AND
25956: IFFALSE 25976
25958: GO 25960
25960: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25961: LD_INT 19
25963: PPUSH
25964: LD_OWVAR 2
25968: PPUSH
25969: LD_INT 0
25971: PPUSH
25972: CALL_OW 324
25976: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25977: LD_EXP 63
25981: PUSH
25982: LD_EXP 72
25986: AND
25987: IFFALSE 26089
25989: GO 25991
25991: DISABLE
25992: LD_INT 0
25994: PPUSH
25995: PPUSH
// begin enable ;
25996: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25997: LD_ADDR_VAR 0 2
26001: PUSH
26002: LD_INT 22
26004: PUSH
26005: LD_OWVAR 2
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 2
26016: PUSH
26017: LD_INT 34
26019: PUSH
26020: LD_INT 11
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 34
26029: PUSH
26030: LD_INT 30
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: LIST
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PPUSH
26046: CALL_OW 69
26050: ST_TO_ADDR
// if not tmp then
26051: LD_VAR 0 2
26055: NOT
26056: IFFALSE 26060
// exit ;
26058: GO 26089
// for i in tmp do
26060: LD_ADDR_VAR 0 1
26064: PUSH
26065: LD_VAR 0 2
26069: PUSH
26070: FOR_IN
26071: IFFALSE 26087
// begin SetLives ( i , 0 ) ;
26073: LD_VAR 0 1
26077: PPUSH
26078: LD_INT 0
26080: PPUSH
26081: CALL_OW 234
// end ;
26085: GO 26070
26087: POP
26088: POP
// end ;
26089: PPOPN 2
26091: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26092: LD_EXP 63
26096: PUSH
26097: LD_EXP 73
26101: AND
26102: IFFALSE 26122
26104: GO 26106
26106: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26107: LD_INT 32
26109: PPUSH
26110: LD_OWVAR 2
26114: PPUSH
26115: LD_INT 0
26117: PPUSH
26118: CALL_OW 324
26122: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26123: LD_EXP 63
26127: PUSH
26128: LD_EXP 74
26132: AND
26133: IFFALSE 26314
26135: GO 26137
26137: DISABLE
26138: LD_INT 0
26140: PPUSH
26141: PPUSH
26142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26143: LD_ADDR_VAR 0 2
26147: PUSH
26148: LD_INT 22
26150: PUSH
26151: LD_OWVAR 2
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 33
26162: PUSH
26163: LD_INT 3
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PPUSH
26174: CALL_OW 69
26178: ST_TO_ADDR
// if not tmp then
26179: LD_VAR 0 2
26183: NOT
26184: IFFALSE 26188
// exit ;
26186: GO 26314
// side := 0 ;
26188: LD_ADDR_VAR 0 3
26192: PUSH
26193: LD_INT 0
26195: ST_TO_ADDR
// for i := 1 to 8 do
26196: LD_ADDR_VAR 0 1
26200: PUSH
26201: DOUBLE
26202: LD_INT 1
26204: DEC
26205: ST_TO_ADDR
26206: LD_INT 8
26208: PUSH
26209: FOR_TO
26210: IFFALSE 26258
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26212: LD_OWVAR 2
26216: PUSH
26217: LD_VAR 0 1
26221: NONEQUAL
26222: PUSH
26223: LD_OWVAR 2
26227: PPUSH
26228: LD_VAR 0 1
26232: PPUSH
26233: CALL_OW 81
26237: PUSH
26238: LD_INT 2
26240: EQUAL
26241: AND
26242: IFFALSE 26256
// begin side := i ;
26244: LD_ADDR_VAR 0 3
26248: PUSH
26249: LD_VAR 0 1
26253: ST_TO_ADDR
// break ;
26254: GO 26258
// end ;
26256: GO 26209
26258: POP
26259: POP
// if not side then
26260: LD_VAR 0 3
26264: NOT
26265: IFFALSE 26269
// exit ;
26267: GO 26314
// for i := 1 to tmp do
26269: LD_ADDR_VAR 0 1
26273: PUSH
26274: DOUBLE
26275: LD_INT 1
26277: DEC
26278: ST_TO_ADDR
26279: LD_VAR 0 2
26283: PUSH
26284: FOR_TO
26285: IFFALSE 26312
// if Prob ( 60 ) then
26287: LD_INT 60
26289: PPUSH
26290: CALL_OW 13
26294: IFFALSE 26310
// SetSide ( i , side ) ;
26296: LD_VAR 0 1
26300: PPUSH
26301: LD_VAR 0 3
26305: PPUSH
26306: CALL_OW 235
26310: GO 26284
26312: POP
26313: POP
// end ;
26314: PPOPN 3
26316: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26317: LD_EXP 63
26321: PUSH
26322: LD_EXP 76
26326: AND
26327: IFFALSE 26446
26329: GO 26331
26331: DISABLE
26332: LD_INT 0
26334: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26335: LD_ADDR_VAR 0 1
26339: PUSH
26340: LD_INT 22
26342: PUSH
26343: LD_OWVAR 2
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 21
26354: PUSH
26355: LD_INT 1
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 3
26364: PUSH
26365: LD_INT 23
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: LIST
26383: PPUSH
26384: CALL_OW 69
26388: PUSH
26389: FOR_IN
26390: IFFALSE 26444
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26392: LD_VAR 0 1
26396: PPUSH
26397: CALL_OW 257
26401: PUSH
26402: LD_INT 1
26404: PUSH
26405: LD_INT 2
26407: PUSH
26408: LD_INT 3
26410: PUSH
26411: LD_INT 4
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: IN
26420: IFFALSE 26442
// SetClass ( un , rand ( 1 , 4 ) ) ;
26422: LD_VAR 0 1
26426: PPUSH
26427: LD_INT 1
26429: PPUSH
26430: LD_INT 4
26432: PPUSH
26433: CALL_OW 12
26437: PPUSH
26438: CALL_OW 336
26442: GO 26389
26444: POP
26445: POP
// end ;
26446: PPOPN 1
26448: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26449: LD_EXP 63
26453: PUSH
26454: LD_EXP 75
26458: AND
26459: IFFALSE 26538
26461: GO 26463
26463: DISABLE
26464: LD_INT 0
26466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26467: LD_ADDR_VAR 0 1
26471: PUSH
26472: LD_INT 22
26474: PUSH
26475: LD_OWVAR 2
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 21
26486: PUSH
26487: LD_INT 3
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PPUSH
26498: CALL_OW 69
26502: ST_TO_ADDR
// if not tmp then
26503: LD_VAR 0 1
26507: NOT
26508: IFFALSE 26512
// exit ;
26510: GO 26538
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26512: LD_VAR 0 1
26516: PUSH
26517: LD_INT 1
26519: PPUSH
26520: LD_VAR 0 1
26524: PPUSH
26525: CALL_OW 12
26529: ARRAY
26530: PPUSH
26531: LD_INT 100
26533: PPUSH
26534: CALL_OW 234
// end ;
26538: PPOPN 1
26540: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26541: LD_EXP 63
26545: PUSH
26546: LD_EXP 77
26550: AND
26551: IFFALSE 26649
26553: GO 26555
26555: DISABLE
26556: LD_INT 0
26558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26559: LD_ADDR_VAR 0 1
26563: PUSH
26564: LD_INT 22
26566: PUSH
26567: LD_OWVAR 2
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 21
26578: PUSH
26579: LD_INT 1
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PPUSH
26590: CALL_OW 69
26594: ST_TO_ADDR
// if not tmp then
26595: LD_VAR 0 1
26599: NOT
26600: IFFALSE 26604
// exit ;
26602: GO 26649
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26604: LD_VAR 0 1
26608: PUSH
26609: LD_INT 1
26611: PPUSH
26612: LD_VAR 0 1
26616: PPUSH
26617: CALL_OW 12
26621: ARRAY
26622: PPUSH
26623: LD_INT 1
26625: PPUSH
26626: LD_INT 4
26628: PPUSH
26629: CALL_OW 12
26633: PPUSH
26634: LD_INT 3000
26636: PPUSH
26637: LD_INT 9000
26639: PPUSH
26640: CALL_OW 12
26644: PPUSH
26645: CALL_OW 492
// end ;
26649: PPOPN 1
26651: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26652: LD_EXP 63
26656: PUSH
26657: LD_EXP 78
26661: AND
26662: IFFALSE 26682
26664: GO 26666
26666: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26667: LD_INT 1
26669: PPUSH
26670: LD_OWVAR 2
26674: PPUSH
26675: LD_INT 0
26677: PPUSH
26678: CALL_OW 324
26682: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26683: LD_EXP 63
26687: PUSH
26688: LD_EXP 79
26692: AND
26693: IFFALSE 26776
26695: GO 26697
26697: DISABLE
26698: LD_INT 0
26700: PPUSH
26701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26702: LD_ADDR_VAR 0 2
26706: PUSH
26707: LD_INT 22
26709: PUSH
26710: LD_OWVAR 2
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 21
26721: PUSH
26722: LD_INT 3
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PPUSH
26733: CALL_OW 69
26737: ST_TO_ADDR
// if not tmp then
26738: LD_VAR 0 2
26742: NOT
26743: IFFALSE 26747
// exit ;
26745: GO 26776
// for i in tmp do
26747: LD_ADDR_VAR 0 1
26751: PUSH
26752: LD_VAR 0 2
26756: PUSH
26757: FOR_IN
26758: IFFALSE 26774
// SetBLevel ( i , 10 ) ;
26760: LD_VAR 0 1
26764: PPUSH
26765: LD_INT 10
26767: PPUSH
26768: CALL_OW 241
26772: GO 26757
26774: POP
26775: POP
// end ;
26776: PPOPN 2
26778: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26779: LD_EXP 63
26783: PUSH
26784: LD_EXP 80
26788: AND
26789: IFFALSE 26900
26791: GO 26793
26793: DISABLE
26794: LD_INT 0
26796: PPUSH
26797: PPUSH
26798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26799: LD_ADDR_VAR 0 3
26803: PUSH
26804: LD_INT 22
26806: PUSH
26807: LD_OWVAR 2
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 25
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PPUSH
26830: CALL_OW 69
26834: ST_TO_ADDR
// if not tmp then
26835: LD_VAR 0 3
26839: NOT
26840: IFFALSE 26844
// exit ;
26842: GO 26900
// un := tmp [ rand ( 1 , tmp ) ] ;
26844: LD_ADDR_VAR 0 2
26848: PUSH
26849: LD_VAR 0 3
26853: PUSH
26854: LD_INT 1
26856: PPUSH
26857: LD_VAR 0 3
26861: PPUSH
26862: CALL_OW 12
26866: ARRAY
26867: ST_TO_ADDR
// if Crawls ( un ) then
26868: LD_VAR 0 2
26872: PPUSH
26873: CALL_OW 318
26877: IFFALSE 26888
// ComWalk ( un ) ;
26879: LD_VAR 0 2
26883: PPUSH
26884: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26888: LD_VAR 0 2
26892: PPUSH
26893: LD_INT 5
26895: PPUSH
26896: CALL_OW 336
// end ;
26900: PPOPN 3
26902: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26903: LD_EXP 63
26907: PUSH
26908: LD_EXP 81
26912: AND
26913: PUSH
26914: LD_OWVAR 67
26918: PUSH
26919: LD_INT 4
26921: LESS
26922: AND
26923: IFFALSE 26942
26925: GO 26927
26927: DISABLE
// begin Difficulty := Difficulty + 1 ;
26928: LD_ADDR_OWVAR 67
26932: PUSH
26933: LD_OWVAR 67
26937: PUSH
26938: LD_INT 1
26940: PLUS
26941: ST_TO_ADDR
// end ;
26942: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26943: LD_EXP 63
26947: PUSH
26948: LD_EXP 82
26952: AND
26953: IFFALSE 27056
26955: GO 26957
26957: DISABLE
26958: LD_INT 0
26960: PPUSH
// begin for i := 1 to 5 do
26961: LD_ADDR_VAR 0 1
26965: PUSH
26966: DOUBLE
26967: LD_INT 1
26969: DEC
26970: ST_TO_ADDR
26971: LD_INT 5
26973: PUSH
26974: FOR_TO
26975: IFFALSE 27054
// begin uc_nation := nation_nature ;
26977: LD_ADDR_OWVAR 21
26981: PUSH
26982: LD_INT 0
26984: ST_TO_ADDR
// uc_side := 0 ;
26985: LD_ADDR_OWVAR 20
26989: PUSH
26990: LD_INT 0
26992: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26993: LD_ADDR_OWVAR 29
26997: PUSH
26998: LD_INT 12
27000: PUSH
27001: LD_INT 12
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: ST_TO_ADDR
// hc_agressivity := 20 ;
27008: LD_ADDR_OWVAR 35
27012: PUSH
27013: LD_INT 20
27015: ST_TO_ADDR
// hc_class := class_tiger ;
27016: LD_ADDR_OWVAR 28
27020: PUSH
27021: LD_INT 14
27023: ST_TO_ADDR
// hc_gallery :=  ;
27024: LD_ADDR_OWVAR 33
27028: PUSH
27029: LD_STRING 
27031: ST_TO_ADDR
// hc_name :=  ;
27032: LD_ADDR_OWVAR 26
27036: PUSH
27037: LD_STRING 
27039: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27040: CALL_OW 44
27044: PPUSH
27045: LD_INT 0
27047: PPUSH
27048: CALL_OW 51
// end ;
27052: GO 26974
27054: POP
27055: POP
// end ;
27056: PPOPN 1
27058: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27059: LD_EXP 63
27063: PUSH
27064: LD_EXP 83
27068: AND
27069: IFFALSE 27078
27071: GO 27073
27073: DISABLE
// StreamSibBomb ;
27074: CALL 27079 0 0
27078: END
// export function StreamSibBomb ; var i , x , y ; begin
27079: LD_INT 0
27081: PPUSH
27082: PPUSH
27083: PPUSH
27084: PPUSH
// result := false ;
27085: LD_ADDR_VAR 0 1
27089: PUSH
27090: LD_INT 0
27092: ST_TO_ADDR
// for i := 1 to 16 do
27093: LD_ADDR_VAR 0 2
27097: PUSH
27098: DOUBLE
27099: LD_INT 1
27101: DEC
27102: ST_TO_ADDR
27103: LD_INT 16
27105: PUSH
27106: FOR_TO
27107: IFFALSE 27306
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27109: LD_ADDR_VAR 0 3
27113: PUSH
27114: LD_INT 10
27116: PUSH
27117: LD_INT 20
27119: PUSH
27120: LD_INT 30
27122: PUSH
27123: LD_INT 40
27125: PUSH
27126: LD_INT 50
27128: PUSH
27129: LD_INT 60
27131: PUSH
27132: LD_INT 70
27134: PUSH
27135: LD_INT 80
27137: PUSH
27138: LD_INT 90
27140: PUSH
27141: LD_INT 100
27143: PUSH
27144: LD_INT 110
27146: PUSH
27147: LD_INT 120
27149: PUSH
27150: LD_INT 130
27152: PUSH
27153: LD_INT 140
27155: PUSH
27156: LD_INT 150
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 1
27178: PPUSH
27179: LD_INT 15
27181: PPUSH
27182: CALL_OW 12
27186: ARRAY
27187: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27188: LD_ADDR_VAR 0 4
27192: PUSH
27193: LD_INT 10
27195: PUSH
27196: LD_INT 20
27198: PUSH
27199: LD_INT 30
27201: PUSH
27202: LD_INT 40
27204: PUSH
27205: LD_INT 50
27207: PUSH
27208: LD_INT 60
27210: PUSH
27211: LD_INT 70
27213: PUSH
27214: LD_INT 80
27216: PUSH
27217: LD_INT 90
27219: PUSH
27220: LD_INT 100
27222: PUSH
27223: LD_INT 110
27225: PUSH
27226: LD_INT 120
27228: PUSH
27229: LD_INT 130
27231: PUSH
27232: LD_INT 140
27234: PUSH
27235: LD_INT 150
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 1
27257: PPUSH
27258: LD_INT 15
27260: PPUSH
27261: CALL_OW 12
27265: ARRAY
27266: ST_TO_ADDR
// if ValidHex ( x , y ) then
27267: LD_VAR 0 3
27271: PPUSH
27272: LD_VAR 0 4
27276: PPUSH
27277: CALL_OW 488
27281: IFFALSE 27304
// begin result := [ x , y ] ;
27283: LD_ADDR_VAR 0 1
27287: PUSH
27288: LD_VAR 0 3
27292: PUSH
27293: LD_VAR 0 4
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: ST_TO_ADDR
// break ;
27302: GO 27306
// end ; end ;
27304: GO 27106
27306: POP
27307: POP
// if result then
27308: LD_VAR 0 1
27312: IFFALSE 27372
// begin ToLua ( playSibBomb() ) ;
27314: LD_STRING playSibBomb()
27316: PPUSH
27317: CALL_OW 559
// wait ( 0 0$14 ) ;
27321: LD_INT 490
27323: PPUSH
27324: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27328: LD_VAR 0 1
27332: PUSH
27333: LD_INT 1
27335: ARRAY
27336: PPUSH
27337: LD_VAR 0 1
27341: PUSH
27342: LD_INT 2
27344: ARRAY
27345: PPUSH
27346: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27350: LD_VAR 0 1
27354: PUSH
27355: LD_INT 1
27357: ARRAY
27358: PPUSH
27359: LD_VAR 0 1
27363: PUSH
27364: LD_INT 2
27366: ARRAY
27367: PPUSH
27368: CALL_OW 429
// end ; end ;
27372: LD_VAR 0 1
27376: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27377: LD_EXP 63
27381: PUSH
27382: LD_EXP 85
27386: AND
27387: IFFALSE 27399
27389: GO 27391
27391: DISABLE
// YouLost (  ) ;
27392: LD_STRING 
27394: PPUSH
27395: CALL_OW 104
27399: END
// every 0 0$1 trigger StreamModeActive and sFog do
27400: LD_EXP 63
27404: PUSH
27405: LD_EXP 84
27409: AND
27410: IFFALSE 27424
27412: GO 27414
27414: DISABLE
// FogOff ( your_side ) ;
27415: LD_OWVAR 2
27419: PPUSH
27420: CALL_OW 344
27424: END
// every 0 0$1 trigger StreamModeActive and sSun do
27425: LD_EXP 63
27429: PUSH
27430: LD_EXP 86
27434: AND
27435: IFFALSE 27463
27437: GO 27439
27439: DISABLE
// begin solar_recharge_percent := 0 ;
27440: LD_ADDR_OWVAR 79
27444: PUSH
27445: LD_INT 0
27447: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27448: LD_INT 10500
27450: PPUSH
27451: CALL_OW 67
// solar_recharge_percent := 100 ;
27455: LD_ADDR_OWVAR 79
27459: PUSH
27460: LD_INT 100
27462: ST_TO_ADDR
// end ;
27463: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27464: LD_EXP 63
27468: PUSH
27469: LD_EXP 87
27473: AND
27474: IFFALSE 27713
27476: GO 27478
27478: DISABLE
27479: LD_INT 0
27481: PPUSH
27482: PPUSH
27483: PPUSH
// begin tmp := [ ] ;
27484: LD_ADDR_VAR 0 3
27488: PUSH
27489: EMPTY
27490: ST_TO_ADDR
// for i := 1 to 6 do
27491: LD_ADDR_VAR 0 1
27495: PUSH
27496: DOUBLE
27497: LD_INT 1
27499: DEC
27500: ST_TO_ADDR
27501: LD_INT 6
27503: PUSH
27504: FOR_TO
27505: IFFALSE 27610
// begin uc_nation := nation_nature ;
27507: LD_ADDR_OWVAR 21
27511: PUSH
27512: LD_INT 0
27514: ST_TO_ADDR
// uc_side := 0 ;
27515: LD_ADDR_OWVAR 20
27519: PUSH
27520: LD_INT 0
27522: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27523: LD_ADDR_OWVAR 29
27527: PUSH
27528: LD_INT 12
27530: PUSH
27531: LD_INT 12
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: ST_TO_ADDR
// hc_agressivity := 20 ;
27538: LD_ADDR_OWVAR 35
27542: PUSH
27543: LD_INT 20
27545: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27546: LD_ADDR_OWVAR 28
27550: PUSH
27551: LD_INT 17
27553: ST_TO_ADDR
// hc_gallery :=  ;
27554: LD_ADDR_OWVAR 33
27558: PUSH
27559: LD_STRING 
27561: ST_TO_ADDR
// hc_name :=  ;
27562: LD_ADDR_OWVAR 26
27566: PUSH
27567: LD_STRING 
27569: ST_TO_ADDR
// un := CreateHuman ;
27570: LD_ADDR_VAR 0 2
27574: PUSH
27575: CALL_OW 44
27579: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27580: LD_VAR 0 2
27584: PPUSH
27585: LD_INT 1
27587: PPUSH
27588: CALL_OW 51
// tmp := tmp ^ un ;
27592: LD_ADDR_VAR 0 3
27596: PUSH
27597: LD_VAR 0 3
27601: PUSH
27602: LD_VAR 0 2
27606: ADD
27607: ST_TO_ADDR
// end ;
27608: GO 27504
27610: POP
27611: POP
// repeat wait ( 0 0$1 ) ;
27612: LD_INT 35
27614: PPUSH
27615: CALL_OW 67
// for un in tmp do
27619: LD_ADDR_VAR 0 2
27623: PUSH
27624: LD_VAR 0 3
27628: PUSH
27629: FOR_IN
27630: IFFALSE 27704
// begin if IsDead ( un ) then
27632: LD_VAR 0 2
27636: PPUSH
27637: CALL_OW 301
27641: IFFALSE 27661
// begin tmp := tmp diff un ;
27643: LD_ADDR_VAR 0 3
27647: PUSH
27648: LD_VAR 0 3
27652: PUSH
27653: LD_VAR 0 2
27657: DIFF
27658: ST_TO_ADDR
// continue ;
27659: GO 27629
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27661: LD_VAR 0 2
27665: PPUSH
27666: LD_INT 3
27668: PUSH
27669: LD_INT 22
27671: PUSH
27672: LD_INT 0
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PPUSH
27683: CALL_OW 69
27687: PPUSH
27688: LD_VAR 0 2
27692: PPUSH
27693: CALL_OW 74
27697: PPUSH
27698: CALL_OW 115
// end ;
27702: GO 27629
27704: POP
27705: POP
// until not tmp ;
27706: LD_VAR 0 3
27710: NOT
27711: IFFALSE 27612
// end ;
27713: PPOPN 3
27715: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27716: LD_EXP 63
27720: PUSH
27721: LD_EXP 88
27725: AND
27726: IFFALSE 27780
27728: GO 27730
27730: DISABLE
// begin ToLua ( displayTroll(); ) ;
27731: LD_STRING displayTroll();
27733: PPUSH
27734: CALL_OW 559
// wait ( 3 3$00 ) ;
27738: LD_INT 6300
27740: PPUSH
27741: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27745: LD_STRING hideTroll();
27747: PPUSH
27748: CALL_OW 559
// wait ( 1 1$00 ) ;
27752: LD_INT 2100
27754: PPUSH
27755: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27759: LD_STRING displayTroll();
27761: PPUSH
27762: CALL_OW 559
// wait ( 1 1$00 ) ;
27766: LD_INT 2100
27768: PPUSH
27769: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27773: LD_STRING hideTroll();
27775: PPUSH
27776: CALL_OW 559
// end ;
27780: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27781: LD_EXP 63
27785: PUSH
27786: LD_EXP 89
27790: AND
27791: IFFALSE 27854
27793: GO 27795
27795: DISABLE
27796: LD_INT 0
27798: PPUSH
// begin p := 0 ;
27799: LD_ADDR_VAR 0 1
27803: PUSH
27804: LD_INT 0
27806: ST_TO_ADDR
// repeat game_speed := 1 ;
27807: LD_ADDR_OWVAR 65
27811: PUSH
27812: LD_INT 1
27814: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27815: LD_INT 35
27817: PPUSH
27818: CALL_OW 67
// p := p + 1 ;
27822: LD_ADDR_VAR 0 1
27826: PUSH
27827: LD_VAR 0 1
27831: PUSH
27832: LD_INT 1
27834: PLUS
27835: ST_TO_ADDR
// until p >= 60 ;
27836: LD_VAR 0 1
27840: PUSH
27841: LD_INT 60
27843: GREATEREQUAL
27844: IFFALSE 27807
// game_speed := 4 ;
27846: LD_ADDR_OWVAR 65
27850: PUSH
27851: LD_INT 4
27853: ST_TO_ADDR
// end ;
27854: PPOPN 1
27856: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27857: LD_EXP 63
27861: PUSH
27862: LD_EXP 90
27866: AND
27867: IFFALSE 28013
27869: GO 27871
27871: DISABLE
27872: LD_INT 0
27874: PPUSH
27875: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27876: LD_ADDR_VAR 0 1
27880: PUSH
27881: LD_INT 22
27883: PUSH
27884: LD_OWVAR 2
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 2
27895: PUSH
27896: LD_INT 30
27898: PUSH
27899: LD_INT 0
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 30
27908: PUSH
27909: LD_INT 1
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: LIST
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PPUSH
27925: CALL_OW 69
27929: ST_TO_ADDR
// if not depot then
27930: LD_VAR 0 1
27934: NOT
27935: IFFALSE 27939
// exit ;
27937: GO 28013
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27939: LD_ADDR_VAR 0 2
27943: PUSH
27944: LD_VAR 0 1
27948: PUSH
27949: LD_INT 1
27951: PPUSH
27952: LD_VAR 0 1
27956: PPUSH
27957: CALL_OW 12
27961: ARRAY
27962: PPUSH
27963: CALL_OW 274
27967: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27968: LD_VAR 0 2
27972: PPUSH
27973: LD_INT 1
27975: PPUSH
27976: LD_INT 0
27978: PPUSH
27979: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27983: LD_VAR 0 2
27987: PPUSH
27988: LD_INT 2
27990: PPUSH
27991: LD_INT 0
27993: PPUSH
27994: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27998: LD_VAR 0 2
28002: PPUSH
28003: LD_INT 3
28005: PPUSH
28006: LD_INT 0
28008: PPUSH
28009: CALL_OW 277
// end ;
28013: PPOPN 2
28015: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28016: LD_EXP 63
28020: PUSH
28021: LD_EXP 91
28025: AND
28026: IFFALSE 28123
28028: GO 28030
28030: DISABLE
28031: LD_INT 0
28033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28034: LD_ADDR_VAR 0 1
28038: PUSH
28039: LD_INT 22
28041: PUSH
28042: LD_OWVAR 2
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 21
28053: PUSH
28054: LD_INT 1
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 3
28063: PUSH
28064: LD_INT 23
28066: PUSH
28067: LD_INT 0
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: LIST
28082: PPUSH
28083: CALL_OW 69
28087: ST_TO_ADDR
// if not tmp then
28088: LD_VAR 0 1
28092: NOT
28093: IFFALSE 28097
// exit ;
28095: GO 28123
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28097: LD_VAR 0 1
28101: PUSH
28102: LD_INT 1
28104: PPUSH
28105: LD_VAR 0 1
28109: PPUSH
28110: CALL_OW 12
28114: ARRAY
28115: PPUSH
28116: LD_INT 200
28118: PPUSH
28119: CALL_OW 234
// end ;
28123: PPOPN 1
28125: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28126: LD_EXP 63
28130: PUSH
28131: LD_EXP 92
28135: AND
28136: IFFALSE 28215
28138: GO 28140
28140: DISABLE
28141: LD_INT 0
28143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28144: LD_ADDR_VAR 0 1
28148: PUSH
28149: LD_INT 22
28151: PUSH
28152: LD_OWVAR 2
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 21
28163: PUSH
28164: LD_INT 2
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PPUSH
28175: CALL_OW 69
28179: ST_TO_ADDR
// if not tmp then
28180: LD_VAR 0 1
28184: NOT
28185: IFFALSE 28189
// exit ;
28187: GO 28215
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28189: LD_VAR 0 1
28193: PUSH
28194: LD_INT 1
28196: PPUSH
28197: LD_VAR 0 1
28201: PPUSH
28202: CALL_OW 12
28206: ARRAY
28207: PPUSH
28208: LD_INT 60
28210: PPUSH
28211: CALL_OW 234
// end ;
28215: PPOPN 1
28217: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28218: LD_EXP 63
28222: PUSH
28223: LD_EXP 93
28227: AND
28228: IFFALSE 28327
28230: GO 28232
28232: DISABLE
28233: LD_INT 0
28235: PPUSH
28236: PPUSH
// begin enable ;
28237: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28238: LD_ADDR_VAR 0 1
28242: PUSH
28243: LD_INT 22
28245: PUSH
28246: LD_OWVAR 2
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 61
28257: PUSH
28258: EMPTY
28259: LIST
28260: PUSH
28261: LD_INT 33
28263: PUSH
28264: LD_INT 2
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: LIST
28275: PPUSH
28276: CALL_OW 69
28280: ST_TO_ADDR
// if not tmp then
28281: LD_VAR 0 1
28285: NOT
28286: IFFALSE 28290
// exit ;
28288: GO 28327
// for i in tmp do
28290: LD_ADDR_VAR 0 2
28294: PUSH
28295: LD_VAR 0 1
28299: PUSH
28300: FOR_IN
28301: IFFALSE 28325
// if IsControledBy ( i ) then
28303: LD_VAR 0 2
28307: PPUSH
28308: CALL_OW 312
28312: IFFALSE 28323
// ComUnlink ( i ) ;
28314: LD_VAR 0 2
28318: PPUSH
28319: CALL_OW 136
28323: GO 28300
28325: POP
28326: POP
// end ;
28327: PPOPN 2
28329: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28330: LD_EXP 63
28334: PUSH
28335: LD_EXP 94
28339: AND
28340: IFFALSE 28480
28342: GO 28344
28344: DISABLE
28345: LD_INT 0
28347: PPUSH
28348: PPUSH
// begin ToLua ( displayPowell(); ) ;
28349: LD_STRING displayPowell();
28351: PPUSH
28352: CALL_OW 559
// uc_side := 0 ;
28356: LD_ADDR_OWVAR 20
28360: PUSH
28361: LD_INT 0
28363: ST_TO_ADDR
// uc_nation := 2 ;
28364: LD_ADDR_OWVAR 21
28368: PUSH
28369: LD_INT 2
28371: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28372: LD_ADDR_OWVAR 37
28376: PUSH
28377: LD_INT 14
28379: ST_TO_ADDR
// vc_engine := engine_siberite ;
28380: LD_ADDR_OWVAR 39
28384: PUSH
28385: LD_INT 3
28387: ST_TO_ADDR
// vc_control := control_apeman ;
28388: LD_ADDR_OWVAR 38
28392: PUSH
28393: LD_INT 5
28395: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28396: LD_ADDR_OWVAR 40
28400: PUSH
28401: LD_INT 29
28403: ST_TO_ADDR
// un := CreateVehicle ;
28404: LD_ADDR_VAR 0 2
28408: PUSH
28409: CALL_OW 45
28413: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28414: LD_VAR 0 2
28418: PPUSH
28419: LD_INT 1
28421: PPUSH
28422: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28426: LD_INT 35
28428: PPUSH
28429: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28433: LD_VAR 0 2
28437: PPUSH
28438: LD_INT 22
28440: PUSH
28441: LD_OWVAR 2
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PPUSH
28450: CALL_OW 69
28454: PPUSH
28455: LD_VAR 0 2
28459: PPUSH
28460: CALL_OW 74
28464: PPUSH
28465: CALL_OW 115
// until IsDead ( un ) ;
28469: LD_VAR 0 2
28473: PPUSH
28474: CALL_OW 301
28478: IFFALSE 28426
// end ;
28480: PPOPN 2
28482: END
// every 0 0$1 trigger StreamModeActive and sStu do
28483: LD_EXP 63
28487: PUSH
28488: LD_EXP 102
28492: AND
28493: IFFALSE 28509
28495: GO 28497
28497: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28498: LD_STRING displayStucuk();
28500: PPUSH
28501: CALL_OW 559
// ResetFog ;
28505: CALL_OW 335
// end ;
28509: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28510: LD_EXP 63
28514: PUSH
28515: LD_EXP 95
28519: AND
28520: IFFALSE 28661
28522: GO 28524
28524: DISABLE
28525: LD_INT 0
28527: PPUSH
28528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28529: LD_ADDR_VAR 0 2
28533: PUSH
28534: LD_INT 22
28536: PUSH
28537: LD_OWVAR 2
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 21
28548: PUSH
28549: LD_INT 1
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PPUSH
28560: CALL_OW 69
28564: ST_TO_ADDR
// if not tmp then
28565: LD_VAR 0 2
28569: NOT
28570: IFFALSE 28574
// exit ;
28572: GO 28661
// un := tmp [ rand ( 1 , tmp ) ] ;
28574: LD_ADDR_VAR 0 1
28578: PUSH
28579: LD_VAR 0 2
28583: PUSH
28584: LD_INT 1
28586: PPUSH
28587: LD_VAR 0 2
28591: PPUSH
28592: CALL_OW 12
28596: ARRAY
28597: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28598: LD_VAR 0 1
28602: PPUSH
28603: LD_INT 0
28605: PPUSH
28606: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28610: LD_VAR 0 1
28614: PPUSH
28615: LD_OWVAR 3
28619: PUSH
28620: LD_VAR 0 1
28624: DIFF
28625: PPUSH
28626: LD_VAR 0 1
28630: PPUSH
28631: CALL_OW 74
28635: PPUSH
28636: CALL_OW 115
// wait ( 0 0$20 ) ;
28640: LD_INT 700
28642: PPUSH
28643: CALL_OW 67
// SetSide ( un , your_side ) ;
28647: LD_VAR 0 1
28651: PPUSH
28652: LD_OWVAR 2
28656: PPUSH
28657: CALL_OW 235
// end ;
28661: PPOPN 2
28663: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28664: LD_EXP 63
28668: PUSH
28669: LD_EXP 96
28673: AND
28674: IFFALSE 28780
28676: GO 28678
28678: DISABLE
28679: LD_INT 0
28681: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28682: LD_ADDR_VAR 0 1
28686: PUSH
28687: LD_INT 22
28689: PUSH
28690: LD_OWVAR 2
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 2
28701: PUSH
28702: LD_INT 30
28704: PUSH
28705: LD_INT 0
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 30
28714: PUSH
28715: LD_INT 1
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: LIST
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PPUSH
28731: CALL_OW 69
28735: ST_TO_ADDR
// if not depot then
28736: LD_VAR 0 1
28740: NOT
28741: IFFALSE 28745
// exit ;
28743: GO 28780
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28745: LD_VAR 0 1
28749: PUSH
28750: LD_INT 1
28752: ARRAY
28753: PPUSH
28754: CALL_OW 250
28758: PPUSH
28759: LD_VAR 0 1
28763: PUSH
28764: LD_INT 1
28766: ARRAY
28767: PPUSH
28768: CALL_OW 251
28772: PPUSH
28773: LD_INT 70
28775: PPUSH
28776: CALL_OW 495
// end ;
28780: PPOPN 1
28782: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28783: LD_EXP 63
28787: PUSH
28788: LD_EXP 97
28792: AND
28793: IFFALSE 29004
28795: GO 28797
28797: DISABLE
28798: LD_INT 0
28800: PPUSH
28801: PPUSH
28802: PPUSH
28803: PPUSH
28804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28805: LD_ADDR_VAR 0 5
28809: PUSH
28810: LD_INT 22
28812: PUSH
28813: LD_OWVAR 2
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 21
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PPUSH
28836: CALL_OW 69
28840: ST_TO_ADDR
// if not tmp then
28841: LD_VAR 0 5
28845: NOT
28846: IFFALSE 28850
// exit ;
28848: GO 29004
// for i in tmp do
28850: LD_ADDR_VAR 0 1
28854: PUSH
28855: LD_VAR 0 5
28859: PUSH
28860: FOR_IN
28861: IFFALSE 29002
// begin d := rand ( 0 , 5 ) ;
28863: LD_ADDR_VAR 0 4
28867: PUSH
28868: LD_INT 0
28870: PPUSH
28871: LD_INT 5
28873: PPUSH
28874: CALL_OW 12
28878: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28879: LD_ADDR_VAR 0 2
28883: PUSH
28884: LD_VAR 0 1
28888: PPUSH
28889: CALL_OW 250
28893: PPUSH
28894: LD_VAR 0 4
28898: PPUSH
28899: LD_INT 3
28901: PPUSH
28902: LD_INT 12
28904: PPUSH
28905: CALL_OW 12
28909: PPUSH
28910: CALL_OW 272
28914: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28915: LD_ADDR_VAR 0 3
28919: PUSH
28920: LD_VAR 0 1
28924: PPUSH
28925: CALL_OW 251
28929: PPUSH
28930: LD_VAR 0 4
28934: PPUSH
28935: LD_INT 3
28937: PPUSH
28938: LD_INT 12
28940: PPUSH
28941: CALL_OW 12
28945: PPUSH
28946: CALL_OW 273
28950: ST_TO_ADDR
// if ValidHex ( x , y ) then
28951: LD_VAR 0 2
28955: PPUSH
28956: LD_VAR 0 3
28960: PPUSH
28961: CALL_OW 488
28965: IFFALSE 29000
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28967: LD_VAR 0 1
28971: PPUSH
28972: LD_VAR 0 2
28976: PPUSH
28977: LD_VAR 0 3
28981: PPUSH
28982: LD_INT 3
28984: PPUSH
28985: LD_INT 6
28987: PPUSH
28988: CALL_OW 12
28992: PPUSH
28993: LD_INT 1
28995: PPUSH
28996: CALL_OW 483
// end ;
29000: GO 28860
29002: POP
29003: POP
// end ;
29004: PPOPN 5
29006: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29007: LD_EXP 63
29011: PUSH
29012: LD_EXP 98
29016: AND
29017: IFFALSE 29111
29019: GO 29021
29021: DISABLE
29022: LD_INT 0
29024: PPUSH
29025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29026: LD_ADDR_VAR 0 2
29030: PUSH
29031: LD_INT 22
29033: PUSH
29034: LD_OWVAR 2
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 32
29045: PUSH
29046: LD_INT 1
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 21
29055: PUSH
29056: LD_INT 2
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: LIST
29067: PPUSH
29068: CALL_OW 69
29072: ST_TO_ADDR
// if not tmp then
29073: LD_VAR 0 2
29077: NOT
29078: IFFALSE 29082
// exit ;
29080: GO 29111
// for i in tmp do
29082: LD_ADDR_VAR 0 1
29086: PUSH
29087: LD_VAR 0 2
29091: PUSH
29092: FOR_IN
29093: IFFALSE 29109
// SetFuel ( i , 0 ) ;
29095: LD_VAR 0 1
29099: PPUSH
29100: LD_INT 0
29102: PPUSH
29103: CALL_OW 240
29107: GO 29092
29109: POP
29110: POP
// end ;
29111: PPOPN 2
29113: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29114: LD_EXP 63
29118: PUSH
29119: LD_EXP 99
29123: AND
29124: IFFALSE 29190
29126: GO 29128
29128: DISABLE
29129: LD_INT 0
29131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29132: LD_ADDR_VAR 0 1
29136: PUSH
29137: LD_INT 22
29139: PUSH
29140: LD_OWVAR 2
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 30
29151: PUSH
29152: LD_INT 29
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PPUSH
29163: CALL_OW 69
29167: ST_TO_ADDR
// if not tmp then
29168: LD_VAR 0 1
29172: NOT
29173: IFFALSE 29177
// exit ;
29175: GO 29190
// DestroyUnit ( tmp [ 1 ] ) ;
29177: LD_VAR 0 1
29181: PUSH
29182: LD_INT 1
29184: ARRAY
29185: PPUSH
29186: CALL_OW 65
// end ;
29190: PPOPN 1
29192: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29193: LD_EXP 63
29197: PUSH
29198: LD_EXP 101
29202: AND
29203: IFFALSE 29332
29205: GO 29207
29207: DISABLE
29208: LD_INT 0
29210: PPUSH
// begin uc_side := 0 ;
29211: LD_ADDR_OWVAR 20
29215: PUSH
29216: LD_INT 0
29218: ST_TO_ADDR
// uc_nation := nation_arabian ;
29219: LD_ADDR_OWVAR 21
29223: PUSH
29224: LD_INT 2
29226: ST_TO_ADDR
// hc_gallery :=  ;
29227: LD_ADDR_OWVAR 33
29231: PUSH
29232: LD_STRING 
29234: ST_TO_ADDR
// hc_name :=  ;
29235: LD_ADDR_OWVAR 26
29239: PUSH
29240: LD_STRING 
29242: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29243: LD_INT 1
29245: PPUSH
29246: LD_INT 11
29248: PPUSH
29249: LD_INT 10
29251: PPUSH
29252: CALL_OW 380
// un := CreateHuman ;
29256: LD_ADDR_VAR 0 1
29260: PUSH
29261: CALL_OW 44
29265: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29266: LD_VAR 0 1
29270: PPUSH
29271: LD_INT 1
29273: PPUSH
29274: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29278: LD_INT 35
29280: PPUSH
29281: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29285: LD_VAR 0 1
29289: PPUSH
29290: LD_INT 22
29292: PUSH
29293: LD_OWVAR 2
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PPUSH
29302: CALL_OW 69
29306: PPUSH
29307: LD_VAR 0 1
29311: PPUSH
29312: CALL_OW 74
29316: PPUSH
29317: CALL_OW 115
// until IsDead ( un ) ;
29321: LD_VAR 0 1
29325: PPUSH
29326: CALL_OW 301
29330: IFFALSE 29278
// end ;
29332: PPOPN 1
29334: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29335: LD_EXP 63
29339: PUSH
29340: LD_EXP 103
29344: AND
29345: IFFALSE 29357
29347: GO 29349
29349: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29350: LD_STRING earthquake(getX(game), 0, 32)
29352: PPUSH
29353: CALL_OW 559
29357: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29358: LD_EXP 63
29362: PUSH
29363: LD_EXP 104
29367: AND
29368: IFFALSE 29459
29370: GO 29372
29372: DISABLE
29373: LD_INT 0
29375: PPUSH
// begin enable ;
29376: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29377: LD_ADDR_VAR 0 1
29381: PUSH
29382: LD_INT 22
29384: PUSH
29385: LD_OWVAR 2
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 21
29396: PUSH
29397: LD_INT 2
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 33
29406: PUSH
29407: LD_INT 3
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: LIST
29418: PPUSH
29419: CALL_OW 69
29423: ST_TO_ADDR
// if not tmp then
29424: LD_VAR 0 1
29428: NOT
29429: IFFALSE 29433
// exit ;
29431: GO 29459
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29433: LD_VAR 0 1
29437: PUSH
29438: LD_INT 1
29440: PPUSH
29441: LD_VAR 0 1
29445: PPUSH
29446: CALL_OW 12
29450: ARRAY
29451: PPUSH
29452: LD_INT 1
29454: PPUSH
29455: CALL_OW 234
// end ;
29459: PPOPN 1
29461: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29462: LD_EXP 63
29466: PUSH
29467: LD_EXP 105
29471: AND
29472: IFFALSE 29613
29474: GO 29476
29476: DISABLE
29477: LD_INT 0
29479: PPUSH
29480: PPUSH
29481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29482: LD_ADDR_VAR 0 3
29486: PUSH
29487: LD_INT 22
29489: PUSH
29490: LD_OWVAR 2
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 25
29501: PUSH
29502: LD_INT 1
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PPUSH
29513: CALL_OW 69
29517: ST_TO_ADDR
// if not tmp then
29518: LD_VAR 0 3
29522: NOT
29523: IFFALSE 29527
// exit ;
29525: GO 29613
// un := tmp [ rand ( 1 , tmp ) ] ;
29527: LD_ADDR_VAR 0 2
29531: PUSH
29532: LD_VAR 0 3
29536: PUSH
29537: LD_INT 1
29539: PPUSH
29540: LD_VAR 0 3
29544: PPUSH
29545: CALL_OW 12
29549: ARRAY
29550: ST_TO_ADDR
// if Crawls ( un ) then
29551: LD_VAR 0 2
29555: PPUSH
29556: CALL_OW 318
29560: IFFALSE 29571
// ComWalk ( un ) ;
29562: LD_VAR 0 2
29566: PPUSH
29567: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29571: LD_VAR 0 2
29575: PPUSH
29576: LD_INT 9
29578: PPUSH
29579: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29583: LD_INT 28
29585: PPUSH
29586: LD_OWVAR 2
29590: PPUSH
29591: LD_INT 2
29593: PPUSH
29594: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29598: LD_INT 29
29600: PPUSH
29601: LD_OWVAR 2
29605: PPUSH
29606: LD_INT 2
29608: PPUSH
29609: CALL_OW 322
// end ;
29613: PPOPN 3
29615: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29616: LD_EXP 63
29620: PUSH
29621: LD_EXP 106
29625: AND
29626: IFFALSE 29737
29628: GO 29630
29630: DISABLE
29631: LD_INT 0
29633: PPUSH
29634: PPUSH
29635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29636: LD_ADDR_VAR 0 3
29640: PUSH
29641: LD_INT 22
29643: PUSH
29644: LD_OWVAR 2
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 25
29655: PUSH
29656: LD_INT 1
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PPUSH
29667: CALL_OW 69
29671: ST_TO_ADDR
// if not tmp then
29672: LD_VAR 0 3
29676: NOT
29677: IFFALSE 29681
// exit ;
29679: GO 29737
// un := tmp [ rand ( 1 , tmp ) ] ;
29681: LD_ADDR_VAR 0 2
29685: PUSH
29686: LD_VAR 0 3
29690: PUSH
29691: LD_INT 1
29693: PPUSH
29694: LD_VAR 0 3
29698: PPUSH
29699: CALL_OW 12
29703: ARRAY
29704: ST_TO_ADDR
// if Crawls ( un ) then
29705: LD_VAR 0 2
29709: PPUSH
29710: CALL_OW 318
29714: IFFALSE 29725
// ComWalk ( un ) ;
29716: LD_VAR 0 2
29720: PPUSH
29721: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29725: LD_VAR 0 2
29729: PPUSH
29730: LD_INT 8
29732: PPUSH
29733: CALL_OW 336
// end ;
29737: PPOPN 3
29739: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29740: LD_EXP 63
29744: PUSH
29745: LD_EXP 107
29749: AND
29750: IFFALSE 29894
29752: GO 29754
29754: DISABLE
29755: LD_INT 0
29757: PPUSH
29758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29759: LD_ADDR_VAR 0 2
29763: PUSH
29764: LD_INT 22
29766: PUSH
29767: LD_OWVAR 2
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 21
29778: PUSH
29779: LD_INT 2
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 2
29788: PUSH
29789: LD_INT 34
29791: PUSH
29792: LD_INT 12
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 34
29801: PUSH
29802: LD_INT 51
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 34
29811: PUSH
29812: LD_INT 32
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: LIST
29829: PPUSH
29830: CALL_OW 69
29834: ST_TO_ADDR
// if not tmp then
29835: LD_VAR 0 2
29839: NOT
29840: IFFALSE 29844
// exit ;
29842: GO 29894
// for i in tmp do
29844: LD_ADDR_VAR 0 1
29848: PUSH
29849: LD_VAR 0 2
29853: PUSH
29854: FOR_IN
29855: IFFALSE 29892
// if GetCargo ( i , mat_artifact ) = 0 then
29857: LD_VAR 0 1
29861: PPUSH
29862: LD_INT 4
29864: PPUSH
29865: CALL_OW 289
29869: PUSH
29870: LD_INT 0
29872: EQUAL
29873: IFFALSE 29890
// SetCargo ( i , mat_siberit , 100 ) ;
29875: LD_VAR 0 1
29879: PPUSH
29880: LD_INT 3
29882: PPUSH
29883: LD_INT 100
29885: PPUSH
29886: CALL_OW 290
29890: GO 29854
29892: POP
29893: POP
// end ;
29894: PPOPN 2
29896: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29897: LD_EXP 63
29901: PUSH
29902: LD_EXP 108
29906: AND
29907: IFFALSE 30090
29909: GO 29911
29911: DISABLE
29912: LD_INT 0
29914: PPUSH
29915: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29916: LD_ADDR_VAR 0 2
29920: PUSH
29921: LD_INT 22
29923: PUSH
29924: LD_OWVAR 2
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PPUSH
29933: CALL_OW 69
29937: ST_TO_ADDR
// if not tmp then
29938: LD_VAR 0 2
29942: NOT
29943: IFFALSE 29947
// exit ;
29945: GO 30090
// for i := 1 to 2 do
29947: LD_ADDR_VAR 0 1
29951: PUSH
29952: DOUBLE
29953: LD_INT 1
29955: DEC
29956: ST_TO_ADDR
29957: LD_INT 2
29959: PUSH
29960: FOR_TO
29961: IFFALSE 30088
// begin uc_side := your_side ;
29963: LD_ADDR_OWVAR 20
29967: PUSH
29968: LD_OWVAR 2
29972: ST_TO_ADDR
// uc_nation := nation_american ;
29973: LD_ADDR_OWVAR 21
29977: PUSH
29978: LD_INT 1
29980: ST_TO_ADDR
// vc_chassis := us_morphling ;
29981: LD_ADDR_OWVAR 37
29985: PUSH
29986: LD_INT 5
29988: ST_TO_ADDR
// vc_engine := engine_siberite ;
29989: LD_ADDR_OWVAR 39
29993: PUSH
29994: LD_INT 3
29996: ST_TO_ADDR
// vc_control := control_computer ;
29997: LD_ADDR_OWVAR 38
30001: PUSH
30002: LD_INT 3
30004: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30005: LD_ADDR_OWVAR 40
30009: PUSH
30010: LD_INT 10
30012: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30013: LD_VAR 0 2
30017: PUSH
30018: LD_INT 1
30020: ARRAY
30021: PPUSH
30022: CALL_OW 310
30026: NOT
30027: IFFALSE 30074
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30029: CALL_OW 45
30033: PPUSH
30034: LD_VAR 0 2
30038: PUSH
30039: LD_INT 1
30041: ARRAY
30042: PPUSH
30043: CALL_OW 250
30047: PPUSH
30048: LD_VAR 0 2
30052: PUSH
30053: LD_INT 1
30055: ARRAY
30056: PPUSH
30057: CALL_OW 251
30061: PPUSH
30062: LD_INT 12
30064: PPUSH
30065: LD_INT 1
30067: PPUSH
30068: CALL_OW 50
30072: GO 30086
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30074: CALL_OW 45
30078: PPUSH
30079: LD_INT 1
30081: PPUSH
30082: CALL_OW 51
// end ;
30086: GO 29960
30088: POP
30089: POP
// end ;
30090: PPOPN 2
30092: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30093: LD_EXP 63
30097: PUSH
30098: LD_EXP 109
30102: AND
30103: IFFALSE 30325
30105: GO 30107
30107: DISABLE
30108: LD_INT 0
30110: PPUSH
30111: PPUSH
30112: PPUSH
30113: PPUSH
30114: PPUSH
30115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30116: LD_ADDR_VAR 0 6
30120: PUSH
30121: LD_INT 22
30123: PUSH
30124: LD_OWVAR 2
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 21
30135: PUSH
30136: LD_INT 1
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 3
30145: PUSH
30146: LD_INT 23
30148: PUSH
30149: LD_INT 0
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: LIST
30164: PPUSH
30165: CALL_OW 69
30169: ST_TO_ADDR
// if not tmp then
30170: LD_VAR 0 6
30174: NOT
30175: IFFALSE 30179
// exit ;
30177: GO 30325
// s1 := rand ( 1 , 4 ) ;
30179: LD_ADDR_VAR 0 2
30183: PUSH
30184: LD_INT 1
30186: PPUSH
30187: LD_INT 4
30189: PPUSH
30190: CALL_OW 12
30194: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30195: LD_ADDR_VAR 0 4
30199: PUSH
30200: LD_VAR 0 6
30204: PUSH
30205: LD_INT 1
30207: ARRAY
30208: PPUSH
30209: LD_VAR 0 2
30213: PPUSH
30214: CALL_OW 259
30218: ST_TO_ADDR
// if s1 = 1 then
30219: LD_VAR 0 2
30223: PUSH
30224: LD_INT 1
30226: EQUAL
30227: IFFALSE 30247
// s2 := rand ( 2 , 4 ) else
30229: LD_ADDR_VAR 0 3
30233: PUSH
30234: LD_INT 2
30236: PPUSH
30237: LD_INT 4
30239: PPUSH
30240: CALL_OW 12
30244: ST_TO_ADDR
30245: GO 30255
// s2 := 1 ;
30247: LD_ADDR_VAR 0 3
30251: PUSH
30252: LD_INT 1
30254: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30255: LD_ADDR_VAR 0 5
30259: PUSH
30260: LD_VAR 0 6
30264: PUSH
30265: LD_INT 1
30267: ARRAY
30268: PPUSH
30269: LD_VAR 0 3
30273: PPUSH
30274: CALL_OW 259
30278: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30279: LD_VAR 0 6
30283: PUSH
30284: LD_INT 1
30286: ARRAY
30287: PPUSH
30288: LD_VAR 0 2
30292: PPUSH
30293: LD_VAR 0 5
30297: PPUSH
30298: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30302: LD_VAR 0 6
30306: PUSH
30307: LD_INT 1
30309: ARRAY
30310: PPUSH
30311: LD_VAR 0 3
30315: PPUSH
30316: LD_VAR 0 4
30320: PPUSH
30321: CALL_OW 237
// end ;
30325: PPOPN 6
30327: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30328: LD_EXP 63
30332: PUSH
30333: LD_EXP 110
30337: AND
30338: IFFALSE 30417
30340: GO 30342
30342: DISABLE
30343: LD_INT 0
30345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30346: LD_ADDR_VAR 0 1
30350: PUSH
30351: LD_INT 22
30353: PUSH
30354: LD_OWVAR 2
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 30
30365: PUSH
30366: LD_INT 3
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PPUSH
30377: CALL_OW 69
30381: ST_TO_ADDR
// if not tmp then
30382: LD_VAR 0 1
30386: NOT
30387: IFFALSE 30391
// exit ;
30389: GO 30417
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30391: LD_VAR 0 1
30395: PUSH
30396: LD_INT 1
30398: PPUSH
30399: LD_VAR 0 1
30403: PPUSH
30404: CALL_OW 12
30408: ARRAY
30409: PPUSH
30410: LD_INT 1
30412: PPUSH
30413: CALL_OW 234
// end ;
30417: PPOPN 1
30419: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30420: LD_EXP 63
30424: PUSH
30425: LD_EXP 111
30429: AND
30430: IFFALSE 30542
30432: GO 30434
30434: DISABLE
30435: LD_INT 0
30437: PPUSH
30438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30439: LD_ADDR_VAR 0 2
30443: PUSH
30444: LD_INT 22
30446: PUSH
30447: LD_OWVAR 2
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 2
30458: PUSH
30459: LD_INT 30
30461: PUSH
30462: LD_INT 27
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 30
30471: PUSH
30472: LD_INT 26
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 30
30481: PUSH
30482: LD_INT 28
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PPUSH
30499: CALL_OW 69
30503: ST_TO_ADDR
// if not tmp then
30504: LD_VAR 0 2
30508: NOT
30509: IFFALSE 30513
// exit ;
30511: GO 30542
// for i in tmp do
30513: LD_ADDR_VAR 0 1
30517: PUSH
30518: LD_VAR 0 2
30522: PUSH
30523: FOR_IN
30524: IFFALSE 30540
// SetLives ( i , 1 ) ;
30526: LD_VAR 0 1
30530: PPUSH
30531: LD_INT 1
30533: PPUSH
30534: CALL_OW 234
30538: GO 30523
30540: POP
30541: POP
// end ;
30542: PPOPN 2
30544: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30545: LD_EXP 63
30549: PUSH
30550: LD_EXP 112
30554: AND
30555: IFFALSE 30842
30557: GO 30559
30559: DISABLE
30560: LD_INT 0
30562: PPUSH
30563: PPUSH
30564: PPUSH
// begin i := rand ( 1 , 7 ) ;
30565: LD_ADDR_VAR 0 1
30569: PUSH
30570: LD_INT 1
30572: PPUSH
30573: LD_INT 7
30575: PPUSH
30576: CALL_OW 12
30580: ST_TO_ADDR
// case i of 1 :
30581: LD_VAR 0 1
30585: PUSH
30586: LD_INT 1
30588: DOUBLE
30589: EQUAL
30590: IFTRUE 30594
30592: GO 30604
30594: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30595: LD_STRING earthquake(getX(game), 0, 32)
30597: PPUSH
30598: CALL_OW 559
30602: GO 30842
30604: LD_INT 2
30606: DOUBLE
30607: EQUAL
30608: IFTRUE 30612
30610: GO 30626
30612: POP
// begin ToLua ( displayStucuk(); ) ;
30613: LD_STRING displayStucuk();
30615: PPUSH
30616: CALL_OW 559
// ResetFog ;
30620: CALL_OW 335
// end ; 3 :
30624: GO 30842
30626: LD_INT 3
30628: DOUBLE
30629: EQUAL
30630: IFTRUE 30634
30632: GO 30738
30634: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30635: LD_ADDR_VAR 0 2
30639: PUSH
30640: LD_INT 22
30642: PUSH
30643: LD_OWVAR 2
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 25
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PPUSH
30666: CALL_OW 69
30670: ST_TO_ADDR
// if not tmp then
30671: LD_VAR 0 2
30675: NOT
30676: IFFALSE 30680
// exit ;
30678: GO 30842
// un := tmp [ rand ( 1 , tmp ) ] ;
30680: LD_ADDR_VAR 0 3
30684: PUSH
30685: LD_VAR 0 2
30689: PUSH
30690: LD_INT 1
30692: PPUSH
30693: LD_VAR 0 2
30697: PPUSH
30698: CALL_OW 12
30702: ARRAY
30703: ST_TO_ADDR
// if Crawls ( un ) then
30704: LD_VAR 0 3
30708: PPUSH
30709: CALL_OW 318
30713: IFFALSE 30724
// ComWalk ( un ) ;
30715: LD_VAR 0 3
30719: PPUSH
30720: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30724: LD_VAR 0 3
30728: PPUSH
30729: LD_INT 8
30731: PPUSH
30732: CALL_OW 336
// end ; 4 :
30736: GO 30842
30738: LD_INT 4
30740: DOUBLE
30741: EQUAL
30742: IFTRUE 30746
30744: GO 30820
30746: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30747: LD_ADDR_VAR 0 2
30751: PUSH
30752: LD_INT 22
30754: PUSH
30755: LD_OWVAR 2
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 30
30766: PUSH
30767: LD_INT 29
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PPUSH
30778: CALL_OW 69
30782: ST_TO_ADDR
// if not tmp then
30783: LD_VAR 0 2
30787: NOT
30788: IFFALSE 30792
// exit ;
30790: GO 30842
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30792: LD_VAR 0 2
30796: PUSH
30797: LD_INT 1
30799: ARRAY
30800: PPUSH
30801: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30805: LD_VAR 0 2
30809: PUSH
30810: LD_INT 1
30812: ARRAY
30813: PPUSH
30814: CALL_OW 65
// end ; 5 .. 7 :
30818: GO 30842
30820: LD_INT 5
30822: DOUBLE
30823: GREATEREQUAL
30824: IFFALSE 30832
30826: LD_INT 7
30828: DOUBLE
30829: LESSEQUAL
30830: IFTRUE 30834
30832: GO 30841
30834: POP
// StreamSibBomb ; end ;
30835: CALL 27079 0 0
30839: GO 30842
30841: POP
// end ;
30842: PPOPN 3
30844: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30845: LD_EXP 63
30849: PUSH
30850: LD_EXP 113
30854: AND
30855: IFFALSE 31011
30857: GO 30859
30859: DISABLE
30860: LD_INT 0
30862: PPUSH
30863: PPUSH
30864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30865: LD_ADDR_VAR 0 2
30869: PUSH
30870: LD_INT 81
30872: PUSH
30873: LD_OWVAR 2
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 2
30884: PUSH
30885: LD_INT 21
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 21
30897: PUSH
30898: LD_INT 2
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: LIST
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PPUSH
30914: CALL_OW 69
30918: ST_TO_ADDR
// if not tmp then
30919: LD_VAR 0 2
30923: NOT
30924: IFFALSE 30928
// exit ;
30926: GO 31011
// p := 0 ;
30928: LD_ADDR_VAR 0 3
30932: PUSH
30933: LD_INT 0
30935: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30936: LD_INT 35
30938: PPUSH
30939: CALL_OW 67
// p := p + 1 ;
30943: LD_ADDR_VAR 0 3
30947: PUSH
30948: LD_VAR 0 3
30952: PUSH
30953: LD_INT 1
30955: PLUS
30956: ST_TO_ADDR
// for i in tmp do
30957: LD_ADDR_VAR 0 1
30961: PUSH
30962: LD_VAR 0 2
30966: PUSH
30967: FOR_IN
30968: IFFALSE 30999
// if GetLives ( i ) < 1000 then
30970: LD_VAR 0 1
30974: PPUSH
30975: CALL_OW 256
30979: PUSH
30980: LD_INT 1000
30982: LESS
30983: IFFALSE 30997
// SetLives ( i , 1000 ) ;
30985: LD_VAR 0 1
30989: PPUSH
30990: LD_INT 1000
30992: PPUSH
30993: CALL_OW 234
30997: GO 30967
30999: POP
31000: POP
// until p > 20 ;
31001: LD_VAR 0 3
31005: PUSH
31006: LD_INT 20
31008: GREATER
31009: IFFALSE 30936
// end ;
31011: PPOPN 3
31013: END
// every 0 0$1 trigger StreamModeActive and sTime do
31014: LD_EXP 63
31018: PUSH
31019: LD_EXP 114
31023: AND
31024: IFFALSE 31059
31026: GO 31028
31028: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31029: LD_INT 28
31031: PPUSH
31032: LD_OWVAR 2
31036: PPUSH
31037: LD_INT 2
31039: PPUSH
31040: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31044: LD_INT 30
31046: PPUSH
31047: LD_OWVAR 2
31051: PPUSH
31052: LD_INT 2
31054: PPUSH
31055: CALL_OW 322
// end ;
31059: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31060: LD_EXP 63
31064: PUSH
31065: LD_EXP 115
31069: AND
31070: IFFALSE 31191
31072: GO 31074
31074: DISABLE
31075: LD_INT 0
31077: PPUSH
31078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31079: LD_ADDR_VAR 0 2
31083: PUSH
31084: LD_INT 22
31086: PUSH
31087: LD_OWVAR 2
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 21
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 3
31108: PUSH
31109: LD_INT 23
31111: PUSH
31112: LD_INT 0
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: PPUSH
31128: CALL_OW 69
31132: ST_TO_ADDR
// if not tmp then
31133: LD_VAR 0 2
31137: NOT
31138: IFFALSE 31142
// exit ;
31140: GO 31191
// for i in tmp do
31142: LD_ADDR_VAR 0 1
31146: PUSH
31147: LD_VAR 0 2
31151: PUSH
31152: FOR_IN
31153: IFFALSE 31189
// begin if Crawls ( i ) then
31155: LD_VAR 0 1
31159: PPUSH
31160: CALL_OW 318
31164: IFFALSE 31175
// ComWalk ( i ) ;
31166: LD_VAR 0 1
31170: PPUSH
31171: CALL_OW 138
// SetClass ( i , 2 ) ;
31175: LD_VAR 0 1
31179: PPUSH
31180: LD_INT 2
31182: PPUSH
31183: CALL_OW 336
// end ;
31187: GO 31152
31189: POP
31190: POP
// end ;
31191: PPOPN 2
31193: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31194: LD_EXP 63
31198: PUSH
31199: LD_EXP 116
31203: AND
31204: IFFALSE 31492
31206: GO 31208
31208: DISABLE
31209: LD_INT 0
31211: PPUSH
31212: PPUSH
31213: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31214: LD_OWVAR 2
31218: PPUSH
31219: LD_INT 9
31221: PPUSH
31222: LD_INT 1
31224: PPUSH
31225: LD_INT 1
31227: PPUSH
31228: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31232: LD_INT 9
31234: PPUSH
31235: LD_OWVAR 2
31239: PPUSH
31240: CALL_OW 343
// uc_side := 9 ;
31244: LD_ADDR_OWVAR 20
31248: PUSH
31249: LD_INT 9
31251: ST_TO_ADDR
// uc_nation := 2 ;
31252: LD_ADDR_OWVAR 21
31256: PUSH
31257: LD_INT 2
31259: ST_TO_ADDR
// hc_name := Dark Warrior ;
31260: LD_ADDR_OWVAR 26
31264: PUSH
31265: LD_STRING Dark Warrior
31267: ST_TO_ADDR
// hc_gallery :=  ;
31268: LD_ADDR_OWVAR 33
31272: PUSH
31273: LD_STRING 
31275: ST_TO_ADDR
// hc_noskilllimit := true ;
31276: LD_ADDR_OWVAR 76
31280: PUSH
31281: LD_INT 1
31283: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31284: LD_ADDR_OWVAR 31
31288: PUSH
31289: LD_INT 30
31291: PUSH
31292: LD_INT 30
31294: PUSH
31295: LD_INT 30
31297: PUSH
31298: LD_INT 30
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: ST_TO_ADDR
// un := CreateHuman ;
31307: LD_ADDR_VAR 0 3
31311: PUSH
31312: CALL_OW 44
31316: ST_TO_ADDR
// hc_noskilllimit := false ;
31317: LD_ADDR_OWVAR 76
31321: PUSH
31322: LD_INT 0
31324: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31325: LD_VAR 0 3
31329: PPUSH
31330: LD_INT 1
31332: PPUSH
31333: CALL_OW 51
// ToLua ( playRanger() ) ;
31337: LD_STRING playRanger()
31339: PPUSH
31340: CALL_OW 559
// p := 0 ;
31344: LD_ADDR_VAR 0 2
31348: PUSH
31349: LD_INT 0
31351: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31352: LD_INT 35
31354: PPUSH
31355: CALL_OW 67
// p := p + 1 ;
31359: LD_ADDR_VAR 0 2
31363: PUSH
31364: LD_VAR 0 2
31368: PUSH
31369: LD_INT 1
31371: PLUS
31372: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31373: LD_VAR 0 3
31377: PPUSH
31378: CALL_OW 256
31382: PUSH
31383: LD_INT 1000
31385: LESS
31386: IFFALSE 31400
// SetLives ( un , 1000 ) ;
31388: LD_VAR 0 3
31392: PPUSH
31393: LD_INT 1000
31395: PPUSH
31396: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31400: LD_VAR 0 3
31404: PPUSH
31405: LD_INT 81
31407: PUSH
31408: LD_OWVAR 2
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 91
31419: PUSH
31420: LD_VAR 0 3
31424: PUSH
31425: LD_INT 30
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: LIST
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PPUSH
31437: CALL_OW 69
31441: PPUSH
31442: LD_VAR 0 3
31446: PPUSH
31447: CALL_OW 74
31451: PPUSH
31452: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31456: LD_VAR 0 2
31460: PUSH
31461: LD_INT 80
31463: GREATER
31464: PUSH
31465: LD_VAR 0 3
31469: PPUSH
31470: CALL_OW 301
31474: OR
31475: IFFALSE 31352
// if un then
31477: LD_VAR 0 3
31481: IFFALSE 31492
// RemoveUnit ( un ) ;
31483: LD_VAR 0 3
31487: PPUSH
31488: CALL_OW 64
// end ;
31492: PPOPN 3
31494: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31495: LD_EXP 117
31499: IFFALSE 31615
31501: GO 31503
31503: DISABLE
31504: LD_INT 0
31506: PPUSH
31507: PPUSH
31508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31509: LD_ADDR_VAR 0 2
31513: PUSH
31514: LD_INT 81
31516: PUSH
31517: LD_OWVAR 2
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 21
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PPUSH
31540: CALL_OW 69
31544: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31545: LD_STRING playComputer()
31547: PPUSH
31548: CALL_OW 559
// if not tmp then
31552: LD_VAR 0 2
31556: NOT
31557: IFFALSE 31561
// exit ;
31559: GO 31615
// for i in tmp do
31561: LD_ADDR_VAR 0 1
31565: PUSH
31566: LD_VAR 0 2
31570: PUSH
31571: FOR_IN
31572: IFFALSE 31613
// for j := 1 to 4 do
31574: LD_ADDR_VAR 0 3
31578: PUSH
31579: DOUBLE
31580: LD_INT 1
31582: DEC
31583: ST_TO_ADDR
31584: LD_INT 4
31586: PUSH
31587: FOR_TO
31588: IFFALSE 31609
// SetSkill ( i , j , 10 ) ;
31590: LD_VAR 0 1
31594: PPUSH
31595: LD_VAR 0 3
31599: PPUSH
31600: LD_INT 10
31602: PPUSH
31603: CALL_OW 237
31607: GO 31587
31609: POP
31610: POP
31611: GO 31571
31613: POP
31614: POP
// end ;
31615: PPOPN 3
31617: END
// every 0 0$1 trigger s30 do var i , tmp ;
31618: LD_EXP 118
31622: IFFALSE 31691
31624: GO 31626
31626: DISABLE
31627: LD_INT 0
31629: PPUSH
31630: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31631: LD_ADDR_VAR 0 2
31635: PUSH
31636: LD_INT 22
31638: PUSH
31639: LD_OWVAR 2
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PPUSH
31648: CALL_OW 69
31652: ST_TO_ADDR
// if not tmp then
31653: LD_VAR 0 2
31657: NOT
31658: IFFALSE 31662
// exit ;
31660: GO 31691
// for i in tmp do
31662: LD_ADDR_VAR 0 1
31666: PUSH
31667: LD_VAR 0 2
31671: PUSH
31672: FOR_IN
31673: IFFALSE 31689
// SetLives ( i , 300 ) ;
31675: LD_VAR 0 1
31679: PPUSH
31680: LD_INT 300
31682: PPUSH
31683: CALL_OW 234
31687: GO 31672
31689: POP
31690: POP
// end ;
31691: PPOPN 2
31693: END
// every 0 0$1 trigger s60 do var i , tmp ;
31694: LD_EXP 119
31698: IFFALSE 31767
31700: GO 31702
31702: DISABLE
31703: LD_INT 0
31705: PPUSH
31706: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31707: LD_ADDR_VAR 0 2
31711: PUSH
31712: LD_INT 22
31714: PUSH
31715: LD_OWVAR 2
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PPUSH
31724: CALL_OW 69
31728: ST_TO_ADDR
// if not tmp then
31729: LD_VAR 0 2
31733: NOT
31734: IFFALSE 31738
// exit ;
31736: GO 31767
// for i in tmp do
31738: LD_ADDR_VAR 0 1
31742: PUSH
31743: LD_VAR 0 2
31747: PUSH
31748: FOR_IN
31749: IFFALSE 31765
// SetLives ( i , 600 ) ;
31751: LD_VAR 0 1
31755: PPUSH
31756: LD_INT 600
31758: PPUSH
31759: CALL_OW 234
31763: GO 31748
31765: POP
31766: POP
// end ;
31767: PPOPN 2
31769: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31770: LD_INT 0
31772: PPUSH
// case cmd of 301 :
31773: LD_VAR 0 1
31777: PUSH
31778: LD_INT 301
31780: DOUBLE
31781: EQUAL
31782: IFTRUE 31786
31784: GO 31818
31786: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31787: LD_VAR 0 6
31791: PPUSH
31792: LD_VAR 0 7
31796: PPUSH
31797: LD_VAR 0 8
31801: PPUSH
31802: LD_VAR 0 4
31806: PPUSH
31807: LD_VAR 0 5
31811: PPUSH
31812: CALL 33027 0 5
31816: GO 31939
31818: LD_INT 302
31820: DOUBLE
31821: EQUAL
31822: IFTRUE 31826
31824: GO 31863
31826: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31827: LD_VAR 0 6
31831: PPUSH
31832: LD_VAR 0 7
31836: PPUSH
31837: LD_VAR 0 8
31841: PPUSH
31842: LD_VAR 0 9
31846: PPUSH
31847: LD_VAR 0 4
31851: PPUSH
31852: LD_VAR 0 5
31856: PPUSH
31857: CALL 33118 0 6
31861: GO 31939
31863: LD_INT 303
31865: DOUBLE
31866: EQUAL
31867: IFTRUE 31871
31869: GO 31908
31871: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31872: LD_VAR 0 6
31876: PPUSH
31877: LD_VAR 0 7
31881: PPUSH
31882: LD_VAR 0 8
31886: PPUSH
31887: LD_VAR 0 9
31891: PPUSH
31892: LD_VAR 0 4
31896: PPUSH
31897: LD_VAR 0 5
31901: PPUSH
31902: CALL 31944 0 6
31906: GO 31939
31908: LD_INT 304
31910: DOUBLE
31911: EQUAL
31912: IFTRUE 31916
31914: GO 31938
31916: POP
// hHackTeleport ( unit , x , y ) ; end ;
31917: LD_VAR 0 2
31921: PPUSH
31922: LD_VAR 0 4
31926: PPUSH
31927: LD_VAR 0 5
31931: PPUSH
31932: CALL 33711 0 3
31936: GO 31939
31938: POP
// end ;
31939: LD_VAR 0 12
31943: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31944: LD_INT 0
31946: PPUSH
31947: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31948: LD_VAR 0 1
31952: PUSH
31953: LD_INT 1
31955: LESS
31956: PUSH
31957: LD_VAR 0 1
31961: PUSH
31962: LD_INT 3
31964: GREATER
31965: OR
31966: PUSH
31967: LD_VAR 0 5
31971: PPUSH
31972: LD_VAR 0 6
31976: PPUSH
31977: CALL_OW 428
31981: OR
31982: IFFALSE 31986
// exit ;
31984: GO 32714
// uc_side := your_side ;
31986: LD_ADDR_OWVAR 20
31990: PUSH
31991: LD_OWVAR 2
31995: ST_TO_ADDR
// uc_nation := nation ;
31996: LD_ADDR_OWVAR 21
32000: PUSH
32001: LD_VAR 0 1
32005: ST_TO_ADDR
// bc_level = 1 ;
32006: LD_ADDR_OWVAR 43
32010: PUSH
32011: LD_INT 1
32013: ST_TO_ADDR
// case btype of 1 :
32014: LD_VAR 0 2
32018: PUSH
32019: LD_INT 1
32021: DOUBLE
32022: EQUAL
32023: IFTRUE 32027
32025: GO 32038
32027: POP
// bc_type := b_depot ; 2 :
32028: LD_ADDR_OWVAR 42
32032: PUSH
32033: LD_INT 0
32035: ST_TO_ADDR
32036: GO 32658
32038: LD_INT 2
32040: DOUBLE
32041: EQUAL
32042: IFTRUE 32046
32044: GO 32057
32046: POP
// bc_type := b_warehouse ; 3 :
32047: LD_ADDR_OWVAR 42
32051: PUSH
32052: LD_INT 1
32054: ST_TO_ADDR
32055: GO 32658
32057: LD_INT 3
32059: DOUBLE
32060: EQUAL
32061: IFTRUE 32065
32063: GO 32076
32065: POP
// bc_type := b_lab ; 4 .. 9 :
32066: LD_ADDR_OWVAR 42
32070: PUSH
32071: LD_INT 6
32073: ST_TO_ADDR
32074: GO 32658
32076: LD_INT 4
32078: DOUBLE
32079: GREATEREQUAL
32080: IFFALSE 32088
32082: LD_INT 9
32084: DOUBLE
32085: LESSEQUAL
32086: IFTRUE 32090
32088: GO 32150
32090: POP
// begin bc_type := b_lab_half ;
32091: LD_ADDR_OWVAR 42
32095: PUSH
32096: LD_INT 7
32098: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32099: LD_ADDR_OWVAR 44
32103: PUSH
32104: LD_INT 10
32106: PUSH
32107: LD_INT 11
32109: PUSH
32110: LD_INT 12
32112: PUSH
32113: LD_INT 15
32115: PUSH
32116: LD_INT 14
32118: PUSH
32119: LD_INT 13
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: PUSH
32130: LD_VAR 0 2
32134: PUSH
32135: LD_INT 3
32137: MINUS
32138: ARRAY
32139: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32140: LD_ADDR_OWVAR 45
32144: PUSH
32145: LD_INT 9
32147: ST_TO_ADDR
// end ; 10 .. 13 :
32148: GO 32658
32150: LD_INT 10
32152: DOUBLE
32153: GREATEREQUAL
32154: IFFALSE 32162
32156: LD_INT 13
32158: DOUBLE
32159: LESSEQUAL
32160: IFTRUE 32164
32162: GO 32241
32164: POP
// begin bc_type := b_lab_full ;
32165: LD_ADDR_OWVAR 42
32169: PUSH
32170: LD_INT 8
32172: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32173: LD_ADDR_OWVAR 44
32177: PUSH
32178: LD_INT 10
32180: PUSH
32181: LD_INT 12
32183: PUSH
32184: LD_INT 14
32186: PUSH
32187: LD_INT 13
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: PUSH
32196: LD_VAR 0 2
32200: PUSH
32201: LD_INT 9
32203: MINUS
32204: ARRAY
32205: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32206: LD_ADDR_OWVAR 45
32210: PUSH
32211: LD_INT 11
32213: PUSH
32214: LD_INT 15
32216: PUSH
32217: LD_INT 12
32219: PUSH
32220: LD_INT 15
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: PUSH
32229: LD_VAR 0 2
32233: PUSH
32234: LD_INT 9
32236: MINUS
32237: ARRAY
32238: ST_TO_ADDR
// end ; 14 :
32239: GO 32658
32241: LD_INT 14
32243: DOUBLE
32244: EQUAL
32245: IFTRUE 32249
32247: GO 32260
32249: POP
// bc_type := b_workshop ; 15 :
32250: LD_ADDR_OWVAR 42
32254: PUSH
32255: LD_INT 2
32257: ST_TO_ADDR
32258: GO 32658
32260: LD_INT 15
32262: DOUBLE
32263: EQUAL
32264: IFTRUE 32268
32266: GO 32279
32268: POP
// bc_type := b_factory ; 16 :
32269: LD_ADDR_OWVAR 42
32273: PUSH
32274: LD_INT 3
32276: ST_TO_ADDR
32277: GO 32658
32279: LD_INT 16
32281: DOUBLE
32282: EQUAL
32283: IFTRUE 32287
32285: GO 32298
32287: POP
// bc_type := b_ext_gun ; 17 :
32288: LD_ADDR_OWVAR 42
32292: PUSH
32293: LD_INT 17
32295: ST_TO_ADDR
32296: GO 32658
32298: LD_INT 17
32300: DOUBLE
32301: EQUAL
32302: IFTRUE 32306
32304: GO 32334
32306: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32307: LD_ADDR_OWVAR 42
32311: PUSH
32312: LD_INT 19
32314: PUSH
32315: LD_INT 23
32317: PUSH
32318: LD_INT 19
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: LIST
32325: PUSH
32326: LD_VAR 0 1
32330: ARRAY
32331: ST_TO_ADDR
32332: GO 32658
32334: LD_INT 18
32336: DOUBLE
32337: EQUAL
32338: IFTRUE 32342
32340: GO 32353
32342: POP
// bc_type := b_ext_radar ; 19 :
32343: LD_ADDR_OWVAR 42
32347: PUSH
32348: LD_INT 20
32350: ST_TO_ADDR
32351: GO 32658
32353: LD_INT 19
32355: DOUBLE
32356: EQUAL
32357: IFTRUE 32361
32359: GO 32372
32361: POP
// bc_type := b_ext_radio ; 20 :
32362: LD_ADDR_OWVAR 42
32366: PUSH
32367: LD_INT 22
32369: ST_TO_ADDR
32370: GO 32658
32372: LD_INT 20
32374: DOUBLE
32375: EQUAL
32376: IFTRUE 32380
32378: GO 32391
32380: POP
// bc_type := b_ext_siberium ; 21 :
32381: LD_ADDR_OWVAR 42
32385: PUSH
32386: LD_INT 21
32388: ST_TO_ADDR
32389: GO 32658
32391: LD_INT 21
32393: DOUBLE
32394: EQUAL
32395: IFTRUE 32399
32397: GO 32410
32399: POP
// bc_type := b_ext_computer ; 22 :
32400: LD_ADDR_OWVAR 42
32404: PUSH
32405: LD_INT 24
32407: ST_TO_ADDR
32408: GO 32658
32410: LD_INT 22
32412: DOUBLE
32413: EQUAL
32414: IFTRUE 32418
32416: GO 32429
32418: POP
// bc_type := b_ext_track ; 23 :
32419: LD_ADDR_OWVAR 42
32423: PUSH
32424: LD_INT 16
32426: ST_TO_ADDR
32427: GO 32658
32429: LD_INT 23
32431: DOUBLE
32432: EQUAL
32433: IFTRUE 32437
32435: GO 32448
32437: POP
// bc_type := b_ext_laser ; 24 :
32438: LD_ADDR_OWVAR 42
32442: PUSH
32443: LD_INT 25
32445: ST_TO_ADDR
32446: GO 32658
32448: LD_INT 24
32450: DOUBLE
32451: EQUAL
32452: IFTRUE 32456
32454: GO 32467
32456: POP
// bc_type := b_control_tower ; 25 :
32457: LD_ADDR_OWVAR 42
32461: PUSH
32462: LD_INT 36
32464: ST_TO_ADDR
32465: GO 32658
32467: LD_INT 25
32469: DOUBLE
32470: EQUAL
32471: IFTRUE 32475
32473: GO 32486
32475: POP
// bc_type := b_breastwork ; 26 :
32476: LD_ADDR_OWVAR 42
32480: PUSH
32481: LD_INT 31
32483: ST_TO_ADDR
32484: GO 32658
32486: LD_INT 26
32488: DOUBLE
32489: EQUAL
32490: IFTRUE 32494
32492: GO 32505
32494: POP
// bc_type := b_bunker ; 27 :
32495: LD_ADDR_OWVAR 42
32499: PUSH
32500: LD_INT 32
32502: ST_TO_ADDR
32503: GO 32658
32505: LD_INT 27
32507: DOUBLE
32508: EQUAL
32509: IFTRUE 32513
32511: GO 32524
32513: POP
// bc_type := b_turret ; 28 :
32514: LD_ADDR_OWVAR 42
32518: PUSH
32519: LD_INT 33
32521: ST_TO_ADDR
32522: GO 32658
32524: LD_INT 28
32526: DOUBLE
32527: EQUAL
32528: IFTRUE 32532
32530: GO 32543
32532: POP
// bc_type := b_armoury ; 29 :
32533: LD_ADDR_OWVAR 42
32537: PUSH
32538: LD_INT 4
32540: ST_TO_ADDR
32541: GO 32658
32543: LD_INT 29
32545: DOUBLE
32546: EQUAL
32547: IFTRUE 32551
32549: GO 32562
32551: POP
// bc_type := b_barracks ; 30 :
32552: LD_ADDR_OWVAR 42
32556: PUSH
32557: LD_INT 5
32559: ST_TO_ADDR
32560: GO 32658
32562: LD_INT 30
32564: DOUBLE
32565: EQUAL
32566: IFTRUE 32570
32568: GO 32581
32570: POP
// bc_type := b_solar_power ; 31 :
32571: LD_ADDR_OWVAR 42
32575: PUSH
32576: LD_INT 27
32578: ST_TO_ADDR
32579: GO 32658
32581: LD_INT 31
32583: DOUBLE
32584: EQUAL
32585: IFTRUE 32589
32587: GO 32600
32589: POP
// bc_type := b_oil_power ; 32 :
32590: LD_ADDR_OWVAR 42
32594: PUSH
32595: LD_INT 26
32597: ST_TO_ADDR
32598: GO 32658
32600: LD_INT 32
32602: DOUBLE
32603: EQUAL
32604: IFTRUE 32608
32606: GO 32619
32608: POP
// bc_type := b_siberite_power ; 33 :
32609: LD_ADDR_OWVAR 42
32613: PUSH
32614: LD_INT 28
32616: ST_TO_ADDR
32617: GO 32658
32619: LD_INT 33
32621: DOUBLE
32622: EQUAL
32623: IFTRUE 32627
32625: GO 32638
32627: POP
// bc_type := b_oil_mine ; 34 :
32628: LD_ADDR_OWVAR 42
32632: PUSH
32633: LD_INT 29
32635: ST_TO_ADDR
32636: GO 32658
32638: LD_INT 34
32640: DOUBLE
32641: EQUAL
32642: IFTRUE 32646
32644: GO 32657
32646: POP
// bc_type := b_siberite_mine ; end ;
32647: LD_ADDR_OWVAR 42
32651: PUSH
32652: LD_INT 30
32654: ST_TO_ADDR
32655: GO 32658
32657: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32658: LD_ADDR_VAR 0 8
32662: PUSH
32663: LD_VAR 0 5
32667: PPUSH
32668: LD_VAR 0 6
32672: PPUSH
32673: LD_VAR 0 3
32677: PPUSH
32678: CALL_OW 47
32682: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32683: LD_OWVAR 42
32687: PUSH
32688: LD_INT 32
32690: PUSH
32691: LD_INT 33
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: IN
32698: IFFALSE 32714
// PlaceWeaponTurret ( b , weapon ) ;
32700: LD_VAR 0 8
32704: PPUSH
32705: LD_VAR 0 4
32709: PPUSH
32710: CALL_OW 431
// end ;
32714: LD_VAR 0 7
32718: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32719: LD_INT 0
32721: PPUSH
32722: PPUSH
32723: PPUSH
32724: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32725: LD_ADDR_VAR 0 4
32729: PUSH
32730: LD_INT 22
32732: PUSH
32733: LD_OWVAR 2
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 2
32744: PUSH
32745: LD_INT 30
32747: PUSH
32748: LD_INT 0
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 30
32757: PUSH
32758: LD_INT 1
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: LIST
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PPUSH
32774: CALL_OW 69
32778: ST_TO_ADDR
// if not tmp then
32779: LD_VAR 0 4
32783: NOT
32784: IFFALSE 32788
// exit ;
32786: GO 32847
// for i in tmp do
32788: LD_ADDR_VAR 0 2
32792: PUSH
32793: LD_VAR 0 4
32797: PUSH
32798: FOR_IN
32799: IFFALSE 32845
// for j = 1 to 3 do
32801: LD_ADDR_VAR 0 3
32805: PUSH
32806: DOUBLE
32807: LD_INT 1
32809: DEC
32810: ST_TO_ADDR
32811: LD_INT 3
32813: PUSH
32814: FOR_TO
32815: IFFALSE 32841
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32817: LD_VAR 0 2
32821: PPUSH
32822: CALL_OW 274
32826: PPUSH
32827: LD_VAR 0 3
32831: PPUSH
32832: LD_INT 99999
32834: PPUSH
32835: CALL_OW 277
32839: GO 32814
32841: POP
32842: POP
32843: GO 32798
32845: POP
32846: POP
// end ;
32847: LD_VAR 0 1
32851: RET
// export function hHackSetLevel10 ; var i , j ; begin
32852: LD_INT 0
32854: PPUSH
32855: PPUSH
32856: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32857: LD_ADDR_VAR 0 2
32861: PUSH
32862: LD_INT 21
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PPUSH
32872: CALL_OW 69
32876: PUSH
32877: FOR_IN
32878: IFFALSE 32930
// if IsSelected ( i ) then
32880: LD_VAR 0 2
32884: PPUSH
32885: CALL_OW 306
32889: IFFALSE 32928
// begin for j := 1 to 4 do
32891: LD_ADDR_VAR 0 3
32895: PUSH
32896: DOUBLE
32897: LD_INT 1
32899: DEC
32900: ST_TO_ADDR
32901: LD_INT 4
32903: PUSH
32904: FOR_TO
32905: IFFALSE 32926
// SetSkill ( i , j , 10 ) ;
32907: LD_VAR 0 2
32911: PPUSH
32912: LD_VAR 0 3
32916: PPUSH
32917: LD_INT 10
32919: PPUSH
32920: CALL_OW 237
32924: GO 32904
32926: POP
32927: POP
// end ;
32928: GO 32877
32930: POP
32931: POP
// end ;
32932: LD_VAR 0 1
32936: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32937: LD_INT 0
32939: PPUSH
32940: PPUSH
32941: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32942: LD_ADDR_VAR 0 2
32946: PUSH
32947: LD_INT 22
32949: PUSH
32950: LD_OWVAR 2
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 21
32961: PUSH
32962: LD_INT 1
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PPUSH
32973: CALL_OW 69
32977: PUSH
32978: FOR_IN
32979: IFFALSE 33020
// begin for j := 1 to 4 do
32981: LD_ADDR_VAR 0 3
32985: PUSH
32986: DOUBLE
32987: LD_INT 1
32989: DEC
32990: ST_TO_ADDR
32991: LD_INT 4
32993: PUSH
32994: FOR_TO
32995: IFFALSE 33016
// SetSkill ( i , j , 10 ) ;
32997: LD_VAR 0 2
33001: PPUSH
33002: LD_VAR 0 3
33006: PPUSH
33007: LD_INT 10
33009: PPUSH
33010: CALL_OW 237
33014: GO 32994
33016: POP
33017: POP
// end ;
33018: GO 32978
33020: POP
33021: POP
// end ;
33022: LD_VAR 0 1
33026: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33027: LD_INT 0
33029: PPUSH
// uc_side := your_side ;
33030: LD_ADDR_OWVAR 20
33034: PUSH
33035: LD_OWVAR 2
33039: ST_TO_ADDR
// uc_nation := nation ;
33040: LD_ADDR_OWVAR 21
33044: PUSH
33045: LD_VAR 0 1
33049: ST_TO_ADDR
// InitHc ;
33050: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33054: LD_INT 0
33056: PPUSH
33057: LD_VAR 0 2
33061: PPUSH
33062: LD_VAR 0 3
33066: PPUSH
33067: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33071: LD_VAR 0 4
33075: PPUSH
33076: LD_VAR 0 5
33080: PPUSH
33081: CALL_OW 428
33085: PUSH
33086: LD_INT 0
33088: EQUAL
33089: IFFALSE 33113
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33091: CALL_OW 44
33095: PPUSH
33096: LD_VAR 0 4
33100: PPUSH
33101: LD_VAR 0 5
33105: PPUSH
33106: LD_INT 1
33108: PPUSH
33109: CALL_OW 48
// end ;
33113: LD_VAR 0 6
33117: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33118: LD_INT 0
33120: PPUSH
33121: PPUSH
// uc_side := your_side ;
33122: LD_ADDR_OWVAR 20
33126: PUSH
33127: LD_OWVAR 2
33131: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33132: LD_VAR 0 1
33136: PUSH
33137: LD_INT 1
33139: PUSH
33140: LD_INT 2
33142: PUSH
33143: LD_INT 3
33145: PUSH
33146: LD_INT 4
33148: PUSH
33149: LD_INT 5
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: IN
33159: IFFALSE 33171
// uc_nation := nation_american else
33161: LD_ADDR_OWVAR 21
33165: PUSH
33166: LD_INT 1
33168: ST_TO_ADDR
33169: GO 33214
// if chassis in [ 11 , 12 , 13 , 14 ] then
33171: LD_VAR 0 1
33175: PUSH
33176: LD_INT 11
33178: PUSH
33179: LD_INT 12
33181: PUSH
33182: LD_INT 13
33184: PUSH
33185: LD_INT 14
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: IN
33194: IFFALSE 33206
// uc_nation := nation_arabian else
33196: LD_ADDR_OWVAR 21
33200: PUSH
33201: LD_INT 2
33203: ST_TO_ADDR
33204: GO 33214
// uc_nation := nation_russian ;
33206: LD_ADDR_OWVAR 21
33210: PUSH
33211: LD_INT 3
33213: ST_TO_ADDR
// vc_chassis := chassis ;
33214: LD_ADDR_OWVAR 37
33218: PUSH
33219: LD_VAR 0 1
33223: ST_TO_ADDR
// vc_engine := engine ;
33224: LD_ADDR_OWVAR 39
33228: PUSH
33229: LD_VAR 0 2
33233: ST_TO_ADDR
// vc_control := control ;
33234: LD_ADDR_OWVAR 38
33238: PUSH
33239: LD_VAR 0 3
33243: ST_TO_ADDR
// vc_weapon := weapon ;
33244: LD_ADDR_OWVAR 40
33248: PUSH
33249: LD_VAR 0 4
33253: ST_TO_ADDR
// un := CreateVehicle ;
33254: LD_ADDR_VAR 0 8
33258: PUSH
33259: CALL_OW 45
33263: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33264: LD_VAR 0 8
33268: PPUSH
33269: LD_INT 0
33271: PPUSH
33272: LD_INT 5
33274: PPUSH
33275: CALL_OW 12
33279: PPUSH
33280: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33284: LD_VAR 0 8
33288: PPUSH
33289: LD_VAR 0 5
33293: PPUSH
33294: LD_VAR 0 6
33298: PPUSH
33299: LD_INT 1
33301: PPUSH
33302: CALL_OW 48
// end ;
33306: LD_VAR 0 7
33310: RET
// export hInvincible ; every 1 do
33311: GO 33313
33313: DISABLE
// hInvincible := [ ] ;
33314: LD_ADDR_EXP 120
33318: PUSH
33319: EMPTY
33320: ST_TO_ADDR
33321: END
// every 10 do var i ;
33322: GO 33324
33324: DISABLE
33325: LD_INT 0
33327: PPUSH
// begin enable ;
33328: ENABLE
// if not hInvincible then
33329: LD_EXP 120
33333: NOT
33334: IFFALSE 33338
// exit ;
33336: GO 33382
// for i in hInvincible do
33338: LD_ADDR_VAR 0 1
33342: PUSH
33343: LD_EXP 120
33347: PUSH
33348: FOR_IN
33349: IFFALSE 33380
// if GetLives ( i ) < 1000 then
33351: LD_VAR 0 1
33355: PPUSH
33356: CALL_OW 256
33360: PUSH
33361: LD_INT 1000
33363: LESS
33364: IFFALSE 33378
// SetLives ( i , 1000 ) ;
33366: LD_VAR 0 1
33370: PPUSH
33371: LD_INT 1000
33373: PPUSH
33374: CALL_OW 234
33378: GO 33348
33380: POP
33381: POP
// end ;
33382: PPOPN 1
33384: END
// export function hHackInvincible ; var i ; begin
33385: LD_INT 0
33387: PPUSH
33388: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33389: LD_ADDR_VAR 0 2
33393: PUSH
33394: LD_INT 2
33396: PUSH
33397: LD_INT 21
33399: PUSH
33400: LD_INT 1
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 21
33409: PUSH
33410: LD_INT 2
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: LIST
33421: PPUSH
33422: CALL_OW 69
33426: PUSH
33427: FOR_IN
33428: IFFALSE 33489
// if IsSelected ( i ) then
33430: LD_VAR 0 2
33434: PPUSH
33435: CALL_OW 306
33439: IFFALSE 33487
// begin if i in hInvincible then
33441: LD_VAR 0 2
33445: PUSH
33446: LD_EXP 120
33450: IN
33451: IFFALSE 33471
// hInvincible := hInvincible diff i else
33453: LD_ADDR_EXP 120
33457: PUSH
33458: LD_EXP 120
33462: PUSH
33463: LD_VAR 0 2
33467: DIFF
33468: ST_TO_ADDR
33469: GO 33487
// hInvincible := hInvincible union i ;
33471: LD_ADDR_EXP 120
33475: PUSH
33476: LD_EXP 120
33480: PUSH
33481: LD_VAR 0 2
33485: UNION
33486: ST_TO_ADDR
// end ;
33487: GO 33427
33489: POP
33490: POP
// end ;
33491: LD_VAR 0 1
33495: RET
// export function hHackInvisible ; var i , j ; begin
33496: LD_INT 0
33498: PPUSH
33499: PPUSH
33500: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33501: LD_ADDR_VAR 0 2
33505: PUSH
33506: LD_INT 21
33508: PUSH
33509: LD_INT 1
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PPUSH
33516: CALL_OW 69
33520: PUSH
33521: FOR_IN
33522: IFFALSE 33546
// if IsSelected ( i ) then
33524: LD_VAR 0 2
33528: PPUSH
33529: CALL_OW 306
33533: IFFALSE 33544
// ComForceInvisible ( i ) ;
33535: LD_VAR 0 2
33539: PPUSH
33540: CALL_OW 496
33544: GO 33521
33546: POP
33547: POP
// end ;
33548: LD_VAR 0 1
33552: RET
// export function hHackChangeYourSide ; begin
33553: LD_INT 0
33555: PPUSH
// if your_side = 8 then
33556: LD_OWVAR 2
33560: PUSH
33561: LD_INT 8
33563: EQUAL
33564: IFFALSE 33576
// your_side := 0 else
33566: LD_ADDR_OWVAR 2
33570: PUSH
33571: LD_INT 0
33573: ST_TO_ADDR
33574: GO 33590
// your_side := your_side + 1 ;
33576: LD_ADDR_OWVAR 2
33580: PUSH
33581: LD_OWVAR 2
33585: PUSH
33586: LD_INT 1
33588: PLUS
33589: ST_TO_ADDR
// end ;
33590: LD_VAR 0 1
33594: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33595: LD_INT 0
33597: PPUSH
33598: PPUSH
33599: PPUSH
// for i in all_units do
33600: LD_ADDR_VAR 0 2
33604: PUSH
33605: LD_OWVAR 3
33609: PUSH
33610: FOR_IN
33611: IFFALSE 33689
// if IsSelected ( i ) then
33613: LD_VAR 0 2
33617: PPUSH
33618: CALL_OW 306
33622: IFFALSE 33687
// begin j := GetSide ( i ) ;
33624: LD_ADDR_VAR 0 3
33628: PUSH
33629: LD_VAR 0 2
33633: PPUSH
33634: CALL_OW 255
33638: ST_TO_ADDR
// if j = 8 then
33639: LD_VAR 0 3
33643: PUSH
33644: LD_INT 8
33646: EQUAL
33647: IFFALSE 33659
// j := 0 else
33649: LD_ADDR_VAR 0 3
33653: PUSH
33654: LD_INT 0
33656: ST_TO_ADDR
33657: GO 33673
// j := j + 1 ;
33659: LD_ADDR_VAR 0 3
33663: PUSH
33664: LD_VAR 0 3
33668: PUSH
33669: LD_INT 1
33671: PLUS
33672: ST_TO_ADDR
// SetSide ( i , j ) ;
33673: LD_VAR 0 2
33677: PPUSH
33678: LD_VAR 0 3
33682: PPUSH
33683: CALL_OW 235
// end ;
33687: GO 33610
33689: POP
33690: POP
// end ;
33691: LD_VAR 0 1
33695: RET
// export function hHackFog ; begin
33696: LD_INT 0
33698: PPUSH
// FogOff ( true ) ;
33699: LD_INT 1
33701: PPUSH
33702: CALL_OW 344
// end ;
33706: LD_VAR 0 1
33710: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33711: LD_INT 0
33713: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33714: LD_VAR 0 1
33718: PPUSH
33719: LD_VAR 0 2
33723: PPUSH
33724: LD_VAR 0 3
33728: PPUSH
33729: LD_INT 1
33731: PPUSH
33732: LD_INT 1
33734: PPUSH
33735: CALL_OW 483
// CenterOnXY ( x , y ) ;
33739: LD_VAR 0 2
33743: PPUSH
33744: LD_VAR 0 3
33748: PPUSH
33749: CALL_OW 84
// end ;
33753: LD_VAR 0 4
33757: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33758: LD_INT 0
33760: PPUSH
33761: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33762: LD_VAR 0 1
33766: NOT
33767: PUSH
33768: LD_VAR 0 2
33772: PPUSH
33773: LD_VAR 0 3
33777: PPUSH
33778: CALL_OW 488
33782: NOT
33783: OR
33784: PUSH
33785: LD_VAR 0 1
33789: PPUSH
33790: CALL_OW 266
33794: PUSH
33795: LD_INT 3
33797: NONEQUAL
33798: PUSH
33799: LD_VAR 0 1
33803: PPUSH
33804: CALL_OW 247
33808: PUSH
33809: LD_INT 1
33811: EQUAL
33812: NOT
33813: AND
33814: OR
33815: IFFALSE 33819
// exit ;
33817: GO 33968
// if GetType ( factory ) = unit_human then
33819: LD_VAR 0 1
33823: PPUSH
33824: CALL_OW 247
33828: PUSH
33829: LD_INT 1
33831: EQUAL
33832: IFFALSE 33849
// factory := IsInUnit ( factory ) ;
33834: LD_ADDR_VAR 0 1
33838: PUSH
33839: LD_VAR 0 1
33843: PPUSH
33844: CALL_OW 310
33848: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33849: LD_VAR 0 1
33853: PPUSH
33854: CALL_OW 266
33858: PUSH
33859: LD_INT 3
33861: NONEQUAL
33862: IFFALSE 33866
// exit ;
33864: GO 33968
// if HexInfo ( x , y ) = factory then
33866: LD_VAR 0 2
33870: PPUSH
33871: LD_VAR 0 3
33875: PPUSH
33876: CALL_OW 428
33880: PUSH
33881: LD_VAR 0 1
33885: EQUAL
33886: IFFALSE 33913
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33888: LD_ADDR_EXP 121
33892: PUSH
33893: LD_EXP 121
33897: PPUSH
33898: LD_VAR 0 1
33902: PPUSH
33903: LD_INT 0
33905: PPUSH
33906: CALL_OW 1
33910: ST_TO_ADDR
33911: GO 33964
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33913: LD_ADDR_EXP 121
33917: PUSH
33918: LD_EXP 121
33922: PPUSH
33923: LD_VAR 0 1
33927: PPUSH
33928: LD_VAR 0 1
33932: PPUSH
33933: CALL_OW 255
33937: PUSH
33938: LD_VAR 0 1
33942: PUSH
33943: LD_VAR 0 2
33947: PUSH
33948: LD_VAR 0 3
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: PPUSH
33959: CALL_OW 1
33963: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33964: CALL 33973 0 0
// end ;
33968: LD_VAR 0 4
33972: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33973: LD_INT 0
33975: PPUSH
33976: PPUSH
33977: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33978: LD_STRING resetFactoryWaypoint();
33980: PPUSH
33981: CALL_OW 559
// if factoryWaypoints then
33985: LD_EXP 121
33989: IFFALSE 34115
// begin list := PrepareArray ( factoryWaypoints ) ;
33991: LD_ADDR_VAR 0 3
33995: PUSH
33996: LD_EXP 121
34000: PPUSH
34001: CALL 81423 0 1
34005: ST_TO_ADDR
// for i := 1 to list do
34006: LD_ADDR_VAR 0 2
34010: PUSH
34011: DOUBLE
34012: LD_INT 1
34014: DEC
34015: ST_TO_ADDR
34016: LD_VAR 0 3
34020: PUSH
34021: FOR_TO
34022: IFFALSE 34113
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34024: LD_STRING setFactoryWaypointXY(
34026: PUSH
34027: LD_VAR 0 3
34031: PUSH
34032: LD_VAR 0 2
34036: ARRAY
34037: PUSH
34038: LD_INT 1
34040: ARRAY
34041: STR
34042: PUSH
34043: LD_STRING ,
34045: STR
34046: PUSH
34047: LD_VAR 0 3
34051: PUSH
34052: LD_VAR 0 2
34056: ARRAY
34057: PUSH
34058: LD_INT 2
34060: ARRAY
34061: STR
34062: PUSH
34063: LD_STRING ,
34065: STR
34066: PUSH
34067: LD_VAR 0 3
34071: PUSH
34072: LD_VAR 0 2
34076: ARRAY
34077: PUSH
34078: LD_INT 3
34080: ARRAY
34081: STR
34082: PUSH
34083: LD_STRING ,
34085: STR
34086: PUSH
34087: LD_VAR 0 3
34091: PUSH
34092: LD_VAR 0 2
34096: ARRAY
34097: PUSH
34098: LD_INT 4
34100: ARRAY
34101: STR
34102: PUSH
34103: LD_STRING )
34105: STR
34106: PPUSH
34107: CALL_OW 559
34111: GO 34021
34113: POP
34114: POP
// end ; end ;
34115: LD_VAR 0 1
34119: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34120: LD_INT 0
34122: PPUSH
// if HexInfo ( x , y ) = warehouse then
34123: LD_VAR 0 2
34127: PPUSH
34128: LD_VAR 0 3
34132: PPUSH
34133: CALL_OW 428
34137: PUSH
34138: LD_VAR 0 1
34142: EQUAL
34143: IFFALSE 34170
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34145: LD_ADDR_EXP 122
34149: PUSH
34150: LD_EXP 122
34154: PPUSH
34155: LD_VAR 0 1
34159: PPUSH
34160: LD_INT 0
34162: PPUSH
34163: CALL_OW 1
34167: ST_TO_ADDR
34168: GO 34221
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34170: LD_ADDR_EXP 122
34174: PUSH
34175: LD_EXP 122
34179: PPUSH
34180: LD_VAR 0 1
34184: PPUSH
34185: LD_VAR 0 1
34189: PPUSH
34190: CALL_OW 255
34194: PUSH
34195: LD_VAR 0 1
34199: PUSH
34200: LD_VAR 0 2
34204: PUSH
34205: LD_VAR 0 3
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: PPUSH
34216: CALL_OW 1
34220: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34221: CALL 34230 0 0
// end ;
34225: LD_VAR 0 4
34229: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34230: LD_INT 0
34232: PPUSH
34233: PPUSH
34234: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34235: LD_STRING resetWarehouseGatheringPoints();
34237: PPUSH
34238: CALL_OW 559
// if warehouseGatheringPoints then
34242: LD_EXP 122
34246: IFFALSE 34372
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34248: LD_ADDR_VAR 0 3
34252: PUSH
34253: LD_EXP 122
34257: PPUSH
34258: CALL 81423 0 1
34262: ST_TO_ADDR
// for i := 1 to list do
34263: LD_ADDR_VAR 0 2
34267: PUSH
34268: DOUBLE
34269: LD_INT 1
34271: DEC
34272: ST_TO_ADDR
34273: LD_VAR 0 3
34277: PUSH
34278: FOR_TO
34279: IFFALSE 34370
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34281: LD_STRING setWarehouseGatheringPointXY(
34283: PUSH
34284: LD_VAR 0 3
34288: PUSH
34289: LD_VAR 0 2
34293: ARRAY
34294: PUSH
34295: LD_INT 1
34297: ARRAY
34298: STR
34299: PUSH
34300: LD_STRING ,
34302: STR
34303: PUSH
34304: LD_VAR 0 3
34308: PUSH
34309: LD_VAR 0 2
34313: ARRAY
34314: PUSH
34315: LD_INT 2
34317: ARRAY
34318: STR
34319: PUSH
34320: LD_STRING ,
34322: STR
34323: PUSH
34324: LD_VAR 0 3
34328: PUSH
34329: LD_VAR 0 2
34333: ARRAY
34334: PUSH
34335: LD_INT 3
34337: ARRAY
34338: STR
34339: PUSH
34340: LD_STRING ,
34342: STR
34343: PUSH
34344: LD_VAR 0 3
34348: PUSH
34349: LD_VAR 0 2
34353: ARRAY
34354: PUSH
34355: LD_INT 4
34357: ARRAY
34358: STR
34359: PUSH
34360: LD_STRING )
34362: STR
34363: PPUSH
34364: CALL_OW 559
34368: GO 34278
34370: POP
34371: POP
// end ; end ;
34372: LD_VAR 0 1
34376: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34377: LD_EXP 122
34381: IFFALSE 35066
34383: GO 34385
34385: DISABLE
34386: LD_INT 0
34388: PPUSH
34389: PPUSH
34390: PPUSH
34391: PPUSH
34392: PPUSH
34393: PPUSH
34394: PPUSH
34395: PPUSH
34396: PPUSH
// begin enable ;
34397: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34398: LD_ADDR_VAR 0 3
34402: PUSH
34403: LD_EXP 122
34407: PPUSH
34408: CALL 81423 0 1
34412: ST_TO_ADDR
// if not list then
34413: LD_VAR 0 3
34417: NOT
34418: IFFALSE 34422
// exit ;
34420: GO 35066
// for i := 1 to list do
34422: LD_ADDR_VAR 0 1
34426: PUSH
34427: DOUBLE
34428: LD_INT 1
34430: DEC
34431: ST_TO_ADDR
34432: LD_VAR 0 3
34436: PUSH
34437: FOR_TO
34438: IFFALSE 35064
// begin depot := list [ i ] [ 2 ] ;
34440: LD_ADDR_VAR 0 8
34444: PUSH
34445: LD_VAR 0 3
34449: PUSH
34450: LD_VAR 0 1
34454: ARRAY
34455: PUSH
34456: LD_INT 2
34458: ARRAY
34459: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34460: LD_ADDR_VAR 0 5
34464: PUSH
34465: LD_VAR 0 3
34469: PUSH
34470: LD_VAR 0 1
34474: ARRAY
34475: PUSH
34476: LD_INT 1
34478: ARRAY
34479: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34480: LD_VAR 0 8
34484: PPUSH
34485: CALL_OW 301
34489: PUSH
34490: LD_VAR 0 5
34494: PUSH
34495: LD_VAR 0 8
34499: PPUSH
34500: CALL_OW 255
34504: NONEQUAL
34505: OR
34506: IFFALSE 34535
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34508: LD_ADDR_EXP 122
34512: PUSH
34513: LD_EXP 122
34517: PPUSH
34518: LD_VAR 0 8
34522: PPUSH
34523: LD_INT 0
34525: PPUSH
34526: CALL_OW 1
34530: ST_TO_ADDR
// exit ;
34531: POP
34532: POP
34533: GO 35066
// end ; x := list [ i ] [ 3 ] ;
34535: LD_ADDR_VAR 0 6
34539: PUSH
34540: LD_VAR 0 3
34544: PUSH
34545: LD_VAR 0 1
34549: ARRAY
34550: PUSH
34551: LD_INT 3
34553: ARRAY
34554: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34555: LD_ADDR_VAR 0 7
34559: PUSH
34560: LD_VAR 0 3
34564: PUSH
34565: LD_VAR 0 1
34569: ARRAY
34570: PUSH
34571: LD_INT 4
34573: ARRAY
34574: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34575: LD_ADDR_VAR 0 9
34579: PUSH
34580: LD_VAR 0 6
34584: PPUSH
34585: LD_VAR 0 7
34589: PPUSH
34590: LD_INT 16
34592: PPUSH
34593: CALL 80011 0 3
34597: ST_TO_ADDR
// if not cratesNearbyPoint then
34598: LD_VAR 0 9
34602: NOT
34603: IFFALSE 34609
// exit ;
34605: POP
34606: POP
34607: GO 35066
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34609: LD_ADDR_VAR 0 4
34613: PUSH
34614: LD_INT 22
34616: PUSH
34617: LD_VAR 0 5
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 3
34628: PUSH
34629: LD_INT 60
34631: PUSH
34632: EMPTY
34633: LIST
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 91
34641: PUSH
34642: LD_VAR 0 8
34646: PUSH
34647: LD_INT 6
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 2
34657: PUSH
34658: LD_INT 25
34660: PUSH
34661: LD_INT 2
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 25
34670: PUSH
34671: LD_INT 16
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: LIST
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: PPUSH
34689: CALL_OW 69
34693: PUSH
34694: LD_VAR 0 8
34698: PPUSH
34699: CALL_OW 313
34703: PPUSH
34704: LD_INT 3
34706: PUSH
34707: LD_INT 60
34709: PUSH
34710: EMPTY
34711: LIST
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 2
34719: PUSH
34720: LD_INT 25
34722: PUSH
34723: LD_INT 2
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 25
34732: PUSH
34733: LD_INT 16
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: LIST
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PPUSH
34749: CALL_OW 72
34753: UNION
34754: ST_TO_ADDR
// if tmp then
34755: LD_VAR 0 4
34759: IFFALSE 34839
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34761: LD_ADDR_VAR 0 4
34765: PUSH
34766: LD_VAR 0 4
34770: PPUSH
34771: LD_INT 3
34773: PPUSH
34774: CALL 77980 0 2
34778: ST_TO_ADDR
// for j in tmp do
34779: LD_ADDR_VAR 0 2
34783: PUSH
34784: LD_VAR 0 4
34788: PUSH
34789: FOR_IN
34790: IFFALSE 34833
// begin if IsInUnit ( j ) then
34792: LD_VAR 0 2
34796: PPUSH
34797: CALL_OW 310
34801: IFFALSE 34812
// ComExit ( j ) ;
34803: LD_VAR 0 2
34807: PPUSH
34808: CALL 78063 0 1
// AddComCollect ( j , x , y ) ;
34812: LD_VAR 0 2
34816: PPUSH
34817: LD_VAR 0 6
34821: PPUSH
34822: LD_VAR 0 7
34826: PPUSH
34827: CALL_OW 177
// end ;
34831: GO 34789
34833: POP
34834: POP
// exit ;
34835: POP
34836: POP
34837: GO 35066
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34839: LD_ADDR_VAR 0 4
34843: PUSH
34844: LD_INT 22
34846: PUSH
34847: LD_VAR 0 5
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 91
34858: PUSH
34859: LD_VAR 0 8
34863: PUSH
34864: LD_INT 8
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: LD_INT 34
34877: PUSH
34878: LD_INT 12
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 34
34887: PUSH
34888: LD_INT 51
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 34
34897: PUSH
34898: LD_INT 32
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 34
34907: PUSH
34908: LD_INT 89
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: LIST
34926: PPUSH
34927: CALL_OW 69
34931: ST_TO_ADDR
// if tmp then
34932: LD_VAR 0 4
34936: IFFALSE 35062
// begin for j in tmp do
34938: LD_ADDR_VAR 0 2
34942: PUSH
34943: LD_VAR 0 4
34947: PUSH
34948: FOR_IN
34949: IFFALSE 35060
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34951: LD_VAR 0 2
34955: PPUSH
34956: CALL_OW 262
34960: PUSH
34961: LD_INT 3
34963: EQUAL
34964: PUSH
34965: LD_VAR 0 2
34969: PPUSH
34970: CALL_OW 261
34974: PUSH
34975: LD_INT 20
34977: GREATER
34978: OR
34979: PUSH
34980: LD_VAR 0 2
34984: PPUSH
34985: CALL_OW 314
34989: NOT
34990: AND
34991: PUSH
34992: LD_VAR 0 2
34996: PPUSH
34997: CALL_OW 263
35001: PUSH
35002: LD_INT 1
35004: NONEQUAL
35005: PUSH
35006: LD_VAR 0 2
35010: PPUSH
35011: CALL_OW 311
35015: OR
35016: AND
35017: IFFALSE 35058
// begin ComCollect ( j , x , y ) ;
35019: LD_VAR 0 2
35023: PPUSH
35024: LD_VAR 0 6
35028: PPUSH
35029: LD_VAR 0 7
35033: PPUSH
35034: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35038: LD_VAR 0 2
35042: PPUSH
35043: LD_VAR 0 8
35047: PPUSH
35048: CALL_OW 172
// exit ;
35052: POP
35053: POP
35054: POP
35055: POP
35056: GO 35066
// end ;
35058: GO 34948
35060: POP
35061: POP
// end ; end ;
35062: GO 34437
35064: POP
35065: POP
// end ; end_of_file
35066: PPOPN 9
35068: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35069: LD_INT 0
35071: PPUSH
35072: PPUSH
35073: PPUSH
35074: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35075: LD_VAR 0 1
35079: PPUSH
35080: CALL_OW 264
35084: PUSH
35085: LD_INT 91
35087: EQUAL
35088: IFFALSE 35160
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35090: LD_INT 68
35092: PPUSH
35093: LD_VAR 0 1
35097: PPUSH
35098: CALL_OW 255
35102: PPUSH
35103: CALL_OW 321
35107: PUSH
35108: LD_INT 2
35110: EQUAL
35111: IFFALSE 35123
// eff := 70 else
35113: LD_ADDR_VAR 0 4
35117: PUSH
35118: LD_INT 70
35120: ST_TO_ADDR
35121: GO 35131
// eff := 30 ;
35123: LD_ADDR_VAR 0 4
35127: PUSH
35128: LD_INT 30
35130: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35131: LD_VAR 0 1
35135: PPUSH
35136: CALL_OW 250
35140: PPUSH
35141: LD_VAR 0 1
35145: PPUSH
35146: CALL_OW 251
35150: PPUSH
35151: LD_VAR 0 4
35155: PPUSH
35156: CALL_OW 495
// end ; end ;
35160: LD_VAR 0 2
35164: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35165: LD_INT 0
35167: PPUSH
// end ;
35168: LD_VAR 0 4
35172: RET
// export function SOS_Command ( cmd ) ; begin
35173: LD_INT 0
35175: PPUSH
// end ;
35176: LD_VAR 0 2
35180: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35181: LD_INT 0
35183: PPUSH
// end ;
35184: LD_VAR 0 6
35188: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35189: LD_INT 0
35191: PPUSH
35192: PPUSH
// if not vehicle or not factory then
35193: LD_VAR 0 1
35197: NOT
35198: PUSH
35199: LD_VAR 0 2
35203: NOT
35204: OR
35205: IFFALSE 35209
// exit ;
35207: GO 35440
// if factoryWaypoints >= factory then
35209: LD_EXP 121
35213: PUSH
35214: LD_VAR 0 2
35218: GREATEREQUAL
35219: IFFALSE 35440
// if factoryWaypoints [ factory ] then
35221: LD_EXP 121
35225: PUSH
35226: LD_VAR 0 2
35230: ARRAY
35231: IFFALSE 35440
// begin if GetControl ( vehicle ) = control_manual then
35233: LD_VAR 0 1
35237: PPUSH
35238: CALL_OW 263
35242: PUSH
35243: LD_INT 1
35245: EQUAL
35246: IFFALSE 35327
// begin driver := IsDrivenBy ( vehicle ) ;
35248: LD_ADDR_VAR 0 4
35252: PUSH
35253: LD_VAR 0 1
35257: PPUSH
35258: CALL_OW 311
35262: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35263: LD_VAR 0 4
35267: PPUSH
35268: LD_EXP 121
35272: PUSH
35273: LD_VAR 0 2
35277: ARRAY
35278: PUSH
35279: LD_INT 3
35281: ARRAY
35282: PPUSH
35283: LD_EXP 121
35287: PUSH
35288: LD_VAR 0 2
35292: ARRAY
35293: PUSH
35294: LD_INT 4
35296: ARRAY
35297: PPUSH
35298: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35302: LD_VAR 0 4
35306: PPUSH
35307: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35311: LD_VAR 0 4
35315: PPUSH
35316: LD_VAR 0 2
35320: PPUSH
35321: CALL_OW 180
// end else
35325: GO 35440
// if GetControl ( vehicle ) = control_remote then
35327: LD_VAR 0 1
35331: PPUSH
35332: CALL_OW 263
35336: PUSH
35337: LD_INT 2
35339: EQUAL
35340: IFFALSE 35401
// begin wait ( 0 0$2 ) ;
35342: LD_INT 70
35344: PPUSH
35345: CALL_OW 67
// if Connect ( vehicle ) then
35349: LD_VAR 0 1
35353: PPUSH
35354: CALL 48271 0 1
35358: IFFALSE 35399
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35360: LD_VAR 0 1
35364: PPUSH
35365: LD_EXP 121
35369: PUSH
35370: LD_VAR 0 2
35374: ARRAY
35375: PUSH
35376: LD_INT 3
35378: ARRAY
35379: PPUSH
35380: LD_EXP 121
35384: PUSH
35385: LD_VAR 0 2
35389: ARRAY
35390: PUSH
35391: LD_INT 4
35393: ARRAY
35394: PPUSH
35395: CALL_OW 171
// end else
35399: GO 35440
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35401: LD_VAR 0 1
35405: PPUSH
35406: LD_EXP 121
35410: PUSH
35411: LD_VAR 0 2
35415: ARRAY
35416: PUSH
35417: LD_INT 3
35419: ARRAY
35420: PPUSH
35421: LD_EXP 121
35425: PUSH
35426: LD_VAR 0 2
35430: ARRAY
35431: PUSH
35432: LD_INT 4
35434: ARRAY
35435: PPUSH
35436: CALL_OW 171
// end ; end ;
35440: LD_VAR 0 3
35444: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35445: LD_INT 0
35447: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35448: LD_VAR 0 1
35452: PUSH
35453: LD_INT 250
35455: EQUAL
35456: PUSH
35457: LD_VAR 0 2
35461: PPUSH
35462: CALL_OW 264
35466: PUSH
35467: LD_INT 81
35469: EQUAL
35470: AND
35471: IFFALSE 35492
// MinerPlaceMine ( unit , x , y ) ;
35473: LD_VAR 0 2
35477: PPUSH
35478: LD_VAR 0 4
35482: PPUSH
35483: LD_VAR 0 5
35487: PPUSH
35488: CALL 38482 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35492: LD_VAR 0 1
35496: PUSH
35497: LD_INT 251
35499: EQUAL
35500: PUSH
35501: LD_VAR 0 2
35505: PPUSH
35506: CALL_OW 264
35510: PUSH
35511: LD_INT 81
35513: EQUAL
35514: AND
35515: IFFALSE 35536
// MinerDetonateMine ( unit , x , y ) ;
35517: LD_VAR 0 2
35521: PPUSH
35522: LD_VAR 0 4
35526: PPUSH
35527: LD_VAR 0 5
35531: PPUSH
35532: CALL 38757 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35536: LD_VAR 0 1
35540: PUSH
35541: LD_INT 252
35543: EQUAL
35544: PUSH
35545: LD_VAR 0 2
35549: PPUSH
35550: CALL_OW 264
35554: PUSH
35555: LD_INT 81
35557: EQUAL
35558: AND
35559: IFFALSE 35580
// MinerCreateMinefield ( unit , x , y ) ;
35561: LD_VAR 0 2
35565: PPUSH
35566: LD_VAR 0 4
35570: PPUSH
35571: LD_VAR 0 5
35575: PPUSH
35576: CALL 39174 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35580: LD_VAR 0 1
35584: PUSH
35585: LD_INT 253
35587: EQUAL
35588: PUSH
35589: LD_VAR 0 2
35593: PPUSH
35594: CALL_OW 257
35598: PUSH
35599: LD_INT 5
35601: EQUAL
35602: AND
35603: IFFALSE 35624
// ComBinocular ( unit , x , y ) ;
35605: LD_VAR 0 2
35609: PPUSH
35610: LD_VAR 0 4
35614: PPUSH
35615: LD_VAR 0 5
35619: PPUSH
35620: CALL 39543 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35624: LD_VAR 0 1
35628: PUSH
35629: LD_INT 254
35631: EQUAL
35632: PUSH
35633: LD_VAR 0 2
35637: PPUSH
35638: CALL_OW 264
35642: PUSH
35643: LD_INT 99
35645: EQUAL
35646: AND
35647: PUSH
35648: LD_VAR 0 3
35652: PPUSH
35653: CALL_OW 263
35657: PUSH
35658: LD_INT 3
35660: EQUAL
35661: AND
35662: IFFALSE 35678
// HackDestroyVehicle ( unit , selectedUnit ) ;
35664: LD_VAR 0 2
35668: PPUSH
35669: LD_VAR 0 3
35673: PPUSH
35674: CALL 37846 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35678: LD_VAR 0 1
35682: PUSH
35683: LD_INT 255
35685: EQUAL
35686: PUSH
35687: LD_VAR 0 2
35691: PPUSH
35692: CALL_OW 264
35696: PUSH
35697: LD_INT 14
35699: PUSH
35700: LD_INT 53
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: IN
35707: AND
35708: PUSH
35709: LD_VAR 0 4
35713: PPUSH
35714: LD_VAR 0 5
35718: PPUSH
35719: CALL_OW 488
35723: AND
35724: IFFALSE 35748
// CutTreeXYR ( unit , x , y , 12 ) ;
35726: LD_VAR 0 2
35730: PPUSH
35731: LD_VAR 0 4
35735: PPUSH
35736: LD_VAR 0 5
35740: PPUSH
35741: LD_INT 12
35743: PPUSH
35744: CALL 35843 0 4
// if cmd = 256 then
35748: LD_VAR 0 1
35752: PUSH
35753: LD_INT 256
35755: EQUAL
35756: IFFALSE 35777
// SetFactoryWaypoint ( unit , x , y ) ;
35758: LD_VAR 0 2
35762: PPUSH
35763: LD_VAR 0 4
35767: PPUSH
35768: LD_VAR 0 5
35772: PPUSH
35773: CALL 33758 0 3
// if cmd = 257 then
35777: LD_VAR 0 1
35781: PUSH
35782: LD_INT 257
35784: EQUAL
35785: IFFALSE 35806
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35787: LD_VAR 0 2
35791: PPUSH
35792: LD_VAR 0 4
35796: PPUSH
35797: LD_VAR 0 5
35801: PPUSH
35802: CALL 34120 0 3
// if cmd = 258 then
35806: LD_VAR 0 1
35810: PUSH
35811: LD_INT 258
35813: EQUAL
35814: IFFALSE 35838
// BurnTreeXYR ( unit , x , y , 8 ) ;
35816: LD_VAR 0 2
35820: PPUSH
35821: LD_VAR 0 4
35825: PPUSH
35826: LD_VAR 0 5
35830: PPUSH
35831: LD_INT 8
35833: PPUSH
35834: CALL 36237 0 4
// end ;
35838: LD_VAR 0 6
35842: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35843: LD_INT 0
35845: PPUSH
35846: PPUSH
35847: PPUSH
35848: PPUSH
35849: PPUSH
35850: PPUSH
35851: PPUSH
35852: PPUSH
35853: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
35854: LD_VAR 0 1
35858: PPUSH
35859: CALL_OW 302
35863: NOT
35864: PUSH
35865: LD_VAR 0 2
35869: PPUSH
35870: LD_VAR 0 3
35874: PPUSH
35875: CALL_OW 488
35879: NOT
35880: OR
35881: PUSH
35882: LD_VAR 0 4
35886: NOT
35887: OR
35888: IFFALSE 35892
// exit ;
35890: GO 36232
// list := [ ] ;
35892: LD_ADDR_VAR 0 13
35896: PUSH
35897: EMPTY
35898: ST_TO_ADDR
// if x - r < 0 then
35899: LD_VAR 0 2
35903: PUSH
35904: LD_VAR 0 4
35908: MINUS
35909: PUSH
35910: LD_INT 0
35912: LESS
35913: IFFALSE 35925
// min_x := 0 else
35915: LD_ADDR_VAR 0 7
35919: PUSH
35920: LD_INT 0
35922: ST_TO_ADDR
35923: GO 35941
// min_x := x - r ;
35925: LD_ADDR_VAR 0 7
35929: PUSH
35930: LD_VAR 0 2
35934: PUSH
35935: LD_VAR 0 4
35939: MINUS
35940: ST_TO_ADDR
// if y - r < 0 then
35941: LD_VAR 0 3
35945: PUSH
35946: LD_VAR 0 4
35950: MINUS
35951: PUSH
35952: LD_INT 0
35954: LESS
35955: IFFALSE 35967
// min_y := 0 else
35957: LD_ADDR_VAR 0 8
35961: PUSH
35962: LD_INT 0
35964: ST_TO_ADDR
35965: GO 35983
// min_y := y - r ;
35967: LD_ADDR_VAR 0 8
35971: PUSH
35972: LD_VAR 0 3
35976: PUSH
35977: LD_VAR 0 4
35981: MINUS
35982: ST_TO_ADDR
// max_x := x + r ;
35983: LD_ADDR_VAR 0 9
35987: PUSH
35988: LD_VAR 0 2
35992: PUSH
35993: LD_VAR 0 4
35997: PLUS
35998: ST_TO_ADDR
// max_y := y + r ;
35999: LD_ADDR_VAR 0 10
36003: PUSH
36004: LD_VAR 0 3
36008: PUSH
36009: LD_VAR 0 4
36013: PLUS
36014: ST_TO_ADDR
// for _x = min_x to max_x do
36015: LD_ADDR_VAR 0 11
36019: PUSH
36020: DOUBLE
36021: LD_VAR 0 7
36025: DEC
36026: ST_TO_ADDR
36027: LD_VAR 0 9
36031: PUSH
36032: FOR_TO
36033: IFFALSE 36150
// for _y = min_y to max_y do
36035: LD_ADDR_VAR 0 12
36039: PUSH
36040: DOUBLE
36041: LD_VAR 0 8
36045: DEC
36046: ST_TO_ADDR
36047: LD_VAR 0 10
36051: PUSH
36052: FOR_TO
36053: IFFALSE 36146
// begin if not ValidHex ( _x , _y ) then
36055: LD_VAR 0 11
36059: PPUSH
36060: LD_VAR 0 12
36064: PPUSH
36065: CALL_OW 488
36069: NOT
36070: IFFALSE 36074
// continue ;
36072: GO 36052
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36074: LD_VAR 0 11
36078: PPUSH
36079: LD_VAR 0 12
36083: PPUSH
36084: CALL_OW 351
36088: PUSH
36089: LD_VAR 0 11
36093: PPUSH
36094: LD_VAR 0 12
36098: PPUSH
36099: CALL_OW 554
36103: AND
36104: IFFALSE 36144
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36106: LD_ADDR_VAR 0 13
36110: PUSH
36111: LD_VAR 0 13
36115: PPUSH
36116: LD_VAR 0 13
36120: PUSH
36121: LD_INT 1
36123: PLUS
36124: PPUSH
36125: LD_VAR 0 11
36129: PUSH
36130: LD_VAR 0 12
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PPUSH
36139: CALL_OW 2
36143: ST_TO_ADDR
// end ;
36144: GO 36052
36146: POP
36147: POP
36148: GO 36032
36150: POP
36151: POP
// if not list then
36152: LD_VAR 0 13
36156: NOT
36157: IFFALSE 36161
// exit ;
36159: GO 36232
// for i in list do
36161: LD_ADDR_VAR 0 6
36165: PUSH
36166: LD_VAR 0 13
36170: PUSH
36171: FOR_IN
36172: IFFALSE 36230
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36174: LD_VAR 0 1
36178: PPUSH
36179: LD_STRING M
36181: PUSH
36182: LD_VAR 0 6
36186: PUSH
36187: LD_INT 1
36189: ARRAY
36190: PUSH
36191: LD_VAR 0 6
36195: PUSH
36196: LD_INT 2
36198: ARRAY
36199: PUSH
36200: LD_INT 0
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: PUSH
36221: EMPTY
36222: LIST
36223: PPUSH
36224: CALL_OW 447
36228: GO 36171
36230: POP
36231: POP
// end ;
36232: LD_VAR 0 5
36236: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
36237: LD_INT 0
36239: PPUSH
36240: PPUSH
36241: PPUSH
36242: PPUSH
36243: PPUSH
36244: PPUSH
36245: PPUSH
36246: PPUSH
36247: PPUSH
36248: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36249: LD_VAR 0 1
36253: PPUSH
36254: CALL_OW 302
36258: NOT
36259: PUSH
36260: LD_VAR 0 2
36264: PPUSH
36265: LD_VAR 0 3
36269: PPUSH
36270: CALL_OW 488
36274: NOT
36275: OR
36276: PUSH
36277: LD_VAR 0 4
36281: NOT
36282: OR
36283: IFFALSE 36287
// exit ;
36285: GO 36800
// list := [ ] ;
36287: LD_ADDR_VAR 0 13
36291: PUSH
36292: EMPTY
36293: ST_TO_ADDR
// if x - r < 0 then
36294: LD_VAR 0 2
36298: PUSH
36299: LD_VAR 0 4
36303: MINUS
36304: PUSH
36305: LD_INT 0
36307: LESS
36308: IFFALSE 36320
// min_x := 0 else
36310: LD_ADDR_VAR 0 7
36314: PUSH
36315: LD_INT 0
36317: ST_TO_ADDR
36318: GO 36336
// min_x := x - r ;
36320: LD_ADDR_VAR 0 7
36324: PUSH
36325: LD_VAR 0 2
36329: PUSH
36330: LD_VAR 0 4
36334: MINUS
36335: ST_TO_ADDR
// if y - r < 0 then
36336: LD_VAR 0 3
36340: PUSH
36341: LD_VAR 0 4
36345: MINUS
36346: PUSH
36347: LD_INT 0
36349: LESS
36350: IFFALSE 36362
// min_y := 0 else
36352: LD_ADDR_VAR 0 8
36356: PUSH
36357: LD_INT 0
36359: ST_TO_ADDR
36360: GO 36378
// min_y := y - r ;
36362: LD_ADDR_VAR 0 8
36366: PUSH
36367: LD_VAR 0 3
36371: PUSH
36372: LD_VAR 0 4
36376: MINUS
36377: ST_TO_ADDR
// max_x := x + r ;
36378: LD_ADDR_VAR 0 9
36382: PUSH
36383: LD_VAR 0 2
36387: PUSH
36388: LD_VAR 0 4
36392: PLUS
36393: ST_TO_ADDR
// max_y := y + r ;
36394: LD_ADDR_VAR 0 10
36398: PUSH
36399: LD_VAR 0 3
36403: PUSH
36404: LD_VAR 0 4
36408: PLUS
36409: ST_TO_ADDR
// for _x = min_x to max_x do
36410: LD_ADDR_VAR 0 11
36414: PUSH
36415: DOUBLE
36416: LD_VAR 0 7
36420: DEC
36421: ST_TO_ADDR
36422: LD_VAR 0 9
36426: PUSH
36427: FOR_TO
36428: IFFALSE 36545
// for _y = min_y to max_y do
36430: LD_ADDR_VAR 0 12
36434: PUSH
36435: DOUBLE
36436: LD_VAR 0 8
36440: DEC
36441: ST_TO_ADDR
36442: LD_VAR 0 10
36446: PUSH
36447: FOR_TO
36448: IFFALSE 36541
// begin if not ValidHex ( _x , _y ) then
36450: LD_VAR 0 11
36454: PPUSH
36455: LD_VAR 0 12
36459: PPUSH
36460: CALL_OW 488
36464: NOT
36465: IFFALSE 36469
// continue ;
36467: GO 36447
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36469: LD_VAR 0 11
36473: PPUSH
36474: LD_VAR 0 12
36478: PPUSH
36479: CALL_OW 351
36483: PUSH
36484: LD_VAR 0 11
36488: PPUSH
36489: LD_VAR 0 12
36493: PPUSH
36494: CALL_OW 554
36498: AND
36499: IFFALSE 36539
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36501: LD_ADDR_VAR 0 13
36505: PUSH
36506: LD_VAR 0 13
36510: PPUSH
36511: LD_VAR 0 13
36515: PUSH
36516: LD_INT 1
36518: PLUS
36519: PPUSH
36520: LD_VAR 0 11
36524: PUSH
36525: LD_VAR 0 12
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PPUSH
36534: CALL_OW 2
36538: ST_TO_ADDR
// end ;
36539: GO 36447
36541: POP
36542: POP
36543: GO 36427
36545: POP
36546: POP
// if not list then
36547: LD_VAR 0 13
36551: NOT
36552: IFFALSE 36556
// exit ;
36554: GO 36800
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
36556: LD_ADDR_VAR 0 13
36560: PUSH
36561: LD_VAR 0 1
36565: PPUSH
36566: LD_VAR 0 13
36570: PPUSH
36571: LD_INT 1
36573: PPUSH
36574: LD_INT 1
36576: PPUSH
36577: CALL 45413 0 4
36581: ST_TO_ADDR
// ComStop ( flame ) ;
36582: LD_VAR 0 1
36586: PPUSH
36587: CALL_OW 141
// for i in list do
36591: LD_ADDR_VAR 0 6
36595: PUSH
36596: LD_VAR 0 13
36600: PUSH
36601: FOR_IN
36602: IFFALSE 36633
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
36604: LD_VAR 0 1
36608: PPUSH
36609: LD_VAR 0 6
36613: PUSH
36614: LD_INT 1
36616: ARRAY
36617: PPUSH
36618: LD_VAR 0 6
36622: PUSH
36623: LD_INT 2
36625: ARRAY
36626: PPUSH
36627: CALL_OW 176
36631: GO 36601
36633: POP
36634: POP
// repeat wait ( 0 0$1 ) ;
36635: LD_INT 35
36637: PPUSH
36638: CALL_OW 67
// task := GetTaskList ( flame ) ;
36642: LD_ADDR_VAR 0 14
36646: PUSH
36647: LD_VAR 0 1
36651: PPUSH
36652: CALL_OW 437
36656: ST_TO_ADDR
// if not task then
36657: LD_VAR 0 14
36661: NOT
36662: IFFALSE 36666
// exit ;
36664: GO 36800
// if task [ 1 ] [ 1 ] <> | then
36666: LD_VAR 0 14
36670: PUSH
36671: LD_INT 1
36673: ARRAY
36674: PUSH
36675: LD_INT 1
36677: ARRAY
36678: PUSH
36679: LD_STRING |
36681: NONEQUAL
36682: IFFALSE 36686
// exit ;
36684: GO 36800
// _x := task [ 1 ] [ 2 ] ;
36686: LD_ADDR_VAR 0 11
36690: PUSH
36691: LD_VAR 0 14
36695: PUSH
36696: LD_INT 1
36698: ARRAY
36699: PUSH
36700: LD_INT 2
36702: ARRAY
36703: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
36704: LD_ADDR_VAR 0 12
36708: PUSH
36709: LD_VAR 0 14
36713: PUSH
36714: LD_INT 1
36716: ARRAY
36717: PUSH
36718: LD_INT 3
36720: ARRAY
36721: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
36722: LD_VAR 0 11
36726: PPUSH
36727: LD_VAR 0 12
36731: PPUSH
36732: CALL_OW 351
36736: NOT
36737: PUSH
36738: LD_VAR 0 11
36742: PPUSH
36743: LD_VAR 0 12
36747: PPUSH
36748: CALL_OW 554
36752: NOT
36753: OR
36754: IFFALSE 36788
// begin task := Delete ( task , 1 ) ;
36756: LD_ADDR_VAR 0 14
36760: PUSH
36761: LD_VAR 0 14
36765: PPUSH
36766: LD_INT 1
36768: PPUSH
36769: CALL_OW 3
36773: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
36774: LD_VAR 0 1
36778: PPUSH
36779: LD_VAR 0 14
36783: PPUSH
36784: CALL_OW 446
// end ; until not HasTask ( flame ) ;
36788: LD_VAR 0 1
36792: PPUSH
36793: CALL_OW 314
36797: NOT
36798: IFFALSE 36635
// end ;
36800: LD_VAR 0 5
36804: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36805: LD_EXP 124
36809: NOT
36810: IFFALSE 36860
36812: GO 36814
36814: DISABLE
// begin initHack := true ;
36815: LD_ADDR_EXP 124
36819: PUSH
36820: LD_INT 1
36822: ST_TO_ADDR
// hackTanks := [ ] ;
36823: LD_ADDR_EXP 125
36827: PUSH
36828: EMPTY
36829: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36830: LD_ADDR_EXP 126
36834: PUSH
36835: EMPTY
36836: ST_TO_ADDR
// hackLimit := 3 ;
36837: LD_ADDR_EXP 127
36841: PUSH
36842: LD_INT 3
36844: ST_TO_ADDR
// hackDist := 12 ;
36845: LD_ADDR_EXP 128
36849: PUSH
36850: LD_INT 12
36852: ST_TO_ADDR
// hackCounter := [ ] ;
36853: LD_ADDR_EXP 129
36857: PUSH
36858: EMPTY
36859: ST_TO_ADDR
// end ;
36860: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36861: LD_EXP 124
36865: PUSH
36866: LD_INT 34
36868: PUSH
36869: LD_INT 99
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PPUSH
36876: CALL_OW 69
36880: AND
36881: IFFALSE 37134
36883: GO 36885
36885: DISABLE
36886: LD_INT 0
36888: PPUSH
36889: PPUSH
// begin enable ;
36890: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36891: LD_ADDR_VAR 0 1
36895: PUSH
36896: LD_INT 34
36898: PUSH
36899: LD_INT 99
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PPUSH
36906: CALL_OW 69
36910: PUSH
36911: FOR_IN
36912: IFFALSE 37132
// begin if not i in hackTanks then
36914: LD_VAR 0 1
36918: PUSH
36919: LD_EXP 125
36923: IN
36924: NOT
36925: IFFALSE 37008
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36927: LD_ADDR_EXP 125
36931: PUSH
36932: LD_EXP 125
36936: PPUSH
36937: LD_EXP 125
36941: PUSH
36942: LD_INT 1
36944: PLUS
36945: PPUSH
36946: LD_VAR 0 1
36950: PPUSH
36951: CALL_OW 1
36955: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36956: LD_ADDR_EXP 126
36960: PUSH
36961: LD_EXP 126
36965: PPUSH
36966: LD_EXP 126
36970: PUSH
36971: LD_INT 1
36973: PLUS
36974: PPUSH
36975: EMPTY
36976: PPUSH
36977: CALL_OW 1
36981: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36982: LD_ADDR_EXP 129
36986: PUSH
36987: LD_EXP 129
36991: PPUSH
36992: LD_EXP 129
36996: PUSH
36997: LD_INT 1
36999: PLUS
37000: PPUSH
37001: EMPTY
37002: PPUSH
37003: CALL_OW 1
37007: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37008: LD_VAR 0 1
37012: PPUSH
37013: CALL_OW 302
37017: NOT
37018: IFFALSE 37031
// begin HackUnlinkAll ( i ) ;
37020: LD_VAR 0 1
37024: PPUSH
37025: CALL 37137 0 1
// continue ;
37029: GO 36911
// end ; HackCheckCapturedStatus ( i ) ;
37031: LD_VAR 0 1
37035: PPUSH
37036: CALL 37580 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37040: LD_ADDR_VAR 0 2
37044: PUSH
37045: LD_INT 81
37047: PUSH
37048: LD_VAR 0 1
37052: PPUSH
37053: CALL_OW 255
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 33
37064: PUSH
37065: LD_INT 3
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 91
37074: PUSH
37075: LD_VAR 0 1
37079: PUSH
37080: LD_EXP 128
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 50
37092: PUSH
37093: EMPTY
37094: LIST
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: PPUSH
37102: CALL_OW 69
37106: ST_TO_ADDR
// if not tmp then
37107: LD_VAR 0 2
37111: NOT
37112: IFFALSE 37116
// continue ;
37114: GO 36911
// HackLink ( i , tmp ) ;
37116: LD_VAR 0 1
37120: PPUSH
37121: LD_VAR 0 2
37125: PPUSH
37126: CALL 37273 0 2
// end ;
37130: GO 36911
37132: POP
37133: POP
// end ;
37134: PPOPN 2
37136: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37137: LD_INT 0
37139: PPUSH
37140: PPUSH
37141: PPUSH
// if not hack in hackTanks then
37142: LD_VAR 0 1
37146: PUSH
37147: LD_EXP 125
37151: IN
37152: NOT
37153: IFFALSE 37157
// exit ;
37155: GO 37268
// index := GetElementIndex ( hackTanks , hack ) ;
37157: LD_ADDR_VAR 0 4
37161: PUSH
37162: LD_EXP 125
37166: PPUSH
37167: LD_VAR 0 1
37171: PPUSH
37172: CALL 44710 0 2
37176: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37177: LD_EXP 126
37181: PUSH
37182: LD_VAR 0 4
37186: ARRAY
37187: IFFALSE 37268
// begin for i in hackTanksCaptured [ index ] do
37189: LD_ADDR_VAR 0 3
37193: PUSH
37194: LD_EXP 126
37198: PUSH
37199: LD_VAR 0 4
37203: ARRAY
37204: PUSH
37205: FOR_IN
37206: IFFALSE 37232
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37208: LD_VAR 0 3
37212: PUSH
37213: LD_INT 1
37215: ARRAY
37216: PPUSH
37217: LD_VAR 0 3
37221: PUSH
37222: LD_INT 2
37224: ARRAY
37225: PPUSH
37226: CALL_OW 235
37230: GO 37205
37232: POP
37233: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37234: LD_ADDR_EXP 126
37238: PUSH
37239: LD_EXP 126
37243: PPUSH
37244: LD_VAR 0 4
37248: PPUSH
37249: EMPTY
37250: PPUSH
37251: CALL_OW 1
37255: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37256: LD_VAR 0 1
37260: PPUSH
37261: LD_INT 0
37263: PPUSH
37264: CALL_OW 505
// end ; end ;
37268: LD_VAR 0 2
37272: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37273: LD_INT 0
37275: PPUSH
37276: PPUSH
37277: PPUSH
// if not hack in hackTanks or not vehicles then
37278: LD_VAR 0 1
37282: PUSH
37283: LD_EXP 125
37287: IN
37288: NOT
37289: PUSH
37290: LD_VAR 0 2
37294: NOT
37295: OR
37296: IFFALSE 37300
// exit ;
37298: GO 37575
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37300: LD_ADDR_VAR 0 2
37304: PUSH
37305: LD_VAR 0 1
37309: PPUSH
37310: LD_VAR 0 2
37314: PPUSH
37315: LD_INT 1
37317: PPUSH
37318: LD_INT 1
37320: PPUSH
37321: CALL 45360 0 4
37325: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37326: LD_ADDR_VAR 0 5
37330: PUSH
37331: LD_EXP 125
37335: PPUSH
37336: LD_VAR 0 1
37340: PPUSH
37341: CALL 44710 0 2
37345: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37346: LD_EXP 126
37350: PUSH
37351: LD_VAR 0 5
37355: ARRAY
37356: PUSH
37357: LD_EXP 127
37361: LESS
37362: IFFALSE 37551
// begin for i := 1 to vehicles do
37364: LD_ADDR_VAR 0 4
37368: PUSH
37369: DOUBLE
37370: LD_INT 1
37372: DEC
37373: ST_TO_ADDR
37374: LD_VAR 0 2
37378: PUSH
37379: FOR_TO
37380: IFFALSE 37549
// begin if hackTanksCaptured [ index ] = hackLimit then
37382: LD_EXP 126
37386: PUSH
37387: LD_VAR 0 5
37391: ARRAY
37392: PUSH
37393: LD_EXP 127
37397: EQUAL
37398: IFFALSE 37402
// break ;
37400: GO 37549
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37402: LD_ADDR_EXP 129
37406: PUSH
37407: LD_EXP 129
37411: PPUSH
37412: LD_VAR 0 5
37416: PPUSH
37417: LD_EXP 129
37421: PUSH
37422: LD_VAR 0 5
37426: ARRAY
37427: PUSH
37428: LD_INT 1
37430: PLUS
37431: PPUSH
37432: CALL_OW 1
37436: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37437: LD_ADDR_EXP 126
37441: PUSH
37442: LD_EXP 126
37446: PPUSH
37447: LD_VAR 0 5
37451: PUSH
37452: LD_EXP 126
37456: PUSH
37457: LD_VAR 0 5
37461: ARRAY
37462: PUSH
37463: LD_INT 1
37465: PLUS
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PPUSH
37471: LD_VAR 0 2
37475: PUSH
37476: LD_VAR 0 4
37480: ARRAY
37481: PUSH
37482: LD_VAR 0 2
37486: PUSH
37487: LD_VAR 0 4
37491: ARRAY
37492: PPUSH
37493: CALL_OW 255
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PPUSH
37502: CALL 44925 0 3
37506: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37507: LD_VAR 0 2
37511: PUSH
37512: LD_VAR 0 4
37516: ARRAY
37517: PPUSH
37518: LD_VAR 0 1
37522: PPUSH
37523: CALL_OW 255
37527: PPUSH
37528: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37532: LD_VAR 0 2
37536: PUSH
37537: LD_VAR 0 4
37541: ARRAY
37542: PPUSH
37543: CALL_OW 141
// end ;
37547: GO 37379
37549: POP
37550: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37551: LD_VAR 0 1
37555: PPUSH
37556: LD_EXP 126
37560: PUSH
37561: LD_VAR 0 5
37565: ARRAY
37566: PUSH
37567: LD_INT 0
37569: PLUS
37570: PPUSH
37571: CALL_OW 505
// end ;
37575: LD_VAR 0 3
37579: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37580: LD_INT 0
37582: PPUSH
37583: PPUSH
37584: PPUSH
37585: PPUSH
// if not hack in hackTanks then
37586: LD_VAR 0 1
37590: PUSH
37591: LD_EXP 125
37595: IN
37596: NOT
37597: IFFALSE 37601
// exit ;
37599: GO 37841
// index := GetElementIndex ( hackTanks , hack ) ;
37601: LD_ADDR_VAR 0 4
37605: PUSH
37606: LD_EXP 125
37610: PPUSH
37611: LD_VAR 0 1
37615: PPUSH
37616: CALL 44710 0 2
37620: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37621: LD_ADDR_VAR 0 3
37625: PUSH
37626: DOUBLE
37627: LD_EXP 126
37631: PUSH
37632: LD_VAR 0 4
37636: ARRAY
37637: INC
37638: ST_TO_ADDR
37639: LD_INT 1
37641: PUSH
37642: FOR_DOWNTO
37643: IFFALSE 37815
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37645: LD_ADDR_VAR 0 5
37649: PUSH
37650: LD_EXP 126
37654: PUSH
37655: LD_VAR 0 4
37659: ARRAY
37660: PUSH
37661: LD_VAR 0 3
37665: ARRAY
37666: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37667: LD_VAR 0 5
37671: PUSH
37672: LD_INT 1
37674: ARRAY
37675: PPUSH
37676: CALL_OW 302
37680: NOT
37681: PUSH
37682: LD_VAR 0 5
37686: PUSH
37687: LD_INT 1
37689: ARRAY
37690: PPUSH
37691: CALL_OW 255
37695: PUSH
37696: LD_VAR 0 1
37700: PPUSH
37701: CALL_OW 255
37705: NONEQUAL
37706: OR
37707: IFFALSE 37813
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37709: LD_VAR 0 5
37713: PUSH
37714: LD_INT 1
37716: ARRAY
37717: PPUSH
37718: CALL_OW 305
37722: PUSH
37723: LD_VAR 0 5
37727: PUSH
37728: LD_INT 1
37730: ARRAY
37731: PPUSH
37732: CALL_OW 255
37736: PUSH
37737: LD_VAR 0 1
37741: PPUSH
37742: CALL_OW 255
37746: EQUAL
37747: AND
37748: IFFALSE 37772
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37750: LD_VAR 0 5
37754: PUSH
37755: LD_INT 1
37757: ARRAY
37758: PPUSH
37759: LD_VAR 0 5
37763: PUSH
37764: LD_INT 2
37766: ARRAY
37767: PPUSH
37768: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37772: LD_ADDR_EXP 126
37776: PUSH
37777: LD_EXP 126
37781: PPUSH
37782: LD_VAR 0 4
37786: PPUSH
37787: LD_EXP 126
37791: PUSH
37792: LD_VAR 0 4
37796: ARRAY
37797: PPUSH
37798: LD_VAR 0 3
37802: PPUSH
37803: CALL_OW 3
37807: PPUSH
37808: CALL_OW 1
37812: ST_TO_ADDR
// end ; end ;
37813: GO 37642
37815: POP
37816: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37817: LD_VAR 0 1
37821: PPUSH
37822: LD_EXP 126
37826: PUSH
37827: LD_VAR 0 4
37831: ARRAY
37832: PUSH
37833: LD_INT 0
37835: PLUS
37836: PPUSH
37837: CALL_OW 505
// end ;
37841: LD_VAR 0 2
37845: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37846: LD_INT 0
37848: PPUSH
37849: PPUSH
37850: PPUSH
37851: PPUSH
// if not hack in hackTanks then
37852: LD_VAR 0 1
37856: PUSH
37857: LD_EXP 125
37861: IN
37862: NOT
37863: IFFALSE 37867
// exit ;
37865: GO 37952
// index := GetElementIndex ( hackTanks , hack ) ;
37867: LD_ADDR_VAR 0 5
37871: PUSH
37872: LD_EXP 125
37876: PPUSH
37877: LD_VAR 0 1
37881: PPUSH
37882: CALL 44710 0 2
37886: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37887: LD_ADDR_VAR 0 4
37891: PUSH
37892: DOUBLE
37893: LD_INT 1
37895: DEC
37896: ST_TO_ADDR
37897: LD_EXP 126
37901: PUSH
37902: LD_VAR 0 5
37906: ARRAY
37907: PUSH
37908: FOR_TO
37909: IFFALSE 37950
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37911: LD_EXP 126
37915: PUSH
37916: LD_VAR 0 5
37920: ARRAY
37921: PUSH
37922: LD_VAR 0 4
37926: ARRAY
37927: PUSH
37928: LD_INT 1
37930: ARRAY
37931: PUSH
37932: LD_VAR 0 2
37936: EQUAL
37937: IFFALSE 37948
// KillUnit ( vehicle ) ;
37939: LD_VAR 0 2
37943: PPUSH
37944: CALL_OW 66
37948: GO 37908
37950: POP
37951: POP
// end ;
37952: LD_VAR 0 3
37956: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37957: LD_EXP 130
37961: NOT
37962: IFFALSE 37997
37964: GO 37966
37966: DISABLE
// begin initMiner := true ;
37967: LD_ADDR_EXP 130
37971: PUSH
37972: LD_INT 1
37974: ST_TO_ADDR
// minersList := [ ] ;
37975: LD_ADDR_EXP 131
37979: PUSH
37980: EMPTY
37981: ST_TO_ADDR
// minerMinesList := [ ] ;
37982: LD_ADDR_EXP 132
37986: PUSH
37987: EMPTY
37988: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37989: LD_ADDR_EXP 133
37993: PUSH
37994: LD_INT 5
37996: ST_TO_ADDR
// end ;
37997: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37998: LD_EXP 130
38002: PUSH
38003: LD_INT 34
38005: PUSH
38006: LD_INT 81
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PPUSH
38013: CALL_OW 69
38017: AND
38018: IFFALSE 38479
38020: GO 38022
38022: DISABLE
38023: LD_INT 0
38025: PPUSH
38026: PPUSH
38027: PPUSH
38028: PPUSH
// begin enable ;
38029: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38030: LD_ADDR_VAR 0 1
38034: PUSH
38035: LD_INT 34
38037: PUSH
38038: LD_INT 81
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PPUSH
38045: CALL_OW 69
38049: PUSH
38050: FOR_IN
38051: IFFALSE 38123
// begin if not i in minersList then
38053: LD_VAR 0 1
38057: PUSH
38058: LD_EXP 131
38062: IN
38063: NOT
38064: IFFALSE 38121
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38066: LD_ADDR_EXP 131
38070: PUSH
38071: LD_EXP 131
38075: PPUSH
38076: LD_EXP 131
38080: PUSH
38081: LD_INT 1
38083: PLUS
38084: PPUSH
38085: LD_VAR 0 1
38089: PPUSH
38090: CALL_OW 1
38094: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38095: LD_ADDR_EXP 132
38099: PUSH
38100: LD_EXP 132
38104: PPUSH
38105: LD_EXP 132
38109: PUSH
38110: LD_INT 1
38112: PLUS
38113: PPUSH
38114: EMPTY
38115: PPUSH
38116: CALL_OW 1
38120: ST_TO_ADDR
// end end ;
38121: GO 38050
38123: POP
38124: POP
// for i := minerMinesList downto 1 do
38125: LD_ADDR_VAR 0 1
38129: PUSH
38130: DOUBLE
38131: LD_EXP 132
38135: INC
38136: ST_TO_ADDR
38137: LD_INT 1
38139: PUSH
38140: FOR_DOWNTO
38141: IFFALSE 38477
// begin if IsLive ( minersList [ i ] ) then
38143: LD_EXP 131
38147: PUSH
38148: LD_VAR 0 1
38152: ARRAY
38153: PPUSH
38154: CALL_OW 300
38158: IFFALSE 38186
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38160: LD_EXP 131
38164: PUSH
38165: LD_VAR 0 1
38169: ARRAY
38170: PPUSH
38171: LD_EXP 132
38175: PUSH
38176: LD_VAR 0 1
38180: ARRAY
38181: PPUSH
38182: CALL_OW 505
// if not minerMinesList [ i ] then
38186: LD_EXP 132
38190: PUSH
38191: LD_VAR 0 1
38195: ARRAY
38196: NOT
38197: IFFALSE 38201
// continue ;
38199: GO 38140
// for j := minerMinesList [ i ] downto 1 do
38201: LD_ADDR_VAR 0 2
38205: PUSH
38206: DOUBLE
38207: LD_EXP 132
38211: PUSH
38212: LD_VAR 0 1
38216: ARRAY
38217: INC
38218: ST_TO_ADDR
38219: LD_INT 1
38221: PUSH
38222: FOR_DOWNTO
38223: IFFALSE 38473
// begin side := GetSide ( minersList [ i ] ) ;
38225: LD_ADDR_VAR 0 3
38229: PUSH
38230: LD_EXP 131
38234: PUSH
38235: LD_VAR 0 1
38239: ARRAY
38240: PPUSH
38241: CALL_OW 255
38245: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38246: LD_ADDR_VAR 0 4
38250: PUSH
38251: LD_EXP 132
38255: PUSH
38256: LD_VAR 0 1
38260: ARRAY
38261: PUSH
38262: LD_VAR 0 2
38266: ARRAY
38267: PUSH
38268: LD_INT 1
38270: ARRAY
38271: PPUSH
38272: LD_EXP 132
38276: PUSH
38277: LD_VAR 0 1
38281: ARRAY
38282: PUSH
38283: LD_VAR 0 2
38287: ARRAY
38288: PUSH
38289: LD_INT 2
38291: ARRAY
38292: PPUSH
38293: CALL_OW 428
38297: ST_TO_ADDR
// if not tmp then
38298: LD_VAR 0 4
38302: NOT
38303: IFFALSE 38307
// continue ;
38305: GO 38222
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38307: LD_VAR 0 4
38311: PUSH
38312: LD_INT 81
38314: PUSH
38315: LD_VAR 0 3
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PPUSH
38324: CALL_OW 69
38328: IN
38329: PUSH
38330: LD_EXP 132
38334: PUSH
38335: LD_VAR 0 1
38339: ARRAY
38340: PUSH
38341: LD_VAR 0 2
38345: ARRAY
38346: PUSH
38347: LD_INT 1
38349: ARRAY
38350: PPUSH
38351: LD_EXP 132
38355: PUSH
38356: LD_VAR 0 1
38360: ARRAY
38361: PUSH
38362: LD_VAR 0 2
38366: ARRAY
38367: PUSH
38368: LD_INT 2
38370: ARRAY
38371: PPUSH
38372: CALL_OW 458
38376: AND
38377: IFFALSE 38471
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38379: LD_EXP 132
38383: PUSH
38384: LD_VAR 0 1
38388: ARRAY
38389: PUSH
38390: LD_VAR 0 2
38394: ARRAY
38395: PUSH
38396: LD_INT 1
38398: ARRAY
38399: PPUSH
38400: LD_EXP 132
38404: PUSH
38405: LD_VAR 0 1
38409: ARRAY
38410: PUSH
38411: LD_VAR 0 2
38415: ARRAY
38416: PUSH
38417: LD_INT 2
38419: ARRAY
38420: PPUSH
38421: LD_VAR 0 3
38425: PPUSH
38426: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38430: LD_ADDR_EXP 132
38434: PUSH
38435: LD_EXP 132
38439: PPUSH
38440: LD_VAR 0 1
38444: PPUSH
38445: LD_EXP 132
38449: PUSH
38450: LD_VAR 0 1
38454: ARRAY
38455: PPUSH
38456: LD_VAR 0 2
38460: PPUSH
38461: CALL_OW 3
38465: PPUSH
38466: CALL_OW 1
38470: ST_TO_ADDR
// end ; end ;
38471: GO 38222
38473: POP
38474: POP
// end ;
38475: GO 38140
38477: POP
38478: POP
// end ;
38479: PPOPN 4
38481: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38482: LD_INT 0
38484: PPUSH
38485: PPUSH
// result := false ;
38486: LD_ADDR_VAR 0 4
38490: PUSH
38491: LD_INT 0
38493: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38494: LD_VAR 0 1
38498: PPUSH
38499: CALL_OW 264
38503: PUSH
38504: LD_INT 81
38506: EQUAL
38507: NOT
38508: IFFALSE 38512
// exit ;
38510: GO 38752
// index := GetElementIndex ( minersList , unit ) ;
38512: LD_ADDR_VAR 0 5
38516: PUSH
38517: LD_EXP 131
38521: PPUSH
38522: LD_VAR 0 1
38526: PPUSH
38527: CALL 44710 0 2
38531: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38532: LD_EXP 132
38536: PUSH
38537: LD_VAR 0 5
38541: ARRAY
38542: PUSH
38543: LD_EXP 133
38547: GREATEREQUAL
38548: IFFALSE 38552
// exit ;
38550: GO 38752
// ComMoveXY ( unit , x , y ) ;
38552: LD_VAR 0 1
38556: PPUSH
38557: LD_VAR 0 2
38561: PPUSH
38562: LD_VAR 0 3
38566: PPUSH
38567: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38571: LD_INT 35
38573: PPUSH
38574: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38578: LD_VAR 0 1
38582: PPUSH
38583: LD_VAR 0 2
38587: PPUSH
38588: LD_VAR 0 3
38592: PPUSH
38593: CALL 76462 0 3
38597: NOT
38598: PUSH
38599: LD_VAR 0 1
38603: PPUSH
38604: CALL_OW 314
38608: AND
38609: IFFALSE 38613
// exit ;
38611: GO 38752
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38613: LD_VAR 0 2
38617: PPUSH
38618: LD_VAR 0 3
38622: PPUSH
38623: CALL_OW 428
38627: PUSH
38628: LD_VAR 0 1
38632: EQUAL
38633: PUSH
38634: LD_VAR 0 1
38638: PPUSH
38639: CALL_OW 314
38643: NOT
38644: AND
38645: IFFALSE 38571
// PlaySoundXY ( x , y , PlantMine ) ;
38647: LD_VAR 0 2
38651: PPUSH
38652: LD_VAR 0 3
38656: PPUSH
38657: LD_STRING PlantMine
38659: PPUSH
38660: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38664: LD_VAR 0 2
38668: PPUSH
38669: LD_VAR 0 3
38673: PPUSH
38674: LD_VAR 0 1
38678: PPUSH
38679: CALL_OW 255
38683: PPUSH
38684: LD_INT 0
38686: PPUSH
38687: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38691: LD_ADDR_EXP 132
38695: PUSH
38696: LD_EXP 132
38700: PPUSH
38701: LD_VAR 0 5
38705: PUSH
38706: LD_EXP 132
38710: PUSH
38711: LD_VAR 0 5
38715: ARRAY
38716: PUSH
38717: LD_INT 1
38719: PLUS
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PPUSH
38725: LD_VAR 0 2
38729: PUSH
38730: LD_VAR 0 3
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PPUSH
38739: CALL 44925 0 3
38743: ST_TO_ADDR
// result := true ;
38744: LD_ADDR_VAR 0 4
38748: PUSH
38749: LD_INT 1
38751: ST_TO_ADDR
// end ;
38752: LD_VAR 0 4
38756: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38757: LD_INT 0
38759: PPUSH
38760: PPUSH
38761: PPUSH
// if not unit in minersList then
38762: LD_VAR 0 1
38766: PUSH
38767: LD_EXP 131
38771: IN
38772: NOT
38773: IFFALSE 38777
// exit ;
38775: GO 39169
// index := GetElementIndex ( minersList , unit ) ;
38777: LD_ADDR_VAR 0 6
38781: PUSH
38782: LD_EXP 131
38786: PPUSH
38787: LD_VAR 0 1
38791: PPUSH
38792: CALL 44710 0 2
38796: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38797: LD_ADDR_VAR 0 5
38801: PUSH
38802: DOUBLE
38803: LD_EXP 132
38807: PUSH
38808: LD_VAR 0 6
38812: ARRAY
38813: INC
38814: ST_TO_ADDR
38815: LD_INT 1
38817: PUSH
38818: FOR_DOWNTO
38819: IFFALSE 38980
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38821: LD_EXP 132
38825: PUSH
38826: LD_VAR 0 6
38830: ARRAY
38831: PUSH
38832: LD_VAR 0 5
38836: ARRAY
38837: PUSH
38838: LD_INT 1
38840: ARRAY
38841: PUSH
38842: LD_VAR 0 2
38846: EQUAL
38847: PUSH
38848: LD_EXP 132
38852: PUSH
38853: LD_VAR 0 6
38857: ARRAY
38858: PUSH
38859: LD_VAR 0 5
38863: ARRAY
38864: PUSH
38865: LD_INT 2
38867: ARRAY
38868: PUSH
38869: LD_VAR 0 3
38873: EQUAL
38874: AND
38875: IFFALSE 38978
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38877: LD_EXP 132
38881: PUSH
38882: LD_VAR 0 6
38886: ARRAY
38887: PUSH
38888: LD_VAR 0 5
38892: ARRAY
38893: PUSH
38894: LD_INT 1
38896: ARRAY
38897: PPUSH
38898: LD_EXP 132
38902: PUSH
38903: LD_VAR 0 6
38907: ARRAY
38908: PUSH
38909: LD_VAR 0 5
38913: ARRAY
38914: PUSH
38915: LD_INT 2
38917: ARRAY
38918: PPUSH
38919: LD_VAR 0 1
38923: PPUSH
38924: CALL_OW 255
38928: PPUSH
38929: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38933: LD_ADDR_EXP 132
38937: PUSH
38938: LD_EXP 132
38942: PPUSH
38943: LD_VAR 0 6
38947: PPUSH
38948: LD_EXP 132
38952: PUSH
38953: LD_VAR 0 6
38957: ARRAY
38958: PPUSH
38959: LD_VAR 0 5
38963: PPUSH
38964: CALL_OW 3
38968: PPUSH
38969: CALL_OW 1
38973: ST_TO_ADDR
// exit ;
38974: POP
38975: POP
38976: GO 39169
// end ; end ;
38978: GO 38818
38980: POP
38981: POP
// for i := minerMinesList [ index ] downto 1 do
38982: LD_ADDR_VAR 0 5
38986: PUSH
38987: DOUBLE
38988: LD_EXP 132
38992: PUSH
38993: LD_VAR 0 6
38997: ARRAY
38998: INC
38999: ST_TO_ADDR
39000: LD_INT 1
39002: PUSH
39003: FOR_DOWNTO
39004: IFFALSE 39167
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39006: LD_EXP 132
39010: PUSH
39011: LD_VAR 0 6
39015: ARRAY
39016: PUSH
39017: LD_VAR 0 5
39021: ARRAY
39022: PUSH
39023: LD_INT 1
39025: ARRAY
39026: PPUSH
39027: LD_EXP 132
39031: PUSH
39032: LD_VAR 0 6
39036: ARRAY
39037: PUSH
39038: LD_VAR 0 5
39042: ARRAY
39043: PUSH
39044: LD_INT 2
39046: ARRAY
39047: PPUSH
39048: LD_VAR 0 2
39052: PPUSH
39053: LD_VAR 0 3
39057: PPUSH
39058: CALL_OW 298
39062: PUSH
39063: LD_INT 6
39065: LESS
39066: IFFALSE 39165
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39068: LD_EXP 132
39072: PUSH
39073: LD_VAR 0 6
39077: ARRAY
39078: PUSH
39079: LD_VAR 0 5
39083: ARRAY
39084: PUSH
39085: LD_INT 1
39087: ARRAY
39088: PPUSH
39089: LD_EXP 132
39093: PUSH
39094: LD_VAR 0 6
39098: ARRAY
39099: PUSH
39100: LD_VAR 0 5
39104: ARRAY
39105: PUSH
39106: LD_INT 2
39108: ARRAY
39109: PPUSH
39110: LD_VAR 0 1
39114: PPUSH
39115: CALL_OW 255
39119: PPUSH
39120: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39124: LD_ADDR_EXP 132
39128: PUSH
39129: LD_EXP 132
39133: PPUSH
39134: LD_VAR 0 6
39138: PPUSH
39139: LD_EXP 132
39143: PUSH
39144: LD_VAR 0 6
39148: ARRAY
39149: PPUSH
39150: LD_VAR 0 5
39154: PPUSH
39155: CALL_OW 3
39159: PPUSH
39160: CALL_OW 1
39164: ST_TO_ADDR
// end ; end ;
39165: GO 39003
39167: POP
39168: POP
// end ;
39169: LD_VAR 0 4
39173: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39174: LD_INT 0
39176: PPUSH
39177: PPUSH
39178: PPUSH
39179: PPUSH
39180: PPUSH
39181: PPUSH
39182: PPUSH
39183: PPUSH
39184: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39185: LD_VAR 0 1
39189: PPUSH
39190: CALL_OW 264
39194: PUSH
39195: LD_INT 81
39197: EQUAL
39198: NOT
39199: PUSH
39200: LD_VAR 0 1
39204: PUSH
39205: LD_EXP 131
39209: IN
39210: NOT
39211: OR
39212: IFFALSE 39216
// exit ;
39214: GO 39538
// index := GetElementIndex ( minersList , unit ) ;
39216: LD_ADDR_VAR 0 6
39220: PUSH
39221: LD_EXP 131
39225: PPUSH
39226: LD_VAR 0 1
39230: PPUSH
39231: CALL 44710 0 2
39235: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39236: LD_ADDR_VAR 0 8
39240: PUSH
39241: LD_EXP 133
39245: PUSH
39246: LD_EXP 132
39250: PUSH
39251: LD_VAR 0 6
39255: ARRAY
39256: MINUS
39257: ST_TO_ADDR
// if not minesFreeAmount then
39258: LD_VAR 0 8
39262: NOT
39263: IFFALSE 39267
// exit ;
39265: GO 39538
// tmp := [ ] ;
39267: LD_ADDR_VAR 0 7
39271: PUSH
39272: EMPTY
39273: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39274: LD_ADDR_VAR 0 5
39278: PUSH
39279: DOUBLE
39280: LD_INT 1
39282: DEC
39283: ST_TO_ADDR
39284: LD_VAR 0 8
39288: PUSH
39289: FOR_TO
39290: IFFALSE 39485
// begin _d := rand ( 0 , 5 ) ;
39292: LD_ADDR_VAR 0 11
39296: PUSH
39297: LD_INT 0
39299: PPUSH
39300: LD_INT 5
39302: PPUSH
39303: CALL_OW 12
39307: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39308: LD_ADDR_VAR 0 12
39312: PUSH
39313: LD_INT 2
39315: PPUSH
39316: LD_INT 6
39318: PPUSH
39319: CALL_OW 12
39323: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39324: LD_ADDR_VAR 0 9
39328: PUSH
39329: LD_VAR 0 2
39333: PPUSH
39334: LD_VAR 0 11
39338: PPUSH
39339: LD_VAR 0 12
39343: PPUSH
39344: CALL_OW 272
39348: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39349: LD_ADDR_VAR 0 10
39353: PUSH
39354: LD_VAR 0 3
39358: PPUSH
39359: LD_VAR 0 11
39363: PPUSH
39364: LD_VAR 0 12
39368: PPUSH
39369: CALL_OW 273
39373: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39374: LD_VAR 0 9
39378: PPUSH
39379: LD_VAR 0 10
39383: PPUSH
39384: CALL_OW 488
39388: PUSH
39389: LD_VAR 0 9
39393: PUSH
39394: LD_VAR 0 10
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_VAR 0 7
39407: IN
39408: NOT
39409: AND
39410: PUSH
39411: LD_VAR 0 9
39415: PPUSH
39416: LD_VAR 0 10
39420: PPUSH
39421: CALL_OW 458
39425: NOT
39426: AND
39427: IFFALSE 39469
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39429: LD_ADDR_VAR 0 7
39433: PUSH
39434: LD_VAR 0 7
39438: PPUSH
39439: LD_VAR 0 7
39443: PUSH
39444: LD_INT 1
39446: PLUS
39447: PPUSH
39448: LD_VAR 0 9
39452: PUSH
39453: LD_VAR 0 10
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PPUSH
39462: CALL_OW 1
39466: ST_TO_ADDR
39467: GO 39483
// i := i - 1 ;
39469: LD_ADDR_VAR 0 5
39473: PUSH
39474: LD_VAR 0 5
39478: PUSH
39479: LD_INT 1
39481: MINUS
39482: ST_TO_ADDR
// end ;
39483: GO 39289
39485: POP
39486: POP
// for i in tmp do
39487: LD_ADDR_VAR 0 5
39491: PUSH
39492: LD_VAR 0 7
39496: PUSH
39497: FOR_IN
39498: IFFALSE 39536
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39500: LD_VAR 0 1
39504: PPUSH
39505: LD_VAR 0 5
39509: PUSH
39510: LD_INT 1
39512: ARRAY
39513: PPUSH
39514: LD_VAR 0 5
39518: PUSH
39519: LD_INT 2
39521: ARRAY
39522: PPUSH
39523: CALL 38482 0 3
39527: NOT
39528: IFFALSE 39534
// exit ;
39530: POP
39531: POP
39532: GO 39538
39534: GO 39497
39536: POP
39537: POP
// end ;
39538: LD_VAR 0 4
39542: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39543: LD_INT 0
39545: PPUSH
39546: PPUSH
39547: PPUSH
39548: PPUSH
39549: PPUSH
39550: PPUSH
39551: PPUSH
// if not GetClass ( unit ) = class_sniper then
39552: LD_VAR 0 1
39556: PPUSH
39557: CALL_OW 257
39561: PUSH
39562: LD_INT 5
39564: EQUAL
39565: NOT
39566: IFFALSE 39570
// exit ;
39568: GO 39958
// dist := 8 ;
39570: LD_ADDR_VAR 0 5
39574: PUSH
39575: LD_INT 8
39577: ST_TO_ADDR
// viewRange := 12 ;
39578: LD_ADDR_VAR 0 7
39582: PUSH
39583: LD_INT 12
39585: ST_TO_ADDR
// side := GetSide ( unit ) ;
39586: LD_ADDR_VAR 0 6
39590: PUSH
39591: LD_VAR 0 1
39595: PPUSH
39596: CALL_OW 255
39600: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39601: LD_INT 61
39603: PPUSH
39604: LD_VAR 0 6
39608: PPUSH
39609: CALL_OW 321
39613: PUSH
39614: LD_INT 2
39616: EQUAL
39617: IFFALSE 39627
// viewRange := 16 ;
39619: LD_ADDR_VAR 0 7
39623: PUSH
39624: LD_INT 16
39626: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39627: LD_VAR 0 1
39631: PPUSH
39632: LD_VAR 0 2
39636: PPUSH
39637: LD_VAR 0 3
39641: PPUSH
39642: CALL_OW 297
39646: PUSH
39647: LD_VAR 0 5
39651: GREATER
39652: IFFALSE 39731
// begin ComMoveXY ( unit , x , y ) ;
39654: LD_VAR 0 1
39658: PPUSH
39659: LD_VAR 0 2
39663: PPUSH
39664: LD_VAR 0 3
39668: PPUSH
39669: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39673: LD_INT 35
39675: PPUSH
39676: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39680: LD_VAR 0 1
39684: PPUSH
39685: LD_VAR 0 2
39689: PPUSH
39690: LD_VAR 0 3
39694: PPUSH
39695: CALL 76462 0 3
39699: NOT
39700: IFFALSE 39704
// exit ;
39702: GO 39958
// until GetDistUnitXY ( unit , x , y ) < dist ;
39704: LD_VAR 0 1
39708: PPUSH
39709: LD_VAR 0 2
39713: PPUSH
39714: LD_VAR 0 3
39718: PPUSH
39719: CALL_OW 297
39723: PUSH
39724: LD_VAR 0 5
39728: LESS
39729: IFFALSE 39673
// end ; ComTurnXY ( unit , x , y ) ;
39731: LD_VAR 0 1
39735: PPUSH
39736: LD_VAR 0 2
39740: PPUSH
39741: LD_VAR 0 3
39745: PPUSH
39746: CALL_OW 118
// wait ( 5 ) ;
39750: LD_INT 5
39752: PPUSH
39753: CALL_OW 67
// _d := GetDir ( unit ) ;
39757: LD_ADDR_VAR 0 10
39761: PUSH
39762: LD_VAR 0 1
39766: PPUSH
39767: CALL_OW 254
39771: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39772: LD_ADDR_VAR 0 8
39776: PUSH
39777: LD_VAR 0 1
39781: PPUSH
39782: CALL_OW 250
39786: PPUSH
39787: LD_VAR 0 10
39791: PPUSH
39792: LD_VAR 0 5
39796: PPUSH
39797: CALL_OW 272
39801: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39802: LD_ADDR_VAR 0 9
39806: PUSH
39807: LD_VAR 0 1
39811: PPUSH
39812: CALL_OW 251
39816: PPUSH
39817: LD_VAR 0 10
39821: PPUSH
39822: LD_VAR 0 5
39826: PPUSH
39827: CALL_OW 273
39831: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39832: LD_VAR 0 8
39836: PPUSH
39837: LD_VAR 0 9
39841: PPUSH
39842: CALL_OW 488
39846: NOT
39847: IFFALSE 39851
// exit ;
39849: GO 39958
// ComAnimCustom ( unit , 1 ) ;
39851: LD_VAR 0 1
39855: PPUSH
39856: LD_INT 1
39858: PPUSH
39859: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39863: LD_VAR 0 8
39867: PPUSH
39868: LD_VAR 0 9
39872: PPUSH
39873: LD_VAR 0 6
39877: PPUSH
39878: LD_VAR 0 7
39882: PPUSH
39883: CALL_OW 330
// repeat wait ( 1 ) ;
39887: LD_INT 1
39889: PPUSH
39890: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39894: LD_VAR 0 1
39898: PPUSH
39899: CALL_OW 316
39903: PUSH
39904: LD_VAR 0 1
39908: PPUSH
39909: CALL_OW 314
39913: OR
39914: PUSH
39915: LD_VAR 0 1
39919: PPUSH
39920: CALL_OW 302
39924: NOT
39925: OR
39926: PUSH
39927: LD_VAR 0 1
39931: PPUSH
39932: CALL_OW 301
39936: OR
39937: IFFALSE 39887
// RemoveSeeing ( _x , _y , side ) ;
39939: LD_VAR 0 8
39943: PPUSH
39944: LD_VAR 0 9
39948: PPUSH
39949: LD_VAR 0 6
39953: PPUSH
39954: CALL_OW 331
// end ; end_of_file
39958: LD_VAR 0 4
39962: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39963: LD_INT 0
39965: PPUSH
39966: PPUSH
// if exist_mode then
39967: LD_VAR 0 2
39971: IFFALSE 39996
// unit := CreateCharacter ( prefix & ident ) else
39973: LD_ADDR_VAR 0 5
39977: PUSH
39978: LD_VAR 0 3
39982: PUSH
39983: LD_VAR 0 1
39987: STR
39988: PPUSH
39989: CALL_OW 34
39993: ST_TO_ADDR
39994: GO 40011
// unit := NewCharacter ( ident ) ;
39996: LD_ADDR_VAR 0 5
40000: PUSH
40001: LD_VAR 0 1
40005: PPUSH
40006: CALL_OW 25
40010: ST_TO_ADDR
// result := unit ;
40011: LD_ADDR_VAR 0 4
40015: PUSH
40016: LD_VAR 0 5
40020: ST_TO_ADDR
// end ;
40021: LD_VAR 0 4
40025: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40026: LD_INT 0
40028: PPUSH
40029: PPUSH
// if not side or not nation then
40030: LD_VAR 0 1
40034: NOT
40035: PUSH
40036: LD_VAR 0 2
40040: NOT
40041: OR
40042: IFFALSE 40046
// exit ;
40044: GO 40814
// case nation of nation_american :
40046: LD_VAR 0 2
40050: PUSH
40051: LD_INT 1
40053: DOUBLE
40054: EQUAL
40055: IFTRUE 40059
40057: GO 40273
40059: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40060: LD_ADDR_VAR 0 4
40064: PUSH
40065: LD_INT 35
40067: PUSH
40068: LD_INT 45
40070: PUSH
40071: LD_INT 46
40073: PUSH
40074: LD_INT 47
40076: PUSH
40077: LD_INT 82
40079: PUSH
40080: LD_INT 83
40082: PUSH
40083: LD_INT 84
40085: PUSH
40086: LD_INT 85
40088: PUSH
40089: LD_INT 86
40091: PUSH
40092: LD_INT 1
40094: PUSH
40095: LD_INT 2
40097: PUSH
40098: LD_INT 6
40100: PUSH
40101: LD_INT 15
40103: PUSH
40104: LD_INT 16
40106: PUSH
40107: LD_INT 7
40109: PUSH
40110: LD_INT 12
40112: PUSH
40113: LD_INT 13
40115: PUSH
40116: LD_INT 10
40118: PUSH
40119: LD_INT 14
40121: PUSH
40122: LD_INT 20
40124: PUSH
40125: LD_INT 21
40127: PUSH
40128: LD_INT 22
40130: PUSH
40131: LD_INT 25
40133: PUSH
40134: LD_INT 32
40136: PUSH
40137: LD_INT 27
40139: PUSH
40140: LD_INT 36
40142: PUSH
40143: LD_INT 69
40145: PUSH
40146: LD_INT 39
40148: PUSH
40149: LD_INT 34
40151: PUSH
40152: LD_INT 40
40154: PUSH
40155: LD_INT 48
40157: PUSH
40158: LD_INT 49
40160: PUSH
40161: LD_INT 50
40163: PUSH
40164: LD_INT 51
40166: PUSH
40167: LD_INT 52
40169: PUSH
40170: LD_INT 53
40172: PUSH
40173: LD_INT 54
40175: PUSH
40176: LD_INT 55
40178: PUSH
40179: LD_INT 56
40181: PUSH
40182: LD_INT 57
40184: PUSH
40185: LD_INT 58
40187: PUSH
40188: LD_INT 59
40190: PUSH
40191: LD_INT 60
40193: PUSH
40194: LD_INT 61
40196: PUSH
40197: LD_INT 62
40199: PUSH
40200: LD_INT 80
40202: PUSH
40203: LD_INT 82
40205: PUSH
40206: LD_INT 83
40208: PUSH
40209: LD_INT 84
40211: PUSH
40212: LD_INT 85
40214: PUSH
40215: LD_INT 86
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: ST_TO_ADDR
40271: GO 40738
40273: LD_INT 2
40275: DOUBLE
40276: EQUAL
40277: IFTRUE 40281
40279: GO 40507
40281: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40282: LD_ADDR_VAR 0 4
40286: PUSH
40287: LD_INT 35
40289: PUSH
40290: LD_INT 45
40292: PUSH
40293: LD_INT 46
40295: PUSH
40296: LD_INT 47
40298: PUSH
40299: LD_INT 82
40301: PUSH
40302: LD_INT 83
40304: PUSH
40305: LD_INT 84
40307: PUSH
40308: LD_INT 85
40310: PUSH
40311: LD_INT 87
40313: PUSH
40314: LD_INT 70
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: LD_INT 11
40322: PUSH
40323: LD_INT 3
40325: PUSH
40326: LD_INT 4
40328: PUSH
40329: LD_INT 5
40331: PUSH
40332: LD_INT 6
40334: PUSH
40335: LD_INT 15
40337: PUSH
40338: LD_INT 18
40340: PUSH
40341: LD_INT 7
40343: PUSH
40344: LD_INT 17
40346: PUSH
40347: LD_INT 8
40349: PUSH
40350: LD_INT 20
40352: PUSH
40353: LD_INT 21
40355: PUSH
40356: LD_INT 22
40358: PUSH
40359: LD_INT 72
40361: PUSH
40362: LD_INT 26
40364: PUSH
40365: LD_INT 69
40367: PUSH
40368: LD_INT 39
40370: PUSH
40371: LD_INT 40
40373: PUSH
40374: LD_INT 41
40376: PUSH
40377: LD_INT 42
40379: PUSH
40380: LD_INT 43
40382: PUSH
40383: LD_INT 48
40385: PUSH
40386: LD_INT 49
40388: PUSH
40389: LD_INT 50
40391: PUSH
40392: LD_INT 51
40394: PUSH
40395: LD_INT 52
40397: PUSH
40398: LD_INT 53
40400: PUSH
40401: LD_INT 54
40403: PUSH
40404: LD_INT 55
40406: PUSH
40407: LD_INT 56
40409: PUSH
40410: LD_INT 60
40412: PUSH
40413: LD_INT 61
40415: PUSH
40416: LD_INT 62
40418: PUSH
40419: LD_INT 66
40421: PUSH
40422: LD_INT 67
40424: PUSH
40425: LD_INT 68
40427: PUSH
40428: LD_INT 81
40430: PUSH
40431: LD_INT 82
40433: PUSH
40434: LD_INT 83
40436: PUSH
40437: LD_INT 84
40439: PUSH
40440: LD_INT 85
40442: PUSH
40443: LD_INT 87
40445: PUSH
40446: LD_INT 88
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: ST_TO_ADDR
40505: GO 40738
40507: LD_INT 3
40509: DOUBLE
40510: EQUAL
40511: IFTRUE 40515
40513: GO 40737
40515: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40516: LD_ADDR_VAR 0 4
40520: PUSH
40521: LD_INT 46
40523: PUSH
40524: LD_INT 47
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: LD_INT 82
40535: PUSH
40536: LD_INT 83
40538: PUSH
40539: LD_INT 84
40541: PUSH
40542: LD_INT 85
40544: PUSH
40545: LD_INT 86
40547: PUSH
40548: LD_INT 11
40550: PUSH
40551: LD_INT 9
40553: PUSH
40554: LD_INT 20
40556: PUSH
40557: LD_INT 19
40559: PUSH
40560: LD_INT 21
40562: PUSH
40563: LD_INT 24
40565: PUSH
40566: LD_INT 22
40568: PUSH
40569: LD_INT 25
40571: PUSH
40572: LD_INT 28
40574: PUSH
40575: LD_INT 29
40577: PUSH
40578: LD_INT 30
40580: PUSH
40581: LD_INT 31
40583: PUSH
40584: LD_INT 37
40586: PUSH
40587: LD_INT 38
40589: PUSH
40590: LD_INT 32
40592: PUSH
40593: LD_INT 27
40595: PUSH
40596: LD_INT 33
40598: PUSH
40599: LD_INT 69
40601: PUSH
40602: LD_INT 39
40604: PUSH
40605: LD_INT 34
40607: PUSH
40608: LD_INT 40
40610: PUSH
40611: LD_INT 71
40613: PUSH
40614: LD_INT 23
40616: PUSH
40617: LD_INT 44
40619: PUSH
40620: LD_INT 48
40622: PUSH
40623: LD_INT 49
40625: PUSH
40626: LD_INT 50
40628: PUSH
40629: LD_INT 51
40631: PUSH
40632: LD_INT 52
40634: PUSH
40635: LD_INT 53
40637: PUSH
40638: LD_INT 54
40640: PUSH
40641: LD_INT 55
40643: PUSH
40644: LD_INT 56
40646: PUSH
40647: LD_INT 57
40649: PUSH
40650: LD_INT 58
40652: PUSH
40653: LD_INT 59
40655: PUSH
40656: LD_INT 63
40658: PUSH
40659: LD_INT 64
40661: PUSH
40662: LD_INT 65
40664: PUSH
40665: LD_INT 82
40667: PUSH
40668: LD_INT 83
40670: PUSH
40671: LD_INT 84
40673: PUSH
40674: LD_INT 85
40676: PUSH
40677: LD_INT 86
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: ST_TO_ADDR
40735: GO 40738
40737: POP
// if state > - 1 and state < 3 then
40738: LD_VAR 0 3
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: GREATER
40747: PUSH
40748: LD_VAR 0 3
40752: PUSH
40753: LD_INT 3
40755: LESS
40756: AND
40757: IFFALSE 40814
// for i in result do
40759: LD_ADDR_VAR 0 5
40763: PUSH
40764: LD_VAR 0 4
40768: PUSH
40769: FOR_IN
40770: IFFALSE 40812
// if GetTech ( i , side ) <> state then
40772: LD_VAR 0 5
40776: PPUSH
40777: LD_VAR 0 1
40781: PPUSH
40782: CALL_OW 321
40786: PUSH
40787: LD_VAR 0 3
40791: NONEQUAL
40792: IFFALSE 40810
// result := result diff i ;
40794: LD_ADDR_VAR 0 4
40798: PUSH
40799: LD_VAR 0 4
40803: PUSH
40804: LD_VAR 0 5
40808: DIFF
40809: ST_TO_ADDR
40810: GO 40769
40812: POP
40813: POP
// end ;
40814: LD_VAR 0 4
40818: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40819: LD_INT 0
40821: PPUSH
40822: PPUSH
40823: PPUSH
// result := true ;
40824: LD_ADDR_VAR 0 3
40828: PUSH
40829: LD_INT 1
40831: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40832: LD_ADDR_VAR 0 5
40836: PUSH
40837: LD_VAR 0 2
40841: PPUSH
40842: CALL_OW 480
40846: ST_TO_ADDR
// if not tmp then
40847: LD_VAR 0 5
40851: NOT
40852: IFFALSE 40856
// exit ;
40854: GO 40905
// for i in tmp do
40856: LD_ADDR_VAR 0 4
40860: PUSH
40861: LD_VAR 0 5
40865: PUSH
40866: FOR_IN
40867: IFFALSE 40903
// if GetTech ( i , side ) <> state_researched then
40869: LD_VAR 0 4
40873: PPUSH
40874: LD_VAR 0 1
40878: PPUSH
40879: CALL_OW 321
40883: PUSH
40884: LD_INT 2
40886: NONEQUAL
40887: IFFALSE 40901
// begin result := false ;
40889: LD_ADDR_VAR 0 3
40893: PUSH
40894: LD_INT 0
40896: ST_TO_ADDR
// exit ;
40897: POP
40898: POP
40899: GO 40905
// end ;
40901: GO 40866
40903: POP
40904: POP
// end ;
40905: LD_VAR 0 3
40909: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40910: LD_INT 0
40912: PPUSH
40913: PPUSH
40914: PPUSH
40915: PPUSH
40916: PPUSH
40917: PPUSH
40918: PPUSH
40919: PPUSH
40920: PPUSH
40921: PPUSH
40922: PPUSH
40923: PPUSH
40924: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40925: LD_VAR 0 1
40929: NOT
40930: PUSH
40931: LD_VAR 0 1
40935: PPUSH
40936: CALL_OW 257
40940: PUSH
40941: LD_INT 9
40943: NONEQUAL
40944: OR
40945: IFFALSE 40949
// exit ;
40947: GO 41522
// side := GetSide ( unit ) ;
40949: LD_ADDR_VAR 0 9
40953: PUSH
40954: LD_VAR 0 1
40958: PPUSH
40959: CALL_OW 255
40963: ST_TO_ADDR
// tech_space := tech_spacanom ;
40964: LD_ADDR_VAR 0 12
40968: PUSH
40969: LD_INT 29
40971: ST_TO_ADDR
// tech_time := tech_taurad ;
40972: LD_ADDR_VAR 0 13
40976: PUSH
40977: LD_INT 28
40979: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40980: LD_ADDR_VAR 0 11
40984: PUSH
40985: LD_VAR 0 1
40989: PPUSH
40990: CALL_OW 310
40994: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40995: LD_VAR 0 11
40999: PPUSH
41000: CALL_OW 247
41004: PUSH
41005: LD_INT 2
41007: EQUAL
41008: IFFALSE 41012
// exit ;
41010: GO 41522
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41012: LD_ADDR_VAR 0 8
41016: PUSH
41017: LD_INT 81
41019: PUSH
41020: LD_VAR 0 9
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 3
41031: PUSH
41032: LD_INT 21
41034: PUSH
41035: LD_INT 3
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PPUSH
41050: CALL_OW 69
41054: ST_TO_ADDR
// if not tmp then
41055: LD_VAR 0 8
41059: NOT
41060: IFFALSE 41064
// exit ;
41062: GO 41522
// if in_unit then
41064: LD_VAR 0 11
41068: IFFALSE 41092
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41070: LD_ADDR_VAR 0 10
41074: PUSH
41075: LD_VAR 0 8
41079: PPUSH
41080: LD_VAR 0 11
41084: PPUSH
41085: CALL_OW 74
41089: ST_TO_ADDR
41090: GO 41112
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41092: LD_ADDR_VAR 0 10
41096: PUSH
41097: LD_VAR 0 8
41101: PPUSH
41102: LD_VAR 0 1
41106: PPUSH
41107: CALL_OW 74
41111: ST_TO_ADDR
// if not enemy then
41112: LD_VAR 0 10
41116: NOT
41117: IFFALSE 41121
// exit ;
41119: GO 41522
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41121: LD_VAR 0 11
41125: PUSH
41126: LD_VAR 0 11
41130: PPUSH
41131: LD_VAR 0 10
41135: PPUSH
41136: CALL_OW 296
41140: PUSH
41141: LD_INT 13
41143: GREATER
41144: AND
41145: PUSH
41146: LD_VAR 0 1
41150: PPUSH
41151: LD_VAR 0 10
41155: PPUSH
41156: CALL_OW 296
41160: PUSH
41161: LD_INT 12
41163: GREATER
41164: OR
41165: IFFALSE 41169
// exit ;
41167: GO 41522
// missile := [ 1 ] ;
41169: LD_ADDR_VAR 0 14
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: EMPTY
41178: LIST
41179: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41180: LD_VAR 0 9
41184: PPUSH
41185: LD_VAR 0 12
41189: PPUSH
41190: CALL_OW 325
41194: IFFALSE 41223
// missile := Replace ( missile , missile + 1 , 2 ) ;
41196: LD_ADDR_VAR 0 14
41200: PUSH
41201: LD_VAR 0 14
41205: PPUSH
41206: LD_VAR 0 14
41210: PUSH
41211: LD_INT 1
41213: PLUS
41214: PPUSH
41215: LD_INT 2
41217: PPUSH
41218: CALL_OW 1
41222: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41223: LD_VAR 0 9
41227: PPUSH
41228: LD_VAR 0 13
41232: PPUSH
41233: CALL_OW 325
41237: PUSH
41238: LD_VAR 0 10
41242: PPUSH
41243: CALL_OW 255
41247: PPUSH
41248: LD_VAR 0 13
41252: PPUSH
41253: CALL_OW 325
41257: NOT
41258: AND
41259: IFFALSE 41288
// missile := Replace ( missile , missile + 1 , 3 ) ;
41261: LD_ADDR_VAR 0 14
41265: PUSH
41266: LD_VAR 0 14
41270: PPUSH
41271: LD_VAR 0 14
41275: PUSH
41276: LD_INT 1
41278: PLUS
41279: PPUSH
41280: LD_INT 3
41282: PPUSH
41283: CALL_OW 1
41287: ST_TO_ADDR
// if missile < 2 then
41288: LD_VAR 0 14
41292: PUSH
41293: LD_INT 2
41295: LESS
41296: IFFALSE 41300
// exit ;
41298: GO 41522
// x := GetX ( enemy ) ;
41300: LD_ADDR_VAR 0 4
41304: PUSH
41305: LD_VAR 0 10
41309: PPUSH
41310: CALL_OW 250
41314: ST_TO_ADDR
// y := GetY ( enemy ) ;
41315: LD_ADDR_VAR 0 5
41319: PUSH
41320: LD_VAR 0 10
41324: PPUSH
41325: CALL_OW 251
41329: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41330: LD_ADDR_VAR 0 6
41334: PUSH
41335: LD_VAR 0 4
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PPUSH
41344: LD_INT 1
41346: PPUSH
41347: CALL_OW 12
41351: PLUS
41352: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41353: LD_ADDR_VAR 0 7
41357: PUSH
41358: LD_VAR 0 5
41362: PUSH
41363: LD_INT 1
41365: NEG
41366: PPUSH
41367: LD_INT 1
41369: PPUSH
41370: CALL_OW 12
41374: PLUS
41375: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41376: LD_VAR 0 6
41380: PPUSH
41381: LD_VAR 0 7
41385: PPUSH
41386: CALL_OW 488
41390: NOT
41391: IFFALSE 41413
// begin _x := x ;
41393: LD_ADDR_VAR 0 6
41397: PUSH
41398: LD_VAR 0 4
41402: ST_TO_ADDR
// _y := y ;
41403: LD_ADDR_VAR 0 7
41407: PUSH
41408: LD_VAR 0 5
41412: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41413: LD_ADDR_VAR 0 3
41417: PUSH
41418: LD_INT 1
41420: PPUSH
41421: LD_VAR 0 14
41425: PPUSH
41426: CALL_OW 12
41430: ST_TO_ADDR
// case i of 1 :
41431: LD_VAR 0 3
41435: PUSH
41436: LD_INT 1
41438: DOUBLE
41439: EQUAL
41440: IFTRUE 41444
41442: GO 41461
41444: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41445: LD_VAR 0 1
41449: PPUSH
41450: LD_VAR 0 10
41454: PPUSH
41455: CALL_OW 115
41459: GO 41522
41461: LD_INT 2
41463: DOUBLE
41464: EQUAL
41465: IFTRUE 41469
41467: GO 41491
41469: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41470: LD_VAR 0 1
41474: PPUSH
41475: LD_VAR 0 6
41479: PPUSH
41480: LD_VAR 0 7
41484: PPUSH
41485: CALL_OW 153
41489: GO 41522
41491: LD_INT 3
41493: DOUBLE
41494: EQUAL
41495: IFTRUE 41499
41497: GO 41521
41499: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41500: LD_VAR 0 1
41504: PPUSH
41505: LD_VAR 0 6
41509: PPUSH
41510: LD_VAR 0 7
41514: PPUSH
41515: CALL_OW 154
41519: GO 41522
41521: POP
// end ;
41522: LD_VAR 0 2
41526: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41527: LD_INT 0
41529: PPUSH
41530: PPUSH
41531: PPUSH
41532: PPUSH
41533: PPUSH
41534: PPUSH
// if not unit or not building then
41535: LD_VAR 0 1
41539: NOT
41540: PUSH
41541: LD_VAR 0 2
41545: NOT
41546: OR
41547: IFFALSE 41551
// exit ;
41549: GO 41709
// x := GetX ( building ) ;
41551: LD_ADDR_VAR 0 5
41555: PUSH
41556: LD_VAR 0 2
41560: PPUSH
41561: CALL_OW 250
41565: ST_TO_ADDR
// y := GetY ( building ) ;
41566: LD_ADDR_VAR 0 6
41570: PUSH
41571: LD_VAR 0 2
41575: PPUSH
41576: CALL_OW 251
41580: ST_TO_ADDR
// for i = 0 to 5 do
41581: LD_ADDR_VAR 0 4
41585: PUSH
41586: DOUBLE
41587: LD_INT 0
41589: DEC
41590: ST_TO_ADDR
41591: LD_INT 5
41593: PUSH
41594: FOR_TO
41595: IFFALSE 41707
// begin _x := ShiftX ( x , i , 3 ) ;
41597: LD_ADDR_VAR 0 7
41601: PUSH
41602: LD_VAR 0 5
41606: PPUSH
41607: LD_VAR 0 4
41611: PPUSH
41612: LD_INT 3
41614: PPUSH
41615: CALL_OW 272
41619: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41620: LD_ADDR_VAR 0 8
41624: PUSH
41625: LD_VAR 0 6
41629: PPUSH
41630: LD_VAR 0 4
41634: PPUSH
41635: LD_INT 3
41637: PPUSH
41638: CALL_OW 273
41642: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41643: LD_VAR 0 7
41647: PPUSH
41648: LD_VAR 0 8
41652: PPUSH
41653: CALL_OW 488
41657: NOT
41658: IFFALSE 41662
// continue ;
41660: GO 41594
// if HexInfo ( _x , _y ) = 0 then
41662: LD_VAR 0 7
41666: PPUSH
41667: LD_VAR 0 8
41671: PPUSH
41672: CALL_OW 428
41676: PUSH
41677: LD_INT 0
41679: EQUAL
41680: IFFALSE 41705
// begin ComMoveXY ( unit , _x , _y ) ;
41682: LD_VAR 0 1
41686: PPUSH
41687: LD_VAR 0 7
41691: PPUSH
41692: LD_VAR 0 8
41696: PPUSH
41697: CALL_OW 111
// exit ;
41701: POP
41702: POP
41703: GO 41709
// end ; end ;
41705: GO 41594
41707: POP
41708: POP
// end ;
41709: LD_VAR 0 3
41713: RET
// export function ScanBase ( side , base_area ) ; begin
41714: LD_INT 0
41716: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41717: LD_ADDR_VAR 0 3
41721: PUSH
41722: LD_VAR 0 2
41726: PPUSH
41727: LD_INT 81
41729: PUSH
41730: LD_VAR 0 1
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PPUSH
41739: CALL_OW 70
41743: ST_TO_ADDR
// end ;
41744: LD_VAR 0 3
41748: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41749: LD_INT 0
41751: PPUSH
41752: PPUSH
41753: PPUSH
41754: PPUSH
// result := false ;
41755: LD_ADDR_VAR 0 2
41759: PUSH
41760: LD_INT 0
41762: ST_TO_ADDR
// side := GetSide ( unit ) ;
41763: LD_ADDR_VAR 0 3
41767: PUSH
41768: LD_VAR 0 1
41772: PPUSH
41773: CALL_OW 255
41777: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41778: LD_ADDR_VAR 0 4
41782: PUSH
41783: LD_VAR 0 1
41787: PPUSH
41788: CALL_OW 248
41792: ST_TO_ADDR
// case nat of 1 :
41793: LD_VAR 0 4
41797: PUSH
41798: LD_INT 1
41800: DOUBLE
41801: EQUAL
41802: IFTRUE 41806
41804: GO 41817
41806: POP
// tech := tech_lassight ; 2 :
41807: LD_ADDR_VAR 0 5
41811: PUSH
41812: LD_INT 12
41814: ST_TO_ADDR
41815: GO 41856
41817: LD_INT 2
41819: DOUBLE
41820: EQUAL
41821: IFTRUE 41825
41823: GO 41836
41825: POP
// tech := tech_mortar ; 3 :
41826: LD_ADDR_VAR 0 5
41830: PUSH
41831: LD_INT 41
41833: ST_TO_ADDR
41834: GO 41856
41836: LD_INT 3
41838: DOUBLE
41839: EQUAL
41840: IFTRUE 41844
41842: GO 41855
41844: POP
// tech := tech_bazooka ; end ;
41845: LD_ADDR_VAR 0 5
41849: PUSH
41850: LD_INT 44
41852: ST_TO_ADDR
41853: GO 41856
41855: POP
// if Researched ( side , tech ) then
41856: LD_VAR 0 3
41860: PPUSH
41861: LD_VAR 0 5
41865: PPUSH
41866: CALL_OW 325
41870: IFFALSE 41897
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41872: LD_ADDR_VAR 0 2
41876: PUSH
41877: LD_INT 5
41879: PUSH
41880: LD_INT 8
41882: PUSH
41883: LD_INT 9
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: LIST
41890: PUSH
41891: LD_VAR 0 4
41895: ARRAY
41896: ST_TO_ADDR
// end ;
41897: LD_VAR 0 2
41901: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41902: LD_INT 0
41904: PPUSH
41905: PPUSH
41906: PPUSH
// if not mines then
41907: LD_VAR 0 2
41911: NOT
41912: IFFALSE 41916
// exit ;
41914: GO 42060
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41916: LD_ADDR_VAR 0 5
41920: PUSH
41921: LD_INT 81
41923: PUSH
41924: LD_VAR 0 1
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 3
41935: PUSH
41936: LD_INT 21
41938: PUSH
41939: LD_INT 3
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PPUSH
41954: CALL_OW 69
41958: ST_TO_ADDR
// for i in mines do
41959: LD_ADDR_VAR 0 4
41963: PUSH
41964: LD_VAR 0 2
41968: PUSH
41969: FOR_IN
41970: IFFALSE 42058
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41972: LD_VAR 0 4
41976: PUSH
41977: LD_INT 1
41979: ARRAY
41980: PPUSH
41981: LD_VAR 0 4
41985: PUSH
41986: LD_INT 2
41988: ARRAY
41989: PPUSH
41990: CALL_OW 458
41994: NOT
41995: IFFALSE 41999
// continue ;
41997: GO 41969
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41999: LD_VAR 0 4
42003: PUSH
42004: LD_INT 1
42006: ARRAY
42007: PPUSH
42008: LD_VAR 0 4
42012: PUSH
42013: LD_INT 2
42015: ARRAY
42016: PPUSH
42017: CALL_OW 428
42021: PUSH
42022: LD_VAR 0 5
42026: IN
42027: IFFALSE 42056
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42029: LD_VAR 0 4
42033: PUSH
42034: LD_INT 1
42036: ARRAY
42037: PPUSH
42038: LD_VAR 0 4
42042: PUSH
42043: LD_INT 2
42045: ARRAY
42046: PPUSH
42047: LD_VAR 0 1
42051: PPUSH
42052: CALL_OW 456
// end ;
42056: GO 41969
42058: POP
42059: POP
// end ;
42060: LD_VAR 0 3
42064: RET
// export function Count ( array ) ; begin
42065: LD_INT 0
42067: PPUSH
// result := array + 0 ;
42068: LD_ADDR_VAR 0 2
42072: PUSH
42073: LD_VAR 0 1
42077: PUSH
42078: LD_INT 0
42080: PLUS
42081: ST_TO_ADDR
// end ;
42082: LD_VAR 0 2
42086: RET
// export function IsEmpty ( building ) ; begin
42087: LD_INT 0
42089: PPUSH
// if not building then
42090: LD_VAR 0 1
42094: NOT
42095: IFFALSE 42099
// exit ;
42097: GO 42142
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42099: LD_ADDR_VAR 0 2
42103: PUSH
42104: LD_VAR 0 1
42108: PUSH
42109: LD_INT 22
42111: PUSH
42112: LD_VAR 0 1
42116: PPUSH
42117: CALL_OW 255
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 58
42128: PUSH
42129: EMPTY
42130: LIST
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PPUSH
42136: CALL_OW 69
42140: IN
42141: ST_TO_ADDR
// end ;
42142: LD_VAR 0 2
42146: RET
// export function IsNotFull ( building ) ; var places ; begin
42147: LD_INT 0
42149: PPUSH
42150: PPUSH
// if not building then
42151: LD_VAR 0 1
42155: NOT
42156: IFFALSE 42160
// exit ;
42158: GO 42188
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42160: LD_ADDR_VAR 0 2
42164: PUSH
42165: LD_VAR 0 1
42169: PPUSH
42170: LD_INT 3
42172: PUSH
42173: LD_INT 62
42175: PUSH
42176: EMPTY
42177: LIST
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PPUSH
42183: CALL_OW 72
42187: ST_TO_ADDR
// end ;
42188: LD_VAR 0 2
42192: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42193: LD_INT 0
42195: PPUSH
42196: PPUSH
42197: PPUSH
42198: PPUSH
// tmp := [ ] ;
42199: LD_ADDR_VAR 0 3
42203: PUSH
42204: EMPTY
42205: ST_TO_ADDR
// list := [ ] ;
42206: LD_ADDR_VAR 0 5
42210: PUSH
42211: EMPTY
42212: ST_TO_ADDR
// for i = 16 to 25 do
42213: LD_ADDR_VAR 0 4
42217: PUSH
42218: DOUBLE
42219: LD_INT 16
42221: DEC
42222: ST_TO_ADDR
42223: LD_INT 25
42225: PUSH
42226: FOR_TO
42227: IFFALSE 42300
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42229: LD_ADDR_VAR 0 3
42233: PUSH
42234: LD_VAR 0 3
42238: PUSH
42239: LD_INT 22
42241: PUSH
42242: LD_VAR 0 1
42246: PPUSH
42247: CALL_OW 255
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 91
42258: PUSH
42259: LD_VAR 0 1
42263: PUSH
42264: LD_INT 6
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 30
42274: PUSH
42275: LD_VAR 0 4
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: LIST
42288: PUSH
42289: EMPTY
42290: LIST
42291: PPUSH
42292: CALL_OW 69
42296: ADD
42297: ST_TO_ADDR
42298: GO 42226
42300: POP
42301: POP
// for i = 1 to tmp do
42302: LD_ADDR_VAR 0 4
42306: PUSH
42307: DOUBLE
42308: LD_INT 1
42310: DEC
42311: ST_TO_ADDR
42312: LD_VAR 0 3
42316: PUSH
42317: FOR_TO
42318: IFFALSE 42406
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42320: LD_ADDR_VAR 0 5
42324: PUSH
42325: LD_VAR 0 5
42329: PUSH
42330: LD_VAR 0 3
42334: PUSH
42335: LD_VAR 0 4
42339: ARRAY
42340: PPUSH
42341: CALL_OW 266
42345: PUSH
42346: LD_VAR 0 3
42350: PUSH
42351: LD_VAR 0 4
42355: ARRAY
42356: PPUSH
42357: CALL_OW 250
42361: PUSH
42362: LD_VAR 0 3
42366: PUSH
42367: LD_VAR 0 4
42371: ARRAY
42372: PPUSH
42373: CALL_OW 251
42377: PUSH
42378: LD_VAR 0 3
42382: PUSH
42383: LD_VAR 0 4
42387: ARRAY
42388: PPUSH
42389: CALL_OW 254
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: PUSH
42400: EMPTY
42401: LIST
42402: ADD
42403: ST_TO_ADDR
42404: GO 42317
42406: POP
42407: POP
// result := list ;
42408: LD_ADDR_VAR 0 2
42412: PUSH
42413: LD_VAR 0 5
42417: ST_TO_ADDR
// end ;
42418: LD_VAR 0 2
42422: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42423: LD_INT 0
42425: PPUSH
42426: PPUSH
42427: PPUSH
42428: PPUSH
42429: PPUSH
42430: PPUSH
42431: PPUSH
// if not factory then
42432: LD_VAR 0 1
42436: NOT
42437: IFFALSE 42441
// exit ;
42439: GO 43034
// if control = control_apeman then
42441: LD_VAR 0 4
42445: PUSH
42446: LD_INT 5
42448: EQUAL
42449: IFFALSE 42558
// begin tmp := UnitsInside ( factory ) ;
42451: LD_ADDR_VAR 0 8
42455: PUSH
42456: LD_VAR 0 1
42460: PPUSH
42461: CALL_OW 313
42465: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42466: LD_VAR 0 8
42470: PPUSH
42471: LD_INT 25
42473: PUSH
42474: LD_INT 12
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PPUSH
42481: CALL_OW 72
42485: NOT
42486: IFFALSE 42496
// control := control_manual ;
42488: LD_ADDR_VAR 0 4
42492: PUSH
42493: LD_INT 1
42495: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42496: LD_ADDR_VAR 0 8
42500: PUSH
42501: LD_VAR 0 1
42505: PPUSH
42506: CALL 42193 0 1
42510: ST_TO_ADDR
// if tmp then
42511: LD_VAR 0 8
42515: IFFALSE 42558
// begin for i in tmp do
42517: LD_ADDR_VAR 0 7
42521: PUSH
42522: LD_VAR 0 8
42526: PUSH
42527: FOR_IN
42528: IFFALSE 42556
// if i [ 1 ] = b_ext_radio then
42530: LD_VAR 0 7
42534: PUSH
42535: LD_INT 1
42537: ARRAY
42538: PUSH
42539: LD_INT 22
42541: EQUAL
42542: IFFALSE 42554
// begin control := control_remote ;
42544: LD_ADDR_VAR 0 4
42548: PUSH
42549: LD_INT 2
42551: ST_TO_ADDR
// break ;
42552: GO 42556
// end ;
42554: GO 42527
42556: POP
42557: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42558: LD_VAR 0 1
42562: PPUSH
42563: LD_VAR 0 2
42567: PPUSH
42568: LD_VAR 0 3
42572: PPUSH
42573: LD_VAR 0 4
42577: PPUSH
42578: LD_VAR 0 5
42582: PPUSH
42583: CALL_OW 448
42587: IFFALSE 42622
// begin result := [ chassis , engine , control , weapon ] ;
42589: LD_ADDR_VAR 0 6
42593: PUSH
42594: LD_VAR 0 2
42598: PUSH
42599: LD_VAR 0 3
42603: PUSH
42604: LD_VAR 0 4
42608: PUSH
42609: LD_VAR 0 5
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: ST_TO_ADDR
// exit ;
42620: GO 43034
// end ; _chassis := AvailableChassisList ( factory ) ;
42622: LD_ADDR_VAR 0 9
42626: PUSH
42627: LD_VAR 0 1
42631: PPUSH
42632: CALL_OW 475
42636: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42637: LD_ADDR_VAR 0 11
42641: PUSH
42642: LD_VAR 0 1
42646: PPUSH
42647: CALL_OW 476
42651: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42652: LD_ADDR_VAR 0 12
42656: PUSH
42657: LD_VAR 0 1
42661: PPUSH
42662: CALL_OW 477
42666: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42667: LD_ADDR_VAR 0 10
42671: PUSH
42672: LD_VAR 0 1
42676: PPUSH
42677: CALL_OW 478
42681: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42682: LD_VAR 0 9
42686: NOT
42687: PUSH
42688: LD_VAR 0 11
42692: NOT
42693: OR
42694: PUSH
42695: LD_VAR 0 12
42699: NOT
42700: OR
42701: PUSH
42702: LD_VAR 0 10
42706: NOT
42707: OR
42708: IFFALSE 42743
// begin result := [ chassis , engine , control , weapon ] ;
42710: LD_ADDR_VAR 0 6
42714: PUSH
42715: LD_VAR 0 2
42719: PUSH
42720: LD_VAR 0 3
42724: PUSH
42725: LD_VAR 0 4
42729: PUSH
42730: LD_VAR 0 5
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: ST_TO_ADDR
// exit ;
42741: GO 43034
// end ; if not chassis in _chassis then
42743: LD_VAR 0 2
42747: PUSH
42748: LD_VAR 0 9
42752: IN
42753: NOT
42754: IFFALSE 42780
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42756: LD_ADDR_VAR 0 2
42760: PUSH
42761: LD_VAR 0 9
42765: PUSH
42766: LD_INT 1
42768: PPUSH
42769: LD_VAR 0 9
42773: PPUSH
42774: CALL_OW 12
42778: ARRAY
42779: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42780: LD_VAR 0 2
42784: PPUSH
42785: LD_VAR 0 3
42789: PPUSH
42790: CALL 43039 0 2
42794: NOT
42795: IFFALSE 42854
// repeat engine := _engine [ 1 ] ;
42797: LD_ADDR_VAR 0 3
42801: PUSH
42802: LD_VAR 0 11
42806: PUSH
42807: LD_INT 1
42809: ARRAY
42810: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42811: LD_ADDR_VAR 0 11
42815: PUSH
42816: LD_VAR 0 11
42820: PPUSH
42821: LD_INT 1
42823: PPUSH
42824: CALL_OW 3
42828: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42829: LD_VAR 0 2
42833: PPUSH
42834: LD_VAR 0 3
42838: PPUSH
42839: CALL 43039 0 2
42843: PUSH
42844: LD_VAR 0 11
42848: PUSH
42849: EMPTY
42850: EQUAL
42851: OR
42852: IFFALSE 42797
// if not control in _control then
42854: LD_VAR 0 4
42858: PUSH
42859: LD_VAR 0 12
42863: IN
42864: NOT
42865: IFFALSE 42891
// control := _control [ rand ( 1 , _control ) ] ;
42867: LD_ADDR_VAR 0 4
42871: PUSH
42872: LD_VAR 0 12
42876: PUSH
42877: LD_INT 1
42879: PPUSH
42880: LD_VAR 0 12
42884: PPUSH
42885: CALL_OW 12
42889: ARRAY
42890: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42891: LD_VAR 0 2
42895: PPUSH
42896: LD_VAR 0 5
42900: PPUSH
42901: CALL 43259 0 2
42905: NOT
42906: IFFALSE 42965
// repeat weapon := _weapon [ 1 ] ;
42908: LD_ADDR_VAR 0 5
42912: PUSH
42913: LD_VAR 0 10
42917: PUSH
42918: LD_INT 1
42920: ARRAY
42921: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42922: LD_ADDR_VAR 0 10
42926: PUSH
42927: LD_VAR 0 10
42931: PPUSH
42932: LD_INT 1
42934: PPUSH
42935: CALL_OW 3
42939: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42940: LD_VAR 0 2
42944: PPUSH
42945: LD_VAR 0 5
42949: PPUSH
42950: CALL 43259 0 2
42954: PUSH
42955: LD_VAR 0 10
42959: PUSH
42960: EMPTY
42961: EQUAL
42962: OR
42963: IFFALSE 42908
// result := [ ] ;
42965: LD_ADDR_VAR 0 6
42969: PUSH
42970: EMPTY
42971: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42972: LD_VAR 0 1
42976: PPUSH
42977: LD_VAR 0 2
42981: PPUSH
42982: LD_VAR 0 3
42986: PPUSH
42987: LD_VAR 0 4
42991: PPUSH
42992: LD_VAR 0 5
42996: PPUSH
42997: CALL_OW 448
43001: IFFALSE 43034
// result := [ chassis , engine , control , weapon ] ;
43003: LD_ADDR_VAR 0 6
43007: PUSH
43008: LD_VAR 0 2
43012: PUSH
43013: LD_VAR 0 3
43017: PUSH
43018: LD_VAR 0 4
43022: PUSH
43023: LD_VAR 0 5
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: ST_TO_ADDR
// end ;
43034: LD_VAR 0 6
43038: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43039: LD_INT 0
43041: PPUSH
// if not chassis or not engine then
43042: LD_VAR 0 1
43046: NOT
43047: PUSH
43048: LD_VAR 0 2
43052: NOT
43053: OR
43054: IFFALSE 43058
// exit ;
43056: GO 43254
// case engine of engine_solar :
43058: LD_VAR 0 2
43062: PUSH
43063: LD_INT 2
43065: DOUBLE
43066: EQUAL
43067: IFTRUE 43071
43069: GO 43109
43071: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43072: LD_ADDR_VAR 0 3
43076: PUSH
43077: LD_INT 11
43079: PUSH
43080: LD_INT 12
43082: PUSH
43083: LD_INT 13
43085: PUSH
43086: LD_INT 14
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: LD_INT 3
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: ST_TO_ADDR
43107: GO 43238
43109: LD_INT 1
43111: DOUBLE
43112: EQUAL
43113: IFTRUE 43117
43115: GO 43179
43117: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43118: LD_ADDR_VAR 0 3
43122: PUSH
43123: LD_INT 11
43125: PUSH
43126: LD_INT 12
43128: PUSH
43129: LD_INT 13
43131: PUSH
43132: LD_INT 14
43134: PUSH
43135: LD_INT 1
43137: PUSH
43138: LD_INT 2
43140: PUSH
43141: LD_INT 3
43143: PUSH
43144: LD_INT 4
43146: PUSH
43147: LD_INT 5
43149: PUSH
43150: LD_INT 21
43152: PUSH
43153: LD_INT 23
43155: PUSH
43156: LD_INT 22
43158: PUSH
43159: LD_INT 24
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: ST_TO_ADDR
43177: GO 43238
43179: LD_INT 3
43181: DOUBLE
43182: EQUAL
43183: IFTRUE 43187
43185: GO 43237
43187: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43188: LD_ADDR_VAR 0 3
43192: PUSH
43193: LD_INT 13
43195: PUSH
43196: LD_INT 14
43198: PUSH
43199: LD_INT 2
43201: PUSH
43202: LD_INT 3
43204: PUSH
43205: LD_INT 4
43207: PUSH
43208: LD_INT 5
43210: PUSH
43211: LD_INT 21
43213: PUSH
43214: LD_INT 22
43216: PUSH
43217: LD_INT 23
43219: PUSH
43220: LD_INT 24
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: ST_TO_ADDR
43235: GO 43238
43237: POP
// result := ( chassis in result ) ;
43238: LD_ADDR_VAR 0 3
43242: PUSH
43243: LD_VAR 0 1
43247: PUSH
43248: LD_VAR 0 3
43252: IN
43253: ST_TO_ADDR
// end ;
43254: LD_VAR 0 3
43258: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43259: LD_INT 0
43261: PPUSH
// if not chassis or not weapon then
43262: LD_VAR 0 1
43266: NOT
43267: PUSH
43268: LD_VAR 0 2
43272: NOT
43273: OR
43274: IFFALSE 43278
// exit ;
43276: GO 44338
// case weapon of us_machine_gun :
43278: LD_VAR 0 2
43282: PUSH
43283: LD_INT 2
43285: DOUBLE
43286: EQUAL
43287: IFTRUE 43291
43289: GO 43321
43291: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43292: LD_ADDR_VAR 0 3
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: LD_INT 3
43305: PUSH
43306: LD_INT 4
43308: PUSH
43309: LD_INT 5
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: ST_TO_ADDR
43319: GO 44322
43321: LD_INT 3
43323: DOUBLE
43324: EQUAL
43325: IFTRUE 43329
43327: GO 43359
43329: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43330: LD_ADDR_VAR 0 3
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: LD_INT 3
43343: PUSH
43344: LD_INT 4
43346: PUSH
43347: LD_INT 5
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: ST_TO_ADDR
43357: GO 44322
43359: LD_INT 11
43361: DOUBLE
43362: EQUAL
43363: IFTRUE 43367
43365: GO 43397
43367: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43368: LD_ADDR_VAR 0 3
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: LD_INT 2
43378: PUSH
43379: LD_INT 3
43381: PUSH
43382: LD_INT 4
43384: PUSH
43385: LD_INT 5
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: ST_TO_ADDR
43395: GO 44322
43397: LD_INT 4
43399: DOUBLE
43400: EQUAL
43401: IFTRUE 43405
43403: GO 43431
43405: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43406: LD_ADDR_VAR 0 3
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: LD_INT 3
43416: PUSH
43417: LD_INT 4
43419: PUSH
43420: LD_INT 5
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: ST_TO_ADDR
43429: GO 44322
43431: LD_INT 5
43433: DOUBLE
43434: EQUAL
43435: IFTRUE 43439
43437: GO 43465
43439: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43440: LD_ADDR_VAR 0 3
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: LD_INT 3
43450: PUSH
43451: LD_INT 4
43453: PUSH
43454: LD_INT 5
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: ST_TO_ADDR
43463: GO 44322
43465: LD_INT 9
43467: DOUBLE
43468: EQUAL
43469: IFTRUE 43473
43471: GO 43499
43473: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43474: LD_ADDR_VAR 0 3
43478: PUSH
43479: LD_INT 2
43481: PUSH
43482: LD_INT 3
43484: PUSH
43485: LD_INT 4
43487: PUSH
43488: LD_INT 5
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: ST_TO_ADDR
43497: GO 44322
43499: LD_INT 7
43501: DOUBLE
43502: EQUAL
43503: IFTRUE 43507
43505: GO 43533
43507: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43508: LD_ADDR_VAR 0 3
43512: PUSH
43513: LD_INT 2
43515: PUSH
43516: LD_INT 3
43518: PUSH
43519: LD_INT 4
43521: PUSH
43522: LD_INT 5
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: ST_TO_ADDR
43531: GO 44322
43533: LD_INT 12
43535: DOUBLE
43536: EQUAL
43537: IFTRUE 43541
43539: GO 43567
43541: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43542: LD_ADDR_VAR 0 3
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: LD_INT 3
43552: PUSH
43553: LD_INT 4
43555: PUSH
43556: LD_INT 5
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: ST_TO_ADDR
43565: GO 44322
43567: LD_INT 13
43569: DOUBLE
43570: EQUAL
43571: IFTRUE 43575
43573: GO 43601
43575: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43576: LD_ADDR_VAR 0 3
43580: PUSH
43581: LD_INT 2
43583: PUSH
43584: LD_INT 3
43586: PUSH
43587: LD_INT 4
43589: PUSH
43590: LD_INT 5
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: ST_TO_ADDR
43599: GO 44322
43601: LD_INT 14
43603: DOUBLE
43604: EQUAL
43605: IFTRUE 43609
43607: GO 43627
43609: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43610: LD_ADDR_VAR 0 3
43614: PUSH
43615: LD_INT 4
43617: PUSH
43618: LD_INT 5
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: ST_TO_ADDR
43625: GO 44322
43627: LD_INT 6
43629: DOUBLE
43630: EQUAL
43631: IFTRUE 43635
43633: GO 43653
43635: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43636: LD_ADDR_VAR 0 3
43640: PUSH
43641: LD_INT 4
43643: PUSH
43644: LD_INT 5
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: ST_TO_ADDR
43651: GO 44322
43653: LD_INT 10
43655: DOUBLE
43656: EQUAL
43657: IFTRUE 43661
43659: GO 43679
43661: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43662: LD_ADDR_VAR 0 3
43666: PUSH
43667: LD_INT 4
43669: PUSH
43670: LD_INT 5
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: ST_TO_ADDR
43677: GO 44322
43679: LD_INT 22
43681: DOUBLE
43682: EQUAL
43683: IFTRUE 43687
43685: GO 43713
43687: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43688: LD_ADDR_VAR 0 3
43692: PUSH
43693: LD_INT 11
43695: PUSH
43696: LD_INT 12
43698: PUSH
43699: LD_INT 13
43701: PUSH
43702: LD_INT 14
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: ST_TO_ADDR
43711: GO 44322
43713: LD_INT 23
43715: DOUBLE
43716: EQUAL
43717: IFTRUE 43721
43719: GO 43747
43721: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43722: LD_ADDR_VAR 0 3
43726: PUSH
43727: LD_INT 11
43729: PUSH
43730: LD_INT 12
43732: PUSH
43733: LD_INT 13
43735: PUSH
43736: LD_INT 14
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: ST_TO_ADDR
43745: GO 44322
43747: LD_INT 24
43749: DOUBLE
43750: EQUAL
43751: IFTRUE 43755
43753: GO 43781
43755: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43756: LD_ADDR_VAR 0 3
43760: PUSH
43761: LD_INT 11
43763: PUSH
43764: LD_INT 12
43766: PUSH
43767: LD_INT 13
43769: PUSH
43770: LD_INT 14
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: ST_TO_ADDR
43779: GO 44322
43781: LD_INT 30
43783: DOUBLE
43784: EQUAL
43785: IFTRUE 43789
43787: GO 43815
43789: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43790: LD_ADDR_VAR 0 3
43794: PUSH
43795: LD_INT 11
43797: PUSH
43798: LD_INT 12
43800: PUSH
43801: LD_INT 13
43803: PUSH
43804: LD_INT 14
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: ST_TO_ADDR
43813: GO 44322
43815: LD_INT 25
43817: DOUBLE
43818: EQUAL
43819: IFTRUE 43823
43821: GO 43841
43823: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43824: LD_ADDR_VAR 0 3
43828: PUSH
43829: LD_INT 13
43831: PUSH
43832: LD_INT 14
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: ST_TO_ADDR
43839: GO 44322
43841: LD_INT 27
43843: DOUBLE
43844: EQUAL
43845: IFTRUE 43849
43847: GO 43867
43849: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43850: LD_ADDR_VAR 0 3
43854: PUSH
43855: LD_INT 13
43857: PUSH
43858: LD_INT 14
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: ST_TO_ADDR
43865: GO 44322
43867: LD_INT 92
43869: DOUBLE
43870: EQUAL
43871: IFTRUE 43875
43873: GO 43901
43875: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43876: LD_ADDR_VAR 0 3
43880: PUSH
43881: LD_INT 11
43883: PUSH
43884: LD_INT 12
43886: PUSH
43887: LD_INT 13
43889: PUSH
43890: LD_INT 14
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: ST_TO_ADDR
43899: GO 44322
43901: LD_INT 28
43903: DOUBLE
43904: EQUAL
43905: IFTRUE 43909
43907: GO 43927
43909: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43910: LD_ADDR_VAR 0 3
43914: PUSH
43915: LD_INT 13
43917: PUSH
43918: LD_INT 14
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: ST_TO_ADDR
43925: GO 44322
43927: LD_INT 29
43929: DOUBLE
43930: EQUAL
43931: IFTRUE 43935
43933: GO 43953
43935: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43936: LD_ADDR_VAR 0 3
43940: PUSH
43941: LD_INT 13
43943: PUSH
43944: LD_INT 14
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: ST_TO_ADDR
43951: GO 44322
43953: LD_INT 31
43955: DOUBLE
43956: EQUAL
43957: IFTRUE 43961
43959: GO 43979
43961: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43962: LD_ADDR_VAR 0 3
43966: PUSH
43967: LD_INT 13
43969: PUSH
43970: LD_INT 14
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: ST_TO_ADDR
43977: GO 44322
43979: LD_INT 26
43981: DOUBLE
43982: EQUAL
43983: IFTRUE 43987
43985: GO 44005
43987: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43988: LD_ADDR_VAR 0 3
43992: PUSH
43993: LD_INT 13
43995: PUSH
43996: LD_INT 14
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: ST_TO_ADDR
44003: GO 44322
44005: LD_INT 42
44007: DOUBLE
44008: EQUAL
44009: IFTRUE 44013
44011: GO 44039
44013: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44014: LD_ADDR_VAR 0 3
44018: PUSH
44019: LD_INT 21
44021: PUSH
44022: LD_INT 22
44024: PUSH
44025: LD_INT 23
44027: PUSH
44028: LD_INT 24
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: ST_TO_ADDR
44037: GO 44322
44039: LD_INT 43
44041: DOUBLE
44042: EQUAL
44043: IFTRUE 44047
44045: GO 44073
44047: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44048: LD_ADDR_VAR 0 3
44052: PUSH
44053: LD_INT 21
44055: PUSH
44056: LD_INT 22
44058: PUSH
44059: LD_INT 23
44061: PUSH
44062: LD_INT 24
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: ST_TO_ADDR
44071: GO 44322
44073: LD_INT 44
44075: DOUBLE
44076: EQUAL
44077: IFTRUE 44081
44079: GO 44107
44081: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44082: LD_ADDR_VAR 0 3
44086: PUSH
44087: LD_INT 21
44089: PUSH
44090: LD_INT 22
44092: PUSH
44093: LD_INT 23
44095: PUSH
44096: LD_INT 24
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: ST_TO_ADDR
44105: GO 44322
44107: LD_INT 45
44109: DOUBLE
44110: EQUAL
44111: IFTRUE 44115
44113: GO 44141
44115: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44116: LD_ADDR_VAR 0 3
44120: PUSH
44121: LD_INT 21
44123: PUSH
44124: LD_INT 22
44126: PUSH
44127: LD_INT 23
44129: PUSH
44130: LD_INT 24
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: ST_TO_ADDR
44139: GO 44322
44141: LD_INT 49
44143: DOUBLE
44144: EQUAL
44145: IFTRUE 44149
44147: GO 44175
44149: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44150: LD_ADDR_VAR 0 3
44154: PUSH
44155: LD_INT 21
44157: PUSH
44158: LD_INT 22
44160: PUSH
44161: LD_INT 23
44163: PUSH
44164: LD_INT 24
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: ST_TO_ADDR
44173: GO 44322
44175: LD_INT 51
44177: DOUBLE
44178: EQUAL
44179: IFTRUE 44183
44181: GO 44209
44183: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44184: LD_ADDR_VAR 0 3
44188: PUSH
44189: LD_INT 21
44191: PUSH
44192: LD_INT 22
44194: PUSH
44195: LD_INT 23
44197: PUSH
44198: LD_INT 24
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: ST_TO_ADDR
44207: GO 44322
44209: LD_INT 52
44211: DOUBLE
44212: EQUAL
44213: IFTRUE 44217
44215: GO 44243
44217: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44218: LD_ADDR_VAR 0 3
44222: PUSH
44223: LD_INT 21
44225: PUSH
44226: LD_INT 22
44228: PUSH
44229: LD_INT 23
44231: PUSH
44232: LD_INT 24
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: ST_TO_ADDR
44241: GO 44322
44243: LD_INT 53
44245: DOUBLE
44246: EQUAL
44247: IFTRUE 44251
44249: GO 44269
44251: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44252: LD_ADDR_VAR 0 3
44256: PUSH
44257: LD_INT 23
44259: PUSH
44260: LD_INT 24
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: ST_TO_ADDR
44267: GO 44322
44269: LD_INT 46
44271: DOUBLE
44272: EQUAL
44273: IFTRUE 44277
44275: GO 44295
44277: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44278: LD_ADDR_VAR 0 3
44282: PUSH
44283: LD_INT 23
44285: PUSH
44286: LD_INT 24
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: ST_TO_ADDR
44293: GO 44322
44295: LD_INT 47
44297: DOUBLE
44298: EQUAL
44299: IFTRUE 44303
44301: GO 44321
44303: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44304: LD_ADDR_VAR 0 3
44308: PUSH
44309: LD_INT 23
44311: PUSH
44312: LD_INT 24
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: ST_TO_ADDR
44319: GO 44322
44321: POP
// result := ( chassis in result ) ;
44322: LD_ADDR_VAR 0 3
44326: PUSH
44327: LD_VAR 0 1
44331: PUSH
44332: LD_VAR 0 3
44336: IN
44337: ST_TO_ADDR
// end ;
44338: LD_VAR 0 3
44342: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44343: LD_INT 0
44345: PPUSH
44346: PPUSH
44347: PPUSH
44348: PPUSH
44349: PPUSH
44350: PPUSH
44351: PPUSH
// result := array ;
44352: LD_ADDR_VAR 0 5
44356: PUSH
44357: LD_VAR 0 1
44361: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44362: LD_VAR 0 1
44366: NOT
44367: PUSH
44368: LD_VAR 0 2
44372: NOT
44373: OR
44374: PUSH
44375: LD_VAR 0 3
44379: NOT
44380: OR
44381: PUSH
44382: LD_VAR 0 2
44386: PUSH
44387: LD_VAR 0 1
44391: GREATER
44392: OR
44393: PUSH
44394: LD_VAR 0 3
44398: PUSH
44399: LD_VAR 0 1
44403: GREATER
44404: OR
44405: IFFALSE 44409
// exit ;
44407: GO 44705
// if direction then
44409: LD_VAR 0 4
44413: IFFALSE 44477
// begin d := 1 ;
44415: LD_ADDR_VAR 0 9
44419: PUSH
44420: LD_INT 1
44422: ST_TO_ADDR
// if i_from > i_to then
44423: LD_VAR 0 2
44427: PUSH
44428: LD_VAR 0 3
44432: GREATER
44433: IFFALSE 44459
// length := ( array - i_from ) + i_to else
44435: LD_ADDR_VAR 0 11
44439: PUSH
44440: LD_VAR 0 1
44444: PUSH
44445: LD_VAR 0 2
44449: MINUS
44450: PUSH
44451: LD_VAR 0 3
44455: PLUS
44456: ST_TO_ADDR
44457: GO 44475
// length := i_to - i_from ;
44459: LD_ADDR_VAR 0 11
44463: PUSH
44464: LD_VAR 0 3
44468: PUSH
44469: LD_VAR 0 2
44473: MINUS
44474: ST_TO_ADDR
// end else
44475: GO 44538
// begin d := - 1 ;
44477: LD_ADDR_VAR 0 9
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: ST_TO_ADDR
// if i_from > i_to then
44486: LD_VAR 0 2
44490: PUSH
44491: LD_VAR 0 3
44495: GREATER
44496: IFFALSE 44516
// length := i_from - i_to else
44498: LD_ADDR_VAR 0 11
44502: PUSH
44503: LD_VAR 0 2
44507: PUSH
44508: LD_VAR 0 3
44512: MINUS
44513: ST_TO_ADDR
44514: GO 44538
// length := ( array - i_to ) + i_from ;
44516: LD_ADDR_VAR 0 11
44520: PUSH
44521: LD_VAR 0 1
44525: PUSH
44526: LD_VAR 0 3
44530: MINUS
44531: PUSH
44532: LD_VAR 0 2
44536: PLUS
44537: ST_TO_ADDR
// end ; if not length then
44538: LD_VAR 0 11
44542: NOT
44543: IFFALSE 44547
// exit ;
44545: GO 44705
// tmp := array ;
44547: LD_ADDR_VAR 0 10
44551: PUSH
44552: LD_VAR 0 1
44556: ST_TO_ADDR
// for i = 1 to length do
44557: LD_ADDR_VAR 0 6
44561: PUSH
44562: DOUBLE
44563: LD_INT 1
44565: DEC
44566: ST_TO_ADDR
44567: LD_VAR 0 11
44571: PUSH
44572: FOR_TO
44573: IFFALSE 44693
// begin for j = 1 to array do
44575: LD_ADDR_VAR 0 7
44579: PUSH
44580: DOUBLE
44581: LD_INT 1
44583: DEC
44584: ST_TO_ADDR
44585: LD_VAR 0 1
44589: PUSH
44590: FOR_TO
44591: IFFALSE 44679
// begin k := j + d ;
44593: LD_ADDR_VAR 0 8
44597: PUSH
44598: LD_VAR 0 7
44602: PUSH
44603: LD_VAR 0 9
44607: PLUS
44608: ST_TO_ADDR
// if k > array then
44609: LD_VAR 0 8
44613: PUSH
44614: LD_VAR 0 1
44618: GREATER
44619: IFFALSE 44629
// k := 1 ;
44621: LD_ADDR_VAR 0 8
44625: PUSH
44626: LD_INT 1
44628: ST_TO_ADDR
// if not k then
44629: LD_VAR 0 8
44633: NOT
44634: IFFALSE 44646
// k := array ;
44636: LD_ADDR_VAR 0 8
44640: PUSH
44641: LD_VAR 0 1
44645: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44646: LD_ADDR_VAR 0 10
44650: PUSH
44651: LD_VAR 0 10
44655: PPUSH
44656: LD_VAR 0 8
44660: PPUSH
44661: LD_VAR 0 1
44665: PUSH
44666: LD_VAR 0 7
44670: ARRAY
44671: PPUSH
44672: CALL_OW 1
44676: ST_TO_ADDR
// end ;
44677: GO 44590
44679: POP
44680: POP
// array := tmp ;
44681: LD_ADDR_VAR 0 1
44685: PUSH
44686: LD_VAR 0 10
44690: ST_TO_ADDR
// end ;
44691: GO 44572
44693: POP
44694: POP
// result := array ;
44695: LD_ADDR_VAR 0 5
44699: PUSH
44700: LD_VAR 0 1
44704: ST_TO_ADDR
// end ;
44705: LD_VAR 0 5
44709: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44710: LD_INT 0
44712: PPUSH
44713: PPUSH
// result := 0 ;
44714: LD_ADDR_VAR 0 3
44718: PUSH
44719: LD_INT 0
44721: ST_TO_ADDR
// if not array or not value in array then
44722: LD_VAR 0 1
44726: NOT
44727: PUSH
44728: LD_VAR 0 2
44732: PUSH
44733: LD_VAR 0 1
44737: IN
44738: NOT
44739: OR
44740: IFFALSE 44744
// exit ;
44742: GO 44798
// for i = 1 to array do
44744: LD_ADDR_VAR 0 4
44748: PUSH
44749: DOUBLE
44750: LD_INT 1
44752: DEC
44753: ST_TO_ADDR
44754: LD_VAR 0 1
44758: PUSH
44759: FOR_TO
44760: IFFALSE 44796
// if value = array [ i ] then
44762: LD_VAR 0 2
44766: PUSH
44767: LD_VAR 0 1
44771: PUSH
44772: LD_VAR 0 4
44776: ARRAY
44777: EQUAL
44778: IFFALSE 44794
// begin result := i ;
44780: LD_ADDR_VAR 0 3
44784: PUSH
44785: LD_VAR 0 4
44789: ST_TO_ADDR
// exit ;
44790: POP
44791: POP
44792: GO 44798
// end ;
44794: GO 44759
44796: POP
44797: POP
// end ;
44798: LD_VAR 0 3
44802: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44803: LD_INT 0
44805: PPUSH
// vc_chassis := chassis ;
44806: LD_ADDR_OWVAR 37
44810: PUSH
44811: LD_VAR 0 1
44815: ST_TO_ADDR
// vc_engine := engine ;
44816: LD_ADDR_OWVAR 39
44820: PUSH
44821: LD_VAR 0 2
44825: ST_TO_ADDR
// vc_control := control ;
44826: LD_ADDR_OWVAR 38
44830: PUSH
44831: LD_VAR 0 3
44835: ST_TO_ADDR
// vc_weapon := weapon ;
44836: LD_ADDR_OWVAR 40
44840: PUSH
44841: LD_VAR 0 4
44845: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44846: LD_ADDR_OWVAR 41
44850: PUSH
44851: LD_VAR 0 5
44855: ST_TO_ADDR
// end ;
44856: LD_VAR 0 6
44860: RET
// export function WantPlant ( unit ) ; var task ; begin
44861: LD_INT 0
44863: PPUSH
44864: PPUSH
// result := false ;
44865: LD_ADDR_VAR 0 2
44869: PUSH
44870: LD_INT 0
44872: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44873: LD_ADDR_VAR 0 3
44877: PUSH
44878: LD_VAR 0 1
44882: PPUSH
44883: CALL_OW 437
44887: ST_TO_ADDR
// if task then
44888: LD_VAR 0 3
44892: IFFALSE 44920
// if task [ 1 ] [ 1 ] = p then
44894: LD_VAR 0 3
44898: PUSH
44899: LD_INT 1
44901: ARRAY
44902: PUSH
44903: LD_INT 1
44905: ARRAY
44906: PUSH
44907: LD_STRING p
44909: EQUAL
44910: IFFALSE 44920
// result := true ;
44912: LD_ADDR_VAR 0 2
44916: PUSH
44917: LD_INT 1
44919: ST_TO_ADDR
// end ;
44920: LD_VAR 0 2
44924: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44925: LD_INT 0
44927: PPUSH
44928: PPUSH
44929: PPUSH
44930: PPUSH
// if pos < 1 then
44931: LD_VAR 0 2
44935: PUSH
44936: LD_INT 1
44938: LESS
44939: IFFALSE 44943
// exit ;
44941: GO 45246
// if pos = 1 then
44943: LD_VAR 0 2
44947: PUSH
44948: LD_INT 1
44950: EQUAL
44951: IFFALSE 44984
// result := Replace ( arr , pos [ 1 ] , value ) else
44953: LD_ADDR_VAR 0 4
44957: PUSH
44958: LD_VAR 0 1
44962: PPUSH
44963: LD_VAR 0 2
44967: PUSH
44968: LD_INT 1
44970: ARRAY
44971: PPUSH
44972: LD_VAR 0 3
44976: PPUSH
44977: CALL_OW 1
44981: ST_TO_ADDR
44982: GO 45246
// begin tmp := arr ;
44984: LD_ADDR_VAR 0 6
44988: PUSH
44989: LD_VAR 0 1
44993: ST_TO_ADDR
// s_arr := [ tmp ] ;
44994: LD_ADDR_VAR 0 7
44998: PUSH
44999: LD_VAR 0 6
45003: PUSH
45004: EMPTY
45005: LIST
45006: ST_TO_ADDR
// for i = 1 to pos - 1 do
45007: LD_ADDR_VAR 0 5
45011: PUSH
45012: DOUBLE
45013: LD_INT 1
45015: DEC
45016: ST_TO_ADDR
45017: LD_VAR 0 2
45021: PUSH
45022: LD_INT 1
45024: MINUS
45025: PUSH
45026: FOR_TO
45027: IFFALSE 45072
// begin tmp := tmp [ pos [ i ] ] ;
45029: LD_ADDR_VAR 0 6
45033: PUSH
45034: LD_VAR 0 6
45038: PUSH
45039: LD_VAR 0 2
45043: PUSH
45044: LD_VAR 0 5
45048: ARRAY
45049: ARRAY
45050: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45051: LD_ADDR_VAR 0 7
45055: PUSH
45056: LD_VAR 0 7
45060: PUSH
45061: LD_VAR 0 6
45065: PUSH
45066: EMPTY
45067: LIST
45068: ADD
45069: ST_TO_ADDR
// end ;
45070: GO 45026
45072: POP
45073: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45074: LD_ADDR_VAR 0 6
45078: PUSH
45079: LD_VAR 0 6
45083: PPUSH
45084: LD_VAR 0 2
45088: PUSH
45089: LD_VAR 0 2
45093: ARRAY
45094: PPUSH
45095: LD_VAR 0 3
45099: PPUSH
45100: CALL_OW 1
45104: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45105: LD_ADDR_VAR 0 7
45109: PUSH
45110: LD_VAR 0 7
45114: PPUSH
45115: LD_VAR 0 7
45119: PPUSH
45120: LD_VAR 0 6
45124: PPUSH
45125: CALL_OW 1
45129: ST_TO_ADDR
// for i = s_arr downto 2 do
45130: LD_ADDR_VAR 0 5
45134: PUSH
45135: DOUBLE
45136: LD_VAR 0 7
45140: INC
45141: ST_TO_ADDR
45142: LD_INT 2
45144: PUSH
45145: FOR_DOWNTO
45146: IFFALSE 45230
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45148: LD_ADDR_VAR 0 6
45152: PUSH
45153: LD_VAR 0 7
45157: PUSH
45158: LD_VAR 0 5
45162: PUSH
45163: LD_INT 1
45165: MINUS
45166: ARRAY
45167: PPUSH
45168: LD_VAR 0 2
45172: PUSH
45173: LD_VAR 0 5
45177: PUSH
45178: LD_INT 1
45180: MINUS
45181: ARRAY
45182: PPUSH
45183: LD_VAR 0 7
45187: PUSH
45188: LD_VAR 0 5
45192: ARRAY
45193: PPUSH
45194: CALL_OW 1
45198: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45199: LD_ADDR_VAR 0 7
45203: PUSH
45204: LD_VAR 0 7
45208: PPUSH
45209: LD_VAR 0 5
45213: PUSH
45214: LD_INT 1
45216: MINUS
45217: PPUSH
45218: LD_VAR 0 6
45222: PPUSH
45223: CALL_OW 1
45227: ST_TO_ADDR
// end ;
45228: GO 45145
45230: POP
45231: POP
// result := s_arr [ 1 ] ;
45232: LD_ADDR_VAR 0 4
45236: PUSH
45237: LD_VAR 0 7
45241: PUSH
45242: LD_INT 1
45244: ARRAY
45245: ST_TO_ADDR
// end ; end ;
45246: LD_VAR 0 4
45250: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45251: LD_INT 0
45253: PPUSH
45254: PPUSH
// if not list then
45255: LD_VAR 0 1
45259: NOT
45260: IFFALSE 45264
// exit ;
45262: GO 45355
// i := list [ pos1 ] ;
45264: LD_ADDR_VAR 0 5
45268: PUSH
45269: LD_VAR 0 1
45273: PUSH
45274: LD_VAR 0 2
45278: ARRAY
45279: ST_TO_ADDR
// if not i then
45280: LD_VAR 0 5
45284: NOT
45285: IFFALSE 45289
// exit ;
45287: GO 45355
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45289: LD_ADDR_VAR 0 1
45293: PUSH
45294: LD_VAR 0 1
45298: PPUSH
45299: LD_VAR 0 2
45303: PPUSH
45304: LD_VAR 0 1
45308: PUSH
45309: LD_VAR 0 3
45313: ARRAY
45314: PPUSH
45315: CALL_OW 1
45319: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45320: LD_ADDR_VAR 0 1
45324: PUSH
45325: LD_VAR 0 1
45329: PPUSH
45330: LD_VAR 0 3
45334: PPUSH
45335: LD_VAR 0 5
45339: PPUSH
45340: CALL_OW 1
45344: ST_TO_ADDR
// result := list ;
45345: LD_ADDR_VAR 0 4
45349: PUSH
45350: LD_VAR 0 1
45354: ST_TO_ADDR
// end ;
45355: LD_VAR 0 4
45359: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45360: LD_INT 0
45362: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45363: LD_ADDR_VAR 0 5
45367: PUSH
45368: LD_VAR 0 1
45372: PPUSH
45373: CALL_OW 250
45377: PPUSH
45378: LD_VAR 0 1
45382: PPUSH
45383: CALL_OW 251
45387: PPUSH
45388: LD_VAR 0 2
45392: PPUSH
45393: LD_VAR 0 3
45397: PPUSH
45398: LD_VAR 0 4
45402: PPUSH
45403: CALL 45781 0 5
45407: ST_TO_ADDR
// end ;
45408: LD_VAR 0 5
45412: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
45413: LD_INT 0
45415: PPUSH
45416: PPUSH
45417: PPUSH
45418: PPUSH
// if not list or not unit then
45419: LD_VAR 0 2
45423: NOT
45424: PUSH
45425: LD_VAR 0 1
45429: NOT
45430: OR
45431: IFFALSE 45435
// exit ;
45433: GO 45776
// result := [ ] ;
45435: LD_ADDR_VAR 0 5
45439: PUSH
45440: EMPTY
45441: ST_TO_ADDR
// for i in list do
45442: LD_ADDR_VAR 0 6
45446: PUSH
45447: LD_VAR 0 2
45451: PUSH
45452: FOR_IN
45453: IFFALSE 45671
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45455: LD_ADDR_VAR 0 8
45459: PUSH
45460: LD_VAR 0 1
45464: PPUSH
45465: LD_VAR 0 6
45469: PUSH
45470: LD_INT 1
45472: ARRAY
45473: PPUSH
45474: LD_VAR 0 6
45478: PUSH
45479: LD_INT 2
45481: ARRAY
45482: PPUSH
45483: CALL_OW 297
45487: ST_TO_ADDR
// if not Count ( result ) then
45488: LD_VAR 0 5
45492: PPUSH
45493: CALL 42065 0 1
45497: NOT
45498: IFFALSE 45531
// begin result := Join ( result , [ i , tmp ] ) ;
45500: LD_ADDR_VAR 0 5
45504: PUSH
45505: LD_VAR 0 5
45509: PPUSH
45510: LD_VAR 0 6
45514: PUSH
45515: LD_VAR 0 8
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PPUSH
45524: CALL 77665 0 2
45528: ST_TO_ADDR
// continue ;
45529: GO 45452
// end ; if result [ result ] [ 2 ] <= tmp then
45531: LD_VAR 0 5
45535: PUSH
45536: LD_VAR 0 5
45540: ARRAY
45541: PUSH
45542: LD_INT 2
45544: ARRAY
45545: PUSH
45546: LD_VAR 0 8
45550: LESSEQUAL
45551: IFFALSE 45584
// result := Join ( result , [ i , tmp ] ) else
45553: LD_ADDR_VAR 0 5
45557: PUSH
45558: LD_VAR 0 5
45562: PPUSH
45563: LD_VAR 0 6
45567: PUSH
45568: LD_VAR 0 8
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PPUSH
45577: CALL 77665 0 2
45581: ST_TO_ADDR
45582: GO 45669
// begin for j := 1 to Count ( result ) do
45584: LD_ADDR_VAR 0 7
45588: PUSH
45589: DOUBLE
45590: LD_INT 1
45592: DEC
45593: ST_TO_ADDR
45594: LD_VAR 0 5
45598: PPUSH
45599: CALL 42065 0 1
45603: PUSH
45604: FOR_TO
45605: IFFALSE 45667
// begin if tmp < result [ j ] [ 2 ] then
45607: LD_VAR 0 8
45611: PUSH
45612: LD_VAR 0 5
45616: PUSH
45617: LD_VAR 0 7
45621: ARRAY
45622: PUSH
45623: LD_INT 2
45625: ARRAY
45626: LESS
45627: IFFALSE 45665
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45629: LD_ADDR_VAR 0 5
45633: PUSH
45634: LD_VAR 0 5
45638: PPUSH
45639: LD_VAR 0 7
45643: PPUSH
45644: LD_VAR 0 6
45648: PUSH
45649: LD_VAR 0 8
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PPUSH
45658: CALL_OW 2
45662: ST_TO_ADDR
// break ;
45663: GO 45667
// end ; end ;
45665: GO 45604
45667: POP
45668: POP
// end ; end ;
45669: GO 45452
45671: POP
45672: POP
// if result and not asc then
45673: LD_VAR 0 5
45677: PUSH
45678: LD_VAR 0 3
45682: NOT
45683: AND
45684: IFFALSE 45701
// result := ReverseArray ( result ) ;
45686: LD_ADDR_VAR 0 5
45690: PUSH
45691: LD_VAR 0 5
45695: PPUSH
45696: CALL 72941 0 1
45700: ST_TO_ADDR
// tmp := [ ] ;
45701: LD_ADDR_VAR 0 8
45705: PUSH
45706: EMPTY
45707: ST_TO_ADDR
// if mode then
45708: LD_VAR 0 4
45712: IFFALSE 45776
// begin for i := 1 to result do
45714: LD_ADDR_VAR 0 6
45718: PUSH
45719: DOUBLE
45720: LD_INT 1
45722: DEC
45723: ST_TO_ADDR
45724: LD_VAR 0 5
45728: PUSH
45729: FOR_TO
45730: IFFALSE 45764
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
45732: LD_ADDR_VAR 0 8
45736: PUSH
45737: LD_VAR 0 8
45741: PPUSH
45742: LD_VAR 0 5
45746: PUSH
45747: LD_VAR 0 6
45751: ARRAY
45752: PUSH
45753: LD_INT 1
45755: ARRAY
45756: PPUSH
45757: CALL 77665 0 2
45761: ST_TO_ADDR
45762: GO 45729
45764: POP
45765: POP
// result := tmp ;
45766: LD_ADDR_VAR 0 5
45770: PUSH
45771: LD_VAR 0 8
45775: ST_TO_ADDR
// end ; end ;
45776: LD_VAR 0 5
45780: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45781: LD_INT 0
45783: PPUSH
45784: PPUSH
45785: PPUSH
45786: PPUSH
// if not list then
45787: LD_VAR 0 3
45791: NOT
45792: IFFALSE 45796
// exit ;
45794: GO 46184
// result := [ ] ;
45796: LD_ADDR_VAR 0 6
45800: PUSH
45801: EMPTY
45802: ST_TO_ADDR
// for i in list do
45803: LD_ADDR_VAR 0 7
45807: PUSH
45808: LD_VAR 0 3
45812: PUSH
45813: FOR_IN
45814: IFFALSE 46016
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45816: LD_ADDR_VAR 0 9
45820: PUSH
45821: LD_VAR 0 7
45825: PPUSH
45826: LD_VAR 0 1
45830: PPUSH
45831: LD_VAR 0 2
45835: PPUSH
45836: CALL_OW 297
45840: ST_TO_ADDR
// if not result then
45841: LD_VAR 0 6
45845: NOT
45846: IFFALSE 45872
// result := [ [ i , tmp ] ] else
45848: LD_ADDR_VAR 0 6
45852: PUSH
45853: LD_VAR 0 7
45857: PUSH
45858: LD_VAR 0 9
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: EMPTY
45868: LIST
45869: ST_TO_ADDR
45870: GO 46014
// begin if result [ result ] [ 2 ] < tmp then
45872: LD_VAR 0 6
45876: PUSH
45877: LD_VAR 0 6
45881: ARRAY
45882: PUSH
45883: LD_INT 2
45885: ARRAY
45886: PUSH
45887: LD_VAR 0 9
45891: LESS
45892: IFFALSE 45934
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45894: LD_ADDR_VAR 0 6
45898: PUSH
45899: LD_VAR 0 6
45903: PPUSH
45904: LD_VAR 0 6
45908: PUSH
45909: LD_INT 1
45911: PLUS
45912: PPUSH
45913: LD_VAR 0 7
45917: PUSH
45918: LD_VAR 0 9
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PPUSH
45927: CALL_OW 2
45931: ST_TO_ADDR
45932: GO 46014
// for j = 1 to result do
45934: LD_ADDR_VAR 0 8
45938: PUSH
45939: DOUBLE
45940: LD_INT 1
45942: DEC
45943: ST_TO_ADDR
45944: LD_VAR 0 6
45948: PUSH
45949: FOR_TO
45950: IFFALSE 46012
// begin if tmp < result [ j ] [ 2 ] then
45952: LD_VAR 0 9
45956: PUSH
45957: LD_VAR 0 6
45961: PUSH
45962: LD_VAR 0 8
45966: ARRAY
45967: PUSH
45968: LD_INT 2
45970: ARRAY
45971: LESS
45972: IFFALSE 46010
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45974: LD_ADDR_VAR 0 6
45978: PUSH
45979: LD_VAR 0 6
45983: PPUSH
45984: LD_VAR 0 8
45988: PPUSH
45989: LD_VAR 0 7
45993: PUSH
45994: LD_VAR 0 9
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PPUSH
46003: CALL_OW 2
46007: ST_TO_ADDR
// break ;
46008: GO 46012
// end ; end ;
46010: GO 45949
46012: POP
46013: POP
// end ; end ;
46014: GO 45813
46016: POP
46017: POP
// if result and not asc then
46018: LD_VAR 0 6
46022: PUSH
46023: LD_VAR 0 4
46027: NOT
46028: AND
46029: IFFALSE 46104
// begin tmp := result ;
46031: LD_ADDR_VAR 0 9
46035: PUSH
46036: LD_VAR 0 6
46040: ST_TO_ADDR
// for i = tmp downto 1 do
46041: LD_ADDR_VAR 0 7
46045: PUSH
46046: DOUBLE
46047: LD_VAR 0 9
46051: INC
46052: ST_TO_ADDR
46053: LD_INT 1
46055: PUSH
46056: FOR_DOWNTO
46057: IFFALSE 46102
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46059: LD_ADDR_VAR 0 6
46063: PUSH
46064: LD_VAR 0 6
46068: PPUSH
46069: LD_VAR 0 9
46073: PUSH
46074: LD_VAR 0 7
46078: MINUS
46079: PUSH
46080: LD_INT 1
46082: PLUS
46083: PPUSH
46084: LD_VAR 0 9
46088: PUSH
46089: LD_VAR 0 7
46093: ARRAY
46094: PPUSH
46095: CALL_OW 1
46099: ST_TO_ADDR
46100: GO 46056
46102: POP
46103: POP
// end ; tmp := [ ] ;
46104: LD_ADDR_VAR 0 9
46108: PUSH
46109: EMPTY
46110: ST_TO_ADDR
// if mode then
46111: LD_VAR 0 5
46115: IFFALSE 46184
// begin for i = 1 to result do
46117: LD_ADDR_VAR 0 7
46121: PUSH
46122: DOUBLE
46123: LD_INT 1
46125: DEC
46126: ST_TO_ADDR
46127: LD_VAR 0 6
46131: PUSH
46132: FOR_TO
46133: IFFALSE 46172
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46135: LD_ADDR_VAR 0 9
46139: PUSH
46140: LD_VAR 0 9
46144: PPUSH
46145: LD_VAR 0 7
46149: PPUSH
46150: LD_VAR 0 6
46154: PUSH
46155: LD_VAR 0 7
46159: ARRAY
46160: PUSH
46161: LD_INT 1
46163: ARRAY
46164: PPUSH
46165: CALL_OW 1
46169: ST_TO_ADDR
46170: GO 46132
46172: POP
46173: POP
// result := tmp ;
46174: LD_ADDR_VAR 0 6
46178: PUSH
46179: LD_VAR 0 9
46183: ST_TO_ADDR
// end ; end ;
46184: LD_VAR 0 6
46188: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46189: LD_INT 0
46191: PPUSH
46192: PPUSH
46193: PPUSH
46194: PPUSH
46195: PPUSH
46196: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46197: LD_ADDR_VAR 0 5
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: EMPTY
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: ST_TO_ADDR
// if not x or not y then
46219: LD_VAR 0 2
46223: NOT
46224: PUSH
46225: LD_VAR 0 3
46229: NOT
46230: OR
46231: IFFALSE 46235
// exit ;
46233: GO 47885
// if not range then
46235: LD_VAR 0 4
46239: NOT
46240: IFFALSE 46250
// range := 10 ;
46242: LD_ADDR_VAR 0 4
46246: PUSH
46247: LD_INT 10
46249: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46250: LD_ADDR_VAR 0 8
46254: PUSH
46255: LD_INT 81
46257: PUSH
46258: LD_VAR 0 1
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 92
46269: PUSH
46270: LD_VAR 0 2
46274: PUSH
46275: LD_VAR 0 3
46279: PUSH
46280: LD_VAR 0 4
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 3
46293: PUSH
46294: LD_INT 21
46296: PUSH
46297: LD_INT 3
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: LIST
46312: PPUSH
46313: CALL_OW 69
46317: ST_TO_ADDR
// if not tmp then
46318: LD_VAR 0 8
46322: NOT
46323: IFFALSE 46327
// exit ;
46325: GO 47885
// for i in tmp do
46327: LD_ADDR_VAR 0 6
46331: PUSH
46332: LD_VAR 0 8
46336: PUSH
46337: FOR_IN
46338: IFFALSE 47860
// begin points := [ 0 , 0 , 0 ] ;
46340: LD_ADDR_VAR 0 9
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: LIST
46358: ST_TO_ADDR
// bpoints := 1 ;
46359: LD_ADDR_VAR 0 10
46363: PUSH
46364: LD_INT 1
46366: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46367: LD_VAR 0 6
46371: PPUSH
46372: CALL_OW 247
46376: PUSH
46377: LD_INT 1
46379: DOUBLE
46380: EQUAL
46381: IFTRUE 46385
46383: GO 46963
46385: POP
// begin if GetClass ( i ) = 1 then
46386: LD_VAR 0 6
46390: PPUSH
46391: CALL_OW 257
46395: PUSH
46396: LD_INT 1
46398: EQUAL
46399: IFFALSE 46420
// points := [ 10 , 5 , 3 ] ;
46401: LD_ADDR_VAR 0 9
46405: PUSH
46406: LD_INT 10
46408: PUSH
46409: LD_INT 5
46411: PUSH
46412: LD_INT 3
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: LIST
46419: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46420: LD_VAR 0 6
46424: PPUSH
46425: CALL_OW 257
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: LD_INT 3
46435: PUSH
46436: LD_INT 4
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: LIST
46443: IN
46444: IFFALSE 46465
// points := [ 3 , 2 , 1 ] ;
46446: LD_ADDR_VAR 0 9
46450: PUSH
46451: LD_INT 3
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: LIST
46464: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46465: LD_VAR 0 6
46469: PPUSH
46470: CALL_OW 257
46474: PUSH
46475: LD_INT 5
46477: EQUAL
46478: IFFALSE 46499
// points := [ 130 , 5 , 2 ] ;
46480: LD_ADDR_VAR 0 9
46484: PUSH
46485: LD_INT 130
46487: PUSH
46488: LD_INT 5
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: LIST
46498: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46499: LD_VAR 0 6
46503: PPUSH
46504: CALL_OW 257
46508: PUSH
46509: LD_INT 8
46511: EQUAL
46512: IFFALSE 46533
// points := [ 35 , 35 , 30 ] ;
46514: LD_ADDR_VAR 0 9
46518: PUSH
46519: LD_INT 35
46521: PUSH
46522: LD_INT 35
46524: PUSH
46525: LD_INT 30
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: LIST
46532: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46533: LD_VAR 0 6
46537: PPUSH
46538: CALL_OW 257
46542: PUSH
46543: LD_INT 9
46545: EQUAL
46546: IFFALSE 46567
// points := [ 20 , 55 , 40 ] ;
46548: LD_ADDR_VAR 0 9
46552: PUSH
46553: LD_INT 20
46555: PUSH
46556: LD_INT 55
46558: PUSH
46559: LD_INT 40
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: LIST
46566: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46567: LD_VAR 0 6
46571: PPUSH
46572: CALL_OW 257
46576: PUSH
46577: LD_INT 12
46579: PUSH
46580: LD_INT 16
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: IN
46587: IFFALSE 46608
// points := [ 5 , 3 , 2 ] ;
46589: LD_ADDR_VAR 0 9
46593: PUSH
46594: LD_INT 5
46596: PUSH
46597: LD_INT 3
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: LIST
46607: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46608: LD_VAR 0 6
46612: PPUSH
46613: CALL_OW 257
46617: PUSH
46618: LD_INT 17
46620: EQUAL
46621: IFFALSE 46642
// points := [ 100 , 50 , 75 ] ;
46623: LD_ADDR_VAR 0 9
46627: PUSH
46628: LD_INT 100
46630: PUSH
46631: LD_INT 50
46633: PUSH
46634: LD_INT 75
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: LIST
46641: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46642: LD_VAR 0 6
46646: PPUSH
46647: CALL_OW 257
46651: PUSH
46652: LD_INT 15
46654: EQUAL
46655: IFFALSE 46676
// points := [ 10 , 5 , 3 ] ;
46657: LD_ADDR_VAR 0 9
46661: PUSH
46662: LD_INT 10
46664: PUSH
46665: LD_INT 5
46667: PUSH
46668: LD_INT 3
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: LIST
46675: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46676: LD_VAR 0 6
46680: PPUSH
46681: CALL_OW 257
46685: PUSH
46686: LD_INT 14
46688: EQUAL
46689: IFFALSE 46710
// points := [ 10 , 0 , 0 ] ;
46691: LD_ADDR_VAR 0 9
46695: PUSH
46696: LD_INT 10
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: LIST
46709: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46710: LD_VAR 0 6
46714: PPUSH
46715: CALL_OW 257
46719: PUSH
46720: LD_INT 11
46722: EQUAL
46723: IFFALSE 46744
// points := [ 30 , 10 , 5 ] ;
46725: LD_ADDR_VAR 0 9
46729: PUSH
46730: LD_INT 30
46732: PUSH
46733: LD_INT 10
46735: PUSH
46736: LD_INT 5
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: LIST
46743: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46744: LD_VAR 0 1
46748: PPUSH
46749: LD_INT 5
46751: PPUSH
46752: CALL_OW 321
46756: PUSH
46757: LD_INT 2
46759: EQUAL
46760: IFFALSE 46777
// bpoints := bpoints * 1.8 ;
46762: LD_ADDR_VAR 0 10
46766: PUSH
46767: LD_VAR 0 10
46771: PUSH
46772: LD_REAL  1.80000000000000E+0000
46775: MUL
46776: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46777: LD_VAR 0 6
46781: PPUSH
46782: CALL_OW 257
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: LD_INT 3
46795: PUSH
46796: LD_INT 4
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: IN
46805: PUSH
46806: LD_VAR 0 1
46810: PPUSH
46811: LD_INT 51
46813: PPUSH
46814: CALL_OW 321
46818: PUSH
46819: LD_INT 2
46821: EQUAL
46822: AND
46823: IFFALSE 46840
// bpoints := bpoints * 1.2 ;
46825: LD_ADDR_VAR 0 10
46829: PUSH
46830: LD_VAR 0 10
46834: PUSH
46835: LD_REAL  1.20000000000000E+0000
46838: MUL
46839: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46840: LD_VAR 0 6
46844: PPUSH
46845: CALL_OW 257
46849: PUSH
46850: LD_INT 5
46852: PUSH
46853: LD_INT 7
46855: PUSH
46856: LD_INT 9
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: LIST
46863: IN
46864: PUSH
46865: LD_VAR 0 1
46869: PPUSH
46870: LD_INT 52
46872: PPUSH
46873: CALL_OW 321
46877: PUSH
46878: LD_INT 2
46880: EQUAL
46881: AND
46882: IFFALSE 46899
// bpoints := bpoints * 1.5 ;
46884: LD_ADDR_VAR 0 10
46888: PUSH
46889: LD_VAR 0 10
46893: PUSH
46894: LD_REAL  1.50000000000000E+0000
46897: MUL
46898: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46899: LD_VAR 0 1
46903: PPUSH
46904: LD_INT 66
46906: PPUSH
46907: CALL_OW 321
46911: PUSH
46912: LD_INT 2
46914: EQUAL
46915: IFFALSE 46932
// bpoints := bpoints * 1.1 ;
46917: LD_ADDR_VAR 0 10
46921: PUSH
46922: LD_VAR 0 10
46926: PUSH
46927: LD_REAL  1.10000000000000E+0000
46930: MUL
46931: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46932: LD_ADDR_VAR 0 10
46936: PUSH
46937: LD_VAR 0 10
46941: PUSH
46942: LD_VAR 0 6
46946: PPUSH
46947: LD_INT 1
46949: PPUSH
46950: CALL_OW 259
46954: PUSH
46955: LD_REAL  1.15000000000000E+0000
46958: MUL
46959: MUL
46960: ST_TO_ADDR
// end ; unit_vehicle :
46961: GO 47789
46963: LD_INT 2
46965: DOUBLE
46966: EQUAL
46967: IFTRUE 46971
46969: GO 47777
46971: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46972: LD_VAR 0 6
46976: PPUSH
46977: CALL_OW 264
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: LD_INT 42
46987: PUSH
46988: LD_INT 24
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: LIST
46995: IN
46996: IFFALSE 47017
// points := [ 25 , 5 , 3 ] ;
46998: LD_ADDR_VAR 0 9
47002: PUSH
47003: LD_INT 25
47005: PUSH
47006: LD_INT 5
47008: PUSH
47009: LD_INT 3
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: LIST
47016: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47017: LD_VAR 0 6
47021: PPUSH
47022: CALL_OW 264
47026: PUSH
47027: LD_INT 4
47029: PUSH
47030: LD_INT 43
47032: PUSH
47033: LD_INT 25
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: LIST
47040: IN
47041: IFFALSE 47062
// points := [ 40 , 15 , 5 ] ;
47043: LD_ADDR_VAR 0 9
47047: PUSH
47048: LD_INT 40
47050: PUSH
47051: LD_INT 15
47053: PUSH
47054: LD_INT 5
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: LIST
47061: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47062: LD_VAR 0 6
47066: PPUSH
47067: CALL_OW 264
47071: PUSH
47072: LD_INT 3
47074: PUSH
47075: LD_INT 23
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: IN
47082: IFFALSE 47103
// points := [ 7 , 25 , 8 ] ;
47084: LD_ADDR_VAR 0 9
47088: PUSH
47089: LD_INT 7
47091: PUSH
47092: LD_INT 25
47094: PUSH
47095: LD_INT 8
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: LIST
47102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47103: LD_VAR 0 6
47107: PPUSH
47108: CALL_OW 264
47112: PUSH
47113: LD_INT 5
47115: PUSH
47116: LD_INT 27
47118: PUSH
47119: LD_INT 44
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: LIST
47126: IN
47127: IFFALSE 47148
// points := [ 14 , 50 , 16 ] ;
47129: LD_ADDR_VAR 0 9
47133: PUSH
47134: LD_INT 14
47136: PUSH
47137: LD_INT 50
47139: PUSH
47140: LD_INT 16
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: LIST
47147: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47148: LD_VAR 0 6
47152: PPUSH
47153: CALL_OW 264
47157: PUSH
47158: LD_INT 6
47160: PUSH
47161: LD_INT 46
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: IN
47168: IFFALSE 47189
// points := [ 32 , 120 , 70 ] ;
47170: LD_ADDR_VAR 0 9
47174: PUSH
47175: LD_INT 32
47177: PUSH
47178: LD_INT 120
47180: PUSH
47181: LD_INT 70
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: LIST
47188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47189: LD_VAR 0 6
47193: PPUSH
47194: CALL_OW 264
47198: PUSH
47199: LD_INT 7
47201: PUSH
47202: LD_INT 28
47204: PUSH
47205: LD_INT 45
47207: PUSH
47208: LD_INT 92
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: IN
47217: IFFALSE 47238
// points := [ 35 , 20 , 45 ] ;
47219: LD_ADDR_VAR 0 9
47223: PUSH
47224: LD_INT 35
47226: PUSH
47227: LD_INT 20
47229: PUSH
47230: LD_INT 45
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: LIST
47237: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47238: LD_VAR 0 6
47242: PPUSH
47243: CALL_OW 264
47247: PUSH
47248: LD_INT 47
47250: PUSH
47251: EMPTY
47252: LIST
47253: IN
47254: IFFALSE 47275
// points := [ 67 , 45 , 75 ] ;
47256: LD_ADDR_VAR 0 9
47260: PUSH
47261: LD_INT 67
47263: PUSH
47264: LD_INT 45
47266: PUSH
47267: LD_INT 75
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: LIST
47274: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47275: LD_VAR 0 6
47279: PPUSH
47280: CALL_OW 264
47284: PUSH
47285: LD_INT 26
47287: PUSH
47288: EMPTY
47289: LIST
47290: IN
47291: IFFALSE 47312
// points := [ 120 , 30 , 80 ] ;
47293: LD_ADDR_VAR 0 9
47297: PUSH
47298: LD_INT 120
47300: PUSH
47301: LD_INT 30
47303: PUSH
47304: LD_INT 80
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: LIST
47311: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47312: LD_VAR 0 6
47316: PPUSH
47317: CALL_OW 264
47321: PUSH
47322: LD_INT 22
47324: PUSH
47325: EMPTY
47326: LIST
47327: IN
47328: IFFALSE 47349
// points := [ 40 , 1 , 1 ] ;
47330: LD_ADDR_VAR 0 9
47334: PUSH
47335: LD_INT 40
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: LIST
47348: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47349: LD_VAR 0 6
47353: PPUSH
47354: CALL_OW 264
47358: PUSH
47359: LD_INT 29
47361: PUSH
47362: EMPTY
47363: LIST
47364: IN
47365: IFFALSE 47386
// points := [ 70 , 200 , 400 ] ;
47367: LD_ADDR_VAR 0 9
47371: PUSH
47372: LD_INT 70
47374: PUSH
47375: LD_INT 200
47377: PUSH
47378: LD_INT 400
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: LIST
47385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47386: LD_VAR 0 6
47390: PPUSH
47391: CALL_OW 264
47395: PUSH
47396: LD_INT 14
47398: PUSH
47399: LD_INT 53
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: IN
47406: IFFALSE 47427
// points := [ 40 , 10 , 20 ] ;
47408: LD_ADDR_VAR 0 9
47412: PUSH
47413: LD_INT 40
47415: PUSH
47416: LD_INT 10
47418: PUSH
47419: LD_INT 20
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: LIST
47426: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47427: LD_VAR 0 6
47431: PPUSH
47432: CALL_OW 264
47436: PUSH
47437: LD_INT 9
47439: PUSH
47440: EMPTY
47441: LIST
47442: IN
47443: IFFALSE 47464
// points := [ 5 , 70 , 20 ] ;
47445: LD_ADDR_VAR 0 9
47449: PUSH
47450: LD_INT 5
47452: PUSH
47453: LD_INT 70
47455: PUSH
47456: LD_INT 20
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: LIST
47463: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47464: LD_VAR 0 6
47468: PPUSH
47469: CALL_OW 264
47473: PUSH
47474: LD_INT 10
47476: PUSH
47477: EMPTY
47478: LIST
47479: IN
47480: IFFALSE 47501
// points := [ 35 , 110 , 70 ] ;
47482: LD_ADDR_VAR 0 9
47486: PUSH
47487: LD_INT 35
47489: PUSH
47490: LD_INT 110
47492: PUSH
47493: LD_INT 70
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: LIST
47500: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47501: LD_VAR 0 6
47505: PPUSH
47506: CALL_OW 265
47510: PUSH
47511: LD_INT 25
47513: EQUAL
47514: IFFALSE 47535
// points := [ 80 , 65 , 100 ] ;
47516: LD_ADDR_VAR 0 9
47520: PUSH
47521: LD_INT 80
47523: PUSH
47524: LD_INT 65
47526: PUSH
47527: LD_INT 100
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: LIST
47534: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47535: LD_VAR 0 6
47539: PPUSH
47540: CALL_OW 263
47544: PUSH
47545: LD_INT 1
47547: EQUAL
47548: IFFALSE 47583
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47550: LD_ADDR_VAR 0 10
47554: PUSH
47555: LD_VAR 0 10
47559: PUSH
47560: LD_VAR 0 6
47564: PPUSH
47565: CALL_OW 311
47569: PPUSH
47570: LD_INT 3
47572: PPUSH
47573: CALL_OW 259
47577: PUSH
47578: LD_INT 4
47580: MUL
47581: MUL
47582: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47583: LD_VAR 0 6
47587: PPUSH
47588: CALL_OW 263
47592: PUSH
47593: LD_INT 2
47595: EQUAL
47596: IFFALSE 47647
// begin j := IsControledBy ( i ) ;
47598: LD_ADDR_VAR 0 7
47602: PUSH
47603: LD_VAR 0 6
47607: PPUSH
47608: CALL_OW 312
47612: ST_TO_ADDR
// if j then
47613: LD_VAR 0 7
47617: IFFALSE 47647
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47619: LD_ADDR_VAR 0 10
47623: PUSH
47624: LD_VAR 0 10
47628: PUSH
47629: LD_VAR 0 7
47633: PPUSH
47634: LD_INT 3
47636: PPUSH
47637: CALL_OW 259
47641: PUSH
47642: LD_INT 3
47644: MUL
47645: MUL
47646: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47647: LD_VAR 0 6
47651: PPUSH
47652: CALL_OW 264
47656: PUSH
47657: LD_INT 5
47659: PUSH
47660: LD_INT 6
47662: PUSH
47663: LD_INT 46
47665: PUSH
47666: LD_INT 44
47668: PUSH
47669: LD_INT 47
47671: PUSH
47672: LD_INT 45
47674: PUSH
47675: LD_INT 28
47677: PUSH
47678: LD_INT 7
47680: PUSH
47681: LD_INT 27
47683: PUSH
47684: LD_INT 29
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: IN
47699: PUSH
47700: LD_VAR 0 1
47704: PPUSH
47705: LD_INT 52
47707: PPUSH
47708: CALL_OW 321
47712: PUSH
47713: LD_INT 2
47715: EQUAL
47716: AND
47717: IFFALSE 47734
// bpoints := bpoints * 1.2 ;
47719: LD_ADDR_VAR 0 10
47723: PUSH
47724: LD_VAR 0 10
47728: PUSH
47729: LD_REAL  1.20000000000000E+0000
47732: MUL
47733: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47734: LD_VAR 0 6
47738: PPUSH
47739: CALL_OW 264
47743: PUSH
47744: LD_INT 6
47746: PUSH
47747: LD_INT 46
47749: PUSH
47750: LD_INT 47
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: LIST
47757: IN
47758: IFFALSE 47775
// bpoints := bpoints * 1.2 ;
47760: LD_ADDR_VAR 0 10
47764: PUSH
47765: LD_VAR 0 10
47769: PUSH
47770: LD_REAL  1.20000000000000E+0000
47773: MUL
47774: ST_TO_ADDR
// end ; unit_building :
47775: GO 47789
47777: LD_INT 3
47779: DOUBLE
47780: EQUAL
47781: IFTRUE 47785
47783: GO 47788
47785: POP
// ; end ;
47786: GO 47789
47788: POP
// for j = 1 to 3 do
47789: LD_ADDR_VAR 0 7
47793: PUSH
47794: DOUBLE
47795: LD_INT 1
47797: DEC
47798: ST_TO_ADDR
47799: LD_INT 3
47801: PUSH
47802: FOR_TO
47803: IFFALSE 47856
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47805: LD_ADDR_VAR 0 5
47809: PUSH
47810: LD_VAR 0 5
47814: PPUSH
47815: LD_VAR 0 7
47819: PPUSH
47820: LD_VAR 0 5
47824: PUSH
47825: LD_VAR 0 7
47829: ARRAY
47830: PUSH
47831: LD_VAR 0 9
47835: PUSH
47836: LD_VAR 0 7
47840: ARRAY
47841: PUSH
47842: LD_VAR 0 10
47846: MUL
47847: PLUS
47848: PPUSH
47849: CALL_OW 1
47853: ST_TO_ADDR
47854: GO 47802
47856: POP
47857: POP
// end ;
47858: GO 46337
47860: POP
47861: POP
// result := Replace ( result , 4 , tmp ) ;
47862: LD_ADDR_VAR 0 5
47866: PUSH
47867: LD_VAR 0 5
47871: PPUSH
47872: LD_INT 4
47874: PPUSH
47875: LD_VAR 0 8
47879: PPUSH
47880: CALL_OW 1
47884: ST_TO_ADDR
// end ;
47885: LD_VAR 0 5
47889: RET
// export function DangerAtRange ( unit , range ) ; begin
47890: LD_INT 0
47892: PPUSH
// if not unit then
47893: LD_VAR 0 1
47897: NOT
47898: IFFALSE 47902
// exit ;
47900: GO 47947
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47902: LD_ADDR_VAR 0 3
47906: PUSH
47907: LD_VAR 0 1
47911: PPUSH
47912: CALL_OW 255
47916: PPUSH
47917: LD_VAR 0 1
47921: PPUSH
47922: CALL_OW 250
47926: PPUSH
47927: LD_VAR 0 1
47931: PPUSH
47932: CALL_OW 251
47936: PPUSH
47937: LD_VAR 0 2
47941: PPUSH
47942: CALL 46189 0 4
47946: ST_TO_ADDR
// end ;
47947: LD_VAR 0 3
47951: RET
// export function DangerInArea ( side , area ) ; begin
47952: LD_INT 0
47954: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47955: LD_ADDR_VAR 0 3
47959: PUSH
47960: LD_VAR 0 2
47964: PPUSH
47965: LD_INT 81
47967: PUSH
47968: LD_VAR 0 1
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PPUSH
47977: CALL_OW 70
47981: ST_TO_ADDR
// end ;
47982: LD_VAR 0 3
47986: RET
// export function IsExtension ( b ) ; begin
47987: LD_INT 0
47989: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47990: LD_ADDR_VAR 0 2
47994: PUSH
47995: LD_VAR 0 1
47999: PUSH
48000: LD_INT 23
48002: PUSH
48003: LD_INT 20
48005: PUSH
48006: LD_INT 22
48008: PUSH
48009: LD_INT 17
48011: PUSH
48012: LD_INT 24
48014: PUSH
48015: LD_INT 21
48017: PUSH
48018: LD_INT 19
48020: PUSH
48021: LD_INT 16
48023: PUSH
48024: LD_INT 25
48026: PUSH
48027: LD_INT 18
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: IN
48042: ST_TO_ADDR
// end ;
48043: LD_VAR 0 2
48047: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48048: LD_INT 0
48050: PPUSH
48051: PPUSH
48052: PPUSH
// result := [ ] ;
48053: LD_ADDR_VAR 0 4
48057: PUSH
48058: EMPTY
48059: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48060: LD_ADDR_VAR 0 5
48064: PUSH
48065: LD_VAR 0 2
48069: PPUSH
48070: LD_INT 21
48072: PUSH
48073: LD_INT 3
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PPUSH
48080: CALL_OW 70
48084: ST_TO_ADDR
// if not tmp then
48085: LD_VAR 0 5
48089: NOT
48090: IFFALSE 48094
// exit ;
48092: GO 48158
// if checkLink then
48094: LD_VAR 0 3
48098: IFFALSE 48148
// begin for i in tmp do
48100: LD_ADDR_VAR 0 6
48104: PUSH
48105: LD_VAR 0 5
48109: PUSH
48110: FOR_IN
48111: IFFALSE 48146
// if GetBase ( i ) <> base then
48113: LD_VAR 0 6
48117: PPUSH
48118: CALL_OW 274
48122: PUSH
48123: LD_VAR 0 1
48127: NONEQUAL
48128: IFFALSE 48144
// ComLinkToBase ( base , i ) ;
48130: LD_VAR 0 1
48134: PPUSH
48135: LD_VAR 0 6
48139: PPUSH
48140: CALL_OW 169
48144: GO 48110
48146: POP
48147: POP
// end ; result := tmp ;
48148: LD_ADDR_VAR 0 4
48152: PUSH
48153: LD_VAR 0 5
48157: ST_TO_ADDR
// end ;
48158: LD_VAR 0 4
48162: RET
// export function ComComplete ( units , b ) ; var i ; begin
48163: LD_INT 0
48165: PPUSH
48166: PPUSH
// if not units then
48167: LD_VAR 0 1
48171: NOT
48172: IFFALSE 48176
// exit ;
48174: GO 48266
// for i in units do
48176: LD_ADDR_VAR 0 4
48180: PUSH
48181: LD_VAR 0 1
48185: PUSH
48186: FOR_IN
48187: IFFALSE 48264
// if BuildingStatus ( b ) = bs_build then
48189: LD_VAR 0 2
48193: PPUSH
48194: CALL_OW 461
48198: PUSH
48199: LD_INT 1
48201: EQUAL
48202: IFFALSE 48262
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48204: LD_VAR 0 4
48208: PPUSH
48209: LD_STRING h
48211: PUSH
48212: LD_VAR 0 2
48216: PPUSH
48217: CALL_OW 250
48221: PUSH
48222: LD_VAR 0 2
48226: PPUSH
48227: CALL_OW 251
48231: PUSH
48232: LD_VAR 0 2
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: PUSH
48255: EMPTY
48256: LIST
48257: PPUSH
48258: CALL_OW 446
48262: GO 48186
48264: POP
48265: POP
// end ;
48266: LD_VAR 0 3
48270: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48271: LD_INT 0
48273: PPUSH
48274: PPUSH
48275: PPUSH
48276: PPUSH
48277: PPUSH
48278: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48279: LD_VAR 0 1
48283: NOT
48284: PUSH
48285: LD_VAR 0 1
48289: PPUSH
48290: CALL_OW 263
48294: PUSH
48295: LD_INT 2
48297: NONEQUAL
48298: OR
48299: IFFALSE 48303
// exit ;
48301: GO 48619
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48303: LD_ADDR_VAR 0 6
48307: PUSH
48308: LD_INT 22
48310: PUSH
48311: LD_VAR 0 1
48315: PPUSH
48316: CALL_OW 255
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: LD_INT 30
48330: PUSH
48331: LD_INT 36
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 34
48340: PUSH
48341: LD_INT 31
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: LIST
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PPUSH
48357: CALL_OW 69
48361: ST_TO_ADDR
// if not tmp then
48362: LD_VAR 0 6
48366: NOT
48367: IFFALSE 48371
// exit ;
48369: GO 48619
// result := [ ] ;
48371: LD_ADDR_VAR 0 2
48375: PUSH
48376: EMPTY
48377: ST_TO_ADDR
// for i in tmp do
48378: LD_ADDR_VAR 0 3
48382: PUSH
48383: LD_VAR 0 6
48387: PUSH
48388: FOR_IN
48389: IFFALSE 48460
// begin t := UnitsInside ( i ) ;
48391: LD_ADDR_VAR 0 4
48395: PUSH
48396: LD_VAR 0 3
48400: PPUSH
48401: CALL_OW 313
48405: ST_TO_ADDR
// if t then
48406: LD_VAR 0 4
48410: IFFALSE 48458
// for j in t do
48412: LD_ADDR_VAR 0 7
48416: PUSH
48417: LD_VAR 0 4
48421: PUSH
48422: FOR_IN
48423: IFFALSE 48456
// result := Replace ( result , result + 1 , j ) ;
48425: LD_ADDR_VAR 0 2
48429: PUSH
48430: LD_VAR 0 2
48434: PPUSH
48435: LD_VAR 0 2
48439: PUSH
48440: LD_INT 1
48442: PLUS
48443: PPUSH
48444: LD_VAR 0 7
48448: PPUSH
48449: CALL_OW 1
48453: ST_TO_ADDR
48454: GO 48422
48456: POP
48457: POP
// end ;
48458: GO 48388
48460: POP
48461: POP
// if not result then
48462: LD_VAR 0 2
48466: NOT
48467: IFFALSE 48471
// exit ;
48469: GO 48619
// mech := result [ 1 ] ;
48471: LD_ADDR_VAR 0 5
48475: PUSH
48476: LD_VAR 0 2
48480: PUSH
48481: LD_INT 1
48483: ARRAY
48484: ST_TO_ADDR
// if result > 1 then
48485: LD_VAR 0 2
48489: PUSH
48490: LD_INT 1
48492: GREATER
48493: IFFALSE 48605
// begin for i = 2 to result do
48495: LD_ADDR_VAR 0 3
48499: PUSH
48500: DOUBLE
48501: LD_INT 2
48503: DEC
48504: ST_TO_ADDR
48505: LD_VAR 0 2
48509: PUSH
48510: FOR_TO
48511: IFFALSE 48603
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48513: LD_ADDR_VAR 0 4
48517: PUSH
48518: LD_VAR 0 2
48522: PUSH
48523: LD_VAR 0 3
48527: ARRAY
48528: PPUSH
48529: LD_INT 3
48531: PPUSH
48532: CALL_OW 259
48536: PUSH
48537: LD_VAR 0 2
48541: PUSH
48542: LD_VAR 0 3
48546: ARRAY
48547: PPUSH
48548: CALL_OW 432
48552: MINUS
48553: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48554: LD_VAR 0 4
48558: PUSH
48559: LD_VAR 0 5
48563: PPUSH
48564: LD_INT 3
48566: PPUSH
48567: CALL_OW 259
48571: PUSH
48572: LD_VAR 0 5
48576: PPUSH
48577: CALL_OW 432
48581: MINUS
48582: GREATEREQUAL
48583: IFFALSE 48601
// mech := result [ i ] ;
48585: LD_ADDR_VAR 0 5
48589: PUSH
48590: LD_VAR 0 2
48594: PUSH
48595: LD_VAR 0 3
48599: ARRAY
48600: ST_TO_ADDR
// end ;
48601: GO 48510
48603: POP
48604: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48605: LD_VAR 0 1
48609: PPUSH
48610: LD_VAR 0 5
48614: PPUSH
48615: CALL_OW 135
// end ;
48619: LD_VAR 0 2
48623: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48624: LD_INT 0
48626: PPUSH
48627: PPUSH
48628: PPUSH
48629: PPUSH
48630: PPUSH
48631: PPUSH
48632: PPUSH
48633: PPUSH
48634: PPUSH
48635: PPUSH
48636: PPUSH
48637: PPUSH
48638: PPUSH
// result := [ ] ;
48639: LD_ADDR_VAR 0 7
48643: PUSH
48644: EMPTY
48645: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48646: LD_VAR 0 1
48650: PPUSH
48651: CALL_OW 266
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: IN
48666: NOT
48667: IFFALSE 48671
// exit ;
48669: GO 50305
// if name then
48671: LD_VAR 0 3
48675: IFFALSE 48691
// SetBName ( base_dep , name ) ;
48677: LD_VAR 0 1
48681: PPUSH
48682: LD_VAR 0 3
48686: PPUSH
48687: CALL_OW 500
// base := GetBase ( base_dep ) ;
48691: LD_ADDR_VAR 0 15
48695: PUSH
48696: LD_VAR 0 1
48700: PPUSH
48701: CALL_OW 274
48705: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48706: LD_ADDR_VAR 0 16
48710: PUSH
48711: LD_VAR 0 1
48715: PPUSH
48716: CALL_OW 255
48720: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48721: LD_ADDR_VAR 0 17
48725: PUSH
48726: LD_VAR 0 1
48730: PPUSH
48731: CALL_OW 248
48735: ST_TO_ADDR
// if sources then
48736: LD_VAR 0 5
48740: IFFALSE 48787
// for i = 1 to 3 do
48742: LD_ADDR_VAR 0 8
48746: PUSH
48747: DOUBLE
48748: LD_INT 1
48750: DEC
48751: ST_TO_ADDR
48752: LD_INT 3
48754: PUSH
48755: FOR_TO
48756: IFFALSE 48785
// AddResourceType ( base , i , sources [ i ] ) ;
48758: LD_VAR 0 15
48762: PPUSH
48763: LD_VAR 0 8
48767: PPUSH
48768: LD_VAR 0 5
48772: PUSH
48773: LD_VAR 0 8
48777: ARRAY
48778: PPUSH
48779: CALL_OW 276
48783: GO 48755
48785: POP
48786: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48787: LD_ADDR_VAR 0 18
48791: PUSH
48792: LD_VAR 0 15
48796: PPUSH
48797: LD_VAR 0 2
48801: PPUSH
48802: LD_INT 1
48804: PPUSH
48805: CALL 48048 0 3
48809: ST_TO_ADDR
// InitHc ;
48810: CALL_OW 19
// InitUc ;
48814: CALL_OW 18
// uc_side := side ;
48818: LD_ADDR_OWVAR 20
48822: PUSH
48823: LD_VAR 0 16
48827: ST_TO_ADDR
// uc_nation := nation ;
48828: LD_ADDR_OWVAR 21
48832: PUSH
48833: LD_VAR 0 17
48837: ST_TO_ADDR
// if buildings then
48838: LD_VAR 0 18
48842: IFFALSE 50164
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48844: LD_ADDR_VAR 0 19
48848: PUSH
48849: LD_VAR 0 18
48853: PPUSH
48854: LD_INT 2
48856: PUSH
48857: LD_INT 30
48859: PUSH
48860: LD_INT 29
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 30
48869: PUSH
48870: LD_INT 30
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: LIST
48881: PPUSH
48882: CALL_OW 72
48886: ST_TO_ADDR
// if tmp then
48887: LD_VAR 0 19
48891: IFFALSE 48939
// for i in tmp do
48893: LD_ADDR_VAR 0 8
48897: PUSH
48898: LD_VAR 0 19
48902: PUSH
48903: FOR_IN
48904: IFFALSE 48937
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48906: LD_VAR 0 8
48910: PPUSH
48911: CALL_OW 250
48915: PPUSH
48916: LD_VAR 0 8
48920: PPUSH
48921: CALL_OW 251
48925: PPUSH
48926: LD_VAR 0 16
48930: PPUSH
48931: CALL_OW 441
48935: GO 48903
48937: POP
48938: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48939: LD_VAR 0 18
48943: PPUSH
48944: LD_INT 2
48946: PUSH
48947: LD_INT 30
48949: PUSH
48950: LD_INT 32
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 30
48959: PUSH
48960: LD_INT 33
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: LIST
48971: PPUSH
48972: CALL_OW 72
48976: IFFALSE 49064
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48978: LD_ADDR_VAR 0 8
48982: PUSH
48983: LD_VAR 0 18
48987: PPUSH
48988: LD_INT 2
48990: PUSH
48991: LD_INT 30
48993: PUSH
48994: LD_INT 32
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 30
49003: PUSH
49004: LD_INT 33
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: LIST
49015: PPUSH
49016: CALL_OW 72
49020: PUSH
49021: FOR_IN
49022: IFFALSE 49062
// begin if not GetBWeapon ( i ) then
49024: LD_VAR 0 8
49028: PPUSH
49029: CALL_OW 269
49033: NOT
49034: IFFALSE 49060
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49036: LD_VAR 0 8
49040: PPUSH
49041: LD_VAR 0 8
49045: PPUSH
49046: LD_VAR 0 2
49050: PPUSH
49051: CALL 50310 0 2
49055: PPUSH
49056: CALL_OW 431
// end ;
49060: GO 49021
49062: POP
49063: POP
// end ; for i = 1 to personel do
49064: LD_ADDR_VAR 0 8
49068: PUSH
49069: DOUBLE
49070: LD_INT 1
49072: DEC
49073: ST_TO_ADDR
49074: LD_VAR 0 6
49078: PUSH
49079: FOR_TO
49080: IFFALSE 50144
// begin if i > 4 then
49082: LD_VAR 0 8
49086: PUSH
49087: LD_INT 4
49089: GREATER
49090: IFFALSE 49094
// break ;
49092: GO 50144
// case i of 1 :
49094: LD_VAR 0 8
49098: PUSH
49099: LD_INT 1
49101: DOUBLE
49102: EQUAL
49103: IFTRUE 49107
49105: GO 49187
49107: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49108: LD_ADDR_VAR 0 12
49112: PUSH
49113: LD_VAR 0 18
49117: PPUSH
49118: LD_INT 22
49120: PUSH
49121: LD_VAR 0 16
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 58
49132: PUSH
49133: EMPTY
49134: LIST
49135: PUSH
49136: LD_INT 2
49138: PUSH
49139: LD_INT 30
49141: PUSH
49142: LD_INT 32
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 30
49151: PUSH
49152: LD_INT 4
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 30
49161: PUSH
49162: LD_INT 5
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: LIST
49179: PPUSH
49180: CALL_OW 72
49184: ST_TO_ADDR
49185: GO 49409
49187: LD_INT 2
49189: DOUBLE
49190: EQUAL
49191: IFTRUE 49195
49193: GO 49257
49195: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49196: LD_ADDR_VAR 0 12
49200: PUSH
49201: LD_VAR 0 18
49205: PPUSH
49206: LD_INT 22
49208: PUSH
49209: LD_VAR 0 16
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: LD_INT 30
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 30
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: LIST
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PPUSH
49250: CALL_OW 72
49254: ST_TO_ADDR
49255: GO 49409
49257: LD_INT 3
49259: DOUBLE
49260: EQUAL
49261: IFTRUE 49265
49263: GO 49327
49265: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49266: LD_ADDR_VAR 0 12
49270: PUSH
49271: LD_VAR 0 18
49275: PPUSH
49276: LD_INT 22
49278: PUSH
49279: LD_VAR 0 16
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: LD_INT 30
49293: PUSH
49294: LD_INT 2
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 30
49303: PUSH
49304: LD_INT 3
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: LIST
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PPUSH
49320: CALL_OW 72
49324: ST_TO_ADDR
49325: GO 49409
49327: LD_INT 4
49329: DOUBLE
49330: EQUAL
49331: IFTRUE 49335
49333: GO 49408
49335: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49336: LD_ADDR_VAR 0 12
49340: PUSH
49341: LD_VAR 0 18
49345: PPUSH
49346: LD_INT 22
49348: PUSH
49349: LD_VAR 0 16
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: LD_INT 30
49363: PUSH
49364: LD_INT 6
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 30
49373: PUSH
49374: LD_INT 7
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 30
49383: PUSH
49384: LD_INT 8
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PPUSH
49401: CALL_OW 72
49405: ST_TO_ADDR
49406: GO 49409
49408: POP
// if i = 1 then
49409: LD_VAR 0 8
49413: PUSH
49414: LD_INT 1
49416: EQUAL
49417: IFFALSE 49528
// begin tmp := [ ] ;
49419: LD_ADDR_VAR 0 19
49423: PUSH
49424: EMPTY
49425: ST_TO_ADDR
// for j in f do
49426: LD_ADDR_VAR 0 9
49430: PUSH
49431: LD_VAR 0 12
49435: PUSH
49436: FOR_IN
49437: IFFALSE 49510
// if GetBType ( j ) = b_bunker then
49439: LD_VAR 0 9
49443: PPUSH
49444: CALL_OW 266
49448: PUSH
49449: LD_INT 32
49451: EQUAL
49452: IFFALSE 49479
// tmp := Insert ( tmp , 1 , j ) else
49454: LD_ADDR_VAR 0 19
49458: PUSH
49459: LD_VAR 0 19
49463: PPUSH
49464: LD_INT 1
49466: PPUSH
49467: LD_VAR 0 9
49471: PPUSH
49472: CALL_OW 2
49476: ST_TO_ADDR
49477: GO 49508
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49479: LD_ADDR_VAR 0 19
49483: PUSH
49484: LD_VAR 0 19
49488: PPUSH
49489: LD_VAR 0 19
49493: PUSH
49494: LD_INT 1
49496: PLUS
49497: PPUSH
49498: LD_VAR 0 9
49502: PPUSH
49503: CALL_OW 2
49507: ST_TO_ADDR
49508: GO 49436
49510: POP
49511: POP
// if tmp then
49512: LD_VAR 0 19
49516: IFFALSE 49528
// f := tmp ;
49518: LD_ADDR_VAR 0 12
49522: PUSH
49523: LD_VAR 0 19
49527: ST_TO_ADDR
// end ; x := personel [ i ] ;
49528: LD_ADDR_VAR 0 13
49532: PUSH
49533: LD_VAR 0 6
49537: PUSH
49538: LD_VAR 0 8
49542: ARRAY
49543: ST_TO_ADDR
// if x = - 1 then
49544: LD_VAR 0 13
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: EQUAL
49553: IFFALSE 49762
// begin for j in f do
49555: LD_ADDR_VAR 0 9
49559: PUSH
49560: LD_VAR 0 12
49564: PUSH
49565: FOR_IN
49566: IFFALSE 49758
// repeat InitHc ;
49568: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49572: LD_VAR 0 9
49576: PPUSH
49577: CALL_OW 266
49581: PUSH
49582: LD_INT 5
49584: EQUAL
49585: IFFALSE 49655
// begin if UnitsInside ( j ) < 3 then
49587: LD_VAR 0 9
49591: PPUSH
49592: CALL_OW 313
49596: PUSH
49597: LD_INT 3
49599: LESS
49600: IFFALSE 49636
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49602: LD_INT 0
49604: PPUSH
49605: LD_INT 5
49607: PUSH
49608: LD_INT 8
49610: PUSH
49611: LD_INT 9
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: LIST
49618: PUSH
49619: LD_VAR 0 17
49623: ARRAY
49624: PPUSH
49625: LD_VAR 0 4
49629: PPUSH
49630: CALL_OW 380
49634: GO 49653
// PrepareHuman ( false , i , skill ) ;
49636: LD_INT 0
49638: PPUSH
49639: LD_VAR 0 8
49643: PPUSH
49644: LD_VAR 0 4
49648: PPUSH
49649: CALL_OW 380
// end else
49653: GO 49672
// PrepareHuman ( false , i , skill ) ;
49655: LD_INT 0
49657: PPUSH
49658: LD_VAR 0 8
49662: PPUSH
49663: LD_VAR 0 4
49667: PPUSH
49668: CALL_OW 380
// un := CreateHuman ;
49672: LD_ADDR_VAR 0 14
49676: PUSH
49677: CALL_OW 44
49681: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49682: LD_ADDR_VAR 0 7
49686: PUSH
49687: LD_VAR 0 7
49691: PPUSH
49692: LD_INT 1
49694: PPUSH
49695: LD_VAR 0 14
49699: PPUSH
49700: CALL_OW 2
49704: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49705: LD_VAR 0 14
49709: PPUSH
49710: LD_VAR 0 9
49714: PPUSH
49715: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49719: LD_VAR 0 9
49723: PPUSH
49724: CALL_OW 313
49728: PUSH
49729: LD_INT 6
49731: EQUAL
49732: PUSH
49733: LD_VAR 0 9
49737: PPUSH
49738: CALL_OW 266
49742: PUSH
49743: LD_INT 32
49745: PUSH
49746: LD_INT 31
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: IN
49753: OR
49754: IFFALSE 49568
49756: GO 49565
49758: POP
49759: POP
// end else
49760: GO 50142
// for j = 1 to x do
49762: LD_ADDR_VAR 0 9
49766: PUSH
49767: DOUBLE
49768: LD_INT 1
49770: DEC
49771: ST_TO_ADDR
49772: LD_VAR 0 13
49776: PUSH
49777: FOR_TO
49778: IFFALSE 50140
// begin InitHc ;
49780: CALL_OW 19
// if not f then
49784: LD_VAR 0 12
49788: NOT
49789: IFFALSE 49878
// begin PrepareHuman ( false , i , skill ) ;
49791: LD_INT 0
49793: PPUSH
49794: LD_VAR 0 8
49798: PPUSH
49799: LD_VAR 0 4
49803: PPUSH
49804: CALL_OW 380
// un := CreateHuman ;
49808: LD_ADDR_VAR 0 14
49812: PUSH
49813: CALL_OW 44
49817: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49818: LD_ADDR_VAR 0 7
49822: PUSH
49823: LD_VAR 0 7
49827: PPUSH
49828: LD_INT 1
49830: PPUSH
49831: LD_VAR 0 14
49835: PPUSH
49836: CALL_OW 2
49840: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49841: LD_VAR 0 14
49845: PPUSH
49846: LD_VAR 0 1
49850: PPUSH
49851: CALL_OW 250
49855: PPUSH
49856: LD_VAR 0 1
49860: PPUSH
49861: CALL_OW 251
49865: PPUSH
49866: LD_INT 10
49868: PPUSH
49869: LD_INT 0
49871: PPUSH
49872: CALL_OW 50
// continue ;
49876: GO 49777
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49878: LD_VAR 0 12
49882: PUSH
49883: LD_INT 1
49885: ARRAY
49886: PPUSH
49887: CALL_OW 313
49891: PUSH
49892: LD_VAR 0 12
49896: PUSH
49897: LD_INT 1
49899: ARRAY
49900: PPUSH
49901: CALL_OW 266
49905: PUSH
49906: LD_INT 32
49908: PUSH
49909: LD_INT 31
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: IN
49916: AND
49917: PUSH
49918: LD_VAR 0 12
49922: PUSH
49923: LD_INT 1
49925: ARRAY
49926: PPUSH
49927: CALL_OW 313
49931: PUSH
49932: LD_INT 6
49934: EQUAL
49935: OR
49936: IFFALSE 49956
// f := Delete ( f , 1 ) ;
49938: LD_ADDR_VAR 0 12
49942: PUSH
49943: LD_VAR 0 12
49947: PPUSH
49948: LD_INT 1
49950: PPUSH
49951: CALL_OW 3
49955: ST_TO_ADDR
// if not f then
49956: LD_VAR 0 12
49960: NOT
49961: IFFALSE 49979
// begin x := x + 2 ;
49963: LD_ADDR_VAR 0 13
49967: PUSH
49968: LD_VAR 0 13
49972: PUSH
49973: LD_INT 2
49975: PLUS
49976: ST_TO_ADDR
// continue ;
49977: GO 49777
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49979: LD_VAR 0 12
49983: PUSH
49984: LD_INT 1
49986: ARRAY
49987: PPUSH
49988: CALL_OW 266
49992: PUSH
49993: LD_INT 5
49995: EQUAL
49996: IFFALSE 50070
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49998: LD_VAR 0 12
50002: PUSH
50003: LD_INT 1
50005: ARRAY
50006: PPUSH
50007: CALL_OW 313
50011: PUSH
50012: LD_INT 3
50014: LESS
50015: IFFALSE 50051
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50017: LD_INT 0
50019: PPUSH
50020: LD_INT 5
50022: PUSH
50023: LD_INT 8
50025: PUSH
50026: LD_INT 9
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: LIST
50033: PUSH
50034: LD_VAR 0 17
50038: ARRAY
50039: PPUSH
50040: LD_VAR 0 4
50044: PPUSH
50045: CALL_OW 380
50049: GO 50068
// PrepareHuman ( false , i , skill ) ;
50051: LD_INT 0
50053: PPUSH
50054: LD_VAR 0 8
50058: PPUSH
50059: LD_VAR 0 4
50063: PPUSH
50064: CALL_OW 380
// end else
50068: GO 50087
// PrepareHuman ( false , i , skill ) ;
50070: LD_INT 0
50072: PPUSH
50073: LD_VAR 0 8
50077: PPUSH
50078: LD_VAR 0 4
50082: PPUSH
50083: CALL_OW 380
// un := CreateHuman ;
50087: LD_ADDR_VAR 0 14
50091: PUSH
50092: CALL_OW 44
50096: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50097: LD_ADDR_VAR 0 7
50101: PUSH
50102: LD_VAR 0 7
50106: PPUSH
50107: LD_INT 1
50109: PPUSH
50110: LD_VAR 0 14
50114: PPUSH
50115: CALL_OW 2
50119: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50120: LD_VAR 0 14
50124: PPUSH
50125: LD_VAR 0 12
50129: PUSH
50130: LD_INT 1
50132: ARRAY
50133: PPUSH
50134: CALL_OW 52
// end ;
50138: GO 49777
50140: POP
50141: POP
// end ;
50142: GO 49079
50144: POP
50145: POP
// result := result ^ buildings ;
50146: LD_ADDR_VAR 0 7
50150: PUSH
50151: LD_VAR 0 7
50155: PUSH
50156: LD_VAR 0 18
50160: ADD
50161: ST_TO_ADDR
// end else
50162: GO 50305
// begin for i = 1 to personel do
50164: LD_ADDR_VAR 0 8
50168: PUSH
50169: DOUBLE
50170: LD_INT 1
50172: DEC
50173: ST_TO_ADDR
50174: LD_VAR 0 6
50178: PUSH
50179: FOR_TO
50180: IFFALSE 50303
// begin if i > 4 then
50182: LD_VAR 0 8
50186: PUSH
50187: LD_INT 4
50189: GREATER
50190: IFFALSE 50194
// break ;
50192: GO 50303
// x := personel [ i ] ;
50194: LD_ADDR_VAR 0 13
50198: PUSH
50199: LD_VAR 0 6
50203: PUSH
50204: LD_VAR 0 8
50208: ARRAY
50209: ST_TO_ADDR
// if x = - 1 then
50210: LD_VAR 0 13
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: EQUAL
50219: IFFALSE 50223
// continue ;
50221: GO 50179
// PrepareHuman ( false , i , skill ) ;
50223: LD_INT 0
50225: PPUSH
50226: LD_VAR 0 8
50230: PPUSH
50231: LD_VAR 0 4
50235: PPUSH
50236: CALL_OW 380
// un := CreateHuman ;
50240: LD_ADDR_VAR 0 14
50244: PUSH
50245: CALL_OW 44
50249: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50250: LD_VAR 0 14
50254: PPUSH
50255: LD_VAR 0 1
50259: PPUSH
50260: CALL_OW 250
50264: PPUSH
50265: LD_VAR 0 1
50269: PPUSH
50270: CALL_OW 251
50274: PPUSH
50275: LD_INT 10
50277: PPUSH
50278: LD_INT 0
50280: PPUSH
50281: CALL_OW 50
// result := result ^ un ;
50285: LD_ADDR_VAR 0 7
50289: PUSH
50290: LD_VAR 0 7
50294: PUSH
50295: LD_VAR 0 14
50299: ADD
50300: ST_TO_ADDR
// end ;
50301: GO 50179
50303: POP
50304: POP
// end ; end ;
50305: LD_VAR 0 7
50309: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50310: LD_INT 0
50312: PPUSH
50313: PPUSH
50314: PPUSH
50315: PPUSH
50316: PPUSH
50317: PPUSH
50318: PPUSH
50319: PPUSH
50320: PPUSH
50321: PPUSH
50322: PPUSH
50323: PPUSH
50324: PPUSH
50325: PPUSH
50326: PPUSH
50327: PPUSH
// result := false ;
50328: LD_ADDR_VAR 0 3
50332: PUSH
50333: LD_INT 0
50335: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50336: LD_VAR 0 1
50340: NOT
50341: PUSH
50342: LD_VAR 0 1
50346: PPUSH
50347: CALL_OW 266
50351: PUSH
50352: LD_INT 32
50354: PUSH
50355: LD_INT 33
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: IN
50362: NOT
50363: OR
50364: IFFALSE 50368
// exit ;
50366: GO 51477
// nat := GetNation ( tower ) ;
50368: LD_ADDR_VAR 0 12
50372: PUSH
50373: LD_VAR 0 1
50377: PPUSH
50378: CALL_OW 248
50382: ST_TO_ADDR
// side := GetSide ( tower ) ;
50383: LD_ADDR_VAR 0 16
50387: PUSH
50388: LD_VAR 0 1
50392: PPUSH
50393: CALL_OW 255
50397: ST_TO_ADDR
// x := GetX ( tower ) ;
50398: LD_ADDR_VAR 0 10
50402: PUSH
50403: LD_VAR 0 1
50407: PPUSH
50408: CALL_OW 250
50412: ST_TO_ADDR
// y := GetY ( tower ) ;
50413: LD_ADDR_VAR 0 11
50417: PUSH
50418: LD_VAR 0 1
50422: PPUSH
50423: CALL_OW 251
50427: ST_TO_ADDR
// if not x or not y then
50428: LD_VAR 0 10
50432: NOT
50433: PUSH
50434: LD_VAR 0 11
50438: NOT
50439: OR
50440: IFFALSE 50444
// exit ;
50442: GO 51477
// weapon := 0 ;
50444: LD_ADDR_VAR 0 18
50448: PUSH
50449: LD_INT 0
50451: ST_TO_ADDR
// fac_list := [ ] ;
50452: LD_ADDR_VAR 0 17
50456: PUSH
50457: EMPTY
50458: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50459: LD_ADDR_VAR 0 6
50463: PUSH
50464: LD_VAR 0 1
50468: PPUSH
50469: CALL_OW 274
50473: PPUSH
50474: LD_VAR 0 2
50478: PPUSH
50479: LD_INT 0
50481: PPUSH
50482: CALL 48048 0 3
50486: PPUSH
50487: LD_INT 30
50489: PUSH
50490: LD_INT 3
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PPUSH
50497: CALL_OW 72
50501: ST_TO_ADDR
// if not factories then
50502: LD_VAR 0 6
50506: NOT
50507: IFFALSE 50511
// exit ;
50509: GO 51477
// for i in factories do
50511: LD_ADDR_VAR 0 8
50515: PUSH
50516: LD_VAR 0 6
50520: PUSH
50521: FOR_IN
50522: IFFALSE 50547
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50524: LD_ADDR_VAR 0 17
50528: PUSH
50529: LD_VAR 0 17
50533: PUSH
50534: LD_VAR 0 8
50538: PPUSH
50539: CALL_OW 478
50543: UNION
50544: ST_TO_ADDR
50545: GO 50521
50547: POP
50548: POP
// if not fac_list then
50549: LD_VAR 0 17
50553: NOT
50554: IFFALSE 50558
// exit ;
50556: GO 51477
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50558: LD_ADDR_VAR 0 5
50562: PUSH
50563: LD_INT 4
50565: PUSH
50566: LD_INT 5
50568: PUSH
50569: LD_INT 9
50571: PUSH
50572: LD_INT 10
50574: PUSH
50575: LD_INT 6
50577: PUSH
50578: LD_INT 7
50580: PUSH
50581: LD_INT 11
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 27
50595: PUSH
50596: LD_INT 28
50598: PUSH
50599: LD_INT 26
50601: PUSH
50602: LD_INT 30
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 43
50613: PUSH
50614: LD_INT 44
50616: PUSH
50617: LD_INT 46
50619: PUSH
50620: LD_INT 45
50622: PUSH
50623: LD_INT 47
50625: PUSH
50626: LD_INT 49
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: LIST
50641: PUSH
50642: LD_VAR 0 12
50646: ARRAY
50647: ST_TO_ADDR
// list := list isect fac_list ;
50648: LD_ADDR_VAR 0 5
50652: PUSH
50653: LD_VAR 0 5
50657: PUSH
50658: LD_VAR 0 17
50662: ISECT
50663: ST_TO_ADDR
// if not list then
50664: LD_VAR 0 5
50668: NOT
50669: IFFALSE 50673
// exit ;
50671: GO 51477
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50673: LD_VAR 0 12
50677: PUSH
50678: LD_INT 3
50680: EQUAL
50681: PUSH
50682: LD_INT 49
50684: PUSH
50685: LD_VAR 0 5
50689: IN
50690: AND
50691: PUSH
50692: LD_INT 31
50694: PPUSH
50695: LD_VAR 0 16
50699: PPUSH
50700: CALL_OW 321
50704: PUSH
50705: LD_INT 2
50707: EQUAL
50708: AND
50709: IFFALSE 50769
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50711: LD_INT 22
50713: PUSH
50714: LD_VAR 0 16
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 35
50725: PUSH
50726: LD_INT 49
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 91
50735: PUSH
50736: LD_VAR 0 1
50740: PUSH
50741: LD_INT 10
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: LIST
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: LIST
50753: PPUSH
50754: CALL_OW 69
50758: NOT
50759: IFFALSE 50769
// weapon := ru_time_lapser ;
50761: LD_ADDR_VAR 0 18
50765: PUSH
50766: LD_INT 49
50768: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50769: LD_VAR 0 12
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: LD_INT 2
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: IN
50784: PUSH
50785: LD_INT 11
50787: PUSH
50788: LD_VAR 0 5
50792: IN
50793: PUSH
50794: LD_INT 30
50796: PUSH
50797: LD_VAR 0 5
50801: IN
50802: OR
50803: AND
50804: PUSH
50805: LD_INT 6
50807: PPUSH
50808: LD_VAR 0 16
50812: PPUSH
50813: CALL_OW 321
50817: PUSH
50818: LD_INT 2
50820: EQUAL
50821: AND
50822: IFFALSE 50987
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50824: LD_INT 22
50826: PUSH
50827: LD_VAR 0 16
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 2
50838: PUSH
50839: LD_INT 35
50841: PUSH
50842: LD_INT 11
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 35
50851: PUSH
50852: LD_INT 30
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 91
50866: PUSH
50867: LD_VAR 0 1
50871: PUSH
50872: LD_INT 18
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: LIST
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: LIST
50884: PPUSH
50885: CALL_OW 69
50889: NOT
50890: PUSH
50891: LD_INT 22
50893: PUSH
50894: LD_VAR 0 16
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: LD_INT 30
50908: PUSH
50909: LD_INT 32
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 30
50918: PUSH
50919: LD_INT 33
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 91
50933: PUSH
50934: LD_VAR 0 1
50938: PUSH
50939: LD_INT 12
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: LIST
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: LIST
50951: PUSH
50952: EMPTY
50953: LIST
50954: PPUSH
50955: CALL_OW 69
50959: PUSH
50960: LD_INT 2
50962: GREATER
50963: AND
50964: IFFALSE 50987
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50966: LD_ADDR_VAR 0 18
50970: PUSH
50971: LD_INT 11
50973: PUSH
50974: LD_INT 30
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_VAR 0 12
50985: ARRAY
50986: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50987: LD_VAR 0 18
50991: NOT
50992: PUSH
50993: LD_INT 40
50995: PPUSH
50996: LD_VAR 0 16
51000: PPUSH
51001: CALL_OW 321
51005: PUSH
51006: LD_INT 2
51008: EQUAL
51009: AND
51010: PUSH
51011: LD_INT 7
51013: PUSH
51014: LD_VAR 0 5
51018: IN
51019: PUSH
51020: LD_INT 28
51022: PUSH
51023: LD_VAR 0 5
51027: IN
51028: OR
51029: PUSH
51030: LD_INT 45
51032: PUSH
51033: LD_VAR 0 5
51037: IN
51038: OR
51039: AND
51040: IFFALSE 51294
// begin hex := GetHexInfo ( x , y ) ;
51042: LD_ADDR_VAR 0 4
51046: PUSH
51047: LD_VAR 0 10
51051: PPUSH
51052: LD_VAR 0 11
51056: PPUSH
51057: CALL_OW 546
51061: ST_TO_ADDR
// if hex [ 1 ] then
51062: LD_VAR 0 4
51066: PUSH
51067: LD_INT 1
51069: ARRAY
51070: IFFALSE 51074
// exit ;
51072: GO 51477
// height := hex [ 2 ] ;
51074: LD_ADDR_VAR 0 15
51078: PUSH
51079: LD_VAR 0 4
51083: PUSH
51084: LD_INT 2
51086: ARRAY
51087: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51088: LD_ADDR_VAR 0 14
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: LD_INT 2
51098: PUSH
51099: LD_INT 3
51101: PUSH
51102: LD_INT 5
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: ST_TO_ADDR
// for i in tmp do
51111: LD_ADDR_VAR 0 8
51115: PUSH
51116: LD_VAR 0 14
51120: PUSH
51121: FOR_IN
51122: IFFALSE 51292
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51124: LD_ADDR_VAR 0 9
51128: PUSH
51129: LD_VAR 0 10
51133: PPUSH
51134: LD_VAR 0 8
51138: PPUSH
51139: LD_INT 5
51141: PPUSH
51142: CALL_OW 272
51146: PUSH
51147: LD_VAR 0 11
51151: PPUSH
51152: LD_VAR 0 8
51156: PPUSH
51157: LD_INT 5
51159: PPUSH
51160: CALL_OW 273
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51169: LD_VAR 0 9
51173: PUSH
51174: LD_INT 1
51176: ARRAY
51177: PPUSH
51178: LD_VAR 0 9
51182: PUSH
51183: LD_INT 2
51185: ARRAY
51186: PPUSH
51187: CALL_OW 488
51191: IFFALSE 51290
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51193: LD_ADDR_VAR 0 4
51197: PUSH
51198: LD_VAR 0 9
51202: PUSH
51203: LD_INT 1
51205: ARRAY
51206: PPUSH
51207: LD_VAR 0 9
51211: PUSH
51212: LD_INT 2
51214: ARRAY
51215: PPUSH
51216: CALL_OW 546
51220: ST_TO_ADDR
// if hex [ 1 ] then
51221: LD_VAR 0 4
51225: PUSH
51226: LD_INT 1
51228: ARRAY
51229: IFFALSE 51233
// continue ;
51231: GO 51121
// h := hex [ 2 ] ;
51233: LD_ADDR_VAR 0 13
51237: PUSH
51238: LD_VAR 0 4
51242: PUSH
51243: LD_INT 2
51245: ARRAY
51246: ST_TO_ADDR
// if h + 7 < height then
51247: LD_VAR 0 13
51251: PUSH
51252: LD_INT 7
51254: PLUS
51255: PUSH
51256: LD_VAR 0 15
51260: LESS
51261: IFFALSE 51290
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51263: LD_ADDR_VAR 0 18
51267: PUSH
51268: LD_INT 7
51270: PUSH
51271: LD_INT 28
51273: PUSH
51274: LD_INT 45
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: LIST
51281: PUSH
51282: LD_VAR 0 12
51286: ARRAY
51287: ST_TO_ADDR
// break ;
51288: GO 51292
// end ; end ; end ;
51290: GO 51121
51292: POP
51293: POP
// end ; if not weapon then
51294: LD_VAR 0 18
51298: NOT
51299: IFFALSE 51359
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51301: LD_ADDR_VAR 0 5
51305: PUSH
51306: LD_VAR 0 5
51310: PUSH
51311: LD_INT 11
51313: PUSH
51314: LD_INT 30
51316: PUSH
51317: LD_INT 49
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: LIST
51324: DIFF
51325: ST_TO_ADDR
// if not list then
51326: LD_VAR 0 5
51330: NOT
51331: IFFALSE 51335
// exit ;
51333: GO 51477
// weapon := list [ rand ( 1 , list ) ] ;
51335: LD_ADDR_VAR 0 18
51339: PUSH
51340: LD_VAR 0 5
51344: PUSH
51345: LD_INT 1
51347: PPUSH
51348: LD_VAR 0 5
51352: PPUSH
51353: CALL_OW 12
51357: ARRAY
51358: ST_TO_ADDR
// end ; if weapon then
51359: LD_VAR 0 18
51363: IFFALSE 51477
// begin tmp := CostOfWeapon ( weapon ) ;
51365: LD_ADDR_VAR 0 14
51369: PUSH
51370: LD_VAR 0 18
51374: PPUSH
51375: CALL_OW 451
51379: ST_TO_ADDR
// j := GetBase ( tower ) ;
51380: LD_ADDR_VAR 0 9
51384: PUSH
51385: LD_VAR 0 1
51389: PPUSH
51390: CALL_OW 274
51394: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51395: LD_VAR 0 9
51399: PPUSH
51400: LD_INT 1
51402: PPUSH
51403: CALL_OW 275
51407: PUSH
51408: LD_VAR 0 14
51412: PUSH
51413: LD_INT 1
51415: ARRAY
51416: GREATEREQUAL
51417: PUSH
51418: LD_VAR 0 9
51422: PPUSH
51423: LD_INT 2
51425: PPUSH
51426: CALL_OW 275
51430: PUSH
51431: LD_VAR 0 14
51435: PUSH
51436: LD_INT 2
51438: ARRAY
51439: GREATEREQUAL
51440: AND
51441: PUSH
51442: LD_VAR 0 9
51446: PPUSH
51447: LD_INT 3
51449: PPUSH
51450: CALL_OW 275
51454: PUSH
51455: LD_VAR 0 14
51459: PUSH
51460: LD_INT 3
51462: ARRAY
51463: GREATEREQUAL
51464: AND
51465: IFFALSE 51477
// result := weapon ;
51467: LD_ADDR_VAR 0 3
51471: PUSH
51472: LD_VAR 0 18
51476: ST_TO_ADDR
// end ; end ;
51477: LD_VAR 0 3
51481: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51482: LD_INT 0
51484: PPUSH
51485: PPUSH
// result := true ;
51486: LD_ADDR_VAR 0 3
51490: PUSH
51491: LD_INT 1
51493: ST_TO_ADDR
// if array1 = array2 then
51494: LD_VAR 0 1
51498: PUSH
51499: LD_VAR 0 2
51503: EQUAL
51504: IFFALSE 51564
// begin for i = 1 to array1 do
51506: LD_ADDR_VAR 0 4
51510: PUSH
51511: DOUBLE
51512: LD_INT 1
51514: DEC
51515: ST_TO_ADDR
51516: LD_VAR 0 1
51520: PUSH
51521: FOR_TO
51522: IFFALSE 51560
// if array1 [ i ] <> array2 [ i ] then
51524: LD_VAR 0 1
51528: PUSH
51529: LD_VAR 0 4
51533: ARRAY
51534: PUSH
51535: LD_VAR 0 2
51539: PUSH
51540: LD_VAR 0 4
51544: ARRAY
51545: NONEQUAL
51546: IFFALSE 51558
// begin result := false ;
51548: LD_ADDR_VAR 0 3
51552: PUSH
51553: LD_INT 0
51555: ST_TO_ADDR
// break ;
51556: GO 51560
// end ;
51558: GO 51521
51560: POP
51561: POP
// end else
51562: GO 51572
// result := false ;
51564: LD_ADDR_VAR 0 3
51568: PUSH
51569: LD_INT 0
51571: ST_TO_ADDR
// end ;
51572: LD_VAR 0 3
51576: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51577: LD_INT 0
51579: PPUSH
51580: PPUSH
// if not array1 or not array2 then
51581: LD_VAR 0 1
51585: NOT
51586: PUSH
51587: LD_VAR 0 2
51591: NOT
51592: OR
51593: IFFALSE 51597
// exit ;
51595: GO 51661
// result := true ;
51597: LD_ADDR_VAR 0 3
51601: PUSH
51602: LD_INT 1
51604: ST_TO_ADDR
// for i = 1 to array1 do
51605: LD_ADDR_VAR 0 4
51609: PUSH
51610: DOUBLE
51611: LD_INT 1
51613: DEC
51614: ST_TO_ADDR
51615: LD_VAR 0 1
51619: PUSH
51620: FOR_TO
51621: IFFALSE 51659
// if array1 [ i ] <> array2 [ i ] then
51623: LD_VAR 0 1
51627: PUSH
51628: LD_VAR 0 4
51632: ARRAY
51633: PUSH
51634: LD_VAR 0 2
51638: PUSH
51639: LD_VAR 0 4
51643: ARRAY
51644: NONEQUAL
51645: IFFALSE 51657
// begin result := false ;
51647: LD_ADDR_VAR 0 3
51651: PUSH
51652: LD_INT 0
51654: ST_TO_ADDR
// break ;
51655: GO 51659
// end ;
51657: GO 51620
51659: POP
51660: POP
// end ;
51661: LD_VAR 0 3
51665: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51666: LD_INT 0
51668: PPUSH
51669: PPUSH
51670: PPUSH
// pom := GetBase ( fac ) ;
51671: LD_ADDR_VAR 0 5
51675: PUSH
51676: LD_VAR 0 1
51680: PPUSH
51681: CALL_OW 274
51685: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51686: LD_ADDR_VAR 0 4
51690: PUSH
51691: LD_VAR 0 2
51695: PUSH
51696: LD_INT 1
51698: ARRAY
51699: PPUSH
51700: LD_VAR 0 2
51704: PUSH
51705: LD_INT 2
51707: ARRAY
51708: PPUSH
51709: LD_VAR 0 2
51713: PUSH
51714: LD_INT 3
51716: ARRAY
51717: PPUSH
51718: LD_VAR 0 2
51722: PUSH
51723: LD_INT 4
51725: ARRAY
51726: PPUSH
51727: CALL_OW 449
51731: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51732: LD_ADDR_VAR 0 3
51736: PUSH
51737: LD_VAR 0 5
51741: PPUSH
51742: LD_INT 1
51744: PPUSH
51745: CALL_OW 275
51749: PUSH
51750: LD_VAR 0 4
51754: PUSH
51755: LD_INT 1
51757: ARRAY
51758: GREATEREQUAL
51759: PUSH
51760: LD_VAR 0 5
51764: PPUSH
51765: LD_INT 2
51767: PPUSH
51768: CALL_OW 275
51772: PUSH
51773: LD_VAR 0 4
51777: PUSH
51778: LD_INT 2
51780: ARRAY
51781: GREATEREQUAL
51782: AND
51783: PUSH
51784: LD_VAR 0 5
51788: PPUSH
51789: LD_INT 3
51791: PPUSH
51792: CALL_OW 275
51796: PUSH
51797: LD_VAR 0 4
51801: PUSH
51802: LD_INT 3
51804: ARRAY
51805: GREATEREQUAL
51806: AND
51807: ST_TO_ADDR
// end ;
51808: LD_VAR 0 3
51812: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51813: LD_INT 0
51815: PPUSH
51816: PPUSH
51817: PPUSH
51818: PPUSH
// pom := GetBase ( building ) ;
51819: LD_ADDR_VAR 0 3
51823: PUSH
51824: LD_VAR 0 1
51828: PPUSH
51829: CALL_OW 274
51833: ST_TO_ADDR
// if not pom then
51834: LD_VAR 0 3
51838: NOT
51839: IFFALSE 51843
// exit ;
51841: GO 52013
// btype := GetBType ( building ) ;
51843: LD_ADDR_VAR 0 5
51847: PUSH
51848: LD_VAR 0 1
51852: PPUSH
51853: CALL_OW 266
51857: ST_TO_ADDR
// if btype = b_armoury then
51858: LD_VAR 0 5
51862: PUSH
51863: LD_INT 4
51865: EQUAL
51866: IFFALSE 51876
// btype := b_barracks ;
51868: LD_ADDR_VAR 0 5
51872: PUSH
51873: LD_INT 5
51875: ST_TO_ADDR
// if btype = b_depot then
51876: LD_VAR 0 5
51880: PUSH
51881: LD_INT 0
51883: EQUAL
51884: IFFALSE 51894
// btype := b_warehouse ;
51886: LD_ADDR_VAR 0 5
51890: PUSH
51891: LD_INT 1
51893: ST_TO_ADDR
// if btype = b_workshop then
51894: LD_VAR 0 5
51898: PUSH
51899: LD_INT 2
51901: EQUAL
51902: IFFALSE 51912
// btype := b_factory ;
51904: LD_ADDR_VAR 0 5
51908: PUSH
51909: LD_INT 3
51911: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51912: LD_ADDR_VAR 0 4
51916: PUSH
51917: LD_VAR 0 5
51921: PPUSH
51922: LD_VAR 0 1
51926: PPUSH
51927: CALL_OW 248
51931: PPUSH
51932: CALL_OW 450
51936: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51937: LD_ADDR_VAR 0 2
51941: PUSH
51942: LD_VAR 0 3
51946: PPUSH
51947: LD_INT 1
51949: PPUSH
51950: CALL_OW 275
51954: PUSH
51955: LD_VAR 0 4
51959: PUSH
51960: LD_INT 1
51962: ARRAY
51963: GREATEREQUAL
51964: PUSH
51965: LD_VAR 0 3
51969: PPUSH
51970: LD_INT 2
51972: PPUSH
51973: CALL_OW 275
51977: PUSH
51978: LD_VAR 0 4
51982: PUSH
51983: LD_INT 2
51985: ARRAY
51986: GREATEREQUAL
51987: AND
51988: PUSH
51989: LD_VAR 0 3
51993: PPUSH
51994: LD_INT 3
51996: PPUSH
51997: CALL_OW 275
52001: PUSH
52002: LD_VAR 0 4
52006: PUSH
52007: LD_INT 3
52009: ARRAY
52010: GREATEREQUAL
52011: AND
52012: ST_TO_ADDR
// end ;
52013: LD_VAR 0 2
52017: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52018: LD_INT 0
52020: PPUSH
52021: PPUSH
52022: PPUSH
// pom := GetBase ( building ) ;
52023: LD_ADDR_VAR 0 4
52027: PUSH
52028: LD_VAR 0 1
52032: PPUSH
52033: CALL_OW 274
52037: ST_TO_ADDR
// if not pom then
52038: LD_VAR 0 4
52042: NOT
52043: IFFALSE 52047
// exit ;
52045: GO 52148
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52047: LD_ADDR_VAR 0 5
52051: PUSH
52052: LD_VAR 0 2
52056: PPUSH
52057: LD_VAR 0 1
52061: PPUSH
52062: CALL_OW 248
52066: PPUSH
52067: CALL_OW 450
52071: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52072: LD_ADDR_VAR 0 3
52076: PUSH
52077: LD_VAR 0 4
52081: PPUSH
52082: LD_INT 1
52084: PPUSH
52085: CALL_OW 275
52089: PUSH
52090: LD_VAR 0 5
52094: PUSH
52095: LD_INT 1
52097: ARRAY
52098: GREATEREQUAL
52099: PUSH
52100: LD_VAR 0 4
52104: PPUSH
52105: LD_INT 2
52107: PPUSH
52108: CALL_OW 275
52112: PUSH
52113: LD_VAR 0 5
52117: PUSH
52118: LD_INT 2
52120: ARRAY
52121: GREATEREQUAL
52122: AND
52123: PUSH
52124: LD_VAR 0 4
52128: PPUSH
52129: LD_INT 3
52131: PPUSH
52132: CALL_OW 275
52136: PUSH
52137: LD_VAR 0 5
52141: PUSH
52142: LD_INT 3
52144: ARRAY
52145: GREATEREQUAL
52146: AND
52147: ST_TO_ADDR
// end ;
52148: LD_VAR 0 3
52152: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52153: LD_INT 0
52155: PPUSH
52156: PPUSH
52157: PPUSH
52158: PPUSH
52159: PPUSH
52160: PPUSH
52161: PPUSH
52162: PPUSH
52163: PPUSH
52164: PPUSH
52165: PPUSH
// result := false ;
52166: LD_ADDR_VAR 0 8
52170: PUSH
52171: LD_INT 0
52173: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52174: LD_VAR 0 5
52178: NOT
52179: PUSH
52180: LD_VAR 0 1
52184: NOT
52185: OR
52186: PUSH
52187: LD_VAR 0 2
52191: NOT
52192: OR
52193: PUSH
52194: LD_VAR 0 3
52198: NOT
52199: OR
52200: IFFALSE 52204
// exit ;
52202: GO 53018
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52204: LD_ADDR_VAR 0 14
52208: PUSH
52209: LD_VAR 0 1
52213: PPUSH
52214: LD_VAR 0 2
52218: PPUSH
52219: LD_VAR 0 3
52223: PPUSH
52224: LD_VAR 0 4
52228: PPUSH
52229: LD_VAR 0 5
52233: PUSH
52234: LD_INT 1
52236: ARRAY
52237: PPUSH
52238: CALL_OW 248
52242: PPUSH
52243: LD_INT 0
52245: PPUSH
52246: CALL 54271 0 6
52250: ST_TO_ADDR
// if not hexes then
52251: LD_VAR 0 14
52255: NOT
52256: IFFALSE 52260
// exit ;
52258: GO 53018
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52260: LD_ADDR_VAR 0 17
52264: PUSH
52265: LD_VAR 0 5
52269: PPUSH
52270: LD_INT 22
52272: PUSH
52273: LD_VAR 0 13
52277: PPUSH
52278: CALL_OW 255
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 2
52289: PUSH
52290: LD_INT 30
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 30
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: LIST
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PPUSH
52319: CALL_OW 72
52323: ST_TO_ADDR
// for i = 1 to hexes do
52324: LD_ADDR_VAR 0 9
52328: PUSH
52329: DOUBLE
52330: LD_INT 1
52332: DEC
52333: ST_TO_ADDR
52334: LD_VAR 0 14
52338: PUSH
52339: FOR_TO
52340: IFFALSE 53016
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52342: LD_ADDR_VAR 0 13
52346: PUSH
52347: LD_VAR 0 14
52351: PUSH
52352: LD_VAR 0 9
52356: ARRAY
52357: PUSH
52358: LD_INT 1
52360: ARRAY
52361: PPUSH
52362: LD_VAR 0 14
52366: PUSH
52367: LD_VAR 0 9
52371: ARRAY
52372: PUSH
52373: LD_INT 2
52375: ARRAY
52376: PPUSH
52377: CALL_OW 428
52381: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52382: LD_VAR 0 14
52386: PUSH
52387: LD_VAR 0 9
52391: ARRAY
52392: PUSH
52393: LD_INT 1
52395: ARRAY
52396: PPUSH
52397: LD_VAR 0 14
52401: PUSH
52402: LD_VAR 0 9
52406: ARRAY
52407: PUSH
52408: LD_INT 2
52410: ARRAY
52411: PPUSH
52412: CALL_OW 351
52416: PUSH
52417: LD_VAR 0 14
52421: PUSH
52422: LD_VAR 0 9
52426: ARRAY
52427: PUSH
52428: LD_INT 1
52430: ARRAY
52431: PPUSH
52432: LD_VAR 0 14
52436: PUSH
52437: LD_VAR 0 9
52441: ARRAY
52442: PUSH
52443: LD_INT 2
52445: ARRAY
52446: PPUSH
52447: CALL_OW 488
52451: NOT
52452: OR
52453: PUSH
52454: LD_VAR 0 13
52458: PPUSH
52459: CALL_OW 247
52463: PUSH
52464: LD_INT 3
52466: EQUAL
52467: OR
52468: IFFALSE 52474
// exit ;
52470: POP
52471: POP
52472: GO 53018
// if not tmp then
52474: LD_VAR 0 13
52478: NOT
52479: IFFALSE 52483
// continue ;
52481: GO 52339
// result := true ;
52483: LD_ADDR_VAR 0 8
52487: PUSH
52488: LD_INT 1
52490: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52491: LD_VAR 0 6
52495: PUSH
52496: LD_VAR 0 13
52500: PPUSH
52501: CALL_OW 247
52505: PUSH
52506: LD_INT 2
52508: EQUAL
52509: AND
52510: PUSH
52511: LD_VAR 0 13
52515: PPUSH
52516: CALL_OW 263
52520: PUSH
52521: LD_INT 1
52523: EQUAL
52524: AND
52525: IFFALSE 52689
// begin if IsDrivenBy ( tmp ) then
52527: LD_VAR 0 13
52531: PPUSH
52532: CALL_OW 311
52536: IFFALSE 52540
// continue ;
52538: GO 52339
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52540: LD_VAR 0 6
52544: PPUSH
52545: LD_INT 3
52547: PUSH
52548: LD_INT 60
52550: PUSH
52551: EMPTY
52552: LIST
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 3
52560: PUSH
52561: LD_INT 55
52563: PUSH
52564: EMPTY
52565: LIST
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PPUSH
52575: CALL_OW 72
52579: IFFALSE 52687
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52581: LD_ADDR_VAR 0 18
52585: PUSH
52586: LD_VAR 0 6
52590: PPUSH
52591: LD_INT 3
52593: PUSH
52594: LD_INT 60
52596: PUSH
52597: EMPTY
52598: LIST
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 3
52606: PUSH
52607: LD_INT 55
52609: PUSH
52610: EMPTY
52611: LIST
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PPUSH
52621: CALL_OW 72
52625: PUSH
52626: LD_INT 1
52628: ARRAY
52629: ST_TO_ADDR
// if IsInUnit ( driver ) then
52630: LD_VAR 0 18
52634: PPUSH
52635: CALL_OW 310
52639: IFFALSE 52650
// ComExit ( driver ) ;
52641: LD_VAR 0 18
52645: PPUSH
52646: CALL 78063 0 1
// AddComEnterUnit ( driver , tmp ) ;
52650: LD_VAR 0 18
52654: PPUSH
52655: LD_VAR 0 13
52659: PPUSH
52660: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52664: LD_VAR 0 18
52668: PPUSH
52669: LD_VAR 0 7
52673: PPUSH
52674: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52678: LD_VAR 0 18
52682: PPUSH
52683: CALL_OW 181
// end ; continue ;
52687: GO 52339
// end ; if not cleaners or not tmp in cleaners then
52689: LD_VAR 0 6
52693: NOT
52694: PUSH
52695: LD_VAR 0 13
52699: PUSH
52700: LD_VAR 0 6
52704: IN
52705: NOT
52706: OR
52707: IFFALSE 53014
// begin if dep then
52709: LD_VAR 0 17
52713: IFFALSE 52849
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52715: LD_ADDR_VAR 0 16
52719: PUSH
52720: LD_VAR 0 17
52724: PUSH
52725: LD_INT 1
52727: ARRAY
52728: PPUSH
52729: CALL_OW 250
52733: PPUSH
52734: LD_VAR 0 17
52738: PUSH
52739: LD_INT 1
52741: ARRAY
52742: PPUSH
52743: CALL_OW 254
52747: PPUSH
52748: LD_INT 5
52750: PPUSH
52751: CALL_OW 272
52755: PUSH
52756: LD_VAR 0 17
52760: PUSH
52761: LD_INT 1
52763: ARRAY
52764: PPUSH
52765: CALL_OW 251
52769: PPUSH
52770: LD_VAR 0 17
52774: PUSH
52775: LD_INT 1
52777: ARRAY
52778: PPUSH
52779: CALL_OW 254
52783: PPUSH
52784: LD_INT 5
52786: PPUSH
52787: CALL_OW 273
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52796: LD_VAR 0 16
52800: PUSH
52801: LD_INT 1
52803: ARRAY
52804: PPUSH
52805: LD_VAR 0 16
52809: PUSH
52810: LD_INT 2
52812: ARRAY
52813: PPUSH
52814: CALL_OW 488
52818: IFFALSE 52849
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52820: LD_VAR 0 13
52824: PPUSH
52825: LD_VAR 0 16
52829: PUSH
52830: LD_INT 1
52832: ARRAY
52833: PPUSH
52834: LD_VAR 0 16
52838: PUSH
52839: LD_INT 2
52841: ARRAY
52842: PPUSH
52843: CALL_OW 111
// continue ;
52847: GO 52339
// end ; end ; r := GetDir ( tmp ) ;
52849: LD_ADDR_VAR 0 15
52853: PUSH
52854: LD_VAR 0 13
52858: PPUSH
52859: CALL_OW 254
52863: ST_TO_ADDR
// if r = 5 then
52864: LD_VAR 0 15
52868: PUSH
52869: LD_INT 5
52871: EQUAL
52872: IFFALSE 52882
// r := 0 ;
52874: LD_ADDR_VAR 0 15
52878: PUSH
52879: LD_INT 0
52881: ST_TO_ADDR
// for j = r to 5 do
52882: LD_ADDR_VAR 0 10
52886: PUSH
52887: DOUBLE
52888: LD_VAR 0 15
52892: DEC
52893: ST_TO_ADDR
52894: LD_INT 5
52896: PUSH
52897: FOR_TO
52898: IFFALSE 53012
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52900: LD_ADDR_VAR 0 11
52904: PUSH
52905: LD_VAR 0 13
52909: PPUSH
52910: CALL_OW 250
52914: PPUSH
52915: LD_VAR 0 10
52919: PPUSH
52920: LD_INT 2
52922: PPUSH
52923: CALL_OW 272
52927: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52928: LD_ADDR_VAR 0 12
52932: PUSH
52933: LD_VAR 0 13
52937: PPUSH
52938: CALL_OW 251
52942: PPUSH
52943: LD_VAR 0 10
52947: PPUSH
52948: LD_INT 2
52950: PPUSH
52951: CALL_OW 273
52955: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52956: LD_VAR 0 11
52960: PPUSH
52961: LD_VAR 0 12
52965: PPUSH
52966: CALL_OW 488
52970: PUSH
52971: LD_VAR 0 11
52975: PPUSH
52976: LD_VAR 0 12
52980: PPUSH
52981: CALL_OW 428
52985: NOT
52986: AND
52987: IFFALSE 53010
// begin ComMoveXY ( tmp , _x , _y ) ;
52989: LD_VAR 0 13
52993: PPUSH
52994: LD_VAR 0 11
52998: PPUSH
52999: LD_VAR 0 12
53003: PPUSH
53004: CALL_OW 111
// break ;
53008: GO 53012
// end ; end ;
53010: GO 52897
53012: POP
53013: POP
// end ; end ;
53014: GO 52339
53016: POP
53017: POP
// end ;
53018: LD_VAR 0 8
53022: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53023: LD_INT 0
53025: PPUSH
// result := true ;
53026: LD_ADDR_VAR 0 3
53030: PUSH
53031: LD_INT 1
53033: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53034: LD_VAR 0 2
53038: PUSH
53039: LD_INT 24
53041: DOUBLE
53042: EQUAL
53043: IFTRUE 53053
53045: LD_INT 33
53047: DOUBLE
53048: EQUAL
53049: IFTRUE 53053
53051: GO 53078
53053: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53054: LD_ADDR_VAR 0 3
53058: PUSH
53059: LD_INT 32
53061: PPUSH
53062: LD_VAR 0 1
53066: PPUSH
53067: CALL_OW 321
53071: PUSH
53072: LD_INT 2
53074: EQUAL
53075: ST_TO_ADDR
53076: GO 53394
53078: LD_INT 20
53080: DOUBLE
53081: EQUAL
53082: IFTRUE 53086
53084: GO 53111
53086: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53087: LD_ADDR_VAR 0 3
53091: PUSH
53092: LD_INT 6
53094: PPUSH
53095: LD_VAR 0 1
53099: PPUSH
53100: CALL_OW 321
53104: PUSH
53105: LD_INT 2
53107: EQUAL
53108: ST_TO_ADDR
53109: GO 53394
53111: LD_INT 22
53113: DOUBLE
53114: EQUAL
53115: IFTRUE 53125
53117: LD_INT 36
53119: DOUBLE
53120: EQUAL
53121: IFTRUE 53125
53123: GO 53150
53125: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53126: LD_ADDR_VAR 0 3
53130: PUSH
53131: LD_INT 15
53133: PPUSH
53134: LD_VAR 0 1
53138: PPUSH
53139: CALL_OW 321
53143: PUSH
53144: LD_INT 2
53146: EQUAL
53147: ST_TO_ADDR
53148: GO 53394
53150: LD_INT 30
53152: DOUBLE
53153: EQUAL
53154: IFTRUE 53158
53156: GO 53183
53158: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53159: LD_ADDR_VAR 0 3
53163: PUSH
53164: LD_INT 20
53166: PPUSH
53167: LD_VAR 0 1
53171: PPUSH
53172: CALL_OW 321
53176: PUSH
53177: LD_INT 2
53179: EQUAL
53180: ST_TO_ADDR
53181: GO 53394
53183: LD_INT 28
53185: DOUBLE
53186: EQUAL
53187: IFTRUE 53197
53189: LD_INT 21
53191: DOUBLE
53192: EQUAL
53193: IFTRUE 53197
53195: GO 53222
53197: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53198: LD_ADDR_VAR 0 3
53202: PUSH
53203: LD_INT 21
53205: PPUSH
53206: LD_VAR 0 1
53210: PPUSH
53211: CALL_OW 321
53215: PUSH
53216: LD_INT 2
53218: EQUAL
53219: ST_TO_ADDR
53220: GO 53394
53222: LD_INT 16
53224: DOUBLE
53225: EQUAL
53226: IFTRUE 53230
53228: GO 53255
53230: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53231: LD_ADDR_VAR 0 3
53235: PUSH
53236: LD_INT 84
53238: PPUSH
53239: LD_VAR 0 1
53243: PPUSH
53244: CALL_OW 321
53248: PUSH
53249: LD_INT 2
53251: EQUAL
53252: ST_TO_ADDR
53253: GO 53394
53255: LD_INT 19
53257: DOUBLE
53258: EQUAL
53259: IFTRUE 53269
53261: LD_INT 23
53263: DOUBLE
53264: EQUAL
53265: IFTRUE 53269
53267: GO 53294
53269: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53270: LD_ADDR_VAR 0 3
53274: PUSH
53275: LD_INT 83
53277: PPUSH
53278: LD_VAR 0 1
53282: PPUSH
53283: CALL_OW 321
53287: PUSH
53288: LD_INT 2
53290: EQUAL
53291: ST_TO_ADDR
53292: GO 53394
53294: LD_INT 17
53296: DOUBLE
53297: EQUAL
53298: IFTRUE 53302
53300: GO 53327
53302: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53303: LD_ADDR_VAR 0 3
53307: PUSH
53308: LD_INT 39
53310: PPUSH
53311: LD_VAR 0 1
53315: PPUSH
53316: CALL_OW 321
53320: PUSH
53321: LD_INT 2
53323: EQUAL
53324: ST_TO_ADDR
53325: GO 53394
53327: LD_INT 18
53329: DOUBLE
53330: EQUAL
53331: IFTRUE 53335
53333: GO 53360
53335: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53336: LD_ADDR_VAR 0 3
53340: PUSH
53341: LD_INT 40
53343: PPUSH
53344: LD_VAR 0 1
53348: PPUSH
53349: CALL_OW 321
53353: PUSH
53354: LD_INT 2
53356: EQUAL
53357: ST_TO_ADDR
53358: GO 53394
53360: LD_INT 27
53362: DOUBLE
53363: EQUAL
53364: IFTRUE 53368
53366: GO 53393
53368: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53369: LD_ADDR_VAR 0 3
53373: PUSH
53374: LD_INT 35
53376: PPUSH
53377: LD_VAR 0 1
53381: PPUSH
53382: CALL_OW 321
53386: PUSH
53387: LD_INT 2
53389: EQUAL
53390: ST_TO_ADDR
53391: GO 53394
53393: POP
// end ;
53394: LD_VAR 0 3
53398: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53399: LD_INT 0
53401: PPUSH
53402: PPUSH
53403: PPUSH
53404: PPUSH
53405: PPUSH
53406: PPUSH
53407: PPUSH
53408: PPUSH
53409: PPUSH
53410: PPUSH
53411: PPUSH
// result := false ;
53412: LD_ADDR_VAR 0 6
53416: PUSH
53417: LD_INT 0
53419: ST_TO_ADDR
// if btype = b_depot then
53420: LD_VAR 0 2
53424: PUSH
53425: LD_INT 0
53427: EQUAL
53428: IFFALSE 53440
// begin result := true ;
53430: LD_ADDR_VAR 0 6
53434: PUSH
53435: LD_INT 1
53437: ST_TO_ADDR
// exit ;
53438: GO 54266
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53440: LD_VAR 0 1
53444: NOT
53445: PUSH
53446: LD_VAR 0 1
53450: PPUSH
53451: CALL_OW 266
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: IN
53466: NOT
53467: OR
53468: PUSH
53469: LD_VAR 0 2
53473: NOT
53474: OR
53475: PUSH
53476: LD_VAR 0 5
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: LD_INT 2
53489: PUSH
53490: LD_INT 3
53492: PUSH
53493: LD_INT 4
53495: PUSH
53496: LD_INT 5
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: IN
53507: NOT
53508: OR
53509: PUSH
53510: LD_VAR 0 3
53514: PPUSH
53515: LD_VAR 0 4
53519: PPUSH
53520: CALL_OW 488
53524: NOT
53525: OR
53526: IFFALSE 53530
// exit ;
53528: GO 54266
// side := GetSide ( depot ) ;
53530: LD_ADDR_VAR 0 9
53534: PUSH
53535: LD_VAR 0 1
53539: PPUSH
53540: CALL_OW 255
53544: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53545: LD_VAR 0 9
53549: PPUSH
53550: LD_VAR 0 2
53554: PPUSH
53555: CALL 53023 0 2
53559: NOT
53560: IFFALSE 53564
// exit ;
53562: GO 54266
// pom := GetBase ( depot ) ;
53564: LD_ADDR_VAR 0 10
53568: PUSH
53569: LD_VAR 0 1
53573: PPUSH
53574: CALL_OW 274
53578: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53579: LD_ADDR_VAR 0 11
53583: PUSH
53584: LD_VAR 0 2
53588: PPUSH
53589: LD_VAR 0 1
53593: PPUSH
53594: CALL_OW 248
53598: PPUSH
53599: CALL_OW 450
53603: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53604: LD_VAR 0 10
53608: PPUSH
53609: LD_INT 1
53611: PPUSH
53612: CALL_OW 275
53616: PUSH
53617: LD_VAR 0 11
53621: PUSH
53622: LD_INT 1
53624: ARRAY
53625: GREATEREQUAL
53626: PUSH
53627: LD_VAR 0 10
53631: PPUSH
53632: LD_INT 2
53634: PPUSH
53635: CALL_OW 275
53639: PUSH
53640: LD_VAR 0 11
53644: PUSH
53645: LD_INT 2
53647: ARRAY
53648: GREATEREQUAL
53649: AND
53650: PUSH
53651: LD_VAR 0 10
53655: PPUSH
53656: LD_INT 3
53658: PPUSH
53659: CALL_OW 275
53663: PUSH
53664: LD_VAR 0 11
53668: PUSH
53669: LD_INT 3
53671: ARRAY
53672: GREATEREQUAL
53673: AND
53674: NOT
53675: IFFALSE 53679
// exit ;
53677: GO 54266
// if GetBType ( depot ) = b_depot then
53679: LD_VAR 0 1
53683: PPUSH
53684: CALL_OW 266
53688: PUSH
53689: LD_INT 0
53691: EQUAL
53692: IFFALSE 53704
// dist := 28 else
53694: LD_ADDR_VAR 0 14
53698: PUSH
53699: LD_INT 28
53701: ST_TO_ADDR
53702: GO 53712
// dist := 36 ;
53704: LD_ADDR_VAR 0 14
53708: PUSH
53709: LD_INT 36
53711: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53712: LD_VAR 0 1
53716: PPUSH
53717: LD_VAR 0 3
53721: PPUSH
53722: LD_VAR 0 4
53726: PPUSH
53727: CALL_OW 297
53731: PUSH
53732: LD_VAR 0 14
53736: GREATER
53737: IFFALSE 53741
// exit ;
53739: GO 54266
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53741: LD_ADDR_VAR 0 12
53745: PUSH
53746: LD_VAR 0 2
53750: PPUSH
53751: LD_VAR 0 3
53755: PPUSH
53756: LD_VAR 0 4
53760: PPUSH
53761: LD_VAR 0 5
53765: PPUSH
53766: LD_VAR 0 1
53770: PPUSH
53771: CALL_OW 248
53775: PPUSH
53776: LD_INT 0
53778: PPUSH
53779: CALL 54271 0 6
53783: ST_TO_ADDR
// if not hexes then
53784: LD_VAR 0 12
53788: NOT
53789: IFFALSE 53793
// exit ;
53791: GO 54266
// hex := GetHexInfo ( x , y ) ;
53793: LD_ADDR_VAR 0 15
53797: PUSH
53798: LD_VAR 0 3
53802: PPUSH
53803: LD_VAR 0 4
53807: PPUSH
53808: CALL_OW 546
53812: ST_TO_ADDR
// if hex [ 1 ] then
53813: LD_VAR 0 15
53817: PUSH
53818: LD_INT 1
53820: ARRAY
53821: IFFALSE 53825
// exit ;
53823: GO 54266
// height := hex [ 2 ] ;
53825: LD_ADDR_VAR 0 13
53829: PUSH
53830: LD_VAR 0 15
53834: PUSH
53835: LD_INT 2
53837: ARRAY
53838: ST_TO_ADDR
// for i = 1 to hexes do
53839: LD_ADDR_VAR 0 7
53843: PUSH
53844: DOUBLE
53845: LD_INT 1
53847: DEC
53848: ST_TO_ADDR
53849: LD_VAR 0 12
53853: PUSH
53854: FOR_TO
53855: IFFALSE 54185
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53857: LD_VAR 0 12
53861: PUSH
53862: LD_VAR 0 7
53866: ARRAY
53867: PUSH
53868: LD_INT 1
53870: ARRAY
53871: PPUSH
53872: LD_VAR 0 12
53876: PUSH
53877: LD_VAR 0 7
53881: ARRAY
53882: PUSH
53883: LD_INT 2
53885: ARRAY
53886: PPUSH
53887: CALL_OW 488
53891: NOT
53892: PUSH
53893: LD_VAR 0 12
53897: PUSH
53898: LD_VAR 0 7
53902: ARRAY
53903: PUSH
53904: LD_INT 1
53906: ARRAY
53907: PPUSH
53908: LD_VAR 0 12
53912: PUSH
53913: LD_VAR 0 7
53917: ARRAY
53918: PUSH
53919: LD_INT 2
53921: ARRAY
53922: PPUSH
53923: CALL_OW 428
53927: PUSH
53928: LD_INT 0
53930: GREATER
53931: OR
53932: PUSH
53933: LD_VAR 0 12
53937: PUSH
53938: LD_VAR 0 7
53942: ARRAY
53943: PUSH
53944: LD_INT 1
53946: ARRAY
53947: PPUSH
53948: LD_VAR 0 12
53952: PUSH
53953: LD_VAR 0 7
53957: ARRAY
53958: PUSH
53959: LD_INT 2
53961: ARRAY
53962: PPUSH
53963: CALL_OW 351
53967: OR
53968: IFFALSE 53974
// exit ;
53970: POP
53971: POP
53972: GO 54266
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53974: LD_ADDR_VAR 0 8
53978: PUSH
53979: LD_VAR 0 12
53983: PUSH
53984: LD_VAR 0 7
53988: ARRAY
53989: PUSH
53990: LD_INT 1
53992: ARRAY
53993: PPUSH
53994: LD_VAR 0 12
53998: PUSH
53999: LD_VAR 0 7
54003: ARRAY
54004: PUSH
54005: LD_INT 2
54007: ARRAY
54008: PPUSH
54009: CALL_OW 546
54013: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54014: LD_VAR 0 8
54018: PUSH
54019: LD_INT 1
54021: ARRAY
54022: PUSH
54023: LD_VAR 0 8
54027: PUSH
54028: LD_INT 2
54030: ARRAY
54031: PUSH
54032: LD_VAR 0 13
54036: PUSH
54037: LD_INT 2
54039: PLUS
54040: GREATER
54041: OR
54042: PUSH
54043: LD_VAR 0 8
54047: PUSH
54048: LD_INT 2
54050: ARRAY
54051: PUSH
54052: LD_VAR 0 13
54056: PUSH
54057: LD_INT 2
54059: MINUS
54060: LESS
54061: OR
54062: PUSH
54063: LD_VAR 0 8
54067: PUSH
54068: LD_INT 3
54070: ARRAY
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: LD_INT 8
54077: PUSH
54078: LD_INT 9
54080: PUSH
54081: LD_INT 10
54083: PUSH
54084: LD_INT 11
54086: PUSH
54087: LD_INT 12
54089: PUSH
54090: LD_INT 13
54092: PUSH
54093: LD_INT 16
54095: PUSH
54096: LD_INT 17
54098: PUSH
54099: LD_INT 18
54101: PUSH
54102: LD_INT 19
54104: PUSH
54105: LD_INT 20
54107: PUSH
54108: LD_INT 21
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: IN
54126: NOT
54127: OR
54128: PUSH
54129: LD_VAR 0 8
54133: PUSH
54134: LD_INT 5
54136: ARRAY
54137: NOT
54138: OR
54139: PUSH
54140: LD_VAR 0 8
54144: PUSH
54145: LD_INT 6
54147: ARRAY
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: LD_INT 7
54157: PUSH
54158: LD_INT 9
54160: PUSH
54161: LD_INT 10
54163: PUSH
54164: LD_INT 11
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: IN
54175: NOT
54176: OR
54177: IFFALSE 54183
// exit ;
54179: POP
54180: POP
54181: GO 54266
// end ;
54183: GO 53854
54185: POP
54186: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54187: LD_VAR 0 9
54191: PPUSH
54192: LD_VAR 0 3
54196: PPUSH
54197: LD_VAR 0 4
54201: PPUSH
54202: LD_INT 20
54204: PPUSH
54205: CALL 46189 0 4
54209: PUSH
54210: LD_INT 4
54212: ARRAY
54213: IFFALSE 54217
// exit ;
54215: GO 54266
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54217: LD_VAR 0 2
54221: PUSH
54222: LD_INT 29
54224: PUSH
54225: LD_INT 30
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: IN
54232: PUSH
54233: LD_VAR 0 3
54237: PPUSH
54238: LD_VAR 0 4
54242: PPUSH
54243: LD_VAR 0 9
54247: PPUSH
54248: CALL_OW 440
54252: NOT
54253: AND
54254: IFFALSE 54258
// exit ;
54256: GO 54266
// result := true ;
54258: LD_ADDR_VAR 0 6
54262: PUSH
54263: LD_INT 1
54265: ST_TO_ADDR
// end ;
54266: LD_VAR 0 6
54270: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54271: LD_INT 0
54273: PPUSH
54274: PPUSH
54275: PPUSH
54276: PPUSH
54277: PPUSH
54278: PPUSH
54279: PPUSH
54280: PPUSH
54281: PPUSH
54282: PPUSH
54283: PPUSH
54284: PPUSH
54285: PPUSH
54286: PPUSH
54287: PPUSH
54288: PPUSH
54289: PPUSH
54290: PPUSH
54291: PPUSH
54292: PPUSH
54293: PPUSH
54294: PPUSH
54295: PPUSH
54296: PPUSH
54297: PPUSH
54298: PPUSH
54299: PPUSH
54300: PPUSH
54301: PPUSH
54302: PPUSH
54303: PPUSH
54304: PPUSH
54305: PPUSH
54306: PPUSH
54307: PPUSH
54308: PPUSH
54309: PPUSH
54310: PPUSH
54311: PPUSH
54312: PPUSH
54313: PPUSH
54314: PPUSH
54315: PPUSH
54316: PPUSH
54317: PPUSH
54318: PPUSH
54319: PPUSH
54320: PPUSH
54321: PPUSH
54322: PPUSH
54323: PPUSH
54324: PPUSH
54325: PPUSH
54326: PPUSH
54327: PPUSH
54328: PPUSH
54329: PPUSH
54330: PPUSH
// result = [ ] ;
54331: LD_ADDR_VAR 0 7
54335: PUSH
54336: EMPTY
54337: ST_TO_ADDR
// temp_list = [ ] ;
54338: LD_ADDR_VAR 0 9
54342: PUSH
54343: EMPTY
54344: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54345: LD_VAR 0 4
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: LD_INT 3
54361: PUSH
54362: LD_INT 4
54364: PUSH
54365: LD_INT 5
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: IN
54376: NOT
54377: PUSH
54378: LD_VAR 0 1
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: IN
54393: PUSH
54394: LD_VAR 0 5
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: LD_INT 2
54404: PUSH
54405: LD_INT 3
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: LIST
54412: IN
54413: NOT
54414: AND
54415: OR
54416: IFFALSE 54420
// exit ;
54418: GO 72811
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54420: LD_VAR 0 1
54424: PUSH
54425: LD_INT 6
54427: PUSH
54428: LD_INT 7
54430: PUSH
54431: LD_INT 8
54433: PUSH
54434: LD_INT 13
54436: PUSH
54437: LD_INT 12
54439: PUSH
54440: LD_INT 15
54442: PUSH
54443: LD_INT 11
54445: PUSH
54446: LD_INT 14
54448: PUSH
54449: LD_INT 10
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: IN
54463: IFFALSE 54473
// btype = b_lab ;
54465: LD_ADDR_VAR 0 1
54469: PUSH
54470: LD_INT 6
54472: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54473: LD_VAR 0 6
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: IN
54492: NOT
54493: PUSH
54494: LD_VAR 0 1
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: LD_INT 3
54510: PUSH
54511: LD_INT 6
54513: PUSH
54514: LD_INT 36
54516: PUSH
54517: LD_INT 4
54519: PUSH
54520: LD_INT 5
54522: PUSH
54523: LD_INT 31
54525: PUSH
54526: LD_INT 32
54528: PUSH
54529: LD_INT 33
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: IN
54545: NOT
54546: PUSH
54547: LD_VAR 0 6
54551: PUSH
54552: LD_INT 1
54554: EQUAL
54555: AND
54556: OR
54557: PUSH
54558: LD_VAR 0 1
54562: PUSH
54563: LD_INT 2
54565: PUSH
54566: LD_INT 3
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: IN
54573: NOT
54574: PUSH
54575: LD_VAR 0 6
54579: PUSH
54580: LD_INT 2
54582: EQUAL
54583: AND
54584: OR
54585: IFFALSE 54595
// mode = 0 ;
54587: LD_ADDR_VAR 0 6
54591: PUSH
54592: LD_INT 0
54594: ST_TO_ADDR
// case mode of 0 :
54595: LD_VAR 0 6
54599: PUSH
54600: LD_INT 0
54602: DOUBLE
54603: EQUAL
54604: IFTRUE 54608
54606: GO 66061
54608: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54609: LD_ADDR_VAR 0 11
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: LD_INT 2
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: LD_INT 3
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: LD_INT 3
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54802: LD_ADDR_VAR 0 12
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 2
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 2
54925: NEG
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 2
54948: NEG
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 3
54959: NEG
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 3
54970: NEG
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54998: LD_ADDR_VAR 0 13
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: LD_INT 2
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 2
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 2
55133: NEG
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 2
55145: NEG
55146: PUSH
55147: LD_INT 3
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 3
55157: NEG
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 3
55169: NEG
55170: PUSH
55171: LD_INT 3
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55197: LD_ADDR_VAR 0 14
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: NEG
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: LD_INT 2
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 2
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: LD_INT 3
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: LD_INT 3
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: LD_INT 2
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55393: LD_ADDR_VAR 0 15
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: NEG
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 2
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 2
55539: PUSH
55540: LD_INT 1
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 3
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 3
55560: PUSH
55561: LD_INT 1
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55586: LD_ADDR_VAR 0 16
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: LD_INT 2
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: LD_INT 2
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: LD_INT 2
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 2
55709: NEG
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: LD_INT 2
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 3
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 3
55743: PUSH
55744: LD_INT 3
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: LD_INT 3
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55779: LD_ADDR_VAR 0 17
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 1
55837: NEG
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: LD_INT 2
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 2
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 2
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 2
55914: PUSH
55915: LD_INT 2
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 2
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 2
55978: NEG
55979: PUSH
55980: LD_INT 2
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56009: LD_ADDR_VAR 0 18
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: LD_INT 2
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: LD_INT 2
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: LD_INT 2
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 2
56208: NEG
56209: PUSH
56210: LD_INT 2
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56239: LD_ADDR_VAR 0 19
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: LD_INT 2
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: LD_INT 2
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 2
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 2
56374: PUSH
56375: LD_INT 2
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 2
56415: NEG
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 2
56438: NEG
56439: PUSH
56440: LD_INT 2
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56469: LD_ADDR_VAR 0 20
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: LD_INT 0
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: LD_INT 2
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 2
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 2
56604: PUSH
56605: LD_INT 2
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: LD_INT 2
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: LD_INT 1
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 2
56645: NEG
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: NEG
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: NEG
56669: PUSH
56670: LD_INT 2
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56699: LD_ADDR_VAR 0 21
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: LD_INT 2
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: LD_INT 2
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 2
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 2
56834: PUSH
56835: LD_INT 2
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: LD_INT 2
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: LD_INT 2
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 2
56886: NEG
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 2
56898: NEG
56899: PUSH
56900: LD_INT 2
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56929: LD_ADDR_VAR 0 22
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: NEG
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 2
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 2
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 2
57064: PUSH
57065: LD_INT 2
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: LD_INT 2
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 2
57105: NEG
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 2
57116: NEG
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 2
57128: NEG
57129: PUSH
57130: LD_INT 2
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57159: LD_ADDR_VAR 0 23
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: LD_INT 2
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 2
57294: PUSH
57295: LD_INT 2
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: LD_INT 2
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 2
57358: NEG
57359: PUSH
57360: LD_INT 2
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 2
57370: NEG
57371: PUSH
57372: LD_INT 3
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: LD_INT 3
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: PUSH
57395: LD_INT 2
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 2
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57439: LD_ADDR_VAR 0 24
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 1
57497: NEG
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: LD_INT 2
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: LD_INT 2
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 2
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 2
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 2
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 2
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 2
57615: NEG
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 2
57638: NEG
57639: PUSH
57640: LD_INT 2
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 3
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 3
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57715: LD_ADDR_VAR 0 25
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 1
57784: NEG
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: LD_INT 2
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 2
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 2
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: PUSH
57841: LD_INT 1
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 2
57850: PUSH
57851: LD_INT 2
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 2
57891: NEG
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 2
57902: NEG
57903: PUSH
57904: LD_INT 1
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 2
57914: NEG
57915: PUSH
57916: LD_INT 2
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 3
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 3
57936: PUSH
57937: LD_INT 2
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 2
57946: PUSH
57947: LD_INT 3
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: LD_INT 3
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57989: LD_ADDR_VAR 0 26
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: LD_INT 2
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: LD_INT 2
58085: NEG
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 2
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: LD_INT 1
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 2
58124: PUSH
58125: LD_INT 2
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: LD_INT 2
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: LD_INT 2
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 1
58154: NEG
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 2
58165: NEG
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 2
58176: NEG
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 2
58188: NEG
58189: PUSH
58190: LD_INT 2
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 2
58200: PUSH
58201: LD_INT 3
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: LD_INT 3
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: LD_INT 2
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 2
58231: NEG
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58265: LD_ADDR_VAR 0 27
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: LD_INT 1
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: LD_INT 1
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: LD_INT 2
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: LD_INT 2
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 2
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 2
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: LD_INT 2
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: LD_INT 2
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: LD_INT 2
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 2
58441: NEG
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: LD_INT 1
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 2
58464: NEG
58465: PUSH
58466: LD_INT 2
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: NEG
58477: PUSH
58478: LD_INT 2
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 2
58487: NEG
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 3
58498: NEG
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 3
58510: NEG
58511: PUSH
58512: LD_INT 2
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58545: LD_ADDR_VAR 0 28
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: LD_INT 2
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: LD_INT 2
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 1
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 2
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: LD_INT 2
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: LD_INT 2
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: LD_INT 2
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 2
58732: NEG
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: NEG
58745: PUSH
58746: LD_INT 2
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 2
58756: NEG
58757: PUSH
58758: LD_INT 3
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 1
58768: NEG
58769: PUSH
58770: LD_INT 3
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 3
58780: NEG
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 3
58792: NEG
58793: PUSH
58794: LD_INT 2
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58827: LD_ADDR_VAR 0 29
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: NEG
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: LD_INT 1
58900: NEG
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: LD_INT 2
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: LD_INT 2
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: LD_INT 1
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 2
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 2
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: LD_INT 2
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 0
58972: PUSH
58973: LD_INT 2
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 2
58993: NEG
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 2
59005: NEG
59006: PUSH
59007: LD_INT 2
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 2
59017: NEG
59018: PUSH
59019: LD_INT 3
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 2
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 3
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: LD_INT 3
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 1
59060: NEG
59061: PUSH
59062: LD_INT 2
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 3
59071: NEG
59072: PUSH
59073: LD_INT 2
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59106: LD_ADDR_VAR 0 30
59110: PUSH
59111: LD_INT 0
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: LD_INT 0
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 1
59144: PUSH
59145: LD_INT 1
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 0
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 1
59164: NEG
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 1
59187: NEG
59188: PUSH
59189: LD_INT 2
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: LD_INT 2
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 2
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 2
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 2
59241: PUSH
59242: LD_INT 2
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 2
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: NEG
59262: PUSH
59263: LD_INT 1
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 2
59272: NEG
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 2
59283: NEG
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: NEG
59296: PUSH
59297: LD_INT 3
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: LD_INT 2
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 3
59318: PUSH
59319: LD_INT 2
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 2
59328: PUSH
59329: LD_INT 3
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 2
59338: NEG
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 3
59349: NEG
59350: PUSH
59351: LD_INT 1
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59384: LD_ADDR_VAR 0 31
59388: PUSH
59389: LD_INT 0
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: LD_INT 2
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 2
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 2
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 2
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: LD_INT 2
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: LD_INT 2
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 2
59549: NEG
59550: PUSH
59551: LD_INT 1
59553: NEG
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: LD_INT 2
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 2
59573: NEG
59574: PUSH
59575: LD_INT 3
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 2
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 3
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: LD_INT 3
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: LD_INT 2
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 3
59627: NEG
59628: PUSH
59629: LD_INT 2
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59662: LD_ADDR_VAR 0 32
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 1
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: LD_INT 1
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: LD_INT 1
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: LD_INT 1
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 1
59743: NEG
59744: PUSH
59745: LD_INT 2
59747: NEG
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: LD_INT 2
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 1
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 2
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 2
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: LD_INT 2
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: LD_INT 1
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 2
59839: NEG
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: LD_INT 3
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 3
59874: PUSH
59875: LD_INT 2
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 2
59884: PUSH
59885: LD_INT 3
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 2
59894: NEG
59895: PUSH
59896: LD_INT 1
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 3
59905: NEG
59906: PUSH
59907: LD_INT 1
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59940: LD_ADDR_VAR 0 33
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 1
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: LD_INT 1
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 1
59998: NEG
59999: PUSH
60000: LD_INT 0
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: LD_INT 1
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 1
60021: NEG
60022: PUSH
60023: LD_INT 2
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 2
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 2
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: LD_INT 2
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 0
60074: PUSH
60075: LD_INT 2
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 1
60084: NEG
60085: PUSH
60086: LD_INT 1
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 2
60095: NEG
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 2
60106: NEG
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 2
60118: NEG
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 2
60130: NEG
60131: PUSH
60132: LD_INT 3
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 2
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 3
60153: PUSH
60154: LD_INT 1
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 1
60163: PUSH
60164: LD_INT 3
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 1
60173: NEG
60174: PUSH
60175: LD_INT 2
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 3
60184: NEG
60185: PUSH
60186: LD_INT 2
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60219: LD_ADDR_VAR 0 34
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: LD_INT 1
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: LD_INT 1
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: LD_INT 1
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 1
60323: PUSH
60324: LD_INT 1
60326: NEG
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 2
60344: PUSH
60345: LD_INT 2
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: LD_INT 2
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 1
60364: NEG
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 2
60386: NEG
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 2
60398: NEG
60399: PUSH
60400: LD_INT 2
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 1
60410: NEG
60411: PUSH
60412: LD_INT 3
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: LD_INT 2
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 3
60433: PUSH
60434: LD_INT 2
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: PUSH
60444: LD_INT 3
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: LD_INT 1
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 3
60464: NEG
60465: PUSH
60466: LD_INT 1
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60499: LD_ADDR_VAR 0 35
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 0
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: LD_INT 1
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 2
60580: PUSH
60581: LD_INT 1
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 2
60590: NEG
60591: PUSH
60592: LD_INT 1
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60611: LD_ADDR_VAR 0 36
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: LD_INT 1
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 1
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 1
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: LD_INT 1
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: NEG
60693: PUSH
60694: LD_INT 2
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 1
60704: PUSH
60705: LD_INT 2
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60723: LD_ADDR_VAR 0 37
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: LD_INT 1
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 1
60781: NEG
60782: PUSH
60783: LD_INT 0
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 1
60792: NEG
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 1
60804: PUSH
60805: LD_INT 1
60807: NEG
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: NEG
60816: PUSH
60817: LD_INT 1
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60835: LD_ADDR_VAR 0 38
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: LD_INT 1
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: LD_INT 1
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 1
60904: NEG
60905: PUSH
60906: LD_INT 1
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 2
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 2
60926: NEG
60927: PUSH
60928: LD_INT 1
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60947: LD_ADDR_VAR 0 39
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: LD_INT 1
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 1
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: LD_INT 1
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 1
61005: NEG
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 1
61016: NEG
61017: PUSH
61018: LD_INT 1
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: LD_INT 2
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61059: LD_ADDR_VAR 0 40
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 1
61097: PUSH
61098: LD_INT 1
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 1
61117: NEG
61118: PUSH
61119: LD_INT 0
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 1
61128: NEG
61129: PUSH
61130: LD_INT 1
61132: NEG
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 1
61140: PUSH
61141: LD_INT 1
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 1
61151: NEG
61152: PUSH
61153: LD_INT 1
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61171: LD_ADDR_VAR 0 41
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: LD_INT 1
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: LD_INT 0
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 1
61209: PUSH
61210: LD_INT 1
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: LD_INT 1
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 1
61252: NEG
61253: PUSH
61254: LD_INT 2
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 1
61264: PUSH
61265: LD_INT 1
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 2
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 2
61285: PUSH
61286: LD_INT 1
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 2
61295: PUSH
61296: LD_INT 2
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: PUSH
61306: LD_INT 2
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 2
61326: NEG
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 2
61337: NEG
61338: PUSH
61339: LD_INT 1
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 2
61349: NEG
61350: PUSH
61351: LD_INT 2
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 2
61361: NEG
61362: PUSH
61363: LD_INT 3
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 2
61373: PUSH
61374: LD_INT 1
61376: NEG
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 3
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 3
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 3
61404: PUSH
61405: LD_INT 2
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 3
61414: PUSH
61415: LD_INT 3
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 2
61424: PUSH
61425: LD_INT 3
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 2
61434: NEG
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 3
61445: NEG
61446: PUSH
61447: LD_INT 0
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 3
61456: NEG
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 3
61468: NEG
61469: PUSH
61470: LD_INT 2
61472: NEG
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 3
61480: NEG
61481: PUSH
61482: LD_INT 3
61484: NEG
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61521: LD_ADDR_VAR 0 42
61525: PUSH
61526: LD_INT 0
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 1
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: NEG
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: NEG
61591: PUSH
61592: LD_INT 1
61594: NEG
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 1
61602: NEG
61603: PUSH
61604: LD_INT 2
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: LD_INT 2
61617: NEG
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 1
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 2
61636: PUSH
61637: LD_INT 1
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 2
61646: PUSH
61647: LD_INT 2
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 1
61656: PUSH
61657: LD_INT 2
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 0
61666: PUSH
61667: LD_INT 2
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 1
61676: NEG
61677: PUSH
61678: LD_INT 1
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 2
61687: NEG
61688: PUSH
61689: LD_INT 1
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 2
61699: NEG
61700: PUSH
61701: LD_INT 2
61703: NEG
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 2
61711: NEG
61712: PUSH
61713: LD_INT 3
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: LD_INT 3
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: LD_INT 3
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: LD_INT 2
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 3
61757: PUSH
61758: LD_INT 2
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 3
61767: PUSH
61768: LD_INT 3
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 2
61777: PUSH
61778: LD_INT 3
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: PUSH
61788: LD_INT 3
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: LD_INT 3
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 1
61807: NEG
61808: PUSH
61809: LD_INT 2
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 3
61818: NEG
61819: PUSH
61820: LD_INT 2
61822: NEG
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 3
61830: NEG
61831: PUSH
61832: LD_INT 3
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61871: LD_ADDR_VAR 0 43
61875: PUSH
61876: LD_INT 0
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 0
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 1
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: LD_INT 1
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: NEG
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 1
61940: NEG
61941: PUSH
61942: LD_INT 1
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: NEG
61953: PUSH
61954: LD_INT 2
61956: NEG
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: LD_INT 2
61967: NEG
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 2
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 2
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 1
62006: PUSH
62007: LD_INT 2
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: LD_INT 2
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 1
62026: NEG
62027: PUSH
62028: LD_INT 1
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 2
62037: NEG
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 2
62048: NEG
62049: PUSH
62050: LD_INT 1
62052: NEG
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: LD_INT 3
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 0
62072: PUSH
62073: LD_INT 3
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 1
62083: PUSH
62084: LD_INT 2
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 2
62094: PUSH
62095: LD_INT 1
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 3
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 3
62115: PUSH
62116: LD_INT 1
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 1
62125: PUSH
62126: LD_INT 3
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: LD_INT 3
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: LD_INT 2
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 2
62156: NEG
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 3
62167: NEG
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 3
62178: NEG
62179: PUSH
62180: LD_INT 1
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62219: LD_ADDR_VAR 0 44
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: LD_INT 1
62239: NEG
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 1
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 1
62277: NEG
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 1
62288: NEG
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 1
62300: NEG
62301: PUSH
62302: LD_INT 2
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 1
62312: PUSH
62313: LD_INT 1
62315: NEG
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 2
62323: PUSH
62324: LD_INT 0
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 2
62333: PUSH
62334: LD_INT 1
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 2
62343: PUSH
62344: LD_INT 2
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 1
62353: PUSH
62354: LD_INT 2
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: NEG
62364: PUSH
62365: LD_INT 1
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 2
62374: NEG
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 2
62385: NEG
62386: PUSH
62387: LD_INT 1
62389: NEG
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 2
62397: NEG
62398: PUSH
62399: LD_INT 2
62401: NEG
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 2
62409: NEG
62410: PUSH
62411: LD_INT 3
62413: NEG
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 2
62421: PUSH
62422: LD_INT 1
62424: NEG
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 3
62432: PUSH
62433: LD_INT 0
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 3
62442: PUSH
62443: LD_INT 1
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 3
62452: PUSH
62453: LD_INT 2
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 3
62462: PUSH
62463: LD_INT 3
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 2
62472: PUSH
62473: LD_INT 3
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 2
62482: NEG
62483: PUSH
62484: LD_INT 1
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 3
62493: NEG
62494: PUSH
62495: LD_INT 0
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 3
62504: NEG
62505: PUSH
62506: LD_INT 1
62508: NEG
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 3
62516: NEG
62517: PUSH
62518: LD_INT 2
62520: NEG
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 3
62528: NEG
62529: PUSH
62530: LD_INT 3
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62569: LD_ADDR_VAR 0 45
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: LD_INT 1
62589: NEG
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 1
62597: PUSH
62598: LD_INT 0
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 1
62607: PUSH
62608: LD_INT 1
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: LD_INT 1
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 1
62627: NEG
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 1
62638: NEG
62639: PUSH
62640: LD_INT 1
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 1
62650: NEG
62651: PUSH
62652: LD_INT 2
62654: NEG
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: LD_INT 2
62665: NEG
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 1
62673: PUSH
62674: LD_INT 1
62676: NEG
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 2
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 2
62694: PUSH
62695: LD_INT 2
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 1
62704: PUSH
62705: LD_INT 2
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: LD_INT 2
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 1
62724: NEG
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 2
62735: NEG
62736: PUSH
62737: LD_INT 1
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 2
62747: NEG
62748: PUSH
62749: LD_INT 2
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 2
62759: NEG
62760: PUSH
62761: LD_INT 3
62763: NEG
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 1
62771: NEG
62772: PUSH
62773: LD_INT 3
62775: NEG
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 0
62783: PUSH
62784: LD_INT 3
62786: NEG
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 1
62794: PUSH
62795: LD_INT 2
62797: NEG
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 3
62805: PUSH
62806: LD_INT 2
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 3
62815: PUSH
62816: LD_INT 3
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 2
62825: PUSH
62826: LD_INT 3
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 1
62835: PUSH
62836: LD_INT 3
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: LD_INT 3
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 1
62855: NEG
62856: PUSH
62857: LD_INT 2
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 3
62866: NEG
62867: PUSH
62868: LD_INT 2
62870: NEG
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 3
62878: NEG
62879: PUSH
62880: LD_INT 3
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62919: LD_ADDR_VAR 0 46
62923: PUSH
62924: LD_INT 0
62926: PUSH
62927: LD_INT 0
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 0
62936: PUSH
62937: LD_INT 1
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 1
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 1
62957: PUSH
62958: LD_INT 1
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 0
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 1
62977: NEG
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: LD_INT 1
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 1
63000: NEG
63001: PUSH
63002: LD_INT 2
63004: NEG
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: LD_INT 2
63015: NEG
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 1
63023: PUSH
63024: LD_INT 1
63026: NEG
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 2
63034: PUSH
63035: LD_INT 0
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 2
63044: PUSH
63045: LD_INT 1
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: LD_INT 2
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 0
63064: PUSH
63065: LD_INT 2
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: NEG
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 2
63085: NEG
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 2
63096: NEG
63097: PUSH
63098: LD_INT 1
63100: NEG
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 1
63108: NEG
63109: PUSH
63110: LD_INT 3
63112: NEG
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 0
63120: PUSH
63121: LD_INT 3
63123: NEG
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: LD_INT 2
63134: NEG
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 2
63142: PUSH
63143: LD_INT 1
63145: NEG
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 3
63153: PUSH
63154: LD_INT 0
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 3
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 1
63173: PUSH
63174: LD_INT 3
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: LD_INT 3
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 1
63193: NEG
63194: PUSH
63195: LD_INT 2
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 2
63204: NEG
63205: PUSH
63206: LD_INT 1
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 3
63215: NEG
63216: PUSH
63217: LD_INT 0
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 3
63226: NEG
63227: PUSH
63228: LD_INT 1
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63267: LD_ADDR_VAR 0 47
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: LD_INT 0
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: LD_INT 1
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 1
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 1
63305: PUSH
63306: LD_INT 1
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 1
63325: NEG
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 1
63336: NEG
63337: PUSH
63338: LD_INT 1
63340: NEG
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 1
63348: NEG
63349: PUSH
63350: LD_INT 2
63352: NEG
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 0
63360: PUSH
63361: LD_INT 2
63363: NEG
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 1
63371: PUSH
63372: LD_INT 1
63374: NEG
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 2
63382: NEG
63383: PUSH
63384: LD_INT 1
63386: NEG
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 2
63394: NEG
63395: PUSH
63396: LD_INT 2
63398: NEG
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63418: LD_ADDR_VAR 0 48
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 0
63435: PUSH
63436: LD_INT 1
63438: NEG
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 1
63446: PUSH
63447: LD_INT 0
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 1
63456: PUSH
63457: LD_INT 1
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 0
63466: PUSH
63467: LD_INT 1
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 1
63476: NEG
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 1
63487: NEG
63488: PUSH
63489: LD_INT 1
63491: NEG
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 1
63499: NEG
63500: PUSH
63501: LD_INT 2
63503: NEG
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: LD_INT 2
63514: NEG
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 1
63522: PUSH
63523: LD_INT 1
63525: NEG
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 2
63533: PUSH
63534: LD_INT 0
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 2
63543: PUSH
63544: LD_INT 1
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63565: LD_ADDR_VAR 0 49
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 1
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 1
63603: PUSH
63604: LD_INT 1
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 0
63613: PUSH
63614: LD_INT 1
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 1
63623: NEG
63624: PUSH
63625: LD_INT 0
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 1
63634: NEG
63635: PUSH
63636: LD_INT 1
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 1
63646: PUSH
63647: LD_INT 1
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 2
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 2
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 2
63677: PUSH
63678: LD_INT 2
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 1
63687: PUSH
63688: LD_INT 2
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63709: LD_ADDR_VAR 0 50
63713: PUSH
63714: LD_INT 0
63716: PUSH
63717: LD_INT 0
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: LD_INT 1
63729: NEG
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 1
63737: PUSH
63738: LD_INT 0
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 1
63747: PUSH
63748: LD_INT 1
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 0
63757: PUSH
63758: LD_INT 1
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 1
63767: NEG
63768: PUSH
63769: LD_INT 0
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 1
63778: NEG
63779: PUSH
63780: LD_INT 1
63782: NEG
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 2
63790: PUSH
63791: LD_INT 1
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 2
63800: PUSH
63801: LD_INT 2
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: LD_INT 2
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: LD_INT 2
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 1
63830: NEG
63831: PUSH
63832: LD_INT 1
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63853: LD_ADDR_VAR 0 51
63857: PUSH
63858: LD_INT 0
63860: PUSH
63861: LD_INT 0
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 0
63870: PUSH
63871: LD_INT 1
63873: NEG
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 1
63881: PUSH
63882: LD_INT 0
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 1
63891: PUSH
63892: LD_INT 1
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 0
63901: PUSH
63902: LD_INT 1
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 1
63911: NEG
63912: PUSH
63913: LD_INT 0
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 1
63922: NEG
63923: PUSH
63924: LD_INT 1
63926: NEG
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 1
63934: PUSH
63935: LD_INT 2
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 0
63944: PUSH
63945: LD_INT 2
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 1
63954: NEG
63955: PUSH
63956: LD_INT 1
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 2
63965: NEG
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 2
63976: NEG
63977: PUSH
63978: LD_INT 1
63980: NEG
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64000: LD_ADDR_VAR 0 52
64004: PUSH
64005: LD_INT 0
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 1
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 1
64038: PUSH
64039: LD_INT 1
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: LD_INT 1
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: LD_INT 0
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 1
64069: NEG
64070: PUSH
64071: LD_INT 1
64073: NEG
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 1
64081: NEG
64082: PUSH
64083: LD_INT 2
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 2
64104: NEG
64105: PUSH
64106: LD_INT 0
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 2
64115: NEG
64116: PUSH
64117: LD_INT 1
64119: NEG
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 2
64127: NEG
64128: PUSH
64129: LD_INT 2
64131: NEG
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64151: LD_ADDR_VAR 0 53
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 0
64168: PUSH
64169: LD_INT 1
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 1
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 1
64189: PUSH
64190: LD_INT 1
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: LD_INT 1
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 1
64209: NEG
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 1
64220: NEG
64221: PUSH
64222: LD_INT 1
64224: NEG
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 1
64232: NEG
64233: PUSH
64234: LD_INT 2
64236: NEG
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 0
64244: PUSH
64245: LD_INT 2
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 1
64255: PUSH
64256: LD_INT 1
64258: NEG
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 2
64266: PUSH
64267: LD_INT 0
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 2
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 2
64286: PUSH
64287: LD_INT 2
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 1
64296: PUSH
64297: LD_INT 2
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: LD_INT 2
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: LD_INT 1
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 2
64327: NEG
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 2
64338: NEG
64339: PUSH
64340: LD_INT 1
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 2
64350: NEG
64351: PUSH
64352: LD_INT 2
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64381: LD_ADDR_VAR 0 54
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: LD_INT 1
64401: NEG
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 1
64409: PUSH
64410: LD_INT 0
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 1
64419: PUSH
64420: LD_INT 1
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 1
64439: NEG
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: NEG
64451: PUSH
64452: LD_INT 1
64454: NEG
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 1
64462: NEG
64463: PUSH
64464: LD_INT 2
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: LD_INT 2
64477: NEG
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 1
64485: PUSH
64486: LD_INT 1
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 2
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 2
64506: PUSH
64507: LD_INT 1
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 2
64516: PUSH
64517: LD_INT 2
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 1
64526: PUSH
64527: LD_INT 2
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: LD_INT 2
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: NEG
64547: PUSH
64548: LD_INT 1
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 2
64557: NEG
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 2
64568: NEG
64569: PUSH
64570: LD_INT 1
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 2
64580: NEG
64581: PUSH
64582: LD_INT 2
64584: NEG
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64611: LD_ADDR_VAR 0 55
64615: PUSH
64616: LD_INT 0
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 0
64628: PUSH
64629: LD_INT 1
64631: NEG
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 1
64639: PUSH
64640: LD_INT 0
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 1
64649: PUSH
64650: LD_INT 1
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: LD_INT 1
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 1
64669: NEG
64670: PUSH
64671: LD_INT 0
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 1
64680: NEG
64681: PUSH
64682: LD_INT 1
64684: NEG
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 1
64692: NEG
64693: PUSH
64694: LD_INT 2
64696: NEG
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: LD_INT 2
64707: NEG
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 1
64715: PUSH
64716: LD_INT 1
64718: NEG
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 2
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 2
64736: PUSH
64737: LD_INT 1
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 2
64746: PUSH
64747: LD_INT 2
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 1
64756: PUSH
64757: LD_INT 2
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: LD_INT 2
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 1
64776: NEG
64777: PUSH
64778: LD_INT 1
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 2
64787: NEG
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 2
64798: NEG
64799: PUSH
64800: LD_INT 1
64802: NEG
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 2
64810: NEG
64811: PUSH
64812: LD_INT 2
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64841: LD_ADDR_VAR 0 56
64845: PUSH
64846: LD_INT 0
64848: PUSH
64849: LD_INT 0
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: LD_INT 1
64861: NEG
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 1
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 1
64879: PUSH
64880: LD_INT 1
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 0
64889: PUSH
64890: LD_INT 1
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 1
64899: NEG
64900: PUSH
64901: LD_INT 0
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 1
64910: NEG
64911: PUSH
64912: LD_INT 1
64914: NEG
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 1
64922: NEG
64923: PUSH
64924: LD_INT 2
64926: NEG
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: LD_INT 2
64937: NEG
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 1
64945: PUSH
64946: LD_INT 1
64948: NEG
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 2
64956: PUSH
64957: LD_INT 0
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 2
64966: PUSH
64967: LD_INT 1
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 2
64976: PUSH
64977: LD_INT 2
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 1
64986: PUSH
64987: LD_INT 2
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 0
64996: PUSH
64997: LD_INT 2
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 1
65006: NEG
65007: PUSH
65008: LD_INT 1
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 2
65017: NEG
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 2
65028: NEG
65029: PUSH
65030: LD_INT 1
65032: NEG
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 2
65040: NEG
65041: PUSH
65042: LD_INT 2
65044: NEG
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65071: LD_ADDR_VAR 0 57
65075: PUSH
65076: LD_INT 0
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 0
65088: PUSH
65089: LD_INT 1
65091: NEG
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 1
65099: PUSH
65100: LD_INT 0
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 1
65109: PUSH
65110: LD_INT 1
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: LD_INT 1
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 1
65129: NEG
65130: PUSH
65131: LD_INT 0
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: LD_INT 1
65144: NEG
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 1
65152: NEG
65153: PUSH
65154: LD_INT 2
65156: NEG
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: LD_INT 2
65167: NEG
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 1
65175: PUSH
65176: LD_INT 1
65178: NEG
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 2
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 2
65196: PUSH
65197: LD_INT 1
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 2
65206: PUSH
65207: LD_INT 2
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 1
65216: PUSH
65217: LD_INT 2
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 0
65226: PUSH
65227: LD_INT 2
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 1
65236: NEG
65237: PUSH
65238: LD_INT 1
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 2
65247: NEG
65248: PUSH
65249: LD_INT 0
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 2
65258: NEG
65259: PUSH
65260: LD_INT 1
65262: NEG
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 2
65270: NEG
65271: PUSH
65272: LD_INT 2
65274: NEG
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65301: LD_ADDR_VAR 0 58
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: LD_INT 0
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 0
65318: PUSH
65319: LD_INT 1
65321: NEG
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 1
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 1
65339: PUSH
65340: LD_INT 1
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 0
65349: PUSH
65350: LD_INT 1
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 1
65370: NEG
65371: PUSH
65372: LD_INT 1
65374: NEG
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 1
65382: NEG
65383: PUSH
65384: LD_INT 2
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: LD_INT 2
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 2
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 2
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 2
65436: PUSH
65437: LD_INT 2
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 1
65446: PUSH
65447: LD_INT 2
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 0
65456: PUSH
65457: LD_INT 2
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 1
65466: NEG
65467: PUSH
65468: LD_INT 1
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 2
65477: NEG
65478: PUSH
65479: LD_INT 0
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 2
65488: NEG
65489: PUSH
65490: LD_INT 1
65492: NEG
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 2
65500: NEG
65501: PUSH
65502: LD_INT 2
65504: NEG
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65531: LD_ADDR_VAR 0 59
65535: PUSH
65536: LD_INT 0
65538: PUSH
65539: LD_INT 0
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 0
65548: PUSH
65549: LD_INT 1
65551: NEG
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 1
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 1
65569: PUSH
65570: LD_INT 1
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 0
65579: PUSH
65580: LD_INT 1
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 1
65589: NEG
65590: PUSH
65591: LD_INT 0
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 1
65600: NEG
65601: PUSH
65602: LD_INT 1
65604: NEG
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65619: LD_ADDR_VAR 0 60
65623: PUSH
65624: LD_INT 0
65626: PUSH
65627: LD_INT 0
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 0
65636: PUSH
65637: LD_INT 1
65639: NEG
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 1
65647: PUSH
65648: LD_INT 0
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 1
65657: PUSH
65658: LD_INT 1
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 0
65667: PUSH
65668: LD_INT 1
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 1
65677: NEG
65678: PUSH
65679: LD_INT 0
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 1
65688: NEG
65689: PUSH
65690: LD_INT 1
65692: NEG
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65707: LD_ADDR_VAR 0 61
65711: PUSH
65712: LD_INT 0
65714: PUSH
65715: LD_INT 0
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 0
65724: PUSH
65725: LD_INT 1
65727: NEG
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 1
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 1
65745: PUSH
65746: LD_INT 1
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: LD_INT 1
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 1
65765: NEG
65766: PUSH
65767: LD_INT 0
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 1
65776: NEG
65777: PUSH
65778: LD_INT 1
65780: NEG
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65795: LD_ADDR_VAR 0 62
65799: PUSH
65800: LD_INT 0
65802: PUSH
65803: LD_INT 0
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: LD_INT 1
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: LD_INT 1
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: LD_INT 1
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 1
65853: NEG
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 1
65864: NEG
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65883: LD_ADDR_VAR 0 63
65887: PUSH
65888: LD_INT 0
65890: PUSH
65891: LD_INT 0
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 0
65900: PUSH
65901: LD_INT 1
65903: NEG
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 1
65911: PUSH
65912: LD_INT 0
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 1
65921: PUSH
65922: LD_INT 1
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 0
65931: PUSH
65932: LD_INT 1
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 1
65941: NEG
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 1
65952: NEG
65953: PUSH
65954: LD_INT 1
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65971: LD_ADDR_VAR 0 64
65975: PUSH
65976: LD_INT 0
65978: PUSH
65979: LD_INT 0
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 0
65988: PUSH
65989: LD_INT 1
65991: NEG
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 1
65999: PUSH
66000: LD_INT 0
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 1
66009: PUSH
66010: LD_INT 1
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 0
66019: PUSH
66020: LD_INT 1
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 1
66029: NEG
66030: PUSH
66031: LD_INT 0
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 1
66040: NEG
66041: PUSH
66042: LD_INT 1
66044: NEG
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: ST_TO_ADDR
// end ; 1 :
66059: GO 71956
66061: LD_INT 1
66063: DOUBLE
66064: EQUAL
66065: IFTRUE 66069
66067: GO 68692
66069: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66070: LD_ADDR_VAR 0 11
66074: PUSH
66075: LD_INT 1
66077: NEG
66078: PUSH
66079: LD_INT 3
66081: NEG
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 0
66089: PUSH
66090: LD_INT 3
66092: NEG
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 1
66100: PUSH
66101: LD_INT 2
66103: NEG
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: LIST
66113: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66114: LD_ADDR_VAR 0 12
66118: PUSH
66119: LD_INT 2
66121: PUSH
66122: LD_INT 1
66124: NEG
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 3
66132: PUSH
66133: LD_INT 0
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 3
66142: PUSH
66143: LD_INT 1
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: LIST
66154: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66155: LD_ADDR_VAR 0 13
66159: PUSH
66160: LD_INT 3
66162: PUSH
66163: LD_INT 2
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 3
66172: PUSH
66173: LD_INT 3
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 2
66182: PUSH
66183: LD_INT 3
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: LIST
66194: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66195: LD_ADDR_VAR 0 14
66199: PUSH
66200: LD_INT 1
66202: PUSH
66203: LD_INT 3
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 0
66212: PUSH
66213: LD_INT 3
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 1
66222: NEG
66223: PUSH
66224: LD_INT 2
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: LIST
66235: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66236: LD_ADDR_VAR 0 15
66240: PUSH
66241: LD_INT 2
66243: NEG
66244: PUSH
66245: LD_INT 1
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 3
66254: NEG
66255: PUSH
66256: LD_INT 0
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 3
66265: NEG
66266: PUSH
66267: LD_INT 1
66269: NEG
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: LIST
66279: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66280: LD_ADDR_VAR 0 16
66284: PUSH
66285: LD_INT 2
66287: NEG
66288: PUSH
66289: LD_INT 3
66291: NEG
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 3
66299: NEG
66300: PUSH
66301: LD_INT 2
66303: NEG
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 3
66311: NEG
66312: PUSH
66313: LD_INT 3
66315: NEG
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: LIST
66325: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66326: LD_ADDR_VAR 0 17
66330: PUSH
66331: LD_INT 1
66333: NEG
66334: PUSH
66335: LD_INT 3
66337: NEG
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: LD_INT 3
66348: NEG
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 1
66356: PUSH
66357: LD_INT 2
66359: NEG
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: LIST
66369: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66370: LD_ADDR_VAR 0 18
66374: PUSH
66375: LD_INT 2
66377: PUSH
66378: LD_INT 1
66380: NEG
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 3
66388: PUSH
66389: LD_INT 0
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 3
66398: PUSH
66399: LD_INT 1
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: LIST
66410: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66411: LD_ADDR_VAR 0 19
66415: PUSH
66416: LD_INT 3
66418: PUSH
66419: LD_INT 2
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 3
66428: PUSH
66429: LD_INT 3
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 2
66438: PUSH
66439: LD_INT 3
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: LIST
66450: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66451: LD_ADDR_VAR 0 20
66455: PUSH
66456: LD_INT 1
66458: PUSH
66459: LD_INT 3
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 0
66468: PUSH
66469: LD_INT 3
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 1
66478: NEG
66479: PUSH
66480: LD_INT 2
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: LIST
66491: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66492: LD_ADDR_VAR 0 21
66496: PUSH
66497: LD_INT 2
66499: NEG
66500: PUSH
66501: LD_INT 1
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 3
66510: NEG
66511: PUSH
66512: LD_INT 0
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 3
66521: NEG
66522: PUSH
66523: LD_INT 1
66525: NEG
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: LIST
66535: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66536: LD_ADDR_VAR 0 22
66540: PUSH
66541: LD_INT 2
66543: NEG
66544: PUSH
66545: LD_INT 3
66547: NEG
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 3
66555: NEG
66556: PUSH
66557: LD_INT 2
66559: NEG
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 3
66567: NEG
66568: PUSH
66569: LD_INT 3
66571: NEG
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: LIST
66581: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66582: LD_ADDR_VAR 0 23
66586: PUSH
66587: LD_INT 0
66589: PUSH
66590: LD_INT 3
66592: NEG
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 1
66600: NEG
66601: PUSH
66602: LD_INT 4
66604: NEG
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 1
66612: PUSH
66613: LD_INT 3
66615: NEG
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: LIST
66625: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66626: LD_ADDR_VAR 0 24
66630: PUSH
66631: LD_INT 3
66633: PUSH
66634: LD_INT 0
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 3
66643: PUSH
66644: LD_INT 1
66646: NEG
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 4
66654: PUSH
66655: LD_INT 1
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: LIST
66666: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66667: LD_ADDR_VAR 0 25
66671: PUSH
66672: LD_INT 3
66674: PUSH
66675: LD_INT 3
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 4
66684: PUSH
66685: LD_INT 3
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 3
66694: PUSH
66695: LD_INT 4
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: LIST
66706: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66707: LD_ADDR_VAR 0 26
66711: PUSH
66712: LD_INT 0
66714: PUSH
66715: LD_INT 3
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 1
66724: PUSH
66725: LD_INT 4
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 1
66734: NEG
66735: PUSH
66736: LD_INT 3
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: LIST
66747: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66748: LD_ADDR_VAR 0 27
66752: PUSH
66753: LD_INT 3
66755: NEG
66756: PUSH
66757: LD_INT 0
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 3
66766: NEG
66767: PUSH
66768: LD_INT 1
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 4
66777: NEG
66778: PUSH
66779: LD_INT 1
66781: NEG
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: LIST
66791: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66792: LD_ADDR_VAR 0 28
66796: PUSH
66797: LD_INT 3
66799: NEG
66800: PUSH
66801: LD_INT 3
66803: NEG
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 3
66811: NEG
66812: PUSH
66813: LD_INT 4
66815: NEG
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: LD_INT 4
66823: NEG
66824: PUSH
66825: LD_INT 3
66827: NEG
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: LIST
66837: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66838: LD_ADDR_VAR 0 29
66842: PUSH
66843: LD_INT 1
66845: NEG
66846: PUSH
66847: LD_INT 3
66849: NEG
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: LD_INT 0
66857: PUSH
66858: LD_INT 3
66860: NEG
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 1
66868: PUSH
66869: LD_INT 2
66871: NEG
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 1
66879: NEG
66880: PUSH
66881: LD_INT 4
66883: NEG
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 0
66891: PUSH
66892: LD_INT 4
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 1
66902: PUSH
66903: LD_INT 3
66905: NEG
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 1
66913: NEG
66914: PUSH
66915: LD_INT 5
66917: NEG
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 0
66925: PUSH
66926: LD_INT 5
66928: NEG
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 1
66936: PUSH
66937: LD_INT 4
66939: NEG
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 1
66947: NEG
66948: PUSH
66949: LD_INT 6
66951: NEG
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 0
66959: PUSH
66960: LD_INT 6
66962: NEG
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 1
66970: PUSH
66971: LD_INT 5
66973: NEG
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66993: LD_ADDR_VAR 0 30
66997: PUSH
66998: LD_INT 2
67000: PUSH
67001: LD_INT 1
67003: NEG
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 3
67011: PUSH
67012: LD_INT 0
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 3
67021: PUSH
67022: LD_INT 1
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 3
67031: PUSH
67032: LD_INT 1
67034: NEG
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 4
67042: PUSH
67043: LD_INT 0
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 4
67052: PUSH
67053: LD_INT 1
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 4
67062: PUSH
67063: LD_INT 1
67065: NEG
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 5
67073: PUSH
67074: LD_INT 0
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 5
67083: PUSH
67084: LD_INT 1
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 5
67093: PUSH
67094: LD_INT 1
67096: NEG
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 6
67104: PUSH
67105: LD_INT 0
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 6
67114: PUSH
67115: LD_INT 1
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67136: LD_ADDR_VAR 0 31
67140: PUSH
67141: LD_INT 3
67143: PUSH
67144: LD_INT 2
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 3
67153: PUSH
67154: LD_INT 3
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 2
67163: PUSH
67164: LD_INT 3
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 4
67173: PUSH
67174: LD_INT 3
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 4
67183: PUSH
67184: LD_INT 4
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 3
67193: PUSH
67194: LD_INT 4
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 5
67203: PUSH
67204: LD_INT 4
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 5
67213: PUSH
67214: LD_INT 5
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 4
67223: PUSH
67224: LD_INT 5
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 6
67233: PUSH
67234: LD_INT 5
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 6
67243: PUSH
67244: LD_INT 6
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 5
67253: PUSH
67254: LD_INT 6
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67275: LD_ADDR_VAR 0 32
67279: PUSH
67280: LD_INT 1
67282: PUSH
67283: LD_INT 3
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: LD_INT 0
67292: PUSH
67293: LD_INT 3
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 1
67302: NEG
67303: PUSH
67304: LD_INT 2
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 1
67313: PUSH
67314: LD_INT 4
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 0
67323: PUSH
67324: LD_INT 4
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 1
67333: NEG
67334: PUSH
67335: LD_INT 3
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 1
67344: PUSH
67345: LD_INT 5
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 0
67354: PUSH
67355: LD_INT 5
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 1
67364: NEG
67365: PUSH
67366: LD_INT 4
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 1
67375: PUSH
67376: LD_INT 6
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 0
67385: PUSH
67386: LD_INT 6
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 1
67395: NEG
67396: PUSH
67397: LD_INT 5
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67418: LD_ADDR_VAR 0 33
67422: PUSH
67423: LD_INT 2
67425: NEG
67426: PUSH
67427: LD_INT 1
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 3
67436: NEG
67437: PUSH
67438: LD_INT 0
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 3
67447: NEG
67448: PUSH
67449: LD_INT 1
67451: NEG
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 3
67459: NEG
67460: PUSH
67461: LD_INT 1
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 4
67470: NEG
67471: PUSH
67472: LD_INT 0
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 4
67481: NEG
67482: PUSH
67483: LD_INT 1
67485: NEG
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 4
67493: NEG
67494: PUSH
67495: LD_INT 1
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 5
67504: NEG
67505: PUSH
67506: LD_INT 0
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 5
67515: NEG
67516: PUSH
67517: LD_INT 1
67519: NEG
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 5
67527: NEG
67528: PUSH
67529: LD_INT 1
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 6
67538: NEG
67539: PUSH
67540: LD_INT 0
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 6
67549: NEG
67550: PUSH
67551: LD_INT 1
67553: NEG
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: LIST
67565: LIST
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67573: LD_ADDR_VAR 0 34
67577: PUSH
67578: LD_INT 2
67580: NEG
67581: PUSH
67582: LD_INT 3
67584: NEG
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 3
67592: NEG
67593: PUSH
67594: LD_INT 2
67596: NEG
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 3
67604: NEG
67605: PUSH
67606: LD_INT 3
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 3
67616: NEG
67617: PUSH
67618: LD_INT 4
67620: NEG
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 4
67628: NEG
67629: PUSH
67630: LD_INT 3
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 4
67640: NEG
67641: PUSH
67642: LD_INT 4
67644: NEG
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 4
67652: NEG
67653: PUSH
67654: LD_INT 5
67656: NEG
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 5
67664: NEG
67665: PUSH
67666: LD_INT 4
67668: NEG
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 5
67676: NEG
67677: PUSH
67678: LD_INT 5
67680: NEG
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 5
67688: NEG
67689: PUSH
67690: LD_INT 6
67692: NEG
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 6
67700: NEG
67701: PUSH
67702: LD_INT 5
67704: NEG
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 6
67712: NEG
67713: PUSH
67714: LD_INT 6
67716: NEG
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67736: LD_ADDR_VAR 0 41
67740: PUSH
67741: LD_INT 0
67743: PUSH
67744: LD_INT 2
67746: NEG
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 1
67754: NEG
67755: PUSH
67756: LD_INT 3
67758: NEG
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 1
67766: PUSH
67767: LD_INT 2
67769: NEG
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: LIST
67779: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67780: LD_ADDR_VAR 0 42
67784: PUSH
67785: LD_INT 2
67787: PUSH
67788: LD_INT 0
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 2
67797: PUSH
67798: LD_INT 1
67800: NEG
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 3
67808: PUSH
67809: LD_INT 1
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: LIST
67820: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67821: LD_ADDR_VAR 0 43
67825: PUSH
67826: LD_INT 2
67828: PUSH
67829: LD_INT 2
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 3
67838: PUSH
67839: LD_INT 2
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 2
67848: PUSH
67849: LD_INT 3
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: LIST
67860: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67861: LD_ADDR_VAR 0 44
67865: PUSH
67866: LD_INT 0
67868: PUSH
67869: LD_INT 2
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 1
67878: PUSH
67879: LD_INT 3
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 1
67888: NEG
67889: PUSH
67890: LD_INT 2
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: LIST
67901: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67902: LD_ADDR_VAR 0 45
67906: PUSH
67907: LD_INT 2
67909: NEG
67910: PUSH
67911: LD_INT 0
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 2
67920: NEG
67921: PUSH
67922: LD_INT 1
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 3
67931: NEG
67932: PUSH
67933: LD_INT 1
67935: NEG
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: LIST
67945: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67946: LD_ADDR_VAR 0 46
67950: PUSH
67951: LD_INT 2
67953: NEG
67954: PUSH
67955: LD_INT 2
67957: NEG
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 2
67965: NEG
67966: PUSH
67967: LD_INT 3
67969: NEG
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 3
67977: NEG
67978: PUSH
67979: LD_INT 2
67981: NEG
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: LIST
67991: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67992: LD_ADDR_VAR 0 47
67996: PUSH
67997: LD_INT 2
67999: NEG
68000: PUSH
68001: LD_INT 3
68003: NEG
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 1
68011: NEG
68012: PUSH
68013: LD_INT 3
68015: NEG
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68025: LD_ADDR_VAR 0 48
68029: PUSH
68030: LD_INT 1
68032: PUSH
68033: LD_INT 2
68035: NEG
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 2
68043: PUSH
68044: LD_INT 1
68046: NEG
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68056: LD_ADDR_VAR 0 49
68060: PUSH
68061: LD_INT 3
68063: PUSH
68064: LD_INT 1
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 3
68073: PUSH
68074: LD_INT 2
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68085: LD_ADDR_VAR 0 50
68089: PUSH
68090: LD_INT 2
68092: PUSH
68093: LD_INT 3
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 1
68102: PUSH
68103: LD_INT 3
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68114: LD_ADDR_VAR 0 51
68118: PUSH
68119: LD_INT 1
68121: NEG
68122: PUSH
68123: LD_INT 2
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 2
68132: NEG
68133: PUSH
68134: LD_INT 1
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68145: LD_ADDR_VAR 0 52
68149: PUSH
68150: LD_INT 3
68152: NEG
68153: PUSH
68154: LD_INT 1
68156: NEG
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 3
68164: NEG
68165: PUSH
68166: LD_INT 2
68168: NEG
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68178: LD_ADDR_VAR 0 53
68182: PUSH
68183: LD_INT 1
68185: NEG
68186: PUSH
68187: LD_INT 3
68189: NEG
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 0
68197: PUSH
68198: LD_INT 3
68200: NEG
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 1
68208: PUSH
68209: LD_INT 2
68211: NEG
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: LIST
68221: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68222: LD_ADDR_VAR 0 54
68226: PUSH
68227: LD_INT 2
68229: PUSH
68230: LD_INT 1
68232: NEG
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 3
68240: PUSH
68241: LD_INT 0
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 3
68250: PUSH
68251: LD_INT 1
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: LIST
68262: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68263: LD_ADDR_VAR 0 55
68267: PUSH
68268: LD_INT 3
68270: PUSH
68271: LD_INT 2
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 3
68280: PUSH
68281: LD_INT 3
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 2
68290: PUSH
68291: LD_INT 3
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: LIST
68302: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68303: LD_ADDR_VAR 0 56
68307: PUSH
68308: LD_INT 1
68310: PUSH
68311: LD_INT 3
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 0
68320: PUSH
68321: LD_INT 3
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 1
68330: NEG
68331: PUSH
68332: LD_INT 2
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: LIST
68343: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68344: LD_ADDR_VAR 0 57
68348: PUSH
68349: LD_INT 2
68351: NEG
68352: PUSH
68353: LD_INT 1
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 3
68362: NEG
68363: PUSH
68364: LD_INT 0
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 3
68373: NEG
68374: PUSH
68375: LD_INT 1
68377: NEG
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: LIST
68387: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68388: LD_ADDR_VAR 0 58
68392: PUSH
68393: LD_INT 2
68395: NEG
68396: PUSH
68397: LD_INT 3
68399: NEG
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 3
68407: NEG
68408: PUSH
68409: LD_INT 2
68411: NEG
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 3
68419: NEG
68420: PUSH
68421: LD_INT 3
68423: NEG
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: LIST
68433: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68434: LD_ADDR_VAR 0 59
68438: PUSH
68439: LD_INT 1
68441: NEG
68442: PUSH
68443: LD_INT 2
68445: NEG
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 0
68453: PUSH
68454: LD_INT 2
68456: NEG
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 1
68464: PUSH
68465: LD_INT 1
68467: NEG
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: LIST
68477: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68478: LD_ADDR_VAR 0 60
68482: PUSH
68483: LD_INT 1
68485: PUSH
68486: LD_INT 1
68488: NEG
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 2
68496: PUSH
68497: LD_INT 0
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 2
68506: PUSH
68507: LD_INT 1
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: LIST
68518: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68519: LD_ADDR_VAR 0 61
68523: PUSH
68524: LD_INT 2
68526: PUSH
68527: LD_INT 1
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 2
68536: PUSH
68537: LD_INT 2
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 1
68546: PUSH
68547: LD_INT 2
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: LIST
68558: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68559: LD_ADDR_VAR 0 62
68563: PUSH
68564: LD_INT 1
68566: PUSH
68567: LD_INT 2
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 0
68576: PUSH
68577: LD_INT 2
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 1
68586: NEG
68587: PUSH
68588: LD_INT 1
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: LIST
68599: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68600: LD_ADDR_VAR 0 63
68604: PUSH
68605: LD_INT 1
68607: NEG
68608: PUSH
68609: LD_INT 1
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 2
68618: NEG
68619: PUSH
68620: LD_INT 0
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 2
68629: NEG
68630: PUSH
68631: LD_INT 1
68633: NEG
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: LIST
68643: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68644: LD_ADDR_VAR 0 64
68648: PUSH
68649: LD_INT 1
68651: NEG
68652: PUSH
68653: LD_INT 2
68655: NEG
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 2
68663: NEG
68664: PUSH
68665: LD_INT 1
68667: NEG
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 2
68675: NEG
68676: PUSH
68677: LD_INT 2
68679: NEG
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: LIST
68689: ST_TO_ADDR
// end ; 2 :
68690: GO 71956
68692: LD_INT 2
68694: DOUBLE
68695: EQUAL
68696: IFTRUE 68700
68698: GO 71955
68700: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68701: LD_ADDR_VAR 0 29
68705: PUSH
68706: LD_INT 4
68708: PUSH
68709: LD_INT 0
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 4
68718: PUSH
68719: LD_INT 1
68721: NEG
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 5
68729: PUSH
68730: LD_INT 0
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 5
68739: PUSH
68740: LD_INT 1
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 4
68749: PUSH
68750: LD_INT 1
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 3
68759: PUSH
68760: LD_INT 0
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 3
68769: PUSH
68770: LD_INT 1
68772: NEG
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 3
68780: PUSH
68781: LD_INT 2
68783: NEG
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 5
68791: PUSH
68792: LD_INT 2
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 3
68801: PUSH
68802: LD_INT 3
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 3
68811: PUSH
68812: LD_INT 2
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 4
68821: PUSH
68822: LD_INT 3
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: LD_INT 4
68831: PUSH
68832: LD_INT 4
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 3
68841: PUSH
68842: LD_INT 4
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 2
68851: PUSH
68852: LD_INT 3
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: LD_INT 2
68861: PUSH
68862: LD_INT 2
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 4
68871: PUSH
68872: LD_INT 2
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 2
68881: PUSH
68882: LD_INT 4
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 0
68891: PUSH
68892: LD_INT 4
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 0
68901: PUSH
68902: LD_INT 3
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 1
68911: PUSH
68912: LD_INT 4
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 1
68921: PUSH
68922: LD_INT 5
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 0
68931: PUSH
68932: LD_INT 5
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 1
68941: NEG
68942: PUSH
68943: LD_INT 4
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 1
68952: NEG
68953: PUSH
68954: LD_INT 3
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 2
68963: PUSH
68964: LD_INT 5
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 2
68973: NEG
68974: PUSH
68975: LD_INT 3
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 3
68984: NEG
68985: PUSH
68986: LD_INT 0
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 3
68995: NEG
68996: PUSH
68997: LD_INT 1
68999: NEG
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 2
69007: NEG
69008: PUSH
69009: LD_INT 0
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 2
69018: NEG
69019: PUSH
69020: LD_INT 1
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 3
69029: NEG
69030: PUSH
69031: LD_INT 1
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 4
69040: NEG
69041: PUSH
69042: LD_INT 0
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 4
69051: NEG
69052: PUSH
69053: LD_INT 1
69055: NEG
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 4
69063: NEG
69064: PUSH
69065: LD_INT 2
69067: NEG
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 2
69075: NEG
69076: PUSH
69077: LD_INT 2
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 4
69086: NEG
69087: PUSH
69088: LD_INT 4
69090: NEG
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 4
69098: NEG
69099: PUSH
69100: LD_INT 5
69102: NEG
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 3
69110: NEG
69111: PUSH
69112: LD_INT 4
69114: NEG
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 3
69122: NEG
69123: PUSH
69124: LD_INT 3
69126: NEG
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 4
69134: NEG
69135: PUSH
69136: LD_INT 3
69138: NEG
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PUSH
69144: LD_INT 5
69146: NEG
69147: PUSH
69148: LD_INT 4
69150: NEG
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: LD_INT 5
69158: NEG
69159: PUSH
69160: LD_INT 5
69162: NEG
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 3
69170: NEG
69171: PUSH
69172: LD_INT 5
69174: NEG
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: LD_INT 5
69182: NEG
69183: PUSH
69184: LD_INT 3
69186: NEG
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69239: LD_ADDR_VAR 0 30
69243: PUSH
69244: LD_INT 4
69246: PUSH
69247: LD_INT 4
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 4
69256: PUSH
69257: LD_INT 3
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 5
69266: PUSH
69267: LD_INT 4
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 5
69276: PUSH
69277: LD_INT 5
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 4
69286: PUSH
69287: LD_INT 5
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 3
69296: PUSH
69297: LD_INT 4
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 3
69306: PUSH
69307: LD_INT 3
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 5
69316: PUSH
69317: LD_INT 3
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 3
69326: PUSH
69327: LD_INT 5
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 0
69336: PUSH
69337: LD_INT 3
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 0
69346: PUSH
69347: LD_INT 2
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 1
69356: PUSH
69357: LD_INT 3
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 1
69366: PUSH
69367: LD_INT 4
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 0
69376: PUSH
69377: LD_INT 4
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 1
69386: NEG
69387: PUSH
69388: LD_INT 3
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 1
69397: NEG
69398: PUSH
69399: LD_INT 2
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 2
69408: PUSH
69409: LD_INT 4
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 2
69418: NEG
69419: PUSH
69420: LD_INT 2
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 4
69429: NEG
69430: PUSH
69431: LD_INT 0
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 4
69440: NEG
69441: PUSH
69442: LD_INT 1
69444: NEG
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 3
69452: NEG
69453: PUSH
69454: LD_INT 0
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 3
69463: NEG
69464: PUSH
69465: LD_INT 1
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 4
69474: NEG
69475: PUSH
69476: LD_INT 1
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 5
69485: NEG
69486: PUSH
69487: LD_INT 0
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 5
69496: NEG
69497: PUSH
69498: LD_INT 1
69500: NEG
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 5
69508: NEG
69509: PUSH
69510: LD_INT 2
69512: NEG
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 3
69520: NEG
69521: PUSH
69522: LD_INT 2
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 3
69531: NEG
69532: PUSH
69533: LD_INT 3
69535: NEG
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 3
69543: NEG
69544: PUSH
69545: LD_INT 4
69547: NEG
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 2
69555: NEG
69556: PUSH
69557: LD_INT 3
69559: NEG
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 2
69567: NEG
69568: PUSH
69569: LD_INT 2
69571: NEG
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 3
69579: NEG
69580: PUSH
69581: LD_INT 2
69583: NEG
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 4
69591: NEG
69592: PUSH
69593: LD_INT 3
69595: NEG
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_INT 4
69603: NEG
69604: PUSH
69605: LD_INT 4
69607: NEG
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 2
69615: NEG
69616: PUSH
69617: LD_INT 4
69619: NEG
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 4
69627: NEG
69628: PUSH
69629: LD_INT 2
69631: NEG
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 0
69639: PUSH
69640: LD_INT 4
69642: NEG
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 0
69650: PUSH
69651: LD_INT 5
69653: NEG
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 1
69661: PUSH
69662: LD_INT 4
69664: NEG
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 1
69672: PUSH
69673: LD_INT 3
69675: NEG
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PUSH
69681: LD_INT 0
69683: PUSH
69684: LD_INT 3
69686: NEG
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 1
69694: NEG
69695: PUSH
69696: LD_INT 4
69698: NEG
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: LD_INT 1
69706: NEG
69707: PUSH
69708: LD_INT 5
69710: NEG
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 2
69718: PUSH
69719: LD_INT 3
69721: NEG
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 2
69729: NEG
69730: PUSH
69731: LD_INT 5
69733: NEG
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69786: LD_ADDR_VAR 0 31
69790: PUSH
69791: LD_INT 0
69793: PUSH
69794: LD_INT 4
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 0
69803: PUSH
69804: LD_INT 3
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 1
69813: PUSH
69814: LD_INT 4
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 1
69823: PUSH
69824: LD_INT 5
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 0
69833: PUSH
69834: LD_INT 5
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 1
69843: NEG
69844: PUSH
69845: LD_INT 4
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: LD_INT 1
69854: NEG
69855: PUSH
69856: LD_INT 3
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 2
69865: PUSH
69866: LD_INT 5
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 2
69875: NEG
69876: PUSH
69877: LD_INT 3
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 3
69886: NEG
69887: PUSH
69888: LD_INT 0
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 3
69897: NEG
69898: PUSH
69899: LD_INT 1
69901: NEG
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 2
69909: NEG
69910: PUSH
69911: LD_INT 0
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 2
69920: NEG
69921: PUSH
69922: LD_INT 1
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 3
69931: NEG
69932: PUSH
69933: LD_INT 1
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 4
69942: NEG
69943: PUSH
69944: LD_INT 0
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 4
69953: NEG
69954: PUSH
69955: LD_INT 1
69957: NEG
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 4
69965: NEG
69966: PUSH
69967: LD_INT 2
69969: NEG
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 2
69977: NEG
69978: PUSH
69979: LD_INT 2
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 4
69988: NEG
69989: PUSH
69990: LD_INT 4
69992: NEG
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 4
70000: NEG
70001: PUSH
70002: LD_INT 5
70004: NEG
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 3
70012: NEG
70013: PUSH
70014: LD_INT 4
70016: NEG
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 3
70024: NEG
70025: PUSH
70026: LD_INT 3
70028: NEG
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 4
70036: NEG
70037: PUSH
70038: LD_INT 3
70040: NEG
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 5
70048: NEG
70049: PUSH
70050: LD_INT 4
70052: NEG
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 5
70060: NEG
70061: PUSH
70062: LD_INT 5
70064: NEG
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 3
70072: NEG
70073: PUSH
70074: LD_INT 5
70076: NEG
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 5
70084: NEG
70085: PUSH
70086: LD_INT 3
70088: NEG
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 0
70096: PUSH
70097: LD_INT 3
70099: NEG
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: PUSH
70105: LD_INT 0
70107: PUSH
70108: LD_INT 4
70110: NEG
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: PUSH
70116: LD_INT 1
70118: PUSH
70119: LD_INT 3
70121: NEG
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 1
70129: PUSH
70130: LD_INT 2
70132: NEG
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PUSH
70138: LD_INT 0
70140: PUSH
70141: LD_INT 2
70143: NEG
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 1
70151: NEG
70152: PUSH
70153: LD_INT 3
70155: NEG
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 1
70163: NEG
70164: PUSH
70165: LD_INT 4
70167: NEG
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 2
70175: PUSH
70176: LD_INT 2
70178: NEG
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: LD_INT 2
70186: NEG
70187: PUSH
70188: LD_INT 4
70190: NEG
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 4
70198: PUSH
70199: LD_INT 0
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: LD_INT 4
70208: PUSH
70209: LD_INT 1
70211: NEG
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 5
70219: PUSH
70220: LD_INT 0
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 5
70229: PUSH
70230: LD_INT 1
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 4
70239: PUSH
70240: LD_INT 1
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 3
70249: PUSH
70250: LD_INT 0
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 3
70259: PUSH
70260: LD_INT 1
70262: NEG
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 3
70270: PUSH
70271: LD_INT 2
70273: NEG
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 5
70281: PUSH
70282: LD_INT 2
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70336: LD_ADDR_VAR 0 32
70340: PUSH
70341: LD_INT 4
70343: NEG
70344: PUSH
70345: LD_INT 0
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 4
70354: NEG
70355: PUSH
70356: LD_INT 1
70358: NEG
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 3
70366: NEG
70367: PUSH
70368: LD_INT 0
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 3
70377: NEG
70378: PUSH
70379: LD_INT 1
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 4
70388: NEG
70389: PUSH
70390: LD_INT 1
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 5
70399: NEG
70400: PUSH
70401: LD_INT 0
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 5
70410: NEG
70411: PUSH
70412: LD_INT 1
70414: NEG
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 5
70422: NEG
70423: PUSH
70424: LD_INT 2
70426: NEG
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: LD_INT 3
70434: NEG
70435: PUSH
70436: LD_INT 2
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 3
70445: NEG
70446: PUSH
70447: LD_INT 3
70449: NEG
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 3
70457: NEG
70458: PUSH
70459: LD_INT 4
70461: NEG
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 2
70469: NEG
70470: PUSH
70471: LD_INT 3
70473: NEG
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 2
70481: NEG
70482: PUSH
70483: LD_INT 2
70485: NEG
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 3
70493: NEG
70494: PUSH
70495: LD_INT 2
70497: NEG
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: LD_INT 4
70505: NEG
70506: PUSH
70507: LD_INT 3
70509: NEG
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: LD_INT 4
70517: NEG
70518: PUSH
70519: LD_INT 4
70521: NEG
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 2
70529: NEG
70530: PUSH
70531: LD_INT 4
70533: NEG
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 4
70541: NEG
70542: PUSH
70543: LD_INT 2
70545: NEG
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 0
70553: PUSH
70554: LD_INT 4
70556: NEG
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 0
70564: PUSH
70565: LD_INT 5
70567: NEG
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 1
70575: PUSH
70576: LD_INT 4
70578: NEG
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 1
70586: PUSH
70587: LD_INT 3
70589: NEG
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 0
70597: PUSH
70598: LD_INT 3
70600: NEG
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 1
70608: NEG
70609: PUSH
70610: LD_INT 4
70612: NEG
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: LD_INT 1
70620: NEG
70621: PUSH
70622: LD_INT 5
70624: NEG
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 2
70632: PUSH
70633: LD_INT 3
70635: NEG
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 2
70643: NEG
70644: PUSH
70645: LD_INT 5
70647: NEG
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PUSH
70653: LD_INT 3
70655: PUSH
70656: LD_INT 0
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 3
70665: PUSH
70666: LD_INT 1
70668: NEG
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 4
70676: PUSH
70677: LD_INT 0
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PUSH
70684: LD_INT 4
70686: PUSH
70687: LD_INT 1
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 3
70696: PUSH
70697: LD_INT 1
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: LD_INT 2
70706: PUSH
70707: LD_INT 0
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: LD_INT 2
70716: PUSH
70717: LD_INT 1
70719: NEG
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: LD_INT 2
70727: PUSH
70728: LD_INT 2
70730: NEG
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: PUSH
70736: LD_INT 4
70738: PUSH
70739: LD_INT 2
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: PUSH
70746: LD_INT 4
70748: PUSH
70749: LD_INT 4
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 4
70758: PUSH
70759: LD_INT 3
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 5
70768: PUSH
70769: LD_INT 4
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 5
70778: PUSH
70779: LD_INT 5
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: LD_INT 4
70788: PUSH
70789: LD_INT 5
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PUSH
70796: LD_INT 3
70798: PUSH
70799: LD_INT 4
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: PUSH
70806: LD_INT 3
70808: PUSH
70809: LD_INT 3
70811: PUSH
70812: EMPTY
70813: LIST
70814: LIST
70815: PUSH
70816: LD_INT 5
70818: PUSH
70819: LD_INT 3
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PUSH
70826: LD_INT 3
70828: PUSH
70829: LD_INT 5
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70883: LD_ADDR_VAR 0 33
70887: PUSH
70888: LD_INT 4
70890: NEG
70891: PUSH
70892: LD_INT 4
70894: NEG
70895: PUSH
70896: EMPTY
70897: LIST
70898: LIST
70899: PUSH
70900: LD_INT 4
70902: NEG
70903: PUSH
70904: LD_INT 5
70906: NEG
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 3
70914: NEG
70915: PUSH
70916: LD_INT 4
70918: NEG
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: PUSH
70924: LD_INT 3
70926: NEG
70927: PUSH
70928: LD_INT 3
70930: NEG
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 4
70938: NEG
70939: PUSH
70940: LD_INT 3
70942: NEG
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: PUSH
70948: LD_INT 5
70950: NEG
70951: PUSH
70952: LD_INT 4
70954: NEG
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: PUSH
70960: LD_INT 5
70962: NEG
70963: PUSH
70964: LD_INT 5
70966: NEG
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 3
70974: NEG
70975: PUSH
70976: LD_INT 5
70978: NEG
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: LD_INT 5
70986: NEG
70987: PUSH
70988: LD_INT 3
70990: NEG
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: LD_INT 0
70998: PUSH
70999: LD_INT 3
71001: NEG
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: PUSH
71007: LD_INT 0
71009: PUSH
71010: LD_INT 4
71012: NEG
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: PUSH
71018: LD_INT 1
71020: PUSH
71021: LD_INT 3
71023: NEG
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: LD_INT 1
71031: PUSH
71032: LD_INT 2
71034: NEG
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: PUSH
71040: LD_INT 0
71042: PUSH
71043: LD_INT 2
71045: NEG
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PUSH
71051: LD_INT 1
71053: NEG
71054: PUSH
71055: LD_INT 3
71057: NEG
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: PUSH
71063: LD_INT 1
71065: NEG
71066: PUSH
71067: LD_INT 4
71069: NEG
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 2
71077: PUSH
71078: LD_INT 2
71080: NEG
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: LD_INT 2
71088: NEG
71089: PUSH
71090: LD_INT 4
71092: NEG
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: PUSH
71098: LD_INT 4
71100: PUSH
71101: LD_INT 0
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: LD_INT 4
71110: PUSH
71111: LD_INT 1
71113: NEG
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: PUSH
71119: LD_INT 5
71121: PUSH
71122: LD_INT 0
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: LD_INT 5
71131: PUSH
71132: LD_INT 1
71134: PUSH
71135: EMPTY
71136: LIST
71137: LIST
71138: PUSH
71139: LD_INT 4
71141: PUSH
71142: LD_INT 1
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 3
71151: PUSH
71152: LD_INT 0
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PUSH
71159: LD_INT 3
71161: PUSH
71162: LD_INT 1
71164: NEG
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 3
71172: PUSH
71173: LD_INT 2
71175: NEG
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 5
71183: PUSH
71184: LD_INT 2
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PUSH
71191: LD_INT 3
71193: PUSH
71194: LD_INT 3
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: PUSH
71201: LD_INT 3
71203: PUSH
71204: LD_INT 2
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: PUSH
71211: LD_INT 4
71213: PUSH
71214: LD_INT 3
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 4
71223: PUSH
71224: LD_INT 4
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PUSH
71231: LD_INT 3
71233: PUSH
71234: LD_INT 4
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: LD_INT 2
71243: PUSH
71244: LD_INT 3
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: PUSH
71251: LD_INT 2
71253: PUSH
71254: LD_INT 2
71256: PUSH
71257: EMPTY
71258: LIST
71259: LIST
71260: PUSH
71261: LD_INT 4
71263: PUSH
71264: LD_INT 2
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PUSH
71271: LD_INT 2
71273: PUSH
71274: LD_INT 4
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: PUSH
71281: LD_INT 0
71283: PUSH
71284: LD_INT 4
71286: PUSH
71287: EMPTY
71288: LIST
71289: LIST
71290: PUSH
71291: LD_INT 0
71293: PUSH
71294: LD_INT 3
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 1
71303: PUSH
71304: LD_INT 4
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: LD_INT 1
71313: PUSH
71314: LD_INT 5
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: LD_INT 0
71323: PUSH
71324: LD_INT 5
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: LD_INT 1
71333: NEG
71334: PUSH
71335: LD_INT 4
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 1
71344: NEG
71345: PUSH
71346: LD_INT 3
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: LD_INT 2
71355: PUSH
71356: LD_INT 5
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: PUSH
71363: LD_INT 2
71365: NEG
71366: PUSH
71367: LD_INT 3
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71421: LD_ADDR_VAR 0 34
71425: PUSH
71426: LD_INT 0
71428: PUSH
71429: LD_INT 4
71431: NEG
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: PUSH
71437: LD_INT 0
71439: PUSH
71440: LD_INT 5
71442: NEG
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 1
71450: PUSH
71451: LD_INT 4
71453: NEG
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: LD_INT 1
71461: PUSH
71462: LD_INT 3
71464: NEG
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 0
71472: PUSH
71473: LD_INT 3
71475: NEG
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 1
71483: NEG
71484: PUSH
71485: LD_INT 4
71487: NEG
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 1
71495: NEG
71496: PUSH
71497: LD_INT 5
71499: NEG
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 2
71507: PUSH
71508: LD_INT 3
71510: NEG
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 2
71518: NEG
71519: PUSH
71520: LD_INT 5
71522: NEG
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 3
71530: PUSH
71531: LD_INT 0
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: PUSH
71538: LD_INT 3
71540: PUSH
71541: LD_INT 1
71543: NEG
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 4
71551: PUSH
71552: LD_INT 0
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: LD_INT 4
71561: PUSH
71562: LD_INT 1
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: PUSH
71569: LD_INT 3
71571: PUSH
71572: LD_INT 1
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: PUSH
71579: LD_INT 2
71581: PUSH
71582: LD_INT 0
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: LD_INT 2
71591: PUSH
71592: LD_INT 1
71594: NEG
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: PUSH
71600: LD_INT 2
71602: PUSH
71603: LD_INT 2
71605: NEG
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 4
71613: PUSH
71614: LD_INT 2
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: PUSH
71621: LD_INT 4
71623: PUSH
71624: LD_INT 4
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: PUSH
71631: LD_INT 4
71633: PUSH
71634: LD_INT 3
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: PUSH
71641: LD_INT 5
71643: PUSH
71644: LD_INT 4
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: PUSH
71651: LD_INT 5
71653: PUSH
71654: LD_INT 5
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 4
71663: PUSH
71664: LD_INT 5
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: LD_INT 3
71673: PUSH
71674: LD_INT 4
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 3
71683: PUSH
71684: LD_INT 3
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: PUSH
71691: LD_INT 5
71693: PUSH
71694: LD_INT 3
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 3
71703: PUSH
71704: LD_INT 5
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: PUSH
71711: LD_INT 0
71713: PUSH
71714: LD_INT 3
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PUSH
71721: LD_INT 0
71723: PUSH
71724: LD_INT 2
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: PUSH
71731: LD_INT 1
71733: PUSH
71734: LD_INT 3
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: PUSH
71741: LD_INT 1
71743: PUSH
71744: LD_INT 4
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: LD_INT 0
71753: PUSH
71754: LD_INT 4
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: PUSH
71761: LD_INT 1
71763: NEG
71764: PUSH
71765: LD_INT 3
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: PUSH
71772: LD_INT 1
71774: NEG
71775: PUSH
71776: LD_INT 2
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: PUSH
71783: LD_INT 2
71785: PUSH
71786: LD_INT 4
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PUSH
71793: LD_INT 2
71795: NEG
71796: PUSH
71797: LD_INT 2
71799: PUSH
71800: EMPTY
71801: LIST
71802: LIST
71803: PUSH
71804: LD_INT 4
71806: NEG
71807: PUSH
71808: LD_INT 0
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: PUSH
71815: LD_INT 4
71817: NEG
71818: PUSH
71819: LD_INT 1
71821: NEG
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: LD_INT 3
71829: NEG
71830: PUSH
71831: LD_INT 0
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: PUSH
71838: LD_INT 3
71840: NEG
71841: PUSH
71842: LD_INT 1
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 4
71851: NEG
71852: PUSH
71853: LD_INT 1
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: LD_INT 5
71862: NEG
71863: PUSH
71864: LD_INT 0
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: PUSH
71871: LD_INT 5
71873: NEG
71874: PUSH
71875: LD_INT 1
71877: NEG
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: LD_INT 5
71885: NEG
71886: PUSH
71887: LD_INT 2
71889: NEG
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: PUSH
71895: LD_INT 3
71897: NEG
71898: PUSH
71899: LD_INT 2
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: LIST
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: ST_TO_ADDR
// end ; end ;
71953: GO 71956
71955: POP
// case btype of b_depot , b_warehouse :
71956: LD_VAR 0 1
71960: PUSH
71961: LD_INT 0
71963: DOUBLE
71964: EQUAL
71965: IFTRUE 71975
71967: LD_INT 1
71969: DOUBLE
71970: EQUAL
71971: IFTRUE 71975
71973: GO 72176
71975: POP
// case nation of nation_american :
71976: LD_VAR 0 5
71980: PUSH
71981: LD_INT 1
71983: DOUBLE
71984: EQUAL
71985: IFTRUE 71989
71987: GO 72045
71989: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71990: LD_ADDR_VAR 0 9
71994: PUSH
71995: LD_VAR 0 11
71999: PUSH
72000: LD_VAR 0 12
72004: PUSH
72005: LD_VAR 0 13
72009: PUSH
72010: LD_VAR 0 14
72014: PUSH
72015: LD_VAR 0 15
72019: PUSH
72020: LD_VAR 0 16
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: PUSH
72033: LD_VAR 0 4
72037: PUSH
72038: LD_INT 1
72040: PLUS
72041: ARRAY
72042: ST_TO_ADDR
72043: GO 72174
72045: LD_INT 2
72047: DOUBLE
72048: EQUAL
72049: IFTRUE 72053
72051: GO 72109
72053: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72054: LD_ADDR_VAR 0 9
72058: PUSH
72059: LD_VAR 0 17
72063: PUSH
72064: LD_VAR 0 18
72068: PUSH
72069: LD_VAR 0 19
72073: PUSH
72074: LD_VAR 0 20
72078: PUSH
72079: LD_VAR 0 21
72083: PUSH
72084: LD_VAR 0 22
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: PUSH
72097: LD_VAR 0 4
72101: PUSH
72102: LD_INT 1
72104: PLUS
72105: ARRAY
72106: ST_TO_ADDR
72107: GO 72174
72109: LD_INT 3
72111: DOUBLE
72112: EQUAL
72113: IFTRUE 72117
72115: GO 72173
72117: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72118: LD_ADDR_VAR 0 9
72122: PUSH
72123: LD_VAR 0 23
72127: PUSH
72128: LD_VAR 0 24
72132: PUSH
72133: LD_VAR 0 25
72137: PUSH
72138: LD_VAR 0 26
72142: PUSH
72143: LD_VAR 0 27
72147: PUSH
72148: LD_VAR 0 28
72152: PUSH
72153: EMPTY
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: PUSH
72161: LD_VAR 0 4
72165: PUSH
72166: LD_INT 1
72168: PLUS
72169: ARRAY
72170: ST_TO_ADDR
72171: GO 72174
72173: POP
72174: GO 72729
72176: LD_INT 2
72178: DOUBLE
72179: EQUAL
72180: IFTRUE 72190
72182: LD_INT 3
72184: DOUBLE
72185: EQUAL
72186: IFTRUE 72190
72188: GO 72246
72190: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72191: LD_ADDR_VAR 0 9
72195: PUSH
72196: LD_VAR 0 29
72200: PUSH
72201: LD_VAR 0 30
72205: PUSH
72206: LD_VAR 0 31
72210: PUSH
72211: LD_VAR 0 32
72215: PUSH
72216: LD_VAR 0 33
72220: PUSH
72221: LD_VAR 0 34
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: PUSH
72234: LD_VAR 0 4
72238: PUSH
72239: LD_INT 1
72241: PLUS
72242: ARRAY
72243: ST_TO_ADDR
72244: GO 72729
72246: LD_INT 16
72248: DOUBLE
72249: EQUAL
72250: IFTRUE 72308
72252: LD_INT 17
72254: DOUBLE
72255: EQUAL
72256: IFTRUE 72308
72258: LD_INT 18
72260: DOUBLE
72261: EQUAL
72262: IFTRUE 72308
72264: LD_INT 19
72266: DOUBLE
72267: EQUAL
72268: IFTRUE 72308
72270: LD_INT 22
72272: DOUBLE
72273: EQUAL
72274: IFTRUE 72308
72276: LD_INT 20
72278: DOUBLE
72279: EQUAL
72280: IFTRUE 72308
72282: LD_INT 21
72284: DOUBLE
72285: EQUAL
72286: IFTRUE 72308
72288: LD_INT 23
72290: DOUBLE
72291: EQUAL
72292: IFTRUE 72308
72294: LD_INT 24
72296: DOUBLE
72297: EQUAL
72298: IFTRUE 72308
72300: LD_INT 25
72302: DOUBLE
72303: EQUAL
72304: IFTRUE 72308
72306: GO 72364
72308: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72309: LD_ADDR_VAR 0 9
72313: PUSH
72314: LD_VAR 0 35
72318: PUSH
72319: LD_VAR 0 36
72323: PUSH
72324: LD_VAR 0 37
72328: PUSH
72329: LD_VAR 0 38
72333: PUSH
72334: LD_VAR 0 39
72338: PUSH
72339: LD_VAR 0 40
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: LIST
72348: LIST
72349: LIST
72350: LIST
72351: PUSH
72352: LD_VAR 0 4
72356: PUSH
72357: LD_INT 1
72359: PLUS
72360: ARRAY
72361: ST_TO_ADDR
72362: GO 72729
72364: LD_INT 6
72366: DOUBLE
72367: EQUAL
72368: IFTRUE 72420
72370: LD_INT 7
72372: DOUBLE
72373: EQUAL
72374: IFTRUE 72420
72376: LD_INT 8
72378: DOUBLE
72379: EQUAL
72380: IFTRUE 72420
72382: LD_INT 13
72384: DOUBLE
72385: EQUAL
72386: IFTRUE 72420
72388: LD_INT 12
72390: DOUBLE
72391: EQUAL
72392: IFTRUE 72420
72394: LD_INT 15
72396: DOUBLE
72397: EQUAL
72398: IFTRUE 72420
72400: LD_INT 11
72402: DOUBLE
72403: EQUAL
72404: IFTRUE 72420
72406: LD_INT 14
72408: DOUBLE
72409: EQUAL
72410: IFTRUE 72420
72412: LD_INT 10
72414: DOUBLE
72415: EQUAL
72416: IFTRUE 72420
72418: GO 72476
72420: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72421: LD_ADDR_VAR 0 9
72425: PUSH
72426: LD_VAR 0 41
72430: PUSH
72431: LD_VAR 0 42
72435: PUSH
72436: LD_VAR 0 43
72440: PUSH
72441: LD_VAR 0 44
72445: PUSH
72446: LD_VAR 0 45
72450: PUSH
72451: LD_VAR 0 46
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: LIST
72463: PUSH
72464: LD_VAR 0 4
72468: PUSH
72469: LD_INT 1
72471: PLUS
72472: ARRAY
72473: ST_TO_ADDR
72474: GO 72729
72476: LD_INT 36
72478: DOUBLE
72479: EQUAL
72480: IFTRUE 72484
72482: GO 72540
72484: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72485: LD_ADDR_VAR 0 9
72489: PUSH
72490: LD_VAR 0 47
72494: PUSH
72495: LD_VAR 0 48
72499: PUSH
72500: LD_VAR 0 49
72504: PUSH
72505: LD_VAR 0 50
72509: PUSH
72510: LD_VAR 0 51
72514: PUSH
72515: LD_VAR 0 52
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: LIST
72527: PUSH
72528: LD_VAR 0 4
72532: PUSH
72533: LD_INT 1
72535: PLUS
72536: ARRAY
72537: ST_TO_ADDR
72538: GO 72729
72540: LD_INT 4
72542: DOUBLE
72543: EQUAL
72544: IFTRUE 72566
72546: LD_INT 5
72548: DOUBLE
72549: EQUAL
72550: IFTRUE 72566
72552: LD_INT 34
72554: DOUBLE
72555: EQUAL
72556: IFTRUE 72566
72558: LD_INT 37
72560: DOUBLE
72561: EQUAL
72562: IFTRUE 72566
72564: GO 72622
72566: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72567: LD_ADDR_VAR 0 9
72571: PUSH
72572: LD_VAR 0 53
72576: PUSH
72577: LD_VAR 0 54
72581: PUSH
72582: LD_VAR 0 55
72586: PUSH
72587: LD_VAR 0 56
72591: PUSH
72592: LD_VAR 0 57
72596: PUSH
72597: LD_VAR 0 58
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: PUSH
72610: LD_VAR 0 4
72614: PUSH
72615: LD_INT 1
72617: PLUS
72618: ARRAY
72619: ST_TO_ADDR
72620: GO 72729
72622: LD_INT 31
72624: DOUBLE
72625: EQUAL
72626: IFTRUE 72672
72628: LD_INT 32
72630: DOUBLE
72631: EQUAL
72632: IFTRUE 72672
72634: LD_INT 33
72636: DOUBLE
72637: EQUAL
72638: IFTRUE 72672
72640: LD_INT 27
72642: DOUBLE
72643: EQUAL
72644: IFTRUE 72672
72646: LD_INT 26
72648: DOUBLE
72649: EQUAL
72650: IFTRUE 72672
72652: LD_INT 28
72654: DOUBLE
72655: EQUAL
72656: IFTRUE 72672
72658: LD_INT 29
72660: DOUBLE
72661: EQUAL
72662: IFTRUE 72672
72664: LD_INT 30
72666: DOUBLE
72667: EQUAL
72668: IFTRUE 72672
72670: GO 72728
72672: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72673: LD_ADDR_VAR 0 9
72677: PUSH
72678: LD_VAR 0 59
72682: PUSH
72683: LD_VAR 0 60
72687: PUSH
72688: LD_VAR 0 61
72692: PUSH
72693: LD_VAR 0 62
72697: PUSH
72698: LD_VAR 0 63
72702: PUSH
72703: LD_VAR 0 64
72707: PUSH
72708: EMPTY
72709: LIST
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: PUSH
72716: LD_VAR 0 4
72720: PUSH
72721: LD_INT 1
72723: PLUS
72724: ARRAY
72725: ST_TO_ADDR
72726: GO 72729
72728: POP
// temp_list2 = [ ] ;
72729: LD_ADDR_VAR 0 10
72733: PUSH
72734: EMPTY
72735: ST_TO_ADDR
// for i in temp_list do
72736: LD_ADDR_VAR 0 8
72740: PUSH
72741: LD_VAR 0 9
72745: PUSH
72746: FOR_IN
72747: IFFALSE 72799
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72749: LD_ADDR_VAR 0 10
72753: PUSH
72754: LD_VAR 0 10
72758: PUSH
72759: LD_VAR 0 8
72763: PUSH
72764: LD_INT 1
72766: ARRAY
72767: PUSH
72768: LD_VAR 0 2
72772: PLUS
72773: PUSH
72774: LD_VAR 0 8
72778: PUSH
72779: LD_INT 2
72781: ARRAY
72782: PUSH
72783: LD_VAR 0 3
72787: PLUS
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: PUSH
72793: EMPTY
72794: LIST
72795: ADD
72796: ST_TO_ADDR
72797: GO 72746
72799: POP
72800: POP
// result = temp_list2 ;
72801: LD_ADDR_VAR 0 7
72805: PUSH
72806: LD_VAR 0 10
72810: ST_TO_ADDR
// end ;
72811: LD_VAR 0 7
72815: RET
// export function EnemyInRange ( unit , dist ) ; begin
72816: LD_INT 0
72818: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72819: LD_ADDR_VAR 0 3
72823: PUSH
72824: LD_VAR 0 1
72828: PPUSH
72829: CALL_OW 255
72833: PPUSH
72834: LD_VAR 0 1
72838: PPUSH
72839: CALL_OW 250
72843: PPUSH
72844: LD_VAR 0 1
72848: PPUSH
72849: CALL_OW 251
72853: PPUSH
72854: LD_VAR 0 2
72858: PPUSH
72859: CALL 46189 0 4
72863: PUSH
72864: LD_INT 4
72866: ARRAY
72867: ST_TO_ADDR
// end ;
72868: LD_VAR 0 3
72872: RET
// export function PlayerSeeMe ( unit ) ; begin
72873: LD_INT 0
72875: PPUSH
// result := See ( your_side , unit ) ;
72876: LD_ADDR_VAR 0 2
72880: PUSH
72881: LD_OWVAR 2
72885: PPUSH
72886: LD_VAR 0 1
72890: PPUSH
72891: CALL_OW 292
72895: ST_TO_ADDR
// end ;
72896: LD_VAR 0 2
72900: RET
// export function ReverseDir ( unit ) ; begin
72901: LD_INT 0
72903: PPUSH
// if not unit then
72904: LD_VAR 0 1
72908: NOT
72909: IFFALSE 72913
// exit ;
72911: GO 72936
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72913: LD_ADDR_VAR 0 2
72917: PUSH
72918: LD_VAR 0 1
72922: PPUSH
72923: CALL_OW 254
72927: PUSH
72928: LD_INT 3
72930: PLUS
72931: PUSH
72932: LD_INT 6
72934: MOD
72935: ST_TO_ADDR
// end ;
72936: LD_VAR 0 2
72940: RET
// export function ReverseArray ( array ) ; var i ; begin
72941: LD_INT 0
72943: PPUSH
72944: PPUSH
// if not array then
72945: LD_VAR 0 1
72949: NOT
72950: IFFALSE 72954
// exit ;
72952: GO 73009
// result := [ ] ;
72954: LD_ADDR_VAR 0 2
72958: PUSH
72959: EMPTY
72960: ST_TO_ADDR
// for i := array downto 1 do
72961: LD_ADDR_VAR 0 3
72965: PUSH
72966: DOUBLE
72967: LD_VAR 0 1
72971: INC
72972: ST_TO_ADDR
72973: LD_INT 1
72975: PUSH
72976: FOR_DOWNTO
72977: IFFALSE 73007
// result := Join ( result , array [ i ] ) ;
72979: LD_ADDR_VAR 0 2
72983: PUSH
72984: LD_VAR 0 2
72988: PPUSH
72989: LD_VAR 0 1
72993: PUSH
72994: LD_VAR 0 3
72998: ARRAY
72999: PPUSH
73000: CALL 77665 0 2
73004: ST_TO_ADDR
73005: GO 72976
73007: POP
73008: POP
// end ;
73009: LD_VAR 0 2
73013: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73014: LD_INT 0
73016: PPUSH
73017: PPUSH
73018: PPUSH
73019: PPUSH
73020: PPUSH
73021: PPUSH
// if not unit or not hexes then
73022: LD_VAR 0 1
73026: NOT
73027: PUSH
73028: LD_VAR 0 2
73032: NOT
73033: OR
73034: IFFALSE 73038
// exit ;
73036: GO 73161
// dist := 9999 ;
73038: LD_ADDR_VAR 0 5
73042: PUSH
73043: LD_INT 9999
73045: ST_TO_ADDR
// for i = 1 to hexes do
73046: LD_ADDR_VAR 0 4
73050: PUSH
73051: DOUBLE
73052: LD_INT 1
73054: DEC
73055: ST_TO_ADDR
73056: LD_VAR 0 2
73060: PUSH
73061: FOR_TO
73062: IFFALSE 73149
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73064: LD_ADDR_VAR 0 6
73068: PUSH
73069: LD_VAR 0 1
73073: PPUSH
73074: LD_VAR 0 2
73078: PUSH
73079: LD_VAR 0 4
73083: ARRAY
73084: PUSH
73085: LD_INT 1
73087: ARRAY
73088: PPUSH
73089: LD_VAR 0 2
73093: PUSH
73094: LD_VAR 0 4
73098: ARRAY
73099: PUSH
73100: LD_INT 2
73102: ARRAY
73103: PPUSH
73104: CALL_OW 297
73108: ST_TO_ADDR
// if tdist < dist then
73109: LD_VAR 0 6
73113: PUSH
73114: LD_VAR 0 5
73118: LESS
73119: IFFALSE 73147
// begin hex := hexes [ i ] ;
73121: LD_ADDR_VAR 0 8
73125: PUSH
73126: LD_VAR 0 2
73130: PUSH
73131: LD_VAR 0 4
73135: ARRAY
73136: ST_TO_ADDR
// dist := tdist ;
73137: LD_ADDR_VAR 0 5
73141: PUSH
73142: LD_VAR 0 6
73146: ST_TO_ADDR
// end ; end ;
73147: GO 73061
73149: POP
73150: POP
// result := hex ;
73151: LD_ADDR_VAR 0 3
73155: PUSH
73156: LD_VAR 0 8
73160: ST_TO_ADDR
// end ;
73161: LD_VAR 0 3
73165: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73166: LD_INT 0
73168: PPUSH
73169: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73170: LD_VAR 0 1
73174: NOT
73175: PUSH
73176: LD_VAR 0 1
73180: PUSH
73181: LD_INT 21
73183: PUSH
73184: LD_INT 2
73186: PUSH
73187: EMPTY
73188: LIST
73189: LIST
73190: PUSH
73191: LD_INT 23
73193: PUSH
73194: LD_INT 2
73196: PUSH
73197: EMPTY
73198: LIST
73199: LIST
73200: PUSH
73201: EMPTY
73202: LIST
73203: LIST
73204: PPUSH
73205: CALL_OW 69
73209: IN
73210: NOT
73211: OR
73212: IFFALSE 73216
// exit ;
73214: GO 73263
// for i = 1 to 3 do
73216: LD_ADDR_VAR 0 3
73220: PUSH
73221: DOUBLE
73222: LD_INT 1
73224: DEC
73225: ST_TO_ADDR
73226: LD_INT 3
73228: PUSH
73229: FOR_TO
73230: IFFALSE 73261
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73232: LD_VAR 0 1
73236: PPUSH
73237: CALL_OW 250
73241: PPUSH
73242: LD_VAR 0 1
73246: PPUSH
73247: CALL_OW 251
73251: PPUSH
73252: LD_INT 1
73254: PPUSH
73255: CALL_OW 453
73259: GO 73229
73261: POP
73262: POP
// end ;
73263: LD_VAR 0 2
73267: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73268: LD_INT 0
73270: PPUSH
73271: PPUSH
73272: PPUSH
73273: PPUSH
73274: PPUSH
73275: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73276: LD_VAR 0 1
73280: NOT
73281: PUSH
73282: LD_VAR 0 2
73286: NOT
73287: OR
73288: PUSH
73289: LD_VAR 0 1
73293: PPUSH
73294: CALL_OW 314
73298: OR
73299: IFFALSE 73303
// exit ;
73301: GO 73770
// if GetLives ( i ) < 250 then
73303: LD_VAR 0 4
73307: PPUSH
73308: CALL_OW 256
73312: PUSH
73313: LD_INT 250
73315: LESS
73316: IFFALSE 73329
// begin ComAutodestruct ( i ) ;
73318: LD_VAR 0 4
73322: PPUSH
73323: CALL 73166 0 1
// exit ;
73327: GO 73770
// end ; x := GetX ( enemy_unit ) ;
73329: LD_ADDR_VAR 0 7
73333: PUSH
73334: LD_VAR 0 2
73338: PPUSH
73339: CALL_OW 250
73343: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73344: LD_ADDR_VAR 0 8
73348: PUSH
73349: LD_VAR 0 2
73353: PPUSH
73354: CALL_OW 251
73358: ST_TO_ADDR
// if not x or not y then
73359: LD_VAR 0 7
73363: NOT
73364: PUSH
73365: LD_VAR 0 8
73369: NOT
73370: OR
73371: IFFALSE 73375
// exit ;
73373: GO 73770
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73375: LD_ADDR_VAR 0 6
73379: PUSH
73380: LD_VAR 0 7
73384: PPUSH
73385: LD_INT 0
73387: PPUSH
73388: LD_INT 4
73390: PPUSH
73391: CALL_OW 272
73395: PUSH
73396: LD_VAR 0 8
73400: PPUSH
73401: LD_INT 0
73403: PPUSH
73404: LD_INT 4
73406: PPUSH
73407: CALL_OW 273
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: PUSH
73416: LD_VAR 0 7
73420: PPUSH
73421: LD_INT 1
73423: PPUSH
73424: LD_INT 4
73426: PPUSH
73427: CALL_OW 272
73431: PUSH
73432: LD_VAR 0 8
73436: PPUSH
73437: LD_INT 1
73439: PPUSH
73440: LD_INT 4
73442: PPUSH
73443: CALL_OW 273
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: PUSH
73452: LD_VAR 0 7
73456: PPUSH
73457: LD_INT 2
73459: PPUSH
73460: LD_INT 4
73462: PPUSH
73463: CALL_OW 272
73467: PUSH
73468: LD_VAR 0 8
73472: PPUSH
73473: LD_INT 2
73475: PPUSH
73476: LD_INT 4
73478: PPUSH
73479: CALL_OW 273
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: PUSH
73488: LD_VAR 0 7
73492: PPUSH
73493: LD_INT 3
73495: PPUSH
73496: LD_INT 4
73498: PPUSH
73499: CALL_OW 272
73503: PUSH
73504: LD_VAR 0 8
73508: PPUSH
73509: LD_INT 3
73511: PPUSH
73512: LD_INT 4
73514: PPUSH
73515: CALL_OW 273
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PUSH
73524: LD_VAR 0 7
73528: PPUSH
73529: LD_INT 4
73531: PPUSH
73532: LD_INT 4
73534: PPUSH
73535: CALL_OW 272
73539: PUSH
73540: LD_VAR 0 8
73544: PPUSH
73545: LD_INT 4
73547: PPUSH
73548: LD_INT 4
73550: PPUSH
73551: CALL_OW 273
73555: PUSH
73556: EMPTY
73557: LIST
73558: LIST
73559: PUSH
73560: LD_VAR 0 7
73564: PPUSH
73565: LD_INT 5
73567: PPUSH
73568: LD_INT 4
73570: PPUSH
73571: CALL_OW 272
73575: PUSH
73576: LD_VAR 0 8
73580: PPUSH
73581: LD_INT 5
73583: PPUSH
73584: LD_INT 4
73586: PPUSH
73587: CALL_OW 273
73591: PUSH
73592: EMPTY
73593: LIST
73594: LIST
73595: PUSH
73596: EMPTY
73597: LIST
73598: LIST
73599: LIST
73600: LIST
73601: LIST
73602: LIST
73603: ST_TO_ADDR
// for i = tmp downto 1 do
73604: LD_ADDR_VAR 0 4
73608: PUSH
73609: DOUBLE
73610: LD_VAR 0 6
73614: INC
73615: ST_TO_ADDR
73616: LD_INT 1
73618: PUSH
73619: FOR_DOWNTO
73620: IFFALSE 73721
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73622: LD_VAR 0 6
73626: PUSH
73627: LD_VAR 0 4
73631: ARRAY
73632: PUSH
73633: LD_INT 1
73635: ARRAY
73636: PPUSH
73637: LD_VAR 0 6
73641: PUSH
73642: LD_VAR 0 4
73646: ARRAY
73647: PUSH
73648: LD_INT 2
73650: ARRAY
73651: PPUSH
73652: CALL_OW 488
73656: NOT
73657: PUSH
73658: LD_VAR 0 6
73662: PUSH
73663: LD_VAR 0 4
73667: ARRAY
73668: PUSH
73669: LD_INT 1
73671: ARRAY
73672: PPUSH
73673: LD_VAR 0 6
73677: PUSH
73678: LD_VAR 0 4
73682: ARRAY
73683: PUSH
73684: LD_INT 2
73686: ARRAY
73687: PPUSH
73688: CALL_OW 428
73692: PUSH
73693: LD_INT 0
73695: NONEQUAL
73696: OR
73697: IFFALSE 73719
// tmp := Delete ( tmp , i ) ;
73699: LD_ADDR_VAR 0 6
73703: PUSH
73704: LD_VAR 0 6
73708: PPUSH
73709: LD_VAR 0 4
73713: PPUSH
73714: CALL_OW 3
73718: ST_TO_ADDR
73719: GO 73619
73721: POP
73722: POP
// j := GetClosestHex ( unit , tmp ) ;
73723: LD_ADDR_VAR 0 5
73727: PUSH
73728: LD_VAR 0 1
73732: PPUSH
73733: LD_VAR 0 6
73737: PPUSH
73738: CALL 73014 0 2
73742: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73743: LD_VAR 0 1
73747: PPUSH
73748: LD_VAR 0 5
73752: PUSH
73753: LD_INT 1
73755: ARRAY
73756: PPUSH
73757: LD_VAR 0 5
73761: PUSH
73762: LD_INT 2
73764: ARRAY
73765: PPUSH
73766: CALL_OW 111
// end ;
73770: LD_VAR 0 3
73774: RET
// export function PrepareApemanSoldier ( ) ; begin
73775: LD_INT 0
73777: PPUSH
// uc_nation := 0 ;
73778: LD_ADDR_OWVAR 21
73782: PUSH
73783: LD_INT 0
73785: ST_TO_ADDR
// hc_sex := sex_male ;
73786: LD_ADDR_OWVAR 27
73790: PUSH
73791: LD_INT 1
73793: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73794: LD_ADDR_OWVAR 28
73798: PUSH
73799: LD_INT 15
73801: ST_TO_ADDR
// hc_gallery :=  ;
73802: LD_ADDR_OWVAR 33
73806: PUSH
73807: LD_STRING 
73809: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73810: LD_ADDR_OWVAR 31
73814: PUSH
73815: LD_INT 0
73817: PPUSH
73818: LD_INT 3
73820: PPUSH
73821: CALL_OW 12
73825: PUSH
73826: LD_INT 0
73828: PPUSH
73829: LD_INT 3
73831: PPUSH
73832: CALL_OW 12
73836: PUSH
73837: LD_INT 0
73839: PUSH
73840: LD_INT 0
73842: PUSH
73843: EMPTY
73844: LIST
73845: LIST
73846: LIST
73847: LIST
73848: ST_TO_ADDR
// end ;
73849: LD_VAR 0 1
73853: RET
// export function PrepareApemanEngineer ( ) ; begin
73854: LD_INT 0
73856: PPUSH
// uc_nation := 0 ;
73857: LD_ADDR_OWVAR 21
73861: PUSH
73862: LD_INT 0
73864: ST_TO_ADDR
// hc_sex := sex_male ;
73865: LD_ADDR_OWVAR 27
73869: PUSH
73870: LD_INT 1
73872: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73873: LD_ADDR_OWVAR 28
73877: PUSH
73878: LD_INT 16
73880: ST_TO_ADDR
// hc_gallery :=  ;
73881: LD_ADDR_OWVAR 33
73885: PUSH
73886: LD_STRING 
73888: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73889: LD_ADDR_OWVAR 31
73893: PUSH
73894: LD_INT 0
73896: PPUSH
73897: LD_INT 3
73899: PPUSH
73900: CALL_OW 12
73904: PUSH
73905: LD_INT 0
73907: PPUSH
73908: LD_INT 3
73910: PPUSH
73911: CALL_OW 12
73915: PUSH
73916: LD_INT 0
73918: PUSH
73919: LD_INT 0
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: LIST
73926: LIST
73927: ST_TO_ADDR
// end ;
73928: LD_VAR 0 1
73932: RET
// export function PrepareApeman ( agressivity ) ; begin
73933: LD_INT 0
73935: PPUSH
// uc_side := 0 ;
73936: LD_ADDR_OWVAR 20
73940: PUSH
73941: LD_INT 0
73943: ST_TO_ADDR
// uc_nation := 0 ;
73944: LD_ADDR_OWVAR 21
73948: PUSH
73949: LD_INT 0
73951: ST_TO_ADDR
// hc_sex := sex_male ;
73952: LD_ADDR_OWVAR 27
73956: PUSH
73957: LD_INT 1
73959: ST_TO_ADDR
// hc_class := class_apeman ;
73960: LD_ADDR_OWVAR 28
73964: PUSH
73965: LD_INT 12
73967: ST_TO_ADDR
// hc_gallery :=  ;
73968: LD_ADDR_OWVAR 33
73972: PUSH
73973: LD_STRING 
73975: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73976: LD_ADDR_OWVAR 35
73980: PUSH
73981: LD_VAR 0 1
73985: NEG
73986: PPUSH
73987: LD_VAR 0 1
73991: PPUSH
73992: CALL_OW 12
73996: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73997: LD_ADDR_OWVAR 31
74001: PUSH
74002: LD_INT 0
74004: PPUSH
74005: LD_INT 3
74007: PPUSH
74008: CALL_OW 12
74012: PUSH
74013: LD_INT 0
74015: PPUSH
74016: LD_INT 3
74018: PPUSH
74019: CALL_OW 12
74023: PUSH
74024: LD_INT 0
74026: PUSH
74027: LD_INT 0
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: LIST
74034: LIST
74035: ST_TO_ADDR
// end ;
74036: LD_VAR 0 2
74040: RET
// export function PrepareTiger ( agressivity ) ; begin
74041: LD_INT 0
74043: PPUSH
// uc_side := 0 ;
74044: LD_ADDR_OWVAR 20
74048: PUSH
74049: LD_INT 0
74051: ST_TO_ADDR
// uc_nation := 0 ;
74052: LD_ADDR_OWVAR 21
74056: PUSH
74057: LD_INT 0
74059: ST_TO_ADDR
// hc_class := class_tiger ;
74060: LD_ADDR_OWVAR 28
74064: PUSH
74065: LD_INT 14
74067: ST_TO_ADDR
// hc_gallery :=  ;
74068: LD_ADDR_OWVAR 33
74072: PUSH
74073: LD_STRING 
74075: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74076: LD_ADDR_OWVAR 35
74080: PUSH
74081: LD_VAR 0 1
74085: NEG
74086: PPUSH
74087: LD_VAR 0 1
74091: PPUSH
74092: CALL_OW 12
74096: ST_TO_ADDR
// end ;
74097: LD_VAR 0 2
74101: RET
// export function PrepareEnchidna ( ) ; begin
74102: LD_INT 0
74104: PPUSH
// uc_side := 0 ;
74105: LD_ADDR_OWVAR 20
74109: PUSH
74110: LD_INT 0
74112: ST_TO_ADDR
// uc_nation := 0 ;
74113: LD_ADDR_OWVAR 21
74117: PUSH
74118: LD_INT 0
74120: ST_TO_ADDR
// hc_class := class_baggie ;
74121: LD_ADDR_OWVAR 28
74125: PUSH
74126: LD_INT 13
74128: ST_TO_ADDR
// hc_gallery :=  ;
74129: LD_ADDR_OWVAR 33
74133: PUSH
74134: LD_STRING 
74136: ST_TO_ADDR
// end ;
74137: LD_VAR 0 1
74141: RET
// export function PrepareFrog ( ) ; begin
74142: LD_INT 0
74144: PPUSH
// uc_side := 0 ;
74145: LD_ADDR_OWVAR 20
74149: PUSH
74150: LD_INT 0
74152: ST_TO_ADDR
// uc_nation := 0 ;
74153: LD_ADDR_OWVAR 21
74157: PUSH
74158: LD_INT 0
74160: ST_TO_ADDR
// hc_class := class_frog ;
74161: LD_ADDR_OWVAR 28
74165: PUSH
74166: LD_INT 19
74168: ST_TO_ADDR
// hc_gallery :=  ;
74169: LD_ADDR_OWVAR 33
74173: PUSH
74174: LD_STRING 
74176: ST_TO_ADDR
// end ;
74177: LD_VAR 0 1
74181: RET
// export function PrepareFish ( ) ; begin
74182: LD_INT 0
74184: PPUSH
// uc_side := 0 ;
74185: LD_ADDR_OWVAR 20
74189: PUSH
74190: LD_INT 0
74192: ST_TO_ADDR
// uc_nation := 0 ;
74193: LD_ADDR_OWVAR 21
74197: PUSH
74198: LD_INT 0
74200: ST_TO_ADDR
// hc_class := class_fish ;
74201: LD_ADDR_OWVAR 28
74205: PUSH
74206: LD_INT 20
74208: ST_TO_ADDR
// hc_gallery :=  ;
74209: LD_ADDR_OWVAR 33
74213: PUSH
74214: LD_STRING 
74216: ST_TO_ADDR
// end ;
74217: LD_VAR 0 1
74221: RET
// export function PrepareBird ( ) ; begin
74222: LD_INT 0
74224: PPUSH
// uc_side := 0 ;
74225: LD_ADDR_OWVAR 20
74229: PUSH
74230: LD_INT 0
74232: ST_TO_ADDR
// uc_nation := 0 ;
74233: LD_ADDR_OWVAR 21
74237: PUSH
74238: LD_INT 0
74240: ST_TO_ADDR
// hc_class := class_phororhacos ;
74241: LD_ADDR_OWVAR 28
74245: PUSH
74246: LD_INT 18
74248: ST_TO_ADDR
// hc_gallery :=  ;
74249: LD_ADDR_OWVAR 33
74253: PUSH
74254: LD_STRING 
74256: ST_TO_ADDR
// end ;
74257: LD_VAR 0 1
74261: RET
// export function PrepareHorse ( ) ; begin
74262: LD_INT 0
74264: PPUSH
// uc_side := 0 ;
74265: LD_ADDR_OWVAR 20
74269: PUSH
74270: LD_INT 0
74272: ST_TO_ADDR
// uc_nation := 0 ;
74273: LD_ADDR_OWVAR 21
74277: PUSH
74278: LD_INT 0
74280: ST_TO_ADDR
// hc_class := class_horse ;
74281: LD_ADDR_OWVAR 28
74285: PUSH
74286: LD_INT 21
74288: ST_TO_ADDR
// hc_gallery :=  ;
74289: LD_ADDR_OWVAR 33
74293: PUSH
74294: LD_STRING 
74296: ST_TO_ADDR
// end ;
74297: LD_VAR 0 1
74301: RET
// export function PrepareMastodont ( ) ; begin
74302: LD_INT 0
74304: PPUSH
// uc_side := 0 ;
74305: LD_ADDR_OWVAR 20
74309: PUSH
74310: LD_INT 0
74312: ST_TO_ADDR
// uc_nation := 0 ;
74313: LD_ADDR_OWVAR 21
74317: PUSH
74318: LD_INT 0
74320: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74321: LD_ADDR_OWVAR 37
74325: PUSH
74326: LD_INT 31
74328: ST_TO_ADDR
// vc_control := control_rider ;
74329: LD_ADDR_OWVAR 38
74333: PUSH
74334: LD_INT 4
74336: ST_TO_ADDR
// end ;
74337: LD_VAR 0 1
74341: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74342: LD_INT 0
74344: PPUSH
74345: PPUSH
74346: PPUSH
// uc_side = 0 ;
74347: LD_ADDR_OWVAR 20
74351: PUSH
74352: LD_INT 0
74354: ST_TO_ADDR
// uc_nation = 0 ;
74355: LD_ADDR_OWVAR 21
74359: PUSH
74360: LD_INT 0
74362: ST_TO_ADDR
// InitHc_All ( ) ;
74363: CALL_OW 584
// InitVc ;
74367: CALL_OW 20
// if mastodonts then
74371: LD_VAR 0 6
74375: IFFALSE 74442
// for i = 1 to mastodonts do
74377: LD_ADDR_VAR 0 11
74381: PUSH
74382: DOUBLE
74383: LD_INT 1
74385: DEC
74386: ST_TO_ADDR
74387: LD_VAR 0 6
74391: PUSH
74392: FOR_TO
74393: IFFALSE 74440
// begin vc_chassis := 31 ;
74395: LD_ADDR_OWVAR 37
74399: PUSH
74400: LD_INT 31
74402: ST_TO_ADDR
// vc_control := control_rider ;
74403: LD_ADDR_OWVAR 38
74407: PUSH
74408: LD_INT 4
74410: ST_TO_ADDR
// animal := CreateVehicle ;
74411: LD_ADDR_VAR 0 12
74415: PUSH
74416: CALL_OW 45
74420: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74421: LD_VAR 0 12
74425: PPUSH
74426: LD_VAR 0 8
74430: PPUSH
74431: LD_INT 0
74433: PPUSH
74434: CALL 76570 0 3
// end ;
74438: GO 74392
74440: POP
74441: POP
// if horses then
74442: LD_VAR 0 5
74446: IFFALSE 74513
// for i = 1 to horses do
74448: LD_ADDR_VAR 0 11
74452: PUSH
74453: DOUBLE
74454: LD_INT 1
74456: DEC
74457: ST_TO_ADDR
74458: LD_VAR 0 5
74462: PUSH
74463: FOR_TO
74464: IFFALSE 74511
// begin hc_class := 21 ;
74466: LD_ADDR_OWVAR 28
74470: PUSH
74471: LD_INT 21
74473: ST_TO_ADDR
// hc_gallery :=  ;
74474: LD_ADDR_OWVAR 33
74478: PUSH
74479: LD_STRING 
74481: ST_TO_ADDR
// animal := CreateHuman ;
74482: LD_ADDR_VAR 0 12
74486: PUSH
74487: CALL_OW 44
74491: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74492: LD_VAR 0 12
74496: PPUSH
74497: LD_VAR 0 8
74501: PPUSH
74502: LD_INT 0
74504: PPUSH
74505: CALL 76570 0 3
// end ;
74509: GO 74463
74511: POP
74512: POP
// if birds then
74513: LD_VAR 0 1
74517: IFFALSE 74584
// for i = 1 to birds do
74519: LD_ADDR_VAR 0 11
74523: PUSH
74524: DOUBLE
74525: LD_INT 1
74527: DEC
74528: ST_TO_ADDR
74529: LD_VAR 0 1
74533: PUSH
74534: FOR_TO
74535: IFFALSE 74582
// begin hc_class := 18 ;
74537: LD_ADDR_OWVAR 28
74541: PUSH
74542: LD_INT 18
74544: ST_TO_ADDR
// hc_gallery =  ;
74545: LD_ADDR_OWVAR 33
74549: PUSH
74550: LD_STRING 
74552: ST_TO_ADDR
// animal := CreateHuman ;
74553: LD_ADDR_VAR 0 12
74557: PUSH
74558: CALL_OW 44
74562: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74563: LD_VAR 0 12
74567: PPUSH
74568: LD_VAR 0 8
74572: PPUSH
74573: LD_INT 0
74575: PPUSH
74576: CALL 76570 0 3
// end ;
74580: GO 74534
74582: POP
74583: POP
// if tigers then
74584: LD_VAR 0 2
74588: IFFALSE 74672
// for i = 1 to tigers do
74590: LD_ADDR_VAR 0 11
74594: PUSH
74595: DOUBLE
74596: LD_INT 1
74598: DEC
74599: ST_TO_ADDR
74600: LD_VAR 0 2
74604: PUSH
74605: FOR_TO
74606: IFFALSE 74670
// begin hc_class = class_tiger ;
74608: LD_ADDR_OWVAR 28
74612: PUSH
74613: LD_INT 14
74615: ST_TO_ADDR
// hc_gallery =  ;
74616: LD_ADDR_OWVAR 33
74620: PUSH
74621: LD_STRING 
74623: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74624: LD_ADDR_OWVAR 35
74628: PUSH
74629: LD_INT 7
74631: NEG
74632: PPUSH
74633: LD_INT 7
74635: PPUSH
74636: CALL_OW 12
74640: ST_TO_ADDR
// animal := CreateHuman ;
74641: LD_ADDR_VAR 0 12
74645: PUSH
74646: CALL_OW 44
74650: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74651: LD_VAR 0 12
74655: PPUSH
74656: LD_VAR 0 8
74660: PPUSH
74661: LD_INT 0
74663: PPUSH
74664: CALL 76570 0 3
// end ;
74668: GO 74605
74670: POP
74671: POP
// if apemans then
74672: LD_VAR 0 3
74676: IFFALSE 74799
// for i = 1 to apemans do
74678: LD_ADDR_VAR 0 11
74682: PUSH
74683: DOUBLE
74684: LD_INT 1
74686: DEC
74687: ST_TO_ADDR
74688: LD_VAR 0 3
74692: PUSH
74693: FOR_TO
74694: IFFALSE 74797
// begin hc_class = class_apeman ;
74696: LD_ADDR_OWVAR 28
74700: PUSH
74701: LD_INT 12
74703: ST_TO_ADDR
// hc_gallery =  ;
74704: LD_ADDR_OWVAR 33
74708: PUSH
74709: LD_STRING 
74711: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74712: LD_ADDR_OWVAR 35
74716: PUSH
74717: LD_INT 2
74719: NEG
74720: PPUSH
74721: LD_INT 2
74723: PPUSH
74724: CALL_OW 12
74728: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74729: LD_ADDR_OWVAR 31
74733: PUSH
74734: LD_INT 1
74736: PPUSH
74737: LD_INT 3
74739: PPUSH
74740: CALL_OW 12
74744: PUSH
74745: LD_INT 1
74747: PPUSH
74748: LD_INT 3
74750: PPUSH
74751: CALL_OW 12
74755: PUSH
74756: LD_INT 0
74758: PUSH
74759: LD_INT 0
74761: PUSH
74762: EMPTY
74763: LIST
74764: LIST
74765: LIST
74766: LIST
74767: ST_TO_ADDR
// animal := CreateHuman ;
74768: LD_ADDR_VAR 0 12
74772: PUSH
74773: CALL_OW 44
74777: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74778: LD_VAR 0 12
74782: PPUSH
74783: LD_VAR 0 8
74787: PPUSH
74788: LD_INT 0
74790: PPUSH
74791: CALL 76570 0 3
// end ;
74795: GO 74693
74797: POP
74798: POP
// if enchidnas then
74799: LD_VAR 0 4
74803: IFFALSE 74870
// for i = 1 to enchidnas do
74805: LD_ADDR_VAR 0 11
74809: PUSH
74810: DOUBLE
74811: LD_INT 1
74813: DEC
74814: ST_TO_ADDR
74815: LD_VAR 0 4
74819: PUSH
74820: FOR_TO
74821: IFFALSE 74868
// begin hc_class = 13 ;
74823: LD_ADDR_OWVAR 28
74827: PUSH
74828: LD_INT 13
74830: ST_TO_ADDR
// hc_gallery =  ;
74831: LD_ADDR_OWVAR 33
74835: PUSH
74836: LD_STRING 
74838: ST_TO_ADDR
// animal := CreateHuman ;
74839: LD_ADDR_VAR 0 12
74843: PUSH
74844: CALL_OW 44
74848: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74849: LD_VAR 0 12
74853: PPUSH
74854: LD_VAR 0 8
74858: PPUSH
74859: LD_INT 0
74861: PPUSH
74862: CALL 76570 0 3
// end ;
74866: GO 74820
74868: POP
74869: POP
// if fishes then
74870: LD_VAR 0 7
74874: IFFALSE 74941
// for i = 1 to fishes do
74876: LD_ADDR_VAR 0 11
74880: PUSH
74881: DOUBLE
74882: LD_INT 1
74884: DEC
74885: ST_TO_ADDR
74886: LD_VAR 0 7
74890: PUSH
74891: FOR_TO
74892: IFFALSE 74939
// begin hc_class = 20 ;
74894: LD_ADDR_OWVAR 28
74898: PUSH
74899: LD_INT 20
74901: ST_TO_ADDR
// hc_gallery =  ;
74902: LD_ADDR_OWVAR 33
74906: PUSH
74907: LD_STRING 
74909: ST_TO_ADDR
// animal := CreateHuman ;
74910: LD_ADDR_VAR 0 12
74914: PUSH
74915: CALL_OW 44
74919: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74920: LD_VAR 0 12
74924: PPUSH
74925: LD_VAR 0 9
74929: PPUSH
74930: LD_INT 0
74932: PPUSH
74933: CALL 76570 0 3
// end ;
74937: GO 74891
74939: POP
74940: POP
// end ;
74941: LD_VAR 0 10
74945: RET
// export function WantHeal ( sci , unit ) ; begin
74946: LD_INT 0
74948: PPUSH
// if GetTaskList ( sci ) > 0 then
74949: LD_VAR 0 1
74953: PPUSH
74954: CALL_OW 437
74958: PUSH
74959: LD_INT 0
74961: GREATER
74962: IFFALSE 75032
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74964: LD_VAR 0 1
74968: PPUSH
74969: CALL_OW 437
74973: PUSH
74974: LD_INT 1
74976: ARRAY
74977: PUSH
74978: LD_INT 1
74980: ARRAY
74981: PUSH
74982: LD_STRING l
74984: EQUAL
74985: PUSH
74986: LD_VAR 0 1
74990: PPUSH
74991: CALL_OW 437
74995: PUSH
74996: LD_INT 1
74998: ARRAY
74999: PUSH
75000: LD_INT 4
75002: ARRAY
75003: PUSH
75004: LD_VAR 0 2
75008: EQUAL
75009: AND
75010: IFFALSE 75022
// result := true else
75012: LD_ADDR_VAR 0 3
75016: PUSH
75017: LD_INT 1
75019: ST_TO_ADDR
75020: GO 75030
// result := false ;
75022: LD_ADDR_VAR 0 3
75026: PUSH
75027: LD_INT 0
75029: ST_TO_ADDR
// end else
75030: GO 75040
// result := false ;
75032: LD_ADDR_VAR 0 3
75036: PUSH
75037: LD_INT 0
75039: ST_TO_ADDR
// end ;
75040: LD_VAR 0 3
75044: RET
// export function HealTarget ( sci ) ; begin
75045: LD_INT 0
75047: PPUSH
// if not sci then
75048: LD_VAR 0 1
75052: NOT
75053: IFFALSE 75057
// exit ;
75055: GO 75122
// result := 0 ;
75057: LD_ADDR_VAR 0 2
75061: PUSH
75062: LD_INT 0
75064: ST_TO_ADDR
// if GetTaskList ( sci ) then
75065: LD_VAR 0 1
75069: PPUSH
75070: CALL_OW 437
75074: IFFALSE 75122
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75076: LD_VAR 0 1
75080: PPUSH
75081: CALL_OW 437
75085: PUSH
75086: LD_INT 1
75088: ARRAY
75089: PUSH
75090: LD_INT 1
75092: ARRAY
75093: PUSH
75094: LD_STRING l
75096: EQUAL
75097: IFFALSE 75122
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75099: LD_ADDR_VAR 0 2
75103: PUSH
75104: LD_VAR 0 1
75108: PPUSH
75109: CALL_OW 437
75113: PUSH
75114: LD_INT 1
75116: ARRAY
75117: PUSH
75118: LD_INT 4
75120: ARRAY
75121: ST_TO_ADDR
// end ;
75122: LD_VAR 0 2
75126: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75127: LD_INT 0
75129: PPUSH
75130: PPUSH
75131: PPUSH
75132: PPUSH
// if not base_units then
75133: LD_VAR 0 1
75137: NOT
75138: IFFALSE 75142
// exit ;
75140: GO 75229
// result := false ;
75142: LD_ADDR_VAR 0 2
75146: PUSH
75147: LD_INT 0
75149: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75150: LD_ADDR_VAR 0 5
75154: PUSH
75155: LD_VAR 0 1
75159: PPUSH
75160: LD_INT 21
75162: PUSH
75163: LD_INT 3
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: PPUSH
75170: CALL_OW 72
75174: ST_TO_ADDR
// if not tmp then
75175: LD_VAR 0 5
75179: NOT
75180: IFFALSE 75184
// exit ;
75182: GO 75229
// for i in tmp do
75184: LD_ADDR_VAR 0 3
75188: PUSH
75189: LD_VAR 0 5
75193: PUSH
75194: FOR_IN
75195: IFFALSE 75227
// begin result := EnemyInRange ( i , 22 ) ;
75197: LD_ADDR_VAR 0 2
75201: PUSH
75202: LD_VAR 0 3
75206: PPUSH
75207: LD_INT 22
75209: PPUSH
75210: CALL 72816 0 2
75214: ST_TO_ADDR
// if result then
75215: LD_VAR 0 2
75219: IFFALSE 75225
// exit ;
75221: POP
75222: POP
75223: GO 75229
// end ;
75225: GO 75194
75227: POP
75228: POP
// end ;
75229: LD_VAR 0 2
75233: RET
// export function FilterByTag ( units , tag ) ; begin
75234: LD_INT 0
75236: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75237: LD_ADDR_VAR 0 3
75241: PUSH
75242: LD_VAR 0 1
75246: PPUSH
75247: LD_INT 120
75249: PUSH
75250: LD_VAR 0 2
75254: PUSH
75255: EMPTY
75256: LIST
75257: LIST
75258: PPUSH
75259: CALL_OW 72
75263: ST_TO_ADDR
// end ;
75264: LD_VAR 0 3
75268: RET
// export function IsDriver ( un ) ; begin
75269: LD_INT 0
75271: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75272: LD_ADDR_VAR 0 2
75276: PUSH
75277: LD_VAR 0 1
75281: PUSH
75282: LD_INT 55
75284: PUSH
75285: EMPTY
75286: LIST
75287: PPUSH
75288: CALL_OW 69
75292: IN
75293: ST_TO_ADDR
// end ;
75294: LD_VAR 0 2
75298: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75299: LD_INT 0
75301: PPUSH
75302: PPUSH
// list := [ ] ;
75303: LD_ADDR_VAR 0 5
75307: PUSH
75308: EMPTY
75309: ST_TO_ADDR
// case d of 0 :
75310: LD_VAR 0 3
75314: PUSH
75315: LD_INT 0
75317: DOUBLE
75318: EQUAL
75319: IFTRUE 75323
75321: GO 75456
75323: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75324: LD_ADDR_VAR 0 5
75328: PUSH
75329: LD_VAR 0 1
75333: PUSH
75334: LD_INT 4
75336: MINUS
75337: PUSH
75338: LD_VAR 0 2
75342: PUSH
75343: LD_INT 4
75345: MINUS
75346: PUSH
75347: LD_INT 2
75349: PUSH
75350: EMPTY
75351: LIST
75352: LIST
75353: LIST
75354: PUSH
75355: LD_VAR 0 1
75359: PUSH
75360: LD_INT 3
75362: MINUS
75363: PUSH
75364: LD_VAR 0 2
75368: PUSH
75369: LD_INT 1
75371: PUSH
75372: EMPTY
75373: LIST
75374: LIST
75375: LIST
75376: PUSH
75377: LD_VAR 0 1
75381: PUSH
75382: LD_INT 4
75384: PLUS
75385: PUSH
75386: LD_VAR 0 2
75390: PUSH
75391: LD_INT 4
75393: PUSH
75394: EMPTY
75395: LIST
75396: LIST
75397: LIST
75398: PUSH
75399: LD_VAR 0 1
75403: PUSH
75404: LD_INT 3
75406: PLUS
75407: PUSH
75408: LD_VAR 0 2
75412: PUSH
75413: LD_INT 3
75415: PLUS
75416: PUSH
75417: LD_INT 5
75419: PUSH
75420: EMPTY
75421: LIST
75422: LIST
75423: LIST
75424: PUSH
75425: LD_VAR 0 1
75429: PUSH
75430: LD_VAR 0 2
75434: PUSH
75435: LD_INT 4
75437: PLUS
75438: PUSH
75439: LD_INT 0
75441: PUSH
75442: EMPTY
75443: LIST
75444: LIST
75445: LIST
75446: PUSH
75447: EMPTY
75448: LIST
75449: LIST
75450: LIST
75451: LIST
75452: LIST
75453: ST_TO_ADDR
// end ; 1 :
75454: GO 76154
75456: LD_INT 1
75458: DOUBLE
75459: EQUAL
75460: IFTRUE 75464
75462: GO 75597
75464: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75465: LD_ADDR_VAR 0 5
75469: PUSH
75470: LD_VAR 0 1
75474: PUSH
75475: LD_VAR 0 2
75479: PUSH
75480: LD_INT 4
75482: MINUS
75483: PUSH
75484: LD_INT 3
75486: PUSH
75487: EMPTY
75488: LIST
75489: LIST
75490: LIST
75491: PUSH
75492: LD_VAR 0 1
75496: PUSH
75497: LD_INT 3
75499: MINUS
75500: PUSH
75501: LD_VAR 0 2
75505: PUSH
75506: LD_INT 3
75508: MINUS
75509: PUSH
75510: LD_INT 2
75512: PUSH
75513: EMPTY
75514: LIST
75515: LIST
75516: LIST
75517: PUSH
75518: LD_VAR 0 1
75522: PUSH
75523: LD_INT 4
75525: MINUS
75526: PUSH
75527: LD_VAR 0 2
75531: PUSH
75532: LD_INT 1
75534: PUSH
75535: EMPTY
75536: LIST
75537: LIST
75538: LIST
75539: PUSH
75540: LD_VAR 0 1
75544: PUSH
75545: LD_VAR 0 2
75549: PUSH
75550: LD_INT 3
75552: PLUS
75553: PUSH
75554: LD_INT 0
75556: PUSH
75557: EMPTY
75558: LIST
75559: LIST
75560: LIST
75561: PUSH
75562: LD_VAR 0 1
75566: PUSH
75567: LD_INT 4
75569: PLUS
75570: PUSH
75571: LD_VAR 0 2
75575: PUSH
75576: LD_INT 4
75578: PLUS
75579: PUSH
75580: LD_INT 5
75582: PUSH
75583: EMPTY
75584: LIST
75585: LIST
75586: LIST
75587: PUSH
75588: EMPTY
75589: LIST
75590: LIST
75591: LIST
75592: LIST
75593: LIST
75594: ST_TO_ADDR
// end ; 2 :
75595: GO 76154
75597: LD_INT 2
75599: DOUBLE
75600: EQUAL
75601: IFTRUE 75605
75603: GO 75734
75605: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75606: LD_ADDR_VAR 0 5
75610: PUSH
75611: LD_VAR 0 1
75615: PUSH
75616: LD_VAR 0 2
75620: PUSH
75621: LD_INT 3
75623: MINUS
75624: PUSH
75625: LD_INT 3
75627: PUSH
75628: EMPTY
75629: LIST
75630: LIST
75631: LIST
75632: PUSH
75633: LD_VAR 0 1
75637: PUSH
75638: LD_INT 4
75640: PLUS
75641: PUSH
75642: LD_VAR 0 2
75646: PUSH
75647: LD_INT 4
75649: PUSH
75650: EMPTY
75651: LIST
75652: LIST
75653: LIST
75654: PUSH
75655: LD_VAR 0 1
75659: PUSH
75660: LD_VAR 0 2
75664: PUSH
75665: LD_INT 4
75667: PLUS
75668: PUSH
75669: LD_INT 0
75671: PUSH
75672: EMPTY
75673: LIST
75674: LIST
75675: LIST
75676: PUSH
75677: LD_VAR 0 1
75681: PUSH
75682: LD_INT 3
75684: MINUS
75685: PUSH
75686: LD_VAR 0 2
75690: PUSH
75691: LD_INT 1
75693: PUSH
75694: EMPTY
75695: LIST
75696: LIST
75697: LIST
75698: PUSH
75699: LD_VAR 0 1
75703: PUSH
75704: LD_INT 4
75706: MINUS
75707: PUSH
75708: LD_VAR 0 2
75712: PUSH
75713: LD_INT 4
75715: MINUS
75716: PUSH
75717: LD_INT 2
75719: PUSH
75720: EMPTY
75721: LIST
75722: LIST
75723: LIST
75724: PUSH
75725: EMPTY
75726: LIST
75727: LIST
75728: LIST
75729: LIST
75730: LIST
75731: ST_TO_ADDR
// end ; 3 :
75732: GO 76154
75734: LD_INT 3
75736: DOUBLE
75737: EQUAL
75738: IFTRUE 75742
75740: GO 75875
75742: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75743: LD_ADDR_VAR 0 5
75747: PUSH
75748: LD_VAR 0 1
75752: PUSH
75753: LD_INT 3
75755: PLUS
75756: PUSH
75757: LD_VAR 0 2
75761: PUSH
75762: LD_INT 4
75764: PUSH
75765: EMPTY
75766: LIST
75767: LIST
75768: LIST
75769: PUSH
75770: LD_VAR 0 1
75774: PUSH
75775: LD_INT 4
75777: PLUS
75778: PUSH
75779: LD_VAR 0 2
75783: PUSH
75784: LD_INT 4
75786: PLUS
75787: PUSH
75788: LD_INT 5
75790: PUSH
75791: EMPTY
75792: LIST
75793: LIST
75794: LIST
75795: PUSH
75796: LD_VAR 0 1
75800: PUSH
75801: LD_INT 4
75803: MINUS
75804: PUSH
75805: LD_VAR 0 2
75809: PUSH
75810: LD_INT 1
75812: PUSH
75813: EMPTY
75814: LIST
75815: LIST
75816: LIST
75817: PUSH
75818: LD_VAR 0 1
75822: PUSH
75823: LD_VAR 0 2
75827: PUSH
75828: LD_INT 4
75830: MINUS
75831: PUSH
75832: LD_INT 3
75834: PUSH
75835: EMPTY
75836: LIST
75837: LIST
75838: LIST
75839: PUSH
75840: LD_VAR 0 1
75844: PUSH
75845: LD_INT 3
75847: MINUS
75848: PUSH
75849: LD_VAR 0 2
75853: PUSH
75854: LD_INT 3
75856: MINUS
75857: PUSH
75858: LD_INT 2
75860: PUSH
75861: EMPTY
75862: LIST
75863: LIST
75864: LIST
75865: PUSH
75866: EMPTY
75867: LIST
75868: LIST
75869: LIST
75870: LIST
75871: LIST
75872: ST_TO_ADDR
// end ; 4 :
75873: GO 76154
75875: LD_INT 4
75877: DOUBLE
75878: EQUAL
75879: IFTRUE 75883
75881: GO 76016
75883: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75884: LD_ADDR_VAR 0 5
75888: PUSH
75889: LD_VAR 0 1
75893: PUSH
75894: LD_VAR 0 2
75898: PUSH
75899: LD_INT 4
75901: PLUS
75902: PUSH
75903: LD_INT 0
75905: PUSH
75906: EMPTY
75907: LIST
75908: LIST
75909: LIST
75910: PUSH
75911: LD_VAR 0 1
75915: PUSH
75916: LD_INT 3
75918: PLUS
75919: PUSH
75920: LD_VAR 0 2
75924: PUSH
75925: LD_INT 3
75927: PLUS
75928: PUSH
75929: LD_INT 5
75931: PUSH
75932: EMPTY
75933: LIST
75934: LIST
75935: LIST
75936: PUSH
75937: LD_VAR 0 1
75941: PUSH
75942: LD_INT 4
75944: PLUS
75945: PUSH
75946: LD_VAR 0 2
75950: PUSH
75951: LD_INT 4
75953: PUSH
75954: EMPTY
75955: LIST
75956: LIST
75957: LIST
75958: PUSH
75959: LD_VAR 0 1
75963: PUSH
75964: LD_VAR 0 2
75968: PUSH
75969: LD_INT 3
75971: MINUS
75972: PUSH
75973: LD_INT 3
75975: PUSH
75976: EMPTY
75977: LIST
75978: LIST
75979: LIST
75980: PUSH
75981: LD_VAR 0 1
75985: PUSH
75986: LD_INT 4
75988: MINUS
75989: PUSH
75990: LD_VAR 0 2
75994: PUSH
75995: LD_INT 4
75997: MINUS
75998: PUSH
75999: LD_INT 2
76001: PUSH
76002: EMPTY
76003: LIST
76004: LIST
76005: LIST
76006: PUSH
76007: EMPTY
76008: LIST
76009: LIST
76010: LIST
76011: LIST
76012: LIST
76013: ST_TO_ADDR
// end ; 5 :
76014: GO 76154
76016: LD_INT 5
76018: DOUBLE
76019: EQUAL
76020: IFTRUE 76024
76022: GO 76153
76024: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76025: LD_ADDR_VAR 0 5
76029: PUSH
76030: LD_VAR 0 1
76034: PUSH
76035: LD_INT 4
76037: MINUS
76038: PUSH
76039: LD_VAR 0 2
76043: PUSH
76044: LD_INT 1
76046: PUSH
76047: EMPTY
76048: LIST
76049: LIST
76050: LIST
76051: PUSH
76052: LD_VAR 0 1
76056: PUSH
76057: LD_VAR 0 2
76061: PUSH
76062: LD_INT 4
76064: MINUS
76065: PUSH
76066: LD_INT 3
76068: PUSH
76069: EMPTY
76070: LIST
76071: LIST
76072: LIST
76073: PUSH
76074: LD_VAR 0 1
76078: PUSH
76079: LD_INT 4
76081: PLUS
76082: PUSH
76083: LD_VAR 0 2
76087: PUSH
76088: LD_INT 4
76090: PLUS
76091: PUSH
76092: LD_INT 5
76094: PUSH
76095: EMPTY
76096: LIST
76097: LIST
76098: LIST
76099: PUSH
76100: LD_VAR 0 1
76104: PUSH
76105: LD_INT 3
76107: PLUS
76108: PUSH
76109: LD_VAR 0 2
76113: PUSH
76114: LD_INT 4
76116: PUSH
76117: EMPTY
76118: LIST
76119: LIST
76120: LIST
76121: PUSH
76122: LD_VAR 0 1
76126: PUSH
76127: LD_VAR 0 2
76131: PUSH
76132: LD_INT 3
76134: PLUS
76135: PUSH
76136: LD_INT 0
76138: PUSH
76139: EMPTY
76140: LIST
76141: LIST
76142: LIST
76143: PUSH
76144: EMPTY
76145: LIST
76146: LIST
76147: LIST
76148: LIST
76149: LIST
76150: ST_TO_ADDR
// end ; end ;
76151: GO 76154
76153: POP
// result := list ;
76154: LD_ADDR_VAR 0 4
76158: PUSH
76159: LD_VAR 0 5
76163: ST_TO_ADDR
// end ;
76164: LD_VAR 0 4
76168: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76169: LD_INT 0
76171: PPUSH
76172: PPUSH
76173: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76174: LD_VAR 0 1
76178: NOT
76179: PUSH
76180: LD_VAR 0 2
76184: PUSH
76185: LD_INT 1
76187: PUSH
76188: LD_INT 2
76190: PUSH
76191: LD_INT 3
76193: PUSH
76194: LD_INT 4
76196: PUSH
76197: EMPTY
76198: LIST
76199: LIST
76200: LIST
76201: LIST
76202: IN
76203: NOT
76204: OR
76205: IFFALSE 76209
// exit ;
76207: GO 76292
// tmp := [ ] ;
76209: LD_ADDR_VAR 0 5
76213: PUSH
76214: EMPTY
76215: ST_TO_ADDR
// for i in units do
76216: LD_ADDR_VAR 0 4
76220: PUSH
76221: LD_VAR 0 1
76225: PUSH
76226: FOR_IN
76227: IFFALSE 76261
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76229: LD_ADDR_VAR 0 5
76233: PUSH
76234: LD_VAR 0 5
76238: PPUSH
76239: LD_VAR 0 4
76243: PPUSH
76244: LD_VAR 0 2
76248: PPUSH
76249: CALL_OW 259
76253: PPUSH
76254: CALL 77665 0 2
76258: ST_TO_ADDR
76259: GO 76226
76261: POP
76262: POP
// if not tmp then
76263: LD_VAR 0 5
76267: NOT
76268: IFFALSE 76272
// exit ;
76270: GO 76292
// result := SortListByListDesc ( units , tmp ) ;
76272: LD_ADDR_VAR 0 3
76276: PUSH
76277: LD_VAR 0 1
76281: PPUSH
76282: LD_VAR 0 5
76286: PPUSH
76287: CALL_OW 77
76291: ST_TO_ADDR
// end ;
76292: LD_VAR 0 3
76296: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76297: LD_INT 0
76299: PPUSH
76300: PPUSH
76301: PPUSH
// result := false ;
76302: LD_ADDR_VAR 0 3
76306: PUSH
76307: LD_INT 0
76309: ST_TO_ADDR
// if not building then
76310: LD_VAR 0 2
76314: NOT
76315: IFFALSE 76319
// exit ;
76317: GO 76457
// x := GetX ( building ) ;
76319: LD_ADDR_VAR 0 4
76323: PUSH
76324: LD_VAR 0 2
76328: PPUSH
76329: CALL_OW 250
76333: ST_TO_ADDR
// y := GetY ( building ) ;
76334: LD_ADDR_VAR 0 5
76338: PUSH
76339: LD_VAR 0 2
76343: PPUSH
76344: CALL_OW 251
76348: ST_TO_ADDR
// if not x or not y then
76349: LD_VAR 0 4
76353: NOT
76354: PUSH
76355: LD_VAR 0 5
76359: NOT
76360: OR
76361: IFFALSE 76365
// exit ;
76363: GO 76457
// if GetTaskList ( unit ) then
76365: LD_VAR 0 1
76369: PPUSH
76370: CALL_OW 437
76374: IFFALSE 76457
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76376: LD_STRING e
76378: PUSH
76379: LD_VAR 0 1
76383: PPUSH
76384: CALL_OW 437
76388: PUSH
76389: LD_INT 1
76391: ARRAY
76392: PUSH
76393: LD_INT 1
76395: ARRAY
76396: EQUAL
76397: PUSH
76398: LD_VAR 0 4
76402: PUSH
76403: LD_VAR 0 1
76407: PPUSH
76408: CALL_OW 437
76412: PUSH
76413: LD_INT 1
76415: ARRAY
76416: PUSH
76417: LD_INT 2
76419: ARRAY
76420: EQUAL
76421: AND
76422: PUSH
76423: LD_VAR 0 5
76427: PUSH
76428: LD_VAR 0 1
76432: PPUSH
76433: CALL_OW 437
76437: PUSH
76438: LD_INT 1
76440: ARRAY
76441: PUSH
76442: LD_INT 3
76444: ARRAY
76445: EQUAL
76446: AND
76447: IFFALSE 76457
// result := true end ;
76449: LD_ADDR_VAR 0 3
76453: PUSH
76454: LD_INT 1
76456: ST_TO_ADDR
// end ;
76457: LD_VAR 0 3
76461: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76462: LD_INT 0
76464: PPUSH
// result := false ;
76465: LD_ADDR_VAR 0 4
76469: PUSH
76470: LD_INT 0
76472: ST_TO_ADDR
// if GetTaskList ( unit ) then
76473: LD_VAR 0 1
76477: PPUSH
76478: CALL_OW 437
76482: IFFALSE 76565
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76484: LD_STRING M
76486: PUSH
76487: LD_VAR 0 1
76491: PPUSH
76492: CALL_OW 437
76496: PUSH
76497: LD_INT 1
76499: ARRAY
76500: PUSH
76501: LD_INT 1
76503: ARRAY
76504: EQUAL
76505: PUSH
76506: LD_VAR 0 2
76510: PUSH
76511: LD_VAR 0 1
76515: PPUSH
76516: CALL_OW 437
76520: PUSH
76521: LD_INT 1
76523: ARRAY
76524: PUSH
76525: LD_INT 2
76527: ARRAY
76528: EQUAL
76529: AND
76530: PUSH
76531: LD_VAR 0 3
76535: PUSH
76536: LD_VAR 0 1
76540: PPUSH
76541: CALL_OW 437
76545: PUSH
76546: LD_INT 1
76548: ARRAY
76549: PUSH
76550: LD_INT 3
76552: ARRAY
76553: EQUAL
76554: AND
76555: IFFALSE 76565
// result := true ;
76557: LD_ADDR_VAR 0 4
76561: PUSH
76562: LD_INT 1
76564: ST_TO_ADDR
// end ; end ;
76565: LD_VAR 0 4
76569: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76570: LD_INT 0
76572: PPUSH
76573: PPUSH
76574: PPUSH
76575: PPUSH
// if not unit or not area then
76576: LD_VAR 0 1
76580: NOT
76581: PUSH
76582: LD_VAR 0 2
76586: NOT
76587: OR
76588: IFFALSE 76592
// exit ;
76590: GO 76768
// tmp := AreaToList ( area , i ) ;
76592: LD_ADDR_VAR 0 6
76596: PUSH
76597: LD_VAR 0 2
76601: PPUSH
76602: LD_VAR 0 5
76606: PPUSH
76607: CALL_OW 517
76611: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76612: LD_ADDR_VAR 0 5
76616: PUSH
76617: DOUBLE
76618: LD_INT 1
76620: DEC
76621: ST_TO_ADDR
76622: LD_VAR 0 6
76626: PUSH
76627: LD_INT 1
76629: ARRAY
76630: PUSH
76631: FOR_TO
76632: IFFALSE 76766
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76634: LD_ADDR_VAR 0 7
76638: PUSH
76639: LD_VAR 0 6
76643: PUSH
76644: LD_INT 1
76646: ARRAY
76647: PUSH
76648: LD_VAR 0 5
76652: ARRAY
76653: PUSH
76654: LD_VAR 0 6
76658: PUSH
76659: LD_INT 2
76661: ARRAY
76662: PUSH
76663: LD_VAR 0 5
76667: ARRAY
76668: PUSH
76669: EMPTY
76670: LIST
76671: LIST
76672: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
76673: LD_INT 92
76675: PUSH
76676: LD_VAR 0 7
76680: PUSH
76681: LD_INT 1
76683: ARRAY
76684: PUSH
76685: LD_VAR 0 7
76689: PUSH
76690: LD_INT 2
76692: ARRAY
76693: PUSH
76694: LD_INT 2
76696: PUSH
76697: EMPTY
76698: LIST
76699: LIST
76700: LIST
76701: LIST
76702: PPUSH
76703: CALL_OW 69
76707: PUSH
76708: LD_INT 0
76710: EQUAL
76711: IFFALSE 76764
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76713: LD_VAR 0 1
76717: PPUSH
76718: LD_VAR 0 7
76722: PUSH
76723: LD_INT 1
76725: ARRAY
76726: PPUSH
76727: LD_VAR 0 7
76731: PUSH
76732: LD_INT 2
76734: ARRAY
76735: PPUSH
76736: LD_VAR 0 3
76740: PPUSH
76741: CALL_OW 48
// result := IsPlaced ( unit ) ;
76745: LD_ADDR_VAR 0 4
76749: PUSH
76750: LD_VAR 0 1
76754: PPUSH
76755: CALL_OW 305
76759: ST_TO_ADDR
// exit ;
76760: POP
76761: POP
76762: GO 76768
// end ; end ;
76764: GO 76631
76766: POP
76767: POP
// end ;
76768: LD_VAR 0 4
76772: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76773: LD_INT 0
76775: PPUSH
76776: PPUSH
76777: PPUSH
// if not side or side > 8 then
76778: LD_VAR 0 1
76782: NOT
76783: PUSH
76784: LD_VAR 0 1
76788: PUSH
76789: LD_INT 8
76791: GREATER
76792: OR
76793: IFFALSE 76797
// exit ;
76795: GO 76984
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76797: LD_ADDR_VAR 0 4
76801: PUSH
76802: LD_INT 22
76804: PUSH
76805: LD_VAR 0 1
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: PUSH
76814: LD_INT 21
76816: PUSH
76817: LD_INT 3
76819: PUSH
76820: EMPTY
76821: LIST
76822: LIST
76823: PUSH
76824: EMPTY
76825: LIST
76826: LIST
76827: PPUSH
76828: CALL_OW 69
76832: ST_TO_ADDR
// if not tmp then
76833: LD_VAR 0 4
76837: NOT
76838: IFFALSE 76842
// exit ;
76840: GO 76984
// enable_addtolog := true ;
76842: LD_ADDR_OWVAR 81
76846: PUSH
76847: LD_INT 1
76849: ST_TO_ADDR
// AddToLog ( [ ) ;
76850: LD_STRING [
76852: PPUSH
76853: CALL_OW 561
// for i in tmp do
76857: LD_ADDR_VAR 0 3
76861: PUSH
76862: LD_VAR 0 4
76866: PUSH
76867: FOR_IN
76868: IFFALSE 76975
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76870: LD_STRING [
76872: PUSH
76873: LD_VAR 0 3
76877: PPUSH
76878: CALL_OW 266
76882: STR
76883: PUSH
76884: LD_STRING , 
76886: STR
76887: PUSH
76888: LD_VAR 0 3
76892: PPUSH
76893: CALL_OW 250
76897: STR
76898: PUSH
76899: LD_STRING , 
76901: STR
76902: PUSH
76903: LD_VAR 0 3
76907: PPUSH
76908: CALL_OW 251
76912: STR
76913: PUSH
76914: LD_STRING , 
76916: STR
76917: PUSH
76918: LD_VAR 0 3
76922: PPUSH
76923: CALL_OW 254
76927: STR
76928: PUSH
76929: LD_STRING , 
76931: STR
76932: PUSH
76933: LD_VAR 0 3
76937: PPUSH
76938: LD_INT 1
76940: PPUSH
76941: CALL_OW 268
76945: STR
76946: PUSH
76947: LD_STRING , 
76949: STR
76950: PUSH
76951: LD_VAR 0 3
76955: PPUSH
76956: LD_INT 2
76958: PPUSH
76959: CALL_OW 268
76963: STR
76964: PUSH
76965: LD_STRING ],
76967: STR
76968: PPUSH
76969: CALL_OW 561
// end ;
76973: GO 76867
76975: POP
76976: POP
// AddToLog ( ]; ) ;
76977: LD_STRING ];
76979: PPUSH
76980: CALL_OW 561
// end ;
76984: LD_VAR 0 2
76988: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76989: LD_INT 0
76991: PPUSH
76992: PPUSH
76993: PPUSH
76994: PPUSH
76995: PPUSH
// if not area or not rate or not max then
76996: LD_VAR 0 1
77000: NOT
77001: PUSH
77002: LD_VAR 0 2
77006: NOT
77007: OR
77008: PUSH
77009: LD_VAR 0 4
77013: NOT
77014: OR
77015: IFFALSE 77019
// exit ;
77017: GO 77208
// while 1 do
77019: LD_INT 1
77021: IFFALSE 77208
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77023: LD_ADDR_VAR 0 9
77027: PUSH
77028: LD_VAR 0 1
77032: PPUSH
77033: LD_INT 1
77035: PPUSH
77036: CALL_OW 287
77040: PUSH
77041: LD_INT 10
77043: MUL
77044: ST_TO_ADDR
// r := rate / 10 ;
77045: LD_ADDR_VAR 0 7
77049: PUSH
77050: LD_VAR 0 2
77054: PUSH
77055: LD_INT 10
77057: DIVREAL
77058: ST_TO_ADDR
// time := 1 1$00 ;
77059: LD_ADDR_VAR 0 8
77063: PUSH
77064: LD_INT 2100
77066: ST_TO_ADDR
// if amount < min then
77067: LD_VAR 0 9
77071: PUSH
77072: LD_VAR 0 3
77076: LESS
77077: IFFALSE 77095
// r := r * 2 else
77079: LD_ADDR_VAR 0 7
77083: PUSH
77084: LD_VAR 0 7
77088: PUSH
77089: LD_INT 2
77091: MUL
77092: ST_TO_ADDR
77093: GO 77121
// if amount > max then
77095: LD_VAR 0 9
77099: PUSH
77100: LD_VAR 0 4
77104: GREATER
77105: IFFALSE 77121
// r := r / 2 ;
77107: LD_ADDR_VAR 0 7
77111: PUSH
77112: LD_VAR 0 7
77116: PUSH
77117: LD_INT 2
77119: DIVREAL
77120: ST_TO_ADDR
// time := time / r ;
77121: LD_ADDR_VAR 0 8
77125: PUSH
77126: LD_VAR 0 8
77130: PUSH
77131: LD_VAR 0 7
77135: DIVREAL
77136: ST_TO_ADDR
// if time < 0 then
77137: LD_VAR 0 8
77141: PUSH
77142: LD_INT 0
77144: LESS
77145: IFFALSE 77162
// time := time * - 1 ;
77147: LD_ADDR_VAR 0 8
77151: PUSH
77152: LD_VAR 0 8
77156: PUSH
77157: LD_INT 1
77159: NEG
77160: MUL
77161: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77162: LD_VAR 0 8
77166: PUSH
77167: LD_INT 35
77169: PPUSH
77170: LD_INT 875
77172: PPUSH
77173: CALL_OW 12
77177: PLUS
77178: PPUSH
77179: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77183: LD_INT 1
77185: PPUSH
77186: LD_INT 5
77188: PPUSH
77189: CALL_OW 12
77193: PPUSH
77194: LD_VAR 0 1
77198: PPUSH
77199: LD_INT 1
77201: PPUSH
77202: CALL_OW 55
// end ;
77206: GO 77019
// end ;
77208: LD_VAR 0 5
77212: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77213: LD_INT 0
77215: PPUSH
77216: PPUSH
77217: PPUSH
77218: PPUSH
77219: PPUSH
77220: PPUSH
77221: PPUSH
77222: PPUSH
// if not turrets or not factories then
77223: LD_VAR 0 1
77227: NOT
77228: PUSH
77229: LD_VAR 0 2
77233: NOT
77234: OR
77235: IFFALSE 77239
// exit ;
77237: GO 77546
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77239: LD_ADDR_VAR 0 10
77243: PUSH
77244: LD_INT 5
77246: PUSH
77247: LD_INT 6
77249: PUSH
77250: EMPTY
77251: LIST
77252: LIST
77253: PUSH
77254: LD_INT 2
77256: PUSH
77257: LD_INT 4
77259: PUSH
77260: EMPTY
77261: LIST
77262: LIST
77263: PUSH
77264: LD_INT 3
77266: PUSH
77267: LD_INT 5
77269: PUSH
77270: EMPTY
77271: LIST
77272: LIST
77273: PUSH
77274: EMPTY
77275: LIST
77276: LIST
77277: LIST
77278: PUSH
77279: LD_INT 24
77281: PUSH
77282: LD_INT 25
77284: PUSH
77285: EMPTY
77286: LIST
77287: LIST
77288: PUSH
77289: LD_INT 23
77291: PUSH
77292: LD_INT 27
77294: PUSH
77295: EMPTY
77296: LIST
77297: LIST
77298: PUSH
77299: EMPTY
77300: LIST
77301: LIST
77302: PUSH
77303: LD_INT 42
77305: PUSH
77306: LD_INT 43
77308: PUSH
77309: EMPTY
77310: LIST
77311: LIST
77312: PUSH
77313: LD_INT 44
77315: PUSH
77316: LD_INT 46
77318: PUSH
77319: EMPTY
77320: LIST
77321: LIST
77322: PUSH
77323: LD_INT 45
77325: PUSH
77326: LD_INT 47
77328: PUSH
77329: EMPTY
77330: LIST
77331: LIST
77332: PUSH
77333: EMPTY
77334: LIST
77335: LIST
77336: LIST
77337: PUSH
77338: EMPTY
77339: LIST
77340: LIST
77341: LIST
77342: ST_TO_ADDR
// result := [ ] ;
77343: LD_ADDR_VAR 0 3
77347: PUSH
77348: EMPTY
77349: ST_TO_ADDR
// for i in turrets do
77350: LD_ADDR_VAR 0 4
77354: PUSH
77355: LD_VAR 0 1
77359: PUSH
77360: FOR_IN
77361: IFFALSE 77544
// begin nat := GetNation ( i ) ;
77363: LD_ADDR_VAR 0 7
77367: PUSH
77368: LD_VAR 0 4
77372: PPUSH
77373: CALL_OW 248
77377: ST_TO_ADDR
// weapon := 0 ;
77378: LD_ADDR_VAR 0 8
77382: PUSH
77383: LD_INT 0
77385: ST_TO_ADDR
// if not nat then
77386: LD_VAR 0 7
77390: NOT
77391: IFFALSE 77395
// continue ;
77393: GO 77360
// for j in list [ nat ] do
77395: LD_ADDR_VAR 0 5
77399: PUSH
77400: LD_VAR 0 10
77404: PUSH
77405: LD_VAR 0 7
77409: ARRAY
77410: PUSH
77411: FOR_IN
77412: IFFALSE 77453
// if GetBWeapon ( i ) = j [ 1 ] then
77414: LD_VAR 0 4
77418: PPUSH
77419: CALL_OW 269
77423: PUSH
77424: LD_VAR 0 5
77428: PUSH
77429: LD_INT 1
77431: ARRAY
77432: EQUAL
77433: IFFALSE 77451
// begin weapon := j [ 2 ] ;
77435: LD_ADDR_VAR 0 8
77439: PUSH
77440: LD_VAR 0 5
77444: PUSH
77445: LD_INT 2
77447: ARRAY
77448: ST_TO_ADDR
// break ;
77449: GO 77453
// end ;
77451: GO 77411
77453: POP
77454: POP
// if not weapon then
77455: LD_VAR 0 8
77459: NOT
77460: IFFALSE 77464
// continue ;
77462: GO 77360
// for k in factories do
77464: LD_ADDR_VAR 0 6
77468: PUSH
77469: LD_VAR 0 2
77473: PUSH
77474: FOR_IN
77475: IFFALSE 77540
// begin weapons := AvailableWeaponList ( k ) ;
77477: LD_ADDR_VAR 0 9
77481: PUSH
77482: LD_VAR 0 6
77486: PPUSH
77487: CALL_OW 478
77491: ST_TO_ADDR
// if not weapons then
77492: LD_VAR 0 9
77496: NOT
77497: IFFALSE 77501
// continue ;
77499: GO 77474
// if weapon in weapons then
77501: LD_VAR 0 8
77505: PUSH
77506: LD_VAR 0 9
77510: IN
77511: IFFALSE 77538
// begin result := [ i , weapon ] ;
77513: LD_ADDR_VAR 0 3
77517: PUSH
77518: LD_VAR 0 4
77522: PUSH
77523: LD_VAR 0 8
77527: PUSH
77528: EMPTY
77529: LIST
77530: LIST
77531: ST_TO_ADDR
// exit ;
77532: POP
77533: POP
77534: POP
77535: POP
77536: GO 77546
// end ; end ;
77538: GO 77474
77540: POP
77541: POP
// end ;
77542: GO 77360
77544: POP
77545: POP
// end ;
77546: LD_VAR 0 3
77550: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77551: LD_INT 0
77553: PPUSH
// if not side or side > 8 then
77554: LD_VAR 0 3
77558: NOT
77559: PUSH
77560: LD_VAR 0 3
77564: PUSH
77565: LD_INT 8
77567: GREATER
77568: OR
77569: IFFALSE 77573
// exit ;
77571: GO 77632
// if not range then
77573: LD_VAR 0 4
77577: NOT
77578: IFFALSE 77589
// range := - 12 ;
77580: LD_ADDR_VAR 0 4
77584: PUSH
77585: LD_INT 12
77587: NEG
77588: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77589: LD_VAR 0 1
77593: PPUSH
77594: LD_VAR 0 2
77598: PPUSH
77599: LD_VAR 0 3
77603: PPUSH
77604: LD_VAR 0 4
77608: PPUSH
77609: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77613: LD_VAR 0 1
77617: PPUSH
77618: LD_VAR 0 2
77622: PPUSH
77623: LD_VAR 0 3
77627: PPUSH
77628: CALL_OW 331
// end ;
77632: LD_VAR 0 5
77636: RET
// export function Video ( mode ) ; begin
77637: LD_INT 0
77639: PPUSH
// ingame_video = mode ;
77640: LD_ADDR_OWVAR 52
77644: PUSH
77645: LD_VAR 0 1
77649: ST_TO_ADDR
// interface_hidden = mode ;
77650: LD_ADDR_OWVAR 54
77654: PUSH
77655: LD_VAR 0 1
77659: ST_TO_ADDR
// end ;
77660: LD_VAR 0 2
77664: RET
// export function Join ( array , element ) ; begin
77665: LD_INT 0
77667: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77668: LD_ADDR_VAR 0 3
77672: PUSH
77673: LD_VAR 0 1
77677: PPUSH
77678: LD_VAR 0 1
77682: PUSH
77683: LD_INT 1
77685: PLUS
77686: PPUSH
77687: LD_VAR 0 2
77691: PPUSH
77692: CALL_OW 1
77696: ST_TO_ADDR
// end ;
77697: LD_VAR 0 3
77701: RET
// export function JoinUnion ( array , element ) ; begin
77702: LD_INT 0
77704: PPUSH
// result := array union element ;
77705: LD_ADDR_VAR 0 3
77709: PUSH
77710: LD_VAR 0 1
77714: PUSH
77715: LD_VAR 0 2
77719: UNION
77720: ST_TO_ADDR
// end ;
77721: LD_VAR 0 3
77725: RET
// export function GetBehemoths ( side ) ; begin
77726: LD_INT 0
77728: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77729: LD_ADDR_VAR 0 2
77733: PUSH
77734: LD_INT 22
77736: PUSH
77737: LD_VAR 0 1
77741: PUSH
77742: EMPTY
77743: LIST
77744: LIST
77745: PUSH
77746: LD_INT 31
77748: PUSH
77749: LD_INT 25
77751: PUSH
77752: EMPTY
77753: LIST
77754: LIST
77755: PUSH
77756: EMPTY
77757: LIST
77758: LIST
77759: PPUSH
77760: CALL_OW 69
77764: ST_TO_ADDR
// end ;
77765: LD_VAR 0 2
77769: RET
// export function Shuffle ( array ) ; var i , index ; begin
77770: LD_INT 0
77772: PPUSH
77773: PPUSH
77774: PPUSH
// result := [ ] ;
77775: LD_ADDR_VAR 0 2
77779: PUSH
77780: EMPTY
77781: ST_TO_ADDR
// if not array then
77782: LD_VAR 0 1
77786: NOT
77787: IFFALSE 77791
// exit ;
77789: GO 77890
// Randomize ;
77791: CALL_OW 10
// for i = array downto 1 do
77795: LD_ADDR_VAR 0 3
77799: PUSH
77800: DOUBLE
77801: LD_VAR 0 1
77805: INC
77806: ST_TO_ADDR
77807: LD_INT 1
77809: PUSH
77810: FOR_DOWNTO
77811: IFFALSE 77888
// begin index := rand ( 1 , array ) ;
77813: LD_ADDR_VAR 0 4
77817: PUSH
77818: LD_INT 1
77820: PPUSH
77821: LD_VAR 0 1
77825: PPUSH
77826: CALL_OW 12
77830: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77831: LD_ADDR_VAR 0 2
77835: PUSH
77836: LD_VAR 0 2
77840: PPUSH
77841: LD_VAR 0 2
77845: PUSH
77846: LD_INT 1
77848: PLUS
77849: PPUSH
77850: LD_VAR 0 1
77854: PUSH
77855: LD_VAR 0 4
77859: ARRAY
77860: PPUSH
77861: CALL_OW 2
77865: ST_TO_ADDR
// array := Delete ( array , index ) ;
77866: LD_ADDR_VAR 0 1
77870: PUSH
77871: LD_VAR 0 1
77875: PPUSH
77876: LD_VAR 0 4
77880: PPUSH
77881: CALL_OW 3
77885: ST_TO_ADDR
// end ;
77886: GO 77810
77888: POP
77889: POP
// end ;
77890: LD_VAR 0 2
77894: RET
// export function GetBaseMaterials ( base ) ; begin
77895: LD_INT 0
77897: PPUSH
// result := [ 0 , 0 , 0 ] ;
77898: LD_ADDR_VAR 0 2
77902: PUSH
77903: LD_INT 0
77905: PUSH
77906: LD_INT 0
77908: PUSH
77909: LD_INT 0
77911: PUSH
77912: EMPTY
77913: LIST
77914: LIST
77915: LIST
77916: ST_TO_ADDR
// if not base then
77917: LD_VAR 0 1
77921: NOT
77922: IFFALSE 77926
// exit ;
77924: GO 77975
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77926: LD_ADDR_VAR 0 2
77930: PUSH
77931: LD_VAR 0 1
77935: PPUSH
77936: LD_INT 1
77938: PPUSH
77939: CALL_OW 275
77943: PUSH
77944: LD_VAR 0 1
77948: PPUSH
77949: LD_INT 2
77951: PPUSH
77952: CALL_OW 275
77956: PUSH
77957: LD_VAR 0 1
77961: PPUSH
77962: LD_INT 3
77964: PPUSH
77965: CALL_OW 275
77969: PUSH
77970: EMPTY
77971: LIST
77972: LIST
77973: LIST
77974: ST_TO_ADDR
// end ;
77975: LD_VAR 0 2
77979: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77980: LD_INT 0
77982: PPUSH
77983: PPUSH
// result := array ;
77984: LD_ADDR_VAR 0 3
77988: PUSH
77989: LD_VAR 0 1
77993: ST_TO_ADDR
// if size >= result then
77994: LD_VAR 0 2
77998: PUSH
77999: LD_VAR 0 3
78003: GREATEREQUAL
78004: IFFALSE 78008
// exit ;
78006: GO 78058
// if size then
78008: LD_VAR 0 2
78012: IFFALSE 78058
// for i := array downto size do
78014: LD_ADDR_VAR 0 4
78018: PUSH
78019: DOUBLE
78020: LD_VAR 0 1
78024: INC
78025: ST_TO_ADDR
78026: LD_VAR 0 2
78030: PUSH
78031: FOR_DOWNTO
78032: IFFALSE 78056
// result := Delete ( result , result ) ;
78034: LD_ADDR_VAR 0 3
78038: PUSH
78039: LD_VAR 0 3
78043: PPUSH
78044: LD_VAR 0 3
78048: PPUSH
78049: CALL_OW 3
78053: ST_TO_ADDR
78054: GO 78031
78056: POP
78057: POP
// end ;
78058: LD_VAR 0 3
78062: RET
// export function ComExit ( unit ) ; var tmp ; begin
78063: LD_INT 0
78065: PPUSH
78066: PPUSH
// if not IsInUnit ( unit ) then
78067: LD_VAR 0 1
78071: PPUSH
78072: CALL_OW 310
78076: NOT
78077: IFFALSE 78081
// exit ;
78079: GO 78141
// tmp := IsInUnit ( unit ) ;
78081: LD_ADDR_VAR 0 3
78085: PUSH
78086: LD_VAR 0 1
78090: PPUSH
78091: CALL_OW 310
78095: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78096: LD_VAR 0 3
78100: PPUSH
78101: CALL_OW 247
78105: PUSH
78106: LD_INT 2
78108: EQUAL
78109: IFFALSE 78122
// ComExitVehicle ( unit ) else
78111: LD_VAR 0 1
78115: PPUSH
78116: CALL_OW 121
78120: GO 78131
// ComExitBuilding ( unit ) ;
78122: LD_VAR 0 1
78126: PPUSH
78127: CALL_OW 122
// result := tmp ;
78131: LD_ADDR_VAR 0 2
78135: PUSH
78136: LD_VAR 0 3
78140: ST_TO_ADDR
// end ;
78141: LD_VAR 0 2
78145: RET
// export function ComExitAll ( units ) ; var i ; begin
78146: LD_INT 0
78148: PPUSH
78149: PPUSH
// if not units then
78150: LD_VAR 0 1
78154: NOT
78155: IFFALSE 78159
// exit ;
78157: GO 78185
// for i in units do
78159: LD_ADDR_VAR 0 3
78163: PUSH
78164: LD_VAR 0 1
78168: PUSH
78169: FOR_IN
78170: IFFALSE 78183
// ComExit ( i ) ;
78172: LD_VAR 0 3
78176: PPUSH
78177: CALL 78063 0 1
78181: GO 78169
78183: POP
78184: POP
// end ;
78185: LD_VAR 0 2
78189: RET
// export function ResetHc ; begin
78190: LD_INT 0
78192: PPUSH
// InitHc ;
78193: CALL_OW 19
// hc_importance := 0 ;
78197: LD_ADDR_OWVAR 32
78201: PUSH
78202: LD_INT 0
78204: ST_TO_ADDR
// end ;
78205: LD_VAR 0 1
78209: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78210: LD_INT 0
78212: PPUSH
78213: PPUSH
78214: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78215: LD_ADDR_VAR 0 6
78219: PUSH
78220: LD_VAR 0 1
78224: PUSH
78225: LD_VAR 0 3
78229: PLUS
78230: PUSH
78231: LD_INT 2
78233: DIV
78234: ST_TO_ADDR
// if _x < 0 then
78235: LD_VAR 0 6
78239: PUSH
78240: LD_INT 0
78242: LESS
78243: IFFALSE 78260
// _x := _x * - 1 ;
78245: LD_ADDR_VAR 0 6
78249: PUSH
78250: LD_VAR 0 6
78254: PUSH
78255: LD_INT 1
78257: NEG
78258: MUL
78259: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78260: LD_ADDR_VAR 0 7
78264: PUSH
78265: LD_VAR 0 2
78269: PUSH
78270: LD_VAR 0 4
78274: PLUS
78275: PUSH
78276: LD_INT 2
78278: DIV
78279: ST_TO_ADDR
// if _y < 0 then
78280: LD_VAR 0 7
78284: PUSH
78285: LD_INT 0
78287: LESS
78288: IFFALSE 78305
// _y := _y * - 1 ;
78290: LD_ADDR_VAR 0 7
78294: PUSH
78295: LD_VAR 0 7
78299: PUSH
78300: LD_INT 1
78302: NEG
78303: MUL
78304: ST_TO_ADDR
// result := [ _x , _y ] ;
78305: LD_ADDR_VAR 0 5
78309: PUSH
78310: LD_VAR 0 6
78314: PUSH
78315: LD_VAR 0 7
78319: PUSH
78320: EMPTY
78321: LIST
78322: LIST
78323: ST_TO_ADDR
// end ;
78324: LD_VAR 0 5
78328: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78329: LD_INT 0
78331: PPUSH
78332: PPUSH
78333: PPUSH
78334: PPUSH
// task := GetTaskList ( unit ) ;
78335: LD_ADDR_VAR 0 7
78339: PUSH
78340: LD_VAR 0 1
78344: PPUSH
78345: CALL_OW 437
78349: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78350: LD_VAR 0 7
78354: NOT
78355: PUSH
78356: LD_VAR 0 1
78360: PPUSH
78361: LD_VAR 0 2
78365: PPUSH
78366: CALL_OW 308
78370: NOT
78371: AND
78372: IFFALSE 78376
// exit ;
78374: GO 78494
// if IsInArea ( unit , area ) then
78376: LD_VAR 0 1
78380: PPUSH
78381: LD_VAR 0 2
78385: PPUSH
78386: CALL_OW 308
78390: IFFALSE 78408
// begin ComMoveToArea ( unit , goAway ) ;
78392: LD_VAR 0 1
78396: PPUSH
78397: LD_VAR 0 3
78401: PPUSH
78402: CALL_OW 113
// exit ;
78406: GO 78494
// end ; if task [ 1 ] [ 1 ] <> M then
78408: LD_VAR 0 7
78412: PUSH
78413: LD_INT 1
78415: ARRAY
78416: PUSH
78417: LD_INT 1
78419: ARRAY
78420: PUSH
78421: LD_STRING M
78423: NONEQUAL
78424: IFFALSE 78428
// exit ;
78426: GO 78494
// x := task [ 1 ] [ 2 ] ;
78428: LD_ADDR_VAR 0 5
78432: PUSH
78433: LD_VAR 0 7
78437: PUSH
78438: LD_INT 1
78440: ARRAY
78441: PUSH
78442: LD_INT 2
78444: ARRAY
78445: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78446: LD_ADDR_VAR 0 6
78450: PUSH
78451: LD_VAR 0 7
78455: PUSH
78456: LD_INT 1
78458: ARRAY
78459: PUSH
78460: LD_INT 3
78462: ARRAY
78463: ST_TO_ADDR
// if InArea ( x , y , area ) then
78464: LD_VAR 0 5
78468: PPUSH
78469: LD_VAR 0 6
78473: PPUSH
78474: LD_VAR 0 2
78478: PPUSH
78479: CALL_OW 309
78483: IFFALSE 78494
// ComStop ( unit ) ;
78485: LD_VAR 0 1
78489: PPUSH
78490: CALL_OW 141
// end ;
78494: LD_VAR 0 4
78498: RET
// export function Abs ( value ) ; begin
78499: LD_INT 0
78501: PPUSH
// result := value ;
78502: LD_ADDR_VAR 0 2
78506: PUSH
78507: LD_VAR 0 1
78511: ST_TO_ADDR
// if value < 0 then
78512: LD_VAR 0 1
78516: PUSH
78517: LD_INT 0
78519: LESS
78520: IFFALSE 78537
// result := value * - 1 ;
78522: LD_ADDR_VAR 0 2
78526: PUSH
78527: LD_VAR 0 1
78531: PUSH
78532: LD_INT 1
78534: NEG
78535: MUL
78536: ST_TO_ADDR
// end ;
78537: LD_VAR 0 2
78541: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78542: LD_INT 0
78544: PPUSH
78545: PPUSH
78546: PPUSH
78547: PPUSH
78548: PPUSH
78549: PPUSH
78550: PPUSH
78551: PPUSH
// if not unit or not building then
78552: LD_VAR 0 1
78556: NOT
78557: PUSH
78558: LD_VAR 0 2
78562: NOT
78563: OR
78564: IFFALSE 78568
// exit ;
78566: GO 78794
// x := GetX ( building ) ;
78568: LD_ADDR_VAR 0 4
78572: PUSH
78573: LD_VAR 0 2
78577: PPUSH
78578: CALL_OW 250
78582: ST_TO_ADDR
// y := GetY ( building ) ;
78583: LD_ADDR_VAR 0 6
78587: PUSH
78588: LD_VAR 0 2
78592: PPUSH
78593: CALL_OW 251
78597: ST_TO_ADDR
// d := GetDir ( building ) ;
78598: LD_ADDR_VAR 0 8
78602: PUSH
78603: LD_VAR 0 2
78607: PPUSH
78608: CALL_OW 254
78612: ST_TO_ADDR
// r := 4 ;
78613: LD_ADDR_VAR 0 9
78617: PUSH
78618: LD_INT 4
78620: ST_TO_ADDR
// for i := 1 to 5 do
78621: LD_ADDR_VAR 0 10
78625: PUSH
78626: DOUBLE
78627: LD_INT 1
78629: DEC
78630: ST_TO_ADDR
78631: LD_INT 5
78633: PUSH
78634: FOR_TO
78635: IFFALSE 78792
// begin _x := ShiftX ( x , d , r + i ) ;
78637: LD_ADDR_VAR 0 5
78641: PUSH
78642: LD_VAR 0 4
78646: PPUSH
78647: LD_VAR 0 8
78651: PPUSH
78652: LD_VAR 0 9
78656: PUSH
78657: LD_VAR 0 10
78661: PLUS
78662: PPUSH
78663: CALL_OW 272
78667: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78668: LD_ADDR_VAR 0 7
78672: PUSH
78673: LD_VAR 0 6
78677: PPUSH
78678: LD_VAR 0 8
78682: PPUSH
78683: LD_VAR 0 9
78687: PUSH
78688: LD_VAR 0 10
78692: PLUS
78693: PPUSH
78694: CALL_OW 273
78698: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78699: LD_VAR 0 5
78703: PPUSH
78704: LD_VAR 0 7
78708: PPUSH
78709: CALL_OW 488
78713: PUSH
78714: LD_VAR 0 5
78718: PPUSH
78719: LD_VAR 0 7
78723: PPUSH
78724: CALL_OW 428
78728: PPUSH
78729: CALL_OW 247
78733: PUSH
78734: LD_INT 3
78736: PUSH
78737: LD_INT 2
78739: PUSH
78740: EMPTY
78741: LIST
78742: LIST
78743: IN
78744: NOT
78745: AND
78746: IFFALSE 78790
// begin ComMoveXY ( unit , _x , _y ) ;
78748: LD_VAR 0 1
78752: PPUSH
78753: LD_VAR 0 5
78757: PPUSH
78758: LD_VAR 0 7
78762: PPUSH
78763: CALL_OW 111
// result := [ _x , _y ] ;
78767: LD_ADDR_VAR 0 3
78771: PUSH
78772: LD_VAR 0 5
78776: PUSH
78777: LD_VAR 0 7
78781: PUSH
78782: EMPTY
78783: LIST
78784: LIST
78785: ST_TO_ADDR
// exit ;
78786: POP
78787: POP
78788: GO 78794
// end ; end ;
78790: GO 78634
78792: POP
78793: POP
// end ;
78794: LD_VAR 0 3
78798: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78799: LD_INT 0
78801: PPUSH
78802: PPUSH
78803: PPUSH
// result := 0 ;
78804: LD_ADDR_VAR 0 3
78808: PUSH
78809: LD_INT 0
78811: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78812: LD_VAR 0 1
78816: PUSH
78817: LD_INT 0
78819: LESS
78820: PUSH
78821: LD_VAR 0 1
78825: PUSH
78826: LD_INT 8
78828: GREATER
78829: OR
78830: PUSH
78831: LD_VAR 0 2
78835: PUSH
78836: LD_INT 0
78838: LESS
78839: OR
78840: PUSH
78841: LD_VAR 0 2
78845: PUSH
78846: LD_INT 8
78848: GREATER
78849: OR
78850: IFFALSE 78854
// exit ;
78852: GO 78929
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78854: LD_ADDR_VAR 0 4
78858: PUSH
78859: LD_INT 22
78861: PUSH
78862: LD_VAR 0 2
78866: PUSH
78867: EMPTY
78868: LIST
78869: LIST
78870: PPUSH
78871: CALL_OW 69
78875: PUSH
78876: FOR_IN
78877: IFFALSE 78927
// begin un := UnitShoot ( i ) ;
78879: LD_ADDR_VAR 0 5
78883: PUSH
78884: LD_VAR 0 4
78888: PPUSH
78889: CALL_OW 504
78893: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78894: LD_VAR 0 5
78898: PPUSH
78899: CALL_OW 255
78903: PUSH
78904: LD_VAR 0 1
78908: EQUAL
78909: IFFALSE 78925
// begin result := un ;
78911: LD_ADDR_VAR 0 3
78915: PUSH
78916: LD_VAR 0 5
78920: ST_TO_ADDR
// exit ;
78921: POP
78922: POP
78923: GO 78929
// end ; end ;
78925: GO 78876
78927: POP
78928: POP
// end ;
78929: LD_VAR 0 3
78933: RET
// export function GetCargoBay ( units ) ; begin
78934: LD_INT 0
78936: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78937: LD_ADDR_VAR 0 2
78941: PUSH
78942: LD_VAR 0 1
78946: PPUSH
78947: LD_INT 2
78949: PUSH
78950: LD_INT 34
78952: PUSH
78953: LD_INT 12
78955: PUSH
78956: EMPTY
78957: LIST
78958: LIST
78959: PUSH
78960: LD_INT 34
78962: PUSH
78963: LD_INT 51
78965: PUSH
78966: EMPTY
78967: LIST
78968: LIST
78969: PUSH
78970: LD_INT 34
78972: PUSH
78973: LD_INT 32
78975: PUSH
78976: EMPTY
78977: LIST
78978: LIST
78979: PUSH
78980: LD_INT 34
78982: PUSH
78983: LD_INT 89
78985: PUSH
78986: EMPTY
78987: LIST
78988: LIST
78989: PUSH
78990: EMPTY
78991: LIST
78992: LIST
78993: LIST
78994: LIST
78995: LIST
78996: PPUSH
78997: CALL_OW 72
79001: ST_TO_ADDR
// end ;
79002: LD_VAR 0 2
79006: RET
// export function Negate ( value ) ; begin
79007: LD_INT 0
79009: PPUSH
// result := not value ;
79010: LD_ADDR_VAR 0 2
79014: PUSH
79015: LD_VAR 0 1
79019: NOT
79020: ST_TO_ADDR
// end ;
79021: LD_VAR 0 2
79025: RET
// export function Inc ( value ) ; begin
79026: LD_INT 0
79028: PPUSH
// result := value + 1 ;
79029: LD_ADDR_VAR 0 2
79033: PUSH
79034: LD_VAR 0 1
79038: PUSH
79039: LD_INT 1
79041: PLUS
79042: ST_TO_ADDR
// end ;
79043: LD_VAR 0 2
79047: RET
// export function Dec ( value ) ; begin
79048: LD_INT 0
79050: PPUSH
// result := value - 1 ;
79051: LD_ADDR_VAR 0 2
79055: PUSH
79056: LD_VAR 0 1
79060: PUSH
79061: LD_INT 1
79063: MINUS
79064: ST_TO_ADDR
// end ;
79065: LD_VAR 0 2
79069: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79070: LD_INT 0
79072: PPUSH
79073: PPUSH
79074: PPUSH
79075: PPUSH
79076: PPUSH
79077: PPUSH
79078: PPUSH
79079: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79080: LD_VAR 0 1
79084: PPUSH
79085: LD_VAR 0 2
79089: PPUSH
79090: CALL_OW 488
79094: NOT
79095: PUSH
79096: LD_VAR 0 3
79100: PPUSH
79101: LD_VAR 0 4
79105: PPUSH
79106: CALL_OW 488
79110: NOT
79111: OR
79112: IFFALSE 79125
// begin result := - 1 ;
79114: LD_ADDR_VAR 0 5
79118: PUSH
79119: LD_INT 1
79121: NEG
79122: ST_TO_ADDR
// exit ;
79123: GO 79360
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79125: LD_ADDR_VAR 0 12
79129: PUSH
79130: LD_VAR 0 1
79134: PPUSH
79135: LD_VAR 0 2
79139: PPUSH
79140: LD_VAR 0 3
79144: PPUSH
79145: LD_VAR 0 4
79149: PPUSH
79150: CALL 78210 0 4
79154: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79155: LD_ADDR_VAR 0 11
79159: PUSH
79160: LD_VAR 0 1
79164: PPUSH
79165: LD_VAR 0 2
79169: PPUSH
79170: LD_VAR 0 12
79174: PUSH
79175: LD_INT 1
79177: ARRAY
79178: PPUSH
79179: LD_VAR 0 12
79183: PUSH
79184: LD_INT 2
79186: ARRAY
79187: PPUSH
79188: CALL_OW 298
79192: ST_TO_ADDR
// distance := 9999 ;
79193: LD_ADDR_VAR 0 10
79197: PUSH
79198: LD_INT 9999
79200: ST_TO_ADDR
// for i := 0 to 5 do
79201: LD_ADDR_VAR 0 6
79205: PUSH
79206: DOUBLE
79207: LD_INT 0
79209: DEC
79210: ST_TO_ADDR
79211: LD_INT 5
79213: PUSH
79214: FOR_TO
79215: IFFALSE 79358
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79217: LD_ADDR_VAR 0 7
79221: PUSH
79222: LD_VAR 0 1
79226: PPUSH
79227: LD_VAR 0 6
79231: PPUSH
79232: LD_VAR 0 11
79236: PPUSH
79237: CALL_OW 272
79241: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79242: LD_ADDR_VAR 0 8
79246: PUSH
79247: LD_VAR 0 2
79251: PPUSH
79252: LD_VAR 0 6
79256: PPUSH
79257: LD_VAR 0 11
79261: PPUSH
79262: CALL_OW 273
79266: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79267: LD_VAR 0 7
79271: PPUSH
79272: LD_VAR 0 8
79276: PPUSH
79277: CALL_OW 488
79281: NOT
79282: IFFALSE 79286
// continue ;
79284: GO 79214
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79286: LD_ADDR_VAR 0 9
79290: PUSH
79291: LD_VAR 0 12
79295: PUSH
79296: LD_INT 1
79298: ARRAY
79299: PPUSH
79300: LD_VAR 0 12
79304: PUSH
79305: LD_INT 2
79307: ARRAY
79308: PPUSH
79309: LD_VAR 0 7
79313: PPUSH
79314: LD_VAR 0 8
79318: PPUSH
79319: CALL_OW 298
79323: ST_TO_ADDR
// if tmp < distance then
79324: LD_VAR 0 9
79328: PUSH
79329: LD_VAR 0 10
79333: LESS
79334: IFFALSE 79356
// begin result := i ;
79336: LD_ADDR_VAR 0 5
79340: PUSH
79341: LD_VAR 0 6
79345: ST_TO_ADDR
// distance := tmp ;
79346: LD_ADDR_VAR 0 10
79350: PUSH
79351: LD_VAR 0 9
79355: ST_TO_ADDR
// end ; end ;
79356: GO 79214
79358: POP
79359: POP
// end ;
79360: LD_VAR 0 5
79364: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79365: LD_INT 0
79367: PPUSH
79368: PPUSH
// if not driver or not IsInUnit ( driver ) then
79369: LD_VAR 0 1
79373: NOT
79374: PUSH
79375: LD_VAR 0 1
79379: PPUSH
79380: CALL_OW 310
79384: NOT
79385: OR
79386: IFFALSE 79390
// exit ;
79388: GO 79480
// vehicle := IsInUnit ( driver ) ;
79390: LD_ADDR_VAR 0 3
79394: PUSH
79395: LD_VAR 0 1
79399: PPUSH
79400: CALL_OW 310
79404: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79405: LD_VAR 0 1
79409: PPUSH
79410: LD_STRING \
79412: PUSH
79413: LD_INT 0
79415: PUSH
79416: LD_INT 0
79418: PUSH
79419: LD_INT 0
79421: PUSH
79422: LD_INT 0
79424: PUSH
79425: LD_INT 0
79427: PUSH
79428: LD_INT 0
79430: PUSH
79431: EMPTY
79432: LIST
79433: LIST
79434: LIST
79435: LIST
79436: LIST
79437: LIST
79438: LIST
79439: PUSH
79440: LD_STRING E
79442: PUSH
79443: LD_INT 0
79445: PUSH
79446: LD_INT 0
79448: PUSH
79449: LD_VAR 0 3
79453: PUSH
79454: LD_INT 0
79456: PUSH
79457: LD_INT 0
79459: PUSH
79460: LD_INT 0
79462: PUSH
79463: EMPTY
79464: LIST
79465: LIST
79466: LIST
79467: LIST
79468: LIST
79469: LIST
79470: LIST
79471: PUSH
79472: EMPTY
79473: LIST
79474: LIST
79475: PPUSH
79476: CALL_OW 446
// end ;
79480: LD_VAR 0 2
79484: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79485: LD_INT 0
79487: PPUSH
79488: PPUSH
// if not driver or not IsInUnit ( driver ) then
79489: LD_VAR 0 1
79493: NOT
79494: PUSH
79495: LD_VAR 0 1
79499: PPUSH
79500: CALL_OW 310
79504: NOT
79505: OR
79506: IFFALSE 79510
// exit ;
79508: GO 79600
// vehicle := IsInUnit ( driver ) ;
79510: LD_ADDR_VAR 0 3
79514: PUSH
79515: LD_VAR 0 1
79519: PPUSH
79520: CALL_OW 310
79524: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79525: LD_VAR 0 1
79529: PPUSH
79530: LD_STRING \
79532: PUSH
79533: LD_INT 0
79535: PUSH
79536: LD_INT 0
79538: PUSH
79539: LD_INT 0
79541: PUSH
79542: LD_INT 0
79544: PUSH
79545: LD_INT 0
79547: PUSH
79548: LD_INT 0
79550: PUSH
79551: EMPTY
79552: LIST
79553: LIST
79554: LIST
79555: LIST
79556: LIST
79557: LIST
79558: LIST
79559: PUSH
79560: LD_STRING E
79562: PUSH
79563: LD_INT 0
79565: PUSH
79566: LD_INT 0
79568: PUSH
79569: LD_VAR 0 3
79573: PUSH
79574: LD_INT 0
79576: PUSH
79577: LD_INT 0
79579: PUSH
79580: LD_INT 0
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: LIST
79587: LIST
79588: LIST
79589: LIST
79590: LIST
79591: PUSH
79592: EMPTY
79593: LIST
79594: LIST
79595: PPUSH
79596: CALL_OW 447
// end ;
79600: LD_VAR 0 2
79604: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79605: LD_INT 0
79607: PPUSH
79608: PPUSH
79609: PPUSH
// tmp := [ ] ;
79610: LD_ADDR_VAR 0 5
79614: PUSH
79615: EMPTY
79616: ST_TO_ADDR
// for i in units do
79617: LD_ADDR_VAR 0 4
79621: PUSH
79622: LD_VAR 0 1
79626: PUSH
79627: FOR_IN
79628: IFFALSE 79666
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79630: LD_ADDR_VAR 0 5
79634: PUSH
79635: LD_VAR 0 5
79639: PPUSH
79640: LD_VAR 0 5
79644: PUSH
79645: LD_INT 1
79647: PLUS
79648: PPUSH
79649: LD_VAR 0 4
79653: PPUSH
79654: CALL_OW 256
79658: PPUSH
79659: CALL_OW 2
79663: ST_TO_ADDR
79664: GO 79627
79666: POP
79667: POP
// if not tmp then
79668: LD_VAR 0 5
79672: NOT
79673: IFFALSE 79677
// exit ;
79675: GO 79725
// if asc then
79677: LD_VAR 0 2
79681: IFFALSE 79705
// result := SortListByListAsc ( units , tmp ) else
79683: LD_ADDR_VAR 0 3
79687: PUSH
79688: LD_VAR 0 1
79692: PPUSH
79693: LD_VAR 0 5
79697: PPUSH
79698: CALL_OW 76
79702: ST_TO_ADDR
79703: GO 79725
// result := SortListByListDesc ( units , tmp ) ;
79705: LD_ADDR_VAR 0 3
79709: PUSH
79710: LD_VAR 0 1
79714: PPUSH
79715: LD_VAR 0 5
79719: PPUSH
79720: CALL_OW 77
79724: ST_TO_ADDR
// end ;
79725: LD_VAR 0 3
79729: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79730: LD_INT 0
79732: PPUSH
79733: PPUSH
// task := GetTaskList ( mech ) ;
79734: LD_ADDR_VAR 0 4
79738: PUSH
79739: LD_VAR 0 1
79743: PPUSH
79744: CALL_OW 437
79748: ST_TO_ADDR
// if not task then
79749: LD_VAR 0 4
79753: NOT
79754: IFFALSE 79758
// exit ;
79756: GO 79800
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79758: LD_ADDR_VAR 0 3
79762: PUSH
79763: LD_VAR 0 4
79767: PUSH
79768: LD_INT 1
79770: ARRAY
79771: PUSH
79772: LD_INT 1
79774: ARRAY
79775: PUSH
79776: LD_STRING r
79778: EQUAL
79779: PUSH
79780: LD_VAR 0 4
79784: PUSH
79785: LD_INT 1
79787: ARRAY
79788: PUSH
79789: LD_INT 4
79791: ARRAY
79792: PUSH
79793: LD_VAR 0 2
79797: EQUAL
79798: AND
79799: ST_TO_ADDR
// end ;
79800: LD_VAR 0 3
79804: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79805: LD_INT 0
79807: PPUSH
// SetDir ( unit , d ) ;
79808: LD_VAR 0 1
79812: PPUSH
79813: LD_VAR 0 4
79817: PPUSH
79818: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79822: LD_VAR 0 1
79826: PPUSH
79827: LD_VAR 0 2
79831: PPUSH
79832: LD_VAR 0 3
79836: PPUSH
79837: LD_VAR 0 5
79841: PPUSH
79842: CALL_OW 48
// end ;
79846: LD_VAR 0 6
79850: RET
// export function ToNaturalNumber ( number ) ; begin
79851: LD_INT 0
79853: PPUSH
// result := number div 1 ;
79854: LD_ADDR_VAR 0 2
79858: PUSH
79859: LD_VAR 0 1
79863: PUSH
79864: LD_INT 1
79866: DIV
79867: ST_TO_ADDR
// if number < 0 then
79868: LD_VAR 0 1
79872: PUSH
79873: LD_INT 0
79875: LESS
79876: IFFALSE 79886
// result := 0 ;
79878: LD_ADDR_VAR 0 2
79882: PUSH
79883: LD_INT 0
79885: ST_TO_ADDR
// end ;
79886: LD_VAR 0 2
79890: RET
// export function SortByClass ( units , class ) ; var un ; begin
79891: LD_INT 0
79893: PPUSH
79894: PPUSH
// if not units or not class then
79895: LD_VAR 0 1
79899: NOT
79900: PUSH
79901: LD_VAR 0 2
79905: NOT
79906: OR
79907: IFFALSE 79911
// exit ;
79909: GO 80006
// result := [ ] ;
79911: LD_ADDR_VAR 0 3
79915: PUSH
79916: EMPTY
79917: ST_TO_ADDR
// for un in units do
79918: LD_ADDR_VAR 0 4
79922: PUSH
79923: LD_VAR 0 1
79927: PUSH
79928: FOR_IN
79929: IFFALSE 80004
// if GetClass ( un ) = class then
79931: LD_VAR 0 4
79935: PPUSH
79936: CALL_OW 257
79940: PUSH
79941: LD_VAR 0 2
79945: EQUAL
79946: IFFALSE 79973
// result := Insert ( result , 1 , un ) else
79948: LD_ADDR_VAR 0 3
79952: PUSH
79953: LD_VAR 0 3
79957: PPUSH
79958: LD_INT 1
79960: PPUSH
79961: LD_VAR 0 4
79965: PPUSH
79966: CALL_OW 2
79970: ST_TO_ADDR
79971: GO 80002
// result := Replace ( result , result + 1 , un ) ;
79973: LD_ADDR_VAR 0 3
79977: PUSH
79978: LD_VAR 0 3
79982: PPUSH
79983: LD_VAR 0 3
79987: PUSH
79988: LD_INT 1
79990: PLUS
79991: PPUSH
79992: LD_VAR 0 4
79996: PPUSH
79997: CALL_OW 1
80001: ST_TO_ADDR
80002: GO 79928
80004: POP
80005: POP
// end ;
80006: LD_VAR 0 3
80010: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80011: LD_INT 0
80013: PPUSH
80014: PPUSH
80015: PPUSH
80016: PPUSH
80017: PPUSH
80018: PPUSH
80019: PPUSH
// result := [ ] ;
80020: LD_ADDR_VAR 0 4
80024: PUSH
80025: EMPTY
80026: ST_TO_ADDR
// if x - r < 0 then
80027: LD_VAR 0 1
80031: PUSH
80032: LD_VAR 0 3
80036: MINUS
80037: PUSH
80038: LD_INT 0
80040: LESS
80041: IFFALSE 80053
// min_x := 0 else
80043: LD_ADDR_VAR 0 8
80047: PUSH
80048: LD_INT 0
80050: ST_TO_ADDR
80051: GO 80069
// min_x := x - r ;
80053: LD_ADDR_VAR 0 8
80057: PUSH
80058: LD_VAR 0 1
80062: PUSH
80063: LD_VAR 0 3
80067: MINUS
80068: ST_TO_ADDR
// if y - r < 0 then
80069: LD_VAR 0 2
80073: PUSH
80074: LD_VAR 0 3
80078: MINUS
80079: PUSH
80080: LD_INT 0
80082: LESS
80083: IFFALSE 80095
// min_y := 0 else
80085: LD_ADDR_VAR 0 7
80089: PUSH
80090: LD_INT 0
80092: ST_TO_ADDR
80093: GO 80111
// min_y := y - r ;
80095: LD_ADDR_VAR 0 7
80099: PUSH
80100: LD_VAR 0 2
80104: PUSH
80105: LD_VAR 0 3
80109: MINUS
80110: ST_TO_ADDR
// max_x := x + r ;
80111: LD_ADDR_VAR 0 9
80115: PUSH
80116: LD_VAR 0 1
80120: PUSH
80121: LD_VAR 0 3
80125: PLUS
80126: ST_TO_ADDR
// max_y := y + r ;
80127: LD_ADDR_VAR 0 10
80131: PUSH
80132: LD_VAR 0 2
80136: PUSH
80137: LD_VAR 0 3
80141: PLUS
80142: ST_TO_ADDR
// for _x = min_x to max_x do
80143: LD_ADDR_VAR 0 5
80147: PUSH
80148: DOUBLE
80149: LD_VAR 0 8
80153: DEC
80154: ST_TO_ADDR
80155: LD_VAR 0 9
80159: PUSH
80160: FOR_TO
80161: IFFALSE 80262
// for _y = min_y to max_y do
80163: LD_ADDR_VAR 0 6
80167: PUSH
80168: DOUBLE
80169: LD_VAR 0 7
80173: DEC
80174: ST_TO_ADDR
80175: LD_VAR 0 10
80179: PUSH
80180: FOR_TO
80181: IFFALSE 80258
// begin if not ValidHex ( _x , _y ) then
80183: LD_VAR 0 5
80187: PPUSH
80188: LD_VAR 0 6
80192: PPUSH
80193: CALL_OW 488
80197: NOT
80198: IFFALSE 80202
// continue ;
80200: GO 80180
// if GetResourceTypeXY ( _x , _y ) then
80202: LD_VAR 0 5
80206: PPUSH
80207: LD_VAR 0 6
80211: PPUSH
80212: CALL_OW 283
80216: IFFALSE 80256
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80218: LD_ADDR_VAR 0 4
80222: PUSH
80223: LD_VAR 0 4
80227: PPUSH
80228: LD_VAR 0 4
80232: PUSH
80233: LD_INT 1
80235: PLUS
80236: PPUSH
80237: LD_VAR 0 5
80241: PUSH
80242: LD_VAR 0 6
80246: PUSH
80247: EMPTY
80248: LIST
80249: LIST
80250: PPUSH
80251: CALL_OW 1
80255: ST_TO_ADDR
// end ;
80256: GO 80180
80258: POP
80259: POP
80260: GO 80160
80262: POP
80263: POP
// end ;
80264: LD_VAR 0 4
80268: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80269: LD_INT 0
80271: PPUSH
80272: PPUSH
80273: PPUSH
80274: PPUSH
80275: PPUSH
80276: PPUSH
80277: PPUSH
80278: PPUSH
// if not units then
80279: LD_VAR 0 1
80283: NOT
80284: IFFALSE 80288
// exit ;
80286: GO 80812
// result := UnitFilter ( units , [ f_ok ] ) ;
80288: LD_ADDR_VAR 0 3
80292: PUSH
80293: LD_VAR 0 1
80297: PPUSH
80298: LD_INT 50
80300: PUSH
80301: EMPTY
80302: LIST
80303: PPUSH
80304: CALL_OW 72
80308: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80309: LD_ADDR_VAR 0 8
80313: PUSH
80314: LD_VAR 0 1
80318: PUSH
80319: LD_INT 1
80321: ARRAY
80322: PPUSH
80323: CALL_OW 255
80327: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80328: LD_ADDR_VAR 0 10
80332: PUSH
80333: LD_INT 29
80335: PUSH
80336: LD_INT 91
80338: PUSH
80339: LD_INT 49
80341: PUSH
80342: EMPTY
80343: LIST
80344: LIST
80345: LIST
80346: ST_TO_ADDR
// if not result then
80347: LD_VAR 0 3
80351: NOT
80352: IFFALSE 80356
// exit ;
80354: GO 80812
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80356: LD_ADDR_VAR 0 5
80360: PUSH
80361: LD_INT 81
80363: PUSH
80364: LD_VAR 0 8
80368: PUSH
80369: EMPTY
80370: LIST
80371: LIST
80372: PPUSH
80373: CALL_OW 69
80377: ST_TO_ADDR
// for i in result do
80378: LD_ADDR_VAR 0 4
80382: PUSH
80383: LD_VAR 0 3
80387: PUSH
80388: FOR_IN
80389: IFFALSE 80810
// begin tag := GetTag ( i ) + 1 ;
80391: LD_ADDR_VAR 0 9
80395: PUSH
80396: LD_VAR 0 4
80400: PPUSH
80401: CALL_OW 110
80405: PUSH
80406: LD_INT 1
80408: PLUS
80409: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80410: LD_ADDR_VAR 0 7
80414: PUSH
80415: LD_VAR 0 4
80419: PPUSH
80420: CALL_OW 250
80424: PPUSH
80425: LD_VAR 0 4
80429: PPUSH
80430: CALL_OW 251
80434: PPUSH
80435: LD_INT 6
80437: PPUSH
80438: CALL 80011 0 3
80442: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80443: LD_VAR 0 4
80447: PPUSH
80448: CALL_OW 247
80452: PUSH
80453: LD_INT 2
80455: EQUAL
80456: PUSH
80457: LD_VAR 0 7
80461: AND
80462: PUSH
80463: LD_VAR 0 4
80467: PPUSH
80468: CALL_OW 264
80472: PUSH
80473: LD_VAR 0 10
80477: IN
80478: NOT
80479: AND
80480: IFFALSE 80519
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80482: LD_VAR 0 4
80486: PPUSH
80487: LD_VAR 0 7
80491: PUSH
80492: LD_INT 1
80494: ARRAY
80495: PUSH
80496: LD_INT 1
80498: ARRAY
80499: PPUSH
80500: LD_VAR 0 7
80504: PUSH
80505: LD_INT 1
80507: ARRAY
80508: PUSH
80509: LD_INT 2
80511: ARRAY
80512: PPUSH
80513: CALL_OW 116
80517: GO 80808
// if path > tag then
80519: LD_VAR 0 2
80523: PUSH
80524: LD_VAR 0 9
80528: GREATER
80529: IFFALSE 80737
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80531: LD_ADDR_VAR 0 6
80535: PUSH
80536: LD_VAR 0 5
80540: PPUSH
80541: LD_INT 91
80543: PUSH
80544: LD_VAR 0 4
80548: PUSH
80549: LD_INT 8
80551: PUSH
80552: EMPTY
80553: LIST
80554: LIST
80555: LIST
80556: PPUSH
80557: CALL_OW 72
80561: ST_TO_ADDR
// if nearEnemy then
80562: LD_VAR 0 6
80566: IFFALSE 80635
// begin if GetWeapon ( i ) = ru_time_lapser then
80568: LD_VAR 0 4
80572: PPUSH
80573: CALL_OW 264
80577: PUSH
80578: LD_INT 49
80580: EQUAL
80581: IFFALSE 80609
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80583: LD_VAR 0 4
80587: PPUSH
80588: LD_VAR 0 6
80592: PPUSH
80593: LD_VAR 0 4
80597: PPUSH
80598: CALL_OW 74
80602: PPUSH
80603: CALL_OW 112
80607: GO 80633
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80609: LD_VAR 0 4
80613: PPUSH
80614: LD_VAR 0 6
80618: PPUSH
80619: LD_VAR 0 4
80623: PPUSH
80624: CALL_OW 74
80628: PPUSH
80629: CALL 81737 0 2
// end else
80633: GO 80735
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80635: LD_VAR 0 4
80639: PPUSH
80640: LD_VAR 0 2
80644: PUSH
80645: LD_VAR 0 9
80649: ARRAY
80650: PUSH
80651: LD_INT 1
80653: ARRAY
80654: PPUSH
80655: LD_VAR 0 2
80659: PUSH
80660: LD_VAR 0 9
80664: ARRAY
80665: PUSH
80666: LD_INT 2
80668: ARRAY
80669: PPUSH
80670: CALL_OW 297
80674: PUSH
80675: LD_INT 6
80677: GREATER
80678: IFFALSE 80721
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80680: LD_VAR 0 4
80684: PPUSH
80685: LD_VAR 0 2
80689: PUSH
80690: LD_VAR 0 9
80694: ARRAY
80695: PUSH
80696: LD_INT 1
80698: ARRAY
80699: PPUSH
80700: LD_VAR 0 2
80704: PUSH
80705: LD_VAR 0 9
80709: ARRAY
80710: PUSH
80711: LD_INT 2
80713: ARRAY
80714: PPUSH
80715: CALL_OW 114
80719: GO 80735
// SetTag ( i , tag ) ;
80721: LD_VAR 0 4
80725: PPUSH
80726: LD_VAR 0 9
80730: PPUSH
80731: CALL_OW 109
// end else
80735: GO 80808
// if enemy then
80737: LD_VAR 0 5
80741: IFFALSE 80808
// begin if GetWeapon ( i ) = ru_time_lapser then
80743: LD_VAR 0 4
80747: PPUSH
80748: CALL_OW 264
80752: PUSH
80753: LD_INT 49
80755: EQUAL
80756: IFFALSE 80784
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80758: LD_VAR 0 4
80762: PPUSH
80763: LD_VAR 0 5
80767: PPUSH
80768: LD_VAR 0 4
80772: PPUSH
80773: CALL_OW 74
80777: PPUSH
80778: CALL_OW 112
80782: GO 80808
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80784: LD_VAR 0 4
80788: PPUSH
80789: LD_VAR 0 5
80793: PPUSH
80794: LD_VAR 0 4
80798: PPUSH
80799: CALL_OW 74
80803: PPUSH
80804: CALL 81737 0 2
// end ; end ;
80808: GO 80388
80810: POP
80811: POP
// end ;
80812: LD_VAR 0 3
80816: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80817: LD_INT 0
80819: PPUSH
80820: PPUSH
80821: PPUSH
// if not unit or IsInUnit ( unit ) then
80822: LD_VAR 0 1
80826: NOT
80827: PUSH
80828: LD_VAR 0 1
80832: PPUSH
80833: CALL_OW 310
80837: OR
80838: IFFALSE 80842
// exit ;
80840: GO 80933
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80842: LD_ADDR_VAR 0 4
80846: PUSH
80847: LD_VAR 0 1
80851: PPUSH
80852: CALL_OW 250
80856: PPUSH
80857: LD_VAR 0 2
80861: PPUSH
80862: LD_INT 1
80864: PPUSH
80865: CALL_OW 272
80869: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80870: LD_ADDR_VAR 0 5
80874: PUSH
80875: LD_VAR 0 1
80879: PPUSH
80880: CALL_OW 251
80884: PPUSH
80885: LD_VAR 0 2
80889: PPUSH
80890: LD_INT 1
80892: PPUSH
80893: CALL_OW 273
80897: ST_TO_ADDR
// if ValidHex ( x , y ) then
80898: LD_VAR 0 4
80902: PPUSH
80903: LD_VAR 0 5
80907: PPUSH
80908: CALL_OW 488
80912: IFFALSE 80933
// ComTurnXY ( unit , x , y ) ;
80914: LD_VAR 0 1
80918: PPUSH
80919: LD_VAR 0 4
80923: PPUSH
80924: LD_VAR 0 5
80928: PPUSH
80929: CALL_OW 118
// end ;
80933: LD_VAR 0 3
80937: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80938: LD_INT 0
80940: PPUSH
80941: PPUSH
// result := false ;
80942: LD_ADDR_VAR 0 3
80946: PUSH
80947: LD_INT 0
80949: ST_TO_ADDR
// if not units then
80950: LD_VAR 0 2
80954: NOT
80955: IFFALSE 80959
// exit ;
80957: GO 81004
// for i in units do
80959: LD_ADDR_VAR 0 4
80963: PUSH
80964: LD_VAR 0 2
80968: PUSH
80969: FOR_IN
80970: IFFALSE 81002
// if See ( side , i ) then
80972: LD_VAR 0 1
80976: PPUSH
80977: LD_VAR 0 4
80981: PPUSH
80982: CALL_OW 292
80986: IFFALSE 81000
// begin result := true ;
80988: LD_ADDR_VAR 0 3
80992: PUSH
80993: LD_INT 1
80995: ST_TO_ADDR
// exit ;
80996: POP
80997: POP
80998: GO 81004
// end ;
81000: GO 80969
81002: POP
81003: POP
// end ;
81004: LD_VAR 0 3
81008: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81009: LD_INT 0
81011: PPUSH
81012: PPUSH
81013: PPUSH
81014: PPUSH
// if not unit or not points then
81015: LD_VAR 0 1
81019: NOT
81020: PUSH
81021: LD_VAR 0 2
81025: NOT
81026: OR
81027: IFFALSE 81031
// exit ;
81029: GO 81121
// dist := 99999 ;
81031: LD_ADDR_VAR 0 5
81035: PUSH
81036: LD_INT 99999
81038: ST_TO_ADDR
// for i in points do
81039: LD_ADDR_VAR 0 4
81043: PUSH
81044: LD_VAR 0 2
81048: PUSH
81049: FOR_IN
81050: IFFALSE 81119
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81052: LD_ADDR_VAR 0 6
81056: PUSH
81057: LD_VAR 0 1
81061: PPUSH
81062: LD_VAR 0 4
81066: PUSH
81067: LD_INT 1
81069: ARRAY
81070: PPUSH
81071: LD_VAR 0 4
81075: PUSH
81076: LD_INT 2
81078: ARRAY
81079: PPUSH
81080: CALL_OW 297
81084: ST_TO_ADDR
// if tmpDist < dist then
81085: LD_VAR 0 6
81089: PUSH
81090: LD_VAR 0 5
81094: LESS
81095: IFFALSE 81117
// begin result := i ;
81097: LD_ADDR_VAR 0 3
81101: PUSH
81102: LD_VAR 0 4
81106: ST_TO_ADDR
// dist := tmpDist ;
81107: LD_ADDR_VAR 0 5
81111: PUSH
81112: LD_VAR 0 6
81116: ST_TO_ADDR
// end ; end ;
81117: GO 81049
81119: POP
81120: POP
// end ;
81121: LD_VAR 0 3
81125: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81126: LD_INT 0
81128: PPUSH
// uc_side := side ;
81129: LD_ADDR_OWVAR 20
81133: PUSH
81134: LD_VAR 0 1
81138: ST_TO_ADDR
// uc_nation := 3 ;
81139: LD_ADDR_OWVAR 21
81143: PUSH
81144: LD_INT 3
81146: ST_TO_ADDR
// vc_chassis := 25 ;
81147: LD_ADDR_OWVAR 37
81151: PUSH
81152: LD_INT 25
81154: ST_TO_ADDR
// vc_engine := engine_siberite ;
81155: LD_ADDR_OWVAR 39
81159: PUSH
81160: LD_INT 3
81162: ST_TO_ADDR
// vc_control := control_computer ;
81163: LD_ADDR_OWVAR 38
81167: PUSH
81168: LD_INT 3
81170: ST_TO_ADDR
// vc_weapon := 59 ;
81171: LD_ADDR_OWVAR 40
81175: PUSH
81176: LD_INT 59
81178: ST_TO_ADDR
// result := CreateVehicle ;
81179: LD_ADDR_VAR 0 5
81183: PUSH
81184: CALL_OW 45
81188: ST_TO_ADDR
// SetDir ( result , d ) ;
81189: LD_VAR 0 5
81193: PPUSH
81194: LD_VAR 0 4
81198: PPUSH
81199: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81203: LD_VAR 0 5
81207: PPUSH
81208: LD_VAR 0 2
81212: PPUSH
81213: LD_VAR 0 3
81217: PPUSH
81218: LD_INT 0
81220: PPUSH
81221: CALL_OW 48
// end ;
81225: LD_VAR 0 5
81229: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81230: LD_INT 0
81232: PPUSH
81233: PPUSH
81234: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81235: LD_ADDR_VAR 0 2
81239: PUSH
81240: LD_INT 0
81242: PUSH
81243: LD_INT 0
81245: PUSH
81246: LD_INT 0
81248: PUSH
81249: LD_INT 0
81251: PUSH
81252: EMPTY
81253: LIST
81254: LIST
81255: LIST
81256: LIST
81257: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81258: LD_VAR 0 1
81262: NOT
81263: PUSH
81264: LD_VAR 0 1
81268: PPUSH
81269: CALL_OW 264
81273: PUSH
81274: LD_INT 12
81276: PUSH
81277: LD_INT 51
81279: PUSH
81280: LD_INT 32
81282: PUSH
81283: LD_INT 89
81285: PUSH
81286: EMPTY
81287: LIST
81288: LIST
81289: LIST
81290: LIST
81291: IN
81292: NOT
81293: OR
81294: IFFALSE 81298
// exit ;
81296: GO 81396
// for i := 1 to 3 do
81298: LD_ADDR_VAR 0 3
81302: PUSH
81303: DOUBLE
81304: LD_INT 1
81306: DEC
81307: ST_TO_ADDR
81308: LD_INT 3
81310: PUSH
81311: FOR_TO
81312: IFFALSE 81394
// begin tmp := GetCargo ( cargo , i ) ;
81314: LD_ADDR_VAR 0 4
81318: PUSH
81319: LD_VAR 0 1
81323: PPUSH
81324: LD_VAR 0 3
81328: PPUSH
81329: CALL_OW 289
81333: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81334: LD_ADDR_VAR 0 2
81338: PUSH
81339: LD_VAR 0 2
81343: PPUSH
81344: LD_VAR 0 3
81348: PPUSH
81349: LD_VAR 0 4
81353: PPUSH
81354: CALL_OW 1
81358: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81359: LD_ADDR_VAR 0 2
81363: PUSH
81364: LD_VAR 0 2
81368: PPUSH
81369: LD_INT 4
81371: PPUSH
81372: LD_VAR 0 2
81376: PUSH
81377: LD_INT 4
81379: ARRAY
81380: PUSH
81381: LD_VAR 0 4
81385: PLUS
81386: PPUSH
81387: CALL_OW 1
81391: ST_TO_ADDR
// end ;
81392: GO 81311
81394: POP
81395: POP
// end ;
81396: LD_VAR 0 2
81400: RET
// export function Length ( array ) ; begin
81401: LD_INT 0
81403: PPUSH
// result := array + 0 ;
81404: LD_ADDR_VAR 0 2
81408: PUSH
81409: LD_VAR 0 1
81413: PUSH
81414: LD_INT 0
81416: PLUS
81417: ST_TO_ADDR
// end ;
81418: LD_VAR 0 2
81422: RET
// export function PrepareArray ( array ) ; begin
81423: LD_INT 0
81425: PPUSH
// result := array diff 0 ;
81426: LD_ADDR_VAR 0 2
81430: PUSH
81431: LD_VAR 0 1
81435: PUSH
81436: LD_INT 0
81438: DIFF
81439: ST_TO_ADDR
// if not result [ 1 ] then
81440: LD_VAR 0 2
81444: PUSH
81445: LD_INT 1
81447: ARRAY
81448: NOT
81449: IFFALSE 81469
// result := Delete ( result , 1 ) ;
81451: LD_ADDR_VAR 0 2
81455: PUSH
81456: LD_VAR 0 2
81460: PPUSH
81461: LD_INT 1
81463: PPUSH
81464: CALL_OW 3
81468: ST_TO_ADDR
// end ;
81469: LD_VAR 0 2
81473: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81474: LD_INT 0
81476: PPUSH
81477: PPUSH
81478: PPUSH
81479: PPUSH
// sibRocketRange := 25 ;
81480: LD_ADDR_VAR 0 6
81484: PUSH
81485: LD_INT 25
81487: ST_TO_ADDR
// result := false ;
81488: LD_ADDR_VAR 0 4
81492: PUSH
81493: LD_INT 0
81495: ST_TO_ADDR
// for i := 0 to 5 do
81496: LD_ADDR_VAR 0 5
81500: PUSH
81501: DOUBLE
81502: LD_INT 0
81504: DEC
81505: ST_TO_ADDR
81506: LD_INT 5
81508: PUSH
81509: FOR_TO
81510: IFFALSE 81577
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81512: LD_VAR 0 1
81516: PPUSH
81517: LD_VAR 0 5
81521: PPUSH
81522: LD_VAR 0 6
81526: PPUSH
81527: CALL_OW 272
81531: PPUSH
81532: LD_VAR 0 2
81536: PPUSH
81537: LD_VAR 0 5
81541: PPUSH
81542: LD_VAR 0 6
81546: PPUSH
81547: CALL_OW 273
81551: PPUSH
81552: LD_VAR 0 3
81556: PPUSH
81557: CALL_OW 309
81561: IFFALSE 81575
// begin result := true ;
81563: LD_ADDR_VAR 0 4
81567: PUSH
81568: LD_INT 1
81570: ST_TO_ADDR
// exit ;
81571: POP
81572: POP
81573: GO 81579
// end ;
81575: GO 81509
81577: POP
81578: POP
// end ;
81579: LD_VAR 0 4
81583: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81584: LD_INT 0
81586: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81587: LD_VAR 0 1
81591: PPUSH
81592: LD_VAR 0 2
81596: PPUSH
81597: LD_INT 0
81599: PPUSH
81600: LD_INT 0
81602: PPUSH
81603: LD_INT 1
81605: PPUSH
81606: LD_INT 0
81608: PPUSH
81609: CALL_OW 587
// end ;
81613: LD_VAR 0 3
81617: RET
// export function CenterOnNow ( unit ) ; begin
81618: LD_INT 0
81620: PPUSH
// result := IsInUnit ( unit ) ;
81621: LD_ADDR_VAR 0 2
81625: PUSH
81626: LD_VAR 0 1
81630: PPUSH
81631: CALL_OW 310
81635: ST_TO_ADDR
// if not result then
81636: LD_VAR 0 2
81640: NOT
81641: IFFALSE 81653
// result := unit ;
81643: LD_ADDR_VAR 0 2
81647: PUSH
81648: LD_VAR 0 1
81652: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81653: LD_VAR 0 1
81657: PPUSH
81658: CALL_OW 87
// end ;
81662: LD_VAR 0 2
81666: RET
// export function ComMoveHex ( unit , hex ) ; begin
81667: LD_INT 0
81669: PPUSH
// if not hex then
81670: LD_VAR 0 2
81674: NOT
81675: IFFALSE 81679
// exit ;
81677: GO 81732
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81679: LD_VAR 0 2
81683: PUSH
81684: LD_INT 1
81686: ARRAY
81687: PPUSH
81688: LD_VAR 0 2
81692: PUSH
81693: LD_INT 2
81695: ARRAY
81696: PPUSH
81697: CALL_OW 428
81701: IFFALSE 81705
// exit ;
81703: GO 81732
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81705: LD_VAR 0 1
81709: PPUSH
81710: LD_VAR 0 2
81714: PUSH
81715: LD_INT 1
81717: ARRAY
81718: PPUSH
81719: LD_VAR 0 2
81723: PUSH
81724: LD_INT 2
81726: ARRAY
81727: PPUSH
81728: CALL_OW 111
// end ;
81732: LD_VAR 0 3
81736: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
81737: LD_INT 0
81739: PPUSH
81740: PPUSH
81741: PPUSH
// if not unit or not enemy then
81742: LD_VAR 0 1
81746: NOT
81747: PUSH
81748: LD_VAR 0 2
81752: NOT
81753: OR
81754: IFFALSE 81758
// exit ;
81756: GO 81882
// x := GetX ( enemy ) ;
81758: LD_ADDR_VAR 0 4
81762: PUSH
81763: LD_VAR 0 2
81767: PPUSH
81768: CALL_OW 250
81772: ST_TO_ADDR
// y := GetY ( enemy ) ;
81773: LD_ADDR_VAR 0 5
81777: PUSH
81778: LD_VAR 0 2
81782: PPUSH
81783: CALL_OW 251
81787: ST_TO_ADDR
// if ValidHex ( x , y ) then
81788: LD_VAR 0 4
81792: PPUSH
81793: LD_VAR 0 5
81797: PPUSH
81798: CALL_OW 488
81802: IFFALSE 81882
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
81804: LD_VAR 0 2
81808: PPUSH
81809: CALL_OW 247
81813: PUSH
81814: LD_INT 3
81816: PUSH
81817: LD_INT 2
81819: PUSH
81820: EMPTY
81821: LIST
81822: LIST
81823: IN
81824: PUSH
81825: LD_VAR 0 1
81829: PPUSH
81830: CALL_OW 255
81834: PPUSH
81835: LD_VAR 0 2
81839: PPUSH
81840: CALL_OW 292
81844: AND
81845: IFFALSE 81863
// ComAttackUnit ( unit , enemy ) else
81847: LD_VAR 0 1
81851: PPUSH
81852: LD_VAR 0 2
81856: PPUSH
81857: CALL_OW 115
81861: GO 81882
// ComAgressiveMove ( unit , x , y ) ;
81863: LD_VAR 0 1
81867: PPUSH
81868: LD_VAR 0 4
81872: PPUSH
81873: LD_VAR 0 5
81877: PPUSH
81878: CALL_OW 114
// end ;
81882: LD_VAR 0 3
81886: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
81887: LD_INT 0
81889: PPUSH
81890: PPUSH
81891: PPUSH
// list := AreaToList ( area , 0 ) ;
81892: LD_ADDR_VAR 0 5
81896: PUSH
81897: LD_VAR 0 1
81901: PPUSH
81902: LD_INT 0
81904: PPUSH
81905: CALL_OW 517
81909: ST_TO_ADDR
// if not list then
81910: LD_VAR 0 5
81914: NOT
81915: IFFALSE 81919
// exit ;
81917: GO 82049
// if all then
81919: LD_VAR 0 2
81923: IFFALSE 82011
// begin for i := 1 to list [ 1 ] do
81925: LD_ADDR_VAR 0 4
81929: PUSH
81930: DOUBLE
81931: LD_INT 1
81933: DEC
81934: ST_TO_ADDR
81935: LD_VAR 0 5
81939: PUSH
81940: LD_INT 1
81942: ARRAY
81943: PUSH
81944: FOR_TO
81945: IFFALSE 82007
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
81947: LD_ADDR_VAR 0 3
81951: PUSH
81952: LD_VAR 0 3
81956: PPUSH
81957: LD_VAR 0 3
81961: PUSH
81962: LD_INT 1
81964: PLUS
81965: PPUSH
81966: LD_VAR 0 5
81970: PUSH
81971: LD_INT 1
81973: ARRAY
81974: PUSH
81975: LD_VAR 0 4
81979: ARRAY
81980: PUSH
81981: LD_VAR 0 5
81985: PUSH
81986: LD_INT 2
81988: ARRAY
81989: PUSH
81990: LD_VAR 0 4
81994: ARRAY
81995: PUSH
81996: EMPTY
81997: LIST
81998: LIST
81999: PPUSH
82000: CALL_OW 1
82004: ST_TO_ADDR
82005: GO 81944
82007: POP
82008: POP
// exit ;
82009: GO 82049
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
82011: LD_ADDR_VAR 0 3
82015: PUSH
82016: LD_VAR 0 5
82020: PUSH
82021: LD_INT 1
82023: ARRAY
82024: PUSH
82025: LD_INT 1
82027: ARRAY
82028: PUSH
82029: LD_VAR 0 5
82033: PUSH
82034: LD_INT 2
82036: ARRAY
82037: PUSH
82038: LD_INT 1
82040: ARRAY
82041: PUSH
82042: EMPTY
82043: LIST
82044: LIST
82045: PUSH
82046: EMPTY
82047: LIST
82048: ST_TO_ADDR
// end ;
82049: LD_VAR 0 3
82053: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
82054: LD_INT 0
82056: PPUSH
82057: PPUSH
// list := AreaToList ( area , 0 ) ;
82058: LD_ADDR_VAR 0 4
82062: PUSH
82063: LD_VAR 0 1
82067: PPUSH
82068: LD_INT 0
82070: PPUSH
82071: CALL_OW 517
82075: ST_TO_ADDR
// if not list then
82076: LD_VAR 0 4
82080: NOT
82081: IFFALSE 82085
// exit ;
82083: GO 82126
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
82085: LD_ADDR_VAR 0 3
82089: PUSH
82090: LD_VAR 0 4
82094: PUSH
82095: LD_INT 1
82097: ARRAY
82098: PUSH
82099: LD_INT 1
82101: ARRAY
82102: PUSH
82103: LD_VAR 0 4
82107: PUSH
82108: LD_INT 2
82110: ARRAY
82111: PUSH
82112: LD_INT 1
82114: ARRAY
82115: PUSH
82116: LD_VAR 0 2
82120: PUSH
82121: EMPTY
82122: LIST
82123: LIST
82124: LIST
82125: ST_TO_ADDR
// end ;
82126: LD_VAR 0 3
82130: RET
// export function First ( array ) ; begin
82131: LD_INT 0
82133: PPUSH
// if not array then
82134: LD_VAR 0 1
82138: NOT
82139: IFFALSE 82143
// exit ;
82141: GO 82157
// result := array [ 1 ] ;
82143: LD_ADDR_VAR 0 2
82147: PUSH
82148: LD_VAR 0 1
82152: PUSH
82153: LD_INT 1
82155: ARRAY
82156: ST_TO_ADDR
// end ;
82157: LD_VAR 0 2
82161: RET
// export function Last ( array ) ; begin
82162: LD_INT 0
82164: PPUSH
// if not array then
82165: LD_VAR 0 1
82169: NOT
82170: IFFALSE 82174
// exit ;
82172: GO 82190
// result := array [ array ] ;
82174: LD_ADDR_VAR 0 2
82178: PUSH
82179: LD_VAR 0 1
82183: PUSH
82184: LD_VAR 0 1
82188: ARRAY
82189: ST_TO_ADDR
// end ; end_of_file
82190: LD_VAR 0 2
82194: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82195: LD_VAR 0 1
82199: PUSH
82200: LD_INT 200
82202: DOUBLE
82203: GREATEREQUAL
82204: IFFALSE 82212
82206: LD_INT 299
82208: DOUBLE
82209: LESSEQUAL
82210: IFTRUE 82214
82212: GO 82246
82214: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82215: LD_VAR 0 1
82219: PPUSH
82220: LD_VAR 0 2
82224: PPUSH
82225: LD_VAR 0 3
82229: PPUSH
82230: LD_VAR 0 4
82234: PPUSH
82235: LD_VAR 0 5
82239: PPUSH
82240: CALL 35445 0 5
82244: GO 82323
82246: LD_INT 300
82248: DOUBLE
82249: GREATEREQUAL
82250: IFFALSE 82258
82252: LD_INT 399
82254: DOUBLE
82255: LESSEQUAL
82256: IFTRUE 82260
82258: GO 82322
82260: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82261: LD_VAR 0 1
82265: PPUSH
82266: LD_VAR 0 2
82270: PPUSH
82271: LD_VAR 0 3
82275: PPUSH
82276: LD_VAR 0 4
82280: PPUSH
82281: LD_VAR 0 5
82285: PPUSH
82286: LD_VAR 0 6
82290: PPUSH
82291: LD_VAR 0 7
82295: PPUSH
82296: LD_VAR 0 8
82300: PPUSH
82301: LD_VAR 0 9
82305: PPUSH
82306: LD_VAR 0 10
82310: PPUSH
82311: LD_VAR 0 11
82315: PPUSH
82316: CALL 31770 0 11
82320: GO 82323
82322: POP
// end ;
82323: PPOPN 11
82325: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82326: LD_VAR 0 1
82330: PPUSH
82331: LD_VAR 0 2
82335: PPUSH
82336: LD_VAR 0 3
82340: PPUSH
82341: LD_VAR 0 4
82345: PPUSH
82346: LD_VAR 0 5
82350: PPUSH
82351: CALL 35181 0 5
// end ; end_of_file
82355: PPOPN 5
82357: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82358: LD_VAR 0 1
82362: PPUSH
82363: LD_VAR 0 2
82367: PPUSH
82368: LD_VAR 0 3
82372: PPUSH
82373: LD_VAR 0 4
82377: PPUSH
82378: LD_VAR 0 5
82382: PPUSH
82383: LD_VAR 0 6
82387: PPUSH
82388: CALL 19422 0 6
// end ;
82392: PPOPN 6
82394: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82395: LD_INT 0
82397: PPUSH
// begin if not units then
82398: LD_VAR 0 1
82402: NOT
82403: IFFALSE 82407
// exit ;
82405: GO 82407
// end ;
82407: PPOPN 7
82409: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82410: CALL 19326 0 0
// end ;
82414: PPOPN 1
82416: END
