// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 50 0 0
// SetDiplomacy ;
  15: CALL 386 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 29
// DebugMode ;
  25: CALL 474 0 0
// PrepareRussian ;
  29: CALL 3059 0 0
// PrepareAmerican ;
  33: CALL 1145 0 0
// PrepareCornell ;
  37: CALL 2273 0 0
// PrepareWesternBase ;
  41: CALL 2502 0 0
// Action ;
  45: CALL 5323 0 0
// end ;
  49: END
// export debug ; export mission_prefix , mission_prefix_prev ; export jmm_units , jmm_on_west , cornel_units , bierezov_exist , cornel_active , cornel_attack , cornel_counter , cornel_prepared , frank_can_return , ach_counter , solar_builded , frank_send_to_scout , jmm_in_veh , bobby_in_veh , cyrus_in_veh , lisa_in_veh , crates_counter , end_mission_allowed , save_others , save_group , show_query , wait_for_them , send_attack_on_cornel_base , cornel_saved , veh_on_meta , time_to_prepare , send_spec_patrol , prepare_siege , send_attack_on_cornel , game_end , lose_counter , powell_warn , save_counter ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// mission_prefix_prev := 02_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 02_
  68: ST_TO_ADDR
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// jmm_units := 0 ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// cornel_units := 0 ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// bierezov_exist := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// jmm_on_west := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// cornel_active := false ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// cornel_attack := false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// cornel_prepared := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cornel_counter := 2 2$00 ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 4200
 140: ST_TO_ADDR
// frank_can_return := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// solar_builded := false ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frank_send_to_scout := false ;
 157: LD_ADDR_EXP 15
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// jmm_in_veh := false ;
 165: LD_ADDR_EXP 16
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// bobby_in_veh := false ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// cyrus_in_veh := false ;
 181: LD_ADDR_EXP 18
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lisa_in_veh := false ;
 189: LD_ADDR_EXP 19
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// time_to_prepare := [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$30 ] [ Difficulty ] ;
 197: LD_ADDR_EXP 29
 201: PUSH
 202: LD_INT 25200
 204: PUSH
 205: LD_INT 23100
 207: PUSH
 208: LD_INT 21000
 210: PUSH
 211: LD_INT 19950
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_OWVAR 67
 224: ARRAY
 225: ST_TO_ADDR
// crates_counter := [ 600 , 500 , 400 , 350 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 600
 233: PUSH
 234: LD_INT 500
 236: PUSH
 237: LD_INT 400
 239: PUSH
 240: LD_INT 350
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// end_mission_allowed := false ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// save_others := [ ] ;
 263: LD_ADDR_EXP 22
 267: PUSH
 268: EMPTY
 269: ST_TO_ADDR
// save_group := [ ] ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: EMPTY
 276: ST_TO_ADDR
// show_query := true ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// wait_for_them := false ;
 285: LD_ADDR_EXP 25
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// veh_on_meta := false ;
 293: LD_ADDR_EXP 28
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// send_spec_patrol := false ;
 301: LD_ADDR_EXP 30
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// prepare_siege := false ;
 309: LD_ADDR_EXP 31
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// send_attack_on_cornel := false ;
 317: LD_ADDR_EXP 32
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// send_attack_on_cornel_base := false ;
 325: LD_ADDR_EXP 26
 329: PUSH
 330: LD_INT 0
 332: ST_TO_ADDR
// game_end := false ;
 333: LD_ADDR_EXP 33
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// lose_counter := 0 ;
 341: LD_ADDR_EXP 34
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// powell_warn := 0 ;
 349: LD_ADDR_EXP 35
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// save_counter := 0 ;
 357: LD_ADDR_EXP 36
 361: PUSH
 362: LD_INT 0
 364: ST_TO_ADDR
// cornel_saved := false ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_INT 0
 372: ST_TO_ADDR
// ach_counter := 0 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// end ;
 381: LD_VAR 0 1
 385: RET
// function SetDiplomacy ; begin
 386: LD_INT 0
 388: PPUSH
// SetAttitude ( 1 , 4 , att_friend , true ) ;
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 4
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 80
// SetAttitude ( 1 , 8 , att_friend , true ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 8
 410: PPUSH
 411: LD_INT 1
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 421: LD_INT 3
 423: PPUSH
 424: LD_INT 6
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 1
 432: PPUSH
 433: CALL_OW 80
// SetAttitude ( 4 , 6 , att_neutral , true ) ;
 437: LD_INT 4
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 80
// SetAttitude ( 3 , 8 , att_neutral , true ) ;
 453: LD_INT 3
 455: PPUSH
 456: LD_INT 8
 458: PPUSH
 459: LD_INT 0
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 80
// end ;
 469: LD_VAR 0 1
 473: RET
// export function DebugMode ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// FogOff ( 1 ) ;
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 344
// debug_strings := [ ] ;
 485: LD_ADDR_OWVAR 48
 489: PUSH
 490: EMPTY
 491: ST_TO_ADDR
// end ; end_of_file
 492: LD_VAR 0 1
 496: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 497: LD_INT 0
 499: PPUSH
// uc_side := side ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_VAR 0 1
 509: ST_TO_ADDR
// uc_nation := nation ;
 510: LD_ADDR_OWVAR 21
 514: PUSH
 515: LD_VAR 0 2
 519: ST_TO_ADDR
// vc_chassis := chassis ;
 520: LD_ADDR_OWVAR 37
 524: PUSH
 525: LD_VAR 0 3
 529: ST_TO_ADDR
// vc_engine := engine ;
 530: LD_ADDR_OWVAR 39
 534: PUSH
 535: LD_VAR 0 4
 539: ST_TO_ADDR
// vc_control := control ;
 540: LD_ADDR_OWVAR 38
 544: PUSH
 545: LD_VAR 0 5
 549: ST_TO_ADDR
// vc_weapon := weapon ;
 550: LD_ADDR_OWVAR 40
 554: PUSH
 555: LD_VAR 0 6
 559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 560: LD_ADDR_OWVAR 41
 564: PUSH
 565: LD_VAR 0 7
 569: ST_TO_ADDR
// result := CreateVehicle ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: CALL_OW 45
 579: ST_TO_ADDR
// end ;
 580: LD_VAR 0 8
 584: RET
// export function SayX ( units , ident ) ; var i ; begin
 585: LD_INT 0
 587: PPUSH
 588: PPUSH
// result := false ;
 589: LD_ADDR_VAR 0 3
 593: PUSH
 594: LD_INT 0
 596: ST_TO_ADDR
// if not units then
 597: LD_VAR 0 1
 601: NOT
 602: IFFALSE 606
// exit ;
 604: GO 660
// for i in units do
 606: LD_ADDR_VAR 0 4
 610: PUSH
 611: LD_VAR 0 1
 615: PUSH
 616: FOR_IN
 617: IFFALSE 658
// if IsOk ( i ) then
 619: LD_VAR 0 4
 623: PPUSH
 624: CALL_OW 302
 628: IFFALSE 656
// begin Say ( i , ident ) ;
 630: LD_VAR 0 4
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: CALL_OW 88
// result := i ;
 644: LD_ADDR_VAR 0 3
 648: PUSH
 649: LD_VAR 0 4
 653: ST_TO_ADDR
// break ;
 654: GO 658
// end ;
 656: GO 616
 658: POP
 659: POP
// end ;
 660: LD_VAR 0 3
 664: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// for i = 1 to count do
 671: LD_ADDR_VAR 0 8
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 6
 685: PUSH
 686: FOR_TO
 687: IFFALSE 768
// begin uc_side = side ;
 689: LD_ADDR_OWVAR 20
 693: PUSH
 694: LD_VAR 0 1
 698: ST_TO_ADDR
// uc_nation = nation ;
 699: LD_ADDR_OWVAR 21
 703: PUSH
 704: LD_VAR 0 2
 708: ST_TO_ADDR
// hc_gallery =  ;
 709: LD_ADDR_OWVAR 33
 713: PUSH
 714: LD_STRING 
 716: ST_TO_ADDR
// hc_name =  ;
 717: LD_ADDR_OWVAR 26
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 725: LD_INT 0
 727: PPUSH
 728: LD_VAR 0 5
 732: PPUSH
 733: LD_VAR 0 4
 737: PPUSH
 738: CALL_OW 380
// un = CreateHuman ;
 742: LD_ADDR_VAR 0 10
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 752: LD_VAR 0 10
 756: PPUSH
 757: LD_VAR 0 3
 761: PPUSH
 762: CALL_OW 52
// end ;
 766: GO 686
 768: POP
 769: POP
// end ;
 770: LD_VAR 0 7
 774: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 775: LD_INT 0
 777: PPUSH
 778: PPUSH
 779: PPUSH
// uc_side := GetSide ( b ) ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 255
 794: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 795: LD_ADDR_OWVAR 21
 799: PUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 248
 809: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 380
// un = CreateHuman ;
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: CALL_OW 44
 834: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_VAR 0 2
 844: PPUSH
 845: CALL_OW 254
 849: PUSH
 850: LD_INT 3
 852: MINUS
 853: ST_TO_ADDR
// if dir < 0 then
 854: LD_VAR 0 5
 858: PUSH
 859: LD_INT 0
 861: LESS
 862: IFFALSE 878
// dir := 6 + dir ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_INT 6
 871: PUSH
 872: LD_VAR 0 5
 876: PLUS
 877: ST_TO_ADDR
// SetDir ( un , dir ) ;
 878: LD_VAR 0 4
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 892: LD_VAR 0 4
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 52
// end ;
 906: LD_VAR 0 3
 910: RET
// export function InVeh ( unit ) ; var filter , i ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// result := false ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 0
 923: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_machine_gun ] ] ) ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 34
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PPUSH
 953: CALL_OW 69
 957: ST_TO_ADDR
// for i in filter do
 958: LD_ADDR_VAR 0 4
 962: PUSH
 963: LD_VAR 0 3
 967: PUSH
 968: FOR_IN
 969: IFFALSE 1000
// if IsDrivenBy ( i ) = unit then
 971: LD_VAR 0 4
 975: PPUSH
 976: CALL_OW 311
 980: PUSH
 981: LD_VAR 0 1
 985: EQUAL
 986: IFFALSE 998
// begin result := true ;
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ST_TO_ADDR
// break ;
 996: GO 1000
// end ;
 998: GO 968
1000: POP
1001: POP
// end ;
1002: LD_VAR 0 2
1006: RET
// export function FindFreePlace ( blist ) ; var i ; begin
1007: LD_INT 0
1009: PPUSH
1010: PPUSH
// result := false ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_INT 0
1018: ST_TO_ADDR
// if not blist then
1019: LD_VAR 0 1
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1072
// for i in blist do
1028: LD_ADDR_VAR 0 3
1032: PUSH
1033: LD_VAR 0 1
1037: PUSH
1038: FOR_IN
1039: IFFALSE 1070
// if UnitsInside ( i ) < 6 then
1041: LD_VAR 0 3
1045: PPUSH
1046: CALL_OW 313
1050: PUSH
1051: LD_INT 6
1053: LESS
1054: IFFALSE 1068
// begin result := i ;
1056: LD_ADDR_VAR 0 2
1060: PUSH
1061: LD_VAR 0 3
1065: ST_TO_ADDR
// break ;
1066: GO 1070
// end ;
1068: GO 1038
1070: POP
1071: POP
// end ;
1072: LD_VAR 0 2
1076: RET
// export function CountTime ( timer , mode ) ; begin
1077: LD_INT 0
1079: PPUSH
// if not timer then
1080: LD_VAR 0 1
1084: NOT
1085: IFFALSE 1089
// exit ;
1087: GO 1140
// if mode in [ asc , up , + ] then
1089: LD_VAR 0 2
1093: PUSH
1094: LD_STRING asc
1096: PUSH
1097: LD_STRING up
1099: PUSH
1100: LD_STRING +
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: IN
1108: IFFALSE 1126
// result := timer + 0 0$01 else
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_VAR 0 1
1119: PUSH
1120: LD_INT 35
1122: PLUS
1123: ST_TO_ADDR
1124: GO 1140
// result := timer - 0 0$01 ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 35
1138: MINUS
1139: ST_TO_ADDR
// end ; end_of_file
1140: LD_VAR 0 3
1144: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Cornel , Bierezov , Powell , Lynch , Walker , Turner , Jillian , Frank ; export function PrepareAmerican ; var i , un , tmp , others , vehicles , got_mech , empty ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
// uc_side := 4 ;
1155: LD_ADDR_OWVAR 20
1159: PUSH
1160: LD_INT 4
1162: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1163: LD_ADDR_EXP 46
1167: PUSH
1168: LD_STRING Powell
1170: PPUSH
1171: LD_INT 0
1173: PPUSH
1174: LD_STRING 
1176: PPUSH
1177: CALL 35912 0 3
1181: ST_TO_ADDR
// uc_side := 1 ;
1182: LD_ADDR_OWVAR 20
1186: PUSH
1187: LD_INT 1
1189: ST_TO_ADDR
// uc_nation := 1 ;
1190: LD_ADDR_OWVAR 21
1194: PUSH
1195: LD_INT 1
1197: ST_TO_ADDR
// if debug then
1198: LD_EXP 1
1202: IFFALSE 1332
// begin for i = 1 to 4 do
1204: LD_ADDR_VAR 0 2
1208: PUSH
1209: DOUBLE
1210: LD_INT 1
1212: DEC
1213: ST_TO_ADDR
1214: LD_INT 4
1216: PUSH
1217: FOR_TO
1218: IFFALSE 1269
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
1220: LD_INT 0
1222: PPUSH
1223: LD_INT 1
1225: PPUSH
1226: LD_INT 2
1228: PPUSH
1229: CALL_OW 12
1233: PPUSH
1234: LD_INT 3
1236: PPUSH
1237: CALL_OW 380
// un := CreateHuman ;
1241: LD_ADDR_VAR 0 3
1245: PUSH
1246: CALL_OW 44
1250: ST_TO_ADDR
// others := others ^ un ;
1251: LD_ADDR_VAR 0 5
1255: PUSH
1256: LD_VAR 0 5
1260: PUSH
1261: LD_VAR 0 3
1265: ADD
1266: ST_TO_ADDR
// end ;
1267: GO 1217
1269: POP
1270: POP
// vehicles := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 , 504 ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 80 , 750 ] ] ;
1271: LD_ADDR_VAR 0 6
1275: PUSH
1276: LD_INT 21
1278: PUSH
1279: LD_INT 1
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: LD_INT 51
1287: PUSH
1288: LD_INT 90
1290: PUSH
1291: LD_INT 504
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 21
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: LD_INT 51
1313: PUSH
1314: LD_INT 80
1316: PUSH
1317: LD_INT 750
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: ST_TO_ADDR
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1332: LD_ADDR_EXP 37
1336: PUSH
1337: LD_STRING JMM
1339: PPUSH
1340: LD_EXP 1
1344: NOT
1345: PPUSH
1346: LD_EXP 3
1350: PPUSH
1351: CALL 35912 0 3
1355: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1356: LD_ADDR_EXP 38
1360: PUSH
1361: LD_STRING Bobby
1363: PPUSH
1364: LD_EXP 1
1368: NOT
1369: PPUSH
1370: LD_EXP 3
1374: PPUSH
1375: CALL 35912 0 3
1379: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1380: LD_ADDR_EXP 39
1384: PUSH
1385: LD_STRING Cyrus
1387: PPUSH
1388: LD_EXP 1
1392: NOT
1393: PPUSH
1394: LD_EXP 3
1398: PPUSH
1399: CALL 35912 0 3
1403: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1404: LD_ADDR_EXP 40
1408: PUSH
1409: LD_STRING Lisa
1411: PPUSH
1412: LD_EXP 1
1416: NOT
1417: PPUSH
1418: LD_EXP 3
1422: PPUSH
1423: CALL 35912 0 3
1427: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prefix_prev ) ;
1428: LD_ADDR_EXP 41
1432: PUSH
1433: LD_STRING Khatam
1435: PPUSH
1436: LD_EXP 1
1440: NOT
1441: PPUSH
1442: LD_EXP 3
1446: PPUSH
1447: CALL 35912 0 3
1451: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) , mission_prefix_prev ) ;
1452: LD_ADDR_EXP 42
1456: PUSH
1457: LD_STRING Brian
1459: PPUSH
1460: LD_EXP 1
1464: NOT
1465: PPUSH
1466: LD_EXP 3
1470: PPUSH
1471: CALL 35912 0 3
1475: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) , mission_prefix_prev ) ;
1476: LD_ADDR_EXP 43
1480: PUSH
1481: LD_STRING Jerry
1483: PPUSH
1484: LD_EXP 1
1488: NOT
1489: PPUSH
1490: LD_EXP 3
1494: PPUSH
1495: CALL 35912 0 3
1499: ST_TO_ADDR
// if Bobby then
1500: LD_EXP 38
1504: IFFALSE 1535
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
1506: LD_ADDR_VAR 0 4
1510: PUSH
1511: LD_VAR 0 4
1515: PPUSH
1516: LD_VAR 0 4
1520: PUSH
1521: LD_INT 1
1523: PLUS
1524: PPUSH
1525: LD_EXP 38
1529: PPUSH
1530: CALL_OW 2
1534: ST_TO_ADDR
// if Cyrus then
1535: LD_EXP 39
1539: IFFALSE 1570
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
1541: LD_ADDR_VAR 0 4
1545: PUSH
1546: LD_VAR 0 4
1550: PPUSH
1551: LD_VAR 0 4
1555: PUSH
1556: LD_INT 1
1558: PLUS
1559: PPUSH
1560: LD_EXP 39
1564: PPUSH
1565: CALL_OW 2
1569: ST_TO_ADDR
// if Lisa then
1570: LD_EXP 40
1574: IFFALSE 1605
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
1576: LD_ADDR_VAR 0 4
1580: PUSH
1581: LD_VAR 0 4
1585: PPUSH
1586: LD_VAR 0 4
1590: PUSH
1591: LD_INT 1
1593: PLUS
1594: PPUSH
1595: LD_EXP 40
1599: PPUSH
1600: CALL_OW 2
1604: ST_TO_ADDR
// if Khatam then
1605: LD_EXP 41
1609: IFFALSE 1640
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
1611: LD_ADDR_VAR 0 4
1615: PUSH
1616: LD_VAR 0 4
1620: PPUSH
1621: LD_VAR 0 4
1625: PUSH
1626: LD_INT 1
1628: PLUS
1629: PPUSH
1630: LD_EXP 41
1634: PPUSH
1635: CALL_OW 2
1639: ST_TO_ADDR
// if Brian then
1640: LD_EXP 42
1644: IFFALSE 1675
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
1646: LD_ADDR_VAR 0 4
1650: PUSH
1651: LD_VAR 0 4
1655: PPUSH
1656: LD_VAR 0 4
1660: PUSH
1661: LD_INT 1
1663: PLUS
1664: PPUSH
1665: LD_EXP 42
1669: PPUSH
1670: CALL_OW 2
1674: ST_TO_ADDR
// if Jerry then
1675: LD_EXP 43
1679: IFFALSE 1710
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
1681: LD_ADDR_VAR 0 4
1685: PUSH
1686: LD_VAR 0 4
1690: PPUSH
1691: LD_VAR 0 4
1695: PUSH
1696: LD_INT 1
1698: PLUS
1699: PPUSH
1700: LD_EXP 43
1704: PPUSH
1705: CALL_OW 2
1709: ST_TO_ADDR
// if TestCharacters ( 02_other_survivors ) then
1710: LD_STRING 02_other_survivors
1712: PPUSH
1713: CALL_OW 28
1717: IFFALSE 1732
// others := CreateCharacterSet ( 02_other_survivors ) ;
1719: LD_ADDR_VAR 0 5
1723: PUSH
1724: LD_STRING 02_other_survivors
1726: PPUSH
1727: CALL_OW 31
1731: ST_TO_ADDR
// if others then
1732: LD_VAR 0 5
1736: IFFALSE 1761
// begin tmp := tmp ^ others ;
1738: LD_ADDR_VAR 0 4
1742: PUSH
1743: LD_VAR 0 4
1747: PUSH
1748: LD_VAR 0 5
1752: ADD
1753: ST_TO_ADDR
// DeleteCharacters ( 02_other_survivors ) ;
1754: LD_STRING 02_other_survivors
1756: PPUSH
1757: CALL_OW 40
// end ; jmm_units := tmp ;
1761: LD_ADDR_EXP 4
1765: PUSH
1766: LD_VAR 0 4
1770: ST_TO_ADDR
// if not vehicles then
1771: LD_VAR 0 6
1775: NOT
1776: IFFALSE 1794
// vehicles := LoadVariable ( 02_tanks_1 , 0 ) ;
1778: LD_ADDR_VAR 0 6
1782: PUSH
1783: LD_STRING 02_tanks_1
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: CALL_OW 30
1793: ST_TO_ADDR
// if vehicles then
1794: LD_VAR 0 6
1798: IFFALSE 1992
// begin got_mech := false ;
1800: LD_ADDR_VAR 0 7
1804: PUSH
1805: LD_INT 0
1807: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_class , 3 ] ) then
1808: LD_VAR 0 4
1812: PPUSH
1813: LD_INT 25
1815: PUSH
1816: LD_INT 3
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PPUSH
1823: CALL_OW 72
1827: IFFALSE 1837
// got_mech := true ;
1829: LD_ADDR_VAR 0 7
1833: PUSH
1834: LD_INT 1
1836: ST_TO_ADDR
// for i = 1 to vehicles do
1837: LD_ADDR_VAR 0 2
1841: PUSH
1842: DOUBLE
1843: LD_INT 1
1845: DEC
1846: ST_TO_ADDR
1847: LD_VAR 0 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1990
// begin un := PrepareTank ( 1 , 3 , vehicles [ i ] [ 1 ] , vehicles [ i ] [ 2 ] , vehicles [ i ] [ 3 ] , vehicles [ i ] [ 4 ] , 40 ) ;
1855: LD_ADDR_VAR 0 3
1859: PUSH
1860: LD_INT 1
1862: PPUSH
1863: LD_INT 3
1865: PPUSH
1866: LD_VAR 0 6
1870: PUSH
1871: LD_VAR 0 2
1875: ARRAY
1876: PUSH
1877: LD_INT 1
1879: ARRAY
1880: PPUSH
1881: LD_VAR 0 6
1885: PUSH
1886: LD_VAR 0 2
1890: ARRAY
1891: PUSH
1892: LD_INT 2
1894: ARRAY
1895: PPUSH
1896: LD_VAR 0 6
1900: PUSH
1901: LD_VAR 0 2
1905: ARRAY
1906: PUSH
1907: LD_INT 3
1909: ARRAY
1910: PPUSH
1911: LD_VAR 0 6
1915: PUSH
1916: LD_VAR 0 2
1920: ARRAY
1921: PUSH
1922: LD_INT 4
1924: ARRAY
1925: PPUSH
1926: LD_INT 40
1928: PPUSH
1929: CALL 497 0 7
1933: ST_TO_ADDR
// if not got_mech then
1934: LD_VAR 0 7
1938: NOT
1939: IFFALSE 1965
// SetLives ( un , vehicles [ i ] [ 6 ] ) ;
1941: LD_VAR 0 3
1945: PPUSH
1946: LD_VAR 0 6
1950: PUSH
1951: LD_VAR 0 2
1955: ARRAY
1956: PUSH
1957: LD_INT 6
1959: ARRAY
1960: PPUSH
1961: CALL_OW 234
// tmp := Insert ( tmp , 1 , un ) ;
1965: LD_ADDR_VAR 0 4
1969: PUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: LD_VAR 0 3
1982: PPUSH
1983: CALL_OW 2
1987: ST_TO_ADDR
// end ;
1988: GO 1852
1990: POP
1991: POP
// end ; PlaceUnitXY ( JMM , 194 , 119 , false ) ;
1992: LD_EXP 37
1996: PPUSH
1997: LD_INT 194
1999: PPUSH
2000: LD_INT 119
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL_OW 48
// if tmp then
2010: LD_VAR 0 4
2014: IFFALSE 2202
// begin for i in tmp do
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: LD_VAR 0 4
2025: PUSH
2026: FOR_IN
2027: IFFALSE 2200
// begin if GetClass ( i ) <> 1 and i <> Khatam then
2029: LD_VAR 0 2
2033: PPUSH
2034: CALL_OW 257
2038: PUSH
2039: LD_INT 1
2041: NONEQUAL
2042: PUSH
2043: LD_VAR 0 2
2047: PUSH
2048: LD_EXP 41
2052: NONEQUAL
2053: AND
2054: IFFALSE 2068
// SetClass ( i , 1 ) ;
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_INT 1
2063: PPUSH
2064: CALL_OW 336
// if i = Khatam then
2068: LD_VAR 0 2
2072: PUSH
2073: LD_EXP 41
2077: EQUAL
2078: IFFALSE 2092
// SetClass ( i , 4 ) ;
2080: LD_VAR 0 2
2084: PPUSH
2085: LD_INT 4
2087: PPUSH
2088: CALL_OW 336
// empty := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2092: LD_ADDR_VAR 0 8
2096: PUSH
2097: LD_INT 22
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 21
2109: PUSH
2110: LD_INT 2
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 58
2119: PUSH
2120: EMPTY
2121: LIST
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: PPUSH
2128: CALL_OW 69
2132: ST_TO_ADDR
// if GetType ( i ) = unit_human and empty then
2133: LD_VAR 0 2
2137: PPUSH
2138: CALL_OW 247
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: PUSH
2147: LD_VAR 0 8
2151: AND
2152: IFFALSE 2174
// PlaceHumanInUnit ( i , empty [ 1 ] ) else
2154: LD_VAR 0 2
2158: PPUSH
2159: LD_VAR 0 8
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: CALL_OW 52
2172: GO 2189
// PlaceUnitArea ( i , startArea , false ) ;
2174: LD_VAR 0 2
2178: PPUSH
2179: LD_INT 1
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 49
// ComHold ( i ) ;
2189: LD_VAR 0 2
2193: PPUSH
2194: CALL_OW 140
// end ;
2198: GO 2026
2200: POP
2201: POP
// end ; bierezov_exist := LoadVariable ( 02_mikhailStatus_1 , false ) ;
2202: LD_ADDR_EXP 7
2206: PUSH
2207: LD_STRING 02_mikhailStatus_1
2209: PPUSH
2210: LD_INT 0
2212: PPUSH
2213: CALL_OW 30
2217: ST_TO_ADDR
// if not bierezov_exist and not debug then
2218: LD_EXP 7
2222: NOT
2223: PUSH
2224: LD_EXP 1
2228: NOT
2229: AND
2230: IFFALSE 2234
// exit ;
2232: GO 2268
// Bierezov = PrepareUnit ( Mikhail , false ,  ) ;
2234: LD_ADDR_EXP 45
2238: PUSH
2239: LD_STRING Mikhail
2241: PPUSH
2242: LD_INT 0
2244: PPUSH
2245: LD_STRING 
2247: PPUSH
2248: CALL 35912 0 3
2252: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , startArea , false ) ;
2253: LD_EXP 45
2257: PPUSH
2258: LD_INT 1
2260: PPUSH
2261: LD_INT 0
2263: PPUSH
2264: CALL_OW 49
// end ;
2268: LD_VAR 0 1
2272: RET
// export function PrepareCornell ; var tmp , un , i ; begin
2273: LD_INT 0
2275: PPUSH
2276: PPUSH
2277: PPUSH
2278: PPUSH
// uc_side := 4 ;
2279: LD_ADDR_OWVAR 20
2283: PUSH
2284: LD_INT 4
2286: ST_TO_ADDR
// uc_nation := 1 ;
2287: LD_ADDR_OWVAR 21
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , false ,  ) ;
2295: LD_ADDR_EXP 44
2299: PUSH
2300: LD_STRING Cornell
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: LD_STRING 
2308: PPUSH
2309: CALL 35912 0 3
2313: ST_TO_ADDR
// cornel_units := 9 - jmm_units ;
2314: LD_ADDR_EXP 6
2318: PUSH
2319: LD_INT 9
2321: PUSH
2322: LD_EXP 4
2326: MINUS
2327: ST_TO_ADDR
// tmp := [ ] ;
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: EMPTY
2334: ST_TO_ADDR
// if cornel_units < 4 then
2335: LD_EXP 6
2339: PUSH
2340: LD_INT 4
2342: LESS
2343: IFFALSE 2353
// cornel_units := 4 ;
2345: LD_ADDR_EXP 6
2349: PUSH
2350: LD_INT 4
2352: ST_TO_ADDR
// for i = 1 to cornel_units do
2353: LD_ADDR_VAR 0 4
2357: PUSH
2358: DOUBLE
2359: LD_INT 1
2361: DEC
2362: ST_TO_ADDR
2363: LD_EXP 6
2367: PUSH
2368: FOR_TO
2369: IFFALSE 2467
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 2 , 4 ] [ i mod 5 + 1 ] , 2 ) ;
2371: LD_INT 0
2373: PPUSH
2374: LD_INT 1
2376: PUSH
2377: LD_INT 1
2379: PUSH
2380: LD_INT 1
2382: PUSH
2383: LD_INT 2
2385: PUSH
2386: LD_INT 4
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: PUSH
2396: LD_VAR 0 4
2400: PUSH
2401: LD_INT 5
2403: MOD
2404: PUSH
2405: LD_INT 1
2407: PLUS
2408: ARRAY
2409: PPUSH
2410: LD_INT 2
2412: PPUSH
2413: CALL_OW 380
// un := CreateHuman ;
2417: LD_ADDR_VAR 0 3
2421: PUSH
2422: CALL_OW 44
2426: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_VAR 0 2
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_VAR 0 3
2444: PPUSH
2445: CALL_OW 2
2449: ST_TO_ADDR
// PlaceUnitArea ( un , cornelStartArea , false ) ;
2450: LD_VAR 0 3
2454: PPUSH
2455: LD_INT 2
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: CALL_OW 49
// end ;
2465: GO 2368
2467: POP
2468: POP
// cornel_units := tmp ;
2469: LD_ADDR_EXP 6
2473: PUSH
2474: LD_VAR 0 2
2478: ST_TO_ADDR
// PlaceUnitXY ( Cornel , 191 , 106 , false ) ;
2479: LD_EXP 44
2483: PPUSH
2484: LD_INT 191
2486: PPUSH
2487: LD_INT 106
2489: PPUSH
2490: LD_INT 0
2492: PPUSH
2493: CALL_OW 48
// end ;
2497: LD_VAR 0 1
2501: RET
// export function PrepareWesternBase ; var i ; begin
2502: LD_INT 0
2504: PPUSH
2505: PPUSH
// uc_side := 8 ;
2506: LD_ADDR_OWVAR 20
2510: PUSH
2511: LD_INT 8
2513: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
2514: LD_ADDR_EXP 47
2518: PUSH
2519: LD_STRING Lynch
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: LD_STRING 
2527: PPUSH
2528: CALL 35912 0 3
2532: ST_TO_ADDR
// Walker := PrepareUnit ( Walker , false ,  ) ;
2533: LD_ADDR_EXP 48
2537: PUSH
2538: LD_STRING Walker
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: LD_STRING 
2546: PPUSH
2547: CALL 35912 0 3
2551: ST_TO_ADDR
// Turner := PrepareUnit ( Turner , false ,  ) ;
2552: LD_ADDR_EXP 49
2556: PUSH
2557: LD_STRING Turner
2559: PPUSH
2560: LD_INT 0
2562: PPUSH
2563: LD_STRING 
2565: PPUSH
2566: CALL 35912 0 3
2570: ST_TO_ADDR
// Jillian := PrepareUnit ( Jillian , false ,  ) ;
2571: LD_ADDR_EXP 50
2575: PUSH
2576: LD_STRING Jillian
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: LD_STRING 
2584: PPUSH
2585: CALL 35912 0 3
2589: ST_TO_ADDR
// for i in [ Lynch , Walker , Turner , Jillian ] do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: LD_EXP 47
2599: PUSH
2600: LD_EXP 48
2604: PUSH
2605: LD_EXP 49
2609: PUSH
2610: LD_EXP 50
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: PUSH
2621: FOR_IN
2622: IFFALSE 2650
// begin PlaceUnitArea ( i , westBaseArea , false ) ;
2624: LD_VAR 0 2
2628: PPUSH
2629: LD_INT 3
2631: PPUSH
2632: LD_INT 0
2634: PPUSH
2635: CALL_OW 49
// ComHold ( i ) ;
2639: LD_VAR 0 2
2643: PPUSH
2644: CALL_OW 140
// end ;
2648: GO 2621
2650: POP
2651: POP
// end ;
2652: LD_VAR 0 1
2656: RET
// export function SelectGroup ; var units , selected , i ; begin
2657: LD_INT 0
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
// units := [ JMM , sel_changeable ] ^ jmm_units ^ [ sel_not_hired , sel_not_changeable , Cornel , Bierezov ] ^ [ sel_changeable ] ^ cornel_units ;
2663: LD_ADDR_VAR 0 2
2667: PUSH
2668: LD_EXP 37
2672: PUSH
2673: LD_INT -3
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PUSH
2680: LD_EXP 4
2684: ADD
2685: PUSH
2686: LD_INT -2
2688: PUSH
2689: LD_INT -4
2691: PUSH
2692: LD_EXP 44
2696: PUSH
2697: LD_EXP 45
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: ADD
2708: PUSH
2709: LD_INT -3
2711: PUSH
2712: EMPTY
2713: LIST
2714: ADD
2715: PUSH
2716: LD_EXP 6
2720: ADD
2721: ST_TO_ADDR
// selected := JMM ^ CharacterSelection ( Select four characters to go with you , 4 , 4 , units , [ ] ) ;
2722: LD_ADDR_VAR 0 3
2726: PUSH
2727: LD_EXP 37
2731: PUSH
2732: LD_STRING Select four characters to go with you
2734: PPUSH
2735: LD_INT 4
2737: PPUSH
2738: LD_INT 4
2740: PPUSH
2741: LD_VAR 0 2
2745: PPUSH
2746: EMPTY
2747: PPUSH
2748: CALL_OW 42
2752: ADD
2753: ST_TO_ADDR
// cornel_units := jmm_units union cornel_units diff selected ;
2754: LD_ADDR_EXP 6
2758: PUSH
2759: LD_EXP 4
2763: PUSH
2764: LD_EXP 6
2768: UNION
2769: PUSH
2770: LD_VAR 0 3
2774: DIFF
2775: ST_TO_ADDR
// for i in cornel_units ^ Bierezov do
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_EXP 6
2785: PUSH
2786: LD_EXP 45
2790: ADD
2791: PUSH
2792: FOR_IN
2793: IFFALSE 2824
// if GetSide ( i ) = 1 then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 255
2804: PUSH
2805: LD_INT 1
2807: EQUAL
2808: IFFALSE 2822
// SetSide ( i , 4 ) ;
2810: LD_VAR 0 4
2814: PPUSH
2815: LD_INT 4
2817: PPUSH
2818: CALL_OW 235
2822: GO 2792
2824: POP
2825: POP
// for i in selected do
2826: LD_ADDR_VAR 0 4
2830: PUSH
2831: LD_VAR 0 3
2835: PUSH
2836: FOR_IN
2837: IFFALSE 2868
// if GetSide ( i ) = 4 then
2839: LD_VAR 0 4
2843: PPUSH
2844: CALL_OW 255
2848: PUSH
2849: LD_INT 4
2851: EQUAL
2852: IFFALSE 2866
// SetSide ( i , 1 ) ;
2854: LD_VAR 0 4
2858: PPUSH
2859: LD_INT 1
2861: PPUSH
2862: CALL_OW 235
2866: GO 2836
2868: POP
2869: POP
// jmm_units := jmm_units diff cornel_units ;
2870: LD_ADDR_EXP 4
2874: PUSH
2875: LD_EXP 4
2879: PUSH
2880: LD_EXP 6
2884: DIFF
2885: ST_TO_ADDR
// if GetSide ( Bobby ) = 4 then
2886: LD_EXP 38
2890: PPUSH
2891: CALL_OW 255
2895: PUSH
2896: LD_INT 4
2898: EQUAL
2899: IFFALSE 2914
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
2901: LD_EXP 3
2905: PUSH
2906: LD_STRING Bobby
2908: STR
2909: PPUSH
2910: CALL_OW 40
// if GetSide ( Cyrus ) = 4 then
2914: LD_EXP 39
2918: PPUSH
2919: CALL_OW 255
2923: PUSH
2924: LD_INT 4
2926: EQUAL
2927: IFFALSE 2942
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
2929: LD_EXP 3
2933: PUSH
2934: LD_STRING Cyrus
2936: STR
2937: PPUSH
2938: CALL_OW 40
// if GetSide ( Lisa ) = 4 then
2942: LD_EXP 40
2946: PPUSH
2947: CALL_OW 255
2951: PUSH
2952: LD_INT 4
2954: EQUAL
2955: IFFALSE 2970
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
2957: LD_EXP 3
2961: PUSH
2962: LD_STRING Lisa
2964: STR
2965: PPUSH
2966: CALL_OW 40
// if GetSide ( Khatam ) = 4 then
2970: LD_EXP 41
2974: PPUSH
2975: CALL_OW 255
2979: PUSH
2980: LD_INT 4
2982: EQUAL
2983: IFFALSE 2998
// DeleteCharacters ( mission_prefix_prev & Khatam ) ;
2985: LD_EXP 3
2989: PUSH
2990: LD_STRING Khatam
2992: STR
2993: PPUSH
2994: CALL_OW 40
// if GetSide ( Brian ) = 4 then
2998: LD_EXP 42
3002: PPUSH
3003: CALL_OW 255
3007: PUSH
3008: LD_INT 4
3010: EQUAL
3011: IFFALSE 3026
// DeleteCharacters ( mission_prefix_prev & Brian ) ;
3013: LD_EXP 3
3017: PUSH
3018: LD_STRING Brian
3020: STR
3021: PPUSH
3022: CALL_OW 40
// if GetSide ( Jerry ) = 4 then
3026: LD_EXP 43
3030: PPUSH
3031: CALL_OW 255
3035: PUSH
3036: LD_INT 4
3038: EQUAL
3039: IFFALSE 3054
// DeleteCharacters ( mission_prefix_prev & Jerry ) ;
3041: LD_EXP 3
3045: PUSH
3046: LD_STRING Jerry
3048: STR
3049: PPUSH
3050: CALL_OW 40
// end ; end_of_file
3054: LD_VAR 0 1
3058: RET
// export Pokryshkin ; export ru_patrol , ru_spec_patrol , ru_forest , ru_vehicles , ru_produce_list , ru_cornel_attack ; export ru_firepoints_south , ru_alert , ru_alert_xy ; export function PrepareRussian ; var i , j , b , un , veh , tw , bar , lab , fac , skill , vehicles , spot_xy ; begin
3059: LD_INT 0
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
3065: PPUSH
3066: PPUSH
3067: PPUSH
3068: PPUSH
3069: PPUSH
3070: PPUSH
3071: PPUSH
3072: PPUSH
3073: PPUSH
// ru_alert := false ;
3074: LD_ADDR_EXP 60
3078: PUSH
3079: LD_INT 0
3081: ST_TO_ADDR
// ru_produce_list := [ ] ;
3082: LD_ADDR_EXP 57
3086: PUSH
3087: EMPTY
3088: ST_TO_ADDR
// if Difficulty > 1 then
3089: LD_OWVAR 67
3093: PUSH
3094: LD_INT 1
3096: GREATER
3097: IFFALSE 3185
// begin uc_side := 3 ;
3099: LD_ADDR_OWVAR 20
3103: PUSH
3104: LD_INT 3
3106: ST_TO_ADDR
// uc_nation := 3 ;
3107: LD_ADDR_OWVAR 21
3111: PUSH
3112: LD_INT 3
3114: ST_TO_ADDR
// bc_type := b_breastwork ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// bc_level := Difficulty ;
3123: LD_ADDR_OWVAR 43
3127: PUSH
3128: LD_OWVAR 67
3132: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 22 , 14 , 0 ) ;
3133: LD_INT 22
3135: PPUSH
3136: LD_INT 14
3138: PPUSH
3139: LD_INT 0
3141: PPUSH
3142: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 46 , 0 ) ;
3146: LD_INT 48
3148: PPUSH
3149: LD_INT 46
3151: PPUSH
3152: LD_INT 0
3154: PPUSH
3155: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 86 , 65 , 5 ) ;
3159: LD_INT 86
3161: PPUSH
3162: LD_INT 65
3164: PPUSH
3165: LD_INT 5
3167: PPUSH
3168: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 165 , 73 , 5 ) ;
3172: LD_INT 165
3174: PPUSH
3175: LD_INT 73
3177: PPUSH
3178: LD_INT 5
3180: PPUSH
3181: CALL_OW 47
// end ; if Difficulty >= 3 then
3185: LD_OWVAR 67
3189: PUSH
3190: LD_INT 3
3192: GREATEREQUAL
3193: IFFALSE 3208
// SetTech ( tech_weap1 , 3 , state_researched ) ;
3195: LD_INT 51
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: LD_INT 2
3203: PPUSH
3204: CALL_OW 322
// tw := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
3208: LD_ADDR_VAR 0 7
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 3
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 2
3225: PUSH
3226: LD_INT 30
3228: PUSH
3229: LD_INT 31
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: LD_INT 30
3238: PUSH
3239: LD_INT 32
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: LIST
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PPUSH
3255: CALL_OW 69
3259: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ;
3260: LD_ADDR_VAR 0 8
3264: PUSH
3265: LD_INT 22
3267: PUSH
3268: LD_INT 3
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 30
3277: PUSH
3278: LD_INT 4
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PPUSH
3289: CALL_OW 69
3293: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
3294: LD_ADDR_VAR 0 10
3298: PUSH
3299: LD_INT 22
3301: PUSH
3302: LD_INT 3
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: LD_INT 30
3311: PUSH
3312: LD_INT 3
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PPUSH
3323: CALL_OW 69
3327: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) ;
3328: LD_ADDR_VAR 0 9
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_INT 3
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 30
3345: PUSH
3346: LD_INT 6
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 69
3361: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do
3362: LD_ADDR_VAR 0 2
3366: PUSH
3367: LD_INT 22
3369: PUSH
3370: LD_INT 3
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 30
3379: PUSH
3380: LD_INT 1
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PPUSH
3391: CALL_OW 69
3395: PUSH
3396: FOR_IN
3397: IFFALSE 3441
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
3399: LD_VAR 0 2
3403: PPUSH
3404: CALL_OW 274
3408: PPUSH
3409: LD_INT 1
3411: PPUSH
3412: LD_INT 1000
3414: PPUSH
3415: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 300 ) ;
3419: LD_VAR 0 2
3423: PPUSH
3424: CALL_OW 274
3428: PPUSH
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 300
3434: PPUSH
3435: CALL_OW 277
// end ;
3439: GO 3396
3441: POP
3442: POP
// uc_side := 3 ;
3443: LD_ADDR_OWVAR 20
3447: PUSH
3448: LD_INT 3
3450: ST_TO_ADDR
// uc_nation := 3 ;
3451: LD_ADDR_OWVAR 21
3455: PUSH
3456: LD_INT 3
3458: ST_TO_ADDR
// skill := [ 2 , 3 , 4 , 4 ] [ Difficulty ] ;
3459: LD_ADDR_VAR 0 11
3463: PUSH
3464: LD_INT 2
3466: PUSH
3467: LD_INT 3
3469: PUSH
3470: LD_INT 4
3472: PUSH
3473: LD_INT 4
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: PUSH
3482: LD_OWVAR 67
3486: ARRAY
3487: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
3488: LD_ADDR_EXP 52
3492: PUSH
3493: LD_STRING Pokryshkin
3495: PPUSH
3496: LD_INT 0
3498: PPUSH
3499: LD_STRING 
3501: PPUSH
3502: CALL 35912 0 3
3506: ST_TO_ADDR
// PlaceUnitXY ( Pokryshkin , 63 , 21 , false ) ;
3507: LD_EXP 52
3511: PPUSH
3512: LD_INT 63
3514: PPUSH
3515: LD_INT 21
3517: PPUSH
3518: LD_INT 0
3520: PPUSH
3521: CALL_OW 48
// ComHold ( Pokryshkin ) ;
3525: LD_EXP 52
3529: PPUSH
3530: CALL_OW 140
// InitHc ;
3534: CALL_OW 19
// for i in fac do
3538: LD_ADDR_VAR 0 2
3542: PUSH
3543: LD_VAR 0 10
3547: PUSH
3548: FOR_IN
3549: IFFALSE 3602
// begin for j = 1 to 6 do
3551: LD_ADDR_VAR 0 3
3555: PUSH
3556: DOUBLE
3557: LD_INT 1
3559: DEC
3560: ST_TO_ADDR
3561: LD_INT 6
3563: PUSH
3564: FOR_TO
3565: IFFALSE 3598
// begin PrepareHuman ( false , 3 , skill ) ;
3567: LD_INT 0
3569: PPUSH
3570: LD_INT 3
3572: PPUSH
3573: LD_VAR 0 11
3577: PPUSH
3578: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3582: CALL_OW 44
3586: PPUSH
3587: LD_VAR 0 2
3591: PPUSH
3592: CALL_OW 52
// end ;
3596: GO 3564
3598: POP
3599: POP
// end ;
3600: GO 3548
3602: POP
3603: POP
// for i in lab do
3604: LD_ADDR_VAR 0 2
3608: PUSH
3609: LD_VAR 0 9
3613: PUSH
3614: FOR_IN
3615: IFFALSE 3648
// begin PrepareHuman ( false , 4 , skill ) ;
3617: LD_INT 0
3619: PPUSH
3620: LD_INT 4
3622: PPUSH
3623: LD_VAR 0 11
3627: PPUSH
3628: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3632: CALL_OW 44
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 52
// end ;
3646: GO 3614
3648: POP
3649: POP
// for i in tw do
3650: LD_ADDR_VAR 0 2
3654: PUSH
3655: LD_VAR 0 7
3659: PUSH
3660: FOR_IN
3661: IFFALSE 3710
// begin PlaceWeaponTurret ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
3663: LD_VAR 0 2
3667: PPUSH
3668: LD_INT 42
3670: PUSH
3671: LD_INT 43
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 1
3680: PPUSH
3681: LD_INT 2
3683: PPUSH
3684: CALL_OW 12
3688: ARRAY
3689: PPUSH
3690: CALL_OW 431
// PrepareSolBun ( skill , i ) ;
3694: LD_VAR 0 11
3698: PPUSH
3699: LD_VAR 0 2
3703: PPUSH
3704: CALL 775 0 2
// end ;
3708: GO 3660
3710: POP
3711: POP
// for i in bar do
3712: LD_ADDR_VAR 0 2
3716: PUSH
3717: LD_VAR 0 8
3721: PUSH
3722: FOR_IN
3723: IFFALSE 3756
// begin PrepareHuman ( false , 1 , skill ) ;
3725: LD_INT 0
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_VAR 0 11
3735: PPUSH
3736: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
3740: CALL_OW 44
3744: PPUSH
3745: LD_VAR 0 2
3749: PPUSH
3750: CALL_OW 52
// end ;
3754: GO 3722
3756: POP
3757: POP
// spot_xy := [ [ 100 , 9 ] , [ 135 , 60 ] , [ 41 , 6 ] , [ 22 , 9 ] , [ 84 , 14 ] ] ;
3758: LD_ADDR_VAR 0 13
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 9
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PUSH
3773: LD_INT 135
3775: PUSH
3776: LD_INT 60
3778: PUSH
3779: EMPTY
3780: LIST
3781: LIST
3782: PUSH
3783: LD_INT 41
3785: PUSH
3786: LD_INT 6
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: PUSH
3793: LD_INT 22
3795: PUSH
3796: LD_INT 9
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PUSH
3803: LD_INT 84
3805: PUSH
3806: LD_INT 14
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: ST_TO_ADDR
// vehicles := [ ] ;
3820: LD_ADDR_VAR 0 12
3824: PUSH
3825: EMPTY
3826: ST_TO_ADDR
// for i in spot_xy do
3827: LD_ADDR_VAR 0 2
3831: PUSH
3832: LD_VAR 0 13
3836: PUSH
3837: FOR_IN
3838: IFFALSE 3996
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 100 ) ;
3840: LD_ADDR_VAR 0 6
3844: PUSH
3845: LD_INT 3
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 22
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: LD_INT 42
3862: PUSH
3863: LD_INT 43
3865: PUSH
3866: LD_INT 44
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 1
3876: PPUSH
3877: LD_INT 3
3879: PPUSH
3880: CALL_OW 12
3884: ARRAY
3885: PPUSH
3886: LD_INT 100
3888: PPUSH
3889: CALL 497 0 7
3893: ST_TO_ADDR
// vehicles := Insert ( vehicles , vehicles + 1 , veh ) ;
3894: LD_ADDR_VAR 0 12
3898: PUSH
3899: LD_VAR 0 12
3903: PPUSH
3904: LD_VAR 0 12
3908: PUSH
3909: LD_INT 1
3911: PLUS
3912: PPUSH
3913: LD_VAR 0 6
3917: PPUSH
3918: CALL_OW 2
3922: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3923: LD_VAR 0 6
3927: PPUSH
3928: LD_INT 3
3930: PPUSH
3931: CALL_OW 233
// PlaceUnitXY ( veh , i [ 1 ] , i [ 2 ] , false ) ;
3935: LD_VAR 0 6
3939: PPUSH
3940: LD_VAR 0 2
3944: PUSH
3945: LD_INT 1
3947: ARRAY
3948: PPUSH
3949: LD_VAR 0 2
3953: PUSH
3954: LD_INT 2
3956: ARRAY
3957: PPUSH
3958: LD_INT 0
3960: PPUSH
3961: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
3965: LD_INT 0
3967: PPUSH
3968: LD_INT 3
3970: PPUSH
3971: LD_VAR 0 11
3975: PPUSH
3976: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3980: CALL_OW 44
3984: PPUSH
3985: LD_VAR 0 6
3989: PPUSH
3990: CALL_OW 52
// end ;
3994: GO 3837
3996: POP
3997: POP
// for i = 1 to [ 5 , 7 , 8 , 9 ] [ Difficulty ] do
3998: LD_ADDR_VAR 0 2
4002: PUSH
4003: DOUBLE
4004: LD_INT 1
4006: DEC
4007: ST_TO_ADDR
4008: LD_INT 5
4010: PUSH
4011: LD_INT 7
4013: PUSH
4014: LD_INT 8
4016: PUSH
4017: LD_INT 9
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: PUSH
4026: LD_OWVAR 67
4030: ARRAY
4031: PUSH
4032: FOR_TO
4033: IFFALSE 4093
// begin PrepareHuman ( false , 1 , skill ) ;
4035: LD_INT 0
4037: PPUSH
4038: LD_INT 1
4040: PPUSH
4041: LD_VAR 0 11
4045: PPUSH
4046: CALL_OW 380
// un := CreateHuman ;
4050: LD_ADDR_VAR 0 5
4054: PUSH
4055: CALL_OW 44
4059: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardArea , false ) ;
4060: LD_VAR 0 5
4064: PPUSH
4065: LD_INT 11
4067: PPUSH
4068: LD_INT 0
4070: PPUSH
4071: CALL_OW 49
// ru_forest := ru_forest ^ un ;
4075: LD_ADDR_EXP 55
4079: PUSH
4080: LD_EXP 55
4084: PUSH
4085: LD_VAR 0 5
4089: ADD
4090: ST_TO_ADDR
// end ;
4091: GO 4032
4093: POP
4094: POP
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
4095: LD_ADDR_VAR 0 2
4099: PUSH
4100: DOUBLE
4101: LD_INT 1
4103: DEC
4104: ST_TO_ADDR
4105: LD_INT 2
4107: PUSH
4108: LD_INT 3
4110: PUSH
4111: LD_INT 4
4113: PUSH
4114: LD_INT 5
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PUSH
4129: FOR_TO
4130: IFFALSE 4190
// begin PrepareHuman ( false , 1 , skill ) ;
4132: LD_INT 0
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: LD_VAR 0 11
4142: PPUSH
4143: CALL_OW 380
// un := CreateHuman ;
4147: LD_ADDR_VAR 0 5
4151: PUSH
4152: CALL_OW 44
4156: ST_TO_ADDR
// PlaceUnitArea ( un , forestSouthGuardArea , false ) ;
4157: LD_VAR 0 5
4161: PPUSH
4162: LD_INT 12
4164: PPUSH
4165: LD_INT 0
4167: PPUSH
4168: CALL_OW 49
// ru_patrol := ru_patrol ^ un ;
4172: LD_ADDR_EXP 53
4176: PUSH
4177: LD_EXP 53
4181: PUSH
4182: LD_VAR 0 5
4186: ADD
4187: ST_TO_ADDR
// end ;
4188: GO 4129
4190: POP
4191: POP
// for i = 1 to 2 do
4192: LD_ADDR_VAR 0 2
4196: PUSH
4197: DOUBLE
4198: LD_INT 1
4200: DEC
4201: ST_TO_ADDR
4202: LD_INT 2
4204: PUSH
4205: FOR_TO
4206: IFFALSE 4272
// begin PrepareHuman ( sex_male , 1 , skill ) ;
4208: LD_INT 1
4210: PPUSH
4211: LD_INT 1
4213: PPUSH
4214: LD_VAR 0 11
4218: PPUSH
4219: CALL_OW 380
// un := CreateHuman ;
4223: LD_ADDR_VAR 0 5
4227: PUSH
4228: CALL_OW 44
4232: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 12 , 3 , false ) ;
4233: LD_VAR 0 5
4237: PPUSH
4238: LD_INT 39
4240: PPUSH
4241: LD_INT 12
4243: PPUSH
4244: LD_INT 3
4246: PPUSH
4247: LD_INT 0
4249: PPUSH
4250: CALL_OW 50
// ru_spec_patrol := ru_spec_patrol ^ un ;
4254: LD_ADDR_EXP 54
4258: PUSH
4259: LD_EXP 54
4263: PUSH
4264: LD_VAR 0 5
4268: ADD
4269: ST_TO_ADDR
// end ;
4270: GO 4205
4272: POP
4273: POP
// for i = 1 to 3 do
4274: LD_ADDR_VAR 0 2
4278: PUSH
4279: DOUBLE
4280: LD_INT 1
4282: DEC
4283: ST_TO_ADDR
4284: LD_INT 3
4286: PUSH
4287: FOR_TO
4288: IFFALSE 4354
// begin PrepareHuman ( false , 1 , skill ) ;
4290: LD_INT 0
4292: PPUSH
4293: LD_INT 1
4295: PPUSH
4296: LD_VAR 0 11
4300: PPUSH
4301: CALL_OW 380
// un := CreateHuman ;
4305: LD_ADDR_VAR 0 5
4309: PUSH
4310: CALL_OW 44
4314: ST_TO_ADDR
// PlaceUnitXYR ( un , 180 , 11 , 4 , false ) ;
4315: LD_VAR 0 5
4319: PPUSH
4320: LD_INT 180
4322: PPUSH
4323: LD_INT 11
4325: PPUSH
4326: LD_INT 4
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 50
// ru_cornel_attack := ru_cornel_attack ^ un ;
4336: LD_ADDR_EXP 58
4340: PUSH
4341: LD_EXP 58
4345: PUSH
4346: LD_VAR 0 5
4350: ADD
4351: ST_TO_ADDR
// end ;
4352: GO 4287
4354: POP
4355: POP
// ru_vehicles := vehicles ;
4356: LD_ADDR_EXP 56
4360: PUSH
4361: LD_VAR 0 12
4365: ST_TO_ADDR
// ru_firepoints_south := [ [ [ 131 , 121 ] , [ 113 , 90 ] , [ 93 , 62 ] ] , [ [ 106 , 54 ] , [ 120 , 80 ] , [ 143 , 120 ] ] , [ [ 154 , 116 ] , [ 140 , 93 ] , [ 130 , 58 ] ] , [ [ 105 , 106 ] , [ 134 , 98 ] , [ 159 , 113 ] ] , ] ;
4366: LD_ADDR_EXP 59
4370: PUSH
4371: LD_INT 131
4373: PUSH
4374: LD_INT 121
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 113
4383: PUSH
4384: LD_INT 90
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: LD_INT 93
4393: PUSH
4394: LD_INT 62
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 106
4408: PUSH
4409: LD_INT 54
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 120
4418: PUSH
4419: LD_INT 80
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 143
4428: PUSH
4429: LD_INT 120
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 154
4443: PUSH
4444: LD_INT 116
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 140
4453: PUSH
4454: LD_INT 93
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: LD_INT 130
4463: PUSH
4464: LD_INT 58
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: LD_INT 105
4478: PUSH
4479: LD_INT 106
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 134
4488: PUSH
4489: LD_INT 98
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 159
4498: PUSH
4499: LD_INT 113
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: LIST
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: ST_TO_ADDR
// if Difficulty = 1 then
4517: LD_OWVAR 67
4521: PUSH
4522: LD_INT 1
4524: EQUAL
4525: IFFALSE 4529
// exit ;
4527: GO 4584
// for i = 1 to Difficulty - 1 do
4529: LD_ADDR_VAR 0 2
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_OWVAR 67
4543: PUSH
4544: LD_INT 1
4546: MINUS
4547: PUSH
4548: FOR_TO
4549: IFFALSE 4582
// ru_produce_list := ru_produce_list ^ [ ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ;
4551: LD_ADDR_EXP 57
4555: PUSH
4556: LD_EXP 57
4560: PUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: LD_INT 1
4569: PUSH
4570: LD_INT 43
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: ADD
4579: ST_TO_ADDR
4580: GO 4548
4582: POP
4583: POP
// end ;
4584: LD_VAR 0 1
4588: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , filter ;
4589: LD_INT 22
4591: PUSH
4592: LD_INT 3
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: PUSH
4599: LD_INT 21
4601: PUSH
4602: LD_INT 2
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PPUSH
4613: CALL_OW 69
4617: IFFALSE 4711
4619: GO 4621
4621: DISABLE
4622: LD_INT 0
4624: PPUSH
4625: PPUSH
// begin enable ;
4626: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4627: LD_ADDR_VAR 0 2
4631: PUSH
4632: LD_INT 22
4634: PUSH
4635: LD_INT 3
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 21
4644: PUSH
4645: LD_INT 2
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PPUSH
4656: CALL_OW 69
4660: ST_TO_ADDR
// if filter then
4661: LD_VAR 0 2
4665: IFFALSE 4711
// for i in filter do
4667: LD_ADDR_VAR 0 1
4671: PUSH
4672: LD_VAR 0 2
4676: PUSH
4677: FOR_IN
4678: IFFALSE 4709
// if GetFuel ( i ) < 20 then
4680: LD_VAR 0 1
4684: PPUSH
4685: CALL_OW 261
4689: PUSH
4690: LD_INT 20
4692: LESS
4693: IFFALSE 4707
// SetFuel ( i , 20 ) ;
4695: LD_VAR 0 1
4699: PPUSH
4700: LD_INT 20
4702: PPUSH
4703: CALL_OW 240
4707: GO 4677
4709: POP
4710: POP
// end ;
4711: PPOPN 2
4713: END
// every 0 0$01 trigger ru_produce_list do var i , fac , can_produce ;
4714: LD_EXP 57
4718: IFFALSE 4937
4720: GO 4722
4722: DISABLE
4723: LD_INT 0
4725: PPUSH
4726: PPUSH
4727: PPUSH
// begin enable ;
4728: ENABLE
// fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4729: LD_ADDR_VAR 0 2
4733: PUSH
4734: LD_INT 22
4736: PUSH
4737: LD_INT 3
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 30
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 69
4762: ST_TO_ADDR
// can_produce := [ ] ;
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: EMPTY
4769: ST_TO_ADDR
// if not fac then
4770: LD_VAR 0 2
4774: NOT
4775: IFFALSE 4780
// begin disable ;
4777: DISABLE
// exit ;
4778: GO 4937
// end ; for i in fac do
4780: LD_ADDR_VAR 0 1
4784: PUSH
4785: LD_VAR 0 2
4789: PUSH
4790: FOR_IN
4791: IFFALSE 4829
// if UnitsInside ( i ) then
4793: LD_VAR 0 1
4797: PPUSH
4798: CALL_OW 313
4802: IFFALSE 4827
// can_produce := Insert ( can_produce , 1 , i ) ;
4804: LD_ADDR_VAR 0 3
4808: PUSH
4809: LD_VAR 0 3
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: LD_VAR 0 1
4821: PPUSH
4822: CALL_OW 2
4826: ST_TO_ADDR
4827: GO 4790
4829: POP
4830: POP
// if not can_produce then
4831: LD_VAR 0 3
4835: NOT
4836: IFFALSE 4840
// exit ;
4838: GO 4937
// ComConstruct ( can_produce [ rand ( 1 , can_produce ) ] , ru_produce_list [ 1 ] , ru_produce_list [ 2 ] , ru_produce_list [ 3 ] , ru_produce_list [ 4 ] ) ;
4840: LD_VAR 0 3
4844: PUSH
4845: LD_INT 1
4847: PPUSH
4848: LD_VAR 0 3
4852: PPUSH
4853: CALL_OW 12
4857: ARRAY
4858: PPUSH
4859: LD_EXP 57
4863: PUSH
4864: LD_INT 1
4866: ARRAY
4867: PPUSH
4868: LD_EXP 57
4872: PUSH
4873: LD_INT 2
4875: ARRAY
4876: PPUSH
4877: LD_EXP 57
4881: PUSH
4882: LD_INT 3
4884: ARRAY
4885: PPUSH
4886: LD_EXP 57
4890: PUSH
4891: LD_INT 4
4893: ARRAY
4894: PPUSH
4895: CALL_OW 125
// for i = 1 to 4 do
4899: LD_ADDR_VAR 0 1
4903: PUSH
4904: DOUBLE
4905: LD_INT 1
4907: DEC
4908: ST_TO_ADDR
4909: LD_INT 4
4911: PUSH
4912: FOR_TO
4913: IFFALSE 4935
// ru_produce_list := Delete ( ru_produce_list , 1 ) ;
4915: LD_ADDR_EXP 57
4919: PUSH
4920: LD_EXP 57
4924: PPUSH
4925: LD_INT 1
4927: PPUSH
4928: CALL_OW 3
4932: ST_TO_ADDR
4933: GO 4912
4935: POP
4936: POP
// end ;
4937: PPOPN 3
4939: END
// export function AddMoreTanks ( ) ; var i , veh ; begin
4940: LD_INT 0
4942: PPUSH
4943: PPUSH
4944: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4945: LD_ADDR_VAR 0 2
4949: PUSH
4950: DOUBLE
4951: LD_INT 1
4953: DEC
4954: ST_TO_ADDR
4955: LD_INT 2
4957: PUSH
4958: LD_INT 3
4960: PUSH
4961: LD_INT 4
4963: PUSH
4964: LD_INT 4
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: LD_OWVAR 67
4977: ARRAY
4978: PUSH
4979: FOR_TO
4980: IFFALSE 5129
// begin PrepareHuman ( false , 3 , 3 ) ;
4982: LD_INT 0
4984: PPUSH
4985: LD_INT 3
4987: PPUSH
4988: LD_INT 3
4990: PPUSH
4991: CALL_OW 380
// veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 2 ) ] , 70 ) ;
4995: LD_ADDR_VAR 0 3
4999: PUSH
5000: LD_INT 3
5002: PPUSH
5003: LD_INT 3
5005: PPUSH
5006: LD_INT 22
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: LD_INT 1
5014: PPUSH
5015: LD_INT 43
5017: PUSH
5018: LD_INT 42
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: PUSH
5025: LD_INT 1
5027: PPUSH
5028: LD_INT 2
5030: PPUSH
5031: CALL_OW 12
5035: ARRAY
5036: PPUSH
5037: LD_INT 70
5039: PPUSH
5040: CALL 497 0 7
5044: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5045: LD_VAR 0 3
5049: PPUSH
5050: LD_INT 4
5052: PPUSH
5053: CALL_OW 233
// PlaceUnitXY ( veh , 229 , 44 , false ) ;
5057: LD_VAR 0 3
5061: PPUSH
5062: LD_INT 229
5064: PPUSH
5065: LD_INT 44
5067: PPUSH
5068: LD_INT 0
5070: PPUSH
5071: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5075: CALL_OW 44
5079: PPUSH
5080: LD_VAR 0 3
5084: PPUSH
5085: CALL_OW 52
// ru_vehicles := ru_vehicles ^ veh ;
5089: LD_ADDR_EXP 56
5093: PUSH
5094: LD_EXP 56
5098: PUSH
5099: LD_VAR 0 3
5103: ADD
5104: ST_TO_ADDR
// ComMoveXY ( veh , 191 , 32 ) ;
5105: LD_VAR 0 3
5109: PPUSH
5110: LD_INT 191
5112: PPUSH
5113: LD_INT 32
5115: PPUSH
5116: CALL_OW 111
// Wait ( 0 0$02 ) ;
5120: LD_INT 70
5122: PPUSH
5123: CALL_OW 67
// end ;
5127: GO 4979
5129: POP
5130: POP
// end ;
5131: LD_VAR 0 1
5135: RET
// every 0 0$1 trigger prepare_siege and ru_vehicles do var i , enemy , tmp ;
5136: LD_EXP 31
5140: PUSH
5141: LD_EXP 56
5145: AND
5146: IFFALSE 5320
5148: GO 5150
5150: DISABLE
5151: LD_INT 0
5153: PPUSH
5154: PPUSH
5155: PPUSH
// begin wait ( 0 0$50 ) ;
5156: LD_INT 1750
5158: PPUSH
5159: CALL_OW 67
// tmp := ru_vehicles ;
5163: LD_ADDR_VAR 0 3
5167: PUSH
5168: LD_EXP 56
5172: ST_TO_ADDR
// if not tmp then
5173: LD_VAR 0 3
5177: NOT
5178: IFFALSE 5182
// exit ;
5180: GO 5320
// repeat wait ( 0 0$1 ) ;
5182: LD_INT 35
5184: PPUSH
5185: CALL_OW 67
// for i in tmp do
5189: LD_ADDR_VAR 0 1
5193: PUSH
5194: LD_VAR 0 3
5198: PUSH
5199: FOR_IN
5200: IFFALSE 5311
// begin enemy := NearestUnitToUnit ( [ f_side , 1 ] , i ) ;
5202: LD_ADDR_VAR 0 2
5206: PUSH
5207: LD_INT 22
5209: PUSH
5210: LD_INT 1
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PPUSH
5217: LD_VAR 0 1
5221: PPUSH
5222: CALL_OW 74
5226: ST_TO_ADDR
// if GetDistUnits ( i , enemy ) > 10 then
5227: LD_VAR 0 1
5231: PPUSH
5232: LD_VAR 0 2
5236: PPUSH
5237: CALL_OW 296
5241: PUSH
5242: LD_INT 10
5244: GREATER
5245: IFFALSE 5264
// ComAgressiveMove ( i , 69 , 101 ) else
5247: LD_VAR 0 1
5251: PPUSH
5252: LD_INT 69
5254: PPUSH
5255: LD_INT 101
5257: PPUSH
5258: CALL_OW 114
5262: GO 5278
// ComAttackUnit ( i , enemy ) ;
5264: LD_VAR 0 1
5268: PPUSH
5269: LD_VAR 0 2
5273: PPUSH
5274: CALL_OW 115
// if GetLives ( i ) < 250 then
5278: LD_VAR 0 1
5282: PPUSH
5283: CALL_OW 256
5287: PUSH
5288: LD_INT 250
5290: LESS
5291: IFFALSE 5309
// tmp := tmp diff i ;
5293: LD_ADDR_VAR 0 3
5297: PUSH
5298: LD_VAR 0 3
5302: PUSH
5303: LD_VAR 0 1
5307: DIFF
5308: ST_TO_ADDR
// end ;
5309: GO 5199
5311: POP
5312: POP
// until not tmp ;
5313: LD_VAR 0 3
5317: NOT
5318: IFFALSE 5182
// end ; end_of_file
5320: PPOPN 3
5322: END
// export function Action ; var i , units , vehicles , cargos , resources , cargo ; begin
5323: LD_INT 0
5325: PPUSH
5326: PPUSH
5327: PPUSH
5328: PPUSH
5329: PPUSH
5330: PPUSH
5331: PPUSH
// InGameOn ;
5332: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
5336: LD_EXP 37
5340: PPUSH
5341: CALL_OW 87
// ComTurnUnit ( JMM , Cornel ) ;
5345: LD_EXP 37
5349: PPUSH
5350: LD_EXP 44
5354: PPUSH
5355: CALL_OW 119
// if Bierezov then
5359: LD_EXP 45
5363: IFFALSE 5379
// ComTurnUnit ( Bierezov , Cornel ) ;
5365: LD_EXP 45
5369: PPUSH
5370: LD_EXP 44
5374: PPUSH
5375: CALL_OW 119
// for i in jmm_units do
5379: LD_ADDR_VAR 0 2
5383: PUSH
5384: LD_EXP 4
5388: PUSH
5389: FOR_IN
5390: IFFALSE 5408
// ComTurnUnit ( i , Cornel ) ;
5392: LD_VAR 0 2
5396: PPUSH
5397: LD_EXP 44
5401: PPUSH
5402: CALL_OW 119
5406: GO 5389
5408: POP
5409: POP
// units := cornel_units union Cornel ;
5410: LD_ADDR_VAR 0 3
5414: PUSH
5415: LD_EXP 6
5419: PUSH
5420: LD_EXP 44
5424: UNION
5425: ST_TO_ADDR
// repeat wait ( 1 ) ;
5426: LD_INT 1
5428: PPUSH
5429: CALL_OW 67
// for i in units do
5433: LD_ADDR_VAR 0 2
5437: PUSH
5438: LD_VAR 0 3
5442: PUSH
5443: FOR_IN
5444: IFFALSE 5477
// ComMoveXY ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
5446: LD_VAR 0 2
5450: PPUSH
5451: LD_EXP 37
5455: PPUSH
5456: CALL_OW 250
5460: PPUSH
5461: LD_EXP 37
5465: PPUSH
5466: CALL_OW 251
5470: PPUSH
5471: CALL_OW 111
5475: GO 5443
5477: POP
5478: POP
// until UnitFilter ( units , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 10 ] ) = units ;
5479: LD_VAR 0 3
5483: PPUSH
5484: LD_INT 92
5486: PUSH
5487: LD_EXP 37
5491: PPUSH
5492: CALL_OW 250
5496: PUSH
5497: LD_EXP 37
5501: PPUSH
5502: CALL_OW 251
5506: PUSH
5507: LD_INT 10
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: PPUSH
5516: CALL_OW 72
5520: PUSH
5521: LD_VAR 0 3
5525: EQUAL
5526: IFFALSE 5426
// for i in units do
5528: LD_ADDR_VAR 0 2
5532: PUSH
5533: LD_VAR 0 3
5537: PUSH
5538: FOR_IN
5539: IFFALSE 5557
// ComTurnUnit ( i , JMM ) ;
5541: LD_VAR 0 2
5545: PPUSH
5546: LD_EXP 37
5550: PPUSH
5551: CALL_OW 119
5555: GO 5538
5557: POP
5558: POP
// ComTurnUnit ( Cornel , JMM ) ;
5559: LD_EXP 44
5563: PPUSH
5564: LD_EXP 37
5568: PPUSH
5569: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
5573: LD_EXP 37
5577: PPUSH
5578: LD_STRING D1-JMM-1
5580: PPUSH
5581: CALL_OW 88
// Say ( Cornel , D1-Corn-1 ) ;
5585: LD_EXP 44
5589: PPUSH
5590: LD_STRING D1-Corn-1
5592: PPUSH
5593: CALL_OW 88
// ComMoveUnit ( JMM , Cornel ) ;
5597: LD_EXP 37
5601: PPUSH
5602: LD_EXP 44
5606: PPUSH
5607: CALL_OW 112
// ComMoveUnit ( Cornel , JMM ) ;
5611: LD_EXP 44
5615: PPUSH
5616: LD_EXP 37
5620: PPUSH
5621: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
5625: LD_INT 35
5627: PPUSH
5628: CALL_OW 67
// until GetDistUnits ( JMM , Cornel ) < 6 ;
5632: LD_EXP 37
5636: PPUSH
5637: LD_EXP 44
5641: PPUSH
5642: CALL_OW 296
5646: PUSH
5647: LD_INT 6
5649: LESS
5650: IFFALSE 5625
// ChangeSideFog ( 4 , 1 ) ;
5652: LD_INT 4
5654: PPUSH
5655: LD_INT 1
5657: PPUSH
5658: CALL_OW 343
// ComTurnUnit ( JMM , Cornel ) ;
5662: LD_EXP 37
5666: PPUSH
5667: LD_EXP 44
5671: PPUSH
5672: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5676: LD_EXP 44
5680: PPUSH
5681: LD_EXP 37
5685: PPUSH
5686: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
5690: LD_EXP 37
5694: PPUSH
5695: LD_STRING D1-JMM-2
5697: PPUSH
5698: CALL_OW 88
// Say ( JMM , D1-JMM-2a ) ;
5702: LD_EXP 37
5706: PPUSH
5707: LD_STRING D1-JMM-2a
5709: PPUSH
5710: CALL_OW 88
// Say ( Cornel , D1-Corn-2 ) ;
5714: LD_EXP 44
5718: PPUSH
5719: LD_STRING D1-Corn-2
5721: PPUSH
5722: CALL_OW 88
// if bierezov_exist or debug then
5726: LD_EXP 7
5730: PUSH
5731: LD_EXP 1
5735: OR
5736: IFFALSE 5977
// begin ComTurnUnit ( Cornel , Bierezov ) ;
5738: LD_EXP 44
5742: PPUSH
5743: LD_EXP 45
5747: PPUSH
5748: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
5752: LD_INT 10
5754: PPUSH
5755: CALL_OW 67
// Say ( Cornel , D1a-Corn-1 ) ;
5759: LD_EXP 44
5763: PPUSH
5764: LD_STRING D1a-Corn-1
5766: PPUSH
5767: CALL_OW 88
// ComTurnUnit ( JMM , Bierezov ) ;
5771: LD_EXP 37
5775: PPUSH
5776: LD_EXP 45
5780: PPUSH
5781: CALL_OW 119
// ComTurnUnit ( Bierezov , JMM ) ;
5785: LD_EXP 45
5789: PPUSH
5790: LD_EXP 37
5794: PPUSH
5795: CALL_OW 119
// Say ( JMM , D1a-JMM-1 ) ;
5799: LD_EXP 37
5803: PPUSH
5804: LD_STRING D1a-JMM-1
5806: PPUSH
5807: CALL_OW 88
// ComTurnUnit ( JMM , Cornel ) ;
5811: LD_EXP 37
5815: PPUSH
5816: LD_EXP 44
5820: PPUSH
5821: CALL_OW 119
// ComTurnUnit ( Cornel , JMM ) ;
5825: LD_EXP 44
5829: PPUSH
5830: LD_EXP 37
5834: PPUSH
5835: CALL_OW 119
// Say ( Cornel , D1a-Corn-2 ) ;
5839: LD_EXP 44
5843: PPUSH
5844: LD_STRING D1a-Corn-2
5846: PPUSH
5847: CALL_OW 88
// Say ( JMM , D1a-JMM-2 ) ;
5851: LD_EXP 37
5855: PPUSH
5856: LD_STRING D1a-JMM-2
5858: PPUSH
5859: CALL_OW 88
// Say ( Cornel , D1a-Corn-3 ) ;
5863: LD_EXP 44
5867: PPUSH
5868: LD_STRING D1a-Corn-3
5870: PPUSH
5871: CALL_OW 88
// Say ( JMM , D1a-JMM-3 ) ;
5875: LD_EXP 37
5879: PPUSH
5880: LD_STRING D1a-JMM-3
5882: PPUSH
5883: CALL_OW 88
// Say ( Cornel , D1a-Corn-4 ) ;
5887: LD_EXP 44
5891: PPUSH
5892: LD_STRING D1a-Corn-4
5894: PPUSH
5895: CALL_OW 88
// Say ( JMM , D1a-JMM-4 ) ;
5899: LD_EXP 37
5903: PPUSH
5904: LD_STRING D1a-JMM-4
5906: PPUSH
5907: CALL_OW 88
// Say ( Cornel , D1a-Corn-5 ) ;
5911: LD_EXP 44
5915: PPUSH
5916: LD_STRING D1a-Corn-5
5918: PPUSH
5919: CALL_OW 88
// ComMoveXY ( Bierezov , GetX ( Cornel ) , GetY ( Cornel ) - 2 ) ;
5923: LD_EXP 45
5927: PPUSH
5928: LD_EXP 44
5932: PPUSH
5933: CALL_OW 250
5937: PPUSH
5938: LD_EXP 44
5942: PPUSH
5943: CALL_OW 251
5947: PUSH
5948: LD_INT 2
5950: MINUS
5951: PPUSH
5952: CALL_OW 111
// AddComTurnUnit ( Bierezov , Cornel ) ;
5956: LD_EXP 45
5960: PPUSH
5961: LD_EXP 44
5965: PPUSH
5966: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
5970: LD_INT 10
5972: PPUSH
5973: CALL_OW 67
// end ; Say ( JMM , D1b-JMM-1 ) ;
5977: LD_EXP 37
5981: PPUSH
5982: LD_STRING D1b-JMM-1
5984: PPUSH
5985: CALL_OW 88
// Say ( Cornel , D1b-Corn-1 ) ;
5989: LD_EXP 44
5993: PPUSH
5994: LD_STRING D1b-Corn-1
5996: PPUSH
5997: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6001: LD_EXP 37
6005: PPUSH
6006: LD_STRING D1b-JMM-2
6008: PPUSH
6009: CALL_OW 88
// Say ( Cornel , D1b-Corn-2 ) ;
6013: LD_EXP 44
6017: PPUSH
6018: LD_STRING D1b-Corn-2
6020: PPUSH
6021: CALL_OW 88
// Say ( JMM , D1b-JMM-3 ) ;
6025: LD_EXP 37
6029: PPUSH
6030: LD_STRING D1b-JMM-3
6032: PPUSH
6033: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6037: LD_INT 10
6039: PPUSH
6040: CALL_OW 67
// SayRadio ( Powell , D1b-Pow-3 ) ;
6044: LD_EXP 46
6048: PPUSH
6049: LD_STRING D1b-Pow-3
6051: PPUSH
6052: CALL_OW 94
// Say ( JMM , D1b-JMM-4 ) ;
6056: LD_EXP 37
6060: PPUSH
6061: LD_STRING D1b-JMM-4
6063: PPUSH
6064: CALL_OW 88
// Say ( Cornel , D1b-Corn-4 ) ;
6068: LD_EXP 44
6072: PPUSH
6073: LD_STRING D1b-Corn-4
6075: PPUSH
6076: CALL_OW 88
// if Khatam then
6080: LD_EXP 41
6084: IFFALSE 6100
// Say ( Khatam , D1b-Khat-4 ) else
6086: LD_EXP 41
6090: PPUSH
6091: LD_STRING D1b-Khat-4
6093: PPUSH
6094: CALL_OW 88
6098: GO 6136
// SayX ( UnitFilter ( cornel_units , [ f_sex , sex_male ] ) diff [ Cornel ] , D1b-Sol1-4 ) ;
6100: LD_EXP 6
6104: PPUSH
6105: LD_INT 26
6107: PUSH
6108: LD_INT 1
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PPUSH
6115: CALL_OW 72
6119: PUSH
6120: LD_EXP 44
6124: PUSH
6125: EMPTY
6126: LIST
6127: DIFF
6128: PPUSH
6129: LD_STRING D1b-Sol1-4
6131: PPUSH
6132: CALL 585 0 2
// if Cyrus then
6136: LD_EXP 39
6140: IFFALSE 6154
// Say ( Cyrus , D1b-Cyrus-4 ) ;
6142: LD_EXP 39
6146: PPUSH
6147: LD_STRING D1b-Cyrus-4
6149: PPUSH
6150: CALL_OW 88
// if Lisa then
6154: LD_EXP 40
6158: IFFALSE 6216
// begin Say ( Lisa , D1b-Lisa-4 ) ;
6160: LD_EXP 40
6164: PPUSH
6165: LD_STRING D1b-Lisa-4
6167: PPUSH
6168: CALL_OW 88
// if Cyrus then
6172: LD_EXP 39
6176: IFFALSE 6216
// begin if not IsInUnit ( Cyrus ) then
6178: LD_EXP 39
6182: PPUSH
6183: CALL_OW 310
6187: NOT
6188: IFFALSE 6204
// ComTurnUnit ( Cyrus , Lisa ) ;
6190: LD_EXP 39
6194: PPUSH
6195: LD_EXP 40
6199: PPUSH
6200: CALL_OW 119
// Say ( Cyrus , D1b-Cyrus-5 ) ;
6204: LD_EXP 39
6208: PPUSH
6209: LD_STRING D1b-Cyrus-5
6211: PPUSH
6212: CALL_OW 88
// end ; end ; SelectGroup ;
6216: CALL 2657 0 0
// Say ( JMM , D1d-JMM-1 ) ;
6220: LD_EXP 37
6224: PPUSH
6225: LD_STRING D1d-JMM-1
6227: PPUSH
6228: CALL_OW 88
// Say ( Cornel , D1d-Corn-1 ) ;
6232: LD_EXP 44
6236: PPUSH
6237: LD_STRING D1d-Corn-1
6239: PPUSH
6240: CALL_OW 88
// for i in jmm_units ^ cornel_units ^ JMM do
6244: LD_ADDR_VAR 0 2
6248: PUSH
6249: LD_EXP 4
6253: PUSH
6254: LD_EXP 6
6258: ADD
6259: PUSH
6260: LD_EXP 37
6264: ADD
6265: PUSH
6266: FOR_IN
6267: IFFALSE 6280
// ComHold ( i ) ;
6269: LD_VAR 0 2
6273: PPUSH
6274: CALL_OW 140
6278: GO 6266
6280: POP
6281: POP
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
6282: LD_ADDR_VAR 0 4
6286: PUSH
6287: LD_INT 22
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 21
6299: PUSH
6300: LD_INT 2
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 69
6315: ST_TO_ADDR
// if vehicles then
6316: LD_VAR 0 4
6320: IFFALSE 6658
// begin if UnitFilter ( cornel_units , [ f_driving ] ) then
6322: LD_EXP 6
6326: PPUSH
6327: LD_INT 55
6329: PUSH
6330: EMPTY
6331: LIST
6332: PPUSH
6333: CALL_OW 72
6337: IFFALSE 6376
// for i in UnitFilter ( cornel_units , [ f_driving ] ) do
6339: LD_ADDR_VAR 0 2
6343: PUSH
6344: LD_EXP 6
6348: PPUSH
6349: LD_INT 55
6351: PUSH
6352: EMPTY
6353: LIST
6354: PPUSH
6355: CALL_OW 72
6359: PUSH
6360: FOR_IN
6361: IFFALSE 6374
// ComExitVehicle ( i ) ;
6363: LD_VAR 0 2
6367: PPUSH
6368: CALL_OW 121
6372: GO 6360
6374: POP
6375: POP
// cargos := UnitFilter ( vehicles , [ f_weapon , ru_cargo_bay ] ) ;
6376: LD_ADDR_VAR 0 5
6380: PUSH
6381: LD_VAR 0 4
6385: PPUSH
6386: LD_INT 34
6388: PUSH
6389: LD_INT 51
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 72
6400: ST_TO_ADDR
// if cargos then
6401: LD_VAR 0 5
6405: IFFALSE 6588
// begin vehicles := cargos ;
6407: LD_ADDR_VAR 0 4
6411: PUSH
6412: LD_VAR 0 5
6416: ST_TO_ADDR
// resources := LoadVariable ( 02_resources_4 , 0 ) ;
6417: LD_ADDR_VAR 0 6
6421: PUSH
6422: LD_STRING 02_resources_4
6424: PPUSH
6425: LD_INT 0
6427: PPUSH
6428: CALL_OW 30
6432: ST_TO_ADDR
// if debug and not resources then
6433: LD_EXP 1
6437: PUSH
6438: LD_VAR 0 6
6442: NOT
6443: AND
6444: IFFALSE 6454
// resources := 160 ;
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: LD_INT 160
6453: ST_TO_ADDR
// if resources mod 10 then
6454: LD_VAR 0 6
6458: PUSH
6459: LD_INT 10
6461: MOD
6462: IFFALSE 6484
// resources := resources - resources mod 10 ;
6464: LD_ADDR_VAR 0 6
6468: PUSH
6469: LD_VAR 0 6
6473: PUSH
6474: LD_VAR 0 6
6478: PUSH
6479: LD_INT 10
6481: MOD
6482: MINUS
6483: ST_TO_ADDR
// if resources then
6484: LD_VAR 0 6
6488: IFFALSE 6588
// for i in cargos do
6490: LD_ADDR_VAR 0 2
6494: PUSH
6495: LD_VAR 0 5
6499: PUSH
6500: FOR_IN
6501: IFFALSE 6586
// begin if resources < 100 then
6503: LD_VAR 0 6
6507: PUSH
6508: LD_INT 100
6510: LESS
6511: IFFALSE 6533
// begin cargo := resources ;
6513: LD_ADDR_VAR 0 7
6517: PUSH
6518: LD_VAR 0 6
6522: ST_TO_ADDR
// resources := 0 ;
6523: LD_ADDR_VAR 0 6
6527: PUSH
6528: LD_INT 0
6530: ST_TO_ADDR
// end else
6531: GO 6555
// begin cargo := 100 ;
6533: LD_ADDR_VAR 0 7
6537: PUSH
6538: LD_INT 100
6540: ST_TO_ADDR
// resources := resources - 100 ;
6541: LD_ADDR_VAR 0 6
6545: PUSH
6546: LD_VAR 0 6
6550: PUSH
6551: LD_INT 100
6553: MINUS
6554: ST_TO_ADDR
// end ; SetCargo ( i , mat_cans , cargo ) ;
6555: LD_VAR 0 2
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: LD_VAR 0 7
6567: PPUSH
6568: CALL_OW 290
// if resources = 0 then
6572: LD_VAR 0 6
6576: PUSH
6577: LD_INT 0
6579: EQUAL
6580: IFFALSE 6584
// break ;
6582: GO 6586
// end ;
6584: GO 6500
6586: POP
6587: POP
// end ; ComExitVehicle ( IsDrivenBy ( vehicles [ 1 ] ) ) ;
6588: LD_VAR 0 4
6592: PUSH
6593: LD_INT 1
6595: ARRAY
6596: PPUSH
6597: CALL_OW 311
6601: PPUSH
6602: CALL_OW 121
// SetSide ( vehicles [ 1 ] , 4 ) ;
6606: LD_VAR 0 4
6610: PUSH
6611: LD_INT 1
6613: ARRAY
6614: PPUSH
6615: LD_INT 4
6617: PPUSH
6618: CALL_OW 235
// ComEnterUnit ( Cornel , vehicles [ 1 ] ) ;
6622: LD_EXP 44
6626: PPUSH
6627: LD_VAR 0 4
6631: PUSH
6632: LD_INT 1
6634: ARRAY
6635: PPUSH
6636: CALL_OW 120
// repeat wait ( 0 0$01 ) ;
6640: LD_INT 35
6642: PPUSH
6643: CALL_OW 67
// until IsInUnit ( Cornel ) ;
6647: LD_EXP 44
6651: PPUSH
6652: CALL_OW 310
6656: IFFALSE 6640
// end ; InGameOff ;
6658: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6662: LD_STRING M1
6664: PPUSH
6665: CALL_OW 337
// SaveForQuickRestart ;
6669: CALL_OW 22
// cornel_active := true ;
6673: LD_ADDR_EXP 8
6677: PUSH
6678: LD_INT 1
6680: ST_TO_ADDR
// end ;
6681: LD_VAR 0 1
6685: RET
// every 0 0$01 trigger GetDistUnits ( JMM , Lynch ) < 10 do var i , points , sol , buns , tmp ;
6686: LD_EXP 37
6690: PPUSH
6691: LD_EXP 47
6695: PPUSH
6696: CALL_OW 296
6700: PUSH
6701: LD_INT 10
6703: LESS
6704: IFFALSE 8087
6706: GO 6708
6708: DISABLE
6709: LD_INT 0
6711: PPUSH
6712: PPUSH
6713: PPUSH
6714: PPUSH
6715: PPUSH
// begin points := [ [ 89 , 34 ] , [ 138 , 63 ] , [ 196 , 84 ] , [ 135 , 52 ] , [ 103 , 39 ] , [ 58 , 30 ] , [ 38 , 51 ] ] ;
6716: LD_ADDR_VAR 0 2
6720: PUSH
6721: LD_INT 89
6723: PUSH
6724: LD_INT 34
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: LD_INT 138
6733: PUSH
6734: LD_INT 63
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 196
6743: PUSH
6744: LD_INT 84
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 135
6753: PUSH
6754: LD_INT 52
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 103
6763: PUSH
6764: LD_INT 39
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 58
6773: PUSH
6774: LD_INT 30
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 38
6783: PUSH
6784: LD_INT 51
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: ST_TO_ADDR
// Video ( true ) ;
6800: LD_INT 1
6802: PPUSH
6803: CALL 72621 0 1
// if jmm_units then
6807: LD_EXP 4
6811: IFFALSE 6887
// for i in jmm_units do
6813: LD_ADDR_VAR 0 1
6817: PUSH
6818: LD_EXP 4
6822: PUSH
6823: FOR_IN
6824: IFFALSE 6885
// begin if GetDistUnits ( i , JMM ) < 10 and not IsInUnit ( i ) then
6826: LD_VAR 0 1
6830: PPUSH
6831: LD_EXP 37
6835: PPUSH
6836: CALL_OW 296
6840: PUSH
6841: LD_INT 10
6843: LESS
6844: PUSH
6845: LD_VAR 0 1
6849: PPUSH
6850: CALL_OW 310
6854: NOT
6855: AND
6856: IFFALSE 6874
// ComTurnUnit ( i , JMM ) else
6858: LD_VAR 0 1
6862: PPUSH
6863: LD_EXP 37
6867: PPUSH
6868: CALL_OW 119
6872: GO 6883
// ComHold ( i ) ;
6874: LD_VAR 0 1
6878: PPUSH
6879: CALL_OW 140
// end ;
6883: GO 6823
6885: POP
6886: POP
// if IsInUnit ( JMM ) then
6887: LD_EXP 37
6891: PPUSH
6892: CALL_OW 310
6896: IFFALSE 6921
// begin ComExitVehicle ( JMM ) ;
6898: LD_EXP 37
6902: PPUSH
6903: CALL_OW 121
// AddComMoveUnit ( JMM , Lynch ) ;
6907: LD_EXP 37
6911: PPUSH
6912: LD_EXP 47
6916: PPUSH
6917: CALL_OW 172
// end ; Wait ( 10 ) ;
6921: LD_INT 10
6923: PPUSH
6924: CALL_OW 67
// AddComMoveUnit ( JMM , Lynch ) ;
6928: LD_EXP 37
6932: PPUSH
6933: LD_EXP 47
6937: PPUSH
6938: CALL_OW 172
// repeat wait ( 0 0$01 ) ;
6942: LD_INT 35
6944: PPUSH
6945: CALL_OW 67
// until GetDistUnits ( JMM , Lynch ) < 6 ;
6949: LD_EXP 37
6953: PPUSH
6954: LD_EXP 47
6958: PPUSH
6959: CALL_OW 296
6963: PUSH
6964: LD_INT 6
6966: LESS
6967: IFFALSE 6942
// ComTurnUnit ( JMM , Lynch ) ;
6969: LD_EXP 37
6973: PPUSH
6974: LD_EXP 47
6978: PPUSH
6979: CALL_OW 119
// for i in [ Lynch , Walker , Turner , Jillian ] do
6983: LD_ADDR_VAR 0 1
6987: PUSH
6988: LD_EXP 47
6992: PUSH
6993: LD_EXP 48
6997: PUSH
6998: LD_EXP 49
7002: PUSH
7003: LD_EXP 50
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: PUSH
7014: FOR_IN
7015: IFFALSE 7033
// ComTurnUnit ( i , JMM ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_EXP 37
7026: PPUSH
7027: CALL_OW 119
7031: GO 7014
7033: POP
7034: POP
// Wait ( 0 0$0.3 ) ;
7035: LD_INT 10
7037: PPUSH
7038: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
7042: LD_EXP 37
7046: PPUSH
7047: LD_STRING D2-JMM-1
7049: PPUSH
7050: CALL_OW 88
// Say ( Lynch , D2-Sol1-1 ) ;
7054: LD_EXP 47
7058: PPUSH
7059: LD_STRING D2-Sol1-1
7061: PPUSH
7062: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
7066: LD_EXP 37
7070: PPUSH
7071: LD_STRING D2-JMM-2
7073: PPUSH
7074: CALL_OW 88
// Say ( Lynch , D2-Sol1-2 ) ;
7078: LD_EXP 47
7082: PPUSH
7083: LD_STRING D2-Sol1-2
7085: PPUSH
7086: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7090: LD_EXP 37
7094: PPUSH
7095: LD_STRING D2-JMM-3
7097: PPUSH
7098: CALL_OW 88
// Say ( Lynch , D2-Sol1-3 ) ;
7102: LD_EXP 47
7106: PPUSH
7107: LD_STRING D2-Sol1-3
7109: PPUSH
7110: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7114: LD_ADDR_VAR 0 1
7118: PUSH
7119: LD_INT 22
7121: PUSH
7122: LD_INT 8
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PPUSH
7129: CALL_OW 69
7133: PUSH
7134: FOR_IN
7135: IFFALSE 7151
// SetSide ( i , 1 ) ;
7137: LD_VAR 0 1
7141: PPUSH
7142: LD_INT 1
7144: PPUSH
7145: CALL_OW 235
7149: GO 7134
7151: POP
7152: POP
// Say ( JMM , D2-JMM-4 ) ;
7153: LD_EXP 37
7157: PPUSH
7158: LD_STRING D2-JMM-4
7160: PPUSH
7161: CALL_OW 88
// RevealFogArea ( 1 , roadArea ) ;
7165: LD_INT 1
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 332
// for i = 1 to points do
7175: LD_ADDR_VAR 0 1
7179: PUSH
7180: DOUBLE
7181: LD_INT 1
7183: DEC
7184: ST_TO_ADDR
7185: LD_VAR 0 2
7189: PUSH
7190: FOR_TO
7191: IFFALSE 7366
// begin CenterOnXY ( points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
7193: LD_VAR 0 2
7197: PUSH
7198: LD_VAR 0 1
7202: ARRAY
7203: PUSH
7204: LD_INT 1
7206: ARRAY
7207: PPUSH
7208: LD_VAR 0 2
7212: PUSH
7213: LD_VAR 0 1
7217: ARRAY
7218: PUSH
7219: LD_INT 2
7221: ARRAY
7222: PPUSH
7223: CALL_OW 84
// if i = 1 then
7227: LD_VAR 0 1
7231: PUSH
7232: LD_INT 1
7234: EQUAL
7235: IFFALSE 7249
// Say ( Lynch , D2-Sol1-4 ) ;
7237: LD_EXP 47
7241: PPUSH
7242: LD_STRING D2-Sol1-4
7244: PPUSH
7245: CALL_OW 88
// if i = 2 then
7249: LD_VAR 0 1
7253: PUSH
7254: LD_INT 2
7256: EQUAL
7257: IFFALSE 7271
// Say ( JMM , D2-JMM-5 ) ;
7259: LD_EXP 37
7263: PPUSH
7264: LD_STRING D2-JMM-5
7266: PPUSH
7267: CALL_OW 88
// if i = 4 then
7271: LD_VAR 0 1
7275: PUSH
7276: LD_INT 4
7278: EQUAL
7279: IFFALSE 7303
// begin RevealFogArea ( 1 , troopsArea ) ;
7281: LD_INT 1
7283: PPUSH
7284: LD_INT 6
7286: PPUSH
7287: CALL_OW 332
// Say ( Lynch , D2-Sol1-5 ) ;
7291: LD_EXP 47
7295: PPUSH
7296: LD_STRING D2-Sol1-5
7298: PPUSH
7299: CALL_OW 88
// end ; if i = 5 then
7303: LD_VAR 0 1
7307: PUSH
7308: LD_INT 5
7310: EQUAL
7311: IFFALSE 7325
// Say ( JMM , D2-JMM-6 ) ;
7313: LD_EXP 37
7317: PPUSH
7318: LD_STRING D2-JMM-6
7320: PPUSH
7321: CALL_OW 88
// if i = 7 then
7325: LD_VAR 0 1
7329: PUSH
7330: LD_INT 7
7332: EQUAL
7333: IFFALSE 7357
// begin RevealFogArea ( 1 , forestArea ) ;
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 7
7340: PPUSH
7341: CALL_OW 332
// Say ( Lynch , D2-Sol1-6 ) ;
7345: LD_EXP 47
7349: PPUSH
7350: LD_STRING D2-Sol1-6
7352: PPUSH
7353: CALL_OW 88
// end ; Wait ( 0 0$1.3 ) ;
7357: LD_INT 46
7359: PPUSH
7360: CALL_OW 67
// end ;
7364: GO 7190
7366: POP
7367: POP
// CenterNowOnUnits ( JMM ) ;
7368: LD_EXP 37
7372: PPUSH
7373: CALL_OW 87
// Say ( JMM , D2-JMM-7 ) ;
7377: LD_EXP 37
7381: PPUSH
7382: LD_STRING D2-JMM-7
7384: PPUSH
7385: CALL_OW 88
// Say ( Lynch , D2-Sol1-7 ) ;
7389: LD_EXP 47
7393: PPUSH
7394: LD_STRING D2-Sol1-7
7396: PPUSH
7397: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
7401: LD_EXP 37
7405: PPUSH
7406: LD_STRING D2-JMM-8
7408: PPUSH
7409: CALL_OW 88
// buns := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
7413: LD_ADDR_VAR 0 4
7417: PUSH
7418: LD_INT 22
7420: PUSH
7421: LD_INT 1
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 30
7430: PUSH
7431: LD_INT 31
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PPUSH
7442: CALL_OW 69
7446: ST_TO_ADDR
// ComEnterUnit ( Lynch , buns [ 1 ] ) ;
7447: LD_EXP 47
7451: PPUSH
7452: LD_VAR 0 4
7456: PUSH
7457: LD_INT 1
7459: ARRAY
7460: PPUSH
7461: CALL_OW 120
// if HexInfo ( 65 , 101 ) then
7465: LD_INT 65
7467: PPUSH
7468: LD_INT 101
7470: PPUSH
7471: CALL_OW 428
7475: IFFALSE 7498
// ComMoveXY ( HexInfo ( 65 , 101 ) , 75 , 100 ) ;
7477: LD_INT 65
7479: PPUSH
7480: LD_INT 101
7482: PPUSH
7483: CALL_OW 428
7487: PPUSH
7488: LD_INT 75
7490: PPUSH
7491: LD_INT 100
7493: PPUSH
7494: CALL_OW 111
// if HexInfo ( 66 , 103 ) then
7498: LD_INT 66
7500: PPUSH
7501: LD_INT 103
7503: PPUSH
7504: CALL_OW 428
7508: IFFALSE 7531
// ComMoveXY ( HexInfo ( 66 , 103 ) , 75 , 100 ) ;
7510: LD_INT 66
7512: PPUSH
7513: LD_INT 103
7515: PPUSH
7516: CALL_OW 428
7520: PPUSH
7521: LD_INT 75
7523: PPUSH
7524: LD_INT 100
7526: PPUSH
7527: CALL_OW 111
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_dist , JMM , 7 ] ] ) ;
7531: LD_ADDR_VAR 0 5
7535: PUSH
7536: LD_INT 22
7538: PUSH
7539: LD_INT 1
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 21
7548: PUSH
7549: LD_INT 2
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 91
7558: PUSH
7559: LD_EXP 37
7563: PUSH
7564: LD_INT 7
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: ST_TO_ADDR
// if tmp then
7582: LD_VAR 0 5
7586: IFFALSE 7603
// ComMoveXY ( tmp , 75 , 100 ) ;
7588: LD_VAR 0 5
7592: PPUSH
7593: LD_INT 75
7595: PPUSH
7596: LD_INT 100
7598: PPUSH
7599: CALL_OW 111
// sol := NearestUnitToUnit ( UnitFilter ( jmm_units , [ f_class , 1 ] ) , JMM ) ;
7603: LD_ADDR_VAR 0 3
7607: PUSH
7608: LD_EXP 4
7612: PPUSH
7613: LD_INT 25
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 72
7627: PPUSH
7628: LD_EXP 37
7632: PPUSH
7633: CALL_OW 74
7637: ST_TO_ADDR
// if sol then
7638: LD_VAR 0 3
7642: IFFALSE 7702
// if GetDistUnits ( JMM , sol ) < 10 then
7644: LD_EXP 37
7648: PPUSH
7649: LD_VAR 0 3
7653: PPUSH
7654: CALL_OW 296
7658: PUSH
7659: LD_INT 10
7661: LESS
7662: IFFALSE 7702
// begin if IsInUnit ( sol ) then
7664: LD_VAR 0 3
7668: PPUSH
7669: CALL_OW 310
7673: IFFALSE 7684
// ComExitVehicle ( sol ) ;
7675: LD_VAR 0 3
7679: PPUSH
7680: CALL_OW 121
// AddComEnterUnit ( sol , buns [ 2 ] ) ;
7684: LD_VAR 0 3
7688: PPUSH
7689: LD_VAR 0 4
7693: PUSH
7694: LD_INT 2
7696: ARRAY
7697: PPUSH
7698: CALL_OW 180
// end ; Wait ( 0 0$0.3 ) ;
7702: LD_INT 10
7704: PPUSH
7705: CALL_OW 67
// ComMoveXY ( JMM , 65 , 101 ) ;
7709: LD_EXP 37
7713: PPUSH
7714: LD_INT 65
7716: PPUSH
7717: LD_INT 101
7719: PPUSH
7720: CALL_OW 111
// AddComTurnXY ( JMM , 63 , 100 ) ;
7724: LD_EXP 37
7728: PPUSH
7729: LD_INT 63
7731: PPUSH
7732: LD_INT 100
7734: PPUSH
7735: CALL_OW 178
// tmp := 0 0$0 ;
7739: LD_ADDR_VAR 0 5
7743: PUSH
7744: LD_INT 0
7746: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7747: LD_INT 35
7749: PPUSH
7750: CALL_OW 67
// tmp := tmp + 0 0$1 ;
7754: LD_ADDR_VAR 0 5
7758: PUSH
7759: LD_VAR 0 5
7763: PUSH
7764: LD_INT 35
7766: PLUS
7767: ST_TO_ADDR
// until IsAt ( JMM , 65 , 101 ) or tmp > 0 0$5 ;
7768: LD_EXP 37
7772: PPUSH
7773: LD_INT 65
7775: PPUSH
7776: LD_INT 101
7778: PPUSH
7779: CALL_OW 307
7783: PUSH
7784: LD_VAR 0 5
7788: PUSH
7789: LD_INT 175
7791: GREATER
7792: OR
7793: IFFALSE 7747
// Say ( JMM , D2a-JMM-1 ) ;
7795: LD_EXP 37
7799: PPUSH
7800: LD_STRING D2a-JMM-1
7802: PPUSH
7803: CALL_OW 88
// ComMoveXY ( Walker , 66 , 103 ) ;
7807: LD_EXP 48
7811: PPUSH
7812: LD_INT 66
7814: PPUSH
7815: LD_INT 103
7817: PPUSH
7818: CALL_OW 111
// tmp := 0 0$0 ;
7822: LD_ADDR_VAR 0 5
7826: PUSH
7827: LD_INT 0
7829: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7830: LD_INT 35
7832: PPUSH
7833: CALL_OW 67
// until IsAt ( Walker , 66 , 103 ) or tmp > 0 0$5 ;
7837: LD_EXP 48
7841: PPUSH
7842: LD_INT 66
7844: PPUSH
7845: LD_INT 103
7847: PPUSH
7848: CALL_OW 307
7852: PUSH
7853: LD_VAR 0 5
7857: PUSH
7858: LD_INT 175
7860: GREATER
7861: OR
7862: IFFALSE 7830
// ComTurnUnit ( Walker , JMM ) ;
7864: LD_EXP 48
7868: PPUSH
7869: LD_EXP 37
7873: PPUSH
7874: CALL_OW 119
// Say ( Walker , D2a-Sci1-1 ) ;
7878: LD_EXP 48
7882: PPUSH
7883: LD_STRING D2a-Sci1-1
7885: PPUSH
7886: CALL_OW 88
// ComTurnUnit ( JMM , Walker ) ;
7890: LD_EXP 37
7894: PPUSH
7895: LD_EXP 48
7899: PPUSH
7900: CALL_OW 119
// Say ( JMM , D2a-JMM-2 ) ;
7904: LD_EXP 37
7908: PPUSH
7909: LD_STRING D2a-JMM-2
7911: PPUSH
7912: CALL_OW 88
// Say ( Walker , D2a-Sci1-2 ) ;
7916: LD_EXP 48
7920: PPUSH
7921: LD_STRING D2a-Sci1-2
7923: PPUSH
7924: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
7928: LD_EXP 37
7932: PPUSH
7933: LD_STRING D2a-JMM-3
7935: PPUSH
7936: CALL_OW 88
// Say ( Walker , D2a-Sci1-3 ) ;
7940: LD_EXP 48
7944: PPUSH
7945: LD_STRING D2a-Sci1-3
7947: PPUSH
7948: CALL_OW 88
// jmm_units := jmm_units ^ [ Lynch , Walker , Turner , Jillian ] ;
7952: LD_ADDR_EXP 4
7956: PUSH
7957: LD_EXP 4
7961: PUSH
7962: LD_EXP 47
7966: PUSH
7967: LD_EXP 48
7971: PUSH
7972: LD_EXP 49
7976: PUSH
7977: LD_EXP 50
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: ADD
7988: ST_TO_ADDR
// for i in jmm_units do
7989: LD_ADDR_VAR 0 1
7993: PUSH
7994: LD_EXP 4
7998: PUSH
7999: FOR_IN
8000: IFFALSE 8025
// if not IsInUnit ( i ) then
8002: LD_VAR 0 1
8006: PPUSH
8007: CALL_OW 310
8011: NOT
8012: IFFALSE 8023
// ComFree ( i ) ;
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 139
8023: GO 7999
8025: POP
8026: POP
// Video ( false ) ;
8027: LD_INT 0
8029: PPUSH
8030: CALL 72621 0 1
// ChangeMissionObjectives ( MSolar1 ) ;
8034: LD_STRING MSolar1
8036: PPUSH
8037: CALL_OW 337
// jmm_on_west := true ;
8041: LD_ADDR_EXP 5
8045: PUSH
8046: LD_INT 1
8048: ST_TO_ADDR
// Wait ( 0 0$30 ) ;
8049: LD_INT 1050
8051: PPUSH
8052: CALL_OW 67
// frank_can_return := true ;
8056: LD_ADDR_EXP 12
8060: PUSH
8061: LD_INT 1
8063: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 4 4$00 ) ) ;
8064: LD_INT 6300
8066: PPUSH
8067: LD_INT 8400
8069: PPUSH
8070: CALL_OW 12
8074: PPUSH
8075: CALL_OW 67
// send_spec_patrol := true ;
8079: LD_ADDR_EXP 30
8083: PUSH
8084: LD_INT 1
8086: ST_TO_ADDR
// end ;
8087: PPOPN 5
8089: END
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) and not jmm_on_west do var i , filter ;
8090: LD_INT 22
8092: PUSH
8093: LD_INT 1
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: LD_INT 34
8102: PUSH
8103: LD_INT 51
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: LD_INT 92
8112: PUSH
8113: LD_INT 63
8115: PUSH
8116: LD_INT 100
8118: PUSH
8119: LD_INT 5
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: PPUSH
8136: CALL_OW 69
8140: PUSH
8141: LD_EXP 5
8145: NOT
8146: AND
8147: IFFALSE 8260
8149: GO 8151
8151: DISABLE
8152: LD_INT 0
8154: PPUSH
8155: PPUSH
// begin enable ;
8156: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] , [ f_distxy , 63 , 100 , 5 ] ] ] ) ;
8157: LD_ADDR_VAR 0 2
8161: PUSH
8162: LD_INT 22
8164: PUSH
8165: LD_INT 1
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: PUSH
8172: LD_INT 34
8174: PUSH
8175: LD_INT 51
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: LD_INT 92
8184: PUSH
8185: LD_INT 63
8187: PUSH
8188: LD_INT 100
8190: PUSH
8191: LD_INT 5
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: LIST
8204: PUSH
8205: EMPTY
8206: LIST
8207: PPUSH
8208: CALL_OW 69
8212: ST_TO_ADDR
// if not filter then
8213: LD_VAR 0 2
8217: NOT
8218: IFFALSE 8222
// exit ;
8220: GO 8260
// for i in filter do
8222: LD_ADDR_VAR 0 1
8226: PUSH
8227: LD_VAR 0 2
8231: PUSH
8232: FOR_IN
8233: IFFALSE 8258
// begin SetFuel ( i , 0 ) ;
8235: LD_VAR 0 1
8239: PPUSH
8240: LD_INT 0
8242: PPUSH
8243: CALL_OW 240
// ComStop ( i ) ;
8247: LD_VAR 0 1
8251: PPUSH
8252: CALL_OW 141
// end ;
8256: GO 8232
8258: POP
8259: POP
// end ;
8260: PPOPN 2
8262: END
// every 0 0$01 trigger send_spec_patrol do var dead1 , dead2 , inarea1 , inarea2 , sol , tmp ; var i ;
8263: LD_EXP 30
8267: IFFALSE 9364
8269: GO 8271
8271: DISABLE
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
// begin if not ru_spec_patrol then
8281: LD_EXP 54
8285: NOT
8286: IFFALSE 8290
// exit ;
8288: GO 9364
// dead1 := false ;
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_INT 0
8297: ST_TO_ADDR
// dead2 := false ;
8298: LD_ADDR_VAR 0 2
8302: PUSH
8303: LD_INT 0
8305: ST_TO_ADDR
// inarea1 := false ;
8306: LD_ADDR_VAR 0 3
8310: PUSH
8311: LD_INT 0
8313: ST_TO_ADDR
// inarea2 := false ;
8314: LD_ADDR_VAR 0 4
8318: PUSH
8319: LD_INT 0
8321: ST_TO_ADDR
// tmp := [ ] ;
8322: LD_ADDR_VAR 0 6
8326: PUSH
8327: EMPTY
8328: ST_TO_ADDR
// ComAgressiveMove ( ru_spec_patrol , 75 , 101 ) ;
8329: LD_EXP 54
8333: PPUSH
8334: LD_INT 75
8336: PPUSH
8337: LD_INT 101
8339: PPUSH
8340: CALL_OW 114
// repeat wait ( 0 0$01 ) ;
8344: LD_INT 35
8346: PPUSH
8347: CALL_OW 67
// until See ( 1 , ru_spec_patrol [ 1 ] ) ;
8351: LD_INT 1
8353: PPUSH
8354: LD_EXP 54
8358: PUSH
8359: LD_INT 1
8361: ARRAY
8362: PPUSH
8363: CALL_OW 292
8367: IFFALSE 8344
// ComStop ( ru_spec_patrol ) ;
8369: LD_EXP 54
8373: PPUSH
8374: CALL_OW 141
// Wait ( 0 0$02 ) ;
8378: LD_INT 70
8380: PPUSH
8381: CALL_OW 67
// DialogueOn ;
8385: CALL_OW 6
// Say ( ru_spec_patrol [ 1 ] , D8-Rus1-1 ) ;
8389: LD_EXP 54
8393: PUSH
8394: LD_INT 1
8396: ARRAY
8397: PPUSH
8398: LD_STRING D8-Rus1-1
8400: PPUSH
8401: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
8405: LD_EXP 37
8409: PPUSH
8410: LD_STRING D8-JMM-1
8412: PPUSH
8413: CALL_OW 88
// DialogueOff ;
8417: CALL_OW 7
// ComMoveToArea ( ru_spec_patrol , retreatArea ) ;
8421: LD_EXP 54
8425: PPUSH
8426: LD_INT 13
8428: PPUSH
8429: CALL_OW 113
// repeat wait ( 0 0$01 ) ;
8433: LD_INT 35
8435: PPUSH
8436: CALL_OW 67
// if not dead1 and IsDead ( ru_spec_patrol [ 1 ] ) then
8440: LD_VAR 0 1
8444: NOT
8445: PUSH
8446: LD_EXP 54
8450: PUSH
8451: LD_INT 1
8453: ARRAY
8454: PPUSH
8455: CALL_OW 301
8459: AND
8460: IFFALSE 8470
// dead1 := true ;
8462: LD_ADDR_VAR 0 1
8466: PUSH
8467: LD_INT 1
8469: ST_TO_ADDR
// if not dead2 and IsDead ( ru_spec_patrol [ 2 ] ) then
8470: LD_VAR 0 2
8474: NOT
8475: PUSH
8476: LD_EXP 54
8480: PUSH
8481: LD_INT 2
8483: ARRAY
8484: PPUSH
8485: CALL_OW 301
8489: AND
8490: IFFALSE 8500
// dead2 := true ;
8492: LD_ADDR_VAR 0 2
8496: PUSH
8497: LD_INT 1
8499: ST_TO_ADDR
// if not inarea1 and IsInArea ( ru_spec_patrol [ 1 ] , baseBorder ) then
8500: LD_VAR 0 3
8504: NOT
8505: PUSH
8506: LD_EXP 54
8510: PUSH
8511: LD_INT 1
8513: ARRAY
8514: PPUSH
8515: LD_INT 14
8517: PPUSH
8518: CALL_OW 308
8522: AND
8523: IFFALSE 8533
// inarea1 := true ;
8525: LD_ADDR_VAR 0 3
8529: PUSH
8530: LD_INT 1
8532: ST_TO_ADDR
// if not inarea2 and IsInArea ( ru_spec_patrol [ 2 ] , baseBorder ) then
8533: LD_VAR 0 4
8537: NOT
8538: PUSH
8539: LD_EXP 54
8543: PUSH
8544: LD_INT 2
8546: ARRAY
8547: PPUSH
8548: LD_INT 14
8550: PPUSH
8551: CALL_OW 308
8555: AND
8556: IFFALSE 8566
// inarea2 := true ;
8558: LD_ADDR_VAR 0 4
8562: PUSH
8563: LD_INT 1
8565: ST_TO_ADDR
// until ( dead1 and dead2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) or ( inarea1 and inarea2 ) ;
8566: LD_VAR 0 1
8570: PUSH
8571: LD_VAR 0 2
8575: AND
8576: PUSH
8577: LD_VAR 0 1
8581: PUSH
8582: LD_VAR 0 4
8586: AND
8587: OR
8588: PUSH
8589: LD_VAR 0 2
8593: PUSH
8594: LD_VAR 0 3
8598: AND
8599: OR
8600: PUSH
8601: LD_VAR 0 3
8605: PUSH
8606: LD_VAR 0 4
8610: AND
8611: OR
8612: IFFALSE 8433
// if ( inarea1 and inarea2 ) or ( dead1 and inarea2 ) or ( dead2 and inarea1 ) then
8614: LD_VAR 0 3
8618: PUSH
8619: LD_VAR 0 4
8623: AND
8624: PUSH
8625: LD_VAR 0 1
8629: PUSH
8630: LD_VAR 0 4
8634: AND
8635: OR
8636: PUSH
8637: LD_VAR 0 2
8641: PUSH
8642: LD_VAR 0 3
8646: AND
8647: OR
8648: IFFALSE 9344
// begin prepare_siege := true ;
8650: LD_ADDR_EXP 31
8654: PUSH
8655: LD_INT 1
8657: ST_TO_ADDR
// DialogueOn ;
8658: CALL_OW 6
// if ( inarea1 and inarea2 ) then
8662: LD_VAR 0 3
8666: PUSH
8667: LD_VAR 0 4
8671: AND
8672: IFFALSE 8688
// Say ( JMM , D8b-JMM-1a ) else
8674: LD_EXP 37
8678: PPUSH
8679: LD_STRING D8b-JMM-1a
8681: PPUSH
8682: CALL_OW 88
8686: GO 8700
// Say ( JMM , D8b-JMM-1 ) ;
8688: LD_EXP 37
8692: PPUSH
8693: LD_STRING D8b-JMM-1
8695: PPUSH
8696: CALL_OW 88
// SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol1-1 ) ;
8700: LD_EXP 4
8704: PPUSH
8705: LD_INT 26
8707: PUSH
8708: LD_INT 1
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: PPUSH
8715: CALL_OW 72
8719: PUSH
8720: LD_EXP 38
8724: PUSH
8725: LD_EXP 39
8729: PUSH
8730: LD_EXP 48
8734: PUSH
8735: LD_EXP 51
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: DIFF
8746: PPUSH
8747: LD_STRING D8b-Sol1-1
8749: PPUSH
8750: CALL 585 0 2
// if Cyrus and Cyrus in jmm_units then
8754: LD_EXP 39
8758: PUSH
8759: LD_EXP 39
8763: PUSH
8764: LD_EXP 4
8768: IN
8769: AND
8770: IFFALSE 8786
// Say ( Cyrus , D8b-Cyrus-1 ) else
8772: LD_EXP 39
8776: PPUSH
8777: LD_STRING D8b-Cyrus-1
8779: PPUSH
8780: CALL_OW 88
8784: GO 8798
// Say ( JMM , D8b-JMM-1a ) ;
8786: LD_EXP 37
8790: PPUSH
8791: LD_STRING D8b-JMM-1a
8793: PPUSH
8794: CALL_OW 88
// if Lisa and Lisa in jmm_units then
8798: LD_EXP 40
8802: PUSH
8803: LD_EXP 40
8807: PUSH
8808: LD_EXP 4
8812: IN
8813: AND
8814: IFFALSE 8828
// Say ( Lisa , D8b-Lisa-2 ) ;
8816: LD_EXP 40
8820: PPUSH
8821: LD_STRING D8b-Lisa-2
8823: PPUSH
8824: CALL_OW 88
// if Bobby and Bobby in jmm_units then
8828: LD_EXP 38
8832: PUSH
8833: LD_EXP 38
8837: PUSH
8838: LD_EXP 4
8842: IN
8843: AND
8844: IFFALSE 8860
// Say ( Bobby , D8b-Bobby-1 ) else
8846: LD_EXP 38
8850: PPUSH
8851: LD_STRING D8b-Bobby-1
8853: PPUSH
8854: CALL_OW 88
8858: GO 8920
// sol := SayX ( UnitFilter ( jmm_units , [ f_sex , sex_male ] ) diff [ Bobby , Cyrus , Walker , Frank ] , D8b-Sol2-1 ) ;
8860: LD_ADDR_VAR 0 5
8864: PUSH
8865: LD_EXP 4
8869: PPUSH
8870: LD_INT 26
8872: PUSH
8873: LD_INT 1
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PPUSH
8880: CALL_OW 72
8884: PUSH
8885: LD_EXP 38
8889: PUSH
8890: LD_EXP 39
8894: PUSH
8895: LD_EXP 48
8899: PUSH
8900: LD_EXP 51
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: DIFF
8911: PPUSH
8912: LD_STRING D8b-Sol2-1
8914: PPUSH
8915: CALL 585 0 2
8919: ST_TO_ADDR
// DialogueOff ;
8920: CALL_OW 7
// if Cyrus and Cyrus in jmm_units then
8924: LD_EXP 39
8928: PUSH
8929: LD_EXP 39
8933: PUSH
8934: LD_EXP 4
8938: IN
8939: AND
8940: IFFALSE 8965
// tmp := Insert ( tmp , 1 , Cyrus ) ;
8942: LD_ADDR_VAR 0 6
8946: PUSH
8947: LD_VAR 0 6
8951: PPUSH
8952: LD_INT 1
8954: PPUSH
8955: LD_EXP 39
8959: PPUSH
8960: CALL_OW 2
8964: ST_TO_ADDR
// if Bobby and Bobby in jmm_units then
8965: LD_EXP 38
8969: PUSH
8970: LD_EXP 38
8974: PUSH
8975: LD_EXP 4
8979: IN
8980: AND
8981: IFFALSE 9006
// tmp := Insert ( tmp , 1 , Bobby ) ;
8983: LD_ADDR_VAR 0 6
8987: PUSH
8988: LD_VAR 0 6
8992: PPUSH
8993: LD_INT 1
8995: PPUSH
8996: LD_EXP 38
9000: PPUSH
9001: CALL_OW 2
9005: ST_TO_ADDR
// if sol then
9006: LD_VAR 0 5
9010: IFFALSE 9035
// tmp := Insert ( tmp , 1 , sol ) ;
9012: LD_ADDR_VAR 0 6
9016: PUSH
9017: LD_VAR 0 6
9021: PPUSH
9022: LD_INT 1
9024: PPUSH
9025: LD_VAR 0 5
9029: PPUSH
9030: CALL_OW 2
9034: ST_TO_ADDR
// if tmp then
9035: LD_VAR 0 6
9039: IFFALSE 9303
// begin SetSide ( tmp , 8 ) ;
9041: LD_VAR 0 6
9045: PPUSH
9046: LD_INT 8
9048: PPUSH
9049: CALL_OW 235
// for i in tmp do
9053: LD_ADDR_VAR 0 7
9057: PUSH
9058: LD_VAR 0 6
9062: PUSH
9063: FOR_IN
9064: IFFALSE 9155
// begin if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_building then
9066: LD_VAR 0 7
9070: PPUSH
9071: CALL_OW 310
9075: PUSH
9076: LD_VAR 0 7
9080: PPUSH
9081: CALL_OW 310
9085: PPUSH
9086: CALL_OW 266
9090: PUSH
9091: LD_INT 3
9093: EQUAL
9094: AND
9095: IFFALSE 9106
// ComExitBuilding ( i ) ;
9097: LD_VAR 0 7
9101: PPUSH
9102: CALL_OW 122
// if IsInUnit ( i ) and GetBType ( IsInUnit ( i ) ) = unit_vehicle then
9106: LD_VAR 0 7
9110: PPUSH
9111: CALL_OW 310
9115: PUSH
9116: LD_VAR 0 7
9120: PPUSH
9121: CALL_OW 310
9125: PPUSH
9126: CALL_OW 266
9130: PUSH
9131: LD_INT 2
9133: EQUAL
9134: AND
9135: IFFALSE 9146
// ComExitVehicle ( i ) ;
9137: LD_VAR 0 7
9141: PPUSH
9142: CALL_OW 121
// wait ( 0 0$1 ) ;
9146: LD_INT 35
9148: PPUSH
9149: CALL_OW 67
// end ;
9153: GO 9063
9155: POP
9156: POP
// ComFree ( tmp ) ;
9157: LD_VAR 0 6
9161: PPUSH
9162: CALL_OW 139
// AddComMoveToArea ( tmp , cyrusEscape ) ;
9166: LD_VAR 0 6
9170: PPUSH
9171: LD_INT 15
9173: PPUSH
9174: CALL_OW 173
// AddComHold ( tmp ) ;
9178: LD_VAR 0 6
9182: PPUSH
9183: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
9187: LD_INT 35
9189: PPUSH
9190: CALL_OW 67
// if not HasTask ( tmp [ 1 ] ) then
9194: LD_VAR 0 6
9198: PUSH
9199: LD_INT 1
9201: ARRAY
9202: PPUSH
9203: CALL_OW 314
9207: NOT
9208: IFFALSE 9222
// ComMoveToArea ( tmp , cyrusEscape ) ;
9210: LD_VAR 0 6
9214: PPUSH
9215: LD_INT 15
9217: PPUSH
9218: CALL_OW 113
// if IsInArea ( tmp [ 1 ] , cyrusEscape ) then
9222: LD_VAR 0 6
9226: PUSH
9227: LD_INT 1
9229: ARRAY
9230: PPUSH
9231: LD_INT 15
9233: PPUSH
9234: CALL_OW 308
9238: IFFALSE 9293
// begin RemoveUnit ( tmp [ 1 ] ) ;
9240: LD_VAR 0 6
9244: PUSH
9245: LD_INT 1
9247: ARRAY
9248: PPUSH
9249: CALL_OW 64
// jmm_units := jmm_units diff tmp [ 1 ] ;
9253: LD_ADDR_EXP 4
9257: PUSH
9258: LD_EXP 4
9262: PUSH
9263: LD_VAR 0 6
9267: PUSH
9268: LD_INT 1
9270: ARRAY
9271: DIFF
9272: ST_TO_ADDR
// tmp := tmp diff tmp [ 1 ] ;
9273: LD_ADDR_VAR 0 6
9277: PUSH
9278: LD_VAR 0 6
9282: PUSH
9283: LD_VAR 0 6
9287: PUSH
9288: LD_INT 1
9290: ARRAY
9291: DIFF
9292: ST_TO_ADDR
// end ; until tmp = 0 ;
9293: LD_VAR 0 6
9297: PUSH
9298: LD_INT 0
9300: EQUAL
9301: IFFALSE 9187
// end ; wait ( 0 0$30 ) ;
9303: LD_INT 1050
9305: PPUSH
9306: CALL_OW 67
// if ru_spec_patrol then
9310: LD_EXP 54
9314: IFFALSE 9342
// for i in ru_spec_patrol do
9316: LD_ADDR_VAR 0 7
9320: PUSH
9321: LD_EXP 54
9325: PUSH
9326: FOR_IN
9327: IFFALSE 9340
// RemoveUnit ( i ) ;
9329: LD_VAR 0 7
9333: PPUSH
9334: CALL_OW 64
9338: GO 9326
9340: POP
9341: POP
// end else
9342: GO 9364
// begin prepare_siege := false ;
9344: LD_ADDR_EXP 31
9348: PUSH
9349: LD_INT 0
9351: ST_TO_ADDR
// Say ( JMM , D8a-JMM-1 ) ;
9352: LD_EXP 37
9356: PPUSH
9357: LD_STRING D8a-JMM-1
9359: PPUSH
9360: CALL_OW 88
// end ; end ;
9364: PPOPN 7
9366: END
// every 0 0$10 trigger frank_can_return do var i , p , points ;
9367: LD_EXP 12
9371: IFFALSE 10591
9373: GO 9375
9375: DISABLE
9376: LD_INT 0
9378: PPUSH
9379: PPUSH
9380: PPUSH
// begin uc_side := 8 ;
9381: LD_ADDR_OWVAR 20
9385: PUSH
9386: LD_INT 8
9388: ST_TO_ADDR
// points := [ [ 59 , 71 ] , [ 122 , 117 ] ] ;
9389: LD_ADDR_VAR 0 3
9393: PUSH
9394: LD_INT 59
9396: PUSH
9397: LD_INT 71
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 122
9406: PUSH
9407: LD_INT 117
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
9418: LD_ADDR_EXP 51
9422: PUSH
9423: LD_STRING Frank
9425: PPUSH
9426: LD_INT 0
9428: PPUSH
9429: LD_STRING 
9431: PPUSH
9432: CALL 35912 0 3
9436: ST_TO_ADDR
// i := rand ( 1 , 2 ) ;
9437: LD_ADDR_VAR 0 1
9441: PUSH
9442: LD_INT 1
9444: PPUSH
9445: LD_INT 2
9447: PPUSH
9448: CALL_OW 12
9452: ST_TO_ADDR
// PlaceUnitXY ( Frank , points [ i ] [ 1 ] , points [ i ] [ 2 ] , false ) ;
9453: LD_EXP 51
9457: PPUSH
9458: LD_VAR 0 3
9462: PUSH
9463: LD_VAR 0 1
9467: ARRAY
9468: PUSH
9469: LD_INT 1
9471: ARRAY
9472: PPUSH
9473: LD_VAR 0 3
9477: PUSH
9478: LD_VAR 0 1
9482: ARRAY
9483: PUSH
9484: LD_INT 2
9486: ARRAY
9487: PPUSH
9488: LD_INT 0
9490: PPUSH
9491: CALL_OW 48
// ComMoveUnit ( Frank , us_dep_west ) ;
9495: LD_EXP 51
9499: PPUSH
9500: LD_INT 1
9502: PPUSH
9503: CALL_OW 112
// repeat wait ( 0 0$01 ) ;
9507: LD_INT 35
9509: PPUSH
9510: CALL_OW 67
// until GetDistUnits ( Frank , JMM ) < 8 and GetLives ( Frank ) > 250 ;
9514: LD_EXP 51
9518: PPUSH
9519: LD_EXP 37
9523: PPUSH
9524: CALL_OW 296
9528: PUSH
9529: LD_INT 8
9531: LESS
9532: PUSH
9533: LD_EXP 51
9537: PPUSH
9538: CALL_OW 256
9542: PUSH
9543: LD_INT 250
9545: GREATER
9546: AND
9547: IFFALSE 9507
// Video ( true ) ;
9549: LD_INT 1
9551: PPUSH
9552: CALL 72621 0 1
// CenterOnUnits ( JMM ) ;
9556: LD_EXP 37
9560: PPUSH
9561: CALL_OW 85
// if IsInUnit ( JMM ) then
9565: LD_EXP 37
9569: PPUSH
9570: CALL_OW 310
9574: IFFALSE 9585
// ComFree ( JMM ) ;
9576: LD_EXP 37
9580: PPUSH
9581: CALL_OW 139
// ComMoveUnit ( JMM , Frank ) ;
9585: LD_EXP 37
9589: PPUSH
9590: LD_EXP 51
9594: PPUSH
9595: CALL_OW 112
// ComMoveUnit ( Frank , JMM ) ;
9599: LD_EXP 51
9603: PPUSH
9604: LD_EXP 37
9608: PPUSH
9609: CALL_OW 112
// Say ( JMM , D6-JMM-1 ) ;
9613: LD_EXP 37
9617: PPUSH
9618: LD_STRING D6-JMM-1
9620: PPUSH
9621: CALL_OW 88
// p := 0 ;
9625: LD_ADDR_VAR 0 2
9629: PUSH
9630: LD_INT 0
9632: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9633: LD_INT 35
9635: PPUSH
9636: CALL_OW 67
// p := p + 1 ;
9640: LD_ADDR_VAR 0 2
9644: PUSH
9645: LD_VAR 0 2
9649: PUSH
9650: LD_INT 1
9652: PLUS
9653: ST_TO_ADDR
// until GetDistUnits ( JMM , Frank ) < 8 or p > 7 ;
9654: LD_EXP 37
9658: PPUSH
9659: LD_EXP 51
9663: PPUSH
9664: CALL_OW 296
9668: PUSH
9669: LD_INT 8
9671: LESS
9672: PUSH
9673: LD_VAR 0 2
9677: PUSH
9678: LD_INT 7
9680: GREATER
9681: OR
9682: IFFALSE 9633
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 then
9684: LD_EXP 40
9688: PUSH
9689: LD_EXP 40
9693: PPUSH
9694: LD_EXP 51
9698: PPUSH
9699: CALL_OW 296
9703: PUSH
9704: LD_INT 20
9706: LESS
9707: AND
9708: IFFALSE 9733
// begin ComFree ( Lisa ) ;
9710: LD_EXP 40
9714: PPUSH
9715: CALL_OW 139
// AddComMoveUnit ( Lisa , Frank ) ;
9719: LD_EXP 40
9723: PPUSH
9724: LD_EXP 51
9728: PPUSH
9729: CALL_OW 172
// end ; if Lynch then
9733: LD_EXP 47
9737: IFFALSE 9762
// begin ComFree ( Lynch ) ;
9739: LD_EXP 47
9743: PPUSH
9744: CALL_OW 139
// AddComMoveUnit ( Lynch , Frank ) ;
9748: LD_EXP 47
9752: PPUSH
9753: LD_EXP 51
9757: PPUSH
9758: CALL_OW 172
// end ; ComTurnUnit ( JMM , Frank ) ;
9762: LD_EXP 37
9766: PPUSH
9767: LD_EXP 51
9771: PPUSH
9772: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
9776: LD_EXP 51
9780: PPUSH
9781: LD_EXP 37
9785: PPUSH
9786: CALL_OW 119
// Say ( Frank , D6-Frank-1 ) ;
9790: LD_EXP 51
9794: PPUSH
9795: LD_STRING D6-Frank-1
9797: PPUSH
9798: CALL_OW 88
// PlaceSeeing ( 69 , 20 , 1 , - 20 ) ;
9802: LD_INT 69
9804: PPUSH
9805: LD_INT 20
9807: PPUSH
9808: LD_INT 1
9810: PPUSH
9811: LD_INT 20
9813: NEG
9814: PPUSH
9815: CALL_OW 330
// RemoveSeeing ( 69 , 20 , 1 ) ;
9819: LD_INT 69
9821: PPUSH
9822: LD_INT 20
9824: PPUSH
9825: LD_INT 1
9827: PPUSH
9828: CALL_OW 331
// PlaceSeeing ( 190 , 31 , 1 , - 20 ) ;
9832: LD_INT 190
9834: PPUSH
9835: LD_INT 31
9837: PPUSH
9838: LD_INT 1
9840: PPUSH
9841: LD_INT 20
9843: NEG
9844: PPUSH
9845: CALL_OW 330
// RemoveSeeing ( 190 , 31 , 1 ) ;
9849: LD_INT 190
9851: PPUSH
9852: LD_INT 31
9854: PPUSH
9855: LD_INT 1
9857: PPUSH
9858: CALL_OW 331
// CenterOnXY ( 69 , 20 ) ;
9862: LD_INT 69
9864: PPUSH
9865: LD_INT 20
9867: PPUSH
9868: CALL_OW 84
// Wait ( 0 0$02 ) ;
9872: LD_INT 70
9874: PPUSH
9875: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
9879: LD_EXP 37
9883: PPUSH
9884: CALL_OW 87
// if Lisa and GetDistUnits ( Lisa , Frank ) < 20 and IsOk ( Lisa ) then
9888: LD_EXP 40
9892: PUSH
9893: LD_EXP 40
9897: PPUSH
9898: LD_EXP 51
9902: PPUSH
9903: CALL_OW 296
9907: PUSH
9908: LD_INT 20
9910: LESS
9911: AND
9912: PUSH
9913: LD_EXP 40
9917: PPUSH
9918: CALL_OW 302
9922: AND
9923: IFFALSE 10045
// begin ComFree ( Lisa ) ;
9925: LD_EXP 40
9929: PPUSH
9930: CALL_OW 139
// p := 0 ;
9934: LD_ADDR_VAR 0 2
9938: PUSH
9939: LD_INT 0
9941: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9942: LD_INT 35
9944: PPUSH
9945: CALL_OW 67
// p := p + 1 ;
9949: LD_ADDR_VAR 0 2
9953: PUSH
9954: LD_VAR 0 2
9958: PUSH
9959: LD_INT 1
9961: PLUS
9962: ST_TO_ADDR
// until GetDistUnits ( Lisa , Frank ) < 7 or p > 7 ;
9963: LD_EXP 40
9967: PPUSH
9968: LD_EXP 51
9972: PPUSH
9973: CALL_OW 296
9977: PUSH
9978: LD_INT 7
9980: LESS
9981: PUSH
9982: LD_VAR 0 2
9986: PUSH
9987: LD_INT 7
9989: GREATER
9990: OR
9991: IFFALSE 9942
// Say ( Lisa , D6-Lisa-1 ) ;
9993: LD_EXP 40
9997: PPUSH
9998: LD_STRING D6-Lisa-1
10000: PPUSH
10001: CALL_OW 88
// ComTurnUnit ( Lisa , Frank ) ;
10005: LD_EXP 40
10009: PPUSH
10010: LD_EXP 51
10014: PPUSH
10015: CALL_OW 119
// ComTurnUnit ( Frank , Lisa ) ;
10019: LD_EXP 51
10023: PPUSH
10024: LD_EXP 40
10028: PPUSH
10029: CALL_OW 119
// Say ( Frank , D6-Frank-2 ) ;
10033: LD_EXP 51
10037: PPUSH
10038: LD_STRING D6-Frank-2
10040: PPUSH
10041: CALL_OW 88
// end ; if Lynch and GetDistUnits ( Lynch , Frank ) < 20 and IsOk ( Lynch ) then
10045: LD_EXP 47
10049: PUSH
10050: LD_EXP 47
10054: PPUSH
10055: LD_EXP 51
10059: PPUSH
10060: CALL_OW 296
10064: PUSH
10065: LD_INT 20
10067: LESS
10068: AND
10069: PUSH
10070: LD_EXP 47
10074: PPUSH
10075: CALL_OW 302
10079: AND
10080: IFFALSE 10261
// begin ComTurnUnit ( Lynch , JMM ) ;
10082: LD_EXP 47
10086: PPUSH
10087: LD_EXP 37
10091: PPUSH
10092: CALL_OW 119
// ComTurnUnit ( Frank , JMM ) ;
10096: LD_EXP 51
10100: PPUSH
10101: LD_EXP 37
10105: PPUSH
10106: CALL_OW 119
// Say ( Lynch , D6-Sol1-2 ) ;
10110: LD_EXP 47
10114: PPUSH
10115: LD_STRING D6-Sol1-2
10117: PPUSH
10118: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
10122: LD_EXP 37
10126: PPUSH
10127: LD_STRING D6-JMM-2
10129: PPUSH
10130: CALL_OW 88
// Say ( Frank , D6-Frank-3 ) ;
10134: LD_EXP 51
10138: PPUSH
10139: LD_STRING D6-Frank-3
10141: PPUSH
10142: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
10146: LD_EXP 37
10150: PPUSH
10151: LD_STRING D6-JMM-3
10153: PPUSH
10154: CALL_OW 88
// Say ( Frank , D6-Frank-4 ) ;
10158: LD_EXP 51
10162: PPUSH
10163: LD_STRING D6-Frank-4
10165: PPUSH
10166: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10170: LD_EXP 51
10174: PPUSH
10175: LD_STRING D6-Frank-4a
10177: PPUSH
10178: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10182: LD_EXP 37
10186: PPUSH
10187: LD_STRING D6-JMM-4
10189: PPUSH
10190: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10194: LD_EXP 51
10198: PPUSH
10199: LD_STRING D6-Frank-5
10201: PPUSH
10202: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10206: LD_EXP 40
10210: PUSH
10211: LD_EXP 40
10215: PPUSH
10216: CALL_OW 302
10220: AND
10221: IFFALSE 10235
// Say ( Lisa , D6-Lisa-5 ) ;
10223: LD_EXP 40
10227: PPUSH
10228: LD_STRING D6-Lisa-5
10230: PPUSH
10231: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10235: LD_EXP 51
10239: PPUSH
10240: LD_STRING D6-Frank-6
10242: PPUSH
10243: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10247: LD_EXP 37
10251: PPUSH
10252: LD_STRING D6-JMM-6
10254: PPUSH
10255: CALL_OW 88
// end else
10259: GO 10376
// begin ComTurnUnit ( Frank , JMM ) ;
10261: LD_EXP 51
10265: PPUSH
10266: LD_EXP 37
10270: PPUSH
10271: CALL_OW 119
// Say ( Frank , D6-Frank-4 ) ;
10275: LD_EXP 51
10279: PPUSH
10280: LD_STRING D6-Frank-4
10282: PPUSH
10283: CALL_OW 88
// Say ( Frank , D6-Frank-4a ) ;
10287: LD_EXP 51
10291: PPUSH
10292: LD_STRING D6-Frank-4a
10294: PPUSH
10295: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
10299: LD_EXP 37
10303: PPUSH
10304: LD_STRING D6-JMM-4
10306: PPUSH
10307: CALL_OW 88
// Say ( Frank , D6-Frank-5 ) ;
10311: LD_EXP 51
10315: PPUSH
10316: LD_STRING D6-Frank-5
10318: PPUSH
10319: CALL_OW 88
// if Lisa and IsOk ( Lisa ) then
10323: LD_EXP 40
10327: PUSH
10328: LD_EXP 40
10332: PPUSH
10333: CALL_OW 302
10337: AND
10338: IFFALSE 10352
// Say ( Lisa , D6-Lisa-5 ) ;
10340: LD_EXP 40
10344: PPUSH
10345: LD_STRING D6-Lisa-5
10347: PPUSH
10348: CALL_OW 88
// Say ( Frank , D6-Frank-6 ) ;
10352: LD_EXP 51
10356: PPUSH
10357: LD_STRING D6-Frank-6
10359: PPUSH
10360: CALL_OW 88
// Say ( JMM , D6-JMM-6 ) ;
10364: LD_EXP 37
10368: PPUSH
10369: LD_STRING D6-JMM-6
10371: PPUSH
10372: CALL_OW 88
// end ; case Query ( Q1 ) of 1 :
10376: LD_STRING Q1
10378: PPUSH
10379: CALL_OW 97
10383: PUSH
10384: LD_INT 1
10386: DOUBLE
10387: EQUAL
10388: IFTRUE 10392
10390: GO 10403
10392: POP
// frank_send_to_scout := true ; 2 :
10393: LD_ADDR_EXP 15
10397: PUSH
10398: LD_INT 1
10400: ST_TO_ADDR
10401: GO 10423
10403: LD_INT 2
10405: DOUBLE
10406: EQUAL
10407: IFTRUE 10411
10409: GO 10422
10411: POP
// frank_send_to_scout := false ; end ;
10412: LD_ADDR_EXP 15
10416: PUSH
10417: LD_INT 0
10419: ST_TO_ADDR
10420: GO 10423
10422: POP
// Video ( false ) ;
10423: LD_INT 0
10425: PPUSH
10426: CALL 72621 0 1
// ComFree ( [ JMM , Lisa , Lynch ] ) ;
10430: LD_EXP 37
10434: PUSH
10435: LD_EXP 40
10439: PUSH
10440: LD_EXP 47
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: LIST
10449: PPUSH
10450: CALL_OW 139
// if frank_send_to_scout then
10454: LD_EXP 15
10458: IFFALSE 10512
// begin repeat ComMoveToArea ( Frank , cyrusEscape ) ;
10460: LD_EXP 51
10464: PPUSH
10465: LD_INT 15
10467: PPUSH
10468: CALL_OW 113
// wait ( 0 0$01 ) ;
10472: LD_INT 35
10474: PPUSH
10475: CALL_OW 67
// until not See ( 1 , Frank ) ;
10479: LD_INT 1
10481: PPUSH
10482: LD_EXP 51
10486: PPUSH
10487: CALL_OW 292
10491: NOT
10492: IFFALSE 10460
// wait ( 0 0$02 ) ;
10494: LD_INT 70
10496: PPUSH
10497: CALL_OW 67
// RemoveUnit ( Frank ) ;
10501: LD_EXP 51
10505: PPUSH
10506: CALL_OW 64
// end else
10510: GO 10524
// SetSide ( Frank , 1 ) ;
10512: LD_EXP 51
10516: PPUSH
10517: LD_INT 1
10519: PPUSH
10520: CALL_OW 235
// send_attack_on_cornel_base := true ;
10524: LD_ADDR_EXP 26
10528: PUSH
10529: LD_INT 1
10531: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10532: LD_INT 35
10534: PPUSH
10535: CALL_OW 67
// time_to_prepare := CountTime ( time_to_prepare , - ) ;
10539: LD_ADDR_EXP 29
10543: PUSH
10544: LD_EXP 29
10548: PPUSH
10549: LD_STRING -
10551: PPUSH
10552: CALL 1077 0 2
10556: ST_TO_ADDR
// if debug then
10557: LD_EXP 1
10561: IFFALSE 10573
// debug_strings := time_to_prepare ;
10563: LD_ADDR_OWVAR 48
10567: PUSH
10568: LD_EXP 29
10572: ST_TO_ADDR
// until time_to_prepare = 0 0$00 ;
10573: LD_EXP 29
10577: PUSH
10578: LD_INT 0
10580: EQUAL
10581: IFFALSE 10532
// cornel_prepared := true ;
10583: LD_ADDR_EXP 11
10587: PUSH
10588: LD_INT 1
10590: ST_TO_ADDR
// end ;
10591: PPOPN 3
10593: END
// every 0 0$01 trigger cornel_prepared do
10594: LD_EXP 11
10598: IFFALSE 10906
10600: GO 10602
10602: DISABLE
// begin SayRadio ( Cornel , D3-Corn-1 ) ;
10603: LD_EXP 44
10607: PPUSH
10608: LD_STRING D3-Corn-1
10610: PPUSH
10611: CALL_OW 94
// ChangeMissionObjectives ( MOutWait ) ;
10615: LD_STRING MOutWait
10617: PPUSH
10618: CALL_OW 337
// repeat wait ( 0 0$01 ) ;
10622: LD_INT 35
10624: PPUSH
10625: CALL_OW 67
// until cornel_counter = 0 ;
10629: LD_EXP 10
10633: PUSH
10634: LD_INT 0
10636: EQUAL
10637: IFFALSE 10622
// SayRadio ( Cornel , D3a-Corn-1 ) ;
10639: LD_EXP 44
10643: PPUSH
10644: LD_STRING D3a-Corn-1
10646: PPUSH
10647: CALL_OW 94
// if IsOk ( Cornel ) then
10651: LD_EXP 44
10655: PPUSH
10656: CALL_OW 302
10660: IFFALSE 10674
// Say ( JMM , D3a-JMM-1 ) ;
10662: LD_EXP 37
10666: PPUSH
10667: LD_STRING D3a-JMM-1
10669: PPUSH
10670: CALL_OW 88
// end_mission_allowed := true ;
10674: LD_ADDR_EXP 21
10678: PUSH
10679: LD_INT 1
10681: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
10682: LD_STRING M2
10684: PPUSH
10685: CALL_OW 337
// SetAreaMapShow ( endMArea , 1 ) ;
10689: LD_INT 9
10691: PPUSH
10692: LD_INT 1
10694: PPUSH
10695: CALL_OW 424
// Wait ( 0 0$05 ) ;
10699: LD_INT 175
10701: PPUSH
10702: CALL_OW 67
// SayRadio ( Cornel , D3a-Corn-2 ) ;
10706: LD_EXP 44
10710: PPUSH
10711: LD_STRING D3a-Corn-2
10713: PPUSH
10714: CALL_OW 94
// cornel_attack := true ;
10718: LD_ADDR_EXP 9
10722: PUSH
10723: LD_INT 1
10725: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
10726: LD_INT 105
10728: PPUSH
10729: CALL_OW 67
// AddMoreTanks ( ) ;
10733: CALL 4940 0 0
// if frank_send_to_scout then
10737: LD_EXP 15
10741: IFFALSE 10906
// begin InitHc ;
10743: CALL_OW 19
// InitUc ;
10747: CALL_OW 18
// uc_side := 8 ;
10751: LD_ADDR_OWVAR 20
10755: PUSH
10756: LD_INT 8
10758: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , false ,  ) ;
10759: LD_ADDR_EXP 51
10763: PUSH
10764: LD_STRING Frank
10766: PPUSH
10767: LD_INT 0
10769: PPUSH
10770: LD_STRING 
10772: PPUSH
10773: CALL 35912 0 3
10777: ST_TO_ADDR
// PlaceUnitXY ( Frank , 6 , 9 , false ) ;
10778: LD_EXP 51
10782: PPUSH
10783: LD_INT 6
10785: PPUSH
10786: LD_INT 9
10788: PPUSH
10789: LD_INT 0
10791: PPUSH
10792: CALL_OW 48
// ComCrawl ( Frank ) ;
10796: LD_EXP 51
10800: PPUSH
10801: CALL_OW 137
// repeat wait ( 10 ) ;
10805: LD_INT 10
10807: PPUSH
10808: CALL_OW 67
// until GetDistUnits ( JMM , Frank ) < 9 or FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
10812: LD_EXP 37
10816: PPUSH
10817: LD_EXP 51
10821: PPUSH
10822: CALL_OW 296
10826: PUSH
10827: LD_INT 9
10829: LESS
10830: PUSH
10831: LD_INT 9
10833: PPUSH
10834: LD_INT 22
10836: PUSH
10837: LD_INT 1
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PPUSH
10844: CALL_OW 70
10848: OR
10849: IFFALSE 10805
// if IsDead ( Frank ) then
10851: LD_EXP 51
10855: PPUSH
10856: CALL_OW 301
10860: IFFALSE 10864
// exit ;
10862: GO 10906
// CenterOnUnits ( Frank ) ;
10864: LD_EXP 51
10868: PPUSH
10869: CALL_OW 85
// SetSide ( Frank , 1 ) ;
10873: LD_EXP 51
10877: PPUSH
10878: LD_INT 1
10880: PPUSH
10881: CALL_OW 235
// Say ( Frank , D6a-Frank-1 ) ;
10885: LD_EXP 51
10889: PPUSH
10890: LD_STRING D6a-Frank-1
10892: PPUSH
10893: CALL_OW 88
// ComWalk ( Frank ) ;
10897: LD_EXP 51
10901: PPUSH
10902: CALL_OW 138
// end ; end ;
10906: END
// every 0 0$01 trigger solar_builded do
10907: LD_EXP 14
10911: IFFALSE 11015
10913: GO 10915
10915: DISABLE
// begin Wait ( 0 0$02 ) ;
10916: LD_INT 70
10918: PPUSH
10919: CALL_OW 67
// DialogueOn ;
10923: CALL_OW 6
// Say ( JMM , D2b-JMM-1 ) ;
10927: LD_EXP 37
10931: PPUSH
10932: LD_STRING D2b-JMM-1
10934: PPUSH
10935: CALL_OW 88
// if Walker and IsOk ( Walker ) then
10939: LD_EXP 48
10943: PUSH
10944: LD_EXP 48
10948: PPUSH
10949: CALL_OW 302
10953: AND
10954: IFFALSE 11004
// begin Say ( Walker , D2b-Sci1-1 ) ;
10956: LD_EXP 48
10960: PPUSH
10961: LD_STRING D2b-Sci1-1
10963: PPUSH
10964: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
10968: LD_EXP 37
10972: PPUSH
10973: LD_STRING D2b-JMM-2
10975: PPUSH
10976: CALL_OW 88
// Say ( Walker , D2b-Sci1-2 ) ;
10980: LD_EXP 48
10984: PPUSH
10985: LD_STRING D2b-Sci1-2
10987: PPUSH
10988: CALL_OW 88
// Say ( JMM , D2b-JMM-3 ) ;
10992: LD_EXP 37
10996: PPUSH
10997: LD_STRING D2b-JMM-3
10999: PPUSH
11000: CALL_OW 88
// end ; DialogueOff ;
11004: CALL_OW 7
// ChangeMissionObjectives ( MOutSol ) ;
11008: LD_STRING MOutSol
11010: PPUSH
11011: CALL_OW 337
// end ;
11015: END
// every 0 0$01 trigger solar_builded and IsOk ( JMM ) and InVeh ( JMM ) and not jmm_in_veh do var i ;
11016: LD_EXP 14
11020: PUSH
11021: LD_EXP 37
11025: PPUSH
11026: CALL_OW 302
11030: AND
11031: PUSH
11032: LD_EXP 37
11036: PPUSH
11037: CALL 911 0 1
11041: AND
11042: PUSH
11043: LD_EXP 16
11047: NOT
11048: AND
11049: IFFALSE 11120
11051: GO 11053
11053: DISABLE
11054: LD_INT 0
11056: PPUSH
// begin jmm_in_veh := true ;
11057: LD_ADDR_EXP 16
11061: PUSH
11062: LD_INT 1
11064: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11065: LD_ADDR_VAR 0 1
11069: PUSH
11070: LD_INT 0
11072: PPUSH
11073: LD_INT 1
11075: PPUSH
11076: CALL_OW 12
11080: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11081: LD_INT 70
11083: PPUSH
11084: CALL_OW 67
// if i then
11088: LD_VAR 0 1
11092: IFFALSE 11108
// Say ( JMM , D2c-JMM-1 ) else
11094: LD_EXP 37
11098: PPUSH
11099: LD_STRING D2c-JMM-1
11101: PPUSH
11102: CALL_OW 88
11106: GO 11120
// Say ( JMM , D2c-JMM-1a ) ;
11108: LD_EXP 37
11112: PPUSH
11113: LD_STRING D2c-JMM-1a
11115: PPUSH
11116: CALL_OW 88
// end ;
11120: PPOPN 1
11122: END
// every 0 0$01 trigger solar_builded and IsOk ( Bobby ) and InVeh ( Bobby ) and not bobby_in_veh do
11123: LD_EXP 14
11127: PUSH
11128: LD_EXP 38
11132: PPUSH
11133: CALL_OW 302
11137: AND
11138: PUSH
11139: LD_EXP 38
11143: PPUSH
11144: CALL 911 0 1
11148: AND
11149: PUSH
11150: LD_EXP 17
11154: NOT
11155: AND
11156: IFFALSE 11188
11158: GO 11160
11160: DISABLE
// begin bobby_in_veh := true ;
11161: LD_ADDR_EXP 17
11165: PUSH
11166: LD_INT 1
11168: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11169: LD_INT 70
11171: PPUSH
11172: CALL_OW 67
// Say ( Bobby , D2c-Bobby-1 ) end ;
11176: LD_EXP 38
11180: PPUSH
11181: LD_STRING D2c-Bobby-1
11183: PPUSH
11184: CALL_OW 88
11188: END
// every 0 0$01 trigger solar_builded and IsOk ( Lisa ) and InVeh ( Lisa ) and not lisa_in_veh do
11189: LD_EXP 14
11193: PUSH
11194: LD_EXP 40
11198: PPUSH
11199: CALL_OW 302
11203: AND
11204: PUSH
11205: LD_EXP 40
11209: PPUSH
11210: CALL 911 0 1
11214: AND
11215: PUSH
11216: LD_EXP 19
11220: NOT
11221: AND
11222: IFFALSE 11254
11224: GO 11226
11226: DISABLE
// begin lisa_in_veh := true ;
11227: LD_ADDR_EXP 19
11231: PUSH
11232: LD_INT 1
11234: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11235: LD_INT 70
11237: PPUSH
11238: CALL_OW 67
// Say ( Lisa , D2c-Lisa-1 ) end ;
11242: LD_EXP 40
11246: PPUSH
11247: LD_STRING D2c-Lisa-1
11249: PPUSH
11250: CALL_OW 88
11254: END
// every 0 0$01 trigger solar_builded and IsOk ( Cyrus ) and InVeh ( Cyrus ) and not cyrus_in_veh do var i ;
11255: LD_EXP 14
11259: PUSH
11260: LD_EXP 39
11264: PPUSH
11265: CALL_OW 302
11269: AND
11270: PUSH
11271: LD_EXP 39
11275: PPUSH
11276: CALL 911 0 1
11280: AND
11281: PUSH
11282: LD_EXP 18
11286: NOT
11287: AND
11288: IFFALSE 11359
11290: GO 11292
11292: DISABLE
11293: LD_INT 0
11295: PPUSH
// begin cyrus_in_veh := true ;
11296: LD_ADDR_EXP 18
11300: PUSH
11301: LD_INT 1
11303: ST_TO_ADDR
// i := rand ( 0 , 1 ) ;
11304: LD_ADDR_VAR 0 1
11308: PUSH
11309: LD_INT 0
11311: PPUSH
11312: LD_INT 1
11314: PPUSH
11315: CALL_OW 12
11319: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
11320: LD_INT 70
11322: PPUSH
11323: CALL_OW 67
// if i then
11327: LD_VAR 0 1
11331: IFFALSE 11347
// Say ( Cyrus , D2c-Cyrus-1 ) else
11333: LD_EXP 39
11337: PPUSH
11338: LD_STRING D2c-Cyrus-1
11340: PPUSH
11341: CALL_OW 88
11345: GO 11359
// Say ( Cyrus , D2c-Cyrus-1a ) ;
11347: LD_EXP 39
11351: PPUSH
11352: LD_STRING D2c-Cyrus-1a
11354: PPUSH
11355: CALL_OW 88
// end ;
11359: PPOPN 1
11361: END
// every 0 0$01 trigger IsInArea ( Cornel , cornelKappaArea ) do var i ;
11362: LD_EXP 44
11366: PPUSH
11367: LD_INT 16
11369: PPUSH
11370: CALL_OW 308
11374: IFFALSE 11655
11376: GO 11378
11378: DISABLE
11379: LD_INT 0
11381: PPUSH
// begin DoNotAttack ( 3 , Cornel ) ;
11382: LD_INT 3
11384: PPUSH
11385: LD_EXP 44
11389: PPUSH
11390: CALL_OW 471
// send_attack_on_cornel := true ;
11394: LD_ADDR_EXP 32
11398: PUSH
11399: LD_INT 1
11401: ST_TO_ADDR
// if ru_vehicles then
11402: LD_EXP 56
11406: IFFALSE 11440
// for i in ru_vehicles do
11408: LD_ADDR_VAR 0 1
11412: PUSH
11413: LD_EXP 56
11417: PUSH
11418: FOR_IN
11419: IFFALSE 11438
// ComAgressiveMove ( i , 215 , 69 ) ;
11421: LD_VAR 0 1
11425: PPUSH
11426: LD_INT 215
11428: PPUSH
11429: LD_INT 69
11431: PPUSH
11432: CALL_OW 114
11436: GO 11418
11438: POP
11439: POP
// if ru_patrol then
11440: LD_EXP 53
11444: IFFALSE 11478
// for i in ru_patrol do
11446: LD_ADDR_VAR 0 1
11450: PUSH
11451: LD_EXP 53
11455: PUSH
11456: FOR_IN
11457: IFFALSE 11476
// ComAgressiveMove ( i , 215 , 69 ) ;
11459: LD_VAR 0 1
11463: PPUSH
11464: LD_INT 215
11466: PPUSH
11467: LD_INT 69
11469: PPUSH
11470: CALL_OW 114
11474: GO 11456
11476: POP
11477: POP
// if frank_send_to_scout then
11478: LD_EXP 15
11482: IFFALSE 11496
// begin SayRadio ( Frank , D3b-Frank-1 ) ;
11484: LD_EXP 51
11488: PPUSH
11489: LD_STRING D3b-Frank-1
11491: PPUSH
11492: CALL_OW 94
// end ; Wait ( 0 0$03 ) ;
11496: LD_INT 105
11498: PPUSH
11499: CALL_OW 67
// SayRadio ( Cornel , D4-Corn-1 ) ;
11503: LD_EXP 44
11507: PPUSH
11508: LD_STRING D4-Corn-1
11510: PPUSH
11511: CALL_OW 94
// repeat wait ( 0 0$01 ) ;
11515: LD_INT 35
11517: PPUSH
11518: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) < 6 ;
11522: LD_INT 22
11524: PUSH
11525: LD_INT 4
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: LD_INT 21
11534: PUSH
11535: LD_INT 1
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: PUSH
11542: LD_INT 3
11544: PUSH
11545: LD_INT 24
11547: PUSH
11548: LD_INT 1000
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: LIST
11563: PPUSH
11564: CALL_OW 69
11568: PUSH
11569: LD_INT 6
11571: LESS
11572: IFFALSE 11515
// if Cornel then
11574: LD_EXP 44
11578: IFFALSE 11618
// begin SayRadio ( Cornel , D5-Corn-1 ) ;
11580: LD_EXP 44
11584: PPUSH
11585: LD_STRING D5-Corn-1
11587: PPUSH
11588: CALL_OW 94
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
11592: LD_EXP 44
11596: PPUSH
11597: LD_EXP 2
11601: PUSH
11602: LD_STRING Cornel
11604: STR
11605: PPUSH
11606: CALL_OW 38
// cornel_saved := true ;
11610: LD_ADDR_EXP 27
11614: PUSH
11615: LD_INT 1
11617: ST_TO_ADDR
// end ; ChangeSideFog ( 4 , 8 ) ;
11618: LD_INT 4
11620: PPUSH
11621: LD_INT 8
11623: PPUSH
11624: CALL_OW 343
// Wait ( 0 0$01 ) ;
11628: LD_INT 35
11630: PPUSH
11631: CALL_OW 67
// NormalAttack ( 3 , Cornel ) ;
11635: LD_INT 3
11637: PPUSH
11638: LD_EXP 44
11642: PPUSH
11643: CALL_OW 472
// send_attack_on_cornel := false ;
11647: LD_ADDR_EXP 32
11651: PUSH
11652: LD_INT 0
11654: ST_TO_ADDR
// end ;
11655: PPOPN 1
11657: END
// every 0 0$01 trigger FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) or game_end do var i , filter ;
11658: LD_INT 9
11660: PPUSH
11661: LD_INT 22
11663: PUSH
11664: LD_INT 1
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PPUSH
11671: CALL_OW 70
11675: PUSH
11676: LD_EXP 33
11680: OR
11681: IFFALSE 11902
11683: GO 11685
11685: DISABLE
11686: LD_INT 0
11688: PPUSH
11689: PPUSH
// begin enable ;
11690: ENABLE
// if not jmm_on_west then
11691: LD_EXP 5
11695: NOT
11696: IFFALSE 11707
// begin YouLost ( 4 ) ;
11698: LD_STRING 4
11700: PPUSH
11701: CALL_OW 104
// exit ;
11705: GO 11902
// end ; if not game_end then
11707: LD_EXP 33
11711: NOT
11712: IFFALSE 11722
// game_end := true ;
11714: LD_ADDR_EXP 33
11718: PUSH
11719: LD_INT 1
11721: ST_TO_ADDR
// filter := FilterUnitsInArea ( endMArea , [ f_side , 1 ] ) ;
11722: LD_ADDR_VAR 0 2
11726: PUSH
11727: LD_INT 9
11729: PPUSH
11730: LD_INT 22
11732: PUSH
11733: LD_INT 1
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PPUSH
11740: CALL_OW 70
11744: ST_TO_ADDR
// if not filter then
11745: LD_VAR 0 2
11749: NOT
11750: IFFALSE 11754
// exit ;
11752: GO 11902
// for i in filter do
11754: LD_ADDR_VAR 0 1
11758: PUSH
11759: LD_VAR 0 2
11763: PUSH
11764: FOR_IN
11765: IFFALSE 11900
// begin if IsOk ( i ) and GetType ( i ) = unit_vehicle and GetNation ( i ) = nation_american then
11767: LD_VAR 0 1
11771: PPUSH
11772: CALL_OW 302
11776: PUSH
11777: LD_VAR 0 1
11781: PPUSH
11782: CALL_OW 247
11786: PUSH
11787: LD_INT 2
11789: EQUAL
11790: AND
11791: PUSH
11792: LD_VAR 0 1
11796: PPUSH
11797: CALL_OW 248
11801: PUSH
11802: LD_INT 1
11804: EQUAL
11805: AND
11806: IFFALSE 11863
// begin if i = JMM and save_group < 4 then
11808: LD_VAR 0 1
11812: PUSH
11813: LD_EXP 37
11817: EQUAL
11818: PUSH
11819: LD_EXP 23
11823: PUSH
11824: LD_INT 4
11826: LESS
11827: AND
11828: IFFALSE 11832
// continue ;
11830: GO 11764
// veh_on_meta := true ;
11832: LD_ADDR_EXP 28
11836: PUSH
11837: LD_INT 1
11839: ST_TO_ADDR
// Save ( IsDrivenBy ( i ) ) ;
11840: LD_VAR 0 1
11844: PPUSH
11845: CALL_OW 311
11849: PPUSH
11850: CALL 11905 0 1
// RemoveUnit ( i ) ;
11854: LD_VAR 0 1
11858: PPUSH
11859: CALL_OW 64
// end ; if IsOk ( i ) and GetType ( i ) = unit_human then
11863: LD_VAR 0 1
11867: PPUSH
11868: CALL_OW 302
11872: PUSH
11873: LD_VAR 0 1
11877: PPUSH
11878: CALL_OW 247
11882: PUSH
11883: LD_INT 1
11885: EQUAL
11886: AND
11887: IFFALSE 11898
// Save ( i ) ;
11889: LD_VAR 0 1
11893: PPUSH
11894: CALL 11905 0 1
// end ;
11898: GO 11764
11900: POP
11901: POP
// end ;
11902: PPOPN 2
11904: END
// export function Save ( i ) ; begin
11905: LD_INT 0
11907: PPUSH
// if i = JMM and save_group >= 4 then
11908: LD_VAR 0 1
11912: PUSH
11913: LD_EXP 37
11917: EQUAL
11918: PUSH
11919: LD_EXP 23
11923: PUSH
11924: LD_INT 4
11926: GREATEREQUAL
11927: AND
11928: IFFALSE 12064
// begin if show_query and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 1 then
11930: LD_EXP 24
11934: PUSH
11935: LD_INT 22
11937: PUSH
11938: LD_INT 1
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: LD_INT 21
11947: PUSH
11948: LD_INT 1
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PPUSH
11959: CALL_OW 69
11963: PUSH
11964: LD_INT 1
11966: GREATER
11967: AND
11968: IFFALSE 12025
// begin show_query := false ;
11970: LD_ADDR_EXP 24
11974: PUSH
11975: LD_INT 0
11977: ST_TO_ADDR
// case Query ( Q2 ) of 1 :
11978: LD_STRING Q2
11980: PPUSH
11981: CALL_OW 97
11985: PUSH
11986: LD_INT 1
11988: DOUBLE
11989: EQUAL
11990: IFTRUE 11994
11992: GO 12005
11994: POP
// wait_for_them := true ; 2 :
11995: LD_ADDR_EXP 25
11999: PUSH
12000: LD_INT 1
12002: ST_TO_ADDR
12003: GO 12025
12005: LD_INT 2
12007: DOUBLE
12008: EQUAL
12009: IFTRUE 12013
12011: GO 12024
12013: POP
// wait_for_them := false ; end ;
12014: LD_ADDR_EXP 25
12018: PUSH
12019: LD_INT 0
12021: ST_TO_ADDR
12022: GO 12025
12024: POP
// end ; save_counter := save_counter + 1 ;
12025: LD_ADDR_EXP 36
12029: PUSH
12030: LD_EXP 36
12034: PUSH
12035: LD_INT 1
12037: PLUS
12038: ST_TO_ADDR
// save_group := save_group ^ JMM ;
12039: LD_ADDR_EXP 23
12043: PUSH
12044: LD_EXP 23
12048: PUSH
12049: LD_EXP 37
12053: ADD
12054: ST_TO_ADDR
// RemoveUnit ( JMM ) ;
12055: LD_EXP 37
12059: PPUSH
12060: CALL_OW 64
// end ; if i = Lisa then
12064: LD_VAR 0 1
12068: PUSH
12069: LD_EXP 40
12073: EQUAL
12074: IFFALSE 12115
// begin save_counter := save_counter + 1 ;
12076: LD_ADDR_EXP 36
12080: PUSH
12081: LD_EXP 36
12085: PUSH
12086: LD_INT 1
12088: PLUS
12089: ST_TO_ADDR
// save_group := save_group ^ Lisa ;
12090: LD_ADDR_EXP 23
12094: PUSH
12095: LD_EXP 23
12099: PUSH
12100: LD_EXP 40
12104: ADD
12105: ST_TO_ADDR
// RemoveUnit ( Lisa ) ;
12106: LD_EXP 40
12110: PPUSH
12111: CALL_OW 64
// end ; if i = Bobby then
12115: LD_VAR 0 1
12119: PUSH
12120: LD_EXP 38
12124: EQUAL
12125: IFFALSE 12166
// begin save_counter := save_counter + 1 ;
12127: LD_ADDR_EXP 36
12131: PUSH
12132: LD_EXP 36
12136: PUSH
12137: LD_INT 1
12139: PLUS
12140: ST_TO_ADDR
// save_group := save_group ^ Bobby ;
12141: LD_ADDR_EXP 23
12145: PUSH
12146: LD_EXP 23
12150: PUSH
12151: LD_EXP 38
12155: ADD
12156: ST_TO_ADDR
// RemoveUnit ( Bobby ) ;
12157: LD_EXP 38
12161: PPUSH
12162: CALL_OW 64
// end ; if i = Cyrus then
12166: LD_VAR 0 1
12170: PUSH
12171: LD_EXP 39
12175: EQUAL
12176: IFFALSE 12217
// begin save_counter := save_counter + 1 ;
12178: LD_ADDR_EXP 36
12182: PUSH
12183: LD_EXP 36
12187: PUSH
12188: LD_INT 1
12190: PLUS
12191: ST_TO_ADDR
// save_group := save_group ^ Cyrus ;
12192: LD_ADDR_EXP 23
12196: PUSH
12197: LD_EXP 23
12201: PUSH
12202: LD_EXP 39
12206: ADD
12207: ST_TO_ADDR
// RemoveUnit ( Cyrus ) ;
12208: LD_EXP 39
12212: PPUSH
12213: CALL_OW 64
// end ; if i = Khatam then
12217: LD_VAR 0 1
12221: PUSH
12222: LD_EXP 41
12226: EQUAL
12227: IFFALSE 12268
// begin save_counter := save_counter + 1 ;
12229: LD_ADDR_EXP 36
12233: PUSH
12234: LD_EXP 36
12238: PUSH
12239: LD_INT 1
12241: PLUS
12242: ST_TO_ADDR
// save_group := save_group ^ Khatam ;
12243: LD_ADDR_EXP 23
12247: PUSH
12248: LD_EXP 23
12252: PUSH
12253: LD_EXP 41
12257: ADD
12258: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
12259: LD_EXP 41
12263: PPUSH
12264: CALL_OW 64
// end ; if i = Frank then
12268: LD_VAR 0 1
12272: PUSH
12273: LD_EXP 51
12277: EQUAL
12278: IFFALSE 12319
// begin save_counter := save_counter + 1 ;
12280: LD_ADDR_EXP 36
12284: PUSH
12285: LD_EXP 36
12289: PUSH
12290: LD_INT 1
12292: PLUS
12293: ST_TO_ADDR
// save_group := save_group ^ Frank ;
12294: LD_ADDR_EXP 23
12298: PUSH
12299: LD_EXP 23
12303: PUSH
12304: LD_EXP 51
12308: ADD
12309: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
12310: LD_EXP 51
12314: PPUSH
12315: CALL_OW 64
// end ; if i <> JMM and IsOk ( i ) and GetType ( i ) = unit_human and ( not i in save_group ) then
12319: LD_VAR 0 1
12323: PUSH
12324: LD_EXP 37
12328: NONEQUAL
12329: PUSH
12330: LD_VAR 0 1
12334: PPUSH
12335: CALL_OW 302
12339: AND
12340: PUSH
12341: LD_VAR 0 1
12345: PPUSH
12346: CALL_OW 247
12350: PUSH
12351: LD_INT 1
12353: EQUAL
12354: AND
12355: PUSH
12356: LD_VAR 0 1
12360: PUSH
12361: LD_EXP 23
12365: IN
12366: NOT
12367: AND
12368: IFFALSE 12409
// begin save_counter := save_counter + 1 ;
12370: LD_ADDR_EXP 36
12374: PUSH
12375: LD_EXP 36
12379: PUSH
12380: LD_INT 1
12382: PLUS
12383: ST_TO_ADDR
// save_others := save_others ^ i ;
12384: LD_ADDR_EXP 22
12388: PUSH
12389: LD_EXP 22
12393: PUSH
12394: LD_VAR 0 1
12398: ADD
12399: ST_TO_ADDR
// RemoveUnit ( i ) ;
12400: LD_VAR 0 1
12404: PPUSH
12405: CALL_OW 64
// end ; end ;
12409: LD_VAR 0 2
12413: RET
// every 0 0$01 trigger ( not show_query and not wait_for_them ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
12414: LD_EXP 24
12418: NOT
12419: PUSH
12420: LD_EXP 25
12424: NOT
12425: AND
12426: PUSH
12427: LD_INT 22
12429: PUSH
12430: LD_INT 1
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 21
12439: PUSH
12440: LD_INT 1
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PPUSH
12451: CALL_OW 69
12455: PUSH
12456: LD_INT 0
12458: EQUAL
12459: OR
12460: IFFALSE 12469
12462: GO 12464
12464: DISABLE
// EndMission ;
12465: CALL 12470 0 0
12469: END
// export function EndMission ; var i , m1 , m2 , m3 ; begin
12470: LD_INT 0
12472: PPUSH
12473: PPUSH
12474: PPUSH
12475: PPUSH
12476: PPUSH
// wait ( 0 0$01 ) ;
12477: LD_INT 35
12479: PPUSH
12480: CALL_OW 67
// if tick <= 12 12$00 then
12484: LD_OWVAR 1
12488: PUSH
12489: LD_INT 25200
12491: LESSEQUAL
12492: IFFALSE 12501
// SetAchievement ( ACH_ASPEED_3 ) ;
12494: LD_STRING ACH_ASPEED_3
12496: PPUSH
12497: CALL_OW 543
// if UnitFilter ( save_group ^ save_others , [ f_class , 4 ] ) = 0 then
12501: LD_EXP 23
12505: PUSH
12506: LD_EXP 22
12510: ADD
12511: PPUSH
12512: LD_INT 25
12514: PUSH
12515: LD_INT 4
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PPUSH
12522: CALL_OW 72
12526: PUSH
12527: LD_INT 0
12529: EQUAL
12530: IFFALSE 12546
// begin wait ( 3 ) ;
12532: LD_INT 3
12534: PPUSH
12535: CALL_OW 67
// SetAchievement ( ACH_NOSCI ) ;
12539: LD_STRING ACH_NOSCI
12541: PPUSH
12542: CALL_OW 543
// end ; m1 := solar_builded ;
12546: LD_ADDR_VAR 0 3
12550: PUSH
12551: LD_EXP 14
12555: ST_TO_ADDR
// m2 := veh_on_meta ;
12556: LD_ADDR_VAR 0 4
12560: PUSH
12561: LD_EXP 28
12565: ST_TO_ADDR
// m3 := ( lose_counter = 0 ) ;
12566: LD_ADDR_VAR 0 5
12570: PUSH
12571: LD_EXP 34
12575: PUSH
12576: LD_INT 0
12578: EQUAL
12579: ST_TO_ADDR
// if solar_builded then
12580: LD_EXP 14
12584: IFFALSE 12598
// AddMedal ( Solar1 , 1 ) else
12586: LD_STRING Solar1
12588: PPUSH
12589: LD_INT 1
12591: PPUSH
12592: CALL_OW 101
12596: GO 12609
// AddMedal ( Solar1 , - 1 ) ;
12598: LD_STRING Solar1
12600: PPUSH
12601: LD_INT 1
12603: NEG
12604: PPUSH
12605: CALL_OW 101
// if veh_on_meta then
12609: LD_EXP 28
12613: IFFALSE 12627
// AddMedal ( Solar2 , 1 ) else
12615: LD_STRING Solar2
12617: PPUSH
12618: LD_INT 1
12620: PPUSH
12621: CALL_OW 101
12625: GO 12657
// if solar_builded then
12627: LD_EXP 14
12631: IFFALSE 12646
// AddMedal ( Solar2 , - 1 ) else
12633: LD_STRING Solar2
12635: PPUSH
12636: LD_INT 1
12638: NEG
12639: PPUSH
12640: CALL_OW 101
12644: GO 12657
// AddMedal ( Solar2 , - 2 ) ;
12646: LD_STRING Solar2
12648: PPUSH
12649: LD_INT 2
12651: NEG
12652: PPUSH
12653: CALL_OW 101
// if lose_counter = 0 then
12657: LD_EXP 34
12661: PUSH
12662: LD_INT 0
12664: EQUAL
12665: IFFALSE 12679
// AddMedal ( No , 1 ) else
12667: LD_STRING No
12669: PPUSH
12670: LD_INT 1
12672: PPUSH
12673: CALL_OW 101
12677: GO 12723
// if lose_counter > 0 and lose_counter < 4 then
12679: LD_EXP 34
12683: PUSH
12684: LD_INT 0
12686: GREATER
12687: PUSH
12688: LD_EXP 34
12692: PUSH
12693: LD_INT 4
12695: LESS
12696: AND
12697: IFFALSE 12712
// AddMedal ( No , - 1 ) else
12699: LD_STRING No
12701: PPUSH
12702: LD_INT 1
12704: NEG
12705: PPUSH
12706: CALL_OW 101
12710: GO 12723
// AddMedal ( UpTo4 , - 1 ) ;
12712: LD_STRING UpTo4
12714: PPUSH
12715: LD_INT 1
12717: NEG
12718: PPUSH
12719: CALL_OW 101
// GiveMedals ( MAIN ) ;
12723: LD_STRING MAIN
12725: PPUSH
12726: CALL_OW 102
// if Difficulty >= 3 and m1 and m2 and m3 then
12730: LD_OWVAR 67
12734: PUSH
12735: LD_INT 3
12737: GREATEREQUAL
12738: PUSH
12739: LD_VAR 0 3
12743: AND
12744: PUSH
12745: LD_VAR 0 4
12749: AND
12750: PUSH
12751: LD_VAR 0 5
12755: AND
12756: IFFALSE 12768
// SetAchievementEX ( ACH_AMER , 3 ) ;
12758: LD_STRING ACH_AMER
12760: PPUSH
12761: LD_INT 3
12763: PPUSH
12764: CALL_OW 564
// if IsDead ( Pokryshkin ) then
12768: LD_EXP 52
12772: PPUSH
12773: CALL_OW 301
12777: IFFALSE 12833
// begin stop_talking := true ;
12779: LD_ADDR_OWVAR 56
12783: PUSH
12784: LD_INT 1
12786: ST_TO_ADDR
// for i in save_group ^ save_others do
12787: LD_ADDR_VAR 0 2
12791: PUSH
12792: LD_EXP 23
12796: PUSH
12797: LD_EXP 22
12801: ADD
12802: PUSH
12803: FOR_IN
12804: IFFALSE 12823
// AddExperience ( i , skill_combat , 1500 ) ;
12806: LD_VAR 0 2
12810: PPUSH
12811: LD_INT 1
12813: PPUSH
12814: LD_INT 1500
12816: PPUSH
12817: CALL_OW 492
12821: GO 12803
12823: POP
12824: POP
// stop_talking := false ;
12825: LD_ADDR_OWVAR 56
12829: PUSH
12830: LD_INT 0
12832: ST_TO_ADDR
// end ; RewardPeople ( save_group ^ save_others ) ;
12833: LD_EXP 23
12837: PUSH
12838: LD_EXP 22
12842: ADD
12843: PPUSH
12844: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
12848: LD_EXP 37
12852: PPUSH
12853: LD_EXP 2
12857: PUSH
12858: LD_STRING JMM
12860: STR
12861: PPUSH
12862: CALL_OW 38
// if Bobby in save_group then
12866: LD_EXP 38
12870: PUSH
12871: LD_EXP 23
12875: IN
12876: IFFALSE 12896
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
12878: LD_EXP 38
12882: PPUSH
12883: LD_EXP 2
12887: PUSH
12888: LD_STRING Bobby
12890: STR
12891: PPUSH
12892: CALL_OW 38
// if Cyrus in save_group then
12896: LD_EXP 39
12900: PUSH
12901: LD_EXP 23
12905: IN
12906: IFFALSE 12926
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
12908: LD_EXP 39
12912: PPUSH
12913: LD_EXP 2
12917: PUSH
12918: LD_STRING Cyrus
12920: STR
12921: PPUSH
12922: CALL_OW 38
// if Lisa in save_group then
12926: LD_EXP 40
12930: PUSH
12931: LD_EXP 23
12935: IN
12936: IFFALSE 12956
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
12938: LD_EXP 40
12942: PPUSH
12943: LD_EXP 2
12947: PUSH
12948: LD_STRING Lisa
12950: STR
12951: PPUSH
12952: CALL_OW 38
// if Frank in save_group then
12956: LD_EXP 51
12960: PUSH
12961: LD_EXP 23
12965: IN
12966: IFFALSE 12986
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
12968: LD_EXP 51
12972: PPUSH
12973: LD_EXP 2
12977: PUSH
12978: LD_STRING Frank
12980: STR
12981: PPUSH
12982: CALL_OW 38
// if Khatam in save_group then
12986: LD_EXP 41
12990: PUSH
12991: LD_EXP 23
12995: IN
12996: IFFALSE 13016
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
12998: LD_EXP 41
13002: PPUSH
13003: LD_EXP 2
13007: PUSH
13008: LD_STRING Khatam
13010: STR
13011: PPUSH
13012: CALL_OW 38
// if save_others then
13016: LD_EXP 22
13020: IFFALSE 13034
// SaveCharacters ( save_others , 03_others ) ;
13022: LD_EXP 22
13026: PPUSH
13027: LD_STRING 03_others
13029: PPUSH
13030: CALL_OW 38
// if Bierezov and IsOk ( Bierezov ) and cornel_saved then
13034: LD_EXP 45
13038: PUSH
13039: LD_EXP 45
13043: PPUSH
13044: CALL_OW 302
13048: AND
13049: PUSH
13050: LD_EXP 27
13054: AND
13055: IFFALSE 13067
// begin ResetFog ;
13057: CALL_OW 335
// DisplayEndingScene ;
13061: CALL 13089 0 0
// end else
13065: GO 13080
// DeleteCharacters ( mission_prefix & Cornel ) ;
13067: LD_EXP 2
13071: PUSH
13072: LD_STRING Cornel
13074: STR
13075: PPUSH
13076: CALL_OW 40
// YouWin ;
13080: CALL_OW 103
// end ;
13084: LD_VAR 0 1
13088: RET
// export function DisplayEndingScene ; var i , filter , fake_cornel , fake_bierezov , fake_russians ; begin
13089: LD_INT 0
13091: PPUSH
13092: PPUSH
13093: PPUSH
13094: PPUSH
13095: PPUSH
13096: PPUSH
// InGameOn ;
13097: CALL_OW 8
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13101: LD_INT 208
13103: PPUSH
13104: LD_INT 62
13106: PPUSH
13107: LD_INT 1
13109: PPUSH
13110: LD_INT 10
13112: NEG
13113: PPUSH
13114: CALL_OW 330
// RemoveSeeing ( 208 , 62 , 1 ) ;
13118: LD_INT 208
13120: PPUSH
13121: LD_INT 62
13123: PPUSH
13124: LD_INT 1
13126: PPUSH
13127: CALL_OW 331
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
13131: LD_ADDR_VAR 0 3
13135: PUSH
13136: LD_INT 22
13138: PUSH
13139: LD_INT 3
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PUSH
13146: LD_INT 2
13148: PUSH
13149: LD_INT 21
13151: PUSH
13152: LD_INT 2
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 21
13161: PUSH
13162: LD_INT 1
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: LIST
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PPUSH
13178: CALL_OW 69
13182: ST_TO_ADDR
// if filter then
13183: LD_VAR 0 3
13187: IFFALSE 13215
// for i in filter do
13189: LD_ADDR_VAR 0 2
13193: PUSH
13194: LD_VAR 0 3
13198: PUSH
13199: FOR_IN
13200: IFFALSE 13213
// RemoveUnit ( i ) ;
13202: LD_VAR 0 2
13206: PPUSH
13207: CALL_OW 64
13211: GO 13199
13213: POP
13214: POP
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
13215: LD_ADDR_VAR 0 3
13219: PUSH
13220: LD_INT 22
13222: PUSH
13223: LD_INT 4
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PUSH
13230: LD_INT 21
13232: PUSH
13233: LD_INT 1
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PPUSH
13244: CALL_OW 69
13248: ST_TO_ADDR
// if filter then
13249: LD_VAR 0 3
13253: IFFALSE 13284
// for i in filter do
13255: LD_ADDR_VAR 0 2
13259: PUSH
13260: LD_VAR 0 3
13264: PUSH
13265: FOR_IN
13266: IFFALSE 13282
// SetLives ( i , 0 ) ;
13268: LD_VAR 0 2
13272: PPUSH
13273: LD_INT 0
13275: PPUSH
13276: CALL_OW 234
13280: GO 13265
13282: POP
13283: POP
// uc_side := 4 ;
13284: LD_ADDR_OWVAR 20
13288: PUSH
13289: LD_INT 4
13291: ST_TO_ADDR
// fake_cornel := PrepareUnit ( Cornell , false ,  ) ;
13292: LD_ADDR_VAR 0 4
13296: PUSH
13297: LD_STRING Cornell
13299: PPUSH
13300: LD_INT 0
13302: PPUSH
13303: LD_STRING 
13305: PPUSH
13306: CALL 35912 0 3
13310: ST_TO_ADDR
// PlaceUnitXY ( fake_cornel , 208 , 62 , false ) ;
13311: LD_VAR 0 4
13315: PPUSH
13316: LD_INT 208
13318: PPUSH
13319: LD_INT 62
13321: PPUSH
13322: LD_INT 0
13324: PPUSH
13325: CALL_OW 48
// SetLives ( fake_cornel , 100 ) ;
13329: LD_VAR 0 4
13333: PPUSH
13334: LD_INT 100
13336: PPUSH
13337: CALL_OW 234
// DoNotAttack ( 3 , fake_cornel ) ;
13341: LD_INT 3
13343: PPUSH
13344: LD_VAR 0 4
13348: PPUSH
13349: CALL_OW 471
// SetAttitude ( 4 , 3 , att_friend , true ) ;
13353: LD_INT 4
13355: PPUSH
13356: LD_INT 3
13358: PPUSH
13359: LD_INT 1
13361: PPUSH
13362: LD_INT 1
13364: PPUSH
13365: CALL_OW 80
// uc_side := 3 ;
13369: LD_ADDR_OWVAR 20
13373: PUSH
13374: LD_INT 3
13376: ST_TO_ADDR
// uc_nation := 3 ;
13377: LD_ADDR_OWVAR 21
13381: PUSH
13382: LD_INT 3
13384: ST_TO_ADDR
// InitHc ;
13385: CALL_OW 19
// fake_bierezov := PrepareUnit ( Mikhail , false ,  ) ;
13389: LD_ADDR_VAR 0 5
13393: PUSH
13394: LD_STRING Mikhail
13396: PPUSH
13397: LD_INT 0
13399: PPUSH
13400: LD_STRING 
13402: PPUSH
13403: CALL 35912 0 3
13407: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 0 ) ;
13408: LD_INT 1
13410: PPUSH
13411: LD_INT 1
13413: PPUSH
13414: LD_INT 0
13416: PPUSH
13417: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13421: LD_ADDR_VAR 0 6
13425: PUSH
13426: LD_VAR 0 6
13430: PUSH
13431: CALL_OW 44
13435: ADD
13436: ST_TO_ADDR
// fake_russians := fake_russians ^ CreateHuman ;
13437: LD_ADDR_VAR 0 6
13441: PUSH
13442: LD_VAR 0 6
13446: PUSH
13447: CALL_OW 44
13451: ADD
13452: ST_TO_ADDR
// PrepareHuman ( 2 , 4 , 0 ) ;
13453: LD_INT 2
13455: PPUSH
13456: LD_INT 4
13458: PPUSH
13459: LD_INT 0
13461: PPUSH
13462: CALL_OW 380
// fake_russians := fake_russians ^ CreateHuman ;
13466: LD_ADDR_VAR 0 6
13470: PUSH
13471: LD_VAR 0 6
13475: PUSH
13476: CALL_OW 44
13480: ADD
13481: ST_TO_ADDR
// PlaceUnitArea ( fake_bierezov , endingSceneArea , false ) ;
13482: LD_VAR 0 5
13486: PPUSH
13487: LD_INT 17
13489: PPUSH
13490: LD_INT 0
13492: PPUSH
13493: CALL_OW 49
// ComMoveXY ( fake_bierezov , 210 , 63 ) ;
13497: LD_VAR 0 5
13501: PPUSH
13502: LD_INT 210
13504: PPUSH
13505: LD_INT 63
13507: PPUSH
13508: CALL_OW 111
// AddComTurnXY ( fake_bierezov , 208 , 62 ) ;
13512: LD_VAR 0 5
13516: PPUSH
13517: LD_INT 208
13519: PPUSH
13520: LD_INT 62
13522: PPUSH
13523: CALL_OW 178
// for i in fake_russians do
13527: LD_ADDR_VAR 0 2
13531: PUSH
13532: LD_VAR 0 6
13536: PUSH
13537: FOR_IN
13538: IFFALSE 13616
// begin PlaceUnitArea ( i , endingSceneArea , false ) ;
13540: LD_VAR 0 2
13544: PPUSH
13545: LD_INT 17
13547: PPUSH
13548: LD_INT 0
13550: PPUSH
13551: CALL_OW 49
// ComMoveXY ( i , 215 , 67 ) ;
13555: LD_VAR 0 2
13559: PPUSH
13560: LD_INT 215
13562: PPUSH
13563: LD_INT 67
13565: PPUSH
13566: CALL_OW 111
// AddComTurnXY ( i , 208 , 62 ) ;
13570: LD_VAR 0 2
13574: PPUSH
13575: LD_INT 208
13577: PPUSH
13578: LD_INT 62
13580: PPUSH
13581: CALL_OW 178
// if GetClass ( i ) = 4 then
13585: LD_VAR 0 2
13589: PPUSH
13590: CALL_OW 257
13594: PUSH
13595: LD_INT 4
13597: EQUAL
13598: IFFALSE 13614
// ComHeal ( i , fake_cornel ) ;
13600: LD_VAR 0 2
13604: PPUSH
13605: LD_VAR 0 4
13609: PPUSH
13610: CALL_OW 128
// end ;
13614: GO 13537
13616: POP
13617: POP
// Wait ( 0 0$01 ) ;
13618: LD_INT 35
13620: PPUSH
13621: CALL_OW 67
// CenterNowOnXY ( 208 , 62 ) ;
13625: LD_INT 208
13627: PPUSH
13628: LD_INT 62
13630: PPUSH
13631: CALL_OW 86
// PlaceSeeing ( 208 , 62 , 1 , - 10 ) ;
13635: LD_INT 208
13637: PPUSH
13638: LD_INT 62
13640: PPUSH
13641: LD_INT 1
13643: PPUSH
13644: LD_INT 10
13646: NEG
13647: PPUSH
13648: CALL_OW 330
// Wait ( 0 0$15 ) ;
13652: LD_INT 525
13654: PPUSH
13655: CALL_OW 67
// RemoveSeeing ( 208 , 62 , 1 ) ;
13659: LD_INT 208
13661: PPUSH
13662: LD_INT 62
13664: PPUSH
13665: LD_INT 1
13667: PPUSH
13668: CALL_OW 331
// ResetFog ;
13672: CALL_OW 335
// InGameOff ;
13676: CALL_OW 9
// end ;
13680: LD_VAR 0 1
13684: RET
// every 0 0$15 trigger ( FilterUnitsInArea ( cornelBaseArea , [ f_side , 1 ] ) and IsOk ( Cornel ) ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornel ) , Cornel ) < 30 do
13685: LD_INT 10
13687: PPUSH
13688: LD_INT 22
13690: PUSH
13691: LD_INT 1
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PPUSH
13698: CALL_OW 70
13702: PUSH
13703: LD_EXP 44
13707: PPUSH
13708: CALL_OW 302
13712: AND
13713: PUSH
13714: LD_INT 22
13716: PUSH
13717: LD_INT 1
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PPUSH
13724: CALL_OW 69
13728: PPUSH
13729: LD_EXP 44
13733: PPUSH
13734: CALL_OW 74
13738: PPUSH
13739: LD_EXP 44
13743: PPUSH
13744: CALL_OW 296
13748: PUSH
13749: LD_INT 30
13751: LESS
13752: OR
13753: IFFALSE 13804
13755: GO 13757
13757: DISABLE
// begin enable ;
13758: ENABLE
// powell_warn := powell_warn + 1 ;
13759: LD_ADDR_EXP 35
13763: PUSH
13764: LD_EXP 35
13768: PUSH
13769: LD_INT 1
13771: PLUS
13772: ST_TO_ADDR
// if powell_warn = 3 then
13773: LD_EXP 35
13777: PUSH
13778: LD_INT 3
13780: EQUAL
13781: IFFALSE 13792
// begin YouLost ( 5 ) ;
13783: LD_STRING 5
13785: PPUSH
13786: CALL_OW 104
// exit ;
13790: GO 13804
// end ; SayRadio ( Powell , DWarn-Pow-1 ) ;
13792: LD_EXP 46
13796: PPUSH
13797: LD_STRING DWarn-Pow-1
13799: PPUSH
13800: CALL_OW 94
// end ; end_of_file
13804: END
// every 0 0$01 trigger cornel_active do var i , has_eng , filter , dep , blist , crates , cargo , sol ;
13805: LD_EXP 8
13809: IFFALSE 15646
13811: GO 13813
13813: DISABLE
13814: LD_INT 0
13816: PPUSH
13817: PPUSH
13818: PPUSH
13819: PPUSH
13820: PPUSH
13821: PPUSH
13822: PPUSH
13823: PPUSH
// begin ComMoveXY ( Cornel ^ Bierezov ^ cornel_units , 250 , 120 ) ;
13824: LD_EXP 44
13828: PUSH
13829: LD_EXP 45
13833: ADD
13834: PUSH
13835: LD_EXP 6
13839: ADD
13840: PPUSH
13841: LD_INT 250
13843: PPUSH
13844: LD_INT 120
13846: PPUSH
13847: CALL_OW 111
// has_eng := UnitFilter ( cornel_units , [ f_class , 2 ] ) diff Bierezov ;
13851: LD_ADDR_VAR 0 2
13855: PUSH
13856: LD_EXP 6
13860: PPUSH
13861: LD_INT 25
13863: PUSH
13864: LD_INT 2
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PPUSH
13871: CALL_OW 72
13875: PUSH
13876: LD_EXP 45
13880: DIFF
13881: ST_TO_ADDR
// filter := UnitFilter ( cornel_units , [ f_type , unit_human ] ) diff has_eng ;
13882: LD_ADDR_VAR 0 3
13886: PUSH
13887: LD_EXP 6
13891: PPUSH
13892: LD_INT 21
13894: PUSH
13895: LD_INT 1
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PPUSH
13902: CALL_OW 72
13906: PUSH
13907: LD_VAR 0 2
13911: DIFF
13912: ST_TO_ADDR
// if not has_eng then
13913: LD_VAR 0 2
13917: NOT
13918: IFFALSE 14001
// begin uc_side := 4 ;
13920: LD_ADDR_OWVAR 20
13924: PUSH
13925: LD_INT 4
13927: ST_TO_ADDR
// uc_nation := 1 ;
13928: LD_ADDR_OWVAR 21
13932: PUSH
13933: LD_INT 1
13935: ST_TO_ADDR
// bc_type := b_depot ;
13936: LD_ADDR_OWVAR 42
13940: PUSH
13941: LD_INT 0
13943: ST_TO_ADDR
// bc_level := 2 ;
13944: LD_ADDR_OWVAR 43
13948: PUSH
13949: LD_INT 2
13951: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( 264 , 120 , 4 ) ;
13952: LD_ADDR_VAR 0 4
13956: PUSH
13957: LD_INT 264
13959: PPUSH
13960: LD_INT 120
13962: PPUSH
13963: LD_INT 4
13965: PPUSH
13966: CALL_OW 47
13970: ST_TO_ADDR
// PlaceSeeing ( 264 , 120 , 4 , - 10 ) ;
13971: LD_INT 264
13973: PPUSH
13974: LD_INT 120
13976: PPUSH
13977: LD_INT 4
13979: PPUSH
13980: LD_INT 10
13982: NEG
13983: PPUSH
13984: CALL_OW 330
// RemoveSeeing ( 264 , 120 , 4 ) ;
13988: LD_INT 264
13990: PPUSH
13991: LD_INT 120
13993: PPUSH
13994: LD_INT 4
13996: PPUSH
13997: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
14001: LD_INT 35
14003: PPUSH
14004: CALL_OW 67
// until IsInArea ( Cornel , cornelBaseArea ) or IsInArea ( IsInUnit ( Cornel ) , cornelBaseArea ) ;
14008: LD_EXP 44
14012: PPUSH
14013: LD_INT 10
14015: PPUSH
14016: CALL_OW 308
14020: PUSH
14021: LD_EXP 44
14025: PPUSH
14026: CALL_OW 310
14030: PPUSH
14031: LD_INT 10
14033: PPUSH
14034: CALL_OW 308
14038: OR
14039: IFFALSE 14001
// if has_eng and not dep then
14041: LD_VAR 0 2
14045: PUSH
14046: LD_VAR 0 4
14050: NOT
14051: AND
14052: IFFALSE 14202
// begin ComBuild ( has_eng , b_depot , 264 , 120 , 4 ) ;
14054: LD_VAR 0 2
14058: PPUSH
14059: LD_INT 0
14061: PPUSH
14062: LD_INT 264
14064: PPUSH
14065: LD_INT 120
14067: PPUSH
14068: LD_INT 4
14070: PPUSH
14071: CALL_OW 145
// repeat wait ( 0 0$01 ) ;
14075: LD_INT 35
14077: PPUSH
14078: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
14082: LD_INT 22
14084: PUSH
14085: LD_INT 4
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: PUSH
14092: LD_INT 30
14094: PUSH
14095: LD_INT 0
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PPUSH
14106: CALL_OW 69
14110: IFFALSE 14075
// ComMoveXY ( filter , 264 , 120 ) ;
14112: LD_VAR 0 3
14116: PPUSH
14117: LD_INT 264
14119: PPUSH
14120: LD_INT 120
14122: PPUSH
14123: CALL_OW 111
// repeat wait ( 0 0$01 ) ;
14127: LD_INT 35
14129: PPUSH
14130: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) ;
14134: LD_INT 22
14136: PUSH
14137: LD_INT 4
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PUSH
14144: LD_INT 30
14146: PUSH
14147: LD_INT 0
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 3
14156: PUSH
14157: LD_INT 57
14159: PUSH
14160: EMPTY
14161: LIST
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: PPUSH
14172: CALL_OW 69
14176: IFFALSE 14127
// ComMoveXY ( filter , 247 , 113 ) ;
14178: LD_VAR 0 3
14182: PPUSH
14183: LD_INT 247
14185: PPUSH
14186: LD_INT 113
14188: PPUSH
14189: CALL_OW 111
// Wait ( 0 0$2 ) ;
14193: LD_INT 70
14195: PPUSH
14196: CALL_OW 67
// end else
14200: GO 14214
// begin SetSide ( dep , 4 ) ;
14202: LD_VAR 0 4
14206: PPUSH
14207: LD_INT 4
14209: PPUSH
14210: CALL_OW 235
// end ; dep := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
14214: LD_ADDR_VAR 0 4
14218: PUSH
14219: LD_INT 22
14221: PUSH
14222: LD_INT 4
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: LD_INT 30
14231: PUSH
14232: LD_INT 0
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PPUSH
14243: CALL_OW 69
14247: PUSH
14248: LD_INT 1
14250: ARRAY
14251: ST_TO_ADDR
// if not has_eng then
14252: LD_VAR 0 2
14256: NOT
14257: IFFALSE 14344
// for i = 1 to 2 do
14259: LD_ADDR_VAR 0 1
14263: PUSH
14264: DOUBLE
14265: LD_INT 1
14267: DEC
14268: ST_TO_ADDR
14269: LD_INT 2
14271: PUSH
14272: FOR_TO
14273: IFFALSE 14342
// begin ComEnterUnit ( filter [ 1 ] , dep ) ;
14275: LD_VAR 0 3
14279: PUSH
14280: LD_INT 1
14282: ARRAY
14283: PPUSH
14284: LD_VAR 0 4
14288: PPUSH
14289: CALL_OW 120
// AddComChangeProfession ( filter [ 1 ] , 2 ) ;
14293: LD_VAR 0 3
14297: PUSH
14298: LD_INT 1
14300: ARRAY
14301: PPUSH
14302: LD_INT 2
14304: PPUSH
14305: CALL_OW 183
// AddComExitBuilding ( filter [ 1 ] ) ;
14309: LD_VAR 0 3
14313: PUSH
14314: LD_INT 1
14316: ARRAY
14317: PPUSH
14318: CALL_OW 182
// filter := Delete ( filter , 1 ) ;
14322: LD_ADDR_VAR 0 3
14326: PUSH
14327: LD_VAR 0 3
14331: PPUSH
14332: LD_INT 1
14334: PPUSH
14335: CALL_OW 3
14339: ST_TO_ADDR
// end ;
14340: GO 14272
14342: POP
14343: POP
// if IsInUnit ( Cornel ) then
14344: LD_EXP 44
14348: PPUSH
14349: CALL_OW 310
14353: IFFALSE 14431
// begin cargo := IsInUnit ( Cornel ) ;
14355: LD_ADDR_VAR 0 7
14359: PUSH
14360: LD_EXP 44
14364: PPUSH
14365: CALL_OW 310
14369: ST_TO_ADDR
// if GetCargo ( cargo , mat_cans ) then
14370: LD_VAR 0 7
14374: PPUSH
14375: LD_INT 1
14377: PPUSH
14378: CALL_OW 289
14382: IFFALSE 14393
// ComUnload ( cargo ) ;
14384: LD_VAR 0 7
14388: PPUSH
14389: CALL_OW 159
// AddComMoveXY ( Cornel , 235 , 122 ) ;
14393: LD_EXP 44
14397: PPUSH
14398: LD_INT 235
14400: PPUSH
14401: LD_INT 122
14403: PPUSH
14404: CALL_OW 171
// AddComExitVehicle ( Cornel ) ;
14408: LD_EXP 44
14412: PPUSH
14413: CALL_OW 181
// AddComEnterUnit ( Cornel , dep ) ;
14417: LD_EXP 44
14421: PPUSH
14422: LD_VAR 0 4
14426: PPUSH
14427: CALL_OW 180
// end ; if Bierezov then
14431: LD_EXP 45
14435: IFFALSE 14483
// begin ComMoveXY ( Bierezov , 260 , 120 ) ;
14437: LD_EXP 45
14441: PPUSH
14442: LD_INT 260
14444: PPUSH
14445: LD_INT 120
14447: PPUSH
14448: CALL_OW 111
// if dep then
14452: LD_VAR 0 4
14456: IFFALSE 14474
// AddComEnterUnit ( Bierezov , dep ) else
14458: LD_EXP 45
14462: PPUSH
14463: LD_VAR 0 4
14467: PPUSH
14468: CALL_OW 180
14472: GO 14483
// AddComHold ( Bierezov ) ;
14474: LD_EXP 45
14478: PPUSH
14479: CALL_OW 200
// end ; wait ( 0 0$15 ) ;
14483: LD_INT 525
14485: PPUSH
14486: CALL_OW 67
// has_eng := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff Bierezov ;
14490: LD_ADDR_VAR 0 2
14494: PUSH
14495: LD_INT 22
14497: PUSH
14498: LD_INT 4
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: PUSH
14505: LD_INT 25
14507: PUSH
14508: LD_INT 2
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PPUSH
14519: CALL_OW 69
14523: PUSH
14524: LD_EXP 45
14528: DIFF
14529: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14530: LD_INT 35
14532: PPUSH
14533: CALL_OW 67
// crates := GetListOfCratesInArea ( cornelBaseArea ) ;
14537: LD_ADDR_VAR 0 6
14541: PUSH
14542: LD_INT 10
14544: PPUSH
14545: CALL_OW 435
14549: ST_TO_ADDR
// if crates then
14550: LD_VAR 0 6
14554: IFFALSE 14583
// ComCollect ( has_eng , crates [ 1 ] , crates [ 2 ] ) ;
14556: LD_VAR 0 2
14560: PPUSH
14561: LD_VAR 0 6
14565: PUSH
14566: LD_INT 1
14568: ARRAY
14569: PPUSH
14570: LD_VAR 0 6
14574: PUSH
14575: LD_INT 2
14577: ARRAY
14578: PPUSH
14579: CALL_OW 117
// until GetResourceType ( GetBase ( dep ) , mat_cans ) >= 40 ;
14583: LD_VAR 0 4
14587: PPUSH
14588: CALL_OW 274
14592: PPUSH
14593: LD_INT 1
14595: PPUSH
14596: CALL_OW 275
14600: PUSH
14601: LD_INT 40
14603: GREATEREQUAL
14604: IFFALSE 14530
// blist := [ [ b_armoury , 256 , 111 , 2 ] , [ b_breastwork , 243 , 112 , 2 ] , [ b_breastwork , 254 , 114 , 2 ] ] ;
14606: LD_ADDR_VAR 0 5
14610: PUSH
14611: LD_INT 4
14613: PUSH
14614: LD_INT 256
14616: PUSH
14617: LD_INT 111
14619: PUSH
14620: LD_INT 2
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: PUSH
14629: LD_INT 31
14631: PUSH
14632: LD_INT 243
14634: PUSH
14635: LD_INT 112
14637: PUSH
14638: LD_INT 2
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 31
14649: PUSH
14650: LD_INT 254
14652: PUSH
14653: LD_INT 114
14655: PUSH
14656: LD_INT 2
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: LIST
14669: ST_TO_ADDR
// for i in blist do
14670: LD_ADDR_VAR 0 1
14674: PUSH
14675: LD_VAR 0 5
14679: PUSH
14680: FOR_IN
14681: IFFALSE 14730
// AddComBuild ( has_eng , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
14683: LD_VAR 0 2
14687: PPUSH
14688: LD_VAR 0 1
14692: PUSH
14693: LD_INT 1
14695: ARRAY
14696: PPUSH
14697: LD_VAR 0 1
14701: PUSH
14702: LD_INT 2
14704: ARRAY
14705: PPUSH
14706: LD_VAR 0 1
14710: PUSH
14711: LD_INT 3
14713: ARRAY
14714: PPUSH
14715: LD_VAR 0 1
14719: PUSH
14720: LD_INT 4
14722: ARRAY
14723: PPUSH
14724: CALL_OW 205
14728: GO 14680
14730: POP
14731: POP
// repeat wait ( 0 0$01 ) ;
14732: LD_INT 35
14734: PPUSH
14735: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
14739: LD_INT 22
14741: PUSH
14742: LD_INT 4
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 30
14751: PUSH
14752: LD_INT 4
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 3
14761: PUSH
14762: LD_INT 57
14764: PUSH
14765: EMPTY
14766: LIST
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: LIST
14776: PPUSH
14777: CALL_OW 69
14781: IFFALSE 14732
// AddComEnterUnit ( filter , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14783: LD_VAR 0 3
14787: PPUSH
14788: LD_INT 22
14790: PUSH
14791: LD_INT 4
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: LD_INT 30
14800: PUSH
14801: LD_INT 4
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PPUSH
14812: CALL_OW 69
14816: PUSH
14817: LD_INT 1
14819: ARRAY
14820: PPUSH
14821: CALL_OW 180
// AddComChangeProfession ( filter , 1 ) ;
14825: LD_VAR 0 3
14829: PPUSH
14830: LD_INT 1
14832: PPUSH
14833: CALL_OW 183
// if has_eng > 1 then
14837: LD_VAR 0 2
14841: PUSH
14842: LD_INT 1
14844: GREATER
14845: IFFALSE 14987
// for i = has_eng downto 2 do
14847: LD_ADDR_VAR 0 1
14851: PUSH
14852: DOUBLE
14853: LD_VAR 0 2
14857: INC
14858: ST_TO_ADDR
14859: LD_INT 2
14861: PUSH
14862: FOR_DOWNTO
14863: IFFALSE 14985
// begin if IsInUnit ( has_eng [ i ] ) then
14865: LD_VAR 0 2
14869: PUSH
14870: LD_VAR 0 1
14874: ARRAY
14875: PPUSH
14876: CALL_OW 310
14880: IFFALSE 14897
// ComExitBuilding ( has_eng [ i ] ) ;
14882: LD_VAR 0 2
14886: PUSH
14887: LD_VAR 0 1
14891: ARRAY
14892: PPUSH
14893: CALL_OW 122
// AddComEnterUnit ( has_eng [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
14897: LD_VAR 0 2
14901: PUSH
14902: LD_VAR 0 1
14906: ARRAY
14907: PPUSH
14908: LD_INT 22
14910: PUSH
14911: LD_INT 4
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: PUSH
14918: LD_INT 30
14920: PUSH
14921: LD_INT 4
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PPUSH
14932: CALL_OW 69
14936: PUSH
14937: LD_INT 1
14939: ARRAY
14940: PPUSH
14941: CALL_OW 180
// AddComChangeProfession ( has_eng [ i ] , 1 ) ;
14945: LD_VAR 0 2
14949: PUSH
14950: LD_VAR 0 1
14954: ARRAY
14955: PPUSH
14956: LD_INT 1
14958: PPUSH
14959: CALL_OW 183
// has_eng := Delete ( has_eng , i ) ;
14963: LD_ADDR_VAR 0 2
14967: PUSH
14968: LD_VAR 0 2
14972: PPUSH
14973: LD_VAR 0 1
14977: PPUSH
14978: CALL_OW 3
14982: ST_TO_ADDR
// end ;
14983: GO 14862
14985: POP
14986: POP
// repeat wait ( 0 0$01 ) ;
14987: LD_INT 35
14989: PPUSH
14990: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) > 1 ;
14994: LD_INT 22
14996: PUSH
14997: LD_INT 4
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 30
15006: PUSH
15007: LD_INT 31
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 3
15016: PUSH
15017: LD_INT 57
15019: PUSH
15020: EMPTY
15021: LIST
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: LIST
15031: PPUSH
15032: CALL_OW 69
15036: PUSH
15037: LD_INT 1
15039: GREATER
15040: IFFALSE 14987
// sol := UnitFilter ( cornel_units , [ f_class , 1 ] ) ;
15042: LD_ADDR_VAR 0 8
15046: PUSH
15047: LD_EXP 6
15051: PPUSH
15052: LD_INT 25
15054: PUSH
15055: LD_INT 1
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PPUSH
15062: CALL_OW 72
15066: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) do
15067: LD_ADDR_VAR 0 1
15071: PUSH
15072: DOUBLE
15073: LD_INT 1
15075: DEC
15076: ST_TO_ADDR
15077: LD_INT 22
15079: PUSH
15080: LD_INT 4
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 30
15089: PUSH
15090: LD_INT 31
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 3
15099: PUSH
15100: LD_INT 57
15102: PUSH
15103: EMPTY
15104: LIST
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: LIST
15114: PPUSH
15115: CALL_OW 69
15119: PUSH
15120: FOR_TO
15121: IFFALSE 15205
// begin if not sol [ i ] then
15123: LD_VAR 0 8
15127: PUSH
15128: LD_VAR 0 1
15132: ARRAY
15133: NOT
15134: IFFALSE 15138
// break ;
15136: GO 15205
// ComExitBuilding ( sol [ i ] ) ;
15138: LD_VAR 0 8
15142: PUSH
15143: LD_VAR 0 1
15147: ARRAY
15148: PPUSH
15149: CALL_OW 122
// AddComEnterUnit ( sol [ i ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
15153: LD_VAR 0 8
15157: PUSH
15158: LD_VAR 0 1
15162: ARRAY
15163: PPUSH
15164: LD_INT 22
15166: PUSH
15167: LD_INT 4
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 30
15176: PUSH
15177: LD_INT 31
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PPUSH
15188: CALL_OW 69
15192: PUSH
15193: LD_VAR 0 1
15197: ARRAY
15198: PPUSH
15199: CALL_OW 180
// end ;
15203: GO 15120
15205: POP
15206: POP
// if sol > 3 then
15207: LD_VAR 0 8
15211: PUSH
15212: LD_INT 3
15214: GREATER
15215: IFFALSE 15332
// begin ComExitBuilding ( sol [ 3 ] ) ;
15217: LD_VAR 0 8
15221: PUSH
15222: LD_INT 3
15224: ARRAY
15225: PPUSH
15226: CALL_OW 122
// AddComMoveXY ( sol [ 3 ] , 246 , 94 ) ;
15230: LD_VAR 0 8
15234: PUSH
15235: LD_INT 3
15237: ARRAY
15238: PPUSH
15239: LD_INT 246
15241: PPUSH
15242: LD_INT 94
15244: PPUSH
15245: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$5 ) ;
15249: LD_VAR 0 8
15253: PUSH
15254: LD_INT 3
15256: ARRAY
15257: PPUSH
15258: LD_INT 175
15260: PPUSH
15261: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 224 , 90 ) ;
15265: LD_VAR 0 8
15269: PUSH
15270: LD_INT 3
15272: ARRAY
15273: PPUSH
15274: LD_INT 224
15276: PPUSH
15277: LD_INT 90
15279: PPUSH
15280: CALL_OW 171
// AddComWait ( sol [ 3 ] , 0 0$7 ) ;
15284: LD_VAR 0 8
15288: PUSH
15289: LD_INT 3
15291: ARRAY
15292: PPUSH
15293: LD_INT 245
15295: PPUSH
15296: CALL_OW 202
// AddComMoveXY ( sol [ 3 ] , 223 , 110 ) ;
15300: LD_VAR 0 8
15304: PUSH
15305: LD_INT 3
15307: ARRAY
15308: PPUSH
15309: LD_INT 223
15311: PPUSH
15312: LD_INT 110
15314: PPUSH
15315: CALL_OW 171
// AddComHold ( sol [ 3 ] ) ;
15319: LD_VAR 0 8
15323: PUSH
15324: LD_INT 3
15326: ARRAY
15327: PPUSH
15328: CALL_OW 200
// end ; ComEnterUnit ( has_eng , dep ) ;
15332: LD_VAR 0 2
15336: PPUSH
15337: LD_VAR 0 4
15341: PPUSH
15342: CALL_OW 120
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
15346: LD_INT 22
15348: PUSH
15349: LD_INT 4
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 30
15358: PUSH
15359: LD_INT 4
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PPUSH
15370: CALL_OW 69
15374: PUSH
15375: LD_INT 1
15377: ARRAY
15378: PPUSH
15379: CALL_OW 313
15383: PUSH
15384: LD_INT 6
15386: LESS
15387: IFFALSE 15451
// begin if IsInUnit ( Cornel ) then
15389: LD_EXP 44
15393: PPUSH
15394: CALL_OW 310
15398: IFFALSE 15409
// ComExitBuilding ( Cornel ) ;
15400: LD_EXP 44
15404: PPUSH
15405: CALL_OW 122
// AddComEnterUnit ( Cornel , FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
15409: LD_EXP 44
15413: PPUSH
15414: LD_INT 22
15416: PUSH
15417: LD_INT 4
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PUSH
15424: LD_INT 30
15426: PUSH
15427: LD_INT 4
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PPUSH
15438: CALL_OW 69
15442: PUSH
15443: LD_INT 1
15445: ARRAY
15446: PPUSH
15447: CALL_OW 180
// end ; repeat wait ( 0 0$01 ) ;
15451: LD_INT 35
15453: PPUSH
15454: CALL_OW 67
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15458: LD_ADDR_VAR 0 3
15462: PUSH
15463: LD_INT 22
15465: PUSH
15466: LD_INT 4
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PUSH
15473: LD_INT 21
15475: PUSH
15476: LD_INT 3
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PUSH
15483: LD_INT 3
15485: PUSH
15486: LD_INT 24
15488: PUSH
15489: LD_INT 1000
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: LIST
15504: PPUSH
15505: CALL_OW 69
15509: ST_TO_ADDR
// if filter and has_eng then
15510: LD_VAR 0 3
15514: PUSH
15515: LD_VAR 0 2
15519: AND
15520: IFFALSE 15586
// begin for i in has_eng do
15522: LD_ADDR_VAR 0 1
15526: PUSH
15527: LD_VAR 0 2
15531: PUSH
15532: FOR_IN
15533: IFFALSE 15582
// begin if IsInUnit ( i ) then
15535: LD_VAR 0 1
15539: PPUSH
15540: CALL_OW 310
15544: IFFALSE 15555
// ComExitBuilding ( i ) ;
15546: LD_VAR 0 1
15550: PPUSH
15551: CALL_OW 122
// Wait ( 3 ) ;
15555: LD_INT 3
15557: PPUSH
15558: CALL_OW 67
// ComRepairBuilding ( i , filter [ 1 ] ) ;
15562: LD_VAR 0 1
15566: PPUSH
15567: LD_VAR 0 3
15571: PUSH
15572: LD_INT 1
15574: ARRAY
15575: PPUSH
15576: CALL_OW 130
// end ;
15580: GO 15532
15582: POP
15583: POP
// end else
15584: GO 15640
// if has_eng and UnitFilter ( has_eng , [ f_outside ] ) then
15586: LD_VAR 0 2
15590: PUSH
15591: LD_VAR 0 2
15595: PPUSH
15596: LD_INT 56
15598: PUSH
15599: EMPTY
15600: LIST
15601: PPUSH
15602: CALL_OW 72
15606: AND
15607: IFFALSE 15640
// for i in has_eng do
15609: LD_ADDR_VAR 0 1
15613: PUSH
15614: LD_VAR 0 2
15618: PUSH
15619: FOR_IN
15620: IFFALSE 15638
// ComEnterUnit ( i , dep ) ;
15622: LD_VAR 0 1
15626: PPUSH
15627: LD_VAR 0 4
15631: PPUSH
15632: CALL_OW 120
15636: GO 15619
15638: POP
15639: POP
// until cornel_prepared ;
15640: LD_EXP 11
15644: IFFALSE 15451
// end ;
15646: PPOPN 8
15648: END
// every 0 0$03 trigger cornel_prepared do var i , arm , filter ;
15649: LD_EXP 11
15653: IFFALSE 16052
15655: GO 15657
15657: DISABLE
15658: LD_INT 0
15660: PPUSH
15661: PPUSH
15662: PPUSH
// begin arm := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
15663: LD_ADDR_VAR 0 2
15667: PUSH
15668: LD_INT 22
15670: PUSH
15671: LD_INT 4
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: LD_INT 30
15680: PUSH
15681: LD_INT 4
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PPUSH
15692: CALL_OW 69
15696: PUSH
15697: LD_INT 1
15699: ARRAY
15700: ST_TO_ADDR
// ComExitBuilding ( cornel_units ) ;
15701: LD_EXP 6
15705: PPUSH
15706: CALL_OW 122
// if Bierezov and IsInUnit ( Bierezov ) then
15710: LD_EXP 45
15714: PUSH
15715: LD_EXP 45
15719: PPUSH
15720: CALL_OW 310
15724: AND
15725: IFFALSE 15736
// ComExitBuilding ( Bierezov ) ;
15727: LD_EXP 45
15731: PPUSH
15732: CALL_OW 122
// Wait ( 0 0$03 ) ;
15736: LD_INT 105
15738: PPUSH
15739: CALL_OW 67
// for i in cornel_units do
15743: LD_ADDR_VAR 0 1
15747: PUSH
15748: LD_EXP 6
15752: PUSH
15753: FOR_IN
15754: IFFALSE 15830
// begin if GetClass ( i ) in [ 2 , 3 ] then
15756: LD_VAR 0 1
15760: PPUSH
15761: CALL_OW 257
15765: PUSH
15766: LD_INT 2
15768: PUSH
15769: LD_INT 3
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: IN
15776: IFFALSE 15813
// begin ComEnterUnit ( i , arm ) ;
15778: LD_VAR 0 1
15782: PPUSH
15783: LD_VAR 0 2
15787: PPUSH
15788: CALL_OW 120
// AddComChangeProfession ( i , 1 ) ;
15792: LD_VAR 0 1
15796: PPUSH
15797: LD_INT 1
15799: PPUSH
15800: CALL_OW 183
// AddComExitBuilding ( i ) ;
15804: LD_VAR 0 1
15808: PPUSH
15809: CALL_OW 182
// end ; AddComMoveXY ( i , 257 , 121 ) ;
15813: LD_VAR 0 1
15817: PPUSH
15818: LD_INT 257
15820: PPUSH
15821: LD_INT 121
15823: PPUSH
15824: CALL_OW 171
// end ;
15828: GO 15753
15830: POP
15831: POP
// Wait ( 1 1$00 ) ;
15832: LD_INT 2100
15834: PPUSH
15835: CALL_OW 67
// filter := Cornel ^ Bierezov ^ cornel_units diff UnitFilter ( cornel_units , [ f_type , unit_vehicle ] ) ;
15839: LD_ADDR_VAR 0 3
15843: PUSH
15844: LD_EXP 44
15848: PUSH
15849: LD_EXP 45
15853: ADD
15854: PUSH
15855: LD_EXP 6
15859: ADD
15860: PUSH
15861: LD_EXP 6
15865: PPUSH
15866: LD_INT 21
15868: PUSH
15869: LD_INT 2
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PPUSH
15876: CALL_OW 72
15880: DIFF
15881: ST_TO_ADDR
// ComMoveXY ( filter , 248 , 85 ) ;
15882: LD_VAR 0 3
15886: PPUSH
15887: LD_INT 248
15889: PPUSH
15890: LD_INT 85
15892: PPUSH
15893: CALL_OW 111
// AddComHold ( filter ) ;
15897: LD_VAR 0 3
15901: PPUSH
15902: CALL_OW 200
// repeat wait ( 0 0$01 ) ;
15906: LD_INT 35
15908: PPUSH
15909: CALL_OW 67
// until cornel_attack ;
15913: LD_EXP 9
15917: IFFALSE 15906
// ComAgressiveMove ( filter , 209 , 63 ) ;
15919: LD_VAR 0 3
15923: PPUSH
15924: LD_INT 209
15926: PPUSH
15927: LD_INT 63
15929: PPUSH
15930: CALL_OW 114
// ComAgressiveMove ( Cornel , 208 , 62 ) ;
15934: LD_EXP 44
15938: PPUSH
15939: LD_INT 208
15941: PPUSH
15942: LD_INT 62
15944: PPUSH
15945: CALL_OW 114
// AddComHold ( Cornel ) ;
15949: LD_EXP 44
15953: PPUSH
15954: CALL_OW 200
// if Bierezov then
15958: LD_EXP 45
15962: IFFALSE 16052
// begin filter := filter diff Bierezov ;
15964: LD_ADDR_VAR 0 3
15968: PUSH
15969: LD_VAR 0 3
15973: PUSH
15974: LD_EXP 45
15978: DIFF
15979: ST_TO_ADDR
// SetSide ( Bierezov , 6 ) ;
15980: LD_EXP 45
15984: PPUSH
15985: LD_INT 6
15987: PPUSH
15988: CALL_OW 235
// ComMoveXY ( Bierezov , 235 , 60 ) ;
15992: LD_EXP 45
15996: PPUSH
15997: LD_INT 235
15999: PPUSH
16000: LD_INT 60
16002: PPUSH
16003: CALL_OW 111
// AddComHold ( Bierezov ) ;
16007: LD_EXP 45
16011: PPUSH
16012: CALL_OW 200
// AddComWait ( Bierezov , 0 0$10 ) ;
16016: LD_EXP 45
16020: PPUSH
16021: LD_INT 350
16023: PPUSH
16024: CALL_OW 202
// AddComMoveXY ( Bierezov , 198 , 28 ) ;
16028: LD_EXP 45
16032: PPUSH
16033: LD_INT 198
16035: PPUSH
16036: LD_INT 28
16038: PPUSH
16039: CALL_OW 171
// AddComHold ( Bierezov ) ;
16043: LD_EXP 45
16047: PPUSH
16048: CALL_OW 200
// end ; end ; end_of_file
16052: PPOPN 3
16054: END
// every 0 0$01 trigger ru_patrol and not prepare_siege and not send_attack_on_cornel do var un , i , j , enemy ;
16055: LD_EXP 53
16059: PUSH
16060: LD_EXP 31
16064: NOT
16065: AND
16066: PUSH
16067: LD_EXP 32
16071: NOT
16072: AND
16073: IFFALSE 16523
16075: GO 16077
16077: DISABLE
16078: LD_INT 0
16080: PPUSH
16081: PPUSH
16082: PPUSH
16083: PPUSH
// begin enable ;
16084: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16085: LD_ADDR_VAR 0 4
16089: PUSH
16090: LD_INT 81
16092: PUSH
16093: LD_INT 3
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PPUSH
16100: CALL_OW 69
16104: ST_TO_ADDR
// for i = 1 to ru_patrol do
16105: LD_ADDR_VAR 0 2
16109: PUSH
16110: DOUBLE
16111: LD_INT 1
16113: DEC
16114: ST_TO_ADDR
16115: LD_EXP 53
16119: PUSH
16120: FOR_TO
16121: IFFALSE 16521
// begin un := ru_patrol [ i ] ;
16123: LD_ADDR_VAR 0 1
16127: PUSH
16128: LD_EXP 53
16132: PUSH
16133: LD_VAR 0 2
16137: ARRAY
16138: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16139: LD_VAR 0 1
16143: PPUSH
16144: LD_INT 13
16146: PPUSH
16147: CALL_OW 308
16151: IFFALSE 16256
// begin if not ru_alert then
16153: LD_EXP 60
16157: NOT
16158: IFFALSE 16168
// ru_alert := true ;
16160: LD_ADDR_EXP 60
16164: PUSH
16165: LD_INT 1
16167: ST_TO_ADDR
// if not See ( 1 , un ) then
16168: LD_INT 1
16170: PPUSH
16171: LD_VAR 0 1
16175: PPUSH
16176: CALL_OW 292
16180: NOT
16181: IFFALSE 16195
// SetLives ( un , 1000 ) ;
16183: LD_VAR 0 1
16187: PPUSH
16188: LD_INT 1000
16190: PPUSH
16191: CALL_OW 234
// ru_patrol := ru_patrol diff un ;
16195: LD_ADDR_EXP 53
16199: PUSH
16200: LD_EXP 53
16204: PUSH
16205: LD_VAR 0 1
16209: DIFF
16210: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
16211: LD_VAR 0 1
16215: PPUSH
16216: LD_INT 22
16218: PUSH
16219: LD_INT 3
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 30
16228: PUSH
16229: LD_INT 4
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PPUSH
16240: CALL_OW 69
16244: PPUSH
16245: CALL 1007 0 1
16249: PPUSH
16250: CALL_OW 120
// continue ;
16254: GO 16120
// end ; if IsOk ( un ) and not HasTask ( un ) then
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL_OW 302
16265: PUSH
16266: LD_VAR 0 1
16270: PPUSH
16271: CALL_OW 314
16275: NOT
16276: AND
16277: IFFALSE 16370
// begin for j = 1 to ru_firepoints_south [ i ] do
16279: LD_ADDR_VAR 0 3
16283: PUSH
16284: DOUBLE
16285: LD_INT 1
16287: DEC
16288: ST_TO_ADDR
16289: LD_EXP 59
16293: PUSH
16294: LD_VAR 0 2
16298: ARRAY
16299: PUSH
16300: FOR_TO
16301: IFFALSE 16368
// begin AddComAgressiveMove ( un , ru_firepoints_south [ i ] [ j ] [ 1 ] , ru_firepoints_south [ i ] [ j ] [ 2 ] ) ;
16303: LD_VAR 0 1
16307: PPUSH
16308: LD_EXP 59
16312: PUSH
16313: LD_VAR 0 2
16317: ARRAY
16318: PUSH
16319: LD_VAR 0 3
16323: ARRAY
16324: PUSH
16325: LD_INT 1
16327: ARRAY
16328: PPUSH
16329: LD_EXP 59
16333: PUSH
16334: LD_VAR 0 2
16338: ARRAY
16339: PUSH
16340: LD_VAR 0 3
16344: ARRAY
16345: PUSH
16346: LD_INT 2
16348: ARRAY
16349: PPUSH
16350: CALL_OW 174
// AddComWait ( un , 0 0$02 ) ;
16354: LD_VAR 0 1
16358: PPUSH
16359: LD_INT 70
16361: PPUSH
16362: CALL_OW 202
// end ;
16366: GO 16300
16368: POP
16369: POP
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
16370: LD_VAR 0 1
16374: PPUSH
16375: CALL_OW 256
16379: PUSH
16380: LD_INT 700
16382: LESS
16383: PUSH
16384: LD_VAR 0 1
16388: PPUSH
16389: LD_INT 13
16391: PPUSH
16392: CALL_OW 308
16396: NOT
16397: AND
16398: IFFALSE 16450
// begin ComMoveToArea ( un , retreatArea ) ;
16400: LD_VAR 0 1
16404: PPUSH
16405: LD_INT 13
16407: PPUSH
16408: CALL_OW 113
// if not ru_alert_xy then
16412: LD_EXP 61
16416: NOT
16417: IFFALSE 16448
// ru_alert_xy := [ GetX ( un ) , GetY ( un ) ] ;
16419: LD_ADDR_EXP 61
16423: PUSH
16424: LD_VAR 0 1
16428: PPUSH
16429: CALL_OW 250
16433: PUSH
16434: LD_VAR 0 1
16438: PPUSH
16439: CALL_OW 251
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: ST_TO_ADDR
// end else
16448: GO 16519
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
16450: LD_VAR 0 1
16454: PPUSH
16455: LD_VAR 0 4
16459: PPUSH
16460: LD_VAR 0 1
16464: PPUSH
16465: CALL_OW 74
16469: PPUSH
16470: CALL_OW 296
16474: PUSH
16475: LD_INT 9
16477: LESS
16478: PUSH
16479: LD_VAR 0 1
16483: PPUSH
16484: CALL_OW 256
16488: PUSH
16489: LD_INT 500
16491: GREATER
16492: AND
16493: IFFALSE 16519
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
16495: LD_VAR 0 1
16499: PPUSH
16500: LD_VAR 0 4
16504: PPUSH
16505: LD_VAR 0 1
16509: PPUSH
16510: CALL_OW 74
16514: PPUSH
16515: CALL_OW 115
// end ;
16519: GO 16120
16521: POP
16522: POP
// end ;
16523: PPOPN 4
16525: END
// every 0 0$01 trigger ru_alert and ru_alert_xy and not prepare_siege and not send_attack_on_cornel do var i , enemy ;
16526: LD_EXP 60
16530: PUSH
16531: LD_EXP 61
16535: AND
16536: PUSH
16537: LD_EXP 31
16541: NOT
16542: AND
16543: PUSH
16544: LD_EXP 32
16548: NOT
16549: AND
16550: IFFALSE 16760
16552: GO 16554
16554: DISABLE
16555: LD_INT 0
16557: PPUSH
16558: PPUSH
// begin enable ;
16559: ENABLE
// if not ru_vehicles then
16560: LD_EXP 56
16564: NOT
16565: IFFALSE 16569
// exit ;
16567: GO 16760
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16569: LD_ADDR_VAR 0 2
16573: PUSH
16574: LD_INT 81
16576: PUSH
16577: LD_INT 3
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PPUSH
16584: CALL_OW 69
16588: ST_TO_ADDR
// if ru_vehicles then
16589: LD_EXP 56
16593: IFFALSE 16760
// begin for i in ru_vehicles do
16595: LD_ADDR_VAR 0 1
16599: PUSH
16600: LD_EXP 56
16604: PUSH
16605: FOR_IN
16606: IFFALSE 16758
// begin if IsOk ( i ) and GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) < 9 then
16608: LD_VAR 0 1
16612: PPUSH
16613: CALL_OW 302
16617: PUSH
16618: LD_VAR 0 1
16622: PPUSH
16623: LD_VAR 0 2
16627: PPUSH
16628: LD_VAR 0 1
16632: PPUSH
16633: CALL_OW 74
16637: PPUSH
16638: CALL_OW 296
16642: PUSH
16643: LD_INT 9
16645: LESS
16646: AND
16647: IFFALSE 16673
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
16649: LD_VAR 0 1
16653: PPUSH
16654: LD_VAR 0 2
16658: PPUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: CALL_OW 74
16668: PPUSH
16669: CALL_OW 115
// if not HasTask ( i ) and IsOk ( i ) and GetDistUnitXY ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) > 10 then
16673: LD_VAR 0 1
16677: PPUSH
16678: CALL_OW 314
16682: NOT
16683: PUSH
16684: LD_VAR 0 1
16688: PPUSH
16689: CALL_OW 302
16693: AND
16694: PUSH
16695: LD_VAR 0 1
16699: PPUSH
16700: LD_EXP 61
16704: PUSH
16705: LD_INT 1
16707: ARRAY
16708: PPUSH
16709: LD_EXP 61
16713: PUSH
16714: LD_INT 2
16716: ARRAY
16717: PPUSH
16718: CALL_OW 297
16722: PUSH
16723: LD_INT 10
16725: GREATER
16726: AND
16727: IFFALSE 16756
// ComAgressiveMove ( i , ru_alert_xy [ 1 ] , ru_alert_xy [ 2 ] ) ;
16729: LD_VAR 0 1
16733: PPUSH
16734: LD_EXP 61
16738: PUSH
16739: LD_INT 1
16741: ARRAY
16742: PPUSH
16743: LD_EXP 61
16747: PUSH
16748: LD_INT 2
16750: ARRAY
16751: PPUSH
16752: CALL_OW 114
// end ;
16756: GO 16605
16758: POP
16759: POP
// end ; end ;
16760: PPOPN 2
16762: END
// every 3 3$00 trigger ru_alert_xy and ru_alert and not InBattle ( 3 ) and not prepare_siege and not send_attack_on_cornel do var i ;
16763: LD_EXP 61
16767: PUSH
16768: LD_EXP 60
16772: AND
16773: PUSH
16774: LD_INT 3
16776: PPUSH
16777: CALL_OW 463
16781: NOT
16782: AND
16783: PUSH
16784: LD_EXP 31
16788: NOT
16789: AND
16790: PUSH
16791: LD_EXP 32
16795: NOT
16796: AND
16797: IFFALSE 16892
16799: GO 16801
16801: DISABLE
16802: LD_INT 0
16804: PPUSH
// begin enable ;
16805: ENABLE
// ru_alert_xy := false ;
16806: LD_ADDR_EXP 61
16810: PUSH
16811: LD_INT 0
16813: ST_TO_ADDR
// ru_alert := false ;
16814: LD_ADDR_EXP 60
16818: PUSH
16819: LD_INT 0
16821: ST_TO_ADDR
// if ru_vehicles then
16822: LD_EXP 56
16826: IFFALSE 16892
// for i in ru_vehicles do
16828: LD_ADDR_VAR 0 1
16832: PUSH
16833: LD_EXP 56
16837: PUSH
16838: FOR_IN
16839: IFFALSE 16890
// if IsOk ( i ) and GetDistUnitXY ( i , 89 , 36 ) > 10 then
16841: LD_VAR 0 1
16845: PPUSH
16846: CALL_OW 302
16850: PUSH
16851: LD_VAR 0 1
16855: PPUSH
16856: LD_INT 89
16858: PPUSH
16859: LD_INT 36
16861: PPUSH
16862: CALL_OW 297
16866: PUSH
16867: LD_INT 10
16869: GREATER
16870: AND
16871: IFFALSE 16888
// ComMoveXY ( i , 89 , 36 ) ;
16873: LD_VAR 0 1
16877: PPUSH
16878: LD_INT 89
16880: PPUSH
16881: LD_INT 36
16883: PPUSH
16884: CALL_OW 111
16888: GO 16838
16890: POP
16891: POP
// end ;
16892: PPOPN 1
16894: END
// every 0 0$01 trigger ru_forest and not prepare_siege and not send_attack_on_cornel do var i , un , enemy ;
16895: LD_EXP 55
16899: PUSH
16900: LD_EXP 31
16904: NOT
16905: AND
16906: PUSH
16907: LD_EXP 32
16911: NOT
16912: AND
16913: IFFALSE 17197
16915: GO 16917
16917: DISABLE
16918: LD_INT 0
16920: PPUSH
16921: PPUSH
16922: PPUSH
// begin enable ;
16923: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
16924: LD_ADDR_VAR 0 3
16928: PUSH
16929: LD_INT 81
16931: PUSH
16932: LD_INT 3
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PPUSH
16939: CALL_OW 69
16943: ST_TO_ADDR
// for i = 1 to ru_forest do
16944: LD_ADDR_VAR 0 1
16948: PUSH
16949: DOUBLE
16950: LD_INT 1
16952: DEC
16953: ST_TO_ADDR
16954: LD_EXP 55
16958: PUSH
16959: FOR_TO
16960: IFFALSE 17195
// begin un := ru_forest [ i ] ;
16962: LD_ADDR_VAR 0 2
16966: PUSH
16967: LD_EXP 55
16971: PUSH
16972: LD_VAR 0 1
16976: ARRAY
16977: ST_TO_ADDR
// if IsInArea ( un , retreatArea ) then
16978: LD_VAR 0 2
16982: PPUSH
16983: LD_INT 13
16985: PPUSH
16986: CALL_OW 308
16990: IFFALSE 17080
// begin if not See ( 1 , un ) then
16992: LD_INT 1
16994: PPUSH
16995: LD_VAR 0 2
16999: PPUSH
17000: CALL_OW 292
17004: NOT
17005: IFFALSE 17019
// SetLives ( un , 1000 ) ;
17007: LD_VAR 0 2
17011: PPUSH
17012: LD_INT 1000
17014: PPUSH
17015: CALL_OW 234
// ru_forest := ru_forest diff un ;
17019: LD_ADDR_EXP 55
17023: PUSH
17024: LD_EXP 55
17028: PUSH
17029: LD_VAR 0 2
17033: DIFF
17034: ST_TO_ADDR
// ComEnterUnit ( un , FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_armoury ] ] ) ) ) ;
17035: LD_VAR 0 2
17039: PPUSH
17040: LD_INT 22
17042: PUSH
17043: LD_INT 3
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 30
17052: PUSH
17053: LD_INT 4
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PPUSH
17064: CALL_OW 69
17068: PPUSH
17069: CALL 1007 0 1
17073: PPUSH
17074: CALL_OW 120
// continue ;
17078: GO 16959
// end ; if GetLives ( un ) < 700 and not IsInArea ( un , retreatArea ) then
17080: LD_VAR 0 2
17084: PPUSH
17085: CALL_OW 256
17089: PUSH
17090: LD_INT 700
17092: LESS
17093: PUSH
17094: LD_VAR 0 2
17098: PPUSH
17099: LD_INT 13
17101: PPUSH
17102: CALL_OW 308
17106: NOT
17107: AND
17108: IFFALSE 17124
// ComMoveToArea ( un , retreatArea ) else
17110: LD_VAR 0 2
17114: PPUSH
17115: LD_INT 13
17117: PPUSH
17118: CALL_OW 113
17122: GO 17193
// if GetDistUnits ( un , NearestUnitToUnit ( enemy , un ) ) < 9 and GetLives ( un ) > 500 then
17124: LD_VAR 0 2
17128: PPUSH
17129: LD_VAR 0 3
17133: PPUSH
17134: LD_VAR 0 2
17138: PPUSH
17139: CALL_OW 74
17143: PPUSH
17144: CALL_OW 296
17148: PUSH
17149: LD_INT 9
17151: LESS
17152: PUSH
17153: LD_VAR 0 2
17157: PPUSH
17158: CALL_OW 256
17162: PUSH
17163: LD_INT 500
17165: GREATER
17166: AND
17167: IFFALSE 17193
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
17169: LD_VAR 0 2
17173: PPUSH
17174: LD_VAR 0 3
17178: PPUSH
17179: LD_VAR 0 2
17183: PPUSH
17184: CALL_OW 74
17188: PPUSH
17189: CALL_OW 115
// end ;
17193: GO 16959
17195: POP
17196: POP
// end ;
17197: PPOPN 3
17199: END
// every 0 0$10 trigger not send_attack_on_cornel do var i , filter ;
17200: LD_EXP 32
17204: NOT
17205: IFFALSE 17326
17207: GO 17209
17209: DISABLE
17210: LD_INT 0
17212: PPUSH
17213: PPUSH
// begin enable ;
17214: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
17215: LD_ADDR_VAR 0 2
17219: PUSH
17220: LD_INT 22
17222: PUSH
17223: LD_INT 3
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 21
17232: PUSH
17233: LD_INT 3
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PPUSH
17244: CALL_OW 69
17248: ST_TO_ADDR
// if filter then
17249: LD_VAR 0 2
17253: IFFALSE 17326
// for i in filter do
17255: LD_ADDR_VAR 0 1
17259: PUSH
17260: LD_VAR 0 2
17264: PUSH
17265: FOR_IN
17266: IFFALSE 17324
// if GetLives ( i ) < 990 then
17268: LD_VAR 0 1
17272: PPUSH
17273: CALL_OW 256
17277: PUSH
17278: LD_INT 990
17280: LESS
17281: IFFALSE 17322
// begin ru_alert := true ;
17283: LD_ADDR_EXP 60
17287: PUSH
17288: LD_INT 1
17290: ST_TO_ADDR
// ru_alert_xy := [ GetX ( i ) , GetY ( i ) ] ;
17291: LD_ADDR_EXP 61
17295: PUSH
17296: LD_VAR 0 1
17300: PPUSH
17301: CALL_OW 250
17305: PUSH
17306: LD_VAR 0 1
17310: PPUSH
17311: CALL_OW 251
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: ST_TO_ADDR
// break ;
17320: GO 17324
// end ;
17322: GO 17265
17324: POP
17325: POP
// end ;
17326: PPOPN 2
17328: END
// every 0 0$30 trigger prepare_siege do var i , un , enemy , filter ;
17329: LD_EXP 31
17333: IFFALSE 17482
17335: GO 17337
17337: DISABLE
17338: LD_INT 0
17340: PPUSH
17341: PPUSH
17342: PPUSH
17343: PPUSH
// begin filter := ru_vehicles ^ ru_forest ^ ru_patrol ;
17344: LD_ADDR_VAR 0 4
17348: PUSH
17349: LD_EXP 56
17353: PUSH
17354: LD_EXP 55
17358: ADD
17359: PUSH
17360: LD_EXP 53
17364: ADD
17365: ST_TO_ADDR
// enemy := FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) ;
17366: LD_ADDR_VAR 0 3
17370: PUSH
17371: LD_INT 3
17373: PPUSH
17374: LD_INT 81
17376: PUSH
17377: LD_INT 3
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PPUSH
17384: CALL_OW 70
17388: ST_TO_ADDR
// if filter and enemy then
17389: LD_VAR 0 4
17393: PUSH
17394: LD_VAR 0 3
17398: AND
17399: IFFALSE 17482
// repeat wait ( 0 0$01 ) ;
17401: LD_INT 35
17403: PPUSH
17404: CALL_OW 67
// for i in filter do
17408: LD_ADDR_VAR 0 1
17412: PUSH
17413: LD_VAR 0 4
17417: PUSH
17418: FOR_IN
17419: IFFALSE 17447
// begin ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17421: LD_VAR 0 1
17425: PPUSH
17426: LD_VAR 0 3
17430: PPUSH
17431: LD_VAR 0 1
17435: PPUSH
17436: CALL_OW 74
17440: PPUSH
17441: CALL_OW 115
// end ;
17445: GO 17418
17447: POP
17448: POP
// until FilterUnitsInArea ( westBaseArea , [ f_enemy , 3 ] ) = 0 or filter = 0 ;
17449: LD_INT 3
17451: PPUSH
17452: LD_INT 81
17454: PUSH
17455: LD_INT 3
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PPUSH
17462: CALL_OW 70
17466: PUSH
17467: LD_INT 0
17469: EQUAL
17470: PUSH
17471: LD_VAR 0 4
17475: PUSH
17476: LD_INT 0
17478: EQUAL
17479: OR
17480: IFFALSE 17401
// end ;
17482: PPOPN 4
17484: END
// every 0 0$03 trigger send_attack_on_cornel_base and FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) do var i ;
17485: LD_EXP 26
17489: PUSH
17490: LD_INT 22
17492: PUSH
17493: LD_INT 4
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 30
17502: PUSH
17503: LD_INT 4
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 3
17512: PUSH
17513: LD_INT 57
17515: PUSH
17516: EMPTY
17517: LIST
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: LIST
17527: PPUSH
17528: CALL_OW 69
17532: AND
17533: IFFALSE 17582
17535: GO 17537
17537: DISABLE
17538: LD_INT 0
17540: PPUSH
// begin if not ru_cornel_attack then
17541: LD_EXP 58
17545: NOT
17546: IFFALSE 17550
// exit ;
17548: GO 17582
// for i in ru_cornel_attack do
17550: LD_ADDR_VAR 0 1
17554: PUSH
17555: LD_EXP 58
17559: PUSH
17560: FOR_IN
17561: IFFALSE 17580
// ComAgressiveMove ( i , 258 , 119 ) ;
17563: LD_VAR 0 1
17567: PPUSH
17568: LD_INT 258
17570: PPUSH
17571: LD_INT 119
17573: PPUSH
17574: CALL_OW 114
17578: GO 17560
17580: POP
17581: POP
// end ; end_of_file
17582: PPOPN 1
17584: END
// every 1 1$10 + 0 0$10 trigger jmm_on_west and not cornel_attack and crates_counter do var r ;
17585: LD_EXP 5
17589: PUSH
17590: LD_EXP 9
17594: NOT
17595: AND
17596: PUSH
17597: LD_EXP 20
17601: AND
17602: IFFALSE 17714
17604: GO 17606
17606: DISABLE
17607: LD_INT 0
17609: PPUSH
// begin enable ;
17610: ENABLE
// crates_counter := crates_counter - 50 ;
17611: LD_ADDR_EXP 20
17615: PUSH
17616: LD_EXP 20
17620: PUSH
17621: LD_INT 50
17623: MINUS
17624: ST_TO_ADDR
// CreateCratesArea ( cratesSpawnArea , Rand ( 2 , 5 ) , true ) ;
17625: LD_INT 8
17627: PPUSH
17628: LD_INT 2
17630: PPUSH
17631: LD_INT 5
17633: PPUSH
17634: CALL_OW 12
17638: PPUSH
17639: LD_INT 1
17641: PPUSH
17642: CALL_OW 55
// Wait ( Rand ( 0 0$51 , 0 0$67 ) ) ;
17646: LD_INT 1785
17648: PPUSH
17649: LD_INT 2345
17651: PPUSH
17652: CALL_OW 12
17656: PPUSH
17657: CALL_OW 67
// r := Rand ( 1 , Difficulty + 2 ) ;
17661: LD_ADDR_VAR 0 1
17665: PUSH
17666: LD_INT 1
17668: PPUSH
17669: LD_OWVAR 67
17673: PUSH
17674: LD_INT 2
17676: PLUS
17677: PPUSH
17678: CALL_OW 12
17682: ST_TO_ADDR
// if r < 3 then
17683: LD_VAR 0 1
17687: PUSH
17688: LD_INT 3
17690: LESS
17691: IFFALSE 17714
// CreateCratesArea ( westBaseSpot , Rand ( 1 , 5 ) , true ) ;
17693: LD_INT 4
17695: PPUSH
17696: LD_INT 1
17698: PPUSH
17699: LD_INT 5
17701: PPUSH
17702: CALL_OW 12
17706: PPUSH
17707: LD_INT 1
17709: PPUSH
17710: CALL_OW 55
// end ;
17714: PPOPN 1
17716: END
// every 0 0$01 trigger cornel_active do
17717: LD_EXP 8
17721: IFFALSE 17810
17723: GO 17725
17725: DISABLE
// begin Wait ( 0 0$03 ) ;
17726: LD_INT 105
17728: PPUSH
17729: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17733: LD_INT 2
17735: PPUSH
17736: LD_INT 5
17738: PPUSH
17739: CALL_OW 12
17743: PPUSH
17744: LD_INT 10
17746: PPUSH
17747: LD_INT 1
17749: PPUSH
17750: CALL_OW 55
// Wait ( 0 0$13 ) ;
17754: LD_INT 455
17756: PPUSH
17757: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17761: LD_INT 2
17763: PPUSH
17764: LD_INT 5
17766: PPUSH
17767: CALL_OW 12
17771: PPUSH
17772: LD_INT 10
17774: PPUSH
17775: LD_INT 1
17777: PPUSH
17778: CALL_OW 55
// Wait ( 0 0$16 ) ;
17782: LD_INT 560
17784: PPUSH
17785: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , cornelBaseArea , true ) ;
17789: LD_INT 2
17791: PPUSH
17792: LD_INT 5
17794: PPUSH
17795: CALL_OW 12
17799: PPUSH
17800: LD_INT 10
17802: PPUSH
17803: LD_INT 1
17805: PPUSH
17806: CALL_OW 55
// end ; end_of_file
17810: END
// every 0 0$01 trigger cornel_prepared do
17811: LD_EXP 11
17815: IFFALSE 17874
17817: GO 17819
17819: DISABLE
// begin enable ;
17820: ENABLE
// Display_Strings := [ #Am03-1 , cornel_counter ] ;
17821: LD_ADDR_OWVAR 47
17825: PUSH
17826: LD_STRING #Am03-1
17828: PUSH
17829: LD_EXP 10
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: ST_TO_ADDR
// cornel_counter := CountTime ( cornel_counter , - ) ;
17838: LD_ADDR_EXP 10
17842: PUSH
17843: LD_EXP 10
17847: PPUSH
17848: LD_STRING -
17850: PPUSH
17851: CALL 1077 0 2
17855: ST_TO_ADDR
// if cornel_counter = 0 0$00 then
17856: LD_EXP 10
17860: PUSH
17861: LD_INT 0
17863: EQUAL
17864: IFFALSE 17874
// begin Display_Strings := [ ] ;
17866: LD_ADDR_OWVAR 47
17870: PUSH
17871: EMPTY
17872: ST_TO_ADDR
// disable ;
17873: DISABLE
// end ; end ;
17874: END
// every 0 0$01 trigger debug and debug_strings do
17875: LD_EXP 1
17879: PUSH
17880: LD_OWVAR 48
17884: AND
17885: IFFALSE 17901
17887: GO 17889
17889: DISABLE
// begin enable ;
17890: ENABLE
// Display_Strings := debug_strings ;
17891: LD_ADDR_OWVAR 47
17895: PUSH
17896: LD_OWVAR 48
17900: ST_TO_ADDR
// end ; end_of_file
17901: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 1 and not solar_builded then
17902: LD_VAR 0 1
17906: PPUSH
17907: CALL_OW 255
17911: PUSH
17912: LD_INT 1
17914: EQUAL
17915: PUSH
17916: LD_EXP 14
17920: NOT
17921: AND
17922: IFFALSE 17932
// solar_builded := true ;
17924: LD_ADDR_EXP 14
17928: PUSH
17929: LD_INT 1
17931: ST_TO_ADDR
// if GetSide ( veh ) = 1 and time_to_prepare then
17932: LD_VAR 0 1
17936: PPUSH
17937: CALL_OW 255
17941: PUSH
17942: LD_INT 1
17944: EQUAL
17945: PUSH
17946: LD_EXP 29
17950: AND
17951: IFFALSE 17988
// time_to_prepare := time_to_prepare + [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ;
17953: LD_ADDR_EXP 29
17957: PUSH
17958: LD_EXP 29
17962: PUSH
17963: LD_INT 1750
17965: PUSH
17966: LD_INT 1400
17968: PUSH
17969: LD_INT 1225
17971: PUSH
17972: LD_INT 1050
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: PUSH
17981: LD_OWVAR 67
17985: ARRAY
17986: PLUS
17987: ST_TO_ADDR
// if GetSide ( veh ) = 3 then
17988: LD_VAR 0 1
17992: PPUSH
17993: CALL_OW 255
17997: PUSH
17998: LD_INT 3
18000: EQUAL
18001: IFFALSE 18019
// ru_vehicles := ru_vehicles ^ veh ;
18003: LD_ADDR_EXP 56
18007: PUSH
18008: LD_EXP 56
18012: PUSH
18013: LD_VAR 0 1
18017: ADD
18018: ST_TO_ADDR
// end ;
18019: PPOPN 2
18021: END
// on UnitDestroyed ( un ) do begin if un in ru_patrol then
18022: LD_VAR 0 1
18026: PUSH
18027: LD_EXP 53
18031: IN
18032: IFFALSE 18050
// ru_patrol := ru_patrol diff un ;
18034: LD_ADDR_EXP 53
18038: PUSH
18039: LD_EXP 53
18043: PUSH
18044: LD_VAR 0 1
18048: DIFF
18049: ST_TO_ADDR
// if un in ru_forest then
18050: LD_VAR 0 1
18054: PUSH
18055: LD_EXP 55
18059: IN
18060: IFFALSE 18078
// ru_forest := ru_forest diff un ;
18062: LD_ADDR_EXP 55
18066: PUSH
18067: LD_EXP 55
18071: PUSH
18072: LD_VAR 0 1
18076: DIFF
18077: ST_TO_ADDR
// if un in ru_vehicles then
18078: LD_VAR 0 1
18082: PUSH
18083: LD_EXP 56
18087: IN
18088: IFFALSE 18194
// begin ru_vehicles := ru_vehicles diff un ;
18090: LD_ADDR_EXP 56
18094: PUSH
18095: LD_EXP 56
18099: PUSH
18100: LD_VAR 0 1
18104: DIFF
18105: ST_TO_ADDR
// ru_produce_list := ru_produce_list ^ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
18106: LD_ADDR_EXP 57
18110: PUSH
18111: LD_EXP 57
18115: PUSH
18116: LD_VAR 0 1
18120: PPUSH
18121: CALL_OW 265
18125: PUSH
18126: LD_VAR 0 1
18130: PPUSH
18131: CALL_OW 262
18135: PUSH
18136: LD_VAR 0 1
18140: PPUSH
18141: CALL_OW 263
18145: PUSH
18146: LD_VAR 0 1
18150: PPUSH
18151: CALL_OW 264
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: ADD
18162: ST_TO_ADDR
// ach_counter := ach_counter + 1 ;
18163: LD_ADDR_EXP 13
18167: PUSH
18168: LD_EXP 13
18172: PUSH
18173: LD_INT 1
18175: PLUS
18176: ST_TO_ADDR
// if ach_counter = 10 then
18177: LD_EXP 13
18181: PUSH
18182: LD_INT 10
18184: EQUAL
18185: IFFALSE 18194
// SetAchievement ( ACH_FAUST ) ;
18187: LD_STRING ACH_FAUST
18189: PPUSH
18190: CALL_OW 543
// end ; if un = Pokryshkin then
18194: LD_VAR 0 1
18198: PUSH
18199: LD_EXP 52
18203: EQUAL
18204: IFFALSE 18213
// SetAchievement ( ACH_POKR ) ;
18206: LD_STRING ACH_POKR
18208: PPUSH
18209: CALL_OW 543
// if un = JMM then
18213: LD_VAR 0 1
18217: PUSH
18218: LD_EXP 37
18222: EQUAL
18223: IFFALSE 18232
// YouLost ( 0 ) ;
18225: LD_STRING 0
18227: PPUSH
18228: CALL_OW 104
// if un = us_dep_west then
18232: LD_VAR 0 1
18236: PUSH
18237: LD_INT 1
18239: EQUAL
18240: IFFALSE 18249
// YouLost ( 2 ) ;
18242: LD_STRING 2
18244: PPUSH
18245: CALL_OW 104
// if GetSide ( un ) = 8 and not jmm_on_west then
18249: LD_VAR 0 1
18253: PPUSH
18254: CALL_OW 255
18258: PUSH
18259: LD_INT 8
18261: EQUAL
18262: PUSH
18263: LD_EXP 5
18267: NOT
18268: AND
18269: IFFALSE 18278
// YouLost ( 4 ) ;
18271: LD_STRING 4
18273: PPUSH
18274: CALL_OW 104
// if un in jmm_units then
18278: LD_VAR 0 1
18282: PUSH
18283: LD_EXP 4
18287: IN
18288: IFFALSE 18304
// lose_counter := lose_counter + 1 ;
18290: LD_ADDR_EXP 34
18294: PUSH
18295: LD_EXP 34
18299: PUSH
18300: LD_INT 1
18302: PLUS
18303: ST_TO_ADDR
// end ;
18304: PPOPN 1
18306: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do var i , place ;
18307: LD_INT 0
18309: PPUSH
18310: PPUSH
// begin if GetSide ( driver ) = 3 then
18311: LD_VAR 0 1
18315: PPUSH
18316: CALL_OW 255
18320: PUSH
18321: LD_INT 3
18323: EQUAL
18324: IFFALSE 18402
// begin place := FindFreePlace ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ) ;
18326: LD_ADDR_VAR 0 6
18330: PUSH
18331: LD_INT 22
18333: PUSH
18334: LD_INT 3
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 30
18343: PUSH
18344: LD_INT 3
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PPUSH
18355: CALL_OW 69
18359: PPUSH
18360: CALL 1007 0 1
18364: ST_TO_ADDR
// if place then
18365: LD_VAR 0 6
18369: IFFALSE 18387
// ComEnterUnit ( driver , place ) else
18371: LD_VAR 0 1
18375: PPUSH
18376: LD_VAR 0 6
18380: PPUSH
18381: CALL_OW 120
18385: GO 18402
// ComMoveXY ( driver , 70 , 22 ) ;
18387: LD_VAR 0 1
18391: PPUSH
18392: LD_INT 70
18394: PPUSH
18395: LD_INT 22
18397: PPUSH
18398: CALL_OW 111
// end ; end ;
18402: PPOPN 6
18404: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and ( s2 = 4 or ( s2 = 8 and not jmm_on_west ) ) then
18405: LD_VAR 0 1
18409: PUSH
18410: LD_INT 1
18412: EQUAL
18413: PUSH
18414: LD_VAR 0 2
18418: PUSH
18419: LD_INT 4
18421: EQUAL
18422: PUSH
18423: LD_VAR 0 2
18427: PUSH
18428: LD_INT 8
18430: EQUAL
18431: PUSH
18432: LD_EXP 5
18436: NOT
18437: AND
18438: OR
18439: AND
18440: IFFALSE 18449
// YouLost ( 5 ) ;
18442: LD_STRING 5
18444: PPUSH
18445: CALL_OW 104
// end ;
18449: PPOPN 2
18451: END
// every 0 0$01 trigger save_counter + ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ^ FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) ) < 5 do
18452: LD_EXP 36
18456: PUSH
18457: LD_INT 22
18459: PUSH
18460: LD_INT 1
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 21
18469: PUSH
18470: LD_INT 1
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PPUSH
18481: CALL_OW 69
18485: PUSH
18486: LD_INT 22
18488: PUSH
18489: LD_INT 8
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 21
18498: PUSH
18499: LD_INT 1
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PPUSH
18510: CALL_OW 69
18514: ADD
18515: PLUS
18516: PUSH
18517: LD_INT 5
18519: LESS
18520: IFFALSE 18532
18522: GO 18524
18524: DISABLE
// YouLost ( 1 ) ;
18525: LD_STRING 1
18527: PPUSH
18528: CALL_OW 104
18532: END
// every 0 0$01 trigger GetSide ( us_dep_west ) = 3 do
18533: LD_INT 1
18535: PPUSH
18536: CALL_OW 255
18540: PUSH
18541: LD_INT 3
18543: EQUAL
18544: IFFALSE 18556
18546: GO 18548
18548: DISABLE
// YouLost ( 3 ) ; end_of_file
18549: LD_STRING 3
18551: PPUSH
18552: CALL_OW 104
18556: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18557: LD_INT 0
18559: PPUSH
// ar_miner := 81 ;
18560: LD_ADDR_EXP 69
18564: PUSH
18565: LD_INT 81
18567: ST_TO_ADDR
// ar_crane := 88 ;
18568: LD_ADDR_EXP 68
18572: PUSH
18573: LD_INT 88
18575: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18576: LD_ADDR_EXP 63
18580: PUSH
18581: LD_INT 89
18583: ST_TO_ADDR
// us_hack := 99 ;
18584: LD_ADDR_EXP 64
18588: PUSH
18589: LD_INT 99
18591: ST_TO_ADDR
// us_artillery := 97 ;
18592: LD_ADDR_EXP 65
18596: PUSH
18597: LD_INT 97
18599: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18600: LD_ADDR_EXP 66
18604: PUSH
18605: LD_INT 91
18607: ST_TO_ADDR
// ar_mortar := 92 ;
18608: LD_ADDR_EXP 67
18612: PUSH
18613: LD_INT 92
18615: ST_TO_ADDR
// ru_radar := 98 ;
18616: LD_ADDR_EXP 62
18620: PUSH
18621: LD_INT 98
18623: ST_TO_ADDR
// tech_Artillery := 80 ;
18624: LD_ADDR_EXP 70
18628: PUSH
18629: LD_INT 80
18631: ST_TO_ADDR
// tech_RadMat := 81 ;
18632: LD_ADDR_EXP 71
18636: PUSH
18637: LD_INT 81
18639: ST_TO_ADDR
// tech_BasicTools := 82 ;
18640: LD_ADDR_EXP 72
18644: PUSH
18645: LD_INT 82
18647: ST_TO_ADDR
// tech_Cargo := 83 ;
18648: LD_ADDR_EXP 73
18652: PUSH
18653: LD_INT 83
18655: ST_TO_ADDR
// tech_Track := 84 ;
18656: LD_ADDR_EXP 74
18660: PUSH
18661: LD_INT 84
18663: ST_TO_ADDR
// tech_Crane := 85 ;
18664: LD_ADDR_EXP 75
18668: PUSH
18669: LD_INT 85
18671: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18672: LD_ADDR_EXP 76
18676: PUSH
18677: LD_INT 86
18679: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18680: LD_ADDR_EXP 77
18684: PUSH
18685: LD_INT 87
18687: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18688: LD_ADDR_EXP 78
18692: PUSH
18693: LD_INT 88
18695: ST_TO_ADDR
// class_mastodont := 31 ;
18696: LD_ADDR_EXP 79
18700: PUSH
18701: LD_INT 31
18703: ST_TO_ADDR
// class_horse := 21 ;
18704: LD_ADDR_EXP 80
18708: PUSH
18709: LD_INT 21
18711: ST_TO_ADDR
// end ;
18712: LD_VAR 0 1
18716: RET
// every 1 do
18717: GO 18719
18719: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18720: CALL 18557 0 0
18724: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18725: LD_INT 0
18727: PPUSH
// if p2 = 100 then
18728: LD_VAR 0 2
18732: PUSH
18733: LD_INT 100
18735: EQUAL
18736: IFFALSE 19685
// begin if not StreamModeActive then
18738: LD_EXP 81
18742: NOT
18743: IFFALSE 18753
// StreamModeActive := true ;
18745: LD_ADDR_EXP 81
18749: PUSH
18750: LD_INT 1
18752: ST_TO_ADDR
// if p3 = 0 then
18753: LD_VAR 0 3
18757: PUSH
18758: LD_INT 0
18760: EQUAL
18761: IFFALSE 18767
// InitStreamMode ;
18763: CALL 19845 0 0
// if p3 = 1 then
18767: LD_VAR 0 3
18771: PUSH
18772: LD_INT 1
18774: EQUAL
18775: IFFALSE 18785
// sRocket := true ;
18777: LD_ADDR_EXP 86
18781: PUSH
18782: LD_INT 1
18784: ST_TO_ADDR
// if p3 = 2 then
18785: LD_VAR 0 3
18789: PUSH
18790: LD_INT 2
18792: EQUAL
18793: IFFALSE 18803
// sSpeed := true ;
18795: LD_ADDR_EXP 85
18799: PUSH
18800: LD_INT 1
18802: ST_TO_ADDR
// if p3 = 3 then
18803: LD_VAR 0 3
18807: PUSH
18808: LD_INT 3
18810: EQUAL
18811: IFFALSE 18821
// sEngine := true ;
18813: LD_ADDR_EXP 87
18817: PUSH
18818: LD_INT 1
18820: ST_TO_ADDR
// if p3 = 4 then
18821: LD_VAR 0 3
18825: PUSH
18826: LD_INT 4
18828: EQUAL
18829: IFFALSE 18839
// sSpec := true ;
18831: LD_ADDR_EXP 84
18835: PUSH
18836: LD_INT 1
18838: ST_TO_ADDR
// if p3 = 5 then
18839: LD_VAR 0 3
18843: PUSH
18844: LD_INT 5
18846: EQUAL
18847: IFFALSE 18857
// sLevel := true ;
18849: LD_ADDR_EXP 88
18853: PUSH
18854: LD_INT 1
18856: ST_TO_ADDR
// if p3 = 6 then
18857: LD_VAR 0 3
18861: PUSH
18862: LD_INT 6
18864: EQUAL
18865: IFFALSE 18875
// sArmoury := true ;
18867: LD_ADDR_EXP 89
18871: PUSH
18872: LD_INT 1
18874: ST_TO_ADDR
// if p3 = 7 then
18875: LD_VAR 0 3
18879: PUSH
18880: LD_INT 7
18882: EQUAL
18883: IFFALSE 18893
// sRadar := true ;
18885: LD_ADDR_EXP 90
18889: PUSH
18890: LD_INT 1
18892: ST_TO_ADDR
// if p3 = 8 then
18893: LD_VAR 0 3
18897: PUSH
18898: LD_INT 8
18900: EQUAL
18901: IFFALSE 18911
// sBunker := true ;
18903: LD_ADDR_EXP 91
18907: PUSH
18908: LD_INT 1
18910: ST_TO_ADDR
// if p3 = 9 then
18911: LD_VAR 0 3
18915: PUSH
18916: LD_INT 9
18918: EQUAL
18919: IFFALSE 18929
// sHack := true ;
18921: LD_ADDR_EXP 92
18925: PUSH
18926: LD_INT 1
18928: ST_TO_ADDR
// if p3 = 10 then
18929: LD_VAR 0 3
18933: PUSH
18934: LD_INT 10
18936: EQUAL
18937: IFFALSE 18947
// sFire := true ;
18939: LD_ADDR_EXP 93
18943: PUSH
18944: LD_INT 1
18946: ST_TO_ADDR
// if p3 = 11 then
18947: LD_VAR 0 3
18951: PUSH
18952: LD_INT 11
18954: EQUAL
18955: IFFALSE 18965
// sRefresh := true ;
18957: LD_ADDR_EXP 94
18961: PUSH
18962: LD_INT 1
18964: ST_TO_ADDR
// if p3 = 12 then
18965: LD_VAR 0 3
18969: PUSH
18970: LD_INT 12
18972: EQUAL
18973: IFFALSE 18983
// sExp := true ;
18975: LD_ADDR_EXP 95
18979: PUSH
18980: LD_INT 1
18982: ST_TO_ADDR
// if p3 = 13 then
18983: LD_VAR 0 3
18987: PUSH
18988: LD_INT 13
18990: EQUAL
18991: IFFALSE 19001
// sDepot := true ;
18993: LD_ADDR_EXP 96
18997: PUSH
18998: LD_INT 1
19000: ST_TO_ADDR
// if p3 = 14 then
19001: LD_VAR 0 3
19005: PUSH
19006: LD_INT 14
19008: EQUAL
19009: IFFALSE 19019
// sFlag := true ;
19011: LD_ADDR_EXP 97
19015: PUSH
19016: LD_INT 1
19018: ST_TO_ADDR
// if p3 = 15 then
19019: LD_VAR 0 3
19023: PUSH
19024: LD_INT 15
19026: EQUAL
19027: IFFALSE 19037
// sKamikadze := true ;
19029: LD_ADDR_EXP 105
19033: PUSH
19034: LD_INT 1
19036: ST_TO_ADDR
// if p3 = 16 then
19037: LD_VAR 0 3
19041: PUSH
19042: LD_INT 16
19044: EQUAL
19045: IFFALSE 19055
// sTroll := true ;
19047: LD_ADDR_EXP 106
19051: PUSH
19052: LD_INT 1
19054: ST_TO_ADDR
// if p3 = 17 then
19055: LD_VAR 0 3
19059: PUSH
19060: LD_INT 17
19062: EQUAL
19063: IFFALSE 19073
// sSlow := true ;
19065: LD_ADDR_EXP 107
19069: PUSH
19070: LD_INT 1
19072: ST_TO_ADDR
// if p3 = 18 then
19073: LD_VAR 0 3
19077: PUSH
19078: LD_INT 18
19080: EQUAL
19081: IFFALSE 19091
// sLack := true ;
19083: LD_ADDR_EXP 108
19087: PUSH
19088: LD_INT 1
19090: ST_TO_ADDR
// if p3 = 19 then
19091: LD_VAR 0 3
19095: PUSH
19096: LD_INT 19
19098: EQUAL
19099: IFFALSE 19109
// sTank := true ;
19101: LD_ADDR_EXP 110
19105: PUSH
19106: LD_INT 1
19108: ST_TO_ADDR
// if p3 = 20 then
19109: LD_VAR 0 3
19113: PUSH
19114: LD_INT 20
19116: EQUAL
19117: IFFALSE 19127
// sRemote := true ;
19119: LD_ADDR_EXP 111
19123: PUSH
19124: LD_INT 1
19126: ST_TO_ADDR
// if p3 = 21 then
19127: LD_VAR 0 3
19131: PUSH
19132: LD_INT 21
19134: EQUAL
19135: IFFALSE 19145
// sPowell := true ;
19137: LD_ADDR_EXP 112
19141: PUSH
19142: LD_INT 1
19144: ST_TO_ADDR
// if p3 = 22 then
19145: LD_VAR 0 3
19149: PUSH
19150: LD_INT 22
19152: EQUAL
19153: IFFALSE 19163
// sTeleport := true ;
19155: LD_ADDR_EXP 115
19159: PUSH
19160: LD_INT 1
19162: ST_TO_ADDR
// if p3 = 23 then
19163: LD_VAR 0 3
19167: PUSH
19168: LD_INT 23
19170: EQUAL
19171: IFFALSE 19181
// sOilTower := true ;
19173: LD_ADDR_EXP 117
19177: PUSH
19178: LD_INT 1
19180: ST_TO_ADDR
// if p3 = 24 then
19181: LD_VAR 0 3
19185: PUSH
19186: LD_INT 24
19188: EQUAL
19189: IFFALSE 19199
// sShovel := true ;
19191: LD_ADDR_EXP 118
19195: PUSH
19196: LD_INT 1
19198: ST_TO_ADDR
// if p3 = 25 then
19199: LD_VAR 0 3
19203: PUSH
19204: LD_INT 25
19206: EQUAL
19207: IFFALSE 19217
// sSheik := true ;
19209: LD_ADDR_EXP 119
19213: PUSH
19214: LD_INT 1
19216: ST_TO_ADDR
// if p3 = 26 then
19217: LD_VAR 0 3
19221: PUSH
19222: LD_INT 26
19224: EQUAL
19225: IFFALSE 19235
// sEarthquake := true ;
19227: LD_ADDR_EXP 121
19231: PUSH
19232: LD_INT 1
19234: ST_TO_ADDR
// if p3 = 27 then
19235: LD_VAR 0 3
19239: PUSH
19240: LD_INT 27
19242: EQUAL
19243: IFFALSE 19253
// sAI := true ;
19245: LD_ADDR_EXP 122
19249: PUSH
19250: LD_INT 1
19252: ST_TO_ADDR
// if p3 = 28 then
19253: LD_VAR 0 3
19257: PUSH
19258: LD_INT 28
19260: EQUAL
19261: IFFALSE 19271
// sCargo := true ;
19263: LD_ADDR_EXP 125
19267: PUSH
19268: LD_INT 1
19270: ST_TO_ADDR
// if p3 = 29 then
19271: LD_VAR 0 3
19275: PUSH
19276: LD_INT 29
19278: EQUAL
19279: IFFALSE 19289
// sDLaser := true ;
19281: LD_ADDR_EXP 126
19285: PUSH
19286: LD_INT 1
19288: ST_TO_ADDR
// if p3 = 30 then
19289: LD_VAR 0 3
19293: PUSH
19294: LD_INT 30
19296: EQUAL
19297: IFFALSE 19307
// sExchange := true ;
19299: LD_ADDR_EXP 127
19303: PUSH
19304: LD_INT 1
19306: ST_TO_ADDR
// if p3 = 31 then
19307: LD_VAR 0 3
19311: PUSH
19312: LD_INT 31
19314: EQUAL
19315: IFFALSE 19325
// sFac := true ;
19317: LD_ADDR_EXP 128
19321: PUSH
19322: LD_INT 1
19324: ST_TO_ADDR
// if p3 = 32 then
19325: LD_VAR 0 3
19329: PUSH
19330: LD_INT 32
19332: EQUAL
19333: IFFALSE 19343
// sPower := true ;
19335: LD_ADDR_EXP 129
19339: PUSH
19340: LD_INT 1
19342: ST_TO_ADDR
// if p3 = 33 then
19343: LD_VAR 0 3
19347: PUSH
19348: LD_INT 33
19350: EQUAL
19351: IFFALSE 19361
// sRandom := true ;
19353: LD_ADDR_EXP 130
19357: PUSH
19358: LD_INT 1
19360: ST_TO_ADDR
// if p3 = 34 then
19361: LD_VAR 0 3
19365: PUSH
19366: LD_INT 34
19368: EQUAL
19369: IFFALSE 19379
// sShield := true ;
19371: LD_ADDR_EXP 131
19375: PUSH
19376: LD_INT 1
19378: ST_TO_ADDR
// if p3 = 35 then
19379: LD_VAR 0 3
19383: PUSH
19384: LD_INT 35
19386: EQUAL
19387: IFFALSE 19397
// sTime := true ;
19389: LD_ADDR_EXP 132
19393: PUSH
19394: LD_INT 1
19396: ST_TO_ADDR
// if p3 = 36 then
19397: LD_VAR 0 3
19401: PUSH
19402: LD_INT 36
19404: EQUAL
19405: IFFALSE 19415
// sTools := true ;
19407: LD_ADDR_EXP 133
19411: PUSH
19412: LD_INT 1
19414: ST_TO_ADDR
// if p3 = 101 then
19415: LD_VAR 0 3
19419: PUSH
19420: LD_INT 101
19422: EQUAL
19423: IFFALSE 19433
// sSold := true ;
19425: LD_ADDR_EXP 98
19429: PUSH
19430: LD_INT 1
19432: ST_TO_ADDR
// if p3 = 102 then
19433: LD_VAR 0 3
19437: PUSH
19438: LD_INT 102
19440: EQUAL
19441: IFFALSE 19451
// sDiff := true ;
19443: LD_ADDR_EXP 99
19447: PUSH
19448: LD_INT 1
19450: ST_TO_ADDR
// if p3 = 103 then
19451: LD_VAR 0 3
19455: PUSH
19456: LD_INT 103
19458: EQUAL
19459: IFFALSE 19469
// sFog := true ;
19461: LD_ADDR_EXP 102
19465: PUSH
19466: LD_INT 1
19468: ST_TO_ADDR
// if p3 = 104 then
19469: LD_VAR 0 3
19473: PUSH
19474: LD_INT 104
19476: EQUAL
19477: IFFALSE 19487
// sReset := true ;
19479: LD_ADDR_EXP 103
19483: PUSH
19484: LD_INT 1
19486: ST_TO_ADDR
// if p3 = 105 then
19487: LD_VAR 0 3
19491: PUSH
19492: LD_INT 105
19494: EQUAL
19495: IFFALSE 19505
// sSun := true ;
19497: LD_ADDR_EXP 104
19501: PUSH
19502: LD_INT 1
19504: ST_TO_ADDR
// if p3 = 106 then
19505: LD_VAR 0 3
19509: PUSH
19510: LD_INT 106
19512: EQUAL
19513: IFFALSE 19523
// sTiger := true ;
19515: LD_ADDR_EXP 100
19519: PUSH
19520: LD_INT 1
19522: ST_TO_ADDR
// if p3 = 107 then
19523: LD_VAR 0 3
19527: PUSH
19528: LD_INT 107
19530: EQUAL
19531: IFFALSE 19541
// sBomb := true ;
19533: LD_ADDR_EXP 101
19537: PUSH
19538: LD_INT 1
19540: ST_TO_ADDR
// if p3 = 108 then
19541: LD_VAR 0 3
19545: PUSH
19546: LD_INT 108
19548: EQUAL
19549: IFFALSE 19559
// sWound := true ;
19551: LD_ADDR_EXP 109
19555: PUSH
19556: LD_INT 1
19558: ST_TO_ADDR
// if p3 = 109 then
19559: LD_VAR 0 3
19563: PUSH
19564: LD_INT 109
19566: EQUAL
19567: IFFALSE 19577
// sBetray := true ;
19569: LD_ADDR_EXP 113
19573: PUSH
19574: LD_INT 1
19576: ST_TO_ADDR
// if p3 = 110 then
19577: LD_VAR 0 3
19581: PUSH
19582: LD_INT 110
19584: EQUAL
19585: IFFALSE 19595
// sContamin := true ;
19587: LD_ADDR_EXP 114
19591: PUSH
19592: LD_INT 1
19594: ST_TO_ADDR
// if p3 = 111 then
19595: LD_VAR 0 3
19599: PUSH
19600: LD_INT 111
19602: EQUAL
19603: IFFALSE 19613
// sOil := true ;
19605: LD_ADDR_EXP 116
19609: PUSH
19610: LD_INT 1
19612: ST_TO_ADDR
// if p3 = 112 then
19613: LD_VAR 0 3
19617: PUSH
19618: LD_INT 112
19620: EQUAL
19621: IFFALSE 19631
// sStu := true ;
19623: LD_ADDR_EXP 120
19627: PUSH
19628: LD_INT 1
19630: ST_TO_ADDR
// if p3 = 113 then
19631: LD_VAR 0 3
19635: PUSH
19636: LD_INT 113
19638: EQUAL
19639: IFFALSE 19649
// sBazooka := true ;
19641: LD_ADDR_EXP 123
19645: PUSH
19646: LD_INT 1
19648: ST_TO_ADDR
// if p3 = 114 then
19649: LD_VAR 0 3
19653: PUSH
19654: LD_INT 114
19656: EQUAL
19657: IFFALSE 19667
// sMortar := true ;
19659: LD_ADDR_EXP 124
19663: PUSH
19664: LD_INT 1
19666: ST_TO_ADDR
// if p3 = 115 then
19667: LD_VAR 0 3
19671: PUSH
19672: LD_INT 115
19674: EQUAL
19675: IFFALSE 19685
// sRanger := true ;
19677: LD_ADDR_EXP 134
19681: PUSH
19682: LD_INT 1
19684: ST_TO_ADDR
// end ; if p2 = 101 then
19685: LD_VAR 0 2
19689: PUSH
19690: LD_INT 101
19692: EQUAL
19693: IFFALSE 19821
// begin case p3 of 1 :
19695: LD_VAR 0 3
19699: PUSH
19700: LD_INT 1
19702: DOUBLE
19703: EQUAL
19704: IFTRUE 19708
19706: GO 19715
19708: POP
// hHackUnlimitedResources ; 2 :
19709: CALL 30858 0 0
19713: GO 19821
19715: LD_INT 2
19717: DOUBLE
19718: EQUAL
19719: IFTRUE 19723
19721: GO 19730
19723: POP
// hHackSetLevel10 ; 3 :
19724: CALL 30991 0 0
19728: GO 19821
19730: LD_INT 3
19732: DOUBLE
19733: EQUAL
19734: IFTRUE 19738
19736: GO 19745
19738: POP
// hHackSetLevel10YourUnits ; 4 :
19739: CALL 31076 0 0
19743: GO 19821
19745: LD_INT 4
19747: DOUBLE
19748: EQUAL
19749: IFTRUE 19753
19751: GO 19760
19753: POP
// hHackInvincible ; 5 :
19754: CALL 31524 0 0
19758: GO 19821
19760: LD_INT 5
19762: DOUBLE
19763: EQUAL
19764: IFTRUE 19768
19766: GO 19775
19768: POP
// hHackInvisible ; 6 :
19769: CALL 31635 0 0
19773: GO 19821
19775: LD_INT 6
19777: DOUBLE
19778: EQUAL
19779: IFTRUE 19783
19781: GO 19790
19783: POP
// hHackChangeYourSide ; 7 :
19784: CALL 31692 0 0
19788: GO 19821
19790: LD_INT 7
19792: DOUBLE
19793: EQUAL
19794: IFTRUE 19798
19796: GO 19805
19798: POP
// hHackChangeUnitSide ; 8 :
19799: CALL 31734 0 0
19803: GO 19821
19805: LD_INT 8
19807: DOUBLE
19808: EQUAL
19809: IFTRUE 19813
19811: GO 19820
19813: POP
// hHackFog ; end ;
19814: CALL 31835 0 0
19818: GO 19821
19820: POP
// end ; end ;
19821: LD_VAR 0 7
19825: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19826: GO 19828
19828: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19829: LD_STRING initStreamRollete();
19831: PPUSH
19832: CALL_OW 559
// InitStreamMode ;
19836: CALL 19845 0 0
// DefineStreamItems ( ) ;
19840: CALL 20285 0 0
// end ;
19844: END
// function InitStreamMode ; begin
19845: LD_INT 0
19847: PPUSH
// streamModeActive := false ;
19848: LD_ADDR_EXP 81
19852: PUSH
19853: LD_INT 0
19855: ST_TO_ADDR
// normalCounter := 36 ;
19856: LD_ADDR_EXP 82
19860: PUSH
19861: LD_INT 36
19863: ST_TO_ADDR
// hardcoreCounter := 16 ;
19864: LD_ADDR_EXP 83
19868: PUSH
19869: LD_INT 16
19871: ST_TO_ADDR
// sRocket := false ;
19872: LD_ADDR_EXP 86
19876: PUSH
19877: LD_INT 0
19879: ST_TO_ADDR
// sSpeed := false ;
19880: LD_ADDR_EXP 85
19884: PUSH
19885: LD_INT 0
19887: ST_TO_ADDR
// sEngine := false ;
19888: LD_ADDR_EXP 87
19892: PUSH
19893: LD_INT 0
19895: ST_TO_ADDR
// sSpec := false ;
19896: LD_ADDR_EXP 84
19900: PUSH
19901: LD_INT 0
19903: ST_TO_ADDR
// sLevel := false ;
19904: LD_ADDR_EXP 88
19908: PUSH
19909: LD_INT 0
19911: ST_TO_ADDR
// sArmoury := false ;
19912: LD_ADDR_EXP 89
19916: PUSH
19917: LD_INT 0
19919: ST_TO_ADDR
// sRadar := false ;
19920: LD_ADDR_EXP 90
19924: PUSH
19925: LD_INT 0
19927: ST_TO_ADDR
// sBunker := false ;
19928: LD_ADDR_EXP 91
19932: PUSH
19933: LD_INT 0
19935: ST_TO_ADDR
// sHack := false ;
19936: LD_ADDR_EXP 92
19940: PUSH
19941: LD_INT 0
19943: ST_TO_ADDR
// sFire := false ;
19944: LD_ADDR_EXP 93
19948: PUSH
19949: LD_INT 0
19951: ST_TO_ADDR
// sRefresh := false ;
19952: LD_ADDR_EXP 94
19956: PUSH
19957: LD_INT 0
19959: ST_TO_ADDR
// sExp := false ;
19960: LD_ADDR_EXP 95
19964: PUSH
19965: LD_INT 0
19967: ST_TO_ADDR
// sDepot := false ;
19968: LD_ADDR_EXP 96
19972: PUSH
19973: LD_INT 0
19975: ST_TO_ADDR
// sFlag := false ;
19976: LD_ADDR_EXP 97
19980: PUSH
19981: LD_INT 0
19983: ST_TO_ADDR
// sKamikadze := false ;
19984: LD_ADDR_EXP 105
19988: PUSH
19989: LD_INT 0
19991: ST_TO_ADDR
// sTroll := false ;
19992: LD_ADDR_EXP 106
19996: PUSH
19997: LD_INT 0
19999: ST_TO_ADDR
// sSlow := false ;
20000: LD_ADDR_EXP 107
20004: PUSH
20005: LD_INT 0
20007: ST_TO_ADDR
// sLack := false ;
20008: LD_ADDR_EXP 108
20012: PUSH
20013: LD_INT 0
20015: ST_TO_ADDR
// sTank := false ;
20016: LD_ADDR_EXP 110
20020: PUSH
20021: LD_INT 0
20023: ST_TO_ADDR
// sRemote := false ;
20024: LD_ADDR_EXP 111
20028: PUSH
20029: LD_INT 0
20031: ST_TO_ADDR
// sPowell := false ;
20032: LD_ADDR_EXP 112
20036: PUSH
20037: LD_INT 0
20039: ST_TO_ADDR
// sTeleport := false ;
20040: LD_ADDR_EXP 115
20044: PUSH
20045: LD_INT 0
20047: ST_TO_ADDR
// sOilTower := false ;
20048: LD_ADDR_EXP 117
20052: PUSH
20053: LD_INT 0
20055: ST_TO_ADDR
// sShovel := false ;
20056: LD_ADDR_EXP 118
20060: PUSH
20061: LD_INT 0
20063: ST_TO_ADDR
// sSheik := false ;
20064: LD_ADDR_EXP 119
20068: PUSH
20069: LD_INT 0
20071: ST_TO_ADDR
// sEarthquake := false ;
20072: LD_ADDR_EXP 121
20076: PUSH
20077: LD_INT 0
20079: ST_TO_ADDR
// sAI := false ;
20080: LD_ADDR_EXP 122
20084: PUSH
20085: LD_INT 0
20087: ST_TO_ADDR
// sCargo := false ;
20088: LD_ADDR_EXP 125
20092: PUSH
20093: LD_INT 0
20095: ST_TO_ADDR
// sDLaser := false ;
20096: LD_ADDR_EXP 126
20100: PUSH
20101: LD_INT 0
20103: ST_TO_ADDR
// sExchange := false ;
20104: LD_ADDR_EXP 127
20108: PUSH
20109: LD_INT 0
20111: ST_TO_ADDR
// sFac := false ;
20112: LD_ADDR_EXP 128
20116: PUSH
20117: LD_INT 0
20119: ST_TO_ADDR
// sPower := false ;
20120: LD_ADDR_EXP 129
20124: PUSH
20125: LD_INT 0
20127: ST_TO_ADDR
// sRandom := false ;
20128: LD_ADDR_EXP 130
20132: PUSH
20133: LD_INT 0
20135: ST_TO_ADDR
// sShield := false ;
20136: LD_ADDR_EXP 131
20140: PUSH
20141: LD_INT 0
20143: ST_TO_ADDR
// sTime := false ;
20144: LD_ADDR_EXP 132
20148: PUSH
20149: LD_INT 0
20151: ST_TO_ADDR
// sTools := false ;
20152: LD_ADDR_EXP 133
20156: PUSH
20157: LD_INT 0
20159: ST_TO_ADDR
// sSold := false ;
20160: LD_ADDR_EXP 98
20164: PUSH
20165: LD_INT 0
20167: ST_TO_ADDR
// sDiff := false ;
20168: LD_ADDR_EXP 99
20172: PUSH
20173: LD_INT 0
20175: ST_TO_ADDR
// sFog := false ;
20176: LD_ADDR_EXP 102
20180: PUSH
20181: LD_INT 0
20183: ST_TO_ADDR
// sReset := false ;
20184: LD_ADDR_EXP 103
20188: PUSH
20189: LD_INT 0
20191: ST_TO_ADDR
// sSun := false ;
20192: LD_ADDR_EXP 104
20196: PUSH
20197: LD_INT 0
20199: ST_TO_ADDR
// sTiger := false ;
20200: LD_ADDR_EXP 100
20204: PUSH
20205: LD_INT 0
20207: ST_TO_ADDR
// sBomb := false ;
20208: LD_ADDR_EXP 101
20212: PUSH
20213: LD_INT 0
20215: ST_TO_ADDR
// sWound := false ;
20216: LD_ADDR_EXP 109
20220: PUSH
20221: LD_INT 0
20223: ST_TO_ADDR
// sBetray := false ;
20224: LD_ADDR_EXP 113
20228: PUSH
20229: LD_INT 0
20231: ST_TO_ADDR
// sContamin := false ;
20232: LD_ADDR_EXP 114
20236: PUSH
20237: LD_INT 0
20239: ST_TO_ADDR
// sOil := false ;
20240: LD_ADDR_EXP 116
20244: PUSH
20245: LD_INT 0
20247: ST_TO_ADDR
// sStu := false ;
20248: LD_ADDR_EXP 120
20252: PUSH
20253: LD_INT 0
20255: ST_TO_ADDR
// sBazooka := false ;
20256: LD_ADDR_EXP 123
20260: PUSH
20261: LD_INT 0
20263: ST_TO_ADDR
// sMortar := false ;
20264: LD_ADDR_EXP 124
20268: PUSH
20269: LD_INT 0
20271: ST_TO_ADDR
// sRanger := false ;
20272: LD_ADDR_EXP 134
20276: PUSH
20277: LD_INT 0
20279: ST_TO_ADDR
// end ;
20280: LD_VAR 0 1
20284: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20285: LD_INT 0
20287: PPUSH
20288: PPUSH
20289: PPUSH
20290: PPUSH
20291: PPUSH
// result := [ ] ;
20292: LD_ADDR_VAR 0 1
20296: PUSH
20297: EMPTY
20298: ST_TO_ADDR
// if campaign_id = 1 then
20299: LD_OWVAR 69
20303: PUSH
20304: LD_INT 1
20306: EQUAL
20307: IFFALSE 23245
// begin case mission_number of 1 :
20309: LD_OWVAR 70
20313: PUSH
20314: LD_INT 1
20316: DOUBLE
20317: EQUAL
20318: IFTRUE 20322
20320: GO 20386
20322: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20323: LD_ADDR_VAR 0 1
20327: PUSH
20328: LD_INT 2
20330: PUSH
20331: LD_INT 4
20333: PUSH
20334: LD_INT 11
20336: PUSH
20337: LD_INT 12
20339: PUSH
20340: LD_INT 15
20342: PUSH
20343: LD_INT 16
20345: PUSH
20346: LD_INT 22
20348: PUSH
20349: LD_INT 23
20351: PUSH
20352: LD_INT 26
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 101
20368: PUSH
20369: LD_INT 102
20371: PUSH
20372: LD_INT 106
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: LIST
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: ST_TO_ADDR
20384: GO 23243
20386: LD_INT 2
20388: DOUBLE
20389: EQUAL
20390: IFTRUE 20394
20392: GO 20466
20394: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20395: LD_ADDR_VAR 0 1
20399: PUSH
20400: LD_INT 2
20402: PUSH
20403: LD_INT 4
20405: PUSH
20406: LD_INT 11
20408: PUSH
20409: LD_INT 12
20411: PUSH
20412: LD_INT 15
20414: PUSH
20415: LD_INT 16
20417: PUSH
20418: LD_INT 22
20420: PUSH
20421: LD_INT 23
20423: PUSH
20424: LD_INT 26
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 101
20440: PUSH
20441: LD_INT 102
20443: PUSH
20444: LD_INT 105
20446: PUSH
20447: LD_INT 106
20449: PUSH
20450: LD_INT 108
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: ST_TO_ADDR
20464: GO 23243
20466: LD_INT 3
20468: DOUBLE
20469: EQUAL
20470: IFTRUE 20474
20472: GO 20550
20474: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20475: LD_ADDR_VAR 0 1
20479: PUSH
20480: LD_INT 2
20482: PUSH
20483: LD_INT 4
20485: PUSH
20486: LD_INT 5
20488: PUSH
20489: LD_INT 11
20491: PUSH
20492: LD_INT 12
20494: PUSH
20495: LD_INT 15
20497: PUSH
20498: LD_INT 16
20500: PUSH
20501: LD_INT 22
20503: PUSH
20504: LD_INT 26
20506: PUSH
20507: LD_INT 36
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 101
20524: PUSH
20525: LD_INT 102
20527: PUSH
20528: LD_INT 105
20530: PUSH
20531: LD_INT 106
20533: PUSH
20534: LD_INT 108
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: ST_TO_ADDR
20548: GO 23243
20550: LD_INT 4
20552: DOUBLE
20553: EQUAL
20554: IFTRUE 20558
20556: GO 20642
20558: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20559: LD_ADDR_VAR 0 1
20563: PUSH
20564: LD_INT 2
20566: PUSH
20567: LD_INT 4
20569: PUSH
20570: LD_INT 5
20572: PUSH
20573: LD_INT 8
20575: PUSH
20576: LD_INT 11
20578: PUSH
20579: LD_INT 12
20581: PUSH
20582: LD_INT 15
20584: PUSH
20585: LD_INT 16
20587: PUSH
20588: LD_INT 22
20590: PUSH
20591: LD_INT 23
20593: PUSH
20594: LD_INT 26
20596: PUSH
20597: LD_INT 36
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 101
20616: PUSH
20617: LD_INT 102
20619: PUSH
20620: LD_INT 105
20622: PUSH
20623: LD_INT 106
20625: PUSH
20626: LD_INT 108
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: ST_TO_ADDR
20640: GO 23243
20642: LD_INT 5
20644: DOUBLE
20645: EQUAL
20646: IFTRUE 20650
20648: GO 20750
20650: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20651: LD_ADDR_VAR 0 1
20655: PUSH
20656: LD_INT 2
20658: PUSH
20659: LD_INT 4
20661: PUSH
20662: LD_INT 5
20664: PUSH
20665: LD_INT 6
20667: PUSH
20668: LD_INT 8
20670: PUSH
20671: LD_INT 11
20673: PUSH
20674: LD_INT 12
20676: PUSH
20677: LD_INT 15
20679: PUSH
20680: LD_INT 16
20682: PUSH
20683: LD_INT 22
20685: PUSH
20686: LD_INT 23
20688: PUSH
20689: LD_INT 25
20691: PUSH
20692: LD_INT 26
20694: PUSH
20695: LD_INT 36
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 101
20716: PUSH
20717: LD_INT 102
20719: PUSH
20720: LD_INT 105
20722: PUSH
20723: LD_INT 106
20725: PUSH
20726: LD_INT 108
20728: PUSH
20729: LD_INT 109
20731: PUSH
20732: LD_INT 112
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: ST_TO_ADDR
20748: GO 23243
20750: LD_INT 6
20752: DOUBLE
20753: EQUAL
20754: IFTRUE 20758
20756: GO 20878
20758: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20759: LD_ADDR_VAR 0 1
20763: PUSH
20764: LD_INT 2
20766: PUSH
20767: LD_INT 4
20769: PUSH
20770: LD_INT 5
20772: PUSH
20773: LD_INT 6
20775: PUSH
20776: LD_INT 8
20778: PUSH
20779: LD_INT 11
20781: PUSH
20782: LD_INT 12
20784: PUSH
20785: LD_INT 15
20787: PUSH
20788: LD_INT 16
20790: PUSH
20791: LD_INT 20
20793: PUSH
20794: LD_INT 21
20796: PUSH
20797: LD_INT 22
20799: PUSH
20800: LD_INT 23
20802: PUSH
20803: LD_INT 25
20805: PUSH
20806: LD_INT 26
20808: PUSH
20809: LD_INT 30
20811: PUSH
20812: LD_INT 31
20814: PUSH
20815: LD_INT 32
20817: PUSH
20818: LD_INT 36
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 101
20844: PUSH
20845: LD_INT 102
20847: PUSH
20848: LD_INT 105
20850: PUSH
20851: LD_INT 106
20853: PUSH
20854: LD_INT 108
20856: PUSH
20857: LD_INT 109
20859: PUSH
20860: LD_INT 112
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: ST_TO_ADDR
20876: GO 23243
20878: LD_INT 7
20880: DOUBLE
20881: EQUAL
20882: IFTRUE 20886
20884: GO 20986
20886: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20887: LD_ADDR_VAR 0 1
20891: PUSH
20892: LD_INT 2
20894: PUSH
20895: LD_INT 4
20897: PUSH
20898: LD_INT 5
20900: PUSH
20901: LD_INT 7
20903: PUSH
20904: LD_INT 11
20906: PUSH
20907: LD_INT 12
20909: PUSH
20910: LD_INT 15
20912: PUSH
20913: LD_INT 16
20915: PUSH
20916: LD_INT 20
20918: PUSH
20919: LD_INT 21
20921: PUSH
20922: LD_INT 22
20924: PUSH
20925: LD_INT 23
20927: PUSH
20928: LD_INT 25
20930: PUSH
20931: LD_INT 26
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 101
20952: PUSH
20953: LD_INT 102
20955: PUSH
20956: LD_INT 103
20958: PUSH
20959: LD_INT 105
20961: PUSH
20962: LD_INT 106
20964: PUSH
20965: LD_INT 108
20967: PUSH
20968: LD_INT 112
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: ST_TO_ADDR
20984: GO 23243
20986: LD_INT 8
20988: DOUBLE
20989: EQUAL
20990: IFTRUE 20994
20992: GO 21122
20994: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20995: LD_ADDR_VAR 0 1
20999: PUSH
21000: LD_INT 2
21002: PUSH
21003: LD_INT 4
21005: PUSH
21006: LD_INT 5
21008: PUSH
21009: LD_INT 6
21011: PUSH
21012: LD_INT 7
21014: PUSH
21015: LD_INT 8
21017: PUSH
21018: LD_INT 11
21020: PUSH
21021: LD_INT 12
21023: PUSH
21024: LD_INT 15
21026: PUSH
21027: LD_INT 16
21029: PUSH
21030: LD_INT 20
21032: PUSH
21033: LD_INT 21
21035: PUSH
21036: LD_INT 22
21038: PUSH
21039: LD_INT 23
21041: PUSH
21042: LD_INT 25
21044: PUSH
21045: LD_INT 26
21047: PUSH
21048: LD_INT 30
21050: PUSH
21051: LD_INT 31
21053: PUSH
21054: LD_INT 32
21056: PUSH
21057: LD_INT 36
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 101
21084: PUSH
21085: LD_INT 102
21087: PUSH
21088: LD_INT 103
21090: PUSH
21091: LD_INT 105
21093: PUSH
21094: LD_INT 106
21096: PUSH
21097: LD_INT 108
21099: PUSH
21100: LD_INT 109
21102: PUSH
21103: LD_INT 112
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: ST_TO_ADDR
21120: GO 23243
21122: LD_INT 9
21124: DOUBLE
21125: EQUAL
21126: IFTRUE 21130
21128: GO 21266
21130: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21131: LD_ADDR_VAR 0 1
21135: PUSH
21136: LD_INT 2
21138: PUSH
21139: LD_INT 4
21141: PUSH
21142: LD_INT 5
21144: PUSH
21145: LD_INT 6
21147: PUSH
21148: LD_INT 7
21150: PUSH
21151: LD_INT 8
21153: PUSH
21154: LD_INT 11
21156: PUSH
21157: LD_INT 12
21159: PUSH
21160: LD_INT 15
21162: PUSH
21163: LD_INT 16
21165: PUSH
21166: LD_INT 20
21168: PUSH
21169: LD_INT 21
21171: PUSH
21172: LD_INT 22
21174: PUSH
21175: LD_INT 23
21177: PUSH
21178: LD_INT 25
21180: PUSH
21181: LD_INT 26
21183: PUSH
21184: LD_INT 28
21186: PUSH
21187: LD_INT 30
21189: PUSH
21190: LD_INT 31
21192: PUSH
21193: LD_INT 32
21195: PUSH
21196: LD_INT 36
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 101
21224: PUSH
21225: LD_INT 102
21227: PUSH
21228: LD_INT 103
21230: PUSH
21231: LD_INT 105
21233: PUSH
21234: LD_INT 106
21236: PUSH
21237: LD_INT 108
21239: PUSH
21240: LD_INT 109
21242: PUSH
21243: LD_INT 112
21245: PUSH
21246: LD_INT 114
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: ST_TO_ADDR
21264: GO 23243
21266: LD_INT 10
21268: DOUBLE
21269: EQUAL
21270: IFTRUE 21274
21272: GO 21458
21274: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21275: LD_ADDR_VAR 0 1
21279: PUSH
21280: LD_INT 2
21282: PUSH
21283: LD_INT 4
21285: PUSH
21286: LD_INT 5
21288: PUSH
21289: LD_INT 6
21291: PUSH
21292: LD_INT 7
21294: PUSH
21295: LD_INT 8
21297: PUSH
21298: LD_INT 9
21300: PUSH
21301: LD_INT 10
21303: PUSH
21304: LD_INT 11
21306: PUSH
21307: LD_INT 12
21309: PUSH
21310: LD_INT 13
21312: PUSH
21313: LD_INT 14
21315: PUSH
21316: LD_INT 15
21318: PUSH
21319: LD_INT 16
21321: PUSH
21322: LD_INT 17
21324: PUSH
21325: LD_INT 18
21327: PUSH
21328: LD_INT 19
21330: PUSH
21331: LD_INT 20
21333: PUSH
21334: LD_INT 21
21336: PUSH
21337: LD_INT 22
21339: PUSH
21340: LD_INT 23
21342: PUSH
21343: LD_INT 24
21345: PUSH
21346: LD_INT 25
21348: PUSH
21349: LD_INT 26
21351: PUSH
21352: LD_INT 28
21354: PUSH
21355: LD_INT 30
21357: PUSH
21358: LD_INT 31
21360: PUSH
21361: LD_INT 32
21363: PUSH
21364: LD_INT 36
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 101
21400: PUSH
21401: LD_INT 102
21403: PUSH
21404: LD_INT 103
21406: PUSH
21407: LD_INT 104
21409: PUSH
21410: LD_INT 105
21412: PUSH
21413: LD_INT 106
21415: PUSH
21416: LD_INT 107
21418: PUSH
21419: LD_INT 108
21421: PUSH
21422: LD_INT 109
21424: PUSH
21425: LD_INT 110
21427: PUSH
21428: LD_INT 111
21430: PUSH
21431: LD_INT 112
21433: PUSH
21434: LD_INT 114
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: ST_TO_ADDR
21456: GO 23243
21458: LD_INT 11
21460: DOUBLE
21461: EQUAL
21462: IFTRUE 21466
21464: GO 21658
21466: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21467: LD_ADDR_VAR 0 1
21471: PUSH
21472: LD_INT 2
21474: PUSH
21475: LD_INT 3
21477: PUSH
21478: LD_INT 4
21480: PUSH
21481: LD_INT 5
21483: PUSH
21484: LD_INT 6
21486: PUSH
21487: LD_INT 7
21489: PUSH
21490: LD_INT 8
21492: PUSH
21493: LD_INT 9
21495: PUSH
21496: LD_INT 10
21498: PUSH
21499: LD_INT 11
21501: PUSH
21502: LD_INT 12
21504: PUSH
21505: LD_INT 13
21507: PUSH
21508: LD_INT 14
21510: PUSH
21511: LD_INT 15
21513: PUSH
21514: LD_INT 16
21516: PUSH
21517: LD_INT 17
21519: PUSH
21520: LD_INT 18
21522: PUSH
21523: LD_INT 19
21525: PUSH
21526: LD_INT 20
21528: PUSH
21529: LD_INT 21
21531: PUSH
21532: LD_INT 22
21534: PUSH
21535: LD_INT 23
21537: PUSH
21538: LD_INT 24
21540: PUSH
21541: LD_INT 25
21543: PUSH
21544: LD_INT 26
21546: PUSH
21547: LD_INT 28
21549: PUSH
21550: LD_INT 30
21552: PUSH
21553: LD_INT 31
21555: PUSH
21556: LD_INT 32
21558: PUSH
21559: LD_INT 34
21561: PUSH
21562: LD_INT 36
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 101
21600: PUSH
21601: LD_INT 102
21603: PUSH
21604: LD_INT 103
21606: PUSH
21607: LD_INT 104
21609: PUSH
21610: LD_INT 105
21612: PUSH
21613: LD_INT 106
21615: PUSH
21616: LD_INT 107
21618: PUSH
21619: LD_INT 108
21621: PUSH
21622: LD_INT 109
21624: PUSH
21625: LD_INT 110
21627: PUSH
21628: LD_INT 111
21630: PUSH
21631: LD_INT 112
21633: PUSH
21634: LD_INT 114
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: ST_TO_ADDR
21656: GO 23243
21658: LD_INT 12
21660: DOUBLE
21661: EQUAL
21662: IFTRUE 21666
21664: GO 21874
21666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21667: LD_ADDR_VAR 0 1
21671: PUSH
21672: LD_INT 1
21674: PUSH
21675: LD_INT 2
21677: PUSH
21678: LD_INT 3
21680: PUSH
21681: LD_INT 4
21683: PUSH
21684: LD_INT 5
21686: PUSH
21687: LD_INT 6
21689: PUSH
21690: LD_INT 7
21692: PUSH
21693: LD_INT 8
21695: PUSH
21696: LD_INT 9
21698: PUSH
21699: LD_INT 10
21701: PUSH
21702: LD_INT 11
21704: PUSH
21705: LD_INT 12
21707: PUSH
21708: LD_INT 13
21710: PUSH
21711: LD_INT 14
21713: PUSH
21714: LD_INT 15
21716: PUSH
21717: LD_INT 16
21719: PUSH
21720: LD_INT 17
21722: PUSH
21723: LD_INT 18
21725: PUSH
21726: LD_INT 19
21728: PUSH
21729: LD_INT 20
21731: PUSH
21732: LD_INT 21
21734: PUSH
21735: LD_INT 22
21737: PUSH
21738: LD_INT 23
21740: PUSH
21741: LD_INT 24
21743: PUSH
21744: LD_INT 25
21746: PUSH
21747: LD_INT 26
21749: PUSH
21750: LD_INT 27
21752: PUSH
21753: LD_INT 28
21755: PUSH
21756: LD_INT 30
21758: PUSH
21759: LD_INT 31
21761: PUSH
21762: LD_INT 32
21764: PUSH
21765: LD_INT 33
21767: PUSH
21768: LD_INT 34
21770: PUSH
21771: LD_INT 36
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 101
21812: PUSH
21813: LD_INT 102
21815: PUSH
21816: LD_INT 103
21818: PUSH
21819: LD_INT 104
21821: PUSH
21822: LD_INT 105
21824: PUSH
21825: LD_INT 106
21827: PUSH
21828: LD_INT 107
21830: PUSH
21831: LD_INT 108
21833: PUSH
21834: LD_INT 109
21836: PUSH
21837: LD_INT 110
21839: PUSH
21840: LD_INT 111
21842: PUSH
21843: LD_INT 112
21845: PUSH
21846: LD_INT 113
21848: PUSH
21849: LD_INT 114
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: ST_TO_ADDR
21872: GO 23243
21874: LD_INT 13
21876: DOUBLE
21877: EQUAL
21878: IFTRUE 21882
21880: GO 22078
21882: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21883: LD_ADDR_VAR 0 1
21887: PUSH
21888: LD_INT 1
21890: PUSH
21891: LD_INT 2
21893: PUSH
21894: LD_INT 3
21896: PUSH
21897: LD_INT 4
21899: PUSH
21900: LD_INT 5
21902: PUSH
21903: LD_INT 8
21905: PUSH
21906: LD_INT 9
21908: PUSH
21909: LD_INT 10
21911: PUSH
21912: LD_INT 11
21914: PUSH
21915: LD_INT 12
21917: PUSH
21918: LD_INT 14
21920: PUSH
21921: LD_INT 15
21923: PUSH
21924: LD_INT 16
21926: PUSH
21927: LD_INT 17
21929: PUSH
21930: LD_INT 18
21932: PUSH
21933: LD_INT 19
21935: PUSH
21936: LD_INT 20
21938: PUSH
21939: LD_INT 21
21941: PUSH
21942: LD_INT 22
21944: PUSH
21945: LD_INT 23
21947: PUSH
21948: LD_INT 24
21950: PUSH
21951: LD_INT 25
21953: PUSH
21954: LD_INT 26
21956: PUSH
21957: LD_INT 27
21959: PUSH
21960: LD_INT 28
21962: PUSH
21963: LD_INT 30
21965: PUSH
21966: LD_INT 31
21968: PUSH
21969: LD_INT 32
21971: PUSH
21972: LD_INT 33
21974: PUSH
21975: LD_INT 34
21977: PUSH
21978: LD_INT 36
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: PUSH
22014: LD_INT 101
22016: PUSH
22017: LD_INT 102
22019: PUSH
22020: LD_INT 103
22022: PUSH
22023: LD_INT 104
22025: PUSH
22026: LD_INT 105
22028: PUSH
22029: LD_INT 106
22031: PUSH
22032: LD_INT 107
22034: PUSH
22035: LD_INT 108
22037: PUSH
22038: LD_INT 109
22040: PUSH
22041: LD_INT 110
22043: PUSH
22044: LD_INT 111
22046: PUSH
22047: LD_INT 112
22049: PUSH
22050: LD_INT 113
22052: PUSH
22053: LD_INT 114
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: ST_TO_ADDR
22076: GO 23243
22078: LD_INT 14
22080: DOUBLE
22081: EQUAL
22082: IFTRUE 22086
22084: GO 22298
22086: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22087: LD_ADDR_VAR 0 1
22091: PUSH
22092: LD_INT 1
22094: PUSH
22095: LD_INT 2
22097: PUSH
22098: LD_INT 3
22100: PUSH
22101: LD_INT 4
22103: PUSH
22104: LD_INT 5
22106: PUSH
22107: LD_INT 6
22109: PUSH
22110: LD_INT 7
22112: PUSH
22113: LD_INT 8
22115: PUSH
22116: LD_INT 9
22118: PUSH
22119: LD_INT 10
22121: PUSH
22122: LD_INT 11
22124: PUSH
22125: LD_INT 12
22127: PUSH
22128: LD_INT 13
22130: PUSH
22131: LD_INT 14
22133: PUSH
22134: LD_INT 15
22136: PUSH
22137: LD_INT 16
22139: PUSH
22140: LD_INT 17
22142: PUSH
22143: LD_INT 18
22145: PUSH
22146: LD_INT 19
22148: PUSH
22149: LD_INT 20
22151: PUSH
22152: LD_INT 21
22154: PUSH
22155: LD_INT 22
22157: PUSH
22158: LD_INT 23
22160: PUSH
22161: LD_INT 24
22163: PUSH
22164: LD_INT 25
22166: PUSH
22167: LD_INT 26
22169: PUSH
22170: LD_INT 27
22172: PUSH
22173: LD_INT 28
22175: PUSH
22176: LD_INT 29
22178: PUSH
22179: LD_INT 30
22181: PUSH
22182: LD_INT 31
22184: PUSH
22185: LD_INT 32
22187: PUSH
22188: LD_INT 33
22190: PUSH
22191: LD_INT 34
22193: PUSH
22194: LD_INT 36
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 101
22236: PUSH
22237: LD_INT 102
22239: PUSH
22240: LD_INT 103
22242: PUSH
22243: LD_INT 104
22245: PUSH
22246: LD_INT 105
22248: PUSH
22249: LD_INT 106
22251: PUSH
22252: LD_INT 107
22254: PUSH
22255: LD_INT 108
22257: PUSH
22258: LD_INT 109
22260: PUSH
22261: LD_INT 110
22263: PUSH
22264: LD_INT 111
22266: PUSH
22267: LD_INT 112
22269: PUSH
22270: LD_INT 113
22272: PUSH
22273: LD_INT 114
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: ST_TO_ADDR
22296: GO 23243
22298: LD_INT 15
22300: DOUBLE
22301: EQUAL
22302: IFTRUE 22306
22304: GO 22518
22306: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22307: LD_ADDR_VAR 0 1
22311: PUSH
22312: LD_INT 1
22314: PUSH
22315: LD_INT 2
22317: PUSH
22318: LD_INT 3
22320: PUSH
22321: LD_INT 4
22323: PUSH
22324: LD_INT 5
22326: PUSH
22327: LD_INT 6
22329: PUSH
22330: LD_INT 7
22332: PUSH
22333: LD_INT 8
22335: PUSH
22336: LD_INT 9
22338: PUSH
22339: LD_INT 10
22341: PUSH
22342: LD_INT 11
22344: PUSH
22345: LD_INT 12
22347: PUSH
22348: LD_INT 13
22350: PUSH
22351: LD_INT 14
22353: PUSH
22354: LD_INT 15
22356: PUSH
22357: LD_INT 16
22359: PUSH
22360: LD_INT 17
22362: PUSH
22363: LD_INT 18
22365: PUSH
22366: LD_INT 19
22368: PUSH
22369: LD_INT 20
22371: PUSH
22372: LD_INT 21
22374: PUSH
22375: LD_INT 22
22377: PUSH
22378: LD_INT 23
22380: PUSH
22381: LD_INT 24
22383: PUSH
22384: LD_INT 25
22386: PUSH
22387: LD_INT 26
22389: PUSH
22390: LD_INT 27
22392: PUSH
22393: LD_INT 28
22395: PUSH
22396: LD_INT 29
22398: PUSH
22399: LD_INT 30
22401: PUSH
22402: LD_INT 31
22404: PUSH
22405: LD_INT 32
22407: PUSH
22408: LD_INT 33
22410: PUSH
22411: LD_INT 34
22413: PUSH
22414: LD_INT 36
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 101
22456: PUSH
22457: LD_INT 102
22459: PUSH
22460: LD_INT 103
22462: PUSH
22463: LD_INT 104
22465: PUSH
22466: LD_INT 105
22468: PUSH
22469: LD_INT 106
22471: PUSH
22472: LD_INT 107
22474: PUSH
22475: LD_INT 108
22477: PUSH
22478: LD_INT 109
22480: PUSH
22481: LD_INT 110
22483: PUSH
22484: LD_INT 111
22486: PUSH
22487: LD_INT 112
22489: PUSH
22490: LD_INT 113
22492: PUSH
22493: LD_INT 114
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: ST_TO_ADDR
22516: GO 23243
22518: LD_INT 16
22520: DOUBLE
22521: EQUAL
22522: IFTRUE 22526
22524: GO 22650
22526: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22527: LD_ADDR_VAR 0 1
22531: PUSH
22532: LD_INT 2
22534: PUSH
22535: LD_INT 4
22537: PUSH
22538: LD_INT 5
22540: PUSH
22541: LD_INT 7
22543: PUSH
22544: LD_INT 11
22546: PUSH
22547: LD_INT 12
22549: PUSH
22550: LD_INT 15
22552: PUSH
22553: LD_INT 16
22555: PUSH
22556: LD_INT 20
22558: PUSH
22559: LD_INT 21
22561: PUSH
22562: LD_INT 22
22564: PUSH
22565: LD_INT 23
22567: PUSH
22568: LD_INT 25
22570: PUSH
22571: LD_INT 26
22573: PUSH
22574: LD_INT 30
22576: PUSH
22577: LD_INT 31
22579: PUSH
22580: LD_INT 32
22582: PUSH
22583: LD_INT 33
22585: PUSH
22586: LD_INT 34
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 101
22612: PUSH
22613: LD_INT 102
22615: PUSH
22616: LD_INT 103
22618: PUSH
22619: LD_INT 106
22621: PUSH
22622: LD_INT 108
22624: PUSH
22625: LD_INT 112
22627: PUSH
22628: LD_INT 113
22630: PUSH
22631: LD_INT 114
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: ST_TO_ADDR
22648: GO 23243
22650: LD_INT 17
22652: DOUBLE
22653: EQUAL
22654: IFTRUE 22658
22656: GO 22870
22658: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22659: LD_ADDR_VAR 0 1
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: LD_INT 2
22669: PUSH
22670: LD_INT 3
22672: PUSH
22673: LD_INT 4
22675: PUSH
22676: LD_INT 5
22678: PUSH
22679: LD_INT 6
22681: PUSH
22682: LD_INT 7
22684: PUSH
22685: LD_INT 8
22687: PUSH
22688: LD_INT 9
22690: PUSH
22691: LD_INT 10
22693: PUSH
22694: LD_INT 11
22696: PUSH
22697: LD_INT 12
22699: PUSH
22700: LD_INT 13
22702: PUSH
22703: LD_INT 14
22705: PUSH
22706: LD_INT 15
22708: PUSH
22709: LD_INT 16
22711: PUSH
22712: LD_INT 17
22714: PUSH
22715: LD_INT 18
22717: PUSH
22718: LD_INT 19
22720: PUSH
22721: LD_INT 20
22723: PUSH
22724: LD_INT 21
22726: PUSH
22727: LD_INT 22
22729: PUSH
22730: LD_INT 23
22732: PUSH
22733: LD_INT 24
22735: PUSH
22736: LD_INT 25
22738: PUSH
22739: LD_INT 26
22741: PUSH
22742: LD_INT 27
22744: PUSH
22745: LD_INT 28
22747: PUSH
22748: LD_INT 29
22750: PUSH
22751: LD_INT 30
22753: PUSH
22754: LD_INT 31
22756: PUSH
22757: LD_INT 32
22759: PUSH
22760: LD_INT 33
22762: PUSH
22763: LD_INT 34
22765: PUSH
22766: LD_INT 36
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 101
22808: PUSH
22809: LD_INT 102
22811: PUSH
22812: LD_INT 103
22814: PUSH
22815: LD_INT 104
22817: PUSH
22818: LD_INT 105
22820: PUSH
22821: LD_INT 106
22823: PUSH
22824: LD_INT 107
22826: PUSH
22827: LD_INT 108
22829: PUSH
22830: LD_INT 109
22832: PUSH
22833: LD_INT 110
22835: PUSH
22836: LD_INT 111
22838: PUSH
22839: LD_INT 112
22841: PUSH
22842: LD_INT 113
22844: PUSH
22845: LD_INT 114
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: ST_TO_ADDR
22868: GO 23243
22870: LD_INT 18
22872: DOUBLE
22873: EQUAL
22874: IFTRUE 22878
22876: GO 23014
22878: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22879: LD_ADDR_VAR 0 1
22883: PUSH
22884: LD_INT 2
22886: PUSH
22887: LD_INT 4
22889: PUSH
22890: LD_INT 5
22892: PUSH
22893: LD_INT 7
22895: PUSH
22896: LD_INT 11
22898: PUSH
22899: LD_INT 12
22901: PUSH
22902: LD_INT 15
22904: PUSH
22905: LD_INT 16
22907: PUSH
22908: LD_INT 20
22910: PUSH
22911: LD_INT 21
22913: PUSH
22914: LD_INT 22
22916: PUSH
22917: LD_INT 23
22919: PUSH
22920: LD_INT 25
22922: PUSH
22923: LD_INT 26
22925: PUSH
22926: LD_INT 30
22928: PUSH
22929: LD_INT 31
22931: PUSH
22932: LD_INT 32
22934: PUSH
22935: LD_INT 33
22937: PUSH
22938: LD_INT 34
22940: PUSH
22941: LD_INT 35
22943: PUSH
22944: LD_INT 36
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 101
22972: PUSH
22973: LD_INT 102
22975: PUSH
22976: LD_INT 103
22978: PUSH
22979: LD_INT 106
22981: PUSH
22982: LD_INT 108
22984: PUSH
22985: LD_INT 112
22987: PUSH
22988: LD_INT 113
22990: PUSH
22991: LD_INT 114
22993: PUSH
22994: LD_INT 115
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: ST_TO_ADDR
23012: GO 23243
23014: LD_INT 19
23016: DOUBLE
23017: EQUAL
23018: IFTRUE 23022
23020: GO 23242
23022: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23023: LD_ADDR_VAR 0 1
23027: PUSH
23028: LD_INT 1
23030: PUSH
23031: LD_INT 2
23033: PUSH
23034: LD_INT 3
23036: PUSH
23037: LD_INT 4
23039: PUSH
23040: LD_INT 5
23042: PUSH
23043: LD_INT 6
23045: PUSH
23046: LD_INT 7
23048: PUSH
23049: LD_INT 8
23051: PUSH
23052: LD_INT 9
23054: PUSH
23055: LD_INT 10
23057: PUSH
23058: LD_INT 11
23060: PUSH
23061: LD_INT 12
23063: PUSH
23064: LD_INT 13
23066: PUSH
23067: LD_INT 14
23069: PUSH
23070: LD_INT 15
23072: PUSH
23073: LD_INT 16
23075: PUSH
23076: LD_INT 17
23078: PUSH
23079: LD_INT 18
23081: PUSH
23082: LD_INT 19
23084: PUSH
23085: LD_INT 20
23087: PUSH
23088: LD_INT 21
23090: PUSH
23091: LD_INT 22
23093: PUSH
23094: LD_INT 23
23096: PUSH
23097: LD_INT 24
23099: PUSH
23100: LD_INT 25
23102: PUSH
23103: LD_INT 26
23105: PUSH
23106: LD_INT 27
23108: PUSH
23109: LD_INT 28
23111: PUSH
23112: LD_INT 29
23114: PUSH
23115: LD_INT 30
23117: PUSH
23118: LD_INT 31
23120: PUSH
23121: LD_INT 32
23123: PUSH
23124: LD_INT 33
23126: PUSH
23127: LD_INT 34
23129: PUSH
23130: LD_INT 35
23132: PUSH
23133: LD_INT 36
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 101
23176: PUSH
23177: LD_INT 102
23179: PUSH
23180: LD_INT 103
23182: PUSH
23183: LD_INT 104
23185: PUSH
23186: LD_INT 105
23188: PUSH
23189: LD_INT 106
23191: PUSH
23192: LD_INT 107
23194: PUSH
23195: LD_INT 108
23197: PUSH
23198: LD_INT 109
23200: PUSH
23201: LD_INT 110
23203: PUSH
23204: LD_INT 111
23206: PUSH
23207: LD_INT 112
23209: PUSH
23210: LD_INT 113
23212: PUSH
23213: LD_INT 114
23215: PUSH
23216: LD_INT 115
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: ST_TO_ADDR
23240: GO 23243
23242: POP
// end else
23243: GO 23462
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23245: LD_ADDR_VAR 0 1
23249: PUSH
23250: LD_INT 1
23252: PUSH
23253: LD_INT 2
23255: PUSH
23256: LD_INT 3
23258: PUSH
23259: LD_INT 4
23261: PUSH
23262: LD_INT 5
23264: PUSH
23265: LD_INT 6
23267: PUSH
23268: LD_INT 7
23270: PUSH
23271: LD_INT 8
23273: PUSH
23274: LD_INT 9
23276: PUSH
23277: LD_INT 10
23279: PUSH
23280: LD_INT 11
23282: PUSH
23283: LD_INT 12
23285: PUSH
23286: LD_INT 13
23288: PUSH
23289: LD_INT 14
23291: PUSH
23292: LD_INT 15
23294: PUSH
23295: LD_INT 16
23297: PUSH
23298: LD_INT 17
23300: PUSH
23301: LD_INT 18
23303: PUSH
23304: LD_INT 19
23306: PUSH
23307: LD_INT 20
23309: PUSH
23310: LD_INT 21
23312: PUSH
23313: LD_INT 22
23315: PUSH
23316: LD_INT 23
23318: PUSH
23319: LD_INT 24
23321: PUSH
23322: LD_INT 25
23324: PUSH
23325: LD_INT 26
23327: PUSH
23328: LD_INT 27
23330: PUSH
23331: LD_INT 28
23333: PUSH
23334: LD_INT 29
23336: PUSH
23337: LD_INT 30
23339: PUSH
23340: LD_INT 31
23342: PUSH
23343: LD_INT 32
23345: PUSH
23346: LD_INT 33
23348: PUSH
23349: LD_INT 34
23351: PUSH
23352: LD_INT 35
23354: PUSH
23355: LD_INT 36
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 101
23398: PUSH
23399: LD_INT 102
23401: PUSH
23402: LD_INT 103
23404: PUSH
23405: LD_INT 104
23407: PUSH
23408: LD_INT 105
23410: PUSH
23411: LD_INT 106
23413: PUSH
23414: LD_INT 107
23416: PUSH
23417: LD_INT 108
23419: PUSH
23420: LD_INT 109
23422: PUSH
23423: LD_INT 110
23425: PUSH
23426: LD_INT 111
23428: PUSH
23429: LD_INT 112
23431: PUSH
23432: LD_INT 113
23434: PUSH
23435: LD_INT 114
23437: PUSH
23438: LD_INT 115
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: ST_TO_ADDR
// if result then
23462: LD_VAR 0 1
23466: IFFALSE 23755
// begin normal :=  ;
23468: LD_ADDR_VAR 0 3
23472: PUSH
23473: LD_STRING 
23475: ST_TO_ADDR
// hardcore :=  ;
23476: LD_ADDR_VAR 0 4
23480: PUSH
23481: LD_STRING 
23483: ST_TO_ADDR
// for i = 1 to normalCounter do
23484: LD_ADDR_VAR 0 5
23488: PUSH
23489: DOUBLE
23490: LD_INT 1
23492: DEC
23493: ST_TO_ADDR
23494: LD_EXP 82
23498: PUSH
23499: FOR_TO
23500: IFFALSE 23601
// begin tmp := 0 ;
23502: LD_ADDR_VAR 0 2
23506: PUSH
23507: LD_STRING 0
23509: ST_TO_ADDR
// if result [ 1 ] then
23510: LD_VAR 0 1
23514: PUSH
23515: LD_INT 1
23517: ARRAY
23518: IFFALSE 23583
// if result [ 1 ] [ 1 ] = i then
23520: LD_VAR 0 1
23524: PUSH
23525: LD_INT 1
23527: ARRAY
23528: PUSH
23529: LD_INT 1
23531: ARRAY
23532: PUSH
23533: LD_VAR 0 5
23537: EQUAL
23538: IFFALSE 23583
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23540: LD_ADDR_VAR 0 1
23544: PUSH
23545: LD_VAR 0 1
23549: PPUSH
23550: LD_INT 1
23552: PPUSH
23553: LD_VAR 0 1
23557: PUSH
23558: LD_INT 1
23560: ARRAY
23561: PPUSH
23562: LD_INT 1
23564: PPUSH
23565: CALL_OW 3
23569: PPUSH
23570: CALL_OW 1
23574: ST_TO_ADDR
// tmp := 1 ;
23575: LD_ADDR_VAR 0 2
23579: PUSH
23580: LD_STRING 1
23582: ST_TO_ADDR
// end ; normal := normal & tmp ;
23583: LD_ADDR_VAR 0 3
23587: PUSH
23588: LD_VAR 0 3
23592: PUSH
23593: LD_VAR 0 2
23597: STR
23598: ST_TO_ADDR
// end ;
23599: GO 23499
23601: POP
23602: POP
// for i = 1 to hardcoreCounter do
23603: LD_ADDR_VAR 0 5
23607: PUSH
23608: DOUBLE
23609: LD_INT 1
23611: DEC
23612: ST_TO_ADDR
23613: LD_EXP 83
23617: PUSH
23618: FOR_TO
23619: IFFALSE 23724
// begin tmp := 0 ;
23621: LD_ADDR_VAR 0 2
23625: PUSH
23626: LD_STRING 0
23628: ST_TO_ADDR
// if result [ 2 ] then
23629: LD_VAR 0 1
23633: PUSH
23634: LD_INT 2
23636: ARRAY
23637: IFFALSE 23706
// if result [ 2 ] [ 1 ] = 100 + i then
23639: LD_VAR 0 1
23643: PUSH
23644: LD_INT 2
23646: ARRAY
23647: PUSH
23648: LD_INT 1
23650: ARRAY
23651: PUSH
23652: LD_INT 100
23654: PUSH
23655: LD_VAR 0 5
23659: PLUS
23660: EQUAL
23661: IFFALSE 23706
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23663: LD_ADDR_VAR 0 1
23667: PUSH
23668: LD_VAR 0 1
23672: PPUSH
23673: LD_INT 2
23675: PPUSH
23676: LD_VAR 0 1
23680: PUSH
23681: LD_INT 2
23683: ARRAY
23684: PPUSH
23685: LD_INT 1
23687: PPUSH
23688: CALL_OW 3
23692: PPUSH
23693: CALL_OW 1
23697: ST_TO_ADDR
// tmp := 1 ;
23698: LD_ADDR_VAR 0 2
23702: PUSH
23703: LD_STRING 1
23705: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23706: LD_ADDR_VAR 0 4
23710: PUSH
23711: LD_VAR 0 4
23715: PUSH
23716: LD_VAR 0 2
23720: STR
23721: ST_TO_ADDR
// end ;
23722: GO 23618
23724: POP
23725: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23726: LD_STRING getStreamItemsFromMission("
23728: PUSH
23729: LD_VAR 0 3
23733: STR
23734: PUSH
23735: LD_STRING ","
23737: STR
23738: PUSH
23739: LD_VAR 0 4
23743: STR
23744: PUSH
23745: LD_STRING ")
23747: STR
23748: PPUSH
23749: CALL_OW 559
// end else
23753: GO 23762
// ToLua ( getStreamItemsFromMission("","") ) ;
23755: LD_STRING getStreamItemsFromMission("","")
23757: PPUSH
23758: CALL_OW 559
// end ;
23762: LD_VAR 0 1
23766: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23767: LD_EXP 81
23771: PUSH
23772: LD_EXP 86
23776: AND
23777: IFFALSE 23901
23779: GO 23781
23781: DISABLE
23782: LD_INT 0
23784: PPUSH
23785: PPUSH
// begin enable ;
23786: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23787: LD_ADDR_VAR 0 2
23791: PUSH
23792: LD_INT 22
23794: PUSH
23795: LD_OWVAR 2
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 2
23806: PUSH
23807: LD_INT 34
23809: PUSH
23810: LD_INT 7
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 34
23819: PUSH
23820: LD_INT 45
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 34
23829: PUSH
23830: LD_INT 28
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 34
23839: PUSH
23840: LD_INT 47
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PPUSH
23858: CALL_OW 69
23862: ST_TO_ADDR
// if not tmp then
23863: LD_VAR 0 2
23867: NOT
23868: IFFALSE 23872
// exit ;
23870: GO 23901
// for i in tmp do
23872: LD_ADDR_VAR 0 1
23876: PUSH
23877: LD_VAR 0 2
23881: PUSH
23882: FOR_IN
23883: IFFALSE 23899
// begin SetLives ( i , 0 ) ;
23885: LD_VAR 0 1
23889: PPUSH
23890: LD_INT 0
23892: PPUSH
23893: CALL_OW 234
// end ;
23897: GO 23882
23899: POP
23900: POP
// end ;
23901: PPOPN 2
23903: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23904: LD_EXP 81
23908: PUSH
23909: LD_EXP 87
23913: AND
23914: IFFALSE 23998
23916: GO 23918
23918: DISABLE
23919: LD_INT 0
23921: PPUSH
23922: PPUSH
// begin enable ;
23923: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23924: LD_ADDR_VAR 0 2
23928: PUSH
23929: LD_INT 22
23931: PUSH
23932: LD_OWVAR 2
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 32
23943: PUSH
23944: LD_INT 3
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PPUSH
23955: CALL_OW 69
23959: ST_TO_ADDR
// if not tmp then
23960: LD_VAR 0 2
23964: NOT
23965: IFFALSE 23969
// exit ;
23967: GO 23998
// for i in tmp do
23969: LD_ADDR_VAR 0 1
23973: PUSH
23974: LD_VAR 0 2
23978: PUSH
23979: FOR_IN
23980: IFFALSE 23996
// begin SetLives ( i , 0 ) ;
23982: LD_VAR 0 1
23986: PPUSH
23987: LD_INT 0
23989: PPUSH
23990: CALL_OW 234
// end ;
23994: GO 23979
23996: POP
23997: POP
// end ;
23998: PPOPN 2
24000: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24001: LD_EXP 81
24005: PUSH
24006: LD_EXP 84
24010: AND
24011: IFFALSE 24104
24013: GO 24015
24015: DISABLE
24016: LD_INT 0
24018: PPUSH
// begin enable ;
24019: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24020: LD_ADDR_VAR 0 1
24024: PUSH
24025: LD_INT 22
24027: PUSH
24028: LD_OWVAR 2
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 2
24039: PUSH
24040: LD_INT 25
24042: PUSH
24043: LD_INT 5
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 25
24052: PUSH
24053: LD_INT 9
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 25
24062: PUSH
24063: LD_INT 8
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PPUSH
24080: CALL_OW 69
24084: PUSH
24085: FOR_IN
24086: IFFALSE 24102
// begin SetClass ( i , 1 ) ;
24088: LD_VAR 0 1
24092: PPUSH
24093: LD_INT 1
24095: PPUSH
24096: CALL_OW 336
// end ;
24100: GO 24085
24102: POP
24103: POP
// end ;
24104: PPOPN 1
24106: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24107: LD_EXP 81
24111: PUSH
24112: LD_EXP 85
24116: AND
24117: PUSH
24118: LD_OWVAR 65
24122: PUSH
24123: LD_INT 7
24125: LESS
24126: AND
24127: IFFALSE 24141
24129: GO 24131
24131: DISABLE
// begin enable ;
24132: ENABLE
// game_speed := 7 ;
24133: LD_ADDR_OWVAR 65
24137: PUSH
24138: LD_INT 7
24140: ST_TO_ADDR
// end ;
24141: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24142: LD_EXP 81
24146: PUSH
24147: LD_EXP 88
24151: AND
24152: IFFALSE 24354
24154: GO 24156
24156: DISABLE
24157: LD_INT 0
24159: PPUSH
24160: PPUSH
24161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24162: LD_ADDR_VAR 0 3
24166: PUSH
24167: LD_INT 81
24169: PUSH
24170: LD_OWVAR 2
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 21
24181: PUSH
24182: LD_INT 1
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PPUSH
24193: CALL_OW 69
24197: ST_TO_ADDR
// if not tmp then
24198: LD_VAR 0 3
24202: NOT
24203: IFFALSE 24207
// exit ;
24205: GO 24354
// if tmp > 5 then
24207: LD_VAR 0 3
24211: PUSH
24212: LD_INT 5
24214: GREATER
24215: IFFALSE 24227
// k := 5 else
24217: LD_ADDR_VAR 0 2
24221: PUSH
24222: LD_INT 5
24224: ST_TO_ADDR
24225: GO 24237
// k := tmp ;
24227: LD_ADDR_VAR 0 2
24231: PUSH
24232: LD_VAR 0 3
24236: ST_TO_ADDR
// for i := 1 to k do
24237: LD_ADDR_VAR 0 1
24241: PUSH
24242: DOUBLE
24243: LD_INT 1
24245: DEC
24246: ST_TO_ADDR
24247: LD_VAR 0 2
24251: PUSH
24252: FOR_TO
24253: IFFALSE 24352
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24255: LD_VAR 0 3
24259: PUSH
24260: LD_VAR 0 1
24264: ARRAY
24265: PPUSH
24266: LD_VAR 0 1
24270: PUSH
24271: LD_INT 4
24273: MOD
24274: PUSH
24275: LD_INT 1
24277: PLUS
24278: PPUSH
24279: CALL_OW 259
24283: PUSH
24284: LD_INT 10
24286: LESS
24287: IFFALSE 24350
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24289: LD_VAR 0 3
24293: PUSH
24294: LD_VAR 0 1
24298: ARRAY
24299: PPUSH
24300: LD_VAR 0 1
24304: PUSH
24305: LD_INT 4
24307: MOD
24308: PUSH
24309: LD_INT 1
24311: PLUS
24312: PPUSH
24313: LD_VAR 0 3
24317: PUSH
24318: LD_VAR 0 1
24322: ARRAY
24323: PPUSH
24324: LD_VAR 0 1
24328: PUSH
24329: LD_INT 4
24331: MOD
24332: PUSH
24333: LD_INT 1
24335: PLUS
24336: PPUSH
24337: CALL_OW 259
24341: PUSH
24342: LD_INT 1
24344: PLUS
24345: PPUSH
24346: CALL_OW 237
24350: GO 24252
24352: POP
24353: POP
// end ;
24354: PPOPN 3
24356: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24357: LD_EXP 81
24361: PUSH
24362: LD_EXP 89
24366: AND
24367: IFFALSE 24387
24369: GO 24371
24371: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24372: LD_INT 4
24374: PPUSH
24375: LD_OWVAR 2
24379: PPUSH
24380: LD_INT 0
24382: PPUSH
24383: CALL_OW 324
24387: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24388: LD_EXP 81
24392: PUSH
24393: LD_EXP 118
24397: AND
24398: IFFALSE 24418
24400: GO 24402
24402: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24403: LD_INT 19
24405: PPUSH
24406: LD_OWVAR 2
24410: PPUSH
24411: LD_INT 0
24413: PPUSH
24414: CALL_OW 324
24418: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24419: LD_EXP 81
24423: PUSH
24424: LD_EXP 90
24428: AND
24429: IFFALSE 24531
24431: GO 24433
24433: DISABLE
24434: LD_INT 0
24436: PPUSH
24437: PPUSH
// begin enable ;
24438: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24439: LD_ADDR_VAR 0 2
24443: PUSH
24444: LD_INT 22
24446: PUSH
24447: LD_OWVAR 2
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 2
24458: PUSH
24459: LD_INT 34
24461: PUSH
24462: LD_INT 11
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 34
24471: PUSH
24472: LD_INT 30
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: LIST
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PPUSH
24488: CALL_OW 69
24492: ST_TO_ADDR
// if not tmp then
24493: LD_VAR 0 2
24497: NOT
24498: IFFALSE 24502
// exit ;
24500: GO 24531
// for i in tmp do
24502: LD_ADDR_VAR 0 1
24506: PUSH
24507: LD_VAR 0 2
24511: PUSH
24512: FOR_IN
24513: IFFALSE 24529
// begin SetLives ( i , 0 ) ;
24515: LD_VAR 0 1
24519: PPUSH
24520: LD_INT 0
24522: PPUSH
24523: CALL_OW 234
// end ;
24527: GO 24512
24529: POP
24530: POP
// end ;
24531: PPOPN 2
24533: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24534: LD_EXP 81
24538: PUSH
24539: LD_EXP 91
24543: AND
24544: IFFALSE 24564
24546: GO 24548
24548: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24549: LD_INT 32
24551: PPUSH
24552: LD_OWVAR 2
24556: PPUSH
24557: LD_INT 0
24559: PPUSH
24560: CALL_OW 324
24564: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24565: LD_EXP 81
24569: PUSH
24570: LD_EXP 92
24574: AND
24575: IFFALSE 24756
24577: GO 24579
24579: DISABLE
24580: LD_INT 0
24582: PPUSH
24583: PPUSH
24584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24585: LD_ADDR_VAR 0 2
24589: PUSH
24590: LD_INT 22
24592: PUSH
24593: LD_OWVAR 2
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 33
24604: PUSH
24605: LD_INT 3
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PPUSH
24616: CALL_OW 69
24620: ST_TO_ADDR
// if not tmp then
24621: LD_VAR 0 2
24625: NOT
24626: IFFALSE 24630
// exit ;
24628: GO 24756
// side := 0 ;
24630: LD_ADDR_VAR 0 3
24634: PUSH
24635: LD_INT 0
24637: ST_TO_ADDR
// for i := 1 to 8 do
24638: LD_ADDR_VAR 0 1
24642: PUSH
24643: DOUBLE
24644: LD_INT 1
24646: DEC
24647: ST_TO_ADDR
24648: LD_INT 8
24650: PUSH
24651: FOR_TO
24652: IFFALSE 24700
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24654: LD_OWVAR 2
24658: PUSH
24659: LD_VAR 0 1
24663: NONEQUAL
24664: PUSH
24665: LD_OWVAR 2
24669: PPUSH
24670: LD_VAR 0 1
24674: PPUSH
24675: CALL_OW 81
24679: PUSH
24680: LD_INT 2
24682: EQUAL
24683: AND
24684: IFFALSE 24698
// begin side := i ;
24686: LD_ADDR_VAR 0 3
24690: PUSH
24691: LD_VAR 0 1
24695: ST_TO_ADDR
// break ;
24696: GO 24700
// end ;
24698: GO 24651
24700: POP
24701: POP
// if not side then
24702: LD_VAR 0 3
24706: NOT
24707: IFFALSE 24711
// exit ;
24709: GO 24756
// for i := 1 to tmp do
24711: LD_ADDR_VAR 0 1
24715: PUSH
24716: DOUBLE
24717: LD_INT 1
24719: DEC
24720: ST_TO_ADDR
24721: LD_VAR 0 2
24725: PUSH
24726: FOR_TO
24727: IFFALSE 24754
// if Prob ( 60 ) then
24729: LD_INT 60
24731: PPUSH
24732: CALL_OW 13
24736: IFFALSE 24752
// SetSide ( i , side ) ;
24738: LD_VAR 0 1
24742: PPUSH
24743: LD_VAR 0 3
24747: PPUSH
24748: CALL_OW 235
24752: GO 24726
24754: POP
24755: POP
// end ;
24756: PPOPN 3
24758: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24759: LD_EXP 81
24763: PUSH
24764: LD_EXP 94
24768: AND
24769: IFFALSE 24888
24771: GO 24773
24773: DISABLE
24774: LD_INT 0
24776: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24777: LD_ADDR_VAR 0 1
24781: PUSH
24782: LD_INT 22
24784: PUSH
24785: LD_OWVAR 2
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 21
24796: PUSH
24797: LD_INT 1
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 3
24806: PUSH
24807: LD_INT 23
24809: PUSH
24810: LD_INT 0
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: LIST
24825: PPUSH
24826: CALL_OW 69
24830: PUSH
24831: FOR_IN
24832: IFFALSE 24886
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24834: LD_VAR 0 1
24838: PPUSH
24839: CALL_OW 257
24843: PUSH
24844: LD_INT 1
24846: PUSH
24847: LD_INT 2
24849: PUSH
24850: LD_INT 3
24852: PUSH
24853: LD_INT 4
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: IN
24862: IFFALSE 24884
// SetClass ( un , rand ( 1 , 4 ) ) ;
24864: LD_VAR 0 1
24868: PPUSH
24869: LD_INT 1
24871: PPUSH
24872: LD_INT 4
24874: PPUSH
24875: CALL_OW 12
24879: PPUSH
24880: CALL_OW 336
24884: GO 24831
24886: POP
24887: POP
// end ;
24888: PPOPN 1
24890: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24891: LD_EXP 81
24895: PUSH
24896: LD_EXP 93
24900: AND
24901: IFFALSE 24980
24903: GO 24905
24905: DISABLE
24906: LD_INT 0
24908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24909: LD_ADDR_VAR 0 1
24913: PUSH
24914: LD_INT 22
24916: PUSH
24917: LD_OWVAR 2
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 21
24928: PUSH
24929: LD_INT 3
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PPUSH
24940: CALL_OW 69
24944: ST_TO_ADDR
// if not tmp then
24945: LD_VAR 0 1
24949: NOT
24950: IFFALSE 24954
// exit ;
24952: GO 24980
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24954: LD_VAR 0 1
24958: PUSH
24959: LD_INT 1
24961: PPUSH
24962: LD_VAR 0 1
24966: PPUSH
24967: CALL_OW 12
24971: ARRAY
24972: PPUSH
24973: LD_INT 100
24975: PPUSH
24976: CALL_OW 234
// end ;
24980: PPOPN 1
24982: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24983: LD_EXP 81
24987: PUSH
24988: LD_EXP 95
24992: AND
24993: IFFALSE 25091
24995: GO 24997
24997: DISABLE
24998: LD_INT 0
25000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25001: LD_ADDR_VAR 0 1
25005: PUSH
25006: LD_INT 22
25008: PUSH
25009: LD_OWVAR 2
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: LD_INT 21
25020: PUSH
25021: LD_INT 1
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PPUSH
25032: CALL_OW 69
25036: ST_TO_ADDR
// if not tmp then
25037: LD_VAR 0 1
25041: NOT
25042: IFFALSE 25046
// exit ;
25044: GO 25091
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25046: LD_VAR 0 1
25050: PUSH
25051: LD_INT 1
25053: PPUSH
25054: LD_VAR 0 1
25058: PPUSH
25059: CALL_OW 12
25063: ARRAY
25064: PPUSH
25065: LD_INT 1
25067: PPUSH
25068: LD_INT 4
25070: PPUSH
25071: CALL_OW 12
25075: PPUSH
25076: LD_INT 3000
25078: PPUSH
25079: LD_INT 9000
25081: PPUSH
25082: CALL_OW 12
25086: PPUSH
25087: CALL_OW 492
// end ;
25091: PPOPN 1
25093: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25094: LD_EXP 81
25098: PUSH
25099: LD_EXP 96
25103: AND
25104: IFFALSE 25124
25106: GO 25108
25108: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25109: LD_INT 1
25111: PPUSH
25112: LD_OWVAR 2
25116: PPUSH
25117: LD_INT 0
25119: PPUSH
25120: CALL_OW 324
25124: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25125: LD_EXP 81
25129: PUSH
25130: LD_EXP 97
25134: AND
25135: IFFALSE 25218
25137: GO 25139
25139: DISABLE
25140: LD_INT 0
25142: PPUSH
25143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25144: LD_ADDR_VAR 0 2
25148: PUSH
25149: LD_INT 22
25151: PUSH
25152: LD_OWVAR 2
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 21
25163: PUSH
25164: LD_INT 3
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PPUSH
25175: CALL_OW 69
25179: ST_TO_ADDR
// if not tmp then
25180: LD_VAR 0 2
25184: NOT
25185: IFFALSE 25189
// exit ;
25187: GO 25218
// for i in tmp do
25189: LD_ADDR_VAR 0 1
25193: PUSH
25194: LD_VAR 0 2
25198: PUSH
25199: FOR_IN
25200: IFFALSE 25216
// SetBLevel ( i , 10 ) ;
25202: LD_VAR 0 1
25206: PPUSH
25207: LD_INT 10
25209: PPUSH
25210: CALL_OW 241
25214: GO 25199
25216: POP
25217: POP
// end ;
25218: PPOPN 2
25220: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25221: LD_EXP 81
25225: PUSH
25226: LD_EXP 98
25230: AND
25231: IFFALSE 25342
25233: GO 25235
25235: DISABLE
25236: LD_INT 0
25238: PPUSH
25239: PPUSH
25240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25241: LD_ADDR_VAR 0 3
25245: PUSH
25246: LD_INT 22
25248: PUSH
25249: LD_OWVAR 2
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 25
25260: PUSH
25261: LD_INT 1
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PPUSH
25272: CALL_OW 69
25276: ST_TO_ADDR
// if not tmp then
25277: LD_VAR 0 3
25281: NOT
25282: IFFALSE 25286
// exit ;
25284: GO 25342
// un := tmp [ rand ( 1 , tmp ) ] ;
25286: LD_ADDR_VAR 0 2
25290: PUSH
25291: LD_VAR 0 3
25295: PUSH
25296: LD_INT 1
25298: PPUSH
25299: LD_VAR 0 3
25303: PPUSH
25304: CALL_OW 12
25308: ARRAY
25309: ST_TO_ADDR
// if Crawls ( un ) then
25310: LD_VAR 0 2
25314: PPUSH
25315: CALL_OW 318
25319: IFFALSE 25330
// ComWalk ( un ) ;
25321: LD_VAR 0 2
25325: PPUSH
25326: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25330: LD_VAR 0 2
25334: PPUSH
25335: LD_INT 5
25337: PPUSH
25338: CALL_OW 336
// end ;
25342: PPOPN 3
25344: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25345: LD_EXP 81
25349: PUSH
25350: LD_EXP 99
25354: AND
25355: PUSH
25356: LD_OWVAR 67
25360: PUSH
25361: LD_INT 3
25363: LESS
25364: AND
25365: IFFALSE 25384
25367: GO 25369
25369: DISABLE
// Difficulty := Difficulty + 1 ;
25370: LD_ADDR_OWVAR 67
25374: PUSH
25375: LD_OWVAR 67
25379: PUSH
25380: LD_INT 1
25382: PLUS
25383: ST_TO_ADDR
25384: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25385: LD_EXP 81
25389: PUSH
25390: LD_EXP 100
25394: AND
25395: IFFALSE 25498
25397: GO 25399
25399: DISABLE
25400: LD_INT 0
25402: PPUSH
// begin for i := 1 to 5 do
25403: LD_ADDR_VAR 0 1
25407: PUSH
25408: DOUBLE
25409: LD_INT 1
25411: DEC
25412: ST_TO_ADDR
25413: LD_INT 5
25415: PUSH
25416: FOR_TO
25417: IFFALSE 25496
// begin uc_nation := nation_nature ;
25419: LD_ADDR_OWVAR 21
25423: PUSH
25424: LD_INT 0
25426: ST_TO_ADDR
// uc_side := 0 ;
25427: LD_ADDR_OWVAR 20
25431: PUSH
25432: LD_INT 0
25434: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25435: LD_ADDR_OWVAR 29
25439: PUSH
25440: LD_INT 12
25442: PUSH
25443: LD_INT 12
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: ST_TO_ADDR
// hc_agressivity := 20 ;
25450: LD_ADDR_OWVAR 35
25454: PUSH
25455: LD_INT 20
25457: ST_TO_ADDR
// hc_class := class_tiger ;
25458: LD_ADDR_OWVAR 28
25462: PUSH
25463: LD_INT 14
25465: ST_TO_ADDR
// hc_gallery :=  ;
25466: LD_ADDR_OWVAR 33
25470: PUSH
25471: LD_STRING 
25473: ST_TO_ADDR
// hc_name :=  ;
25474: LD_ADDR_OWVAR 26
25478: PUSH
25479: LD_STRING 
25481: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25482: CALL_OW 44
25486: PPUSH
25487: LD_INT 0
25489: PPUSH
25490: CALL_OW 51
// end ;
25494: GO 25416
25496: POP
25497: POP
// end ;
25498: PPOPN 1
25500: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25501: LD_EXP 81
25505: PUSH
25506: LD_EXP 101
25510: AND
25511: IFFALSE 25520
25513: GO 25515
25515: DISABLE
// StreamSibBomb ;
25516: CALL 25521 0 0
25520: END
// export function StreamSibBomb ; var i , x , y ; begin
25521: LD_INT 0
25523: PPUSH
25524: PPUSH
25525: PPUSH
25526: PPUSH
// result := false ;
25527: LD_ADDR_VAR 0 1
25531: PUSH
25532: LD_INT 0
25534: ST_TO_ADDR
// for i := 1 to 16 do
25535: LD_ADDR_VAR 0 2
25539: PUSH
25540: DOUBLE
25541: LD_INT 1
25543: DEC
25544: ST_TO_ADDR
25545: LD_INT 16
25547: PUSH
25548: FOR_TO
25549: IFFALSE 25748
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25551: LD_ADDR_VAR 0 3
25555: PUSH
25556: LD_INT 10
25558: PUSH
25559: LD_INT 20
25561: PUSH
25562: LD_INT 30
25564: PUSH
25565: LD_INT 40
25567: PUSH
25568: LD_INT 50
25570: PUSH
25571: LD_INT 60
25573: PUSH
25574: LD_INT 70
25576: PUSH
25577: LD_INT 80
25579: PUSH
25580: LD_INT 90
25582: PUSH
25583: LD_INT 100
25585: PUSH
25586: LD_INT 110
25588: PUSH
25589: LD_INT 120
25591: PUSH
25592: LD_INT 130
25594: PUSH
25595: LD_INT 140
25597: PUSH
25598: LD_INT 150
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 1
25620: PPUSH
25621: LD_INT 15
25623: PPUSH
25624: CALL_OW 12
25628: ARRAY
25629: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25630: LD_ADDR_VAR 0 4
25634: PUSH
25635: LD_INT 10
25637: PUSH
25638: LD_INT 20
25640: PUSH
25641: LD_INT 30
25643: PUSH
25644: LD_INT 40
25646: PUSH
25647: LD_INT 50
25649: PUSH
25650: LD_INT 60
25652: PUSH
25653: LD_INT 70
25655: PUSH
25656: LD_INT 80
25658: PUSH
25659: LD_INT 90
25661: PUSH
25662: LD_INT 100
25664: PUSH
25665: LD_INT 110
25667: PUSH
25668: LD_INT 120
25670: PUSH
25671: LD_INT 130
25673: PUSH
25674: LD_INT 140
25676: PUSH
25677: LD_INT 150
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 1
25699: PPUSH
25700: LD_INT 15
25702: PPUSH
25703: CALL_OW 12
25707: ARRAY
25708: ST_TO_ADDR
// if ValidHex ( x , y ) then
25709: LD_VAR 0 3
25713: PPUSH
25714: LD_VAR 0 4
25718: PPUSH
25719: CALL_OW 488
25723: IFFALSE 25746
// begin result := [ x , y ] ;
25725: LD_ADDR_VAR 0 1
25729: PUSH
25730: LD_VAR 0 3
25734: PUSH
25735: LD_VAR 0 4
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: ST_TO_ADDR
// break ;
25744: GO 25748
// end ; end ;
25746: GO 25548
25748: POP
25749: POP
// if result then
25750: LD_VAR 0 1
25754: IFFALSE 25814
// begin ToLua ( playSibBomb() ) ;
25756: LD_STRING playSibBomb()
25758: PPUSH
25759: CALL_OW 559
// wait ( 0 0$14 ) ;
25763: LD_INT 490
25765: PPUSH
25766: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25770: LD_VAR 0 1
25774: PUSH
25775: LD_INT 1
25777: ARRAY
25778: PPUSH
25779: LD_VAR 0 1
25783: PUSH
25784: LD_INT 2
25786: ARRAY
25787: PPUSH
25788: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25792: LD_VAR 0 1
25796: PUSH
25797: LD_INT 1
25799: ARRAY
25800: PPUSH
25801: LD_VAR 0 1
25805: PUSH
25806: LD_INT 2
25808: ARRAY
25809: PPUSH
25810: CALL_OW 429
// end ; end ;
25814: LD_VAR 0 1
25818: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25819: LD_EXP 81
25823: PUSH
25824: LD_EXP 103
25828: AND
25829: IFFALSE 25841
25831: GO 25833
25833: DISABLE
// YouLost (  ) ;
25834: LD_STRING 
25836: PPUSH
25837: CALL_OW 104
25841: END
// every 0 0$1 trigger StreamModeActive and sFog do
25842: LD_EXP 81
25846: PUSH
25847: LD_EXP 102
25851: AND
25852: IFFALSE 25866
25854: GO 25856
25856: DISABLE
// FogOff ( your_side ) ;
25857: LD_OWVAR 2
25861: PPUSH
25862: CALL_OW 344
25866: END
// every 0 0$1 trigger StreamModeActive and sSun do
25867: LD_EXP 81
25871: PUSH
25872: LD_EXP 104
25876: AND
25877: IFFALSE 25905
25879: GO 25881
25881: DISABLE
// begin solar_recharge_percent := 0 ;
25882: LD_ADDR_OWVAR 79
25886: PUSH
25887: LD_INT 0
25889: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25890: LD_INT 10500
25892: PPUSH
25893: CALL_OW 67
// solar_recharge_percent := 100 ;
25897: LD_ADDR_OWVAR 79
25901: PUSH
25902: LD_INT 100
25904: ST_TO_ADDR
// end ;
25905: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25906: LD_EXP 81
25910: PUSH
25911: LD_EXP 105
25915: AND
25916: IFFALSE 26155
25918: GO 25920
25920: DISABLE
25921: LD_INT 0
25923: PPUSH
25924: PPUSH
25925: PPUSH
// begin tmp := [ ] ;
25926: LD_ADDR_VAR 0 3
25930: PUSH
25931: EMPTY
25932: ST_TO_ADDR
// for i := 1 to 6 do
25933: LD_ADDR_VAR 0 1
25937: PUSH
25938: DOUBLE
25939: LD_INT 1
25941: DEC
25942: ST_TO_ADDR
25943: LD_INT 6
25945: PUSH
25946: FOR_TO
25947: IFFALSE 26052
// begin uc_nation := nation_nature ;
25949: LD_ADDR_OWVAR 21
25953: PUSH
25954: LD_INT 0
25956: ST_TO_ADDR
// uc_side := 0 ;
25957: LD_ADDR_OWVAR 20
25961: PUSH
25962: LD_INT 0
25964: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25965: LD_ADDR_OWVAR 29
25969: PUSH
25970: LD_INT 12
25972: PUSH
25973: LD_INT 12
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: ST_TO_ADDR
// hc_agressivity := 20 ;
25980: LD_ADDR_OWVAR 35
25984: PUSH
25985: LD_INT 20
25987: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25988: LD_ADDR_OWVAR 28
25992: PUSH
25993: LD_INT 17
25995: ST_TO_ADDR
// hc_gallery :=  ;
25996: LD_ADDR_OWVAR 33
26000: PUSH
26001: LD_STRING 
26003: ST_TO_ADDR
// hc_name :=  ;
26004: LD_ADDR_OWVAR 26
26008: PUSH
26009: LD_STRING 
26011: ST_TO_ADDR
// un := CreateHuman ;
26012: LD_ADDR_VAR 0 2
26016: PUSH
26017: CALL_OW 44
26021: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26022: LD_VAR 0 2
26026: PPUSH
26027: LD_INT 1
26029: PPUSH
26030: CALL_OW 51
// tmp := tmp ^ un ;
26034: LD_ADDR_VAR 0 3
26038: PUSH
26039: LD_VAR 0 3
26043: PUSH
26044: LD_VAR 0 2
26048: ADD
26049: ST_TO_ADDR
// end ;
26050: GO 25946
26052: POP
26053: POP
// repeat wait ( 0 0$1 ) ;
26054: LD_INT 35
26056: PPUSH
26057: CALL_OW 67
// for un in tmp do
26061: LD_ADDR_VAR 0 2
26065: PUSH
26066: LD_VAR 0 3
26070: PUSH
26071: FOR_IN
26072: IFFALSE 26146
// begin if IsDead ( un ) then
26074: LD_VAR 0 2
26078: PPUSH
26079: CALL_OW 301
26083: IFFALSE 26103
// begin tmp := tmp diff un ;
26085: LD_ADDR_VAR 0 3
26089: PUSH
26090: LD_VAR 0 3
26094: PUSH
26095: LD_VAR 0 2
26099: DIFF
26100: ST_TO_ADDR
// continue ;
26101: GO 26071
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26103: LD_VAR 0 2
26107: PPUSH
26108: LD_INT 3
26110: PUSH
26111: LD_INT 22
26113: PUSH
26114: LD_INT 0
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PPUSH
26125: CALL_OW 69
26129: PPUSH
26130: LD_VAR 0 2
26134: PPUSH
26135: CALL_OW 74
26139: PPUSH
26140: CALL_OW 115
// end ;
26144: GO 26071
26146: POP
26147: POP
// until not tmp ;
26148: LD_VAR 0 3
26152: NOT
26153: IFFALSE 26054
// end ;
26155: PPOPN 3
26157: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26158: LD_EXP 81
26162: PUSH
26163: LD_EXP 106
26167: AND
26168: IFFALSE 26222
26170: GO 26172
26172: DISABLE
// begin ToLua ( displayTroll(); ) ;
26173: LD_STRING displayTroll();
26175: PPUSH
26176: CALL_OW 559
// wait ( 3 3$00 ) ;
26180: LD_INT 6300
26182: PPUSH
26183: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26187: LD_STRING hideTroll();
26189: PPUSH
26190: CALL_OW 559
// wait ( 1 1$00 ) ;
26194: LD_INT 2100
26196: PPUSH
26197: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26201: LD_STRING displayTroll();
26203: PPUSH
26204: CALL_OW 559
// wait ( 1 1$00 ) ;
26208: LD_INT 2100
26210: PPUSH
26211: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26215: LD_STRING hideTroll();
26217: PPUSH
26218: CALL_OW 559
// end ;
26222: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26223: LD_EXP 81
26227: PUSH
26228: LD_EXP 107
26232: AND
26233: IFFALSE 26296
26235: GO 26237
26237: DISABLE
26238: LD_INT 0
26240: PPUSH
// begin p := 0 ;
26241: LD_ADDR_VAR 0 1
26245: PUSH
26246: LD_INT 0
26248: ST_TO_ADDR
// repeat game_speed := 1 ;
26249: LD_ADDR_OWVAR 65
26253: PUSH
26254: LD_INT 1
26256: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26257: LD_INT 35
26259: PPUSH
26260: CALL_OW 67
// p := p + 1 ;
26264: LD_ADDR_VAR 0 1
26268: PUSH
26269: LD_VAR 0 1
26273: PUSH
26274: LD_INT 1
26276: PLUS
26277: ST_TO_ADDR
// until p >= 60 ;
26278: LD_VAR 0 1
26282: PUSH
26283: LD_INT 60
26285: GREATEREQUAL
26286: IFFALSE 26249
// game_speed := 4 ;
26288: LD_ADDR_OWVAR 65
26292: PUSH
26293: LD_INT 4
26295: ST_TO_ADDR
// end ;
26296: PPOPN 1
26298: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26299: LD_EXP 81
26303: PUSH
26304: LD_EXP 108
26308: AND
26309: IFFALSE 26455
26311: GO 26313
26313: DISABLE
26314: LD_INT 0
26316: PPUSH
26317: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26318: LD_ADDR_VAR 0 1
26322: PUSH
26323: LD_INT 22
26325: PUSH
26326: LD_OWVAR 2
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 2
26337: PUSH
26338: LD_INT 30
26340: PUSH
26341: LD_INT 0
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 30
26350: PUSH
26351: LD_INT 1
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: LIST
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PPUSH
26367: CALL_OW 69
26371: ST_TO_ADDR
// if not depot then
26372: LD_VAR 0 1
26376: NOT
26377: IFFALSE 26381
// exit ;
26379: GO 26455
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26381: LD_ADDR_VAR 0 2
26385: PUSH
26386: LD_VAR 0 1
26390: PUSH
26391: LD_INT 1
26393: PPUSH
26394: LD_VAR 0 1
26398: PPUSH
26399: CALL_OW 12
26403: ARRAY
26404: PPUSH
26405: CALL_OW 274
26409: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26410: LD_VAR 0 2
26414: PPUSH
26415: LD_INT 1
26417: PPUSH
26418: LD_INT 0
26420: PPUSH
26421: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26425: LD_VAR 0 2
26429: PPUSH
26430: LD_INT 2
26432: PPUSH
26433: LD_INT 0
26435: PPUSH
26436: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26440: LD_VAR 0 2
26444: PPUSH
26445: LD_INT 3
26447: PPUSH
26448: LD_INT 0
26450: PPUSH
26451: CALL_OW 277
// end ;
26455: PPOPN 2
26457: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26458: LD_EXP 81
26462: PUSH
26463: LD_EXP 109
26467: AND
26468: IFFALSE 26565
26470: GO 26472
26472: DISABLE
26473: LD_INT 0
26475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26476: LD_ADDR_VAR 0 1
26480: PUSH
26481: LD_INT 22
26483: PUSH
26484: LD_OWVAR 2
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 21
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 3
26505: PUSH
26506: LD_INT 23
26508: PUSH
26509: LD_INT 0
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: LIST
26524: PPUSH
26525: CALL_OW 69
26529: ST_TO_ADDR
// if not tmp then
26530: LD_VAR 0 1
26534: NOT
26535: IFFALSE 26539
// exit ;
26537: GO 26565
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26539: LD_VAR 0 1
26543: PUSH
26544: LD_INT 1
26546: PPUSH
26547: LD_VAR 0 1
26551: PPUSH
26552: CALL_OW 12
26556: ARRAY
26557: PPUSH
26558: LD_INT 200
26560: PPUSH
26561: CALL_OW 234
// end ;
26565: PPOPN 1
26567: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26568: LD_EXP 81
26572: PUSH
26573: LD_EXP 110
26577: AND
26578: IFFALSE 26657
26580: GO 26582
26582: DISABLE
26583: LD_INT 0
26585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26586: LD_ADDR_VAR 0 1
26590: PUSH
26591: LD_INT 22
26593: PUSH
26594: LD_OWVAR 2
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 21
26605: PUSH
26606: LD_INT 2
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PPUSH
26617: CALL_OW 69
26621: ST_TO_ADDR
// if not tmp then
26622: LD_VAR 0 1
26626: NOT
26627: IFFALSE 26631
// exit ;
26629: GO 26657
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26631: LD_VAR 0 1
26635: PUSH
26636: LD_INT 1
26638: PPUSH
26639: LD_VAR 0 1
26643: PPUSH
26644: CALL_OW 12
26648: ARRAY
26649: PPUSH
26650: LD_INT 60
26652: PPUSH
26653: CALL_OW 234
// end ;
26657: PPOPN 1
26659: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26660: LD_EXP 81
26664: PUSH
26665: LD_EXP 111
26669: AND
26670: IFFALSE 26769
26672: GO 26674
26674: DISABLE
26675: LD_INT 0
26677: PPUSH
26678: PPUSH
// begin enable ;
26679: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26680: LD_ADDR_VAR 0 1
26684: PUSH
26685: LD_INT 22
26687: PUSH
26688: LD_OWVAR 2
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 61
26699: PUSH
26700: EMPTY
26701: LIST
26702: PUSH
26703: LD_INT 33
26705: PUSH
26706: LD_INT 2
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: LIST
26717: PPUSH
26718: CALL_OW 69
26722: ST_TO_ADDR
// if not tmp then
26723: LD_VAR 0 1
26727: NOT
26728: IFFALSE 26732
// exit ;
26730: GO 26769
// for i in tmp do
26732: LD_ADDR_VAR 0 2
26736: PUSH
26737: LD_VAR 0 1
26741: PUSH
26742: FOR_IN
26743: IFFALSE 26767
// if IsControledBy ( i ) then
26745: LD_VAR 0 2
26749: PPUSH
26750: CALL_OW 312
26754: IFFALSE 26765
// ComUnlink ( i ) ;
26756: LD_VAR 0 2
26760: PPUSH
26761: CALL_OW 136
26765: GO 26742
26767: POP
26768: POP
// end ;
26769: PPOPN 2
26771: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26772: LD_EXP 81
26776: PUSH
26777: LD_EXP 112
26781: AND
26782: IFFALSE 26922
26784: GO 26786
26786: DISABLE
26787: LD_INT 0
26789: PPUSH
26790: PPUSH
// begin ToLua ( displayPowell(); ) ;
26791: LD_STRING displayPowell();
26793: PPUSH
26794: CALL_OW 559
// uc_side := 0 ;
26798: LD_ADDR_OWVAR 20
26802: PUSH
26803: LD_INT 0
26805: ST_TO_ADDR
// uc_nation := 2 ;
26806: LD_ADDR_OWVAR 21
26810: PUSH
26811: LD_INT 2
26813: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26814: LD_ADDR_OWVAR 37
26818: PUSH
26819: LD_INT 14
26821: ST_TO_ADDR
// vc_engine := engine_siberite ;
26822: LD_ADDR_OWVAR 39
26826: PUSH
26827: LD_INT 3
26829: ST_TO_ADDR
// vc_control := control_apeman ;
26830: LD_ADDR_OWVAR 38
26834: PUSH
26835: LD_INT 5
26837: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26838: LD_ADDR_OWVAR 40
26842: PUSH
26843: LD_INT 29
26845: ST_TO_ADDR
// un := CreateVehicle ;
26846: LD_ADDR_VAR 0 2
26850: PUSH
26851: CALL_OW 45
26855: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26856: LD_VAR 0 2
26860: PPUSH
26861: LD_INT 1
26863: PPUSH
26864: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26868: LD_INT 35
26870: PPUSH
26871: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26875: LD_VAR 0 2
26879: PPUSH
26880: LD_INT 22
26882: PUSH
26883: LD_OWVAR 2
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PPUSH
26892: CALL_OW 69
26896: PPUSH
26897: LD_VAR 0 2
26901: PPUSH
26902: CALL_OW 74
26906: PPUSH
26907: CALL_OW 115
// until IsDead ( un ) ;
26911: LD_VAR 0 2
26915: PPUSH
26916: CALL_OW 301
26920: IFFALSE 26868
// end ;
26922: PPOPN 2
26924: END
// every 0 0$1 trigger StreamModeActive and sStu do
26925: LD_EXP 81
26929: PUSH
26930: LD_EXP 120
26934: AND
26935: IFFALSE 26951
26937: GO 26939
26939: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26940: LD_STRING displayStucuk();
26942: PPUSH
26943: CALL_OW 559
// ResetFog ;
26947: CALL_OW 335
// end ;
26951: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26952: LD_EXP 81
26956: PUSH
26957: LD_EXP 113
26961: AND
26962: IFFALSE 27103
26964: GO 26966
26966: DISABLE
26967: LD_INT 0
26969: PPUSH
26970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26971: LD_ADDR_VAR 0 2
26975: PUSH
26976: LD_INT 22
26978: PUSH
26979: LD_OWVAR 2
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 21
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PPUSH
27002: CALL_OW 69
27006: ST_TO_ADDR
// if not tmp then
27007: LD_VAR 0 2
27011: NOT
27012: IFFALSE 27016
// exit ;
27014: GO 27103
// un := tmp [ rand ( 1 , tmp ) ] ;
27016: LD_ADDR_VAR 0 1
27020: PUSH
27021: LD_VAR 0 2
27025: PUSH
27026: LD_INT 1
27028: PPUSH
27029: LD_VAR 0 2
27033: PPUSH
27034: CALL_OW 12
27038: ARRAY
27039: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27040: LD_VAR 0 1
27044: PPUSH
27045: LD_INT 0
27047: PPUSH
27048: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27052: LD_VAR 0 1
27056: PPUSH
27057: LD_OWVAR 3
27061: PUSH
27062: LD_VAR 0 1
27066: DIFF
27067: PPUSH
27068: LD_VAR 0 1
27072: PPUSH
27073: CALL_OW 74
27077: PPUSH
27078: CALL_OW 115
// wait ( 0 0$20 ) ;
27082: LD_INT 700
27084: PPUSH
27085: CALL_OW 67
// SetSide ( un , your_side ) ;
27089: LD_VAR 0 1
27093: PPUSH
27094: LD_OWVAR 2
27098: PPUSH
27099: CALL_OW 235
// end ;
27103: PPOPN 2
27105: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27106: LD_EXP 81
27110: PUSH
27111: LD_EXP 114
27115: AND
27116: IFFALSE 27222
27118: GO 27120
27120: DISABLE
27121: LD_INT 0
27123: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27124: LD_ADDR_VAR 0 1
27128: PUSH
27129: LD_INT 22
27131: PUSH
27132: LD_OWVAR 2
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 2
27143: PUSH
27144: LD_INT 30
27146: PUSH
27147: LD_INT 0
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 30
27156: PUSH
27157: LD_INT 1
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: LIST
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PPUSH
27173: CALL_OW 69
27177: ST_TO_ADDR
// if not depot then
27178: LD_VAR 0 1
27182: NOT
27183: IFFALSE 27187
// exit ;
27185: GO 27222
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27187: LD_VAR 0 1
27191: PUSH
27192: LD_INT 1
27194: ARRAY
27195: PPUSH
27196: CALL_OW 250
27200: PPUSH
27201: LD_VAR 0 1
27205: PUSH
27206: LD_INT 1
27208: ARRAY
27209: PPUSH
27210: CALL_OW 251
27214: PPUSH
27215: LD_INT 70
27217: PPUSH
27218: CALL_OW 495
// end ;
27222: PPOPN 1
27224: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27225: LD_EXP 81
27229: PUSH
27230: LD_EXP 115
27234: AND
27235: IFFALSE 27446
27237: GO 27239
27239: DISABLE
27240: LD_INT 0
27242: PPUSH
27243: PPUSH
27244: PPUSH
27245: PPUSH
27246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27247: LD_ADDR_VAR 0 5
27251: PUSH
27252: LD_INT 22
27254: PUSH
27255: LD_OWVAR 2
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 21
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PPUSH
27278: CALL_OW 69
27282: ST_TO_ADDR
// if not tmp then
27283: LD_VAR 0 5
27287: NOT
27288: IFFALSE 27292
// exit ;
27290: GO 27446
// for i in tmp do
27292: LD_ADDR_VAR 0 1
27296: PUSH
27297: LD_VAR 0 5
27301: PUSH
27302: FOR_IN
27303: IFFALSE 27444
// begin d := rand ( 0 , 5 ) ;
27305: LD_ADDR_VAR 0 4
27309: PUSH
27310: LD_INT 0
27312: PPUSH
27313: LD_INT 5
27315: PPUSH
27316: CALL_OW 12
27320: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27321: LD_ADDR_VAR 0 2
27325: PUSH
27326: LD_VAR 0 1
27330: PPUSH
27331: CALL_OW 250
27335: PPUSH
27336: LD_VAR 0 4
27340: PPUSH
27341: LD_INT 3
27343: PPUSH
27344: LD_INT 12
27346: PPUSH
27347: CALL_OW 12
27351: PPUSH
27352: CALL_OW 272
27356: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27357: LD_ADDR_VAR 0 3
27361: PUSH
27362: LD_VAR 0 1
27366: PPUSH
27367: CALL_OW 251
27371: PPUSH
27372: LD_VAR 0 4
27376: PPUSH
27377: LD_INT 3
27379: PPUSH
27380: LD_INT 12
27382: PPUSH
27383: CALL_OW 12
27387: PPUSH
27388: CALL_OW 273
27392: ST_TO_ADDR
// if ValidHex ( x , y ) then
27393: LD_VAR 0 2
27397: PPUSH
27398: LD_VAR 0 3
27402: PPUSH
27403: CALL_OW 488
27407: IFFALSE 27442
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27409: LD_VAR 0 1
27413: PPUSH
27414: LD_VAR 0 2
27418: PPUSH
27419: LD_VAR 0 3
27423: PPUSH
27424: LD_INT 3
27426: PPUSH
27427: LD_INT 6
27429: PPUSH
27430: CALL_OW 12
27434: PPUSH
27435: LD_INT 1
27437: PPUSH
27438: CALL_OW 483
// end ;
27442: GO 27302
27444: POP
27445: POP
// end ;
27446: PPOPN 5
27448: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27449: LD_EXP 81
27453: PUSH
27454: LD_EXP 116
27458: AND
27459: IFFALSE 27553
27461: GO 27463
27463: DISABLE
27464: LD_INT 0
27466: PPUSH
27467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27468: LD_ADDR_VAR 0 2
27472: PUSH
27473: LD_INT 22
27475: PUSH
27476: LD_OWVAR 2
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 32
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 21
27497: PUSH
27498: LD_INT 2
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: LIST
27509: PPUSH
27510: CALL_OW 69
27514: ST_TO_ADDR
// if not tmp then
27515: LD_VAR 0 2
27519: NOT
27520: IFFALSE 27524
// exit ;
27522: GO 27553
// for i in tmp do
27524: LD_ADDR_VAR 0 1
27528: PUSH
27529: LD_VAR 0 2
27533: PUSH
27534: FOR_IN
27535: IFFALSE 27551
// SetFuel ( i , 0 ) ;
27537: LD_VAR 0 1
27541: PPUSH
27542: LD_INT 0
27544: PPUSH
27545: CALL_OW 240
27549: GO 27534
27551: POP
27552: POP
// end ;
27553: PPOPN 2
27555: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27556: LD_EXP 81
27560: PUSH
27561: LD_EXP 117
27565: AND
27566: IFFALSE 27632
27568: GO 27570
27570: DISABLE
27571: LD_INT 0
27573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27574: LD_ADDR_VAR 0 1
27578: PUSH
27579: LD_INT 22
27581: PUSH
27582: LD_OWVAR 2
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 30
27593: PUSH
27594: LD_INT 29
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PPUSH
27605: CALL_OW 69
27609: ST_TO_ADDR
// if not tmp then
27610: LD_VAR 0 1
27614: NOT
27615: IFFALSE 27619
// exit ;
27617: GO 27632
// DestroyUnit ( tmp [ 1 ] ) ;
27619: LD_VAR 0 1
27623: PUSH
27624: LD_INT 1
27626: ARRAY
27627: PPUSH
27628: CALL_OW 65
// end ;
27632: PPOPN 1
27634: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27635: LD_EXP 81
27639: PUSH
27640: LD_EXP 119
27644: AND
27645: IFFALSE 27774
27647: GO 27649
27649: DISABLE
27650: LD_INT 0
27652: PPUSH
// begin uc_side := 0 ;
27653: LD_ADDR_OWVAR 20
27657: PUSH
27658: LD_INT 0
27660: ST_TO_ADDR
// uc_nation := nation_arabian ;
27661: LD_ADDR_OWVAR 21
27665: PUSH
27666: LD_INT 2
27668: ST_TO_ADDR
// hc_gallery :=  ;
27669: LD_ADDR_OWVAR 33
27673: PUSH
27674: LD_STRING 
27676: ST_TO_ADDR
// hc_name :=  ;
27677: LD_ADDR_OWVAR 26
27681: PUSH
27682: LD_STRING 
27684: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27685: LD_INT 1
27687: PPUSH
27688: LD_INT 11
27690: PPUSH
27691: LD_INT 10
27693: PPUSH
27694: CALL_OW 380
// un := CreateHuman ;
27698: LD_ADDR_VAR 0 1
27702: PUSH
27703: CALL_OW 44
27707: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27708: LD_VAR 0 1
27712: PPUSH
27713: LD_INT 1
27715: PPUSH
27716: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27720: LD_INT 35
27722: PPUSH
27723: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27727: LD_VAR 0 1
27731: PPUSH
27732: LD_INT 22
27734: PUSH
27735: LD_OWVAR 2
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PPUSH
27744: CALL_OW 69
27748: PPUSH
27749: LD_VAR 0 1
27753: PPUSH
27754: CALL_OW 74
27758: PPUSH
27759: CALL_OW 115
// until IsDead ( un ) ;
27763: LD_VAR 0 1
27767: PPUSH
27768: CALL_OW 301
27772: IFFALSE 27720
// end ;
27774: PPOPN 1
27776: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27777: LD_EXP 81
27781: PUSH
27782: LD_EXP 121
27786: AND
27787: IFFALSE 27799
27789: GO 27791
27791: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27792: LD_STRING earthquake(getX(game), 0, 32)
27794: PPUSH
27795: CALL_OW 559
27799: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27800: LD_EXP 81
27804: PUSH
27805: LD_EXP 122
27809: AND
27810: IFFALSE 27901
27812: GO 27814
27814: DISABLE
27815: LD_INT 0
27817: PPUSH
// begin enable ;
27818: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27819: LD_ADDR_VAR 0 1
27823: PUSH
27824: LD_INT 22
27826: PUSH
27827: LD_OWVAR 2
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 21
27838: PUSH
27839: LD_INT 2
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 33
27848: PUSH
27849: LD_INT 3
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: LIST
27860: PPUSH
27861: CALL_OW 69
27865: ST_TO_ADDR
// if not tmp then
27866: LD_VAR 0 1
27870: NOT
27871: IFFALSE 27875
// exit ;
27873: GO 27901
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27875: LD_VAR 0 1
27879: PUSH
27880: LD_INT 1
27882: PPUSH
27883: LD_VAR 0 1
27887: PPUSH
27888: CALL_OW 12
27892: ARRAY
27893: PPUSH
27894: LD_INT 1
27896: PPUSH
27897: CALL_OW 234
// end ;
27901: PPOPN 1
27903: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27904: LD_EXP 81
27908: PUSH
27909: LD_EXP 123
27913: AND
27914: IFFALSE 28055
27916: GO 27918
27918: DISABLE
27919: LD_INT 0
27921: PPUSH
27922: PPUSH
27923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27924: LD_ADDR_VAR 0 3
27928: PUSH
27929: LD_INT 22
27931: PUSH
27932: LD_OWVAR 2
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 25
27943: PUSH
27944: LD_INT 1
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PPUSH
27955: CALL_OW 69
27959: ST_TO_ADDR
// if not tmp then
27960: LD_VAR 0 3
27964: NOT
27965: IFFALSE 27969
// exit ;
27967: GO 28055
// un := tmp [ rand ( 1 , tmp ) ] ;
27969: LD_ADDR_VAR 0 2
27973: PUSH
27974: LD_VAR 0 3
27978: PUSH
27979: LD_INT 1
27981: PPUSH
27982: LD_VAR 0 3
27986: PPUSH
27987: CALL_OW 12
27991: ARRAY
27992: ST_TO_ADDR
// if Crawls ( un ) then
27993: LD_VAR 0 2
27997: PPUSH
27998: CALL_OW 318
28002: IFFALSE 28013
// ComWalk ( un ) ;
28004: LD_VAR 0 2
28008: PPUSH
28009: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28013: LD_VAR 0 2
28017: PPUSH
28018: LD_INT 9
28020: PPUSH
28021: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28025: LD_INT 28
28027: PPUSH
28028: LD_OWVAR 2
28032: PPUSH
28033: LD_INT 2
28035: PPUSH
28036: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28040: LD_INT 29
28042: PPUSH
28043: LD_OWVAR 2
28047: PPUSH
28048: LD_INT 2
28050: PPUSH
28051: CALL_OW 322
// end ;
28055: PPOPN 3
28057: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28058: LD_EXP 81
28062: PUSH
28063: LD_EXP 124
28067: AND
28068: IFFALSE 28179
28070: GO 28072
28072: DISABLE
28073: LD_INT 0
28075: PPUSH
28076: PPUSH
28077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28078: LD_ADDR_VAR 0 3
28082: PUSH
28083: LD_INT 22
28085: PUSH
28086: LD_OWVAR 2
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 25
28097: PUSH
28098: LD_INT 1
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PPUSH
28109: CALL_OW 69
28113: ST_TO_ADDR
// if not tmp then
28114: LD_VAR 0 3
28118: NOT
28119: IFFALSE 28123
// exit ;
28121: GO 28179
// un := tmp [ rand ( 1 , tmp ) ] ;
28123: LD_ADDR_VAR 0 2
28127: PUSH
28128: LD_VAR 0 3
28132: PUSH
28133: LD_INT 1
28135: PPUSH
28136: LD_VAR 0 3
28140: PPUSH
28141: CALL_OW 12
28145: ARRAY
28146: ST_TO_ADDR
// if Crawls ( un ) then
28147: LD_VAR 0 2
28151: PPUSH
28152: CALL_OW 318
28156: IFFALSE 28167
// ComWalk ( un ) ;
28158: LD_VAR 0 2
28162: PPUSH
28163: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28167: LD_VAR 0 2
28171: PPUSH
28172: LD_INT 8
28174: PPUSH
28175: CALL_OW 336
// end ;
28179: PPOPN 3
28181: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28182: LD_EXP 81
28186: PUSH
28187: LD_EXP 125
28191: AND
28192: IFFALSE 28336
28194: GO 28196
28196: DISABLE
28197: LD_INT 0
28199: PPUSH
28200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28201: LD_ADDR_VAR 0 2
28205: PUSH
28206: LD_INT 22
28208: PUSH
28209: LD_OWVAR 2
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 21
28220: PUSH
28221: LD_INT 2
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 2
28230: PUSH
28231: LD_INT 34
28233: PUSH
28234: LD_INT 12
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 34
28243: PUSH
28244: LD_INT 51
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 34
28253: PUSH
28254: LD_INT 32
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: LIST
28271: PPUSH
28272: CALL_OW 69
28276: ST_TO_ADDR
// if not tmp then
28277: LD_VAR 0 2
28281: NOT
28282: IFFALSE 28286
// exit ;
28284: GO 28336
// for i in tmp do
28286: LD_ADDR_VAR 0 1
28290: PUSH
28291: LD_VAR 0 2
28295: PUSH
28296: FOR_IN
28297: IFFALSE 28334
// if GetCargo ( i , mat_artifact ) = 0 then
28299: LD_VAR 0 1
28303: PPUSH
28304: LD_INT 4
28306: PPUSH
28307: CALL_OW 289
28311: PUSH
28312: LD_INT 0
28314: EQUAL
28315: IFFALSE 28332
// SetCargo ( i , mat_siberit , 100 ) ;
28317: LD_VAR 0 1
28321: PPUSH
28322: LD_INT 3
28324: PPUSH
28325: LD_INT 100
28327: PPUSH
28328: CALL_OW 290
28332: GO 28296
28334: POP
28335: POP
// end ;
28336: PPOPN 2
28338: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28339: LD_EXP 81
28343: PUSH
28344: LD_EXP 126
28348: AND
28349: IFFALSE 28532
28351: GO 28353
28353: DISABLE
28354: LD_INT 0
28356: PPUSH
28357: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28358: LD_ADDR_VAR 0 2
28362: PUSH
28363: LD_INT 22
28365: PUSH
28366: LD_OWVAR 2
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PPUSH
28375: CALL_OW 69
28379: ST_TO_ADDR
// if not tmp then
28380: LD_VAR 0 2
28384: NOT
28385: IFFALSE 28389
// exit ;
28387: GO 28532
// for i := 1 to 2 do
28389: LD_ADDR_VAR 0 1
28393: PUSH
28394: DOUBLE
28395: LD_INT 1
28397: DEC
28398: ST_TO_ADDR
28399: LD_INT 2
28401: PUSH
28402: FOR_TO
28403: IFFALSE 28530
// begin uc_side := your_side ;
28405: LD_ADDR_OWVAR 20
28409: PUSH
28410: LD_OWVAR 2
28414: ST_TO_ADDR
// uc_nation := nation_american ;
28415: LD_ADDR_OWVAR 21
28419: PUSH
28420: LD_INT 1
28422: ST_TO_ADDR
// vc_chassis := us_morphling ;
28423: LD_ADDR_OWVAR 37
28427: PUSH
28428: LD_INT 5
28430: ST_TO_ADDR
// vc_engine := engine_siberite ;
28431: LD_ADDR_OWVAR 39
28435: PUSH
28436: LD_INT 3
28438: ST_TO_ADDR
// vc_control := control_computer ;
28439: LD_ADDR_OWVAR 38
28443: PUSH
28444: LD_INT 3
28446: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28447: LD_ADDR_OWVAR 40
28451: PUSH
28452: LD_INT 10
28454: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28455: LD_VAR 0 2
28459: PUSH
28460: LD_INT 1
28462: ARRAY
28463: PPUSH
28464: CALL_OW 310
28468: NOT
28469: IFFALSE 28516
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28471: CALL_OW 45
28475: PPUSH
28476: LD_VAR 0 2
28480: PUSH
28481: LD_INT 1
28483: ARRAY
28484: PPUSH
28485: CALL_OW 250
28489: PPUSH
28490: LD_VAR 0 2
28494: PUSH
28495: LD_INT 1
28497: ARRAY
28498: PPUSH
28499: CALL_OW 251
28503: PPUSH
28504: LD_INT 12
28506: PPUSH
28507: LD_INT 1
28509: PPUSH
28510: CALL_OW 50
28514: GO 28528
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28516: CALL_OW 45
28520: PPUSH
28521: LD_INT 1
28523: PPUSH
28524: CALL_OW 51
// end ;
28528: GO 28402
28530: POP
28531: POP
// end ;
28532: PPOPN 2
28534: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28535: LD_EXP 81
28539: PUSH
28540: LD_EXP 127
28544: AND
28545: IFFALSE 28767
28547: GO 28549
28549: DISABLE
28550: LD_INT 0
28552: PPUSH
28553: PPUSH
28554: PPUSH
28555: PPUSH
28556: PPUSH
28557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28558: LD_ADDR_VAR 0 6
28562: PUSH
28563: LD_INT 22
28565: PUSH
28566: LD_OWVAR 2
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 21
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 3
28587: PUSH
28588: LD_INT 23
28590: PUSH
28591: LD_INT 0
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: LIST
28606: PPUSH
28607: CALL_OW 69
28611: ST_TO_ADDR
// if not tmp then
28612: LD_VAR 0 6
28616: NOT
28617: IFFALSE 28621
// exit ;
28619: GO 28767
// s1 := rand ( 1 , 4 ) ;
28621: LD_ADDR_VAR 0 2
28625: PUSH
28626: LD_INT 1
28628: PPUSH
28629: LD_INT 4
28631: PPUSH
28632: CALL_OW 12
28636: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28637: LD_ADDR_VAR 0 4
28641: PUSH
28642: LD_VAR 0 6
28646: PUSH
28647: LD_INT 1
28649: ARRAY
28650: PPUSH
28651: LD_VAR 0 2
28655: PPUSH
28656: CALL_OW 259
28660: ST_TO_ADDR
// if s1 = 1 then
28661: LD_VAR 0 2
28665: PUSH
28666: LD_INT 1
28668: EQUAL
28669: IFFALSE 28689
// s2 := rand ( 2 , 4 ) else
28671: LD_ADDR_VAR 0 3
28675: PUSH
28676: LD_INT 2
28678: PPUSH
28679: LD_INT 4
28681: PPUSH
28682: CALL_OW 12
28686: ST_TO_ADDR
28687: GO 28697
// s2 := 1 ;
28689: LD_ADDR_VAR 0 3
28693: PUSH
28694: LD_INT 1
28696: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28697: LD_ADDR_VAR 0 5
28701: PUSH
28702: LD_VAR 0 6
28706: PUSH
28707: LD_INT 1
28709: ARRAY
28710: PPUSH
28711: LD_VAR 0 3
28715: PPUSH
28716: CALL_OW 259
28720: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28721: LD_VAR 0 6
28725: PUSH
28726: LD_INT 1
28728: ARRAY
28729: PPUSH
28730: LD_VAR 0 2
28734: PPUSH
28735: LD_VAR 0 5
28739: PPUSH
28740: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28744: LD_VAR 0 6
28748: PUSH
28749: LD_INT 1
28751: ARRAY
28752: PPUSH
28753: LD_VAR 0 3
28757: PPUSH
28758: LD_VAR 0 4
28762: PPUSH
28763: CALL_OW 237
// end ;
28767: PPOPN 6
28769: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28770: LD_EXP 81
28774: PUSH
28775: LD_EXP 128
28779: AND
28780: IFFALSE 28859
28782: GO 28784
28784: DISABLE
28785: LD_INT 0
28787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28788: LD_ADDR_VAR 0 1
28792: PUSH
28793: LD_INT 22
28795: PUSH
28796: LD_OWVAR 2
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 30
28807: PUSH
28808: LD_INT 3
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PPUSH
28819: CALL_OW 69
28823: ST_TO_ADDR
// if not tmp then
28824: LD_VAR 0 1
28828: NOT
28829: IFFALSE 28833
// exit ;
28831: GO 28859
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28833: LD_VAR 0 1
28837: PUSH
28838: LD_INT 1
28840: PPUSH
28841: LD_VAR 0 1
28845: PPUSH
28846: CALL_OW 12
28850: ARRAY
28851: PPUSH
28852: LD_INT 1
28854: PPUSH
28855: CALL_OW 234
// end ;
28859: PPOPN 1
28861: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28862: LD_EXP 81
28866: PUSH
28867: LD_EXP 129
28871: AND
28872: IFFALSE 28984
28874: GO 28876
28876: DISABLE
28877: LD_INT 0
28879: PPUSH
28880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28881: LD_ADDR_VAR 0 2
28885: PUSH
28886: LD_INT 22
28888: PUSH
28889: LD_OWVAR 2
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 2
28900: PUSH
28901: LD_INT 30
28903: PUSH
28904: LD_INT 27
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 30
28913: PUSH
28914: LD_INT 26
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 30
28923: PUSH
28924: LD_INT 28
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PPUSH
28941: CALL_OW 69
28945: ST_TO_ADDR
// if not tmp then
28946: LD_VAR 0 2
28950: NOT
28951: IFFALSE 28955
// exit ;
28953: GO 28984
// for i in tmp do
28955: LD_ADDR_VAR 0 1
28959: PUSH
28960: LD_VAR 0 2
28964: PUSH
28965: FOR_IN
28966: IFFALSE 28982
// SetLives ( i , 1 ) ;
28968: LD_VAR 0 1
28972: PPUSH
28973: LD_INT 1
28975: PPUSH
28976: CALL_OW 234
28980: GO 28965
28982: POP
28983: POP
// end ;
28984: PPOPN 2
28986: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28987: LD_EXP 81
28991: PUSH
28992: LD_EXP 130
28996: AND
28997: IFFALSE 29271
28999: GO 29001
29001: DISABLE
29002: LD_INT 0
29004: PPUSH
29005: PPUSH
29006: PPUSH
// begin i := rand ( 1 , 7 ) ;
29007: LD_ADDR_VAR 0 1
29011: PUSH
29012: LD_INT 1
29014: PPUSH
29015: LD_INT 7
29017: PPUSH
29018: CALL_OW 12
29022: ST_TO_ADDR
// case i of 1 :
29023: LD_VAR 0 1
29027: PUSH
29028: LD_INT 1
29030: DOUBLE
29031: EQUAL
29032: IFTRUE 29036
29034: GO 29046
29036: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29037: LD_STRING earthquake(getX(game), 0, 32)
29039: PPUSH
29040: CALL_OW 559
29044: GO 29271
29046: LD_INT 2
29048: DOUBLE
29049: EQUAL
29050: IFTRUE 29054
29052: GO 29068
29054: POP
// begin ToLua ( displayStucuk(); ) ;
29055: LD_STRING displayStucuk();
29057: PPUSH
29058: CALL_OW 559
// ResetFog ;
29062: CALL_OW 335
// end ; 3 :
29066: GO 29271
29068: LD_INT 3
29070: DOUBLE
29071: EQUAL
29072: IFTRUE 29076
29074: GO 29180
29076: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29077: LD_ADDR_VAR 0 2
29081: PUSH
29082: LD_INT 22
29084: PUSH
29085: LD_OWVAR 2
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 25
29096: PUSH
29097: LD_INT 1
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PPUSH
29108: CALL_OW 69
29112: ST_TO_ADDR
// if not tmp then
29113: LD_VAR 0 2
29117: NOT
29118: IFFALSE 29122
// exit ;
29120: GO 29271
// un := tmp [ rand ( 1 , tmp ) ] ;
29122: LD_ADDR_VAR 0 3
29126: PUSH
29127: LD_VAR 0 2
29131: PUSH
29132: LD_INT 1
29134: PPUSH
29135: LD_VAR 0 2
29139: PPUSH
29140: CALL_OW 12
29144: ARRAY
29145: ST_TO_ADDR
// if Crawls ( un ) then
29146: LD_VAR 0 3
29150: PPUSH
29151: CALL_OW 318
29155: IFFALSE 29166
// ComWalk ( un ) ;
29157: LD_VAR 0 3
29161: PPUSH
29162: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29166: LD_VAR 0 3
29170: PPUSH
29171: LD_INT 8
29173: PPUSH
29174: CALL_OW 336
// end ; 4 :
29178: GO 29271
29180: LD_INT 4
29182: DOUBLE
29183: EQUAL
29184: IFTRUE 29188
29186: GO 29249
29188: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29189: LD_ADDR_VAR 0 2
29193: PUSH
29194: LD_INT 22
29196: PUSH
29197: LD_OWVAR 2
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 30
29208: PUSH
29209: LD_INT 29
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PPUSH
29220: CALL_OW 69
29224: ST_TO_ADDR
// if not tmp then
29225: LD_VAR 0 2
29229: NOT
29230: IFFALSE 29234
// exit ;
29232: GO 29271
// DestroyUnit ( tmp [ 1 ] ) ;
29234: LD_VAR 0 2
29238: PUSH
29239: LD_INT 1
29241: ARRAY
29242: PPUSH
29243: CALL_OW 65
// end ; 5 .. 7 :
29247: GO 29271
29249: LD_INT 5
29251: DOUBLE
29252: GREATEREQUAL
29253: IFFALSE 29261
29255: LD_INT 7
29257: DOUBLE
29258: LESSEQUAL
29259: IFTRUE 29263
29261: GO 29270
29263: POP
// StreamSibBomb ; end ;
29264: CALL 25521 0 0
29268: GO 29271
29270: POP
// end ;
29271: PPOPN 3
29273: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29274: LD_EXP 81
29278: PUSH
29279: LD_EXP 131
29283: AND
29284: IFFALSE 29440
29286: GO 29288
29288: DISABLE
29289: LD_INT 0
29291: PPUSH
29292: PPUSH
29293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29294: LD_ADDR_VAR 0 2
29298: PUSH
29299: LD_INT 81
29301: PUSH
29302: LD_OWVAR 2
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 2
29313: PUSH
29314: LD_INT 21
29316: PUSH
29317: LD_INT 1
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 21
29326: PUSH
29327: LD_INT 2
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: LIST
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PPUSH
29343: CALL_OW 69
29347: ST_TO_ADDR
// if not tmp then
29348: LD_VAR 0 2
29352: NOT
29353: IFFALSE 29357
// exit ;
29355: GO 29440
// p := 0 ;
29357: LD_ADDR_VAR 0 3
29361: PUSH
29362: LD_INT 0
29364: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29365: LD_INT 35
29367: PPUSH
29368: CALL_OW 67
// p := p + 1 ;
29372: LD_ADDR_VAR 0 3
29376: PUSH
29377: LD_VAR 0 3
29381: PUSH
29382: LD_INT 1
29384: PLUS
29385: ST_TO_ADDR
// for i in tmp do
29386: LD_ADDR_VAR 0 1
29390: PUSH
29391: LD_VAR 0 2
29395: PUSH
29396: FOR_IN
29397: IFFALSE 29428
// if GetLives ( i ) < 1000 then
29399: LD_VAR 0 1
29403: PPUSH
29404: CALL_OW 256
29408: PUSH
29409: LD_INT 1000
29411: LESS
29412: IFFALSE 29426
// SetLives ( i , 1000 ) ;
29414: LD_VAR 0 1
29418: PPUSH
29419: LD_INT 1000
29421: PPUSH
29422: CALL_OW 234
29426: GO 29396
29428: POP
29429: POP
// until p > 20 ;
29430: LD_VAR 0 3
29434: PUSH
29435: LD_INT 20
29437: GREATER
29438: IFFALSE 29365
// end ;
29440: PPOPN 3
29442: END
// every 0 0$1 trigger StreamModeActive and sTime do
29443: LD_EXP 81
29447: PUSH
29448: LD_EXP 132
29452: AND
29453: IFFALSE 29488
29455: GO 29457
29457: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29458: LD_INT 28
29460: PPUSH
29461: LD_OWVAR 2
29465: PPUSH
29466: LD_INT 2
29468: PPUSH
29469: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29473: LD_INT 30
29475: PPUSH
29476: LD_OWVAR 2
29480: PPUSH
29481: LD_INT 2
29483: PPUSH
29484: CALL_OW 322
// end ;
29488: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29489: LD_EXP 81
29493: PUSH
29494: LD_EXP 133
29498: AND
29499: IFFALSE 29620
29501: GO 29503
29503: DISABLE
29504: LD_INT 0
29506: PPUSH
29507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29508: LD_ADDR_VAR 0 2
29512: PUSH
29513: LD_INT 22
29515: PUSH
29516: LD_OWVAR 2
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 21
29527: PUSH
29528: LD_INT 1
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 3
29537: PUSH
29538: LD_INT 23
29540: PUSH
29541: LD_INT 0
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: LIST
29556: PPUSH
29557: CALL_OW 69
29561: ST_TO_ADDR
// if not tmp then
29562: LD_VAR 0 2
29566: NOT
29567: IFFALSE 29571
// exit ;
29569: GO 29620
// for i in tmp do
29571: LD_ADDR_VAR 0 1
29575: PUSH
29576: LD_VAR 0 2
29580: PUSH
29581: FOR_IN
29582: IFFALSE 29618
// begin if Crawls ( i ) then
29584: LD_VAR 0 1
29588: PPUSH
29589: CALL_OW 318
29593: IFFALSE 29604
// ComWalk ( i ) ;
29595: LD_VAR 0 1
29599: PPUSH
29600: CALL_OW 138
// SetClass ( i , 2 ) ;
29604: LD_VAR 0 1
29608: PPUSH
29609: LD_INT 2
29611: PPUSH
29612: CALL_OW 336
// end ;
29616: GO 29581
29618: POP
29619: POP
// end ;
29620: PPOPN 2
29622: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29623: LD_EXP 81
29627: PUSH
29628: LD_EXP 134
29632: AND
29633: IFFALSE 29914
29635: GO 29637
29637: DISABLE
29638: LD_INT 0
29640: PPUSH
29641: PPUSH
29642: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29643: LD_OWVAR 2
29647: PPUSH
29648: LD_INT 9
29650: PPUSH
29651: LD_INT 1
29653: PPUSH
29654: LD_INT 1
29656: PPUSH
29657: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29661: LD_INT 9
29663: PPUSH
29664: LD_OWVAR 2
29668: PPUSH
29669: CALL_OW 343
// uc_side := 9 ;
29673: LD_ADDR_OWVAR 20
29677: PUSH
29678: LD_INT 9
29680: ST_TO_ADDR
// uc_nation := 2 ;
29681: LD_ADDR_OWVAR 21
29685: PUSH
29686: LD_INT 2
29688: ST_TO_ADDR
// hc_name := Dark Warrior ;
29689: LD_ADDR_OWVAR 26
29693: PUSH
29694: LD_STRING Dark Warrior
29696: ST_TO_ADDR
// hc_gallery :=  ;
29697: LD_ADDR_OWVAR 33
29701: PUSH
29702: LD_STRING 
29704: ST_TO_ADDR
// hc_noskilllimit := true ;
29705: LD_ADDR_OWVAR 76
29709: PUSH
29710: LD_INT 1
29712: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29713: LD_ADDR_OWVAR 31
29717: PUSH
29718: LD_INT 30
29720: PUSH
29721: LD_INT 30
29723: PUSH
29724: LD_INT 30
29726: PUSH
29727: LD_INT 30
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: ST_TO_ADDR
// un := CreateHuman ;
29736: LD_ADDR_VAR 0 3
29740: PUSH
29741: CALL_OW 44
29745: ST_TO_ADDR
// hc_noskilllimit := false ;
29746: LD_ADDR_OWVAR 76
29750: PUSH
29751: LD_INT 0
29753: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29754: LD_VAR 0 3
29758: PPUSH
29759: LD_INT 1
29761: PPUSH
29762: CALL_OW 51
// p := 0 ;
29766: LD_ADDR_VAR 0 2
29770: PUSH
29771: LD_INT 0
29773: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29774: LD_INT 35
29776: PPUSH
29777: CALL_OW 67
// p := p + 1 ;
29781: LD_ADDR_VAR 0 2
29785: PUSH
29786: LD_VAR 0 2
29790: PUSH
29791: LD_INT 1
29793: PLUS
29794: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29795: LD_VAR 0 3
29799: PPUSH
29800: CALL_OW 256
29804: PUSH
29805: LD_INT 1000
29807: LESS
29808: IFFALSE 29822
// SetLives ( un , 1000 ) ;
29810: LD_VAR 0 3
29814: PPUSH
29815: LD_INT 1000
29817: PPUSH
29818: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29822: LD_VAR 0 3
29826: PPUSH
29827: LD_INT 81
29829: PUSH
29830: LD_OWVAR 2
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 91
29841: PUSH
29842: LD_VAR 0 3
29846: PUSH
29847: LD_INT 30
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: LIST
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PPUSH
29859: CALL_OW 69
29863: PPUSH
29864: LD_VAR 0 3
29868: PPUSH
29869: CALL_OW 74
29873: PPUSH
29874: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29878: LD_VAR 0 2
29882: PUSH
29883: LD_INT 60
29885: GREATER
29886: PUSH
29887: LD_VAR 0 3
29891: PPUSH
29892: CALL_OW 301
29896: OR
29897: IFFALSE 29774
// if un then
29899: LD_VAR 0 3
29903: IFFALSE 29914
// RemoveUnit ( un ) ;
29905: LD_VAR 0 3
29909: PPUSH
29910: CALL_OW 64
// end ;
29914: PPOPN 3
29916: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29917: LD_INT 0
29919: PPUSH
// case cmd of 301 :
29920: LD_VAR 0 1
29924: PUSH
29925: LD_INT 301
29927: DOUBLE
29928: EQUAL
29929: IFTRUE 29933
29931: GO 29965
29933: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29934: LD_VAR 0 6
29938: PPUSH
29939: LD_VAR 0 7
29943: PPUSH
29944: LD_VAR 0 8
29948: PPUSH
29949: LD_VAR 0 4
29953: PPUSH
29954: LD_VAR 0 5
29958: PPUSH
29959: CALL 31166 0 5
29963: GO 30086
29965: LD_INT 302
29967: DOUBLE
29968: EQUAL
29969: IFTRUE 29973
29971: GO 30010
29973: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29974: LD_VAR 0 6
29978: PPUSH
29979: LD_VAR 0 7
29983: PPUSH
29984: LD_VAR 0 8
29988: PPUSH
29989: LD_VAR 0 9
29993: PPUSH
29994: LD_VAR 0 4
29998: PPUSH
29999: LD_VAR 0 5
30003: PPUSH
30004: CALL 31257 0 6
30008: GO 30086
30010: LD_INT 303
30012: DOUBLE
30013: EQUAL
30014: IFTRUE 30018
30016: GO 30055
30018: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30019: LD_VAR 0 6
30023: PPUSH
30024: LD_VAR 0 7
30028: PPUSH
30029: LD_VAR 0 8
30033: PPUSH
30034: LD_VAR 0 9
30038: PPUSH
30039: LD_VAR 0 4
30043: PPUSH
30044: LD_VAR 0 5
30048: PPUSH
30049: CALL 30091 0 6
30053: GO 30086
30055: LD_INT 304
30057: DOUBLE
30058: EQUAL
30059: IFTRUE 30063
30061: GO 30085
30063: POP
// hHackTeleport ( unit , x , y ) ; end ;
30064: LD_VAR 0 2
30068: PPUSH
30069: LD_VAR 0 4
30073: PPUSH
30074: LD_VAR 0 5
30078: PPUSH
30079: CALL 31850 0 3
30083: GO 30086
30085: POP
// end ;
30086: LD_VAR 0 12
30090: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30091: LD_INT 0
30093: PPUSH
30094: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30095: LD_VAR 0 1
30099: PUSH
30100: LD_INT 1
30102: LESS
30103: PUSH
30104: LD_VAR 0 1
30108: PUSH
30109: LD_INT 3
30111: GREATER
30112: OR
30113: PUSH
30114: LD_VAR 0 5
30118: PPUSH
30119: LD_VAR 0 6
30123: PPUSH
30124: CALL_OW 428
30128: OR
30129: IFFALSE 30133
// exit ;
30131: GO 30853
// uc_side := your_side ;
30133: LD_ADDR_OWVAR 20
30137: PUSH
30138: LD_OWVAR 2
30142: ST_TO_ADDR
// uc_nation := nation ;
30143: LD_ADDR_OWVAR 21
30147: PUSH
30148: LD_VAR 0 1
30152: ST_TO_ADDR
// bc_level = 1 ;
30153: LD_ADDR_OWVAR 43
30157: PUSH
30158: LD_INT 1
30160: ST_TO_ADDR
// case btype of 1 :
30161: LD_VAR 0 2
30165: PUSH
30166: LD_INT 1
30168: DOUBLE
30169: EQUAL
30170: IFTRUE 30174
30172: GO 30185
30174: POP
// bc_type := b_depot ; 2 :
30175: LD_ADDR_OWVAR 42
30179: PUSH
30180: LD_INT 0
30182: ST_TO_ADDR
30183: GO 30797
30185: LD_INT 2
30187: DOUBLE
30188: EQUAL
30189: IFTRUE 30193
30191: GO 30204
30193: POP
// bc_type := b_warehouse ; 3 :
30194: LD_ADDR_OWVAR 42
30198: PUSH
30199: LD_INT 1
30201: ST_TO_ADDR
30202: GO 30797
30204: LD_INT 3
30206: DOUBLE
30207: EQUAL
30208: IFTRUE 30212
30210: GO 30223
30212: POP
// bc_type := b_lab ; 4 .. 9 :
30213: LD_ADDR_OWVAR 42
30217: PUSH
30218: LD_INT 6
30220: ST_TO_ADDR
30221: GO 30797
30223: LD_INT 4
30225: DOUBLE
30226: GREATEREQUAL
30227: IFFALSE 30235
30229: LD_INT 9
30231: DOUBLE
30232: LESSEQUAL
30233: IFTRUE 30237
30235: GO 30289
30237: POP
// begin bc_type := b_lab_half ;
30238: LD_ADDR_OWVAR 42
30242: PUSH
30243: LD_INT 7
30245: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30246: LD_ADDR_OWVAR 44
30250: PUSH
30251: LD_INT 10
30253: PUSH
30254: LD_INT 11
30256: PUSH
30257: LD_INT 12
30259: PUSH
30260: LD_INT 15
30262: PUSH
30263: LD_INT 14
30265: PUSH
30266: LD_INT 13
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: PUSH
30277: LD_VAR 0 2
30281: PUSH
30282: LD_INT 3
30284: MINUS
30285: ARRAY
30286: ST_TO_ADDR
// end ; 10 .. 13 :
30287: GO 30797
30289: LD_INT 10
30291: DOUBLE
30292: GREATEREQUAL
30293: IFFALSE 30301
30295: LD_INT 13
30297: DOUBLE
30298: LESSEQUAL
30299: IFTRUE 30303
30301: GO 30380
30303: POP
// begin bc_type := b_lab_full ;
30304: LD_ADDR_OWVAR 42
30308: PUSH
30309: LD_INT 8
30311: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30312: LD_ADDR_OWVAR 44
30316: PUSH
30317: LD_INT 10
30319: PUSH
30320: LD_INT 12
30322: PUSH
30323: LD_INT 14
30325: PUSH
30326: LD_INT 13
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: PUSH
30335: LD_VAR 0 2
30339: PUSH
30340: LD_INT 9
30342: MINUS
30343: ARRAY
30344: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30345: LD_ADDR_OWVAR 45
30349: PUSH
30350: LD_INT 11
30352: PUSH
30353: LD_INT 15
30355: PUSH
30356: LD_INT 12
30358: PUSH
30359: LD_INT 15
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: PUSH
30368: LD_VAR 0 2
30372: PUSH
30373: LD_INT 9
30375: MINUS
30376: ARRAY
30377: ST_TO_ADDR
// end ; 14 :
30378: GO 30797
30380: LD_INT 14
30382: DOUBLE
30383: EQUAL
30384: IFTRUE 30388
30386: GO 30399
30388: POP
// bc_type := b_workshop ; 15 :
30389: LD_ADDR_OWVAR 42
30393: PUSH
30394: LD_INT 2
30396: ST_TO_ADDR
30397: GO 30797
30399: LD_INT 15
30401: DOUBLE
30402: EQUAL
30403: IFTRUE 30407
30405: GO 30418
30407: POP
// bc_type := b_factory ; 16 :
30408: LD_ADDR_OWVAR 42
30412: PUSH
30413: LD_INT 3
30415: ST_TO_ADDR
30416: GO 30797
30418: LD_INT 16
30420: DOUBLE
30421: EQUAL
30422: IFTRUE 30426
30424: GO 30437
30426: POP
// bc_type := b_ext_gun ; 17 :
30427: LD_ADDR_OWVAR 42
30431: PUSH
30432: LD_INT 17
30434: ST_TO_ADDR
30435: GO 30797
30437: LD_INT 17
30439: DOUBLE
30440: EQUAL
30441: IFTRUE 30445
30443: GO 30473
30445: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30446: LD_ADDR_OWVAR 42
30450: PUSH
30451: LD_INT 19
30453: PUSH
30454: LD_INT 23
30456: PUSH
30457: LD_INT 19
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: LIST
30464: PUSH
30465: LD_VAR 0 1
30469: ARRAY
30470: ST_TO_ADDR
30471: GO 30797
30473: LD_INT 18
30475: DOUBLE
30476: EQUAL
30477: IFTRUE 30481
30479: GO 30492
30481: POP
// bc_type := b_ext_radar ; 19 :
30482: LD_ADDR_OWVAR 42
30486: PUSH
30487: LD_INT 20
30489: ST_TO_ADDR
30490: GO 30797
30492: LD_INT 19
30494: DOUBLE
30495: EQUAL
30496: IFTRUE 30500
30498: GO 30511
30500: POP
// bc_type := b_ext_radio ; 20 :
30501: LD_ADDR_OWVAR 42
30505: PUSH
30506: LD_INT 22
30508: ST_TO_ADDR
30509: GO 30797
30511: LD_INT 20
30513: DOUBLE
30514: EQUAL
30515: IFTRUE 30519
30517: GO 30530
30519: POP
// bc_type := b_ext_siberium ; 21 :
30520: LD_ADDR_OWVAR 42
30524: PUSH
30525: LD_INT 21
30527: ST_TO_ADDR
30528: GO 30797
30530: LD_INT 21
30532: DOUBLE
30533: EQUAL
30534: IFTRUE 30538
30536: GO 30549
30538: POP
// bc_type := b_ext_computer ; 22 :
30539: LD_ADDR_OWVAR 42
30543: PUSH
30544: LD_INT 24
30546: ST_TO_ADDR
30547: GO 30797
30549: LD_INT 22
30551: DOUBLE
30552: EQUAL
30553: IFTRUE 30557
30555: GO 30568
30557: POP
// bc_type := b_ext_track ; 23 :
30558: LD_ADDR_OWVAR 42
30562: PUSH
30563: LD_INT 16
30565: ST_TO_ADDR
30566: GO 30797
30568: LD_INT 23
30570: DOUBLE
30571: EQUAL
30572: IFTRUE 30576
30574: GO 30587
30576: POP
// bc_type := b_ext_laser ; 24 :
30577: LD_ADDR_OWVAR 42
30581: PUSH
30582: LD_INT 25
30584: ST_TO_ADDR
30585: GO 30797
30587: LD_INT 24
30589: DOUBLE
30590: EQUAL
30591: IFTRUE 30595
30593: GO 30606
30595: POP
// bc_type := b_control_tower ; 25 :
30596: LD_ADDR_OWVAR 42
30600: PUSH
30601: LD_INT 36
30603: ST_TO_ADDR
30604: GO 30797
30606: LD_INT 25
30608: DOUBLE
30609: EQUAL
30610: IFTRUE 30614
30612: GO 30625
30614: POP
// bc_type := b_breastwork ; 26 :
30615: LD_ADDR_OWVAR 42
30619: PUSH
30620: LD_INT 31
30622: ST_TO_ADDR
30623: GO 30797
30625: LD_INT 26
30627: DOUBLE
30628: EQUAL
30629: IFTRUE 30633
30631: GO 30644
30633: POP
// bc_type := b_bunker ; 27 :
30634: LD_ADDR_OWVAR 42
30638: PUSH
30639: LD_INT 32
30641: ST_TO_ADDR
30642: GO 30797
30644: LD_INT 27
30646: DOUBLE
30647: EQUAL
30648: IFTRUE 30652
30650: GO 30663
30652: POP
// bc_type := b_turret ; 28 :
30653: LD_ADDR_OWVAR 42
30657: PUSH
30658: LD_INT 33
30660: ST_TO_ADDR
30661: GO 30797
30663: LD_INT 28
30665: DOUBLE
30666: EQUAL
30667: IFTRUE 30671
30669: GO 30682
30671: POP
// bc_type := b_armoury ; 29 :
30672: LD_ADDR_OWVAR 42
30676: PUSH
30677: LD_INT 4
30679: ST_TO_ADDR
30680: GO 30797
30682: LD_INT 29
30684: DOUBLE
30685: EQUAL
30686: IFTRUE 30690
30688: GO 30701
30690: POP
// bc_type := b_barracks ; 30 :
30691: LD_ADDR_OWVAR 42
30695: PUSH
30696: LD_INT 5
30698: ST_TO_ADDR
30699: GO 30797
30701: LD_INT 30
30703: DOUBLE
30704: EQUAL
30705: IFTRUE 30709
30707: GO 30720
30709: POP
// bc_type := b_solar_power ; 31 :
30710: LD_ADDR_OWVAR 42
30714: PUSH
30715: LD_INT 27
30717: ST_TO_ADDR
30718: GO 30797
30720: LD_INT 31
30722: DOUBLE
30723: EQUAL
30724: IFTRUE 30728
30726: GO 30739
30728: POP
// bc_type := b_oil_power ; 32 :
30729: LD_ADDR_OWVAR 42
30733: PUSH
30734: LD_INT 26
30736: ST_TO_ADDR
30737: GO 30797
30739: LD_INT 32
30741: DOUBLE
30742: EQUAL
30743: IFTRUE 30747
30745: GO 30758
30747: POP
// bc_type := b_siberite_power ; 33 :
30748: LD_ADDR_OWVAR 42
30752: PUSH
30753: LD_INT 28
30755: ST_TO_ADDR
30756: GO 30797
30758: LD_INT 33
30760: DOUBLE
30761: EQUAL
30762: IFTRUE 30766
30764: GO 30777
30766: POP
// bc_type := b_oil_mine ; 34 :
30767: LD_ADDR_OWVAR 42
30771: PUSH
30772: LD_INT 29
30774: ST_TO_ADDR
30775: GO 30797
30777: LD_INT 34
30779: DOUBLE
30780: EQUAL
30781: IFTRUE 30785
30783: GO 30796
30785: POP
// bc_type := b_siberite_mine ; end ;
30786: LD_ADDR_OWVAR 42
30790: PUSH
30791: LD_INT 30
30793: ST_TO_ADDR
30794: GO 30797
30796: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30797: LD_ADDR_VAR 0 8
30801: PUSH
30802: LD_VAR 0 5
30806: PPUSH
30807: LD_VAR 0 6
30811: PPUSH
30812: LD_VAR 0 3
30816: PPUSH
30817: CALL_OW 47
30821: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30822: LD_OWVAR 42
30826: PUSH
30827: LD_INT 32
30829: PUSH
30830: LD_INT 33
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: IN
30837: IFFALSE 30853
// PlaceWeaponTurret ( b , weapon ) ;
30839: LD_VAR 0 8
30843: PPUSH
30844: LD_VAR 0 4
30848: PPUSH
30849: CALL_OW 431
// end ;
30853: LD_VAR 0 7
30857: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30858: LD_INT 0
30860: PPUSH
30861: PPUSH
30862: PPUSH
30863: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30864: LD_ADDR_VAR 0 4
30868: PUSH
30869: LD_INT 22
30871: PUSH
30872: LD_OWVAR 2
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 2
30883: PUSH
30884: LD_INT 30
30886: PUSH
30887: LD_INT 0
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 30
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: LIST
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PPUSH
30913: CALL_OW 69
30917: ST_TO_ADDR
// if not tmp then
30918: LD_VAR 0 4
30922: NOT
30923: IFFALSE 30927
// exit ;
30925: GO 30986
// for i in tmp do
30927: LD_ADDR_VAR 0 2
30931: PUSH
30932: LD_VAR 0 4
30936: PUSH
30937: FOR_IN
30938: IFFALSE 30984
// for j = 1 to 3 do
30940: LD_ADDR_VAR 0 3
30944: PUSH
30945: DOUBLE
30946: LD_INT 1
30948: DEC
30949: ST_TO_ADDR
30950: LD_INT 3
30952: PUSH
30953: FOR_TO
30954: IFFALSE 30980
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30956: LD_VAR 0 2
30960: PPUSH
30961: CALL_OW 274
30965: PPUSH
30966: LD_VAR 0 3
30970: PPUSH
30971: LD_INT 99999
30973: PPUSH
30974: CALL_OW 277
30978: GO 30953
30980: POP
30981: POP
30982: GO 30937
30984: POP
30985: POP
// end ;
30986: LD_VAR 0 1
30990: RET
// export function hHackSetLevel10 ; var i , j ; begin
30991: LD_INT 0
30993: PPUSH
30994: PPUSH
30995: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30996: LD_ADDR_VAR 0 2
31000: PUSH
31001: LD_INT 21
31003: PUSH
31004: LD_INT 1
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PPUSH
31011: CALL_OW 69
31015: PUSH
31016: FOR_IN
31017: IFFALSE 31069
// if IsSelected ( i ) then
31019: LD_VAR 0 2
31023: PPUSH
31024: CALL_OW 306
31028: IFFALSE 31067
// begin for j := 1 to 4 do
31030: LD_ADDR_VAR 0 3
31034: PUSH
31035: DOUBLE
31036: LD_INT 1
31038: DEC
31039: ST_TO_ADDR
31040: LD_INT 4
31042: PUSH
31043: FOR_TO
31044: IFFALSE 31065
// SetSkill ( i , j , 10 ) ;
31046: LD_VAR 0 2
31050: PPUSH
31051: LD_VAR 0 3
31055: PPUSH
31056: LD_INT 10
31058: PPUSH
31059: CALL_OW 237
31063: GO 31043
31065: POP
31066: POP
// end ;
31067: GO 31016
31069: POP
31070: POP
// end ;
31071: LD_VAR 0 1
31075: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31076: LD_INT 0
31078: PPUSH
31079: PPUSH
31080: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31081: LD_ADDR_VAR 0 2
31085: PUSH
31086: LD_INT 22
31088: PUSH
31089: LD_OWVAR 2
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 21
31100: PUSH
31101: LD_INT 1
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PPUSH
31112: CALL_OW 69
31116: PUSH
31117: FOR_IN
31118: IFFALSE 31159
// begin for j := 1 to 4 do
31120: LD_ADDR_VAR 0 3
31124: PUSH
31125: DOUBLE
31126: LD_INT 1
31128: DEC
31129: ST_TO_ADDR
31130: LD_INT 4
31132: PUSH
31133: FOR_TO
31134: IFFALSE 31155
// SetSkill ( i , j , 10 ) ;
31136: LD_VAR 0 2
31140: PPUSH
31141: LD_VAR 0 3
31145: PPUSH
31146: LD_INT 10
31148: PPUSH
31149: CALL_OW 237
31153: GO 31133
31155: POP
31156: POP
// end ;
31157: GO 31117
31159: POP
31160: POP
// end ;
31161: LD_VAR 0 1
31165: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31166: LD_INT 0
31168: PPUSH
// uc_side := your_side ;
31169: LD_ADDR_OWVAR 20
31173: PUSH
31174: LD_OWVAR 2
31178: ST_TO_ADDR
// uc_nation := nation ;
31179: LD_ADDR_OWVAR 21
31183: PUSH
31184: LD_VAR 0 1
31188: ST_TO_ADDR
// InitHc ;
31189: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31193: LD_INT 0
31195: PPUSH
31196: LD_VAR 0 2
31200: PPUSH
31201: LD_VAR 0 3
31205: PPUSH
31206: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31210: LD_VAR 0 4
31214: PPUSH
31215: LD_VAR 0 5
31219: PPUSH
31220: CALL_OW 428
31224: PUSH
31225: LD_INT 0
31227: EQUAL
31228: IFFALSE 31252
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31230: CALL_OW 44
31234: PPUSH
31235: LD_VAR 0 4
31239: PPUSH
31240: LD_VAR 0 5
31244: PPUSH
31245: LD_INT 1
31247: PPUSH
31248: CALL_OW 48
// end ;
31252: LD_VAR 0 6
31256: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31257: LD_INT 0
31259: PPUSH
31260: PPUSH
// uc_side := your_side ;
31261: LD_ADDR_OWVAR 20
31265: PUSH
31266: LD_OWVAR 2
31270: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31271: LD_VAR 0 1
31275: PUSH
31276: LD_INT 1
31278: PUSH
31279: LD_INT 2
31281: PUSH
31282: LD_INT 3
31284: PUSH
31285: LD_INT 4
31287: PUSH
31288: LD_INT 5
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: IN
31298: IFFALSE 31310
// uc_nation := nation_american else
31300: LD_ADDR_OWVAR 21
31304: PUSH
31305: LD_INT 1
31307: ST_TO_ADDR
31308: GO 31353
// if chassis in [ 11 , 12 , 13 , 14 ] then
31310: LD_VAR 0 1
31314: PUSH
31315: LD_INT 11
31317: PUSH
31318: LD_INT 12
31320: PUSH
31321: LD_INT 13
31323: PUSH
31324: LD_INT 14
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: IN
31333: IFFALSE 31345
// uc_nation := nation_arabian else
31335: LD_ADDR_OWVAR 21
31339: PUSH
31340: LD_INT 2
31342: ST_TO_ADDR
31343: GO 31353
// uc_nation := nation_russian ;
31345: LD_ADDR_OWVAR 21
31349: PUSH
31350: LD_INT 3
31352: ST_TO_ADDR
// vc_chassis := chassis ;
31353: LD_ADDR_OWVAR 37
31357: PUSH
31358: LD_VAR 0 1
31362: ST_TO_ADDR
// vc_engine := engine ;
31363: LD_ADDR_OWVAR 39
31367: PUSH
31368: LD_VAR 0 2
31372: ST_TO_ADDR
// vc_control := control ;
31373: LD_ADDR_OWVAR 38
31377: PUSH
31378: LD_VAR 0 3
31382: ST_TO_ADDR
// vc_weapon := weapon ;
31383: LD_ADDR_OWVAR 40
31387: PUSH
31388: LD_VAR 0 4
31392: ST_TO_ADDR
// un := CreateVehicle ;
31393: LD_ADDR_VAR 0 8
31397: PUSH
31398: CALL_OW 45
31402: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31403: LD_VAR 0 8
31407: PPUSH
31408: LD_INT 0
31410: PPUSH
31411: LD_INT 5
31413: PPUSH
31414: CALL_OW 12
31418: PPUSH
31419: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31423: LD_VAR 0 8
31427: PPUSH
31428: LD_VAR 0 5
31432: PPUSH
31433: LD_VAR 0 6
31437: PPUSH
31438: LD_INT 1
31440: PPUSH
31441: CALL_OW 48
// end ;
31445: LD_VAR 0 7
31449: RET
// export hInvincible ; every 1 do
31450: GO 31452
31452: DISABLE
// hInvincible := [ ] ;
31453: LD_ADDR_EXP 135
31457: PUSH
31458: EMPTY
31459: ST_TO_ADDR
31460: END
// every 10 do var i ;
31461: GO 31463
31463: DISABLE
31464: LD_INT 0
31466: PPUSH
// begin enable ;
31467: ENABLE
// if not hInvincible then
31468: LD_EXP 135
31472: NOT
31473: IFFALSE 31477
// exit ;
31475: GO 31521
// for i in hInvincible do
31477: LD_ADDR_VAR 0 1
31481: PUSH
31482: LD_EXP 135
31486: PUSH
31487: FOR_IN
31488: IFFALSE 31519
// if GetLives ( i ) < 1000 then
31490: LD_VAR 0 1
31494: PPUSH
31495: CALL_OW 256
31499: PUSH
31500: LD_INT 1000
31502: LESS
31503: IFFALSE 31517
// SetLives ( i , 1000 ) ;
31505: LD_VAR 0 1
31509: PPUSH
31510: LD_INT 1000
31512: PPUSH
31513: CALL_OW 234
31517: GO 31487
31519: POP
31520: POP
// end ;
31521: PPOPN 1
31523: END
// export function hHackInvincible ; var i ; begin
31524: LD_INT 0
31526: PPUSH
31527: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31528: LD_ADDR_VAR 0 2
31532: PUSH
31533: LD_INT 2
31535: PUSH
31536: LD_INT 21
31538: PUSH
31539: LD_INT 1
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 21
31548: PUSH
31549: LD_INT 2
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: LIST
31560: PPUSH
31561: CALL_OW 69
31565: PUSH
31566: FOR_IN
31567: IFFALSE 31628
// if IsSelected ( i ) then
31569: LD_VAR 0 2
31573: PPUSH
31574: CALL_OW 306
31578: IFFALSE 31626
// begin if i in hInvincible then
31580: LD_VAR 0 2
31584: PUSH
31585: LD_EXP 135
31589: IN
31590: IFFALSE 31610
// hInvincible := hInvincible diff i else
31592: LD_ADDR_EXP 135
31596: PUSH
31597: LD_EXP 135
31601: PUSH
31602: LD_VAR 0 2
31606: DIFF
31607: ST_TO_ADDR
31608: GO 31626
// hInvincible := hInvincible union i ;
31610: LD_ADDR_EXP 135
31614: PUSH
31615: LD_EXP 135
31619: PUSH
31620: LD_VAR 0 2
31624: UNION
31625: ST_TO_ADDR
// end ;
31626: GO 31566
31628: POP
31629: POP
// end ;
31630: LD_VAR 0 1
31634: RET
// export function hHackInvisible ; var i , j ; begin
31635: LD_INT 0
31637: PPUSH
31638: PPUSH
31639: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31640: LD_ADDR_VAR 0 2
31644: PUSH
31645: LD_INT 21
31647: PUSH
31648: LD_INT 1
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PPUSH
31655: CALL_OW 69
31659: PUSH
31660: FOR_IN
31661: IFFALSE 31685
// if IsSelected ( i ) then
31663: LD_VAR 0 2
31667: PPUSH
31668: CALL_OW 306
31672: IFFALSE 31683
// ComForceInvisible ( i ) ;
31674: LD_VAR 0 2
31678: PPUSH
31679: CALL_OW 496
31683: GO 31660
31685: POP
31686: POP
// end ;
31687: LD_VAR 0 1
31691: RET
// export function hHackChangeYourSide ; begin
31692: LD_INT 0
31694: PPUSH
// if your_side = 8 then
31695: LD_OWVAR 2
31699: PUSH
31700: LD_INT 8
31702: EQUAL
31703: IFFALSE 31715
// your_side := 0 else
31705: LD_ADDR_OWVAR 2
31709: PUSH
31710: LD_INT 0
31712: ST_TO_ADDR
31713: GO 31729
// your_side := your_side + 1 ;
31715: LD_ADDR_OWVAR 2
31719: PUSH
31720: LD_OWVAR 2
31724: PUSH
31725: LD_INT 1
31727: PLUS
31728: ST_TO_ADDR
// end ;
31729: LD_VAR 0 1
31733: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31734: LD_INT 0
31736: PPUSH
31737: PPUSH
31738: PPUSH
// for i in all_units do
31739: LD_ADDR_VAR 0 2
31743: PUSH
31744: LD_OWVAR 3
31748: PUSH
31749: FOR_IN
31750: IFFALSE 31828
// if IsSelected ( i ) then
31752: LD_VAR 0 2
31756: PPUSH
31757: CALL_OW 306
31761: IFFALSE 31826
// begin j := GetSide ( i ) ;
31763: LD_ADDR_VAR 0 3
31767: PUSH
31768: LD_VAR 0 2
31772: PPUSH
31773: CALL_OW 255
31777: ST_TO_ADDR
// if j = 8 then
31778: LD_VAR 0 3
31782: PUSH
31783: LD_INT 8
31785: EQUAL
31786: IFFALSE 31798
// j := 0 else
31788: LD_ADDR_VAR 0 3
31792: PUSH
31793: LD_INT 0
31795: ST_TO_ADDR
31796: GO 31812
// j := j + 1 ;
31798: LD_ADDR_VAR 0 3
31802: PUSH
31803: LD_VAR 0 3
31807: PUSH
31808: LD_INT 1
31810: PLUS
31811: ST_TO_ADDR
// SetSide ( i , j ) ;
31812: LD_VAR 0 2
31816: PPUSH
31817: LD_VAR 0 3
31821: PPUSH
31822: CALL_OW 235
// end ;
31826: GO 31749
31828: POP
31829: POP
// end ;
31830: LD_VAR 0 1
31834: RET
// export function hHackFog ; begin
31835: LD_INT 0
31837: PPUSH
// FogOff ( true ) ;
31838: LD_INT 1
31840: PPUSH
31841: CALL_OW 344
// end ;
31845: LD_VAR 0 1
31849: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31850: LD_INT 0
31852: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31853: LD_VAR 0 1
31857: PPUSH
31858: LD_VAR 0 2
31862: PPUSH
31863: LD_VAR 0 3
31867: PPUSH
31868: LD_INT 1
31870: PPUSH
31871: LD_INT 1
31873: PPUSH
31874: CALL_OW 483
// CenterOnXY ( x , y ) ;
31878: LD_VAR 0 2
31882: PPUSH
31883: LD_VAR 0 3
31887: PPUSH
31888: CALL_OW 84
// end ; end_of_file
31892: LD_VAR 0 4
31896: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31897: LD_INT 0
31899: PPUSH
31900: PPUSH
31901: PPUSH
31902: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31903: LD_VAR 0 1
31907: PPUSH
31908: CALL_OW 264
31912: PUSH
31913: LD_EXP 66
31917: EQUAL
31918: IFFALSE 31990
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31920: LD_INT 68
31922: PPUSH
31923: LD_VAR 0 1
31927: PPUSH
31928: CALL_OW 255
31932: PPUSH
31933: CALL_OW 321
31937: PUSH
31938: LD_INT 2
31940: EQUAL
31941: IFFALSE 31953
// eff := 70 else
31943: LD_ADDR_VAR 0 4
31947: PUSH
31948: LD_INT 70
31950: ST_TO_ADDR
31951: GO 31961
// eff := 30 ;
31953: LD_ADDR_VAR 0 4
31957: PUSH
31958: LD_INT 30
31960: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31961: LD_VAR 0 1
31965: PPUSH
31966: CALL_OW 250
31970: PPUSH
31971: LD_VAR 0 1
31975: PPUSH
31976: CALL_OW 251
31980: PPUSH
31981: LD_VAR 0 4
31985: PPUSH
31986: CALL_OW 495
// end ; end ;
31990: LD_VAR 0 2
31994: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31995: LD_INT 0
31997: PPUSH
// end ;
31998: LD_VAR 0 4
32002: RET
// export function SOS_Command ( cmd ) ; begin
32003: LD_INT 0
32005: PPUSH
// end ;
32006: LD_VAR 0 2
32010: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32011: LD_INT 0
32013: PPUSH
// if cmd = 121 then
32014: LD_VAR 0 1
32018: PUSH
32019: LD_INT 121
32021: EQUAL
32022: IFFALSE 32024
// end ;
32024: LD_VAR 0 6
32028: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32029: LD_INT 0
32031: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32032: LD_VAR 0 1
32036: PUSH
32037: LD_INT 250
32039: EQUAL
32040: PUSH
32041: LD_VAR 0 2
32045: PPUSH
32046: CALL_OW 264
32050: PUSH
32051: LD_EXP 69
32055: EQUAL
32056: AND
32057: IFFALSE 32078
// MinerPlaceMine ( unit , x , y ) ;
32059: LD_VAR 0 2
32063: PPUSH
32064: LD_VAR 0 4
32068: PPUSH
32069: LD_VAR 0 5
32073: PPUSH
32074: CALL 34427 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32078: LD_VAR 0 1
32082: PUSH
32083: LD_INT 251
32085: EQUAL
32086: PUSH
32087: LD_VAR 0 2
32091: PPUSH
32092: CALL_OW 264
32096: PUSH
32097: LD_EXP 69
32101: EQUAL
32102: AND
32103: IFFALSE 32124
// MinerDetonateMine ( unit , x , y ) ;
32105: LD_VAR 0 2
32109: PPUSH
32110: LD_VAR 0 4
32114: PPUSH
32115: LD_VAR 0 5
32119: PPUSH
32120: CALL 34704 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32124: LD_VAR 0 1
32128: PUSH
32129: LD_INT 252
32131: EQUAL
32132: PUSH
32133: LD_VAR 0 2
32137: PPUSH
32138: CALL_OW 264
32142: PUSH
32143: LD_EXP 69
32147: EQUAL
32148: AND
32149: IFFALSE 32170
// MinerCreateMinefield ( unit , x , y ) ;
32151: LD_VAR 0 2
32155: PPUSH
32156: LD_VAR 0 4
32160: PPUSH
32161: LD_VAR 0 5
32165: PPUSH
32166: CALL 35121 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32170: LD_VAR 0 1
32174: PUSH
32175: LD_INT 253
32177: EQUAL
32178: PUSH
32179: LD_VAR 0 2
32183: PPUSH
32184: CALL_OW 257
32188: PUSH
32189: LD_INT 5
32191: EQUAL
32192: AND
32193: IFFALSE 32214
// ComBinocular ( unit , x , y ) ;
32195: LD_VAR 0 2
32199: PPUSH
32200: LD_VAR 0 4
32204: PPUSH
32205: LD_VAR 0 5
32209: PPUSH
32210: CALL 35492 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32214: LD_VAR 0 1
32218: PUSH
32219: LD_INT 254
32221: EQUAL
32222: PUSH
32223: LD_VAR 0 2
32227: PPUSH
32228: CALL_OW 264
32232: PUSH
32233: LD_EXP 64
32237: EQUAL
32238: AND
32239: PUSH
32240: LD_VAR 0 3
32244: PPUSH
32245: CALL_OW 263
32249: PUSH
32250: LD_INT 3
32252: EQUAL
32253: AND
32254: IFFALSE 32270
// HackDestroyVehicle ( unit , selectedUnit ) ;
32256: LD_VAR 0 2
32260: PPUSH
32261: LD_VAR 0 3
32265: PPUSH
32266: CALL 33787 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32270: LD_VAR 0 1
32274: PUSH
32275: LD_INT 255
32277: EQUAL
32278: PUSH
32279: LD_VAR 0 2
32283: PPUSH
32284: CALL_OW 264
32288: PUSH
32289: LD_INT 14
32291: PUSH
32292: LD_INT 53
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: IN
32299: AND
32300: PUSH
32301: LD_VAR 0 4
32305: PPUSH
32306: LD_VAR 0 5
32310: PPUSH
32311: CALL_OW 488
32315: AND
32316: IFFALSE 32340
// CutTreeXYR ( unit , x , y , 12 ) ;
32318: LD_VAR 0 2
32322: PPUSH
32323: LD_VAR 0 4
32327: PPUSH
32328: LD_VAR 0 5
32332: PPUSH
32333: LD_INT 12
32335: PPUSH
32336: CALL 32353 0 4
// end ;
32340: LD_VAR 0 6
32344: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
32345: LD_INT 0
32347: PPUSH
// end ;
32348: LD_VAR 0 4
32352: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32353: LD_INT 0
32355: PPUSH
32356: PPUSH
32357: PPUSH
32358: PPUSH
32359: PPUSH
32360: PPUSH
32361: PPUSH
32362: PPUSH
32363: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32364: LD_VAR 0 1
32368: NOT
32369: PUSH
32370: LD_VAR 0 2
32374: PPUSH
32375: LD_VAR 0 3
32379: PPUSH
32380: CALL_OW 488
32384: NOT
32385: OR
32386: PUSH
32387: LD_VAR 0 4
32391: NOT
32392: OR
32393: IFFALSE 32397
// exit ;
32395: GO 32737
// list := [ ] ;
32397: LD_ADDR_VAR 0 13
32401: PUSH
32402: EMPTY
32403: ST_TO_ADDR
// if x - r < 0 then
32404: LD_VAR 0 2
32408: PUSH
32409: LD_VAR 0 4
32413: MINUS
32414: PUSH
32415: LD_INT 0
32417: LESS
32418: IFFALSE 32430
// min_x := 0 else
32420: LD_ADDR_VAR 0 7
32424: PUSH
32425: LD_INT 0
32427: ST_TO_ADDR
32428: GO 32446
// min_x := x - r ;
32430: LD_ADDR_VAR 0 7
32434: PUSH
32435: LD_VAR 0 2
32439: PUSH
32440: LD_VAR 0 4
32444: MINUS
32445: ST_TO_ADDR
// if y - r < 0 then
32446: LD_VAR 0 3
32450: PUSH
32451: LD_VAR 0 4
32455: MINUS
32456: PUSH
32457: LD_INT 0
32459: LESS
32460: IFFALSE 32472
// min_y := 0 else
32462: LD_ADDR_VAR 0 8
32466: PUSH
32467: LD_INT 0
32469: ST_TO_ADDR
32470: GO 32488
// min_y := y - r ;
32472: LD_ADDR_VAR 0 8
32476: PUSH
32477: LD_VAR 0 3
32481: PUSH
32482: LD_VAR 0 4
32486: MINUS
32487: ST_TO_ADDR
// max_x := x + r ;
32488: LD_ADDR_VAR 0 9
32492: PUSH
32493: LD_VAR 0 2
32497: PUSH
32498: LD_VAR 0 4
32502: PLUS
32503: ST_TO_ADDR
// max_y := y + r ;
32504: LD_ADDR_VAR 0 10
32508: PUSH
32509: LD_VAR 0 3
32513: PUSH
32514: LD_VAR 0 4
32518: PLUS
32519: ST_TO_ADDR
// for _x = min_x to max_x do
32520: LD_ADDR_VAR 0 11
32524: PUSH
32525: DOUBLE
32526: LD_VAR 0 7
32530: DEC
32531: ST_TO_ADDR
32532: LD_VAR 0 9
32536: PUSH
32537: FOR_TO
32538: IFFALSE 32655
// for _y = min_y to max_y do
32540: LD_ADDR_VAR 0 12
32544: PUSH
32545: DOUBLE
32546: LD_VAR 0 8
32550: DEC
32551: ST_TO_ADDR
32552: LD_VAR 0 10
32556: PUSH
32557: FOR_TO
32558: IFFALSE 32651
// begin if not ValidHex ( _x , _y ) then
32560: LD_VAR 0 11
32564: PPUSH
32565: LD_VAR 0 12
32569: PPUSH
32570: CALL_OW 488
32574: NOT
32575: IFFALSE 32579
// continue ;
32577: GO 32557
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32579: LD_VAR 0 11
32583: PPUSH
32584: LD_VAR 0 12
32588: PPUSH
32589: CALL_OW 351
32593: PUSH
32594: LD_VAR 0 11
32598: PPUSH
32599: LD_VAR 0 12
32603: PPUSH
32604: CALL_OW 554
32608: AND
32609: IFFALSE 32649
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32611: LD_ADDR_VAR 0 13
32615: PUSH
32616: LD_VAR 0 13
32620: PPUSH
32621: LD_VAR 0 13
32625: PUSH
32626: LD_INT 1
32628: PLUS
32629: PPUSH
32630: LD_VAR 0 11
32634: PUSH
32635: LD_VAR 0 12
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PPUSH
32644: CALL_OW 2
32648: ST_TO_ADDR
// end ;
32649: GO 32557
32651: POP
32652: POP
32653: GO 32537
32655: POP
32656: POP
// if not list then
32657: LD_VAR 0 13
32661: NOT
32662: IFFALSE 32666
// exit ;
32664: GO 32737
// for i in list do
32666: LD_ADDR_VAR 0 6
32670: PUSH
32671: LD_VAR 0 13
32675: PUSH
32676: FOR_IN
32677: IFFALSE 32735
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32679: LD_VAR 0 1
32683: PPUSH
32684: LD_STRING M
32686: PUSH
32687: LD_VAR 0 6
32691: PUSH
32692: LD_INT 1
32694: ARRAY
32695: PUSH
32696: LD_VAR 0 6
32700: PUSH
32701: LD_INT 2
32703: ARRAY
32704: PUSH
32705: LD_INT 0
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: LD_INT 0
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: PUSH
32726: EMPTY
32727: LIST
32728: PPUSH
32729: CALL_OW 447
32733: GO 32676
32735: POP
32736: POP
// end ;
32737: LD_VAR 0 5
32741: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32742: LD_EXP 138
32746: NOT
32747: IFFALSE 32797
32749: GO 32751
32751: DISABLE
// begin initHack := true ;
32752: LD_ADDR_EXP 138
32756: PUSH
32757: LD_INT 1
32759: ST_TO_ADDR
// hackTanks := [ ] ;
32760: LD_ADDR_EXP 139
32764: PUSH
32765: EMPTY
32766: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32767: LD_ADDR_EXP 140
32771: PUSH
32772: EMPTY
32773: ST_TO_ADDR
// hackLimit := 3 ;
32774: LD_ADDR_EXP 141
32778: PUSH
32779: LD_INT 3
32781: ST_TO_ADDR
// hackDist := 12 ;
32782: LD_ADDR_EXP 142
32786: PUSH
32787: LD_INT 12
32789: ST_TO_ADDR
// hackCounter := [ ] ;
32790: LD_ADDR_EXP 143
32794: PUSH
32795: EMPTY
32796: ST_TO_ADDR
// end ;
32797: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32798: LD_EXP 138
32802: PUSH
32803: LD_INT 34
32805: PUSH
32806: LD_EXP 64
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PPUSH
32815: CALL_OW 69
32819: AND
32820: IFFALSE 33075
32822: GO 32824
32824: DISABLE
32825: LD_INT 0
32827: PPUSH
32828: PPUSH
// begin enable ;
32829: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32830: LD_ADDR_VAR 0 1
32834: PUSH
32835: LD_INT 34
32837: PUSH
32838: LD_EXP 64
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PPUSH
32847: CALL_OW 69
32851: PUSH
32852: FOR_IN
32853: IFFALSE 33073
// begin if not i in hackTanks then
32855: LD_VAR 0 1
32859: PUSH
32860: LD_EXP 139
32864: IN
32865: NOT
32866: IFFALSE 32949
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32868: LD_ADDR_EXP 139
32872: PUSH
32873: LD_EXP 139
32877: PPUSH
32878: LD_EXP 139
32882: PUSH
32883: LD_INT 1
32885: PLUS
32886: PPUSH
32887: LD_VAR 0 1
32891: PPUSH
32892: CALL_OW 1
32896: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32897: LD_ADDR_EXP 140
32901: PUSH
32902: LD_EXP 140
32906: PPUSH
32907: LD_EXP 140
32911: PUSH
32912: LD_INT 1
32914: PLUS
32915: PPUSH
32916: EMPTY
32917: PPUSH
32918: CALL_OW 1
32922: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32923: LD_ADDR_EXP 143
32927: PUSH
32928: LD_EXP 143
32932: PPUSH
32933: LD_EXP 143
32937: PUSH
32938: LD_INT 1
32940: PLUS
32941: PPUSH
32942: EMPTY
32943: PPUSH
32944: CALL_OW 1
32948: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32949: LD_VAR 0 1
32953: PPUSH
32954: CALL_OW 302
32958: NOT
32959: IFFALSE 32972
// begin HackUnlinkAll ( i ) ;
32961: LD_VAR 0 1
32965: PPUSH
32966: CALL 33078 0 1
// continue ;
32970: GO 32852
// end ; HackCheckCapturedStatus ( i ) ;
32972: LD_VAR 0 1
32976: PPUSH
32977: CALL 33521 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32981: LD_ADDR_VAR 0 2
32985: PUSH
32986: LD_INT 81
32988: PUSH
32989: LD_VAR 0 1
32993: PPUSH
32994: CALL_OW 255
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 33
33005: PUSH
33006: LD_INT 3
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 91
33015: PUSH
33016: LD_VAR 0 1
33020: PUSH
33021: LD_EXP 142
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 50
33033: PUSH
33034: EMPTY
33035: LIST
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: PPUSH
33043: CALL_OW 69
33047: ST_TO_ADDR
// if not tmp then
33048: LD_VAR 0 2
33052: NOT
33053: IFFALSE 33057
// continue ;
33055: GO 32852
// HackLink ( i , tmp ) ;
33057: LD_VAR 0 1
33061: PPUSH
33062: LD_VAR 0 2
33066: PPUSH
33067: CALL 33214 0 2
// end ;
33071: GO 32852
33073: POP
33074: POP
// end ;
33075: PPOPN 2
33077: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33078: LD_INT 0
33080: PPUSH
33081: PPUSH
33082: PPUSH
// if not hack in hackTanks then
33083: LD_VAR 0 1
33087: PUSH
33088: LD_EXP 139
33092: IN
33093: NOT
33094: IFFALSE 33098
// exit ;
33096: GO 33209
// index := GetElementIndex ( hackTanks , hack ) ;
33098: LD_ADDR_VAR 0 4
33102: PUSH
33103: LD_EXP 139
33107: PPUSH
33108: LD_VAR 0 1
33112: PPUSH
33113: CALL 40683 0 2
33117: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33118: LD_EXP 140
33122: PUSH
33123: LD_VAR 0 4
33127: ARRAY
33128: IFFALSE 33209
// begin for i in hackTanksCaptured [ index ] do
33130: LD_ADDR_VAR 0 3
33134: PUSH
33135: LD_EXP 140
33139: PUSH
33140: LD_VAR 0 4
33144: ARRAY
33145: PUSH
33146: FOR_IN
33147: IFFALSE 33173
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33149: LD_VAR 0 3
33153: PUSH
33154: LD_INT 1
33156: ARRAY
33157: PPUSH
33158: LD_VAR 0 3
33162: PUSH
33163: LD_INT 2
33165: ARRAY
33166: PPUSH
33167: CALL_OW 235
33171: GO 33146
33173: POP
33174: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33175: LD_ADDR_EXP 140
33179: PUSH
33180: LD_EXP 140
33184: PPUSH
33185: LD_VAR 0 4
33189: PPUSH
33190: EMPTY
33191: PPUSH
33192: CALL_OW 1
33196: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33197: LD_VAR 0 1
33201: PPUSH
33202: LD_INT 0
33204: PPUSH
33205: CALL_OW 505
// end ; end ;
33209: LD_VAR 0 2
33213: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33214: LD_INT 0
33216: PPUSH
33217: PPUSH
33218: PPUSH
// if not hack in hackTanks or not vehicles then
33219: LD_VAR 0 1
33223: PUSH
33224: LD_EXP 139
33228: IN
33229: NOT
33230: PUSH
33231: LD_VAR 0 2
33235: NOT
33236: OR
33237: IFFALSE 33241
// exit ;
33239: GO 33516
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33241: LD_ADDR_VAR 0 2
33245: PUSH
33246: LD_VAR 0 1
33250: PPUSH
33251: LD_VAR 0 2
33255: PPUSH
33256: LD_INT 1
33258: PPUSH
33259: LD_INT 1
33261: PPUSH
33262: CALL 41333 0 4
33266: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33267: LD_ADDR_VAR 0 5
33271: PUSH
33272: LD_EXP 139
33276: PPUSH
33277: LD_VAR 0 1
33281: PPUSH
33282: CALL 40683 0 2
33286: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33287: LD_EXP 140
33291: PUSH
33292: LD_VAR 0 5
33296: ARRAY
33297: PUSH
33298: LD_EXP 141
33302: LESS
33303: IFFALSE 33492
// begin for i := 1 to vehicles do
33305: LD_ADDR_VAR 0 4
33309: PUSH
33310: DOUBLE
33311: LD_INT 1
33313: DEC
33314: ST_TO_ADDR
33315: LD_VAR 0 2
33319: PUSH
33320: FOR_TO
33321: IFFALSE 33490
// begin if hackTanksCaptured [ index ] = hackLimit then
33323: LD_EXP 140
33327: PUSH
33328: LD_VAR 0 5
33332: ARRAY
33333: PUSH
33334: LD_EXP 141
33338: EQUAL
33339: IFFALSE 33343
// break ;
33341: GO 33490
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33343: LD_ADDR_EXP 143
33347: PUSH
33348: LD_EXP 143
33352: PPUSH
33353: LD_VAR 0 5
33357: PPUSH
33358: LD_EXP 143
33362: PUSH
33363: LD_VAR 0 5
33367: ARRAY
33368: PUSH
33369: LD_INT 1
33371: PLUS
33372: PPUSH
33373: CALL_OW 1
33377: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33378: LD_ADDR_EXP 140
33382: PUSH
33383: LD_EXP 140
33387: PPUSH
33388: LD_VAR 0 5
33392: PUSH
33393: LD_EXP 140
33397: PUSH
33398: LD_VAR 0 5
33402: ARRAY
33403: PUSH
33404: LD_INT 1
33406: PLUS
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PPUSH
33412: LD_VAR 0 2
33416: PUSH
33417: LD_VAR 0 4
33421: ARRAY
33422: PUSH
33423: LD_VAR 0 2
33427: PUSH
33428: LD_VAR 0 4
33432: ARRAY
33433: PPUSH
33434: CALL_OW 255
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PPUSH
33443: CALL 40898 0 3
33447: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33448: LD_VAR 0 2
33452: PUSH
33453: LD_VAR 0 4
33457: ARRAY
33458: PPUSH
33459: LD_VAR 0 1
33463: PPUSH
33464: CALL_OW 255
33468: PPUSH
33469: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33473: LD_VAR 0 2
33477: PUSH
33478: LD_VAR 0 4
33482: ARRAY
33483: PPUSH
33484: CALL_OW 141
// end ;
33488: GO 33320
33490: POP
33491: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33492: LD_VAR 0 1
33496: PPUSH
33497: LD_EXP 140
33501: PUSH
33502: LD_VAR 0 5
33506: ARRAY
33507: PUSH
33508: LD_INT 0
33510: PLUS
33511: PPUSH
33512: CALL_OW 505
// end ;
33516: LD_VAR 0 3
33520: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33521: LD_INT 0
33523: PPUSH
33524: PPUSH
33525: PPUSH
33526: PPUSH
// if not hack in hackTanks then
33527: LD_VAR 0 1
33531: PUSH
33532: LD_EXP 139
33536: IN
33537: NOT
33538: IFFALSE 33542
// exit ;
33540: GO 33782
// index := GetElementIndex ( hackTanks , hack ) ;
33542: LD_ADDR_VAR 0 4
33546: PUSH
33547: LD_EXP 139
33551: PPUSH
33552: LD_VAR 0 1
33556: PPUSH
33557: CALL 40683 0 2
33561: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33562: LD_ADDR_VAR 0 3
33566: PUSH
33567: DOUBLE
33568: LD_EXP 140
33572: PUSH
33573: LD_VAR 0 4
33577: ARRAY
33578: INC
33579: ST_TO_ADDR
33580: LD_INT 1
33582: PUSH
33583: FOR_DOWNTO
33584: IFFALSE 33756
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33586: LD_ADDR_VAR 0 5
33590: PUSH
33591: LD_EXP 140
33595: PUSH
33596: LD_VAR 0 4
33600: ARRAY
33601: PUSH
33602: LD_VAR 0 3
33606: ARRAY
33607: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33608: LD_VAR 0 5
33612: PUSH
33613: LD_INT 1
33615: ARRAY
33616: PPUSH
33617: CALL_OW 302
33621: NOT
33622: PUSH
33623: LD_VAR 0 5
33627: PUSH
33628: LD_INT 1
33630: ARRAY
33631: PPUSH
33632: CALL_OW 255
33636: PUSH
33637: LD_VAR 0 1
33641: PPUSH
33642: CALL_OW 255
33646: NONEQUAL
33647: OR
33648: IFFALSE 33754
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33650: LD_VAR 0 5
33654: PUSH
33655: LD_INT 1
33657: ARRAY
33658: PPUSH
33659: CALL_OW 305
33663: PUSH
33664: LD_VAR 0 5
33668: PUSH
33669: LD_INT 1
33671: ARRAY
33672: PPUSH
33673: CALL_OW 255
33677: PUSH
33678: LD_VAR 0 1
33682: PPUSH
33683: CALL_OW 255
33687: EQUAL
33688: AND
33689: IFFALSE 33713
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33691: LD_VAR 0 5
33695: PUSH
33696: LD_INT 1
33698: ARRAY
33699: PPUSH
33700: LD_VAR 0 5
33704: PUSH
33705: LD_INT 2
33707: ARRAY
33708: PPUSH
33709: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33713: LD_ADDR_EXP 140
33717: PUSH
33718: LD_EXP 140
33722: PPUSH
33723: LD_VAR 0 4
33727: PPUSH
33728: LD_EXP 140
33732: PUSH
33733: LD_VAR 0 4
33737: ARRAY
33738: PPUSH
33739: LD_VAR 0 3
33743: PPUSH
33744: CALL_OW 3
33748: PPUSH
33749: CALL_OW 1
33753: ST_TO_ADDR
// end ; end ;
33754: GO 33583
33756: POP
33757: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33758: LD_VAR 0 1
33762: PPUSH
33763: LD_EXP 140
33767: PUSH
33768: LD_VAR 0 4
33772: ARRAY
33773: PUSH
33774: LD_INT 0
33776: PLUS
33777: PPUSH
33778: CALL_OW 505
// end ;
33782: LD_VAR 0 2
33786: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33787: LD_INT 0
33789: PPUSH
33790: PPUSH
33791: PPUSH
33792: PPUSH
// if not hack in hackTanks then
33793: LD_VAR 0 1
33797: PUSH
33798: LD_EXP 139
33802: IN
33803: NOT
33804: IFFALSE 33808
// exit ;
33806: GO 33893
// index := GetElementIndex ( hackTanks , hack ) ;
33808: LD_ADDR_VAR 0 5
33812: PUSH
33813: LD_EXP 139
33817: PPUSH
33818: LD_VAR 0 1
33822: PPUSH
33823: CALL 40683 0 2
33827: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33828: LD_ADDR_VAR 0 4
33832: PUSH
33833: DOUBLE
33834: LD_INT 1
33836: DEC
33837: ST_TO_ADDR
33838: LD_EXP 140
33842: PUSH
33843: LD_VAR 0 5
33847: ARRAY
33848: PUSH
33849: FOR_TO
33850: IFFALSE 33891
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33852: LD_EXP 140
33856: PUSH
33857: LD_VAR 0 5
33861: ARRAY
33862: PUSH
33863: LD_VAR 0 4
33867: ARRAY
33868: PUSH
33869: LD_INT 1
33871: ARRAY
33872: PUSH
33873: LD_VAR 0 2
33877: EQUAL
33878: IFFALSE 33889
// KillUnit ( vehicle ) ;
33880: LD_VAR 0 2
33884: PPUSH
33885: CALL_OW 66
33889: GO 33849
33891: POP
33892: POP
// end ;
33893: LD_VAR 0 3
33897: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33898: LD_EXP 144
33902: NOT
33903: IFFALSE 33938
33905: GO 33907
33907: DISABLE
// begin initMiner := true ;
33908: LD_ADDR_EXP 144
33912: PUSH
33913: LD_INT 1
33915: ST_TO_ADDR
// minersList := [ ] ;
33916: LD_ADDR_EXP 145
33920: PUSH
33921: EMPTY
33922: ST_TO_ADDR
// minerMinesList := [ ] ;
33923: LD_ADDR_EXP 146
33927: PUSH
33928: EMPTY
33929: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33930: LD_ADDR_EXP 147
33934: PUSH
33935: LD_INT 5
33937: ST_TO_ADDR
// end ;
33938: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
33939: LD_EXP 144
33943: PUSH
33944: LD_INT 34
33946: PUSH
33947: LD_EXP 69
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PPUSH
33956: CALL_OW 69
33960: AND
33961: IFFALSE 34424
33963: GO 33965
33965: DISABLE
33966: LD_INT 0
33968: PPUSH
33969: PPUSH
33970: PPUSH
33971: PPUSH
// begin enable ;
33972: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33973: LD_ADDR_VAR 0 1
33977: PUSH
33978: LD_INT 34
33980: PUSH
33981: LD_EXP 69
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PPUSH
33990: CALL_OW 69
33994: PUSH
33995: FOR_IN
33996: IFFALSE 34068
// begin if not i in minersList then
33998: LD_VAR 0 1
34002: PUSH
34003: LD_EXP 145
34007: IN
34008: NOT
34009: IFFALSE 34066
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34011: LD_ADDR_EXP 145
34015: PUSH
34016: LD_EXP 145
34020: PPUSH
34021: LD_EXP 145
34025: PUSH
34026: LD_INT 1
34028: PLUS
34029: PPUSH
34030: LD_VAR 0 1
34034: PPUSH
34035: CALL_OW 1
34039: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34040: LD_ADDR_EXP 146
34044: PUSH
34045: LD_EXP 146
34049: PPUSH
34050: LD_EXP 146
34054: PUSH
34055: LD_INT 1
34057: PLUS
34058: PPUSH
34059: EMPTY
34060: PPUSH
34061: CALL_OW 1
34065: ST_TO_ADDR
// end end ;
34066: GO 33995
34068: POP
34069: POP
// for i := minerMinesList downto 1 do
34070: LD_ADDR_VAR 0 1
34074: PUSH
34075: DOUBLE
34076: LD_EXP 146
34080: INC
34081: ST_TO_ADDR
34082: LD_INT 1
34084: PUSH
34085: FOR_DOWNTO
34086: IFFALSE 34422
// begin if IsLive ( minersList [ i ] ) then
34088: LD_EXP 145
34092: PUSH
34093: LD_VAR 0 1
34097: ARRAY
34098: PPUSH
34099: CALL_OW 300
34103: IFFALSE 34131
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34105: LD_EXP 145
34109: PUSH
34110: LD_VAR 0 1
34114: ARRAY
34115: PPUSH
34116: LD_EXP 146
34120: PUSH
34121: LD_VAR 0 1
34125: ARRAY
34126: PPUSH
34127: CALL_OW 505
// if not minerMinesList [ i ] then
34131: LD_EXP 146
34135: PUSH
34136: LD_VAR 0 1
34140: ARRAY
34141: NOT
34142: IFFALSE 34146
// continue ;
34144: GO 34085
// for j := minerMinesList [ i ] downto 1 do
34146: LD_ADDR_VAR 0 2
34150: PUSH
34151: DOUBLE
34152: LD_EXP 146
34156: PUSH
34157: LD_VAR 0 1
34161: ARRAY
34162: INC
34163: ST_TO_ADDR
34164: LD_INT 1
34166: PUSH
34167: FOR_DOWNTO
34168: IFFALSE 34418
// begin side := GetSide ( minersList [ i ] ) ;
34170: LD_ADDR_VAR 0 3
34174: PUSH
34175: LD_EXP 145
34179: PUSH
34180: LD_VAR 0 1
34184: ARRAY
34185: PPUSH
34186: CALL_OW 255
34190: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34191: LD_ADDR_VAR 0 4
34195: PUSH
34196: LD_EXP 146
34200: PUSH
34201: LD_VAR 0 1
34205: ARRAY
34206: PUSH
34207: LD_VAR 0 2
34211: ARRAY
34212: PUSH
34213: LD_INT 1
34215: ARRAY
34216: PPUSH
34217: LD_EXP 146
34221: PUSH
34222: LD_VAR 0 1
34226: ARRAY
34227: PUSH
34228: LD_VAR 0 2
34232: ARRAY
34233: PUSH
34234: LD_INT 2
34236: ARRAY
34237: PPUSH
34238: CALL_OW 428
34242: ST_TO_ADDR
// if not tmp then
34243: LD_VAR 0 4
34247: NOT
34248: IFFALSE 34252
// continue ;
34250: GO 34167
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34252: LD_VAR 0 4
34256: PUSH
34257: LD_INT 81
34259: PUSH
34260: LD_VAR 0 3
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PPUSH
34269: CALL_OW 69
34273: IN
34274: PUSH
34275: LD_EXP 146
34279: PUSH
34280: LD_VAR 0 1
34284: ARRAY
34285: PUSH
34286: LD_VAR 0 2
34290: ARRAY
34291: PUSH
34292: LD_INT 1
34294: ARRAY
34295: PPUSH
34296: LD_EXP 146
34300: PUSH
34301: LD_VAR 0 1
34305: ARRAY
34306: PUSH
34307: LD_VAR 0 2
34311: ARRAY
34312: PUSH
34313: LD_INT 2
34315: ARRAY
34316: PPUSH
34317: CALL_OW 458
34321: AND
34322: IFFALSE 34416
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34324: LD_EXP 146
34328: PUSH
34329: LD_VAR 0 1
34333: ARRAY
34334: PUSH
34335: LD_VAR 0 2
34339: ARRAY
34340: PUSH
34341: LD_INT 1
34343: ARRAY
34344: PPUSH
34345: LD_EXP 146
34349: PUSH
34350: LD_VAR 0 1
34354: ARRAY
34355: PUSH
34356: LD_VAR 0 2
34360: ARRAY
34361: PUSH
34362: LD_INT 2
34364: ARRAY
34365: PPUSH
34366: LD_VAR 0 3
34370: PPUSH
34371: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34375: LD_ADDR_EXP 146
34379: PUSH
34380: LD_EXP 146
34384: PPUSH
34385: LD_VAR 0 1
34389: PPUSH
34390: LD_EXP 146
34394: PUSH
34395: LD_VAR 0 1
34399: ARRAY
34400: PPUSH
34401: LD_VAR 0 2
34405: PPUSH
34406: CALL_OW 3
34410: PPUSH
34411: CALL_OW 1
34415: ST_TO_ADDR
// end ; end ;
34416: GO 34167
34418: POP
34419: POP
// end ;
34420: GO 34085
34422: POP
34423: POP
// end ;
34424: PPOPN 4
34426: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34427: LD_INT 0
34429: PPUSH
34430: PPUSH
// result := false ;
34431: LD_ADDR_VAR 0 4
34435: PUSH
34436: LD_INT 0
34438: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34439: LD_VAR 0 1
34443: PPUSH
34444: CALL_OW 264
34448: PUSH
34449: LD_EXP 69
34453: EQUAL
34454: NOT
34455: IFFALSE 34459
// exit ;
34457: GO 34699
// index := GetElementIndex ( minersList , unit ) ;
34459: LD_ADDR_VAR 0 5
34463: PUSH
34464: LD_EXP 145
34468: PPUSH
34469: LD_VAR 0 1
34473: PPUSH
34474: CALL 40683 0 2
34478: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34479: LD_EXP 146
34483: PUSH
34484: LD_VAR 0 5
34488: ARRAY
34489: PUSH
34490: LD_EXP 147
34494: GREATEREQUAL
34495: IFFALSE 34499
// exit ;
34497: GO 34699
// ComMoveXY ( unit , x , y ) ;
34499: LD_VAR 0 1
34503: PPUSH
34504: LD_VAR 0 2
34508: PPUSH
34509: LD_VAR 0 3
34513: PPUSH
34514: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34518: LD_INT 35
34520: PPUSH
34521: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34525: LD_VAR 0 1
34529: PPUSH
34530: LD_VAR 0 2
34534: PPUSH
34535: LD_VAR 0 3
34539: PPUSH
34540: CALL 71455 0 3
34544: NOT
34545: PUSH
34546: LD_VAR 0 1
34550: PPUSH
34551: CALL_OW 314
34555: AND
34556: IFFALSE 34560
// exit ;
34558: GO 34699
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34560: LD_VAR 0 2
34564: PPUSH
34565: LD_VAR 0 3
34569: PPUSH
34570: CALL_OW 428
34574: PUSH
34575: LD_VAR 0 1
34579: EQUAL
34580: PUSH
34581: LD_VAR 0 1
34585: PPUSH
34586: CALL_OW 314
34590: NOT
34591: AND
34592: IFFALSE 34518
// PlaySoundXY ( x , y , PlantMine ) ;
34594: LD_VAR 0 2
34598: PPUSH
34599: LD_VAR 0 3
34603: PPUSH
34604: LD_STRING PlantMine
34606: PPUSH
34607: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34611: LD_VAR 0 2
34615: PPUSH
34616: LD_VAR 0 3
34620: PPUSH
34621: LD_VAR 0 1
34625: PPUSH
34626: CALL_OW 255
34630: PPUSH
34631: LD_INT 0
34633: PPUSH
34634: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34638: LD_ADDR_EXP 146
34642: PUSH
34643: LD_EXP 146
34647: PPUSH
34648: LD_VAR 0 5
34652: PUSH
34653: LD_EXP 146
34657: PUSH
34658: LD_VAR 0 5
34662: ARRAY
34663: PUSH
34664: LD_INT 1
34666: PLUS
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PPUSH
34672: LD_VAR 0 2
34676: PUSH
34677: LD_VAR 0 3
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PPUSH
34686: CALL 40898 0 3
34690: ST_TO_ADDR
// result := true ;
34691: LD_ADDR_VAR 0 4
34695: PUSH
34696: LD_INT 1
34698: ST_TO_ADDR
// end ;
34699: LD_VAR 0 4
34703: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34704: LD_INT 0
34706: PPUSH
34707: PPUSH
34708: PPUSH
// if not unit in minersList then
34709: LD_VAR 0 1
34713: PUSH
34714: LD_EXP 145
34718: IN
34719: NOT
34720: IFFALSE 34724
// exit ;
34722: GO 35116
// index := GetElementIndex ( minersList , unit ) ;
34724: LD_ADDR_VAR 0 6
34728: PUSH
34729: LD_EXP 145
34733: PPUSH
34734: LD_VAR 0 1
34738: PPUSH
34739: CALL 40683 0 2
34743: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34744: LD_ADDR_VAR 0 5
34748: PUSH
34749: DOUBLE
34750: LD_EXP 146
34754: PUSH
34755: LD_VAR 0 6
34759: ARRAY
34760: INC
34761: ST_TO_ADDR
34762: LD_INT 1
34764: PUSH
34765: FOR_DOWNTO
34766: IFFALSE 34927
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34768: LD_EXP 146
34772: PUSH
34773: LD_VAR 0 6
34777: ARRAY
34778: PUSH
34779: LD_VAR 0 5
34783: ARRAY
34784: PUSH
34785: LD_INT 1
34787: ARRAY
34788: PUSH
34789: LD_VAR 0 2
34793: EQUAL
34794: PUSH
34795: LD_EXP 146
34799: PUSH
34800: LD_VAR 0 6
34804: ARRAY
34805: PUSH
34806: LD_VAR 0 5
34810: ARRAY
34811: PUSH
34812: LD_INT 2
34814: ARRAY
34815: PUSH
34816: LD_VAR 0 3
34820: EQUAL
34821: AND
34822: IFFALSE 34925
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34824: LD_EXP 146
34828: PUSH
34829: LD_VAR 0 6
34833: ARRAY
34834: PUSH
34835: LD_VAR 0 5
34839: ARRAY
34840: PUSH
34841: LD_INT 1
34843: ARRAY
34844: PPUSH
34845: LD_EXP 146
34849: PUSH
34850: LD_VAR 0 6
34854: ARRAY
34855: PUSH
34856: LD_VAR 0 5
34860: ARRAY
34861: PUSH
34862: LD_INT 2
34864: ARRAY
34865: PPUSH
34866: LD_VAR 0 1
34870: PPUSH
34871: CALL_OW 255
34875: PPUSH
34876: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34880: LD_ADDR_EXP 146
34884: PUSH
34885: LD_EXP 146
34889: PPUSH
34890: LD_VAR 0 6
34894: PPUSH
34895: LD_EXP 146
34899: PUSH
34900: LD_VAR 0 6
34904: ARRAY
34905: PPUSH
34906: LD_VAR 0 5
34910: PPUSH
34911: CALL_OW 3
34915: PPUSH
34916: CALL_OW 1
34920: ST_TO_ADDR
// exit ;
34921: POP
34922: POP
34923: GO 35116
// end ; end ;
34925: GO 34765
34927: POP
34928: POP
// for i := minerMinesList [ index ] downto 1 do
34929: LD_ADDR_VAR 0 5
34933: PUSH
34934: DOUBLE
34935: LD_EXP 146
34939: PUSH
34940: LD_VAR 0 6
34944: ARRAY
34945: INC
34946: ST_TO_ADDR
34947: LD_INT 1
34949: PUSH
34950: FOR_DOWNTO
34951: IFFALSE 35114
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34953: LD_EXP 146
34957: PUSH
34958: LD_VAR 0 6
34962: ARRAY
34963: PUSH
34964: LD_VAR 0 5
34968: ARRAY
34969: PUSH
34970: LD_INT 1
34972: ARRAY
34973: PPUSH
34974: LD_EXP 146
34978: PUSH
34979: LD_VAR 0 6
34983: ARRAY
34984: PUSH
34985: LD_VAR 0 5
34989: ARRAY
34990: PUSH
34991: LD_INT 2
34993: ARRAY
34994: PPUSH
34995: LD_VAR 0 2
34999: PPUSH
35000: LD_VAR 0 3
35004: PPUSH
35005: CALL_OW 298
35009: PUSH
35010: LD_INT 6
35012: LESS
35013: IFFALSE 35112
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35015: LD_EXP 146
35019: PUSH
35020: LD_VAR 0 6
35024: ARRAY
35025: PUSH
35026: LD_VAR 0 5
35030: ARRAY
35031: PUSH
35032: LD_INT 1
35034: ARRAY
35035: PPUSH
35036: LD_EXP 146
35040: PUSH
35041: LD_VAR 0 6
35045: ARRAY
35046: PUSH
35047: LD_VAR 0 5
35051: ARRAY
35052: PUSH
35053: LD_INT 2
35055: ARRAY
35056: PPUSH
35057: LD_VAR 0 1
35061: PPUSH
35062: CALL_OW 255
35066: PPUSH
35067: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35071: LD_ADDR_EXP 146
35075: PUSH
35076: LD_EXP 146
35080: PPUSH
35081: LD_VAR 0 6
35085: PPUSH
35086: LD_EXP 146
35090: PUSH
35091: LD_VAR 0 6
35095: ARRAY
35096: PPUSH
35097: LD_VAR 0 5
35101: PPUSH
35102: CALL_OW 3
35106: PPUSH
35107: CALL_OW 1
35111: ST_TO_ADDR
// end ; end ;
35112: GO 34950
35114: POP
35115: POP
// end ;
35116: LD_VAR 0 4
35120: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35121: LD_INT 0
35123: PPUSH
35124: PPUSH
35125: PPUSH
35126: PPUSH
35127: PPUSH
35128: PPUSH
35129: PPUSH
35130: PPUSH
35131: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35132: LD_VAR 0 1
35136: PPUSH
35137: CALL_OW 264
35141: PUSH
35142: LD_EXP 69
35146: EQUAL
35147: NOT
35148: PUSH
35149: LD_VAR 0 1
35153: PUSH
35154: LD_EXP 145
35158: IN
35159: NOT
35160: OR
35161: IFFALSE 35165
// exit ;
35163: GO 35487
// index := GetElementIndex ( minersList , unit ) ;
35165: LD_ADDR_VAR 0 6
35169: PUSH
35170: LD_EXP 145
35174: PPUSH
35175: LD_VAR 0 1
35179: PPUSH
35180: CALL 40683 0 2
35184: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35185: LD_ADDR_VAR 0 8
35189: PUSH
35190: LD_EXP 147
35194: PUSH
35195: LD_EXP 146
35199: PUSH
35200: LD_VAR 0 6
35204: ARRAY
35205: MINUS
35206: ST_TO_ADDR
// if not minesFreeAmount then
35207: LD_VAR 0 8
35211: NOT
35212: IFFALSE 35216
// exit ;
35214: GO 35487
// tmp := [ ] ;
35216: LD_ADDR_VAR 0 7
35220: PUSH
35221: EMPTY
35222: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35223: LD_ADDR_VAR 0 5
35227: PUSH
35228: DOUBLE
35229: LD_INT 1
35231: DEC
35232: ST_TO_ADDR
35233: LD_VAR 0 8
35237: PUSH
35238: FOR_TO
35239: IFFALSE 35434
// begin _d := rand ( 0 , 5 ) ;
35241: LD_ADDR_VAR 0 11
35245: PUSH
35246: LD_INT 0
35248: PPUSH
35249: LD_INT 5
35251: PPUSH
35252: CALL_OW 12
35256: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35257: LD_ADDR_VAR 0 12
35261: PUSH
35262: LD_INT 2
35264: PPUSH
35265: LD_INT 6
35267: PPUSH
35268: CALL_OW 12
35272: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35273: LD_ADDR_VAR 0 9
35277: PUSH
35278: LD_VAR 0 2
35282: PPUSH
35283: LD_VAR 0 11
35287: PPUSH
35288: LD_VAR 0 12
35292: PPUSH
35293: CALL_OW 272
35297: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35298: LD_ADDR_VAR 0 10
35302: PUSH
35303: LD_VAR 0 3
35307: PPUSH
35308: LD_VAR 0 11
35312: PPUSH
35313: LD_VAR 0 12
35317: PPUSH
35318: CALL_OW 273
35322: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35323: LD_VAR 0 9
35327: PPUSH
35328: LD_VAR 0 10
35332: PPUSH
35333: CALL_OW 488
35337: PUSH
35338: LD_VAR 0 9
35342: PUSH
35343: LD_VAR 0 10
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_VAR 0 7
35356: IN
35357: NOT
35358: AND
35359: PUSH
35360: LD_VAR 0 9
35364: PPUSH
35365: LD_VAR 0 10
35369: PPUSH
35370: CALL_OW 458
35374: NOT
35375: AND
35376: IFFALSE 35418
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35378: LD_ADDR_VAR 0 7
35382: PUSH
35383: LD_VAR 0 7
35387: PPUSH
35388: LD_VAR 0 7
35392: PUSH
35393: LD_INT 1
35395: PLUS
35396: PPUSH
35397: LD_VAR 0 9
35401: PUSH
35402: LD_VAR 0 10
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PPUSH
35411: CALL_OW 1
35415: ST_TO_ADDR
35416: GO 35432
// i := i - 1 ;
35418: LD_ADDR_VAR 0 5
35422: PUSH
35423: LD_VAR 0 5
35427: PUSH
35428: LD_INT 1
35430: MINUS
35431: ST_TO_ADDR
// end ;
35432: GO 35238
35434: POP
35435: POP
// for i in tmp do
35436: LD_ADDR_VAR 0 5
35440: PUSH
35441: LD_VAR 0 7
35445: PUSH
35446: FOR_IN
35447: IFFALSE 35485
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35449: LD_VAR 0 1
35453: PPUSH
35454: LD_VAR 0 5
35458: PUSH
35459: LD_INT 1
35461: ARRAY
35462: PPUSH
35463: LD_VAR 0 5
35467: PUSH
35468: LD_INT 2
35470: ARRAY
35471: PPUSH
35472: CALL 34427 0 3
35476: NOT
35477: IFFALSE 35483
// exit ;
35479: POP
35480: POP
35481: GO 35487
35483: GO 35446
35485: POP
35486: POP
// end ;
35487: LD_VAR 0 4
35491: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35492: LD_INT 0
35494: PPUSH
35495: PPUSH
35496: PPUSH
35497: PPUSH
35498: PPUSH
35499: PPUSH
35500: PPUSH
// if not GetClass ( unit ) = class_sniper then
35501: LD_VAR 0 1
35505: PPUSH
35506: CALL_OW 257
35510: PUSH
35511: LD_INT 5
35513: EQUAL
35514: NOT
35515: IFFALSE 35519
// exit ;
35517: GO 35907
// dist := 8 ;
35519: LD_ADDR_VAR 0 5
35523: PUSH
35524: LD_INT 8
35526: ST_TO_ADDR
// viewRange := 12 ;
35527: LD_ADDR_VAR 0 7
35531: PUSH
35532: LD_INT 12
35534: ST_TO_ADDR
// side := GetSide ( unit ) ;
35535: LD_ADDR_VAR 0 6
35539: PUSH
35540: LD_VAR 0 1
35544: PPUSH
35545: CALL_OW 255
35549: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35550: LD_INT 61
35552: PPUSH
35553: LD_VAR 0 6
35557: PPUSH
35558: CALL_OW 321
35562: PUSH
35563: LD_INT 2
35565: EQUAL
35566: IFFALSE 35576
// viewRange := 16 ;
35568: LD_ADDR_VAR 0 7
35572: PUSH
35573: LD_INT 16
35575: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35576: LD_VAR 0 1
35580: PPUSH
35581: LD_VAR 0 2
35585: PPUSH
35586: LD_VAR 0 3
35590: PPUSH
35591: CALL_OW 297
35595: PUSH
35596: LD_VAR 0 5
35600: GREATER
35601: IFFALSE 35680
// begin ComMoveXY ( unit , x , y ) ;
35603: LD_VAR 0 1
35607: PPUSH
35608: LD_VAR 0 2
35612: PPUSH
35613: LD_VAR 0 3
35617: PPUSH
35618: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35622: LD_INT 35
35624: PPUSH
35625: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35629: LD_VAR 0 1
35633: PPUSH
35634: LD_VAR 0 2
35638: PPUSH
35639: LD_VAR 0 3
35643: PPUSH
35644: CALL 71455 0 3
35648: NOT
35649: IFFALSE 35653
// exit ;
35651: GO 35907
// until GetDistUnitXY ( unit , x , y ) < dist ;
35653: LD_VAR 0 1
35657: PPUSH
35658: LD_VAR 0 2
35662: PPUSH
35663: LD_VAR 0 3
35667: PPUSH
35668: CALL_OW 297
35672: PUSH
35673: LD_VAR 0 5
35677: LESS
35678: IFFALSE 35622
// end ; ComTurnXY ( unit , x , y ) ;
35680: LD_VAR 0 1
35684: PPUSH
35685: LD_VAR 0 2
35689: PPUSH
35690: LD_VAR 0 3
35694: PPUSH
35695: CALL_OW 118
// wait ( 5 ) ;
35699: LD_INT 5
35701: PPUSH
35702: CALL_OW 67
// _d := GetDir ( unit ) ;
35706: LD_ADDR_VAR 0 10
35710: PUSH
35711: LD_VAR 0 1
35715: PPUSH
35716: CALL_OW 254
35720: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35721: LD_ADDR_VAR 0 8
35725: PUSH
35726: LD_VAR 0 1
35730: PPUSH
35731: CALL_OW 250
35735: PPUSH
35736: LD_VAR 0 10
35740: PPUSH
35741: LD_VAR 0 5
35745: PPUSH
35746: CALL_OW 272
35750: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35751: LD_ADDR_VAR 0 9
35755: PUSH
35756: LD_VAR 0 1
35760: PPUSH
35761: CALL_OW 251
35765: PPUSH
35766: LD_VAR 0 10
35770: PPUSH
35771: LD_VAR 0 5
35775: PPUSH
35776: CALL_OW 273
35780: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35781: LD_VAR 0 8
35785: PPUSH
35786: LD_VAR 0 9
35790: PPUSH
35791: CALL_OW 488
35795: NOT
35796: IFFALSE 35800
// exit ;
35798: GO 35907
// ComAnimCustom ( unit , 1 ) ;
35800: LD_VAR 0 1
35804: PPUSH
35805: LD_INT 1
35807: PPUSH
35808: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35812: LD_VAR 0 8
35816: PPUSH
35817: LD_VAR 0 9
35821: PPUSH
35822: LD_VAR 0 6
35826: PPUSH
35827: LD_VAR 0 7
35831: PPUSH
35832: CALL_OW 330
// repeat wait ( 1 ) ;
35836: LD_INT 1
35838: PPUSH
35839: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35843: LD_VAR 0 1
35847: PPUSH
35848: CALL_OW 316
35852: PUSH
35853: LD_VAR 0 1
35857: PPUSH
35858: CALL_OW 314
35862: OR
35863: PUSH
35864: LD_VAR 0 1
35868: PPUSH
35869: CALL_OW 302
35873: NOT
35874: OR
35875: PUSH
35876: LD_VAR 0 1
35880: PPUSH
35881: CALL_OW 301
35885: OR
35886: IFFALSE 35836
// RemoveSeeing ( _x , _y , side ) ;
35888: LD_VAR 0 8
35892: PPUSH
35893: LD_VAR 0 9
35897: PPUSH
35898: LD_VAR 0 6
35902: PPUSH
35903: CALL_OW 331
// end ; end_of_file
35907: LD_VAR 0 4
35911: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35912: LD_INT 0
35914: PPUSH
35915: PPUSH
// if exist_mode then
35916: LD_VAR 0 2
35920: IFFALSE 35945
// unit := CreateCharacter ( prefix & ident ) else
35922: LD_ADDR_VAR 0 5
35926: PUSH
35927: LD_VAR 0 3
35931: PUSH
35932: LD_VAR 0 1
35936: STR
35937: PPUSH
35938: CALL_OW 34
35942: ST_TO_ADDR
35943: GO 35960
// unit := NewCharacter ( ident ) ;
35945: LD_ADDR_VAR 0 5
35949: PUSH
35950: LD_VAR 0 1
35954: PPUSH
35955: CALL_OW 25
35959: ST_TO_ADDR
// result := unit ;
35960: LD_ADDR_VAR 0 4
35964: PUSH
35965: LD_VAR 0 5
35969: ST_TO_ADDR
// end ;
35970: LD_VAR 0 4
35974: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35975: LD_INT 0
35977: PPUSH
35978: PPUSH
// if not side or not nation then
35979: LD_VAR 0 1
35983: NOT
35984: PUSH
35985: LD_VAR 0 2
35989: NOT
35990: OR
35991: IFFALSE 35995
// exit ;
35993: GO 36763
// case nation of nation_american :
35995: LD_VAR 0 2
35999: PUSH
36000: LD_INT 1
36002: DOUBLE
36003: EQUAL
36004: IFTRUE 36008
36006: GO 36222
36008: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36009: LD_ADDR_VAR 0 4
36013: PUSH
36014: LD_INT 35
36016: PUSH
36017: LD_INT 45
36019: PUSH
36020: LD_INT 46
36022: PUSH
36023: LD_INT 47
36025: PUSH
36026: LD_INT 82
36028: PUSH
36029: LD_INT 83
36031: PUSH
36032: LD_INT 84
36034: PUSH
36035: LD_INT 85
36037: PUSH
36038: LD_INT 86
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: LD_INT 2
36046: PUSH
36047: LD_INT 6
36049: PUSH
36050: LD_INT 15
36052: PUSH
36053: LD_INT 16
36055: PUSH
36056: LD_INT 7
36058: PUSH
36059: LD_INT 12
36061: PUSH
36062: LD_INT 13
36064: PUSH
36065: LD_INT 10
36067: PUSH
36068: LD_INT 14
36070: PUSH
36071: LD_INT 20
36073: PUSH
36074: LD_INT 21
36076: PUSH
36077: LD_INT 22
36079: PUSH
36080: LD_INT 25
36082: PUSH
36083: LD_INT 32
36085: PUSH
36086: LD_INT 27
36088: PUSH
36089: LD_INT 36
36091: PUSH
36092: LD_INT 69
36094: PUSH
36095: LD_INT 39
36097: PUSH
36098: LD_INT 34
36100: PUSH
36101: LD_INT 40
36103: PUSH
36104: LD_INT 48
36106: PUSH
36107: LD_INT 49
36109: PUSH
36110: LD_INT 50
36112: PUSH
36113: LD_INT 51
36115: PUSH
36116: LD_INT 52
36118: PUSH
36119: LD_INT 53
36121: PUSH
36122: LD_INT 54
36124: PUSH
36125: LD_INT 55
36127: PUSH
36128: LD_INT 56
36130: PUSH
36131: LD_INT 57
36133: PUSH
36134: LD_INT 58
36136: PUSH
36137: LD_INT 59
36139: PUSH
36140: LD_INT 60
36142: PUSH
36143: LD_INT 61
36145: PUSH
36146: LD_INT 62
36148: PUSH
36149: LD_INT 80
36151: PUSH
36152: LD_INT 82
36154: PUSH
36155: LD_INT 83
36157: PUSH
36158: LD_INT 84
36160: PUSH
36161: LD_INT 85
36163: PUSH
36164: LD_INT 86
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: ST_TO_ADDR
36220: GO 36687
36222: LD_INT 2
36224: DOUBLE
36225: EQUAL
36226: IFTRUE 36230
36228: GO 36456
36230: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36231: LD_ADDR_VAR 0 4
36235: PUSH
36236: LD_INT 35
36238: PUSH
36239: LD_INT 45
36241: PUSH
36242: LD_INT 46
36244: PUSH
36245: LD_INT 47
36247: PUSH
36248: LD_INT 82
36250: PUSH
36251: LD_INT 83
36253: PUSH
36254: LD_INT 84
36256: PUSH
36257: LD_INT 85
36259: PUSH
36260: LD_INT 87
36262: PUSH
36263: LD_INT 70
36265: PUSH
36266: LD_INT 1
36268: PUSH
36269: LD_INT 11
36271: PUSH
36272: LD_INT 3
36274: PUSH
36275: LD_INT 4
36277: PUSH
36278: LD_INT 5
36280: PUSH
36281: LD_INT 6
36283: PUSH
36284: LD_INT 15
36286: PUSH
36287: LD_INT 18
36289: PUSH
36290: LD_INT 7
36292: PUSH
36293: LD_INT 17
36295: PUSH
36296: LD_INT 8
36298: PUSH
36299: LD_INT 20
36301: PUSH
36302: LD_INT 21
36304: PUSH
36305: LD_INT 22
36307: PUSH
36308: LD_INT 72
36310: PUSH
36311: LD_INT 26
36313: PUSH
36314: LD_INT 69
36316: PUSH
36317: LD_INT 39
36319: PUSH
36320: LD_INT 40
36322: PUSH
36323: LD_INT 41
36325: PUSH
36326: LD_INT 42
36328: PUSH
36329: LD_INT 43
36331: PUSH
36332: LD_INT 48
36334: PUSH
36335: LD_INT 49
36337: PUSH
36338: LD_INT 50
36340: PUSH
36341: LD_INT 51
36343: PUSH
36344: LD_INT 52
36346: PUSH
36347: LD_INT 53
36349: PUSH
36350: LD_INT 54
36352: PUSH
36353: LD_INT 55
36355: PUSH
36356: LD_INT 56
36358: PUSH
36359: LD_INT 60
36361: PUSH
36362: LD_INT 61
36364: PUSH
36365: LD_INT 62
36367: PUSH
36368: LD_INT 66
36370: PUSH
36371: LD_INT 67
36373: PUSH
36374: LD_INT 68
36376: PUSH
36377: LD_INT 81
36379: PUSH
36380: LD_INT 82
36382: PUSH
36383: LD_INT 83
36385: PUSH
36386: LD_INT 84
36388: PUSH
36389: LD_INT 85
36391: PUSH
36392: LD_INT 87
36394: PUSH
36395: LD_INT 88
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: ST_TO_ADDR
36454: GO 36687
36456: LD_INT 3
36458: DOUBLE
36459: EQUAL
36460: IFTRUE 36464
36462: GO 36686
36464: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36465: LD_ADDR_VAR 0 4
36469: PUSH
36470: LD_INT 46
36472: PUSH
36473: LD_INT 47
36475: PUSH
36476: LD_INT 1
36478: PUSH
36479: LD_INT 2
36481: PUSH
36482: LD_INT 82
36484: PUSH
36485: LD_INT 83
36487: PUSH
36488: LD_INT 84
36490: PUSH
36491: LD_INT 85
36493: PUSH
36494: LD_INT 86
36496: PUSH
36497: LD_INT 11
36499: PUSH
36500: LD_INT 9
36502: PUSH
36503: LD_INT 20
36505: PUSH
36506: LD_INT 19
36508: PUSH
36509: LD_INT 21
36511: PUSH
36512: LD_INT 24
36514: PUSH
36515: LD_INT 22
36517: PUSH
36518: LD_INT 25
36520: PUSH
36521: LD_INT 28
36523: PUSH
36524: LD_INT 29
36526: PUSH
36527: LD_INT 30
36529: PUSH
36530: LD_INT 31
36532: PUSH
36533: LD_INT 37
36535: PUSH
36536: LD_INT 38
36538: PUSH
36539: LD_INT 32
36541: PUSH
36542: LD_INT 27
36544: PUSH
36545: LD_INT 33
36547: PUSH
36548: LD_INT 69
36550: PUSH
36551: LD_INT 39
36553: PUSH
36554: LD_INT 34
36556: PUSH
36557: LD_INT 40
36559: PUSH
36560: LD_INT 71
36562: PUSH
36563: LD_INT 23
36565: PUSH
36566: LD_INT 44
36568: PUSH
36569: LD_INT 48
36571: PUSH
36572: LD_INT 49
36574: PUSH
36575: LD_INT 50
36577: PUSH
36578: LD_INT 51
36580: PUSH
36581: LD_INT 52
36583: PUSH
36584: LD_INT 53
36586: PUSH
36587: LD_INT 54
36589: PUSH
36590: LD_INT 55
36592: PUSH
36593: LD_INT 56
36595: PUSH
36596: LD_INT 57
36598: PUSH
36599: LD_INT 58
36601: PUSH
36602: LD_INT 59
36604: PUSH
36605: LD_INT 63
36607: PUSH
36608: LD_INT 64
36610: PUSH
36611: LD_INT 65
36613: PUSH
36614: LD_INT 82
36616: PUSH
36617: LD_INT 83
36619: PUSH
36620: LD_INT 84
36622: PUSH
36623: LD_INT 85
36625: PUSH
36626: LD_INT 86
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: ST_TO_ADDR
36684: GO 36687
36686: POP
// if state > - 1 and state < 3 then
36687: LD_VAR 0 3
36691: PUSH
36692: LD_INT 1
36694: NEG
36695: GREATER
36696: PUSH
36697: LD_VAR 0 3
36701: PUSH
36702: LD_INT 3
36704: LESS
36705: AND
36706: IFFALSE 36763
// for i in result do
36708: LD_ADDR_VAR 0 5
36712: PUSH
36713: LD_VAR 0 4
36717: PUSH
36718: FOR_IN
36719: IFFALSE 36761
// if GetTech ( i , side ) <> state then
36721: LD_VAR 0 5
36725: PPUSH
36726: LD_VAR 0 1
36730: PPUSH
36731: CALL_OW 321
36735: PUSH
36736: LD_VAR 0 3
36740: NONEQUAL
36741: IFFALSE 36759
// result := result diff i ;
36743: LD_ADDR_VAR 0 4
36747: PUSH
36748: LD_VAR 0 4
36752: PUSH
36753: LD_VAR 0 5
36757: DIFF
36758: ST_TO_ADDR
36759: GO 36718
36761: POP
36762: POP
// end ;
36763: LD_VAR 0 4
36767: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36768: LD_INT 0
36770: PPUSH
36771: PPUSH
36772: PPUSH
// result := true ;
36773: LD_ADDR_VAR 0 3
36777: PUSH
36778: LD_INT 1
36780: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36781: LD_ADDR_VAR 0 5
36785: PUSH
36786: LD_VAR 0 2
36790: PPUSH
36791: CALL_OW 480
36795: ST_TO_ADDR
// if not tmp then
36796: LD_VAR 0 5
36800: NOT
36801: IFFALSE 36805
// exit ;
36803: GO 36854
// for i in tmp do
36805: LD_ADDR_VAR 0 4
36809: PUSH
36810: LD_VAR 0 5
36814: PUSH
36815: FOR_IN
36816: IFFALSE 36852
// if GetTech ( i , side ) <> state_researched then
36818: LD_VAR 0 4
36822: PPUSH
36823: LD_VAR 0 1
36827: PPUSH
36828: CALL_OW 321
36832: PUSH
36833: LD_INT 2
36835: NONEQUAL
36836: IFFALSE 36850
// begin result := false ;
36838: LD_ADDR_VAR 0 3
36842: PUSH
36843: LD_INT 0
36845: ST_TO_ADDR
// exit ;
36846: POP
36847: POP
36848: GO 36854
// end ;
36850: GO 36815
36852: POP
36853: POP
// end ;
36854: LD_VAR 0 3
36858: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36859: LD_INT 0
36861: PPUSH
36862: PPUSH
36863: PPUSH
36864: PPUSH
36865: PPUSH
36866: PPUSH
36867: PPUSH
36868: PPUSH
36869: PPUSH
36870: PPUSH
36871: PPUSH
36872: PPUSH
36873: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36874: LD_VAR 0 1
36878: NOT
36879: PUSH
36880: LD_VAR 0 1
36884: PPUSH
36885: CALL_OW 257
36889: PUSH
36890: LD_INT 9
36892: NONEQUAL
36893: OR
36894: IFFALSE 36898
// exit ;
36896: GO 37471
// side := GetSide ( unit ) ;
36898: LD_ADDR_VAR 0 9
36902: PUSH
36903: LD_VAR 0 1
36907: PPUSH
36908: CALL_OW 255
36912: ST_TO_ADDR
// tech_space := tech_spacanom ;
36913: LD_ADDR_VAR 0 12
36917: PUSH
36918: LD_INT 29
36920: ST_TO_ADDR
// tech_time := tech_taurad ;
36921: LD_ADDR_VAR 0 13
36925: PUSH
36926: LD_INT 28
36928: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36929: LD_ADDR_VAR 0 11
36933: PUSH
36934: LD_VAR 0 1
36938: PPUSH
36939: CALL_OW 310
36943: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36944: LD_VAR 0 11
36948: PPUSH
36949: CALL_OW 247
36953: PUSH
36954: LD_INT 2
36956: EQUAL
36957: IFFALSE 36961
// exit ;
36959: GO 37471
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36961: LD_ADDR_VAR 0 8
36965: PUSH
36966: LD_INT 81
36968: PUSH
36969: LD_VAR 0 9
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 3
36980: PUSH
36981: LD_INT 21
36983: PUSH
36984: LD_INT 3
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PPUSH
36999: CALL_OW 69
37003: ST_TO_ADDR
// if not tmp then
37004: LD_VAR 0 8
37008: NOT
37009: IFFALSE 37013
// exit ;
37011: GO 37471
// if in_unit then
37013: LD_VAR 0 11
37017: IFFALSE 37041
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37019: LD_ADDR_VAR 0 10
37023: PUSH
37024: LD_VAR 0 8
37028: PPUSH
37029: LD_VAR 0 11
37033: PPUSH
37034: CALL_OW 74
37038: ST_TO_ADDR
37039: GO 37061
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37041: LD_ADDR_VAR 0 10
37045: PUSH
37046: LD_VAR 0 8
37050: PPUSH
37051: LD_VAR 0 1
37055: PPUSH
37056: CALL_OW 74
37060: ST_TO_ADDR
// if not enemy then
37061: LD_VAR 0 10
37065: NOT
37066: IFFALSE 37070
// exit ;
37068: GO 37471
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37070: LD_VAR 0 11
37074: PUSH
37075: LD_VAR 0 11
37079: PPUSH
37080: LD_VAR 0 10
37084: PPUSH
37085: CALL_OW 296
37089: PUSH
37090: LD_INT 13
37092: GREATER
37093: AND
37094: PUSH
37095: LD_VAR 0 1
37099: PPUSH
37100: LD_VAR 0 10
37104: PPUSH
37105: CALL_OW 296
37109: PUSH
37110: LD_INT 12
37112: GREATER
37113: OR
37114: IFFALSE 37118
// exit ;
37116: GO 37471
// missile := [ 1 ] ;
37118: LD_ADDR_VAR 0 14
37122: PUSH
37123: LD_INT 1
37125: PUSH
37126: EMPTY
37127: LIST
37128: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37129: LD_VAR 0 9
37133: PPUSH
37134: LD_VAR 0 12
37138: PPUSH
37139: CALL_OW 325
37143: IFFALSE 37172
// missile := Insert ( missile , missile + 1 , 2 ) ;
37145: LD_ADDR_VAR 0 14
37149: PUSH
37150: LD_VAR 0 14
37154: PPUSH
37155: LD_VAR 0 14
37159: PUSH
37160: LD_INT 1
37162: PLUS
37163: PPUSH
37164: LD_INT 2
37166: PPUSH
37167: CALL_OW 2
37171: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37172: LD_VAR 0 9
37176: PPUSH
37177: LD_VAR 0 13
37181: PPUSH
37182: CALL_OW 325
37186: PUSH
37187: LD_VAR 0 10
37191: PPUSH
37192: CALL_OW 255
37196: PPUSH
37197: LD_VAR 0 13
37201: PPUSH
37202: CALL_OW 325
37206: NOT
37207: AND
37208: IFFALSE 37237
// missile := Insert ( missile , missile + 1 , 3 ) ;
37210: LD_ADDR_VAR 0 14
37214: PUSH
37215: LD_VAR 0 14
37219: PPUSH
37220: LD_VAR 0 14
37224: PUSH
37225: LD_INT 1
37227: PLUS
37228: PPUSH
37229: LD_INT 3
37231: PPUSH
37232: CALL_OW 2
37236: ST_TO_ADDR
// if missile < 2 then
37237: LD_VAR 0 14
37241: PUSH
37242: LD_INT 2
37244: LESS
37245: IFFALSE 37249
// exit ;
37247: GO 37471
// x := GetX ( enemy ) ;
37249: LD_ADDR_VAR 0 4
37253: PUSH
37254: LD_VAR 0 10
37258: PPUSH
37259: CALL_OW 250
37263: ST_TO_ADDR
// y := GetY ( enemy ) ;
37264: LD_ADDR_VAR 0 5
37268: PUSH
37269: LD_VAR 0 10
37273: PPUSH
37274: CALL_OW 251
37278: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37279: LD_ADDR_VAR 0 6
37283: PUSH
37284: LD_VAR 0 4
37288: PUSH
37289: LD_INT 1
37291: NEG
37292: PPUSH
37293: LD_INT 1
37295: PPUSH
37296: CALL_OW 12
37300: PLUS
37301: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37302: LD_ADDR_VAR 0 7
37306: PUSH
37307: LD_VAR 0 5
37311: PUSH
37312: LD_INT 1
37314: NEG
37315: PPUSH
37316: LD_INT 1
37318: PPUSH
37319: CALL_OW 12
37323: PLUS
37324: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37325: LD_VAR 0 6
37329: PPUSH
37330: LD_VAR 0 7
37334: PPUSH
37335: CALL_OW 488
37339: NOT
37340: IFFALSE 37362
// begin _x := x ;
37342: LD_ADDR_VAR 0 6
37346: PUSH
37347: LD_VAR 0 4
37351: ST_TO_ADDR
// _y := y ;
37352: LD_ADDR_VAR 0 7
37356: PUSH
37357: LD_VAR 0 5
37361: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37362: LD_ADDR_VAR 0 3
37366: PUSH
37367: LD_INT 1
37369: PPUSH
37370: LD_VAR 0 14
37374: PPUSH
37375: CALL_OW 12
37379: ST_TO_ADDR
// case i of 1 :
37380: LD_VAR 0 3
37384: PUSH
37385: LD_INT 1
37387: DOUBLE
37388: EQUAL
37389: IFTRUE 37393
37391: GO 37410
37393: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37394: LD_VAR 0 1
37398: PPUSH
37399: LD_VAR 0 10
37403: PPUSH
37404: CALL_OW 115
37408: GO 37471
37410: LD_INT 2
37412: DOUBLE
37413: EQUAL
37414: IFTRUE 37418
37416: GO 37440
37418: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37419: LD_VAR 0 1
37423: PPUSH
37424: LD_VAR 0 6
37428: PPUSH
37429: LD_VAR 0 7
37433: PPUSH
37434: CALL_OW 153
37438: GO 37471
37440: LD_INT 3
37442: DOUBLE
37443: EQUAL
37444: IFTRUE 37448
37446: GO 37470
37448: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37449: LD_VAR 0 1
37453: PPUSH
37454: LD_VAR 0 6
37458: PPUSH
37459: LD_VAR 0 7
37463: PPUSH
37464: CALL_OW 154
37468: GO 37471
37470: POP
// end ;
37471: LD_VAR 0 2
37475: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37476: LD_INT 0
37478: PPUSH
37479: PPUSH
37480: PPUSH
37481: PPUSH
37482: PPUSH
37483: PPUSH
// if not unit or not building then
37484: LD_VAR 0 1
37488: NOT
37489: PUSH
37490: LD_VAR 0 2
37494: NOT
37495: OR
37496: IFFALSE 37500
// exit ;
37498: GO 37658
// x := GetX ( building ) ;
37500: LD_ADDR_VAR 0 5
37504: PUSH
37505: LD_VAR 0 2
37509: PPUSH
37510: CALL_OW 250
37514: ST_TO_ADDR
// y := GetY ( building ) ;
37515: LD_ADDR_VAR 0 6
37519: PUSH
37520: LD_VAR 0 2
37524: PPUSH
37525: CALL_OW 251
37529: ST_TO_ADDR
// for i = 0 to 5 do
37530: LD_ADDR_VAR 0 4
37534: PUSH
37535: DOUBLE
37536: LD_INT 0
37538: DEC
37539: ST_TO_ADDR
37540: LD_INT 5
37542: PUSH
37543: FOR_TO
37544: IFFALSE 37656
// begin _x := ShiftX ( x , i , 3 ) ;
37546: LD_ADDR_VAR 0 7
37550: PUSH
37551: LD_VAR 0 5
37555: PPUSH
37556: LD_VAR 0 4
37560: PPUSH
37561: LD_INT 3
37563: PPUSH
37564: CALL_OW 272
37568: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37569: LD_ADDR_VAR 0 8
37573: PUSH
37574: LD_VAR 0 6
37578: PPUSH
37579: LD_VAR 0 4
37583: PPUSH
37584: LD_INT 3
37586: PPUSH
37587: CALL_OW 273
37591: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37592: LD_VAR 0 7
37596: PPUSH
37597: LD_VAR 0 8
37601: PPUSH
37602: CALL_OW 488
37606: NOT
37607: IFFALSE 37611
// continue ;
37609: GO 37543
// if HexInfo ( _x , _y ) = 0 then
37611: LD_VAR 0 7
37615: PPUSH
37616: LD_VAR 0 8
37620: PPUSH
37621: CALL_OW 428
37625: PUSH
37626: LD_INT 0
37628: EQUAL
37629: IFFALSE 37654
// begin ComMoveXY ( unit , _x , _y ) ;
37631: LD_VAR 0 1
37635: PPUSH
37636: LD_VAR 0 7
37640: PPUSH
37641: LD_VAR 0 8
37645: PPUSH
37646: CALL_OW 111
// exit ;
37650: POP
37651: POP
37652: GO 37658
// end ; end ;
37654: GO 37543
37656: POP
37657: POP
// end ;
37658: LD_VAR 0 3
37662: RET
// export function ScanBase ( side , base_area ) ; begin
37663: LD_INT 0
37665: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37666: LD_ADDR_VAR 0 3
37670: PUSH
37671: LD_VAR 0 2
37675: PPUSH
37676: LD_INT 81
37678: PUSH
37679: LD_VAR 0 1
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PPUSH
37688: CALL_OW 70
37692: ST_TO_ADDR
// end ;
37693: LD_VAR 0 3
37697: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37698: LD_INT 0
37700: PPUSH
37701: PPUSH
37702: PPUSH
37703: PPUSH
// result := false ;
37704: LD_ADDR_VAR 0 2
37708: PUSH
37709: LD_INT 0
37711: ST_TO_ADDR
// side := GetSide ( unit ) ;
37712: LD_ADDR_VAR 0 3
37716: PUSH
37717: LD_VAR 0 1
37721: PPUSH
37722: CALL_OW 255
37726: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37727: LD_ADDR_VAR 0 4
37731: PUSH
37732: LD_VAR 0 1
37736: PPUSH
37737: CALL_OW 248
37741: ST_TO_ADDR
// case nat of 1 :
37742: LD_VAR 0 4
37746: PUSH
37747: LD_INT 1
37749: DOUBLE
37750: EQUAL
37751: IFTRUE 37755
37753: GO 37766
37755: POP
// tech := tech_lassight ; 2 :
37756: LD_ADDR_VAR 0 5
37760: PUSH
37761: LD_INT 12
37763: ST_TO_ADDR
37764: GO 37805
37766: LD_INT 2
37768: DOUBLE
37769: EQUAL
37770: IFTRUE 37774
37772: GO 37785
37774: POP
// tech := tech_mortar ; 3 :
37775: LD_ADDR_VAR 0 5
37779: PUSH
37780: LD_INT 41
37782: ST_TO_ADDR
37783: GO 37805
37785: LD_INT 3
37787: DOUBLE
37788: EQUAL
37789: IFTRUE 37793
37791: GO 37804
37793: POP
// tech := tech_bazooka ; end ;
37794: LD_ADDR_VAR 0 5
37798: PUSH
37799: LD_INT 44
37801: ST_TO_ADDR
37802: GO 37805
37804: POP
// if Researched ( side , tech ) then
37805: LD_VAR 0 3
37809: PPUSH
37810: LD_VAR 0 5
37814: PPUSH
37815: CALL_OW 325
37819: IFFALSE 37846
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37821: LD_ADDR_VAR 0 2
37825: PUSH
37826: LD_INT 5
37828: PUSH
37829: LD_INT 8
37831: PUSH
37832: LD_INT 9
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: LIST
37839: PUSH
37840: LD_VAR 0 4
37844: ARRAY
37845: ST_TO_ADDR
// end ;
37846: LD_VAR 0 2
37850: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37851: LD_INT 0
37853: PPUSH
37854: PPUSH
37855: PPUSH
// if not mines then
37856: LD_VAR 0 2
37860: NOT
37861: IFFALSE 37865
// exit ;
37863: GO 38009
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37865: LD_ADDR_VAR 0 5
37869: PUSH
37870: LD_INT 81
37872: PUSH
37873: LD_VAR 0 1
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 3
37884: PUSH
37885: LD_INT 21
37887: PUSH
37888: LD_INT 3
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PPUSH
37903: CALL_OW 69
37907: ST_TO_ADDR
// for i in mines do
37908: LD_ADDR_VAR 0 4
37912: PUSH
37913: LD_VAR 0 2
37917: PUSH
37918: FOR_IN
37919: IFFALSE 38007
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37921: LD_VAR 0 4
37925: PUSH
37926: LD_INT 1
37928: ARRAY
37929: PPUSH
37930: LD_VAR 0 4
37934: PUSH
37935: LD_INT 2
37937: ARRAY
37938: PPUSH
37939: CALL_OW 458
37943: NOT
37944: IFFALSE 37948
// continue ;
37946: GO 37918
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37948: LD_VAR 0 4
37952: PUSH
37953: LD_INT 1
37955: ARRAY
37956: PPUSH
37957: LD_VAR 0 4
37961: PUSH
37962: LD_INT 2
37964: ARRAY
37965: PPUSH
37966: CALL_OW 428
37970: PUSH
37971: LD_VAR 0 5
37975: IN
37976: IFFALSE 38005
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37978: LD_VAR 0 4
37982: PUSH
37983: LD_INT 1
37985: ARRAY
37986: PPUSH
37987: LD_VAR 0 4
37991: PUSH
37992: LD_INT 2
37994: ARRAY
37995: PPUSH
37996: LD_VAR 0 1
38000: PPUSH
38001: CALL_OW 456
// end ;
38005: GO 37918
38007: POP
38008: POP
// end ;
38009: LD_VAR 0 3
38013: RET
// export function Count ( array ) ; var i ; begin
38014: LD_INT 0
38016: PPUSH
38017: PPUSH
// result := 0 ;
38018: LD_ADDR_VAR 0 2
38022: PUSH
38023: LD_INT 0
38025: ST_TO_ADDR
// for i in array do
38026: LD_ADDR_VAR 0 3
38030: PUSH
38031: LD_VAR 0 1
38035: PUSH
38036: FOR_IN
38037: IFFALSE 38061
// if i then
38039: LD_VAR 0 3
38043: IFFALSE 38059
// result := result + 1 ;
38045: LD_ADDR_VAR 0 2
38049: PUSH
38050: LD_VAR 0 2
38054: PUSH
38055: LD_INT 1
38057: PLUS
38058: ST_TO_ADDR
38059: GO 38036
38061: POP
38062: POP
// end ;
38063: LD_VAR 0 2
38067: RET
// export function IsEmpty ( building ) ; begin
38068: LD_INT 0
38070: PPUSH
// if not building then
38071: LD_VAR 0 1
38075: NOT
38076: IFFALSE 38080
// exit ;
38078: GO 38123
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38080: LD_ADDR_VAR 0 2
38084: PUSH
38085: LD_VAR 0 1
38089: PUSH
38090: LD_INT 22
38092: PUSH
38093: LD_VAR 0 1
38097: PPUSH
38098: CALL_OW 255
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 58
38109: PUSH
38110: EMPTY
38111: LIST
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PPUSH
38117: CALL_OW 69
38121: IN
38122: ST_TO_ADDR
// end ;
38123: LD_VAR 0 2
38127: RET
// export function IsNotFull ( building ) ; begin
38128: LD_INT 0
38130: PPUSH
// if not building then
38131: LD_VAR 0 1
38135: NOT
38136: IFFALSE 38140
// exit ;
38138: GO 38159
// result := UnitsInside ( building ) < 6 ;
38140: LD_ADDR_VAR 0 2
38144: PUSH
38145: LD_VAR 0 1
38149: PPUSH
38150: CALL_OW 313
38154: PUSH
38155: LD_INT 6
38157: LESS
38158: ST_TO_ADDR
// end ;
38159: LD_VAR 0 2
38163: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38164: LD_INT 0
38166: PPUSH
38167: PPUSH
38168: PPUSH
38169: PPUSH
// tmp := [ ] ;
38170: LD_ADDR_VAR 0 3
38174: PUSH
38175: EMPTY
38176: ST_TO_ADDR
// list := [ ] ;
38177: LD_ADDR_VAR 0 5
38181: PUSH
38182: EMPTY
38183: ST_TO_ADDR
// for i = 16 to 25 do
38184: LD_ADDR_VAR 0 4
38188: PUSH
38189: DOUBLE
38190: LD_INT 16
38192: DEC
38193: ST_TO_ADDR
38194: LD_INT 25
38196: PUSH
38197: FOR_TO
38198: IFFALSE 38271
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38200: LD_ADDR_VAR 0 3
38204: PUSH
38205: LD_VAR 0 3
38209: PUSH
38210: LD_INT 22
38212: PUSH
38213: LD_VAR 0 1
38217: PPUSH
38218: CALL_OW 255
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 91
38229: PUSH
38230: LD_VAR 0 1
38234: PUSH
38235: LD_INT 6
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 30
38245: PUSH
38246: LD_VAR 0 4
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: LIST
38259: PUSH
38260: EMPTY
38261: LIST
38262: PPUSH
38263: CALL_OW 69
38267: ADD
38268: ST_TO_ADDR
38269: GO 38197
38271: POP
38272: POP
// for i = 1 to tmp do
38273: LD_ADDR_VAR 0 4
38277: PUSH
38278: DOUBLE
38279: LD_INT 1
38281: DEC
38282: ST_TO_ADDR
38283: LD_VAR 0 3
38287: PUSH
38288: FOR_TO
38289: IFFALSE 38377
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38291: LD_ADDR_VAR 0 5
38295: PUSH
38296: LD_VAR 0 5
38300: PUSH
38301: LD_VAR 0 3
38305: PUSH
38306: LD_VAR 0 4
38310: ARRAY
38311: PPUSH
38312: CALL_OW 266
38316: PUSH
38317: LD_VAR 0 3
38321: PUSH
38322: LD_VAR 0 4
38326: ARRAY
38327: PPUSH
38328: CALL_OW 250
38332: PUSH
38333: LD_VAR 0 3
38337: PUSH
38338: LD_VAR 0 4
38342: ARRAY
38343: PPUSH
38344: CALL_OW 251
38348: PUSH
38349: LD_VAR 0 3
38353: PUSH
38354: LD_VAR 0 4
38358: ARRAY
38359: PPUSH
38360: CALL_OW 254
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: PUSH
38371: EMPTY
38372: LIST
38373: ADD
38374: ST_TO_ADDR
38375: GO 38288
38377: POP
38378: POP
// result := list ;
38379: LD_ADDR_VAR 0 2
38383: PUSH
38384: LD_VAR 0 5
38388: ST_TO_ADDR
// end ;
38389: LD_VAR 0 2
38393: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38394: LD_INT 0
38396: PPUSH
38397: PPUSH
38398: PPUSH
38399: PPUSH
38400: PPUSH
38401: PPUSH
38402: PPUSH
// if not factory then
38403: LD_VAR 0 1
38407: NOT
38408: IFFALSE 38412
// exit ;
38410: GO 39005
// if control = control_apeman then
38412: LD_VAR 0 4
38416: PUSH
38417: LD_INT 5
38419: EQUAL
38420: IFFALSE 38529
// begin tmp := UnitsInside ( factory ) ;
38422: LD_ADDR_VAR 0 8
38426: PUSH
38427: LD_VAR 0 1
38431: PPUSH
38432: CALL_OW 313
38436: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38437: LD_VAR 0 8
38441: PPUSH
38442: LD_INT 25
38444: PUSH
38445: LD_INT 12
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PPUSH
38452: CALL_OW 72
38456: NOT
38457: IFFALSE 38467
// control := control_manual ;
38459: LD_ADDR_VAR 0 4
38463: PUSH
38464: LD_INT 1
38466: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38467: LD_ADDR_VAR 0 8
38471: PUSH
38472: LD_VAR 0 1
38476: PPUSH
38477: CALL 38164 0 1
38481: ST_TO_ADDR
// if tmp then
38482: LD_VAR 0 8
38486: IFFALSE 38529
// begin for i in tmp do
38488: LD_ADDR_VAR 0 7
38492: PUSH
38493: LD_VAR 0 8
38497: PUSH
38498: FOR_IN
38499: IFFALSE 38527
// if i [ 1 ] = b_ext_radio then
38501: LD_VAR 0 7
38505: PUSH
38506: LD_INT 1
38508: ARRAY
38509: PUSH
38510: LD_INT 22
38512: EQUAL
38513: IFFALSE 38525
// begin control := control_remote ;
38515: LD_ADDR_VAR 0 4
38519: PUSH
38520: LD_INT 2
38522: ST_TO_ADDR
// break ;
38523: GO 38527
// end ;
38525: GO 38498
38527: POP
38528: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38529: LD_VAR 0 1
38533: PPUSH
38534: LD_VAR 0 2
38538: PPUSH
38539: LD_VAR 0 3
38543: PPUSH
38544: LD_VAR 0 4
38548: PPUSH
38549: LD_VAR 0 5
38553: PPUSH
38554: CALL_OW 448
38558: IFFALSE 38593
// begin result := [ chassis , engine , control , weapon ] ;
38560: LD_ADDR_VAR 0 6
38564: PUSH
38565: LD_VAR 0 2
38569: PUSH
38570: LD_VAR 0 3
38574: PUSH
38575: LD_VAR 0 4
38579: PUSH
38580: LD_VAR 0 5
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: ST_TO_ADDR
// exit ;
38591: GO 39005
// end ; _chassis := AvailableChassisList ( factory ) ;
38593: LD_ADDR_VAR 0 9
38597: PUSH
38598: LD_VAR 0 1
38602: PPUSH
38603: CALL_OW 475
38607: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38608: LD_ADDR_VAR 0 11
38612: PUSH
38613: LD_VAR 0 1
38617: PPUSH
38618: CALL_OW 476
38622: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38623: LD_ADDR_VAR 0 12
38627: PUSH
38628: LD_VAR 0 1
38632: PPUSH
38633: CALL_OW 477
38637: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38638: LD_ADDR_VAR 0 10
38642: PUSH
38643: LD_VAR 0 1
38647: PPUSH
38648: CALL_OW 478
38652: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38653: LD_VAR 0 9
38657: NOT
38658: PUSH
38659: LD_VAR 0 11
38663: NOT
38664: OR
38665: PUSH
38666: LD_VAR 0 12
38670: NOT
38671: OR
38672: PUSH
38673: LD_VAR 0 10
38677: NOT
38678: OR
38679: IFFALSE 38714
// begin result := [ chassis , engine , control , weapon ] ;
38681: LD_ADDR_VAR 0 6
38685: PUSH
38686: LD_VAR 0 2
38690: PUSH
38691: LD_VAR 0 3
38695: PUSH
38696: LD_VAR 0 4
38700: PUSH
38701: LD_VAR 0 5
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: ST_TO_ADDR
// exit ;
38712: GO 39005
// end ; if not chassis in _chassis then
38714: LD_VAR 0 2
38718: PUSH
38719: LD_VAR 0 9
38723: IN
38724: NOT
38725: IFFALSE 38751
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38727: LD_ADDR_VAR 0 2
38731: PUSH
38732: LD_VAR 0 9
38736: PUSH
38737: LD_INT 1
38739: PPUSH
38740: LD_VAR 0 9
38744: PPUSH
38745: CALL_OW 12
38749: ARRAY
38750: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38751: LD_VAR 0 2
38755: PPUSH
38756: LD_VAR 0 3
38760: PPUSH
38761: CALL 39010 0 2
38765: NOT
38766: IFFALSE 38825
// repeat engine := _engine [ 1 ] ;
38768: LD_ADDR_VAR 0 3
38772: PUSH
38773: LD_VAR 0 11
38777: PUSH
38778: LD_INT 1
38780: ARRAY
38781: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38782: LD_ADDR_VAR 0 11
38786: PUSH
38787: LD_VAR 0 11
38791: PPUSH
38792: LD_INT 1
38794: PPUSH
38795: CALL_OW 3
38799: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38800: LD_VAR 0 2
38804: PPUSH
38805: LD_VAR 0 3
38809: PPUSH
38810: CALL 39010 0 2
38814: PUSH
38815: LD_VAR 0 11
38819: PUSH
38820: EMPTY
38821: EQUAL
38822: OR
38823: IFFALSE 38768
// if not control in _control then
38825: LD_VAR 0 4
38829: PUSH
38830: LD_VAR 0 12
38834: IN
38835: NOT
38836: IFFALSE 38862
// control := _control [ rand ( 1 , _control ) ] ;
38838: LD_ADDR_VAR 0 4
38842: PUSH
38843: LD_VAR 0 12
38847: PUSH
38848: LD_INT 1
38850: PPUSH
38851: LD_VAR 0 12
38855: PPUSH
38856: CALL_OW 12
38860: ARRAY
38861: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38862: LD_VAR 0 2
38866: PPUSH
38867: LD_VAR 0 5
38871: PPUSH
38872: CALL 39230 0 2
38876: NOT
38877: IFFALSE 38936
// repeat weapon := _weapon [ 1 ] ;
38879: LD_ADDR_VAR 0 5
38883: PUSH
38884: LD_VAR 0 10
38888: PUSH
38889: LD_INT 1
38891: ARRAY
38892: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38893: LD_ADDR_VAR 0 10
38897: PUSH
38898: LD_VAR 0 10
38902: PPUSH
38903: LD_INT 1
38905: PPUSH
38906: CALL_OW 3
38910: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38911: LD_VAR 0 2
38915: PPUSH
38916: LD_VAR 0 5
38920: PPUSH
38921: CALL 39230 0 2
38925: PUSH
38926: LD_VAR 0 10
38930: PUSH
38931: EMPTY
38932: EQUAL
38933: OR
38934: IFFALSE 38879
// result := [ ] ;
38936: LD_ADDR_VAR 0 6
38940: PUSH
38941: EMPTY
38942: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38943: LD_VAR 0 1
38947: PPUSH
38948: LD_VAR 0 2
38952: PPUSH
38953: LD_VAR 0 3
38957: PPUSH
38958: LD_VAR 0 4
38962: PPUSH
38963: LD_VAR 0 5
38967: PPUSH
38968: CALL_OW 448
38972: IFFALSE 39005
// result := [ chassis , engine , control , weapon ] ;
38974: LD_ADDR_VAR 0 6
38978: PUSH
38979: LD_VAR 0 2
38983: PUSH
38984: LD_VAR 0 3
38988: PUSH
38989: LD_VAR 0 4
38993: PUSH
38994: LD_VAR 0 5
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: ST_TO_ADDR
// end ;
39005: LD_VAR 0 6
39009: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39010: LD_INT 0
39012: PPUSH
// if not chassis or not engine then
39013: LD_VAR 0 1
39017: NOT
39018: PUSH
39019: LD_VAR 0 2
39023: NOT
39024: OR
39025: IFFALSE 39029
// exit ;
39027: GO 39225
// case engine of engine_solar :
39029: LD_VAR 0 2
39033: PUSH
39034: LD_INT 2
39036: DOUBLE
39037: EQUAL
39038: IFTRUE 39042
39040: GO 39080
39042: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39043: LD_ADDR_VAR 0 3
39047: PUSH
39048: LD_INT 11
39050: PUSH
39051: LD_INT 12
39053: PUSH
39054: LD_INT 13
39056: PUSH
39057: LD_INT 14
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: LD_INT 2
39065: PUSH
39066: LD_INT 3
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: ST_TO_ADDR
39078: GO 39209
39080: LD_INT 1
39082: DOUBLE
39083: EQUAL
39084: IFTRUE 39088
39086: GO 39150
39088: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39089: LD_ADDR_VAR 0 3
39093: PUSH
39094: LD_INT 11
39096: PUSH
39097: LD_INT 12
39099: PUSH
39100: LD_INT 13
39102: PUSH
39103: LD_INT 14
39105: PUSH
39106: LD_INT 1
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: LD_INT 3
39114: PUSH
39115: LD_INT 4
39117: PUSH
39118: LD_INT 5
39120: PUSH
39121: LD_INT 21
39123: PUSH
39124: LD_INT 23
39126: PUSH
39127: LD_INT 22
39129: PUSH
39130: LD_INT 24
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: ST_TO_ADDR
39148: GO 39209
39150: LD_INT 3
39152: DOUBLE
39153: EQUAL
39154: IFTRUE 39158
39156: GO 39208
39158: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39159: LD_ADDR_VAR 0 3
39163: PUSH
39164: LD_INT 13
39166: PUSH
39167: LD_INT 14
39169: PUSH
39170: LD_INT 2
39172: PUSH
39173: LD_INT 3
39175: PUSH
39176: LD_INT 4
39178: PUSH
39179: LD_INT 5
39181: PUSH
39182: LD_INT 21
39184: PUSH
39185: LD_INT 22
39187: PUSH
39188: LD_INT 23
39190: PUSH
39191: LD_INT 24
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: ST_TO_ADDR
39206: GO 39209
39208: POP
// result := ( chassis in result ) ;
39209: LD_ADDR_VAR 0 3
39213: PUSH
39214: LD_VAR 0 1
39218: PUSH
39219: LD_VAR 0 3
39223: IN
39224: ST_TO_ADDR
// end ;
39225: LD_VAR 0 3
39229: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39230: LD_INT 0
39232: PPUSH
// if not chassis or not weapon then
39233: LD_VAR 0 1
39237: NOT
39238: PUSH
39239: LD_VAR 0 2
39243: NOT
39244: OR
39245: IFFALSE 39249
// exit ;
39247: GO 40311
// case weapon of us_machine_gun :
39249: LD_VAR 0 2
39253: PUSH
39254: LD_INT 2
39256: DOUBLE
39257: EQUAL
39258: IFTRUE 39262
39260: GO 39292
39262: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39263: LD_ADDR_VAR 0 3
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: LD_INT 2
39273: PUSH
39274: LD_INT 3
39276: PUSH
39277: LD_INT 4
39279: PUSH
39280: LD_INT 5
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: ST_TO_ADDR
39290: GO 40295
39292: LD_INT 3
39294: DOUBLE
39295: EQUAL
39296: IFTRUE 39300
39298: GO 39330
39300: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39301: LD_ADDR_VAR 0 3
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: LD_INT 2
39311: PUSH
39312: LD_INT 3
39314: PUSH
39315: LD_INT 4
39317: PUSH
39318: LD_INT 5
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: ST_TO_ADDR
39328: GO 40295
39330: LD_INT 11
39332: DOUBLE
39333: EQUAL
39334: IFTRUE 39338
39336: GO 39368
39338: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39339: LD_ADDR_VAR 0 3
39343: PUSH
39344: LD_INT 1
39346: PUSH
39347: LD_INT 2
39349: PUSH
39350: LD_INT 3
39352: PUSH
39353: LD_INT 4
39355: PUSH
39356: LD_INT 5
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: ST_TO_ADDR
39366: GO 40295
39368: LD_INT 4
39370: DOUBLE
39371: EQUAL
39372: IFTRUE 39376
39374: GO 39402
39376: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39377: LD_ADDR_VAR 0 3
39381: PUSH
39382: LD_INT 2
39384: PUSH
39385: LD_INT 3
39387: PUSH
39388: LD_INT 4
39390: PUSH
39391: LD_INT 5
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: ST_TO_ADDR
39400: GO 40295
39402: LD_INT 5
39404: DOUBLE
39405: EQUAL
39406: IFTRUE 39410
39408: GO 39436
39410: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39411: LD_ADDR_VAR 0 3
39415: PUSH
39416: LD_INT 2
39418: PUSH
39419: LD_INT 3
39421: PUSH
39422: LD_INT 4
39424: PUSH
39425: LD_INT 5
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: ST_TO_ADDR
39434: GO 40295
39436: LD_INT 9
39438: DOUBLE
39439: EQUAL
39440: IFTRUE 39444
39442: GO 39470
39444: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39445: LD_ADDR_VAR 0 3
39449: PUSH
39450: LD_INT 2
39452: PUSH
39453: LD_INT 3
39455: PUSH
39456: LD_INT 4
39458: PUSH
39459: LD_INT 5
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: ST_TO_ADDR
39468: GO 40295
39470: LD_INT 7
39472: DOUBLE
39473: EQUAL
39474: IFTRUE 39478
39476: GO 39504
39478: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39479: LD_ADDR_VAR 0 3
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: LD_INT 3
39489: PUSH
39490: LD_INT 4
39492: PUSH
39493: LD_INT 5
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: ST_TO_ADDR
39502: GO 40295
39504: LD_INT 12
39506: DOUBLE
39507: EQUAL
39508: IFTRUE 39512
39510: GO 39538
39512: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39513: LD_ADDR_VAR 0 3
39517: PUSH
39518: LD_INT 2
39520: PUSH
39521: LD_INT 3
39523: PUSH
39524: LD_INT 4
39526: PUSH
39527: LD_INT 5
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: ST_TO_ADDR
39536: GO 40295
39538: LD_INT 13
39540: DOUBLE
39541: EQUAL
39542: IFTRUE 39546
39544: GO 39572
39546: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39547: LD_ADDR_VAR 0 3
39551: PUSH
39552: LD_INT 2
39554: PUSH
39555: LD_INT 3
39557: PUSH
39558: LD_INT 4
39560: PUSH
39561: LD_INT 5
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: ST_TO_ADDR
39570: GO 40295
39572: LD_INT 14
39574: DOUBLE
39575: EQUAL
39576: IFTRUE 39580
39578: GO 39598
39580: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39581: LD_ADDR_VAR 0 3
39585: PUSH
39586: LD_INT 4
39588: PUSH
39589: LD_INT 5
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: ST_TO_ADDR
39596: GO 40295
39598: LD_INT 6
39600: DOUBLE
39601: EQUAL
39602: IFTRUE 39606
39604: GO 39624
39606: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39607: LD_ADDR_VAR 0 3
39611: PUSH
39612: LD_INT 4
39614: PUSH
39615: LD_INT 5
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: ST_TO_ADDR
39622: GO 40295
39624: LD_INT 10
39626: DOUBLE
39627: EQUAL
39628: IFTRUE 39632
39630: GO 39650
39632: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39633: LD_ADDR_VAR 0 3
39637: PUSH
39638: LD_INT 4
39640: PUSH
39641: LD_INT 5
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: ST_TO_ADDR
39648: GO 40295
39650: LD_INT 22
39652: DOUBLE
39653: EQUAL
39654: IFTRUE 39658
39656: GO 39684
39658: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39659: LD_ADDR_VAR 0 3
39663: PUSH
39664: LD_INT 11
39666: PUSH
39667: LD_INT 12
39669: PUSH
39670: LD_INT 13
39672: PUSH
39673: LD_INT 14
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: ST_TO_ADDR
39682: GO 40295
39684: LD_INT 23
39686: DOUBLE
39687: EQUAL
39688: IFTRUE 39692
39690: GO 39718
39692: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39693: LD_ADDR_VAR 0 3
39697: PUSH
39698: LD_INT 11
39700: PUSH
39701: LD_INT 12
39703: PUSH
39704: LD_INT 13
39706: PUSH
39707: LD_INT 14
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: ST_TO_ADDR
39716: GO 40295
39718: LD_INT 24
39720: DOUBLE
39721: EQUAL
39722: IFTRUE 39726
39724: GO 39752
39726: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39727: LD_ADDR_VAR 0 3
39731: PUSH
39732: LD_INT 11
39734: PUSH
39735: LD_INT 12
39737: PUSH
39738: LD_INT 13
39740: PUSH
39741: LD_INT 14
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: ST_TO_ADDR
39750: GO 40295
39752: LD_INT 30
39754: DOUBLE
39755: EQUAL
39756: IFTRUE 39760
39758: GO 39786
39760: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39761: LD_ADDR_VAR 0 3
39765: PUSH
39766: LD_INT 11
39768: PUSH
39769: LD_INT 12
39771: PUSH
39772: LD_INT 13
39774: PUSH
39775: LD_INT 14
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: ST_TO_ADDR
39784: GO 40295
39786: LD_INT 25
39788: DOUBLE
39789: EQUAL
39790: IFTRUE 39794
39792: GO 39812
39794: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39795: LD_ADDR_VAR 0 3
39799: PUSH
39800: LD_INT 13
39802: PUSH
39803: LD_INT 14
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: ST_TO_ADDR
39810: GO 40295
39812: LD_INT 27
39814: DOUBLE
39815: EQUAL
39816: IFTRUE 39820
39818: GO 39838
39820: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39821: LD_ADDR_VAR 0 3
39825: PUSH
39826: LD_INT 13
39828: PUSH
39829: LD_INT 14
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: ST_TO_ADDR
39836: GO 40295
39838: LD_EXP 67
39842: DOUBLE
39843: EQUAL
39844: IFTRUE 39848
39846: GO 39874
39848: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39849: LD_ADDR_VAR 0 3
39853: PUSH
39854: LD_INT 11
39856: PUSH
39857: LD_INT 12
39859: PUSH
39860: LD_INT 13
39862: PUSH
39863: LD_INT 14
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: ST_TO_ADDR
39872: GO 40295
39874: LD_INT 28
39876: DOUBLE
39877: EQUAL
39878: IFTRUE 39882
39880: GO 39900
39882: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39883: LD_ADDR_VAR 0 3
39887: PUSH
39888: LD_INT 13
39890: PUSH
39891: LD_INT 14
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: ST_TO_ADDR
39898: GO 40295
39900: LD_INT 29
39902: DOUBLE
39903: EQUAL
39904: IFTRUE 39908
39906: GO 39926
39908: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39909: LD_ADDR_VAR 0 3
39913: PUSH
39914: LD_INT 13
39916: PUSH
39917: LD_INT 14
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: ST_TO_ADDR
39924: GO 40295
39926: LD_INT 31
39928: DOUBLE
39929: EQUAL
39930: IFTRUE 39934
39932: GO 39952
39934: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39935: LD_ADDR_VAR 0 3
39939: PUSH
39940: LD_INT 13
39942: PUSH
39943: LD_INT 14
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: ST_TO_ADDR
39950: GO 40295
39952: LD_INT 26
39954: DOUBLE
39955: EQUAL
39956: IFTRUE 39960
39958: GO 39978
39960: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39961: LD_ADDR_VAR 0 3
39965: PUSH
39966: LD_INT 13
39968: PUSH
39969: LD_INT 14
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: ST_TO_ADDR
39976: GO 40295
39978: LD_INT 42
39980: DOUBLE
39981: EQUAL
39982: IFTRUE 39986
39984: GO 40012
39986: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39987: LD_ADDR_VAR 0 3
39991: PUSH
39992: LD_INT 21
39994: PUSH
39995: LD_INT 22
39997: PUSH
39998: LD_INT 23
40000: PUSH
40001: LD_INT 24
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: ST_TO_ADDR
40010: GO 40295
40012: LD_INT 43
40014: DOUBLE
40015: EQUAL
40016: IFTRUE 40020
40018: GO 40046
40020: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40021: LD_ADDR_VAR 0 3
40025: PUSH
40026: LD_INT 21
40028: PUSH
40029: LD_INT 22
40031: PUSH
40032: LD_INT 23
40034: PUSH
40035: LD_INT 24
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: ST_TO_ADDR
40044: GO 40295
40046: LD_INT 44
40048: DOUBLE
40049: EQUAL
40050: IFTRUE 40054
40052: GO 40080
40054: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40055: LD_ADDR_VAR 0 3
40059: PUSH
40060: LD_INT 21
40062: PUSH
40063: LD_INT 22
40065: PUSH
40066: LD_INT 23
40068: PUSH
40069: LD_INT 24
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: ST_TO_ADDR
40078: GO 40295
40080: LD_INT 45
40082: DOUBLE
40083: EQUAL
40084: IFTRUE 40088
40086: GO 40114
40088: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40089: LD_ADDR_VAR 0 3
40093: PUSH
40094: LD_INT 21
40096: PUSH
40097: LD_INT 22
40099: PUSH
40100: LD_INT 23
40102: PUSH
40103: LD_INT 24
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: ST_TO_ADDR
40112: GO 40295
40114: LD_INT 49
40116: DOUBLE
40117: EQUAL
40118: IFTRUE 40122
40120: GO 40148
40122: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40123: LD_ADDR_VAR 0 3
40127: PUSH
40128: LD_INT 21
40130: PUSH
40131: LD_INT 22
40133: PUSH
40134: LD_INT 23
40136: PUSH
40137: LD_INT 24
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: ST_TO_ADDR
40146: GO 40295
40148: LD_INT 51
40150: DOUBLE
40151: EQUAL
40152: IFTRUE 40156
40154: GO 40182
40156: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40157: LD_ADDR_VAR 0 3
40161: PUSH
40162: LD_INT 21
40164: PUSH
40165: LD_INT 22
40167: PUSH
40168: LD_INT 23
40170: PUSH
40171: LD_INT 24
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: ST_TO_ADDR
40180: GO 40295
40182: LD_INT 52
40184: DOUBLE
40185: EQUAL
40186: IFTRUE 40190
40188: GO 40216
40190: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40191: LD_ADDR_VAR 0 3
40195: PUSH
40196: LD_INT 21
40198: PUSH
40199: LD_INT 22
40201: PUSH
40202: LD_INT 23
40204: PUSH
40205: LD_INT 24
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: ST_TO_ADDR
40214: GO 40295
40216: LD_INT 53
40218: DOUBLE
40219: EQUAL
40220: IFTRUE 40224
40222: GO 40242
40224: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40225: LD_ADDR_VAR 0 3
40229: PUSH
40230: LD_INT 23
40232: PUSH
40233: LD_INT 24
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: ST_TO_ADDR
40240: GO 40295
40242: LD_INT 46
40244: DOUBLE
40245: EQUAL
40246: IFTRUE 40250
40248: GO 40268
40250: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40251: LD_ADDR_VAR 0 3
40255: PUSH
40256: LD_INT 23
40258: PUSH
40259: LD_INT 24
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: ST_TO_ADDR
40266: GO 40295
40268: LD_INT 47
40270: DOUBLE
40271: EQUAL
40272: IFTRUE 40276
40274: GO 40294
40276: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40277: LD_ADDR_VAR 0 3
40281: PUSH
40282: LD_INT 23
40284: PUSH
40285: LD_INT 24
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: ST_TO_ADDR
40292: GO 40295
40294: POP
// result := ( chassis in result ) ;
40295: LD_ADDR_VAR 0 3
40299: PUSH
40300: LD_VAR 0 1
40304: PUSH
40305: LD_VAR 0 3
40309: IN
40310: ST_TO_ADDR
// end ;
40311: LD_VAR 0 3
40315: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40316: LD_INT 0
40318: PPUSH
40319: PPUSH
40320: PPUSH
40321: PPUSH
40322: PPUSH
40323: PPUSH
40324: PPUSH
// result := array ;
40325: LD_ADDR_VAR 0 5
40329: PUSH
40330: LD_VAR 0 1
40334: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40335: LD_VAR 0 1
40339: NOT
40340: PUSH
40341: LD_VAR 0 2
40345: NOT
40346: OR
40347: PUSH
40348: LD_VAR 0 3
40352: NOT
40353: OR
40354: PUSH
40355: LD_VAR 0 2
40359: PUSH
40360: LD_VAR 0 1
40364: GREATER
40365: OR
40366: PUSH
40367: LD_VAR 0 3
40371: PUSH
40372: LD_VAR 0 1
40376: GREATER
40377: OR
40378: IFFALSE 40382
// exit ;
40380: GO 40678
// if direction then
40382: LD_VAR 0 4
40386: IFFALSE 40450
// begin d := 1 ;
40388: LD_ADDR_VAR 0 9
40392: PUSH
40393: LD_INT 1
40395: ST_TO_ADDR
// if i_from > i_to then
40396: LD_VAR 0 2
40400: PUSH
40401: LD_VAR 0 3
40405: GREATER
40406: IFFALSE 40432
// length := ( array - i_from ) + i_to else
40408: LD_ADDR_VAR 0 11
40412: PUSH
40413: LD_VAR 0 1
40417: PUSH
40418: LD_VAR 0 2
40422: MINUS
40423: PUSH
40424: LD_VAR 0 3
40428: PLUS
40429: ST_TO_ADDR
40430: GO 40448
// length := i_to - i_from ;
40432: LD_ADDR_VAR 0 11
40436: PUSH
40437: LD_VAR 0 3
40441: PUSH
40442: LD_VAR 0 2
40446: MINUS
40447: ST_TO_ADDR
// end else
40448: GO 40511
// begin d := - 1 ;
40450: LD_ADDR_VAR 0 9
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: ST_TO_ADDR
// if i_from > i_to then
40459: LD_VAR 0 2
40463: PUSH
40464: LD_VAR 0 3
40468: GREATER
40469: IFFALSE 40489
// length := i_from - i_to else
40471: LD_ADDR_VAR 0 11
40475: PUSH
40476: LD_VAR 0 2
40480: PUSH
40481: LD_VAR 0 3
40485: MINUS
40486: ST_TO_ADDR
40487: GO 40511
// length := ( array - i_to ) + i_from ;
40489: LD_ADDR_VAR 0 11
40493: PUSH
40494: LD_VAR 0 1
40498: PUSH
40499: LD_VAR 0 3
40503: MINUS
40504: PUSH
40505: LD_VAR 0 2
40509: PLUS
40510: ST_TO_ADDR
// end ; if not length then
40511: LD_VAR 0 11
40515: NOT
40516: IFFALSE 40520
// exit ;
40518: GO 40678
// tmp := array ;
40520: LD_ADDR_VAR 0 10
40524: PUSH
40525: LD_VAR 0 1
40529: ST_TO_ADDR
// for i = 1 to length do
40530: LD_ADDR_VAR 0 6
40534: PUSH
40535: DOUBLE
40536: LD_INT 1
40538: DEC
40539: ST_TO_ADDR
40540: LD_VAR 0 11
40544: PUSH
40545: FOR_TO
40546: IFFALSE 40666
// begin for j = 1 to array do
40548: LD_ADDR_VAR 0 7
40552: PUSH
40553: DOUBLE
40554: LD_INT 1
40556: DEC
40557: ST_TO_ADDR
40558: LD_VAR 0 1
40562: PUSH
40563: FOR_TO
40564: IFFALSE 40652
// begin k := j + d ;
40566: LD_ADDR_VAR 0 8
40570: PUSH
40571: LD_VAR 0 7
40575: PUSH
40576: LD_VAR 0 9
40580: PLUS
40581: ST_TO_ADDR
// if k > array then
40582: LD_VAR 0 8
40586: PUSH
40587: LD_VAR 0 1
40591: GREATER
40592: IFFALSE 40602
// k := 1 ;
40594: LD_ADDR_VAR 0 8
40598: PUSH
40599: LD_INT 1
40601: ST_TO_ADDR
// if not k then
40602: LD_VAR 0 8
40606: NOT
40607: IFFALSE 40619
// k := array ;
40609: LD_ADDR_VAR 0 8
40613: PUSH
40614: LD_VAR 0 1
40618: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40619: LD_ADDR_VAR 0 10
40623: PUSH
40624: LD_VAR 0 10
40628: PPUSH
40629: LD_VAR 0 8
40633: PPUSH
40634: LD_VAR 0 1
40638: PUSH
40639: LD_VAR 0 7
40643: ARRAY
40644: PPUSH
40645: CALL_OW 1
40649: ST_TO_ADDR
// end ;
40650: GO 40563
40652: POP
40653: POP
// array := tmp ;
40654: LD_ADDR_VAR 0 1
40658: PUSH
40659: LD_VAR 0 10
40663: ST_TO_ADDR
// end ;
40664: GO 40545
40666: POP
40667: POP
// result := array ;
40668: LD_ADDR_VAR 0 5
40672: PUSH
40673: LD_VAR 0 1
40677: ST_TO_ADDR
// end ;
40678: LD_VAR 0 5
40682: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40683: LD_INT 0
40685: PPUSH
40686: PPUSH
// result := 0 ;
40687: LD_ADDR_VAR 0 3
40691: PUSH
40692: LD_INT 0
40694: ST_TO_ADDR
// if not array or not value in array then
40695: LD_VAR 0 1
40699: NOT
40700: PUSH
40701: LD_VAR 0 2
40705: PUSH
40706: LD_VAR 0 1
40710: IN
40711: NOT
40712: OR
40713: IFFALSE 40717
// exit ;
40715: GO 40771
// for i = 1 to array do
40717: LD_ADDR_VAR 0 4
40721: PUSH
40722: DOUBLE
40723: LD_INT 1
40725: DEC
40726: ST_TO_ADDR
40727: LD_VAR 0 1
40731: PUSH
40732: FOR_TO
40733: IFFALSE 40769
// if value = array [ i ] then
40735: LD_VAR 0 2
40739: PUSH
40740: LD_VAR 0 1
40744: PUSH
40745: LD_VAR 0 4
40749: ARRAY
40750: EQUAL
40751: IFFALSE 40767
// begin result := i ;
40753: LD_ADDR_VAR 0 3
40757: PUSH
40758: LD_VAR 0 4
40762: ST_TO_ADDR
// exit ;
40763: POP
40764: POP
40765: GO 40771
// end ;
40767: GO 40732
40769: POP
40770: POP
// end ;
40771: LD_VAR 0 3
40775: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40776: LD_INT 0
40778: PPUSH
// vc_chassis := chassis ;
40779: LD_ADDR_OWVAR 37
40783: PUSH
40784: LD_VAR 0 1
40788: ST_TO_ADDR
// vc_engine := engine ;
40789: LD_ADDR_OWVAR 39
40793: PUSH
40794: LD_VAR 0 2
40798: ST_TO_ADDR
// vc_control := control ;
40799: LD_ADDR_OWVAR 38
40803: PUSH
40804: LD_VAR 0 3
40808: ST_TO_ADDR
// vc_weapon := weapon ;
40809: LD_ADDR_OWVAR 40
40813: PUSH
40814: LD_VAR 0 4
40818: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40819: LD_ADDR_OWVAR 41
40823: PUSH
40824: LD_VAR 0 5
40828: ST_TO_ADDR
// end ;
40829: LD_VAR 0 6
40833: RET
// export function WantPlant ( unit ) ; var task ; begin
40834: LD_INT 0
40836: PPUSH
40837: PPUSH
// result := false ;
40838: LD_ADDR_VAR 0 2
40842: PUSH
40843: LD_INT 0
40845: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40846: LD_ADDR_VAR 0 3
40850: PUSH
40851: LD_VAR 0 1
40855: PPUSH
40856: CALL_OW 437
40860: ST_TO_ADDR
// if task then
40861: LD_VAR 0 3
40865: IFFALSE 40893
// if task [ 1 ] [ 1 ] = p then
40867: LD_VAR 0 3
40871: PUSH
40872: LD_INT 1
40874: ARRAY
40875: PUSH
40876: LD_INT 1
40878: ARRAY
40879: PUSH
40880: LD_STRING p
40882: EQUAL
40883: IFFALSE 40893
// result := true ;
40885: LD_ADDR_VAR 0 2
40889: PUSH
40890: LD_INT 1
40892: ST_TO_ADDR
// end ;
40893: LD_VAR 0 2
40897: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40898: LD_INT 0
40900: PPUSH
40901: PPUSH
40902: PPUSH
40903: PPUSH
// if pos < 1 then
40904: LD_VAR 0 2
40908: PUSH
40909: LD_INT 1
40911: LESS
40912: IFFALSE 40916
// exit ;
40914: GO 41219
// if pos = 1 then
40916: LD_VAR 0 2
40920: PUSH
40921: LD_INT 1
40923: EQUAL
40924: IFFALSE 40957
// result := Replace ( arr , pos [ 1 ] , value ) else
40926: LD_ADDR_VAR 0 4
40930: PUSH
40931: LD_VAR 0 1
40935: PPUSH
40936: LD_VAR 0 2
40940: PUSH
40941: LD_INT 1
40943: ARRAY
40944: PPUSH
40945: LD_VAR 0 3
40949: PPUSH
40950: CALL_OW 1
40954: ST_TO_ADDR
40955: GO 41219
// begin tmp := arr ;
40957: LD_ADDR_VAR 0 6
40961: PUSH
40962: LD_VAR 0 1
40966: ST_TO_ADDR
// s_arr := [ tmp ] ;
40967: LD_ADDR_VAR 0 7
40971: PUSH
40972: LD_VAR 0 6
40976: PUSH
40977: EMPTY
40978: LIST
40979: ST_TO_ADDR
// for i = 1 to pos - 1 do
40980: LD_ADDR_VAR 0 5
40984: PUSH
40985: DOUBLE
40986: LD_INT 1
40988: DEC
40989: ST_TO_ADDR
40990: LD_VAR 0 2
40994: PUSH
40995: LD_INT 1
40997: MINUS
40998: PUSH
40999: FOR_TO
41000: IFFALSE 41045
// begin tmp := tmp [ pos [ i ] ] ;
41002: LD_ADDR_VAR 0 6
41006: PUSH
41007: LD_VAR 0 6
41011: PUSH
41012: LD_VAR 0 2
41016: PUSH
41017: LD_VAR 0 5
41021: ARRAY
41022: ARRAY
41023: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41024: LD_ADDR_VAR 0 7
41028: PUSH
41029: LD_VAR 0 7
41033: PUSH
41034: LD_VAR 0 6
41038: PUSH
41039: EMPTY
41040: LIST
41041: ADD
41042: ST_TO_ADDR
// end ;
41043: GO 40999
41045: POP
41046: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41047: LD_ADDR_VAR 0 6
41051: PUSH
41052: LD_VAR 0 6
41056: PPUSH
41057: LD_VAR 0 2
41061: PUSH
41062: LD_VAR 0 2
41066: ARRAY
41067: PPUSH
41068: LD_VAR 0 3
41072: PPUSH
41073: CALL_OW 1
41077: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41078: LD_ADDR_VAR 0 7
41082: PUSH
41083: LD_VAR 0 7
41087: PPUSH
41088: LD_VAR 0 7
41092: PPUSH
41093: LD_VAR 0 6
41097: PPUSH
41098: CALL_OW 1
41102: ST_TO_ADDR
// for i = s_arr downto 2 do
41103: LD_ADDR_VAR 0 5
41107: PUSH
41108: DOUBLE
41109: LD_VAR 0 7
41113: INC
41114: ST_TO_ADDR
41115: LD_INT 2
41117: PUSH
41118: FOR_DOWNTO
41119: IFFALSE 41203
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41121: LD_ADDR_VAR 0 6
41125: PUSH
41126: LD_VAR 0 7
41130: PUSH
41131: LD_VAR 0 5
41135: PUSH
41136: LD_INT 1
41138: MINUS
41139: ARRAY
41140: PPUSH
41141: LD_VAR 0 2
41145: PUSH
41146: LD_VAR 0 5
41150: PUSH
41151: LD_INT 1
41153: MINUS
41154: ARRAY
41155: PPUSH
41156: LD_VAR 0 7
41160: PUSH
41161: LD_VAR 0 5
41165: ARRAY
41166: PPUSH
41167: CALL_OW 1
41171: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41172: LD_ADDR_VAR 0 7
41176: PUSH
41177: LD_VAR 0 7
41181: PPUSH
41182: LD_VAR 0 5
41186: PUSH
41187: LD_INT 1
41189: MINUS
41190: PPUSH
41191: LD_VAR 0 6
41195: PPUSH
41196: CALL_OW 1
41200: ST_TO_ADDR
// end ;
41201: GO 41118
41203: POP
41204: POP
// result := s_arr [ 1 ] ;
41205: LD_ADDR_VAR 0 4
41209: PUSH
41210: LD_VAR 0 7
41214: PUSH
41215: LD_INT 1
41217: ARRAY
41218: ST_TO_ADDR
// end ; end ;
41219: LD_VAR 0 4
41223: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41224: LD_INT 0
41226: PPUSH
41227: PPUSH
// if not list then
41228: LD_VAR 0 1
41232: NOT
41233: IFFALSE 41237
// exit ;
41235: GO 41328
// i := list [ pos1 ] ;
41237: LD_ADDR_VAR 0 5
41241: PUSH
41242: LD_VAR 0 1
41246: PUSH
41247: LD_VAR 0 2
41251: ARRAY
41252: ST_TO_ADDR
// if not i then
41253: LD_VAR 0 5
41257: NOT
41258: IFFALSE 41262
// exit ;
41260: GO 41328
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41262: LD_ADDR_VAR 0 1
41266: PUSH
41267: LD_VAR 0 1
41271: PPUSH
41272: LD_VAR 0 2
41276: PPUSH
41277: LD_VAR 0 1
41281: PUSH
41282: LD_VAR 0 3
41286: ARRAY
41287: PPUSH
41288: CALL_OW 1
41292: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41293: LD_ADDR_VAR 0 1
41297: PUSH
41298: LD_VAR 0 1
41302: PPUSH
41303: LD_VAR 0 3
41307: PPUSH
41308: LD_VAR 0 5
41312: PPUSH
41313: CALL_OW 1
41317: ST_TO_ADDR
// result := list ;
41318: LD_ADDR_VAR 0 4
41322: PUSH
41323: LD_VAR 0 1
41327: ST_TO_ADDR
// end ;
41328: LD_VAR 0 4
41332: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41333: LD_INT 0
41335: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41336: LD_ADDR_VAR 0 5
41340: PUSH
41341: LD_VAR 0 1
41345: PPUSH
41346: CALL_OW 250
41350: PPUSH
41351: LD_VAR 0 1
41355: PPUSH
41356: CALL_OW 251
41360: PPUSH
41361: LD_VAR 0 2
41365: PPUSH
41366: LD_VAR 0 3
41370: PPUSH
41371: LD_VAR 0 4
41375: PPUSH
41376: CALL 41386 0 5
41380: ST_TO_ADDR
// end ;
41381: LD_VAR 0 5
41385: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41386: LD_INT 0
41388: PPUSH
41389: PPUSH
41390: PPUSH
41391: PPUSH
// if not list then
41392: LD_VAR 0 3
41396: NOT
41397: IFFALSE 41401
// exit ;
41399: GO 41789
// result := [ ] ;
41401: LD_ADDR_VAR 0 6
41405: PUSH
41406: EMPTY
41407: ST_TO_ADDR
// for i in list do
41408: LD_ADDR_VAR 0 7
41412: PUSH
41413: LD_VAR 0 3
41417: PUSH
41418: FOR_IN
41419: IFFALSE 41621
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41421: LD_ADDR_VAR 0 9
41425: PUSH
41426: LD_VAR 0 7
41430: PPUSH
41431: LD_VAR 0 1
41435: PPUSH
41436: LD_VAR 0 2
41440: PPUSH
41441: CALL_OW 297
41445: ST_TO_ADDR
// if not result then
41446: LD_VAR 0 6
41450: NOT
41451: IFFALSE 41477
// result := [ [ i , tmp ] ] else
41453: LD_ADDR_VAR 0 6
41457: PUSH
41458: LD_VAR 0 7
41462: PUSH
41463: LD_VAR 0 9
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: EMPTY
41473: LIST
41474: ST_TO_ADDR
41475: GO 41619
// begin if result [ result ] [ 2 ] < tmp then
41477: LD_VAR 0 6
41481: PUSH
41482: LD_VAR 0 6
41486: ARRAY
41487: PUSH
41488: LD_INT 2
41490: ARRAY
41491: PUSH
41492: LD_VAR 0 9
41496: LESS
41497: IFFALSE 41539
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41499: LD_ADDR_VAR 0 6
41503: PUSH
41504: LD_VAR 0 6
41508: PPUSH
41509: LD_VAR 0 6
41513: PUSH
41514: LD_INT 1
41516: PLUS
41517: PPUSH
41518: LD_VAR 0 7
41522: PUSH
41523: LD_VAR 0 9
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PPUSH
41532: CALL_OW 2
41536: ST_TO_ADDR
41537: GO 41619
// for j = 1 to result do
41539: LD_ADDR_VAR 0 8
41543: PUSH
41544: DOUBLE
41545: LD_INT 1
41547: DEC
41548: ST_TO_ADDR
41549: LD_VAR 0 6
41553: PUSH
41554: FOR_TO
41555: IFFALSE 41617
// begin if tmp < result [ j ] [ 2 ] then
41557: LD_VAR 0 9
41561: PUSH
41562: LD_VAR 0 6
41566: PUSH
41567: LD_VAR 0 8
41571: ARRAY
41572: PUSH
41573: LD_INT 2
41575: ARRAY
41576: LESS
41577: IFFALSE 41615
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41579: LD_ADDR_VAR 0 6
41583: PUSH
41584: LD_VAR 0 6
41588: PPUSH
41589: LD_VAR 0 8
41593: PPUSH
41594: LD_VAR 0 7
41598: PUSH
41599: LD_VAR 0 9
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PPUSH
41608: CALL_OW 2
41612: ST_TO_ADDR
// break ;
41613: GO 41617
// end ; end ;
41615: GO 41554
41617: POP
41618: POP
// end ; end ;
41619: GO 41418
41621: POP
41622: POP
// if result and not asc then
41623: LD_VAR 0 6
41627: PUSH
41628: LD_VAR 0 4
41632: NOT
41633: AND
41634: IFFALSE 41709
// begin tmp := result ;
41636: LD_ADDR_VAR 0 9
41640: PUSH
41641: LD_VAR 0 6
41645: ST_TO_ADDR
// for i = tmp downto 1 do
41646: LD_ADDR_VAR 0 7
41650: PUSH
41651: DOUBLE
41652: LD_VAR 0 9
41656: INC
41657: ST_TO_ADDR
41658: LD_INT 1
41660: PUSH
41661: FOR_DOWNTO
41662: IFFALSE 41707
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41664: LD_ADDR_VAR 0 6
41668: PUSH
41669: LD_VAR 0 6
41673: PPUSH
41674: LD_VAR 0 9
41678: PUSH
41679: LD_VAR 0 7
41683: MINUS
41684: PUSH
41685: LD_INT 1
41687: PLUS
41688: PPUSH
41689: LD_VAR 0 9
41693: PUSH
41694: LD_VAR 0 7
41698: ARRAY
41699: PPUSH
41700: CALL_OW 1
41704: ST_TO_ADDR
41705: GO 41661
41707: POP
41708: POP
// end ; tmp := [ ] ;
41709: LD_ADDR_VAR 0 9
41713: PUSH
41714: EMPTY
41715: ST_TO_ADDR
// if mode then
41716: LD_VAR 0 5
41720: IFFALSE 41789
// begin for i = 1 to result do
41722: LD_ADDR_VAR 0 7
41726: PUSH
41727: DOUBLE
41728: LD_INT 1
41730: DEC
41731: ST_TO_ADDR
41732: LD_VAR 0 6
41736: PUSH
41737: FOR_TO
41738: IFFALSE 41777
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41740: LD_ADDR_VAR 0 9
41744: PUSH
41745: LD_VAR 0 9
41749: PPUSH
41750: LD_VAR 0 7
41754: PPUSH
41755: LD_VAR 0 6
41759: PUSH
41760: LD_VAR 0 7
41764: ARRAY
41765: PUSH
41766: LD_INT 1
41768: ARRAY
41769: PPUSH
41770: CALL_OW 1
41774: ST_TO_ADDR
41775: GO 41737
41777: POP
41778: POP
// result := tmp ;
41779: LD_ADDR_VAR 0 6
41783: PUSH
41784: LD_VAR 0 9
41788: ST_TO_ADDR
// end ; end ;
41789: LD_VAR 0 6
41793: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41794: LD_INT 0
41796: PPUSH
41797: PPUSH
41798: PPUSH
41799: PPUSH
41800: PPUSH
41801: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41802: LD_ADDR_VAR 0 5
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: EMPTY
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: ST_TO_ADDR
// if not x or not y then
41824: LD_VAR 0 2
41828: NOT
41829: PUSH
41830: LD_VAR 0 3
41834: NOT
41835: OR
41836: IFFALSE 41840
// exit ;
41838: GO 43492
// if not range then
41840: LD_VAR 0 4
41844: NOT
41845: IFFALSE 41855
// range := 10 ;
41847: LD_ADDR_VAR 0 4
41851: PUSH
41852: LD_INT 10
41854: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41855: LD_ADDR_VAR 0 8
41859: PUSH
41860: LD_INT 81
41862: PUSH
41863: LD_VAR 0 1
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 92
41874: PUSH
41875: LD_VAR 0 2
41879: PUSH
41880: LD_VAR 0 3
41884: PUSH
41885: LD_VAR 0 4
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 3
41898: PUSH
41899: LD_INT 21
41901: PUSH
41902: LD_INT 3
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: LIST
41917: PPUSH
41918: CALL_OW 69
41922: ST_TO_ADDR
// if not tmp then
41923: LD_VAR 0 8
41927: NOT
41928: IFFALSE 41932
// exit ;
41930: GO 43492
// for i in tmp do
41932: LD_ADDR_VAR 0 6
41936: PUSH
41937: LD_VAR 0 8
41941: PUSH
41942: FOR_IN
41943: IFFALSE 43467
// begin points := [ 0 , 0 , 0 ] ;
41945: LD_ADDR_VAR 0 9
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: LIST
41963: ST_TO_ADDR
// bpoints := 1 ;
41964: LD_ADDR_VAR 0 10
41968: PUSH
41969: LD_INT 1
41971: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41972: LD_VAR 0 6
41976: PPUSH
41977: CALL_OW 247
41981: PUSH
41982: LD_INT 1
41984: DOUBLE
41985: EQUAL
41986: IFTRUE 41990
41988: GO 42568
41990: POP
// begin if GetClass ( i ) = 1 then
41991: LD_VAR 0 6
41995: PPUSH
41996: CALL_OW 257
42000: PUSH
42001: LD_INT 1
42003: EQUAL
42004: IFFALSE 42025
// points := [ 10 , 5 , 3 ] ;
42006: LD_ADDR_VAR 0 9
42010: PUSH
42011: LD_INT 10
42013: PUSH
42014: LD_INT 5
42016: PUSH
42017: LD_INT 3
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: LIST
42024: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42025: LD_VAR 0 6
42029: PPUSH
42030: CALL_OW 257
42034: PUSH
42035: LD_INT 2
42037: PUSH
42038: LD_INT 3
42040: PUSH
42041: LD_INT 4
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: LIST
42048: IN
42049: IFFALSE 42070
// points := [ 3 , 2 , 1 ] ;
42051: LD_ADDR_VAR 0 9
42055: PUSH
42056: LD_INT 3
42058: PUSH
42059: LD_INT 2
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: LIST
42069: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42070: LD_VAR 0 6
42074: PPUSH
42075: CALL_OW 257
42079: PUSH
42080: LD_INT 5
42082: EQUAL
42083: IFFALSE 42104
// points := [ 130 , 5 , 2 ] ;
42085: LD_ADDR_VAR 0 9
42089: PUSH
42090: LD_INT 130
42092: PUSH
42093: LD_INT 5
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42104: LD_VAR 0 6
42108: PPUSH
42109: CALL_OW 257
42113: PUSH
42114: LD_INT 8
42116: EQUAL
42117: IFFALSE 42138
// points := [ 35 , 35 , 30 ] ;
42119: LD_ADDR_VAR 0 9
42123: PUSH
42124: LD_INT 35
42126: PUSH
42127: LD_INT 35
42129: PUSH
42130: LD_INT 30
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: LIST
42137: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42138: LD_VAR 0 6
42142: PPUSH
42143: CALL_OW 257
42147: PUSH
42148: LD_INT 9
42150: EQUAL
42151: IFFALSE 42172
// points := [ 20 , 55 , 40 ] ;
42153: LD_ADDR_VAR 0 9
42157: PUSH
42158: LD_INT 20
42160: PUSH
42161: LD_INT 55
42163: PUSH
42164: LD_INT 40
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: LIST
42171: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42172: LD_VAR 0 6
42176: PPUSH
42177: CALL_OW 257
42181: PUSH
42182: LD_INT 12
42184: PUSH
42185: LD_INT 16
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: IN
42192: IFFALSE 42213
// points := [ 5 , 3 , 2 ] ;
42194: LD_ADDR_VAR 0 9
42198: PUSH
42199: LD_INT 5
42201: PUSH
42202: LD_INT 3
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: LIST
42212: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42213: LD_VAR 0 6
42217: PPUSH
42218: CALL_OW 257
42222: PUSH
42223: LD_INT 17
42225: EQUAL
42226: IFFALSE 42247
// points := [ 100 , 50 , 75 ] ;
42228: LD_ADDR_VAR 0 9
42232: PUSH
42233: LD_INT 100
42235: PUSH
42236: LD_INT 50
42238: PUSH
42239: LD_INT 75
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: LIST
42246: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42247: LD_VAR 0 6
42251: PPUSH
42252: CALL_OW 257
42256: PUSH
42257: LD_INT 15
42259: EQUAL
42260: IFFALSE 42281
// points := [ 10 , 5 , 3 ] ;
42262: LD_ADDR_VAR 0 9
42266: PUSH
42267: LD_INT 10
42269: PUSH
42270: LD_INT 5
42272: PUSH
42273: LD_INT 3
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: LIST
42280: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42281: LD_VAR 0 6
42285: PPUSH
42286: CALL_OW 257
42290: PUSH
42291: LD_INT 14
42293: EQUAL
42294: IFFALSE 42315
// points := [ 10 , 0 , 0 ] ;
42296: LD_ADDR_VAR 0 9
42300: PUSH
42301: LD_INT 10
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: LIST
42314: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42315: LD_VAR 0 6
42319: PPUSH
42320: CALL_OW 257
42324: PUSH
42325: LD_INT 11
42327: EQUAL
42328: IFFALSE 42349
// points := [ 30 , 10 , 5 ] ;
42330: LD_ADDR_VAR 0 9
42334: PUSH
42335: LD_INT 30
42337: PUSH
42338: LD_INT 10
42340: PUSH
42341: LD_INT 5
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: LIST
42348: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42349: LD_VAR 0 1
42353: PPUSH
42354: LD_INT 5
42356: PPUSH
42357: CALL_OW 321
42361: PUSH
42362: LD_INT 2
42364: EQUAL
42365: IFFALSE 42382
// bpoints := bpoints * 1.8 ;
42367: LD_ADDR_VAR 0 10
42371: PUSH
42372: LD_VAR 0 10
42376: PUSH
42377: LD_REAL  1.80000000000000E+0000
42380: MUL
42381: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42382: LD_VAR 0 6
42386: PPUSH
42387: CALL_OW 257
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: LD_INT 2
42397: PUSH
42398: LD_INT 3
42400: PUSH
42401: LD_INT 4
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: IN
42410: PUSH
42411: LD_VAR 0 1
42415: PPUSH
42416: LD_INT 51
42418: PPUSH
42419: CALL_OW 321
42423: PUSH
42424: LD_INT 2
42426: EQUAL
42427: AND
42428: IFFALSE 42445
// bpoints := bpoints * 1.2 ;
42430: LD_ADDR_VAR 0 10
42434: PUSH
42435: LD_VAR 0 10
42439: PUSH
42440: LD_REAL  1.20000000000000E+0000
42443: MUL
42444: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42445: LD_VAR 0 6
42449: PPUSH
42450: CALL_OW 257
42454: PUSH
42455: LD_INT 5
42457: PUSH
42458: LD_INT 7
42460: PUSH
42461: LD_INT 9
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: LIST
42468: IN
42469: PUSH
42470: LD_VAR 0 1
42474: PPUSH
42475: LD_INT 52
42477: PPUSH
42478: CALL_OW 321
42482: PUSH
42483: LD_INT 2
42485: EQUAL
42486: AND
42487: IFFALSE 42504
// bpoints := bpoints * 1.5 ;
42489: LD_ADDR_VAR 0 10
42493: PUSH
42494: LD_VAR 0 10
42498: PUSH
42499: LD_REAL  1.50000000000000E+0000
42502: MUL
42503: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42504: LD_VAR 0 1
42508: PPUSH
42509: LD_INT 66
42511: PPUSH
42512: CALL_OW 321
42516: PUSH
42517: LD_INT 2
42519: EQUAL
42520: IFFALSE 42537
// bpoints := bpoints * 1.1 ;
42522: LD_ADDR_VAR 0 10
42526: PUSH
42527: LD_VAR 0 10
42531: PUSH
42532: LD_REAL  1.10000000000000E+0000
42535: MUL
42536: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42537: LD_ADDR_VAR 0 10
42541: PUSH
42542: LD_VAR 0 10
42546: PUSH
42547: LD_VAR 0 6
42551: PPUSH
42552: LD_INT 1
42554: PPUSH
42555: CALL_OW 259
42559: PUSH
42560: LD_REAL  1.15000000000000E+0000
42563: MUL
42564: MUL
42565: ST_TO_ADDR
// end ; unit_vehicle :
42566: GO 43396
42568: LD_INT 2
42570: DOUBLE
42571: EQUAL
42572: IFTRUE 42576
42574: GO 43384
42576: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42577: LD_VAR 0 6
42581: PPUSH
42582: CALL_OW 264
42586: PUSH
42587: LD_INT 2
42589: PUSH
42590: LD_INT 42
42592: PUSH
42593: LD_INT 24
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: LIST
42600: IN
42601: IFFALSE 42622
// points := [ 25 , 5 , 3 ] ;
42603: LD_ADDR_VAR 0 9
42607: PUSH
42608: LD_INT 25
42610: PUSH
42611: LD_INT 5
42613: PUSH
42614: LD_INT 3
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: LIST
42621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42622: LD_VAR 0 6
42626: PPUSH
42627: CALL_OW 264
42631: PUSH
42632: LD_INT 4
42634: PUSH
42635: LD_INT 43
42637: PUSH
42638: LD_INT 25
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: LIST
42645: IN
42646: IFFALSE 42667
// points := [ 40 , 15 , 5 ] ;
42648: LD_ADDR_VAR 0 9
42652: PUSH
42653: LD_INT 40
42655: PUSH
42656: LD_INT 15
42658: PUSH
42659: LD_INT 5
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: LIST
42666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42667: LD_VAR 0 6
42671: PPUSH
42672: CALL_OW 264
42676: PUSH
42677: LD_INT 3
42679: PUSH
42680: LD_INT 23
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: IN
42687: IFFALSE 42708
// points := [ 7 , 25 , 8 ] ;
42689: LD_ADDR_VAR 0 9
42693: PUSH
42694: LD_INT 7
42696: PUSH
42697: LD_INT 25
42699: PUSH
42700: LD_INT 8
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: LIST
42707: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42708: LD_VAR 0 6
42712: PPUSH
42713: CALL_OW 264
42717: PUSH
42718: LD_INT 5
42720: PUSH
42721: LD_INT 27
42723: PUSH
42724: LD_INT 44
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: LIST
42731: IN
42732: IFFALSE 42753
// points := [ 14 , 50 , 16 ] ;
42734: LD_ADDR_VAR 0 9
42738: PUSH
42739: LD_INT 14
42741: PUSH
42742: LD_INT 50
42744: PUSH
42745: LD_INT 16
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: LIST
42752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42753: LD_VAR 0 6
42757: PPUSH
42758: CALL_OW 264
42762: PUSH
42763: LD_INT 6
42765: PUSH
42766: LD_INT 46
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: IN
42773: IFFALSE 42794
// points := [ 32 , 120 , 70 ] ;
42775: LD_ADDR_VAR 0 9
42779: PUSH
42780: LD_INT 32
42782: PUSH
42783: LD_INT 120
42785: PUSH
42786: LD_INT 70
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: LIST
42793: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42794: LD_VAR 0 6
42798: PPUSH
42799: CALL_OW 264
42803: PUSH
42804: LD_INT 7
42806: PUSH
42807: LD_INT 28
42809: PUSH
42810: LD_INT 45
42812: PUSH
42813: LD_EXP 67
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: IN
42824: IFFALSE 42845
// points := [ 35 , 20 , 45 ] ;
42826: LD_ADDR_VAR 0 9
42830: PUSH
42831: LD_INT 35
42833: PUSH
42834: LD_INT 20
42836: PUSH
42837: LD_INT 45
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: LIST
42844: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42845: LD_VAR 0 6
42849: PPUSH
42850: CALL_OW 264
42854: PUSH
42855: LD_INT 47
42857: PUSH
42858: EMPTY
42859: LIST
42860: IN
42861: IFFALSE 42882
// points := [ 67 , 45 , 75 ] ;
42863: LD_ADDR_VAR 0 9
42867: PUSH
42868: LD_INT 67
42870: PUSH
42871: LD_INT 45
42873: PUSH
42874: LD_INT 75
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: LIST
42881: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42882: LD_VAR 0 6
42886: PPUSH
42887: CALL_OW 264
42891: PUSH
42892: LD_INT 26
42894: PUSH
42895: EMPTY
42896: LIST
42897: IN
42898: IFFALSE 42919
// points := [ 120 , 30 , 80 ] ;
42900: LD_ADDR_VAR 0 9
42904: PUSH
42905: LD_INT 120
42907: PUSH
42908: LD_INT 30
42910: PUSH
42911: LD_INT 80
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42919: LD_VAR 0 6
42923: PPUSH
42924: CALL_OW 264
42928: PUSH
42929: LD_INT 22
42931: PUSH
42932: EMPTY
42933: LIST
42934: IN
42935: IFFALSE 42956
// points := [ 40 , 1 , 1 ] ;
42937: LD_ADDR_VAR 0 9
42941: PUSH
42942: LD_INT 40
42944: PUSH
42945: LD_INT 1
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: LIST
42955: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42956: LD_VAR 0 6
42960: PPUSH
42961: CALL_OW 264
42965: PUSH
42966: LD_INT 29
42968: PUSH
42969: EMPTY
42970: LIST
42971: IN
42972: IFFALSE 42993
// points := [ 70 , 200 , 400 ] ;
42974: LD_ADDR_VAR 0 9
42978: PUSH
42979: LD_INT 70
42981: PUSH
42982: LD_INT 200
42984: PUSH
42985: LD_INT 400
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: LIST
42992: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42993: LD_VAR 0 6
42997: PPUSH
42998: CALL_OW 264
43002: PUSH
43003: LD_INT 14
43005: PUSH
43006: LD_INT 53
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: IN
43013: IFFALSE 43034
// points := [ 40 , 10 , 20 ] ;
43015: LD_ADDR_VAR 0 9
43019: PUSH
43020: LD_INT 40
43022: PUSH
43023: LD_INT 10
43025: PUSH
43026: LD_INT 20
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: LIST
43033: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43034: LD_VAR 0 6
43038: PPUSH
43039: CALL_OW 264
43043: PUSH
43044: LD_INT 9
43046: PUSH
43047: EMPTY
43048: LIST
43049: IN
43050: IFFALSE 43071
// points := [ 5 , 70 , 20 ] ;
43052: LD_ADDR_VAR 0 9
43056: PUSH
43057: LD_INT 5
43059: PUSH
43060: LD_INT 70
43062: PUSH
43063: LD_INT 20
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: LIST
43070: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43071: LD_VAR 0 6
43075: PPUSH
43076: CALL_OW 264
43080: PUSH
43081: LD_INT 10
43083: PUSH
43084: EMPTY
43085: LIST
43086: IN
43087: IFFALSE 43108
// points := [ 35 , 110 , 70 ] ;
43089: LD_ADDR_VAR 0 9
43093: PUSH
43094: LD_INT 35
43096: PUSH
43097: LD_INT 110
43099: PUSH
43100: LD_INT 70
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: LIST
43107: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43108: LD_VAR 0 6
43112: PPUSH
43113: CALL_OW 265
43117: PUSH
43118: LD_INT 25
43120: EQUAL
43121: IFFALSE 43142
// points := [ 80 , 65 , 100 ] ;
43123: LD_ADDR_VAR 0 9
43127: PUSH
43128: LD_INT 80
43130: PUSH
43131: LD_INT 65
43133: PUSH
43134: LD_INT 100
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: LIST
43141: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43142: LD_VAR 0 6
43146: PPUSH
43147: CALL_OW 263
43151: PUSH
43152: LD_INT 1
43154: EQUAL
43155: IFFALSE 43190
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43157: LD_ADDR_VAR 0 10
43161: PUSH
43162: LD_VAR 0 10
43166: PUSH
43167: LD_VAR 0 6
43171: PPUSH
43172: CALL_OW 311
43176: PPUSH
43177: LD_INT 3
43179: PPUSH
43180: CALL_OW 259
43184: PUSH
43185: LD_INT 4
43187: MUL
43188: MUL
43189: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43190: LD_VAR 0 6
43194: PPUSH
43195: CALL_OW 263
43199: PUSH
43200: LD_INT 2
43202: EQUAL
43203: IFFALSE 43254
// begin j := IsControledBy ( i ) ;
43205: LD_ADDR_VAR 0 7
43209: PUSH
43210: LD_VAR 0 6
43214: PPUSH
43215: CALL_OW 312
43219: ST_TO_ADDR
// if j then
43220: LD_VAR 0 7
43224: IFFALSE 43254
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43226: LD_ADDR_VAR 0 10
43230: PUSH
43231: LD_VAR 0 10
43235: PUSH
43236: LD_VAR 0 7
43240: PPUSH
43241: LD_INT 3
43243: PPUSH
43244: CALL_OW 259
43248: PUSH
43249: LD_INT 3
43251: MUL
43252: MUL
43253: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43254: LD_VAR 0 6
43258: PPUSH
43259: CALL_OW 264
43263: PUSH
43264: LD_INT 5
43266: PUSH
43267: LD_INT 6
43269: PUSH
43270: LD_INT 46
43272: PUSH
43273: LD_INT 44
43275: PUSH
43276: LD_INT 47
43278: PUSH
43279: LD_INT 45
43281: PUSH
43282: LD_INT 28
43284: PUSH
43285: LD_INT 7
43287: PUSH
43288: LD_INT 27
43290: PUSH
43291: LD_INT 29
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: IN
43306: PUSH
43307: LD_VAR 0 1
43311: PPUSH
43312: LD_INT 52
43314: PPUSH
43315: CALL_OW 321
43319: PUSH
43320: LD_INT 2
43322: EQUAL
43323: AND
43324: IFFALSE 43341
// bpoints := bpoints * 1.2 ;
43326: LD_ADDR_VAR 0 10
43330: PUSH
43331: LD_VAR 0 10
43335: PUSH
43336: LD_REAL  1.20000000000000E+0000
43339: MUL
43340: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43341: LD_VAR 0 6
43345: PPUSH
43346: CALL_OW 264
43350: PUSH
43351: LD_INT 6
43353: PUSH
43354: LD_INT 46
43356: PUSH
43357: LD_INT 47
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: LIST
43364: IN
43365: IFFALSE 43382
// bpoints := bpoints * 1.2 ;
43367: LD_ADDR_VAR 0 10
43371: PUSH
43372: LD_VAR 0 10
43376: PUSH
43377: LD_REAL  1.20000000000000E+0000
43380: MUL
43381: ST_TO_ADDR
// end ; unit_building :
43382: GO 43396
43384: LD_INT 3
43386: DOUBLE
43387: EQUAL
43388: IFTRUE 43392
43390: GO 43395
43392: POP
// ; end ;
43393: GO 43396
43395: POP
// for j = 1 to 3 do
43396: LD_ADDR_VAR 0 7
43400: PUSH
43401: DOUBLE
43402: LD_INT 1
43404: DEC
43405: ST_TO_ADDR
43406: LD_INT 3
43408: PUSH
43409: FOR_TO
43410: IFFALSE 43463
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43412: LD_ADDR_VAR 0 5
43416: PUSH
43417: LD_VAR 0 5
43421: PPUSH
43422: LD_VAR 0 7
43426: PPUSH
43427: LD_VAR 0 5
43431: PUSH
43432: LD_VAR 0 7
43436: ARRAY
43437: PUSH
43438: LD_VAR 0 9
43442: PUSH
43443: LD_VAR 0 7
43447: ARRAY
43448: PUSH
43449: LD_VAR 0 10
43453: MUL
43454: PLUS
43455: PPUSH
43456: CALL_OW 1
43460: ST_TO_ADDR
43461: GO 43409
43463: POP
43464: POP
// end ;
43465: GO 41942
43467: POP
43468: POP
// result := Replace ( result , 4 , tmp ) ;
43469: LD_ADDR_VAR 0 5
43473: PUSH
43474: LD_VAR 0 5
43478: PPUSH
43479: LD_INT 4
43481: PPUSH
43482: LD_VAR 0 8
43486: PPUSH
43487: CALL_OW 1
43491: ST_TO_ADDR
// end ;
43492: LD_VAR 0 5
43496: RET
// export function DangerAtRange ( unit , range ) ; begin
43497: LD_INT 0
43499: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43500: LD_ADDR_VAR 0 3
43504: PUSH
43505: LD_VAR 0 1
43509: PPUSH
43510: CALL_OW 255
43514: PPUSH
43515: LD_VAR 0 1
43519: PPUSH
43520: CALL_OW 250
43524: PPUSH
43525: LD_VAR 0 1
43529: PPUSH
43530: CALL_OW 251
43534: PPUSH
43535: LD_VAR 0 2
43539: PPUSH
43540: CALL 41794 0 4
43544: ST_TO_ADDR
// end ;
43545: LD_VAR 0 3
43549: RET
// export function DangerInArea ( side , area ) ; begin
43550: LD_INT 0
43552: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43553: LD_ADDR_VAR 0 3
43557: PUSH
43558: LD_VAR 0 2
43562: PPUSH
43563: LD_INT 81
43565: PUSH
43566: LD_VAR 0 1
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PPUSH
43575: CALL_OW 70
43579: ST_TO_ADDR
// end ;
43580: LD_VAR 0 3
43584: RET
// export function IsExtension ( b ) ; begin
43585: LD_INT 0
43587: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43588: LD_ADDR_VAR 0 2
43592: PUSH
43593: LD_VAR 0 1
43597: PUSH
43598: LD_INT 23
43600: PUSH
43601: LD_INT 20
43603: PUSH
43604: LD_INT 22
43606: PUSH
43607: LD_INT 17
43609: PUSH
43610: LD_INT 24
43612: PUSH
43613: LD_INT 21
43615: PUSH
43616: LD_INT 19
43618: PUSH
43619: LD_INT 16
43621: PUSH
43622: LD_INT 25
43624: PUSH
43625: LD_INT 18
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: IN
43640: ST_TO_ADDR
// end ;
43641: LD_VAR 0 2
43645: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43646: LD_INT 0
43648: PPUSH
43649: PPUSH
43650: PPUSH
// result := [ ] ;
43651: LD_ADDR_VAR 0 4
43655: PUSH
43656: EMPTY
43657: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43658: LD_ADDR_VAR 0 5
43662: PUSH
43663: LD_VAR 0 2
43667: PPUSH
43668: LD_INT 21
43670: PUSH
43671: LD_INT 3
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PPUSH
43678: CALL_OW 70
43682: ST_TO_ADDR
// if not tmp then
43683: LD_VAR 0 5
43687: NOT
43688: IFFALSE 43692
// exit ;
43690: GO 43756
// if checkLink then
43692: LD_VAR 0 3
43696: IFFALSE 43746
// begin for i in tmp do
43698: LD_ADDR_VAR 0 6
43702: PUSH
43703: LD_VAR 0 5
43707: PUSH
43708: FOR_IN
43709: IFFALSE 43744
// if GetBase ( i ) <> base then
43711: LD_VAR 0 6
43715: PPUSH
43716: CALL_OW 274
43720: PUSH
43721: LD_VAR 0 1
43725: NONEQUAL
43726: IFFALSE 43742
// ComLinkToBase ( base , i ) ;
43728: LD_VAR 0 1
43732: PPUSH
43733: LD_VAR 0 6
43737: PPUSH
43738: CALL_OW 169
43742: GO 43708
43744: POP
43745: POP
// end ; result := tmp ;
43746: LD_ADDR_VAR 0 4
43750: PUSH
43751: LD_VAR 0 5
43755: ST_TO_ADDR
// end ;
43756: LD_VAR 0 4
43760: RET
// export function ComComplete ( units , b ) ; var i ; begin
43761: LD_INT 0
43763: PPUSH
43764: PPUSH
// if not units then
43765: LD_VAR 0 1
43769: NOT
43770: IFFALSE 43774
// exit ;
43772: GO 43864
// for i in units do
43774: LD_ADDR_VAR 0 4
43778: PUSH
43779: LD_VAR 0 1
43783: PUSH
43784: FOR_IN
43785: IFFALSE 43862
// if BuildingStatus ( b ) = bs_build then
43787: LD_VAR 0 2
43791: PPUSH
43792: CALL_OW 461
43796: PUSH
43797: LD_INT 1
43799: EQUAL
43800: IFFALSE 43860
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43802: LD_VAR 0 4
43806: PPUSH
43807: LD_STRING h
43809: PUSH
43810: LD_VAR 0 2
43814: PPUSH
43815: CALL_OW 250
43819: PUSH
43820: LD_VAR 0 2
43824: PPUSH
43825: CALL_OW 251
43829: PUSH
43830: LD_VAR 0 2
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: PUSH
43853: EMPTY
43854: LIST
43855: PPUSH
43856: CALL_OW 446
43860: GO 43784
43862: POP
43863: POP
// end ;
43864: LD_VAR 0 3
43868: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43869: LD_INT 0
43871: PPUSH
43872: PPUSH
43873: PPUSH
43874: PPUSH
43875: PPUSH
43876: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43877: LD_VAR 0 1
43881: NOT
43882: PUSH
43883: LD_VAR 0 1
43887: PPUSH
43888: CALL_OW 263
43892: PUSH
43893: LD_INT 2
43895: NONEQUAL
43896: OR
43897: IFFALSE 43901
// exit ;
43899: GO 44217
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43901: LD_ADDR_VAR 0 6
43905: PUSH
43906: LD_INT 22
43908: PUSH
43909: LD_VAR 0 1
43913: PPUSH
43914: CALL_OW 255
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 2
43925: PUSH
43926: LD_INT 30
43928: PUSH
43929: LD_INT 36
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 34
43938: PUSH
43939: LD_INT 31
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: LIST
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PPUSH
43955: CALL_OW 69
43959: ST_TO_ADDR
// if not tmp then
43960: LD_VAR 0 6
43964: NOT
43965: IFFALSE 43969
// exit ;
43967: GO 44217
// result := [ ] ;
43969: LD_ADDR_VAR 0 2
43973: PUSH
43974: EMPTY
43975: ST_TO_ADDR
// for i in tmp do
43976: LD_ADDR_VAR 0 3
43980: PUSH
43981: LD_VAR 0 6
43985: PUSH
43986: FOR_IN
43987: IFFALSE 44058
// begin t := UnitsInside ( i ) ;
43989: LD_ADDR_VAR 0 4
43993: PUSH
43994: LD_VAR 0 3
43998: PPUSH
43999: CALL_OW 313
44003: ST_TO_ADDR
// if t then
44004: LD_VAR 0 4
44008: IFFALSE 44056
// for j in t do
44010: LD_ADDR_VAR 0 7
44014: PUSH
44015: LD_VAR 0 4
44019: PUSH
44020: FOR_IN
44021: IFFALSE 44054
// result := Replace ( result , result + 1 , j ) ;
44023: LD_ADDR_VAR 0 2
44027: PUSH
44028: LD_VAR 0 2
44032: PPUSH
44033: LD_VAR 0 2
44037: PUSH
44038: LD_INT 1
44040: PLUS
44041: PPUSH
44042: LD_VAR 0 7
44046: PPUSH
44047: CALL_OW 1
44051: ST_TO_ADDR
44052: GO 44020
44054: POP
44055: POP
// end ;
44056: GO 43986
44058: POP
44059: POP
// if not result then
44060: LD_VAR 0 2
44064: NOT
44065: IFFALSE 44069
// exit ;
44067: GO 44217
// mech := result [ 1 ] ;
44069: LD_ADDR_VAR 0 5
44073: PUSH
44074: LD_VAR 0 2
44078: PUSH
44079: LD_INT 1
44081: ARRAY
44082: ST_TO_ADDR
// if result > 1 then
44083: LD_VAR 0 2
44087: PUSH
44088: LD_INT 1
44090: GREATER
44091: IFFALSE 44203
// begin for i = 2 to result do
44093: LD_ADDR_VAR 0 3
44097: PUSH
44098: DOUBLE
44099: LD_INT 2
44101: DEC
44102: ST_TO_ADDR
44103: LD_VAR 0 2
44107: PUSH
44108: FOR_TO
44109: IFFALSE 44201
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44111: LD_ADDR_VAR 0 4
44115: PUSH
44116: LD_VAR 0 2
44120: PUSH
44121: LD_VAR 0 3
44125: ARRAY
44126: PPUSH
44127: LD_INT 3
44129: PPUSH
44130: CALL_OW 259
44134: PUSH
44135: LD_VAR 0 2
44139: PUSH
44140: LD_VAR 0 3
44144: ARRAY
44145: PPUSH
44146: CALL_OW 432
44150: MINUS
44151: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44152: LD_VAR 0 4
44156: PUSH
44157: LD_VAR 0 5
44161: PPUSH
44162: LD_INT 3
44164: PPUSH
44165: CALL_OW 259
44169: PUSH
44170: LD_VAR 0 5
44174: PPUSH
44175: CALL_OW 432
44179: MINUS
44180: GREATEREQUAL
44181: IFFALSE 44199
// mech := result [ i ] ;
44183: LD_ADDR_VAR 0 5
44187: PUSH
44188: LD_VAR 0 2
44192: PUSH
44193: LD_VAR 0 3
44197: ARRAY
44198: ST_TO_ADDR
// end ;
44199: GO 44108
44201: POP
44202: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44203: LD_VAR 0 1
44207: PPUSH
44208: LD_VAR 0 5
44212: PPUSH
44213: CALL_OW 135
// end ;
44217: LD_VAR 0 2
44221: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44222: LD_INT 0
44224: PPUSH
44225: PPUSH
44226: PPUSH
44227: PPUSH
44228: PPUSH
44229: PPUSH
44230: PPUSH
44231: PPUSH
44232: PPUSH
44233: PPUSH
44234: PPUSH
44235: PPUSH
44236: PPUSH
// result := [ ] ;
44237: LD_ADDR_VAR 0 7
44241: PUSH
44242: EMPTY
44243: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44244: LD_VAR 0 1
44248: PPUSH
44249: CALL_OW 266
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: IN
44264: NOT
44265: IFFALSE 44269
// exit ;
44267: GO 45903
// if name then
44269: LD_VAR 0 3
44273: IFFALSE 44289
// SetBName ( base_dep , name ) ;
44275: LD_VAR 0 1
44279: PPUSH
44280: LD_VAR 0 3
44284: PPUSH
44285: CALL_OW 500
// base := GetBase ( base_dep ) ;
44289: LD_ADDR_VAR 0 15
44293: PUSH
44294: LD_VAR 0 1
44298: PPUSH
44299: CALL_OW 274
44303: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44304: LD_ADDR_VAR 0 16
44308: PUSH
44309: LD_VAR 0 1
44313: PPUSH
44314: CALL_OW 255
44318: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44319: LD_ADDR_VAR 0 17
44323: PUSH
44324: LD_VAR 0 1
44328: PPUSH
44329: CALL_OW 248
44333: ST_TO_ADDR
// if sources then
44334: LD_VAR 0 5
44338: IFFALSE 44385
// for i = 1 to 3 do
44340: LD_ADDR_VAR 0 8
44344: PUSH
44345: DOUBLE
44346: LD_INT 1
44348: DEC
44349: ST_TO_ADDR
44350: LD_INT 3
44352: PUSH
44353: FOR_TO
44354: IFFALSE 44383
// AddResourceType ( base , i , sources [ i ] ) ;
44356: LD_VAR 0 15
44360: PPUSH
44361: LD_VAR 0 8
44365: PPUSH
44366: LD_VAR 0 5
44370: PUSH
44371: LD_VAR 0 8
44375: ARRAY
44376: PPUSH
44377: CALL_OW 276
44381: GO 44353
44383: POP
44384: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44385: LD_ADDR_VAR 0 18
44389: PUSH
44390: LD_VAR 0 15
44394: PPUSH
44395: LD_VAR 0 2
44399: PPUSH
44400: LD_INT 1
44402: PPUSH
44403: CALL 43646 0 3
44407: ST_TO_ADDR
// InitHc ;
44408: CALL_OW 19
// InitUc ;
44412: CALL_OW 18
// uc_side := side ;
44416: LD_ADDR_OWVAR 20
44420: PUSH
44421: LD_VAR 0 16
44425: ST_TO_ADDR
// uc_nation := nation ;
44426: LD_ADDR_OWVAR 21
44430: PUSH
44431: LD_VAR 0 17
44435: ST_TO_ADDR
// if buildings then
44436: LD_VAR 0 18
44440: IFFALSE 45762
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44442: LD_ADDR_VAR 0 19
44446: PUSH
44447: LD_VAR 0 18
44451: PPUSH
44452: LD_INT 2
44454: PUSH
44455: LD_INT 30
44457: PUSH
44458: LD_INT 29
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 30
44467: PUSH
44468: LD_INT 30
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: LIST
44479: PPUSH
44480: CALL_OW 72
44484: ST_TO_ADDR
// if tmp then
44485: LD_VAR 0 19
44489: IFFALSE 44537
// for i in tmp do
44491: LD_ADDR_VAR 0 8
44495: PUSH
44496: LD_VAR 0 19
44500: PUSH
44501: FOR_IN
44502: IFFALSE 44535
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44504: LD_VAR 0 8
44508: PPUSH
44509: CALL_OW 250
44513: PPUSH
44514: LD_VAR 0 8
44518: PPUSH
44519: CALL_OW 251
44523: PPUSH
44524: LD_VAR 0 16
44528: PPUSH
44529: CALL_OW 441
44533: GO 44501
44535: POP
44536: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44537: LD_VAR 0 18
44541: PPUSH
44542: LD_INT 2
44544: PUSH
44545: LD_INT 30
44547: PUSH
44548: LD_INT 32
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 30
44557: PUSH
44558: LD_INT 33
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: LIST
44569: PPUSH
44570: CALL_OW 72
44574: IFFALSE 44662
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44576: LD_ADDR_VAR 0 8
44580: PUSH
44581: LD_VAR 0 18
44585: PPUSH
44586: LD_INT 2
44588: PUSH
44589: LD_INT 30
44591: PUSH
44592: LD_INT 32
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 30
44601: PUSH
44602: LD_INT 33
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: LIST
44613: PPUSH
44614: CALL_OW 72
44618: PUSH
44619: FOR_IN
44620: IFFALSE 44660
// begin if not GetBWeapon ( i ) then
44622: LD_VAR 0 8
44626: PPUSH
44627: CALL_OW 269
44631: NOT
44632: IFFALSE 44658
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44634: LD_VAR 0 8
44638: PPUSH
44639: LD_VAR 0 8
44643: PPUSH
44644: LD_VAR 0 2
44648: PPUSH
44649: CALL 45908 0 2
44653: PPUSH
44654: CALL_OW 431
// end ;
44658: GO 44619
44660: POP
44661: POP
// end ; for i = 1 to personel do
44662: LD_ADDR_VAR 0 8
44666: PUSH
44667: DOUBLE
44668: LD_INT 1
44670: DEC
44671: ST_TO_ADDR
44672: LD_VAR 0 6
44676: PUSH
44677: FOR_TO
44678: IFFALSE 45742
// begin if i > 4 then
44680: LD_VAR 0 8
44684: PUSH
44685: LD_INT 4
44687: GREATER
44688: IFFALSE 44692
// break ;
44690: GO 45742
// case i of 1 :
44692: LD_VAR 0 8
44696: PUSH
44697: LD_INT 1
44699: DOUBLE
44700: EQUAL
44701: IFTRUE 44705
44703: GO 44785
44705: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44706: LD_ADDR_VAR 0 12
44710: PUSH
44711: LD_VAR 0 18
44715: PPUSH
44716: LD_INT 22
44718: PUSH
44719: LD_VAR 0 16
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 58
44730: PUSH
44731: EMPTY
44732: LIST
44733: PUSH
44734: LD_INT 2
44736: PUSH
44737: LD_INT 30
44739: PUSH
44740: LD_INT 32
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 30
44749: PUSH
44750: LD_INT 4
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 30
44759: PUSH
44760: LD_INT 5
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: LIST
44777: PPUSH
44778: CALL_OW 72
44782: ST_TO_ADDR
44783: GO 45007
44785: LD_INT 2
44787: DOUBLE
44788: EQUAL
44789: IFTRUE 44793
44791: GO 44855
44793: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44794: LD_ADDR_VAR 0 12
44798: PUSH
44799: LD_VAR 0 18
44803: PPUSH
44804: LD_INT 22
44806: PUSH
44807: LD_VAR 0 16
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 2
44818: PUSH
44819: LD_INT 30
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 30
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: LIST
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PPUSH
44848: CALL_OW 72
44852: ST_TO_ADDR
44853: GO 45007
44855: LD_INT 3
44857: DOUBLE
44858: EQUAL
44859: IFTRUE 44863
44861: GO 44925
44863: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44864: LD_ADDR_VAR 0 12
44868: PUSH
44869: LD_VAR 0 18
44873: PPUSH
44874: LD_INT 22
44876: PUSH
44877: LD_VAR 0 16
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 2
44888: PUSH
44889: LD_INT 30
44891: PUSH
44892: LD_INT 2
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 30
44901: PUSH
44902: LD_INT 3
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: LIST
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PPUSH
44918: CALL_OW 72
44922: ST_TO_ADDR
44923: GO 45007
44925: LD_INT 4
44927: DOUBLE
44928: EQUAL
44929: IFTRUE 44933
44931: GO 45006
44933: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44934: LD_ADDR_VAR 0 12
44938: PUSH
44939: LD_VAR 0 18
44943: PPUSH
44944: LD_INT 22
44946: PUSH
44947: LD_VAR 0 16
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: LD_INT 30
44961: PUSH
44962: LD_INT 6
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 30
44971: PUSH
44972: LD_INT 7
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 30
44981: PUSH
44982: LD_INT 8
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PPUSH
44999: CALL_OW 72
45003: ST_TO_ADDR
45004: GO 45007
45006: POP
// if i = 1 then
45007: LD_VAR 0 8
45011: PUSH
45012: LD_INT 1
45014: EQUAL
45015: IFFALSE 45126
// begin tmp := [ ] ;
45017: LD_ADDR_VAR 0 19
45021: PUSH
45022: EMPTY
45023: ST_TO_ADDR
// for j in f do
45024: LD_ADDR_VAR 0 9
45028: PUSH
45029: LD_VAR 0 12
45033: PUSH
45034: FOR_IN
45035: IFFALSE 45108
// if GetBType ( j ) = b_bunker then
45037: LD_VAR 0 9
45041: PPUSH
45042: CALL_OW 266
45046: PUSH
45047: LD_INT 32
45049: EQUAL
45050: IFFALSE 45077
// tmp := Insert ( tmp , 1 , j ) else
45052: LD_ADDR_VAR 0 19
45056: PUSH
45057: LD_VAR 0 19
45061: PPUSH
45062: LD_INT 1
45064: PPUSH
45065: LD_VAR 0 9
45069: PPUSH
45070: CALL_OW 2
45074: ST_TO_ADDR
45075: GO 45106
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45077: LD_ADDR_VAR 0 19
45081: PUSH
45082: LD_VAR 0 19
45086: PPUSH
45087: LD_VAR 0 19
45091: PUSH
45092: LD_INT 1
45094: PLUS
45095: PPUSH
45096: LD_VAR 0 9
45100: PPUSH
45101: CALL_OW 2
45105: ST_TO_ADDR
45106: GO 45034
45108: POP
45109: POP
// if tmp then
45110: LD_VAR 0 19
45114: IFFALSE 45126
// f := tmp ;
45116: LD_ADDR_VAR 0 12
45120: PUSH
45121: LD_VAR 0 19
45125: ST_TO_ADDR
// end ; x := personel [ i ] ;
45126: LD_ADDR_VAR 0 13
45130: PUSH
45131: LD_VAR 0 6
45135: PUSH
45136: LD_VAR 0 8
45140: ARRAY
45141: ST_TO_ADDR
// if x = - 1 then
45142: LD_VAR 0 13
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: EQUAL
45151: IFFALSE 45360
// begin for j in f do
45153: LD_ADDR_VAR 0 9
45157: PUSH
45158: LD_VAR 0 12
45162: PUSH
45163: FOR_IN
45164: IFFALSE 45356
// repeat InitHc ;
45166: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45170: LD_VAR 0 9
45174: PPUSH
45175: CALL_OW 266
45179: PUSH
45180: LD_INT 5
45182: EQUAL
45183: IFFALSE 45253
// begin if UnitsInside ( j ) < 3 then
45185: LD_VAR 0 9
45189: PPUSH
45190: CALL_OW 313
45194: PUSH
45195: LD_INT 3
45197: LESS
45198: IFFALSE 45234
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45200: LD_INT 0
45202: PPUSH
45203: LD_INT 5
45205: PUSH
45206: LD_INT 8
45208: PUSH
45209: LD_INT 9
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: LIST
45216: PUSH
45217: LD_VAR 0 17
45221: ARRAY
45222: PPUSH
45223: LD_VAR 0 4
45227: PPUSH
45228: CALL_OW 380
45232: GO 45251
// PrepareHuman ( false , i , skill ) ;
45234: LD_INT 0
45236: PPUSH
45237: LD_VAR 0 8
45241: PPUSH
45242: LD_VAR 0 4
45246: PPUSH
45247: CALL_OW 380
// end else
45251: GO 45270
// PrepareHuman ( false , i , skill ) ;
45253: LD_INT 0
45255: PPUSH
45256: LD_VAR 0 8
45260: PPUSH
45261: LD_VAR 0 4
45265: PPUSH
45266: CALL_OW 380
// un := CreateHuman ;
45270: LD_ADDR_VAR 0 14
45274: PUSH
45275: CALL_OW 44
45279: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45280: LD_ADDR_VAR 0 7
45284: PUSH
45285: LD_VAR 0 7
45289: PPUSH
45290: LD_INT 1
45292: PPUSH
45293: LD_VAR 0 14
45297: PPUSH
45298: CALL_OW 2
45302: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45303: LD_VAR 0 14
45307: PPUSH
45308: LD_VAR 0 9
45312: PPUSH
45313: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45317: LD_VAR 0 9
45321: PPUSH
45322: CALL_OW 313
45326: PUSH
45327: LD_INT 6
45329: EQUAL
45330: PUSH
45331: LD_VAR 0 9
45335: PPUSH
45336: CALL_OW 266
45340: PUSH
45341: LD_INT 32
45343: PUSH
45344: LD_INT 31
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: IN
45351: OR
45352: IFFALSE 45166
45354: GO 45163
45356: POP
45357: POP
// end else
45358: GO 45740
// for j = 1 to x do
45360: LD_ADDR_VAR 0 9
45364: PUSH
45365: DOUBLE
45366: LD_INT 1
45368: DEC
45369: ST_TO_ADDR
45370: LD_VAR 0 13
45374: PUSH
45375: FOR_TO
45376: IFFALSE 45738
// begin InitHc ;
45378: CALL_OW 19
// if not f then
45382: LD_VAR 0 12
45386: NOT
45387: IFFALSE 45476
// begin PrepareHuman ( false , i , skill ) ;
45389: LD_INT 0
45391: PPUSH
45392: LD_VAR 0 8
45396: PPUSH
45397: LD_VAR 0 4
45401: PPUSH
45402: CALL_OW 380
// un := CreateHuman ;
45406: LD_ADDR_VAR 0 14
45410: PUSH
45411: CALL_OW 44
45415: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45416: LD_ADDR_VAR 0 7
45420: PUSH
45421: LD_VAR 0 7
45425: PPUSH
45426: LD_INT 1
45428: PPUSH
45429: LD_VAR 0 14
45433: PPUSH
45434: CALL_OW 2
45438: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45439: LD_VAR 0 14
45443: PPUSH
45444: LD_VAR 0 1
45448: PPUSH
45449: CALL_OW 250
45453: PPUSH
45454: LD_VAR 0 1
45458: PPUSH
45459: CALL_OW 251
45463: PPUSH
45464: LD_INT 10
45466: PPUSH
45467: LD_INT 0
45469: PPUSH
45470: CALL_OW 50
// continue ;
45474: GO 45375
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45476: LD_VAR 0 12
45480: PUSH
45481: LD_INT 1
45483: ARRAY
45484: PPUSH
45485: CALL_OW 313
45489: PUSH
45490: LD_VAR 0 12
45494: PUSH
45495: LD_INT 1
45497: ARRAY
45498: PPUSH
45499: CALL_OW 266
45503: PUSH
45504: LD_INT 32
45506: PUSH
45507: LD_INT 31
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: IN
45514: AND
45515: PUSH
45516: LD_VAR 0 12
45520: PUSH
45521: LD_INT 1
45523: ARRAY
45524: PPUSH
45525: CALL_OW 313
45529: PUSH
45530: LD_INT 6
45532: EQUAL
45533: OR
45534: IFFALSE 45554
// f := Delete ( f , 1 ) ;
45536: LD_ADDR_VAR 0 12
45540: PUSH
45541: LD_VAR 0 12
45545: PPUSH
45546: LD_INT 1
45548: PPUSH
45549: CALL_OW 3
45553: ST_TO_ADDR
// if not f then
45554: LD_VAR 0 12
45558: NOT
45559: IFFALSE 45577
// begin x := x + 2 ;
45561: LD_ADDR_VAR 0 13
45565: PUSH
45566: LD_VAR 0 13
45570: PUSH
45571: LD_INT 2
45573: PLUS
45574: ST_TO_ADDR
// continue ;
45575: GO 45375
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45577: LD_VAR 0 12
45581: PUSH
45582: LD_INT 1
45584: ARRAY
45585: PPUSH
45586: CALL_OW 266
45590: PUSH
45591: LD_INT 5
45593: EQUAL
45594: IFFALSE 45668
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45596: LD_VAR 0 12
45600: PUSH
45601: LD_INT 1
45603: ARRAY
45604: PPUSH
45605: CALL_OW 313
45609: PUSH
45610: LD_INT 3
45612: LESS
45613: IFFALSE 45649
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45615: LD_INT 0
45617: PPUSH
45618: LD_INT 5
45620: PUSH
45621: LD_INT 8
45623: PUSH
45624: LD_INT 9
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: LIST
45631: PUSH
45632: LD_VAR 0 17
45636: ARRAY
45637: PPUSH
45638: LD_VAR 0 4
45642: PPUSH
45643: CALL_OW 380
45647: GO 45666
// PrepareHuman ( false , i , skill ) ;
45649: LD_INT 0
45651: PPUSH
45652: LD_VAR 0 8
45656: PPUSH
45657: LD_VAR 0 4
45661: PPUSH
45662: CALL_OW 380
// end else
45666: GO 45685
// PrepareHuman ( false , i , skill ) ;
45668: LD_INT 0
45670: PPUSH
45671: LD_VAR 0 8
45675: PPUSH
45676: LD_VAR 0 4
45680: PPUSH
45681: CALL_OW 380
// un := CreateHuman ;
45685: LD_ADDR_VAR 0 14
45689: PUSH
45690: CALL_OW 44
45694: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45695: LD_ADDR_VAR 0 7
45699: PUSH
45700: LD_VAR 0 7
45704: PPUSH
45705: LD_INT 1
45707: PPUSH
45708: LD_VAR 0 14
45712: PPUSH
45713: CALL_OW 2
45717: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45718: LD_VAR 0 14
45722: PPUSH
45723: LD_VAR 0 12
45727: PUSH
45728: LD_INT 1
45730: ARRAY
45731: PPUSH
45732: CALL_OW 52
// end ;
45736: GO 45375
45738: POP
45739: POP
// end ;
45740: GO 44677
45742: POP
45743: POP
// result := result ^ buildings ;
45744: LD_ADDR_VAR 0 7
45748: PUSH
45749: LD_VAR 0 7
45753: PUSH
45754: LD_VAR 0 18
45758: ADD
45759: ST_TO_ADDR
// end else
45760: GO 45903
// begin for i = 1 to personel do
45762: LD_ADDR_VAR 0 8
45766: PUSH
45767: DOUBLE
45768: LD_INT 1
45770: DEC
45771: ST_TO_ADDR
45772: LD_VAR 0 6
45776: PUSH
45777: FOR_TO
45778: IFFALSE 45901
// begin if i > 4 then
45780: LD_VAR 0 8
45784: PUSH
45785: LD_INT 4
45787: GREATER
45788: IFFALSE 45792
// break ;
45790: GO 45901
// x := personel [ i ] ;
45792: LD_ADDR_VAR 0 13
45796: PUSH
45797: LD_VAR 0 6
45801: PUSH
45802: LD_VAR 0 8
45806: ARRAY
45807: ST_TO_ADDR
// if x = - 1 then
45808: LD_VAR 0 13
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: EQUAL
45817: IFFALSE 45821
// continue ;
45819: GO 45777
// PrepareHuman ( false , i , skill ) ;
45821: LD_INT 0
45823: PPUSH
45824: LD_VAR 0 8
45828: PPUSH
45829: LD_VAR 0 4
45833: PPUSH
45834: CALL_OW 380
// un := CreateHuman ;
45838: LD_ADDR_VAR 0 14
45842: PUSH
45843: CALL_OW 44
45847: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45848: LD_VAR 0 14
45852: PPUSH
45853: LD_VAR 0 1
45857: PPUSH
45858: CALL_OW 250
45862: PPUSH
45863: LD_VAR 0 1
45867: PPUSH
45868: CALL_OW 251
45872: PPUSH
45873: LD_INT 10
45875: PPUSH
45876: LD_INT 0
45878: PPUSH
45879: CALL_OW 50
// result := result ^ un ;
45883: LD_ADDR_VAR 0 7
45887: PUSH
45888: LD_VAR 0 7
45892: PUSH
45893: LD_VAR 0 14
45897: ADD
45898: ST_TO_ADDR
// end ;
45899: GO 45777
45901: POP
45902: POP
// end ; end ;
45903: LD_VAR 0 7
45907: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45908: LD_INT 0
45910: PPUSH
45911: PPUSH
45912: PPUSH
45913: PPUSH
45914: PPUSH
45915: PPUSH
45916: PPUSH
45917: PPUSH
45918: PPUSH
45919: PPUSH
45920: PPUSH
45921: PPUSH
45922: PPUSH
45923: PPUSH
45924: PPUSH
45925: PPUSH
// result := false ;
45926: LD_ADDR_VAR 0 3
45930: PUSH
45931: LD_INT 0
45933: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45934: LD_VAR 0 1
45938: NOT
45939: PUSH
45940: LD_VAR 0 1
45944: PPUSH
45945: CALL_OW 266
45949: PUSH
45950: LD_INT 32
45952: PUSH
45953: LD_INT 33
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: IN
45960: NOT
45961: OR
45962: IFFALSE 45966
// exit ;
45964: GO 47075
// nat := GetNation ( tower ) ;
45966: LD_ADDR_VAR 0 12
45970: PUSH
45971: LD_VAR 0 1
45975: PPUSH
45976: CALL_OW 248
45980: ST_TO_ADDR
// side := GetSide ( tower ) ;
45981: LD_ADDR_VAR 0 16
45985: PUSH
45986: LD_VAR 0 1
45990: PPUSH
45991: CALL_OW 255
45995: ST_TO_ADDR
// x := GetX ( tower ) ;
45996: LD_ADDR_VAR 0 10
46000: PUSH
46001: LD_VAR 0 1
46005: PPUSH
46006: CALL_OW 250
46010: ST_TO_ADDR
// y := GetY ( tower ) ;
46011: LD_ADDR_VAR 0 11
46015: PUSH
46016: LD_VAR 0 1
46020: PPUSH
46021: CALL_OW 251
46025: ST_TO_ADDR
// if not x or not y then
46026: LD_VAR 0 10
46030: NOT
46031: PUSH
46032: LD_VAR 0 11
46036: NOT
46037: OR
46038: IFFALSE 46042
// exit ;
46040: GO 47075
// weapon := 0 ;
46042: LD_ADDR_VAR 0 18
46046: PUSH
46047: LD_INT 0
46049: ST_TO_ADDR
// fac_list := [ ] ;
46050: LD_ADDR_VAR 0 17
46054: PUSH
46055: EMPTY
46056: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46057: LD_ADDR_VAR 0 6
46061: PUSH
46062: LD_VAR 0 1
46066: PPUSH
46067: CALL_OW 274
46071: PPUSH
46072: LD_VAR 0 2
46076: PPUSH
46077: LD_INT 0
46079: PPUSH
46080: CALL 43646 0 3
46084: PPUSH
46085: LD_INT 30
46087: PUSH
46088: LD_INT 3
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PPUSH
46095: CALL_OW 72
46099: ST_TO_ADDR
// if not factories then
46100: LD_VAR 0 6
46104: NOT
46105: IFFALSE 46109
// exit ;
46107: GO 47075
// for i in factories do
46109: LD_ADDR_VAR 0 8
46113: PUSH
46114: LD_VAR 0 6
46118: PUSH
46119: FOR_IN
46120: IFFALSE 46145
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46122: LD_ADDR_VAR 0 17
46126: PUSH
46127: LD_VAR 0 17
46131: PUSH
46132: LD_VAR 0 8
46136: PPUSH
46137: CALL_OW 478
46141: UNION
46142: ST_TO_ADDR
46143: GO 46119
46145: POP
46146: POP
// if not fac_list then
46147: LD_VAR 0 17
46151: NOT
46152: IFFALSE 46156
// exit ;
46154: GO 47075
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46156: LD_ADDR_VAR 0 5
46160: PUSH
46161: LD_INT 4
46163: PUSH
46164: LD_INT 5
46166: PUSH
46167: LD_INT 9
46169: PUSH
46170: LD_INT 10
46172: PUSH
46173: LD_INT 6
46175: PUSH
46176: LD_INT 7
46178: PUSH
46179: LD_INT 11
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 27
46193: PUSH
46194: LD_INT 28
46196: PUSH
46197: LD_INT 26
46199: PUSH
46200: LD_INT 30
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 43
46211: PUSH
46212: LD_INT 44
46214: PUSH
46215: LD_INT 46
46217: PUSH
46218: LD_INT 45
46220: PUSH
46221: LD_INT 47
46223: PUSH
46224: LD_INT 49
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: LIST
46239: PUSH
46240: LD_VAR 0 12
46244: ARRAY
46245: ST_TO_ADDR
// list := list isect fac_list ;
46246: LD_ADDR_VAR 0 5
46250: PUSH
46251: LD_VAR 0 5
46255: PUSH
46256: LD_VAR 0 17
46260: ISECT
46261: ST_TO_ADDR
// if not list then
46262: LD_VAR 0 5
46266: NOT
46267: IFFALSE 46271
// exit ;
46269: GO 47075
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46271: LD_VAR 0 12
46275: PUSH
46276: LD_INT 3
46278: EQUAL
46279: PUSH
46280: LD_INT 49
46282: PUSH
46283: LD_VAR 0 5
46287: IN
46288: AND
46289: PUSH
46290: LD_INT 31
46292: PPUSH
46293: LD_VAR 0 16
46297: PPUSH
46298: CALL_OW 321
46302: PUSH
46303: LD_INT 2
46305: EQUAL
46306: AND
46307: IFFALSE 46367
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46309: LD_INT 22
46311: PUSH
46312: LD_VAR 0 16
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 35
46323: PUSH
46324: LD_INT 49
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 91
46333: PUSH
46334: LD_VAR 0 1
46338: PUSH
46339: LD_INT 10
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: LIST
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: LIST
46351: PPUSH
46352: CALL_OW 69
46356: NOT
46357: IFFALSE 46367
// weapon := ru_time_lapser ;
46359: LD_ADDR_VAR 0 18
46363: PUSH
46364: LD_INT 49
46366: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46367: LD_VAR 0 12
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: IN
46382: PUSH
46383: LD_INT 11
46385: PUSH
46386: LD_VAR 0 5
46390: IN
46391: PUSH
46392: LD_INT 30
46394: PUSH
46395: LD_VAR 0 5
46399: IN
46400: OR
46401: AND
46402: PUSH
46403: LD_INT 6
46405: PPUSH
46406: LD_VAR 0 16
46410: PPUSH
46411: CALL_OW 321
46415: PUSH
46416: LD_INT 2
46418: EQUAL
46419: AND
46420: IFFALSE 46585
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46422: LD_INT 22
46424: PUSH
46425: LD_VAR 0 16
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: LD_INT 35
46439: PUSH
46440: LD_INT 11
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 35
46449: PUSH
46450: LD_INT 30
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 91
46464: PUSH
46465: LD_VAR 0 1
46469: PUSH
46470: LD_INT 18
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: LIST
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: LIST
46482: PPUSH
46483: CALL_OW 69
46487: NOT
46488: PUSH
46489: LD_INT 22
46491: PUSH
46492: LD_VAR 0 16
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: LD_INT 30
46506: PUSH
46507: LD_INT 32
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 30
46516: PUSH
46517: LD_INT 33
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 91
46531: PUSH
46532: LD_VAR 0 1
46536: PUSH
46537: LD_INT 12
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: LIST
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: LIST
46549: PUSH
46550: EMPTY
46551: LIST
46552: PPUSH
46553: CALL_OW 69
46557: PUSH
46558: LD_INT 2
46560: GREATER
46561: AND
46562: IFFALSE 46585
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46564: LD_ADDR_VAR 0 18
46568: PUSH
46569: LD_INT 11
46571: PUSH
46572: LD_INT 30
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_VAR 0 12
46583: ARRAY
46584: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46585: LD_VAR 0 18
46589: NOT
46590: PUSH
46591: LD_INT 40
46593: PPUSH
46594: LD_VAR 0 16
46598: PPUSH
46599: CALL_OW 321
46603: PUSH
46604: LD_INT 2
46606: EQUAL
46607: AND
46608: PUSH
46609: LD_INT 7
46611: PUSH
46612: LD_VAR 0 5
46616: IN
46617: PUSH
46618: LD_INT 28
46620: PUSH
46621: LD_VAR 0 5
46625: IN
46626: OR
46627: PUSH
46628: LD_INT 45
46630: PUSH
46631: LD_VAR 0 5
46635: IN
46636: OR
46637: AND
46638: IFFALSE 46892
// begin hex := GetHexInfo ( x , y ) ;
46640: LD_ADDR_VAR 0 4
46644: PUSH
46645: LD_VAR 0 10
46649: PPUSH
46650: LD_VAR 0 11
46654: PPUSH
46655: CALL_OW 546
46659: ST_TO_ADDR
// if hex [ 1 ] then
46660: LD_VAR 0 4
46664: PUSH
46665: LD_INT 1
46667: ARRAY
46668: IFFALSE 46672
// exit ;
46670: GO 47075
// height := hex [ 2 ] ;
46672: LD_ADDR_VAR 0 15
46676: PUSH
46677: LD_VAR 0 4
46681: PUSH
46682: LD_INT 2
46684: ARRAY
46685: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46686: LD_ADDR_VAR 0 14
46690: PUSH
46691: LD_INT 0
46693: PUSH
46694: LD_INT 2
46696: PUSH
46697: LD_INT 3
46699: PUSH
46700: LD_INT 5
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: ST_TO_ADDR
// for i in tmp do
46709: LD_ADDR_VAR 0 8
46713: PUSH
46714: LD_VAR 0 14
46718: PUSH
46719: FOR_IN
46720: IFFALSE 46890
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46722: LD_ADDR_VAR 0 9
46726: PUSH
46727: LD_VAR 0 10
46731: PPUSH
46732: LD_VAR 0 8
46736: PPUSH
46737: LD_INT 5
46739: PPUSH
46740: CALL_OW 272
46744: PUSH
46745: LD_VAR 0 11
46749: PPUSH
46750: LD_VAR 0 8
46754: PPUSH
46755: LD_INT 5
46757: PPUSH
46758: CALL_OW 273
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46767: LD_VAR 0 9
46771: PUSH
46772: LD_INT 1
46774: ARRAY
46775: PPUSH
46776: LD_VAR 0 9
46780: PUSH
46781: LD_INT 2
46783: ARRAY
46784: PPUSH
46785: CALL_OW 488
46789: IFFALSE 46888
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46791: LD_ADDR_VAR 0 4
46795: PUSH
46796: LD_VAR 0 9
46800: PUSH
46801: LD_INT 1
46803: ARRAY
46804: PPUSH
46805: LD_VAR 0 9
46809: PUSH
46810: LD_INT 2
46812: ARRAY
46813: PPUSH
46814: CALL_OW 546
46818: ST_TO_ADDR
// if hex [ 1 ] then
46819: LD_VAR 0 4
46823: PUSH
46824: LD_INT 1
46826: ARRAY
46827: IFFALSE 46831
// continue ;
46829: GO 46719
// h := hex [ 2 ] ;
46831: LD_ADDR_VAR 0 13
46835: PUSH
46836: LD_VAR 0 4
46840: PUSH
46841: LD_INT 2
46843: ARRAY
46844: ST_TO_ADDR
// if h + 7 < height then
46845: LD_VAR 0 13
46849: PUSH
46850: LD_INT 7
46852: PLUS
46853: PUSH
46854: LD_VAR 0 15
46858: LESS
46859: IFFALSE 46888
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46861: LD_ADDR_VAR 0 18
46865: PUSH
46866: LD_INT 7
46868: PUSH
46869: LD_INT 28
46871: PUSH
46872: LD_INT 45
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: LIST
46879: PUSH
46880: LD_VAR 0 12
46884: ARRAY
46885: ST_TO_ADDR
// break ;
46886: GO 46890
// end ; end ; end ;
46888: GO 46719
46890: POP
46891: POP
// end ; if not weapon then
46892: LD_VAR 0 18
46896: NOT
46897: IFFALSE 46957
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46899: LD_ADDR_VAR 0 5
46903: PUSH
46904: LD_VAR 0 5
46908: PUSH
46909: LD_INT 11
46911: PUSH
46912: LD_INT 30
46914: PUSH
46915: LD_INT 49
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: LIST
46922: DIFF
46923: ST_TO_ADDR
// if not list then
46924: LD_VAR 0 5
46928: NOT
46929: IFFALSE 46933
// exit ;
46931: GO 47075
// weapon := list [ rand ( 1 , list ) ] ;
46933: LD_ADDR_VAR 0 18
46937: PUSH
46938: LD_VAR 0 5
46942: PUSH
46943: LD_INT 1
46945: PPUSH
46946: LD_VAR 0 5
46950: PPUSH
46951: CALL_OW 12
46955: ARRAY
46956: ST_TO_ADDR
// end ; if weapon then
46957: LD_VAR 0 18
46961: IFFALSE 47075
// begin tmp := CostOfWeapon ( weapon ) ;
46963: LD_ADDR_VAR 0 14
46967: PUSH
46968: LD_VAR 0 18
46972: PPUSH
46973: CALL_OW 451
46977: ST_TO_ADDR
// j := GetBase ( tower ) ;
46978: LD_ADDR_VAR 0 9
46982: PUSH
46983: LD_VAR 0 1
46987: PPUSH
46988: CALL_OW 274
46992: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46993: LD_VAR 0 9
46997: PPUSH
46998: LD_INT 1
47000: PPUSH
47001: CALL_OW 275
47005: PUSH
47006: LD_VAR 0 14
47010: PUSH
47011: LD_INT 1
47013: ARRAY
47014: GREATEREQUAL
47015: PUSH
47016: LD_VAR 0 9
47020: PPUSH
47021: LD_INT 2
47023: PPUSH
47024: CALL_OW 275
47028: PUSH
47029: LD_VAR 0 14
47033: PUSH
47034: LD_INT 2
47036: ARRAY
47037: GREATEREQUAL
47038: AND
47039: PUSH
47040: LD_VAR 0 9
47044: PPUSH
47045: LD_INT 3
47047: PPUSH
47048: CALL_OW 275
47052: PUSH
47053: LD_VAR 0 14
47057: PUSH
47058: LD_INT 3
47060: ARRAY
47061: GREATEREQUAL
47062: AND
47063: IFFALSE 47075
// result := weapon ;
47065: LD_ADDR_VAR 0 3
47069: PUSH
47070: LD_VAR 0 18
47074: ST_TO_ADDR
// end ; end ;
47075: LD_VAR 0 3
47079: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47080: LD_INT 0
47082: PPUSH
47083: PPUSH
// result := true ;
47084: LD_ADDR_VAR 0 3
47088: PUSH
47089: LD_INT 1
47091: ST_TO_ADDR
// if array1 = array2 then
47092: LD_VAR 0 1
47096: PUSH
47097: LD_VAR 0 2
47101: EQUAL
47102: IFFALSE 47162
// begin for i = 1 to array1 do
47104: LD_ADDR_VAR 0 4
47108: PUSH
47109: DOUBLE
47110: LD_INT 1
47112: DEC
47113: ST_TO_ADDR
47114: LD_VAR 0 1
47118: PUSH
47119: FOR_TO
47120: IFFALSE 47158
// if array1 [ i ] <> array2 [ i ] then
47122: LD_VAR 0 1
47126: PUSH
47127: LD_VAR 0 4
47131: ARRAY
47132: PUSH
47133: LD_VAR 0 2
47137: PUSH
47138: LD_VAR 0 4
47142: ARRAY
47143: NONEQUAL
47144: IFFALSE 47156
// begin result := false ;
47146: LD_ADDR_VAR 0 3
47150: PUSH
47151: LD_INT 0
47153: ST_TO_ADDR
// break ;
47154: GO 47158
// end ;
47156: GO 47119
47158: POP
47159: POP
// end else
47160: GO 47170
// result := false ;
47162: LD_ADDR_VAR 0 3
47166: PUSH
47167: LD_INT 0
47169: ST_TO_ADDR
// end ;
47170: LD_VAR 0 3
47174: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47175: LD_INT 0
47177: PPUSH
47178: PPUSH
// if not array1 or not array2 then
47179: LD_VAR 0 1
47183: NOT
47184: PUSH
47185: LD_VAR 0 2
47189: NOT
47190: OR
47191: IFFALSE 47195
// exit ;
47193: GO 47259
// result := true ;
47195: LD_ADDR_VAR 0 3
47199: PUSH
47200: LD_INT 1
47202: ST_TO_ADDR
// for i = 1 to array1 do
47203: LD_ADDR_VAR 0 4
47207: PUSH
47208: DOUBLE
47209: LD_INT 1
47211: DEC
47212: ST_TO_ADDR
47213: LD_VAR 0 1
47217: PUSH
47218: FOR_TO
47219: IFFALSE 47257
// if array1 [ i ] <> array2 [ i ] then
47221: LD_VAR 0 1
47225: PUSH
47226: LD_VAR 0 4
47230: ARRAY
47231: PUSH
47232: LD_VAR 0 2
47236: PUSH
47237: LD_VAR 0 4
47241: ARRAY
47242: NONEQUAL
47243: IFFALSE 47255
// begin result := false ;
47245: LD_ADDR_VAR 0 3
47249: PUSH
47250: LD_INT 0
47252: ST_TO_ADDR
// break ;
47253: GO 47257
// end ;
47255: GO 47218
47257: POP
47258: POP
// end ;
47259: LD_VAR 0 3
47263: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47264: LD_INT 0
47266: PPUSH
47267: PPUSH
47268: PPUSH
// pom := GetBase ( fac ) ;
47269: LD_ADDR_VAR 0 5
47273: PUSH
47274: LD_VAR 0 1
47278: PPUSH
47279: CALL_OW 274
47283: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47284: LD_ADDR_VAR 0 4
47288: PUSH
47289: LD_VAR 0 2
47293: PUSH
47294: LD_INT 1
47296: ARRAY
47297: PPUSH
47298: LD_VAR 0 2
47302: PUSH
47303: LD_INT 2
47305: ARRAY
47306: PPUSH
47307: LD_VAR 0 2
47311: PUSH
47312: LD_INT 3
47314: ARRAY
47315: PPUSH
47316: LD_VAR 0 2
47320: PUSH
47321: LD_INT 4
47323: ARRAY
47324: PPUSH
47325: CALL_OW 449
47329: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47330: LD_ADDR_VAR 0 3
47334: PUSH
47335: LD_VAR 0 5
47339: PPUSH
47340: LD_INT 1
47342: PPUSH
47343: CALL_OW 275
47347: PUSH
47348: LD_VAR 0 4
47352: PUSH
47353: LD_INT 1
47355: ARRAY
47356: GREATEREQUAL
47357: PUSH
47358: LD_VAR 0 5
47362: PPUSH
47363: LD_INT 2
47365: PPUSH
47366: CALL_OW 275
47370: PUSH
47371: LD_VAR 0 4
47375: PUSH
47376: LD_INT 2
47378: ARRAY
47379: GREATEREQUAL
47380: AND
47381: PUSH
47382: LD_VAR 0 5
47386: PPUSH
47387: LD_INT 3
47389: PPUSH
47390: CALL_OW 275
47394: PUSH
47395: LD_VAR 0 4
47399: PUSH
47400: LD_INT 3
47402: ARRAY
47403: GREATEREQUAL
47404: AND
47405: ST_TO_ADDR
// end ;
47406: LD_VAR 0 3
47410: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47411: LD_INT 0
47413: PPUSH
47414: PPUSH
47415: PPUSH
47416: PPUSH
// pom := GetBase ( building ) ;
47417: LD_ADDR_VAR 0 3
47421: PUSH
47422: LD_VAR 0 1
47426: PPUSH
47427: CALL_OW 274
47431: ST_TO_ADDR
// if not pom then
47432: LD_VAR 0 3
47436: NOT
47437: IFFALSE 47441
// exit ;
47439: GO 47611
// btype := GetBType ( building ) ;
47441: LD_ADDR_VAR 0 5
47445: PUSH
47446: LD_VAR 0 1
47450: PPUSH
47451: CALL_OW 266
47455: ST_TO_ADDR
// if btype = b_armoury then
47456: LD_VAR 0 5
47460: PUSH
47461: LD_INT 4
47463: EQUAL
47464: IFFALSE 47474
// btype := b_barracks ;
47466: LD_ADDR_VAR 0 5
47470: PUSH
47471: LD_INT 5
47473: ST_TO_ADDR
// if btype = b_depot then
47474: LD_VAR 0 5
47478: PUSH
47479: LD_INT 0
47481: EQUAL
47482: IFFALSE 47492
// btype := b_warehouse ;
47484: LD_ADDR_VAR 0 5
47488: PUSH
47489: LD_INT 1
47491: ST_TO_ADDR
// if btype = b_workshop then
47492: LD_VAR 0 5
47496: PUSH
47497: LD_INT 2
47499: EQUAL
47500: IFFALSE 47510
// btype := b_factory ;
47502: LD_ADDR_VAR 0 5
47506: PUSH
47507: LD_INT 3
47509: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47510: LD_ADDR_VAR 0 4
47514: PUSH
47515: LD_VAR 0 5
47519: PPUSH
47520: LD_VAR 0 1
47524: PPUSH
47525: CALL_OW 248
47529: PPUSH
47530: CALL_OW 450
47534: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47535: LD_ADDR_VAR 0 2
47539: PUSH
47540: LD_VAR 0 3
47544: PPUSH
47545: LD_INT 1
47547: PPUSH
47548: CALL_OW 275
47552: PUSH
47553: LD_VAR 0 4
47557: PUSH
47558: LD_INT 1
47560: ARRAY
47561: GREATEREQUAL
47562: PUSH
47563: LD_VAR 0 3
47567: PPUSH
47568: LD_INT 2
47570: PPUSH
47571: CALL_OW 275
47575: PUSH
47576: LD_VAR 0 4
47580: PUSH
47581: LD_INT 2
47583: ARRAY
47584: GREATEREQUAL
47585: AND
47586: PUSH
47587: LD_VAR 0 3
47591: PPUSH
47592: LD_INT 3
47594: PPUSH
47595: CALL_OW 275
47599: PUSH
47600: LD_VAR 0 4
47604: PUSH
47605: LD_INT 3
47607: ARRAY
47608: GREATEREQUAL
47609: AND
47610: ST_TO_ADDR
// end ;
47611: LD_VAR 0 2
47615: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47616: LD_INT 0
47618: PPUSH
47619: PPUSH
47620: PPUSH
// pom := GetBase ( building ) ;
47621: LD_ADDR_VAR 0 4
47625: PUSH
47626: LD_VAR 0 1
47630: PPUSH
47631: CALL_OW 274
47635: ST_TO_ADDR
// if not pom then
47636: LD_VAR 0 4
47640: NOT
47641: IFFALSE 47645
// exit ;
47643: GO 47746
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47645: LD_ADDR_VAR 0 5
47649: PUSH
47650: LD_VAR 0 2
47654: PPUSH
47655: LD_VAR 0 1
47659: PPUSH
47660: CALL_OW 248
47664: PPUSH
47665: CALL_OW 450
47669: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47670: LD_ADDR_VAR 0 3
47674: PUSH
47675: LD_VAR 0 4
47679: PPUSH
47680: LD_INT 1
47682: PPUSH
47683: CALL_OW 275
47687: PUSH
47688: LD_VAR 0 5
47692: PUSH
47693: LD_INT 1
47695: ARRAY
47696: GREATEREQUAL
47697: PUSH
47698: LD_VAR 0 4
47702: PPUSH
47703: LD_INT 2
47705: PPUSH
47706: CALL_OW 275
47710: PUSH
47711: LD_VAR 0 5
47715: PUSH
47716: LD_INT 2
47718: ARRAY
47719: GREATEREQUAL
47720: AND
47721: PUSH
47722: LD_VAR 0 4
47726: PPUSH
47727: LD_INT 3
47729: PPUSH
47730: CALL_OW 275
47734: PUSH
47735: LD_VAR 0 5
47739: PUSH
47740: LD_INT 3
47742: ARRAY
47743: GREATEREQUAL
47744: AND
47745: ST_TO_ADDR
// end ;
47746: LD_VAR 0 3
47750: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47751: LD_INT 0
47753: PPUSH
47754: PPUSH
47755: PPUSH
47756: PPUSH
47757: PPUSH
47758: PPUSH
47759: PPUSH
47760: PPUSH
47761: PPUSH
47762: PPUSH
47763: PPUSH
// result := false ;
47764: LD_ADDR_VAR 0 8
47768: PUSH
47769: LD_INT 0
47771: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47772: LD_VAR 0 5
47776: NOT
47777: PUSH
47778: LD_VAR 0 1
47782: NOT
47783: OR
47784: PUSH
47785: LD_VAR 0 2
47789: NOT
47790: OR
47791: PUSH
47792: LD_VAR 0 3
47796: NOT
47797: OR
47798: IFFALSE 47802
// exit ;
47800: GO 48616
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47802: LD_ADDR_VAR 0 14
47806: PUSH
47807: LD_VAR 0 1
47811: PPUSH
47812: LD_VAR 0 2
47816: PPUSH
47817: LD_VAR 0 3
47821: PPUSH
47822: LD_VAR 0 4
47826: PPUSH
47827: LD_VAR 0 5
47831: PUSH
47832: LD_INT 1
47834: ARRAY
47835: PPUSH
47836: CALL_OW 248
47840: PPUSH
47841: LD_INT 0
47843: PPUSH
47844: CALL 49853 0 6
47848: ST_TO_ADDR
// if not hexes then
47849: LD_VAR 0 14
47853: NOT
47854: IFFALSE 47858
// exit ;
47856: GO 48616
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47858: LD_ADDR_VAR 0 17
47862: PUSH
47863: LD_VAR 0 5
47867: PPUSH
47868: LD_INT 22
47870: PUSH
47871: LD_VAR 0 13
47875: PPUSH
47876: CALL_OW 255
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: LD_INT 30
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 30
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: LIST
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PPUSH
47917: CALL_OW 72
47921: ST_TO_ADDR
// for i = 1 to hexes do
47922: LD_ADDR_VAR 0 9
47926: PUSH
47927: DOUBLE
47928: LD_INT 1
47930: DEC
47931: ST_TO_ADDR
47932: LD_VAR 0 14
47936: PUSH
47937: FOR_TO
47938: IFFALSE 48614
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47940: LD_ADDR_VAR 0 13
47944: PUSH
47945: LD_VAR 0 14
47949: PUSH
47950: LD_VAR 0 9
47954: ARRAY
47955: PUSH
47956: LD_INT 1
47958: ARRAY
47959: PPUSH
47960: LD_VAR 0 14
47964: PUSH
47965: LD_VAR 0 9
47969: ARRAY
47970: PUSH
47971: LD_INT 2
47973: ARRAY
47974: PPUSH
47975: CALL_OW 428
47979: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47980: LD_VAR 0 14
47984: PUSH
47985: LD_VAR 0 9
47989: ARRAY
47990: PUSH
47991: LD_INT 1
47993: ARRAY
47994: PPUSH
47995: LD_VAR 0 14
47999: PUSH
48000: LD_VAR 0 9
48004: ARRAY
48005: PUSH
48006: LD_INT 2
48008: ARRAY
48009: PPUSH
48010: CALL_OW 351
48014: PUSH
48015: LD_VAR 0 14
48019: PUSH
48020: LD_VAR 0 9
48024: ARRAY
48025: PUSH
48026: LD_INT 1
48028: ARRAY
48029: PPUSH
48030: LD_VAR 0 14
48034: PUSH
48035: LD_VAR 0 9
48039: ARRAY
48040: PUSH
48041: LD_INT 2
48043: ARRAY
48044: PPUSH
48045: CALL_OW 488
48049: NOT
48050: OR
48051: PUSH
48052: LD_VAR 0 13
48056: PPUSH
48057: CALL_OW 247
48061: PUSH
48062: LD_INT 3
48064: EQUAL
48065: OR
48066: IFFALSE 48072
// exit ;
48068: POP
48069: POP
48070: GO 48616
// if not tmp then
48072: LD_VAR 0 13
48076: NOT
48077: IFFALSE 48081
// continue ;
48079: GO 47937
// result := true ;
48081: LD_ADDR_VAR 0 8
48085: PUSH
48086: LD_INT 1
48088: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48089: LD_VAR 0 6
48093: PUSH
48094: LD_VAR 0 13
48098: PPUSH
48099: CALL_OW 247
48103: PUSH
48104: LD_INT 2
48106: EQUAL
48107: AND
48108: PUSH
48109: LD_VAR 0 13
48113: PPUSH
48114: CALL_OW 263
48118: PUSH
48119: LD_INT 1
48121: EQUAL
48122: AND
48123: IFFALSE 48287
// begin if IsDrivenBy ( tmp ) then
48125: LD_VAR 0 13
48129: PPUSH
48130: CALL_OW 311
48134: IFFALSE 48138
// continue ;
48136: GO 47937
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48138: LD_VAR 0 6
48142: PPUSH
48143: LD_INT 3
48145: PUSH
48146: LD_INT 60
48148: PUSH
48149: EMPTY
48150: LIST
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 3
48158: PUSH
48159: LD_INT 55
48161: PUSH
48162: EMPTY
48163: LIST
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PPUSH
48173: CALL_OW 72
48177: IFFALSE 48285
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48179: LD_ADDR_VAR 0 18
48183: PUSH
48184: LD_VAR 0 6
48188: PPUSH
48189: LD_INT 3
48191: PUSH
48192: LD_INT 60
48194: PUSH
48195: EMPTY
48196: LIST
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 3
48204: PUSH
48205: LD_INT 55
48207: PUSH
48208: EMPTY
48209: LIST
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PPUSH
48219: CALL_OW 72
48223: PUSH
48224: LD_INT 1
48226: ARRAY
48227: ST_TO_ADDR
// if IsInUnit ( driver ) then
48228: LD_VAR 0 18
48232: PPUSH
48233: CALL_OW 310
48237: IFFALSE 48248
// ComExit ( driver ) ;
48239: LD_VAR 0 18
48243: PPUSH
48244: CALL 73037 0 1
// AddComEnterUnit ( driver , tmp ) ;
48248: LD_VAR 0 18
48252: PPUSH
48253: LD_VAR 0 13
48257: PPUSH
48258: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48262: LD_VAR 0 18
48266: PPUSH
48267: LD_VAR 0 7
48271: PPUSH
48272: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48276: LD_VAR 0 18
48280: PPUSH
48281: CALL_OW 181
// end ; continue ;
48285: GO 47937
// end ; if not cleaners or not tmp in cleaners then
48287: LD_VAR 0 6
48291: NOT
48292: PUSH
48293: LD_VAR 0 13
48297: PUSH
48298: LD_VAR 0 6
48302: IN
48303: NOT
48304: OR
48305: IFFALSE 48612
// begin if dep then
48307: LD_VAR 0 17
48311: IFFALSE 48447
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48313: LD_ADDR_VAR 0 16
48317: PUSH
48318: LD_VAR 0 17
48322: PUSH
48323: LD_INT 1
48325: ARRAY
48326: PPUSH
48327: CALL_OW 250
48331: PPUSH
48332: LD_VAR 0 17
48336: PUSH
48337: LD_INT 1
48339: ARRAY
48340: PPUSH
48341: CALL_OW 254
48345: PPUSH
48346: LD_INT 5
48348: PPUSH
48349: CALL_OW 272
48353: PUSH
48354: LD_VAR 0 17
48358: PUSH
48359: LD_INT 1
48361: ARRAY
48362: PPUSH
48363: CALL_OW 251
48367: PPUSH
48368: LD_VAR 0 17
48372: PUSH
48373: LD_INT 1
48375: ARRAY
48376: PPUSH
48377: CALL_OW 254
48381: PPUSH
48382: LD_INT 5
48384: PPUSH
48385: CALL_OW 273
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48394: LD_VAR 0 16
48398: PUSH
48399: LD_INT 1
48401: ARRAY
48402: PPUSH
48403: LD_VAR 0 16
48407: PUSH
48408: LD_INT 2
48410: ARRAY
48411: PPUSH
48412: CALL_OW 488
48416: IFFALSE 48447
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48418: LD_VAR 0 13
48422: PPUSH
48423: LD_VAR 0 16
48427: PUSH
48428: LD_INT 1
48430: ARRAY
48431: PPUSH
48432: LD_VAR 0 16
48436: PUSH
48437: LD_INT 2
48439: ARRAY
48440: PPUSH
48441: CALL_OW 111
// continue ;
48445: GO 47937
// end ; end ; r := GetDir ( tmp ) ;
48447: LD_ADDR_VAR 0 15
48451: PUSH
48452: LD_VAR 0 13
48456: PPUSH
48457: CALL_OW 254
48461: ST_TO_ADDR
// if r = 5 then
48462: LD_VAR 0 15
48466: PUSH
48467: LD_INT 5
48469: EQUAL
48470: IFFALSE 48480
// r := 0 ;
48472: LD_ADDR_VAR 0 15
48476: PUSH
48477: LD_INT 0
48479: ST_TO_ADDR
// for j = r to 5 do
48480: LD_ADDR_VAR 0 10
48484: PUSH
48485: DOUBLE
48486: LD_VAR 0 15
48490: DEC
48491: ST_TO_ADDR
48492: LD_INT 5
48494: PUSH
48495: FOR_TO
48496: IFFALSE 48610
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48498: LD_ADDR_VAR 0 11
48502: PUSH
48503: LD_VAR 0 13
48507: PPUSH
48508: CALL_OW 250
48512: PPUSH
48513: LD_VAR 0 10
48517: PPUSH
48518: LD_INT 2
48520: PPUSH
48521: CALL_OW 272
48525: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48526: LD_ADDR_VAR 0 12
48530: PUSH
48531: LD_VAR 0 13
48535: PPUSH
48536: CALL_OW 251
48540: PPUSH
48541: LD_VAR 0 10
48545: PPUSH
48546: LD_INT 2
48548: PPUSH
48549: CALL_OW 273
48553: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48554: LD_VAR 0 11
48558: PPUSH
48559: LD_VAR 0 12
48563: PPUSH
48564: CALL_OW 488
48568: PUSH
48569: LD_VAR 0 11
48573: PPUSH
48574: LD_VAR 0 12
48578: PPUSH
48579: CALL_OW 428
48583: NOT
48584: AND
48585: IFFALSE 48608
// begin ComMoveXY ( tmp , _x , _y ) ;
48587: LD_VAR 0 13
48591: PPUSH
48592: LD_VAR 0 11
48596: PPUSH
48597: LD_VAR 0 12
48601: PPUSH
48602: CALL_OW 111
// break ;
48606: GO 48610
// end ; end ;
48608: GO 48495
48610: POP
48611: POP
// end ; end ;
48612: GO 47937
48614: POP
48615: POP
// end ;
48616: LD_VAR 0 8
48620: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48621: LD_INT 0
48623: PPUSH
// result := true ;
48624: LD_ADDR_VAR 0 3
48628: PUSH
48629: LD_INT 1
48631: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48632: LD_VAR 0 2
48636: PUSH
48637: LD_INT 24
48639: DOUBLE
48640: EQUAL
48641: IFTRUE 48651
48643: LD_INT 33
48645: DOUBLE
48646: EQUAL
48647: IFTRUE 48651
48649: GO 48676
48651: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48652: LD_ADDR_VAR 0 3
48656: PUSH
48657: LD_INT 32
48659: PPUSH
48660: LD_VAR 0 1
48664: PPUSH
48665: CALL_OW 321
48669: PUSH
48670: LD_INT 2
48672: EQUAL
48673: ST_TO_ADDR
48674: GO 48996
48676: LD_INT 20
48678: DOUBLE
48679: EQUAL
48680: IFTRUE 48684
48682: GO 48709
48684: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48685: LD_ADDR_VAR 0 3
48689: PUSH
48690: LD_INT 6
48692: PPUSH
48693: LD_VAR 0 1
48697: PPUSH
48698: CALL_OW 321
48702: PUSH
48703: LD_INT 2
48705: EQUAL
48706: ST_TO_ADDR
48707: GO 48996
48709: LD_INT 22
48711: DOUBLE
48712: EQUAL
48713: IFTRUE 48723
48715: LD_INT 36
48717: DOUBLE
48718: EQUAL
48719: IFTRUE 48723
48721: GO 48748
48723: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48724: LD_ADDR_VAR 0 3
48728: PUSH
48729: LD_INT 15
48731: PPUSH
48732: LD_VAR 0 1
48736: PPUSH
48737: CALL_OW 321
48741: PUSH
48742: LD_INT 2
48744: EQUAL
48745: ST_TO_ADDR
48746: GO 48996
48748: LD_INT 30
48750: DOUBLE
48751: EQUAL
48752: IFTRUE 48756
48754: GO 48781
48756: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48757: LD_ADDR_VAR 0 3
48761: PUSH
48762: LD_INT 20
48764: PPUSH
48765: LD_VAR 0 1
48769: PPUSH
48770: CALL_OW 321
48774: PUSH
48775: LD_INT 2
48777: EQUAL
48778: ST_TO_ADDR
48779: GO 48996
48781: LD_INT 28
48783: DOUBLE
48784: EQUAL
48785: IFTRUE 48795
48787: LD_INT 21
48789: DOUBLE
48790: EQUAL
48791: IFTRUE 48795
48793: GO 48820
48795: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48796: LD_ADDR_VAR 0 3
48800: PUSH
48801: LD_INT 21
48803: PPUSH
48804: LD_VAR 0 1
48808: PPUSH
48809: CALL_OW 321
48813: PUSH
48814: LD_INT 2
48816: EQUAL
48817: ST_TO_ADDR
48818: GO 48996
48820: LD_INT 16
48822: DOUBLE
48823: EQUAL
48824: IFTRUE 48828
48826: GO 48855
48828: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48829: LD_ADDR_VAR 0 3
48833: PUSH
48834: LD_EXP 74
48838: PPUSH
48839: LD_VAR 0 1
48843: PPUSH
48844: CALL_OW 321
48848: PUSH
48849: LD_INT 2
48851: EQUAL
48852: ST_TO_ADDR
48853: GO 48996
48855: LD_INT 19
48857: DOUBLE
48858: EQUAL
48859: IFTRUE 48869
48861: LD_INT 23
48863: DOUBLE
48864: EQUAL
48865: IFTRUE 48869
48867: GO 48896
48869: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48870: LD_ADDR_VAR 0 3
48874: PUSH
48875: LD_EXP 73
48879: PPUSH
48880: LD_VAR 0 1
48884: PPUSH
48885: CALL_OW 321
48889: PUSH
48890: LD_INT 2
48892: EQUAL
48893: ST_TO_ADDR
48894: GO 48996
48896: LD_INT 17
48898: DOUBLE
48899: EQUAL
48900: IFTRUE 48904
48902: GO 48929
48904: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48905: LD_ADDR_VAR 0 3
48909: PUSH
48910: LD_INT 39
48912: PPUSH
48913: LD_VAR 0 1
48917: PPUSH
48918: CALL_OW 321
48922: PUSH
48923: LD_INT 2
48925: EQUAL
48926: ST_TO_ADDR
48927: GO 48996
48929: LD_INT 18
48931: DOUBLE
48932: EQUAL
48933: IFTRUE 48937
48935: GO 48962
48937: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48938: LD_ADDR_VAR 0 3
48942: PUSH
48943: LD_INT 40
48945: PPUSH
48946: LD_VAR 0 1
48950: PPUSH
48951: CALL_OW 321
48955: PUSH
48956: LD_INT 2
48958: EQUAL
48959: ST_TO_ADDR
48960: GO 48996
48962: LD_INT 27
48964: DOUBLE
48965: EQUAL
48966: IFTRUE 48970
48968: GO 48995
48970: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48971: LD_ADDR_VAR 0 3
48975: PUSH
48976: LD_INT 35
48978: PPUSH
48979: LD_VAR 0 1
48983: PPUSH
48984: CALL_OW 321
48988: PUSH
48989: LD_INT 2
48991: EQUAL
48992: ST_TO_ADDR
48993: GO 48996
48995: POP
// end ;
48996: LD_VAR 0 3
49000: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49001: LD_INT 0
49003: PPUSH
49004: PPUSH
49005: PPUSH
49006: PPUSH
49007: PPUSH
49008: PPUSH
49009: PPUSH
49010: PPUSH
49011: PPUSH
49012: PPUSH
49013: PPUSH
// result := false ;
49014: LD_ADDR_VAR 0 6
49018: PUSH
49019: LD_INT 0
49021: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49022: LD_VAR 0 1
49026: NOT
49027: PUSH
49028: LD_VAR 0 1
49032: PPUSH
49033: CALL_OW 266
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: IN
49048: NOT
49049: OR
49050: PUSH
49051: LD_VAR 0 2
49055: NOT
49056: OR
49057: PUSH
49058: LD_VAR 0 5
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: LD_INT 2
49071: PUSH
49072: LD_INT 3
49074: PUSH
49075: LD_INT 4
49077: PUSH
49078: LD_INT 5
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: IN
49089: NOT
49090: OR
49091: PUSH
49092: LD_VAR 0 3
49096: PPUSH
49097: LD_VAR 0 4
49101: PPUSH
49102: CALL_OW 488
49106: NOT
49107: OR
49108: IFFALSE 49112
// exit ;
49110: GO 49848
// side := GetSide ( depot ) ;
49112: LD_ADDR_VAR 0 9
49116: PUSH
49117: LD_VAR 0 1
49121: PPUSH
49122: CALL_OW 255
49126: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49127: LD_VAR 0 9
49131: PPUSH
49132: LD_VAR 0 2
49136: PPUSH
49137: CALL 48621 0 2
49141: NOT
49142: IFFALSE 49146
// exit ;
49144: GO 49848
// pom := GetBase ( depot ) ;
49146: LD_ADDR_VAR 0 10
49150: PUSH
49151: LD_VAR 0 1
49155: PPUSH
49156: CALL_OW 274
49160: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49161: LD_ADDR_VAR 0 11
49165: PUSH
49166: LD_VAR 0 2
49170: PPUSH
49171: LD_VAR 0 1
49175: PPUSH
49176: CALL_OW 248
49180: PPUSH
49181: CALL_OW 450
49185: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49186: LD_VAR 0 10
49190: PPUSH
49191: LD_INT 1
49193: PPUSH
49194: CALL_OW 275
49198: PUSH
49199: LD_VAR 0 11
49203: PUSH
49204: LD_INT 1
49206: ARRAY
49207: GREATEREQUAL
49208: PUSH
49209: LD_VAR 0 10
49213: PPUSH
49214: LD_INT 2
49216: PPUSH
49217: CALL_OW 275
49221: PUSH
49222: LD_VAR 0 11
49226: PUSH
49227: LD_INT 2
49229: ARRAY
49230: GREATEREQUAL
49231: AND
49232: PUSH
49233: LD_VAR 0 10
49237: PPUSH
49238: LD_INT 3
49240: PPUSH
49241: CALL_OW 275
49245: PUSH
49246: LD_VAR 0 11
49250: PUSH
49251: LD_INT 3
49253: ARRAY
49254: GREATEREQUAL
49255: AND
49256: NOT
49257: IFFALSE 49261
// exit ;
49259: GO 49848
// if GetBType ( depot ) = b_depot then
49261: LD_VAR 0 1
49265: PPUSH
49266: CALL_OW 266
49270: PUSH
49271: LD_INT 0
49273: EQUAL
49274: IFFALSE 49286
// dist := 28 else
49276: LD_ADDR_VAR 0 14
49280: PUSH
49281: LD_INT 28
49283: ST_TO_ADDR
49284: GO 49294
// dist := 36 ;
49286: LD_ADDR_VAR 0 14
49290: PUSH
49291: LD_INT 36
49293: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49294: LD_VAR 0 1
49298: PPUSH
49299: LD_VAR 0 3
49303: PPUSH
49304: LD_VAR 0 4
49308: PPUSH
49309: CALL_OW 297
49313: PUSH
49314: LD_VAR 0 14
49318: GREATER
49319: IFFALSE 49323
// exit ;
49321: GO 49848
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49323: LD_ADDR_VAR 0 12
49327: PUSH
49328: LD_VAR 0 2
49332: PPUSH
49333: LD_VAR 0 3
49337: PPUSH
49338: LD_VAR 0 4
49342: PPUSH
49343: LD_VAR 0 5
49347: PPUSH
49348: LD_VAR 0 1
49352: PPUSH
49353: CALL_OW 248
49357: PPUSH
49358: LD_INT 0
49360: PPUSH
49361: CALL 49853 0 6
49365: ST_TO_ADDR
// if not hexes then
49366: LD_VAR 0 12
49370: NOT
49371: IFFALSE 49375
// exit ;
49373: GO 49848
// hex := GetHexInfo ( x , y ) ;
49375: LD_ADDR_VAR 0 15
49379: PUSH
49380: LD_VAR 0 3
49384: PPUSH
49385: LD_VAR 0 4
49389: PPUSH
49390: CALL_OW 546
49394: ST_TO_ADDR
// if hex [ 1 ] then
49395: LD_VAR 0 15
49399: PUSH
49400: LD_INT 1
49402: ARRAY
49403: IFFALSE 49407
// exit ;
49405: GO 49848
// height := hex [ 2 ] ;
49407: LD_ADDR_VAR 0 13
49411: PUSH
49412: LD_VAR 0 15
49416: PUSH
49417: LD_INT 2
49419: ARRAY
49420: ST_TO_ADDR
// for i = 1 to hexes do
49421: LD_ADDR_VAR 0 7
49425: PUSH
49426: DOUBLE
49427: LD_INT 1
49429: DEC
49430: ST_TO_ADDR
49431: LD_VAR 0 12
49435: PUSH
49436: FOR_TO
49437: IFFALSE 49767
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49439: LD_VAR 0 12
49443: PUSH
49444: LD_VAR 0 7
49448: ARRAY
49449: PUSH
49450: LD_INT 1
49452: ARRAY
49453: PPUSH
49454: LD_VAR 0 12
49458: PUSH
49459: LD_VAR 0 7
49463: ARRAY
49464: PUSH
49465: LD_INT 2
49467: ARRAY
49468: PPUSH
49469: CALL_OW 488
49473: NOT
49474: PUSH
49475: LD_VAR 0 12
49479: PUSH
49480: LD_VAR 0 7
49484: ARRAY
49485: PUSH
49486: LD_INT 1
49488: ARRAY
49489: PPUSH
49490: LD_VAR 0 12
49494: PUSH
49495: LD_VAR 0 7
49499: ARRAY
49500: PUSH
49501: LD_INT 2
49503: ARRAY
49504: PPUSH
49505: CALL_OW 428
49509: PUSH
49510: LD_INT 0
49512: GREATER
49513: OR
49514: PUSH
49515: LD_VAR 0 12
49519: PUSH
49520: LD_VAR 0 7
49524: ARRAY
49525: PUSH
49526: LD_INT 1
49528: ARRAY
49529: PPUSH
49530: LD_VAR 0 12
49534: PUSH
49535: LD_VAR 0 7
49539: ARRAY
49540: PUSH
49541: LD_INT 2
49543: ARRAY
49544: PPUSH
49545: CALL_OW 351
49549: OR
49550: IFFALSE 49556
// exit ;
49552: POP
49553: POP
49554: GO 49848
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49556: LD_ADDR_VAR 0 8
49560: PUSH
49561: LD_VAR 0 12
49565: PUSH
49566: LD_VAR 0 7
49570: ARRAY
49571: PUSH
49572: LD_INT 1
49574: ARRAY
49575: PPUSH
49576: LD_VAR 0 12
49580: PUSH
49581: LD_VAR 0 7
49585: ARRAY
49586: PUSH
49587: LD_INT 2
49589: ARRAY
49590: PPUSH
49591: CALL_OW 546
49595: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49596: LD_VAR 0 8
49600: PUSH
49601: LD_INT 1
49603: ARRAY
49604: PUSH
49605: LD_VAR 0 8
49609: PUSH
49610: LD_INT 2
49612: ARRAY
49613: PUSH
49614: LD_VAR 0 13
49618: PUSH
49619: LD_INT 2
49621: PLUS
49622: GREATER
49623: OR
49624: PUSH
49625: LD_VAR 0 8
49629: PUSH
49630: LD_INT 2
49632: ARRAY
49633: PUSH
49634: LD_VAR 0 13
49638: PUSH
49639: LD_INT 2
49641: MINUS
49642: LESS
49643: OR
49644: PUSH
49645: LD_VAR 0 8
49649: PUSH
49650: LD_INT 3
49652: ARRAY
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: LD_INT 8
49659: PUSH
49660: LD_INT 9
49662: PUSH
49663: LD_INT 10
49665: PUSH
49666: LD_INT 11
49668: PUSH
49669: LD_INT 12
49671: PUSH
49672: LD_INT 13
49674: PUSH
49675: LD_INT 16
49677: PUSH
49678: LD_INT 17
49680: PUSH
49681: LD_INT 18
49683: PUSH
49684: LD_INT 19
49686: PUSH
49687: LD_INT 20
49689: PUSH
49690: LD_INT 21
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: IN
49708: NOT
49709: OR
49710: PUSH
49711: LD_VAR 0 8
49715: PUSH
49716: LD_INT 5
49718: ARRAY
49719: NOT
49720: OR
49721: PUSH
49722: LD_VAR 0 8
49726: PUSH
49727: LD_INT 6
49729: ARRAY
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: LD_INT 2
49736: PUSH
49737: LD_INT 7
49739: PUSH
49740: LD_INT 9
49742: PUSH
49743: LD_INT 10
49745: PUSH
49746: LD_INT 11
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: IN
49757: NOT
49758: OR
49759: IFFALSE 49765
// exit ;
49761: POP
49762: POP
49763: GO 49848
// end ;
49765: GO 49436
49767: POP
49768: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49769: LD_VAR 0 9
49773: PPUSH
49774: LD_VAR 0 3
49778: PPUSH
49779: LD_VAR 0 4
49783: PPUSH
49784: LD_INT 20
49786: PPUSH
49787: CALL 41794 0 4
49791: PUSH
49792: LD_INT 4
49794: ARRAY
49795: IFFALSE 49799
// exit ;
49797: GO 49848
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49799: LD_VAR 0 2
49803: PUSH
49804: LD_INT 29
49806: PUSH
49807: LD_INT 30
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: IN
49814: PUSH
49815: LD_VAR 0 3
49819: PPUSH
49820: LD_VAR 0 4
49824: PPUSH
49825: LD_VAR 0 9
49829: PPUSH
49830: CALL_OW 440
49834: NOT
49835: AND
49836: IFFALSE 49840
// exit ;
49838: GO 49848
// result := true ;
49840: LD_ADDR_VAR 0 6
49844: PUSH
49845: LD_INT 1
49847: ST_TO_ADDR
// end ;
49848: LD_VAR 0 6
49852: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49853: LD_INT 0
49855: PPUSH
49856: PPUSH
49857: PPUSH
49858: PPUSH
49859: PPUSH
49860: PPUSH
49861: PPUSH
49862: PPUSH
49863: PPUSH
49864: PPUSH
49865: PPUSH
49866: PPUSH
49867: PPUSH
49868: PPUSH
49869: PPUSH
49870: PPUSH
49871: PPUSH
49872: PPUSH
49873: PPUSH
49874: PPUSH
49875: PPUSH
49876: PPUSH
49877: PPUSH
49878: PPUSH
49879: PPUSH
49880: PPUSH
49881: PPUSH
49882: PPUSH
49883: PPUSH
49884: PPUSH
49885: PPUSH
49886: PPUSH
49887: PPUSH
49888: PPUSH
49889: PPUSH
49890: PPUSH
49891: PPUSH
49892: PPUSH
49893: PPUSH
49894: PPUSH
49895: PPUSH
49896: PPUSH
49897: PPUSH
49898: PPUSH
49899: PPUSH
49900: PPUSH
49901: PPUSH
49902: PPUSH
49903: PPUSH
49904: PPUSH
49905: PPUSH
49906: PPUSH
49907: PPUSH
49908: PPUSH
49909: PPUSH
49910: PPUSH
49911: PPUSH
49912: PPUSH
// result = [ ] ;
49913: LD_ADDR_VAR 0 7
49917: PUSH
49918: EMPTY
49919: ST_TO_ADDR
// temp_list = [ ] ;
49920: LD_ADDR_VAR 0 9
49924: PUSH
49925: EMPTY
49926: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49927: LD_VAR 0 4
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: LD_INT 2
49940: PUSH
49941: LD_INT 3
49943: PUSH
49944: LD_INT 4
49946: PUSH
49947: LD_INT 5
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: IN
49958: NOT
49959: PUSH
49960: LD_VAR 0 1
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: IN
49975: PUSH
49976: LD_VAR 0 5
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: LD_INT 3
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: LIST
49994: IN
49995: NOT
49996: AND
49997: OR
49998: IFFALSE 50002
// exit ;
50000: GO 68393
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50002: LD_VAR 0 1
50006: PUSH
50007: LD_INT 6
50009: PUSH
50010: LD_INT 7
50012: PUSH
50013: LD_INT 8
50015: PUSH
50016: LD_INT 13
50018: PUSH
50019: LD_INT 12
50021: PUSH
50022: LD_INT 15
50024: PUSH
50025: LD_INT 11
50027: PUSH
50028: LD_INT 14
50030: PUSH
50031: LD_INT 10
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: IN
50045: IFFALSE 50055
// btype = b_lab ;
50047: LD_ADDR_VAR 0 1
50051: PUSH
50052: LD_INT 6
50054: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50055: LD_VAR 0 6
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: LIST
50073: IN
50074: NOT
50075: PUSH
50076: LD_VAR 0 1
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: LD_INT 2
50089: PUSH
50090: LD_INT 3
50092: PUSH
50093: LD_INT 6
50095: PUSH
50096: LD_INT 36
50098: PUSH
50099: LD_INT 4
50101: PUSH
50102: LD_INT 5
50104: PUSH
50105: LD_INT 31
50107: PUSH
50108: LD_INT 32
50110: PUSH
50111: LD_INT 33
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: IN
50127: NOT
50128: PUSH
50129: LD_VAR 0 6
50133: PUSH
50134: LD_INT 1
50136: EQUAL
50137: AND
50138: OR
50139: PUSH
50140: LD_VAR 0 1
50144: PUSH
50145: LD_INT 2
50147: PUSH
50148: LD_INT 3
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: IN
50155: NOT
50156: PUSH
50157: LD_VAR 0 6
50161: PUSH
50162: LD_INT 2
50164: EQUAL
50165: AND
50166: OR
50167: IFFALSE 50177
// mode = 0 ;
50169: LD_ADDR_VAR 0 6
50173: PUSH
50174: LD_INT 0
50176: ST_TO_ADDR
// case mode of 0 :
50177: LD_VAR 0 6
50181: PUSH
50182: LD_INT 0
50184: DOUBLE
50185: EQUAL
50186: IFTRUE 50190
50188: GO 61643
50190: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50191: LD_ADDR_VAR 0 11
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: LD_INT 2
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: LD_INT 2
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: LD_INT 2
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: LD_INT 2
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: LD_INT 3
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: LD_INT 3
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50384: LD_ADDR_VAR 0 12
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: NEG
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 2
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 2
50507: NEG
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 2
50518: NEG
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 2
50530: NEG
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 3
50541: NEG
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 3
50552: NEG
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50580: LD_ADDR_VAR 0 13
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 2
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: LD_INT 2
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: LD_INT 2
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: NEG
50716: PUSH
50717: LD_INT 2
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 2
50727: NEG
50728: PUSH
50729: LD_INT 3
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 3
50739: NEG
50740: PUSH
50741: LD_INT 2
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 3
50751: NEG
50752: PUSH
50753: LD_INT 3
50755: NEG
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50779: LD_ADDR_VAR 0 14
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: LD_INT 2
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: LD_INT 2
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: LD_INT 2
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: LD_INT 2
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: LD_INT 3
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: LD_INT 3
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: LD_INT 2
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50975: LD_ADDR_VAR 0 15
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: LD_INT 1
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: LD_INT 1
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 2
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 2
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: NEG
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 2
51109: NEG
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: LD_INT 1
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 3
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 3
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51168: LD_ADDR_VAR 0 16
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: LD_INT 2
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 2
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 2
51291: NEG
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 2
51303: NEG
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 3
51315: PUSH
51316: LD_INT 2
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 3
51325: PUSH
51326: LD_INT 3
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: LD_INT 3
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51361: LD_ADDR_VAR 0 17
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: LD_INT 2
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 2
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 2
51496: PUSH
51497: LD_INT 2
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: LD_INT 2
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 2
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 2
51537: NEG
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 2
51548: NEG
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: LD_INT 2
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51591: LD_ADDR_VAR 0 18
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 2
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 2
51726: PUSH
51727: LD_INT 2
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: LD_INT 2
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 2
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 2
51778: NEG
51779: PUSH
51780: LD_INT 1
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 2
51790: NEG
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51821: LD_ADDR_VAR 0 19
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: LD_INT 2
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: LD_INT 2
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 2
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 2
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 2
51956: PUSH
51957: LD_INT 2
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: LD_INT 2
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: LD_INT 2
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: NEG
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 2
52020: NEG
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52051: LD_ADDR_VAR 0 20
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: NEG
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: LD_INT 2
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 2
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 2
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 2
52186: PUSH
52187: LD_INT 2
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 2
52250: NEG
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52281: LD_ADDR_VAR 0 21
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 2
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 2
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 2
52416: PUSH
52417: LD_INT 2
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: LD_INT 2
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 2
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 2
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52511: LD_ADDR_VAR 0 22
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 1
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 0
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 1
52569: NEG
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 2
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 2
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: PUSH
52647: LD_INT 2
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: LD_INT 2
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: LD_INT 2
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 2
52698: NEG
52699: PUSH
52700: LD_INT 1
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 2
52710: NEG
52711: PUSH
52712: LD_INT 2
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52741: LD_ADDR_VAR 0 23
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: LD_INT 2
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: LD_INT 2
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: LD_INT 2
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: LD_INT 2
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 2
52928: NEG
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 2
52940: NEG
52941: PUSH
52942: LD_INT 2
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 2
52952: NEG
52953: PUSH
52954: LD_INT 3
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: LD_INT 3
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: LD_INT 2
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53021: LD_ADDR_VAR 0 24
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: NEG
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: LD_INT 2
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 2
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 2
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 2
53156: PUSH
53157: LD_INT 2
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 2
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 2
53197: NEG
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 2
53208: NEG
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 2
53220: NEG
53221: PUSH
53222: LD_INT 2
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: LD_INT 2
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 3
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 3
53264: PUSH
53265: LD_INT 2
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53297: LD_ADDR_VAR 0 25
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: PUSH
53433: LD_INT 2
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: NEG
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 2
53484: NEG
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: NEG
53497: PUSH
53498: LD_INT 2
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 3
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 3
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: LD_INT 3
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: LD_INT 3
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53571: LD_ADDR_VAR 0 26
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 2
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 2
53706: PUSH
53707: LD_INT 2
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: LD_INT 2
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: LD_INT 2
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 2
53747: NEG
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 2
53758: NEG
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 2
53770: NEG
53771: PUSH
53772: LD_INT 2
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 2
53782: PUSH
53783: LD_INT 3
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: PUSH
53793: LD_INT 3
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53847: LD_ADDR_VAR 0 27
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 2
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 2
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: LD_INT 2
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: NEG
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 2
54046: NEG
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 2
54069: NEG
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 3
54080: NEG
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 3
54092: NEG
54093: PUSH
54094: LD_INT 2
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54127: LD_ADDR_VAR 0 28
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: NEG
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: LD_INT 2
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 2
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 2
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: LD_INT 2
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 2
54326: NEG
54327: PUSH
54328: LD_INT 2
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 2
54338: NEG
54339: PUSH
54340: LD_INT 3
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: LD_INT 3
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 3
54362: NEG
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 3
54374: NEG
54375: PUSH
54376: LD_INT 2
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54409: LD_ADDR_VAR 0 29
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: LD_INT 2
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: LD_INT 2
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: LD_INT 2
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: LD_INT 2
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: NEG
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 2
54575: NEG
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: LD_INT 2
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: LD_INT 3
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 2
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 3
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: LD_INT 3
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 3
54653: NEG
54654: PUSH
54655: LD_INT 2
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54688: LD_ADDR_VAR 0 30
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: LD_INT 1
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: NEG
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: LD_INT 2
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: LD_INT 2
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 2
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 2
54813: PUSH
54814: LD_INT 1
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 2
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 2
54854: NEG
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: LD_INT 3
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 3
54900: PUSH
54901: LD_INT 2
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: PUSH
54911: LD_INT 3
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 3
54931: NEG
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54966: LD_ADDR_VAR 0 31
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: LD_INT 2
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 2
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: PUSH
55091: LD_INT 2
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: LD_INT 2
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 2
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 2
55143: NEG
55144: PUSH
55145: LD_INT 2
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 2
55155: NEG
55156: PUSH
55157: LD_INT 3
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 2
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 3
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: LD_INT 3
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: LD_INT 2
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 3
55209: NEG
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55244: LD_ADDR_VAR 0 32
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 2
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 2
55410: NEG
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 2
55421: NEG
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: LD_INT 3
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 3
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 2
55466: PUSH
55467: LD_INT 3
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 3
55487: NEG
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55522: LD_ADDR_VAR 0 33
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: LD_INT 1
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: PUSH
55561: LD_INT 1
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 2
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 2
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 2
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 2
55700: NEG
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 2
55712: NEG
55713: PUSH
55714: LD_INT 3
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 2
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 3
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: LD_INT 3
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: LD_INT 2
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 3
55766: NEG
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55801: LD_ADDR_VAR 0 34
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: LD_INT 2
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: LD_INT 2
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 2
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 2
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: LD_INT 2
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: NEG
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 2
55957: NEG
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 2
55980: NEG
55981: PUSH
55982: LD_INT 2
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: LD_INT 3
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: LD_INT 2
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 3
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: LD_INT 3
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 3
56046: NEG
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56081: LD_ADDR_VAR 0 35
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 2
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 2
56172: NEG
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56193: LD_ADDR_VAR 0 36
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: LD_INT 2
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: LD_INT 2
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56305: LD_ADDR_VAR 0 37
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: NEG
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56417: LD_ADDR_VAR 0 38
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: NEG
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: NEG
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56529: LD_ADDR_VAR 0 39
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: LD_INT 2
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56641: LD_ADDR_VAR 0 40
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56753: LD_ADDR_VAR 0 41
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: LD_INT 0
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: LD_INT 2
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 1
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 2
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 2
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 2
56877: PUSH
56878: LD_INT 2
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: LD_INT 2
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: NEG
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: NEG
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 2
56931: NEG
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 2
56943: NEG
56944: PUSH
56945: LD_INT 3
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 2
56955: PUSH
56956: LD_INT 1
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 3
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 3
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 3
56986: PUSH
56987: LD_INT 2
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 3
56996: PUSH
56997: LD_INT 3
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 2
57006: PUSH
57007: LD_INT 3
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 3
57027: NEG
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 3
57038: NEG
57039: PUSH
57040: LD_INT 1
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 3
57050: NEG
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 3
57062: NEG
57063: PUSH
57064: LD_INT 3
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57103: LD_ADDR_VAR 0 42
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: LD_INT 0
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: NEG
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: LD_INT 2
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: LD_INT 2
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 2
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 2
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: LD_INT 2
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: LD_INT 2
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 2
57269: NEG
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 2
57281: NEG
57282: PUSH
57283: LD_INT 2
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 2
57293: NEG
57294: PUSH
57295: LD_INT 3
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: LD_INT 3
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: LD_INT 3
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: LD_INT 2
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 3
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 3
57349: PUSH
57350: LD_INT 3
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 2
57359: PUSH
57360: LD_INT 3
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 1
57369: PUSH
57370: LD_INT 3
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: LD_INT 3
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 3
57400: NEG
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 3
57412: NEG
57413: PUSH
57414: LD_INT 3
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57453: LD_ADDR_VAR 0 43
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: LD_INT 2
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: LD_INT 2
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: LD_INT 1
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 2
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: LD_INT 2
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: LD_INT 2
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 2
57619: NEG
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 2
57630: NEG
57631: PUSH
57632: LD_INT 1
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: LD_INT 3
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: LD_INT 3
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 1
57665: PUSH
57666: LD_INT 2
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 2
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 3
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 3
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: LD_INT 3
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: LD_INT 3
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: LD_INT 2
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 2
57738: NEG
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 3
57749: NEG
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 3
57760: NEG
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57801: LD_ADDR_VAR 0 44
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 1
57870: NEG
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: LD_INT 2
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 2
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 2
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 2
57925: PUSH
57926: LD_INT 2
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: LD_INT 2
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: NEG
57946: PUSH
57947: LD_INT 1
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: LD_INT 0
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 2
57967: NEG
57968: PUSH
57969: LD_INT 1
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 2
57979: NEG
57980: PUSH
57981: LD_INT 2
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 2
57991: NEG
57992: PUSH
57993: LD_INT 3
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 2
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 3
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 3
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 3
58034: PUSH
58035: LD_INT 2
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 3
58044: PUSH
58045: LD_INT 3
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 2
58054: PUSH
58055: LD_INT 3
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 2
58064: NEG
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 3
58075: NEG
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 3
58086: NEG
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 3
58098: NEG
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 3
58110: NEG
58111: PUSH
58112: LD_INT 3
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58151: LD_ADDR_VAR 0 45
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: NEG
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: NEG
58233: PUSH
58234: LD_INT 2
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: LD_INT 2
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 2
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 2
58276: PUSH
58277: LD_INT 2
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: LD_INT 2
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: LD_INT 2
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: LD_INT 1
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 2
58317: NEG
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 2
58329: NEG
58330: PUSH
58331: LD_INT 2
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: LD_INT 3
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: LD_INT 3
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 0
58365: PUSH
58366: LD_INT 3
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: LD_INT 2
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 3
58387: PUSH
58388: LD_INT 2
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 3
58397: PUSH
58398: LD_INT 3
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: PUSH
58408: LD_INT 3
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 1
58417: PUSH
58418: LD_INT 3
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: LD_INT 3
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: LD_INT 2
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 3
58448: NEG
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 3
58460: NEG
58461: PUSH
58462: LD_INT 3
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58501: LD_ADDR_VAR 0 46
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 0
58549: PUSH
58550: LD_INT 1
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 1
58559: NEG
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: LD_INT 2
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: LD_INT 2
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: LD_INT 1
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 2
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 2
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 1
58636: PUSH
58637: LD_INT 2
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: LD_INT 2
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: LD_INT 1
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 2
58667: NEG
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: LD_INT 1
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: LD_INT 3
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: LD_INT 3
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: LD_INT 2
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 2
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 3
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 3
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: LD_INT 3
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: LD_INT 3
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 2
58786: NEG
58787: PUSH
58788: LD_INT 1
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 3
58797: NEG
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 3
58808: NEG
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58849: LD_ADDR_VAR 0 47
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 0
58866: PUSH
58867: LD_INT 1
58869: NEG
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 1
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 1
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 1
58907: NEG
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 1
58918: NEG
58919: PUSH
58920: LD_INT 1
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: LD_INT 2
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: LD_INT 2
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 2
58964: NEG
58965: PUSH
58966: LD_INT 1
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: LD_INT 2
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59000: LD_ADDR_VAR 0 48
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: LD_INT 1
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 1
59081: NEG
59082: PUSH
59083: LD_INT 2
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: LD_INT 2
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: LD_INT 1
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 2
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 2
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59147: LD_ADDR_VAR 0 49
59151: PUSH
59152: LD_INT 0
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 1
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: LD_INT 1
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: NEG
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 1
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 2
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 2
59249: PUSH
59250: LD_INT 1
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 2
59259: PUSH
59260: LD_INT 2
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: LD_INT 2
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59291: LD_ADDR_VAR 0 50
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: LD_INT 1
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: LD_INT 0
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 1
59329: PUSH
59330: LD_INT 1
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 1
59349: NEG
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 1
59360: NEG
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 2
59372: PUSH
59373: LD_INT 1
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 2
59382: PUSH
59383: LD_INT 2
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: LD_INT 2
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 2
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59435: LD_ADDR_VAR 0 51
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 1
59493: NEG
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: LD_INT 2
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: LD_INT 2
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 2
59547: NEG
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 2
59558: NEG
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59582: LD_ADDR_VAR 0 52
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 1
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: NEG
59664: PUSH
59665: LD_INT 2
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 2
59686: NEG
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 2
59697: NEG
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 2
59709: NEG
59710: PUSH
59711: LD_INT 2
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59733: LD_ADDR_VAR 0 53
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 1
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: LD_INT 1
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: LD_INT 2
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: LD_INT 2
59829: NEG
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 2
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 2
59858: PUSH
59859: LD_INT 1
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 2
59868: PUSH
59869: LD_INT 2
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 1
59878: PUSH
59879: LD_INT 2
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: LD_INT 2
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 2
59909: NEG
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 2
59920: NEG
59921: PUSH
59922: LD_INT 1
59924: NEG
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 2
59932: NEG
59933: PUSH
59934: LD_INT 2
59936: NEG
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59963: LD_ADDR_VAR 0 54
59967: PUSH
59968: LD_INT 0
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: LD_INT 1
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 1
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 0
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 1
60021: NEG
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: LD_INT 2
60048: NEG
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 0
60056: PUSH
60057: LD_INT 2
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: LD_INT 1
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 2
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 2
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 2
60098: PUSH
60099: LD_INT 2
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: LD_INT 2
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: LD_INT 2
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 2
60139: NEG
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 2
60150: NEG
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 2
60162: NEG
60163: PUSH
60164: LD_INT 2
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60193: LD_ADDR_VAR 0 55
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 1
60251: NEG
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: LD_INT 2
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 2
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 2
60328: PUSH
60329: LD_INT 2
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: LD_INT 2
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: LD_INT 2
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: LD_INT 1
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 2
60369: NEG
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 2
60380: NEG
60381: PUSH
60382: LD_INT 1
60384: NEG
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 2
60392: NEG
60393: PUSH
60394: LD_INT 2
60396: NEG
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60423: LD_ADDR_VAR 0 56
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 0
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 1
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 1
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 1
60492: NEG
60493: PUSH
60494: LD_INT 1
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 1
60504: NEG
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: LD_INT 2
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 2
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 2
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 2
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: PUSH
60569: LD_INT 2
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 2
60599: NEG
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 2
60610: NEG
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 2
60622: NEG
60623: PUSH
60624: LD_INT 2
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60653: LD_ADDR_VAR 0 57
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: LD_INT 0
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 1
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 1
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 0
60701: PUSH
60702: LD_INT 1
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 1
60711: NEG
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: LD_INT 1
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: NEG
60735: PUSH
60736: LD_INT 2
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: LD_INT 2
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: LD_INT 1
60760: NEG
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 2
60778: PUSH
60779: LD_INT 1
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 2
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: LD_INT 2
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: LD_INT 2
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: NEG
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 2
60829: NEG
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 2
60840: NEG
60841: PUSH
60842: LD_INT 1
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 2
60852: NEG
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60883: LD_ADDR_VAR 0 58
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 1
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: LD_INT 1
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: LD_INT 0
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 1
60952: NEG
60953: PUSH
60954: LD_INT 1
60956: NEG
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: LD_INT 2
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: LD_INT 2
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: PUSH
60988: LD_INT 1
60990: NEG
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 2
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 2
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 2
61018: PUSH
61019: LD_INT 2
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: PUSH
61029: LD_INT 2
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: LD_INT 2
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 1
61048: NEG
61049: PUSH
61050: LD_INT 1
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 2
61059: NEG
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 2
61070: NEG
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 2
61082: NEG
61083: PUSH
61084: LD_INT 2
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61113: LD_ADDR_VAR 0 59
61117: PUSH
61118: LD_INT 0
61120: PUSH
61121: LD_INT 0
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: LD_INT 1
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: LD_INT 0
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 1
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 0
61161: PUSH
61162: LD_INT 1
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 1
61182: NEG
61183: PUSH
61184: LD_INT 1
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61201: LD_ADDR_VAR 0 60
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 1
61239: PUSH
61240: LD_INT 1
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 1
61259: NEG
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61289: LD_ADDR_VAR 0 61
61293: PUSH
61294: LD_INT 0
61296: PUSH
61297: LD_INT 0
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: LD_INT 1
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: PUSH
61318: LD_INT 0
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 1
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: LD_INT 1
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: LD_INT 0
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 1
61358: NEG
61359: PUSH
61360: LD_INT 1
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61377: LD_ADDR_VAR 0 62
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 0
61394: PUSH
61395: LD_INT 1
61397: NEG
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: LD_INT 0
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 1
61415: PUSH
61416: LD_INT 1
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: LD_INT 1
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 1
61446: NEG
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61465: LD_ADDR_VAR 0 63
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 1
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 1
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 1
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 0
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: NEG
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61553: LD_ADDR_VAR 0 64
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 0
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 1
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 1
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 1
61622: NEG
61623: PUSH
61624: LD_INT 1
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: ST_TO_ADDR
// end ; 1 :
61641: GO 67538
61643: LD_INT 1
61645: DOUBLE
61646: EQUAL
61647: IFTRUE 61651
61649: GO 64274
61651: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61652: LD_ADDR_VAR 0 11
61656: PUSH
61657: LD_INT 1
61659: NEG
61660: PUSH
61661: LD_INT 3
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: LD_INT 3
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: LD_INT 2
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: LIST
61695: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61696: LD_ADDR_VAR 0 12
61700: PUSH
61701: LD_INT 2
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 3
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 3
61724: PUSH
61725: LD_INT 1
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: LIST
61736: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61737: LD_ADDR_VAR 0 13
61741: PUSH
61742: LD_INT 3
61744: PUSH
61745: LD_INT 2
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 3
61754: PUSH
61755: LD_INT 3
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 2
61764: PUSH
61765: LD_INT 3
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: LIST
61776: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61777: LD_ADDR_VAR 0 14
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: LD_INT 3
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: LD_INT 3
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: LD_INT 2
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: LIST
61817: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61818: LD_ADDR_VAR 0 15
61822: PUSH
61823: LD_INT 2
61825: NEG
61826: PUSH
61827: LD_INT 1
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 3
61836: NEG
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 3
61847: NEG
61848: PUSH
61849: LD_INT 1
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: LIST
61861: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61862: LD_ADDR_VAR 0 16
61866: PUSH
61867: LD_INT 2
61869: NEG
61870: PUSH
61871: LD_INT 3
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 3
61881: NEG
61882: PUSH
61883: LD_INT 2
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 3
61893: NEG
61894: PUSH
61895: LD_INT 3
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61908: LD_ADDR_VAR 0 17
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: LD_INT 3
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: LD_INT 3
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: PUSH
61939: LD_INT 2
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: LIST
61951: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61952: LD_ADDR_VAR 0 18
61956: PUSH
61957: LD_INT 2
61959: PUSH
61960: LD_INT 1
61962: NEG
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 3
61970: PUSH
61971: LD_INT 0
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 3
61980: PUSH
61981: LD_INT 1
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: LIST
61992: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61993: LD_ADDR_VAR 0 19
61997: PUSH
61998: LD_INT 3
62000: PUSH
62001: LD_INT 2
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 3
62010: PUSH
62011: LD_INT 3
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 2
62020: PUSH
62021: LD_INT 3
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: LIST
62032: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62033: LD_ADDR_VAR 0 20
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: LD_INT 3
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: LD_INT 3
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: LD_INT 2
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: LIST
62073: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62074: LD_ADDR_VAR 0 21
62078: PUSH
62079: LD_INT 2
62081: NEG
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 3
62092: NEG
62093: PUSH
62094: LD_INT 0
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 3
62103: NEG
62104: PUSH
62105: LD_INT 1
62107: NEG
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: LIST
62117: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62118: LD_ADDR_VAR 0 22
62122: PUSH
62123: LD_INT 2
62125: NEG
62126: PUSH
62127: LD_INT 3
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 3
62137: NEG
62138: PUSH
62139: LD_INT 2
62141: NEG
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 3
62149: NEG
62150: PUSH
62151: LD_INT 3
62153: NEG
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: LIST
62163: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62164: LD_ADDR_VAR 0 23
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: LD_INT 3
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 1
62182: NEG
62183: PUSH
62184: LD_INT 4
62186: NEG
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: PUSH
62195: LD_INT 3
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: LIST
62207: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62208: LD_ADDR_VAR 0 24
62212: PUSH
62213: LD_INT 3
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 3
62225: PUSH
62226: LD_INT 1
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 4
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: LIST
62248: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62249: LD_ADDR_VAR 0 25
62253: PUSH
62254: LD_INT 3
62256: PUSH
62257: LD_INT 3
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 4
62266: PUSH
62267: LD_INT 3
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 3
62276: PUSH
62277: LD_INT 4
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: LIST
62288: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62289: LD_ADDR_VAR 0 26
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: LD_INT 3
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: PUSH
62307: LD_INT 4
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 1
62316: NEG
62317: PUSH
62318: LD_INT 3
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: LIST
62329: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62330: LD_ADDR_VAR 0 27
62334: PUSH
62335: LD_INT 3
62337: NEG
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 3
62348: NEG
62349: PUSH
62350: LD_INT 1
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 4
62359: NEG
62360: PUSH
62361: LD_INT 1
62363: NEG
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: LIST
62373: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62374: LD_ADDR_VAR 0 28
62378: PUSH
62379: LD_INT 3
62381: NEG
62382: PUSH
62383: LD_INT 3
62385: NEG
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 3
62393: NEG
62394: PUSH
62395: LD_INT 4
62397: NEG
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 4
62405: NEG
62406: PUSH
62407: LD_INT 3
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: LIST
62419: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62420: LD_ADDR_VAR 0 29
62424: PUSH
62425: LD_INT 1
62427: NEG
62428: PUSH
62429: LD_INT 3
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: LD_INT 3
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 1
62450: PUSH
62451: LD_INT 2
62453: NEG
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 1
62461: NEG
62462: PUSH
62463: LD_INT 4
62465: NEG
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: LD_INT 4
62476: NEG
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 1
62484: PUSH
62485: LD_INT 3
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 1
62495: NEG
62496: PUSH
62497: LD_INT 5
62499: NEG
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: LD_INT 5
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 1
62518: PUSH
62519: LD_INT 4
62521: NEG
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 1
62529: NEG
62530: PUSH
62531: LD_INT 6
62533: NEG
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: LD_INT 6
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 1
62552: PUSH
62553: LD_INT 5
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62575: LD_ADDR_VAR 0 30
62579: PUSH
62580: LD_INT 2
62582: PUSH
62583: LD_INT 1
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 3
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 3
62603: PUSH
62604: LD_INT 1
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 3
62613: PUSH
62614: LD_INT 1
62616: NEG
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 4
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 4
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 4
62644: PUSH
62645: LD_INT 1
62647: NEG
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 5
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 5
62665: PUSH
62666: LD_INT 1
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 5
62675: PUSH
62676: LD_INT 1
62678: NEG
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 6
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 6
62696: PUSH
62697: LD_INT 1
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62718: LD_ADDR_VAR 0 31
62722: PUSH
62723: LD_INT 3
62725: PUSH
62726: LD_INT 2
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 3
62735: PUSH
62736: LD_INT 3
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: LD_INT 3
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 4
62755: PUSH
62756: LD_INT 3
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 4
62765: PUSH
62766: LD_INT 4
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 3
62775: PUSH
62776: LD_INT 4
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 5
62785: PUSH
62786: LD_INT 4
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 5
62795: PUSH
62796: LD_INT 5
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 4
62805: PUSH
62806: LD_INT 5
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 6
62815: PUSH
62816: LD_INT 5
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 6
62825: PUSH
62826: LD_INT 6
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 5
62835: PUSH
62836: LD_INT 6
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62857: LD_ADDR_VAR 0 32
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: LD_INT 3
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: LD_INT 3
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 1
62884: NEG
62885: PUSH
62886: LD_INT 2
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 1
62895: PUSH
62896: LD_INT 4
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 0
62905: PUSH
62906: LD_INT 4
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 1
62915: NEG
62916: PUSH
62917: LD_INT 3
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 1
62926: PUSH
62927: LD_INT 5
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 0
62936: PUSH
62937: LD_INT 5
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: LD_INT 4
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 1
62957: PUSH
62958: LD_INT 6
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 0
62967: PUSH
62968: LD_INT 6
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 1
62977: NEG
62978: PUSH
62979: LD_INT 5
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63000: LD_ADDR_VAR 0 33
63004: PUSH
63005: LD_INT 2
63007: NEG
63008: PUSH
63009: LD_INT 1
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 3
63018: NEG
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 3
63029: NEG
63030: PUSH
63031: LD_INT 1
63033: NEG
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 3
63041: NEG
63042: PUSH
63043: LD_INT 1
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 4
63052: NEG
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 4
63063: NEG
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 4
63075: NEG
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 5
63086: NEG
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 5
63097: NEG
63098: PUSH
63099: LD_INT 1
63101: NEG
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 5
63109: NEG
63110: PUSH
63111: LD_INT 1
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 6
63120: NEG
63121: PUSH
63122: LD_INT 0
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 6
63131: NEG
63132: PUSH
63133: LD_INT 1
63135: NEG
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63155: LD_ADDR_VAR 0 34
63159: PUSH
63160: LD_INT 2
63162: NEG
63163: PUSH
63164: LD_INT 3
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 3
63174: NEG
63175: PUSH
63176: LD_INT 2
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 3
63186: NEG
63187: PUSH
63188: LD_INT 3
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 3
63198: NEG
63199: PUSH
63200: LD_INT 4
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 4
63210: NEG
63211: PUSH
63212: LD_INT 3
63214: NEG
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 4
63222: NEG
63223: PUSH
63224: LD_INT 4
63226: NEG
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 4
63234: NEG
63235: PUSH
63236: LD_INT 5
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 5
63246: NEG
63247: PUSH
63248: LD_INT 4
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 5
63258: NEG
63259: PUSH
63260: LD_INT 5
63262: NEG
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 5
63270: NEG
63271: PUSH
63272: LD_INT 6
63274: NEG
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 6
63282: NEG
63283: PUSH
63284: LD_INT 5
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 6
63294: NEG
63295: PUSH
63296: LD_INT 6
63298: NEG
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63318: LD_ADDR_VAR 0 41
63322: PUSH
63323: LD_INT 0
63325: PUSH
63326: LD_INT 2
63328: NEG
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 1
63336: NEG
63337: PUSH
63338: LD_INT 3
63340: NEG
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 1
63348: PUSH
63349: LD_INT 2
63351: NEG
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: LIST
63361: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63362: LD_ADDR_VAR 0 42
63366: PUSH
63367: LD_INT 2
63369: PUSH
63370: LD_INT 0
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 2
63379: PUSH
63380: LD_INT 1
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 3
63390: PUSH
63391: LD_INT 1
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: LIST
63402: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63403: LD_ADDR_VAR 0 43
63407: PUSH
63408: LD_INT 2
63410: PUSH
63411: LD_INT 2
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 3
63420: PUSH
63421: LD_INT 2
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 2
63430: PUSH
63431: LD_INT 3
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: LIST
63442: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63443: LD_ADDR_VAR 0 44
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: LD_INT 2
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 1
63460: PUSH
63461: LD_INT 3
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 1
63470: NEG
63471: PUSH
63472: LD_INT 2
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: LIST
63483: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63484: LD_ADDR_VAR 0 45
63488: PUSH
63489: LD_INT 2
63491: NEG
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 2
63502: NEG
63503: PUSH
63504: LD_INT 1
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 3
63513: NEG
63514: PUSH
63515: LD_INT 1
63517: NEG
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: LIST
63527: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63528: LD_ADDR_VAR 0 46
63532: PUSH
63533: LD_INT 2
63535: NEG
63536: PUSH
63537: LD_INT 2
63539: NEG
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 2
63547: NEG
63548: PUSH
63549: LD_INT 3
63551: NEG
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 3
63559: NEG
63560: PUSH
63561: LD_INT 2
63563: NEG
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: LIST
63573: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63574: LD_ADDR_VAR 0 47
63578: PUSH
63579: LD_INT 2
63581: NEG
63582: PUSH
63583: LD_INT 3
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 1
63593: NEG
63594: PUSH
63595: LD_INT 3
63597: NEG
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63607: LD_ADDR_VAR 0 48
63611: PUSH
63612: LD_INT 1
63614: PUSH
63615: LD_INT 2
63617: NEG
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 2
63625: PUSH
63626: LD_INT 1
63628: NEG
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63638: LD_ADDR_VAR 0 49
63642: PUSH
63643: LD_INT 3
63645: PUSH
63646: LD_INT 1
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 3
63655: PUSH
63656: LD_INT 2
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63667: LD_ADDR_VAR 0 50
63671: PUSH
63672: LD_INT 2
63674: PUSH
63675: LD_INT 3
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 1
63684: PUSH
63685: LD_INT 3
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63696: LD_ADDR_VAR 0 51
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: LD_INT 2
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 2
63714: NEG
63715: PUSH
63716: LD_INT 1
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63727: LD_ADDR_VAR 0 52
63731: PUSH
63732: LD_INT 3
63734: NEG
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 3
63746: NEG
63747: PUSH
63748: LD_INT 2
63750: NEG
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63760: LD_ADDR_VAR 0 53
63764: PUSH
63765: LD_INT 1
63767: NEG
63768: PUSH
63769: LD_INT 3
63771: NEG
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: LD_INT 3
63782: NEG
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 1
63790: PUSH
63791: LD_INT 2
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: LIST
63803: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63804: LD_ADDR_VAR 0 54
63808: PUSH
63809: LD_INT 2
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 3
63822: PUSH
63823: LD_INT 0
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 3
63832: PUSH
63833: LD_INT 1
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: LIST
63844: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63845: LD_ADDR_VAR 0 55
63849: PUSH
63850: LD_INT 3
63852: PUSH
63853: LD_INT 2
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 3
63862: PUSH
63863: LD_INT 3
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: LD_INT 3
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: LIST
63884: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63885: LD_ADDR_VAR 0 56
63889: PUSH
63890: LD_INT 1
63892: PUSH
63893: LD_INT 3
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 0
63902: PUSH
63903: LD_INT 3
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 1
63912: NEG
63913: PUSH
63914: LD_INT 2
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: LIST
63925: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63926: LD_ADDR_VAR 0 57
63930: PUSH
63931: LD_INT 2
63933: NEG
63934: PUSH
63935: LD_INT 1
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 3
63944: NEG
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 3
63955: NEG
63956: PUSH
63957: LD_INT 1
63959: NEG
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: LIST
63969: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63970: LD_ADDR_VAR 0 58
63974: PUSH
63975: LD_INT 2
63977: NEG
63978: PUSH
63979: LD_INT 3
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 3
63989: NEG
63990: PUSH
63991: LD_INT 2
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 3
64001: NEG
64002: PUSH
64003: LD_INT 3
64005: NEG
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: LIST
64015: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64016: LD_ADDR_VAR 0 59
64020: PUSH
64021: LD_INT 1
64023: NEG
64024: PUSH
64025: LD_INT 2
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 0
64035: PUSH
64036: LD_INT 2
64038: NEG
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 1
64046: PUSH
64047: LD_INT 1
64049: NEG
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: LIST
64059: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64060: LD_ADDR_VAR 0 60
64064: PUSH
64065: LD_INT 1
64067: PUSH
64068: LD_INT 1
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 2
64078: PUSH
64079: LD_INT 0
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 2
64088: PUSH
64089: LD_INT 1
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: LIST
64100: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64101: LD_ADDR_VAR 0 61
64105: PUSH
64106: LD_INT 2
64108: PUSH
64109: LD_INT 1
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 2
64118: PUSH
64119: LD_INT 2
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 1
64128: PUSH
64129: LD_INT 2
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: LIST
64140: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64141: LD_ADDR_VAR 0 62
64145: PUSH
64146: LD_INT 1
64148: PUSH
64149: LD_INT 2
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: LD_INT 2
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 1
64168: NEG
64169: PUSH
64170: LD_INT 1
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: LIST
64181: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64182: LD_ADDR_VAR 0 63
64186: PUSH
64187: LD_INT 1
64189: NEG
64190: PUSH
64191: LD_INT 1
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 2
64200: NEG
64201: PUSH
64202: LD_INT 0
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 2
64211: NEG
64212: PUSH
64213: LD_INT 1
64215: NEG
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: LIST
64225: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64226: LD_ADDR_VAR 0 64
64230: PUSH
64231: LD_INT 1
64233: NEG
64234: PUSH
64235: LD_INT 2
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 2
64245: NEG
64246: PUSH
64247: LD_INT 1
64249: NEG
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 2
64257: NEG
64258: PUSH
64259: LD_INT 2
64261: NEG
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: LIST
64271: ST_TO_ADDR
// end ; 2 :
64272: GO 67538
64274: LD_INT 2
64276: DOUBLE
64277: EQUAL
64278: IFTRUE 64282
64280: GO 67537
64282: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64283: LD_ADDR_VAR 0 29
64287: PUSH
64288: LD_INT 4
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 4
64300: PUSH
64301: LD_INT 1
64303: NEG
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 5
64311: PUSH
64312: LD_INT 0
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 5
64321: PUSH
64322: LD_INT 1
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 4
64331: PUSH
64332: LD_INT 1
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 3
64341: PUSH
64342: LD_INT 0
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 3
64351: PUSH
64352: LD_INT 1
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 3
64362: PUSH
64363: LD_INT 2
64365: NEG
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 5
64373: PUSH
64374: LD_INT 2
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 3
64383: PUSH
64384: LD_INT 3
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 3
64393: PUSH
64394: LD_INT 2
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 4
64403: PUSH
64404: LD_INT 3
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 4
64413: PUSH
64414: LD_INT 4
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 3
64423: PUSH
64424: LD_INT 4
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 2
64433: PUSH
64434: LD_INT 3
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 2
64443: PUSH
64444: LD_INT 2
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 4
64453: PUSH
64454: LD_INT 2
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 2
64463: PUSH
64464: LD_INT 4
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: LD_INT 4
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 0
64483: PUSH
64484: LD_INT 3
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: LD_INT 4
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 1
64503: PUSH
64504: LD_INT 5
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: LD_INT 5
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: LD_INT 4
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 1
64534: NEG
64535: PUSH
64536: LD_INT 3
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 2
64545: PUSH
64546: LD_INT 5
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 2
64555: NEG
64556: PUSH
64557: LD_INT 3
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 3
64566: NEG
64567: PUSH
64568: LD_INT 0
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 3
64577: NEG
64578: PUSH
64579: LD_INT 1
64581: NEG
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 2
64589: NEG
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 2
64600: NEG
64601: PUSH
64602: LD_INT 1
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 3
64611: NEG
64612: PUSH
64613: LD_INT 1
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 4
64622: NEG
64623: PUSH
64624: LD_INT 0
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 4
64633: NEG
64634: PUSH
64635: LD_INT 1
64637: NEG
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 4
64645: NEG
64646: PUSH
64647: LD_INT 2
64649: NEG
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 2
64657: NEG
64658: PUSH
64659: LD_INT 2
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 4
64668: NEG
64669: PUSH
64670: LD_INT 4
64672: NEG
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 4
64680: NEG
64681: PUSH
64682: LD_INT 5
64684: NEG
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 3
64692: NEG
64693: PUSH
64694: LD_INT 4
64696: NEG
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 3
64704: NEG
64705: PUSH
64706: LD_INT 3
64708: NEG
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 4
64716: NEG
64717: PUSH
64718: LD_INT 3
64720: NEG
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 5
64728: NEG
64729: PUSH
64730: LD_INT 4
64732: NEG
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 5
64740: NEG
64741: PUSH
64742: LD_INT 5
64744: NEG
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 3
64752: NEG
64753: PUSH
64754: LD_INT 5
64756: NEG
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 5
64764: NEG
64765: PUSH
64766: LD_INT 3
64768: NEG
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64821: LD_ADDR_VAR 0 30
64825: PUSH
64826: LD_INT 4
64828: PUSH
64829: LD_INT 4
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 4
64838: PUSH
64839: LD_INT 3
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 5
64848: PUSH
64849: LD_INT 4
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 5
64858: PUSH
64859: LD_INT 5
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 4
64868: PUSH
64869: LD_INT 5
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 3
64878: PUSH
64879: LD_INT 4
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 3
64888: PUSH
64889: LD_INT 3
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 5
64898: PUSH
64899: LD_INT 3
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 3
64908: PUSH
64909: LD_INT 5
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: LD_INT 3
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 0
64928: PUSH
64929: LD_INT 2
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 1
64938: PUSH
64939: LD_INT 3
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 1
64948: PUSH
64949: LD_INT 4
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: LD_INT 4
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 1
64968: NEG
64969: PUSH
64970: LD_INT 3
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 1
64979: NEG
64980: PUSH
64981: LD_INT 2
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 2
64990: PUSH
64991: LD_INT 4
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 2
65000: NEG
65001: PUSH
65002: LD_INT 2
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 4
65011: NEG
65012: PUSH
65013: LD_INT 0
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 4
65022: NEG
65023: PUSH
65024: LD_INT 1
65026: NEG
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 3
65034: NEG
65035: PUSH
65036: LD_INT 0
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 3
65045: NEG
65046: PUSH
65047: LD_INT 1
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 4
65056: NEG
65057: PUSH
65058: LD_INT 1
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 5
65067: NEG
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 5
65078: NEG
65079: PUSH
65080: LD_INT 1
65082: NEG
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 5
65090: NEG
65091: PUSH
65092: LD_INT 2
65094: NEG
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 3
65102: NEG
65103: PUSH
65104: LD_INT 2
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 3
65113: NEG
65114: PUSH
65115: LD_INT 3
65117: NEG
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 3
65125: NEG
65126: PUSH
65127: LD_INT 4
65129: NEG
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 2
65137: NEG
65138: PUSH
65139: LD_INT 3
65141: NEG
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 2
65149: NEG
65150: PUSH
65151: LD_INT 2
65153: NEG
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 3
65161: NEG
65162: PUSH
65163: LD_INT 2
65165: NEG
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 4
65173: NEG
65174: PUSH
65175: LD_INT 3
65177: NEG
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 4
65185: NEG
65186: PUSH
65187: LD_INT 4
65189: NEG
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 2
65197: NEG
65198: PUSH
65199: LD_INT 4
65201: NEG
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 4
65209: NEG
65210: PUSH
65211: LD_INT 2
65213: NEG
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 0
65221: PUSH
65222: LD_INT 4
65224: NEG
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 0
65232: PUSH
65233: LD_INT 5
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 1
65243: PUSH
65244: LD_INT 4
65246: NEG
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 1
65254: PUSH
65255: LD_INT 3
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: LD_INT 3
65268: NEG
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 1
65276: NEG
65277: PUSH
65278: LD_INT 4
65280: NEG
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 1
65288: NEG
65289: PUSH
65290: LD_INT 5
65292: NEG
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 2
65300: PUSH
65301: LD_INT 3
65303: NEG
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 2
65311: NEG
65312: PUSH
65313: LD_INT 5
65315: NEG
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65368: LD_ADDR_VAR 0 31
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: LD_INT 4
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: LD_INT 3
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 1
65395: PUSH
65396: LD_INT 4
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: LD_INT 5
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 0
65415: PUSH
65416: LD_INT 5
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 1
65425: NEG
65426: PUSH
65427: LD_INT 4
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 1
65436: NEG
65437: PUSH
65438: LD_INT 3
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 2
65447: PUSH
65448: LD_INT 5
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 2
65457: NEG
65458: PUSH
65459: LD_INT 3
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 3
65468: NEG
65469: PUSH
65470: LD_INT 0
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 3
65479: NEG
65480: PUSH
65481: LD_INT 1
65483: NEG
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 2
65491: NEG
65492: PUSH
65493: LD_INT 0
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 2
65502: NEG
65503: PUSH
65504: LD_INT 1
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 3
65513: NEG
65514: PUSH
65515: LD_INT 1
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 4
65524: NEG
65525: PUSH
65526: LD_INT 0
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 4
65535: NEG
65536: PUSH
65537: LD_INT 1
65539: NEG
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 4
65547: NEG
65548: PUSH
65549: LD_INT 2
65551: NEG
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 2
65559: NEG
65560: PUSH
65561: LD_INT 2
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 4
65570: NEG
65571: PUSH
65572: LD_INT 4
65574: NEG
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 4
65582: NEG
65583: PUSH
65584: LD_INT 5
65586: NEG
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 3
65594: NEG
65595: PUSH
65596: LD_INT 4
65598: NEG
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 3
65606: NEG
65607: PUSH
65608: LD_INT 3
65610: NEG
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 4
65618: NEG
65619: PUSH
65620: LD_INT 3
65622: NEG
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 5
65630: NEG
65631: PUSH
65632: LD_INT 4
65634: NEG
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 5
65642: NEG
65643: PUSH
65644: LD_INT 5
65646: NEG
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 3
65654: NEG
65655: PUSH
65656: LD_INT 5
65658: NEG
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 5
65666: NEG
65667: PUSH
65668: LD_INT 3
65670: NEG
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 0
65678: PUSH
65679: LD_INT 3
65681: NEG
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 0
65689: PUSH
65690: LD_INT 4
65692: NEG
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 1
65700: PUSH
65701: LD_INT 3
65703: NEG
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 1
65711: PUSH
65712: LD_INT 2
65714: NEG
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 0
65722: PUSH
65723: LD_INT 2
65725: NEG
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 1
65733: NEG
65734: PUSH
65735: LD_INT 3
65737: NEG
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 1
65745: NEG
65746: PUSH
65747: LD_INT 4
65749: NEG
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 2
65757: PUSH
65758: LD_INT 2
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 2
65768: NEG
65769: PUSH
65770: LD_INT 4
65772: NEG
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 4
65780: PUSH
65781: LD_INT 0
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 4
65790: PUSH
65791: LD_INT 1
65793: NEG
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 5
65801: PUSH
65802: LD_INT 0
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 5
65811: PUSH
65812: LD_INT 1
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 4
65821: PUSH
65822: LD_INT 1
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 3
65831: PUSH
65832: LD_INT 0
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 3
65841: PUSH
65842: LD_INT 1
65844: NEG
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 3
65852: PUSH
65853: LD_INT 2
65855: NEG
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 5
65863: PUSH
65864: LD_INT 2
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65918: LD_ADDR_VAR 0 32
65922: PUSH
65923: LD_INT 4
65925: NEG
65926: PUSH
65927: LD_INT 0
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 4
65936: NEG
65937: PUSH
65938: LD_INT 1
65940: NEG
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 3
65948: NEG
65949: PUSH
65950: LD_INT 0
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 3
65959: NEG
65960: PUSH
65961: LD_INT 1
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 4
65970: NEG
65971: PUSH
65972: LD_INT 1
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 5
65981: NEG
65982: PUSH
65983: LD_INT 0
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 5
65992: NEG
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 5
66004: NEG
66005: PUSH
66006: LD_INT 2
66008: NEG
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 3
66016: NEG
66017: PUSH
66018: LD_INT 2
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 3
66027: NEG
66028: PUSH
66029: LD_INT 3
66031: NEG
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 3
66039: NEG
66040: PUSH
66041: LD_INT 4
66043: NEG
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 2
66051: NEG
66052: PUSH
66053: LD_INT 3
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 2
66063: NEG
66064: PUSH
66065: LD_INT 2
66067: NEG
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 3
66075: NEG
66076: PUSH
66077: LD_INT 2
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 4
66087: NEG
66088: PUSH
66089: LD_INT 3
66091: NEG
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 4
66099: NEG
66100: PUSH
66101: LD_INT 4
66103: NEG
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 2
66111: NEG
66112: PUSH
66113: LD_INT 4
66115: NEG
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 4
66123: NEG
66124: PUSH
66125: LD_INT 2
66127: NEG
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 0
66135: PUSH
66136: LD_INT 4
66138: NEG
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 0
66146: PUSH
66147: LD_INT 5
66149: NEG
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 1
66157: PUSH
66158: LD_INT 4
66160: NEG
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 1
66168: PUSH
66169: LD_INT 3
66171: NEG
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 0
66179: PUSH
66180: LD_INT 3
66182: NEG
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 1
66190: NEG
66191: PUSH
66192: LD_INT 4
66194: NEG
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 1
66202: NEG
66203: PUSH
66204: LD_INT 5
66206: NEG
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 2
66214: PUSH
66215: LD_INT 3
66217: NEG
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 2
66225: NEG
66226: PUSH
66227: LD_INT 5
66229: NEG
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 3
66237: PUSH
66238: LD_INT 0
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 3
66247: PUSH
66248: LD_INT 1
66250: NEG
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 4
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 4
66268: PUSH
66269: LD_INT 1
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 3
66278: PUSH
66279: LD_INT 1
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 2
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 2
66298: PUSH
66299: LD_INT 1
66301: NEG
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 2
66309: PUSH
66310: LD_INT 2
66312: NEG
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 4
66320: PUSH
66321: LD_INT 2
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 4
66330: PUSH
66331: LD_INT 4
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 4
66340: PUSH
66341: LD_INT 3
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 5
66350: PUSH
66351: LD_INT 4
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 5
66360: PUSH
66361: LD_INT 5
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 4
66370: PUSH
66371: LD_INT 5
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 3
66380: PUSH
66381: LD_INT 4
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 3
66390: PUSH
66391: LD_INT 3
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 5
66400: PUSH
66401: LD_INT 3
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 3
66410: PUSH
66411: LD_INT 5
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66465: LD_ADDR_VAR 0 33
66469: PUSH
66470: LD_INT 4
66472: NEG
66473: PUSH
66474: LD_INT 4
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 4
66484: NEG
66485: PUSH
66486: LD_INT 5
66488: NEG
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 3
66496: NEG
66497: PUSH
66498: LD_INT 4
66500: NEG
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 3
66508: NEG
66509: PUSH
66510: LD_INT 3
66512: NEG
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 4
66520: NEG
66521: PUSH
66522: LD_INT 3
66524: NEG
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 5
66532: NEG
66533: PUSH
66534: LD_INT 4
66536: NEG
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 5
66544: NEG
66545: PUSH
66546: LD_INT 5
66548: NEG
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 3
66556: NEG
66557: PUSH
66558: LD_INT 5
66560: NEG
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 5
66568: NEG
66569: PUSH
66570: LD_INT 3
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 0
66580: PUSH
66581: LD_INT 3
66583: NEG
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 0
66591: PUSH
66592: LD_INT 4
66594: NEG
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 1
66602: PUSH
66603: LD_INT 3
66605: NEG
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 1
66613: PUSH
66614: LD_INT 2
66616: NEG
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 0
66624: PUSH
66625: LD_INT 2
66627: NEG
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 1
66635: NEG
66636: PUSH
66637: LD_INT 3
66639: NEG
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 1
66647: NEG
66648: PUSH
66649: LD_INT 4
66651: NEG
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 2
66659: PUSH
66660: LD_INT 2
66662: NEG
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 2
66670: NEG
66671: PUSH
66672: LD_INT 4
66674: NEG
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 4
66682: PUSH
66683: LD_INT 0
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 4
66692: PUSH
66693: LD_INT 1
66695: NEG
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 5
66703: PUSH
66704: LD_INT 0
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 5
66713: PUSH
66714: LD_INT 1
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 4
66723: PUSH
66724: LD_INT 1
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 3
66733: PUSH
66734: LD_INT 0
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 3
66743: PUSH
66744: LD_INT 1
66746: NEG
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 3
66754: PUSH
66755: LD_INT 2
66757: NEG
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 5
66765: PUSH
66766: LD_INT 2
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 3
66775: PUSH
66776: LD_INT 3
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 3
66785: PUSH
66786: LD_INT 2
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 4
66795: PUSH
66796: LD_INT 3
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 4
66805: PUSH
66806: LD_INT 4
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 3
66815: PUSH
66816: LD_INT 4
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 2
66825: PUSH
66826: LD_INT 3
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 2
66835: PUSH
66836: LD_INT 2
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 4
66845: PUSH
66846: LD_INT 2
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 2
66855: PUSH
66856: LD_INT 4
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 0
66865: PUSH
66866: LD_INT 4
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 0
66875: PUSH
66876: LD_INT 3
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 1
66885: PUSH
66886: LD_INT 4
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 1
66895: PUSH
66896: LD_INT 5
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: LD_INT 5
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 1
66915: NEG
66916: PUSH
66917: LD_INT 4
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 1
66926: NEG
66927: PUSH
66928: LD_INT 3
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 2
66937: PUSH
66938: LD_INT 5
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 2
66947: NEG
66948: PUSH
66949: LD_INT 3
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67003: LD_ADDR_VAR 0 34
67007: PUSH
67008: LD_INT 0
67010: PUSH
67011: LD_INT 4
67013: NEG
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 0
67021: PUSH
67022: LD_INT 5
67024: NEG
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 1
67032: PUSH
67033: LD_INT 4
67035: NEG
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 1
67043: PUSH
67044: LD_INT 3
67046: NEG
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 0
67054: PUSH
67055: LD_INT 3
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 1
67065: NEG
67066: PUSH
67067: LD_INT 4
67069: NEG
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 1
67077: NEG
67078: PUSH
67079: LD_INT 5
67081: NEG
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 2
67089: PUSH
67090: LD_INT 3
67092: NEG
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 2
67100: NEG
67101: PUSH
67102: LD_INT 5
67104: NEG
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 3
67112: PUSH
67113: LD_INT 0
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 3
67122: PUSH
67123: LD_INT 1
67125: NEG
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 4
67133: PUSH
67134: LD_INT 0
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 4
67143: PUSH
67144: LD_INT 1
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 3
67153: PUSH
67154: LD_INT 1
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 2
67163: PUSH
67164: LD_INT 0
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 2
67173: PUSH
67174: LD_INT 1
67176: NEG
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 2
67184: PUSH
67185: LD_INT 2
67187: NEG
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 4
67195: PUSH
67196: LD_INT 2
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 4
67205: PUSH
67206: LD_INT 4
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 4
67215: PUSH
67216: LD_INT 3
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 5
67225: PUSH
67226: LD_INT 4
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 5
67235: PUSH
67236: LD_INT 5
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 4
67245: PUSH
67246: LD_INT 5
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 3
67255: PUSH
67256: LD_INT 4
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 3
67265: PUSH
67266: LD_INT 3
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 5
67275: PUSH
67276: LD_INT 3
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 3
67285: PUSH
67286: LD_INT 5
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 0
67295: PUSH
67296: LD_INT 3
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 0
67305: PUSH
67306: LD_INT 2
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 1
67315: PUSH
67316: LD_INT 3
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 1
67325: PUSH
67326: LD_INT 4
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 0
67335: PUSH
67336: LD_INT 4
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 1
67345: NEG
67346: PUSH
67347: LD_INT 3
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 1
67356: NEG
67357: PUSH
67358: LD_INT 2
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 2
67367: PUSH
67368: LD_INT 4
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 2
67377: NEG
67378: PUSH
67379: LD_INT 2
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 4
67388: NEG
67389: PUSH
67390: LD_INT 0
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 4
67399: NEG
67400: PUSH
67401: LD_INT 1
67403: NEG
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 3
67411: NEG
67412: PUSH
67413: LD_INT 0
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 3
67422: NEG
67423: PUSH
67424: LD_INT 1
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 4
67433: NEG
67434: PUSH
67435: LD_INT 1
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 5
67444: NEG
67445: PUSH
67446: LD_INT 0
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 5
67455: NEG
67456: PUSH
67457: LD_INT 1
67459: NEG
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 5
67467: NEG
67468: PUSH
67469: LD_INT 2
67471: NEG
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 3
67479: NEG
67480: PUSH
67481: LD_INT 2
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: ST_TO_ADDR
// end ; end ;
67535: GO 67538
67537: POP
// case btype of b_depot , b_warehouse :
67538: LD_VAR 0 1
67542: PUSH
67543: LD_INT 0
67545: DOUBLE
67546: EQUAL
67547: IFTRUE 67557
67549: LD_INT 1
67551: DOUBLE
67552: EQUAL
67553: IFTRUE 67557
67555: GO 67758
67557: POP
// case nation of nation_american :
67558: LD_VAR 0 5
67562: PUSH
67563: LD_INT 1
67565: DOUBLE
67566: EQUAL
67567: IFTRUE 67571
67569: GO 67627
67571: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67572: LD_ADDR_VAR 0 9
67576: PUSH
67577: LD_VAR 0 11
67581: PUSH
67582: LD_VAR 0 12
67586: PUSH
67587: LD_VAR 0 13
67591: PUSH
67592: LD_VAR 0 14
67596: PUSH
67597: LD_VAR 0 15
67601: PUSH
67602: LD_VAR 0 16
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: PUSH
67615: LD_VAR 0 4
67619: PUSH
67620: LD_INT 1
67622: PLUS
67623: ARRAY
67624: ST_TO_ADDR
67625: GO 67756
67627: LD_INT 2
67629: DOUBLE
67630: EQUAL
67631: IFTRUE 67635
67633: GO 67691
67635: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67636: LD_ADDR_VAR 0 9
67640: PUSH
67641: LD_VAR 0 17
67645: PUSH
67646: LD_VAR 0 18
67650: PUSH
67651: LD_VAR 0 19
67655: PUSH
67656: LD_VAR 0 20
67660: PUSH
67661: LD_VAR 0 21
67665: PUSH
67666: LD_VAR 0 22
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: PUSH
67679: LD_VAR 0 4
67683: PUSH
67684: LD_INT 1
67686: PLUS
67687: ARRAY
67688: ST_TO_ADDR
67689: GO 67756
67691: LD_INT 3
67693: DOUBLE
67694: EQUAL
67695: IFTRUE 67699
67697: GO 67755
67699: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67700: LD_ADDR_VAR 0 9
67704: PUSH
67705: LD_VAR 0 23
67709: PUSH
67710: LD_VAR 0 24
67714: PUSH
67715: LD_VAR 0 25
67719: PUSH
67720: LD_VAR 0 26
67724: PUSH
67725: LD_VAR 0 27
67729: PUSH
67730: LD_VAR 0 28
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: PUSH
67743: LD_VAR 0 4
67747: PUSH
67748: LD_INT 1
67750: PLUS
67751: ARRAY
67752: ST_TO_ADDR
67753: GO 67756
67755: POP
67756: GO 68311
67758: LD_INT 2
67760: DOUBLE
67761: EQUAL
67762: IFTRUE 67772
67764: LD_INT 3
67766: DOUBLE
67767: EQUAL
67768: IFTRUE 67772
67770: GO 67828
67772: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67773: LD_ADDR_VAR 0 9
67777: PUSH
67778: LD_VAR 0 29
67782: PUSH
67783: LD_VAR 0 30
67787: PUSH
67788: LD_VAR 0 31
67792: PUSH
67793: LD_VAR 0 32
67797: PUSH
67798: LD_VAR 0 33
67802: PUSH
67803: LD_VAR 0 34
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: PUSH
67816: LD_VAR 0 4
67820: PUSH
67821: LD_INT 1
67823: PLUS
67824: ARRAY
67825: ST_TO_ADDR
67826: GO 68311
67828: LD_INT 16
67830: DOUBLE
67831: EQUAL
67832: IFTRUE 67890
67834: LD_INT 17
67836: DOUBLE
67837: EQUAL
67838: IFTRUE 67890
67840: LD_INT 18
67842: DOUBLE
67843: EQUAL
67844: IFTRUE 67890
67846: LD_INT 19
67848: DOUBLE
67849: EQUAL
67850: IFTRUE 67890
67852: LD_INT 22
67854: DOUBLE
67855: EQUAL
67856: IFTRUE 67890
67858: LD_INT 20
67860: DOUBLE
67861: EQUAL
67862: IFTRUE 67890
67864: LD_INT 21
67866: DOUBLE
67867: EQUAL
67868: IFTRUE 67890
67870: LD_INT 23
67872: DOUBLE
67873: EQUAL
67874: IFTRUE 67890
67876: LD_INT 24
67878: DOUBLE
67879: EQUAL
67880: IFTRUE 67890
67882: LD_INT 25
67884: DOUBLE
67885: EQUAL
67886: IFTRUE 67890
67888: GO 67946
67890: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67891: LD_ADDR_VAR 0 9
67895: PUSH
67896: LD_VAR 0 35
67900: PUSH
67901: LD_VAR 0 36
67905: PUSH
67906: LD_VAR 0 37
67910: PUSH
67911: LD_VAR 0 38
67915: PUSH
67916: LD_VAR 0 39
67920: PUSH
67921: LD_VAR 0 40
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: PUSH
67934: LD_VAR 0 4
67938: PUSH
67939: LD_INT 1
67941: PLUS
67942: ARRAY
67943: ST_TO_ADDR
67944: GO 68311
67946: LD_INT 6
67948: DOUBLE
67949: EQUAL
67950: IFTRUE 68002
67952: LD_INT 7
67954: DOUBLE
67955: EQUAL
67956: IFTRUE 68002
67958: LD_INT 8
67960: DOUBLE
67961: EQUAL
67962: IFTRUE 68002
67964: LD_INT 13
67966: DOUBLE
67967: EQUAL
67968: IFTRUE 68002
67970: LD_INT 12
67972: DOUBLE
67973: EQUAL
67974: IFTRUE 68002
67976: LD_INT 15
67978: DOUBLE
67979: EQUAL
67980: IFTRUE 68002
67982: LD_INT 11
67984: DOUBLE
67985: EQUAL
67986: IFTRUE 68002
67988: LD_INT 14
67990: DOUBLE
67991: EQUAL
67992: IFTRUE 68002
67994: LD_INT 10
67996: DOUBLE
67997: EQUAL
67998: IFTRUE 68002
68000: GO 68058
68002: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68003: LD_ADDR_VAR 0 9
68007: PUSH
68008: LD_VAR 0 41
68012: PUSH
68013: LD_VAR 0 42
68017: PUSH
68018: LD_VAR 0 43
68022: PUSH
68023: LD_VAR 0 44
68027: PUSH
68028: LD_VAR 0 45
68032: PUSH
68033: LD_VAR 0 46
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: PUSH
68046: LD_VAR 0 4
68050: PUSH
68051: LD_INT 1
68053: PLUS
68054: ARRAY
68055: ST_TO_ADDR
68056: GO 68311
68058: LD_INT 36
68060: DOUBLE
68061: EQUAL
68062: IFTRUE 68066
68064: GO 68122
68066: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68067: LD_ADDR_VAR 0 9
68071: PUSH
68072: LD_VAR 0 47
68076: PUSH
68077: LD_VAR 0 48
68081: PUSH
68082: LD_VAR 0 49
68086: PUSH
68087: LD_VAR 0 50
68091: PUSH
68092: LD_VAR 0 51
68096: PUSH
68097: LD_VAR 0 52
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: PUSH
68110: LD_VAR 0 4
68114: PUSH
68115: LD_INT 1
68117: PLUS
68118: ARRAY
68119: ST_TO_ADDR
68120: GO 68311
68122: LD_INT 4
68124: DOUBLE
68125: EQUAL
68126: IFTRUE 68148
68128: LD_INT 5
68130: DOUBLE
68131: EQUAL
68132: IFTRUE 68148
68134: LD_INT 34
68136: DOUBLE
68137: EQUAL
68138: IFTRUE 68148
68140: LD_INT 37
68142: DOUBLE
68143: EQUAL
68144: IFTRUE 68148
68146: GO 68204
68148: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68149: LD_ADDR_VAR 0 9
68153: PUSH
68154: LD_VAR 0 53
68158: PUSH
68159: LD_VAR 0 54
68163: PUSH
68164: LD_VAR 0 55
68168: PUSH
68169: LD_VAR 0 56
68173: PUSH
68174: LD_VAR 0 57
68178: PUSH
68179: LD_VAR 0 58
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: PUSH
68192: LD_VAR 0 4
68196: PUSH
68197: LD_INT 1
68199: PLUS
68200: ARRAY
68201: ST_TO_ADDR
68202: GO 68311
68204: LD_INT 31
68206: DOUBLE
68207: EQUAL
68208: IFTRUE 68254
68210: LD_INT 32
68212: DOUBLE
68213: EQUAL
68214: IFTRUE 68254
68216: LD_INT 33
68218: DOUBLE
68219: EQUAL
68220: IFTRUE 68254
68222: LD_INT 27
68224: DOUBLE
68225: EQUAL
68226: IFTRUE 68254
68228: LD_INT 26
68230: DOUBLE
68231: EQUAL
68232: IFTRUE 68254
68234: LD_INT 28
68236: DOUBLE
68237: EQUAL
68238: IFTRUE 68254
68240: LD_INT 29
68242: DOUBLE
68243: EQUAL
68244: IFTRUE 68254
68246: LD_INT 30
68248: DOUBLE
68249: EQUAL
68250: IFTRUE 68254
68252: GO 68310
68254: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68255: LD_ADDR_VAR 0 9
68259: PUSH
68260: LD_VAR 0 59
68264: PUSH
68265: LD_VAR 0 60
68269: PUSH
68270: LD_VAR 0 61
68274: PUSH
68275: LD_VAR 0 62
68279: PUSH
68280: LD_VAR 0 63
68284: PUSH
68285: LD_VAR 0 64
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: PUSH
68298: LD_VAR 0 4
68302: PUSH
68303: LD_INT 1
68305: PLUS
68306: ARRAY
68307: ST_TO_ADDR
68308: GO 68311
68310: POP
// temp_list2 = [ ] ;
68311: LD_ADDR_VAR 0 10
68315: PUSH
68316: EMPTY
68317: ST_TO_ADDR
// for i in temp_list do
68318: LD_ADDR_VAR 0 8
68322: PUSH
68323: LD_VAR 0 9
68327: PUSH
68328: FOR_IN
68329: IFFALSE 68381
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68331: LD_ADDR_VAR 0 10
68335: PUSH
68336: LD_VAR 0 10
68340: PUSH
68341: LD_VAR 0 8
68345: PUSH
68346: LD_INT 1
68348: ARRAY
68349: PUSH
68350: LD_VAR 0 2
68354: PLUS
68355: PUSH
68356: LD_VAR 0 8
68360: PUSH
68361: LD_INT 2
68363: ARRAY
68364: PUSH
68365: LD_VAR 0 3
68369: PLUS
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: EMPTY
68376: LIST
68377: ADD
68378: ST_TO_ADDR
68379: GO 68328
68381: POP
68382: POP
// result = temp_list2 ;
68383: LD_ADDR_VAR 0 7
68387: PUSH
68388: LD_VAR 0 10
68392: ST_TO_ADDR
// end ;
68393: LD_VAR 0 7
68397: RET
// export function EnemyInRange ( unit , dist ) ; begin
68398: LD_INT 0
68400: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68401: LD_ADDR_VAR 0 3
68405: PUSH
68406: LD_VAR 0 1
68410: PPUSH
68411: CALL_OW 255
68415: PPUSH
68416: LD_VAR 0 1
68420: PPUSH
68421: CALL_OW 250
68425: PPUSH
68426: LD_VAR 0 1
68430: PPUSH
68431: CALL_OW 251
68435: PPUSH
68436: LD_VAR 0 2
68440: PPUSH
68441: CALL 41794 0 4
68445: PUSH
68446: LD_INT 4
68448: ARRAY
68449: ST_TO_ADDR
// end ;
68450: LD_VAR 0 3
68454: RET
// export function PlayerSeeMe ( unit ) ; begin
68455: LD_INT 0
68457: PPUSH
// result := See ( your_side , unit ) ;
68458: LD_ADDR_VAR 0 2
68462: PUSH
68463: LD_OWVAR 2
68467: PPUSH
68468: LD_VAR 0 1
68472: PPUSH
68473: CALL_OW 292
68477: ST_TO_ADDR
// end ;
68478: LD_VAR 0 2
68482: RET
// export function ReverseDir ( unit ) ; begin
68483: LD_INT 0
68485: PPUSH
// if not unit then
68486: LD_VAR 0 1
68490: NOT
68491: IFFALSE 68495
// exit ;
68493: GO 68518
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68495: LD_ADDR_VAR 0 2
68499: PUSH
68500: LD_VAR 0 1
68504: PPUSH
68505: CALL_OW 254
68509: PUSH
68510: LD_INT 3
68512: PLUS
68513: PUSH
68514: LD_INT 6
68516: MOD
68517: ST_TO_ADDR
// end ;
68518: LD_VAR 0 2
68522: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68523: LD_INT 0
68525: PPUSH
68526: PPUSH
68527: PPUSH
68528: PPUSH
68529: PPUSH
// if not hexes then
68530: LD_VAR 0 2
68534: NOT
68535: IFFALSE 68539
// exit ;
68537: GO 68687
// dist := 9999 ;
68539: LD_ADDR_VAR 0 5
68543: PUSH
68544: LD_INT 9999
68546: ST_TO_ADDR
// for i = 1 to hexes do
68547: LD_ADDR_VAR 0 4
68551: PUSH
68552: DOUBLE
68553: LD_INT 1
68555: DEC
68556: ST_TO_ADDR
68557: LD_VAR 0 2
68561: PUSH
68562: FOR_TO
68563: IFFALSE 68675
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68565: LD_VAR 0 1
68569: PPUSH
68570: LD_VAR 0 2
68574: PUSH
68575: LD_VAR 0 4
68579: ARRAY
68580: PUSH
68581: LD_INT 1
68583: ARRAY
68584: PPUSH
68585: LD_VAR 0 2
68589: PUSH
68590: LD_VAR 0 4
68594: ARRAY
68595: PUSH
68596: LD_INT 2
68598: ARRAY
68599: PPUSH
68600: CALL_OW 297
68604: PUSH
68605: LD_VAR 0 5
68609: LESS
68610: IFFALSE 68673
// begin hex := hexes [ i ] ;
68612: LD_ADDR_VAR 0 7
68616: PUSH
68617: LD_VAR 0 2
68621: PUSH
68622: LD_VAR 0 4
68626: ARRAY
68627: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68628: LD_ADDR_VAR 0 5
68632: PUSH
68633: LD_VAR 0 1
68637: PPUSH
68638: LD_VAR 0 2
68642: PUSH
68643: LD_VAR 0 4
68647: ARRAY
68648: PUSH
68649: LD_INT 1
68651: ARRAY
68652: PPUSH
68653: LD_VAR 0 2
68657: PUSH
68658: LD_VAR 0 4
68662: ARRAY
68663: PUSH
68664: LD_INT 2
68666: ARRAY
68667: PPUSH
68668: CALL_OW 297
68672: ST_TO_ADDR
// end ; end ;
68673: GO 68562
68675: POP
68676: POP
// result := hex ;
68677: LD_ADDR_VAR 0 3
68681: PUSH
68682: LD_VAR 0 7
68686: ST_TO_ADDR
// end ;
68687: LD_VAR 0 3
68691: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68692: LD_INT 0
68694: PPUSH
68695: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68696: LD_VAR 0 1
68700: NOT
68701: PUSH
68702: LD_VAR 0 1
68706: PUSH
68707: LD_INT 21
68709: PUSH
68710: LD_INT 2
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 23
68719: PUSH
68720: LD_INT 2
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PPUSH
68731: CALL_OW 69
68735: IN
68736: NOT
68737: OR
68738: IFFALSE 68742
// exit ;
68740: GO 68789
// for i = 1 to 3 do
68742: LD_ADDR_VAR 0 3
68746: PUSH
68747: DOUBLE
68748: LD_INT 1
68750: DEC
68751: ST_TO_ADDR
68752: LD_INT 3
68754: PUSH
68755: FOR_TO
68756: IFFALSE 68787
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68758: LD_VAR 0 1
68762: PPUSH
68763: CALL_OW 250
68767: PPUSH
68768: LD_VAR 0 1
68772: PPUSH
68773: CALL_OW 251
68777: PPUSH
68778: LD_INT 1
68780: PPUSH
68781: CALL_OW 453
68785: GO 68755
68787: POP
68788: POP
// end ;
68789: LD_VAR 0 2
68793: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68794: LD_INT 0
68796: PPUSH
68797: PPUSH
68798: PPUSH
68799: PPUSH
68800: PPUSH
68801: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68802: LD_VAR 0 1
68806: NOT
68807: PUSH
68808: LD_VAR 0 2
68812: NOT
68813: OR
68814: PUSH
68815: LD_VAR 0 1
68819: PPUSH
68820: CALL_OW 314
68824: OR
68825: IFFALSE 68829
// exit ;
68827: GO 69270
// x := GetX ( enemy_unit ) ;
68829: LD_ADDR_VAR 0 7
68833: PUSH
68834: LD_VAR 0 2
68838: PPUSH
68839: CALL_OW 250
68843: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68844: LD_ADDR_VAR 0 8
68848: PUSH
68849: LD_VAR 0 2
68853: PPUSH
68854: CALL_OW 251
68858: ST_TO_ADDR
// if not x or not y then
68859: LD_VAR 0 7
68863: NOT
68864: PUSH
68865: LD_VAR 0 8
68869: NOT
68870: OR
68871: IFFALSE 68875
// exit ;
68873: GO 69270
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68875: LD_ADDR_VAR 0 6
68879: PUSH
68880: LD_VAR 0 7
68884: PPUSH
68885: LD_INT 0
68887: PPUSH
68888: LD_INT 4
68890: PPUSH
68891: CALL_OW 272
68895: PUSH
68896: LD_VAR 0 8
68900: PPUSH
68901: LD_INT 0
68903: PPUSH
68904: LD_INT 4
68906: PPUSH
68907: CALL_OW 273
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_VAR 0 7
68920: PPUSH
68921: LD_INT 1
68923: PPUSH
68924: LD_INT 4
68926: PPUSH
68927: CALL_OW 272
68931: PUSH
68932: LD_VAR 0 8
68936: PPUSH
68937: LD_INT 1
68939: PPUSH
68940: LD_INT 4
68942: PPUSH
68943: CALL_OW 273
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_VAR 0 7
68956: PPUSH
68957: LD_INT 2
68959: PPUSH
68960: LD_INT 4
68962: PPUSH
68963: CALL_OW 272
68967: PUSH
68968: LD_VAR 0 8
68972: PPUSH
68973: LD_INT 2
68975: PPUSH
68976: LD_INT 4
68978: PPUSH
68979: CALL_OW 273
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_VAR 0 7
68992: PPUSH
68993: LD_INT 3
68995: PPUSH
68996: LD_INT 4
68998: PPUSH
68999: CALL_OW 272
69003: PUSH
69004: LD_VAR 0 8
69008: PPUSH
69009: LD_INT 3
69011: PPUSH
69012: LD_INT 4
69014: PPUSH
69015: CALL_OW 273
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_VAR 0 7
69028: PPUSH
69029: LD_INT 4
69031: PPUSH
69032: LD_INT 4
69034: PPUSH
69035: CALL_OW 272
69039: PUSH
69040: LD_VAR 0 8
69044: PPUSH
69045: LD_INT 4
69047: PPUSH
69048: LD_INT 4
69050: PPUSH
69051: CALL_OW 273
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_VAR 0 7
69064: PPUSH
69065: LD_INT 5
69067: PPUSH
69068: LD_INT 4
69070: PPUSH
69071: CALL_OW 272
69075: PUSH
69076: LD_VAR 0 8
69080: PPUSH
69081: LD_INT 5
69083: PPUSH
69084: LD_INT 4
69086: PPUSH
69087: CALL_OW 273
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: ST_TO_ADDR
// for i = tmp downto 1 do
69104: LD_ADDR_VAR 0 4
69108: PUSH
69109: DOUBLE
69110: LD_VAR 0 6
69114: INC
69115: ST_TO_ADDR
69116: LD_INT 1
69118: PUSH
69119: FOR_DOWNTO
69120: IFFALSE 69221
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69122: LD_VAR 0 6
69126: PUSH
69127: LD_VAR 0 4
69131: ARRAY
69132: PUSH
69133: LD_INT 1
69135: ARRAY
69136: PPUSH
69137: LD_VAR 0 6
69141: PUSH
69142: LD_VAR 0 4
69146: ARRAY
69147: PUSH
69148: LD_INT 2
69150: ARRAY
69151: PPUSH
69152: CALL_OW 488
69156: NOT
69157: PUSH
69158: LD_VAR 0 6
69162: PUSH
69163: LD_VAR 0 4
69167: ARRAY
69168: PUSH
69169: LD_INT 1
69171: ARRAY
69172: PPUSH
69173: LD_VAR 0 6
69177: PUSH
69178: LD_VAR 0 4
69182: ARRAY
69183: PUSH
69184: LD_INT 2
69186: ARRAY
69187: PPUSH
69188: CALL_OW 428
69192: PUSH
69193: LD_INT 0
69195: NONEQUAL
69196: OR
69197: IFFALSE 69219
// tmp := Delete ( tmp , i ) ;
69199: LD_ADDR_VAR 0 6
69203: PUSH
69204: LD_VAR 0 6
69208: PPUSH
69209: LD_VAR 0 4
69213: PPUSH
69214: CALL_OW 3
69218: ST_TO_ADDR
69219: GO 69119
69221: POP
69222: POP
// j := GetClosestHex ( unit , tmp ) ;
69223: LD_ADDR_VAR 0 5
69227: PUSH
69228: LD_VAR 0 1
69232: PPUSH
69233: LD_VAR 0 6
69237: PPUSH
69238: CALL 68523 0 2
69242: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69243: LD_VAR 0 1
69247: PPUSH
69248: LD_VAR 0 5
69252: PUSH
69253: LD_INT 1
69255: ARRAY
69256: PPUSH
69257: LD_VAR 0 5
69261: PUSH
69262: LD_INT 2
69264: ARRAY
69265: PPUSH
69266: CALL_OW 111
// end ;
69270: LD_VAR 0 3
69274: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69275: LD_INT 0
69277: PPUSH
69278: PPUSH
69279: PPUSH
// uc_side = 0 ;
69280: LD_ADDR_OWVAR 20
69284: PUSH
69285: LD_INT 0
69287: ST_TO_ADDR
// uc_nation = 0 ;
69288: LD_ADDR_OWVAR 21
69292: PUSH
69293: LD_INT 0
69295: ST_TO_ADDR
// InitHc_All ( ) ;
69296: CALL_OW 584
// InitVc ;
69300: CALL_OW 20
// if mastodonts then
69304: LD_VAR 0 6
69308: IFFALSE 69375
// for i = 1 to mastodonts do
69310: LD_ADDR_VAR 0 11
69314: PUSH
69315: DOUBLE
69316: LD_INT 1
69318: DEC
69319: ST_TO_ADDR
69320: LD_VAR 0 6
69324: PUSH
69325: FOR_TO
69326: IFFALSE 69373
// begin vc_chassis := 31 ;
69328: LD_ADDR_OWVAR 37
69332: PUSH
69333: LD_INT 31
69335: ST_TO_ADDR
// vc_control := control_rider ;
69336: LD_ADDR_OWVAR 38
69340: PUSH
69341: LD_INT 4
69343: ST_TO_ADDR
// animal := CreateVehicle ;
69344: LD_ADDR_VAR 0 12
69348: PUSH
69349: CALL_OW 45
69353: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69354: LD_VAR 0 12
69358: PPUSH
69359: LD_VAR 0 8
69363: PPUSH
69364: LD_INT 0
69366: PPUSH
69367: CALL 71563 0 3
// end ;
69371: GO 69325
69373: POP
69374: POP
// if horses then
69375: LD_VAR 0 5
69379: IFFALSE 69446
// for i = 1 to horses do
69381: LD_ADDR_VAR 0 11
69385: PUSH
69386: DOUBLE
69387: LD_INT 1
69389: DEC
69390: ST_TO_ADDR
69391: LD_VAR 0 5
69395: PUSH
69396: FOR_TO
69397: IFFALSE 69444
// begin hc_class := 21 ;
69399: LD_ADDR_OWVAR 28
69403: PUSH
69404: LD_INT 21
69406: ST_TO_ADDR
// hc_gallery :=  ;
69407: LD_ADDR_OWVAR 33
69411: PUSH
69412: LD_STRING 
69414: ST_TO_ADDR
// animal := CreateHuman ;
69415: LD_ADDR_VAR 0 12
69419: PUSH
69420: CALL_OW 44
69424: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69425: LD_VAR 0 12
69429: PPUSH
69430: LD_VAR 0 8
69434: PPUSH
69435: LD_INT 0
69437: PPUSH
69438: CALL 71563 0 3
// end ;
69442: GO 69396
69444: POP
69445: POP
// if birds then
69446: LD_VAR 0 1
69450: IFFALSE 69517
// for i = 1 to birds do
69452: LD_ADDR_VAR 0 11
69456: PUSH
69457: DOUBLE
69458: LD_INT 1
69460: DEC
69461: ST_TO_ADDR
69462: LD_VAR 0 1
69466: PUSH
69467: FOR_TO
69468: IFFALSE 69515
// begin hc_class = 18 ;
69470: LD_ADDR_OWVAR 28
69474: PUSH
69475: LD_INT 18
69477: ST_TO_ADDR
// hc_gallery =  ;
69478: LD_ADDR_OWVAR 33
69482: PUSH
69483: LD_STRING 
69485: ST_TO_ADDR
// animal := CreateHuman ;
69486: LD_ADDR_VAR 0 12
69490: PUSH
69491: CALL_OW 44
69495: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69496: LD_VAR 0 12
69500: PPUSH
69501: LD_VAR 0 8
69505: PPUSH
69506: LD_INT 0
69508: PPUSH
69509: CALL 71563 0 3
// end ;
69513: GO 69467
69515: POP
69516: POP
// if tigers then
69517: LD_VAR 0 2
69521: IFFALSE 69605
// for i = 1 to tigers do
69523: LD_ADDR_VAR 0 11
69527: PUSH
69528: DOUBLE
69529: LD_INT 1
69531: DEC
69532: ST_TO_ADDR
69533: LD_VAR 0 2
69537: PUSH
69538: FOR_TO
69539: IFFALSE 69603
// begin hc_class = class_tiger ;
69541: LD_ADDR_OWVAR 28
69545: PUSH
69546: LD_INT 14
69548: ST_TO_ADDR
// hc_gallery =  ;
69549: LD_ADDR_OWVAR 33
69553: PUSH
69554: LD_STRING 
69556: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69557: LD_ADDR_OWVAR 35
69561: PUSH
69562: LD_INT 7
69564: NEG
69565: PPUSH
69566: LD_INT 7
69568: PPUSH
69569: CALL_OW 12
69573: ST_TO_ADDR
// animal := CreateHuman ;
69574: LD_ADDR_VAR 0 12
69578: PUSH
69579: CALL_OW 44
69583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69584: LD_VAR 0 12
69588: PPUSH
69589: LD_VAR 0 8
69593: PPUSH
69594: LD_INT 0
69596: PPUSH
69597: CALL 71563 0 3
// end ;
69601: GO 69538
69603: POP
69604: POP
// if apemans then
69605: LD_VAR 0 3
69609: IFFALSE 69732
// for i = 1 to apemans do
69611: LD_ADDR_VAR 0 11
69615: PUSH
69616: DOUBLE
69617: LD_INT 1
69619: DEC
69620: ST_TO_ADDR
69621: LD_VAR 0 3
69625: PUSH
69626: FOR_TO
69627: IFFALSE 69730
// begin hc_class = class_apeman ;
69629: LD_ADDR_OWVAR 28
69633: PUSH
69634: LD_INT 12
69636: ST_TO_ADDR
// hc_gallery =  ;
69637: LD_ADDR_OWVAR 33
69641: PUSH
69642: LD_STRING 
69644: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69645: LD_ADDR_OWVAR 35
69649: PUSH
69650: LD_INT 2
69652: NEG
69653: PPUSH
69654: LD_INT 2
69656: PPUSH
69657: CALL_OW 12
69661: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69662: LD_ADDR_OWVAR 31
69666: PUSH
69667: LD_INT 1
69669: PPUSH
69670: LD_INT 3
69672: PPUSH
69673: CALL_OW 12
69677: PUSH
69678: LD_INT 1
69680: PPUSH
69681: LD_INT 3
69683: PPUSH
69684: CALL_OW 12
69688: PUSH
69689: LD_INT 0
69691: PUSH
69692: LD_INT 0
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: ST_TO_ADDR
// animal := CreateHuman ;
69701: LD_ADDR_VAR 0 12
69705: PUSH
69706: CALL_OW 44
69710: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69711: LD_VAR 0 12
69715: PPUSH
69716: LD_VAR 0 8
69720: PPUSH
69721: LD_INT 0
69723: PPUSH
69724: CALL 71563 0 3
// end ;
69728: GO 69626
69730: POP
69731: POP
// if enchidnas then
69732: LD_VAR 0 4
69736: IFFALSE 69803
// for i = 1 to enchidnas do
69738: LD_ADDR_VAR 0 11
69742: PUSH
69743: DOUBLE
69744: LD_INT 1
69746: DEC
69747: ST_TO_ADDR
69748: LD_VAR 0 4
69752: PUSH
69753: FOR_TO
69754: IFFALSE 69801
// begin hc_class = 13 ;
69756: LD_ADDR_OWVAR 28
69760: PUSH
69761: LD_INT 13
69763: ST_TO_ADDR
// hc_gallery =  ;
69764: LD_ADDR_OWVAR 33
69768: PUSH
69769: LD_STRING 
69771: ST_TO_ADDR
// animal := CreateHuman ;
69772: LD_ADDR_VAR 0 12
69776: PUSH
69777: CALL_OW 44
69781: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69782: LD_VAR 0 12
69786: PPUSH
69787: LD_VAR 0 8
69791: PPUSH
69792: LD_INT 0
69794: PPUSH
69795: CALL 71563 0 3
// end ;
69799: GO 69753
69801: POP
69802: POP
// if fishes then
69803: LD_VAR 0 7
69807: IFFALSE 69874
// for i = 1 to fishes do
69809: LD_ADDR_VAR 0 11
69813: PUSH
69814: DOUBLE
69815: LD_INT 1
69817: DEC
69818: ST_TO_ADDR
69819: LD_VAR 0 7
69823: PUSH
69824: FOR_TO
69825: IFFALSE 69872
// begin hc_class = 20 ;
69827: LD_ADDR_OWVAR 28
69831: PUSH
69832: LD_INT 20
69834: ST_TO_ADDR
// hc_gallery =  ;
69835: LD_ADDR_OWVAR 33
69839: PUSH
69840: LD_STRING 
69842: ST_TO_ADDR
// animal := CreateHuman ;
69843: LD_ADDR_VAR 0 12
69847: PUSH
69848: CALL_OW 44
69852: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69853: LD_VAR 0 12
69857: PPUSH
69858: LD_VAR 0 9
69862: PPUSH
69863: LD_INT 0
69865: PPUSH
69866: CALL 71563 0 3
// end ;
69870: GO 69824
69872: POP
69873: POP
// end ;
69874: LD_VAR 0 10
69878: RET
// export function WantHeal ( sci , unit ) ; begin
69879: LD_INT 0
69881: PPUSH
// if GetTaskList ( sci ) > 0 then
69882: LD_VAR 0 1
69886: PPUSH
69887: CALL_OW 437
69891: PUSH
69892: LD_INT 0
69894: GREATER
69895: IFFALSE 69965
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69897: LD_VAR 0 1
69901: PPUSH
69902: CALL_OW 437
69906: PUSH
69907: LD_INT 1
69909: ARRAY
69910: PUSH
69911: LD_INT 1
69913: ARRAY
69914: PUSH
69915: LD_STRING l
69917: EQUAL
69918: PUSH
69919: LD_VAR 0 1
69923: PPUSH
69924: CALL_OW 437
69928: PUSH
69929: LD_INT 1
69931: ARRAY
69932: PUSH
69933: LD_INT 4
69935: ARRAY
69936: PUSH
69937: LD_VAR 0 2
69941: EQUAL
69942: AND
69943: IFFALSE 69955
// result := true else
69945: LD_ADDR_VAR 0 3
69949: PUSH
69950: LD_INT 1
69952: ST_TO_ADDR
69953: GO 69963
// result := false ;
69955: LD_ADDR_VAR 0 3
69959: PUSH
69960: LD_INT 0
69962: ST_TO_ADDR
// end else
69963: GO 69973
// result := false ;
69965: LD_ADDR_VAR 0 3
69969: PUSH
69970: LD_INT 0
69972: ST_TO_ADDR
// end ;
69973: LD_VAR 0 3
69977: RET
// export function HealTarget ( sci ) ; begin
69978: LD_INT 0
69980: PPUSH
// if not sci then
69981: LD_VAR 0 1
69985: NOT
69986: IFFALSE 69990
// exit ;
69988: GO 70055
// result := 0 ;
69990: LD_ADDR_VAR 0 2
69994: PUSH
69995: LD_INT 0
69997: ST_TO_ADDR
// if GetTaskList ( sci ) then
69998: LD_VAR 0 1
70002: PPUSH
70003: CALL_OW 437
70007: IFFALSE 70055
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70009: LD_VAR 0 1
70013: PPUSH
70014: CALL_OW 437
70018: PUSH
70019: LD_INT 1
70021: ARRAY
70022: PUSH
70023: LD_INT 1
70025: ARRAY
70026: PUSH
70027: LD_STRING l
70029: EQUAL
70030: IFFALSE 70055
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70032: LD_ADDR_VAR 0 2
70036: PUSH
70037: LD_VAR 0 1
70041: PPUSH
70042: CALL_OW 437
70046: PUSH
70047: LD_INT 1
70049: ARRAY
70050: PUSH
70051: LD_INT 4
70053: ARRAY
70054: ST_TO_ADDR
// end ;
70055: LD_VAR 0 2
70059: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70060: LD_INT 0
70062: PPUSH
70063: PPUSH
70064: PPUSH
70065: PPUSH
// if not base_units then
70066: LD_VAR 0 1
70070: NOT
70071: IFFALSE 70075
// exit ;
70073: GO 70162
// result := false ;
70075: LD_ADDR_VAR 0 2
70079: PUSH
70080: LD_INT 0
70082: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70083: LD_ADDR_VAR 0 5
70087: PUSH
70088: LD_VAR 0 1
70092: PPUSH
70093: LD_INT 21
70095: PUSH
70096: LD_INT 3
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PPUSH
70103: CALL_OW 72
70107: ST_TO_ADDR
// if not tmp then
70108: LD_VAR 0 5
70112: NOT
70113: IFFALSE 70117
// exit ;
70115: GO 70162
// for i in tmp do
70117: LD_ADDR_VAR 0 3
70121: PUSH
70122: LD_VAR 0 5
70126: PUSH
70127: FOR_IN
70128: IFFALSE 70160
// begin result := EnemyInRange ( i , 22 ) ;
70130: LD_ADDR_VAR 0 2
70134: PUSH
70135: LD_VAR 0 3
70139: PPUSH
70140: LD_INT 22
70142: PPUSH
70143: CALL 68398 0 2
70147: ST_TO_ADDR
// if result then
70148: LD_VAR 0 2
70152: IFFALSE 70158
// exit ;
70154: POP
70155: POP
70156: GO 70162
// end ;
70158: GO 70127
70160: POP
70161: POP
// end ;
70162: LD_VAR 0 2
70166: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70167: LD_INT 0
70169: PPUSH
70170: PPUSH
// if not units then
70171: LD_VAR 0 1
70175: NOT
70176: IFFALSE 70180
// exit ;
70178: GO 70250
// result := [ ] ;
70180: LD_ADDR_VAR 0 3
70184: PUSH
70185: EMPTY
70186: ST_TO_ADDR
// for i in units do
70187: LD_ADDR_VAR 0 4
70191: PUSH
70192: LD_VAR 0 1
70196: PUSH
70197: FOR_IN
70198: IFFALSE 70248
// if GetTag ( i ) = tag then
70200: LD_VAR 0 4
70204: PPUSH
70205: CALL_OW 110
70209: PUSH
70210: LD_VAR 0 2
70214: EQUAL
70215: IFFALSE 70246
// result := Insert ( result , result + 1 , i ) ;
70217: LD_ADDR_VAR 0 3
70221: PUSH
70222: LD_VAR 0 3
70226: PPUSH
70227: LD_VAR 0 3
70231: PUSH
70232: LD_INT 1
70234: PLUS
70235: PPUSH
70236: LD_VAR 0 4
70240: PPUSH
70241: CALL_OW 2
70245: ST_TO_ADDR
70246: GO 70197
70248: POP
70249: POP
// end ;
70250: LD_VAR 0 3
70254: RET
// export function IsDriver ( un ) ; begin
70255: LD_INT 0
70257: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70258: LD_ADDR_VAR 0 2
70262: PUSH
70263: LD_VAR 0 1
70267: PUSH
70268: LD_INT 55
70270: PUSH
70271: EMPTY
70272: LIST
70273: PPUSH
70274: CALL_OW 69
70278: IN
70279: ST_TO_ADDR
// end ;
70280: LD_VAR 0 2
70284: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70285: LD_INT 0
70287: PPUSH
70288: PPUSH
// list := [ ] ;
70289: LD_ADDR_VAR 0 5
70293: PUSH
70294: EMPTY
70295: ST_TO_ADDR
// case d of 0 :
70296: LD_VAR 0 3
70300: PUSH
70301: LD_INT 0
70303: DOUBLE
70304: EQUAL
70305: IFTRUE 70309
70307: GO 70442
70309: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70310: LD_ADDR_VAR 0 5
70314: PUSH
70315: LD_VAR 0 1
70319: PUSH
70320: LD_INT 4
70322: MINUS
70323: PUSH
70324: LD_VAR 0 2
70328: PUSH
70329: LD_INT 4
70331: MINUS
70332: PUSH
70333: LD_INT 2
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: LIST
70340: PUSH
70341: LD_VAR 0 1
70345: PUSH
70346: LD_INT 3
70348: MINUS
70349: PUSH
70350: LD_VAR 0 2
70354: PUSH
70355: LD_INT 1
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: LIST
70362: PUSH
70363: LD_VAR 0 1
70367: PUSH
70368: LD_INT 4
70370: PLUS
70371: PUSH
70372: LD_VAR 0 2
70376: PUSH
70377: LD_INT 4
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: LIST
70384: PUSH
70385: LD_VAR 0 1
70389: PUSH
70390: LD_INT 3
70392: PLUS
70393: PUSH
70394: LD_VAR 0 2
70398: PUSH
70399: LD_INT 3
70401: PLUS
70402: PUSH
70403: LD_INT 5
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: LIST
70410: PUSH
70411: LD_VAR 0 1
70415: PUSH
70416: LD_VAR 0 2
70420: PUSH
70421: LD_INT 4
70423: PLUS
70424: PUSH
70425: LD_INT 0
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: LIST
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: ST_TO_ADDR
// end ; 1 :
70440: GO 71140
70442: LD_INT 1
70444: DOUBLE
70445: EQUAL
70446: IFTRUE 70450
70448: GO 70583
70450: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70451: LD_ADDR_VAR 0 5
70455: PUSH
70456: LD_VAR 0 1
70460: PUSH
70461: LD_VAR 0 2
70465: PUSH
70466: LD_INT 4
70468: MINUS
70469: PUSH
70470: LD_INT 3
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: LIST
70477: PUSH
70478: LD_VAR 0 1
70482: PUSH
70483: LD_INT 3
70485: MINUS
70486: PUSH
70487: LD_VAR 0 2
70491: PUSH
70492: LD_INT 3
70494: MINUS
70495: PUSH
70496: LD_INT 2
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: LIST
70503: PUSH
70504: LD_VAR 0 1
70508: PUSH
70509: LD_INT 4
70511: MINUS
70512: PUSH
70513: LD_VAR 0 2
70517: PUSH
70518: LD_INT 1
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: LIST
70525: PUSH
70526: LD_VAR 0 1
70530: PUSH
70531: LD_VAR 0 2
70535: PUSH
70536: LD_INT 3
70538: PLUS
70539: PUSH
70540: LD_INT 0
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: LIST
70547: PUSH
70548: LD_VAR 0 1
70552: PUSH
70553: LD_INT 4
70555: PLUS
70556: PUSH
70557: LD_VAR 0 2
70561: PUSH
70562: LD_INT 4
70564: PLUS
70565: PUSH
70566: LD_INT 5
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: LIST
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: ST_TO_ADDR
// end ; 2 :
70581: GO 71140
70583: LD_INT 2
70585: DOUBLE
70586: EQUAL
70587: IFTRUE 70591
70589: GO 70720
70591: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70592: LD_ADDR_VAR 0 5
70596: PUSH
70597: LD_VAR 0 1
70601: PUSH
70602: LD_VAR 0 2
70606: PUSH
70607: LD_INT 3
70609: MINUS
70610: PUSH
70611: LD_INT 3
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: LIST
70618: PUSH
70619: LD_VAR 0 1
70623: PUSH
70624: LD_INT 4
70626: PLUS
70627: PUSH
70628: LD_VAR 0 2
70632: PUSH
70633: LD_INT 4
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: LIST
70640: PUSH
70641: LD_VAR 0 1
70645: PUSH
70646: LD_VAR 0 2
70650: PUSH
70651: LD_INT 4
70653: PLUS
70654: PUSH
70655: LD_INT 0
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: LIST
70662: PUSH
70663: LD_VAR 0 1
70667: PUSH
70668: LD_INT 3
70670: MINUS
70671: PUSH
70672: LD_VAR 0 2
70676: PUSH
70677: LD_INT 1
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: LIST
70684: PUSH
70685: LD_VAR 0 1
70689: PUSH
70690: LD_INT 4
70692: MINUS
70693: PUSH
70694: LD_VAR 0 2
70698: PUSH
70699: LD_INT 4
70701: MINUS
70702: PUSH
70703: LD_INT 2
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: LIST
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: ST_TO_ADDR
// end ; 3 :
70718: GO 71140
70720: LD_INT 3
70722: DOUBLE
70723: EQUAL
70724: IFTRUE 70728
70726: GO 70861
70728: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70729: LD_ADDR_VAR 0 5
70733: PUSH
70734: LD_VAR 0 1
70738: PUSH
70739: LD_INT 3
70741: PLUS
70742: PUSH
70743: LD_VAR 0 2
70747: PUSH
70748: LD_INT 4
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: LIST
70755: PUSH
70756: LD_VAR 0 1
70760: PUSH
70761: LD_INT 4
70763: PLUS
70764: PUSH
70765: LD_VAR 0 2
70769: PUSH
70770: LD_INT 4
70772: PLUS
70773: PUSH
70774: LD_INT 5
70776: PUSH
70777: EMPTY
70778: LIST
70779: LIST
70780: LIST
70781: PUSH
70782: LD_VAR 0 1
70786: PUSH
70787: LD_INT 4
70789: MINUS
70790: PUSH
70791: LD_VAR 0 2
70795: PUSH
70796: LD_INT 1
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: LIST
70803: PUSH
70804: LD_VAR 0 1
70808: PUSH
70809: LD_VAR 0 2
70813: PUSH
70814: LD_INT 4
70816: MINUS
70817: PUSH
70818: LD_INT 3
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: LIST
70825: PUSH
70826: LD_VAR 0 1
70830: PUSH
70831: LD_INT 3
70833: MINUS
70834: PUSH
70835: LD_VAR 0 2
70839: PUSH
70840: LD_INT 3
70842: MINUS
70843: PUSH
70844: LD_INT 2
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: LIST
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: ST_TO_ADDR
// end ; 4 :
70859: GO 71140
70861: LD_INT 4
70863: DOUBLE
70864: EQUAL
70865: IFTRUE 70869
70867: GO 71002
70869: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70870: LD_ADDR_VAR 0 5
70874: PUSH
70875: LD_VAR 0 1
70879: PUSH
70880: LD_VAR 0 2
70884: PUSH
70885: LD_INT 4
70887: PLUS
70888: PUSH
70889: LD_INT 0
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: LIST
70896: PUSH
70897: LD_VAR 0 1
70901: PUSH
70902: LD_INT 3
70904: PLUS
70905: PUSH
70906: LD_VAR 0 2
70910: PUSH
70911: LD_INT 3
70913: PLUS
70914: PUSH
70915: LD_INT 5
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: LIST
70922: PUSH
70923: LD_VAR 0 1
70927: PUSH
70928: LD_INT 4
70930: PLUS
70931: PUSH
70932: LD_VAR 0 2
70936: PUSH
70937: LD_INT 4
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: LIST
70944: PUSH
70945: LD_VAR 0 1
70949: PUSH
70950: LD_VAR 0 2
70954: PUSH
70955: LD_INT 3
70957: MINUS
70958: PUSH
70959: LD_INT 3
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: LIST
70966: PUSH
70967: LD_VAR 0 1
70971: PUSH
70972: LD_INT 4
70974: MINUS
70975: PUSH
70976: LD_VAR 0 2
70980: PUSH
70981: LD_INT 4
70983: MINUS
70984: PUSH
70985: LD_INT 2
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: LIST
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: LIST
70999: ST_TO_ADDR
// end ; 5 :
71000: GO 71140
71002: LD_INT 5
71004: DOUBLE
71005: EQUAL
71006: IFTRUE 71010
71008: GO 71139
71010: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71011: LD_ADDR_VAR 0 5
71015: PUSH
71016: LD_VAR 0 1
71020: PUSH
71021: LD_INT 4
71023: MINUS
71024: PUSH
71025: LD_VAR 0 2
71029: PUSH
71030: LD_INT 1
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: LIST
71037: PUSH
71038: LD_VAR 0 1
71042: PUSH
71043: LD_VAR 0 2
71047: PUSH
71048: LD_INT 4
71050: MINUS
71051: PUSH
71052: LD_INT 3
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: LIST
71059: PUSH
71060: LD_VAR 0 1
71064: PUSH
71065: LD_INT 4
71067: PLUS
71068: PUSH
71069: LD_VAR 0 2
71073: PUSH
71074: LD_INT 4
71076: PLUS
71077: PUSH
71078: LD_INT 5
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: LIST
71085: PUSH
71086: LD_VAR 0 1
71090: PUSH
71091: LD_INT 3
71093: PLUS
71094: PUSH
71095: LD_VAR 0 2
71099: PUSH
71100: LD_INT 4
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: LIST
71107: PUSH
71108: LD_VAR 0 1
71112: PUSH
71113: LD_VAR 0 2
71117: PUSH
71118: LD_INT 3
71120: PLUS
71121: PUSH
71122: LD_INT 0
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: LIST
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: LIST
71136: ST_TO_ADDR
// end ; end ;
71137: GO 71140
71139: POP
// result := list ;
71140: LD_ADDR_VAR 0 4
71144: PUSH
71145: LD_VAR 0 5
71149: ST_TO_ADDR
// end ;
71150: LD_VAR 0 4
71154: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71155: LD_INT 0
71157: PPUSH
71158: PPUSH
71159: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71160: LD_VAR 0 1
71164: NOT
71165: PUSH
71166: LD_VAR 0 2
71170: PUSH
71171: LD_INT 1
71173: PUSH
71174: LD_INT 2
71176: PUSH
71177: LD_INT 3
71179: PUSH
71180: LD_INT 4
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: IN
71189: NOT
71190: OR
71191: IFFALSE 71195
// exit ;
71193: GO 71287
// tmp := [ ] ;
71195: LD_ADDR_VAR 0 5
71199: PUSH
71200: EMPTY
71201: ST_TO_ADDR
// for i in units do
71202: LD_ADDR_VAR 0 4
71206: PUSH
71207: LD_VAR 0 1
71211: PUSH
71212: FOR_IN
71213: IFFALSE 71256
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71215: LD_ADDR_VAR 0 5
71219: PUSH
71220: LD_VAR 0 5
71224: PPUSH
71225: LD_VAR 0 5
71229: PUSH
71230: LD_INT 1
71232: PLUS
71233: PPUSH
71234: LD_VAR 0 4
71238: PPUSH
71239: LD_VAR 0 2
71243: PPUSH
71244: CALL_OW 259
71248: PPUSH
71249: CALL_OW 2
71253: ST_TO_ADDR
71254: GO 71212
71256: POP
71257: POP
// if not tmp then
71258: LD_VAR 0 5
71262: NOT
71263: IFFALSE 71267
// exit ;
71265: GO 71287
// result := SortListByListDesc ( units , tmp ) ;
71267: LD_ADDR_VAR 0 3
71271: PUSH
71272: LD_VAR 0 1
71276: PPUSH
71277: LD_VAR 0 5
71281: PPUSH
71282: CALL_OW 77
71286: ST_TO_ADDR
// end ;
71287: LD_VAR 0 3
71291: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71292: LD_INT 0
71294: PPUSH
71295: PPUSH
71296: PPUSH
// result := false ;
71297: LD_ADDR_VAR 0 3
71301: PUSH
71302: LD_INT 0
71304: ST_TO_ADDR
// x := GetX ( building ) ;
71305: LD_ADDR_VAR 0 4
71309: PUSH
71310: LD_VAR 0 2
71314: PPUSH
71315: CALL_OW 250
71319: ST_TO_ADDR
// y := GetY ( building ) ;
71320: LD_ADDR_VAR 0 5
71324: PUSH
71325: LD_VAR 0 2
71329: PPUSH
71330: CALL_OW 251
71334: ST_TO_ADDR
// if not building or not x or not y then
71335: LD_VAR 0 2
71339: NOT
71340: PUSH
71341: LD_VAR 0 4
71345: NOT
71346: OR
71347: PUSH
71348: LD_VAR 0 5
71352: NOT
71353: OR
71354: IFFALSE 71358
// exit ;
71356: GO 71450
// if GetTaskList ( unit ) then
71358: LD_VAR 0 1
71362: PPUSH
71363: CALL_OW 437
71367: IFFALSE 71450
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71369: LD_STRING e
71371: PUSH
71372: LD_VAR 0 1
71376: PPUSH
71377: CALL_OW 437
71381: PUSH
71382: LD_INT 1
71384: ARRAY
71385: PUSH
71386: LD_INT 1
71388: ARRAY
71389: EQUAL
71390: PUSH
71391: LD_VAR 0 4
71395: PUSH
71396: LD_VAR 0 1
71400: PPUSH
71401: CALL_OW 437
71405: PUSH
71406: LD_INT 1
71408: ARRAY
71409: PUSH
71410: LD_INT 2
71412: ARRAY
71413: EQUAL
71414: AND
71415: PUSH
71416: LD_VAR 0 5
71420: PUSH
71421: LD_VAR 0 1
71425: PPUSH
71426: CALL_OW 437
71430: PUSH
71431: LD_INT 1
71433: ARRAY
71434: PUSH
71435: LD_INT 3
71437: ARRAY
71438: EQUAL
71439: AND
71440: IFFALSE 71450
// result := true end ;
71442: LD_ADDR_VAR 0 3
71446: PUSH
71447: LD_INT 1
71449: ST_TO_ADDR
// end ;
71450: LD_VAR 0 3
71454: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71455: LD_INT 0
71457: PPUSH
// result := false ;
71458: LD_ADDR_VAR 0 4
71462: PUSH
71463: LD_INT 0
71465: ST_TO_ADDR
// if GetTaskList ( unit ) then
71466: LD_VAR 0 1
71470: PPUSH
71471: CALL_OW 437
71475: IFFALSE 71558
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71477: LD_STRING M
71479: PUSH
71480: LD_VAR 0 1
71484: PPUSH
71485: CALL_OW 437
71489: PUSH
71490: LD_INT 1
71492: ARRAY
71493: PUSH
71494: LD_INT 1
71496: ARRAY
71497: EQUAL
71498: PUSH
71499: LD_VAR 0 2
71503: PUSH
71504: LD_VAR 0 1
71508: PPUSH
71509: CALL_OW 437
71513: PUSH
71514: LD_INT 1
71516: ARRAY
71517: PUSH
71518: LD_INT 2
71520: ARRAY
71521: EQUAL
71522: AND
71523: PUSH
71524: LD_VAR 0 3
71528: PUSH
71529: LD_VAR 0 1
71533: PPUSH
71534: CALL_OW 437
71538: PUSH
71539: LD_INT 1
71541: ARRAY
71542: PUSH
71543: LD_INT 3
71545: ARRAY
71546: EQUAL
71547: AND
71548: IFFALSE 71558
// result := true ;
71550: LD_ADDR_VAR 0 4
71554: PUSH
71555: LD_INT 1
71557: ST_TO_ADDR
// end ; end ;
71558: LD_VAR 0 4
71562: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71563: LD_INT 0
71565: PPUSH
71566: PPUSH
71567: PPUSH
71568: PPUSH
// if not unit or not area then
71569: LD_VAR 0 1
71573: NOT
71574: PUSH
71575: LD_VAR 0 2
71579: NOT
71580: OR
71581: IFFALSE 71585
// exit ;
71583: GO 71749
// tmp := AreaToList ( area , i ) ;
71585: LD_ADDR_VAR 0 6
71589: PUSH
71590: LD_VAR 0 2
71594: PPUSH
71595: LD_VAR 0 5
71599: PPUSH
71600: CALL_OW 517
71604: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71605: LD_ADDR_VAR 0 5
71609: PUSH
71610: DOUBLE
71611: LD_INT 1
71613: DEC
71614: ST_TO_ADDR
71615: LD_VAR 0 6
71619: PUSH
71620: LD_INT 1
71622: ARRAY
71623: PUSH
71624: FOR_TO
71625: IFFALSE 71747
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71627: LD_ADDR_VAR 0 7
71631: PUSH
71632: LD_VAR 0 6
71636: PUSH
71637: LD_INT 1
71639: ARRAY
71640: PUSH
71641: LD_VAR 0 5
71645: ARRAY
71646: PUSH
71647: LD_VAR 0 6
71651: PUSH
71652: LD_INT 2
71654: ARRAY
71655: PUSH
71656: LD_VAR 0 5
71660: ARRAY
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71666: LD_VAR 0 7
71670: PUSH
71671: LD_INT 1
71673: ARRAY
71674: PPUSH
71675: LD_VAR 0 7
71679: PUSH
71680: LD_INT 2
71682: ARRAY
71683: PPUSH
71684: CALL_OW 428
71688: PUSH
71689: LD_INT 0
71691: EQUAL
71692: IFFALSE 71745
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71694: LD_VAR 0 1
71698: PPUSH
71699: LD_VAR 0 7
71703: PUSH
71704: LD_INT 1
71706: ARRAY
71707: PPUSH
71708: LD_VAR 0 7
71712: PUSH
71713: LD_INT 2
71715: ARRAY
71716: PPUSH
71717: LD_VAR 0 3
71721: PPUSH
71722: CALL_OW 48
// result := IsPlaced ( unit ) ;
71726: LD_ADDR_VAR 0 4
71730: PUSH
71731: LD_VAR 0 1
71735: PPUSH
71736: CALL_OW 305
71740: ST_TO_ADDR
// exit ;
71741: POP
71742: POP
71743: GO 71749
// end ; end ;
71745: GO 71624
71747: POP
71748: POP
// end ;
71749: LD_VAR 0 4
71753: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71754: LD_INT 0
71756: PPUSH
71757: PPUSH
71758: PPUSH
// if not side or side > 8 then
71759: LD_VAR 0 1
71763: NOT
71764: PUSH
71765: LD_VAR 0 1
71769: PUSH
71770: LD_INT 8
71772: GREATER
71773: OR
71774: IFFALSE 71778
// exit ;
71776: GO 71965
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71778: LD_ADDR_VAR 0 4
71782: PUSH
71783: LD_INT 22
71785: PUSH
71786: LD_VAR 0 1
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: PUSH
71795: LD_INT 21
71797: PUSH
71798: LD_INT 3
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: PPUSH
71809: CALL_OW 69
71813: ST_TO_ADDR
// if not tmp then
71814: LD_VAR 0 4
71818: NOT
71819: IFFALSE 71823
// exit ;
71821: GO 71965
// enable_addtolog := true ;
71823: LD_ADDR_OWVAR 81
71827: PUSH
71828: LD_INT 1
71830: ST_TO_ADDR
// AddToLog ( [ ) ;
71831: LD_STRING [
71833: PPUSH
71834: CALL_OW 561
// for i in tmp do
71838: LD_ADDR_VAR 0 3
71842: PUSH
71843: LD_VAR 0 4
71847: PUSH
71848: FOR_IN
71849: IFFALSE 71956
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71851: LD_STRING [
71853: PUSH
71854: LD_VAR 0 3
71858: PPUSH
71859: CALL_OW 266
71863: STR
71864: PUSH
71865: LD_STRING , 
71867: STR
71868: PUSH
71869: LD_VAR 0 3
71873: PPUSH
71874: CALL_OW 250
71878: STR
71879: PUSH
71880: LD_STRING , 
71882: STR
71883: PUSH
71884: LD_VAR 0 3
71888: PPUSH
71889: CALL_OW 251
71893: STR
71894: PUSH
71895: LD_STRING , 
71897: STR
71898: PUSH
71899: LD_VAR 0 3
71903: PPUSH
71904: CALL_OW 254
71908: STR
71909: PUSH
71910: LD_STRING , 
71912: STR
71913: PUSH
71914: LD_VAR 0 3
71918: PPUSH
71919: LD_INT 1
71921: PPUSH
71922: CALL_OW 268
71926: STR
71927: PUSH
71928: LD_STRING , 
71930: STR
71931: PUSH
71932: LD_VAR 0 3
71936: PPUSH
71937: LD_INT 2
71939: PPUSH
71940: CALL_OW 268
71944: STR
71945: PUSH
71946: LD_STRING ],
71948: STR
71949: PPUSH
71950: CALL_OW 561
// end ;
71954: GO 71848
71956: POP
71957: POP
// AddToLog ( ]; ) ;
71958: LD_STRING ];
71960: PPUSH
71961: CALL_OW 561
// end ;
71965: LD_VAR 0 2
71969: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71970: LD_INT 0
71972: PPUSH
71973: PPUSH
71974: PPUSH
71975: PPUSH
71976: PPUSH
// if not area or not rate or not max then
71977: LD_VAR 0 1
71981: NOT
71982: PUSH
71983: LD_VAR 0 2
71987: NOT
71988: OR
71989: PUSH
71990: LD_VAR 0 4
71994: NOT
71995: OR
71996: IFFALSE 72000
// exit ;
71998: GO 72192
// while 1 do
72000: LD_INT 1
72002: IFFALSE 72192
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72004: LD_ADDR_VAR 0 9
72008: PUSH
72009: LD_VAR 0 1
72013: PPUSH
72014: LD_INT 1
72016: PPUSH
72017: CALL_OW 287
72021: PUSH
72022: LD_INT 10
72024: MUL
72025: ST_TO_ADDR
// r := rate / 10 ;
72026: LD_ADDR_VAR 0 7
72030: PUSH
72031: LD_VAR 0 2
72035: PUSH
72036: LD_INT 10
72038: DIVREAL
72039: ST_TO_ADDR
// time := 1 1$00 ;
72040: LD_ADDR_VAR 0 8
72044: PUSH
72045: LD_INT 2100
72047: ST_TO_ADDR
// if amount < min then
72048: LD_VAR 0 9
72052: PUSH
72053: LD_VAR 0 3
72057: LESS
72058: IFFALSE 72076
// r := r * 2 else
72060: LD_ADDR_VAR 0 7
72064: PUSH
72065: LD_VAR 0 7
72069: PUSH
72070: LD_INT 2
72072: MUL
72073: ST_TO_ADDR
72074: GO 72102
// if amount > max then
72076: LD_VAR 0 9
72080: PUSH
72081: LD_VAR 0 4
72085: GREATER
72086: IFFALSE 72102
// r := r / 2 ;
72088: LD_ADDR_VAR 0 7
72092: PUSH
72093: LD_VAR 0 7
72097: PUSH
72098: LD_INT 2
72100: DIVREAL
72101: ST_TO_ADDR
// time := time / r ;
72102: LD_ADDR_VAR 0 8
72106: PUSH
72107: LD_VAR 0 8
72111: PUSH
72112: LD_VAR 0 7
72116: DIVREAL
72117: ST_TO_ADDR
// if time < 0 then
72118: LD_VAR 0 8
72122: PUSH
72123: LD_INT 0
72125: LESS
72126: IFFALSE 72143
// time := time * - 1 ;
72128: LD_ADDR_VAR 0 8
72132: PUSH
72133: LD_VAR 0 8
72137: PUSH
72138: LD_INT 1
72140: NEG
72141: MUL
72142: ST_TO_ADDR
// wait ( time ) ;
72143: LD_VAR 0 8
72147: PPUSH
72148: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72152: LD_INT 35
72154: PPUSH
72155: LD_INT 875
72157: PPUSH
72158: CALL_OW 12
72162: PPUSH
72163: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72167: LD_INT 1
72169: PPUSH
72170: LD_INT 5
72172: PPUSH
72173: CALL_OW 12
72177: PPUSH
72178: LD_VAR 0 1
72182: PPUSH
72183: LD_INT 1
72185: PPUSH
72186: CALL_OW 55
// end ;
72190: GO 72000
// end ;
72192: LD_VAR 0 5
72196: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72197: LD_INT 0
72199: PPUSH
72200: PPUSH
72201: PPUSH
72202: PPUSH
72203: PPUSH
72204: PPUSH
72205: PPUSH
72206: PPUSH
// if not turrets or not factories then
72207: LD_VAR 0 1
72211: NOT
72212: PUSH
72213: LD_VAR 0 2
72217: NOT
72218: OR
72219: IFFALSE 72223
// exit ;
72221: GO 72530
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72223: LD_ADDR_VAR 0 10
72227: PUSH
72228: LD_INT 5
72230: PUSH
72231: LD_INT 6
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: LD_INT 2
72240: PUSH
72241: LD_INT 4
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: PUSH
72248: LD_INT 3
72250: PUSH
72251: LD_INT 5
72253: PUSH
72254: EMPTY
72255: LIST
72256: LIST
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: LIST
72262: PUSH
72263: LD_INT 24
72265: PUSH
72266: LD_INT 25
72268: PUSH
72269: EMPTY
72270: LIST
72271: LIST
72272: PUSH
72273: LD_INT 23
72275: PUSH
72276: LD_INT 27
72278: PUSH
72279: EMPTY
72280: LIST
72281: LIST
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: PUSH
72287: LD_INT 42
72289: PUSH
72290: LD_INT 43
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: PUSH
72297: LD_INT 44
72299: PUSH
72300: LD_INT 46
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: PUSH
72307: LD_INT 45
72309: PUSH
72310: LD_INT 47
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: EMPTY
72318: LIST
72319: LIST
72320: LIST
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: LIST
72326: ST_TO_ADDR
// result := [ ] ;
72327: LD_ADDR_VAR 0 3
72331: PUSH
72332: EMPTY
72333: ST_TO_ADDR
// for i in turrets do
72334: LD_ADDR_VAR 0 4
72338: PUSH
72339: LD_VAR 0 1
72343: PUSH
72344: FOR_IN
72345: IFFALSE 72528
// begin nat := GetNation ( i ) ;
72347: LD_ADDR_VAR 0 7
72351: PUSH
72352: LD_VAR 0 4
72356: PPUSH
72357: CALL_OW 248
72361: ST_TO_ADDR
// weapon := 0 ;
72362: LD_ADDR_VAR 0 8
72366: PUSH
72367: LD_INT 0
72369: ST_TO_ADDR
// if not nat then
72370: LD_VAR 0 7
72374: NOT
72375: IFFALSE 72379
// continue ;
72377: GO 72344
// for j in list [ nat ] do
72379: LD_ADDR_VAR 0 5
72383: PUSH
72384: LD_VAR 0 10
72388: PUSH
72389: LD_VAR 0 7
72393: ARRAY
72394: PUSH
72395: FOR_IN
72396: IFFALSE 72437
// if GetBWeapon ( i ) = j [ 1 ] then
72398: LD_VAR 0 4
72402: PPUSH
72403: CALL_OW 269
72407: PUSH
72408: LD_VAR 0 5
72412: PUSH
72413: LD_INT 1
72415: ARRAY
72416: EQUAL
72417: IFFALSE 72435
// begin weapon := j [ 2 ] ;
72419: LD_ADDR_VAR 0 8
72423: PUSH
72424: LD_VAR 0 5
72428: PUSH
72429: LD_INT 2
72431: ARRAY
72432: ST_TO_ADDR
// break ;
72433: GO 72437
// end ;
72435: GO 72395
72437: POP
72438: POP
// if not weapon then
72439: LD_VAR 0 8
72443: NOT
72444: IFFALSE 72448
// continue ;
72446: GO 72344
// for k in factories do
72448: LD_ADDR_VAR 0 6
72452: PUSH
72453: LD_VAR 0 2
72457: PUSH
72458: FOR_IN
72459: IFFALSE 72524
// begin weapons := AvailableWeaponList ( k ) ;
72461: LD_ADDR_VAR 0 9
72465: PUSH
72466: LD_VAR 0 6
72470: PPUSH
72471: CALL_OW 478
72475: ST_TO_ADDR
// if not weapons then
72476: LD_VAR 0 9
72480: NOT
72481: IFFALSE 72485
// continue ;
72483: GO 72458
// if weapon in weapons then
72485: LD_VAR 0 8
72489: PUSH
72490: LD_VAR 0 9
72494: IN
72495: IFFALSE 72522
// begin result := [ i , weapon ] ;
72497: LD_ADDR_VAR 0 3
72501: PUSH
72502: LD_VAR 0 4
72506: PUSH
72507: LD_VAR 0 8
72511: PUSH
72512: EMPTY
72513: LIST
72514: LIST
72515: ST_TO_ADDR
// exit ;
72516: POP
72517: POP
72518: POP
72519: POP
72520: GO 72530
// end ; end ;
72522: GO 72458
72524: POP
72525: POP
// end ;
72526: GO 72344
72528: POP
72529: POP
// end ;
72530: LD_VAR 0 3
72534: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72535: LD_INT 0
72537: PPUSH
// if not side or side > 8 then
72538: LD_VAR 0 3
72542: NOT
72543: PUSH
72544: LD_VAR 0 3
72548: PUSH
72549: LD_INT 8
72551: GREATER
72552: OR
72553: IFFALSE 72557
// exit ;
72555: GO 72616
// if not range then
72557: LD_VAR 0 4
72561: NOT
72562: IFFALSE 72573
// range := - 12 ;
72564: LD_ADDR_VAR 0 4
72568: PUSH
72569: LD_INT 12
72571: NEG
72572: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72573: LD_VAR 0 1
72577: PPUSH
72578: LD_VAR 0 2
72582: PPUSH
72583: LD_VAR 0 3
72587: PPUSH
72588: LD_VAR 0 4
72592: PPUSH
72593: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72597: LD_VAR 0 1
72601: PPUSH
72602: LD_VAR 0 2
72606: PPUSH
72607: LD_VAR 0 3
72611: PPUSH
72612: CALL_OW 331
// end ;
72616: LD_VAR 0 5
72620: RET
// export function Video ( mode ) ; begin
72621: LD_INT 0
72623: PPUSH
// ingame_video = mode ;
72624: LD_ADDR_OWVAR 52
72628: PUSH
72629: LD_VAR 0 1
72633: ST_TO_ADDR
// interface_hidden = mode ;
72634: LD_ADDR_OWVAR 54
72638: PUSH
72639: LD_VAR 0 1
72643: ST_TO_ADDR
// end ;
72644: LD_VAR 0 2
72648: RET
// export function Join ( array , element ) ; begin
72649: LD_INT 0
72651: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72652: LD_ADDR_VAR 0 3
72656: PUSH
72657: LD_VAR 0 1
72661: PPUSH
72662: LD_VAR 0 1
72666: PUSH
72667: LD_INT 1
72669: PLUS
72670: PPUSH
72671: LD_VAR 0 2
72675: PPUSH
72676: CALL_OW 1
72680: ST_TO_ADDR
// end ;
72681: LD_VAR 0 3
72685: RET
// export function JoinUnion ( array , element ) ; begin
72686: LD_INT 0
72688: PPUSH
// result := array union element ;
72689: LD_ADDR_VAR 0 3
72693: PUSH
72694: LD_VAR 0 1
72698: PUSH
72699: LD_VAR 0 2
72703: UNION
72704: ST_TO_ADDR
// end ;
72705: LD_VAR 0 3
72709: RET
// export function GetBehemoths ( side ) ; begin
72710: LD_INT 0
72712: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72713: LD_ADDR_VAR 0 2
72717: PUSH
72718: LD_INT 22
72720: PUSH
72721: LD_VAR 0 1
72725: PUSH
72726: EMPTY
72727: LIST
72728: LIST
72729: PUSH
72730: LD_INT 31
72732: PUSH
72733: LD_INT 25
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PPUSH
72744: CALL_OW 69
72748: ST_TO_ADDR
// end ;
72749: LD_VAR 0 2
72753: RET
// export function Shuffle ( array ) ; var i , index ; begin
72754: LD_INT 0
72756: PPUSH
72757: PPUSH
72758: PPUSH
// result := [ ] ;
72759: LD_ADDR_VAR 0 2
72763: PUSH
72764: EMPTY
72765: ST_TO_ADDR
// if not array then
72766: LD_VAR 0 1
72770: NOT
72771: IFFALSE 72775
// exit ;
72773: GO 72874
// Randomize ;
72775: CALL_OW 10
// for i = array downto 1 do
72779: LD_ADDR_VAR 0 3
72783: PUSH
72784: DOUBLE
72785: LD_VAR 0 1
72789: INC
72790: ST_TO_ADDR
72791: LD_INT 1
72793: PUSH
72794: FOR_DOWNTO
72795: IFFALSE 72872
// begin index := rand ( 1 , array ) ;
72797: LD_ADDR_VAR 0 4
72801: PUSH
72802: LD_INT 1
72804: PPUSH
72805: LD_VAR 0 1
72809: PPUSH
72810: CALL_OW 12
72814: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72815: LD_ADDR_VAR 0 2
72819: PUSH
72820: LD_VAR 0 2
72824: PPUSH
72825: LD_VAR 0 2
72829: PUSH
72830: LD_INT 1
72832: PLUS
72833: PPUSH
72834: LD_VAR 0 1
72838: PUSH
72839: LD_VAR 0 4
72843: ARRAY
72844: PPUSH
72845: CALL_OW 2
72849: ST_TO_ADDR
// array := Delete ( array , index ) ;
72850: LD_ADDR_VAR 0 1
72854: PUSH
72855: LD_VAR 0 1
72859: PPUSH
72860: LD_VAR 0 4
72864: PPUSH
72865: CALL_OW 3
72869: ST_TO_ADDR
// end ;
72870: GO 72794
72872: POP
72873: POP
// end ;
72874: LD_VAR 0 2
72878: RET
// export function GetBaseMaterials ( base ) ; begin
72879: LD_INT 0
72881: PPUSH
// result := [ 0 , 0 , 0 ] ;
72882: LD_ADDR_VAR 0 2
72886: PUSH
72887: LD_INT 0
72889: PUSH
72890: LD_INT 0
72892: PUSH
72893: LD_INT 0
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: LIST
72900: ST_TO_ADDR
// if not base then
72901: LD_VAR 0 1
72905: NOT
72906: IFFALSE 72910
// exit ;
72908: GO 72959
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72910: LD_ADDR_VAR 0 2
72914: PUSH
72915: LD_VAR 0 1
72919: PPUSH
72920: LD_INT 1
72922: PPUSH
72923: CALL_OW 275
72927: PUSH
72928: LD_VAR 0 1
72932: PPUSH
72933: LD_INT 2
72935: PPUSH
72936: CALL_OW 275
72940: PUSH
72941: LD_VAR 0 1
72945: PPUSH
72946: LD_INT 3
72948: PPUSH
72949: CALL_OW 275
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: LIST
72958: ST_TO_ADDR
// end ;
72959: LD_VAR 0 2
72963: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72964: LD_INT 0
72966: PPUSH
72967: PPUSH
// result := array ;
72968: LD_ADDR_VAR 0 3
72972: PUSH
72973: LD_VAR 0 1
72977: ST_TO_ADDR
// if size > 0 then
72978: LD_VAR 0 2
72982: PUSH
72983: LD_INT 0
72985: GREATER
72986: IFFALSE 73032
// for i := array downto size do
72988: LD_ADDR_VAR 0 4
72992: PUSH
72993: DOUBLE
72994: LD_VAR 0 1
72998: INC
72999: ST_TO_ADDR
73000: LD_VAR 0 2
73004: PUSH
73005: FOR_DOWNTO
73006: IFFALSE 73030
// result := Delete ( result , result ) ;
73008: LD_ADDR_VAR 0 3
73012: PUSH
73013: LD_VAR 0 3
73017: PPUSH
73018: LD_VAR 0 3
73022: PPUSH
73023: CALL_OW 3
73027: ST_TO_ADDR
73028: GO 73005
73030: POP
73031: POP
// end ;
73032: LD_VAR 0 3
73036: RET
// export function ComExit ( unit ) ; var tmp ; begin
73037: LD_INT 0
73039: PPUSH
73040: PPUSH
// if not IsInUnit ( unit ) then
73041: LD_VAR 0 1
73045: PPUSH
73046: CALL_OW 310
73050: NOT
73051: IFFALSE 73055
// exit ;
73053: GO 73115
// tmp := IsInUnit ( unit ) ;
73055: LD_ADDR_VAR 0 3
73059: PUSH
73060: LD_VAR 0 1
73064: PPUSH
73065: CALL_OW 310
73069: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73070: LD_VAR 0 3
73074: PPUSH
73075: CALL_OW 247
73079: PUSH
73080: LD_INT 2
73082: EQUAL
73083: IFFALSE 73096
// ComExitVehicle ( unit ) else
73085: LD_VAR 0 1
73089: PPUSH
73090: CALL_OW 121
73094: GO 73105
// ComExitBuilding ( unit ) ;
73096: LD_VAR 0 1
73100: PPUSH
73101: CALL_OW 122
// result := tmp ;
73105: LD_ADDR_VAR 0 2
73109: PUSH
73110: LD_VAR 0 3
73114: ST_TO_ADDR
// end ;
73115: LD_VAR 0 2
73119: RET
// export function ComExitAll ( units ) ; var i ; begin
73120: LD_INT 0
73122: PPUSH
73123: PPUSH
// if not units then
73124: LD_VAR 0 1
73128: NOT
73129: IFFALSE 73133
// exit ;
73131: GO 73159
// for i in units do
73133: LD_ADDR_VAR 0 3
73137: PUSH
73138: LD_VAR 0 1
73142: PUSH
73143: FOR_IN
73144: IFFALSE 73157
// ComExit ( i ) ;
73146: LD_VAR 0 3
73150: PPUSH
73151: CALL 73037 0 1
73155: GO 73143
73157: POP
73158: POP
// end ;
73159: LD_VAR 0 2
73163: RET
// export function ResetHc ; begin
73164: LD_INT 0
73166: PPUSH
// InitHc ;
73167: CALL_OW 19
// hc_importance := 0 ;
73171: LD_ADDR_OWVAR 32
73175: PUSH
73176: LD_INT 0
73178: ST_TO_ADDR
// end ;
73179: LD_VAR 0 1
73183: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73184: LD_INT 0
73186: PPUSH
73187: PPUSH
73188: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73189: LD_ADDR_VAR 0 6
73193: PUSH
73194: LD_VAR 0 1
73198: PUSH
73199: LD_VAR 0 3
73203: PLUS
73204: PUSH
73205: LD_INT 2
73207: DIV
73208: ST_TO_ADDR
// if _x < 0 then
73209: LD_VAR 0 6
73213: PUSH
73214: LD_INT 0
73216: LESS
73217: IFFALSE 73234
// _x := _x * - 1 ;
73219: LD_ADDR_VAR 0 6
73223: PUSH
73224: LD_VAR 0 6
73228: PUSH
73229: LD_INT 1
73231: NEG
73232: MUL
73233: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73234: LD_ADDR_VAR 0 7
73238: PUSH
73239: LD_VAR 0 2
73243: PUSH
73244: LD_VAR 0 4
73248: PLUS
73249: PUSH
73250: LD_INT 2
73252: DIV
73253: ST_TO_ADDR
// if _y < 0 then
73254: LD_VAR 0 7
73258: PUSH
73259: LD_INT 0
73261: LESS
73262: IFFALSE 73279
// _y := _y * - 1 ;
73264: LD_ADDR_VAR 0 7
73268: PUSH
73269: LD_VAR 0 7
73273: PUSH
73274: LD_INT 1
73276: NEG
73277: MUL
73278: ST_TO_ADDR
// result := [ _x , _y ] ;
73279: LD_ADDR_VAR 0 5
73283: PUSH
73284: LD_VAR 0 6
73288: PUSH
73289: LD_VAR 0 7
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: ST_TO_ADDR
// end ;
73298: LD_VAR 0 5
73302: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73303: LD_INT 0
73305: PPUSH
73306: PPUSH
73307: PPUSH
73308: PPUSH
// task := GetTaskList ( unit ) ;
73309: LD_ADDR_VAR 0 7
73313: PUSH
73314: LD_VAR 0 1
73318: PPUSH
73319: CALL_OW 437
73323: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73324: LD_VAR 0 7
73328: NOT
73329: PUSH
73330: LD_VAR 0 1
73334: PPUSH
73335: LD_VAR 0 2
73339: PPUSH
73340: CALL_OW 308
73344: NOT
73345: AND
73346: IFFALSE 73350
// exit ;
73348: GO 73468
// if IsInArea ( unit , area ) then
73350: LD_VAR 0 1
73354: PPUSH
73355: LD_VAR 0 2
73359: PPUSH
73360: CALL_OW 308
73364: IFFALSE 73382
// begin ComMoveToArea ( unit , goAway ) ;
73366: LD_VAR 0 1
73370: PPUSH
73371: LD_VAR 0 3
73375: PPUSH
73376: CALL_OW 113
// exit ;
73380: GO 73468
// end ; if task [ 1 ] [ 1 ] <> M then
73382: LD_VAR 0 7
73386: PUSH
73387: LD_INT 1
73389: ARRAY
73390: PUSH
73391: LD_INT 1
73393: ARRAY
73394: PUSH
73395: LD_STRING M
73397: NONEQUAL
73398: IFFALSE 73402
// exit ;
73400: GO 73468
// x := task [ 1 ] [ 2 ] ;
73402: LD_ADDR_VAR 0 5
73406: PUSH
73407: LD_VAR 0 7
73411: PUSH
73412: LD_INT 1
73414: ARRAY
73415: PUSH
73416: LD_INT 2
73418: ARRAY
73419: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73420: LD_ADDR_VAR 0 6
73424: PUSH
73425: LD_VAR 0 7
73429: PUSH
73430: LD_INT 1
73432: ARRAY
73433: PUSH
73434: LD_INT 3
73436: ARRAY
73437: ST_TO_ADDR
// if InArea ( x , y , area ) then
73438: LD_VAR 0 5
73442: PPUSH
73443: LD_VAR 0 6
73447: PPUSH
73448: LD_VAR 0 2
73452: PPUSH
73453: CALL_OW 309
73457: IFFALSE 73468
// ComStop ( unit ) ;
73459: LD_VAR 0 1
73463: PPUSH
73464: CALL_OW 141
// end ;
73468: LD_VAR 0 4
73472: RET
// export function Abs ( value ) ; begin
73473: LD_INT 0
73475: PPUSH
// result := value ;
73476: LD_ADDR_VAR 0 2
73480: PUSH
73481: LD_VAR 0 1
73485: ST_TO_ADDR
// if value < 0 then
73486: LD_VAR 0 1
73490: PUSH
73491: LD_INT 0
73493: LESS
73494: IFFALSE 73511
// result := value * - 1 ;
73496: LD_ADDR_VAR 0 2
73500: PUSH
73501: LD_VAR 0 1
73505: PUSH
73506: LD_INT 1
73508: NEG
73509: MUL
73510: ST_TO_ADDR
// end ;
73511: LD_VAR 0 2
73515: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73516: LD_INT 0
73518: PPUSH
73519: PPUSH
73520: PPUSH
73521: PPUSH
73522: PPUSH
73523: PPUSH
73524: PPUSH
73525: PPUSH
// if not unit or not building then
73526: LD_VAR 0 1
73530: NOT
73531: PUSH
73532: LD_VAR 0 2
73536: NOT
73537: OR
73538: IFFALSE 73542
// exit ;
73540: GO 73768
// x := GetX ( building ) ;
73542: LD_ADDR_VAR 0 4
73546: PUSH
73547: LD_VAR 0 2
73551: PPUSH
73552: CALL_OW 250
73556: ST_TO_ADDR
// y := GetY ( building ) ;
73557: LD_ADDR_VAR 0 6
73561: PUSH
73562: LD_VAR 0 2
73566: PPUSH
73567: CALL_OW 251
73571: ST_TO_ADDR
// d := GetDir ( building ) ;
73572: LD_ADDR_VAR 0 8
73576: PUSH
73577: LD_VAR 0 2
73581: PPUSH
73582: CALL_OW 254
73586: ST_TO_ADDR
// r := 4 ;
73587: LD_ADDR_VAR 0 9
73591: PUSH
73592: LD_INT 4
73594: ST_TO_ADDR
// for i := 1 to 5 do
73595: LD_ADDR_VAR 0 10
73599: PUSH
73600: DOUBLE
73601: LD_INT 1
73603: DEC
73604: ST_TO_ADDR
73605: LD_INT 5
73607: PUSH
73608: FOR_TO
73609: IFFALSE 73766
// begin _x := ShiftX ( x , d , r + i ) ;
73611: LD_ADDR_VAR 0 5
73615: PUSH
73616: LD_VAR 0 4
73620: PPUSH
73621: LD_VAR 0 8
73625: PPUSH
73626: LD_VAR 0 9
73630: PUSH
73631: LD_VAR 0 10
73635: PLUS
73636: PPUSH
73637: CALL_OW 272
73641: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73642: LD_ADDR_VAR 0 7
73646: PUSH
73647: LD_VAR 0 6
73651: PPUSH
73652: LD_VAR 0 8
73656: PPUSH
73657: LD_VAR 0 9
73661: PUSH
73662: LD_VAR 0 10
73666: PLUS
73667: PPUSH
73668: CALL_OW 273
73672: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73673: LD_VAR 0 5
73677: PPUSH
73678: LD_VAR 0 7
73682: PPUSH
73683: CALL_OW 488
73687: PUSH
73688: LD_VAR 0 5
73692: PPUSH
73693: LD_VAR 0 7
73697: PPUSH
73698: CALL_OW 428
73702: PPUSH
73703: CALL_OW 247
73707: PUSH
73708: LD_INT 3
73710: PUSH
73711: LD_INT 2
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: IN
73718: NOT
73719: AND
73720: IFFALSE 73764
// begin ComMoveXY ( unit , _x , _y ) ;
73722: LD_VAR 0 1
73726: PPUSH
73727: LD_VAR 0 5
73731: PPUSH
73732: LD_VAR 0 7
73736: PPUSH
73737: CALL_OW 111
// result := [ _x , _y ] ;
73741: LD_ADDR_VAR 0 3
73745: PUSH
73746: LD_VAR 0 5
73750: PUSH
73751: LD_VAR 0 7
73755: PUSH
73756: EMPTY
73757: LIST
73758: LIST
73759: ST_TO_ADDR
// exit ;
73760: POP
73761: POP
73762: GO 73768
// end ; end ;
73764: GO 73608
73766: POP
73767: POP
// end ;
73768: LD_VAR 0 3
73772: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73773: LD_INT 0
73775: PPUSH
73776: PPUSH
73777: PPUSH
// result := 0 ;
73778: LD_ADDR_VAR 0 3
73782: PUSH
73783: LD_INT 0
73785: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73786: LD_VAR 0 1
73790: PUSH
73791: LD_INT 0
73793: LESS
73794: PUSH
73795: LD_VAR 0 1
73799: PUSH
73800: LD_INT 8
73802: GREATER
73803: OR
73804: PUSH
73805: LD_VAR 0 2
73809: PUSH
73810: LD_INT 0
73812: LESS
73813: OR
73814: PUSH
73815: LD_VAR 0 2
73819: PUSH
73820: LD_INT 8
73822: GREATER
73823: OR
73824: IFFALSE 73828
// exit ;
73826: GO 73903
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73828: LD_ADDR_VAR 0 4
73832: PUSH
73833: LD_INT 22
73835: PUSH
73836: LD_VAR 0 2
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: PPUSH
73845: CALL_OW 69
73849: PUSH
73850: FOR_IN
73851: IFFALSE 73901
// begin un := UnitShoot ( i ) ;
73853: LD_ADDR_VAR 0 5
73857: PUSH
73858: LD_VAR 0 4
73862: PPUSH
73863: CALL_OW 504
73867: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73868: LD_VAR 0 5
73872: PPUSH
73873: CALL_OW 255
73877: PUSH
73878: LD_VAR 0 1
73882: EQUAL
73883: IFFALSE 73899
// begin result := un ;
73885: LD_ADDR_VAR 0 3
73889: PUSH
73890: LD_VAR 0 5
73894: ST_TO_ADDR
// exit ;
73895: POP
73896: POP
73897: GO 73903
// end ; end ;
73899: GO 73850
73901: POP
73902: POP
// end ;
73903: LD_VAR 0 3
73907: RET
// export function GetCargoBay ( units ) ; begin
73908: LD_INT 0
73910: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73911: LD_ADDR_VAR 0 2
73915: PUSH
73916: LD_VAR 0 1
73920: PPUSH
73921: LD_INT 2
73923: PUSH
73924: LD_INT 34
73926: PUSH
73927: LD_INT 12
73929: PUSH
73930: EMPTY
73931: LIST
73932: LIST
73933: PUSH
73934: LD_INT 34
73936: PUSH
73937: LD_INT 51
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: PUSH
73944: LD_INT 34
73946: PUSH
73947: LD_INT 32
73949: PUSH
73950: EMPTY
73951: LIST
73952: LIST
73953: PUSH
73954: LD_INT 34
73956: PUSH
73957: LD_EXP 63
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PUSH
73966: EMPTY
73967: LIST
73968: LIST
73969: LIST
73970: LIST
73971: LIST
73972: PPUSH
73973: CALL_OW 72
73977: ST_TO_ADDR
// end ;
73978: LD_VAR 0 2
73982: RET
// export function Negate ( value ) ; begin
73983: LD_INT 0
73985: PPUSH
// result := not value ;
73986: LD_ADDR_VAR 0 2
73990: PUSH
73991: LD_VAR 0 1
73995: NOT
73996: ST_TO_ADDR
// end ;
73997: LD_VAR 0 2
74001: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
74002: LD_INT 0
74004: PPUSH
// if x1 = x2 then
74005: LD_VAR 0 1
74009: PUSH
74010: LD_VAR 0 3
74014: EQUAL
74015: IFFALSE 74049
// begin if y1 > y2 then
74017: LD_VAR 0 2
74021: PUSH
74022: LD_VAR 0 4
74026: GREATER
74027: IFFALSE 74039
// result := 0 else
74029: LD_ADDR_VAR 0 5
74033: PUSH
74034: LD_INT 0
74036: ST_TO_ADDR
74037: GO 74047
// result := 3 ;
74039: LD_ADDR_VAR 0 5
74043: PUSH
74044: LD_INT 3
74046: ST_TO_ADDR
// exit ;
74047: GO 74135
// end ; if y1 = y2 then
74049: LD_VAR 0 2
74053: PUSH
74054: LD_VAR 0 4
74058: EQUAL
74059: IFFALSE 74093
// begin if x1 > x2 then
74061: LD_VAR 0 1
74065: PUSH
74066: LD_VAR 0 3
74070: GREATER
74071: IFFALSE 74083
// result := 1 else
74073: LD_ADDR_VAR 0 5
74077: PUSH
74078: LD_INT 1
74080: ST_TO_ADDR
74081: GO 74091
// result := 4 ;
74083: LD_ADDR_VAR 0 5
74087: PUSH
74088: LD_INT 4
74090: ST_TO_ADDR
// exit ;
74091: GO 74135
// end ; if x1 > x2 and y1 > y2 then
74093: LD_VAR 0 1
74097: PUSH
74098: LD_VAR 0 3
74102: GREATER
74103: PUSH
74104: LD_VAR 0 2
74108: PUSH
74109: LD_VAR 0 4
74113: GREATER
74114: AND
74115: IFFALSE 74127
// result := 2 else
74117: LD_ADDR_VAR 0 5
74121: PUSH
74122: LD_INT 2
74124: ST_TO_ADDR
74125: GO 74135
// result := 5 ;
74127: LD_ADDR_VAR 0 5
74131: PUSH
74132: LD_INT 5
74134: ST_TO_ADDR
// end ;
74135: LD_VAR 0 5
74139: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74140: LD_INT 0
74142: PPUSH
74143: PPUSH
// if not driver or not IsInUnit ( driver ) then
74144: LD_VAR 0 1
74148: NOT
74149: PUSH
74150: LD_VAR 0 1
74154: PPUSH
74155: CALL_OW 310
74159: NOT
74160: OR
74161: IFFALSE 74165
// exit ;
74163: GO 74255
// vehicle := IsInUnit ( driver ) ;
74165: LD_ADDR_VAR 0 3
74169: PUSH
74170: LD_VAR 0 1
74174: PPUSH
74175: CALL_OW 310
74179: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74180: LD_VAR 0 1
74184: PPUSH
74185: LD_STRING \
74187: PUSH
74188: LD_INT 0
74190: PUSH
74191: LD_INT 0
74193: PUSH
74194: LD_INT 0
74196: PUSH
74197: LD_INT 0
74199: PUSH
74200: LD_INT 0
74202: PUSH
74203: LD_INT 0
74205: PUSH
74206: EMPTY
74207: LIST
74208: LIST
74209: LIST
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: PUSH
74215: LD_STRING E
74217: PUSH
74218: LD_INT 0
74220: PUSH
74221: LD_INT 0
74223: PUSH
74224: LD_VAR 0 3
74228: PUSH
74229: LD_INT 0
74231: PUSH
74232: LD_INT 0
74234: PUSH
74235: LD_INT 0
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: PUSH
74247: EMPTY
74248: LIST
74249: LIST
74250: PPUSH
74251: CALL_OW 446
// end ;
74255: LD_VAR 0 2
74259: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74260: LD_INT 0
74262: PPUSH
74263: PPUSH
// if not driver or not IsInUnit ( driver ) then
74264: LD_VAR 0 1
74268: NOT
74269: PUSH
74270: LD_VAR 0 1
74274: PPUSH
74275: CALL_OW 310
74279: NOT
74280: OR
74281: IFFALSE 74285
// exit ;
74283: GO 74375
// vehicle := IsInUnit ( driver ) ;
74285: LD_ADDR_VAR 0 3
74289: PUSH
74290: LD_VAR 0 1
74294: PPUSH
74295: CALL_OW 310
74299: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74300: LD_VAR 0 1
74304: PPUSH
74305: LD_STRING \
74307: PUSH
74308: LD_INT 0
74310: PUSH
74311: LD_INT 0
74313: PUSH
74314: LD_INT 0
74316: PUSH
74317: LD_INT 0
74319: PUSH
74320: LD_INT 0
74322: PUSH
74323: LD_INT 0
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: LIST
74333: LIST
74334: PUSH
74335: LD_STRING E
74337: PUSH
74338: LD_INT 0
74340: PUSH
74341: LD_INT 0
74343: PUSH
74344: LD_VAR 0 3
74348: PUSH
74349: LD_INT 0
74351: PUSH
74352: LD_INT 0
74354: PUSH
74355: LD_INT 0
74357: PUSH
74358: EMPTY
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: PPUSH
74371: CALL_OW 447
// end ;
74375: LD_VAR 0 2
74379: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74380: LD_INT 0
74382: PPUSH
74383: PPUSH
74384: PPUSH
// tmp := [ ] ;
74385: LD_ADDR_VAR 0 5
74389: PUSH
74390: EMPTY
74391: ST_TO_ADDR
// for i in units do
74392: LD_ADDR_VAR 0 4
74396: PUSH
74397: LD_VAR 0 1
74401: PUSH
74402: FOR_IN
74403: IFFALSE 74441
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74405: LD_ADDR_VAR 0 5
74409: PUSH
74410: LD_VAR 0 5
74414: PPUSH
74415: LD_VAR 0 5
74419: PUSH
74420: LD_INT 1
74422: PLUS
74423: PPUSH
74424: LD_VAR 0 4
74428: PPUSH
74429: CALL_OW 256
74433: PPUSH
74434: CALL_OW 2
74438: ST_TO_ADDR
74439: GO 74402
74441: POP
74442: POP
// if not tmp then
74443: LD_VAR 0 5
74447: NOT
74448: IFFALSE 74452
// exit ;
74450: GO 74500
// if asc then
74452: LD_VAR 0 2
74456: IFFALSE 74480
// result := SortListByListAsc ( units , tmp ) else
74458: LD_ADDR_VAR 0 3
74462: PUSH
74463: LD_VAR 0 1
74467: PPUSH
74468: LD_VAR 0 5
74472: PPUSH
74473: CALL_OW 76
74477: ST_TO_ADDR
74478: GO 74500
// result := SortListByListDesc ( units , tmp ) ;
74480: LD_ADDR_VAR 0 3
74484: PUSH
74485: LD_VAR 0 1
74489: PPUSH
74490: LD_VAR 0 5
74494: PPUSH
74495: CALL_OW 77
74499: ST_TO_ADDR
// end ;
74500: LD_VAR 0 3
74504: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74505: LD_INT 0
74507: PPUSH
74508: PPUSH
// task := GetTaskList ( mech ) ;
74509: LD_ADDR_VAR 0 4
74513: PUSH
74514: LD_VAR 0 1
74518: PPUSH
74519: CALL_OW 437
74523: ST_TO_ADDR
// if not task then
74524: LD_VAR 0 4
74528: NOT
74529: IFFALSE 74533
// exit ;
74531: GO 74575
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74533: LD_ADDR_VAR 0 3
74537: PUSH
74538: LD_VAR 0 4
74542: PUSH
74543: LD_INT 1
74545: ARRAY
74546: PUSH
74547: LD_INT 1
74549: ARRAY
74550: PUSH
74551: LD_STRING r
74553: EQUAL
74554: PUSH
74555: LD_VAR 0 4
74559: PUSH
74560: LD_INT 1
74562: ARRAY
74563: PUSH
74564: LD_INT 4
74566: ARRAY
74567: PUSH
74568: LD_VAR 0 2
74572: EQUAL
74573: AND
74574: ST_TO_ADDR
// end ;
74575: LD_VAR 0 3
74579: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74580: LD_INT 0
74582: PPUSH
// SetDir ( unit , d ) ;
74583: LD_VAR 0 1
74587: PPUSH
74588: LD_VAR 0 4
74592: PPUSH
74593: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74597: LD_VAR 0 1
74601: PPUSH
74602: LD_VAR 0 2
74606: PPUSH
74607: LD_VAR 0 3
74611: PPUSH
74612: LD_VAR 0 5
74616: PPUSH
74617: CALL_OW 48
// end ;
74621: LD_VAR 0 6
74625: RET
// export function ToNaturalNumber ( number ) ; begin
74626: LD_INT 0
74628: PPUSH
// result := number div 1 ;
74629: LD_ADDR_VAR 0 2
74633: PUSH
74634: LD_VAR 0 1
74638: PUSH
74639: LD_INT 1
74641: DIV
74642: ST_TO_ADDR
// if number < 0 then
74643: LD_VAR 0 1
74647: PUSH
74648: LD_INT 0
74650: LESS
74651: IFFALSE 74661
// result := 0 ;
74653: LD_ADDR_VAR 0 2
74657: PUSH
74658: LD_INT 0
74660: ST_TO_ADDR
// end ;
74661: LD_VAR 0 2
74665: RET
// export function SortByClass ( units , class ) ; var un ; begin
74666: LD_INT 0
74668: PPUSH
74669: PPUSH
// if not units or not class then
74670: LD_VAR 0 1
74674: NOT
74675: PUSH
74676: LD_VAR 0 2
74680: NOT
74681: OR
74682: IFFALSE 74686
// exit ;
74684: GO 74781
// result := [ ] ;
74686: LD_ADDR_VAR 0 3
74690: PUSH
74691: EMPTY
74692: ST_TO_ADDR
// for un in units do
74693: LD_ADDR_VAR 0 4
74697: PUSH
74698: LD_VAR 0 1
74702: PUSH
74703: FOR_IN
74704: IFFALSE 74779
// if GetClass ( un ) = class then
74706: LD_VAR 0 4
74710: PPUSH
74711: CALL_OW 257
74715: PUSH
74716: LD_VAR 0 2
74720: EQUAL
74721: IFFALSE 74748
// result := Insert ( result , 1 , un ) else
74723: LD_ADDR_VAR 0 3
74727: PUSH
74728: LD_VAR 0 3
74732: PPUSH
74733: LD_INT 1
74735: PPUSH
74736: LD_VAR 0 4
74740: PPUSH
74741: CALL_OW 2
74745: ST_TO_ADDR
74746: GO 74777
// result := Replace ( result , result + 1 , un ) ;
74748: LD_ADDR_VAR 0 3
74752: PUSH
74753: LD_VAR 0 3
74757: PPUSH
74758: LD_VAR 0 3
74762: PUSH
74763: LD_INT 1
74765: PLUS
74766: PPUSH
74767: LD_VAR 0 4
74771: PPUSH
74772: CALL_OW 1
74776: ST_TO_ADDR
74777: GO 74703
74779: POP
74780: POP
// end ; end_of_file
74781: LD_VAR 0 3
74785: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74786: LD_VAR 0 1
74790: PUSH
74791: LD_INT 200
74793: DOUBLE
74794: GREATEREQUAL
74795: IFFALSE 74803
74797: LD_INT 299
74799: DOUBLE
74800: LESSEQUAL
74801: IFTRUE 74805
74803: GO 74837
74805: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74806: LD_VAR 0 1
74810: PPUSH
74811: LD_VAR 0 2
74815: PPUSH
74816: LD_VAR 0 3
74820: PPUSH
74821: LD_VAR 0 4
74825: PPUSH
74826: LD_VAR 0 5
74830: PPUSH
74831: CALL 32029 0 5
74835: GO 74914
74837: LD_INT 300
74839: DOUBLE
74840: GREATEREQUAL
74841: IFFALSE 74849
74843: LD_INT 399
74845: DOUBLE
74846: LESSEQUAL
74847: IFTRUE 74851
74849: GO 74913
74851: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74852: LD_VAR 0 1
74856: PPUSH
74857: LD_VAR 0 2
74861: PPUSH
74862: LD_VAR 0 3
74866: PPUSH
74867: LD_VAR 0 4
74871: PPUSH
74872: LD_VAR 0 5
74876: PPUSH
74877: LD_VAR 0 6
74881: PPUSH
74882: LD_VAR 0 7
74886: PPUSH
74887: LD_VAR 0 8
74891: PPUSH
74892: LD_VAR 0 9
74896: PPUSH
74897: LD_VAR 0 10
74901: PPUSH
74902: LD_VAR 0 11
74906: PPUSH
74907: CALL 29917 0 11
74911: GO 74914
74913: POP
// end ;
74914: PPOPN 11
74916: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74917: LD_VAR 0 1
74921: PPUSH
74922: LD_VAR 0 2
74926: PPUSH
74927: LD_VAR 0 3
74931: PPUSH
74932: LD_VAR 0 4
74936: PPUSH
74937: LD_VAR 0 5
74941: PPUSH
74942: CALL 32011 0 5
// end ; end_of_file
74946: PPOPN 5
74948: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74949: LD_VAR 0 1
74953: PPUSH
74954: LD_VAR 0 2
74958: PPUSH
74959: LD_VAR 0 3
74963: PPUSH
74964: LD_VAR 0 4
74968: PPUSH
74969: LD_VAR 0 5
74973: PPUSH
74974: LD_VAR 0 6
74978: PPUSH
74979: CALL 18725 0 6
// end ;
74983: PPOPN 6
74985: END
